title:Model Checking a Fault-Tolerant Startup Algorithm: From Design Exploration
To Exhaustive Fault Simulation
author:Wilfried Steiner and
John M. Rushby and
Maria Sorea and
Holger Pfeifer
Model Checking a Fault-Tolerant Startup Algorithm:
From Design Exploration To Exhaustive Fault Simulation∗
Wilfried Steiner
Real-Time Systems Group,
Technische Universit¨at Wien, Austria
PI:EMAIL
John Rushby
Computer Science Laboratory,
SRI International, USA
PI:EMAIL
Maria Sorea, Holger Pfeifer
Abteilung K¨unstliche Intelligenz,
Universi¨at Ulm, Germany
sorea|PI:EMAIL
Abstract
The increasing performance of modern model-checking
tools offers high potential for the computer-aided design
of fault-tolerant algorithms. Instead of relying on human
imagination to generate taxing failure scenarios to probe
a fault-tolerant algorithm during development, we deﬁne
the fault behavior of a faulty process at its interfaces to
the remaining system and use model checking to automati-
cally examine all possible failure scenarios. We call this ap-
proach “exhaustive fault simulation”. In this paper we illus-
trate exhaustive fault simulation using a new startup algo-
rithm for the Time-Triggered Architecture (TTA) and show
that this approach is fast enough to be deployed in the de-
sign loop. We use the SAL toolset from SRI for our exper-
iments and describe an approach to modeling and analyz-
ing fault-tolerant algorithms that exploits the capabilities of
tools such as this.
1. Introduction
Design of fault-tolerant distributed real-time algorithms
is notoriously difﬁcult and error-prone: the combinations of
fault arrivals, interleaving of concurrent events, and vari-
ations in real-time durations lead to a case explosion that
taxes the intellectual capacity of human designers. These
difﬁculties are compounded when optimizing numerical
parameters—e.g., seeking to determine a minimum safe
timeout, or the time required to stabilize after an upset.
In an idealized world, algorithms are derived by a sys-
tematic process guided by formal correctness arguments
but, in contemporary reality, designers generally have an in-
formal argument in mind and develop the ﬁnal algorithm
and its parameters by mentally exploring local variations
against that argument and against scenarios that highlight
∗
This work was supported by the European projects NEXT TTA (IST-
2001-32111) and ARTIST (IST-2001-34820), and by NASA Langley
Research Center (contract NAS1-00079).
tricky cases. Exploration against scenarios can be partially
automated using a simulator or rapid prototype and such au-
tomation may increase the number of scenarios that can be
examined and the reliability of the examination.
Automated examination of scenarios can be taken still
further using model checking. In model checking, the
case explosion problem is transformed into one of state
explosion—meaning that the time and space required to run
the model checker grows rapidly and eventually becomes
infeasible as the size of the model grows, so that abstrac-
tion, or consideration of only limited numbers of fault cases
and real-time delays, must be employed.
When using model checking in the design loop, the chal-
lenge is to cover a usefully large number of scenarios in a
very short time (say a few minutes), so that the designers
can perform an interactive exploration of the design space
without losing concentration or patience. As a design be-
comes consolidated, attention shifts from exploration to ver-
iﬁcation and the challenge for model checking becomes one
of covering a truly exhaustive set of scenarios for a realisti-
cally accurate model in reasonable time (say, overnight).
Whether model checking is performed for exploration
or veriﬁcation, a matter of concern is the ease of encod-
ing the algorithm, its fault model, and assumed environment
in the language of the model checker: most of these lan-
guages were originally developed for specifying hardware
circuits or programs and are less than ideal for describing
fault-tolerant algorithms and their fault models at appropri-
ate levels of abstraction.
In this paper, we describe an approach that provides a
“dial” so that a single model can be used in model check-
ing for both rapid exploration and exhaustive veriﬁcation,
and we illustrate how the model can be used both to check
correctness and to help estimate worst-case performance pa-
rameters. We also demonstrate how the latest generation of
model-checking tools (we use SAL from SRI) meets the
challenges of providing both a convenient modeling lan-
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:29:32 UTC from IEEE Xplore.  Restrictions apply. 
guage and the performance to examine trillions of states in
a few hours. We illustrate our approach using a new startup
algorithm for the Time-Triggered Architecture (TTA).
This paper is structured as follows. In Section 2, we
present an overview of the Time-Triggered Architecture
and discuss its startup in an informal manner. In Section
3, we discuss generic modeling issues and introduce a for-
mal model of the startup algorithm in the SAL language.
The desired correctness properties are speciﬁed in Section
4 and Section 5 presents and discusses the results of our
model-checking experiments. We conclude in Section 6.
2. The Time-Triggered Architecture
The Time-Triggered Architecture (TTA) supplies a foun-
dation for fault-tolerant safety-critical applications, such as
control functions in cars and aircraft. It provides an ultra-
reliable logical bus connecting the “host” computers that
implement the chosen application, and a set of services
that make it relatively simple to organize the application
in a fault-tolerant manner. Each host computer attaches to
the system through a TTA controller; the combination of
a host and its controller is called a node. Nodes communi-
cate over replicated shared media, called channels. While
initially the channels were physical buses, current realiza-
tions favor a “star” topology with a central guardian at the
hub of each star. The central guardians provide more ro-
bust defense against error propagation than the previous ap-
proach that located simpler guardians at each node [8]. The
node controllers and the central guardians collectively im-
plement the Time-Triggered Protocol TTP/C that guaran-
tees correct operation of the system despite faults in some
of the hosts, controllers, or central guardians.
2.1. Synchronization and Startup
A TTA system or “cluster” with 4 nodes and 2 central
guardians is depicted on the left of Figure 1. During steady-
state operation, the nodes execute a time-division multiple-
access (TMDA) strategy to access the medium; that is, the
access pattern (called the TDMA schedule) is deﬁned a pri-
ori, as depicted on the right of Figure 1.
A.4
A.1
A.3
A.2
TDMA round n
... A.4
A.1 A.2
A.3 A.4 A.1 A.2
...
Time
… Node
… Guardian
Cluster
Cluster Communication
Figure 1. TTA cluster and TDMA schedule
Each TTA node has a mapping from its local time to the
slots in the cyclic TDMA schedule; in particular, each node
i knows the local time at which the slot for node k begins—
we can denote this time by si(k). Operation of TTA de-
pends on synchronization of the local clocks, which sim-
ply means that for any two nonfaulty nodes i and j, the in-
stants when i’s local clock reads si(k) and when j’s clock
reads sj(k) must occur very close together in real time.
The synchronization problem is to adjust the values of
si (or, equivalently, the local clocks) so that nodes remain
synchronized despite the drift of their hardware clocks (due
to their oscillators operating at slightly different rates). The
synchronization problem is well understood and many al-
gorithms to solve it have been developed and formally ver-
iﬁed, including the algorithm employed in TTA [10].
The startup problem is to establish values for the func-
tions si (or, equivalently, for the local clocks) as the nodes
ﬁrst power up so that they quickly become synchronized;
the restart problem is to reestablish synchronization after
transient faults have afﬂicted the values of si or the local
clocks at one or more (or all) nodes. Here, we are concerned
with algorithms for the startup and restart problems.
2.2. Fault Hypothesis
Since TTA systems are designed for safety-critical appli-
cations, a sufﬁcient degree of fault tolerance must be pro-
vided. The fault hypothesis (i.e., the number, arrival rate,
and kind of faults to be tolerated) of the basic bus-based
TTP/C protocol is discussed in [2]. Fault injection studies
[1] showed that additional mechanisms, such as the cen-
tral guardians of the star topology [3], are necessary to
achieve the demanding requirements for fault tolerance in
the aerospace and automotive industries.
With respect to the protocol execution, each central
guardian has full knowledge of the parameters of its at-
tached nodes, and can therefore judge whether a message
(which is sometimes called a “frame” in TTA) sent by a
node is valid or not (i.e., is sent within its assigned slot
and satisﬁes certain consistency checks). Guardians relay
valid messages to all the other nodes on their channel, so
that from the nodes’ point of view, the channel looks like
a broadcast bus. A basic TTA system uses two channels,
whose central guardians are connected by a pair of inter-
links that allow each guardian to receive data broadcast on
the other channel. The interlinks are needed in the algorithm
developed here to avoid scenarios in which one clique of
nodes is synchronized to one guardian and another set to the
other, with each clique unaware of the existence of the other.
Each interlink is unidirectional: that is, the central guardian
of channel X receives data from channel ¯X on one inter-
link but cannot transmit on this interlink, and vice versa.
The implementation of a central guardian makes it phys-
ically impossible for it to create a correct frame by itself (it
lacks the hardware to construct the CRC that is part of a
valid frame), or to store a previously sent frame or delay it
for an arbitrarily long duration. Thus, if a central guardian
receives a correct frame over the interlink connection from
the other channel it can be assured that the frame was sent
by a correct sender and the data can be used safely.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:29:32 UTC from IEEE Xplore.  Restrictions apply. 
Using central guardians, TTA is claimed to tolerate one
faulty component (the “single failure hypothesis”); this can
be either a faulty node, which is allowed to send arbitrary
signals for arbitrary durations with arbitrary frequency, or a
faulty channel (including its guardian), which is allowed to
show the same behavior as a faulty node with the restriction
that it cannot create correct frames, nor delay frames for an
arbitrary duration.
2.3. Fault-Tolerant Startup
A basic solution to the startup problem is for nodes that
see no trafﬁc for some time to send a “wakeup” message that
carries their own identity. This message provides a com-
mon event that all nodes can use as a baseline for their lo-
cal clocks, and the identity of the sender indicates the posi-
tion in the TDMA schedule to which this time corresponds.
Of course, two nodes may decide to send wakeup mes-
sages at approximately the same time, and these messages
will “collide” on the channel. In a bus-based TTA, the
signals from colliding messages physically overlay on the
medium, but propagation delays cause different nodes to see
the signals at different times so that collision detection can
be unreliable. In a star topology, the central guardians arbi-
trate collisions and select just one message from any that ar-
rive at approximately the same time to forward to the other
nodes. However, each central guardian arbitrates indepen-
dently, so nodes can receive different messages on the two
channels at approximately the same time; resolving these
“logical collisions” is a task of the startup algorithm.
In addition to collisions, the startup algorithm must deal
with faulty nodes that may send “wakeup” messages at in-
appropriate times, masquerade as other nodes, and generally
fail to follow the algorithm. Many of these faults can be de-
tected and masked only with sophisticated guardians; the
central guardians of the star topology are a cost-effective
way to provide this protection. However, this additional
fault tolerance exacts a price: the central guardians must
synchronize with the nodes during startup. Because the
communication system is replicated and there are two cen-
tral guardians, it is particularly crucial that a faulty node
must not be able to initiate or inﬁltrate a startup sequence to
cause the central guardians to start at different positions in
the TDMA schedule. And, of course, one of the guardians
could itself be faulty.
Fault-tolerant startup of a TTA system clearly requires
rather intricate algorithms in the nodes and guardians. A
suitable “node only” startup algorithm for the bus topology
is implemented in TTP/C [11]. A startup algorithm with
central guardians was designed as part of the star topol-
ogy developed in the NEXT TTA project. Model check-
ing assisted in the design loop of this algorithm and led
to a more resource-efﬁcient solution: whereas the initial
guardian startup algorithm required 1 timer per node, the ﬁ-
nal version uses only a single timer. Model checking also
was used in assurance of the overall algorithm and con-
ﬁrmed the need to modify the algorithm used in the nodes
to overcome certain partitioning scenarios (see Section 5.2).
The ﬁnished algorithms are outlined below and the model-
checking activity that assisted in their development and as-
surance is the focus of the rest of the paper.
i
and τ coldstart
2.3.1. Node Startup The state-machine of the startup al-
gorithm executed in the nodes is depicted in Figure 2(a).
It consists of 4 states: INIT, LISTEN, COLDSTART, and
ACTIVE. Each node i has two unique timeout parameters,
τ listen
that are deﬁned in the following recur-
i
sive way (based on the unique value τ startup
Startup Delay: τ startup
is unique to each node. It is given
by the duration of all TDMA slots from the beginning of
the TDMA round up to the beginning of the slot for node i
(cid:1)
(whose duration is τ slot
):
).
i
i
i
τ startup
i
=
0
(cid:2)i
j=1 τ slot
j−1
i = 0
i > 0
i
i
Listen Timeout: τ listen
is given by the sum of the node’s
and 2 TDMA rounds (each of dura-
startup delay τ startup
= τ startup
tion τ round): τ listen
Cold-Start Timeout: τ coldstart
the node’s startup delay τ startup
τ coldstart
i
+ 2τ round.
is given by the sum of
and 1 TDMA round:
+ τ round.
= τ startup
i
i
i
i
i
i
When a node is powered-on it either has to integrate to
an already synchronous set, or it must initiate or wait for a
cold-start to be executed. Each newly started (or restarted)
node i, after performing some internal initialization in the
INIT state, transits to LISTEN (Transition 1.1) and lis-
tens for the unique duration τ listen
to determine whether
there is a synchronous set of nodes communicating on the
medium. During synchronous operation i-frames (this is the
name of a kind of message, it has nothing to do with node
i) are transmitted periodically that carry the current proto-
col state, including position in the TDMA round. If the node
receives such an i-frame, it adjusts its state to the frame
contents and is thus synchronized to the synchronous set
(2.2); if not, the cold-start mechanism is executed. Cold-
start is done in two phases. During the ﬁrst phase (while
in the LISTEN state), each node listens for a “cold-start”