This came up in a twitter thread with @gaearon and @aweary and we decided to
move the discussion here. I’ll try to summarize the conversation so far below.
The basic question was whether a build tool could extract the static parts of
a component tree ahead of time into HTML, and ship smaller JS to the client
with only the dynamic parts. This could have benefits for code size and
hydration performance for statically generated sites. It would likely have a
smaller impact on dynamically generated server rendered sites, but it’s
possible there are static parts that could be extracted there too (e.g.
header, footer, article content, etc.).
There are a couple potential ways to go about this, each with various
tradeoffs.
  1. Do something like what ember and other template compilers do and generate some kind of IR from components and inject dynamic content into slots at runtime. This would likely require a lot of changes to React itself. @aweary seems to be working on some kind of compiler to do just that.
  2. Rewrite the JS with something like prepack, similar to what @trueadm did here (though it sounded like the output was quite variable in size).
  3. Rewrite the component tree to generate a different but equivalent tree with the static parts hoisted out. Similar to this babel plugin but taken much farther to work at a whole tree level instead of a component level. Also to remove the static parts from JS altogether and generate static HTML to avoid duplicate content in JS and unnecessary hydration cost. Some way to allow static HTML in the middle of a tree to be reused might be needed, but maybe compiling to multiple roots would work?
Obviously a lot more thought is needed here. As @gaearon noted, a solid
definition of “static” will be important for this discussion. Mine is that it
could be rendered to HTML and never updated by JS, but perhaps people have
other ideas.