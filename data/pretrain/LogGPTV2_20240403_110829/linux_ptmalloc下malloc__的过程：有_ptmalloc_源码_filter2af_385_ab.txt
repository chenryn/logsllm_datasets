  2. 先考虑 unsorted bin 再考虑 last remainder 
    * 遍历 unsorted bin（FIFO） 
      * 获得 unsorted bin 中最后一个 chunk 的指针：victim
      * 获得 unsorted bin 中倒数第二个 chunk 的指针 ：bck
      * 判断 victim 指向的 chunk 是否符合要求：av->system_mem  实际上在遍历时会把 unsorted bin 清空，将其中的 chunk 放到对应的 bin 中
    * 考虑last remainder 
      * 切割 last remainder，用 victim 指向符合要求的部分；剩下部分称为新的 last remainder
      * 更新所有记录了与 last remainder 有关的数据结构的内容，如：新的 last remainder 的大小、位置、指针，更新 unsorted bin，更新 av 中记录的 remainder 的位置
      * 设置 victim 的头部，设置新的 remainder 的头部、prev_size字段
      * 将 victim 指向的 chunk 取下，分配并设置为 mem模式
      * 如果设置了perturb_type, 则将获取到的chunk初始化为 perturb_type ^ 0xff
申请 small chunk 并执行到了大循环
  1. 尝试合并 fast chunk
  2. 先考虑 last remainder（如果它是 unsorted 中唯一的一个chunk，并且其大小足够分割出所需的空间） 再考虑 unsorted bin 
    * 考虑last remainder 
      * 切割 last remainder，用 victim 指向符合要求的部分；剩下部分称为新的 last remainder
      * 更新所有记录了与 last remainder 有关的数据结构的内容，如：新的 last remainder 的大小、位置、指针，更新 unsorted bin，更新 av 中记录的 remainder 的位置
      * 设置 victim 的头部，设置新的 remainder 的头部、prev_size字段
      * 将 victim 指向的 chunk 取下，分配并设置为 mem模式
      * 如果设置了perturb_type, 则将获取到的chunk初始化为 perturb_type ^ 0xff
    * 遍历 unsorted bin（FIFO） 
      * 获得 unsorted bin 中最后一个 chunk 的指针：victim
      * 获得 unsorted bin 中倒数第二个 chunk 的指针 ：bck
      * 判断 victim 指向的 chunk 是否符合要求：av->system_mem bk) != unsorted_chunks(av)) {
                // victim 为 unsorted bin 的最后一个 chunk
                // bck 为 unsorted bin 的倒数第二个 chunk
                bck = victim->bk;
                // 判断得到的 chunk 是否满足要求，不能过小，也不能过大
                // 一般 system_mem 的大小为132K
                if (__builtin_expect(chunksize_nomask(victim)  av->system_mem, 0))
                    malloc_printerr(check_action, "malloc(): memory corruption",
                                    chunk2mem(victim), av);
                // 得到victim对应的chunk大小。
                size = chunksize(victim);
  * 考虑 last remainder
                /*
                   If a small request, try to use last remainder if it is the
                   only chunk in unsorted bin.  This helps promote locality for
                   runs of consecutive small requests. This is the only
                   exception to best-fit, and applies only when there is
                   no exact fit for a small chunk.
                 */
                if (in_smallbin_range(nb) && bck == unsorted_chunks(av) &&
                    victim == av->last_remainder &&
                    (unsigned long) (size) > (unsigned long) (nb + MINSIZE)) {
                    /* split and reattach remainder */
                    // 获取新的 remainder 的大小
                    remainder_size          = size - nb;
                    // 获取新的 remainder 的位置
                    remainder               = chunk_at_offset(victim, nb);
                    // 更新 unsorted bin 的情况
                    unsorted_chunks(av)->bk = unsorted_chunks(av)->fd = remainder;
                    // 更新 av 中记录的 last_remainder
                    av->last_remainder                                = remainder;
                    // 更新last remainder的指针
                    remainder->bk = remainder->fd = unsorted_chunks(av);
                    if (!in_smallbin_range(remainder_size)) {
                        remainder->fd_nextsize = NULL;
                        remainder->bk_nextsize = NULL;
                    }
                    // 设置victim的头部，
                    set_head(victim, nb | PREV_INUSE |
                                         (av != &main_arena ? NON_MAIN_ARENA : 0));
                    // 设置 remainder 的头部
                    set_head(remainder, remainder_size | PREV_INUSE);
                    // 设置记录 remainder 大小的 prev_size 字段，因为此时 remainder 处于空闲状态。
                    set_foot(remainder, remainder_size);
                    // 细致的检查，非调试状态下没有作用
                    check_malloced_chunk(av, victim, nb);
                    // 将 victim 从 chunk 模式转化为mem模式
                    void *p = chunk2mem(victim);
                    // 如果设置了perturb_type, 则将获取到的chunk初始化为 perturb_type ^ 0xff
                    alloc_perturb(p, bytes);
                    return p;
                }
申请 large chunk 并执行到了大循环
  1. 在 large bins 中从小到大进行扫描，找到合适的 large bin
  2. 获得当前 bin 中最大的 chunk 的指针：victim
  3. 遍历链表，直到找到最后一个不小于所需空间大小的 chunk ，找到符合大小的最前面的那个chunk
  4. 切割，计算剩余部分的大小 
    * unlink
    * 剩余部分作为 remainder 放入 unsorted bin 中，并设置好相关信息
    * 将获得 chunk 设置为 mem模式
            /*
               If a large request, scan through the chunks of current bin in
               sorted order to find smallest that fits.  Use the skip list for this.
             */
            if (!in_smallbin_range(nb)) {
                bin = bin_at(av, idx);
                /* skip scan if empty or largest chunk is too small */
                // 如果对应的 bin 为空或者其中的chunk最大的也很小，那就跳过
                // first(bin)=bin->fd 表示当前链表中最大的chunk
                if ((victim = first(bin)) != bin &&
                    (unsigned long) chunksize_nomask(victim) >=
                        (unsigned long) (nb)) {
                    // 反向遍历链表，直到找到第一个不小于所需chunk大小的chunk
                    victim = victim->bk_nextsize;
                    while (((unsigned long) (size = chunksize(victim)) bk_nextsize;
                    /* Avoid removing the first entry for a size so that the skip
                       list does not have to be rerouted.  */
                    // 如果最终取到的chunk不是该bin中的最后一个chunk，并且该chunk与其前面的chunk
                    // 的大小相同，那么我们就取其前面的chunk，这样可以避免调整bk_nextsize,fd_nextsize
                    //  链表。因为大小相同的chunk只有一个会被串在nextsize链上。
                    if (victim != last(bin) &&
                        chunksize_nomask(victim) == chunksize_nomask(victim->fd))
                        victim = victim->fd;
                    // 计算分配后剩余的大小
                    remainder_size = size - nb;
                    // 进行unlink
                    unlink(av, victim, bck, fwd);
                    /* Exhaust */
                    // 剩下的大小不足以当做一个块
                    // 很好奇接下来会怎么办？
                    if (remainder_size fd;
                        // 判断 unsorted bin 是否被破坏。
                        if (__glibc_unlikely(fwd->bk != bck)) {
                            errstr = "malloc(): corrupted unsorted chunks";
                            goto errout;
                        }
                        remainder->bk = bck;
                        remainder->fd = fwd;
                        bck->fd       = remainder;
                        fwd->bk       = remainder;
                        // 如果不处于small bin范围内，就设置对应的字段
                        if (!in_smallbin_range(remainder_size)) {
                            remainder->fd_nextsize = NULL;
                            remainder->bk_nextsize = NULL;
                        }
                        // 设置分配的chunk的标记
                        set_head(victim,
                                 nb | PREV_INUSE |
                                     (av != &main_arena ? NON_MAIN_ARENA : 0));
                        // 设置remainder的上一个chunk，即分配出去的chunk的使用状态
                        // 其余的不用管，直接从上面继承下来了
                        set_head(remainder, remainder_size | PREV_INUSE);
                        // 设置remainder的大小
                        set_foot(remainder, remainder_size);
                    }
                    // 检查
                    check_malloced_chunk(av, victim, nb);
                    // 转换为mem状态
                    void *p = chunk2mem(victim);
                    // 如果设置了perturb_type, 则将获取到的chunk初始化为 perturb_type ^ 0xff
                    alloc_perturb(p, bytes);
                    return p;
                }
            }
在更大的 bin 中寻找 chunk
> 程序运行到了这里，说明在所需空间对应的 bin 中找不到对应大小的 chunk，需要到储存了更大的chunk 的 bin 中寻找空间
  1. 获取对应的 bin
  2. 获取当前索引在 binmap 中的 block 索引，检查 map（获取当前 block 对应的映射，可以得知对应的 bin 是否有空闲块）
  3. 遍历 block，直到找到符合条件的 map
  4. 根据 map 找到合适的 chunk
  5. 切割chunk，取出；剩余部分如果够最小chunk的大小，放入 unsorted bin；剩余部分不够最小chunk会怎样？？？？？？？？？？？？？？？？？？？？？？？？？？？
  6. 将获得的chunk设置为 mem 模式
考虑 top chunk
> 如果上面的所有方法都无法获得符合条件的 chunk
  1. 获得当前 top chunk 的位置与大小 
    * 如果大于所需空间 
      * 切割： 
        * 切割剩余部分大于最小chunk要求：切割，分配，剩余部分放入 unsorted bin
        * 切割剩余部分小于最小chunk要求：检查是否可以合并 fast chunk，如果可以则合并，并放入对应的 bin 中，否则需要执行 sysmalloc()向操作系统再申请一点内存
    * 如果小于所需空间 
      * 向操作系统申请内存
## 本文参考
审核人：yiwang 编辑：边边