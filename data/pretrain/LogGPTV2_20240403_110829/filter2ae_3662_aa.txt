# tcache机制
tcache全名 _thread local caching_
，它为每个线程创建一个缓存（cache），从而实现无锁的分配算法，有不错的性能提升。lib-2.26【2.23以后】正式提供了该机制，并默认开启。
# tcache的数据结构
glibc在编译时使用`use_tcache`条件来开启tcache机制，定义了：
    #if USE_TCACHE
    /* We want 64 entries.  This is an arbitrary limit, which tunables can reduce.  */
    # define TCACHE_MAX_BINS        64      //每个线程默认使用64个单链表结构的bins
    # define MAX_TCACHE_SIZE    tidx2usize (TCACHE_MAX_BINS-1)
    /* Only used to pre-fill the tunables.  */
    # define tidx2usize(idx)    (((size_t) idx) * MALLOC_ALIGNMENT + MINSIZE - SIZE_SZ)
    /* When "x" is from chunksize().  */
    # define csize2tidx(x) (((x) - MINSIZE + MALLOC_ALIGNMENT - 1) / MALLOC_ALIGNMENT)
    /* When "x" is a user-provided size.  */
    # define usize2tidx(x) csize2tidx (request2size (x))
    /* With rounding and alignment, the bins are...
       idx 0   bytes 0..24 (64-bit) or 0..12 (32-bit)
       idx 1   bytes 25..40 or 13..20
       idx 2   bytes 41..56 or 21..28
       etc.  */     //64位机器以16B递增，从24B到1032B，32位机器以8B递增，从12B到512B，因此tcache bin只用于存放non-large的chunk
    /* This is another arbitrary limit, which tunables can change.  Each
       tcache bin will hold at most this number of chunks.  */
    # define TCACHE_FILL_COUNT 7        //每个bins最多存放7个chunk
    #endif
新增了两个结构体`tcache_entry`和`tcache_pertheread_struct`：
    /* We overlay this structure on the user-data portion of a chunk when
       the chunk is stored in the per-thread cache.  */
    typedef struct tcache_entry
    {
      struct tcache_entry *next;        //每个被放入相应bins中的chunk都会在其用户数据中包含一个tcache_entry(FD指针)。指向同bins中的下一个chunk，构成单链表
    } tcache_entry;
    /* There is one of these for each thread, which contains the
       per-thread cache (hence "tcache_perthread_struct").  Keeping
       overall size low is mildly important.  Note that COUNTS and ENTRIES
       are redundant (we could have just counted the linked list each
       time), this is for performance reasons.  */
    typedef struct tcache_perthread_struct
    {
      char counts[TCACHE_MAX_BINS];     //数组counts用于存放每个bins中的chunk数量
      tcache_entry *entries[TCACHE_MAX_BINS];   //数组entries用于放置64个bins
    } tcache_perthread_struct;
    static __thread tcache_perthread_struct *tcache = NULL;
## 触发在tcache中放入chunk的操作
  * free时，在fastbin操作之前进行，如果chunk size符合要求，并且对应的bins还没有装满，则将其放入
        #if USE_TCACHE
    {
    size_t tc_idx = csize2tidx (size);
    if (tcache
    && tc_idx counts[tc_idx] counts[tc_idx] fd;
                else
              {
                REMOVE_FB (fb, pp, tc_victim);
                if (__glibc_unlikely (tc_victim == NULL))
                  break;
              }
                tcache_put (tc_victim, tc_idx);
              }
          }
        #endif
  *     * smallbin中的情况与fastbin相似，双链表中剩余的chunk会被填充到tcache bin中，直到上限。
                #if USE_TCACHE
        /* While we're here, if we see other chunks of the same size,
           stash them in the tcache.  */
        size_t tc_idx = csize2tidx (nb);
        if (tcache && tc_idx counts[tc_idx] bk;
                set_inuse_bit_at_offset (tc_victim, nb);
                if (av != &main_arena)
              set_non_main_arena (tc_victim);
                bin->bk = bck;
                bck->fd = bin;
                tcache_put (tc_victim, tc_idx);
                  }
          }
          }
        #endif
  *     * binning code（chunk合并等其他情况）中，每个符合要求的chunk都会优先被放入tcache，而不是直接返回（除非tcache被装满）。寻找结束后，tcache会返回其中一个。 
                #if USE_TCACHE
            /* Fill cache first, return to user only if cache fills.
           We may return one of these chunks later.  */
            if (tcache_nb
            && tcache->counts[tc_idx] entries[tc_idx] != NULL)
      {
        return tcache_get (tc_idx);
      }
    DIAG_POP_NEEDS_COMMENT;
    #endif
  * bining code 中，如果在 tcache 中放入 chunk 达到上限，则会直接返回最后一个chunk 
        #if USE_TCACHE
      /* If we've processed as many chunks as we're allowed while
     filling the cache, return one of the cached ones.  */
      ++tcache_unsorted_count;
      if (return_cached
      && mp_.tcache_unsorted_limit > 0
      && tcache_unsorted_count > mp_.tcache_unsorted_limit)
    {
      return tcache_get (tc_idx);
    }
    #endif
当然默认情况下没有限制，所以这段代码也不会执行：
        .tcache_unsorted_limit = 0 /* No limit.  */
  * binning code 结束后，如果没有直接返回（如上），那么如果有至少一个符合要求的 chunk 被找到，则返回最后一个。 
        #if USE_TCACHE
        /* If all the small chunks we found ended up cached, return one now.  */
        if (return_cached)
    {
      return tcache_get (tc_idx);
    }
    #endif
**tcache 中的 chunk 不会被合并，无论是相邻 chunk，还是 chunk 和 top chunk。因为这些 chunk 会被标记为
inuse。**
# tcache的安全性
上面提到的放入chunk`tcache_put()`和取出chunk`tcache_get()`
    /* Caller must ensure that we know tc_idx is valid and there's room
       for more chunks.  */
    static __always_inline void
    tcache_put (mchunkptr chunk, size_t tc_idx)
    {
      tcache_entry *e = (tcache_entry *) chunk2mem (chunk);
      assert (tc_idx next = tcache->entries[tc_idx];
      tcache->entries[tc_idx] = e;
      ++(tcache->counts[tc_idx]);
    }
    /* Caller must ensure that we know tc_idx is valid and there's
       available chunks to remove.  */
    static __always_inline void *
    tcache_get (size_t tc_idx)
    {
      tcache_entry *e = tcache->entries[tc_idx];
      assert (tc_idx entries[tc_idx] > 0);
      tcache->entries[tc_idx] = e->next;
      --(tcache->counts[tc_idx]);
      return (void *) e;
    }
对tcache的操作在free和malloc中往往都处于很靠前的位置，导致原来的许多有效性检查都被无视了。所以存在安全隐患。
## tcache_dup
    #include 
    #include 
    int main() {
        void *p1 = malloc(0x10);
        fprintf(stderr, "1st malloc(0x10): %p\n", p1);
        fprintf(stderr, "Freeing the first one\n");
        free(p1);
        fprintf(stderr, "Freeing the first one again\n");
        free(p1);
        fprintf(stderr, "2nd malloc(0x10): %p\n", malloc(0x10));
        fprintf(stderr, "3rd malloc(0x10): %p\n", malloc(0x10));
    }
运行结果：
    1st malloc(0x10): 0x5561ddcc4260
    Freeing the first one
    Freeing the first one again     //double free惹
    2nd malloc(0x10): 0x5561ddcc4260
    3rd malloc(0x10): 0x5561ddcc4260
gdb调试：  
第一次malloc后
    pwndbg> x/10gx 0x555555756250
    0x555555756250: 0x0000000000000000  0x0000000000000021
    0x555555756260: 0x0000000000000000  0x0000000000000000