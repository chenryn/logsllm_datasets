**作者：京东安全 Dawn Security Lab**

## 前言
国际机器人联盟（IFR）将机器人分为工业机器人和服务机器人两大类。工业机器人主要用于自动化制造领域，如焊接和装配；服务机器人则应用于非制造领域，以提供服务为核心，包括个人/家用服务机器人（如扫地机器人）、商用服务机器人（如接待/巡检机器人）、物流/仓储机器人（如搬运/分拣机器人）以及医疗服务机器人（如运送/辅助机器人）。根据 IFR 的《World Robotics 2020》报告预测，服务机器人将继续保持高速发展。

与传统工业机器人相比，服务机器人的工作环境更加开放，网络连接更丰富，功能应用也更为智能。随着服务机器人在多个领域的推广应用，其安全性、数据保护和隐私问题日益受到关注。当前，大多数服务机器人基于开源的机器人操作系统 ROS 构建，因此 ROS 系统的安全性也成为研究热点。本文将重点介绍 ROS 及其安全演进，特别是 ROS 安全风险和威胁、对应的安全方案及未来发展趋势。

## ROS 背景知识

### ROS 发展简介
ROS（Robot Operating System）虽然名为操作系统，但实际上是一种开源的机器人软件中间件。它通过集成各种软件库、协议和工具，构建了一个适合多种机器人的通用软件框架，提高了代码复用率并降低了开发难度。ROS 广泛应用于机器人、无人机和自动驾驶等领域。

ROS 项目的起源可以追溯到斯坦福大学的 STAIR 和 PR 项目。2007 年，Willow Garage 公司加入合作，并基于早期 ROS 原型开发了 PR2 产品。2010 年 1 月，ROS 1.0 首个版本发布，同年 7 月 PR2 产品开始销售。2012 年，开源机器人基金会 OSRF 成立，2013 年 ROS 项目移交给 OSRF（后更名为 Open Robotics），并一直维护至今。

ROS 有两个主要版本：ROS 1.0 和 ROS 2.0。为了保持稳定的开发环境，ROS 版本发布通常与 Ubuntu 发行版同步。2020 年发布的 Noetic 是 ROS 1.0 的最后一个长期支持（LTS）版本。未来，ROS 社区将主要关注 ROS 2.0 的发布和维护，最新 LTS 版本为 Foxy。

### ROS 架构简介

#### ROS 1.0 架构
ROS 1.0 的设计目标是解决因缺乏通用软件组件导致的软件复用率低和开发量巨大的问题。其应用场景主要集中在专业用户（如科研团队）、封闭环境（如实验室）、单机器人以及无实时性要求的场景。安全并未纳入其设计目标。

ROS 1.0 的核心架构是基于消息的松耦合、分布式系统。关键概念包括：
- **Node**：执行特定任务的进程。一个可执行程序可以创建一个或多个节点。
- **Master**：特殊节点，提供全局管理功能和服务，如参数服务、节点查找和消息注册等。
- **Message**：节点之间的通信消息体，类似于操作系统的消息。
- **Topic**：消息发布和接收的载体，采用发布-订阅机制，实现异步通信。
- **Service**：另一种基于消息的通信机制，采用请求-应答机制，实现同步通信。

#### ROS 2.0 架构
随着 ROS 1.0 和各种机器人产品的广泛应用，新的需求不断涌现，如多机器人支持、嵌入式平台支持、实时性需求、商用产品质量和开放环境等。同时，开源社区也出现了许多新技术，如 DDS（Data Distribution Service）数据分发服务。在此背景下，ROS 重新设计并开发了 2.0 版本。

ROS 2.0 相比 ROS 1.0 的主要改进包括：
1. 新特性：支持多机器人系统、良好的通信实时性、商用级代码质量、嵌入式平台支持。
2. 取消 Master 节点，实现去中心化。
3. 引入 DDS 中间件，替换 ROS 1.0 自研的消息通信机制。
4. 支持多种主机操作系统，如 Linux、Windows、macOS 和 RTOS。
5. 安全性：DDS 协议包含五项安全标准，ROS 2 利用这些特性解决了身份认证、加密通信和访问控制等已知风险。

### ROS 系统搭建
ROS 作为中间件，需要运行在主机操作系统之上。目前官方支持的主机操作系统包括 Ubuntu Linux、Windows 和 macOS。以 Ubuntu 为例，ROS 支持通过 `apt` 包管理和源码安装两种方式。读者可以参考相关文档进行安装并运行示例体验 ROS 机制。此外，业界还有丰富的机器人仿真环境，如 TurtleBot3 Simulation，感兴趣的读者可以自行参考。

## 机器人安全分析

### 安全研究
机器人系统是一种 Cyber-Physical System（信息物理系统），特点是网络领域的威胁最终可能影响到物理世界的安全。我们回顾了业界关于机器人安全的研究文章，并将其分为三个阶段：

**第一阶段**（2008-2012 年）：ROS 发展初期，研究对象相对零散具体，主要针对特定机器人应用场景的威胁分析，如救援机器人、家用机器人、远程医疗机器人和无人机等。风险分析主要集中在远程通信和控制安全方面，例如高效的远程认证和远程医疗 ITP 协议。此外，也有对家用机器人和无人机产品的系统级安全和隐私分析。这些研究反映了当时机器人缺乏统一底层框架和通用远程架构的情况。

**第二阶段**（2013-2017 年）：ROS 1.0 发展成熟期，出现了大量面向 ROS 机器人的安全分析和方案。研究对象更加聚焦于 ROS 框架，并呈现出许多新特征。2012 年 Defcon@20 会议上，研究人员对 ROS 小车进行了攻击测试，结果显示攻击者可以成功发送指令控制小车，并出现了一些无法分辨是攻击还是软件异常的情况。这一测试验证了 ROS 系统的已知安全风险（如无身份认证、明文通信等），也反映了信息物理系统的复杂性。该测试开启了对 ROS 的安全研究热潮，并呈现出从单一机器人场景到共性安全问题分析、从特定机器人架构到通用 ROS 框架分析、从应用层方案到通信层方案等多个新趋势。在此阶段，ROS 1.0 的主要安全风险充分暴露，如匿名通信无身份认证、消息明文传输、缺少访问控制等。Open Robotics 的 CEO Brian Gerkey 在 2016 年的 ROS-Industrial Conference 上表示：“如果你声称在 ROS 1 中发现了安全漏洞，那你在撒谎；因为 ROS 1 根本就没有安全性。”

在此期间，还出现了多个针对 ROS 1.0 主要风险的安全方案，如 roauth、ROSRV 和 SROS 等。2017 年的一篇文章《The Role of Security in Human-Robot Shared Environments: A Case Study in ROS-based Surveillance Robots》综合考虑了风险消除方案、定制化安全需求和全系统设计。

**第三阶段**（2018 年后）：随着 ROS 2.0 架构升级和 DDS 集成，安全研究呈现两个特点：一是研究对象从 ROS 1.0 过渡到 ROS 2.0，二是对安全方案性能的分析。ROS 2.0 采用 DDS 替换了 ROS 1.0 的发布-订阅通信机制。DDS 本身有安全协议规范，因此 ROS 2.0 的安全主要基于 DDS-Security。然而，默认情况下 DDS-Security 不启用，需要手动配置并重新编译。

一篇题为《Robot Operating System 2: The need for a holistic security approach to robotic architectures》的文章综合分析了 ROS 2 系统的安全风险，并对启用 DDS-Security 和安全配置项对性能的影响进行了定性分析。另一篇题为《Message encryption in robot operating system: Collateral effects of hardening mobile robots》的文章评估了三种算法（3DES、AES 和 Blowfish）对不同类型消息加密后的性能影响，提出了根据不同消息类型选择加密算法的观点。另一篇题为《Security and Performance Considerations in ROS 2: A Balancing Act》的文章对比了 ROS 2、ROS 2 + DDS Security Enable 和 ROS 2 + VPN 三种场景下的通信性能指标，结果显示启用 DDS-Security 后性能有所下降。尽管如此，ROS 2 + DDS-Security 实际上可以根据安全需求进行精细化配置，从而优化性能。

### 威胁建模
基于业界对机器人系统安全的研究，ROS 社区创建了 ROS 2 Threat Model 威胁分析模型，对基于 ROS 2 的机器人系统进行了全方位的威胁建模。该模型采用业界标准的 STRIDE 和 DREAD 分析方法，定义系统元素并绘制数据流图，再对各元素进行威胁分析并制定风险消除方案。分析维度全面，涵盖了内外部通信、远程控制/应用接口、主机系统和内核、端侧数据存储、云服务和云存储、云-端通信服务等。下图展示了 ROS 2 系统的通用 STRIDE 数据流图。实际上，针对具体产品，由于通信方式、业务功能和云-端服务部署等方面的差异，数据流图可能会更加复杂，需要具体分析。可以参考 Turtlebot3 的威胁分析。

### 安全设计
在上述安全研究和威胁建模分析的基础上，业界对 ROS 安全方案的设计主要有两种思路：一种是网络隔离，即利用专网、VPN 和防火墙等手段，构建 ROS 网络隔离区，缩小风险面；另一种是基于 ROS 框架进行安全加固，代表性的方案包括 ROS 1.0 阶段的 rosauth、ROSRV 和 SROS，以及 ROS 2.0 阶段的 SROS2。