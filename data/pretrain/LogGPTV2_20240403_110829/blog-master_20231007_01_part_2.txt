\set lat random(260000,310000)  
\set ts random(1696118400,1696723200)  
insert into user_pos (uid,pos,ts) values (:uid, ST_SetSRID(ST_MakePointM(:lon/10000.0, :lat/10000.0, :ts),4326), to_timestamp(:ts)) on conflict do nothing;  
```  
```  
pgbench -M prepared -n -r -P 1 -f ./t1.sql -c 7 -j 7 -t 10000000  
```  
```  
transaction type: ./t1.sql  
scaling factor: 1  
query mode: prepared  
number of clients: 7  
number of threads: 7  
number of transactions per client: 10000000  
number of transactions actually processed: 70000000/70000000  
latency average = 0.114 ms  
latency stddev = 1.000 ms  
initial connection time = 20.032 ms  
tps = 60838.762552 (without initial connection time)  
statement latencies in milliseconds:  
         0.000  \set uid random(1,100000)  
         0.000  \set lon random(1180000,1220000)  
         0.000  \set lat random(260000,310000)  
         0.000  \set ts random(1696118400,1696723200)  
         0.114  insert into user_pos (uid,pos,ts) values (:uid, ST_SetSRID(ST_MakePointM(:lon/10000.0, :lat/10000.0, :ts),4326), to_timestamp(:  
```  
生成100个用户`ID: 1-100` 在 `(2023-10-01, 2023-10-08)` 密集的每个用户1440条轨迹/天, 即`14.4*7`万条密集轨迹.  经度范围121.0-121.5, 纬度范围 30-30.5   
```  
-- 经纬度取到小数点后4位  
-- 位置序号使用时间戳  
vi t2.sql  
\set uid random(1,100)  
\set lon random(1210000,1215000)  
\set lat random(300000,305000)  
\set ts random(1696118400,1696723200)  
insert into user_pos (uid,pos,ts) values (:uid, ST_SetSRID(ST_MakePointM(:lon/10000.0, :lat/10000.0, :ts),4326), to_timestamp(:ts)) on conflict do nothing;  
```  
```  
pgbench -M prepared -n -r -P 1 -f ./t2.sql -c 7 -j 7 -t 144000   
```  
```  
transaction type: ./t2.sql  
scaling factor: 1  
query mode: prepared  
number of clients: 7  
number of threads: 7  
number of transactions per client: 144000  
number of transactions actually processed: 1008000/1008000  
latency average = 0.063 ms  
latency stddev = 0.098 ms  
initial connection time = 17.631 ms  
tps = 110956.369050 (without initial connection time)  
statement latencies in milliseconds:  
         0.000  \set uid random(1,100)  
         0.000  \set lon random(1210000,1215000)  
         0.000  \set lat random(300000,305000)  
         0.000  \set ts random(1696118400,1696723200)  
         0.063  insert into user_pos (uid,pos,ts) values (:uid, ST_SetSRID(ST_MakePointM(:lon/10000.0, :lat/10000.0, :ts),4326), to_timestamp(:  
```  
3、嫌疑人表, 存储上过嫌疑人名单的旧犯信息       
```  
create unlogged table users_class1 (   -- 为测试方便使用unlogged table  
  id int8 primary key, -- 用户ID  
  sfz text unique, -- 身份证号, 随机生成   
  info text, -- 其他信息, 随即填充  
  ts timestamp -- 时间戳  
);  
```  
假设有1000位上过嫌疑人名单的旧犯, `ID: 51-1050` .  生成数据:    
```  
insert into users_class1 select * from users where id>=51 and id<=1050;  
```  
数据情况如下:  
```  
postgres=# select count(*) from user_pos;  
  count     
----------  
 70958079  
(1 row)  
postgres=# \dt+  
                                         List of relations  
 Schema |      Name       | Type  |  Owner   | Persistence | Access method |  Size   | Description   
--------+-----------------+-------+----------+-------------+---------------+---------+-------------  
 public | spatial_ref_sys | table | postgres | permanent   | heap          | 6936 kB |   
 public | user_pos        | table | postgres | unlogged    | heap          | 6301 MB |   
 public | users           | table | postgres | unlogged    | heap          | 9928 kB |   
 public | users_class1    | table | postgres | unlogged    | heap          | 152 kB  |   
(4 rows)  
postgres=# \di+  
                                                    List of relations  
 Schema |         Name         | Type  |  Owner   |      Table      | Persistence | Access method |  Size   | Description   
--------+----------------------+-------+----------+-----------------+-------------+---------------+---------+-------------  
 public | spatial_ref_sys_pkey | index | postgres | spatial_ref_sys | permanent   | btree         | 208 kB  |   
 public | user_pos_pkey        | index | postgres | user_pos        | unlogged    | btree         | 1520 MB |   
 public | user_pos_uid_ts_key  | index | postgres | user_pos        | unlogged    | btree         | 2690 MB |   
 public | users_class1_pkey    | index | postgres | users_class1    | unlogged    | btree         | 48 kB   |   
 public | users_class1_sfz_key | index | postgres | users_class1    | unlogged    | btree         | 72 kB   |   
 public | users_pkey           | index | postgres | users           | unlogged    | btree         | 2216 kB |   
 public | users_sfz_key        | index | postgres | users           | unlogged    | btree         | 4848 kB |   
(7 rows)  
```  
### 实验通过GIS轨迹相似伴随|时态分析对拐卖、诱骗场景进行侦查  
假设受害人ID为1 (根据上面的测试数据选择, 有某一天的密集轨迹, 不在嫌疑人ID范围.).      
假设受害人 `2023-10-08 00:00:00` 失联.    
1 在拐卖、诱骗过程中, 押运受害人的嫌疑人, 和受害人必定有轨迹伴随特征    
将失联前最后1天的数据点组合成轨迹.  通过轨迹计算出与受害人有过接触的人的ID. 以及:     
- 在哪些时间点或时间段接触过? 即伴随时间段  (开源版本PostGIS只能得到1个点, 有兴趣的同学请继续研究Ganos插件. )    
- 在哪些位置接触过? 即伴随路线和相应长度    (开源版本PostGIS只能得到1个点(真要干得把轨迹拆成小段, 计算每一段的, 非常麻烦), 不能得到多个接触点, 有兴趣的同学请继续研究Ganos插件. )    
- 接触时的距离是多少? 即伴随距离   (开源版本PostGIS只能得到1个点的接触距离, 不能得到多个接触点, 有兴趣的同学请继续研究Ganos插件. )    
- 在伴随过程中, 在什么时间、什么位置驻留过? 分别驻留了多长时间?  (开源版本PostGIS无法计算, 有兴趣的同学请继续研究Ganos插件. )    
PostGIS 轨迹计算函数如下:    
- ST_MakeLine, 将点聚合为轨迹  
- boolean ST_IsValidTrajectory(geometry line), Tests if a geometry encodes a valid trajectory. A valid trajectory is represented as a LINESTRING with measures (M values). The measure values must increase from each vertex to the next. 是否为有效轨迹  
- float8 ST_ClosestPointOfApproach(geometry track1, geometry track2), Returns the smallest measure at which points interpolated along the given trajectories are at the smallest distance. 两条轨迹最近时的M值  
- geometry ST_LocateAlong(geometry geom_with_measure, float8 measure, float8 offset = 0), Returns the location(s) along a measured geometry that have the given measure values. The result is a Point or MultiPoint. 输入M值, 返回该M值对应的位置  
- float8 ST_DistanceCPA(geometry track1, geometry track2), Returns the minimum distance two moving objects have ever been each other. 两条轨迹最近时的距离, 单位取决于轨迹使用的坐标系  
- boolean ST_CPAWithin(geometry track1, geometry track2, float8 dist), Tests whether two moving objects have ever been closer than the specified distance. 两条轨迹的最近距离是否小于给定值, 值的单位取决于轨迹使用的坐标系  
- float ST_DistanceSphere(geometry geomlonlatA, geometry geomlonlatB, float8 radius=6371008), Returns minimum distance in meters between two lon/lat points. Uses a spherical earth and radius derived from the spheroid defined by the SRID. Faster than ST_DistanceSpheroid, but less accurate. 将地球当成正球, 计算两个点的球面距离, 单位米.   
- float ST_DistanceSpheroid(geometry geomlonlatA, geometry geomlonlatB, spheroid measurement_spheroid=WGS84), Returns minimum distance in meters between two lon/lat geometries given a particular spheroid. 根据所处地域选择srid, 可以更精确的计算两个点的球面距离, 默认采用WGS84, 单位米.    
- st_astext, Return the Well-Known Text (WKT) representation of the geometry/geography without SRID metadata. wkT形式geo类型显示.   
- ST_Transform, Return a new geometry with coordinates transformed to a different spatial reference system. 转换geo坐标系.   
- st_setsrid, Set the SRID on a geometry. 设置srid  