Di(cid:29)erent from mechanical disks, NAND (cid:30)ash has several unique
characteristics. First, it has an erase-before-write design. Speci(cid:27)cally,
overwriting the same (cid:30)ash cell is not feasible before an erasure
is performed over it. Note that a block erasure will re-set all the
bits in the entire block to “1” bits. Second, the unit for a read/pro-
gram operation is a page (which can be 512 bytes, 2KB, or 4KB),
but the unit for an erase operation is a block, which consists of
multiple (typically 32, 64, or 128) pages. Therefore, overwriting
a page requires (cid:27)rst erasing the entire encompassing block. If a
few other pages of this block are (cid:27)lled with valid data, erasing
this block requires copying the valid data elsewhere and writing
them back after the erase operation is performed, leading to sig-
ni(cid:27)cant write ampli(cid:27)cation. To mitigate write ampli(cid:27)cation, (cid:30)ash
usually adopts an out-of-place update strategy [17], in which when
a logical disk region is overwritten, it is simply re-mapped to a
new empty page without erasing the original invalid page. Third,
each (cid:30)ash block has a (cid:27)nite number (e.g., 10K) of program-erase
(P/E) cycles. In other words, a (cid:30)ash block will be worn out if the
number of programs/erases performed over it exceeds a certain
threshold. Therefore, wear leveling is required to distribute pro-
grammings/erasures evenly across the entire (cid:30)ash to prolong its
lifetime.
2.2 Flash Translation Layer (FTL)
There are two common options of using NAND Flash. The (cid:27)rst
option is to build a (cid:27)le system speci(cid:27)cally for raw NAND Flash (i.e.,
a (cid:30)ash (cid:27)le system). Popular (cid:30)ash (cid:27)le systems include YAFFS [42],
UBIFS [26] and F2FS [21]. However, a (cid:30)ash (cid:27)le system usually
requires directly accessing the raw (cid:30)ash memory, which is unfortu-
nately rarely supported by modern mobile devices. For example, the
most recent Android phones like Nexus 6P do not allow a direct ac-
cess to the raw (cid:30)ash; only the old versions of Android phones (e.g.,
Nexus One and Nexus S) can allow such an access [7]. Therefore,
(cid:30)ash (cid:27)le systems are becoming less and less popular.
The second option is to emulate the (cid:30)ash medium as a block
device by exposing a block-based access interface, such that the
(cid:30)ash medium can be compatible with traditional block-based (cid:27)le
Figure 1: The architecture of a (cid:30)ash-based block device
systems (e.g., EXT4 and FAT32). All the popular (cid:30)ash storage prod-
ucts (e.g., eMMC cards, SD cards, MicroSD card, SSD drives and
USB sticks) are manufactured following this manner. In this option,
a piece of special (cid:30)ash (cid:27)rmware, Flash Translation Layer (FTL), is
introduced between the (cid:27)le system and the raw NAND (cid:30)ash to
transparently handle the unique nature of NAND (cid:30)ash. In this work,
we mainly consider (cid:30)ash storage devices which are exposed as block
devices using FTL. We call this type of (cid:30)ash devices “(cid:30)ash-based
block devices”. Figure 1 shows the architecture of a (cid:30)ash-based
block device. In general, FTL implements four key functions: ad-
dress translation, garbage collection, wear leveling and bad block
management.
Address translation. To reduce write ampli(cid:27)cation, (cid:30)ash storage
usually implements an out-of-place update mechanism, in which to
overwrite data stored on a page, the new data will be programmed
to a fresh empty page, while the page storing the stale data will be
simply marked as invalid. Therefore, the location of valid data may
change over time, which requires maintaining mappings between
the addresses (i.e., Logical Block Address, or LBA) from upper layer
and the actual (cid:30)ash addresses (Physical Block Address, or PBA).
FTL manages such mappings and provides a block-based access
interface.
Garbage collection. The out-of-place update mechanism used in
(cid:30)ash may result in a large number of invalid pages/blocks over time,
which need to be reclaimed. This is usually handled by garbage
collection. To reclaim blocks, garbage collection usually periodi-
cally performs the following operations [37]: 1) select those blocks
satisfying certain reclaim criteria as victim blocks; 2) copy the valid
data stored in the victim blocks to free blocks, and update the
corresponding mappings; 3) erase the victim blocks.
Wear leveling. Each (cid:30)ash block can only be programmed/erased
for a limited number of times (i.e., a limited P/E cycles). To prolong
the lifetime of (cid:30)ash memory, FTL usually performs wear leveling
by distributing programmings/erasures evenly among the entire
(cid:30)ash. The existing wear leveling strategies mainly include dynamic
and static wear leveling. Dynamic wear leveling always writes data
to those blocks which have less P/E cycles. Comparatively, static
wear leveling will periodically swap hot and cold blocks [43].
Bad block management. As (cid:30)ash cells degrade over time, (cid:30)ash
memory will eventually develop blocks that are not able to reliably
store data. Those blocks should be marked as “bad” and avoid being
used to store data. During manufacturing, the entire (cid:30)ash blocks
File SystemI/O with LBANAND Flash I/O with PBAAddress TranslationGarbage CollectionWear LevelingBad Block ManagementFTLFlash-based block deviceSession J4:  Flash SecurityCCS’17, October 30-November 3, 2017, Dallas, TX, USA2219will be scanned and an initial table of bad blocks will be generated.
During run time, the FTL will monitor the newly generated bad
blocks and add them to the bad block table [36].
2.3 Hidden Volume Technique
The hidden volume technique can be used to defend against a coer-
cive adversary, and is implemented in popular encryption software
like VeraCrypt [10] and TrueCrypt [38]. It works as follows: Two
volumes, a public volume and a hidden volume, are created on
the disk. The public volume is encrypted using a decoy key and is
placed across the entire disk. The hidden volume is encrypted using
a secret true key and is placed towards the end of the disk from
a secret o(cid:29)set. The sensitive data being protected will be stored
in the hidden volume. Note that the entire disk will be (cid:27)lled with
random data initially. Upon being coerced by the adversary, to
protect the true key, the victim can simply disclose the decoy key.
Using the decoy key, the adversary can decrypt the public volume,
and is not able to detect the existence of the hidden volume, since
he/she cannot di(cid:29)erentiate the encrypted hidden volume from the
randomness being (cid:27)lled initially.
A signi(cid:27)cant issue for the hidden volume technique is, the data
written to the public volume may over-write the data stored in
the hidden volume, since the existence of the hidden volume is
unknown to the system which manages the public volume. This
work achieves deniability in mobile devices equipped with (cid:30)ash-
based block devices by: 1) adapting the hidden volume technique
to (cid:30)ash translation layer; 2) mitigating the over-write issue by
carefully tuning block allocation and garbage collection in FTL. In
the remainder of this paper, we use a hidden volume-based PDE
system to represent a PDE system which relies on the hidden volume
technique to achieve deniability.
3 ATTACK SCENARIOS
In this section, we provide concrete attack scenarios, in which
the adversary is able to compromise deniability provided by prior
PDE systems for mobile devices [6, 31, 33, 34, 44]. For each attack
scenario, we assume the adversary is able to obtain the physical
image of the raw NAND (cid:30)ash [4].
3.1 Attacking the Hidden Volume-based PDE
Systems for Mobile Devices
When attacking a hidden volume-based PDE system for mobile
devices equipped with (cid:30)ash-based block devices, the adversary can
identify three types of (cid:30)ash blocks (Figure 2) by having access to
the raw NAND (cid:30)ash:
• Type-I: blocks (cid:27)lled with random data.
• Type-II: blocks with a few pages (cid:27)lled with random data
followed by pages (cid:27)lled with all “1” bits.
• Type-III: blocks (cid:27)lled with all “1” bits.
Note that a block erasure in (cid:30)ash will re-set the entire block to all “1”
bits (Sec. 2.1). Thus, the type-III blocks are those which have been
erased to prepare for new writing requests, which do not contain
any valid data. In the following, we show that by analyzing the
type-I and type-II blocks, the adversary may be able to compromise
Figure 2: Three types of blocks in the (cid:30)ash physical image
(Type-I: all random data; Type-II: a few random data fol-
lowed by all “1” bits; Type-III: all “1” bits)
the deniability provided by the existing mobile PDE systems [6, 33,
34, 44].
3.1.1 A(cid:29)ack 1: Deniability Compromises from Analyzing
Type-I and Type-II Blocks. In hidden volume technique, any data
that cannot be decrypted by the decoy key (i.e., the key for decrypt-
ing public volume) will be interpreted as random data to deny the
existence of the hidden volume. However, in a hidden volume-based
PDE system for mobile devices, by observing the physical image of
raw (cid:30)ash, the adversary may be able to identify a few type-I and
type-II blocks which appear to store random data but actually store
hidden sensitive data, leading to compromise of deniability.
Deniability compromises from the type-I blocks. The adver-
sary tries to decrypt the data in all the type-I blocks using the decoy
key. Without the existence of hidden volume, the adversary should
only obtain two types of decryption outcomes: 1) all the data in a
type-I block can be successfully decrypted, i.e., this is a type-I block
(cid:27)lled with non-sensitive public data; 2) all the data in a type-I block
cannot be decrypted, i.e., this is a type-I block storing random data.
However, the existing hidden volume-based PDE systems for
mobile devices access the (cid:30)ash-based block device via a block access
interface, and are thus not able to control the block allocation in
FTL. As a result, the public volume and the hidden volume may
share a common (cid:30)ash block (e.g., after having erased a block and
used a portion of the pages in this block, the public volume is
unmounted and the hidden volume is mounted, and the empty pages
in this block will be used by the sensitive data stored to the hidden
volume). Therefore, if the adversary detects a few “special” type-I
blocks, in which the data stored at a few pages can be decrypted
into meaningful public data, and the data stored at the remaining
pages cannot be decrypted (i.e., the data stored at them are purely
randomness), he/she may suspect the existence of hidden volume,
leading to compromise of deniability.
Deniability compromises from the type-II blocks. The adver-
sary tries to decrypt all the data stored in the type-II blocks using
the decoy key. Without the existence of hidden volume, the adver-
sary should be able to obtain only one type of decryption outcome:
all the random data stored in a type-II block can be successfully de-
crypted into non-sensitive public data. This is because, without the
existence of hidden volume, a type-II block can only be generated
A pageType-IType-IIRandom dataRandom data...Random dataRandom dataRandom dataRandom data...All “1”bitsAll “1”bitsAll “1”bitsAll “1”bits...All “1”bitsAll “1”bitsType-IIIA blockSession J4:  Flash SecurityCCS’17, October 30-November 3, 2017, Dallas, TX, USA2220under the following circumstance: when data are written to the
public volume, due to the erase-before-write design of (cid:30)ash storage,
a (cid:30)ash block needs to be (cid:27)rst erased to all “1” bits. If the amount of
data written to this block is smaller than the block size, they will
only occupy a few pages in this block. Therefore, if the adversary
detects a few “special” type-II blocks, in which the random data
cannot be decrypted into meaningful public data using the decoy
key, he/she may suspect the existence of hidden volume, leading to
compromise of deniability.
3.1.2 A(cid:29)ack 2: Deniability Compromises from Duplicate
Random Data. All the hidden volume-based PDE systems for mo-
bile devices [6, 33, 34, 44] deny the hidden sensitive data by random
data, which are cryptographically secure and are initially (cid:27)lled in
the entire (cid:30)ash medium. In general, the random data (cid:27)lled in (cid:30)ash
pages will not be duplicate with each other due to their randomness
nature. However, with the presence and activities of the hidden vol-
ume, the adversary may be able to (cid:27)nd out duplicate random data
among (cid:30)ash pages in the prior PDE systems, leading to compromise
of deniability.
Deniability compromises introduced by garbage collection.
Upon garbage collection, the data stored at the valid pages of a
victim block will be copied to a new free block, and this victim
block will be erased. However, for performance consideration, the
victim blocks are usually not erased immediately [8, 18]. Therefore,
duplicate data may appear in both the victim blocks which have
not yet been erased and the new blocks used to store the valid data.
When such a garbage collection is used to reclaim the data stored
in the hidden volume, the adversary may be able to detect duplicate
random data in di(cid:29)erent (cid:30)ash blocks, though he/she does not have
any knowledge of the existence of the hidden volume. This will
lead to the compromise of deniability.
Deniability compromises introduced by bad block manage-
ment. A (cid:30)ash block will be considered as “bad” due to the perma-
nent failure of one of its pages, even though all the other pages in
it still function correctly. When a block is detected as “bad”, all the
valid data being stored will be copied to a new free block. However,
most of the bad block management schemes [14, 24] simply mark
the block as bad, without removing the valid data stored in it. When
such a bad block management scheme is used in the hidden volume,
the adversary may be able to detect duplicate random data between
a normal block and a bad block, without knowing the existence of
the hidden volume. This will also lead to compromise of deniability.
3.1.3 Making A(cid:29)acks Easier: The Decreasing Amount of
Random Data. The existing hidden volume-based PDE systems
for mobile devices try to hide sensitive data in the randomness being
(cid:27)lled to the entire storage medium initially (Sec. 2.3). This implies
that the system should maintain an enough amount of randomness
over time. However, we show in the following that the expected
amount of randomness may not be maintained.
Unable to completely (cid:27)ll the entire (cid:30)ash medium with ran-
domness during initialization. During initialization, the existing
hidden volume-based PDE systems [6, 33, 34, 44] try to (cid:27)ll the entire
storage medium with randomness. To achieve this, write requests