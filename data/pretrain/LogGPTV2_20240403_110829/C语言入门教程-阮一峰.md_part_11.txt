地址（ ），可以获得⾸个成员的值 。
*p 11
由于数组的起始地址是常⽤操作， 的写法有点麻烦，C 语⾔提供了便利写法，数组名等同于起
&array[0]
始地址，也就是说，数组名就是指向第⼀个成员（ ）的指针。
array[0]
int a[5] = {11, 22, 33, 44, 55};
int* p = &a[0];
int* p = a;
上⾯示例中， 和数组名 是等价的。
&a[0] a
这样的话，如果把数组名传⼊⼀个函数，就等同于传⼊⼀个指针变量。在函数内部，就可以通过这个指针
变量获得整个数组。
函数接受数组作为参数，函数原型可以写成下⾯这样。
int sum(int arr[], int len);
int sum(int* arr, int len);
上⾯示例中，传⼊⼀个整数数组，与传⼊⼀个整数指针是同⼀回事，数组符号 与指针符号 是可以互
[] *
换的。下⼀个例⼦是通过数组指针对成员求和。
int sum(int* arr, int len) {
int i;
int total = 0;
for (i = 0; i < len; i++) {
total += arr[i];
}
return total;
}
上⾯示例中，传⼊函数的是⼀个指针 （也是数组名）和数组⻓度，通过指针获取数组的每个成员，从
arr
⽽求和。
和 运算符也可以⽤于多维数组。
* &
int a[4][2];
*(a[0]);
**a
上⾯示例中，由于 本身是⼀个指针，指向第⼆维数组的第⼀个成员 。所以， 取出
a[0] a[0][0] *(a[0])
的是 的值。⾄于 ，就是对 进⾏两次 运算，第⼀次取出的是 ，第⼆次取出的是
a[0][0] **a a * a[0]
。同理，⼆维数组的 等同于 。
a[0][0] &a[0][0] *a
注意，数组名指向的地址是不能更改的。声明数组时，编译器⾃动为数组分配了内存地址，这个地址与数
组名是绑定的，不可更改，下⾯的代码会报错。
int ints[100];
ints = NULL;
上⾯示例中，重新为数组名赋值，改变原来的内存地址，就会报错。
这也导致不能将⼀个数组名赋值给另外⼀个数组名。
int a[5] = {1, 2, 3, 4, 5};
int b[5] = a;
int b[5];
b = a;
上⾯两种写法都会更改数组 的地址，导致报错。
b
数组指针的加减法 #
C 语⾔⾥⾯，数组名可以进⾏加法和减法运算，等同于在数组成员之间前后移动，即从⼀个成员的内存地
址移动到另⼀个成员的内存地址。⽐如， 返回下⼀个成员的地址， 返回上⼀个成员的地址。
a + 1 a - 1
int a[5] = {11, 22, 33, 44, 55};
for (int i = 0; i < 5; i++) {
printf("%d\n", *(a + i));
}
上⾯示例中，通过指针的移动遍历数组， 的每轮循环每次都会指向下⼀个成员的地址， 取
a + i *(a + i)
出该地址的值，等同于 。对于数组的第⼀个成员， （即 ）等同于 。
a[i] *(a + 0) *a a[0]
由于数组名与指针是等价的，所以下⾯的等式总是成⽴。
a[b] == *(a + b)
上⾯代码给出了数组成员的两种访问⽅式，⼀种是使⽤⽅括号 ，另⼀种是使⽤指针 。
a[b] *(a + b)
如果指针变量 指向数组的⼀个成员，那么 就相当于指向下⼀个成员，这种⽅法常⽤来遍历数组。
p p++
int a[] = {11, 22, 33, 44, 55, 999};
int* p = a;
while (*p != 999) {
printf("%d\n", *p);
p++;
}
上⾯示例中，通过 让变量 指向下⼀个成员。
p++ p
注意，数组名指向的地址是不能变的，所以上例中，不能直接对 进⾏⾃增，即 的写法是错的，必须
a a++
将 的地址赋值给指针变量 ，然后对 进⾏⾃增。
a p p
遍历数组⼀般都是通过数组⻓度的⽐较来实现，但也可以通过数组起始地址和结束地址的⽐较来实现。
int sum(int* start, int* end) {
int total = 0;
while (start < end) {
total += *start;
start++;
}
return total;
}
int arr[5] = {20, 10, 5, 39, 4};
printf("%i\n", sum(arr, arr + 5));
上⾯示例中， 是数组的起始地址， 是结束地址。只要起始地址⼩于结束地址，就表示还没有
arr arr + 5
到达数组尾部。
反过来，通过数组的减法，可以知道两个地址之间有多少个数组成员，请看下⾯的例⼦，⾃⼰实现⼀个计
算数组⻓度的函数。
int arr[5] = {20, 10, 5, 39, 88};
int* p = arr;
while (*p != 88)
p++;
printf("%i\n", p - arr);
上⾯示例中，将某个数组成员的地址，减去数组起始地址，就可以知道，当前成员与起始地址之间有多少
个成员。
对于多维数组，数组指针的加减法对于不同维度，含义是不⼀样的。
int arr[4][2];
arr + 1;
arr[0] + 1
上⾯示例中， 是⼀个⼆维数组， 是将指针移动到第⼀维数组的下⼀个成员，即 。由
arr arr + 1 arr[1]
于每个第⼀维的成员，本身都包含另⼀个数组，即 是⼀个指向第⼆维数组的指针，所以
arr[0] arr[0] +
的含义是将指针移动到第⼆维数组的下⼀个成员，即 。
1 arr[0][1]
同⼀个数组的两个成员的指针相减时，返回它们之间的距离。
int* p = &a[5];
int* q = &a[1];
printf("%d\n", p - q);
printf("%d\n", q - p);
上⾯示例中，变量 和 分别是数组 5 号位置和 1 号位置的指针，它们相减等于 4 或 - 4。
p q
数组的复制 #
由于数组名是指针，所以复制数组不能简单地复制数组名。
int* a;
int b[3] = {1, 2, 3};
a = b;
上⾯的写法，结果不是将数组 复制给数组 ，⽽是让 和 指向同⼀个数组。
b a a b
复制数组最简单的⽅法，还是使⽤循环，将数组元素逐个进⾏复制。
for (i = 0; i < N; i++)
a[i] = b[i];
上⾯示例中，通过将数组 的成员逐个复制给数组 ，从⽽实现数组的赋值。
b a
另⼀种⽅法是使⽤ 函数（定义在头⽂件 ），直接把数组所在的那⼀段内存，再复制⼀
memcpy() string.h
份。
memcpy(a, b, sizeof(b));
上⾯示例中，将数组 所在的那段内存，复制给数组 。这种⽅法要⽐循环复制数组成员要快。
b a
作为函数的参数 #
声明参数数组 #
数组作为函数的参数，⼀般会同时传⼊数组名和数组⻓度。
int sum_array(int a[], int n) {
}
int a[] = {3, 5, 7, 3};
int sum = sum_array(a, 4);
上⾯示例中，函数 的第⼀个参数是数组本身，也就是数组名，第⼆个参数是数组⻓度。
sum_array()
由于数组名就是⼀个指针，如果只传数组名，那么函数只知道数组开始的地址，不知道结束的地址，所以
才需要把数组⻓度也⼀起传⼊。
如果函数的参数是多维数组，那么除了第⼀维的⻓度可以当作参数传⼊函数，其他维的⻓度需要写⼊函数
的定义。
int sum_array(int a[][4], int n) {
}
int a[2][4] = {
{1, 2, 3, 4},
{8, 9, 10, 11}
};
int sum = sum_array(a, 2);
上⾯示例中，函数 的参数是⼀个⼆维数组。第⼀个参数是数组本身（ ），这时可以不
sum_array() a[][4]
写第⼀维的⻓度，因为它作为第⼆个参数，会传⼊函数，但是⼀定要写第⼆维的⻓度 。
4
这是因为函数内部拿到的，只是数组的起始地址 ，以及第⼀维的成员数量 。如果要正确计算数组的
a 2
结束地址，还必须知道第⼀维每个成员的字节⻓度。写成 ，编译器就知道了，第⼀维每个成员
int a[][4]
本身也是⼀个数组，⾥⾯包含了 4 个整数，所以每个成员的字节⻓度就是 。
4 * sizeof(int)
变⻓数组作为参数 #
变⻓数组作为函数参数时，写法略有不同。
int sum_array(int n, int a[n]) {
}
int a[] = {3, 5, 7, 3};
int sum = sum_array(4, a);
上⾯示例中，数组 是⼀个变⻓数组，它的⻓度取决于变量 的值，只有运⾏时才能知道。所以，变
a[n] n
量 作为参数时，顺序⼀定要在变⻓数组前⾯，这样运⾏时才能确定数组 的⻓度，否则就会报错。
n a[n]
因为函数原型可以省略参数名，所以变⻓数组的原型中，可以使⽤ 代替变量名，也可以省略变量名。
*
int sum_array(int, int [*]);
int sum_array(int, int []);
上⾯两种变⻓函数的原型写法，都是合法的。
变⻓数组作为函数参数有⼀个好处，就是多维数组的参数声明，可以把后⾯的维度省掉了。
int sum_array(int a[][4], int n);
int sum_array(int n, int m, int a[n][m]);
上⾯示例中，函数 的参数是⼀个多维数组，按照原来的写法，⼀定要声明第⼆维的⻓度。但是
sum_array()
使⽤变⻓数组的写法，就不⽤声明第⼆维⻓度了，因为它可以作为参数传⼊函数。
数组字⾯量作为参数 #
C 语⾔允许将数组字⾯量作为参数，传⼊函数。
int a[] = {2, 3, 4, 5};
int sum = sum_array(b, 4);
int sum = sum_array((int []){2, 3, 4, 5}, 4);
上⾯示例中，两种写法是等价的。第⼆种写法省掉了数组变量的声明，直接将数组字⾯量传⼊函数。
{2,
是数组值的字⾯量， 类似于强制的类型转换，告诉编译器怎么理解这组值。
3, 4, 5} (int [])
全⽂完
本⽂由 简悦 SimpRead 转码，⽤以提升阅读体验，原⽂地址
字符串 语⾔教程 ⽹道
- C -
⽹道（WangDoc.com），互联⽹⽂档计划
“
⽹道（WangDoc.com），互联⽹⽂档计划
简介 #
C 语⾔没有单独的字符串类型，字符串被当作字符数组，即 类型的数组。⽐如，字符串 “Hello” 是
char
当作数组 处理的。
{'H', 'e', 'l', 'l', 'o'}
编译器会给数组分配⼀段连续内存，所有字符储存在相邻的内存单元之中。在字符串结尾，C 语⾔会⾃动
添加⼀个全是⼆进制 的字节，写作 字符，表示字符串结束。字符 不同于字符 ，前者的 ASCII
0 \0 \0 0
码是 0（⼆进制形式 ），后者的 ASCII 码是 48（⼆进制形式 ）。所以，字符串
00000000 00110000
“Hello” 实际储存的数组是 。
{'H', 'e', 'l', 'l', 'o', '\0'}
所有字符串的最后⼀个字符，都是 。这样做的好处是，C 语⾔不需要知道字符串的⻓度，就可以读取
\0
内存⾥⾯的字符串，只要发现有⼀个字符是 ，那么就知道字符串结束了。
\0
char localString[10];
上⾯示例声明了⼀个 10 个成员的字符数组，可以当作字符串。由于必须留⼀个位置给 ，所以最多只能
\0
容纳 9 个字符的字符串。
字符串写成数组的形式，是⾮常麻烦的。C 语⾔提供了⼀种简写法，双引号之中的字符，会被⾃动视为字
符数组。
{'H', 'e', 'l', 'l', 'o', '\0'}
"Hello"
上⾯两种字符串的写法是等价的，内部存储⽅式都是⼀样的。双引号⾥⾯的字符串，不⽤⾃⼰添加结尾字
符 ，C 语⾔会⾃动添加。
\0
注意，双引号⾥⾯是字符串，单引号⾥⾯是字符，两者不能互换。如果把 放在单引号⾥⾯，编译器
Hello
会报错。
'Hello'
另⼀⽅⾯，即使双引号⾥⾯只有⼀个字符（⽐如 ），也依然被处理成字符串（存储为 2 个字节），⽽
"a"
不是字符 （存储为 1 个字节）。
'a'
如果字符串内部包含双引号，则该双引号需要使⽤反斜杠转义。
"She replied, \"It does.\""
反斜杠还可以表示其他特殊字符，⽐如换⾏符（ ）、制表符（ ）等。
\n \t
"Hello, world!\n"
如果字符串过⻓，可以在需要折⾏的地⽅，使⽤反斜杠（ ）结尾，将⼀⾏拆成多⾏。
\
"hello \
world"
上⾯示例中，第⼀⾏尾部的反斜杠，将字符串拆成两⾏。
上⾯这种写法有⼀个缺点，就是第⼆⾏必须顶格书写，如果想包含缩进，那么缩进也会被计⼊字符串。为
了解决这个问题，C 语⾔允许合并多个字符串字⾯量，只要这些字符串之间没有间隔，或者只有空格，C
语⾔会将它们⾃动合并。