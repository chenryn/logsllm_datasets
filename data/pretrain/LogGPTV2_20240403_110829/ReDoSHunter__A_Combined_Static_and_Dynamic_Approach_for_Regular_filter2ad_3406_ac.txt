rithm CheckSLQ. CheckSLQ detects that β starts with the
sub-regex a+, as shown in Figure 5, which triggers the ﬁrst
condition, and constructs the preﬁx string x = ε, the inﬁx
string y = ‘a’, and the sufﬁx string z = ‘!’ such that x ∈ L(ε),
y ∈ L(a+), and xyz /∈ L(β). After that, CheckSLQ generates
the attack string x + y × NP + z, where the repetition number
NP is set to 10000.
3.4 Dynamic Validation
The principles of dynamic validation6 (i.e., the algorithm
verifyAtk) are: (i) to measure the time t for the source regex
α to match the attack string atkStr, (ii) to check whether the
corresponding threshold TP (for polynomial vulnerability)
or TE (for exponential vulnerability) is triggered according
to the vulnerability degree vulDeg, that is, if t > TP (or cor-
responding t > TE ) is satisﬁed7, then verifyAtk returns true,
otherwise returns false.
The step of dynamic validation is to address two issues.
First, the static analysis can produce false positives. Note that
the ﬁve patterns (i.e., NQ, EOD, EOA, POA, and SLQ) pro-
posed in §3.3 are necessary but not necessarily sufﬁcient con-
ditions for judging whether a regex α is ReDoS-vulnerable,
6Our dynamic validation phase supports testing on the built-in regex
engines in Python 2/3, Java 7-15, Node.js 6-14. Here we choose to test on
the built-in regex engine in Java-8.
7For more sufﬁcient validation, verifyAtk stops when the threshold is
reached.
3854    30th USENIX Security Symposium
USENIX Association
and dynamic validation is required as a supplement. Second,
the transformed expressions may have been relaxed, detecting
more ReDoS-vulnerabilities than the source regexes. So if
dynamic validation is missing, false positives may occur. In
other words, our dynamic validation phase can guarantee that
the veriﬁed regexes must be actually vulnerable. For example,
the regex α = ab*bc triggers the POA pattern, thus static
diagnosis will judge that α is a polynomial vulnerability of
ReDoS, and generate an attack string atkStr = ‘a’ + ‘b’ × NP
+ ‘!’. However, the attack string atkStr does not cause catas-
trophic backtracking, so α is not a real ReDoS-vulnerable
regex. The time consumption of dynamic validation for failed
attacking is acceptable. For the example α = ab*bc, it takes
only 0.278ms for α to match atkStr = ‘a’ + ‘b’ × NP + ‘!’.
The time consumed is highly acceptable.
Coming back to the example in §3.2 and §3.3, at last,
verifyAtk tests and veriﬁes that the matching time of the ﬁve
attack strings exceeds the corresponding thresholds. There-
fore, ReDoSHunter diagnoses that the regex α is ReDoS-
vulnerable, and then return the corresponding diagnosis infor-
mation list Γ, as shown in Table 6.
Table 6: The Diagnostic Information List Γ Reported by Re-
DoSHunter.
No. Pattern Vuln. Degree Vuln. Position Attack String
#1 NQ
Exponential
(?:\d+)+
‘a\n\ta’ + ‘1’ × 30 + ‘!’
#2 EOD
Exponential
(\s|\t)+
‘a\n\ta1’ + ‘\t’ × 30 + ‘!’
#3 EOA
Exponential
(a*b+a*)+
‘a\n\ta1\t’ + ‘ba’ × 30 + ‘!’
#4
#5
POA
SLQ
Polynomial
\s+(?=\t)\s+
‘a’ + ‘\t\t’ × 10000 + ‘!’
Polynomial
a+?
‘a’ × 10000 + ‘!’
4 Experiments
In the experiments, we evaluate ReDoSHunter by studying
three research questions:
RQ1. How is the effectiveness and efﬁciency of Re-
DoSHunter on large-scale regex sets? A good Re-
DoS detection tool should be able to efﬁciently distin-
guish ReDoS-vulnerable regexes from ReDoS-free ones
over a large amount of regexes. Thus, we compared Re-
DoSHunter with seven state-of-the-art baselines on three
real-world datasets in terms of precision and recall. We
show the impact of different regex engines on the effec-
tiveness of ReDoS detection. We also show the preva-
lence of multiple ReDoS-vulnerabilities in real-world
regexes. Furthermore, we evaluate the effectiveness of
generated attack strings by means of their attack success
rates. (§4.2)
bilities and Exposures (CVE) system is a database re-
lated to information security, publishing the conﬁrmed
vulnerabilities on open-source projects and the found
ReDoS-vulnerabilities. Thus we conducted experiment
on the conﬁrmed ReDoS-related CVEs to compare the
capabilities of existing works and ReDoSHunter. (§4.3)
RQ3. How is the effectiveness of ReDoSHunter on explor-
ing unknown vulnerabilities? On top of RQ2, we fur-
ther explore the capability of ReDoSHunter on disclos-
ing unknown ReDoS-vulnerable regexes in intensively-
tested projects, and submitted the detected vulnerabilities
to CVEs. (§4.4)
4.1 Experiment Setup
4.1.1 Benchmark Datasets
We evaluate ReDoSHunter on three types of datasets (i.e.,
regex sets, known ReDoS-vulnerabilities, and intensively-
tested projects). For the regex sets, we collected 37,651
regexes from three widely-used libraries (i.e., Corpus [8],
RegExLib8, and Snort9) of regexes. The details can be found
in Table 7. For the known ReDoS-vulnerabilities, we col-
lected vulnerabilities from widely-used libraries with Com-
mon Vulnerabilities and Exposures (CVE) [12] identiﬁers. We
extracted CVEs with keywords “ReDoS”, or “regular expres-
sion denial of service” (48 records), then manually ﬁltered
out those without clear descriptions or sources, resulting in
35 CVEs in total. Table 10 shows the details, including their
CVE IDs, source projects, and detection results by all detec-
tors. For intensively-tested projects, we selected 26 popular
projects on GitHub/npm/PyPI with millions of downloads,
applicable in various daily scenarios such as parsing and val-
idating color, URL, HTML, email and so on. Table 11 lists
the details, including source projects, disclosure status, and
detection results by all detectors.
Table 7: The Regex Sets for Evaluation.
Name
Number Avg Len Description
Corpus
13,597
33.97 Regexes from scraped Python
projects
RegExLib
8,699
69.75 Online regex examples from re
gexlib.com
Snort
15,355
92.28 Regexes extracted from the Snort
NIDS for inspecting IP packets
Total:
37,651
RQ2. How is the effectiveness of ReDoSHunter on identi-
fying known vulnerabilities? The Common Vulnera-
8 https://regexlib.com
9 https://www.snort.org
USENIX Association
30th USENIX Security Symposium    3855
Table 8: Comparison of the Overall Effectiveness over Four Popular Regex Engines on the Benchmarks with 37,651
Regexes. Columns in each sub-tables denote the number of true positives (TP), the number of false positives (FP), the number
of false negatives (FP), precision (Prec), and recall (Rec). The Real Vulnerabilities entries give the number of regexes that can
trigger ReDoS attacks on various engines. The number of vulnerabilities reported by each technique is given by the sum of its TP
and FP.
Regex Engine
Java-8
Java-13
Python-3.7
Node.js-14
Technique
TP
FP
FN
Prec
Rec
(%)
(%)
TP
FP
FN
Prec
Rec
(%)
(%)
TP
FP
FN
Prec
Rec
(%)
(%)
TP
FP
FN
Prec
Rec
(%)
(%)
RXXR2
224
5
10,121
97.82
2.17
216
13
10,032
94.32
2.11
213
16
9,594
93.01
2.17
219
10
9,427
95.63
2.27
Rexploiter
2,052
288
8,293
87.69
19.84
2,041
299
8,207
87.22
19.92
1,955
385
7,852
83.55
19.93
1,915
425
7,731
81.84
19.85
NFAA
safe-regex
Regexploit
SDL
ReScue
ReDoSHunter
10,345
975
13
9,370
98.68
9.42
968
20
9,280
97.98
9.45
857
131
8,950
86.74
8.74
842
146
8,804
85.22
8.73
3,760
2,348
6,585
61.56
36.35
3,715
2,393
6,533
60.82
36.25
3,586
2,522
6,221
58.71
36.57
3,540
2,568
6,106
57.96
36.70
1,051
112
188
2
0
0
0
9,294
99.81
10.16
1,051
10,233
100
1.08
10,157
100
1.82
108
183
0
100
100
10,248
2
4
5
0
9,197
99.81
10.26
1,044
9
8,763
99.15
10.65
1,032
21
8,614
98.01
10.70
10,140
96.43
1.05
98
14
9,709
87.50
1.00
10,065
97.34
1.79
175
13
9,632
93.09
1.78
102
179
0
100
100
9,807
0
0
100
100
9,646
10
9,544
91.07
1.06
9
0
9,467
95.21
1.86
0
100
100
Real Vulnerabilities
10,345
10,248
9,807
9,646
4.1.2 Baselines
To evaluate the effectiveness and efﬁciency of ReDoSHunter,
we selected seven approaches, falling into two paradigms, i.e.,
static analysis (RXXR2 [22, 36], Rexploiter [49], NFAA [47],
safe-regex [14] and Regexploit [26]) and dynamic analy-
sis (SDL [43] and ReScue [37]). These approaches were
among the state-of-the-art approaches used in recent works
for ReDoS-speciﬁc detection. These two paradigms have their
own pros and cons. So we compared ReDoSHunter with both
of them.
4.1.3 Evaluation Metrics
We measure effectiveness using the precision and recall of
reported vulnerabilities.
• Precision: the proportion of true positives (TPs, real
vulnerabilities) over the reported vulnerabilities (the sum
of true positives and false positives (FPs)).
• Recall: the proportion of the true positives over all the
real vulnerabilities (the sum of true positives and false
negatives (FNs)).
4.1.4 Conﬁguration
We implemented the prototype of ReDoSHunter in Java-8,
which supports the regex engines of Python 2/3, Java 7-15,
Node.js 6-14. Our experiments were run on a machine with
2.20 GHz Intel Xeon(R) Silver processor and 128G RAM,
running Windows 10. We used the parameter conﬁguration
NP = 30, 000, NE = 100, TP = 1s, TE = 0.1s, and nmin =
100 in our algorithms for all experiments. All baselines were
conﬁgured in the same settings as reported in their original
papers.
4.2 Results on Regex Benchmarks
In this section, we present the experiment results compar-
ing the performance between ReDoSHunter and the seven
baselines on the three benchmark datasets.
Since it is labor intensive to manually identify and con-
ﬁrmed the vulnerable ones from the 37,651 regexes, we em-
ployed ReDoSHunter and the seven baselines to do the ﬁrst-
round ﬁltering, resulting in a set of candidates labeled by any
of eight techniques as vulnerable10. Then three experts ana-
lyzed the candidates and identiﬁed the real vulnerable ones
manually. For manual analysis, three experts were involved
and checked the candidate regexes independently. Then they
cross-checked and discussed the results until reaching an
agreement. Besides, the dynamic tools also validated the la-
beled results to some degree. Table 8 gives the overall evalua-
tion results on the three benchmark datasets.
4.2.1 Effectiveness
We evaluate the effectiveness in terms of TP, FP, FN, precision,
and recall in the reported vulnerabilities by each technique.
The result is shown in Table 8. The comparison is based on
four regex engines (i.e., Java-8, Java-13, Python-3.7, Node.js-
14). The results given by these four engines are largely similar.
To avoid repetition, we discuss the results mainly based on
the Java-8 engine below.
10Here, whether a tool detects multiple vulnerabilities or a single vulnera-
bility in a regex, this regex will be recorded as a vulnerable one.
3856    30th USENIX Security Symposium
USENIX Association
According to Table 8, ReDoSHunter outperforms all base-
line techniques in precision and recall. It successfully reports
all ReDoS-vulnerable regexes without any false positives. In
comparison, safe-regex achieves the highest recall 36.35%
among all baselines with 61.56% precision. While achieving
100% precision, SDL and ReScue sacriﬁce recall, with only
1.08% to 1.82%. The experiment results show that the seven
baselines suffer from either low TPs or high FPs and FNs.
Speciﬁcally, the most TP achieved by others (3,760 achieved
by safe-regex) is at most one third of that of ReDoSHunter
(10,345), while the number of FNs of all existing works are