            write(filename,line)
        end
    end
##### 04 功能演示
  * 加密服务器cookie
访问源站，返回两个`Set-Cookie`头和原始cookie值
访问安全网关保护后的站点，原始的`testA`、`testB`字段被加密，合并成`x9i7RDYX23`
  * 解密客户端cookie
web服务器配置rsp路径返回`ngx.req.raw_header()`
    location /req {
        default_type 'text/html';
        content_by_lua 'ngx.say(ngx.req.raw_header())';
    }
访问源站，web服务器返回原始请求头
访问安全网关保护后的站点，不携带cookie时，网关放行
访问安全网关保护后的站点，携带错误cookie时，网关拦截并返回403
访问安全网关保护后的站点，携带正确的cookie时，网关放行并对cookie解密，此时web服务器收到的cookie为解密后的cookie，即使用户在请求中注入了其他cookie，web服务器也不会收到该cookie
  * 日志记录
#### 2.2 防御自动化工具请求
##### 01 特征分析
扫描器等自动化攻击工具通过发送大量指定或随机的探测性请求来试图发现服务器漏洞信息，过程常伴随请求数量大、请求频率规律、请求地址重复等特点，防御自动化工具本质上是对脚本请求的拦截
##### 02 方案确定
自动化工具请求的发起者通常不是来自正常浏览器而是由不同语言编写的http请求脚本，而普通脚本无js执行能力无法解析js代码，利用这个差异，安全网关作为中间设备则可以在包中插入js代码来筛选客户端，具体流程为：
  * 客户端首次请求网关未携带cookie，网关返回302跳转至指定地址加载js代码，该代码执行时会收集运行环境数据并生成一个前端cookie，此时正常浏览器已生成cookie，脚本工具没有js能力无法生成cookie从而无法进入下一个请求逻辑
  * 客户端携带前端js新生成的cookie向网关发起第二次请求，网关解析cookie确认无误后再转发请求至上游服务器，解析失败则返回403
  * 随后的请求网关会在响应中插入第二套js，hook请求事件，每当发生新的请求行为时做一次环境检查生成新cookie后再发送请求
##### 03 功能实现
处理用户发来的请求：首先检查是否存在cookieA/B，不存在则跳转至`finalPath`生成cookie，存在则验证cookie，解密失败时返回403、解密成功则放行
    function toolsInfoSpider()
        if ToolsProtect then  -- 检查是否启用该功能
            local clientCookieA = ngx.var.cookie_h0yGbdRv  -- 提取cookieA：h0yGbdRv
            local clientCookieB = ngx.var.cookie_kQpFHdoh  -- 提取cookieB：kQpFHdoh
            if not (clientCookieA and clientCookieB) then  -- 检查是否存在cookieA、cookieB
                local ip = 'xxx'  -- 服务器地址
                local finalPath = 'http://'..ip..'/'..jsPath..'?origin='..encodeBase64(ngx.var.request_uri)  -- 拼接生成cookie的地址的跳转链接
                log('1-tools 无cookieA/B', '')  -- 日志记录
                ngx.redirect(finalPath, 302)  -- 返回302
            else  -- 存在cookieA、cookieB时
                local result = xpcall(dencrypT, emptyPrint, clientCookieB, clientCookieA)  -- 测试cookie能否解密成功
                if not result then  -- 解密失败时
                    log('2-tools 解密失败', clientCookieA..', '..clientCookieB)
                    say_html() -- 解密失败，返回302
                else  -- 可以解密
                    local result2 = dencrypT(clientCookieB, clientCookieA)  -- 获取解密后的数据
                    local _,e = string.find(result2, '0')  -- 提取cookie中的数据
                    if e ~= nil then  -- 检测到前端存在工具特征时拦截
                        log('3-tools 工具请求', result2)
                        say_html()
                    else
                        log('0-tools 工具验证通过', '')  -- 检查完成，放行
                    end
                end
            end
        end
    end
首次请求，生成cookie相关页面：没有cookieA/B时跳转至该地址，`webdriver.js`提取环境数据并生成cookieA/B，然后`jump.js`跳转至原始请求地址
    # index.html
生成cookie，采集环境数据：
    // webdriver.js
    var tt = Date.parse(new Date());  // 时间戳
    var arr = '';
    function get_webdriver() {  // 检查webdriver特征
        try {
            return !0 === _navigator.webdriver ? 0 : +!window.document.documentElement.getAttribute('webdriver')
        } catch (e) {
            return 1
        }
    }
    function get_awvs() {  // 检查awvs特征
        for (var e = [
            'SimpleDOMXSSClass',
            'MarvinHooks',
            'MarvinPageExplorer',
            'HashDOMXSSClass'
        ], t = e.length, r = window.$hook$, n = 0; n < t; n++) if (window[e[n]] && r) return 0;
        return 1
    }
    function get_appscan() {  // 检查appscan特征
        for (var e = [
          'appScanSendReplacement',
          'appScanOnReadyStateChangeReplacement',
          'appScanLoadHandler',
          'appScanSetPageLoaded'
        ], t = e.length, r = 0; r < t; r++) if (window[e[r]]) return 0;
        return 1
    }
    function get_info(arr){  // 合并检查数据，存放于arr数组中
        arr = '' + get_webdriver() + get_awvs() + get_appscan();
        return arr;
    }
    function setCookie(cname, date)  // 设置cookie
    {
        var d = new Date();
        d.setTime(d.getTime()+(1*24*60*60*1000));
        var expires = "expires="+d.toGMTString();
        document.cookie = cname + '=' + date + '; ' + expires + '; Path=/';
    }
    function aesEncrypt(word, tt) {  // aes加密
        let key = CryptoJS.enc.Utf8.parse(tt);
        const iv = CryptoJS.enc.Utf8.parse('ABCDEF1234123412');
        let srcs = CryptoJS.enc.Utf8.parse(word);
        let encrypted = CryptoJS.AES.encrypt(srcs, key, { iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 });
        return encrypted.ciphertext.toString().toUpperCase();
    }
    tt = '000'+tt;
    setCookie('h0yGbdRv', tt);  // 生成cookieA，值为时间戳
    setCookie('kQpFHdoh', aesEncrypt(get_info(arr), tt));  // 生成cookieB，值为加密后的arr数组，密钥为cookieA
跳转功能：从args中提取原始跳转地址，然后发起跳转
    // jump.js
    function getUrlParams() {  // 提取302链接携带的origin参数，为原始请求地址
        var args = new Object();
        var query = location.search.substring(1);
        var pairs = query.split("&");
        for (var i = 0; i < pairs.length; i++) {
            var pos = pairs[i].indexOf('=');
            if (pos == -1) continue;
            var argname = pairs[i].substring(0, pos);
            var value = pairs[i].substring(pos + 1);
            args[argname] = unescape(value);
        }
        return args;
    }
    function jump(){  // 跳转
        var args = getUrlParams()['origin'];
        var path = atob(args);
        self.location=path;
    }
    jump();
后续网关下发的js：hook请求事件和生成新cookie
    var arr = '';
    function get_webdriver() {  // 检查webdriver特征
        try {
            return !0 === _navigator.webdriver ? 0 : +!window.document.documentElement.getAttribute('webdriver')
        } catch (e) {
            return 1
        }
    }
    function get_awvs() {  // 检查awvs特征
        for (var e = [
            'SimpleDOMXSSClass',
            'MarvinHooks',
            'MarvinPageExplorer',
            'HashDOMXSSClass'
        ], t = e.length, r = window.$hook$, n = 0; n < t; n++) if (window[e[n]] && r) return 0;
        return 1
    }
    function get_appscan() {  // 检查appscan特征
        for (var e = [
          'appScanSendReplacement',
          'appScanOnReadyStateChangeReplacement',
          'appScanLoadHandler',
          'appScanSetPageLoaded'
        ], t = e.length, r = 0; r < t; r++) if (window[e[r]]) return 0;
        return 1
    }
    function getCookie(cookieName) {  // 获取cookiA
        var strCookie = document.cookie;
        var arrCookie = strCookie.split("; ");
        for(var i = 0; i < arrCookie.length; i++){
            var arr = arrCookie[i].split("=");
            if(cookieName == arr[0]){
                return arr[1];
            }
        }
        return "";
    }
    function get_info(arr){  // 合并检查数据，存放于arr数组中
        arr = '' + get_webdriver() + get_awvs() + get_appscan();
        return arr;
    }
    function setCookie(cname, data) {
        var d = new Date();
        d.setTime(d.getTime() + (1 * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toGMTString();
        document.cookie = cname + '=' + data + '; ' + expires + '; Path=/';
    }
    function aesEncrypt(word, tt) {
        let key = CryptoJS.enc.Utf8.parse(tt);
        const iv = CryptoJS.enc.Utf8.parse('ABCDEF1234123412');
        let srcs = CryptoJS.enc.Utf8.parse(word);
        let encrypted = CryptoJS.AES.encrypt(srcs, key, { iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 });
        return encrypted.ciphertext.toString().toUpperCase();
    }
    var tt = getCookie("h0yGbdRv");
    var cookieV = aesEncrypt(get_info(arr), tt);
    function hookAJAX() {
        XMLHttpRequest.prototype.nativeOpen = XMLHttpRequest.prototype.open;
        var customizeOpen = function (method, url, async, user, password) {
            // do something
            setCookie('kQpFHdoh', 'cookieTest');
            this.nativeOpen(method, url, async, user, password);
        };
        XMLHttpRequest.prototype.open = customizeOpen;
    }
    function hookImg() {
        const property = Object.getOwnPropertyDescriptor(Image.prototype, 'src');
        const nativeSet = property.set;
        function customiseSrcSet(url) {
            // do something
            setCookie('kQpFHdoh', cookieV);
            nativeSet.call(this, url);