On Internet Explorer, you can use Microsoft’s custom script-encoding algorithm
to hide the contents of scripts and potentially bypass some input fi lters:
This encoding was originally designed to prevent users from inspecting
client-side scripts easily by viewing the source code for the HTML page. It has
since been reverse-engineered, and numerous tools and websites will let you
decode encoded scripts. You can encode your own scripts for use in attacks via
Microsoft’s command-line utility srcenc in older versions of Windows.
Beating Sanitization
Of all the obstacles that you may encounter when attempting to exploit poten-
tial XSS conditions, sanitizing fi lters are probably the most common. Here, the
application performs some kind of sanitization or encoding on your attack string
that renders it harmless, preventing it from causing the execution of JavaScript.
The most prevalent manifestation of data sanitization occurs when the appli-
cation HTML-encodes certain key characters that are necessary to deliver an
attack (so  becomes &gt;). In other cases, the application
may remove certain characters or expressions in an attempt to cleanse your
input of malicious content.
When you encounter this defense, your fi rst step is to determine precisely
which characters and expressions are being sanitized, and whether it is still
possible to carry out an attack without directly employing these characters
and expressions. For example, if your data is being inserted directly into an
existing script, you may not need to employ any HTML tag characters. Or, if
the application is removing  tags from your input, you may be able
cc1122..iinndddd 446688 88//1199//22001111 1122::1122::3300 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 469
Chapter 12 n Attacking Users: Cross-Site Scripting 469
to use a different tag with a suitable event handler. Here, you should consider
all the techniques already discussed for dealing with signature-based fi lters,
including using layers of encoding, NULL bytes, nonstandard syntax, and
obfuscated script code. By modifying your input in the various ways described,
you may be able to devise an attack that does not contain any of the characters
or expressions that the fi lter is sanitizing and therefore successfully bypass it.
If it appears impossible to perform an attack without using input that is being
sanitized, you need to test the effectiveness of the sanitizing fi lter to establish
whether any bypasses exist.
As described in Chapter 2, several mistakes often appear in sanitizing fi lters.
Some string manipulation APIs contain methods to replace only the fi rst instance
of a matched expression, and these are sometimes easily confused with methods
that replace all instances. So if  is being stripped from your input, you
should try the following to check whether all instances are being removed:
In this situation, you should also check whether the sanitization is being
performed recursively:
 recursively and then strips 
recursively, the following attack may succeed:
ipt>alert(1)
When you are injecting into a quoted string in an existing script, it is com-
mon to fi nd that the application sanitizes your input by placing the backslash
character before any quotation mark characters you submit. This escapes your
quotation marks, preventing you from terminating the string and injecting
arbitrary script. In this situation, you should always verify whether the back-
slash character itself is being escaped. If not, a simple fi lter bypass is possible.
For example, if you control the value foo in:
var a = ‘foo’;
you can inject:
foo\’; alert(1);//
This results in the following response, in which your injected script exe-
cutes. Note the use of the JavaScript comment character // to comment out the
cc1122..iinndddd 446699 88//1199//22001111 1122::1122::3311 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 470
470 Chapter 12 n Attacking Users: Cross-Site Scripting
remainder of the line, thus preventing a syntax error caused by the application’s
own string delimiter:
var a = ‘foo\\’; alert(1);//’;
Here, if you fi nd that the backslash character is also being properly escaped,
but angle brackets are returned unsanitized, you can use the following attack:
This effectively abandons the application’s original script and injects a new
one immediately after it. The attack works because browsers’ parsing of HTML
tags takes precedence over their parsing of embedded JavaScript:
Although the original script now contains a syntax error, this does not matter,
because the browser moves on and executes your injected script regardless of
the error in the original script.
TRY IT!
http://mdsec.net/search/48/
http://mdsec.net/search/52/
TIP If you can inject into a script, but you cannot use quotation marks because
these are being escaped, you can use the String.fromCharCode technique to
construct strings without the need for delimiters, as described previously.
In cases where the script you are injecting into resides within an event handler,
rather than a full script block, you may be able to HTML-encode your quotation
marks to bypass the application’s sanitization and break out of the string you
control. For example, if you control the value foo in:
cc1122..iinndddd 447711 88//1199//22001111 1122::1122::3311 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 472
472 Chapter 12 n Attacking Users: Cross-Site Scripting
Suppose that each fi eld has length restrictions, such that no feasible attack
string can be inserted into any of them. Nevertheless, you can still deliver a
working exploit by using the following URL to span a script across the three
locations you control:
https://myapp.com/account.php?page_id=”>
When the parameter values from this URL are embedded into the page, the
result is the following:
/*”>
”>
The resulting HTML is valid and is equivalent to only the portions in bold.
The chunks of source code in between have effectively become JavaScript com-
ments (surrounded by the /* and */ markers), so the browser ignores them.
Hence, your script is executed just as if it had been inserted whole at one loca-
tion within the page.
TIP The technique of spanning an attack payload across multiple fi elds can
sometimes be used to beat other types of defensive fi lters. It is fairly common
to fi nd different data validation and sanitization being implemented on differ-
ent fi elds within a single page of an application. In the previous example, sup-
pose that the page_id and mode parameters are subject to a maximum length
of 12 characters. Because these fi elds are so short, the application’s developers
did not bother to implement any XSS fi lters. The seed parameter, on the other
hand, is unrestricted in length, so rigorous fi lters were implemented to prevent
the injection of the characters “. In this scenario, despite the developers’
efforts, it is still possible to insert an arbitrarily long script into the seed param-
eter without employing any of the blocked characters, because the JavaScript
context can be created by data injected into the surrounding fi elds.
A third technique for beating length limits, which can be highly effective
in some situations, is to “convert” a refl ected XSS fl aw into a DOM-based
vulnerability. For example, in the original refl ected XSS vulnerability, if the
application places a length restriction on the message parameter that is cop-
ied into the returned page, you can inject the following 45-byte script, which
evaluates the fragment string in the current URL:
By injecting this script into the parameter that is vulnerable to refl ected XSS,
you can effectively induce a DOM-based XSS vulnerability in the resulting page
cc1122..iinndddd 447722 88//1199//22001111 1122::1122::3311 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 473
Chapter 12 n Attacking Users: Cross-Site Scripting 473
and thus execute a second script located within the fragment string, which is
outside the control of the application’s fi lters and may be arbitrarily long. For
example:
http://mdsec.net/error/5/Error.ashx?message=#alert(‘long script here ......’)
Here is an even shorter version that works in most situations:
http://mdsec.net/error/5/Error.ashx?message=#%0Aalert(‘long script here ......’)
In this version, the whole of the URL is URL-decoded and then passed to the
eval command. The whole URL executes as valid JavaScript because the http:
protocol prefi x serves as a code label, the // following the protocol prefi x serves
as a single-line comment, and the %0A is URL-decoded to become a newline,
signaling the end of the comment.
Delivering Working XSS Exploits
Typically, when you are working on a potential XSS vulnerability to understand
and bypass the application’s fi lters, you are working outside the browser, using
a tool such as Burp Repeater to send the same request repeatedly, modifying
the request in small ways each time, and testing the effect on the response. In
some situations, after you have created a proof-of-concept attack in this way,
you still may have work to do in order to deliver a practical attack against other
application users. For example, the entry point for the XSS may be nontrivial to
control in other users’ requests, such as a cookie or the Referer header. Or the
target users may be using a browser with built-in protection against refl ected
XSS attacks. This section examines various challenges that may arise when
delivering working XSS exploits in practice and how they can be circumvented.
Escalating an Attack to Other Application Pages
Suppose the vulnerability you have identifi ed is in an uninteresting area of the
application, affecting only unauthenticated users, and a different area contains
the really sensitive data and functionality you want to compromise.
In this situation, it is normally fairly easy to devise an attack payload that
you can deliver via the XSS bug in one area of the application and that persists
within the user’s browser to compromise the victim anywhere he goes on the
same domain.
One simple method of doing this is for the exploit to create an iframe cover-
ing the whole browser window and reload the current page within the iframe.
As the user navigates through the site and logs in to the authenticated area,
the injected script keeps running in the top-level window. It can hook into all
cc1122..iinndddd 447733 88//1199//22001111 1122::1122::3311 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 474
474 Chapter 12 n Attacking Users: Cross-Site Scripting
navigation events and form submissions in the child iframe, monitor all response
content appearing in the iframe, and, of course, hijack the user’s session when
the moment is right. In HTML5-capable browsers, the script can even set the
appropriate URL in the location bar as the user moves between pages, using
the window.history.pushState() function.
For one example of this kind of exploit, see this URL:
http://blog.kotowicz.net/2010/11/xss-track-how-to-quietly-track-whole.html
COMMON MYTH
“We’re not worried about any XSS bugs in the unauthenticated part of our
site. They can’t be used to hijack sessions.”
This thought is erroneous for two reasons. First, an XSS bug in the unau-
thenticated part of an application normally can be used to directly compro-
mise the sessions of authenticated users. Hence, an unauthenticated refl ected
XSS fl aw typically is more serious than an authenticated one, because the
scope of potential victims is wider. Second, even if a user is not yet authen-
ticated, an attacker can deploy some Trojan functionality that persists in the
victim’s browser across multiple requests, waiting until the victim logs in, and
then hijacking the resulting session. It is even possible to capture a user’s
password using a keylogger written in JavaScript, as described in Chapter 13.
Modifying the Request Method
Suppose that the XSS vulnerability you have identifi ed uses a POST request, but the
most convenient method for delivering an attack requires the GET method — for
example, by submitting a forum post containing an IMG tag targeting the vul-
nerable URL.
In these cases, it is always worth verifying whether the application handles
the request in the same way if it is converted to a GET request. Many applications
tolerate requests in either form.
In Burp Suite, you can use the “change request method” command on the
context menu to toggle any request between the GET and POST methods.
COMMON MYTH
“This XSS bug isn’t exploitable. I can’t get my attack to work as a GET
request.”
If a refl ected XSS fl aw can only be exploited using the POST method, the
application is still vulnerable to various attack delivery mechanisms, including
ones that employ a malicious third-party website.
cc1122..iinndddd 447744 88//1199//22001111 1122::1122::3311 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 475
Chapter 12 n Attacking Users: Cross-Site Scripting 475
In some situations, the opposite technique can be useful. Converting an attack that
uses the GET method into one that uses the POST method may enable you to bypass
certain fi lters. Many applications perform some generic application-wide fi ltering
of requests for known attack strings. If an application expects to receive requests
using the GET method, it may perform this fi ltering on the URL query string only. By
converting a request to use the POST method, you may be able to bypass this fi lter.
Exploiting XSS Via Cookies
Some applications contain refl ected XSS vulnerabilities for which the entry point
for the attack is within a request cookie. In this situation, you may be able to
use various techniques to exploit the vulnerability:
n As with modifying the request method, the application may allow you to
use a URL or body parameter with the same name as the cookie to trigger
the vulnerability.
n If the application contains any functionality that allows the cookie’s value
to be set directly (for example, a preferences page that sets cookies based
on submitted parameter values), you may be able to devise a cross-site
request forgery attack that sets the required cookie in the victim’s browser.
Exploiting the vulnerability would then require the victim to be induced
into making two requests: to set the required cookie containing an XSS
payload, and to request the functionality where the cookie’s value is
processed in an unsafe way.
n Historically, various vulnerabilities have existed in browser extension
technologies, such as Flash, that have enabled cross-domain requests to be
issued with arbitrary HTTP headers. Currently at least one such vulner-
ability is widely known but not yet patched. You could leverage one of
these vulnerabilities in browser plug-ins to make cross-domain requests
containing an arbitrary cookie header designed to trigger the vulnerability.
n If none of the preceding methods is successful, you can leverage any other
refl ected XSS bug on the same (or a related) domain to set a persistent
cookie with the required value, thereby delivering a permanent compro-
mise of the victim user.
Exploiting XSS in the Referer Header
Some applications contain refl ected XSS vulnerabilities that can only be trig-
gered via the Referer header. These are typically fairly easy to exploit using a
web server controlled by the attacker. The victim is induced to request a URL
on the attacker’s server that contains a suitable XSS payload for the vulnerable
application. The attacker’s server returns a response that causes a request to the
vulnerable URL, and the attacker’s payload is included in the Referer header
that is sent with this request.
cc1122..iinndddd 447755 88//1199//22001111 1122::1122::3311 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 476