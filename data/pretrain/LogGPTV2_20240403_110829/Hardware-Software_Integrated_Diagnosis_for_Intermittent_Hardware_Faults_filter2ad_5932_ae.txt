ﬁnal erroneous data to speculate on the correctness of the
data before the failure point. However, non-faulty resources
are also used in the paths leading to ﬁnal erroneous data, and
can be incorrectly diagnosed as faulty by our technique.
The main source of diagnosis
inaccuracies
One way to improve the diagnosis accuracy is to record
the output of every instruction, thus eliminating the need for
speculation on the correctness of the data before the failure
point. However, storing the output of every instruction
imposes prohibitive performance overhead. Figure 7 shows
the performance overhead of storing the destination regis-
ter of every instruction, for 32-bit instructions and 64-bit
instructions, for three SPEC 2006 programs. The overhead
for storing 0 extra bits corresponds to that of storing only
the resource usage bits, as done by our technique (explained
in Section IV). As seen from the Figure 7, the overheads
for storing the results of 32 and 64 bit instructions are
respectively 2X and 3X that of the overhead of only storing
the resource usage information. Therefore, we chose not to
record the output of every instruction for diagnosis.
As explained in Section V-B, SIED uses information from
multiple occurrences of the intermittent fault to enhance the
diagnosis accuracy. Let RN denote the number of recur-
rences of the failure, after which the diagnosis is performed.
1We do not use Simpoints due to incompatibilities between the bench-
mark format for the simulator and the format required by Simpoints.
371371371
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:27:50 UTC from IEEE Xplore.  Restrictions apply. 
Figure 6: Accuracy Results for applying the heuristics (RN = 4 and Ndeconf = 5)
perform diagnosis (Figure 6), as beyond this point, there is
only a marginal increase in diagnosis accuracy with increase
in RN.
2) Deconﬁguration overhead (RQ 2): As mentioned in
section V-B, Ndeconf is the number of resources suggested
by SIED as most likely to be faulty. Diagnosis accuracy is
deﬁned as the probability of the actual faulty resource being
among the resources suggested by SIED. For the accuracies
reported in Figure 6, Ndeconf is chosen to be 5.
The processor is deconﬁgured after diagnosis by disabling
these Ndeconf resources. Although increasing Ndeconf in-
creases the likelihood of the processor being ﬁxed after
deconﬁguration, it also makes the granularity of diagnosis
more coarse-grained. In other words, by increasing Ndeconf ,
deconﬁguration disables more non-faulty resources along
with the actual faulty resource. This results in performance
loss after deconﬁguration.
Figure 9a shows the accuracy of diagnosis as Ndeconf
varies from 1 to 5. As expected, increasing Ndeconf in-
creases the accuracy of diagnosis to 84% for Ndeconf =
5. Figure 9b shows the average slowdown by disabling
Ndeconf = 5 resources suggested by our technique. As
can be seen in the ﬁgure, the slowdown varies from 1%
to 2.5%, with an average of 1.6%. This shows that disabling
Ndeconf = 5 resources only incurs a modest performance
overhead after reconﬁguration, and hence we choose this
value.
3) SCRIBE Performance, Power and Area Overhead
(RQ 3): Figure 10 shows the performance overhead in-
curred by SCRIBE across three processor conﬁgurations,
narrow, medium and wide, described in Section VI-A. The
geometric mean of the overheads across all conﬁgurations
is 14.7%. In all but one case (except soplex), the wide
conﬁguration (GeoM ean = 23.21%) incurs higher over-
head than the medium (GeoM ean = 11.88%) and narrow
(GeoM ean = 11.53%) conﬁgurations. The Medium and
narrow conﬁgurations are comparable in terms of overhead.
The wide processor has high overhead as it is able to utilize
the resources better, thus leaving fewer free slots to be used
by SCRIBE for sending logging stores to memory.
As far as power is concerned, SCRIBE has 9.3% power
overhead on average. This includes both active power and
idle power. Figure 11 shows the breakdown of the power
Figure 7: Effect of sending the destination register values
of every instruction on performance overhead (0 bits corre-
sponds to only sending the RUI as in our technique)
Figure 8: Average accuracy across benchmarks with respect
to the number of failures (Ndeconf = 5)
There is a trade-off among diagnosis accuracy and the
failure recurrence number (RN) for performing diagnosis.
This means that diagnosis can be performed earlier at the
expense of less accuracy or be postponed to receive more
information from the subsequent failures and hence achieve
higher accuracy, which in turn decreases the probability of
the fault recurring after deconﬁguration (and hence has lower
overheads). Figure 8 shows how changing the RN value
can affect the accuracy of diagnosis. We choose RN = 4 to
372372372
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:27:50 UTC from IEEE Xplore.  Restrictions apply. 
(a) Accuracy with respect to Ndeconf (RN = 4)
(b) Performance overhead after deconﬁguration (Ndeconf = 5)
Figure 9: The reported values are averages of values for benchmarks mentioned in Section VI-A
which add 50 Kbytes of storage to a chip, has an area
overhead of 2% [11]. SCRIBE adds less than 2 KBytes of
distributed on chip storage (estimated from the number of
bits added by each component). Therefore, we believe the
area overhead of SCRIBE will be much less than 2%.
4) SIED Ofﬂine Performance Overhead (RQ 4): This
overhead consists of: i) Replay time ii) DDG construction
and analysis time. The average replay time depends on the
program and whether it is replayed from a checkpoint or
from the beginning. We do not consider this time as it
depends on the checkpointting interval. The DDG construc-
tion and analysis time took 2 seconds on average, for our
benchmarks.
VII. RELATED WORK
Figure 10: The performance overhead of SCRIBE applied
to three conﬁgurations: Narrow, Medium and Wide
Bower et al. [5] propose a hardware-only diagnosis mech-
anism by modifying the processor pipeline to track the
resources used by an instruction (similar to SCRIBE), and
ﬁnding the faulty resources based on resource counters.
However, their scheme relies on the presence of a ﬁne-
grained checker (e.g., DIVA [8]) to detect errors before an
instruction commits. This limits its applicability to proces-
sors that are speciﬁcally designed with such ﬁne-grained
checkers.
Li et al. [9] use a combination of hardware and software
to diagnose permanent errors. Similar to our approach,
theirs is also a hybrid technique that splits the diagnosis
between hardware and software. However, they rely on the
determinism of the fault, as they replay a failed program
execution (due to a permanent fault) from a checkpoint
and gather its micro-architectural resource usage information
during the replay. Unfortunately, this technique would not
work for intermittent faults that are non-deterministic, as
the fault may not show up during the replay.
IFRA [11],
is a post-silicon bug localization method,
which records the footprint of every instruction as it is
executed in the processor. IFRA is similar to SCRIBE in
how it records the information. However, SCRIBE differs
from IFRA in two ways. First, IFRA records the instruction
information within the processor, and this information is
scanned out after the failure, after the processor is stopped.
On the other hand, SCRIBE writes the gathered information
to memory during regular operation. Second, IFRA required
Figure 11: The breakdown of power consumption of
SCRIBE
consumption overhead. As seen in the ﬁgure, only 7.9% of
the extra power is used by the components of SCRIBE. The
rest of the power overhead is due to the extra accesses to
the D-Cache and the extra cycles due to SCRIBE (indicated
in the ﬁgure as Other Components).
We have not synthesized SCRIBE on hardware, and hence
cannot measure its area overhead. However, we can estimate
the area overheads from other techniques that have been
synthesized. For example, a comparable technique, IFRA,
373373373
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:27:50 UTC from IEEE Xplore.  Restrictions apply. 
REFERENCES
[1] S. Borkar, “Microarchitecture and design challenges for gigascale integration,”
in Keynote Speech, 37th International Symposium on Microarchitecture, ser.
MICRO, 2004.
[2] C. Constantinescu, “Trends and challenges in VLSI circuit reliability,” IEEE
Micro, vol. 23, no. 4, pp. 14–19, 2003.
[3] E. B. Nightingale, J. R. Douceur, and V. Orgovan, “Cycles, cells and platters:
An empirical analysis of hardware failures on a million consumer PCs,” ser.
EuroSys, 2011, pp. 343–356.
[4] P. M. Wells, K. Chakraborty, and G. S. Sohi, “Adapting to intermittent faults
in multicore systems,” ser. ASPLOS, 2008, pp. 255–264.
[5] F. A. Bower, D. J. Sorin, and S. Ozev, “A mechanism for online diagnosis of
hard faults in microprocessors,” ser. MICRO, 2005, pp. 197–208.
[6] S. Gupta, S. Feng, A. Ansari, and S. Mahlke, “StageNet: A reconﬁgurable
fabric for constructing dependable CMPs,” IEEE Transactions on Computers,
vol. 60, no. 1, pp. 5–19, Jan 2011.
[7] L. Rashid, K. Pattabiraman, and S. Gopalakrishnan, “Intermittent hardware
errors recovery: Modeling and evaluation,” ser. QEST, 2012, pp. 220–229.
[8] T. Austin, “DIVA: A reliable substrate for deep submicron microarchitecture
design,” ser. MICRO, 1999, pp. 196–207.
[9] M.-L. Li, P. Ramachandran, S. Sahoo, S. Adve, V. Adve, and Y. Zhou, “Trace-
based microarchitecture-level diagnosis of permanent hardware faults,” ser.
DSN, 2008, pp. 22–31.
[10] J. Carretero, X. Vera, J. Abella, T. Ramirez, M. Monchiero, and A. Gonzalez,
“Hardware/software-based diagnosis of load-store queues using expandable
activity logs,” ser. HPCA, 2011, pp. 321–331.
[11] S.-B. Park and S. Mitra, “IFRA: Instruction footprint recording and analysis
for post-silicon bug localization in processors,” ser. DAC, 2008, pp. 373–378.
[12] J. W. McPherson, “Reliability challenges for 45nm and beyond,” ser. DAC,
2006, pp. 176–181.
[13] S. Borkar, T. Karnik, S. Narendra, J. Tschanz, A. Keshavarzi, and V. De,
“Parameter variations and impact on circuits and microarchitecture,” ser. DAC,
2003, pp. 338–342.
[14] C. Constantinescu, “Intermittent faults and effects on reliability of integrated
circuits,” ser. RAMS, 2008, pp. 370–374.
[15] C. Weaver and T. Austin, “A fault tolerant approach to microprocessor design,”
ser. DSN, 2001, pp. 411–420.
pp. 246–256.
[16] H. Agrawal and J. R. Horgan, “Dynamic program slicing,” ser. PLDI, 1990,
[17] G. P. Saggese, N. J. Wang, Z. T. Kalbarczyk, S. J. Patel, and R. K. Iyer, “An
experimental study of soft errors in microprocessors,” IEEE Micro, vol. 25,
no. 6, pp. 30–39, 2005.
[18] G. W. Dunlap, D. G. Lucchetti, M. A. Fetterman, and P. M. Chen, “Execution
replay of multiprocessor virtual machines,” ser. VEE, 2008, pp. 121–130.
[19] M. Xu, R. Bodik, and M. Hill, “A “ﬂight data recorder” for enabling full-system
multiprocessor deterministic replay,” ser. ISCA, 2003, pp. 122–133.
[20] A. Bondavalli, S. Chiaradonna, F. di Giandomenico, and F. Grandoni,
from intermittent
“Threshold-based mechanisms to discriminate transient
faults,” IEEE Transactions on Computers, vol. 49, pp. 230–245, Mar 2000.
[21] M. Dadashi, L. Rashid, and K. Pattabiraman, “SCRIBE: A hardware infrastruc-
ture enabling ﬁne-grained software layer diagnosis,” Silicon Errors in Logic,
System Effects (SELSE), 2013.
[22] C.-K. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser, G. Lowney, S. Wallace,
V. J. Reddi, and K. Hazelwood, “Pin: Building customized program analysis
tools with dynamic instrumentation,” ser. PLDI, 2005, pp. 190–200.
[23] E. Larson, S. Chatterjee, and T. Austin, “MASE: a novel infrastructure for
detailed microarchitectural modeling,” ser. ISPASS, 2001, pp. 1–9.
[24] N. Choudhary, S. Wadhavkar, T. Shah, H. Mayukh, J. Gandhi, B. Dwiel,
S. Navada, H. Najaf-abadi, and E. Rotenberg, “FabScalar: Composing synthe-
sizable RTL designs of arbitrary cores within a canonical superscalar template,”
ser. ISCA, 2011, pp. 11–22.
[25] A. Timor, A. Mendelson, Y. Birk, and N. Suri, “Using underutilized CPU
resources to enhance its reliability,” IEEE Transactions on Dependable and
Secure Computing, vol. 7, no. 1, pp. 94–109, Jan 2010.
[26] R. Joseph, D. Brooks, and M. Martonosi, “Control techniques to eliminate
voltage emergencies in high performance processors,” ser. HPCA, 2003, pp.
79–90.
[27] K. Skadron, M. R. Stan, K. Sankaranarayanan, W. Huang, S. Velusamy, and
D. Tarjan, “Temperature-aware microarchitecture: Modeling and implementa-
tion,” ACM Trans. Archit. Code Optim., vol. 1, no. 1, pp. 94–125, Mar 2004.
[28] D. Brooks, V. Tiwari, and M. Martonosi, “Wattch: A framework for
architectural-level power analysis and optimizations,” ser. ISCA, 2000, pp. 83–
94.
[29] A. DeOrio, Q. Li, M. Burgess, and V. Bertacco, “Machine learning-based
anomaly detection for post-silicon bug diagnosis,” ser. DATE, 2013, pp. 491–
496.
[30] K. Constantinides, O. Mutlu, T. Austin, and V. Bertacco, “Software-based
online detection of hardware defects: Mechanisms, architectural support, and
evaluation,” ser. MICRO, 2007, pp. 97–108.
[31] A. Pellegrini and V. Bertacco, “Application-aware diagnosis of runtime hard-
ware faults,” ser. ICCAD, 2010, pp. 487–492.
the presence of hardware-based fault detectors to limit the
error propagation. In contrast, SCRIBE does not require any
additional detectors in the hardware or software.
DeOrio et al. [29] introduce a hybrid hardware-software
scheme for post-silicon debugging mechanism, in which
the hardware logs the signal activities during post-silicon
validation, and the software uses anomaly detection on the
logged signals to identify a set of candidate root-cause
signals for a bug. Because their focus is on post-silicon
debugging, they do not present the performance overhead
of their technique, and hence it is not possible for us to
compare their performance overheads with ours.
Carratero et al.
[10] performs integrated hardware-
software diagnosis for faults in the Load-Store Unit (LSU).
Our work is similar to theirs in some respects. However,
our approach covers faults in the entire pipeline, and not
only the Load Store Unit. Further, their goal is to diagnose
design faults during post-silicon validation, while ours is to
diagnose intermittent faults during regular operation.
There has been considerable work on online testing for
fault diagnosis. For example, Constantinides et al. [30]
propose a periodic mechanism to run directed tests on the
hardware using a dedicated set of instructions. However, this
technique may ﬁnd errors that do not affect the application,
which in turn may initiate unnecessary recovery or repair
actions, thus resulting in high overheads. To mitigate this
problem, Pellegrini and Bertacco. [31] propose a hybrid
hardware-software solution that monitors the hardware re-
source usage in the application, and tests only the resources
that are used by the application. While this is useful, all
testing-based methods require that the fault appears during
at least one of the testing phases, which may not hold for
intermittent faults.
VIII. CONCLUSION
In this paper, we proposed a hardware/software integrated
scheme for diagnosing intermittent faults in processors. Our
scheme consists of SCRIBE,
the hardware layer, which
enables ﬁne-grained software layer diagnosis, and SIED,
the software layer which uses the information provided by
SCRIBE after a failure to diagnose the intermittent fault. We
found that using SCRIBE and SIED, the faulty resource can
be correctly diagnosed in 84% of the cases on average. Our
scheme incurs about 12% performance overhead, and about
9% power consumption overhead (for a desktop class pro-
cessor). The performance loss after disabling the resources
suggested by our technique is 1.6% on average.
ACKNOWLEDGMENT
We thank the anonymous reviewers of DSN’14 and
SELSE’13 for their comments that helped improve the paper.
This work was supported in part by a Discovery grant and
an Engage Grant, from the Natural Science and Engineering
Research Council (NSERC), Canada, and a research gift
from Lockheed Martin Corporation. We thank the Institute
of Computing, Information and Cognitive Systems (ICICS)
at the University of British Columbia for travel support.
374374374
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:27:50 UTC from IEEE Xplore.  Restrictions apply.