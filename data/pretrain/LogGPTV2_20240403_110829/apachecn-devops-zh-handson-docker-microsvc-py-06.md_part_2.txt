     value: "127.0.0.1"
```
要在 Kubernetes 中进行部署，您需要应用该文件，如下所示:
```
$ kubectl apply -f thoughts_backend/kubernetes/deployment.yaml
deployment "thoughts-backend" created
```
部署现在在集群中创建:
```
$ kubectl get deployments -n example
NAME             DESIRED CURRENT UP-TO-DATE AVAILABLE AGE
thoughts-backend 1       1       1          1         20s
```
这将自动创建吊舱。如果 pod 被删除或崩溃，部署将以不同的名称重新启动它:
```
$ kubectl get pods -n example
NAME                              READY STATUS  RESTARTS AGE
thoughts-backend-6dd57f5486-l9tgg 2/2   Running 0        1m
```
部署正在跟踪最新的映像，但是它不会创建新的 pod，除非它被删除。要进行更改，请确保手动删除 pod，之后将重新创建它:
```
$ kubectl delete pod thoughts-backend-6dd57f5486-l9tgg -n example
pod "thoughts-backend-6dd57f5486-l9tgg" deleted
$ kubectl get pods -n example
NAME                              READY STATUS  RESTARTS AGE
thoughts-backend-6dd57f5486-nf2ds 2/2   Running 0        28s
```
该应用在集群中仍然不可发现，除了通过其特定的 pod 名称来引用它之外，pod 名称可以更改，因此我们需要为此创建一个服务。
# 配置服务
我们创建一个 Kubernetes 服务，为创建的部署公开的应用创建一个名称。服务可以在`service.yaml`文件中查看。让我们来看看:
```
---
apiVersion: v1
kind: Service
metadata:
    namespace: example
    labels:
        app: thoughts-service
    name: thoughts-service
spec:
    ports:
        - name: thoughts-backend
          port: 80
          targetPort: 8000
    selector:
        app: thoughts-backend
    type: NodePort
```
初始数据类似于部署。`spec`部分定义了开放端口，将对端口`80`上的服务的访问路由到位于`thoughts-backend`中的容器中的端口`8000`，这是部署的名称。`selector`部分将所有请求路由到任何匹配的 pod。
类型为`NodePort`允许从集群外部访问。一旦我们找到外部暴露的 IP，这允许我们检查它是否正常工作:
```
$ kubectl apply -f kubernetes/service.yaml
service "thoughts-service" configured
$ kubectl get service -n example
NAME CLUSTER-IP EXTERNAL-IP PORT(S) AGE
thoughts-service 10.100.252.250  80:31600/TCP 1m
```
我们可以通过使用描述的窗格访问本地主机来访问思想后端。在这种情况下，`http://127.0.0.1:31600`:
![](img/4281d880-2b90-4375-b757-16fca37b7c00.png)
该服务为我们提供了一个内部名称，但是如果我们想要控制它如何暴露在外部，我们需要配置一个入口。
# 配置入口
最后，我们在`ingress.yaml`([https://github . com/PacktPublishing/hand-On-Docker-for-micro-service-with-Python/blob/master/chapter 06/thinks _ 后端/kubernetes/ingress.yaml](https://github.com/PacktPublishing/Hands-On-Docker-for-Microservices-with-Python/blob/master/Chapter06/thoughts_backend/kubernetes/ingress.yaml) )中描述了入口。文件复制到这里。注意我们如何将元数据设置在适当的名称空间中:
```
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
    name: thoughts-backend-ingress
    namespace: example
spec:
    rules:
        - host: thoughts.example.local
          http:
            paths:
              - backend:
                  serviceName: thoughts-service
                  servicePort: 80
                path: /
```
该入口将使服务暴露给端口`80`上的节点。由于多个服务可以在同一个节点上公开，它们可以通过主机名来区分，在本例中为`thoughts.example.local`。
The Ingress controller we are using only allows exposing ports `80` (HTTP) and `443` (HTTPS) in `servicePort`.
应用该服务后，我们可以尝试访问该页面，但是，除非我们将呼叫定向到正确的主机，否则我们将得到 404 错误:
```
$ kubectl apply -f kubernetes/ingress.yaml
ingress "thoughts-backend-ingress" created
$ kubectl get ingress -n example
NAME                     HOSTS                  ADDRESS  PORTS  AGE
thoughts-backend-ingress thoughts.example.local localhost 80 1m
$ curl http://localhost
404 Not Found
404 Not Found
nginx/1.15.8
```
我们需要能够将任何请求指向我们的本地主机。在 Linux 和 macOS 中，最简单的方法是将您的`/etc/hosts`文件更改为包含以下行:
```
127.0.0.1 thoughts.example.local
```
然后，我们可以使用浏览器检查我们的应用，这次在`http://thoughts.example.local`(和端口`80`)中:
![](img/ce2705b4-0075-4086-9b08-df80806271e5.png)
定义不同的主机条目允许我们从外部访问所有的服务，能够调整它们并调试问题。我们将以同样的方式定义其余的组件。
If you get a `Connection refused` error and the word `localhost` does not appear when running `kubectl get ingress -n example`, your Kubernetes installation does not have the Ingress controller installed. Double-check the installation documentation at [https://github.com/kubernetes/ingress-nginx/blob/master/docs/deploy/index.md.](https://github.com/kubernetes/ingress-nginx/blob/master/docs/deploy/index.md)
所以现在我们有了一个部署在 Kubernetes 本地的工作应用！
# 在本地部署整个系统
我们的每个微服务都独立工作，但是为了让整个系统工作，我们需要部署其中的三个(思想后端、用户后端和前端)，并将它们相互连接。特别是前端，需要另外两个微服务启动并运行。有了 Kubernetes，我们可以在本地部署它。
要部署整个系统，我们需要先部署用户后端，然后部署前端。我们将描述这些系统中的每一个，将它们与已经部署的思想后端相关联，我们之前已经看到了如何部署。
# 部署用户后端
用户后端文件非常类似于思想后端。你可以在 GitHub repo 中查看它们。确保`deployment.yaml`值中的环境设置正确:
```
$ kubectl apply -f users_backend/kubernetes/deployment.yaml
deployment "users-backend" created
$ kubectl apply -f users_backend/kubernetes/service.yaml
service "users-service" created
$ kubectl apply -f users_backend/kubernetes/ingress.yaml
ingress "users-backend-ingress" created
```
记住一定要在`/etc/hosts`中包含新的主机名:
```
127.0.0.1 users.example.local
```
您可以在`http://users.example.local`中访问用户后端。
# 添加前端
前端服务和入口与前面的非常相似。部署略有不同。让我们分三组来看一下配置:
1.  首先，我们添加关于`namespace`、`name`和`kind`(部署)的元数据，如下代码所示:
```
---
apiVersion: apps/v1
kind: Deployment
metadata:
    name: frontend
    labels:
        app: frontend
    namespace: example
```
2.  然后，我们用模板和`replicas`的数量定义`spec`。对于本地系统来说，只有一个副本是合适的:
```
spec:
    replicas: 1
    selector:
        matchLabels:
            app: frontend
    template:
        metadata:
            labels:
                app: frontend
```
3.  最后，我们`spec`用容器定义出模板:
```
        spec:
            containers:
                - name: frontend-service
                  image: thoughts_frontend:latest
                  imagePullPolicy: Never
                  ports:
                     - containerPort: 8000
                  env:
                      - name: THOUGHTS_BACKEND_URL
                        value: http://thoughts-service
                      - name: USER_BACKEND_URL
                        value: http://users-service
```
与之前定义的思想后端部署的主要区别在于有一个容器，并且其上的环境更简单。
我们将后端 URL 环境定义为服务端点。这些端点在集群中是可用的，因此它们将被定向到适当的容器。
Remember that the `*.example.local` addresses are only available in your computer, as they only live in `/etc/hosts`. Inside the container, they won't be available.
This is suitable for local development, but an alternative is to have a DNS domain that can be redirected to `127.0.0.1` or similar.
我们应该在`/etc/hosts`文件中添加一个新的域名:
```
127.0.0.1 frontend.example.local
```
Django 要求您设置`ALLOWED_HOSTS`设置的值，以允许它接受主机名，因为默认情况下，它只允许来自 localhost 的连接。更多信息请参见 Django 文档([https://docs . Django project . com/en/2.2/ref/settings/# allowed-hosts](https://docs.djangoproject.com/en/2.2/ref/settings/#allowed-hosts))。为了简化事情，我们可以允许任何主机使用`'*'`。查看 GitHub 上的代码。
In production, it's good practice to limit the hosts to the **Fully Qualified Domain Name** (**FQDN**), the full DNS name of a host, but the Kubernetes Ingress will check the host header and reject it if it's not correct.
前端应用的部署与我们之前所做的一样:
```
$ kubectl apply -f frontend/kubernetes/deployment.yaml
deployment "frontend" created
$ kubectl apply -f frontend/kubernetes/service.yaml
service "frontend-service" created
$ kubectl apply -f frontend/kubernetes/ingress.yaml
ingress "frontend-ingress" created
```
然后我们可以访问整个系统，登录，搜索等等。
Remember that there are two users, `bruce` and `stephen`. Their passwords are the same as their usernames. You don't need to be logged in to search.
在浏览器中，转到`http://frontend.example.local/`:
![](img/b45ab968-9029-4a8b-9c2a-7571d2057c07.png)
恭喜你！您有一个工作正常的 Kubernetes 系统，包括不同部署的微服务。您可以独立访问每个微服务来调试它或者执行一些操作，比如创建新用户等等。
如果需要部署新版本，使用`docker-compose`构建适当的容器，并删除容器，以强制重新创建容器。
# 摘要
在本章中，我们看到了如何在 Kubernetes 本地集群中部署我们的微服务，以允许本地开发和测试。将整个系统部署在本地计算机上可以大大简化新功能的开发或系统行为的调试。生产环境会很相似，所以这也为它奠定了基础。
我们首先描述了缺失的两个微服务。用户后端处理用户的认证，前端是[第 1 章](01.html)、*移动-设计、计划和执行*中的整体的修改版本，它连接到两个后端。我们展示了如何以一种`docker-compose`方式构建和运行它们。
之后，我们描述了如何在 Kubernetes 中设置`.yaml`文件的组合来正确配置应用。每个微服务都有自己的部署来定义可用的吊舱，有一个服务来定义稳定的接入点，还有一个入口来允许外部访问。我们详细描述了它们，然后将它们应用于所有的微服务。
在下一章中，我们将看到如何从本地部署转移到部署准备投入生产的 Kubernetes 集群。
# 问题
1.  我们正在部署的三种微服务是什么？
2.  哪个微服务需要另外两个可用？
3.  为什么我们在`docker-compose`运行时需要使用外部 IPs 连接微服务？
4.  每个应用需要哪些主要的 Kubernetes 对象？
5.  是否不需要任何对象？
6.  如果我们将任何微服务扩展到多个 pod，您能看到任何问题吗？
7.  我们为什么使用`/etc/hosts`文件？
# 进一步阅读
你可以在*Kubernetes for Developers*([https://www . packtpub . com/eu/virtualization-and-cloud/Kubernetes-Developers](https://www.packtpub.com/eu/virtualization-and-cloud/kubernetes-developers))和 *Kubernetes Cookbook -第二版*([https://www . packtpub . com/in/virtualization-and-cloud/Kubernetes-Cookbook-第二版](https://www.packtpub.com/in/virtualization-and-cloud/kubernetes-cookbook-second-edition))中了解更多关于 Kubernetes 的信息。