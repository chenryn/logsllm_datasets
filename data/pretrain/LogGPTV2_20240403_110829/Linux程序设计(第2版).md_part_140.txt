/if device is busy.sleep */
if (device->stat & BUSY)
(onenbs] uudae[
如果判断设备是否忙的测试操作是非原子化的，那么在测试之后但在sleep之前，这个判断
条件就可能会变为false、这就有可能使进程永远休眠在队列上。Linux里有一些非常方便的二进
制位测试操作是保证以原子化方式进行的、如表21-18所示：
表21-18
set_bit[int nr,volatile void · addr)
用adt地址处的位掩码设置、清除或测试mr里给出的二进制位
clear_bitlint nr, volatile void *addr)
test_bit(int nr, volatile void *addr)
把上面那个设备忙测试改为下面这样：
if (test_bit(BUsY,&device->stat)
/1f device is busy, sleep */
(nanb) uodaa
就可以完全避免出现竞争现象了。在asm/bitops.h文件里还定义了一些其他的操作，比如测
试加设置等。
21.6.8对关键节进行保护
很明显，认为自己的模块将只运行在UP系统上是非常不智的想法。Linux提供了两种轮转锁
机制，它们可以用来向多CPU环境中的数据结构提供保护。在UP系统上，它们将缺省地等同于
前面介绍过的调用cli来禁止中断的办法；但在SMP系统上，它们将只禁止本地CPU上的中断
如果驱动程序里的余体函数在修改共享数据结构之前申请使用的都是同一把轮转锁，这就已经
足够了。
1.基本轮转锁
轮转锁是最基本的加锁指令之一。如果一个进程试图进人已经被另外一个进程用轮转锁保
护起来的关键区域，就会在原地“兜圈子”，即循环等待锁的释放和可申请。
在asm/spinlock.h文件里可以查到各种类型的轮转锁。如果你对它们在单CPU和多CPU配置
情况下的具体实现方法有兴趣，这个文件也是必读材料之一。Linux里的轮转锁有两种基本类型。
下面是它们的语法定义：
spinlock_t our_lock - SPIN_LOCK_uNLoCKED
unsigned 1ong flags;
spin_lock_irqsave{&our_lock, flags) ;
spin_lock(&our_lock);
加入jaVa编程群：524621833
---
## Page 759
742Linux程序设计
如果在中断期间不打算对数据进行修改，spin_lock就足够用了。它能预防来自其他CPU的
修改操作，但甚至连本地CPU上的中断都没有禁止。这使它的速度比spin_lock_irqsave要快很多，
而后者还提供了针对中断处理器的预防措施。
spin_unlock(±our_1ock) :
spin_unlock_irqrestore [kour_lock. flags) :
这两个宏定义的作用是在完成数据修改工作后解除相应的轮转锁：
在asm/spinlock.h文件里还有许多其他的函数，比如用来在尝试获取一把锁之前测试能否成
功获取这把锁的宏定义等。如果你需要使用进一步的功能，就可以在那里找到需要的资料
2.读、写操作锁
刚才介绍的轮转锁提供的是全面的加锁机制，能够在各种目的的重入情况下给代码提供保
护。但有时候需要为数据提供更精细的访问控制（比如提供数据的只读、只写等操作）也是很
有必要的。Linux为这些目的也准备了加锁机制，允许我们申请获得只读或者只写等操作权限）
即允许多个读操作或一个写操作同时进人关键区域。
unsigned long flags;
rwlock_t our_1ock = Rw_LoCk_UNLOCKED;
read_1ock(6our_lock);
read_1oek_irqsave(&our_1ock, flags1 ;
write_lock_irqsave (&our_lock, flags1;
write_lock(&our_lock) :
与基本轮转锁相比，这里的语法现象完全相同.所以我们也用不着多加解释了。类似的宏
定义提供了对该区域进行解锁的功能。
read_unlock(&our_1ock) :
write_unlock(&our_1ock);
read_unlock_irqrestore(kour_lock, f′ags):
write_unlock_1rqrestore(&our_iock, f’ags):
现在，大家应该知道如何利用基本的轮转锁和读/写操作锁来保护自已免受重人问题的干扰
影响了。如果是在一个UP（单CPU）环境里，所有非IRQ版本的函数就都会扩展为空操作（IRQ
版本还会禁止中断，这是因为它们是在中断一发生就得到处理的，因此还必须异步地运行），对
系统和你代码的性能都不会产生不良的影响：但它幻在SMP（多CPU）系统上的效果与基本的
ci构造相比就灵活有效的多了。
3.自动加锁机制
供设备驱动程序使用的大多数函数在内部都已经受到轮转锁的保护了一一这要归功于内核，
因此不需要额外再加上锁了。在定时器部分的内容里我们已经给出了一个这样的例子：
add_timer在对给定的定时器进行处理之前会申请使用内部的timer_list锁。如果那是一个仅在该
函数内使用的局部定时器，就不需要进行加锁，直接调用intermal_add_timer就行。但我们建议大
家要聚持使用“更安全的”函数，加上这几句话的目的是希望大家明白我们为什么没有在Schar
里给等待队列加上锁来保护它。
21.7块设备
我们在这本书里还要学习另外一种类型的设备。它们是与字符设备完全不同的东西，这种
加入jaVva编程群：524621833
---
## Page 760
第21章设备驱动程序
设备吞吐的不是一个一个的字节，面是整块的数据。应用程序访问字符设备时一般都采用直接
读写的办法，但访问块设备时就要利用系统里的缓冲区了。
内核
块设备
缓冲区缓存
文件系统
字符设备
▼
应用程序
应用程序
图21-5
图21-5只说对了一半，这是因为只有数据的读、写操作是需要利用缓冲区缓存的，面open、
close和ioctl等操作一半都有专用的人口点。
块设备上一般都容纳着文件系统，只要给出准备对哪些数据块进行读写，就可以对它们进
行随机性访问。这与字符设备形成明显的对比，对字符设备只允许进行顾序的非随机性访问，
因此很难用来提供对文件系统的存储：
Linux对这两种设备划分并不严格，甚至连程序接口都是相同的。我们在设计我们的第一个
字符设备Schar的时候就曾发现：file_operations结构里的部分元素并非仅能用于面向字符的访问
机制，两种类型的设备都可以使用它们。
21.7.1一个简单的RAM盘模块：Radimo
掌握块设备及其底层系统内部工作原理的最佳方法就是扎扎实实地编写一个活生生的例子。
Radimo是一个RAM盘驱动程序，它可以容纳一个尺寸变化着的文件系统，具体容量要取决于系
统中有多少可用的内存。
请求函数是每一个块设备的核心。它负责接收读写请求并把它们转换为设备能够理解的命
令。如果我们是在编写一个IDE驱动程序，请求函数就将生成一系列命令并把它们传递到控制器
去，控制器执行这些命令对数据的双向传输进行初始化。模块的开始部分需要对几件事情（包
括请求函数在内）按规定的次序做出定义。各种头文件的先后次序就不必多说了，但在包括上
linux/blk.h头文件之前，必须先把下面几样东西定义好见表21-19：
加入jaVa编程群：524621833
---
## Page 761
Linux程序设计
裹21-19
#define MAJOR_NR
RADIMO_MA.OR
设备的主编号，这条定义必不可少
#def1ne DEVICE_NAME
'radimo"
设备的名字——可以省略，省略时将
被标识为“unknown”（未知）设备。它
是出现数据请求错误时将被打印出末的
设备名，除此之外没有其他的用处
def1ne DEVICE_REQUEST
radino_reauest
设备的请求函数。它也是必不可少的
define DEvICE_NR(device)
(MINOR (device))
用在可分区设备上（比如硬盘），设
备将利用这个辅编号来选择分区
define DEVICE_ON(device)
电动设备可以通过设置这网个满数来
define DEVICE_OPF (device)
控制该设备的启动和停止。块设备系统
会在完成对数据请求的服务之后调用停
止（_OFF）函数，DEVICE_OFF必须得
到定义，哪怕是-个空定义：DEVICE
ON可以省略
#define DEVICE_NO_RANDOM
如果定义了这个标志，就不允许把这
个设备添加到随机数字发生池队列里
去。它与中断处理器的SA_SAMPLE
RANDOM标志作用类似
在定义好这几样东西之后，就可以加上linux/blk.h文件了。
1.数据块的长度
块设备有两种扇区长度，一个是硬件区长度，一个是软件扇区长度。前者描述的是数据
在设备控制下的硬件介质上的存储格式，面后者描述的是数据在设备里的排故形式。现时期大
多数设备的硬件扇区长度是512个字节，部分设备如MO驱动器等通常使用2048个字节的扇区
长度。
这些长度值是由设备的初始化过程在以设备主编号为下标的全局性数组里设置的：
define RADIMO_HARDS_SIZE
512
define RADIMO_BLOCK_SIZE
1024
static int radimo_hard= RADIMO_HARDS_SIZE
static int radimo_soft = RADIwo_BLOcK_SIzE:
hardsect_size{RADIMO_MAJOR] = &radino_hard;
blksize_size[RADIMO_MAJOR] = kradimo_soft;
我们按传统选用512个字节作为硬件扇区长度。这其实并不重要，因为Radimo的数据是保存
在一个内部缓冲区里的。软件方面的数据块长度可以取符合下列规则的任何值：它必须等于或
大于硬件扇区长度，它必须是硬件扇区长度的整数倍，它还必须小于PAGE_SIZE。如果你没有
给出自已的设置，硬件扇区长度的缺省值将取为512个字节，面块长度将取为1024个字节。
全局数组里除扇区长度以外，还保存着设备的总长度。这个长度参数的单位是KB，让内核
自动返回“-ENOSPC”（设备上没有空闲空间）。
blk_s1ze(RADIMO_MAJOR] = &radimo_size ;
有趣的是，如果我们建立了好几个虚拟设备（采用以设备的辅编号为下标的办法），它们的
加入jaVa编程群：524621833
---
## Page 762
第21章设备照动程序
745
radimo_size将组成个数组，数组下标的形式为“[MAJOR][MINOR]。与块设备有关的各种
全局性数据结构的定义都放在drivers/block/ll_rw_blk.c文件里，并且以程序注释的形式进行了
说明。
2.块设备的注册
在完成各项定义之后，设置一个file_operations文件操作结构，如下所示：
static struct file_operations radino_fops ={
*1lseek */
block_write
.
NULL
generic block write */
NULL.
readdir */
radimo_ioctl,
/* pell */
NULL,
radiao_open,
/* rtmap */
radino_release,
NULL.
/* flush */
NULL.
NULL
/*fsyne *
radino_revalidate,
NULL
} ;
*lock*
文件操作结构搭建起我们的通信系统。我们一般不需要定义自己的读、写函数，这是因为
该结构的缺省配置能够在数据请求到来时调用11_rw_block把请求排到队列里供我们执行，这些
缺省操作可以在fs/block_dev.c和drivers/block/lL_rw_block.c文件里查到。事实上，使用块设备的
时候并不需要知道它这些内部的工作原理。我们定义了白已的iucu函数，为了让块设备能够与标
准的文件系统工具命令正确地配合工作，有几个iocu命令是我们必须支持的，我们一会儿再介绍
它们。open和release与它们在字符设备里的作用是一样的，剩下的就是文件操作radimo_media
_change 
块设备的注册工作与字符设备也基本相同，如下所示：
res  register_bikdev(RADIMO_MAJOR.*radimo*, &radino_fops]:
Lf（res）
MSG(RADIHO_ERRoR,*couldn't register block device\n*):
return res;
21.7.2介质的更换
块设备在挂装的时候会调用定义了的check_media_change函数来检查介质是否被更换过了。
RAM盘驱动程序永远不会遇到需要更换介质的问题，但我们假装这种事情也可以发生。Radimo
设置了一个内部的定时器，每隔60秒，如果设备不忙，就清除我们的存储区。同时，它还把系
统缓冲区里的缓冲数据设置为已失效，强制实现对它们的重新读取面不是从缓存里提供给应用
程序。只要我们返回一个表示介质已经被更换过了的“1”，VFS自已就会把缓冲区设置为已失
效；但要等到挂装设备时才会发生这样的事情。如果用户只是简单地用dd或cp命令来拷贝设备
的话，缓冲区里的数据不会发生变化。
revalidate与介质的更换是密切相关的。如果介质被更换了，radimo_media_change就将返间
加入jaVa编程群：524621833
---
## Page 763
746Linux程序设计
“1”，把这次更换通知给VFS。然后调用revalidate函数让设备刷新它内部保存的设备信息。如果
必要的操作动作都可以在介质更换函数里完成的话，就没有必要再专门实现一个revalidate函
数；而月，它返回的是什么都没有关系一我们保留这个函数的目的是为了让大家更好地理解块
设备的文件操作。
21.7.3块设备的ioctl文件操作
既然块设备是用来容纳文件系统的.那么让所有的块设备都能接受一些标准的ioctl命令也就
再正常不过了。我们在字符设备部分介绍过ioctu的实现方法，如果你还有什么不明白的地方，请
复习一下以前的内容。Radimo实现了最常见的ioctl标准命令。如表21-20所示：
表21-20
BLKFSBUF
块设备的缓冲区强制写操作。把缓冲区里的当前数据强制性地写到磁盘上。Radimo调
用fsync把缓冲区里的当前数据强制性地写到藏盘上，然后把它们标记为已头效
BLKGETSTZE
查看块设备的容景，以1024个字节为单位返回块设备的将量。与文件系统有关的各种
工具性命令（比如fsck等）都要通过这个ccu命令来确定设备的总容量。如果设备不支
持这个会令，它们就得猜了
BLKSS738T
查看块设备的扇区长度。返回块设备的教件扇区长度
BLKRAGE7
块设备的预读功能：返回该设备当前读写位置前面的部个数据值
BLKRASET
块设备的预写功能，设置该设备当前读写位置前面的那个数据值
BLKRRPART