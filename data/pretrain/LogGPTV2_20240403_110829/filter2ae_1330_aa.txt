**作者：DappReview  
公众号：**  
**系列阅读：**
**导读**
：此次TronBank合约被盗事件再次印证了一个简单到令人发指的常识——所谓智能合约的开源并不能等同于“无条件的安全”，而且粗糙的去中心化机制可能存在被利用的中心化黑幕可能。在目前这个混沌无序的市场环境中，作为一个成熟的“韭菜”，请不要再轻易相信任何口头上的去中心化承诺。
**北京时间5月3日凌晨4点12分，一笔神奇的合约调用转走了TronBank合约中的2673万TRX（价值427万RMB），合约余额归零。**
仅仅在20多天前，Tronbank团队的第二个游戏BTTBank在发布3小时内即被黑客用假币攻击并盗走数千万BTT（并非1.8亿BTT），事隔不到一个月，第三款游戏TRX
Pro于4月29日20点正式上线，几天时间之内，合约余额已经突破2500万TRX。
这是否是TRON生态上的Dapp又一次被黑客盯上并成功洗劫一空？
而接下来发生的这一切
更让所有人始料未及
### 偶然触发的Bug？
合约余额归零后，项目方telegram群里面骗局和黑客的质疑声不绝于耳，DappReview和小伙伴们开始着手研究到底发生了什么。"黑客"的地址为`THeRTTCvN4SHEVYNqcLVLNGGVsWLR4smyH`，利用DappReview的玩家数据查看工具，可以看到该地址的所有者像是一个正常的Dapp玩家，从今年1月到5月该玩家涉猎过数十个Dapp，其中TronGoo是他玩过最多的游戏，从TronGoo官方排行榜可以看到他就是排名第二的大户玩家。
数据来源 https://player.dapp.review/
发生被盗事件约2个小时之后，在一个名为Scam
Watch（骗局观察）的Discord频道中，调走这一笔2673万TRX的地址`THeRTT**`拥有者wojak现身了。
根据wojak的说法，他写了个脚本在分析波场虚拟机字节码，批量扫描合约并发起交易看看有没有什么能赚到钱的方法，
**结果偶然之中命中了Tronbank合约的bug** 。一开始连他自己都不知道这笔钱是从Tronbank打过来的。
社区里部分人建议wojak把钱还给Tronbank开发者，而wojak认为这不是他的问题，开发者应该自己写测试例子，做审计以及至少跑一些形式化验证（很显然他们啥都没干），
**他愿意把这笔钱原封不动还给Tronbank的每一个投资者，而不是项目方的开发者。**
wojak要求参与了Tronbank的投资者发给他投资的交易hash值以及自己的地址，他将写一个脚本进行验证，并承诺退款给有损失的Tronbank投资人。
### 刻意埋藏的后门？
随着调查的深入，那一笔触发Bug的交易被放回桌面上被仔细的剖析。我们再来看一下：
注意到，该笔交易调用的是合约里withdraw函数，发送的金额为0.011911
TRX，要注意在Tronbank正常的业务逻辑下，调用`withdraw`函数是不应该发送任何TRX的，金额应该为0. 这一点在源代码中就可以验证。
像Tronbank这样资金盘属性的Dapp，往往都会把代码开源让合约和逻辑变得透明可信来吸引投资人，在网站最明显的位置，也标明了通过第三方验证工具`tronsmartcontract.space`（以下简称TSC）进行合约代码验证后的代码信息。
从TSC点开源代码之后，找到withdraw函数，函数第一行会先调用_withdraw()来取得可以提取的TRX金额，在_withdraw()函数的第一行我们可以看到：
    require(msg.value == 0, "wrong trx amount");
这一行代码的意思是要求该笔交易发送的TRX金额必须为零，否则无法继续执行，交易会被REVERT。
**也就是说，按照开源代码的逻辑，那一笔触发Bug的交易根本不可能发生。**
现实变成了，TRX Pro的合约实际执行逻辑和所谓“开源”的代码逻辑并不一致。
这里补充说明一下，所谓的代码认证过程是这样：
  1. 开发者在主网发布合约
  2. 开发者在TSC上传代码，选择编译版本，编译为bytecodes，
  3. TSC把步骤2中的bytecodes和步骤1中发布合约的bytecodes做匹配，匹配成功，则认证通过，理论上多或者少一个空格都不行
进一步深扒，从tronscan上找到TRX Pro合约的bytecodes，用反编译工具进行处理得到：
反编译工具： 
在withdraw函数中，多了一个判断`else if ((0x2E87 ==
msg.value))`，如果满足条件，那么就会把合约的余额全部转给交易发起者！我们把16进制的数字0x2E87转换成10进制，也就是11911，要知道TRX的精度为6位，11911所对应的TRX金额就是0.011911
TRX... 而这一部分判断在TSC的开源代码中是不存在的，看起来就像是是一个被藏起来没有公布的后门。
用更简单的语言梳理一遍：
  1. 在主网上部署的合约，通过反编译发现，调用withdraw函数时，如果发送金额等于0.011911 TRX，则会转移全部合约余额；