Network and Distributed System Security Symposium (NDSS),
2014.
APPENDIX
A. ALGORITHM PSEUDOCODE
Algorithm 2 DIALDroid’s algorithm for computing ICC leaks to /
from an Android app
1: System DIALDROID(apkF ile)
2:
3:
4:
5:
(cid:2) Subsystem: ICC Entry / Exit Point Extractor
permissions ← extractP ermissions(apkF ile)
entryP oints ← extractIntentF ilters(apkF ile)
exitP oints ← identif yExitP oints(apkF ile) (cid:2) static analysis to
(cid:2) Input: An Android apk ﬁle to analyze
determine the attributes of intents passing through the ICC exit points
(cid:2) Subsystem: Dataﬂow Analyzer
timeout ← 300s
try then
iccExitLeaks ← identif yICCExitLeaks(apkF ile,
timeout, preciseConf )
(cid:2) static analysis to identify ICC exit leaks
with a high precise conﬁguration
catchTimeoutException
iccExitLeaks ← identif yICCExitLeaks(apkF ile,
timeout, lessP reciseConf )
(cid:2) precise conﬁguration failed, try a
less precise conﬁguration
end try
try then
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
iccEntryLeaks ← identif yICCEntryLeaks(apkF ile,
timeout, preciseConf ) (cid:2) static analysis to identify ICC entry leaks
with a high precise conﬁguration
catchTimeoutException
iccEntryLeaks ← identif yICCEntryLeaks(apkF ile,
timeout, lessP reciseConf )
(cid:2) precise conﬁguration failed, try a
less precise conﬁguration
end try
(cid:2) Subsystem: Data Module
appId ← saveT oDatabase(permissions, entryP oints,
exitP oints, iccExitLeaks, iccEntryLeaks) (cid:2) aggregate the data
extracted by the Entry/Exit point extractor and Dataﬂow analyzer, and store in
the DIALDroid db
(cid:2) Subsystem: ICC Leak Calculator
calculateICCLeaks(appId)
20:
21:
22: end System
(cid:2) compute ICC leaks to/from this app
B. ADDITIONAL RESULTS
On average, an app in Dataset III accesses ≈ 7 sensitive APIs and
invokes ≈ 13 ICC calls. Results of Kruskal-Wallis tests suggest that
some categories of apps access a higher number of sensitive APIs
(χ2 = 5907.9, df = 16, p < 0.001) or make a higher number of
ICC calls (χ2 = 3841.5, df = 16, p < 0.001). Malware apps (in
Virus Share) access a higher number of sensitive APIs or to invoke
more ICC methods, as expected.
B.1
Intra-app ICC Comparisons
We compare DIALDroid with four leading single-app ICC tools
(Amandroid, IccTA, DroidSafe, and COVERT). The comparison is
conducted on 44 intra-app ICC test cases from the three benchmarks.
Table 8 shows the accuracy results of the ﬁve tools against the 44
intra-app test cases in three benchmarks. DIALDroid has the highest
precision (94.1%), the third highest recall (74.4%), and the highest F-
measure (0.83) among the ﬁve tools in our experiment. IccTA’s intra-
app detection accuracy is comparable to DIALDroid. DroidSafe
achieves the highest recall (100%) supporting its claim regarding
the most precise Android life cycle modeling. However, DroidSafe
appeared weak on intent resolution. It reports the highest number
of false positives (36). Amandroid missed the most on the leaks
against the Service and Provider related test cases, suggesting likely
insufﬁcient lifecycle modeling for those two types of components.
from this app
for all ﬁlter in allIntentFilters do
(cid:2) computing sensitive channels originating
ICC channels to / from the app identiﬁed by appId
appAsSrc ← getAppIntentsW ithExitLeaks(appId)
allLeakingIntents ← getAllIntentsW ithExitLeaks()
appIntentF ilters ← getAppIntentF ilters(appId)
allIntentF ilters ← getAllIntentF ilters()
sensitiveChannels ← array(, )
for all intent in appAsSrc do
Algorithm 3 Calculate sensitive ICC Channels to / from an app
1: Procedure CALCULATESENSITIVECHANNELS(appId) (cid:2) Computing sensitive
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
for all intent in allLeakingIntents do (cid:2) computing sensitive channels ending
for all ﬁlter in appIntentFilters do
if match(intent,ﬁlter) then
if match(intent,ﬁlter) then
sensitiveChannels.append(intent.exit, f ilter.entry)
sensitiveChannels.append(intent.exit, f ilter.entry)
at this app
end for
end for
end for
end for
end if
end if
return sensitiveChannels
21: end Procedure
Books & Reference
Business
Comics
Communication
Entertainment
Lifestyle
Medical
Personalization
Photography
Productivity
Shopping
Social
Sports
Tools
Transportation
Travel & Local
Virus Share
0.0
40
% of apps with entry leaks
Figure 1: Percentages of apps out of each app category have ICC
exit leaks (left) or ICC entry leaks (right) in Dataset III.
7.5 10.0
% of apps with exit leaks
5.0
2.5
10
30
20
0
COVERT had the poorest accuracy among the ﬁve tools, indicating
inaccurate implicit intent matching as well as inadequate Android
life cycle modeling.
intents carrying sensitive information.
We manually inspected the cases where DIALDroid failed. DI-
ALDroid primarily failed to recognize two types of data leaks. One
is via fake service calls, e.g., bindService2, bindService3,
and bindService4 that leak data within the same component
using the onServiceConnected callback method.
The
other is via static ﬁelds, e.g., ActivityCommunication1.
DIALDroid failed to recognize those leaks, due to the lack
The two false
of
startActivity7) were
positives
due to the loss of ﬁeld sensitivity. E.g.,
the sender stores
sensitive information in a ﬁeld with a key = DroidBench
intent.putExtra("DroidBench",IMEI))
(e.g.,
(e.g.,
but
Log.i(intent.getStringExtra("DroidBench2")).
Due to the loss of ﬁeld sensitivity, we performed a simple regular
expression string search for the key (i.e., in this case DroidBench)
in the ICC entry leak path. Since a search for ‘DroidBench’ will
(startActivity6,
DroidBench2
receiver
leaks
the
Table 7: Statistics of our program analysis during the scalability
evaluation of DIALDroid with 110,150 real-world apps.
match a string containing ‘DroidBench2’, DIALDroid reports the
above scenario as a leak.
We compare the execution time of ﬁve tools in Figure 3. The
average is computed from three executions, for each data point.
Only Amandroid’s execution time was better than DIALDroid. All
the tools, except Amandroid, are built on top of SOOT [34]. DI-
ALDroid has the fastest execution among the four SOOT-based
tools.
Category
High-
precise
conﬁg.
83.7%
Books & Reference
72.7%
Business
80.5%
Comics
77.5%
Communication
77.4%
Entertainment
76.6%
Lifestyle
81.5%
Medical
84.7%
Personalization
79.5%
Photography
82.6%
Productivity
77.1%
Shopping
71.4%
Social
78.1%
Sports
85.0%
Tools
81.9%
Transportation
73.8%
Travel & Local
63.7%
Virus Share
Total*:
83.6%
*A few apps belong to multiple categories.
# Ana-
lyzed
8,146
5,949
2,057
5,632
8,189
7,368
1,801
7,435
8,041
7,582
6,336
6,870
7,047
8,105
6,323
3,344
9,944
110,150
Less-
precise
conﬁg.
13.8%
18.0%
16.7%
13.1%
16.7%
17.5%
13.6%
14.1%
16.6%
12.8%
15.3%
20.8%
16.2%
12.1%
12.7%
18.5%
26.5%
10.7%
Time-
out
2.5%
9.3%
2.8%
9.4%
5.9%
5.9%
4.9%
1.2%
3.9%
4.6%
7.6%
7.8%
5.7%
2.9%
5.4%
7.5%
9.8%
5.7%
Figure 2: The distribution of DIALDroid’s execution time for apps
in Dataset III.
Figure 3: Comparisons of the averaged intra-app execution time on
single-app benchmarks with four other state-of-the-art solutions.
Table 8: Intra-application ICC test results on DroidBench (develop branch), DroidBench (IccTA branch), and ICC-Bench. Multiple circles in
one row means multiple intra-app leaks expected. An all-empty row: no leaks expected and none reported. †indicates the tool crashed on that
test case.
(cid:2)(cid:2)= a correct warning, *= a false warning, (cid:2)= a missed leak
Test Case
# ICC Exit
Leaks
# ICC Entry
Leaks
Explicit
ICC
COVERT
Amandroid
IccTA
DroidSafe
DIAL-
Droid
(Ours)
ActivityCommunication1
ActivityCommunication2
ActivityCommunication3
ActivityCommunication4
ActivityCommunication5
ActivityCommunication6
ActivityCommunication7
ActivityCommunication8
BroadcastTaintAndLeak1
UnresolvableIntent1
startActivity1
startActivity2
startActivity3
startActivity4
startActivity5
startActivity6
startActivity7
startActivityForResult1
startActivityForResult2
startActivityForResult3
startActivityForResult4
startService1
startService2
bindService1
bindService2
bindService3
bindService4
sendBroadcast1
sendStickyBroadcast1
insert1
update1
delete1
query1
1
1
1
1
1
1