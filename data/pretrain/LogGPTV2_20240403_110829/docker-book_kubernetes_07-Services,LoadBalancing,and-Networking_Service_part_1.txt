# Service
Kubernetes [`Pods`](https://kubernetes.io/docs/concepts/workloads/pods/pod/) 是有生命周期的，它们产生和死亡，一旦死亡就不会复活。[`ReplicationControllers`](https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/) 能动态创建和销毁`Pod` （例如，当扩容、缩容或在 [rolling updates](https://kubernetes.io/docs/user-guide/kubectl/v1.8/#rolling-update) 时）。尽管每个`Pod` 有自己的IP，但这些IP可能是会变化的。这导致一个问题：如果一些`Pod` （称为backend）为Kubernetes群集中的其他`Pod` （称为frontend）提供功能，那么frontend如何找到，并一直能找到backend呢？
> 译者注：下面将backend译为后端，frontend译为前端。
可用`Services` 来解决该问题。
Kubernetes `Service` 是一个抽象，它定义了一组逻辑`Pod` 和一个访问它们的策略——有时称为微服务。 `Service` 所关联的一组`Pod` （通常）由 [`Label Selector`](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors) 决定（详见下文，为什么您可能需要没有选择器的`Service` ）。
例如，假设一个图片处理的后端有三个正在运行的副本。这些副本是可替代的——前端不关心他们使用哪个后端副本。虽然构成后端的实际`Pod` 可能会改变，但前端客户端不应该也没必要跟踪自己的后端列表（例如：知道后端副本列表的地址等待）。 `Service` 抽象可实现这种解耦。
对于Kubernetes-native应用程序，Kubernetes提供了一个简单的`Endpoint` API，只要`Service` 中的`Pod` 发生变化，它将被更新。对于non-native应用程序，Kubernetes为Service提供了一个基于虚拟IP的网桥，该网桥可重定向到后端 `Pod` 。
## 定义Service
Kubernetes中的`Service` 是一个REST对象，类似于`Pod` 。 像所有的REST对象一样， `Service` 定义可被POST到apiserver，从而创建一个新的实例。 例如，假设您有一组`Pod` ，每个`Pod` 都暴露端口9376，并携带标签`"app=MyApp"` 。
```yaml
kind: Service
apiVersion: v1
metadata:
  name: my-service
spec:
  selector:
    app: MyApp
  ports:
  - protocol: TCP
    port: 80
    targetPort: 9376
```
使用此文件，即可创建一个名为“my-service”的新`Service` 对象，该对象会代理那些使用TCP端口9376，并且有`"app=MyApp"` 标签的Pod，该`Service` 还会被分配一个IP地址（有时称为“Cluster IP”），它会被服务的代理使用（见下文）。 `Service` 的选择器将会被持续评估，处理的结果会被POST到一个名为“my-service”的`Endpoint` 对象。
请注意， `Service` 可将传入端口`port` 映射到任意`targetPort`端口。默认情况下， `targetPort` 将被设置为与`port` 字段相同的值。 也许更有趣的是， `targetPort` 可以是字符串，指向到是后端`Pod` 端口的名称。拥有该名称的端口的实际端口在每个后端`Pod` 中可能并不相同。这为`Services` 提供了很大的灵活性。例如，您可以在后端软件的下一个版本中更改该Pod所暴露的端口，而不会影响客户端的调用。
Kubernetes `Service`支持`TCP` 和`UDP` 协议。 默认值为`TCP` 。
### Services without selectors（不带选择器的Service）
Service通常抽象了 `Pod` 的访问，但也可抽象其他类型的后端。 例如：
- 您希望在生产环境中使用外部数据库集群，但在测试中，您将使用自己的数据库。
- 您希望将Service指向另一个 [`Namespace`](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/) 的Service或其他集群中的Service。
- 您正在将工作负载迁移到Kubernetes，部分后端运行在Kubernetes之外。
在以上这些情况下，您可以定义不带选择器的Service：
```yaml
kind: Service
apiVersion: v1
metadata:
  name: my-service
spec:
  ports:
  - protocol: TCP
    port: 80
    targetPort: 9376
```
因为该Service没有选择器，所以不会创建相应的`Endpoint` 对象。可手动将Service映射到指定的`Endpoint` ：
```yaml
kind: Endpoints
apiVersion: v1
metadata:
  name: my-service
subsets:
  - addresses:
      - ip: 1.2.3.4
    ports:
      - port: 9376
```
**注意**：Endpoint IP不能是loopback（127.0.0.0/8），link-local （169.254.0.0/16）或link-local multicast（224.0.0.0/24）。
> 译者按：loopback、link-local、link-local multicast拓展阅读：[https://4sysops.com/archives/ipv6-tutorial-part-6-site-local-addresses-and-link-local-addresses/](https://4sysops.com/archives/ipv6-tutorial-part-6-site-local-addresses-and-link-local-addresses/) 
访问不带选择器的`Service` 与访问有选择器Service相同。流量将被路由到用户定义的端点（在本例中为`1.2.3.4:9376` ）。
ExternalName Service一种特殊的Service：它不带选择器，也不定义任何端口或端点。相反，它可以作为将别名返回到外部Service的一种方式。
```yaml
kind: Service
apiVersion: v1
metadata:
  name: my-service
  namespace: prod
spec:
  type: ExternalName
  externalName: my.database.example.com
```
当查找主机 `my-service.prod.svc.CLUSTER` 时，集群DNS服务将会返回一条值为`my.database.example.com`的`CNAME` 记录。访问这样的Service与访问其他Service的工作方式相同，唯一的区别是重定向发生在DNS级别，并且不会发生代理或转发。如果您以后决定将数据库移动到集群中，可启动对应的Pod，添加适当的选择器或Endpoint并更改服务的`type` 。
## Virtual IPs and service proxies（虚拟IP与Service代理）
Kubernetes集群中的每个Node都运行着一个`kube-proxy` 。 `kube-proxy`负责为`Service`实现一个虚拟IP形式，`ExternalName` 类型的Service除外。在Kubernetes v1.0中，使用userspace模式进行代理。在Kubernetes v1.1中，添加了iptables代理，但不是默认的操作模式。从Kubernetes v1.2开始，默认使用iptables代理。
从Kubernetes v1.0起， `Services` 是“4层”（TCP / UDP over IP）结构。在Kubernetes v1.1中，添加了`Ingress` API（beta）来表示“7层”（HTTP）服务。
### Proxy-mode: userspace（代理模式：userspace）
在这种模式下，kube-proxy会监视Kubernetes Master对`Service` 和`Endpoints` 对象的添加和删除。对于每个`Service` ，它将在本地Node上打开一个端口（随机选择），记为“代理端口”。与该“代理端口”的任何连接将被代理到`Service` 的其中一个后端`Pod` （由 `Endpoint` 报告）。使用哪个后端`Pod` 是根据Service的`SessionAffinity` 决定的。 最后，它安装iptables规则，捕获到`Service` 的`clusterIP:Port` 的流量，并将流量重定向到代理端口，代理端口再代理后端`Pod` 。
这样，任何绑定`Service IP:端口` 的流量都被代理到合适的后端，而客户端不需要知道有关Kubernetes或`Service` 或`Pod` 的任何内容。
默认情况下，后端使用算法轮询选择Pod。要想实现基于客户端IP的会话亲和性（Client-IP based session affinity），可将`service.spec.sessionAffinity` 设置为`"ClientIP"` （默认为`"None"` ）；此时，可通过`service.spec.sessionAffinityConfig.clientIP.timeoutSeconds` 字段设置最大会话粘性时间（默认值为“10800”）
![](images/services-userspace-overview.svg)
### Proxy-mode: iptables（代理模式：iptables）
在这种模式下，kube-proxy会监视Kubernetes Master对`Service` 和`Endpoints` 对象的添加和删除。它将对于每个`Service` 安装iptables规则，从而捕获到`Service` 的`clusterIP:Port` 的流量，并将流量重定向到`Service` 的其中一个后端Pod。 对于每个`Endpoint` 对象，它会安装选择后端`Pod` 的iptables规则。
默认情况下，后端使用随机算法的选择Pod。要想实现基于客户端IP的会话亲和性（Client-IP based session affinity），可将`service.spec.sessionAffinity` 设为`"ClientIP"` （默认为`"None"` ）；此时，可通过`service.spec.sessionAffinityConfig.clientIP.timeoutSeconds` 字段设置最大会话粘性时间（默认值为“10800”）。
与用户userspace proxy模式一样，最终，任何绑定`Service IP:端口` 的流量都被代理到合适的后端，而客户端无需有关Kubernetes或`Services` 或`Pods` 的任何内容。这种模式应该比userspace proxy模式更快更可靠。但是，与userspace proxy模式不同，如果最初选择的Pod不响应，iptables代理不能自动重试请求另一个Pod，因此它依赖 [readiness probes](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#defining-readiness-probes) 。
![](images/services-iptables-overview.svg)
> 译者按：
>
> 1. 简而言之，就是userspace方式，使用kubeproxy来转发；而iptables模式中，kube-proxy只生成相应的iptables规则，转发由iptables实现。
> 2. 拓展阅读： 
## Multi-Port Services（多端口Service）
某些`Service` 可能需要暴露多个端口。对于这种情况，Kubernetes支持`Service` 对象上定义多个端口。当使用多个端口时，您必须提供所有端口名称，防止Endpoint产生歧义。 例如：
```yaml
kind: Service
apiVersion: v1
metadata:
  name: my-service
spec:
  selector:
    app: MyApp
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: 9376
  - name: https
    protocol: TCP
    port: 443
    targetPort: 9377
```
## Choosing your own IP address（选择自己的IP地址）
`Service` 创建时，可指定自己的Cluster IP。可通过`spec.clusterIP` 字段设置Cluster IP。 例如，如果您想替换一条现有DNS条目，或者有一个配置了固定IP、很难重新配置的遗留系统。用户选择的IP地址必须是合法的IP地址，并且该IP在`service-cluster-ip-range` CIDR范围内，该范围由API Server的标识指定。 如果IP不合法，apiserver将返回一个422 HTTP状态码，表示该值不合法。
### Why not use round-robin DNS?（为什么不使用轮询DNS？）
为什么要使用虚拟IP，而非标准的round-robin DNS呢？有几个原因：
- 长久以来，DNS库都未能实现DNS TTL并缓存域名查询结果。
- 许多应用只执行一次DNS查询，并缓存结果。
- 即使应用程序和DNS库都进行了适当的重新解析，客户端重新解析DNS造成的负载难以管理。
我们试图阻止用户吃力不讨好的事情。也就是说，如果有足够的人要求该功能，我们也可实现该方案作为替代方案。
## Discovering services（服务发现）
Kubernetes主要支持两种方式找到 `Service` ：环境变量和DNS。
### Environment variables（环境变量）
当`Pod` 在`Node` 上运行时，kubelet会为每个活动的`Service` 添加一组环境变量。它支持 [Docker links compatible](https://docs.docker.com/userguide/dockerlinks/) 变量（请参阅 [makeLinkVariables](http://releases.k8s.io/master/pkg/kubelet/envvars/envvars.go#L49) ）和更简单的`{SVCNAME}_SERVICE_HOST` 以及 `{SVCNAME}_SERVICE_PORT` 变量，其中服务名称是大写的，中划线将会转换为下划线。
例如，暴露TCP端口6379，并已分配 Cluster IP地址`10.0.0.11` 的服务 `redis-master` ，将会产生以下环境变量：
```properties