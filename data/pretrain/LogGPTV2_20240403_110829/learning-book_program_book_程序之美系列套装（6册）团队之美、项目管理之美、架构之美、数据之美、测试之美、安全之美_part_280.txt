一个更精确的模型；可以组合更多的数据，或者在单元数据或者二
元数据中保留更多的入口项，或者添加三元数据。
[1]乘法运算的向下溢出问题。
密码
我们所面临的第二个挑战是对加密的消息进行解密。我们首先一起
来看看替换加密，即使用一个字母替换另一个字母。对其中替换关
系的描述称为密钥，可以通过26个字母的字符串来表示它：第一个
字母替换"a”，第二个字母替换"b"等。以下是通过替换密码密钥对
消息进行加密(Pthon的库函数maketrans和translate可以实现大部分功
能）：
def encode (msg, key) :
"Encode a message with a substitution cipher."
return msg.translate (string.maketrans (ul (alphabet),
ul (key) ) )
def ul(text): return text.upper () +text.lower ()
zxsbdouwubgapoq,=aqeud
可能所有代码中最简单的就是移位加密，它是一种替换加密方法，
在这种加密方法中，消息中的每个字母都由其后面的第n个字母进
行替换。如果n=1，那么"b”替换“a”，“e"替换"b”......直到"a”替换
1587
---
## Page 1589
“z”。移位加密也被称为凯撒（Cesar）加密法：它们在公元前50多年很
先进。变换（sift函数使用移位加密的方法进行编码：
def shift (msg,n=13) :
"Encode a message with a shift(Caesar) cipher."
return encode (msg,alphabet[n: ]+alphabet [: n])
我们如下使用该函数：
>>>shift ('Listen,do you want to know a secret?')
'Yvfgra,qb lbh jnag gb xabj n frperg?
>>>shift (*HAL 9000 xyz'， 1)
'IBM 9000 yza*
在不知道密钥的情况下进行解密，我们遵循和分段相同的方法：定
义一个模型（我们将继续采用单元单词概率方式），枚举候选项并
选择最有可能的。由于只需要考虑26种候选移位，所以我们可以尝
试全部候选移位。
为了实现这一点，我们定义函数logPwords，它和函数Pwords相似，
但是它返回的是概率的自然对数值，其输入可以是一个很长的字符
串，也可以是一个单词序列：
def logPwords (words) :
"The Naive Bayes probability of a string or sequence of
words . "
if isinstance (words, str): words=allwords (words)
return sum(logl0(P(w)) for w in words)
def allwords (text) :
"Return a list of alphabetic words in text,lowercase.
return re.findall (*[a-z]+', text.lower ())
1588
---
## Page 1590
现在我们可以枚举所有候选项进行解码并挑选最有可能的：
"Find the best decoding of a message encoded with a shift
cipher."
candidates=[shift (msg,n) for n in range (len(alphabet)) ]
return max (candidates, key=logPwords)
我们可以通过测试来检查这种方式是否能够工作：
>>>decode_shift ('Yvfgra,qb lbh jnag gb xabj n frperg?')
'Listen,do you want to know a secret?'
这一切都太简单了。为了查看为什么简单，观察以下26个候选项，
以及它们的概率对数值：
8-bguqex qbuuqt qbb
Zwghsb,rc mci kobh hc ybck o gsqfsh?-83
Axhitc,sd ndj lpci id zcdl p htrgti?-83
Byijud,te oek mqdj je adem q iushuj?-77
Czjkve,uf pfl nrek kf befn r jvtivk?-85
Daklwf,vg qgm osfl 1g cfgo s kwujwl?-91
Eblmxg,wh rhn ptgm mh dghp t lxvkxm?-84
Fcmnyh,xi sio quhn ni ehiq u mywlyn?-84
Gdnozi,yj tjp rvio oj fijr v nzxmzo?-86
Heopaj,zk ukq swjp pk gjks w oaynap?-93
8-bqozqxxybbxxyqb
Jgqrcl,bm wms uylr rm ilmu y qcapcr?-76
Khrsdm, cn xnt vzms sn jmnv z rdbqds?-92
1589
---
## Page 1591
Listen,do you want to know a secret?-25
68-ngsp q xdot dn noqx Adz da,ogn
8-Abbn o bdu bA do mbe bg'd6nxN
Olvwhq, gr brx zdqw wr nqrz d vhfuhw?-85
Pmwxir,hs csy aerx xs orsa e wigvix?-77
Qnxyjs,it dtz bfsy yt pstb f xjhwjy?-83
Royzkt,ju eua cgtz zu qtuc g ykixkz?-85
Spzalu, kv fvb dhua av ruvd h zljyla?-85
Tqabmv, lw gwc eivb bw svwe i amkzmb?-84
Urbcnw,mx hxd fjwc cx twxf j bnlanc?-92
Vscdox,ny iye gkxd dy uxyg k combod?-84
Wtdepy,oz jzf hlye ez vyzh 1 dpncpe?-91
Xuefqz,pa kag imzf fa wzai m eqodqf?-83
当你扫描列表时，刚好一条线很明显，类似英语；而Pwords和我们
的直觉一致，假设该行的概率的对数值是-25（即10-25），它的可
能性是任何其他候选项的10倍多。
代码编写者通过消除单词之间的标点符号、空格和大小写区别，使
得解码者的工作变得更加困难。采用这种方式，解码者无法从简短
的单词如"T"、“a"和"the"中得到任何线索，也无法猜测省略符号
（）之后的字符应该是"s"还是"t”。函数shift2是一种加密方法，它
删除了非字符的数据，把所有的字符都转换成小写，然后再应用变
换加密方法：
def shift2 (mg, n=13) :
"Encode with a shift (Caesar) cipher,yielding only
letters [a-z] . "
return shift(just_letters(msg), n)
1590
---
## Page 1592
def just_letters (text):
"Lowercase text and remove all characters except[a-z]."
return re.sub （*[^a-z]',*', text.lower （))
以下是破译这段代码的一种方式，通过枚举每个候选项，对每个候
选项分段，并选择概率值最高的那个分段：
def decode_shift2(mg) :
"Decode a message encoded with a shift cipher,with no
spaces,"
candidates=[segment2 (sift (msg,n) ) for n in
range (len (alphabet)) )
p, words=max (candidates)
return'' .join (words)
我们一起来看它是如何工作的：
>>>shift2 ('Listen,do you want to know a secret?')
 yvfgraqblbhjnaggbxabjnfrperg*
>>>decode_shift2 ('yvfgraqblbhjnaggbxabjnfrperg′)
'listen do you want to know a secret'
>>>decode_shift2(sift2 ('Rosebud'))
'rosebud'
>>>decode_shift2(sift2 ("Is it safe?"))
'is it safe'
>>>decode_shift2(sift2 ("what's the
frequency, Kenneth?"))
1591
---
## Page 1593
'whats the frequency kenneth'
>>>msg='General Kenobi:Years agO'you served my father in
the Clone
Wars: now he begs you to help him in his struggle against
the Empire.
> > >decode_shift2 (sift2 (mg) )
clone wars now he
begs you to help him in his struggle against the empire'
这还是太简单了。我们一起来看看通用的密码替换方案，在这种方
案中，任何字母都可以被其他字母替换。现在我们无法继续枚举所
有的概率，因为总共有26！（约4×1026）种密钥，而不再仅仅是26
种。SimonSingh（编码鼻祖）编写的《TheCodeBook》提供了五种
策略（我们自己在后面增加了第六种）来破解密码：
1.字母一元模型频率。匹配消息中的常用字母到英语中的常用字母
（如"e"），匹配不常用字母到不常用字母（如"z"）。
2.双字字母分析。加密消息中的双字字母，在消息解密后还是双字
字母。考虑最生僻和最常用的双字字母。
3.找常见的单词如"the”、“and"和"of”。单字母单词通常是"a"或"T”。
4.可能的话，获取一个由你处理的消息类型所组成的词赖表。如军
事消息使用军事术语等。
5.猜测一个单词或者短语。例如，如果你觉得消息可能包含"your
faithfulservant”，就大胆猜测它。
6.使用单词模式。例如，加密单词“abbccddedf"很可能表示
“bookkeeper”，因为在词典库中没有其他单词满足这种模式。
对于单词间不包含空格的消息，策略3和策略6都不适合。策略1和
策略2每种只包含26种概率，而且似乎目标受众是有一定记忆和计
算能力的分析人员，而不是一个计算机程序。策略4和策略5是为了
1592
---
## Page 1594
某个特殊用途，而不是通用的解码方式。看起来我们只能依赖于自
已提出的策略6。但是我们知道应该如何实现该方法。
第一，定义一个概率模型：我们可以采用处理移位加密时所用的方
式来评估候选项：对文本分段，计算单词的概率。但是考虑该方法
的第二个步骤，刚并始几个（或者几千个）候选项可能是很差的候
选。在开始探索时，我们没有任何类似于单词的东西，因此在刚并
始就对文本分段的意义不大。然而，我们可能（或者只是碰巧）对
一行的几个字母进行解码，生成有意义的结果。因此，我们使用N
元文法模型而不是单词来构建语言模型。我们应该采用字母二元文
法模型？还是三元文法模型？抑或五元文法模型？我选择字母三元
文法模型是因为它是能够表示常用词（策略3）的最短的文法模
型。我通过一个单词二元字母数据文件（不能只看词汇文件，因为
需要考虑单词边际间的字母三元文法模型），对三元字母（删去了
空格和标点符号）进行计数，生成数据文件count_31。它总共包含
263=17576个三元字母组合。以下是出现频率最高和最低的10个三
元字母组合：
the 2.763&fzq 0.0000004%
ing 1.471jvq 0.0000004g
and 1.462&jnq 0.0000004$
ion 1.343zqh 0.0000004%
tio 1.101&jqx 0.0000003g
ent 1.074&jwq 0.0000003g
for 0.8848jqy 0.00000038
ati 0.852zqy 0.0000003g