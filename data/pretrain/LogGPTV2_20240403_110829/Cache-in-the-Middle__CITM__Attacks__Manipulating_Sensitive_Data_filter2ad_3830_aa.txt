title:Cache-in-the-Middle (CITM) Attacks: Manipulating Sensitive Data
in Isolated Execution Environments
author:Jie Wang and
Kun Sun and
Lingguang Lei and
Shengye Wan and
Yuewu Wang and
Jiwu Jing
Cache-in-the-Middle (CITM) Attacks : Manipulating Sensitive
Data in Isolated Execution Environments
Jie Wang1,2,3, Kun Sun2, Lingguang Lei1,3∗, Shengye Wan2,4, Yuewu Wang1,3, and Jiwu Jing5
1SKLOIS, Institute of Information Engineering, CAS, China
2Department of Information Sciences and Technology, CSIS, George Mason University
3School of Cyber Security, University of Chinese Academy of Sciences, China
4Department of Computer Science, College of William and Mary
5School of Computer Science and Technology, University of Chinese Academy of Sciences
{wangjie, leilingguang, wangyuewu}iie.ac.cn, PI:EMAIL, PI:EMAIL, PI:EMAIL}
ABSTRACT
The traditional usage of ARM TrustZone has difficulty on solving
the conflicts between the manufacturers that want to minimize the
trusted computing base by constraining the installation of third-
party applications in the secure world and the third-party applica-
tion developers who prefer to have the freedom of installing their
applications into the secure world. To address this issue, researchers
propose to create Isolated Execution Environments (called IEEs) in
the normal world to protect the security-sensitive applications. In
this paper, we perform a systematic study on the IEE data protection
models and the ARM cache attributes, and discover three cache-
based attacks called CITM that can be leveraged to manipulate the
sensitive data protected in IEEs. Specifically, due to the inefficient
and incoherent security measures on the cache that maps to the
IEE memory (i.e., memory designated for IEEs), attackers in the
normal world may compromise the security of IEE data by manipu-
lating the IEE memory during concurrent execution, bypassing the
security measures enforced when a security-sensitive application
is suspended or finished, or misusing the incomplete security mea-
sures during IEE’s context switching processes. We conduct case
studies of CITM attacks on three well-known IEE systems including
SANCTUARY, Ginseng, and TrustICE to illustrate the feasibility to
exploit them on real hardware testbeds. Finally, we analyze the root
causes of the CITM attacks and propose a countermeasure to defeat
them. The experimental results show that our defense scheme has
a small overhead.
CCS CONCEPTS
• Security and privacy → Systems security; • Computer sys-
tems organization → Architectures.
KEYWORDS
TrustZone; Isolated Execution Environment; Cache Manipulation
*Lingguang Lei is the corresponding author.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’20, November 9–13, 2020, Virtual Event, USA
© 2020 Association for Computing Machinery.
ACM ISBN 978-1-4503-7089-9/20/11...$15.00
https://doi.org/10.1145/3372297.3417886
ACM Reference Format:
Jie Wang1,2,3, Kun Sun2, Lingguang Lei1,3∗, Shengye Wan2,4, Yuewu Wang1,3,
and Jiwu Jing5. 2020. Cache-in-the-Middle (CITM) Attacks : Manipulating
Sensitive Data in Isolated Execution Environments. In Proceedings of the
2020 ACM SIGSAC Conference on Computer and Communications Security
(CCS ’20), November 9–13, 2020, Virtual Event, USA. ACM, New York, NY,
USA, 15 pages. https://doi.org/10.1145/3372297.3417886
1 INTRODUCTION
ARM TrustZone has become one popular security technology to pro-
tect security-sensitive applications in an isolated trusted execution
environment [1]. Many manufacturers enable the TrustZone-based
protection on their commercial mobile devices [2, 26, 29, 35]. As a
hardware-assisted technology, TrustZone divides platform into two
execution environments, namely, the normal world (or non-secure
world) and the secure world, where the normal world is responsible
for running normal applications over an rich OS and the secure
world is preserved to protect security-sensitive code and data.
The traditional usage of TrustZone is to run the security-
sensitive applications and store their sensitive data in the secure
world, as shown in Figure 1(a). Those solutions are usually called
Trusted Execution Environment (TEE) systems, where the security-
sensitive applications are implemented as Trusted Applications
(TAs) running in the secure world (e.g., SAMSUNG KNOX [26],
OP-TEE [48], Qualcomm QSEE [29], and Huawei Secure OS [35]).
The TEE solutions rely on built-in hardware supports to enforce a
secure isolation and defend against attacks from untrusted rich OS.
Figure 1: TEE System vs. IEE System
Untrusted Rich OSIEE MonitorSecurity-sensitive ApplicationsNormal WorldSecure WorldProtected by IEE MonitorProtected by TrustZoneUntrusted Rich OSSecurity-sensitive ApplicationsNormal WorldSecure World(a)Architecture of TEE System(b)Architecture of IEE SystemSession 3E: Fuzzing/Trusted Execution Environments CCS '20, November 9–13, 2020, Virtual Event, USA1001Although the traditional TEE systems can ensure a strict isola-
tion and secure protection of the security-sensitive applications
in the secure world, they have difficulty on addressing two con-
flicting requirements from device manufacturers and third-party
security-sensitive application developers. On one side, since the
trusted computing base (TCB) of the TEE systems keeps increasing
along with the number of applications installed in secure world,
the manufacturers are reluctant to open the secure world for freely
installing third-party applications. Instead, they prefer to only in-
stall their own security-sensitive applications that may have gone
thorough a more strict security assessment. On the other side, more
third-party security-sensitive applications expect to be imported
into the secure world for an enhanced security protection, which
is critical to foster an ecosystem for more third-party application
developers to develop their security-sensitive applications for the
TEE systems.
To address the above problem in TEE systems, researchers pro-
pose to create Isolated Execution Environments (called IEEs) in the
normal world [14, 55, 56], as shown in Figure 1(b). The key idea
is to use a trusted reference monitor (i.e., the IEE monitor) in the
secure world to ensure that only the authorized IEE application (i.e.,
the security-sensitive application running in the IEE) can access the
related IEE sensitive resources, protecting the security-sensitive
application in one IEE from other IEEs and the rich OS. For example,
TrustICE [55] relies on the IEE monitor to protect IEE memory via
dynamically controlling the security attribute of the IEE memory.
Ginseng [56] constructs the IEEs to protect secrets of third-party
applications in the normal world without deploying any application-
specific logic in the secure world. SANCTUARY [14] allocates its
IEEs as the per-core environments to protect the memory desig-
nated for IEEs (hereinafter referred to as IEE memory) in the normal
world from being accessed by any other non-secure cores. In this
paper, we use "switch out" to denote the process of one core’s con-
text switching from IEE to untrusted rich OS, and "switch in" to
represent the reverse process on each core.
Compared with TEE systems, the IEE systems can minimize the
TCB of the secure world by moving security-sensitive applications
into the normal world and only installing an IEE monitor in the se-
cure world. Also, IEE systems can achieve a better portability since
the security-sensitive applications are installed and executed in the
normal world. However, since the security-sensitive applications
are isolated and protected by a software component (i.e., the IEE
monitor), IEE systems may not achieve the same level of security
protection as TEE systems.
In this paper, we conduct a systematic study on the existing IEE
data protection models and the ARM cache attributes, and discover
three new cache-based attacks called CITM that can be leveraged
to manipulate the sensitive data protected in the IEEs (hereinafter
referred to as IEE data). First, the attackers may manipulate the
IEE data through cross-core cache operation during concurrent
execution. On multi-core platforms, it is not secure to only ensure
core-wise isolation on the IEE memory to defend against the con-
currently running untrusted rich OS [14], since the cache may be
still open for the cross-core access and thus manipulated by attack-
ers. Second, when a security-sensitive application is suspended or
finished (i.e., during the "switch out" process), the IEE system must
conduct several security measures to protect the IEE data from later
being accessed by the rich OS [56]. However, the attackers may
bypass these security measures by manipulating the non-secure
cache mapping to the IEE memory used for the security measures.
Third, when the IEE memory protection is achieved by dynamically
controlling the security attribute of the memory (e.g., configuring
it as non-secure before "switch in" and as secure before "switch
out" [55]), due to incomplete security protection on cache, attackers
may steal sensitive IEE data during the "switch out" process and
tamper with IEE data during the "switch in" process.
We conduct case studies of CITM attacks against three IEE sys-
tems including SANCTUARY [14], Ginseng [56], and TrustICE [55].
The experimental results show that attackers may successfully steal
and modify IEE data of SANCTUARY system via cross-core L1
cache manipulation during concurrent execution, steal IEE data
of Ginseng system through bypassing the security measures en-
forced during the "switch out" process, and steal and tamper with
the IEE data of TrustICE system by manipulating the non-secure
cache of IEE memory which is not well protected during the IEE’s
context switching processes, respectively. Our case studies show
the wide existence of CITM attacks in IEE systems and point out
the importance of securely protecting the cache in addition to the
main memory for ensuring the security of IEE data.
Finally, we propose a countermeasure to resolve the attacks,
whose root causes are the incoherence of security-related attributes
between cache and memory and desynchronized read and write op-
erations between cache and memory. The main idea of our solution
is to securely configure the cache attributes for the IEE memory
and/or clean the cache mapping to the IEE memory during context
switching. We develop a prototype of the defense system on the
i.MX6Quad Sabre development board and the experimental results
show that our countermeasure has a small system overhead on the
rich OS and security-sensitive applications.
In summary, we make the following contributions.
• We conduct a systematic study of cache attributes and their
security implications on IEE systems, and discover new cache-
based attacks called CITM.
• We perform case studies of CITM attacks against three recently
proposed IEE systems. Our attack prototypes show that the CITM
attacks may be misused to steal and tamper with the sensitive
data in IEE systems. We point out that it is critical to consider
memory and cache together when designing an isolated execution
environment.
• We present a countermeasure to mitigate the CITM attacks after
identifying the root causes. The prototype shows it can effec-
tively remove CITM attacks from IEE systems with small system
overhead.
2 BACKGROUND
We first introduce the ARM TrustZone hardware security extension
and then discuss the cache architecture on the ARM processors.
We also provide a brief description on three IEE systems including
SANCTUARY [14], Ginseng [56], and TrustICE [55].
2.1 ARM TrustZone
TrustZone is a security extension since ARMv6 architecture to
provide a hardware-based isolation environment for secure code
Session 3E: Fuzzing/Trusted Execution Environments CCS '20, November 9–13, 2020, Virtual Event, USA1002with the same index compose one cache set. To map the memory
into cache, the memory is divided into blocks, and each block has
the same size as a cache line. The memory’s block 𝑖 can be loaded
into any cache line belonging to the cache set 𝑖 𝑚𝑜𝑑 𝑘. The cache
lines are mostly Physically Indexed, Physically Tagged (PIPT), i.e.,
they are indexed through the physical address of the corresponding
memory.
The cache hierarchy is divided into two domains, i.e., inner
cacheability domain and outer cacheability domain. The inner
cacheability domain means the cache equipped inside a specific CPU
core (e.g., the L1 cache which is usually exclusively owned by one
core), and the outer cacheability domain means the cache equipped
outside the CPU cores (e.g., the L2 cache which is usually shared
among the cores). Each cacheability domain can be configured us-
ing four attributes, i.e., non-cacheable, write-back, write-through,
and write-allocate, which define the caching behavior of the mem-
ory accessing operations. And the attributes are configured at the
granularity of memory page. When a memory page is configured as
non-cacheable for a cacheability domain, any reading and writing
operation on the memory page will not go through that cacheability
domain. Correspondingly, the memory page is cacheable for the
cacheability domain when it is configured as write-through or write-
back. The write-through attribute additionally means to forward any
writing on the current level cache immediately to the next level stor-
age. For example, writing on the L1 cache will be forwarded to L2
cache, and L2 cache will be forwarded to main memory. In contrast,
the write-back attribute means the changes are only buffered in the
current level cache, and the next level storage can only be updated
when the cache eviction happens. When a cache miss happens for
a write transaction, if the cacheability domain is set with the write-
allocate attribute, a new cache line will be allocated to save the write
result. Otherwise, the cache-missed write will make modifications
to the next level storage. In the following, when both the inner
cacheability domain and the outer cacheability domain are set with
the same attributes, we omit the cacheability domain attribute for
brevity. For example, we use write-back, write-allocate to represent
inner write-back write-allocate, outer write-back write-allocate.
Besides the settings of caching attributes, ARM cache’s status
are also affected by other maintenance operations, such as invali-
dation and cleaning instructions. When the invalidation instruction
is executed, it directly invalids the data saved in the cache. And the
cleaning instruction forwards the contents of the target cache to
the next level cache or main memory. For ARM processors with
TrustZone support, caches in all levels are extended with an addi-
tional tag bit (i.e., the NS-bit in Figure 2) to record their security
state. When accessing memory from normal world, the correspond-
ing cache lines will be set as non-secure; when accessing memory
from secure world, the corresponding cache lines will be set as
secure. In addition, the cache line’s NS-bit is set automatically by
the hardware and cannot be modified by the software.
2.3 IEE Systems
The IEE system aims to construct an isolated execution environment
(i.e., IEE) in the normal world through a trusted IEE monitor in the
secure world, as illustrated in Figure 1. The security-sensitive appli-
cation running inside the IEE could be a code snippet, a function,
Figure 2: Architecture of ARM TrustZone
execution. The security is achieved by partitioning the resources
including processors, memory, and peripherals into one of two
worlds, i.e., the secure world and the normal world. As illustrated
in Figure 2, normal user applications run on a rich OS in the normal
world, and the secure world is preserved for running a small number
of trusted applications and a trusted OS.
TrustZone enables the separation of the physical DRAM (main
memory) into two partitions, namely, secure memory and non-secure
memory. The non-secure memory is accessible to both normal world
and secure world, while the secure memory can only be accessed
by the secure world. The memory separation is achieved through
a hardware peripheral called TrustZone Address Space Controller
(TZASC), which can split the entire memory address space into sev-
eral memory regions. TZASC allows each region to specify its own
security attribute as either secure or non-secure. The latest TZASC
model TZC-400 [6] introduces a new security-control feature called
Identity-based Filtering to separate the non-secure memory regions.
In the ARM system, each device (e.g., CPU, GPU, DMA controller
etc.) acts as a bus master and is assigned with a unique Non-Secure
Access IDentifier (NSAID). TZC-400 can configure one non-secure
memory region as only accessible to specific devices based on their
NSAIDs, and block other devices’ accesses to this region.
2.2 ARM Cache Architecture
Cache is a component on the processors used for buffering the
memory’s data. Most modern ARM processors [7] are equipped
with two levels of caches, i.e., level-one (L1) cache and level-two (L2)
cache. The L1 cache is further categorized into instruction cache (I-
cache) and data cache (D-cache). The L2 cache is unified and holds