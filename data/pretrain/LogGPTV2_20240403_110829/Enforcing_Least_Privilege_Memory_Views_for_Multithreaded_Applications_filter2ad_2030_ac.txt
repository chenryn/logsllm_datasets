Table 3: Summary of component sizes.
LOC† Source ﬁles Protection level
SMV API
781
SMV LKM 443
SMV MM‡
1, 717
† Lines of code computed by cloc.
‡ SMV MM stands for SMV memory management, which is
integrated into the OS memory management subsystem
as we show in Figure 1.
kernel
kernel
user space
6
2
24
potential information leakage from this added attack sur-
face. Our kernel inherits the original kernel’s garbage col-
lection system using reference counting to ensure that the
additional metadata does not create any dangling pointers.
4.3 Partially Shared Memory Space
In the SMV model, SMVthreads can be perceived as un-
trusted tasks by default. Therefore, our kernel has to par-
tially separate the kernel objects; it also maintains the con-
sistent process address space for the SMV model. Overall,
our kernel: (1) separates the memory space of SMVs by us-
ing a page global directory (pgd_t) for each SMV; (2) frees
memory for all SMVs when one SMVthread frees the process
memory; (3) loads thread-private pgd_t into the CR3 register
during a context switch.
All SMVthreads in a process share the same mm_struct that
describes the process address space. Our kernel allocates
one pgd_t for each SMV in a process and stores all pgd_ts
in a process’s mm_struct. SMVthreads use their private page
tables to locate memory pages, yet their permissions to the
same page might diﬀer. Note that we designed SMVs to
protect thread stacks as well. To ensure the integrity of the
process memory space, the page tables of all SMVs need
to be updated when the kernel frees the process page ta-
bles or when kswapd reclaims page frames. The original ker-
nel avoids reloading page tables during a context switch if
two tasks belong to the same process (thus using the same
mm_struct). We modiﬁed our kernel to reload page tables
and ﬂush all TLB entries if one of the switching threads
is an SMVthread. Note that processors equipped with tagged
TLBs could mitigate the ﬂushing overhead. However, SMVs
do not rely on this hardware optimization feature in order
to function correctly (NH).
Based on our extensive experiments, we found that using
diﬀerent mm_structs to separate the address space for threads
is overkill and could signiﬁcantly impact the performance
for practical applications (LO). This is because all the mem-
ory operations related to mm_struct need to be synchronized
in an aggressive manner in order to maintain the consis-
tent process address space for all threads (e.g., rotating the
vm_area_struct red-black tree). Using the clone syscall with-
out CLONE_VM ﬂag to isolate a thread’s address space from its
parent is another approach. However, this approach has two
main drawbacks. First, the kernel creates a new mm_struct
for the new thread if CLONE_VM is not set. This leads to fre-
quent synchronization and imposes overhead. Second, de-
bugging (e.g., GDB [15]) and tracing memory activity (e.g.,
Valgrind [43]) become extremely diﬃcult: GDB has to be
constantly detached from one process and then attached to
another in order to debug a parallel program; Valgrind does
not support programs with clone calls. In contrast, using
the same mm_struct preserves the system-wide process ad-
dress space assumption and allows the kernel to separate
process address space for threads eﬃciently.
Security guarantee. The security features of the par-
tially shared memory space rely on the protection guaran-
teed by the original kernel. The memory management sub-
system in the kernel space is completely unknown to user
space programs. The attacker has to exploit the permission
bits of the page table entries (PTEs) for a thread to break
the security features provided by our kernel. We argue that
this kind of exploit is highly unlikely without serious DRAM
bugs such as rowhammer [22].
bles, which only serve as quick reference with no permission
implications when SMVthreads locate a memory page.
Security guarantee. The page fault handler cannot be
accessed, changed, or abused by the attacker as it resides in
the lowest level of the software stack. The PTE bits force
invalid memory accesses to be trapped to the kernel for the
additional privilege checks. To access a privileged memory
region, the attacker must ﬁrst get around the page fault
handler. However, such a scenario is infeasible because the
kernel memory management subsystem must intervene and
prepare the data page before the attacker can access the
privileged memory region.
5. EVALUATION
The goal of our evaluation is to demonstrate that the SMV
model has all four desired requirements when enforcing least
privilege memory views for multithreaded applications in
practice. We show that the SMV model supports diﬀerent
types of multithreaded programs with ﬂexible policies (GF),
requires minimal code changes for legacy software (EU), re-
quires no hardware modiﬁcations (NH), and incurs negligible
runtime overheads while supporting complex thread interac-
tions and extremely intensive memory allocation/free calls
in parallel (LO).
5.1 Experiment Setup
Environment. We measured the performance of our
SMV model on a system with Intel i7-4790 CPU with 4
cores clocked at 2.8GHz and 16GB of RAM for our modiﬁed
x86 64-bit Linux kernel 4.4.5 Ubuntu 14.04.2 SMP (NH).
The benchmarks are compiled into two versions: pthread
and SMVthread.
Example policy.
SMVthreads cannot access privileged
memory domains without being explicitly granted the proper
privilege. To test this security guarantee in all of our exper-
iments, the number of domains was set to N + 1, where N
is the number of worker threads and the additional domain
serves as a global pool for threads to securely share data.
Each worker has its own private memory domain that can
only be accessed by itself. We do not claim that the pro-
posed policy is optimal but instead focus on the mechanics
to enforce the policy. Setting up alternative policies is pos-
sible (GF).
5.2 Robustness Test
To examine the robustness, we tested our modiﬁed Linux
kernel with the Linux Test Project (LTP) [25] developed and
maintained by IBM, Cisco, Fujitsu, SUSE Red Hat, Oracle
and others. Speciﬁcally, we used the runltp script in the LTP
package to test the memory management, ﬁlesystem, disk
I/O, scheduler, and IPC. All stress tests completed without
error. We did not observe any system crashes.
5.3
Inspecting Isolation
The SMV model treats invalid memory accesses as seg-
mentation faults. Suppose an attacker’s thread triggers a
segmentation fault by accessing an invalid memory domain
on purpose. The main process will crash to prevent fur-
ther information leakage. Our SMV library provides de-
tailed memory logs to the programmer. Listing 1 shows
an example of the memory activity log. For crashes due
to wrong isolation setup, the logs can help the programmer
immediately identify the SMVthread that accessed the invalid
Figure 5: Page fault handler ﬂow chart. The SMV
kernel performs additional privilege checks (marked
in the gray box).
4.4 Forking SMVthreads
The SMV API uses pthread_create to create a regular
pthread and signals the kernel to convert the pthread to an
SMVthread before the SMVthread starts execution. The kernel
instructs the SMVthread to use the private page tables deﬁned
by the SMV that the SMVthread runs in. Once an SMVthread
is created, the kernel turns on the using_smv ﬂag stored in
the process’s mm_struct so that future memory operations
must go through additional privilege checks.
To simplify porting eﬀorts, the SMV API provides an op-
tion to override all pthread_create calls and automatically
allocate private memory domains for each SMVthread.
Security guarantee. The mm_struct of a thread is allo-
cated in kernel space and used solely by the kernel. There
are no interfaces that allow user space programs to directly
or indirectly modify the memory descriptor. This strong iso-
lation between user and kernel space is guaranteed by the
trusted OS kernel. In addition, the atomic fork procedure
ensures that the attacker cannot intercept the fork procedure
and steal the memory descriptor for the malicious thread.
4.5 Page Fault Handler
Figure 5 shows the ﬂow chart of the page fault handler
in our kernel. The additional checks are surrounded by the
gray box with a dotted line. Our kernel kills the SMVthread
that triggers an SMV invalid (cf. Section 3.2) page fault
by sending a segmentation fault signal. For the privileged
SMVthreads, our kernel performs SMV demand paging to ef-
ﬁciently handle the page faults.
Indeed, since the SMVs use private page tables to sepa-
rate SMVs’ memory views, using the original demand pag-
ing routine for SMVthreads is insuﬃcient as the page fault
handler only updates the page tables for the current SMV,
which causes inconsistent process address space. To solve
this problem, our kernel tracks all the faulted pages of a
process in the SMV shadow page tables. The page fault han-
dler deals with faults by using the SMV shadow page tables
and then copies the page table entry of the fault from the
shadow page tables to the running SMVthread’s page tables.
Note that one process has only one set of shadow page ta-
Read Address of Page FaultFind Virtual Memory AreaOriginal LinuxPage Fault Handling ProcedureBad AreaValid Area?Expand Nearby Area Successfully?SMV Has the Valid Privilege to Access the Memory Domain?Fault Address in a Valid Memory Domain?SMV Demand PagingSend SIGSEGVCurrent Thread is an  SMVthread?YesNoNoYesYesNoYesYesYesNoNoNoKernel Mode?Original Linux Exception Handling ProcedureNoYesValid Access Permission?Listing 1: Kernel log obtained by dmesg command.
1 [ smv ] Created memdom 2 , start addr : 0 x00f0f000 , end addr : 0 x 0 0 f 1 0 0 0 0
2 [ smv ] S M V t h r e a d pid 11157 attempt to access addr 0 x 0 0 f 0 f 0 e 0 in memdom 2
3 [ smv ] Addr 0 x 0 0 f 0 f 0 e 0 is p r o t e c t e d by memdom 2
4 [ smv ] Read p e r m i s s i o n granted to S M V t h r e a d pid 11157 in SMV 2
5 [ smv ] S M V t h r e a d pid 11155 attempt to access addr 0 x 0 0 f 0 f 2 6 0 in memdom 2
6 [ smv ] SMV 1 is not in memdom 2
7 [ smv ] D e t e c t e d INVALID memory r e f e r e n c e to : 0 x 0 0 f 0 f 2 6 0
8 [ smv ] INVALID memory request issued by S M V t h r e a d pid 11155 in SMV 1
9 [ smv ]  c h o r e k e e [ 1 1 1 5 5 ] : s e g f a u l t at f0f260 ip 00007 f 0 9 b a 7 d 6 6 5 6 error 4
protection domain and subsequently rectify the object com-
partmentalization. In addition, our library provides detailed
stack traces for debugging. The logs and stack traces are un-
readable by the attacker when debugging mode is disabled.
A binary compiled without debugging option makes it im-
possible for an attacker to learn about memory activity.
5.4 Security Evaluation
To further understand how the SMV model oﬀers strong
intra-process isolation, we systematically discuss the secu-
rity guarantees described in Section 4.
Trusted computing base. The TCB of the SMV model
contains the SMV LKM and SMV MM with kernel level pro-
tection (cf. Table 3). The SMV API is untrusted and resides
in user space as system library. The attacker may try to per-
form an SMV API call with a malicious intent to escalate
permissions for an SMVthread. The SMV LKM sanitizes all
user space messages sent into the kernel and veriﬁes that
the SMVthread executing the API call has the correct permis-
sions for the requested change. The attacker may attempt
to leverage the misuse of the SMV API to invalidate the
memory isolation guarantee provided by the SMV model.
Therefore, the security of the application relies on the cor-
rectness of the memory isolation setup. Once the memory
boundaries are deﬁned, all SMVthreads must follow the mem-
ory access rules deﬁned by the programmer. Note that un-
privileged users without root permission cannot compromise
the SMV LKM (cf. Section 4.1 security guarantee).
The SMV model also relies on the privilege level enforce-
ment imposed by the original Linux kernel to make sure that
the attacker cannot tamper with the SMV model operating
in the kernel space. To bypass the kernel protection, the
attacker must hijack the page tables of a privileged thread
or modify the metadata stored in the kernel space. The
original Linux kernel ensures the integrity of the metadata
and memory descriptors for all threads in the system. Us-
ing wrong page tables or metadata will cause a thread to be
killed once the kernel detects the tainted kernel data struc-
tures. Thus, it is impossible for the attacker to exploit the
metadata of any thread without kernel 0-day vulnerabilities
(cf. Section 4.2 security guarantee).
In addition to the software TCB, the SMV model also re-
lies on the hardware’s correctness. The hardware vendors
perform signiﬁcant correctness validation. We believe that
the security features oﬀered by sound hardware are unlikely
for the attacker to subvert (cf. Section 4.3 security guar-
antee). Given the extremely small source code base (less
than 2000 LOC), we believe that the SMV’s TCB could be
formally veriﬁed.
TOCTTOU attack: stealing page tables. The at-
tacker may attempt to steal the page tables of a privileged
thread by hijacking its memory descriptor. We consider an
oracle attacker who knows precisely when and how to launch
a time of check to time of use (TOCTTOU) attack to steal
the page tables of a privileged thread.
If the attack suc-
ceeds, the attacker’s malicious thread will use the hijacked
page tables and read sensitive data in the privileged mem-
ory domain before the thread crashes. Assume the attacker
can fork threads up to the system limit with the objective to
hijack the page tables of an about-to-run privileged thread
in the fork procedure, which is the only point for the at-
tacker to exploit the pgd_t pointer. However, the malicious
thread has to wait until the privileged SMVthread ﬁnishes the
page tables setup in order to request the kernel to prepare
its unprivileged page tables. Therefore, the attacker cannot
intercept the fork procedure and steal the page tables. We
conducted an experiment where 1,023 malicious SMVthreads
tried to hijack the page tables of a privilege SMVthread. Dur-
ing the one million runs of the security test, every SMVthread
used the correct page tables for its memory view (cf. Sec-
tion 4.4 security guarantee).
Eﬀectiveness of the SMV model. Listing 1 shows the
kernel log when an invalid memory access is detected by the
SMV model.
In this example, the unprivileged SMVthread
pid 11155 in SMV 1 tries to access memory in the priv-
ilege memory domain that stores the server’s private key,
which is only accessible by SMVthread pid 11157 in SMV 2.
At line 5, the attempt to read the invalid memory domain
triggers the page fault. The kernel rejects the invalid mem-
ory request by sending a segmentation fault signal to the
unprivileged SMVthread pid 11155 at line 9, stopping the un-
privileged SMVthread from accessing the server’s private key.
The privilege checks cannot be bypassed because the refer-
ence monitor is implemented entirely in the page fault han-
dler, and arbitrary page table manipulation is beyond the
attacker’s scope (cf. Section 4.5 security guarantee).
5.5 PARSEC 3.0 Benchmarks
Overview. The multithreaded PARSEC benchmarks in-
clude several emerging workloads with non-trivial thread in-
teraction. Both data-parallel and pipeline parallelization
models are covered in the benchmarks with coarse to ﬁne
granularity. We used all benchmarks in [7], covering all ap-
plication domains that were originally multithreaded using
the standard pthreads. The evaluated benchmarks all em-
ploy the producer-consumer pattern (cf. Section 3.6.1) that
is pervasive in systems programs and parallelization mod-
els. We used the parsecmgnt tool in the PARSEC package
to run the benchmarks with minimum number of threads set
to four for the large inputs as deﬁned by the benchmarks.
Assessment of porting eﬀort. We ported the PARSEC
benchmarks by replacing each pthread with an SMVthread
running in its own SMV with a private memory domain. In
each program, the main program allocates a shared memory
domain to store the working set for SMVthreads. The port-
ing procedure consisted of three parts: (1) including the
header ﬁles to use the SMV API, (2) setting up memory
domains and SMVs in the main program, and (3) replac-