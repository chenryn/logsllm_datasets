MakeXDocRequest make it impossible for the programmer
to forge this provenance label; if the constructed label does
not accurately reﬂect the URL passed to MakeXDocRequest,
a type error will indicate a policy violation.
GlueMiner: GlueMiner is different from TwitterMiner in
that it does not add anything to the store; rather, it provides
a privacy-preserving conduit between third-party web sites
that want to provide personalized content, the user’s personal
store information, and another third party (getglue.com)
that uses personal information to provide personalized content
recommendations. The function predictResultsByTopic is
the core of its functionality, effectively multiplexing the user’s
personal store to getglue.com: a third-party site can use this
function to query getglue.com using data in the personal
store. This communication is made explicit to the user in the
policy expressed by the extension. Given the broad range of
topics on which getglue.com is knowledgeable, it makes
sense to open this functionality to pages from many domains.
This creates novel policy issues:
the user may not want
139
u s i n g R e P r i v ;
n a m e s p a c e T w i t t e r M i n e r
{
s t a t i c c l a s s P r o g r a m
{
s t a t i c s t r i n g u s e r I d ;
s t a t i c List  g u i d s ;
s t a t i c R e P r i v . E x t e n s i o n P r i n c i p a l p ;
m o d u l e T w i t t e r M i n e r
open Url
open R e P r i v P o l i c y
open R e P r i v A P I
// P o l i c y a s s u m p t i o n s
a s s u m e extid : E x t e n s i o n I d " t w i t t e r m i n e r "
assume PAx1 : C a n C o m m u n i c a t e X H R " t w i t t e r . com "
a s s u m e P A x 2 : f o r a l l ( s : s t r i n g ) . ( E x t e n s i o n I d s ) = >
static void C o l l e c t L a t e s t F e e d ( o b j e c t source ,
C a n U p d a t e S t o r e ( P " t w i t t e r . com " s )
E l a p s e d E v e n t A r g s e )
// G e t t h e u s e r ’ s t w i t t e r R S S f e e d
TrackedValue  t w i t F e e d =
R e P r i v . M a k e X D o c R e q u e s t ( " t w i t t e r . com " ,
" h t t p :// t w i t t e r . com / . . . / " + u s e r I d + " . rss " , p );
// E x t r a c t t h e l a t e s t t w e e t f r o m t h e f e e d
TrackedValue  cur = t w i t F e e d . Bind (
x = > ( from d in x . D e s c e n d a n t s ( " item " )
w h e r e ! gu i d s . C o n t a i n s ( d . E l e m e n t ( " g u i d " ))
s e l e c t ( s t r i n g ) d . E l e m e n t ( " d e s c r i p t i o n " )
). Take (1). S i n g l e ());
// F i n d t h e c a t e g o r i e s t h a t a p p l y
T r a c k e d V a l u e  > cat =
cur . Bind ( c o m p u t e Q u e r y C a t e g o r i e s );
// M i n e r c o d e
val G e t D e s c r i p t i o n : xdoc -> s t r i n g
let G e t D e s c r i p t i o n d =
let a l l M s g s =
R e a d X D o c E l s d " item " ( fun x -> true ) " d e s c r i p t i o n " in
match allMsgs with
| Cons h t -> h
| Nil -> " "
val C o l l e c t L a t e s t F e e d : ({ s : s t r i n g | E x t e n s i o n I d s }) ->
let C o l l e c t L a t e s t F e e d extid mcap u =
m u t _ c a p a b i l i t y ->
unit ->
unit
// U p d a t e t h e p e r s o n a l s t o r e
R e P r i v . A d d E n t r y ( cur , " c o n t e n t s : tw e e t " , cat );
let t w i t t e r P r o v = s i m p l e _ p r o v " t w i t t e r . com " extid in
let r e q U r l =
{
}
static void Main ()
{
guids = new List ();
Timer f e e d T i m e r = new Timer ();
f e e d T i m e r . E l a p s e d +=
new E l a p s e d E v e n t H a n d l e r ( C o l l e c t L a t e s t F e e d );
f e e d T i m e r . I n t e r v a l = 6 0 0 0 0 0 ;
f e e d T i m e r . Start ();
}
}
}
mkUrl " http " " twitter . com " " s t a t u s e s ... " in
let t w i t F e e d =
M a k e X D o c R e q u e s t r e q U r l extid t w i t t e r P r o v mcap in
let c u r r e n t M s g =
bind t w i t t e r P r o v t w i t F e e d G e t D e s c r i p t i o n in
let c a t e g o r i e s =
bind t w i t t e r P r o v c u r r e n t M s g C l a s s i f y T e x t in
A d d E n t r y t w i t t e r P r o v c u r r e n t M s g " tweet " c a t e g o r i e s mcap
val main : m u t _ c a p a b i l i t y -> unit
let main mcap =
let c o l l e c t =
( C o l l e c t L a t e s t F e e d " t w i t t e r m i n e r " mcap ) in
S e t T i m e o u t 6 0 0 0 0 0 c o l l e c t
Fig. 8: Twitter miner in C# and Fine, abbreviated for presentation.
information in the personal store collected from netflix.com
to be queried on behalf of linkedin.com, but may still
agree to allowing linkedin.com to use information from
twitter.com or facebook.com. Likewise, the user may want
sites such as amazon.com and fandango.com to use the
extension to ask getglue.com for recommendations based
on the data collected from netflix.com.
This usage scenario suggests a fairly complex policy for the
proposed extension.
the
return
value
through
linkedin.com
• The extension must only communicate personal store
information from twitter.com and facebook.com
to
of
predictResultsByTopic. Additionally, the information
that is ultimately returned will be tagged with labels
from getglue.com, as it was communicated to this host
to obtain recommendations. Thus, GlueMiner must be
able to communicate these sources to getglue.com,
and it must be able to send information tagged from
getglue.com to linkedin.com through the return
value of predictResultsByTopic.
• Similarly, the extension must only leak information from
netflix.com to getglue.com on behalf of amazon.
com or fandango.com. This creates policy requirements
analogous to those of the previous case.
The policy requirements of GlueMiner are made possible by
140
REPRIV’s support for multi-label provenance tracking. Note
also the assumption that Getglue.com is not a malicious
party, and does not otherwise pose a threat to the privacy con-
cerns of the user. This judgement is ultimately left to the user,
as REPRIV makes explicit the requirement to communicate
with this party, and guarantees that the leak cannot occur to
any other party.
V. EXPERIMENTAL EVALUATION
The experimental section is organized as follows. First, we
characterize the default mining and extension overhead of
REPRIV on browsing activities, Then, we discuss the quality of
our document classiﬁer, that is used for all default in-browser
behavior mining.
A. Performance Overhead
We evaluated the effect of REPRIV on the performance
of web browsing activities. Several aspects of REPRIV can
affect the performance of browsing. This section is organized
to provide a separate discussion of each such aspect: the
effect of default in-browser behavior mining, the effect that
each proposed personalization extension (Section IV) has on
document loading latency, and the performance of primary
extension functionality.
0
1
-
p
o
T
l
a
n
i
F
n
I
%
100
90
80
70
60
50
40
30
20
10
0
0
10
20
30
50
60
40
% History Complete 
70
80
90
Fig. 9: Convergence curves.
In-Browser Behavior Mining: One of the major components
of REPRIV is the behavior mining that happens by default
inside the browser, as the user navigates sites. To characterize
the cost of performing this type of mining and the impact
that it has on browser performance, we took measurements
from our prototype. We found that nearly all documents are
classiﬁed in around one-tenth of a second; given this result, it
is clear that REPRIV will not adversely affect the performance
of the browser.
Personalization Extensions: One concern with REPRIV’s
support for miners is the possibly arbitrary amount of memory
overhead that it can introduce. We sought to characterize the
memory requirements of REPRIV miners, by loading many
compiled copies of the four miners presented in the previous
section into a running instance of C3. We found that even in an
extreme case, with one-hundred miners loaded into memory,
only 20.3 megabytes of memory are needed.
B. Classiﬁer Effectiveness
We sought to characterize the quality of the default in-
browser classiﬁer. However, doing so is not straightforward,
as the task of document classiﬁcation is inherently subjective.
Our evaluation focuses on the rate at which a user’s interest
proﬁle converge
Proﬁle convergence: The rate at which a user’s interest proﬁle
converges is an important property of our implementation, as
it indicates the reliability of the personalization information
provided by REPRIV. To measure the convergence of a proﬁle,
we require a notion of its ﬁnal form. All of our measurements
are taken over anonymized browsing history traces collected
from IE 8 users who have opted into data collection, so the
ﬁnal proﬁle that we use in these measurements is simply the
proﬁle computed by our classiﬁer after processing an entire
trace. All convergence measurements for a given trace are
taken relative to the ﬁnal proﬁle for that trace, computed in
this manner.
The measure of convergence we use is the percentage of
entries in the current top-ten list of interest categories that are
also present in the ﬁnal top-ten list. We foresee many web sites
querying REPRIV for top interests using the protocol outlined
in Section III, so this measure characterizes the stability of the
information returned in these queries.
141
The results of these experiments are presented in Figure 9,
and correspond to the anonymized browsing histories of 28
IE 8 users. They key point to notice about this curve is the state
of the computed interest proﬁle after 20% completion: 50% of
the ﬁnal top-ten categories are already present, and the global
convergence curve has reached a point of gradual decline. This
implies that the results returned by the core mining algorithm
will not change dramatically from this point: one-ﬁfth of the
way through the trace, the REPRIV’s estimate of the users’
interests has converged.
In-browser vs. public data mining: We claim that a major in-
centive for web service providers to utilize the personalization
features enabled by REPRIV is the high quality of personal
information that is available within the browser, relative to
other types of information used for this purpose. One may
think that similar information can be derived by examining the
publicly-accessible corpus of information available about an
individual on the web, e.g. social networking proﬁles, tweets,
etc. In fact, this approach is being used by a number of
websites to facilitate personalization [32]. In this subsection,
we compare REPRIV’s mining algorithm when used over
single-user browsing history data to the results obtained by
these techniques.
We see a fundamental problem with this approach, in that
most names have several homonyms, and the precision and
accuracy of a behavior proﬁle will be adversely affected by this
condition. To demonstrate this fact, we began by measuring
the number of distinct homonyms for 48 names selected at
random from a phone book. To take this measurement, we used
a search engine called “WebMii” [35] which returns a listing of
much of the publicly-available information about a particular
name on the web, in addition to a list of homonyms for that
name. Our results are presented in detail in the technical
report [9]. Noteworthy among our ﬁndings is the fact that
only ten of the names were found to be unique on WebMii;
the remaining names either had no visible web presence, or
from dozens to hundreds of homonyms. Clearly, these names
would be very difﬁcult to build an accurate proﬁle for content
personalization without additional input.
Another issue with this technique is the degree of noise
likely present in the source data. Our technical report [9]
presents detailed ﬁndings of this metric. Intuitively, we mea-
sured the conﬁdence that our classiﬁer places in a hypothesis
about the user’s interests, given the training data (browser
histories versus publicly-attainable information). Our results
show that in all but very few cases, the behavior mining
algorithm was able to come to a much stronger conclusion
given browsing histories. This supports our claims about the
availability of high-quality behavior information within the
browser, as opposed to other sources.
In future work, we would like to evaluate the interest mining
capabilities of large third-party tracking networks such as
DoubleClick and Facebook in comparison to the ability to do
so inside the browser. Intuitively, the results inside the browser
must be at least as good as those attainable by such networks,
s
e
h
c
r
a
e
S
#
350
300
250
200
150
100
50
0
307 
89 
52 
22 
23 
13 
9 
14 
5 
10 
1-5
6-10
11-15
16-20
21-25
26-30
31-35
36-40
41-45
46-50
Change in Result Location 
Fig. 10: Search personalization effectiveness.
as the browser has access to at least as much of the user’s