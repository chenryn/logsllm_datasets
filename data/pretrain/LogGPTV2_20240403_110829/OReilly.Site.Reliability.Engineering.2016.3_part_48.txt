While each question on the Launch Coordination Engineering (LCE) Checklist is straightforward, the complexity lies in the reasoning behind the questions and the implications of their answers. To fully grasp this level of complexity, a new LCE hire typically requires about six months of training.

As the volume of launches increased, keeping pace with the annual doubling of Google’s engineering team, LCEs sought ways to streamline their reviews. They identified categories of low-risk launches that were highly unlikely to face or cause mishaps. For example, a feature launch involving no new server executables and a traffic increase under 10% would be considered low risk. Such launches were subject to a simplified checklist, while higher-risk launches underwent a more comprehensive review process. By 2008, 30% of reviews were classified as low-risk.

Simultaneously, Google’s infrastructure was scaling up, reducing constraints on many launches. For instance, the acquisition of YouTube required Google to expand its network and utilize bandwidth more efficiently. This meant that many smaller products could be launched without complex network capacity planning and provisioning processes, thus accelerating their deployment. Additionally, Google began building large data centers capable of hosting multiple dependent services, simplifying the launch of new products that required significant capacity from existing services.

### Problems LCE Did Not Solve

Despite efforts to minimize bureaucracy, the challenges of launching small new services at Google became legendary by 2009. Services that grew to a larger scale faced their own set of problems that LCE could not address.

#### Scalability Changes
When products exceed early estimates and usage increases by more than two orders of magnitude, maintaining performance often necessitates significant design changes. These scalability changes, combined with ongoing feature additions, can make the product more complex, fragile, and difficult to operate. At some point, the original architecture becomes unmanageable, and a complete rearchitecture is required. Migrating users from the old to the new architecture demands substantial time and resources from developers and SREs, slowing down new feature development.

#### Growing Operational Load
After a service is launched, the operational load—the amount of manual and repetitive engineering needed to keep the system functioning—tends to grow over time unless controlled. The noisiness of automated notifications, the complexity of deployment procedures, and the overhead of manual maintenance work increase, consuming more of the service owner's time and leaving less for feature development. SRE has an internally advertised goal of keeping operational work below 50%; see Chapter 5. Achieving this requires constant tracking of operational work sources and directed efforts to reduce them.

#### Infrastructure Churn
If the underlying infrastructure (e.g., systems for cluster management, storage, monitoring, load balancing, and data transfer) is frequently updated, service owners must invest significant effort to keep up with these changes. As infrastructure features are deprecated and replaced, service owners must continually modify configurations and rebuild executables, leading to a situation where they are "running fast just to stay in the same place." The solution is to implement a churn reduction policy that prohibits infrastructure engineers from releasing backward-incompatible features until they also automate the migration of clients to the new features. Creating automated migration tools minimizes the work imposed on service owners.

Solving these problems requires company-wide efforts that go beyond the scope of LCE, including better platform APIs and frameworks, continuous build and test automation, and improved standardization and automation across Google’s production services.

### Conclusion

Companies experiencing rapid growth and frequent changes to products and services may benefit from a role similar to Launch Coordination Engineering. Such a team is especially valuable if a company plans to double its product developers every one or two years, needs to scale services to hundreds of millions of users, and prioritizes reliability despite high rates of change.

The LCE team was Google’s solution to achieving safety without impeding change. This chapter introduced some of the experiences accumulated by our unique LCE role over a 10-year period. We hope our approach will inspire others facing similar challenges in their organizations.