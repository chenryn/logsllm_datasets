EL3 Tour: Get The Ultimate Privilege 
of Android Phone
Guanxing Wen
2019
Bio
✤ Senior Security Researcher at Pangu 
✤ Exploitation and Reversing Engineering 
✤ Recently 
✤ Firmware, Bootloader, Kernel 
✤ Previously 
✤ Adobe Flash
Agenda
✤ ARMv8 Privilege mode 
✤ Post-startup architecture of Huawei P20 
✤ Hunt EL3 Vulnerabilities 
✤ Execute shellcode in EL3 
✤ Face ID Bypass
ARMv8 Privilege Mode
Linux Kernel
Hypervisor
Trusted Firmware (No limits: Physical Memory, TTBR0_ELx, VBAR_ELx, …)
Trusted Kernel
Application
Framework
Libraries
Services
Trusted App
EL0
EL1
EL2
EL3
Normal World
Secure World
Huawei P20
Huawei P20
✤ ARMv8 (Hisilicon Kirin 970)
Huawei P20
✤ ARMv8 (Hisilicon Kirin 970) 
✤ Android phone with great cameras
Huawei P20
✤ ARMv8 (Hisilicon Kirin 970) 
✤ Android phone with great cameras 
✤ Customized EL3 and S-EL0 & 1
Boot Chain
fastboot.img
Boot Chain
FASTBOOT
Boot Chain
FASTBOOT
trustﬁrmware.img
teeos.img
kernel.img
Boot Chain
Trusted Firmware
teeos.img
kernel.img
EL3
Boot Chain
Trusted Firmware
teeos.img
kernel.img
EL3
Boot Chain
Trusted Firmware
kernel.img
EL3
Trusted Core Kernel
S-EL1
globaltask
task_xxx
S-EL0
Boot Chain
Trusted Firmware
Linux Kernel
EL3
Trusted Core Kernel
S-EL1
globaltask
task_xxx
S-EL0
EL1
/sbin/teecd
APK
EL0
Interact with Secure World
Trusted Firmware
Linux Kernel
EL3
Trusted Core Kernel
S-EL1
globaltask
task_xxx
S-EL0
EL1
/sbin/teecd
APK
EL0
Normal World
Secure World
svc
Interact with Secure World
Trusted Firmware
Linux Kernel
EL3
Trusted Core Kernel
S-EL1
globaltask
task_xxx
S-EL0
EL1
/sbin/teecd
APK
EL0
Normal World
Secure World
smc
Interact with Secure World
Trusted Firmware
Linux Kernel
EL3
Trusted Core Kernel
S-EL1
globaltask
task_xxx
S-EL0
EL1
/sbin/teecd
APK
EL0
Normal World
Secure World
Interact with Secure World
Trusted Firmware
Linux Kernel
EL3
Trusted Core Kernel
S-EL1
globaltask
task_xxx
S-EL0
EL1
/sbin/teecd
APK
EL0
Normal World
Secure World
IPC
Interact with Secure World
Trusted Firmware
EL3
ARM Trusted Firmware
✤ https://github.com/ARM-software/arm-trusted-firmware 
✤ Switch between Secure and Normal World 
✤ Physical Memory Partition 
✤ Save & Load: TTBR1_EL1, SCTLR_EL1, TCR_EL1, … 
✤ Dispatch smc
Locate SMC Handler
✤ VBAR_EL3
ida-arm-system-highlight.py
✤ VBAR_EL3
Dispatched to Trusted Core
Trusted
Firmware
Trusted
Core
Secure
Tasks
eret
eret
ARM Trusted Firmware (ATF)
✤ Switch between Secure and Normal World 
✤ Physical Memory Partition 
✤ Switch between Secure and Normal World 
✤ Save & Load: TTBR1_EL1, SCTLR_EL1, TCR_EL1, … 
✤ Dispatch SMC 
✤ Trusted Core handles most of smc calls, where EL3 handles the rest
Hunt EL3 Vulnerabilities
Running Environment of EL3
SCTLR_EL3
Running Environment of EL3
✤ SCTLR_EL3.WXN = 1 
✤ No-ASLR 
✤ No-CFI
✤ SCTLR_EL3.M = 1 
✤ TTBR0_EL3 
✤ Flat Mapping
Memory Layout of EL3
Start
End
Usage
Permission
0x16800000
0x1CE00000
R | W
0x1CE00000
0x1FE00000
Trusted Core
R | W
0x1FE00000
0x1FE2A000
ATF CODE
R | E
0x1FE2A000
0x20000000
ATF DATA
R | W
0x209E1000
0x209F8000
???
R | W
0x5A000000
0xFFFDF000
MMIO
R | W
FASTBOOT
EL1 Kernel as a Start Point
✤ Root Exploit 
✤ Purchase an unlock code 
✤ Unlock the Bootloader 
✤ fastboot flash kernel kernel.img
✤ Looking for smc usages
EL1 Kernel as a Start Point
#define RPMB_SVC_REQUEST_ADDR 0xC600FF04 
#define HISI_SUB_RESERVED_BL31_SHARE_MEM_PHYMEM_BASE 0x209E1000 
static int hisi_rpmb_device_init(void) 
{ 
    ...skip... 
    bl31_smem_base = HISI_SUB_RESERVED_BL31_SHARE_MEM_PHYMEM_BASE; 
    rpmb_request_phy = bl31_smem_base + data[0]; 
    atfd_hisi_rpmb_smc(RPMB_SVC_REQUEST_ADDR, rpmb_request_phy,    
                       rpmb_support_device, 0); 
    ...skip... 
}
✤ Search for SMC usages
int atfd_hisi_rpmb_smc(u64 function_id, u64 arg0, u64 arg1, u64 arg2) 
{ 
   asm volatile( 
           __asmeq("%0", "x0") 
           __asmeq("%1", "x1") 
           __asmeq("%2", "x2") 
           __asmeq("%3", "x3") 
           "smc    #0\n" 
       : "+r" (function_id) 
       : "r" (arg0), "r" (arg1), "r" (arg2)); 
   return (int)function_id; 
} 
EL1 Kernel as a Start Point
✤ Looking for smc usages
#define RPMB_SVC_REQUEST_ADDR 0xC600FF04 
#define HISI_SUB_RESERVED_BL31_SHARE_MEM_PHYMEM_BASE 0x209E1000 
static int hisi_rpmb_device_init(void) 
{ 
    ...skip... 
    bl31_smem_base = HISI_SUB_RESERVED_BL31_SHARE_MEM_PHYMEM_BASE; 
    rpmb_request_phy = bl31_smem_base + data[0]; 
    atfd_hisi_rpmb_smc(RPMB_SVC_REQUEST_ADDR, rpmb_request_phy,    
                       rpmb_support_device, 0); 
    ...skip... 
}
EL1 Kernel as a Start Point
0xC600FF04 Handler
0xC600FF04 Handler
if (x0 == 0xC600FF04) 
{ 
    if ((rpmb_request_phy = x1) != 0x209E9000) 
    { 
        NOTICE(“sync kernel and bl31 for a same memory space failed\n”); 
        goto err; 
    } 
}
0xC600FF04 Handler
0xC600FF06 Handler
if ( x0 == 0xC600FF06 ) 
{     
  v31 = rpmb_request_phy + 0x6000; 
  if ( a2 ) 
  {   
    NOTICE("rpmb error: the result from kernel is error,%lx\n", a2); 
    v32 = *(v31 + 0xC38); 
    v33 = x1;                                                              
    if ( !v32) 
      return NOTICE("rpmb request callback function is NULL\n"); 
    return v32(v33);  
  }   
}
0xC600FF06 Handler
if ( x0 == 0xC600FF06 ) 
{     
  v31 = rpmb_request_phy + 0x6000; 
  if ( a2 ) 
  {   
    NOTICE("rpmb error: the result from kernel is error,%lx\n", a2); 
    v32 = *(v31 + 0xC38); 
    v33 = x1;                                                              
    if ( !v32) 
      return NOTICE("rpmb request callback function is NULL\n"); 
    return v32(v33);  
  }   
}
0xC600FF06 Handler
if ( x0 == 0xC600FF06 ) 
{     
  v31 = rpmb_request_phy + 0x6000; 
  if ( a2 ) 
  {   
    NOTICE("rpmb error: the result from kernel is error,%lx\n", a2); 
    v32 = *(v31 + 0xC38); 
    v33 = x1;                                                              
    if ( !v32) 
      return NOTICE("rpmb request callback function is NULL\n"); 
    return v32(v33); //Both PC and x0 are controlled !!! 
  }   
}