    Sinclair
    Target
        John Smith
```
本例中，主要信息之前有很多其他内容，用于设置文档使用的各种 XML 命名空间。其中就有文档生成工具的信息，这样用户就能明白出了问题要向谁进行反馈。`foaf:Person` 元素给出了我的名字、电子邮箱和主页。其中嵌套了 `foaf:knows` 元素，说明我有个叫 John Smith 的朋友。
该例还体现了 FOAF 文档的另外一个重要功能：相互关联。还记得之前 John Smith 的例子吗？他的主页在 `www.example.com`。在我的这个例子中，我将 John Smith 列在了 `foaf:person` 元素里，上一级元素是 `foaf:knows`，表示我认识的人。此外，我还加入了 `rdfs:seeAlso` 元素，放了 John Smith 主页的 FOAF 文档链接。由于加入了这一链接，程序在读取我的 FOAF 文档时，就能根据该链接读取他的 FOAF 文档，查找到更多关于 John Smith 的信息。在之前 John Smith 的 FOAF 文档里，John 并没有提供任何有关朋友的信息（包括我在内），这意味着程序无法确定我们两人之间的朋友关系。但如果他加入了朋友信息，程序在读取我的文档之后，不仅会发现我，也会发现 John、他的朋友、他的朋友的朋友，以此类推，直到程序穷尽我和 John 各自的社交图谱。
对于使用过 Facebook 的人来说这似乎很熟悉，也就是说，这个功能对你来说也应该很熟悉。FOAF 没有 `foaf:wall` 属性和 `foaf:poke` 属性，无法完美复制 Facebook 的功能。很明显，FOAF 也没有漂亮的蓝色界面，无法为用户提供可视化的 FOAF 社交网络，它只是一个词汇表。不过，Facebook 的核心功能（我认为这正是 Facebook 垄断能力的关键）在这里是以分布式的方式提供的。在 FOAF 标准下，好友可以将 FOAF 文档上传至个人主页，数字化展示他们真实的社交图谱，用户无需将个人数据的控制权交给 Facebook 这样一个中心化的数据库。要知道，由于对用户个人数据管理不当，扎克伯格大多数时间都在国会委员会前在向公众道歉。
### 暂时搁置的 FOAF
浏览 FOAF 项目主页，你会发现在页面的右上角，有一张喜剧动画《 飞出个未来   Futurama 》主角弗莱躺在休眠舱内的图片。这张图片是《飞出个未来》试播剧集的剧照，讲的是弗莱在 1999 年不小心跌进了低温休眠舱，直到 2999 年才再次苏醒过来的故事。我曾和 Brickley 在 Twitter 上简短地聊了一下，他告诉我，挂这张图片是为了告诉人们，未来 FOAF 项目目前“处于停滞状态”，尽管他希望将来有机会恢复这个项目，继续探索 21 世纪初关于网络运作方式的设想。
FOAF 从未像《卫报》期望的那般彻底改变社交网络。一些社交网站选择支持 FOAF 标准，比如 LiveJournal 和 MyOpera    [6] 。FOAF 甚至还在 2004 年 霍华德·迪恩   Howard Dean 竞选总统时发挥了一定作用：一群博主和程序员合力搭建起了一个将网站连接起来的网络，称其为“ 迪恩空间   DeanSpace ”，帮助迪恩竞选，并在网站上使用 FOAF 记录迪恩的支持者和帮助迪恩竞选的志愿者   [7] 。不过，今天人们了解到 FOAF 主要还是因为它是 RDF 应用最为广泛的词汇表之一，而 RDF 正是现代网络的一个重要标准。如果在今天还能用到 FOAF 的话，可能就是谷歌“ 知识面板   knowledge panels ”所用技术的原型。知识面板是在用谷歌搜索时，出现在搜索结果右侧的一小块内容，会提供搜索关键词的基本信息。谷歌为推行其知识面板，使用了语义网项目的“后继者” [schema.org](http://schema.org) 项目发布的词汇表   [8] 。[schema.org](http://schema.org) 用来描述人物的词汇表似乎有着 FOAF 的影子，两者的目的大多也是相同的。
那么，为什么 FOAF 还是失败了呢？为什么人们都在用 Facebook 呢？且不提 FOAF 只是一个简单的标准，没有 Facebook 那么丰富的功能，如果 FOAF 发展势头保持下去，很有可能就会出现相关软件和应用，带来像 Facebook 那样的体验。问题是，在 Facebook 还未发展到能与之分庭抗礼之时，FOAF 这股分布式社交网络的新生力量为什么没能得到广泛应用呢？
恐怕这个问题可能没有唯一的答案，不过非要我说的话，我觉得最关键的一点是，只有在每个人都有个人网站的情况下，FOAF 才有意义。在上世纪末本世纪初，人们理所当然地觉得网络最终会出现这种情况，因为就我所知，互联网的早期用户多是高产的博客写手、参政的技术专家，他们都希望能有个自己的平台。但是，现实情况却是，普通用户并不愿意学习怎么搭建和运营网站。FOAF 允许你掌控自己的社交信息并将其推送到各类社交网络上，省去了到处注册账号的麻烦。如果你已经有了储存社交信息的个人网站，那么这个想法应该很诱人。但实际上，相比较于买域名、折腾 XML 文档，大多数人觉得填写信息、注册 Facebook 账号来得更容易些。
那么，这与我最初的问题（Facebook 是否属于自然垄断）有什么相关呢？我不得不承认，FOAF 的案例说明，社交网络 *的确* 拥有自然垄断属性。
其实，关于用户不愿管理自己的数据这一问题，本身并没有那么重要，因为通过让普通用户在熟悉技术的用户所设置的节点上储存个人信息，[Mastodon](https://en.wikipedia.org/wiki/Mastodon_(software)) 等现代分布式社交网络已经解决了这个问题。这也表明，人们多么不愿意折腾复杂的东西。对去中心化社交网络来说，这无疑是个坏消息，因为相较于中心化网络，去中心化网络更为复杂，用户对此再清楚不过了。
对于 FOAF：如果我要写一个能读取个人网站上 FOAF 数据的程序，假设 Sally 的 FOAF 文档提到了 John Smith，说他的主页是 `example.com`；Sue 的 FOAF 文档也提到了 John Smith，说他的主页是 `example.net`。在这种情况下，我应该怎么办呢？到底是只有一个 John Smith 而他正好有两个主页呢，还是这两个 John Smith 是不同的人呢？如果两个 FOAF 文档中 John Smith 的邮箱都是 `PI:EMAIL`，又该怎么办呢？这种身份问题是 FOAF 的软肋。在一封 2003 年的邮件里，Brickley 写道，由于不存在而且可能也不应该存在一个“全球性的身份识别系统”，FOAF 采取的方法只能是“多元的”   [9] 。FOAF 用户的邮件地址和主页地址等部分属性具有特殊性，因为邮件地址和主页地址都是独一无二的。因此，这些内容不可能相同的属性可以将人们的多个 FOAF 文档合并起来（用 Libby Miller 的话来说，“挤”在一起）。不过这些特殊属性不存在所谓优先级的说法，所以前面 John Smith 的问题还是不好解决。换句话说，是该相信主页，判定他们不是同一个人呢？还是要相信邮件地址，判定他们是同一个人呢？我真的能够在不干扰到用户的前提下，写出一个程序，解决这类问题吗？
Facebook 拥有单一的数据库，不用顾虑政治性问题，有条件创建“全球性的身份识别系统”，给每个人发行独一无二的身份 ID，于是问题就迎刃而解了。
如果人们真的在乎对自己数据的持有权和掌控权，单是因为复杂难解应该不足以导致分布式社交网络的失败。但是 FOAF 的失败表明，人们从未重视过对自己数据的掌控权。正如一位博主所说，“所谓‘用户想要拥有自己的数据’只不过是一个想法，和实际应用没有关系”   [10] 。如果用户对控制的重视程度不足以承受额外的复杂性，如果中心化系统比去中心化系统更为简单易用，如果中心化系统有发展为封闭系统的趋向，借此取得成功，从而享受网络效应带来的巨大效益，那么社交网络确实属于自然垄断。
即便如此，我认为地铁系统的案例和社交网络的案例仍存在不同之处。我可以欣然接受 MTA 对地铁交通的垄断，因为我希望地铁系统本身就应该是长期垄断行业。如果纽约地铁只有一家运营商，那么它只能是政府，至少在名义上，政府比没有竞争对手的私企更加负责。但是我却不希望社交网络属于自然垄断。地铁建好了基本上就是一成不变的，但数字世界却在不断演变发展。在今天，分布式社交网络也许比中心化网络更加复杂，就好比带两张地铁卡总是比只带一张要麻烦的多。不过，在未来，互联网会发生根本性变革，那时分布式技术将会更易于使用。
如果未来果真如此，FOAF 可能会作为建立分布式社交网络的第一次尝试为人们记住。在企业大型数据库所驱动的中心化网络时代结束之后，分布式网络将会得到人们的长期青睐。
*如果你喜欢这篇文章，欢迎关注推特 [@TwoBitHistory](file:///Users/xingyuwang/develop/TranslateProject-wxy/translated/talk/tmp.mJHAgyVHGr#fnref:9)，也可通过 [RSS 馈送](file:///Users/xingyuwang/develop/TranslateProject-wxy/translated/talk/tmp.mJHAgyVHGr#fnref:10) 订阅，获取更多最新文章。*
---
1. 请注意，这里我没有用“消亡”一词。 [↩︎](#fnref1)
2. Jack Schofield, “Let’s be Friendsters,” The Guardian, February 19, 2004, accessed January 5, 2020, . [↩︎](#fnref2)
3. Dan Brickley and Libby Miller, “Introducing FOAF,” FOAF Project, 2008, accessed January 5, 2020, . [↩︎](#fnref3)
4. 同上。 [↩︎](#fnref4)
5. Wikipedia contributors, “JSON-LD,” Wikipedia: The Free Encyclopedia, December 13, 2019, accessed January 5, 2020, . [↩︎](#fnref5)
6. “Data Sources,” FOAF Project Wiki, December 11 2009, accessed January 5, 2020, . [↩︎](#fnref6)
7. Aldon Hynes, “What is Dean Space?”, Extreme Democracy, accessed January 5, 2020, . [↩︎](#fnref7)
8. “Understand how structured data works,” Google Developer Portal, accessed January 5, 2020, . [↩︎](#fnref8)
9. tef, “Why your distributed network will not work,” Progamming is Terrible, January 2, 2013, . [↩︎](#fnref9)
10. Dan Brickley, “Identifying things in FOAF,” rdfweb-dev Mailing List, July 10, 2003, accessed on January 5, 2020, . [↩︎](#fnref10)
---
via: 
作者：[Two-Bit History](https://twobithistory.org) 选题：[lujun9972](https://github.com/lujun9972) 译者：[aREversez](https://github.com/aREversez) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出