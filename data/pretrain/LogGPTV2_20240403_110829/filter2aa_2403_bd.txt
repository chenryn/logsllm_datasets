or      $at, $zero ; NOP 
jr      $t9 
la      $a0, ($LC2 & 0xFFFF)  # "two" ; branch delay slot 
; may be placed in .rodata section: 
off_120:         .word sub_6C 
.word sub_80 
.word sub_94 
.word sub_44 
.word sub_58 
上述代码出现了 SLTIU(Set on Less Than lmmediate Unsigned)指令。它和 SLTU（Set on Less Than 
Unsigned）的功能基本相同。请注意，这两个指令名称里差了一个“立即数（immediate）”字样。这说明
前者需要在指令中指定既定的立即数。 
BNEZ 是“在非零情况下进行转移/Branche if Not Equal to Zero”的缩写。 
上述代码和其他指令集的代码十分相近。SLL（Shift Word Left Logical）是逻辑左移的指令，本例用它进行
“乘以 4”的运算。毕竟这是一个面向 32 位 MIPS CPU 的程序，所有转移表里的所有地址都是 32 位指针。 
13.2.5  总结 
switch()的大体框架参见指令清单 13.9。 
指令清单 13.9  x86 
MOV REG,input 
CMP REG,4 ; maximal number of cases 
JA default  
SHL REG,3 ; find element in table.shift for 3bits in x64. 
MOV REG, jump_table[REG] 
JMP REG 
case1; 
     ; do something 
     JMP exit 
case2; 
     ; do something 
     JMP exit 
case3; 
     ; do something 
     JMP exit 
case4; 
     ; do something 
     JMP exit 
Case5; 
     ; do something 
     JMP exit 
defaule: 
     … 
exit: 
     … 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 13 章  switch()/case/default 
145 
jump_table dd casel 
             dd case2 
             dd case3 
             dd case4 
             dd case5 
若不使用上述指令，我们也可以在 32 位系统上使用指令 JMP jump_table[REG*4]/在 64 位上使用 JMP 
jump_table[REG*8]，实现转移表中的寻址计算。 
说到底，转移表只不过是某种指针数组它和 18.5 节介绍的那种指针数组十分雷同。 
13.3  case 从句多对一的情况 
多个 case 陈述从句触发同一系列操作的情况并不少见，例如： 
#include  
void f (int a) 
{ 
   switch (a) 
   { 
   case 1: 
   case 2: 
   case 7: 
   case 10: 
            printf ("1, 2, 7, 10\n"); 
            break; 
   case 3: 
   case 4: 
   case 5: 
   case 6: 
            printf ("3, 4, 5\n"); 
            break; 
   case 8: 
   case 9: 
   case 20: 
   case 21: 
            printf ("8 9, 21\n"); 
            break; 
   case 22: 
            printf ("22\n"); 
            break; 
   default: 
            printf ("default\n"); 
            break; 
   }; 
}; 
int main ()  
{ 
   f(4);  
}; 
如果编译器刻板地按照每种可能的逻辑分支逐一分配对应的指令组，那么程序里将会存在大量的重复
指令。一般而言，编译器会通过某种派发机制来降低代码的冗余度。 
13.3.1 MSVC  
使用 MSVC 2010（启用/Ox 选项）编译上述程序，可得到如下指令。 
指令清单 13.10  Optimizing MSVC 2010 
 1 $SG2798  DB   
'1, 2, 7, 10', 0aH, 00H 
 2 $SG2800  DB   
'3, 4, 5', 0aH, 00H 
 3 $SG2802  DB   
'8, 9, 21', 0aH, 00H 
 4 $SG2804  DB   
'22', 0aH, 00H 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
146 
逆向工程权威指南（上册） 
 5 $SG2806  DB   
'default', 0aH, 00H 
 6 
 7 _a$ = 8 
 8 _f   
PROC 
 9  
mov   
eax, DWORD PTR _a$[esp-4] 
10  
dec   
eax 
11  
cmp   
eax, 21 
12  
ja   
SHORT $LN1@f 
13  
movzx  
eax, BYTE PTR $LN10@f[eax] 
14  
jmp   
DWORD PTR $LN11@f[eax*4] 
15 $LN5@f: 
16  
mov   
DWORD PTR _a$[esp-4], OFFSET $SG2798 ; '1, 2, 7, 10' 
17  
jmp   
DWORD PTR __imp__printf 
18 $LN4@f: 
19  
mov   
DWORD PTR _a$[esp-4], OFFSET $SG2800 ; '3, 4, 5' 
20  
jmp   
DWORD PTR __imp__printf 
21 $LN3@f: 
22  
mov   
DWORD PTR _a$[esp-4], OFFSET $SG2802 ; '8, 9, 21' 
23  
jmp   
DWORD PTR __imp__printf 
24 $LN2@f: 
25  
mov   
DWORD PTR _a$[esp-4], OFFSET $SG2804 ; '22' 
26  
jmp   
DWORD PTR __imp__printf 
27 $LN1@f: 
28  
mov   
DWORD PTR _a$[esp-4], OFFSET $SG2806 ; 'default' 
29  
jmp   
DWORD PTR __imp__printf 
30  
npad   
2 ; align $LN11@f table on 16-byte boundary 
31 $LN11@f: 
32  
DD   
$LN5@f ; print '1, 2, 7, 10' 
33  
DD   
$LN4@f ; print '3, 4, 5' 
34  
DD   
$LN3@f ; print '8, 9, 21' 
35  
DD   
$LN2@f ; print '22' 
36  
DD   
$LN1@f ; print 'default' 
37 $LN10@f: 
38  
DB   
0 ; a=1 
39  
DB   
0 ; a=2 
40  
DB   
1 ; a=3 
41  
DB   
1 ; a=4 
42  
DB   
1 ; a=5 
43  
DB   
1 ; a=6 
44  
DB   
0 ; a=7 
45  
DB   
2 ; a=8 
46  
DB   
2 ; a=9 
47  
DB   
0 ; a=10 
48  
DB   
4 ; a=11 
49  
DB   
4 ; a=12 
50  
DB   
4 ; a=13 
51  
DB   
4 ; a=14 
52  
DB   
4 ; a=15 
53  
DB   
4 ; a=16 
54  
DB   
4 ; a=17 
55  
DB   
4 ; a=18 
56  
DB   
4 ; a=19 
57  
DB   
2 ; a=20 
58  
DB   
2 ; a=21 
59  
DB   
3 ; a=22 
60 _f   
ENDP 
这个程序用到了两个表：一个是索引表$LN10@f；另一个是转移表$LN11@f。 
第 13 行的 movzx 指令在索引表里查询输入值。 
索引表的返回值又分为 0（输入值为 1、2、7、10）、1（输入值为 3、4、5）、2（输入值为 8、9、21）、
3（输入值为 22）、4（其他值）这 5 种情况。 
程序把索引表的返回值作为关键字，再在第二个转移表里进行查询，以完成相应跳转（第 14 行指令的作用）。 
需要注意的是，输入值为 0 的情况没有相应的 case 从句。如果 a＝0，则“dec eax”指令会继续进行计
算，而$LN10@f 表的查询是从 1 开始的。可见，没有必要为 0 的特例设置单独的表。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 13 章  switch()/case/default 
147 
这是一种普遍应用的编译技术。 
表面看来，这种双表结构似乎不占优势。为什么它不象前文（请参见 13.2.1 节）那样采用一个统一的指
针结构呢？在这种双表结构中，索引表采用的是 byte 型数据，所以双表结构比前面那种单表结构更为紧凑。 
13.3.2 GCC 
在编译这种多对一的 switch 语句时，GCC 会生成统一的转移表。其代码风格和前文 13.2.1 节的风格
相同。 
13.3.3 ARM64: Optimizing GCC 4.9.1 
因为输入值为零的情况没有对应的处理方法，所以 GCC 会从输入值为 1 的特例开始枚举各个分支，
以便把转移表压缩得尽可能小。 
GCC 4.9.1for ARM64 的编译技术更为优越。它能把所有的偏移量信息编码为 8 位字节型数据、封装在单条
指令的 opcode 里。前文介绍过，ARM64 程序的每条指令都对应着 4 个字节的 opcode。在本例这种类型的小型
代码中，各分支偏移量的具体数值不会很大。GCC 能够充分利用这一现象，构造出单字节指针组成的转移表。 
指令清单 13.11  Optimizing GCC 4.9.1 ARM64 
f14: 
; input value in W0 
  sub      w0, w0, #1 
  cmp      w0, 21 
; branch if less or equal (unsigned): 
  bls      .L9 
.L2: 
; print "default": 
  adrp     x0, .LC4 
  add      x0, x0, :lo12:.LC4 
  b        puts 
.L9: 
; load jumptable address to X1: 
  adrp     x1, .L4 
  add      x1, x1, :lo12:.L4 
; W0=input_value-1 
; load byte from the table: 
  ldrb     w0, [x1,w0,uxtw] 
; load address of the Lrtx label: 
  adr      x1, .Lrtx4 
; multiply table element by 4 (by shifting 2 bits left) and add (or subtract) to the address of lrtx 
  add      x0, x1, w0, sxtb #2 
; jump to the calculated address: 
  br       x0 
; this label is pointing in code (text) segment: 
.Lrtx4: 
  .section          .rodata 
; everything after ".section" statement is allocated in the read-only data (rodata) segment: 
.L4: 
  .byte   (.L3 - .Lrtx4) / 4  ;case 1 
  .byte   (.L3 - .Lrtx4) / 4  ;case 2 
  .byte   (.L5 - .Lrtx4) / 4  ;case 3 
  .byte   (.L5 - .Lrtx4) / 4  ;case 4 
  .byte   (.L5 - .Lrtx4) / 4  ;case 5 
  .byte   (.L5 - .Lrtx4) / 4  ;case 6 
  .byte   (.L3 - .Lrtx4) / 4  ;case 7 
  .byte   (.L6 - .Lrtx4) / 4  ;case 8 
  .byte   (.L6 - .Lrtx4) / 4  ;case 9 
  .byte   (.L3 - .Lrtx4) / 4  ;case 10 
  .byte   (.L2 - .Lrtx4) / 4  ;case 11 
  .byte   (.L2 - .Lrtx4) / 4  ;case 12 
  .byte   (.L2 - .Lrtx4) / 4  ;case 13 