2016 ACM SIGSAC Conference on Computer and Communications Security, Vienna,
Austria, October 24-28, 2016. 1242–1254. https://doi.org/10.1145/2976749.2978339
[47] Worldatlas.com. 2021. US Area Codes By State. https://www.worldatlas.com/na/
us/area-codes.html.
[48] Ming Xu, Chuanwang Wang, Jitao Yu, Junjie Zhang, Kai Zhang, and Weili Han.
2021. Chunk-Level Password Guessing: Towards Modeling Refined Password
Composition Representations. In Proceedings of ACM CCS, Republic,Korea, Austria,
November 15–19, 2021.
[49] Rui Xu, Xiaojun Chen, Xingxing Wang, and Jinqiao Shi. 2018. An In-depth
Study of Digits in Passwords for Chinese Websites. In Third IEEE International
Conference on Data Science in Cyberspace, DSC 2018, Guangzhou, China, June
18-21, 2018. IEEE, 588–595. https://doi.org/10.1109/DSC.2018.00094
[50] Chun Y. 2011. Six million Chinese internet users’ data leaked. People’s Daily
(December 2011). http://en.people.cn/90778/7688084.html
[51] Jing Zhang, Biao Liu, Jie Tang, Ting Chen, and Juanzi Li. 2013. Social Influence
Locality for Modeling Retweeting Behaviors. In IJCAI 2013, Proceedings of the
23rd International Joint Conference on Artificial Intelligence, Beijing, China, August
3-9, 2013, Francesca Rossi (Ed.). IJCAI/AAAI, 2761–2767. http://www.aaai.org/
ocs/index.php/IJCAI/IJCAI13/paper/view/6740
[52] Verena Zimmermann and Nina Gerber. 2020. The password is dead, long live the
password - A laboratory study on user perceptions of authentication schemes.
Int. J. Hum. Comput. Stud. 133 (2020), 26–44. https://doi.org/10.1016/j.ijhcs.2019.
08.006
A PARAMETER SETTINGS
There are two parameters we mentioned in Section 3.2, Min_Len and
the minimum length of subwords. Min_Len represents the minimum
length of the extracted digit strings. In our work, we set Min_Len
to 3 because it is the shortest length to determine most tags, like
Leap and Repeat+. There is also a parameter Max_Len (which is
set to 256 in our work) indicating the max length of the extracted
digit strings. It is optional for users to adjust those parameters if
they only want to concentrate on digit semantics within certain
length range. The minimum length of subwords in the Step C of the
extraction process is also configurable. We recommend setting this
value to 2 to obtain a finer-grained subword dictionary. However,
for some attack scenarios, a larger minimum length may be more
reasonable. For example, if the wordlist is small enough, it is better
to traverse all digit strings with a short length than to replace them
with a dictionary. Under such a condition, we can increase the
minimum length to filter out those subwords with a short length.
There are other parameters for users to adjust as they prefer
which are less important, including the year range when detect-
ing Date, the size of the output dictionary of each tag, the output
formats, etc. Besides, users can replace the dictionaries of Idiom,
Postcode, MathConstant, and Phone for the detecting as they prefer
if they possess the updated or intended versions.
B UK POSTCODE
Unlike other information, the UK postcode in the tag Postcode is
composed of both digits and letters and cannot be extracted through
the process described in Section 3.2. Therefore, we design a similar
process in the tool to extract the UK postcode according to the
standard formats [15]. However, after further investigation, we find
that the UK postcode is rarely used in passwords, with less than
0.1% of passwords containing segments matching those formats in
all password sets, except for XATO with 0.11%. Considering the low
usage and its significant difference from other tags, even though
we are able to extract the UK postcode in our tool, it is excluded in
our analysis in Section 4 and application in Section 5.
C DETAILS OF ENFORCEMENT
C.1 Enforcement in JtR
Algorithm 1 Detection Module of JtR
Input: operation, word
Output: is_matched, start, end, info
1: name, tag, pos, p1, p2 ← Preprocess(operation)
2: is_matched, info ← 0, 0
3: start, end, direction ← ExtractSegment(pos, word)
4: if name = Tag_Trans then
5:
6: else if name = Tag_Replace then
7:
8: end if
9: is_matched ← Check(tag, pos, start, end, word)
10: return is_matched, start, end, info
start, end, info ← MaxMatch_B(tag, start, end, direction, p1, word)
start, end ← MaxMatch_F(tag, start, end, direction, p2, word)
Algorithm 1 shows the Detection Module we add in JtR. It
takes the operation string operation and the word string word as
input. Firstly, we extract the operation name (name) and the four
parameters (tag, pos, p1, and p2) from the operation. Then we use pos
to extract the indicated digit segment from the word and determine
the direction of the maximum match (direction). In other words, if
pos is POS_START or any uppercase letter, the direction is from
left to right, and the opposite if pos is POS_ALL, POS_END, or any
lowercase letter.
Next, if the name is Tag_Trans, we use MaxMatch_B to detect the
extracted segment and obtain the position of the matched segment
(start and end) and some extra information. There are three cases
here: (1) If tag is Repeat, Continuation, or Leap, we only need
direction, start, and end to perform the maximum matching. That
is, if the direction is from left to right, the maximum matching
starts from start; otherwise, we conduct the reverse maximum
matching from end. In this case, info records the common difference
of the number sequence, like 0 for Repeat. (2) If tag is Repeat+ or
Palindrome, p1 is required to limit the length of the segment. In
this case, info stores nothing. (3) If tag is Date, then p1 indicates
the specific date format the digit segment should match. We also
conduct a maximum matching here and use direction to decide the
525ACSAC ’21, December 6–10, 2021, Virtual Event, USA
H. Zhang, C. Wang, W. Ruan, et al.
direction of the matching. In this case, info stores the day field of
the matched date string if there is one.
However, if name is Tag_Replace, we use MaxMatch_F to detect
the digit segment according to tag. For each tag except Postcode,
Idiom, and Combination, we conduct a maximum matching with the
same matching mechanism presented in Section 3.2. The direction
of the matching depends on direction, too. For Postcode, Idiom, and
Combination, we use p2 to limit the length of the segment since the
matching dictionaries of those tags are too huge for fast detection.
Note that info is unnecessary in this case.
Finally, we check whether the matched segment meets the re-
quirement of pos. For example, POS_ALL requires the final start
and end to be the starting and ending position of the word. Besides,
if there is no digit segment at the indicated position or the segment
fails to match the tag, start and end will both be set to 0, and the
output is_matched will be false.
Algorithm 2 Processing Module of JtR
Input: rule, name, tag, pos, start, end, p1, p2, word, info
1: if name ∈ {Tag_Trans, Tag_Replace} then
restore ← CheckRemaining(rule, word)
2:
if name = Tag_Trans then
3:
4:
5:
6:
7:
8:
9: else
10:
11: end if
Trans(tag, start, end, p1, p2, word, info, restore)
else if name = Tag_Replace then
dictionary ← TagDictionary(p1)
Replace(start, end, dictionary, word, restore)
end if
BuiltIn(name, tag, pos, p1, p2, word)
Algorithm 2 shows the Processing Module. Firstly, if the cur-
rent operation is not a digit semantics operation, we directly call the
built-in function to process it. Otherwise, we use CheckRemaining
to check if there are remaining operations after the digit semantics
operation. If so, we add a new data structure, namely restore to
store the length of the current word and some built-in variables, in-
cluding l (initial or updated word’s length), m (initial or memorized
word’s last character position), and p (position of the character last
found with the "/" or "%" commands). If there is an operation v, we
further store the user-defined numeric variables (a, b, ..., k). If there
are operations M and Q (to memorize and to query the current
word), we further store the current word in restore. Note that there
are corresponding flags to indicate whether these variables need
to be recovered in the following process. If there is no following
operation, restore stores nothing.
Then, if the current operation is Tag_Trans, we use Trans to
transform the word cyclically to generate guesses. In each cycle,
we first use restore to restore the updated information (flags in
restore indicate if the restoration is necessary and what information
we need to restore). After that, we use start and end to locate the
matched segment, then use tag, p1, p2, and info to construct the
guesses as presented in Section 5.1. The process is similar if the
current operation is Tag_Replace. However, we use p1 to indicate
the dictionary first before generating the guesses. Besides, p2 and
info are unnecessary in this case.
Moreover, there are other modifications we make for JtR to
load the tag dictionaries. Firstly, in the configure file (john.conf ),
where JtR loads the rule set and other configurations, we add
13 sections, namely [List.Rules_TAG_DICT : DS_REPLACE_T1] , ...,
[List.Rules_TAG_DICT : DS_REPLACE_T13] (the same name for-
mat as that of the built-in sections). Each section corresponds to a
tag dictionary and contains a list of common segments. Then, when
JtR loads the rule set in the initialization stage (rpp.c), we further
load those 13 sections and store them into the global context for
the following process of the operation Tag_Replace.
C.2 Enforcement in Hashcat
Figure 7: Kernel process of modified Hashcat, the gray part
represents the original process without modification.
Figure 7 shows how our new version of Hashcat operates on
a rule in the kernel. As mentioned in Section 5.3.2, we apply the
Detection Module and Processing Module (without the data
structure restore) into the kernel with two extra data structures,
i.e. Extra_1 and Extra_2. Both Extra_1 and Extra_2 are 32 bits. We
enforce such a design because that kernel will pass two unused
integers when passing the information about the successful guess
(information like the indexes of the guessed hash and the current
rule, which we refer to as hit information). As shown in Figure 8,
we use the first and second byte of Extra_1 to store the starting and
ending position of the matched tag and use the third byte to store the
variable info we obtained in the Detection Module. Extra_2 stores
information to generate guesses in each cycle in the Processing
Module. There are two cases: (1) For Tag_Replace, it stores the index
of the common segment in the dictionary we use to replace the
matched segment. (2) For Tag_Trans, it stores different information
according to the parameter tag. For Repeat, Continuation, and Leap,
it stores the length of the transformed segment. For Date, it stores
the year field and month field of the transformed date string (if the
new date contains those fields). For Leap, it stores the repeating
times of the unit. For Palindrome, it stores 1 (starting construct the
palindrome from the second last character) or 0 (starting from the
last character). When a password is successfully guessed, we pass
the hit information along with Extra_1 and Extra_2 to the CPU side
Detection ModuleProcessing ModuleKernel EntranceInner Functions for Original OperationsInner Functions for DigitSemantics Operationsapply_rulesIntermediateResultHashing and MatchingIndex of word,hash and ruleYesNo No operation left?Extra_1 andExtra_2GPU KernelTraverse the operationin the current rule  The operation is B/F?YesNo526Digit Semantics based Optimization for Practical Password Cracking Tools
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
(outfile.c), where we reconstruct the guess and eventually output it.
The reconstruction is straightforward and effortless since all the
information we need to generate the guess is available.
Figure 8: Structure of Extra_1.
Other than that, unlike in JtR, we choose to directly encode the
dictionary into the kernel function because of the GPU memory
limitations and the consideration of operating efficiency. It takes no
further effort since our extraction tool is capable of automatically
generating the corresponding code and the compilation time of
Hashcat is very short.
(a) Builtin Operation
(b) Digit Semantics Operation
Figure 9: Structure of an item (an operation) in kernel rule.
Table 7: Mapping relationship from pos to pos_flag and
pos_offset.
pos_flag
01
10
11
pos_offset
000000
000000
000001
000002
...
000000
000001
000002
...
pos
1 (POS_ALL)
2 (POS_END)
a
b
...
3 (POS_START)
A
B
...
Moreover, there are also modifications in the preprocessing stage
on the CPU side. In the original process, after loading the rule set,
Hashcat converts each rule string (referred to as cpu_rule) into
a list, where every 32-bit item stores an operation as shown in
Figure 9(a). It is sufficient for built-in operations since any built-in
operation contains 3 parts at most (name and two parameters at
most). However, our digit semantics operations include 5 parts, i.e.,
name, tag, pos, p1, and p2. Therefore, we rearrange the structure as
Figure 9(b) for digit semantics operations. We further divide pos
into two parts, namely pos_flag (indicating the starting position and
the direction of the offset) and pos_offset. The mapping relationship
is shown in Table 7.
In addition, Hashcat supports more than 300 types of hash
modes, and each mode has a unique kernel file. We select two
typical hash algorithms, MD5 (the default hash mode) and SHA256,
as representatives to realize the implementation. For the rest of the
hash modes that support rule-based attacks, the needed modifica-
tions for implementing digit semantics rules are similar to MD5
and SHA256, except for the hash functions called during the hash
operation.
D ANALYSIS ON THE DIGITS_100
Table 8: Top 100 digit semantics rules selected in the test of
Hashcat. The corresponding built-in rule set is Generated2.
Dodonew-UUU9
B9388, B92AA, B9266, B9268, B9255, B92A6, B9385, B926A, B92A8,
B9297, B9286, B938E, B9288, B928A, B926G, B9254, B9384, B93AF,
B9277, B926F, B93AA, B93A6, B928E, B92B7, B927B, B922G, B9244,
B938H, B926D, B92GT, F629D, B9386, B92AG, B928C, B936G, B936A,
B92BB, B9245, B938C, B9368, B936F, F92BD, F622D, B9226, B92BQ,
B93EE, B92GG, B92A4, B929K, B9279, B938A, B92AF, B929B, B9344,
B9228, B936E, B92AE, B922T, B928G, B92GP, B9355, B9366, F926D,
B934H, B9265, F92DD, B922A, F92CD, B93A8, B938F, B9215, B929A,
B92B8, B928F, B9276, B93AG, F625D, B93AT, B93AL, B92B9, B9278,
B938D, B926E, B934C, F62BD, F92AD, F929D, B939J, B92BK, B922P,
B9379, B9338, B9296, B9298, F923D, F93BD, B92AN, F93CD, B923G,
B938G
XATO-Neopets
F922D, F929D, B9214, B9255, F92DD, F629D, F925D, B92AA, F926D,
F622D, B9215, B9254, F923D, F92BD, F92CD, B92A8, B923A, F932D,
B9344, B923E, B9236, F625D, B923F, B92A4, B9355, B9238, F62DD,
B923G, B938A, B938F, B92A6, F939D, B9288, B9285, F928D, B9388,
B922A, B9244, F626D, B938E, B92AD, F92AD, B92AF, F93CD, F62BD,
B93A5, B928A, F122D, F924D, F623D, B9286, B928E, B9297, B925I,
F93DD, F129D, B9384, B9228, B93A8, B92AG, B9268, B922F, B926A,
B9338, F936D, B9386, B938G, B9226, B924C, B92AE, B933F, B93AA,
F522D, B9266, B9245, F93BD, F632D, B9211, B922E, B9345, B9277,
B925D, B93E4, B923R, B933A, F935D, B933E, F52DD, B928G, B924H,
F529D, B928F, B93AF, F933D, B92A5, B938C, B92E4, F125D, B93A6,
F12DD
Table 8 shows the top 100 digit semantics rules (Digits_100) ob-
tained in the test of Generated2. The result is similar to the test of
JtR that is presented in Section 6.2.3. In the test of Chinese pass-
words (Dodonew-UUU9), we obtain 87 and 13 rules of Tag_Trans
and of Tag_Replace, respectively. Among them, all the rules of
Tag_Trans correspond to Date. In those rules of Tag_Replace, the
most frequently used dictionary is Idiom (3), followed by Date (2)
and Combination (2). The results are similar in the test of Eng-
lish passwords (XATO-Neopets). All the rules of Tag_Trans (66)
correspond to Date. However, in those rules of Tag_Replace (34),
Continuation (6) is used most frequently, followed by Date (5) and
Subword (5).
startendinfounused32 bits8 bitsnametagp24 bits pos8 bitsp16 bitspos_flagpos_offset2 bits6 bitsnamep1p2unused8 bits32 bitsnametagp24 bits pos8 bitsp16 bits32 bitspos_flagpos_offset2 bits6 bitsnamep1p2unused8 bits32 bits527