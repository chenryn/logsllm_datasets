class WellFormednessChecker(sgmllib.SGMLParser):
# check that an SGML document is 'well-formed'
# (in the XML sense).
def _ _init_ _(self, file=None):
sgmllib.SGMLParser._ _init_ _(self)
self.tags = []
if file:
self.load(file)
def load(self, file):
while 1:
s = file.read(8192)
if not s:
break
self.feed(s)
self.close()
def close(self):
sgmllib.SGMLParser.close(self)
if self.tags:
raise SyntaxError, "start tag %s not closed" % self.tags[-1]
def unknown_starttag(self, start, attrs):
self.tags.append(start)
def unknown_endtag(self, end):
start = self.tags.pop()
if end != start:
raise SyntaxError, "end tag %s does't match start tag %s" %\
(end, start)
try:
c = WellFormednessChecker()
c.load(open("samples/sample.htm"))
except SyntaxError:
raise # report error
else:
print "document is well-formed"
Traceback (innermost last):
...
SyntaxError: end tag head does't match start tag meta
最后, Example 5-8 中的类可以用来过滤 HTML 和 SGML 文档. 继承这个类, 然
后实现 start 和 end 方法即可.
5.4.0.4. Example 5-8. 使用 sgmllib 模块过滤 SGML 文档
File: sgmllib-example-4.py
import sgmllib
import cgi, string, sys
class SGMLFilter(sgmllib.SGMLParser):
# sgml filter. override start/end to manipulate
# document elements
def _ _init_ _(self, outfile=None, infile=None):
sgmllib.SGMLParser._ _init_ _(self)
if not outfile:
outfile = sys.stdout
self.write = outfile.write
if infile:
self.load(infile)
def load(self, file):
while 1:
s = file.read(8192)
if not s:
break
self.feed(s)
self.close()
def handle_entityref(self, name):
self.write("&%s;" % name)
def handle_data(self, data):
self.write(cgi.escape(data))
def unknown_starttag(self, tag, attrs):
tag, attrs = self.start(tag, attrs)
if tag:
if not attrs:
self.write("" % tag)
else:
self.write("")
def unknown_endtag(self, tag):
tag = self.end(tag)
if tag:
self.write("" % tag)
def start(self, tag, attrs):
return tag, attrs # override
def end(self, tag):
return tag # override
class Filter(SGMLFilter):
def fixtag(self, tag):
if tag == "em":
tag = "i"
if tag == "string":
tag = "b"
return string.upper(tag)
def start(self, tag, attrs):
return self.fixtag(tag), attrs
def end(self, tag):
return self.fixtag(tag)
c = Filter()
c.load(open("samples/sample.htm"))
5.5. htmllib 模块
htmlib 模块包含了一个标签驱动的( tag-driven ) HTML 语法分析器, 它会将
数据发送至一个格式化对象. 如 Example 5-9 所示. 更多关于如何解析 HTML
的例子请参阅 formatter 模块.
5.5.0.1. Example 5-9. 使用 htmllib 模块
File: htmllib-example-1.py
import htmllib
import formatter
import string
class Parser(htmllib.HTMLParser):
# return a dictionary mapping anchor texts to lists
# of associated hyperlinks
def _ _init_ _(self, verbose=0):
self.anchors = {}
f = formatter.NullFormatter()
htmllib.HTMLParser._ _init_ _(self, f, verbose)
def anchor_bgn(self, href, name, type):
self.save_bgn()
self.anchor = href
def anchor_end(self):
text = string.strip(self.save_end())
if self.anchor and text:
self.anchors[text] = self.anchors.get(text, []) +
[self.anchor]
file = open("samples/sample.htm")
html = file.read()
file.close()
p = Parser()
p.feed(html)
p.close()
for k, v in p.anchors.items():
print k, "=>", v
print
link => ['http://www.python.org']
如果你只是想解析一个 HTML 文件, 而不是将它交给输出设备, 那么 sgmllib
模块会是更好的选择.
5.6. htmlentitydefs 模块
htmlentitydefs 模块包含一个由 HTML 中 ISO Latin-1 字符实体构成的字典.
如 Example 5-10 所示.
5.6.0.1. Example 5-10. 使用 htmlentitydefs 模块
File: htmlentitydefs-example-1.py
import htmlentitydefs
entities = htmlentitydefs.entitydefs
for entity in "amp", "quot", "copy", "yen":
print entity, "=", entities[entity]
amp = &
quot = "
copy = \302\251
yen = \302\245
Example 5-11 展示了如何将正则表达式与这个字典结合起来翻译字符串中的实
体 ( cgi.escape 的逆向操作).
5.6.0.2. Example 5-11. 使用 htmlentitydefs 模块翻译实体
File: htmlentitydefs-example-2.py
import htmlentitydefs
import re
import cgi
pattern = re.compile("&(\w+?);")
def descape_entity(m, defs=htmlentitydefs.entitydefs):
# callback: translate one entity to its ISO Latin value
try:
return defs[m.group(1)]
except KeyError:
return m.group(0) # use as is
def descape(string):
return pattern.sub(descape_entity, string)
print descape("&lt;spam&amp;eggs&gt;")
print descape(cgi.escape(""))
最后, Example 5-12 展示了如何将 XML 保留字符和 ISO Latin-1 字符转换为
XML 字符串. 与 cgi.escape 相似, 但它会替换非 ASCII 字符.
5.6.0.3. Example 5-12. 转义 ISO Latin-1 实体
File: htmlentitydefs-example-3.py
import htmlentitydefs
import re, string
# this pattern matches substrings of reserved and non-ASCII characters
pattern = re.compile(r"[&<>\"\x80-\xff]+")
# create character map
entity_map = {}
for i in range(256):
entity_map[chr(i)] = "&%d;" % i
for entity, char in htmlentitydefs.entitydefs.items():
if entity_map.has_key(char):
entity_map[char] = "&%s;" % entity
def escape_entity(m, get=entity_map.get):
return string.join(map(get, m.group()), "")
def escape(string):
return pattern.sub(escape_entity, string)
print escape("")
print escape("\303\245 i \303\245a \303\244 e \303\266")
&lt;spam&amp;eggs&gt;
&aring; i &aring;a &auml; e &ouml;
5.7. formatter 模块
formatter 模块提供了一些可用于 htmllib 的格式类( formatter classes ).
这些类有两种, formatter 和 writer . formatter 将 HTML 解析器的标签和数
据流转换为适合输出设备的事件流( event stream ), 而 writer 将事件流输出
到设备上. 如 Example 5-13 所示.
大多情况下, 你可以使用 AbstractFormatter 类进行格式化. 它会根据不同的
格式化事件调用 writer 对象的方法. AbstractWriter 类在每次方法调用时打
印一条信息.
5.7.0.1. Example 5-13. 使用 formatter 模块将 HTML 转换为事件流
File: formatter-example-1.py
import formatter
import htmllib
w = formatter.AbstractWriter()
f = formatter.AbstractFormatter(w)
file = open("samples/sample.htm")
p = htmllib.HTMLParser(f)
p.feed(file.read())
p.close()
file.close()
send_paragraph(1)
new_font(('h1', 0, 1, 0))
send_flowing_data('A Chapter.')
send_line_break()
send_paragraph(1)
new_font(None)
send_flowing_data('Some text. Some more text. Some')
send_flowing_data(' ')
new_font((None, 1, None, None))
send_flowing_data('emphasized')
new_font(None)
send_flowing_data(' text. A')
send_flowing_data(' link')
send_flowing_data('[1]')
send_flowing_data('.')
formatter 模块还提供了 NullWriter 类, 它会将任何传递给它的事件忽略;
以及 DumbWriter 类, 它会将事件流转换为纯文本文档. 如 Example 5-14 所
示.
5.7.0.2. Example 5-14. 使用 formatter 模块将 HTML 转换为纯文本
File: formatter-example-2.py
import formatter
import htmllib
w = formatter.DumbWriter() # plain text
f = formatter.AbstractFormatter(w)
file = open("samples/sample.htm")
# print html body as plain text
p = htmllib.HTMLParser(f)
p.feed(file.read())
p.close()
file.close()
# print links
print
print
i = 1
for link in p.anchorlist:
print i, "=>", link
i = i + 1
A Chapter.
Some text. Some more text. Some emphasized text. A link[1].
1 => http://www.python.org
Example 5-15 提供了一个自定义的 Writer , 它继承自 DumbWriter 类, 会记
录当前字体样式并根据字体美化输出格式.
5.7.0.3. Example 5-15. 使用 formatter 模块自定义 Writer
File: formatter-example-3.py
import formatter
import htmllib, string
class Writer(formatter.DumbWriter):
def _ _init_ _(self):
formatter.DumbWriter._ _init_ _(self)
self.tag = ""
self.bold = self.italic = 0
self.fonts = []
def new_font(self, font):
if font is None:
font = self.fonts.pop()
self.tag, self.bold, self.italic = font
else:
self.fonts.append((self.tag, self.bold, self.italic))
tag, bold, italic, typewriter = font
if tag is not None:
self.tag = tag
if bold is not None:
self.bold = bold
if italic is not None:
self.italic = italic
def send_flowing_data(self, data):
if not data:
return
atbreak = self.atbreak or data[0] in string.whitespace
for word in string.split(data):
if atbreak:
self.file.write(" ")
if self.tag in ("h1", "h2", "h3"):
word = string.upper(word)
if self.bold:
word = "*" + word + "*"
if self.italic:
word = "_" + word + "_"
self.file.write(word)
atbreak = 1
self.atbreak = data[-1] in string.whitespace
w = Writer()
f = formatter.AbstractFormatter(w)
file = open("samples/sample.htm")
# print html body as plain text
p = htmllib.HTMLParser(f)
p.feed(file.read())
p.close()
_A_ _CHAPTER._
Some text. Some more text. Some *emphasized* text. A link[1].
5.8. ConfigParser 模块
ConfigParser 模块用于读取配置文件.
配置文件的格式与 Windows INI 文件类似, 可以包含一个或多个区域
( section ), 每个区域可以有多个配置条目.
这里有个样例配置文件, 在 Example 5-16 用到了这个文件:
[book]
title: The Python Standard Library
author: Fredrik Lundh
email: PI:EMAIL
version: 2.0-001115
[ematter]
pages: 250
[hardcopy]
pages: 350
Example 5-16 使用 ConfigParser 模块读取这个配制文件.
5.8.0.1. Example 5-16. 使用 ConfigParser 模块
File: configparser-example-1.py
import ConfigParser
import string
config = ConfigParser.ConfigParser()
config.read("samples/sample.ini")
# print summary
print
print string.upper(config.get("book", "title"))
print "by", config.get("book", "author"),
print "(" + config.get("book", "email") + ")"
print
print config.get("ematter", "pages"), "pages"
print
# dump entire config file
for section in config.sections():
print section
for option in config.options(section):
print " ", option, "=", config.get(section, option)
THE PYTHON STANDARD LIBRARY
by Fredrik Lundh (PI:EMAIL)
250 pages
book
title = The Python Standard Library
email = PI:EMAIL
author = Fredrik Lundh
version = 2.0-001115
_ _name_ _ = book
ematter
_ _name_ _ = ematter
pages = 250
hardcopy
_ _name_ _ = hardcopy
pages = 350
Python 2.0 以后, ConfigParser 模块也可以将配置数据写入文件, 如 Example
5-17 所示.
5.8.0.2. Example 5-17. 使用 ConfigParser 模块写入配置数据
File: configparser-example-2.py