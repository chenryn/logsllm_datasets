将菜单条目的个数（cItems）和菜单条目数组指针（rgItems）存储在局部变量/寄存器中（见下面的清单）。
    .text:BF89C779    mov    eax, [esi+tagMENU.cItems]
    .text:BF89C77C    mov    ebx, [esi+tagMENU.rgItems]
    .text:BF89C77F    mov    [ebp+cItems], eax
    .text:BF89C782    cmp    eax, edx
    .text:BF89C784    jz     short loc_BF89C7CC
一旦 xxxSetMenuInfo 的递归调用到达最深层的菜单，函数停止递归并处理菜单项。到这时，函数会通过调用 xxxMNUpdateShownMenu
来调用用户模式回调，从而可能允许调整菜单条目数组的大小。然而，当 xxxMNUpdateSHownMenu 返回后，xxxSetMenuInfo
在从递归调用返回时没有充分验证菜单条目数组缓冲区和存储在数组中的条目个数。如果在 xxxMNUpdateShownMenu
调用回调时，攻击者从该回调内部通过调用 InsertMenuItem() 或 DeleteMenu() 调整菜单条目数组的大小，那么下面清单中的 ebx
寄存器将可能指向已释放的内存。另外，由于 cItems 反映的是在函数调用的时间点上包含在数组中的元素个数，xxxSentMenuInfo
将可能会操作所分配数组之外的条目。
    .text:BF89C786    add    ebx, tagITEM.spSubMenu
    ...
    .text:BF89C789    mov    eax, [ebx]          ; spSubMenu
    .text:BF89C78B    dec    [ebp+cItems]
    .text:BF89C78E    cmp    eax, edx
    .text:BF89C790    jz     short loc_BF89C7C4
    ...
    .text:BF89C7B2    push   edi
    .text:BF89C7B3    push   dword ptr [ebx]
    .text:BF89C7B5    call   _xxxSetMenuInfo@8   ; xxxSetMenuInfo(x,x)
    .text:BF89C7BA    call   _ThreadUnlock1@0    ; ThreadUnlock1()
    .text:BF89C7BF    xor    ecx, ecx,
    .text:BF89C7C1    inc    ecx,
    .text:BF89C7C2    xor    edx, edx
    ...
    .text:BF89C7C4    add    ebx, 6Ch            ; next menu item
    .text:BF89C7C7    cmp    [ebp+cItems], edx   ; more items ?
    .text:BF89C7CA    jnz    short loc_BF89C789
为了应对在调用菜单条目处理时的漏洞，微软在 win32k 中引入了新的 MNGetpItemFromIntex
函数。该函数接受菜单对象指针和请求的菜单条目索引作为参数，并根据在菜单对象中提供的信息返回条目指针。
SetWindowPos 数组释放后使用
Windows 允许应用程序延时窗口位置更新，这样使多个窗口可以被同时更新。为此，Windows 使用一个特殊的 SetWindowPos
对象（SWP），该对象保存指向窗口位置结构体数组的指针。当应用程序调用 BeginDeferWindowPos() 时初始化 SWP
对象和这个数组。该函数接受数组元素（窗口位置结构体）的个数以对其进行预先分配。随后应用程序通过调用 DeferWindowPos()
将窗口位置的更新推迟到下一个可用的位置结构体被填充时。万一要求延时更新的数量超过预分配项的数量限制，win32k 用更合适的大小（4
个追加的项）重新分配数组。一旦所有要求的窗口位置更新都已被延时，应用程序调用 EndDeferWindowPos() 来处理窗口更新列表。
在操作 SMWP 数组时，win32k 在用户模式回调之后并非总是适当地验证数组指针。在调用 EndDerWindowPos
来处理多窗口位置结构体时，win32k 调用 xxxCalcValidRects 来计算在 SMWP
数组中引用的每个窗口的位置和大小。该函数遍历每一项并执行各种操作，例如通知每个窗口它的位置正在改变（WM_WINDOWPOSCHANGING）。由于该消息会调用用户模式回调，攻击者能够对同一个
SWP 对象产生多次 DeferWindowPos 的调用来引发 SMWP 数组的重新分配（见下面的清单）。由于 xxxCalcValidRects
将窗口句柄写回原缓冲区中，这反过来会导致一个释放后使用漏洞。
    .text:BF8A37B8    mov ebx, [esi+14h]        ; SMWP array
    .text:BF8A37BB    mov [ebp+var_20], 1
    .text:BF8A37C2    mov [ebp+cItems], eax     ; SMWP array count
    .text:BF8A37C5    js loc_BF8A3DE3           ; exit if no entries
    ...
    .text:BF8A3839    push ebx
    .text:BF8A383A    push eax
    .text:BF8A383B    push WM_WINDOWPOSCHANGING
    .text:BF8A383D    push esi
    .text:BF8A383E    call _xxxSendMessage@16   ; user-mode callback
    .text:BF8A3843    mov eax, [ebx+4]
    .text:BF8A3846    mov [ebx], edi            ; window handle
    ...
    .text:BF8A3DD7    add ebx, 60h              ; get next entry
    .text:BF8A3DDA    dec [ebp+cItems]          ; decrement cItems
    .text:BF8A3DDD    jns loc_BF8A37CB
不像菜单条目那样，调用 SMWP 数组操纵的漏洞，被通过在 SMWP 数组处理期间拒绝缓冲区的重新分配来应对。这可以在
win32k!DeferWindowPos 函数中观测到，函数在那里检查“正被处理的”标志位并只允许不会导致缓冲区重新分配的项被添加进数组。
#### 4\. 可利用性
在这一节中，我们评估由用户模式回调引发的漏洞的可利用性。由于我们关注两种漏洞原型——释放后使用和空指针引用，我们将聚焦于攻击者是如何能够将这类 BUG
施加在利用 win32k 漏洞上的。为了在第 5 节中提出合理的缓解措施或变通方案，评估它们的可利用性是必不可少的。
##### 4.1 内核堆
如同在第 2.2
节中提到的，用户对象和它们的相关数据结构位于会话内存池、共享堆，或桌面堆中。存储在桌面堆或共享堆中的对象和数据结构由内核堆分配器管理。内核堆分配器可以看作是一个精简版的用户模式堆分配器，它使用类似的由
NT 执行体导出的函数来管理堆块，例如 RtlAllocateHeap 和 RtlFreeHeap 等。
虽然用户堆和内核堆极其相似，但它们有一些关键的不同之处。不像用户模式堆那样，被 win32k 使用的内核堆不采用任何前置分配器。这可以通过查看
HEAP_LIST_LOOKUP 结构体的 ExtendedLookup 值来观察到，该结构体在堆基址（HEAP）中引用。当设置为 NULL
时，堆分配器不使用任何旁视列表或低分片堆 [13]。此外，在转储堆基址结构体（见下面的清单）时，我们可以观察到，由于 EncodingFlagMask 和
PointerKey 都被设置为 NULL，所以并未使用任何堆管理结构体的编码或混淆。前者决定是否使用堆头编码，而后者用来编码 CommitRoutine
指针，每当堆需要被延伸时会调用该例程指针。
    Kd> dt nt!_HEAP fea00000
       ...
       +0x04c EncodeFlagMask   : 0
       +0x050 Encoding         : _HEAP_ENTRY
       +0x058 PointerKey       : 0
       ...
       +0x0b8 BlocksIndex      : 0xfea00138 Void
       ...
       +0x0c4 FreeLists        : _LIST_ENTRY [ 0xfea07f10 - 0xfea0e4d0 ]
       ...
       +0x0d0 CommitRoutine    : 0x93a4692d  win32k!UserCommitDesktopMemory
       +0x0d4 FrontEndHeap     : (null)
       +0x0d8 FrontHeapLockCount : 0
       +0x0da FrontEndHeapType : 0 ''
    Kd> dt nt!_HEAP_LIST_LOOKUP fea00138
       +0x000 ExtendedLookup   : (null)
       ...
当处理像“释放后使用”这样的内核堆损坏问题时，确切知道内核堆管理器如何工作是必不可少的。有很多非常好的文章详细说明了用户模式堆机制的内部工作机制
[13][6][9]，这些可以在学习内核堆时作为参考。根据当前讨论的需要，理解内核堆是一块根据分配内存的数量可伸缩的相邻内存区域就足够了。由于未使用前置管理器，所有被释放的内存块被索引在一个单向的空闲列表中。一般情况下，堆管理器总是尝试分配最近释放的内存块（例如通过列表建议使用），来更好地利用
CPU 缓存器。
##### 4.2 释放后使用利用
为了利用 win32k
中的释放后使用漏洞，攻击者需要能够重新分配已释放的内存并在某种程度上控制它的内容。因为用户对象和相关的数据结构和字符串存储在一起，通过设置存储为
Unicode
字符串的对象属性，有可能可以强制进行任意大小的分配以及完全控制最近释放内存中的内容。只要避免空字符（除了字符串终止符），任意字节组合可以被用在操作作为对象或数据结构访问的内存。
为了桌面堆中的释放后使用漏洞，攻击者会通过调用 SetWindowTextW 设置窗口标题栏的文本，以强制进行任意大小的桌面堆分配。相似地，可以通过调用
SetClassLongPtr 并指定 GCLP_MENUNAME 以设置与某窗口类关联的某个菜单资源的菜单名称字符串来触发任意大小的会话内存池分配。
    eax=41414141 ebx=00000000 ecx=ffb137e0 edx=8e135f00 esi=fe74aa60 edi=fe964d60
    eip=92d05f53 esp=807d28d4 ebp=807d28f0 iopl=0         nv up ei pl nz na pe cy
    cs=0008  ss=0010  ds=0023  es=0023  fs=0030  gs=0000             efl=00010207
    win32k!xxxSetPKLinThreads+0xa9:
    92d05f53 89700c   mov   dword ptr [eax+0Ch],esi ds:0023:4141414d=????????
    kd> dt win32k!tagKL @edi -b
       +0x000 head             : _HEAD
          +0x000 h                : 0x41414141
          +0x004 cLockObj         : 0x41414142
       +0x008 pklNext          : 0x41414141