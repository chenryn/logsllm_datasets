Check that e = SIGK{|e(cid:48)|}
Encrypt e with public key K
Decrypt e with private key K
Encrypt e with symmetric key K
Decrypt e with symmetric key K
Hash the expression e
Evaluate function f with argument e
Project the 1st component of a pair
Project the 2nd component of a pair
Check that e = e(cid:48)
Generate a new nonce
Program
Thread id
Thread identiﬁer
Thread
Store
Lock map
Conﬁguration
P,Q ::= · | jump e | latelaunch | x := a;P
I,J
η
T,S
σ
ι
C
Locations → Expressions
Locations → (Thread ids) ∪ { }
::= [P]I
:
:
::= ι,σ ,T1| . . .|Tn
Figure 1. Syntax of the programming language
2.1. Programming Model
The programming language deﬁnition includes its syn-
tax and operational semantics. The syntax is summarized
in Figure 1. The current language includes process cal-
culi and functional constructs for modeling cryptographic
operations, straightline code, and network communication
among concurrent processes, but does not have condition-
als (if. . .then. . .else. . .), returning function calls or loops.
Instead, it has a match construct that tests equality of
expressions (match e,e(cid:48)) and blocks if the test fails, as
well as unconditional jumps to arbitrary code (jump e).
These constructs are sufﬁcient for applications we have
considered so far. In future work, we plan to investigate
the technical challenges associated with adding condition-
als, returning function calls, and loops to the language.
We describe below the core language constructs, the ad-
versary model, and the form of the operational semantics.
Examples of programs in the language can be found in
Section 4.
Data, agents, and keys. Data is represented in the
programming model symbolically as expressions e (also
called values). Expressions may be numbers n, identi-
ˆX, keys K, variables x, pairs
ties of agents (principals)
(e,e(cid:48)), signatures using private keys SIGK{|e|} (denoting
the signature on e made using the key K), asymmetric
key encryptions ENCK{|e|}, symmetric key encryptions
SY MENCK{|e|}, hashes H(e), or code reiﬁed as data P.
All expressions are assumed to be simply typed (e.g. a
pair can be distinguished from a number), but we elide
the details of the types. Agents, denoted ˆX, ˆY , are users
associated with a system on behalf of whom programs
execute. Keys are denoted by the letter K. The inverse of
key K is denoted by K−1. We assume that the expression
e may be recovered from the signature SIGK{|e|} if the
veriﬁcation key K is known. We also assume that hashes
are conﬁdentiality preserving.
Systems, programs, and actions. A secure system is
speciﬁed as a set of programs P in the programming
language. For example, a trusted computing attestation
system will contain two programs, one to be executed by
the untrusted platform and the other by the remote veriﬁer.
Each program consists of a number of actions x := a that
are executed in a straight line. The name x binds the value
returned by the action a, and is used to refer to the value
in subsequent actions. Our model of straightline code
execution is thus functional. This design choice simpliﬁes
reasoning signiﬁcantly. For some actions such as sending a
message, the value returned is meaningless. In such cases
we assume that the value returned is the constant 0. A
program ends with either an empty action ·, or one of the
special actions jump e or latelaunch . The expression
jump e is described below and latelaunch is covered
in the next section. A single executing program is called
a thread [P]I (threads are referred to with variables T , S).
It contains a program P, and a descriptor I for the thread
that is a tuple (cid:104) ˆX,η,m(cid:105).
ˆX is the agent that owns the
thread, m is the machine on which the thread is hosted,
and η is a unique identiﬁer (akin to a process id). The
abstract runtime environment of the language is called
a conﬁguration C, written ι,σ ,T1| . . .|Tn. It contains all
executing threads (T1| . . .|Tn), the state of memory on all
machines (represented by the map σ), and the state of
memory locks held by threads (represented by the map
ι).
Cryptography and network primitives. The program-
ming language includes actions for standard operations
like signing and signature veriﬁcation, encryption and
decryption (both symmetric and asymmetric), nonce gen-
eration, hashing, expression matching, projection from a
pair, and evaluation of arbitrary side-effect free functions
(eval f ,e). Threads can communicate with each other
using actions to send and receive values over the network.
Network communication is untargeted, i.e., any thread
may intercept and read any message (dually, a received
message could have been sent by any thread). Information
being sent over the network may be protected using
cryptography, if needed. The treatment of cryptography
and network communication follows PCL. The language
constructs we present next are new to this work.
Machines and shared memory. Threads can also share
data through memory. The programming model contains
machines m explicitly. Each machine contains a number
of memory locations l
threads
running on the machine. Each location is classiﬁed as
either RAM, persistent store (hard disk), or other special
purpose location (such as Platform Conﬁguration Regis-
ters that are described in the next section). The machine on
which a location exists and the location’s type are made
that are shared by all
explicit in the location’s name. For instance, m.RAM.k
is the kth RAM location on machine m. The behavior
of a location depends on its type. For example, RAM
locations are set to a ﬁxed value when a machine resets,
whereas persistent locations are not affected by resets.
Despite these differences, the prominent characteristics
of all locations are that they can be read and written
through actions provided in the programming language,
and that they are shared by all threads on the machine.
Consequently, any thread, including an adversarial thread,
has the potential to read or modify any location.
Access control on memory.
Shared memory, by its
very nature, cannot be used in secure programs unless
some access control mechanism enforces the integrity and
conﬁdentiality of data written to it. Access control varies
by type of memory and application (e.g., memory seg-
mentation, page table read-only bits, access control lists
in ﬁle systems, etc). Our programming model provides
an abstract form of access control through locks. Any
running thread may obtain an exclusive-write lock on any
previously unlocked memory location l by executing the
action lock l. Information on locks held by threads is
included in a conﬁguration as a map ι from locations
to identities of threads that hold locks on them. The
semantics of the programming language guarantee that
while a lock is held by a thread, no other thread will
be able to write the location. A thread may relinquish a
lock it holds by executing the action unlock l. Locking in
this manner may be used to enforce integrity of contents
of memory. Similarly, one may add read locks that provide
conﬁdentiality of memory contents. Although technically
straightforward, read locks are omitted from this paper
since we are focusing on integrity properties.
Machine resets. The language allows a machine to be
spontaneously reset. There is no speciﬁc action that causes
a reset. Instead, there is a reduction in the operational
semantics that may occur at any time to reset a machine.
When this happens, all running threads on the machine
are killed, all its RAM and PCR locations are set to
a ﬁxed value, and a single new thread is created to
reboot the machine. This new thread executes a ﬁxed
booting program. We model the reset operation since it has
signiﬁcant security implications for secure systems [18].
In the context of trusted computing, e.g., the fact that a
TPM’s Platform Conﬁguration Registers (PCRs) are set
to a ﬁxed value is critical in reasoning about the security
properties of attestation protocols. In addition, it has been
shown that adversaries can launch realistic attacks against
trusted computing systems using machine resets [19].
Untrusted code execution. The last salient feature of
our programming model is an action jump e that dynami-
cally branches to code represented by the expression e.
The code e is arbitrary; it may have been read from
memory or disk, or even have been received over the net-
work. As a result, it could have come from an adversary.
Execution of untrusted code is necessary to model several
systems of interest, e.g., trusted computing systems and
web browsers.
Adversary Model. We formally model adversaries as
extra threads executing concurrently with protocol par-
ticipants. Such an adversary may contain any number of
threads, on any machines, and may execute any program
expressible in our programming model. However,
the
adversary cannot perform operations that are not permitted
by the language semantics. For example, the adversary can
neither write to memory locked by another thread, nor can
she break cryptography.
Operational semantics. The operational semantics of
the language captures how systems execute to produce
traces. It is deﬁned using process calculus-style reduction
rules that specify how a conﬁguration may transition to
another. A trace C0 −→ C1 . . . −→ Cn is a sequence of
conﬁgurations, such that successive conﬁgurations in the
sequence can be obtained by applying one reduction rule.
tn−→ Cn associates monotonically
A timed trace C0
increasing time points t1, . . . ,tn with reductions on a trace.
These time points may be drawn from any totally ordered
set, such as integers or real numbers.
t1−→ C1 . . .
2.2. Logic
The logic LS2 is used to specify and reason about
properties of secure systems.
Syntax. Figure 2 summarizes LS2’s syntax, including
predicates speciﬁc to trusted computing that we discuss
in the next section. Predicates for representing network
communication and cryptographic operations are taken
from PCL. Other predicates that capture information about
state, unconditional jumps, and resets are new to this work.
A signiﬁcant difference from PCL is that LS2 incorporates
time explicitly in formulas and semantics. All predicates
and formulas are interpreted relative to not only a timed
trace but also a point of time (modal formulas, described
below, are an exception since they are interpreted relative
to a timed trace only). In the proof system, time is used to
track the relative order of actions on a trace and to specify
program invariants.
time t
Action predicates capture actions performed by threads.
For instance, Send(I,e) holds on a trace at
if
thread I executes action send e at time t in the trace.
Write(I,l,e) holds on a trace whenever thread I executes
write l,e. Similarly, we have predicates to capture cryp-
tographic operations. General predicates capture other
information, including information about the state of the
environment. Particularly prominent are the two predicates
Mem(l,e) which holds whenever location l contains value
e, and Jump(I,e) which holds whenever thread I executes
jump e. Access control on memory is reﬂected in the
logic through three predicates: Lock(I,l), Unlock(I,l),
and IsLocked(l,I). The ﬁrst two of these capture actions:
Lock(I,l) holds on a trace when a thread I obtains an
exclusive-write lock on location l, whereas Unlock(I,l)
holds when thread I releases the lock. The third predicate
IsLocked(l,I) captures state: it holds whenever thread I
has an exclusive-write lock on location l. As an example,
suppose that thread I executes an action to obtain the lock
on location l at time t and executes another action to
release the lock at a later point t(cid:48). Then Lock(I,l) will
hold exactly at time t, Unlock(I,l) will hold exactly at
time t(cid:48), and IsLocked(l,I) will hold at all points of time
between t and t(cid:48). The predicate Reset(m,I) holds at time
t if machine m is reset at time t, creating the new thread
I to boot it. We deﬁne the abbreviations Reset(m) and
Jump(I) as ∃I. Reset(m,I) and ∃e. Jump(I,e) respec-
tively. Contains(e,e(cid:48)) means that e(cid:48) is a sub-expression of
e. The predicate Honest( ˆX,(cid:126)P) is described in Section 3.1.
Predicates can be combined using the usual logical
connectives: ∧ (conjunction), ∨ (disjunction), ⊃ (impli-
cation), and ¬ (negation) as well as ﬁrst-order universal
and existential quantiﬁers that may range over expressions,
keys, principals, threads, locations, and time. There is a
special formula, A @ t, which captures time explicitly in
the logic. A @ t means that formula A holds at time t.
We often write intervals in the usual mathematical sense;
they may take the forms (t1,t2), [t1,t2], (t1,t2], and [t1,t2).
For an interval i, we also deﬁne the formula A on i as
∀t. ((t ∈ i)⊃ A @ t), where t ∈ i is the obvious membership
predicate. A on i means that A holds at each point in the
interval i. This treatment of time in the logic draws ideas
from work on hybrid modal logic [20]–[22].
I
Security properties of programs are expressed in LS2
using one of two forms of modal formulas. The principal
of these, [P]tb,te
A, means that formula A holds whenever
thread I executes exactly the program P sequentially in the
semi-open interval (tb,te]. A may mention any variables
occurring unbound in P. It usually expresses a safety
property about the program P. For example, if P is the
client program of a key exchange protocol, A may say
that P generated a key after tb, sent it to a server, and
received a conﬁrmation that it was received. Examples of
security properties for trusted computing systems can be
found in Section 4.
Proof System.
Security properties of a program are
established using a proof system for LS2. This proof
system contains some basic rules for reasoning about
modal formulas, and a number of axioms that capture
intuitive properties of program behavior. Parts of the proof
system, particularly the part dealing with cryptographic
primitives were easily designed using existing ideas from
PCL. As mentioned in the introduction, a central design
goal that LS2 achieves is that the proof system does not
mention adversary actions. We elaborate below on the
Action Predicates
R
General Predicates M
::= Receive(I,e) | Send(I,e) | Sign(I,e,K) | Verify(I,e,K) | Encrypt(I,e,K) | Decrypt(I,e,K) |
SymEncrypt(I,e,K) | SymDecrypt(I,e,K) | Hash(I,e) | Eval(I, f ,e,e(cid:48)) | Match(I,e,e(cid:48)) |
New(I,n) | Write(I,l,e) | Read(I,l,e) | Lock(I,l) | Unlock(I,l) | Extend(I,l,e)
::= Mem(l,e) | IsLocked(l,I) | Reset(m,I) | Jump(I,e) | LateLaunch(m,I) | Contains(e,e(cid:48)) |
e = e(cid:48) | t ≥ t(cid:48) | Honest( ˆX,(cid:126)P)