取出token字`function`、类型函数（Token::FUNCTION），接下来判断该函数属于哪种类型（FunctionKind），FunctionKind的具体代码如下：
    enum FunctionKind : uint8_t {
      // BEGIN constructable functions
      kNormalFunction,
      kModule,
      kAsyncModule,
    //.................................
    //省略了很多代码
    //.................................
      // END concise methods 1
      kAsyncGeneratorFunction,
      // END async functions
      kGeneratorFunction,
      // BEGIN concise methods 2
      kConciseGeneratorMethod,
      kStaticConciseGeneratorMethod,
      // END generators
      kConciseMethod,
      kStaticConciseMethod,
      kClassMembersInitializerFunction,
      kClassStaticInitializerFunction,
      // END concise methods 2
      kInvalid,
      kLastFunctionKind = kClassStaticInitializerFunction,
    };
不要混淆FunctionKind和Token::FUNCTION的概念，它们属于不同技术领域，Token属于编译技术，FunctionKind属于ECMA规范。在样例代码中，Token字`function`的FunctionKind是`KnormalFunction`,所以下一步是分析这个函数的名字（Token::IDENTIFIER），代码如下：
    const AstRawString* Scanner::CurrentSymbol(
        AstValueFactory* ast_value_factory) const {
      if (is_literal_one_byte()) {
        return ast_value_factory->GetOneByteString(literal_one_byte_string());
      }
      return ast_value_factory->GetTwoByteString(literal_two_byte_string());
    }
在`CurrentSymbol()`方法中，进行`one_byte`判断，JsPrint是one_byte类型，`if`语句为真，返回标识符。图1给出了`CurrentSymbol()`方法的函数调用堆栈，方便读者复现代码执行过程。
至此，两个Token字`function`和`JsPrint`语法分析完成，通俗概述以上代码的工作流程如下：
**（1）：** 在Javascript源码中，当看到’function’这个字符时，后面应该是一个函数；
**（2）：** 判断这个函数类型(FunctionKind)，是异步或其它等等，样例代码是kNormalFunction；
**（3）：** 是kNormalFunction，去获取函数的名字。
###  3.2 延迟分析
什么是延迟分析，延迟分析是V8中一种性能优化技术，即非立即执行的代码先不分析，执行时再做分析。众所周知，一个程序中，代码执行是有先后顺序的，也并不是所有代码都会执行，基于这一点，V8内部实现了延迟分析、延迟编译技术，达到提高效率的目的。下面讲解样例代码为什么会触发延迟分析。  
JsPrint是一个常规(kNormalFunction)方法，取得函数名之后，开始分析函数内容，代码如下：
    FunctionLiteral* Parser::ParseFunctionLiteral(
        const AstRawString* function_name, Scanner::Location function_name_location,
        FunctionNameValidity function_name_validity, FunctionKind kind,
        int function_token_pos, FunctionSyntaxKind function_syntax_kind,
        LanguageMode language_mode,
        ZonePtrList* arguments_for_wrapped_function) {
      bool is_wrapped = function_syntax_kind == FunctionSyntaxKind::kWrapped;
      DCHECK_EQ(is_wrapped, arguments_for_wrapped_function != nullptr);
      int pos = function_token_pos == kNoSourcePosition ? peek_position()
                                                        : function_token_pos;
      DCHECK_NE(kNoSourcePosition, pos);
      bool should_infer_name = function_name == nullptr;
      if (should_infer_name) {
        function_name = ast_value_factory()->empty_string();
      }
      FunctionLiteral::EagerCompileHint eager_compile_hint =
          function_state_->next_function_is_likely_called() || is_wrapped
              ? FunctionLiteral::kShouldEagerCompile
              : default_eager_compile_hint();
      DCHECK_IMPLIES(parse_lazily(), info()->flags().allow_lazy_compile());
      DCHECK_IMPLIES(parse_lazily(), has_error() || allow_lazy_);
      DCHECK_IMPLIES(parse_lazily(), extension() == nullptr);
      const bool is_lazy =
          eager_compile_hint == FunctionLiteral::kShouldLazyCompile;
      const bool is_top_level = AllowsLazyParsingWithoutUnresolvedVariables();
      const bool is_eager_top_level_function = !is_lazy && is_top_level;
      const bool is_lazy_top_level_function = is_lazy && is_top_level;
      const bool is_lazy_inner_function = is_lazy && !is_top_level;
      RCS_SCOPE(runtime_call_stats_, RuntimeCallCounterId::kParseFunctionLiteral,
                RuntimeCallStats::kThreadSpecific);
      base::ElapsedTimer timer;
      if (V8_UNLIKELY(FLAG_log_function_events)) timer.Start();
      const bool should_preparse_inner = parse_lazily() && is_lazy_inner_function;
      bool should_post_parallel_task =
          parse_lazily() && is_eager_top_level_function &&
          FLAG_parallel_compile_tasks && info()->parallel_tasks() &&
          scanner()->stream()->can_be_cloned_for_parallel_access();
      // This may be modified later to reflect preparsing decision taken
      bool should_preparse = (parse_lazily() && is_lazy_top_level_function) ||
                             should_preparse_inner || should_post_parallel_task;
      ScopedPtrList body(pointer_buffer());
      int expected_property_count = 0;
      int suspend_count = -1;
      int num_parameters = -1;
      int function_length = -1;
      bool has_duplicate_parameters = false;
      int function_literal_id = GetNextFunctionLiteralId();
      ProducedPreparseData* produced_preparse_data = nullptr;
      Zone* parse_zone = should_preparse ? &preparser_zone_ : zone();
      DeclarationScope* scope = NewFunctionScope(kind, parse_zone);
      SetLanguageMode(scope, language_mode);
    #ifdef DEBUG
      scope->SetScopeName(function_name);
    #endif
      if (!is_wrapped && V8_UNLIKELY(!Check(Token::LPAREN))) {
        ReportUnexpectedToken(Next());
        return nullptr;
      }
      scope->set_start_position(position());
      bool did_preparse_successfully =
          should_preparse &&
          SkipFunction(function_name, kind, function_syntax_kind, scope,
                       &num_parameters, &function_length, &produced_preparse_data);
      if (!did_preparse_successfully) {
        if (should_preparse) Consume(Token::LPAREN);
        should_post_parallel_task = false;
        ParseFunction(&body, function_name, pos, kind, function_syntax_kind, scope,
                      &num_parameters, &function_length, &has_duplicate_parameters,
                      &expected_property_count, &suspend_count,
                      arguments_for_wrapped_function);
      }
      if (V8_UNLIKELY(FLAG_log_function_events)) {
        double ms = timer.Elapsed().InMillisecondsF();
        const char* event_name =
            should_preparse
                ? (is_top_level ? "preparse-no-resolution" : "preparse-resolution")
                : "full-parse";
        logger_->FunctionEvent(
            event_name, flags().script_id(), ms, scope->start_position(),
            scope->end_position(),
            reinterpret_cast(function_name->raw_data()),
            function_name->byte_length(), function_name->is_one_byte());
      }
    #ifdef V8_RUNTIME_CALL_STATS
      if (did_preparse_successfully && runtime_call_stats_ &&
          V8_UNLIKELY(TracingFlags::is_runtime_stats_enabled())) {
        runtime_call_stats_->CorrectCurrentCounterId(
            RuntimeCallCounterId::kPreParseWithVariableResolution,
            RuntimeCallStats::kThreadSpecific);
      }
    #endif  // V8_RUNTIME_CALL_STATS
      language_mode = scope->language_mode();
      CheckFunctionName(language_mode, function_name, function_name_validity,
                        function_name_location);
      if (is_strict(language_mode)) {
        CheckStrictOctalLiteral(scope->start_position(), scope->end_position());
      }
      FunctionLiteral::ParameterFlag duplicate_parameters =
          has_duplicate_parameters ? FunctionLiteral::kHasDuplicateParameters
                                   : FunctionLiteral::kNoDuplicateParameters;
      FunctionLiteral* function_literal = factory()->NewFunctionLiteral(
          function_name, scope, body, expected_property_count, num_parameters,
          function_length, duplicate_parameters, function_syntax_kind,
          eager_compile_hint, pos, true, function_literal_id,
          produced_preparse_data);
      function_literal->set_function_token_position(function_token_pos);
      function_literal->set_suspend_count(suspend_count);
      RecordFunctionLiteralSourceRange(function_literal);
      if (should_post_parallel_task) {
        // Start a parallel parse / compile task on the compiler dispatcher.
        info()->parallel_tasks()->Enqueue(info(), function_name, function_literal);
      }
      if (should_infer_name) {
        fni_.AddFunction(function_literal);
      }
      return function_literal;
    }
`ParseFunctionLiteral()`，这个方法名字表明了它的主要功能是对函数内容进行语议分析。名字JsPrint分析完成后，进入这个方法分析JsPrint函数的内容，先判断这个方法是否符合延迟分析条件。
图2是样例代码，可以看出`JsPrint`不会马上执行，并且它是最外部的顶层方法，满足延迟分析条件。从Javascript的执行顺序也可以得到同样的结论：定义JsPrint函数，但代码执行时最先执行的是`console.log()`，`console.log()`执行时需要先计算参数并压栈，所以说JsPrint不是立即执行的，而`console.log()`执行时调用了JsPrint,所以它满足延迟分析条件。
调试程序是最有效的验证手段，从代码的角度验证上述结论是否正确，
请读者跟踪`ParseFunctionLiteral()`方法，并查看`is_lazy`和`is_top_level`成员的值，看到这两个成员的值为真，上述结论正确无误，图3给出`ParseFunctionLiteral()`的调用堆栈，便于读者复现代码执行过程。
下面给出`JsPrint()`的抽象语法图，供读者分析学习，如图4。
总结，语法分析器代码逻辑十分复杂，分析代码时做好堆栈记录，有助于在跟踪代码中发生“跟错、跟丢”问题时快速帮你找到最近的正确位置，提高学习效率。
好了，今天到这里，下次见。
**微信：qq9123013 备注：v8交流 邮箱：[PI:EMAIL](mailto:PI:EMAIL)**