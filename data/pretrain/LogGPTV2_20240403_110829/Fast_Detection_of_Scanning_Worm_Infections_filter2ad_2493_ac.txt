with a ﬁrst-contact connection rate consistently greater than one request per
second is a worm.
The constant of 10 was chosen for the starting credit balance (and for the
equilibrium minimum credit balance for benign hosts with ﬁrst-contact connec-
←−−
tion rates below 5 requests/second) in order to match the requirements of our
sequential hypothesis test (
HT ) as currently conﬁgured (see parameters in Sec-
tion 4), which itself requires a minimum of 10 observations in order to conclude
←−−
that a host is engaged in scanning. Slowing the rate at which the ﬁrst 10 observa-
←−−
HT to conclude that
tions can be obtained will only delay the time required by
a host is engaged in scanning. Should the parameters of
HT be reconﬁgured and
the minimum number of observations required to conclude a host is a scanner
change, the starting credit balance for rate-limiting can be changed to match it.
4 Experimental Setup
We evaluated our algorithms using two traces collected at the peering link of a
medium sized ISP; one collected in April 2003 (isp-03) containing 404 active
hosts and the other in January 2004 (isp-04) containing 451 active hosts. These
traces, summarized in Table 1, were collected using tcpdump.
Obtaining usable traces was quite diﬃcult. Due to privacy concerns, network
administrators are particularly loathe to share traces, let alone those that contain
payload data in addition to headers. Yet, we required the payload data in order
to manually determine which, if any, worm was present on a host that was ﬂagged
as infected.
In conﬁguring our reverse sequential hypothesis test (
To best simulate use of our algorithm in a worm detection system that is
used to quarantine hosts, we only tested local hosts for infection. Remote hosts
were not tested.
←−−
HT ), ﬁrst-contact con-
nection requests were interpreted as failures if they were not acknowledged within
a three second grace period. First-contact connection requests for which TCP
RST packets were received in response were immediately reported as failure
observations. Connection success probability estimates were chosen to be:
θ0 = 0.7
θ1 = 0.1
Fast Detection of Scanning Worm Infections
71
Table 1. Summary of network traces
Date
Duration
Total outbound
connection attempts
Total active local host
isp-03
isp-04
2003/04/10 2004/01/28
627 minutes 66 minutes
1,402,178
178,518
404
451
Conﬁdence requirements were set to:
α = 0.00005
β = 0.99
Note that these conﬁdence requirements are for each reverse sequential hy-
pothesis test, and that a test is performed for each ﬁrst-contact connection that
is observed. Therefore, the false positive rate is chosen to be particularly low as
testing will occur many times for each host.
For each local host we maintained a Previously Contacted Host (PCH) set of
only the last 64 destination addresses that each local host had communicated
with (LRU replacement). For the sake of the experiment, a ﬁrst-contact connec-
tion request was any TCP SYN packet or UDP packet addressed to a host that
was not in the local host’s PCH set. While using a ﬁxed sized PCH set demonstrates
the eﬃcacy of our test under the memory constraints that are likely to occur
when observing large (e.g. class B) networks, this ﬁxed memory usage comes at
a cost. As described in Section 6, it is possible for a worm to exploit limitations
in the PCH set size in order to avoid having its scans detected.
For sake of comparison, we also implemented Twycross and Williamson’s
‘virus throttle’ as described in [22]. Since our traces contain only those packets
seen at the peering point, our results may diﬀer from a virus throttle imple-
mented at each local host as Twycross and Williamson recommend. However,
because observing connections farther from the host results in a reduction in
the number of connections observed, it should only act to reduce the reported
number of false positives in which benign behavior is throttled.
All algorithms were implemented in Perl, and used traces that had been
pre-processed by the Bro Network Intrusion Detection System [13, 12].
We did not observe FTP-DATA, finger, and IDENT connections as these con-
nections are the result of local hosts responding to remote hosts, and are not
likely to be accepted by a host that has not issued a request for such a connection.
These connections are thus unlikely to be useful for worm propagation.
5 Results
Our reverse sequential hypothesis test detected two hosts infected with CodeRed
II [4, 20] from the April, 2003 trace (isp-03). Our test detected one host infected
with Blaster/Lovsan [5], three hosts infected with MyDoom/Novarg [11, 21], and
one host infected with Minmail.j [6] from the January, 2004 trace (isp-04).
72
Stuart E. Schechter, Jaeyeon Jung, and Arthur W. Berger
Table 2. Alarms reported by reverse sequential hypothesis testing combined with
credit-based rate limiting. The cause of each alarm was later identiﬁed manually by
comparing observed traﬃc to signature behaviors described at online virus libraries
Worms/Scanners detected
CodeRed II
Blaster
MyDoom
Minmail.j
HTTP (other)
Total
False alarms
HTTP
SMTP
Total
P2P detected
Total identiﬁed
isp-03 isp-04
2
0
0
0
3
5
0
0
0
6
11
0
1
3
1
1
6
3
3
6
11
23
Table 3. Alarms reported by virus throttling
Worms/Scanners detected
CodeRed II
MyDoom
HTTP (other)
Total
False alarms
P2P detected
Total identiﬁed
isp-03 isp-04
2
0
1
3
0
2
5
0
1
1
2
0
3
5
The worms were conclusively identiﬁed by painstakingly comparing the logged
traﬃc with the cited worm descriptions at various online virus/worm information
libraries. Our test also identiﬁed four additional hosts that we classify as HTTP
scanners because each sent SYN packets to port 80 of at least 290 addresses
within a single class B network. These results are summarized in Table 2.
While peer-to-peer applications are not necessarily malicious, many network
administrators would be loathe to classify them as benign. Peer-to-peer ﬁle shar-
ing applications also exhibit ambiguous network behavior, as they attempt to
contact a large number of transient peers that are often unwilling or unavailable
to respond to connection requests. While peer-to-peer clients are deemed unde-
sirable on most of the corporate networks that we envision our approach being
used to protect, it would be unfair to classify these hosts as infected. For this
reason we place hosts that we detect running peer-to-peer applications into their
own category. Even if detections of these hosts are classiﬁed as false alarms, the
number of alarms is manageable.
Fast Detection of Scanning Worm Infections
73
Table 4. Composite results for both traces. A total of 7 HTTP scanning worms and
5 email worms were present
←−−
HT
virus-throttling
Alarms Detection Eﬃciency Eﬀectiveness
0.917
0.417
0.324
0.500
11
5
34
10
Table 5. Comparison of rate limiting by credit-based connection rate limiting
(CBCRL) vs. a virus throttle. Unnecessary rate limiting means that CBCRL dropped
at least one packet from a host. For virus throttling, we only classify a host as rate
limited if the delay queue reaches a length greater than ﬁve
Worms/Scanners
P2P
Unnecessary rate limiting
CBCRL
Virus Throttling
isp-03 isp-04 isp-03 isp-04
4
7
59
3
3
84
1
8
0
5
4
0
Three additional false alarms were reported for three of the 60 (isp-04) total
hosts transmitting SMTP traﬃc. We suspect the false alarms are the result of
bulk retransmission of those emails that have previously failed when the recipi-
ents’ mail servers were unreachable. We suggest that organizations may want to
white-list their SMTP servers, or signiﬁcantly increase the detection thresholds
for this protocol.
The remaining three false alarms are speciﬁc to the isp-04 trace, and resulted
from HTTP traﬃc. It appears that these false alarms were raised because of
a temporary outage at a destination network at which multiple remote hosts
became unresponsive. These may have included servers used to serve inlined
images.
Upon discovering these failures, we came to realize that it would be possible
for an adversary to create Web sites that served pages with large numbers of
inlined image tags linked to non-responsive addresses. If embedded with scripts,
these sites might even be designed to perform scanning of the client’s network
from the server. Regardless, any client visiting such a site would appear to be
engaged in HTTP scanning. To prevent such denial of service attacks from ren-
dering a worm detection system unusable, we require a mechanism for enabling
users to deactivate quarantines triggered by HTTP requests. We propose that
HTTP requests from such hosts be redirected to a site that uses a CAPTCHA
(Completely Automated Public Turing Test to Tell Computers and Humans
Apart [23]), to conﬁrm that a user is present and was using a Web browser at
the time of quarantine.
Results for our implementation of Twycross and Williamson’s virus throt-
tle [22] are summarized in Table 3. Their algorithm blocked both instances of
CodeRed II, but failed to detect Blaster, three instances of MyDoom (which is
←−−
admittedly an email worm and not an IP scanning worm), and two low rate
HTTP scanners. It did, however, detect one host infected with MyDoom that
HT
failed to detect. The virus throttle also detected fewer hosts running peer-to-peer
74
Stuart E. Schechter, Jaeyeon Jung, and Arthur W. Berger
Table 6. The number of ﬁrst-contact connections permitted before hosts were reported
as infected. The value pairs represent individual results for two diﬀerent CodeRed II
infections and two diﬀerent HTTP scanners
←−−
HT with CBCRL Virus Throttling
CodeRed II
Other HTTP scanners
10,10
10,10
6,7
102,526
applications, which for fairness we classify as a reduction in false alarms in virus
throttling’s favor in our composite results summarized in Table 4.
These composite results for both traces report the number of hosts that
resulted in alarms and the number of those alarms that were detections of the 12
worms located in our traces. We also include the eﬃciency, which is the number
of detections over the total number of alarms, and the eﬀectiveness, which is
←−−
the total number of detections over the total number of infected hosts we have
found in these traces. While
HT is somewhat less eﬃcient than virus throttling,
the more than two-fold increase in eﬀectiveness is well worth the trade-oﬀ. In
addition, corporate networks that forbid peer-to-peer ﬁle sharing applications
will see a two-fold increase in eﬃciency.
Table 5 shows the number of hosts that had connection requests blocked by
our credit-based algorithm and the number of hosts that were rate limited by
Twycross and Williamson’s algorithm. For credit-based connection rate limiting,
we say that a machine has been rate limited if a single packet is dropped. For
the virus throttle, we say that a machine has been rate limited if the outgoing
delay queue length is greater than ﬁve, giving Twycross and Williamson the
beneﬁt of the doubt that users won’t notice unless connections are severely
throttled. Our credit-based algorithm only limited the rates of hosts that our
reverse sequential hypothesis test reported as infected. In contrast, even given
our generous deﬁnition, more than 10% of the hosts in both traces were rate
limited by Twycross and Williamson’s algorithm.
Table 6 reports the number of ﬁrst-contact connections permitted by the two
approaches for those scanners that both detected. CodeRed II is a fast scanner,
and so virus throttling excels in blocking it after 6 to 7 connection requests.
This speed is expected to come at the price of detecting any service, malicious
or benign, that issues high-rate ﬁrst-contact connections.
Reverse Sequential Hypothesis Testing with credit-based connection rate lim-
iting detects worms after a somewhat higher number of ﬁrst-contact connections
are permitted (10), but does so regardless of the scanning rate. Whereas our ap-
proach detects a slow HTTP scanner after 10 ﬁrst-contact connection requests,
the virus throttle requires as many as 526.
6 Limitations
Credit-based connection rate limiting is resilient to network uplink outages as
hosts starved for credits will receive an allowance credit seconds after the network
←−−
is repaired. Unfortunately, this will be of little consolation as Reverse Sequential
HT ) may have already concluded that all hosts are scanners.
Hypothesis Testing(
Fast Detection of Scanning Worm Infections
75
This may not be a problem if network administrators are given the power to
invalidate observations made during the outage period, and to automatically
reverse any quarantining decisions that would not have been taken without these
invalid observations.
Of greater concern is that both Reverse Sequential Hypothesis Testing and
credit-based connection rate limiting rely exclusively on the observation that
hosts engaged in scanning will have lower ﬁrst-contact connection success rates
than benign hosts. New hypotheses and tests are required to detect worms for
which this statistical relationship does not hold.
In particular, our approach is not likely to detect a topological worm, which
scans for new victim hosts by generating a list of addresses that the infected host
has already contacted. Nor is our approach likely to detect ﬂash worms, which
contain hit-lists of susceptible host addresses identiﬁed by earlier scans.
Also problematic is that two instances of a worm on diﬀerent networks could
collaborate to ensure that none of their ﬁrst-contact connections will appear
to fail. For example, if worm A does not receive a response to a ﬁrst-contact