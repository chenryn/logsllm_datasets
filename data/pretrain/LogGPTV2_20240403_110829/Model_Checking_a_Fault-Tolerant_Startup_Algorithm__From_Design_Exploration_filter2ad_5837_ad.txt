### Two Nodes and Model-Checking Studies

Model-checking studies have confirmed the necessity and correctness of the proposed mechanism. However, there are scenarios similar to the one described that are not directly addressed by the algorithm. Specifically, these scenarios involve nodes starting up on a single faulty guardian (believing the other guardian to be unavailable), with only a subset of them achieving synchronous operation. In practice, such scenarios are mitigated by ensuring that the guardians are operational before the nodes. The algorithm can handle a faulty guardian as long as the other guardian is available at the start of its operation.

### Bounded and Symbolic Model Checkers in SAL 2.0

SAL 2.0 provides both bounded and symbolic model checkers. Bounded model checkers, which are based on propositional satisfiability (SAT) solvers, are specialized for detecting bugs. They explore models only to a specified, bounded depth and can be faster than symbolic model checkers, which effectively explore the entire state space. Bounded model checking offers an additional analytical tool: developers can explore increasing depths with a bounded model checker and switch to the "unbounded" depth of a symbolic model checker once all shallow bugs have been detected and eliminated.

In our big-bang experiments, the SAL bounded model checker was sometimes more efficient than the symbolic one at exposing failing scenarios. For example, it found a violation of the Safety 2 property in a 5-node system at depth 13 in 93 seconds (solving a SAT problem with 405,398 nodes), whereas the symbolic model checker required 127 seconds (for a model with 682 BDD variables).

### Worst-Case Startup Scenarios

We define the worst-case startup time, \( \tau_{\text{wcsup}} \), as the maximum duration between two or more non-faulty nodes entering the LISTEN or COLDSTART states and one or more non-faulty nodes reaching the ACTIVE state. We explored worst-case startup times by model-checking the timeliness property for different values of `@par startuptime`, setting it first to a small explicit value (e.g., 12) and increasing it by small steps (e.g., 1) until no counterexamples were produced. By examining different cases and cluster sizes, we developed an understanding of the worst-case scenarios.

The deduced formula for the worst-case startup time \( \tau_{\text{wcsup}} \) (which occurs when there is a faulty node) is given by:
\[
\tau_{\text{wcsup}} = \tau_{\text{listen,max}} - 1 + \tau_{\text{slot,max}} - 1 + 2 \times \tau_{\text{coldstart}}
= 3 \times \tau_{\text{round}} - 2 \times \tau_{\text{slot}} + 2 \times (2 \times \tau_{\text{round}} - 2 \times \tau_{\text{slot}}) + \tau_{\text{slot}}
= 7 \times \tau_{\text{round}} - 5 \times \tau_{\text{slot}}
\]

### Automated Verification and Exhaustive Fault Simulation

During the exploration of the algorithm, we considered modest cluster sizes and fault degrees. For verification, we examined larger clusters and exhaustive modeling of faults. The term "exhaustive fault simulation" is used analogously to fault injection, as defined in [7]. While fault injection involves inserting faults into physical systems, fault simulation models faulty behavior mathematically. Exhaustive fault simulation means that all hypothesized fault modes are modeled, and all their possible scenarios are examined. In our case, this means model-checking our model of the startup algorithm with the fault degree set to 6. A desirable goal is to check all properties for a reasonable-sized cluster (say 5 nodes) overnight (say 12 hours, or 43,200 seconds). This section provides formulas to estimate the number of scenarios under test for exhaustive fault simulation and reports the performance achieved.

#### Different Startup Delays

Given a system of \( n \) nodes and 2 guardians, where each of the nodes and one of the guardians is allowed to start up at an instant during a period of \( \delta_{\text{init}} \), the number of scenarios, \( |S_{\text{sup}}| \), based on these different startup times is given by:
\[
|S_{\text{sup}}| = (\delta_{\text{init}})^{n+1}
\]

#### Worst-Case Startup Scenarios with a Faulty Node

Given the worst-case startup time of the system \( \tau_{\text{wcsup}} \) and the fault degree of a faulty node \( \delta_{\text{fault}} \), the number of scenarios for one particular startup pattern of nodes and hubs, \( |S_{\text{f.n.}}| \), is given by:
\[
|S_{\text{f.n.}}| = (\delta_{\text{fault}}^2)^{\tau_{\text{wcsup}}}
\]
Numerical estimates for these parameters are provided in Figure 5 (with \( \delta_{\text{fault}} = 6 \)).

| Nodes | \( \delta_{\text{init}} \) (slots) | \( |S_{\text{sup}}| \) | \( \tau_{\text{wcsup}} \) (slots) | \( |S_{\text{f.n.}}| \) |
|-------|---------------------------------|---------------------|-------------------------------|----------------------|
| 3     | 24                              | 3.3 × 10^5           | 16                            | 8 × 10^24            |
| 4     | 32                              | 3.3 × 10^7           | 23                            | 6 × 10^35            |
| 5     | 40                              | 4.1 × 10^9           | 30                            | 4.9 × 10^46          |

**Figure 5. Number of Scenarios for Different Fault Degrees**

The SAL symbolic model checker can count the number of reachable states in a model. For the model used in the big-bang tests, these numbers were 1,084,122,880 states for 3 nodes, 508,573,786,112 for 4, and 259,220,300,300,290 for 5; these are approximately \( 2^{27} \), \( 2^{35} \), and \( 2^{43} \) states, respectively, in reasonable agreement with Figure 5.

### Performance Results for Model Checking the Lemmas

Figures 6(a), 6(b), and 6(c) present the model checker performance for Lemmas 1, 2, and 3 in the presence of a faulty node with fault degree \( \delta_{\text{fault}} = 6 \) and startup delay \( \delta_{\text{init}} = 8 \times \tau_{\text{round}} \). The feedback column indicates whether the feedback optimization was turned on or off. Figure 6(d) presents the results for Lemma 4 in the presence of a faulty hub with startup delay \( \delta_{\text{init}} = 8 \times \tau_{\text{round}} \). Results are shown for models with 3, 4, and 5 nodes. The eval column indicates if the respective lemma is satisfied.

The CPU time column gives the execution time of the corresponding model-checking run, while the BDD column gives the number of BDD variables for the model (equivalent to the number of state bits after eliminating those that are simple combinations of others). Typically, 300 or so state bits are considered the realm of "industrial" model checking, where skilled tinkering may be needed to obtain a result in a reasonable time. Yet, all these results were obtained with no special efforts beyond those described.

**Figure 6. Performance Results for Model Checking the Lemmas**

### Conclusion

We have presented the verification model and results of a model-checking study for a new startup algorithm for the TTA. The startup algorithm guarantees a safe and timely system startup in the presence of one faulty component. Our model-checking experiments showed the robustness of the algorithm in the presence of a faulty node or a faulty hub. We described modeling concepts for abstracting the problem to discrete time and for exhaustive fault simulation. The resulting models have billions or even trillions of reachable states, yet the symbolic model checker of SAL is able to examine these in a few tens of minutes (for billions of states) or hours (for trillions). This combination of an effective modeling approach and an efficient tool allowed us to use model checking over an exhaustive fault model in the design loop for the algorithm and also helped us establish the worst-case startup times. Thus, this approach extends previous experiments in model-checking fault-tolerant algorithms by vastly increasing the number of scenarios considered, while achieving performance that allows the method to be used in design exploration as well as for verification.

Ongoing design work is focused on shifting complexity from the guardian algorithms to the node algorithms to eliminate the need for interlink connections. In ongoing formal methods studies, we are exploring the use of the infinite-bounded model checker of SAL (which combines a SAT solver with decision procedures for theories including real arithmetic) to develop and analyze models that use continuous time, while still allowing rich fault models. We are also using the PVS theorem prover to formally verify the algorithm and its fault hypothesis in their most general forms.

### References

[1] A. Ademaj, G. Bauer, H. Sivencrona, and J. Torin. Evaluation of fault handling of the Time-Triggered Architecture with bus and star topology. In Proc. of International Conference on Dependable Systems and Networks (DSN 2003), San Francisco, Jun. 2003.

[2] G. Bauer, H. Kopetz, and P. Puschner. Assumption Coverage under Different Failure Modes in the Time-Triggered Architecture. In Proc. of International Conference on Emerging Technologies and Factory Automation, pages 333–341, Oct. 2001.

[3] G. Bauer, H. Kopetz, and W. Steiner. The central guardian approach to enforce fault isolation in a time-triggered system. In Proc. of 6th International Symposium on Autonomous Decentralized Systems (ISADS 2003), pages 37 – 44, Pisa, Italy, Apr. 2003.

[4] C. Bernardeschi, A. Fantechi, and S. Gnesi. Model checking fault tolerant systems. Software Testing, Verification and Reliability, 12:251–275, Dec. 2002.

[5] L. de Moura, S. Owre, H. Ruess, J. Rushby, N. Shankar, M. Sorea, and A. Tiwari. SAL 2. To be presented at CAV 2004, July 2004. Available at http://www.csl.sri.com/˜rushby/abstracts/sal-tool.

[6] B. Dutertre and M. Sorea. Timed systems in SAL. Technical report, Computer Science Laboratory, SRI International, Menlo Park, CA, 2004. In preparation.

[7] J.C. Laprie. Dependability: Basic Concepts and Terminology. Springer-Verlag, 1992.

[8] H. Kopetz. Fault containment and error detection in the Time-Triggered Architecture. In Proc. of The 6th International Symposium on Autonomous Decentralized Systems (ISADS 2003), pages 139–146, Pisa, Italy, Apr. 2003.

[9] H. Lönne and P. Pettersson. Formal verification of a TDMA protocol start-up mechanism. In Pacific Rim International Symposium on Fault-Tolerant Systems, pages 235–242, Taipei, Taiwan, Dec. 1997. IEEE Computer Society.

[10] H. Pfeifer, D. Schwier, and F. W. von Henke. Formal verification for time-triggered clock synchronization. In C. B. Weinstock and J. Rushby, editors, Dependable Computing for Critical Applications—7, volume 12 of Dependable Computing and Fault Tolerant Systems, pages 207–226, San Jose, CA, Jan. 1999. IEEE Computer Society.

[11] W. Steiner and M. Paulitsch. The transition from asynchronous to synchronous system operation: An approach for distributed fault-tolerant systems. In The 22nd International Conference on Distributed Computing Systems, pages 329–336, Vienna, Austria, July 2002. IEEE Computer Society.

[12] W. Steiner, M. Paulitsch, and H. Kopetz. Multiple failure correction in the Time-Triggered Architecture. Proc. of 9th Workshop on Object-oriented Real-time Dependable Systems (WORDS 2003f), Oct. 2003.

[13] W. Steiner, J. Rushby, M. Sorea, and H. Pfeifer. SAL model of a TTA startup algorithm. Research Report 52/2003, Technische Universität Wien, Institut für Technische Informatik, Treitlstr. 1-3/182-1, 1040 Vienna, Austria, 2003.

[14] T. Yokogawa, T. Tsuchiya, and T. Kikuno. Automatic verification of fault tolerance using model checking. In Proc. of 2001 Pacific Rim International Symposium on Dependable Computing, page 95, Seoul, Korea, Dec. 2001.

---

**Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04)  
0-7695-2052-9/04 $ 20.00 © 2004 IEEE  
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19, 2021, at 12:29:32 UTC from IEEE Xplore. Restrictions apply.**