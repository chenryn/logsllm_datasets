### 数据汇总

| 指标 | 值 |
| --- | --- |
| 4813.028 |  |
| 1.381 |  |
| 0.874 |  |
| 0.644 |  |
| 13.409 |  |
| **平均值** |  |
| Ovh (%) | 4.689 |
| Dev (%) | 9.938 |
| 35.952 |  |
| 12.225 |  |
| 4.821 |  |
| 1.940 |  |
| 4.876 |  |
| 1.338 |  |
| 0.107 |  |
| 2.34 |  |
| 0.260 |  |
| 0.607 |  |
| 8.917 |  |
| 8.957 |  |
| 27.255 |  |
| 5.746 |  |
| 6.77 |  |

### 时间数据 (ms)

| 测试 | T1 | T2 | T3 |
| --- | --- | --- | --- |
| 1 | 4.287 | 4.179 | 4.059 |
| 2 | 3.054 | 3.003 | 2.845 |
| 3 | 9960.311 | 9815.837 | 10146.534 |
| 4 | 5155.958 | 5103.789 | 5224.345 |
| 5 | 1.337 | 1.392 | 1.333 |
| 6 | 0.863 | 0.879 | 0.887 |
| 7 | 0.667 | 0.659 | 0.675 |
| 8 | 13.559 | 13.451 | 13.308 |

### ORAM 技术与私有存储

目前最知名的 ORAM 技术需要一个常量的私有存储来对数据块进行洗牌 [34]。在 SGX 环境中，如果发生鸽子洞攻击，私有存储不能永久提供给 enclave，并且操作系统可以通过页面错误探查私有内存上的操作。因此，基于 ORAM 的随机化需要额外的硬件支持以确保安全的常量私有存储。

### 自我分页

与其依赖操作系统进行页面管理，enclave 执行可以自行负责其内存管理。应用程序可以通过自我分页来处理自己的内存故障，使用自己的物理内存来存储页表 [26]。在自我分页的 CPU 设计中，所有分页操作都从内核中移除；内核仅负责调度故障通知。给定一定量的物理内存，enclave 可以决定哪些虚拟地址映射到该内存，以及哪些被交换出去。自我分页的问题在于：enclave 如何确保操作系统为其分配了物理页面？为保证这一点，enclave 应能够固定某些物理内存页，使得操作系统无法将其交换出去。这直接导致了一个拒绝服务攻击的可能性，因为 enclave 可以拒绝释放固定的页面。唯一的替代方法是通过硬件重置来重新获取所有 enclave 页面，这对操作系统来说是不希望的结果。另一种可能是 enclave 在没有假设固定私有物理内存的情况下执行自我分页，但这并不安全，因为操作系统仍然控制着分配给 enclave 的内存数量，保留了对其内存页面进行鸽子洞攻击的能力。在这两种情况下，存在一个困境——enclave 是否应该信任操作系统，反之亦然。因此，无论是否有固定物理内存，自我分页如何防御鸽子洞攻击尚不清楚。

### 相关工作

#### 对 Enclave 执行的攻击

徐等人最近展示了操作系统可以通过 SGX 系统上运行的应用程序的页面错误通道提取敏感信息 [51]。这些攻击主要针对一般的用户程序，如图像和文本处理。相反，我们研究的是加密实现，这是更相关的一类应用。更重要的是，我们表明讨论中的技术对于鸽子洞攻击无效。作为新的贡献，我们提出并测量了具体解决方案的有效性，以防止此类攻击对加密实现的影响。

#### 边信道攻击

Yarom 等人研究了缓存通道攻击，其中对手有权刷新和重载缓存，这可以用于攻击椭圆曲线密码例程，如 ECDSA [52]。时间攻击和缓存攻击已被用于绕过内核空间 ASLR [29]、VMs [30]、Android 应用程序 [31]、云服务器 [55] 和用户 [40]，无论是本地还是远程 [14]。即使 Web 浏览器也可以通过 JavaScript 的缓存攻击远程利用 [39]。

#### 边信道检测与防御

已经探索了多种边信道检测机制，从指令级分析到编译器技术 [16, 23, 53]。诸如 CacheQuant 之类的工具可以自动量化通过缓存边信道泄露的信息位 [33]。输入盲化、时间桶等技术也存在，但仅限于特定算法 [32]。通过确定性策略、控制流独立性和安全调度来缓解 hypervisor、云 VMs 和内核中的边信道攻击 [9, 38, 50, 56]。我们的确定性多路复用防御类似于为安全计算提出的内存跟踪不可知技术 [35]。

#### 随机化与自我分页防御

ORAM 技术广泛应用于安全计算和多方计算。近期的工作展示了安全语言、编译器技术和基于 hypervisor 的方法，这些方法使用 ORAM。如第 7.2 节所述，如果没有额外的硬件支持，ORAM 技术可能不足。另一方面，自我分页假设 enclave 将始终控制一个固定大小 [26]。如果任何一方违反此假设，则会打开从 enclave 发起 DOS 攻击和从操作系统发起鸽子洞攻击的可能性。

### 结论

我们系统地研究了鸽子洞攻击，这是一种在包括 Intel SGX、InkTag、OverShadow 和 PodArch 在内的安全执行平台中普遍存在的新威胁。通过对加密实现库的分析，我们展示了鸽子洞攻击的严重性。我们提出了一个纯粹的软件防御方法——确定性多路复用，并构建了一个编译器，使所有案例研究免受鸽子洞攻击。这种方法具有适度的开销，实际上是可以部署的。最后，我们提出了一种替代的基于硬件的解决方案，其平均开销为 6.77%。

### 致谢

本研究部分得到了新加坡国家研究基金会、总理办公室的支持，由国家网络安全 R&D 总监管理（资助号 NRF2014NCR-NCR001-21）。这项工作还部分得到了 Symantec 的研究资助。

### 参考文献

[略]

请参考原文献列表以获取完整引用信息。