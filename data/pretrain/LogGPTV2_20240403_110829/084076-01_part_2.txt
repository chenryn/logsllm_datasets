sha256:659bcc00764060582794181890c8b63d6bbf60e8d3da035f76aa2f4d261742d7
Deleted:
sha256:96163717e76d4b869461e39ed33c4e4066e7de44974557c6206d0f855fb58eb2
Deleted:
sha256:4a04bebd433278ce549d9e941c2fc3f14021a450ed8ecf58f79c1668b6b9e72e
Deleted:
sha256:5d65989598faa4ab6361db2655ab43866df88d850621d607474c165eefd6c73e
Deleted:
sha256:ea8d75cec9b5fc0baf635c584fe818ba9fb2264a30f7210da2c58cfd71cc53b8
Deleted:
sha256:c3d2357e9cbda84bc7feb1bbebbd3bd9bf6cd37b4415f8746f9cd95b8c11eb83
Deleted:
sha256:6dc63f7195aae9d4b6764094fe786e32d590851f9646434d29d4fd40acf1c8ef
Deleted:
sha256:03deec3a1538718aca4021e3f11293c55937fe1191e63a2c59948032e8ded166
Deleted:
sha256:de87bb7eb02235ddc48979aee72779582ccf07e6b68685d905f8444e3cb5ed94
Deleted:
sha256:7446f95fc910f657a872f3b99f4b0a91c8aa5471b90aa469a289d3b06f4be22c
Deleted:
sha256:e901da9c8b00dd031d9ab42623f149a5247b92d78bee375e22ecb67f3b5911c3
Deleted:
sha256:c9014ca736145dc855ed49b2d11e10fc68b1bcd94b2bf7fa43066d490ae0a7e3
Deleted:
sha256:f8a9cd62cbd033d5f0cc292698c2ace8f9ca2e322dced364a8b6cbc67dd5d279
Untagged:
dotbalo/nginx@sha256:deb5bcbfcedf451ddba3422a95b213613dc23c42ee6a63e746d09e040
e0cc7f8
第2章 Docker及Kubernetes基础 | 59
Deleted:
sha256:97c97cee03f9a552e4edf34766af09b7f6a74782776a199c5e7492971309158a
Deleted:
sha256:697f26740b36e9a5aee72a4ca01cc6f644b59092d49ae043de9857e09ca9637e
镜像打标签（tag）。用于区分不同版本的镜像：
[root@K8S-master01 K8S-ha-install]# docker images | grep nginx | tail -1
nginx
1.7.9 84581e99d807 3 years ago 91.7MB
#不加URL一般为公网仓库中自己的仓库
[root@K8S-master01 K8S-ha-install]# docker tag nginx dotbalo/nginx:v1
#加URL一般为公司内部仓库或者其他仓库
[root@K8S-master01 K8S-ha-install]# docker tag nginx
harbor.xxx.net/stage/nginx:v1
使用 dockerbuild 通过 Dockerfile 制作镜像。注意最后的一个点（.），表示使用当前目录的
Dockerfile：
dockerbuild-t image_name:image_tag .
上述演示的都是Docker常用的基本命令，已可以满足日常需求，如果读者想要深入了解，可
以参考Docker的相关资料。
2.1.3 Dockerfile 的编写
Dockerfile 是用来快速创建自定义镜像的一种文本格式的配置文件，在持续集成和持续部署
时，需要使用Dockerfile生成相关应用程序的镜像，然后推送到公司内部仓库中，再通过部署策略
把镜像部署到Kubernetes中。
通过Dockerfile提供的命令可以构建Dockerfile文件，Dockerfile的常用命令如下：
FROM：继承基础镜像
MAINTAINER：镜像制作作者的信息
RUN：用来执行shell命令
EXPOSE：暴露端口号
CMD：启动容器默认执行的命令，会被覆盖
ENTRYPOINT：启动容器真正执行的命令，不会被覆盖
VOLUME：创建挂载点
ENV：配置环境变量
ADD：复制文件到容器，一般拷贝文件，压缩包自动解压
COPY：复制文件到容器，一般拷贝目录
WORKDIR：设置容器的工作目录
USER：容器使用的用户
以下简单演示每个命令的使用方法。
使用RUN创建一个用户：
[root@DockerTestServer test]# cat Dockerfile
# base image
FROM centos:6
MAINTAINER dot
RUN useradd dot
60 | 再也不踩坑的Kubernetes实战指南
执行构建
docker build -t centos:user .
使用ENV定义环境变量并用CMD执行命令：
[root@DockerTestServer test]# cat Dockerfile
# base image
FROM centos:6
MAINTAINER dot
RUN useradd dot
RUN mkdir dot
ENV envir=test version=1.0
CMD echo "envir:$envir version:$version"
执行构建并启动测试：
#执行构建
docker build -t centos:env-cmd .
#启动镜像验证ENV和CMD
[root@DockerTestServer test]# docker run centos:env-cmd
envir:test version:1.0
使用ADD添加一个压缩包，使用WORKDIR改变工作目录：
# base image
FROM nginx
MAINTAINER dot
ADD ./index.tar.gz /usr/share/nginx/html/
WORKDIR /usr/share/nginx/html
使用COPY拷贝指定目录下的所有文件到容器，不包括本级目录。
此时只会拷贝webroot下的所有文件，不会将webroot拷贝过去：
# base image
FROM nginx
MAINTAINER dot
ADD ./index.tar.gz /usr/share/nginx/html/
WORKDIR /usr/share/nginx/html
COPY webroot/ .
设置启动容器的用户，在生产环境中一般不建议使用 root 启动容器，所以可以根据公司业务
场景自定义启动容器的用户：
# base image
FROM centos:6
MAINTAINER dot
ADD ./index.tar.gz /usr/share/nginx/html/
WORKDIR /usr/share/nginx/html
COPY webroot/ .
RUN useradd -m tomcat -u 1001
USER 1001
使用Volume创建容器可挂载点：
# base image
FROM centos:6
第2章 Docker及Kubernetes基础 | 61
MAINTAINER dot
VOLUME /data
挂载Web目录到/data，注意，对于宿主机路径，要写绝对路径：
docker run -ti --rm -v `pwd`/web:/data centos:volume bash
基础
2.2 Kubernetes
Kubernetes致力于提供跨主机集群的自动部署、扩展、高可用以及运行应用程序容器的平台，
其遵循主从式架构设计，其组件可以分为管理单个节点（Node）组件和控制平面组件。Kubernetes
Master是集群的主要控制单元，用于管理其工作负载并指导整个系统的通信。Kubernetes控制平面
由各自的进程组成，每个组件都可以在单个主节点上运行，也可以在支持高可用集群的多个节点上
运行。本节主要介绍Kubernetes的重要概念和相关组件。
2.2.1 Master 节点
Master 节点是 Kubernetes 集群的控制节点，在生产环境中不建议部署集群核心组件外的任何
Pod，公司业务的Pod更是不建议部署到Master节点上，以免升级或者维护时对业务造成影响。
Master节点的组件包括：
 APIServer。APIServer 是整个集群的控制中枢，提供集群中各个模块之间的数据交换，并
将集群状态和信息存储到分布式键-值（key-value）存储系统 Etcd 集群中。同时它也是集
群管理、资源配额、提供完备的集群安全机制的入口，为集群各类资源对象提供增删改
查以及watch的REST API接口。APIServer作为Kubernetes的关键组件，使用Kubernetes
API和 JSON over HTTP提供Kubernetes的内部和外部接口。
 Scheduler。Scheduler 是集群 Pod 的调度中心，主要是通过调度算法将 Pod 分配到最佳的
节点（Node），它通过 APIServer 监听所有 Pod 的状态，一旦发现新的未被调度到任何
Node节点的Pod（PodSpec.NodeName为空），就会根据一系列策略选择最佳节点进行调
度，对每一个Pod创建一个绑定（binding），然后被调度的节点上的Kubelet负责启动该
Pod。Scheduler是集群可插拔式组件，它跟踪每个节点上的资源利用率以确保工作负载不
会超过可用资源。因此 Scheduler 必须知道资源需求、资源可用性以及其他约束和策略，
例如服务质量、亲和力/反关联性要求、数据位置等。Scheduler 将资源供应与工作负载需
求相匹配以维持系统的稳定和可靠，因此 Scheduler 在调度的过程中需要考虑公平、资源
高效利用、效率等方面的问题。
 Controller Manager。Controller Manager是集群状态管理器（它的英文直译名为控制器管理
器），以保证Pod或其他资源达到期望值。当集群中某个Pod的副本数或其他资源因故障
和错误导致无法正常运行，没有达到设定的值时，Controller Manager 会尝试自动修复并
使其达到期望状态。Controller Manager 包含 NodeController、ReplicationController、
62 | 再也不踩坑的Kubernetes实战指南
EndpointController、NamespaceController、ServiceAccountController、ResourceQuotaController、
ServiceController和TokenController，该控制器管理器可与API服务器进行通信以在需要时
创建、更新或删除它所管理的资源，如Pod、服务断点等。
 Etcd。Etcd 由 CoreOS 开发，用于可靠地存储集群的配置数据，是一种持久性、轻量型、
分布式的键-值（key-value）数据存储组件。Etcd作为Kubernetes集群的持久化存储系统，
集群的灾难恢复和状态信息存储都与其密不可分，所以在Kubernetes高可用集群中，Etcd
的高可用是至关重要的一部分，在生产环境中建议部署为大于3的奇数个数的Etcd，以保
证数据的安全性和可恢复性。Etcd 可与 Master 组件部署在同一个节点上，大规模集群环
境下建议部署在集群外，并且使用高性能服务器来提高Etcd的性能和降低Etcd同步数据
的延迟。
2.2.2 Node 节点
Node节点也被称为Worker或Minion，是主要负责部署容器（工作负载）的单机（或虚拟机），
集群中的每个节点都必须具备容器的运行环境（runtime），比如Docker及其他组件等。
Kubelet作为守护进程运行在Node节点上，负责监听该节点上所有的Pod，同时负责上报该节
点上所有 Pod 的运行状态，确保节点上的所有容器都能正常运行。当 Node 节点宕机（NotReady
状态）时，该节点上运行的Pod会被自动地转移到其他节点上。
Node节点包括：
 Kubelet，负责与Master通信协作，管理该节点上的Pod。
 Kube-Proxy，负责各Pod之间的通信和负载均衡。
 Docker Engine，Docker引擎，负载对容器的管理。
2.2.3 Pod
1. 什么是Pod
Pod 可简单地理解为是一组、一个或多个容器，具有共享存储/网络及如何运行容器的规范。
Pad包含一个或多个相对紧密耦合的应用程序容器，处于同一个Pod中的容器共享同样的存储空间
（Volume，卷或存储卷）、IP地址和Port端口，容器之间使用localhost:port相互访问。根据Docker
的构造，Pod可被建模为一组具有共享命令空间、卷、IP地址和Port端口的Docker容器。
Pod包含的容器最好是一个容器只运行一个进程。每个Pod包含一个pause容器，pause容器
是Pod的父容器，它主要负责僵尸进程的回收管理。
Kubernetes为每个Pod都分配一个唯一的IP地址，这样就可以保证应用程序使用同一端口，
避免了发生冲突的问题。
一个 Pod 的状态信息保存在 PodStatus 对象中，在 PodStatus 中有一个 Phase 字段，用于描述
Pod 在其生命周期中的不同状态，参考表2-1。
第2章 Docker及Kubernetes基础 | 63
表2-1 Pod状态字段Phase的不同取值
状态 说明
Pod 已被 Kubernetes 系统接收，但仍有一个或多个容器未被创建。可以通过
Pending（挂起）
describe查看处于Pending状态的原因
Pod 已经被绑定到一个节点上，并且所有的容器都已经被创建。而且至少有一
Running（运行中）
个是运行状态，或者是正在启动或者重启。可以通过logs查看Pod的日志
Succeeded（成功） 所有容器执行成功并终止，并且不会再次重启
所有容器都已终止，并且至少有一个容器以失败的方式终止，也就是说这个容
Failed（失败）
器要么以非零状态退出，要么被系统终止
Unknown（未知） 通常是由于通信问题造成的无法获得Pod的状态
2. Pod探针
Pod探针用来检测容器内的应用是否正常，目前有三种实现方式，参考表2-2。
表2-2 Pod探针的实现方式
实现方式 说明
ExecAction 在容器内执行一个指定的命令，如果命令返回值为0，则认为容器健康
TCPSocketAction 通过TCP连接检查容器指定的端口，如果端口开放，则认为容器健康
HTTPGetAction 对指定的URL进行Get请求，如果状态码在200~400之间，则认为容器健康
Pod探针每次检查容器后可能得到的容器状态，如表2-3所示。
表2-3 Pod探针检查容器后可能得到的状态
状态 说明
Success（成功） 容器通过检测
Failure（失败） 容器检测失败
Unknown（未知） 诊断失败，因此不采取任何措施
Kubelet有两种探针（即探测器）可以选择性地对容器进行检测，参考表2-4。
表2-4 探针的种类
种类 说明
livenessProbe 用于探测容器是否在运行，如果探测失败，kubelet 会“杀死”容器并根据重启策
略进行相应的处理。如果未指定该探针，将默认为Success
readinessProbe 一般用于探测容器内的程序是否健康，即判断容器是否为就绪（Ready）状态。如
果是，则可以处理请求，反之 Endpoints Controller 将从所有的 Services 的
Endpoints中删除此容器所在Pod的IP地址。如果未指定，将默认为Success
3. Pod镜像拉取策略和重启策略
Pod镜像拉取策略。用于配置当节点部署Pod时，对镜像的操作方式，参考表2-5。
表2-5 镜像拉取策略
操作方式 说明
Always 总是拉取，当镜像tag为latest时，默认为Always
64 | 再也不踩坑的Kubernetes实战指南
（续表）
操作方式 说明
Never 不管是否存在都不会拉取
IfNotPresent 镜像不存在时拉取镜像，默认，排除latest
Pod重启策略。在Pod发生故障时对Pod的处理方式参考表2-6。
表2-6 Pod重启策略
操作方式 说明
Always 默认策略。容器失效时，自动重启该容器
OnFailure 容器以不为0的状态码终止，自动重启该容器
Never 无论何种状态，都不会重启
4. 创建一个Pod
在生产环境中，很少会单独启动一个 Pod 直接使用，经常会用 Deployment、DaemonSet、
StatefulSet等方式调度并管理Pod，定义Pod的参数同时适应于Deployment、DaemonSet、StatefulSet
等方式。
在 Kubeadm 安装方式下，kubernetes 系统组件都是用单独的 Pod 启动的，当然有时候也会单
独启动一个Pod用于测试业务等，此时可以单独创建一个Pod。
创建一个Pod的标准格式如下：
apiVersion: v1 # 必选，API的版本号
kind: Pod # 必选，类型Pod
metadata: # 必选，元数据
name: nginx # 必选，符合RFC 1035规范的Pod名称
namespace: web-testing # 可选，不指定默认为default，Pod所在的命名空间
labels: # 可选，标签选择器，一般用于Selector
- app: nginx
annotations: # 可选，注释列表
- app: nginx
spec: # 必选，用于定义容器的详细信息
containers: # 必选，容器列表
- name: nginx # 必选，符合RFC 1035规范的容器名称
image: nginx: v1 # 必选，容器所用的镜像的地址
imagePullPolicy: Always # 可选，镜像拉取策略
command:
- nginx # 可选，容器启动执行的命令
- -g
- “daemon off;”
workingDir: /usr/share/nginx/html # 可选，容器的工作目录
volumeMounts: # 可选，存储卷配置
- name: webroot # 存储卷名称
mountPath: /usr/share/nginx/html # 挂载目录
readOnly: true # 只读
ports: # 可选，容器需要暴露的端口号列表
- name: http # 端口名称
containerPort: 80 # 端口号
protocol: TCP # 端口协议，默认TCP
第2章 Docker及Kubernetes基础 | 65
env: # 可选，环境变量配置
- name: TZ # 变量名
value: Asia/Shanghai
- name: LANG
value: en_US.utf8
resources: # 可选，资源限制和资源请求限制
limits: # 最大限制设置
cpu: 1000m
memory: 1024MiB
requests: # 启动所需的资源
cpu: 100m
memory: 512MiB
readinessProbe: # 可选，容器状态检查
httpGet: # 检测方式
path: / # 检查路径
port: 80 # 监控端口
timeoutSeconds: 2 # 超时时间
initialDelaySeconds: 60 # 初始化时间
livenessProbe: # 可选，监控状态检查
exec: # 检测方式
command:
- cat
- /health
httpGet: # 检测方式
path: /_health
port: 8080
httpHeaders:
- name: end-user
value: jason
tcpSocket: # 检测方式
port: 80