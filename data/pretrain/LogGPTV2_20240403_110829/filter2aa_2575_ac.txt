Redirectors 
A redirector is a system that sits between your target’s network and your team server. Any 
connections that come to the redirector are forwarded to your team server to process. A 
redirector is a way to provide multiple hosts for your Beacon payloads to call home to. A 
redirector also aids operational security as it makes it harder to trace the true location of your 
team server.  
Cobalt Strike’s listener management features support the use of redirectors. Simply specify your 
redirector hosts when you setup an HTTP or HTTPS Beacon listener. Cobalt Strike does not 
validate this information. If the host you provide is not affiliated with the current host, Cobalt 
Strike assumes it’s a redirector. One simple way to turn a server into a redirector is to use socat.  
www.cobaltstrike.com/
/
25/
Here’s the socat syntax to forward all connections on port 80 to the team server at 
192.168.12.100 on port 80: 
socat TCP4-LISTEN:80,fork TCP4:192.168.12.100:80 
4.6 DNS Beacon 
The DNS Beacon is a favorite Cobalt Strike feature. This payload uses DNS requests to beacon 
back to you. These DNS requests are lookups against domains that your Cobalt Strike team 
server is authoritative for. The DNS response tells Beacon to go to sleep or to connect to you to 
download tasks. The DNS response will also tell the Beacon how to download tasks from your 
team server.  
Figure 21. DNS Beacon in Action 
In Cobalt Strike 4.0 and later, the DNS Beacon is a DNS-only payload. There is no HTTP 
communication mode in this payload. This is a change from prior versions of the product. 
Data Channels 
Today, the DNS Beacon can download tasks over DNS TXT records, DNS AAAA records, or 
DNS A records. This payload has the flexibility to change between these data channels while its 
on target. Use Beacon’s mode command to change the current Beacon’s data channel. mode dns 
is the DNS A record data channel. mode dns6 is the DNS AAAA record channel. And, mode 
dns-txt is the DNS TXT record data channel. The default is the DNS TXT record data channel. 
Be aware that DNS Beacon does not check in until there’s a task available. Use the checkin 
command to request that the DNS Beacon check in next time it calls home. 
www.cobaltstrike.com/
/
26/
Listener Setup 
To create a DNS Beacon listener: go to Cobalt Strike -> Listeners, press Add, and select 
Beacon DNS as the Payload type. 
Figure 22. DNS Beacon Options 
Press [+] to add one or more domains to beacon to. Your Cobalt Strike team server system must 
be authoritative for the domains you specify. Create a DNS A record and point it to your Cobalt 
Strike team server. Use DNS NS records to delegate several domains or sub-domains to your 
Cobalt Strike team server’s A record.  
The DNS Host (Stager) field configures the DNS Beacon’s TXT record stager. This stager is 
only used with Cobalt Strike features that require an explicit stager. Your Cobalt Strike team 
server system must be authoritative for this domain as well. 
To test your DNS configuration, open a terminal and type nslookup jibberish.beacon domain. 
If you get an A record reply of 0.0.0.0—then your DNS is correctly setup. If you do not get a 
reply, then your DNS configuration is not correct and the DNS Beacon will not communicate 
with you. 
Make sure your DNS records reference the primary address on your network interface. Cobalt 
Strike’s DNS server will always send responses from your network interface’s primary address. 
DNS resolvers tend to drop replies when they request information from one server, but receive a 
reply from another. 
www.cobaltstrike.com/
/
27/
If you are behind a NAT device, make sure that you use your public IP address for the NS record 
and set your firewall to forward UDP traffic on port 53 to your system. Cobalt Strike includes a 
DNS server to control Beacon.  
4.7 SMB Beacon 
The SMB Beacon uses named pipes to communicate through a parent Beacon. This peer-to-peer 
communication works with Beacons on the same host. It also works across the network. 
Windows encapsulates named pipe communication within the SMB protocol. Hence, the name, 
SMB Beacon. 
To configure an SMB Beacon payload, go to Cobalt Strike -> Listeners. Press Add. Choose 
Beacon SMB as your payload option. 
Figure 23. SMB Beacon 
The only option associated with the SMB Beacon is the pipename. You can set an explicit 
pipename or accept the default option. 
The SMB Beacon is compatible with most actions in Cobalt Strike that spawn a payload. The 
exception to this are the user-driven attacks (e.g., Attacks -> Packages, Attacks -> Web Drive-
by) that require explicit stagers.  
Cobalt Strike post-exploitation and lateral movement actions that spawn a payload will attempt 
to assume control of (link) to the SMB Beacon payload for you. If you run the SMB Beacon 
manually, you will need to link to it from a parent Beacon.  
Linking and Unlinking 
From the Beacon console, use link [host] [pipe] to link the current Beacon to an SMB Beacon 
that is waiting for a connection. When the current Beacon checks in, its linked peers will check 
in too. 
To blend in with normal traffic, linked Beacons use Windows named pipes to communicate. This 
traffic is encapsulated in the SMB protocol. There are a few caveats to this approach: 
1. Hosts/with/an/SMB/Beacon/must/accept/connections/on/port/445./
2. You/may/only/link/Beacons/managed/by/the/same/Cobalt/Strike/instance./
/
www.cobaltstrike.com/
/
28/
If you get an error 5 (access denied) after you try to link to a Beacon: steal a domain user’s token 
or use make_token DOMAIN\user password to populate your current token with valid 
credentials for the target. Try to link to the Beacon again. 
To destroy a Beacon link use unlink [ip address] [session PID] in the parent or child. The 
[session PID] argument is the process ID of the Beacon to unlink. This value is how you specify 
a specific Beacon to de-link when there are multiple childn Beacons. 
When you de-link an SMB Beacon, it does not exit and go away. Instead, it goes into a state 
where it waits for a connection from another Beacon. You may use the link command to resume 
control of the SMB Beacon from another Beacon in the future. 
4.8 TCP Beacon 
The TCP Beacon uses a TCP socket to communicate through a parent Beacon. This peer-to-peer 
communication works with Beacons on the same host and across the network. 
Figure 24. TCP Beacon 
To configure a TCP Beacon payload, go to Cobalt Strike -> Listeners. Press Add. Choose 
Beacon TCP as your payload option.  
The TCP Beacon configured in this way is a bind payload. A bind payload is one that waits for a 
connection from its controller (in this case, another Beacon session). The Port (C2) option 
controls the port the TCP Beacon will wait for connections on. Check Bind to localhost only to 
have the TCP Beacon bind to 127.0.0.1 when it listens for a connection. This is a good option if 
you use the TCP Beacon for localhost-only actions. 
The TCP Beacon is compatible with most actions in Cobalt Strike that spawn a payload. The 
exception to this are, similar to the SMB Beacon, the user-driven attacks (e.g., Attacks -> 
Packages, Attacks -> Web Drive-by) that require explicit stagers.  
Cobalt Strike post-exploitation and lateral movement actions that spawn a payload will attempt 
to assume control of (connect) to the TCP Beacon payload for you. If you run the TCP Beacon 
manually, you will need to connect to it from a parent Beacon.  
www.cobaltstrike.com/
/
29/
Connecting and Unlinking 
From the Beacon console, use connect [ip address] [port] to connect the current session to a 
TCP Beacon that is waiting for a connection. When the current session checks in, its linked peers 
will check in too. 
To destroy a Beacon link use unlink [ip address] [session PID] in the parent or child session 
console. Later, you may reconnect to the TCP Beacon from the same host (or a different host). 
4.9 External C2 
External C2 is a specification to allow third-party programs to act as a communication layer for 
Cobalt Strike’s Beacon payload. These third-party programs connect to Cobalt Strike to read 
frames destined for, and write frames with output from payloads controlled in this way. The 
External C2 server is what these third-party programs use to interface with your Cobalt Strike 
team server. 
Go to Cobalt Strike -> Listeners, press Add, and choose External C2 as your payload. 
Figure 25. External C2 
The External C2 interface has two options. Port (Bind) specifies the port the External C2 server 
waits for connections on. Check Bind to localhost only to make the External C2 server localhost-
only.  
External C2 listeners are not like other Cobalt Strike listeners. You cannot target these with 
Cobalt Strike’s post-exploitation actions. This option is just a convienence to stand up the 
interface itself. 
To learn more about External C2, visit the documentation at: 
https://www.cobaltstrike.com/help-externalc2 
www.cobaltstrike.com/
/
30/
4.10 Foreign Listeners 
Cobalt Strike supports the concept of foreign listeners. These are aliases for x86 payload 
handlers hosted in the Metasploit Framework or other instances of Cobalt Strike. To pass a 
Windows HTTPS Meterpreter session to a friend with msfconsole, setup a Foreign HTTPS 
payload and point the Host and Port values to their handler. You may use foreign listeners 
anywhere you would use an x86 Cobalt Strike listener. 
4.11 Infrastructure Consolidation 
Cobalt Strike’s model for distributed operations is to stand up a separate team server for each 
phase of your engagement. For example, it makes sense to separate your post-exploitation and 
persistence infrastructure. If a post-exploitation action is discovered, you don’t want the 
remediation of that infrastructure to clear out the callbacks that will let you back into the 
network. 
Some engagement phases require multiple redirector and communication channel options. Cobalt 
Strike 4.0 is friendly to this. 
Figure 26. Infrastructure Consolidation Features 
You can bind multiple HTTP, HTTPS, and DNS listeners to a single Cobalt Strike team server. 
These payloads also support port bending in their configuration. This allows you to use the 
common port for your channel (80, 443, or 53) in your redirector and C2 setups, but bind these 
listeners to different ports to avoid port conflicts on your team server system.  
www.cobaltstrike.com/
/
31/
To give variety to your network indicators, Cobalt Strike’s Malleable C2 profiles may contain 
multiple variants. A variant is a way of adding variations of the current profile into one profile 
file. You may specify a Profile variant when you define each HTTP or HTTPS Beacon listener. 
Further, you can define multiple TCP and SMB Beacons on one team server, each with different 
pipe and port configurations. Any egress Beacon, from the same team server, can control any of 
these TCP or SMB Beacon payloads once they’re deployed in the target environment. 
4.12 Payload Security Features 
Cobalt Strike takes steps to protect Beacons communication and to ensure that a Beacon can only 
receive tasks from and send output to its team server. 
When you setup the Beacon payload for the first time, Cobalt Strike will generate a 
public/private key pair that is unique to your team server. The team server’s public key is 
embedded into Beacon’s payload stage. Beacon uses the team server’s public key to encrypt 
session metadata that it sends to the team server. 
Beacon must always send session metadata before the team server can issue tasks and receive 
output from the Beacon session. This metadata contains a random session key generated by that 
Beacon. The team server uses each Beacon’s session key to encrypt tasks and to decrypt output. 
Each Beacon implementation and data channel uses this same scheme. You have the same 
security with the A record data channel in the Hybrid HTTP and DNS Beacon as you do with the 
HTTPS Beacon. 
Be aware that the above applies to Beacon once it is staged. The payload stagers, due to their 
size, do not have built-in security features. 
www.cobaltstrike.com/
/
32/
5. Getting a Foothold 
5.1 Client-side System Profiler 
The system profiler is a reconnaissance tool for client-side attacks. This tool starts a local web-
server and fingerprints any one who visits it. The system profiler provides a list of applications 
and plugins it discovers through the user’s browser. The system profiler also attempts to discover 
the internal IP address of users who are behind a proxy server. 
To start the system profiler, go to Attacks -> Web Drive-by -> System Profiler. 
To start the profiler you must specify a URI to bind to and a port to start the Cobalt Strike web-
server from.  
If you specify a Redirect URL, Cobalt Strike will redirect visitors to this URL once their profile 
is taken. Click Launch to start the system profiler. 
The System Profiler uses an unsigned Java Applet to decloak the target’s internal IP address and 
determine which version of Java the target has. With Java’s click-to-run security feature—this 
could raise suspicion. Uncheck the Use Java Applet to get information box to remove the Java 
Applet from the System Profiler. 
Check the Enable SSL box to serve the System Profiler over SSL. This box is disabled unless 
you specify a valid SSL certificate with Malleable C2. Chapter 11 discusses this. 
To view the results from the system profiler, go to View -> Applications. Cobalt Strike will list 
all of the applications it discovered during the system profiling process.  
5.2 Cobalt Strike Web Services 
Many Cobalt Strike features run from their own web server. These services include the system 
profiler, HTTP Beacon, and Cobalt Strike’s web drive-by attacks. It’s OK to host multiple 
Cobalt Strike features on one web server.  
To manage Cobalt Strike’s web services, go to View -> Web Drive-by -> Manage. Here, you 
may copy any Cobalt Strike URL to the clipboard or stop a Cobalt Strike web service. 
Use View -> Web Log to monitor visits to your Cobalt Strike web services.  
If Cobalt Strike’s web server sees a request from the Lynx, Wget, or Curl browser; Cobalt Strike 
will automatically return a 404 page. Cobalt Strike does this as light protection against blue team 
snooping.  
5.3 User-driven Attack Packages 
The best attacks are not exploits. Rather, the best attacks take advantage of normal features to get 
code execution. Cobalt Strike makes it easy to setup several user-driven attacks. These attacks 
take advantage of listeners you’ve already setup. Navigate to Attacks -> Packages and choose 
one of the following options. 
www.cobaltstrike.com/
/
33/
HTML Application 
An HTML Application is a Windows program written In HTML and an Internet Explorer-
supported scripting language. This package generates an HTML Application that runs a Cobalt 
Strike payload. You may choose the Executable option to get an HTML Application that drops 
an executable to disk and runs it. Choose the PowerShell option to get an HTML Application 
that uses PowerShell to run a payload. Use the VBA option to silently spawn a Microsoft Excel 
instance and run a malicious macro that injects a payload into memory. 
MS Office Macro 
This package generates a Microsoft Office macro and presents instructions to embed the macro 
in Microsoft Word or Microsoft Excel. 
Payload Generator 
This package allows you to export Cobalt Strike’s stagers in a variety of formats. 
Windows Executable 
This package generates a Windows executable artifact that delivers a payload stager. This 
package gives you several output options. 
Windows EXE is a Windows executable. 
Windows Service EXE is a Windows executable that responds to Service Control Manager 
commands. You may use this executable to create a Windows service with sc or as a custom 
executable with the Metasploit Framework’s PsExec modules. 
Windows DLL (32-bit) is an x86 Windows DLL. 
Windows DLL (64-bit) is an x64 Windows DLL. This DLL will spawn a 32-bit process and 
migrate your listener to it. Both DLL options export a Start function that is compatible with 
rundll32.exe. Use rundll32.exe to load your DLL from the command line. 
rundll32 foo.dll,Start 
Check the Use x64 payload box to generate x64 artifacts that pair with an x64 stager.  
Check the Sign executable file box to sign an EXE or DLL artifact with a code-signing 
certificate. You must specify a certificate in a Malleable C2 profile. 
Windows Executable (S) 
This package exports Beacon, without a stager, as an executable, service executable, 32-bit DLL, 
or 64-bit DLL. A payload artifact that does not use a stager is called a stageless artifact. This 
package also has a PowerShell option to export Beacon as a PowerShell script and a raw option 
to export Beacon as a blob of position independent code. 
By default, this dialog exports x86 payload stages. Check the Use x64 payload box to generate 
an x64 stage with an x64 artifact.  
www.cobaltstrike.com/
/
34/
Check the Sign executable file box to sign an EXE or DLL artifact with a code-signing 
certificate.  
5.4 Hosting Files 
Cobalt Strike’s web server can host your user-driven packages for you. Go to Attacks -> Web 
Drive-by -> Host File to set this up. Choose the file to host, select an arbitrary URL, and choose 
the mime type for the file. 
By itself, the capability to host a file isn’t very impressive. However, in a moment, you will learn 
how to embed Cobalt Strike URLs into a spear phishing email. When you do this, Cobalt Strike 
can cross-reference visitors to your file with sent emails and include this information in the 
social engineering report.  
5.5 User-driven Web Drive-by Attacks 
Cobalt Strike makes several tools to setup web drive-by attacks available to you. To quickly start 
an attack, go to Attacks -> Web Drive-by and choose an option: 
Java Signed Applet Attack 
This attack starts a web server hosting a self-signed Java applet. Visitors are asked to give the 
applet permission to run. When a visitor grants this permission, you gain access to their system.  
The Java Signed Applet Attack uses Cobalt Strike’s Java injector. On Windows, the Java injector 
will inject shellcode for a Windows listener directly into memory for you.  
To get the most mileage from this attack, you will want to download the Applet Kit from the 
Cobalt Strike arsenal and sign it with a code signing certificate. 
Java Smart Applet Attack 
Cobalt Strike’s Smart Applet Attack combines several exploits to disable the Java security 
sandbox into one package. This attack starts a web server hosting a Java applet. Initially, this 
applet runs in Java’s security sandbox and it does not require user approval to start.  
The applet analyzes its environment and decides which Java exploit to use. If the Java version is 
vulnerable, the applet will disable the security sandbox, and execute a payload using Cobalt 
Strike’s Java injector.  
Scripted Web Delivery (S) 
This feature generates a stageless Beacon payload artifact, hosts it on Cobalt Strike’s web server, 
and presents a one-liner to download and run the artifact. The options are: bitsadmin, powershell, 
and python. 
The bitsadmin option hosts an executable and uses bitsadmin to download it. The bitsadmin 
method runs the executable via cmd.exe. The exe option generates an executable and hosts it on 
Cobalt Strike's web server. The powershell option hosts a PowerShell script and uses 
powershell.exe to download the script and evaluate it. The python option hosts a Python script 
and uses python.exe to download the script and run it. Each of these options is a different way to 
run a Cobalt Strike listener. 
www.cobaltstrike.com/
/
35/
5.6 Client-side Exploits 
You may use a Metasploit Framework exploit to deliver a Cobalt Strike Beacon. Cobalt Strike’s 
Beacon is compatible with the Metasploit Framework’s staging protocol. To deliver a Beacon 
with a Metasploit Framework exploit: 
• Use/windows/meterpreter/reverse_http[s]/as/your/PAYLOAD/and/set/LHOST/and/
LPORT/to/point/to/your/Cobalt/Strike/listener./You’re/not/really/delivering/
Meterpreter/here,/you’re/telling/the/Metasploit/Framework/to/generate/the/HTTP[s]/
stager/that/downloads/a/payload/from/the/specified/LHOST/LPORT.//
• Set/DisablePayloadHandler/to/True./This/will/tell/the/Metasploit/Framework/to/avoid/
standing/up/a/handler/within/the/Metasploit/Framework/to/service/your/payload/
connection./
• Set/PrependMigrate/to/True./This/option/tells/the/Metasploit/Framework/to/prepend/
shellcode/that/runs/the/payload/stager/in/another/process./This/helps/your/Beacon/
session/survives/if/the/exploited/application/crashes/or/if/it’s/closed/by/a/user./
Here’s a screenshot of msfconsole used to stand up a Flash Exploit to deliver Cobalt Strike’s 
HTTP Beacon hosted at 192.168.1.5 on port 80: 