    你也可以使用正则表达式来让搜索更加灵活。正则表达式（又称为 regex）是一种描述搜索模式的特殊字符串。它可以帮助你仅显示输出中的特定部分。例如，你可能已经注意到 Nmap 命令输出的结果具有如下的格式：
Starting Nmap 7.60 ( https://nmap.org )
Nmap scan report for scanme.nmap.org (45.33.32.156)
Host is up (0.065s latency).
Other addresses for scanme.nmap.org (not scanned): 2600:3c01::f03c:91ff:fe18:bb2f
Not shown: 992 closed ports
PORT STATE SERVICE
22/tcp open ssh
25/tcp filtered smtp
80/tcp open http
135/tcp filtered msrpc
139/tcp filtered netbios-ssn
445/tcp filtered microsoft-ds
9929/tcp open nping-echo
31337/tcp open Elite
Nmap done: 1 IP address (1 host up) scanned in 2.43 seconds
    You might want to trim the irrelevant messages from the file so it looks more like this:
    你可能需要从文件中修剪不相关的消息，使其看起来更像这样：
PORT STATE SERVICE
22/tcp open ssh
25/tcp filtered smtp
80/tcp open http
135/tcp filtered msrpc
139/tcp filtered netbios-ssn
445/tcp filtered microsoft-ds
9929/tcp open nping-echo
31337/tcp open Elite
    Use this command to filter out the messages at the start and end of Nmap’s output and keep only the essential part of the report:
    使用此命令过滤掉Nmap输出的开头和结尾的消息，只保留报告的关键部分：
grep -E "^\S+\s+\S+\s+\S+$" DIRECTORY/nmap > DIRECTORY/nmap_cleaned
    The
     -E
    flag tells
     grep
    you’re using a regex. A regex consists of two parts: constants and operators.
     Constants
    are sets of strings, while
     operators
    are symbols that denote operations over these strings. These two elements together make regex a powerful tool of pattern matching. Here’s a quick overview of regex operators that represent characters:
    -E标志告诉grep你正在使用正则表达式。正则表达式由常量和运算符两部分组成。常量是一组字符串，而运算符是表示对这些字符串进行操作的符号。这两个元素共同使正则表达式成为强大的模式匹配工具。以下是表示字符的正则表达式运算符的快速概述：
      \d
     matches any digit.
      \w
     matches any character.
      \s
     matches any whitespace, and
      \S
     matches any non-whitespace.
      .
     matches with any single character.
      \
     escapes a special character.
      ^
     matches the start of the string or line.
      $
     matches the end of the string or line.
    Several operators also specify the number of characters to match:
    一些运算符还指定要匹配的字符数：
      *
     matches the preceding character zero or more times.
      +
     matches the preceding character one or more times.
      {3}
     matches the preceding character three times.
      {1, 3}
     matches the preceding character one to three times.
      {1, }
     matches the preceding character one or more times.
      [
      abc
      ]
     matches one of the characters within the brackets.
      [
      a
      -
      z
      ]
     matches one of the characters within the range of
      a
     to
      z
     .
      (
      a
      |
      b
      |
      c
      )
     matches either
      a
     or
      b
     or
      c
     .
    Let’s take another look at our regex expression here. Remember how
     \s
    matches any whitespace, and
     \S
    matches any non-whitespace? This means
     \s+
    would match any whitespace one or more characters long, and
     \S+
    would match any non-whitespace one or more characters long. This regex pattern specifies that we should extract lines that contain three strings separated by two whitespaces:
    让我们再看一下我们的正则表达式。记得 \s 匹配任何空格，而 \S 匹配任何非空白字符吗？这意味着 \s+ 将匹配任何一个或多个字符长的空格，而 \S+ 将匹配任何一个或多个字符长的非空白。此正则表达式模式指定我们应该提取包含由两个空格分隔的三个字符串的行：
"^\S+\s+\S+\s+\S+$"
    The filtered output will look like this:
    筛选后的输出将如下所示：
PORT STATE SERVICE
22/tcp open ssh
25/tcp filtered smtp
80/tcp open http
135/tcp filtered msrpc
139/tcp filtered netbios-ssn
445/tcp filtered microsoft-ds
9929/tcp open nping-echo
31337/tcp open Elite
    To account for extra whitespaces that might be in the command output, let’s add two more optional spaces around our search string:
    为了考虑命令输出中可能存在的额外空格，请在我们的搜索字符串周围再添加两个可选的空格：
"^\s*\S+\s+\S+\s+\S+\s*$"
    You can use many more advanced regex features to perform more sophisticated matching. However, this simple set of operators serves well for our purposes. For a complete guide to regex syntax, read RexEgg’s cheat sheet (
     https://www.rexegg.com/regex-quickstart.html
    ).
    你可以使用许多更高级的正则表达式功能来执行更复杂的匹配。但是，这个简单的操作符集对我们的目的非常有用。有关正则表达式语法的完整指南，请阅读RexEgg的备忘单（https://www.rexegg.com/regex-quickstart.html）。
    Building a Master Report
    What if you want to produce a master report from all three output files? You need to parse the JSON file from crt.sh. You can do this with
     jq
    , a command line utility that processes JSON. If we examine the JSON output file from crt.sh, we can see that we need to extract the
     name_value
    field of each certificate item to extract domain names. This command does just that:
    如果您想从所有三个输出文件中生成主报告怎么办？您需要解析crt.sh中的JSON文件。您可以使用jq，这是一种处理JSON的命令行实用程序。如果我们检查crt.sh的JSON输出文件，我们可以看到我们需要提取每个证书项目的name_value字段以提取域名。这个命令就是这样做的：
$ jq -r ".[] | .name_value" $DOMAIN/crt
    The
     -r
    flag tells
     jq
    to write the output directly to standard output rather than format it as JSON strings. The
     .[]
    iterates through the array within the JSON file, and
     .name_value
    extracts the
     name_value
    field of each item. Finally,
     $DOMAIN/crt
    is the input file to the
     jq
    command. To learn more about how
     jq
    works, read its manual (
     https://stedolan.github.io/jq/manual/
    ).
    -r标志告诉jq直接将输出写入标准输出，而不是将其格式化为JSON字符串。 . []遍历JSON文件中的数组，.name_value提取每个项目的name_value字段。最后，$ DOMAIN / crt是传递给jq命令的输入文件。要了解有关jq如何工作的更多信息，请阅读其手册（https://stedolan.github.io/jq/manual/）。
    To combine all output files into a master report, write a script like this:
    将所有输出文件组合成主报告，请编写以下脚本： 
将所有输出文件组合成主报告，编写类似于此的脚本：
#!/bin/bash
PATH_TO_DIRSEARCH="/Users/vickieli/tools/dirsearch"
DOMAIN=$1
DIRECTORY=${DOMAIN}_recon
echo "Creating directory $DIRECTORY."
mkdir $DIRECTORY
nmap_scan()
{
  nmap $DOMAIN > $DIRECTORY/nmap
  echo "The results of nmap scan are stored in $DIRECTORY/nmap."
}
dirsearch_scan()
{
  $PATH_TO_DIRSEARCH/dirsearch.py -u $DOMAIN -e php --simple-report=$DIRECTORY/dirsearch
  echo "The results of dirsearch scan are stored in $DIRECTORY/dirsearch."
}
crt_scan()
{
  curl "https://crt.sh/?q=$DOMAIN&output=json" -o $DIRECTORY/crt
  echo "The results of cert parsing is stored in $DIRECTORY/crt."
}
case $2 in
  nmap-only)
    nmap_scan
    ;;
  dirsearch-only)
    dirsearch_scan
    ;;
  crt-only)
    crt_scan
    ;;
  *)
    nmap_scan
    dirsearch_scan
    crt_scan
    ;;     
esac