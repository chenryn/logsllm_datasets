Take a guess.
17
Your guess is too high.
Take a guess.
16
Good job! You guessed my number in 4 guesses!
在文件编辑器中输入以下代码，并保存为guessTheNumber.py：
# This is a guess the number game.
import random
secretNumber = random.randint(1, 20)
print('I am thinking of a number between 1 and 20.')
# Ask the player to guess 6 times.
for guessesTaken in range(1, 7):
print('Take a guess.')
guess = int(input())
if guess  secretNumber:
print('Your guess is too high.')
else:
break # This condition is the correct guess!
if guess == secretNumber:
print('Good job! You guessed my number in ' + str(guessesTaken) + ' guesses!')
else:
print('Nope. The number I was thinking of was ' + str(secretNumber))
让我们逐行来看看代码，从头开始。
# This is a guess the number game.
import random
secretNumber = random.randint(1, 20)
首先，代码顶部的一行注释解释了这个程序做什么。然后，程序导入了模块
random，以便能用random.randint()函数生成一个数字，让用户来猜。返回值是一个
Python编程快速上手——让繁琐工作自动化
1到20之间的随机整数，保存在变量secretNumber中。
print('I am thinking of a number between 1 and 20.')
# Ask the player to guess 6 times.
for guessesTaken in range(1, 7):
print('Take a guess.')
guess = int(input())
程序告诉玩家，它有了一个秘密数字，并且给玩家 6 次猜测机会。在 for 循环
中，代码让玩家输入一次猜测，并检查该猜测。该循环最多迭代 6 次。循环中发
生的第一件事情，是让玩家输入一个猜测数字。因为 input()返回一个字符串，所
以它的返回值被直接传递给 int()，它将字符串转变成整数。这保存在名为 guess
的变量中。
if guess  secretNumber:
print('Your guess is too high.')
这几行代码检查该猜测是小于还是大于那个秘密数字。不论哪种情况，都在屏
幕上打印提示。
else:
break # This condition is the correct guess!
如果该猜测既不大于也不小于秘密数字，那么它就一定等于秘密数字，这时你
希望程序执行跳出for循环。
if guess == secretNumber:
print('Good job! You guessed my number in ' + str(guessesTaken) + ' guesses!')
else:
print('Nope. The number I was thinking of was ' + str(secretNumber))
在for循环后，前面的if...else语句检查玩家是否正确地猜到了该数字，并将相
应的信息打印在屏幕上。不论哪种情况，程序都会打印一个包含整数值的变量
（guessesTaken 和 secretNumber）。因为必须将这些整数值连接成字符串，所以它将
这些变量传递给str()函数，该函数返回这些整数值的字符串形式。现在这些字符串
可以用+操作符连接起来，最后传递给print()函数调用。
3.9 小结
函数是将代码逻辑分组的主要方式。因为函数中的变量存在于它们自己的局部
作用域内，所以一个函数中的代码不能直接影响其他函数中变量的值。这限制了哪
些代码才能改变变量的值，对于调试代码是很有帮助的。
函数是很好的工具，帮助你组织代码。你可以认为他们是黑盒。它们以参数的
第3章 函数
形式接收输入，以返回值的形式产生输出。它们内部的代码不会影响其他函数中的
变量。
在前面几章中，一个错误就可能导致程序崩溃。在本章中，你学习了try和except
语句，它们在检测到错误时会运行代码。这让程序在面对常见错误时更有灵活性。
3.10 习题
1．为什么在程序中加入函数会有好处？
2．函数中的代码何时执行：在函数被定义时，还是在函数被调用时？
3．什么语句创建一个函数？
4．一个函数和一次函数调用有什么区别？
5．Python程序中有多少全局作用域？有多少局部作用域？
6．当函数调用返回时，局部作用域中的变量发生了什么？
7．什么是返回值？返回值可以作为表达式的一部分吗？
8．如果函数没有返回语句，对它调用的返回值是什么？
9．如何强制函数中的一个变量指的是全局变量？
10．None的数据类型是什么？
11．import areallyourpetsnamederic语句做了什么？
12．如果在名为spam的模块中，有一个名为bacon()的函数，在引入spam后，
如何调用它？
13．如何防止程序在遇到错误时崩溃？
14．try子句中发生了什么？except子句中发生了什么？
3.11 实践项目
作为实践，请编写程序完成下列任务。
3.11.1 Collatz 序列
编写一个名为collatz()的函数，它有一个名为number的参数。如果参数是偶数，
那么collatz()就打印出number // 2，并返回该值。如果number是奇数，collatz()就打
印并返回3 * number + 1。
然后编写一个程序，让用户输入一个整数，并不断对这个数调用 collatz()，直
到函数返回值１（令人惊奇的是，这个序列对于任何整数都有效，利用这个序列，
你迟早会得到 1！既使数学家也不能确定为什么。你的程序在研究所谓的“Collatz
序列”，它有时候被称为“最简单的、不可能的数学问题”）。
Python编程快速上手——让繁琐工作自动化
记得将input()的返回值用int()函数转成一个整数，否则它会是一个字符串。
提示 如果number % 2 == 0，整数number就是偶数，如果number % 2 == 1，它
就是奇数。
这个程序的输出看起来应该像这样：
Enter number:
3
10
5
16
8
4
2
1
3.11.2 输入验证
在前面的项目中添加 try和 except 语句，检测用户是否输入了一个非整数的字
符串。正常情况下，int()函数在传入一个非整数字符串时，会产生ValueError错误，
比如int('puppy')。在except子句中，向用户输出一条信息，告诉他们必须输入一个
整数。
第3章 函数
4
第 章
列 表
2
在你能够开始编写程序之前，还有一个主题需要理解，那
就是列表数据类型及元组。列表和元组可以包含多个值，这样
编写程序来处理大量数据就变得更容易。而且，由于列表本身
又可以包含其他列表，所以可以用它们将数据安排成层次结构。
本章将探讨列表的基础知识。我也会讲授关于方法的内
容。方法也是函数，它们与特定数据类型的值绑定。然后我会
简单介绍类似列表的元组和字符串数据类型，以及它们与列表
值的比较。下一章将介绍字典数据类型。
4.1 列表数据类型
“列表”是一个值，它包含多个字构成的序列。术语“列表值”指的是列表本
身（它作为一个值，可以保存在变量中，或传递给函数，像所有其他值一样），而
不是指列表值之内的那些值。列表值看起来像这样：['cat', 'bat', 'rat', 'elephant']。就
像字符串值用引号来标记字符串的起止一样，列表用左方括号开始，右方括号结束，
即[]。列表中的值也称为“表项”。表项用逗号分隔（就是说，它们是“逗号分隔的”）。
例如，在交互式环境中输入以下代码：
>>> [1, 2, 3]
[1, 2, 3]
>>> ['cat', 'bat', 'rat', 'elephant']
['cat', 'bat', 'rat', 'elephant']
>>> ['hello', 3.1415, True, None, 42]
['hello', 3.1415, True, None, 42]
 >>> spam = ['cat', 'bat', 'rat', 'elephant']
>>> spam
[ 'cat', 'bat', 'rat', 'elephant']
spam变量仍然只被赋予一个值：列表值。但列表值本身包含多个值。[]是一
个空列表，不包含任何值，类似于空字符串’’。
4.1.1 用下标取得列表中的单个值
假定列表['cat', 'bat', 'rat', 'elephant']保存在名为spam的变量中。Python代码spam[0]
将求值为'cat'，spam[1]将求值为'bat'，依此类推。列表后面方括号内的整数被称为“下
标”。列表中第一个值的下标是0，第二个值的下标是1，第三个值的下标是2，依此
类推。图4-1展示了一个赋给spam的列表值，以及下标表达式的求值结果。
图4-1 一个列表值保存在spam变量中，展示了每个下标指向哪个值
例如，在交互式环境中输入以下表达式。开始将列表赋给变量spam。
>>> spam = ['cat', 'bat', 'rat', 'elephant']
>>> spam[0]
'cat'
>>> spam[1]
'bat'
>>> spam[2]
'rat'
>>> spam[3]
'elephant'
>>> ['cat', 'bat', 'rat', 'elephant'][3]
'elephant'
 >>> 'Hello ' + spam[0]
 'Hello cat'
>>> 'The ' + spam[1] + ' ate the ' + spam[0] + '.'
' The bat ate the cat.'
请注意，表达式'Hello ' + spam[0] 求值为'Hello ' + 'cat'，因为spam[0]求值为字
符串'cat'。这个表达式也因此求值为字符串'Hello cat'。
如果使用的下标超出了列表中值的个数，Python将给出IndexError出错信息。
>>> spam = ['cat', 'bat', 'rat', 'elephant']
>>> spam[10000]
Traceback (most recent call last):
File "", line 1, in 
spam[10000]
IndexError: list index out of range
Python编程快速上手——让繁琐工作自动化
下标只能是整数，不能是浮点值。下面的例子将导致TypeError错误：
>>> spam = ['cat', 'bat', 'rat', 'elephant']
>>> spam[1]
'bat'
>>> spam[1.0]
Traceback (most recent call last):
File "", line 1, in 
spam[1.0]
TypeError: list indices must be integers, not float
>>> spam[int(1.0)]
'bat'
列表也可以包含其他列表值。这些列表的列表中的值，可以通过多重下标来访
问，像这样：
>>> spam = [['cat', 'bat'], [10, 20, 30, 40, 50]]
>>> spam[0]
['cat', 'bat']
>>> spam[0][1]
'bat'
>>> spam[1][4]
50
第一个下标表明使用哪个列表值，第二个下标表明该列表值中的值。例如，
spam[0][1]打印出'bat'，即第一个列表中的第二个值。如果只使用一个下标，程序将
打印出该下标处的完整列表值。
4.1.2 负数下标
虽然下标从0开始并向上增长，但也可以用负整数作为下标。整数值−1指的是
列表中的最后一个下标，−2指的是列表中倒数第二个下标，以此类推。在交互式环
境中输入以下代码：
>>> spam = ['cat', 'bat', 'rat', 'elephant']
>>> spam[-1]
'elephant'
>>> spam[-3]