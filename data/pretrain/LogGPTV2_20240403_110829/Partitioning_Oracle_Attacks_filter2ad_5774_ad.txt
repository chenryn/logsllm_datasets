schemes in a straightforward manner.
4 Password Recovery for Shadowsocks
The prior section showed how to build partitioning oracle
attacks against non-committing AEAD schemes. Now we
turn to case studies that surface how partitioning oracles arise
in practice, enabling password recovery or other harms. We
start with Shadowsocks, and show how to build a partitioning
oracle that efÔ¨Åciently recovers user-chosen passwords.
Background on Shadowsocks. Originally written by a
pseudonymous developer, Shadowsocks [73] is an encrypted
proxy for TCP and UDP trafÔ¨Åc, based on SOCKS5 [49]. It
is used both as a standalone proxy and as the core of other
censorship evasion tools such as Google Jigsaw‚Äôs Outline
VPN [62]. The original Github repository has been ‚Äústarred‚Äù
by more than 32,000 users and forked by nearly 20,000 [72].
To use Shadowsocks, a user Ô¨Årst deploys the Shadowsocks
proxy server on a remote machine (typically hosted in a cloud
service), provisions it with a static password1 pw, and chooses
an encryption scheme to use for all connections. Originally,
only AES-CFB was supported, but cipher choices were mod-
ernized after a series of integrity attacks on the protocol [74].
Current documentation recommends either AES-GCM or
ChaCha20/Poly1305, which are the only two AEAD schemes
supported. Clients given pw can then forward TCP or UDP
trafÔ¨Åc from their machine to the Shadowsocks proxy. Our
attack targets UDP and use of AES-GCM, and so we restrict
our explanation to this setup.
The Shadowsocks protocol. The client starts by hashing
the user password to obtain a key Kr = H(pw). The hash is
currently MD5, but our attacks would work as well should
it be replaced with a modern password hashing algorithm.
The client then samples a random sixteen-byte salt sa and
computes a session key Ks using HKDF [45], as Ks ‚Üê
HKDF(Kr,sa,‚Äúss-subkey‚Äù). (A new salt and session key are
generated for every message.) The client encrypts its plain-
text payload pl via C ‚Üê AuthEnc(Ks,Z,Œµ, 01(cid:107) ip(cid:107) port(cid:107) pl)
where Z denotes a nonce that is set to a string of sufÔ¨Åciently
many zero bytes (12 for AES-GCM); the value Œµ indicates
empty associated data; and 01 is a one-byte header indicat-
ing that ip is an IPv4 address. The client sends (sa,C) to the
server.
When the Shadowsocks server receives (sa,C), it extracts
the salt and uses it together with pw to re-derive the session
key Ks. It decrypts the remainder of the ciphertext with Ks. If
decryption fails, no error message is sent back to the client.
Silently dropping invalid or malformed requests is an explicit
countermeasure against active probing attacks [83]; it also
complicates building partitioning oracles, as we shall see.
If decryption instead succeeds the plaintext‚Äôs format is
checked by verifying that its Ô¨Årst byte is equal to 01.2 If that
check passes, the next six bytes are interpreted as a four-byte
IPv4 address ip and two-byte port number port. Finally, the
rest is sent to the remote server identiÔ¨Åed by ip and port, and
the proxy listens on an ephemeral source UDP port assigned
by the kernel networking stack for a reply from the remote.
When Shadowsocks receives a reply on the ephemeral port,
the server generates a random salt and uses it with pw to
generate a new session key. It then encrypts the response, and
sends the resulting salt and ciphertext back to the client. The
same encryption algorithm is used in both directions.
1Using high-entropy symmetric keys instead of passwords became possi-
ble recently [75]; this feature does not appear to be widely used.
2In fact Shadowsocks supports ASCII domain names and IPv6 addresses,
indicated by other byte values, but we ignore these for simplicity.
202    30th USENIX Security Symposium
USENIX Association
passwords in the dictionary. That is, ÀÜp(pwi) is the probability
that pwi ‚àà D is the correct password. (We will use password
leak data to derive ÀÜp, as discussed below.) The attack has two
steps, a pre-computation phase and an active querying phase.
Pre-computation phase: In a pre-computation phase, the at-
tacker generates a splitting value (sa‚àó,C‚àó), as follows. Given
D with d = |D| and ÀÜp, the attacker uses the MKCR at-
tack that handles format checks from Section 3.3. It derives
s ‚Üê HKDF(H(pwi),sa,‚Äúss-subkey‚Äù) for all pwi ‚àà D, uses
Ki
s } as the target keys, sets the
the resulting set S = {K1
nonce to be the zero byte string Z, and sets the format check
predicate pr to output one if the Ô¨Årst byte is equal to 01. The
algorithm outputs a subset of keys K ‚äÇ S and a ciphertext C‚àó
such that decrypting C‚àó under each of the keys in K results in
a plaintext with a leading byte equal to 01.
s , . . . ,Kd
Applying this directly will not quite work, because Shad-
owsocks servers will only accept UDP packets whose length
is less than or equal to 65,507 bytes. This means we can
at best use a key-colliding ciphertext for a key set of size
k = 4,091. We therefore modify slightly the procedure above
to Ô¨Ånd a size-k subset Kmax ‚äÇ K that has maximum aggregate
probability under ÀÜp. Fixing a salt sa, we abuse notation and
let ÀÜp(Ks) = ÀÜp(pw) for Ks the key derived from pw using sa.
Then we solve the optimization problem deÔ¨Åned by
Kmax = argmax
S‚äÜK ,|S|‚â§k
‚àë
Ks‚ààS
ÀÜp(Ks) .
We compute the key-colliding ciphertext C‚àó that decrypts
under that subset using the Ô¨Årst block Ô¨Åxed to ensure the
format check is passed. Let P ‚äÜ D be the set of passwords
associated to the subset of colliding keys Kmax (for salt sa‚àó).
Recall that since we must Ô¨Åx a block of C‚àó, C‚àó will have k +2
blocks, including the tag.
Querying phase: Having done the pre-computation, the at-
tacker can then submit to the proxy server (sa‚àó,C‚àó) and it will
decrypt correctly for any of the 4,091 passwords in P. This is
shown as step (1) in Figure 3. Should pw ‚àà P, the server will
interpret the decrypted plaintext as a 01 byte followed by a
random IPv4 address, destination port, and payload. The IPv4
and destination port will be accepted by the server‚Äôs network
protocol stack with high probability, and so the server will
send the payload as a UDP packet to the IP address ip and
destination port port. It will also open a UDP source port to
listen for a response. This is step (2) in the Ô¨Ågure.
The attacker does not a priori know the listening port the
server uses, and modern operating systems randomize this
port. The traditional range used for ephemeral source ports
is 49,152 through 65,535, though some systems use slightly
larger ranges. The attacker can simply send a UDP probe to
every port in that range ‚Äî the port is left open for Ô¨Åve minutes
by default for the Shadowsocks server implementations we
inspected. This is shown as step (3) in the Ô¨Ågure. Should the
system respond with ICMP error messages on closed ports,
this will already be sufÔ¨Åcient for the attacker to learn if a port
Figure 3: Diagram of the Shadowsocks partitioning oracle. Values ÀÜV
and Ks deÔ¨Åned in the text. Solid lines indicate actions that always
occur, and dashed lines indicate actions that occur only if ÀÜV decrypts
correctly, begins with byte 01, and contains a valid (ip,port) pair.
Threat model. We focus on remote password recovery at-
tacks, meaning a malicious client that knows the IP address
of a Shadowsocks server seeks to recover the password(s) it
uses. We do not assume the ability to monitor network trafÔ¨Åc
from honest clients. Capturing honest trafÔ¨Åc would enable
ofÔ¨Çine brute-force dictionary attacks against the password-
based encryption ‚Äî future versions of Shadowsocks might
consider using password-authenticated public-key encryption
instead to mitigate this [19].
A basic attack that works in our threat model is online
brute-force, in which the adversary enumerates a sequence
of guesses pw1, pw2, . . . and sends an encryption under each
guess to the server. By having the encrypted plaintext pl en-
code a request back to the malicious client, the adversary can
determine if decryption succeeds by seeing if it obtains a for-
warded request from the proxy. The Shadowsocks designers
recommend using rate limits to make remote guessing attacks
more difÔ¨Åcult, and several of the libraries implement them.
Shadowsocks would be considered secure in our threat
model if online brute-force attacks were the best possible
attack. We now show how adversaries can do better via parti-
tioning oracles.
Building a partitioning oracle. We now show how to turn
a Shadowsocks proxy server into a partitioning oracle. This
would be simple if the proxy server responded with an er-
ror message when decryption fails, in which case the basic
partitioning oracle attack described in Section 2 would apply.
But the active probing countermeasure prevents this simple
approach. A key insight is that we can exploit the fact that
the proxy server opens an ephemeral UDP port in response to
a valid request (and does not otherwise). One can view this
as a remotely observable, logical side-channel that reveals
whether decryption succeeds. See Figure 3 for a diagram of
our attack, which we now explain in detail.
The attacker starts with knowledge of a password dictio-
nary D and an estimate ÀÜp of the probability distribution over
USENIX Association
30th USENIX Security Symposium    203
Shadowsocks1. Send splitting ciphertext4.If listener open,spoofed reply sentback to attacker2.Decrypt!ùëâwith ks. If success: send UDP packet to (ip, port) from plaintext, listen for replyServerports3.Send spoofed UDPreplies to each port!ùëâwas opened. If there is no other activity on the system, then
this sufÔ¨Åces to construct a partitioning oracle.
But in fact we observed that Shadowsocks server imple-
mentations will accept arbitrary response data. Thus, upon
receiving the UDP probe the server believes this to be the
valid response and proceeds to encrypt it and send it back to
the attacker.3 This is marked as step (4) in the diagram. At
this point, the attacker can simply perform trial decryption for
each pw ‚àà P and recover the password.
The attacker can repeat steps (1)‚Äì(3) multiple times, focus-
ing iteratively on the set of remaining passwords. The attacker
can also amortize the cost of the UDP port scan across multi-
ple attempts, by simply sending a sequence of pre-computed
key colliding ciphertexts to the server (for distinct subsets of
keys), and then performing the port scan.
Proof of concept. We implemented a proof of concept of the
attack. Our experimental setup used a laptop running OS X as
a malicious client on a home network, and an EC2 micro in-
stance running Ubuntu 18.04 and go-shadowsocks2 [28]. We
used a default conÔ¨Åguration of the EC2 instance, except that
we allowed UDP inbound trafÔ¨Åc on the server‚Äôs ephemeral
port range (32,768‚Äì60,999). Without opening those ports,
Amazon‚Äôs Ô¨Årewall will by default block the UDP port scan
(because the attacker will not be able to guess the proper
source IP and port, which are random).
We veriÔ¨Åed steps (1)‚Äì(4) of the attack work as expected,
except that we avoided a port scan (disallowed by Amazon‚Äôs
acceptable use policy without explicit permission) by sending
a single UDP packet to the correct port. A real attacker would
perform a standard port scan of the ephemeral port range; we
conÔ¨Årmed that this works as expected in a local LAN setup
(where we had permission to do port scans) using nmap [54].
Computing a key multi-collision ciphertext for k = 4,091
took 32 seconds on the same Intel i9 system described in
Section 3.1; recall that this is ofÔ¨Çine pre-computation.
Success rate simulations. To evaluate the efÔ¨Åcacy of the at-
tack in recovering a target password, we perform simulations
using a sanitized version of a large breach compilation [20] ob-
tained from the authors of [63]. The sanitized dataset contains
1.1 billion passwords together with the frequency with which
they occurred. To perform password simulation experiments,
we partitioned the password dataset randomly into two halves:
a training set (Ptrain) used by the attacker to estimate ÀÜp and
a testing set (Ptest) used as an empirical distribution for sam-
pling a target password pw. This represents an attacker having
a good, but not exact, estimate of the distribution from which
a password is drawn. The maximum success rate achievable
for the simulations is 70%, because the test set has many
passwords not found in the training set.
We wrote a program that uses the training set Ptrain to
determine a sequence of password sets P1,P2, . . . according
3This seems to be a vulnerability in its own right, as it could potentially
allow attackers to inject malicious responses to honest client UDP requests.
e
t
a
r
s
s
e
c
c
u
S
80
60
40
20
0
0
k = 1
k = 4091
k = 1
k = 4091
e
t
a
r
s
s
e
c
c
u
S
80
60
40
20
0
20,000
0
1
2
3
4
5
6
Bandwidth (GB)
5,000
10,000
15,000
Number of queries
Figure 4: The (left) number of queries versus success rate and (right)
bandwidth versus success rate for simulations of the brute-force
attack (k = 1) and partitioning oracle attack (k = 4091).
to the maximization approach described earlier. Computing
the Ô¨Årst set (the worst case) took about 704 seconds. The
probability of success of this Ô¨Årst set is 0.9%. In contrast,
the brute-force attack achieves a 0.76% success rate with
its Ô¨Årst ciphertext. The reason for the mild improvement is
that the formatting check for Shadowsocks means that P1
contains one of the most popular passwords plus many lower
probability passwords. One could improve this with further
precomputation effort by repeating the process to Ô¨Ånd higher
performing P1.
Even without such embellishments, the success rate as a
function of the number of ciphertext queries made goes up
rapidly. The left graph of Figure 4 shows how the partitioning
oracle attack outperforms brute force for all query budgets.
As examples: the partitioning oracle attack achieves a suc-
cess rate of 20% with just 124 ciphertexts while brute-force
achieves only 3% with the same number. A success rate of
70% would require 21,503 partitioning oracle queries while
the brute-force attack would require 87.8 million ciphertexts.
We also estimated bandwidth usage for both attacks, shown
in the right graph of Figure 4. A single query in the partition-
ing oracle attack is 65,532 bytes total, including an 8-byte
UDP header, 20-byte IP header, 16-byte salt, and 65,488-byte
ciphertext. For the simple brute-force attack a single query
is 68 bytes, including the UDP header, IP header, salt, and
24-byte ciphertext. The ciphertext itself includes a 16-byte
authentication tag and encrypted 7-byte header and 1-byte
payload. For success rates below 25% the brute-force attack
requires less total bandwidth than the partitioning oracle at-
tack, but the latter uses less bandwidth above 25%.
Concretely, the total bandwidth of all the submitted cipher-
texts in the partitioning oracle attack to achieve 20% success
rate would be 8.1 MB across 124 UDP packets. The total