Similarly, an insertion packet is a TCP packet that is dropped
by the server but accepted by the DPI engine. However, such
a deﬁnition is imprecise. In this section, we aim to provide a
more precise deﬁnition of the concepts we use in this work,
as well as the problem that SYMTCP solves. First, we deﬁne
what are accept and drop attributes associated with a packet.
TCP State Machine. Conceptually, each TCP implemen-
tation can be modeled as a deterministic Mealy machine,
M = (Q, q0, Σ, Λ, T, G) where
• Q is the set of states,
•
q0 ∈ Q is the initial state,
3
UserDPI deviceServerΣ is the input alphabet, i.e., a TCP packet,
Λ is the output alphabet, i.e., the TCP data payload,
T : Q × Σ → Q is the state transition function, and
•
•
•
• G : Q × Σ → Λ is the output function.
Compared with a traditional deterministic ﬁnite state machine,
the output of the Mealy machine is determined by both its
current state and the current inputs. Note that in this work,
we deﬁne the output of a TCP state machine M as the
output to the buffer that stores data which will be used by the
application layer (i.e., payload), instead of the response packet.
The reasons are that (1) DPI’s detection of sensitive keywords
is strictly on the application layer payload, and (2) the TCP
layer of the DPI engine will not generate any TCP level output
like ACK packets. This model allows us to unify the deﬁnition
of state machines for both the DPI and an endhost. We also
simplify the output behavior as follows: as long as the data
payload will be output to the application layer, even in a
delayed manner, we consider that the packet generates a non-
empty output.
Deﬁnition 1: Drop. Given a TCP state machine M, a packet
P ∈ Σ is dropped if it neither causes a state change nor
generates any output. Here the state can be either the high-
level TCP states (e.g., LISTEN, ESTABLISHED), or low-
level/implementation-level states (e.g., the number of challenge
ACKs that have been sent [13]).
T (q, P ) = q ∧ G(q, P ) = ε
(1)
Correspondingly, we deﬁne drop paths as the program paths of
a TCP implementation that free an incoming TCP packet with-
out changing the current state of a TCP session or producing
any output. To identify drop paths in practice, we also deﬁne
drop points as the program points or statements where any path
that traverses it would become a drop path. In the Linux kernel
we analyzed, we manually labeled 38 unique drop points in
total (more details in §VIII). Note that a single drop point may
correspond to many different packet instances. For example, a
packet with “bad checksum” can have arbitrary SEQ or ACK
numbers, as well as arbitrary TCP headers.
Deﬁnition 2: Accept. Given a TCP state machine M, a packet
P ∈ Σ is accepted if it causes a state change (including both a
high-level, TCP state change and a low-level, implementation-
speciﬁc state change) or the output is not empty:
T (q, P ) (cid:54)= q ∨ G(q, P ) (cid:54)= ε
(2)
Correspondingly, we deﬁne accept paths as the program paths
of a TCP implementation that change the current state of a
TCP session or append the payload of a TCP packet to the
receive buffer. Technically, all paths that are not drop paths
are considered accept paths; equivalently, any path that does
not traverse any drop point is considered an accept path, and
can be therefore be identiﬁed automatically.
Next, we note that any evasion or insertion packet needs to
be sent along with other packets in a sequence (e.g., the TCP
handshake, a data packet that contains sensitive keyword), in
order to discover discrepancies. For ease of exposition, we
ﬁrst deﬁne two shortcut functions for handling a sequence of
packets.
Let Ms be the TCP state machine of the server and Md be
the TCP state machine of the DPI engine. For simplicity, we
assume Ms and Md have the same input and output alphabet.
Although the set of states of Ms and Md are different, we as-
sume that their initial states (q0) are the same, i.e., the LISTEN
state. Given a state q of a TCP state machine M and a sequence
of packets P1...n ∈ Σ∗, we denote TM (q, P1...n) as the state
transition from q after handling P1...n, and GM (q, P1...n) as
the generated TCP data stream to the application layer.
Because the goal of the DPI’s TCP layer is to extract
the data stream from the monitored TCP session between the
client and the server, we deﬁne the concept of “synchronized”
for the ease of discussion.
Deﬁnition 3: Synchronized. Given a sequence of packets
P1...n ∈ Σ∗, we say that the DPI engine’s TCP state machine
Md is synchronized with the server’s state machine Ms if and
only if the generated (application) data streams from the initial
LISTEN state are the same for both i.e.,
GMs(q0, P1...n) = GMd (q0, P1...n)
(3)
At a high-level, what insertion and evasion packets aim to
achieve is to “de-synchronize” the TCP state machine of the
server (Ms) from that of the DPI engine (Md),1 so that the
payload with sensitive information will not be output to the
application layer ﬁlters for inspection. However, because the
DPI engine is a black box in our threat model, whether the two
state machines have been de-synchronized can only be inferred
from the behavior of application layer ﬁlters (e.g., the decision
to block or reset a connection after sending a probe packet). To
model such behaviors, we deﬁne an abstracted ﬁlter function.
Deﬁnition 4: Bad Keywords and Alarm. For simplicity, we
use bad keywords to represent any content that can trigger an
alarm, and we assume that the entire content ﬁts into a single
TCP packet for the ease of discussion (but we can also support
keywords which are split into multiple packets). Given a packet
P containing a bad keyword, a ﬁlter function F : Λ → {0, 1}
performs arbitrary checks over its data payload.
F (G(q, P )) =
if G(q,P) contains any bad keyword
otherwise
(4)
(cid:26)1
0
The function applies to both DPIs and servers.
Deﬁnition 5: Evasion Packet. Given a sequence of packets
P1...n ∈ Σ∗, we say that the last packet Pn is an evasion
packet if the following three requirements are satisﬁed. 1 The
server will accept every packet P1...n (Deﬁnition 2). 2 When
handling P1...n−1, the state machine of the server and the DPI
engine are synchronized (Deﬁnition 3). 3 Once Pn is sent,
the two state machines would be “de-synchronized” as the DPI
engine will drop Pn (Deﬁnition 1) and thus fail to output the
payload of Pn or its follow-up packets (as Pn itself may not
be a data packet). Let Pn+r be the data packet that contains
the bad keywords (r = 0, 1, ...), we have:
GMs (TMs (q0, P1...n+r−1), Pn+r) (cid:54)= ε ∧
GMd (TMd (q0, P1...n+r−1), Pn+r) = ε
1It is also possible that a packet can be accepted differently, exerting
different effects on the server and DPI; we do ﬁnd such cases in practice.
4
Fig. 2. Overview of SYMTCP’s Workﬂow
Unfortunately, as mentioned above, we can only indirectly
infer whether the GMd output
is empty by means of the
ﬁltering function F . Given this, we use Pn+r as the probe
packet with bad keywords in the payload, and change the
requirement 3 to:
point (as deﬁned in §III-B) at different TCP states and collect
the corresponding path constraints. Each path corresponds to
a packet sequence P1...n and the collected path constraints
are later used to generate concrete test packets for differential
testing, i.e., serving as candidate insertion/evasion packets.
F (GMs (TMs (q0, P1...n+r−1), Pn+r)) = 1 ∧
F (GMd (TMd (q0, P1...n+r−1), Pn+r)) = 0
(5)
Note that our deﬁnition of evasion is purely based on the
outputs to the application layer and thus,
is more strict.
Speciﬁcally, P1...n−1 may already have triggered discrepan-
cies between Ms and Md (they are accepted and processed
differently on the DPI and server); however, without triggering
observable behavioral changes at the application layer, we
cannot ascertain that such packet(s) are evasion packet(s). Note
that the requirement 2 and 3 together explicitly exclude the
cases that P1...n−1 already ends with an evasion or insertion
packet.
Deﬁnition 6: Insertion Packet. Given a sequence of packets
P1...n ∈ Σ∗, we say that the last packet Pn is an insertion
packet if the following three requirements are satisﬁed. 1
The server will accept every packet P1...n−1 but will drop Pn
(Deﬁnition 1). 2 When handling P1...n−1, the state machine of
the server and the DPI engine are synchronized (Deﬁnition 3).
3 Pn will “de-synchronize” the two state machines as the
DPI will accept Pn (Deﬁnition 2), which has to be inferred
through some follow-up probe packets Pn+1...n+r where the
last packet Pn+r contains bad keywords (r = 1, 2, ...) (same
as Equation 5). Pn+1...n+r−1 are needed for the purpose of
reaching the ESTABLISHED state.
Goal. Given the above deﬁnitions, the goal of SYMTCP is
to automatically ﬁnd packet sequences P1...n where the last
packet Pn is an evasion/insertion packet.
IV. WORKFLOW OF SYMTCP
An overview of SYMTCP’s workﬂow is depicted in Fig-
ure 2. The workﬂow is divided into an ofﬂine selective concolic
execution phase and an online testing phase. The inputs of the
ofﬂine phase include a set of initial seed TCP packets (e.g.,
initial SYN) that can drive the concolic execution engine, and
a manually curated list of accept and drop points of a Linux
TCP implementation (as deﬁned earlier).
During the ofﬂine phase, by running concolic execution
on the server’s TCP implementation, we attempt to gather all
execution paths (if possible) that reach an accept or a drop
Figure 3 illustrates some example packets that reach drop
points (Deﬁnition 1: the packets do not have any effect and are
simply discarded and optionally ACKed) and some example
packets that reach accept points (Deﬁnition 2: advancing the
TCP state machine or causing data to be accepted). Note that
our analysis will always start from the TCP LISTEN state
and end with the TCP ESTABLISHED state as it represents
the complete window of opportunity to inject insertion/evasion
packets. For instance, it has been reported in [48] that if a
client sends a SYN-ACK to a server in the LISTEN state,
the server will drop the packet (and send a RST) whereas
the Great Firewall of China (GFW) will be confused into
thinking that the client is the server. Such a SYN-ACK packet
is effectively an insertion packet
to
then move on with the normal three-way handshake and start
sending data unchecked (Deﬁnition 6). Another example is
a SYN packet containing a data payload, which is allowed
by the TCP standard (the payload will be buffered until
the completion of the three-way handshake), but a DPI may
incorrectly ignore it [37], making this packet an evasion packet
(Deﬁnition 5). We do not wish to advance the server’s state
beyond ESTABLISHED (e.g., TIME_WAIT) because we can
then no longer deliver data.
that allows the client
Ofﬂine phase: In brief,
the ofﬂine concolic execution
engine ﬁrst boots a running Linux kernel with a TCP socket in
the LISTEN state. Then we feed it with multiple symbolized
packets to explore the server’s TCP state machine as exhaus-
tively as possible. The primary output of this phase is the
sequence of candidate insertion/evasion packets in the form of
symbolic formulas and symbolic constraints that describe what
possible values the TCP header ﬁelds should take (including
the constraints that describe the inter-relationships between
packets). Note that each packet sequence will contain at most
one packet that reaches a drop point. This is because each
such a “drop packet” by itself does not impact the TCP state
machine whatsoever; thus, a sequence with two (successive)
“drop packets” is equivalent to two sequences each with a
single “drop packet” (i.e., splitting the original sequence).
The shorter sequences are discovered ﬁrst with the symbolic
execution engine—we use a strategy similar to breadth-ﬁrst
search to discover sequences of packets and limit the total
number of symbolic packets to be practical (more details
5
Fig. 3. Candidate packet generation with symbolic execution. Pic denotes
candidate insertion packet, Pec denotes candidate evasion packet
in §V); thus, the longer sequence containing multiple drop
packets is unnecessary and redundant. In contrast, different
paths reaching the same accept/drop point are not redundant
and can represent distinct events. For instance, as shown
in Figure 3, if the current TCP state is SYN_RECV, one can
send two types of ACK packets to advance the TCP state to
ESTABLISHED (both lead to the same accept point): (1) an
ACK packet with a 0-byte of payload (where the SEQ and
ACK number match exactly what are expected), or (2) an ACK
packet with an in-window payload (as long as the END SEQ
is greater than the expected SEQ number). They correspond
to two different accept paths that represent two distinct ways
of moving the TCP state forward. Discovering these different
paths is critical as not all paths are handled equivalently by
the DPI (thus leading to possible evasion opportunities).
An additional output of the ofﬂine symbolic execution
engine (as shown in Figure 2) is that for each sequence of
candidate packets, there is a corresponding TCP connection
state that the server will end up in after the sequence of
packets is consumed. Recording this information facilitates
the generation of follow-up probe packets. For example, if
the sequence of candidate packets is a single TCP SYN with
a bad checksum, then we know that the server will stay in
the LISTEN state; therefore a proper three-way handshake is
needed before we can send a data packet to check if the DPI
was confused by the initial candidate insertion packet.
Online phase: During the online phase, we attempt
to
concretize these candidate insertion/evasion packets by adding
additional constraints (more details to follow in §VI). One such
constraint is the server’s initial sequence number (which is
randomly generated every time we probe the server). Once the
constraint solver generates the sequence of concrete candidate
insertion/evasion packets,
they are fed to the DPI prober
(together with the follow-up packets).
Fig. 4. Evaluation of insertion/evasion packet candidates
a drop point, we will treat it as a candidate insertion packet
and probe the DPI to see whether it causes the DPI to later
ignore the data packet with a known bad payload (Deﬁnition
6). For example, a SYN packet with bad checksum will be
considered a candidate insertion packet (while the server is in
the LISTEN state). If the current packet is one that reaches an
accept point such as a SYN packet with data (as in the example
mentioned earlier), we will feed it to the DPI and observe
whether it qualiﬁes as an evasion packet (Deﬁnition 5). If the
DPI accepts the packet just as the server (which is the common
case as a DPI typically is lenient in accepting packets [37]), we
will move on to the next packet and repeat the process. Note
that for different sequences of packets that share the common
preﬁx packets, we only need to evaluate the common packets
once (as candidate insertion or evasion packets).
V. THE OFFLINE PHASE: PRACTICAL CONCOLIC
EXECUTION ON THE TCP IMPLEMENTATION
Our solution is built on top of the popular concolic execu-
tion engine S2E [17] that is capable of analyzing OS kernels.
The challenge is that a full-size TCP implementation has a
rather complicated ﬁnite state machine (especially with the
low-level states). Thus, applying concolic execution on the
same is extremely challenging. We describe how we tackle the
more detailed challenges in this section. Speciﬁcally, in §V-A,
we describe how we employ selective concolic execution to
bound the symbolic execution space. In §V-B, we describe
how we symbolize the input, i.e., the ﬁelds in the TCP header
and options. In §V-C, we discuss how we abstract checksum
functions in TCP. Finally, in §V-D, we discuss how to deal with
server-side inputs (speciﬁcally, the sequence number used by
the server) that are not known a priori.
A. Selective Concolic Execution Favoring Completeness
We illustrate the process in Figure 4. For each sequence
of packets, we start from the ﬁrst packet and perform probes
according to the current packet. If the current packet reaches
Because it is heavyweight, we want to run symbolic execu-
tion only on the TCP code base; for the rest of the system, we
seek to use concrete execution to reduce complexity. To realize
6
SYN	packet	w/o	dataSYN	packet	w/	data...LISTENACK	packet	w/	exact	SEQ	and	ACKACK	packet	w/	SEQ-in-window	data...SYN_RECVData	packet	w/	exact	SEQ	and	ACK	Data	packet	w/	in-window	SEQ	and	ACKData	packet	w/	FIN	flagPartial	in-window	data	packet...ESTABLISHEDESTABLISHED/Data	RecvedSYN packet w/ bad checksumSYN packet w/ unsolicited MD5 optionSYN/FIN packetSYN/RST packet...SYN packetACK packet w/ bad ACK numberACK packet w/ bad SEQ numberACK packet w/ bad timestampACK/RST packet...Data packet w/ bad SEQ numberData packet w/ bad ACK numberData packet w/ bad timestampRST packet w/ bad SEQ numberRST packet w/ unsolicited MD5 option...Examples: { Pic(SYN/bad checksum) }                  { Pec(SYN/data), Pic(ACK/bad ACK number) }                  { Pec(SYN/no data), Pec(ACK/SEQ-in-window data), Pic(Data/unsolicited MD5 option) }LegendAccept packetDrop packetDPI AcceptDPI DropDPI AcceptDPI DropServer AcceptServer DropPacket #1DPI AcceptDPI DropDPI AcceptDPI DropServer AcceptServer DropPacket #2DPI AcceptDPI DropDPI AcceptDPI DropServer AcceptServer DropPacket #3Insertion PacketEvasion Packete.g. SYN packete.g. ACK packete.g. data packetthis vision, we need to deﬁne the boundary between where
symbolic execution and concrete execution are applied. One
way to achieve this is to perform a ﬁne-grained, function-level
analysis to identify those functions that are related to the TCP
logic, but this will require a prohibitively expensive manual
effort. To solve this problem, we use a more conservative,
coarse-grained boundary, which is the entire net/ipv4 compila-
tion unit (object ﬁle) in Linux. When we are inside the address
space of the net/ipv4 compilation unit, we run the code with
symbolic execution and enable forking. When we are outside
this address space, we run the code concretely with forking
disabled, but still keep the original constraints (as is supported
by S2E). The beneﬁt of this is that we do not lose the symbolic
expressions when switching back from the concrete mode to