title:Exploring the potential benefits of expanded rate limiting in Tor:
slow and steady wins the race with Tortoise
author:W. Brad Moore and
Chris Wacek and
Micah Sherr
Exploring the Potential Beneﬁts of Expanded Rate Limiting
in Tor: Slow and Steady Wins the Race With Tortoise
W. Brad Moore
Georgetown University
Washington, D.C. 20057
PI:EMAIL
Chris Wacek
Georgetown University
Washington, D.C. 20057
PI:EMAIL
Micah Sherr
Georgetown University
Washington, D.C. 20057
PI:EMAIL
ABSTRACT
Tor is a volunteer-operated network of application-layer relays that
enables users to communicate privately and anonymously. Unfor-
tunately, Tor often exhibits poor performance due to congestion
caused by the unbalanced ratio of clients to available relays, as well
as a disproportionately high consumption of network capacity by a
small fraction of ﬁlesharing users.
This paper argues the very counterintuitive notion that slowing
down trafﬁc on Tor will increase the bandwidth capacity of the net-
work and consequently improve the experience of interactive web
users. We introduce Tortoise, a system for rate limiting Tor at its
ingress points. We demonstrate that Tortoise incurs little penalty for
interactive web users, while signiﬁcantly decreasing the throughput
for ﬁlesharers. Our techniques provide incentives to ﬁlesharers to
conﬁgure their Tor clients to also relay trafﬁc, which in turn im-
proves the network’s overall performance. We present large-scale
emulation results that indicate that interactive users will achieve a
signiﬁcant speedup if even a small fraction of clients opt to run
relays.
Categories and Subject Descriptors
C.2.4 [Computer-Communication Networks]: Distributed Sys-
tems; C.2.0 [Computer-Communication Networks]: General—
Security and Protection; C.2.1 [Network Architecture and De-
sign]: [Distributed Networks]
General Terms
Performance, Anonymity, Security
Keywords
Anonymity, Tor, Performance
1.
INTRODUCTION
Anonymity networks such as Tor [9] allow their users to privately
communicate without revealing their identities. These systems are
regularly used to enable private browsing, circumvent censorship
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ACSAC ’11 Dec. 5-9, 2011, Orlando, Florida USA
Copyright 2011 ACM 978-1-4503-0672-0/11/12 ...$10.00.
(cid:2)(cid:1)(cid:3)
ﬁrewalls, and provide unfettered access to information. In partic-
ular, Tor enables any application that communicates using TCP to
tunnel its connections through the anonymity network.1 This ﬂexi-
bility permits a variety of applications – web browsers, instant mes-
saging clients, ﬁle sharing applications, and more – to achieve some
degree of anonymity. Tor does not discriminate against any partic-
ular application, and moreover, its anonymity features aggravate
efforts to distinguish between applications.
A consequence of Tor’s versatility is that the anonymity net-
work’s capacity is disproportionately consumed by a small subset
of users who run high-bandwidth applications. By analyzing the
trafﬁc that exited their exit relay in 2008, McCoy et al. found that
while nearly 97% of observed connections could be classiﬁed as in-
teractive (e.g., web browsing), approximately 40% of anonymous
trafﬁc belonged to non-interactive applications [17] such as Bit-
Torrent. By itself, this disproportionate bandwidth utilization is not
problematic: Tor is a general-purpose anonymity network, and ﬁle
sharing has many legitimate uses.
Unfortunately, relative to unprotected communication, Tor suf-
fers from high-latency and low-bandwidth. The network’s poor
performance not only negatively impacts the applications that it ser-
vices, it also likely discourages the network’s use as many would-
be users may be unwilling to sacriﬁce so much performance for
increased privacy. In their performance analysis of Tor, Dingledine
and Murdoch identify BitTorrent as a major cause of Tor’s slow-
ness [10].
A simplistic approach to improving Tor’s performance is to dis-
allow BitTorrent on Tor. However, such a policy arguably runs
counter to Tor’s philosophy and mission as an anti-censorship tech-
nology. Additionally, it is unclear how client applications can be
reliably differentiated (though notably, previous work has shown
that applications can be probabilistically identiﬁed by examining
their trafﬁc patterns [13]).
An alternative approach to improving Tor’s performance is to in-
crease the number of relays that forward anonymous trafﬁc [10, 14,
22]. A recent study of the Tor network estimates that the number
of clients outnumbers the number of available relays by a factor
of nearly 67 [15]. Increasing the number of relays diminishes this
imbalance and consequently decreases congestion in the network.
This paper adopts this latter technique and proposes an incentive
scheme to increase the number of relays on the Tor network and
improve the network’s overall performance and capacity. Our so-
lution, which we call Tortoise, takes the counterintuitive and seem-
1Applying Tor without carefully considering the application’s
protocol and communication characteristics risks exposing the
sender’s identity [4, 7]. For example, certain BitTorrent clients an-
notate requests with their senders’ network addresses [4]; similarly,
improperly conﬁgured end-hosts may reveal receivers’ identities by
failing to anonymize DNS resolution requests.
ingly contradictory approach that slowing down Tor will help
achieve speedup. In particular, Tortoise imposes strict rate limits
on individual client connections at the network’s ingress points but
does not limit connections originating from Tor relays. By care-
fully tuning these limits, interactive clients such as web browsers
see little effect, while bandwidth-intensive users (for example, ﬁle-
sharers) experience a signiﬁcant decrease in throughput. We ar-
gue that this slowdown provides incentives for ﬁlesharers to oper-
ate their own relays through which they can bypass the network’s
rate limiting. We posit that some fraction of ﬁlesharers will be-
come sufﬁciently frustrated to operate their own relays, which will
in turn serve additional trafﬁc and reduce congestion. Moreover,
the savings in bandwidth from rate limiting ﬁlesharers and other
high-throughput users who do not run relays can provide additional
network capacity.
Unlike recently proposed incentive and e-cash approaches that
require centralized mints [14] or banks [2, 5], our solution is fully
decentralized, is backwards-compatible with the existing Tor net-
work, and may be deployed incrementally. We demonstrate the
feasibility of Tortoise and investigate its ability to improve the per-
formance of interactive web clients through emulation using Ex-
perimenTor [3], a large-scale network emulator that executes actual
Tor binaries on a virtual network. We show that the performance of
interactive web browsers will signiﬁcantly increase if just a small
number of clients opt to run their own relays.
Threat Model and Limitations. Importantly, Tortoise is not ro-
bust against determined adversaries who wish to circumvent its rate
limiting through Sybil-style attacks [11]. For example, an attacker
can achieve high throughput by connecting to many (rate limited)
relays and aggregating their bandwidths. Although existing Sybil
defenses may offer some protection, we note that Tortoise does not
worsen the performance of the network (relative to unmodiﬁed Tor)
in the presence of such determined attackers. Rather, Tortoise is de-
signed to provide incentives for ordinary users – some of whom de-
sire high throughputs – to also operate as relays. If a small fraction
of such honest users opt to relay Tor trafﬁc, then the network will
improve. More sophisticated high-bandwidth users may evade the
rate limits, but as we discuss below, doing so may be more costly
than behaving correctly and operating a relay.
Additionally, as with other solutions that motivate users to run re-
lays, Tortoise inherently trades off performance for anonymity: op-
erating a relay increases performance, but decreases sender
anonymity since the initiator of high-throughput trafﬁc is likely the
operator of a Tor relay. We discuss the security implications of
using Tortoise in more detail below.
We begin by reviewing the Tor network and describing its current
rate limiting features.
2. BACKGROUND
Tor is a volunteer-operated network of approximately 2,500 ap-
plication-layer routers (also called relays or ORs). The network
provides anonymity by forwarding trafﬁc from clients (also called
proxies or OPs) along a bidirectional anonymous circuit consisting
of Tor routers. To conceal the identities of the communicants, Tor
encrypts messages such that each relay can discern only the iden-
tities of the previous and next hops along the anonymous circuit.
By default, Tor uses three-relay hops, consisting of a guard relay, a
middle relay, and an exit relay.
Increasing the number of relays provides greater anonymity
and performance. The number and conﬁguration of Tor relays de-
termine the network’s performance and anonymity. A large num-
ber of (honest) relays provides strong anonymity since trafﬁc has a
(cid:2)(cid:1)(cid:3)
lower likelihood of traversing only malicious relays. (If the guard
and exit relays are malicious and colluding, then the adversary
can identify the sender and receiver of intercepted communica-
tion [19, 32].) In addition, an increase in the number of Tor relays
improves the performance of the network by providing additional
capacity, which in turn decreases congestion.
Ideally, each person who uses Tor would also run a Tor relay,
contributing some bandwidth to the network’s overall capacity. Un-
fortunately, the current ratio of end-clients to relays is estimated
to be 67:1 [15], leading to signiﬁcant congestion and poor perfor-
mance. This imbalance can be partially explained by the multiple
costs of running a Tor relay: Operating a relay taxes both the host-
ing computer as well as its network connection. In order to provide
a beneﬁt to the network, a router must be continuously online for
weeks before Tor clients will begin to use it. Additionally, when
Tor is conﬁgured to operate as an exit router, the operator’s com-
puter may appear to law enforcement ofﬁcials to be accessing ille-
gal content. Unlike the two other relays that comprise a Tor circuit,
the exit relay directly accesses the server requested by the sender;
if this service serves illegal content, it will appear to the outside
world that the request originated at the exit relay, putting the re-
lay’s operator at substantial risk. There are currently few incentives
to operating a relay, and it is reasonable to assume that most current
Tor relay operators volunteer their computer and network resources
for altruistic reasons.
Rate limiting in Tor. Tor includes rate limiting features that
allow relay operators to conﬁgure how much collective bandwidth
they wish to delegate for serving Tor trafﬁc. The existing function-
ality does not currently support per-connection rate limits, although
such features are present in alpha releases. As described below,
Tortoise extends Tor’s rate limiting by throttling clients’ inbound
trafﬁc.
3. DISMISSED: FILESHARER
IDENTIFICATION AND FILTERING
A seemingly plausible and straightforward method of reducing
the strain on the Tor network is to ﬁlter ﬁlesharing trafﬁc at exit
relays using standard port blocking. In fact, the Tor Project rec-
ommends that users running exit routers block BitTorrent’s default
ports [23]. However, such ﬁltering does little to deter determined
ﬁlesharers since users of these services can trivially switch to non-
standard ports.
Alternatively, exit relays could apply more advanced techniques
and perform deep packet inspection (DPI) and/or trafﬁc ﬁngerprint-
ing [13] on the trafﬁc that they forward. Recall that once a user’s
trafﬁc has reached the exit relay, it is no longer protected by any
layers of encryption that were applied by Tor (since the exit relay
must interface with the destination server as if it were the origi-
nal client). Hence, exit relays could examine outgoing trafﬁc and
discard any detected BitTorrent packets.
However, applying DPI and trafﬁc ﬁngerprinting at exit relays
suffers from several shortcomings. First, and perhaps most impor-
tantly, such strategies are antithetical to the goals of the Tor project.
Tor is an anonymity network whose principal purpose is to pro-
vide its users with unfettered Internet access without the fear that
their trafﬁc is being monitored. In order to be effective, the traf-
ﬁc blocking schemes described above would necessarily have to
violate Tor’s underlying philosophy by engineering eavesdropping
into the system’s design. Relatedly, another of Tor’s goals is to
allow its users to access content that would otherwise be unavail-
able to them; actively blocking content is incompatible with this
goal. Additionally, if Tor were to attempt to identify and limit cer-
(cid:6)(cid:17)(cid:16)(cid:13)(cid:19)(cid:24)
(cid:6)(cid:17)(cid:16)(cid:13)(cid:19)(cid:24)
(cid:7)(cid:16)(cid:17)(cid:13)(cid:23)(cid:15)(cid:12)(cid:22)(cid:16)(cid:19)(cid:14)(cid:1)(cid:12)(cid:21)(cid:21) (cid:11)(cid:20)(cid:22)(cid:1)(cid:9)(cid:22)(cid:20)(cid:26)(cid:27)(cid:1)(cid:3)(cid:8)(cid:9)(cid:4)
(cid:5)(cid:16)(cid:24)(cid:11)(cid:20)(cid:22)(cid:22)(cid:13)(cid:19)(cid:24)(cid:1)(cid:23)(cid:25)(cid:12)(cid:22)(cid:18)
(cid:7)(cid:16)(cid:17)(cid:13)(cid:23)(cid:15)(cid:12)(cid:22)(cid:16)(cid:19)(cid:14)(cid:1)(cid:12)(cid:21)(cid:21)
(cid:11)(cid:20)(cid:22)(cid:1)(cid:10)(cid:13)(cid:17)(cid:12)(cid:27)(cid:23)(cid:1)(cid:3)(cid:8)(cid:10)(cid:23)(cid:4)
(cid:11)(cid:20)(cid:22)(cid:1)(cid:9)(cid:22)(cid:20)(cid:26)(cid:27)(cid:1)(cid:3)(cid:8)(cid:9)(cid:4)(cid:1)(cid:2)
(cid:10)(cid:13)(cid:17)(cid:12)(cid:27)(cid:1)(cid:3)(cid:8)(cid:10)(cid:4)
(cid:11)(cid:20)(cid:22)(cid:1)(cid:10)(cid:13)(cid:17)(cid:12)(cid:27)(cid:23)(cid:1)(cid:3)(cid:8)(cid:10)(cid:23)(cid:4)
(cid:5)(cid:16)(cid:24)(cid:11)(cid:20)(cid:22)(cid:22)(cid:13)(cid:19)(cid:24)(cid:1)(cid:23)(cid:25)(cid:12)(cid:22)(cid:18)
Figure 1: Tortoise’s universal rate limiting. Dashed lines indicate connections that are subject to Tortoise’s universal rate limit. The
shaded circle encompasses relays that comprise the Tor network. Left: Client operates a OP and is subject to the universal rate limit.
Right: Client additionally operates an OR, increasing the size of the Tor network and becoming exempt from the universal rate limit.
tain types of trafﬁc, users generating that trafﬁc could always shape
their communication to resemble a type of trafﬁc not easily discrim-
inated against by Tor (for example, communication that is shaped
like encrypted web trafﬁc). Finally, performing either DPI or ﬁn-
gerprinting techniques imposes added complexity and increases the
relays’ computational costs.
At best, identifying ﬁlesharers is an arms race: detection ap-
proaches will likely be followed and countered by obfuscation tech-
niques, ad nauseam. In the next section, we present Tortoise, a uni-
versal rate limiting approach that is applied to all communication,
thereby evading this adversarial arms race.
4. TORTOISE
to the Tor network, bypassing Tortoise’s universal rate limit. We
posit that some bulk transfer users who ﬁnd their bandwidth on the
Tor network severely limited will be motivated to bypass the band-
width limits by running their own OR.
An illustration of Tortoise’s universal rate limiting is presented
in Figure 1. Initially (Figure 1, Left), a ﬁlesharing client tunnels
his trafﬁc through Tor and is subject to Tortoise’s universal rate
limit (indicated in the Figure with dashed lines). To achieve bet-
ter performance, the client then opts to also run a Tor relay (Fig-
ure 1, Right). The new relay increases the size of the Tor net-
work, which consequently decreases congestion and improves the
network’s overall performance.
4.1 Preventing Cheating
Tortoise modiﬁes Tor’s already-implemented (but not very uti-
lized) token-bucket system to limit users’ bandwidths at the net-
work’s ingress points. Our goal is to establish a universal rate limit
that imposes a heavy throughput penalty for users who use the net-
work for bulk transfers while not signiﬁcantly degrading the expe-
rience of users who use the anonymity service for interactive web
browsing.
By itself, a universal rate limit will do little to improve Tor’s
performance. Imposing bandwidth limits on bulk transfer users is
unlikely to reduce their overall effect on the network, since their use
of the Tor network already indicates their willingness to tolerate
slow speeds. For instance, halving their speeds with a universal
rate limit is likely only to double the time the bulk users spend on
the network. In general, merely penalizing bulk transfer users is a
zero-sum game.
An intuitive strategy is to apply a low universal rate limit to pro-
vide incentives to all users (both low- and high-bandwidth clients)
to operate Tor relays. However, many users of the Tor network
connect from totalitarian regimes where Internet access is severely
limited and subject to strict censorship. Requiring these users to
operate relays not only does not add signiﬁcant capacity to the Tor
network, such a policy may also physically endanger the operators.
Instead, Tortoise is designed to place the burden on users who re-
quire large bandwidths. That is, anyone can access Tor and achieve
bandwidth that is suitable for web browsing. Users who require
greater bandwidths are incentivized to also offer their services as
Tor relays.
Tortoise aims to improve the overall performance of the Tor net-
work not by trafﬁc shaping, but rather by increasing the capac-
ity of the network by encouraging users to run routers. Tortoise
achieves this goal by enforcing the universal rate limit only on Tor
OPs (clients); the connections between Tor ORs (relays) are not im-
pacted by Tortoise and are subject only to relay-speciﬁc bandwidth
limits. (As described below, Tortoise requires ORs to meet certain
conditions in order to be exempted from the universal rate limit.)
Hence, clients who also run routers can use their routers as bridges
High-bandwidth users who wish to evade the universal rate limit
may do so by operating their own relay. However, Tortoise should
ensure that those relays are actually contributing to the performance
of the Tor network in toto. For example, a user could attempt to
game the system by running a relay only when it wants to download
content at high speed, or it may operate a very low-bandwidth relay
that has little effect on the network’s overall capacity.
Tortoise mitigates these “cheats” by relying on status ﬂags main-
tained by the Tor directory servers. To prevent a user from tak-
ing advantage of Tortoise by running a router only at times when
they want increased performance, Tortoise requires that a router be
listed as STABLE in directory servers; connections from all other
routers are subject to the universal rate limit. We note that apply-
ing rate limits to non-STABLE routers will not signiﬁcantly impact
the performance of the network, since Tor’s default relay selection
strategy biases selection in favor of STABLE relays. In order to ap-
pear as STABLE, a router must have a mean-time-between-failures
greater than that of the median of all other routers [30]. At the time
of this writing, the 50th percentile of Tor routers had an uptime of
approximately four days.
Additionally, to prevent rewarding a user who operates a STA-
BLE relay that offers very little bandwidth to the Tor network, only
relays that are marked as FAST in the directory servers are excluded
from the universal rate limit. FAST routers are deﬁned as those that
offer at least 20KBps or have bandwidths that are in the top 87.5%
of known relays [30]. Tor’s default relay selection strategy also
heavily biases selection towards FAST relays, and hence applying
the universal rate limit to non-FAST relays will not signiﬁcantly de-
grade the performance of the network.
In summary, relays that are marked as STABLE and FAST are
exempt from the universal rate limit. Currently, these are exactly
the relays that are selected by Tor’s relay selection algorithms, and
consequently, are the relays that forward Tor’s trafﬁc.
(cid:2)(cid:1)(cid:3)
4.2 Anonymity Considerations
Average Web Page Sizes
At ﬁrst blush, it may appear that Tortoise allows eavesdroppers
to distinguish between encrypted trafﬁc that belongs to a ﬁlesharer
and that which belongs to a web client by measuring the monitored
connection’s throughput. However, upon inspection, this tactic will
be less effective than anticipated. While ﬁlesharers have the most
to gain by running a router under Tortoise, the beneﬁts are not con-
ﬁned to ﬁlesharers alone. The incentive to run a Tor relay applies
to all users who desire faster speeds through Tor, and hence high-
bandwidth trafﬁc may belong to any user who runs a relay.
Admittedly, since the goal in rate limit selection is to avoid ad-
versely affecting web browsing clients (see Section 5.1), it is likely
that Tortoise will more adversely affect ﬁlesharers, placing greater
incentives on that population. However, because there are an or-
der of magnitude more web users than ﬁle sharers using Tor [17],
distinguishing between web and ﬁlesharer trafﬁc remains difﬁcult.
For example, even if the participation rate (i.e., the rate of users
who decide to run routers as a result of Tortoise) is ten times higher
for ﬁlesharers than it is for web browsing clients, the number of
web browsing clients that decide to participate will still be three
times that of ﬁlesharers.
As with other incentive schemes that reward relay operators with
additional bandwidth [2, 5, 14], Tortoise reduces anonymity by forc-
ing a smaller sender anonymity set – the set of potential senders for
a given anonymous connection. With both standard Tor and Tor-
toise, any Internet-connected device can use the anonymity system,
and hence the sender anonymity set is quite large. However, Tor-
toise’s “differentiated services” (that is, the use of rate limited as
well as non-rate limited trafﬁc classes) permit the attacker to reason
that intercepted high-bandwidth data originates from a node that is
also a router. As more users run relays, the size of the anonymity set
will similarly increase, as will the anonymity offered by Tortoise.
Of course, any reduction in anonymity can be entirely avoided since
a relay operator may always choose to not take advantage of his in-
creased bandwidth.
5. EVALUATION
We evaluate Tortoise using ExperimenTor [3], a large-scale net-
work emulator that uses ModelNet [31] to model a network topol-
ogy. Our ExperimenTor deployment consists of two machines: a
edge node that runs all Tor relays, directory servers, clients, and
web servers, and a core that emulates the actual network. The
edge node has a 12-core 2.8GHz Xeon processor and runs Linux
2.6.35 and Tor version 0.2.1.28. Our default conﬁguration consists
of ﬁve authoritative directory servers, 15 relays, 900 clients, and 40
web/ﬁle servers. Our setup does not utilize guard relays, all relays
are potential exit relays, and directory servers do not relay trafﬁc.
Tor was extended to include Tortoise’s universal rate limiting ex-
tensions.
The core machine has a 2.8GHz Pentium D processor and runs
FreeBSD 6.3. We assign bandwidth capacities to the Tor relays by
randomly sampling bandwidths that were advertised in the live Tor
network’s directory servers in May 2011. Since Tor’s default relay
selection strategy is biased in favor of relays that offer the most
bandwidth [9], we select from only the highest 300 bandwidths
listed by the Tor directory server in order to achieve speeds that
closely resemble those of the real Tor network. (We note that in
the live Tor network, the ﬁrst 300 relays advertise 86.5% of the
network’s total capacity.) The core node simulates a topology in
which latencies between all nodes are less than 10ms.
We assign client bandwidths using two classes of client connec-
tions: residential and institutional. Residential connections are
n
o
i
t
c
a
r
f
e
v
i
t
l
a
u
m
u
C
0
1
.
8
.
0
6
.
0
4