# 2019 xctf final fault writeup
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
这道题目也是困惑了我好久，起初是看不懂程序功能逻辑，然后是看懂了逻辑找不到程序漏洞点在哪里，分析了良久，终于找到可疑点（程序解密的时候输入数据长度过长），此程序是一个AES加解密的程序，程序有一个后门函数，条件是要让输入的值等于程序起初随机生成的AES的key。经过艰辛的调试，终于弄明白题目如何去覆盖在bss段的key，从而使得满足条件，拿到flag。下面就开始分析一下我调试的过程以及覆盖的方法。
## 题目功能分析
题目main函数：
    __int64 __fastcall main(__int64 a1, char **a2, char **a3)
    {
      int v3; // eax
      sub_15DA();
      init_rand();
      while ( 1 )
      {
        while ( 1 )
        {
          while ( 1 )
          {
            v3 = (char)sub_18F1();
            if ( (char)v3 != 'd' )
              break;
            dec();
          }
          if ( v3 > 'd' )
            break;
          if ( v3 != 'c' )
            goto LABEL_13;
          check();                                  // rsa 加密rand
        }
        if ( v3 != 'e' )
          break;
        enc();
      }
      if ( v3 == 's' )
        shell();                                    // 需要rand值
    LABEL_13:
      puts("wrong option");
      return 0LL;
    }
题目保护全开，程序有以下几个功能：
1.encrypt
加密。AES-128加密。不同于原来的AES，这里的AES加密函数多了两个参数arg1,arg2，作用是在AES加密的第8轮时，堆input的矩阵input[arg1]
^=arg2。正常加密时这两个参数是0，则不影响加密结果。
    scanf("%32s", v2);
    getchar();
    str2hex((__int64)v2, (__int64)&input, 32);    // input -->2053d0  字符变hex数字
    v1 = sub_2E31(16LL);                          // malloc 44*4
    key_extension((__int64)&rand, (__int64)v1);
    AES((__int64)&input, (__int64)&output, (__int64)v1, byte_205440, byte_205441);
    printf02x((__int64)&output, 16);
    sub_22FF((__int64)v16, rand_1, 0);            // addRoundKeys
    for ( k = 1; k key point  越界写一个字节，修改output地址为rand地址，可实现将key覆盖为密文输出
     sub_2886((__int64)v16);                     // subBytes
     sub_26B5((__int64)v16);                     // shiftRows
     sub_24B9((__int64)v16);                     // MixColumns
     sub_22FF((__int64)v16, rand_1, k);          // addRoundKeys
    }
    sub_2886((__int64)v16);
    sub_26B5((__int64)v16);
    sub_22FF((__int64)v16, rand_1, dword_20545C);
2.decrypt解密。漏洞关键点，输入密文为64位，比预期大了32位，因此在解密后可能覆盖后面加密的两个参数arg1，arg2为任意值，由此可以通过encrypt函数的抑或来实现末位一字节写。
    scanf("%64s", s);                             // encdata
    getchar();
    putchar('>');
    scanf("%32s", v4);                            // rand_key
    getchar();
3.check 检查函数。对题目没帮助，只是提供checker检查方便。
4.shell 后门shell。只有输入的数据和程序bss段上的key相同时，才会输出flag。
    scanf("%32s", v4);
    sub_177C(v5, (__int64)&rand, 16);
    for ( i = 0; i <= 31; ++i )
    {
     if ( v4[i] != v5[i] )                       // 需要泄露rand内容，或者修改rand
       exit(0);
    }
    std::ifstream::basic_ifstream(v3, "/flag", 8LL);
## 漏洞点
1.decrypt函数存在解密后数据溢出漏洞，可覆盖栈中的arg1、arg2参数
2.encrypt函数存在下标溢出漏洞，可实现栈中数据任意一字节写。
## 利用
1.明文加密一次
2.解密一次,使用0x20覆盖加密函数的两个参数（此处用0x20是因为在栈上和input地址相差0x20的地方的地址指向的是output的地址，由此可以实现将output地址的最后一个字节改写成rand地址）  
bss段布局如下：
    .bss:00000000002053C0 randkey            db    ? ;               ; DATA XREF: init_rand+45↑o
    .bss:00000000002053C0                                         ; sub_16BC+23↑o ...
    .bss:00000000002053C1                 db    ? ;
    .bss:00000000002053C2           ..............................................
    .bss:00000000002053CF                 db    ? ;
    .bss:00000000002053D0 input           db    ? ;               ; DATA XREF: sub_16BC+4E↑o
    .bss:00000000002053D0                                         ; enc+3D↑o ...
    .bss:00000000002053D1                 db    ? ;
    .bss:00000000002053D2      ...................................
    .bss:00000000002053DF                 db    ? ;
    .bss:00000000002053E0 output_enc      db    ? ;               ; DATA XREF: sub_16BC+47↑o
    .bss:00000000002053E0                                         ; enc+8D↑o ...
    .bss:00000000002053E1                 db    ? ;
    .bss:00000000002053E2        ....................................
    .bss:00000000002053FF                 db    ? ;
    .bss:0000000000205400 input_randkey   db    ? ;               ; DATA XREF: dec+A7↑o
    .bss:0000000000205400                                         ; dec+E9↑o
    .bss:0000000000205401                 db    ? ;
    .bss:0000000000205402        ..................................
    .bss:000000000020540F                 db    ? ;
    .bss:0000000000205410 input_enc       db    ? ;               ; DATA XREF: dec+BF↑o
    .bss:0000000000205410                                         ; dec+139↑o
    .bss:0000000000205411                 db    ? ;
    .bss:0000000000205412              ........................................
    .bss:000000000020542F                 db    ? ;
    .bss:0000000000205430 output_dec      db    ? ;               ; DATA XREF: dec+125↑o
    .bss:0000000000205430                                         ; dec+170↑o
    .bss:0000000000205431                 db    ? ;
    .bss:0000000000205432       ..............................
    .bss:000000000020543F                 db    ? ;
    .bss:0000000000205440 byte_205440     db ?                    ; DATA XREF: enc+77↑r
    .bss:0000000000205441 byte_205441
3.再次使用相同明文加密,使得异或修改output_enc地址为rand地址,实现覆盖key为输出的密文,输出则为key
4.输入key,拿到flag
## 调试过程
1.先经过加密，初始化key和output_enc地址
2.解密，用0x20的密文解密生成明文0x20，去覆盖AES加密的参数为0x20，调试如下：
       0x55d955061dc8                  mov    rdx, rax
       0x55d955061dcb                  lea    rsi, [rip+0x20360e]        # 0x55d9552653e0
       0x55d955061dd2                  lea    rdi, [rip+0x2035f7]        # 0x55d9552653d0
     → 0x55d955061dd9                  call   0x55d955062eaf   #AESenc
       ↳  0x55d955062eaf                  push   rbp
          0x55d955062eb0                  mov    rbp, rsp
          0x55d955062eb3                  push   r12
          0x55d955062eb5                  push   rbx
          0x55d955062eb6                  sub    rsp, 0x40
          0x55d955062eba                  mov    QWORD PTR [rbp-0x38], rdi
    ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── arguments (guessed) ────
    0x55d955062eaf (
       $rdi = 0x000055d9552653d0 → 0xf876b7f7f876b7f7,       # input
       $rsi = 0x000055d9552653e0 → 0x309596f547c8c6fc,       # output
       $rdx = 0x000055d955927da0 → 0xf8dfe8ebca9696bf,       # randkey(堆上的)
       $rcx = 0x0000000000000000       <------------- arg1 arg2
    )
可看到两个参数均为0，继续解密，输入64位密文，得到64位明文，覆盖掉output_dec下面的 arg1 arg2，覆盖成0x20：
    gef➤  x/16gx 0x000055d955060000+0x205430  #output addr
    0x55d955265430:    0x2020202020202020    0x2020202020202020
    0x55d955265440:    0x2020202020202020 <-- 0x2020202020202020 #arg1 arg2 overwrite to 0x20
3.再次加密，将output_enc地址最后一字节修改使其变成randkey地址，两者相差0x20，所以arg1 = 0x20（下标），arg2 =
0x20（亦或下标为0x20的数据，使其为0xc0），调试如下：
    $rax   : 0xe0              
    $rbx   : 0x00007ffdd2d2d060  →  0x00083620d2d2d220
    $rcx   : 0xea              
    $rdx   : 0x00007ffdd2d2d050  →  0x63b5b45642fb9bcd
    $rsp   : 0x00007ffdd2d2d050  →  0x63b5b45642fb9bcd
    $rbp   : 0x00007ffdd2d2d0b0  →  0x00007ffdd2d2d100  →  0x00007ffdd2d2d120  →  0x000055d955063340  →   push r15
    $rsi   : 0xb2              
    $rdi   : 0x00007ffdd2d2d050  →  0x63b5b45642fb9bcd
    $rip   : 0x000055d955062ff4  →   movzx esi, BYTE PTR [rbp-0x50]
    $r8    : 0x20              
    $r9    : 0x10              
    $r10   : 0x0               
    $r11   : 0x10              