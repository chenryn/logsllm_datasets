复现环境：
  1. win10
  2. python2.7
  3. java1.8
首先生成[有效载荷](http://jackson.thuraisamy.me/runtime-exec-payloads.html),由于是在windows环境下，所以使用powershell作为攻击载体。  
用ysoserial生成针对Groovy库的payload  
`java -jar ysoserial.jar Groovy1 "powershell.exe -NonI -W Hidden -NoP -Exec
Bypass -Enc bQBrAGQAaQByACAAaABhAGMAawBlAGQAXwBiAHkAXwBwAGgA MAByAHMAZQA=" >
payload2.bin`  
在DeserLab的Github项目页面下载DeserLab.jar  
命令行下使用`java -jar DeserLab.jar -server 127.0.0.1 6666`开启本地服务端。  
使用[deserlab_exploit.py]()脚本【上传到自己的github gist页面上】生成payload：  
`python deserlab_exploit.py 127.0.0.1 6666 payload2.bin`  
PS:注意使用py2.7
成功写入：  
即可执行任意命令
### 反序列化修复
每一名Java程序员都应当掌握防范反序列化漏洞的编程技巧、以及如何降低危险库对应用造成的危害。
#### 对于危险基础类的调用
下载这个[jar](https://github.com/ikkisoft/SerialKiller)后放置于classpath，将应用代码中的java.io.ObjectInputStream替换为SerialKiller，之后配置让其能够允许或禁用一些存在问题的类，SerialKiller有Hot-Reload,Whitelisting,Blacklisting几个特性，控制了外部输入反序列化后的可信类型。
#### 通过Hook resolveClass来校验反序列化的类
在使用readObject()反序列化时首先会调用resolveClass方法读取反序列化的类名，所以这里通过重写ObjectInputStream对象的resolveClass方法即可实现对反序列化类的校验。具体实现代码Demo如下:
    public class AntObjectInputStream extends ObjectInputStream{
        public AntObjectInputStream(InputStream inputStream)
                throws IOException {
            super(inputStream);
        }
        /**
         * 只允许反序列化SerialObject class
         */
        @Override
        protected Class resolveClass(ObjectStreamClass desc) throws IOException,
                ClassNotFoundException {
            if (!desc.getName().equals(SerialObject.class.getName())) {
                throw new InvalidClassException(
                        "Unauthorized deserialization attempt",
                        desc.getName());
            }
            return super.resolveClass(desc);
        }
    }
通过此方法，可灵活的设置允许反序列化类的白名单，也可设置不允许反序列化类的黑名单。但反序列化漏洞利用方法一直在不断的被发现，黑名单需要一直更新维护，且未公开的利用方法无法覆盖。
    org.apache.commons.collections.functors.InvokerTransformer
    org.apache.commons.collections.functors.InstantiateTransformer
    org.apache.commons.collections4.functors.InvokerTransformer
    org.apache.commons.collections4.functors.InstantiateTransformer
    org.codehaus.groovy.runtime.ConvertedClosure
    org.codehaus.groovy.runtime.MethodClosure
    org.springframework.beans.factory.ObjectFactory
    com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl
    org.apache.commons.fileupload
    org.apache.commons.beanutils
根据以上方法，有大牛实现了线程的[SerialKiller](https://github.com/ikkisoft/SerialKiller)包可供使用。
#### 使用ValidatingObjectInputStream来校验反序列化的类
使用Apache Commons IO
Serialization包中的ValidatingObjectInputStream类的accept方法来实现反序列化类白/黑名单控制，具体可参考ValidatingObjectInputStream介绍；示例代码如下:
    private static Object deserialize(byte[] buffer) throws IOException,
    ClassNotFoundException , ConfigurationException {
        Object obj;
        ByteArrayInputStream bais = new ByteArrayInputStream(buffer);
        // Use ValidatingObjectInputStream instead of InputStream
        ValidatingObjectInputStream ois = new   ValidatingObjectInputStream(bais); 
        //只允许反序列化SerialObject class
        ois.accept(SerialObject.class);
        obj = ois.readObject();
        return obj;
    }
#### 使用contrast-rO0防御反序列化攻击
contrast-rO0是一个轻量级的agent程序，通过通过重写ObjectInputStream来防御反序列化漏洞攻击。使用其中的SafeObjectInputStream类来实现反序列化类白/黑名单控制，示例代码如下:
    SafeObjectInputStream in = new SafeObjectInputStream(inputStream, true);
    in.addToWhitelist(SerialObject.class);
    in.readObject();
#### 使用ObjectInputFilter来校验反序列化的类
Java
9包含了支持序列化数据过滤的新特性，开发人员也可以继承java.io.ObjectInputFilter类重写checkInput方法实现自定义的过滤器，，并使用ObjectInputStream对象的setObjectInputFilter设置过滤器来实现反序列化类白/黑名单控制。示例代码如下:
    import java.util.List;
    import java.util.Optional;
    import java.util.function.Function;
    import java.io.ObjectInputFilter;
    class BikeFilter implements ObjectInputFilter {
        private long maxStreamBytes = 78; // Maximum allowed bytes in the stream.
        private long maxDepth = 1; // Maximum depth of the graph allowed.
        private long maxReferences = 1; // Maximum number of references in a graph.
        @Override
        public Status checkInput(FilterInfo filterInfo) {
            if (filterInfo.references()  maxReferences || filterInfo.depth() > maxDepth|| filterInfo.streamBytes() > maxStreamBytes) {
                return Status.REJECTED;
            }
            Class clazz = filterInfo.serialClass();
            if (clazz != null) {
                if (SerialObject.class == filterInfo.serialClass()) {
                    return Status.ALLOWED;
                }
                else {
                    return Status.REJECTED;
                }
            }
            return Status.UNDECIDED;
        } // end checkInput
    } // end class BikeFilter
上述示例代码，仅允许反序列化SerialObject类对象。
#### 禁止JVM执行外部命令Runtime.exec
通过扩展SecurityManager
    SecurityManager originalSecurityManager = System.getSecurityManager();
            if (originalSecurityManager == null) {
                // 创建自己的SecurityManager
                SecurityManager sm = new SecurityManager() {
                    private void check(Permission perm) {
                        // 禁止exec
                        if (perm instanceof java.io.FilePermission) {
                            String actions = perm.getActions();
                            if (actions != null && actions.contains("execute")) {
                                throw new SecurityException("execute denied!");
                            }
                        }
                        // 禁止设置新的SecurityManager，保护自己
                        if (perm instanceof java.lang.RuntimePermission) {
                            String name = perm.getName();
                            if (name != null && name.contains("setSecurityManager")) {
                                throw new SecurityException("System.setSecurityManager denied!");
                            }
                        }
                    }
                    @Override
                    public void checkPermission(Permission perm) {
                        check(perm);
                    }
                    @Override
                    public void checkPermission(Permission perm, Object context) {
                        check(perm);
                    }
                };
                System.setSecurityManager(sm);
            }
#### 不建议使用的黑名单
在反序列化时设置类的黑名单来防御反序列化漏洞利用及攻击，这个做法在源代码修复的时候并不是推荐的方法，因为你不能保证能覆盖所有可能的类，而且有新的利用payload出来时也需要随之更新黑名单，但有一种场景下可能黑名单是一个不错的选择。写代码的时候总会把一些经常用到的方法封装到公共类，这样其它工程中用到只需要导入jar包即可，此前已经见到很多提供反序列化操作的公共接口，使用第三方库反序列化接口就不好用白名单的方式来修复了。这个时候作为第三方库也不知道谁会调用接口，会反序列化什么类，所以这个时候可以使用黑名单的方式来禁止一些已知危险的类被反序列化，具体的黑名单类可参考contrast-rO0、ysoserial中paylaod包含的类。
### 总结
感觉在实战中遇到的Java站点越来越多，Java反序列化漏洞的利用也愈发显得重要。除了常见的Web服务反序列化，安卓、桌面应用、中间件、工控组件等等的反序列化。以及XML（前一阵的Weblogic挖矿事件就是XMLDecoder引起的Java反序列化）、JSON、RMI等细致化的分类。  
代码审计及渗透测试过程中可以翻阅我翻译的一份[Java反序列化漏洞备忘单](https://xianzhi.aliyun.com/forum/topic/2042)，里面集合了目前关于Java反序列化研究的大会PPT、PDF文档、测试代码，以及权威组织发布的漏洞研究报告，还有被反序列化攻破的应用清单（附带POC）。  
这着实是一个庞大的知识体系，笔者目前功力较浅，希望日后还能和各位师傅一起讨论、学习。