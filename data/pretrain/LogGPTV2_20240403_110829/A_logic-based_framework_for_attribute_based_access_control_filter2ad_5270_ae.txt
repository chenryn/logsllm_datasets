E. Bertino, B. Catania, E. Ferrari, and P. Perlasca. A
logical framework for reasoning about access control
models. ACM Transactions on Information and System
Security, 6(1):71–127, February 2003.
R. M. Burstall and J. Darlington. A transformation
system for developing recursive programs. Journal of the
ACM, 24(1):44–67, January 1977.
Piero Bonatti and Pierangela Samarati. Regulating
service access and information release on the web. In
Proceedings of the 7th ACM conference on Computer
and communications security, pages 134–143. ACM
Press, 2000.
Piero Bonatti and Pierangela Samarati. A uniform
framework for regulating service access and information
release on the web. Journal of Computer Security,
10(3):241–272, 2002.
Steve Barker and Peter J. Stuckey. Flexible access
control policy speciﬁcation with constraint logic
programming. ACM Transactions on Information and
System Security, 2004. to appear.
David Chan. Constructive negation based on the
completed databases. In R. A. Kowalski and K. A.
Bowen, editors, Proc. International Conference on Logic
Programming (ICLP), pages 111–125. The MIT Press,
1988.
David Chan. An extension of constructive negation and
its application in coroutining. In E. Lusk and
R. Overbeek, editors, Proc. North-American Conference
on Logic Programming, pages 477–489. The MIT Press,
1989.
Agostino Dovier, Carla Piazza, Enrico Pontelli, and
Gianfranco Rossi. Sets and constraint logic
programming. ACM Transactions of Programming
Languages and Systems, 22(5):861–931, 2000.
Agostino Dovier, Alberto Policriti, and Gianfranco
Rossi. A uniform axiomatic view of lists, multisets, and
sets, and the relevant uniﬁcation algorithms.
Fundamenta Informaticae, 36(2/3):201–235, 1998.
Agostino Dovier, Carla Piazza, and Gianfranco Rossi. A
uniform approach to constraint-solving for lists,
multisets, compact lists, and sets. Technical Report
Quaderno 235, Department of Mathematics, University
of Parma, Italy, 2000.
Agostino Dovier, Enrico Pontelli, and Gianfranco Rossi.
Constructive negation and constraint logic programming
with sets. New Generation Comput, 19(3):209–256, May
2001.
Sandro Etalle and Maurizio Gabbrielli. Transformations
of clp modules. Theoretical Computer Science,
166:101–146, 1996.
Francois Fages. Constructive negation by pruning.
Journal of Logic Programming, 32(2):85–118, 1997.
Melvin C. Fitting and Marion Ben-Jacob. Stratiﬁed,
weak stratiﬁed, and three-valued semantics. Fundamenta
Informaticae, Special issue on LOGIC
PROGRAMMING, 13(1):19–33, March 1990.
Francois Fages and Roberta Gori. A hierarchy of
semantics for normal constraint logic programs. In
Algebraic and Logic Programming, pages 77–91, 1996.
Melvin C. Fitting. A kripke-kleene semantics for logic
programs. Journal of Logic Programming, 2(4):295–312,
1985.
Melvin C. Fitting. Fixedpoint semantics for logic
programming. Theoretical Computer Science, 278:25–31,
2002.
Joxann Jaﬀar and Jean-Louise Lassez. Constraint logic
programming. Proceedings of Principles of of
Programming Languages, pages 111–119, 1987.
Sushil Jajodia, Pierangela Samarati, Maria Louisa.
Sapino, and V. S. Subrahmanian. Flexible support for
multiple access control policies. ACM Transactions on
Database Systems, 26(2):214–260, June 2001.
Dexter C. Kozen. Set constraints and logic
programming. Information and Computation, 142:2–25,
1998. Article No IC972694.
Kenneth J. Kunen. Set theory: an introduction to
independence proofs. Elsevier North-Holland, 1980.
Kenneth J. Kunen. Negation in logic programming.
Journal of Logic Programming, 4(4):298–308, December
1987.
N. Li, J.C. Mitchell, and W.H. Winsborough. Design of
a role-based trust management framework. In Proc.
IEEE Symposium on Security and Privacy, Oakland,
pages 114–130, 2002.
Ninghui Li, John C. Mitchell, and William H.
Winsborough. Design of a role-based trust management
framework. In Proc. IEEE Symposium on Security and
Privacy, Oakland, May 2002.
Michael J. Maher. A transformation system for deductive
database modules with perfect model semantics.
Theoretical Computer Science, 110:377–403, 1993.
Alberto Petterossi and Maurizio Proietti.
Transformation of Logic Programs, volume 5, chapter
Handbook of Logic in Artiﬁcial Intelligence and Logic
Programming, pages 697–787. Oxford University Press,
1998.
R. Sandhu, E. Coyne, H. Feinstein, and C. Youman.
Role-based access control models. IEEE Computer,
29(2):38–47, Febraury 1996.
Peter J. Stuckey. Constructive negation for constraint
logic programming. In Logic in Computer Science, pages
328–339, 1991.
Peter J. Stuckey. Negation and constraint logic
programming. Information and Computation,
118(1):12–33, 1995.
H. Tamaki and T. Sato. Unfold/fold transformation of
logic programs. In Proceedings of the Second
International Logic Programming Conference, pages
127–138, 1984.
Duminda Wijesekera, Sushil Jajodia, Francesco
Parisi-Presicce, and Asa Hagstrom. Removing
permissions in the ﬂexible authorization framework.
ACM Transactions of Database Systems, 28(3):209–229,
September 2003.
T. Yu, M. Winslett, and K.E. Seamons. Prunes: an
eﬃcient and complete strategy for automated trust
negotiation over the internet. In Proceedings of the 7th
ACM conference on Computer and communications
security, pages 210–219. ACM Press, 2000.
T. Yu, M. Winslett, and K.E. Seamons. Interoperable
strategies in automated trust negotiation. In Proceedings
of the 8th ACM conference on Computer and
Communications Security, pages 146–155. ACM Press,
2001.
T. Yu, M. Winslett, and K.E. Seamons. Supporting
structured credentials and sensitive policies through
interoperable strategies for automated trust negotiation.
ACM Transactions on Information and System Security
(TISSEC), 6(1):1–42, 2003.
APPENDIX
A. PROOFS
Proof of Lemma 1: To prove the ﬁrst claim, according
to deﬁnition 1 the reserved predicates are cando, dercando
and do. We consider each of them now.
cando: cando(−,−,−,{∅})←B where B consists of non-re
served predicates or is empty. This is the only allowed
form of cando in a rule head. Thus,
R(cando(−,−,−,{∅})) = 1 and R(b) = 0 for any pred-
icate b in B.
dercando(−,−,−, Z) is in the body and
dercando(−,−,−, Z
for some set U . Hence by deﬁnition 5,
R(dercando(−,−,−, Z)) ≥
1 + R(dercando(−,−,−, Z
(cid:3)
dercando(−,−, +, Z) head. The only rule with a
dercando(−,−, +(−), Z) head is do(X, Y,−,{Z})←
¬do(X, Y, +, Z). Thus, R(do(X, Y,−,{Z})) = 1 + R
(do(X, Y, +, Z)).
dercando: According to the third rule in deﬁnition 1,
) is in the body, then Z = {Z
do: The same argument applies for rules with a
if
(cid:3)|U}
(cid:3)
)).
Now we use the ﬁrst claim to justify the second. Suppose
that (A∪{p(2s)}, C) →1 (A∪B, C∪C”∪{2s = 2t}) is a one-step
derivation using the ABAC rule p(2t)←B, C” is a rule in P
and p(2s)←B, C” is a fresh instance of p(2s)←B, C”. To prove
that R(A ∪ {p(2s)}) > R(A ∪ B), suppose R(A ∪ {p(2s)}) =
(km, . . . , k0), R(P ) = t 
(km, . . . , kt+1, kt − 1, kt, . . . , ki + ti, . . . , k0), implying R(A∪
{p(2s)}) > R(A ∪ B).
Proof of Theorem 1: Suppose (A, C) →1 (A0, C0) →1
(A1, C1), . . . is an inﬁnite sequence of one-step reductions.
Then by lemma 1, R(A, C) > R(A0, C0) > . . . is an inﬁnite
descending sequence, contradicting the well-foundedness of
the rank function. This is a contradiction, as the lexico-
graphical ordering on integers is well-founded.
Proof of Theorem 3: The proof follows from the fact that
at each step i of the construction in algorithm 2 ensure that
MSi(P) correctly materializes Φi ↑ (P). Consequently, our
proof works by induction on i - the strata of the instantia-
tion of the fourth varibale of reserved predicates.
Strata 0: By the deﬁnition of Φω ↑ (P), Φ0 ↑ (P)(H(2c)) =
T iﬀ H(2c) ∈ P. By algorithm 2, (H(2c),{i}) ∈ MS0(P) where
{i} is the index of H(2c) chosen according to some rule index-
ing schema. Thus Φω ↑ (P)(H(2c)) = T iﬀ H(2c) ∈ MS0(P),
satisfying the ﬁrst condition for Φω ↑ (P) to correctly model
trivially, as A(2c) gets materialized in the stage immediately
after b(2c, 2c(cid:3)) gets materialized for all non-constraint predi-
cates b in the body B. Now suppose A(2c) becomes a rule
at the n + 1th stage of algorithm 1. Then, A(2c) must be
a result of applying unfolding to some rule, A←C, B say
cl. Then, it must be that the ranks of each non-constraint
predicate b of B must be less than or equal to n. Because if
all their ranks were less than n, then A(2c) gets unfolded at
most stage n. Then there must be a non-constraint predicate
(say) b with R(b(2c, 2c(cid:3))) = n Then by the inductive hypothe-
sis Φn ↑ (P)(B(2c, 2c(cid:3))) = T , implying Φn+1 ↑ (P)(A(2c)) = T .
P. The second condition is vacuously satisﬁed as, by deﬁ-
nition 1 the only rules in which base predicates appear as
heads are the ones with empty bodies.
Strata n+1: Suppose the inductive hypothesis holds for all
instances of atoms of lower ranks and H(2c) is an instance of a
reserved predicate of rank n+1. Then there must be at least
one rule in which the body has at least one reserved pred-
icate with rank n. Choose any such rule cl, say H←C, B.
There are two cases to consider.
Case 1: Φn ↑ (P)(B(2c, 2c(cid:3))) = T . For the ﬁrst condition,
suppose C(2c, 2c(cid:3)) is satisﬁable. Furthermore, Φn ↑ (P)(b(2c, 2c(cid:3)
)) = T . Thus by the inductive hypothesis b(2c, 2c(cid:3)) ∈ MSn(P).
Then by algorithm 2 (H(2c), I) ∈ MSn(P) for a set I of rule
indices. Thus the ﬁrst condition for MS(P) correctly materi-
alizing P is met by satisfying both sides of the by-implication
stated in deﬁnition 7.
For the second condition, consider any rule cl where H(2c)
has rank n + 1 and Φω ↑ (P)(B(2c, 2c(cid:3))) = T . Then it could
be shown by induction that Φn ↑ (P)(B(2c, 2c(cid:3))) = T . Now
by repeating the previous part of the argument, if C(2c, 2c(cid:3))
is satisﬁable, then (H(2c), I) ∈ MS(P) where ˆcl ∈ I, for some
rule set index I that contain ˆcl.
Case 2: Φn ↑ (P)(B(2c)) (cid:17)= T . This could be so due to one
of two factors: (1) Φn ↑ (P)(b(2c, 2c(cid:3))) (cid:17)= T for some atom
b ∈ B. (2) C(2c, 2c) does not hold. If (1) is the case, then by
the inductive hypothesis, (b, I) (cid:17)∈ MSn(P) for any index set
I. In either case, the inductive step of algorithm 2 does not
add H(2c,{ ˆcl}) into MSn+1(P). Therefore the ﬁrst condition
of correctness criteria in deﬁnition 7 holds.
The second condition is satisﬁed because, as stated the
inductive step of algorithm 2 does not add any steps when
Φn ↑ (P)(B(2c)) (cid:17)= T .
Proof of Theorem 4: We prove by induction on the rank
of the predicate instance A(2c).
The Base Case R(A((cid:3)c)) = 0 : In this case, the predicate
is a base predicate. Thus either A(2x) or A(2c) appears in P,
or A only appear in bodies of rules with reserved word heads.
If the ﬁrst case occurs, Φω(P)(A(2c(cid:3))) = T for all constant
vectors 2c(cid:3). If the second case occours then Φω(P)(A(2c)) = T
for only those combinations. As algorithms (1) and (2) show
these are the only conditions under which an instantiated
zero ranked reserved predicate becomes a rule and materi-
alized respectively.
The Inductive Case R(A((cid:3)c) = n+1 : Suppose the claim
is true for all instantiated predicates with ranks m ≤ n, and
R(A) = n + 1. Under stated assumptions, A(2x) appears as
a head in some rule cl = H←C, B, because otherwise it
cannot have a positive rank, as R(A(2c)) = n + 1 > 0.
Now suppose A(2x) appears as a head in some rule cl =
H←C, B with the usual convention that C and B are the
constraint and non-constraint predicates. Suppose Φn+1(A(2c
)) = T . Then C(2c) must be valid and Φn ↑ (P)(B(2c)) = T .
Thus by algorithm 2, (A(2c), I) ∈ MSn+1 for some rule in-
dex set I satisfying cl ∈ I. Furthermore, by the inductive
hypothesis, B(2c, 2c(cid:3)) are rules in the nth transformed policy.
Therefore, by applying unfolding with cl we get that A(2c)
is a rule at the n + 1th transformed policy. The implication
from the materialization to the truth in Φn+1 ↑ (P) follows