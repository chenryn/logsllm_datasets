key pointer in all of the identiﬁed NcryptSslKeys led to the output depicted in
Figure 4.17, which clearly shows ssl4, ssl5, and ssl6 key structures being referenced.
0:000> .foreach(nKey {s -[1w]a 0 L?800000000000 BDDD}){db poi(${nKey}-4+10) L10;}
0000005e‘e72d2500
50 00 00 00 35 6c 73 73-03 03 00 00 00 00 00 00
P...5lss........
0000005e‘e73544d0
50 00 00 00 35 6c 73 73-03 03 00 00 00 00 00 00
P...5lss........
0000005e‘e725e840
20 00 00 00 34 6c 73 73-01 00 03 00 00 00 00 00
...4lss........
0000005e‘e72fa520
50 00 00 00 35 6c 73 73-03 03 00 00 00 00 00 00
P...5lss........
0000005e‘e72cf580
20 00 00 00 36 6c 73 73-0a 00 03 00 00 00 00 00
...6lss........
0000005e‘e72fbba0
50 00 00 00 35 6c 73 73-03 03 00 00 00 00 00 00
P...5lss........
0000005e‘e72fb790
50 00 00 00 35 6c 73 73-03 03 00 00 00 00 00 00
P...5lss........
0000005e‘e72cfd60
20 00 00 00 36 6c 73 73-0a 00 03 00 00 00 00 00
...6lss........
0000005e‘e72cf9c0
20 00 00 00 34 6c 73 73-01 00 03 00 00 00 00 00
...4lss........
0000005e‘e72fd770
50 00 00 00 35 6c 73 73-03 03 00 00 00 00 00 00
P...5lss........
0000005e‘e73551f0
50 00 00 00 35 6c 73 73-03 03 00 00 00 00 00 00
P...5lss........
Figure 4.17. NcryptSslKey instances Dereferenced (x64)
After exhausting the two pointers in the NcryptSslKey structure, another
pointer scan was performed with the addresses of the NcryptSslKeys associated with
master keys. This consistently led to at least one, but sometimes more than one,
pointer to those NcryptSslKeys instances. The context around these pointers was
inspected, which did not yield any magic values but did lead to consistency
denoting a managed structure and an important ﬁnding – a unique public value.
Values heuristically matching the session ID pattern were spotted reliable at
0x70 bytes below one pointer to every NcryptSslKey that pointed to a master key.
As discussed in the Checkoway paper, each of these values had two sets of zeros in
79
the third and fourth position due to a peculiarity in the session ID generation
mechanism employed by Windows (Checkoway et al., 2014). One of these suspected
IDs matched the session ID from the test connection, conﬁrming this speculation.
Figure 4.18 shows an example of mapping master keys to session IDs by pointer
scanning, and then dumping the session ID. Extraneous pointers are ﬁltered on the
loose ﬁngerprint of two non-zero bytes followed by two zero bytes in the ﬁrst dword
of the possible session ID.
0:000> .foreach(sslSess {.foreach (BDDDPoi {.foreach(ssl5Key {s -[1w]d 0x0 L?800000000000 ’ssl5’}){s
-[1]q 0x0 L?800000000000 ${ssl5Key}-4;}}){s -[1]q 0x0 L?80000000000 ${BDDDPoi}-10}}){.if (dwo(${
sslSess}+78) = 0x00000101){db ${sslSess}+78 L20;.echo ***}}
0000005e‘e72e5c08
78 1f 00 00 f3 50 8a 72-39 87 ba 3b cb 15 fb 48
x....P.r9..;...H
0000005e‘e72e5c18
a8 1d 89 61 d1 94 b0 15-eb 64 b5 4f 05 a0 ad 3d
...a.....d.O...=
***
0000005e‘e72e5ac8
29 2b 00 00 c6 6f 97 9b-a0 f8 eb 44 26 01 79 f3
)+...o.....D&.y.
0000005e‘e72e5ad8
82 f4 66 cc ae ac 81 d5-d6 e2 97 e5 11 90 bf 27
..f............’
***
0000005e‘e72ffd78
d4 17 00 00 da 09 f8 59-67 39 21 5e 21 6c 49 65
.......Yg9!^!lIe
0000005e‘e72ffd88
68 fa 66 e4 2a c3 2b 97-4d 44 09 49 df f3 3d 2b
h.f.*.+.MD.I..=+
***
0000005e‘e67fe1d8
b9 3c 00 00 a1 10 69 0b-4a e9 11 1b ce 57 25 c6
. .foreach(cacheSess {s -[w1]q 0x0 L?800000000000 schannel!CSessionCacheServerItem::‘vftable’}){.
echo **SERVER*********;.echo **SessID**;db ${cacheSess}+88 L20;.echo **MasterKey**;db poi(poi(${
cacheSess}+10)+10)+1C L30};.foreach(cacheSess {s -[w1]q 0x0 L?800000000000 schannel!
CSessionCacheClientItem::‘vftable’}){.echo **CLIENT*********;.echo **SessID**;db ${cacheSess}+88
L20;.echo **MasterKey**;db poi(poi(${cacheSess}+10)+10)+1C L30}
**SERVER*********
**SessID**
0000005e‘e67fe1d8
b9 3c 00 00 a1 10 69 0b-4a e9 11 1b ce 57 25 c6
.Qb.n.E......2
0000005e‘e72fbbdc
23 f3 db e0 15 4e 30 d7-86 9b db 7a b6 6f 53 18
#....N0....z.oS.
**SERVER*********
**SessID**
0000005e‘e72ffd78
d4 17 00 00 da 09 f8 59-67 39 21 5e 21 6c 49 65
.......Yg9!^!lIe
0000005e‘e72ffd88
68 fa 66 e4 2a c3 2b 97-4d 44 09 49 df f3 3d 2b
h.f.*.+.MD.I..=+
**MasterKey**
0000005e‘e72fb7ac
44 b5 03 be f7 84 2e a9-a4 16 fb f8 b6 3b 93 2b
D............;.+
0000005e‘e72fb7bc
23 b7 b6 87 fb f5 29 7b-25 3e ac 42 78 77 c8 e1
#.....){%>.Bxw..
0000005e‘e72fb7cc
15 95 e1 4c 3f 00 c4 0b-f2 a0 f4 68 8d e0 b7 aa
...L?......h....
**CLIENT*********
**SessID**
0000005e‘e72e5988
6f 23 00 00 a0 21 aa c4-8d 15 54 45 24 c1 45 4e
o#...!....TE$.EN
0000005e‘e72e5998
4e c0 1d 5a db 30 5d 8d-9d 57 ab 2b 99 1d d5 97
N..Z.0]..W.+....
**MasterKey**
0000005e‘e735520c
8b c9 e9 df 65 3e 3c bf-53 3b e8 4c 68 97 78 7b
....e>
Figure 4.19. Schannel CSslCacheItem parsing (x64)
82
Being able to scan once and then reference the pointers forward is far more
eﬃcient than scanning multiple times to walk the pointers inversely, however, it
relies on symbols. The symbols, in this case, simply provide an o↵set from the base
of the image to the address where the vftable can be found (in the .rdata section of
Schannel). The diﬃculty is that this o↵set cannot be statically referenced due to
the mutability of the vftable location, which can change with every version of
Schannel. The Schannel dll may be arbitrarily updated for any number of reasons,
causing variations even within a given Windows release. The implications of this for
the main memory analysis suites will be discussed in a later section.
The SslCacheServerItem and the SslCacheClientItem di↵er in length and
composition, as expected. One interesting artifact of the SslCacheClientItem is a
pointer to the public certiﬁcate for the connection that appears directly after the
pointer to the master key, providing additional context about the other end of the
connection. There is also a pointer to the Unicode server name, though this value
can also be empty. The total size of each class, while technically unknown, has been
roughly estimated through comparison of many instantiations across samples to be
approximately 0x140 bytes.
Time constraints and the the ability to map the master key to the session ID
meant that full enumeration of the members of these classes was left for future
work. The members that were identiﬁed are shown in Figure 4.20. Because there
are a large number of unknowns, Figure 4.20 depicts the known values in the
Volatility VType format, which provides a structure length, then members with an
o↵set into the structure and a data type.
83
’_SSL_SESSION_CACHE_CLIENT_ITEM’: [ 0x140, {
’ClassVftable’: [0x0, [’pointer64’, [’void’]]],
’MasterKey’: [0x10, [’pointer64’, [’void’]]],
’PublicCertificate’: [0x18, [’pointer64’, [’void’]]],
’PublicKey’: [0x28, [’pointer64’, [’void’]]],
’NcryptSslProv’: [0x60, [’pointer64’, [’void’]]],
’SessionID’: [0x88, [’array’, 0x20, [’unsigned char’]]],
’ServerName’: [0xf8, [’pointer64’, [’void’]]],
’SessionTicket’: [0x128, [’pointer64’, [’void’]]]
’CSessCacheManager’: [0x110, [’pointer64’, [’void’]]]
}]
’_SSL_SESSION_CACHE_SERVER_ITEM’: [ 0x140, {
’ClassVftable’: [0x0, [’pointer64’, [’void’]]],
’MasterKey’: [0x10, [’pointer64’, [’void’]]],
’NcryptSslProv’: [0x60, [’pointer64’, [’void’]]],
’SessionID’: [0x88, [’array’, 0x20, [’unsigned char’]]],
’CSslCredential’: [0xf0, [’pointer64’, [’void’]]]
}]
Figure 4.20. Schannel CSslCacheItem V-Types (x64)
One point of note is that the cache may not always contain a session ID, but
may instead reference a session ticket if it is a client cache. This was ﬁrst noticed
during a brief test that was not originally going to be included in the thesis. Skype
was installed in a Windows 10 target to identify whether or not it leveraged the SSL
Cache. This may sound odd considering Skype is a Microsoft product, but Skype
was an acquisition, not developed internally, and so logically may not have used
Schannel.
This led to very interesting results: Skype, when launched, did leverage the
cache, but entries appeared for the CSslCacheClientItem which had a null session
ID. This is because those sessions used Ticket-based session resumption. A pointer
to the ticket seems to be located at 0x128 into the structure on x64 systems
examined. This was then veriﬁed through examination of the
84
“schannel!CSessionCacheClientItem::SetSessionTicket” function, which uses this
address.
An unexpected discrepancy was noted amongst the ticket-based cache items: