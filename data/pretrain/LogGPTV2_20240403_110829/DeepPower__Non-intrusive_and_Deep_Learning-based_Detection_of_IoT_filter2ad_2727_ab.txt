files. Then it continues to execute the following commands: “cd /;
/bin/busybox cp /bin/echo dvrHelper; >dvrHelper; /bin/busybox
chmod 777 dvrHelper;”, to test whether it can create a new exe-
cutable file. Before it starts to download the malware binary, it uses
the command “/bin/busybox cat /bin/echo\r\n” to parse the ELF
(Executable and LinkableFormat) header and obtain the architec-
ture information. Next, the malware tries to download the binary
file by the command wget and change the permision of downloaded
file by chmod command. After successful execution, it removes the
infection history on the device as quickly as possible.
However, IoT malware families are diverse and have versatile
ways to achieve the same purpose by different commands. For
example, to find a folder with write and execution permissions,
IoT malware can utilize the command sequence of “cd /tmp || cd
/var/run || cd /mnt || cd /root || cd /;”. Some malware may use the
command combination of “cat /proc/mounts | grep r”. In addition,
a new IoT malware botnet, called IoTroop [48], uses the “echo”
command to convey the vulnerability information of devices to
attackers for a further infection. Thus, it is necessary to model
the infection process to analyze the activities across various IoT
malware families.
As shown in Figure 3, we further divide the infection process into
five states. As a result, our analysis typically focuses the intrusion
and infection processes, which includes six states, login attempts,
environment preparation, downloading files, permission modification,
executing files, and deleting infection history. Note that the intrusion
and infection stages we studied are host-based and different from
the infection dialog process of network traffic by Gu et al. [19].
Compared to other recent studies on IoT malware analysis, focusing
on malware execution behaviors of open-source botnets [3, 4], our
Figure 3: Three stages of IoT malware attacks [44, 46]. The
intrusion and infection models (S0-S5) in our analysis.
(CVE-2012-1823), which allows remote attackers to execute arbi-
trary code by placing command-line options in the query string [11].
In addition, the D-Link DSP-W215 Smart Plug can be exploited to
get a root shell by stack overflow, since it uses the insecure Home
Network Administration Protocol (HNAP) [14]. Some new vulnera-
bilities about backdoor root account (CVE-2017-8224) have already
been reported, which at least affect 1250+ Wireless IP Camera (P2)
models [27]. Through the intrusion process, the attacker is able
to get a remote shell and execute malicious commands to infect
devices or cause a severe damage.
3.2 Infection Process of IoT Malware
Identifying the infection process is a critical step for IoT malware
detection, which requires a comprehensive analysis of real-world
attacks on IoT devices. Based on the infection activities observed
from the IoT malware source code and the reverse engineering
reports, and command patterns observed by IoTPOT [46], we sum-
marize the commonly used commands and their corresponding
states as shown in Table 2. It illustrates that multiple steps need to
be executed to infect devices successfully. For instance, the wget
command is used to download a bash script or malware binary to
victim’s device. The chmod command may be used to change the
access permission to the malicious file. After these two operations,
the malware begins to run an execute command of the downloaded
Session 1: IoT Security and Privacy ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan36Table 2: The commonly used commands (operations) during the infection process. S1∼S5 are different infection states shown
in Figure 3.
S1
cp
•
•
•
IoT Malware
Linux.wifatch
Lightaidra
Mirai
Psyb0t
Chuck Norris
Kaiten
Linux.Darlloz
BASHLITE
XOR.DDoS
IRCTelnet
LizKebab
Remaiten
TheMoon
NyaDrop
Hajime
Amnesia
BrickerBot
PERSIRAI.A
IMEIJ.A
DvrHelper
Okiru
S1
cd
S1
cat
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
S1
echo mkdir
S1
S1
ps
•
•
•
•
•
•
•
•
•
•
•
•
S2
S1
grep wget
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
chmod
S3
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
S4
execute
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
S5
•
•
•
S5
rm kill References
•
•
•
•
•
•
•
Source code [58]
Source code [16]
Source code [41]
Reverse Eng. [28]
Reverse Eng. [28]
Reverse Eng. [20]
Reverse Eng. [15]
Reverse Eng. [26]
Reverse Eng. [36]
Reverse Eng. [38]
Reverse Eng. [37]
Reverse Eng. [35]
Reverse Eng. [32]
Reverse Eng. [39]
Reverse Eng. [55]
Reverse Eng. [59]
Reverse Eng. [47]
Reverse Eng. [53]
Reverse Eng. [52]
Reverse Eng. [54]
Reverse Eng. [7]
•
•
•
•
•
analysis is concentrated on the common infection activities, where
different variants of malware are likely to share common infection
behaviors. Therefore, our method is able to detect new malware
variants. Based on the in-depth understanding of malware infection
activities, we next discuss how to accurately detect them using
power signals.
4 DEEPPOWER DESIGN
A fine-grained analysis of IoT malware allows us to understand
what kinds of activities on devices are expected to appear during
the IoT malware infection process. The major challenge is how
to accurately detect these activities on resource-constrained IoT
devices. In this section, we introduce the system architecture of
DeepPower and the technical details behind it.
4.1 System Overview
DeepPower focuses on the detection of infection activities of IoT
malware attacks, which are more common and general than other
activities. Figure 4 illustrates the overall system architecture of
DeepPower. It consists of four phases: (1) detection of suspicious
signals; (2) preprocessing of suspicious signals; (3) inferring activi-
ties from suspicious signals; and (4) infection process modeling and
correlation analysis of inferred activities. In phase (3), it contains
training (model learning) stage and testing (malware detection)
stage.
The first phase takes the power signals of the monitored device
as input and quickly detects suspicious power signals. The purpose
of this phase is to filter out most of the signals and only retain a
small number of suspicious signals for further fine-grained analysis.
Considering that the suspicious signals contain a lot of noises, in
the second phase, DeepPower performs an effective data preprocess-
ing to reduce noises and extract useful features that will be used
by a sequence to sequence (Seq2Seq) model. In the third phase, the
Seq2Seq model is developed to infer the activities from the prepro-
cessed suspicious signals. We choose the Seq2Seq model because
it has been applied with a great success in various tasks, such as
neural machine translation [34] and automatic speech recognition
(ASR) [6], which are similar to the activity prediction problem in this
work. Finally, to determine whether a malware infection process
exists in the device, the last phase performs a correlation analysis
of the inferred activities against the infection process model, and
calculates a weighted score for each state.
4.2 Detection of Suspicious Signals
Recently, many machine learning techniques have been proposed
to perform anomaly detection tasks based on power signals [9],
which model permissible activities and detects deviations. When
power signals are identified as outliers, it is unclear whether these
deviations are caused by anomalous activities or by noises, since
power signals always contain lots of random and periodic noises
introduced by the power supply (i.e., 50/60 Hz AC). Therefore, it
is reasonable to consider these deviations as suspicious activities,
and perform a further fine-grained analysis of them. In this phase,
we use a deep autoencoder to detect suspicious activities with low
complexity and in an unsupervised manner.
A deep autoencoder is a multi-layer feed-forward neural net-
work, which encodes the input into low-dimensional representation
based on non-linear transformations, and reconstructs the original
Session 1: IoT Security and Privacy ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan37Figure 4: DeepPower system overview.
input based on the representation. Unfortunately, the outliers and
noise in power signals reduce the representation quality and bring
great challenges to the standard denoising autoencoders, which
requires clean training data. Herein, we utilize a Robust Deep Au-
toencoder (RDA) model [62] to first isolate the suspicious parts
in power signals and then train an autoencoder on the remaining
portion. This model is suitable for handling different noise intensi-
ties and patterns in heterogeneous devices. The power signals X
are splitted into two parts, X = LD + S, where LD represents the
part that can be accurately reconstructed by an autoencoder, and S
indicates the outliers and noise that are difficult to reconstruct. We
use the following optimization objective:
minθ ||LD − Dθ(Eθ(LD))||2 + λ||S||1
s.t . X − LD − S = 0,
(1)
where X is the input power signals, Eθ is an Encoder, and Dθ is
a Decoder. S contains the suspicious portions, and LD represents
the remaining parts. || · ||2 denotes the L2-norm and || · ||1 denotes
L1-norm (the absolute-value norm). λ is a hyperparameter that
controls the sparsity level of S. A small λ will isolate more parts of
raw power signals into S as suspicious portions.
4.3 Preprocessing of Suspicious Signals
The objective of this phase (Phase 2 in Figure 4) is to preprocess
suspicious signals to obtain high-quality features for activity infer-
ence. There exist two issues that need to be solved. First, the AC
power supply causes periodic appearance of strong peaks during
(a), (b) and (c) activities in Figure 1. Our experiments show that
these peaks randomly appear anywhere in a periodic way. It is
necessary to remove these peaks from the raw signals before the
feature extraction. Second, due to the intrinsic properties of power
signals, the time domain-based signal processing method cannot
discriminate the fine-grained characteristics of different activities
accurately. We need an effective solution to extract unique features
from suspicious signals.
Our data preprocessing method is described as follows. First,
a 100-point simple moving average (SMA) filter is applied to re-
duce the effect of small fluctuations and smooth the power signals.
Figure 5(a) shows the power signals of wget command by using
the SMA filter. Second, we apply the wavelet denoising method to
remove the strong background noise generated from the AC power,
as shown in Figure 5(b), while keeping as much useful information
as possible (Figure 5(c)). Third, we transform the filtered signals
into mel-scaled spectrograms and use them as the input of the later
prediction tasks. These frequency domain-based features make the
power signals of different activities more distinguishable while
reducing input dimensionality and computational overhead. To
verify whether this preprocessing method is effective, we perform
a classification task on individual activities of power signals. The
classification result also demonstrates the distinguishability of the
individual activity’s power signal. Furthermore, while analyzing the
situation of multiple consecutive activities, there are no boundaries
between their waveforms of different activities. A natural choice is
to apply a Seq2Seq model to infer activities from power signals.
4.4 Inferring Activities from Suspicious Signals
After preprocessing the suspicious signals, this phase (Phase 3 in
Figure 4) utilizes deep learning techniques to infer activities from
the signals. It aims to sequentially infer the activities sequence from
their corresponding power signals. First, DeepPower employs an
effective attention-based Seq2Seq architecture with Long Short-
Term Memory (LSTM) networks [24, 34] to figure out the problem
about no boundaries between the power signals of different activ-