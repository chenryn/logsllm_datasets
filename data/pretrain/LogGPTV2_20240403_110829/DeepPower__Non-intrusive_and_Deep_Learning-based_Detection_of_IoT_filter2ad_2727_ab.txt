### Infection Process of IoT Malware

#### Introduction
The infection process of IoT malware involves a series of commands to create and execute a new executable file. The process begins with the execution of the following commands:
```bash
cd /;
/bin/busybox cp /bin/echo dvrHelper;
>/dvrHelper;
/bin/busybox chmod 777 dvrHelper;
```
These commands are used to test whether the malware can create a new executable file. Before downloading the malicious binary, the malware uses the command:
```bash
/bin/busybox cat /bin/echo
```
to parse the ELF (Executable and Linkable Format) header and obtain the architecture information. Next, the malware attempts to download the binary file using `wget` and modifies the permissions of the downloaded file with `chmod`. After successful execution, it quickly removes any trace of the infection from the device.

#### Diverse Infection Methods
IoT malware families are diverse and employ various methods to achieve the same goals. For example, to find a directory with write and execution permissions, some malware use the command sequence:
```bash
cd /tmp || cd /var/run || cd /mnt || cd /root || cd /;
```
Other malware may use:
```bash
cat /proc/mounts | grep r
```
A recent IoT botnet, called IoTroop [48], uses the `echo` command to convey vulnerability information to attackers for further infections. Therefore, it is essential to model the infection process to analyze the activities across different IoT malware families.

#### Infection Process Modeling
As shown in Figure 3, the infection process is divided into five states. Our analysis focuses on the intrusion and infection processes, which include six states: login attempts, environment preparation, downloading files, permission modification, executing files, and deleting infection history. Note that our studied intrusion and infection stages are host-based and differ from the network traffic-based infection dialog process by Gu et al. [19].

Compared to other recent studies on IoT malware analysis, which focus on the execution behaviors of open-source botnets [3, 4], our analysis emphasizes common infection activities that different malware variants are likely to share. This approach enables the detection of new malware variants.

#### Commonly Used Commands
Based on the observed infection activities from IoT malware source code, reverse engineering reports, and command patterns from IoTPOT [46], we summarize the commonly used commands and their corresponding states in Table 2. For instance, the `wget` command is used to download a bash script or malware binary to the victimâ€™s device, while the `chmod` command changes the access permissions of the malicious file. After these operations, the malware executes the downloaded file.

### DeepPower Design

#### System Overview
DeepPower is designed to detect the infection activities of IoT malware attacks, focusing on common and general activities. The system architecture, as illustrated in Figure 4, consists of four phases:
1. **Detection of Suspicious Signals**: Filters out most signals and retains a small number of suspicious signals for fine-grained analysis.
2. **Preprocessing of Suspicious Signals**: Reduces noise and extracts useful features for the Seq2Seq model.
3. **Inferring Activities from Suspicious Signals**: Uses a Seq2Seq model to infer activities from the preprocessed signals.
4. **Infection Process Modeling and Correlation Analysis**: Performs correlation analysis of inferred activities against the infection process model and calculates a weighted score for each state.

#### Detection of Suspicious Signals
Many machine learning techniques have been proposed for anomaly detection based on power signals. However, deviations in power signals can be caused by either anomalous activities or noise. To address this, we use a Robust Deep Autoencoder (RDA) model [62] to isolate suspicious parts in power signals and train an autoencoder on the remaining portion. The optimization objective is:
```math
\min_{\theta} ||LD - D_{\theta}(E_{\theta}(LD))||_2 + \lambda ||S||_1
\text{s.t. } X - LD - S = 0,
```
where \(X\) is the input power signal, \(E_{\theta}\) is the Encoder, and \(D_{\theta}\) is the Decoder. \(S\) contains the suspicious portions, and \(LD\) represents the remaining parts. \(\lambda\) controls the sparsity level of \(S\).

#### Preprocessing of Suspicious Signals
This phase preprocesses the suspicious signals to extract high-quality features for activity inference. Two main issues are addressed:
1. **Removal of Periodic Peaks**: A 100-point Simple Moving Average (SMA) filter is applied to reduce small fluctuations.
2. **Feature Extraction**: Wavelet denoising is used to remove strong background noise while preserving useful information. The filtered signals are then transformed into mel-scaled spectrograms for later prediction tasks.

#### Inferring Activities from Suspicious Signals
After preprocessing, DeepPower uses deep learning techniques to infer activities from the signals. An attention-based Seq2Seq architecture with Long Short-Term Memory (LSTM) networks is employed to handle the lack of boundaries between power signals of different activities.