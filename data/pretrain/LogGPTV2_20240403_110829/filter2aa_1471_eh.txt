n
Wi
nlo
ad.
efi
Loads Ntoskrnl.exe and its dependencies (SiPolicy.p7b, 
hvloader.dll, hvix64.exe, Hal.dll, Kdcom.dll, Ci.dll, 
Clfs.sys, Pshed.dll) and bootstart device drivers.
W
in
do
ws 
bo
ot 
pa
rti
tio
n
Wi
nre
su
me
.efi
If resuming after a hibernation state, resumes from the 
hibernation file (Hiberfil.sys) instead of typical Windows 
loading.
W
in
do
ws 
bo
ot 
pa
rti
tio
n
Me
mt
est.
efi
If selected from the Boot Immersive Menu (or from the Boot 
Manager), starts up and provides a graphical interface for 
scanning memory and detecting damaged RAM.
E
FI 
sy
ste
m 
pa
rti
tio
n
Hv
If detected by the boot manager and properly enabled, this 
W
Hv
loa
der
.dll
If detected by the boot manager and properly enabled, this 
module is the hypervisor launcher (hvloader.efi in the 
previous Windows version).
W
in
do
ws 
bo
ot 
pa
rti
tio
n
Hv
ix6
4.e
xe 
(or 
hva
x6
4.e
xe)
The Windows Hypervisor (Hyper-V). Depending on the 
processor architecture, this file could have different names. 
It’s the basic component for Virtualization Based Security 
(VBS).
W
in
do
ws 
bo
ot 
pa
rti
tio
n
Nt
osk
rnl.
exe
Initializes executive subsystems and boot and system-start 
device drivers, prepares the system for running native 
applications, and runs Smss.exe.
W
in
do
ws 
bo
ot 
pa
rti
tio
n
Sec
ure
ker
The Windows Secure Kernel. Provides the kernel mode 
services for the secure VTL 1 World, and some basic 
communication facility with the normal world (see Chapter 
W
in
do
nel
.ex
e
9, “Virtualization Technologies”).
ws 
bo
ot 
pa
rti
tio
n
Hal
.dll
Kernel-mode DLL that interfaces Ntoskrnl and drivers to the 
hardware. It also acts as a driver for the motherboard, 
supporting soldered components that are not otherwise 
managed by another driver.
W
in
do
ws 
bo
ot 
pa
rti
tio
n
Sm
ss.
exe
Initial instance starts a copy of itself to initialize each 
session. The session 0 instance loads the Windows 
subsystem driver (Win32k.sys) and starts the Windows 
subsystem process (Csrss.exe) and Windows initialization 
process (Wininit.exe). All other per-session instances start a 
Csrss and Winlogon process.
W
in
do
ws 
bo
ot 
pa
rti
tio
n
Wi
nin
it.e
xe
Starts the service control manager (SCM), the Local 
Security Authority process (LSASS), and the local session 
manager (LSM). Initializes the rest of the registry and 
performs usermode
initialization tasks.
W
in
do
ws 
bo
ot 
pa
rti
tio
n
Wi
nlo
go
n.e
xe
Coordinates log-on and user security; launches Bootim and 
LogonUI.
W
in
do
ws 
bo
ot 
pa
rti
tio
n
Lo
go
nui
.ex
e
Presents interactive log on dialog screen.
W
in
do
ws 
bo
ot 
pa
rti
tio
n
Bo
oti
m.
exe
Presents the graphical interactive boot menu.
W
in
do
ws 
bo
ot 
pa
rti
tio
n
Ser
vic
es.
exe
Loads and initializes auto-start device drivers and Windows 
services.
W
in
do
ws 
bo
ot 
pa
rti
tio
n
Tc
bL
aun
ch.
exe
Orchestrates the Secure Launch of the operating system in a 
system that supports the new Intel TXT technology.
W
in
do
ws 
bo
ot 
pa
rti
tio
n
Tc
bL
oad
er.
dll
Contains the Windows Loader code that runs in the context 
of the Secure Launch.
W
in
do
ws 
bo
ot 
pa
rti
tio
n
Figure 12-2 Sample UEFI hard disk layout.
Another of Setup’s roles is to prepare the BCD, which on UEFI systems is
stored in the \EFI\Microsoft\Boot\BCD file on the root directory of the
system volume. This file contains options for starting the version of
Windows that Setup installs and any preexisting Windows installations. If the
BCD already exists, the Setup program simply adds new entries relevant to
the new installation. For more information on the BCD, see Chapter 10,
“Management, diagnostics, and tracing.”
All the UEFI specifications, which include the PEI and BDS phase, secure
boot, and many other concepts, are available at https://uefi.org/specifications.
The BIOS boot process
Due to space issues, we don’t cover the old BIOS boot process in this edition
of the book. The complete description of the BIOS preboot and boot process
is in Part 2 of the previous edition of the book.
Secure Boot
As described in Chapter 7 of Part 1, Windows was designed to protect against
malware. All the old BIOS systems were vulnerable to Advanced Persistent
Threats (APT) that were using a bootkit to achieve stealth and code
execution. The bootkit is a particular type of malicious software that runs
before the Windows Boot Manager and allows the main infection module to
run without being detected by antivirus solutions. Initial parts of the BIOS
bootkit normally reside in the Master Boot Record (MBR) or Volume Boot
Record (VBR) sector of the system hard disk. In this way, the old BIOS
systems, when switched on, execute the bootkit code instead of the main OS
code. The OS original boot code is encrypted and stored in other areas of the
hard disk and is usually executed in a later stage by the malicious code. This
type of bootkit was even able to modify the OS code in memory during any
Windows boot phase.
As demonstrated by security researchers, the first releases of the UEFI
specification were still vulnerable to this problem because the firmware,
bootloader, and other components were not verified. So, an attacker that has
access to the machine could tamper with these components and replace the
bootloader with a malicious one. Indeed, any EFI application (executable
files that follow the portable executable or terse executable file format)
correctly registered in the relative boot variable could have been used for
booting the system. Furthermore, even the DXE drivers were not correctly
verified, allowing the injection of a malicious EFI driver in the SPI flash.
Windows couldn’t correctly identify the alteration of the boot process.
This problem led the UEFI consortium to design and develop the secure
boot technology. Secure Boot is a feature of UEFI that ensures that each
component loaded during the boot process is digitally signed and validated.
Secure Boot makes sure that the PC boots using only software that is trusted
by the PC manufacturer or the user. In Secure Boot, the firmware is
responsible for the verification of all the components (DXE drivers, UEFI
boot managers, loaders, and so on) before they are loaded. If a component
doesn’t pass the validation, an error message is shown to the user and the
boot process is aborted.
The verification is performed through the use of public key algorithms
(like RSA) for digital signing, against a database of accepted and refused
certificates (or hashes) present in the UEFI firmware. In these kind of
algorithms, two different keys are employed:
■    A public key is used to decrypt an encrypted digest (a digest is a hash
of the executable file binary data). This key is stored in the digital
signature of the file.
■    The private key is used to encrypt the hash of the binary executable
file and is stored in a secure and secret location. The digital signing of
an executable file consists of three phases:
1. 
Calculate the digest of the file content using a strong hashing
algorithm, like SHA256. A strong “hashing” should produce a
message digest that is a unique (and relatively small)
representation of the complete initial data (a bit like a
sophisticated checksum). Hashing algorithms are a one-way
encryption—that is, it’s impossible to derive the whole file from
the digest.
2. 
Encrypt the calculated digest with the private portion of the key.
3. 
Store the encrypted digest, the public portion of the key, and the
name of the hashing algorithm in the digital signature of the file.
In this way, when the system wants to verify and validate the integrity of
the file, it recalculates the file hash and compares it against the digest, which
has been decrypted from the digital signature. Nobody except the owner of
the private key can modify or alter the encrypted digest stored into the digital
signature.
This simplified model can be extended to create a chain of certificates,
each one trusted by the firmware. Indeed, if a public key located in a specific
certificate is unknown by the firmware, but the certificate is signed another