handle cloned instructions stream renaming in section
3.3. Furthermore, the size of LP-ROB should be small
enough to minimize the effect of normal instructions
stream's throughput. Our study reveals that long latency
operations would have severe impact on LP-ROB
pressure and degrade the performance accordingly.
Hence, we
and long latency
instructions should go through different verification path.
Status bit to handle duplicate execution: Since all long
latency instructions are executed twice including those
that are speculative, we adopt the idea from [27] to
handle these duplicate computations. This approach
requires the fewest hardware overhead. An extra status
bit is added to each of the ROB entries indicating the
long latency operation is ready to be executed the second
time. Since memory reference micro-ops belong to long
latency operations, this extra status bit is also appended
to entries of the load store queue (LSQ). Furthermore, the
verify bit is used to confirm that the computation of
duplicated long latency operations were completed and
verified. After these results are confirmed, results from
duplicated copies are discarded. Since results from the
original instruction and the duplicate copy may be ready
at different cycles, we also need to address
the
scheduling of their dependent instructions. We schedule
dependent instructions according to the data ready time
associated instruction
Delay Buffer: Instructions are executed normally the first
time. Results of committed instructions are queued in the
delay buffer similar
to other schemes [22][23][26].
However, each entry not only stores the result but also
includes
and its
instruction address. For long latency operations, we also
allocate the immediate entry that follows to store source
operands’ values. We called these instructions stored in
the delay buffer cloned instructions. These cloned
instructions are removed from the delay buffer when they
are scheduled and passed the registered read stage.
Fetch and decode units: Since the gap between processor
cycle time and memory access time will likely grow
wider each year, most likely fetch and decode units are
not the bottleneck. We choose to split the fetch and
decode units into two equal parts. Half of the fetch and
decode unit is reserved for cloned instructions stream. In
order to simplify the maintenance of normal instructions
and cloned instructions stream, an extra program counter
is added for the cloned instructions stream.
Reorder Buffer: We also found that the average reorder
buffer
(ROB) occupancy in the baseline non-fault-
tolerant system with 128-entries ROB is about 50% for
integer
point
benchmark. By allocating the redundant part of ROB to
cloned
the
performance
hardware
overhead. After the cloned instructions are decoded, they
are placed at
the lower part of ROB (LP-ROB) as
illustrated in Figure 1. Results of normal instructions are
stream, we may reduce
degradation without
instructions
floating
benchmark
and
90% for
extra
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:09:01 UTC from IEEE Xplore.  Restrictions apply. 
of the original copy, since faults are not as frequent This
cause no further complication because a mismatch of
results will bring back execution prior to the faulty
instruction.
Verify logic: Once these cloned instructions complete
their execution, cloned instructions’ results are compared
to the original instructions’ results saved in the result
field of ROB. Verify logic, next to the write-back stage,
is used to handle this error detection and recovery. We
will present this mechanism in the following section.
3.2 Error detection and Fault recovery mechanism
Ditto Processor employs two checking mechanisms to
detect potential transient faults. The first mechanism is
placed after
the register-read stage. After a cloned
instruction's source operands are ready, we compare the
decoded instruction with the correspond entry in the delay
buffer.
It detects two places where transient faults may
occur.
it
1. If this re-fetched instruction does not match the
correspond entry in delay buffer,
indicates the
occurrences of a transient error in the fetch unit or in
the decoder. For conditional and unconditional jump
instructions, the decoded target address is also verified.
2. For long latency operations if clones source operands
values does not match the correspond values in the
delay buffer, it indicates the occurrences of a transient
error in renaming logic.
This mechanism allows us to detect faults occurs at
earlier stages of the pipeline. The verification process is
overlapped with the execution stage and poses no extra
delay.
~
Andiu
Xor
~
Multiu
sub
Lw
Addu
i
i+1
j
j+1
j+2
j+3
r1, r3, 4
r2, r3, r1
r1, r2, 4
r1, r1, r4
r3, 16, [r1]
r4, r3, r2
Lower
p art -ROB
(LP -ROB)
From
ROB
entry j+2
From
RegFile
From
ROB
entry j
From
ROB
entry j+1
Figure 2 Instruction renaming example
The second checking mechanism occurs when the
cloned instructions complete their computation. Results of
cloned instructions are compared to the original results
stored in the result field of ROB entries. If the results are
the same, cloned instructions are removed from reorder
buffer. If results do not match, then we have detected a
transient
in functional units. Since long latency
fault
instructions already verified computation results while in
normal instructions stream, these instructions would not go
though this second mechanism.
state similar
In both mechanisms, we recover the system back to the
known correct
to branch mis-prediction
recovery. Hence, there is no other extra hardware needed
beside what we have mentioned to handle this error
recovery on register file rollback. We will present this
rollback mechanism in the following section. Since, in this
study, we assume the mean time between faults (MTBF) is
about 10 million cycles, after several cycles of error
recovery, the second try1 should have a valid result and
program may continue to execute.
3.3 Cloned instruction renaming and register file
rollback mechanism
Since the decoder of normal instructions stream and
cloned instructions stream come from different paths, the
renamer should not mix these two streams together. Figure
2 shows a snapshot of the ROB during execution. Ditto
processor’s ROB is divided into two regions – the normal
ROB entries region and the LP-ROB entries region. The
LP-ROB maintains the program order of cloned instructions
stream while the rest of the ROB is used for normal
instructions stream.
We present an example to describe how Ditto Processor
handles instructions renaming. Let’s assume the LP-ROB
starts with entry j. Since “multiu” is at the head of LP-ROB,
all previous cloned instructions have been verified. The
source operand (r2) of “multiu” is mapped to architecture
register file, so is the source operand (r4) of “sub” and (r2)
of "addu". The source operand “r1” of instruction “sub” is
depending on the previous result of entry j. Since the
previous result has been copied from delay buffer to entry j
as described in section 3.1, the source operand (r1) of “sub”
may use this value and schedule immediately after
renaming. This is true for instructions “lw” and "addu" also.
This scenario contains no data hazard and allows cloned
instructions to fly through pipeline stages faster then normal
instructions. It also reduces possible performance loss due
to re-execution come with the time-redundant technique.
For long latency operations, if transient error occurs in
this renaming operation, the verify logic will detect the
source operands’ values are different from values produced
by the original instruction and will signal the recovery
mechanism. For short latency operations, the verify logic
would detect this renaming error if the clone's computation
result
is different from the original result since clone
instruction stream and normal instruction stream handle
renaming operation independently.
processor
simultaneous
multithreading technique such as AR-SMT, each thread
must maintain its own register status and values by register
redundant
using
In
a
1 The second try means the instructions will be fetch,
decode and execute twice as mentioned and the result will
be verify again.
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:09:01 UTC from IEEE Xplore.  Restrictions apply. 
map [22],
it requires some additional hardware when
compared with Ditto Processor. In Ditto Processor we only
need to augment the state bits in architecture register file.
Whenever a normal instruction is ready to commit, it writes
the result to register file and transits the status bits from
“invalid” to “transient”. Once the cloned instruction is
verified,
to
“verified”. This approach requires only one extra bit added
to each register. From the re-namer and scheduler’s point of
view, they treat “transient” and “verified” value in the same
way as data ready. If a transient error is detected, all
“transient” values are flushed from the architecture register
file. Moreover, all in-fly instructions are squashed similar to
miss-branch prediction recovery.
is changed from “transient”
the status
3.4 What types of operation are protected?
In the Ditto Processor design, we cover every type of
instructions for possible transient error. However, we do
assume that there is no self-modifying instruction in our
system.
then
fetched, decoded/renamed,
information are stored in delay buffer
Short latency Arithmetic/logic instructions: After these
instructions are ready to retire, they store the result and
other information to the delay buffer and ROB entry is
free for other normal instructions. The cloned instruction
is
scheduled and
executed. After the result is verified, the LP-ROB is free
for other cloned instructions. Since we assume the
Branch Prediction Unit
is protected by the ECC
mechanism, our scheme may verify the correctness of
decoded target address and the outcome of branch.
Multiply/Division instructions: Since these instructions
have long execution latency, they are duplicated after
decode and speculatively execute twice and result are
compared and verified. Result of these instructions and
other
for
verification later. These instructions are also cloned and
re-fetched. However,
is decoded/renamed,
scheduled and read from register, they would not go
through computation again. As mentioned before they are
checked by the first checking mechanism. After passing
the first checking mechanism, these instructions are free
from LP-ROB.
type
LOAD/STORE type
instruction was decoded, it generated two micro-ops: one
for data address calculation and the other one for
memory reference. Since memory micro-op belongs to
long latency operation, it would access cache memory
twice based on the normal instruction's calculated data
address. When this type instruction is ready to commit, it
would store the result and other information into delay
buffer. After the clone instruction is decoded, it would
discard the memory micro-op since we only need to
verify the correctness of data address.
instructions: After
after
it
this
3.5 What are protected units?
this area are protected by ECC logic. Furthermore, any
wires and control
signals that communicate between
processor core and other units, such as data cache or ROB,
are also protected by other fault-tolerant techniques [3-
6][10-11][14]. Whenever a system interrupt or exception
occurs, protection logic will guard the transient fault to
make sure these requested are being served correctly. Since
the correctness of commit logic is imperatively important
on placing the result into delay buffer and this logic is very
small, we duplicated the commit
logic to enforce its
correctness.
4. Simulation Configuration
We modified the SimpleScalar simulator [28] in order to
evaluate the performance degradation of different redundant
schemes when transient faults are present. We randomly
generate faults with MTTF of 10 millions cycles. When
each fault occurs, it could occur at any point of the pipeline.
In our study we randomly assign the fault to a particular
pipeline stage. 14 SPEC2000 benchmarks (8 integers, 6
floating points) [29] are used for our simulation study. All
benchmarks are executed for 500 million committed
instructions after skipping the first 500 million instructions.
4.1 Baseline Model
read,
register
schedule,
into seven stages:
In our baseline model, we
extend the existing
fetch,
SimpleScalar pipeline model
decode/rename,
execution,
writeback and commit. Each stage takes one cycle. In order
to eliminate the effect of data speculation, we schedule the
dependent instruction at the data ready cycles. For example,
in a cache-hit case, load operation takes 3 cycles to access
data (2 cycles to access the tag array to determine hit/miss
and 1 cycle to access data array). The load dependent
instructions will be scheduled 2 cycles later after data
effective address is calculated. Table 1 shows the overall
baseline system parameters.
Fetch, decode, issue, commit width
Branch Predictor
Branch Target Buffer
ROB / LSQ size
L1 I/D cache
L1 I/D cache hit latency
L2 cache
L2 / Memory latency
# of pipelined integer
ALU/MULT/DIV
Integer ALU/MULT/DIV latency
# of pipelined floating point
Adder/MULT/DIV
Floating point Adder/MULT/DIV
latency
Read/Write port
8
Gshare, 64-entry, 8
way, 8k-entry, 8 way
128/128 entries
16KB/16KB
4-way, 32B line size
1/3 cycles
1MB size
8-way, 32B line size
10/100 cycles
4/1/1
1/3/20
4/1/1
2/4/24
4
From Figure 1 we see that processor core is inside the
shaded area. In other words, we assume any units outside of
Table 1 Baseline model system parameters
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:09:01 UTC from IEEE Xplore.  Restrictions apply. 
45%
40%
35%
30%
25%
20%
15%
10%
5%
0%
     AR-30
    
AR-10
    
    
     Dual
     O3rs
    
Ditto
    
   
    
   
   
    
   
   
   
    
   
   
   
    
   
   
    
   
   
   
   
gzip
   
    
   
   
    
   
   
   
    
   
   
    
   
   
   
   
gcc
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
parser
m cf
   
   
   
   
    
   
   
   
   
   
   
    
   
   
   
   
   
   
    
   
   
   
   