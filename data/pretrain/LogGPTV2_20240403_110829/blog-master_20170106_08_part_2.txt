$id = 9;  
$name = "BMW";  
$price = 36000;  
```  
We have three variables that will be used to build a query. These values could come e.g. from a web form.  
```  
$query = "INSERT INTO cars VALUES($1, $2, $3)";   
```  
This is an SQL query with $1, $2, and $3 placeholders. The placeholders will be filled later.  
```  
pg_prepare($con, "prepare1", $query)   
    or die ("Cannot prepare statement\n");   
```  
Here we prepare a query by calling the pg_prepare() function. The second parameter of the function is the name of the prepared statement. It must be unique per-connection. Prepared statements are faster and guard against SQL injection attacks.  
```  
pg_execute($con, "prepare1", array($id, $name, $price))  
    or die ("Cannot execute statement\n");   
```  
The pg_execute() function sends a request to execute a prepared statement with given parameters, and waits for the result. The values are bound to the placeholders.  
```  
$ php prepared.php  
Row successfully inserted  
testdb=# SELECT * FROM cars;  
 id |    name    | price    
----+------------+--------  
  1 | Audi       |  52642  
  2 | Mercedes   |  57127  
  3 | Skoda      |   9000  
  4 | Volvo      |  29000  
  5 | Bentley    | 350000  
  6 | Citroen    |  21000  
  7 | Hummer     |  41400  
  8 | Volkswagen |  21606  
  9 | BMW        |  36000  
(9 rows)  
```  
We have inserted a new car into the table.  
### Sources  
The PostgreSQL PHP manual and the PostgreSQL documentation were consulted to create this tutorial.  
http://www.php.net/manual/en/book.pgsql.php  
This was an introductory chapter to PostgreSQL PHP tutorial.  
### Retrieving data with PHP in PostgreSQL  
There are several functions to read data from a database. The data can be fetched as an enumerated array, as an object or as an associated array.  
There are three steps to retrieve data from a database. First we define an SQL SELECT statement. The statement is executed with the pg_query() function. (In case of prepared statements, we would use pg_execute() function.) We receive a result set object. Using the result set, we fetch the data with pg_fetch_row(), pg_fetch_assoc() or pg_fetch_object() functions.  
```  
```  
We get 5 cars from the cars table and print them to the console.  
```  
$query = "SELECT * FROM cars LIMIT 5";  
```  
This is the SQL to fetch 5 rows of cars.  
```  
$rs = pg_query($con, $query) or die("Cannot execute query: $query\n");  
```  
The query is executed with the pg_query() function. The function returns a result set.  
```  
while ($row = pg_fetch_row($rs)) {  
  echo "$row[0] $row[1] $row[2]\n";  
}  
The pg_fetch_row() function returns an array of string values. We can use array index notation to get the array fields. When there are no more rows, the function returns false and the while loop terminates.  
$ php retrieve1.php  
1 Audi 52642  
2 Mercedes 57127  
3 Skoda 9000  
4 Volvo 29000  
5 Bentley 350000  
```  
Example output.  
In the second example, we will fetch data with the pg_fetch_assoc() function.  
```  
```  
The pg_fetch_assoc() function fetches a row as an associative array. The keys of the associative array are the column names.  
```  
while ($row = pg_fetch_assoc($rs)) {  
    echo $row['id'] . " " . $row['name'] . " " . $row['price'];  
    echo "\n";  
}  
```  
The id, name, and price are the keys to the returned associative array.  
In the last example, we will fetch the data with the pg_fetch_object() function. It returns an object with properties that correspond to the fetched row's field names.  
```  
id . " ";  
    echo $ro->name . " ";  
    echo $ro->price . " ";  
    echo "\n";  
}  
pg_close($con);   
?>  
```  
We select five cars from the cars table.  
```  
while ($ro = pg_fetch_object($rs)) {  
    echo $ro->id . " ";  
    echo $ro->name . " ";  
    echo $ro->price . " ";  
    echo "\n";  
}  
```  
The column names are the object properties, which hold the values.  
We have finished reading data using pg_fetch_row(), pg_fetch_assoc(), and pg_fetch_object() functions.  
### Working with images with PHP in PostgreSQL  
In this chapter of the PostgreSQL PHP tutorial, we will work with image files. Some people do not agree with putting images into databases. Here we only show how to do it. We do not dwell into technical issues of whether to save images in databases or not.  
```  
testdb=> CREATE TABLE images(id INT PRIMARY KEY, data BYTEA);  
```  
For this example, we create a new table called images. For the images, we use the BYTEA data type. It allows to store binary strings.  
### Inserting images  
In the first example, we are going to insert an image into the PostgreSQL database.  
```  
```  
We read an image from the current working directory and write it into the images table of the PostgreSQL testdb database.  
```  
$file_name = "woman.jpg";  
```  
This is the name of the image file that we will insert into the database. The image is located in the current working directory.  
```  
$img = fopen($file_name, 'r') or die("cannot read image\n");  
$data = fread($img, filesize($file_name));  
```  
We read binary data from the filesystem.  
```  
$es_data = pg_escape_bytea($data);  
```  
Binary data might have characters that may cause problems when inserting them into a database table. The pg_escape_bytea() function escapes the string for insertion into a bytea field. Later, when reading binary data from the database, the data must be un-escaped.  
```  
fclose($img);  
```  
The handle pointing to the image file is closed.  
```  
$query = "INSERT INTO images(id, data) Values(1, '$es_data')";  
pg_query($con, $query);   
```  
The image is inserted into the database.  
### Reading images  
In this section, we are going to perform the reverse operation. We will read an image from the database table.  
```  
```  
We read image data from the images table and write it to another file, which we call woman2.jpg.  
```  
$query = "SELECT data FROM images WHERE id=1";  
```  
This line is a SQL SELECT statement to retrieve the image data from the table.  
```  
$data = pg_fetch_result($res, 'data');  
```  
We fetch the data from the data column of the images table.  
```  
$unes_image = pg_unescape_bytea($data);  
```  
When we inserted the image data into the database, we have escaped it. Now we have to un-escape it back to the original.  
```  
$file_name = "woman2.jpg";  
$img = fopen($file_name, 'wb') or die("cannot open image\n");  
```  
We open a file for writing. The new file name will be woman2.jpg.  
```  
fwrite($img, $unes_image) or die("cannot write image data\n");  
```  
The data is written to the filesystem.  
This part of the PostgreSQL PHP tutorial was dedicated to reading and writing images.  
### Getting PostgreSQL metadata with PHP  
Metadata is information about the data in the database. Metadata in PostgreSQL contains information about the tables and columns, in which we store data. Number of rows affected by an SQL statement is metadata. Number of rows and columns returned in a result set belong to metadata as well.  
There is an experimental function pg_meta_data(), which returns table definition for a table name as an array.  
### Columns and rows  
As we have already stated, the number of columns and rows in a result set is considered to be metadata.  
```  
```  
In the above example, we get the number of rows and columns returned by a query.  
```  
$query = "SELECT Name, Price FROM Cars LIMIT 4";   
```  
From the SQL query we can see that we select 2 columns and 4 rows. The query could be created also dynamically.  
```  
$num_rows = pg_num_rows($rs);  