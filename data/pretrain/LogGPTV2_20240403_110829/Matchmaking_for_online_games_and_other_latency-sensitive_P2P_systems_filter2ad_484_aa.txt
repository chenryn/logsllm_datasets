title:Matchmaking for online games and other latency-sensitive P2P systems
author:Sharad Agarwal and
Jacob R. Lorch
Matchmaking for Online Games
and Other Latency-Sensitive P2P Systems
Sharad Agarwal
Jacob R. Lorch
Microsoft Research
probing. In this paper, we develop a new latency prediction sys-
tem, called Htrae, suited to game matchmaking. Using a trace of
50 million latency measurements between 3.5 million players of the
popular game Halo 3, we show that our system works better than
state-of-the-art latency prediction systems.
ABSTRACT– The latency between machines on the Internet can
dramatically affect users’ experience for many distributed applica-
tions. Particularly, in multiplayer online games, players seek to
cluster themselves so that those in the same session have low la-
tency to each other. A system that predicts latencies between ma-
chine pairs allows such matchmaking to consider many more ma-
chine pairs than can be probed in a scalable fashion while users are
waiting. Using a far-reaching trace of latencies between players on
over 3.5 million game consoles, we designed Htrae, a latency pre-
diction system for game matchmaking scenarios. One novel feature
of Htrae is its synthesis of geolocation with a network coordinate
system. It uses geolocation to select reasonable initial network co-
ordinates for new machines joining the system, allowing it to con-
verge more quickly than standard network coordinate systems and
produce substantially lower prediction error than state-of-the-art la-
tency prediction systems. For instance, it produces 90th percentile
errors less than half those of iPlane and Pyxida. Our design is gen-
eral enough to make it a good ﬁt for other latency-sensitive peer-to-
peer applications besides game matchmaking.
Categories and Subject Descriptors – C.2.4 [Computer Systems Organi-
zation]: Computer Communication Networks – Distributed Systems; K.8.0
[Personal Computing]: General – Games
General Terms – Algorithms, design, experimentation, measurement, per-
formance
Keywords – latency estimation, matchmaking, network coordinates, online
gaming
1.
INTRODUCTION
Online gaming is a rapidly growing industry with revenues ex-
ceeding that of the entire movie business [29]. Appealing to in-
creasingly discriminating game players requires careful attention to
their chief concerns, particularly lag, the perceived time between an
action and its effect. For the majority of games, the primary con-
tributor to lag is direct communication between participants’ game
machines over the Internet. To reduce lag and hence improve the
game experience, it is critical to perform accurate matchmaking—
selecting groups of players with low latency to each other.
In typical matchmaking, each player sends network probes to
potential game hosts and selects one host based on latency and
bandwidth. Since probing consumes time and bandwidth, and play-
ers have limited patience for matchmaking, only a small fraction of
potential hosts can be probed. Furthermore, in games where player
machines communicate directly with each other rather than only
with the host, it is prohibitive to probe all the potential paths trafﬁc
will take, which can be quadratic in the number of online play-
ers. For these reasons, game matchmaking can beneﬁt from latency
prediction—determining the latency between machines without any
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute
to lists, requires prior speciﬁc permission and/or a fee.
SIGCOMM’09, August 17–21, 2009, Barcelona, Spain.
Copyright 2009 ACM 978-1-60558-594-9/09/08 ...$5.00
A novel feature of Htrae is its merging of two disparate ap-
proaches to latency prediction, network coordinate systems (NCS)
and geolocation. An NCS assigns each machine a coordinate in a
virtual metric space, such that the distance between two machines’
coordinates approximates the round-trip time (RTT) between them.
Because initial conditions are random, NCSes take time to converge
to a reasonable state, and usually converges to a sub-optimal local
minimum. Geolocation, on the other hand, determines each ma-
chine’s location on the planet and uses physical distance as a predic-
tor of network delay. This approach does not model the impact of
different routing efﬁciencies on different paths and disadvantages
machines whose location is imprecisely known. Htrae combines
these approaches by assigning each machine a coordinate on a vir-
tual Earth based on its physical location, but allowing this coordi-
nate to shift based on observations of actual latency. In so doing, we
gain the beneﬁts of both approaches: the realistic initial conditions
of geolocation, combined with the ability of an NCS to converge to
a state with greater predictive power.
Htrae also includes enhancements that are beneﬁcial in game
matchmaking. Triangle inequality violations and different network
access latencies for different machines are scenarios that tradition-
ally pose problems for an NCS. They occur often enough in our
game traces that we use simple heuristics to help combat their ef-
fects. We also observe that since reliably measuring RTT for game
purposes can consume a fair amount of bandwidth, the overhead of
one additional message to notify the probee of the result is low, and
quite worthwhile considering its usefulness to the recipient.
Our evaluation for game matchmaking shows that Htrae has sub-
stantially better predictive power than other latency prediction sys-
tems. For instance, its 90th percentile of prediction error is 71 ms,
compared to 176 ms for Pyxida [13] and 162 ms for iPlane [18],
even when restricting consideration only to the 23% of pairs iPlane
can make a prediction for. Also, when searching for the best peer
game server, Htrae picks the best one 70% of the time, compared to
only 35% for Pyxida and 55% for iPlane. Even though it does not
always ﬁnd the best one, 95% of the time it picks one at most 47 ms
worse than optimal, compared to 184 ms for Pyxida and 131 ms for
iPlane. In scenarios allowing a limited amount of probing to select
the best server, Htrae ﬁnds one with under 75 ms of latency 68%
of the time, compared to 44% for Pyxida and 41% when no latency
prediction is used. Our results show that Htrae will have tremen-
dous impact on the playability of games, and may also be useful for
other latency-sensitive peer-to-peer applications.
The contributions of our work are as follows:
• We propose a novel latency prediction system, Htrae, a hybrid
of geolocation and network coordinate systems that achieves the
beneﬁts of both.
• Based on extensive traces of latencies between game consoles,
we thoroughly evaluate the accuracy, convergence and drift of
Htrae.
315• We also evaluate in detail the effectiveness of various imple-
mentation details of Htrae, including a component that corrects
for triangle-inequality violations in an NCS.
The rest of this paper is structured as follows. §2 details the
design of our system, Htrae, including how we merge geolocation
with an NCS. §3 shows how we implemented Htrae. §4 describes
the traces of game matchmaking probes we collected and presents
the methodology we use to evaluate our system. §5 gives the results
of that evaluation. §6 discusses these results as well as avenues for
future work. §7 describes related work, and, ﬁnally, §8 concludes.
2. DESIGN
Htrae is a hybrid between two approaches to latency prediction:
geolocation and network coordinate systems.
Geolocation predicts latency based on the real-world distance
between two physical machines, which many researchers have
found is a strong predictor of RTT [10, 14, 24]. However, this cor-
relation is weak, especially for the home machines typically found
in games; for instance, we found a correlation coefﬁcient of only
+0.56 among Halo 3 players. Furthermore, if geolocation inaccu-
rately judges the location of some player’s machine, it will consis-
tently give that player poor performance.
An NCS gives each machine a coordinate in a virtual space, such
that the distance between two coordinates is an estimate of their
RTT. Coordinates are dynamically adjusted based on observations
of RTT so as to make estimation more accurate. Unfortunately, ac-
curately embedding the Internet graph in a virtual coordinate space
is difﬁcult. One reason is that the Internet has many routing inef-
ﬁciencies, some that lead to triangle-inequality violations (TIVs),
where two nodes have a greater RTT than the sum of their respective
RTTs to some other node. Coordinate spaces cannot have such vio-
lations [16, 36]. Furthermore, embeddings are often sensitive to ini-
tial conditions [12], since they can fall into one of many imperfect
local minima in the space of possible coordinate assignments [28].
Our insight is that these two approaches, NCS and geolocation,
are complementary, i.e., we can combine them in a way that miti-
gates disadvantages of both. We do this by geographic bootstrap-
ping, i.e., initializing NCS coordinates to correspond to the loca-
tions of the nodes in actual space. Our approach improves on an
NCS because it provides better initial conditions, and improves on
geolocation because its dynamic coordinate reﬁnement can correct
inaccurate or missing information. Essentially, our coordinate sys-
tem is a rough representation of Earth, modiﬁed to better predict
Internet latencies; the name Htrae comes from a warped version of
Earth in a certain comic-book universe.
2.1 Geographic bootstrapping
Geographic bootstrapping requires a virtual space with a known
relationship to the real world. Therefore, in Htrae, we use latitude
and longitude on a virtual Earth. Also, as in Vivaldi [6], we use
a virtual height, which represents the component of latency a ma-
chine experiences on all its paths, e.g., due to its Internet access
link. The predicted RTT between two machines is the great-circle
distance between their virtual locations, times 0.0269 ms/mile, plus
the sum of the two machines’ heights. We obtained the factor
0.0269 from Figure 1, which shows the relationship between dis-
tance and median RTT. It shows that this relationship is strongly
linear, with R2 = 0.976, slope 0.0269 ms/mile, and y-intercept
63.32 ms. This factor of 0.0269 ms/mile is about ﬁve times greater
than the inverse speed of light. A factor of two is expected since
we use round-trip latency, and the remaining factor of 2.5 suggests
other causes besides the speed of light.
Figure 1. Correlation between distance and RTT. Each point
is the median RTT among machines with the same distance,
rounded to the nearest mile. RTT data is from Halo 3 players
from March 1–31, 2008, and distance data is from MaxMind’s
IP-to-geo database. The least-squares ﬁt weights each point by
its number of contributing machine pairs.
Figure 2. Overview of updating coordinates. (1) Node A sends
a message to B. (2) B responds, and A measures the RTT. (3) If
the distance between their virtual coordinates is too low/high,
A applies a virtual force to its coordinate, moving it away
from/toward B’s.
When a machine joins the system, it determines its latitude and
longitude in one of various ways, e.g., by looking up its IP address
in a database.
It then uses this as its initial location, along with
height equal to half the least-squares y-intercept, or 31.66 ms. If
it cannot determine its location, it uses latitude and longitude 0.
From then on, whenever it determines its RTT to another machine,
it applies a virtual force to its coordinates, either toward the other
machine if the RTT was unexpectedly small or away if it was unex-
pectedly large, as shown in Figure 2. The magnitude of this force
is calculated as in Vivaldi [6], but adapted to using spherical co-
ordinates instead. See Figures 3 and 4 for details. Note that the
authors of Vivaldi tried using spherical coordinates in their system,
but found them not to work well; we will see in §5.2 that they work
in Htrae because of geographic bootstrapping.
As in Vivaldi, each node also maintains an estimate of the un-
certainty of its coordinates, a weighted moving average of the error
observed between expected RTTs and observed RTTs. When coor-
dinates improve such that distances better predict observed RTTs,
uncertainty will decrease. This uncertainty is used to decide how
strong a force to apply when updating coordinates: the greater the
moving node’s uncertainty, and the lower the other node’s uncer-
tainty, the stronger the force will be, as shown in Figure 3. However,
unlike Vivaldi, we do not always initialize uncertainty to 100%. If a
machine initializes its coordinates based on geographic location, it
uses initial uncertainty of 29.2%, the average relative error obtained
from using geolocation alone.
RTT measurements are prone to errors, which can harm the cor-
rectness and stability of network coordinates [13]. Therefore, as in
Pyxida [13], we do not use a single RTT measurement when adjust-
ing coordinates but rather an aggregate of multiple measurements.
Speciﬁcally, we use the median of ﬁve back-to-back RTT measure-
ments; our traces of Xbox LIVE probes report only these medians.
050100150200250300350400010002000300040005000600070008000median RTT (ms)distance between machines (miles)Least-squares fitAverageABRTT 30 ms123AB316ws ← wA/(wA + wB)
ε ← ((cid:107)(cid:126)xA −(cid:126)xB(cid:107)− lAB) /lAB
wA ← cewsε + (1− cews)wA
(cid:126)xA ← (cid:126)xA + ccws ((cid:107)(cid:126)xA −(cid:126)xB(cid:107)− lAB)u((cid:126)xB −(cid:126)xA)
Figure 3. Vivaldi update algorithm, run after node A learns the
RTT lAB to node B. Here,(cid:126)xN is the virtual location of node N, wN
is the uncertainty of node N’s coordinates, u((cid:126)y) is the unit vector
in the direction of (cid:126)y, and cc and ce are algorithmic constants.
2.2 TIV avoidance and history
Triangle inequality violations in Internet delay are typically
caused by inefﬁcient routing between two nodes, resulting in more
delay between them than the sum of delays via some other interme-
diate nodes. Game consoles on singly-homed residential connec-
tions can be particularly susceptible because they are restricted by
their ISPs’ routing policies, as opposed to a server in a datacenter
that has multiple upstream ISPs to choose from. For example, in our
dataset, a game console in Vancouver, BC measured a 378 ms me-
dian RTT to a console in Tukwila, WA. This is an unusually high
delay for a distance of only 141 miles. Indeed, around the same
time, the Vancouver console measured a median RTT of only 47
ms to a console in Pleasanton, CA (distance of 959 miles) and the