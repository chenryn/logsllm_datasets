16、生成随机整型数组 —— Generate a random integer array    
```    
-- Function:    
  -- Generate a random integer array    
-- Parameters:    
  -- max_value: Maximum value of the elements    
  -- max_length: Maximum length of the array    
  -- fixed_length: Whether the length of array is fixed. If it is true, the length of array will match max_length.    
create or replace function gen_random_int_array(max_value int default 1000, max_length int default 10, fixed_length bool default true ) returns int[] as    
$$    
begin    
    return case when not fixed_length then array(select ceil(random()*max_value)::int from generate_series(1,ceil(random()*max_length)::int)) else array(select ceil(random()*max_value)::int from generate_series(1,max_length)) end ;    
end;    
$$ LANGUAGE plpgsql;    
```    
```    
select gen_random_int_array();    
```     
17、生成随机字符串数组 —— Generate a random string array    
```    
-- Function:    
  -- Generate a random string array    
-- Parameters:    
  -- str_length: Length of string    
  -- max_length: Maximum length of the array    
  -- fixed_length: Whether the length of array is fixed. If it is true, the length of array will match max_length.    
create or replace function gen_random_string_array(str_length int default 10, max_length int default 10, fixed_length bool default TRUE ) returns text[] as    
$$    
declare v_array text[];    
declare v_i int;    
begin    
     v_array := array[]::text[];    
     if fixed_length then    
        for v_i in select generate_series(1, max_length) loop    
            v_array := array_append(v_array,array_to_string(array(select substr('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',(ceil(random()*62))::int, 1) FROM generate_series(1, str_length)), ''));    
        end loop;    
     else    
        for v_i in select generate_series(1,ceil(random()* max_length)::int) loop    
           v_array := array_append(v_array,array_to_string(array(select substr('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',(ceil(random()*62))::int, 1) FROM generate_series(1, str_length)), ''));    
        end loop;    
     end if;    
    return  v_array;    
end;    
$$ language plpgsql;    
```    
```    
select gen_random_string_array();    
select gen_random_string_array(10,5,true);    
```    
18、从整数数组中随机选择一个元素 —— Randomly select one element from an integer array    
```    
-- Function:    
-- Randomly select one element from an integer array    
create or replace function select_random_one(list int[]) returns int as    
$$    
declare v_length int := array_length(list, 1);    
begin    
    return list[1+round((v_length-1)*random())];    
end;    
$$ language plpgsql;    
```    
```    
select select_random_one(array[1,2,3,4]);     
```    
19、从字符串数组中随机选择一个元素 —— Randomly select one element from an string-array    
```    
-- Function:    
-- Randomly select one element from an string-array    
-- str_length: Length of string    
create or replace function select_random_one(list text[]) returns text as    
$$    
declare v_length int := array_length(list, 1);    
begin    
    return list[1+round((v_length-1)*random())];    
end;    
$$ language plpgsql;    
```    
```    
select select_random_one(array['abc','def','ghi']);    
```    
20、随机生成汉字字符串 —— Generate a random Chinese string    
```    
-- Generate a random Chinese string    
create or replace function gen_ramdom_chinese_string(str_length int) returns text as    
$$    
declare    
   my_char char;     
   char_string varchar := '';    
   i int := 0;    
begin    
    while (i =1 then        
    select string_agg(chr(19968+(random()*20901)::int), '') into res from generate_series(1,$1);        
    return res;        
  end if;        
  return null;        
end;        
$$ language plpgsql strict;       
```      
```      
postgres=# select gen_hanzi(10) from generate_series(1,10);      
      gen_hanzi             
----------------------      
 骡歵瘾崪圚祯骤泛准赔      
 𦈚寱瘫办戾薶窍爉充环      
 鹝赶轮肸蒹焷尮禀漽汤      
 庰槖诤蜞礀链惧珿憗腽      
 憭酾轮𫍚陡切弥煈瘐猎      