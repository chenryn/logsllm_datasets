attributes, and a leading or trailing /. We could use a lazy quantifier (J*?>) instead,
but that wouldn’t change anything other than making the regex a tiny bit slower since
it would cause more backtracking (Recipe 2.13 explains why). To end the tag, the regex
then matches a literal (>),
If you prefer to use a dot instead of the negated character class ], go for it. A dot
will work fine as long as you also use a lazy asterisk along with it (c *?>) and make sure
to enable the *dot matches line breaks" option (in JavaScript, you could use  instead). A dot with a greedy asterisk (making the full pattern () would
change the regex’s meaning, causing it to incorrectly match from the first  in the subject string, even if the regex has to swallow multiple tags along the
way in order to do so.
It’'s time for a few examples. The “Quick and dirty" regex matches each of the following
lines in full:
*
*s/div>
•
*
*
·
Notice that the pattern matches more than just tags. Worse, it will not correctly match
ndup> ao  sus ioo(qns aui u se auua a
type=“button" onclick=*alert(2>1)*>. Instead, it will only match until the first > that
appears within the atribute values. It willhave similar problems with comments, XML.
CDATA sections, DOCTYPEs, code within  elements, and anything else that
contains embedded > symbols.
If you're processing anything more than the most basic markup, especially if the subject
text is coming from mixed or unknown sources, you will be better served by one of the
more robust solutions further along in this recipe.
9.1 Find XML-Style Tags | 515
---
## Page 532
Allow > in attribute values
Like the quick and dirty regex we've just described, his next one is included primarily
to contrast it with the later, more robust solutions. Nevertheless, it covers the basics
needed to match XMIL-style tags, and thus it might work well for your needs if it will
be used to process snippets of valid markup that include only elements and text. The
difference from the last regex is that it passes over > characters that appear within
attribute values. For example, it will correctly match the entire  tags in the
 umous &[snotaaud an,am sfus ioafqns afdtuexa
and 1)">.
As before, the regex uses literal angle bracket characters at the edges of the regex to
match the star and end of a tag. In berween, it repeats a noncapruringgroup containing
three alternatives, each separated by the | altermation metacharacter.
The first altermative is the negated character class ** ], which matches any single
character other than a right angle bracket (which closes the tag), double quote, or single
quote (both quote marks indicate the start of an artribute value). This first alternative
is responsible for matching the tag and attribute names as well as any other characters
outside of quoted values. The order of the alternatives is intentional, and written with
performance in mind. Regular expression engines atempt altermative paths through a
regex from left to right, and attempts at matching this first option will most likely
succeed more often than the alternatives for quoted values (especially since it matches
only one character at a time).
Next come the alternatives for matching double and single quoted attribute values
(*[^*J*"> and ′[^′]*'). Their use of negated character classes allows them to con-
tinue matching past any included > characters, line breaks, and anything else that isn't
a closing quote mark.
Note that this solution has no special handling that allows it to exclude or properly
match comments and other special nodes in your documents. Make sure you're familiar
with the kind of content you're working with before putting this regex to use.
A (Safe) Efficiency Optimization
After reading the αAllow > in attribute valuesa section, you might think you could make
the regex a bit faster by adding a  or +) quantifier after the leading negated character
class ([^>"* J). At positions within the subject string where the regex finds matches,
you'd be right. By matching more than one character at a time, you’d let the regex
engine skip a lot of unnecessary steps on the way to a successful match.
What might not be as readily apparent is the negative consequence such a change could
lead to in places where the regex engine finds only a partial match. When the regex
matches an opening  that would allow the match
attempt to complete successfully, you'll run into the °catastrophic backtracking" prob-
lem described in Recipe 2.15. This is because of the huge number of ways the new,
inner quantifier could be combined with the outer quantifier (following the
516 I Chapter 9: Markup and Data Fermats
---
## Page 533
noncapturing group) to match the text that follows 
Regex options: None
Regex flavors: .NET, Java, PCRE, Perl, Ruby
With possessive quantifiers:
Regex options: None
Regex flavoes: Java, PCRE, Perl 5.10, Ruby 1.9
(X)HTML tags (loose)
Via a couple main changes, this regex gets a lot closer to emulating the easygoing rules
that web browsers use to identify X)HTML tags in source code. That makes it a good
Sused gTNLH aui 1o 1otaruaq 1asamouq Adoo o Su,An au,no auaum saseo ut uonqos
algorithm and don’t care whether the tags you match actually follow all the rules for
valid markup. Keep in mind that it’s still possible to create horrifically invalid HTML
that this regex wil not handle in the same way as one or more browsers,since browsers
parse some edge cases of erroneous markup in their own, unique ways.
This regex*s most significant diference from the previous solution is that it requires
the character following the opening left angle bracket ( element, or other similar situation where
text is treated literally. The upcoming section, “Skip Tricky (X)HTML and XML Sec-
this regex works.
tions" on page 523, shows a workaround for this issue. But first, let's look at how
<> starts off the match with a literal left angle bracket. The  that follows allows an
optional forward slash, for closing tags. Next comes the capruring group ([A-Zaz][
\s>/]*)>, which matches the tag’s name and remembers it as backreference 1. If you
don’t need to refer back to the tag name (e.g., if you’re simply removing all tags), you
9.1 Find XML-Style Tags | 517
---
## Page 534
can remove the capturing parentheses (just don’t get rid of the pattern within them)-
Within the group are two character classes. The first class, [A-Zaz], matches the first
character of the tag's name. The second class, /], allows nearly any characters
to follow as part of the name. The only exceptions are whitespace ( (which ends the tag), and / (used before
the closing > for XHTML-style singleton tags). Any other characters (even including
quote marks and the equals sign) are treated as part of the tag’s name. That might seem
antq lou nqu se1 snlog aeuado siasmoq isou mou s,n nq °aaissuaad Aano nq 
any effect on the way a page is rendered, but they nevertheless become accessible via
the DOM tree and are not rendered as text, although any contenr within them willshow
up.
After the tag name comes the attribute handling, which is significantly changed from
the previous solution in order to more accurately emulate browser-style parsing of edge
cases with poorly formed markup. Since unencoded > symbols end a tag unless they
are within attribute values, it's important to accurately determine where attribute val-
ues start and end. This is a bit tricky since it’s possible for stray quote marks and equals
signs to appear within a tag but separate from any attribute value, or even as part of an
unquoted atribute value.
Consider a few examples. This regex matches each of the following lines in their
entirety:
*">
*>
*
"*>
 4
*>
The regex matches only the underlined portions of the following lines:
*“>
* “>
*"> 5
*">
**>
Keep in mind that the handling for these examples is specifically designed to match
common browser behavior.
4. The title atribute’s value is the empty string, not e%.
5. The title atribute’s value is =*, not >. The second equals sign triggers the start of an unquoted value
518 | Chapter 9: Markup and Data Fermats
---
## Page 535
Getting back to the attribute handling, we come to the noncapruring group (?:=
\s*(?:*[^"J**|′[^′]**|[^\s>]+)I[^>])*), There are two outermost altermatives here,
separated by ]+), is for matching attribute val-
ues; the equals sign at the start signals their onset. After the equals sign and optional
whitespace (\s*), there is a nested noncapruring group that includes three options:
”[^]**> for double quoted values,  for single quoted values, and [^\s>]+)
for unquoted values. The patterm for unquoted values notably allows anything except
whitespace or >, even matching quote marks and equals signs. This is more permissive
than is officially allowed for valid HTML, but follows browser behavior. Note that
because the pattern for unquoted values matches quote marks, it must appear last in
the list of options or the other two altermatives (for matching quoted values) would
never have a chance to match.
character at a time) atribute names, the whitespace separating atributes, the trail-
The second alternative in the outer group is simply ≤[^>]. This is used to match (one
ing / symbol for self-closed tags, and any other stray characters within the tag’s bound-
aries. Because this character class matches equals signs (in addition to almost everything
else), it must be the laer option in its containing group or else the alternative that
matches attribute values would never have a chance to participate.
Finally, we close out the regex with $). This matches either the end of the tag
or, if it’s reached first, the end of the string.
By letting the match end successfully if the end of the string is reached without finding
the end of the tag, we're emulating most browsers' behavior, but we're also doing it to
avoid potential runaway backtracking (see Recipe 2.15). If we forced the regex to back-
track (and ultimately fail to match) when there is no tag-ending > to be found, the
amount of backtracking that might be needed to try every possible permutation of this
regex’s medley of overlapping patterns and nested repeating groups could create per-
formance problems. However, the regex as it’s written sidesteps this issue, and should
always perform efficiently.
The following regexes show how this pattern can be rweaked to match opening and
singleton (self-closing) or closing tags only:
Opening and singleton tags only
/]*)(?:=\s*(?:[]**|[′]*|[^\s>]+)∣[^>])*(?:>|$)
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
This version removes the  that appeared after the opening (/]*)(?:=\s*(?:*[^]*"|*[]**|[s>]+)|[^>])*(?:>|$)
Regex options: None
9.1 Find XML-Style Tags ∣ 519
---
## Page 536
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
here. Note that we are intentionally allowing attributes inside closing tags, since
The forward slash after the opening ] all overlap with each other and other parts of the regex, thereby providing a
the parts of a match that can be found by the patterms [^\s>/]*), ]+, and
potentially crushing amount of pattern combinations to try before the regex engine can
give up on a partial match.
Actually, as previously mentioned, we completely sidestepped this problem by allowing
partial matches to end at the end of the subject string. However, if atomic groups or
possessive quantifiers are available in the regex flavor youre using, it might make sense
to add them anyway. There are two reasons for this. First, with backtracking controls
in place, it's safe to require all matches to end with > if you want to. In other words,
you could replace the (?:>|$)> at the end of the regex with >), without worrying about
runaway backtracking. Second, it will make the regex more resilient when modified.
As it stands, even minor changes to the regex risk the introduction of backracking
related problems, and must be carefully considered and tested.
So let's get some backtracking controls in here! The following changes can also be
transferred to the opening/singleton and closing tag specific regexes just shown. 
With atomic groups:
($|
Regex options: None
Regexffavors: .NET, Java, PCRE, Perl, Ruby
With possessive quantifiers:
/]*+)(?:=\s*(?:[^*]**|′[^]**|[^\s>]+)|[^>]]*+(?:>|$)
Regex options: None
Regex flavors: Java, PCRE, Perl 5.10, Ruby 1.9
JavaScript and Python don’t support atomic groups or possessive quantifiers, but we
can accomplish the same thing by emulating atomic groups using backreferences to
matches captured within lookahead (see *Lookaround is atomie” on page 87 for an
explanation of why this works).
With emulated atomic groups:
/]*))\2)(?=((?:=\s*(?:*[^*]**|′[]**I[^\s>]+)|
[^>])*))3(?:>|$)
Regex options: None
520 | Chapter 9: Markup and Data Fermats
---
## Page 537
Regex flavors: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
(X)HTML tags (strict)
By saying that this solution is strict, we mean that it attempts to follow the HTML and
XHTML syntax rules explained in the introductory section of this chapter, rather than
emulating the rules browsers actually use when parsing the source code of a document.
This strictnes adds the following rules compared to the previous regexes:
• Both tag and attribute names must start with a letter AZ or az, and their names
may only use the characters AZ, az, 09, hyphen, and colon. In regex, that’s
[AZa-z][-:A-Za-20-9]*$,
• Inappropriate, stray characters are not allowed after the tag name. Only white-
space, atributes with orwithout an accompanying value),and optionally atraling
forward slash /) may appear after the tag name.
•Unquoted attribute values may not use the characters *, , ~ , =, , and whitespace
In regex, \s]+$>
• Closing tags cannot include attributes.
Since the patterm is split into two branches using altermation, the tag name is captured
to either backreference 1 or 2, depending on what type of tag is matched. The first
branch is for opening and singleton tags, and the second branch is for closing tags. Both
sets of capturing parentheses may be removed if you have no need to refer back to the
tag names.
The rwo branches of the patterm are separated into their own regexes in the following
modified versions. Both capture the tag name to backreference 1:
Opening and singleton tags only
(?:[]|[][*=<>s]+）)²)*1s*/？>
 that appears just before the closing ># is what allows this regex to match
both opening and singleton tags. Remove it to match opening tags only. Remove
just the question mark quantifier (making the / required), and it will match sin-
gleton tags only.
Closing tags only
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
In the last couple of sections, weve shown how to get a potential performance boost
by adding atomic groups or possessive quantifiers. The strictly defined paths through
9.1 FindXML-Style Tags | 521
---
## Page 538
this regex (and the adapted versions just shown) result in there being no potential to
match the same strings more than one way, and therefore having less potential back-
tracking to worry about. These regexes don’t actually rely on backtracking, so if you
wanted to, you could make every last one of their , and ?> quantifiers possessive
(or achieve the same effect using atomic groups) and they would continue matching or
failing to match the exactly same strings with only slightly less backtracking along the
way. W'e're therefore going to skip such variations for this (and the next) regex, to try
to keep the number of options in this recipe under control.
See “Skip Tricky (X)HTML and XML Sections* on page 523 for a way to avoid
matching tags within comments,  tags, and so on.
XML tags (strict)
XML precludes the need for a *loose” solution through its precise specification and
requirement that conforming parsers do not process markup that is not well-formed.
Although you could use one of the preceding regexes when processing XML docu-
ments, their simplicity won’t give you the advantage of actually providing a more reli-
able search, since there is no loose XML user agent behavior to emulate.
This regex is basically a simpler version of the *(X)HTML tags (strict)”" regex, since
we're able to remove support for two HTML features that are not allowed in XML:
unquoted atribute values and minimized atributes (attributes without an accompa-
nying value). The only other difference is the characters that are allowed as part of the
tag and attribute names. In fact, the rules for XML names (which govern the require-
ments for both tag and attribute names) are more permissive than shown here, allowing
hundreds of thousands of additional Unicode characters. If you need to allow these
characters in your search, you can replace the three occurrences of [_:A-Z][- :]*
with one of the patterms found in Recipe 9.4. Note that the list of characters allowed
differs depending on the version of XML in use.