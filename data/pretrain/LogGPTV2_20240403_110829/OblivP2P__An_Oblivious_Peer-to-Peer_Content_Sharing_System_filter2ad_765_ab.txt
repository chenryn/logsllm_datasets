colluding peers is as follows:
Deﬁnition 2.1. (Passive Colluding peers) We say that
a peer Pi passively colludes with peer Pj if both peers
share their views without any modiﬁcation, where a view
consists of: a transcript of the sequence of all accesses
made by Pi, a partial or total copy of peer’s private stor-
age, and a transcript of the access pattern induced by
the sequence of accesses. We denote by C (Pi) the set of
colluding peers with Pi.
Note that from the above deﬁnition, we have a sym-
metric relation such that if Pi ∈ C (Pj) for i = j, then
Pj ∈ C (Pi). It follows that if Pi /∈ C (Pj), then C (Pi) and
C (Pj) are disjoint.
Our protocol tolerates a fraction of c adversarial peers
in the network such that c ∈ O(Nε ), where N is the total
number of peers in the network and ε < 1. Although the
P2P network undergoes churn, we assume the fraction of
adversarial peers c remains within the asymptotic bounds
of O(Nε ). Our choice of the upper bound for c ensures
an exponentially small advantage to the attacker; for an
application that can tolerate higher attacker’s advantage,
a larger malicious fraction can be allowed.
USENIX Association  
25th USENIX Security Symposium  947
3
Insufﬁciency of Existing Approaches
2.3
Existing techniques propose anonymizing users to pre-
vent trafﬁc pattern analysis attacks. However, these so-
lutions are not sufﬁcient to protect against a global adver-
sary with long term access to communication patterns.
Unlinkability Techniques (e.g. Mixnet). Existing
anonymity approaches “unlink” the sender from the re-
ceiver (see survey [40]). Chaum proposed the ﬁrst
anonymous network called mix network [11], which
shufﬂes messages from multiple senders using a chain
of proxy servers and sends them to the receiver. Another
recent system called Riposte guarantees trafﬁc analysis
resistance by unlinking a sender from its message [41].
However, all these systems are prone to attack if an ad-
versary can observe multiple request rounds in the net-
work.
For example, consider that Alice continuously com-
municates with Bob using a mixnet service. A global
adversary observes this communication for a couple of
rounds, and records the recipient set in each round. Let
the senders’ set consists of S1 = {Alice,a,b,c} and S2 =
{a,b,Alice,c}, and the recipients’ set consists of R1 =
{x,y,z,Bob} and R2 = {x,y,Bob,z} for rounds 1 and 2
respectively. The attacker can then infer the link between
sender and receiver by intersecting S1∩S2 = {Alice} and
R1 ∩ R2 = {Bob}. The attacker learns that Alice is com-
municating with Bob, and thus breaks the unlinkability.
This attack is called the intersection, hitting set or sta-
tistical disclosure attack [25, 26]. Overall, one time un-
linkability is not a sufﬁcient level of defense when the
adversary can observe trafﬁc for arbitrary rounds.
Path Non-Correlation (e.g. Onion routing). Another
approach for guaranteeing anonymity is to route the mes-
sage from a path such that the sender and the receiver
cannot be correlated by a subset of passive adversar-
ial nodes. Onion-routing based systems like Tor en-
able anonymous communication by using a sequence of
relays as intermediate nodes (called circuit) to forward
trafﬁc [15, 42]. However, Tor cannot provide sender
anonymity when the attacker can see both the ends of
the communication, or if a global adversary observes the
entire network. Hence, if an attacker controls the entry
and the exit peer then the adversarial peers can determine
the recipient identity with which the initiator peer is com-
municating [27–30]. This is a well-known attack called
the end-to-end correlation attack or trafﬁc conﬁrmation
attack [43, 44].
2.4 Problem Statement
Our goal is to design a P2P protocol that prevents linking
a user to a requested resource using trafﬁc pattern anal-
ysis. Section 2.3 shows how previous anonymity based
solutions are susceptible to attacks in our threat model.
In this work, we address this problem from a new view-
point, by making the communication pattern oblivious
in the network. We advocate that hiding data / resource
access pattern is a necessary and important step in de-
signing trafﬁc pattern analysis resistant P2P systems.
In a P2P system such as BitTorrent, a user accesses a
particular resource by either downloading (Fetch) or up-
loading (Upload) it to the network. We propose to build
an oblivious P2P content sharing protocol (OBLIVP2P)
that hides the data access patterns of users in the net-
work. We formally deﬁne an Oblivious P2P protocol as
follows:
Deﬁnition 2.2. (Oblivious P2P): Let (P1,··· ,Pn) and
T be respectively a set of n peers and a tracker in a
P2P system. We denote by −→xi = (xi,1,··· ,xi,M) a se-
quence of M accesses made by peer Pi such that xi, j =
(opi,j, ﬁdi,j, ﬁlei,j) where opi,j = {Upload, Fetch}, ﬁdi,j is
the ﬁlename being accessed, and ﬁlei,j is the set of blocks
being written in the network if opi,j = Upload.
We denote by A (−→xi ) the access pattern induced by
the access sequence −→xi of peer Pi. The access pattern
is composed of the memory arrays of all peers accessed
while running the sequence −→xi . We say that a P2P is
oblivious if for any two equal-length access sequences
−→xi and −→x j by two peers Pi and Pj such that
• Pj /∈ C (Pi)
• ∀k ∈ [M] : xi,k = Fetch ⇔ x j,k = Fetch ∧ xi,k =
Upload ⇔ x j,k = Upload
• ∀k ∈ [M], |ﬁlei,k| = |ﬁlej,k|
are indistinguishable for all probabilistic poly-time
adversaries except for C (Pi), C (Pj), and tracker T .
Scope. OBLIVP2P guarantees resistance against persis-
tent communication trafﬁc analysis i.e., observing the
path of communication and thereby linking a sender to a
particular resource. OBLIVP2P does not prevent against:
a) Active Tampering: An adversarial peer can tam-
per, alter and deviate from the protocol to learn extra
information. Admittedly,
this can have an impact
on obliviousness, correctness and availability of the
network.
b) Side Channels: An adversary can monitor any peer in
the system to infer its usage’s habits via side channels:
the number of requests,
time of activity, and total
number of uploads. In addition, an adversary can always
infer the total ﬁle size that any peer is downloading or
uploading to the P2P network. Literature shows that
some attacks such as website ﬁngerprinting can be based
on the length of ﬁle requested by peers [45].
c) Orthogonal Attacks: Other attacks in P2P ﬁle sharing
948  25th USENIX Security Symposium 
USENIX Association
4
systems consist of threats such as poisoning of ﬁles by
uploading corrupted, fake or misleading content [46] or
denial of service attacks [47]. However, these attacks do
not focus on learning private information about the peers
and hence are orthogonal to our problem.
Admittedly, our assumption about honest-but-curious
is less than ideal and simpliﬁes analysis. We hope that
our construction spurs future work on tackling the ac-
tive or arbitrary malicious adversaries. Emerging trusted
computing primitives (e.g., Intel SGX [48]) or crypto-
graphic measures [49] are promising directions to inves-
tigate. Lastly, OBLIVP2P should not be confused with
traditional anonymous systems where a user is anony-
mous among a set of users. OBLIVP2P does not guar-
antee sender or receiver anonymity, but hides data access
patterns of the users.
3 Our Approach
As a defense against trafﬁc pattern analysis, we guaran-
tee oblivious access patterns in P2P systems. We con-
sider Oblivious RAM as a starting point.
3.1 Background: Tree-Based ORAM
Oblivious RAM, introduced by Goldreich and Ostro-
vsky [33], is a cryptographic primitive that prevents an
adversary from inferring any information via the mem-
ory access pattern. Tree-based ORAM introduced by Shi
et al. [50] offers a poly-logarithmic overhead which is
further reduced due to improvements suggested in the
follow up works [51–56].
In particular, we use Ring
ORAM, [52], one of the latest improvements for tree-
based ORAM in our protocol. In Ring ORAM, to store
N data blocks, the memory is organized in a (roughly)
logN-height full binary tree, where each node contains
z real blocks and s dummy blocks. Whenever a block is
accessed in the tree, it is associated to a new randomly
selected leaf identiﬁer called, tag. The client stores this
association in a position map PosMap along with a pri-
vate storage (stash). To read and write to the untrusted
memory, the client performs an Access followed by an
Evict operation described at a high level as follows:
• Access(adr): Given address adr, the client fetches
the leaf identiﬁer tag from PosMap. Given tag,
the client downloads one block per every node in
the path P(tag) that starts from the root and ends
with the leaf tag. The client decrypts the retrieved
blocks, and retrieves the desired block. This block
is appended to the stash.
• Evict(A,ν): After A accesses, the client selects a
path P(ν) based on a deterministic reverse lex-
icographic order, downloads the path, decrypts it
and appends it to the stash. The client runs the
(cid:3)(cid:13)(cid:16)(cid:14)(cid:15)(cid:8)(cid:7) (cid:1)(cid:11)(cid:9)(cid:8)(cid:12)(cid:15)
(cid:2)(cid:7)(cid:9)(cid:4)(cid:10)(cid:7)(cid:6)(cid:1)(cid:5)(cid:3)(cid:8)(cid:1)(cid:1)
(cid:1)
(cid:3)(cid:13)(cid:16)(cid:14)(cid:15)(cid:8)(cid:7) (cid:3)(cid:13)(cid:5)(cid:6)(cid:10)(cid:8)(cid:13)
(cid:2)(cid:7)(cid:9)(cid:4)(cid:10)(cid:7)(cid:6)(cid:1)(cid:5)(cid:3)(cid:8)(cid:1)
(cid:4)(cid:12)(cid:15)(cid:13)(cid:16)(cid:14)(cid:15)(cid:8)(cid:7) (cid:2)(cid:8)(cid:13)(cid:17)(cid:8)(cid:13)
path 
(cid:1)
(cid:1)
Node 
Peers 
Peer-to-Peer network 
Figure 1: Mapping of a client / server ORAM model to a P2P system
least common ancestor algorithm to sort the blocks
as in [51]. Finally, the client freshly encrypts the
blocks and writes them back to the nodes in the
path.
The stash is upper bounded by O(logN). The overall
bandwidth may reach  2.5logN, for N blocks stored. In
Ring ORAM, eviction happens periodically after a con-
trollable parameter A = 2z accesses where z is the num-
ber of blocks in each bucket [52].
3.2 Mapping an ORAM to a P2P setting
We start from a traditional ORAM in a client / server
model where the client is trusted and the server is not,
and simulate it on a tracker / peers setting. In particular,
we consider that the server’s memory is organized in a
tree structure, and we delegate every node in the tree to
a peer. That is, a full binary tree of N leaves is now
distributed among Np = 2N − 1 peers (refer to Figure 1).
In practice, many nodes can be delegated to many peers
based on the storage capacity of each peer.
Contrary to the client / server setting where the client
is the only one who can fetch, modify or add a block,
in P2P, the peers can also request and add new blocks.
In addition, the peers are volatile, i.e, many peers can
join or leave the network. Moreover, from a security per-
spective, the network peers do not trust each other, and
an adversarial peer can always be interested in ﬁnding
out the block being retrieved by other peers. To avoid
this, the tracker instructs the peers in a P2P system to
save encrypted blocks in their local memory (different
from the conventional BitTorrent model). Our construc-
tion ensures that the peer neither has the keys necessary
to decrypt its storage nor can it collude with other adver-
sarial peers to recover it. In this setting, we ﬁrst present a
strawman approach that guarantees our security goal but
is restricted in terms of scalability.
3.3 OBLIVP2P-0 : Centralized Protocol
Almost all ORAM constructions are in a client / server
setting and not designed for a P2P setting. A simple
approach is to map the role of the trusted client in an
USENIX Association  
25th USENIX Security Symposium  949
5
ORAM setting (refer to Figure 1) to the trusted tracker
in a P2P system. The client in ORAM is simulated by
the trusted tracker (storing the position map, private keys
and the stash) and the server by the untrusted peers (stor-
ing the encrypted blocks). With such a mapping from an
ORAM model to a P2P setting, a peer (initiator) can re-
quest for a resource to the tracker. To access a particular
resource, the tracker fetches the blocks from a path in the
tree and decrypts them to get the desired block. It then
returns the requested resource to the initiator peer. This
simple plug-&-play construction satisﬁes all our P2P se-
curity requirements.
In OBLIVP2P-0, the trusted tracker behaves as the
client in traditional ORAM model. Whenever a peer re-
quests a block, the tracker performs all the ORAM ac-
cess work, and then sends the plaintext block to the ini-
tiator. The tracker downloads the path composed of a
logarithmic number of nodes, writes back the path with
a fresh re-encryption before routing the block to the ini-
tiator. As long as the tracker is trusted, this ensures the
obliviousness property of peers’ accesses, as stated by
deﬁnition 2.2.
Upload algorithm. To upload a ﬁle, the peer divides
it into data blocks and sends the blocks to the tracker.
The tracker appends the block to the stash stored locally
while generating new random tags. The tracker updates
accordingly TagMap, and FileMap (refer to Table 1).
Fetch algorithm. To fetch a ﬁle, the peer sends the ﬁle
identiﬁer, as an instance a ﬁlename, to the tracker. The
tracker fetches from the FileMap and TagMap the corre-
sponding blocks and sends requests to the corresponding
peers to retrieve the blocks, following the Ring ORAM
Access protocol. For every retrieved block, the tracker
sends the plaintext block to the requesting peer.
Sync algorithm. The synchronization happens after ev-
ery A 2z accesses [52] (e.g., nearly 8 accesses) at which
point the tracker evicts the stash.
Tracker as Bottleneck.
In OBLIVP2P-0, the tracker
has to transmit / encrypt a logarithmic number of blocks
on every access. The tracker requires a bandwidth of
O(logN · B) where B is the block size and the computa-
tion cost of O(logN · E) where E is time for encrypting
/ decrypting a block. Moreover, our evaluation in Sec-
tion 5 shows that the eviction step is network-intensive.
In a P2P setting with large number of accesses per sec-