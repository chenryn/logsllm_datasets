### Specification and Implementation of WS-Authorization

The WS-Authorization specification is expected to be a follow-on to WS-Privacy and WS-Security, as illustrated in Figure 10. Both WS-Privacy and WS-Security are implemented within the WS-Policy framework, and it is anticipated that WS-Authorization will also be integrated into WS-Policy. The structure of WS-Authorization is likely to mirror that of the XACML standard [Rosenberg, Remy, 2004].

#### Integration with WS-Policy

IBM and Microsoft agree that endpoint policy files are the appropriate location for describing the "execution capabilities" [IBM, Microsoft, 2002] of an authenticated requester. If WS-Authorization aligns with the XACML standard, this would provide numerous opportunities for using RBAC and XACML concepts to annotate WS-Policy files. By incorporating these ontological concepts, a requester can automate the prediction of their authorization status.

### Adding Semantics for Authorization

#### Why Use Semantics?

The WS-Policy specification provides a model and syntax for describing the policies of web services. It relies on follow-on specifications such as WS-Trust, WS-Agreement, WS-Security, and WS-Utility, which define the assertions used within WS-Policy. These assertions are based on an XML domain vocabulary, allowing requesters and service providers to make assertions from any domain using the specified vocabulary.

When matching policies, a purely syntactic matching mechanism may be limited if it lacks domain context. For example, consider a scenario where a requester and a service provider include authorization assertions from the Health Care domain. Without domain knowledge, a string-matching algorithm might incorrectly deny authorization, resulting in a false negative. Semantic reasoning, however, can determine the equivalence of these assertions by leveraging domain information.

#### Key Ingredients for Semantic Authorization

To address the distributed authorization problem, several key components are necessary:

1. **Domain Knowledge**: This includes security, specifically authorization, and often a secondary domain, such as the medical domain.
2. **Expression of Constraints**: WS-Policy is the appropriate place to express constraints in the web services context.
3. **Representation of Constraints**: How to express these constraints in the policy file.
4. **Comparison Mechanism**: A method to compare the constraints with information about the requester.

### Ontology for Semantic Authorization

We will use an HL7 RBAC ontology represented in OWL-DL (Web Ontology Language - Description Logics). This ontology starts with two upper-level domains: a RBAC ontology and a HL7 ontology. The HL7 RBAC ontology is then expanded using the HL7 RBAC Permissions Catalog [HL7 Security Technical Committee, 2005], which pairs operations and objects to form permissions.

For other domains without an RBAC standard, domain-specific concepts can be imported into the RBAC ontology to create a mid-level ontology. Additional domain knowledge, such as a list of medical departments [Hull and East, 2006], and broad industry categories, further enriches the ontology.

#### Ontology Hierarchy

- **Upper Level**: RBAC and HL7 ontologies
- **Mid Level**: HL7-RBAC ontology
- **Lower Level**: Specialized ontologies for the requester and service provider

These lower-level ontologies extend the mid-level ontology to more accurately model real-world scenarios. The requester's ontology reflects organizational roles and permissions, while the service provider's ontology focuses on role-to-permission assignments and role names.

### Expressing Constraints â€“ Extension Elements

Since there is currently no WS-Authorization specification, we assume that a future one will follow the pattern of existing WS-Policy-based specifications and lack the necessary semantics for automation. Therefore, we have extended WS-Policy to include a WS-Authorization specification with semantic elements.

#### Extension Elements

- **Permission**: The operation an authenticated client is authorized to perform on a certain object.
- **Role**: A function within an organization, conferring authority and responsibility.
- **SubjectCategory**: Describes the type of a subject, such as users or organizations.
- **ModelReference**: Maps schema elements to ontological concepts, useful for constraining inputs.

These elements provide the granularity needed for web services, as they can be attached to messages, service bindings, operations, or parameters. Annotations in the WS-Policy file describe explicit 'grant' conditions, with the absence of criteria implying an implicit 'deny'.

### Constraint Comparison

Assuming a Semantic Web services framework is in place, once a set of candidate services is discovered, the requester can perform constraint analysis to predict which services they are authorized to invoke. This prediction uses client information, annotated WS-Policy files (WSP-S), and ontologies.

During the constraint analysis, if an authorization annotation is found, it is passed to a semantic comparison engine. This engine uses ontology-based inferencing to predict the client's authorization status. Reasoners, such as Jena, can derive new facts from existing information, enabling logical conclusions based on the ontology model.

If a relationship path is detected between the service and client policy concepts, authorization is predicted. If not, a second phase compares the relationships of uniquely named concepts from different ontologies to determine equivalence. In highly standardized domains like Health Care, different names for similar concepts (e.g., "Emergency Room Physician" vs. "ER Doctor") can be resolved through this process.

By placing weights on relationships, the importance of each can be determined, ensuring accurate and efficient authorization predictions.