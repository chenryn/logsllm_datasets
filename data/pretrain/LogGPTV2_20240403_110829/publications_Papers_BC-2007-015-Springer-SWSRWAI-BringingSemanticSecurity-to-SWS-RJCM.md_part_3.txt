specification will be a follow-on specification to WS-Privacy and WS-
Security, as seen in Figure 10. WS-Privacy and WS-Security are
implemented in WS-Policy, and it is believed that WS-Authorization will be
implemented in WS-Policy as well. It is also believed that this specification
will be similar in structure to the XACML standard [Rosenberg, Remy,
2004].
7. Bringing Semantic Security to Semantic Web Services 19
IBM and Microsoft concur that the end-point policy files are the
appropriate location for describing “execution capabilities” [IBM, Microsoft
2002] of an authenticated Requester. If the WS-Authorization specification
ends up being similar to the XACML standard, this would offer many
possibilities to an approach which uses RBAC and XACML concepts to
annotate WS-Policy files with semantics to aid in the discovery of services
which a Requester will be authorized to invoke or execute. By using
ontological concepts, in this case RBAC and XACML concepts, to describe
execution capabilities of an authenticated Requester, a potential Requester
can automate the prediction of their authorization.
Figure 10 Web services stack
4. ADDING SEMANTICS FOR AUTHORIZATION
4.1 Why Use Semantics
The WS-Policy specification is a model and syntax for describing the
policies of a Web services. It relies on its follow-on specifications, such as
WS-Trust, WS-Agreement, WS-Security, and WS-Utility, which make
within WS-Policy. The assertions are based on an XML based domain
vocabulary. A Requester and service provider can make assertions in WS-
Policy from any domain using the specifications which describe the
vocabulary. When matching policies, if the policy matching mechanism is
unaware of the domain context then it would be limited to using syntactical
matching. Consider the following example where a Requester and a service
provider have included authorization assertions from the Health Care
domain.
20 Chapter 7
Figure 11 Roles in Web service example
These assertions are equivalent. The domain knowledge needed to
determine that these assertions are equivalent are absent in a purely syntactic
matching mechanism. Therefore, using a string matching algorithm would
result in the denial of authorization for the Requester, which is a false
negative result. These assertions can easily be determined to be equivalent
by using domain information along with semantic reasoning. From the
example, it can be determined that ∀Physician WorkIn Emergency Room
(Physician) ⇒ provides Emergency Services; that is to say that a Physician
working in an Emergency Room is an entity that provides Emergency
Services.
There are several key “ingredients” that are needed for a semantic
solution to the distributed authorization problem; which is after all what we
are talking about. The first ingredient is Domain Knowledge and as we
discussed, the domain is security, more precisely authorization. There will
most likely be a second domain, such as the medical domain which we will
use in our examples. The second ingredient is a means to express
constraints. Also as we discussed, WS-Policy seems to be the appropriate
place for to express constraints for the Web services arena. The third
ingredient is how to express the constraints in the Policy file. The last
ingredient is a means to compare the constraints with information about the
Requester. Let’s now look at each of these ingredients in more detail.
4.2 Ontology
We will discuss a HL7 RBAC ontology which is represented in OWL-
DL [OWL, 2004], Web Ontology Language - Description Logics. It begins
with two separate Upper Level domain ontologies, a RBAC ontology and a
HL7 ontology, as seen in Figure 8. Then a HL7 RBAC ontology is created
by expanding the RBAC Upper Level ontology through the use of the HL7
RBAC Permissions Catalog [HL7 Security Technical Committee, 2005].
This catalog contains operations and objects which have been paired
together to form permissions. For other domains in which an RBAC
standard is not available, concepts from a domain may be imported into the
RBAC ontology in order to create a domain specific Mid Level ontology.
7. Bringing Semantic Security to Semantic Web Services 21
A comprehensive list of medical departments [Hull and East, 2006], and
a list of the 31 broad industry categories provides the information for
additional Domain Knowledge.
RIM
RBAC HL7 Bio-Medical
ONTOLOGY ONTOLOGY Security
Upper Level Document
HL7-RBAC
Mid Level
ONTOLOGY
Low Level
John Hopkins
St. Francis
HL7-RBAC
HL7-RBAC Instance
ONTOLOGY
ONTOLOGY Data
Figure 12 HL7 & RBAC Ontology Hierarchy
In the Figure there are two more specialized Lower Level ontologies,
one for the requester and one for the service provider. These are created by
extending the mid level ontology in an effort to more accurately model the
real world. The requesters’ ontology should be developed to reflect its
organizational implementation. This can be done by adding users, assigning
them to roles, using variations of the role names, and assigning appropriate
permission to these roles. The service providers’ ontology is extended in
much the same way with the exception of not adding users, which is
practical for security reasons. The fundamental difference between the
ontologies is variation of role to permissions assignment, as well as role
names. For the sake of a real world argument you will notice that we
included some different role names between the ontologies, for the same job
function. For example, ‘Radiology Technician’ and ‘Radiology Tech’,
‘General Physician’ and ‘Family Practice Physician’, and ‘Pediatric Nurse’
and ‘Pediatric RN’. The above titles are all standard titles for positions in
the Health Care domain. Since many organizations will implement systems
22 Chapter 7
using variants of position titles. We will discuss the use of these two
Ontologies in a few moments.
Figure 9 below shows a portion of our HL7 RBAC Mid Level
Ontology. The ‘RBAC Reference Model Elements’ is the parent to the
actual elements, namely Objects, Operations, Permissions, Role, Session,
and Users. There are relationships between these elements, more accurately
ontological concepts. A Semantic Authorization technique, such as this,
exploits these relationships. Let us now describe some of the relationships.
Figure 13 Classes in the RBAC Ontology
As we stated earlier, permissions have a ‘has object’ relationship with
Object and a ‘has operation’ with Operation. A Role has a ‘assigned to’
relationship with User, a ‘department’ relationship with Health Service
(which is not visible in the figure), ‘has permission’ relationship with
Permission, and so on. A User has a ‘assigned to’ relationship with Role, a
‘employed by’ relationship with Organization (which is not visible in the
figure), a ‘isA’ relationship with Human, and so on.
As can be seen below, there are many instances of permissions. These
are all from the HL7 Permissions specification. This is not an exhaustive list
7. Bringing Semantic Security to Semantic Web Services 23
of the possible permissions; rather the committees’ goal was to provide a
general starting point which provides examples so that health care
organizations could correctly create permissions tailored to their
organization.
Figure 14 Instances example
4.3 Expressing Constraints – Extension Elements
This section covers the second and third ingredients for a Semantic
Authorization approach. There currently is no a WS-Authorization
specification. After reviewing current specifications that are built onto WS-
Policy (WS-Agreement, WS-Transaction, WS-Security) we assume that a
future WS-Authorization specification would follow suite and therefore lack
the semantics needed for an automated process. Therefore in our examples
we have extended the WS-Policy to include a WS-Authorization
specification which incorporates semantics. By automating the predication
24 Chapter 7
of authorization, a requester or consumer can save time and more efficiently
allocate its resources.
The authorization annotations are extensibility elements similar to the
extensibility elements provided in WSDL-S [Akkiraju et al., 2005], for
example precondition and effect. The annotated WS-Policy file, called a
SemPolicy in [Verma, 2006], will provide extensibility elements for
semantic representation of authorization. The extensibility elements are
derived from the RBAC standard [NIST, 2004] and XACML representation
of RBAC.
RBAC was chosen because it is widely accepted, easily understood, and
succinctly expresses authorization permissions. Here we will cover the
extensibility elements, their descriptions, and give examples. Our first
extension element is permission. permission is the operation an
authenticated client is authorized to perform on a certain object, which is a
resource.
The extension element role is a function within the context of an
organization; some associated semantics regarding the authority and
responsibility are conferred on the user assigned to the role. A role could be
general, for example ‘Employee’, or more specific as in ‘Radiologist’. As
well, a role could be a group which confers authority and responsibility as in
‘Hospital Executive’.
Since it is not feasible to name each user and the semantics of a subject
can vary greatly we use an extension element subjectCategory to describe
the type of a subject. Subjects can be users, which the National Institute of
Standards and Technology define as a human, machine, network, or
intelligent autonomous agent. In our context, this can also include an entire
organization. Using subjectCategory as an extension element enables us to
describe relationships. For example, the subjectCategory partner describes
that the subject is in some kind of partnership agreement with the provider of
the Web service.
Lastly, modelReference is used to handle the mapping of a schema
element to an ontological concept. For example, this can be applicable when
a Web service provider wants to demonstrate that authorization will be
constrained to certain inputs for an operation. This might be done using an
ontological concept like patient_identification_number.
An approach such as this provides the granularity needed for Web
services. This is because a WS-Policy file may be attached to a message, a
service binding, an operation, or a parameter such as an input. We assume
that annotations are used to describe an explicit ‘grant’; while we assume
lack of the criteria or conditions is an implicit ‘deny’.
The WSP-S is an annotated WSP. As seen in Figure 13, annotations
can occur after the  tag in WSP. If there is one annotation for the
entire WSP then it could be placed after the first  tag. The
first annotation in Figure 13 describes authorization for a requestor whose
7. Bringing Semantic Security to Semantic Web Services 25
role is “Emergency Room Physician”. The second annotation is a
subjectCategory, namely “Health Services”. From the namespace it is seen
that the concepts are from the HL7 RBAC ontology.
This approach allows for multiple annotations within the policy file.
This enables a provider to express multiple conditions regarding
authorization. For instance, an ‘Emergency Room Physician’ who is also
affiliated with an organization that is categorized as ‘Health Services’ may
have authorization to a providers’ resource, while all other Physicians do
not. This is accomplished by placing both annotations within the 
tag. This can be seen in the example below.
wsse:X509v3
wsse:X509v3
Figure 15 Annotated WS-Policy file
There is also the situation in which a requester can have authorization to
access a resource if it meets one condition or one set of conditions described
by the provider. In this case the annotations are placed within the
 tags. Figure 13 shows two sets of conditions with in the
 tags. The authorization information from this figure can be
read as authorization may be granted to someone that is an Emergency
26 Chapter 7
Room Physician that is affiliated with an organization in Health Services or
an Executive Administrator who has read privileges and is affiliated with an
organization in Health Service.
Any domain specific ontology can be used for the annotations.
However, a quality of RBAC is that it has a structural hierarchy with
relationships which lends itself to the creation of an ontology schema. The
concepts of RBAC include organizational and professional roles. This fits
well with the extension elements derived from the XACML representation of
RBAC.
The annotations begin with the namespace “wsau”, as depicted in the
previous figure, which is declared in XML declarations as follows:
xmlns:wsau=“http://lsdis.cs.uga.edu/authorization/wsau”.
4.4 Constraint Comparison
We assume here that a Semantic Web services framework has been
implemented. This may be a stretch of the imagination for some since there
are only a handful of these around, and mostly in academia. Never the less,
let’s assume that we have discovered a set of services using one of these
implementations.
Once Semantic Discovery has returned a set of candidate services, the
requestor can perform constraint analysis to determine which of the
candidate services it most likely has authorization to invoke. This
predication uses information given about the client, WSP-S, and ontologies
to make the ‘best choice’. One approach is to have authorization
information for the requester contained in client WSDL’s attached policy
file.
During the constraint analysis process, if an authorization annotation is
found then that information it should be passed to a ‘manager’ or ‘engine’
which can perform Semantic Comparison Analysis. Information contained
within the annotation, regarding the service provider, and information within
the client policy, regarding the client, is used for ontology based inferencing
to predict if the client has authorization to use the resource.
Ontology inference engines, also called reasoners, are software
applications that derive new facts or associations from existing information.
Inference and inference rules allow for deriving new data from data that is
already known. Thus, new pieces of knowledge can be added based on
previous ones. By creating a model of the information and relationships, we
enable reasoners to draw logical conclusions based on the model. For
example, with OWL it is possible to make inferences based on the
associations represented in the models, which primarily means inferring
transitive relationships. Jena has a built in rule-base reasoner that provides
OWL inferencing support. The RBAC standard requires the ontology have
7. Bringing Semantic Security to Semantic Web Services 27
the ability to apply multiple restrictions and cardinalities to concepts in the
hierarchy. The reasoner that is built into Jena is able to reason over these
more complex ontologies.
If an authorization path is detected via dynamically generated queries
then a relationship(s) exists between the concept(s) in the service policy file
and the concept(s) in the client policy file. The RBAC standard provides a
defined structure such a path exists only if the concepts are related in such a
way that authorization should be granted. Therefore, we would predict that
authorization will be granted. If a path is not detected then we move to a
second phase.
In order to determine if two uniquely named concepts from different
ontologies are equivalent, the relationships of those concepts to other
concepts in their respective ontologies must be comapred. Even in a highly
standardized domain such as Health Care, two concepts may have different
names. For instance, an ‘Emergency Room Physician” from one ontology
may correspond to an “Emergency Physician’ from another ontology, or “ER
Doctor” or ER Physician”.
One popular approach is to examine the relationships of the client and
service concepts and those related concepts that are linked by these
relationships. Because of the structure of the RBAC ontology, it is manually
possible to quickly determine which relationships are most important. In
most cases it will be necessary to place weights on the relationships in order