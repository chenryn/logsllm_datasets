# The Boon and Bane of Cross-Signing: Shedding Light on a Common Practice in Public Key Infrastructures

**Authors:**
- Jens Hiller
- Johanna Amann
- Oliver Hohlfeld

**Citation:**
If you cite this paper, please use the CCS reference: Jens Hiller, Johanna Amann, and Oliver Hohlfeld. 2020. The Boon and Bane of Cross-Signing: Shedding Light on a Common Practice in Public Key Infrastructures. In 2020 ACM SIGSAC Conference on Computer and Communications Security (CCS ’20), November 9–13, 2020, Virtual Event, USA. ACM, New York, NY, USA, 18 pages. https://doi.org/10.1145/3372297.3423345

**Extended Paper Version**

## Abstract
Public Key Infrastructures (PKIs) with their trusted Certificate Authorities (CAs) form the trust backbone of the Internet. CAs issue certificates that verify the identities of servers, applications, or users. To be recognized by operating systems and browsers, a CA must undergo rigorous and costly validation processes. Alternatively, trusted CAs can cross-sign other CAs to extend their trust. This paper systematically analyzes the current and historical state of cross-signing in the Web PKI. Our dataset, derived from passive TLS monitors and public CT logs, covers over seven years and includes more than 225 million certificates with 9.3 billion trust paths. We highlight the benefits and risks of cross-signing, including the difficulty of revoking trusted CA certificates, where cross-signing can result in valid trust paths persisting after revocation. This is particularly problematic for non-browser software that often blindly trusts all CA certificates and ignores revocations. However, cross-signing also enables the rapid bootstrapping of new CAs, such as Let’s Encrypt, and ensures a seamless user experience by providing backward compatibility. We propose new rules and guidance for cross-signing to maximize its benefits while mitigating its risks.

**CCS Concepts:**
- Security and privacy → Network security

**Keywords:**
- PKI, X.509, SSL, TLS, cross-signing, cross certification

**ACM Reference Format:**
Jens Hiller, Johanna Amann, and Oliver Hohlfeld. 2020. The Boon and Bane of Cross-Signing: Shedding Light on a Common Practice in Public Key Infrastructures. In 2020 ACM SIGSAC Conference on Computer and Communications Security (CCS ’20), November 9–13, 2020, Virtual Event, USA. ACM, New York, NY, USA, 19 pages. https://doi.org/10.1145/3372297.3423345

**Note:**
Parts of the work were conducted during an internship at the International Computer Science Institute (ICSI).

**Permissions:**
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than the author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org.

**CCS '20, November 9–13, 2020, Virtual Event, USA**
© 2020 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-7089-9/20/11...$15.00
https://doi.org/10.1145/3372297.3423345

## 1. Introduction
Public key infrastructures (PKIs), such as the Web PKI, provide the trust infrastructure for many applications on the Internet. They enable web browsers and mobile apps to authenticate servers for secure online banking, shopping, and password entry. Governments also use PKIs for authentication in privacy-preserving health systems, remote administrative functions, and electronic voting [3, 32, 89, 91].

Certificate Authorities (CAs) serve as trust anchors in PKIs, issuing trusted certificates to companies and individuals. The security of a PKI depends on the benign and correct behavior of all CAs. Despite audit processes, several cases of severe CA misbehavior or security breaches have occurred. For example, in 2011, the DigiNotar CA was compromised [77], leading to its removal from root stores and rendering all its issued certificates untrusted. In response, new security measures were introduced to reduce the impact of future compromises [2]. However, these measures often face limited deployment, reducing their effectiveness [2]. The Certification Authority Browser (CAB) Forum has gradually increased the requirements for CAs to remain in root stores.

Alternatively, trusted CAs can cross-sign other CAs to extend their trust, thereby mitigating the lengthy and costly validation process for new CAs. Cross-signing involves obtaining signatures from multiple issuers for a single certificate. This enables new CAs to quickly establish trust. A notable example is Let’s Encrypt, which used a cross-sign from the trusted CA IdenTrust to issue trusted certificates while applying for root store inclusion of its own root certificate [42]. Cross-signing also ensures broad validation of certificates across different root stores of operating systems or applications.

However, cross-signing also poses risks. As cross-signs are not systematically tracked [80], they can complicate the proper revocation of certificates in case of CA misbehavior, errors, or stolen keys. The complexity added by cross-signs has already led to overly broad application of certificate revocation [31, 94]. In this paper, we show that cross-signs can lead to certificates remaining valid even when their CA is distrusted, making revocation difficult. Different software and operating systems do not always thoroughly revoke certificates, and cross-signing makes it challenging to track the revocation of CA certificates, especially for non-browser software.

In this paper, we conduct the first systematic study of the use and security effects of cross-signing (also known as cross certification), which is a major reason for missing transparency in PKIs [80]. Technically, cross-signing creates multiple certificates that share the same subject and public key, as each certificate has exactly one issuer.

## 2. Background
This section provides a brief overview of how CAs establish trust, how trust is anchored in root stores, and how certificate revocation is applied today. For a detailed description of PKIs and their fundamental concepts, see [28, 46].

Operating systems and some web browsers maintain root stores, which serve as trust anchors for validating certificates. A certificate is valid if it is issued—directly or indirectly—by a trusted root certificate included in the root store. Root certificates typically issue intermediate certificates, which can issue further intermediate or leaf certificates. Figure 1 illustrates an example with several root (Ri), intermediate (Ii), and leaf (Li) certificates.

In the event of breaches, such as stolen private keys, certificates must be revoked. Revocation information is traditionally distributed by CAs using Certificate Revocation Lists (CRLs) [47] or interactively using OCSP [38]. However, these mechanisms are often underutilized due to distribution overhead and privacy concerns [53, 85]. Applications thus often rely solely on the current state of the operating system’s root store.

Consequently, browsers and operating systems have started shipping vendor-controlled CRLs. Mozilla uses OneCRL [39], Google uses CRLSets [79] and a blacklist [78], while Microsoft and Apple include information on blocked CA certificates in their root stores [50, 59].

## 3. Cross-Signing
We next introduce cross-signing and provide a classification of the different cross-signing patterns used in the remainder of the paper.

### 3.1 Definition of Cross-Signing
Cross-signing is illustrated with a typical use-case: To issue trusted certificates, a CA must be included in the respective root stores of web browsers and operating systems. This inclusion requires a time-consuming audit and certification process. During this process, a CA may want to issue trusted certificates. To achieve this, another CA (CA_trusted), whose certificate is already included in root stores, cross-signs the CA’s root or intermediate certificate to create a trust path that ends in the already trusted root certificate of CA_trusted. In Figure 1, the intermediate certificate I5 is cross-signed by I4, providing a trust path to R2. As a real-world example, Let’s Encrypt used an intermediate certificate cross-signed by IdenTrust to issue certificates while waiting for root store inclusion of its own root certificate [42]. Similarly, CAs included in only some root stores can use cross-signing to extend trust to additional root stores.

CAs typically refer to this as cross-signing (or cross-certification), and the resulting certificates as cross-certificates [42, 43]. RFC 5280 defines a cross-certificate as a CA certificate with different entities as issuer and subject [6]. In this paper, we use a broader definition: (i) To analyze cross-signing for all certificate types (root, intermediate, and leaf), we consider all certificates, not just CA certificates. (ii) To track the effects of signing a certificate with multiple CA certificates from the same entity, we only require signatures by two different CA certificates, but not that the issuer and subject are controlled by different entities.

Specifically, our definition is as follows (cf. Figure 1). To cross-sign a certificate (e.g., I5) originally issued by R3, a CA certificate (e.g., I4) creates and signs a copy I′_5, which has the same subject and public key as I5. This process is necessary because each certificate has exactly one issuer field [6], i.e., issuer(I5) = R3 ≠ issuer(I′_5) = I4. Thus, a cross-sign is a certificate for which another certificate exists with the same subject and public key but a different issuer and signature. These certificates form a cross-sign certificate (XS-Cert). The certificates in a XS-Cert can be used interchangeably: If I5 and I′_5 are CA certificates, a certificate issued by I5 will also validate using I′_5. In detail, when a certificate is validated, the validating software searches for a CA certificate whose subject matches the issuer of the current certificate and checks that the signature of the current certificate validates against the public key of the CA certificate. Since all certificates in a XS-Cert share the same subject and public key, I5 and I′_5 can be used interchangeably.

It is important to note the difference between cross-signing and certificate re-issuances without re-keying. When a certificate reaches the end of its validity, it is often replaced by a certificate with the same subject, key, and a new validity period. We need to distinguish these cases from cross-signing, which can be complicated since cross-signs often (and legitimately) do not have the exact same validity periods as the original certificate, e.g., because the applications only trust divergent CAs. Here, the server can send the certificate it knows will be trusted by the client, using the user agent data in an HTTP request to determine the client’s root store. As leaf certificates cannot issue certificates, problematic cases are limited in scope. Still, for a revocation in case of a security incident, all certificates in the XS-Cert must be revoked; otherwise, insecure certificates remain valid.

### 3.2 Classification of Cross-Signing Patterns
We classify cross-signing patterns into several categories:

- **Leaf-Mix XS-Certs (Theoretical):** In theory, a XS-Cert could contain leaf certificates and (root or intermediate) CA certificates (cf. Figure 2d). Private keys of CA certificates have special protection requirements, such as the use of sealed hardware. As private keys of leaf certificates are typically present on comparably vulnerable end-systems, a leaf-mix XS-Cert would put a key that can issue certificates at risk.