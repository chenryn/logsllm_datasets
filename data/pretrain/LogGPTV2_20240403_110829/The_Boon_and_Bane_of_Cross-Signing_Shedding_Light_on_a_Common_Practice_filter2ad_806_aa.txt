title:The Boon and Bane of Cross-Signing: Shedding Light on a Common Practice
in Public Key Infrastructures
author:Jens Hiller and
Johanna Amann and
Oliver Hohlfeld
If you cite this paper, please use the CCS reference: Jens Hiller, Johanna Amann, and Oliver Hohlfeld. 2020. The Boon and Bane of Cross-Signing: Shedding Light on a Common
Practice in Public Key Infrastructures. In 2020 ACM SIGSAC Conference on Computer and Communications Security (CCS ’20), November 9–13, 2020, Virtual Event, USA. ACM,
New York, NY, USA, 18 pages. https://doi.org/10.1145/3372297.3423345
Extended Paper Version
The Boon and Bane of Cross-Signing: Shedding Light on a
Common Practice in Public Key Infrastructures
Jens Hiller∗
Oliver Hohlfeld
PI:EMAIL
Brandenburg University of
Technology
PI:EMAIL
Communication and Distributed
Systems, RWTH Aachen University
Johanna Amann
PI:EMAIL
ICSI; Corelight; LBNL
0
2
0
2
p
e
S
8
1
]
R
C
.
s
c
[
1
v
2
7
7
8
0
.
9
0
0
2
:
v
i
X
r
a
ABSTRACT
Public Key Infrastructures (PKIs) with their trusted Certificate Au-
thorities (CAs) provide the trust backbone for the Internet: CAs
sign certificates which prove the identity of servers, applications, or
users. To be trusted by operating systems and browsers, a CA has
to undergo lengthy and costly validation processes. Alternatively,
trusted CAs can cross-sign other CAs to extend their trust to them.
In this paper, we systematically analyze the present and past state
of cross-signing in the Web PKI. Our dataset (derived from passive
TLS monitors and public CT logs) encompasses more than 7 years
and 225 million certificates with 9.3 billion trust paths. We show
benefits and risks of cross-signing. We discuss the difficulty of re-
voking trusted CA certificates where, worrisome, cross-signing can
result in valid trust paths to remain after revocation; a problem for
non-browser software that often blindly trusts all CA certificates
and ignores revocations. However, cross-signing also enables fast
bootstrapping of new CAs, e.g., Let’s Encrypt, and achieves a non-
disruptive user experience by providing backward compatibility. In
this paper, we propose new rules and guidance for cross-signing to
preserve its positive potential while mitigating its risks.
CCS CONCEPTS
• Security and privacy → Network security.
KEYWORDS
PKI; X.509; SSL; TLS; cross-signing; cross certification
ACM Reference Format:
Jens Hiller, Johanna Amann, and Oliver Hohlfeld. 2020. The Boon and
Bane of Cross-Signing: Shedding Light on a Common Practice in Public
Key Infrastructures. In 2020 ACM SIGSAC Conference on Computer and
Communications Security (CCS ’20), November 9–13, 2020, Virtual Event, USA.
ACM, New York, NY, USA, 19 pages. https://doi.org/10.1145/3372297.3423345
∗Parts of the work conducted during an internship at the International Computer
Science Institute (ICSI).
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’20, November 9–13, 2020, Virtual Event, USA
© 2020 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-7089-9/20/11...$15.00
https://doi.org/10.1145/3372297.3423345
1 INTRODUCTION
Public key infrastructures (PKIs) like the Web PKI, provide the trust
infrastructure for many applications in today’s Internet. They, e.g.,
enable webbrowsers, or apps on mobile operating systems (OS),
to authenticate servers for secure online banking, web shopping,
or password entry. Governments use PKIs for authentication in
privacy-preserving health systems, remote functionality of admin-
istrative offices, or electronic voting [3, 32, 89, 91].
Certificate Authorities (CAs) serve as trust anchors in PKIs and
have the ability to issue trusted certificates to companies and indi-
viduals. The security of a PKI relies on benign and correct acting of
all its CAs. Despite audit processes, there have been several cases of
severe CA misbehavior or security breaches: In 2011, the DigiNotar
CA was compromised [77]. This caused its removal from root stores.
All DigiNotar issued certificates became untrusted. In the following
years, a range of new security measures were introduced to reduce
the impact of future compromises [2]. However, most face small
deployment and thus have limited effect [2]. Along this path, the
Certification Authority Browser (CAB) Forum gradually increased
the requirements that CAs must fulfill to remain in root stores.
Alternatively, trusted CAs can cross-sign other CAs to extend
their trust to them—thereby mitigating the lengthy and costly vali-
dation process that new CAs need to undergo. Cross-signing de-
scribes the approach to obtain signatures from several issuers for
one certificate1. It enables new CAs to quickly establish trust. A
prominent example is the bootstrapping of Let’s Encrypt, which
issued trusted certificates based on a cross-sign of their CA certifi-
cates by the already trusted CA IdenTrust while applying for root
store inclusion of their own root certificate [42]. Cross-signing also
ensures broad validation of certificates in face of divergent root
stores of OSes or applications.
However, cross-signing also bears risks: as cross-signs are not
systematically tracked [80], cross-signing can challenge proper
revocation of certificates in case of CA misbehavior, erroneous op-
eration, or stolen keys. The complexity added by cross-signs already
resulted in too broad application of certificate revocation [31, 94].
In this paper, we show that cross-signs also can lead to certificates
remaining valid when their CA was distrusted; that the complexity
of existing cross-signs makes revocation difficult; that different
software and operating systems do not always thoroughly revoke
certificates; and that cross-signing makes it difficult to track revo-
cation of CA certificates, especially for non-browser software.
In this paper, we perform the first systematic study of the use and
security effects of cross-signing (also known as cross certification),
which is one major reason for missing transparency in PKIs [80].
1Technically, cross-signing creates several certificates that share subject and public
key as each certificate has exactly one issuer.
CCS ’20, November 9–13, 2020, Virtual Event, USA
Jens Hiller, Johanna Amann, and Oliver Hohlfeld
For this, we use a passive TLS data-set that contains information
about more than seven years of real-world TLS usage, containing
more than 225 million certificates derived from more than 300
billion connections—which provides us with insights on the effect
of cross-signs on real user connections. For a broad coverage of CA
certificates, we combine this private, user-centered dataset with
publicly available data from Certificate Transparency (CT) logs.
The main contributions of our paper are as follows:
• We provide a classification of different cross-sign patterns
and analyze them with respect to their benefits, but also their
risks of unexpected effects on the trust system.
• We systematically analyze the use of cross-signing in PKI
systems, with a focus on the Web PKI. Thereby, we reveal
problematic cross-signs that render certificate revocation or
root store removals ineffective, leading to unwanted valid
trust paths. We also find legit use cases, e.g., cross-signing
enabled the quick tremendous success of Let’s Encrypt, eases
the transition to progressive cryptography while maintain-
ing compatibility for legacy applications, and makes a single
certificate trusted across different applications and operating
systems, achieving a non-disruptive user experience.
• We propose new rules and guidance for cross-signing to
preserve its positive potential but mitigate enclosed risks.
2 BACKGROUND
This section gives a brief overview of how CAs establish trust,
how trust is anchored in root stores, and how certificate revoca-
tion is applied today. For a thorough description of PKIs and their
fundamental concepts, we refer readers to [28, 46].
Operating systems and some web browsers maintain root stores.
They serve as trust anchors when validating certificates: To be valid,
a certificate must be issued—directly or indirectly—by a trusted root
certificate, i.e., a certificate that is included in the root store. Root
certificates mostly issue intermediate certificates which can issue
further intermediate or leaf certificates. Figure 1 shows an example
with several root (Ri), intermediate (Ii), and leaf (Li) certificates.
In case of breaches like stolen private keys, certificates have to be
revoked. Revocation information is traditionally distributed by CAs
using Certificate Revocation Lists (CRLs) [47] or interactively using
OCSP [38]. However, these mechanisms mostly remain unused
due to (i) the overhead for distribution and (ii) inherent privacy
concerns [53, 85]. Applications thus often solely rely on the current
state of the operating system’s root store.
Consequently, Browsers and operating systems have started ship-
ping vendor-controlled CRLs. Mozilla uses OneCRL [39], Google
CRLSets [79] and a blacklist [78]; Microsoft and Apple include in-
formation on blocked CA certificates in their root stores [50, 59].
3 CROSS-SIGNING
We next introduce cross-signing and provide a classification of the
different cross-signing patterns used in the remainder of the paper.
3.1 Cross-signing: Definition
We illustrate cross-signing with a typical use-case: To issue trusted
certificates, a CA must be included in the respective root stores of
web browsers, operating systems, etc. Inclusion in these root stores
Figure 1: An example PKI including a cross-sign (I5 + I′
5).
requires time demanding audit and certification processes. During
the process of being included in root stores, a CA may already want
to issue trusted certificates. To this end, another CAtrusted, whose
certificate is already included in root stores, cross-signs the CA’s
root or intermediate certificate to create a trust path that ends in
the already trusted root certificate of CAtrusted. In Figure 1, the
intermediate certificate I5 is cross-signed by I4, providing a trust
path to R2. As real-world example, Let’s Encrypt has been using an
intermediate certificate cross-signed by IdenTrust to already issue
certificates while waiting for root store inclusion of its own root
certificate [42]. Similarly, CAs that are included in only some root
stores can use cross-signing to extend trust to further root stores.
CAs typically call this cross-signing (also cross-certification) and
the resulting certificates cross-certificates [42, 43]. Analogously,
RFC 5280 defines a cross-certificate as a CA certificate that has
different entities as issuer and subject [6]. In this paper, we use a
broader definition: (i) To analyze cross-signing for all certificate
types, i.e., root, intermediate, and leaf certificates, we consider all
certificates, not only CA certificates. (ii) To also track effects of
signing a certificate with multiple CA certificates of the same entity,
we only require signatures by two different CA certificates, but not
that issuer and subject are controlled by different entities.
Specifically, our definition is as follows (cf. Figure 1). To cross-sign
a certificate (here: I5) that was originally issued by R3, a CA certifi-
cate (here: I4) creates and signs a copy I′
5 which has the same subject
and public key as I5. This process is necessary as each certificate has
exactly one issuer field [6], i.e., issuer(I5) = R3 (cid:44) issuer(I′
5) = I4.
Thus, a cross-sign is a certificate for which another certificate exists
that has the same subject and public key, but a different issuer and
signature. These certificates form a cross-sign certificate (XS-Cert).
The certificates of a XS-Cert can be used interchangeably: If I5 and
I′
5 are CA certificates, a certificate issued by I5 will also validate
using I′
5. In more detail: when a certificate is validated, the validat-
ing software searches a CA certificate whose subject equals the
issuer of the current certificate. It then checks that the signature
of the current certificate validates against the public key of the CA
certificate. As all certificates of a XS-Cert share subject and public
key, I5 and I′
Note that there is a difference between cross-signing and cer-
tificate re-issuances without re-keying. When a certificate reaches
the end of its validity, it often is replaced by a certificate with the
same subject, key and a new validity period. We need to distinguish
these cases from cross-signing. Telling them apart is complicated
since cross-signs often (and legitimately) do not have the exact
same validity periods as the original certificate, e.g., because the
5 can be used interchangeably.
CA1CA2CA3rootstoreI5R1R2R3I1I2I3I4L1L2L3L4L5L6I4R3I5XS-CertL6I5The Boon and Bane of Cross-Signing: Shedding Light on a Common Practice in Public Key Infrastructures
CCS ’20, November 9–13, 2020, Virtual Event, USA
applications only trust divergent CAs; Here, the server can send
that certificate of which it knows that it will be trusted by the client,
e.g., using the user agent data in an HTTP request to determine
the client’s root store. As leaf certificates cannot issue certificates,
problematic cases are limited in scope. Still, for a revocation in
case of a security incident, all certificates of the XS-Cert have to be
revoked – otherwise insecure certificates remain valid.
Leaf-Mix XS-Certs (Theoretical). In theory, a XS-Cert could con-
tain leaf certificates and (root or intermediate) CA certificates (cf.
Figure 2d). Private keys of CA certificates have special protection
requirements such as the use of sealed hardware. As private keys
of leaf certificates are typically present on comparably vulnerable
end-systems, a leaf-mix XS-Cert would put a key that can issue