RIP, the hypervisor may adopt the following approach, as shown
in Figure 4a. In the first step, the adversary obtains the physical
address of one of the victim VM‚Äôs last-level page table page. This can
be achieved by clearing the Present bits of all pages and observing
the subsequent NPFs: The faulting address of the first NPF reveals
the value of gCR3 of the current process inside the victim VM and
the faulting address of the fourth NPF reveals the address of a last-
level page table page. It is preferred that this last-level page table
page is not actively used by the victim; otherwise fault may occur
inside the victim VM. In the second step, the hypervisor remaps the
victim VM‚Äôs gCR3 value obtained in step ‚ûÇ to this last-level page
table page, and then performs CrossLine V1 to extract the value of
the PTE entry corresponding to the current RIP. Let us assume the
offset of this PTE entry is ùëõ and extracted value is gPAùë†. In the third
step, the adversary directly modifies the ciphertext of this last-level
page table and perform CrossLine V1 again. If the change includes
offset ùëõ, CrossLine will likely encounter a triple fault as the target
block does not conform to the PTE format after decryption, or in
some cases extract a value that is different from gPAùë†. Otherwise,
CrossLine will extract the same value gPAùë†. Using this primitive,
the adversary can perform either a binary search or a simple linear
search on the targeted page table page, eventually revealing the
value of the offset ùëõ. In our experiments with over 200 trials, it takes
19.28ms on average to determine the offset of a RIP. Note that to
avoid crashing the victim processes, the adversary should change
the ciphertext of the page table page back to the original value.
To diversify the exploited RIPs, one strategy is to pause the victim
when the VMEXIT is a NPF-triggered AE. When VMEXITs are NAEs
or interrupt-triggered AEs, the next instruction to be executed after
VMRUN is an instruction of the #VC handler, whose virtual address
is fixed in the kernel address space. To differentiate NPF-triggered
AEs and interrupt-triggered AEs, although the adversary cannot
read the RFLAG.IF directly, which indicates pending interrupts,
she can inspect Bit 8 (V_IRQ) of the Virtual Interrupt Control field
(offset 60h) in the unencrypted VMCB control area. Moreover, as
two consecutive NPF-triggered AEs may be caused by the same RIP,
it is preferred to pause the victim VM after a few AEs. To trigger
more NPF VMEXITs, one could periodically unset the Present bit
of all PTEs of the victim VM.
With these strategies in place, we empirically evaluated the time
needed for the adversary to find all 512 offsets. In our test, we
let the victim VM run a build-in program of Ubuntu Linux, called
‚Äúcryptsetup benchmark". The attack can be performed on any level
gCR3UnknownRIPTriplefaultgPAsnSession 11A: Attestation and Firmware Security CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea2946of the page tables; bits 47-39, 38-30, 29-21, and 20-12 of the same
RIP can all be used as the page offset by the attacker. Therefore,
with any RIP, there are 1‚àº4 different offsets that the attacker may
use to extract data on any encrypted page. The experiments were
performed in the following manner: Each round of the experiments,
the cryptsetup benchmark were run several times and each time
with a different address space layout due to ASLR; every 30 seconds,
the adversary unset all Present bits of the victim VM to trigger
NPFs; the adversary pauses the victim VM every 13 AE VMEXITs
to extract one RIP. The adversary concludes the round of monitoring
after 60 seconds. In total, 15 rounds of experiments were conducted.
Figure 4b shows the number of offsets that can be covered after N
rounds of experiments, where N=1 to 6. Each data point is calculated
over all combinations of selecting N rounds from the 15 rounds, i.e.,
C(15, N), of data collected in the experiments above. Specifically, on
average, after 5 rounds of experiments, the adversary could obtain
493 offsets; after 6 rounds, she could obtain 511 offsets (out of the
512 offsets). These experiments show that when the victims run an
application that has diverse RIPs (i.e., not running in idle loops),
the adversary has a good chance of performing CrossLine V1 on
almost all page offsets after some efforts (in these experiments, after
6 minutes of the victim‚Äôs execution).
5.2.3 Performance Evaluation We have evaluated the attack
mentioned above on a workstation with an 8-Core AMD EPYC 7251
Processor. The motherboard of our testbed machine was GIGABYTE
MZ31-AR0, with which we successfully configured Fn8000_001F[EDX]
to return 5, which means ASID 1 to 4 were reserved for SEV-ES
VMs. Since the source code supporting SEV-ES for both host OS and
guest OS has not been added into the mainstream Linux kernel yet,
we used the source code provided in the SEV-ES branch of AMD‚Äôs
official repositories for SEV, which is available on Github [5]. The
kernel version for the host and guest were branch sev-es-5.1-v9. The
QEMU version used was QEMU sev-es-v4 and the OVMF version
was sev-es-v11. Both victim VMs and attacker VMs were configured
as SEV-ES-enabled VMs with 1 virtual CPU, 2 GB DRAM and 30 GB
disk storage. All VMs were created by the kernel image generated
from sev-es-5.1-v9 branch without any additional modification.
On average over 200 trials, it takes 2.0ms to decrypt one 8-byte
memory block, which is slower than the attack against SEV VMs
(0.077ms per block). This is because the AMD-SP must calculate
the hash of the VMSA and store it to the secure memory region
during VMEXITs, and validate its integrity after each VMRUN. This
happens in between of decrypting two memory blocks.
5.3 Discussion on Stealthiness
To attack SEV-ES VMs, the attacker VM must reuse the victim VM‚Äôs
VMSA. However, CrossLine V1 is still stealthy and undetectable
by the victim VM for three reasons. First, the attack only alters the
CR2 field of the victim‚Äôs VMSA. As this field is not examined by
the guest OS after resumption from a NPF, the victim VM cannot
detect the anomaly. Second, even if the guest OS is modified to
monitor CR2, the change of CR2 cannot be detected, because the
AE NPFs are directly trapped into the hypervisor, such that the
guest OS does not have a chance to record the original value of CR2
to be compared with. Third, the attacker can perform the following
steps to confuse the detector: Every time an CrossLine attack is
performed, the attacker could ‚Äúclean up‚Äù the trace by forcing a NPF
on the victim‚Äôs next instruction. In this way, even if the victim can
observe CR2 changes, CR2 is filled with a ‚Äúnormal‚Äù page faults. The
victim will not observe unexpected ‚Äúabnormal‚Äù CR2 values.
5.4 CrossLine V2 on SEV-ES
Applying CrossLine V2 on SEV-ES would be challenging, because
with the encrypted VMSA, RIP is no longer controlled by the ad-
versary. As such, the attacker VM will resume from the RIP stored
in the VMSA, which prevents the attacker VM from executing ar-
bitrary instructions. Moreover, constructing useful encryption or
decryption oracles requires the manipulation of specific register
values, which is only possible without SEV-ES.
6 DISCUSSION
6.1 Applicability to SEV-SNP
To address the attacks against SEV that exploit memory integrity
flaws, AMD recently announced SEV-SNP [13] and released a whitepa-
per describing its high-level functionality in January, 2020 [3]. The
key idea of SEV-SNP is to provide memory integrity protection
using a Reverse Map Table (RMP). An RMP is a table indexed by
system page frame numbers. One RMP is maintained for the entire
system. Each system page frame has one entry in the RMP, which
stores information of the page state (e.g., hypervisor, guest-invalid,
guest-valid) and ownership (i.e., the VM‚Äôs ASID and the correspond-
ing gPA) of the physical page. The ownership of a physical page
is established through a new instruction, PVALIDATE, which can
only be executed by the guest VM. Therefore, the guest VM can
guarantee that each guest physical page is only mapped to one
system physical page; by construction, RMP allows each system
physical page to have only one validated owner.
After each nested page table walks that leads to a system physical
page belonging to an SEV-SNP VM (and also some other cases), an
RMP check is to be performed. The RMP check compares the owner
of the page (i.e., the ASID) with the current ASID and compares
the recorded gPA in the RMP entry with the gPA of the current
nPT walk. If a mismatch is detected, a nested page fault will be
triggered.
‚Ä¢ CrossLine V1 on SEV-SNP. When applying CrossLine V1 on
SEV-SNP by following the same attack steps for SEV-ES, it seems
step ‚ûÄ to ‚ûÉ would work the same. As the VMSA is also protected
by the RMP, loading VMSA would lead to an RMP check. However,
as the attacker VM uses the victim‚Äôs ASID, the check would pass.
However, the NPF in step ‚ûÑ that reveals the page content would
not occur. Instead, an NPF due to RMP check would take place,
because the gPA used in nPT walk is different from the one stored
in the RMP entry. Therefore, from the description of the RMP, it
seems CrossLine V1 can be prevented.
‚Ä¢ CrossLine V2 on SEV-SNP. As CrossLine V2 does not work
on SEV-ES, it cannot be applied on SEV-SNP.
6.2 Real-world Impact
CrossLine can be more damaging to the SEV-based cloud industry
than other known attacks. For instance, Google Cloud recently
provides SEV-enabled VMs, called Confidential VMs, as its first
Session 11A: Attestation and Firmware Security CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea2947product of Confidential Computing [9]. CrossLine attacks are the
only attacks that are undetectable by the victim VM. Therefore, it is
possible for a malicious insider to peak into the encrypted memory
without being noticed by Google or the cloud user.
6.3 Relation to Speculative Execution Attacks
CrossLine is not a speculative execution attack. Meltdown [18],
Spectre [15], L1TF [25], and MDS [7, 22, 26] are prominent specula-
tive execution attacks that exploit transiently executed instructions
to extract secret memory data through side channels. In these at-
tacks, instructions are speculatively executed while the processor
awaits resolution of branch targets, detection of exceptions, disam-
biguation of load/store addresses, etc.. However, in the settings of
CrossLine V1, no instructions are executed, as the exceptions take
place as soon as the frontend starts to fetch instructions from the
memory. CrossLine V2 executes instructions with architecture-
visible effects.
CrossLine does not rely on micro-architectural side channels,
either. Speculative execution attacks leverage micro-architectural
side channels (e.g., cache side channels) to leak secret information
to the program controlled by the attacker. In contrast, CrossLine
reveals data from the victim VM as page frame numbers, which can
be learned by the hypervisor directly during page fault handling.
6.4 Yet Another CrossLine Variant: Reusing
Victim‚Äôs TLB Entries
We next present another variant of CrossLine, which allows the
attacker VM to reuse the TLB entries of the victim VM for ad-
dress translation and execute some instructions, even without any
successful page table walks.
d83
mov
mov
cpuid
jmp
$0x7e4 ,% r11d
$0x7e4 ,% r12d
Two VMs are involved in a proof-of-concept attack: the victim
VM is an SEV VM whose ASID is 1; the attacker VM is a non-SEV
VM whose ASID is 16. Both VMs only have one VCPU, which are
configured by the hypervisor to run on the same logical CPU core.
We assume the victim VM executes the following instructions:
d83 : 4 1 bb e4 07 00 00
d89 : 4 1 bc e4 07 00 00
d8f : 0 f a2
d91 : eb f 0
Specifically, the code updates the values of %r11d and %r12d,
and then executes a CPUID to trigger a VMEXIT. Following the
common steps of CrossLine, the adversary launches an attacker
VM, changes its ASID during VMEXIT, sets the nRIP of the attacker
VM to the virtual address of the code snippet above, changes offset
090h of VMCB to make it an SEV VM, and resumes the attacker
VM. Unlike CrossLine V1 and CrossLine V2, the nPT of the at-
tacker VM is not changed in this step. Therefore, if the attacker VM
performs a page table walk, a NPF will be triggered.
Interestingly, the execution of the attacker VM triggers CPUID
VMEXITs before a triple fault VMEXIT crashes it. Since no NPF is
observed, the attacker VM apparently does not perform any page
table walk. However, during the attacker VM‚Äôs CPUID VMEXITs, we
observe that the values of %r11d and %r12d have been successfully
changed to $0x7e4. It is clear that the two MOV instructions and the
subsequent CPUID instruction have been executed by the attacker
VM. This is because the attacker VM was able to reuse the victim
VM‚Äôs TLB entries to translate the virtual address of the instructions.
While the consequences of this attack are close to V2, it high-
lights the following flaws in AMD‚Äôs TLB isolation between guest
VMs: (1) ASIDs serve as the only identifier for access controls to
TLBs, which can be forged by the hypervisor, and (2) TLBs cleans-
ing during VM context switch is performed at the discretion of the
hypervisor, which may be skipped intentionally. Nevertheless, it is
fair to note constructing a practical end-to-end attack using this
attack variant is still difficult to accomplish.
7 RELATED WORK
Past work mainly studied the insecurity of AMD SEV from the
following aspects.
Unencrypted VMCB. Before SEV-ES, VMCB is not encrypted
during VMEXIT. Hetzelt and Buhren [10] first reported that an
adversary who controls the hypervisor could directly observe the
machine states of the guest VM by reading the VMCB structure.
Moreover, they show that the adversary could also manipulate
the register values in the VMCB before resuming the guest VM to
perform return-oriented programming (ROP) attacks [23] against
the guest VM. As a result, the adversary is able to read or write
arbitrary memory in the SEV VM. These security issues have been
completely mitigated by SEV-ES [12]. Werner et al. also explored
security vulnerabilities caused by unencrypted VMCB [27]. Their
study suggests that an adversary is able to identify applications
running inside the SEV VMs by recording register values in VMCB.
The study also shows that it is practical to inject data by locating
certain system calls and modify some registers to mislead the guest
VM. However, SEV-ES restricts most of their attacks and the only
working attack that remains is application fingerprinting.
Unauthenticated encryption. The lack of authentication in the
memory encryption is one major drawback of the SME design,
which has been demonstrated in fault injection attacks [6]. SEV
inherits this security issue. Therefore, a malicious hypervisor may
alter the ciphertext of the encrypted memory without triggering
faults in the guest VM. Another problem with SME‚Äôs memory en-
cryption design is that SME uses Electronic Codebook (ECB) mode
of operation with an additonal tweak function in its AES-based
memory encryption. This design choice unfortunately has enabled
chosen plaintext attacks. Du et al. [8] reverse-engineered the tweak
function and recovered the mapping between the system physical