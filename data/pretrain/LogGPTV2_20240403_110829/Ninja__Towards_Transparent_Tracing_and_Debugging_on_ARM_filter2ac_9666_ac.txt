isters are set
to 0x20 to enable the counter 6 and
the overﬂow interrupt of the counter 6. Next, we set
PMEVTYPER5 EL0 register to 0x80000021 to make the
counter 6 count the BR RETIRED event in non-secure
EL0. Finally, the counter PMEVCNTR5 EL0 is set to its
maximum value 0xFFFFFFFF. With this conﬁguration,
a secure PMI is routed to EL3 after the execution of
the next branch instruction. In the interrupt handler, the
ELR EL3 register, which is identical to the PC of the nor-
mal domain, is examined to identify whether the execu-
tion of normal domain encounters ExecuteGotoImpl or
ExecuteSwitchImpl function.
If true, we ﬁll the se-
mantic gap and fetch the information about the current
executing Java method. By the declaring class of the
method, we differentiate the Android APIs from the de-
veloper deﬁned methods. Before returning to the normal
domain, we reset the performance counter to its maxi-
mum value to make sure the next execution of a branch
instruction leads to an overﬂow.
5.4 The Debug Subsystem
Debugging is another essential approach to learn the be-
havior of an application. NINJA leverages a secure serial
port to connect the board to an external debugging client.
There exists two serial port (i.e., UART0 and UART1) in
Juno board, and the ATF uses UART0 as the debugging
input/output of both normal domain and secure domain.
To build a secure debugging bridge, NINJA uses UART1
as the debugging channel and marks it as a secure de-
vice by conﬁguring NIC-400 [3]. Alternatively, we can
use a USB cable for this purpose.
In the DS, an ana-
lyst pauses the execution of the target application by the
secure NMI or predeﬁned breakpoints and send debug-
ging commands to the board via the secure serial port.
NINJA processes the commands and outputs the response
to the serial port with a user-friendly format. The table in
Appendix A shows the supported debugging commands.
The information about symbols in both bytecode and ma-
chine code are not supported at this moment, and we con-
sider it as our future work.
Figure 4: ETM in Juno Board.
ETM and then set the StopOnFl bit and the FlushMan
bits of FFCR register in the TMC registers to stop the
ETF. To read the trace result, we keep reading from RRD
register until 0xFFFFFFFF is fetched. Note that the trace
result is an encoded trace stream, and we use an open
source analyzer ptm2human [26] to convert the stream to
a readable format.
5.3.2 System Call Tracing
The system call of Linux in ARM platforms is achieved
by supervisor call instruction svc, and an immediate
value following the svc instruction indicates the corre-
sponding system call number. Since the ETM can be
conﬁgured to trace the PMU event EXC SVC, which oc-
curs right after the execution of a svc instruction, we
trace the system calls via tracing this event in ETM.
As mentioned in Section 4.2, we can conﬁgure the
ETM to trace PMU events during the instruction trace.
The TRCEXTINSELR register is used to trace at most four
external input source, and we conﬁgure one of them
to trace the EXC SVC event.
In Cortex-A57, the event
number of the EXC SVC event is 0x60, so we set the
SEL0 bits of the TRCEXTINSELR register to be 0x60.
Also, the SELECT bits of the second trace resource se-
lection control register TRCRSCTLR2 (TRCRSCTLR0 and
TRCRSCTLR1 are reserved) is conﬁgured to 0 to select
the external input 0 as tracing resource 2. Next, we con-
ﬁgure the EVENT0 bit of TRCEVENTCTL0R register to 2 to
select the resource 2 as event 0. Finally, the INSTEN bit
of TRCEVENTCTL1R register is set to 0x1 to enable event
0. Note that the X bit of PMU register PMCR EL0 should
also be set to export the events to ETM. After the conﬁg-
uration, the ETM can be used to trace system calls, and
the conﬁguration to start and stop the trace is similar to
the one in Section 5.3.1.
5.3.3 Android API Tracing
Unlike the instruction trace and system call trace, we
cannot use ETM to directly trace the Android APIs
as the existence of the semantic gap. As mentioned
in Section 5.1.2, each Java method is interpreter by
ExecuteGotoImpl or ExecuteSwitchImpl function,
USENIX Association
26th USENIX Security Symposium    39
Core 1ETMCortex-A57 clusterFunnel 2Input 0Input 1ETF 0Cortex-A53 clusterInput 0Input 1Input 2Input 3Funnel 1Core 0ETMCore 1ETMCore 2ETMCore 3ETMInput 0Input 1Funnel 0Core 0ETM5.4.1 Single-instruction Stepping
The ARMv8 architecture provides instruction stepping
support for the debuggers by the SS bit of MDSCR EL1
register. Once this bit is set, the CPU generates a soft-
ware step exception after each instruction is executed,
and the highest EL that this exception can be routed is
EL2. However, this approach has two fundamental draw-
backs: 1) the EL2 is normally prepared for the hard-
ware virtualization systems, which does not satisfy our
transparency requirements. 2) The instruction stepping
changes the value of PSTATE, which is accessible from
EL1. Thus, we cannot use the software step exception for
the instruction stepping. Another approach is to modify
the target application’s code to generate a SMC excep-
tion after each instruction. Nonetheless, the modiﬁcation
brings the side effect that the self-checking malware may
be aware of it.
The PMU event INST RETIRED is ﬁred after the exe-
cution of each instruction, and we use this event to im-
plement instruction stepping by using similar approach
mentioned in Section 5.3.3. With the conﬁguration,
NINJA pauses the execution of the target after the exe-
cution of each instruction and waits for the debugging
commands.
that
Moreover, NINJA is capable of stepping Java byte-
code. Recall
the functions ExecuteGotoImpl
and ExecuteSwitchImpl interpret the bytecode in Java
methods. In both functions, a branch instruction is used
to switch to the interpretation code of each Java byte-
code. Thus, we use BR RETIRED event to trace the
branch instructions and ﬁrstly ensure the pc of normal
domain is inside the two interpreter functions. Next, we
ﬁll the semantic gap and monitor the value of dex pc. As
the change of dex pc value indicates the change of cur-
rent interpreting bytecode, we pause the system once the
dex pc is changed to achieve Java bytecode stepping.
5.4.2 Breakpoints
In ARMv8 architecture, a breakpoint exception is gen-
erated by either a software breakpoint or a hardware
breakpoint. The execution of brk instruction is consid-
ered as a software breakpoint while the breakpoint con-
trol registers DBGBCR EL1 and breakpoint value registers
DBGBVR EL1 provide support for at most 16 hardware
breakpoints. However, similar to the software step ex-
ception, the breakpoint exception generated in the nor-
mal domain could not be routed to EL3, which breaks the
transparency requirement of NINJA. MalT [54] discusses
another breakpoint implementation that modiﬁes the tar-
get’s code to trigger an interrupt. Due to the transparency
requirement, we avoid this approach to keep our system
transparent against the self-checking malware. Thus, we
implement the breakpoint based on the instruction step-
ping technique discussed above. Once the analyst adds
a breakpoint, NINJA stores its address and enable PMU
to trace the execution of instructions. If the address of
an executing instruction matches the breakpoint, NINJA
pauses the execution and waits for debugging commands.
Otherwise, we return to the normal domain and do not
interrupt the execution of the target.
5.4.3 Memory Read/Write
NINJA supports memory access with both physical and
virtual addresses. The TrustZone technology ensures
that EL3 code can access the physical memory of the
normal domain, so it is straight forward for NINJA to
access memory via physical addresses. Regarding to
memory accesses via virtual addresses, we have to ﬁnd
the corresponding physical addresses for the virtual ad-
dresses in the normal domain. Instead of manually walk
through the page tables, a series of Address Translation
(AT) instructions help to translate a 64-bit virtual address
to a 48-bit physical address2 considering the translation
stages, ELs and memory attributes. As an example, the
at s12e0r addr instruction performs stage 1 and 2 (if
available) translations as deﬁned for EL0 to the 64-bit
address addr, with permissions as if reading from addr.
The [47:12] bits of the corresponding physical address
are storing in the PA bits of the PAR EL1 register, and
the [11:0] bits of the physical address are identical to the
[11:0] bits of the virtual address addr. After the transla-
tion, NINJA directly manipulates the memory in normal
domain according to the debugging commands.
Interrupt Instruction Skid
5.5
In ARMv8 manual, the interrupts are referred as asyn-
chronous exceptions. Once an interrupt source is trig-
gered, the CPU continues executing the instructions in-
stead of waiting for the interrupt. Figure 5 shows the
interrupt process in Juno board. Assume that an inter-
rupt source is triggered before the MOV instruction is ex-
ecuted. The processor then sends the interrupt request
to the GIC and continues executing the MOV instruction.
The GIC processes the requested interrupt according to
the conﬁguration, and signals the interrupt back to the
processor. Note that it takes GIC some time to ﬁnish the
process, so some instructions following the MOV instruc-
tion have been executed when the interrupt arrives the
processor. As shown in Figure 5, the current executing
instruction is the ADD instruction instead of the MOV in-
struction when the interrupt arrives, and the instruction
shadow region between the MOV and ADD instructions is
considered as interrupt instruction skid.
2The ARMv8 architecture does not support more bits in the physical
address at this moment
40    26th USENIX Security Symposium
USENIX Association
Figure 5: Interrupt Instruction Skid.
Figure 6: Protect the PMCR EL0 Register via Traps.
The skid problem is a well-known problem [42, 49]
and affects NINJA since the current executing instruction
is not the one that triggers the PMI when the PMI ar-
rives the processor. Thus, the DS may not exactly step
the execution of the processor. Although the skid prob-
lem cannot be completely eliminated, the side-effect of
the skid does not affect our system signiﬁcantly, and we
provide a detailed analysis and evaluation in Section 7.5.
6 Transparency
As NINJA is not based on the emulator or other sand-
boxes, the anti-analysis techniques mentioned in [29, 36,
48] cannot detect the existence of NINJA. Moreover,
other anti-debugging techniques like anti-ptrace [53] do
not work for NINJA since our analysis does not use
ptrace. Nonetheless, NINJA leaves artifacts such as
changes of the registers and the slow down of the system,
which may be detected by the target application. Next,
we discuss the mitigation of these artifacts.
6.1 Footprints Elimination
Since NINJA works in the secure domain, the hardware
prevents the target application from detecting the code
or memory usage of NINJA. Moreover, as the ATF re-
stores all the general purpose registers while entering the
secure domain and resumes them back while returning
to the normal domain, NINJA does not affect the reg-
isters used by the target application as well. However,
as we use ETM and PMU to achieve the debugging and
tracing functions, the modiﬁcation to the PMU registers
and the ETM registers leaves a detectable footprint. In
ARMv8, the PMU and ETM registers are accessible via
both system-instruction and memory-mapped interfaces.
6.1.1 System-Instruction Interface
The system-instruction interface makes the system regis-
ters readable via MRS instruction and writable via MSR in-
struction. In NINJA, we ensure that the access to the tar-
get system registers via these instructions to be trapped
to EL3. The TPM bit of the MDCR EL3 register and the
TTA bit of the CPTR EL3 register help to trap the access
to PMU and ETM registers to EL3, respectively; then we
achieve the transparency by providing artiﬁcial values to
the normal domain. Figure 6 is an example of manipu-
lating the reading to the PMCR EL0 register and returning
the default value of the register. Before the MRS instruc-
tion is executed, a trap is triggered to switch to the secure
domain. NINJA then analyzes the instruction that triggers
the trap and learns that the return value of PMCR EL0 is
stored to the general-purpose register X0. Thus, we put
the default value 0x41013000 to the general-purpose reg-
ister X0 and resume to the normal domain. Note that the
PC register of the normal domain should also be modiﬁed
to skip the MRS instruction. We protect both the registers
that we modiﬁed (e.g., PMCR EL0, PMCNTENSET EL0)
and the registers modiﬁed by the hardware as a result
of our usage (e.g., PMINTENCLR EL1, PMOVSCLR EL0).
6.1.2 Memory Mapped Interface
Each of the PMU or ETM related components occupies
a distinct physical memory region, and the registers of
the component can be accessed via offsets in the region.
Since these memory regions do not locate in the DRAM
(i.e., main memory), the TrustZone Address Space Con-
troller (TZASC) [12], which partitions the DRAM into
secure regions and non-secure regions, cannot protect
them directly. Note that this hardware memory region
is not initialized by the system ﬁrmware by default and
the system software such as applications and OSes can-
not access it because the memory region is not mapped
into the virtual memory. However, advanced malware
might remap this physical memory region via functions
like mmap and ioremap. Thus, to further defend against
these attacks, we intercept the suspicious calls to these
functions and redirect the call to return an artiﬁcial mem-
ory region.
The memory size for both the PMU and ETM mem-
ory regions is 64k, and we reserve a 128k memory re-
gion on the DRAM to be the artiﬁcial PMU and ETM
memory. The ATF for Juno board uses the DRAM re-
gion 0x880000000 to 0x9ffffffff as the memory of the
rich OS and the region 0xa00000000 to 0x1000000000
of the DRAM is not actually initialized. Thus, we
randomly choose the memory region 0xa00040000 to
0xa00060000 to be the region for artiﬁcial memory
mapped registers. While the system is booting, we ﬁrstly
duplicate the values in the PMU and ETM memory re-
gions into the artiﬁcial regions. As the function calls are
achieved by bl instruction, we intercept the call to the
interested functions by using PMU to trigger a PMI on
USENIX Association
26th USENIX Security Symposium    41
...MOV X1, X0.........ADD X1, X0, #1GICinterrupt triggeredsend interruptrequestsignal interruptinstruction skidMRS X0, PMCR_EL0MOV X1, #31AND X0, X1, X1 LSR #10......MOV X0, #0x41013000exception returntrapNormal DomainSecure domainthe execution of branch instructions and compare the pc
of the normal domain with the address of these functions.
Next, we manipulate the call to these functions by mod-
iﬁcation to the parameters. Take ioremap function as
an example. The ﬁrst parameter of the function, which
is stored in the register X0, indicates the target physical
address, and we modify the value stored at the register
to the corresponding address in the artiﬁcial memory re-
gion. With this approach, the application never reads
the real value of PMU and ETM registers, and cannot
be aware of NINJA.