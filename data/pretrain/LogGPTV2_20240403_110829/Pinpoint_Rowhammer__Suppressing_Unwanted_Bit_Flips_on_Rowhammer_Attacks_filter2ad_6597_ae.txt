the target flip rate and unwanted flip rate increase. The trade-off
between the high target flip rate and low unwanted flip rate can be
leveraged.
Attacking a Row Containing Multiple Bit Flips. We conduct
the same experiments on the rows of the second group. Each row
in the group contains multiple bit flips. We conduct 77,815 attack
instances on the rows (Table 3). As each row has multiple bit flips,
it is necessary to suppress the other known bit flips while flipping
the target bit.
Figure 13 shows the results of the 77,815 attack instances. In Fig-
ure 13a, 85.0% of the baseline attacks yield unwanted bit flips (case
2 and 3). The result implies that the baseline method is not suitable
for the attack on a row that contains multiple bit flips. In contrast
to the baseline method, only 10.1% of the Pinpoint Rowhammer
attacks yield unwanted bit flips. This rate is comparable to that
obtained from the attacks conducted on the rows of the first group
(Figure 12a). Therefore, Pinpoint Rowhammer is a suitable method
for the attack on a row that contains multiple flips. Moreover, 15.3%
of the worst case Pinpoint Rowhammer attacks yield unwanted
bit flips. On average, Pinpoint Rowhammer increases the attack
success rate (case 1) from 10.2% to 59.4%, when compared with the
baseline. The worst case Pinpoint Rowhammer also increases the
rate (case 1) to 55.3%.
We also evaluate the repeated Rowhammer attempts on these
rows (Figure 13b). The no flip rate (case 4) of Pinpoint Rowhammer
is reduced from 30.5% to 17.5%, on average, when compared with
the single-attempt-strategy, as presented in Figure 13a. The target
flip rate (case 1) of Pinpoint Rowhammer increases from 59.4%
to 69.3%. At the same time, the target and unwanted flip rate (case
020406080Case distribution [%]target flip      target + unwanted flip     unwanted flip     no flip(case 1) (case 2) (case 3) (case 4)      100BaselinePinpoint RowhammerPinpoint Rowhammer (worst case)A 2  A3 B   1  B  3 A2 A3 B    1 B  3 A     2 A    3 B  1 B 3020406080Case distribution [%]target flip      target + unwanted flip     unwanted flip     no flipBaselinePinpoint RowhammerPinpoint Rowhammer (worst case)A2 A3 B   1 B  3 A2 A3 B    1 B  3 A     2 A    3 B   1 B 3(case 1) (case 2) (case 3) (case 4) 100020406080Case distribution [%]target flip target + unwanted flip     unwanted flip no flip(case 1) (case 2) (case 3) (case 4)      100BaselinePinpoint RowhammerPinpoint Rowhammer (worst case)A2 A       3 B  1 B 3 A2 A3 B     1 B  3 A     2 A    3 B  1 B 3020406080Case distribution [%]target flip target + unwanted flip     unwanted flip no flipBaselinePinpoint RowhammerPinpoint Rowhammer (worst case)A 2 A      3 B  1 B 3 A2 A3 B    1 B  3 A      2 A    3 B  1 B 3(case 1) (case 2) (case 3) (case 4) 100Session 7: Hardware and SystemsAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand5582) increases from 6.8% to 8.7%, and the unwanted flip rate (case 3)
increases from 3.3% to 4.5%. The discrepancy between attack success
rates (case 1) of the baseline method and Pinpoint Rowhammer is
larger in the second group results (Figure 13) than in the first group
results (Figure 12). Hence, Pinpoint Rowhammer is especially
needed to attack a row that contains multiple bit flips.
Case Study on Unwanted Bit Flips. Pinpoint Rowhammer
cannot completely eliminate unwanted bit flips; thus, we analyze
the unwanted bit flips caused by Pinpoint Rowhammer. During the
experiments of the 107,965 attack instances, Pinpoint Rowhammer
induces a total of 12,681 unwanted bit flips. Among them, 10,841
(85.5%) unwanted bit flips are not detected in the scan phase. Hence,
their alternating patterns contain effective patterns and cause bit
flips. On the other hand, Pinpoint Rowhammer fails to suppress
1,840 (14.5%) unwanted bit flips that are detected during the scan
phase.
We detect a total of 558,242 vulnerable cells during the scan
phase, and Pinpoint Rowhammer attempts to suppress them. Con-
sequently, Pinpoint Rowhammer suppresses 556,402 (99.7%) of
them. According to the results, a small number of unwanted bit
flips is inevitable. However, by conducting the scan phase for a long
period of time, the number of unwanted bit flips can be reduced by
eliminating the use of misclassified effective patterns.
7 DISCUSSION
Deployability of Pinpoint Rowhammer. Pinpoint Rowham-
mer is easily deployable to the existing Rowhammer attacks be-
cause the proposed method requires two simple conditions: the
scanning of additional patterns and the write permission to the
aggressor rows. First, the additional scanning with the eight pat-
terns (Figure 5) is required after the detection of an exploitable bit.
The additional scan requires a small modification of the code and
incurs negligible time overhead. Second, the write permission to the
aggressor rows is required, and most attack methods already have
the write permission to the rows. Overall, Pinpoint Rowhammer
can be deployed to the existing attacks that satisfy both condi-
tions [3, 7, 8, 19, 20, 25, 27]. Moreover, the method is deployable to
a future Rowhammer attack if the two conditions are preserved.
Although the double-sided Pinpoint Rowhammer is demon-
strated in this study, Pinpoint Rowhammer is also deployable to
single-sided Rowhammer and one-location Rowhammer [7, 13] by
changing the data of the one aggressor row. We conduct a proof-
of-concept experiment of single-sided Pinpoint Rowhammer, and
the method yield a 100% suppression rate for the attacks on 215
vulnerable rows.
Limitations of Pinpoint Rowhammer. Pinpoint Rowham-
mer has two limitations. First, the proposed method cannot com-
pletely eliminate unwanted bit flips. Several execution of the scan
phase may not be sufficient to detect all the effective patterns (Fig-
ure 3); thus, the presence of undetected vulnerable cells is inevitable.
Hence, effective patterns are included in the alternating pattern,
and they degrade the ability of Pinpoint Rowhammer. However,
during the 107,965 worst case attacks, Pinpoint Rowhammer sup-
presses the 554,277 (99.3%) vulnerable cells without knowing the
ineffective patterns for the cells. Moreover, it outperforms the tradi-
tional double-sided Rowhammer. Second, Pinpoint Rowhammer
should allocate all the memory units of aggressor rows. When any
unit of aggressor row is not allocated by Pinpoint Rowhammer,
the method cannot overwrite the data of the unallocated regions.
Therefore, the suppression of bit flips in this regions is not guar-
anteed. This limitation can be partially solved using a transpar-
ent huge page [19, 20, 25] or by revealing an address mapping of
DRAM [18, 22, 27].
Countermeasures. In previous work, methods to defeat Rowham-
mer are discussed, which can be categorized into two groups. The
first group of defenses requires a hardware modification to pre-
vent bit flips. Target row refresh (TRR) [11] and pseudo target row
refresh (pTRR) schemes refresh adjacent rows when a row is ac-
cessed more than a threshold. Probabilistic adjacent row activation
(PARA) [12, 13] activates an adjacent row with a low probability
when a row is accessed. Counter-based methods detect aggressor
rows based on the value of the hardware counters and refresh adja-
cent rows [12, 15, 21]. Equipping error-correcting code (ECC) can
be considered as a hardware-based countermeasure. However, it
is reported that normal Rowhammer attack is reproducible in the
ECC memory [5, 26]. These defenses require DRAM modification
or the supports of a memory controller; thus, existing vulnerable
DRAM modules are typically not well protected.
The second group of defenses develop software to defeat the
Rowhammer attacks. Several methods use hardware performance
counters to detect Rowhammer attacks in real time [1, 9, 17]. How-
ever, the methods cause huge overhead, and their thresholds are
typically inaccurate because each module has its own characteris-
tics. A method, namely, B-CATT, eliminates vulnerable pages from
an allocation pool [4], but the method cannot be used in several
modules [7]. Another method, namely, G-CATT, isolates kernel
space [4] from user space; however, the isolation consumes large
amount of memory depending on the hardware configuration [22].
8 CONCLUSIONS
Existing Rowhammer attacks are subject to unwanted bit flips. In
this paper, we propose Pinpoint Rowhammer that flips the target
bit without inducing unwanted bit flips. The proposed method
is based on the alternating pattern that dynamically changes the
data of aggressor rows during the attack. The alternating pattern
consists of ineffective patterns that prevent vulnerable cells from
being flipped. Pinpoint Rowhammer uses an effective pattern for
the target bit and the alternating pattern for the other bits. Through
experiments, we demonstrate that Pinpoint Rowhammer is very
effective in flipping only the target cell.
Pinpoint Rowhammer is applicable to rows that contain mul-
tiple vulnerable cells, given that it is the first work to selectively
induce bit flips. The method allows us to choose a desired bit flip and
flips the bit exclusively. We believe this work can help researchers to
understand the unexplored phenomenon of Rowhammer. Moreover,
we believe that this research will contribute to the development
of trustworthy DRAM chips that are protected from Rowhammer
attacks.
Session 7: Hardware and SystemsAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand559ACKNOWLEDGMENTS
This work was supported by the National Research Foundation of
Korea (NRF) grant funded by the Korea government(MSIP) (No.
2017R1A2B4010914).
REFERENCES
[1] Zelalem Birhanu Aweke, Salessawi Ferede Yitbarek, Rui Qiao, Reetuparna Das,
Matthew Hicks, Yossi Oren, and Todd Austin. 2016. ANVIL: Software-based
protection against next-generation rowhammer attacks. ACM SIGPLAN Notices
51, 4 (2016), 743–755.
[2] Sarani Bhattacharya and Debdeep Mukhopadhyay. 2016. Curious case of rowham-
mer: flipping secret exponent bits using timing analysis. In International Confer-
ence on Cryptographic Hardware and Embedded Systems. Springer, 602–624.
[3] Erik Bosman, Kaveh Razavi, Herbert Bos, and Cristiano Giuffrida. 2016. Dedup
est machina: Memory deduplication as an advanced exploitation vector. In 2016
IEEE symposium on security and privacy (SP). IEEE, 987–1004.
[4] Ferdinand Brasser, Lucas Davi, David Gens, Christopher Liebchen, and Ahmad-
Reza Sadeghi. 2017. Cant touch this: Software-only mitigation against rowham-
mer attacks targeting kernel memory. In USENIX Security Symposium. 117–130.
[5] Lucian Cojocar, Kaveh Razavi, Cristiano Giuffrida, and Herbert Bos. 2019. Exploit-
ing Correcting Codes: On the Effectiveness of ECC Memory Against Rowhammer
Attacks. In S&P. https://www.vusec.net/download/?t=papers/eccploit_sp19.pdf
[6] P. Frigo, C. Giuffrida, H. Bos, and K. Razavi. 2018. Grand Pwning Unit: Accel-
erating Microarchitectural Attacks with the GPU. In 2018 IEEE Symposium on
Security and Privacy (SP). 357–372. https://doi.org/10.1109/SP.2018.00022
[7] Daniel Gruss, Moritz Lipp, Michael Schwarz, Daniel Genkin, Jonas Juffinger, Sioli
O’Connell, Wolfgang Schoechl, and Yuval Yarom. 2018. Another flip in the wall
of rowhammer defenses. In 2018 IEEE Symposium on Security and Privacy (SP).
IEEE, 245–261.
[8] Daniel Gruss, Clémentine Maurice, and Stefan Mangard. 2016. Rowhammer. js:
A remote software-induced fault attack in javascript. In International Conference
on Detection of Intrusions and Malware, and Vulnerability Assessment. Springer,
300–321.
[9] N Herath and A Fogh. 2015. These are Not Your Grand Daddys CPU Performance
Counters– CPU Hardware Performance Counters for Security. Black Hat (2015).
[10] Yeongjin Jang, Jaehyuk Lee, Sangho Lee, and Taesoo Kim. 2017. SGX-Bomb:
Locking Down the Processor via Rowhammer Attack. In Proceedings of the 2Nd
Workshop on System Software for Trusted Execution (SysTEX’17). ACM, New York,
NY, USA, Article 5, 6 pages. https://doi.org/10.1145/3152701.3152709
[11] JEDEC. 2018. Low Power Double Date Rate 4. (2018).
[12] Dae-Hyun Kim, Prashant J Nair, and Moinuddin K Qureshi. 2015. Architectural
IEEE Computer
support for mitigating row hammering in DRAM memories.
Architecture Letters 14, 1 (2015), 9–12.
[13] Yoongu Kim, Ross Daly, Jeremie Kim, Chris Fallin, Ji Hye Lee, Donghyuk Lee,
Chris Wilkerson, Konrad Lai, and Onur Mutlu. 2014. Flipping bits in memory
without accessing them: An experimental study of DRAM disturbance errors. In
ACM SIGARCH Computer Architecture News, Vol. 42. IEEE Press, 361–372.
[14] M Lanteigne. 2016. How rowhammer could be used to exploit weaknesses in
computer hardware. (2016).
[27] Yuan Xiao, Xiaokuan Zhang, Yinqian Zhang, and Radu Teodorescu. 2016. One Bit
Flips, One Cloud Flops: Cross-VM Row Hammer Attacks and Privilege Escalation..
In USENIX Security Symposium. 19–35.
[15] Eojin Lee, Sukhan Lee, G Edward Suh, and Jung Ho Ahn. 2018. TWiCe: Time
Window Counter Based Row Refresh to Prevent Row-Hammering. IEEE Computer
Architecture Letters 17, 1 (2018), 96–99.
[16] Jamie Liu, Ben Jaiyen, Yoongu Kim, Chris Wilkerson, and Onur Mutlu. 2013.
An experimental study of data retention behavior in modern DRAM devices:
Implications for retention time profiling mechanisms. In ACM SIGARCH Computer
Architecture News, Vol. 41. ACM, 60–71.
[17] Mathias Payer. 2016. HexPADS: a platform to detect âĂĲstealthâĂİ attacks. In
International Symposium on Engineering Secure Software and Systems. Springer,
138–154.
[18] Peter Pessl, Daniel Gruss, Clémentine Maurice, Michael Schwarz, and Stefan
Mangard. 2016. DRAMA: Exploiting DRAM Addressing for Cross-CPU Attacks..
In USENIX Security Symposium. 565–581.
[19] Kaveh Razavi, Ben Gras, Erik Bosman, Bart Preneel, Cristiano Giuffrida, and
Herbert Bos. 2016. Flip Feng Shui: Hammering a Needle in the Software Stack..
In USENIX Security symposium. 1–18.
[20] Mark Seaborn and Thomas Dullien. 2015. Exploiting the DRAM rowhammer bug
to gain kernel privileges. Black Hat 15 (2015).
[21] Seyed Mohammad Seyedzadeh, Alex K Jones, and Rami Melhem. 2017. Counter-
based tree structure for row hammering mitigation in DRAM. IEEE Computer
Architecture Letters 16, 1 (2017), 18–21.
[22] Andrei Tatar, Cristiano Giuffrida, Herbert Bos, and Kaveh Razavi. 2018. Defeating
software mitigations against rowhammer: a surgical precision hammer. In Inter-
national Symposium on Research in Attacks, Intrusions, and Defenses. Springer,
47–66.
[23] Andrei Tatar, Radhesh Krishnan Konoth, Elias Athanasopoulos, Cristiano Giuf-
frida, Herbert Bos, and Kaveh Razavi. 2018. Throwhammer: Rowhammer At-
tacks over the Network and Defenses. In 2018 USENIX Annual Technical Con-
ference (USENIX ATC 18). USENIX Association, Boston, MA, 213–226. https:
//www.usenix.org/conference/atc18/presentation/tatar
[24] Ad J Van De Goor and Ivo Schanstra. 2002. Address and data scrambling: Causes
and impact on memory tests. In Electronic Design, Test and Applications, 2002.
Proceedings. The First IEEE International Workshop on. IEEE, 128–136.
[25] Victor Van Der Veen, Yanick Fratantonio, Martina Lindorfer, Daniel Gruss, Clé-
mentine Maurice, Giovanni Vigna, Herbert Bos, Kaveh Razavi, and Cristiano
Giuffrida. 2016. Drammer: Deterministic rowhammer attacks on mobile platforms.
In Proceedings of the 2016 ACM SIGSAC conference on computer and communica-
tions security. ACM, 1675–1689.
[26] Wired. 2018.
OUS THAN ANYONE FEARED.
rowhammer-ecc-memory-data-hack/
AN INGENIOUS DATA HACK IS MORE DANGER-
https://www.wired.com/story/
(2018).
Session 7: Hardware and SystemsAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand560