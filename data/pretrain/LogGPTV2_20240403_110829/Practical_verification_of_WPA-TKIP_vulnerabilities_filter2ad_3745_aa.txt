title:Practical verification of WPA-TKIP vulnerabilities
author:Mathy Vanhoef and
Frank Piessens
Practical Veriﬁcation of WPA-TKIP Vulnerabilities
Mathy Vanhoef
iMinds-DistriNet
KU Leuven
PI:EMAIL
Frank Piessens
iMinds-DistriNet
KU Leuven
PI:EMAIL
ABSTRACT
We describe three attacks on the Wi-Fi Protected Access
Temporal Key Integrity Protocol (WPA-TKIP). The ﬁrst
attack is a Denial of Service attack that can be executed by
injecting only two frames every minute. The second attack
demonstrates how fragmentation of 802.11 frames can be
used to inject an arbitrary amount of packets, and we show
that this can be used to perform a portscan on any client.
The third attack enables an attacker to reset the internal
state of the Michael algorithm. We show that this can be
used to eﬃciently decrypt arbitrary packets sent towards
a client. We also report on implementation vulnerabilities
discovered in some wireless devices. Finally we demonstrate
that our attacks can be executed in realistic environments.
Categories and Subject Descriptors
E.3 [Data Encryption]: Code breaking; C.2.0 [Computer-
Communication Networks]: General—Security and pro-
tection; C.2.1 [Computer-Communication Networks]:
Network Architecture and Design—Wireless communication
General Terms
Security, Experimentation, Veriﬁcation
Keywords
802.11; WPA; TKIP; DoS; fragmentation; decryption; driver
vulnerabilities
1.
INTRODUCTION
Modern wireless networks are based on the IEEE 802.11
set of standards. These networks have gained popularity
over the years and are nowadays widely used in diﬀerent sce-
narios, ranging from personal use to high-proﬁle commercial
use. Because of the nature of wireless transmission special
care must be taken to preserve the privacy and security of
wireless networks. The original IEEE 802.11 standard sup-
ported a basic security algorithm called Wired Equivalent
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIA CCS’13, May 8–10, 2013, Hangzhou, China.
Copyright 2013 ACM 978-1-4503-1767-2/13/05 ...$15.00.
Privacy (WEP). Unfortunately WEP suﬀers from major de-
sign ﬂaws and is considered completely broken [8, 19, 4].
An improvement of WEP is the Temporal Key Integrity
Protocol (TKIP). Created as an intermediate protocol to
the more secure CCMP, it was designed to run on exist-
ing WEP hardware [14, §11.4.1]. This aﬀected many of the
design decisions [14, 6]. Most notably it still uses WEP en-
capsulation and relies on a weak Message Integrity Check
(MIC) algorithm called Michael [6]. Because the Michael
algorithm provides inadequate security [20, 13, 22] counter-
measures were added. TKIP and its countermeasures are
explained in detail in Sect. 2.
Surprisingly, TKIP is still supported by a large number of
networks. In Section 6.1 we report on an experiment where
we collected information about wireless network usage in two
Belgian municipalities and found that 71% of encrypted net-
works support TKIP. Furthermore, 19% of networks using
encryption only allow TKIP.
In this paper we present a novel Denial of Service (DoS)
attack on TKIP. Moreover, we take two ideas suggested in
a paper by Beck [1] and signiﬁcantly improve on them. In
contrast with the paper of Beck, our improvements are also
implemented and tested in practice. The ﬁrst idea applies
the known fragmentation attack on WEP [4] to TKIP. This
allows an attacker to send an arbitrary amount of packets
to a client. As a proof of concept we implemented a port
scanner. The second idea is to construct a preﬁx that resets
the internal state of the Michael algorithm. We will show
that this enables us to eﬃciently decrypt arbitrary packets
sent towards a client. We also report on several vulnerabil-
ities found in the implementation of some wireless adapters
and drivers. All attacks are designed against WiFi networks
operating in infrastructure mode, and are tested when au-
thentication is done using a passphrase and when using a
personal username and password.
We hope that the publication of these novel attacks will
motivate people to disable TKIP.
The remainder of this paper is organised as follows. Sec-
tion 2 describes the details of the TKIP protocol. In Sec-
tion 3 we explain the Denial of Service (DoS) attack. Sec-
tion 4 discusses our fragmentation and portscan attack. In
Section 5 the Michael state reset and decryption attack is
explained. Section 6 investigates whether TKIP is still sup-
ported in practice and discusses experimental evaluation of
our attacks. Finally, we summarise related work in Sect. 7
and conclude in Sect. 8.
6
6
1
3
var
Destination
Source Priority Reserved Payload
Figure 2: Input data given to the Michael algorithm.
Destination and source represent MAC addresses. If
the QoS extension is not used, priority is set to zero.
Numbers denote the size of the ﬁeld in bytes, where
var deﬁnes a variable-length ﬁeld.
8
var
8
4
802.11 header TSC Data MIC ICV
←− unencrypted −→ ←− encrypted −→
Figure 3: Simpliﬁed format of an unfragmented
TKIP frame.
Continuously injecting such forged deauthentication pack-
ets causes a DoS attack [18]. This attack is well known and
is called the deauthentication attack. It can be prevented
by enabling protected management frames, a feature intro-
duced in the IEEE 802.11w amendment [14, §4.5.4.9].
2.2 Sender
When sending a TKIP frame ﬁrst the MIC value of the
MAC Service Data Unit (MSDU) is calculated. The purpose
of the MIC is to protect both the integrity and authentic-
ity of the message. Recall that the MSDU is essentially the
complete data packet that needs to be transmitted, which is
fragmented into smaller MAC Protocol Data Units (MPDU)
fragments if it is too big to be sent at once. The MIC is cal-
culated over the MSDU by the Michael algorithm. Michael
is a keyed hash function taking two inputs: the input data
to calculate the MIC of and a secret key. The input data
given to the Michael algorithm is shown in Fig. 2. For cal-
culating the MIC a diﬀerent secret key is used for AP to
client communication than is used for client to AP commu-
nication. Both MIC keys are derived from the PTK. The
calculated MIC value is 8 bytes long. However, the Michael
algorithm is not suﬃciently secure. In particular it is pos-
sible to eﬃciently retrieve the MIC key given the data and
calculated MIC value [20]. The designers realized this and
included countermeasures in an attempt to mitigate poten-
tial attacks. These countermeasures are essential to our at-
tacks and are discussed in detail in Sect. 2.3.
The MSDU concatenated with the MIC is fragmented into
MAC Protocol Data Units (MPDUs) if necessary. At most
16 fragments (MPDUs) are supported. Each MPDU then
undergoes WEP encapsulation. This is done so TKIP can
be implemented on old WEP hardware. WEP encapsula-
tion appends an Integrity Check Value (ICV) to the MPDU,
which is simply a 32 bit CRC computed over the given data.
Then it encrypts the packet using the RC4 stream cipher.
The key used for encryption is called the WEP seed and
is calculated by a mixing function that combines the tem-
poral key (TK), transmitter MAC address, and the TKIP
Sequence Counter (TSC). Figure 3 illustrates the ﬁnal lay-
out of an unfragmented TKIP frame.
Finally the resulting link-layer frame is constructed by
adding the appropriate 802.11 headers. This includes the
TKIP Sequence Counter (TSC), which is a replay counter
that increases every time a MPDU frame is sent successfully.
Figure 1: States a client can be in when connecting
to a wireless network.
2. TEMPORAL KEY INTEGRITY PROTO-
COL (TKIP)
This section describes the relevant parts of the IEEE 802.11
standard with a focus on the TKIP speciﬁcation [14, §11.4.2].
We will also explain one of the ﬁrst attacks on TKIP, called
the Beck and Tews attack.
2.1 Connecting
A client connects to a wireless network by ﬁrst authenti-
cating and then associating with the Access Point. A state
diagram of this process is shown in Fig. 1. There are two
authentication methods. The ﬁrst one is called Shared Key
authentication and was based on WEP. Unfortunately this
method is inherently insecure. Nowadays only the second
method is used, called Open System authentication. As the
name implies it imposes no real authentication.
It is es-
sentially just a formality, and if TKIP or CCMP is used
actual authentication will happen at a later stage. Once au-
thenticated, the client sends an association request to the
AP. This request includes the secure authentication and en-
cryption protocol it wants to use. If the AP supports the
requested protocols the association is successful, and the AP
informs the client that the association has completed.
Once authenticated and associated, a 4-way handshake
is performed when using TKIP. The handshake negotiates
the keys used by TKIP and is deﬁned using IEEE 802.1X
EAPOL-Key frames. This results in a 512-bit pairwise tran-
sient key (PTK) that is shared between the AP and client.
From the PTK a 128-bit temporal encryption key (TK)
is derived, as well as two 64-bit Message Integrity Check
(MIC) keys: one for AP to client communication and one
for client to AP communication. These keys are renewed
after a user deﬁned interval, commonly called the rekeying
timeout. Most APs by default use a timeout of 1 hour. Af-
ter a key has been negotiated, the client and AP can send
encrypted data frames to each other.
The client or AP can end the connection at any time by
sending a disassociation or deauthentication message. The
older versions of the 802.11 standard left these messages
unprotected. This means an attacker can forge them and
forcibly close the connection between an AP and client.
UnauthenticatedUnassociatedAuthenticatedUnassociatedAuthenticatedAssociatedDeauthenticationAuthentication(Re)associationDisassociationDeauthenticationIn Fig. 3 the TSC is given a size of 8 bytes, but in reality
the TSC is only 6 bytes long. The remaining bits of the
ﬁeld are used for other purposes or are reserved. To prevent
replay attacks the receiver drops frames that are not received
in order. That is, the counter must always be increasing
though gaps are allowed.
2.3 Receiver
When receiving a TKIP frame the client or AP ﬁrst checks
if the TSC is in order. If not, the frame is silently dropped.
It then proceeds by checking if the ICV is correct. If not,
the frame is also silently dropped. Once all MPDU’s are re-
ceived they are reassembled into the original MSDU and its
MIC value is veriﬁed. If it is correct the frame is accepted
and the receiver updates its TSC replay counter, otherwise
the TKIP countermeasures kick in. These countermeasures
were added to detect active attacks against the weak Michael
algorithm [14, §11.4.2.4.1]. One class of such active attacks
involves injecting multiple forged packets in the hope at least
one of them has a valid MIC. In case such a packet is found
the attacker learns the MIC key for the particular communi-
cation direction, as the MIC key can be derived when given
the plaintext data and calculated MIC value.
The countermeasures are as follows [14, §11.4.2.4]:
• When a client receives a MSDU with an invalid MIC
value it will send a MIC failure report to the AP.
• An AP receiving an invalid MIC value does not broad-
cast a MIC failure report but only logs the failure.
• If the AP detects two MIC failures within one minute
all TKIP clients connected to the AP will be deauthen-
ticated and the AP will not receive or transmit any
TKIP-encrypted data frames for one minute. Once
this minute is passed clients can reassociate with the
AP and negotiate a new PTK.
2.4 Quality of Service Extension
Quality of Service (QoS) enhancements for wireless traﬃc
were ﬁrst deﬁned in the IEEE 802.11e amendment. Most
modern APs support this amendment [17]. It deﬁnes 8 dif-
ferent channels, each having their own QoS needs. A channel
is deﬁned by its Traﬃc Identiﬁer (TID) and is internally rep-
resented by 4 bits, making some devices actually support 16
diﬀerent channels. For the implementation of our attacks we
assume only 2 QoS channels exist, though devices support-
ing more channels are also susceptible to our attacks. Tests
showed that our assumption holds in practice. Additionally
we note that by default most traﬃc is sent over the ﬁrst QoS
channel.
Essential for us is that each QoS channel has a separate
TSC [14, §11.4.2.6]. This means that we can capture a
packet transmitted on one QoS channel and replay it on
another QoS channel having a lower TSC value. This en-
ables an attacker to pass the TSC check, though he still has
to pass the ICV and MIC checks in order to forge a message.
2.5 Beck and Tews Attack
One of the ﬁrst known attacks on TKIP was discovered
by Beck and Tews [20]. It was a variation of the chopchop
attack on WEP [10] and works by decrypting a packet one
byte at the time. Because this attack is used as the basis
for the fragmentation and Michael reset attack it will be
explained in detail.
First we will explain the chopchop attack when applied to
a TKIP packet. It begins by taking an encrypted packet and
removing the last byte. Let C denote the obtained short-
ened encrypted packet. With high probability the ICV of
C is invalid. However, it can be corrected if one knows the
plaintext value of the removed byte. Correcting the ICV of
the unencrypted shortened message can be represented by
M(cid:48) = M ⊕ D, where M is the unencrypted shortened mes-
sage, D is the correction being applied, ⊕ denotes the XOR
operator, and M(cid:48) is the unencrypted shortened message with
a valid CRC. It has been proven that D only depends on
the plaintext value of the removed byte [10]. Interestingly
we can apply this modiﬁcation directly on C. Letting K de-
note the keystream used to encrypt the packet we get that
C = M ⊕ K. We can now make the following derivation:
(cid:48)
C
= M
(cid:48) ⊕ K = (M ⊕ D) ⊕ K
= (M ⊕ K) ⊕ D
= C ⊕ D
(1)
(2)
(3)
The second equation follows from the associativity of the
XOR operator. We see that C(cid:48) is the encrypted shortened