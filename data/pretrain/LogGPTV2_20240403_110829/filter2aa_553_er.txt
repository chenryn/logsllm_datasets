}
14.a.函数调用应该类似：memcpy(data1, data2, 100 * sizeof(double));
b.函数调用应该类似：memcpy(data1, data2 + 200 , 100 * sizeof(double));
1517
A.17 第17章复习题答案
1.定义一种数据类型包括确定如何储存数据，以及设计管理该数据的一
系列函数。
2.因为每个结构包含下一个结构的地址，但是不包含上一个结构的地
址，所以这个链表只能沿着一个方向遍历。可以修改结构，在结构中包含两
个指针，一个指向上一个结构，一个指向下一个结构。当然，程序也要添加
代码，在每次新增结构时为这些指针赋正确的地址。
3.ADT是抽象数据类型，是对一种类型属性集和可以对该类型进行的操
作的正式定义。ADT应该用一般语言表示，而不是用某种特殊的计算机语
言，而且不应该包含实现细节。
4.直接传递变量的优点：该函数查看一个队列，但是不改变其中的内
容。直接传递队列变量，意味着该函数使用的是原始队列的副本，这保证了
该函数不会更改原始的数据。直接传递变量时，不需要使用地址运算符或指
针。
直接传递变量的缺点：程序必须分配足够的空间储存整个变量，然后拷
贝原始数据的信息。如果变量是一个大型结构，用这种方法将花费大量的时
间和内存空间。
传递变量地址的优点：如果待传递的变量是大型结构，那么传递变量的
地址和访问原始数据会更快，所需的内存空间更少。
传递变量地址的缺点：必须记得使用地址运算符或指针。在K&R C中，
函数可能会不小心改变原
始数据，但是用ANSI C中的const限定符可以解决这个问题。
5.a.
类型名：    栈
1518
类型属性：   可以储存有序项
类型操作：   初始化栈为空
确定栈是否为空
确定栈是否已满
从栈顶添加项（压入项）
从栈顶删除项（弹出项）
b.下面以数组形式实现栈，但是这些信息只影响结构定义和函数定义的
细节，不会影响函数原型的接口。
/* stack.h –– 栈的接口 */
#include 
/* 在这里插入 Item 类型 */
/* 例如： typedef int Item; */
#define MAXSTACK 100
typedef struct stack
{
Item items[MAXSTACK];  /* 储存信息    */
int top;       /* 第1个空位的索引 */
} Stack;
/* 操作：   初始化栈                 */
1519
/* 前提条件：  ps 指向一个栈               */
/* 后置条件：  该栈被初始化为空              */
void InitializeStack(Stack * ps);
/* 操作：   检查栈是否已满              */
/* 前提条件：  ps 指向之前已被初始化的栈          */
/* 后置条件：  如果栈已满，该函数返回true；否则，返回false  
*/
bool FullStack(const Stack * ps);
/* 操作：   检查栈是否为空              */
/* 前提条件：  ps 指向之前已被初始化的栈          */
/* 后置条件：  如果栈为空，该函数返回true；否则，返回false  
*/
bool EmptyStack(const Stack *ps);
/* 操作：   把项压入栈顶               */
/* 前提条件：  ps 指向之前已被初始化的栈          */
/*      item 是待压入栈顶的项            */
/* 后置条件：  如果栈不满，把 item 放在栈顶，该函数返回ture； 
*/
/*      否则，栈不变，该函数返回 false        */
bool Push(Item item, Stack * ps);
1520
/* 操作：   从栈顶删除项               */
/* 前提条件：  ps 指向之前已被初始化的栈          */
/* 后置条件：  如果栈不为空，把栈顶的item拷贝到*pitem，   
*/
/*    删除栈顶的item，该函数返回ture；         */
/*    如果该操作后栈中没有项，则重置该栈为空。      
*/
/*    如果删除操作之前栈为空，栈不变，该函数返回false   
*/
bool Pop(Item *pitem, Stack * ps);
6.比较所需的最大次数如下：
7.见图A.1。
1521
图A.1 单词的二分查找树
8.见图A.2。
1522
图A.2 删除项后的单词二分查找树
[1].这句英文翻译成中文是“这句话是出色的捷克人”。显然不知所云，这就
是语言中的语义错误。——译者注
[2].thrice_n本应表示n的3倍，但是3 + n表示的并不是n的3倍，应该用3*n来表
示。——译者注
1523
附录B 参考资料
本书这部分总结了C语言的基本特性和一些特定主题的详细内容，包括
以下9个部分。
参考资料I：补充阅读
参考资料II：C运算符
参考资料III：基本类型和存储类别
参考资料IV：表达式、语句和程序流
参考资料V：新增了C99和C11的标准ANSI C库
参考资料VI：扩展的整数类型
参考资料VII：扩展的字符支持
参考资料VIII：C99/C11数值计算增强
参考资料IX：C与C++的区别
1524
B.1 参考资料I：补充阅读
如果想了解更多C语言和编程方面的知识，下面提供的资料会对你有所
帮助。
B.1.1 在线资源
C程序员帮助建立了互联网，而互联网可以帮助你学习C。互联网时刻
都在发展、变化，这里所列的资源只是在撰写本书时可用的资源。当然，你
可以在互联网中找到其他资源。
如果有一些与C语言相关的问题或只是想扩展你的知识，可以浏览C
FAQ（常见问题解答）的站点：
c-faq.com
但是，这个站点的内容主要涵盖到C89。
如果对C库有疑问，可以访问这个站点获得信息：
www.acm.uiuc.edu/webmonkeys/book/c_guide/index.html。
这个站点全面讨论指针：pweb.netcom.com/～tjensen/ptr/pointers.htm。
还可以使用谷歌和雅虎的搜索引擎，查找相关文章和站点：
www.google.com
search.yahoo.com
www.bing.com
可以使用这些站点中的高级搜索特性来优化你要搜索的内容。例如，尝
试搜索C教程。
你可以通过新闻组（newsgroup）在网上提问。通常，新闻组阅读程序
1525
通过你的互联网服务提供商提供的账号访问新闻组。另一种访问方法是在网
页浏览器中输入这个地址：http://groups.google.com。
你应该先花时间阅读新闻组，了解它涵盖了哪些主题。例如，如果你对
如何使用C语言完成某事有疑问，可以试试这些新闻组：
comp.lang.c
comp.lang.c.moderated
可以在这里找到愿意提供帮助的人。你所提的问题应该与标准 C 语言
相关，不要在这里询问如何在UNIX系统中获得无缓冲输入之类的问题。特
定平台都有专门的新闻组。最重要的是，不要询问他们如何解决家庭作业中
的问题。
如果对C标准有疑问，试试这个新闻组：comp.std.c。但是，不要在这里
询问如何声明一个指向三维数组的指针，这类问题应该到另一个新闻组：
comp.lang.c。
最后，如果对C语言的历史感兴趣，可以浏览下C创始人Dennis 
Ritchie
的站点，其中1993年中有一篇文章介绍了C的起源和发展：cm.bell-
labs.com/cm/cs/who/dmr/chist.html。
B.1.2 C语言书籍
Feuer,Alan R.The C Puzzle Book,Revised Printing
Upper Saddle River,
NJ: Addison-WesleyProfessional, 1998。这本书包含了许多程序，可以用来学
习，推测这些程序应输出的内容。预测输出对测试和扩展 C 的理解很有帮
助。本书也附有答案和解释。
Kernighan, Brian W.and Dennis M.Ritchie.The C Programming Language,
Second Edition .Englewood Cliffs, NJ: Prentice Hall, 1988。第1本C语言书的第
2版（注意，作者Dennis Ritchie是C的创始者）。本书的第1版给出了K&R C
的定义，许多年来它都是非官方的标准。第2版基于当时的ANSI草案进行了
1526
修订，在编写本书时该草案已成为了标准。本书包含了许多有趣的例子，但
是它假定读者已经熟悉了系统编程。
Koenig,Andrew.C Traps and Pitfalls.Reading,MA:Addison-Wesley,1989。本
书的中文版《C陷阱与缺陷》已由人民邮电出版社出版。
Summit,Steve.C Programming FAQs.Reading,MA:Addison-Wesley,1995。这
本书是互联网FAQ的延伸阅读版本。
B.1.3 编程书籍
Kernighan, Brian W.and P.J.Plauger.The Elements of Programming Style,
Second Edition .NewYork:McGraw-Hill, 1978。这本短小精悍的绝版书籍，历
经岁月却无法掩盖其真知灼见。书中介绍了要编写高效的程序，什么该做，
什么不该做。
Knuth,Donald E.The Art of Computer Programming, 第1卷（基本算法），
Third Edition.Reading,MA:Addison-Wesley, 1997。这本经典的标准参考书非常
详尽地介绍了数据表示和算法分析。第2卷（半数学算法，1997）探讨了伪
随机数。第 3 卷（排序和搜索，1998）介绍了排序和搜索，以伪代码和汇编
语言的形式给出示例。
Sedgewick, 
Robert.Algorithms 
in 
C, 
Parts 
1-4:Fundamentals,Data
Structures,Sorting,Searching,Third 
Edition.Reading, 
MA: 
Addison-Wesley
Professional, 1997。顾名思义，这本书介绍了数据结构、排序和搜索。本书
中文版《C算法（第1卷）基础、数据结构、排序和搜索（第3版）》已由人
民邮电出版社出版。
B.1.4 参考书籍
Harbison, Samuel P.and Steele, Guy L.C: A Reference Manual, Fifth
Edition.Englewood Cliffs,NJ:Prentice Hall, 2002。这本参考手册介绍了C语言
的规则和大多数标准库函数。它结合了C99，提供了许多例子。《C语言参
1527
考手册（第5版）（英文版）》已由人民邮电出版社出版。
Plauger,P.J.The 
Standard 
C 
Library.Englewood 
Cliffs,NJ:Prentice
Hall,1992。这本大型的参考手册介绍了标准库函数，比一般的编译器手册更
详尽。
The International C Standard.ISO/IEC 9899:2011。在撰写本书时，可以花
285美元从www.ansi.org下载该标准的电子版，或者花238欧元从IEC下载。
别指望通过这本书学习C语言，因为它并不是一本学习教程。这是一句有代
表性的话，可见一斑：“如果在一个翻译单元中声明一个特定标识符多次，
在该翻译单元中都可见，那么语法可根据上下文无歧义地引用不同的实
体”。
B.1.5 C++书籍
Prata,Stephen.C++Primer Plus,Sixth Edition.Upper Saddle River,NJ:Addison-
Wesley,2012。本书介绍了C++语言（C++11标准）和面向对象编程的原则。
Stroustrup, Bjarne.The C++Programming Language, Fourth Edition.Reading,
MA: Addison-Wesley, 2013。本书由C++的创始人撰写，介绍了C++11标准。
1528
B.2 参考资料II：C运算符
C语言有大量的运算符。表B.2.1按优先级从高至低的顺序列出了C运算
符，并给出了其结合性。除非特别指明，否则所有运算符都是二元运算符
（需要两个运算对象）。注意，一些二元运算符和一元运算符的表示符号相
同，但是其优先级不同。例如，*（乘法运算符）和*（间接运算符）。表后
面总结了每个运算符的用法。
表B.2.1 C运算符
B.2.1 算术运算符
+ 把右边的值加到左边的值上。
+ 作为一元运算符，生成一个大小和符号都与右边值相同的值。
- 从左边的值中减去右边的值。
1529
- 作为一元运算符，生成一个与右边值大小相等符号相反的值。
* 把左边的值乘以右边的值。
/ 把左边的值除以右边的值；如果两个运算对象都是整数，其结果要被
截断。
% 得左边值除以右边值时的余数
++ 把右边变量的值加1（前缀模式），或把左边变量的值加1（后缀模
式）。
-- 
把右边变量的值减1（前缀模式），或把左边变量的值减1（后缀模
式）。
B.2.2 关系运算符
下面的每个运算符都把左边的值与右边的值相比较。
=  大于或等于
>  大于
!=  不等于
关系表达式
简单的关系表达式由关系运算符及其两侧的运算对象组成。如果关系为
真，则关系表达式的值为 1；如果关系为假，则关系表达式的值为0。下面
是两个例子：
1530
5 > 2 关系为真，整个表达式的值为1。
(2 + a) == a 关系为假，整个表达式的值为0。
B.2.3 赋值运算符
C语言有一个基本赋值运算符和多个复合赋值运算符。=运算符是基本
的形式：
= 把它右边的值赋给其左边的左值。
下面的每个赋值运算符都根据它右边的值更新其左边的左值。我们使用
R-H表示右边，L-R表示左边。
+= 把左边的变量加上右边的量，并把结果储存在左边的变量中。
-= 从左边的变量中减去右边的量，并把结果储存在左边的变量中。
*= 把左边的变量乘以右边的量，并把结果储存在左边的变量中。