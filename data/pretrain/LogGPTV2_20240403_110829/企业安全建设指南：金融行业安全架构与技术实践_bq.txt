机纳管等各个环节，建议与ITIL流程结合在一起。而DDoS对抗也是一个很专业的细分领域，我们后面会
在18.1节中介绍。最后，在互联网DMZ区可能还会部署类似VPN、邮件等系统，考虑到这些更多的是为
企业内部员工使用，所以我们将在第13章中进行阐述。
11.8 小结
本章从外向内对互联网应用安全防护做了一个基本的阐述，包括端口、Web应用、系统、网络、业
务、数据等，有些内容会在后面的章节中更为详细地阐述。需要特别说明的是，金融行业作为一个强监
管行业，在做安全工作的时候更多是考虑效果（合规、风险控制与转移、管理与运营落地等），所以在
安全解决方案的选择上更偏重成熟稳定的商业产品，再结合企业实际需求使用开源方案做适当的补充和
辅助，这一点和互联网公司因成本、规模等原因而更多选择开源或自研是有较大差别的。
第12章 移动应用安全
随着智能手机以及4G网络的普及和金融科技的深入发展，人们的生活已经被逐步改变，使用手机支
付、办公、购物、娱乐等成为主流方式。根据中国互联网络信息中心发布的第41次《中国互联网络发展
状况统计报告》截至2017年12月，我国手机网民规模达7.53亿，网民中使用手机上网人群的占比由2016年
的95.1%提升至97.5%。随着移动终端在日常生活中承担的数字金融业务越来越多，其安全性越来越受到
重视。
12.1 概述
早在2012年，央行就发布了金融行业移动支付标准，涵盖了应用基础、安全保障、设备、支付应
用、联网通用5大类35项标准，并从产品形态、业务模式、联网通用、安全保障等方面明确了系统化的技
术要求，覆盖中国金融移动支付各个环节的基础要素、安全要求和实现方案，确立了以“联网通用、安全
可信”为目标的技术体系架构。
2017年，泰尔终端实验室依据相关标准对多款基于Android操作系统的手机银行APP进行了安全测
评，其测评内容包括通信安全性、键盘输入安全性、客户端运行时安全性、客户端安全防护、代码安全
性和客户端业务逻辑安全性等6个方面的39项内容，分析评测结果不容乐观，如图12-1所示。
图12-1 泰尔终端实验室2017年对几大金融APP测试
在报告的最后，该实验室建议相关银行采取更加安全的APP加固解决方案，同时增加应用分发渠道监
控，第一时间监测盗版、篡改应用发布上线；增加应用自身完整性校验功能，检测到应用被篡改后，及
时提醒用户卸载非法应用或者自动进行更新修复。
我们把移动安全问题分两个话题来阐述：APP开发安全，APP业务安全。
12.2 APP开发安全
APP应用安全，除了我们所熟知的APP加壳外，还有一些是应用程序本身的安全问题，例如组件安
全、端口安全、数据安全等，甚至还有一些跟业务场景相关的。这里我们说一下APP开发中经常遇到的问
题与相应对策。
12.2.1 AndroidManifest配置安全
每个Android应用的根目录中都必须包含一个AndroidManifest.xml文件。Manifest文件为Android系统
提供有关应用的基本信息，系统必须获得这些信息才能运行任意应用代码。此外，Manifest文件还可执行
以下操作：
·为应用的Java软件包命名。软件包名称充当应用的唯一标识符。
·描述应用的各个组件，包括构成应用的Activity、服务、广播接收器和内容提供程序。为实现每个组
件的类命名并发布其功能。根据这些声明，Android系统可以了解这组件具体是什么，以及在什么条件下
可以启动它们。
·确定将托管应用组件的进程。
·声明应用必须具备哪些权限才能访问API中受保护的部分并与其他应用交互。
·声明其他应用与该应用组件交互所需具备的权限。
·列出Instrumentation类，这些类可在应用运行期间提供分析和其他信息。这些声明只会在应用处在开
发和测试阶段时出现在清单文件中，在应用发布之前会被删除。
·声明应用所需的最低Android API级别。
·列出应用必须链接的库。
我们所熟知的导出组件，是Android上最常见也是门槛最低的攻击入口，如Manifest中组件设置不当
的话，就存在被任意调用的可能。此外，在Manifest配置文件中，还有一些可被调试的程序、可被导出的
应用数据以及与Scheme相关的配置开关，一旦开启就会存在一些风险，笔者将常见的风险与对策整理成
表格供读者参考，如表12-1所示。
表12-1 Manifest配置不当类风险与对策
12.2.2 Activity组件安全
Activity组件是Android四大组件中用户唯一能够看见的组件，作为软件所有功能的显示及与用户交互
的载体，其安全性不言而喻。除了前面说的组件导出暴露问题外，主要是访问权限控制和被劫持问题。
当Activity组件需要被外部特定程序调用时，建议使用android:permission属性来指定一个权限字符
串。
在启动Activity时，加入标志位FLAG_ACTIVITY_NEW_TASK，就能使该Activity置于栈顶立即呈现
给用户。恶意软件可以监控目标Activity，侦测到目标Activity启动后，立即弹出一个与该应用界面相同的
Activity，实现伪装目标Activity，也就是我们所说的“被劫持”问题。针对Activity劫持目前没有特别好的办
法彻底解决，一个思路是在APP一些关键界面（比如登录界面）被覆盖时弹出一些提示信息，进入后台的
时候判断是不是用户自己触发，如果不是也弹出提示信息。
12.2.3 Service组件安全
Service组件是Android系统中的后台进程，主要的功能是在后台进行一些耗时的操作。
建议私有Service不定义intent-filter并且设置exported为false，需要被同公司不同APP访问时，可以将
protectionLevel设置为signature；如果是合作伙伴APP访问，需要对其APP签名做校验。若存在Service返回
数据的情况，则需要关注敏感信息泄露风险。
12.2.4 Provider组件安全
Content Provider组件是Android应用的重要组件之一，管理对数据的访问，主要用于不同的应用程序
之间实现数据共享。Content Provider的数据源不止包括SQLite数据库，还可以是文件数据。通过将数据储
存层和应用层分离，Content Provider为各种数据源提供了一个通用的接口。
参见表12-2，如果在AndroidManifest文件中将某个ContentProvider的exported属性设置为true，就会产
生一些越权访问数据的风险。访问对象的不同结合App实现不当，可能会产生数据任意访问、SQL注入、
目录遍历等风险。
1.私有权限定义错误导致数据被任意访问
私有权限定义经常发生的风险是：定义了私有权限，但是根本没有定义私有权限的级别，或者定义
的权限级别不够，导致恶意应用只要声明这个权限就能够访问相应的Content Provider提供的数据，造成数
据泄露。
2.本地SQL注入漏洞
当Content Provider的数据源是SQLite数据库时，如果实现不当，而Provider又是暴露的，则可能会引
发本地SQL注入漏洞。具体来说，Content Provider的query()如果使用拼接字符串组成的SQL语句去查询底
层的SQLite数据库时，容易发生SQL注入。
3.目录遍历漏洞
对外暴露的Content Provider实现了OpenFile()接口，因此其他有相应调用该Content Provider权限的应
用即可调用Content Provider的OpenFile()接口进行文件数据访问。但是如果没有进行Content Provider访问
权限控制和对访问的目标文件的URI进行有效判断，攻击者利用“../”实现目录遍历便可访问任意可读文
件。更有甚者，在Openfile()接口的实现中，如果要访问的文件不存在，就会创建此文件，也就是说还有
可能往手机设备可写目录中写入任意数据。
针对以上问题，最重要的是要在APP设计开发之前，就要清楚哪些Provider的数据是用户隐私数据或
者其他重要数据，考虑是否要提供给外部应用使用，如果不需要提供，则应直接在Manifest文件中设置为
不导出。
注意：
由于API level在17以下的所有应用的“android:exported”属性默认值都为true，因此如果应用的Content
Provider不必导出，建议显式设置注册的Content Provider组件的“android:exported”属性为false。
如果必须要有数据提供给外部应用，则需要做好权限控制，明确什么样的外部应用可以使用，尽量
不要提供用户隐私敏感信息。一般来讲，大部分开放的Provider，都是提供给本公司其他应用使用，一般
打包签名APP的签名证书是一致的，这样便可以将Provider的ProtectionLevel设置为signature。如果是合作
方的APP来访问，可以将合作方APP的签名哈希值预埋在提供Provider的APP中，提供Provider的APP要检
查请求访问此Provider的APP的签名，匹配通过了才能访问。
为了避免SQL语句，不要使用拼接字符串的形式，可以使用SQLiteDatabase类中的参数化查询query()
方法。
为了防止目录遍历，建议去除Content Provider中的OpenFile()接口，过滤限制跨域访问，对访问的目
标文件路径进行有效判断，过滤“../”等字符串。
12.2.5 BroadcastReceiver组件安全
BroadcastReceiver中文被译为广播接收者，用于处理接收到的广播，广播接收者的安全分为接收安全
与发送安全两个方面。
1.接收安全
动态注册广播如果仅为应用内部使用，应当将exported设置为false，这样外部应用不能随便发送广播
到自身程序中。
如果需要接收外部应用，则需要配置权限，和前面Provider的一样，如果是本公司其他APP，将
ProtectionLevel设置为signature；如果是其他合作伙伴的APP，则除了设置ProtectionLevel外还建议避免敏
感信息的传递。
2.发送安全
Android系统提供了两种广播发送方法，即sendOrderedBroadcast和sendBroadcast。
有序广播通过Context.sendOrderedBroadcast()来发送，所有的广播接收器优先级依次执行，广播接收
器的优先级通过receiver的intent-filter中的android:priority属性来设置，数值越大优先级越高。当广播接收
器接收到广播后，可以使用setResult()函数来将结果传给下一个广播接收器接收，然后通过getResult()函数
取得上个广播接收器接收返回的结果。当广播接收器接收到广播后，也可以用abortBroadcast()函数让系统
拦截下该广播，并将该广播丢弃，使该广播不再传送到别的广播接收器接收。