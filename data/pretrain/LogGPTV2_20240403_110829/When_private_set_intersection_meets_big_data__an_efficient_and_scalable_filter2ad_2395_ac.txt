S. We denote the probability of this case as p2. In this case we can
divide the constitution strings into several groups of size at most k−
1, each group contains the shares of a particular element. From the
security of the XOR-based secret sharing scheme, the XOR result
of each group should be a uniformly random string. Therefore the
recovered string is a uniformly random string.
Case 3: At least one of the constitution strings is a random string.
The probability of this case as p3 = 1 − p1 − p2. In this case the
recovered string is also a uniformly random string.
In all three cases, a false positive occurs if recovered = y. In
case 1, the false positive probability is 0. In the other two cases,
the false positive probability is 2−λ. Let B denote the event that a
false positive occurs, and let a1, a2, a3 denote the events that case
1, case 2, case 3 occurs respectively, by the law of total probability,
the false positive probability is:
P r[B] = P r[a1]P r[B|a1] + P r[a2]P r[B|a2] + P r[a3]P r[B|a3]
= 0 · p1 + 2−λ · p2 + 2−λ · p3
= 2−λ(1 − p1) ≤ 2−λ
In summary, with proper parameters, a garbled Bloom ﬁlter ex-
hibits similar properties when encoding set membership: no false
negative and negligible false positive.
(m, n, k, H)-Bloom ﬁlter. The idea is quite similar to creating an
intersection Bloom ﬁlter by ANDing two Bloom ﬁlters.
Let’s say we have an (m, n, k, H)-Bloom ﬁlter BFC that en-
codes a set C and an (m, n, k, H, λ)-garbled Bloom ﬁlter GBFS
that encodes a set S. We use Algorithm 3 to build the intersection
garbled Bloom ﬁlter GBFC∩S .
Algorithm 3: GBF Intersection(GBFS, BFC , m)
input : An (m, n, k, H, λ)-garbled Bloom ﬁlter GBFS, an
(m, n, k, H)-Bloom ﬁlter BFC, m
output: An (m, n, k, H, λ)-garbled Bloom ﬁlter GBFC∩S
1 GBFC∩S= new m-element array of bit strings;
2 for i = 0 to m − 1 do
3
if BFC[i] == 1 then
GBFC∩S[i] = GBFS[i];
GBFC∩S[i] r← {0, 1}λ;
4
5
6
7
8 end
else
end
The intuition of the algorithm is this: if an element x is in C ∩ S,
then for every position i it hashes to, BFC [i] must be a 1 bit and
GBFS[i] must be a share of x. Therefore by running the algorithm,
all shares of x are copied to the new garbled Bloom ﬁlter. That is,
all elements in C ∩ S are preserved in the new garbled Bloom ﬁlter.
On the other hand, if x is not in C ∩ S, then with a high probability,
at least one share will not be copied. Or in other words, elements
not in C ∩S are eliminated from the new garbled Bloom ﬁlter. Thus
the new garbled Bloom ﬁlter is indeed a garbled Bloom ﬁlter that
encodes the intersection. Formally, we have the following theorem:
THEOREM 3. Let GBFC∩S be an (m, n, k, H, λ)-garbled
Bloom ﬁlter produced in Algorithm 3. For 0 ≤ i ≤ k − 1, let
ai be the event that GBFC∩S[hi(x)] equals the ith share of x, we
have (i) ∀x ∈ C ∩ S: P r[a0 ∧ . . . ∧ ak−1] = 1, (ii) ∀x 6∈ C ∩ S:
P r[a0 ∧ . . . ∧ ak−1] is negligible in k.
PROOF. The ﬁrst part: we can see from the algorithm that for
any element x ∈ C ∩ S, all the shares will be copied from GBFS
to GBFC∩S because the corresponding locations in BFC are all
set to 1.
The second part: Firstly, GBFC∩S does not encode any element
x 6∈ S because GBFS contains no share of any element x 6∈ S.
Secondly, for any element x ∈ S − C ∩ S, the probability of all
its shares are copied from GBFS to GBFC∩S is ǫ, where ǫ is the
upper bound of the false positive probability of an (m, n, k, H)-
BF. This is because if all shares of x are copied to GBFC∩S then it
means all locations that x hashes to in BFC are set to 1. However
x 6∈ C ∩ S and consequently x 6∈ C, then it implies a false positive
when we query x against BFC and the probability is ǫ.
From security point of view, a more interesting property of the
intersection GBF is that it is indistinguishable from a GBF built
from scratch that encodes C ∩ S.
THEOREM 4. Given sets C, S and their intersection C ∩ S,
let GBFC∩S be an (m, n, k, H, λ)-garbled Bloom ﬁlter produced
by Algorithm 3 from GBFS and BFC , let GBF ′
C∩S be another
(m, n, k, H, λ)-garbled Bloom ﬁlter produced by Algorithm 1 us-
ing C ∩ S, we have GBFC∩S
c
≡ GBF ′
C∩S.
4.2 Produce an Intersection GBF
In this section we show how to produce an intersection garbled
Bloom ﬁlter from an (m, n, k, H, λ)-garbled Bloom ﬁlter and an
PROOF. Given GBFC∩S , we modify it to get GBF ′′
C∩S . We
scan GBFC∩S from the beginning to the end and for each location
i, we modify GBFC∩S[i] using the following procedure:
7931. If GBFC∩S[i] is a share of an element in C ∩ S, then do
nothing.
2. Else if GBFC∩S[i] is a random string, do nothing.
3. Else if GBFC∩S[i] is a share of an element in S − C ∩ S,
replace it with a uniformly random λ-bit string.
n, m, k, λ, h0, . . . , hk−1
C lient
set : C
Server
set : S
BFC
OT m
λ
GBFS
The result is GBF ′′
these three cases, so there is no unhandled case.
C∩S. Every GBFC∩S[i] must fall into one of
Now we argue that the distribution of GBF ′′
C∩S is identical to
C ∩ S
query GBF π
C∩S
Figure 2: The basic PSI protocol π∩
C∩S and GBF ′
C∩S[i] is a share of an element in C ∩ S iff GBF ′
C∩S . To see that, let’s compare each location in GBF ′′
C∩S
C∩S . From Algorithm 1 and the above procedure, we can
C∩S contain only shares of elements
GBF ′
and GBF ′
see that GBF ′′
in C ∩ S and random strings. Because GBF ′′
C∩S
use the same set of hash functions, for each 0 ≤ i ≤ m − 1,
GBF ′′
C∩S[i] is
a share of the same element; GBF ′′
C∩S[i] is a random string iff
GBF ′
C∩S[i] is a random string. The distribution of a share de-
pends only on the element and the random strings are uniformly
distributed. So the distribution of every location in GBF ′′
C∩S and
C∩S are identical therefore the distributions of GBF ′′
GBF ′
C∩S and
GBF ′
C∩S are identical.
C∩S and GBF ′
Then we argue that the distribution of GBF ′′
C∩S is identical to
GBFC∩S except for a negligible probability η.
Case 1, GBFC∩S encodes at least one elements in S − C ∩ S. In
this case the distribution of GBF ′′
C∩S differs from the distribution
of GBFC∩S . From Theorem 3, the probability of each element
in S − C ∩ S being encoded in GBFC∩S is ǫ. Since there are
d = |S| − |C ∩ S| elements in S − C ∩ S, the probability of at
least one element is falsely contained in GBFC∩S is:
η =
d
X
i=1
(cid:16)d
i(cid:17) · ǫi =
d
X
i=1
d(d − 1)...(d − i + 1)
i(i − 1)...1
· ǫi ≤
d
X
i=1
(dǫ)i ≤ 2dǫ
As we can see η is negligible if ǫ is negligible.
Case 2: GBFC∩S encodes only elements from C ∩ S. In this case,
each element in S−C∩S may leave up to k−1 shares in GBFC∩S.
The only difference between GBFC∩S and GBF ′′
C∩S is that in
GBF ′′
C∩S , all “residue” shares of elements in S − C ∩ S are re-
placed by random strings. From the security of the XOR-based
secret sharing scheme, the residue shares should be uniformly ran-
dom (otherwise they leak information about the elements). Thus
the procedure does not change the distribution when modifying
GBFC∩S into GBF ′′
C∩S. So the distributions of GBFC∩S and
GBF ′′
C∩S are identical. The probability of this case is at least 1−η.
C∩S always holds and GBFC∩S ≡
C∩S holds in case 2, we can conclude that P r[GBFC∩S ≡
C∩S] ≥ 1 − η thus
C∩S ≡ GBF ′
GBF ′′
GBF ′
Since GBF ′′
|P r[D(GBFC∩S) = 1] − P r[D(GBF ′
C∩S) = 1]| ≤ η
Theorem 4 shows that the probability of GBFC∩S and GBF ′
C∩S
are distinguishable is η. In our implementation we set k = λ so ǫ
is about 2−λ, then a question may arise whether this is appropri-
ate: since η is bounded by 2dǫ, will the security be weakened?
For example if λ = 80 and d = 220, will the security be weak-
ened to about 60-bit rather then desired 80-bit? The answer is no.
Loosely speaking, a bigger d means that an adversary can distin-
guish GBFC∩S and GBF ′
C∩S with a smaller number of attempts,
but in each attempt the amount of computation required to distin-
guish the two also increases. Therefore the total amount of work
needed to distinguish the two remains unchanged. We demonstrate
it through the following game: an adversary can query an oracle
with two sets S and C of its choice. The oracle randomly chooses
b r← {0, 1}, if b = 1, it returns GBFC∩S, if b = 0, it returns
GBF ′
C∩S .The adversary can repeatedly query the oracle. At the
end of the game, it challenges the oracle and outputs b′. It wins the
game if b′ = b. The advantage is |P r[b′ = b] − 1
2 |. As we show in
Theorem 5, the advantage depends only on ǫ, not η.
THEOREM 5. For an adversary runs in time t, the adversary’s
advantage in the above game is no more than O(t) · ǫ.
PROOF. In each oracle query, the adversary has a probability of
η to distinguish GBFC∩S and GBF ′
C∩S . Therefore if it makes q
oracle queries, the advantage will be q · η. The number of oracle
queries the adversary can make is t/td, where td is the time needed
to check whether the GBF encodes an element that is not in the
intersection. As there is no way other than querying the GBF to
decide, the best the adversary can do is to query all elements in
S −C ∩S against the GBF. Therefore td = |S −C ∩S|·tg = d·tg,
where tg is the time of a GBF query. Therefore the advantage of
the adversary is: q · η = t
td
· 2dǫ = O(t) · ǫ.
· η ≤ t
d·tg
4.3 Oblivious Bloom Intersection
The idea of the basic protocol is shown in Figure 2. That is, to
run Algorithm 3 by two parties using oblivious transfer. Thus we
call it oblivious Bloom intersection. The protocol runs as follows:
1. The server’s private input is S, and the client’s private input
is C. The auxiliary inputs include the security parameter λ,
the maximum set size n, the optimal Bloom ﬁlter parameters
m, k and H = {h0, ..., hk−1}. The parameter k is set to be
the same as the security parameter λ.
2. The client generates an (m, n, k, H)-BF that encodes its pri-
vate set C, the server generates an (m, n, k, H, λ)-GBF that
encodes its private set S. The client uses its Bloom ﬁlter as
the selection string and acts as the receiver in an OT m
λ proto-
col. The server acts as the sender in the OT protocol to send
m pair of λ-bit strings (xi,0, xi,1) where xi,0 is a uniformly
random string and xi,1 is GBFS[i]. For 0 ≤ i ≤ m − 1,
if BFC [i] is 0, then the client receives a random string, if
BFC[i] is 1 it receives GBFS[i]. The result is GBF π
C∩S.
3. The client computes the intersection by querying all elements
in its set against GBF π
C∩S.
At the end of step 2, the client receives a new garbled Bloom
C∩S . The OT protocol does exactly what we want to
ﬁlter GBF π
achieve in Algorithm 3.
THEOREM 6. Given an (m, n, k, H, λ)-Garbled Bloom ﬁlter
GBFS and an (m, n, k, H)-Bloom ﬁlter BFC . the garbled Bloom
ﬁlter GBF π
C∩S is equivalent to a garbled Bloom ﬁlter GBFC∩S
that is built by Algorithm 3 using GBFS and BFC .
PROOF. Let’s run the algorithm and protocol simultaneously and
use the same random coins for the random strings that are to be
placed in GBF π
C∩S and GBFC∩S. From the description of the
algorithm and the protocol, we can see that for 0 ≤ i ≤ m − 1,
794Huang’s
De Cristofaro’s
The Basic Protocol
PK ops
O(λ)
O(n)
O(λ)
SK ops
Memory
Comm.
O(n log n) O(n log n) O(n log n)
O(n)
O(n)
O(n)
O(n)
O(n)
O(n)
Assuming the underlying OT m
λ protocol is secure, then the basic
PSI protocol π∩ in Section 4.3 securely computes f∩ in the pres-
ence of semi-honest adversaries.
Table 1: Asymptotic Costs Comparison: n is size of the input sets,
λ is the security parameter, PK (SK) ops means public (symmetric)
key operations.
if BFC[i] = 1, then GBF π
C∩S[i] = GBFC∩S[i] = GBFS[i]; if
BFC [i] = 0, then GBF π
C∩S[i] = GBFC∩S[i] = ri where ri is a
uniformly random strings. Therefore the two garbled Bloom ﬁlters
are equivalent.