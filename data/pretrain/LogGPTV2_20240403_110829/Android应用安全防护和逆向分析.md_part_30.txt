![](OEBPS/Images/290-i.jpg){.calibre698}
:::
对应的ARM指令：
::: bodypic-c
![](OEBPS/Images/290-2-i.jpg){.calibre699}
:::
[]{#124.xhtml}
#### 20.4 用IDA静态分析so文件 {.bodycontent-title2}
IDA工具太强大了，它可以查看so中的代码逻辑。如图20-1所示。
::: bodypic-c
![](OEBPS/Images/20a1-i.jpg){.calibre700}
:::
图20-1 IDA打开so文件内容
可以看到左边栏中有so中的函数，找到指定函数的定义的地方进行查看即可。IDA也是可以直接查看apk文件的，如图20-2所示。
可以查看apk文件中的所有文件。可以选择classes.dex文件，如图20-3所示。
这里可能会遇到一个问题，就是如果应用程序太大，打开过程中会很慢，有可能IDA停止工作，所以要慢慢等，如图20-4所示。
::: bodypic-c
![](OEBPS/Images/20a2-i.jpg){.calibre701}
:::
图20-2 IDA查看apk文件
::: bodypic-c
![](OEBPS/Images/20a3-i.jpg){.calibre702}
:::
图20-3 查看classes.dex文件
::: bodypic-c
![](OEBPS/Images/20a4-i.jpg){.calibre700}
:::
图20-4 查看classes.dex文件
打开之后，可以看到类和方法名，这里还可以支持搜索类名和方法名Ctrl+F，也可以查看字符串内容（Shirt+F12），如图20-5所示。
::: bodypic-c
![](OEBPS/Images/20a5-i.jpg){.calibre703}
:::
图20-5 查看字符串内容
发现IDA也是一个分析Java代码的好手，所以说这个工具太强大了。
[]{#125.xhtml}
#### 20.5 案例分析 {.bodycontent-title2}
本节通过一个例子来看看如何使用静态分析技术进行破解。
##### 20.5.1 静态分析smali代码 {.bodycontent-title3}
首先拿到需要破解的apk，使用apktool.jar工具来反编译：
::: bodypic-c
![](OEBPS/Images/292-i.jpg){.calibre704}
:::
这个apk很容易就被反编译了，看来并没有进行任何的加固，那就好办了。这里改一下它的AndroidManifest.xml中的信息，改成可调式模式，这是后面进行动态调试的基础，当然也可以不用修改，在之前章节介绍了如何修改系统的调试总开关，如果把系统的调试总开关打开，这里就不用修改了。一个正式的apk在AndroidManifest.xml中这个值是false的。看看它的AndroidManifest.xml文件，如下所示：
::: bodypic-c
![](OEBPS/Images/293-i.jpg){.calibre121}
:::
把这个值改成true，再回编译，这时候就可以动态调试apk了。所以在这点上可以看到，静态分析是动态分析的前提，这个值不修改的话，是没有办法进行后续的动态调试的。修改成功之后，进行回编译：
::: bodypic-c
![](OEBPS/Images/293-2-i.jpg){.calibre705}
:::
这里是为了简化内容，写了一个批处理，首先进入到目录，然后使用命令进行回编译：
::: bodypic-c
![](OEBPS/Images/293-3-i.jpg){.calibre706}
:::
sq是之前反编译的目录，debug.apk是回编译之后的文件，这时，debug.apk是不能安装运行的，因为没有签名，Android中是不允许安装一个没有签名的apk。
下面还要继续签名，用系统自带的签名文件即可签名：
::: bodypic-c
![](OEBPS/Images/293-4-i.jpg){.calibre696}
:::
后面就直接安装这个apk，然后运行apk。这个过程中只需要知道应用的包名和入口Activity名称即可，这个信息在AndroidManifest.xml中也是可以获取到的，当然可以使用如下命令得到：
::: bodypic-c
![](OEBPS/Images/293-5-i.jpg){.calibre707}
:::
回编译之后，运行程序，发现有问题，即点击程序的icon没反应，运行不起来。查看log中的异常信息，发现也没有抛出任何异常，那么这时就可以判断，它内部肯定做了什么校验工作。校验方式一般有两种：
·对dex做校验，防止修改dex。
·对apk的签名做校验，防止重新打包。
这需要重新看看它的代码，看是否做了校验。在分析代码的时候，要先看看它有没有自己定义Application，如果有定义的话，就需要看它自己的Application类，这里看到它定了自己的Application：com.shuqi.application.ShuqiApplication。
解压apk，得到dex，然后用dex2jar进行转化，得到jar，再用jd-gui查看这个类，如图20-6所示。
::: bodypic-c
![](OEBPS/Images/20a6-i.jpg){.calibre708}
:::
图20-6 jd-gui查看源码
这里看到它的代码做混淆了，但是一些系统回调方法肯定不能混淆的，比如onCreate方法。这里一般找问题的方法是：
1）首先看这个类有没有静态方法和静态代码块，因为这类的代码会在对象初始化之前运行，可能在这里加载so文件，或者是加密校验等操作。
2）再看看这个类的构造方法。
3）最后再看生命周期方法。
看到它的核心代码在onCreate中，调用了很多类的方法，猜想这里的某个方法做工作了。这时可注入代码来跟踪是哪个方法出现问题了。
下面来看看怎么添加日志信息，就是添加日志，需要修改smali文件，再去查看smali源码：
::: bodypic-c
![](OEBPS/Images/295-i.jpg){.calibre270}
:::
这里可以很清晰地看到调用了这些方法，那么就在每个方法中加上日志信息，这里加日志有两种方式。一种方式就是直接在这里调用系统的log方法，但是有两个问题：
·需要导入包，在smali中修改。
·需要定义两个参数：tag、msg，才能正常打印log。
明显这个方法有点麻烦。另外一种方式就自己定义一个MyLog类，然后反编译，得到MyLog的smali文件，添加到这个ShuqiApplication.smali的root目录下，然后在代码中直接调用即可。放到root目录下的目的是在代码中调用就不需要导入包了，比如SuqiApplication.smali中的一些静态方法调用，如图20-7所示。
::: bodypic-c
![](OEBPS/Images/20a7-i.jpg){.calibre709}
:::
图20-7 静态方法调用\
编写日志类MyLog，这里就不粘贴代码了，新建一个项目之后，反编译得到MyLog.smail文件，放到目录中：
::: bodypic-c
![](OEBPS/Images/295-2-i.jpg){.calibre710}
:::
::: bodypic-c
![](OEBPS/Images/296-i.jpg){.calibre711}
:::
得到这个文件的时候，一定要注意，把MyLog.smali的包名信息删除，因为放到root目录下的，意味着这个MyLog类是没有任何包名的，这需要注意，不然最后加也是报错的。
在ShuqiApplication的onCreate方法中插入的日志方法，如下所示：
::: bodypic-c
![](OEBPS/Images/296-2-i.jpg){.calibre406}
:::
::: bodypic-c
![](OEBPS/Images/297-i.jpg){.calibre712}
:::
在加代码的时候需要注意，要找对地方加，就是在上个方法调用完之后添加，比如：invoke-virtual，invoke-static等，而且这些指令后面不能有move-result-object，因为这个指令是获取方法的返回值，所以一般是这么加代码的：
·在invoke-static/invoke-virtual指令返回类型是V之后可以加入。
·在invoke-static/invoke-virtual指令返回类型不是V，那么在move-result-object命令之后可以加入。
加好了日志代码之后就回编译执行，在这个过程中可能会遇到samli语法错误，针对指定的文件修改就可以了，得到回编译的apk之后，可以再反编译一下，看看它的Java代码，如图20-8所示。
::: bodypic-c
![](OEBPS/Images/20a8-i.jpg){.calibre713}
:::
图20-8 添加日志之后的代码
可以看到添加的代码，在每个方法之后打印信息。下面运行程序，同时开启log的tag：
::: bodypic-c
![](OEBPS/Images/298-i.jpg){.calibre714}
:::
看到打印的日志了，发现打印了三个log，这里需要注意的是，虽然打印了三个log，但是都是在不同的进程中，一个进程中的log只打印了一个，所以判断，问题出现在vr.h这个方法，如下所示：
::: bodypic-c
![](OEBPS/Images/299-i.jpg){.calibre715}
:::
查看这个方法源码如下所示：
::: bodypic-c
![](OEBPS/Images/299-2-i.jpg){.calibre716}
:::
果然，这个方法做了签名验证，校验不正确的话，直接退出程序。那么现在要想正常运行程序的话，直接注释用"#"，注释smali对应的这行代码：vr.h（this）。
然后回编译，再运行，果然不报错了，这里就不再演示了：
::: bodypic-c
![](OEBPS/Images/299-3-i.jpg){.calibre717}
:::
::: bodypic-c
![](OEBPS/Images/300-i.jpg){.calibre718}
:::
上面是通过注入代码来跟踪问题，这个方法很常用，也很实在。
##### 20.5.2 静态分析native代码 {.bodycontent-title3}
下面介绍如何使用IDA来静态分析native代码。在反编译之后，看到它的onCreate方法中有一个加载so的代码，如下所示：
::: bodypic-c
![](OEBPS/Images/300-2-i.jpg){.calibre719}
:::
看看这个代码，如下所示：
::: bodypic-c
![](OEBPS/Images/300-3-i.jpg){.calibre720}
:::
获取密码的方法是native的，就来看看getDbPassword方法。用IDA打开libpsProcess.so文件，如图20-9所示。
::: bodypic-c
![](OEBPS/Images/20a9-i.jpg){.calibre241}
:::
图20-9 IDA打开so文件内容
看看这个函数的实现，一般直接看BL/BLX等信息，跳转逻辑，还有就是返回值。在函数的最后部分发现一个重点，就是BL\_\_android_log_print。这是在native层调用log的函数。再往上看，发现tag是System.out.c。
运行程序看起log，此时也可以在Java层添加日志的：全局搜索这个方法，发现在yi这个类中调用，如图20-10所示。
::: bodypic-c
![](OEBPS/Images/20a10-i.jpg){.calibre721}
:::
图20-10 获取数据库密码代码
修改yi.smali代码：
::: bodypic-c
![](OEBPS/Images/301-i.jpg){.calibre115}
:::
可以看到，这个应用使用了sqlcipher框架进行了数据库的加密。其实现在很多应用加密数据库都是使用这个框架的，微信也是使用这个框架对本地通讯信息数据库进行加密的，这个加密工具对应的有一个Window程序可以打开它，不过需要密码，如图20-11所示。
::: bodypic-c
![](OEBPS/Images/20a11-i.jpg){.calibre722}
:::
图20-11 打开加密的数据文件
如果想破解加密的数据库内容，只要得到加密数据库密码即可，而这个密码一般是保存在本地的，只要在本地就有办法获取的。
回编译，再运行程序，开启log，如图20-12所示。
::: bodypic-c
![](OEBPS/Images/302-i.jpg){.calibre723}
:::
::: bodypic-c
![](OEBPS/Images/20a12-i.jpg){.calibre724}
:::
图20-12 打印日志信息
发现，返回的密码Java层和native层是一样的。说明静态分析native还是有效的。
[提示：]{.yanse}案例下载地址为http://download.csdn.net/detail/jiangwei0910410003/9308217。
案例中有个说明文件，运行前请阅读。
本节通过案例介绍了如何使用静态方式去破解一个apk，在破解一个apk的时候，其实就是改点代码，然后能够运行起来，达到想要的功能，一般步骤如下：
1）注释特定功能，比如广告展示等。
2）得到方法的返回值，比如获取用户的密码。
3）添加指定的代码，比如加入自己的监测代码和广告等。
在静态分析代码的时候，需要遵循的大体路线如下：首先能够反编译，得到AndroidManifest.xml文件，找到程序入口代码。找到想要的代码逻辑，一般会结合界面分析，比如要想登录成功，肯定想要得到用户登录界面Activity，这时可以用adb
shell dumpsys activity
top命令得到Activity名称，然后用Eclipse自带的程序当前视图分析工具得到控件名称，或者在代码中获取layout布局文件，一般是setContentView方法的调用地方，然后用布局文件结合代码得到用户登录的逻辑，进行修改。
·在关键的地方通过代码注入技术来跟踪代码执行逻辑。