WNameHelper.read(in);$result = in.read_any();this.bind_any(n, $result);out =
$rh.createReply();`代码块。
其中 `WNameHelper.read(in)` 通过读取 `IOR` 中的信息用于注册到 `ORB` 的流程中。
`in.read_any()` 最后执行 `weblogic.corba.idl.AnyImpl#read_value_internal` 处理对应的流程：
以下为 `read_any` 到 `read_value_internal` 的调用链：
可以看到最后进行 `weblogic.corba.idl.AnyImpl#read_value()`
进行读取反序列化反序列化，然后通过以下调用链执行反射并且通过 `weblogic.iiop.IIOPInputStream#read_value`
通过反射进行获取实例。
通过实例化之后 `Serializable news = (Serializable)ValueHandlerImpl.readValue(this,
osc, s);` 然后通过`weblogic.iiop.ValueHandlerImpl#readValue`进行读取内容
!
基于之前 `JtaTransactionManager` 进行读取流内容进行 `this.readObjectMethod.invoke(obj, in)`
然后进入 `JtaTransactionManager` 处理流程  
进入
`com.bea.core.repackaged.springframework.transaction.jta.JtaTransactionManager#readObject`
整个流程为：
进入
`com.bea.core.repackaged.springframework.transaction.jta.JtaTransactionManager#readObject`
后首先会默认读取 `defaultReadObject` 然后创建 `JndiTemplate` 提供
`this.initUserTransactionAndTransactionManager` 进行使用注入远程 JNDI 连接。
`this.initUserTransactionAndTransactionManager` 会进行调用远程的 JNDI 连接
看到 `this.getJndiTemplate().lookup` ，最终在
`com.bea.core.repackaged.springframework.jndi.JndiTemplate#lookup` 进行操作至此结束。
同样已经触发并且加载远程的`Class` 类。
## POC 的不足之处
在背景中，笔者说明 CVE-2020-2551 漏洞公开的 POC ，有部分不足导致漏洞检测效率降低，下面章节我们来进行深入分析。
### class 编译问题
在受影响 Oracle WebLogic Server 10.3.6.0.0 与 JDK 版本有非常大的关系，如果该机器版本为 1.6 版本必须要为 1.6
，如果高于次版本会执行失败（低版本的 JDK 不兼容高版本的 JDK ），但是所有 LDAP 以及 HTTP 请求信息仍然有效。
解决方案为利用 POC 设置编译版本来进行处理：
`javac Poc.java -source 1.6 -target 1.6`
### JDK 版本问题
在安装 Oracle WebLogic Server 时需要进行需要指定 JDK 版本进行安装，如未有 JDK 会导致安装失败，安装时的 JDK
有非常大的关系，这次的漏洞主要是通过 `JtaTransactionManager` 来进行加载 LDAP 协议的内容，早在 JDK 1.7 时
Oracle 官方针对 RMI 、 LDAP 进行了限制，所在在使用时尽量使用 LDAP 协议。
### Weblogic 版本问题
经过测试研究发现以下情况：
jar 版本 | weblogic 版本 | 成功情况  
---|---|---  
10.3.6.0.0 | 10.3.6.0.0 | 成功  
10.3.6.0.0 | 12.1.3.0.0 | 成功  
10.3.6.0.0 | 12.2.1.3.0 | 失败  
10.3.6.0.0 | 12.2.1.4.0 | 失败  
12.1.3.0.0 | 10.3.6.0.0 | 成功  
12.1.3.0.0 | 12.1.3.0.0 | 成功  
12.1.3.0.0 | 12.2.1.3.0 | 失败  
12.1.3.0.0 | 12.2.1.4.0 | 失败  
12.2.1.3.0 | 10.3.6.0.0 | 失败  
12.2.1.3.0 | 12.1.3.0.0 | 失败  
12.2.1.3.0 | 12.2.1.3.0 | 成功  
12.2.1.3.0 | 12.2.1.4.0 | 成功  
12.2.1.4.0 | 10.3.6.0.0 | 失败  
12.2.1.4.0 | 12.1.3.0.0 | 失败  
12.2.1.4.0 | 12.2.1.3.0 | 成功  
12.2.1.4.0 | 12.2.1.4.0 | 成功  
最后总结 10.3.6.0.0 或 12.1.3.0.0 版本测试成功 10.3.6.0.0 和 12.1.3.0.0，12.2.1.3.0 或
12.2.1.4.0 版本测试成功 12.2.1.3.0 和 12.2.1.4.0，我把这种情况分为了两大版本，10.3.6.0.0 和
12.1.3.0.0 为一个版本（低版本），12.2.1.3.0 和 12.2.1.4.0 为另外一个版本，所以完整的 POC
需要兼容俩个版本的验证，比较好一点的做法就是通过抓包然后将2个包的内容进行多次发送，或者在利用的前提得知 Weblogic 使用的操作版本，一般
weblogic 的版本会在 `https?://host//console/login/LoginForm.jsp` 页面会现实版本。
### 验证问题
在测试过程中，可能都使用请求 LDAP 协议读取远程的 class 文件，然后才可以执行验证代码，这样做会导致多次发包给 DNSLOG
平台进行验证，可能会导致验证的问题。
在前面讲到解析的流程中，我们看到有 `lookup` 去LDAP读取远程的 class 文件。如果请求的协议为不存在的某一个协议的话就会出现以下情况：
通过 Wireshark 查看，如果发送不存在的协议会响应回复 `System Exception` 错误信息：
如果成功会进行响应 `User Exception` 信息：
那么可以基于该情况进行通过转换构造异常来进行判断漏洞是否存在。
### NAT 网络问题
NAT 网络问题是一个非常要命的问题，因为 weblogic 在运行时都是在内网运行的的，外网访问的 weblogic
全部都是转发出去的，这样就会出现一个问题配置的 IP 都为内网地址，就会导致无法正常测试成功。
**注：NAT 网络测试仅通过 Docker 进行测试，并未针对互联网进行测试。**
正常使用工具进行测试时会出现会响应内网绑定 IP 地址然后一直进行 redict，并且在最后抛出 `time out` 问题。
针对这种情况只能通过自定义实现 GIOP 协议来绕过该方式：
  1. 请求 LocationRequest，获取 key 。
  2. 请求Request， op=_non_existent，打开 IIOP 通道。
  3. 请求Request，op=bind_any，进行发送恶意序列化内容。
通过 Wireshark 我们可以看到之前测试靶场时会发包以下内容：  
我们可以基于之前发送的 `op=_non_existent` 进行重新构造，修改 iiop 地址：
在重新 `op=_non_existent` 发包时需要首先获取 `Key Address` （key 存在有效期时间）否则会进行一直进行
`Location Forward`，获取 `Key` 信息并且修改 iiop 地址打开 IIOP 通道，最后进行发送恶意序列化内容。
### LDAP 填充问题
通过 socket 发包的形式进行发包时，如需要进行替换 LDAP URL 时，正常修改 URL 会一直导致发包响应错误，需要通过 `#` 进行
panding 构造指定字节长度的 URL 然后通过 `#` 填充。
    1
    2
    3
    4
    5
    6
|
    String append = "";
    for (int i = ldapUrl.length(); i < 0x60; i++) {
        append += "#";
    }
    String url = ldapUrl+append;
    System.out.println(url);  
---|---  
## Weblogic 的问题
**截止 2020 年 3 月 4 日，通过 Oracle 官方进行下载 weblogic
时，通过研究发现该漏洞依然存在可以利用（所有受影响版本），需要额外安装补丁。**  
如下文件为下文件MD5值以及下载时间：
文件名称 | MD5 | SHA1 | 创建时间  
---|---|---|---  
wls1036_generic.jar | 33D45745FF0510381DE84427A7536F65 |
FFBC529D598EE4BCD1E8104191C22F1C237B4A3E | ‎2020‎-03‎-04‎  
fmw_12.1.3.0.0_wls.jar | 8378FE936B476A6F4CA5EFA465A435E3 |
5B1761BA2FC31DC8C32436159911E55097B00B1E | ‎2020‎-03‎-04‎  
fmw_12.2.1.3.0_wls.jar | 6E7105521029058AD64A5C6198DB09F7 |
74345654AF2C60EA13CF172A7851039A64BFE7E1 | ‎2017-08‎-21‎  
fmw_12.2.1.4.0_wls.jar | AA090712069684991BA27E4DE9ED3FF6 |
CFAA5752D33DD5FFB7A57F91686E15B465367311 | ‎2019-09‎-13‎  
建议目前已经安装最新版 weblogic 时同排查该漏洞，如有漏洞建议立即安装补丁或通过修复方案进行修复，防止被不法分子利用。
## 漏洞修复
  1. 通过 weblogic 控制台进行关闭 IIOP 协议，然后重新启动 weblogic服务。
  2. 安装 weblogic [修复补丁](https://www.oracle.com/security-alerts/cpujan2020.html)，进行修复。
## 参考
  * [Weblogic IIOP反序列化漏洞（CVE-2020-2551） 漏洞分析](https://www.anquanke.com/post/id/197605)
  * [WebLogic WLS核心组件RCE分析（CVE-2020-2551）](https://www.anquanke.com/post/id/199695)
  * [IDEA+docker，进行远程漏洞调试（weblogic）](https://www.cnblogs.com/ph4nt0mer/archive/2019/10/31/11772709.html)
  * [Java CORBA研究](https://lucifaer.com/2020/02/20/Java%20CORBA%E7%A0%94%E7%A9%B6/)
  * [基于Java反序列化RCE – 搞懂RMI、JRMP、JNDI](https://xz.aliyun.com/t/7079)