式操作的，那么SQL_CACHE 选项将导致 SELECT 语句的查询结果被缓存起来。
SQL_CACHE、SQL_NO_CACHE：如果查询结果是可以缓存的，并且查询缓存是以 DEMAND 模
的磁盘空间和内存。
SQL_BUFFER_RESULT：在等待将整个查询结果发回到客户端的同时，告诉服务器将查询结
务
果
MEMORY。
选项，那么对这个表进行写操作的其他语句（如INSERT 和UPDATE）必须等待这个读操作
的话。如果有客户端正在用SELECT语句读取某个表，而且SELECT语句有HIGH_PRIORITY
HIGH_PRIORITY：指定HIGH_PRIORITY可以使语句拥有更高的优先级，如果原本要等待
复的行。
示将返回所有的行，它是默认值。DISTINCT 和 DISTINCTROW 表示将从结果集里剔除重
ALL、DISTINCT、DISTINCTROW：这几个关键字控制着是否需要返回重复的行。ALL 表
项
由
完
[FOR UPDATE|LOCK IN SHARE MODE]]
页，则服务器将把不带LIMIT 时返回的行数也统计出来。如果想知道这个计数值到底是多
里才使用此选项。此选项只适用于那些使用表级锁定的存储引擎，如MyISAM 或
附录ESQL语法参考
器早点儿释放锁，从而使其他客户端更快地访问那些表。不过，使用此选项会消耗更多
具缓冲到一个单独的临时表里，而不是锁定SELECT里指定的（一个或多个）表。这能使服
延缓写语句的执行，所以应该只在那些会很快执行完成并且需要立刻执行的SELECT语句
成之后才能执行，这条SELECT语句有高于那些写操作语句的优先级。不过，因为此选项
count,] show_count| show_count OFFSET skip_count)]
file
---
## Page 715
提示应用于查询和连接，可以使用FORJOIN子句。
给定表的索引名，或者是代表给定表的 PRIMARY KEY的 PRIMARY 关键字。
index_list用于uSE时，它可以为空，表示“不使用索引”。其中列出的每一个索引都应该是来自
与使用所列的索引相比，选用全表扫描的代价非常高。
不要使用哪些索引。FORCE INDEX子句的含义和USE INDEX子句的相似，但是前者告诉优化器，
INDEX子句告诉优化器只能从index_list 列表中的索引里选择。IGNOREINDEx子句告诉优化器
器不能正确选择在连接中使用哪个索引的情况下，这些子句可以帮助优化器做出正确的选择。USE
为它取一个别名，以便在SELECT语句中的其他地方引用这个“表”：
alias_name 语法。别名机制使我们能够在查询命令中的其他地方利用别名来引用表里的列。
表引用语法实际上看起来像下面这个样子：
使用针对分区表的PARTITION子句，以表明需要从那里查询行的分区或子分区。也就是说，完整的
“tbl_name表里的所有列”。
GROUP BY、ORDER BY 和 HAVING子句里。但是，不能在WHERE子句里使用列的别名。
name 语法（AS关键字是可选的）给输出列起一个别名。该别名将成为输出中的列名，并可以用在
分隔开。输出列可以是表中的列，也可以是表达式（包括标量子查询)。还可以利用 ASalias_
索引提示只用于选取行和连接表，不用于处理ORDER BY 或GROUP BY子句。如果只想将索引
还可以在 FROM子句里使用子查询的结果集来充当表，但是必须把子查询用方括号括起来，并
index_list应该是由一个或多个以逗号分隔的索引名构成的一个列表，例外情况是：将
特殊符号*表示的是“FROM子句所指定的那个表里的所有列”，而tbl_name.*表示的是
子句USE INDEX、IGNORE INDEX 和 FORCE INDEX 的作用是为优化器提供索引提示。在优化
SELECT*FROM (SELECT 1)AS t;
如果需要在 FROM子句里为表取别名，则可以使用tbl_name alias_name或者tbl_name AS
每个 tbl_name都可以有一个别名或者索引提示。此外，自MySQL 5.6.2起，SELECT 语句支持
FROM子句用来列出SELECT语句将从中选取行的表。MySQL支持下面这种连接语法：
Select_expr表达式列举 SELECT 语句将要返回的输出列，多个输出列之间要用逗号彼此
tbl_factor:
tbl_ref:
LUSE
[[AS]
(index_list)]
C
tbl_refNATURAL[(LEFT
b1
tbl
OJ tbl_ref LEFT OUTER JOIN tbl_ref ON conditional_expr)
alias
ref
ref
IGNORE
uery)[As]alias_name
{LEFT
name
FORCE)(INDEXIKEY)
RIGHT)
JOIN
tbl
ref
E.1.SQL语句语法（非复合语句）
condition
695
---
## Page 716
不必要的排序开销），可以使用ORDERBY NULL子句。
果的排序顺序将由ORDERBY子句决定。要想禁用GROUP BY子句的这种隐式排序效果（这将减少
增顺序。这两个关键字还可以用在GROUP BY子句里，因为 MySQL中的 GROUP BY子句不仅会对
该列应该按照递增或递减的顺序来排序。如果没有这两个关键字中的任何一个，则列将默认使用递
式来分组，或根据表达式结果排序。例如，ORDER BYRAND（）是以随机顺序为行排序的。
列的位置序号是从1开始的无符号整数，但使用列的位置是非标准的，已经弃用。还可以用表达
在这两个子句中，可以使用列名、列的别名，或者列在select_expr表达式里的位置来引用列
的汇总函数时，就需要使用 GROUP BY子句。ORDER BYcol_list 规定结果集应按指定列排序。
所给定的列对结果集里的行进行归组。当在 select_expr子句里使用了像CoUNT（)或 MAX（）这样
进
件表达式的行将不会出现在SELECT语句的查询结果里。
于WHERE、HAVING或LIMIT 子句。
尔模式搜索除外。
和FORCEINDEX。
696
在GROUP BY子句的末尾还可以给出WITH ROLLUP。它将在每个行分组的后面加上一个关于该
一步限制。列别名是不允许用在WHERE子句里的。
在GROUPBY或ORDER BY子句里，
GROUPBY子句的语法和ORDERBY子句的相似。
连接型 SELECT 语句将按照以下描述从给定的表选取行。实际返回到客户端的行的个数会受限
MySQL 将根据HAVING子句所给出的次要条件表达式，对那些已经满足WHERE子句所给出的
MySQL将根据WHERE子句所给出的条件表达式从FROM子句所列举的表里选取行。不满足该条
口
口
口
口
口
口
口
每个 tbl_name引用允许有多个索引提示。不过，对于同一个引用不能同时使用USE INDEX
逗号连接的优先级低于其他类型的连接。混合使用逗号连接和其他类型的连接有可能导致
RIGHTJOIN类型与相应的LEFTJOIN类型相似，只是把表的角色对调了一下。
同时出现在两个表里的列全都列举出来。
NATURAL LEFT JOIN 等价于LEFT JOIN USING（col_list)，其中，col_list 必须把
的 SELECT语句中。
ODBC标准保持兼容而引入的。OJ语法中的花括号不是元字符，
OUTERJOIN和LEFTJOIN是等效的。OJ语法与此类似，这个语法是为了使MySQL与
右表里没有与之匹配的行也是如此。当没有匹配的时候，来自右表的列将被返回为NULL
在从表连接的表中检索行时，LEFTJOIN将强制性地为左表里的每一个行生成一个行，哪怕
的表中都出现的列的名字。
达式的形式。col_list由一个或多个以逗号分隔的列名组成，每个列名必须是在两个连接
USING（）子句来约束表间的匹配。
与逗号操作符不同，使用JOIN、CROSSJOIN或INNERJOIN执行的连接可以用ON或
序来连接表。如果你认为MySQL优化器做出的选择不是最佳的，可以使用此选项。
合。如果没有 NO 或USING子句，则使用 JOIN、CROSS JOIN或CROSS JOIN 与使用逗号
如果只列出一个表，则 SELECT会从该表里检索行。
“Unknown column”（未知列）错误。把逗号替换为INNER JOIN通常可以解决这样的问题。
（col_list）子句中的条件来确定的。
等价。STRAIGHT_JOIN与此类似，但强制MySQL优化器必须按表在FROM子句中的先后顺
直。表名后面的ON或USING（)子句与JOIN、CROSS JOIN或INNER JOIN里的一样。LEFT
附录ESQL语法参考
，可以在任何一个列名后面加上ASC或DESC关键字以表明
conditional_expr是可以用在WHERE子句中的表
。GROUP BY col_list子句将根据col_list
，结果集还要受到HAVING和LIMIT子句的
，它们必须原样出现在相应
---
## Page 717
如果查询优化器发现没有用于检查行的索引，就必须扫描（并锁定）表中的所有行。
InnoDB表）上使用FORUPDATE子句将在选取的行上施加一个独占性的写锁。使用LOCKINSHARE
保持到当前事务被提交或者回滚为止。这些锁定在多语句事务里非常有用。在支持行级锁定的表（如
须有一个与之对应的变量。
语句的存储例程的某个参数或局部变量。这种查询必须选取且只能选取一个行，而每个输出列都必
那些变量。每一个变量都可以是一个@var_name形式的用户定义变量，也可以是包含这条SELECT
行服务器的那个账户。
在，并且该文件是由服务器在运行服务器的主机上使用全局访问模式创建的。该文件的所有权设置为运
LOCAL选项的LOADDATA语句的相同。在执行此操作时，必须拥有FILE权限，输出文件必须尚不存
如果想将BLOB数据（如图像或其他二进制数据）写到文件，那么它会有用。
写出整个内容期间不会进行任何解释。也就是说，它写入的是不带分隔符、引号和结束符的原始值。
LOADDATA语句的相应子句的相同。更多信息请参考LOADDATA条目。
如果要指定这些值被写入时使用的字符集，则需要包含一个CHARACTERSET子句。如果该子句被省略，
select_expr列表之后。如果使用了USE子句，则该语句就不能用作内嵌的 SELECT。
据的特性。更多信息请参考5.3节。
的代码模块里去。可以通过PROCEDURE ANALYSE（)子句来获得该SELECT语句所选取的列里的数
集里的前m个行，返回随后的n个行。
参数，这些参数必须是整数常数。LIMIT n将返回结果集里的前n个行。LIMIT m，n将跳过结果
和优化。
法的，则应该把它放在WHERE子句里，因为只有WHERE子句里的条件表达式才会得到优化器的分析
WHERE子句里的条件表达式。但是，如果某个条件表达式在WHERE子句里或HAVING子句里都是合
行将不会出现在 SELECT 语句的查询结果里。HAVING子句非常适合因带有汇总函数而无法用在
主要条件表达式（并且已根据 GROUP BY子句分组）的行做进一步的筛选。不满足 HAVING 条件的
FORUPDATE 和LOCK IN SHARE MODE子句将锁定 SELECT 语句所选取的行。这些锁定会强制
如果INTO关键字的后面是一个以逗号分隔的变量名列表，则SELECT语句将把检索结果存入
INTOOUTFILE和INTODUMPFILE 选项都是用来确定输出文件位置的，所使用的规则与不带
INTO DUMPFILE·file_name'与INTO OUTFILE类似，但是它只会写入单个行，并且在输出
INTO格式指定了查询结果的目的地。
PROCEDURE子句用于指定一个存储过程。结果集里的数据在被返回到客户端之前，会先被发送
LIMIT子句的用途是从结果集里进一步选取它的某个组成部分。这个子句可以带一个或者两个
口查看member表里的行涉及哪些州：
口执行相同的查询，但是按出生日期排序：
口
口
口
下面是一些演示 SELECT语句各种用法的示例。更多示例请参考第1章和第2章。
把出生日期晚于1900-01-01·的总统查出来：
SELECT *FROM president ORDER BY last_name,first_name;
选取全部内容，但是按名字排序：
SELECT * FROM president;
选取某表的全部内容：
在语句里指定INTO的另一个比较靠前的位置是紧跟在
E.1
1SQL语句语法（非复合语句）
697
---
## Page 718
级变量：
用下面两种形式中的任何一种：
有 SUPER权限的用户才能修改全局级变量。
得到一个初始的会话级变量设置。任何一个客户端都可以修改它自己的会话级变量，但只有那些拥
对于那些同时存在于系统级、会话级的变量，每个新建的客户连接都会根据相应的全局级变量的值
提供的动态系统变量分为两个级别：全局级系统变量的有效范围是整个服务器，它们对所有的客户
定的是要赋给变量的值。赋值运算符可以是=或者是：=。
里单独介绍。
SET也可用于一些其他设置，本条目后面将会介绍。
附录D提供了有关系统变量和用户定义变量的信息。E.2.2节描述了存储程序局部变量的声明语法。
698
设置系统变量的语法有很多种。如果要设置全局级变量（以全局的 sql_mode 值为例），则可以
示单个变量值，则可以使用SELECT：
如果想要查看各个系统变量的值，则可以使用 SHOWVARIABLES 语句。你也可以检查
如果在SET语句里没有给出GLOBAL、SESSION或LOCAL关键字，则SET语句将默认修改会话
SET还可以给系统变量赋值，其中许多是动态的，你可以在服务器仍在运行时修改它们。MySQL
当 SET用于为变量赋值时，每个赋值语句中的var_name 就是待赋值的变量，expr表达式指
下面是可以通过SET语句加以控制的一些其他设置。
关于使用系统变量的更多信息请参考12.3.1节。
SELECT @@GLOBAL.sql_mode, @@SESSION.sql_mode,
INFORMATION_SCHEMA 库里的 GLOBAL_VARIABLES 表和 SESSION_VARIABLES 表。如果要显
也可以把LOCAL 用作 SESSION 的同义词。
如果要设置会话级变量，则需要用SESSION代替GLOBAL：
SET语句可以用于对用户定义的变量（它们使用@var_name语法来指定）进行赋值：
其他以 SET开头的语句（SETPASSWORD 和 SETTRANSACTION）将在本附录后面的其他条目
SET语句用来对系统变量、用户定义变量和存储程序参数（或存储程序局部变量）进行赋值。
口把某次考试前5名学生选取出来：
口选取 member表里的行并把它们的列写到一个文件里，各列值之间以逗号分隔：
SET @day=CURDATE（),@time=CURTIME（）;
·SET
assignment:var_name(=I:=}expr
SET assignment[,assignment]...
SELECT * FROM score WHERE event_id = 9 ORDER BY sCore DESC LIMIT 5;
SELECT DISTINCT state FROM member;
附录ESQL语法参考
@@LOCAL.sql_mode;
---
## Page 719
应用到事务里。
进行老式（MySQL4.1版之前）加密。如果没有使用这两个函数中的任何一个，则相应的
定账户的密码，指定格式为'user_name'@'host_name"，如 13.2.1.1节所述。
UPDATE权限。如果启用了系统变量read_only，则必须拥有SUPER权限。
匿名用户身份连接服务器的情况例外。如果想要修改其他账户的密码，则必须对mysql数据库拥有
encrypted_pass_val值必须是一个已经加过密的密码字符串。
密码值'paSS_va1应该用PASSWORD（）函数进行标准化加密，或者使用OLD_PASSWORD（）函数
如果不带FOR子句，则这条语句将设置当前账户的密码。如果带有FOR子句，那么它会设置指
使用GLOBAL 选项时，必须拥有 SUPER 权限。任何客户端都可以更改自己的会话级特性或下一
口
口如果指定了GLOBAL选项，那么它将设置全局特性（服务器范围的），并且它们会成为此后
语句作用范围的设置方式如下。
此语句用来设置事务处理特性。它可以接受一个可选的作用范围指示器，以指明这些特性如何
·SET TRANSACTION
SETPASSWORD 语句用来修改某个 MySQL账户的密码。你总是可以修改自己的密码，但是以
·SET PASSWORD
 SET NAMES {charset [COLLATE collation]I DEFAULT}
 SET CHARACTER SET {charsetI DEFAULT}
trans_characteristic:
SET[GLOBALISESSION]TRANSACTION
事务正在处理中，则不允许此执行设置。