### Identity-Based Encryption Without Redundancy

#### 4.2 Decryption Process
If a previously defined value is returned, the process terminates. Otherwise, B checks if the auxiliary list \( L_2 \) contains an entry of the form \((U, V_1, \ldots, V_t, L, ?, \kappa, \gamma, QID_i)\) for some pair \((\kappa, \gamma) \in \{0, 1\}^\lambda \times G_2\) and some \( QID_i \in G_1 \).

- **Verification Step:**
  - If such an entry exists, B checks if the decision oracle \( ODBDH(P, QID_i, U, P_{pub}, \gamma / \omega) = 1 \) for each triple \((\kappa, \gamma, QID_i)\).
  - If the decision oracle positively answers for one of them, the corresponding \(\kappa\) is returned as the hash value.
  - Otherwise, B returns a randomly sampled string \(\kappa \leftarrow_R \{0, 1\}^\lambda\).

In both cases, B stores the information \((U, V_1, \ldots, V_t, L, \omega, \kappa)\) in \( L_2 \).

#### 4.3 Challenge Phase
In the challenge phase, A produces two messages \( M_0, M_1 \in \{0, 1\}^n \). The simulator B computes:
- \( U^* = cP \)
- \( V^*_j = l^*_j(cP) \) for \( j \in \{1, \ldots, t\} \)
- The corresponding label \( L^* \) where \( l^*_j = l_j P - Q \) for \( j \in \{1, \ldots, t\} \)

B then chooses a random \(\kappa^* \leftarrow_R \{0, 1\}^\lambda\) and computes \( W^* = E_{\kappa^*}(M_d) \) for \( d \leftarrow_R \{0, 1\} \). The challenge ciphertext is set to \( C^* = (U^*, V^*_1, \ldots, V^*_t, W^*, L^*) \).

- **Abort Condition:**
  - In the unlikely event (with probability less than \( q_D / 2^k \)) that \( C^* \) was queried to the decryption oracle during the find stage, B aborts.

All queries of the guess stage are processed as in the find stage, and A eventually produces a bit \( d' \). From a similar analysis to Theorem 1, we find that the relevant query \( H_2(U^*, V^*_1, \ldots, V^*_t, L^*, \omega^*) \), where \(\omega^* = e(P, P)^{abc}\), is very likely to be made by A during the simulation. The Gap-BDH solution can thus be detected when handling \( H_2 \) queries.

#### 5. Alternative Method to Avoid Re-encryption in IBE
This section presents an alternative method to achieve chosen-ciphertext security in the original IBE system [10] without requiring re-encryption for validity checking upon decryption and without encoding a piece of ciphertext as a long \( G_2 \) element. This method introduces minimal redundancy in ciphertexts (only 160 additional bits compared to BasicIdent) and extends a construction originally designed by Bellare and Rogaway [6] for trapdoor permutations.

- **Construction:**
  - The construction produces ciphertexts of the form \( E(m, r) = (f(r), m \oplus G(r), H(m, r)) \), where \( r \) denotes a random coin, \( f \) is a trapdoor permutation, and \( G, H \) are random oracles.
  - This construction can be instantiated with more general number-theoretic primitives, such as the El Gamal [19] cryptosystem and the Boneh-Franklin identity-based encryption scheme. The resulting scheme is called XBR-IBE (eXtended Bellare-Rogaway like IBE).

- **Security:**
  - The security of XBR-IBE relies on the Gap-BDH assumption. The security proof is omitted here due to space limitations but will be provided in the full version of this paper.

**Theorem 3:**
If an IND-ID-CCA2 adversary A has advantage \(\epsilon\) against XBR-IBE in time \(\tau\) while making \( q_{h1} \) queries to oracles \( h_1 \), \( q_{h2} \) queries to oracles \( h_2 \), \( q_{h3} \) queries to oracles \( h_3 \), \( q_D \) decryption queries, and \( q_{KE} \) private key queries, then a PPT algorithm B can solve the Gap-BDH problem with advantage \(\epsilon' \geq (e(q_{KE} + 1))^{-1} (\epsilon - q_D / 2^{k-1})\) within time \(\tau' \leq \tau + (q_{h1} + q_{KE}) \tau_{mult} + 2(q_{h2} + q_{h3}) \Phi\), where \(\tau_{mult}\) is the cost of a scalar multiplication in \( G_1 \) and \(\Phi\) is the cost of a call to the DBDH oracle.

#### 5.1 XBR-IBE Scheme
- **Setup:**
  - The setup is the same as in Hybrid-IBE, except no cipher is needed, and hash functions are \( H_1 : \{0, 1\}^* \rightarrow G_1 \), \( H_2 : \{0, 1\}^* \rightarrow \{0, 1\}^{k_1} \), and \( H_3 : G_2 \rightarrow \{0, 1\}^n \), where \( n \) is the size of plaintexts and \( k_1 \) is a security parameter polynomial in \( k = \log(|G_1|) \).

- **Keygen:**
  - Key generation is the same as in Hybrid-IBE and Hybrid-IBE2.

- **Encrypt:**
  - To encrypt a message \( M \) using an identity \( ID \in \{0, 1\}^* \):
    - Compute \( Q_{ID} = H_1(ID) \in G_1 \)
    - Pick a random \( r \leftarrow_R Z_q^* \)
    - Output the ciphertext \( C = (rP, m \oplus H_3(g^{r}_{ID}), H_2(m || rP || ID || g^{r}_{ID})) \), where \( g^{r}_{ID} = e(P_{pub}, Q_{ID})^r \in G_2 \).

- **Decrypt:**
  - Given \( C = (U, V, W) \), compute \( \omega = e(U, d_{ID}) \) and \( m = V \oplus H_3(\omega) \in \{0, 1\}^n \)
  - Output \( m \in \{0, 1\}^n \) if \( W = H_2(m || U || ID || \omega) \) and \(\perp\) otherwise.

#### 6. Conclusion
We presented two methods to avoid re-encryption in chosen-ciphertext secure IBE systems. The hybrid construction yields more compact ciphertexts due to the absence of redundancies. We also explained how to shorten ciphertexts produced by a multiple-receiver IBE scheme. Finally, we provided an example of a secure public key encryption scheme that does not require validity checking at decryption, even though the encryption mapping is not surjective.

#### Acknowledgements
Thanks to Damien Vergnaud for his helpful comments and to the anonymous referees for their useful feedback.

#### References
[References remain the same as provided in the original text.]