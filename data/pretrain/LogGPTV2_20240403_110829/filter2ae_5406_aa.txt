## 前言
腾讯云鼎实验室主办的`2020Geekpwn`比赛在`7.12.22:00`结束，我们队伍最终获得第五名的成绩，这个比赛难度相对比较大且压力主要在队伍的`pwner`身上，可以说是`pwner`的盛宴。
比赛设有四道难度比较高`G-escape`题目，也就是四道逃逸类型的题目，`childshell`，`Vimu`，`Easykernelvm`，`Kimu`，最终解出数分别为`6`，`2`，`1`，`0`，我在比赛中有幸第一个解出了`Vimu`，肝了小一天半，最后能解出还是很开心的，在这里记录一下解题过程。这道题其实说难也有难度，做完再回头看的话，说简单也简单，这个每个人感觉可能都不同，此外我本人接触`Qemu-Escape`的时间也很短，如有错误或疏漏的地方还请大佬们在评论区指出。
## 解题过程
### 环境配置
题目给了`Dockerfile`，是`18.04`的标准版本，所以我还是用了我自己本地的`docker`，毕竟调试环境都配好了，比较方便，然后尝试运行，提示缺库，然后自行上网查找补齐即可，也没啥好说的，我大概补了七八个库才成功跑起来。。。
### 逆向
查看题目的启动脚本，发现其启动了一个自定义设备`vin`，根据经验可知此应该为存在漏洞的自定义设备，把`qemu-systen-x86_64`放入`ida`中查看，发现被`strip`了，函数名和结构体都无了，所以必须把设备`vin`相关的函数给提取出来才能进一步分析，我这里是搜索特征字符串然后对比着[edu.c](https://github.com/qemu/qemu/blob/master/hw/misc/edu.c)源码提取出的函数：
此外我还自己照着标准的`PCIDeviceClass`建了一个结构体，方便看`device_id`和`vender_id`：
### 函数与漏洞分析
`vin_instance_init`函数伪代码如下：
    __int64 __fastcall vin_instance_init(__int64 a1)
    {
      __int64 v1; // rax
      v1 = object_dynamic_cast_assert(
             a1,
             &off_9FBFE6,
             "/home/v1nke/Desktop/qemu/pwn/qemu-4.0.0/hw/misc/vin.c",
             307LL,
             "vin_instance_init");
      *(_QWORD *)(v1 + 0x1AB0) = 0xFFFFFFFLL;
      *(_DWORD *)(v1 + 0x1AC0) = 1;
      *(_QWORD *)(v1 + 0x1AC8) = 0LL;
      *(_QWORD *)(v1 + 0x1AB8) = mmap64(0LL, (size_t)&stru_10000, 3, 34, -1, 0LL);
      return object_property_add(a1, (__int64)"dma_mask");
    }
可以看到实例化设备结构体时`0x1AB0`，`0x1AB8`，`0x1AC0`，`0x1AC8`四个位置的元素比较特殊，需要引起注意，其中`0x1AB8`处装有一个`mmap64`申请出来的`0x10000`字节大小的内存块起始地址，具有`rw`权限，且这个地址是随机的。
`vin_mmio_read`函数伪代码如下：
    __int64 __fastcall vin_mmio_read(__int64 a1, int addr, unsigned int size)
    {
      __int64 dest; // [rsp+28h] [rbp-18h]
      __int64 opaque; // [rsp+30h] [rbp-10h]
      unsigned __int64 v6; // [rsp+38h] [rbp-8h]
      v6 = __readfsqword(0x28u);
      opaque = a1;
      dest = 0LL;
      if ( BYTE2(addr) == 6 && (unsigned __int16)addr = av->topchunk +
chunksize(av->top)`，我们的`fakechunk`是在`mmap64`地址上的，这个地址虽然是随机的，但是必定在`ld.so`的加载位置之后，所以其地址必定是大于`main_arena`的`topchunk+size(topchunk)`的地址的，所以如果放不进`fastbin`，走到这里必定会挂掉，这就是没法放进`unsortedbin`的原因所在。
所以想直接把`chunk`放入`unsortedbin`的尝试失败了。
##### 思路二
直接放不行，那么尝试间接放入，先放入`main_arena`的`fastbin`中，然后想办法触发`main_arena`的`malloc_consolidate`，使其将`fastbin`中的`chunk`整理进`smallbin`中再进行`leak`出来。
查阅资料得知，在`__libc_malloc`的`arena_get`函数理论上是可能返回`main_arena`指针的，但是我写了个`for`循环，连续1000次`malloc(0x500)`，尝试了很久，都没办法触发到。。。可能原因是当前线程的`arena`是处于可用状态的，所以就直接返回当前线程的`arena`了，只有在本线程被`lock`了，才有可能返回其他的`arena`？？具体原因我也不是很清楚，写多线程竞争`malloc`是否可行？？感觉不是很靠谱。。我自己是失败了。
想把`fakechunk`间接放入`unsortedbin`也失败了。
##### 思路三
既然泄露`libc`失败了，那就看看没有`libc`能不能利用呢，观察发现有一块`rwx`的区域，且和我们的`thread_heap`的距离有可能间隔固定为`0x6000000`，（这张图我截的是关了`alsr`的，是固定为`0x6000000`，开了以后会变，但仍然有概率是`0x6000000`，大概五六次可以撞见一次？反正是有的）。
首先是如何泄露`thread_heap`基址，因为程序比较复杂和多线程的原因，堆极度混乱，我顺手截了几张图：
几乎每次的各种链里的`chunk`都不同，所以没办法用`UAF`泄露出一个稳定的`chunk`地址，但是因为有前面`free`里面寻找`malloc_state`方法的提示，可以想到我们只需要`malloc_state`的地址，不需要关注具体某一个`chunk`的地址，所以泄露出任意一个`chunk`地址，然后与`0xffffff000000`按位与即可获得当前线程`malloc_state`的起始地址。
然后我们加上`0x6000000`就有概率获取`rwx`页的地址，然后用一次任意地址分配+写的机会去往里面填充`shellcode`，但是后续我想不到如何将程序劫持到`shellcode`上去。。。
注：此块`rwx`页的申请并非故意留的后门，为`tcg/translate-all.c`设备申请出来作为`dynamic translator
buffer`用的：
##### 思路四
说是只有一次机会任意地址分配+写，但实际上是只有一次任意地址分配的机会，然后有无限次向其中写的机会，所以可以想到能否先用这一次任意地址分配去分配到设备结构体，然后不断用写去将`0x1AC0`赋值为`1`，进而突破限制造成无限次任意地址分配，然后配合思路三去做。
要是设备结构体是分配在线程堆上的话，此方法应该是可行的，然而调试发现其位于`main_arena`上，啊这。
##### 突破
到这里已经过去一天的时间了。。。第二天起来还是没有啥思路，整理了一下思绪和现在可以做到的事情：
我们只能泄露出`mmap64`的地址和`thread_arena`的地址。
因为只有`thread_arena`的地址是现阶段可以得到的，所以我抱着试一试的态度去看了下`thread_arena`中的数据，没想到有意外收获：
在`thread_heap`固定偏移的地方存有稳定的`elfbase`地址，而且有很多个。。。说实话我不知道这些数据是做什么的，但是线程的`malloc_state`和`heap_info`中是不存在这种数据的：
`malloc_state`：
    struct malloc_state
    {
      /* Serialize access.  */
      mutex_t mutex;
      /* Flags (formerly in max_fast).  */
      int flags;
      /* Fastbins */
      mfastbinptr fastbinsY[NFASTBINS];
      /* Base of the topmost chunk -- not otherwise kept in a bin */
      mchunkptr top;
      /* The remainder from the most recent split of a small request */
      mchunkptr last_remainder;
      /* Normal bins packed as described above */
      mchunkptr bins[NBINS * 2 - 2];
      /* Bitmap of bins */
      unsigned int binmap[BINMAPSIZE];
      /* Linked list */
      struct malloc_state *next;
      /* Linked list for free arenas.  */
      struct malloc_state *next_free;
      /* Memory allocated from the system in this arena.  */
      INTERNAL_SIZE_T system_mem;
      INTERNAL_SIZE_T max_system_mem;
    };