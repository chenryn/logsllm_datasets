Servlet的线程安全问题
引⼊
⾸先看看这样的代码，有什么问题
这⾥既要求cmd不能包含 Calculator 又必须要包含 Calculator ，能做到吗，当然是可以
的
Servlet的多线程机制
Servlet实际上是⼀个单件，当我们第⼀次请求某个Servlet时，Servlet容器将会根据web.xml配
置⽂件或者是注解实例化这个Servlet类，之后如果又有新的客户端请求该Servlet时，则⼀般不
会再实例化该Servlet类，这说明了什么呢？简单来说，当多个⽤户⼀起访问时，得到的其实是
同⼀个Servlet实例，这样的话，他们对实例的成员变量的修改其实会影响到别⼈，所以在开发
的时候如果没有注意这个问题往往会有⼀些额安全问题，⽽往往Servlet的线程安全问题主要是
由于实例变量使⽤不当⽽引起
因此我们再看上⾯的代码，很明显我们看到了这个 status 状态变量是实例变量，当然这⾥
为了突出并发的效果，这⾥加了⼀个延时，这⾥简简单单⽤python实现竞争，也不必上多线程
了简单点
如何修复
1.实现 SingleThreadModel 接⼜
url = "http://127.0.0.1:8080/?cmd=open -na Calculator"
while 1:
    r = requests.get(url)
    if "Cal" in r.text:
        print(r.text)
url = "http://127.0.0.1:8080/?cmd=ls"
while 1:
    r = requests.get(url)
该接⼜指定了系统如何处理对同⼀个Servlet的调⽤。如果⼀个Servlet被这个接⼜指定，那么
在这个Servlet中的service⽅法将不会有两个线程被同时执⾏，当然也就不存在线程安全的问
题。这种⽅法只要继承这个接⼜就⾏了,因此将我们上⾯的代码改为
这样你觉得就完全安全了吗？？答案也不是，如果我们将上⾯的对状态的定义加上static呢
lol，还是可以成功，原因是SingleThreadModel不会解决所有的线程安全隐患。会话属性和静
态变量仍然可以被多线程的多请求同时访问
还有⼀点很重要该接⼜在Servlet API 2.4中将不推荐使⽤。
2.避免使⽤成员变量
既然问题出⾃成员变量，那么我们就尽量避免去使⽤它
将上⾯的代码改为
public class TestServlet extends HttpServlet implements SingleThreadModel 
public static boolean status;
public class TestServlet extends HttpServlet{
//    public  boolean status;
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {
3.同步对共享数据的操作
使⽤synchronized 关键字能保证⼀次只有⼀个线程可以访问被保护的区段，因此可以将代码写
为
        boolean status = true;
        String cmd = req.getParameter("cmd");
        if (cmd.contains("Calculator")) {
            status = false;
            try {
                Thread.sleep(1000);
            }catch (Exception e){
            }
        }
        if (!status) {
            return;
        }
        if (cmd.contains("Calculator")){
            resp.getWriter().write(cmd);
        }
    }
}
public class TestServlet extends HttpServlet{
    public  boolean status;
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {
        String cmd = req.getParameter("cmd");
        boolean status;
        synchronized(this) {
            status = true;
            if (cmd.contains("Calculator")) {
思考与⼩结
但是如果利⽤上⾯三种⽅式去修复，这样就完全没问题了吗？并不是
⽐如实现SingleThreadModel以及在程序中使⽤同步来保护要使⽤的共享的数据，在实际业务
当中这也会使得我们系统的性能⼤⼤下降，这也是我们不太希望看到的，前者为每个新的请
求创建⼀个单独的Servlet实例，这将引起⼤量的系统开销，⽽后者被同步的代码块在同⼀时刻
也只能有⼀个线程执⾏它，这也会导致在⾼并发的情况下，同时处理请求的吞吐量显著的降
低
因此，在Serlet中避免使⽤实例变量或许是更好的选择，但如果⽆法避免，但如果⽆法避免，
也应该尽量做到去同步可⽤性最⼩的代码路径
参考⽂章
https://www.cnblogs.com/chanshuyi/p/5052426.html
https://zhuanlan.zhihu.com/p/93708538
https://www.jianshu.com/p/06260e0667a9
                status = false;
                try {
                    Thread.sleep(5000);
                } catch (Exception e) {
                }
            }
        }
        if (!status) {
            return;
        }
        if (cmd.contains("Calculator")){
            resp.getWriter().write(cmd);
        }
    }
}