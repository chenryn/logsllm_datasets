title:POWERALERT: Integrity Checking Using Power Measurement and a Game-Theoretic
Strategy
author:Ahmed M. Fawaz and
Mohammad A. Noureddine and
William H. Sanders
2018 48th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
POWERALERT: Integrity Checking using Power
Measurement and a Game-Theoretic Strategy
Ahmed M. Fawaz, Mohammad A. Noureddine, and William H. Sanders
University of Illinois at Urbana-Champaign
{afawaz2, nouredd2, whs} @illinois.edu
Abstract—We propose POWERALERT, an efﬁcient external
integrity checker for untrusted hosts. Current attestation systems
suffer from shortcomings, including requiring a complete check-
sum of the code segment, from being static, use of timing infor-
mation sourced from the untrusted machine, or using imprecise
timing information such as network round-trip time. We address
those shortcomings by (1) using power measurements from the
host to ensure that the checking code is executed and (2) checking
a subset of the kernel space over an extended period. We compare
the power measurement against a learned power model of the
execution of the machine and validate that the execution was
not tampered. Finally, POWERALERT randomizes the integrity
checking program to prevent the attacker from adapting. We
model the interaction between POWERALERT and an attacker
as a time-continuous game. The Nash equilibrium strategy of the
game shows that POWERALERT has two optimal strategy choices:
(1) aggressive checking that forces the attacker into hiding, or (2)
slow checking that minimizes cost. We implement a prototype of
POWERALERT using Raspberry Pi and evaluate the performance
of the integrity checking program generation.
I. INTRODUCTION
Computer systems manage most aspects of our lives includ-
ing those related to critical infrastructures, communication,
ﬁnance, and healthcare. Those computers enable better control
of the systems achieving more efﬁciency while promising
reliability and security. In reality, the promise of security is
elusive and is often disrupted by new exploits and attacks.
Over time, those attacks are becoming more sophisticated,
targeted, and elusive. Since most systems that are intended
to be secure may be compromised by some attacker, intrusion
resiliency as a protection strategy has a better chance at im-
proving security than protection alone. The resiliency strategy
considers compromises inevitable; it protects the best it can
but moves to detect attacks and devises methods to control a
compromise while maintaining an acceptable level of service.
Critical to such a strategy is the ability to detect compromises
and devise methods to ﬁnd optimal responses that modify the
system to maintain security and service goals.
Detection of compromise is conditioned on the ability to
guarantee that sensors that monitor hosts are not themselves
compromised. Sophisticated attacks, known as advanced per-
sistent threats (APTs), target high-valued assets [16]. APTs,
often meticulously planned, are slow and stealthy operations
that span months to years. As seen in previous attacks, such
as Stuxnet, APTs maintain stealthiness by using custom attack
tools, compromising sensors to thwart detection, and using
rootkits to change kernel operations.
As such, resiliency strategies are vulnerable to a well-
planned adversary. The adversary will attempt to manipulate
monitoring information by tampering with sensors, necessary
for intrusion detection, leading the defender to believe in a
false state of security. Thus, it is essential to validate the
integrity of software running on an untrusted machine whose
aim is to provide resiliency. Checking software integrity is
challenging when faced with a dedicated attacker; the attacker
will learn from previous experience and subvert the detection
methods; she will manipulate measurements that originate
from within the untrusted machine; she will attempt to hide
to avoid detection. Even in the presence of trusted hardware
within the untrusted machine, an attacker can still manipulate
the runtime state of the machine after boot, or also exploit the
trusted base to manipulate the stored trusted state. We propose
a system that tackles the following question: How to validate
the integrity of software against a slow and stealthy attacker
without any trusted components in the machine?
We make the following requirements for the solution to
our problem: it should (1) be independent of the machine
to be checked, (2) use a trustworthy base, as opposed to a
trusted one, that cannot be exploited by an attacker, and (3)
allow for low-cost runtime integrity checking. Today’s golden
standard in security uses in-machine tamper-resistant chips
(such as TPM or AMT) that hold secrets to generate chains
of trust. Those trusted components are assumed to be uncom-
promisable; a property that we cannot verify. Thus, solutions
that are dependent on such hardware are still vulnerable to
undiscovered exploits which raises the security bar but does
not alleviate the problem.
To address the problem, we propose POWERALERT, a low-
cost out-of-box integrity checker that uses the physics of the
machine as a trustworthy base. Speciﬁcally, POWERALERT
directly measures the current drawn by the processor and
uses normal behavior models to validate the behavior of the
untrusted device; POWERALERT suspects the presence of an
attacker if the measured behavior deviates from the normal
model. This is based on the observation that an attacker at-
tempting evasive or deceptive maneuvers will have to use extra
energy thus drawing additional current. Traditional techniques
that use side-channel information to validate the behavior of
an untrusted machine are ineffective against persistent and
adaptive attackers; they used network timing information [19]
which is inaccurate as it depends on network conditions and
can thus be subverted by a smart attacker. In our work, POW-
2158-3927/18/$31.00 ©2018 IEEE
DOI 10.1109/DSN.2018.00059
514
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:32:10 UTC from IEEE Xplore.  Restrictions apply. 
ERALERT uses the current signal as a trustworthy and accurate
side-channel, sampled at 1 million samples per second, to
measure the energy used- and the time needed to perform
integrity checking.
POWERALERT tackles the classical problem of the static
defender, in which an adaptive attacker can learn the protection
mechanism and evade or subvert the defenses (Section VIII).
In our work, we level
the playing ﬁeld by introducing
three main contributions. First, we randomly generate a new
integrity-checking program (IC-program) each time we at-
tempt to verify the integrity of a machine; POWERALERT
generates the IC-programs in a way that is unpredictable to the
attacker (Section IV). Second, each time the POWERALERT-
protocol is initiated, we set each IC-program to check a small
subset of the system’s memory. The subset changes each time a
new IC-program is generated; such that over the lifetime of the
machine, the whole space of addresses is checked many times.
This helps in achieving two desirable goals: (1) it avoids the
problem of the attacker predicting the fraction of the memory
we are checking and taking precautions and (2) it minimizes
the performance overhead needed to perform continuous-time
integrity checking.
Operationally, each time POWERALERT checks the integrity
initiates the POWERALERT-protocol. It
of the machine it
sends a randomly generated IC-program to the computer and
measures the current drawn by the processor (Section III).
During execution of the POWERALERT-protocol, the untrusted
machine is expected to load the program, to run it, and to
return the output. POWERALERT validates that the untrusted
machine did not deviate for the expected script by (1) checking
the output of the IC-program, and (2) comparing the frequency
spectrum and timing information extracted from the measured
current signal to a learned energy model (Section V). Any
deviation serves as an indication that the untrusted machine
did not perform the expected tasks.
Finally, we alleviate the problem of an attacker hiding
its traces every time the POWERALERT-protocol is started
by ﬁnding the defender’s optimal initiation strategy. We ﬁnd
the optimal strategy by modeling the interactions between
the defender and the attacker as a continuous- time game
(Section VI). In the game, the attacker attempts to evade the
defender’s integrity checks by disabling its malicious activities
while the defender has to balance the frequency of its checks
along with the performance overheads that the target machine
suffers. Our analysis of the Nash equilibria of the game
reveals that the defender can control the attacker’s behavior by
changing the frequency of her integrity checks. We observer
that (1) the defender can force the attacker to risk detection by
decreasing the frequency of the checks, and (2) the defender
can force the attacker to hide more often by increasing the
rate of the checks. In the former case, the defender intends to
maximize the detection rate while in the later, she minimizes
her checking costs.
II. SYSTEM DESCRIPTION
In order to address the problem of dynamic integrity check-
ing of software (mainly the static memory in the kernel) on an
untrusted machine, we propose POWERALERT, an out-of-box
device that checks the integrity of an untrusted machine. In this
section, we describe our approach for the solution explaining
the architecture of POWERALERT, protection assumptions, and
the threat model.
A. Problem Description
When an attacker compromises a machine, they have com-
plete control of the operations of the machine by injecting
code that modiﬁes memory, function pointers, kernel code,
and device drivers. A rootkit, for example, typically changes
functions pointers in the kernel’s memory space to redirect
execution to malicious functions. A defender wanting to check
if the machine is compromised searches for modiﬁcations in
the state of the machine. Unless the defender extracts the state
of the machine without any processes running, the attacker can
tamper with the reads to misrepresent the state of the machine.
The problem is how to validate that the results of integrity
checking are untampered.
B. Solution Approach
POWERALERT is a trusted external low-cost box tied to
the untrusted machine. Figure 1 shows the architecture of
POWERALERT. The box runs an integrity checking protocol,
POWERALERT-protocol, on the untrusted machine. The proto-
col starts by sending a challenge to the untrusted machine. The
challenge is a randomly generated integrity checking program,
called the IC-program. The machine is expected to respond
to the challenge by running the program, which hashes a
randomly selected part of the memory, and sending back the
output. POWERALERT checks the response and compares it
to the known state of the untrusted machine. The process is
repeated over the life of the machine. Thus POWERALERT
avoids checking the whole state of the machine, and instead
checks small portions of the machine periodically. If the
machine is not compromised,
the IC-program will always
respond correctly to the challenge; however, if the machine
is compromised, the response will eventually be an invalid.
The attacker might try to deceive POWERALERT by adapt-
ing or running parallel operations (such running a virtual ma-
chine). In order to validate that only the IC-program is running,
POWERALERT measures the current drawn by the processor
of the machine and compares it to the current model for
normal behavior. The power model is speciﬁc to the processor
model and thus has to be learned for each machine. During
the initialization of POWERALERT, the machine is assumed
uncompromised. POWERALERT instruments the machine by
measuring the current drawn by the processor while running
operations semantically similar to the POWERALERT-protocol.
POWERALERT learns a power model speciﬁc to the machine
that is later used for validation. Finally, an attacker might
attempt to adapt to POWERALERT’s challenge by analyzing
the IC-program and ﬁnding an optimized version that hides
515
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:32:10 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 1: The components of PowerAlert.
deception operations from affecting the side-channel measure-
ments. So to prevent an attacker from adapting, POWERALERT
randomizes the challenge, i.e. the IC-program, each time the
POWERALERT-protocol is initiated.
C. Threat Model
We assume a fairly powerful attacker when it comes to
the untrusted machine; the attacker has complete control over
the software. However, we assume that the attacker does not
modify the hardware of the machine; for example, the attacker
does not change the CPU speed, or modify ﬁrmware. We do
not assume any trusted modules or components on the machine
to be tested. Our trust base is derived from the randomness
of the protocol and physical properties of the CPU. We
assume that the attacker is completely untrusted runs deceptive
countermeasures to hide her presence and deceive the veriﬁer,
and attempt to reverse-engineer the integrity-checking program
for future attempts. We aim for our approach to resist the
following attacks:
Proxy attack: The attacker uses a proxy remote machine
with the correct state to compute the correct checksum and
returns the result to the veriﬁer.
Active analysis: The attacker instruments the IC-Program
to ﬁnd memory load instructions in order to manipulate the
program.
Static analysis: The attacker analyzes the IC-program to
determine its control ﬂow and functionality within the time
needed to compute the result. The attacker can precom-
pute and store the results, ﬁnd location of memory load
instructions, or ﬁnd efﬁcient methods to manipulate the IC-
program [25].
Data Pointer redirection: The attacker attempts to modify
the data pointer that is loaded from memory.
Attacker hiding: The attacker uses compression [21] or
ROP storage [4] in data memory to hide the malicious
changes when the POWERALERT-protocol is running.
Forced retraining: The attacker forces POWERALERT to
retrain models by simulating a hardware fault resulting in a
change in hardware.
D. Assumptions
In this work, we assume that POWERALERT is a trusted ex-
ternal entity that use a trusted untampered channel to connect
to the untrusted machine. While this assumption can be relaxed
by using authentication, we opt to address it in future work.
We assume that POWERALERT has complete knowledge of
the uncompromised state of the machine. POWERALERT uses
the known uncompromised state to verify the output from the
untrusted machine. Finally, the current measurements provide
a trustworthy side-channel. Those measurements are directly
acquired by tapping the power supply to the CPU and thus
they cannot be tampered with; the learned models are based on
the physical properties of the system which cannot be altered.
Any attacker computation, such as static analysis of the IC-
program, will manifest in the current signal.
III. POWERALERT PROTOCOL
We model the interaction between POWERALERT and the
untrusted machine as a challenge-response protocol between
a veriﬁer and prover. We name the protocol
that deﬁnes
this interaction the POWERALERT-protocol. The goal of the
checker is to verify that the prover has the correct proof; in
this case, we are interested in the state of the kernel text
and data structures. On a high-level, the veriﬁer requests the
state of a random subset of the kernel state and the prover
has to produce the results. Instead of directly requesting the
memory locations, the veriﬁer sends a randomly generated
function that hashes a subset of the kernel state. The veriﬁer
uses current drawn by the CPU, a side-channel measurement,
to validate the expected runtime and energy of the response.
The POWERALERT-protocol is repeated over time; positive
results increase conﬁdence that the kernel’s integrity is pre-
served. In the following, we describe the interactions in the
POWERALERT-protocol.
The protocol works as follows. At a random instance in
time, based on the initiation strategy developed in section VI,
the veriﬁer initiates the POWERALERT-protocol. The veriﬁer
starts by randomly generating a hash function f, a random
function to generate a random set of address positions L. In
this setting, the hash function f is the IC-program. The veriﬁer
sends the random parameters  to the prover. The
prover is then supposed to load the hash function, f and run
it with inputs L . Meanwhile, POWERALERT measures and
records the current drawn by the processor i(t). Subsequently,
the prover sends the output of the hash function back to the
veriﬁer. Finally, the veriﬁer stops recording the current trace,
conﬁrms the output, and validates the expected execution with
i(t)– the measured current drawn by the processor.
The veriﬁer introduces uncertainty by changing the hash
function, order of-, and the subset of-addresses. The uncer-
tainty makes it hard for a deceptive prover to falsify the
output. Changing the hash function prevents the attacker from
adapting to the veriﬁer’s strategy; changing the addresses
and nonce prevents the attacker from predicting the veriﬁer’s
target.
In the following sections, we deﬁne the method for gener-
ating the hash functions, the strategy for picking a subset of
memory addresses, and the method for measuring current and
trace validation.
516
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:32:10 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 2: General Architecture of the Hash Function
IV. INTEGRITY CHECKING PROGRAM
is initiated. Moreover,
In this work, we take a different approach to address the
problem of the static defender. Instead of building the strongest
mechanism possible [19], we build a changing mechanism that
prevents the attacker from adapting. Speciﬁcally, we randomly
generate a new IC-program each time the POWERALERT-
Protocol
the IC-program has to be
resistant to active and static static analysis. To counter active
analysis, we change the program every time and thus making it