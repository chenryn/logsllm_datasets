```
$ docker run -it --cpuset 1 ubuntu  
```
You can of course mix the option `--cpuset` with `--cpu_shares` to tweak you container's CPU constraints.
# 更新运行容器上的约束
与重启策略一样，约束也可以在容器已经运行时更新。如果您看到容器占用了太多 Docker 主机系统资源，并且想要限制这种使用，这可能会有所帮助。同样，我们使用`docker update`命令来实现这一点。
与重启策略一样，`docker update`命令的语法与启动容器时相同，您指定所需的约束作为 docker update 命令的参数，然后给出容器 ID(例如取自`docker ps`命令输出)或其名称。同样，如果您想一次更改多个容器的约束，只需提供它们的 id 或名称，用空格隔开即可。让我们看一些如何在运行时更新约束的例子:
```
$ docker update --cpu-shares 512 abbdef1231677  
```
前面的命令将把中央处理器份额限制为 512。当然，您可以同时对多个容器应用 CPU 和内存限制:
```
docker update --cpu-shares 512 -m 500M abbdef1231677 dabdff1231678  
```
前面的命令将更新两个容器的 CPU 份额和内存限制，由`abbdef1231677`和`dabdff1231678`标识。
当然，在更新运行时约束时，您也可以在一个命令中应用所需的重启策略，如下例所示:
```
$ docker update --restart=always -m 300M aabef1234716 
```
如您所见，在运行 Docker 容器时，设置约束的能力为您提供了很大的灵活性。但值得注意的是，应用约束并不总是可能的。原因是约束设置特性在很大程度上依赖于 Docker 主机的内部，尤其是它的内核。例如，设置内核内存限制或`memory swappiness`并不总是可能的，例如，有时您得到的只是`Your kernel does not support kernel memory limit or kernel does not support memory swappiness capabilities`消息。有时这些限制是可配置的，有时不是。例如，如果你得到了`WARNING: Your kernel does not support cgroup swap limit on Ubuntu`，你可以用 Grub 配置文件中的`cgroup_enable=memory swapaccount=1`设置来调整你的 Grub 引导加载程序，例如，这将是 Ubuntu 中的`/etc/default/grub`。阅读 Docker 打印出来的日志很重要，以确保您的约束到位。
Always take note of the warnings Docker outputs during the container startup or after updating your constraints on the fly, it may happen that your constraints will not take action!
我们已经知道如何使用命令行中可用的命令来运行和观察容器。但是，如果您需要在开发流程中加速容器，例如集成测试，就不太方便了。我们在[第 5 章](05.html)*中使用的 Fabric8 Docker Maven 插件通过 Java 应用*创建映像来构建映像，如果我们需要运行容器的话，这个插件也会派上用场。现在就开始吧。
# 和马文一起跑步
该插件提供了两个与启动和停止容器相关的 Maven 目标。这将是`docker:start`和`docker:stop`。容器由`docker:start`创建和启动，由`docker:stop`停止和销毁。如果您需要在集成测试期间运行容器，典型的用例将包括 Maven 构建阶段的那些目标:`docker:start`将绑定到`pre-integration-test`和`docker:stop`到`post-integration-test`阶段。
# 插件配置
该插件使用来自`pom.xml`文件中``的``子元素的配置。最重要的配置元素列表如下:
| `cmd` | 应该在容器启动结束时执行的命令。如果没有给出，则使用映像的默认命令。 |
| `entrypoint` | 容器的入口点。 |
| `log` | 是否以及如何打印来自正在运行的容器的日志消息的日志配置。这也可以配置要使用的日志驱动程序。 |
| `memory` | 以字节为单位的内存限制 |
| n `amingStrategy` | 如何创建容器名称的命名策略:
*   `none`:使用 Docker 随机分配的名称(默认)
*   `alias `:使用镜像配置中指定的别名。如果具有此名称的容器已经存在，则会引发错误。
 |
| `network` | ``元素可用于配置容器的网络模式。它知道以下子元素:
*   ``:网络模式，可以是以下值之一:
    *   `bridge`:带默认 Docker 桥的桥接模式(默认)
    *   `host`:共享 Docker 主机网络接口
    *   `container`:连接到指定容器的网络
容器的名称取自``元素:
*   `custom`:使用自定义网络，该网络必须在使用 Docker 网络创建之前创建
*   `none`:不设置网络
 |
| `ports` | ``配置包含端口映射列表。每个映射都有多个部分，每个部分由一个冒号分隔。当使用带有选项`-p`的`docker run`命令时，这相当于端口映射。一个示例条目可能如下所示:
```
8080:8080   
```
 |
| `restartPolicy` | 提供了我们在本章前面讨论过的重启策略。示例条目可能如下所示:
```
 on-failure   
5   
```
 |
| `volumes` | 用于绑定到主机目录和其他容器的卷配置。示例配置可能如下所示:
```
/logs/opt/host_export:/opt/container_import    
```
 |
我们的 Java REST 服务的完整的``元素可以如下所示。这是一个非常基本的例子，我们只在这里配置运行时端口映射:
```
rest-example:${project.version} 
rest-example 
openjdk:latest 
artifact 
java -jar maven/${project.name}-${project.version}.jar 
8080:8080 
```
配置好容器后，让我们尝试使用 Maven 运行它。
# 启动和停止容器
要启动容器，请执行以下操作:
```
$ mvn clean package docker:start  
```
Maven 将从源代码构建我们的 REST 服务，构建映像并在后台启动容器。作为输出，我们将获得容器的 ID，如您在下面的截图中所见:
![](img/c8601499-7ed7-4129-a7af-c65195958a77.png)
容器现在正在后台运行。为了测试它是否正在运行，我们可以发出`docker ps`来列出所有正在运行的容器，或者通过在映射的`8080`端口上执行一些`HTTP`方法来调用服务，例如`GET`或`POST`。端口已经暴露在``配置元素中，并暴露在``配置元素中。这很方便，不是吗？但是，如果我们希望看到容器的输出，而不是在后台运行它呢？那也很容易；让我们首先通过发出以下命令来停止它:
```
$ mvn docker:stop  
```
10 秒钟后(您会记得，这是停止容器之前的默认超时时间)，Maven 将输出一条声明，表明容器已经停止:
```
[INFO] DOCKER> [rest-example:0.1.0] "rest-example": Stop and removed container 51660084f0d8 after 0 ms  
```
让我们再次运行容器，这次使用 Maven `docker:run`目标而不是`docker:start`。执行以下操作:
```
$ mvn clean package docker:run  
```
这一次，Maven Docker 插件将运行容器，我们将在控制台上看到 Spring Boot 横幅，如您在下面的截图中所见:
![](img/527dd4cb-e464-4207-a183-80634346fa98.png)
我猜你现在可以辨别`docker:start`和`docker:run`的区别了。正确，`docker:run`相当于`docker run`命令的选项`-i`。`docker:run`也会自动开启`showLogs`选项，这样你就可以看到容器内发生的事情。或者，您可以提供`docker.follow`作为系统属性，这样`docker:start`将永远不会返回，而是阻塞，直到按下 *CTRL + C* ，与您执行`docker:run` Maven 目标时完全相同。
如您所见，Fabric8 Docker Maven 插件为您提供了与从外壳或命令行运行和停止容器时相同的控制。但是 Maven 构建过程本身的优势来了:您可以自动化事情。Docker 容器现在可以在构建、集成测试和您可能拥有的持续交付流程中使用；你说吧。
# 摘要
在本章中，我们学习了如何管理容器的寿命，使用不同的运行模式(前台和分离)启动它，停止或移除它。我们还知道如何创建约束，通过使用运行时约束来限制中央处理器和内存的使用，从而使容器按照我们希望的方式运行。让我们的容器运行，我们现在能够以多种方式检查容器的行为，它将读取日志输出，查看事件或浏览统计数据。如果您正在使用 Maven，并且您可能是 Java 开发人员，那么您现在可以配置 Docker Maven 插件来自动启动或停止容器。
我们已经了解了很多关于 Docker 的知识，我们可以构建和运行映像。是时候更进一步了。我们将使用 Kubernetes 自动化容器化应用的部署、扩展和管理。这是真正的乐趣开始的时刻。