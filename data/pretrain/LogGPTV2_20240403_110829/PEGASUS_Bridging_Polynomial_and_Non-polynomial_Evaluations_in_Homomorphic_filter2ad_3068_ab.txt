≈ 1GB
High†
High
Low
High
supports SIMD style homomorphic operations and provides
high ﬂexibility for non-polynomial functions is still absent.
B. Contribution
In this work, we present PEGASUS, a highly optimized
framework that supports both SIMD style operations and
LUT evaluations on large input domains (i.e., the last row of
Table II). Our contributions can be summarized as follows.
1) We ease the constraint in the LUT method [43] to
accept a signiﬁcantly larger input (e.g., > 40 bits) at the
cost of introducing some approximation errors. stress that
a such large input domain is sufﬁcient enough for many
applications such as privacy-preserving machine learning.
We provide empirical and theoretic analyses on the errors.
2) We present a memory-efﬁcient and fast repacking
algorithm. In brief, our repacking key consists of one
CKKS ciphertext which is tremendously smaller than that
of CHIMERA which consists of thousands of CKKS cipher-
texts. We compare our repacking algorithm with the existing
methods in Table I.
3) We implemented PEGASUS using SEAL [47]. Dif-
ferent from CHIMERA, we do not export CKKS to the
torus. As a result, Pegasus can beneﬁt from the efﬁciency of
the underlying optimized NTT/RNS. Our implementations
are publicly available in https://github.com/Alibaba-Gemini-
Lab/OpenPEGASUS.
4) We present extensive empirical
including
min/max, sorting, division, square-root, and decision tree
evaluation on encrypted data. To further demonstrate the
potential of Pegasus, we also implement a viable application
that runs K-means clustering on thousands of encrypted
samples in minutes. To the best of our knowledge, we are
the ﬁrst to achieve practical secure K-means clustering using
purely HE in a single-server setting.
results
II. PRELIMINARIES
A. Notations
For a 2-power number n, we write Rn = Z[X]/(X n + 1)
and Rn,q = Rn/qRn ≡ Zq[X]/(X n+1). We use lower-case
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:25:55 UTC from IEEE Xplore.  Restrictions apply. 
1058
letters with a “hat” symbol such as ˆa to represent elements in
Rn, and aj to denote the j-th coefﬁcient of ˆa. We use the dot
symbol · such as ˆa· ˆb to represent the multiplication of ring
elements. We use bold lower-case letters symbol such as a to
represent vectors, and use a[j] to denote the j-th component
of a, and use a(cid:107)b to denote the concatenation of vectors. We
use a (cid:28) k to denote the left-hand-side rotation of the vector
components. We use a(cid:62)b to denote inner product of vectors
and a◦ b for the Hadamard product of vectors. We use bold
upper-case letters such as M to denote matrices, and M[i, j]
to denote the (i, j) entry of M. We denote by (cid:104)n(cid:105) the set
{0,··· , n−1} for n ∈ N. We use (cid:100)·(cid:99) to denote the rounding
function. Function I(P ) returns 1 if the predicate P is true,
and otherwise it returns 0. All logarithms are to base 2.
s
B. LWE, Ring-LWE Encryption
We use the notation LWEn,q
(m) to denote the set of the
possible LWE encryption of the message m ∈ Zq under the
secret s ∈ Zn
q . (b, a) = (m + e − a(cid:62)s, a) ∈ LWEn,q
(m),
where a ∈ Zn
q is chosen uniformly at random, and the error
e is chosen from an error distribution χerr. The decryption
formula for the LWE ciphertext is b + a(cid:62)s ≈ m.
Similarly, a basic RLWE encryption of a message ˆm ∈
Rn,q under the key ˆs ∈ Rn is given as (ˆb, ˆa) = ( ˆm +
ˆe − ˆa · ˆs, ˆa) ∈ RLWEn,q
( ˆm), where ˆa ∈ Rn,q is chosen
uniformly at random, and the error ˆe is chosen by sampling
its coefﬁcients from the error distribution χerr independently.
To lighten the notation, we identify the secret key of RLWE
as a vector s where s[j] = sj for all j ∈ (cid:104)n(cid:105), and we
write the RLWE encryption of ˆm as RLWEn,q
( ˆm) from now
on. Also, PEGASUS can work with an asymmetric RLWE
encryption, but we use the notations of symmetric RLWE
encryption for the sake of simplicity.
ˆs
s
s
The RLWE encryption supports the following homomor-
phic addition and multiplication operations. We provide the
details of those operations in Appendix A.
• Addition (+). Given RLWE ciphertexts ct0 and ct1,
which encrypts ring elements ˆp0 and ˆp1, the operation ct0 +
ct1 results in a ciphertext that encrypts the sum, i.e., ˆp0 + ˆp1.
• Small Plaintext Multiplication (·). Given ciphertext ct
that encrypts a ring element ˆp, and given a “small” plain
element ˆr, the operation ˆr · ct results in a ciphertext that
encrypts ˆr · ˆp. Notice that this multiplication can only be
used with a low-norm ring element ˆr.
• Arbitrary Plaintext Multiplication ((cid:5)). In order to
support multiplication by arbitrary ring elements, one deﬁnes
an extended encryption (cid:94)RLWE(·; g) using a gadget vector
(cid:94)RLWE(ˆp; g)
g ∈ Zd. Given the extended ciphertext ˜ct ∈
and an arbitrary ring element ˆr, the operation ˆr (cid:5) ˜ct results
in an RLWE ciphertext that encrypts ˆr · ˆp.
• External Multiplication ((cid:12)). Furthermore, one can
deﬁne a GSW-like encryption RGSW(·; g) to support mul-
tiplication by RLWE ciphertexts [28]. Given an RLWE
ciphertext ct that encrypts a ring element ˆp0, and a GSW
ciphertext ¨ct ∈ RGSW(ˆp1; g), the external multiplication
ct (cid:12) ¨ct results in an RLWE ciphertext that encrypts ˆp0 · ˆp1.
Note that the LWE and RLWE encryption include errors
whose magnitude will grow along with homomorphic op-
erations on the ciphertexts. To preserve the precision of
the decryption, we need to keep the magnitude of errors
relatively small. For instance, the gadget vector g is used
to prevent the noise from growing too large. We defer the
concrete choice of gadget vectors to the full protocol of
PEGASUS. Also if the gadget vector g is unimportant or
clear from the context, we simply omit it in the notation.
C. Coefﬁcients and Slots Manipulation
The ring structure of Z[X]/(X n + 1) allows us to encode
a real vector v ∈ R(cid:96) as a ring element of Rn,q. We use
Ecd(v, ∆) ∈ Rn,q to denote the encoding of v with a scaling
factor ∆ > 0, and use Dcd(ˆv, ∆, (cid:96)) ∈ R(cid:96) to denote the
decoding of ˆv with a scaling factor ∆ > 0 and a length
(cid:96) > 0. We introduce the following properties and functions
of the encoding and refer the details to [14], [32].
• Self-repeating. Dcd (Ecd (v(cid:107)···(cid:107)v, ∆) , ∆, (cid:96)) = v. In
other words, the encoding of some self-repeating vectors
can be viewed as the encoding of a single copy.
• Slot-wise Addition and Multiplication. Given the ring
elements ˆu and ˆv that encode the vectors u and v, respec-
tively, the addition ˆu+ ˆv (resp. multiplication ˆu· ˆv) results in
a ring element that encodes the vector u + v (resp. u◦ v). In
the realm of ciphertexts, this property enables us to perform
slot-wise addition and multiplication over encrypted vectors.
• Rotation. Given the RLWE ciphertext ct which en-
crypts Ecd (v, ∆), an integer k ∈ N, and a rotation key
RotK, the operation RotLk(ct; RotK) results in an RLWE
ciphertext
that encrypts the left-hand-side rotated vector
Ecd (v (cid:28) k, ∆).
• Rescale. Given the RLWE ciphertext ct which en-
crypts Ecd (v, ∆), and a factor ∆(cid:48) ∈ R,
the operation
Rescale(ct, ∆(cid:48)) results in a ciphertext (with a smaller mod-
ulus) that encrypts Ecd (v, ∆/∆(cid:48)).
• Slots To Coefﬁcients. Given the RLWE ciphertext ct
which encrypts Ecd (v, ∆), the operation S2C(ct) results in
an RLWE ciphertext that encrypts a ring element ˆv whose
coefﬁcients are vi = ∆v[i] for all possible positions. Indeed,
S2C evaluates the decoding function homomorphically.
• Coefﬁcients Extraction. Given the ciphertext ct =
the operation
RLWEn,p
Extractk(ct) results in LWEn,p
(mk), i.e., an LWE encryp-
tion of the k-th coefﬁcient of ˆm under the same secret key.
PEGASUS uses the combination of S2C and Extract to
convert an RLWE ciphertext of an encoded vector to a set
of LWE ciphertexts of the vector elements.
( ˆm), and an integer k ∈ (cid:104)n(cid:105),
s
s
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:25:55 UTC from IEEE Xplore.  Restrictions apply. 
1059
D. System and Security Model
We give an overview of our desired security properties.
We consider three stakeholders: encryptor(s), cloud, and
decryptor. We assume all stakeholders behave semi-honestly
and the cloud does not collude with the decryptor. Let x be
a private input of the encryptor and y be a private input
of the cloud and f be a known function. If the cloud do
not provide any private input then we simply set y = ⊥.
We consider the following model. The encryptor(s) sends
the ciphertext Enc(x) to the cloud for the computation of
a particular function f. The cloud operates speciﬁed homo-
morphic operations on Enc(x) and y and sends the resulting
ciphertext Enc(f (x, y)) to the decryptor who decrypts to
learn f (x, y) but nothing else. Under this model, the security
against a semi-honest cloud follows from the fact that the
view of the cloud consists of ciphertexts only. Also, even
if the decryptor knows x, e.g., the encryptor and decryptor
are the same entity, it learns nothing about the input of the
cloud except the result f (x, y).
Recently, Li et al. [41] point out that the approximated de-
cryption results of CKKS can leak additional information of
the decryption keys. They successfully constructed passive
attacks that could recover the decryption keys if given access
to the decryption results. We warn that the decryptor in
PEGASUS should not reveal the decrypted values of CKKS
ciphertexts to the encryptor and anyone else without doing
any counter-measurement such as [13].
In the following descriptions, we describe the computation
on the cloud side and omit the decryption phase of the
decryptor and the encryption phase of the encryptor since
these operations are either simple or application dependent.
III. BUILDING BLOCKS OF PEGASUS
In this section, we propose PEGASUS, a novel framework
that stays in the RLWE form for efﬁcient SIMD computation
(e.g., addition, multiplication, and rotation) and transforms
to LWE for evaluating a wide range of other complex func-
tions via a ﬁne-grained look-up table approximation (e.g.,
sigmoid, ReLU, max/min). The PEGASUS transformation
consists of four core functions including key-switching (FKS
of Fig. 1a), look-up-table evaluation (FLUT of Fig. 1b),
linear transform (FLT of Fig. 1c), and approximated modulo
(Fmod of Fig. 1d), which are detailed in this section. It is
noteworthy that the LUT function in PEGASUS is not exact
and would introduce some (bounded) approximation errors.
A. Overview
PEGASUS works on a set of (R)LWE-based schemes pa-
rameterized by different (R)LWE dimensions and arguments.
Particularly, we use the notations n, n, and n to denote
different (R)LWE dimensions and we write the secret keys in
these dimensions as s, s, and s, respectively. Moreover, the
“bar” mark is used to indicate the magnitude of them, i.e.,
Function FKS
Input: ctin ∈ LWEn,q
(m).
Output: ctout ∈ LWEn,q
s
s
(m) such that n ≤ n.
(a) Key-switching Function FKS.
Function FLUT
Input:
ctin ∈ LWEn,q
table function T (x) : R (cid:55)→ R.
Output: ctout ∈ LWEn,q
approximation error e.
((cid:100)∆m(cid:99)) of m ∈ R. A look-up
((cid:100)∆T (m)(cid:99) + e) with a small
s
s
(b) Look-up table Function FLUT.
Function FLT
ctin ∈ RLWEn,q
(Ecd (z, ∆)) of z ∈ Rn.
Input:
A matrix M ∈ R(cid:96)×n and a vector t ∈ R(cid:96) such
that (cid:96), n ≤ n/2.
Output: ctout ∈ RLWEn,q
(Ecd (Mz + t, ∆)).
s
s
(cid:48)
(c) Linear transform Function FLT.
Function Fmod
(cid:48)
Input: ctin ∈ RLWEn,q
Rn,q and some small norm polynomial ˆe ∈ Rn.
Output: ctout ∈ RLWEn,q
tion error ˆe of a small norm.
(ˆz + qˆe) for a polynomial ˆz ∈
(ˆz + ˆe(cid:48)) with an approxima-
(cid:48)(cid:48)
s
s
(d) Mod q Function Fmod.
Figure 1: Core functions used in PEGASUS.
n  n. The details of PEGASUS.KS
are given in Fig. 9 in Appendix. Also, we adapt the RNS-
friendly approach from [33] for the Fmod function.
However, the existing methods for the other two functions