/* A function pointer stored at an unaligned
address */
callback cb;
};
static dp_t dp = {1, my_callback};
Listing 2: An example of unaligned pointer storage. Assume
struct dp is stored at an aligned address 0x600000.
Assumption b) directly leads to the requirement that all data
sections must be put at their original addresses in the origi-
nal binary, which, in some cases, breaks binary retroﬁtting.
Figure 1 shows a common section layout for ELF binaries
on Linux. Usually, a binary may have a read-only section
.rodata, a read-write section .data, and a section .bss
which is initialized to all zeros at program start. If all three
sections are close enough to each other, we cannot add any
custom data to .rodata or .data section. Alternatively, a
new section must be created to hold the newly inserted data,
which, in certain cases where memory usage is a concern,
is suboptimal. Our technique uses advanced static analysis
to support arbitrary relocation and resizing of all sections,
discarding this assumption in the process.
Assumption c) simply does not hold true in many binaries.
The root
that
identifying function start points on stripped binaries is still
an unsolved problem, especially on binaries compiled with
issue is, as we mentioned in Section II-A,
4
optimization enabled and C++ binaries. Hence relying on
all function start points being successfully identiﬁed is not
practical, which is why our solution does not assume a set of
perfectly-identiﬁed function start points.
B. Motivating Failure Case
The successful operation of Uroboros depends on the
perfect execution of its symbolization step. Uroboros linearly
scans the data section of binaries, and considers every word-
sized buffer whose integer value falls in a memory region to
be a symbolizable integer. The idea seems straightforward,
but it does not necessarily work due to false positives and
false negatives during the symbolization step. An immediate
might be a symbolizable immediate, meaning that it should
be treated as a reference, or a non-symbolizable immediate,
meaning that it might look like a reference, but is actually
a true immediate. Any incorrect classiﬁcation of the above
during reassembling directly leads to the generation of broken
reassembled binaries. As we will show throughout the rest of
this section and in our evaluation, this incorrect classiﬁcation
happens rather frequently.
Uroboros depends on the three assumptions described
previously in order to lower the chance of collisions between
normal data and pointers, without the need of any advanced
static analysis. Now we demonstrate why this approach is not
generally applicable.
Consider the code snippet shown in Listing 3. Suppose
the compiled binary has a .text section ranging from
0x8000000 to 0x8050000, a ﬂoating point variable a has an
initial value of 4e−34. Its binary representation, as shown
in the listing, happens to be 3d ec 04 08, which is
0x804ec3d on little-endian machines. Uroboros mistreats the
initial value as a symbolizable integer and symbolizes it.
This is incorrect, and the binary is consequently broken after
reassembling. The root cause is that Uroboros does not know
the real type of any piece of data in the binary: all of its
assumptions depend on the low odds of misidentiﬁcation of a
normal piece of data as a pointer.
static float a = 4e-34;
8060080
3d ec 04 08
(a) Deﬁnition of a ﬂoat variable
a.
(b) Binary representation of ﬂoat
a.
Listing 3: An example of a pointer value collision occurring
in a ﬂoat. .text section begins at 0x8000000 with size
0x50000.
As we discuss in this paper, Ramblr takes a different
route of performing data identiﬁcation and type recognition on
the target binary to support the symbolization step. The more
non-symbolizable data we identify, the less symbolization false
positives there will be. By utilizing data identiﬁcation and type
recognition, our solution is able to identify the consecutive 4
bytes located at 0x8060080 as a ﬂoating point constant, and
avoids symbolizing it.
In the following, we will detail the different challenges that
Uroboros is unable to overcome, and that Ramblr addresses
with advanced static analysis.
C. Unsurmounted Challenges
Many challenges arise when applying current reassembly
approaches on a large set of real-world binaries. Like the
motivating failure case in Section III-B,
these challenges
stem from corner cases that cause incorrect symbolization
classiﬁcations. These classiﬁcations fall into two categories:
Symbolization false negatives. A symbolization false negative
occurs when an immediate value (which is deemed as a
non-symbolizable immediate initially) does not fall into
any known memory region, but is used as part of a pointer
in the binary.
Symbolization false positives. An immediate value, initially
deemed as a symbolizable immediate, is sometimes sim-
ply a normal piece of data, causing a symbolization false
positive, as shown above in our motivating failure case.
There are several categories of situations that cause sym-
bolization mis-classiﬁcations. Here, we enumerate these cate-
gories with concrete examples.
Compiler optimizations. Due to compiler optimization
techniques (namely, constant propagation and constant fold-
ing), a constant may be added to or subtracted from a pointer,
creating a pointer to a different value. The target of this new
pointer might appear to point outside of any memory region
(causing a symbolization false negative) or to another memory
region altogether (causing an incorrect symbolization).
Listing 4 is a xorshift pseudo-random number generator
(PRNG) adapted from CGC binary CROMU_00042. We as-
sume that
the state array is stored at 0x80609e8. Ac-
cording to the source code, variable i, which is the index
counter of the loop, should range from 0 to 16, and memory
addresses of the array assignment should be ranging from
0x80609e8 to 0x80609e8 + 16× 8. However, in the assembly
compiled using Clang under optimization level O1, due to
compiler optimization, the index variable i takes an initial
value of −0x80 (which is −16 × 8), and the base pointer
at instruction 0x804a33d is 0x8060a68, which is essentially
0x80609e8 − 0x80. Uroboros cannot detect this occurrence.
Ramblr, instead, addresses it by using base pointer reattri-
bution, described in Section VII-A.
Abnormal binary behavior. In this case, the binary ex-
hibits abnormal behavior (for instance, pointer encryption and
decryption). If pointers are stored in a binary in a modiﬁed
form, they might cause symbolization false negatives.
Adapted from CGC binary KPRCA_00044, Listing 5
shows an example of decryption of a jump target stored
in ecx before using it as the target
for call. The tar-
get function being called might be offsetted after reassem-
bling, but since Uroboros cannot determine that the variable
encrypted_func_ptr is the encrypted pointer of the
target function, the pointer will not be symbolized, which
results in a broken binary.
Since such binaries are rare in practice, and there is no
generic way to handle those cases, we deem those binaries as
unsafe for reassembling, and refrain from reassembling them.
However, it is necessary to detect these cases to be able to opt
out of reassembling. Uroboros has no functionality to handle
these cases, leading to broken data references in the resulting
/* Assume the array is stored at 0x80609e8 */
uint64_t state[16] = {0};
void sprng(uint64_t seed)
{
uint64_t state_64 = seed;
for (int i = 0; i > 27;
state_64 ˆ= state_64 >> 13;
state_64 ˆ= state_64 >> 46;
state[i] = state_64 * 1865811235122147685;
}
}
(a) An implementation of xorshift PRNG.
mov
eax, ebx
esi, -0x80
eax, ebx
.text
...
; initial value of i is -0x80
804a2e4
804a300
...
; beginning of the loop
804a300
...
; state[i] = state_64 * 1865811235122147685
804a32d
804a333
804a335
804a33b
; write results to the state array
; note that 0x8060a68 - 0x80 = 0x80609e8
804a33d
804a343
804a349
804a34c
ebp, ecx, 0x19071d96
ebp, edx
edx, ebx, 0xd81ecd35
edx, ebp
dword ptr [esi+0x8060a68], eax
dword ptr [esi+0x8060a6c], edx
esi, 8
0x804a300 ; loop end
imul
add
imul
add
mov
mov
mov
mov
add
jnz
.bss
...
80609e8
uint64_t state[16];
(b) An extract of the compiled PRNG in Clang with -O1.
Listing 4: An example where the base pointer appear to point
outside of any memory region due to compiler optimization.
mov
sub
80480bb
80480c1
; parameter to the function
80480c7
80480ce
mov
call
dword ptr [esp], 0xDEADBEEF
ecx
ecx, OFFSET FLAT: encrypted_func_ptr
ecx, OFFSET FLAT: encryption_key
Listing 5: An example of pointer decryption before using the
pointer as a jump target.
binaries. Ramblr addresses this through its data consumer
check, presented in Section VII-B.
Value collisions. A frequent cause of broken reassembled
binaries is value collision within the binary: a non-pointer
integer happens to have a value that coincides with a location
in a pre-deﬁned memory region. This causes symbolization
false positives, in which the colliding immediate is incorrectly
symbolized, and its ﬁnal value is wrongly modiﬁed in the
reassembly process. Contrary to the argument in [25] that such
collisions are “rare”, we ﬁnd multiple cases in our dataset.
When reassembling more binaries, especially those com-
piled with optimization enabled, value collisions are not as
rare as Uroboros claimed. For instance, Listing 6 shows a
5
simple collision we found in Coreutils program factor in
byte array primes_diff. This array is the same (and with
the same alignment) when compiled with different ﬂags and
optimization levels, but when compiled with -O0, -O1, and
-O2, those binaries are not big enough, and as a result, the
address 0x8060406 is not covered by any section in those
binaries. A similar issue is found in Coreutils’ ubiquitus
program ls. Without handling such cases, the binary is broken
by reassembling.
static const unsigned char
primes_diff[] = {
1, 2, 2, 4,
2, 4, 2, 4, ...
/* at 0x805da50 */
2, 6, 4, 2
/* at 0x805da54 */
6, 4, 6, 8, ...
};
(a) Part of the primes_diff
byte array.
.rodata:
805da50
805da51
805da52
805da53
805da54
.db 2
.db 6
.db 4
.db 2
.long 0x8060406
(b) Byte sequence at 0x805da54
falls into the memory region of
this binary when decoded as a
pointer.
Listing 6: An extract from factor compiled with GCC
in -O3 demonstrating a value collision occurred in array
primes_diff.
A generic solution to this issue would require an analysis
that can reason about the purpose of an immediate value in
a binary. In general, this is not solvable, and Uroboros makes
no attempt to compensate for this. Ramblr uses a set of best-
effort approaches to mitigate this problem:
a) We perform a primitive data type recovery to identify
the types of these data blocks. For example, if a 4-byte
data block is recognized as a ﬂoat constant, it should
not be symbolized as a pointer. This is described in
Section VI.
b) We perform an array size recovery to identify the
size of some more complex program data constructs, like
byte arrays, etc. For example, if a 128-byte data block is
identiﬁed as a single byte array, none of the values inside
should be symbolized as a pointer. This is also described
in Section VI.
c) If an immediate value pointing to the middle of
an instruction is ﬁrst determined to be symbolizable,
all previous decisions leading to this decision must be
rolled back. Section VI-C contains details of this decision
process.
Disassembly
readability.
the
Ideally,
disassembly
ﬁle should be easy-to-read. Uroboros displays all non-
symbolizable data in the form of individual bytes, which
is very difﬁcult for users to understand or edit. With the
help of data type recognition, we are able to generate more
natural-looking assemblies.
IV. APPROACH OVERVIEW
To make our technique more approachable, we present an
overview of the technique in this section before describing it
in-depth throughout the rest of the paper.
Ramblr works in several main steps when reassembling a
target binary, each of which will be discussed in a subsequent
6
section:
Disassembly and CFG Recovery. First, Ramblr recovers a
complete CFG of the target binary, fully disassembling
each basic block as it is identiﬁed. We discuss this in
Section V.
Content Classiﬁcation. Next, Ramblr classiﬁes the contents
of the target binary into several types (i.e., code, pointers,
arrays, etc). Ramblr uses a combination of advanced
static analysis techniques, along with metadata available
in the target binary, to accomplish this task. Our classiﬁ-
cation process is described in Section VI.
Symbolization. Using the results of the previous two steps,
Ramblr identiﬁes symbol references in the target binary.
These references identify the semantic meaning of a
memory location (i.e., “the start of function X”), as
opposed to the syntactic meaning of the address (i.e., “this
code is at address Y”) and are used in the reassembly step
to maintain relationships from a reference to the object it
points to. Symbolization, with our various improvements
over previous work, is presented in Section VII.
Reassembly. With the symbols identiﬁed, reassembleable as-
sembly code is generated for the binary. Any desired
modiﬁcations to the binary are done on top of this
assembly code – instructions can be added, removed, or
replaced, and functions or data can be added. The mod-
iﬁed assembly is then reassembled using an off-the-shelf
assembler. The resulting binary is a functional application
that exhibits the desired change of behavior from the
original. We delve into this process in Section IX.
Throughout the rest of the paper, we will detail, discuss,
and evaluate the steps summarized above.
The content classiﬁcation and symbolization steps require
static analyses that have moderate runtime requirements. To
address the case in which reassembly must happen extremely
quickly, we have developed a set of workarounds that increase
the cost of some function-
the speed of our technique at
ality guarantees of the resulting binary. We present
these
workarounds in Section VIII.
Despite our advancements in the technique of reassembling
binaries, there are still cases where Ramblr cannot guarantee
the functionality of the resulting binary. In these cases, it will
emit an error message and refuse to reassemble the binary.
V. CFG RECOVERY AND DISASSEMBLY
Before a target binary can be reassembled, it must be
disassembled. We do this by computing a control ﬂow graph
(CFG) of the target binary and disassembling any identiﬁed
basic block. Aside from this, we attempt
to identify and
disassemble dead code, as it is important for our approach
that as much of the code as possible is disassembled.
We use the angr binary analysis framework for CFG
recovery. If angr’s CFG recovery fails on the target binary,
Ramblr is unable to continue and reports an error message.
However, we did not ﬁnd such cases in our test dataset.
We will brieﬂy summarize how angr’s CFG recovery
works and the slight modiﬁcations that we made to it
to
improve the disassembly coverage. While we summarize the
approach in this section, we encourage the interested reader
to explore the angr authors’ full description on the design of
their CFG recovery [21].
A. Recursive CFG Recovery
CFG recovery starts from the entry point of the binary, and
recursively follows direct control ﬂow transitions or resolves
and follows indirect control ﬂow transitions. Eventually, the
recovery exhausts the recursively reachable basic blocks of the
executable regions of the binary (typically the .text section
for ELF binaries), and disassembles as many bytes as possible.
B. Utilizing Meta Information
angr respects certain meta information from the binary,
which includes segment and/or section information2. angr’s
CFG recovery assumes that non-executable memory regions
only contain data bytes, not executable code.
C. Iterative Feedback