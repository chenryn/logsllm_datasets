### 10.12 GPU调试模型

对于运行在GPU上的算核函数的调试，该模型并不采用进程内调试方式。图10-10展示了从CPU上调试GPU程序时的多方协作模型。

**图10-10 GPU调试模型**

图10-10左侧是CPU及其端的软件环境。横线上方代表用户空间，其中包含调试器进程。调试器进程内部有专门针对GPU程序的逻辑模块，这些模块向调试器的顶层报告GPU程序目标，并提供访问GPU程序的接口。在被调试进程中，GPU程序的宿主代码在初始化HSA运行时库期间会触发加载GPU调试主体（Debug Agent）模块。随后，Debug Agent会加载GPU调试核心模块（DBE）。清单10-3展示了这一过程。

**清单10-3 加载GPU调试核心模块**
```c
#0  HwDbgInit (pApiTable=0x7ffff7dd5f20) at /home/jenkins/workspace/HwDebug-Linux-DBE/HWDebugger/Src/HwDbgHSA/HwDbgHSA.cpp:154
#1  0x00007ffff3cdc037 in OnLoad (pTable=0x7ffff7dd5f20, runtimeVersion=1, failedToolCount=0, pFailedToolNames=0x0) at HSADebugAgent.cpp:507
#2  0x00007ffff7b6dc23 in ?? () from /opt/rocm/hsa/lib/libhsa-runtime64.so.1
#3  0x00007ffff7b6e425 in ?? () from /opt/rocm/hsa/lib/libhsa-runtime64.so.1
#4  0x00007ffff7b54d2a in ?? () from /opt/rocm/hsa/lib/libhsa-runtime64.so.1
#5  0x0000000000403635 in AMDT::HSAResourceManager::InitRuntime (verbosePrint=true, gpuIndex=0) at ../Common/HSAResourceManager.cpp:80
#6  0x000000000040df84 in RunTest (doVerify=false) at MatrixMul.cpp:76
#7  0x000000000040deeb in main (argc=1, argv=0x7fffffffdbf8) at MatrixMul.cpp:65
```

在清单10-3中，栈帧#5实现了调试主体中的初始化函数，其内部调用`hsa_init`函数进入HSA运行模块`libhsa-runtime64`。

#### 准备调试

为了准备调试，需要将调试SDK和调试主体模块的路径添加到`LD_LIBRARY_PATH`环境变量中。启动GDB调试器的`rocm-gdb`脚本文件中定义了另一个环境变量`HSA_TOOLS_LIB`，它指定了调试主体模块名和运行时工具模块名。以下是`rocm-gdb`脚本中的相关命令：
```sh
export HSA_TOOLS_LIB="libhsa-runtime-tools64.so.1 libAMDHSADebugAgent-x64.so"
```

当被调试程序启动后，HSA运行时会根据上述环境变量加载调试主体模块，后者通过调用`HwDbgInit` API初始化GPU调试核心模块（DBE）。DBE模块内部通过IOCTL接口与内核空间中的AMDKFD驱动建立联系。AMDKFD驱动通过MMIO和中断接口与GPU硬件通信。

#### GPU地址空间中的调试

在GPU的地址空间中，算核函数运行在低特权模式。遇到断点或异常时，程序会进入高特权的陷阱处理程序并执行。陷阱处理程序集成了调试支持，将GPU的异常信息报告给AMDKFD驱动，后者再传递给用户空间的DBE模块。

#### 调试器进程与调试主体之间的通信

调试器进程和调试主体之间的通信可以有多种方式。调试SDK实现了一种基于共享内存的双向通信设施，使用先进先出的队列（FIFO）。以下是两个FIFO文件的名字：
```c
const char gs_AgentToGdbFifoName[]  = "fifo-agent-w-gdb-r";
const char gs_GdbToAgentFifoName[]  = "fifo-gdb-w-agent-r";
```
第一个FIFO供调试主体写入，供调试器（GDB）读取；第二个FIFO供调试器写入，供调试主体读取。

### 10.12.3 面向事件的调试接口

AMD的GPU调试API类似于Windows操作系统的调试API，采用了面向调试事件的设计模式。用于等待调试事件的函数如下：
```c
HwDbgStatus HwDbgWaitForEvent(HwDbgContextHandle hDebugContext, const uint32_t timeout, HwDbgEventType* pEventTypeOut);
```
- `hDebugContext`：通过调用`HwDbgBeginDebugContext`开始调试时获得的句柄。
- `timeout`：最长等待时间（毫秒数）。
- `pEventTypeOut`：等待到的事件结果，定义为以下枚举常量：
  ```c
  typedef enum {
      HWDBG_EVENT_INVALID = 0x0,
      // 其他事件类型
  } HwDbgEventType;
  ```

### 10.13 ROCm-GDB的安装和编译

在使用ROCm-GDB之前，需要先安装ROCm基础环境。有两种方法：一种是从AMD公开的软件仓库服务器下载预编译的二进制文件并安装，另一种是下载源代码自行编译和安装。前一种方法较为简单，但如果环境不匹配可能会失败。作者在Ubuntu 18.04环境下安装时，在编译内核模块时遇到错误，而在Ubuntu 16.04环境下安装顺利。安装好的文件位于`/opt/rocm`目录下。

安装好ROCm基础环境后，接下来应下载和编译GPU调试SDK，然后再编译ROCm-GDB。GitHub上的构建指南详细介绍了这些步骤，本书不再赘述。

为了能够在算核函数中设置断点，在编译算核函数时应使用以下选项：
```sh
BUILD_WITH_LIB BRIGDWARF=1
```
其中，BRIG代表HSA中间语言的二进制格式，DWARF是Linux平台上流行的符号格式，广泛用于各种GPU程序。

### 10.13.3 常用命令

表10-1列出了ROCm-GDB的新增命令：

| 命令                | 描述                                                         |
|-------------------|------------------------------------------------------------|
| `rocm thread wg: wi:` | 切换GPU线程和工作项，完整格式为`rocm thread wg: wi:`       |
| `break rocm`        | 每次分发算核函数时都中断到调试器，也可以指定算核函数名字（如`break rocm:kernel_name`），或者指定行号（如`break rocm:line_number`）设置算核程序的源代码断点 |
| `disassemble`       | 反汇编当前的算核函数                                         |
| `print rocm:variable` | 输出算核函数中的变量，完整格式为`print rocm:variable`       |
| `set rocm trace on/off` | 打开或关闭GPU分发算核函数时的追踪信息，也可以指定文件名（如`set rocm trace filename`）将信息写入文件 |
| `set rocm logging on/off` | 打开或关闭调试主体和DBE内部的日志，日志输出目标可以是标准输出或文件 |
| `set rocm show-isa on/off` | 控制是否将算核函数的指令（ISA）写入临时文件`temp_isa`       |
| `info rocm devices`  | 观察GPU设备信息                                             |
| `info rocm kernels`  | 输出当前的所有算核函数                                       |
| `info rocm kernel`   | 输出指定算核的信息                                           |
| `info rocm wgs`      | 显示当前所有工作组的信息                                     |
| `info rocm wg`       | 显示指定工作组的信息，完整格式为`info rocm [work-group|wg] [id]` |
| `info rocm wis`      | 显示当前所有工作项的信息                                     |
| `info rocm wi`       | 显示指定工作项的信息，完整格式为`info rocm [work-item|wi] [id]` |
| `show rocm`          | 显示通过`set`命令设置的各种配置选项的当前值                  |

由于ROCm-GDB和调试主体都是开源的，结合源代码学习ROCm-GDB是一种很好的方法。

### 10.14 本章小结

本章从AMD显卡的历史简要介绍开始，前半部分介绍了AMD GPU的微架构、指令集和编程模型。中间部分从AMD GPU的异常和陷阱机制入手，介绍了AMD GPU的调试设施，包括波阵控制、地址监视、单步调试、代码断点等。最后两节介绍了交叉调试模型、GPU调试SDK和ROCm-GDB调试器。

AMD公司创建于1969年，比英特尔晚一年成立。在X86 CPU辉煌的时代，AMD一直扮演着次要角色，虽然偶尔有出色的表现，但始终难以扭转大局。随着GPU时代的到来，多年不变的局面开始改变。在GPU领域，AMD显然走在了英特尔前面。这不仅体现在硬件方面，还体现在软件和生态系统方面。经过多年的不懈努力，AMD主导的异构系统架构（HSA）已从最初的构想逐步成为标准和现实。最近几年研发的ROCm软件栈也快速发展，有与CUDA争雄之势。

### 参考资料
1. 2007 Hot Chips 19 AMD’s Radeon™ HD 2900.
2. AMD GRAPHIC CORE NEXT Low Power High Performance Graphics & Parallel Compute.
3. HSA Programmer's Reference Manual: HSAIL Virtual ISA and Programming Model, Compiler Writer, and Object Format (BRIG).
4. AMD GRAPHICS CORES NEXT (GCN) ARCHITECTURE White Paper.
5. Developer Guides, Manuals & ISA Documents.
6. AMD's Revolutionary Mantle Graphics API.
7. Mantle Programming Guide and API Reference.
8. HSA Foundation Members.
9. HSA Foundation Launches New Era of Pervasive, Energy-Efficient Computing with HSA 1.0 Specification Release.
10. ROCm: Platform for GPU Enabled HPC and UltraScale Computing.
11. ROCm Developer Tools and Programing Languages.
12. HSAFoundation项目中的AMD GPU调试SDK.
13. ROCm项目中的AMD GPU调试SDK.
14. ROCm-GDB项目.
15. AMD GPU的在线讨论.

### 第11章 英特尔GPU及其调试设施

本章首先简要介绍英特尔GPU的发展历史和硬件结构，然后详细讨论GPU的多种编程接口，既有传统的MMIO寄存器接口、命令流和环形缓冲区接口，也有新的通过GuC微处理器提交任务的接口，以及适合多任务的状态模型接口。11.8节～11.10节重点介绍英特尔GPU的指令集。