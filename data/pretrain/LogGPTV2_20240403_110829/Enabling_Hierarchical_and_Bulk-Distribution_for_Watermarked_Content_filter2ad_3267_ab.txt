L2: L1 and level 2 tags
L3: L1, L2 and level 3 tags
JPG-compressed image L3 (Q=45)
StirMark #1 on image L3
# Tags
63
107
214
Compared to Original
PSNR
Correl.
.9954
39.88
.9992
49.09
.9985
45.98
43.98
.9976
.9938
38.86
31.02
.9593
Level 1
Tags lost
Level 2
Level 3
4
3
2
9
6.3%
6
4.8%
3.2%
6
14.2% 20
5.6%
5.6%
1
18.6% 41
0.5%
19.2%
Table 2. Tagging information loss through multiple layers
If any one of the distributors in the hierarchy (e.g., dis-
tributors or sub-distributors in the previous example) give
away images without reporting their distribution, it can be
shown that the images were those handed to the suspected
distributor, and not to another one. It is expected that there
is usually only a small fan-out of sub-distributors at each
level, thus tags can easily distinguish between them. The
problem of differentiating between various tagged images
becomes exponentially more difﬁcult if the number of sepa-
rately tagged copies increases. An additional concern is that
a distributor can frame one of their sub-distributors, unless
special delivery protocols (such as [PW97]) are used.
While multi-layer tagging has the nice property that the
computing power necessary to tag data can be delegated to
distributors and sub-distributors, the requirement for online
channels for the media distribution remains. Furthermore,
every distributor must be able to create and insert a new
set of watermarks, which may not be desirable or practi-
cal. Bulk-tagging, as explained in the following section,
removes this requirement by shifting some of the computa-
tional requirements to the ﬁnal customer.
4 Bulk-Tagging
The idea behind bulk tagging is to have the distributor
create a single copy of data that can be given to a large set
of customers without loosing the ability to assign individ-
ual tags to different customers. We will illustrate one such
scheme, using the tagging mechanism presented in Section
2.
Up to this point, a distributor had to tag every copy of
the data separately. Each single copy had then to be deliv-
ered to the customer, over a secure 2 channel. There was no
requirement for the customer to preprocess the data once
it was received. With bulk-tagging, the distributor creates
multiple, tagged versions of the data. He then hides their
contents through cryptographic techniques, and distributes
all of them encoded as a single dataset. Each customer
receives the same data set, but has to obtain an individual
set of keys. Before the customer can access the tagged im-
2Otherwise somebody might intercept the data, abuse it, and the origi-
nal customer would be blamed instead.
Image X
11st lvl distributor 
tagging
T(X,D
) =: X’
11
T(X,D
)) T(X,D
))
33
22
22nd lvl distributor 
tagging
)) T(X,D
) =: X’’
T(X,D
66
55
T(X,D
))
44
iith lvl distributor tagging
T(X,D
))
nn
T(X,D
) =: X’’’
ID
Purchase of X’’’
by customer
Delivery of tagged
image to customer
Figure 4. Distributed tagging.
Image (cid:3) is
tagged repeatedly and differently before dis-
tribution to either sub-distributors, or to end
customers.
age, he must perform some preprocessing. Thus he retrieves
only the tagged data that is meant for him.
The key differences that distinguish bulk-tagging from
previous approaches are that the distributor can create the
tags and the distributable complete image exactly once, and
that the customer is required to perform a precomputation
before the data is intelligible. The preprocessing step at the
client side is often an acceptable requirement which in many
cases the customer won’t even know about. That is because
the computation can be hidden in the customer equipment
that is used for further processing the data, e.g, viewing the
picture on a screen.
Such a bulk-tagging scheme must offer certain features,
to be a viable solution. First of all, a bulk-tagged data
set, decoded for a particular customer, must offer similar
content-quality as if tagged and delivered individually. As
an example, a decoded bulk-tagged image should have the
same quality3 as a traditionally tagged image. Secondly, the
feature of bulk-tagging must be well adapted to the tagging
mechanism such that data volume is not overly expanded
(it is OK to triple the size for some image that can now
be transferred via a CD, but an increase in size of a factor
3In fact, it can be of even better quality, as online processing require-
ments (available CPU and bandwidth) are no longer limiting factors.
1000 is unlikely to be acceptable). The bulk-tagging pro-
cess should also avoid to introduce additional weaknesses
to the tagging scheme. Receiving two bulk-tagged data sets
should give an attacker no more opportunities as he would
have with two differently tagged data sets. Lastly, bulk-
tagging should also support the use of compression, to allow
a reasonable use of available bandwidth or storage capacity.
This relates to the data expansion requirement above, but is
different in that it depends more on the bulk-tagged media
format than on the method of tag introduction.
For example, with bulk tagging a digital image of size
5MB no longer needs to be individually tagged and dis-
tributed, but with some precomputation arrives at a size of
20MB. Every customer then receives the same data set of
20MB, either in an online or off-line fashion, e.g., over a
multicast channel, a ftp mirror, or through the mail on a
CDROM. The 20MB image data, however, is not viewable
by any customer until he has talked to the distributor on-
line, conveyed his registration information, and in turn has
received a set of cryptographic keys (e.g., 1000 of them,
representing about 16KB of data) that can then be used to
decrypt enough of the distributed data set to arrive at a sin-
gle, individually tagged image.
It should be made clear, that this does not mean that the
program the user runs would in any way insert tags into
the data. It only takes the keys the customer receives from
the distributor, and uses those to decrypt speciﬁc instances
of parts of the image. Depending on which keys he got,
differently tagged instances become decryptable. Each cus-
tomer receives a different set of decryption keys and there-
fore ends up with an image with a different set of tags. The
effect is that every customer has an individually tagged im-
age.
This scheme establishes an equivalence between keys
and differently tagged versions of an image. If somebody
were to give away his keys to somebody else, it is the same
as if he were to give away the decoded image. No new
vulnerabilities are introduced through this equivalence, i.e.,
bulk tagged images are in the end not different from tra-
ditional tagged images in that an attacker must be handled
the same way. It can be considered disadvantageous though
that copies of the image can now be distributed with less
communication overhead, because transmitting the keys is
sufﬁcient.
A naive scheme to implement this approach would be
to have one base image where all  spots containing tags
are blacked out, together with a lists of data (one for the
tag being present, and one for the tag being absent) detail-
ing the position information and decryption key identiﬁer.
This would allow to produce an individually tagged image,
while at most doubling the communication overhead, and
maintaining (cid:3)   different keys. Because the decryption
and recombination software runs under the auspices of cus-
Tag on    Tag off
No tag (2 copies)
Figure 7. Process of segmenting an image, and producing different versions of cells. Cells containing
the same tag are grouped together logically, but still encrypted with different keys to hide their
relatedness.
tomers, they can observe the position information (disre-
garding the actual encoding of the watermarks, i.e., spatial
or frequency domain). This would facilitate the removal of
tags altogether, defying the original purpose of tagging.
However, less obvious forms of recombination can be
imagined. Analogous to the (cid:8) out of  share key thresh-
old schemes [Sim92], customers can be required to decrypt
multiple shares for the same image, followed by a mixing
step to obtain usable pictures. Each share may contain sev-
eral disabling or enabling watermark spots, and depending
on which shares get mixed, the net result is a differently
tagged picture. It would also be interesting to ﬁnd a solution
to this problem that works analogous to the one depicted in
[Dro96]. The authors presented a way to create different
messages depending on which (cid:8) out of  slides you com-
bined and looked through. So far, no way has been found to
apply these two ideas to bulk tagging.
After these musings, there is however a simple approach
to make bulk-tagged data delivery (at least in the case of
images) feasible. Take an image with all its potential tag lo-
cations, as depicted in Figure 1. Independent of the tag loca-
tions, overlay a grid, favorably aligned to the cell boundary
of a JPEG compressor, i.e. a 16x16 grid. For each cell in the
grid, determine how many potential tag locations are con-
tained therein. In our example, the minimum spacing of tag
positions is 16 pixels, the complete tag size is 32x32 pix-
els, thus one cell will contain at most one potential tag, and
one tag will be split over at most nine cells. Finally, save
(in this case) two version of each cell (one where the con-
tained tag, if any, is enabled, and one where it is not). The
saved cells optionally are JPEG compressed, and the out-
put of each version of each cell is encrypted with a different
key. Figure 7 illustrates this process.
When a consumer registers with the producer, and asks
for the keys to decrypt his individually tagged copy, the pro-
ducer generates (depending on the customer ID) a random
bit string. Here, each bit stands for one tag position, and in-
dicates whether the tag is to be enabled or not. For each tag,
the cells holding it are determined, and depending on the
state of the tag (on or off) the keys for one of the versions
of the cells is delivered. Thus, the consumer receives one
key for each cell. In the case where no tag is contained in a
cell, the version of the cell is chosen randomly. One should
note that if there were only one version of cells containing
no tags, potential attackers would have help in determining
which cells hold tags. As it is, they can reconstruct the im-
age, and then only run the same attacks that they could have
run otherwise. This includes mixing different versions of
images or parts thereof.
5 Related Work
As mentioned in Section 1, the creation of watermarked
content is computationally expensive, and the secure deliv-
ery of tagged media to each recipient usually requires a sep-
arate transmission. Naturally this is only true when the wa-
termarks are introduced to help enforcing ownership rights.
A different kind of watermarking has the purpose to convey
means of verifying the source or authenticity of the media
[MW98]. In this context, watermarks depend on the source,
and are the same for each recipient – scaling the distribution
of watermarked media is not a problem, and hierarchical
and bulk-tagging do not apply.
When watermarks are used to assure ownership rights,
the media in question can either be distributed on-line or
off-line. For off-line distribution, we are not aware of any
existing solution. Bulk-tagging appears to be a ﬁrst step
in that direction. Watercasting [BPC99] is an interesting
scheme to tie the introduction of watermarks to the on-line
distribution process of media itself.
Intermediate entities
(and transmission errors) in a multicast environment intro-
duce destination-dependent data loss, in effect distributing
the tagging effort and making it part of the data delivery
process. The quality of the media the customer receives can
vary, and network infrastructure components must interact
with the distributor of the media to inform him of whom has
received what subset of data.
Interestingly enough, Schneier [Sch00] claims that dig-
ital watermarking (used to assure ownership rights) ”just
won’t work”. One point he makes is that a customer can
acquire watermarked data under a false identity, and then
distribute the tagged media without fear of repercussion.
This is a very valid concern. Another point he makes is that
”the mechanisms for watermarking will eventually become
public, and when they do, they can be reverse engineered
and removed from the image”. One might reply to this that
the use of a keyed watermarking mechanism changes the
process of introducing and later detecting watermarks to a
process similar the encryption of data. Even though the al-
gorithm is known, it may be hard to detect and remove the
watermarks without knowing the keying information. Time
will tell...
6 Conclusions and Future Work
Watermarking has long been accepted as one mechanism
to protect intellectual property. This paper presented two
novel methods that can be employed to increase the value of
watermarking techniques when a wider (but still limited and
traceable) distribution of the media is intended. The ﬁrst,
called hierarchical watermarking, speciﬁes the iterative ap-
plication of watermarking techniques in a hierarchical fash-
ion. It enables a group of distributors to detect leakage of
tagged data in a fashion similar to how spoofed certiﬁcates
can be detected in a public key hierarchy. It thus results in
the ability to use watermarking in a scalable and trustworthy
manner in distributing systems.
Because watermarking is a technique that allows to
transform the same data into individually tagged copies that
can be distinguished only by a select few, it was generally
accepted such tagged data need to be created and distributed
individually. Our design of a technique named bulk-tagging
shows how it is possible to create a single data set once but
still have it be tagged individually on the consumer side.
While a small amount of user participation is required, we
argue that this is in many scenarios an acceptable trade-
off. Data marked through bulk-tagging is equivalent to data
marked and delivered individually, and does not create sig-
niﬁcant additional security risks.
There is no reason why media producers and (sub-
)distributors should not be allowed to combine the ap-
proaches of bulk- and hierarchical watermarking, leading
to even more ﬂexible usage schemes.
While we presented one proof of concept for how bulk-
tagging works, we see a lot more work that needs to be
done. It would be especially interesting to study which wa-
termarking techniques would fare well with bulk-tagging
for different classes of data, such as movies, images, pro-
gram object and source code, or audio. It would also be
interesting to study the applicability to hierarchical tagging
for more structured data sets (such as program object code),
and to ﬁnd other (stronger) segmentation methods than the
naive splitting of data into independent shares.
Acknowledgments
Many thanks to Radia Perlman and Amit Gupta, for input
and discussions during the formative stages of hierarchical
tagging.
References
[BPC99]
[Car95]
Ian Brown, Colin Perkins, and Jon Crowcroft.
Watercasting: Distributed watermarking of
multicast multimedia.
In First International
Workshop on Networked Group Communica-
tion (NGC99), 1999.
Germano Caronni. Assuring ownership rights
for digital images.
In H. H. Br¨uggemann
and W. Gerhardt-H¨ackl, editors, Proceed-
ings of Reliable IT Systems VIS ’95, Ger-
many, 1995. Vieweg Publishing Company.
”http://www.olymp.org/˜
caronni/WWW-
new/work/papers/givis-ﬁnal.pdf”.
[CKLS96] Ingemar J. Cox, Joe Killian, Tom Leighton, and
Talal Shamoon. A secure, robust watermark
for multimedia.
In Workshop on Information
Hiding. Newton Institute, University of Cam-
bridge, May 1996.
[Dro96]
Stefan Droste. New results on visual cryptogra-
phy. In Crypto ’96, Lecture Notes in Computer
Science vol. 1109, pages 401–415. Springer-
Verlag, 1996.
[Kah96]
David Kahn. The Codebreakers. Scribner, New
York, New York, revised edition, 1996.
[MW98] N. Memon and P. Wong.
Protecting digi-
In Communications of the
tal media content.
ACM,Vol. 41, No. 7, July 1998.
[PAK98]
[PW97]
and
Fabien Petitcolas, Ross Anderson,
Markus G. Kuhn. Attacks on copyright mark-
ing systems.
In Proceedings of the Second
Workshop on Information Hiding, vol. 1525 of
Lecture Notes in Computer Science, Springer
Verlag. pp. 219-239., April 1998.
B. Pﬁtzmann and M. Waidner. Asymmetric ﬁn-
gerprinting for larger collusions. In 4th ACM
Conference on Computer and Communication
Security, 1997.
[Sch00]
Bruce Schneier. Security tricks – digital water-
marking. In Secrets and Lies, pages 248–250.
Wiley Computer Publishing, 2000.
[SHKQ99] Julien P. Stern, Gael Hachez, Franc¸ois Koeune,
and Jean-Jacques Quisquater. Robust object
watermarking: Application to code. In Infor-
mation Hiding Workshop ’99. Springer-Verlag,
1999.
[Sim92]
G.J. Simmons. An introduction to shared secret
and/or shared control schemes and their appli-
cation. In Contemporary Cryptology, The Sci-
ence of Information Integrity, pages 441–497.
IEEE Press, 1992.
[ST98]
T. Sander and C. F. Tschudin. On software pro-
tection via function hiding. Lecture Notes in
Computer Science, 1525:111–123, 1998.
[TNM90] K. Tanaka, Y. Nakamura, and K. Masui. Em-
bedding secret information into a dithered mul-
tilevel image. In Proceedings of the 1990 IEEE
Military Communications Conference, pp. 216-
220, September 1990.