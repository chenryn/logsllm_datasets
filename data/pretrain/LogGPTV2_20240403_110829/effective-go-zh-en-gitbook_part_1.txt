Table of Contents
前言 1.1
引言 1.2
格式化 1.3
注释 1.4
命名 1.5
分号 1.6
控制结构 1.7
函数 1.8
数据 1.9
初始化 1.10
方法 1.11
接口和其他类型 1.12
空白标识符 1.13
内嵌 1.14
并发 1.15
错误 1.16
一个Web服务器 1.17
2
前言
《Effective Go》中英双语版
Effective Go - 《实效 GO 编程》
Introduction
Go is a new language. Although it borrows ideas from existing languages, it has unusual
properties that make effective Go programs different in character from programs written in its
relatives. A straightforward translation of a C++ or Java program into Go is unlikely to
produce a satisfactory result—Java programs are written in Java, not Go. On the other hand,
thinking about the problem from a Go perspective could produce a successful but quite
different program. In other words, to write Go well, it's important to understand its properties
and idioms. It's also important to know the established conventions for programming in Go,
such as naming, formatting, program construction, and so on, so that programs you write will
be easy for other Go programmers to understand.
This document gives tips for writing clear, idiomatic Go code. It augments the language
specification, the Tour of Go, and How to Write Go Code, all of which you should read first.
引言
Go 是一门全新的语言。尽管它从既有的语言中借鉴了许多理念，但其与众不同的特性，使得
用 Go 编程在本质上就不同于其它语言。将现有的 C++ 或 Java 程序直译为 Go 程序并不能令
人满意——毕竟 Java 程序是用 Java 编写的，而不是 Go。 另一方面，若从 Go 的角度去分
析问题，你就能编写出同样可行但大不相同的程序。 换句话说，要想将 Go 程序写得好，就
必须理解其特性和风格。了解命名、格式化、程序结构等既定规则也同样重要，这样你编写
的程序才能更容易被其他程序员所理解。
本文档就如何编写清晰、地道的 Go 代码提供了一些技巧。它是对 语言规范、 Go 语言之旅
以及 如何使用 Go 编程 的补充说明，因此我们建议您先阅读这些文档。
作为 语言的入门必读教程，值得每位初学者好好阅读一遍，编辑成书，方
Effective Go GO
便阅读交流。
当前完成章节（全部完成）：
1. 前言
3
前言
2. 引言
3. 格式化
4. 注释
5. 命名
6. 分号
7. 控制结构
8. 函数
9. 数据
10. 初始化
11. 方法
12. 接口和其他类型
13. 空白标识符
14. 内嵌
15. 并发
16. 错误
17. 一个 Web 服务器
改版说明：@2016.8.6 by bingoHuang, revision to Chinese & English version.
李笑来在他的新书 《人人都是工程师》 中说过一句话： 在中国，对绝大多数人来
说， English + Computer Skills = Freedom （英语 + 计算机技能 = 自由）
我非常的赞同。英语和计算机技能是相辅相成，学习好一门编程语言（如 ）的同
Go
时，还能加强英语学习，何乐而不为。所以我决定将本书改版成中英双语版，方便更多
的人来学习阅读。
特别感谢 Golang 官网提供的英文版教程。
感谢 hellogcc 提供的 中文翻译版一，这是我之前制作中文版电子书所参考的资料，翻译
的很用心。
要更感谢 Go 语言中文社区 提供的 中文翻译版二，此翻译更贴切有味道，不可多得。本
人已和 Go-zh 项目组 沟通过，获取了该社区的授权，故将此作为双语版的中文版本。
参考
参考官方英文版：Effective Go 英文版
参考中文翻译版一：Effective Go 中文版
参考中文翻译版二：Effective Go 中文版
Read, Fork and Star
4
前言
Read on Gitbook
Fork on GitHub
请顺手点一下 ，或者留言讨论，这是对我最大的鼓励！
STAT
License
除特别注明外， 本页内容均采用知识共享 - 署名（CC-BY）3.0 协议授权，代码采用 BSD 协
议 授权。
5
引言
Introduction
引言
Go is a new language. Although it borrows ideas from existing languages, it has unusual
properties that make effective Go programs different in character from programs written in its
relatives. A straightforward translation of a C++ or Java program into Go is unlikely to
produce a satisfactory result—Java programs are written in Java, not Go. On the other hand,
thinking about the problem from a Go perspective could produce a successful but quite
different program. In other words, to write Go well, it's important to understand its properties
and idioms. It's also important to know the established conventions for programming in Go,
such as naming, formatting, program construction, and so on, so that programs you write will
be easy for other Go programmers to understand.
Go 是一门全新的语言。尽管它从既有的语言中借鉴了许多理念，但其与众不同的特性， 使得
使用 Go 编程在本质上就不同于其它语言。将现有的 C++ 或 Java 程序直译为 Go 程序并不能
令人满意——毕竟 Java 程序是用 Java 编写的，而不是 Go。 另一方面，若从 Go 的角度去
分析问题，你就能编写出同样可行但大不相同的程序。 换句话说，要想将 Go 程序写得好，
就必须理解其特性和风格。了解命名、格式化、 程序结构等既定规则也同样重要，这样你编
写的程序才能更容易被其他程序员所理解。
This document gives tips for writing clear, idiomatic Go code. It augments the language
specification, the Tour of Go, and How to Write Go Code, all of which you should read first.
本文档就如何编写清晰、地道的 Go 代码提供了一些技巧。它是对 语言规范、 Go 语言之旅
以及 如何使用 Go 编程 的补充说明，因此我们建议您先阅读这些文档。
Examples
示例
The Go package sources are intended to serve not only as the core library but also as
examples of how to use the language. Moreover, many of the packages contain working,
self-contained executable examples you can run directly from the golang.org web site, such
as this one (if necessary, click on the word"Example"to open it up). If you have a question
about how to approach a problem or how something might be implemented, the
documentation, code and examples in the library can provide answers, ideas and
background.
6
引言
Go 包的源码 不仅是核心库，同时也是学习如何使用 Go 语言的示例源码。 此外，其中的一
些包还包含了可工作的，独立的可执行示例，你可以直接在 golang.org 网站上运行它们，比
如 这个例子 （单击文字 “示例” 来展开它）。如果你有任何关于某些问题如何解决，或某些东
西如何实现的疑问， 也可以从中获取相关的答案、思路以及后台实现。
7
格式化
Formatting
格式化
Formatting issues are the most contentious but the least consequential. People can adapt to
different formatting styles but it's better if they don't have to, and less time is devoted to the
topic if everyone adheres to the same style. The problem is how to approach this Utopia
without a long prescriptive style guide.
格式化问题总是充满了争议，但却始终没有形成统一的定论。虽说人们可以适应不同的编码
风格， 但抛弃这种适应过程岂不更好？若所有人都遵循相同的编码风格，在这类问题上浪费
的时间将会更少。 问题就在于如何实现这种设想，而无需冗长的语言风格规范。
With Go we take an unusual approach and let the machine take care of most formatting
issues. The gofmt program (also available as go fmt, which operates at the package level
rather than source file level) reads a Go program and emits the source in a standard style of
indentation and vertical alignment, retaining and if necessary reformatting comments. If you
want to know how to handle some new layout situation, run gofmt; if the answer doesn't
seem right, rearrange your program (or file a bug about gofmt), don't work around it.
在 Go 中我们另辟蹊径，让机器来处理大部分的格式化问题。gofmt 程序（也可用 go fmt，它
以包为处理对象而非源文件）将 Go 程序按照标准风格缩进、 对齐，保留注释并在需要时重
新格式化。若你想知道如何处理一些新的代码布局，请尝试运行 gofmt；若结果仍不尽人意，
请重新组织你的程序（或提交有关 gofmt 的 Bug），而不必为此纠结。
As an example, there's no need to spend time lining up the comments on the fields of a
structure. Gofmt will do that for you. Given the declaration
举例来说，你无需花时间将结构体中的字段注释对齐，gofmt 将为你代劳。 假如有以下声
明：
type T struct {
name string // name of the object
value int // its value
}
type T struct {
name string // 对象名
value int // 对象值
}
8
格式化
gofmt will line up the columns:
gofmt 会将它按列对齐为：
type T struct {
name string // name of the object
value int // its value
}
type T struct {
name string // 对象名
value int // 对象值
}
All Go code in the standard packages has been formatted with gofmt.
标准包中所有的 Go 代码都已经用 gofmt 格式化过了。
Some formatting details remain. Very briefly:
还有一些关于格式化的细节，它们非常简短：
Indentation
We use tabs for indentation and gofmt emits them by default. Use spaces only if you
must.
Line length
Go has no line length limit. Don't worry about overflowing a punched card. If a line
feels too long, wrap it and indent with an extra tab.
Parentheses
Go needs fewer parentheses than C and Java: control structures (if, for, switch) do
not have parentheses in their syntax. Also, the operator precedence hierarchy is short
er and clearer, so
x<<8 + y<<16
means what the spacing implies, unlike in the other languages.
缩进
我们使用制表符（tab）缩进，gofmt 默认也使用它。在你认为确实有必要时再使用空格。
行的长度
Go 对行的长度没有限制，别担心打孔纸不够长。如果一行实在太长，也可进行折行并插入适当的 tab 缩进。
括号
比起 C 和 Java，Go 所需的括号更少：控制结构（if、for 和 switch）在语法上并不需要圆括号。此外，操
作符优先级处理变得更加简洁，因此
x<<8 + y<<16
正表述了空格符所传达的含义。
9
格式化
10
注释
Commentary
注释
Go provides C-style /* */ block comments and C++-style // line comments. Line
comments are the norm; block comments appear mostly as package comments, but are
useful within an expression or to disable large swaths of code.
Go 语言支持 C 风格的块注释 /* */ 和 C++ 风格的行注释 // 。 行注释更为常用，而块注
释则主要用作包的注释，当然也可在禁用一大段代码时使用。
The program—and web server—godoc processes Go source files to extract documentation
about the contents of the package. Comments that appear before top-level declarations, with
no intervening newlines, are extracted along with the declaration to serve as explanatory text
for the item. The nature and style of these comments determines the quality of the
documentation godoc produces.
godoc 既是一个程序，又是一个 Web 服务器，它对 Go 的源码进行处理，并提取包中的文档
内容。 出现在顶级声明之前，且与该声明之间没有空行的注释，将与该声明一起被提取出
来，作为该条目的说明文档。 这些注释的类型和风格决定了 godoc 生成的文档质量。
Every package should have a package comment, a block comment preceding the package
clause. For multi-file packages, the package comment only needs to be present in one file,
and any one will do. The package comment should introduce the package and provide
information relevant to the package as a whole. It will appear first on the godoc page and
should set up the detailed documentation that follows.
每个包都应包含一段包注释，即放置在包子句前的一个块注释。对于包含多个文件的包， 包
注释只需出现在其中的任一文件中即可。包注释应在整体上对该包进行介绍，并提供包的相
关信息。 它将出现在 godoc 页面中的最上面，并为紧随其后的内容建立详细的文档。
11
注释
/*
Package regexp implements a simple library for regular expressions.
The syntax of the regular expressions accepted is:
regexp:
concatenation { '|' concatenation }
concatenation:
{ closure }
closure:
term [ '*' | '+' | '?' ]
term:
'^'
'$'
'.'
character
'[' [ '^' ] character-ranges ']'
'(' regexp ')'
*/
package regexp
/*
regexp 包为正则表达式实现了一个简单的库。
该库接受的正则表达式语法为：
正则表达式:
串联 { '|' 串联 }
串联:
{ 闭包 }