### 1. 存储需求

对于网络数据包的存储，100 GB 的存储空间足以保留4天的数据。尽管 MWN 和 UCB 需要更高的缓冲区容量，但在这些高流量环境中，1-1.5 TB 的缓冲区就足够提供多日的历史网络流量记录。这种存储量在商用磁盘系统的能力范围内，并且比存储完整流量所需的存储量少一个数量级。

### 2. 时间机器设计

本节概述了时间机器（TM）内部架构及其查询和远程控制接口的设计，这使得 TM 可以与实时网络入侵检测系统（NIDS）结合使用（见 §5）。我们所展示的内容是对原始方法 [15] 的全面改进，通过实践发现，原方法在性能和操作灵活性方面存在显著不足。

#### 3.1 架构

虽然在某些方面 TM 可以被视为数据库，但它与传统数据库有以下几点不同：(i) 数据不断流入和流出系统（过期），(ii) 它只需要支持有限的查询语言而不是完整的 SQL，(iii) 它需要遵守实时约束以避免无法充分处理传入的数据流。

因此，我们基于图 2 所示的多线程架构来构建 TM。该结构可以利用多个 CPU 核心来分离记录、索引操作以及外部控制交互。捕获线程负责从网络 TAP 捕获数据包、分类数据包、监控截止条件并将数据包分配到适当的存储类中。索引线程维护索引数据，以便查询线程能够高效地定位和检索内存或磁盘中的缓存数据包。索引聚合线程对存储在磁盘上的索引文件进行额外的簿记工作（合并较小的索引文件为较大的文件），用户界面线程则处理 TM 与用户或远程应用程序（如 NIDS）之间的交互。

**数据包捕获**：捕获线程使用 libpcap 访问监控链路上的数据包，并可能对其进行预过滤。然后将数据包传递给分类阶段。

**分类**：分类阶段通过维护所有当前活动流的表（由常用的五元组标识）将数据包映射到连接。对于每个连接，TM 存储已看到的字节数。利用这些计数器，分类组件通过丢弃超过限制的所有后续数据包来执行截止操作。除了管理截止外，分类还为每个连接分配一个存储类。存储类定义了适用于连接数据的 TM 参数（截止限制和内存及磁盘缓冲区预算）。

**存储类**：每个存储类由两个组织成 FIFO 的缓冲区组成，一个位于主内存中，另一个位于磁盘上。TM 首先填充内存缓冲区。一旦内存缓冲区满，TM 将最旧的数据包迁移到磁盘缓冲区。首先在主内存中缓冲数据包使 TM 能够 (i) 更好地容忍带宽峰值，通过在写入磁盘之前将其吸收在内存中；(ii) 快速访问最新的数据包以进行短期查询，如 §5.4 中所述。

**索引**：TM 为缓存的数据包建立索引以实现快速访问。然而，TM 并不是引用单个数据包，而是索引与关联索引键在网络中出现的时间间隔。索引可以根据所需查询类型配置为任何数据包头部字段的子集。例如，设置源地址和目标地址二元组的索引可高效查询两主机之间的所有流量。索引根据被索引数据是否已迁移到磁盘而存储在主内存或磁盘上。

#### 3.2 控制与查询接口

TM 提供三种不同的接口，支持请求符合特定标准的存储数据包的查询，以及通过更改参数（如截止限制）来控制 TM 的操作。对于交互式使用，它提供了一个命令行控制台，操作员可以直接输入查询和命令。对于与其他应用程序的交互，TM 通过远程网络连接通信，接受其语言中的语句并返回查询结果。最后，结合这两种方式，我们开发了一个独立的客户端程序，允许用户通过指定更高级别的术语来发出最常见的查询（例如，给定主机的所有流量）。

查询处理如下：查询必须与 TM 维护的一个索引相关联。系统随后在相应的索引中查找查询键，检索对应的数据包数据，并将其交付给查询应用程序。我们的系统支持两种交付方法：将请求的数据包写入输出文件或将它们通过网络连接发送给请求者。在这两种情况下，TM 以 libpcap 格式返回数据。默认情况下，查询涵盖系统管理的所有数据，如果引用的数据包存储在磁盘上，则可能会非常耗时。因此，查询接口也支持仅限于特定时间间隔或仅限内存（不搜索磁盘）的查询。

此外，除了支持已捕获数据包的查询，查询发起者还可以表达对接收未来匹配搜索条件的数据包的兴趣（例如，因为查询是在连接中间发起的，现在连接的其余部分变得有趣）。为了处理这些情况，TM 支持按连接粒度实现的查询订阅。

查询和控制命令都用 TM 的交互语言语法指定；图 3 显示了几个示例。第一个查询请求指定端点之间的 TCP 连接的数据包，使用 conn4 四元组索引找到这些数据包。TM 将数据包流发送到接收系统 nids-61367-0（“feed”），并在每个数据包中包含不透明标签 t35654，以便接收者知道将数据包与哪个查询关联。最后，“subscribe” 表示此查询也是对未来与此连接相关的数据包的订阅。

第二个示例请求所有与 IP 地址 1.2.3.4 相关的驻留在内存中的数据包，并指示 TM 将它们复制到本地文件 x.pcap。时间间隔通过 start 和 end 选项进行限制。最后一个示例将涉及 5.6.7.8 的所有流量类更改为“alarm”类。

### 4. 性能评估

我们在受控环境和 MWN 与 LBNL 的实际部署中评估了 TM 的性能（见 §2）。MWN 部署使用 15 KB 的截止限制、750 MB 的内存缓冲区大小、2.1 TB 的磁盘缓冲区大小以及四个不同的索引（conn4, conn3, conn2, ip）。TM 在配备双 CPU AMD Opteron 244（1.8 GHz）、4 GB 内存、运行 64 位 Gentoo Linux 内核（版本 2.6.15.1）和 1 Gbps Endace DAG 网络监控卡 [12] 的系统上运行。在 LBNL，我们使用 15 KB 的截止限制、150 MB 的内存和 500 GB 的磁盘存储，三个索引（conn4, conn3, ip）。TM 在配备 FreeBSD 6.2、两个双核 Intel Pentium D 3.7 GHz CPU、3.5 TB RAID 存储系统和 Neterion 10 Gbps NIC 的系统上运行。

**4.1 录制**

我们在 2008 年 1 月 11 日晚上 7 点开始在 MWN 运行，并持续了 19 天。在 LBNL，测量从 2007 年 12 月 13 日上午 7 点开始，并持续了 26 天。虽然 MWN 设置是独立运行的，但 LBNL 的 TM 与一个 NIDS 结合使用，该 NIDS 发送查询并控制 TM 的操作。

图 4 显示了应用 15 KB 截止前后的带宽情况。