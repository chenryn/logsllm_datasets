-0.81%
-0.34%
-0.08%
-0.12%
-0.94%
-1.63%
-0.13%
-0.16%
-0.05%
-0.08%
-0.51%
-0.96%
-4.15%
-5.25%
-1.44%
-3.01%
-1.18%
-1.47%
2.46%
1.68%
26.06%
1.08%
0.52%
7.32%
34.68%
20.04%
4.59%
0.11%
-0.02%
-1.78%
0.02%
0.02%
-0.24%
-5.82%
-1.88%
-0.69%
0%
0%
0%
0%
0%
0%
0%
0.01%
0.04%
a ∆E, ∆S and ∆D are calculated by removing all screen-on/off trafﬁc from the original traces
b ∆E, ∆S and ∆D are calculated by removing the screen-off trafﬁc of one process from the original traces
c Min and max refer to the minimum and maximum energy saving |∆E| across all users, respectively.
Table 4: Radio resource and energy impact of screen-on/off trafﬁc and top processes for screen-off trafﬁc.
compared with screen-on trafﬁc, and these gaps are larger when Ti
is smaller, i.e., applying fast dormancy more aggressively. So in or-
der to achieve the same energy saving for screen-off and screen-on
trafﬁc, the Ti should be set to a much smaller value for screen-on
trafﬁc, incurring much larger ∆S and ∆D. However, the respon-
siveness requirement when the screen is on is actually higher, hence
a higher ∆D for screen-on trafﬁc is not acceptable. A better strat-
egy would be being more aggressive (a smaller Ti) for screen-off
trafﬁc, which produces signiﬁcant energy savings, and more con-
servative (a relatively larger Ti) for screen-on trafﬁc, which limits
the negative impact on user experience, though with less energy
savings. For example, when Ti = 8s, there is 42% energy sav-
ings with 52% ∆S and 40% ∆D for screen-off trafﬁc, and when
Ti = 4s, for screen-on trafﬁc, though the energy saving is small
(24%), ∆S (43%) and ∆D (30%) are also limited. With these two
fast dormancy settings, for the whole trafﬁc, we can achieve 34%
energy saving, with 47.04% ∆S and 35.21% ∆D. This is a better
tradeoff than one single Ti setting for both screen-on and screen-off
trafﬁc.
Besides fast dormancy, batching [14, 6] is also proposed for op-
timizing mobile trafﬁc.
In Table 5, we compare fast dormancy
and batching under different settings for all applications together,
and also individually for two applications, Facebook representing
the Scattered group and Google Music representing the Gathered
group. For fast dormancy, with reduced E, there is increased S, D,
while for batching, all E, S, D are decreased. This is because for
fast dormancy, since UE demotes to RRC_IDLE earlier, there would
be more promotions resulting in increased S, D, while for batch-
ing, since the trafﬁc pattern is altered, scattered packets are gath-
ered into groups and hence there are less promotions. Notice that
the metric D here does not include the delay of packets incurred
by batching. In this work, we only focus on batching for screen-
off trafﬁc, since any delay for screen-on trafﬁc is likely to be more
perceptible to users.
In Table 5, when applying fast dormancy to all applications, we
set a different Ti for screen-on/off trafﬁc, i.e., Ti,on and Ti,of f .
For simplicity, let  stands for the case when Ti,on = a sec-
onds and Ti,of f = b seconds. Based on Figure 1, we empirically
select two values for Ti,on and Ti,of f , 4s as an aggressive setting
and 8s as a conservative setting. Compared with , reduc-
ing Ti,on to 4s, i.e., , only saves 4.21% energy additionally.
Figure 1: Effectiveness comparison of fast dormancy.
although the Facebook process does not generate the most screen-
off trafﬁc, it has the largest energy impact among all processes, i.e.,
5.25% of the total network energy can be saved by only removing
Facebook’s screen-off trafﬁc, and for some users this number could
be as high as 34.68%.
4.2 Trafﬁc Optimization
Based on the above analysis, we ﬁnd that screen-off trafﬁc has
a clearly different pattern compared to screen-on trafﬁc, and ac-
counts for a huge proportion of the UE network energy E, sig-
naling overhead S and channel scheduling delay D. At the same
time, because screen-off trafﬁc is likely to be more delay-tolerant
(see discussions in §1), it is more amenable to more aggressive op-
timization efforts. Intuitively a trafﬁc optimization approach that
is appropriately tuned to the two different trafﬁc categories would
yield signiﬁcant efﬁciencies. To verify this intuition, we study two
common optimization techniques, fast dormancy and batching.
We ﬁrst compare applying fast dormancy to screen-on and screen-
off trafﬁc with a separate Ti settings. The default setting of the
RRC_CONNECTED inactivity timer is 11.58 seconds for a major LTE
ISP [9]. In Figure 1, we vary the setting of Ti from 10 seconds to 2
seconds with a step-size of 2 seconds (from left to right in Figure 1)
and calculate the ∆(E, S, D) relative to when fast dormancy is not
applied. We observe that for the same Ti setting, there is a higher
energy saving ∆E and a lower ∆S and ∆D for screen-off trafﬁc,
 0 0.2 0.4 0.6 0.8 1 1.2 1.4 1.6 0 0.1 0.2 0.3 0.4 0.5 0.6∆-∆E∆S: screen-on∆D: screen-on∆S: screen-off∆D: screen-off361Process name
Optimization
Settings
b = 8s, Ti,of f
b = 8s
Fast dormancy
Batching
Fast dormancy +
Batching
Fast dormancy +
Batching
Fast dormancy +
Batching
All applications
Facebookc
Google Musicc
Ti,on
Ti,on = 4s, Ti,of f = 8s
Ti,on = 8s, Ti,of f = 4s
Ti,on = 4s, Ti,of f = 4s
Only for screen-off, α = 50s, β = 10s
Only for screen-off, α = 50s, β = 5s
Only for screen-off, α = 100s, β = 10s
Only for screen-off, α = 100s, β = 5s
Ti,on = 8s, Ti,of f = 4s, batching only
for screen-off trafﬁc, α = 100s, β = 5s
Ti,on = 8s, Ti,of f = 4s, batching only
for screen-off trafﬁc, α = 100s, β = 5s
Ti,on = 8s, Ti,of f = 4s, batching only
for screen-off trafﬁc, α = 100s, β = 5s
∆Da
∆Ea
∆Sa
13.14%
-16.39% 16.95%
21.26%
-20.60% 28.29%
35.21%
-34.44% 47.04%
-38.66% 58.38%
43.31%
-22.33% -6.24% -11.27%
-27.15% -6.24% -10.67%
-36.72% -30.00% -33.43%
-40.79% -30.00% -34.25%
-60.92% -25.33% -30.59%
-60.19% -36.27% -34.93%
-57.30%
7.12%
-21.11%
a ∆E, S, D are relative to the E, S, D of all trafﬁc for the speciﬁc application.
b Ti,on is the inactivity threshold of fast dormancy for screen-on trafﬁc, and Ti,of f is for screen-off trafﬁc.
c For these two application rows, we consider the trafﬁc of only one speciﬁc application, excluding that from other applications.
Table 5: Trafﬁc optimization with fast dormancy and batching.
And  has 11.34% reduction in S and 8.10% reduction in
D, with only 4.22% less energy saving, compared with .
This veriﬁes that a different setting for Ti,on and Ti,of f balances
the tradeoff of saving energy and reducing overhead, and we select
 as a reasonable setting. Notice that there are other possible
parameter settings representing different aggressiveness with dif-
ferent energy saving and overhead, which may be more appropriate
for different settings.
In Table 5, batching applied to the screen-off trafﬁc is able to
reduce all E, S, and D. Notice that we do not apply batching for
screen-on trafﬁc since it may affect the user experience, e.g., when
the user is waiting for a response at real time. We observe that
most of the screen-off trafﬁc (in terms of the energy impact) is less
delay-sensitive, e.g., push notiﬁcation, since user interaction is not
involved. However, there are also some exceptions for screen-off
applications which requires real-time data transfer, e.g., when the
user is making a VoIP call with the screen off. Ideally, trafﬁc from
these delay-sensitive applications should not be batched even dur-
ing screen-off stage. In this study, we do not attempt to completely
solve this problem, instead, we show an upper bound of the beneﬁt
by batching all screen-off trafﬁc. In reality, we need to prioritize
delay-sensitive trafﬁc during screen-off stage, and we leave it to fu-
ture study. In §2.4, we discuss that the choice of α and β values is
limited by the available bandwidth for 3G/4G networks. Compar-
ing among the empirically selected candidate settings in Table 5, α
= 100s and β = 5s is a better setting, which saves up to 40.79% en-
ergy, with a 30.00% reduction in S and 34.25% in D. Notice that
the α and β settings studied are just example settings that work
well in practice. The goal is to demonstrate the beneﬁt of batching
for screen-off trafﬁc and the selection of optimal settings is left to
future work.
Then we evaluate applying fast dormancy and batching jointly
for all applications and for two sample applications, with the set-
tings speciﬁed in Table 5. For all applications, there is a total net-
work energy saving of 60.19%, with 25.33% reduction in S and
30.59% reduction in D. Facebook has similar energy saving, and
due to its more “scattered” trafﬁc pattern for screen-off trafﬁc, the
batching optimization results in even more reduction for S and D.
However, for Google Music, whose trafﬁc is already “gathered”
as large bursts, the impact of fast dormancy is more obvious than
batching, hence the reduction for D is smaller and there is even an
increase in S, unlike the other two scenarios.
5. DISCUSSIONS AND CONCLUSION
In this study, we took a ﬁrst step towards understanding the im-
pact of screen status on cellular application trafﬁc behavior. Our
evaluations in the context of LTE cellular networks, show that al-
though the number of packets and total payload for screen-off traf-
ﬁc are much smaller than that for screen-on trafﬁc, the former ac-
counts for a disproportionate majority (58.55%) of the total net-
work energy consumed by a device. Exploration of resource opti-
mization techniques like fast dormancy and batching indicate that
the strategy of optimizing the screen-off trafﬁc more aggressively
than screen-on trafﬁc can realize substantial resource savings, with-
out adversely impacting user experience.
We are pursuing this research further, ﬁrst to explore screen-off
trafﬁc in greater detail and explore optimization strategies tailored
to the potentially different delay-requirements of subsets of that
trafﬁc. Second, in this paper, our optimization strategies imposed
the strict constraint that screen-on trafﬁc should not suffer any addi-
tional delays that come with trafﬁc shaping approaches. In reality,
some limited delay jitter would be tolerable depending on the ap-
plication and trafﬁc semantics - this is be an additional source of
resource optimization beyond the savings we have shown in this
paper. Finally, logistics permitting, it would be nice to extend the
study to a larger user group.
6. ACKNOWLEDGEMENT
We thank Chen-nee Chuah for her many helpful comments and
suggestions for improving the ﬁnal version of this paper. We also
thank the anonymous reviewers for their feed- back and helpful
suggestions. This research was partially supported by the National
Science Foundation under grants CNS-1111699, CNS-1059372,
CNS-0939707, and CNS-1050157.
3627. REFERENCES
[1] 3GPP LTE. http://www.3gpp.org/LTE.
[2] UE "Fast Dormancy" behavior. 3GPP discussion and
decision notes R2-075251, 2007.
[3] Conﬁguration of fast dormancy in release 8. 3GPP
discussion and decision notes RP-090960, 2009.
[4] System impact of poor proprietary fast dormancy. 3GPP
discussion and decision notes RP-090941, 2009.
[5] Y. Agarwal, R. Chandra, A. Wolman, P. Bahl, K. Chin, and
R. Gupta. Wireless wakeups revisited: energy management
for VoIP over WiFi smartphones. In MobiSys, 2007.
[6] N. Balasubramanian, A. Balasubramanian, and
A. Venkataramani. Energy Consumption in Mobile Phones:
A Measurement Study and Implications for Network
Applications. In IMC, 2009.
[7] M. Chuah, W. Luo, and X. Zhang. Impacts of Inactivity
Timer Values on UMTS System Capacity. In Wireless
Communications and Networking Conference, 2002.
[8] H. Holma and A. Toskala. HSDPA/HSUPA for UMTS: High
Speed Radio Access for Mobile Communications. John
Wiley and Sons, Inc., 2006.
[9] J. Huang, F. Qian, A. Gerber, Z. M. Mao, S. Sen, and
O. Spatscheck. A Close Examination of Performance and
Power Characteristics of 4G LTE Networks. In MobiSys,
2012.
[10] S. Kang, J. Lee, H. Jang, H. Lee, Y. Lee, S. Park, T. Park,
and J. Song. Seemon: scalable and energy-efﬁcient context
monitoring framework for sensor-rich mobile environments.
In MobiSys, 2008.
[11] C.-C. Lee, J.-H. Yeh, and J.-C. Chen. Impact of inactivity
timer on energy consumption in WCDMA and CDMA2000.
In the Third Annual Wireless Telecommunication Symposium
(WTS), 2004.
[12] P. P. C. Lee, T. Bu, and T. Woo. On the Detection of
Signaling DoS Attacks on 3G Wireless Networks. 2007.
[13] J. Perez-Romero, O. Sallent, R. Agusti, and M. Diaz-Guerra.
Radio resource management strategies in UMTS. John Wiley
and Sons, Inc., 2005.
[14] F. Qian, Z. Wang, Y. Gao, J. Huang, A. Gerber, Z. M. Mao,
S. Sen, and O. Spatscheck. Periodic Transfers in Mobile
Applications: Network-wide Origin, Impact, and
Optimization. In World Wide Web, 2012.
[15] F. Qian, Z. Wang, A. Gerber, Z. M. Mao, S. Sen, and
O. Spatscheck. Characterizing Radio Resource Allocation
for 3G Networks. In IMC, 2010.
[16] F. Qian, Z. Wang, A. Gerber, Z. M. Mao, S. Sen, and
O. Spatscheck. TOP: Tail Optimization Protocol for Cellular
Radio Resource Allocation. In Proc. ICNP, 2010.
[17] F. Qian, Z. Wang, A. Gerber, Z. M. Mao, S. Sen, and
O. Spatscheck. Proﬁling Resource Usage for Mobile
Applications: a Cross-layer Approach. In MobiSys, 2011.
[18] M. Ra, J. Paek, A. Sharma, R. Govindan, M. Krieger, and
M. Neel. Energy-delay tradeoffs in smartphone applications.
In MobiSys, 2010.
[19] S. Sesia, I. Touﬁk, and M. Baker. LTE: The UMTS Long
Term Evolution From Theory to Practice. John Wiley and
Sons, Inc., 2009.
[20] A. Shye, B. Sholbrock, and M. G. Into the wild: Studying
real user activity patterns to guide power optimization for
mobile architectures. In Micro, 2009.
[21] Y. Wang, J. Lin, M. Annavaram, Q. Jacobson, J. Hong,
B. Krishnamachari, and N. Sadeh. A framework of energy
efﬁcient mobile sensing for automatic user state recognition.
In MobiSys, 2009.
363