mach_msg_type_number_t data_count);
8.6.9. mach_vm_copy()
mach_vm_copy() copies one memory region to another within the same task. The source and destination
regions must both already be allocated. Their protection attributes must permit reading and writing,
respectively. Moreover, the two regions can overlap. mach_vm_copy() has the same effect as a
mach_vm_read() followed by a mach_vm_write().
kern_return_t
mach_vm_copy(vm_map_t target_task,
mach_vm_address_t source_address,
mach_vm_size_t count,
mach_vm_address_t dest_address);
Comparing Mach VM Routines with Mach IPC Routines
for Memory Transfer
Since large amounts of datatheoretically, entire address spacescan be transferred through
Mach IPC, it is interesting to note the difference between Mach VM routines and Mach IPC
messaging when sending data from one task to another. In the case of a Mach VM routine
such as mach_vm_copy() or mach_vm_write(), the calling task must have send rights to the
control port of the target task. However, the target task does not have to participate in the
transferit can be passive. In fact, it could even be suspended. In the case of Mach IPC, the
sender must have send rights to a port that the receiving task has receive rights to.
Additionally, the receiving task must actively receive the message. Moreover, Mach VM
routines allow memory to be copied at a specific destination address in the target address
space.
8.6.10. mach_vm_wire()
mach_vm_wire() alters the given memory region's pageability: If the wired_access argument is one of
VM_PROT_READ, VM_PROT_WRITE, VM_PROT_EXECUTE, or a combination thereof, the region's pages are
protected accordingly and wired in physical memory. If wired_access is VM_PROT_NONE, the pages are
unwired. Since wiring pages is a privileged operation, vm_wire() requires send rights to the host's control
port. The host_get_host_priv_port() routine, which itself requires superuser privileges, can be used to
acquire these rights.
kern_return_t
mach_vm_wire(host_priv_t host,
vm_map_t target_task,
mach_vm_address_t address,
mach_vm_size_t size,
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 39 of 135
vm_prot_t wired_access);
Unlike other Mach VM routines discussed so far, mach_vm_wire() is exported by the host_priv MIG
subsystem.
8.6.11. mach_vm_behavior_set()
mach_vm_behavior_set() specifies the expected page reference behaviorthe access patternfor the given
memory region. This information is used during page-fault handling to determine which pages, if any, to
deactivate based on the memory access pattern.
kern_return_t
mach_vm_behavior_set(vm_map_t target_task,
mach_vm_address_t address,
mach_vm_size_t size,
vm_behavior_t behavior);
The behavior argument can take the following values:
 VM_BEHAVIOR_DEFAULT the default behavior for all nascent memory
 VM_BEHAVIOR_RANDOM random access pattern
 VM_BEHAVIOR_SEQUENTIAL sequential access (forward)
 VM_BEHAVIOR_RSEQNTL sequential access (reverse)
 VM_BEHAVIOR_WILLNEED will need these pages in the near future
 VM_BEHAVIOR_DONTNEED will not need these pages in the near future
The kernel maps the VM_BEHAVIOR_WILLNEED and VM_BEHAVIOR_DONTNEED reference behavior
specifications to the default behavior, which assumes a strong locality of reference.
mach_vm_behavior_set() is analogous to the madvise() system call. In fact, the Mac OS X madvise()
implementation is a simple wrapper around the in-kernel equivalent of mach_vm_behavior_set().
Since the expected reference behavior is applied to a memory range, the behavior setting is recorded as
part of the VM map entry structure (struct vm_map_entry [osfmk/vm/vm_map.h]). Upon a page fault,
the fault handler uses the behavior setting to determine which, if any, of the active pages are uninteresting
enough to be deactivated. This mechanism also uses the sequential and last_alloc fields of the VM
object structure (struct vm_object [osfmk/vm/vm_object.h]). The sequential field records the
sequential access size, whereas last_alloc records the last allocation offset in that object.
If the reference behavior is VM_BEHAVIOR_RANDOM, the sequential access size is always kept as the page
size, and no page is deactivated.
If the behavior is VM_BEHAVIOR_SEQUENTIAL, the page-fault handler examines the current and last
allocation offsets to see if the access pattern is indeed sequential. If so, the sequential field is
incremented by a page size, and the immediate last page is deactivated. If, however, the access is not
sequential, the fault handler resets its recording by setting the sequential field to the page size. No page
is deactivated in this case. The handling of VM_BEHAVIOR_RSEQNTL is similar, except the notion of
sequential is reversed.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 40 of 135
In the case of VM_BEHAVIOR_DEFAULT, the handler attempts to establish an access pattern based on the
current and last offsets. If they are not consecutive (in units of a page), the access is deemed random, and
no page is deactivated. If they are consecutive, whether increasing or decreasing, the handler increments
the sequential field by a page size. If the pattern continues and the recorded sequential access size
exceeds MAX_UPL_TRANSFER (256) pages, the page that is MAX_UPL_TRANSFER pages away (behind or
forward, depending on the direction) is deactivated. While the recorded sequential access size remains less
than MAX_UPL_TRANSFER, no page is deactivated. If, however, the pattern is broken, the sequential access
size is reset to the page size.
Page deactivation involves calling vm_page_deactivate() [osfmk/vm/vm_resident.c], which returns
the page to the inactive queue.
8.6.12. mach_vm_msync()
mach_vm_msync() synchronizes the given memory range with its pager.
kern_return_t
mach_vm_msync(vm_map_t target_task,
mach_vm_address_t address,
mach_vm_size_t size,
vm_sync_t sync_flags);
The sync_flags argument is the bitwise OR of synchronization bits defined in . The
following are examples of valid combinations.
 VM_SYNC_INVALIDATE flushes pages in the given memory range, returning only precious pages to
the pager and discarding dirty pages.
 If VM_SYNC_ASYNCHRONOUS is specified along with VM_SYNC_INVALIDATE, both dirty and precious
pages are returned to the pager, but the call returns without waiting for the pages to reach the
backing store.
 VM_SYNC_SYNCHRONOUS is similar to VM_SYNC_ASYNCHRONOUS, but the call does not return until the
pages reach the backing store.
 When either VM_SYNC_ASYNCHRONOUS or VM_SYNC_SYNCHRONOUS is specified by itself, both dirty
and precious pages are returned to the pager without flushing any pages.
 If VM_SYNC_CONTIGUOUS is specified, the call returns KERN_INVALID_ADDRESS if the specified
memory range is not mapped in its entiretythat is, if the range has a hole in it. Nevertheless, the call
still completes its work as it would have if VM_SYNC_CONTIGUOUS were not specified.
Precious Pages
A precious page is used when only one copy of its data is desired. There may not be a copy
of a precious page's data both in the backing store and in memory. When a pager provides a
precious page to the kernel, it means that the pager has not necessarily retained its own copy.
When the kernel must evict such pages, they must be returned to the pager, even if they had
not been modified while resident.
mach_vm_msync() is analogous to the msync() system call. In fact, the msync() implementation uses the
in-kernel equivalent of mach_vm_sync(). POSIX.1 requires msync() to return an ENOMEM error if there are
holes in the region being synchronized. Therefore, msync() always sets the VM_SYNC_CONTIGUOUS bit
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 41 of 135
before calling the in-kernel version of mach_vm_msync(). If the latter returns KERN_INVALID_ADDRESS,
msync() TRanslates the error to ENOMEM.
8.6.13. Statistics
System-wide VM statistics can be retrieved using the HOST_VM_INFO flavor of the host_statistics()
Mach routine. The vm_stat command-line program also displays these statistics.
$ vm_stat
Mach Virtual Memory Statistics: (page size of 4096 bytes)
Pages free: 144269.
Pages active: 189526.
Pages inactive: 392812.
Pages wired down: 59825.
"Translation faults": 54697978.
Pages copy-on-write: 800440.
Pages zero filled: 38386710.
Pages reactivated: 160297.
Pageins: 91327.
Pageouts: 4335.
Object cache: 205675 hits of 378912 lookups (54% hit rate)
mach_vm_region() returns information about a memory region in the given address space. The address
argument specifies the location at which mach_vm_region() starts to look for a valid region. The
outbound values of address and size specify the range of the region actually found. The flavor
argument specifies the type of information to retrieve, with info pointing to a structure appropriate for the
flavor being requested. For example, the VM_REGION_BASIC_INFO flavor is used with a
vm_region_basic_info structure. The count argument specifies the size of the input buffer in units of
natural_t. For example, to retrieve information for the VM_REGION_BASIC_INFO flavor, the size of the
input buffer must be at least VM_REGION_BASIC_INFO_COUNT. The outbound value of count specifies the
size of the data filled in by the call.
kern_return_t
mach_vm_region(vm_map_t target_task,
mach_vm_address_t *address,
mach_vm_size_t *size,
vm_region_flavor_t flavor,
vm_region_info_t info,
mach_msg_type_number_t *info_count,
mach_port_t *object_name);
Note that a task should be suspended before mach_vm_region() is called on it, otherwise the results
obtained may not provide a true picture of the task's VM situation.
The mach_vm_region_recurse() variant recurses into submap chains in the given task's address map.
The vmmap command-line program uses both variants to retrieve information about the virtual memory
regions allocated in the given process.
8.7. Using the Mach VM Interfaces
Let us now look at several examples of using Mach VM interface routines.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 42 of 135
The examples shown in this section use the new Mach VM API that we discussed in Section 8.6. The new
API's implementation is transitional at the time of this writing. If you face problems while experimenting
with it, you can resort to the vm_* routines. Moreover, the examples in this section can be compiled as
either 64-bit or 32-bit programs. They are shown here as compiled for 64-bit.
8.7.1. Controlling Memory Inheritance
In this example, we will allocate two pages of memory using mach_vm_allocate(). We will call
mach_vm_inherit() to set the inheritance attribute of one page to VM_INHERIT_SHARE and the other's to
VM_INHERIT_COPY. We will then write some "marker" data to the two pages and call fork(). The parent
will wait for the child to exit. The child will write its own marker data to the pages, which will cause the
contents of the shared page to change in place, whereas the other page will be physically copied on being
written. We will use the VM_REGION_TOP_INFO flavor of mach_vm_region() to inspect the VM objects
corresponding to the two pages. Figure 814 shows the program.
Note in Figure 814 that in this example, the program is being compiled as a 64-bit PowerPC executable,
as specified by the ppc64 architecture value. Since the Mach VM user interfaces are architecture-
independent, the program will compile and run on all architectures supported by Mac OS X.
Figure 814. Controlling memory inheritance
// vm_inherit.c
#include 
#include 
#include 
#include 
#include 
#include 
#define OUT_ON_MACH_ERROR(msg, retval) \
if (kr != KERN_SUCCESS) { mach_error(msg ":" , kr); goto out; }
#define FIRST_UINT32(addr) (*((uint32_t *)addr))
static mach_vm_address_t page_shared; // fully shared
static mach_vm_address_t page_cow; // shared copy-on-write
kern_return_t
get_object_id(mach_vm_address_t offset, int *obj_id, int *ref_count)
{
kern_return_t kr;
mach_port_t unused;
mach_vm_size_t size = (mach_vm_size_t)vm_page_size;
mach_vm_address_t address = offset;
vm_region_top_info_data_t info;
mach_msg_type_number_t count = VM_REGION_TOP_INFO_COUNT;
kr = mach_vm_region(mach_task_self(), &address, &size, VM_REGION_TOP_INFO,
(vm_region_info_t)&info, &count, &unused);
if (kr == KERN_SUCCESS) {
*obj_id = info.obj_id;
*ref_count = info.ref_count;
}
return kr;
}
void
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 43 of 135
peek_at_some_memory(const char *who, const char *msg)
{
int obj_id, ref_count;
kern_return_t kr;
kr = get_object_id(page_shared, &obj_id, &ref_count);
printf("%-12s%-8s%-10x%-12x%-10d%s\n",
who, "SHARED", FIRST_UINT32(page_shared), obj_id, ref_count, msg);
kr = get_object_id(page_cow, &obj_id, &ref_count);
printf("%-12s%-8s%-10x%-12x%-10d%s\n",
who, "COW", FIRST_UINT32(page_cow), obj_id, ref_count, msg);
}
void
child_process(void)
{
peek_at_some_memory("child", "before touching any memory");
FIRST_UINT32(page_shared) = (unsigned int)0xFEEDF00D;
FIRST_UINT32(page_cow) = (unsigned int)0xBADDF00D;
peek_at_some_memory("child", "after writing to memory");
exit(0);
}
int
main(void)
{
kern_return_t kr;
int status;
mach_port_t mytask = mach_task_self();
mach_vm_size_t size = (mach_vm_size_t)vm_page_size;
kr = mach_vm_allocate(mytask, &page_shared, size, VM_FLAGS_ANYWHERE);
OUT_ON_MACH_ERROR("vm_allocate", kr);
kr = mach_vm_allocate(mytask, &page_cow, size, VM_FLAGS_ANYWHERE);
OUT_ON_MACH_ERROR("vm_allocate", kr);
kr = mach_vm_inherit(mytask, page_shared, size, VM_INHERIT_SHARE);
OUT_ON_MACH_ERROR("vm_inherit(VM_INHERIT_SHARE)", kr);
kr = mach_vm_inherit(mytask, page_cow, size, VM_INHERIT_COPY);
OUT_ON_MACH_ERROR("vm_inherit(VM_INHERIT_COPY)", kr);
FIRST_UINT32(page_shared) = (unsigned int)0xAAAAAAAA;
FIRST_UINT32(page_cow) = (unsigned int)0xBBBBBBBB;
printf("%-12s%-8s%-10s%-12s%-10s%s\n",
"Process", "Page", "Contents", "VM Object", "Refcount", "Event");
peek_at_some_memory("parent", "before forking");
if (fork() == 0)
child_process(); // this will also exit the child
wait(&status);
peek_at_some_memory("parent", "after child is done");
out:
mach_vm_deallocate(mytask, page_shared, size);
mach_vm_deallocate(mytask, page_cow, size);
exit(0);
}
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 44 of 135
$ gcc -arch ppc64 -Wall -o vm_inherit vm_inherit.c
$ ./vm_inherit
Process Page Contents VM Object Refcount Event
parent SHARED aaaaaaaa 4fa4000 1 before forking
parent COW bbbbbbbb 5a93088 1 before forking
child SHARED aaaaaaaa 4fa4000 2 before touching any memory
child COW bbbbbbbb 5a93088 2 before touching any memory
child SHARED feedf00d 4fa4000 2 after writing to memory
child COW baddf00d 4ade198 1 after writing to memory
parent SHARED feedf00d 4fa4000 1 after child is done
parent COW bbbbbbbb 5a93088 1 after child is done
Note in the output shown in Figure 814 that the VM object corresponding to the copy-on-written page is
different from the one before the child writes to the page.
8.7.2. Debugging the Mach VM Subsystem
The Mac OS X kernel provides powerful user-space interfaces for debugging the Mach VM and IPC
subsystems. These interfaces provide access to a variety of kernel data structures that are normally not
exposed to user space. However, the kernel must be recompiled in the DEBUG configuration to enable these
interfaces. For example, the MACH_VM_DEBUG and MACH_IPC_DEBUG kernel-build-time configuration
options enable the debugging routines for VM and IPC, respectively.
Let us consider an examplethat of mach_vm_region_info(). This routine retrieves detailed information
about a memory region: Given a memory address, it retrieves the contents of the corresponding VM map
entry structure, along with the associated VM objects. We say "objects" because if there is a shadow
chain, mach_vm_region_info() follows it.
kern_return_t
mach_vm_region_info(vm_map_t map,
vm_offset_t address,
vm_info_region_t *regionp,
vm_info_object_array_t *objectsp,
mach_msg_type_number_t *objects_countp);
The vm_info_region_t structure [osfmk/mach_debug/vm_info.h] contains selected information from
the VM map entry structure corresponding to address in the address space specified by map. On return,
objectsp will point to an array containing objects_countp enTRies, each of which is a
vm_info_object_t structure [osfmk/mach_debug/vm_info.h] containing information from a VM
object.
Other routines in the VM debugging interface include the following:
 mach_vm_region_info_64() provides a 64-bit version of mach_vm_region_info()
 vm_mapped_pages_info() retrieves a list containing addresses of virtual pages mapped in a given
task
 host_virtual_physical_table_info() retrieves information about the host's virtual-to-physical
table
8.7.3. Protecting Memory