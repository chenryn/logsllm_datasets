used a popular reference MPEG encoded movie “susi 040.mpg”
(available from the Tektronix FTP site [22]) used by the
MPEG standards committee. The ﬁle consists of 8.5% of I-
Frames, 25% of P-Frames, and 66.5% of B-Frames. In terms
of bytes, 29% of bytes were from I-Frames, 35% were from
P-Frames, and 34% were from B-Frames.
In our experiments, we consider various drop methods;
when comparing ﬁnal results, we compare according to the
ﬁnal loss rate measured in bytes. We experimented with var-
ious dropping strategies. The ﬁrst was random loss, which
randomly drops frames. The second was B-frame dropping,
which selectively drops B-frames randomly (which would re-
quire standards changes to do via marking as in [9])). The
third policy drops packets randomly, and does pure I-frame
tail dropping: once an I frame packet is dropped, all pack-
ets (and intermediate frames) are dropped till the start of
the next I-frame. The fourth policy starts with B-frame
dropping up to some maximum drop probability (we found
that dropping more than 20% of B-frames resulted in poor
quality video) followed by I-frame tail dropping.
Again, to compare the performance of the three schemes
uniformly we translated the frame loss probability in the
latter two cases into a byte loss probability. The ﬁrst two
strategies are evaluated in [9]. To the best of our knowledge,
we have not seen the third or fourth strategies before. In
general, we believe ACSMs can enable a much richer class
of video drop policies than perhaps were thought possible.
For each strategy, we looked for two thresholds: the ﬁrst
was the loss threshold at which the video was almost com-
pletely unaﬀected by loss; the second was the threshold at
which the video is severely aﬀected and is unusable. We has-
ten to point that these two thresholds are perceptual, and
what is more important is the broad message that discrimi-
nate video dropping can gain user satisfaction in periods of
limited bandwidth than the speciﬁc numbers reported here.
More precisely, for the B-frame loss experiment we took
the video ﬁle and parsed it and dropped B-frames according
to some B-frame loss probability. We then played it using
the Windows Media player. We gradually increased the loss
probability until we ﬁrst saw errors (Threshold 1) and until
the quality became unacceptable (Threshold 2). We then
report Threshold 1 and 2 and the loss probability, after the
frame loss probability to a byte loss probability by adding
the length of all the dropped frames and dividing by the
total number of bytes sent in the original video.
Our results were as follows:
• Random Drop: Artifacts are easily seen even at a
very low drop rate (i.e.
2% ). Beyond 15% drop
rate the picture quality is severely degraded. Thus
Threshold 1 is 2% and Threshold 2 is 15%.
• B-frame dropping: Dropping B frames did not have
any eﬀect on the picture quality but it did have eﬀects
on the temporal plane (at very high losses, the picture
seems to skip from scene to scene). In general, up 6%
drop rate can be achieved without much loss in quality.
The quality degrades severely at around 12%.
• I-frame tail-dropping: This performs worse than B-
frame dropping in that artifacts are seen at 3%. How-
ever, the loss rate has to reach 25% before the picture
quality gets severely degraded.
• Combination B-frame and I-frame dropping: We
use B-frame dropping up to a loss probability of 6%,
and then do I-frame tail dropping of other frames (I or
P frames) for higher loss rates. This scheme performs
exactly like the pure B-frame drop policy in that ar-
tifacts become noticeable at 6% but the picture gets
severely degraded only at a loss rate of 30%.
In summary, the combined scheme has the best thresholds
(6%, 30%). While our experiments only demonstrated the
eﬀect of loss on a single video stream, the use of a uniform
drop probability (as in RED) will result in fairness across all
video streams passing through a route. For the combined
scheme, the implementation keeps a counter to track the
total current B-frame byte loss probability, and instantiates
the random loss of other frame packets when this counter
exceeds a threshold.
As an example of the relationship between these perfor-
mance numbers as ACSMs, we used an FCF ACSM with
a ﬁngerprint of 14 bits, 3 bits for state, and 1 bit for a
timer to classify frame types and drop status per stream
using I-frame tail dropping. To ensure no bucket overlow
occurred we used a utilization of 2/3 (for the maximum num-
ber of simultaneous ﬂows). Experimentally, the probability
of incorrectly dropping a packet (from either a false positive
or Don’t Know) is 0.37% and the probability of not drop-
ping a video packet that should have been dropped (from a
false negative) was 0.38%. These small probabilities of error
should not signiﬁcantly aﬀect the video congestion policy
but the net state per stream is reduced to (14 + 3 + 1) *
1.5 = 27 bits compared to 96 + 3 + 1= 100 bits for the com-
plete state scheme. This translates into nearly a factor of
4 reduction in memory without much impact on the video
policy. Even larger savings can be obtained by increasing
the false positive probability, which may be acceptable in
this application.
Our results for improved quality with B-frame dropping
compares with earlier results (e.g., [9]). However, [9] uses a
quantitative metric called PSNR and expresses the gain as
2 to 3 db gain in PSNR using B-frame dropping, while we
use perceptual loss thresholds. There are no results in [9]
for I-frame tail dropping.
Our results are in no way conclusive. For example, the
video we used had no audio, and the perceptual method
we used could vary from user to user. However, the results
do suggest the potential promise of using ACSMs for video
congestion to provide a rich space of video drop policies that
are implementable in routers and switches, and that do not
require standards changes as in the layered encoding [1] or
packet marking proposals [9].
5.2.2 Real-time Identiﬁcation of P2P Trafﬁc
Recent studies [10] have shown that Peer-to-Peer traﬃc
(P2P) continues to grow to alarming percentages, such as
30% of all traﬃc at peering points. Most organizations and
even ISPs would like to rate control such traﬃc in favor of
other possibly more mission-critical, traﬃc. Unfortunately,
as part of the battle with such legal entities as the RIAA,
P2P traﬃc constantly evolves to conceal itself. P2P traﬃc
routinely tunnels in on well known ports such as Port 80, and
many routinely operate on any port number. Thus simple
discrimination of P2P packets based on port numbers is no
longer very useful. A recent proposal [19] suggests looking
for content signatures within packets (e.g., “GNUTELLA
CONNECT”) to identify P2P packets. Unfortunately, mo-
tivated by legal sticks and ﬁnancial carrots, P2P protocols
have shown a growing trend to obfuscate their payloads us-
ing encryption.
As a more compelling approach, recent work in [10] shows
that there are certain traﬃc ﬂow patterns, detectable by
simple state machines, that have a high degree of accuracy
in identifying P2P ﬂows. For example, [10] shows that a
(DestIP, SourceIP) pair that has a concurrent UDP connec-
tion (often used for control queries and replies) and TCP
connection (used for ﬁle transfer) has a high probability of
being P2P traﬃc. The work also uses patterns of (IP, port)
pairs for another test.
We believe that such traﬃc characterization based on traf-
ﬁc ﬂow analysis (for P2P or other uses such as security) can
beneﬁt from the use of ACSMs. The paper [10] uses ex-
tensive (and time-consuming) oﬄine trace analysis. This
is useful for traﬃc characterization after the fact, and can
be used with tools such as NetFlow to provide fairly slow
analysis of P2P traﬃc. However, ACSMs can be used for
online, real-time characterization using the same techniques
and can thus be used for real-time control (using say rate
limiting). The lack of ﬁdelity of ACSMs due to false posi-
tives and negatives is not a large impediment, because the
very heuristics used to identify P2P traﬃc also have some
probability of error that is often signiﬁcantly larger than the
errors caused by using ACSMs.
To quickly understand how P2P identiﬁcation can beneﬁt
from ACSMs we simulated the simplest state machine test in
[10] (TCP-UDP pairs). Since we could not obtain traces of
the traﬃc used in [10], we created a synthetic log containing
64K active ﬂows (a ﬂow is timed out after 64 seconds of
inactivity). The ﬂows (based on the data in [10]) have an
average of 15 packets per ﬂow. We use a parameter we call
the P2P percentage that controls what fraction of the TCP
ﬂows have a concurrent UDP ﬂow. Between the start and
end of these selected ﬂows, we randomly send a UDP packet.
The experiment compares, for diﬀerent values of the P2P
percentage parameter, the number of ﬂows misclassiﬁed as
P2P using an ACSM compared to that done by a full state
machine. (We are assuming that the full state machine is
perfectly correct, but in practice it is not [10].)
We present results using an FCF ACSM with 211 cells, 4
hash functions, a ﬁngerprint Size of 14 Bits, and 9 entries
per cell. Thus the total memory used was approximately 1
Mbit (more precisely, 211 ∗ 4 ∗ 9 ∗ (14 + 2) = 1179648 bits).
The results were as follows:
• 15 % P2P Traﬃc: 0% False positive, 0.29% False
Negative, and 0.17% DK
• 25 % P2P traﬃc: 0% False positive, 0.31% False
Negative, 0.156% DK
• 40 % P2P traﬃc: 0% False positive, 0.34% False
Negative, 0.149% DK
Even if we add all these probabilities together (as the
probability of misclassiﬁcation), the probabilities compare
very well with the misclassiﬁcation probabilities reported in
[10] for the heuristics themselves (for example, false positive
rates of 6%). On the other hand, the slight loss in ﬁdelity
is compensated by a very large factor reduction in memory
(from 96 bits per ﬂow in the naive scheme to 18 bits per
ﬂow using ACSMs). Better still, this can be done with a
few Mbits of memory which is implementable by using on-
chip SRAM even at 20 Gbps and higher speeds.
There are several limitations to our study, however. First,
we did not use the actual traces and several interesting dy-
namics of real traﬃc (timeouts, Zipf ﬂow sizes etc.) are not
captured by our synthetic model. Rather than improve our
synthetic model, we plan to work on the real traces once we
obtain them. Second, we did not implement the full state
machine in [10]. Third, our model of concurrent TCP and
UDP connections only included a UDP connection starting
within a TCP connection, not vice versa. While these exten-
sions are necessary in a deeper, trace-drive study, the initial
results strongly suggest the potential promise of ACSMs for
real-time P2P identiﬁcation and control.
In closing, we note that P2P identiﬁcation, like security,
is likely to be an arms race. If these heuristics get widely
used, it is likely that P2P authors will change their pro-
grams to invalidate these detection methods. However, if a
router allows programmable ACSMs, the router can be re-
programmed to employ new detection state machines, much
in the way virus deﬁnitions are updated when new threats
are discovered.
6. CONCLUSION
In this paper, we have introduced Approximate Concur-
rent State Machines. While similar in spirit to Bloom ﬁlters,
our best scheme is based on a combination of hashing and
ﬁngerprints, using d-left hashing to obtain a near-perfect
hash function in a dynamic setting. Somewhat surprisingly,
when we specialize to the case of membership checking in
a dynamic set, we ﬁnd that our data structure takes much
less space than a comparable counting Bloom ﬁlter.
ACSMs are particularly relevant to an increasing trend in
networking devices to be more application aware. This is
often done by keeping a state machine for each TCP ﬂow.
Because of the great memory needs (1 million concurrent
connections, for example, is the standard for all IDS devices
in the market), these implementations often resort to low
speed DRAM and hence are often implemented at speeds
of a few Gbps or less. By reducing the memory needs by
a factor of 5 or more, ACSMs allow the potential for on-
chip SRAM and hence higher speed implementations of such
application-aware network devices. Finally, the loss in ﬁ-
delity caused by small probabilities of error are often tol-
erable for Application Level QoS mechanisms for which an
error only means stepping up (or down) the QoS level for
the occasional connection.
We have sketched the potential uses of ACSMs for application-
aware forwarding using two speciﬁc examples: Active Queue
Management schemes for video ﬂows, and real-time detec-
tion and control of P2P traﬃc. We also believe programmable
ACSMs can be a powerful tool for traﬃc analysis. Our in-
vestigation of applications is preliminary, and more sophis-
ticated and detailed experiments are needed to conﬁrm the
promise of ACSMs for applications. This paper, instead, fo-
cuses on the introduction of the problem, the introduction of
3 speciﬁc data structures to solve the problem, and the an-
alytical and simulation comparison of the 3 schemes. Given
that Bloom ﬁlters and related variants have found many ap-
plications, we believe that ACSMs will also ﬁnd many new
applications in the future.
7. REFERENCES
[1] E. Amir, S. McCanne. M. Vitterli. A Layered DCT coder for
Internet Video. In Proc. IEEE International Conference on
Image Processing, Lausanne, Switzerland, Sept 1996.
[2] B. Bloom. Space/time tradeoﬀs in in hash coding with allowable
errors. Communications of the ACM, 13(7):422-426, 1970.
[3] A. Broder and M. Mitzenmacher. Using multiple hash functions
to improve IP Lookups. In Proceedings of IEEE INFOCOM,
pp. 1454-1463, 2001.
[4] A. Broder and M. Mitzenmacher. Network applications of Bloom
ﬁlters: A survey. Internet Mathematics, 1(4):485-509, 2004.
[5] B. Chazelle, J. Kilian, R. Rubinfeld, and A. Tal. The Bloomier
ﬁlter: an eﬃcient data structure for static support lookup
tables. In Proceedings of the Fifteenth Annual ACM-SIAM
Symposium on Discrete Algorithms (SODA), pp 30-39, 2004.
[6] F. Bonomi, M. Mitzenmacher, R. Panigrahy, S. Singh, and G.
Varghese. An Improved Construction for Counting Bloom
Filters. To appear in the 2006 European Symposium on
Algorithms.
[7] S. Dharmapurikar, P. Krishnamurthy, T. Sproull, and J.
Lockwood. Deep Packet Inspection using Parallel Bloom Filters.
In IEEE Hot Interconnects 12, Stanford, CA, August 2003.
IEEE Computer Society Press.
[8] L. Fan, P. Cao, J. Almeida, and A. Z. Broder. Summary cache:
a scalable wide-area Web cache sharing protocol. IEEE/ACM
Transactions on Networking, 8(3):281-293, 2000.
[9] D. Forsgren, U. Jennehag. P. Osterberg, Objective Endtoend
QoS Gain from Packet Prioritization and Layering in MPEG-2
streaming video. At http://amp.ece.cmu.edu/packetvideo2002/
papers/61-ananhseors.pdf
[10] T. Karargiannis, A. Broido, M. Faloutsos, and K.C. Claﬀy.
Transport Layer Identiﬁcation of P2P Traﬃc. In Proceedings of
ACM SIGCOMM, 2004.
[11] T. Karargiannis, A. Broido, M. Faloutsos, and K.C. Claﬀy.
BLINC: Multilevel Traﬃc Classiﬁcation in the Dark. In
Proceedings of ACM SIGCOMM, 2005.
[12] A. Kirsch and M. Mitzenmacher. Simple Summaries for
Hashing with Multiple Choices. In Proc. of the Forty-Third
Annual Allerton Conference, 2005.
[13] Y. Lu, B. Prabhakar, and F. Bonomi. Bloom Filters: Design
Innovations and Novel Applications. In Proc. of the
Forty-Third Annual Allerton Conference, 2005.
[14] Steve McCanne. Scalable Compression and Transmission of
Internet Multicast Video. Ph. D. Thesis, Berkeley
[15] M. Mitzenmacher. Compressed Bloom Filters. IEEE/ACM
Transactions on Networking, 10(5):613-620, 2002.
[16] M. Mitzenmacher and E. Upfal. Probability and Computing:
Randomized Algorithms and Probabilistic Analysis. Cambridge
University Press, 2005.
[17] A. Pagh, R. Pagh, and S. Srinivas Rao. An Optimal Bloom
Filter Replacement. In Proceedings of the Sixteenth Annual
ACM-SIAM Symposium on Discrete Algorithms (SODA), pp.
823-829, 2005.
[18] A. Romanow and S. Floyd. Dynamics of TCP Traﬃc over ATM
Networks. IEEE Journal on Selected Areas in
Communications, 13(4): 633-641 (1995).
[19] S. Sen, O. Spatscheck, and D. Wang. Accurate, Scalable
In-network identiﬁcation of P2P Traﬃc Using Application
Signatures. In 13th International World Wide Web
Conference, New York City, 17-22 May 2004.
[20] H. Song, S. Dharmapurikar, J. Turner, and J. Lockwood. Fast
hash table lookup using extended Bloom ﬁlter: an aid to
network processing. In Proceedings of ACM SIGCOMM, pp.
181-192, 2005.
[21] A. Snoeren, C. Partridge, L. Sanchez, C. Jones, F.
Tchakountio, B. Schwartz, S. Kent, and W. Strayer.
Single-Packet IP Traceback. IEEE/ACM Transactions on
Networking, 10(6):721-734, 2002.
[22] Tektronix FTP site,
ftp://ftp.tek.com/tv/test/streams/Element/MPEG-Video/625/
[23] K. Thomson, G. J. Miller, and R. Wilder. Wide-area traﬃc
patterns and characteristics. IEEE Network, December 1997.
[24] B. V¨ocking. How asymmetry helps load balancing. In
Proceedings of the 40th IEEE-FOCS , pp. 131-140, 1999.