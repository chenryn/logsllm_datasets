Where partition_name specifies the name of the partition or subpartition that will
store any rows that do not match the rules specified for other partitions.
The last example created a list partitioned table in which the server decided which
partition to store the data based upon the value of the country column. If you attempt
to add a row in which the value of the country column contains a value not listed in the
rules, Advanced Server reports an error:
acctg=# INSERT INTO sales VALUES
acctg-# (40, '3000x', 'IRELAND', '01-Mar-2012', '45000');
ERROR: no partition of relation "sales_2012" found for row
DETAIL: Partition key of the failing row contains (country) = (IRELAND).
The following example creates the same table, but adds a DEFAULT partition. The server
will store any rows that do not match a value specified in the partitioning rules for
europe, asia, or americas partitions in the others partition:
CREATE TABLE sales
(
dept_no number,
part_no varchar2,
country varchar2(20),
date date,
amount number
)
PARTITION BY LIST(country)
(
PARTITION europe VALUES('FRANCE', 'ITALY'),
PARTITION asia VALUES('INDIA', 'PAKISTAN'),
PARTITION americas VALUES('US', 'CANADA'),
PARTITION others VALUES (DEFAULT)
);
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 407
Database Compatibility for Oracle® Developers Guide
To test the DEFAULT partition, add row with a value in the country column that does
not match one of the countries specified in the partitioning constraints:
INSERT INTO sales VALUES
(40, '3000x', 'IRELAND', '01-Mar-2012', '45000');
Querying the contents of the sales table confirms that the previously rejected row is
now stored in the sales_others partition:
acctg=# SELECT tableoid::regclass, * FROM sales;
tableoid | dept_no | part_no | country | date | amount
----------------+---------+---------+----------+--------------------+--------
sales_americas | 40 | 9519b | US | 12-APR-12 00:00:00 | 145000
sales_americas | 40 | 4577b | US | 11-NOV-12 00:00:00 | 25000
sales_americas | 30 | 7588b | CANADA | 14-DEC-12 00:00:00 | 50000
sales_americas | 30 | 9519b | CANADA | 01-FEB-12 00:00:00 | 75000
sales_americas | 30 | 4519b | CANADA | 08-APR-12 00:00:00 | 120000
sales_americas | 40 | 3788a | US | 12-MAY-12 00:00:00 | 4950
sales_americas | 40 | 4788a | US | 23-SEP-12 00:00:00 | 4950
sales_americas | 40 | 4788b | US | 09-OCT-12 00:00:00 | 15000
sales_europe | 10 | 4519b | FRANCE | 17-JAN-12 00:00:00 | 45000
sales_europe | 10 | 9519b | ITALY | 07-JUL-12 00:00:00 | 15000
sales_europe | 10 | 9519a | FRANCE | 18-AUG-12 00:00:00 | 650000
sales_europe | 10 | 9519b | FRANCE | 18-AUG-12 00:00:00 | 650000
sales_asia | 20 | 3788a | INDIA | 01-MAR-12 00:00:00 | 75000
sales_asia | 20 | 3788a | PAKISTAN | 04-JUN-12 00:00:00 | 37500
sales_asia | 20 | 3788b | INDIA | 21-SEP-12 00:00:00 | 5090
sales_asia | 20 | 4519a | INDIA | 18-OCT-12 00:00:00 | 650000
sales_asia | 20 | 4519b | INDIA | 02-DEC-12 00:00:00 | 5090
sales_others | 40 | 3000x | IRELAND | 01-MAR-12 00:00:00 | 45000
(18 rows)
Advanced Server provides the following methods to re-assign the contents of a DEFAULT
partition or subpartition:
 You can use the ALTER TABLE… ADD PARTITION command to add a partition to
a table with a DEFAULT rule as long as there are no conflicting values between
existing rows in the table and the values of the partition to be added. You can
alternatively use the ALTER TABLE… SPLIT PARTITION command to split an
existing partition. Examples are shown following this bullet point list.
 You can use the ALTER TABLE… ADD SUBPARTITION command to add a
subpartition to a table with a DEFAULT rule as long as there are no conflicting
values between existing rows in the table and the values of the subpartition to be
added. You can alternatively use the ALTER TABLE… SPLIT SUBPARTITION
command to split an existing subpartition.
Adding a Partition to a Table with a DEFAULT Partition
Using the table that was created with the CREATE TABLE sales command shown at the
beginning of this section, the following shows use of the ALTER TABLE... ADD
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 408
Database Compatibility for Oracle® Developers Guide
PARTITION command assuming there is no conflict of values between the existing rows
in the table and the values of the partition to be added:
edb=# ALTER TABLE sales ADD PARTITION africa values ('SOUTH AFRICA',
'KENYA');
ALTER TABLE
However, the following shows the error when there are conflicting values when the
following rows have been inserted into the table:
edb=# INSERT INTO sales (dept_no, country) VALUES
(1,'FRANCE'),(2,'INDIA'),(3,'US'),(4,'SOUTH AFRICA'),(5,'NEPAL');
INSERT 0 5
Row (4,'SOUTH AFRICA') conflicts with the VALUES list in the ALTER TABLE...
ADD PARTITION statement, thus resulting in an error.
edb=# ALTER TABLE sales ADD PARTITION africa values ('SOUTH AFRICA',
'KENYA');
ERROR: updated partition constraint for default partition "sales_others"
would be violated by some row
Splitting a DEFAULT Partition
The following example splits a DEFAULT partition, redistributing the partition's content
between two new partitions. The table was created with the CREATE TABLE sales
command shown at the beginning of this section.
The following inserts rows into the table including rows into the DEFAULT partition:
INSERT INTO sales VALUES
(10, '4519b', 'FRANCE', '17-Jan-2012', '45000'),
(10, '9519b', 'ITALY', '07-Jul-2012', '15000'),
(20, '3788a', 'INDIA', '01-Mar-2012', '75000'),
(20, '3788a', 'PAKISTAN', '04-Jun-2012', '37500'),
(30, '9519b', 'US', '12-Apr-2012', '145000'),
(30, '7588b', 'CANADA', '14-Dec-2012', '50000'),
(40, '4519b', 'SOUTH AFRICA', '08-Apr-2012', '120000'),
(40, '4519b', 'KENYA', '08-Apr-2012', '120000'),
(50, '3788a', 'CHINA', '12-May-2012', '4950');
The partitions include the DEFAULT others partition:
edb=# SELECT partition_name, high_value FROM all_tab_partitions;
partition_name | high_value
----------------+-------------------------------------
EUROPE | FOR VALUES IN ('FRANCE', 'ITALY')
ASIA | FOR VALUES IN ('INDIA', 'PAKISTAN')
AMERICAS | FOR VALUES IN ('US', 'CANADA')
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 409
Database Compatibility for Oracle® Developers Guide
OTHERS | DEFAULT
(4 rows)
The following shows the rows distributed amongst the partitions:
edb=# SELECT tableoid::regclass, * FROM sales;
tableoid | dept_no | part_no | country | date |
amount
--------------+--------+---------+--------------+--------------------+-------
-
sales_americas| 30 | 9519b | US | 12-APR-12 00:00:00 | 145000
sales_americas| 30 | 7588b | CANADA | 14-DEC-12 00:00:00 | 50000
sales_europe | 10 | 4519b | FRANCE | 17-JAN-12 00:00:00 | 45000
sales_europe | 10 | 9519b | ITALY | 07-JUL-12 00:00:00 | 15000
sales_asia | 20 | 3788a | INDIA | 01-MAR-12 00:00:00 | 75000
sales_asia | 20 | 3788a | PAKISTAN | 04-JUN-12 00:00:00 | 37500
sales_others | 40 | 4519b | SOUTH AFRICA | 08-APR-12 00:00:00 | 120000
sales_others | 40 | 4519b | KENYA | 08-APR-12 00:00:00 | 120000
sales_others | 50 | 3788a | CHINA | 12-MAY-12 00:00:00 | 4950
(9 rows)
The following command splits the DEFAULT others partition into two partitions named
africa and others:
ALTER TABLE sales SPLIT PARTITION others VALUES
('SOUTH AFRICA', 'KENYA')
INTO (PARTITION africa, PARTITION others);
The partitions now include the africa partition along with the DEFAULT others
partition:
edb=# SELECT partition_name, high_value FROM all_tab_partitions;
partition_name | high_value
----------------+-----------------------------------------
EUROPE | FOR VALUES IN ('FRANCE', 'ITALY')
ASIA | FOR VALUES IN ('INDIA', 'PAKISTAN')
AMERICAS | FOR VALUES IN ('US', 'CANADA')
AFRICA | FOR VALUES IN ('SOUTH AFRICA', 'KENYA')
OTHERS | DEFAULT
(5 rows)
The following shows that the rows have been redistributed across the new partitions:
edb=# SELECT tableoid::regclass, * FROM sales;
tableoid |dept_no | part_no | country | date | amount
---------------+--------+---------+-------------+--------------------+-------
-
sales_americas | 30 | 9519b | US | 12-APR-12 00:00:00 | 145000
sales_americas | 30 | 7588b | CANADA | 14-DEC-12 00:00:00 | 50000
sales_europe | 10 | 4519b | FRANCE | 17-JAN-12 00:00:00 | 45000
sales_europe | 10 | 9519b | ITALY | 07-JUL-12 00:00:00 | 15000
sales_asia | 20 | 3788a | INDIA | 01-MAR-12 00:00:00 | 75000
sales_asia | 20 | 3788a | PAKISTAN | 04-JUN-12 00:00:00 | 37500
sales_africa | 40 | 4519b | SOUTH AFRICA| 08-APR-12 00:00:00 | 120000
sales_africa | 40 | 4519b | KENYA | 08-APR-12 00:00:00 | 120000
sales_others_1 | 50 | 3788a | CHINA | 12-MAY-12 00:00:00 | 4950
(9 rows)
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 410
Database Compatibility for Oracle® Developers Guide
Defining a MAXVALUE Partition
A MAXVALUE partition (or subpartition) will capture any rows that do not fit into any
other partition in a range-partitioned (or subpartitioned) table. If you do not include a
MAXVALUE rule, any row that exceeds the maximum limit specified by the partitioning
rules will result in an error. Each partition or subpartition may have its own MAXVALUE
partition.
The syntax of a MAXVALUE rule is:
PARTITION [partition_name] VALUES LESS THAN (MAXVALUE)
Where partition_name specifies the name of the partition that will store any rows that
do not match the rules specified for other partitions.
The last example created a range-partitioned table in which the data was partitioned
based upon the value of the date column. If you attempt to add a row with a date that
exceeds a date listed in the partitioning constraints, Advanced Server reports an error:
acctg=# INSERT INTO sales VALUES
acctg-# (40, '3000x', 'IRELAND', '01-Mar-2013', '45000');
ERROR: no partition of relation "sales" found for row
DETAIL: Partition key of the failing row contains (date) = (01-MAR-13
00:00:00).
The following CREATE TABLE command creates the same table, but with a MAXVALUE
partition. Instead of throwing an error, the server will store any rows that do not match
the previous partitioning constraints in the others partition:
CREATE TABLE sales
(
dept_no number,
part_no varchar2,
country varchar2(20),
date date,
amount number
)
PARTITION BY RANGE(date)
(
PARTITION q1_2012 VALUES LESS THAN('2012-Apr-01'),
PARTITION q2_2012 VALUES LESS THAN('2012-Jul-01'),
PARTITION q3_2012 VALUES LESS THAN('2012-Oct-01'),
PARTITION q4_2012 VALUES LESS THAN('2013-Jan-01'),
PARTITION others VALUES LESS THAN (MAXVALUE)
);
To test the MAXVALUE partition, add a row with a value in the date column that exceeds
the last date value listed in a partitioning rule. The server will store the row in the
others partition:
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 411
Database Compatibility for Oracle® Developers Guide
INSERT INTO sales VALUES
(40, '3000x', 'IRELAND', '01-Mar-2013', '45000');
Querying the contents of the sales table confirms that the previously rejected row is
now stored in the sales_others partition :
acctg=# SELECT tableoid::regclass, * FROM sales;
tableoid | dept_no | part_no | country | date | amount
---------------+---------+---------+----------+--------------------+--------
sales_q1_2012 | 10 | 4519b | FRANCE | 17-JAN-12 00:00:00 | 45000
sales_q1_2012 | 20 | 3788a | INDIA | 01-MAR-12 00:00:00 | 75000
sales_q1_2012 | 30 | 9519b | CANADA | 01-FEB-12 00:00:00 | 75000
sales_q2_2012 | 40 | 9519b | US | 12-APR-12 00:00:00 | 145000
sales_q2_2012 | 20 | 3788a | PAKISTAN | 04-JUN-12 00:00:00 | 37500
sales_q2_2012 | 30 | 4519b | CANADA | 08-APR-12 00:00:00 | 120000
sales_q2_2012 | 40 | 3788a | US | 12-MAY-12 00:00:00 | 4950
sales_q3_2012 | 10 | 9519b | ITALY | 07-JUL-12 00:00:00 | 15000
sales_q3_2012 | 10 | 9519a | FRANCE | 18-AUG-12 00:00:00 | 650000
sales_q3_2012 | 10 | 9519b | FRANCE | 18-AUG-12 00:00:00 | 650000
sales_q3_2012 | 20 | 3788b | INDIA | 21-SEP-12 00:00:00 | 5090
sales_q3_2012 | 40 | 4788a | US | 23-SEP-12 00:00:00 | 4950
sales_q4_2012 | 40 | 4577b | US | 11-NOV-12 00:00:00 | 25000
sales_q4_2012 | 30 | 7588b | CANADA | 14-DEC-12 00:00:00 | 50000
sales_q4_2012 | 40 | 4788b | US | 09-OCT-12 00:00:00 | 15000
sales_q4_2012 | 20 | 4519a | INDIA | 18-OCT-12 00:00:00 | 650000
sales_q4_2012 | 20 | 4519b | INDIA | 02-DEC-12 00:00:00 | 5090
sales_others | 40 | 3000x | IRELAND | 01-MAR-13 00:00:00 | 45000
(18 rows)
Please note that Advanced Server does not have a way to re-assign the contents of a
MAXVALUE partition or subpartition:
 You cannot use the ALTER TABLE… ADD PARTITION statement to add a partition
to a table with a MAXVALUE rule, but you can use the ALTER TABLE… SPLIT
PARTITION statement to split an existing partition.
 You cannot use the ALTER TABLE… ADD SUBPARTITION statement to add a
subpartition to a table with a MAXVALUE rule , but you can split an existing
subpartition with the ALTER TABLE… SPLIT SUBPARTITION statement.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 412
Database Compatibility for Oracle® Developers Guide
10.5 Specifying Multiple Partitioning Keys in a RANGE
Partitioned Table
You can often improve performance by specifying multiple key columns for a RANGE
partitioned table. If you often select rows using comparison operators (based on a
greater-than or less-than value) on a small set of columns, consider using those columns
in RANGE partitioning rules.
Specifying Multiple Keys in a Range-Partitioned Table
Range-partitioned table definitions may include multiple columns in the partitioning key.
To specify multiple partitioning keys for a range-partitioned table, include the column
names in a comma-separated list after the PARTITION BY RANGE clause:
CREATE TABLE sales
(
dept_no number,
part_no varchar2,
country varchar2(20),
sale_year number,
sale_month number,
sale_day number,
amount number
)
PARTITION BY RANGE(sale_year, sale_month)
(
PARTITION q1_2012
VALUES LESS THAN(2012, 4),
PARTITION q2_2012
VALUES LESS THAN(2012, 7),
PARTITION q3_2012
VALUES LESS THAN(2012, 10),
PARTITION q4_2012
VALUES LESS THAN(2013, 1)
);
If a table is created with multiple partitioning keys, you must specify multiple key values
when querying the table to take full advantage of partition pruning:
acctg=# EXPLAIN SELECT * FROM sales WHERE sale_year = 2012 AND sale_month =
8;
QUERY PLAN
----------------------------------------------------------------------------
Append (cost=0.00..14.35 rows=1 width=250)
-> Seq Scan on sales_q3_2012 (cost=0.00..14.35 rows=1 width=250)
Filter: ((sale_year = '2012'::numeric) AND (sale_month =
'8'::numeric))
(3 rows)
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 413
Database Compatibility for Oracle® Developers Guide
Since all rows with a value of 8 in the sale_month column and a value of 2012 in the
sale_year column will be stored in the q3_2012 partition, Advanced Server searches
only that partition.
10.6 Retrieving Information about a Partitioned Table
Advanced Server provides five system catalog views that you can use to view
information about the structure of partitioned tables.
Querying the Partitioning Views
You can query the following views to retrieve information about partitioned and
subpartitioned tables:
 ALL_PART_TABLES
 ALL_TAB_PARTITIONS
 ALL_TAB_SUBPARTITIONS
 ALL_PART_KEY_COLUMNS
 ALL_SUBPART_KEY_COLUMNS
The structure of each view is explained in Section 10.6.1, Table Partitioning Views. If
you are using the EDB-PSQL client, you can also discover the structure of a view by
entering:
\d view_name
Where view_name specifies the name of the table partitioning view.
Querying a view can provide information about the structure of a partitioned or
subpartitioned table. For example, the following code snippet displays the names of a
subpartitioned table:
acctg=# SELECT subpartition_name, partition_name FROM ALL_TAB_SUBPARTITIONS;
subpartition_name | partition_name
-------------------+----------------
EUROPE_2011 | EUROPE
EUROPE_2012 | EUROPE
ASIA_2011 | ASIA
ASIA_2012 | ASIA
AMERICAS_2011 | AMERICAS
AMERICAS_2012 | AMERICAS
(6 rows)
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 414
Database Compatibility for Oracle® Developers Guide
10.6.1 Table Partitioning Views - Reference
Query the following catalog views, compatible with Oracle databases, to review detailed
information about your partitioned tables.
10.6.1.1 ALL_PART_TABLES
The following table lists the information available in the ALL_PART_TABLES view:
Column Type Description
owner name T h e o w n e r o f the table.
schema_name name T h e sc h e m a in which the table resides.
table_name name The name of the table.
partitioning_type text R A N G E , L IS T or HASH
subpartitioning_type text R A N G E , L IS T, HASH, or NONE
partition_count bigint T h e n u m b e r of partitions.
def_subpartition_count integer T h e d ef a u lt s ubpartition count - this will
always be 0.
partitioning_key_count integer T h e n u m b e r of columns listed in the partition
by clause.
subpartitioning_key_count integer T h e n u m b e r of columns in the subpartition by
clause.
status character This column will always be VALID.
varying(8)
def_tablespace_name character This column will always be NULL.
varying(30)
def_pct_free numeric T h i s c o lu m n will always be NULL.
def_pct_used numeric T h i s c o lu m n will always be NULL.
def_ini_trans numeric T h i s c o lu m n will always be NULL.
def_max_trans numeric T h i s c o lu m n will always be NULL.