```  
avg-cpu:  %user   %nice %system %iowait  %steal   %idle  
           0.69    0.00    0.25   24.11    0.00   74.95  
Device:         rrqm/s   wrqm/s   r/s   w/s   rsec/s   wsec/s avgrq-sz avgqu-sz   await  svctm  %util  
cciss/c0d0        0.00     6.00  0.00  1.50     0.00    60.00    40.00     0.01    6.67   6.67   1.00  
cciss/c0d0p1      0.00     6.00  0.00  1.50     0.00    60.00    40.00     0.01    6.67   6.67   1.00  
cciss/c0d0p2      0.00     0.00  0.00  0.00     0.00     0.00     0.00     0.00    0.00   0.00   0.00  
cciss/c0d0p3      0.00     0.00  0.00  0.00     0.00     0.00     0.00     0.00    0.00   0.00   0.00  
cciss/c0d1        0.00     0.00  0.00  0.00     0.00     0.00     0.00     0.00    0.00   0.00   0.00  
cciss/c0d2        0.00   638.50 10.00 217.50   160.00  6444.00    29.03   152.58  707.89   4.40 100.10  
cciss/c0d3        0.00     0.00  0.00  0.00     0.00     0.00     0.00     0.00    0.00   0.00   0.00  
cciss/c0d4        0.00     0.00  0.00  0.00     0.00     0.00     0.00     0.00    0.00   0.00   0.00  
cciss/c0d5        0.00     0.00  0.00  0.00     0.00     0.00     0.00     0.00    0.00   0.00   0.00  
dm-0              0.00     0.00  0.00  0.00     0.00     0.00     0.00     0.00    0.00   0.00   0.00  
dm-1              0.00     0.00 10.00 866.50   160.00  6932.00     8.09   446.26  510.49   1.14 100.10  
dm-2              0.00     0.00  0.00  0.00     0.00     0.00     0.00     0.00    0.00   0.00   0.00  
dm-3              0.00     0.00  0.00  0.00     0.00     0.00     0.00     0.00    0.00   0.00   0.00  
dm-4              0.00     0.00  0.00  0.00     0.00     0.00     0.00     0.00    0.00   0.00   0.00  
```  
操作系统的平均IO请求等待700多毫秒, PostgreSQL数据文件所处的块设备使用率100%. 存在严重的IO性能瓶颈.  
使用pgfincore降低读的物理IO请求.  
pgfincore的相关文章可参考如下,  
《use posix_fadvise pre-cache frequency data》  
http://blog.163.com/digoal@126/blog/static/163877040201062944945126/  
《a powerful upgrade from pgfincore 1.0》  
http://blog.163.com/digoal@126/blog/static/1638770402011630102117658/  
《TOAST table with pgfincore》  
http://blog.163.com/digoal@126/blog/static/16387704020120524144140/  
pgfincore所起的作用类似EnterpriseDB的InfiniteCache或者熟悉Oracle的朋友可能更易于接受的KEEP BUFFER POOL.  
载入os cache  
```  
digoal=> select reltoastrelid from pg_class where relname='user_info';  
 reltoastrelid   
---------------  
         16424  
(1 row)  
digoal=> select relname from pg_class where oid=16424;  
    relname       
----------------  
 pg_toast_16421  
(1 row)  
digoal=> \c digoal postgres  
seYou are now connected to database "digoal" as user "postgres".  
digoal=# select * from pgfadvise_willneed('pg_toast.pg_toast_16421');  
                   relpath                    | os_page_size | rel_os_pages | os_pages_free   
----------------------------------------------+--------------+--------------+---------------  
 pg_tblspc/16385/PG_9.1_201105231/16386/16424 |         4096 |            0 |        243865  
(1 row)  
digoal=# select * from pgfadvise_willneed('digoal.user_info');  
                    relpath                     | os_page_size | rel_os_pages | os_pages_free   
------------------------------------------------+--------------+--------------+---------------  
 pg_tblspc/16385/PG_9.1_201105231/16386/16421   |         4096 |       262144 |        243834  
 pg_tblspc/16385/PG_9.1_201105231/16386/16421.1 |         4096 |       262144 |        243834  
 pg_tblspc/16385/PG_9.1_201105231/16386/16421.2 |         4096 |       244944 |        243834  
(3 rows)  
digoal=# select * from pgfadvise_willneed('digoal.user_session');  
                    relpath                     | os_page_size | rel_os_pages | os_pages_free   
------------------------------------------------+--------------+--------------+---------------  
 pg_tblspc/16385/PG_9.1_201105231/16386/16431   |         4096 |       262144 |        243834  
 pg_tblspc/16385/PG_9.1_201105231/16386/16431.1 |         4096 |        33640 |        243834  
(2 rows)  
digoal=# select reltoastrelid from pg_class where relname='user_session';  
 reltoastrelid   
---------------  
             0  
(1 row)  
digoal=# select * from pgfadvise_willneed('digoal.pk_user_session');  
                   relpath                    | os_page_size | rel_os_pages | os_pages_free   
----------------------------------------------+--------------+--------------+---------------  
 pg_tblspc/16385/PG_9.1_201105231/16386/16438 |         4096 |       109680 |        243865  
(1 row)  
digoal=# select * from pgfadvise_willneed('digoal.pk_user_info');  
                   relpath                    | os_page_size | rel_os_pages | os_pages_free   
----------------------------------------------+--------------+--------------+---------------  
 pg_tblspc/16385/PG_9.1_201105231/16386/16436 |         4096 |       109680 |        235567  
(1 row)  
```  
## 【调优阶段2】  
1\. 压力测试  
```  
pgbench -M simple -r -c 8 -f /home/postgres/test/login.sql -j 8 -n -T 180 -h 172.16.3.33 -p 1921 -U digoal digoal  
```  
2\. 测试结果  
```  
transaction type: Custom query  
scaling factor: 1  
query mode: simple  
number of clients: 8  
number of threads: 8  
duration: 180 s  
number of transactions actually processed: 264895  
tps = 1471.517096 (including connections establishing)  
tps = 1471.585818 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.004226        \setrandom userid 1 20000000  
        0.459824        select userid,engname,cnname,occupation,birthday,signname,email,qq from user_info where userid=:userid;  
        2.457797        insert into user_login_rec (userid,login_time,ip) values (:userid,now(),inet_client_addr());  
        2.501684        update user_session set logintime=now(),login_count=login_count+1 where userid=:userid;  
```  
3\. 瓶颈分析与优化  
SELECT语句的延时已经通过上一个优化阶段下降到了0.45毫秒, INSERT和UPDATE语句的平均耗时也从原来的5.5和4.45下降到了2.5.原因是select的请求在内存中命中了, 因此update和insert不需要和select争抢物理io请求, 处理效率自然有一定的提高.  
但是INSERT和UPDATE的语句延时还有2.5毫秒存在很大的可优化空间.  
开启PostgreSQL的异步提交日志.  
```  
synchronous_commit = off  
wal_writer_delay = 10ms  
```  
与Oracle的异步日志差别请参考 :   
《PostgreSQL and Oracle's async commit》  
http://blog.163.com/digoal@126/blog/static/16387704020121229223072/  
## 【调优阶段3】  
1\. 压力测试  
```  
pgbench -M simple -r -c 8 -f /home/postgres/test/login.sql -j 8 -n -T 180 -h 172.16.3.33 -p 1921 -U digoal digoal  
```  
2\. 测试结果  
```  
transaction type: Custom query  
scaling factor: 1  
query mode: simple  
number of clients: 8  
number of threads: 8  
duration: 180 s  
number of transactions actually processed: 685344  
tps = 3751.377919 (including connections establishing)  
tps = 3751.568948 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.003474        \setrandom userid 1 20000000  
        0.418716        select userid,engname,cnname,occupation,birthday,signname,email,qq from user_info where userid=:userid;  
        0.511601        insert into user_login_rec (userid,login_time,ip) values (:userid,now(),inet_client_addr());  
        1.188277        update user_session set logintime=now(),login_count=login_count+1 where userid=:userid;  
```  
3\. 瓶颈分析与优化  
客户端连接使用simple协议, 存在一定的可优化空间.  
修改协议为extended, 查看性能提升多少.  
## 【调优阶段4】  
1\. 压力测试  
```  
pgbench -M extended -r -c 8 -f /home/postgres/test/login.sql -j 8 -n -T 180 -h 172.16.3.33 -p 1921 -U digoal digoal  
```  
2\. 测试结果  
```  
transaction type: Custom query  
scaling factor: 1  
query mode: extended  
number of clients: 8  
number of threads: 8  
duration: 180 s  
number of transactions actually processed: 970981  
tps = 5394.015368 (including connections establishing)  
tps = 5394.215477 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.003345        \setrandom userid 1 20000000  
        0.381675        select userid,engname,cnname,occupation,birthday,signname,email,qq from user_info where userid=:userid;  
        0.296300        insert into user_login_rec (userid,login_time,ip) values (:userid,now(),inet_client_addr());  
        0.792592        update user_session set logintime=now(),login_count=login_count+1 where userid=:userid;  
```  
3\. 瓶颈分析与优化  
客户端连接使用extended协议, 存在一定的可优化空间.  
修改协议为prepared, 查看性能提升多少.  
参见 :   
《PostgreSQL prepared statement: SPI_prepare, prepare|execute COMMAND, PL/pgsql STYLE: custom & generic plan cache》  
http://blog.163.com/digoal@126/blog/static/1638770402012112452432251/  
## 【调优阶段5】  
1\. 压力测试  
```  
pgbench -M prepared -r -c 8 -f /home/postgres/test/login.sql -j 8 -n -T 180 -h 172.16.3.33 -p 1921 -U digoal digoal  
```  
2\. 测试结果  
```  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 8  
number of threads: 8  
duration: 180 s  
number of transactions actually processed: 1044186  
tps = 5800.589330 (including connections establishing)  
tps = 5800.902491 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.003465        \setrandom userid 1 20000000  
        0.319665        select userid,engname,cnname,occupation,birthday,signname,email,qq from user_info where userid=:userid;  
        0.266931        insert into user_login_rec (userid,login_time,ip) values (:userid,now(),inet_client_addr());  
        0.777822        update user_session set logintime=now(),login_count=login_count+1 where userid=:userid;  
```  
3\. 瓶颈分析与优化  
压力测试的脚本中使用的是普通的SQL语句, 未使用初始化时用到的登陆函数和退出函数. 使用普通SQL显然比使用函数多了交互的次数以及每次发送的数据包的大小.  
使用函数看看性能能提升多少.  
## 【调优阶段6】  
1\. 登陆脚本  
```  
cat login.sql   
\setrandom userid 1 20000000  
SELECT f_user_login(:userid);  
```  
2\. 退出脚本  
```  
cat logout.sql   
\setrandom userid 1 20000000  
SELECT f_user_logout(:userid);  
```  
3\. 压力测试  
```  
pgbench -M prepared -r -c 8 -f /home/postgres/test/login.sql -j 8 -n -T 180 -h 172.16.3.33 -p 1921 -U digoal digoal  
```  
4\. 测试结果  
```  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 8  
number of threads: 8  
duration: 180 s  
number of transactions actually processed: 1616746  
tps = 8981.596290 (including connections establishing)  
tps = 8981.995800 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.004012        \setrandom userid 1 20000000  
        0.881060        SELECT f_user_login(:userid);  
```  
5\. 瓶颈分析与优化  
到这个时候看起来好像没什么好优化的了, 其实不然.  
我们知道在整个登陆过程中用到了SELECT, UPDATE, INSERT.  
其中UPDATE的表有一个PK索引, 每次更新需要修改数据表的同时还需要更新索引. 所以理论上这个更新操作表越小性能越高.  
我们可以通过拆表来提升性能. 如下 :   
拆表 :   
```  
create table user_info_0 (like user_info including all);  
create table user_info_1 (like user_info including all);  
create table user_info_2 (like user_info including all);  
create table user_info_3 (like user_info including all);  
create table user_info_4 (like user_info including all);  
create table user_session_0 (like user_session including all);  
create table user_session_1 (like user_session including all);  
create table user_session_2 (like user_session including all);  
create table user_session_3 (like user_session including all);  
create table user_session_4 (like user_session including all);  
```  
插入初始化数据 :   
```  
insert into user_info_0 (userid,engname,cnname,occupation,birthday,signname,email,qq,crt_time,mod_time)  
select generate_series(1,4000000),  
'digoal.zhou',  
'德哥',  
'DBA',  