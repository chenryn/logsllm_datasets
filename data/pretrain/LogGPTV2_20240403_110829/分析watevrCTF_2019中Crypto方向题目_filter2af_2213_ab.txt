        s.add(((121243943296116422476619559571200060016769222670118557978266602062366168+(1977841332660542788140226624633992992957242852560^key+121243943296116422476619559571200060016769222670118557978266602062366168))) ^ (key*17980375751459479892183878405763572663247662296)==242789433733772377162253757058605232140494788666115363337105327522154016)
        s.add(((242789433733772377162253757058605232140494788666115363337105327522154016+(12730614046092224360045053754976006301760768380362448587717993216548447640^key+242789433733772377162253757058605232140494788666115363337105327522154016))) ^ (key*121243943296116422476619559571200060016769222670118557978266602062366168)==2897090450760618154631253497246288923325478215090551806927512438699802516318766105962219562904)
        s.add(((2897090450760618154631253497246288923325478215090551806927512438699802516318766105962219562904+(14081787156558797875410717909399103464148697742634691073552108996284932928^key+2897090450760618154631253497246288923325478215090551806927512438699802516318766105962219562904))) ^ (key*242789433733772377162253757058605232140494788666115363337105327522154016)==7372806106688864629183362019405317958359908549913588813279832042020854419620109770781392560)
        s.check()
        res = s.model()
        res = res[key].as_long().real
        ans = ''
        msg = open('conversation','rb').readlines()
        for i in range(1,len(msg),2):
            tmp = map(int,msg[i].split('Content: ')[1].split(' '))
            ans += decrypt(tmp,res)
        if 'watevr{' in ans:
            print ans
            break
执行脚本即可恢复出通信内容如下：
    Houdini: uhm, is this thing working?
    nnewram: yeah, hi
    Houdini: hi nnew
    Houdini: so eh, do you have it?
    nnewram: id ont know what you mean
    nnewram: *dont
    nnewram: have what?
    Houdini: :bruh:
    Houdini: you know, the thing
    nnewram: what, thing?
    Houdini: the flag....
    nnewram: oooooh
    nnewram: right
    nnewram: sure let me get it
    nnewram: one second
    Houdini: kk
    nnewram: yeah here you go
    nnewram: watevr{Super_Secure_Servers_are_not_always_so_secure}
    Houdini: niceeeee
    Houdini: thank you
    Houdini: oh wait, we should probably remove the code
    nnewram: yeah that's actually kinda smart
    Houdini: ok cya later
    nnewram: cya
在通信内容中发现flag：
    watevr{Super_Secure_Servers_are_not_always_so_secure}
## Baby RLWE
题目描述如下：
Mateusz carried a huge jar of small papers with public keys written on them,
but he tripped and accidentally dropped them into the scanner and made a txt
file out of them! D: Note: This challenge is just an introduction to RLWE, the
flag is (in standard format) encoded inside the private key.
Files:[baby_rlwe.sage](https://github.com/ichunqiu-resources/anquanke/blob/master/007/baby_rlwe.sage),
[public_keys.txt](https://github.com/ichunqiu-resources/anquanke/blob/master/007/public_keys.txt)
RLWE是[Ring learning with
errors](https://en.wikipedia.org/wiki/Ring_learning_with_errors)的简称，一个RLWE问题的基本模型如下：
可以看到和我们题目当中给出的符号系统是是一致的，那么我们的任务就是：
    b1(x) = a(x)*s(x) + e1(x)
    b2(x) = a(x)*s(x) + e2(x)
    ...
    b100(x) = a(x)*s(x) + e100(x)
    其中b1(x)到b100(x)已知，a(x)已知，e1(x)到e100(x)未知，求s(x)
通过观察可以发现，这里的a(x)都是通过gen_large_poly()函数生成的，其多项式中x^0、x^1、x^2 …
x^(n-1)次方这n项的系数都不为0，其乘上s(x)后，这n项的系数仍然都不为0；而e(x)是通过gen_large_poly()函数生成的，其其多项式中x^0、x^1、x^2
…
x^(n-1)次方这n项当中的很多项系数都为0，因此a(x)s(x)再加上e(x)后，得到的结果b(x)当中的很多项的系数是和a(x)s(x)当中对应项的系数是相同的。鉴于我们这里有较多的b(x)，因此我们可以进行一个统计，把这100个b(x)当中x^(n-1)这一项的系数中出现频率最高的系数当做是a(x)s(x)当中对应项的系数，把这100个b(x)当中x^(n-2)这一项的系数中出现频率最高的系数当做是a(x)s(x)当中对应项的系数，以此类推，一直到x^0次方，即恢复出a(x)*s(x)的结果，然后将其除以a(x)，即得到了s(x)的结果。
从public_keys.txt文件中我们可以发现，b(x)的每一项当中的最高次幂为103，因此n=103+1=104，也即flag的长度为104个字符。另外这里需要注意的是，我们的a(x)和s(x)都是限制在`S.
= R.quotient(y^n +
1)`范围上的，因此我们也要先对每一个b(x)也进行`b(x)=S(b(x))`的处理，然后再进行运算。我们将上述推导过程写成脚本形式如下：
    keys = open("public_keys.txt", "r").read().split("n")[:-1]
    keys = open("public_keys.txt", "r").read().split("n")[:-1]
    temp1 = keys[0].find("^") 
    temp2 = keys[0].find(" ", temp1)
    n = Integer(keys[0][temp1+1:temp2]) + 1
    q = 40961
    F = GF(q)
    R. = PolynomialRing(F)
    S. = R.quotient(y^n + 1)
    a = S(keys[0].replace("a: ", ""))
    keys = keys[1:]
    counters = []
    for i in range(n):
        counters.append({})
    for key in keys:
        b = key.replace("b: ", "")
        b = list(S(b))
        for i in range(n):
            try:
                counters[i][b[i]] += 1
            except:
                counters[i][b[i]] = 1
    a_s = []
    for counter in counters:
        dict_keys = counter.keys()
        max_key = 0
        maxi = 0
        for key in dict_keys:
            if counter[key] > maxi:
                maxi = counter[key]
                max_key = key
        a_s.append(max_key)
    a_s = S(a_s)
    s = a_s/a
    print ''.join(map(chr,list(s)))
执行脚本即可得到flag：
    watevr{rlwe_and_statistics_are_very_trivial_when_you_reuse_same_private_keys#02849jedjdjdj202ie9395u6ky}
## 参考