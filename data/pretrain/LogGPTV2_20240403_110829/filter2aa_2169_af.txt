public:
    double r;
    double i;
    complex(double a=0, double b=0) :r(a), i(b) {}
};
complex operator+(complex op1, complex op2) {
    complex tmp;
    tmp.r = op1.r + op2.r;
    tmp.i = op1.i + op2.i;
    return tmp;
}
int main() {
    complex A(1, 2), B(3, 3),sum;
    sum = A + B;
    cout ，只能作为成员函数
3. 对于运算符+=,-=,*=,/=,&=,!=,~=,%=,>=，建议重载为成员函数
4. 其他运算符，建议重载为友元函数
++和--的重载
++和--这两个运算符可前缀也可后缀，默认情况下，前缀是先运算再返回，后缀是先返回再运算。
重载运算符的时候，可以通过关键词int作为参数来选择是前缀还是后缀使用：
前缀：
后缀：
友元运算符重载函数没有this指针，所以采用对象引用参数传递数据
return complex(op1.r+op2.r,op1.i+op2.i);
op.operator++();
operator++(X& a);
op.operator++(int);
operator++(X& a,int);
前缀后缀方式的函数内部语句取决与编程需要
示例：++,--运算符前缀和后缀的运算顺序分析
一般情况下前缀和后缀的区别
反汇编分析：
#include
using namespace std;
int main() {
    int a = 10;
    int b = 10;
    cout  >::operator >::operator
using namespace std;
class arr {
public:
    arr(int a1,int b1,int c1,int d1){
        a[0] = a1;
        a[1] = b1;
        a[2] = c1;
        a[3] = d1;
    }
    int& operator[](int aa);
private:
    int a[4];
};
int& arr::operator[](int aa) {
    if (aa = 4)exit(1);
    return a[aa];
}
int main() {
    arr op1(1, 2, 3, 4);
    int t = 0;
    t = op1[2];
    cout 
using namespace std;
class complex {
public:
    complex() {}
    complex(int a, int b) {
        r = a;
        i = b;
    }
    complex(int x) {
        r = i = x;
    }
    operator int() {
        return r + i;
    }
    void print() {
        cout 
using namespace std;
class B1{
    virtual void fun(){
        cout  fun();//对于ptr1的继承路线，fun函数是虚函数，此时fun函数指向派生类的fun函数
    ptr2 = &obj;
    ptr2 -> fun();//对于ptr2的继承路线，fun函数是普通函数，此时fun函数指向B2类中的fun函数
    return 0;
}
virtual 函数类型 函数名称(参数表)=0;
模板是实现代码重用机制的一种工具，可以实现类型参数化
模板分为：
函数模板
类模板
函数模板和模板函数
函数模板是建立一个通用函数，函数返回类型和形参类型不指定，用虚拟类型来代表，在调用的时候用
实参类型来取代虚拟类型
函数模板声明如下：
其中typename和class都可以用，功能是一样的
函数模板经过实例化生成的具体函数是模板函数
使用示例：
模板中的虚拟类型会在模板函数调用的时候，变成实参的类型
说明：
函数模板中可以用多个类型参数，每个类型参数都要用关键字typename
template关键字和函数模板之间不能有其他的内容
模板函数类似于重载函数，但同一函数模板实例化后执行相同的操作
函数模板也可以重载
函数模板与同名非模板函数可以重载，调用顺序是：
先找参数完全匹配的非重载函数，找到就调用
如果没找到，就找函数模板，将其实例化
如果实例化后产生一个相匹配的函数，就调用它
template 
返回类型 函数名(模板参数表){
    函数体
}
#include