# 《Chrome V8源码》25.最难啃的骨头——Builtin！
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
接下来的几篇文章对Builtin做专题讲解。Builtin实现了V8中大量的核心功能，可见它的重要性。但大多数的Builtin采用CAS和TQ实现，CAS和TQ与汇编类似，这给我们阅读源码带来了不少困难，更难的是无法在V8运行期间调试Builtin，这让学习Builtin愈加困难。因此，本专题将详细讲解Builtin的学习方法和调试方法，希望能起到抛砖引玉的作用。
## 1 摘要
本篇文章是Builtin专题的第一篇，讲解Built-in Functions（Builtin）是什么，以及它的初始化。Built-in
Functions（Builtin）作为V8的内建功能，实现了很多重要功能，例如ignition、bytecode handler、JavaScript
API。因此学会Builtin有助于理解V8的执行逻辑，例如可以看到bytecode是怎么执行的、字符串的substring方法是怎么实现的。本文主要内容介绍Builtin的实现方法（章节2）；Builtin初始化（章节3）。
## 2 Builtin的实现方法
Builtin的实现方法有Platform-dependent assembly
language、C++、JavaScript、CodeStubAssembler和Torque，这五种方式在使用的难易度和性能方面有明显不同。引用官方（v8.dev/docs/torque）内容如下：  
 **（1）** Platform-dependent assembly language: can be highly efficient, but
need manual ports to all platforms and are difficult to maintain.  
 **（2）** C++: very similar in style to runtime functions and have access to
V8’s powerful runtime functionality, but usually not suited to performance-sensitive areas.  
 **（3）** JavaScript: concise and readable code, access to fast intrinsics, but
frequent usage of slow runtime calls, subject to unpredictable performance
through type pollution, and subtle issues around (complicated and non-obvious)
JS semantics. Javascript builtins are deprecated and should not be added
anymore.  
 **（4）** CodeStubAssembler: provides efficient low-level functionality that is
very close to assembly language while remaining platform-independent and
preserving readability.  
 **（5）** V8 Torque: is a V8-specific domain-specific language that is
translated to CodeStubAssembler. As such, it extends upon CodeStubAssembler
and offers static typing as well as readable and expressive syntax.  
Torque是CodeStubAssembler的改进版，强调在不损失性能的前提下尽量降低使用难度，让Builtin的开发更加容易一些。
图1（来自官方）说明了使用Torque创建Builtin的过程。  
首先，开发者编写的file.tq被Torque编译器翻译为 _-tq-csa.cc/.h文件；  
其次，_-tq-csa.cc/.h被编译进可执行文件mksnapshot中；  
最后，mksnapshot生成snapshot.bin文件，该文件存储Builtin的二进制序列。  
 **再次强调：** *-tq-csa.cc/.h是由file.tq指导Torque编译器生成的Builtin源码。  
V8通过反序列化方式加载snapshot文件时没有符号表，所以调试V8源码时不能看到Torque Builtin源码，CodeStubAssembler
Builtin也存储在snapshot.bin文件中，所以调试时也看不到源码。调试方法请参见mksnapshot，下面讲解我的调试方法。
## 3 Builtin初始化
讲解源码之前先说注意事项，调试方法采用7.9版本和v8_use_snapshot选项，因为新版本不再支持v8_use_snapshot =
false，无法调试Builtin的初始化。v8_use_snapshot =
false会禁用snapshot.bin文件，这就意味着V8启动时会使用C++源码创建和初始化Builtin，而这正是我们想要看的内容。  
我认为C++、CodeStubAssembler和Torque三种Builtin最重要，因为ignition、bytecode
handler、Javascript
API等核心功能基本由这三种Builtin实现，下面对这三种Builtin做详细说明。Builtin的初始化入口代码如下：
    bool Isolate::InitWithoutSnapshot() { return Init(nullptr, nullptr); }
从`InitWithoutSnapshot()`函数的名字也可看出禁用了snapshot.bin文件，`InitWithoutSnapshot()`函数执行以下代码：
    1.  bool Isolate::Init(ReadOnlyDeserializer* read_only_deserializer,
    2.                     StartupDeserializer* startup_deserializer) {
    3.  //..............省略...............
    4.    bootstrapper_->Initialize(create_heap_objects);
    5.    if (FLAG_embedded_builtins && create_heap_objects) {
    6.      builtins_constants_table_builder_ = new BuiltinsConstantsTableBuilder(this);
    7.    }
    8.    setup_delegate_->SetupBuiltins(this);
    9.    if (FLAG_embedded_builtins && create_heap_objects) {
    10.      builtins_constants_table_builder_->Finalize();
    11.      delete builtins_constants_table_builder_;
    12.      builtins_constants_table_builder_ = nullptr;
    13.      CreateAndSetEmbeddedBlob();
    14.    }
    15.//..............省略...............
    16.    return true;
    17.  }
上述第8行代码进入`SetupBuiltins()`，在`SetupBuiltins()`中调用`SetupBuiltinsInternal()`以完成Builtin的初始化。`SetupBuiltinsInternal()`的源码如下：
    1.  void SetupIsolateDelegate::SetupBuiltinsInternal(Isolate* isolate) {
    2.    Builtins* builtins = isolate->builtins();
    3.  //省略...................
    4.    int index = 0;
    5.    Code code;
    6.  #define BUILD_CPP(Name)                                                      \
    7.    code = BuildAdaptor(isolate, index, FUNCTION_ADDR(Builtin_##Name), #Name); \
    8.    AddBuiltin(builtins, index++, code);
    9.  #define BUILD_TFJ(Name, Argc, ...)                              \
    10.    code = BuildWithCodeStubAssemblerJS(                          \
    11.        isolate, index, &Builtins::Generate_##Name, Argc, #Name); \
    12.    AddBuiltin(builtins, index++, code);
    13.  #define BUILD_TFC(Name, InterfaceDescriptor)                      \
    14.    /* Return size is from the provided CallInterfaceDescriptor. */ \
    15.    code = BuildWithCodeStubAssemblerCS(                            \
    16.        isolate, index, &Builtins::Generate_##Name,                 \
    17.        CallDescriptors::InterfaceDescriptor, #Name);               \
    18.    AddBuiltin(builtins, index++, code);
    19.  #define BUILD_TFS(Name, ...)                                                   \
    20.    /* Return size for generic TF builtins (stub linkage) is always 1. */        \
    21.    code =                                                                       \
    22.        BuildWithCodeStubAssemblerCS(isolate, index, &Builtins::Generate_##Name, \
    23.                                     CallDescriptors::Name, #Name);              \
    24.    AddBuiltin(builtins, index++, code);
    25.  #define BUILD_TFH(Name, InterfaceDescriptor)              \
    26.    /* Return size for IC builtins/handlers is always 1. */ \
    27.    code = BuildWithCodeStubAssemblerCS(                    \
    28.        isolate, index, &Builtins::Generate_##Name,         \
    29.        CallDescriptors::InterfaceDescriptor, #Name);       \
    30.    AddBuiltin(builtins, index++, code);
    31.  #define BUILD_BCH(Name, OperandScale, Bytecode)                           \
    32.    code = GenerateBytecodeHandler(isolate, index, OperandScale, Bytecode); \
    33.    AddBuiltin(builtins, index++, code);
    34.  #define BUILD_ASM(Name, InterfaceDescriptor)                                \
    35.    code = BuildWithMacroAssembler(isolate, index, Builtins::Generate_##Name, \
    36.                                   #Name);                                    \
    37.    AddBuiltin(builtins, index++, code);
    38.    BUILTIN_LIST(BUILD_CPP, BUILD_TFJ, BUILD_TFC, BUILD_TFS, BUILD_TFH, BUILD_BCH,
    39.                 BUILD_ASM);
    40.  //省略...........................
    41.  }
`SetupBuiltinsInternal()`的三大核心功能解释如下：  
 **（1）** BUILD_CPP, BUILD_TFJ, BUILD_TFC, BUILD_TFS, BUILD_TFH,
BUILD_BCH和BUILD_ASM从功能上对Builtin做了区分，注释如下：
    // CPP: Builtin in C++. Entered via BUILTIN_EXIT frame.
    //      Args: name
    // TFJ: Builtin in Turbofan, with JS linkage (callable as Javascript function).