5、如果数据库因为这个问题起不来了，要紧急解决，先把库起来，怎么处理呢？可以临时关闭index功能。   
```
关闭index功能后，线性查找，性能会下降。有INDEX时，会使用hash查找。
Disable dir_index option of the filesystem.
Note: There is no need to unmount the file system.
CAUTION: Disabling this option may impact performance on lookups in large directories.
# tune2fs -O ^dir_index /dev/device
注意，将来要开启index功能需要先umount.
To recreate the dir_index:
# umount /dev/device
# tune2fs -O dir_index /dev/device
# e2fsck -D /dev/device
```
## 原因2，inode满
1、使用df可以看到文件系统对应的inode使用量，如果达到100%，则会出现类似的错误(no space left on device ...)   
```
df -i
Filesystem     Inodes  IUsed  IFree IUse% Mounted on
/dev/sda3      905760 126543 779217   14% /
tmpfs          364177      1 364176    1% /dev/shm
/dev/sda1       51200     38  51162    1% /boot
```
2、解决办法，格式化的时候，指定需要多少inode.   
```
man mkfs.ext4
       -i bytes-per-inode
              Specify the bytes/inode ratio.  mke2fs creates an inode for every bytes-per-inode bytes of space on the disk.  The larger the bytes-per-inode ratio, the fewer inodes will be created.  This value generally shouldn't be
              smaller than the blocksize of the filesystem, since in that case more inodes would be made than can ever be used.  Be warned that it is not possible to change this ratio on a filesystem after  it  is  created,  so  be
              careful deciding the correct value for this parameter.  Note that resizing a filesystem changes the numer of inodes to maintain this ratio.
       -I inode-size
              Specify  the size of each inode in bytes.  The inode-size value must be a power of 2 larger or equal to 128.  The larger the inode-size the more space the inode table will consume, and this reduces the usable space in
              the filesystem and can also negatively impact performance.  It is not possible to change this value after the filesystem is created.
              In kernels after 2.6.10 and some earlier vendor kernels it is possible to utilize inodes larger than 128 bytes to store extended attributes for improved performance.  Extended attributes stored in large inodes are not
              visible with older kernels, and such filesystems will not be mountable with 2.4 kernels at all.
              The  default  inode  size  is  controlled by the mke2fs.conf(5) file.  In the mke2fs.conf file shipped with e2fsprogs, the default inode size is 256 bytes for most file systems, except for small file systems where the
              inode size will be 128 bytes.
```
通常指定-i，比如16K，每16K分配一个INODE。 1TB的文件系统大概有6250万个inode。   
例子，指定每8K分配一个INODE（如果文件的平均大小为8K的话）。     
```
[root@pg11-test ~]# lvs
  LV   VG       Attr       LSize  Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert
  lv01 vgdata01 -wi-ao----  4.00t                                                    
  lv02 vgdata01 -wi-ao----  4.00t                                                    
  lv03 vgdata01 -wi-ao----  4.00t                                                    
  lv04 vgdata01 -wi-ao---- <1.97t                                                    
[root@pg11-test ~]# mkfs.ext4 /dev/mapper/vgdata01-lv04 -m 0 -O extent,uninit_bg -E lazy_itable_init=1,stride=8,stripe_width=128 -i 8192 -b 4096 -T largefile -L lv04 
[root@pg11-test ~]# df -i
Filesystem                   Inodes  IUsed     IFree IUse% Mounted on
/dev/vda1                  13107200 107325  12999875    1% /
devtmpfs                   66021999    713  66021286    1% /dev
tmpfs                      66024376   2151  66022225    1% /dev/shm
tmpfs                      66024376    661  66023715    1% /run
tmpfs                      66024376     16  66024360    1% /sys/fs/cgroup
/dev/mapper/vgdata01-lv03   4194304  62361   4131943    2% /data03
/dev/mapper/vgdata01-lv02   4194304  52620   4141684    2% /data02
/dev/mapper/vgdata01-lv01   4194304  61526   4132778    2% /data01
tmpfs                      66024376      1  66024375    1% /run/user/0
/dev/mapper/vgdata01-lv04 264110080     11 264110069    1% /data04
postgres=# select pg_size_pretty(264110069*8192::numeric);
 pg_size_pretty 
----------------
 2015 GB
(1 row)
```
## 小结  
由于目前PG的不同对象，存放在不同的数据文件中，当有多个对象时，会创建多个数据文件。  
目前PG对象的数据文件存在目录结构如下：  
```  
表空间/数据库/对象  
表空间/数据库/对象.1  
...  
表空间/数据库/对象.n  
表空间/数据库/对象_fsm  
表空间/数据库/对象_vm  
表空间/数据库/对象_init  
```  
如果将单个库的所有对象存放在一个表空间中，这个表空间/数据库目录下会有很多个文件，那么可能遇到开启ext4的dir_index后，当有很多个对象时，单个目录中文件数超出限制的问题。  
比如本例，一个表空间/数据库目录下，有2000多万个文件。导致了```ext4_dx_add_entry: Directory index full!```的问题。  
为了避免这个问题，建议在单个库的单个表空间中，不要超过500万个对象。如果有更多的对象要在一个库中创建，那么可以创建多个表空间。  
当然，我们这里还没有提到文件系统的其他限制，比如一个文件系统INODE的限制。与位数，以及文件系统有关。  
## 参考  
https://bean-li.github.io/EXT4_DIR_INDEX/    
[《PostgreSQL DaaS设计注意 - schema与database的抉择》](../201610/20161012_01.md)    
[《PostgreSQL 备库apply延迟(delay)原理分析与诊断》](../201703/20170301_01.md)    
[《PostgreSQL 流复制延迟的测试方法》](../201604/20160407_03.md)    
[《PostgreSQL standby 在万兆网环境中缘何 延迟? 如何解决?》](../201512/20151228_01.md)    
https://serverfault.com/questions/104986/what-is-the-maximum-number-of-files-a-file-system-can-contain  
https://ext4.wiki.kernel.org/index.php/Ext4_Howto#Bigger_File_System_and_File_Sizes  
https://ext4.wiki.kernel.org/index.php/Ext4_Disk_Layout  
https://stackoverflow.com/questions/466521/how-many-files-can-i-put-in-a-directory  
https://serverfault.com/questions/482998/how-can-i-fix-it-ext4-fs-warning-device-sda3-ext4-dx-add-entry-directory-in  
https://access.redhat.com/solutions/29894   
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")