GPU
I
L
L
b
e
W
−
U
b
e
W
−
H
C
S
Network traces
(b)
I
L
L
b
e
W
−
U
b
e
W
−
H
C
S
Network traces
(a)
Fig. 9. Sustained processing throughput for Snort using diﬀerent network traces. In (a)
content matching is performed on the CPU for both approaches. In (b), both content
and pcre matching is performed on the GPU.
on a single device. It is possible to run multiple instances of Snort dividing the
work amongst them, or modify Snort to make it multi-threaded. We are cur-
rently in the processes of extending Snort accordingly but this work is beyond
the scope of this paper.
We ran Snort using the network traces described in Section 5.1. Figure 9(a)
shows the achieved throughput for each network trace, when regular expressions
are executed in CPU and GPU, respectively. In both cases, all content rules are
executed by the CPU. We can see that even when pcre matching is disabled, the
overall throughput is still limited. This is because content rules are executed
on the CPU, which limits the overall throughput.
We further oﬄoad content rules matching on the GPU using the implementa-
tion of GPU string matching from our previous work [30], so that both content
and pcre patterns are matched on the GPU. As we can see in Figure 9(b), the
overall throughput exceeds 800 Mbit/s, which is an 8 times speed increase over
the default Snort implementation. The performance for the LLI trace is still
limited, primarily due to the extra overhead spent for reassembling the large
amount of diﬀerent ﬂows that are contained in the trace.
5.5 Worst-Case Performance
In this section, we evaluate the performance of Snort for the worst-case sce-
nario in which each captured packet has to be matched against several regular
expressions independently. By sending crafted traﬃc, an attacker may trigger
worst-case backtracking behavior that forces a packet to be matched against
more than one regular expressions [25].
We synthetically create worst-case conditions, in which each and every packet
has to be matched against a number of regular expressions, by removing all
Regular Expression Matching on Graphics Hardware
279
GPU
CPU
1000
800
600
400
200
)
c
e
s
/
s
t
i
b
M
(
t
u
p
h
g
u
o
r
h
T
5
10
15
20
Number of Regular Expressions
Fig. 10. Sustained throughput for Snort when using only regular expressions
content and uricontent keywords from all Snort rules. Therefore, Snort’s pre-
ﬁltering pattern matching engine is rendered completely ineﬀective, forcing all
captured packets to be evaluated against each pcre pattern individually.
Figure 10 shows how the CPU and the GPU implementations scale as the
number of regular expressions increases. We vary the number of pcre web rules
from 5 to 20, while Snort was operating on the U-Web trace. In each run, each
packet of the network trace is matched against all regular expressions. Even if
the attacker succeeds in causing every packet to be matched against 20 diﬀerent
regular expressions, the overall throughput of Snort remains over 700 Mbit/s
when regular expression matching is performed on the GPU. Furthermore, in all
cases the sustained throughput of the GPU implementation was 9 to 10 times
faster than the throughput on the CPU implementation.
6 Discussion
An alternative approach for regular expression matching, not studied in this
paper, is to combine many regular expressions into a single large one. The com-
bination can be performed by concatenating all individual expressions using the
logical union operator [28]. However, the compilation of the resulting single ex-
pression may exponentially increase the total number of states of the resulting
deterministic automaton [16, 26]. The exponential increase, mainly referred as
state-space explosion in the literature, occurs primarily due to the inability of
the DFA to follow multiple partial matches with a single state of execution [15].
To prevent state-space explosion, the set of regular expressions can be parti-
tioned into multiple groups, which can dramatically reduce the required memory
space [31, 16]. However, multiple DFAs require the traversal of input data mul-
tiple times, which reduces the overall throughput. Recent approaches attempt
to reduce the space requirements of the automaton by reducing the number of
transitions [16] or using extra scratch memory per state [26, 15]. The resulting
automaton is compacted into a structure that consists of a reasonable number
of states that are feasible to store in low-memory systems.
280
G. Vasiliadis et al.
Although most of these approaches have succeed in combining all regular
expressions contained in current network intrusion detection systems into a small
number of automata, it is not straightforward how current intrusion detection
systems (like Snort) can adopt these techniques. This is because most of the
regular expressions used in attack signatures have been designed such that each
one is scanned in isolation for each packet. For example, many expressions in
Snort are of the form /^.{27}/ or /.{1024}/, where . is the wild card for
any character followed by the number of repetitions. Such expressions are used
for matching the presence of ﬁxed size segments in packets that seem suspicious.
Therefore, even one regular expression of the form /.{N}/ will cause the relevant
automaton to generate a huge number of matches in the input stream that need
to be checked against in isolation.
Moreover, the combination of regular expressions into a single one prohibits
the use of speciﬁc modiﬁers for each regular expression. For example, a regular
expression in a Snort rule may use internal information, like the matching posi-
tion of the previous pattern in the same rule. In contrast, our proposed approach
has been implemented directly in the current Snort architecture and boost its
overall performance in a straightforward way. In our future work we plan to
explore how a single-automaton approach could be implemented on the GPU.
Finally, an important issue in network intrusion detection systems is traﬃc
normalization. However, this is not a problem for our proposed architecture since
traﬃc normalization is performed by the Snort preprocessors. For example, the
URI preprocessor normalizes all URL instances in web traﬃc, so that URLs like
“GET /%43md.exe HTTP/1.1” become GET /cmd.exe HTTP/1.1. Furthermore,
traﬃc normalization can be expressed as a regular expression matching pro-
cess [22], which can also take advantage of GPU regular expression matching.
7 Related Work
The expressive power of regular expressions enables security researchers and
system administrators to improve the eﬀectiveness of attack signatures and at the
same time reduce the number of false positives. Popular NIDSes like Snort [21]
and Bro [20] take advantage of regular expression matching and come preloaded
with hundreds of regexp-based signatures for a wide variety of attacks.
Several researchers have shown interest in reducing the memory use of the
compiled regular expressions. Yu et al. [31] propose an eﬃcient algorithm for
partitioning a large set of regular expressions into multiple groups, reducing
signiﬁcantly the overall space needed for storing the automata. Becchi et al. [4]
propose a hybrid design that addresses the same issue by combining the beneﬁts
of DFAs and NFAs. In the same context, recent approaches attempt to reduce the
space requirements of an automaton by reducing the number of transitions [16]
or using extra scratch memory per state [26, 15].
A signiﬁcant amount of work focuses on the parallelization of regular expres-
sion matching using specialized hardware implementations [9, 24, 7, 18]. Sidhu
and Prasanna [24] implemented a regular expression matching architecture for
Regular Expression Matching on Graphics Hardware
281
FPGAs achieving very good space eﬃciency. Moscola et al. [18] were the ﬁrst
that used DFAs instead of NFAs and demonstrated a signiﬁcant improvement
in throughput.
Besides specialized hardware solutions, commodity multi-core processors have
begun gaining popularity, primarily due to their increased computing power and
low cost. For highly parallel algorithms, packing multiple cores is far more ef-
ﬁcient than increasing the processing performance of a single data stream. For
instance, it has been shown that ﬁxed-string pattern matching implementations
on SPMD processors, such as the IBM Cell processor, can achieve a computa-
tional throughput of up to 2.2 Gbit/s [23].
Similarly, the computational power and the massive parallel processing ca-
pabilities of modern graphics cards can be used for non graphics applications.
Many attempts have been made to use graphics processors for security appli-
cations, including cryptography [11, 8], data carving [17], and intrusion detec-
tion [14,30,10,27,13]. In our previous work [30], we extended Snort to oﬄoad the
string matching operations of the Snort IDS to the GPU, oﬀering a three times
speedup to the processing throughput compared to a CPU-only implementation.
In this work, we build on our previous work to enable both string and regular
expression matching to be performed on the GPU.
8 Conclusion
In this paper, we have presented the design, implementation, and evaluation of
a regular expression matching engine running on graphics processors, tailored to
speed up the performance of network intrusion detection systems. Our prototype
implementation was able to achieve a maximum raw processing throughput of
16 Gbit/s, outperforming traditional CPU implementations by a factor of 48.
Moreover, we demonstrated the beneﬁts of GPU regular expression matching
by implementing it in the popular Snort intrusion detection system, achieving a
60% increase in overall packet processing throughput.
As part of our future work, we plan to run multiple Snort instances in parallel
utilizing multiple GPUs instead of a single one. Modern motherboards contain
many PCI Express slots that can be equipped with multiple graphics cards.
Using a load-balancing algorithm, it may be feasible to distribute diﬀerent ﬂows
to diﬀerent Snort instances transparently, and allow each instance to execute
device code on a diﬀerent graphics processor. We believe that building such
“clusters” of GPUs will enable intrusion detection systems to inspect multi-
Gigabit network traﬃc using commodity hardware.
Acknowledgments
This work was supported in part by the Marie Curie Actions – Reintegration
Grants project PASS. Giorgos Vasiliadis, Michalis Polychronakis, Spiros Anto-
natos, Evangelos P. Markatos and Sotiris Ioannidis are also with the University
of Crete.
282
G. Vasiliadis et al.
References
1. Pcre: Perl compatible regular expressions, http://www.pcre.org
2. Testing intrusion detection systems: a critique of the 1998 and 1999 darpa intrusion
detection system evaluations as performed by lincoln laboratory. ACM Trans. Inf.
Syst. Secur. 3(4), 262–294 (2000)
3. Aho, A.V., Corasick, M.J.: Eﬃcient string matching: an aid to bibliographic search.
Communications of the ACM 18(6), 333–340 (1975)
4. Becchi, M., Crowley, P.: A hybrid ﬁnite automaton for practical deep packet in-
spection. In: CoNEXT 2007: Proceedings of the 2007 ACM CoNEXT conference,
pp. 1–12. ACM, New York (2007)
5. Berk, E., Ananian, C.:
Jlex: A lexical
analyzer
generator
for
java,
http://www.cs.princeton.edu/~appel/modern/java/JLex/
6. Berry, G., Sethi, R.: From regular expressions to deterministic automata. Theor.
Comput. Sci. 48(1), 117–126 (1986)
7. Clark, C.R., Schimmel, D.E.: Eﬃcient reconﬁgurable logic circuits for matching
complex network intrusion detection patterns, pp. 956–959 (2003)
8. Cook, D.L., Ioannidis, J., Keromytis, A.D., Luck, J.: Cryptographics: Secret key
cryptography using graphics cards. In: Menezes, A. (ed.) CT-RSA 2005. LNCS,
vol. 3376, pp. 334–350. Springer, Heidelberg (2005)
9. Floyd, R.W., Ullman, J.D.: The compilation of regular expressions into integrated
circuits. J. ACM 29(3), 603–622 (1982)
10. Goyal, N., Ormont, J., Smith, R., Sankaralingam, K., Estan, C.: Signature match-
ing in network processing using SIMD/GPU architectures. Technical Report
TR1628 (2008)
11. Harrison, O., Waldron, J.: Practical symmetric key cryptography on modern graph-
ics hardware. In: Proceedings of the 17th USENIX Security Symposium, Berkeley,
CA, USA, July 2008, pp. 195–209. USENIX Association (2008)
12. Hopcroft, J.E., Ullman, J.D.: Introduction To Automata Theory, Languages, And
Computation. Addison-Wesley Longman Publishing Co., Inc., Boston (1990)
13. Huang, N.-F., Hung, H.-W., Lai, S.-H., Chu, Y.-M., Tsai, W.-Y.: A gpu-based
multiple-pattern matching algorithm for network intrusion detection systems. In:
Proceedings of the 22nd International Conference on Advanced Information Net-
working and Applications (AINA), pp. 62–67
14. Jacob, N., Brodley, C.: Oﬄoading IDS computation to the GPU. In: Proceedings of
the 22nd Annual Computer Security Applications Conference on Annual Computer
Security Applications Conference (ACSAC 2006), Washington, DC, USA, pp. 371–
380. IEEE Computer Society, Los Alamitos (2006)
15. Kumar, S., Chandrasekaran, B., Turner, J., Varghese, G.: Curing regular expres-
sions matching algorithms from insomnia, amnesia, and acalculia. In: ANCS 2007:
Proceedings of the 3rd ACM/IEEE Symposium on Architecture for networking
and communications systems, pp. 155–164. ACM, New York (2007)
16. Kumar, S., Dharmapurikar, S., Yu, F., Crowley, P., Turner, J.: Algorithms to ac-
celerate multiple regular expressions matching for deep packet inspection. In: SIG-
COMM 2006: Proceedings of the 2006 conference on Applications, technologies,
architectures, and protocols for computer communications, pp. 339–350. ACM,
New York (2006)
17. Richard III, G.G., Marziale, L., Roussev, V.: Massive threading: Using GPUs to
increase the performance of digital forensics tools. Digital Investigation 1, 73–81
(2007)
Regular Expression Matching on Graphics Hardware
283
18. Moscola, J., Lockwood, J., Loui, R.P., Pachos, M.: Implementation of a content-
scanning module for an internet ﬁrewall. In: FCCM, pp. 31–38 (2003)
19. NVIDIA. NVIDIA CUDA Compute Uniﬁed Device Architecture Programming
Guide, version 1.1,
http://developer.download.nvidia.com/compute/cuda/1 1/NVIDIA CUDA
Programming Guide 1.1.pdf
20. Paxson, V.: Bro: A system for detecting network intruders in real-time. In: Pro-
ceedings of the 7th conference on USENIX Security Symposium (SSYM 1998),
Berkeley, CA, USA, p. 3. USENIX Association (1998)
21. Roesch, M.: Snort: Lightweight intrusion detection for networks. In: Proceedings
of the 1999 USENIX LISA Systems Administration Conference (November 1999)
22. Rubin, S., Jha, S., Miller, B.: Protomatching Network Traﬃc for High Through-
put Network Intrusion Detection. In: Proceedings of the 13th ACM conference on
Computer and Communications Security (CCS), pp. 47–58
23. Scarpazza, D.P., Villa, O., Petrini, F.: Exact multi-pattern string matching on the
cell/b.e. processor. In: CF 2008: Proceedings of the 2008 conference on Computing
frontiers, pp. 33–42. ACM, New York (2008)
24. Sidhu, R., Prasanna, V.: Fast regular expression matching using FPGAs. In: IEEE
Symposium on Field-Programmable Custom Computing Machines, FCCM 2001
(2001)
25. Smith, R., Estan, C., Jha, S.: Backtracking algorithmic complexity attacks against
a nids. In: ACSAC 2006: Proceedings of the 22nd Annual Computer Security Appli-
cations Conference on Annual Computer Security Applications Conference, Wash-
ington, DC, USA, pp. 89–98. IEEE Computer Society, Los Alamitos (2006)
26. Smith, R., Estan, C., Jha, S.: Xfa: Faster signature matching with extended au-
tomata. In: IEEE Symposium on Security and Privacy, pp. 187–201. IEEE Com-
puter Society, Los Alamitos (2008)
27. Smith, R., Goyal, N., Ormont, J., Sankaralingam, K., Estan, C.: Evaluating GPUs
for network packet signature matching. In: Proceedings of the International Sym-
posium on Performance Analysis of Systems and Software, ISPASS (2009)
28. Sommer, R., Paxson, V.: Enhancing byte-level network intrusion detection signa-
tures with context. In: CCS 2003: Proceedings of the 10th ACM conference on
Computer and communications security, pp. 262–271. ACM, New York (2003)
29. Thompson, K.: Programming techniques: Regular expression search algorithm.
Commun. ACM 11(6), 419–422 (1968)
30. Vasiliadis, G., Antonatos, S., Polychronakis, M., Markatos, E.P., Ioannidis, S.:
Gnort: High performance network intrusion detection using graphics processors.
In: Lippmann, R., Kirda, E., Trachtenberg, A. (eds.) RAID 2008. LNCS, vol. 5230,
pp. 116–134. Springer, Heidelberg (2008)
31. Yu, F., Chen, Z., Diao, Y., Lakshman, T.V., Katz, R.H.: Fast and memory-eﬃcient
regular expression matching for deep packet inspection. In: ANCS 2006: Proceed-
ings of the 2006 ACM/IEEE symposium on Architecture for networking and com-
munications systems, pp. 93–102. ACM, New York (2006)