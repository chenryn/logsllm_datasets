could  cause  the  antenna  to  enter  limits  and  possibly 
emergency limits.  The simple servo does not provide any 
control over acceleration and velocity. 
q d(s)
L(s) +
-
EL  3t m) 
(Eq. 5) 
Figure 6 Servo loop simulated response  
8.  Symbolic Model  
To  regulate  overshoot,  we  need  to  add  an  additional 
feedback  to  slow  the  antenna  as  it  arrives  close  its  final 
position.    The magnitude of the feedback is a function of 
the  rate  of  the  antenna  and  the  overall  system  time 
constant.   By setting  t d  >  3t m, the effects  t m of can be 
ignored.  Differentiating the position and setting the gain 
to  t d  produces  the  equation  for  the  overshoot  feedback 
protection transfer function. 
 F(s)/q (s)  = t d s 
(Eq. 6) 
To regulate velocity, we will add rate control.  The rate 
control will monitor the position and compute the rate.   If 
the rate exceeds a certain threshold, the offending value of 
E(s) will be saved and E(s) will not be allowed to exceed 
that value.   In the event the rate is exceeded, E(s) will be 
set to zero. 
technique  models 
This experiment encodes a finite state model into the 
model  checker  SMV  [CLA00].  The  paper  follows  the 
technique  of  Ammann  [AMM01]  and  Chan  [CAB+98].   
continuous  operation  by 
This 
partitioning 
  This 
partitioning  is  the  art  of  applying  this  analysis.      The 
critical  states  are  determined  by  understanding 
the 
hazards.   For instance, accidents can occur if the antenna 
is moving too fast near a physical stop. 
into  discrete  critical  states. 
it 
After the model is entered into SMV, it is analyzed by 
constructing  a  set  of  safety  predicates.    The  model 
checker analyzes the state space to find counterexamples 
where  the  predicate  is  violated.        For  each  violation,  a 
new software artifact is designed and modeled to mitigate 
the  hazard.      The  model  checker  is  executed,  and  the 
process repeats. 
Overshoot Compensation
  t d
w(s)
s
q d(s)
L(s)
+
E(s)
+
-
-
|w(s)| > W m :  0
else
:  1
Rate Control
Gd/( t ds+1)
D(s)
Acceleration
Control
G m/( t m s+1) 1/s
Antenna System
q (s)
P(s)
Figure 7 Control loop with acceleration, rate, and overshoot compensation 
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:14:03 UTC from IEEE Xplore.  Restrictions apply. 
8.1.  SMV Model 
Table 3 Angular rate values 
Space prohibits showing the details of every modeled 
component.      Therefore,  examples  of  different  modeling 
and analysis techniques are shown. 
Like the real system, the model has a clock.  In the real 
system, the software periodically samples the position of 
the antenna and the status indicators and provides updates 
to the drive level.   For SMV, the clock is a little different.   
It provides synchronization between the different modeled 
components.  For both evaluating counterexamples and to 
model  the  antenna  system,  it  is  beneficial  to  have  each 
component active on different clock cycles.   The clock is 
a  state  machine  in  a  sequential  loop  of  states  getrate, 
move, and sample.  The servo is allowed to change during 
getrate.    The  angular  velocity  is  updated  during  move.  
The antenna position is updated during sample.    
The  servo  is  modeled  as  a  random  function.    This 
allows  the  safety  of  the  system  to  be  analyzed  for  all 
servo outputs in any sequence.  If the system is shown to 
be  safe  for  a  rogue  servo,  safety  is  shown  for  normal 
operations.    This is an important and powerful modeling 
aspect.      The  safety  of  the  servo  has  already  been 
validated  in  Section  7.    The  output  is  defined  to  be  an 
integer from  –4  to  +4.      Each  value  is  also  assigned  a 
name  to  make  the  SMV  spec  more  readable.    The  SMV 
variable for the servo output is “Vi.”  See Table 2.    
Table 2 Servo output states 
Value 
Name 
Value 
negVhigh 
negHigh 
negMed 
negLow 
zeroV 
-4 
-3 
-2 
-1 
0 
The applicable SMV statements are shown below. 
1 
2 
3 
4 
Name 
posLow 
posMed 
posHigh 
posVhigh 
  VAR 
  ASSIGN 
Vi : -4..4; 
init(Vi) := -4..4;   
next(Vi) :=  
case 
esac; 
clock != move : Vi; 
1             : -4..4; 
to  angular  velocity  are 
The  angular  velocity  is  dependent  on  both  the  servo 
output  and  the  previous  state  of  the  angular  velocity.   
Changes 
to  physical 
constraints.    The rate states are shown in Table  3.  The 
rate transitions rules captured in SMV (not shown) restrict 
the change in angular rate.   For instance, the rate can only 
change in the direction of servo output and change by a 
value 2  for  a  clock  cycle.      In  the  event  of  an  open  loop 
condition, the value can change by 3 during a clock cycle.  
tied 
Variable 
1 
2 
3 
4 
5 
6 
pos _slow 
pos _med 
pos _fast 
pos _too_fast 
pos _way_fast 
pos_open_loop 
Variable 
neg_open_loop 
neg_way_fast 
neg_too_fast 
neg_fast 
neg_med 
neg_slow 
zero_rate 
-6 
-5 
-4 
-3 
-2 
-1 
0 
The position of the antenna is a function of its previous 
position and the angular rate.    The continuous range is 
shown  in  Table  4  and  includes  the  states  of  Figure  1.  
States are added to capture the crictal condition of being 
close  to  limits  (low_edge  and  up_edge)  as  well  as  the 
states  needed  to  remove  a  limit  condition  (low_hist  and 
up_hist).   
Table 4 Antenna position 
1 
2 
3 
4 
5 
Variable 
Variable 
up_hist 
up_edge 
up_lim 
up_emlim 
up_stop 
low_stop 
low_emlim 
low_lim 
low_edge 
low_hist 
operate 
-5 
-4 
-3 
-2 
-1 
0 
After  the  antenna  system  is  modeled,  the  protection 
software is modeled.   The protection software detects a 
hazardous  condition  then  takes  appropriate  corrective 
action.      The  SMV  spec  for  the  Open  Loop  &  Off 
Detector is shown below. 
  VAR 
  ASSIGN 
   init(remoteOnOff) := on; 
   next(remoteOnOff) := 
    case  
    esac; 
clock != sample : remoteOnOff; 
power = off         : off ; 
rate  pos_too_fast : off ; 
position  up_lim   : off ; 
1 : remoteOnOff; 
remoteOnOff     : { on, off }; 
This spec turns off the antenna drive system if the rate 
is  too  fast.    Similar  specs  are  developed  for  each 
protection software object. 
8.2.  Safety Predicates 
A  safety  predicate  is  constructed  for  each  hazard 
analyzed.    The  model  is  then  executed  to  determine  if 
counterexa mples  exist  that  violate  the  predicate.      The 
following spec checks for the open loop condition.  The 
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:14:03 UTC from IEEE Xplore.  Restrictions apply. 
first  specifies  that  the  rate  should  never  hit  100%.    The 
second  specifies  that  if  the  rate  is  ever  exceeded,  the 
antenna is disabled.  
SPEC 
  AG( rate = neg_way_fast) 
SPEC 
 AG( ( rate > pos_too_fast  
     | rate  AF ( power = off ) ) 
9.  Results 
Each  of 
the  modeling 
techniques  reveal  safety 
concerns that are not captured by the other.   The benefits 
of  control  theory  and  simulation  modeling  are  well 
accepted  for  this  type  of  system.        The  symbolic  model 
checker  proved  to  be  extremely  powerful  in  identifying 
the set of conditions that could lead to an accident.  
During analysis, the symbolic model checker identified 
the need for additional protection software models.   For 
example, the rate limiter object was added to limit speed 
near a limit.   Only a subset of the protection required is 
identified  during  a  typical  development  activity.      Only 
through  rigorous  models  are  the  subtle  safety  issues 
identified. 
  The  counterexamples  provide  a  set  of 
requirements for the protection software. 
For  the  antenna  system,  the  SMV  model  executed  in 
260  seconds  and  required  521,211  Binary  Decision 
Diagram  (BDD)  nodes  and  10  MB of state space.   The 
model consists of 300 statements and 11 safety predicates.  
However,  as  with  many  SMV  models,  seemly  small 
changes can result in a state space explosion.   Therefore, 
the challenge is to find the minimum state mapping that 
captures the critical aspect of the system. 
10.  Conclusion 
When  analyzing  the  hazards  of  complex  systems, 
many techniques may be required to adequately address 
all concerns.   Just because a system seems too analog or 
real-time, that does not mean that using a symbolic model 
checker will not yield worthwhile results.   
This experiment shows that meaningful statements can 
be  made  about  the  implementation  of  a  servo  loop  by 
doing  symbolic  model  checking  of  its  environment.    By 
combining techniques, otherwise hidden or subtle hazards 
could go unnoticed.  
11.  Acknowledgements 
This  work  was  supported,  in  part,  by  the  National 
Science  Foundation  under  grant  CCR-99-01030. 
  I 
appreciate  the  guidance,  review,  and  direction  provided 
by Paul Ammann. 
12.  References 
[AMM01] Paul Ammann, Wei Ding, and Daling Xu.  Using a 
Model  Checker  to  Test  Safety  Properties.    In  Proceedings 
ICECCS  2001:  Seventh  IEEE  International  Conference  on 
Engineering  of  Complex  Computer  Systems,  pages  212-221, 
Skovde, Sweden, June 2001. 
  [CAB+98]  William  Chan,  Richard  J.  Anderson,  Paul  Beame, 
Steve Burns, Francesmary Modugno and David Notkin. Model 
Checking Large Software Specifications.  IEEE Transactions on 
Software Engineering, 24(7):498-520, July 1998. 
[CLA00]  E.  M.  Clarke,  O.  Grumberg,  and  D.  Peled.  Model 
Checking.  MIT Press, Cambridge, Massachusetts, USA, 2000. 
[LEV95]  Nancy  G.  Leveson  Safeware:  System  Safety  and 
Computers, Addison-Wesley, 1995. 
[DOR81] Richard C. Dorf: Modern Control Systems, Addison-
Wesley, 1981. 
[RUS89]  John  Rushby.  Kernels  for  safety?  In  Tom Anderson, 
editor, Safe and Secure Computing Systems, 210-220. Blackwell 
Scientific Publications, 1989. Proceedings of a Symposium held 
in Glasgow, UK, October, 1986. 
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:14:03 UTC from IEEE Xplore.  Restrictions apply.