# Antenna System Control and Safety Analysis

## Introduction
Improper control of the antenna system can cause it to reach its operational limits and, in extreme cases, even trigger emergency stops. A basic servo mechanism lacks the capability to regulate acceleration and velocity, which are crucial for smooth and safe operation.

## Servo Loop Simulation
The servo loop's simulated response is illustrated in Figure 6. To manage overshoot, an additional feedback loop is necessary. This feedback loop slows down the antenna as it approaches its final position. The feedback strength depends on the antenna's rate and the overall system time constant. By setting \( t_d > 3t_m \), the effects of \( t_m \) can be disregarded. Differentiating the position and setting the gain to \( t_d \) yields the equation for the overshoot feedback protection transfer function:

\[ \frac{F(s)}{q(s)} = t_d s \quad \text{(Eq. 6)} \]

For velocity regulation, a rate control mechanism is introduced. This mechanism monitors the position and computes the rate. If the rate exceeds a certain threshold, the value of \( E(s) \) is saved, and \( E(s) \) is not allowed to exceed that value. If the rate is exceeded, \( E(s) \) is set to zero.

## Symbolic Model
To regulate overshoot, an additional feedback loop is added to slow the antenna as it nears its final position. The feedback magnitude is a function of the antenna's rate and the system's time constant. By setting \( t_d > 3t_m \), the effects of \( t_m \) can be ignored. Differentiating the position and setting the gain to \( t_d \) produces the equation for the overshoot feedback protection transfer function:

\[ \frac{F(s)}{q(s)} = t_d s \quad \text{(Eq. 6)} \]

To regulate velocity, a rate control mechanism is added. This mechanism monitors the position and computes the rate. If the rate exceeds a certain threshold, the offending value of \( E(s) \) is saved, and \( E(s) \) is not allowed to exceed that value. If the rate is exceeded, \( E(s) \) is set to zero.

### SMV Model
This experiment encodes a finite state model into the model checker SMV [CLA00], following the techniques of Ammann [AMM01] and Chan [CAB+98]. The critical states are determined by understanding the hazards, such as the antenna moving too fast near a physical stop.

After the model is entered into SMV, it is analyzed by constructing a set of safety predicates. The model checker analyzes the state space to find counterexamples where the predicate is violated. For each violation, a new software artifact is designed and modeled to mitigate the hazard. The process is iterative, with the model checker being executed repeatedly until all violations are resolved.

#### Clock and Servo Modeling
The model includes a clock to synchronize different components. The real system periodically samples the antenna's position and status indicators, providing updates to the drive level. In the SMV model, the clock is a state machine with states `getrate`, `move`, and `sample`. The servo is modeled as a random function, allowing the analysis of the system's safety for any sequence of servo outputs. The servo output is defined as an integer from -4 to +4, with each value assigned a name for readability (Table 2).

**Table 2: Servo Output States**
| Value | Name     |
|-------|----------|
| -4    | negVhigh |
| -3    | negHigh  |
| -2    | negMed   |
| -1    | negLow   |
| 0     | zeroV    |
| 1     | posLow   |
| 2     | posMed   |
| 3     | posHigh  |
| 4     | posVhigh |

#### Angular Velocity and Position
The angular velocity depends on the servo output and the previous state of the angular velocity. The rate states are shown in Table 3, with transitions restricted by rules captured in SMV. The position of the antenna is a function of its previous position and the angular rate (Table 4).

**Table 3: Angular Rate Values**
| Variable       | Value |
|----------------|-------|
| pos_slow       | -6    |
| pos_med        | -5    |
| pos_fast       | -4    |
| pos_too_fast   | -3    |
| pos_way_fast   | -2    |
| pos_open_loop  | -1    |
| zero_rate      | 0     |
| neg_open_loop  | 1     |
| neg_way_fast   | 2     |
| neg_too_fast   | 3     |
| neg_fast       | 4     |
| neg_med        | 5     |
| neg_slow       | 6     |

**Table 4: Antenna Position**
| Variable  | Value |
|-----------|-------|
| up_hist   | -5    |
| up_edge   | -4    |
| up_lim    | -3    |
| up_emlim  | -2    |
| up_stop   | -1    |
| low_stop  | 0     |
| low_emlim | 1     |
| low_lim   | 2     |
| low_edge  | 3     |
| low_hist  | 4     |
| operate   | 5     |

### Protection Software
The protection software detects hazardous conditions and takes corrective actions. The SMV specification for the Open Loop & Off Detector is provided below:

```smv
VAR
  remoteOnOff : { on, off };
ASSIGN
  init(remoteOnOff) := on;
  next(remoteOnOff) := 
    case
      clock != sample : remoteOnOff;
      power = off : off;
      rate = pos_too_fast : off;
      position = up_lim : off;
      1 : remoteOnOff;
    esac;
```

This specification turns off the antenna drive system if the rate is too fast. Similar specifications are developed for each protection software object.

## Safety Predicates
A safety predicate is constructed for each hazard analyzed. The model is then executed to determine if counterexamples exist that violate the predicate. The following specification checks for the open loop condition:

```smv
SPEC AG( rate = neg_way_fast )
SPEC AG( ( rate > pos_too_fast ) -> AF( power = off ) )
```

## Results
Each modeling technique reveals safety concerns that others do not capture. The symbolic model checker identified the need for additional protection software models, such as a rate limiter to limit speed near a limit. The SMV model executed in 260 seconds, requiring 521,211 BDD nodes and 10 MB of state space. The model consists of 300 statements and 11 safety predicates.

## Conclusion
Analyzing the hazards of complex systems often requires multiple techniques. This experiment demonstrates that meaningful statements about the implementation of a servo loop can be made through symbolic model checking. Combining techniques helps uncover otherwise hidden or subtle hazards.

## Acknowledgements
This work was supported, in part, by the National Science Foundation under grant CCR-99-01030. I appreciate the guidance, review, and direction provided by Paul Ammann.

## References
[AMM01] Paul Ammann, Wei Ding, and Daling Xu. Using a Model Checker to Test Safety Properties. In Proceedings ICECCS 2001: Seventh IEEE International Conference on Engineering of Complex Computer Systems, pages 212-221, Skovde, Sweden, June 2001.
[CAB+98] William Chan, Richard J. Anderson, Paul Beame, Steve Burns, Francesmary Modugno, and David Notkin. Model Checking Large Software Specifications. IEEE Transactions on Software Engineering, 24(7):498-520, July 1998.
[CLA00] E. M. Clarke, O. Grumberg, and D. Peled. Model Checking. MIT Press, Cambridge, Massachusetts, USA, 2000.
[LEV95] Nancy G. Leveson. Safeware: System Safety and Computers. Addison-Wesley, 1995.
[DOR81] Richard C. Dorf. Modern Control Systems. Addison-Wesley, 1981.
[RUS89] John Rushby. Kernels for safety? In Tom Anderson, editor, Safe and Secure Computing Systems, 210-220. Blackwell Scientific Publications, 1989. Proceedings of a Symposium held in Glasgow, UK, October, 1986.