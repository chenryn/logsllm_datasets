output.write(bytes, 0, bytes.length);
...
}
public void toastIMEI(String imei){
Context app = getApplicationContext();
String text = "Your IMEI is " + imei;
int duration = Toast.LENGTH_SHORT;
Toast toast = Toast.makeText(app, text, duration);
toast.show();
}
public void onStart(){
Leakage.deviceId = getIMEI();
}
public void onResume(){
toastIMEI(Leakage.deviceId);
}
public void onDestroy(){
String imei = Leakage.deviceId;
byte[] bytes = imei.getBytes();
for(int i=0; i(){
BoolWrapper r0;
r0 := @this: BoolWrapper;
specialinvoke r0.()>();
return; }
}
With the created shadows, we instrument sources, data propaga-
tion code and sinks. At the source of information ﬂow, we intro-
duce taint by setting the corresponding shadow variable to “true”.
For data propagation code, we instrument an individual instruction
depending on its type. 1) If the instruction is an assignment state-
ment or unary operation, we insert a deﬁnition statement on cor-
relative shadow variables. 2) If it is a binary operation, a binary
OR statement is inserted to operate on shadow variables. If one of
the operators is a constant, we replace its shadow with a constant
“false”. 3) Or, if it is a function call, we need to add code to bind
shadows of actual parameters and return value to shadow param-
eters. 4) Further, if the instruction is a API call, we model and
instrument the API with its taint propagation logic.
We generally put APIs into the following categories and handle
each category with a different model. “get” APIs have straightfor-
ward taint propagation logic, always propagating taint from param-
eters to their return values. Therefore, we generate a default rule,
which propagates taint from any of the input parameters to the re-
turn value. Similarly, simple “set” APIs are modeled as they prop-
agate taint from one parameter to another parameter or “this” ref-
erence. APIs like Vector.add(Object) inserts new elements
into an aggregate construct and thus can be modeled as a binary
operation, such that the object is tainted if it is already tainted or
the newly added element is tainted. APIs like android.content.
ContentValues.put(String key, Byte value) that operate
on (key, value) pairs can have more precise handling. In this case,
an element is stored and accessed according to a “key”. To track
taint more precisely, we keep a taint status for each key, so the taint
for each (key, value) pair is updated individually.
Then, at the sink, we insert code before the sink API to check
the taint status of the sensitive parameter. If it turns out the critical
parameter is tainted, the inserted code will query a separate policy
service app for decision and a warning dialog is then displayed to
the user.
We also devise taint cleaning mechanism. That is, if a variable
is redeﬁned to be an untainted variable or a constant outside taint
propagation slices, we thus insert a statement after that deﬁnition
to set its shadow variable to 0 (false).
3.4 Optimization
We further optimize the added instrumentation code. This is to
remove the redundant bytecode instructions that are inserted from
the previous step. As Soot’s built-in optimizations do not apply
well on this instrumentation code, we devise three custom opti-
mization techniques to safely manipulate the instrumentation code
and remove redundant ones. Thereafter, the optimized code is now
amenable to the built-in optimizations. Consequently, after going
through both custom and built-in optimizations, the added instru-
mentation code can be reduced to a minimum, ensuring the best
performance of the rewritten bytecode program.
To be more speciﬁc, we have devised four steps of optimizations,
described as follows.
• O1: In instrumentation, we add a shadow parameter for ev-
ery single actual parameter and return value. However, some
of them are redundant because they don’t contribute to taint
propagations. Therefore, we can remove the inserted code
which uses solely these unnecessary shadow parameters.
• O2: Next, we remove redundant shadow parameters from
parameter list and adjust method prototype. Consequently,
instrumentation code, that is used to initialize or update the
taint status of these shadow parameters, can also be elimi-
nated.
• O3: Further, if inserted taint tracking code is independent
from the control-ﬂow logic of a method, we can lift the taint-
ing code from the method to its callers. Thus, the taint prop-
agation logic is inlined.
• O4: After custom optimizations, instrumentation code is amenable
to Soot’s built-in optimization, such as constant propagation,
dead code elimination, etc.
3.5 Code Generation
At last, we convert the modiﬁed Jimple IR into a new package
(.apk ﬁle). More concretely, we translate the Jimple IR to Java
package using Soot, and then re-target Java bytecode to Dalvik
bytecode with Android SDK. In the end, we repackage the new
DEX ﬁle with old resources and create the new .apk ﬁle.
3.6 Rewritten Running Example
Figure 3 presents the rewritten program after the instrumenta-
tion and optimizations. For the sake of readability, we present the
262rewritten code in Java as a “diff” to the original program, even
though the rewritten program is actually generated on the Jimple
IR level. The statements with numeric line numbers are from the
original program, whereas those with special line number “I” are
inserted statements. The underlines mark either newly introduced
code or modiﬁed parts from old statements. We hereby use this
code to exemplify our design and implementation choices.
We can see that a boolean variable deviceId_s0_t is created
to shadow the static ﬁeld deviceId. “s0” denotes the source
label which distinguishes different taint sources, while “_t” is the
sufﬁx for shadow in our implementation. Then in onStart(),
the shadow variable deviceId_s0_t is set to be the “status”
ﬁeld in an object ret_s0_wrapper.
ret_s0_wrapper is an object of “BoolWrapper” structure
which is introduced for the purpose of wrapping and passing primitive-
typed shadow variables. In Start(), such an object is created and
passed to getIMEI(BoolWrapper), and further will be updated in
the latter with the shadow of return value.
The shadow return value of getIMEI(BoolWrapper) is ob-
tained from the local shadow variable imei_s0_t, which is ini-
tialized to be “true” if privacy access branch is taken (Ln.12), or
cleaned to be “false” if imei is set as a constant (Ln.10). Without
a cleaning mechanism, the value of corresponding shadow variable
will remain “true” even if the taint status has already changed.
In the method onDestroy(), deviceId is used and sensitive
data can thus be propagated to “bytes” array. In the meantime,
bytes_s0_t, the shadow of “bytes” array is also assigned with
deviceId_s0_t. We here choose to keep one single shadow for
an entire array for efﬁciency. Further, the array is passed to the
crypt() method in a loop and we update its taint status in ev-
ery iteration. It is notable that taint propagation was devised in the
callee (i.e., crypt()) at the beginning. However, due to optimiza-
tions, the taint logic in crypt() has been lifted up to the body of
onDestroy() and further optimized there.
In the end, the shadow of the byte array is wrapped and passed to
post(), where a sink API OutputStream.write() is encoun-
tered. We check the taint status of its ﬁrst parameter (i.e., data
packet) and query the policy service for decision if it is tainted.
4. CONTEXT-AWARE POLICY
Once our inserted monitoring code detects an actual privacy leak-
age, policy service will enforce privacy policy based on user pref-
erences. To be speciﬁc, the service app inquires user’s decision
upon detection and offers the user options to either “one-time” or
“always” allow or deny the speciﬁc privacy breaching ﬂow. The
user can then make her decision according to her user experience
and the policy manager will remember users preference for future
decision making situations if the “always” option is chosen.
There exist two advantages to enforce a privacy policy with user
preference history. Firstly, it associates user decisions with certain
program contexts and can thus selectively restrict privacy-related
information ﬂow under different circumstances. Privacy-related
outbound trafﬁc occurs in both benign and malicious semantics.
However, from dataﬂow analysis perspective, it is fairly hard to dis-
tinguish between, for example, a coordinates-based query towards
a benign map service and a location leakage via some covert ma-
licious process within, say, a wallpaper app. On the contrary, it is
fairly straight-forward for a user to tell the difference because she
knows the application semantics. With human knowledge, it is pos-
sible to avert overly strict restriction and preserve usability to the
largest extent.
Secondly, it avoids repetitive warning dialogs and improves user
experience. Once an “always” decision is made, this decision will
1 public class Leakage extends Activity{
4
I
6
8
9
10
I
11
12
I
13
I
14
15
21
I
22
I
I
I
I
23
I
24
25