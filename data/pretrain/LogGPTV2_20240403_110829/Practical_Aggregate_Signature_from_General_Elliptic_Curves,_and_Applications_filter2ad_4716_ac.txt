The total size of the aggregate signature ( ˆA, z) has n′(l + 1) + l
bits, where each Ai is represented with log p + 1 = l + 1 bits. In
comparison, the total size of n′ individual signatures has 2n′l bits.
For Bitcoin, l = 256, and n′ is about 4000 on average. Thus, with
aggregate Γ-signature, the storage volume of signatures reduces
about 49.8%.
We use the simultaneous point multiplication techniques [27, 31,
j=1 djAj. Specifically, we divide
the 2n′ +1 point multiplications into ⌈(2n′ +1)/8⌉ groups, and then
apply the simultaneous multiplication technique to each group of
at most 8 point multiplications. Denote by A (resp., D) the timing
cost for performing modular EC addition (resp., doubling), where
1D amounts to about 0.7A (with some optimization techniques,
addition can be as efficient as doubling, i.e., 1A can amount to 1D).
The cost for performing 8 point multiplications separately is about
8lD + 4lA. In comparison, for performing 8 point multiplication
simultaneously, the cost is about l(D + A) plus at most 256A (for
preparing a table of size at most 28 = 256). This way, the timing
cost for verifying signatures can reduce about 72%.
34] in computing zP +n′
j=1 ejXj−n′
5.1 NMDL Assumption, and Justification
Motivated for breaking some impossibility barriers of black-box
cryptography and for achieving cryptographic schemes of concep-
tually simple structure and analysis, the research community has
been paying more attention to achieving cryptographic schemes
based on non-black-box assumptions or primitives in recent years
[5, 16, 21, 22, 25, 30]. As a popular non-black-box assumption, the
knowledge-of-exponent assumption (KEA) and its variants have
been shown to be successful and powerful (see, e.g., [1, 10, 11, 16,
21, 22, 24–26, 29, 30, 32, 33, 39, 50, 56, 57, 59, 60, 68, 69, 71]). In
particular, a type of KEA assumption on pairing groups is used in
Zcash [59, 60].
that Z = x(κ
Yao and Zhao introduced and justified a variant of the KEA as-
sumption, referred to as joint KEA (JKEA) assumption [69]. Let
H1,· · · , Hκ : {0, 1}∗ → Zq be cryptographic hash functions that
are modelled as random oracles (RO). Roughly speaking, the JKEA
assumption says that, given X = xP for x ← Zq, the ability of an
efficient algorithm A to output {(Y1, m1),· · · ,(Yκ , mκ), Z} such
i =1 eiYi), where Yi ∈ E(F) and mi ∈ {0, 1}∗ and
ei = Hi(Yi , mi) for 1 ≤ i ≤ κ, implies knowing (y1,· · · , yκ) simul-
taneously, where yi is the discrete logarithm of Yi. Here, “knowing"
implies that (y1,· · · , yκ) can be efficiently extracted by an extrac-
tor algorithm E from the input and the random tape of A. The
JKEA assumption is justified in [69] by the fact that, assuming Hi’s
are random oracles, no efficient algorithm can make the values
in {e1Y1,· · · , eκYκ} correlated. That is, no matter how the PPT
algorithm A does, the values {H1(Y1, m1)y1,· · · , Hκ(Yκ , mκ)yκ}
are computationally independent as defined in [69].
The JKEA assumption implies the following weaker assumption,
referred to as explicit knowledge-of-exponent assumption (EKEA).
Specifically, the ability of outputting {(Y1, m1),· · · ,(Yκ , mκ), z},
i =1 eiYi, implies knowing (y1,· · · , yκ)
simultaneously. That is, (y1,· · · , yκ) can be efficiently extracted.
Unlike the JKEA assumption where the algorithm A only outputs
i =1 eiYi) = zX, here A explicitly outputs the discrete
i =1 eiYi). Clearly, the EKEA assumption is
satisfying z ∈ Zq and zP =κ
CDH(X ,κ
logarithm z = logP(κ
implied by, and weaker than, the JKEA assumption.
Definition 5.1 (non-malleable discrete logarithm (NMDL) assump-
tion). Let G = (E(Fp), P, q) define a cyclic group over E(Fp) gener-
ated by P of order q, where p and q are prime numbers, and l =
⌈log q⌉ be the security parameter. Let H1,· · · , Hκ : {0, 1}∗ → Z∗
q
be cryptographic hash functions, which may not be distinct. On
input (G, X) where X = xP for x ← Z∗
q, a PPT algorithm A (called
an NMDL-solver) succeeds in solving the NMDL problem, if it could
output {(b1, Y1, m1)· · · ,(bκ , Yκ , mκ), z}, satisfying:
• X ∈ {Y1,· · · , Yκ}, and zP = κ
• z ∈ Zq, and for any i, 1 ≤ i ≤ κ, Yi ∈ G, mi ∈ {0, 1}∗ that
can be the empty string, and bi ∈ {0, 1}.
• For any 1 ≤ i (cid:44) j ≤ κ, it holds that (Yi , mi) (cid:44) (Yj , mj). But
it might be the case that Yi = Yj or mi = mj.
i =1(−1)bi eiYi where ei =
Hi(Yi , mi).
Then, the NMDL assumption says that, for any PPT algorithm
A, the probability that it succeeds in solving the NMDL problem is
negligible in l. The probability is taken over the random coins used
to generate (G, x), the random coins used by A (and the choices of
the random functions H1,· · · , Hκ in the random oracle model).
It is clear that the NMDL assumption is implied by the standard
discrete logarithm assumption and the above (non-black-box) EKEA
assumption. Note also that the NMDL assumption is itself black-box
in nature. Below, we further justify this assumption by proving that
it holds in the generic group and random oracle model [13, 15, 62,
64], where H1,· · · , Hκ are assumed to be random oracles (RO) [12].
Briefly speaking, an algorithm is generic if it does not use the
encoding of the group elements. It can only use group elements for
group operations and relation verifications. There are many groups
Session 6B: Applied CryptographyAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand533KeyGen(1l)
x ← Z∗
q
X := xP
return (x, X)
Sign(X , x, m)
r ← Z∗
q
A := rP
d := H(A)
e := H(X , m)
z := rd − ex mod q
return σ = (d, z)
Agg({(X1, m1, σ1), ...,(Xn, mn, σn)})
ˆT := ∅, ˆA := ∅, z := 0
for i = 1 to n
if V eri f y(Xi , mi , σi) = ACCEPT ∧ (Xi , mi) (cid:60) ˆT ∧ Ai (cid:60) ˆA
ˆT := ˆT ∪ {(Xi , mi)}
ˆA := ˆA ∪ {Ai}
z := z + zi mod q
return ( ˆT , ˆA, z)
P + ed−1
Verify(X , m, σ = (d, z))
e := H(X , m)
A := zd−1
if H(A) (cid:44) d
return RE J ECT
else
return ACCEPT
X
AggVerify( ˆT , ˆA, z)
if elements in ˆT are not distinct
return RE J ECT
if elements in ˆA are not distinct
return RE J ECT
if | ˆT | (cid:44) | ˆA|
return RE J ECT
n′ := | ˆT | = | ˆA|
for j = 1 to n′
dj := H(Aj), ej := H(Xj , mj)
if (zP +n′
j=1(ejXj − djAj)) (cid:44) ∞
return RE J ECT
return ACCEPT
Table 2: Aggregate Γ-signature
for which the fastest DL solver algorithms are generic. For example,
general elliptic curves; general hyper-elliptic curves of genus 2; and
subgroups of prime order q in Z∗
p when (p − 1)/q is so large that
sieving methods are inefficient [63]. For presentation simplicity, in
the following analysis we use Maurer’s generic group model [45]
that is actually equivalent to Shoup’s model [37, 66].
in the generic group and random oracle model.
Theorem 5.2. For an NMDL-solver algorithm that runs τ generic
steps and makes ϱ RO-queries, its success probability is upper bounded
by τ 2+ϱ2
q−1
Proof. In Maurer’s generic group model for solving the NMDL prob-
lem, the generic group oracle (GG-oracle) O originally keeps two
internal states (1, x) in a list L, where x ← Z∗
q. For presentation
simplicity, we denote by L[i] the value stored in the i-th entry of L,
where 1 ≤ i ≤ τ, and we assume L[1] = 1 and L[2] = x. The generic
NMDL-solver algorithm A is given the indices of (1, x) in L, i.e.,
(1, 2), and has black-box access to the GG-oracle O and a random
oracle (RO) H : {0, 1}∗ → Z∗
q. Here, for presentation simplicity, we
use a single random oracle H to represent {H1,· · · , Hκ}.
For the i-th GG-oracle access corresponding to a group opera-
tion, 1 ≤ i ≤ τ, the value computed by the GG-oracle O can be
viewed as a linear polynomial of the form Fi(x) = ai x + bi mod q,
where ai , bi ∈ Zq are determined by previous GG-oracle accesses.
The value Fi is not returned to A directly, but is stored into a po-
sition in the internal list L where the position index for storing
Fi is indicated by A. A is always given the ability of verifying
equality relation, by which A queries O with (i, j) and gets result
whether L[i] = L[j] or not. For the k-th RO query, 1 ≤ k ≤ ϱ,
the algorithm A queries the random oracle H with (tk , mk), where
mk ∈ {0, 1}∗ and 1 ≤ tk ≤ τ represents the index of the component
Ftk (x)P that is actually unknown to A in the generic group model.
Upon the k-th RO-query (tk , mk), the random oracle H works as
follows: (1) if L(tk) is undefined, it returns ⊥ indicating invalid
RO-query;3 (2) if H(tk , mk) has been defined, it returns what al-
ready defined; (3) otherwise, it defines and returns a value taken
uniformly at random from Z∗
q as H(tk , mk). Finally, A outputs
{(b1, i1, mi1),· · · ,(bκ , iκ , miκ), z}, and succeeds on the following
conditions:
• z ∈ Zq, bα ∈ {0, 1} and mα ∈ {0, 1}∗ where 1 ≤ α ≤ κ, and
1 ≤ iβ ≤ τ for 1 ≤ β ≤ κ. Here, iβ is the index of Fiβ (x)P.
• For any 1 ≤ α (cid:44) β ≤ κ, it holds that (iα , mα) (cid:44) (iβ , mβ).
• 2 ∈ {i1,· · · , iκ} where the index 2 represents the input X =
xP to the NMDL-solver A in the generic group model, and
= H(iα , miα ) ∈
Z∗
q.
As discussed in [45], in this generic group model we only need
to consider non-adaptive adversaries, and there are only three ap-
proaches for A to succeed in the generic group model.
α =1(−1)bα eiα Fiα (x) mod q where eiα
z =κ
), ˆz},
Fˆiα
• Simply guessing x, which succeeds with probability 1
q−1.
• Another approach is to cause two different Fi and Fj to
collide, 1 ≤ i, j ≤ τ, in the sense that ai x +bi = ajx +bj where
(ai , bi) (cid:44) (aj , bj). In other words, (ai − aj)x + (bi − bj) = 0.
By Schwartz-Shoup lemma [45, 46, 65, 66], this event can
occur with probability at most C
• The third approach for A to succeed is to output {(ˆb1, ˆi1, ˆmˆi1),
· · · ,(ˆbγ , ˆiγ , ˆmˆiγ
(x)
mod q, where γ > 1 and eˆiα
q. The obser-
vation here is that, for any tuple {(ˆb1, ˆi1, ˆmˆi1),· · · ,(ˆbγ , ˆiγ , ˆmˆiγ
(x) mod q is at
3In this case, H(tk, mk) remains undefined. This is to ensure the independence
between Ftk
the probability that ˆz =γ
), ˆz} such that ˆz = γ
= H(ˆiα , ˆmˆiα
α =1(−1) ˆbα eˆiα
α =1(−1) ˆbα eˆiα
) ∈ Z∗
q−1 = τ(τ−1)
q−1 .
and H(tk, ·).
Fˆiα
1
2
τ
Session 6B: Applied CryptographyAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand5341
most
q−1 in the random oracle model. Then, by the birth-
day paradigm, the probability that A succeeds with this
approach is at most ϱ2
q−1, where ϱ is the number of queries
made by A to the random oracle H.
τ 2+ϱ2
q−1 .
1
q−1 + C
q−1 <
□
Note that
q−1 + ϱ2