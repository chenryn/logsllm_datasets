party fixed-point multiplication protocol of [43] and show why it
fails in the three-party setting. [43] secret shares a fixed-point x
Addition and subtraction in Z2k naturally work but multiplication
does not due to (two’s complement) division by 2d not being sup-
using the ring Z2k as(cid:74)x(cid:75) := (x + r ,−r) for some secret r ← Z2k .
ported in Z2k . Consider having a standard sharing(cid:74)x′(cid:75) :=(cid:74)y(cid:75)(cid:74)z(cid:75)
over Z2k and desire to compute(cid:74)x(cid:75) := (cid:74)x′/2d(cid:75) such that when
. Ideally both shares of(cid:74)x′(cid:75) = (x′ + r′,−r′) can be locally divided
x, y, z are interpreted as fixed-point values the quality x = yz holds
by 2d to obtain two k-bit shares(cid:74) ˜x(cid:75) := ( x′
x′
2d ) holding the value
2
x = x′/2d = ˜x. However, this final equality does not hold. First,
there is a bad event that the divisions by 2d removes a carry bit
from the first d bits that would have propagated into the d + 1th bit.
That is, at bit position d of the addition x′
2 = (x′ + r′) + (−r′)
mod 2k a carry is generated (which we have eliminated due to
separately dividing each share by 2d). However, this probabilis-
tic error has a magnitude of 2−d and is arguably acceptable given
that fixed-point arithmetics naturally has limited precision. In fact,
1 + x′
1
2d ,
Session 1B: PrivacyCCS’18, October 15-19, 2018, Toronto, ON, Canada391, x′
1, x′
[43] shows that this small error, does not have any impact on the
accuracy of trained models when d is sufficiently large.
1 := x′ +r′, x′
Unfortunately, a more serious error can also be introduced due
to the values being shared in the ring modulo 2k combined with
the use of twos complement semantics. In particular, the desired
computation of x′/2d is with respect to two’s complement arith-
metics, i.e. shift the bits of x′ down by d positions and fill the top d
bits with the most significant bit (MSB) of x′. This latter step can
fail when x′ is secret shared in Z2k . Take for example x′ = −2k−1,
which is represented in binary two’s complement as 100...000. We
then have that x′/2d is represented as 1...100...000 where there are
d + 1 leading ones. However, when secret shared, it is likely that
both shares x′
2 have zero in the MSB. As a result, when they are
divided by 2d, the two shares will have at least d + 1 leading zeros.
When these shares are reconstructed the result will be incorrect.
A simple case analysis shows that a necessary condition for this
error is that the MSB of x′ is opposite of both x′
2. That is, the
reverse of the example above can also result in this large error1. A
clever fix to this problem is to maintain that |x′| < 2ℓ ≪ 2k where
x′ is interpreted as a two’s complement integer. This ensures that
there is a negligible probability that the MSB of x′
1 is the same as x′
2.
2 = −r′ and that when r′ (cid:44) 0
To see this, observe that x′
the sign/MSB of r′ and −r′ are always opposite. When x′ is positive
the probability of x′
2 is the probability
that the top k − ℓ bits of r′ are all ones and that a carry is generated
at the ℓth bit of x′ + r′. Due to r′ being uniformly distributed, the
probability that r′ has this many leading ones is 2ℓ−k which can be
made exponentially small for appropriately chosen ℓ, k. A similar
argument also holds when x′ is negative.
does not extended to three-party secret sharing where(cid:74)x(cid:75) = (x +
Unfortunately the approach of truncating each share separately
r1 + r2,(−r1),(−r2)). The first source of error now has magnitude
2−d +1 due to the possibility of truncating two carry bits. However, a
more serious issue is that bounding |x| < 2ℓ no longer ensures that
the large error happens with very small probability. The necessary
condition for this error is more complex due to the possibility of two
carry bits, but intuitively, bounding |x| < 2ℓ no longer ensures that
exactly one of the shares x1, x2, x3 will be correctly sign-extended
due to r1, r2 both being uniformly distributed and independent.
5.1.2 Our Multi-Party Fixed-Point Multiplication. We present two
new methods for performing three-party decimal multiplication/
truncation with different trade-offs. While presented in terms of
three parties, we note that our second technique can be extended
to settings with more than three parties as well.
1 having the same MSB as x′
Share Truncation Πtrunc1. Our first approach minimizes the over-
all communication at the expense of performing multiplication and
truncation in two rounds. The idea is to run the two-party protocol
where one party does not participate. Since we assume an honest
majority, the security still holds in the semi-honest setting. Let the
parties hold a 2-out-of-3 sharing of(cid:74)x′(cid:75) := (cid:74)y(cid:75)(cid:74)z(cid:75) over the ring
1, x′
1In the reversed case, x′
2 both have MSB of one which overflows and is eliminated.
However, after being sign extended/divided by 2d , the carry results in 1 + 1 + 1 in all
higher positions, resulting in the d most significant bits being incorrectly set to one
since by assumption the MSB of x′ is zero.
1, x′
Z2k and desire to compute(cid:74)x(cid:75) =(cid:74)x′(cid:75)/2d. As in the two-party case,
we assume that x′ ≪ 2k.
2 + x′
Parties begin by defining the 2-out-of-2 (x′
3) between
party 1 and 2, and locally truncate their shares to (x′
1/2d ,(x′
2 +
x′
3)/2d). The errors introduced by the division mirror that of the
two-party case and guarantees the same correctness. The result is
defined as(cid:74)x(cid:75) := (x1, x2, x3) = (x′
3)/2d − r , r), where
r ∈ Zk2 is a random value known to parties 2,3. Note that party i
can locally compute the share xi and therefore(cid:74)x(cid:75) can be made
a 2-out-of-3 sharing by sending xi to party i − 1. One limitation
of this approach is that two rounds are required to multiply and
truncate.
1/2d ,(x′
2 + x′
Share Truncation Πtrunc2. The number of multiplication rounds
can be reduced back to 1 with a more sophisticated technique which
leverages preprocessing. First, let us assume we have preprocessed
multiplication is performed in two steps, 1) locally compute a 3-
Between steps 1 and 2, the parties can instead compute a 3-out-of-
cation and truncation can be done in exactly one round and the
required communication is 4 messages as opposed to 3 in standard
multiplication.
the shares(cid:74)r′(cid:75),(cid:74)r(cid:75) =(cid:74)r′/2d(cid:75) where r′ ∈ Z2k is random. Again, let
us have computed(cid:74)x′(cid:75) over the ring Z2k and wish to divide it by
2d. To compute the sharing of x = yz/2d we first reveal(cid:74)x′ − r′(cid:75) =
(cid:74)x′(cid:75)−(cid:74)r′(cid:75) to all parties2. Locally, everyone can compute (x′−r′)/2d.
Parties then collectively compute(cid:74)(cid:101)x(cid:75) := (x′ − r′)/2d +(cid:74)r(cid:75).
This operation can be combined with the computation of(cid:74)x′(cid:75) :=
(cid:74)y(cid:75)(cid:74)z(cid:75) and performed in a single round. Recall that standard share
out-of-3 sharing of(cid:74)x′(cid:75), and 2) reshare it as a 2-out-of-3 sharing.
3 sharing of(cid:74)x′ − r′(cid:75). Step 2) can then be replaced by revealing
(cid:74)x′ − r′(cid:75) and defining(cid:74)x(cid:75) := (x′ − r′)/2d +(cid:74)r(cid:75). So the multipli-
There are several ways to compute the pair(cid:74)r′(cid:75),(cid:74)r(cid:75) =(cid:74)r′/2d(cid:75).
parties non-interactively compute the random binary share(cid:74)r′(cid:75)B.
This sharing is locally truncated to obtain(cid:74)r(cid:75)B by removing the
bottom d shares. To obtain the final sharing(cid:74)r′(cid:75)A,(cid:74)r(cid:75)A, parties
1 and 2 jointly sample and secret share the values r′
2, r2 ∈ Z2k
and parties 2 and 3 sample and share r′
3, r3 in the same way (i.e.
generating them using pre-shared PRF keys). Parties then securely
compute subtraction binary circuits, and reveal(cid:74)r′
1(cid:75)B :=(cid:74)r′(cid:75)B −
3(cid:75)B and(cid:74)r1(cid:75)B :=(cid:74)r(cid:75)B−(cid:74)r2(cid:75)B−(cid:74)r3(cid:75)B to party 1 and 3. The
(cid:74)r′
2(cid:75)B−(cid:74)r′
final shares are defined as(cid:74)r′(cid:75) := (r′
3) and(cid:74)r(cid:75) := (r1, r2, r3).
1, r′
2, r′
The most immediate approach could be to use ΠTrunc1, but we
choose to use a more communication efficient method using binary
secret sharing that is also secure against malicious adversaries. First,
This computation can be performed in parallel for all trunca-
tions in a preprocessing stage and hence has little impact on the
overall round complexity of the protocol. As a result, we choose
to optimize the overall communication (instead of rounds) of the
addition circuit with the use of an optimized ripple carry full ad-
dition/subtraction circuit using k − 1 and gates. As an additional
and therefore requires k − d − 1 and gates per subtraction. In the
semi-honest setting, one of the subtractions of r2, r3 can be per-
formed locally by party 2.
optimization, the computation of(cid:74)r1(cid:75) can be performed in Z2k−d
2Revealing to two parties is sufficient.
Session 1B: PrivacyCCS’18, October 15-19, 2018, Toronto, ON, Canada40r′
3, r3 to parties 2,3 using the RevealOne routine.
2, r2 is revealed to party 1,2 and
4. Using a ripple carry subtraction circuit, the parties jointly compute
Parameters: A single 2-out-of-3 (or 3-out-of-3) share (cid:74)x′(cid:75)A =
(x′
3) over the ring Z2k and a integer d < k.
2, x′
1, x′
Preprocess:
1. All parties locally compute(cid:74)r′(cid:75)B ← Rand((Z2)k).
2. Define the sharing(cid:74)r(cid:75)B to be the k − d most significant shares of
(cid:74)r′(cid:75)B, i.e. r = r′/2d .
2(cid:75)B,(cid:74)r′
3. The parties compute (cid:74)r′
3(cid:75)B ← Rand((Z2)k) and
(cid:74)r2(cid:75)B,(cid:74)r3(cid:75)B ← Rand((Z2)k−d). r′
3(cid:75)B,(cid:74)r1(cid:75)B :=(cid:74)r(cid:75)B −(cid:74)r2(cid:75)B −(cid:74)r3(cid:75)B and
(cid:74)r′
2(cid:75)B −(cid:74)r′
1(cid:75)B :=(cid:74)r′(cid:75)B −(cid:74)r′
5. Define the preprocessed shares as(cid:74)r′(cid:75)A := (r′
3),(cid:74)r(cid:75)A :=
1, r′
2, r′
1. The parties jointly compute(cid:74)x′−r′(cid:75)A and then compute (x′−r′) :=
RevealAll((cid:74)x − r′(cid:75)A).
2. Output(cid:74)x(cid:75)A :=(cid:74)r(cid:75)A + (x′ − r′)/2d .
1, r1 to parties 1,3.
reveal r′
(r1, r2, r3).
Online:
Figure 1: Single round share truncation protocol Πtrunc2.
Another advantage of this second protocol is its compatibility
is indeed the correct value. We propose that this x′
i
with the malicious setting. When the computation of(cid:74)x′(cid:75) =(cid:74)y(cid:75)(cid:74)z(cid:75)
is performed initially all parties hold a 3-out-of-3 sharing of(cid:74)x′(cid:75)
and then reshare this to be a 2-out-of-3 sharing by sending x′
to
i
party i − 1. Additionally, a small proof πi is sent demonstrating
that x′
proof is still sent along with the reveal of(cid:74)x′ − r′(cid:75) which can be
and the
i
composed into a single round. However, it is possible for party i to
send the correct message (xi , πi) to party i−1 but send the incorrect
reveal message xi − ri to party i + 1. To ensure that such behavior
is caught, parties i − 1 and i + 1 should maintain a transcript of all
xi − ri messages from party i and compare them for equality before
any secret value is revealed. For a more detailed description of the
protocol and a security analysis, we refer the reader to Section D.2.
Public Operations. One useful property of an additively secret
shared value(cid:74)x(cid:75)A is that c +(cid:74)x(cid:75)A,(cid:74)x(cid:75)A − c, c(cid:74)x(cid:75)A for any signed
integer c can be computed locally. When x is a fixed-point value, ad-
dition and subtraction naturally work so long as c is also expressed
as a fixed-point value. For multiplication and a two’s complement
integer c, the standard multiplication with a public value still works.
When c is a fixed point value, the result must be divided by 2d using
the semi-honest Πtrunc1 or malicious Πtrunc2 protocol to obtain a
multiplication is that division by a public value c is now supported
sharing(cid:74)cx(cid:75)A with d decimal bits. One byproduct of fixed-point
very efficiently , i.e.(cid:74)x(cid:75)A/c = c−1(cid:74)x(cid:75)A.
second matrices. Inner product is defined as (cid:174)x · (cid:174)y := n
5.2 Vectorized Multiplication
For many machine learning algorithms the primary computation is
matrix multiplication. This in turn can be implemented by a series
of inner products, one for each row-column pair of the first and
i =1 xiyi,
where (cid:174)x, (cid:174)y ∈ (Z2k )n are vectors of n elements. A naive solution
would require n independent multiplication protocols and O(n)
communication. We show how this can be optimized to only require
communicating O(1) ring elements, and computing only one pre-
Recall from the previous section that semi-honest decimal multi-
plication is performed in two steps by first revealing the 3-out-of-3
processed truncation-pair(cid:74)r′(cid:75),(cid:74)r(cid:75).
sharing(cid:74)z′+r′(cid:75) =(cid:74)x(cid:75)(cid:74)y(cid:75)+(cid:74)r′(cid:75). The final product is then computed
as(cid:74)z(cid:75) := (z′ +r′)/2d −(cid:74)r(cid:75). Observe that the primary non-linear step
here is the computation of(cid:74)x(cid:75)(cid:74)y(cid:75) after which a series of local trans-
can be written as(cid:74)(cid:174)x(cid:75) ·(cid:74)(cid:174)y(cid:75) := reveal((n
i =1(cid:74)xi(cid:75)(cid:74)yi(cid:75)) +(cid:74)r′(cid:75))/2d −
(cid:74)r(cid:75). Here, all parties locally compute a 3-out-of-3 sharing of each
(cid:74)xi(cid:75)(cid:74)yi(cid:75) which are summed, masked, truncated, and reshared as
formations are made. As such, the computation of the inner product
a 2-out-of-3 sharing of the final result. As a result, only a single
value is reshared. One additional benefit of this approach is that
the truncation induces an error of 2−d with respect to the overall
inner produce, as opposed to individual multiplication terms, re-
sulting in a more accurate computation. More generally, any linear
combination of multiplication terms can be computed in this way
where the parties communicate to reshare and truncate only after
computing the 3-out-of-3 secret share of the linear combination (as
long as the final result does not grow beyond the 2ℓ bound). We
discuss vectorized multiplication against malicious adversaries in
Appendix C.
5.3 Share Conversions
For many machine learning functions, it is more efficient to switch
back an forth between arithmetic (multiplications and addition)
and binary (non-linear activation functions, max-pooling, averages,
etc.) operations. In such cases, it is necessary to convert between
different share representations. We design new and optimized pro-
tocols that facilitate efficient conversions between all three types
of sharing: arithmetic, binary and Yao. We elaborate on these next.
See Table 1 for the cost of various conversions.
Bit Decomposition,(cid:74)x(cid:75)A →(cid:74)(cid:174)x(cid:75)B. We begin with bit decompo-
k
sition where an arithmetic sharing of x ∈ Z2k is converted to a
vector of secret shared bits x[1], ..., x[k] ∈ {0, 1} such that x =
i =1 2i−1
x[i]. The basic idea is that parties use their shares of
(cid:74)x(cid:75)A = (x1, x2, x3) as input to a boolean circuit that computes
their sum. But we introduce several optimizations that significantly
reduce rounds of communication and the communication complex-
ity of this approach. Observe that(cid:74)x(cid:75)A = (x1, x2, x3) can be con-
verted to(cid:74)x1(cid:75)B := (x1, 0, 0),(cid:74)x2(cid:75)B := (0, x2, 0),(cid:74)x3(cid:75)B := (0, 0, x3)
with no communication3. Naively using the textbook ripple-carry
full adder (RCFA) circuit would require 2k rounds to compute
RCFA(RCFA(x1, x2), x3) when performing 3PC on binary shared
values. To avoid the high round complexity which becomes the
bottleneck in our implementations, we first employ a parallel prefix
adder (PPA) [33] which takes two inputs and computes the sum us-
ing a divide and conquer strategy, totaling log k rounds and k log k
gates. Once again, doing this naively would require two addition
circuits. We show how to keep the cost close to that of a single PPA
in both the semi-honest and the malicious setting, hence reduc-
ing both the round (only for binary sharing) and communication
complexity by a factor of two.
3In general this can be insecure due to the possibility of leaking information through