be a set of parties. A collection A ⊆ 2
is monotone
if ∀B, C : if B ∈ A and B ⊆ C, then C ∈ A. An access
structure (respectively, monotonic access structure) is a col-
lection (respectively, monotone collection) A of non-empty
subsets of {P1, . . . , Pn}, i.e., A ⊆ 2
{P1,...,Pn}\{∅}. The sets
in A are called authorized sets, and the sets not in A are
called unauthorized sets.
In our context, attributes play the role of parties and we
restrict our attention to monotonic access structures. It is
possible to (ineﬃciently) realize general access structures us-
ing our techniques by treating the negation of an attribute
as a separate attribute.
2.2 Linear Secret Sharing Schemes
Our construction will employ linear secret-sharing schemes
(LSSS). We use the deﬁnition adapted from [5]:
Definition 2
(Linear Secret-Sharing Schemes). A
secret sharing scheme Π over a set of parties P is called lin-
ear (over Zp) if
1. The shares for each party form a vector over Zp.
2. There exists a matrix A with ℓ rows and n columns
called the share-generating matrix for Π. For all i =
2411, . . . , ℓ, the ith row of A is labeled by a party ρ(i) (ρ
is a function from {1, . . . , ℓ} to P). When we consider
the column vector v = (s, r2, . . . , rn), where s ∈ Zp is
the secret to be shared, and r2, . . . , rn ∈ Zp are ran-
domly chosen, then Av is the vector of ℓ shares of the
secret s according to Π. The share (Av)i belongs to
party ρ(i).
It is shown in [5] that every linear secret-sharing scheme
according to the above deﬁnition also enjoys the linear re-
construction property, deﬁned as follows. Suppose that Π
is an LSSS for the access structure A. Let S ∈ A be any
authorized set, and let I ⊂ {1, . . . , ℓ} be deﬁned as I =
∑
{i|ρ(i) ∈ S}. Then there exist constants {ωi ∈ Zp}i∈I such
∑
that, if {λi} are valid shares of any secret s according to Π,
i∈I ωiλi = s. Let Ai denotes the i-th row of A, we
then
i∈I ωiAi = (1, 0, . . . , 0). These constants {ωi} can be
have
found in time polynomial in the size of the share-generation
matrix A [5]. Note that, for unauthorized sets, no such con-
stants {ωi} exist.
Boolean Formulas Access structures might also be de-
scribed in terms of monotonic boolean formulas. Using stan-
dard techniques [5] one can convert any monotonic boolean
formula into an LSSS representation. We can represent the
boolean formula as an access tree. An access tree of ℓ nodes
will result in an LSSS matrix of ℓ rows. We refer the reader
to the appendix of [27] for a discussion on how to perform
this conversion.
2.3 Key-Policy Attribute-Based Encryption
A KP-ABE scheme consists of the following four algo-
rithms:
Setup(1λ) takes as input a security parameter λ. It outputs
the public parameters PK and a master secret key MSK.
KeyGen(PK, MSK, A) takes as input the public parameters
PK, the master secret key MSK and an access structure A.
It outputs a private key SKA corresponding to A.
Encrypt(PK, M, S) takes as input the public parameters PK,
a message M and a set of attributes S. It outputs a cipher-
text CT .
Decrypt(PK, SKA, CT ) takes as input the public parameters
PK, a private key SKA, and a ciphertext CT associated with
a set of attributes S. If the set S of attributes satisﬁes the
access structure A, then the algorithm will decrypt the ci-
phertext and return a message M .
We now give the full security deﬁnition for KP-ABE schemes.
This is described by a seucirty game between a challenger
and an adversary. The game proceeds as follows:
Setup The challenger runs Setup to obtain the public pa-
rameters PK and a master secret key MSK. It gives the public
parameters PK to the adversary and keeps MSK to itself.
Query phase 1 The adversary adaptively queries the chal-
lenger for secret keys corresponding to sets of access struc-
←
tures A1, . . . , Aq. In response, the challenger runs SKAi
KeyGen (PK, MSK, Ai) and gives the secret key SKAi to the
adversary, for 1 ≤ i ≤ q.
Challenge The adversary submits two (equal length) mes-
sages M0, M1 and a set of attributes S, subject to the restric-
tion that S cannot satisfy any of the queried access struc-
tures in Query phase 1. The challenger selects a random bit
β ∈ {0, 1}, sets CT = Encrypt(PK, Mβ, S) and sends CT to
the adversary as the challenge ciphertext.
Query phase 2 The adversary continues to adaptively query
the challenger for secret keys corresponding to access struc-
tures with the restriction that none of these can be satisﬁed
by S.
Guess The adversary outputs its guess β
′ ∈ {0, 1} for β.
The advantage of the adversary in this game is deﬁned as
| where the probability is taken over the ran-
|Pr[β = β
dom bits used by the challenger and the adversary.
] − 1
′
2
Definition 3. A key-policy attribute-based encryption scheme
is (fully) secure if all PPT adversaries have at most a neg-
ligible advantage in the above security game.
2.4 Composite Order Bilinear Groups
We will construct our scheme in composite order bilinear
groups whose order is the product of three distinct primes.
Composite order bilinear groups were ﬁrst introduced in [11].
Let G be an algorithm that takes as input a security pa-
rameter 1λ and outputs a tuple (p1, p2, p3, G, GT , e), where
p1, p2, p3 are distinct primes, G and GT are cyclic groups of
order N = p1p2p3, and e : G × G → GT is a map such that
1. (Bilinear) ∀g, h ∈ G, a, b ∈ ZN , e(ga, hb) = e(g, h)ab;
2. (Non-degenerate) ∃g ∈ G such that e(g, g) has order
N in GT .
We further require that multiplication in G and GT , as
well as the bilinear map e, are computable in time polyno-
mial in λ. We use Gp1 , Gp2 , Gp3 to denote the subgroups
of G having order p1, p2, p3, respectively. Observe that G =
× Gp3 . Note also that if g1 ∈ Gp1 and g2 ∈ Gp2
Gp1
then e(g1, g2) = 1. The same rule holds whenever e is ap-
plied to elements in distinct subgroups.
× Gp2
We now state the complexity assumptions we use. As-
sumptions 1, 2 and 3 have already been used in [25, 26].
Utilizing the theorems proposed in [24], one can easily prove
that the assumptions hold in the generic group model.
Assumption 1. Let G be as above. We de(cid:12)ne the follow-
ing distribution::
(p1, p2, p3, G, GT , e) ← G(1λ), N = p1p2p3,
g, X1 ← Gp1 , X2, Y2 ← Gp2 , X3, Y3 ← Gp3 ,
D = (G, GT , N, e, g, X1X2, Y2Y3, X3),
× Gp3 .
T1 ← Gp1
× Gp3 , T2 ← Gp1
× Gp2
The advantage of an algorithm A in breaking Assumption 1
is de(cid:12)ned as
Adv1A = |Pr[A(D, T1) = 1] − Pr[A(D, T2) = 1]|.
Definition 4. We say G satis(cid:12)es Assumption 1 if for
any polynomial time algorithm A, Adv1A is negligible.
242Assumption 2. Let G be as above. We de(cid:12)ne the follow-
ing distribution:
(p1, p2, p3, G, GT , e) ← G(1λ), N = p1p2p3,
g ← Gp1 , X3 ← Gp3 ,
D = (G, GT , N, e, g, X3),
× Gp2 , T2 ← Gp1 .
T1 ← Gp1
The advantage of an algorithm A in breaking Assumption 2
is de(cid:12)ned as
Adv2A = |Pr[A(D, T1) = 1] − Pr[A(D, T2) = 1]|.
Definition 5. We say G satis(cid:12)es Assumption 2 if for
any polynomial time algorithm A, Adv2A is negligible.
Assumption 3. Let G be as above. We de(cid:12)ne the follow-
ing distribution:
(p1, p2, p3, G, GT , e) ← G(1λ), N = p1p2p3,
α, s ← ZN , g ← Gp1 , g2, X2, Y2 ← Gp2 ,
$← Gp3 ,
X3
D = (G, GT , N, e, g, g2, gαX2, gsY2, X3),
T1 = e(g, g)αs, T2 ← GT .
The advantage of an algorithm A in breaking Assumption 3
is de(cid:12)ned as
Adv3A = |Pr[A(D, T1) = 1] − Pr[A(D, T2) = 1]|.
Definition 6. We say G satis(cid:12)es Assumption 3 if for
any polynomial time algorithm A, Adv3A is negligible.
3. OUR PROPOSED CONSTRUCTION
In this section, drawing on the hierarchical identity-based
encryption (HIBE) scheme with constant-size ciphertexts by
Boneh et al.
[9] and the KP-ABE scheme by Lewko et al.
[25], we present a KP-ABE scheme with constant-size ci-
phertexts and fast decryption.
Our construction supports arbitrary monotonic access for-
mulas. As in [25], we express access formulas by an LSSS
over the attributes in the system, but with a signiﬁcant dif-
ference.
In our construction, each attribute includes two
parts: attribute name and its value. Without loss of gener-
ality, we assume that there are n categories of attributes in
the system, such as “from”, “to”, “subject” and “date” in the
email example. For simplicity, we also make the following
assumptions:
• We assume that the same value never appears in two
distinct attribute categories. This requirement can be
satisﬁed easily. For example, by prepending the values
with the name of the attribute category they belonging
to, the value H(“from: Bob”) belongs to the attribute
category “from” and can not be confused with the value
H(“to: Bob”) that belongs to the attribute category
“to”, where H is a collision-resistant hash function.
• We assume that each set of attributes associated with a
ciphertext has n attributes exactly with each attribute
belonging to a diﬀerent category. In the email exam-
ple, we may assign the value H(“subject: NULL”) in
the attribute category “subject” to emails that have no
subject.
For notational purposes, let i denote the attribute name of
the ith attribute category. Each set of attributes S associ-
ated with a ciphertext can be parsed as (z1, . . . , zn), where
zi ∈ ZN is the value of attribute name i. We express an ac-
cess formula by (A, ρ, T ), where A is ℓ× m share-generating
matrix, ρ is a map from each row of A to an attribute name
(i.e., ρ is a function from {1, . . . , ℓ} to {1, . . . , n}), T can be
parsed as (tρ(1), . . . , tρ(ℓ)) and tρ(i) is the value of attribute
name ρ(i) speciﬁed by the access formula.
Using our notations, a set of attributes S = (z1, . . . , zn)
satisﬁes an access formula (A, ρ,T ) if and only if there exist
I ⊆ {1, . . . , ℓ} and constants {ωi}i∈I such that
ωiAi = (1, 0, . . . , 0) and zρ(i) = tρ(i) for ∀i ∈ I,
∑
i∈I
where Ai denotes the ith row of A.
Similar to the KP-ABE scheme in [25], our proposed KP-
ABE scheme has the restriction that each attribute name
can only be used once in an access structure, which is called
one-use KP-ABE. We can obtain a secure KP-ABE scheme
where attribute names being used multiple times (up to
a constant number of uses ﬁxed at setup) from the one-
use scheme by applying the generic transformation given in
Lewko et al.
[25]. The transformation does not aﬀect the
features of our proposed KP-ABE scheme, i.e., constant-size
ciphertexts and fast decryption. On the other hand, utiliz-
ing the new proof methods proposed by Lewko and Waters
[29] recently, it may allow our proposed KP-ABE scheme
unrestricted use of attribute names.
Concretely, the proposed KP-ABE scheme consists of the
× Gp2
following algorithms:
Setup(1λ) The setup algorithm ﬁrst runs G(1λ) to obtain
× Gp3 , where G
(p1, p2, p3, G, GT , e) with G = Gp1
and GT are cyclic groups of order N = p1p2p3. Next it
chooses g, h0, h1, . . . , hn ∈ Gp1 , X3 ∈ Gp3 and α ∈ ZN uni-
formly at random. The public parameters are published as
PK = (G, GT , e, N, g, h0, h1, . . . , hn, e(g, g)α). The master
secret key is MSK = (α, X3).
KeyGen(PK, MSK, A = (A, ρ,T )) A is an ℓ × m matrix, ρ
is a map from each row Ai of A to {1, . . . , n} and T =
(tρ(1), . . . , tρ(ℓ)) ∈ Zℓ
N . The key generation algorithm chooses
a random vector v ∈ Zm
(Here,
1 denotes the vector with the ﬁrst entry equal to 1 and
the rest equal to 0). Let Qi denote the set [n]\{ρ(i)} for
each i ∈ [ℓ]. For each row Ai of A, it chooses a random
ri ∈ ZN and random elements Ri, R
∈ Gp3 (this
is done by raising X3 to a random power). The secret key
SKA = ((A, ρ,T ), {Di, D
}i∈[ℓ]) is computed as
Di = gAi·v(h0h
i,{Ri,j}j∈Qi
′
i,{Di,j}j∈Qi
′
′
′
i, Di,j = hri
i = gri R
N such that 1 · v = α.
t(cid:26)(i)
ρ(i) )ri Ri, D
j Ri,j.
Encrypt(PK, M ∈ GT , S = (z1, . . . , zn) ∈ Zn
N ) The encryp-
tion algorithm chooses s ∈ ZN uniformly at random. The
243ciphertext CT = (S, C, C0, C1) is computed as
C = M · e(g, g)αs, C0 = gs, C1 =
(
n∏
hzi
i
h0
i=1
)
s
.
Decrypt(PK, SKA, CT ) Let CT = (S = (z1, . . . , zn), C, C0, C1)
and SKA = ((A, ρ,T ), {Di, D
i,{Di,j}j∈Qi
}i∈[ℓ]), where A
′
is an ℓ × m matrix, ρ is a map from each row Ai of A to
{1, . . . , n} and T = (tρ(1), . . . , tρ(ℓ)) ∈ Zℓ
N . If S satisﬁes A,
the decryption algorithm ﬁrst ﬁnds I ⊆ [ℓ] and constants
{ωi}i∈I such that
ωiAi = (1, 0, . . . , 0) and zρ(i) = tρ(i) for ∀i ∈ I.
∑
i∈I
Let Qi denote the set [n]\{ρ(i)} for each i ∈ I. Next, the
decryption algorithm computes
eDi = Di
∏
j∈Qi
(
i,j, for each i ∈ I.
Dzj
)
ri · eRi.
n∏
hzj
j
h0
j=1
Note that, if j ∈ Qi, then j ̸= ρ(i). Since for each i ∈ I,
tρ(i) = zρ(i), then we have
eDi = gAi·v
∏
where eRi = Ri
∏
It then computes:
n
j=1 Rzj
i,j.
eDωi
i )/e(C1,
∏
i∈I
′
D
i
ωi ) = e(g, g)αs.
e(C0,
i∈I
The message can then be recovered as C/e(g, g)αs.
3.1 Security
We now state the security theorem of our KP-ABE scheme.
Theorem 1. If Assumptions 1, 2 and 3 hold, then the
proposed KP-ABE scheme is secure.
Proof. Following the approach by Lewko and Waters [26],
we deﬁne two additional structures: semi-functional cipher-
texts and semi-functional keys. These will not be used in