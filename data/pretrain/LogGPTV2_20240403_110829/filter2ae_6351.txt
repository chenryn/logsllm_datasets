# 利用Burp插件挖掘HTTP请求走私漏洞
HTTP请求走私在漏洞发现赏金项目中经常被忽视。然而，通过正确的插件，您可以在下一个赏金项目中自动化地检测和利用这种漏洞。
## 了解HTTP请求走私
现代网站通常部署多个代理服务器来转发用户请求至实际托管Web应用的后端服务器。前端服务器负责接收用户的请求，并将其转发给后端服务器。这两个服务器必须就不同用户请求之间的边界达成一致。当它们无法达成一致时，攻击者就可以利用这种处理上的不一致性修改HTTP请求，从而造成HTTP请求走私。

> **关键点：** 当前后端服务器对用户请求边界的定义不一致时，就会出现HTTP请求走私。

HTTP请求的结束由"Content-Length"或"Transfer-Encoding" HTTP标头定义。有些服务器不支持"Transfer-Encoding"，而另一些则默认使用"Content-Length"作为请求结束的标志（即使两者同时出现在请求中）。如果前后端服务器配置不当，可能会导致它们采用不同的边界值，从而产生请求走私漏洞。

例如：
```
HTTP/1.1 200 OK 
Content-Type: text/plain 
Transfer-Encoding: chunked 
Content-Length: 4
```

在此示例中，攻击者可以构造包含两个不同边界值的请求。如果前端服务器依赖于"Transfer-Encoding"，而后端服务器依赖于"Content-Length"，由于每个头部中的边界值不一致，会导致请求过程受到污染。反之亦然，这被称为TE.CL（Transfer-Encoding to Content-Length）和CL.TE（Content-Length to Transfer-Encoding）请求走私漏洞。

这种模棱两可的处理机制可能导致HTTP请求走私，进而获取未经授权的数据、接管应用程序等。
## 手工查找HTTP请求走私漏洞
在使用Burp插件自动检测请求走私漏洞之前，让我们先了解一下如何手动检测它。这样可以帮助您更深入地理解这个漏洞。

要手工检测HTTP请求走私漏洞，您可以发送一个经过修改的带有"Content-Length"和"Transfer-Encoding"头部的HTTP请求。如果服务器花费比正常情况更多的时间来处理这个被篡改的请求，则可能表明存在一个HTTP请求走私漏洞。

**示例请求：**
假设前端服务器只接受"Transfer-Encoding"头部，那么它会忽略'0'之后的所有内容，将没有"Y "的内容传递给后端服务器。如果后端服务器仅使用"Content-Length"头部，它会认为请求长度为4。但由于前端服务器遗漏了一些数据，实际请求长度小于4，因此后端服务器会等待一段时间以接收剩余的数据。这将导致时间延迟，从而帮助我们识别出请求走私漏洞。

您也可以通过编辑相同的请求，在使用"Content-Length"的前端服务器和使用"Transfer-Encoding"的后端服务器之间进行测试，以寻找潜在的漏洞。
## 利用Burp Suite扩展查找HTTP请求走私漏洞
### HTTP Request Smuggler
HTTP Request Smuggler 是一款Burp Suite扩展程序，可以帮助您自动完成上述手动任务以寻找此类漏洞。虽然手动查找是可行的，但非常繁琐，因此建议利用现有的扩展工具简化流程。

安装此扩展后，只需右键单击Burp Proxy捕获的请求，选择“HTTP Request Smuggler -> Smuggle Probe”，该工具便会自动修改并重新发送请求以检查漏洞。它会生成多种变体请求来探测两种类型的请求走私漏洞——CL.TE 和 TE.CL。任何相关发现都会显示在扫描问题活动页面上。
### 默认Burp Suite主动扫描
实际上，如果您使用Burp Suite主动扫描目标，同样能够检测到HTTP请求走私漏洞。您可以在Burp Suite的主动扫描配置中看到这一点。扫描完成后，Burp Suite会在问题活动页面上报告所有发现的结果。遇到这类问题时，请务必重视并进一步通过HTTP Request Smuggler扩展确认漏洞的存在。
## 总结
HTTP请求走私是一种严重且常被忽视的安全隐患。本文介绍了这一漏洞的基本概念及其手动与自动检测方法。希望这篇文章能帮助您更好地理解和应对这种威胁。如需了解更多相关信息，请参考PortSwigger提供的详细说明。

> 本文为翻译文章，原文链接: [for-finding-http-request-smuggling-2c0b5321f06d](https://example.com/article)