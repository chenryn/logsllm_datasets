sheet = workbook.active sheet.merge_cells("C1:D2")
sheet.merge_cells(start_row=7,start_column=1,end_row=8,end_column=3)
workbook.save(filename = "花园.xlsx")
结果如下：
当然，也有“取消合并单元格”，用法一致。
* .unmerge_cells(待合并的格子编号)
* .unmerge_cells(start_row=起始行号，start_column=起始列号，end_row=结束行号，
end_column=结束列号)
章节二：python 使用 PyPDF2 和 pdfplumber 操
作 pdf
1、PyPDF2 和 pdfplumber 库介绍
* PyPDF2 官网：https://pythonhosted.org/PyPDF2/
* PyPDF2 可以更好的读取、写入、分割、合并 PDF文件；
* pdfplumber官网：https://github.com/jsvine/pdfplumber
* pdfplumber可以更好地读取 PDF文件内容和提取 PDF中的表格；
* 这两个库不属于python 标准库，都需要单独安装；
2、python 提取 PDF 文字内容
1）利用 pdfplumber 提取文字
import PyPDF2
import pdfplumber
with pdfplumber.open("餐饮企业综合分析.pdf") as p:
page = p.pages[2]
print(page.extract_text())
结果如下：
2）利用 pdfplumber 提取表格并写入 excel
* extract_table()：如果一页有一个表格；
* extract_tables()：如果一页有多个表格；
import PyPDF2
import pdfplumber
from openpyxl import Workbook
with pdfplumber.open("餐饮企业综合分析.pdf") as p:
page = p.pages[4]
table = page.extract_table()
print(table)
workbook = Workbook()
sheet = workbook.active
for row in table:
sheet.append(row)
workbook.save(filename = "新pdf.xlsx")
结果如下：
缺陷：可以看到，这里提取出来的表格有很多空行，怎么去掉这些空行呢？
判断：将列表中每个元素都连接成一个字符串，如果还是一个空字符串那么肯定就是空
行。
import PyPDF2
import pdfplumber
from openpyxl import Workbook
with pdfplumber.open("餐饮企业综合分析.pdf") as p:
page = p.pages[4]
table = page.extract_table()
print(table)
workbook = Workbook()
sheet = workbook.active
for row in table:
if not "".join([str(i) for i in row]) == "":
sheet.append(row)
workbook.save(filename = "新pdf.xlsx")
结果如下：
3、PDF 合并及页面的排序和旋转
1）分割及合并 pdf
① 合并 pdf
首先，我们有如下几个文件，可以发现这里共有三个 PDF文件需要我们合并。同时可以发
现他们的文件名都是有规律的(如果文件名，没有先后顺序，我们合并起来就没有意义
了。)
代码如下：
from PyPDF2 import PdfFileReader, PdfFileWriter
pdf_writer = PdfFileWriter()
for i in range(1,len(os.listdir(r"G:\6Tipdm\7python 办公自动化\concat_pdf"))+1):
print(i*50+1,(i+1)*50)
pdf_reader = PdfFileReader("G:\\6Tipdm\\7python 办公自动化\\concat_pdf\{}-
{}.pdf".format(i*50+1,(i+1)*50))
for page in range(pdf_reader.getNumPages()):
pdf_writer.addPage(pdf_reader.getPage(page))
with open("G:\\6Tipdm\\7python 办公自动化\\concat_pdf\merge.pdf", "wb") as out:
pdf_writer.write(out)
结果如下：
② 拆分 pdf
这里有一个“时间序列.pdf”的文件，共3页，我们将其每一页存为一个 PDF文件。
代码如下：
from PyPDF2 import PdfFileReader, PdfFileWriter
pdf_reader = PdfFileReader(r"G:\6Tipdm\7python 办公自动化\concat_pdf\时间序列.pdf")
for page in range(pdf_reader.getNumPages()):
pdf_writer = PdfFileWriter()
pdf_writer.addPage(pdf_reader.getPage(page))
with open(f"G:\\6Tipdm\\7python 办公自动化\\concat_pdf\\{page}.pdf", "wb") as out:
pdf_writer.write(out)
结果如下：
2）旋转及排序 pdf
① 旋转 pdf
* .rotateClockwise(90 的倍数)：顺时针旋转90 度
* .rotateCounterClockwise(90 的倍数)：逆时针旋转 90度
from PyPDF2 import PdfFileReader, PdfFileWriter
pdf_reader = PdfFileReader(r"G:\6Tipdm\7python 办公自动化\concat_pdf\时间序列.pdf")
pdf_writer = PdfFileWriter()
for page in range(pdf_reader.getNumPages()):
if page % 2 == 0:
rotation_page = pdf_reader.getPage(page).rotateCounterClockwise(90)
else:
rotation_page = pdf_reader.getPage(page).rotateClockwise(90)
pdf_writer.addPage(rotation_page)
with open("G:\\6Tipdm\\7python 办公自动化\\concat_pdf\\旋转.pdf", "wb") as out:
pdf_writer.write(out)
"""
上述代码中，我们循环遍历了这个 pdf，对于偶数页我们逆时针旋转 90°，对于奇数页我
们顺时针旋转90°； 注意：旋转的角度只能是 90的倍数；
"""
其中一页效果展示如下：
② 排序 pdf
需求：我们有一个PDF文件，我们需要倒序排列，应该怎么做呢？
首先，我们来看python 中，怎么倒叙打印一串数字，如下图所示。
那么倒序排列一个pdf，思路同上，代码如下：
from PyPDF2 import PdfFileReader, PdfFileWriter
pdf_reader = PdfFileReader(r"G:\6Tipdm\7python 办公自动化\concat_pdf\时间序列.pdf")
pdf_writer = PdfFileWriter()
for page in range(pdf_reader.getNumPages()-1, -1, -1):
pdf_writer.addPage(pdf_reader.getPage(page))
with open("G:\\6Tipdm\\7python 办公自动化\\concat_pdf\\倒序.pdf", "wb") as out:
pdf_writer.write(out)
结果如下：
4、pdf 批量加水印及加密、解密
1）批量加水印
from PyPDF2 import PdfFileReader, PdfFileWriter
from copy import copy
water = PdfFileReader(r"G:\6Tipdm\7python 办公自动化\concat_pdf\水印.pdf")
water_page = water.getPage(0)
pdf_reader = PdfFileReader(r"G:\6Tipdm\7python 办公自动化\concat_pdf\aa.pdf")
pdf_writer = PdfFileWriter()
for page in range(pdf_reader.getNumPages()):
my_page = pdf_reader.getPage(page)
new_page = copy(water_page)
new_page.mergePage(my_page)
pdf_writer.addPage(new_page)
with open("G:\\6Tipdm\\7python 办公自动化\\concat_pdf\\添加水印后的 aa.pdf", "wb") as
out: pdf_writer.write(out)
"""
这里有一点需要注意：进行 pdf合并的时候，我们希望“水印”在下面，文字在上面，因
此
是“水印”.mergePage(“图片页”)
"""
结果如下：
2）批量加密、解密
* 这里所说的“解密”，是在知道 pdf的密码下，去打开 pdf，而不是暴力破解；
① 加密 pdf
from PyPDF2 import PdfFileReader, PdfFileWriter
pdf_reader = PdfFileReader(r"G:\6Tipdm\7python 办公自动化\concat_pdf\时间序列.pdf")
pdf_writer = PdfFileWriter()
for page in range(pdf_reader.getNumPages()):
pdf_writer.addPage(pdf_reader.getPage(page))
# 添加密码
pdf_writer.encrypt("a123456")
with open("G:\\6Tipdm\\7python 办公自动化\\concat_pdf\\时间序列.pdf", "wb") as out:
pdf_writer.write(out)
结果如下：
② 解密 pdf 并保存为未加密的 pdf
from PyPDF2 import PdfFileReader, PdfFileWriter
pdf_reader = PdfFileReader(r"G:\6Tipdm\7python 办公自动化\concat_pdf\时间序列.pdf")
# 解密
pdf pdf_reader.decrypt("a123456")
pdf_writer = PdfFileWriter()
for page in range(pdf_reader.getNumPages()):
pdf_writer.addPage(pdf_reader.getPage(page))
with open("G:\\6Tipdm\\7python 办公自动化\\concat_pdf\\未加密的时间序列.pdf", "wb") as
out:
pdf_writer.write(out)
结果如下：
章节三：python 使用 python-docx 操作 word
1、python-docx 库介绍
* 该模块儿可以创建、修改 Word（.docx）文件；
* 此模块儿不属于python 标准库，需要单独安装；
* python-docx使用官网： https://python-docx.readthedocs.io/en/latest/；
* 我们在安装此模块儿使用的是 pip install python-docx，但是在导入的时候是 import
docx；
2、Python 读取 Word 文档内容
* 注意：每进行一个操作，必须保存一下，否则等于白做；
1）word 文档结构介绍
2）python-docx 提取文字和文字块儿
① python-docx 提取文字
有一个这样的docx文件，我们想要提取其中的文字，应该怎么做？
代码如下：
from docx import Document
doc = Document(r"G:\6Tipdm\7python 办公自动化\concat_word\test1.docx")
print(doc.paragraphs)
for paragraph in doc.paragraphs:
print(paragraph.text)
结果如下：
② python-docx 提取文字块儿
from docx import Document
doc = Document(r"G:\6Tipdm\7python 办公自动化\concat_word\test1.docx")
print(doc.paragraphs)
paragraph = doc.paragraphs[0]
runs = paragraph.runs
print(runs)
for run in paragraph.runs:
print(run.text)
paragraph = doc.paragraphs[1]
runs = paragraph.runs
print(runs)
for run in paragraph.runs:
print(run.text)
结果如下：
3）利用 Python 向 Word 文档写入内容
① 添加段落
from docx import Document
doc = Document(r"G:\6Tipdm\7python 办公自动化\concat_word\test1.docx")
# print(doc.add_heading("一级标题", level=1)) 添加一级标题的时候出错，还没有解决！
paragraph1 = doc.add_paragraph("这是一个段落")
paragraph2 = doc.add_paragraph("这是第二个段落")
doc.save(r"G:\6Tipdm\7python 办公自动化\concat_word\test1.docx")
"""
添加段落的时候，赋值给一个变量，方便我们后面进行格式调整；
"""
结果如下：
② 添加文字块儿
from docx import Document
doc = Document(r"G:\6Tipdm\7python 办公自动化\concat_word\test1.docx")
# 这里相当于输入了一个空格，后面等待着文字输入
paragraph3 = doc.add_paragraph()
paragraph3.add_run("我被加粗了文字块儿").bold = True
paragraph3.add_run("，我是普通文字块儿，")
paragraph3.add_run("我是斜体文字块儿").italic = True
doc.save(r"G:\6Tipdm\7python 办公自动化\concat_word\test1.docx")
结果如下：
③ 添加一个分页
from docx import Document
doc = Document(r"G:\6Tipdm\7python 办公自动化\concat_word\test1.docx")
doc.add_page_break()
doc.save(r"G:\6Tipdm\7python 办公自动化\concat_word\test1.docx")
结果如下：
④ 添加图片
from docx import Document
from docx.shared import Cm
doc = Document(r"G:\6Tipdm\7python 办公自动化\concat_word\test1.docx")
doc.add_picture(r"G:\6Tipdm\7python 办公自动化
\concat_word\sun_wu_kong.png",width=Cm(5),height=Cm(5))
doc.save(r"G:\6Tipdm\7python 办公自动化\concat_word\test1.docx")
"""
Cm 模块，用于设定图片尺寸大小
"""
结果如下：
⑤ 添加表格
from docx import Document
doc = Document(r"G:\6Tipdm\7python 办公自动化\concat_word\test1.docx")
list1 = [
["姓名","性别","家庭地址"],
["唐僧","男","湖北省"],
["孙悟空","男","北京市"],
["猪八戒","男","广东省"],
["沙和尚","男","湖南省"]
]
list2 = [
["姓名","性别","家庭地址"],
["貂蝉","女","河北省"],
["杨贵妃","女","贵州省"],
["西施","女","山东省"]
]
table1 = doc.add_table(rows=5,cols=3)
for row in range(5):
cells = table1.rows[row].cells
for col in range(3):
cells[col].text = str(list1[row][col])
doc.add_paragraph("-----------------------------------------------------------") table2 =
doc.add_table(rows=4,cols=3)
for row in range(4):
cells = table2.rows[row].cells
for col in range(3):
cells[col].text = str(list2[row][col])
doc.save(r"G:\6Tipdm\7python 办公自动化\concat_word\test1.docx")
结果如下：
⑥ 提取 word 表格，并保存在 excel 中(很重要)
from docx import Document
from openpyxl import Workbook
doc = Document(r"G:\6Tipdm\7python 办公自动化\concat_word\test2.docx")
t0 = doc.tables[0]
workbook = Workbook()
sheet = workbook.active
for i in range(len(t0.rows)):
list1 = []
for j in range(len(t0.columns)):
list1.append(t0.cell(i,j).text)
sheet.append(list1)
workbook.save(filename = r"G:\6Tipdm\7python 办公自动化\concat_word\来自word中的
表.xlsx")
结果如下：
3、利用 Python 调整 Word 文档样式
1）修改文字字体样式
from docx import Document
from docx.shared import Pt,RGBColor
from docx.oxml.ns import qn
doc = Document(r"G:\6Tipdm\7python 办公自动化\concat_word\test2.docx")
for paragraph in doc.paragraphs:
for run in paragraph.runs:
run.font.bold = True
run.font.italic = True
run.font.underline = True
run.font.strike = True
run.font.shadow = True
run.font.size = Pt(18)
run.font.color.rgb = RGBColor(255,255,0)
run.font.name = "宋体"
# 设置像宋体这样的中文字体，必须添加下面 2行代码
r = run._element.rPr.rFonts
r.set(qn("w:eastAsia"),"宋体")
doc.save(r"G:\6Tipdm\7python 办公自动化\concat_word\_test1.docx")
结果如下：
2）修改段落样式
① 对齐样式
from docx import Document
from docx.enum.text import WD_ALIGN_PARAGRAPH
doc = Document(r"G:\6Tipdm\7python 办公自动化\concat_word\test1.docx")
print(doc.paragraphs[0].text)
doc.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
# 这里设置的是居中对齐
doc.save(r"G:\6Tipdm\7python 办公自动化\concat_word\对齐样式.docx")
"""
居中对齐是其中一种样式，这里还有其他选择，自己百度了解：
LEFT,CENTER,RIGHT,JUSTIFY,DISTRIBUTE,JUSTIFY_MED,JUSTIFY_HI,JUSTIFY_L
OW,THAI_JUSTIFY
"""
结果如下：
② 行间距调整
from docx import Document
from docx.enum.text import WD_ALIGN_PARAGRAPH
doc = Document(r"G:\6Tipdm\7python 办公自动化\concat_word\test1.docx")
for paragraph in doc.paragraphs:
paragraph.paragraph_format.line_spacing = 5.0
doc.save(r"G:\6Tipdm\7python 办公自动化\concat_word\行间距.docx")
结果如下：
③ 段前与段后间距
* 这里提供代码，自行下去检验