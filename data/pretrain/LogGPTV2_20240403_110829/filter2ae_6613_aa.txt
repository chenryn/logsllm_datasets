**作者：Skay @ QAX A-TEAM  
原文链接：**
在冰蝎原代码基础上，增加了内存马注入的支持。 这里我们只讨论以JSP方式注入内存马，不涉及与反序列化漏洞利用结合。
# 一、冰蝎源码简析及修改(JSP相关)
## 1.冰蝎JSP Webshell 工作原理
冰蝎利用动态二进制加密实现新型一句话木马的思路很好的解决了菜刀等webshell工具被查杀的问题。首先我们看下服务端
第一段代码块创建了U类继承 ClassLoader ，然后自定义一个名为 g 的方法，接收字节数组类型的参数并调用父类的 defineClass
动态解析字节码返回 Class 对象，然后实例化该类并调用 **equals** 方法，传入 jsp 上下文中的 **pageContext 对象**
。其中 bytecode
就是由冰蝎客户端发送至服务端的字节码，获取到客户端发来的请求后，获取post的值，先解密，然后base64解码，获取一段byte[]，然后调用difineClass，获取到一个Class，将其newInstance后，获取到类，该类中重写了
equals
方法，equals方法只接受一个参数，也就是pageContext，其实这也够了，只要传递pageContext进去，便可以间接获取Request、Response、Seesion等对象，如HttpServletRequest
request=(HttpServletRequest) pageContext.getRequest();最后进行结果的返回。
## 2.冰蝎源码简要分析(JSP)
我们的目的是实现JSP版本的内存马注入，所以源码我们也只看，JSP相关部分。
### (1) 目录结构
首先对目录有个概览
第一次接触冰蝎源码，是之前一次尝试去除2.0版本的特征，密钥交换步骤，去除冰蝎密钥交换步骤很简单，修改Utils
getKeyAndCooiek方法，暴力一点，直接注释掉，将交换密钥写死在shell里?。
接下来将关注点回到3.0，上面分析JSP Webshell提到客户端会发给服务端一个加密后的数据，服务端解密后，得到一段byte[]
数据，再调用defineClass会得到一个Class，这个Class，我们是可以在冰蝎源码里找到的，在payload/java文件夹下
当冰蝎shell建立连接后，攻击者调用不同的功能时，每个功能与上面的文件一一对应，其实这么说不严谨，建立连接时，也会调用Echo.java 以及
BasicInfo.java
### (2) shell连接流程
我们来跟下建立连接的流程
首先是入口net.rebeyond.behinder.ui.controller.MainWindowController，
跟进doConnect:184, ShellService，可以看到首先判断shell的连接类型，我们这里是Jsp，
在这段代码中可以看到，是通过调用echo方法来检测连接是否成功建立
    obj = this.echo(content);
    if (obj.getString("msg").equals(content)) {
        result = true;
    }
我们跟进this.echo方法 echo:964, ShellService
echo方法很好的举例说明了，冰蝎内部是怎样将payload代码进编译成class文件，然后加密，发送到服务端进行动态执行。
echo方法执行完毕程序逻辑又回到doConnect:186,
ShellService，可以看到返回true，说明连接成功，这里说明一点，如果连接不成功，冰蝎会进入2.0版本的常规密钥协商流程，这也算是对2.0的一个兼容吧。
doConnect方法执行结束后，回到lambda$1:110, MainWindowController
调用getBasicInfo，获取基本信息，对应在payload里面就是BasicInfo.java文件
getBascicInfo后，初始化各个功能，初始连接过程结束
到此简历连接完毕
### (3) 冰蝎动态编译成字节码实现原理
冰蝎客户端是将java代码动态编译成字节码，然后加密发送给服务端，以BasicInfo.java 为例
    //
    // Source code recreated from a .class file by IntelliJ IDEA
    // (powered by Fernflower decompiler)
    //
    package net.rebeyond.behinder.payload.java;
    public class BasicInfo {
        public static String whatever;
        public BasicInfo() {
        }
        public boolean equals(Object obj) {
            PageContext page = (PageContext)obj;
            page.getResponse().setCharacterEncoding("UTF-8");
            String result = "";
            try {
               ........
            } catch (Exception var15) {
                var15.printStackTrace();
            }
            return true;
        }
        public static byte[] Encrypt(byte[] bs, String key) throws Exception {
           ....
            return encrypted;
        }
        private String buildJson(Map entity, boolean encode) throws Exception {
            .......
            return sb.toString();
        }
    }
BasicInfo中存在public static变量，客户端动态构造服务端执行的代码时传进去的，通过params参数传递
    public String getBasicInfo(String whatever) throws Exception {
        String result = "";
        Map params = new LinkedHashMap();
        params.put("whatever", whatever);
        byte[] data = Utils.getData(this.currentKey, this.encryptType, "BasicInfo", params, this.currentType);
        Map resultObj = Utils.requestAndParse(this.currentUrl, this.currentHeaders, data, this.beginIndex, this.endIndex);
        byte[] resData = (byte[])((byte[])resultObj.get("data"));
        try {
            result = new String(Crypt.Decrypt(resData, this.currentKey, this.encryptType, this.currentType));
            return result;
        } catch (Exception var8) {
            var8.printStackTrace();
            throw new Exception("请求失败:" + new String(resData, "UTF-8"));
        }
    }
对应上文JSP
Webshell工作原理的分析,客户端动态构造完毕java代码后，将Java代码，也就是整个BasicInfo类编译为字节码加密发送给服务端。服务端通过defineClass->newInstance获取到BasicInfo对象，调用BasicInfo的equal方法，将参数obj，也就是PageContext传进去，这样就可以获取request
Resopose Session等对象，然后进一步执行equal中的代码逻辑，将执行结果写入response，并加密返回给客户端。
## 3.修改
逻辑原理分析完毕，总结一句话就是冰蝎的服务端提供了一个执行任意java代码的环境。所以修改方式就是将我们内存马注入的逻辑代码直接发送给服务端即可，也就是放到equal方法中。
注入内存马属于给冰蝎增加了一个功能，分为三步实现需求
  * 新增功能后修改UI部分
  * 跟进冰蝎内部功能调用代码，调用我们新增功能
  * 更改equal方法实现内存马注入
### (1) 新增功能后修改UI部分
冰蝎各个功能的初始化是在net.rebeyond.behinder.ui.controller.MainWindowController中，这里我为了不整个修改fxml文件，直接将平行空间功能修改为内存马注入
然后用idea自带的ui编辑器拖拽绘图既可
### (2) 调用新增功能
先来跟下冰蝎调用功能时的调用栈...好短
    lambda$1:64, ParallelViewController (net.rebeyond.behinder.ui.controller)
    run:-1, 392926346 (net.rebeyond.behinder.ui.controller.ParallelViewController$$Lambda$595)
    run:745, Thread (java.lang)
其实，冰蝎几乎将所有的功能模块准备都放在了初始化当中
我们只需要修改ParallelViewController，将按钮监听事件(注入内存马按钮）在初始化时启动监听即可。
现在，成功监听了按钮事件，如何控制当前连接的shell，注意一个变量this.currentShellService，它代表了当前的shell连接
即ShellService类，我们只需在ShellService中新建方法getInjectwebshell即可，
并将内存马的密码及路径参数传进去，供冰蝎动态构造需要在服务端执行的java代码
最后就是调用payload/java
目录下的具体功能了，我们需要在payload目录下新建相应的功能文件Injectwebshell_tomcat，然后冰蝎编译，加密发送到服务端。
getInjectwebshell关键代码
    byte[] data = Utils.getData(this.currentKey, this.encryptType, "Injectwebshell_tomcat_skay", params, this.currentType);
    Map resultObj = Utils.requestAndParse(this.currentUrl, this.currentHeaders, data, this.beginIndex, this.endIndex);
### (3) 更改equal方法实现内存马注入
最后就是实现我们Injectwebshell_tomcat，跟其它功能文件相同，只需将代码注入逻辑放在equals方法中即可，具体代码注入逻辑根据中间件不同，实现逻辑也有区别
### PS：内存马的连接
内存马注入成功后，最好是使用原来的冰蝎是可以连接的，其实就是把原冰蝎的JSP服务端修改成java逻辑，放在目标服务器内存中运行即可。因为Tomcat、Weblogic都是通过动态注册Filter方式实现内存马注入，所以最终冰蝎服务端逻辑将在Filter中的doFilter方法中。
为了区别与普通JSP Webshell，动态注入的内存马将不再调用equal方法，修改为fuck方法
同时，客户端各个功能也需要相应增加fuck方法的实现逻辑
# 二、Tomcat 内存马注入
根据网上公开的思路，Tomcat内存马注入有两种思路，动态注册Servlet，动态注册Filter，在这里我们只讨论Filter方式注入内存马。
## 1.分析环境准备
参考链接
## 2.Tomcat Filter流程分析
### (1) Filter简介
Filter 程序是一个实现了 Filter 接口的 Java 类，与 Servlet 程序相似，它由 Servlet容器进行调用和执行。这个
Servlet 过滤器就是我们的 filter，当在 web.xml 中注册了一个 Filter 来对某个 Servlet
程序进行拦截处理时，这个Filter 就成了 Tomcat 与该 Servlet 程序的通信线路上的一道关卡，该 Filter 可以对Servlet
容器发送给 Servlet 程序的请求和 Servlet 程序回送给 Servlet 容器的响应进行拦截，可以决定是否将请求继续传递给 Servlet
程序，以及对请求和相应信息是否进行修改。
### (2) Tomcat filter?源码分析
分析之前列出组装过滤器时涉及到的几个核心类及其功能
  * **Filter** 过滤器接口一个 Filter 程序就是一个 Java 类，这个类必须实现 Filter 接口。javax.servlet.Filter 接口中定义了三个方法：init(Web 容器创建 Filter 的实例对象后，将立即调用该 Filter 对象的 init 方法)、doFilter(当一个 Filter 对象能够拦截访问请求时，Servlet 容器将调用 Filter 对象的 doFilter 方法)、destory(该方法在 Web 容器卸载 Filter 对象之前被调用)。
  * **FilterChain** 过滤器链 FilterChain 对象中有一个 doFilter() 方法，该方法的作用是让 Filter 链上的当前过滤器放行，使请求进入下一个 Filter.Filter和FilterChain密不可分, Filter可以实现依次调用正是因为有了FilterChain
  * **FilterConfig** 过滤器的配置,与普通的 Servlet 程序一样，Filter 程序也很可能需要访问 Servlet 容器。Servlet 规范将代表 ServletContext 对象和 Filter 的配置参数信息都封装到一个称为 FilterConfig 的对象中。FilterConfig 接口则用于定义 FilterConfig 对象应该对外提供的方法，以便在 Filter 程序中可以调用这些方法来获取 ServletContext 对象，以及获取在 web.xml 文件中为 Filter 设置的友好名称和初始化参数。
  * **FilterDef** 过滤器的配置和描述
  * **ApplicationFilterChain** 调用过滤器链
  * **ApplicationFilterConfig** 获取过滤器
  * **ApplicationFilterFactory** 组装过滤器链
还有几个比较重要的类
  * **WebXml** 从名字我们可以就看出来这个一个存放web.xml中内容的类
  * **ContextConfig** 一个web应用的上下文配置类
  * **StandardContext** 一个web应用上下文(Context接口)的标准实现
  * **StandardWrapperValve** 一个标准Wrapper的实现。一个上下文一般包括一个或者多个包装器，每一个包装器表示一个servlet。
Filter的配置在web.xml中，Tomcat会首先通过ContextConfig创建WebXML的实例来解析web.xml,先跳过这个部分，直接将关注点放在StandardWrapperValve，在这里会进行过滤器的组装操作。
首先，创建了一个应用过滤器链
我们跟进这个方法，整个应用过滤器链条的组装过程清晰的展现在面前，最终将filterChain返回
filterMaps是filtermap的数组，我们观察下filtermap的数据结构
FilterMap存放了Filter的名称和需要拦截的url的正则表达式
继续往下分析代码，遍历FilterMap中每一项，调用matchFiltersURL这个函数，去确定请求的url和Filter中需要拦截的正则表达式是否匹配
如果匹配通过，则通过context.findFilterConfig方法去查找filter对应的名称
继续往下走，我们现在获取到了filterConfig(ApplicationFilterChain)，它的结构如下，里面有filterdef
以及filter对象
最后将filterconfig放到filterChain中，这里再看下filterChain.addFilter(filterConfig);方法
至此，filterChain组装完毕，回到org.apache.catalina.core.StandardWrapperValve，执行doFilter
执行过滤器
我们跟进org.apache.catalina.core.ApplicationFilterChain的doFilter方法中，它其实时调用了internalDoFilter，直接看internalDoFilter
Filter结束调用，拉闸~
最后借用宽字节表哥的一张图做一个总结
### (3) 实现filter注入
对Tomcat处理filter有了一个清晰的了解之后，现在目的是实现filter动态注入，回忆一下刚才Tomcat处理FIlter的流程，并且关注一下context变量，也就是StandardContext的三个成员变量
StandardContext为web应用上下文变量，其中有三个成员变量和filter相关
  * filterConfigs：filterConfig的数组 filterconfig里面有filterdef 以及filter对象
  * filterRefs：filterRef的数组 FilterDef的作用主要为描述filter的字符串名称与Filter实例的关系
  * filterMaps：filterMap的数组(FilterMap中存放了所有filter相关的信息包括filterName和urlPattern。有了这些之后，使用matchFiltersURL函数将每个filter和当前URL进行匹配，匹配成功的通过) filterConfig我们看过，这里注意，filterConfig.filterRef实际和context.filterRef指向的地址一样，也就是同一个东西
设法修改这三个变量，也许就能实现目的。
查看StandardContext源码，
  * StandardContext.addFilterDef()可以修改filterRefs
  * StandardContext.filterStart()函数会根据filterDef重新生成filterConfigs
  * 至于filtermaps，直接本地new一个filter插入到数组第一位即可
首先是修改filterRefs和filterConfigs
    Method filterStartMethod = org.apache.catalina.core.StandardContext.class.getMethod("filterStart");
    filterStartMethod.setAccessible(true);
    filterStartMethod.invoke(standardContext, null);
然后修改filtermaps
还需要注意一点，直接调用addfilter会出现异常，因为对于context对象会做一些校验，
    if (!context.getState().equals(LifecycleState.STARTING_PREP)) {
        //TODO Spec breaking enhancement to ignore this restriction
        throw new IllegalStateException(
                sm.getString("applicationContext.addFilter.ise",
                        getContextPath()));
    }
需要修改下状态
    Field stateField = org.apache.catalina.util.LifecycleBase.class
            .getDeclaredField("state");
    stateField.setAccessible(true);
    stateField.set(standardContext, org.apache.catalina.LifecycleState.STARTING_PREP);
addfilter执行完毕后，需要将状态改回来
    stateField.set(standardContext, org.apache.catalina.LifecycleState.STARTED);
#### 1.从pagecontext中获取context
到这里，我们已经成功修改了context对象，最后一个问题，context对象我们怎么获取。
回忆一下，动态注入filter的代码逻辑是冰蝎本地编译号字节码在服务端执行的，也就是equal方法中，equal方法接收一个参数，pagecontext，从这个对象中我们可以成功取到StandardContext对象！
    ServletContext servletContext = page.getServletContext();
    //            System.out.println(servletContext);
                //获取ApplicationContext
                Field field = servletContext.getClass().getDeclaredField("context");
                field.setAccessible(true);
                ApplicationContext applicationContext = (ApplicationContext) field.get(servletContext);
                //获取StandardContext
                field = applicationContext.getClass().getDeclaredField("context");
                field.setAccessible(true);
                StandardContext standardContext = (StandardContext) field.get(applicationContext);
综上，我们Tomcat 基于JSP方式动态注入filter实现完毕。 集成到冰蝎里inject_tomcat代码如下：
**参考了很多哥斯拉的思路 超级感谢北辰师傅**