，又要把所有源文件编译一遍，
j++)
stack.c中多次使用item_t类型,
只要它能够通过函数的参数和返回
一个大型的软件项目往往由上千
，现在我们做进一步抽
即
378
---
## Page 379
对于上面这个例子，make执行如下步骤:
main是这条规则的目标（Target）
make命令会自动读取当前目录下的Makefile文件[33],
进那么随意，对于Makefile中的每个以Tab开头的命令，make会创建一
件中只要有一个条件被更新了，
然后在这个目录下运行make编译：
如果编译之后又对maze.c做了修改，
表
（Prerequisite）
例如：
（Rule）组成，每条规则的格式是:
是
这样又有一个问题,
一个忘了重新编译，
同一个目录下：
含了main.h,
，命令列表中的每条命令必须以一个Tab开头,
main: main.o stack.o maze.o
target 
gcc
gcc -c stack.c
gcc
$ make
maze.o: maze.c maze.h main.h
stack.o: stack.c stack.h main.h
main.o: main.c main.h stack.h maze.h
main: main.o stack.o maze.o
SS
Makefile
有的还很不明显,
comanad2
 main.c
 gcc main.o stack.o maze.o -o main
maze.c
 gcc -c stack.c
gcc-c
 gcc main.o stack.o maze.o -o main
gcc
，目标和条件之间的关系是：
 结果编译完了修改没生效，
每次编译敲的命令都不一样，
maze.
main.c
目标也必须随之被更新。所谓"更新"就是执行一遍规则中的命令列
.C
，要重新编译只需要做两步：
main
欲更新目标,
运行时出了Bug还满世界找原因呢。更复杂的问题
 注意不能是空格，Makefile的格式不像C语言的缩
，很容易出错，
完成相应的编译步骤。Makefile由一组规则
，必须首先更新它的所有条件；所有条
而后者包含了main.h。可见手动处
比如我修改了三个源文件，
个Shell进程去执行它。
可能有
379
---
## Page 380
现在总结一下Makefile的规则，请读者结合上面的例子理解。如果一条规则的目标属于以下情况之
make会自动选择那些受影响的源文件重新编译，不受影响的源文件则不重新编译，这是怎么做到的
make会提示缺省目标已经是最新的了，
在一条规则被执行之前，规则的条件可能处于以下三种状态之一：
呢？
了maze.h（比如加个无关痛痒的空格）再运行make：
如果没有做任何改动，再次运行make：
，就称为需要更新：
 3．既然main的三个条件中有两个被更新过了，那么main也需要更新，所以执行命令gcc main.o
2．make会进一步查找以这三个条件为目标的规则，
1．make仍然尝试更新缺省目标，
2．所以make会进一步查找以这三个条件为目标的规则，这些目标文件也没有生成，也需要更
·需要更新。能够找到以该条件为目标的规则，并且该规则中目标需要更新。
·某个条件的修改时间比目标晚。
·目标没有生成。
某个条件需要更新。
到以该条件为目标的规则，并且该条件已经生成。
不需要更新。能够找到以该条件为目标的规则，但是该规则中目标不需要更新；或者不能找
 stack.o maze.o-o main更新main。
更新main.o和maze.0。
件main.o、stack.o和maze.o是否需要更新。
然后才能更新main。
件还没生成，显然需要更新，但规则说必须先更新了main.o、stack.o和maze.o这三个条件,
更新了就算完成任务了，
尝试更新 
gcc 
gcc
make:
$ make
S
 make
 main.o stack.o maze.o -o main
 -c maze.c
-c
main.c
'main' is up to date.
中第一条规则的目标 
其它工作都是为这个目的而做的。由于我们是第一次编译，main文
，首先检查目标main是否需要更新，这就要检查三个条
，不需要执行任何命令更新它。再做个实验，如果修改
 第一条规则的目标称为缺省目标,
只要缺省目标
因为它
380
---
## Page 381
新Makefile中第一条规则的目标（缺省目标）。
如果在make的命令行中指定一个目标（例如clean），则更新这个目标，如果不指定目标则更
续命令，但如果命令前面加了-号,
和前面介绍的规则不同，
把这条规则添加到我们的Makefle末尾，然后执行这条规则:
通常Makefile都会有一个elean规则，用于清除编译过程中产生的二进制文件，保留源文件:
两个命令都有可能出错，
和mkdir命令前面要加-号，
显示它的结果；通常make执行的命令如果出错（该命令的退出状态非0）就立刻终止，不再执行后
演
执行一条规则A的步骤如下：
文
遍就没有文件可删了
示了命令前面加e和-字符的效果：如果make执行的命令前面加了@字符，则不显示命令本身而只
件
2．在检查完规则A的所有条件后，检查它的目标T，如果属于以下情况之一，就执行它的命令列
1．检查它的每个条件P:
·错误。不能找到以该条件为目标的规则，并且该条件没有生成。
刚才说过，
表：
cleanning project
$ make clean
clean completed 
rm main 
cleanning project 
$ make clean
clean:
·某个条件P已被更新（并不一定生成文件P）
·文件T不存在。
·如果找不到规则B，并且文件P不存在，则报错退出。
·如果P需要更新，就执行以P为目标的规则B。之后，无论是否生成文件P，都认为P已
·如果找不到规则B，并且文件P已存在，表示P不需要更新。
文件T存在，但是某个条件的修改时间比它晚。
被更新。
只要执行了命令列表就算更新了目标,
 @echo "cleanning project"
@echo
o
，这时rm会报错，但make忽略这一错误，继续执行后面的echo命令：
.clean 目标不依赖于任何条件,
..........
 因为rm要删除的文件可能不存在，mkdir要创建的目录可能已存在，这
.
即使这条命令出错，
，make也会继续执行后续命令。
并且执行它的命令列表不会生成clean这
即使目标并没有生成也算。在这个例子还
，通常rm命令
68
一
---
## Page 382
过程也分为两个阶段：
当然写在前面也行。gcc处理一个C程序分为预处理和编译两个阶段，类似地，make处理Makefile的
在clean:规则的后面也行，也能起到声明clean是伪目标的作用：
这条规则没有命令列表。类似.PHONY这种make内建的特殊目标还有很多，
把clean声明为一
望把clean当作-
如果存在clean这个文件，
录下存在一
读者可以把命令前面的e和-去掉再试试,
1．首先从前到后读取所有规则，建立起一个完整的依赖关系图，例如：
有任何依赖关系。
执行一遍，
行Makefile中的规则和执行C代码不一样，
然后从缺省目标或者命令行指定的目标开始，
clean:
SS
clean completed
make:
.PHONY: clean
.PHONY: clean 
make:
touch clean 
一个文件叫clean会怎么样呢？
main.c
图 22.1. Makefile的依赖关系图
[clean] Error 1(ignored)
，例如make缺省目标时不会更新clean目标，
一个伪目标：
-clean'
@echo
-rm main_
@echo "cleanning project"
stack.h
个特殊的名字使用，不管它存在不存在都要更新，可以添一条特殊规则，
 is up to date.
"clean completed"
，clean目标又不依赖于任何条件，make就认为它不需要更新了。而我们希
main.h
对比-
maze.h
maze.c
，并不是从前到后按顺序执行，
一下结果有何不同。这里还有一个问题，如果当前目
根据依赖关系图选择适当的规则执行，
，因为从上图可以看出，它跟缺省目标没
而Makefile不太一样，这条规则写
，各有不同的用途，
，也不是所有规则都要
执
382
详
---
## Page 383
第22章Makefile基础
可以起名为GNUmakefile，否则不建议用这个文件名。
是GNU make，不会查找GNUmakefile这个文件名，
事实上，
[33] 只要符合本章所描述的语法的文件我们都叫它Makefile，
这样的约定俗成的目标名字有：
clean 目标是一个约定俗成的名字，在所有软件项目的Makefle中都表示清除编译生成的文件，类似
上一页
·clean，删除编译生成的二进制文件。
·install，执行编译后的安装工作，把可执行文件、配置文件、文档等分别拷到不同的安装目
● distclean,
·all，执行主要的编译工作，
转换后的文档，执行make distclean之后应该清除所有这些文件，只留下源文件。
录。
 执行make命令时，
 不仅删除编译生成的二进制文件,
，通常用作缺省目标。
全国嵌入式人才培训基地
起始页
上一级
如果你写的Makefile包含GNU make的特殊语法
除了GNU make,
，也删除其它生成的文件，
，而它的文件名则不一定是Makefile。
．有些UNIX系统的make命令不
2.隐含规则和模式规则
 例如配置文件和格式
下二
28
---
## Page 384
这不是比原来更繁琐了吗？现在可以把提出来的三条规则删去，写成:
否则make会报警告并且采用最后一条规则的命令列表。
就相当于:
一个目标依赖的所有条件不一定非得写在一条规则中，也可以拆开写，例如：
写法，可以写得更简洁，同时减少出错的可能。本节我们来看看这样一个例子还有哪些改进的余
2.隐含规则和模式规则 请点评
这样我们的例子可以改写成：
如果一个目标拆开写多条规则，
地。
上一节的Makefile写得中规中矩，
上一页
main: main.o stack.o maze.o
stack.o: stack.c
main.o: main.c
main.o: main.h stack.h maze.h
main.o: main.c main.h stack.h maze.h
main.o: main.c
clean:
maze.o: :
maze.o: maze.h main.h
stack.o: stack.h main.h
main.o: main.h stack.h maze.h
.PHONY: clean 
1
gcc -c
 gcc main.o stack.o maze.o -o main
-rm main *.o
gcc -c maze.c
 maze.c
gcc -c main.c
gcc -c main.c
 main.c
 其中只有一条规则允许有命令列表，其它规则应该没有命令列表，
比较繁琐,
第22章Makefile基础
2.隐含规则和模式规则
全国嵌入式人才培训基地
是为了讲清楚基本概念，
其实Makefile有很多灵活的
下一页
---
## Page 385
。$@
cernatives/cc
其值应该是cc。Makefile变量像C的宏定义一样，
root 20 2008-07-04 05:59 /usr/bin/cc ->
stack.o和maze.o这三个目标连编译命令都没有了，怎么编
去掉所有的“空"得到cc
-c，注意中间留下4个
代表一串字符，
这
-c
385
在取
---
## Page 386
注意两条规则的命令列表是一样的，但se的取值不同。
这样一条规则相当于：
楚
我们知道，
先前我们写Makefile都是以目标为中心，
maze.o也同样处理。这三条规则可以由make的隐含规则推导出来，所以不必写在Makefile中。
随后，在处理stack.o目标时又用到这条模式规则，这时又相当于:
心，Makefile还可以这么写：
的Stem），再替换到。.c中就是main.c。所以这条模式规则相当于：
有这样一条模式规则适用，
的Makefile中以main.o为目标的规则都没有命令列表，
.c是一种特殊的规则，
s@和s<是两个特殊的变量,
1.基本规则
了就行。对于多目标的规则，make会拆成几条单目标的规则来处理，例如
一页
target2: prerequisitel prerequisite2 
main.o stack.o maze.o: main.h
main: main.o stack.o maze.o
 stack.o: stack.c
clean:
main.0
main.o: main.c
.PHONY: clean
main.o
，写规则的目的是让make建立依赖关系图，
) maze.o: maze.h
 command prerequisitel
 stack.o: stack.h
command
-rm main *.0
 gcc main.o stack.o maze.o -o main
cC
cC
称为模式规则（Pattern Rule）
-c -o main.o main.c
VS
 -o stack.o stack.c
 se的取值为规则中的目标，
全国嵌入式人才培训基地
一个目标依赖于若干条件，现在换个角度，以条件为中
 -o targetl
-o target2
起始页
上一级
，现在就代表main
不管怎么写，只要把所有的依赖关系都描述清
，所以make会查找隐含规则，发现隐含规则中
 现在回顾-
一下整个过程，
（称为main.o这个名字
在我们
3.变量
386
页
---
## Page 387
当make读到y:=$(x）bar定义时，立即把s(x)展开，使变量y的取值是foobar，如果把这两行颠
即展开，可以用：=运算符，例如：
有坏处，
,-g等，
我们执行make将会打出Huh?。当make读到foo=$(bar)时，
这一节我们详细看看Makefle中关于变量的语法规则。先看一个简单的例子:
3.变量请点评
倒过来：
当然，
这种特性有好处也有坏处。好处是我们可以把变量的值推迟到后面定义，例如：
后，$(foo)展开还是能够取到s(bar)的值。
展开$(foo),
y := $(x) bar
all: