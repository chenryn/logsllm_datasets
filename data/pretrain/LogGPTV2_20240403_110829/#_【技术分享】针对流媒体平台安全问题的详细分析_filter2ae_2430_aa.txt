# 【技术分享】针对流媒体平台安全问题的详细分析
|
##### 译文声明
本文是翻译文章，文章来源：checkpoint.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
译者：[兴趣使然的小胃](http://bobao.360.cn/member/contribute?uid=2819002922)
预估稿费：300RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**一、背景**
最近一段时间，Check Point的研究人员[公开](http://blog.checkpoint.com/2017/05/23/hacked-in-translation/)了一种全新的攻击方法——基于字幕的攻击方法。在前一篇文章以及[演示视频](https://www.youtube.com/watch?v=vYT_EGty_6A)中，我们演示了攻击者如何在不引起用户警觉的前提下，通过字幕文件实现对用户主机的控制。
这种全新的攻击方法表明许多流媒体平台中存在多个漏洞，这些平台包括VLC、Koki（XBMC）、PopcornTime以及strem.io。
攻击者利用这种攻击方法能够完成各式各样的任务，包括窃取敏感信息、安装勒索软件、发起大规模拒绝服务攻击等等。
在我们最初那篇文章公布后，这些漏洞都被修复了，因此现在我们可以与大家全面分享这类攻击的技术细节。
**二、PopcornTime**
PopcornTime这个开源项目在短短几周之内就开发完成，支持多个视频平台，将Torrent客户端、视频播放器以及视频爬虫功能以一种非常友好的图形化界面呈现给用户。
图1. PopcornTime界面
由于这个平台易于使用、资源丰富，受到了主流媒体的广泛关注（[[1]](http://www.pcmag.com/article2/0,2817,2454833,00.asp)，[[2]](http://www.cbc.ca/news/technology/popcorn-time-is-like-netflix-for-pirates-dan-misener-1.2567929)），因此引起了[美国电影协会](https://torrentfreak.com/hollywood-tries-crush-popcorn-time-141219/)（MPAA）的注意，迫于压力，这个项目已经被关闭。
项目关闭后，许多组织继续更新维护PopcornTime应用程序，并添加了许多新功能。作为PopcornTime项目的继任者，popcorntime.io已经被该项目的原始成员所认可。
PopcornTime提供了一个基于webkit的接口，包含了电影信息以及一些元数据信息，可以提供预告片、故事情节、封面照片、IMDB评分等许多信息。
**2.1 PopcornTime中的字幕**
为了优化用户体验，PopcornTime会自动获取字幕信息。这一行为能否被攻击者利用呢？答案是肯定的。
PopcornTime使用了[open-subtitles](https://www.opensubtitles.org/)作为该平台的唯一字幕源。这个字母源拥有超过4,000,000组字幕，提供了非常方便的[API](http://trac.opensubtitles.org/projects/opensubtitles)，因此深受大众喜爱。
这个API不仅可以用来搜索及下载字幕，同时也包含一个推荐算法来帮助用户找到合适的字幕。
**2.2 攻击面**
正如前文所述，PopcornTime的底层是webkit（更精确地说，是NW.js）。
NW.js以前的名字为node-webkit，可以让开发者在其原生应用中使用类似HTML5、CSS3以及WebGL等Web技术。
不仅如此，开发者可以在DOM中直接调用Node.js API以及第三方模块。
从本质上来讲，一个NW.js应用就是一个Web页面，所有的代码都是用JavaScript或者HTML再加上CSS编写而成。在这种情况下，由于它是运行在node
js引擎上，因此攻击者可以使用XSS（跨站脚本）漏洞来使用服务端的功能。换句话说，XSS漏洞实际上就是RCE（远程代码执行）漏洞。
**2.3 开始攻击**
当用户开始播放电影时，我们也开始了攻击之旅。
PopcornTime会使用前面提到的API向服务器发起查询请求，然后下载服务器推荐的字幕（我们会在下文详细分析这一过程，因为这是我们整篇文章中最为关键的一步）。
接下来，PopcornTime会尝试将字幕文件转化为.srt格式：
图2. [/src/app/vendor/videojshooks.js](https://github.com/popcorn-official/popcorn-desktop/blob/development/src/app/vendor/videojshooks.js#L137)
经过各种解码及解析函数处理之后，生成的元素（单条字幕）会被附加到正确的时间线上，包含在“cues”数组中：
图3. updateDisplay函数
通过这种方式，我们就能往视图中添加任意html对象。
显而易见的是，能够完全控制任意HTML元素本身就是一件非常危险的事情。对于基于node的应用而言，我们需要明确一点，那就是XSS漏洞等同于RCE漏洞。
攻击者可以使用诸如[child_process](https://nodejs.org/api/child_process.html)之类的模块来执行系统命令。
一旦我们的恶意JavaScript被加载到应用中，那么实现代码执行也不过是几行代码的事情。
最简单的一个SRT文件如下所示：
    1
    00:00:01,000 –> 00:00:05,000
    Hello World
除了文本形式的“Hello World”，我们还可以使用HTML中的图片标签（img）。
我们可以尝试加载一个不存在的图片，并设置一个onerror属性。
图4. 恶意.srt文件样例
图5. evil.js（代码执行）
如图4所示，我们利用JavaScript的onerror属性，避免图片错误时应用显示一个错误的图标，然后将我们的远程恶意载荷加载到这个页面中，最后通过evil.js弹出大家喜闻乐见的calc.exe（如图5所示）。
**三、OpenSubtitles：水坑攻击**
因此，我们可以利用PopcornTime来执行代码。
客户端漏洞是非常有价值的，但它们往往依赖于用户的交互行为。
为成功利用客户端漏洞，用户必须点击链接、阅读pdf，或者攻击者需要事先突破某个网站。
为了通过字幕实施攻击，用户需要加载恶意字幕。我们有方法跳过这一步么？
对大众而言，通过开放社区获取的字幕通常会被视为安全的文本文件。既然我们已经知道这些文件也会存在危险，那么我们回过头来，从整体上观察一下这类文件的危害范围。
OpenSubtitles是目前最大的在线字幕下载社区，拥有超过400万条字幕内容，以及500万的日均下载量，其API也被广泛集成于其他视频播放器中。
此外，OpenSubtitles甚至可以提供智能搜索功能，能够根据用户提供的信息返回最佳匹配的字幕。
综上，我们是否可以通过API来取消用户交互过程，同时确保OpenSubtitles上存储的恶意字幕能够被用户自动下载？
**3.1 深入分析API**
当用户开始播放电影时，程序会第一时间发送SearchSubtitles请求，服务器会返回一个XML响应，响应中包含与用户请求相匹配的那个字幕的所有对象信息（此例中，用户使用IMDBid进行匹配）。
图6. API SearchSubtitles请求
图7. API SearchSubtitles响应
图6中，我们的搜索条件为“imdbid”，图7中的响应结果包含与imdbid匹配的所有字幕。
有意思的是，API会根据文件名、IMDBid、上传者等级等信息，通过算法对字幕进行排序。通过仔细阅读官方文档，我们发现了API的排序方法：
图8. API排序方法
根据图8所示，我们发现字幕的优先级得分与某些匹配元素加分权重有关，这些元素包括标签、IMDBid、上传用户等。
根据这张表，假设我们以“普通（匿名）用户”身份（即user|anon身份）将恶意字幕上传到OpenSubtitles，该字幕仅能得到5分。
但在这里我们学到了非常有价值的一个教训：那就是仅阅读官方文档是远远不够的，因为从源代码中我们能看到文档中没有给出的一些信息。
matchTags函数如下所示：
图9. opensubtitles-api排序算法
PopcornTime在发往服务器端的请求中仅仅指定了IMDBid这一字段（如图6所示），这意味着代码中“MatchedBy ===
‘tag’”这一条件永远为false，不会被执行。
因此程序会调用matchTags()函数：