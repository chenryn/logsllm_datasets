title:MuSig-DN: Schnorr Multi-Signatures with Verifiably Deterministic Nonces
author:Jonas Nick and
Tim Ruffing and
Yannick Seurin and
Pieter Wuille
MuSig-DN: Schnorr Multi-Signatures
with Veriﬁably Deterministic Nonces
Jonas Nick1, Tim Ruﬃng1, Yannick Seurin2, and Pieter Wuille1
1 Blockstream
PI:EMAIL
2 ANSSI, Paris, France
PI:EMAIL
PI:EMAIL
PI:EMAIL
October 15, 2020
Abstract. MuSig is a multi-signature scheme for Schnorr signatures, which supports key ag-
gregation and is secure in the plain public key model. Standard derandomization techniques for
discrete logarithm-based signatures such as RFC 6979, which make the signing procedure immune
to catastrophic failures in the randomness generation, are not applicable to multi-signatures as
an attacker could trick an honest user into producing two diﬀerent partial signatures with the
same randomness, which would reveal the user’s secret key.
In this paper, we propose a variant of MuSig in which signers generate their nonce deterministically
as a pseudorandom function of the message and all signers’ public keys and prove that they
did so by providing a non-interactive zero-knowledge proof to their cosigners. The resulting
scheme, which we call MuSig-DN, is the ﬁrst Schnorr multi-signature scheme with deterministic
signing. Therefore its signing protocol is robust against failures in the randomness generation as
well as attacks trying to exploit the statefulness of the signing procedure, e.g., virtual machine
rewinding attacks. As an additional beneﬁt, a signing session in MuSig-DN requires only two
rounds instead of three as required by all previous Schnorr multi-signatures including MuSig.
To instantiate our construction, we identify a suitable algebraic pseudorandom function and
provide an eﬃcient implementation of this function as an arithmetic circuit. This makes it possible
to realize MuSig-DN eﬃciently using zero-knowledge proof frameworks for arithmetic circuits
which support inputs given in Pedersen commitments, e.g., Bulletproofs. We demonstrate the
practicality of our technique by implementing it for the secp256k1 elliptic curve used in Bitcoin.
Keywords: digital signatures, multi-signatures, Schnorr signatures, MuSig, non-interactive
zero-knowledge proofs, deterministic nonces
1
Introduction
1.1 Background
Multi-signatures. A multi-signature scheme [IN83] allows a group of signers, each having
their own secret/public key pair (ski, pki
), to collaboratively compute a short signature σ on
a common message m, ideally with a size independent of the number of the signers. This
single signature can be veriﬁed given the message m and the set of public keys {pk1, . . . , pkn},
convincing a veriﬁer that every signer approved message m.
Multi-signature schemes require great caution to prevent rogue-key attacks, where the
adversary, who is assumed to be able to choose its public key arbitrarily, computes it as
a function of honest users’ public keys, allowing it to produce forgeries easily. Many early
multi-signature schemes succumbed to such rogue-key attacks [OO93, LHL95, Har94, HMP95,
Lan96, MH96, OO99]. As rogue-key attacks typically imply that the adversary does not know
the secret key associated to its maliciously computed public key, one method for preventing
them is to assume the existence of certiﬁcation authority (CA) and require users to prove
knowledge of their secret keys during public key registration. This is usually formalized as
the knowledge of secret key (KOSK) assumption [Bol03, LOS+06, RY07]: the security model
captures this registration step by demanding that the adversary provides the secret key for
any (adversarially chosen) public key involved in its forgery. However, existing standards for
registration protocols do not mandate that CAs require proofs of knowledge, and some settings
(typically, decentralized applications such as cryptocurrencies) even exclude CAs and public
key infrastructures by design. Hence, it is highly preferable to design multi-signature schemes
provably secure in the plain public-key model, meaning that participants can create their public
keys locally without the need to register them with a CA or any other central party in order
to participate in the protocol.
The very ﬁrst multi-signature scheme provably secure in the plain public-key model [MOR01]
relies on a dedicated key generation phase run by all potential signers, after which the set
of potential signers is necessarily static and known in advance to veriﬁers. A major step was
made by Bellare and Neven [BN06] who proposed the ﬁrst scheme (later referred to as BN in
this paper) provably secure in the plain public-key model and without a dedicated key setup
protocol.
Key Aggregation. Motivated by the foreseen integration of Schnorr signatures [Sch91] in
Bitcoin [WNR20], Maxwell et al. proposed MuSig [MPSW19], a multi-signature protocol for
Schnorr signatures provably secure in the plain public-key model. A prominent feature of this
scheme (that BN [BN06] was lacking) is key aggregation, meaning that the public keys of all
cosigners can be aggregated into a single public key fpk. As a result, veriﬁers do not need to
aggregate key instead. In fact, veriﬁers do not even need to know thatfpk is an aggregate key and
be given the explicit list of all participants’ public keys anymore, and they can just use the
that signatures for this key are jointly generated by multiple signers. This enhances the privacy
of the signers and allows for a clean separation between simple Schnorr signature veriﬁcation
(understood by ordinary Bitcoin nodes as part of the consensus rules) and the more complex
interactive multi-signature protocol (only supported by Bitcoin wallets that generate MuSig
signatures), which moreover makes it easier to deploy modiﬁcations to the multi-signature
protocol. While these advantages apply directly to the case that funds are jointly controlled
by multiple parties, “Taproot” [WNT20], an extension proposed to be integrated in Bitcoin
2
together with Schnorr signatures, applies the same advantages optimistically also to complex
spending policies (colloquially referred to as smart contracts): in the common case that all
involved parties are willing to cooperate, they can rely on a multi-signature without even
revealing the existence of the smart contract, or even the involvement of more than one party,
to the public.
The MuSig Scheme. Let us recall the Schnorr signature scheme. Given an (additively denoted)
group G of prime order p with generator G, a secret/public key pair is a pair (x, X) ∈ Fp × G
where X = xG. To sign a message m, the signer draws a nonce r uniformly at random in Fp,
computes R = rG, c = Hsig(X, R, m), and s = r + cx mod p, where Hsig is some hash function,
and returns σ = (R, s). A purported signature (R, s) for message m and public key X is valid
iﬀ sG = R + Hsig(X, R, m)X.
key pair (xi, Xi = xiG), is deﬁned as eX =Pn
In MuSig, the aggregate key associated with a group of n signers, each holding a Schnorr
i=1 µiXi, where µi is a coeﬃcient computed by
hashing all participants’ public keys as µi = Hagg({X1, . . . , Xn}, Xi) for some hash function
and sends it to the other signers. Then, each signer computes the aggregate nonce eR =Pn
Hagg. In order to jointly sign some message m, each signer generates a partial nonce Ri = riG
and a partial signature si = ri + cµixi mod p where c = Hsig(eX, eR, m) and sends si to other
signers. The multi-signature is (eR, s) where s =Pn
i=1 Ri
i=1 si. A multi-signature (eR, s) for message
m and aggregate key eX can be veriﬁed exactly as a standard Schnorr signature.
Importantly, signers “commit” to their partial nonce by sending ti ··= Hcom(Ri) in the
initial communication round, where Hcom is a hash function. The ﬁrst version of [MPSW19]
omitted the commitment round (resulting in a 2-round protocol) but it was found by Drijvers
et al. [DEF+19] that the corresponding security proof was ﬂawed. Drijvers et al. further showed
that omitting this commitment round makes the scheme vulnerable to sub-exponential attacks
based on Wagner’s algorithm for the generalized birthday problem [Wag02]. Maxwell et al.
later revised [MPSW19] to provide a security proof for the 3-round version which includes the
commitment round. See also [BDN18] for an independent security proof of 3-round MuSig.
Deterministic Nonces. Discrete logarithm-based signatures are well-known to be vulnerable
to non-uniform generation of the nonce r [NS02, NS03], and there have been plenty of real-world
vulnerabilities and attacks exploiting bad randomness in nonces [HDWH12, BHH+14, CEV14,
Val14, BH19]. In particular, if the same nonce is used to sign two diﬀerent messages, the secret
key can immediately be computed from the two signatures. This can be prevented by using
deterministic nonce generation, meaning the nonce r is computed by applying a pseudorandom
function (PRF) keyed with some secret key k to the message m [Bar97, Wig97, MNPV99,
Por13].3 This method does not only protect against failures in the randomness generation (e.g.,
due to a improperly seeded system PRG) but also against rewinding attacks, in which the
attacker tries to obtain signatures with the same nonce on two diﬀerent messages by resetting
the signing algorithm, which potentially runs in a virtual machine (VM) and precomputes
the nonce before the message is determined. As a side beneﬁt, deterministic nonce generation
allows to easily test implementations of the signature algorithm in a black-box manner using
test vectors.
3 In practice, one often sets k = sk for keying the PRF, as speciﬁed for example in RFC 6979 [Por13], which
uses an HMAC-based PRF.
3
2 6= R2. Alice computes eR0 = R1 + R0
However, as already noted by Maxwell et al. [MPSW19], deterministic nonce generation
is not directly possible with existing multi-signature protocols based on Schnorr signatures
such as MuSig. In fact, when one tries to apply the aforementioned standard method of
generating nonces deterministically in order to improve their robustness against PRG failures
and VM rewinding attacks, the security of these protocols breaks down entirely! Say Alice
and Bob, holding respective keys (x1, X1) and (x2, X2), want to compute a multi-signature
and sends R1 = r1G to Bob who responds with R2 = r2G. Alice computes eR = R1 + R2
on some message m. Alice computes r1 (say, as Fx1(m) for some pseudorandom function F)
and her partial signature s1 = r1 + cµ1x1 mod p where c = Hsig(eX, eR, m) and sends s1 to
Bob. However, Bob chooses not to (or maybe cannot) produce his partial signature and
the protocol aborts. Later, a new signing attempt takes place for the same message and
1 = r1 + c0µ1x1 mod p where c0 = Hsig(eX, eR0, m) and sends s0
Alice again sends R1, but Bob responds with R0
2 and
s0
1 to Bob. Bob (or any adversary
that has eavesdropped the communications between Alice and Bob) can now compute Alice’s
secret key x1 = (s1 − s0
c = Hsig(eX, eR, m) changes. Since eR is a function of all participants’ nonces, this implies a
Hence, each signer must ensure that their secret nonce ri changes unpredictably whenever
circular dependency in the choice of values ri as long as F is deterministic. The standard way to
solve this problem is to add a counter to the input of the function F. To ensure that the same
nonce r1 is never reused, this counter must only ever increase, and thus state must be kept not
only during a protocol session but also between multiple protocol sessions. Implementing such an
increase-only counter securely is notoriously hard and arguably not easier than implementing
a secure pseudorandom number generator. Common pitfalls include the synchronization of
multiple concurrently running signing sessions (on potentially multiple devices), the possibility
to rewind VMs (potentially triggered by an attacker), and users rewinding the state of their
system by restoring backups, e.g., by simply copying ﬁles, using disk imaging tools, or advanced
VM solutions. In particular, cryptographic libraries lacking control over execution environments,
which diﬀer widely across operation systems and hardware, are faced with the diﬃculty of
keeping a permanent state of the counter and typically would need to rely on the library user
to keep the counter state in a proper way.
1)/(µ1(c − c0)).
The aforementioned attack can easily be adapted to work for other multi-signature protocols
based on Schnorr signatures when (ab)used with deterministic nonces, e.g., BN as well as
the protocols by Boneh et al. [BDN18]. Moreover, introducing a KOSK assumption will not
help to prevent the attack. As a result, there is currently no multi-signature scheme based on
Schnorr signatures that can be implemented without access to secure randomness or state at
signing time.
1.2 Our Contribution
We propose a variant of the MuSig scheme called MuSig-DN (MuSig with Deterministic Nonces)
that allows signers to generate nonces deterministically and without having to maintain state.
To this end, signers compute their secret nonce ri by applying a pseudorandom function
F keyed with a secret key ui (that we call nonce key) to the message and all participants’
public keys. Then, they send their public nonce Ri = riG together with a non-interactive
zero-knowledge (NIZK) proof that ri was computed as speciﬁed. This NIZK proof can be
checked by cosigners using a public key Ui (that we call host key) associated with secret nonce
4
key ui. This ensures that, given a set K of participants’ public keys (where a public key now
consists of both a standard Schnorr veriﬁcation key Xi = xiG and a host key Ui) and a message
m, the nonce sent by each participant will be the same for any attempt to run the protocol on
input (K, m). If any signer tries to cheat by sending two diﬀerent nonces, other participants
will detect it (as by soundness of the NIZK proof, at least one of the two nonces will have an
invalid proof) and abort the protocol before sending their partial signature. As opposed to the
nonces which inﬂuence the challenge hash c, each signer can simply derandomize its NIZK
proof securely via a PRF.
While the high-level intuition regarding the security of the scheme is clear, proving it
formally for an arbitrary pseudorandom function F appears surprisingly subtle. Indeed, F
must remain pseudorandom even when the host key U is known. A natural choice is to deﬁne
U as a commitment to the nonce key u. Depending on the properties of the commitment
scheme COM, one runs into the following complications:
If COM is perfectly hiding, then F obviously remains pseudorandom given U. However,
since COM can only be computationally binding, an adversary could potentially send two
distinct nonces with a valid proof without breaking soundness of the NIZK proof system. Since
commitments are never explicitly opened during the protocol, there would be no way for a
reduction to exploit this behavior to break the binding property of COM, unless the NIZK
proof system is a proof of knowledge (PoK), allowing the reduction to extract two distinct
openings u and u0 of the same host key U.
If COM is instead perfectly binding, then for any protocol input (K, m) and any host key
U, there is at most one nonce R for which there exists a valid NIZK proof, as needed. However,
then the commitment can only be computationally hiding, which in turn means that there is,
in general, no guarantee that F is still pseudorandom given U.
Hence, if one wants to work at this level of abstraction, the price to pay is either the reliance
on a stronger type of NIZK proofs (namely, PoKs) or the additional (and likely non-standard)
assumption that F remains pseudorandom given a commitment to the secret key. We note that
it is unclear if the most obvious and most eﬃcient candidates of NIZK PoK systems, which are
constructed using the Fiat-Shamir transform and whose extractability thus relies on rewinding
techniques via the forking lemma, are at all usable in our setting. Since the main argument in
the security proof of the multi-signature scheme relies on rewinding via the forking lemma
as well, and the adversary is allowed to adaptively start a polynomial number of concurrent
signing sessions, we expect to run into “exponential blow up” issues in the simulation as ﬁrst
discovered by Shoup and Gennaro [SG02].
It might also be tempting to rely on a veriﬁable random function (VRF) [MRV99], i.e., a
PRF whose outputs can be publicly veriﬁed: given an output value together with a proof, anyone
can check that the function was correctly evaluated on the corresponding input. However, note
that the output of F is the secret nonce r, which is a scalar, whereas veriﬁers (i.e., cosigners)
are given the public nonce R = rG. Hence, VRFs do not seem directly ﬁt for our setting. What
we need instead and what we will construct could rather be informally described as a “VRF
in the scalar”4, i.e., r is produced pseudorandomly but only R = rG is exposed. This strong
requirement rules out even the VRF by Dodis and Yampolskiy [DY05], which seems suitable
at ﬁrst glance because it outputs a group element VRF(sk, x) = (1/(sk + x))G such that only
the evaluator of the VRF knows the discrete logarithm r = 1/(sk + x) of the group element.
4 Or “VRF in the exponent” if one prefers multiplicative group notation.
5
However for this VRF, only the outputs (1/(sk + x))G are pseudorandom, whereas two scalars
r = 1/(sk + x) and r0 = 1/(sk + x0) can be trivially distinguished from randomness.
In light of these observations, we opt to work at a lower level of abstraction and consider a
speciﬁc way of constructing F that allows us to circumvent the aforementioned diﬃculties. In
particular, we avoid introducing non-standard assumptions and we rely only on the soundness
of the NIZK proofs (instead of their extractability).
The speciﬁc PRF we consider has a simple algebraic structure in order to allow for an
eﬃcient implementation in an arithmetic circuit. Let E be a cyclic group (written additively)
of order q with generator P, which may be diﬀerent from the group G on which the multi-
signature scheme is deﬁned. Let further Hnon:{0, 1}∗ → E be a hash function (where index
‘non’ reﬂects that it will be used for generating the nonce in the multi-signature scheme), and
let f : E → Fp be a suﬃciently “regular” function (meaning that f(A) is close to uniform
when A is uniformly distributed in E). Then F has key space Zq and message space {0, 1}∗
and for u ∈ Zq and z ∈ {0, 1}∗ it is deﬁned as
Fu(z) ··= f(uHnon(z)).
(1)