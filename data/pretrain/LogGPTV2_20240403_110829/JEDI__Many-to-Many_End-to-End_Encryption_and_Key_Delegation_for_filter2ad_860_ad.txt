der the pattern corresponding to the signature, and then at-
tempting to decrypt it using the key acting as a signature. We
1526    28th USENIX Security Symposium
USENIX Association
provide a more efﬁcient signature veriﬁcation algorithm for
this construction of WKD-IBE in our extended paper [57].
4.4 Security Guarantee
The integrity guarantees of the method in this section can be
formalized using a game very similar to the one in Theorem
1, so we do not present it here for brevity. We do, however,
formalize the anonymous aspect of WKD-IBE signatures:
Theorem 2. For any well-formed keys k1, k2 corresponding
to the same (URI, time) pair in the same resource hierarchy,
and any message m ∈ Z∗
p, the distribution of signatures over m
produced using k1 is information-theoretically indistinguish-
able from (i.e., equal to) the distribution of signatures over m
produced using k2.
Immediate Revocation
This implies that even a powerful adversary who observes
the private keys held by all principals cannot distinguish sig-
natures produced by different principals, for a ﬁxed message
and pattern. No computational assumptions are required. We
prove Theorem 2 in the appendix of our extended paper [57].
5 Revocation in JEDI
This section explains how JEDI keys may be revoked.
5.1 Simple Solution: Revocation via Expiry
A simple solution for revocation is to rely on expiration. In
this solution, all keys are time-limited, and delegations are
periodically refreshed, according to a higher layer protocol,
by granting a new key with a later expiry time. In this setup,
the principal who granted a key can easily revoke it by not
refreshing that delegation when the key expires. We expect
this solution to be sufﬁcient for many applications of JEDI.
5.2
Some disadvantages of the solution in §5.1 are that (1) princi-
pals must periodically come online to refresh delegations, and
(2) revocation only takes effect when the delegated key ex-
pires. We would like a solution without these disadvantages.
However, any revocation scheme that does not wait for
keys to expire is subject to set of inherent limitations. The
recipient of the revoked delegation still has the revoked de-
cryption key, so it can still decrypt messages encrypted in the
same way. This means that we must either (1) rely on inter-
mediate parties to modify ciphertexts so that revoked keys
cannot decrypt them, or (2) require senders to be aware of the
revocation, and encrypt messages in a different way so that
revoked keys cannot decrypt them. Neither solution is ideal:
(1) makes assumptions about how messages are delivered,
which we have avoided thus far (§2), and requires trust in an
intermediary to modify ciphertexts, and (2) weakens the de-
coupling of senders and receivers (§1.1). We adopt the second
compromise: while senders will not need to know who are
the receivers, they will need to know who has been revoked.
5.3
We extend tree-based broadcast encryption [37,67] to support
decentralized delegation of decryption keys, and incorporate
Immediate Revocation in JEDI
it into JEDI. We use tree-based broadcast encryption because
it only requires senders to know about revoked users when
encrypting messages, as opposed to all users in the system
(as is required by other broadcast encryption schemes).
5.3.1 Tree-based Broadcast Encryption
Existing work [37, 67] proposes two methods of tree-based
broadcast encryption: Complete Subtree (CS) and Subset
Difference (SD). We focus on the CS method here.
The CS method is based on a binary tree (Fig. 5) where each
node corresponds to a separate keypair. Each user corresponds
to a leaf of the tree and has the secret keys for all nodes on
the root-to-leaf path. To encrypt a message that is decryptable
by a subset of users, one ﬁnds a collection of subtrees that
include all leaves except those corresponding to revoked users
and encrypts the message multiple times using the public keys
corresponding to the root of each subtree. By associating each
node with an ID and encrypting with IBE, one can avoid
generating a separate keypair for each node.
5.3.2 Modifying Broadcast Encryption for Delegation
Users in broadcast encryption do not map one-to-one to users
in JEDI. To avoid confusion, we refer to “users” in broadcast
encryption as “leaves” (abbreviated lf).
We modify the CS method to support delegation, as fol-
lows. Each key corresponds to a range of consecutive leaves.
When a user qualiﬁes a key to delegate to another principal,
she produces a new key corresponding to a subrange of the
leaves of the original key. When a key is revoked, publishers
are informed of the range of leaves corresponding to the re-
voked key. Then, they encrypt new messages using the CS
method, choosing subtrees that cover all leaves except those
corresponding to revoked leaves. If a key is revoked, that key
and all keys derived from it can no longer decrypt messages,
which is a property that we want. Thus, if Alice has k leaves,
she must store secret keys for O(k + logn) nodes, where n is
the total number of leaves (so the depth of the tree is logn).
In JEDI, we reduce this to O(logn) secret keys by using
HIBE. We give each node vi an identiﬁer id(vi) ∈ {0,1}∗ that
describes the path from the root of the tree to that node. In
particular, if v j is an ancestor of vi, then id(v j) is a preﬁx of
id(vi). Note that if we use HIBE with these IDs directly, a
user with the secret key for the root can generate keys for
all nodes in the tree. To ﬁx this, we use a property called
limited delegation, introduced by prior work [17], to generate
a HIBE key that is unqualiﬁable (i.e., cannot be extended).
For example, if Alice has leaves lf3 to lf4 in Fig. 5, she stores
an unqualiﬁable key for node v1 and a qualiﬁable key for node
v3. In general, each user must store O(logk) qualiﬁable keys
and O(logn) unqualiﬁable keys, thus O(logk + logn) total.
5.3.3 Using Delegable Broadcast Encryption in JEDI
Secret keys in our modiﬁed broadcast encryption scheme
consist of HIBE keys, so incorporating it into JEDI is simple.
As discussed in §3.2, JEDI uses WKD-IBE in a way that
provides multiple concurrent hierarchies, each in the vein of
USENIX Association
28th USENIX Security Symposium    1527
v1 : sk1
v2 : sk2
v3 : sk3
v4 : sk4
v5 : sk5
v6 : sk6
v7 : sk7
lf1
lf2
lf3
lf4
Figure 5: Key management of the CS method. Red nodes
indicate nodes associated with revoked leaves. The green
node is the root of the subtree covering unrevoked leaves.
HIBE. Therefore, we can instantiate a third hierarchy of depth
(cid:96)3 = logn and use it for revocation.
Let r be the number of revoked keys. The CS method has
O(r log n
r )-size ciphertexts, so JEDI ciphertexts grow to this
size when revocation is used. When encrypting a message,
senders use the same encryption protocol from §3 for the ﬁrst
(cid:96)1 + (cid:96)2 slots, and repeat the process, ﬁlling in the remaining (cid:96)3
slots with the ID of each node used for broadcast encryption.
The size of secret keys is O(logk + logn) after our modiﬁca-
tions to the CS method, so JEDI keys grow by this factor, to a
total of O((logk + logn)· logT ) WKD-IBE keys, where T is
the length of the time range for expiry.
The construction in this section works to revoke decryption
keys, but cannot be used with anonymous signatures (§4.2).
Extensions of tree-based broadcast encryption to signatures
exist [60, 61], and we expect them to be useful to develop a
construction for anonymous signatures.
How can JEDI inform publishers which leaves are revoked?
One simple option is to have a global revocation list, which
principals can append to. However, storing this information in
a single list becomes a central point of attack, which we have
avoided in our system thus far (§2). To avoid this, one can
store the revocation list in a global-scale blockchain, such as
Bitcoin or Ethereum, which would require an adversary to be
exceptionally powerful to mount a successful attack. When
revoking a set of leaves, a principal uses those keys to sign a
predetermined object (as in §4.2), proving it owns an ancestor
of that key in the hierarchy. To keep the revocation list private,
one can use JEDI’s encryption to ensure that only principals
with permission to publish to a particular resource can see
which keys are revoked for that resource (since publishers too
have signing keys, as described in §4).
5.4 Security Guarantee
The security guarantee for immediate revocation can be stated
as a modiﬁcation to the game in Theorem 1. In the Initial-
ization Phase, when A gives C the challenge (URI, time), A
additionally submits a list of revoked leaves. Furthermore, A
may compromise principals in possession of private keys that
can decrypt the challenge (URI, time) pair during Phases 1
and 2, as long as all leaves corresponding to those keys are in
the revocation list submitted in the Initialization Phase. We
provide a proof in the appendix of the extended paper [57].
5.5 Optimizing JEDI’s Immediate Revocation
A single JEDI ciphertext, with revocation enabled, consists
of O(r log n
r ) WKD-IBE ciphertexts. To compute them efﬁ-
ciently, we observe that there is a large overlap in the patterns
used in individual WKD-IBE encryptions, allowing us to use
the “precomputation with adjustment” strategy from §3.6.2.
Even with the above optimization, immediate revocation
substantially increases the cost of JEDI’s cryptography. To
reduce this cost, we make three observations. First, to extend
JEDI’s hybrid encryption to work with revocation, it is sufﬁ-
cient to additionally rotate keys whenever the revocation list
changes, in addition to the end of each hour (as in §3.6.1). This
means that, in the common case where the revocation list does
not change in between two messages, efﬁcient symmetric-key
encryption can be used. Second, the revocation list used to
encrypt a message need only contain revoked leaves for the
particular URI to which the message is sent. This not only
makes the broadcast encryption more efﬁcient (smaller r), but
also causes the effective revocation list for a stream of data to
change even more rarely, allowing JEDI to beneﬁt more from
hybrid encryption. Third, we can do the same thing as above
using the expiry time rather than the URI, allowing us to cull
the revocation list by removing keys from it once they expire.
The efﬁciency of hybrid encryption depends on the revo-
cation list changing rarely. We believe this is a reasonable
assumption; most revocation will be handled by expiry, so
immediate revocation is only needed if a principal must lose
access unexpectedly. In the smart buildings use case (§1),
for example, a key would need to be revoked if a principal
unexpectedly transfers to another job.
Implementation
The SD method for tree-based broadcast encryption can
also be extended to support delegation and incorporated into
JEDI (described in the appendix of our extended paper [57]),
The SD method has smaller ciphertexts but larger keys.
6
We implemented JEDI as a library in the Go programming
language. We expect JEDI’s key delegation to be computed
on relatively powerful devices, like laptops, smartphones, or
Raspberry Pis; less powerful devices (e.g., right half of Fig. 1)
will primarily send and receive messages, rather than gener-
ate keys for delegation. Therefore, our focus for low-power
platforms was on the “sense-and-send” use case [26, 38, 41]
typical of indoor environmental sensing, where a device pe-
riodically publishes sensor readings to a URI. Whereas our
Go library provides higher-level abstractions, we expect low-
power devices to use JEDI’s crypto library directly.
6.1 C/C++ Library for JEDI’s Cryptography
As part of JEDI, we implemented a cryptography library opti-
mized in assembly for three different architectures typical of
IoT platforms (Fig. 1). It implements WKD-IBE and JEDI’s
optimizations and modiﬁcations (in §3.6, §4.3, and our full
paper). The construction of WKD-IBE is based on a bilinear
1528    28th USENIX Security Symposium
USENIX Association
group in which the Bilinear Difﬁe-Hellman Exponent assump-
tion holds. We use the recent BLS12-381 elliptic curve [24].
State-of-the-art cryptography libraries implement BLS12-
381, but none of them, to our knowledge, optimize for mi-
croarchitectures typical of low-power embedded platforms.
To improve energy consumption, we implemented BLS12-
381 in C/C++, proﬁled our implementation, and re-wrote
performance-critical routines in assembly. We focus on ARM
Cortex-M, an IoT-focused family of 32-bit microprocessors
typical of contemporary low-power embedded sensor plat-
forms [28, 49, 53]. Cortex-M processors have been used in
billions of devices, including commercial IoT offerings such
as Fitbit and Nest Protect. Our assembly targets Cortex-M0+,
which is among the least powerful of processors in the Cortex-
M series, and of those used in IoT devices (farthest to the
right in Fig. 1). By demonstrating the practicality of JEDI
on Cortex-M0+, we establish that JEDI is viable across the
spectrum of IoT devices (Fig. 1).
The main challenge in targeting Cortex-M0+ is that the 32-
bit multiply instruction provides only the lower 32 bits of the
product. Even on more powerful microarchitectures without
this limitation (e.g., Intel Core i7), most CPU time (≥ 80%)
is spent on multiply-intensive operations (e.g., BigInt multi-
plication and Montgomery reduction), so the lack of such an
instruction was a performance bottleneck. As a workaround,
our assembly code emulates multiply-accumulate with carry
in 23 instructions. Cortex-M3 and Cortex-M4, which are more
commonly used than Cortex-M0+, have instructions for 32-bit
multiply-accumulate which produce the entire 64-bit result;
we expect JEDI to be more efﬁcient on those processors.
We also wrote assembly to optimize BLS12-381 for x86-
64 and ARM64, representative of server/laptop and smart-
phone/Raspberry Pi, respectively (ﬁrst two tiers in Fig. 1).
Thus, our Go library, which runs on these non-low-power plat-
forms, also beneﬁts from low-level assembly optimizations.
6.2 Application of JEDI to bw2
We used our JEDI library to implement end-to-end encryption
in bw2, a syndication and authorization system for IoT. bw2’s
syndication model is based on publish-subscribe, explained
in §1. Here we discuss bw2’s authorization model. Access to
resources is granted via certiﬁcate chains from the authority of
a resource hierarchy to a principal. Individual certiﬁcates are
called Declarations of Trust (DOTs). bw2 maintains a publicly
accessible registry of DOTs, implemented using blockchain
smart contracts, so that principals can ﬁnd the DOTs they need
to form DOT chains. A trusted router enforces permissions
granted by DOTs. Principals must present DOT chains when
publishing/subscribing to resources, and the router veriﬁes
them. Note that a compromised router can read messages.
We use JEDI to enforce bw2’s authorization semantics
with end-to-end encryption. DOTs granting permission to
subscribe now contain WKD-IBE keys to decrypt messages.
By default, DOTs granting permission to publish to a URI
1.33 ms
3.86 ms
5.47 ms
5.48 ms