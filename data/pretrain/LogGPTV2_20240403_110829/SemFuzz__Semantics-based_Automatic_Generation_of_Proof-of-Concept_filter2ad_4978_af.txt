### Triggered with Similar Inputs after Some Mutations

We discovered an undisclosed vulnerability while analyzing the flaw reported by CVE-2016-3841, which is a use-after-free vulnerability in the networking subsystem. The CVE description indicates that this vulnerability can be triggered using the `socket` and `sendmsg` system calls. From the corresponding patch code, we identified multiple functions that were patched. Even after filtering using the CVE and git log descriptions, 18 vulnerable functions remained. After successfully generating a PoC exploit, SemFuzz found that the vulnerability was triggered in the `udpv6_sendmsg` function.

During the fuzzing process, SemFuzz mutates the parameter values of the `socket` system call (i.e., `domain` and `protocol`). In one instance, the `domain` was set to `AF_INET` (indicating IPv4) and the `protocol` was set to `IPPROTO_ICMP` (indicating the ICMP protocol). This mutation led to the triggering of another memory-related vulnerability, specifically a null pointer dereference, in the `pingv4_sendmsg` function. We reported this vulnerability to the Linux kernel developer group [8], and they informed us that the bug had already been patched in the latest Linux kernel. However, no publicly released report referred to this bug, so it is considered an undisclosed vulnerability.

### Discussion

#### Vulnerability Type
In this study, SemFuzz is capable of handling 16 types of vulnerabilities, including double free, use-after-free, and memory corruption. However, we do not consider vulnerabilities that require specific devices to trigger or logical vulnerabilities whose abnormal behaviors cannot be directly observed by SemFuzz. These limitations are primarily due to the fuzzer rather than the semantics-based approach. On the contrary, semantic information is highly beneficial, especially for human analysts in generating exploits. For device-specific vulnerabilities, one can emulate the required device with visualization support. For example, CVE-2016-2782 requires a specific USB device lacking a bulk-in or interrupt-in endpoint. With the provided description, tools like vUSBf [21] can be used to emulate such USB devices. For logical vulnerabilities, the description of the violations can guide the construction of detectors based on a basic understanding of the target subsystem. For instance, CVE-2015-8660 describes a logical vulnerability allowing an attacker to bypass intended access restrictions and modify attributes of arbitrary overlay files. Using this description and knowledge of the file system, a detector can be built to check the behavior of file attribute modification in the overlay file system.

#### Vulnerable Targets
In this study, we chose the Linux kernel as the target. Although our approach is specific to the Linux kernel, the fundamental idea of leveraging semantic information to guide fuzzing can be applied to other programs, even those without source code, as long as sufficient guidance is available. For example, CVE-2017-3053 (Adobe Reader) discloses affected versions (e.g., 11.0.19 and earlier), the type of vulnerability (memory address leak), the vulnerable component (image conversion engine), and the trigger conditions (parsing the APP13 segment in JPEG files). This information can be used to guide a file format fuzzer to mutate the JPEG APP13 segment and monitor for memory address leaks in the image conversion engine. Besides CVE, more information can be retrieved from other sources of vulnerability descriptions.

#### Sources of Vulnerability Descriptions
We retrieved guidance from both the CVE descriptions and the Linux git logs. In some cases, a single source of vulnerability descriptions was sufficient. For example, the commit with ID `2b95fda2c4fcb6d6625963f889247538f247fce0` in the Linux git log describes a double free vulnerability. The log provides the vulnerable function (`x509_free_certificate`) and the critical variable (`cert->pub->key`). Additionally, the log includes the call trace, revealing the triggering system call (`add_key`). We found that semantic information can be obtained from one source and verified with others, enhancing fuzzing performance. Other sources, such as FullDisclosure [2], can also provide valuable information. For instance, the source from FullDisclosure contains details about CVE-2016-8655, providing extra guidance not disclosed by CVE and git logs, such as "we can reach packet_set_ring() by calling setsockopt() on the socket using the PACKET_RX_RING option." Future work will involve crawling more descriptions from additional sources.

### Related Work

#### Automatic Exploit Generation
Brumley et al. [28] proposed an automatic method to construct proof-of-concept exploits for input-validation vulnerabilities by finding inputs that fail newly added checks in patches. Avgerinos et al. [26] developed a technique to generate exploits for control flow hijacking attacks by modeling them as formal verification problems. Hu et al. [34] developed a data-flow stitching technique to find ways to join data flows in the program to generate data-oriented exploits. Other studies, such as Chainsaw [24] and CraxWeb [35], focus on automatically generating exploits for SQLI and XSS attacks on web applications. On mobile platforms, Centaur [39] uses symbolic execution of the Android framework for vulnerability discovery and exploit generation. These approaches rely on generating constraints on inputs and using symbolic execution to solve them, leading the program to run to vulnerable functions. However, symbolic execution and constraint solving face challenges with deep program flaws in complex targets (e.g., non-linear constraints, multiple threads). Our study leverages semantics-based fuzzing to support more types of vulnerabilities and uses semantic information from non-code text to guide the fuzzing process effectively.

#### Guided Fuzzing
Traditional fuzzing without guidance suffers from redundant executions, reducing performance. To address this, previous studies have guided the fuzzing process using the running status of a program and the format of inputs. For example, Skyfire [56] uses a data-driven seed generation approach, leveraging knowledge from existing samples to generate well-distributed seed inputs. VUzzer [49] and AFLFast [27] use static control-flow and data-flow analysis to prioritize deep paths and de-prioritize frequent paths when mutating inputs. ArtFuzz [32] dynamically discovers likely memory layouts to guide the fuzzing process. Our study shows that, in addition to the running status, non-code descriptions in CVE and git logs help avoid redundant runs.

#### Semantics-Based Program Analysis
Semantic information has been used in program analysis before. iComment [54] uses NLP to analyze program comments and compares their semantics with the code to detect inconsistencies. aComment [55] extracts annotations from both code and natural language comments to detect interrupt-related concurrency bugs. Developer documents are also a good source for mining knowledge to assist program analysis, such as constructing API models [59], extracting security policies [57], and inferring resource specifications [60]. On mobile platforms, recent studies apply NLP to understand app descriptions for checking unnecessary permissions [47] or unexpected behaviors [33]. Some studies analyze API semantics for cross-platform library mapping [31]. Unlike these, our work is the first to use third-party vulnerability descriptions to guide the generation of PoC exploits.

#### Repository Analysis
Various code mining approaches [37, 38] have been proposed to automatically extract implicit programming rules from source code repositories. Some studies mine software repositories to predict vulnerabilities. Neuhaus et al. [46] use the Mozilla project's vulnerability database to predict vulnerable software components. Meneely et al. [41â€“43] research the correlation between metadata in code repositories (e.g., code churn, lines of code, number of reviewers) and reported vulnerabilities. Studies [48, 51] mine software repositories to discover bug-introducing or fix-inducing commits. Our approach uses code repositories as an information source to generate guidance for fuzzing.

### Conclusions

In this paper, we designed and implemented a semantics-based approach for the automatic generation of proof-of-concept exploits. This end-to-end approach is made feasible by intelligent fuzzing techniques guided by automatically recovered vulnerability-related knowledge from non-code text reports. Running SemFuzz over 112 Linux kernel vulnerabilities, 18 were automatically triggered. Interestingly, SemFuzz also found a zero-day vulnerability and an undisclosed one. Our research extends the automatic exploit generation for simple input-validation vulnerabilities proposed a decade ago to more complex vulnerabilities, including uncontrolled resource consumption, deadlocks, and memory corruption. More importantly, our research provides new insights into how vulnerability-related information is shared today.

### Acknowledgments
The authors would like to thank the anonymous reviewers for their constructive comments. Special thanks to Dmitry Vyukov for his Syzkaller tool and assistance with related issues. IU authors were supported in part by NSF CNS-1223477, 1223495, 1527141, 1618493, and ARO W911NF1610127. IIE authors were supported in part by NSFC U1536106 and 61728209, National Key Research and Development Program of China (Grant No.2016QY04W0805), Youth Innovation Promotion Association CAS, and strategic priority research program of CAS (XDA06010701). RUC authors were supported in part by NSFC 91418206, 61170240, and 61472429.

### Appendix
Table 4 provides a detailed description of the 18 CVEs that can be successfully auto-exploited by SemFuzz. It includes the semantic information retrieved from their CVE descriptions and git logs, such as affected versions, vulnerability types, vulnerable functions, critical variables, and system calls.

### References
[1] 2016. 2016 Financial Industry Cybersecurity Report. https://cdn2.hubspot.net/hubfs/533449/SecurityScorecard_2016_Financial_Report.pdf. (2016).

[2] 2016. FullDisclosure: CVE-2016-8655 Linux af_packet.c race condition (local root). http://seclists.org/oss-sec/2016/q4/607. (2016).

[3] 2016. Kernel: Add KCOV Code Coverage. https://lwn.net/Articles/671640/. (2016).

[4] 2016. Syzkaller. https://github.com/google/syzkaller. (2016).

[5] 2016. Yahoo: Hackers Stole Data On Another Billion Accounts. https://www.forbes.com/sites/thomasbrewster/2016/12/14/yahoo-admits-another-billion-user-accounts-were-leaked-in-2013. (2016).

[6] 2017. Application Vulnerability: Trend Analysis and Correlation of Coding Patterns across Industries. https://www.cognizant.com/whitepapers/Application-Vulnerability-Trend-Analysis-and-Correlation-of-Coding-Patterns-Across-Industries.pdf. (2017).

[7] 2017. Bug 195709. https://bugzilla.kernel.org/show_bug.cgi?id=195709. (2017).

[8] 2017. Bug 195807. https://bugzilla.kernel.org/show_bug.cgi?id=195807. (2017).

[9] 2017. Common Vulnerabilities and Exposures. https://cve.mitre.org. (2017).

[10] 2017. Common Weakness Enumeration. https://cwe.mitre.org. (2017).

[11] 2017. CWE: Improper Input Validation. https://cwe.mitre.org/data/definitions/20.html. (2017).

[12] 2017. FullDisclosure Mailing List. http://seclists.org/fulldisclosure. (2017).

[13] 2017. Information Security Resources. https://www.sans.org/security-resources/blogs. (2017).

[14] 2017. Krebs on Security. https://krebsonsecurity.com. (2017).

[15] 2017. Linux Kernel Git Repositories. https://git.kernel.org. (2017).

[16] 2017. Linux man pages online. http://man7.org/linux/man-pages/index.html. (2017).

[17] 2017. National Vulnerability Database. https://nvd.nist.gov. (2017).

[18] 2017. pyStatParser. https://github.com/emilmont/pyStatParser. (2017).

[19] 2017. STP Constraint Solver. http://stp.github.io. (2017).

[20] 2017. Vulnerability. https://en.wikipedia.org/wiki/Vulnerability_(computing). (2017).

[21] 2017. vUSBf. https://github.com/schumilo/vUSBf. (2017).

[22] 2017. WannaCry Ransomware Attack. https://en.wikipedia.org/wiki/WannaCry_ransomware_attack. (2017).

[23] 2017. What is CVE and How Does It Work? https://www.csoonline.com/article/3204884/application-security/what-is-the-cve-and-how-does-it-work.html. (2017).

[24] Abeer Alhuzali, Birhanu Eshete, Rigel Gjomemo, and VN Venkatakrishnan. 2016. Chainsaw: Chained Automated Workflow-Based Exploit Generation. In Proceedings of the 23rd ACM Conference on Computer and Communications Security (CCS 2016). ACM, 641â€“652.

[25] Frances E Allen. 1970. Control Flow Analysis. In ACM SIGPLAN Notices, Vol. 5. ACM, 1â€“19.

[26] Thanassis Avgerinos, Sang Kil Cha, Alexandre Rebert, Edward J Schwartz, Maverick Woo, and David Brumley. 2014. Automatic Exploit Generation. Commun. ACM 57, 2 (2014), 74â€“84.

[27] Marcel BÃ¶hme, Van-Thuan Pham, and Abhik Roychoudhury. 2016. Coverage-Based Greybox Fuzzing as Markov Chain. In Proceedings of the 23rd ACM Conference on Computer and Communications Security (CCS 2016). ACM, 1032â€“1043.

[28] David Brumley, Pongsin Poosankam, Dawn Song, and Jiang Zheng. 2008. Automatic Patch-Based Exploit Generation is Possible: Techniques and Implications. In Proceedings of the 29th IEEE Symposium on Security & Privacy (S&P 2008). IEEE, 143â€“157.

[29] Yan Cai and Lingwei Cao. 2015. Effective and Precise Dynamic Detection of Hidden Races for Java Programs. In Proceedings of the 10th Joint Meeting on Foundations of Software Engineering (ESEC/FSE 2015). ACM, 451â€“462.