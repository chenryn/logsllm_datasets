As part of emulating shadow DOM, we have to implement a solution for _loading_
CSS inside of components.
#### Embedding style rules directly into the component template is undesirable
  * Makes templates harder to read
  * Makes it much harder to use CSS pre-processors (sass, less)
  * Would lead to duplicating "common" styles
#### Problems
  * The `` element (the normal way of loading CSS) is inert in shadow DOM.
  * CSS `@import` is generally frowned upon for performance reasons.
#### Opportunity
Since Angular will control how styles are actually rendered for a component
(because of shadow DOM emulation), we can extend There are other ideathe
process to give component authors more power.
### Proposal
Angular core implements a directive to include a style file via URL. For
discussion's sake, let's call this `` (it will probably end up being
something like `` or ``, though):
    ...
When `ng-style` is used in a Component with native shadow DOM, the output
`` element is rendered inside of the shadow DOM for each component.
When using emulated shadow DOM, one common`` element is added to the
document head for all component instances.
`ng-style` can also be used to provide component authors a means through which
to apply some arbitrary transformation to the embedded style. This could look
vaguely something like:
    ...
    class MaterialThemeTransformer {
      transform(input: string): string {
        // do some transformation
      }
    }
This is purposefully hand-waving a lot of details, but I just want to get the
idea across. The main use-case I have in mind for this is creating style rules
that are defined in terms of some theme (e.g, `background-color:
{{primaryColor}}`)
This would let people do whatever arbitrary transformation on the incoming
rules, including applying sass or less on the fly (if you wanted to do that
for some reason). If CSS shimming is enabled, that process would occur after
any user-defined transformations. The CSS shim itself could potentially just
be another transform.
#### Other notes
It's possible that this mechanism doesn't have to be so tightly coupled to
styles, and could instead just be a part of how interceptors/transforms work
for all http requests, depending on how http support looks when it's built.