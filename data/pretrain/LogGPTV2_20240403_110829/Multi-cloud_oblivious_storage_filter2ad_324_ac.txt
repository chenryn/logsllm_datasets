These shuﬄed blocks now form level (cid:96) + 1 of the same
partition, and reside on S2. Levels 0, . . . , (cid:96) on S1 of partition
p are deleted and future requests for level (cid:96) of partition p
are directed to S2.
Shuﬄing the top level. The only exception is when all
levels 0..L−1 are shuﬄed, i.e., when the top level is involved
in the shuﬄe. In this case, some dummy or obsolete blocks
need to be discarded during the shuﬄe. Therefore, a top-
level shuﬄe needs to be treated slightly diﬀerently, where the
client tells S1 (i.e., source of the shuﬄe) a subset of blocks
to keep for each level — without leaking any information.
The detailed protocol is described in Figure 4.
Note that almost all of the bandwidth consumed happens
when the two clouds exchange blocks, and the client’s band-
width is conserved.
3.6 Onion Encryption Layers
Key generation. The client shares a master secret key
msk 1 with cloud S1; and msk 2 with cloud S2.
Onion encryption. Whenever a cloud, say S1, needs to
onion encrypt a block, it generates a pseudo-random one-
time encryption key based on msk 1, the time value for the
partition under consideration, and the block’s position tuple
pos(cid:48) after the shuﬄe1.
1For read-phase shuﬄes, we use the block’s position prior to
shuﬄe.
251ReadPartition(p∗, u):
(p∗, (cid:96)∗, oﬀset∗) ← pos(u)
For j ∈ {1, 2} : Sj : Bi ←(cid:8)BlockAt [p∗, (cid:96), oﬀset (cid:96)] : ∀ ﬁlled level (cid:96) in partition p∗ on Sj
C :
C : Let oﬀset (cid:96)∗ := oﬀset∗. For (cid:96) (cid:54)= (cid:96)∗, let oﬀset (cid:96) = GetNextDummy(p∗, (cid:96))
(cid:9)
// The GetNextDummy function returns the position of a random unread dummy in the level
{oﬀset (cid:96) : for each ﬁlled level (cid:96) in partition p∗ ∈ Sj}
// ﬁnd out where block u resides.
For j ∈ {1, 2} : C → Sj :
2[i] := Eek [i](B2[i]) where ek [i] := PRFmsk 2 (i, p∗, t,“read-enc-A”)
// Without loss of generality, assume S2 has fewer ﬁlled levels.
S2 → S1 : B(cid:48)
S2 : ∀i ∈ |B2| : B(cid:48)
S1 : B := B1 ∪ B(cid:48)
S1 : ∀i ∈ |B| : B(cid:48)[PRPsk (i)] := Eek [i](B[i])
2
2
where sk := PRFmsk 1 (p∗, t,“read-shuﬄe”), ek [i] := PRFmsk 1 (i, p∗, t,“read-enc-B”)
i = (oﬀset of block u in B(cid:48))
// C can compute this with msk 1 and msk 2
S1 → S2 : B(cid:48)
C → S2 :
S2 → C : B(cid:48)[i]
For j ∈ {1, 2} : Sj → C : “Done”
WritePartition(p∗, B):
/* Without loss of generality, assume that cloud 1 needs to shuﬄe (cid:96) consecutive levels and send to cloud 2. Assume that the block to
be written B has been encrypted by the client using a secret key known only to itself.*/
Case 1: (cid:96) < L − 1
C → S1:
“Write partition”, p∗, B
S1: B ← BlocksAt[p∗, 0..(cid:96)] ∪ {B}
S1:
∀i ∈ |B| : do
Let i(cid:48) = PRPsk (i), B(cid:48)[i(cid:48)] := Eek [i](B[i])
where sk := PRFmsk 1 (p∗, t,“write-shuﬄe”),
ek [i] := PRFmsk 1 (pos(cid:48), t,“write-enc”)
// pos(cid:48) is B[i]’s position after the shuﬄe
// pos(cid:48) can be computed given i(cid:48)
done
S1 → S2: B(cid:48)
S1 → C:
S2 → C:
“Done.”
“Done.”
S2: BlocksAt[p∗, (cid:96) + 1] ← B(cid:48)
Case 2: (cid:96) = L − 1
C → S1: “Write partition”, p∗, B
C: I ← ∅
For each level i = 0 to L − 1:
let Ir := {positions of all unread real blocks},
let Id := {positions of 2i − |Ir| randomly
chosen unread dummy blocks},
I ← I ∪ (Ir ∪ Id)
C → S1: sorted(I)
S1 : B ← BlocksAt[I] ∪ {B}
S1: ∀i ∈ |B| : do
Let i(cid:48) = PRPsk (i), B(cid:48)[i(cid:48)] := Eek [i](B[i])
where sk := PRFmsk 1 (p∗, t,“write-shuﬄe”),
ek [i] := PRFmsk 1 (pos(cid:48), t,“write-enc”)
// pos(cid:48) is B[i]’s position after the shuﬄe
// pos(cid:48) can be computed given i(cid:48)
done
S1 → S2: B(cid:48)
S1 → C: “Done.”
S2 → C: “Done.”
S2: BlocksAt[p∗, L − 1] ← B(cid:48)
C: Update local metadata appropriately.
C: Update local metadata appropriately.
Figure 4: Partition read and write algorithms for the honest-but-curious model.
Whenever a cloud, say S1, needs to shuﬄe a set of blocks,
it generates a pseudo-random one-time shuﬄing key based
on msk 1, the current partition, and its the time value.
Onion decryption and background onion removal.
The client can recover all encryption keys and decrypt any
onion-encrypted block. The details of this is deferred to the
full online version [29] for our full construction — which is
based on the basic construction described in this section, but
augmented to provide security when one of the two clouds
is malicious.
4. SECURITY AGAINST ONE MALICIOUS
CLOUD
Informally, a malicious server can 1) corrupt data in stor-
age; and 2) deviate from the prescribed protocol, particu-
larly, not performing shuﬄing correctly.
Corrupted data blocks can be detected through standard
techniques such as message authentication codes (MAC), as
described in several earlier works [11, 31]. Therefore, we
focus our attention on how to detect deviations from the
prescribed protocol behavior.
High-level idea. The high-level idea is as follows. The
client has two secret checksum functions σ1 and σ2. σ1 is
shared with cloud S1, and σ2 is shared with cloud S2. The
client attaches encrypted and authenticated version of the
two checksums, denoted ˜σ1(B) and ˜σ2(B) to each block B
and stored on the servers along with the block. The check-
sums are encrypted and authenticated with a private key
that only the client knows.
The client treats the checksums the analogously to the
way the clouds treats the blocks. For example, whenever a
cloud permutes a set of blocks, the client will permute the
corresponding checksums. Whenever a cloud adds an onion
layer of encryption to a block, the client will compute the
252S1: B(cid:48) ← onion-encrypt and shuﬄe B.
// Let π denote the shuﬄing permuta-
tion.
S1 → S2: B(cid:48)
{˜σ1(B) and ˜σ2(B) : ∀B ∈ B}
S1 → C:
{σ2(B(cid:48)): ∀B(cid:48) ∈ B(cid:48)}
S2 → C:
∀B ∈ B: σ1(B) := Decrypt ˜σ1(B)
C:
σ2(B) := Decrypt ˜σ2(B)
C: Verify that gek i (σ2(Bi)) = σ2(B(cid:48)
C: Compute σ1(B(cid:48))
π(i)) for
0 ≤ i < |B| = |B(cid:48)| where ek i is the time
and position dependent one-time encryp-
tion key (for block Bi known only to C
and S1).
from σ1(B)
for all
blocks.
∀B(cid:48) ∈ B(cid:48) : ˜σ1(B(cid:48)) := Encrypt & authen-
ticate σ1(B(cid:48))
{˜σ1(B(cid:48)) : ∀B(cid:48) ∈ B(cid:48)}
C:
C → S2:
Figure 5: Verifying shuﬄing and onion-encryption
performed by cloud S1. The protocol is symmetric and
the same veriﬁcation can be done with for S2 by swapping
the roles of S1 and S2. The veriﬁcation is bandwidth eﬃcient
in that the client only needs to transfer checksums and not
the blocks themselves. Encryption and authentication of the
checksums is performed using a secret key known only to the
client.
checksum for the onion-encrypted block from its old check-
sum. After updating a checksum and before uploading it
back to the clouds, the client always re-encrypts it and re-
authenticates it using authenticated encryption.
Suppose Cloud S1 onion encrypts and shuﬄes a set of
blocks and sends them to S2. The client can verify that
S1 did this correctly by asking S2 to compute and send the
checksums of the shuﬄed and onion-encrypted blocks it re-
ceived from S1. The client can then verify the checksums it
received from S2 against the ones it computed directly from
the checksums of the old blocks (before shuﬄing and onion
encryption).
Detailed algorithm. Figure 5 describes in more detail
how the client can verify that a set of blocks have been
correctly shuﬄed and onion-encrypted by cloud S1. The
same protocol can be run with S1 and S2 interchanged to
verify shuﬄing and onion encryption performed by S2. We
prove the security of this veriﬁcation algorithm in the full
online version [29].
In order make the veriﬁcation in Figure 5 possible, our
checksum construction is designed to have the following prop-
erties.
Commutative checksum/encryption construction. The
client can compute the new checksum of a block (after onion
encryption by S1) from an old checksum (before onion en-
cryption by S1), without having to download the block itself.
In other words, for j ∈ {1, 2}, there is an eﬃciently com-
putable function gek taking the encryption key ek as the
key, such that
gek (σj(B)) = σj(Eek (B))
(1)
Unforgeability of checksum function. For the above
construction to be secure, the checksum function σ needs
to satisfy the following unforgeability property: when the
checksum function σ is kept secret from an adversary (i.e.,
one of the clouds), and the adversary has not observed any
input-output pairs, then, the adversary cannot ﬁnd a pair
B (cid:54)= B(cid:48) such that σ(B) = σ(B(cid:48)) except with negligible
probability. Note that our checksum function is not a hash
function in the traditional sense, since for a traditional hash
function, the description of the function is public.
Intuitively, this property ensures that S1 cannot deviate
from the shuﬄing protocol: suppose that after a shuﬄe from
S1 to S2, the correct block at permuted index i(cid:48) should be
B(cid:48). If S1 sent to S2 some other B∗ (cid:54)= B(cid:48) for index i(cid:48), then
σ2(B(cid:48)) (cid:54)= σ2(B∗) except with negligible probability. Hence,
the client can immediately detect such deviation.
This property can be formalized as below, and is used as a
building block in our full proof in the full online version [29].
Definition 1
(Unforgeability). We say that a check-
sum function family Σ has our special collision resistance
property if for all adversaries A (even when A is computa-
tionally unbounded),
(cid:20) Pick random σ from Σ;
(B0, B1) ← A(1λ)
Pr
(cid:21)
:
σ(B0) = σ(B1)
∧ B0 (cid:54)= B1
= negl(λ)
4.1 Commutative Checksum-Encryption Con-
struction
Counter mode of AES encryption. We use counter
mode of AES encryption. To encrypt a block B ∈ {0, 1}β,
with a one-time key ek ∈ {0, 1}κ where κ is 128 bits or 256
bits, compute the ciphertext R ⊕ B where R is deﬁned as
R := preﬁx (AESek (0)||AESek (1)||AESek (2) . . .)
(2)
In the above preﬁx denotes the function that takes the
ﬁrst β bits of the string input. This is a secure one-time
encryption scheme, since each ek is used to encrypt only
one message.
Checksum construction. Let σ : {0, 1}β → {0, 1}λ de-
note our specially constructed checksum function, where β
is the block size, and λ is the security parameter with a typ-
ical choice of 128. Our checksum function σ is deﬁned by a
λ × β matrix M ∈ {0, 1}λβ, where λ is the number of rows,
and β is the number of columns. Each entry in the matrix
is a bit picked at random from {0, 1}. Checksuming a block
is simply a matrix multiplication operation:
σ(B) := M · B (mod 2)
Commutative property of checksum-encryption com-
bination. Given an encryption key ek , and a previous
checksum σ, we deﬁne a veriﬁcation function g taking ek
and σ as inputs:
gek (σ) := σ ⊕ (M · R)
(3)
where the vector R is deﬁned as in Equation (2) — taking
ek as input.
Lemma 1. The above encryption and checksum combina-
tion satisfy Equation (1) for any ek ∈ {0, 1}κ, and any block
B ∈ {0, 1}β,
Proof. Note that XOR denoted ⊕ is simply addition
mod 2. Let R ∈ {0, 1}β be a function of ek as deﬁned
253by Equation (2). Therefore,
gek (σ(B)) = σ(B) ⊕ (M · R)
=(M · B) ⊕ (M · R) = M · (B ⊕ R) = σ(Eek (B))
Lemma 2
(Security of checksum function). Our
checksum function is secure by Deﬁnition 1.
The proof of this lemma is deferred to the full online ver-
sion [29].
Authenticated encryption of checksums. As mentioned
earlier, our checksum function is secure only when an adver-