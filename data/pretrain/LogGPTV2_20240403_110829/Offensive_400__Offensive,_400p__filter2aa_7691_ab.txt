        public static function l1l1lI(_arg1:ByteArray, _arg2:String):ByteArray{
            var _local9:int;
            var _local3:* = 0;
            var _local4:ByteArray = new ByteArray();
            var _local5:String = l1I1lI(4);
            var _local6:String = l1I1lI(5);
            var _local7:String = l1I1lI(8);
            var _local8:String = l1I1lI(9);
            _local3 = 0;
            while (_local3  (_arg2[_local7] - 1)){
                    _arg2 = (_arg2 + _arg2);
                };
                _local9 = (_arg1[_local3] ^ _arg2[_local8](_local3));
                var _local10 = _local4;
                _local10[_local5](_local9);
                _local3++;
            };
            _local4[_local6] = 0;
            return (_local4);
        }
    }
}//package tmctf
```
Obfuscation here was taken to another level - for example, strings are ovbfuscated (quite simply - function l1I1lI removes every digit from string, so for example "6l.6o3a3d63.B3.y6t263.e5s6" changes to "loadBytes"), and function and attribute accesses are obfusacated (for example xxx.length is changed to xxx['length'], and with both techniques combined, to xxx[l1I1lI("6l2e6n6.g4t4.3h6")].
After all, main loop is xoring blob extracted from resources with key (key is equal to getA() + getB() + getC() + getD() from previous stage).
I did it (after rewriting core to python), and I get... another swf. So I decompiled it, again... And that's what I get:
```actionscript
YOLO = function() {
    var vrsntk = "Akstoniskrov";
    var aeiVra = "saKrXVoiceda";
    var createTi = "wisTtentgaoemric";
    var mLtoonq = "qdnpokostELim";
    var getDate = "TettnagDotmeig";
    var getMonth = "ahsttnnogMotmeig";
    var toString = "BgknUimrPtXSloot";
    var length = "IhntAgenSeol";
    var fromCharCode = "teodSotCrrianhgCFmroormf";
    var eval = "Sloarvee";
    function Main()
    {
        var currDate = new Date();
        var someConst = 1862628783;
        var mnth = currDate[this.gs(getMonth)]();
        var dayy = currDate[this.gs(getDate)]();
        var modCurrMonth = 2;
        var modCurrDay = 30;
        var cheeeck = someConst[this.gs(toString)](2)[this.gs(length)] - 1;
        if(modCurrMonth * modCurrDay != cheeeck * 2)
        {
            console.log(modCurrMonth);
            console.log(modCurrDay);
            console.log(cheeeck * 2);
            console.log('nope');
            //return;
        }
        var arrWIthData = [122,109,126,44,104,109,120,109,49,46,66,93,98,(..........a lot of numbers.........),60,46,50,43,37,55];
        var resultxx = "";
        var getChrCode = this.gs(fromCharCode);
        var indexl = 0;
        while(indexl  0 / 2)
        {
        _loc2_ = _loc2_ + param1["charAt"](_loc3_ - 1);
        _loc3_ = _loc3_ - 2;
        }
        return _loc2_;
    }
    Main()
}
YOLO()
```
This is code after *serious* deobfuscation - originally all names was obfuscated and there were no human-readable strings. As you can see, data is encrypted with current data, but luckili there was another check - month * day == 50 - that reduced number of possibilities to check to only few. Thanks to this, I could check every possibility by hand, and I got this:
```javasctipt
var data="NQn5pSETMmg6ysiZ7M7kImT1fb0cNrAV3cutq3Ht17idKv4......"
var key="nky";
var str=window.atob(data);
var s=[], j=0, x, res='';
for (var i=0; i');
```
This code is after minimal deobfuscation. I had problems with executing this code (it showed me empty page and nothing more), but luckily friend from team executed this code and volia, we get the flag:
![](flag.png)
###PL version
Wchodzimy na stronę na której na pierwszy rzut oka nic nie ma (pseudo-blog). Rzuca się w oczy jedynie jakiś javascript na dole strony (nazwany "ads.js"). Po deobfuskacji wyglądał mniej więcej tak:
```javascript
var mnt = function() {
	window.host = location.host;
	window.scheme = 'http://';
	window.getLicenseUrl = function() {
		console.log('getting lic url')
		var ax = document.getElementsByTagName('img');
		for (var i = 0; i > 8 & 255, SKOx >> 16 & 255, SKOx >> 24 & 255);
    return nojMia;
}
main(realMain, 'oU5qRoGfenAszlAOKYBE')
```
To kod już po mojej częściowej deobfuskacji (zmiana nazw kilku funkcji, beautifikacja, etc) i wycięciu checków. Tutaj podobnie jak w poprzednim przypadku, wystarczyło wyciąć kilka checków i dodać `console.log(plZla)` zamiast `eval(plZla)`.
Dzięki temu otrzymałem kolejny stage.
```javascript
if (document.referrer != "") {
    var iframe = document.createElement("iframe");
    iframe.src = "depress-choose-opportunity-staircase.html";
    iframe.frameBorder = 0;
    iframe.width = "1";
    iframe.height = "1";