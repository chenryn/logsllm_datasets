of authorities. The notation [g] denotes the execution the procedure and [c]
denotes the execution of the checker.
Coconut Ethereum smart contract library
Operation
Create
Verify
µ [ms]
27.45
120.17
√σ2 [ms]
± 3.054
± 25.133
gas
∼ 23, 000
∼ 2, 150, 000
TABLE VI: Timing and gas cost of the Ethereum implementation of the
Coconut smart contract library described in Section IV-B. Measured over 100
runs, for one public attribute. The transactions are independent of the number
of authorities.
Python naively binding to C libraries, while in Ethereum
arithmetic is deﬁned in solidity and executed by the EVM.
We also observe that the Verify function has a signiﬁcantly
higher gas cost than Create. This is mostly due to the imple-
mentation of elliptic curve multiplication as a native Ethereum
smart contract—the elliptic curve multiplication alone costs
around 1, 700, 000 gas, accounting for the vast majority of the
gas cost, whereas the pairing operation using the pre-compiled
contract costs only 260,000 gas. The actual ﬁat USD costs
corresponding to those gas costs, ﬂuctuate wildly depending
on the price of Ether—Ethereum’s internal value token—the
load on the network, and how long the user wants to wait for
the transaction to be mined into a block. As of February 7th
2018, for a transaction to be conﬁrmed within 6 minutes, the
transaction fee for Verify is $1.74, whereas within 45 seconds,
the transaction fee is $43.5.16
The bottleneck of our Ethereum implementation is the
high-level arithmetic in G2. However, Ethereum provides a