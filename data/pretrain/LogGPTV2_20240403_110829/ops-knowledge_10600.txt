It seems like you are experiencing issues with your virtual environment (venv) on Windows 7, where the system is still using the global Python packages instead of the ones in your venv. Additionally, the `workon` command from the virtualenvwrapper is not activating the venv as expected. Hereâ€™s a more detailed and coherent version of your issue and solution:

---

**Issue:**
- I have set up a virtual environment using `virtualenv`, but when I run Python, it still uses the packages installed in the global site-packages directories (`C:\Python27\site-packages` or `C:\Python34\site-packages`) instead of the ones in my venv.
- When I try to install packages using `pip` within my venv, it shows that the package is already installed, and the installation path points to the global site-packages directory.
- The `workon` command from `virtualenvwrapper` works, but it does not activate the venv as expected.
- This issue occurs both in PowerShell and Git Bash on Windows 7.

**Solution:**
- To resolve this, I re-aliased `pip` and started over by creating a new virtual environment.
- I used the `--force-reinstall` option with `pip` to reinstall all packages, including those in the venv.
- After these steps, the virtual environment worked as expected, and the `workon` command activated the venv correctly.

**Steps to Reproduce the Solution:**

1. **Re-alias `pip`:**
   - Ensure that the `pip` command in your venv is not pointing to the global `pip`. You can check this by running:
     ```sh
     which pip
     ```
   - If it points to the global `pip`, you may need to re-alias it. In your venv, you can do this by adding the following line to your shell configuration file (e.g., `.bashrc` for Git Bash):
     ```sh
     alias pip='python -m pip'
     ```

2. **Create a New Virtual Environment:**
   - Remove the existing venv if it exists:
     ```sh
     rm -rf my_venv
     ```
   - Create a new venv:
     ```sh
     virtualenv my_venv
     ```

3. **Activate the Virtual Environment:**
   - For Git Bash:
     ```sh
     source my_venv/Scripts/activate
     ```
   - For PowerShell:
     ```sh
     .\my_venv\Scripts\Activate
     ```

4. **Reinstall Packages:**
   - Use the `--force-reinstall` option to ensure that all packages are installed in the venv:
     ```sh
     pip install --force-reinstall <package_name>
     ```

5. **Verify Installation:**
   - Check that the packages are installed in the venv's site-packages directory:
     ```sh
     pip list
     ```

6. **Use `workon` Command:**
   - Ensure that the `workon` command is working as expected:
     ```sh
     workon my_venv
     ```

By following these steps, you should be able to resolve the issue and have your virtual environment working correctly.

---

I hope this helps! If you have any further questions or need additional assistance, feel free to ask.