# Title: Effective and Light-Weight Deobfuscation and Semantic-Aware Attack Detection for PowerShell Scripts

## Authors:
- Zhenyuan Li, Zhejiang University, PI:EMAIL
- Qi Alfred Chen, University of California, Irvine, PI:EMAIL
- Chunlin Xiong, Zhejiang University, PI:EMAIL
- Yan Chen, Northwestern University, PI:EMAIL
- Tiantian Zhu, Zhejiang University of Technology, PI:EMAIL
- Hai Yang, MagicShield Inc, PI:EMAIL

## Abstract
In recent years, PowerShell has been increasingly reported as a tool in various cyber attacks, including advanced persistent threats, ransomware, phishing emails, cryptojacking, financial threats, and fileless attacks. However, the dynamic nature of the PowerShell language, which allows for the construction of script pieces at different levels, makes it inherently vulnerable to obfuscations, thereby challenging state-of-the-art static analysis-based detection methods.

To address this challenge, we present the first effective and light-weight deobfuscation approach for PowerShell scripts. Our method, based on a novel subtree-based deobfuscation technique, detects and recovers obfuscated script pieces at the level of subtrees in the abstract syntax tree (AST). This approach significantly enhances the precision of identifying recoverable script pieces.

Building on this deobfuscation method, we have also developed the first semantic-aware attack detection system for PowerShell. We leverage the classic objective-oriented association mining algorithm to identify 31 semantic signatures for PowerShell attacks. Our evaluation, conducted on a dataset of 2342 benign and 4141 malicious samples, demonstrates that our deobfuscation method takes less than 0.5 seconds on average and increases the similarity between obfuscated and original scripts from 0.5% to approximately 80%. Additionally, applying our deobfuscation method substantially improves the detection rates of Windows Defender and VirusTotal, from 0.3% and 2.65% to 75.0% and 90.0%, respectively. Our semantic-aware attack detection system achieves a 92.3% true positive rate and a 0% false positive rate, outperforming both Windows Defender and VirusTotal.

## CCS Concepts
- Security and privacy → Malware and its mitigation; Systems security.

## Keywords
PowerShell, deobfuscation, abstract syntax tree, semantic-aware

## ACM Reference Format
Zhenyuan Li, Qi Alfred Chen, Chunlin Xiong, Yan Chen, Tiantian Zhu, and Hai Yang. 2019. Effective and Light-Weight Deobfuscation and Semantic-Aware Attack Detection for PowerShell Scripts. In 2019 ACM SIGSAC Conference on Computer and Communications Security (CCS '19), November 11–15, 2019, London, United Kingdom. ACM, New York, NY, USA, 17 pages. https://doi.org/10.1145/3319535.3363187

## 1 Introduction
PowerShell is a powerful administration scripting tool with an object-oriented, dynamically-typed scripting language [36]. Its popularity among programmers has grown due to Microsoft's open-source strategy [4]. Unfortunately, attackers have also recognized the advantages of PowerShell, as it is pre-installed on most Windows computers, provides direct access to privileged system functions, and can be executed directly from memory, making it completely fileless. Symantec's white paper "The Increased Use of PowerShell in Attacks" [65] highlighted this trend, and subsequent reports mentioned PowerShell 64 times in five white papers over two years, covering topics such as ransomware, phishing, cryptojacking, financial threats, and fileless attacks [59].

State-of-the-art PowerShell attack detection approaches primarily use static analysis to match string-level signatures, either manually or through machine learning algorithms [55, 26, 32, 53]. While these methods are efficient and offer high code coverage, they are inherently vulnerable to obfuscations. For instance, experiments with classic obfuscation techniques like randomization, string manipulation, and encoding on malicious PowerShell scripts show that state-of-the-art antivirus engines in VirusTotal [11] can be easily bypassed. Therefore, an effective and light-weight deobfuscation solution is crucial for enhancing defense against PowerShell attacks, including detection, analysis, and forensics.

However, achieving effective and light-weight deobfuscation for script languages remains an unsolved research problem. Table 1 compares representative existing deobfuscation approaches in terms of obfuscation detection accuracy, recovery quality, and overhead. The PSDEM approach [41] by Liu et al. manually examined different PowerShell obfuscation techniques and designed targeted deobfuscation solutions, but it suffers from high false-positive rates and cannot cover unknown obfuscation techniques. The JSDES approach [13] focuses on function-based obfuscation in JavaScript and is limited in detecting obfuscation done purely by basic operations [66]. Lu et al. [42] proposed a dynamic analysis and program slicing method for JavaScript, but it has limited code coverage and is less light-weight than static analysis-based approaches like PSDEM.

To address this gap, we design the first effective and light-weight deobfuscation approach for PowerShell scripts. Our key insight is that obfuscated script pieces must be recovered to their original form before execution. By locating all pairs of obfuscated script pieces and their corresponding recovery logic, we can emulate the recovery process and reconstruct the entire script. To achieve this, we propose a novel subtree-based deobfuscation method that performs obfuscation detection and emulation-based recovery at the level of subtrees in the PowerShell AST, the minimum unit of obfuscation. A machine learning classifier is used to classify whether a given subtree is obfuscated, and for obfuscated subtrees, we traverse them in a bottom-up order to identify and recover the script pieces.

Our deobfuscation approach exposes the semantics of PowerShell scripts, enabling us to design the first semantic-aware attack detection system. We use the classic Objective-Oriented Association (OOA) mining algorithm to extract frequently appearing command and function sets, called OOA rules, for semantic signature matching. Applying this to a collection of malicious PowerShell scripts, we identified 31 OOA rules for PowerShell attacks.

Our evaluation, using 2342 benign samples from GitHub and 4141 malicious samples from security blogs, attack analysis white papers, and open-source repositories, shows that our deobfuscated scripts have an average similarity of around 80% to the original scripts, compared to only 0.5% before deobfuscation. Our approach takes less than 0.5 seconds on average to deobfuscate scripts with an average size of 5.4 Kilobytes, demonstrating high efficiency.

Furthermore, our deobfuscation approach significantly improves the effectiveness of PowerShell attack detection. With our deobfuscation applied, the true positive detection rates for Windows Defender and VirusTotal increase from 0.3% to 75.0% and from 2.65% to 90.0%, respectively, with 0% false-positive rates. Our semantic-aware attack detection system outperforms both Windows Defender and VirusTotal, achieving a 92.3% true positive rate and a 0% false-positive rate.

### Contributions
- We design the first effective and light-weight deobfuscation approach for PowerShell scripts, addressing the challenge of precisely identifying recoverable script pieces through a novel subtree-based deobfuscation method.
- Building on this deobfuscation method, we develop the first semantic-aware attack detection system for PowerShell, leveraging the OOA mining algorithm to identify 31 semantic signatures for PowerShell attacks.