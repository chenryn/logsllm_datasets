title:Effective and Light-Weight Deobfuscation and Semantic-Aware Attack
Detection for PowerShell Scripts
author:Zhenyuan Li and
Qi Alfred Chen and
Chunlin Xiong and
Yan Chen and
Tiantian Zhu and
Hai Yang
Effective and Light-Weight Deobfuscation and Semantic-Aware
Attack Detection for PowerShell Scripts
Zhenyuan Li
Zhejiang University
PI:EMAIL
Yan Chen
Northwestern University
PI:EMAIL
Qi Alfred Chen
University of California, Irvine
PI:EMAIL
Tiantian Zhu
Zhejiang University of Technology
PI:EMAIL
Chunlin Xiong
Zhejiang University
PI:EMAIL
Hai Yang
MagicShield Inc
PI:EMAIL
ABSTRACT
In recent years, PowerShell is increasingly reported to appear in a
variety of cyber attacks ranging from advanced persistent threat,
ransomware, phishing emails, cryptojacking, financial threats, to
fileless attacks. However, since the PowerShell language is dynamic
by design and can construct script pieces at different levels, state-of-
the-art static analysis based PowerShell attack detection approaches
are inherently vulnerable to obfuscations. To overcome this chal-
lenge, in this paper we design the first effective and light-weight
deobfuscation approach for PowerShell scripts. To address the chal-
lenge in precisely identifying the recoverable script pieces, we
design a novel subtree-based deobfuscation method that performs
obfuscation detection and emulation-based recovery at the level of
subtrees in the abstract syntax tree of PowerShell scripts.
Building upon the new deobfuscation method, we are able to
further design the first semantic-aware PowerShell attack detec-
tion system. To enable semantic-based detection, we leverage the
classic objective-oriented association mining algorithm and newly
identify 31 semantic signatures for PowerShell attacks. We perform
an evaluation on a collection of 2342 benign samples and 4141
malicious samples, and find that our deobfuscation method takes
less than 0.5 seconds on average and meanwhile increases the simi-
larity between the obfuscated and original scripts from only 0.5%
to around 80%, which is thus both effective and light-weight. In
addition, with our deobfuscation applied, the attack detection rates
for Windows Defender and VirusTotal increase substantially from
0.3% and 2.65% to 75.0% and 90.0%, respectively. Furthermore, when
our deobfuscation is applied, our semantic-aware attack detection
system outperforms both Windows Defender and VirusTotal with
a 92.3% true positive rate and a 0% false positive rate on average.
CCS CONCEPTS
• Security and privacy → Malware and its mitigation; Systems
security.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’19, November 11–15, 2019, London, United Kingdom
© 2019 Association for Computing Machinery.
ACM ISBN 978-1-4503-6747-9/19/11...$15.00
https://doi.org/10.1145/3319535.3363187
KEYWORDS
PowerShell; deobfuscation; abstract syntax tree; semantic-aware
ACM Reference Format:
Zhenyuan Li, Qi Alfred Chen, Chunlin Xiong, Yan Chen, Tiantian Zhu,
and Hai Yang. 2019. Effective and Light-Weight Deobfuscation and Semantic-
Aware Attack Detection for PowerShell Scripts. In 2019 ACM SIGSAC Con-
ference on Computer and Communications Security (CCS ’19), November
11–15, 2019, London, United Kingdom. ACM, New York, NY, USA, 17 pages.
https://doi.org/10.1145/3319535.3363187
1 INTRODUCTION
PowerShell is a powerful administration scripting tool with an
object-oriented dynamically-typed scripting language [36]. With
Microsoft’s open source strategy, it gains increasingly popularity
among programmers in recent years [4]. Unfortunately, attackers
have also recognized the advantages of PowerShell as an attack
vector, given that it is pre-installed on most Windows computers,
has direct access to priviledged system functions, and also can be
executed directly from memory and thus completely fileless. In
as early as 2016, Symantec published a white paper titled “The
Increased Use of PowerShell in Attacks” [65]. In the following
two years, PowerShell as a keyword appeared 64 times in five
subsequent Symantec white papers [59] with topics ranging from
ransomware, phishing emails, cryptojacking, financial threats, to
fileless attacks.
To combat such threats, state-of-the-art PowerShell attack de-
tection approaches mainly use static analysis to match string-level
signatures, e.g., by hand picking [55] or leveraging machine learn-
ing algorithms [26, 32, 53]. Compared to dynamic analysis based
approaches, static analysis based approaches are indeed more ef-
ficient and have higher code coverage, but since the PowerShell
language is dynamic by design and can construct script pieces at
different levels, these existing approaches are inherently vulnerable
to obfuscations. For example, as shown later in §2, we experiment
a few classic script obfuscation techniques, such as randomization,
string-level manipulation, and encoding on malicious PowerShell
scripts, and find that state-of-the-art anti-virus engines in VirusTo-
tal [11] can be generally bypassed. To overcome this challenge, it is
highly desired to have a effective and light-weight deobfuscation
solution for PowerShell scripts, which can generally benefit almost
all defense solutions against PowerShell attacks, ranging from their
detection, analysis, to forensics.
However, to the best of our knowledge, how to achieve effective
and light-weight deobfuscation for script languages still remains
Table 1: Comparison of representative existing deobfusca-
tion approaches for script languages and our approach.
Targeted
language
PowerShell
JavaScript
JavaScript
PowerShell
Obfuscation
det. accuracy
Recovery
quality
Light
-weight
✗
✗
N/A
✓
✓
✓
✓
✓
✓
✗
✗
✓
PSDEM [41]
JSDES [13]
Lu et al. [42]
Our approach
an unsolved research problem. Table 1 shows a comparison of rep-
resentative existing script deobfuscation approaches in obfuscation
detection accuracy, recovery quality, and overhead. In the PSDEM
approach [41], Liu et al. manually examined different PowerShell
obfuscation techniques and then designed targeted deobfuscation
solutions for each technique individually. This approach cannot
cover unknown obfuscation techniques and also suffer from high
false-positive rate in obfuscation detection (as shown later in §6.2.1).
The JSDES approach [13] performs deobfuscation specifically for
function-based obfuscation in JavaScript, which thus cannot detect
obfuscation done purely by basic operations instead of functions
[66]. Lu et al. [42] proposed to deobfuscate JaveScript code by dy-
namic analysis and program slicing. Since it relies on dynamic
analysis, it does not need to detect obfuscation, but its recovery
has limited code coverage, and also is much less light weight than
static analysis based approaches such as PSDEM.
To fill this critical research gap, in this paper we design the first
effective and light-weight deobfuscation approach for PowerShell
scripts. Note that although this paper targets PowerShell, the de-
obfuscation methodology itself is general and thus adaptable to
other script languages such as JavaScript. To achieve our design
goal, our key insight is that a generic property for obfuscations of
script languages is that in the run-time execution the obfuscated
script pieces must be recovered to the original, non-obfuscated
script pieces first before being executed. Thus, for an obfuscated
script, as long as all the pairs of the obfuscated script pieces and
their corresponding recovery logic can be located, we can emulate
the recovery process for each pair and thus gradually reconstruct
the entire original script. However, the key challenge is how to
precisely identify these pairs, which we call recoverable script pieces
in this work. If such identification is not precise enough, direct exe-
cution of the script pieces cannot trigger the the recovery process
and thus can only get intermediate script recovery results or script
execution results.
To address this challenge, we propose a novel subtree-based de-
obfuscation method that performs obfuscation detection at the level
of subtrees in the PowerShell script Abstract Syntax Tree (AST),
which is the minimum unit of obfuscation for PowerShell. Since
a typical script of several Kilobytes can already have thousands
of subtrees, to achieve high deobfuscation efficiency we design a
machine learning based classifier to first classify whether a given
subtree is obfuscated. For the obfuscated ones, we then traverse
them in a bottom-up order in the AST to identify the recoverable
script pieces and emulate the recovery logic, which thus eventually
constructs the entire deobfuscated scripts.
Since our deobfuscation approach can expose the semantics of
PowerShell scripts, we are able to build upon it to further design
the first semantic-aware PowerShell attack detection system. In
the system design, we adopt the classic Objective-Oriented Asso-
ciation (OOA) mining algorithm, which can automatically extract
frequently appeared commands and functions sets, called OOA
rules, for semantic signature matching. We apply this algorithm
to a collection of malicious PowerShell script datasets, and newly
identifies 31 OOA rules for PowerShell attacks.
To evaluate the performance of our PowerShell deobfuscation
approach and attack detection system, we perform experiments on
2342 benign script samples collected from top 500 repositories in
GitHub, and 4141 malicious samples collected from security blogs
[55], attack analysis white papers [55], and open source attack
repositories [1, 9, 43]. Our results show that the deobfuscated scripts
using our subtree-based approach have an average similarity of
around 80% to the original scripts. In comparison, the average
similarity before applying our deobfuscation is only 0.5%, which
thus shows a high script recovery effectiveness. Meanwhile, our
deobfuscation approach is shown to take less than 0.5 seconds on
average to deobfuscate scripts with an average size of 5.4 Kilobytes,
which thus also shows high efficiency.
Our results further show that our deobfuscation approach can
significantly improve the effectiveness of PowerShell attack detec-
tion. More specifically, with our deobfuscation approach applied,
the average true positive detection rates increase substantially from
0.3% to 75.0% for Windows Defender, and from 2.65% to 90.0% for
VirusTotal. For both Windows Defender and VirusTotal, there are
0% false-positive rates after applying our deobfuscation. Further-
more, our results show that when our deobfuscation approach is
applied, our semantic-aware attack detection system outperforms
both Windows Defender and VirusTotal with a 92.3% true positive
rate and a 0% false-positive rate on average.
This paper makes the following contributions:
• Leveraging the insight that obfuscations fundamentally limit the
effectiveness of PowerShell attack detection today, we design
the first effective and light-weight deobfuscation approach
for PowerShell scripts. To address the challenge in precisely
identifying the recoverable script pieces, we design a novel
subtree-based deobfuscation method that performs obfuscation
detection and emulation-based recovery at the level of subtrees
in the PowerShell script AST, which is the minimum unit of
obfuscation.
• Building upon the new deobfuscation method, we are able to