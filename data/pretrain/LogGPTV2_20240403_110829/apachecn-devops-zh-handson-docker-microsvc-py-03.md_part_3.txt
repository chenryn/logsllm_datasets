The generation of the `db.sqlite3` file can create permission problems in some operating systems. If that's the case, delete it to be regenerated and/or allow it to read and write to all users with `chmod 666 ./ThoughtsBackend/db.sqlite3`.
这就是为什么我们使用`environment`选项来传递`PYTHONDONTWRITEBYTECODE=1`环境变量。这将阻止 Python 创建`pyc`文件。
虽然 SQLite 很适合测试，但我们需要创建一个更好的结构来反映部署，并配置对数据库的访问，以便能够部署服务器。
# 创建 PostgreSQL 数据库容器
我们需要用 PostgreSQL 数据库测试我们的代码。这是我们将在生产中部署代码的数据库。
虽然 SQLAlchemy 中的抽象层旨在减少差异，但数据库的行为存在一些差异。
例如在`/thoughts_backend/api_namespace.py`中，下面一行是不区分大小写的，这就是我们想要的行为:
```
query = (query.filter(ThoughtModel.text.contains(search_param)))
```
将它翻译成 PostgreSQL，它是区分大小写的，这需要您检查它。如果用 SQLite 测试并在 PostgreSQL 中运行，这将是生产中的一个错误。
The replaced code, using `ilike` for the expected behavior, is as follows:
`param = f'%{search_param}%'`
`query = (query.filter(ThoughtModel.text.ilike(param)))`
We kept the old code in a comment to show this issue.
为了创建一个数据库容器，我们需要定义相应的 Dockerfile。我们将所有文件存储在`docker/db/`子目录中。让我们看看 Dockerfile 及其不同部分。整个文件可以在 GitHub 上找到([https://GitHub . com/PacktPublishing/hand-On-Docker-for-micro-service-with-Python/blob/master/chapter 03/Docker/db/Docker file](https://github.com/PacktPublishing/Hands-On-Docker-for-Microservices-with-Python/blob/master/Chapter03/docker/db/Dockerfile))。该文件可分为以下几个阶段:
1.  使用`ARG`关键字，定义基本的 PostgreSQL 配置，如数据库名称、用户和密码。它们被设置在环境变量中，以便 PostgreSQL 命令可以使用它们。
These commands are for local development only. They'll need to match with the environment set up. The `ARG` keyword defines a parameter for Dockerfile at build time. We'll see how they are set up as input parameters in the `docker-compose.yaml` file.
`ARG`元素也被定义为`ENV`变量，所以我们保持它们被定义为环境变量:
```
# This Dockerfile is for localdev purposes only, so it won't be
# optimised for size
FROM alpine:3.9
# Add the proper env variables for init the db
ARG POSTGRES_DB
ENV POSTGRES_DB $POSTGRES_DB
ARG POSTGRES_USER
ENV POSTGRES_USER $POSTGRES_USER
ARG POSTGRES_PASSWORD
ENV POSTGRES_PASSWORD $POSTGRES_PASSWORD
ARG POSTGRES_PORT
ENV LANG en_US.utf8
EXPOSE $POSTGRES_PORT
# For usage in startup
ENV POSTGRES_HOST localhost
ENV DATABASE_ENGINE POSTGRESQL
# Store the data inside the container, as we don't care for
# persistence
RUN mkdir -p /opt/data
ENV PGDATA /opt/data
```
2.  安装`postgresql`包及其所有依赖项，比如 Python 3 及其编译器。我们需要他们能够运行应用代码:
```
RUN apk update
RUN apk add bash curl su-exec python3
RUN apk add postgresql postgresql-contrib postgresql-dev
RUN apk add python3-dev build-base linux-headers gcc libffi-dev
```
3.  安装并运行`postgres-setup.sh`脚本:
```
# Adding our code
WORKDIR /opt/code
RUN mkdir -p /opt/code/db
# Add postgres setup
ADD ./docker/db/postgres-setup.sh /opt/code/db/
RUN /opt/code/db/postgres-setup.sh
```
这将初始化数据库，设置正确的用户、密码等。请注意，这还没有为我们的应用创建特定的表。
As part of our initialization, we create the data files inside the container. This means that the data won't persist after the container stops. This is a good thing for testing, but, if you want to access the data for debug purposes, remember to keep the container up.
4.  安装我们的应用的要求和要在数据库容器中运行的特定命令:
```
## Install our code to prepare the DB
ADD ./ThoughtsBackend/requirements.txt /opt/code
RUN pip3 install -r requirements.txt
```
5.  复制`docker/db`中存储的应用代码和数据库命令。运行`prepare_db.sh`脚本，创建应用数据库结构。在我们的例子中，它设置了`thoughts`表:
```
## Need to import all the code, due dependencies to initialize the DB
ADD ./ThoughtsBackend/ /opt/code/
# Add all DB commands
ADD ./docker/db/* /opt/code/db/
## get the db ready
RUN /opt/code/db/prepare_db.sh
```
这个脚本首先启动后台运行的 PostgreSQL 数据库，然后调用`init_db.py`，然后优雅地停止数据库。
Keep in mind that, in each of the steps of Dockerfile, in order to access the database, it needs to be running, but it will also be stopped at the end of each step. In order to avoid corruption of the data or the abrupt killing of the process, be sure to use the `stop_postgres.sh` script until the end. Though PostgreSQL will normally recover for an abruptly stopped database, it will slow the startup time.
6.  要启动运行中的数据库，CMD 只是`postgres`命令。它需要和`postgres`用户一起运行:
```
# Start the database in normal operation
USER postgres
CMD ["postgres"]
```
要运行数据库服务，我们需要将其设置为`docker-compose`文件的一部分:
```
    db:
        build:
            context: .
            dockerfile: ./docker/db/Dockerfile
            args:
                # These values should be in sync with environment
                # for development. If you change them, you'll 
                # need to rebuild the container
                - POSTGRES_DB=thoughts
                - POSTGRES_USER=postgres
                - POSTGRES_PASSWORD=somepassword
                - POSTGRES_PORT=5432
        ports:
            - "5432:5432"
```
请注意，`args`参数将在构建期间设置`ARG`值。我们还路由 PostgreSQL 端口以允许访问数据库。
现在，您可以构建和启动服务器:
```
$ docker-compose up build
$ docker-compose up db
Creating ch3_db_1 ... done
Attaching to ch3_db_1
...
db_1 | 2019-06-02 13:55:38.934 UTC [1] LOG: database system is ready to accept connections
```
在不同的终端中，您可以使用 PostgreSQL 客户端来访问数据库。我推荐神奇的`pgcli`。你可以查看它的文档([https://www.pgcli.com/](https://www.pgcli.com/))。
You can use also the official `psql` client or any other PostgreSQL client of your preference. The documentation for the default client can be found here: [https://www.postgresql.org/docs/current/app-psql.html](https://www.postgresql.org/docs/current/app-psql.html).
这里，我们使用`PGPASSWORD`环境变量来表示密码是之前配置的:
```
$ PGPASSWORD=somepassword pgcli -h localhost -U postgres thoughts
Server: PostgreSQL 11.3
Version: 2.0.2
Chat: https://gitter.im/dbcli/pgcli
Mail: https://groups.google.com/forum/#!forum/pgcli
Home: http://pgcli.com
postgres@localhost:thoughts> select * from thought_model
+------+------------+--------+-------------+
|  id  |  username  |  text  |  timestamp  |
|------+------------+--------+-------------|
+------+------------+--------+-------------+
SELECT 0
Time: 0.016s
```
能够访问数据库对于调试非常有用。
# 配置您的服务
我们可以配置服务使用环境变量来改变行为。对于容器来说，这是使用配置文件的一个极好的替代方案，因为它允许不可变的容器注入它们的配置。这符合十二因素应用([https://12factor.net/config](https://12factor.net/config))的原则，并允许代码和配置之间的良好分离，以及代码可能用于的不同部署的设置。
One of the advantages that we'll look at later with the use of Kubernetes is creating new environments on-demand, which can be tweaked for testing purposes or tailored for development or demo. Being able to quickly change all the configuration by injecting the proper environment makes this operation very easy and straightforward. It also allows you to enable or disable features, if properly configured, which helps the enablement of features on launch day, with no code rollout.
这允许配置要连接的数据库，因此我们可以在 SQLite 后端或 PostgreSQL 之间进行选择。
Configuring the system is not limited to open variables, though. Environment variables will be used later in the book for storing secrets. Note that a secret needs to be available inside the container.
我们将配置测试来访问我们新创建的数据库容器。为此，我们首先需要能够通过配置在 SQLite 或 PostgreSQL 之间进行选择。查看`./ThoughtsBackend/thoughts_backend/db.py`文件:
```
import os
from pathlib import Path
from flask_sqlalchemy import SQLAlchemy
DATABASE_ENGINE = os.environ.get('DATABASE_ENGINE', 'SQLITE')
if DATABASE_ENGINE == 'SQLITE':
    dir_path = Path(os.path.dirname(os.path.realpath(__file__)))
    path = dir_path / '..'
    # Database initialisation
    FILE_PATH = f'{path}/db.sqlite3'
    DB_URI = 'sqlite+pysqlite:///{file_path}'
    db_config = {
        'SQLALCHEMY_DATABASE_URI': DB_URI.format(file_path=FILE_PATH),
        'SQLALCHEMY_TRACK_MODIFICATIONS': False,
    }
elif DATABASE_ENGINE == 'POSTGRESQL':
    db_params = {
        'host': os.environ['POSTGRES_HOST'],
        'database': os.environ['POSTGRES_DB'],
        'user': os.environ['POSTGRES_USER'],
        'pwd': os.environ['POSTGRES_PASSWORD'],
        'port': os.environ['POSTGRES_PORT'],
    }
    DB_URI = 'postgresql://{user}:{pwd}@{host}:{port}/{database}'
    db_config = {
        'SQLALCHEMY_DATABASE_URI': DB_URI.format(**db_params),
        'SQLALCHEMY_TRACK_MODIFICATIONS': False,
    }
else:
    raise Exception('Incorrect DATABASE_ENGINE')
db = SQLAlchemy()
```
当使用设置为`POSTGRESQL`的`DATABASE_ENGINE`环境变量时，它将正确配置它。其他环境变量需要正确；也就是说，如果数据库引擎设置为 PostgreSQL，则需要设置`POSTGRES_HOST`变量。
环境变量可以单独存储在`docker-compose.yaml`文件中，但是在一个文件中存储多个更方便。我们来看看`environment.env`:
```
DATABASE_ENGINE=POSTGRESQL
POSTGRES_DB=thoughts
POSTGRES_USER=postgres
POSTGRES_PASSWORD=somepassword
POSTGRES_PORT=5432
POSTGRES_HOST=db
```
请注意，用户等的定义与创建 Dockerfile 进行测试的参数一致。`POSTGRES_HOST`定义为`db`，是服务的名称。
Inside the Docker cluster created for `docker-compose`, you can refer to services by their names. This will be directed by the internal DNS to the proper container, as a shortcut. This allows easy communication between services, as they can configure their access very easily by name. Note that this connection is only valid inside the cluster, for communication between containers.
然后，我们使用 PostgreSQL 容器的测试服务定义如下:
```
    test-postgresql:
        env_file: environment.env
        environment:
            - PYTHONDONTWRITEBYTECODE=1
        build:
            dockerfile: docker/app/Dockerfile
            context: .
        entrypoint: pytest
        depends_on:
            - db
        volumes:
            - ./ThoughtsBackend:/opt/code
```
这与`test-sqlite`服务非常相似，但它增加了`environment.env`中的环境配置，并增加了对`db`的依赖。这意味着`docker-compose`将启动`db`服务，如果不存在的话。
现在，您可以对 PostgreSQL 数据库运行测试:
```
$ docker-compose run test-postgresql
Starting ch3_db_1 ... done
============== test session starts ====================
platform linux -- Python 3.6.8, pytest-4.6.0, py-1.8.0, pluggy-0.12.0 -- /opt/venv/bin/python3
cachedir: .pytest_cache
rootdir: /opt/code, inifile: pytest.ini
plugins: flask-0.14.0
collected 17 items