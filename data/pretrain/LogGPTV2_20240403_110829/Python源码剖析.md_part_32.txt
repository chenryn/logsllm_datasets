用到这个结构，为了避免代码过于复杂，Python不管三七二十一，在pyFrame_BlockSetup
呢？这是因为，PyTryBlock并不是专门为for循环准备的，Python中还有一些机制会使
POP_BLOCK指令时，却只使用了栈深度信息来恢复运行时栈。为什么会存在这种不对称
不存在switch控制结构。所以，我们只剩下最后一种基本的控制结构了，即while循环
曾有过关于在Python中实现swich机制的讨论，但是到目前最新的Python发行版本，都
构、for循环结构、while循环结构和swich分支选择控制结构。虽然Python开发社区也
用来判断是否该输出信息的准则。
控制结构。
最后，我们修改了Pyhon的源代码，来实时地观察一下for循环的整个执行流程，
前面我们已经完成了对Pyhon中i条件控制结构和for循环结构的考察，那么现在
在大多数现代程序设计语言中，一般都提供了四种最基本的控制结构：i条件控制结
研究对象
一深度探索动态语言核心技术
>>1st=[654321,3,2,1]
[JUMP_ABSOLUTE]:Go back to FOR_ITER.
JUMP_ABSOLUTE]
JUMP_ABSOLUTE]:Go back to FOR ITER.
[GET_ITER]
图10-6监视Python虚拟机执行for循环的过程
ORITER]:Get
OR ITER]
-while_control.py
pass
：Get
next item
iterator..
Go back to FoR_ITER.
---
## Page 223
仅要考虑循环本身的指令跳跃动作，
while_control.py来考察Pyhon中的while循环控制结构。在while_control.py中，我们不
对于Python中的while循环控制结构，其实已经很好理解了。在这一节，我们通过对
U
2
[while_control.py]
田
15
9
9
8
下面是经编译生成了字节码的while_control.py：
print.
STORE_NAME
SETUP_LOOR
LOAD_CONST
LOAD_CONST
LOAD_NAME
JUMP_IF_FALSE
POP_TOP
JUMP_PORWARD1(tO70)
POP_TOP
POPTOP
LOAD_NAME
STORE_NAME
COMPARE_OP
LIOAD
LOAD_NAME
RETURN VALUE
POP_BLOCK
PRINT_ITEM
LOAD NAME
BREAK_LOOP
JUMP_IF FALSE
COMPARE OP
LOAD CONST
COMPAREOP
LOAD!
INPLACEADD
LOAD CONST
POPTOP
PRINT_NEWLINE
break
continue
ICONGT
CONST
《》
00
71(b0
0
（0）
（）
(to
(to:78)
801
69)
51)
10.3
而且还要考虑另外两个与循环相关的指令跳跃语义：
Python虚拟机中的while循环控制结构
Python源码剖析
一深度探索动态语言核心技术
193
---
## Page 224
Python源码剖析
10.3.2
194
况如图10-9所示：
时中。这里，我们先来个思维的跃迁，直接考虑循环结束时的情况。当某个时刻王的值
况如图10-8所示：
时栈和1ocal名字空间在运行时的变化情况。
虚拟机的状态，然后正式开始进入wii1e循环。所以这里我们只观察whiie循环中运行
机从当前活动的PyFrameObject对象中申请了一块PyTryBlock的空间，并填入一些当前
10-7所示：
第10章：Python虚拟机中的控制流
接着“COMPARB_OPO”指令将执行“小于”比较操作，并将比较的结果存放到运行
当Python虚拟机执行到“15COMPARE_Opo”指令时，
字节码指令序列的结构基本都是我们已经熟悉的了，在“6SET工OOP71”处，
编译后产生的PyCodeobject对象中的常量表co_consts和符号表co_names如图
循环终止
深度探索动态语言核心技术
图10-8执行“15COMPARE_OP0”指令时虚拟机的状态
图10-7while_control.pyc中的常量表和符号表
图10-9
Py_False
循环结束时虚拟机的状态
4--
运行时栈及局部变量表的情
虚拟
---
## Page 225
10.3.4
10.3.3循环的正常运转
指令中的判断操作的结果为Py_True，那么这里的指令跳跃动作将不会发生，所以虚拟机
的执行流程应该跳转到循环开始的地方，而不接着执行循环中位于continue之后的语句。
虚拟机执行continue动作时，按照在其他编程语言，比如C、Java中的经验，这时程序
循环，然后Pyhon的虚拟机才会执行whi建e循环控制结构之后的字节码指令序列。
都会使的值递增1，直到的值等于10。这时程序的执行流程就会转入FALSE分支退出
机又开始了新一轮的循环，继续比较1和10的大小，如此反复，在每一次TRUE分支中，
始处9个字节，正好是“whileibhandler);
WHY_BREAK;
1=WHY_NOT&&f->f_ib1ock>O）[
（next_instr =first_instr （x））
POPO
SETUP_LOOP &&WHy WHY_BREAK)（
>b->b_Ievel)
break语
---
## Page 227
10.4.1.1Python虚拟机自身抛出异常
10.4Python虚拟机中的异常控制流
10.4.1
LOAD_CONST3”处。确实，它已经跳出了whi1e循环所对应的指令序列。
next_instr已经指向了下一条待执行的字节码指令，即“gLOAD_NAMEo”，很显然，这
注意这里的oDarg是指令“6SETUP_LOOP71”的指令参数，即71。INSTR_OFFSET（）宏
和PyFrame_BlockSetup的代码可以看到，这个值会被设置为INsTR_OFFSET（）+oparg
置b->b_handler个字节的指令。
再通过JUMPTo宏，将虚拟机种下一条指令的指示器next_instr设置为距离code开始位
之后的状态。最后Python虚拟机将why设置为WHY_NOT，表明退出状态没有任何错误，
里的b_handler的值为：INsTR_OFFsET（）+oparg=9+71=80。这也就意味着break
对应的代码为（（int）（next_instr-Eirst_instr)），因为在执行sETuP_Loop指令时，
应的PyTryBlock结构，然后根据其中存储的运行时栈信息将运行时栈恢复到wbi1e循环
够通过这些语法结构和语义元素来方便地描述异常发生时程序的行为。
行抽象。同时，在这些编程语言中，还提供了相应的语法结构和语义元素，使得程序员能
在现代编程语言中，都引入了“异常”这样的概念，来对程序运行中突发的非正常情况进
文件不存在、正在使用的socket非正常关闭等。一个健壮的程序必须处理这些异常的情况。
有一种高级的控制流结构，这也是我们将在下面详细考察的内容一
最“轻量级”的脚本语言就可以诞生了。但是在Python中，除了这些基本的控制流，
支控制结构、for循环控制结构和while循环控制结构。实现了这四种控制流结构，一个
以看到，最后wby又被设置为了正常状态WHY_NOT，而虚拟机仍然在当前栈帧中运行。
状态，但是实际上并没有结束当前活动的栈帧，而仅仅是利用其实现了break的语义。可
这个b_handler是在执行sETUP_LOOP指令时设置的，参考sETUP_LooP的指令代码
到了这里，我们已经考察完了Python中四种基本的程序结构：顺序结构、注条件分
值得注意的是，虽然这里使用了why这个用于栈帧（PyFrameObject）结束时的结束
Pyhon虚拟机首先获得之前通过sETup_Loop指令申请得到的，与当前while循环对
程序在运行的过程中，可能经常遇到意想不到的情况，比如说除数为0、想要打开的
Python中的异常机制
Python内部有一套内建的异常捕捉机制，即使在Pyhon脚本文件中没有出现诸如try
10.4Python虚拟机中的异常控制流
Python源码剖析
深度探索动态语言核心技术
一异常控制结构。
197
还
---
## Page 228
Python源码剖析
198
的对象最终将走上不同的路径，而我们的两个ryIntobject的除法路径最终会达到在
又被抛到了什么地方去了呢？列位看官，且随我深入PyNumber_Divide。
所以才能导致Python虚拟机退出当前栈帧。那么这个至关重要的异常在哪里抛出的，它
出与Python虚拟机息息相关的用于指令分派的switch选择。
字节码指令进行分派的巨大的switeh语句。注意，这里的跳跃最终将使得程序的流程跳
为NULL，即不是一个有效的Python对象，那么将通过break跳出Python虚拟机中那个对
察。如果x是一个有效的Python对象，那么Python虚拟机将执行下一条字节码：如果x
x是做除法操作的结果。我们注意到在将这个结果压入到栈中后，会对×的有效性进行检
中，执行了除法操作。显然，异常也正是在执行这条字节码时被触发的：
表达式编译得到的三条字节码指令中，前两条我们已经非常熟悉了，在第三条字节码指令
ZeroDivideError我们看一下图10-11所示的执行结果：
是如何实现的：
会被Pyhon虚拟机捕捉到。我们首先通过一个最简单的例子来考察Python中的异常机制
except、finally等用于进行异常控制的语义元素，Python脚本执行中所抛出的异常还是
[BINARY_DIVIDE]
1/0
从PyNumber_Divide，会经过一系列的动作，在这个过程中，不同的参与除法操作
我们可以猜想，当PyNumber_Divide执行时，抛出了异常，而它的返回值一定是NULL，
从运行时栈中获得数据之后，w是PyIntobject对象1，v是PyIntObject对象0，
在这一节，我们就会将异常的来龙去脉搞个一清二楚。在“10”这行简单的Pyhon
第10章Python虚拟机中的控制流
由于除数是0，所以这行Python代码一定会抛出异常，在Pyhon中，这个异常是
BINARY DIVIDE
LOAD_CONST
LOADLCONST
一深度探索动态语言核心技术
ZeroDivisionError: integer division or nodulo by zato
Traceback (most recent call last):
>>>1/0
break;
SET
Py
（x=NUsL)continue;
1/0
DECREE(V);
TOP（)
POPO://1
TOP(X):
图10-11Python内建的异常捕捉机制
---
## Page 229
个PyExc_ZeroDivisionError到底是属于哪一部分的呢？
Python 中，
调用pyErr_SetString抛出了异常，并返回了指示异常抛出的指示码
值，将Python虚拟机扼杀在执行的路上。我们就来看看这个异常发生的i_divmod：
或DIVMOD_oVERFLOW的值，这样int_classic_div才能返回一个表示除法失败的NULL
static enum divmod_result