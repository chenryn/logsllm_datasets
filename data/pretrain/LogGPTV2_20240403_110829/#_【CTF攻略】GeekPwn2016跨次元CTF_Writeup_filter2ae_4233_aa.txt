# 【CTF攻略】GeekPwn2016跨次元CTF Writeup
|
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
**作者：**[ **FlappyPig**
****](http://bobao.360.cn/member/contribute?uid=1184812799)
**稿费：800RMB（不服你也来投稿啊！）**
**投稿方式：发送邮件至linwei#360.cn，或登陆 **[
**网页版**](http://bobao.360.cn/contribute/index)** 在线投稿**
**写在前面**
* * *
跨次元CTF是一个不同于传统CTF的比赛，无论是从线上还是线下。线上赛的题目以离线打包的方式发送给队伍，各队的题目可能存在差别。
经过大家的努力，幸运的进入了跨次元CTF决赛。
线下决赛甚至比初赛更加神秘。Joker一个人去听了tk教主的规则讲解，晚上大家在房间里讨论的时候，得到的信息也很少。基本处于懵逼状态。决赛的性质比较偏向表演赛，但是有些题目还是很有意思。虽然赛场上我们只做了两道题，但是赛后还是补了功课，写了这篇Writeup。
一共四道题目。第一道Android，第二道题Web，三四题都是Pwn。
**无人机的玩法：**
两队的无人机，拥有无限炸弹，自己飞机起飞扣200分，被攻击的队伍扣300分。每队拥有自己的MasterKey和Token,分别用来自行攻击和控制他国攻击
**操控方式：**
用本队服务器访问指定页面
1.自行攻击：http://xxx.com/root.php?key=本队MasterKey
自行攻击是杀敌一千，自损八百的战术。如果平分或者僵局的时候可以选择。
2.控制他国攻击：http://xxx.com/guest.php?token=本队Token&attack=N&flag=M国第P题的flag&pid=P&use=M
(使用M国的第P题的Flag，控制国家M攻击N)
需要注意的是，一个Flag只能用一次，就是两个队拿了相同的Flag，先攻击的有效，后攻击的无效。Flag不会更新。
**题目1 无人机的钥匙（Android、Misc）**
* * *
**描述：** 一张神秘的地图被撕碎了，拼接完整这份地图，找到和砸开彩蛋，就可以拿到无人机的钥匙了。
Flag为五位字符串
apk打开，是一个拼图的小游戏，用jeb打开apk可以看出程序将拼图图片的顺序传入到了native层的lib里做验证。
用unzip解压apk，用ida打开lib/armeabi目录下的libhell0.so文件，在导出函数里找到Java_com_geekpwn_1ctf_MainActivity_stringFronJNI函数，如下图
可以看出，如果拼图正确的话会输出Congrats! Pwn the secret egg with m$W2h, and you will get the
flag.随后又拿到一个提示：查看签名文件。
用unzip解压apk，查看其META-INF目录，有一个名为“CERT
.SF”的文件，其中多了一个空格，比较可疑，使用file命令查看发现是一个zip压缩文件
unzip解压缩该文件提示需要密码，尝试之前获取的“m$W2h”作为密码，解压成功。
解压出一个名为98的压缩文件，再解压98解压出一个名为97的压缩文件，推测是循环解压，于是写了个bash脚本解压
    for((i=97; i>0; --i))
    do
     unzip $i
    done
最后解压出名为0的压缩文件，再解压出来是一个gif文件“Flag2.gif”。
打开之后是一个快速变化的二维码图片，众所周知，mac对gif的支持并不好，于是使用mac自带的“预览”打开gif文件，其每一帧的信息就显示出来了。
使用微信扫描二维码，每幅二维码扫描出来都是一个字符，连接起来是“63E13B2A1EB2558A642E61B343241F5A”。推测是一个MD5，使用cmd5查询即可得到flag。
**题目2 无人机病了（Web）**
* * *
**描述：** 无人机需要Injection
**端口：** 80
代码审计题目，代码如下：
            Numsubjectcontentwriter
            ";
                    echo "{$row['idx']}";
                    echo "{$row['subject']}";
                    echo "{$row['content']}";
                    echo "{$row['writer']}";
                    echo "";
                }
            ?>
                        subject
                        content
                        subject, content
                        writer
                     or &nbsp;&nbsp;
                     and
    view-source
漏洞很明显，line 47 parse_str 导致变量覆盖，line 59 若 $col为 False 就不会进入赋值语句，也就是说
$query_parts 因变量覆盖可控，而在 line 56-59 可以看到 $col 是对输入做正则匹配的返回值，也就是说 $col
可控，进而导致注入，url：/index.php?search_cols=a&keyword=xxxx&operator=and&query_parts={injection}
。
但是在 line 12-24 可以看到有一防注入函数，想要更好出数据肯定要绕过防注入。函数是通过 parse_url、parse_str 解析 url
参数，然后通过正则限制关键字的方式做的过滤，常规的方法绕过相对困难。
这里用到了 parse_url 函数在解析 url 时存在的 bug，通过：////x.php?key=value 的方式可以使其返回
False。具体可以看下[[parse_url的源码]](https://github.com/php/php-src/blob/9df6112e01eacb6e068e8d23e78181918bdab548/ext/standard/url.c#L97)，关键代码如下：
    PHPAPI php_url *php_url_parse_ex(char const *str, size_t length)
    {
        char port_buf[6];
        php_url *ret = ecalloc(1, sizeof(php_url));
        char const *s, *e, *p, *pp, *ue;
        ...snip...
    } else if (*s == '/' && *(s + 1) == '/') { /* relative-scheme URL */
            s += 2;
        } else {
            just_path:
            ue = s + length;
            goto nohost;
        }
        e = s + strcspn(s, "/?#");
        ...snip...
        } else {
            p = e;
        }
        /* check if we have a valid host, if we don't reject the string as url */
        if ((p-s) scheme) efree(ret->scheme);
            if (ret->user) efree(ret->user);
            if (ret->pass) efree(ret->pass);
            efree(ret);
            return NULL;
        }
可以看到，在函数 parse_url 内部，如果 url 是以 //开始，就认为它是相对 url，而后认为 url 的部件从 url+2 开始。line
281，若 p-s  var_dump(parse_url('///x.php?key=value'));
    bool(false)
函数 php_url_parse_ex中还存在很多类似的问题，而 parse_url 中又没有对其解析失败的原因进行分析，导致 parse_url
频繁出现类似的 bug，比如主办方后来放出的 hint：[[Bug
#55511]](https://bugs.php.net/bug.php?id=55511)。
$INFO = parse_url($_SERVER['REQUEST_URI']) = FALSE，后续的过滤也就完全无用了，成功绕过防注入。最终
payload 如下：
    ////index.php?search_cols=a|b&keyword=xxxx&operator=and&query_parts=123 union select 1,2,3,flag from flag
**题目3：无人机驾驶员飞行日志（Pwn1）**
* * *
**描述：**
无人机驾驶员惠惠养成了记飞行日志的好习惯，一开始用C语言写了一套，后来觉得Python大法好,又用Python写了一套飞航日志系统。所以旁友，系统会有什么问题呢？
**端口：** 6161
**端口：** 6162
给了Blog-bin、Blog-py、run-blog文件，其中Blog-bin是32位elf，Blog-py是pyc文件，run-blog是bash文件
    run-blog
    #! /usr/bin/python
    import os
    os.chdir('/tmp/pwn')＃原题是/home/pwn1
    os.system('python Blog-py.py')
    Blog-bin.c
    #include 
    #include 
    #include 
    int menu();
    void write_blog();
    void read_blog();
    int list_blog(char *s);
    int check_vaild(char c);
    int menu()
    {
        int i;
        fprintf(stdout, "---- UAV Pilot Blog Version 1.0 ----n");
        fprintf(stderr, "1. List Blogn");
        fprintf(stdout, "2. Write Blogn");
        fprintf(stdout, "3. Read Blogn");
        fprintf(stdout, "4. Exitn");
        fprintf(stdout, "------------------------------------n");
        fprintf(stdout, "Your choice: ");
        fflush(stdout);
        scanf("%d", &i);
        getchar();
        return i;
    }
    int check_vaild(char c)
    {
        if(((c>=97)&&(c=65)&&(c=48)&&(c=1022)||(flag != 1))
            {
                break;
            }
            if(check_vaild(c))
            {
                content[i] = c;
            }else{
                exit(0);
            }
            i += 1;
        }
        content[i+1] = 0;
        sprintf(filename, "%ld.em", now);
        // printf("filename : %sn", filename);
        fp = fopen(filename, "a+");
        if (fp == NULL)
        {