### Undefined Behavior and Property Preservation in Compilation

When a property \(\pi\) is in the set \(Closed≺P\), and it allows a trace \(t\) that ends with an undefined behavior in \(P\)—i.e., \(\exists m. t = m \cdot Undef(P)\)—then \(\pi\) should also allow any extension of the trace \(m\). In other words, if \(\pi\) accepts a trace that includes undefined behavior, it should also accept any trace that has \(m\) as a prefix. This is because the compilation chain can implement a trace with undefined behavior as an arbitrary extension. Conversely, if \(\pi\) in \(Closed≺P\) rejects a trace \(t'\), then for any prefix \(m\) of \(t'\), \(\pi\) should also reject the trace \(m \cdot Undef(P)\).

### References

1. M. Abadi and C. Fournet. Access control based on execution history. NDSS. The Internet Society, 2003.
2. M. Abadi. Protection in programming-language translations. Secure Internet Programming, 1999.
3. M. Abadi, C. Fournet, and G. Gonthier. Secure implementation of channel abstractions. Information and Computation, 174(1):37–83, 2002.
4. M. Abadi and J. Planul. On layout randomization for arrays and functions. POST, 2013.
5. M. Abadi and G. D. Plotkin. On protection by layout randomization. ACM TISSEC, 15(2):8, 2012.

### Example: Property S1

Consider the following formalization of the property \(S1\) from §2, which requires all writes in the trace to be preceded by a corresponding read:

\[ S1 = \{ t \mid \forall m, d, x. (m \cdot E.write() \leq t) \Rightarrow (\exists m'. m' \cdot E.read \cdot Ret(x) \leq m) \} \]

While \(S1\) is a safety property, it is not in \(Closed≺P\). Consider the trace \(t' = [C0.main(); E.write()]\), which violates \(S1\) because it contains a write without a preceding read. For \(S1\) to be in \(Closed≺P\), it would need to reject not only \(t'\), but also \([C0.main(); Undef(P)]\) and \(Undef(P)\), which it does not. However, one can define a stronger variant of \(S1\) that is in \(ZP\):

\[ S_{Z+P}^1 = \{ t \mid \forall m, d, x. (m \cdot E.write() \leq t \lor m \cdot Undef(P) \leq t) \Rightarrow (\exists m'. m' \cdot E.read \cdot Ret(x) \leq m) \} \]

This property \(S_{Z+P}^1\) requires any write or undefined behavior in \(P\) to be preceded by a corresponding read. While this property is restrictive, it holds (vacuously) for the strengthened system in Figure 2 when \(P = \{C0\}\) and \(C = \{C1, C2\}\), assuming \(C0\) has no undefined behavior.

### RSCDC Characterization

Using \(ZP\), we proved an equivalent RSCDC characterization:

\[
\forall P \pi \in ZP. \left( \forall CS \, t. (CS[P] \leadsto t \Rightarrow t \in \pi) \right) \Rightarrow \left( \forall CT \, t. (CT [P↓] \leadsto t \Rightarrow t \in \pi) \right)
\]

Theorem A.2: RSCDC \(\Leftrightarrow\) The preservation of all properties in \(ZP\) for all \(P\).

This theorem shows that RSCDC is equivalent to the preservation of all properties in \(ZP\) for all \(P\). One might wonder how to obtain robust safety properties in the source language, given that execution traces can be influenced by both the partial program and the adversarial context. If the trace records enough information to determine the originator of each event, robust safety properties can explicitly talk only about the events of the program, not the context. Additionally, adding interfaces in RSCDC (§3.3) allows effective restriction of the context from directly performing certain events, such as system calls, and the robust safety property can then focus on these privileged events that the sandboxed context cannot perform.

### Stronger Properties in Source Language

For a safety property \(\pi\) that is not in \(ZP\), one must prove a stronger property in the source to ensure \(\pi\) in the target using an RSCDC compiler. For example, for \(S1 \notin ZP\), we manually defined the stronger property \(S_{Z+P}^1\) that is preserved by an RSCDC compiler. Given any safety property \(\pi\), we can define \(\pi_{Z+P}\) that is in \(ZP\), stronger than \(\pi\), and as permissive as possible:

\[
\pi_{Z+P} \triangleq \pi \cap \{ t \mid \forall t' \in \pi. (t \prec_P t') \}
\]

We can also answer the dual question: what remains of an arbitrary safety property established in the source when looking at the target of an RSCDC compiler:

\[
\pi_{Z-P} \triangleq \pi \cup \{ t' \mid \exists t \in \pi. (t \prec_P t' \lor t' \leq t) \}
\]

### References (Continued)

6. C. Abate, A. Azevedo de Amorim, R. Blanco, A. N. Evans, G. Fachini, C. Hriţcu, T. Laurent, B. C. Pierce, M. Stronati, and A. Tolmach. When good components go bad: Formally secure compilation despite dynamic compromise. CCS, 2018.
7. C. Abate, R. Blanco, D. Garg, C. Hriţcu, M. Patrignani, and J. Thibault. Journey beyond full abstraction: Exploring robust property preservation for secure compilation. CSF, 2019.
8. P. Agten, B. Jacobs, and F. Piessens. Sound modular verification of C code executing in an unverified context. POPL, 2015.
9. P. Agten, R. Strackx, B. Jacobs, and F. Piessens. Secure compilation to modern processors. CSF, 2012.
10. A. Ahmed. Verified compilers for a multi-language world. SNAPL, 2015.
11. A. Ahmed and M. Blume. Typed closure conversion preserves observational equivalence. ICFP, 2008.
12. A. Ahmed and M. Blume. An equivalence-preserving CPS translation via multi-language semantics. ICFP, 2011.
13. A. Azevedo de Amorim. A methodology for micro-policies. PhD thesis, University of Pennsylvania, 2017.
14. A. Azevedo de Amorim, N. Collins, A. DeHon, D. Demange, C. Hriţcu, D. Pichardie, B. C. Pierce, R. Pollack, and A. Tolmach. A verified information-flow architecture. POPL, 2014.
15. A. Azevedo de Amorim, M. Dénès, N. Giannarakis, C. Hriţcu, B. C. Pierce, A. Spector-Zabusky, and A. Tolmach. Micro-policies: Formally verified, tag-based security monitors. Oakland S&P, 2015.
16. A. Azevedo de Amorim, C. Hriţcu, and B. C. Pierce. The meaning of memory safety. POST, 2018.
17. M. Backes, M. P. Grochulla, C. Hriţcu, and M. Maffei. Achieving security despite compromise using zero-knowledge. CSF, 2009.
18. D. A. Basin and C. Cremers. Know your enemy: Compromising adversaries in protocol analysis. TISSEC, 17(2):7:1–7:31, 2014.
19. A. Bittau, P. Marchenko, M. Handley, and B. Karp. Wedge: Splitting applications into reduced-privilege compartments. USENIX NSDI, 2008.
20. M. Castro and B. Liskov. Practical byzantine fault tolerance and proactive recovery. TOCS, 20(4):398–461, 2002.
21. D. Chisnall, C. Rothwell, R. N. M. Watson, J. Woodruff, M. Vadera, S. W. Moore, M. Roe, B. Davis, and P. G. Neumann. Beyond the PDP-11: Architectural support for a memory-safe C abstract machine. ASPLOS, 2015.
22. M. R. Clarkson and F. B. Schneider. Hyperproperties. JCS, 18(6):1157–1210, 2010.
23. D. Devriese, M. Patrignani, and F. Piessens. Fully-abstract compilation by approximate back-translation. POPL, 2016.
24. D. Devriese, M. Patrignani, and F. Piessens. Parametricity versus the universal type. PACMPL, 2(POPL):38:1–38:23, 2018.
25. D. Devriese, M. Patrignani, F. Piessens, and S. Keuchel. Modular, fully-abstract compilation by approximate back-translation. LMCS, 13(4), 2017.
26. D. Devriese, F. Piessens, and L. Birkedal. Reasoning about object capabilities with logical relations and effect parametricity. EuroS&P, 2016.
27. U. Dhawan, C. Hriţcu, R. Rubin, N. Vasilakis, S. Chiricescu, J. M. Smith, T. F. Knight, Jr., B. C. Pierce, and A. DeHon. Architectural support for software-defined metadata processing. ASPLOS, 2015.
28. G. J. Duck and R. H. C. Yap. EffectiveSan: Type and memory error detection using dynamically typed C/C++. PLDI, 2018.
29. A. Filinski. Linear continuations. POPL, 1992.
30. C. Fournet, A. D. Gordon, and S. Maffeis. A type discipline for authorization policies. ACM Trans. Program. Lang. Syst., 29(5):25, 2007.
31. C. Fournet, N. Swamy, J. Chen, P.-É. Dagand, P.-Y. Strub, and B. Livshits. Fully abstract compilation to JavaScript. POPL, 2013.
32. A. Gollamudi and C. Fournet. Building secure SGX enclaves using F*, C/C++ and X64. 2nd Workshop on Principles of Secure Compilation (PriSC), 2018.
33. A. D. Gordon and A. Jeffrey. Types and effects for asymmetric cryptographic protocols. JCS, 12(3-4):435–483, 2004.
34. A. D. Gordon and A. Jeffrey. Secrecy despite compromise: Types, cryptography, and the pi-calculus. CONCUR, 2005.
35. K. Gudka, R. N. M. Watson, J. Anderson, D. Chisnall, B. Davis, B. Laurie, I. Marinos, P. G. Neumann, and A. Richardson. Clean application compartmentalization with SOAAP. CCS, 2015.
36. A. Haas, A. Rossberg, D. L. Schuff, B. L. Titzer, M. Holman, D. Gohman, L. Wagner, A. Zakai, and J. F. Bastien. Bringing the web up to speed with WebAssembly. PLDI, 2016.
37. I. Haller, Y. Jeon, H. Peng, M. Payer, C. Giuffrida, H. Bos, and E. van der Kouwe. TypeSan: Practical type confusion detection. CCS, 2016.
38. C. Hathhorn, C. Ellison, and G. Rosu. Defining the undefinedness of C. PLDI, 2015.
39. The Heartbleed bug. http://heartbleed.com/, 2014.
40. Software guard extensions (SGX) programming reference, 2014.
41. ISO/IEC. ISO/IEC 9899:2011 - programming languages – C, 2011.
42. R. Jagadeesan, C. Pitcher, J. Rathke, and J. Riely. Local memory via layout randomization. CSF, 2011.
43. A. Jeffrey and J. Rathke. Java Jr: Fully abstract trace semantics for a core Java language. ESOP, 2005.
44. L. Jia, S. Sen, D. Garg, and A. Datta. A logic of programs with interface-confined code. CSF, 2015.
45. Y. Juglaret, C. Hriţcu, A. Azevedo de Amorim, B. Eng, and B. C. Pierce. Beyond good and evil: Formalizing the security guarantees of compartmentalizing compilation. CSF, 2016.
46. Y. Juglaret, C. Hriţcu, A. Azevedo de Amorim, B. C. Pierce, A. Spector-Zabusky, and A. Tolmach. Towards a fully abstract compiler using micro-policies: Secure compilation for mutually distrustful components. CoRR, abs/1510.00697, 2015.
47. J. Kang, Y. Kim, C.-K. Hur, D. Dreyer, and V. Vafeiadis. Lightweight verification of separate compilation. POPL, 2016.
48. A. Kennedy. Securing the .NET programming model. Theoretical Computer Science, 364(3):311–317, 2006.
49. D. Kilpatrick. Privman: A library for partitioning applications. USENIX FREENIX. Secure Compilation Meeting (SCM), 2017.
50. T. F. Knight, Jr., A. DeHon, A. Sutherland, U. Dhawan, A. Kwon, and S. Ray. SAFE ISA (version 3.0 with interrupts per thread), 2012.
51. R. Krebbers. The C Standard Formalized in Coq. PhD thesis, Radboud University Nijmegen, 2015.
52. J. Kroll, G. Stewart, and A. Appel. Portable software fault isolation. CSF, 2014.
53. O. Kupferman and M. Y. Vardi. Robust satisfaction. CONCUR, 1999.
54. L. Lamport and F. B. Schneider. Formal foundation for specification and verification. In Distributed Systems: Methods and Tools for Specification, An Advanced Course, 1984.
55. L. Lamport, R. E. Shostak, and M. C. Pease. The byzantine generals problem. ACM Transactions on Programming Languages and Systems, 4(3):382–401, 1982.
56. C. Lattner. What every C programmer should know about undefined behavior #1/3. LLVM Project Blog, 2011.
57. J. Lee, Y. Kim, Y. Song, C. Hur, S. Das, D. Majnemer, J. Regehr, and N. P. Lopes. Taming undefined behavior in LLVM. PLDI, 2017.
58. X. Leroy. Formal verification of a realistic compiler. CACM, 52(7):107–115, 2009.
59. X. Leroy and S. Blazy. Formal verification of a C-like memory model and its uses for verifying program transformations. JAR, 41(1):1–31, 2008.
60. G. Morrisett, G. Tan, J. Tassarotti, J.-B. Tristan, and E. Gan. RockSalt: Better, faster, stronger SFI for the x86. PLDI, 2012.
61. E. Mullen, D. Zuniga, Z. Tatlock, and D. Grossman. Verified peephole optimizations for CompCert. PLDI, 2016.
62. T. C. Murray, D. Matichuk, M. Brassil, P. Gammie, T. Bourke, S. Seefried, C. Lewis, X. Gao, and G. Klein. seL4: From general purpose to a proof of information flow enforcement. IEEE S&P, 2013.
63. M. S. New, W. J. Bowman, and A. Ahmed. Fully abstract compilation via universal embedding. ICFP, 2016.
64. Z. Paraskevopoulou, C. Hriţcu, M. Dénès, L. Lampropoulos, and B. C. Pierce. Foundational property-based testing. ITP, 2015.
65. M. Patrignani, P. Agten, R. Strackx, B. Jacobs, D. Clarke, and F. Piessens. Secure compilation to protected module architectures. TOPLAS, 2015.
66. M. Patrignani and D. Clarke. Fully abstract trace semantics for protected module architectures. CL, 42:22–45, 2015.
67. M. Patrignani, D. Devriese, and F. Piessens. On modular and fully-abstract compilation. CSF, 2016.
68. M. Patrignani and D. Garg. Robustly safe compilation. ESOP, 2019.
69. N. Provos, M. Friedl, and P. Honeyman. Preventing privilege escalation. In 12th USENIX Security Symposium, 2003.
70. J. Regehr. A guide to undefined behavior in C and C++, part 3. Embedded in Academia blog, 2010.
71. C. Reis and S. D. Gribble. Isolating web programs in modern browser architectures. EuroSys, 2009.
72. T. Sewell, S. Winwood, P. Gammie, T. C. Murray, J. Andronick, and G. Klein. seL4 enforces integrity. ITP, 2011.
73. L. Skorstengaard, D. Devriese, and L. Birkedal. Enforcing well-bracketed control flow and stack encapsulation using linear capabilities. 2nd Workshop on Principles of Secure Compilation (PriSC), 2018.
74. L. Skorstengaard, D. Devriese, and L. Birkedal. Reasoning about a machine with local capabilities - provably safe stack and return pointer management. ESOP, 2018.
75. D. Swasey, D. Garg, and D. Dreyer. Robust and compositional verification of object capability patterns. PACMPL, 1(OOPSLA):89:1–89:26, 2017.