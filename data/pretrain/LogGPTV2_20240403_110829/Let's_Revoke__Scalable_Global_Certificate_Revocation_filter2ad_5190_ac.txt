methods described earlier. The CA then signs the generated
update and uploads it to the CDN and labels it for access by
the CRV version number.
Clients update their stored CRVs by periodically requesting,
from the CDN, all updates with higher version numbers than
their current version. If a signiﬁcant time has passed since the
last update request, clients simply request the latest CRV to
replace their outdated version.
While CRVs would enable clients to download all revocation
statuses for the entire certiﬁcate space, efﬁciency can be
further enhanced by only downloading CRVs for certiﬁcates
they use. This is important to some clients, such as Internet
of Things devices, that require maximum efﬁciency due to
constraints like limited computational, storage, or energy
resources. Such clients could use a pull-based discovery
mechanism to download the CRV that corresponds to any new
7
Compressed
Uncompressed
Storage
Storage
Daily Update
Bandwidth
3 CRVs
1% Revocation
10% Revocation
50% Revocation
450 CRVs
1% Revocation
10% Revocation
50% Revocation
1.1 MB
5.5 MB
11.2 MB
1.2 MB
5.8 MB
11.2 MB
11.2 MB
11.2 MB
11.2 MB
11.2 MB
11.2 MB
11.2 MB
72 KB
407 KB
1.2 MB
82 KB
480 KB
1.4 MB
TABLE I: A storage and bandwidth comparison of different
distribution levels for CRVs representing 90M Certiﬁcates.
certiﬁcate they encounter. From that point on, the client would
request push-based updates periodically for the CRV until it
was no longer necessary. This approach conserves bandwidth
for both clients and CAs, but comes at the cost of possible
security and privacy trade-offs, which we describe later.
D. Limitations
Since Let’s Revoke requires a new certiﬁcate ﬁeld (RN)
it can only be used to revoke new certiﬁcates that adopt its
format. It is not designed to be backward compatible to handle
revocation for existing certiﬁcates. Furthermore, CAs must
accept the responsibilities of issuing these unique RNs, tracking
revocations in CRVs, and providing CRV updates to clients.
To achieve its efﬁciency, Let’s Revoke only provides the
revocation status of a given certiﬁcate. Additional information
such as revocation time and reason are not available using
CRVs. However, other revocation schemes that include these
details, like CRLs, can be supported in tandem with CRVs to
provide this additional information to requesting clients.
IV. COMPARING REVOCATION STRATEGIES
This section compares Let’s Revoke to a range of revocation
strategies based on the six criteria outlined for evaluating a
revocation strategy. We compare Let’s Revoke to two other
centralized revocation strategies (CRLite and a simple “RN
Listing” strategy) that allow clients to adopt a hard-failure
policy.7 Additionally, CRLs, OCSP, and CRLsets are compared
with Let’s Revoke because these revocation strategies are
currently used today. Our analysis is summarized in Table
II.
A. Efﬁciency
There are two primary resources for considering the
efﬁciency of a revocation strategy, namely device storage and
network bandwidth.
For CRLs and OCSP these requirements are highly variable
depending on the usage of certiﬁcates by a given client, though
average costs can be established for both of these strategies. For
7While other revocation strategies also allow clients to adopt a hard-fail
policy (such as OCSP Must-Staple [25] and RITM [8]), no other previously
proposed strategy can do so without adding new entities in the PKI ecosystem
or forcing relatively high numbers of servers to change their conﬁgurations
and key management practices.
8
CRLs, the average CRL requires 173 KB in both bandwidth
and cache storage, as determined by an Internet-wide scan
that we describe in Section V. OCSP requests require 1.3 KB
for again both bandwidth and storage costs. CRLSets have a
ﬁxed maximum size requiring 250 KB of device storage and
network bandwidth daily. However, these three strategies do
not provide secure coverage for all revocation statuses.
To provide a global revocation system comparable to Let’s
Revoke and CRLite, the above strategies could be used or
extended to generate a list of all the revocation statuses for
every non-expired certiﬁcate each day. As a model for such a
listing strategy, we generated a list of the revoked certiﬁcates
using 32-bit binary representations of the associated revocation
numbers as unique identiﬁers. This Revocation Number Listing
(RN Listing) strategy requires signiﬁcantly fewer bits per
revocation than both traditional CRLs and CRLSets, which use
serial numbers and are typically around three to four times the
size of a revocation number. CRLs also include the date of
revocation and, in some situations, the reason for revocation.
Thus, the listing model we used provides a reasonable lower
bound for a list of revoked certiﬁcates.
To compare the storage requirements of Let’s Revoke against
both CRLite and RN Listing, we utilized all three strategies
to store information for a certiﬁcate space containing one
million certiﬁcates8 at various revocation percentages. For
each of these strategies, we ran 100 simulations within two
ranges of revocation percentage, incrementing the revocation
percentage evenly through the range. The ﬁrst ranged from
0-100%, which demonstrates the scalability of the strategy as
revocation percentages rise dramatically. The second ranged
from 0-4% to show a ﬁner granularity between strategies at
more typical revocation percentages.
For each simulation of Let’s Revoke, we built and
compressed one large CRV representing all one million
certiﬁcates by randomly selecting bits equal to the number of
revoked certiﬁcates and setting each of these to 1. We serialized
the resulting CRV into a binary ﬁle and XZ compressed the
ﬁle.
Every CRLite simulation created a Bloom ﬁlter cascade9
using the source code provided by the authors of CRLite.
Because the layers of the Bloom ﬁlter cascade form a relatively
patternless binary stream, XZ compression was not effective.
We also compared Let’s Revoke to a combinadics
representation, which is a lower bound for representing any
combination of values. The combinadics, or combinatorial,
number system uses a lexicographic ordering to rank a
combination instance, so the index alone denotes it. Because
revocation numbers provide an obvious ordering, this type
of representation is possible. For example, given 1 million
certiﬁcates with a 1% revocation rate (10,000 revocations), there
8One million certiﬁcates roughly corresponds to the daily issuance of the
CA Let’s Encrypt [12].
9We used the following parameters in our simulations:‘p’= 0.5 as
recommended by the authors; for ‘r’ and ‘s’, we chose values 102.5% times
= r ∗ √
the receptive certiﬁcates used, allowing room for growth and daily deltas; ‘p1’
p/s.
y
c
n
e
i
c
ﬁ
f
E
CRL
OCSP
CRLSet
RN Listing
CRLite
Let’s Revoke
173 KB per CRL†
1.3 KB per request [11]
250 KB per day
Initially 5.1 MB; 114 KB per day∗
Initially 3.1 MB; 408 KB per day∗
Initially 2.2 MB; 114 KB per day∗
s
s
e
n
i
l
e
m
T
i
7 Days
4 Days
1 Day
1 Day
1 Day
1 Day
y
c
a
v
i
r
P
g
n
i
v
r
e
s
e
r
P
Yes
No
Yes
Yes
Yes
Yes
e
r
u
l
i
a
F
l
e
d
o
M
Soft
Soft
Soft
Hard
Hard
Hard
y
t
i
l
i
b
a
y
o
l
p
e
D
Deployed
Deployed
Deployed
Incremental
Incremental
Incremental
y
t
i
l
i
b
a
t
i
d
u
A
Yes
Yes
No
Yes
Yes
Yes
TABLE II: Comparison of Let’s Revoke to other revocation strategies.
†: The average size of CRLs in our dataset.
∗: Simulated values at 2% revocation rate, 1% daily expiration rate, using 100 Million certiﬁcates.
are approximately 1024,340 or 280,856 possible combinations of
revoked certiﬁcates. A combination of certiﬁcates given these
parameters can be denoted with its index in 80,856 bits (10.2
KB). While the combinadics representation requires even less
storage space than Let’s Revoke, unranking algorithms that
convert a combinatorial index back into the expanded form have
expensive space and time costs, rendering them impractical for
certiﬁcate revocation.
Figure 3 summarizes the storage requirements across all
revocation percentages, while Figure 4 shows the comparison
at the low revocation percentages likely to be found in daily
use. While there are more efﬁcient methods of providing
update information (i.e., delta updates), it is important to note
that the compressed storage requirements for each strategy
represent the maximum required bandwidth. For low revocation
percentages (<0.02) all strategies compress to approximately
the same size. Both other strategies quickly outperform the RN
Listing strategy. Around a revocation percentage of 0.5% RN
Listing requires double the storage requirements of the other
strategies. CRLite and CRVs remain competitive until about
2.0% revocation, where CRVs begin to outperform CRLite
signiﬁcantly. Even more interesting is the close relationship
between the size of the combinadics representation and that of
the compressed CRV. While the combinadics representation is
smaller, it is only marginally so, indicating that a compressed
CRV is close to the theoretically minimal size for representing
a set of randomly revoked certiﬁcates.
Uncompressed CRVs require signiﬁcantly more storage
space than either RN Listing and CRLite until relatively high
revocation percentages. Thus, storing an uncompressed CRV
generally requires signiﬁcantly more storage than either of the
other two considered strategies. However, this can be avoided
by only decompressing the CRV at the time of use, which
allows end clients to choose between storage and computational
efﬁciency. Our testing showed that revocation checks for a
single certiﬁcate using an uncompressed CRV representing 1M
certiﬁcates ﬁnished in under 1 ms, while the same checks took
Fig. 3: Storage sizes for different
representing one million certiﬁcates
revocation strategies
Fig. 4: Storage sizes for different
revocation strategies
representing one million certiﬁcates in typical ranges at higher
detail.
9