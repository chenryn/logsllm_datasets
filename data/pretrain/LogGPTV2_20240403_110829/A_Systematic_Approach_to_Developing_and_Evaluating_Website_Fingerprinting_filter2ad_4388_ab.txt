as:
P = (cid:104)(t1, (cid:96)1), (t2, (cid:96)2), ..., (tn, (cid:96)n)(cid:105)
In the above, ti is the difference in time observed between packets
i and i − 1 (interpacket timing), with t1 = 0; (cid:96)i is the byte length
of packet i. The sequence length, |P|, is equal to n. We write
Pt and P(cid:96) as the sequences of only the interpacket times and only
the packet lengths, respectively. We indicate the packet length as a
positive value if the packet is outgoing and as a negative value if it
is incoming.
Unique Packet Lengths: Packet lengths are a simple and strong
feature of a web page. GET request lengths are partly determined
by the length of the resource name. Incoming packets are almost
always sent at the Maximum Transmission Unit (MTU), with the
length of the last packet indicating the size of the resource (modulo
the MTU).
Most packet lengths of a page are unlikely to change unless re-
source lengths change. WF attacks almost always consider packet
lengths unless they are designed for the Tor scenario, in which case
packet lengths are covered. When unspeciﬁed, we assume that
packet lengths are not hidden from the attacker.
Mathematically, sequences P and P (cid:48) are said to have different
unique packet lengths iff their sets of packet lengths are different –
i.e.,
(∃L ∈ P(cid:96)|L /∈ P
(cid:96)) ∨ (∃L ∈ P
(cid:48)
(cid:96)|L /∈ P(cid:96))
(cid:48)
Packet Length Frequency: Packet length frequency is the num-
ber of times each unique packet length occurs. The number of
incoming packets at MTU size is a rough estimation of the total
size of the page, which changes due to random advertisements and
updated content. We will subsequently show that all current WF
defenses fail to cover the total trafﬁc size, as doing so is difﬁcult
and would necessarily incur a large trafﬁc overhead. Therefore,
the poor performance of most early WF attacks [6, 9, 10] may be
attributed to the fact that they explicitly discard packet length fre-
quencies.
Suppose nL(P(cid:96)) is the number of times packet length L appears
in P(cid:96). P and P (cid:48) are said be have different packet length frequencies
iff their packet lengths occur at different frequencies while exclud-
ing packet lengths that are unique to either P or P (cid:48) – i.e.,
∃L|nL(P(cid:96)) (cid:54)= nL(P
(cid:96)) ∧ nL(P(cid:96)) > 0 ∧ nL(P
(cid:48)
(cid:48)
(cid:96)) > 0
Packet Ordering: The structure of a page induces a logical or-
der in its packet sequence. As an example, a GET packet for a
resource can only be sent once the reference to that resource is
received by the client. An attacker may be able to infer informa-
tion about the content of each packet from observing packet order-
ing. Further, packet ordering depends on network conditions: it
may vary due to bandwidth and latency, and it may be affected by
changing the parameters for persistent HTTP connections, pipelin-
ing, and so on. Tor developers have implemented a prototype de-
fense based on packet ordering by randomizing request order (see
Section 4.1).
We denote M(cid:96) as the multiset of packet lengths in P(cid:96), without or-
dering. We say that two sequences P and P (cid:48) have different packet
ordering iff:
M(cid:96) = M
(cid:96) ∧ P(cid:96) (cid:54)= P
(cid:48)
(cid:48)
(cid:96)
Interpacket Timing: Interpacket times often reveal the logi-
cal relationship between packets. For example, viewing from the
client’s end, the outgoing server connection SYN and the incoming
SYN-ACK will differ by a round-trip time; so will the GET request
and the ﬁrst packet of that resource. If the attacker’s tap is near the
client, then the attacker can infer that an outgoing packet and an
incoming packet cannot be logically dependent if their interpacket
time is less than one RTT.
Suppose P and P (cid:48) have sequence lengths |P| and |P (cid:48)|. P and
P (cid:48) are said to have different interpacket timings iff their timings
are different – i.e.,
∃i, 1 ≤ i ≤ min(|P|,|P
(cid:48)|) : (Pt)i (cid:54)=(cid:0)P
(cid:48)
t
(cid:1)
i
FACT 1. If P (cid:54)= P (cid:48), then they must differ in at least one of the
four features above.
This fact demonstrates that our choice of features is, in some
sense, complete, in that it represents any difference between two
packet sequences. We can therefore claim that successful attacks
should expose at least one of those four features between packet
sequences, while defenses are perfectly effective if they can hide
all four features.
FACT 2. Given any packet sequence P and any subset of the
above features, there exists a packet sequence P (cid:48) such that P and
P (cid:48) only differ in this subset of features, with the exception that
different packet ordering implies that unique packet lengths and
packet length frequencies do not differ.
This fact implies that our features are somewhat independent of
each other (except packet ordering). It should therefore be possible
to ﬁnd generators that change one feature without affecting the oth-
ers, allowing us to pinpoint which features various defenses attempt
to cover. It also shows that the features considered in this paper are
exhaustive, even for data-dependent features (For example, if the
size of a response depends on the content of a cookie).
3.2 Comparative Methodology
To determine if a defense is able to hide a feature, we apply the
defense to two classes, C and C(cid:48), which differ only by that feature.
Then, we say that a defense is successful in hiding the feature if af-
ter applying the defense, there is no discernible difference between
C and C(cid:48).
We use a generator G to transform C into C(cid:48) by causing a change
in some feature of each packet sequence P ∈ C and inserting the
output into C(cid:48). We parameterize G(v) by v, a non-negative in-
teger such that the greater the value, the more “different” P and
P (cid:48) = G(v)(P ) will be; we require G(0)(P ) = P . We design each
generator to modify only one speciﬁc feature. G(v) operates from
the start of the packet sequence. Informally, G(v) is equivalent to
G(1) repeated v times, possibly from different starting points in the
packet sequence. For all of our generators, this interpretation en-
sures that v functions as a magnitude. The designed generators are
not randomized and each generator may accept values of v up to
180 or |P|/5, whichever is lower. None of the generators produce
a packet length greater than the MTU. We give a textual description
of each generator below and mathematically deﬁne each generator
G(v)
in Table 2. More details of the generators can be found in our
tech report. [17]
Small Packet-Length Changes (G1): All packet lengths are in-
i
creased by v, up to MTU.
Large Packet-Length Changes (G2): v packet lengths are in-
creased by 1000, up to MTU.
Packet-Length Diffusion (G3): The lengths of v packet are in-
creased by their position divided by 5, up to MTU.
Appended Incoming Packets (G4): v incoming MTU packets
are appended to the end.
Appended Outgoing Packets (G5): v outgoing packets are ap-
pended to the end, their lengths being the lengths of the ﬁrst outgo-
ing packets of P .
Inserted Incoming Packets (G6): v incoming MTU packets are
added, one per 5 packets.
the previous packet.
Adjacent Transpositions (G7): v packets are transposed with
Short-Distance Transpositions (G8): v packets are transposed
with the packet 4 elements ago.
Long-Distance Transpositions (G9): v packets are transposed
with the packet 19 elements ago.
Delays (G10): Each packet is delayed by a linearly increasing
amount of time, multiplied by v.
3.3 Classiﬁcation and Experimental Setup
In order to understand the signiﬁcance of these trafﬁc features
for ﬁngerprinting attacks, we focus on distinguishing between two
classes:
C = {P1, P2, ..., P400}
(cid:48)
C
= {G(v)(P1), G(v)(P2), ..., G(v)(P400)}
These are the original class (C) and the generator-modiﬁed class
(C(cid:48)) with one feature changed. Since our generators operate on
packet sequences, the elements of C and C(cid:48) are packet sequences.
We construct C by connecting to bbc.co.uk 400 times with
caching disabled. The reason we do so is that C should contain
packet sequences of the same page rather than different pages, be-
cause WF attack classiﬁers are designed to tolerate the randomness
within the same page while exposing the differences between dif-
ferent pages. A successful classiﬁer should therefore be able to dis-
tinguish C and C(cid:48) despite the randomness in C (and therefore C(cid:48)).
On the other hand, the elements of C need to differ from each other;
this will allow us to measure how sensitive each defense is to the
train and C(cid:48)
generators’ operations. The page we chose has a suitable amount
of randomness and has therefore been difﬁcult to classify [18]. We
use the ﬁrst 200 elements of classes C and C(cid:48) for training and the
last 200 elements for testing our feature classiﬁers described below.
The training and testing sets are denoted Ctrain and Ctest, with the
generator-modiﬁed sets being C(cid:48)
test. We use four dif-
ferent feature classiﬁers, each one specializing on differentiating
one speciﬁc feature.
Unique Packet-Lengths (F1): Given a unique packet length in
Ptest, if it is in any packet sequence P ∈ C and not in any P (cid:48) ∈ C(cid:48),
add 1 to the score of class C and vice versa. This is a modiﬁed
version of the early Jaccard co-efﬁcient classiﬁer introduced in [9].
Packet-Length Frequencies (F2): For training, we count the
total number of bytes contained in incoming and outgoing packets,
as well as the total number of incoming and outgoing packets, and
take the mean and standard deviation over the packet sequences in
each class. Each testing packet sequence is then scored using the
normal distribution kernel against those four values for each class,
with the incoming and outgoing packets scored separately and then
multiplied. This classiﬁer is a simpliﬁed version of the Naïve Bayes
classiﬁer also described in [9].
Packet Ordering (F3): For testing, each packet length in the se-
quence (discarding direction) is compared to the mean of all train-
ing packet lengths at that position. This classiﬁer is derived from
the Cross Correlation classiﬁer described in [2].
Interpacket Timing (F4): Classiﬁcation here is based only on
total elapsed time. We use this classiﬁer because G10 is a delay.
This reveals whether or not the total load time of a page would still
be a useful feature after the defense is applied.
The defense D is applied to each element of Ctrain and C(cid:48)
Since the objective is simply to ﬁnd the difference between the
two classes that differ only by a single feature, the above four single
feature classiﬁers are sufﬁcient.
train
to produce D(Ctrain) and D(C(cid:48)
train); the feature classiﬁer is then
trained to distinguish between them. Finally, D is applied to Ctest
and C(cid:48)
test and its effectiveness is measured by the feature classi-
ﬁers. The effectiveness of the defense D is measured by the value
of v before the classiﬁer is able to distinguish between the two
classes with reasonable levels of accuracy (.55 and .75) – i.e., the
magnitude of differences induced between C and C(cid:48) before the
classiﬁer can distinguish between them.
Our experimental setup is as follows. We load pages over a
100 Mbps Ethernet connection with MTU set at 1500. For auto-
mated page loading, we used iMacros 9.00 on Firefox 23.0. We
collected data with tcpdump and parsed the data into packet se-
quences with our code. We implemented all of the classiﬁers and
simulated defenses in this paper in a combination of Python, C++,
and C, and all of them are available upon request.
4. COMPARISON OF DEFENSES
In this section, we survey the current state-of-the-art of WF de-
fenses and present the results of our comparative evaluation based
on the methodology described in Section 3. We then analyze our
ﬁndings and try to shed light on previously unexplained results.
Our simulations of each of the listed defenses operate on packet
sequences (packet lengths and timings, but no content) rather than
raw packets; they do not directly modify packets during page load-
ing. This allows us to observe if a defense is able to cover a feature
modiﬁed by a generator.
4.1 Simulated Defenses
We simulate and compare the following network level ﬁnger-
printing defenses:
Feature type
Unique packet sizes
Packet size frequencies
Packet ordering
Interpacket timing
Generator name
Small packet size changes
Large packet size changes
Diffusing packet sizes
Append inbound MTU packets
Append outbound packets
Insert inbound MTU packets
Adjacent transpositions
Short distance transpositions
Long distance transpositions
Delays
#
1
2
3
4
5
6
7
8
9
10
Transformation for G(v)
For 0  |Pout|). di is the direction (1=outgoing, -1=incoming) of pi.
A(P, i, p) appends packet p after pi. T (P, i, j) transposes the packet lengths of pi and pj.