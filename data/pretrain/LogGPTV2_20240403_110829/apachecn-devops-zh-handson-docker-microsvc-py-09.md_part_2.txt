    *   有新的测试。
    *   测试错误条件。
    *   文档已正确更新。
    *   任何新的端点都符合标准。
    *   架构图已更新。
*   检查代码和编写代码不是一回事。总会有不一致的地方(例如，这个变量名可以更改)，但是需要审查的是是否需要实现这样的更改。吹毛求疵会侵蚀团队成员之间的信任。
*   要审查的代码越大，就越难做。最好以小的增量工作，这与持续集成的原则配合得很好。
*   所有守则都应在平等的基础上进行审查。这包括高级开发人员的代码，应该鼓励初级开发人员留下诚实的反馈。这有助于代码所有权及其公平性的增长。
*   代码审查是一种对话。评论不一定意味着评论者的反馈必须在你没有首先质疑的情况下实现。它开启了一个关于改进代码的对话，做出澄清和推回完全没问题。有时，处理请求的正确方式，也就是更改代码的一部分，是留下一个注释，解释为什么以特定的方式这样做。
*   评论有助于传播关于代码库的知识。不过，这不是万灵药。代码评审往往会陷入隧道式视野，只关注小问题，如错别字和局部代码片段，而不关注更大的元素。这就是为什么以小增量实现特性很重要:帮助你周围的人消化变化。
*   留下赞赏的评论很重要。创造一种欣赏写得好的代码的文化。只突出不好的地方会让作者的复习过程很痛苦。
*   批评应该针对代码，而不是程序员。确保你的审查是文明的。在这一步中，我们希望确保代码的高质量；作为评论者，你不想让自己看起来高人一等。
Code reviews can be stressful for those who aren't used to them. Some companies are creating principles and ideas to make this process less painful. A good example can be found at [https://www.recurse.com/social-rules](https://www.recurse.com/social-rules). Don't be afraid to define and share your own principles.
*   重要的是，代码可以在任何时候都得到批准，即使团队中有人休假或生病。确保您将批准授予团队的多个成员，以便批准过程本身不会成为瓶颈。
当您开始生成代码评审时，确保团队领导将这些考虑事项牢记在心，并强调为什么所有代码都要评审。
It is worth emphasizing how code reviews are not a technological solution, but a people-related one. As such, they can suffer from people-related problems such as big egos, adversarial discussions, or non-productive debates.
The microservice architecture is fit for big systems that have multiple people working on them. Teamwork is crucial. Part of that is ensuring that the code doesn't belong to a single person, but to a whole team. Code reviews are a great tool to that end, but be sure to actively look for healthy ones.
Over time, a consensus will develop and a lot of code will be developed consistently. In a healthy team, the amount of time that's spent on reviews should reduce.
随着时间的推移，团队将定期执行代码评审，但是在开始时设置这些基础可能会很复杂。确保你有时间介绍他们。正如我们之前提到的，一旦特性准备好了，我们就需要批准它。批准新特性的代码并将其合并到主分支是特性审查的最后阶段，但它仍然需要发布。发布在代码控制之下，它们也需要被审查。
# 批准发布
使用 GitOps 原则允许我们启用相同的审查和批准方法，以便我们可以在 Kubernetes 基础架构中进行更改。正如我们之前提到的，基础设施是由 Kubernetes 中的 YAML 文件定义的，这一事实允许我们控制这些变化。
对 Kubernetes 集群所做的任何更改都可能会受到拉取请求和审查方法的影响。这使得批准集群的发布成为一个简单的过程。
这有助于最大限度地减少问题，因为团队中有更多的成员参与到变更中，他们对基础设施的了解也更好。这与允许团队控制他们自己的部署和基础设施的 DevOps 原则很好地配合。
然而，GitOps 中的基础设施变更往往比常规的代码审查更容易审查。总的来说，它们是以非常小的增量完成的，大多数变化都非常简单，以至于引发争论的可能性极小。
一般来说，尽量使任何基础设施的变化尽可能小。基础设施变更的风险更大，因为错误可能会导致其中重要的部分瘫痪。变化越小，风险就越小，诊断任何问题就越容易。
我们提出的关于代码评审的所有建议也有其作用。最重要的一点是包括一些参考基础设施关键部分的指导方针。
Some sections of the infrastructure may be under the GitHub code owner's protection. This makes it mandatory for certain engineers to approve changes to critical parts of the infrastructure. Take a look at the documentation for more information: [https://help.github.com/en/articles/about-code-owners](https://help.github.com/en/articles/about-code-owners).
由于基础设施被定义为存储在 GitHub 中的代码，这也使得复制基础设施变得容易，从而大大简化了多个环境的生成。
# 设置多个环境
在 Kubernetes 下创建、复制和删除名称空间的简单性大大减少了以前保留环境的多个副本来复制底层基础架构的负担。你可以利用这一点。
基于我们前面提到的 GitOps 原则，我们可以定义新的名称空间来生成新的集群。我们可以使用另一个分支(例如，使用生产集群的`master`分支和演示集群的`demo`分支)，或者复制包含集群定义的文件并更改名称空间。
You can use different physical Kubernetes clusters for different purposes. It's better to leave the production cluster as not being shared with any other environment to reduce risks. However, every other environment could live in the same cluster, which won't affect external customers.
一些特性请求足以证明开发团队知道该做什么，比如错误报告。然而，其他人在开发过程中可能需要更多的测试和交流，以确保他们满足需求。当我们检查一个新特性是否对预期的外部用户有用，或者可能是一个更具探索性的特性时，情况可能就是这样。在这种情况下，我们需要调用一个外部方，即特性的最终批准者:*涉众*。
A stakeholder is a term from project management that specifies a third party, that is, the final user of a product or a user who's impacted by it. Here, we use the term to specify someone who's interested in a feature but external to the team, so they can't define the feature requirements from within. A stakeholder can be, for example, a manager, a customer, the CEO of the company, or a user of an internal tool. 
任何不得不处理涉众模糊定义的请求的开发人员，比如*允许按名字搜索*，都不得不调整它:*不，不是按名字，而是按姓氏*。
Ensure that you define a proper end to these kinds of tasks. Stakeholder feedback can be endless if it's allowed to run without limits. Define what is and is not included in it, as well as any deadlines, beforehand.
为了运行测试并确保正在开发的特性朝着正确的方向发展，您可以创建一个或多个演示环境，在这些环境中，您将在工作合并到主分支之前部署正在进行的工作。这将有助于我们与利益相关者分享这项工作，这样他们就可以在功能完成之前给我们反馈，而我们不必在生产环境中发布它。
正如我们在前面几章中看到的，在 Kubernetes 中生成一个新环境很容易。我们需要创建一个新的命名空间，然后复制集群的生产定义，从而改变命名空间。这将创建环境的副本。
更改正在开发的微服务的特定版本将允许我们创建它的工作版本。较新的版本可以像往常一样部署在这个演示环境中。
This is a simplified version. You may need to make changes between the production environment and demo environments, such as the number of replicas, and database setup. In such cases, a *template environment* could be used as a reference so that it's ready to be copied.
其他环境，如登台，可以以类似的方式创建，目的是创建测试，确保已经部署到生产中的代码能够按预期工作。这些测试可以是自动的，但是如果我们想检查用户体验是否足够，它们也可以是手动的。
A staging environment is a setup that works as a replica that's as faithful as possible to the production environment, which means we can run tests to provide assurance that the deployment in production will work. Staging normally helps us verify that the deployment process will be correct, as well as any final tests.
Staging environments are typically very expensive to run. After all, they are a copy of a production environment. With Kubernetes, you can replicate the production environment easily and reduce the required physical infrastructure. You can even start and stop it when it is not in use to reduce costs.
您可以使用多个环境以类似的方式创建级联部署结构。这意味着标签需要部署到登台环境中，并在进入生产环境之前获得批准。
现在让我们从开发人员的角度来看看如何处理这种结构。
# 扩展工作流程并使其发挥作用
实现这种工作方式的一些挑战包括创建一种提供充分反馈循环的文化，以及在快速检查新代码的同时仔细检查它。等待评审是一种被阻止的状态，它阻止开发人员实现被评审的特性。
虽然这段等待时间可以用于其他目的，但无法进步会迅速降低生产率。要么开发人员将并行保留一些特性，这从上下文切换的角度来看是很有问题的，要么他们需要等待并滚动他们的拇指，直到审查完成。
The context switch is probably the most serious killer of productivity. One of the keys to keeping your team's productivity high is being able to start and finish a task. If the task is small enough, it will be finished quickly, so swapping between projects is easier. However, working on two or more tasks at the same time is a very bad practice.
If this happens often, try to divide your tasks into smaller chunks.
为了能够平衡彻底检查代码和减少阻塞时间，有一些元素需要记住。
# 审核和批准由整个团队完成
任何时候都需要有足够的评审员。如果只有开发人员有经验，评审可能最终只能由团队中最资深的人来完成，例如团队领导。虽然这个人在原则上可能是更好的评审员，但从长远来看，这种结构会损害团队，因为评审员不能做任何其他事情。如果审阅者由于任何原因(如生病或度假)不在，开发和发布阶段的进展也将受阻。
相反，让整个团队都能够审查他们同行的代码。即使一个资深的贡献者在教团队的其他成员如何回顾方面扮演了一个更加积极主动的角色，过一段时间后，大多数回顾不应该需要他们的帮助。
最初，虽然实现这个过程需要积极的指导，但这通常会由团队的高级成员来领导。审查代码是一种可训练的能力，目标是在一段时间后，每个人都能够运行审查并被允许批准拉取请求。
部署请求遵循相同的过程。最终，团队中的每个人，或者至少相当数量的成员，应该能够部署一个版本。不过，最初的主要评审者可能是不同的人。
审查一个版本的最佳人选很可能是关于如何配置 Kubernetes 基础设施的专家，而不是微服务代码的专家。
# 理解不是每个批准都是一样的
请记住，特性的不同阶段并不同等重要。代码评审的早期过程是关于确保代码是可读的，并且保持质量标准。在早期阶段，代码会有相对较多的注释，并且会有更多的讨论，因为需要调整更多的元素。
A big part of reviews is creating code that is *understandable enough* that other members of the team understand it. Although some people claim that code reviews make everyone aware of the changes that other members of the team are implementing, in my experience, reviewers are not that aware of specific features. 
A good review, however, will ensure that nothing cryptic is being introduced into the code base and that the core elements are respected (elements such as introducing tests, keeping documentation up to date, and keeping code readable). As we suggested previously in this chapter, try to create an explicit list of things to check. It will help you make the reviews and code more consistent.
新特性的部署阶段只需要我们检查微服务的版本是否改变，以及基础设施的其余部分是否完好无损。这些通常非常小；他们中的大多数人都反复检查没有错别字，并且要更改的微服务是正确的。
# 为发布定义清晰的路径
拥有一个简单明了的过程有助于每个相关人员清楚地了解一个特性是如何从开发到发布到生产环境的。例如，基于我们已经讨论过的想法，我们最终可能会得到一个类似于下图所示的部署路径:
![](img/22480f67-8ebb-41fe-8395-f832aa7b5909.png)
对于这些步骤中的每一步，我们都需要验证该步骤是否正确。正如我们在[第 4 章](04.html)、*创建管道和工作流*中看到的，自动测试确保任何合并到主分支中的东西都不会破坏现有的构建。这涵盖了直到**创建标签**步骤的前一个图表。
同样，也有一种方法可以在应用后验证部署是否成功。以下是关于这方面的一些想法:
*   手动测试，检查部署的微服务是否按预期工作
*   自动化测试，例如在[第 4 章](04.html)、*创建管道和工作流*中描述的测试
*   检查要部署的映像是否已使用 Kubernetes 工具或版本 API 正确部署
一旦一个部署阶段成功完成，下一个阶段就可以开始了。
在非生产环境中执行部署将中断生产的风险降至最低，因为这将确保部署过程是正确的。该过程需要足够快以允许快速部署，从而使它们尽可能小。
The full process from merging into the main branch until the new version is released into the production environment should take less than a few hours, but ideally less than that.