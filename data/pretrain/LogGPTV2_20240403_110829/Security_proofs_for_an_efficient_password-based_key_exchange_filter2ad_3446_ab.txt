P (A) = 2 Pr[b = b
Advake
is over all the random coins of the adversary and all the
oracles. The protocol P is said to be AKE-secure if A’s
advantage is negligible in the security parameter.
Authentication. Another goal of the adversary is to imper-
sonate the client or the server. In the present paper, we focus
on unilateral authentication of the client, thus we denote by
(A) the probability that A successfully imperson-
Succc−auth
ates a client instance in an execution of P : this means that
a server would accept a key while the latter is shared with
no client. The protocol P is said to be C-Auth-secure if
such a probability is negligible in the security parameter.
2.3 Computational Difﬁe-Hellman
P
Assumption
Let G = (cid:5)g(cid:6) be a ﬁnite cyclic group of order a (cid:15)-bit prime
number q, where the operation is denoted multiplicatively.
A (t, ε)-CDH attacker in G is a probabilistic machine ∆
running in time t such that
Succcdh
G (∆) = Pr
x,y
[∆(g
x
y
, g
) = g
xy
] ≥ ε
where the probability is taken over the random values x and
y. The CDH-Problem is (t, ε)-intractable if there is no
(t, ε)-attacker in G. The CDH-assumption states that is the
case for all polynomial t and any non-negligible ε.
3. ONE-ENCRYPTION KEY EXCHANGE
In this section, we describe OEKE, a “simpliﬁed” variant
of a AuthA mode of operation [4], and prove its security
in the random oracle and the ideal-cipher models. At the
core of this variant resides only one ﬂow of the basic Diﬃe-
Hellman key exchange encrypted under the password and
two protocol entities holding the same password. It therefore
slightly diﬀers from the original EKE [3, 6] in the sense that
only one ﬂow is encrypted using the password; instead of the
two as usually done. But then, it is clear that at least one
authentication ﬂow has to be sent. We prove this is enough
to satisfy the above security notions.
3.1 Description of the Scheme
The arithmetic is in a ﬁnite cyclic group G = (cid:5)g(cid:6) of or-
der a (cid:15)-bit prime number q, where the operation is denoted
multiplicatively. Hash functions from {0, 1}(cid:8) to {0, 1}(cid:9)0 and
{0, 1}(cid:9)1 are denoted H0 and H1. A block cipher is denoted
(Ek,Dk) where k ∈ Password. We also deﬁne ¯G to be equal
to G\{1}, thus ¯G = {gx | x ∈ Z
q}.
(cid:8)
As illustrated on Figure 1 (with an honest execution of the
OEKE protocol), the protocol runs between a client U and
a server S, and the session-key space SK associated to this
protocol is {0, 1}(cid:9)0 equipped with a uniform distribution.
Client and server initially share a low-quality string pw , the
password, uniformly drawn from the dictionary Password.
The protocol consists of three ﬂows. The client chooses
a random exponent x and computes the value gx which he
sends to the server. The server in turn chooses a random
exponent y, computes the value gy, and encrypts the latter
under the password pw before to send it out on the wire.
Upon receiving the client’s ﬂow, the server computes the
Diﬃe-Hellman secret value gxy, and from it the session key
sk. Upon receiving the server’s ﬂow, the client decrypts the
Client U
Server S
x
pw
accept ← false
terminate ← false
R← [1, q − 1]
X ← gx
Y ← Dpw (Y (cid:8))
KU ← Y x
Auth ← H1(U(cid:18)S(cid:18)X(cid:18)Y (cid:18)KU )
skU ← H0(U(cid:18)S(cid:18)X(cid:18)Y (cid:18)KU )
accept ← true
terminate ← true
pw
accept ← false
terminate ← false
R← [1, q − 1]
y
U, X
−−−−−−−−−−−→ Y ← gy
←−−−−−−−−−−− Y (cid:8) ← Epw (Y )
S, Y
(cid:8)
KS ← X y
−−−−−−−−−−−→ Auth ?
Auth
= H1(U(cid:18)S(cid:18)X(cid:18)Y (cid:18)KS)
if true, accept ← true
skS ← H0(U(cid:18)S(cid:18)X(cid:18)Y (cid:18)KS)
terminate ← true
Figure 1: An execution of the protocol OEKE, run by the client U and the server S. The session key is
sk = H0(U(cid:18)S(cid:18)X(cid:18)Y (cid:18)Y x) = H0(U(cid:18)S(cid:18)X(cid:18)Y (cid:18)X y).
ciphertext, computes the Diﬃe-Hellman secret value, and
an authentication tag Auth for client-to-server unilateral au-
thentication. The client then sends out this authenticator.
If the authenticator veriﬁes on the server side, the client and
the server have successfully exchanged the session key sk.
3.2 Semantic Security
In this section, we assert that under reasonable and well-
deﬁned intractability assumptions the protocol securely dis-
tributes session keys. More precisely, in this section, we
deal with the semantic security goal. We consider the uni-
lateral authentication goal in the next section. In the proof
below, we do not consider forward-secrecy, for simplicity,
but the semantic security still holds in this context, with
slightly diﬀerent bounds. The details can be found in the
full version [13]. However, remember that any security result
considers concurrent executions.
Theorem 1. Let us consider the OEKE protocol, where
SK is the session-key space and Password is a ﬁnite dictio-
nary of size N equipped with the uniform distribution. Let A
be an adversary against the AKE security of OEKE within a
time bound t, with less than qs interactions with the parties
and qp passive eavesdroppings, and, asking qh hash-queries
and qe encryption/decryption queries. Then we have
Advake
oeke(A) ≤ 3 × qs
N
+ 8qh × Succcdh
G (t
(cid:1)
)
(2qe + 3qs + 3qp)2
q2
h + 4qs
+
q − 1
+
.
2(cid:9)1
(cid:1) ≤ t + (qs + qp + qe + 1) · τG, with τG denoting the
where t
computational time for an exponentiation in G. (Recall that
q is the order of G.)
This theorem shows that the OEKE protocol is secure
against dictionary attacks since the advantage of the adver-
sary essentially grows with the ratio of interactions (num-
ber of Send-queries) to the number of passwords. This is
particularly signiﬁcant in practice since a password may ex-
pire once a number of failed interactions has been achieved,
whereas adversary’s capability to enumerate passwords oﬀ-
line is only limited by its computational power. Of course,
this security result only holds provided that the adversary
does not solve the computational Diﬃe-Hellman problem.
Proof of Theorem 1. In this section we incrementally
deﬁne a sequence of games starting at the real game G0 and
ending up at G8.
Game G0: This is the real attack game, in the random or-
acle and ideal-cipher models. Several oracles are thus avail-
able to the adversary: two hash oracles (H0 and H1), the
encryption/decryption oracles (E and D), and all the in-
stances U i and Sj (in order to cover concurrent executions).
We deﬁne several events in any game Gn:
• event Sn occurs if b = b
(cid:1)
, where b is the bit involved
(cid:1)
in the Test-query, and b
is the output of the AKE-
adversary;
• event Encryptn occurs if A submits a data it has en-
crypted by itself using the password;
• event Authn occurs if A submits an authenticator Auth
that will be accepted by the server and that has been
built by the adversary itself.
By deﬁnition,
Advake
oeke(A) = 2 Pr[S0] − 1.
(1)
(cid:1)
In the games below, we furthermore assume that when
the game aborts or stops with no answer b
outputted by the
adversary A, we choose this bit b
at random, which in turn
deﬁnes the actual value of the event Sk. Moreover, if the
adversary has not ﬁnished playing the game after qs Send-
queries or lasts for more than time t, we stop the game (and
), where qs and t are predetermined
choose a random bit b
upper-bounds.
(cid:1)
(cid:1)
Game G1:
In this game, we simulate the hash oracles
(H0 and H1, but also two additional hash functions H2 :
{0, 1}(cid:8) → {0, 1}(cid:9)2 and H3 : {0, 1}(cid:8) → {0, 1}(cid:9)3 , with (cid:15)2 = (cid:15)0
and (cid:15)3 = (cid:15)1, that will appear in Game G7) and the encryp-
tion/decryption oracles, as usual by maintaining a hash list
ΛH (and another list ΛA containing the hash-queries asked
by the adversary itself) and an encryption list ΛE . We also
simulate all the instances, as the real players would do, for
the Send-queries and for the Execute, Reveal and Test-queries
(see Figure 2).
From this simulation, we easily see that the game is per-
fectly indistinguishable from the real attack, unless the per-
mutation property of E or D does not hold. One could have
avoided collisions but this happens with probability at most
q2E /2(q − 1) since | ¯G| = (q − 1), where qE is the size of ΛE :
| Pr[S1] − Pr[S0]| ≤
q2E
2(q − 1)
.
(2)
Game G2: We deﬁne game G2 by modifying the way the
server processes the Send-queries so that the adversary will
be the only one to encrypt data. We use the following rule:
(cid:1)Rule S1(2) – Choose a random Y (cid:8) ∈ ¯G and
compute Y = Dpw (Y (cid:8)). Look for the record
(pw , Y, ϕ, ∗, Y (cid:8)) in the list ΛE to deﬁne ϕ (we
thus have Y = gϕ), and ﬁnally compute KS =
X ϕ.
The two games G2 and G1 are perfectly indistinguishable
unless ϕ = ⊥. This happens when Y (cid:8) has been previously
obtained as the ciphertext returned by an encryption-query.
Note that this may happen when processing a Send-query,
but also during a passive simulation when processing an
Execute-query:
,
| Pr[S2] − Pr[S1]| ≤ qSqE
q − 1
(3)
where qS is the number of involved server instances: qS ≤
qs +qp. Furthermore note that from now, only the adversary
may ask encryption queries, since the server is simulated
using the decryption oracle.
Game G3: In this game, we avoid collisions amongst the
hash queries asked by the adversary to H1, amongst the
passwords and the ciphertexts, and amongst the output of
the Send-queries. We play the game in a way that: no colli-
sion has been found by the adversary for H1; no encrypted
data corresponds to multiple identical plaintext; at most
one password corresponds to each plaintext-ciphertext pair;
abort if two instances of the server have used the same ran-
dom values. This will help us later on to prove Lemma 1,
the key step in proving Theorem 1. We use the following
rules:
(cid:1)Rule H(3) – Choose a random element r ∈
{0, 1}(cid:9)i . If i = 1, this query is directly asked by
the adversary, and (1, ∗, r) ∈ ΛA, then we abort
the game.
Then, for any H, #{(1,∗, H) ∈ ΛA} ≤ 1. But this rule
may make the game to abort with probability bounded by
q2
h/2(cid:9)1+1
(cid:1)Rule E (3) – Choose a random element Z(cid:8) ∈ ¯G.
If (∗,∗, ⊥,E , Z(cid:8)) ∈ ΛE , we abort the game.
Then, for any Z(cid:8), #{(∗, ∗, ⊥,E , Z(cid:8)) ∈ ΛE} ≤ 1. But this
rule may make the game to abort with probability bounded
by q2E /2(q − 1).
(cid:1)Rule D(3) – Choose a random element ϕ ∈ Z
and compute Z = gϕ. If (∗, Z,∗,∗, Z(cid:8)) ∈ ΛE , we
abort the game. Otherwise, we add the record
(k, Z, ϕ, D, Z(cid:8)) to ΛE .
(cid:8)
q
Then, for any pair (Z, Z(cid:8)), #{(∗, Z,∗, ∗, Z(cid:8)) ∈ ΛE} ≤ 1.
But this rule may make the game to abort with probability
bounded by q2E /2(q − 1).
(cid:1)Rule S1(3) – Choose a random Y (cid:8) ∈ ¯G.
If
(∗, Y (cid:8)) ∈ ΛS, abort the game, otherwise add
the record (j, Y (cid:8)) to ΛS. Then, compute Y =
Dpw (Y (cid:8)), look for the record (pw , Y, ϕ,∗, Y (cid:8)) in
ΛE to deﬁne ϕ (we thus have Y = gϕ), and com-
pute KS = X ϕ. The variable ΛS keeps track of
the messages sent out by the server S.
Then, there is no collision among the Y (cid:8) outputted by the
server instances (and thus the used Y ). But this rule may
make the game to abort with probability bounded by the
S/2(q−1), where qS is again the number
birthday paradox, q2
of involved server instances.
The two games G3 and G2 are perfectly indistinguishable
unless one of the above rules make the game to abort:
| Pr[S3] − Pr[S2]| ≤ 2q2E + q2
2(q − 1)
S
+
q2
h
2(cid:9)1+1 .
(4)
Game G4: We deﬁne game G4 by aborting the execu-
tions wherein the adversary may have guessed the password
and used it to send an encrypted data to the client. We
achieve this aim by modifying the way the client processes
the queries. We use the following rule: