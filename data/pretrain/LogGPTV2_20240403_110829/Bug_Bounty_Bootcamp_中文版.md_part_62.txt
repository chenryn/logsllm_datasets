Sometimes the library to use for your gadget chain will seem obvious,
but often it's a matter of trial and error, as you'll have to discover
which vulnerable libraries your target application implements. This is
where good reconnaissance will help you.
有时你的设备需要使用的库看起来很明显，但通常需要试错，因为你必须发现目标应用程序实现的脆弱库。这就是一个好的侦查工作将会帮助你的地方。
You can find more resources about exploiting Java deserialization on
GitHub at
[https://github.com/GrrrDog/Java-Deserialization-Cheat-Sheet/](https://github.com/GrrrDog/Java-Deserialization-Cheat-Sheet/){.LinkURL}
.
你可以在GitHub上找到更多关于Java反序列化的资源，访问链接https://github.com/GrrrDog/Java-Deserialization-Cheat-Sheet/。
## [ ]{#c14.xhtml#Page_244 .pagebreak title="244"} Prevention {#c14.xhtml#h1-123456c14-0002}
Defending against deserialization vulnerabilities is difficult. The best
way to protect an application against these vulnerabilities varies
greatly based on the programming language, libraries, and serialization
format used. No one-size-fits-all solution exists.
防御反序列化漏洞很困难。保护应用程序免受这些漏洞的最佳方法因所使用的编程语言、库以及序列化格式而异。没有一种通用的解决方案存在。
You should make sure not to deserialize any data tainted by user input
without proper checks. If deserialization is necessary, use an allowlist
to restrict deserialization to a small number of allowed classes.
应确保不要在没有进行适当检查的情况下反序列化任何受用户输入污染的数据。如果必须进行反序列化，则使用允许列表将反序列化限制在少量允许的类中。
You can also use simple data types, like strings and arrays, instead of
objects that need to be serialized when being transported. And, to
prevent the tampering of serialized cookies, you can keep track of the
session state on the server instead of relying on user input for session
information. Finally, you should keep an eye out for patches and make
sure your dependencies are up-to-date to avoid introducing
deserialization vulnerabilities via third-party code.
你也可以使用简单的数据类型，如字符串和数组，而不是需要在传输时进行序列化的对象。为了防止序列化Cookie被篡改，你可以在服务器上跟踪会话状态，而不是依赖用户输入的会话信息。最后，你应该密切关注补丁，并确保你的依赖项是最新的，以避免通过第三方代码引入反序列化漏洞。
Some developers try to mitigate deserialization vulnerabilities by
identifying the commonly vulnerable classes and removing them from the
application. This effectively restricts available gadgets attackers can
use in gadget chains. However, this isn't a reliable form of protection.
Limiting gadgets can be a great layer of defense, but hackers are
creative and can always find more gadgets in other libraries, coming up
with creative ways to achieve the same results. It's important to
address the root cause of this vulnerability: the fact that the
application deserializes user data insecurely.
有些开发者试图通过识别通常容易受到攻击的类并从应用程序中移除它们来减轻反序列化漏洞的影响。这有效地限制了攻击者在器件链中使用的可用手段。然而，这并不是一种可靠的保护形式。限制设备可以是很好的防御层，但黑客很有创意，他们总能在其他库中找到更多的设备，并想出创造性的方式来实现相同的结果。重要的是要解决这种漏洞的根本原因：应用程序不安全地反序列化用户数据。
The OWASP Deserialization Cheat Sheet is an excellent resource for
learning how to prevent deserialization flaws for your specific
technology:
[https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html){.LinkURL}
.
OWASP反序列化作弊表是学习如何防止特定技术的反序列化漏洞的绝佳资源：https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html。
## Hunting for Insecure Deserialization {#c14.xhtml#h1-123456c14-0003}
Conducting a source code review is the most reliable way to detect
deserialization vulnerabilities. From the examples in this chapter, you
can see that the fastest way to find insecure deserialization
vulnerabilities is by searching for deserialization functions in source
code and checking if user input is being passed into it recklessly. For
example, in a PHP application, look for `      unserialize()     ` , and
in a Java application, look for `      readObject()     ` . In Python
and Ruby applications, look for the functions
`      pickle.loads()     ` and `      Marshall.load()     ` ,
respectively.
进行源代码审查是检测反序列化漏洞最可靠的方式。从本章的示例中，您可以看到最快的发现不安全的反序列化漏洞的方法是在源代码中搜索反序列化函数，并检查是否不负责任地传递了用户输入。例如，在PHP应用程序中，查找unserialize（），在Java应用程序中查找readObject（）。在Python和Ruby应用程序中，分别查找pickle.loads（）和Marshall.load（）函数。
But many bug bounty hunters have been able to find deserialization
vulnerabilities without examining any code. Here are some strategies
that you can use to find insecure deserialization without access to
source code.
但许多漏洞赏金猎人能够在不检查任何代码的情况下找到反序列化漏洞。以下是一些您可以使用的策略，以在没有访问源代码的情况下找到不安全的反序列化。
Begin by paying close attention to the large blobs of data passed into
an application. For example, the base64 string
`      Tzo0OiJVc2VyIjoyOntzOjg6InVzZXJuYW1lIjtzOjY6InZpY2tpZSI7czo2OiJzdGF0dXMiO3M6OToibm90IGFkbWluIjt9     `
is the base64-encoded version of the PHP serialized string
`      O:4:"User":2:{s:8:"username";s:6:"vickie";s:6:"status";s:9:"not admin";}     `
.
从密切关注传递到应用程序中的大型数据块开始。例如，base64字符串Tzo0OiJVc2VyIjoyOntzOjg6InVzZXJuYW1lIjtzOjY6InZpY2tpZSI7czo2OiJzdGF0dXMiO3M6OToibm90IGFkbWluIjt9是PHP序列化字符串O：4："User"：2的base64编码版本：{s
：8："用户名"；s：6：" vickie"；s：6："状态"；s：9："非管理员"；}。
[ ]{#c14.xhtml#Page_245 .pagebreak title="245"} And this is the base64
representation of a serialized Python object of class
`      Person     ` with a name attribute of `      vickie     ` :
`      gASVLgAAAAAAAACMCF9fbWFpbl9flIwGUGVyc29ulJOUKYGUfZSMBG5hbWWUjAZWaWNraWWUc2Iu     `
.
这是Python对象序列化为Base64表示的Person类，该对象具有名为vickie的属性：gASVLgAAAAAAAACMCF9fbWFpbl9flIwGUGVyc29ulJOUKYGUfZSMBG5hbWWUjAZWaWNraWWUc2Iu。
These large data blobs could be serialized objects that represent object
injection opportunities. If the data is encoded, try to decode it. Most
encoded data passed into web applications is encoded with base64. For
example, as mentioned earlier, Java serialized objects often start with
the hex characters `      AC ED 00 05     ` or the characters
`      rO0     ` in base64. Pay attention to the
`      Content-Type     ` header of an HTTP request or response as well.
For example, a `      Content-Type     ` set to
`      application/x-java-serialized-object     ` indicates that the
application is passing information via Java serialized objects.
这些大型数据块可能是序列化对象，代表对象注入机会。如果数据已编码，请尝试解码。大多数传递到
Web 应用程序的编码数据都是使用 base64 编码的。例如，正如先前提到的，Java
序列化对象通常以十六进制字符 AC ED 00 05 或字符 rO0（在 base64
中）开头。同时还要注意 HTTP 请求或响应的 Content-Type 头。例如，设置为
application/x-java-serialized-object 的 Content-Type 表示应用程序通过
Java 序列化对象传递信息。
Alternatively, you can start by seeking out features that are prone to
deserialization flaws. Look for features that might have to deserialize
objects supplied by the user, such as database inputs, authentication
tokens, and HTML form parameters.
你可以寻找可能存在反序列化缺陷的特征。寻找需要反序列化用户提供对象的特征，例如数据库输入、认证令牌和
HTML 表单参数。
Once you've found a user-supplied serialized object, you need to
determine the type of serialized object it is. Is it a PHP object, a
Python object, a Ruby object, or a Java object? Read each programming
language's documentation to familiarize yourself with the structure of
its serialized objects.
一旦找到了用户提供的序列化对象，就需要确定它是哪种类型的序列化对象。它是PHP对象、Python对象、Ruby对象还是Java对象？阅读每种编程语言的文档，熟悉其序列化对象的结构。
Finally, try tampering with the object by using one of the techniques
I've mentioned. If the application uses the serialized object as an
authentication mechanism, try to tamper with the fields to see if you
can log in as someone else. You can also try to achieve RCE or SQL
injection via a gadget chain.
最后，尝试使用我提到的技术之一来篡改对象。如果应用程序使用序列化对象作为认证机制，请尝试篡改字段以查看是否可以登录为其他人。您还可以尝试通过小工具链实现RCE或SQL注入。
## Escalating the Attack {#c14.xhtml#h1-123456c14-0004}
This chapter has already described how insecure deserialization bugs
often result in remote code execution, granting the attacker a wide
range of capabilities with which to impact the application. For that
reason, deserialization bugs are valuable and impactful vulnerabilities.
Even when RCE isn't possible, you might be able to achieve an
authentication bypass or otherwise meddle with the logic flow of the
application.
这一章已经描述了不安全的反序列化漏洞通常会导致远程代码执行，赋予攻击者广泛的能力来影响应用程序。因此，反序列化漏洞是有价值且有影响力的漏洞。即使无法实现远程代码执行，您可能仍能绕过身份验证或以其他方式干扰应用程序的逻辑流程。
However, the impact of insecure deserialization can be limited when the
vulnerability relies on an obscure point of entry, or requires a certain
level of application privilege to exploit, or if the vulnerable function
isn't available to unauthenticated users.
然而，当漏洞依赖于一个模糊的入口点，或需要一定级别的应用权限才能利用，或者易受攻击的功能不对未经认证的用户可用时，不安全反序列化的影响可以得到限制。
When escalating deserialization flaws, take the scope and rules of the
bounty program into account. Deserialization vulnerabilities can be
dangerous, so make sure you don't cause damage to the target application
when trying to manipulate program logic or execute arbitrary code. Read
[ Chapter 18 ]{.xref itemid="xref_target_Chapter 18"} for tips on how to
create safe PoCs for an RCE.
在升级反序列化缺陷时，请考虑赏金计划的范围和规则。反序列化漏洞可能很危险，因此在尝试操纵程序逻辑或执行任意代码时，请确保不会对目标应用程序造成损害。阅读第18章，获取有关如何创建安全PoC进行RCE的提示。
## [ ]{#c14.xhtml#Page_246 .pagebreak title="246"} Finding Your First Insecure Deserialization! {#c14.xhtml#h1-123456c14-0005}
Now it's time to dive in and find your first insecure deserialization
vulnerability. Follow the steps we covered to find one:
现在是时候开始深入挖掘并找到您的第一个反序列化漏洞了。按照我们介绍的步骤去找一个吧：
1.  If you can get access to an application's source code, search for
    deserialization functions in source code that accept user input.
2.  If you cannot get access to source code, look for large blobs of
    data passed into an application. These could indicate serialized
    objects that are encoded.
3.  Alternatively, look for features that might have to deserialize
    objects supplied by the user, such as database inputs,
    authentication tokens, and HTML form parameters.
4.  If the serialized object contains information about the identity of
    the user, try tampering with the serialized object found and see if
    you can achieve authentication bypass.
5.  See if you can escalate the flaw into a SQL injection or remote code
    execution. Be extra careful not to cause damage to your target
    application or server.
6.  Draft your first insecure deserialization report!
:::
[]{#c15.xhtml}
::: section
# [ [ ]{#c15.xhtml#Page_247 .pagebreak title="247"} 15 ]{.ChapterNumber} [ XML External Entity ]{.ChapterTitle} {.chapter}
![](image_fi/book_art/chapterart.png)
*XML external entity attacks (* *XXEs)* are fascinating vulnerabilities
that target the XML parsers of an application. XXEs can be very
impactful bugs, as they can lead to confidential information disclosure,
SSRFs, and DoS attacks. But they are also difficult to understand and
exploit.
XML外部实体攻击 (XXE) 是一种针对应用程序的XML解析器的迷人漏洞。
XXE可能是非常具有影响力的漏洞，因为它们可能导致机密信息泄露、SSRF和DoS攻击。但是它们也很难理解和利用。
In this chapter, we'll dive into the ins and outs of XXEs so you can
find one in the wild. We will also talk about how to use XXEs to extract
sensitive files on the target system, launch SSRFs, and trigger DoS
attacks.
在本章中，我们将深入探讨XXE的各个方面，以便您能够在野外找到其中一个。我们还将讨论如何使用XXE提取目标系统上的敏感文件，启动SSRF并触发DoS攻击。
## Mechanisms {#c15.xhtml#h1-123456c15-0001}
*Extensible Markup Language (* *XML)* is designed for storing and
transporting data. This markup language allows developers to define and
represent arbitrary data structures in a text format using a tree-like
structure like that of [ ]{#c15.xhtml#Page_248 .pagebreak title="248"}
HTML. For example, web applications commonly use XML to transport
identity information in Security Assertion Markup Language (SAML)
authentication. The XML might look like this:
可扩展标记语言（XML）旨在存储和传输数据。这种标记语言允许开发人员使用类似于HTML的树形结构以文本格式定义和表示任意数据结构。例如，Web应用程序通常使用XML在安全声明标记语言（SAML）认证中传输身份信息。XML可能是这样的：
          vickieli
Notice here that unlike HTML, XML has user-defined tag names that let
you structure the XML document freely. The XML format is widely used in
various functionalities of web applications, including authentication,
file transfers, and image uploads, or simply to transfer HTTP data from
the client to the server and back.
请注意，与HTML不同，XML具有用户定义的标记名称，使您可以自由地构造XML文档。
XML格式广泛用于Web应用程序的各种功能，包括身份验证，文件传输和图像上传，或仅用于在客户端和服务器之间传输HTTP数据。
XML documents can contain a *document type definition (* *DTD)* , which
defines the structure of an XML document and the data it contains. These
DTDs can be loaded from external sources or declared in the document
itself within a `      DOCTYPE     ` tag. For example, here is a DTD
that defines an XML entity called `      file     ` :
XML文档可以包含一个文档类型定义（DTD），它定义了XML文档的结构和它所包含的数据。这些DTD可以从外部源加载或在文档中通过DOCTYPE标签声明。例如，这是一个定义了一个名为"file"的XML实体的DTD：
    ]>
    &file;
XML entities work like variables in programming languages: any time you
reference this entity by using the syntax `      &file     ` , the XML
document will load the value of `      file     ` in its place. In this