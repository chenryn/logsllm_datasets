    PgStat_Counter tuples_inserted;    
    PgStat_Counter tuples_updated;    
    PgStat_Counter tuples_deleted;    
    PgStat_Counter tuples_hot_updated;    
    PgStat_Counter n_live_tuples;    
    PgStat_Counter n_dead_tuples;    
    PgStat_Counter changes_since_analyze;    
    PgStat_Counter blocks_fetched;    
    PgStat_Counter blocks_hit;    
    TimestampTz vacuum_timestamp;       /* user initiated vacuum */    
    PgStat_Counter vacuum_count;    
    TimestampTz autovac_vacuum_timestamp;       /* autovacuum initiated */    
    PgStat_Counter autovac_vacuum_count;    
    TimestampTz analyze_timestamp;      /* user initiated */    
    PgStat_Counter analyze_count;    
    TimestampTz autovac_analyze_timestamp;      /* autovacuum initiated */    
    PgStat_Counter autovac_analyze_count;    
} PgStat_StatTabEntry;    
```  
这些值是由pgstats进程来进行统计的    
```  
PgstatCollectorMain(int argc, char *argv[])      
{      
...      
    for (;;)      
    {      
        /* Clear any already-pending wakeups */      
        ResetLatch(&pgStatLatch);      
...      
            /*      
             * O.K. - we accept this message.  Process it.      
             */      
            switch (msg.msg_hdr.m_type)      
            {      
...      
                case PGSTAT_MTYPE_TABSTAT:      
                    pgstat_recv_tabstat((PgStat_MsgTabstat *) &msg, len);      
                    break;      
...      
/* ----------      
 * pgstat_recv_tabstat() -      
 *      
 *  Count what the backend has done.      
 * ----------      
 */      
static void      
pgstat_recv_tabstat(PgStat_MsgTabstat *msg, int len)      
{      
...      
            tabentry->numscans += tabmsg->t_counts.t_numscans;      
            tabentry->tuples_returned += tabmsg->t_counts.t_tuples_returned;      
            tabentry->tuples_fetched += tabmsg->t_counts.t_tuples_fetched;      
            tabentry->tuples_inserted += tabmsg->t_counts.t_tuples_inserted;      
            tabentry->tuples_updated += tabmsg->t_counts.t_tuples_updated;      
            tabentry->tuples_deleted += tabmsg->t_counts.t_tuples_deleted;      
            tabentry->tuples_hot_updated += tabmsg->t_counts.t_tuples_hot_updated;      
            tabentry->n_live_tuples += tabmsg->t_counts.t_delta_live_tuples;      
            tabentry->n_dead_tuples += tabmsg->t_counts.t_delta_dead_tuples;      
            tabentry->changes_since_analyze += tabmsg->t_counts.t_changed_tuples;      
            tabentry->blocks_fetched += tabmsg->t_counts.t_blocks_fetched;      
            tabentry->blocks_hit += tabmsg->t_counts.t_blocks_hit;      
...      
```  
tabmsg->t_counts.? 则是通过如下macro进行改写的：    
```  
/* nontransactional event counts are simple enough to inline */      
#define pgstat_count_heap_scan(rel)                                                                     \      
        do {                                                                                                                    \      
                if ((rel)->pgstat_info != NULL)                                                         \      
                        (rel)->pgstat_info->t_counts.t_numscans++;                              \      
        } while (0)      
#define pgstat_count_heap_getnext(rel)                                                          \      
        do {                                                                                                                    \      
                if ((rel)->pgstat_info != NULL)                                                         \      
                        (rel)->pgstat_info->t_counts.t_tuples_returned++;               \      
        } while (0)      
#define pgstat_count_heap_fetch(rel)                                                            \      
        do {                                                                                                                    \      
                if ((rel)->pgstat_info != NULL)                                                         \      
                        (rel)->pgstat_info->t_counts.t_tuples_fetched++;                \      
        } while (0)      
#define pgstat_count_index_scan(rel)                                                            \      
        do {                                                                                                                    \      
                if ((rel)->pgstat_info != NULL)                                                         \      
                        (rel)->pgstat_info->t_counts.t_numscans++;                              \      
        } while (0)      
#define pgstat_count_index_tuples(rel, n)                                                       \      
        do {                                                                                                                    \      
                if ((rel)->pgstat_info != NULL)                                                         \      
                        (rel)->pgstat_info->t_counts.t_tuples_returned += (n);  \      
        } while (0)      
#define pgstat_count_buffer_read(rel)                                                           \      
        do {                                                                                                                    \      
                if ((rel)->pgstat_info != NULL)                                                         \      
                        (rel)->pgstat_info->t_counts.t_blocks_fetched++;                \      
        } while (0)      
#define pgstat_count_buffer_hit(rel)                                                            \      
        do {                                                                                                                    \      
                if ((rel)->pgstat_info != NULL)                                                         \      
                        (rel)->pgstat_info->t_counts.t_blocks_hit++;                    \      
        } while (0)      
```  
取出每个macro对应的调用以及解释如下：    
pgstat_count_index_scan(idx_oid)    
统计指定索引的扫描次数，和扫描多少条记录无关，和node有个，一般看执行计划中，同一个索引如果在NODE中出现一次，那么就算扫描一次。    
![pic1](20161018_03_pic_001.png)       
![pic2](20161018_03_pic_002.png)       
pgstat_count_index_tuples(rel, n)    
统计从指定索引获取tid的条数    
![pic3](20161018_03_pic_003.png)       
pgstat_count_heap_fetch    
统计从使用指定索引的tid获取HEAP tuple的条数    
![pic4](20161018_03_pic_004.png)       
pgstat_count_buffer_read    
统计所有的buffer read次数, 包括在postgresql shared buffers中命中的，或者未在postgresql shared buffers中命中的。    
![pic5](20161018_03_pic_005.png)       
pgstat_count_buffer_hit(rel)    
统计在shared buffers中命中的buffer read次数。    
![pic6](20161018_03_pic_006.png)       
![pic7](20161018_03_pic_007.png)       
pgstat_count_heap_scan(rel)    
统计指定表的，全表扫描的次数，和返回的记录数无关，只和执行计划中的node相关，如果在plan中某个表只有一个seq scan的次数，则这条SQL执行一次时算一次。    
![pic8](20161018_03_pic_008.png)       
pgstat_count_heap_getnext(rel)    
指从全表扫描节点中扫描的记录数    
![pic9](20161018_03_pic_009.png)       
![pic10](20161018_03_pic_010.png)       
梳理一下最初的统计字段和这些macro的对应关系：    
pg_stat_all_indexes 的       
```  
idx_scan         对应  pgstat_count_index_scan(idx_oid)  产生的计数的累加      
idx_tup_read     对应  pgstat_count_index_tuples(idx_oid, n)  产生的计数的累加      
idx_tup_fetch    对应  pgstat_count_heap_fetch(idx_oid)  产生的计数的累加      
```  
pg_statio_all_indexes 的       
```  
idx_blks_read    对应  pgstat_count_buffer_read(idx_oid) - pgstat_count_buffer_hit(idx_oid)  产生的计数的累加      
idx_blks_hit     对应  pgstat_count_buffer_hit(idx_oid)  产生的计数的累加      
```  
pg_stat_all_tables 的       
```  
seq_scan         对应  pgstat_count_heap_scan(tbl_oid)  产生的计数的累加      
seq_tup_read     对应  pgstat_count_heap_getnext(tbl_oid)  产生的计数的累加      
idx_scan         对应  sum( 索引 pgstat_count_index_scan(tbl_oid) )  产生的计数的累加      
idx_tup_fetch    对应  sum( 索引 pgstat_count_index_tuples(idx_oid, n) ) + pgstat_count_heap_fetch(tbl_oid)  产生的计数的累加      
```  
pg_statio_all_tables 的       
```  
heap_blks_read    对应  pgstat_count_buffer_read(tbl_oid) - pgstat_count_buffer_hit(tbl_oid)  产生的计数的累加      
heap_blks_hit     对应  pgstat_count_buffer_hit(tbl_oid)  产生的计数的累加      
idx_blks_read     对应  sum( 索引 pgstat_count_buffer_read(idx_oid) - pgstat_count_buffer_hit(idx_oid) )  产生的计数的累加      
idx_blks_hit      对应  sum( pgstat_count_buffer_hit(idx_oid) )  产生的计数的累加      
toast_blks_read   对应  pgstat_count_buffer_read(toast_oid) - pgstat_count_buffer_hit(toast_oid)  产生的计数的累加      
toast_blks_hit    对应  pgstat_count_buffer_hit(toast_oid)   产生的计数的累加      
tidx_blks_read    对应  sum( 索引 pgstat_count_buffer_read(toast_idx_oid) - pgstat_count_buffer_hit(toast_idx_oid) )  产生的计数的累加      
tidx_blks_hit     对应  sum( pgstat_count_buffer_hit(toast_idx_oid) )  产生的计数的累加      
```  
## 例子  
1、建表，写入100万数据，平均单个ID 1000行。    
```    
postgres=# create table h (id int, info text);    
CREATE TABLE    
postgres=# insert into h select random()*1000 , 'test' from generate_series(1,1000000);    
INSERT 0 1000000    
```    
2、创建索引    
```    
postgres=# create index idx_h_1 on h(id);    
CREATE INDEX    
```    
3、查询pg_stat_all_indexes统计信息的idx_tup_read, idx_tup_fetch    
```    
postgres=# select * from pg_stat_all_indexes where indexrelname='idx_h_1';    
 relid | indexrelid | schemaname | relname | indexrelname | idx_scan | idx_tup_read | idx_tup_fetch     
-------+------------+------------+---------+--------------+----------+--------------+---------------    
 35692 |      35698 | public     | h       | idx_h_1      |        0 |            0 |             0    
(1 row)    
```    
4、bitmapscan查询，观察idx_tup_read, idx_tup_fetch    
```    
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from h where id=2;    
                                                     QUERY PLAN                                                          
---------------------------------------------------------------------------------------------------------------------    
 Bitmap Heap Scan on public.h  (cost=11.43..988.56 rows=994 width=9) (actual time=0.321..1.428 rows=938 loops=1)    
   Output: id, info    
   Recheck Cond: (h.id = 2)    
   Heap Blocks: exact=857    
   Buffers: shared hit=857 read=5    
   I/O Timings: read=0.054    
   ->  Bitmap Index Scan on idx_h_1  (cost=0.00..11.18 rows=994 width=0) (actual time=0.204..0.204 rows=938 loops=1)    
         Index Cond: (h.id = 2)    
         Buffers: shared read=5    
         I/O Timings: read=0.054    
 Planning Time: 0.197 ms    
 Execution Time: 1.502 ms    
(12 rows)    
```    
以上bitmapscan返回938行，由于使用了bitmapscan，所以idx_tup_fetch=0，但是idx_tup_read=938。下面解释为什么    
```    
postgres=# select * from pg_stat_all_indexes where indexrelname='idx_h_1';    
 relid | indexrelid | schemaname | relname | indexrelname | idx_scan | idx_tup_read | idx_tup_fetch     
-------+------------+------------+---------+--------------+----------+--------------+---------------    
 35692 |      35698 | public     | h       | idx_h_1      |        1 |          938 |             0    
(1 row)    
```    
5、index scan查询，观察idx_tup_read, idx_tup_fetch    
关闭bitmapscan    
```    
postgres=# set enable_bitmapscan = off;    
SET    
```    
使用index scan    
```    
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from h where id=2;    
                                                       QUERY PLAN                                                            
-------------------------------------------------------------------------------------------------------------------------    
 Index Scan using idx_h_1 on public.h  (cost=0.42..1023.22 rows=994 width=9) (actual time=0.021..0.939 rows=938 loops=1)    
   Output: id, info    
   Index Cond: (h.id = 2)    
   Buffers: shared hit=862    
 Planning Time: 0.051 ms    
 Execution Time: 1.019 ms    
(6 rows)    
```    
返回938行，使用index scan，所以idx_tup_fetch=938，但是idx_tup_read=938。下面解释为什么    
```    