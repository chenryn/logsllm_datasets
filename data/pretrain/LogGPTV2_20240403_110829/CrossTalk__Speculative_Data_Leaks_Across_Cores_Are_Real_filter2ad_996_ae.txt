Even without using SMT, our naive implementation man-
ages to transmit data between physical cores at 3KB/s, with
an error rate of <5%. We only perform full (256-entry)
FLUSH + RELOAD rounds until we observe a leaked character;
we then perform a second FLUSH + RELOAD round for a
single cache line, to verify our read was correct.
Although we need a few entries in the L1 cache to per-
form FLUSH + RELOAD to observe the results of transient
execution, this covert channel has a minimal impact on the
cache. Some calls to CPUID and short loops of RDRAND are
not unusual in real-world code, but it would also be possible
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:28:49 UTC from IEEE Xplore.  Restrictions apply. 
1862
TABLE IV: List of the tested microarchitectures.
CPU
Year
Microcode
Staging
Buffer
Present
Supports
SMT
Vulnerable to
Cross-Core
Attacks
?





























0xca
0xca
?
0x500002c
0xca
0xca
0xca
0xc2
0x20
0xd6
Intel Xeon Scalable 4214 (Cascade Lake)
Intel Core i7-0850H (Coffee Lake)
Intel Core i7-8665U (Whiskey Lake)
Intel Xeon E-2288G (Coffee Lake)
Intel Core i9-9900K (Coffee Lake R)
Intel Core i7-7700K (Kaby Lake)
Intel Xeon E3-1220V6 (Kaby Lake)
Intel Core i7-6700K (Skylake)
Intel Core i7-5775C (Broadwell)
Intel Xeon E3-1240V5 (Skylake)
2019
2019
2019
2019
2018
2017
2017
2015
2015
2015
to use a mix of RDSEED (to pick a value to leak) and RDRAND
(to leak the value), with a different synchronization method.
Short bursts of noise cannot be avoided due to other
applications executing instructions (such as RDRAND) which
overwrite the staging buffer themselves, but we did not en-
counter a signiﬁcant increase in errors while running typical
applications (e.g., Chrome and apache2). The covert channel
can be easily disrupted by running leak primitives (which
themselves overwrite the staging buffer) on another core; if
only some offsets in the staging buffer are used, a one-bit
covert channel could still be constructed using a leak primitive
that writes to the remaining offsets.
VII. MITIGATIONS
A. Software Changes
Since our demonstrated attacks are only relevant where
RDRAND and RDSEED are used and where the resulting
entropy must be kept conﬁdential (e.g., in cryptographic algo-
rithms), software changes may be sufﬁcient to largely mitigate
our attacks. Some software which relies on cryptographically
secure random number generation has already stopped trusting
hardware-based random number generators such as RDRAND.
For example, the Linux kernel default is only to use them
to initialize entropy stores, and OpenSSL has disabled the
RDRAND ‘engine’ by default since 2014 (version 1.0.1f [31]).
As discussed, for SGX enclaves, RDRAND and RDSEED
instructions are the only local source of trusted entropy.
Nonetheless, it is often still possible to limit the impact of
our attacks. For example, an algorithm such as EdDSA can be
used in place of ECDSA to eliminate the need for entropy to
generate signatures. And if ECDSA is required, private data
can be mixed into k when generating ECDSA signatures (as
seen in OpenSSL). It may also be possible to obtain random
entropy by opening a secure channel to a trusted remote server.
Countermeasures preventing performance degradation at-
tacks against SGX enclaves exist but may be inappropriate or
difﬁcult to apply against our attack. For example, T-SGX [32]
runs enclave code inside TSX transactions, which prevents
single-stepping code; however, RDRAND and RDSEED always
abort TSX transactions on recent CPUs, so these instructions
must be run outside transactions and can be trapped. Other
defenses attempt to detect high levels of interruptions (aborted
transactions or enclave exits), which prevents single-stepping
through SGX enclave code. One example is D´ej`a Vu [33],
which again only protects instructions which can be run
inside transactions. However, an adaptation of a non-TSX-
based defense such as Varys [34] (which requires SMT)
could help prevent an attack from making use of performance
degradation, if tuned to an appropriately high level of paranoia.
B. Disabling Hardware Features
Some hardware features such as SMT and TSX (for TAA)
improve the performance of our attacks. Hence, disabling
SMT and TSX can frustrate (but not eliminate) exploitation
attempts. These features are still in widespread use in real-
world production systems, and we found both to be enabled
by default in public cloud environments. Intel speciﬁcally do
not recommend disabling SMT [35], but this is necessary to
mitigate L1TF/MDS attacks against SGX on older CPUs.
Cloud environments, and hypervisors in general, instead
attempt to mitigate SMT-based attacks by isolating code from
different security domains on different physical cores [20],
and ﬂushing CPU buffers when switching between domains.
However, since our attacks works across different physical
cores, these mitigations are ineffective against them.
Similarly, TSX is still enabled in many environments to
accelerate concurrent applications, and Intel suggest that TAA
can be mitigated by using MDS mitigations to clear buffers
when switching between security domains, along with mi-
crocode changes which attempt to mitigate attacks against
SGX by aborting TSX transactions when a sibling thread is
running an SGX enclave [8]. Intel has also updated the remote
attestation mechanism to ensure the new microcode has been
applied. However, since TSX transactions are still allowed on
other physical cores, these mitigations are ineffective against
our attacks on CPUs vulnerable to TAA.
C. MDS Mitigations
Since our work depends on MDS-class vulnerabilities,
CPUs with in-silicon mitigations against MDS-class vulnera-
bilities are no longer vulnerable to our attacks. Unfortunately,
even these recent CPUs are still vulnerable to TAA. This can
be mitigated by disabling TSX, but again, this does not apply
to SGX, in the absence of a microcode update that disables it
entirely (rather than leaving it under operating system control).
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:28:49 UTC from IEEE Xplore.  Restrictions apply. 
1863
TABLE V: CROSSTALK results after applying the microcode update containing Intel’s mitigation.
Pre Microcode Update
Post Microcode Update
Instruction
Operands
Number
of Cycles
Executed
µOps
Offcore
Requests
Number
of Cycles
RDRAND
RDSEED
—
—
433
441
16
16
1
1
5212
5120
Executed
µOps
7565
7564
Offcore
Requests
6
6
D. Trapping Instructions
Trapping and emulating (or forbidding) the speciﬁc in-
structions our exploits need is another avenue for mitigation.
Instructions that read/write MSRs are privileged and are al-
ready trapped by the operating system kernel when used by
userspace. However, CPUID, RDRAND and RDSEED cannot be
trapped by an operating system without use of a hypervisor.
In virtualised environments, it is possible to trap all of these
instructions. First, MSR bitmaps can be used to disable access
to speciﬁc MSRs from a VM, causing RDMSR and WRMSR
instructions to trap. Second, hardware virtualisation extensions
can be conﬁgured to cause a VM exit on a wide variety of
other instructions, including RDRAND, RDSEED, and CPUID.
This strategy can prevent code running in virtual machines
from mounting attacks using these instructions, but may result
in lower performance due to a larger number of VM exits and
the need to emulate such instructions on the host.
Hypothetically,
if all other relevant existing and future
microcoded instructions can be disabled in VMs, and RDSEED
is also disabled on the host system, then it may be possi-
ble to enable RDRAND for VMs (removing the performance
penalty) without exposing RNG results. This is because run-
ning RDRAND will overwrite the relevant portion of the staging
buffer and the same instruction cannot be used to leak the
RDRAND results. However, the offending instructions can still
be used from native execution to leak information from a VM.
Finally, trapping instructions is not a suitable mitigation
strategy for SGX enclaves, where an attacker is assumed to
have control of privileged code underpinning enclaves. In fact,
when SGX enclaves are run inside a VM conﬁgured to cause
a VM exit on RDRAND and RDSEED, attacks are even easier.
Such targeted traps allow an attacker to determine exactly
when an enclave runs one of these instructions.
E. Staging Buffer Clearing
Similar in spirit to the VERW MDS mitigation, it is possible
for microcode to clear out the staging buffer before an attacker
gets a chance to leak it. However, in contrast to buffers used
by existing MDS attacks, the staging buffer has cross-core
visibility and an attacker can always leak RDRAND results at
the same time as they are being read by another CPU. As such,
existing mitigation strategies that clear out buffer content at
well-deﬁned security domain switching points are ineffective.
Nonetheless, having microcode clear out the staging buffer
immediately after reading data from it would signiﬁcantly
reduce the time window available to an attacker, reducing
the attack surface. This strategy can also work for SGX
enclaves. In absence of a microcode update, software can use
instructions to overwrite the sensitive regions of the staging
buffer with non-conﬁdential information after using RDRAND
or RDSEED, again reducing the time window for an attacker.
However, this software-only strategy is again not a suitable
mitigation for SGX enclaves, where an attacker can single-
step code and leak values before they are overwritten.
F. Intel’s Fix
Clearing the staging buffer can mitigate this vulnerability
if it were possible to ensure that the staging buffer cannot be
read while it may contain sensitive contents. Intel’s proposed
mitigation for these issues does just this, locking the entire
memory bus before updating the staging buffer, and only
unlocking it after clearing the contents. Due to the potential
whole-system performance penalty of locking the entire bus,
this is only implemented for a small number of security-critical
instructions – speciﬁcally, RDRAND, RDSEED and EGETKEY
(a leaf of the ENCLU instruction).
An MSR is provided which allows the mitigation to be
disabled [36]; on CPUs which are not vulnerable to MDS, it
allows an OS to instead choose to mitigate TAA (by disabling
TSX). The mitigation is always applied when SGX enclaves
are running, regardless of the MSR setting.
We re-ran both stages of CROSSTALK on the i7-7700K
with a microcode update containing this ﬁx. Our coverage
did not include EGETKEY (in an SGX enclave), but RDRAND
and RDSEED are still detected by our proﬁling (since the buffer
contents still change). However, we no longer leak RNG output
from the staging buffer after running these instructions.
We observe signiﬁcant differences in performance counters
as shown in Table V; both instructions execute far more micro-
ops (around 7560, perhaps due to a busy loop), and make 6
offcore requests (rather than 1). We also observed differences
with leaf 1 of CPUID, which may indicate other changes
are present in the update. Post-disclosure benchmarks have
shown that the deployed mitigation may reduce RDRAND’s
performance [37] by as much as 97% on some processors.
VIII. DISCUSSION
We have shown that, on many Intel CPUs, reads are
performed via a shared staging buffer. Microcode sometimes
needs to communicate with offcore IP blocks. For example,
implementing the MSRs related to power management (as
discovered by CROSSTALK) require communication with so-
called ‘PCode’ running on the ‘P-Unit’ or PCU (Power
Control Unit). Some hints can be found in Intel’s patents;
one patent [38] describes a fast mailbox interface, using a
‘mailbox-to-PCU’ interface as an example.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:28:49 UTC from IEEE Xplore.  Restrictions apply. 
1864
Intel’s DRNG – the source of RDRAND and RDSEED entropy
– is a global CPU resource, connected to individual cores using
different buses (interconnects), depending on the platform;
speciﬁcs for several platforms were described as part of an
Intel presentation [39]. Originally, on the Ivy Bridge platform,
the DRNG uses the so-called message channel. We can see
evidence for this in the performance counters for Skylake-era
Xeons, where the counters for RDRAND and RDSEED are in a
category documented as register requests within the message
channel. More recent CPUs directly use the sideband interface
of Intel’s On-Chip System Fabric (IOSF-SB) for connecting
to the DRNG, which implies we may be leaking from the
sideband (or some form of mailbox).
IX. RELATED WORK
Speculative and transient execution vulnerabilities in Intel
CPUs were originally reported by researchers as Spectre [2],
Meltdown [1], and Foreshadow [3]. Later, MDS-class vul-
nerabilities (which we used in our research) were studied in
RIDL [5], ZombieLoad [4], Fallout [13] and CacheOut [40].
All these papers make use of microarchitectural covert chan-
nels to disclose information. Attempts have been made to
create a systematization of these vulnerabilities [41], and they
have been used for other attacks, most recently LVI [42], as
well as for other investigations of CPU behavior [43].
There is extensive existing research on microarchitectural
covert/side channels, with most focusing on timing. Some
such attacks are only relevant in SMT situations, such as port
contention [44], [45] and TLB [46] attacks, but others are more
generally applicable. For example, Yarom and Falkner demon-
strated cross-core cache attacks using FLUSH + RELOAD [47].
We refer the reader to [48] for an extensive survey on
microarchitectural timing side-channel attacks.
Many attacks against ECDSA using nonce leakage have
been proposed [49], [50]. A systematic survey of nonce
leakage in ECDSA implementations [21] discussed (among
many other things) the methods used by OpenSSL, LibreSSL,
and BoringSSL to generate nonces and demonstrated attacks
based on partial nonce leakage. Our SGX exploit obtains the
full nonce, making such attacks even more practical.
There have been other papers attacking cryptographic algo-
rithms running in SGX which have not been hardened against
cache or other timing-based side-channels, or memory access
channels which can be observed by an attacker [51]. Recent
efforts in the area include interrupt latency [52], [53], port
contention [45]. and CopyCat [54] attacks. Finally, Evtyushkin
and Ponomarev [55] showed that RDSEED can be used as
a (one-bit) covert channel, by observing the success rate of
RDSEED on a core. Since RDSEED will fail if entropy is not
available, this success rate drops signiﬁcantly if another core
is also calling RDSEED, providing a covert channel.
In contrast to transient execution vulnerabilities, Intel and