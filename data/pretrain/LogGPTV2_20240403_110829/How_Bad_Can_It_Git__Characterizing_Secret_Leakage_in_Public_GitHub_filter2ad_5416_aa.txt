title:How Bad Can It Git? Characterizing Secret Leakage in Public GitHub
Repositories
author:Michael Meli and
Matthew R. McNiece and
Bradley Reaves
How Bad Can It Git? Characterizing Secret Leakage
in Public GitHub Repositories
Michael Meli
Matthew R. McNiece
Bradley Reaves
North Carolina State University
North Carolina State University
North Carolina State University
PI:EMAIL
Cisco Systems, Inc.
PI:EMAIL
PI:EMAIL
Abstract—GitHub and similar platforms have made public
collaborative development of software commonplace. However, a
problem arises when this public code must manage authentication
secrets, such as API keys or cryptographic secrets. These secrets
must be kept private for security, yet common development
practices like adding these secrets to code make accidental leakage
frequent. In this paper, we present the ﬁrst large-scale and
longitudinal analysis of secret leakage on GitHub. We examine
billions of ﬁles collected using two complementary approaches: a
nearly six-month scan of real-time public GitHub commits and
a public snapshot covering 13% of open-source repositories. We
focus on private key ﬁles and 11 high-impact platforms with
distinctive API key formats. This focus allows us to develop
conservative detection techniques that we manually and automat-
ically evaluate to ensure accurate results. We ﬁnd that not only
is secret leakage pervasive — affecting over 100,000 repositories
— but that thousands of new, unique secrets are leaked every day.
We also use our data to explore possible root causes of leakage
and to evaluate potential mitigation strategies. This work shows
that secret leakage on public repository platforms is rampant
and far from a solved problem, placing developers and services
at persistent risk of compromise and abuse.
I.
INTRODUCTION
Since its creation in 2007, GitHub has established a massive
community composed of nearly 30 million users and 24 million
public repositories [1], [11], [55]. Beyond merely storing
code, GitHub is designed to encourage public, collaborative
development of software. The rise in popularity of public,
“social” coding also comes at a time where software, perhaps
more than ever, relies on external online services for essential
functionality. Examples include APIs for maps, credit card
payments, and cloud storage, to say nothing of integration with
social media platforms. As part of this integration, developers
generally have to authenticate to the service, typically by using
static random API keys [35], which they must manage securely.
Developers may also need to manage cryptographic public and
private keys for access control (e.g., SSH) or TLS.
Unfortunately, the public nature of GitHub often comes
in conﬂict with the need to keep authentication credentials
private. As a result, these secrets are often — accidentally or
intentionally — made public as part of the repository. Secrets
Network and Distributed Systems Security (NDSS) Symposium 2019
24-27 February 2019, San Diego, CA, USA
ISBN 1-891562-55-X
https://dx.doi.org/10.14722/ndss.2019.23418
www.ndss-symposium.org
leaked in this way have been exploited before [4], [8], [21], [25],
[41], [46]. While this problem is known, it remains unknown to
what extent secrets are leaked and how attackers can efﬁciently
and effectively extract these secrets.
In this paper, we present the ﬁrst comprehensive, longi-
tudinal analysis of secret leakage on GitHub. We build and
evaluate two different approaches for mining secrets: one is able
to discover 99% of newly committed ﬁles containing secrets in
real time, while the other leverages a large snapshot covering
13% of all public repositories, some dating to GitHub’s creation.
We examine millions of repositories and billions of ﬁles to
recover hundreds of thousands of secrets targeting 11 different
platforms, 5 of which are in the Alexa Top 50. From the
collected data, we extract results that demonstrate the worrying
prevalence of secret leakage on GitHub and evaluate the ability
of developers to mitigate this problem.
Our work makes the following contributions:
• We perform the ﬁrst large-scale systematic study
across billions of ﬁles that measures the prevalence
of secret leakage on GitHub by extracting and val-
idating hundreds of thousands of potential secrets.
We also evaluate the time-to-discovery, the rate and
timing of removal, and the prevalence of co-located
secrets. Among other ﬁndings, we ﬁnd thousands of
new keys are leaked daily and that the majority of
leaked secrets remain available for weeks or longer.
• We demonstrate and evaluate two approaches to
detecting secrets on GitHub. We extensively validate
the discovery coverage and rejection rates of invalid
secrets, including through an extensive manual review.
• We further explore GitHub data and metadata
to examine potential root causes. We ﬁnd that
committing cryptographic key ﬁles and API keys
embedded directly in code are the main causes of
leakage. We also evaluate the role of development
activity, developer experience, and the practice of
storing personal conﬁguration ﬁles in repositories (e.g.,
“dotﬁles”).
• We discuss the effectiveness of potentially mitigat-
ing practices, including automatic leakage detectors,
requiring multiple secret values, and rate limiting
queries on GitHub. Our data indicates these techniques
all fail to limit systemic large-scale secret exposure.
We are not the ﬁrst to recognize and attempt to measure
secret leakage on GitHub [4], [8], [25], [33], [46], [48], [53],
[63], [65]. However, much of this work has used techniques
that provide superﬁcial conclusions (e.g., merely reporting
search query hits), fail to evaluate the quality of their detection
heuristics, operate on a scale orders of magnitude smaller
than this work, or fail to perform in-depth analyses of the
problem. To the best of our knowledge, no peer-reviewed
research has addressed this issue apart from a single short
paper [53] published in 2015. We believe our ﬁndings present
signiﬁcant added value to the community over prior work
because we go far beyond noting that leakage occurs, providing
a conservative longitudinal analysis of leakage, as well as
analyses of root causes and the limitations of current mitigations.
Throughout this work, we take conservative approaches to
increase conﬁdence in the validity of our results. Consequently,
our work is not exhaustive but rather demonstrates a lower
bound on the problem of secret leakage on GitHub. The full
extent of the problem is likely much worse than we report.
The remainder of this paper is organized as follows:
Section II analyzes related work; Section III describes our secret
detection process and experimental methodology; Section IV
contains an ethical statement from the authors; Section V char-
acterizes secret leakage; Section VI evaluates our methodology;
Section VII performs data analysis to investigate root cause of
leakage; Section VIII considers various case studies; Section IX
discusses potential mitigations; Section X acknowledges threats
to validity; and Section XI concludes the paper.
II. RELATED WORK
GitHub is the world’s most popular site for storing code [2]
and thus is a popular place for software engineering research.
Researchers have analyzed GitHub data to see how software
engineers track issues [7], [10], [37], resolve bugs [54], use
pull requests [61], [66], and even investigate gender bias in
open-source projects [57]. Due to GitHub’s research popularity,
researchers have created tools such as GHTorrent [31] and
Boa [13] to assist others, and Google maintains a snapshot of
open-source repositories in BigQuery [28], [36].
Despite its importance, security-sensitive secret information
is regularly leaked. Data breaches regularly compromise users’
PII and secrets [26]. A clever Google search can reveal ﬁles
containing passwords and keys to an attacker [29], [44]. Popular
resources such as Docker images and AWS VMs can be full of
security issues to the publisher, consumer, and manager of an
environment [64]. These images, which are often public, have
frequently been found to contain leftover secrets that can be
easily obtained by attackers [5] or have numerous vulnerabilities
that threaten contained secrets [52].
Tools exist that work to identify secrets in text for secrets
of both ﬁxed and variable formats. Since variable format pass-
words and API keys can have high degrees of entropy [12], [60],
one approach for ﬁnding secrets is searching for high entropy
strings; this technique is employed by tools like TrufﬂeHog [59].
For ﬁnding secrets with ﬁxed structures, regular expressions
can be effective. Targeted regular expressions have been built
to extract API keys from Android applications on Google
Play [12], [62] and have recently been added to TrufﬂeHog [59].
Unfortunately, these tools are prone to large numbers of false
positives as they use an inaccurate set of regular expressions
that often match generic Base64 strings, and they generally
have a smaller set of targets than our work. Supervised neural
networks have been built to attempt to solve these issues [12],
but ultimately fall victim to the same problems due to their
limited training data. Essentially, there is no existing tool that
can be used to conﬁdently mine GitHub at a large-scale.
Secret leakage via GitHub ﬁrst gained signiﬁcant attention
in 2013 when people used GitHub’s search tool with targeted
strings to ﬁnd thousands of keys and passwords [21], [25], [41].
This problem remains, and leakage cannot easily be ﬁxed with
a commit to remove the secret as the secret can be recovered
from Git history [50]. Tools exist to automatically recover
secrets from history [32], although they cannot be used at a
large-scale. Websites have discussed this problem [4], [8], [33],
[46], [48], [63], [65], but they use naive techniques that result
in shallow or non-validated conclusions.
The work closest to ours is by Sinha et al. [53], which, to our
knowledge, is the only peer-reviewed work on GitHub secret
leakage. This short paper identiﬁed AWS keys in a sample of
repositories using regular expressions and light static analysis.
This work only investigated Java ﬁles in 84 repositories for a
single credential type with unvalidated heuristics. In our paper,
we develop more accurate techniques to mine for 19 types of
secrets at a large-scale. We also examine related issues like
root causes and potential mitigations.
III. SECRET DETECTION
In this section, we describe our approach for detecting and
validating secrets. We deﬁne a “secret” as a cryptographic
key or API credential whose privacy must be maintained for
security. We brieﬂy outline the overall strategy here before
discussing details in the following subsections.
A major issue in detecting secrets is avoiding false positives
from non-secret random strings. Naively using tools from prior
work, such as scanning for high entropy strings or writing
regular expressions matching known secret formats, may result
in high numbers of false positives as strings detected by these
methods are not guaranteed to be secret. In order to avoid this
problem, we developed a rigorous multi-phase process that
combined multiple methods to detect candidate secrets and
then validate them to obtain high conﬁdence in their sensitivity.
Our multi-phase process is shown in Figure 1. We began
in Phase 0 by surveying a large set of API credentials and
cryptographic keys to identify any with distinct structures
unlikely to occur by chance, giving high conﬁdence in their
validity if detected. We then wrote regular expressions to
recognize these secrets. Note that we did not attempt to examine
passwords as they can be virtually any string in any given ﬁle
type, meaning they do not conform to distinct structures and
making them very hard to detect with high accuracy.
Then, in Phases 1a and 1b, we pursued two complementary
approaches for locating ﬁles that may contain secrets. In Phase
1a, we developed targeted queries for GitHub’s Search API
to collect “candidate ﬁles”, which were ﬁles likely to contain
secrets. We continuously searched this API to identify new
secrets as they are committed in real-time. In Phase 1b, we
searched for secrets in a snapshot of GitHub maintained as a
2
Fig. 1: Our secret collection methodology involves various phases to identify secrets with high conﬁdence
public dataset in Google BigQuery [28]. This provided a large
sample of repositories, especially those that may have been
updated before we began our continuous search on GitHub. We
chose the BigQuery snapshot instead of alternative collections
of GitHub data (e.g. GHTorrent) [31] because BigQuery
contains searchable ﬁle contents. Creating this dataset ourselves
by cloning and examining each repository was infeasible due
to computational constraints and GitHub rate limits.
In Phase 2, we used the regular expressions developed in
Phase 0 to scan the candidate ﬁles from Phase 1 and identify
“candidate secrets.” Candidate secrets were then scanned by
three ﬁlters in Phases 3a, 3b, and 3c to ﬂag and remove
candidate secrets that were unlikely to be valid. After the
ﬁltering in Phase 3, we considered the remaining candidates to
be “valid secrets” that we then used in later analyses. We note
that the secrets classiﬁed in Phase 3 as “valid” are not always
“sensitive.” For example, an RSA key used in an OpenSSL unit
test may be valid — because it is, in fact, a key — but is
non-sensitive as its secrecy is not required. We examine the
impact of this issue on our results in Section V-B.
A. Phase 0: Survey of Popular APIs
Identifying secrets within code or data ﬁles can be a difﬁcult
task as secrets take on a wide variety of forms depending on
their type, application, and platform. As shown by Phase 0 in
Figure 1, we worked to identify a set of keys that conform to
highly distinct structures. Because of their distinct structures,
these keys are unlikely to occur by random chance, and so their
detection gives high certainty in their validity. We call these
types of keys our “distinct secrets.” For these distinct secrets, we
manually constructed “distinct secret regular expressions” that
could be used in a later phase to extract candidate secrets with
high conﬁdence from a given input ﬁle. In total, we identiﬁed
15 API key types and 4 asymmetric private key types that
have distinct signatures. While these types are not exhaustive,
they represent many of the most popular secrets in use by
software developers, and their highly distinct structures allow
us to construct a high conﬁdence lower bound evaluation of
leakage on GitHub.
1) API Keys: Some popular API services add a distinct
signature to their randomly generated values when creating
API secrets. For example, all Amazon AWS Access Key ID
values start with the string AKIA and Google API keys start
with AIza [53]. Such an approach does not degrade the security
of the API secret in terms of its randomness, but it does make
searching for leaked keys signiﬁcantly easier.
We began looking for services with distinct keys by
enumerating all websites and services in the Alexa Top 50
Global and United States lists and in an open-source list of
popular public APIs [49]. Next, we searched these lists to
identify around 50 well-known and commonly-used services
that provide a public API and whose key leakage would entail
a security risk. We evaluated security risk by analyzing the
functional scope of the APIs to determine how the different
services could be abused; for example, AWS keys could be used
to authorize expensive computation (monetary risk) or to access
and modify data in cloud storage (data integrity and privacy).
Finally, for each high-risk API, we registered and created 10
unique sets of developer credentials to conﬁrm whether the
provided secrets showed a distinct signature and, if so, we
manually developed a regular expression that tightly matched
those secrets. In total, we were able to compile signatures for
11 unique platforms (e.g., Google) and 15 distinct API services
(e.g., Google Drive), of which 5 of the platforms and 9 of the
APIs are for websites in the Alexa Top 50 for the U.S. at time
of writing. These APIs, their keys, and their respective risks if
compromised are shown in Table I. The regular expression we
used for each key can be found in Table III in the Appendix.
The listed API keys have varying levels of secrecy and
complexity to compromise because they may require additional
information to be fully utilized. For example, sensitive Amazon
AWS requests require both the Access Key ID, which has
a distinct structure, and the Access Key Secret, which does
not. Similarly, we note that Google’s OAuth ID is often not
considered secret, but its presence can allow us to locate
an adjacent OAuth secret. In Table I, we distinguish keys
that require additional pieces of information as “multi-factor
secrets”, while keys that are used alone are classiﬁed as “single-
factor secrets”. Importantly, we show in Section V-D that
compromising multi-factor secrets is not difﬁcult because we
can leverage the distinct secret to identify associated secrets
with high probability. Another potential hurdle for compromise
is that some platforms allow users to place restrictions on their
keys. For example, attacking OAuth ﬂows may be difﬁcult due
to restrictions placed on redirect URIs, although compromise
may still be possible with misuse and misconﬁguration [14],
[15], [43], [56]. Despite these considerations, in general, all
identiﬁed keys lead to information whose leakage would
3
/searchw/ keywords Google Github SnapshotGitHub APICandidate FilesRegex For Distinct SecretsFiles w/ Valid SecretAnalyticsExperimentsCandidate Secret ScanValidity FiltersAnalysis1a2WordFilter3bSurvey of Distinct Secrets0EntropyFilter3aPatternFilter3cFiles w/ CandidateSecrets1bFile CollectionTABLE I: Keys for many popular APIs have distinct structures whose compromise would result in
security risk
Single-factor
Multi-factor
Primary Risks
Data
Integrity
Domain
Platform/API
Key Type
Social Media
Finance
Communications
Storage
IaaS
Private Keys
Twitter
Facebook
a
YouTube
Picatic
Stripe