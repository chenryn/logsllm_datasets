![](img/cc8413b8-2fa0-4328-9227-476a4babb78e.png)
Output of the Command docker system info
# 列出资源消耗
随着时间的推移，Docker 主机可以在内存和磁盘上积累相当多的资源，例如映像、容器和卷。就像每个好家庭一样，我们应该保持环境清洁，释放未使用的资源来回收空间。否则，将会有 Docker 不允许我们添加任何新资源的时刻，这意味着由于磁盘或内存中缺乏可用空间，拉映像等操作可能会失败。
Docker CLI 提供了一个方便的小`system`命令，该命令列出了我们的系统上当前使用了多少资源，以及其中有多少空间可以回收。命令是:
```
$ docker system df 
```
如果您在系统上执行此命令，您应该会看到类似如下的输出:
```
TYPE          TOTAL   ACTIVE   SIZE      RECLAIMABLE
Images        21      9        1.103GB   845.3MB (76%)
Containers    14      11       9.144kB   4.4kB (48%)
Local Volumes 14      14       340.3MB   0B (0%)
Build Cache                    0B        0B
```
输出中的最后一行`Build Cache`仅在较新版本的 Docker 上显示。最近添加了此信息。前面的输出解释如下:
*   在我的例子中，输出告诉我，在我的系统上，我当前有本地缓存的`21`映像，其中`9`正在使用中。如果当前至少有一个运行或停止的容器基于某个映像，则该映像被视为处于活动状态。这些映像占用了`1.1` GB 的磁盘空间。接近`845` MB 技术上可以回收，因为目前没有使用相应的映像。
*   此外，我的系统中有`11`个正在运行的容器和三个停止的容器，总共有`14`个容器。我可以收回被停止的容器所占据的空间，就我而言，这就是`4.4 kB`。
*   我的主机上也有`14`活动卷，总共消耗约`340` MB 的磁盘空间。由于所有卷都在使用中，我现在无法回收任何空间。
*   最后，我的`Build Cache`目前是空的，因此我当然也不能在那里回收任何空间。
如果我想获得更多关于系统资源消耗的详细信息，我可以使用`-v`标志在详细模式下运行相同的命令:
```
$ docker system df -v 
```
这将为我提供所有映像、容器和卷及其各自大小的详细列表。可能的输出如下所示:
![](img/a3d3b7ec-2c73-4e0b-89be-8cc34f51edfb.png)
Verbose output of the system resources consumed by Docker
这个冗长的输出应该给我们足够详细的信息，以便我们做出明智的决定，是否需要开始清理我们的系统，以及哪些部分可能需要清理。
# 清理未使用的资源
一旦我们得出结论，需要进行一些清理，Docker 就会为我们提供所谓的修剪命令。对于每个资源，例如映像、容器、卷和网络，都存在一个`prune`命令。
# 清洗容器
在本节中，我们希望通过修剪容器来重新获得未使用的系统资源。让我们从这个命令开始:
```
$ docker container prune
```
上述命令将从系统中移除所有不处于`running`状态的容器。在删除当前处于`exited`或`created`状态的容器之前，Docker 会要求确认。如果您想跳过此确认步骤，您可以使用`-f`(或`--force`)标志:
```
$ docker container prune -f 
```
在某些情况下，我们可能希望从系统中移除所有容器，甚至是正在运行的容器。我们不能为此使用`prune`命令。相反，我们应该使用一个命令，比如下面的组合表达式:
```
$ docker container rm -f $(docker container ls -aq) 
```
请小心前面的命令。它会毫无预警地移除所有容器，甚至是正在运行的容器！在您继续之前，请再次详细查看前面的命令，并尝试解释到底发生了什么以及为什么。
# 拍摄映像
接下来是映像。如果我们想释放所有未使用的映像层占用的空间，我们可以使用以下命令:
```
$ docker image prune 
```
在我们向 Docker 再次确认我们确实想要释放未使用的映像层所占用的空间后，这些被移除。现在我必须说明当我们谈论未使用的映像层时，我们指的是什么。正如您在上一章中回忆的那样，映像是由一堆不可变的层组成的。现在，当我们多次构建自定义映像时，每次对构建映像的应用的源代码进行一些更改，然后我们重新创建图层，同一图层的早期版本就会变成孤立的。*为什么会这样？*原因是图层是不可变的，上一章已经详细讨论过了。因此，当源代码中用于构建图层的内容发生变化时，必须重新构建该图层，而之前的版本将被放弃。
在我们经常构建映像的系统中，孤立映像图层的数量会随着时间的推移而大幅增加。所有这些孤立层都将通过前面的`prune`命令移除。
类似于容器的`prune`命令，我们可以通过使用 force 标志来避免 Docker 要求我们确认:
```
$ docker image prune -f 
```
映像`prune`命令还有一个更激进的版本。有时，我们不只是想删除孤立的映像层，而是删除系统中当前未使用的所有映像。为此，我们可以使用`-a`(或`--all`)标志:
```
$ docker image prune --force --all  
```
执行前面的命令后，只有一个或多个容器当前使用的映像会保留在本地映像缓存中。
# 采购量
Docker 卷用于允许容器对数据的持久访问。这些数据可能很重要，因此本节中讨论的命令应该特别小心地应用。
如果您知道要回收卷占用的空间并以此不可逆转地销毁底层数据，您可以使用以下命令:
```
$ docker volume prune 
```
此命令将删除至少一个容器当前未使用的所有卷。
This is a destructive command and cannot be undone. You should always create a backup of the data associated with the volumes before you delete them except when you're sure that the data has no further value.
为了避免系统损坏或应用出现故障，Docker 不允许您删除至少一个容器当前正在使用的卷。这甚至适用于卷被停止的容器使用的情况。您总是必须首先移除使用卷的容器。
修剪卷时，一个有用的标志是`-f`或`--filter`标志，它允许我们指定要修剪的卷集。请看下面的命令:
```
$ docker volume prune --filter 'label=demo' 
```
这将仅将命令应用于具有带`demo`值的`label`的卷。过滤标志格式为`key=value`。如果需要多个过滤器，那么我们可以使用多个标志:
```
$ docker volume prune --filter 'label=demo' --filter 'label=test'
```
在修剪其他资源(如容器和映像)时，也可以使用过滤器标志。
# 普鲁宁网络
最后一个可以修剪的资源是网络。我们将在[第 7 章](07.html)、*单主机联网*中详细讨论网络。要删除所有未使用的网络，我们使用以下命令:
```
$ docker network prune
```
这将删除当前没有连接容器或服务的网络。这个时候请不要太担心网络。我们会回到他们身边，这一切对你来说会更有意义。
# 准备好一切
如果我们只想一次性删除所有内容，而不必输入多个命令，我们可以使用以下命令:
```
$ docker system prune
```
Docker CLI 将要求我们确认，然后以正确的顺序一次性删除所有未使用的容器、映像、卷和网络。
同样，为了避免 Docker 要求我们确认，我们可以在命令中使用 force 标志。
# 消耗 Docker 系统事件
Docker 引擎在创建、运行、停止和删除容器和其他资源(如卷或网络)时，会生成事件日志。这些事件可以被外部系统消费，例如一些基础设施服务使用它们来做出明智的决策。这种服务的一个例子可以是创建系统上当前运行的所有容器的清单的工具。
我们可以通过使用以下命令，将自己连接到这个系统事件流中，并输出它们，例如在终端中:
```
$ docker system events
```
该命令是一个阻塞命令。因此，当您在终端会话中执行它时，相应的会话将被阻止。因此，我们建议您在想要使用此命令时总是打开一个额外的窗口。
假设我们已经在一个额外的终端窗口中执行了前面的命令，我们现在可以测试它并运行一个容器，如下所示:
```
$ docker container run --rm alpine echo "Hello World"
```
生成的输出应该如下所示:
```
2018-01-28T15:08:57.318341118-06:00 container create 8e074342ef3b20cfa73d17e4ef7796d424aa8801661765ab5024acf166c6ecf3 (image=alpine, name=confident_hopper)
2018-01-28T15:08:57.320934314-06:00 container attach 8e074342ef3b20cfa73d17e4ef7796d424aa8801661765ab5024acf166c6ecf3 (image=alpine, name=confident_hopper)
2018-01-28T15:08:57.354869473-06:00 network connect c8fd270e1a776c5851c9fa1e79927141a1e1be228880c0aace4d0daebccd190f (container=8e074342ef3b20cfa73d17e4ef7796d424aa8801661765ab5024acf166c6ecf3, name=bridge, type=bridge)
2018-01-28T15:08:57.818494970-06:00 container start 8e074342ef3b20cfa73d17e4ef7796d424aa8801661765ab5024acf166c6ecf3 (image=alpine, name=confident_hopper)
2018-01-28T15:08:57.998941548-06:00 container die 8e074342ef3b20cfa73d17e4ef7796d424aa8801661765ab5024acf166c6ecf3 (exitCode=0, image=alpine, name=confident_hopper)
2018-01-28T15:08:58.304784993-06:00 network disconnect c8fd270e1a776c5851c9fa1e79927141a1e1be228880c0aace4d0daebccd190f (container=8e074342ef3b20cfa73d17e4ef7796d424aa8801661765ab5024acf166c6ecf3, name=bridge, type=bridge)
2018-01-28T15:08:58.412513530-06:00 container destroy 8e074342ef3b20cfa73d17e4ef7796d424aa8801661765ab5024acf166c6ecf3 (image=alpine, name=confident_hopper)
```
在这个输出中，我们可以跟踪容器的确切生命周期。容器被创建、启动，然后被销毁。如果此命令生成的输出不符合您的喜好，您可以使用`--format`参数随时更改。格式的值必须使用 Go 模板语法编写。以下示例输出事件的类型、映像和动作:
```
$ docker system events --format 'Type={{.Type}} Image={{.Actor.Attributes.image}} Action={{.Action}}'
```
如果我们像以前一样运行完全相同的容器`run`命令，现在生成的输出如下所示:
```
Type=container  Image=alpine     Action=create
Type=container  Image=alpine     Action=attach
Type=network    Image= Action=connect
Type=container  Image=alpine     Action=start
Type=container  Image=alpine     Action=die
Type=network    Image= Action=disconnect
Type=container  Image=alpine     Action=destroy
```
# 摘要
在这一章中，我们介绍了 Docker 卷，它可以用来持久化容器产生的状态并使其持久化。我们还可以使用卷向容器提供来自各种来源的数据。我们已经学习了如何创建、装载和使用卷。我们学习了各种定义卷的技术，例如通过名称、装载主机目录或在容器映像中定义卷。
在这一章中，我们还讨论了各种系统级命令，这些命令或者为我们排除系统故障提供了丰富的信息，或者管理和删减了 Docker 使用的资源。最后，我们学习了如何可视化和潜在地使用容器运行时生成的事件流。
在下一章中，我们将介绍容器编排的基础知识。在这里，我们将讨论当我们不仅需要管理和运行一个或几个容器，而且可能需要在集群中的许多节点上运行数百个容器时需要什么。我们会看到有很多挑战需要解决。这就是编排引擎发挥作用的地方。
# 问题
请尝试回答以下问题来评估您的学习进度:
1.  如何使用默认驱动创建一个有名称的命名数据卷，例如`my-products`？
2.  如何使用映像`alpine`运行容器，并将只读模式的卷`my-products`装入/data 容器文件夹？
3.  如何定位与卷`my-products`关联的文件夹并导航到该文件夹？还有，你会如何创建一个包含一些内容的文件，`sample.txt`？
4.  在读/写模式下，如何运行另一个将`my-products`卷装入`/app-data`文件夹的`alpine`容器？在这个容器中，导航到`/app-data`文件夹，创建一个包含一些内容的`hello.txt `文件。
5.  如何将主机卷(例如`~/my-project`)装入容器？
6.  如何从系统中删除所有未使用的卷？
7.  您将如何确定您的系统上运行的 Linux 内核和 Docker 的确切版本？
# 进一步阅读
以下文章提供了更深入的信息:
*   在[http://dockr.ly/2EUjTml](http://dockr.ly/2EUjTml)使用体积
*   管理 http://dockr.ly/2EhBpzD Docker 的数据
*   http://bit.ly/2sjIfDj 的 PWD Docker 卷
*   容器——在[http://bit.ly/2bVrCBn](http://bit.ly/2bVrCBn)清理你的房子
*   http://dockr.ly/2BlZmXY Docker 系统事件