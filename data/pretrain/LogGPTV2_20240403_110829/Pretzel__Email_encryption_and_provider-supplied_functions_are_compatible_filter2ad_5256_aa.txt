# Title: Pretzel: Email Encryption and Provider-Supplied Functions are Compatible

## Authors:
- Trinabh Gupta<sup>∗†</sup>
- Henrique Fingler<sup>∗</sup>
- Lorenzo Alvisi<sup>∗‡</sup>
- Michael Walfish<sup>†</sup>

<sup>∗</sup>UT Austin  
<sup>†</sup>NYU  
<sup>‡</sup>Cornell

## Abstract
Today, emails are often encrypted, but only between mail servers. The vast majority of emails remain in plaintext on the servers that handle them, leaving open the possibility of attacks, privacy violations, and other disclosures. Publicly, email providers have stated that default end-to-end encryption would conflict with essential functions such as spam filtering, which require analyzing email text. This paper aims to demonstrate that there is no inherent conflict. We design, implement, and evaluate Pretzel, a system that refines and adapts a cryptographic protocol to enable two parties to jointly perform a classification task without revealing their inputs to each other. Our experimental evaluation shows that email can be encrypted end-to-end while allowing providers to compute over it, with tolerable overheads: clients must devote some storage and processing, and provider overhead is approximately 5× compared to the current status quo.

### CCS Concepts
- **Information Systems** → Email
- **Security and Privacy** → Cryptography; Privacy-preserving protocols

### Keywords
- Encrypted email
- Secure two-party computation
- Linear classifiers

### ACM Reference Format
Trinabh Gupta, Henrique Fingler, Lorenzo Alvisi, and Michael Walfish. 2017. Pretzel: Email encryption and provider-supplied functions are compatible. In Proceedings of SIGCOMM '17, Los Angeles, CA, USA, August 21-25, 2017, 14 pages. https://doi.org/10.1145/3098822.3098835

## 1. Introduction
Email is ubiquitous and fundamental, serving as the principal communication medium for many. For these reasons, our ideal in this paper is that email should be end-to-end private by default. While hop-by-hop encryption has made progress in protecting email privacy against network-level attacks, emails are not typically encrypted end-to-end. Intermediate hops, such as the sender's and receiver's providers, handle emails in plaintext. This arrangement, though generally trusted, is not fundamentally secure.

Reputable organizations have been known to harbor rogue employees and are vulnerable to hacks and legal requests for user data. End-to-end email encryption can protect email contents from unauthorized access, but it is often cited as incompatible with value-added functions like spam filtering, which require analyzing email text. These functions are proprietary, and providers do not want to publicize their models.

Our objective is to refute these claims of incompatibility and build an alternative, called Pretzel. In Pretzel, senders encrypt emails using an end-to-end encryption scheme, and recipients decrypt and obtain the email contents. The email provider and recipient then engage in a secure two-party computation (2PC), where both parties learn the output of an agreed-upon function without revealing the inputs to each other. While Pretzel cannot achieve perfect privacy, it minimizes information leaks and allows users to opt out if necessary.

Pretzel faces limitations, including deployment difficulties, key management, usability, and political issues. However, we hope that demonstrating the technical feasibility and providing a rough cost estimate will shape the discourse on the viability of default end-to-end email encryption.

## 2. Architecture and Overview

### 2.1 Design Ethos: (Non)Requirements
Pretzel aims to:
- Enable rich computation over email.
- Hide the inputs and implementations of those computations.
- Impose little overhead.

These ideals are in tension, and we describe the compromises that form Pretzel’s design ethos:

- **Functionality**: Pretzel approximates the value-added functions provided by email providers rather than replicating them exactly.
- **Provider Privacy**: Pretzel does not support proprietary algorithms but protects the inputs to the algorithms. All users know the spam filtering model, but the parameters are proprietary.
- **User Privacy**: Pretzel does not enshroud users' emails in complete secrecy but reveals only the outputs of the computation, which are short.
- **Threat Model and Maliciousness**: Pretzel does not protect against subverting the protocol’s semantics but defends against adversaries deviating from the protocol’s mechanics.
- **Performance and Price**: Pretzel incurs network, storage, and computation overhead at clients but aims to limit these costs to small multiples of the current overhead.
- **Deployability and Usability**: Certain computations, such as encryption, run on the client, but Pretzel aims to be configuration-free and backwards compatible with existing email delivery infrastructure (SMTP, IMAP, etc.).

### 2.2 Architecture
Figure 1 shows Pretzel’s architecture. Pretzel comprises an e2e module and function modules. The e2e module implements an end-to-end encryption scheme, while a function module implements a computation over the email content (e.g., spam filtering). The e2e module is client-side only, while a function module has components at both the client and the provider.

At a high level, Pretzel works as follows:
1. An email sender uses the e2e module to encrypt and sign an email for a recipient.
2. The recipient uses their e2e module to authenticate and decrypt the email.
3. The provider and recipient engage in a 2PC to perform the desired function (e.g., spam filtering) without revealing the email content or the function's implementation details.