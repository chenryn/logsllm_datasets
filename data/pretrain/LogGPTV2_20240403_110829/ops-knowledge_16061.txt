Before my preferred testing library was `unittest`, which worked well with my favorite debugger, Pudb (not Pdb). To use Pudb with `unittest`, I would insert `import pudb; pudb.set_trace()` between the lines of code where I wanted to set a breakpoint. Then, I would run the tests using the command `python -m unittest my_file_test`, where `my_file_test` is the module representation of the `my_file_test.py` file.

However, simply running `nosetests my_file_test.py` would not work and would result in an `AttributeError: StringIO instance has no attribute 'fileno'`. Similarly, using `py.test` with either of the following commands:

- `py.test my_file_test.py`
- `python -m pytest my_file_test.py`

would both throw a `ValueError: redirected Stdin is pseudofile, has no fileno()`.

To use Pudb with `pytest`, you can add the `-s` flag, which prevents `pytest` from replacing `stdin` and `stdout`, thus making debugging accessible. The correct command would be `pytest -s my_file_test.py`.

According to the documentation provided by the `ambi` project, previously, using the `-s` flag was required for regular `pdb` as well. Now, the `-s` flag is implicitly used when the `--pdb` flag is specified. However, `pytest` does not implicitly support Pudb, so you must explicitly set the `-s` flag to enable debugging with Pudb.