2）示例：
#在指定被控主机'SN2013-08-022'获取dig、ping、traceroute目录域名信息
salt 'SN2013-08-022' network.dig www.qq.com
salt 'SN2013-08-022' network.ping www.qq.com
salt 'SN2013-08-022' network.traceroute www.qq.com
#获取指定被控主机'SN2013-08-022'的MAC地址
salt 'SN2013-08-022' network.hwaddr eth0
#检测指定被控主机'SN2013-08-022'是否属于10.0.0.0/16子网范围，属于则返回True
salt 'SN2013-08-022' network.in_subnet 10.0.0.0/16
#获取指定被控主机'SN2013-08-022'的网卡配置信息
salt 'SN2013-08-022' network.interfaces
#获取指定被控主机'SN2013-08-022'的IP地址配置信息
salt 'SN2013-08-022' network.ip_addrs
#获取指定被控主机'SN2013-08-022'的子网信息
salt 'SN2013-08-022' network.subnets
3）API调用：
client.cmd（'SN2013-08-022'， 'network.ip_addrs'）
（9）pkg包管理模块
1）功能：被控主机程序包管理，如yum、apt-get等。
2）示例：
#为所有被控主机安装PHP环境，根据不同系统发行版调用不同安装工具进行部署，如redhat平台的yum，
等价于yum -y install php
salt '*' pkg.install php
#卸载所有被控主机的PHP环境
salt '*' pkg.remove php
#升级所有被控主机的软件包
salt '*' pkg.upgrade
3）API调用：
client.cmd（'SN2013-08-022'， 'pkg.remove'，['php']）
（10）Service服务模块
1）功能：被控主机程序包服务管理。
2）示例：
#开启（enable）、禁用（disable）nginx开机自启动服务
salt '*' service.enable nginx
salt '*' service.disable nginx
#针对nginx服务的reload、restart、start、stop、status操作
salt '*' service.reload nginx
salt '*' service.restart nginx
salt '*' service.start nginx
salt '*' service.stop nginx
salt '*' service.status nginx
3）API调用：
client.cmd（'SN2013-08-022'， 'service.stop'，['nginx']）
（11）其他模块
通过上面介绍的10个常用模块，基本上已经覆盖日常运维操作。Saltstack还
提供了user（系统用户模块）、group（系统组模块）、partition（系统分区模
块）、puppet（puppet管理模块）、system（系统重启、关机模块）、
timezone（时区管理模块）、nginx（Nginx管理模块）、mount（文件系统挂载模
块），等等，更多内容见官网介绍：
http://docs.saltstack.com/ref/modules/all/index.html#all-salt-modules。当然，我们也
可以通过Python扩展功能模块来满足需求。
10.4 grains组件
grains是Saltstack最重要的组件之一，grains的作用是收集被控主机的基本信
息，这些信息通常都是一些静态类的数据，包括CPU、内核、操作系统、虚拟化
等，在服务器端可以根据这些信息进行灵活定制，管理员可以利用这些信息对
不同业务进行个性化配置。官网提供的用来区分不同操作系统的示例如下（采
用jinja模板）：
{% if grains['os'] == 'Ubuntu' %}
host： {{ grains['host'] }}
{% elif grains['os'] == 'CentOS' %}
host： {{ grains['fqdn'] }}
{% endif %}
示例中CentOS发行版主机将被“host：{{grains['fqdn']}}”匹配，以主机
SN2013-08-022（centOS 6.4）为例，最终得到“host：SN2013-08-022”。同时，命
令行的匹配操作系统发行版本为CentOS的被控端可以通过-G参数来过滤，如salt-
G'os：CentOS'test.ping。
10.4.1 grains常用操作命令
匹配内核版本为2.6.32-358.14.1.el6.x86_64的主机：
salt -G 'kernelrelease：2.6.32-358.14.1.el6.x86_64' cmd.run 'uname -a'
获取所有主机的grains项信息：
salt '*' grains.ls
当然，也可以获取主机单项grains数据，如获取操作系统发行版本，执行命
令：salt'SN2013-08-022'grains.item os，结果如图10-9所示。
图10-9 根据grains获取主机操作系统发行版本信息
获取主机id为“SN2013-08-022”的所有grains键及值信息，执行命令如图10-10
所示。
10.4.2 定义grains数据
定义grains数据的方法有两种，其中一种为在被控主机定制配置文件，另一
种是通过主控端扩展模块API实现，区别是模块更灵活，可以通过Python编程动
态定义，而配置文件只适合相对固定的键与值。下面分别举例说明。
图10-10 获取主机所有grains信息（部分截图）
1.被控端主机定制grains数据
SSH登录一台被控主机，如SN2013-08-022，配置文件定制的路径
为/etc/salt/minion，参数为default_include：minion.d/*.conf，具体操作如下：
【/etc/salt/minion.d/hostinfo.conf】
grains：
roles：
- webserver
- memcache
deployment： datacenter4
cabinet： 13
重启被控主机salt-minion服务，使之生效：service salt-minion restart。验证结
果在主控端主机运行：salt'SN2013-08-022'grains.item roles deployment cabinet，观
察配置的键与值，如图10-11所示。
图10-11 定制grains数据信息
2.主控端扩展模块定制grains数据
首先在主控端编写Python代码，然后将该Python文件同步到被控主机，最后
刷新生效（即编译Python源码文件成字节码pyc）。在主控端bash目录
（见/etc/salt/master配置文件的file_roots项，默认的base配置在/srv/salt）下生成
_grains目录，执行install-d/srv/salt/_grains开始编写代码，实现获取被控主机系统
允许最大打开文件数（ulimit-n）的grains数据。
【/srv/salt/_grains/sysprocess.py】
import os，sys，commands
def Grains_openfile（）：
'''
return os max open file of grains value
'''
grains = {}
#init default value
_open_file=65536
try：
getulimit=commands.getstatusoutput（'source /etc/profile；ulimit -
n'）
except Exception，e：
pass
if getulimit[0]==0：
_open_file=int（getulimit[1]）
grains['max_open_file'] = _open_file
return grains
上面代码的说明如下。
·grains_openfile（）定义一个获取最大打开文件数的函数，函数名称没有要
求，符合Python的函数命名规则即可；
·grains={}初始化一个grains字典，变量名一定要用grains，以便Saltstack识
别；
·grains['max_open_file']=_open_file将获取的Linux ulimit-n的结果值赋予
grains['max_open_file']，其中“max_open_file”就是grains的项，_open_file就是
grains的值。
最后同步模块到指定被控端主机并刷新生效，因为grains比较适合采集静态
类的数据，比如硬件、内核信息等。当有动态类的功能需求时，需要提行刷
新，具体操作如下：
同步模块salt'SN2013-08-022'saltutil.sync_all，看看“SN2013-08-022”主机上发
生了什么？文件已经同步到minion cache目录中，如下：
/var/cache/salt/minion/extmods/grains/grains_openfile.py
/var/cache/salt/minion/files/base/_grains/grains_openfile.py
/var/cache/salt/minion/extmods/grains/为扩展模块文件最终存放位置，刷新模
块后将在同路径下生成字节码pyc；/var/cache/salt/minion/files/base/_grains/为临时
存放位置。
刷新模块salt'SN2013-08-022'sys.reload_modules，再看看主机发生了什么变
化？在/var/cache/salt/minion/extmods/grains/位置多了一个编译后的字节码文件
grains_openfile.pyc文件，为Python可执行的格式。
/var/cache/salt/minion/extmods/grains/grains_openfile.py
/var/cache/salt/minion/extmods/grains/grains_openfile.pyc
/var/cache/salt/minion/files/base/_grains/grains_openfile.py
校验结果为可以在主控端查看grains信息，执行salt'SN2013-08-022'grains.item
max_open_file，结果显示“max_open_file：65535”，这就是前面定制的主机grains
信息。
SN2013-08-022：
max_open_file： 65535
10.5 pillar组件
pillar也是Saltstack最重要的组件之一，其作用是定义与被控主机相关的任何
数据，定义好的数据可以被其他组件使用，如模板、state、API等。在pillar中定
义的数据与不同业务特性的被控主机相关联，这样不同被控主机只能看到自己
匹配的数据，因此pillar安全性很高，适用于一些比较敏感的数据，这也是区别
于grains最关键的一点，如定义不同业务组主机的用户id、组id、读写权限、程
序包等信息，定义的规范是采用Python字典形式，即键/值，最上层的键一般为
主机的id或组名称。下面详细描述如何进行pillar的定义和使用。
10.5.1 pillar的定义
1.主配置文件定义
Saltstack默认将主控端配置文件中的所有数据都定义到pillar中，而且对所有
被控主机开放，可通过修改/etc/salt/master配置中的pillar_opts：Ture或False来定
义是否开启或禁用这项功能，修改后执行salt'*'pillar.data来观察效果。图10-12为
pillar_opts：Ture的返回结果，以主机“SN2013-08-022”为例，执行salt'SN2013-08-
022'pillar.data。
图10-12 主机所有pillar信息（部分截图）
2.SLS文件定义
pillar支持在sls文件中定义数据，格式须符合YAML规范，与Saltstack的state
组件十分相似，新人容易将两者混淆，两者文件的配置格式、入口文件top.sls都
是一致的。下面详细介绍pillar使用sls定义的配置过程。
（1）定义pillar的主目录
修改主配置文件/etc/salt/master的pillar_roots参数，定义pillar的主目录，格式
如下：
pillar_roots：
base：
- /srv/pillar
同时创建pillar目录，执行命令：install-d/srv/pillar。
（2）定义入口文件top.sls
入口文件的作用一般是定义pillar的数据覆盖被控主机的有效域范围，“*”代
表任意主机，其中包括了一个data.sls文件，具体内容如下：
【/srv/pillar/top.sls】
base：
'*'：
- data
【/srv/pillar/data.sls】
appname： website
flow：
maxconn： 30000
maxmem： 6G
（3）校验pillar
通过查看“N2013-08-022”主机的pillar数据，可以看到多出了data.sls数据项，
原因是我们定义top.sls时使用“*”覆盖了所有主机，这样当查看“SN2013-08-
022”的pillar数据时可以看到我们定义的数据，如图10-13所示，如果结果不符合
预期，可以尝试刷新被控主机pillar数据，运行salt'*'saltutil.refresh_pillar即可。
图10-13 返回主机pillar的信息
10.5.2 pillar的使用
完成pillar配置后，接下来介绍使用方法。我们可以在state、模板文件中引
用，模板格式为“{{pillar变量}}”，例如：
{{ pillar['appname'] }}（一级字典）
{{ pillar['flow']['maxconn'] }}（二级字典）或{{ salt['pillar.get']
（'flow： 'maxconn'， {}） }}
Python API格式如下：
pillar['flow']['maxconn']
pillar.get（' flow：appname'， {}）
1.操作目标主机
见10.5.1节，通过-I选项来使用pillar来匹配被控主机：
# salt -I 'appname：website' test.ping
SN2013-08-021：
True
SN2013-08-022：
True
2.结合grains处理数据的差异性
首先通过结合grains的id信息来区分不同id的maxcpu的值，其次进行引用观察
匹配的信息，延伸“10.5.1 pillar的定义”的例子，将data.sls修改成如下形式，其
中，“if…else…endfi”为jinja2的模板语法，更多信息请访问jinja2官网语法介绍，
网址为http://jinja.pocoo.org/docs/templates/。
appname： website
flow：
maxconn： 30000
maxmem： 6G
{% if grains['id'] == 'SN2013-08-022' %}
maxcpu： 8
{% else %}
maxcpu： 4
{% endif %}
通过查看被控主机的pillar数据，可以看到maxcpu的差异，如图10-14所示。
图10-14 不同主机产生的pillar数据差异
10.6 state介绍
state是Saltstack最核心的功能，通过预先定制好的sls（salt state file）文件对
被控主机进行状态管理，支持包括程序包（pkg）、文件（file）、网络配置
（network）、系统服务（service）、系统用户（user）等，更多状态对象见
http://docs.saltstack.com/ref/states/all/index.html。
10.6.1 state的定义
state的定义是通过sls文件进行描述的，支持YAML语法，定义的规则如下：
$ID：
$State：
- $state： states
其中：
·$ID，定义state的名称，通常采用与描述的对象保持一致的方法，如
apache、nginx等；
·$State，须管理对象的类型，详见
http://docs.saltstack.com/ref/states/all/index.html；
·$state：states，定制对象的状态。
官网提供的示例如下：
1 apache：
2 pkg：
3 - installed