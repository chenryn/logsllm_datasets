We weren’t able to get access to the primary SAM file through the
Zervit 0.4 vulnerability, but we were able to download a backup copy from
the C:\Windows\repair directory using a local file-inclusion vulnerability. But
when we try to read the SAM file (as shown in Listing 9-9), we don’t see any
password hashes.
root@bt:~# cat sam
regf P P5gfhbinnk,u  xSAMXskx x  pµ\µ?
? µ µ
nk L B x SAMskxx7d
HXµ4µ? vk  CP  µxµD0µ µ 4µ1 ? 
lf SAMnk u H# Px Domainsvk8lf Domank
\J 0x ( Accountvk 
--snip--
Listing 9-9: Viewing the SAM file
204 Chapter 9
The SAM file is obfuscated because the Windows Syskey utility encrypts
the password hashes inside the SAM file with 128-bit Rivest Cipher 4 (RC4)
to provide additional security. Even if an attacker or pentester can gain
access to the SAM file, there’s a bit more work to do before we can recover the
password hashes. Specifically, we need a key to reverse the encrypted hashes.
The encryption key for the Syskey utility is called the bootkey, and it’s
stored in the Windows SYSTEM file. You’ll find a copy of the SYSTEM file in
the C:\Windows\repair directory where we found the backup SAM file. We can
use a tool in Kali called Bkhive to extract the Syskey utility’s bootkey from the
SYSTEM file so we can decrypt the hashes, as shown in Listing 9-10.
root@kali:~# bkhive system xpkey.txt
bkhive 1.1.1 by Objectif Securite
http://www.objectif-securite.ch
original author: PI:EMAIL
Root Key : $$$PROTO.HIV
Default ControlSet: 001
Bootkey: 015777ab072930b22020b999557f42d5
Listing 9-10: Using Bkhive to extract the bootkey
Here we use Bkhive to extract the bootkey by passing in the SYSTEM
file system (the file we downloaded from the repair directory using the
Zervit 0.4 directory traversal) as the first argument and extracting the file
to xpkey.txt. Once we have the bootkey, we can use Samdump2 to retrieve
the password hashes from the SAM file, as shown in Listing 9-11. Pass
Samdump2 the location of the SAM file and the bootkey from Bkhive as
arguments, and it will use the bootkey to decrypt the hashes.
root@kali:~# samdump2 sam xpkey.txt
samdump2 1.1.1 by Objectif Securite
http://www.objectif-securite.ch
original author: PI:EMAIL
Root Key : SAM
Administrator:500:e52cac67419a9a224a3b108f3fa6cb6d:8846f7eaee8fb117ad06bdd830b7586c:::
Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
HelpAssistant:1000:df40c521ef762bb7b9767e30ff112a3c:938ce7d211ea733373bcfc3e6fbb3641:::
SUPPORT_388945a0:1002:aad3b435b51404eeaad3b435b51404ee:bc48640a0fcb55c6ba1c9955080a52a8:::
Listing 9-11: Using Samdump2 to recover Windows hashes
Now compare these hashes to those found with the hashdump command
in an active Meterpreter session from Listing 9-8. (A Meterpreter session
with sufficient privileges can dump password hashes on the fly without
requiring us to download the SAM and SYSTEM files.) Notice that our hash
list in Listing 9-11 lacks entries for the users georgia or secret. What happened?
When using the Zervit directory traversal, we weren’t able to access
the main SAM file at C:\Windows\System32\config and instead downloaded
a backup from C:\Windows\repair\sam. These users must have been created
Password Attacks 205
after the SAM file backup was created. We do have a password hash for the
Administrator user, though. Though not complete or fully up-to-date, we may
still be able to use cracked hashes from this backup SAM to log in to the
systems.
Now let’s look at another way to access password hashes.
Dumping Password Hashes with Physical Access
On some engagements, you’ll actually have physical access to user machines,
with so-called physical attacks in scope. While having physical access may
not appear very useful at first, you may be able to access the password hashes
by restarting a system using a Linux Live CD to bypass security controls.
(We’ll use a Kali ISO image, though other Linux Live CDs such as Helix
or Ubuntu will work. We used a prebuilt Kali virtual machine in Chapter 1.
To get a standalone ISO of Kali, go to http://www.kali.org.) When you boot
a machine with a Live CD, you can mount the internal hard disk and gain
access to all files, including the SAM and SYSTEM files. (When Windows
boots, there are certain security controls in place to stop users from access-
ing the SAM file and dumping password hashes, but these aren’t active when
the filesystem is loaded in Linux.)
Our Windows 7 virtual machine, with its solid external security posture,
has been a bit neglected in these last few chapters. Let’s dump its hashes
using a physical attack. First, we’ll point our virtual machine’s optical drive
to a Kali ISO file, as shown in Figure 9-1 (for VMware Fusion). In VMware
Player, highlight your Windows 7 virtual machine, right-click it and choose
Settings, then choose CD/DVD (SATA) and point to the ISO in the Use
ISO Image field on the right side of the page.
Figure 9-1: Setting our Windows 7 virtual machine to boot from the Kali
ISO file
By default, VMware will boot up the virtual machine so quickly that
it will be difficult to change the BIOS settings to boot from the CD/DVD
drive instead of the hard disk. To fix this, we’ll add a line to the VMware
configuration file (.vmx) to delay the boot process at the BIOS screen for
a few seconds.
206 Chapter 9
1. On your host machine, browse to where you saved your virtual machines.
Then, in the folder for the Windows 7 target, find the .vmx configura-
tion file, and open it in a text editor. The configuration file should look
similar to Listing 9-12.
.encoding = "UTF-8"
config.version = "8"
virtualHW.version = "9"
vcpu.hotadd = "TRUE"
scsi0.present = "TRUE"
scsi0.virtualDev = "lsilogic"
--snip--
Listing 9-12: VMware configuration file ( .vmx)
2. Add the line bios.bootdelay = 3000 anywhere in the file. This tells the
virtual machine to delay booting for 3000 ms, or three seconds, enough
time for us to change the boot options.
3. Save the .vmx file, and restart the Windows 7 target. Once you can access
the BIOS, choose to boot from the CD drive. The virtual machine should
start the Kali ISO. Even though we’re booted into Kali, we can mount the
Windows hard disk and access files, bypassing the security features of
the Windows operating system.
Listing 9-13 shows how to mount the file system and dump the password
hashes.
root@kali:# umkdir -p /mnt/sda1
root@kali:# vmount /dev/sda1 /mnt/sda1
root@kali:# wcd /mnt/sda1/Windows/System32/config/
root@kali:/mnt/sda1/Windows/System32/config bkhive SYSTEM out
root@kali:/mnt/sda1/Windows/System32/config samdump2 SAM out
samdump2 1.1.1 by Objectif Securite
http://www.objectif-securite.ch
original author: PI:EMAIL
Root Key : CMI-CreateHive{899121E8-11D8-41B6-ACEB-301713D5ED8C}
Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
Georgia Weidman:1000:aad3b435b51404eeaad3b435b51404ee:8846f7eaee8fb117ad06bdd830b75B6c:::
Listing 9-13: Dumping Windows hashes with a Linux Live CD
We create a directory where we can mount our Windows filesystem with
the mkdir command at u. Next, we use mount v to mount the Windows file-
system (/dev/sda1) in the newly created directory (/mnt/sda1), which means
that the target’s C drive is effectively at /mnt/sda1. The SAM and SYSTEM
files in Windows are in the C:\Windows\System32\config directory, so we change
directories to /mnt/sda1/Windows/System32/config to access these files using
Password Attacks 207
cd w, at which point we can use Samdump2 and Bkhive against the SAM
and SYSTEM files without first saving these files and moving them to our
Kali system.
Once again we’ve managed to get access to password hashes. We now
have hashes for our Windows XP target, our Windows 7 target, our Linux
target, and the FileZilla FTP server on the Windows XP target.
note In Chapter 13, we’ll explore some tricks for using password hashes to authenticate
without the need for access to the plaintext passwords, but usually, in order to use
these hashes, we’ll need to reverse the cryptographic hash algorithms and get the plain-
text passwords. The difficulty of this depends on the password-hashing algorithm used
as well as the strength of the password used.
LM vs. NTLM Hashing Algorithms
Listing 9-14 compares the two password hash entries. The first one belongs
to the Administrator account on Windows XP, which we found with hashdump in
Meterpreter, and the second is Georgia Weidman’s account from Windows 7,
which we found with physical access in the previous section.
Administratoru:500v:e52cac67419a9a224a3b108f3fa6cb6dw:8846f7eaee8fb117ad06bdd830b7586cx
Georgia Weidmanu:1000v:aad3b435b51404eeaad3b435b51404eew:8846f7eaee8fb117ad06bdd830b7586cx
Listing 9-14: Dumping Windows hashes with a Linux Live CD
The first field in the hashes is the username u; the second is the user
ID v; the third is the password hash in LAN Manager (LM) format w; and
the fourth is the NT LAN Manager (NTLM) hash x. LM Hash was the pri-
mary way to hash passwords on Microsoft Windows up to Windows NT, but
it’s a cryptographically unsound method that makes it possible to discover
the correct plaintext password for an LM hash, regardless of a password’s
length and complexity. Microsoft introduced NTLM hashing to replace LM
hash, but on Windows XP, passwords are stored in both LM and NTLM for-
mats by default. (Windows 7 opts exclusively for the more secure NTLM hash.)
In the hashes in Listing 9-14, because both passwords are the
string password, the NTLM hash entries for each account are identi-
cal, but the LM hash fields are different. The first entry has the value
e52cac67419a9a224a3b108f3fa6cb6d, whereas the Windows 7 entry has
aad3b435b51404eeaad3b435b51404ee, which is LM hash-speak for empty. The
inclusion of the LM hash entry will make cracking the hashes much sim-
pler. In fact, any LM-hashed password can be brute-forced in minutes to
hours. In contrast, our ability to crack the NTLM hashes will depend on
both our ability to guess and the length and complexity of the password.
If the hashing function is cryptographically sound, it could take years,
decades, or more than your lifetime to try every possible password.
208 Chapter 9
The Trouble with LM Password Hashes
When you see LM hashes on a pentest, you can be sure that the plaintext
password is recoverable from the password hash. However, one-way hash
functions can’t be reversed. Complex math is used to develop algorithms that
make it impossible to discover the original plaintext password value that was
hashed, given the password hash. But we can run a plaintext password guess
through the cryptographic hashing function and compare the results to
the hash we’re trying to crack; if they’re the same, we’ve found the correct
password.
The following issues contribute to the insecurity of LM hashes:
• Passwords are truncated at 14 characters.
• Passwords are converted to all uppercase.
• Passwords of fewer than 14 characters are null-padded to 14 characters.
• The 14-character password is broken into two seven-character passwords
that are hashed separately.
Why are these characteristics so significant? Say we start with a com-
plex, strong password like this:
T3LF23!+?sRty$J
This password has 15 characters from four classes, including lowercase
letters, uppercase letters, numbers, and symbols, and it’s not based on a
dictionary word. However, in the LM hash algorithm, the password is trun-
cated to 14 characters like this:
T3LF23!+?sRty$
Then the lowercase letters are changed to uppercase:
T3LF23!+?SRTY$
Next, the password is split into two seven-character parts. The two parts
are then used as keys to encrypt the static string KGS!@#$% using the Data
Encryption Standard (DES) encryption algorithm:
T3LF23! +?SRTY$
The resulting eight-character ciphertexts from the encryption are then
concatenated to make the LM hash.
To crack an LM hash, we just need to find seven characters, all upper-
case, with perhaps some numbers and symbols. Modern computing hardware
can try every possible one- to seven-character combination, encrypt the string
KGS!@#$%, and compare the resulting hash to a given value in a matter of min-
utes to hours.
Password Attacks 209
John the Ripper
One of the more popular tools for cracking passwords is John the Ripper.
The default mode for John the Ripper is brute forcing. Because the set of pos-
sible plaintext passwords in LM hash is so limited, brute forcing is a viable
method for cracking any LM hash in a reasonable amount of time, even with
our Kali virtual machine, which has limited CPU power and memory.
For example, if we save the Windows XP hashes we gathered earlier
in this chapter to a file called xphashes.txt, then feed them to John the
Ripper like this, we find that John the Ripper can run through the entire
set of possible passwords and come up with the correct answer, as shown in
Listing 9-15.
root@kali: john xphashes.txt
Warning: detected hash type "lm", but the string is also recognized as "nt"
Use the "--format=nt" option to force loading these as that type instead
Loaded 10 password hashes with no different salts (LM DES [128/128 BS SSE2])
(SUPPORT_388945a0)
PASSWOR (secret:1)
(Guest)
PASSWOR (georgia:1)
PASSWOR (Administrator:1)
D (georgia:2)
D (Administrator:2)
D123 (secret:2)
Listing 9-15: Cracking LM hashes with John the Ripper
John the Ripper cracks the seven-character password hashes. In
Listing 9-15, we see that PASSWOR is the first half of the user secret’s pass-
word. Likewise, it’s the first half of the password for georgia and Administrator.
The second half of secret’s password is D123, and georgia and Administrator’s
are D. Thus, the complete plaintext of the LM-hashed passwords are
PASSWORD for georgia and Administrator and PASSWORD123 for secret. The
LM hash doesn’t tell us the correct case for a password, and if you try log-
ging in to the Windows XP machine as Administrator or georgia with the
password PASSWORD or the account secret with PASSWORD123, you will
get a login error because LM hash does not take into account the correct
case of the letters in the password.
To find out the correct case of the password, we need to look at the
fourth field of the NTLM hash. John the Ripper noted in the example in
Listing 9-15 that NTLM hashes were also present, and you can use the flag
--format=nt to force John the Ripper to use those hashes (we don’t have LM
hashes for Windows 7, so we will have to crack Windows 7 passwords with a
wordlist since brute forcing the NTLM hashes would likely take too long).
Cracking Windows NTLM hashes is nowhere near as easy as cracking
LM ones. Although a five-character NTLM password that uses only lower-
case letters and no other complexity could be brute-forced as quickly as
an LM hash, a 30-character NTLM password with lots of complexity could
210 Chapter 9
take many years to crack. Trying every possible character combination of
any length, hashing it, and comparing it to a value could go on forever until
we happened to stumble upon the correct value (only to find out that the
user has since changed his or her password).
Instead of attempting to brute-force passwords, we can use wordlists
containing known passwords, common passwords, dictionary words, combi-
nations of dictionary words padded with numbers and symbols at the end,
and so on. (We’ll see an example of using a wordlist with John the Ripper
in “Cracking Linux Passwords” on page 212).
a real-worlD examPle
Legacy password hashing once made all the difference on one of my pentests .
The domain controller was Windows Server 2008, with a strong security pos-
ture . The workstations throughout the enterprise were reasonably secure, too,
having recently been upgraded to fully patched Windows 7 systems . There
was, however, one promising light in the dark: a Windows 2000 box that was
missing several security patches . I was able to quickly gain system privileges on
the machine using Metasploit .
The trouble was that, while on paper, the penetration test was now a suc-
cess, compromising the machine had gained me next to nothing . The system
contained no sensitive files, and it was the only machine on this particular net-
work, isolated from the new, updated Windows domain . It had all the trappings
of a domain controller, except it had no clients . All of the other machines in
the environment were members of the new Windows 2008 domain controller’s
domain . Though technically I was now a domain administrator, I was no further
along on the pentest than I was before I found the Windows 2000 machine .
Since this was the domain controller, the domain user password hashes
were included locally . Windows 2000, like Windows XP, stored the LM hashes