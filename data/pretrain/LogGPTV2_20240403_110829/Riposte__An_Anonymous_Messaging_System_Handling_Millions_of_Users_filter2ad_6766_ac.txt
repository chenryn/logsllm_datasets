expected number of received messages (1) by m, expanding
using the binomial theorem, and ignoring low order terms
gives the expected success rate as:
E[SuccessRate] ≈ 1 − 1
2
(cid:6) m
(cid:6) m
(cid:7)2
(cid:7)3
1
3
+
n
n
n
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:07:16 UTC from IEEE Xplore.  Restrictions apply. 
So, if we want an expected success rate of 95% we need a table
with n ≈ 2.7m cells. This is a far smaller table than before,
when we could not handle collisions. In that case we needed
n ≈ 19.5m which results in much bigger tables, despite each
cell being half as big. Shrinking the table reduces the storage
and computational burden on the servers.
This two-way collision handling technique generalizes to
handle k-way collisions for k > 2. To handle k-way collisions,
we increase the size of each cell by a factor of k and have each
i ) ∈ Fk to its chosen cell. A k-
client i write (mi, m2
collision gives k equations in k variables that can be efﬁciently
solved to recover all k messages, as long as the characteristic
of F is greater than k. Using k > 2 further reduces the table
size as the desired success rate approaches one.
i , . . . , mk
The collision handling method described in this section
will also improve performance of our full system, which we
describe in the next section.
Adversarial collisions. The analysis above assumes that
clients behave honestly. Adversarial clients, however, need
not write into random rows of the database—i.e., all m balls
might not be thrown independently and uniformly at random.
A coalition of clients might, for example, try to increase the
probability of collisions by writing into the database using
some malicious strategy.
By symmetry of writes we can assume that all ˆm adversarial
clients write to the database before the honest clients do. Now
a message from an honest client is properly received at the end
of an epoch if it avoids all the cells ﬁlled by the malicious
clients. We can therefore carry out the honest client analysis
above assuming the database contain n − ˆm cells instead of
n cells. In other words, given a bound ˆm on the number of
malicious clients we can calculate the required table size n. In
practice, if too many collisions are detected at the end of an
epoch the servers can adaptively double the size of the table
so that the next epoch has fewer collisions.
C. Forward Security
Even the ﬁrst-attempt scheme sketched in Section III-A
provides forward security in the event that all of the servers’
secret keys are compromised [13]. To be precise: an adversary
could compromise the state and secret keys of all servers
after the servers have processed n write requests from honest
clients, but before the time epoch has ended. Even in this
case, the adversary will be unable to determine which of the
n clients submitted which of the n plaintext messages with a
non-negligible advantage over random guessing. (We assume
here that clients and servers communicate using encrypted
channels which themselves have forward secrecy [50].)
This forward security property means that clients need not
trust that S − t servers stay honest forever—just that they
are honest at the moment when the client submits its upload
request. Being able to weaken the trust assumption about the
servers in this way might be valuable in hostile environments,
in which an adversary could compromise a server at any time
without warning.
Mix-nets do not have this property, since servers must
accumulate a set of onion-encrypted messages before shufﬂing
and decrypting them [15]. If an adversary always controls the
ﬁrst mix server and if it can compromise the rest of the mix
servers after accumulating a set of ciphertexts, the adversary
can de-anonymize all of the system’s users. DC-net-based
systems that use “blame” protocols to retroactively discover
disruptors have a similar weakness [19], [77].
The full Riposte protocol maintains this forward security
property.
IV. IMPROVING BANDWIDTH EFFICIENCY WITH
DISTRIBUTED POINT FUNCTIONS
This section describes how application of private informa-
tion retrieval techniques can improve the bandwidth efﬁciency
of the ﬁrst-attempt protocol.
Notation. The symbol F denotes an arbitrary ﬁnite ﬁeld, ZL is
the ring of integers modulo L. We use e(cid:2) ∈ FL to represent a
vector that is zero everywhere except at index (cid:2) ∈ ZL, where
it has value “1.” Thus, for m ∈ F, the vector m · e(cid:2) ∈ FL is
the vector whose value is zero everywhere except at index (cid:2),
where it has value m. For a ﬁnite set S, the notation x ←R S
indicates that the value of x is sampled independently and
uniformly at random from S. The element v[i] is the value of
a vector v at index i. We index vectors starting at zero.
A. Deﬁnitions
The bandwidth inefﬁciency of the protocol sketched above
comes from the fact that the client must send an L-bit vector
to each server to ﬂip a single bit in the logical database. To
reduce this O(L) bandwidth overhead, we apply techniques
inspired by private information retrieval protocols [16], [17],
[37].
The problem of private information retrieval (PIR) is es-
sentially the converse of the problem we are interested in
here. In PIR, the client must read a bit from a replicated
database without revealing to the servers the index being read.
In our setting, the client must write a bit into a replicated
database without revealing to the servers the index being
written. Ostrovsky and Shoup ﬁrst made this connection in
the context of a “private information storage” protocol [67].
PIR schemes allow the client to split its query to the servers
into shares such that (1) a subset of the shares does not leak
information about the index of interest, and (2) the length of
the query shares is much less than the length of the database.
The core building block of many PIR schemes, which we adopt
for our purposes, is a distributed point function. Although
Gilboa and Ishai [37] deﬁned distributed point functions as a
primitive only recently, many prior PIR schemes make implicit
use the primitive [16], [17]. Our deﬁnition of a distributed
point function follows that of Gilboa and Ishai, except that we
generalize the deﬁnition to allow for more than two servers.
First, we deﬁne a (non-distributed) point function.
Deﬁnition 4 (Point Function). Fix a positive integer L and a
ﬁnite ﬁeld F. For all (cid:2) ∈ ZL and m ∈ F, the point function
326326
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:07:16 UTC from IEEE Xplore.  Restrictions apply. 
P(cid:2),m : ZL → F is the function such that P(cid:2),m((cid:2)) = m and
P(cid:2),m((cid:2)(cid:2)
) = 0 for all (cid:2) (cid:8)= (cid:2)(cid:2).
That is, the point function P(cid:2),m has the value 0 when
evaluated at any input not equal to (cid:2) and it has the value
m when evaluated at (cid:2). For example, if L = 5 and F = F2,
the point function P3,1 takes on the values (0, 0, 0, 1, 0) when
evaluated on the values (0, 1, 2, 3, 4) (note that we index
vectors from zero).
An (s, t)-distributed point function provides a way to dis-
tribute a point function P(cid:2),m amongst s servers such that no
coalition of at most t servers learns anything about (cid:2) or m
given their t shares of the function.
Deﬁnition 5 (Distributed Point Function (DPF)). Fix a positive
integer L and a ﬁnite ﬁeld F. An (s, t)-distributed point
function consists of a pair of possibly randomized algorithms
that implement the following functionalities:
• Gen((cid:2), m) → (k0, . . . , ks−1). Given an integer (cid:2) ∈ ZL
and value m ∈ F, output a list of s keys.
) → m(cid:2). Given a key k generated using Gen,
• Eval(k, (cid:2)(cid:2)
and an index (cid:2)(cid:2) ∈ ZL, return a value m(cid:2) ∈ F.
We deﬁne correctness and privacy for a distributed point
function as follows:
• Correctness. For a collection of s keys generated using
Gen((cid:2), m), the sum of the outputs of these keys (gen-
erated using Eval) must equal the point function P(cid:2),m.
More formally, for all (cid:2), (cid:2)(cid:2) ∈ ZL and m ∈ F:
Pr[(k0, . . . , ks−1) ← Gen((cid:2), m) :
s−1
i=0 Eval(ki, (cid:2)(cid:2)
Σ
) = P(cid:2),m((cid:2)(cid:2)
)] = 1
where the probability is taken over the randomness of the
Gen algorithm.
• Privacy. Let S be any subset of {0, . . . , s− 1} such that
|S| ≤ t. Then for any (cid:2) ∈ ZL and m ∈ F, let DS,(cid:2),m
denote the distribution of keys {(ki) | i ∈ S} induced by
(k0, . . . , ks−1) ← Gen((cid:2), m). We say that an (s, t)-DPF
maintains privacy if there exists a p.p.t. algorithm Sim
such that the following distributions are computationally
indistinguishable:
DS,(cid:2),m ≈c Sim(S)
That is, any subset of at most t keys leaks no information
about (cid:2) or m. (We can also strengthen this deﬁnition to
require statistical or perfect indistinguishability.)
Toy Construction. To make this deﬁnition concrete, we ﬁrst
construct a trivial information-theoretically secure (s, s − 1)-
distributed point function with length-L keys. As above, we
ﬁx a length L and a ﬁnite ﬁeld F.
• Gen((cid:2), m) → (k0, . . . , ks−1). Generate random vectors
k0, . . . , ks−2 ∈ FL. Set ks−1 = m · e(cid:2) − Σ
) → m(cid:2). Interpret k as a vector in FL. Return
• Eval(k, (cid:2)(cid:2)
the value of the vector k at index (cid:2)(cid:2).
s−2
i=0 ki.
The correctness property of this construction follows imme-
diately. Privacy is maintained because the distribution of any
collection of s − 1 keys is independent of (cid:2) and m.
This toy construction uses length-L keys to distribute a point
function with domain ZL. Later in this section we describe
DPF constructions which use much shorter keys.
B. Applying Distributed Point Functions for Bandwidth Efﬁ-
ciency
We can now use DPFs to improve the efﬁciency of the write-
private database scheme introduced in Section III-A. We show
that the existence of an (s, t)-DPF with keys of length |k|
(along with standard cryptographic assumptions) implies the
existence of write-private database scheme using s servers that
maintains anonymity in the presence of t malicious servers,
such that write requests have length s|k|. Any DPF construc-
tion with short keys thus immediately implies a bandwidth-
efﬁcient write-private database scheme.
The construction is a generalization of the one presented in
Section III-A. We now assume that there are s servers such
that no more than t of them collude. Each of the s servers
maintains a vector in FL as their database state, for some
ﬁxed ﬁnite ﬁeld F and integer L. Each “row” in the database
is now an element of F and the database has L rows.
When the client wants to write a message m ∈ F into
location (cid:2) ∈ ZL in the database, the client uses an (s, t)-
distributed point function to generate a set of s DPF keys:
(k0, . . . , ks−1) ← Gen((cid:2), m)
) for (cid:2)(cid:2)
) = Eval(ki, (cid:2)(cid:2)
The client then sends one of the keys to each of the servers.
Each server i can then expand the key into a vector v ∈ FL
= 0, . . . , L − 1.
by computing v((cid:2)(cid:2)
The server then adds this vector v into its database state,
using addition in FL. At
the end of the time epoch, all
servers combine their database states to reveal the set of client-
submitted messages.
Correctness. The correctness of this construction follows
directly from the correctness of the DPF. For each of the n
write requests submitted by the clients, denote the j-th key in
the i-th request as ki,j, denote the write location as (cid:2)i, and
the message being written as mi. When the servers combine
their databases at the end of the epoch, the contents of the
ﬁnal database at row (cid:2) will be:
n−1(cid:10)
s−1(cid:10)
d(cid:2) =
Eval(ki,j, (cid:2)) =
n−1(cid:10)
P(cid:2)i,mi ((cid:2)) ∈ F
i=0
j=0
i=0
In words: as desired, the combined database contains the sum
of n point functions—one for each of the write requests.
Anonymity. The anonymity of this construction follows di-
rectly from the privacy property of the DPF. Given the
plaintext database state d (as deﬁned above), any coalition of t
servers can simulate its view of the protocol. By deﬁnition of
DPF privacy, there exists a simulator Sim, which simulates the
distribution of any subset of t DPF keys generated using Gen.
The coalition of servers can use this simulator to simulate each
327327
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:07:16 UTC from IEEE Xplore.  Restrictions apply. 
of the n write requests it sees during a run of the protocol.
Thus, the servers can simulate their view of a protocol run
and cannot win the anonymity game with non-negligible
advantage.
Efﬁciency. A client in this scheme sends |k| bits to each server
(where k is a DPF key), so the bandwidth efﬁciency of the
scheme depends on the efﬁciency of the DPF. As we will show
later in this section, |k| can be much smaller than the length
of the database.
C. A Two-Server Scheme Tolerating One Malicious Server
√
Having established that DPFs with short keys lead to
bandwidth-efﬁcient write-private database schemes, we now
present one such DPF construction. This construction is a
simpliﬁcation of computational PIR scheme of Chor and
Gilboa [16].
When Eval(k, (cid:2)(cid:2)
This is a (2, 1)-DPF with keys of length O(
L) operating
on a domain of size L. This DPF yields a two-server write-
√
private database scheme tolerating one malicious server such
that writing into a database of size L requires sending O(
L)
bits to each server. Gilboa and Ishai [37] construct a (2, 1)-
DPF with even shorter keys (|k| = polylog(L)), but
the
construction presented here is efﬁcient enough for the database
sizes we use in practice. Although the DPF construction
works over any ﬁeld, we describe it here using the binary
ﬁeld F = F2k (the ﬁeld of k-bit bitstrings) to simplify the
exposition.
) is run on every integer (cid:2)(cid:2) ∈ {0, . . . , L −
1}, its output is a vector of L ﬁeld elements. The DPF key
construction conceptually works by representing this a vector
of L ﬁeld elements as an x × y matrix, such that xy ≥ L.
The trick that makes the construction work is that the size
of the keys needs only to grow with the size of the sides of
this matrix rather than its area. The DPF keys that Gen((cid:2), m)
outputs give an efﬁcient way to construct two matrices MA
and MB that differ only at one cell (cid:2) = ((cid:2)x, (cid:2)y) ∈ Zx × Zy
(Figure 2).
Fix a binary ﬁnite ﬁeld F = F2k, a DPF domain size L,
and integers x and y such that xy ≥ L. (Later in this section,
we describe how to choose x and y to minimize the key size.)
The construction requires a pseudo-random generator (PRG) G
that stretches seeds from some space S into length-y vectors of
elements of F [47]. So the signature of the PRG is G : S → Fy.
In practice, an implementation might use AES-128 in counter
mode as the pseudo-random generator [64].
The algorithms comprising the DPF are:
• Gen((cid:2), m) → (kA, kB). Compute integers (cid:2)x ∈ Zx and
(cid:2)y ∈ Zy such that (cid:2) = (cid:2)xy + (cid:2)y. Sample a random bit-
vector bA ←R {0, 1}x, a random vector of PRG seeds