dachui,80,
**导出为json格式:**
json格式:可以-f指定字段导出,也可以不用-f指定字段导出
\[root@client-50 \~\]# /usr/local/mongodb/bin/mongoexport \--host
192.168.4.50 \--port 27050 -d gamedb -c t1 \> /mdbdata/t1.json
2019-03-02T17:39:31.947+0800 connected to: 192.168.4.50:27050
2019-03-02T17:39:31.949+0800 exported 4 records
## 3.2 导入mongoimport:
把系统文件的内容导入到集合里
1.  导入数据时,若库和集合不存在,则现在创建库和集合后再导入数据;
2.  导入数据时.若库和集合已存在,则以追加的方式导入数据到集合里;
3.  使用\--drop选项可以删除原有数据后导入新数据,\--headerline
    选项忽略标题
命令格式:
mongoimport \[\--host ip地址 \--port 端口 \] -d 库名 -c 集合名
\--type=csv 目录名/文件名.csv
\> show tables
t1
t2
\> db.t1.drop()
true
\> show tables
t2
\> exit
bye
### 导入json文件
**导入时不能加:**\--headerline
\[root@client-50 \~\]# /usr/local/mongodb/bin/mongoimport \--host
192.168.4.50 \--port 27050 -d gamedb -c t1 \--type=json /mdbdata/t1.json
2019-03-02T18:00:48.432+0800 connected to: 192.168.4.50:27050
2019-03-02T18:00:48.583+0800 imported 4 documents
\> show tables
t1
t2
\> db.t1.drop()
true
\> show tables
t2
### 导入csv文件
**导入时一定要加:**\--headerline
\[root@client-50 \~\]# /usr/local/mongodb/bin/mongoimport \--host
192.168.4.50 \--port 27050 -d gamedb -c t1 \--headerline \--type=csv
/mdbdata/t1.csv
2019-03-02T17:57:37.630+0800 connected to: 192.168.4.50:27050
2019-03-02T17:57:37.765+0800 imported 4 documents #成功4条
> #\--headerline 用文件的第一行做字段名
\[root@client-50 \~\]# /usr/local/mongodb/bin/mongo \--host 192.168.4.50
\--port 27050
\> use gamedb
switched to db gamedb
\> show tables;
t1
t2
\> db.t1.find()
{ \"\_id\" : ObjectId(\"5c7a539150d5efd7024e27e9\"), \"name\" : \"bob\",
\"age\" : 19, \"school\" : \"\" }
{ \"\_id\" : ObjectId(\"5c7a539150d5efd7024e27ea\"), \"name\" : \"tom\",
\"age\" : 19, \"school\" : \"tarnea\" }
{ \"\_id\" : ObjectId(\"5c7a539150d5efd7024e27eb\"), \"name\" : \"jim\",
\"age\" : 90, \"school\" : \"\" }
{ \"\_id\" : ObjectId(\"5c7a539150d5efd7024e27ec\"), \"name\" :
\"dachui\", \"age\" : 80, \"school\" : \"\" }
### 导入数据时加\--drop
### 练习:
把/etc/passwd文件的内容存储到mongodb服务器的userdb库下的user集合里
1 把/etc/passwd文件的内容修改为csv格式
用sed工具,将所有的 : 号,换成 , 号,
用sed
# 4 基本数据类型
## 字符string
字符串string
utf-8字符串都可以表示为字符串类型的数据
例如:{name:"张三"}
布尔bool
只有两种值:true和false
例如:{x:true} {y:false}
空null
用于表示空值或者不存在的字段
例如:{x:null}
## 数值/数组array
数值
shell默认使用64位浮点型数值.
{x:3.14} 或者 {x:3}
numberint(4字节整数,32位整型)4个8位,每个8位255,存范围255\^4
例如:{x:NumberInt(3)} {x:NumberInt(3.333)} #能插入浮点型数值
numberlong(8字节整数)64为长整型)8个8位,每个8位255,存范围255\^8
例如:{x:NumberLong(3)} #不能插入浮点型数值
数组array
数据列表或数据集可以表示数组
例如:{x:\["a","b","c"\]}
## 代码/日期/对象
**代码**
查询和文档中可以包括任何JavaScript代码
例如:{x:function(){/\* 代码 \*/}}
db.t2.save({lname:\"php\",daima:function(){/\* 代码 \*/}})
\> db.t2.save({lname:\"php\",daima:function(){/\*\ \*/}})
WriteResult({ \"nInserted\" : 1 })
\> db.t2.find({name:\"php\"})
\> db.t2.find({lname:\"php\"})
{ \"\_id\" : ObjectId(\"5c7c932c9d042aa67a8a254c\"), \"lname\" :
\"php\", \"daima\" : { \"code\" : \"function (){/\*\ \*/}\" } }
**日期**
日期被存储为自新纪元(1970年1月1日)以来经过的毫秒数,不含时区
例如:{x:new Date()}
\> db.t2.save({name:\"tom\",birthday:new Date()})
WriteResult({ \"nInserted\" : 1 })
\> db.t2.find({name:\"tom\"})
{ \"\_id\" : ObjectId(\"5c7c8eae9d042aa67a8a2549\"), \"name\" : \"tom\",
\"birthday\" : ISODate(\"2019-03-04T02:34:22.477Z\") }
**对象**
对象id是一个12字节的字符串,是文档的唯一标识
例如:{x:ObjectId()}
\> db.t2.save(
\... {
\... name:\"alice\",
\... x:ObjectId()
\... }
\... )
WriteResult({ \"nInserted\" : 1 })
\> db.t2.find({name:\"alice\"})
{ \"\_id\" : ObjectId(\"5c7c90159d042aa67a8a254b\"), \"name\" :
\"alice\", \"x\" : ObjectId(\"5c7c90159d042aa67a8a254a\") }
## 内嵌/正则表达式
**内嵌**
文档可以嵌套其他文档,被嵌套的文档作为值来处理
例如:{tarena:{address:"Beijing",tel:"888888",person:"hansy"}}
\> db.t2.save({
\...
tarena:{address:\"beijing\",tel:\"888888\",worker:\"ksy\",url:\"www.tedu.cn\"}
\... })
WriteResult({ \"nInserted\" : 1 })
\> db.t2.find({tel:\"888888\"})
\>
**正则表达式**
查询时,使用正则表达式作为限定条件
例如:{x:/正则表达式/}
\> db.t2.save({gn:\"匹配空行\",bds:/\^\$/})
WriteResult({ \"nInserted\" : 1 })
\> db.t2.find({gn:\"匹配空行\"})
{ \"\_id\" : ObjectId(\"5c7c943e9d042aa67a8a254e\"), \"gn\" :
\"匹配空行\", \"bds\" : /\^\$/ }
# 5 数据备份恢复
\[root@client-50 \~\]# ls /usr/local/mongodb/bin/
bsondump(查看) mongod mongofiles mongoreplay mongostat
install_compass mongodump(备份) mongoimport mongorestore(恢复) mongotop
mongo mongoexport mongoperf mongos
## 4.1数据备份mongodump
备份数据所有库到当前目录下的dump目录下
mongodump \[\--host IP地址 \--port 端口\]
#如果配置文件未指定ip和端口可省略
备份时指定备份的库和备份目录
mongodump \[\--host IP地址 \--port 端口 \] -d 数据库名 -c 集合名 -o
存储目录
\## -d 数据库名(不写全部备份) -c 集合名(不写备份全部集合) -o 存储目录
查看bson文件内容
bsondump ./dump/bbs/t1.bson
## 4.2数据恢复
mongorestore \--host IP地址 \--port 端口 -d 数据库名 -c 集合名
备份目录名
mongorestore \--host IP地址 \--port 端口 -d 数据库名 -c 集合名
\--drop备份目录名
##\--drop 删除原有相同名的库和相同名的集合后再在51上恢复
例如:50上备份userdb库,user文档
\[root@client-50 \~\]# /usr/local/mongodb/bin/mongodump \--host
192.168.4.50 \--port 27050 -d userdb -c user -o /userdbzdd
\[root@client-50 \~\]# ls /userdbzdd
userdb
\[root@client-50 \~\]# ls /userdbzdd/userdb/
user.bson user.metadata.json
\[root@client-50 \~\]#/usr/local/mongodb/bin/bsondump
/userdbzdd/userdb/user.bson
\[root@sql51 \~\]# /usr/local/mongodb/bin/mongorestore \--host
192.168.4.51 \--port 27051 -d userdb -c user
/root/userdbzdd/userdb/user.bson
测试 \--drop
\[root@sql51 \~\]# /usr/local/mongodb/bin/mongorestore \--host
192.168.4.51 \--port 27051 -d userdb -c user
/root/userdbzdd/userdb/user.bson
2019-03-04T14:10:34.796+0800 checking for collection data in
/root/userdbzdd/userdb/user.bson
2019-03-04T14:10:34.799+0800 reading metadata for userdb.user from
/root/userdbzdd/userdb/user.metadata.json
2019-03-04T14:10:34.799+0800 restoring userdb.user from
/root/userdbzdd/userdb/user.bson
2019-03-04T14:10:34.813+0800 error: multiple errors in bulk operation:
\- E11000 duplicate key error collection: userdb.user index: \_id\_ dup
key: { : ObjectId(\'5c7c80bd3345a27478ee24a9\') }
\- E11000 duplicate key error collection: userdb.user index: \_id\_ dup
key: { : ObjectId(\'5c7c80bd3345a27478ee24aa\') }
\[root@sql51 \~\]# /usr/local/mongodb/bin/mongorestore \--host
192.168.4.51 \--port 27051 -d userdb -c user \--drop
/root/userdbzdd/userdb/user.bson
2019-03-04T14:11:10.137+0800 checking for collection data in
/root/userdbzdd/userdb/user.bson
2019-03-04T14:11:10.170+0800 reading metadata for userdb.user from
/root/userdbzdd/userdb/user.metadata.json
2019-03-04T14:11:10.319+0800 restoring userdb.user from
/root/userdbzdd/userdb/user.bson
2019-03-04T14:11:10.383+0800 no indexes to restore
2019-03-04T14:11:10.383+0800 finished restoring userdb.user (42
documents)
2019-03-04T14:11:10.383+0800 done
# NOSQL05\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
# 一MongoDB副本集
-   也称为MongoDB复制
-   指在多个服务器上存储数据副本,并实现数据同步
-   提高数据可用性,安全性,方便数据故障恢复
## MongoDB复制原理
-   也就是副本集工作过程
-   至少需要两个节点,其中一个为主节点,负责处理客户端请求,其余是从节点,负责复制主节点数据
-   常见搭配:一主一从,一主多从
-   主节点记录所有操作oplog,从节点定期轮询主节点获取这些操作,然后对自己的数据副本执行这些操作,从而保证从节点的数据与主节点一致
主从复制的优点
-   从节点可以提供数据查询,降低主节点的访问压力
-   由从节点执行备份,避免锁定主节点数据.
-   当主节点故障时,可快速切换到从节点,实现高可用
## 副本集实现方式
master-slave主从复制
启动一台服务器时加上"-master"参数,作为主节点
启动其他服务器时加上"-slave"和"-source"参数,作为从节点
## 副本集相关命令
查看状态信息
\>rs.status()
查看是否是master库
\>rs.isMaster()
初始化replica sets环境
\>rs.initiate(config)
同步数据验证,允许从库查看数据
# 二 配置replica sets(副本集)
建立集群后,从库是不允许做数据操作
## 1准备环境3台mongodb服务器
192.168.4.51
192.168.4.52
192.168.4.53
## 2启用副本集配置
### 1停止所有服务
**#启动和停止服务都定义了别名:**
\~\]# alias mdbstart=\'/usr/local/mongodb/bin/mongod -f
/usr/local/mongodb/etc/mongodb.conf\'
设置临时停止别名
\~\]#alias mdbstop=\'/usr/local/mongodb/bin/mongod -f
/usr/local/mongodb/etc/mongodb.conf \--shutdown\'
\[root@sql51 \~\]# mdbstop
\[root@sql52 \~\]# mdbstop
\[root@sql53 \~\]# mdbstop
### 2所有服务器同步修改配置文件
分别在3台服务器上的配置文件上添加 replSet=rs1
\[root@sql51 \~\]# vim /usr/local/mongodb/etc/mongodb.conf
replSet=rs1
\[root@sql51 \~\]# mdbstart
\[root@sql51 \~\]# /usr/local/mongodb/bin/mongo \--host 192.168.4.51
\--port 27051
配置之前:
\> rs.status()
{
\"ok\" : 0,
\"errmsg\" : \"not running with \--replSet\",
\"code\" : 76,
\"codeName\" : \"NoReplicationEnabled\"
}
配置之后
\> rs.status()
{
\"info\" : \"run rs.initiate(\...) if not yet done for the set\",
\"ok\" : 0,
\"errmsg\" : \"no replset config has been received\",
\"code\" : 94,
\"codeName\" : \"NotYetInitialized\",
\"\$clusterTime\" : {
\"clusterTime\" : Timestamp(0, 0),
\"signature\" : {
\"hash\" : BinData(0,\"AAAAAAAAAAAAAAAAAAAAAAAAAAA=\"),
\"keyId\" : NumberLong(0)
}
}
}
\[root@sql52 \~\]# vim /usr/local/mongodb/etc/mongodb.conf
replSet=rs1
\[root@sql52 \~\]# mdbstart
\[root@sql53 \~\]# vim /usr/local/mongodb/etc/mongodb.conf
replSet=rs1
\[root@sql53 \~\]# mdbstart
## 3定义集群成员(配置节点信息)
进入51(主库)
\> config= { \_id:\"rs1\",members:\[ #定义config变量
\... {\_id:0,host:\"192.168.4.51:27051\"},
\... {\_id:1,host:\"192.168.4.52:27052\"},
\... {\_id:2,host:\"192.168.4.53:27053\"}
\... \]}
#回车出现如下内容
{
\"\_id\" : \"rs1\",
\"members\" : \[
{
\"\_id\" : 0,
\"host\" : \"192.168.4.51:27051\"