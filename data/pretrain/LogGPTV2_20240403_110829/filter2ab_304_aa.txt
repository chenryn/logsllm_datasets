# B1g_Mac
Reverse Engineering, 500 points
## Description:
> Here's a zip file.
## Solution:
Let's extract the file:
```console
E:\CTFs\pico\B1g_Mac>"c:\Program Files\7-Zip\7z.exe" x b1g_mac.zip
7-Zip 19.00 (x64) : Copyright (c) 1999-2018 Igor Pavlov : 2019-02-21
Scanning the drive for archives:
1 file, 295964 bytes (290 KiB)
Extracting archive: b1g_mac.zip
--
Path = b1g_mac.zip
Type = zip
Physical Size = 295964
Everything is Ok
Folders: 1
Files: 19
Size:       2408051
Compressed: 295964
```
We get the following contents:
```console
E:\CTFs\pico\B1g_Mac>dir /s
 Volume in drive E is CTF
 Volume Serial Number is 3C2B-8C21
 Directory of E:\CTFs\pico\B1g_Mac
10/25/2019  11:04 PM              .
10/25/2019  11:04 PM              ..
10/25/2019  02:02 PM           295,964 b1g_mac.zip
04/06/2019  08:24 PM           110,279 main.exe
04/06/2019  02:11 AM              test
               2 File(s)        406,243 bytes
 Directory of E:\CTFs\pico\B1g_Mac\test
04/06/2019  02:11 AM              .
04/06/2019  02:11 AM              ..
03/26/2019  02:20 AM           127,654 Item01 - Copy.bmp
03/26/2019  02:20 AM           127,654 Item01.bmp
03/26/2019  02:20 AM           127,654 Item02 - Copy.bmp
03/26/2019  02:20 AM           127,654 Item02.bmp
03/26/2019  02:20 AM           127,654 Item03 - Copy.bmp
03/26/2019  02:20 AM           127,654 Item03.bmp
03/26/2019  02:21 AM           127,654 Item04 - Copy.bmp
03/26/2019  02:21 AM           127,654 Item04.bmp
03/26/2019  02:21 AM           127,654 Item05 - Copy.bmp
03/26/2019  02:21 AM           127,654 Item05.bmp
03/26/2019  02:24 AM           127,654 Item06 - Copy.bmp
03/26/2019  02:24 AM           127,654 Item06.bmp
03/26/2019  02:24 AM           127,654 Item07 - Copy.bmp
03/26/2019  02:24 AM           127,654 Item07.bmp
03/26/2019  02:25 AM           127,654 Item08 - Copy.bmp
03/26/2019  02:25 AM           127,654 Item08.bmp
03/26/2019  03:15 AM           127,654 ItemTest - Copy.bmp
03/26/2019  03:15 AM           127,654 ItemTest.bmp
              18 File(s)      2,297,772 bytes
     Total Files Listed:
              20 File(s)      2,704,015 bytes
               5 Dir(s)  17,938,530,304 bytes free
```
We have an executable and a folder named `test`, with 18 images.
Let's run the executable:
```console
E:\CTFs\pico\B1g_Mac>main.exe
No flag found, please make sure this is run on the server
```
That's a strange error message, since this is a Windows executable and the server runs on Linux. However, we've seen this message in the past when the program required a `flag.txt` file in its directory, so lets create one and try again:
```console
E:\CTFs\pico\B1g_Mac>echo picoCTF{fake_flag}>flag.txt
E:\CTFs\pico\B1g_Mac>main.exe
Work is done!
Wait for 5 seconds to exit.
```
Ok, something happened. Since no new file appeared, let's re-extract the `test` directory from the zip file and compare it to the contents of the current `test` directory in order to see if any of the files have changed.
```console
E:\CTFs\pico\B1g_Mac>move test test_dirty
        1 dir(s) moved.
E:\CTFs\pico\B1g_Mac>"c:\Program Files\7-Zip\7z.exe" e -y b1g_mac.zip -otest test
7-Zip 19.00 (x64) : Copyright (c) 1999-2018 Igor Pavlov : 2019-02-21
Scanning the drive for archives:
1 file, 295964 bytes (290 KiB)
Extracting archive: b1g_mac.zip
--
Path = b1g_mac.zip
Type = zip
Physical Size = 295964
Everything is Ok
Folders: 1
Files: 18
Size:       2297772
Compressed: 295964
```
Comparing the two folders using `WinMerge`, we can see that the files are binary same:
```
Compare E:\CTFs\pico\B1g_Mac\test with E:\CTFs\pico\B1g_Mac\test_dirty
10/25/2019 11:44:44 PM
Filename			      Comparison result						              Left Date							        Right Date						      Extension
test				        Left only: E:\CTFs\pico\B1g_Mac\test	  * 4/6/2019 2:11:26 AM				  									
Item01 - Copy.bmp	  Binary files are identical				        3/26/2019 2:20:08 AM				  3/26/2019 2:20:08 AM				bmp
Item01.bmp			    Binary files are identical				        3/26/2019 2:20:08 AM				  3/26/2019 2:20:08 AM				bmp
Item02 - Copy.bmp	  Binary files are identical				        3/26/2019 2:20:34 AM				  3/26/2019 2:20:34 AM				bmp
Item02.bmp			    Binary files are identical				        3/26/2019 2:20:34 AM				  3/26/2019 2:20:34 AM				bmp
Item03 - Copy.bmp	  Binary files are identical				        3/26/2019 2:20:50 AM				  3/26/2019 2:20:50 AM				bmp
Item03.bmp			    Binary files are identical				        3/26/2019 2:20:51 AM				  3/26/2019 2:20:51 AM				bmp
Item04 - Copy.bmp	  Binary files are identical				        3/26/2019 2:21:13 AM				  3/26/2019 2:21:13 AM				bmp
Item04.bmp			    Binary files are identical				        3/26/2019 2:21:13 AM				  3/26/2019 2:21:13 AM				bmp
Item05 - Copy.bmp	  Binary files are identical				        3/26/2019 2:21:28 AM				* 3/26/2019 2:21:28 AM				bmp
Item05.bmp			    Binary files are identical				        3/26/2019 2:21:29 AM				  3/26/2019 2:21:29 AM				bmp
Item06 - Copy.bmp	  Binary files are identical				        3/26/2019 2:24:17 AM				* 3/26/2019 2:24:17 AM				bmp
Item06.bmp			    Binary files are identical				        3/26/2019 2:24:18 AM				  3/26/2019 2:24:18 AM				bmp
Item07 - Copy.bmp	  Binary files are identical				      * 3/26/2019 2:24:47 AM				  3/26/2019 2:24:47 AM				bmp
Item07.bmp			    Binary files are identical				        3/26/2019 2:24:47 AM				  3/26/2019 2:24:47 AM				bmp
Item08 - Copy.bmp	  Binary files are identical				        3/26/2019 2:25:55 AM				* 3/26/2019 2:25:55 AM				bmp
Item08.bmp			    Binary files are identical				        3/26/2019 2:25:55 AM				  3/26/2019 2:25:55 AM				bmp
ItemTest - Copy.bmp	Binary files are identical				        3/26/2019 3:15:31 AM				* 3/26/2019 3:15:32 AM				bmp
ItemTest.bmp		    Binary files are identical				        3/26/2019 3:15:32 AM				  3/26/2019 3:15:32 AM				bmp
```
Let's dive into Ghidra's decompiled output:
```c
int __cdecl _main(int _Argc,char **_Argv,char **_Env)
{
  FILE *_File;
  size_t sVar1;
  undefined4 local_60;
  undefined local_5a [50];
  char local_28 [12];
  ___main();
  _isOver = 0;
                    /* _folderName = "./test" */
  local_28._0_4_ = 1702113070;
  local_28._4_4_ = 29811;
  local_28._8_4_ = 0;
  _folderName = local_28;
  _pLevel = 0;
  _File = open("flag.txt","r");
  if (_File == (FILE *)0x0) {
    puts("No flag found, please make sure this is run on the server");
  }
  sVar1 = fread(local_5a,1,18,_File);
  if ((int)sVar1 < 1) {
                    /* WARNING: Subroutine does not return */
    exit(0);
  }
  _flag = local_5a;
  _flag_size = 18;
  local_60 = 0;
  _flag_index = &local_60;
  puts("Work is done!");
  _listdir(0,_folderName);
  puts("Wait for 5 seconds to exit.");
  _sleep(5);
  return 2;
}
```
We can see that the program opens the flag file, reads 18 characters, initializes some globals (`_folderName`, `_flag`, `_flag_size`, `_flag_index`) and then calls `_listdir`. What does `_listdir` do?
```c
void __cdecl _listdir(int param_1,undefined4 folder_name)
{
  int iVar1;
  BOOL BVar2;
  char local_958 [2048];
  _WIN32_FIND_DATAA local_158;
  HANDLE local_18;
  bool local_11;
  int local_10;
  local_18 = (HANDLE)0x0;
  sprintf(local_958,"%s\\*.*",folder_name);
  local_18 = FindFirstFileA(local_958,(LPWIN32_FIND_DATAA)&local_158);
  if (local_18 == (HANDLE)0xffffffff) {
    printf("Path not found: [%s]\n",folder_name);
  }
  else {
    local_10 = 1;
    local_11 = true;
    while (local_11 != false) {
      iVar1 = strcmp(local_158.cFileName,".");
      if ((iVar1 != 0) && (iVar1 = strcmp(local_158.cFileName,".."), iVar1 != 0)) {
        sprintf(local_958,"%s\\%s",folder_name,local_158.cFileName);
        if ((local_158.dwFileAttributes & 0x10) == 0) {
          if (local_10 == 1) {
            if (param_1 == 0) {
              _hideInFile(local_958);
            }
            else {
              if (param_1 == 1) {
                _decodeBytes(local_958);
              }
            }
          }
          local_10 = 1 - local_10;
        }
        else {
          printf("Folder: %s\n",local_958);
          _listdir(param_1,local_958);
        }