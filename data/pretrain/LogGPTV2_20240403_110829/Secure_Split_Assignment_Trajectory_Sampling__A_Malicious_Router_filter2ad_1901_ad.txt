We  assume that a malicious router, r,, 
randomly selects 
pattack percentage  of  hash  values  out  of  Ntotal values  of 
Then,  the  number of  hash  values  selected by 
? ~ ~ ~ l e ~ ~ ~ ~ n (
the malicious router r,  is Nattacx: = pattack x  Ntotal. Let 
Hattack(m) denote a set of the Nattack hash values chosen by 
r,  targets the packets whose hashes fall in x a t t a c k ( m ) .  
r,. 
Thus,  on  average,  rm  attacks pattack percentage  of  all  the 
packets. 
)
We  define complete avoidance to be  the event  where  all 
the hash values in Hattack are not assigned to any router in 
a given path.  In the case of  complete avoidance, the packets 
being  attacked are not  sampled at any  router and the attack 
cannot be detected. We  vary pattack: from 1 % to 100% in 10% 
increments and derive the probability of complete avoidance, 
pavoid. With higher pattack, the malicious router attacks more 
packets, but the attack is less likely to go undetected leading 
to lower pavoid. 
Figure 10 shows the derivation of the probability of com- 
plete avoidance.  We  illustrate the derivation through the ex- 
ample  in  Figure 2.(b).  In  this  example,  we  assign  6 hash 
values to a router as the  sampling range out  of  31 different 
hash  values.Thus,  Nsmail = 6,  and  Ntotal = 31.  The 4-th 
router,  r4, is a malicious router on a 7-hop path.  r4  selects 
hash values in the sampling range assigned to ri 
hi: the i-th hash value among Ntot,l  hash values of hseaction() 
N(i): a set of N,,,lz 
'Hencl0,,(m) = {hi : hi E 'H(1): hi  E ' H ( T ) ,  1 5 1 < m < r  5 T): 
a set of hash values assigned to any pair of routers that enclose a malicious 
router, T,, 
Nenclose(m): the number of hash values in 'Henclo,,(m) u Xcm) 
'Hattuck (m): a set of hash values chosen by the malicious router T ,  
Nattack  = pattack  X  N t o t a l :  The number of hash values in 'Huttuck (m) 
=  ~ , , , ~ ~ ( m )  =  P('Hnttack(m) n 
P(comp1ete  avoidance  of  T,) 
~,,clo,e(m)  = 4) = CNtota~-"encto=c(m) 
on a T-hop path 
Ntotat-Nsmatt 
n h t t a c a  
/ C ~ a * t a c k  
Figure 10. The calculation of the probability of com- 
plete avoidance, pa,,id. 
pattack = 20% of the NtOtal hash values (31 x  0.2 = 6 hash 
values) out of  Ntotal - Ns,all  = 31 - 6  = 25  hash  val- 
ues  in  {h  : 1  5  h  5  31)  - {25,15,28,14,12,8).  r4 
does  not  choose  the  6 hash  values from  its  own  sampling 
range,  {25,15: 28: 14: 12, 8 ) ,  since these values can also be 
assigned to other routers.  The number of  possible choices is 
thus c:'-~. rq attacks packets whose hashes fall in the 6 cho- 
sen hash values, Xattack. If  any one of the 6 hash values in 
Eattack is in H,nc~ose = (30; 5: 9: 27; 4; 11; 7: 17: 20). the at- 
tack will be detected - the attack on  the hash value 30, 5, 9, 
27, 4, 11, 7 ,  17, or 20 will be detected by  (7-1: 7-51, { r l :  v 6 ) ,  
(7-1: 7-71, (7-2: 7-51, (7-2: 7-6), (7-2:7-71, (7-3: 7-51,  (7-3: 7-61, or 
{r3: r 7 ) ,  respectively.  The probability of complete avoidance 
of  7-4, which is the probability that all of  the 6 chosen hash 
values in ?-tattack are not in  ~fe,clOse, is 
% 
0.045, 
We assign sampling ranges using three different methods, 
Split Range Assignment (Figure 3), random assignment and 
Single Range Assignment. In the random assignment, we as- 
- 1 hash values to a router. The hash 
sign Nsmall = N,,,,,, 
values are randomly chosen out of  Ntotal = Nsmall/psamp 
hash values of hseledion(). For each node in a topology, we 
compute  the probability of  complete avoidance considering 
all the shortest paths where the node is present.  We run  100 
simulations with the sampling ratio pSamp = 111000. 
In Figure 11, we only show the results from the topology of 
CENIC as the results from other topologies are very  similar. 
The left graph  shows results for both Single Range Assign- 
ment and Split Range Assignment, and the right one shows re- 
sults for random assignment. The median, 10th-percentile and 
90th-percentile values of the ratio are shown. In Single Range 
Assignment, unless a malicious router attacks all the packets, 
the  malicious router can avoid detection  with  100% proba- 
bility.  Random assignment can reduce pa.uoi~ but not signif- 
icantly.  In Split Range Assignment, pavoid becomes negligi- 
ble as pattack approaches  10%. Thus, attacks on more than 
10% of packets can hardly circumvent SATS. An attack with 
pattack less than  1% has almost 50% chance of  being unde- 
tected.  However, the resulting attack is limited.  The attacker 
has to significantly limit its ability to attack only a small por- 
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:29:59 UTC from IEEE Xplore.  Restrictions apply. 
P- 
:PerceWe of Hash Values Under Anack 
P& 
:Perm- 
01 Hash Values UnMH A m  
(a) 
(b) 
Figure 11. Probability of Complete Avoidance. 
(a) 
CD) 
Figure 12. Suspicious region ratio. 
tion of  packets.  In  addition, we can further reduce pavoid by 
periodically re-launching new sampling ranges. Let us assume 
that  the  range  assignment in  each  new  launch of  sampling 
ranges is independent of  other launches.  A malicious router 
also changes its  target hash  values,  Rattack, independently 
in each new launch.  Then, the probability that the malicious 
router avoids detection in n consecutive launches of sampling 
ranges  is pavoidn.  After  5 such re-launches  (n  =  5), the 
probability of complete avoidance decreases to ( 5 0 % ) ~  = 3% 
when pattack=l %. 
6.2. Incremental Deployment 
In this section, we discuss the size of  a suspicious region 
detected by SATS. We  aim to answer the following questions: 
What is the size of a suspicious region relative to the diameter 
of a network? does SATS work in different topologies? What 
is the incremental deployment property of  SATS? Is it neces- 
sary to have complete deployment before seeing most of the 
benefits? Is a sophisticated deployment scheme needed to put 
SATS on strategic routers? 
We evaluate two deployment methods: random and degree- 
based.  The  degree-based method  chooses  routers  with  the 
highest number of neighbors first during deployment. It gives 
priority  to  securing the  more critical routers.  We  also vary 
the fraction of routers using SATS, from 0.1 to  1 ,  in  0.1 in- 
crements. 80 different combinations of parameters are based 
on  10 deployment ratios  x  2 deployment methods  x  4 real 
topologies.  100 simulation runs are made in each combina- 
tion. 
Figure 12 shows the evaluation results only from the topol- 
ogy of ATT as the results from other topologies are very sim- 
ilar. The right graph show results for random deployment and 
the left one degree-based.  The median,  10th-percentile and 
90th-percentile values of the ratio are shown. The y-axis plots 
the suspicious region ratio, computed as the number of  nodes 
in  the pinpointed suspicious region divided by  the total num- 
ber of  nodes on the shortest path.  A  node without  SATS is 
considered to be suspicious. The median, 10th-percentile and 
90th-percentile values are shown. The x-axis plots the deploy- 
ment ratio. 
All graphs show "knees"  in  the performance curves:  af- 
ter reaching a certain deployment ratio,  from 0.1 to 0.4 de- 
pending on the topology and deployment method, the curves 
flatten out.  In other words, we start seeing most of  the ben- 
efits of  SATS before complete deployment on all routers in 
a network.  These "knees"  happen because of  the hierarchi- 
cal nature of networks. There are a handful of well-connected 
routers that are on most of the shortest paths between pairs of 
edge routers.  Once these routers deploy SATS, the size of a 
suspicious region can be reduced dramatically. 
We see that variability is much lower for the degree-based 
deployment.  In  particular, the 90th-percentile values  of  the 
suspicious region ratio are much lower for all the topologies. 
The results also show that  a practical  yet  extremely simple 
method  of  deploying SATS on  routers  with  the  largest de- 
grees first can yield significant improvements over a random 
method. A sophisticated deployment method may not be nec- 
essary.  It  is more  important to  secure first the routers with 
higher degrees of connectivity. We focus on the results of the 
degree-based deployment below. 
When the deployment ratio is zero,  the suspicious region 
ratio is 1 since all of the nodes on the shortest path is consid- 
ered as suspicious.  With half  of  the nodes in a topology de- 
ploying SATS, the median values of the suspicious region ra- 
tio range from 0.3 to 0.4, depending on the topology. In other 
words, we can pinpoint 3 to 4 routers as suspicious routers on 
a  10-hop path in  the presence of  malicious routers with the 
deployment ratio of 0.5. 
7. Implementation Costs 
In this section, we discuss the implementation costs asso- 
ciated  with  SATS in  a  fictional network.  This  network has 
100 routers (NrOut,,)  and 300 links. The link rate is 10 Gbps 
and  all links  are  95%  utilized.  All  packets  are 500B  long. 
The sampling rate p,,,, 
the number of 
sampled packets per  second on a link,  is  lOGbps  x  95%  x 
is  1/1000.  N,,,,, 
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:29:59 UTC from IEEE Xplore.  Restrictions apply. 
0.001/(500  x 8 )  = 2375. Let us assume samples are not sent 
to the backend engine until they fill up a 1500B packet.  Less 
than  1500B are stored on each router  until  they  are flushed 
to the backend engine.  The computational cost on a router is 
dominated by hseleCtion(), which is computed for each packet. 
Modular arithmetic of  hseteCtion() can be implemented using 
simple integer arithmetic in  hardware or  software.  Current 
technology can compute such a function for each packet that 
arrives at 20 Gbps or even higher [2]. 
deploy SATS depending on the topology.  Although SATS is 
initially designed for a single administrative domain, we be- 
lieve it can be extended to multiple non-cooperative domains 
by sharing common hash values in border routers, without re- 
vealing internal traffic measurement to an external network. 
We leave this as future work. 
References 
To  evaluate the  quantity of  data  sent to  the backend en- 
gine, we first derive the size of  a report packet.  For a sam- 
pled packet, we report raw header information of  the packet 
such as the source, the destination IP addresses and the TTL 
field. We also add a 26-bit label of the packet [2] and the hash 
value where the packet is sampled.  Since the  total number 
is about lo5 as shown in Sec- 
of  hash values of  hsele,ti,,() 
tion  4,  we need  pog2(lo5)1  = 17 bits  to represent  a hash 
= (20  (IP 
value.  Thus,  the  size of  a  report packet l,,,,t 
header)+4 + 4 + 1) x 8 + 26 + 17 = 275 bits. Finally, each 
link sends Nsamp x  lrepoTt = 653Kbps to the backend en- 
gine.  With 300 such links, the total report traffic consumes 
less than  2% of  the link rate.  Note that if multiple samples 
are reported in a single IP packet, we can further reduce the 
communication overhead. 
In the backend engine, we maintain T - 1 counters for each 
router that is traversed by each flow, where T is the length of 
the path.  With  1.7 million flows [4]  and network diameter 
of  20, we need up to  1.7 x  20(20 - 1) x pSamp = 0.6 mil- 
lion counters, which corresponds to several MB of memory. 
For each sampled packet p, the backend engine reads counter 
values of  p's  flow  from memory.  The memory  of  a flow  is 
indexed by  using a hash function hindex(x) = x  mod  2*O. 
hindex() has  a  64-bit input  (source and destination IP pair) 
and a 20-bit output to accommodate a million flows.  One of 
the counters is incremented and the value is compared with 
another counter value in the same flow. The new counter val- 
ues are then stored back in memory. Load and store operations 
in DRAM take around 60 nanoseconds each and it takes up to 
100 cycles to compule htnd,, ().  Thus,  such operations can 
be processed by  a current  lGHz processor in  less  than  300 
nanoseconds, which is far less than the time we have for each 
sample, l / ( N s a m ,  x N,,,,,,) 
-- 4.2 microseconds. 
8. Conclusions 
We  presented SATS, a  data plane  method  to  detect  ma- 
licious routers.  SATS uses  Split Range Assignment, which 
varies sampling ranges on each router,  Lo  maintain integrity 
of the packet sampling process. Using simulation, we showed 
that the probability that a malicious router can avoid detection 
is less than  5% and  even lower  when new  sampling ranges 
are periodically reloaded onto the routers.  SATS can be de- 
ployed incrementally as most of the benefits of  SATS can be 
achieved when only 10% to 40% of  the routers in a network 
[I]  I. Avramopoulos and J. Rexford. Stealth Probing: Securing IF' 
Routing through Data-Plane Security.  Technical Report TR- 
730-05,  Princeton  University Department  of  Computer Sci- 
ence, June 2005. 
[2]  N.  Duffield and M. Grossglauser.  Trajectory sampling for di- 
rect traffic observation.  IEEEIACM  Transactions on Network- 
ing, 9(3):280-292,  June 2001. 
[3]  N.  Duffield  and M.  Grossglauser.  Trajectory sampling  with 
unreliable reporting.  In IEEE INFOCOM, Hong Kong, March 
2004. 
[4]  C.  Estan.  Internet  TrafJic Measurement:  What's going  on in 
my network?  PhD thesis, University of California, San Diego, 
Oct. 2003. 
151  B.  Greene  and  K.  Houle. 
Isp  security  - real  work 
techniques  ii.  NANOG  26  presentation,  October  2002. 
http:llwww.nanog.orgImtg-02 1 O/ispsecure.html. 
[6]  Georgia  Tech  Internet  Topology  Model. 
http://www- 
static.cc.gatech.edu/projects/gtitm. 
[7]  A.  Herzberg and S. Kutten.  Early detection of message for- 
warding faults. SIAM J. Comput., 30(4):1169-1196,2000. 
[8]  J. Huges, T. Aura, and M. Bishop. Using Conservation of Flow 
as a Security Mechanism in Network Protocols. In IEEE Sym- 
posium on Security and Privacy, May 2000. 
[9]  S. Kent, C. Lynn, and K. Seo. Secure border gateway protocol 
(secure-bgp). IEEE Journal on Selecred Areas in Communica- 
tions, 18(4), April 2000. 
[lo]  S. Lee,  T.  Wong,  and H.  S.  Kim.  Secure Split Assignment 
Trajectory Sampling:  A Malicious Router Detection System. 
Technical Report CMU-CK-05-01, Carnegie Mellon Univer- 
sity, July 2005. Available at http : / /www . ece . cmu . edu/ 
-sihyungl/CMU-CK-05-01-SATS.pdf. 
[ l l ]   A. T.  Mizrak, Y.  Cheng, K.  Marzullo, and S. Savage.  Fatih: 
Detecting and isolating malicious rooters, In Dependable Sys- 
tems and Networks, Yokohama, Japan, June 2005. 
[I21  M. Naor and M. Yung.  Universal one-way hash functions and 
their cryptographic applications. In ACM  S)lmposium on The- 
ory of  Computing, Seattle, WA, May  1989. 
[I31  V.  Padmanabhan and D.  Simon.  Secure traceroute to  detect 
faulty or malicious routing.  Sigcomm Computer Cornmunica- 
tions Review, 33(1):77-82,  Jan 2003. 
[14]  B. Schneier.  Cisco Harasses Security Researcher, July 2005. 
http://www.schneier.com/blog/ar~hives12005/07/~is~ohara~~e~.html. 
[I51  L. Subrarnanian, V.  Roth, I.  Stoica, S. Shenker, and R.  Katz. 
In 
Listen  and  whisper:  Security  mechanisms  for  bgp. 
USENIWACM Symposium on Networked System Design and 
Implementation (NSDI), San Francisco, CA, March 2004. 
[16]  D. Zhu, M. Gritter, and D. R. Cheriton. Feedback based rout- 
ing.  Sigcomm Computer Co?nmunications Review, 33(1):71- 
76, Jan 2003. 
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:29:59 UTC from IEEE Xplore.  Restrictions apply.