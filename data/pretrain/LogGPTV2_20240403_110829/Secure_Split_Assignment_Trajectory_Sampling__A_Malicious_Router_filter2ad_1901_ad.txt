### Malicious Router Detection Using Secure Split Assignment Trajectory Sampling (SATS)

#### 1. Introduction
We consider a scenario where a malicious router, denoted as \( r_m \), randomly selects a percentage \( p_{\text{attack}} \) of hash values out of a total of \( N_{\text{total}} \) possible hash values. The number of hash values selected by the malicious router is given by \( N_{\text{attack}} = p_{\text{attack}} \times N_{\text{total}} \). Let \( H_{\text{attack}}(m) \) denote the set of \( N_{\text{attack}} \) hash values chosen by \( r_m \). The malicious router targets packets whose hashes fall within \( H_{\text{attack}}(m) \). On average, \( r_m \) attacks \( p_{\text{attack}} \) percentage of all packets.

#### 2. Complete Avoidance
We define **complete avoidance** as the event where none of the hash values in \( H_{\text{attack}} \) are assigned to any router in a given path. In this case, the attacked packets are not sampled at any router, and the attack remains undetected. We vary \( p_{\text{attack}} \) from 1% to 100% in 10% increments and derive the probability of complete avoidance, \( p_{\text{avoid}} \). As \( p_{\text{attack}} \) increases, the malicious router attacks more packets, but the attack is less likely to go undetected, leading to a lower \( p_{\text{avoid}} \).

#### 3. Probability Calculation
Figure 10 illustrates the derivation of the probability of complete avoidance. In this example, we assign 6 hash values to a router as the sampling range out of 31 different hash values. Thus, \( N_{\text{small}} = 6 \) and \( N_{\text{total}} = 31 \). The 4th router, \( r_4 \), is a malicious router on a 7-hop path. \( r_4 \) selects hash values in the sampling range assigned to \( r_i \).

- \( h_i \): the \( i \)-th hash value among \( N_{\text{total}} \) hash values.
- \( N(i) \): a set of \( N_{\text{small}} \) hash values.
- \( H_{\text{enclose}}(m) \): a set of hash values assigned to any pair of routers that enclose a malicious router \( r_m \).
- \( N_{\text{enclose}}(m) \): the number of hash values in \( H_{\text{enclose}}(m) \).
- \( H_{\text{attack}}(m) \): a set of hash values chosen by the malicious router \( r_m \).
- \( N_{\text{attack}} = p_{\text{attack}} \times N_{\text{total}} \): the number of hash values in \( H_{\text{attack}}(m) \).

The probability of complete avoidance of \( r_m \) on a T-hop path is:
\[ P(\text{complete avoidance of } r_m) = \frac{\binom{N_{\text{total}} - N_{\text{enclose}}(m)}{N_{\text{attack}}}}{\binom{N_{\text{total}}}{N_{\text{attack}}}} \]

For \( p_{\text{attack}} = 20\% \) of the \( N_{\text{total}} \) hash values (31 x 0.2 = 6 hash values) out of \( N_{\text{total}} - N_{\text{small}} = 31 - 6 = 25 \) hash values, \( r_4 \) does not choose the 6 hash values from its own sampling range. The number of possible choices is thus \( \binom{25}{6} \). If any one of the 6 hash values in \( H_{\text{attack}} \) is in \( H_{\text{enclose}} \), the attack will be detected. The probability of complete avoidance of \( r_4 \) is approximately 0.045.

#### 4. Sampling Range Assignment
We assign sampling ranges using three methods: Split Range Assignment, random assignment, and Single Range Assignment. In the random assignment, we assign \( N_{\text{small}} \) hash values to a router, randomly chosen out of \( N_{\text{total}} = N_{\text{small}} / p_{\text{samp}} \) hash values. For each node in a topology, we compute the probability of complete avoidance considering all the shortest paths where the node is present. We run 100 simulations with the sampling ratio \( p_{\text{samp}} = 1/1000 \).

In Figure 11, we show the results from the CENIC topology. The left graph shows results for both Single Range Assignment and Split Range Assignment, and the right graph shows results for random assignment. The median, 10th-percentile, and 90th-percentile values of the ratio are shown. In Single Range Assignment, unless a malicious router attacks all packets, it can avoid detection with 100% probability. Random assignment reduces \( p_{\text{avoid}} \) but not significantly. In Split Range Assignment, \( p_{\text{avoid}} \) becomes negligible as \( p_{\text{attack}} \) approaches 10%. Attacks on more than 10% of packets can hardly circumvent SATS. An attack with \( p_{\text{attack}} < 1\% \) has almost a 50% chance of being undetected, but the resulting attack is limited.

#### 5. Incremental Deployment
We evaluate two deployment methods: random and degree-based. The degree-based method prioritizes securing routers with the highest number of neighbors. We vary the fraction of routers using SATS from 0.1 to 1 in 0.1 increments. Figure 12 shows the evaluation results from the ATT topology. The right graph shows results for random deployment, and the left graph shows results for degree-based deployment. The y-axis plots the suspicious region ratio, and the x-axis plots the deployment ratio.

All graphs show "knees" in the performance curves: after reaching a certain deployment ratio (from 0.1 to 0.4 depending on the topology and deployment method), the curves flatten out. This indicates that most of the benefits of SATS are realized before complete deployment. The hierarchical nature of networks means that a few well-connected routers are on most of the shortest paths between pairs of edge routers. Once these routers deploy SATS, the size of a suspicious region can be reduced dramatically.

#### 6. Implementation Costs
We discuss the implementation costs associated with SATS in a fictional network with 100 routers and 300 links. The link rate is 10 Gbps, and all links are 95% utilized. All packets are 500B long. The sampling rate \( p_{\text{samp}} \) is 1/1000. The computational cost on a router is dominated by the function \( h_{\text{selection}}() \), which is computed for each packet. Modular arithmetic of \( h_{\text{selection}}() \) can be implemented using simple integer arithmetic in hardware or software. Current technology can compute such a function for each packet arriving at 20 Gbps or higher.

To evaluate the quantity of data sent to the backend engine, we derive the size of a report packet. For a sampled packet, we report raw header information and add a 26-bit label and the hash value where the packet is sampled. The size of a report packet is 275 bits. Each link sends \( N_{\text{samp}} \times l_{\text{report}} = 653 \text{ Kbps} \) to the backend engine. With 300 such links, the total report traffic consumes less than 2% of the link rate.

In the backend engine, we maintain \( T - 1 \) counters for each router traversed by each flow, where \( T \) is the length of the path. With 1.7 million flows and a network diameter of 20, we need up to 0.6 million counters, corresponding to several MB of memory. The backend engine reads counter values, increments one of the counters, and compares it with another counter value in the same flow. Such operations can be processed by a current 1GHz processor in less than 300 nanoseconds, which is far less than the time we have for each sample.

#### 7. Conclusions
We presented SATS, a data plane method to detect malicious routers. SATS uses Split Range Assignment to maintain the integrity of the packet sampling process. Simulations show that the probability that a malicious router can avoid detection is less than 5% and even lower when new sampling ranges are periodically reloaded onto the routers. SATS can be deployed incrementally, achieving most of its benefits when only 10% to 40% of the routers in a network are equipped with SATS.

#### References
[1] I. Avramopoulos and J. Rexford. Stealth Probing: Securing IP Routing through Data-Plane Security. Technical Report TR-730-05, Princeton University Department of Computer Science, June 2005.
[2] N. Duffield and M. Grossglauser. Trajectory sampling for direct traffic observation. IEEE/ACM Transactions on Networking, 9(3):280-292, June 2001.
[3] N. Duffield and M. Grossglauser. Trajectory sampling with unreliable reporting. In IEEE INFOCOM, Hong Kong, March 2004.
[4] C. Estan. Internet Traffic Measurement: What's going on in my network? PhD thesis, University of California, San Diego, Oct. 2003.
[5] B. Greene and K. Houle. ISP security - real work techniques II. NANOG 26 presentation, October 2002. http://www.nanog.org/mtg-0210/ispsecure.html.
[6] Georgia Tech Internet Topology Model. http://www-static.cc.gatech.edu/projects/gtitm.
[7] A. Herzberg and S. Kutten. Early detection of message forwarding faults. SIAM J. Comput., 30(4):1169-1196, 2000.
[8] J. Hughes, T. Aura, and M. Bishop. Using Conservation of Flow as a Security Mechanism in Network Protocols. In IEEE Symposium on Security and Privacy, May 2000.
[9] S. Kent, C. Lynn, and K. Seo. Secure border gateway protocol (secure-bgp). IEEE Journal on Selected Areas in Communications, 18(4), April 2000.
[10] S. Lee, T. Wong, and H. S. Kim. Secure Split Assignment Trajectory Sampling: A Malicious Router Detection System. Technical Report CMU-CK-05-01, Carnegie Mellon University, July 2005. Available at http://www.ece.cmu.edu/~sihyung/CMU-CK-05-01-SATS.pdf.
[11] A. T. Mizrak, Y. Cheng, K. Marzullo, and S. Savage. FATIH: Detecting and isolating malicious routers. In Dependable Systems and Networks, Yokohama, Japan, June 2005.
[12] M. Naor and M. Yung. Universal one-way hash functions and their cryptographic applications. In ACM Symposium on Theory of Computing, Seattle, WA, May 1989.
[13] V. Padmanabhan and D. Simon. Secure traceroute to detect faulty or malicious routing. Sigcomm Computer Communications Review, 33(1):77-82, Jan 2003.
[14] B. Schneier. Cisco Harasses Security Researcher, July 2005. http://www.schneier.com/blog/archives/2005/07/cisco_harasses_.html.
[15] L. Subramanian, V. Roth, I. Stoica, S. Shenker, and R. Katz. Listen and whisper: Security mechanisms for BGP. USENIX/ACM Symposium on Networked System Design and Implementation (NSDI), San Francisco, CA, March 2004.
[16] D. Zhu, M. Gritter, and D. R. Cheriton. Feedback based routing. Sigcomm Computer Communications Review, 33(1):71-76, Jan 2003.