then, a lot of progress has been made.
Provos and Mazi`eres [33] have proposed a cost-
parameterizable alternative to Unix crypt(), called
bcrypt(), to avoid the obsolescence problems asso-
ciated with ﬁxed iteration counts. In their proposal, the
cost parameter is set by the system administrator, shared
among users, and must be committed to storage (rather
than kept secret, set arbitrarily, and easy to program us-
ing the user interface, in the present work). More re-
cently, Halderman et al. [16] proposed the idea of mak-
ing key derivation very slow the ﬁrst time, and subse-
quently faster by caching some state on the user ma-
chine: this is mostly useful for client-server authentica-
tion when the password is so weak that online trial-and-
error is the greater concern, seconded by cache exposure.
Interestingly, online PAKE protocols [27] have recently
started to take ofﬂine dictionary attacks into considera-
tion, by avoiding keeping user passwords in the clear
on the server, and by distributing these servers among
several locations. Other approaches to password man-
agement seek to prevent dictionary attacks in speciﬁc
contexts: the PwdHash [36] system is a browser plug-in
122
16th USENIX Security Symposium
USENIX Association
that generates reproducible unique passwords for differ-
ent web sites, and offers some resistance to both online
and ofﬂine attacks.
Deliberately expensive cryptography has also been
applied in “proof-of-work” schemes for combatting
junk email [14] as well as for carrying out micro-
payments [2], among other similar applications. These
CPU-bound constructions are based on easy-to-verify
but hard(er)-to-compute answers to random challenges
built from hash functions. Memory-bound proof-of-
work schemes have also been proposed [13], motivated
not by the desire to prevent parallelism, but rather by the
observation that memory chips have narrower and more
predictable speed ranges than CPUs. At the other ex-
treme of this spectrum, time-lock puzzles [35] are en-
cryption schemes designed to be decryptable, without a
key, after a well-deﬁned but very long computation; these
schemes are based on algebraic techniques, and view the
publicity of the decryption delay as a feature [28].
Regarding parallel hashing schemes, we mention
Split MAC [41], which is a parallelizable version of
HMAC [24] for hashing long messages (rather than a
long loop from a short password). On the cryptana-
lytic side, we mention Hellman’s [18] classic time/space
trade-off attack against deterministic password hashing,
and its modern reincarnation as Oeschlin’s [30] rainbow
tables. See also [3] for a theoretical study of these types
of algorithms.
Contribution. The point of this paper is as much to
study HKDFs for their own sake as a new cryptographic
and security tool, as it is to advocate their deployment in
all practical systems that do password-based encryption.
In Section 2 we deﬁne HKDFs, construct them gener-
ically, and prove their basic security. We also parame-
terize them for the long term, and discuss user-side par-
allelism. In Section 3 we adopt a theoretical stance and
study the origin of the ∼ 4× security factor that seems
to arise magically.
In Section 4 we put on a systems hat and show how to
integrate HKDFs in popular software such as TrueCrypt
and GnuPG. We plan to release our implementations as
open-source C code.
2 HKDF Design
The guiding design principles of Halting Key Derivation
Functions are the following:
1. the cost of key derivation is programmed by the user
and has no prior upper bound;
2. the amount of work for each key is independent and
secret;
3. the key derivation memory footprint grows in lock-
step with computation time;
4. the computation for deriving a single key can be dis-
tributed if needed.
We have already mentioned the motivation for (1.) letting
the user program the iteration count t arbitrarily, and (4.)
providing user-side parallelism. The justiﬁcation for (2.)
keeping t a secret, and (3.) having the memory footprint
grow linearly with t, are to force the attacker to make
costly guesses as it tries out wrong candidate passwords
from its dictionary D.
Suppose the adversary is certain the true password w
belongs in D, but has no idea about t. The obvious ap-
proach is to try out all the words in D, in parallel, for
as many iterations as needed. However, this attack is in-
credibly memory-consuming since for each word there
is state to be kept: terabytes or more for mere 40-bit en-
tropy passwords (#D = 240).
If the attacker cannot maintain state across all of D
as the iteration count is increased, the only alternative
is to ﬁx an upper bound ¯t for t and try each word for ¯t
iterations, and then start over with a bigger ¯t. Clearly,
this is more expensive since much of the computations is
being redone. How much more expensive depends on the
schedule for increasing ¯t. Increase it too slowly, e.g., ¯t =
1, 2, 3, ..., and most of the work ends up being redone.
Increase it too fast, e.g., ¯t = 1!, 2!, 3!, ..., and the true
value of t risks being overshot by a wide margin.
We shall see that with the optimal strategy the attacker
can keep the cost as low as ∼ 4× as much as if t has
been public. The user does not pay this penalty since
on the correct password the HKDF halts spontaneously
at the correct iteration count t (which the user need not
recall either). This gives us ∼ 2 bits of extra security
essentially for free.
The memory footprint growth in Θ(t) is a technicality
to ensure that the argument holds for arbitrarily large t,
lest it become more economical beyond some threshold
to purchase the memory.
Formal Speciﬁcation
2.1
As brieﬂy outlined in Section 1.4, an HKDF consists of
a pair of deterministic functions:
Prepare : (w, r, t) 7→ v which, given a password w, a
random string r, and an iteration count t, produces
a public veriﬁcation string v;
Extract : (w, v) 7→ k which, given a password w and
a veriﬁcation string v, outputs a key k upon halting,
or fails to halt in polynomial time.
In this abstract model, the iteraction count parameter t is
given to Prepare at the onset. In practice, the user sets t
USENIX Association
16th USENIX Security Symposium
123
implicitly by interrupting the computation as she pleases,
using the user interface.
Security Model. We write [a] and [a | b] to denote
marginal and conditional distributions of random vari-
ables. Let US denote the uniform distribution over a set
S, often implicit from context.
Pick r ∈$ {0, 1}`, viz., so that [r] ≡ U{0,1}`, to be
our `-bit random seed for some parameter `. We ﬁrst de-
mand that the extracted keys be uniform and statistically
independent of the secrets:
– Key uniformity:
[k | w, t] ≡ U where k =
Extract(w, Prepare(w, r, t)).
We also impose lower and upper computational com-
plexity bounds on the functions:
– Preparation complexity: Prepare(w, r, t) always
halts in time O(t), for all inputs.
– Extraction complexity: Extract(w, v) requires time
and space Θ(t), for all v = Prepare(w, r, t).
– Conditional halting: Extract(w0, v) does not halt in
polynomial time when w0 6= w.
We then ask that the key be unknowable without the req-
uisite effort, even with all the data:
– Bounded indistinguishability: [v, k | w, t] o(t)≡ U for
v = Prepare(w, r, t) and k = Extract(w, v).
I.e., for any randomized algorithm running in space
(and hence time) strictly sub-linear in t, the joint
[v, k] is computationally indistinguishable from ran-
dom even given w and/or t.
As a consequence of the latter, the public string v is
computationally indistinguishable from random to any-
one who has not also guessed (and tested for t iterations)
the correct password against it.
random r,
for
in polynomial
it must be in-
To summarize,
feasible to ﬁnd,
time in the secu-
rity parameter, a tuple (k, t, w, w0) such that k =
Extract(w0, Prepare(w, r, t)) and w 6= w0.
Fur-
thermore, ﬁnding a tuple (k, t, w) such that k =
Extract(w, Prepare(w, r, t)) must require Θ(t) units of
time and memory, barring which no information about
the correct k must be obtained from w, r, t.
2.2 Generic Construction
There are many ways to realize HKDFs, depending on
the computational assumptions we make. One of the sim-
plest constructions is generic and is based on some cryp-
tographic hash function H : {0, 1}2 ` → {0, 1}` viewed
as a random oracle, for a security parameter `.
To capture the main idea, we start with a sequential
HKDF construction. The construction is:
HKDFH .Prepare(w, r, t)
Inputs: password w, random string r, iteration count t
(may be implicit from user interrupt).
Output: veriﬁcation string v (and corresponding key k).
1. z ← H(w, r)
// init z from
2. FOR i := 1, ..., t or until interrupted //
3.
yi ← z
REPEAT q times
4.
5.
j ← 1 + (z mod i)
z ← H(z, yj)
6.
7. v ← (H(y1, z), r)
8. k ← H(z, r)
password and
seed
// store z in array
element yi
//
// map z to some
j ∈ {1, ..., i}
// update z
//
//
HKDFH .Extract(w, v)
Inputs: password w, veriﬁcation string v.
Output: derived key k, or may never halt.
seed strings
// comparison and
//
// forever loop
//
//
//
//
yi ← z
REPEAT q times
j ← 1 + (z mod i)
z ← H(z, yj)
0. parse v as (h, r)
1. z ← H(w, r)
2. FOR i := 1, ...,∞
3.
4.
5.
6.
7.
8. k ← H(z, r)
The constant q is a parameter that determines the ra-
tio between the time and space requirements. Since the
Extract function may not halt spontaneously, it must be
resettable by the user interface.
IF H(y1, z) = h THEN BREAK // break on halting
condition
//
Security Properties
2.3
It is easy to see that the key output by Prepare is random
and correctly reproducible by Extract. As for the HKDF
security properties, we state the following lemmas.
Lemma 1. Key uniformity: [k | w, t] ≡ U{0,1}` where
k = Extract(w, Prepare(w, r, t)).
Lemma 2. Preparation complexity: Prepare(w, r, t)
halts in time Θ(q t) on all inputs, for ﬁxed q.
Lemma 3. Extraction complexity: Extract(w, v) halts
in time Θ(q t) and uses Θ(t) bits of memory, for any v =
Prepare(w, r, t) with same w.
124
16th USENIX Security Symposium
USENIX Association
Proofs. Since r is random and H is a random function,
k = H(z, r) is uniformly distributed ∀z, which estab-
lishes Lemma 1. Lemmas 2 and 3 follow by inspection
of the algorithms.
Lemma 4. Conditional halting: Except with negligi-
ble probability, Extract(w0, v) halts in super-polynomial
time Ω(2` q) for any v = Prepare(w, r, t) and w0 6= w,
where the probability is taken over the random choice of
H for arbitrary inputs.
6= w, the value of y1 = H(w, r) in
Proof. For w0
Prepare and y0
1 = H(w0, r) in Extract will be statis-
tically independent since H is a random function, and
therefore so will be the benchmark h = H(y1, z) and its
comparison value H(y0
1, z0) for all z0. Since the constant
h, the variable z0, and the value H(y0
1, z0), are all `-bit
binary strings, we ﬁnd that, letting ` → ∞,
Pr(Extract loops indeﬁnitely) = e−1 ≈ 0.3678794 ,
Pr(Extract halts before count i) = (1 − e−1)(1 − e−i/2`) .
The probability of halting on the wrong password in sub-
exponential time i  0 and i ≤ e−n t.
(3) The probability that for ﬁxed i ≤ e−n t the value
yi is never needed is Pr(yi not needed) ≤ e−n q, which
whenever n > `/(q ln 2) is a vanishingly small func-
tion of the effective security parameter `. (4) Since, for
such n, the difference e−n t − e−n−1 t is a linear func-
tion of t, the sub-linear memory constraint requires that
some yj with j ≤ e−n−1 t be dropped prior to reaching
the de−n te-th step. (5) With overwhelming probability
Pr ≥ 1 − e−n q, the dropped value yj appears in the
computation path of some yi where j < e−n t < i, and
without the value of yj the key derivation cannot pro-
ceed.
The outcome of this reasoning is that before we can
compute yi, we need to recompute the dropped value yj,
which itself requires the recomputation of some earlier
values still: some of these values must also have been
dropped, as the same reasoning shows using an incre-
mented n ← n + 1 (with recursion upper bound bln tc).
To complete the argument, we note that for some l where
j < l < i ≤ t, the recomputation of yj needed for yi
will require freeing up some previously stored value yl,
which is still needed for the calculation of yi, and whose
recomputation will require yj; when this happens, the al-
gorithm will be stuck. This shows that the intrinsic space
complexity of computing HKDFH .Extract by whatever
means in the random oracle model is ˜Θ(`t).
A consequence of Lemma 5 is that, unless the attacker
has an enormous and linearly increasing amount of mem-
ory at its disposal, it will not be able to mount a “per-
sistent” attack against all D (or any signiﬁcant fraction
thereof). It will have to choose which bits of state must
be kept, and which ones must be erased to make room
for others: the attack will necessarily be “forgetful”.
2.4
Parallelizable Construction
In addition to allowing arbitrarily large t and forcing the
adversary to guess it, a complementary way to increase
the adversary’s workload is to exploit any parallelism
that is available to the user.
Indeed, users care about
the real elapsed time for processing a single password,
whereas attackers worry about the total CPU time needed
to cycle through the entire dictionary. Hence, we can
hurt the adversary by increasing the CPU-time/elapsed-
time ratio, with parallelizable key derivation.
Interestingly, we note that this runs contrary to con-
ventional wisdom on password hashing, which tradi-
tionally abhors parallelism. The reason why our new
password-level parallelism is safe is that only the legit-
imate user can beneﬁt from it. The adversary is always
better off using the cruder kind of dictionary-level paral-
lelism that has always been available to him.
We require a cryptographic hash function H :
{0, 1}∗ → {0, 1}` where ` is a security parameter. Let
{STATEMENT(l)}l=1,...,p
denote the p independent state-
ments STATEMENT(1), ..., STATEMENT(p), where p is a
USENIX Association
16th USENIX Security Symposium
125
“maximum parallelism” parameter. Our generic paral-
lelizable HKDF is as follows:
pHKDFH .Prepare(w, r, t)
Inputs: password w, random string r, iteration count t
(may be implicit from user interrupt).
Output: veriﬁcation string v (and corresponding key k).
1. {zl ← H(w, r, l)}l=1,...,p
2. z ← H(z1, ..., zl)
3. FOR i := 1, ..., t or until interrupted
4.
yi ← z
REPEAT q times
{jl ← 1 + (zl mod i)}l=1,...,p