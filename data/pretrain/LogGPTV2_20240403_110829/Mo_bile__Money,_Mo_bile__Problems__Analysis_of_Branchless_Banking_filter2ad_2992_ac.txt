word from messages. The password can later be used to
conduct illicit transactions from the victim’s account.
Finally, responses from the Oxigen Wallet servers are
not encrypted. This means that any sensitive information
that might be contained in a response (e.g., the name of
a transaction recipient) can be read by any eavesdropper.
This is both a privacy and integrity concern because an
attacker could read and modify responses.
GCash. Unlike Oxigen Wallet, GCash uses a static
key for encrypting communcations with the remote
server. The GCash application package includes a ﬁle
“enc.key,” which contains a symmetric key. During the
GCash login process, the user’s PIN and session ID are
encrypted using this key before being sent to the GCash
servers. This key is posted publicly because it is included
with every download of GCash. An attacker with this
key can decrypt the user’s PIN and session ID if the en-
4Although the Android offers a SecureRandom class
for
cryptographically-secure generation, it does not mention its necessity
in the documentation.
crypted data is captured. This can subsequently give the
attacker the ability to impersonate the user.
The session ID described above is generated dur-
ing the login process and passed to the server to pro-
vide session authentication in subsequent messages. We
did not ﬁnd any other authenticator passed in the mes-
sage body to the GCash servers after login. The ses-
sion ID is created using a combination of the device
ID, e.g., International Mobile Station Equipment Iden-
tity (IMEI), and the device’s current date and time. An-
droid will provide this device ID to any application with
the READ PHONE STATE permission, and device IDs can
be spoofed on rooted phones. Additionally, IMEI is fre-
quently abused by mobile apps for persistent tracking of
users [25], and is thus also stored in the databases of hun-
dreds of products.
Although the session ID is not a cryptographic con-
struct, the randomness properties required by a strong
session ID match those needed by a strong cryptographic
key. This lack of randomness results in predictable ses-
sion IDs can then be used to perform any task as the ses-
sion’s associated user.
Airtel Money. Airtel Money performs a similar mistake
while authenticating the user. When launching the appli-
cation, the client ﬁrst sends the device’s phone number
to check if there is an existing Airtel Money account. If
so, the server sends back the user’s account number in
its response. Although this response is transmitted via
HTTPS, the app does not validate certiﬁcates, creating
a compound vulnerability where this information can be
discovered by an attacker.
Sensitive operations are secured by the user’s 4-digit
PIN. The PIN is encrypted in transit using a weakly-
constructed key that concatenates the device’s phone
number and account number in the following format:
Keyenc = j7zgy1yv(cid:31) phone#(cid:31)account#
(1)
The preﬁxed text in the key is immutable and included
with the application. Due to the weak SSL/TLS imple-
mentation during the initial messages, an adversary can
obtain the user’s account number and decrypt the PIN.
The lack of randomness in this key again produces a vul-
nerability that can lead to user impersonation.
4.4 Access Control
A number of the applications that we analyzed used ac-
cess control mechanisms that were poorly implemented
or relied on incorrect or unveriﬁable assumptions that
the user’s device and its cellular communications chan-
nels are uncompromised. Multiple applications relied on
SMS communications, but this channel is subject to a
number of points of interception [56]. For example, an-
other application on the device with the RECEIVE SMS
24  24th USENIX Security Symposium 
USENIX Association
8
permission could read the incoming SMS messages of
the mobile money application. This functionality is out-
side the control of the mobile money application. Addi-
tionally, an attacker could have physical access to an un-
locked phone, where messages can be inspected directly
by a person. This channel does not, therefore, provide
strong conﬁdentiality or integrity guarantees.
MoneyOnMobile. The MoneyOnMobile app presents
the most severe lack of access control we found among
the apps we analyzed. The service uses two differ-
ent PINs, the MPIN and TPIN, to authenticate the user
for general functionality and transactions. However, we
found that these PINs only prevent the user from moving
between Android activities. In fact, the user’s PINs are
not required to execute any sensitive functionality via the
backend APIs. All sensitive API calls (e.g., balance in-
quiry, mobile recharge, bill pay, etc.) except PIN changes
can be executed with only knowledge of the user’s mo-
bile phone number and two API calls. MoneyOnMobile
deploys no session identiﬁers, cookies, or other stateful
tracking mechanisms during the app’s execution; there-
fore, none of these are required to exploit the service.
The ﬁrst required API call takes the mobile number
as input and outputs various parameters of the account
(e.g., Customer ID). These parameters identify the ac-
count as input in the subsequent API call. Due to the
lack of any authentication on these sensitive functions,
an adversary with no knowledge of the user’s account can
execute transactions on the user’s behalf. Since the ini-
tial call provides information about a user account, this
call allows an adversary to brute force phone numbers in
order to ﬁnd MoneyOnMobile users. This call also pro-
vides the remainder of the information needed to perform
transactions on the account, severely compromising the
security of the service.
mPAY. While the MoneyOnMobile servers do not re-
quire authentication before performing server tasks, we
found the opposite is true with mPAY. The mPAY app ac-
cepts and performs unauthenticated commands from its
server. The mPAY app uses a web/native app hybrid that
allows the server to send commands to the app through
the use of a URL parameter “method.” These methods
instruct the app to perform many actions, including start-
ing the camera, opening the browser to an arbitrary URL,
or starting an arbitrary app. If the control ﬂow of the web
application from the server side is secure, and the HTTP
channel between client and server is free from injection
or tampering, it is unlikely that these methods could be
harmful. However, if an attacker can modify server code
or redirect the URL, this functionality could be used to
attack mobile users. Potential attacks include tricking
users into downloading malware, providing information
to a phishing website, or falling victim to a cross-site
request forgery (CSRF) attack. As we discussed in the
previous results, mPAY does not correctly validate the
certiﬁcates used for its SSL/TLS sessions, and so these
scenarios are unsettlingly plausible.
GCash. Although GCash implements authentication, it
relies on easily-spoofable identity information to secure
its accounts. During GCash’s user registration process,
the user selects a PIN for future authentication. The se-
lected PIN is sent in plaintext over SMS along with the
user’s name and address. GCash then identiﬁes the user
with the phone number used to send the SMS message.
This ties the user’s account to their phone’s SIM card.
Unfortunately, SMS spooﬁng services are common, and
these services provide the ability for an unskilled adver-
sary to send messages appearing to be from an arbitrary
number [27]. SIM cards can be damaged, lost, or stolen,
and since the wallet balance is tied to this SIM, it may be
difﬁcult for a user to reclaim their funds.
Additionally, GCash requires the user to select a 4-
digit PIN to register an account. As previously men-
tioned, this PIN is used to authenticate the user to the
service. This allows only 10,000 possible combinations
of PINs, which is quickly brute-forceable, though more
intelligent guessing can be performed using data on the
frequency of PIN selection [16]. We were not able to
create an account with GCash to determine if the service
locks accounts after a number of incorrect login attempts,
which is a partial mitigation for this problem.
Oxigen Wallet. Like GCash, Oxigen Wallet also allows
users to perform several sensitive actions via SMS. The
most severe of these is requesting a new password. As a
result, any attacker or application with access to a mobile
phone’s SMS subsystem can reset the password. That
password can be used to login to the app or to send SMS
messages to Oxigen Wallet for illicit transactions.
Information Leakage
4.5
Several of the analyzed applications exposed personally-
identifying user information and/or data critical to the
transactional integrity through various methods, includ-
ing logging and preference storage.
4.5.1 Logging
The Android logging facility provides developers the
ability to write messages to understand the state of their
application at various points of its execution. These mes-
sages are written to the device’s internal storage so they
can be viewed at a future time. If the log messages were
visible only to developers, this would not present the op-
portunity for a vulnerability. However, prior to Android
4.1, any application can declare the READ LOGS per-
mission and read the log ﬁles of any other application.
That is, any arbitrary application (including malicious
USENIX Association  
24th USENIX Security Symposium  25
9
ones) may read the logs. According to statistics from
Google [32], 20.7% of devices run a version of Android
that allows other apps to read logs.
mPAY. mPAY logs include user credentials, personal
identiﬁers, and card numbers.
GCash. GCash writes the plaintext PIN using the ver-
bose logging facility. The Android developer documen-
tation states that verbose logging should not be compiled
into production applications [33]. Although GCash has a
speciﬁc devLog function that only writes this data when
a debug ﬂag is enabled, there are still statements without
this check. Additionally, the session ID is also logged
using the native Android logging facility without check-
ing for a developer debug ﬂag. An attacker with GCash
log access can identify the user’s PIN and the device ID,
which could be used to impersonate the user.
MoneyOnMobile. These logs include server responses
and account balances.
4.5.2 Preference Storage
Android provides a separate mechanism for storing pref-
erences. This system has the capability of writing the
stored preferences to the device’s local storage, where
they can be recovered by inspecting the contents of the
preferences ﬁle. Often, developers store preferences data
in order to access it across application launches or from
different sections of the code without needing to explic-
itly pass it. While the shared preferences are normally
protected from the user and other apps, if the device is
rooted (either by the user or a malicious application) the
shared preferences ﬁle can be read.
GCash. GCash stores the user’s PIN in this system. The
application clears these preferences in several locations
in the code (e.g., logout, expired sessions), however if
the application terminates unexpectedly, these routines
may not be called, leaving this sensitive information on
the device.
mPAY. Similarly, mPAY stores the mobile phone number
and customer ID in its preferences.
mCoin. Additionally, mCoin stores the user’s name,
birthday, and certain ﬁnancial information such as the
user’s balance. We also found that mCoin exposes this
data in transmission. Debugging code in the mCoin ap-
plication is also conﬁgured to forward the user’s mCoin
shared preferences to the server with a debug report. As
noted above, this may contain the user’s personal infor-
mation. This communication is performed over HTTP
and sent in plaintext, providing no conﬁdentiality for the
user’s data in transmission.
4.5.3 Other Leakage
Oxigen Wallet. We discussed in Section 4.3 that re-
quests from the Oxigen Wallet client are encrypted (in-
securely) with either RSA or Blowﬁsh. Oxigen Wallet
also discloses mobile numbers of account holders. On
sign up, Oxigen Wallet sends a GetProfile request to
a server to determine if the mobile number requesting a
new account is already associated with an email address.
The client sends an email address, and the server sends
a full mobile number back to the client. The applica-
tion does appear to understand the security need for this
data as only the last few digits of the mobile number are
shown on the screen (the remaining digits are replaced
by Xs). However, it appears that the full mobile num-
ber is provided in the network message. This means that
if an attacker could somehow read the full message, he
could learn the mobile number associated with the email
address.
Unfortunately, the GetProfile request can be sent
using the Blowﬁsh encryption method previously de-
scribed, meaning that an attacker could write his own
code to poll the Oxigen Wallet servers to get mobile num-
bers associated with known email addresses. This enu-
meration could be used against a few targets or it may be
done in bulk as a precursor to SMS spam, SMS phish-
ing, or voice phishing. This bulk enumeration may also
tax the Oxigen Wallet servers and degrade service for le-
gitimate users. This attack would not be difﬁcult for an
attacker with even rudimentary programming ability.
4.6 Zuum
Zuum is a Brazilian mobile money application built by
Mobile Financial Services, a partnership between Tele-
fonica and MasterCard. While many of the other apps
we analyzed were developed solely by cellular network
providers or third-party development companies, Master-
Card is an established company with experience building
these types of applications.
This app is particularly notable because we did not
ﬁnd in Zuum the major vulnerabilities present in the
other apps. In particular, the application uses SSL/TLS
sessions with certiﬁcate validation enabled and includes
a public key and performs standard cryptographic oper-
ations to protect transactions inside the session. Mallo-
droid detects Zuum’s disabled certiﬁcate validation rou-
tines, but our manual analysis determines that these rou-
tines would not run. We discuss MasterCard’s involv-
ment in the Payment Card Industry standards, the app’s
terms of service, and the ramiﬁcations of compromise in
Section 5.
26  24th USENIX Security Symposium 
USENIX Association
10
4.7 Veriﬁcation
We obtained accounts for MoneyOnMobile, Oxigen
Wallet, and Airtel Money in India. For each app, we
conﬁgured an Android emulator instance to forward its
trafﬁc through a man-in-the-middle proxy. In order to re-
main as passive as possible, we did not attempt to verify
any transaction functionality (e.g., adding money to the
account, sending or receiving money, paying bills, etc.).
We were able to successfully verify every vulnerability
that we identiﬁed for these apps.
5 Discussion
In this discussion section, we make observations about
authentication practices and our SSL/TLS ﬁndings, reg-
ulations governing these apps, and whether smartphone
applications are in fact safer than the legacy apps they
replace.
Why do these apps use weak authentication? Numeric
PINs were the authentication method of choice for the
majority of the apps studied — only three apps allow
use of a traditional password. This reliance on PINs is
likely a holdover from earlier mobile money systems de-
veloped for feature phones. While such PINs are known
to be weak against brute force attacks, they are chosen for
SMS or USSD systems for two usability reasons. First,
they are easily input on limited phone interfaces. Sec-
ond, short numeric PINs remain usable for users who
may have limited literacy (especially in Latin alphabets).
Such users are far more common in developing countries,
and prior research on secure passwords has assumed user
literacy [54]. Creating a distinct strong password for the
app may be confusing and limit user acceptability of new
apps, despite the clear security beneﬁts.
Beyond static PINs, Airtel Money and Oxigen Wallet
(both based in India) use SMS-provided one-time
passwords to authenticate users. While effective at
preventing remote brute-force attacks, this step provides
no defense against the other attacks we describe in the
previous section.
Why do these apps fail to validate certiﬁcates? While
this work and prior works have shown that many Android
apps fail to properly validate SSL/TLS certiﬁcates [28],
the high number of branchless banking apps that fail to
validate certiﬁcates is still surprising, especially given
the mission of these apps. Georgiev et al.
found that
many applications improperly validate certiﬁcates, yet
identify the root cause as poorly designed APIs that make
it easy to make a validation mistake [31]. One possible
explanation is that certiﬁcate validation was disabled for
a test environment which had no valid certiﬁcate. When
the app was deployed, developers did not test for im-
proper validation and did not remove the test code that
disabled host name validation. Fahl et al. found this ex-
planation to be common in developer interviews [29],
and they also further explore other reasons for SSL/TLS
vulnerabilities, including developer misunderstandings