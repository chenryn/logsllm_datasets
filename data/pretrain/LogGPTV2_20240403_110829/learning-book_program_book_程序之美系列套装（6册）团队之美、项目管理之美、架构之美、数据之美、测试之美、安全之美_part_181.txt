不管我们创建什么解决方案，应用都需要在Facebook站点上有独特
的显示展现。Facebook平台向应用提供了这方面的支持，为
Facebook上的应用内容展现保留了URL路径
http://apps.facebook.com/fettermansbooks/....。我们稍后会看到平台
是如何集成应用的数据、逻辑和显示的。
不好处理。
实际问题：外部应用不能够使用Facebook没有通过Web服务暴露出
来的那些核心数据元素。在Facebook提供网站
（http://facebook.com）的内容时，Facebook为它的用户提供了大量
的数据。隐私信息本身（第6.1.2节中提到的can_see映射）就是一个
好例子—不能被Facebook站点的用户显式地看到，can_see映射对于
数据服务也是不可见的。但是强制实现Facebook用户的这种隐私设
置是所有良好集成的应用的特点，也是对社会关系系统上用户期望
的支持。Facebook为了保护用户的隐私，不能通过数据服务将这些
数据开放出来。开发者怎样才能利用这些数据呢？
对这些问题的最优雅解决方案就是结合Facebook的数据和外部应用
的数据、逻辑和显示，同时让用户在一个受信任的环境下操作。
数据解决方案：开发者通过一种数据驱动的标记语言，在社会关系
站点上创建应用执行和显示的内容，与Facebook交互。
只使用第6.2.1节和第6.3.2节中介绍的Facebook平台元素的应用，在
Facebook之外创造了一种社会关系体验，因Facebook的社会关系数
据而变得更强大。利用本节介绍的数据和Web架构，应用本身也变
1018
---
## Page 1020
成一种数据服务，支持针对Facebook的内容显示在
http://apps.facebook.com之下。像
http://apps.facebook.com/fettermansbooks/....这样的URL不再映射到
Facebook生成的数据、逻辑和显示，而是会查询
http://fettermansbooks.com的服务，生成应用的内容。
我们必须同时记得我们的资产和约束。一方面，我们有一个访问赖
率很高的社会关系系统，让用户能发现外部的内容，并有大量的社
会关系数据来增强这种社会关系应用。另一方面，请求需要从社会
关系站点（Facebook）上发起，将应用作为服务来使用，然后将内
容渲染成HTML、JavaScript和CSS，并且不违反Facebook用户的隐
私或期望。
首先，我们来看一些不正确的尝试。
6.4.1Facebook上的应用：直接渲染HTML、CSS和JS
假定一个外部应用的配置现在包含两个字段，名为application_name
和callback_url。通过输入“fettermansbooks"这样的名字和
http://fettermansbooks.com/fbapp/i这样的URL,http://fettermanbooks.com
声明它将在自己的服务器上为用户提供服务，对
http://apps.facebook.com/fettermansbooks/PATH?QUERY_STRING的请
求将转向http://fettermansbooks.com/fbapp/PATH?QUERY_STRING。
对http://apps.facebook.com/fettermansbooks/.....的请求于是简单地取
出应用服务器上的HTML、JS和CSS等内容，并在Facebook上的页面
主内容区域进行显示。这基本上是将外部站点作为一个HTMLWeb
服务来渲染的。
这对应用的n层模型进行了重要改变。以前，应用栈会通过数据服
务来使用Facebook的内容，这个数据服务是直接服务于对
http://fettermansbooks.com的请求的。现在，应用在它的Web根下维
护了一个树型结构，它自己提供HTML服务。Facebook通过在线请
求这个新应用服务（该服务文可能用到Facebook的数据服务）而取
得内容，将它包装成一般的Facebook站点导航元素，显示给用户。
但是，如果Facebook直接在它的页面中渲染一个应用的HTML、
JavaScript或CSS，这就会允许应用完全违反用户对
1019
---
## Page 1021
全攻击之下。允许外部用户直接订制标记语言和脚本几乎从来都不
是好主意。实际上，代码或脚本注入通常是攻击者的目标，所以这
并不是一个很好的特征。
而且，没有新数据！尽管这为应用栈的改变奠定了基础，但这个解
决方案没有完全解决前面的两个实际问题。
6.4.2Facebook上的应用：iframe
还有一种更安全的显示应用内容的方法，可以显示另一个站点的可
视化上下文和界面流转，这种方法已包含在浏览器中，即iframe。
为了复用前一节中提到的映射，对http://apps.facebook.com/fettermans
books/PATH?QUERY_STRING的请求将导致输出这样的HTML：
这个URL的内容将显示在Facebook页面的一个帧中，在它自己的沙
盒环境中可以包含任何类型的Web技术：HTML、JS、AJAX、Flash
等。
这实际上是让浏览器成为请求代理者，而不是由Facebook作为请求
代理者。这比前一节中的模型有改进，浏览器也维护所得页面中其
他元素的安全性，所以并发者可以在这个顿中随意创建他们想要的
用户体验。
对于某些应用，如果并发者希望花最小的代价将他们的代码从他们
的站点移到平台上，那么iframe的方式也是有意义的。实际上，
Facebook继续支持完整页面生成的iframe模型。虽然这解决了第一
个实际问题，将应用纳入到社会关系站点，但第二个实际问题仍未
解决。虽然基于iframe的请求流程可以确保安全，但除了API服务暴
露出来的数据之外，这些开发者并不能利用其他的新数据。
6.4.3Facebook上的应用：FBML是数据驱动的执行标记语言
前两节中提到的解决方案尝试都有其优点。HTML的解决方案采用
了直观的方法，将应用本身变成Web服务，将触点带回到Facebook
1020
---
## Page 1022
上显示。iframe方式的好处在于将并发者的应用内容放在一个独立
的（安全的）执行沙盒中。最佳解决方案将保留“应用即服务"的模
型和iframe的安全和可信，同时又让并发者能够使用更多的社会关
系数据。
问题是，为了让社会关系应用提供独特的使用体验，并发者必须通
过他们自己的应用栈来提供数据、逻辑和展现。但是，生成这些输
出必须用到那些不能离开Facebook的用户数据。
解决方案是什么？不是发回HTML，而是一种特定的标记语言，其
中定义了足够的标记来表现应用的逻辑和显示，也包含对受保护数
据的请求，完全让Facebook在受信任的服务器环境中渲染它！这就
是FBML的前提（图6-5）。
在这个流程中，对http://apps.facebook.com的请求同样被转换成对应
用的请求，应用栈会使用Facebook的数据服务。但是，并发者不会
让应用返回HTML，而是重写应用，返回FBML。FBML中包含了许
多HTML元素，而且添加了Facebook特别定义的标签。当这个请求
返回其内容时，Facebook的FBML解释器将这段标记语言转换成它
自己的数据、执行和显示实例，生成应用页面。用户就会收到一个
页面，其中包含了Facebook页面的一般Web元素，而且也包含了应
用的数据、逻辑和观感。不论FBML返回什么，它都能在技术上确
保Facebook强制实现其隐私理念和良好的用户体验元素。
1021
---
## Page 1023
App服务
App数据
SQL对象
App逻辑层
(obj)
App显示层
S_GET,S_POST
FB服务
FBML
App基础设施
FB API
浏览器
FB基设施
FBML
S_REQUEST
解释器
HTML,JS,
FQL
CSS
(obi)
FB逻辑层
FB显示层
隐私规则
B
图6-5：应用即FBML服务
FBML是XML的一个特例，它包含了许多熟悉的HTML标签，增加
了在Facebook上显示的平台专有的标签。FBML同样体现了FQL的高
级模式：修改已知的标准（HTML，对FQL来说就是SQL），将执行
和决定延迟到Facebook平台服务器上进行。如图6-5所示，FBML解
释器让开发者通过FBML数据，自己能够控制在Facebook服务器上
执行的逻辑和显示。这是数据处于执行中心的绝妙例子：FBML只
是声明式的执行，而不是必须服从的控制流（如在C、PHP等语言
中）。
现在来看具体细节。FBML是一个XML实例，所以它由标签、属性
和内容组成。标签可以在概念上分成以下几大类。
直接的HTML标签
1022
---
## Page 1024
如果FBML服务返回标签，Facebook将在输出页上直接渲染为
。作为Web展现的基石，大多数HTML标签都是支持的，少数
违反Facebook层面的信任或设计期望的标签除外。
所以FBML字串Hello,welcome toFetterman'sbooks！在渲染成HTML时，实际上是保持不变的。
数据显示标签
这里是体现数据威力的地方。假定个人简介照片不能转到其他站
点。通过指定，开发者就可以在他们
的应用中显示更多的Facebook用户信息，同时不要求用户完全信任
开发者，将这部分信息交给并发者处理。
例如：
翻译成FBML：
="*"=,=u.= >
Fetterman"title="Dave Fetterman"/ >
注意：复杂的onclick属性在生成时会在Facebook页面显示中限制
Javascript。
请注意，即使信息受到了保护，这些内容也不会返回到应用栈中，
只是显示给用户看。在容器端执行使这些数据可以查看，但不要求
将它们交给应用程序！
数据执行标签
1023
---
## Page 1025
作为使用隐藏数据的一个更好的例子，用户的隐私限制只能通过内
部的can_see方法来访问，它是应用体验的一个重要部分，但不能通
过数据服务从外面进行访问。利用标签和其他类
似的标签，应用可以通过属性来指定一个目标用户，这样只有当查
看者能够看到目标用户的特定内容时，那些子元素才会渲染出来。
因此，隐私数据本身不会暴露给应用，同时应用又能满足强制实现