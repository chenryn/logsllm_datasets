和 *template*。mount
条目用于创建层级并将层级挂载为虚拟文件系统，并且将管控器附加到这些层级中。Red
Hat Enterprise Linux 7 中， 默认层级会被自动挂载到
`/sys/fs/cgroup/`{.filename} 目录，因此，`cgconfig`{.systemitem}
被用来单独附载非默认的管控器。mount 条目通过以下句法定义：
:::
``` programlisting
mount {
    controller_name = /sys/fs/cgroup/controller_name;
    …
}
```
::: para
用您希望挂载到层级的 kernel
资源管控器名称来替换*controller_name*。示例请参见 [例 3.1
"创建挂载条目"](#chap-Using_libcgroup_Tools.html#example-mount-entry){.xref}。
:::
::: example
[⁠]{#chap-Using_libcgroup_Tools.html#example-mount-entry}
**例 3.1. 创建挂载条目**
::: example-contents
::: para
如要将 `net_prio`{.systemitem} 管控器附加到默认 cgroup
树中，请将下列字符添加到 `/etc/cgconfig.conf`{.filename} 配置文件：
:::
``` programlisting
mount {
    net_prio = /sys/fs/cgroup/net_prio;
}
```
::: para
然后重启 `cgconfig`{.systemitem} 服务来应用这些设置：
:::
``` synopsis
systemctl restart cgconfig.service
```
:::
:::
::: para
`/etc/cgconfig.conf`{.filename}
中的组条目可以用来设定资源管控器的参数。更多组条目的信息，请参阅〈[第 3.5 节
"设定 cgroup
参数"](#chap-Using_libcgroup_Tools.html#sec-Setting_Cgroup_Parameters){.xref}〉。
:::
::: para
`/etc/cgconfig.conf`{.filename}
中的样板条目可以用来创建组定义，这个组定义将应用于所有进程。
:::
### [⁠]{#chap-Using_libcgroup_Tools.html#sec-Using_the_mount_Command}使用挂载指令
::: para
`mount`{.command} 指令可以用于临时挂载层级。如需这样做，请先在
`/sys/fs/cgroup/`{.filename}
目录中创建一个挂载点，[**systemd**]{.application}
将在此目录中挂载主要资源管控器。请以 `root`{.systemitem} 身份输入:
:::
``` synopsis
mkdir /sys/fs/cgroup/name
```
::: para
请用新挂载目标的名称替代 *name*，通常是用管控器的名称。接下来，执行
`mount`{.command} 指令来挂载层级，同时附载一个或更多子系统。以
`root`{.systemitem} 身份来输入:
:::
``` synopsis
mount -t cgroup -o controller_name none /sys/fs/cgroup/controller_name
```
::: para
用管控器的名称取代 *controller_name*
来具体说明被挂载的设备和目标文件夹。`-t cgroup`{.option}
参数可以明确挂载的类型。
:::
::: example
[⁠]{#chap-Using_libcgroup_Tools.html#attaching_subsystems_with_mount}
**例 3.2. 使用挂载指令来附加控制器**
::: example-contents
::: para
如要使用 `mount`{.command} 指令给 `net_prio`{.systemitem}
管控器挂载层级，请先创建挂载节点：
:::
``` synopsis
~]# mkdir /sys/fs/cgroup/net_prio
```
::: para
然后将 `net_prio`{.systemitem} 挂载到您之前创建的目标中。
:::
``` synopsis
~]# mount -t cgroup -o net_prio none /sys/fs/cgroup/net_prio
```
::: para
通过 `lssubsys`{.command}
指令（参见〈["将管控器列表"一节](#chap-Using_libcgroup_Tools.html#Listing_Controllers){.xref}〉），将所有可用层级沿当前挂载节点列表，您就可以验证是否正确附加了层级：
:::
``` screen
~]# lssubsys -am
cpuset /sys/fs/cgroup/cpuset
cpu,cpuacct /sys/fs/cgroup/cpu,cpuacct
memory /sys/fs/cgroup/memory
devices /sys/fs/cgroup/devices
freezer /sys/fs/cgroup/freezer
net_cls /sys/fs/cgroup/net_cls
blkio /sys/fs/cgroup/blkio
perf_event /sys/fs/cgroup/perf_event
hugetlb /sys/fs/cgroup/hugetlb
net_prio /sys/fs/cgroup/net_prio
```
:::
:::
:::
::: section
::: titlepage
# [⁠]{#chap-Using_libcgroup_Tools.html#sec-Unmounting_a_Hierarchy}3.2. 卸载层级 {.title}
:::
::: para
如果您通过编写 `/etc/cgconfig.conf`{.filename}
配置文件挂载了一个层级，那您可以很简单地，从此配置文件的
[*mount*]{.emphasis}
部分移除配置指令来卸载它。然后重启服务以应用新的配置。
:::
::: para
同样，您可以以 `root`{.systemitem} 身份执行以下指令来卸载层级：
:::
``` screen
~]# umount /sys/fs/cgroup/controller_name
```
::: para
用包含您希望分离的资源管控器的层级名称来替换 *controller_name*。
:::
::: {.warning xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**警告**
:::
::: admonition
::: para
请确保只使用 `umount`{.command}
来移除您自己手动挂载的层级。分离包含默认管控器（参见 [Red Hat Enterprise
Linux 7
中可用的管控器](#chap-Introduction_to_Control_Groups.html#itemlist-Available_Controllers_in_Red_Hat_Enterprise_Linux_7){.xref}）的层级很可能会导致异常，并需要重启。
:::
:::
:::
:::
::: section
::: titlepage
# [⁠]{#chap-Using_libcgroup_Tools.html#sec-Creating_Cgroups-libcgroup}3.3. 创建控制群组 {.title}
:::
::: para
在您自己创建的层级中，您可以使用 `cgcreate`{.command} 指令来创建临时
cgroup。`cgcreate`{.command} 的句法是:
:::
``` screen
cgcreate -t uid:gid -a uid:gid -g controllers:path
```
::: para
其中：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    `-t`{.option}（可选）------ 指定一个用户（通过用户
    ID：uid）和群组（通过群组 ID：gid）来拥有此 cgroup 的
    `tasks`{.filename} 伪文件。此用户可在该 cgroup 中添加任务。
    :::
    ::: note
    ::: admonition_header
    **移除进程**
    :::
    ::: admonition
    ::: para
    请注意，从 cgroup 中移除进程的唯一方法是将进程移至另一个
    cgroup。如想要移除进程，用户必须拥有 [*"目标"*]{.emphasis} cgroup
    的写入权限；但是源 cgroup 的写入权限并不重要。
    :::
    :::
    :::
-   ::: para
    `-a`{.option}（可选）------ 指定一个用户（通过用户
    ID：uid）和群组（通过群组 ID：gid）来拥有此 cgroup
    的全部伪文件而不是 `tasks`{.filename} 。此用户可以修改 cgroup
    中任务存取系统资源的权限。
    :::
-   ::: para
    `-g`{.option} ------ 指定 cgroup
    应该被建于其中的层级，类似于"*管控器*"和这些层级的列表（以逗号分隔）。管控器的此项列表之后是一个冒号以及相对层级的子群组"*路径*"。请不要将层级挂载点包含于路径中。
    :::
:::
::: para
同一层级中的所有 cgroup
有同一个管控器，所以子群组与其父群组的管控器也相同。
:::
::: para
或者，您可以使用 `mkdir`{.command} 指令直接给此 cgroup 创建一个子
cgroup：
:::
``` screen
~]# mkdir /sys/fs/cgroup/controller/name/child_name
```
::: para
例如：
:::
``` screen
~]# mkdir /sys/fs/cgroup/net_prio/lab1/group1
```
:::
::: section
::: titlepage
# [⁠]{#chap-Using_libcgroup_Tools.html#sec-Removing_Cgroups-libcgroup}3.4. 删除控制群组 {.title}
:::
::: para
可以用与 `cgcreate`{.command} 句法相似的 `cgdelete`{.command} 指令来移除
cgroup。请以 `root`{.systemitem} 身份运行以下指令:
:::
``` screen
cgdelete controllers:path
```
::: para
其中：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    *controller* 是管控器的逗号分隔清单。
    :::
-   ::: para
    *path* 是与该层级的根相对的 cgroup 路径。
    :::
:::
::: para
例如：
:::
``` screen
~]# cgdelete net_prio:/test-subgroup
```
::: para
指定 `-r`{.option} 选项时，`cgdelete`{.command}
也可以递归式移除所有子群组。
:::
::: para
请注意，当您删除一个 cgroup，它的全部进程会移动到其父群组。
:::
:::
::: section
::: titlepage
# [⁠]{#chap-Using_libcgroup_Tools.html#sec-Setting_Cgroup_Parameters}3.5. 设定 cgroup 参数 {.title}
:::
::: para
如要修改控制群组参数，您可以编写 `/etc/cgconfig.conf`{.filename}
或者使用 `cgset`{.command} 指令。 重启后，对
`/etc/cgconfig.conf`{.filename}
的更改也将保留并运行，但是`cgset`{.command} 仅能对当前会话的 cgroup
参数做出修改。
:::
### [⁠]{#chap-Using_libcgroup_Tools.html#sec-Modifying_cgconfig.conf}修改 /etc/cgconfig.conf
::: para
您可以在 `/etc/cgconfig.conf`{.filename} 的 [*Groups*]{.emphasis}
部分设定管控器参数。 组条目使用以下句法定义：
:::
``` programlisting
group name {
[permissions]
    controller {
        param_name = param_value;
        …
    }
    …
}
```
::: para
请用您 cgroup 的名字替代 *name*， *controller*
代表您希望修改的管控器名称。这应当是一个您自己挂载的管控器，而不是
[**systemd**]{.application}
自动挂载的默认管控器。用您希望更改的管控器参数和其新数值替代
*param_name* 和 *param_value*。请注意，`permissions`{.literal}
部分是可选择项。如要给组条目定义权限，请使用以下句法：
:::
``` programlisting
perm {
    task {
        uid = task_user;
        gid = task_group;
    }
    admin {
       uid = admin_name;
       gid = admin_group;
    }
}
```
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**请重启 cgconfig 服务让更改生效**
:::
::: admonition
::: para
请重启 `cgconfig`{.systemitem} 服务，让 `/etc/cgconfig.conf`{.filename}
的更改生效。重启此服务会重建配置文件中指定的层级，但并不会影响所有挂载层级。您可以通过执行
`systemctl restart`{.command} 指令来重启服务，但是，建议您先停止
`cgconfig`{.systemitem}：
:::
``` screen