用于对两个操作数栈上的值进行某种特定运算，并把结果重新存入到操作栈顶
- 加法指令：iadd、ladd、fadd、dadd
- 减法指令：isub、lsub、fsub、dsub
- 乘法指令：imul、lmul、fmul、dmul
- 除法指令：idiv、ldiv、fdiv、ddiv
- 求余指令：irem、lrem、frem、drem
- 取反指令：ineg、lneg、fneg、dneg
- 位移指令：ishl、ishr、iushr、lshl、lshr、lushr
- 按位或指令：ior、lor
- 按位与指令：iand、land
- 按位异或指令：ixor、lxor
- 局部变量自增指令：iinc
- 比较指令：dcmpg、dcmpl、fcmpg、fcmpl、lcmp
#### 类型转换指令
Java虚拟机直接支持（即转换时无须显式的转换指令）的宽化类型转换
窄化转换：i2b、i2c、i2s、l2i、f2i、f2l、d2i、d2l和d2f
#### 对象/数组创建与访问指令
- 创建类实例的指令：new
- 创建数组的指令：newarray、anewarray、multianewarray
- 访问类字段（static字段，或者称为类变量）和实例字段（非static字段，或者称为实例变量）的
指令：getfield、putfield、getstatic、putstatic
- 把一个数组元素加载到操作数栈的指令：baload、caload、saload、iaload、laload、faload、daload、aaload
- 将一个操作数栈的值储存到数组元素中的指令：bastore、castore、sastore、iastore、fastore、dastore、aastore
- 取数组长度的指令：arraylength
- 检查类实例类型的指令：instanceof、checkcast
#### 操作数栈管理指令
直接操作操作数栈的指令
- 将操作数栈的栈顶一个或两个元素出栈：pop、pop2
- 复制栈顶一个或两个数值并将复制值或双份的复制值重新压入栈顶：dup、dup2、dup_x1、dup2_x1、dup_x2、dup2_x2
- 将栈最顶端的两个数值互换：swap
#### 控制转移指令
有条件或无条件地从指定位置指令（而不是控制转移指令）的下一条指令继续执行程序，概念模型上理解，可以认为控制指令就是在有条件或无条件地修改PC寄存器的值
- 条件分支：ifeq、iflt、ifle、ifne、ifgt、ifge、ifnull、ifnonnull、if_icmpeq、if_icmpne、if_icmplt、if_icmpgt、if_icmple、if_icmpge、if_acmpeq和if_acmpne
- 复合条件分支：tableswitch、lookupswitch
- 无条件分支：goto、goto_w、jsr、jsr_w、ret
#### 方法调用和返回指令
- invokevirtual指令：用于调用对象的实例方法，根据对象的实际类型进行分派（虚方法分派），这也是Java语言中最常见的方法分派方式。
- invokeinterface指令：用于调用接口方法，它会在运行时搜索一个实现了这个接口方法的对象，找出适合的方法进行调用。
- invokespecial指令：用于调用一些需要特殊处理的实例方法，包括实例初始化方法、私有方法和父类方法。
- invokestatic指令：用于调用类静态方法（static方法）。
- invokedynamic指令：用于在运行时动态解析出调用点限定符所引用的方法。并执行该方法。前面四条调用指令的分派逻辑都固化在Java虚拟机内部，用户无法改变，而invokedynamic指令的分派逻辑
是由用户所设定的引导方法决定的
方法返回指令是根据返回值的类型区分的，包括ireturn（当返回值是boolean、byte、char、short和int类型时使用）、lreturn、freturn、dreturn和areturn，另外还有一条return指令供声明为void的方法、实例初始化方法、类和接口的类初始化方法使用
#### 异常处理指令
- 显式抛出异常的操作（throw语句）都由athrow指令来实现
- 异常捕获现在则是使用了异常表的来完成
#### 同步控制指令
1. ACC_SYNCHRONIZED 标志同步方法
2. MONITORENTER MONITOREXIT 标记临界区
### ASM
>ASM是一个通用的Java字节码操作和分析框架
- Core API
  - 不需要读取类的整个结构，使用流式的方法来处理字节码文件
  - 编程难度较大
- Tree API
  - 消耗内存多，但是编程比较简单
  - 通过各种Node类来映射字节码的各个区域
#### 字节码增强
- java agent
  - premain：支持在main函数之前，对类的字节码进行修改/替换
  - agentmain：支持在程序运行过程中，对字节码进行替换
#### 字节码混淆
- 使反编译的代码可读性变差
- ProGuard
### javassist
- 生成类
```java
ClassPool pool = ClassPool.getDefault();
// 创建类
CtClass userClass = pool.makeClass("wang.ismy.test.User");
// 添加属性
userClass.addField(CtField.make("private String name;",userClass));
userClass.addField(CtField.make("private Integer age;",userClass));
// 添加方法
userClass.addMethod(CtMethod.make("public String getName(){return name;}",userClass));
userClass.addConstructor(new CtConstructor(new CtClass[]{pool.get("java.lang.String"),pool.get("java.lang.Integer")},userClass));
userClass.writeFile("./User.class");
```
- 修改类
```java
ClassPool pool = ClassPool.getDefault();
pool.appendClassPath(new ClassClassPath(Main.class));
CtClass userClass = pool.get("wang.ismy.assist.User");
userClass.getDeclaredMethod("getName").setBody("{return name + \"123\";}");
Class aClass = userClass.toClass();
Object obj = aClass.newInstance();
System.out.println(aClass.getMethod("getName").invoke(obj));
```
## 字节码的执行
1. 解释执行
2. 编译执行
3. JIT编译与解释混合执行
![截图录屏_选择区域_20200918145300](/assets/截图录屏_选择区域_20200918145300.png)
这样就造成机器在热机所承载的负载可能会比冷机的高
- -Xmixed 默认为混合模式
- -Xint 解释模式
- -Xcomp 纯编译模式
热点代码检测
- 多次被调用的方法 方法计数器
- 多次被被调用的循环 循环计数器
还有一种新的编译方式，即所谓的 AOT（Ahead-of-Time Compilation），直接将字节码编译成机器代码，这是 graalvm 所做的
## 代码优化
- 使用局部变量
- 减少重复计算
- 懒加载
- 异常对性能不利
- 避免创建导入不使用的对象和类
- 反射对性能不利
- 连接池和线程池有利于提高性能
- 容器初始化指定长度
- 不同的数据结构在不同操作下的性能表现不同
- 使用键值对遍历Map
- 不应手动调用GC
- 正则表达式对性能有影响
- 日志输出注意级别
- 资源close可以分开
## 实例-动态代理字节码生成
```java
public class DynamicProxyTest {
    public static void main(String[] args) {
        System.getProperties().put("sun.misc.ProxyGenerator.saveGeneratedFiles", "true");
        Run origin = new Run();
        Runnable hello = (Runnable)Proxy.newProxyInstance(Run.class.getClassLoader(), new Class[]{Runnable.class}, new InvocationHandler() {
            @Override
            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                System.out.println("hello");
                return method.invoke(origin);
            }
        });
        hello.run();
    }
}
class Run implements Runnable{
    @Override
    public void run() {
        System.out.println("world");
    }
}
```
这里newProxyInstance会生成这么样的一个代理类：
```java
public final class $Proxy0 extends Proxy implements Runnable {
    ...
    public final void run() throws  {
        try {
            super.h.invoke(this, m3, (Object[])null);
        } catch (RuntimeException | Error var2) {
            throw var2;
        } catch (Throwable var3) {
            throw new UndeclaredThrowableException(var3);
        }
    }
    ...
}
```
生成的代理类run方法会调用我们写的InvocationHandler 我们的InvocationHandler又会执行一些附带逻辑并最后执行真实对象的方法
## 实例-Backport：回到未来
>把高版本JDK中编写的代码放到低版本JDK环境中去部署使用。为了解决这个问题，一种名为“Java逆向移植”的工具（Java Backporting Tools）应运而生，Retrotranslator和Retrolambda是这类工具中的杰出代表
这些工具可以很好地移植下面两种情况：
1. 对Java类库API的代码增强
2. 在前端编译器层面做的改进。这种改进被称作语法糖
对于第一种情况 一些诸如只有高版本才有的类库移植工具可以很方便移植
但对于第二种情况，移植工具就需要通过修改字节码的方式来实现