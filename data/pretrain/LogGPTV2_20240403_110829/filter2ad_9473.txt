### 作者
[keenjoy95](http://weibo.com/ttarticle/p/show?id=2309404147420605875697)

### 引言
随着 macOS 和 iOS 的普及，mac 平台的内核监控与攻防逐渐成为热门话题。本文将介绍一些实用的内核监控方案，这些方案有助于构建一个完整的内核监控系统。

### Kernel Authorization (KAuth)
首先值得关注的是 KAuth 机制，该机制在 2005 年被引入到 Mac OS X 10.4 Tiger 内核中。苹果官方提供了详细的示例代码和文档 [1]，使得 KAuth 机制易于上手。然而，正如 Jonathan Levin 在《*OS Internals Volume III》[2] 中指出的那样，KAuth 作为内核编程接口（KPI）的一部分，缺乏细粒度的监控能力，因此在设计安全软件时会显得捉襟见肘。

例如，在使用 `KAUTH_FILEOP_EXEC` 进程监控回调时，我们只能获取进程路径，而无法获得命令行参数。类似地，在文件创建过程中，我们也无法获取 fmodep 上下文等信息。尽管存在这些限制，但通过反汇编引擎和动态栈回溯技术，我们可以提取出所需的信息。以下是一个 Google Chrome 启动时冗长的命令行参数示例：

**Google Chrome 命令行参数**

### MAC (Mandatory Access Control) Framework
在 Mac OS X 10.5 Leopard 的 SDK 中，苹果引入了一种新的监控机制——强制访问控制策略框架（MAC）。不久之后，苹果公司将其私有化，并在文档 QA1574 [3] 中明确表示第三方不应使用 MAC 机制。这意味着只有苹果公司才能调用这一相对灵活且强大的接口，如 Apple Seatbelt Sandbox [4]、TMSafetyNet（Time Machine 安全网）[5] 和 AMFI（Apple Mobile File Integrity）[6] 等。

尽管 XNU 源代码是公开的，使得 MAC Policy Framework 的使用变得简单，但如何监控系统或第三方对 MAC Framework 的使用成为一个问题。为了确保遍历系统内部数据结构的安全性，我们需要持有未导出的锁。通过阅读 XNU 相关源代码，我们可以找到解决方案：在获取 `mac_policy_mtx` 锁后，系统为第三方驱动提供了两次持锁的回调机会，这使得我们可以安全地 dump 相关内核数据结构。

以下展示了 TMSafetyNet、Apple Mobile File Integrity 和 Apple Seatbelt Sandbox 对 MAC Policy 回调的使用情况：

**MAC Policy 回调使用情况**

此外，许多 macOS 安全监控软件也无视警告使用了这个接口，例如 objective-see 的 BlockBlock [7] 和 FireEye Mandiant 的 Monitor.app [8]。通过对 FireEye Mandiant 的 Monitor.app 进行分析，可以发现它注册了五种回调：

1. `mpo_cred_label_update_execve`
2. `mpo_file_check_mmap`
3. `mpo_pty_notify_grant`
4. `mpo_pty_notify_close`
5. `mpo_kext_check_load`

值得注意的是，这五个回调是五次独立注册的结果。出于优化考虑，可能更合理的做法是一次注册五个回调函数。回顾 Windows XP 时代，大家为了争夺 `PsSetCreateProcessNotifyRoutine` 的 8 个名额而竞争激烈，现在的内核程序员确实更加奢侈。

### Kernel Inline Hook
由于 macOS 内核没有类似于 Patchguard [10] 的防护机制，实现一个 Inline Hook 引擎并不是难事。我们可以为目标函数实现 Pre 和 Post Callback 回调，Pre Callback 用于参数过滤，Post Callback 用于结果篡改，这种设计非常方便。

以下是一个以 `OSKext::start()` 驱动加载例程为例的演示：

1. 钩子监控到驱动程序被加载。
2. 结合反汇编引擎找到目标驱动入口。
3. 在 Pre Callback 中实现参数过滤、驱动代码篡改、强制错误返回等。
4. 在 Post Callback 中获取返回值，并进行再次篡改。
5. 系统后知后觉。

当然，我们可以对任意关心的内核函数进行这样的操作，Inline Hook 的使用仅受制于想象力。

### 小结
1. 上述功能点在开发 Rootkit 和 Anti-Rootkit 以及调试漏洞时都非常有用。
2. 祝您 lldb 内核调试愉快。

### 引用
[1] 
[2] 
[3] 
[4]
[5] 
[6] 
[7] 
[8] 
[9] 
[10] 

---

通过以上优化，文本变得更加清晰、连贯和专业。希望这些改进能够帮助您更好地传达您的观点。