title:BEADS: Automated Attack Discovery in OpenFlow-Based SDN Systems
author:Samuel Jero and
Xiangyu Bu and
Cristina Nita-Rotaru and
Hamed Okhravi and
Richard Skowyra and
Sonia Fahmy
BEADS: Automated Attack Discovery
in OpenFlow-Based SDN Systems
Samuel Jero1(B), Xiangyu Bu1, Cristina Nita-Rotaru2, Hamed Okhravi3,
Richard Skowyra3, and Sonia Fahmy1
1 Purdue University, West Lafayette, IN, USA
{sjero,bu1,fahmy}@purdue.edu
2 Northeastern University, Boston, MA, USA
PI:EMAIL
3 MIT Lincoln Laboratory, Lexington, MA, USA
{hamed.okhravi,richard.skowyra}@ll.mit.edu
Abstract. We create BEADS, a framework to automatically generate
test scenarios and ﬁnd attacks in SDN systems. The scenarios capture
attacks caused by malicious switches that do not obey the OpenFlow
protocol and malicious hosts that do not obey the ARP protocol. We
generated and tested almost 19,000 scenarios that consist of sending mal-
formed messages or not properly delivering them, and found 831 unique
bugs across four well-known SDN controllers: Ryu, POX, Floodlight, and
ONOS. We classify these bugs into 28 categories based on their impact;
10 of these categories are new, not previously reported. We demonstrate
how an attacker can leverage several of these bugs by manually creat-
ing 4 representative attacks that impact high-level network goals such as
availability and network topology.
1 Introduction
Software-deﬁned networking (SDN) is an attractive alternative to traditional
networking, oﬀering beneﬁts for large enterprise and data-center networks. In
SDNs, the control and management of the network (i.e., the control plane) is
separated from the delivery of data to the destinations (i.e., the data plane). Such
a separation oﬀers enhanced manageability, ﬂexibility, and programmability to
the network administrators, enabling them to perform better resource allocation,
centralized monitoring, and dynamic network reconﬁguration.
DISTRIBUTION STATEMENT A. Approved for public release: distribution unlim-
ited. This material is based upon work supported by the Department of Defense
under Air Force Contract No. FA8721-05-C-0002 and/or FA8702-15-D-0001. Any
opinions, ﬁndings, conclusions or recommendations expressed in this material are
those of the author(s) and do not necessarily reﬂect the views of the Department of
Defense.
Electronic supplementary material The online version of this chapter (doi:10.
1007/978-3-319-66332-6 14) contains supplementary material, which is available to
authorized users.
c(cid:2) Springer International Publishing AG 2017
M. Dacier et al. (Eds.): RAID 2017, LNCS 10453, pp. 311–333, 2017.
DOI: 10.1007/978-3-319-66332-6 14
312
S. Jero et al.
SDN’s beneﬁts, however, come at a cost to security. The programmability
and malleability of the network presents new attack surfaces. In addition to the
network-based attacks applicable to traditional networks, new attack vectors
are available to an attacker to maliciously impact the network functionality by
manipulating, poisoning, or abusing the malleable network logic. For example,
we show that ARP spooﬁng attacks have broader impact in SDNs because of the
centralized control. In particular, many controllers maintain a centralized ARP
cache and implement Proxy ARP to resolve ARP queries, making the impact of
poisoning this cache much broader than in traditional networks.
Recent eﬀorts at the intersection of SDN and security have focused on devel-
oping new languages for SDN programming, some of which oﬀer formally ver-
iﬁable guarantees [9,15,30,43], such as ﬂow rule consistency [16,18,40]. Some
work has focused on possible attacks from the data plane to control plane and
vice versa [44]. Protocol-level attacks and corresponding defenses have also been
studied [7,10,16,42]. Finally, the dynamism and agility oﬀered by SDNs has
been leveraged to build new defenses [11,13,25]. Several of these approaches
have identiﬁed speciﬁc attacks in the context of SDNs [7,10,16,38,42,44]. These
eﬀorts highlight the need for systematic approaches to ﬁnd attacks in SDNs.
In order to systematize OpenFlow testing, the Open Networking Foundation
created conformance test documents for OpenFlow 1.0.1 [32] and 1.3.4 [34]. Fol-
lowing these documents, the SDN community started two projects, OFTest [8]
and FLORENCE [29]. Both of them focus only on OpenFlow switches and con-
sist of manually written tests. OFTest supports 478 manually written tests for
OpenFlow 1.0–1.4, while FLORENCE supports 18 manually written tests for
OpenFlow 1.3. Examples of tests performed are: AllPortStats, which “Verif[ies]
[that] all port stats are properly retrieved” for OFTest and Port Range test to
“Verify that the switch rejects the use of ports that are greater than OFPP MAX
and are not part of the reserved ports” for FLORENCE.
Both OFTest and FLORENCE focus on testing how well a switch conforms
to the OpenFlow speciﬁcation. However, OpenFlow is a conﬁguration protocol;
it speciﬁes how a controller instructs a switch to do something, but not what
the controller should tell the switch to do. As a result, many bugs and attacks
on SDNs arise from incorrect assumptions in the controller software about the
switches. Frameworks like OFTest and FLORENCE that exclude the controller
from the testing process are unable to ﬁnd such issues.
Further, conformance testing is not suﬃcient to detect attacks. In fact, the
Open Flow Foundation conformance testing documents explicitly state: “This
document does not include requirements or test procedures to validate security,
interoperability or performance.” Previous work on automated attack ﬁnding
on communication protocols has been conﬁned to distributed systems [23] and
transport protocols [12] which are less complex than SDN systems.
In this work, we develop BEADS, a framework to automatically and sys-
tematically test SDN systems for attacks resulting from malicious switches
and malicious hosts. Our framework automatically generates and tests thou-
sands of scenarios involving malicious switches that do not obey the OpenFlow
BEADS: Automated Attack Discovery in OpenFlow-Based SDN Systems
313
protocol and malicious hosts that do not obey the ARP protocol. BEADS com-
bines known techniques such as Byzantine fault injection, semantically-aware
testcase generation, and black box testing to test whole SDN systems compris-
ing OpenFlow switches, controllers, and hosts. As such it diﬀers from existing
SDN testing tools in the following aspects: (1) it supports malicious (Byzantine)
participants – hosts and switches; (2) it does not require access to the code of the
switch or controller; (3) it targets attacks at a deeper layer than simple parsing
(that can be tested using simple random fuzzers); (4) it achieves higher cov-
erage by using message grammar and semantically-aware test case generation;
(5) it can test controller algorithms like routing, topology detection, and ﬂow
rule management by also including the controller in its test cases; (6) it makes
better use of resources by performing targeted and preferential search. BEADS is
publicly available at https://github.com/samueljero/BEADS.
Using BEADS, we identify bugs that trigger error messages, network topology
or reachability changes, or increased load. We then show that these bugs can
be exploited with damaging impacts on SDN networks. Our results show the
importance of malicious testing for SDNs as well as the practicality of blackbox
testing for such systems. Our contributions are:
(cid:129) We create BEADS, a framework to automatically ﬁnd malicious switch-
and host-level attacks. BEADS combines network emulation with software
switches and real SDN controllers running in a virtualized environment. It
takes a blackbox approach to the SDN switches and controller and does not
require access to the source code of either. Attack scenarios are automati-
cally generated based on message grammar and the protocol semantics asso-
ciated with special ﬁelds (such as port). BEADS uses four criteria to detect
bugs: error messages, network topology changes, reachability changes, and
controller or switch load.
(cid:129) We use BEADS to automatically test almost 19,000 scenarios, and ﬁnd 831
unique bugs across four well-known SDN controllers: Ryu [45], POX [27],
ONOS [5], and Floodlight [39]. We classify these bugs into 28 categories based
on their impact; 10 of these categories have not been previously reported. Out-
comes include preventing the installation of ﬂow rules network-wide, periodic
switch disconnections, inducing packet loss in the data plane, denial of service
against the controller, and removing network links.
(cid:129) We construct and implement 4 representative attack scenarios using several
bugs we identiﬁed to break high-level network goals such as availability, reach-
ability, and network connectivity. The scenarios are (1) TLS Man-in-the-
Middle, (2) Web Server Impersonation, (3) Breaking Network Quarantine,
and (4) Deniable Denial of Service. We demonstrate the feasibility of these
attack scenarios on real SDN controllers.
(cid:129) We have notiﬁed the SDN vendors of bugs we found. Ryu has issued a patch
(CD2,CD3 in Table 2) while ONOS has conﬁrmed that the latest version is
no longer impacted (EP1 in Table 2).
Roadmap. Section 2 speciﬁes the threat models. Section 3 describes the design
of BEADS. Section 4 discusses the bugs we found and presents our attack
314
S. Jero et al.
demonstrations. Section 5 discusses some limitations of BEADS while Sect. 6
summarizes related work and Sect. 7 concludes the paper.
2 Threat Model
We consider a threat model where the attacker can control compromised SDN
switches or end-hosts connected to the SDN. We consider malicious switches
because prior work has shown that many SDN switches can be easily compro-
mised due to running operating systems with poor security defaults, out of date
software, and minimal updates [35,36] and, once compromised, they can inﬂu-
ence the entire control plane. Note that if communication is not conducted over
secure channels, a man-in-the-middle attacker can control otherwise uncompro-
mised switches and hosts. We do not consider malicious controllers.
Malicious Switches. Attackers who have compromised an OpenFlow switch can
confuse SDN controllers via malicious OpenFlow messages. This ability is unique
to SDNs and can confuse the controller about the network topology and the loca-
tions of target hosts [7,10]. Additionally, a malicious OpenFlow switch can mount
a DoS attack against the controller by sending OpenFlow messages, spoofed or
legitimate, at a very high rate. Some controllers enforce per-switch OpenFlow
rate limits in an attempt to mitigate this type of attack [7]. Recent work has
shown that OpenFlow switches are extremely vulnerable to attackers, running
old, unsecured software versions with default/hidden administrator accounts,
out of date software, and minimal updates [35,36].
Our analysis focuses on how malicious switches can disrupt or degrade other
parts of the network (e.g., QoS on other switches or making the controller redi-
rect distant traﬃc through a compromised switch) via the control-plane. Thus,
we do not consider pure data-plane attacks (e.g., dropping packets). We model
malicious switches as having the following basic capabilities with respect to
OpenFlow messages between the switch and controller:
Drop (percentage). This action drops a particular type of OpenFlow message
with a given probability speciﬁed as a parameter, for example barrier request
drop 20. This emulates a malicious switch that does not send these messages or
ignores them after receiving them.
Duplicate (times). This action duplicates a particular type of OpenFlow mes-
sage a certain number of times given as a parameter. For example barrier reply
duplicate 5 means the malicious switch duplicates this messages 5 times.
Delay (msec). This action delays a particular type of OpenFlow message by a
given number of milliseconds, emulating a malicious switch that delays process-
ing a request or taking some action; for example, of hello delay 1000.
Change (ﬁeld, value). This action modiﬁes a particular ﬁeld of a particular
type of OpenFlow message with a particular value. Modiﬁcations supported
include setting a particular value as well as adding or subtracting a constant. We
BEADS: Automated Attack Discovery in OpenFlow-Based SDN Systems
315
select the modiﬁcation values to be likely to trigger problems based on the ﬁeld
type. This typically includes values like 0, minimum ﬁeld value, and maximum
ﬁeld value. This basic strategy corresponds to a malicious switch that performs
a diﬀerent action or returns diﬀerent information than that requested by the
controller. Examples of this action include flow add change priority 42 or
flow removed change reason 12.
Malicious Local Hosts. Attackers who have compromised a host that is directly
connected to an SDN, like a server or a user workstation, can launch attacks
to confuse the SDN controller about the network topology and the location of
target hosts, in order to hijack a target host or traﬃc of interest [7,10]. These are
primarily attacks that target the Address Resolution Protocol (ARP) [37] since
ARP is one of the few protocols that hosts can use to manipulate the SDN control
plane. Prior work has also pointed out that hosts can inject or tunnel LLDP
packets [7,10]. However, we need not separately consider such hosts because
they appear to the network as malicious switches, which we already consider.
For ARP, SDN has brought back known vulnerabilities because, while tra-
ditional networks have deployed defenses against ARP spooﬁng, these defenses
have not been adapted for SDNs. Unlike traditional network switches that main-
tain their own local ARP tables, operate on L2/L3 networks, and can be checked
to prevent ARP poisoning attacks, SDN switches consist of a programmable ﬂow
table and leave the SDN controllers to check for ARP corruption. Such controllers
do not currently implement ARP spooﬁng defenses. Moreover, some controllers
(including POX and ONOS) maintain a centralized ARP cache and implement
Proxy ARP to resolve ARP queries. This creates a single, centralized ARP cache
for the entire network. Poisoning this cache has broader network-wide impact
rather than limited subnetwork-wide impact as in traditional networks.
We model malicious or compromised local hosts as follows:
ARP-location-injection (victim-MAC, victim-IP). The malicious host
injects ARP packets with the spoofed Ethernet source address of the victim to
make the controller believe that the victim is at the same port as the attacker.
Example: ARP-location-injection 00:00:00:00:00:04 10.0.0.4.
ARP-map-injection (attacker-MAC, victim-IP). The malicious host
injects ARP packets that indicate a mapping between the victim’s IP and the
attacker’s MAC. This disrupts the IP-to-MAC mapping, and leads the controller
to believe that the attacker has the victim’s IP address. An example of this attack
would be ARP-map-injection 00:00:00:00:00:01 10.0.0.4.
3 BEADS Design and Implementation
We ﬁrst describe the design principles behind BEADS and then provide more
details about each component.
316
S. Jero et al.
3.1 Design Goals
There are several guiding principles behind BEADS: automation of attack gen-
eration and attack search, realism by testing real-world implementations of com-
plete SDN systems generalizable to many diﬀerent implementations independent
of language and operating system, reproducibility of the results, high coverage of
test scenarios, eﬃcient use of resources, and last but not least, focus on security
(rather than conformance) by supporting malicious switches and hosts.
Our main goal is to test real-world implementations of complete SDN sys-
tems. This requires including switches, controllers, and hosts in our tests to be
able to capture their interplay. Similarly, our tests would ideally include the
physical hardware and operating systems running the various system nodes, the
production network connecting the physical hardware, and the actual applica-
tion binaries running on the operating systems. However, using physical hard-
ware to test all possible conﬁgurations and operating systems is not scalable
and prohibitively expensive. We address this challenge by choosing a virtualized