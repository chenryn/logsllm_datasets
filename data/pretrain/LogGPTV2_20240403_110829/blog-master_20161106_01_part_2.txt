    -fif-conversion -fif-conversion2 -findirect-inlining -finline-functions -finline-functions-called-once -finline-limit=n -finline-small-functions -fipa-cp -fipa-cp-clone -fipa-pta -fipa-profile -fipa-pure-const
    -fipa-reference -fira-algorithm=algorithm -fira-region=region -fira-hoist-pressure -fira-loop-pressure -fno-ira-share-save-slots -fno-ira-share-spill-slots -fira-verbose=n -fivopts -fkeep-inline-functions
    -fkeep-static-consts -floop-block -floop-interchange -floop-strip-mine -floop-nest-optimize -floop-parallelize-all -flto -flto-compression-level -flto-partition=alg -flto-report -fmerge-all-constants -fmerge-constants
    -fmodulo-sched -fmodulo-sched-allow-regmoves -fmove-loop-invariants fmudflap -fmudflapir -fmudflapth -fno-branch-count-reg -fno-default-inline -fno-defer-pop -fno-function-cse -fno-guess-branch-probability -fno-inline
    -fno-math-errno -fno-peephole -fno-peephole2 -fno-sched-interblock -fno-sched-spec -fno-signed-zeros -fno-toplevel-reorder -fno-trapping-math -fno-zero-initialized-in-bss -fomit-frame-pointer -foptimize-register-move
    -foptimize-sibling-calls -fpartial-inlining -fpeel-loops -fpredictive-commoning -fprefetch-loop-arrays -fprofile-report -fprofile-correction -fprofile-dir=path -fprofile-generate -fprofile-generate=path -fprofile-use
    -fprofile-use=path -fprofile-values -freciprocal-math -free -fregmove -frename-registers -freorder-blocks -freorder-blocks-and-partition -freorder-functions -frerun-cse-after-loop -freschedule-modulo-scheduled-loops
    -frounding-math -fsched2-use-superblocks -fsched-pressure -fsched-spec-load -fsched-spec-load-dangerous -fsched-stalled-insns-dep[=n] -fsched-stalled-insns[=n] -fsched-group-heuristic -fsched-critical-path-heuristic
    -fsched-spec-insn-heuristic -fsched-rank-heuristic -fsched-last-insn-heuristic -fsched-dep-count-heuristic -fschedule-insns -fschedule-insns2 -fsection-anchors -fselective-scheduling -fselective-scheduling2
    -fsel-sched-pipelining -fsel-sched-pipelining-outer-loops -fshrink-wrap -fsignaling-nans -fsingle-precision-constant -fsplit-ivs-in-unroller -fsplit-wide-types -fstack-protector -fstack-protector-all
    -fstack-protector-strong -fstrict-aliasing -fstrict-overflow -fthread-jumps -ftracer -ftree-bit-ccp -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-inline-vars -ftree-coalesce-vars -ftree-copy-prop
    -ftree-copyrename -ftree-dce -ftree-dominator-opts -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-if-convert -ftree-loop-if-convert-stores -ftree-loop-im -ftree-phiprop -ftree-loop-distribution
    -ftree-loop-distribute-patterns -ftree-loop-ivcanon -ftree-loop-linear -ftree-loop-optimize -ftree-parallelize-loops=n -ftree-pre -ftree-partial-pre -ftree-pta -ftree-reassoc -ftree-sink -ftree-slsr -ftree-sra
    -ftree-switch-conversion -ftree-tail-merge -ftree-ter -ftree-vect-loop-version -ftree-vectorize -ftree-vrp -funit-at-a-time -funroll-all-loops -funroll-loops -funsafe-loop-optimizations -funsafe-math-optimizations
    -funswitch-loops -fvariable-expansion-in-unroller -fvect-cost-model -fvpt -fweb -fwhole-program -fwpa -fuse-ld=linker -fuse-linker-plugin --param name=value -O  -O0  -O1  -O2  -O3  -Os -Ofast -Og
```
gcc常用优化开关  
```
-O3 -flto
参考 https://www.postgresql.org/message-id/PI:EMAIL  
```
## clang编译PostgreSQL
```
CC=/u02/digoal/llvm/bin/clang CFLAGS="-O2 -fstrict-enums -fno-signed-zeros" ./configure --prefix=/u02/digoal/soft_bak/pgsql9.5
CC=/u02/digoal/llvm/bin/clang make world -j 32
CC=/u02/digoal/llvm/bin/clang make install-world
```
## 性能对比测试
clang 3.9.0对比gcc 6.2.0编译的PostgreSQL。   
避免IO瓶颈，使用内存较大的主机，观察profile。      
### select
1000万记录，全内存命中，基于主键查询压测。400连接。     
```
$ psql
create table test(id int primary key, info text, crt_time timestamp);
insert into test select generate_series(1,10000000);
$ vi test.sql
\set id random(1, 10000000)
SELECT * FROM test where id=:id; 
$ pgbench -M prepared -n -f ./test.sql -h xxx.xxx.xxx.xxx -p 1921 -c 400 -j 400 -T 120
```
测试结果  
```
-- gcc 6.2.0
tps
1124951
profile
61962.00 10.9% GetSnapshotData               /home/digoal/pgsql9.6_gcc/bin/postgres
20189.00  3.6% _bt_compare                   /home/digoal/pgsql9.6_gcc/bin/postgres
16353.00  2.9% hash_search_with_hash_value   /home/digoal/pgsql9.6_gcc/bin/postgres
14725.00  2.6% AllocSetAlloc                 /home/digoal/pgsql9.6_gcc/bin/postgres
13601.00  2.4% SearchCatCache                /home/digoal/pgsql9.6_gcc/bin/postgres
11787.00  2.1% LWLockAttemptLock             /home/digoal/pgsql9.6_gcc/bin/postgres
-- clang 3.9.0
tps
1120610
profile
61727.00 10.8% GetSnapshotData             /home/digoal/pgsql9.6/bin/postgres
19754.00  3.5% _bt_compare                 /home/digoal/pgsql9.6/bin/postgres
17741.00  3.1% AllocSetAlloc               /home/digoal/pgsql9.6/bin/postgres
15902.00  2.8% hash_search_with_hash_value /home/digoal/pgsql9.6/bin/postgres
13122.00  2.3% LWLockAcquire               /home/digoal/pgsql9.6/bin/postgres
```
### insert
一张表，一个自增序列以及索引，并发插入，异步提交。  
```
$ psql
create table test(id serial primary key, info text, crt_time timestamp) with (autovacuum_enabled=off);
alter sequence test_id_seq cache 100000;
$ vi test.sql
insert into test(info) values (null);
$ pgbench -M prepared -n -P 1 -f ./test.sql -h xxx.xxx.xxx.xxx -p 1921 -c 128 -j 128 -T 120
```
测试结果  
```
-- gcc 6.2.0
tps
356761
profile
-- clang 3.9.0
tps
372643
profile
```
### update
1000万记录，全内存命中，基于主键查询更新，异步提交。   
```
$ psql
create table test(id int primary key, info text, crt_time timestamp) with (fillfactor=90);
insert into test select generate_series(1,10000000);
$ vi test.sql
\set id random(1, 10000000)
update test set info=info where id=:id;
$ pgbench -M prepared -n -f ./test.sql -h xxx.xxx.xxx.xxx -p 1921 -c 64 -j 64 -T 120
```
测试结果  
```
-- gcc 6.2.0
tps
273016
profile
-- clang 3.9.0
tps
283776
profile
```
### copy bulk
一张表，一个索引，并发COPY，异步提交。  
```
$ psql
create table test(id int , info text, crt_time timestamp) with (autovacuum_enabled=off);
create index idx on test(id);
copy (select id,null,null from generate_series(1,100000) t(id)) to '/home/digoal/test.csv';
$ vi test.sql
copy test from '/home/digoal/test.csv';
pgbench -M prepared -n -r -P 1 -f ./test.sql -c 16 -j 16 -h /u01/digoal/pg_root1921 -p 1921 -T 100
```
测试结果  
```
-- gcc 6.2.0
tps
17.81
profile
-- clang 3.9.0
tps
18.146376
profile
```
## 如何诊断瓶颈
[《Greenplum PostgreSQL --enable-profiling 产生gprof性能诊断代码》](../201601/20160125_01.md)  
[《PostgreSQL 代码性能诊断之 - OProfile & Systemtap》](../201505/20150509_01.md)  
## 参考
1\. http://www.kitware.com/blog/home/post/1016  
2\. http://grokbase.com/t/postgresql/pgsql-hackers/10bggd42rt/gcc-vs-clang  
3\. http://llvm.org/releases/download.html  
4\. http://www.tuicool.com/articles/Yz2Q7nz  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")