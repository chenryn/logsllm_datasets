information about how these bytes are used by the intrusion
detection sensor. In particular, in this section we explore
the approach we use to extract simple byte comparisons
(called basic constraints) as well as the approach we use to
reverse-engineer the automata used by the string matching
process.
3.1. Basic Constraints
A basic constraint is a relationship between a value from
the attack stream and a constant value that was observed to
hold for the execution trace. The value in the attack stream
can be a byte, a 16-bit short integer, or a 32-bit long integer.
For example, a constraint could specify that the 16-bit short
value in the UDP header that represents the destination port
was used in an equality comparison with the constant ‘53’.
It is important to note that a comparison operation is
used to generate a basic constraint only when the labeled
operand directly depends on the input. In addition, it is re-
quired that each byte of the operand value depends on only
a single input byte (i.e., the label set associated with each
byte contains only a single label). These restrictions en-
sure that we only generate a constraint when a change in
the input value gets directly reﬂected in the operand of the
corresponding comparison. Otherwise, it is not possible
5555
to predict the effect of a change in the input, and the mu-
tant generation process only receives the information that
a certain input byte had some effect on the IDS’ execution
(without any indication of the exact check performed).
Basic constraints provide a valuable guidance to the mu-
tant generation process. In particular, the test generation
engine attempts to modify the attack so that the constraints
that were collected when the IDS successfully detected the
attack are violated. Of course, it is not always possible to
modify input values that are part of constraints. For exam-
ple, consider a constraint that relates the destination port of
a TCP packet to the value 25; since this constraint deter-
mines that the (mail) service is attacked, the mutant engine
cannot change the destination port value without rendering
the exploit ineffective as a consequence.
3.2. String Constraints
Figure 1. Example of the automaton recon-
struction process.
To improve the detection accuracy and reduce the false
positive rate, most intrusion detection systems use signa-
tures that, in addition to checking for constant numeric
values, also specify strings or regular expressions that are
matched against the packet payload or parts thereof.
In
such cases, the strings that are searched for cannot be eas-
ily determined by only considering basic constraints. More
precisely, the basic constraints generated as a byproduct
of the pattern-matching process usually provide no indi-
cation of which strings the sensor is actually searching for.
The situation is exacerbated by the fact that most pattern-
matching algorithms do not directly compare input bytes
with expected character values but use state machines or
shift tables to ﬁnd relevant matching strings. In these cases,
the input bytes are not directly used in comparison opera-
tions, but, instead, they are used indirectly by indexing a
state-transition matrix or a shift table. Thus, a different ap-
proach is required to extract the strings and the regular ex-
pressions that the pattern-matching component of an IDS is
searching for.
Our technique to extract strings and regular expressions
is based on the observation that most pattern-matching al-
gorithms use ﬁnite state machines, either explicitly or im-
plicitly, to perform the matching task. That is, at every
point of its analysis, the pattern matcher is in a certain state.
Whenever a new input character is checked (or consumed),
a transition is performed and the pattern matcher follows
the appropriate outgoing edge from the current state to
the next state (which, of course, can be the same state
again). The basic idea of our technique to extract string
constraints is to map out the ﬁnite state machine of the pat-
tern matcher by analyzing the execution traces associated
with the matching process. More precisely, we gradually
explore all the states and transitions of the pattern-matching
automaton.
Dynamic Reconstruction of Finite State Automata
The process of mapping out the ﬁnite state automaton used
by the NIDS is performed by sending a series of carefully
crafted packets with slightly different content. We start this
process by sending a packet with a payload that contains an
initial string composed of a sequence of identical padding
characters. Optimally, the padding character is not part of
any string that the pattern matcher searches for. However,
this is not strictly required and any character can be se-
lected, provided that repetitions of this character do not re-
sult in a matched pattern. This can easily be checked by
inspecting the detection result reported by the IDS.
The execution trace that is obtained when the pattern-
matcher processes the initial string provides the starting
point for our subsequent analysis. In particular, after the
pattern matcher has consumed a number of identical char-
acters, an additional instance of this character should not
cause a transition to another state. That is, the pattern
matcher remains in a certain state as more padding char-
acters are consumed. If this behavior can be observed in
the initial trace, we consider this state the initial point for
our analysis. Otherwise, a different padding character is
chosen.
Based on the initial state, we can start the reconstruc-
tion of the ﬁnite state machine of the pattern matcher. This
is done by injecting a single character of the input alpha-
bet into the initial string and observing the change in the
execution trace.
In particular, we record the target state
after the pattern matcher has processed the injected charac-
ter. This target state is included into our reconstruction of
the pattern-matcher automaton, and we insert an edge from
the initial state to this target state, labeled with the input
5656
character. The process is then repeated by iterating over
the remaining characters of the input alphabet, each time
recording the target state of the transition that is based on
the novel character. When a target state has not been seen
before, it is included into our state machine reconstruction.
In any case, an appropriate edge is added that connects the
current state with the target state. Whenever a state is added
to the automaton, we associate with it the string that was
sent to the pattern matcher. This string is subsequently used
to explore the outgoing transitions of the new state. Note
that although, in theory, the alphabet should contain all the
possible 256 single-byte characters, it can often be reduced
to contain only a small subset of them (e.g., the alphanu-
meric characters only).
After all possible outgoing transitions of the initial state
have been identiﬁed, the next state is examined. This pro-
cess is repeated until all states have been analyzed, and
no new states are discovered. At that point, the complete
pattern-matching automaton has been reconstructed. Final
states are identiﬁed by observing that, when reaching one
of those states, the IDS produces an alert messages.
To understand the process of mapping the states and
transitions of a ﬁnite state pattern matcher in detail, a num-
ber of questions need to be answered.
In particular, we
have to introduce our approach to deﬁne the states of the
pattern matcher and describe the mechanism to recognize
transitions.
State Recognition
The state of a pattern matcher is deﬁned as the content (val-
ues) of all memory addresses and registers that are rele-
vant for the matching process. In this deﬁnition, the term
“relevant memory addresses and registers” refers to those
locations in the virtual address space of the IDS process
that are read or written between two state transitions. Of
course, it is possible that a certain location is both read and
written (or even overwritten multiple times) between two
transitions. In these cases, only the last read or write oper-
ation is taken into account. More precisely, the content of
all relevant locations is taken as a snapshot directly before
the state transition. The rationale behind our state deﬁni-
tion is the fact that if the relevant memory content between
two execution traces is identical at the point before a state
transition, the outcome of the matching process is only de-
termined by the characters that are consumed afterwards.
In other words, the previously-consumed characters, even
if different, have lead the pattern matcher into exactly the
same state.
Unfortunately, simply including all memory addresses
and registers that are accessed into the state can be prob-
lematic. The reason is that the IDS process might also up-
date variables that are not related to, or relevant for, the in-
ternal state of the pattern matching process. For example,
consider a variable that counts the number of input bytes
that have been processed so far or pointers into the input
stream that are increased every time a new character is pro-
cessed. If these values were included into the description
of a state, identical states would be recognized as differ-
ent, thereby preventing the extraction of the desired state
machine.
To prevent irrelevant variables (i.e., variables that are not
directly related to the internal state of the pattern matcher)
from being incorrectly included into a state, two execution
traces are performed. Recall that whenever a transition of
a certain state must be analyzed, a character from the in-
put alphabet is appended to the string associated with this
state. The resulting string is then embedded into the packet
payload (using padding characters) and sent to the IDS. Fi-
nally, the execution trace is examined. To exclude unrelated
variables, this process is extended by sending the resulting
string twice instead of only once. The second time, how-
ever, the string is shifted by a few bytes. The two execution
traces are then independently used to determine the respec-
tive target states. Finally, the states are compared and all
locations (memory addresses and registers) that are differ-
ent are removed. The idea behind this procedure is that,
since the same string is sent twice, all variables that are
directly related to the pattern matching process, should be
identical. Locations that store values related to the posi-
tion inside the payload, on the other hand, differ and can be
safely removed.
It is also possible that locations that are completely un-
related to the pattern-matching process are occasionally
touched (read or written).
Including these locations into
the state is not problematic, provided that they are always
the same for a particular internal state of the ﬁnite state ma-
chine. However, we have not observed this problem in our
experiments, probably because pattern matching is usually
performance-critical, and thus implemented as succinctly
as possible in terms of memory and code.
Transition Recognition
The correct recognition of state transitions constitutes a
central part of our automaton-reconstruction process. A
transition from one state to another occurs every time a new
input character is processed (or consumed). This event is
recognized by checking for points in the execution trace
where a labeled input byte is used in a control-ﬂow deci-
sion for the ﬁrst time (i.e., as an operand of a branch in-
struction or as the target of an indirect jump/call). When
this happens, we know that a transition has occurred. In
other words, the pattern matcher has processed the labeled
byte, and moved into a new state.
By checking the execution trace for control ﬂow instruc-
tions that process a label for the ﬁrst time, we can locate
those points where the pattern-matcher transitions into new
states. Based on this information, we then extract the mem-
ory reads and writes that the IDS performs between each
5757
pair of transitions. This information provides us with the
relevant memory locations needed to determine the states
of the pattern matcher. Note that it is possible that more
than one new label is used by a certain control ﬂow instruc-
tion. This situation implies that the pattern matcher has
consumed more than a single input character before tran-
sitioning to a new state. However, no special treatment is
required. It is only necessary to record this fact by tagging
the edge in the reconstructed automaton appropriately.
Consider the example shown in Figure 1. After process-
ing the ﬁrst characters of the input stream (which are de-
noted by ‘x’), the automaton reaches a certain state (which
is shown as the start state S0 in the example). Then, the
next character of the input stream is consumed. This is
shown in Figure 1 (b), where the character is an ‘A’. To rec-
ognize the fact that the automaton processes ‘A’, we look
for the ﬁrst time a control-ﬂow decision is based on this
character. When this decision occurs, we assume that a
transition was taken, leading to a new state S1. The next
test uses the character ’B’, as shown in Figure 1 (c). The
processing of this character leads the automaton to a new
state S2. The exploration will continue further from S2.
For example, in Figure 1 (d), it is shown how the character
’A’ might lead the automaton from S2 to S1.
Assumptions and Limitations
The string constraint extraction process described pre-
viously relies on one important underlying assumption,
which states that each input byte is only considered once
for each state transition. That is, we assume that there is
a deterministic, ﬁnite state machine underlying the pattern-
matching process that checks each input byte at most once.
In other words, it is not necessary to backtrack and “undo”
previous state transitions. This assumption holds for many
important algorithms that search for single strings (such as
Boyer-Moore [5]) or multiple strings in parallel (such as
Aho-Corasick [1]). However, this assumption is not gener-
ally valid for all the algorithms used to match regular ex-
pressions.
In particular, there are two main techniques that are
used to match regular expressions. One relies on a de-
terministic, ﬁnite automaton, which is extracted from a
non-deterministic representation of the regular expression.
For pattern matchers that use this technique (e.g., Henry
Spencer’s regular expression library for C [28], which was
later utilized in Perl), our approach is capable of correctly
reconstructing the automaton. The second technique for
regular expressions matching relies on backtracking. Back-
tracking is required in cases where the regular expression
language provides an expressive power that exceeds reg-
ular languages. For example, the ability to group a sub-
expression with brackets and recall it in the same expres-
sion is not present in a regular language and hence, can-
not be realized with a ﬁnite state machine. As a result, for
pattern matchers that use backtracking (such as the Perl-
compatible regular expression libraries - PCRE [10]), our
automaton reconstruction process will not produce correct
results. In such cases, a reconstructed automaton will typi-
cally accept a superset of the actual regular expression, be-
cause it cannot model the “secondary checks” performed
via backtracking.
4. Efﬁcient Test Case Generation
Once the analysis process has determined which parts
of the trafﬁc generated by an exploit are used to detect a
certain attack, we leverage this information to generate test