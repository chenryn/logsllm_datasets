title:Solidus: Confidential Distributed Ledger Transactions via PVORM
author:Ethan Cecchetti and
Fan Zhang and
Yan Ji and
Ahmed E. Kosba and
Ari Juels and
Elaine Shi
Confidential Distributed Ledger Transactions via PVORM
Solidus:
Ethan Cecchetti
Cornell University; IC3†
PI:EMAIL
Extended Version
Fan Zhang
Cornell University; IC3†
PI:EMAIL
Yan Ji
Cornell University; IC3†
PI:EMAIL
Ahmed Kosba
University of Maryland; IC3†
PI:EMAIL
Ari Juels
Cornell Tech, Jacobs Institute; IC3†
PI:EMAIL
Elaine Shi
Cornell University; IC3†
PI:EMAIL
†Initiative for CryptoCurrencies & Contracts
ABSTRACT
Blockchains and more general distributed ledgers are becoming
increasingly popular as efficient, reliable, and persistent records of
data and transactions. Unfortunately, they ensure reliability and cor-
rectness by making all data public, raising confidentiality concerns
that eliminate many potential uses.
In this paper we present Solidus, a protocol for confidential trans-
actions on public blockchains, such as those required for asset
transfers with on-chain settlement. Solidus operates in a frame-
work based on real-world financial institutions: a modest number
of banks each maintain a large number of user accounts. Within
this framework, Solidus hides both transaction values and the trans-
action graph (i.e., the identities of transacting entities) while main-
taining the public verifiability that makes blockchains so appealing.
To achieve strong confidentiality of this kind, we introduce the
concept of a Publicly-Verifiable Oblivious RAM Machine (PVORM).
We present a set of formal security definitions for both PVORM
and Solidus and show that our constructions are secure. Finally, we
implement Solidus and present a set of benchmarks indicating that
the system is efficient in practice.
1 INTRODUCTION
Blockchain-based cryptocurrencies, such as Bitcoin, allow users to
transfer value quickly and pseudonymously on a reliable distributed
public ledger. This ability to manage assets privately and author-
itatively in a single ledger is appealing in many settings beyond
cryptocurrencies. Companies already issue shares on ledgers [26]
and financial institutions are exploring ledger-based systems for
instantaneous financial settlement.
For many of these companies, confidentiality is a major concern
and Bitcoin-type systems are markedly insufficient. Those systems
expose transaction values and the pseudonyms of transacting en-
tities, often permitting deanonymization [44]. Concerns over this
leakage are driving many financial institutions to restrict on-chain
storage to transaction digests, placing details elsewhere [12, 35, 59].
Such architectures discard the key benefits of blockchains as cen-
tralized authoritative ledgers and reduce them to little more than a
timestamping service.
The overall structure of current blockchains additionally mis-
aligns with that of the modern financial system. The direct peer-to-
peer transactions in Bitcoin and similar systems interfere with the
customer-service role and know-your-customer regulatory require-
ments of financial institutions. Instead, the financial industry is
exploring a model that we call bank-intermediated systems [35, 59].
In such systems a small number of entities—which we call banks—
manage transactions of on-chain assets on behalf of a large number
of users. For example, a handful of retail banks could use a bank-
intermediated ledger to authoritatively record stock purchases by
millions of customers. By design, bank-intermediated systems faith-
fully replicate asset flows within modern financial institutions.
While a number of bank-intermediated blockchain systems have
been proposed, e.g., [1, 25, 61], these systems either do not pro-
vide inherently strong confidentiality or do so by sequestering data
off-chain, preventing on-chain settlement. Coin mixes, e.g., [29, 40,
53, 60], and cryptocurrencies such as Monero [3] and Zcash [7] do
improve confidentiality, but with notable limitations. Coin mixes
and Monero provide only partial confidentiality, with demonstrated
weaknesses [44, 47, 56]. Zero-knowledge Succinct Non-interactive
ARguments of Knowledge (zk-SNARKs) [8], on which Zcash is
built, provide strong confidentiality. Proof generation, however, is
very expensive, requiring over a minute on a consumer machine
for Zcash [7]. While this is feasible for a single client performing
infrequent transactions, we show experimentally in this paper that
adapting zk-SNARKs to a bank-intermediated system would be pro-
hibitively expensive. zk-SNARKs also require an undesirable trusted
setup and introduce engineering complexity and cryptographic
hardness assumptions that financial institutions are reluctant to
embrace [35].
To address these concerns we present Solidus,1 a system sup-
porting strong confidentiality and high transaction rates for bank-
intermediated ledgers. Solidus not only conceals transaction values,
but also provides the much more technically challenging property
of transaction-graph confidentiality.2 This means that a transac-
tion’s sender and receiver cannot be publicly identified, even by
1The solidus was a solid gold coin in the late Roman Empire.
2Pseudonymous cryptocurrencies such as Bitcoin are often viewed as graphs where
nodes represent keys and edges transactions. The term transaction-graph confiden-
tiality means concealing the graph’s edges to guard against deanonymization attacks
exploiting its structure [44].
1
pseudonyms. They can be identified by their respective banks, but
other entities learn only the identities of the banks.
Solidus takes a fundamentally different approach to transaction-
graph confidentiality than previous systems such as Zcash. As the
technical cornerstone of Solidus, we introduce a new primitive
called Publicly-Verifiable Oblivious RAM Machine or PVORM, an
idea derived from previous work on Oblivious RAM (ORAM). In
previously proposed applications, ORAM is used by a single client
to outsource storage; only that client needs to verify the integrity of
the ORAM. In Solidus, the ORAM stores user account balances. This
means that any entity in the system must be able to verify (in zero-
knowledge) that bank B’s ORAM reflects precisely the set of valid
transactions involving B. To meet this novel requirement, a PVORM
defines a set of legal application-specific operations and all updates
must be accompanied by ZK proofs of correctness. Correctness
includes requirements that account balances remain non-negative,
that each transaction updates a single account, and so forth. We
offer a formal and general definition of PVORM and describe an
implementation incorporated into Solidus.
The introduction of PVORM provides several benefits to Solidus.
First, a PVORM can be constructed with either zk-SNARKs or NIZK
proofs based on Generalized Schnorr Proofs (GSPs) [16, 18]. GSPs
are more efficient to construct than zk-SNARKs and do not require
trusted setup, but are much slower to verify, so we explore both op-
tions. Second, unlike Zcash, Solidus’s core data structure grows only
with the number of user accounts, not the number of transactions
over the system’s lifetime. This property is especially important in
high-throughput systems and minimizes performance penalties for
injecting of “dummy” transactions to mitigate timing side-channels.
Finally, Solidus maintains all balances as ciphertexts on the ledger.
This approach supports direct on-chain settlement—a feature many
systems, like Zcash, do not aim for. It also permits decryption of
balances by authorized parties and allows users to prove their own
balances if, for example, they wish to transfer funds away from
unresponsive banks.
In addition to the PVORM component, we present a formal secu-
rity model for Solidus as a whole in the form of an ideal functionality.
This presentation may be of independent interest as a specification
of the security requirements of bank-intermediated ledger systems.
We prove the security of Solidus in this model.
Further, while Solidus targets a permissioned ledger model, it
requires only a permissioned group; it is agnostic to the implemen-
tation of the underlying ledger, whether centralized or distributed.
Therefore, we use the generic term ledger to denote a blockchain
substrate that can be instantiated in a wide variety of ways.
Our contributions can be summarized as follows:
• Bank-intermediated ledgers. Our work on Solidus represents the
first formal treatment of confidentiality on bank-intermediated
ledgers—a new architecture that closely aligns with the settle-
ment process in the modern financial system. Our work provides
a formal security model that broadly captures the requirements
of financial institutions migrating assets onto ledgers.
• PVORM. We introduce Publicly-Verifiable Oblivous RAM Machines,
a new construction derived from ORAM and suitable for enforc-
ing transaction-graph confidentiality in ledger systems. We offer
formal definitions and efficient constructions using Generalized
Schnorr Proofs.
• Implementation and Experiments. We report on our prototype im-
plementation of Solidus and present results of benchmarking ex-
preiments, demonstrating a lower bound on Solidus performence.
We also provide a performance comparison with zk-SNARKs.
Our results are not just a new technical approach to transaction-
graph confidentiality on ledgers. They also show the practicality of
bank-intermediated ledger systems with full on-chain settlement.
2 BACKGROUND
We now review existing cryptocurrency schemes and approaches
to their confidentiality. We then give some background on bank-
intermediated system modeling and describe the technical building
blocks used to achieve security and confidentiality in Solidus.
2.1 Existing Cryptocurrencies
Many popular cryptocurrencies are based on the same general trans-
action mechanism popularized by Bitcoin. Any user U may create
an account (“address” in Bitcoin) with a public/private key pair. To
transfer money, U creates a transaction T by signing a request to
send some quantity of coins to a recipient.3 Miners sequence trans-
actions and directly publish T to the blockchain, an authoritative
append-only record of transactions. Since only transactions are
recorded, to determine the balance of U, it is necessary to tally all
transactions involvingU in the entire blockchain. As a performance
optimization, many entities maintain a balance summary—called
an unspent transaction (UTXO) set in Bitcoin.
This setup publicizes all account balances and transaction details.
The only confidentiality stems from the pseudonymity of public
keys which are difficult—though far from impossible [44]—to link
to real-world identities.
To conceal balances and transaction values, Maxwell proposed a
scheme called Confidential Transactions (CT) [41]. CT operates in
a Bitcoin-like model, but publishes only Pedersen commitments of
balances. Transaction values are similarly hidden and balances are
updated using a homomorphism of the commitments and proven
non-negative using Generalized Schnorr Proofs (see below). Solidus
uses an El-Gamal-based variant of CT to conceal transaction values.
Several decentralized cryptocurrency schemes aim to provide
partial or full transaction-graph confidentiality. (See Section 8 for
a brief overview.) As noted above, though, only those involving
zk-SNARKs provide strong confidentiality of the type we seek for
Solidus. Zcash and offshoots such as Hawk [36], for example, con-
ceal balances, transfer amounts, and the transaction graph. They
do not, however, aim to align with the financial settlement system.
Additionally, they require trusted setup and store authoritative
state in a Merkle tree that grows linearly with the total system
transaction history, drawbacks we avoid in the design of Solidus.
As a basis for performance comparison, we describe and evaluate a
zk-SNARK-based version of Solidus in Section 7.3.
3This is a simplification and details vary between systems. For example, a basic transac-
tion in Bitcoin (“Pay-to-PubkeyHash”), takes a reference to the output from a previous
transaction and includes a small script restricting the user of outputs and a mining fee.
2
2.2 Bank-intermediated Systems
Managing assets on ledgers is appealing to the financial industry.
The transfer of assets in financial markets today involves a la-
borious three-step process. Execution denotes a legally enforceable
agreement between buyer and seller to swap assets, such as a secu-
rity for cash. Clearing is updating a ledger to reflect the transaction
results. Settlement denotes the exchange of assets after clearing.
Multiple financial institutions typically act as intermediaries; when
a customer buys a security, a broker or bank will clear and settle
on her behalf via a clearinghouse.
Today, the full settlement process typically takes three days
(T+3) for securities. This delay introduces systemic risk into the
financial sector. Government agencies such as the Securities and
Exchange Commission (SEC) are trying to reduce this delay and are
looking to distributed ledgers as a long-term option. If asset titles—
the authoritative record of ownership—are represented on a ledger,
then trades could execute, clear, and settle nearly instantaneously.
Existing cryptocurrencies such as Bitcoin can be viewed as titles
of a digital asset. Execution takes the form of digitally signed trans-
action requests, while clearing and settlement are simultaneously
accomplished when a block containing the transaction is mined4
Today, however, banks intermediate most financial transactions.
Even with Bitcoin, ordinary customers often defer account man-
agement to exchanges (e.g. Coinbase). Additionally, a labyrinthine
set of regulations, such as Know-Your-Customer [48], favors bank-
intermediated systems. Thus existing cryptocurrencies do not align
well with either financial industry or ordinary customer needs.
Solidus aims to provide fast transaction settlement in a bank-
intermediated ledger-based setting. As in standard cryptocurren-
cies, Solidus assumes that each user has a public/private key pair
and digitally signs transactions. Solidus, however, conceals account
balances and transaction amounts as ciphertexts. To do so and
provide public verifiability at the same time, it relies on PVORM.
tree allowing logarithmic work on each access [57, 62], or write to
completely randomized locations, resulting in constant-time writes
but linear reads (so-called “write-only” ORAM) [11].
Unfortunately, standard ORAM is insufficient for Solidus. Be-
cause ORAM is designed for a client using an untrusted server,
correctness simply means the ORAM reflects the client’s updates.
There is no notion of “valid” updates, let alone means for a client to
prove an update’s validity. In Solidus, clients (banks) must prove an
application-defined notion of correctness for each update. Banks
also cannot store a local stash, as we would no longer have all data
on the ledger. To address these concerns we introduce PVORM—
detailed in Section 4—a new construction inspired by ORAM.
2.4 Generalized Schnorr Proofs
Solidus makes intensive use of Generalized Schnorr Proofs (GSPs), a
class of Σ-protocol for which practical honest-verifier zero-knowledge
arguments (or proofs) of knowledge can be constructed.
Notation introduced in [16, 18] offers a powerful specification
language for GSPs that call the PoK language. Using multiplicative
group notation, let G = ⟨д⟩ be a cyclic group of prime order p.5 If
x ∈ Zp and y = дx , then PoK(x : y = дx ) represents a ZK proof of
knowledge of x such that y = дx where д and y are known to the
verifier. (This is the Schnorr identification protocol.)
The PoK specification language for GSPs is quite rich; it supports
arbitrary numbers of variables as well as conjunctions and disjunc-
tions among predicates. It has a set of corresponding standard tools
based on the Schnorr identification protocol for efficient realization
in practice when G has known order [16]. It is possible, additionally,
using the Fiat-Shamir heuristic [28], to render GSPs non-interactive,
i.e., to generate NIZK proofs of knowledge.
Solidus uses GSPs in a variety of ways to ensure account balances
and PVORMs are properly updated and remain valid.
2.3 Oblivious RAM
As PVORM is heavily inspired by Oblivious RAM (ORAM), we pro-
vide some background here.
An ORAM is a cryptographic protocol that permits a client to
safely store data on an untrusted server. The client maintains a map
from logical memory addresses to remote physical addresses and
performs reads and writes remotely. Ensuring freshness, integrity,
and confidentiality of data in such a setting is straightforward
using authenticated encryption and minimal local state. The key
property of ORAM is concealment of memory access patterns; a
polynomially-bounded adversarial server cannot distinguish be-
tween two identical-length sequences of client operations.
These properties provide an appealing building block for Solidus.
Identifying an edge in the system’s transaction graph can easily
be reduced to identifying which account’s balance changed with
a transaction. Thus placing all balances in an ORAM immediately
provides transaction graph confidentiality. Moreover, recent work
has drastically improved the performance of ORAM. The most
practical ORAM constructions maintain a small local cache on the
client known as a stash and either organize the data blocks as a
4Strictly speaking, settlement involves an exchange of assets, and thus two transactions,
but this issue lies outside the scope of our work.
3
3 SOLIDUS OVERVIEW
Before delving into technical details, we give an overview of Solidus,
including basic notation, trust assumptions, and security goals. We
also give an architectural sketch. First, however, we give a concrete
target application as motivation.