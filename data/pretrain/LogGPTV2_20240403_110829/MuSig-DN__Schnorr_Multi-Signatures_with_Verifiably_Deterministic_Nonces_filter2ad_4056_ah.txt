from the adversary. This allows to deduce the aggregate nonce eR, the value c ··= ROsig(eX, eR, m)
Game8. In Game8, we compute the values R0
and the partial signature s1 before sending (R1, π1). Since both Game7 and Game8 abort in
case the adversary sends a nonce Ri 6= R0
Advgame8
, the two games are identical and hence
of the nonces that we expect to receive
MS,A (λ) = Advgame7
MS,A (λ).
i
MS,A (λ) − Advss
2, . . . , R0
n
32
Game9. In Game9, we compute the partial signature s1 without the signing key x1 using the
standard strategy to simulate Schnorr signatures in the ROM. Namely, we draw c and s1
Tsig(eX, eR, m) ··= c, unless Tsig(eX, eR, m) has already been deﬁned. Clearly, Game8 and Game9
randomly (storing (c, s1) in place of r1 in Trand), deﬁne R1 ··= s1G − cµ1X1, and program
hence eR is uniformly random in G of size p ≥ 2λ−1, hence this happens with probability at
are identical unless Game9 returns false at line (III). For each query Sign(K, m), R1 and
most |Tsig|/2λ−1. Since the size of Tsig is upper bounded by qh + qs,12 and since there are at
most qs calls to Sign, one has
Advgame9
MS,A (λ) ≥ Advgame8
MS,A (λ) − qs(qh + qs)
2λ−1
.
Game10. Our ﬁnal game is Game10, where we exclude a bad event that would prevent the
application of the Forking Lemma. Namely, for any multiset of keys X, when a call ROagg(X, X)
ﬁrst occurs for any X ∈ X, we randomly assign Tagg(X, X0) for all X0 ∈ X and compute the
corresponding aggregate key. If it collides with a previous aggregate key or with the aggregate
key of a non-⊥ entry in Tsig, the game abort and returns false.13 Clearly, Game9 and Game10
are identical unless Game10 returns false at line (IV). Let us upper bound the probability that
this happens. First, there are at most qh + qs + 1 calls to ROagg that might cause the game to
return false (each query to Sign as well as the ﬁnal call to MS.Ver might incur up to N calls
return false). For each call, eX is uniformly random in G of size p ≥ 2λ−1, hence the game
to ROagg, but they are all for the same key set X, hence only the ﬁrst call can make the game
returns false with probability at most (|AggKeys|+|Tsig|)/2λ−1. Since the size of AggKeys and
Tsig are both upper bounded by qh + qs + 1, one obtains
Advgame10
MS,A (λ) ≥ Advgame9
MS,A (λ) − (qh + qs + 1)2
2λ−1
.
The Reduction to DL. Gathering all equations above yields
MS,A (λ) − δ
MS,A (λ) ≥ Adveuf-cma
Advgame10
where
(λ) + Advprf
(λ) + Advss
(6)
(λ)
δ ··= Advprng
KeyDer,Bprng
RandDer,Bprf
(λ) + Advsnd
Π,Bsnd
(λ) + Advzk
Π,Bzk
GrGen0,Bddh
+ Advddh
(λ) + qsε + (qh + qs + 1)2
At this point, we are ready to construct an algorithm solving the DL problem for GrGen. More
MS,A (λ)(cid:17)4
(cid:16)Advgame10
precisely, we show that there exists an algorithm Bdl such that
(qh + qs + 1)3 − 3
GrGen,Bdl
(λ) ≥
2λ−1 .
Advdl
2λ−2
Π,Bss
(7)
.
The proof is very similar to the one for MuSig [MPSW19] and relies on a double application
of the Forking Lemma [PS00]. It is detailed in Appendix C.
It is straightforward to check that all algorithms Bx constructed during the proof are
polynomial-time. Combining Eq. (6) and Eq. (7), one obtains the result.
12 Each signature query can incur at most one assignment in Tsig. The ﬁnal veriﬁcation query may also incur
an assignment to Tsig but it can only happen once all queries to Sign have been made.
13 This corresponds to events BadColl and BadOrder in the original MuSig paper [MPSW19].
33
Game0 Game1
Game2
Game3
Oracle Sign(K, m)
Game6
Game4
Game7
// only in Game0
(crs, τ) ← Π.SimSetup(1λ)
Game5
(p, G, G) ← GrGen(1λ)
(q, E, P, f) ← GrGen0(p)
crs ← Π.Setup(1λ)
par ··= (p, G, G, q, E, P, f, crs)
sk1 ←${0, 1}λ
(x1, u1, k) ··= KeyDer(sk1)
x1 ←$ Fp ; u1 ←$ Zq ; k ←${0, 1}λ
X1 ··= x1G ; U1 ··= u1P
Q ··= ( )
Tagg, Tsig, Tnon ··= ( ) // tables for simulating ROs
Tddh, Trand ··= ( )
(X, m, σ) ← ASign,
return X1 ∈ X ∧ (X, m) /∈ Q
Tρ ··= ( )
−→RO(par, X1, U1)
non ··= ( )
T0
∧ MS.Ver(par, X, m, σ) = 1
Oracle ROagg(X, X)
if Tagg(X, X) = ⊥ then
Tagg(X, X) ←$ Fp
return Tagg(X, X)
Oracle ROsig(eX,eR, m)
if Tsig(eX,eR, m) = ⊥ then
Tsig(eX,eR, m) ←$ Fp
return Tsig(eX,eR, m)
Oracle ROnon(K, m)
if Tnon(K, m) = ⊥ then
Tnon(K, m) ←$ E
non(K, m) ←$ Zq
T0
Tnon(K, m) ··= T0
return Tnon(K, m)
non(K, m)P
if (X1, U1) /∈ K then return ⊥
{(X1, U1), . . . , (Xn, Un)} ··= K
X ··= {X1, . . . , Xn}
µ1 ··= ROagg(X, X1)
eX ··=Pn
ROagg(X, Xi)Xi
i=1
V ··= ROnon(K, m)
v ··= T0
if Tddh(K, m) = ⊥ then
non(K, m)
Tddh(K, m) ··= u1V
W ··= Tddh(K, m)
if Trand(K, m) = ⊥ then
Trand(K, m) ··= f(W )
r1 ··= Trand(K, m)
R1 ··= r1G
if Tρ(K, m) = ⊥ then
Tddh(K, m) ←$ E
Trand(K, m) ←$ Fp
Tρ(K, m) ··= RandDer(k, (K, m))
Tρ(K, m) ←${0, 1}λ
ρ ··= Tρ(K, m)
π1 ··= Π.Prv(crs, (U1, V, R1), u1; ρ)
π1 ··= Π.SimPrv(crs, τ, (U1, V, R1); ρ)
if π1 = ⊥ then return ⊥
send (R1, π1)
receive ((R2, π2), . . . , (Rn, πn))
for i = 2 . . . n do
if Π.Ver(crs, (Ui, V, Ri), πi) = 0 then return ⊥
if Ui = U1 ∧ Ri 6= R1 then
(I)
(II)
abort game and return false
if Ui 6= U1 ∧ Ri 6= f(vUi)G then
abort game and return false
eR ··=Pn
c ··= ROsig(eX,eR, m)
i=1 Ri
s1 ··= r1 + cµ1x1 mod p
Q ··= Qk(X, m)
return s1
Fig. 6. Games Game0 to Game7 used in the proof of Theorem 1. Algorithm MS.Ver is as deﬁned in Fig. 5.
Changes are incremental (e.g., boxed statements apply to Game2 but also Game3, . . . , Game7).
34
Oracle Sign(K, m) (Game8)
if (X1, U1) /∈ K then return ⊥
{(X1, U1), . . . , (Xn, Un)} ··= K
X ··= {X1, . . . , Xn}
µ1 ··= ROagg(X, X1)
eX ··=Pn
ROagg(X, Xi)Xi
i=1
V ··= ROnon(K, m)
v ··= T0
if Trand(K, m) = ⊥ then
non(K, m)
Trand(K, m) ←$ Fp
r1 ··= Trand(K, m)
R1 ··= r1G
if Tρ(K, m) = ⊥ then
Tρ(K, m) ←${0, 1}λ
ρ ··= Tρ(K, m)
π1 ··= Π.SimPrv(crs, τ, (U1, V, R1); ρ)
if π1 = ⊥ then return ⊥
for i = 2 . . . n do
i=2 R0
i ··= R1
0
if Ui = U1 then R
i ··= f(vUi)G
0
else R
eR ··= R1 +Pn
// inlining c ··= ROsig(eX,eR, m)
if Tsig(eX,eR, m) = ⊥ then
Tsig(eX,eR, m) ··= c
c ←$ Fp
i
s1 ··= r1 + cµ1x1 mod p
send (R1, π1)
receive ((R2, π2), . . . , (Rn, πn))
for i = 2 . . . n do
if Π.Ver(crs, (Ui, V, Ri), πi) = 0 then
return ⊥
if Ui = U1 ∧ Ri 6= R1 then
abort game and return false
if Ui 6= U1 ∧ Ri 6= f(vUi)G then
abort game and return false
Q ··= Qk(X, m)
return s1
Oracle Sign(K, m) (Game9)
if (X1, U1) /∈ K then return ⊥
{(X1, U1), . . . , (Xn, Un)} ··= K
X ··= {X1, . . . , Xn}
µ1 ··= ROagg(X, X1)
eX ··=Pn
ROagg(X, Xi)Xi
i=1
non(K, m)
V ··= ROnon(K, m)
v ··= T0
if Trand(K, m) = ⊥ then
Trand(K, m) ←$ (Fp)2
(c, s1) ··= Trand(K, m)
R1 ··= s1G − cµ1X1
if Tρ(K, m) = ⊥ then
Tρ(K, m) ←${0, 1}λ
ρ ··= Tρ(K, m)
π1 ··= Π.SimPrv(crs, τ, (U1, V, R1); ρ)
if π1 = ⊥ then return ⊥
for i = 2 . . . n do
i=2 R0
i ··= R1