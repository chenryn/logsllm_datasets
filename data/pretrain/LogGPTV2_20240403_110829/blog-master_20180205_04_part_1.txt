## PostgreSQL APP海量FEED LOG实时质量统计CASE(含percentile_disc) - 含rotate 分区表 
### 作者              
digoal                 
### 日期              
2018-02-05             
### 标签              
PostgreSQL , list 分区 , 分区表 , 实时消费 , 实时统计 , rotate 分区 , 流式统计       
----                
## 背景     
服务质量监控是精细化质量管理的重要环节：  
例如实时统计FEED LOG在某些分组在某些固定区间（分钟、5分钟、10分钟）的水位值，avg, sum, count等。  
本文将介绍一个CASE，某个服务的实时质量监控。  
多个点值以数组的形式，批量合并写入。例如2500个点，一批写入。  
为了实现高效率的统计，以及FEED LOG明细的高效率清除，我们可以使用list分区表。  
同时还需要用到intarray 插件来对数组的数值进行排序，以及使用aggs_for_arrays 插件来计算有序数组的水位值。  
当然即使我们不使用这两个插件，使用PG的分位数聚合函数，也可以达到同样达到效果。  
```
                                                       List of functions  
   Schema   |                 Name                 |  Result data type  |             Argument data types              |  Type    
------------+--------------------------------------+--------------------+----------------------------------------------+--------  
 pg_catalog | percent_rank                         | double precision   | VARIADIC "any" ORDER BY VARIADIC "any"       | agg  
 pg_catalog | percentile_cont                      | double precision   | double precision ORDER BY double precision   | agg  
 pg_catalog | percentile_cont                      | interval           | double precision ORDER BY interval           | agg  
 pg_catalog | percentile_cont                      | double precision[] | double precision[] ORDER BY double precision | agg  
 pg_catalog | percentile_cont                      | interval[]         | double precision[] ORDER BY interval         | agg  
 pg_catalog | percentile_disc                      | anyelement         | double precision ORDER BY anyelement         | agg  
 pg_catalog | percentile_disc                      | anyarray           | double precision[] ORDER BY anyelement       | agg  
```
[《PostgreSQL aggregate function 4 : Hypothetical-Set Aggregate Functions》](../201504/20150407_02.md)    
[《PostgreSQL aggregate function 3 : Aggregate Functions for Ordered-Set》](../201504/20150407_01.md)    
[《PostgreSQL aggregate function 2 : Aggregate Functions for Statistics》](../201503/20150303_03.md)    
[《PostgreSQL aggregate function 1 : General-Purpose Aggregate Functions》](../201503/20150302_01.md)    
## DEMO  
硬件环境：   
```
ECS:
56Core
224G memory
2*本地ssd云盘
DB:
PostgreSQL
```
### 安装aggs_for_arrays 插件  
```  
wget http://api.pgxn.org/dist/aggs_for_arrays/1.3.1/aggs_for_arrays-1.3.1.zip  
unzip aggs_for_arrays-1.3.1.zip  
cd aggs_for_arrays-1.3.1  
export PGHOME=/home/digoal/pg11  
export LD_LIBRARY_PATH=$PGHOME/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib:$LD_LIBRARY_PATH    
export PATH=$PGHOME/bin:$PATH:.    
USE_PGXS=1 make clean  
USE_PGXS=1 make   
USE_PGXS=1 make install  
```  
### 加载插件  
```  
postgres=# create extension intarray ;  
CREATE EXTENSION  
postgres=# create extension aggs_for_arrays ;  
CREATE EXTENSION  
```  
### 自定义数组聚合函数，将多个数组聚合为一维数组  
PostgreSQL内置的array_agg聚合函数会将多个数组聚合为多维数组，而我们的目的是要将多个数组聚合为一维数组。所以需要自定义一个聚合函数。   
```  
create aggregate arragg (anyarray) (sfunc = array_cat, stype=anyarray, PARALLEL=safe);    
postgres=# select arragg(info) from (values(array[1,2,3]),(array[3,4,5])) t(info);  
    arragg       
---------------  
 {1,2,3,3,4,5}  
(1 row)  
postgres=# select arragg(info) from (values(array[1,2,3]),(array[2,3,4,5])) t(info);  
     arragg        
-----------------  
 {1,2,3,2,3,4,5}  
(1 row)  
```  
聚合函数用到了array_cat，这个函数存在大量的MEMCOPY，所以涉及的量比较大时，性能不太乐观(相比较array_agg要差很多)。后面我们可以自定义一个性能更好的arragg。   
[《PostgreSQL 多个数组聚合为一维数组加速(array_agg)》](../201802/20180208_02.md)  
### 定义生成随机数值数组的函数  
```  
create or replace function gen_randarr(  
  int,  -- 随机值取值范围上限  
  int   -- 生成个数  
) returns int[] as $$  
  select array(select (random()*$1)::int from generate_series(1,$2));  
$$ language sql strict;  
返回值范围100内的随机数，返回10个，样例如下：
postgres=# select gen_randarr(100,10);  
          gen_randarr             
--------------------------------  
 {72,6,26,44,47,84,88,72,59,40}  
(1 row)  
```  
### 定义FEED LOG明细分区表  