SystemV版本中，注释只允许出现在第一行。在一些版本中，
可以使用注释描述脚本的作用，
同
不提倡在同一行放置多个命令，
空格是可以的。
行的结尾处。
号内的缩进方式一样，允许在行的开始处插入空格和制表符。
注释
本
然
句
个
命
行
第
一行上指定）。
长也是很难阅读的（注意，更改、插入和追加命令必须在多行上指定，不能在
构成上是正确的：
分号分隔，那么可以将多个 sed 命令放在同一行（注1）。下面的示例在语
令后添加空格会产生一个小的语法错误，
省 sed 不理解一个命令时，它打印出消息“Command garbled(命令不清)”。
一个命令可以喝左大括号放置在同一行，
而，
 在n命令后面放置一个空格会导致语法错误，而在d命令前面放置一个
# wstar. sed: convert WordStar files
令人惊讶的是，用分号分隔命令的用法不在 POSIX 标准中。
，可以用反斜杠来结束前面的行使得注释可以继续多行（注释
 #[n]
 本书的示例更多地遵循 System V sed 的限制，将注释限制在
而
以及 GNU sed，可以在脚本的任何地方放置注释，甚至是跟
n;d
QQ群：
使用注释作为脚本文档往往非常有效，
50192241
来为脚本编写文档。
，因为即使将这些命令写在各自的行上，
- 91-
这个不允许的，命令的结束必须在
但是右大括号必须自己单独处于一
第五章
从本章开始，
，如果你的 sed 版
包括 Sun0S4.1x
基本 sed 命令
完整的脚本
sed 脚
---
## Page 92
下一行的开始，
从前，计算机用固定长度的记录来存储文本。
任意字符来分隔，只有换行符除外。因此，如果模式包含斜杠，那么可以选择
和地址不同的是，地址需要一个作为定界符的斜杠（/），
一节中的示例。
式，那么替换命令匹配由地址匹配的内容。当替换命令是应用于同一个地址。
Pattern 匹配的所有行。如果正则表达式作为地址来提供，
替换命令应用于与 address 匹配的行。如果没有指定地址，
这里修饰替换的标志flags 是：
我们已经讨论了替换命令的许多用法。下面是它的详细的用法：
替换
中，采用这种方式的#n必须是文件的前两个字符。
行选项-n 是等价的。跟在 n后面的其余的内容被看做是注释。在 POSIX 标准
如果跟在#后面的下一个字符是n，那么脚本不会自动产生输出。这和指令命令
活
个）之后结束，
义
界
注
另
的
注
M
d
q
u
一个字符作为定界符，例如感叹号。
的多个命令之一时，这可能会非常有用。可以参看本章后面的“检验参考页”
，它们使用特殊的字符（称为换行符（newline））标记行的结束。这样就)
符
意
2:
如果它出现在正则表达式中，
定界符出现了3次而且在 replacement 之后是必需的。
 s!/usr/mail!/usr2/mail! 
file 
次出现的情况被取代。
对模式空间的所有出现的情况进行全局更改。而没有g是通常只有第-
现的情况进行替换
使用GNU sed（版本2.05）时不起作用。
将模式空间的内容写到文件file 中。
1 到512之间的一个数字，表示对文本模式中指定模式第n次出
[address]s/pattern/replacement/flags 
每一行都有相同的（固定的）数量字符。现在的系统比较灵
然后开始下一行。数据中没有显式的字符来标记一行的结束和
空间的内容。
QQ群：
50192241
，或者在替换文本中，那么就用反斜杠来转
-92-
一行在出现许多字符（一般为 80
第五章
而正则表达式可以用
并且没有指定模
，那么就应用于
，不管使用哪种定
基本 sed 命令
允
“
T
---
## Page 93
行的文件，如下所示：
可以使用下面的替换命令完成该功能：
数字表示很少使用，
一行的多个备份就会被打印或写到文件中。
使用打印和写标志。另外，如果脚本包含匹配同一行的多个替换命令，那么那
Flag 可以组合使用，
注3:
说
行
因
义
中
Replacement 是一个字符串，
法的讨论）。
展到当前行的特殊情况下，
因为在内部存储时换行符只是一个字符，所以正则表达式可以使用“\n”来[
“”
含
对
理
1
配
其中某个位置的匹配进行替换。例如，
，如果进行了替换，那么这个行被打印或写到文件中。因为默认的动作时
置执行。打印标志和写标志与打印命令和写命令（本章后面会进行讨论）的
中的“匹配的范围“一节）。在replacement 部分，只用下列字符有特殊含
所有的行，
能相同，
此
嵌入的换行符。正如将在下一个章所看到的那样，
Column1·Column2·Column3·Column4
表示一个真正的制表符，而制表符在屏幕上是不可见的。如果输入是一
替
除
换元字
会了正则表达式中的元字符以外，
但有一个重要的区别。这些操作是随替换的成功而发生的。换台
大
或
 s/·/>/2 
不管是否执行了任何动作，
多或少。
多数GNU程序没有这样的限制。
字
replacement 字符串。
定
当在替换部分包含“与“符号（&)
用“\（“和“）“指定。
用正则表达式匹配的内容进行替换。
界符时可用\转义它们。另外，
符
“中使用它们的示例。
在这种情况下，
只要有意义。例如，
QQ群：
，许多UNIX程序对它们处理的行的长度都有内部限制。但
，就会出现这样情况（参见第二章“了解基本操作
，用来替换与正则表达式匹配的内容（参见第三章
50192241
正则表达式在一行上重复匹配，而只需要
- 93-
并且要用“〉“替换第二个制表位，
当取消默认的输出时（-n选项）通
，即表示对行进行全局替换并打印这一
，sed 的替换部分也有元字符。参见下
某输入行也许包含tb1 输入，也许包
，它用于转义换行符并创建多行
替换只能在行的第一次出现的
，这个字串以前在 pattern 中
反斜杠（\）和替换命令的
第五章
在模式空间中当另一行扩
基本 sed 命令
处
2
匹
---
## Page 94
的问题。
这个问题中的难点是这一行需要前后都有空行。这是一个编写多行替换字符串
转换成类似的Ventura Publisher 行：
式。它将下面的 troff 行：
另一个示例来自于将troff 文件转换成 Ventura Publisher 的 ASClI输入格
注意，
我们可以对前面的示例做一些改动，用换行符取代每行上的第二个制表符。
的元字符，
替换元字符是反斜杠（\）、
替换元字符
看作是默认的数字标志）。
对这个文件运行以上脚本所产生的输出如下：
意，如果没有数字标识，
在反斜杠后面不允许有空格。这个脚本产生下面的结果：
s/" //g 
@A HEAD = Major Heading 
s/$/\
@A HEAD = /
s/\. Ah */\
/~\. Ah/ {
. Ah "Major Heading"
Column3·Column4
Col umn1·Column2
s/·/\
Col umn1·Column2>Col umn3·Column4
，但是他在替换字符串中也用于包含换行符。
QQ群：
则替换命令只替换第一个制表符（因此“1“可以被
“与”符号（&）和\n。反斜杠一般用于转义其他
50192241
94
第五章
基本 sed 命令
---
## Page 95
且在替换字符创中回调它。在 sed 中转义的圆括号括住正则表达式的任意部分
现
“与”符号用于在替换字符创中引用整个匹配内容。
如“See Section 1.4”或“See Section 12.9”的引用都应该出现在圆括号
那么替换命令将产生：
斜杠。
因为反斜杠也是替换字符串中的元字符，
作为元字符，
很容易忘记作为普通字符出现在替换部分的“与”符号。如果在这个例子中没
在下一个例子中，反斜杠用来转义“与”符号，它作为普通字符出现在替换部
中的行的结尾（不是嵌入的换行符），并在它后面添加一个换行符。
假设要用圆括号括住文档中对已编号部分的任意交叉引用。换句话说，
要用反斜杠转义换行符。第二个替换删除了引号。最后一个命令匹配模式空间
以
中
求
用
第
在替
替换字符串，
正则表达式匹配单词的变化时，
包围一个单词：
月“与”符号匹配一个单词并且用troff请求来包围它。下面的示例用点数请
替换字符串中可以使用“&”并括起所匹配的内容。
我们来看一种元字符，它用于选择被匹配的字符串的任意独立部分，并
 s/ORA/O' Reilly \& Associates, Inc. /g
/(8) /*[6-0] [6-] "\*[6-0] [6-1] u0!20 8a8/s 
 on the \s-2UNIX\s0 Operating System.
 on the UNIX Operating System.
s/UNIX/\ls-2&\ls0/g
“与”符号（&）表示模式匹配的范围，不是被匹配的行。可以使
，该字符串相当于匹配的内容与实际内容匹配的字符创。
QQ群：
50192241
“与”符号特别有用。
。正则表达式可以匹配数字的不同组合，
 所以需要用两个反斜杠来输出一个反
第五章
它允许指定一个可变
，在行结尾处有必
基本 sed 命令 
任意
，例如
所
诸
---
## Page 96
脚本中创建一个编辑列表，然后在所有的文件中运行该脚本。关键是替换命令
sed 在对一组文件进行这些编辑工作时可以提供很大的帮助。
的时候。
件，然后进行校正，这是一件痛苦的事情，特别是当有大量的条目需要被修正
要进行改正的错误和不一致之处。简而言之，必须查找到索引太欧姆驻留的！
每个索引条目占用一行。当运行一个索引时，
的索引宏，它采用单个参数，即索引条目。样本索引条目如下：
索引。创建索引的第一个步是在文档文件中放置索引代码。我们使用命名为.XX
稍
校正索引条目
示例中将要看到的那样。
重要的是可以按任意顺序回调保存的子串，并且可以多次调用，正如在下一个
号内并在替换过程交换它们。
我们可以使用类似的技术匹配行的部分内容并交换它们。例如，假如在一行上
的子串，\2 用粗体字请求包围。
指定了两队转义的圆括号。
例如,当节号出现在交叉引用中时要表示为用粗体，
匹配部分，n是从1到9的数字，用于饮用特殊“保存的”备用字符串。
并且保存它以备回调。一行最多允许“保存”9次。
有
替
符
肖后，在本书的 awk部分中，我们将给出一个格式化索引的程序，例如本书的
用冒号分隔的两个部分。我们可以匹配每个部分，把它们放置在转义的圆括
串
它可以直接在替换字符串中简单的被重新键入）。
s/\(See Section \)\([1-9] [0-9]*\. [1-9] [0-9]*\)/\1\\fB\2\\fP/
该集
two:one
second:first 
$  sed 
one:two
first:second
$ cat test1
集合接着被排序并放入到一个列表中。编辑器常常会发现列表中
.XX "sed, substitution command"
’s/\(.*\):\(. *\)/\2:\1/’ test1
QQ群：
第一对捕获“See Section 
50192241
，会得到一个带有页码的索引条
可以编写下面的替换：
第五章
“\n”用于回调被保存的
，”（因为它是固定的字
，可以简单的在 sed
基本 sed 命令
文
需
目
---
## Page 97
串并将它作为替换字符串。最后用一个斜杠结束这个命令。
的部分用来作为正则表达式。这后面跟着一个斜杠并且我们再次调用保存的子
它产生以地址开头的替换命令：地址开始为斜杠，
它匹配整个行，
换命令。
的条目。然后这个列表被送到 sed，其中，这一行的 sed 脚本则构建了一个替
含索引条目的所有行。
sell脚本index.edit 使用 grep 从命令行上指定的任意数量的文件中，提取包
我们可以进一步创建一个 shelI脚本，
一个斜杠以结束地址。接下来我们输出后面跟有斜杠的“s”，
一个反斜杠以保护跟在后面的“.XX”中的句点，
我们现在来进一步查看以上的 sed 脚本。下面就是其中的正则表达式：
答案很简
你也许会想，
以上地址匹配所有以“.X”开始的行，
面的命令来完成：
假如我们要将上面的索引条目换成“sed, substitute command“。可以使用下
需要将地址限制在以“.X“开始的行。脚本本身不能改动正文。
些条目改变。
V~11. xx /s\/\1/\1V/
s/~\. xx 1(. *1)$/\/~11. xx \/s\/\1/\1///,
#! /bin/sh
1. xx 1(. *()$
sed
/^\. XX /s/substitution/substitute/
\. xx /s/sed, 
单，
其他条目中“substitution”的使用可能是正确的，我们不想对
为什么不指定一个较短的正则表达式呢？例如：
，保存索引条目以备回调。下面是替换字符串：
QQ群：
- compile list of index entries for editing.