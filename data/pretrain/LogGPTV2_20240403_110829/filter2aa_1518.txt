### Module 1: From High-Level Languages to Running Processes

**Overview**
- This module explores the journey from high-level programming languages to the final running process, including compilation, linking, and execution. 
- [GitHub Repository](https://github.com/hasherezade/malware_training_vol1)

### Creating Executables

#### Compilation and Linking
- **Execution by Processor**: The code of an application must be executed by a processor.
- **Programming Languages and Code Types**:
  - **Native Languages**: Compiled directly into machine code (e.g., C/C++, Assembly).
  - **Intermediate Languages**: Compiled into intermediate code (e.g., C# to Common Intermediate Language (CIL), Java to bytecode).
  - **Interpreted Languages**: Translated to native code at runtime by an interpreter (e.g., Python, Ruby).

#### Native vs. Intermediate vs. Interpreted Languages
- **Native Languages** (e.g., C/C++, Assembly):
  - Compiled directly to machine code.
  - Example: `MyApp.exe` (Native code)
- **Intermediate Languages** (e.g., C#, Java):
  - Compiled to an intermediate format (CIL, bytecode).
  - Example: `MyApp.exe` (Intermediate code) + Interpreter
- **Interpreted Languages** (e.g., Python, Ruby):
  - Translated to machine code at runtime.
  - Example: `MyApp.exe` (Intermediate code) + Interpreter

### Compilation and Linking Process

#### From Assembly Code to Native Application
- **Steps**:
  - **Preprocessing**: Prepare the source code.
  - **Assembling**: Convert assembly code to object code.
  - **Linking**: Combine object code with libraries to create the executable.

- **Example**:
  - **Source Files**: `MyApp.asm`, `MyApp.inc`
  - **Preprocessing**: `preprocess MyApp.asm`
  - **Assembling**: `assemble MyApp.asm` → `MyApp.obj`
  - **Linking**: `link MyApp.obj Used_library.lib` → `MyApp.exe` (Native code)

#### Assemblers
- **MASM (Microsoft Macro Assembler)**:
  - Windows-only.
  - Example: `ml /c demo.asm` → `link demo.obj /entry:main /subsystem:console /defaultlib:kernel32.lib /defaultlib:user32.lib`
- **YASM (Independent Assembler)**:
  - Multiplatform.
  - Advantage: Can generate binary files (useful for shellcodes).
  - Example: `yasm –f win64 demo.asm` → `link demo.obj /entry:main /subsystem:console /defaultlib:kernel32.lib /defaultlib:user32.lib`

#### Advantages of Assembly
- **Exact Control**: The compiled/decompiled code is identical to the written assembly code.
- **Shellcode and Patches**: Powerful for writing shellcodes and binary patches.
- **Smaller Binaries**: Generated binaries are smaller compared to other languages.

#### From C/C++ Code to Native Application
- **Steps**:
  - **Preprocessing**: Prepare the source code.
  - **Compilation**: Convert C/C++ code to assembly.
  - **Assembly**: Convert assembly to object code.
  - **Linking**: Combine object code with libraries to create the executable.

- **Example**:
  - **Source Files**: `MyApp.cpp`, `MyApp.h`
  - **Preprocessing**: `preprocess MyApp.cpp`
  - **Compilation**: `compile MyApp.cpp` → `MyApp.obj`
  - **Linking**: `link MyApp.obj Used_library.lib` → `MyApp.exe` (Native code)

#### Using MSVC for C/C++
- **Preprocessing and Compilation**:
  - `CL /c demo.cpp` → `demo.obj`
  - `CL /P /C demo.cpp` (to see preprocessed output)
- **Linking**:
  - `LINK demo.obj /defaultlib:user32.lib`

#### Custom Linkers and Obfuscation
- **Custom Linker Example**: Crinkler
  - `crinkler.exe demo.obj kernel32.lib user32.lib msvcrt.lib /ENTRY:main`

#### Higher-Level Languages
- **Generated Code Variability**: The same C/C++ code can produce different binaries depending on the compiler and its settings.
- **Decompilation Limitations**: Decompiled code is a reconstruction and may not match the original exactly.

### Intermediate Languages (.NET)

#### .NET Compilation
- **Steps**:
  - **Preprocessing**: Prepare the source code.
  - **Compilation to Intermediate Code (CIL)**: Convert C# code to CIL.
  - **Just-In-Time (JIT) Compilation**: Translate CIL to machine code at runtime.

- **Example**:
  - **Source Files**: `MyApp.cs`, `Module2.cs`
  - **Preprocessing**: `preprocess MyApp.cs`
  - **Compilation**: `compile MyApp.cs` → `MyApp.exe` (CIL)
  - **Runtime**: `JIT` (translates CIL to native code)

#### .NET Framework
- **CLR (Common Language Runtime)**:
  - Contains JIT compiler, garbage collector, etc.
- **FCL (Framework Class Library)**:
  - Collection of types implementing functionality.
  - [More Information](https://www.geeksforgeeks.org/net-framework-class-library-fcl/)

### Exercise

1. **Compile Examples from Command Line**:
   - Separate compiling and linking steps.
   - For C files, view the generated assembly.
   - For assembly and C, inspect the `.obj` files.
2. **Analyze Final Executables**:
   - Use tools like PE-bear and dnSpy.
   - Note that assembly files are smaller and contain exactly the code you wrote.