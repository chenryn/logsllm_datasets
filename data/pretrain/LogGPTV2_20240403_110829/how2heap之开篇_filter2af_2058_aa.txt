# how2heap之开篇
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
> 欢迎各位喜欢安全的小伙伴们加入星盟安全 UVEgZ3JvdXA6IDU3MDI5NTQ2MQ==
>
> how2heap系列几个月前更新了!!!!大事件,正好寒假时间充裕,不如把how2heap总结一遍算了,千万别咕咕咕了hhh
PS:由于本人才疏学浅,文中可能会有一些理解的不对的地方,欢迎各位斧正 🙂
## 参考网站
    https://ctf-wiki.github.io/ctf-wiki/pwn
    https://blog.csdn.net/liying_1234/article/details/52053183
    https://code.woboq.org/
    https://github.com/shellphish/how2heap/tree/master/glibc_2.25
    https://xz.aliyun.com/t/2582#toc-4
## 前置
因为分为glibc2.25和glibc2.26,  
因此我先起一个ubuntu16.04的docker
_注:tcache,largebin,unsorted bin为先进后出,fastbin,smallbin为先进先出_
    git clone https://github.com/shellphish/how2heap.git
    cd how2heap
    make
对glibc的内存管理机制不熟的小伙伴,这里强烈推荐华庭师傅的glibc内存管理!!
虽然版本有些老,但是对理解glibc还是有极大的帮助的
## 0x01 first-fit
###  源代码
我们先看看源代码,这里我做了些处理,将一些作者的话删掉了:)
删掉的话的大概意思就是本文件不是攻击demo,而是对glibc一个选择chunk机制(first-fit)的一个说明,这个机制经常被用在uaf的利用中
所谓的first-fit就是首次适应算法,这里有一篇文章对常见内存分配算法有一个总结:  
[常见内存分配算法](https://blog.csdn.net/liying_1234/article/details/52053183)
好了,不影响,我们直接看源代码,加了一小点翻译
    #include 
    #include 
    #include 
    int main()
    {
            //分配两个缓冲区,不一定是fastbin,可以比较大的
            fprintf(stderr, "Allocating 2 buffers. They can be large, don't have to be fastbin.n");
            char* a = malloc(0x512);
            char* b = malloc(0x256);
            char* c;
            fprintf(stderr, "1st malloc(0x512): %pn", a);
            fprintf(stderr, "2nd malloc(0x256): %pn", b);
            fprintf(stderr, "we could continue mallocing here...n");
            fprintf(stderr, "now let's put a string at a that we can read later "this is A!"n");
            strcpy(a, "this is A!");
            fprintf(stderr, "first allocation %p points to %sn", a, a);
            fprintf(stderr, "Freeing the first one...n");
            free(a);
            //我们不用再释放其他的缓冲区了,只要我们分配的小于0x512,就可以从刚刚free的内存里取
            fprintf(stderr, "We don't need to free anything again. As long as we allocate smaller than 0x512, it will end up at %pn", a);
            fprintf(stderr, "So, let's allocate 0x500 bytesn");
            c = malloc(0x500);
            fprintf(stderr, "3rd malloc(0x500): %pn", c);
            fprintf(stderr, "And put a different string here, "this is C!"n");
            strcpy(c, "this is C!");
            fprintf(stderr, "3rd allocation %p points to %sn", c, c);
            fprintf(stderr, "first allocation %p points to %sn", a, a);
            fprintf(stderr, "If we reuse the first allocation, it now holds the data from the third allocation.n");
    }
###  程序结果
我们再运行一下程序
    This file doesn't demonstrate an attack, but shows the nature of glibc's allocator.
    glibc uses a first-fit algorithm to select a free chunk.
    If a chunk is free and large enough, malloc will select this chunk.
    This can be exploited in a use-after-free situation.
    Allocating 2 buffers. They can be large, don't have to be fastbin.
    1st malloc(0x512): 0x1e03010
    2nd malloc(0x256): 0x1e03530
    we could continue mallocing here...
    now let's put a string at a that we can read later "this is A!"
    first allocation 0x1e03010 points to this is A!
    Freeing the first one...
    We don't need to free anything again. As long as we allocate smaller than 0x512, it will end up at 0x1e03010
    So, let's allocate 0x500 bytes
    3rd malloc(0x500): 0x1e03010
    And put a different string here, "this is C!"
    3rd allocation 0x1e03010 points to this is C!
    first allocation 0x1e03010 points to this is C!
    If we reuse the first allocation, it now holds the data from the third allocation.
###  关键部分调试
因为内容比较简单,这里就做一个写入内容的对比吧
  1. 首先在写c之前下一个断点
    pwndbg>
    31              fprintf(stderr, "3rd malloc(0x500): %pn", c);
    32              fprintf(stderr, "And put a different string here, "this is C!"n");
    33              strcpy(c, "this is C!");
    34              fprintf(stderr, "3rd allocation %p points to %sn", c, c);
    35              fprintf(stderr, "first allocation %p points to %sn", a, a);
    36              fprintf(stderr, "If we reuse the first allocation, it now holds the data from the third allocation.n");
    37      }
    pwndbg> b 32
    Breakpoint 1 at 0x400842: file first_fit.c, line 32.
  1. 运行一下康康  
程序停在了第32行
    1st malloc(0x512): 0x603010
    2nd malloc(0x256): 0x603530
    we could continue mallocing here...
    now let's put a string at a that we can read later "this is A!"
    first allocation 0x603010 points to this is A!
    Freeing the first one...
    We don't need to free anything again. As long as we allocate smaller than 0x512, it will end up at 0x603010
    So, let's allocate 0x500 bytes
    3rd malloc(0x500): 0x603010
那我们先看看a的内容吧
    pwndbg> p a
    $17 = 0x603010 "25037335367377177"
然后再看下c的内容
    pwndbg> p c
    $18 = 0x603010 "25037335367377177"
可以看到此时a,c位于同一内存空间
现在两个单步直接给c赋值为”this is c”  
此时康康a和c的内容
    pwndbg> p a
    $19 = 0x603010 "this is C!"
    pwndbg> p c
    $20 = 0x603010 "this is C!"
更改c时成功更改了a的内容
###  总结
可以看到程序先分配了两个chunk块a(0x512),b(0x256)
然后给a赋值为”this is A”,释放a,之后分配c(0x500)
然后给C赋值为”this is C”,此时输出a,c的地址和内容
发现a块和c块内存地址相同,但a的内容改为了C,程序成功通过修改c来修改来a块
而这也可以通过修改a块来修改c块的内容,而这也是一个uaf漏洞(free后并未置0) 🙂
first-fit的内容比较简单,这里也不再多讲,进入下一个
## 0x02 fastbin_dup
###  源代码
还是先看源代码
    #include 
    #include 
    int main()
    {
            //一个基于fasstbin的简单的double-free利用
            fprintf(stderr, "This file demonstrates a simple double-free attack with fastbins.n");
            fprintf(stderr, "Allocating 3 buffers.n");
            int *a = malloc(8);
            int *b = malloc(8);
            int *c = malloc(8);
            fprintf(stderr, "1st malloc(8): %pn", a);
            fprintf(stderr, "2nd malloc(8): %pn", b);
            fprintf(stderr, "3rd malloc(8): %pn", c);
            fprintf(stderr, "Freeing the first one...n");
            free(a);
            //如果再free一次a,程序就会crash,因为a是free链上的最顶的chunk
            fprintf(stderr, "If we free %p again, things will crash because %p is at the top of the free list.n", a, a);
            // free(a);
            //因此我们free b
            fprintf(stderr, "So, instead, we'll free %p.n", b);
            free(b);
            //现在再free一次a
            fprintf(stderr, "Now, we can free %p again, since it's not the head of the free list.n", a);
            free(a);
            //现在我们的free链变成了 a->b->a
            fprintf(stderr, "Now the free list has [ %p, %p, %p ]. If we malloc 3 times, we'll get %p twice!n", a, b, a, a);
            fprintf(stderr, "1st malloc(8): %pn", malloc(8));
            fprintf(stderr, "2nd malloc(8): %pn", malloc(8));
            fprintf(stderr, "3rd malloc(8): %pn", malloc(8));
    }
###  运行结果
运行一下康康
    This file demonstrates a simple double-free attack with fastbins.
    Allocating 3 buffers.
    1st malloc(8): 0xd07010
    2nd malloc(8): 0xd07030
    3rd malloc(8): 0xd07050
    Freeing the first one...
    If we free 0xd07010 again, things will crash because 0xd07010 is at the top of the free list.
    So, instead, we'll free 0xd07030.
    Now, we can free 0xd07010 again, since it's not the head of the free list.
    Now the free list has [ 0xd07010, 0xd07030, 0xd07010 ]. If we malloc 3 times, we'll get 0xd07010 twice!
    1st malloc(8): 0xd07010
    2nd malloc(8): 0xd07030
    3rd malloc(8): 0xd07010
###  关键部分调试
这里我们一共下4个断点,分别在每次free前和最后分配的时候
首先看看没free前的堆
    pwndbg> heap
    0x602000 FASTBIN {
      prev_size = 0,
      size = 33,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x21
    }
    0x602020 FASTBIN {
      prev_size = 0,
      size = 33,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x21
    }
    0x602040 FASTBIN {
      prev_size = 0,
      size = 33,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x20fa1
    }
    0x602060 PREV_INUSE {
      prev_size = 0,
      size = 135073,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
可以看到一共三块空间a,b,c  
然后我们先free a
    pwndbg> bins
    fastbins
    0x20: 0x602000 ◂— 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x0
    smallbins
    empty
    largebins
    empty
然后free b
    pwndbg> bins
    fastbins
    0x20: 0x602020 —▸ 0x602000 ◂— 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x0
    smallbins
    empty
    largebins
    empty
然后再free a
    pwndbg> bins
    fastbins
    0x20: 0x602000 —▸ 0x602020 ◂— 0x602000
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x0
    smallbins
    empty
    largebins
    empty
可以看到已经构成了一个chunk 环即a->b->a,然后我们再分配空间
    3rd malloc(8): 0x602010n0x602010, 0x602030, 0x602010 ]. If we malloc 3 times, we'll get 0x602010 twice!
成功分配了两次a的空间
_注:这里要注意mem内存指针和chunk指针不一样,mem内存指针也就是给用户的内存指针,并不是chunk头指针_
###  总结