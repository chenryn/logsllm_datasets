func inc(A []int) bool {
for i := 0; i A[i+1]{
return false
}
return true
func dec(A []int) bool {
for i := 0; i  0 && this.Item[len(this.Item)-1].val  0 && tree[right+l]!= tree[1eft]) 11
(tree[right+1]== tree[left] 11 freq[tree[right+1]]> 0)) {
if counter > 0 && tree[right+l] != tree[left] {
counter--
right++
freq[tree[right]]++
}else{
if counter == 0 11(counter > 0 && right ==len(tree)-1) {
res = max(res, right-left+1)
freq[tree[left]]--
if freq[tree[left]]== 0{
counter++
1eft++
}
---
## Page 872
return res
907.SumofSubarrayMinimums
题目
Given an array of integers A, find the sum of min(B), where B ranges over every (contiguous)
subarray of A.
 + 6vo, onpo amse au una ae aq Ae lamsue a aus
Example 1:
Input: [3,1,2,4]
Output: 17
Explanation: Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2],
[1,2,4], [3,1,2,4].
Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1. Sum is 17.
Note:
1. 1 <= A.length <= 30000
2. 1 <= A[] <= 30000
题目大意
给定一个整数数组A，找到min（B）的总和，其中B的范围为A的每个（连续）子数组。
由于答案可能很大，因此返回答案模10^9+7。
解题思路