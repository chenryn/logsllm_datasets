(b) Example
restriction, Width=4.
Front-
Figure 2. Example for Width Restriction of the
State Space.
restriction is applied, the procedure is always to discard the
global states with the lowest weights from further explo-
ration. This approach is justiﬁed if a width is chosen that
leaves still enough states to be chosen.
applied to both of the restriction criteria, additionally. The
improved equation 3 for wState(si) is derived from equa-
tion 1 and includes the depth reduction factor.
wState(si) =
max
trj∈activeT Rset(si )
(3)
{wT rans(trj)} − df(depth(si)),
where df(depth(si)) denotes the reduction factor based
on the depth of si within the reachability graph. For
df(depth(si)) = 0 we obtain equation 1.
Selection of the global state, snext,
should be chosen from is deﬁned by:
the next transition
snext = argmaxsi∈stateSpacecurr,act wState(si),
(4)
i.e. the global state with the highest weight.
If several states with the same weight exist, a random selec-
tion among the candidates is applied.
Different depth functions df in conjunction with different
allowed widths are evaluated in sections 3.1 and 3.2.
2.2. Transition Selection
Once the next global state snext is selected, the next tran-
sition to be ﬁred (trnext) is determined by
trnext = argmaxtrj∈activeT Rset(snext)wT rans(trj),
(5)
the active transition with the maximum weight wT rans lo-
cated in snext.
A random selection is applied if trnext is not unique.
Transition Weight Calculation. As the goal of H-RAFT
is off-line transition weight calculation, the weight function
wT rans(trj) is based on the language elements of SDL.
These elements can be subdivided into two groups:
• transition input elements;
• transition action elements.
Balance of Subtrees. Usually, the deeper a reachability
graph grows, the wider it becomes. If we assume the width
restriction constant for all depths, the subtree of a single
global state may consume the whole width. Other subtrees
may be “pushed” out of the explored part of the reachability
graph. Figure 1(b) shows an example. The framed subtree
outgrows the others. To retain a more balanced exploration,
the weight of states that are located on a deeper level within
the graph may be reduced. This measure is indepedent of
whether a level- or a front-restriction is applied. It can be
Transition input elements comprise signal consumption,
timer expiration/consumption, spontaneous transition exe-
cution and model time progress. In other words: every event
triggering a transition trj.
Transition action elements subsume the actions per-
formed during transition execution, e.g. sending signals,
setting/resetting timers, assigning variable values, compar-
isons etc. In this paper we limit our investigations to the
transition input elements. Transition action elements are
subject to forthcoming publications.
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:53:01 UTC from IEEE Xplore.  Restrictions apply. 
Transition Input Elements. The transition input element
of a transition trj is denoted by input(trj). The following
list deﬁnes all transition input elements:
• input(trj) = timer expired: Transition trj is enabled
by an expired timer. Timer expiration may express the
end of a deadline, an important means in fault-tolerant
protocols.
• input(trj) = timer array expired: Transition trj is en-
abled by an expired timer that is part of an SDL timer
array. Modelling timers as arrays may be an indicator
that the process containing the timer array is a delay
process. By differentiating between single timers and
timer arrays we may distinguish those processes from
other ones.
• input(trj) = none: Transition trj is enabled sponta-
neously. The importance of spontaneous transitions for
models of fault tolerance protocols is discussed in the
next paragraph in conjunction with faulty processes.
• input(trj) = signal with parameters: Transition trj is
enabled by consumption of a signal containing param-
eters. Parameters reﬂect information ﬂow from one
component to another. This includes reception of cor-
rupted values from faulty nodes.
• input(trj) = signal without parameters: Transition
trj is enabled by consumption of a signal not contain-
ing any parameters. Signals without parameters are
often used as model internal communication means.
Thus, they should be distinguished from signals con-
taining parameters.
• input(trj) = timestep:
If no transition, except for
possibly deﬁned spontaneous transitions,
is active,
model time may advance. The transition input element
timestep refers to performing the time progress. This is
not an explicit SDL element. It represents the counter-
weight to spontaneous transitions, i.e. the higher this
weight, the more likely it is that no spontaneous tran-
sition ﬁres, but model time advances.
• input(trj) = timer ready: This implicit SDL element
expresses that a timer has expired and is inserted into
the input queue of the receiving SDL process. It pre-
ceeds every “timer expired” element.
Each of these transition inputs events is assigned a static
weight in the Integer range.
This weight is the basis for any weight computation of the
respective transition. Transition weights based on transition
input elements are deﬁned by
w(input(trj)) =
wT imerExp
wT imerArrayExp
wN one
wSignalW ithP arams
wSignalW ithoutP arams
wT imestep
wT imerReady
according to the respective input(trj).
The overall weight wT rans(trj) is currently deﬁned by
the unreﬁned static transition input weight of transition trj:
wT rans(trj) = w(input(trj)).
(6)
We refrain from modifying the static weights with one ex-
ception: The weight for spontaneous transitions in faulty
processes may be modiﬁed over time.
Spontaneous Transitions in Faulty Processes.
In [14]
implicit modelling of faulty behavior in SDL has been dis-
cussed. We consider any kind of faulty behaviour, even
the most universal fault-model “any message at any time”.
This paradigm comprises arbitrary faulty behaviour in the
value and time domain.
In SDL modelling this kind of
faulty behaviour of a component is comfortably imple-
mented through (possibly many) spontaneous transitions
which may ﬁre at any time and repeatedly. Thus, the state
space grows rapidly. In order to avoid state space explosion
due to arbitrary repetitions of those transitions, we provide
a mechanism to restrict the number of times each sponta-
neous transition within a faulty component may ﬁre on each
path of the reachability graph. This approach does not limit
the points in time when those transitions may ﬁre, just the
number of times it may ﬁre. This covers most of the possi-
ble faulty behaviour, as executing actions leading to a fault
(e.g. sending the same wrong signal) multiple times does
not create new faulty behaviours in most cases. Thus, the
limiting technique is a suitable compromise.
Let ﬁred(trj) count the number of times transition trj has
ﬁred on the current path in the reachability graph. In H-
RAFT we (currently) deﬁne
w(input(trj)) = wN one · nDecﬁred(trj ),
if input(trj) = ”nonef aulty process”.
(7)
nDec denotes the “decrease factor”. For nDec ∈ [0, 1]
equation 7 indicates that everytime transition trj ﬁred on
the current path, its weight is decreased exponentially in
subsequent activations along the path. A decrease factor
of zero indicates a constant weight of zero for all spon-
taneous transitions in faulty processes at all times, while
a decrease factor of 1 implies a constant weight equal to
the weight of spontanous transitions of non-faulty processes
(i.e. wN one). Different decrease factors are investigated in
section 3.3.
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:53:01 UTC from IEEE Xplore.  Restrictions apply. 
Signal-consumption-only Transitions. Equation 6 is ap-
plied for all transitions with one exception, the signal-
consumption-only transitions (SCOs). Signal-consumption-
only transitions consume their input signal, but neither
change the local state (i.e. they result in the same local
state), nor perform any action during the transition. These
transitions can be identiﬁed easily during off-line analysis.
They do not provide substantial progress during reachabil-
ity analysis as signal consumption is their only contribution.
Their elimination reduces the number of unneccessarily in-
vestigated transitions, thus saving computation time. In sec-
tions 3.4 and 3.6 the beneﬁt of eliminating these transitions
is investigated.
3. Experiments
SDT does not allow for adding other validation algo-
rithms. Other available tools have been developed w.r.t.
other goals, e.g. QUEST [9] focusses on performance analy-
sis. Thus, we developed our own tool: RAFT. The H-RAFT
algorithm has been implemented in the framework of that
tool. For comparison, the 3 algorithms provided by SDT
have also been implemented. Due to space limitations, de-
tails on the RAFT tool are subject to future publications.
Protocol Models. For the experiments presented here, we
chose two fault-tolerant communication protocols: the pen-
dulum protocol [10] [11] and the FlexRay protocol [8] [4].
The pendulum protocol results in a rather small model.
FlexRay is a large-scale industrial protocol resulting in a
huge model. By investigating the performance of H-RAFT
for this complex fault-tolerant protocol, the beneﬁts of the
algorithm for application in practice are evaluated.
For both models we inserted subtle design faults, lead-
ing to fault tolerance violations, artiﬁcally. These modiﬁed
models were then validated with H-RAFT with a wide vari-
ety of its parameters and further compared to the exhaustive,
bitstate and random algorithms.
Fault Model. After introducing design faults artiﬁcially,
faulty behaviour of different components has been speciﬁed
by using the “any message at any time” fault model. This
most universal fault-model comprises any faults in the value
and time domain.
Experimental Setup. Sections 3.1 and 3.2 show the re-
sults of varying the allowed width of the reachability graph
and different depth factors, respectively.
In section 3.3,
the results of applying restrictions to spontaneous transi-
tions located in faulty processes are presented. The focus of
section 3.4 is the investigation of signal-consumption-only
transitions. Finally, sections 3.5 and 3.6 discuss variations
of the transition input element weights without and with
elimination of signal-consumption-only transitions. The re-
sults are summarized in section 3.7. For all experiments we
deﬁned a runtime limit of 48 CPU-hours. If within that time
no fault tolerance violation has been observed, the experi-
mental run has been aborted. These runs are identiﬁed by
asterisks in the respective tables. Otherwise, experimental
runs have been stopped once a fault tolerance violation has
been discovered.
3.1. Experiment: Width Restriction of the Reacha-
bility Graph
The purpose of the ﬁrst experiment is to compare differ-
ent widths of the reachability graph allowed on each front
(see sec. 2.1). Thus, transition weights were all set to equal
values. A depth factor df(depth(si)) = 0 is assumed
and signal-consumption-only transitions are not eliminated.
Furthermore, no distinction between spontanous transitions
in the faulty processes and in the non-faulty processes is
made, i.e. their weight remains constant.
The results are shown in table 1. The ﬁrst line in each cell
indicates the number of transitions until a fault tolerance vi-
olation has been discovered. Numbers followed by an aster-
isk indicate the total number of transitions executed during
reachability analysis if no violation has been detected after
48 CPU-hours or if the exploration remains incomplete due
to reconvergence detections. The second line in each cell
(in italics) shows the maximum explored depth of the state
space.
model → Pendulum Protocol
width ↓
100
3276
17
3278
22
9179
17
9162
17
9155
17
FlexRay Protocol
1346403∗
13111
1471740∗
5811
28529∗
3219
1521765∗
1537866∗
2174
1734
250
500
750
1000
Table 1. Comparing Different Width Restric-
tions.
For the pendulum protocol, a smaller width results
quickly in discovery of a fault tolerance violation.
If
the width was restricted to 100 or 250 global states per
front, ca. 3280 transitions were executed until detection.
For higher width values, the number of executed transi-
tion triples. Evaluating width restriction with the FlexRay
model, no fault tolerance violation could be detected, in-
dependent of the chosen width. However, when combined
with other mechanisms (see following sections), width re-
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:53:01 UTC from IEEE Xplore.  Restrictions apply. 
striction proves advantageous for the large-scale FlexRay
model as well.
The better results for low width values w.r.t. the pendulum
protocol can be explained with the inherently small width
of the complete state space. If the allowed width is chosen
too high, the complete state space is investigated.
From these results, and the failure of the measure to lead
to detections for the larger protocol, we can conclude that
applying width restriction as the only heuristic is not suf-
ﬁcient to guide the reachability analysis to the “interesting
portions” of the state space. The next experiment evaluates
the same width restrictions with different depth functions
df .
3.2. Experiment: Width Restriction Including
Depth Factor
In experiment 3.1, a depth factor df(depth(si)) = 0 has
been assumed for calculation of the global state weight (see
eq.3). The second and third column of table 2 show the
results of applying other depth factors in combination with
the different widths. The ﬁrst line of the ﬁrst column cells