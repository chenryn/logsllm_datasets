unlike with TKIP, an adversary can forge packets in both directions.
Given that GCMP is expected to be adopted at a high rate in the next
few years under the WiGig name [58], this is a worrying situation.
In general an adversary can always replay, decrypt, or forge pack-
ets in a specific communication direction. The concrete direction
depends on the handshake being attacked. For example, because
the 4-way handshake attacks the client, it can be used to: (1) replay
unicast and broadcast/multicast frames towards the client; (2) de-
crypt frames sent by the client to the AP; and (3) forge frames from
the client to the AP. However, against the FT handshake we attack
the AP instead of the client, meaning we can replay, decrypt, and/or
Session F3:  Crypto PitfallsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1323CCS’17, October 30–November 3, 2017, Dallas, TX, USA.
Mathy Vanhoef and Frank Piessens
Table 3: Impact of our key reinstallation attack against the
4-way, FT, and group key handshake, in function of the data-
confidentiality protocol used. Each cell shows in which di-
rection frames can be replayed, decrypted, or forged.
send commands to devices [40]. We conjecture that our key rein-
stallation attack allows us to replay these commands. All combined,
these examples illustrate that the impact of replaying broadcast or
multicast frames should not be underestimated.
Replay c
Decrypt a
Forge
4-way impact
TKIP
CCMP
GCMP
FT impact
TKIP
CCMP
GCMP
Group impact
any
AP → client
AP → client
AP → client
client→ AP
client→ AP
client→ AP
AP → client c
client→ AP
client→ AP
client→ AP
AP → client
AP → client
AP → client
client→ AP b
client↔ AP b
AP → client
AP ↔ client b
a With this ability, we can hijack TCP connections to/from an
Internet endpoint and inject data into them.
b With this ability, we can use the AP as a gateway to inject packets
towards any device connected to the network.
c This denotes in which direction we can replay unicast and group-
addressed frames. For the group key handshake, only group-
addressed frames can be replayed.
forge packets in the reverse directions. Table 3 in the Appendix
summarizes this, taking into account the handshake being attacked.
Finally, in various cases we can forge messages from the client
towards the AP (see Table 3). Interestingly, the AP is generally not
the final destination of a frame, and instead will forward the frame
to its real destination. This means we can forge packets towards
any device connected to the network. Depending on the AP, it is
even possible to send a frame that is reflected back to the client.
6.2 Example Attack Scenarios
Among other things, our key reinstallation attacks allow an ad-
versary to decrypt a TCP packet, learn the sequence number, and
hijack the TCP stream to inject arbitrary data [37]. This enables
one of the most common attacks over Wi-Fi networks: injecting
malicious data into an unencrypted HTTP connection.
The ability to replay broadcast and multicast frames, i.e., group
frames, is also a clear security violation. To illustrate how this could
impact real systems, consider the Network Time Protocol (NTP)
operating in broadcast mode. In this mode, the client first goes
through an initialization process, and then synchronizes its clock
by listening to authenticated broadcast NTP packets [53]. Malho-
tra and Goldberg have shown that if these broadcast frames are
replayed, victims get stuck at a particular time forever [48]. Using
our group key attack, we can replay these frames even if they are
sent over a protected Wi-Fi network. Note that manipulating the
time in this manner undermines the security of, for example, TLS
certificates [44, 54, 61], DNSSEC [47], Kerberos authentication [47],
and bitcoin [25]. Another example is the xAP and xPL home au-
tomation protocol. These generally use broadcast UDP packets to
6.3 All-Zero Encryption Key Vulnerability
Our key reinstallation attack against the 4-way handshake uncov-
ered special behavior in wpa_supplicant. First, version 2.3 and
lower are vulnerable to our attacks without unexpected side-effects.
However, we found that version 2.4 and 2.5 install an all-zero en-
cryption key (TK) when receiving a retransmitted message 3. This
vulnerability appears to be caused by a remark in the 802.11 stan-
dard that indirectly suggests to clear the TK from memory once it
has been installed [1, §12.7.6.6]. Version 2.6 fixed this bug by only
installing the TK when receiving message 3 for the first time [50].
However, when patching this bug, only a benign scenario was con-
sidered where message 3 got retransmitted because message 4 was
lost due to background noise. They did not consider that an active
attacker can abuse this bug to force the installation of an all-zero
key. As a result, the patch was not treated as security critical, and
was not backported to older versions. Independent of this bug, all
versions of wpa_supplicant reinstall the group key when receiv-
ing a retransmitted message 3, and are also vulnerable to the group
key attack of Section 4.
Because Android internally uses a slightly modified version of
wpa_supplicant, it is also affected by these attacks. In particu-
lar, we inspected the official source code repository of Android’s
wpa_supplicant [32, 34], and found that all Android 6.0 releases
contain the all-zero encryption key vulnerability. Android Wear 2.0
also is vulnerable to this attack. Though third party manufacturers
might use a different wpa_supplicant version in their Android
builds, this is a strong indication that most Android 6.0 releases
are vulnerable. In other words, 31.2% of Android smartphones are
likely vulnerable to the all-zero encryption key vulnerability [33].
Finally, we also empirically confirmed that Chromium is vulnerable
to the all-zero encryption key vulnerability [68].
6.4 Limitations of the Security Proofs
Interestingly, our attacks do not violate the security properties
proven in formal analysis of the 4-way and group key handshake.
First, He et al. proved that the 4-way handshake provides key
secrecy and session authentication [39]. Key secrecy states that
only the authenticator and supplicant will posses the PTK. Since
we do not recover the PTK, this properly still holds. Session au-
thentication was proven using the standard notion of matching
conversations [39]. Intuitively, this says a protocol is secure if the
only way that an adversary can get a party to complete the proto-
col is by faithfully relaying messages [12]. Our attacks, including
the channel-based MitM position we employ, do not violate this
property: we can only make endpoints complete the handshake by
forwarding (retransmitted) messages.
Second, He et al. proved key ordering and key secrecy for the
group key handshake [39]. Key ordering assures that supplicants
do not install an old GTK. This remains true in our attack, since we
reinstall the current group key. Additionally, we do not learn the
group key, hence key secrecy is also not violated by our attacks.
Session F3:  Crypto PitfallsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1324Key Reinstallation Attacks: Forcing Nonce Reuse in WPA2
CCS’17, October 30–November 3, 2017, Dallas, TX, USA.
However, the proofs do not model key installation. Put differently,
they do not state when the key is installed for use by the data-
confidentiality protocol. In practice, this means the same key can
be installed multiple times, thereby resetting associated nonces
and/or replay counters used by the data-confidentiality protocol.
6.5 Countermeasures
Key reinstallation attacks can be mitigated at two layers. First, the
entity implementing the data-confidentiality protocol should check
whether an already-in-use key is being installed. If so, it should
not reset associated nonces and replay counters. This prevents our
attacks, at least if an adversary cannot temporarily trick an imple-
mentation into installing a different (old) key before reinstalling
the current one. In particular, when using this countermeasure it is
essential that the replay counter of received group key handshake
messages only increases. Otherwise, an adversary can use an old
group message 1 to make a victim temporarily install an old (differ-
ent) key, to subsequently reinstall the current group key using a
more recent group message 1.
A second solution is to assure that a particular key is only in-
stalled once into the entity implementing the data-confidentiality
protocol during a handshake execution. For example, the generated
session key in a 4-way handshake should only be installed once.
When the client receives a retransmitted message 3, it should reply,
but not reinstall the session key. This can be accomplished by adding
a boolean variable to the state machine of Figure 3. It is initialized to
false, and set to true when generating a fresh PTK in PTK-START. If
the boolean is true when entering PTK-DONE, the PTK is installed
and the boolean is set to false. If the boolean is false when entering
PTK-DONE, installation of the PTK is skipped. Note that this is
precisely what version 2.6 and higher of wpa_supplicant is doing.
Proving the correctness of the above countermeasure is straight-
forward: we modeled the modified state machine in NuSMV [23],
and used this model to prove that two key installations are always
separated by the generation of a fresh PTK. This implies the same
key is never installed twice. Note that key secrecy and session
authentication was already proven in other works [39].
We are currently notifying vendors about the vulnerabilities we
discovered, such that they can implement these countermeasures.
A full list of vendors that are known to be affected by some variant
of our attacks will be made available at [22].
6.6 Discussion
There are some important lessons that can be learned from our
results. First, the specification of a protocol should be sufficiently
precise and explicit. For example, when attacking the 4-way hand-
shake in Section 3.3, we observed that the 802.11 standard is am-
biguous as to which replay counter values should be accepted. A
more precise or formal specification would avoid any such potential
incorrect interpretations.
Second, it is not because a protocol has been formally proven
secure, that implementations of it are also secure. In our case, the
model of the 4-way handshake used in formal proofs did not fully
reflect reality. This is because it did not define when the negotiated
session key should be installed. As a result, there was no guarantee
that a session key is installed just once. Only by reading real code
did we realize the formal model did not match reality, and that keys
may be reinstalled. In this regard, formal proofs may in fact be coun-
terproductive: once a protocol is formally verified, the community
may become less interested in auditing actual implementations.
Interestingly, the observation that a model may be wrong, and
therefore does not accurately reflect reality, also applies to the proof
of our own countermeasure. Put differently, it is not because we
modeled the countermeasure in NuSMV, that all implementations
are now suddenly secure. In reality, our formal state machine may
not accurately reflect certain implementations, patches of vendors
may be flawed, or a vendor may be affected by as-of-yet unknown
variants of the attack. As a result, it is critical to keep auditing and
testing actual implementations.
Another lesson is that the data-confidentiality protocol should
provide some protection against nonce reuse. For example, with
GCMP the authentication key can be recovered in case of nonce
recuse, while this is not so for CCMP. More generally, a nonce
misuse-resistant encryption scheme should be used, examples being
AES-SIV, GCM-SIV, or HS1-SIV [16]. These reduce the impact of
nonce reuse, and hence also the impact of key reinstallation attacks.
7 RELATED WORK
In this section we explore the history of key reinstallation attacks,
and give an overview of other Wi-Fi and protocol security works.
7.1 Key Reinstallation Attacks
We are not aware of prior work on key reinstallation attacks. This
lack of prior work is likely one of the reasons why the cryptographic
Wi-Fi handshakes we investigated were still vulnerable to these
attacks. For example, only now did we discover that the 14-year-
old 4-way handshake is vulnerable to key reinstallation attacks.
Moreover, this flaw is not just present in implementations, but in
the protocol specification (standard) itself.
One somewhat related scenario that also leads to nonce reuse
are power failures. Here, after a power failure, the key is restored
from non-violate memory on boot, but the nonce will be reset to
its initial value. Suggested solutions to this problem are given by
Zenner [76]. However, unlike key reinstallation attacks, triggering
power failures cannot be done remotely over a network. Instead,
this requires physical access to the device being attacked. Moreover,
power failures do not affect the security of the protocols we studied,
since these handshakes are precisely used to avoid maintaining
state between old and new connections.
In [16], Bock et al. discovered that some TLS servers were using
static nonces. This was caused by a faulty implementation of the TLS
record layer protocol. That is, it was not caused by a reinstallation
of an already-in-use key. Additionally, some servers used randomly
generated nonces, which means in practice nonce reuse is likely to
occur due to the birthday paradox. In contrast, key reinstallation
attacks allow an adversary to force nonce reuse on demand by
replaying handshake message(s), and are caused by flaws in the
specification (or implementation) of the handshake protocol.
McGrew wrote a survey of best practices for generating IVs
and nonces, and summarizes how they are generated and used in
several protocols [51]. However, in the discussion of security risks,
(variations of) key reinstallation attacks are not mentioned.
Session F3:  Crypto PitfallsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1325CCS’17, October 30–November 3, 2017, Dallas, TX, USA.
Mathy Vanhoef and Frank Piessens
Another somewhat related work is that of Beurdouche et al. [14]
and that of de Ruiter and Poll [27]. They discovered that several
TLS implementations contained faulty state machines. In particular,
certain implementations wrongly allowed handshake messages to
be repeated. However, they were unable to come up with example
attacks that exploited the ability to repeat messages. We conjecture
that an adversary can repeat certain messages to trick an endpoint
into reinstalling the TLS session keys, i.e., a key reinstallation at-
tack might be possible. We consider it interesting future work to
determine whether this leads to practical attacks.
Reuse of IVs is also an issue in the broken WEP protocol [17, 18].
In particular, Borisov et al. discovered that certain wireless net-
work cards initialized the WEP IV to zero each time they were
(re)initialized. Consequently, keystreams corresponding to small
IVs are likely to be reused [18]. However, in contrast to key rein-
stallation attacks, these IV resets cannot be triggered remotely.
7.2 Wi-Fi and Network Protocol Security
In one of the first formal analysis of the 4-way handshake, He
and Mitchell discovered a denial-of-service vulnerability [38, 55].
This led to the standardization of a slightly improved 4-way hand-
shake [1]. In 2005, He et al. presented a formal correctness proof