N/A
on(), off()
off(), strobe(),
siren(), both()
Attributes
lock (lock status)
battery (battery status)
switch (switch status)
alarm (alarm status)
capability.refresh
refresh()
N/A
and attributes (properties). Commands represent ways in which
a device can be controlled or actuated. Attributes represent the
state information of a device. Table I lists example capabilities.
Consider the SmartApp in Listing 1. The preferences
section has two input statements that specify two capabilities:
capability.lock and capability.switch. When a
user installs this SmartApp, the capabilities trigger a device
enumeration process that scans all the physical devices cur-
rently paired with the user’s hub and, for each input statement,
the user is presented with all devices that support the speciﬁed
capability. For the given example, the user will select one
device per input statement, authorizing the SmartApp to use
that device. Figure 2 shows the installation user interface for
the example SmartApp in Listing 1.
Once the user chooses one device per input statement, the
SmartThings compiler binds variables lock1 and sw1 (that
are listed as strings in the input statements) to the selected
lock device and to the selected switch device, respectively.
The SmartApp is now authorized to access these two devices
via their SmartDevice instances.
A given capability can be supported by multiple de-
vice types. Figure 3 gives an example. SmartDevice1 con-
trols a ZWave lock and SmartDevice2 controls a mo-
tion sensor. SmartDevice1 supports the following capa-
bilities: capability.lock, capability.battery,
and capability.refresh. SmartDevice2 supports a
slightly different set of capabilities: capability.motion,
capability.battery, and capability.refresh.
Installing a battery-monitoring SmartApp that
requests
in the user being
capability.battery would result
asked to choose from a list of devices consisting of the ZWave
lock and the motion sensor. An option is available in the
input statement to allow the named variable to be bound to a
list of devices. If such a binding were done, a single battery
monitoring SmartApp can monitor the battery status of any
number of devices.
3) Events and Subscriptions: When a SmartApp is ﬁrst
installed, the predeﬁned installed method is invoked. In
the SmartApp of Listing 1, installed creates two event
subscriptions to switch sw1’s status update events (Lines 20,
21). When the switch is turned on, the switch SmartDevice
raises an event
that causes the function onHandler to
execute. The function unlocks the physical lock corresponding
to lock1 (Line 25). Similarly, when the switch is turned off,
the function offHandler is invoked to lock the physical
lock corresponding to lock1 (Line 29).
Fig. 1. SmartThings architecture overview.
1 definition(
2
name: "DemoApp", namespace: "com.testing",
author: "IoTPaper", description: "Test App",
category: "Utility")
3
4
9
10
5
6 //query the user for capabilities
7 preferences {
8
section("Select Devices") {
input "lock1", "capability.lock", title:
"Select a lock"
input "sw1", "capability.switch", title:
"Select a switch"
}
11
12 }
13
14 def updated() {
unsubscribe()
15
initialize()
16
17 }
18
19 def installed() {
20
lock1.unlock()
21
22 }
23
24 def onHandler(evt) {
25
26 }
27
28 def offHandler(evt) {
29
30 }
lock1.lock()
subscribe sw1, "switch.on", onHandler
subscribe sw1, "switch.off", offHandler
Listing 1. SmartApp structure.
protocols (for example, ZWave and ZigBee), and exposes the
physical device to the rest of the SmartThings ecosystem.
Next, we explain the key concepts of the programming
framework. Listing 1 shows an example SmartApp that locks
and unlocks a physical door lock based on the on/off state of
a switch. The SmartApp begins with a definition section
that speciﬁes meta-data such as SmartApp name, namespace,
author details, and category.
2) Capabilities & Authorization: SmartThings has a secu-
rity architecture that governs what devices a SmartApp may
access. We term it as the SmartThings capability model. A
capability is composed of a set of commands (method calls)
639639
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:33 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 2.
Installation user interface and device enumeration: This example
shows that an app asks for devices that support capability.lock and
capability.switch. The screen on the right results when the user taps
on the ﬁrst input ﬁeld of the screen on the left. SmartThings enumerates all
lock devices (there is only one in the example). The user must choose one or
more devices that the app can access.
4) WebService SmartApps: SmartApps can choose to ex-
pose Web service endpoints, responding to HTTP GET, PUT,
POST, and DELETE requests from external applications.
HTTP requests trigger endpoint handlers, speciﬁed by the
SmartApp, that execute developer-written blocks of Groovy
code.
For securing the Web service endpoints, the cloud backend
provides an OAuth-based authentication service. A SmartApp
choosing to provide Web services is registered with the
cloud backend and is issued two 128-bit random values: a
client ID and client secret. The SmartApp developer typi-
cally also writes the external app that will access the Web
service endpoints of the SmartApp. An external app needs
the following to access a SmartApp: (a) possess or obtain
the client ID and client secret for the SmartApp; and (b)
redirect
the user to an HTTPS-protected Webpage on the
SmartThings Website to authenticate with the user-speciﬁc
user ID and password. After a multi-step exchange over
HTTPS, the external app acquires a scoped OAuth bearer
token that grants access to the speciﬁc SmartApp for which
the client ID and client secret were issued. Details of the
entire SmartThings authentication protocol for access to Web
services can be found at http://docs.smartthings.com/en/latest/
smartapp-web-services-developers-guide/overview.html.
5) Sandboxing: SmartThings cloud backend isolates both
SmartApps and SmartDevices using the Kohsuke sandbox
technique [20]. We determined this using manual fuzzing—
we built test SmartApps that tried unauthorized operations
and we observed the exception traces. Kohsuke sandboxing
is an implementation of a larger class of Groovy source
code transformers that only allow whitelisted method calls to
succeed in a Groovy program. For example, if an app issues a
threading call, the security monitor denies the call (throwing a
Fig. 3. SmartApps vs. SmartDevices vs. Physical Devices: When a user
installs this SmartApp, SmartThings will show the lock and the motion
sensor since both the corresponding device handlers (SmartDevice1 and
SmartDevice2) expose the requested capability.
security exception) since threading is not on the SmartThings
whitelist. Apps cannot create their own classes, load external
JARs, perform reﬂection, or create their own threads. Each
SmartApp and SmartDevice also has a private data store.
In summary, from a programming perspective, SmartApps,
SmartDevices, and capabilities are key building blocks. Capa-
bilities deﬁne a set of commands and attributes that devices
can support and SmartApps state the capabilities they need.
Based on that, users bind SmartDevices to SmartApps.
B. Threat Model
Our work focuses on systematically discovering and exploit-
ing SmartThings programming framework design vulnerabili-
ties. Any attacks involving a framework design ﬂaw are within
scope. We did not study attacks that attempt to circumvent the
Groovy runtime environment, the on-hub operating system,
or the cloud backend infrastructure. Bugs in those areas can
be patched. In contrast, attacks focused on design ﬂaws have
more far-reaching impact since programming frameworks are
difﬁcult to change without signiﬁcant disruption once there is
a large set of applications that use the framework.
IV. SECURITY ANALYSIS OF SMARTTHINGS FRAMEWORK
We investigated the security of the SmartThings framework
with respect to ﬁve general themes. Our methodology involved
creating a list of potential security issues based on our study
of the SmartThings architecture and extensively testing each
potential security issue with prototype SmartApps. We survey
each investigation below and expound each point later in this
section.
1) Least-privilege principle adherence: Does the capabil-
ity model protect sensitive operations of devices against
untrusted or benign-but-buggy SmartApps? It is important
to ensure that SmartApps request only the privileges they
need and are only granted the privileges they request.
However, we found that many existing SmartApps are
overprivileged.
2) Sensitive event data protection: What access control
methods are provided to protect sensitive event data gen-
erated by devices against untrusted or benign-but-buggy
640640
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:33 UTC from IEEE Xplore.  Restrictions apply. 
3) External,
SmartApps? We found that unauthorized SmartApps can
eavesdrop on sensitive events.
third-party integration safety: Do Smar-
tApps and third-party counterpart apps interact in a secure
manner? Insecure interactions increase the attack surface
of a smart home, opening channels for remote attackers.
Smart home frameworks like SmartThings should limit
the damage caused in the event of third-party security
breaches. We found that developer bugs in external plat-
forms weaken system security of SmartThings.
4) External input sanitization: How does a WebService
SmartApp protect itself against untrusted external input?
Similar to database systems and Web apps, smart home
apps too, need to sanitize untrusted input. However,
we found that SmartApp endpoints are vulnerable to
command injection attacks.
5) Access control of external communication APIs: How
does the SmartThings cloud backend restrict external
communication abilities for untrusted or benign-but-
buggy SmartApps? We found that Internet access and
SMS access are open to any SmartApps without any
means to control their use.
A. Occurrence of Overprivilege in SmartApps
We found two signiﬁcant issues with overprivilege in the
SmartThings framework, both an artifact of the way its ca-
pabilities are designed and enforced. First, capabilities in the
SmartThings framework are coarse-grained, providing access
to multiple commands and attributes for a device. Thus, a
SmartApp could acquire the rights to invoke commands on
devices even if it does not use them. Second, a SmartApp can
end up obtaining more capabilities than it requests because
of the way SmartThings framework binds the SmartApp to
devices. We detail both issues below.
Coarse-Grained Capabilities. In the SmartThings frame-
work, a capability deﬁnes a set of commands and attributes.
Here is a small example of capability.lock:
• Associated commands: lock and unlock
• Associated attribute(s): lock. The lock attribute has the
same name as the command, but the attribute refers to
the locked or unlocked device status.
Our investigation of the existing capabilities deﬁned in the
SmartThings architecture shows that many capabilities are
too coarse-grained. For example, the “auto-lock” SmartApp,
available on the SmartThings app store, only requires the
lock command of capability.lock but also gets access
to the unlock command, thus increasing the attack surface if
the SmartApp were to be exploited. If the lock command is
misused, the SmartApp could lock out authorized household
members, causing inconvenience whereas,
if the unlock
command is misused, the SmartApp could leave the house
vulnerable to break-ins. There is often an asymmetry in risk
with device commands. For example, turning on an oven could
be dangerous, but turning it off is relatively safe. Thus, it
is not appropriate to automatically grant a SmartApp access
to an unsafe command when it only needs access to a safe
command.
To provide a simple measure of overprivilege due to capa-
bilities being coarse-grained, we computed the following for
each evaluated SmartApp, based on static analysis and manual
inspection: { requested commands and attributes } — { used
commands and attributes }. Ideally, this set would be empty
for most apps. As explained further in §V-B, over 55% of
existing SmartApps were found to be overprivileged due to
capabilities being coarse-grained.
Coarse SmartApp-SmartDevice Binding. As discussed in
§III-A, when a user installs a SmartApp, the SmartThings
platform enumerates all physical devices that support
the
capabilities declared in the app’s preferences section
and the user chooses the set of devices to be authorized to
the SmartApp. Unfortunately, the user is not told about the
capabilities being requested and only is presented with a list of
devices that are compatible with at least one of the requested
capabilities. Moreover, once the user selects the devices to
be authorized for use by the SmartApp, the SmartApp gains
access to all commands and attributes of all the capabilities
implemented by the device handlers of the selected devices.
We found that developers could not avoid this overprivilege
because it was a consequence of SmartThings framework
design.
also exposes
More concretely, SmartDevices provide access to the
corresponding physical devices. Besides managing the
physical device and understanding the lower-level protocols,
each SmartDevice
capabilities,
appropriate to the device it manages. For example, the default
ZWave lock SmartDevice supports the following capabilities:
capability.actuator, capability.lock,
capability.polling, capability.refresh,
capability.sensor, capability.lockCodes,
and capability.battery.
set of
a
These capabilities reﬂect various facets of the lock device’s
operations. Consider a case where a SmartApp requests the
capability.battery, say, to monitor the condition of the lock’s
battery. The SmartThings framework would ask the user to
authorize access to the ZWave lock device (since it matches
the requested capability). Unfortunately, if the user grants the
authorization request, the SmartApp also gains access to the
requested capability and all the other capabilities deﬁned for
the ZWave lock. In particular, the SmartApp would be able
to lock/unlock the ZWave lock, read its status, and set lock
codes.
To provide a simple measure of overprivilege due to unnec-
essary capabilities being granted, we computed the following
for each evaluated SmartApp, based on static analysis and
manual inspection: { granted capabilities } — { used capabili-
ties }. Ideally, this set would be empty. As explained further in
§V-B, over 42% of existing SmartApps were found to be over-
privileged due to additional capabilities being granted. In that
section, we also discuss how this measure was conservatively
computed.
641641
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:33 UTC from IEEE Xplore.  Restrictions apply. 
B. Insufﬁcient Sensitive Event Data Protection
SmartThings supports a callback pattern where a SmartDe-
vice can ﬁre events ﬁlled with arbitrary data and SmartApps
can register for those events. Inside a user’s home, each
SmartDevice is assigned a 128-bit device identiﬁer when it
is paired with a hub. After that, a device identiﬁer is stable
until it is removed from the hub or paired again. The 128-bit
device identiﬁers are thus unique to a user’s home, which is
good in that possession of the 128-bit device identiﬁer from
one home is not useful in another home. Nevertheless, we
found signiﬁcant vulnerabilities in the way access to events is
controlled:
• Once a SmartApp is approved for access to a SmartDe-
vice after a capability request, the SmartApp can also
monitor any event data published by that SmartDevice.
The SmartThings framework has no special mechanism
for SmartDevices to selectively send event data to a subset
of SmartApps or for users to limit a SmartApp’s access
to only a subset of events.
• Once a SmartApp acquires the 128-bit
identiﬁer for
a SmartDevice,
the events of that
SmartDevice, without gaining any of the capabilities that
device supports.
it can monitor all
• Certain events can be spoofed. In particular, we found
that any SmartApp or SmartDevice can spoof location-