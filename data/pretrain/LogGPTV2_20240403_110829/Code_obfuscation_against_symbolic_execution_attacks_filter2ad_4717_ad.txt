bolic execution due to the larger size of SMT queries. Flat
and CFF slow down symbolic execution due to the larger
number of SMT queries issued to the solver. Virt slows down
symbolic execution due to the high number of fetch-decode-
dispatch instructions added. The results also indicate in
which order obfuscation transformations should be applied
to increase eﬀectiveness. None of these obfuscation trans-
formations add input-dependent paths to the programs.
In § 3.3 we have symbolically executed another set of
programs obfuscated with 5 representative transformations
from Tigress used in § 3.2. Transformations from Obfusca-
tor LLVM were not used in § 3.3 because they had similar
eﬀects as their corresponding transformations from Tigress.
In this experiment we compared the performance of diﬀerent
symbolic execution engines to ﬁnd test cases that lead to a
certain (diﬃcult to reach) path in the obfuscated programs.
We observed that KLEE is most eﬀective followed by angr.
We do not know if these results generalize for all possible
programs. However, we believe that they have some degree
of generality due to the heterogeneity of our datasets and
the intuitive explanations we provide in our observations.
4. PROPOSED OBFUSCATION
The proposed obfuscation transformations are inspired
by observation 10 in Experiment 3 from § 3.2, i.e. branch
instructions added by control-ﬂow obfuscation transforma-
tions do not depend on program inputs. Therefore, we
propose making branch instructions added by control-ﬂow
obfuscation transformations dependent on program inputs
to increase the slowdown of symbolic execution. Making
such branch instructions input dependent may or may not
be eﬀective for existing obfuscation transformations. For in-
stance, making the opaque predicates p added by Tigress in-
put dependent, causes KLEE to issue a query on the branch
condition corresponding to p. However, the SMT solver al-
ways determines that p or ¬p is unsatisﬁable and does not
analyze the code in unfeasible paths.
In the following we
propose two obfuscation transformations which introduce
feasible paths in the original program.
4.1 Range Dividers
Our ﬁrst proposal is an obfuscation transformation called
range divider. Range dividers are branch conditions that
can be inserted at an arbitrary position inside a basic block,
such that they divide the input range into multiple sets.
In contrast to opaque predicates, range divider predicates
may have multiple branches, any of which could be true
u n s i g n e d char * str = argv [1];
u n s i g n e d int hash = 0;
for ( int i = 0; i  42) {
hash = ( hash * 128) ^ chr ;
hash = ( hash << 7) ^ chr ;
} else {
}
char chr = * str ;
switch ( chr ) {
u n s i g n e d char * str = argv [1];
u n s i g n e d int hash = 0;
for ( int i = 0; i < strlen ( str ) ; str ++ , i ++) {
Listing 5: Program from Listing 3 obfuscated with
maximum number of branches of range divider
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
...
default : // o b f u s c a t e d version of case 1
}
if ( hash == 809267) printf ( " win \ n " ) ;
case 2: // o b f u s c a t e d version of case 1
case 1: hash = ( hash << 7) ^ chr ;
break ;
break ;
break ;
}
and false depending on program input. This will cause a
symbolic execution engine to explore all branches of a range
divider. In order to preserve the functionality property of
an obfuscator, we use equivalent instruction sequences in
all branches of a range divider predicate, as illustrated in
Listing 2. To prevent compiler optimizations from remov-
ing range divider predicates, due to equivalent code in their
branches, we employ software diversity (on the code of every
branch) via diﬀerent obfuscation conﬁgurations, e.g. in List-
ing 2 we used EncodeArithmetic on the else branch. We have
experimented with all optimization levels of LLVM clang
and none of them remove range divider predicates if their
branches are obfuscated. On the downside, range dividers
increase the size of the program proportionally to the total
number of branches.
The eﬀectiveness of a range divider predicate against sym-
bolic execution depends on: (1) number of branches of the
predicate, denoted ρ and (2) the number of times the predi-
cate is executed, denoted τ . More speciﬁcally, its number of
paths increases according to the function: ρτ . For example,
consider the program from Listing 3, which computes a value
(hash) based on its ﬁrst argument (argv[1]) and outputs
“win” on the standard output if this value is equal to 809267.
It has an execution tree with 2 × strlen(argv[1]) paths.
The program in Listing 4 is obtained by obfuscating the pro-
gram from Listing 3 using divide range predicate with ρ = 2
branches. The resulting program has 2strlen(argv[1]) paths,
because the predicate is executed τ = strlen(argv[1])
times. We can further increase the number of paths by
adding more branches to the divide range predicate from
Listing 4. However, the number of possible branches is
upper-bounded by the cardinality of the type of the variable
used in the range divider.
In the example from Listing 4
the maximum number of branches is 256 because variable
chr is of type char. Therefore, the maximum number of
branches in this example is achieved by a switch-statement
Listing 6: Point function program
1
2
3
4
5
if ( argv [1][0] == ’1 ’ &&
argv [1][1] == ’2 ’ &&
argv [1][2] == ’3 ’ &&
argv [1][3] == ’4 ’ &&
argv [1][4] == ’5 ’) printf ( " win \ n " ) ;
with 256 cases as shown in Listing 5. This eﬀectively results
in a branching factor of ρ = 256 for each iteration of the
loop. Therefore the number of paths is 256strlen(argv[1]).
Input Invariants
The symbolic execution slowdown induced by range di-
viders is caused by: (1) the increase in the number of paths,
but also (2) the type of obfuscation transformations applied
on each branch of each range divider. Due to lack of space
we do not provide an evaluation of range dividers here. In-
stead, we turn to a related obfuscation transformation in
§ 4.2, which is even stronger against symbolic execution.
4.2
The divide range obfuscation transformation proposed in
§ 4.1 may induce a high increase in the eﬀort needed by sym-
bolic execution engines. However, this depends on the code
which is being obfuscated. If the code does not include any
loops (e.g. the program from Listing 6), then obfuscating
with range dividers will not induce a signiﬁcant slowdown
of symbolic execution attacks. Therefore, in this section we
propose obfuscation transformations which are able to ob-
fuscate even the simplest code, however, with the cost of
changing the exact input-output semantics of the program.
That is, we deliberately violate the functionality property
of the obfuscator deﬁnition of Barak et al. [8]. The deﬁ-
nition in [8] states that if O(P ) is the obfuscated version
of program P : D → R, where D, R ⊂ {0, 1}∗ are the in-
put domain, respectively output range of the program, then
∀i ∈ D : P (i) = O(P )(i). However, Barak et al. [8] also
deﬁne an approximate obfuscator as a transformation for
which the functionality property holds with high probabil-
ity. Similarly to an approximate obfuscator our obfuscation
approach relaxes the functionality property, but does so in
a diﬀerent way. In our approach the functionality property
only holds for the set of inputs that satisfy the input invari-
ants (i.e. predicates over inputs), speciﬁed by the user to the
obfuscation engine. For all other input values the behavior of
the program is undeﬁned. With this obfuscation approach,
we are essentially extending the input domain and output
range of a program, i.e. O(P ) : D(cid:48) → R(cid:48), where D ⊆ D(cid:48) and
R ⊆ R(cid:48). In fact one could imagine the extensions go even
further, allowing O(P ) to fail in diﬀerent ways than P , such
as P crashing on bad inputs, while O(P ) entering an inﬁnite
loop on the same bad inputs, or producing the wrong results,
etc. We believe this idea has very interesting implications
for future implementations of obfuscation transformations.
We have implemented this transformation on top of the
Virtualize transformation of Tigress10. We picked Virtual-
ize because it was the strongest transformation in our case
study, however, note that this idea could be applied to other
transformations as well. We encoded the bytecode generated
by Virtualize using the input invariant (speciﬁed as an argu-
ment of the obfuscation transformation), as the key. If the
input value given by the user satisﬁes the invariant, then
the bytecode is correctly decoded and the program executes
like its unobfuscated counterpart, otherwise its behavior is
10http://tigress.cs.arizona.edu/
undeﬁned. By using the invariant as a decoding key we mul-
tiply the size of the search space for symbolic execution by
the cardinality of the range of possible key values (for ob-
fuscations diﬀerent from virtualization, polynomial increases
seem possible). A user can specify the input invariants us-
ing: (1) the position of the argument in the list of argu-
ments, (2) the type of the argument (integer or string) or
its length and (3) the exact value or the interval of possible
argument values. Note that diﬀerent invariant types lead
to keys with diﬀerent cardinalities. The invariants with the
highest cardinality keys are those that specify an integer or
string argument with an exact value.
The eﬀectiveness of this transformation against symbolic
execution engines is higher than any other transformation
we have employed in our case-study. To illustrate its eﬀec-
tiveness, we have chosen a program consisting of a single
if-statement shown in Listing 6, because it is representative
of the simplest possible code structure that one may want to
protect against symbolic execution. We obfuscated this pro-
gram using our modiﬁed Virtualize transformation with the
invariant that the input is equal to 12345 and executed both
the original program from Listing 6 and its obfuscated coun-
terpart using KLEE. The point function from the program
in Listing 6 was analyzed in approximately 500 milliseconds.
While attempting to run the symbolic execution engine un-
interrupted, similar to experiment 2 from § 3.2, we resorted
to stopping the analysis of the obfuscated program after it
ran for 1 week. However, we note that the test suite that
would ﬁnd the path that prints “win” (the goal of experi-
ment 5 in § 3.3) was found in approximately 4980 seconds,
which is still a slowdown by 4 orders of magnitude w.r.t. the
unobfuscated counterpart. Contrast this with the smaller
slowdown factors from Table 3.
5. RELATED WORK
Our work involves contributions related both to the char-
acterization of obfuscation strength and to new obfuscation
approaches, as spelt out in the following.
5.1 Characterizing Obfuscation Strength
Ceccato et al. [15] characterize the strength of obfusca-
tion transformations by potency against human-assisted at-
tacks, e.g. step-by-step debugging. This involves user stud-
ies where test subjects are asked to perform some tasks (e.g.
bypass a check or recover information) on code obfuscated
with a limited number of transformations. Such user-studies
are inherently biased by small sets of test subjects. More-
over, test subjects are generally bachelor or master students
of computer science, which are seldom experienced in reverse
engineering obfuscated code. Nevertheless, such works are
important for measuring potency against human-assisted at-
tacks; our work is complementary to this approach.
Anckaert et al. [3] characterize the resilience of code obfus-
cation transformations via code complexity metrics, e.g. Mc-
Cabe cyclomatic complexity, knot count etc. This approach
is typically static and does not work reliably for code obfus-
cated with transformations which modify the code at run-
time (e.g. virtualization, self-modifying code). Our work is
diﬀerent to this approach because in § 3 we indicate that
code characteristics that are most important for slowing
down symbolic execution, (such as the number of control-
ﬂow statements dependent on input and their depth) are
not increased by applying a set of obfuscation transforma-
tions, even though code complexity metrics are increased.
Dalla Preda [23] models attacks against obfuscation trans-
formations as abstract domains expressing certain properties
of program behaviors. Since obfuscation transformations
are characterized by the most concrete preserved property,
the complete lattice of abstract domains allows comparing
obfuscation transformations with respect to their potency
against various attackers. Therefore, an obfuscation trans-
formation is either eﬀective against an attacker or not, re-
gardless of the diﬀerence in eﬀort needed to deobfuscate pro-
grams obfuscated with diﬀerent transformations. Our work
provides a more ﬁne grained characterization of the resilience
of obfuscation transformations w.r.t. to the eﬀort required
by the attacker to deobfuscate a program.
5.2 Anti-Symbolic Execution Obfuscations
Anand et al. [1] indicate 3 fundamental issues of symbolic
execution: (1) path explosion, (2) path divergence and (3)
complex constraints. Therefore, works that propose obfus-
cation techniques against symbolic execution focus on ex-
ploiting at least one of these fundamental issues.
Path Explosion: Wang et al. [56] propose an approach
based on an unsolved mathematical problem, which involves
only linear operations on integers, called the Collatz conjec-
ture [30]. This obfuscation implies adding a loop bounded by
a symbolic value to an existing program. Such a loop would
generate a path explosion for the symbolic execution engine,
however, executing it dynamically, it will always converge to
a ﬁxed known value, i.e. 1 in the case of the Collatz conjec-
ture. Our work also proposes an approach that causes path
explosion, however, in contrast to Wang et al. [56], our ap-
proach is not based on unsolved mathematical conjectures.
Path divergence: Yadegari and Debary [57], Sharif et
al. [49] and Cavallaro et al. [13] show that converting ex-
plicit control-ﬂow into implicit control-ﬂow hampers white-
box test case generators based on taint-analysis and sym-
bolic execution. Path divergence refers to situations where
the symbolic execution engine cannot compute precise path
constraints from the program code. This leads to a diver-
gence between generated tests and the actual program paths.
The key to transforming explicit to implicit control ﬂow is
using symbolic variables for computing an address where the
program jumps to unconditionally. This transformation re-
moves any comparisons between the symbolic variables and
constants used by symbolic execution engines. In the case of
such obfuscation transformations one may employ heuristics
based on knowledge about the architecture of the CPU [57].
Another type of obfuscation transformation which is kno-
wn to cause path divergence is dynamically modifying code
[4]. Such code cannot be analyzed statically, because its
static image changes at runtime while the code is executing.
If the value of the instructions that are being dynamically