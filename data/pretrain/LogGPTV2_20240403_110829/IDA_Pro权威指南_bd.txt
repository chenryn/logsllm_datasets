### IDA 的 idsutils 实用工具

IDA 的 `idsutils` 实用工具用于创建 `.ids` 文件。这些实用工具包括两个库解析器：从 Windows DLL 中提取信息的 `dll2idt` 和从 ar 库中提取信息的 `ar2idt.exe`。无论使用哪一个解析器，其输出都是一个 `.idt` 文本文件，每行显示一个导出函数，并将导出函数的序号与函数名称对应起来。

#### .idt 文件格式

`.idt` 文件的语法非常简单，`idsutils` 自带的 `readme.txt` 文件详细介绍了这种语法。大多数行用于描述导出函数，格式如下：

- **导出项** 以正数开头，表示导出函数的序号。
- **序号后** 是一个空格，接着是 `Name=` 指令，后面跟着函数名称。例如：
  ```
  483 Name=RegOpenKeyA
  ```
- **特殊序号 0** 用于指定当前 `.idt` 文件所描述的库名称。例如：
  ```
  0 Name=advapi32.dll
  ```
- **可选的 Pascal 指令** 用于说明一个函数是否使用了 `stdcall` 调用约定，并指出该函数在返回时从栈中删除了多少个字节的数据。例如：
  ```
  483 Name=RegOpenKeyA Pascal=12
  ```
- **可选的 Comment 指令** 用于指定一条注释，并在反汇编代码清单中每个引用该函数的位置与函数一起显示这条注释。例如：
  ```
  483 Name=RegOpenKeyA Pascal=12 Comment=Open a registry key
  ```

#### 创建 .idt 文件的步骤

1. **获取库副本**：首先，获取你希望解析的库的副本。
2. **解析库**：使用合适的解析实用工具解析这个副本。例如，为 `ssleay32.dll` 创建一个 `.idt` 文件，可以使用以下命令：
   ```sh
   $ ./dll2idt.exe ssleay32.dll
   Convert DLL to IDT file. Copyright 1997 by Yury Haron. Version 1.5
   File: ssleay32.dll   ... ok
   ```
   解析成功后，将生成一个名为 `SSLEAY32.idt` 的文件。

3. **编辑 .idt 文件**：解析器无法确定一个函数是否使用 `stdcall` 及其从栈上删除的字节数。如果需要添加 `Pascal` 或 `Comment` 指令，必须手动编辑 `.idt` 文件。

4. **压缩 .idt 文件**：使用 `zipids.exe` 工具压缩 `.idt` 文件，并将得到的 `.ids` 文件复制到 `/ida/ids` 目录中。
   ```sh
   $ ./zipids.exe SSLEAY32.idt
   File: SSLEAY32.idt   ... {219 entries [0/0/0]}          packed
   $ cp SSLEAY32.ids ../Ida/ids
   ```

这样，只要加载了一个链接到 `ssleay32.dll` 的二进制文件，IDA 就会加载 `SSLEAY32.ids`。如果你选择不将新建的 `.ids` 文件复制到 `/ida/ids` 目录中，可以通过 `File > Load File > IDS File` 加载它们。

#### 使用 .ids 文件

在使用 `.ids` 文件时，可以通过以下步骤将其链接到特定的 `.sig` 或 `.til` 文件：

1. **IDS 配置文件**：IDA 使用一个名为 `/ida/idsnames` 的 IDS 配置文件来管理 `.ids` 文件。这个文本文件可以执行以下操作：
   - 将共享库的名称与对应的 `.ids` 文件名映射起来。例如：
     ```
     libc.so.6     libc.ids          +
     ```
   - 将 `.ids` 文件与 `.til` 文件映射起来。例如：
     ```
     SSLEAY32.ids    SSLEAY32.ids      +   openssl.til
     ```
   - 将 `.sig` 文件与对应的 `.ids` 文件映射起来。例如：
     ```
     libssl.sig      SSLEAY32.ids      +
     ```

### 使用 loadint 扩充预定义注释

在第 7 章中，我们介绍了 IDA 的“自动注释”概念。如果启用了它，IDA 将显示描述每个汇编语言指令的注释。这些预定义注释保存在 `/ida.int` 文件中，主要按 CPU 类型排序，其次按指令类型排序。

#### 修改现有注释

使用 `loadint` 工具可以修改现有的注释或在 `ida.int` 文件中添加新注释。具体步骤如下：

1. **确定注释文件**：确定与处理器关联的注释文件（如用于 x86 处理器的 `pc.cmt` 文件）。
2. **修改注释**：编辑注释文件中的注释。
3. **重建注释数据库**：运行 `loadint` 重新创建 `ida.int` 注释文件。例如：
   ```sh
   $ ./loadint comment.cmt ida.int
   Comment base loader. Version 2.04. Copyright (c) 1991-2011 Hex-Rays
   17566 cases, 17033 strings, total length: 580575
   ```
4. **复制新的 `ida.int` 文件**：将得到的 `ida.int` 文件复制到 IDA 主目录中，下次启动时，IDA 将从这个目录加载新建的 `ida.int` 文件。

#### 添加新注释

如果你希望给一个全新的处理器类型添加预定义注释，过程可能更复杂。具体步骤如下：

1. **定义枚举常量**：在 `allins.hpp` 文件中创建一个新的枚举常量集合，为指令集中的每条指令定义一个常量。
2. **创建注释文件**：创建一个注释文件，将每个枚举指令常量与相关的注释文本关联起来。
3. **定义处理器类型**：为你的处理器类型定义一个新常量，并在 `comment.cmt` 中创建一个条目，将处理器类型与相关的注释文件对应起来。
4. **重建注释数据库**：运行 `loadint` 建立一个新的注释数据库，并将新的处理器类型及相关注释添加到其中。

### 小结

虽然 `idsutils` 和 `loadint` 现在似乎对你没有什么用处，但一旦开始应用 IDA 的高级功能，你就会发现它们非常有用。只需要花一点点时间创建一个 `.ids` 或 `.til` 文件，随后，如果你在将来的项目中遇到由这些文件描述的库，就可以节省大量的时间。记住，IDA 不可能为现有的每一个库提供注释。本章介绍的工具旨在帮助你全面了解 IDA 中的库。

### 第 14 章 修补二进制文件及其他 IDA 限制

IDA 新用户及潜在用户最常问的一个问题是：“如何使用 IDA 修补二进制文件？”答案是：“你无法直接做到。”IDA 的目标是提供最全面的反汇编代码清单，帮助你理解二进制文件的行为。IDA 并不能帮助你轻松修改你所分析的二进制文件。尽管如此，本章将讨论一些方法，帮助你在一定程度上为二进制程序文件开发补丁程序。

#### 隐藏的补丁程序菜单

如第 11 章所述，`Edit > Patch Program` 菜单是 GUI 版本的 IDA 的一项隐藏功能，用户需要编辑 `idagui.cfg` 配置文件才能激活该菜单（默认情况下，控制台版本的 IDA 的 Patch 菜单是可用的）。`Patch Program` 子菜单中的选项提供了三种修改数据库的方法。

##### 更改数据库字节

`Edit > Patch Program > Change Byte` 菜单项用于编辑 IDA 数据库中的字节值。相关的字节编辑对话框显示了从光标所在位置开始的 16 个字节的值。你可以更改部分或全部字节，但需要关闭并重新打开对话框才能修改其他字节。对话框还显示了虚拟地址和文件偏移量，并始终显示最初加载到数据库中的字节值。

##### 更改数据库中的字

`Patch Word` 对话框一次只能修补一个 2 字节的字。该对话框显示了所修改的字的虚拟地址和文件偏移量。输入新的字值时，请注意底层处理器的自然字节顺序。

##### 使用汇编对话框

`Patch Program > Assemble` 选项允许输入汇编语言语句。IDA 会将得到的指令字节写入当前的屏幕位置。`Assemble instruction` 对话框接受在 x86 反汇编代码清单中使用的语法。输入一条指令后，对话框仍处于打开状态，准备接受另一条新指令。需要注意指令对齐，特别是当新指令比旧指令长或短时。

### 补丁程序的注意事项

IDA 的数据库修补功能仅限于能够轻松融入现有数据库空间的小型简单补丁。如果补丁需要大量的补充空间，你需要在最初的二进制文件中查找尚未使用的空间。这些空间通常表现为填充字节，用于对齐不同的节。例如，在许多 Windows PE 文件中，每个程序节的起始文件偏移量必须是 512 字节的整数倍。如果某节占用的空间不是 512 字节的整数倍，则必须对其进行填充。

#### 示例

以下是一个 PE 文件的反汇编代码清单，显示了填充区域：
```asm
.text:0040963E     ; [00000006 BYTES: COLLAPSED FUNCTION RtlUnwind. PRESS KEYPAD "+" TO EXPAND]
.text:00409644                 align 200h
.text:00409644     _text           ends
.text:00409644
.idata:0040A000     ; Section 2. (virtual address 0000A000)
```
在这个代码清单中，`.text` 节被填充到一个 512 字节的边界。理论上，可以在 `.text` 节末尾插入最多 444 字节的补丁数据。对于更大的补丁，需要调整 PE 文件头中的节大小和位置，这需要对 PE 文件格式有深入的了解。

### 总结

本章介绍了如何使用 `idsutils` 和 `loadint` 工具来管理和扩充 IDA 的库和注释。此外，还讨论了如何利用 IDA 的修补功能来修改二进制文件。虽然这些功能有一定的限制，但通过合理规划和操作，你可以在一定程度上实现对二进制文件的修补。