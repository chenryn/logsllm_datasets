Lezama, “Towards optimization-safe systems: analyzing
the impact of undeﬁned behavior,” in ACM SIGOPS 24th
Symposium on Operating Systems Principles, SOSP ’13,
Farmington, PA, USA, November 3-6, 2013, 2013, pp.
260–275.
[71] Q. Yi, Z. Yang, S. Guo, C. Wang, J. Liu, and C. Zhao,
“Eliminating path redundancy via postconditioned sym-
bolic execution,” IEEE Trans. Software Eng., vol. 44,
no. 1, pp. 25–43, 2018.
[72] W. You, X. Wang, S. Ma, J. Huang, X. Zhang, X. Wang,
and B. Liang, “Profuzzer: On-the-ﬂy input type prob-
ing for better zero-day vulnerability discovery,” in Pro-
Fuzzer: On-the-ﬂy Input Type Probing for Better Zero-
Day Vulnerability Discovery.
IEEE.
[73] I. Yun, S. Lee, M. Xu, Y. Jang, and T. Kim, “QSYM :
A practical concolic execution engine tailored for hybrid
fuzzing,” in Proceedings of the 27th USENIX Conference
on Security Symposium. USENIX Association, 2018, pp.
745–761.
[74] L. Zhao, Y. Duan, H. Yin, and J. Xuan, “Send hardest
problems my way: Probabilistic path prioritization for
hybrid fuzzing,” in Proceedings of
the Network and
Distributed System Security Symposium (NDSS), 2019.
SUPPLEMENTARY FIGURES AND EVALUATION DATA
APPENDIX A
A. Program Instrumentation
Figure 10 shows the UBSan-instrumented LLVM IR for the
objdump defect in our motivating example, of which source
code is presented in Figure 2. In Figure 10, we highlight
the instrumentation with !saviorBugNum metadata for bug-
driven prioritization.
B. UBSan Label Reduction
In the process of vulnerability labelling, SAVIOR also
reduces labels that can be conﬁrmed as false positives. Table
IX shows the results of label reduction on our benchmark
programs.
Fig. 10: SAVIOR instrumentation of UBSan label.
Total UBSan Labels
Removed UBSan Labels
Label reduction results
Prog.
tcpdump
tiff2ps
readelf
xmllint
djpeg
tiff2pdf
jasper
objdump
Average
13926
1768
2476
5258
9391
3126
3838
9025
6106
1924
57
99
195
573
80
228
346
438
Percentage
13.8%
3.2%
4.0%
3.7%
6.1%
2.6%
5.9%
3.8%
5.36%
TABLE IX: Number of UBSan labels removed in our bench-
mark programs. On average, 5.36% of the labels are reduced.
C. LAVA-M Evaluation
In the evaluation with LAVA-M, bug-guided veriﬁcation
listed.
helps identify a group of LAVA bugs that are not
Table X shows the IDs of these LAVA bugs.
D. Real World Benchmark Evaluation
For a better reference of our evaluation with real-world
programs, we summarize the number of triggered violations
at the end of 24 hours in Table XII.
In addition, we also compare the UBSan violations trig-
gered by SAVIOR and the other 5 fuzzers. The results are
summarized in Table XI. In general, these fuzzers are explor-
ing a similar group of UBSan violations. More importantly,
for most of the cases, SAVIOR triggers a super-set of the
violations that are made by the other fuzzers (in particular
AFL and AFLGO). This indicates that SAVIOR has a better
thoroughness in vulnerability ﬁnding.
APPENDIX B
TECHNICAL DISCUSSION AND FUTURE WORK
In this section, we discuss the limitations of our current
design, insights we learned and possible future directions.
Over-approximation in Vulnerability Labeling: As ex-
plained in Section III, SAVIOR leverages sound algorithms
to label vulnerabilities where the over-approximation may
introduce many false-positive labels. This imprecision can
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:58:09 UTC from IEEE Xplore.  Restrictions apply. 
1595
1voidlog_msg(msg_t*msg){2msg->str[0]='n';3msg->str[1]='o';4msg->secret_num=0;5printf("%s",msg->str);6}1voidbug(msg_t*msg){2size_tsz=sizeof(msg_t)+msg->msg_sz;3char*buf=malloc(sz);4memset(bug,0,sz);5}1...2%23=load%struct.dwarf_section*,%struct.dwarf_section**%section,align8,!,!3%size10=getelementptr%struct.dwarf_section,%struct.dwarf_section*%23,i320,i326,!4%24=loadi64,i64*%size10,align8;loadvalueofsection->size,!5%25=call{i64,i1}@llvm.uadd.with.overflow.i64(i64%24,i641);section->size+1,!,!6%26=extractvalue{i64,i1}%25,07%27=extractvaluei64,i1%25,18%28=xori1%27,true,!saviorBugNum!19;checkifthesummationresultsinacarry10bri1%28,label%cont,label%handler.add_overflow11cont:12%call11=callnoaliasi8*@malloc(i64%26)#10;malloc(section->size+1),!13handler.add_overflow:;preds=%if.end614callvoid@__ubsan_handle_add_overflow()15...3static analysis for ﬁner-grained label pruning. For instance,
the STACK system developed by Wang et. al [69, 70] and the
approach proposed by Hathhorn et. al [45] can be incorpo-
rated into SAVIOR, which are complementary to UBSan in
identifying code snippets that may lead to undeﬁned behavior.
Prediction in Vulnerability Detection: Once reaching a
potentially vulnerable program location in concolic execution,
SAVIOR extracts the guarding predicates of the vulnerability
label. However, these predicates may contradict the current
path condition. In case of such contradiction, SAVIOR ter-
minates the exploration of the labeling site immediately, since
continuing the analysis cannot contribute to any valuable test
input.
Moreover, in many cases, we can predict whether an exe-
cution path can trigger a vulnerability or not by studying the
runtime information of previous executions. Also, more impor-
tantly, before that execution arrives the vulnerability site. To
achieve this goal, we need a method to backwardly summarize
path constraints from the labeled site to its predecessors in
the explored paths. The core technique of this summary is
the weakest precondition [44] (derived from the Hoare Logic)
which has been applied to both sequential and concurrent
program analysis domains [22, 43, 71].
Program
base64
uniq
md5sum
who
Bugs unlisted by LAVA-M but exposed by bug-guided veriﬁcation
274, 521, 526, 527
227
281, 287
1007, 1026, 1034, 1038, 1049, 1054, 1071, 1072, 117, 12
125, 1329, 1334, 1339, 1345, 1350, 1355, 1361, 1377, 1382
1388, 1393, 1397, 1403, 1408, 1415, 1420, 1429, 1436, 1445
1450, 1456, 1461, 16, 165, 169, 1718, 1727, 1728, 173
1735, 1736, 1737, 1738, 1747, 1748, 1755, 1756, 177, 181
185, 189, 1891, 1892, 1893, 1894, 1903, 1904, 1911, 1912
1921, 1925, 193, 1935, 1936, 1943, 1944, 1949, 1953, 197
1993, 1995, 1996, 2, 20, 2000, 2004, 2008, 2012, 2014
2019, 2023, 2027, 2031, 2034, 2035, 2039, 2043, 2047, 2051
2055, 2061, 2065, 2069, 2073, 2077, 2079, 2081, 2083, 210
214, 2147, 218, 2181, 2189, 2194, 2198, 2219, 222, 2221
2222, 2223, 2225, 2229, 2231, 2235, 2236, 2240, 2244, 2246
2247, 2249, 2253, 2255, 2258, 226, 2262, 2266, 2268, 2269
2271, 2275, 2282, 2286, 2291, 2295, 2302, 2304, 24, 2462
2463, 2464, 2465, 2466, 2467, 2468, 2469, 2499, 2500, 2507
2508, 2521, 2522, 2529, 2681, 2682, 2703, 2704, 2723, 2724
2742, 2796, 2804, 2806, 2814, 2818, 2823, 2827, 2834, 2838
2843, 2847, 2854, 2856, 2919, 2920, 2921, 2922, 294, 2974
2975, 298, 2982, 2983, 2994, 2995, 3002, 3003, 3013, 3021
303, 307, 3082, 3083, 3099, 312, 316, 3189, 3190, 3191
3192, 3198, 3202, 3209, 321, 3213, 3218, 3222, 3237, 3238
3239, 3242, 3245, 3247, 3249, 325, 3252, 3256, 3257, 3260
3264, 3265, 3267, 3269, 327, 334, 336, 338, 3389, 3439
346, 3466, 3468, 3469, 3470, 3471, 3487, 3488, 3495, 3496
350, 3509, 3510, 3517, 3518, 3523, 3527, 355, 359, 3939
4, 4024, 4025, 4026, 4027, 4222, 4223, 4224, 4225, 4287
4295, 450, 454, 459, 463, 468, 472, 477, 481, 483
488, 492, 497, 501, 504, 506, 512, 514, 522, 526
531, 535, 55, 57, 59, 6, 61, 63, 73, 77
8, 81, 85, 89, 974, 975, 994, 995, 996
TABLE X: IDs of unlisted bugs in LAVA-M that are triggered
with bug-guided veriﬁcation.
Prog.
tcpdump
tiff2ps
readelf
xmllint
djpeg
tiff2pdf
jasper
objdump
AFL
+5/-43
+0/-13
+0/-7
+0/-6
+0/-0
+0/-7
+2/-13
+14/-18
Difference of triggered UBSan violations
ANGORA DRILLER QSYM
AFLGO
+15/-28
+0/-76
+0/-61
+0/-8
+0/-9
+0/-6
+2/-7
+4/-13
+1/-7
+0/-6
+0/-15
+0/-6
+0/-0
+0/-7
+0/-7
+0/-4
+5/-13
+0/-9
+0/-8
+1/-22
+0/-13
+10/-18
+16/-20
+12/-17
+7/-30
+0/-8
+2/-7
+0/-6
+0/-0
+0/-6
+0/-18
+10/-18
SAVIOR
+0/-0
+0/-0
+0/-0
+0/-6
+0/-0
+0/-0
+0/-0
+0/-0
TABLE XI: Difference between violations triggered by SAV-
IOR and other fuzzers. (+X/-Y) means X violations are
triggered by the fuzzer but not by SAVIOR and Y violations
are triggered by SAVIOR but not by that fuzzer.
Prog.
tcpdump
tiff2ps
readelf
xmllint
djpeg
tiff2pdf
jasper
objdump
Total
AFL
87
3
14
12
141
13
33
64
367
Number of triggered UBSan violations
AFLGO
59
10
16
12
134
13
31
60
335
ANGORA DRILLER QSYM
43
7
14
3
134
9
23
64
297
113
8
16
12
141
10
26
63
389
102
8
15
12
141
13
26
60
377
SAVIOR
128
16
22
18
141
17
44
79
465
TABLE XII: Number of unique UBSan violations triggered by
different fuzzers in 24 hours. In particular, 43.4% and 44.3%
more violations than DRILLER and QSYM, respectively.
consequently weaken the performance of SAVIOR’s prioriti-
zation. A straightforward reaction to this issue is to eliminate
as many dummy labels as possible. In our design, we utilize
a rule-based scheme to ﬁlter those false-positive labels in
Section III-B. In the future, we plan to include more precise
1596
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:58:09 UTC from IEEE Xplore.  Restrictions apply.