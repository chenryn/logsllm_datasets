**Title: How Useful is Software Fault Injection for Evaluating the Security of COTS Products?**

**Authors:**
- Matt Bishop
- Anup K. Ghosh
- James A. Whittaker

**Panel Moderator:**
- Jim Reynolds, Teknowledge

**Panelists:**
- Matt Bishop, University of California at Davis
- Anup Ghosh, Cigital
- James Whittaker, Florida Institute of Technology

**Panel Abstract:**
Software fault injection (SFI) is a contentious method for identifying errors and enhancing software. Many respected researchers, including our panel members, believe that SFI holds significant promise, albeit with certain caveats. Conversely, commercial off-the-shelf (COTS) software manufacturers often view SFI with skepticism. One primary concern is the difficulty in verifying that injected faults are representative of real-world faults. Another issue is that SFI may not be as efficient as more traditional testing methods in identifying software errors. The panelists explored various perspectives and alternatives to the industry's viewpoint.

**Position Statements:**

**Matt Bishop:**
Software fault injection (SFI) is a testing technique that deliberately introduces errors into existing programs. A common example is injecting illegal data as input, either through standard input or the environment. This mirrors what attackers do when searching for vulnerabilities. In this context, the question of whether injected faults are representative of real-world faults is not entirely fair. The more pertinent question is whether an attacker could exploit an injected fault to cause a security or reliability problem. If so, the injected fault corresponds to a real-world fault.

One challenge is describing the program's goals and desired properties in a way that can be used to generate inputs that will cause faults. Property-based testing, which tests conformance to specific properties such as security properties, can help. These properties are stated in a low-level specification language (TASpec) tied directly to the code. This approach can generate test cases to determine if the code fails to satisfy the specified property. Combined with proper test coverage metrics, these faults can ensure that the code meets the required properties to an appropriate level of coverage.

**Anup Ghosh:**
Software fault injection (SFI) is an innovative technology that can circumvent many of the challenges associated with traditional testing. Fault injection has been successfully used in safety-critical applications to identify failure modes that would otherwise be extremely difficult to find using standard testing techniques. The key question is whether and to what extent SFI is useful for assessing the security of software systems.

Our experience indicates that SFI is valuable in limited contexts. For example, we have successfully injected buffer overrun attacks into stack buffer variables to assess a program's susceptibility to stack-smashing attacks. However, these results have limited value in determining whether such an attack is actually possible via standard user input, which is a more complex problem to address.

Fault injection via software wrappers can also be useful in evaluating the robustness of COTS operating systems by simulating failing OS resources that applications depend on. While this type of SFI falls more under the "dependability" category, it has security applications, such as determining susceptibility to denial-of-service attacks. Ultimately, the value derived from SFI depends heavily on the analyst's skill. It is another tool to help identify potential system failures, but it is not a panacea for revealing all security-related flaws.

**James Whittaker:**
There are many types of security-related software defects. Some can be identified using conventional testing strategies, while others only manifest when the system is operating under stress. Stress can be induced by load, interoperability issues with other applications, or faults in the system's environment. The failure of one component can have cascading effects on other applications and the overall security of the network or enterprise.

Security-focused software testers must be able to induce both interoperability stress and stress from faulty components to expose these bugs. Tools for fault injection are essential. However, we believe that injecting faults into the software's environment is more appropriate for security testing than injecting faults directly into the source code. Environmental faults are more realistic, as they are the ones hackers are likely to exploit. Additionally, environmental faults are more challenging to simulate in a laboratory setting. Therefore, tools for injecting environmental faults are crucial for effective security testing.