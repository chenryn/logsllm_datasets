pubkey_2).inverse
Recover the plaintext
import struct
def matmul(a, b):
    mat_4 = []
    for i in xrange(8):
        line = []
        for j in xrange(8):
            res = 0
            for k in xrange(8):
                res = (res + a[i][k] * b[k][j]) % 4294967291
            line.append(res)
        mat_4.append(line)
    return mat_4
def matadd(a, b):
    mat_4 = []
    for i in xrange(8):
        line = []
        for j in xrange(8):
            line.append((a[i][j] + b[i][j]) % 4294967291)
        mat_4.append(line)
    return mat_4
key = open('public.key', 'rb')
pub_1 = []
for i in xrange(8):
    line = []
    for j in xrange(8):
        buf = key.read(4)
        line.append(int(struct.unpack(' 64:
                regcontext[cmd[0].reg] = 0
            else:
                regcontext[cmd[0].reg] = 
LShR(regcontext[cmd[0].reg],regcontext[cmd[1].reg] % 64)
        elif mnem == "SHL64":
            if regcontext[cmd[1].reg] > 64:
                regcontext[cmd[0].reg] = 0
            else:
                regcontext[cmd[0].reg]  0x2c)
                cur = cur >> 8
            s.check()
            print struct.pack("Q", s.model()[selreg].as_long())
            break
        else:
            print("Warning!!")
            break
        pc += insnlen
            print("Cur PC: %08X" % pc)
from zlib import crc32
for c1 in "om":
    for c2 in string.printable:
        for c3 in "ht":
            for c4 in string.printable:
                c5 = '0'
                c6 = 'n'
                for c7 in "401":
                    for c8 in string.printable:
                        if crc32(c1+c2+c3+c4+c5+c6+c7+c8) & 
0xffffffff == 0xc13fa3bb:
                            print(c1+c2+c3+c4+c5+c6+c7+c8)
Real Baby RSA
The script encrypted the ﬂag byte by byte, so we can just make a dict of all the printable chars
and their encrypted result, then do the substitution.
Simple logic
This challenge introduced a simple symmetric cryptography system based on add and xor
operation of 128-bit vector. Apparently, we can ﬁnd that it is a linear algorithm, so if we remove
the higher N bits of the vector, the encryption algorithm will also give the same ciphertext
without higher N bits. However, if it has the carry bit of the MSB, errors would occur, so we
choose to brute force 2 bits once and dynamically adjust the previous MSB. (Theoretically bit-
by-bit brute force would also work but we failed with that method)
import string
N = 
362399735415589322157681543980275105429992954605987939918630439743175034051
322587435808041019861957058380998750869560633571786010776847723240640963566
840085732951866221169316038045394802601803695107549483549528439908919895169
779788391589158353810104686541904340588255253039749582229565135861216832843
620905158085080442832365028017775756048291772366166829415661653564339226235
726304538075177140147585816957606212789853393210032152372717857893285025278
073046147543149374587978858378460051427620021037277530343879970141406959083
711414588034868096150383095246286171592654124670468132932325609592368651275
39835290549091
e = 65537
dic = {}
for i in string.printable:
    dic[pow(ord(i), e, N)] = i
f = open('output', 'r')
flag = ''
for c in f.readlines():
    c = int(c)
    flag += dic[c]
print flag
m = (1 << 128) - 1
flag_enc = 0x43713622de24d04b9c05395bb753d437
plains = [0x29abc13947b5373b86a1dc1d423807a, 
0xeeb83b72d3336a80a853bf9c61d6f254, 0x7a0e5ffc7208f978b81475201fbeb3a0, 
0xc464714f5cdce458f32608f8b5e2002e, 0xf944aaccf6779a65e8ba74795da3c41d, 
0x552682756304d662fa18e624b09b2ac5 ]
encs = [0xb36b6b62a7e685bd1158744662c5d04a, 
0x614d86b5b6653cdc8f33368c41e99254, 0x292a7ff7f12b4e21db00e593246be5a0, 
0x64f930da37d494c634fa22a609342ffe, 0xaa3825e62d053fb0eb8e7e2621dabfe7, 
0xf2ffdf4beb933681844c70190ecf60bf]
def encrypt(plain, key):
    msg = plain
    # last_msg = plain
    for i in xrange(765):
        # last_msg = msg
        msg = (msg + key) & m
        msg = msg ^ key
        # print msg, (msg - last_msg) & m
    return msg
def decrypt(plain, key):
    msg = plain
    for i in xrange(765):
        msg = msg ^ key
        msg = (msg - key) & m
    return msg
key = 0
bits_2 = 0
while (bits_2 < 64):
    mask = (1 << (bits_2 + 1) * 2) - 1
    find = 0
    for val in xrange(4):
        flag = 0
        k = key | (val << (bits_2 * 2))
        for j in xrange(6):
            xx = encrypt(plains[j] & mask, k)
            # print xx, encs[j] & mask
            if (xx & mask != encs[j] & mask):
                flag = 1
        if (flag == 0):
            find = 1 
            key = k
    print hex(key)
    if (find == 0):
        key ^= 1 << (bits_2 * 2 - 1)
    else:
        bits_2 += 1
print hex(key)
print plains[0]
print encrypt(plains[0], key)
print encs[0]
print hex(decrypt(flag_enc, key))