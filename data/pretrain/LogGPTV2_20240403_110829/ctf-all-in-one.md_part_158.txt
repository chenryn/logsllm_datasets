/* Let's try retrieving it anyway. */
con->st |= ON_YOUR_OWN;
- res = ftp_loop_internal (u, NULL, con, NULL, false);
1546
7.1.3 CVE-2016-4971 wget 任意文件上传漏洞
+ res = ftp_loop_internal (u, original_url, NULL, con,
NULL, false);
return res;
}
@@ -2647,8 +2659,8 @@ ftp_retrieve_glob (struct url *u, ccon *co
n, int action)
of URL. Inherently, its capabilities are limited on what ca
n be
encoded into a URL. */
uerr_t
-ftp_loop (struct url *u, char **local_file, int *dt, struct url
*proxy,
- bool recursive, bool glob)
+ftp_loop (struct url *u, struct url *original_url, char **local
_file, int *dt,
+ struct url *proxy, bool recursive, bool glob)
{
ccon con; /* FTP connection */
uerr_t res;
@@ -2669,16 +2681,17 @@ ftp_loop (struct url *u, char **local_fi
le, int *dt, struct url *proxy,
if (!*u->file && !recursive)
{
struct fileinfo *f;
- res = ftp_get_listing (u, &con, &f);
+ res = ftp_get_listing (u, original_url, &con, &f);
if (res == RETROK)
{
if (opt.htmlify && !opt.spider)
{
+ struct url *url_file = opt.trustservernames ? u :
original_url;
char *filename = (opt.output_document
? xstrdup (opt.output_document)
: (con.target ? xstrdup (con.ta
rget)
- : url_file_name (u, NULL)));
+ : url_file_name (url_file, N
1547
7.1.3 CVE-2016-4971 wget 任意文件上传漏洞
ULL)));
res = ftp_index (filename, u, f);
if (res == FTPOK && opt.verbose)
{
@@ -2723,11 +2736,13 @@ ftp_loop (struct url *u, char **local_fi
le, int *dt, struct url *proxy,
/* ftp_retrieve_glob is a catch-all function that get
s called
if we need globbing, time-stamping, recursion or p
reserve
permissions. Its third argument is just what we r
eally need. */
- res = ftp_retrieve_glob (u, &con,
+ res = ftp_retrieve_glob (u, original_url, &con,
ispattern ? GLOB_GLOBALL : G
LOB_GETONE);
}
else
- res = ftp_loop_internal (u, NULL, &con, local_file, fal
se);
+ {
+ res = ftp_loop_internal (u, original_url, NULL, &con,
local_file, false);
+ }
}
if (res == FTPOK)
res = RETROK;
通过查看补丁的内容，我们发现主要的修改有两处，一个是函数
ftp_loop_internal() ，增加了对是否使用了参数 --trust-server-names
及是否存在重定向进行了判断：
con->target = url_file_name (opt.trustservernames || !original_
url ? u : original_url, NULL);
另一个是函数 ftp_loop() ，也是一样的：
1548
7.1.3 CVE-2016-4971 wget 任意文件上传漏洞
struct url *url_file = opt.trustservernames ? u : original_url;
修改之后，如果没有使用参数 --trust-server-names ，则默认使用原始 URL
中的文件名替换重定向后 URL 中的文件名。问题就这样解决了。
参考资料
CVE-2016-4971
GNU Wget  'index.html' (UTF-8)
--2018-01-30 11:42:32-- http://localhost:6666/
Resolving localhost... 127.0.0.1
Caching localhost => 127.0.0.1
Connecting to localhost|127.0.0.1|:6666... connected.
Created socket 4.
Releasing 0x00000000012f51b0 (new refcount 1).
---request begin---
GET / HTTP/1.1
User-Agent: Wget/1.19.1 (linux-gnu)
Accept: */*
Accept-Encoding: identity
Host: localhost:6666
Connection: Keep-Alive
---request end---
GET / HTTP/1.1
User-Agent: Wget/1.19.1 (linux-gnu)
Accept: */*
Accept-Encoding: identity
Host: localhost:6666
Connection: Keep-Alive
HTTP request sent, awaiting response...
---response begin---
HTTP/1.1 401 Not Authorized
Content-Type: text/plain; charset=UTF-8
Transfer-Encoding: chunked
Connection: keep-alive
---response end---
401 Not Authorized
Registered socket 4 for persistent reuse.
Skipping -4294966528 bytes of body: [AAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
1552
7.1.4 CVE-2017-13089 wget skip_short_body 栈溢出漏洞
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASkipping -4294967296 bytes
of body: [] aborting (EOF received).
*** stack smashing detected ***: wget terminated
[1]+ Done nc -lp 6666  SKIP_THRESHOLD)
1553
7.1.4 CVE-2017-13089 wget skip_short_body 栈溢出漏洞
return false;
while (contlen > 0 || chunked)
{
int ret;
if (chunked)
{
if (remaining_chunk_size == 0)
{
char *line = fd_read_line (fd);
char *endl;
if (line == NULL)
break;
remaining_chunk_size = strtol (line, &endl, 16);
// 未检查remaining_chunk_size是否为负
xfree (line);
if (remaining_chunk_size == 0)
{
line = fd_read_line (fd);
xfree (line);
break;
}
}
contlen = MIN (remaining_chunk_size, SKIP_SIZE); // c
ontlen 为可控变量
}
DEBUGP (("Skipping %s bytes of body: [", number_to_static_
string (contlen)));
ret = fd_read (fd, dlbuf, MIN (contlen, SKIP_SIZE), -1);
// 引发溢出
if (ret <= 0)
{
/* Don't normally report the error since this is an
optimization that should be invisible to the user.
*/
1554
7.1.4 CVE-2017-13089 wget skip_short_body 栈溢出漏洞
DEBUGP (("] aborting (%s).\n",
ret < 0 ? fd_errstr (fd) : "EOF received"));
return false;
}
contlen -= ret;
if (chunked)
{
remaining_chunk_size -= ret;
if (remaining_chunk_size == 0)
{
char *line = fd_read_line (fd);
if (line == NULL)
return false;
else
xfree (line);
}
}
/* Safe even if %.*s bogusly expects terminating \0 becaus
e
we've zero-terminated dlbuf above. */
DEBUGP (("%.*s", ret, dlbuf));
}
DEBUGP (("] done.\n"));
return true;
}
一般是这样调用的：
if (keep_alive && !head_only
&& skip_short_body (sock, contlen, chunked_transfe
r_encoding))
CLOSE_FINISH (sock);
1555
7.1.4 CVE-2017-13089 wget skip_short_body 栈溢出漏洞
所以要想进入到漏洞代码，只需要 contlen 的长度不大于 4096 且使用了分块编