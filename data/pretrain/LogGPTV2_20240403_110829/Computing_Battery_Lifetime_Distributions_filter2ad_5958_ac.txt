tised.
5.1 Discretisation of the state space
We want to approximate the terms Pr{Xt = i, Y1(t) ∈
[j1∆, (j1+1)∆], Y2(t) ∈ [j2∆, (j2+1)∆]} in such a way
that the computation is done for a pure CTMC (without re-
wards). This is accomplished as follows. An MRM mod-
elling a battery can be seen as having an inﬁnite and un-
countable state space S × [l1, u1] × [l2, u2], where state
(s, y1, y2) indicates that the “CTMC part” of the MRM is
in state s and the accumulated reward of the ﬁrst type is
y1 and of the second type is y2. For our approximation we
break down the uncountable state space to a ﬁnite one. Let
(cid:14)
(cid:1)
(cid:14)
(cid:1)
S∗ = S ×
l1
∆ , . . . ,
u1
∆
×
l2
∆ , . . . ,
u2
∆
be the state space of the new CTMC. A state (s, j1, j2) then
indicates that the MRM is in state s and has accumulated
rewards in the intervals (j1∆, (j1 + 1)∆] and (j2∆, (j2 +
1)∆], respectively (for j1 = 0 or j2 = 0 these intervals are
left-closed). In the special case where c = 1 (y2 = 0) only
the ﬁrst accumulated reward y1 has to be discretised.
The initial distribution α∗
depends on the original ini-
tial distribution α and the initial values for the accumulated
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:51:07 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007rewards a1 and a2:
α∗
(i,j1,j2) =
 αi, a1 ∈ (j1∆, (j1 + 1)∆] and
a2 ∈ (j2∆, (j2 + 1)∆],
otherwise.
0,
The distribution of the accumulated rewards is then ap-
proximated as
F (Y1,Y2)(t, y1, y2) ≈
(cid:7)
i∈S
∆ −1(cid:7)
y1
∆ −1(cid:7)
y2
j1= l1
∆
j2= l2
∆
π(i,j1,j2)(t),
where π(i,j1,j2)(t) is the transient probability of residing in
state (i, j1, j2) at time t in the derived CTMC.
For battery models, the probability that the battery is al-
ready empty at time t, cf. (4), is approximated as:
Pr {battery empty at time t} ≈
π(i,0,j2)(t).
(cid:7)
∆(cid:7)
u2
i∈S
j2= l2
∆
5.2 Transitions in the new generator
:
In the following we restrict the presentation to the so-
lution of KiBa models. However, the approach is easily
applicable to general inhomogeneous MRMs with multiple
rewards.
Two types of transitions are possible in the new CTMC
with generator Q∗
transitions taken from the original
CTMC and transitions between different reward levels (for
each of the two reward types). An entry in the new genera-
tor matrix Q∗
is deﬁned depending on the type of transition
it represents. Figure 6 shows the structure of the genera-
tor matrix Q∗
. Each small block corresponds to a ﬁxed j1
and j2 and has dimension N × N , each of the big block
corresponds to one value of j1.
Transitions from the original generator. If the original
CTMC part of two states (i, j1, j2) and (i(cid:5), j1, j2) are dif-
ferent (i (cid:3)= i(cid:5)
) but the reward levels are identical, the entry
is taken from the original generator. Since it is a reward-
inhomogeneous MRM, the current reward level (j1∆, j2∆)
must be taken into account, that is,
Q∗
(i,j1,j2),(i(cid:1),j1,j2) = Qi,i(cid:1)(j1∆, j2∆).
In Figure 6 these entries are found in the blocks
.
Transitions indicating the consumption of energy. If the
CTMC states are identical, the levels of the ﬁrst accumu-
lated reward are different and the levels of the second ac-
cumulated reward are again identical, the entry indicates a
change in the ﬁrst accumulated reward, the available charge
well. Such a change can only happen between neighbouring
levels, hence, between j1 and j1 − 1 (entries in blocks
).
(i,j1,j2),(i,j1−1,j2) = Ii
Q∗
∆ , j1 > 0
Transitions indicating the transfer from the bound-
charge well to the available-charge well. When charge
is transferred between the two wells the level of the ﬁrst
reward has to increase while simultaneously the level of
the second reward decreases. This corresponds to a tran-
sition between state (i, j1, j2) and (i, j1 + 1, j2 − 1) for
(cid:16)
j1  0 and h2 (cid:1) h1:
(i,j1,j2),(i,j1+1,j2−1) = k(h2 − h1)
Q∗
where h1 = (j1∆)/c and h2 = (j2∆)/(1 − c). These
entries can be found in the blocks
j2
1 − c
− j1
c
(cid:15)
= k
∆
,
.
The entries in the ﬁrst row of big blocks correspond to
j1 = 0, which means that the battery is empty. These states
are made absorbing, because the lifetime of a battery is de-
ﬁned to be the ﬁrst time at which its get empty, so we do
not allow recovery in this case. However, the recovery tran-
sitions could easily be included. All other off-diagonal en-
tries of Q∗
are zero, the diagonal entries are deﬁned as the
negative row sums.
5.3 Complexity
(cid:17)
(cid:18)
· y2
∆
N 2 · qt · y1
∆
The time complexity is O
. The al-
gorithm is quadratic in the number of states and linear in
time and in each of the reward bounds. The step size ∆
enters as ∆−2. However, the step size is also coded into
the generator matrix of the new CTMC by multiplying the
reward rates with 1
). The tran-
sient solution of the CTMC has a time complexity linear in
the uniformisation constant q. For small ∆, this uniformi-
sation constant gets linear in 1
∆ and we thus obtain a time
complexity in ∆−3.
∆ (see the deﬁnition of Q∗
6 Results
In this section we evaluate the battery lifetime distribu-
tion of the systems described in Section 4 using simulations
of the stochastic workload on the analytical KiBaM and the
Markovian approximation algorithm for the KiBaMRM.
6.1 On/Oﬀ Model
We start with a degenerate case of the KiBaM, where
the bound-charge well is empty from the beginning and the
complete charge is in the available-charge well. There is
no transfer of charge between the two wells. We choose
the simplest Erlang model (see Figure 3) for frequency
f = 1Hz with K = 1, that is, on- and off-times follow
a negative exponential distribution with rate λ = 2. The
battery capacity is C = 2000mAh= 7200As; the KiBaM
constants are c = 1 and k = 0/s.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:51:07 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007]
t
e
m
i
t
t
a
y
t
p
m
e
y
r
e
t
t
a
b
[
r
P
 1
 0.8
 0.6
 0.4
 0.2
 0
 6000
 8000
 10000
 12000
 14000
 16000
 18000
 20000
t (s)
Delta=100
Delta=50
Delta=25
Delta=5
Simulation
Figure 7. Battery lifetime distribution for the
on/off-model (f = 1Hz, K = 1, C = 7200As,
c = 1, k = 0/s)
Figure 7 shows the resulting lifetime distribution calcu-
lated by simulation and using the approximation algorithm
using different stepsizes ∆.
The simulation results are obtained by 1000 independent
runs. They suggest that the battery lifetime is close to de-
terministic with a mean of about 15000 seconds. This is
reasonable since the overall time spent in the on-state in
one of the runs has approximately an Erlang15000(2 s) dis-
tribution, which is a good approximation to a deterministic
distribution with mean 7500 seconds. In 7500 seconds the
consumed energy is 7500s · 0.96A = 7200As = C. For
pure deterministic on- and off-times, the analytical KiBaM
also yields a lifetime of 15000 seconds.
As an example of the computational complexity, the
CTMC for ∆ = 5 has 2882 states and a generator with
more than 3.2 · 106 nonzero transition rates. To compute
the transient state probabilities for t = 17000 seconds more
than 36000 iterations are needed.
For decreasing stepsize ∆ the curves from the approx-
imation algorithm approach the simulation curve. This an
indication for the correct operation of the algorithm. How-
ever, even for ∆ = 5 the approximation is not really a good
one, since it is in general difﬁcult to closely approximate
an almost deterministic value through a phase-type distri-
bution.
We also evaluated the battery lifetime of the on/off-
model for better approximations to the deterministic on- and
off-times, that is, for K > 1 in the Erlang model (we do not
show curves here). While the lifetime distribution obtained
from simulation gets even closer to a deterministic one for
increasing K, the values computed by the approximation
algorithm do not change visibly. This is due to the fact that
the approximation is not good enough to capture the rela-
tively small differences.
Figure 8 shows the lifetime distribution of the on/off
model with K = 1 for c = 0.625, that is, at the beginning
62.5% of the charge are in the available-charge well and
37.5% are in the bound-charge well. The constant for the
ﬂow between the two wells is k = 4.5 · 10−5/s. The curves
]
t
e
m
i
t
t
a
y
t
p
m
e
y
r
e
t
t
a
b
[
r
P
 1
 0.8
 0.6
 0.4
 0.2
 0
 6000
 8000
 10000
 12000
 14000
 16000
 18000
 20000
t (s)
Delta=100
Delta=50
Delta=25
Delta=10
Delta=5
simulation
Figure 8. Battery lifetime distribution for the
on/off model (f = 1Hz, K = 1, C = 7200As,
c = 0.625, k = 4.5 · 10−5/s)
for the approximation algorithm are quite far away from the
one obtained by simulation. Unfortunately it is not feasible
to consider a substantially smaller ∆ for this example. For
∆ = 5 we have about 3.2 · 106 non-zeroes in the generator
matrix Q∗
. For t = 10000, uniformisation requires more
than 2.3 · 104 iterations, each with 3.2 · 106 multiplications.
For t = 20000, more than 4.6 · 104 iterations are needed.
In Figure 9 we compare the lifetime distribution of the
two cases already described with a third scenario, where
the initial capacity of the battery is only 4500As= 0.625 ·
7200As and completely in the available-charge well.
In
the ﬁrst case (C = 7200As, c = 1) the battery lasts
generally longer than in the second case (C = 7200As,
c = 0.925), because all charge is available.
In the third