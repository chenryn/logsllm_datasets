    Nvim moved away from vimscript and now needs to be configured in lua. You can access the
    config file in `~/.config/nvim/init.lua`. It's not created by default so you need to do
    it yourself.
    In the article it explains how to do the basic configuration with lua:
    * [Set variables](vim.md#configuration)
    * [Set key bindings](vim.md#key-bindings)
    * [Set spelling](vim.md#spelling)
    * [Set test runners](vim.md#testing): With `neotest`
    * [Set the buffer and file
      management](vim.md#buffer-and-file-management): with `Telescope`.
    * [Use Plugin managers](vim.md#plugin-managers): it evaluates the
      different solutions and then explains how to install and use `packer`
    * [What is and how to use `Treesitter`](vim.md#treesitter)
    * [Set git integration](vim.md#git): Evaluate the different solutions
      and configure `neogit`
    * [How to run lua snippets](vim.md#run-lua-snippets)
    And some troubleshooting:
    * [How to deal with big files and telescope](vim.md#deal-with-big-files)
* Correction: [Update the leader key section.](vim.md#the-leader-key)
    There are different opinions on what key to use as the `` key. The `` is the most comfortable as it's always close to your thumbs, and it works well with both hands. Nevertheless, you can only use it in normal mode, because in insert `` will be triggered as you write. An alternative is to use `;` which is also comfortable (if you use the english key distribution) and you can use it in insert mode.
    If you [want to define more than one leader key](https://stackoverflow.com/questions/30467660/can-we-define-more-than-one-leader-key-in-vimrc) you can either:
    * Change the `mapleader` many times in your file: As the value of `mapleader` is used at the moment the mapping is defined, you can indeed change that while plugins are loading. For that, you have to explicitly `:runtime` the plugins in your `~/.vimrc` (and count on the canonical include guard to prevent redefinition later):
      ```vim
      let mapleader = ','
      runtime! plugin/NERD_commenter.vim
      runtime! ...
      let mapleader = '\'
      runime! plugin/mark.vim
      ...
      ```
    * Use the keys directly instead of using ``
      ```vim
      " editing mappings
      nnoremap ,a 
      nnoremap ,k 
      nnoremap ,d 
      " window management mappings
      nnoremap gw 
      nnoremap gb 
      ```
    Defining `mapleader` and/or using `` may be useful if you change your mind often on what key to use a leader but it won't be of any use if your mappings are stable.
* New: [Configure Telescope to follow symbolic links.](vim.md#follow-symbolic-links)
    By default symbolic links are not followed either for files or directories, to enable it use
    ```lua
      require('telescope').setup {
        pickers = {
          find_files = {
            follow = true
          }
        }
      }
    ```
* New: [Run a command when opening vim.](vim.md#run-a-command-when-opening-vim)
    ```bash
    nvim -c ':DiffViewOpen'
    ```
* New: Update treesitter language definitions.
    To do so you need to run:
    ```vim
    :TSInstall 
    ```
    To update the parsers run
    ```vim
    :TSUpdate
    ```
* New: [Telescope changes working directory when opening a file.](vim.md#telescope-changes-working-directory-when-opening-a-file)
    In my case was due to a snippet I have to remember the folds:
    ```
    vim.cmd[[
      augroup remember_folds
        autocmd!
        autocmd BufWinLeave * silent! mkview
        autocmd BufWinEnter * silent! loadview
      augroup END
    ]]
    ```
    It looks that it had saved a view with the other working directory so when a file was loaded the `cwd` changed. To solve it I created a new `mkview` in the correct directory.
* New: [Concealment.](vim.md#concealment)
    Some plugins allow the conceal of some text, for example in orgmode you will only see the text of the description of a link and not the content, making it more pleasant to read. To enable it set in your config:
    ```lua
    -- Conceal links
    -- https://github.com/nvim-orgmode/orgmode#links-are-not-concealed
    -- Use visual mode to navigate through the hidden text
    vim.opt.conceallevel = 2
    vim.opt.concealcursor = 'nc'
    ```
    Where:
    - `conceallevel`: Determine how text with the "conceal" syntax attribute is shown:
      - `0`: Text is shown normally
      - `1`: Each block of concealed text is replaced with one character. If the syntax item does not have a custom replacement character defined the character defined in 'listchars' is used (default is a space). It is highlighted with the "Conceal" highlight group.
      - `2`: Concealed text is completely hidden unless it has a custom replacement character defined.
      - `3`: Concealed text is completely hidden.
    - `concealcursor`: Sets the modes in which text in the cursor line can also be concealed. When the current mode is listed then concealing happens just like in other lines.
      - `n`: Normal mode
      - `v`: Visual mode
      - `i`: Insert mode
      - `c`: Command line editing, for 'incsearch'
      A useful value is `nc`. So long as you are moving around text is concealed, but when starting to insert text or selecting a Visual area the concealed text is displayed, so that you can see what you are doing.
* New: [Email inside nvim.](vim.md#email-inside-nvim)
    The best looking one is himalaya
    - [Home](https://pimalaya.org/himalaya/index.html)
    - [Nvim plugin](https://git.sr.ht/%7Esoywod/himalaya-vim)
    - [Source](https://github.com/soywod/himalaya)
### [yq](yq.md)
* New: Introduce yq.
    [yq](https://github.com/mikefarah/yq) is a portable command-line YAML, JSON, XML, CSV, TOML and properties processor. It uses `jq` like syntax but works with yaml files as well as json, xml, properties, csv and tsv. It doesn't yet support everything `jq` does - but it does support the most common operations and functions, and more is being added continuously.
* New: [Find and update items in an array.](yq.md#find-and-update-items-in-an-array)
    We have an array and we want to update the elements with a particular name.
    Given a `sample.yaml` file of:
    ```yaml
    - name: Foo
      numBuckets: 0
    - name: Bar
      numBuckets: 0
    ```
    Then `yq '(.[] | select(.name == "Foo") | .numBuckets) |= . + 1' sample.yaml` will output:
    ```yaml
    - name: Foo
      numBuckets: 1
    - name: Bar
      numBuckets: 0
    ```
* New: [Iterate over the elements of a query with a bash loop.](yq.md#iterate-over-the-elements-of-a-query-with-a-bash-loop)
    ```bash
    readarray dependencies  signal-desktop-keyring.gpg
      cat signal-desktop-keyring.gpg | sudo tee -a /usr/share/keyrings/signal-desktop-keyring.gpg > /dev/null
      ```
    * Add our repository to your list of repositories
      ```bash
      echo 'deb [arch=amd64 signed-by=/usr/share/keyrings/signal-desktop-keyring.gpg] https://updates.signal.org/desktop/apt xenial main' |\
        sudo tee -a /etc/apt/sources.list.d/signal-xenial.list
      ```
    * Update your package database and install signal
      ```bash
      sudo apt update && sudo apt install signal-desktop
      ```
# Arts
## Dancing
### [Shag](shag.md)
* New: Add awesome Shag videos.
    - Sandy Lewis and Mart√≠ Gasol:
      - [Warsaw Collegiate Shag Festival 2017](https://yewtu.be/watch?v=CpaicCRacF0)
      - [Warsaw Collegiate Shag Festival 2016](https://yewtu.be/watch?v=8iIEFtoro_Y)
    - Cherry Moreno and Filip Gorski:
      - [BCN Shag Festival 2018](https://yewtu.be/watch?v=Rzi5MUYaRrM)
      - [RTSF 2019](https://yewtu.be/watch?v=Co94T2f3Pw4)
    - Stephen and Chandrae:
      - [Minor Swing](https://yewtu.be/watch?v=dRQ-RsAXdEM)
      - [RTSF 2013](https://yewtu.be/watch?v=uUGsLoZYXb4
      - [RTSF 2016 with Arnas and Egle](https://yewtu.be/watch?v=krEtvtJMbxg)
      - [MBSW 2013](https://yewtu.be/watch?v=pUt3_ybtxoU)
    - Warsaw Shag team
      - [Dragon Swing 2016](https://yewtu.be/watch?v=QGJAIKyW7r4)
      - [Warsaw Shag Festival 2018](https://yewtu.be/watch?v=0DHUfThIrlA)
      - [Warsaw Shag Festival 2017](https://yewtu.be/watch?v=6wasM8nF9gg)
### [Lindy Hop](lindy.md)
* New: New Charleston, lindy and solo jazz videos.
    Charleston:
    - The DecaVita Sisters:
       - [Freestyle Lindy Hop & Charleston](https://www.youtube.com/watch?v=OV6ZDuczkag)
       - [Moby "Honey"](https://www.youtube.com/watch?v=ciMFQnwfp50)
    Solo Jazz:
    - [Pedro Vieira at Little Big Swing Camp 2022](https://yewtu.be/watch?v=pmxn2uIVuUY)
    Lindy Hop:
    - The DecaVita Sisters: