or at cost 2 through vertex v3. In the second step of the
algorithm, the vertex-to-vertex matrix is transformed into a
2-dimensional vertex-to-subnet matrix. Each column, repre-
senting a vertex vj of the vertex-to-vertex matrix, is replaced
by a set of columns, one for each subnet directly connected
to the vertex, i.e., one for each member of Sj. Consider
the set of columns Sj = {sjx, sjy, sjz, ·· ·} replacing col-
umn vj. The set of paths in the vertex-to-subnet matrix is
ij, vj)), ···}
{(pk
i,jx is the kth path from router vi to subnet sjx in the
where pk
vertex-to-subnet matrix and pk
ij is the corresponding path in
the vertex-to-vertex matrix. The set of costs in the vertex-
to-subnet matrix is {(ck
ij + cjx), (ck
ij + cjy),
(ck
i,jz = ck
i,jx is the cost of the kth path
from router vi to subnet sjx in the vertex-to-subnet matrix
and ck
ij is the corresponding cost in the vertex-to-vertex ma-
trix. cjx is the cost of the link ejx associated with subnet
sjx. This cost must be taken into account because ck
ij only
represents the cost of the path from router vi to vj . The cost
to reach subnet sjx from router vj should be added to ck
ij
to get the total cost ck
i,jx. For example, the vertex-to-vertex
matrix shown in Table 1 is transformed into the vertex-to-
subnet matrix shown in Table 2. The {(cost, path)} entry in
row v1, column s12 is the set of possible paths that vertex v1
can take to reach subnet s12 and their corresponding costs.
The entry {(1, (v1))} means that vertex v1 can reach subnet
s12 at cost 1, through v1. The entry in row v1, column s23,
means that vertex v1 can reach subnet s23 at cost 2 through
vertex v2 or at cost 3 through vertices v3 and v2, and so on.
i,jx = ck
ij + cjz), ···} where ck
ij, vj )), (pk
i,jy = (pk
i,jy = ck
i,jx = (pk
ij , vj )), (pk
i,jz = (pk
129v1
{(0, (∅))}
{(1, (∅)), (2, (v3))}
{(1, (∅)), (2, (v2))}
v2
{(1, (∅)), (2, (v3))}
{(0, (∅))}
{(1, (∅)), (2, (v1))}
v3
{(1, (∅)), (2, (v2))}
{(1, (∅)), (2, (v1))}
{(0, (∅))}
v1
v2
v3
Table 1: Vertex-to-Vertex Matrix
v1
v2
v3
s12
{(1, (v1))}
s13
{(1, (v1))}
{(2, (v1)),
(3, (v3, v1))}
{(2, (v1)),
(3, (v2, v1))}
{(2, (v1)),
(3, (v3, v1))}
{(2, (v1)),
(3, (v2, v1))}
s21
{(2, (v2)),
(3, (v3, v2))}
{(1, (v2))}
s23
{(2, (v2)),
(3, (v3, v2))}
{(1, (v2))}
s24
{(2, (v2)),
(3, (v3, v2))}
{(1, (v2))}
{(2, (v2)),
(3, (v1, v2))}
{(2, (v2)),
(3, (v1, v2))}
{(2, (v2)),
(3, (v1, v2))}
s31
{(2, (v3)),
(3, (v2, v3))}
{(2, (v3)),
(3, (v1, v3))}
{(1, (v3))}
s32
{(2, (v3)),
(3, (v2, v3))}
{(2, (v3)),
(3, (v1, v3))}
{(1, (v3))}
s35
{(2, (v3)),
(3, (v2, v3))}
{(2, (v3)),
(3, (v1, v3))}
{(1, (v3))}
Table 2: Vertex-to-Subnet Matrix
The vertex-to-subnet matrix is in a format that is similar to
the one used by the routers themselves.
Once the vertex-to-subnet matrix has been computed for
the entire network, the portion of the vertex-to-subnet ma-
trix relevant to each sensor is extracted. Each sensor uses
its vertex-to-subnet matrix to validate the routing adver-
tisements that are sent on the link on which the sensor is
placed. More precisely, sensorij, placed on link eij, needs to
validate routing advertisements from routers vi and vj only.4
Therefore, the vertex-to-subnet matrix for sensorij has rows
from the common vertex-to-subnet matrix corresponding to
vi and vj only.
Some entries in a vertex-to-subnet matrix may not corre-
spond to actual routing information. Therefore, the matrix
can be further reduced by ignoring these entries. Consider
the vertex-to-subnet matrix for sensorij on link eij with
subnet sij between routers vi and vj . sik is the subnet on
link eik between routers vi and vk. sab is any other subnet.
In this context, the vertex-to-subnet matrix for sensorij is
reduced according to the following rules:
1. For neighboring routers vi and vk, row vi, columns sik
or ski, a {(cost, path)} tuple is ignored if the path is of
the form (vk). For example, in Table 2, for row v1, col-
umn s31, the {(cost, path)} tuple {(2, (v3))} is ignored
because subnet s31 is directly connected to router v1.
Therefore, v1 will never advertise a route on link e12
for subnet s31 through router v3 at cost 2.
2. For any row, columns sab or sba, a {(cost, path)} tuple
is ignored if the path is of the form (··· , va, vb, ·· · ) or
(··· , vb, va, ··· ). For example, in Table 2, for row v1,
column s23, the {(cost, path)} tuple {(3, (v3, v2))} is
ignored because router v1 can reach subnet s23 at cost
2 through router v3. Therefore, v1 will not advertise a
route to subnet s23 through (v3, v2) at cost 3.
3. For neighboring routers vi and vj, row vi, columns sij
or sji, a {(cost, path)} tuple is ignored. For example,
in Table 2, for row v1, column s12, the {(cost, path)}
tuple {(2, (v2))} is ignored because both routers v1 and
v2 are directly connected to subnet s12 and have the
same cost to s12. Router v2 will never use a longer
path through v1 to reach a directly connected subnet
4
A sensor needs to validate routing advertisements only from
routers connected to the link on which it is placed, because
distance-vector routers advertise routing information only on
links connected to them directly.
s12. Therefore, v1 will never advertise such a route to
v2.
4. For neighboring routers vi and vj , row vi, any column,
a {(cost, path)} tuple is ignored if the path is of the
form (vj , ··· ). For example, in Table 2, for row v1, col-
umn s23, the {(cost, path)} tuple {(2, (v2))} is ignored
because if in the route advertised by v1 for subnet s23
the ﬁrst hop is router v2, then v1 has learned that route
from v2. This implies that v2 has a better route to s23
than v1 has and will never use v1 to reach s23. There-
fore, v1 will never advertise such a route to v2. The
split-horizon check in RIP ensures the same thing.
i
, vip
i
} where vlink
After the simpliﬁcation of the vertex-to-subnet matrix for
sensorij, with rows vi and vj , the term vi is actually re-
placed by a tuple {vlink
is the link-level
address of the interface of router vi that is connected to
eij and vip
is the corresponding IP address. Similarly, the
term vj is replaced by a tuple {vlink
}. Finally, the in-
i
formation regarding the position of other sensors is added
to the vertex-to-subnet matrix by marking the links where
the sensors are placed.
, vip
j
j
i
5. SENSOR DETECTION ALGORITHM
i
ij
Once the oﬄine process of generating the sensor conﬁgu-
rations is completed, the conﬁgurations are loaded into the
sensors. At run-time the sensors analyze the routing ad-
vertisements that are sent on the corresponding link. They
match the contents of a routing advertisement with their
conﬁguration to decide whether the routing advertisement
represents evidence of an attack or not.
and vip
i
and eipbcast
for router vi and vlink
Consider sensorij, placed on link eij. In addition to stor-
and vip
ing vlink
for router vj ,
j
sensorij also stores elinkbcast
, which are the link-
level and IP broadcast addresses for link eij and riplinkmcast
and ripipmcast , which are the link-level and IP multicast ad-
dresses for RIP routers.
In its vertex-to-subnet matrix, sensorij also stores {(cost,
path)} sets from router vi to subnet sab of the form {(co1
,
i,ab), ··· }. co1
po1
i,ab), (co2
i,ab
is the optimal cost at which router vi can send data to subnet
sab, through path po1
i,ab. There can be multiple optimal-cost
, · ··} from
, ···} with costs {co1
paths {po1
router vi to subnet sab such that co1
i,ab.
Router vi can also send data to subnet sab through a path
i,ab = ··· = co
i,ab),··· , (cs1
i,ab = co2
, ps1
i,ab), (cs2
, co2
i,ab
, po2
, ps2
, po2
i,ab
i,ab
j
ij
i,ab
i,ab
i,ab
i,ab
i,ab
130i,ab with a sub-optimal cost cs1
ps1
sub-optimal-cost paths {ps1
, ps2
, ···} from router vi to subnet sab.
cs2
i,ab
Next, consider a distance-vector routing advertisement m,
i,ab. There can be multiple
, ···} with costs {cs1
,
i,ab
i,ab
i,ab
where m is of the type:
[Link-Level-Header [IP-Header [UDP-Header [Distance-Vector Rout-
ing Information] ] ] ]
For routing advertisement m, mlinksrc and mlinkdst are the
link-level source and destination addresses respectively, mipsrc
and mipdst are the IP source and destination addresses re-
spectively, mttl is the time-to-live ﬁeld in the IP header,
and mcab is the cost advertised for subnet msab . By us-
ing the information stored by the sensor and the informa-
tion contained in the routing message it is possible to verify
the correctness of link-level and network-level information,
the plausibility of the distance-vector information, the mes-
sages that are needed to verify advertised routes, and the
frequency of routing updates. These four veriﬁcations are
described in the following sections.
5.1 Link-Level and Network-Layer Informa-
tion Veriﬁcation
A legitimate routing advertisement must have the link-
level address and IP address of one of the routers connected
to the link5 and have a time-to-live value equal to 1.
The following is a relation between the ﬁelds mlinksrc ,
mlinkdst , mipsrc , mipdst , mttl, mcab and msab , of a legiti-
mate routing advertisement m:
{[(mlinksrc = vlink
{(mlinkdst = vlink
(mlinkdst = elinkbcast
(mlinkdst = riplinkmcast V mipdst = ripipmcast )}]
V mipsrc = vip
i )
V mipdst = vip
j )
V mipdst = eipbcast
V
W
W
ij
ij
)
i
j
[(mlinksrc = vlink
{(mlinkdst = vlink
(mlinkdst = elinkbcast
(mlinkdst = riplinkmcast V mipdst = ripipmcast )}]}
W
V mipsrc = vip
j )
V mipdst = vip
i )
V mipdst = eipbcast
ji
ji
)
j
i
V
W
W
v
10
v
1
sensor
12
e
12
e
26
v
11
v
2
v
6
e
23
sensor
67
e
67
v
12
v
3
v