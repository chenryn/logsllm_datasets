title:SEIMI: Efficient and Secure SMAP-Enabled Intra-process Memory Isolation
author:Zhe Wang and
Chenggang Wu and
Mengyao Xie and
Yinqian Zhang and
Kangjie Lu and
Xiaofeng Zhang and
Yuanming Lai and
Yan Kang and
Min Yang
SEIMI: Efficient and Secure SMAP-Enabled
Intra-process Memory Isolation
Zhe Wang1,2 Chenggang Wu1,2 Mengyao Xie1,2 Yinqian Zhang3 Kangjie Lu4
Xiaofeng Zhang1,2 Yuanming Lai1,2 Yan Kang1 Min Yang5
1 State Key Laboratory of Computer Architecture, Institute of Computing Technology, Chinese Academy of Sciences,
2 University of Chinese Academy of Sciences, 3 The Ohio State University, 4University of Minnesota, 5Fudan University
Abstract—Memory-corruption attacks such as code-reuse at-
tacks and data-only attacks have been a key threat to systems
security. To counter these threats, researchers have proposed a
variety of defenses, including control-flow integrity (CFI), code-
pointer integrity (CPI), and code (re-)randomization. All of
them, to be effective, require a security primitive—intra-process
protection of confidentiality and/or integrity for sensitive data
(such as CFI’s shadow stack and CPI’s safe region).
In this paper, we propose SEIMI, a highly efficient intra-
process memory isolation technique for memory-corruption de-
fenses to protect their sensitive data. The core of SEIMI is
to use the efficient Supervisor-mode Access Prevention (SMAP),
a hardware feature that is originally used for preventing the
kernel from accessing the user space, to achieve intra-process
memory isolation. To leverage SMAP, SEIMI creatively executes
the user code in the privileged mode. In addition to enabling the
new design of the SMAP-based memory isolation, we further
develop multiple new techniques to ensure secure escalation of
user code, e.g., using the descriptor caches to capture the potential
segment operations and configuring the Virtual Machine Control
Structure (VMCS) to invalidate the execution result of the control
registers related operations. Extensive experimental results show
that SEIMI outperforms existing isolation mechanisms, including
both the Memory Protection Keys (MPK) based scheme and
the Memory Protection Extensions (MPX) based scheme, while
providing secure memory isolation.
I. INTRODUCTION
Memory-corruption attacks such as control-flow hijacking
and data-only attacks have been a major threat to systems
security in the past decades. To defend against such attacks,
researchers have proposed a variety of advanced mechanisms,
including enhanced control-flow integrity (CFI), code-pointer
integrity (CPI), fine-grained code (re-)randomization, and data-
layout randomization. All these techniques require a security
primitive—effective intra-process memory protection of the
integrity and/or confidentiality of sensitive data from potentially
compromised code. The sensitive data includes critical data
structures that are frequently checked against or used for
protection. For example, O-CFI [39] uses a bounds lookup
table (BLT), and CCFIR [58] uses a safe SpringBoard to
restrict the control flow; CPI [31] uses a safe region, and
Shuffler [55] uses a code-pointer table to protect the sensitive
pointers; Oxymoron [6] maintains a sensitive translation table,
and Isomeron [19] uses a table to protect randomization secrets.
The effectiveness of all such techniques heavily depends on
the integrity and/or confidentiality of the sensitive data.
To efficiently protect sensitive data, researchers proposed
information hiding (IH) which stores sensitive data in a memory
region allocated in a random address and wishes that attackers
could not know the random address thus could not write or
read the sensitive data. Unfortunately, recent works show that
memory disclosures and side channels can be exploited to
readily reduce the randomization entropy and thus to bypass
the information hiding [22–24, 36, 41]. As such, even a robust
IH-based defense can be defeated.
To address this problem, recent research instead opts for
practical memory isolation which provides efficient protection
with a stronger security guarantee. Memory isolation, in general,
can be classified into address-based isolation and domain-based
isolation. Address-based isolation checks (e.g., bound-check)
each memory access from untrusted code to ensure that it
cannot access the sensitive data. The main overhead of this
method is brought by the code that performs the checks. The
most efficient address-based isolation is based on Intel Memory
Protection Extensions (MPX), which performs bound-checking
with hardware support [30].
Domain-based isolation instead stores sensitive data in
a protected memory region. The permission to accessing
this region is granted when requested by the trusted code,
and is revoked when the trusted access finished. However,
memory accesses from untrusted code (i.e., the potentially
vulnerable code that can be compromised by attackers) cannot
enable the permission. The main source of the performance
overhead of domain-based memory isolation is the operations
for enabling and disabling the memory-access permissions. The
most efficient domain-based isolation is to use Intel Memory
Protection Keys (MPK) [25, 30, 40, 47].
In general, existing address-based isolation and domain-
based isolation both incur non-trivial performance overhead
compared to the IH-based scheme. Worse, the overhead will be
significantly elevated when the workloads (i.e., the frequency
of memory accesses that require bound-checking or permission
switching) increase. For example, when protecting the shadow
stack, the MPK-based scheme (i.e., domain-based) incurs a
runtime overhead of 61.18% [40]. When protecting the safe
region of CPI using the MPX-based scheme (i.e., address-
based), the runtime overhead is 36.86% [21]. Both cases are
discouraging and would prevent practical uses of the defense
mechanisms. As such, we need a more efficient isolation
mechanism that can adapt to various workloads.
In this paper, we propose SMAP-Enabled Intra-process
Memory Isolation (SEIMI), a system for highly efficient
and secure domain-based memory isolation. SEIMI leverages
Supervisor-mode Access Prevention (SMAP), a widely used
and extremely efficient hardware feature for preventing kernel
code from accessing user space. SEIMI uses SMAP in a
completely different way. The key idea of SEIMI is to run
user code in the privileged mode (i.e., ring 0) and to store
sensitive data in the user space. SEIMI employs SMAP to
prevent memory accesses from the “privileged untrusted user
code” to the “user mode” sensitive data. SMAP is temporarily
disabled when the trusted code (also in the privileged mode)
accesses the sensitive data, and re-enabled when the trusted
code finishes the data access. Any memory access to the user
space will raise a processor exception when SMAP is enabled.
Since SMAP is controlled by the RFLAGS register which is
thread-private, disabling SMAP is only effective in current
thread. Thus, temporarily enabling SMAP does not allow any
concurrent access to sensitive data from other threads.
The new and “reverse” use of SMAP in SEIMI however
brings new design challenges: How to prevent the user code in
ring 0 from corrupting the kernel and abusing the privileged
hardware resources. To prevent the kernel corruption, we choose
to use the hardware-assisted virtualization technique (i.e., Intel
VT-x) to run the kernel in a more-privileged mode (i.e., the
VMX root mode). The user code instead runs in ring 0 of the
VMX non-root mode. Therefore, the user code is isolated from
the kernel by virtualization. It is worth noting that Dune [7]
also uses Intel VT-x to provide user-level code with privileged
hardware features. But it requires that the code running in ring
0 is secure and trusted. To support untrusted code running in
ring 0, we propose multiple novel techniques to prevent the
user code from abusing the following two types of hardware
resources: (1) privileged data structures (e.g., the page tables)
and (2) privileged instructions.
First, to prevent the user code from manipulating privileged
data structures (e.g., page table), we store the privileged data
structures in the VMX root mode, and SEIMI leverages Intel
VT-x to force all the privileged operations to trigger VM
exits (i.e., trapping into the VMX root mode). SEIMI then
finishes the privileged operations in the VMX root mode. This
way, the privileged data structures will never be exposed to
the user code. Second, to prevent the execution of privileged
instructions, we use both automatic and manual approaches to
comprehensively identify such instructions and instruct SEIMI
to sanitize their execution in the VMX non-root mode through
three techniques: (i) triggering VM exits and stopping the
execution, (ii) invalidating the execution results, and (iii) raising
processor exceptions and disabling the execution. With these
techniques, the user code can never effectively execute the
privileged instructions.
We note that our techniques for enabling secure execution
of untrusted user code with ring-0 privilege will offer valuable
insights and opportunities for future research. For example,
LBR is a privileged hardware feature used by transparent code-
reuse mitigation [42] and context-sensitive CFI [48]. Reading
LBR has to trap into the kernel, which incurs expensive context
switching. With the techniques used in SEIMI, since the user
code is running in a privileged mode, it can read LBR efficiently
without context switching.
We have implemented SEIMI on the Linux/X86_64 platform.
To evaluate and compare the performance overhead, we
deployed the MPX-based scheme, the MPK-based scheme,
and SEIMI to protect four defense mechanisms: O-CFI [39],
Shadow Stack [40], CPI [31], and ASLR-Guard [35]. We not
only conduct the experiments on SPEC CPU2006 benchmarks,
but also on 12 real-world applications, including web servers,
databases, and JavaScript engines. Compared to the MPK-based
scheme, SEIMI is more efficient in almost all test cases; while
compared with the MPX-based scheme, SEIMI achieves a
lower performance overhead on average.
In sum, we make the following contributions in this paper.
• A novel domain-based isolation mechanism. We pro-
pose a novel domain-based memory isolation mechanism
that creatively uses SMAP in a reverse way; it can
efficiently protect a variety of software defenses against
memory-corruption attacks.
• New techniques for isolating user code. We identify
new security threats when running untrusted user code
in ring 0 and propose new solutions to these threats in
SEIMI. These techniques are of independent interest and
show that safely running user code in a privileged mode
can be practical.
• New insights from implementation and evaluation.
We implement and evaluate SEIMI, and show that it
outperforms existing approaches. Our study suggests that
using SMAP for domain-based isolation is not only
practical but efficient. The enabling of running the user
code in a privileged mode will also allow future defenses
to efficiently access privileged hardware.
II. BACKGROUND
A. Information Hiding
Information hiding (IH) protects a memory region by putting
it in a randomized location. Since the memory region is
located in a small portion of the huge address space, guessing
the randomized address in a brute-force way will
likely
cause crashes. The effectiveness of such an information-hiding
technique heavily relies on the entropy of the randomness.
Since such an IH technique tends to be efficient and is easy
to deploy, it has been widely used in a variety of defense
mechanisms, including control-flow integrity (CFI) [39, 40, 58],
code (re-)randomization [6, 11, 19, 35, 53, 55], code-pointer
integrity [31], and data-layout randomization [9, 17].
B. Intra-process Memory Isolation
Compared to information hiding, intra-process memory isola-
tion can provide a stronger security guarantee in protecting the
2
sensitive data used in the defenses against memory-corruption
attacks. We classify sensitive data into three categories.
• Confidentiality only. Some defense mechanisms, such as
CCFIR [58], O-CFI [39], Oxymonron [6], and Shuffler [55],
grant read permission to the defense code (i.e., trusted
code) but revoked from the untrusted code (i.e., application
code). In these mechanisms, sensitive data is the valid,
randomized target addresses of control transfers. Since the
target addresses are written only at the load-time, they
can be stored in read-only memory. The only exception
is Shuffler [55] which updates the target addresses at
runtime through another process using the shared memory
mechanism.
• Integrity only. Some defense mechanisms, such as CFI’s
shadow stack [40], CPI [31], and ReRanz [53], allow the
sensitive data to be read and written by the trusted code but
read-only by the untrusted code. In these mechanisms, the
sensitive data includes control data such as return address
and function pointer, which needs to be updated by the
defense mechanisms at runtime. However, as long as the
integrity is guaranteed, attackers cannot divert the control
flow, so the read permission can be granted to attackers.
• Both confidentiality and integrity. In defenses such as
TASR [11], Isomeron [19], StackArmor [17], Diehard [9],
and ASLR-Guard [35], the sensitive data holds secret
information such as randomized code addresses that requires
runtime update. As such,
the untrusted code must be
prevented from reading and writing the sensitive data.
Existing memory-isolation mechanisms. Memory isolation
can be address-based or domain-based. Address-based isolation
sanitizes (e.g., bound-check) addresses in memory read/write
operations which can be fairly frequent. As such, the saniti-
zation efficiency is the key to ensure the overall performance
of the isolation. Intel provides MPX (with dedicated registers
and instructions) for efficient bound-checking, thus offering
the most efficient address-based isolation. Specifically, address-
based schemes generally place the isolated memory region at
the highest address space [30], so that memory accesses can
be instrumented to check against a single bound instead of
two. Thus, they can reduce the performance overhead further.
Domain-based isolation protects sensitive data by temporarily
disabling the access restriction. When the defense code (i.e.,
trusted code) is about to access the sensitive data, the isolation
mechanism disables the access restriction, and after the access,
the restriction is resumed. Processors provide multiple hardware
supports for controlling the access restriction, including the
virtual memory page permission in MMU, the physical memory
page permission in EPT, and MPK. Among them, Intel MPK
is the most efficient one. Specifically, MPK divides memory
into 16 domains. The read/write permission of each domain
is controlled in the PKRU register. At runtime, the WRPKRU
instruction can modify the PKRU register to manipulate the
access permission. Specifically, for the sensitive data which
only needs the integrity protection, domain-based schemes
generally only control the write permission. It could avoid
switching the access permission when the defense code only
performs the read operation to the sensitive data.
C. Intel VT-x Extension
VT-x [15] is Intel’s virtualization extension to the x86 ISA.
VT-x splits CPU into two operating modes: the VMX root mode
(for running VMM) and the VMX non-root mode (for running
virtualized guest OSes). Transitions between the VMX modes
are facilitated by VM control structure (VMCS), where the
hardware automatically saves and restores most architectural
states. The VMCS also contains a myriad of configuration