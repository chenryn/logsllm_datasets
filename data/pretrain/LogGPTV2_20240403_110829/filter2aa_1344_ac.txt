        CloseServiceHandle(hSCM);
        MessageBoxA(NULL, "failed", "failed", MB_OK);
        return FALSE;
    }
    SERVICE_STATUS status;
    //首先停止服务,确保服务能够立即被删除.
    ControlService(hService, SERVICE_CONTROL_STOP, &status);
    //删除服务
    BOOL bDelete = DeleteService(hService);
    CloseServiceHandle(hService);
    CloseServiceHandle(hSCM);
    if (bDelete)
        return TRUE;
    return FALSE;
}
int main(int argc, char* argv[])
{
    Init(); //初始化服务数据信息
            //判断参数决定如何执行代码
    if (argv[1] != NULL && strcmp(argv[1], "install") == 0)
    {
        printf("install.....");
        Install();
    }
    else if (argv[1] != NULL && strcmp(argv[1], "uninstall") == 0)
    {
        printf("uninstall.....");
        Uninstall();
    }
    else
    {   //如果没有参数则是由SCM启动的服务程序
执行install参数，就可以成功创建服务了，但是并没有自动启动，如果想自动启动的话，再 Install 函数
中调用 StartService 即可。
从端防护软件的视角也会看到注册表项的创建操作，但是此操作是services.exe进程发起的，它并无法
把这个操作和你的程序直接关联，所以一般不会进行告警或者拦截，推荐使用此方法进行服务操作
共享进程的服务
共享进程服务一般是一个DLL的形式被系统的 svchost.exe 进程程序加载并调用，Svchost本身只是作为
服务宿主，并不实现任何服务功能，启动这些服务时由svchost调用相应服务的动态链接库来启动服务。
 那么svchost如何知道某一服务是由哪个动态链接库负责呢？这不是由服务的可执行程序路径中的参数
部分提供的，而是服务在注册表中的参数设置的，注册表中服务下边有一个Parameters子键其中的
ServiceDll表明该服务由哪个动态链接库负责。并且所有这些服务动态链接库都必须要导出一个
ServiceMain()函数，用来处理服务的工作任务。下面我们就找一个具体的服务程序的例子来进行说明：
系统中的共享进程服务的可执行文件路径都是指向的 svchost.exe
        SERVICE_TABLE_ENTRY st[] =
        {
            { (LPWSTR)SERVICE_NAME, ServiceMain },
            { NULL, NULL }
        };
        StartServiceCtrlDispatcher(st);
    }
    CloseHandle(g_hEvent);
    return 0;
}
看一下注册表项 HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\AxInstSV  ,找到此服
务的信息：
看到下面多了一个 Parameters  的子键，在这个子键里就可以找到此服务的关键 ServiceDll 键值，就
表示此服务的DLL路径。
那既然是共享进程服务，那系统中有那么多的 svchost.exe  进程，我们的DLL是被那一个加载了呢？ 
另外参数 -k AxInstSVGroup 意味着什么呢？
其实 -k  参数就表示服务的分组信息，微软把多个共享进程服务分为了多个组，再系统中使用不同的权限
进行启动和管理，具体的看注册表键值
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Svchost
看这个键的具体值，就可以看到这个服务的名字，这是一个多行的字符串：
 下面的一些子键就是这个服务分组对应的权限和能力：
编写一个共享进程服务
怎么编写一个共享进程服务呢？看了一下gh0st的源代码，它编译出来的dll其实就是一个非常标准的共
享进程服务。其实大部分的内容和上面讲的类似，但是区别在于不用自己调用 
StartServiceCtrlDispatcher 函数了。svchost.exe会自己调用这个函数，另外还需要导出 
ServiceMain 函数，示例代码如下。
//#include "stdafx.h"
#include 
#include 
#pragma warning(disable : 4996)
#include 
#define SERVICE_NAME _T("FirstService")
SERVICE_STATUS g_status;
SERVICE_STATUS_HANDLE g_hServiceStatus;
HANDLE g_hEvent = NULL;
void Init()
{
    g_status.dwServiceType = SERVICE_WIN32_OWN_PROCESS;
    g_status.dwCurrentState = SERVICE_STOPPED;
    // 设置服务可以使用的控制
    // 如果希望服务启动后不能停止，去掉SERVICE_ACCEPT_STOP
    // SERVICE_ACCEPT_PAUSE_CONTINUE是服务可以“暂停/继续”
    g_status.dwControlsAccepted = SERVICE_ACCEPT_STOP | 
SERVICE_ACCEPT_PAUSE_CONTINUE | SERVICE_ACCEPT_SHUTDOWN;
    g_status.dwWin32ExitCode = 0;
    g_status.dwServiceSpecificExitCode = 0;
    g_status.dwCheckPoint = 0;
    g_status.dwWaitHint = 0;
    //创建初始为有信号的手动内核事件。
    g_hEvent = CreateEvent(NULL, TRUE, TRUE, LPCWSTR("Pause"));
}
void SetStatus(long lCurrentStatus)
{
    g_status.dwCurrentState = lCurrentStatus;
    SetServiceStatus(g_hServiceStatus, &g_status);
}
void WINAPI Handler(DWORD dwOpcode)
{
    switch (dwOpcode)
    {
    case SERVICE_CONTROL_STOP:
    {   //收到停止服务命令停止服务
        SetStatus(SERVICE_STOP_PENDING);
        SetStatus(SERVICE_STOPPED);
    }
    break;
    case SERVICE_CONTROL_PAUSE:
    {
        SetStatus(SERVICE_PAUSE_PENDING);
        ResetEvent(g_hEvent); //通知RUN函数开始等待
        SetStatus(SERVICE_PAUSED);
    }
    break;
    case SERVICE_CONTROL_CONTINUE:
    {
        SetStatus(SERVICE_CONTINUE_PENDING);
        SetEvent(g_hEvent);//通知RUN函数继续执行
        SetStatus(SERVICE_RUNNING);
    }
    break;
    case SERVICE_CONTROL_INTERROGATE:
        break;
    case SERVICE_CONTROL_SHUTDOWN:
    {   //关机时停止服务
        SetStatus(SERVICE_STOP_PENDING);
        SetStatus(SERVICE_STOPPED);
    }
    break;
    default:
        break;
    }
}
void Run()
{
    while (1)
    {
        WCHAR tcFile[MAX_PATH] = L"C:\\test.txt";
        //打开已存在的a.txt文件
        HANDLE hFile = CreateFile(tcFile, GENERIC_WRITE | GENERIC_READ, 
FILE_SHARE_READ | FILE_SHARE_WRITE, NULL,
            OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
        if (hFile == INVALID_HANDLE_VALUE) {
            //打开失败则创建一个。
            hFile = CreateFile(tcFile, GENERIC_WRITE | GENERIC_READ, 
FILE_SHARE_READ | FILE_SHARE_WRITE, NULL,
                CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
            DWORD dwWrite = 0;
            WriteFile(hFile, "Hello", 5, &dwWrite, NULL);
        }
        CloseHandle(hFile);
        Sleep(500);  //暂停500毫秒后继续扫描
                          //如何g_hEvent无信号则暂停执行
        WaitForSingleObject(g_hEvent, INFINITE);
    }
}
BOOL APIENTRY DllMain(HMODULE hModule,
    DWORD  ul_reason_for_call,
    LPVOID lpReserved
)
{
    switch (ul_reason_for_call)
    {
    case DLL_PROCESS_ATTACH:
    case DLL_THREAD_ATTACH:
        Init();
        break;
    case DLL_THREAD_DETACH:
    case DLL_PROCESS_DETACH:
        break;
    }
    return TRUE;
}
extern "C" __declspec(dllexport) VOID WINAPI ServiceMain(DWORD argC, LPWSTR * 
argV)
{
    // 注册控制请求句柄
    g_hServiceStatus = RegisterServiceCtrlHandler(SERVICE_NAME, Handler);
共享进程服务的安装
命令行安装
https://www.thinbug.com/q/8853911
https://www.qingsword.com/qing/163.html
注册表安装跟上面类似，不在详细说了.
    if (g_hServiceStatus == NULL) return;
    SetStatus(SERVICE_START_PENDING);
    SetStatus(SERVICE_RUNNING);
    // 当 Run 函数返回时，服务已经结束。
    Run();
    g_status.dwWin32ExitCode = S_OK;
    g_status.dwCheckPoint = 0;
    g_status.dwWaitHint = 0;
    g_status.dwCurrentState = SERVICE_START;
    //设置服务状态为停止,从而退出服务.
    SetServiceStatus(g_hServiceStatus, &g_status);
}
sc create FirstService binPath= "c:\windows\System32\svchost.exe -k netsvcs" 
type=share start=auto
reg add HKLM\SYSTEM\CurrentControlSet\services\FirstService\Parameters /v 
ServiceDll /t REG_EXPAND_SZ /d   
C:\Users\Administrator\Desktop\ConsoleApplication1\Release\ConsoleApplication1.d
ll /f
reg.exe query  "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows 
NT\CurrentVersion\Svchost"  /v  "netsvcs"
    netsvcs    REG_MULTI_SZ    
CertPropSvc\0SCPolicySvc\0lanmanserver\0gpsvc\0AppMgmt\0iphlpsvc\0seclogon\0AppI
nfo\0msiscsi\0EapHost\0schedule\0winmgmt\0browser\0SessionEnv\0wercplsupport\0wl
idsvc\0DcpSvc\0NcaSvc\0UsoSvc\0DsmSvc\0WpnService\0dmwappushservice\0FastUserSwi
tchingCompatibility\0Ias\0Irmon\0Nla\0Ntmssvc\0NWCWorkstation\0Nwsapagent\0Rasau
to\0Rasman\0Remoteaccess\0SENS\0Sharedaccess\0SRService\0Tapisrv\0Wmi\0WmdmPmSp\
0wuauserv\0BITS\0ShellHWDetection\0LogonHours\0PCAudit\0helpsvc\0uploadmgr\0DmEn
rollmentSvc\0lfsvc\0Themes\0sacsvr\0IKEEXT\0ProfSvc\0wisvc\0UserManager\0XblAuth
Manager\0XblGameSave\0NetSetupSvc
reg.exe add  "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows 
NT\CurrentVersion\Svchost"  /v  "DcomLaunch" /t REG_MULTI_SZ /d 
"CertPropSvc\0SCPolicySvc\0lanmanserver\0gpsvc\0AppMgmt\0iphlpsvc\0seclogon\0App
Info\0msiscsi\0EapHost\0schedule\0winmgmt\0browser\0SessionEnv\0wercplsupport\0w
lidsvc\0DcpSvc\0NcaSvc\0UsoSvc\0DsmSvc\0WpnService\0dmwappushservice\0FastUserSw
itchingCompatibility\0Ias\0Irmon\0Nla\0Ntmssvc\0NWCWorkstation\0Nwsapagent\0Rasa
uto\0Rasman\0Remoteaccess\0SENS\0Sharedaccess\0SRService\0Tapisrv\0Wmi\0WmdmPmSp
\0wuauserv\0BITS\0ShellHWDetection\0LogonHours\0PCAudit\0helpsvc\0uploadmgr\0DmE
nrollmentSvc\0lfsvc\0Themes\0sacsvr\0IKEEXT\0ProfSvc\0wisvc\0UserManager\0XblAut
hManager\0XblGameSave\0NetSetupSvc\0FirstService"  /f
使用API安装
由于跟上面非常相似，仅仅是多了需要写两个注册表位置，就直接写代码吧：
#include 
#include 
#include 
#include  
#pragma comment(lib, "shell32.lib") 
#pragma warning(disable : 4996)
char* AddsvchostService()
{
    char* lpServiceName = NULL;
    int rc = 0;
    HKEY hkRoot;
    char buff[2048];
    //打开装所有svchost服务名的注册表键
    //query svchost setting
    char pSvchost[] = "SOFTWARE\\Microsoft\\Windows 
NT\\CurrentVersion\\Svchost";
    rc = RegOpenKeyExA(HKEY_LOCAL_MACHINE, pSvchost, 0, KEY_ALL_ACCESS, 
&hkRoot);
    if (ERROR_SUCCESS != rc)
        return NULL;
    DWORD type, size = sizeof buff;
    //枚举他所有的服务名
    rc = RegQueryValueExA(hkRoot, "netsvcs", 0, &type, (unsigned char*)buff, 
&size);
    SetLastError(rc);
    if (ERROR_SUCCESS != rc)
        RegCloseKey(hkRoot);
    int i = 0;
    bool bExist = false;
    char servicename[50] = "FirstService";
    servicename[strlen(servicename) + 1] = '\0';
    memcpy(buff + size - 1, servicename, strlen(servicename) + 2);
    //然后将含有新服务名的缓冲区写入注册表，注册表里原有内容被覆盖
    rc = RegSetValueExA(hkRoot, "netsvcs", 0, REG_MULTI_SZ, (unsigned 
char*)buff, size + strlen(servicename) + 1);