# Constructing ELF Metadata

## Presentation Details
- **Event:** DEFCON 20
- **Date:** July 28, 2012
- **Presenters:** Rebecca Shapiro and Sergey Bratus
- **Affiliation:** Dartmouth College

### Overview
- **Who? What? Where?**
  - Image credit: Stripey the crab [CC-BY-SA-3.0]

### Key Points
- **"Deep magic" before a program runs:**
  - ELF segments, loading, and relocation.
- **"Deeper magic" for dynamic linking:**
  - Dynamic symbols and library loading.
- **Programming capabilities:**
  - Turing-complete code in valid ELF metadata entries.
  - Runs before most memory protections are set.
  - Access to symbols (ASLR is not a concern).

### Exploitation as Programming "Weird Machines"
- **Exploit as a Program:**
  - Encoded as crafted data, executed by target's intended and unintended primitives.
  - Resembles assembly with calls to library functions and system calls.
- **Virtual Machine vs. "Weird Machine":**
  - VM bytecode programs are data in memory, implemented by native code.
  - Exploit payload is crafted data, producing unexpected effects on system state.
  - Crafted data acts as bytecode on a "weird" VM inside the target.

### Exploitation and Weird Machines
- **Exploit Programs:**
  - Utilize dormant/latent state and transitions not present in the target’s programming model.
  - Examples: memory corruptions, escaping errors, in-band signaling effects.
  - Memory buffers become "stored programs" (von Neumann architecture).
- **T. Dullien (Infiltrate 2011):** "Exploitation is setting up, instantiating, and programming a weird machine."

### Examples of Weird Machines
- **Heap Metadata:** Executed on heap manager.
- **Format Strings:** Act on print's internals.
- **TCP/IP Packets:** Act on the stack.
- **Executable File Metadata:** Acts on loader/RTLD.

### Exploit Techniques and Weird Machines
- **Normal:**
  - XSS, SQL injection, stack smashing.
- **Odd:**
  - Modern heap smashing, crafting DWARF, crafting ELF.
- **Weird:**
  - ROP (Return-Oriented Programming).

### The Quest
- **ELF Background:**
  - Prior work with abusing ELF.
  - Essential knowledge about ELF metadata.
  - Brainfuck to ELF compiler.
  - Relocation entry backdoor.
  - Demo exploit.

### ELF (Executable and Linking Format)
- **Components:**
  - Assembler (*.c → *.o)
  - Static linker (*.o → executable)
  - Runtime linker/loader (RTLD) (exec, *.so)
  - Dynamic linker/loader (*.so)

### ELF File Contents
- **Metadata:**
  - Architecture/version information, symbols, symbol names, interpreter location, relocation entries, debugging information, constructors/destructors, dynamic linking information, static/initialized data, code, and entrypoint.

### ELF Sections
- **Data and Code:**
  - Contained in ELF sections.
  - Section headers contain size, file offset, memory offset, etc.
- **Types of Sections:**
  - Tables of structs (.symtab, .rela.dyn)
  - Null-terminated strings (.strtab)
  - Mixed data (.data)
  - Code (.text)

### Interesting ELF Sections
- **Symbol Table (.dynsym):**
  - Information to (re)locate symbolic definitions and references.
  - Example: `Elf64_Sym` structure.
- **Relocation Tables (.rela.dyn, .rela.plt):**
  - Relocation information for RTLD and dynamic linker.
  - Processed at load time and runtime.
- **Global Offset Table (.got):**
  - Table of addresses.
- **Procedure Linkage Table (.got.plt):**
  - Instructions that work with GOT to invoke _dl_fixup and linked functions.
- **Dynamic Table (.dynamic):**
  - Metadata used by the runtime loader.
  - Example: `Elf64_Dyn` structure.

### Linking and Loading
- **Process:**
  - Source: http://keithsrockin.blogdrive.com/archive/5.html
  - Memory layout after `exec()` and `ld.so` finishes loading.
  - Example memory layout of a process.

### Fun Ways to Craft Metadata
- **Techniques:**
  - Change entrypoint to point to injected code.
  - Intercept library calls to run injected code.
  - Inject object files (e.g., Mayhem, Phrack 61:8).
  - Use Cesare PLT redirection (Phrack 56:7), Mayhem ALTPLT (Phrack 61:8).
  - Use `LD_PRELOAD` (e.g., Jynx-Kit rootkit).
  - Use `DT_NEEDED` (Phrack 61:8).
  - Use LOCREATE (Skape, Uniformed 2007).
  - Unpack binaries using relocation entries.

### More Fun with Relocation Entries
- **Warning:**
  - Architecture and libc implementation dependent.
  - Proof of concept; may not work with all architectures/gcc toolchains.
  - Example: Ubuntu 11.10's eglibc-2.13 on amd64.
  - Not all Brainfuck instructions work in the presence of ASLR.

### Injecting Relocation/Symbol Tables
- **Tools:**
  - Use eresi toolkit to inject into the executable's data segment.

### Relocation Entry Type Primer
- **Types:**
  - `R_X86_64_COPY`, `R_X86_64_64`, `R_X86_64_32`, `R_X86_64_RELATIVE`.
  - Example: `Elf64_Rela` structure.

### Relocation and STT_IFUNC Symbols
- **Special Symbols:**
  - `STT_IFUNC` symbols treated as function pointers.
  - Example: indirect functions in C.

### Brainfuck Primer
- **Instructions:**
  - 8 basic instructions (e.g., `>`, `<`, `+`, `-`).

This optimized version aims to provide a clear, coherent, and professional presentation of the content.