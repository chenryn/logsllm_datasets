>>> id(new_profile)
21236144
但是有的时候，我们希望基于我们的类实例化后对象，禁止被深拷贝，这时候就要用到 Python 的
魔法方法了。
在如下代码中，我们重写了 Sentinel 类的 __deepcopy__ 和 __copy__ 方法
class Sentinel(object):
def __deepcopy__(self, memo):
# Always return the same object because this is essentially a constant.
return self
def __copy__(self):
# called via copy.copy(x)
return self
此时你如果对它进行深度拷贝的话，会发现返回的永远都是原来的对象
>>> obj = Sentinel()
>>> id(obj)
140151569169808
>>>
>>> new_obj = deepcopy(obj)
>>> id(new_obj)
140151569169808
5.30 如何将变量名和变量值转为字典？
千言万语，不如上示例演示下效果
>>> name="wangbm"
>>> age=28
>>> gender="male"
>>>
>>> convert_vars_to_dict(name, age, gender)
{'name': 'wangbm', 'age': 28, 'gender': 'male'}
convert_vars_to_dict 是我要自己定义的这么一个函数，功能如上，代码如下。
import re
import inspect
def varname(*args):
current_frame = inspect.currentframe()
back_frame = current_frame.f_back
back_frame_info = inspect.getframeinfo(back_frame)
current_func_name = current_frame.f_code.co_name
caller_file_path = back_frame_info[0]
caller_line_no = back_frame_info[1]
caller_type = back_frame_info[2]
caller_expression = back_frame_info[3]
keys = []
for line in caller_expression:
re_match = re.search(r'\b{}\((.*?)\)'.format(current_func_name), line)
match_string = re_match.groups(1)[0]
keys = [match.strip() for match in match_string.split(',') if match]
return dict(zip(keys, args))
附上 ：inspect 学习文档
5.31 替换实例方法的最佳实践
思路一：简单替换
当你想对类实例的方法进行替换时，你可能想到的是直接对他进行粗暴地替换
class People:
def speak(self):
print("hello, world")
def speak(self):
print("hello, python")
p = People()
p.speak = speak
p.speak()
但当你试着执行这段代码的时候，就会发现行不通，它提示我们要传入 self 参数
Traceback (most recent call last):
File "/Users/MING/Code/Python/demo.py", line 12, in 
p.speak()
TypeError: speak() missing 1 required positional argument: 'self'
不对啊~ self 不是实例本身吗？函数不是一直就这么写的？
实际上你这么替换，speak 就变成了一个 function，而不是一个和实例绑定的 method ，你可以把
替换前后的 speak 打印出来
p = People()
print(p.speak)
p.speak = speak
print(p.speak)
输出结果如下，区别非常明显
>
这种方法，只能用在替换不与实例绑定的静态方法上，不然你每次调用的时候，就得手动传入实例
本身，但这样调用就会变得非常怪异。
思路二：利用 im_func
有 Python 2 使用经验的朋友，可以会知道类实例的方法，都有 im_func 和 im_class 属性，分别
指向了该方法的函数和类。
很抱歉的是，这些在 Python3 中全都取消了，意味你无法再使用 im_func 和 im_class 。
但即使你身处 Python 2 的环境下，你想通过 im_func 去直接替换函数，也仍然是有问题的。
因为在 Python2 中不推荐普通用户对类实例的方法进行替换，所以 Python 给类实例的方法赋予了
只读属性
思路三：非常危险的字节码替换
表层不行，但这个方法在字节码层面却是可行的
这种方法，非常的粗暴且危险，他会直接影响到使用 People 的所有实例的 speak 方法，因此这种
方法千万不要使用。
思路四：利用 types 绑定方法
在 types 中有一个 MethodType，可以将普通方法与实例进行绑定。
绑定后，就可以直接替换掉原实例的 speak 方法了，完整代码如下：
import types
class People:
def speak(self):
print("hello, world")
def speak(self):
print("hello, python")
p = People()
p.speak = types.MethodType(speak, p)
p.speak()
这种方法，最为安全，不会影响其他实例。并且 Python 2 和 Python 3 都适用，是官方推荐的一种
做法。
5.32 如何动态创建函数？
在下面的代码中，每一次 for 循环都会创建一个返回特定字符串的函数。
from types import FunctionType
for name in ("world", "python"):
func = FunctionType(compile(
("def hello():\n"
" return '{}'".format(name)),
"",
"exec").co_consts[0], globals())
print(func())
输出如下
world
python
第六章：良好编码习惯
6.1 不要直接调用类的私有方法
大家都知道，类中可供直接调用的方法，只有公有方法（protected类型的方法也可以，但是不建
议）。也就是说，类的私有方法是无法直接调用的。
这里先看一下例子
class Kls():
def public(self):
print('Hello public world!')
def __private(self):
print('Hello private world!')
def call_private(self):
self.__private()
ins = Kls()
## 
ins.public()
## 
ins.__private()
## 
ins.call_private()
既然都是方法，那我们真的没有方法可以直接调用吗？
当然有啦，只是建议你千万不要这样弄，这里只是普及，让你了解一下。
## 
ins._Kls__private()
ins.call_private()
6.2 默认参数最好不为可变对象
函数的参数分三种
可变参数
默认参数
关键字参数
当你在传递默认参数时，有新手很容易踩雷的一个坑。
先来看一个示例
def func(item, item_list=[]):
item_list.append(item)
print(item_list)
func('iphone')
func('xiaomi', item_list=['oppo','vivo'])
func('huawei')
在这里，你可以暂停一下，思考一下会输出什么？
思考过后，你的答案是否和下面的一致呢
['iphone']
['oppo', 'vivo', 'xiaomi']
['iphone', 'huawei']
如果是，那你可以跳过这部分内容，如果不是，请接着往下看，这里来分析一下。
Python 中的 def 语句在每次执行的时候都初始化一个函数对象，这个函数对象就是我们要调用的
函数，可以把它当成一个一般的对象，只不过这个对象拥有一个可执行的方法和部分属性。
对于参数中提供了初始值的参数，由于 Python 中的函数参数传递的是对象，也可以认为是传地
址，在第一次初始化 def 的时候，会先生成这个可变对象的内存地址，然后将这个默认参数
item_list 会与这个内存地址绑定。在后面的函数调用中，如果调用方指定了新的默认值，就会将原
来的默认值覆盖。如果调用方没有指定新的默认值，那就会使用原来的默认值。
6.3 增量赋值的性能更好
诸如 += 和 *= 这些运算符，叫做 增量赋值运算符。
这里使用用 += 举例，以下两种写法，在效果上是等价的。
## 
a = 1 ; a += 1
## 
a = 1; a = a + 1
+= 其背后使用的魔法方法是 __iadd__ ，如果没有实现这个方法则会退而求其次，使用 __add__
。
这两种写法有什么区别呢？
用列表举例 a += b，使用 __add__ 的话就像是使用了a.extend(b),如果使用 __add__ 的话，则是 a
= a+b,前者是直接在原列表上进行扩展，而后者是先从原列表中取出值，在一个新的列表中进行扩
展，然后再将新的列表对象返回给变量，显然后者的消耗要大些。
所以在能使用增量赋值的时候尽量使用它。
6.4 别再使用 pprint 打印了
1. 吐槽问题
pprint 你应该很熟悉了吧？
随便在搜索引擎上搜索如何打印漂亮的字典或者格式化字符串时，大部分人都会推荐你使用这货
。
比如这下面这个 json 字符串或者说字典（我随便在网上找的），如果不格式化美化一下，根本无
法阅读。
[{"id":1580615,"name":"","packageName":"com.renren.mobile.android","iconUrl":"a
pp/com.renren.mobile.android/icon.jpg","stars":2,"size":21803987,"downloadUrl":"app/
com.renren.mobile.android/com.renren.mobile.android.apk","des":"2011-2017 
SNS"},{"id":1540629,"name":"","packageName"
:"com.ct.client","iconUrl":"app/com.ct.client/icon.jpg","stars":2,"size":4794202,"do
wnloadUrl":"app/com.ct.client/com.ct.client.apk","des":"271934 
"}]
如果你不想看到一堆密密麻麻的字，那就使用大伙都极力推荐的 pprint 看下什么效果（以下在
Python 2 中演示，Python 3 中是不一样的效果）。
>>> info=[{"id":1580615,"name":"","packageName":"com.renren.mobile.android","ic
onUrl":"app/com.renren.mobile.android/icon.jpg","stars":2,"size":21803987,"downloadU
rl":"app/com.renren.mobile.android/com.renren.mobile.android.apk","des":"2011-2017 
SNS"},{"id":1540629,"name":"","pac
kageName":"com.ct.client","iconUrl":"app/com.ct.client/icon.jpg","stars":2,"size":47
94202,"downloadUrl":"app/com.ct.client/com.ct.client.apk","des":"271934 
"}]
>>>
>>> from pprint import pprint
>>> pprint(info)
[{'des': '2011-2017 \xe4\xbd\xa0\xe7\x9a\x84\xe9\x93\x81\xe5\xa4\xb4\xe5\xa8\x83\xe4
\xb8\x80\xe7\x9b\xb4\xe5\x9c\xa8\xe8\xbf\x99\xe5\x84\xbf\xe3\x80\x82\xe4\xb8\xad\xe5
\x9b\xbd\xe6\x9c\x80\xe5\xa4\xa7\xe7\x9a\x84\xe5\xae\x9e\xe5\x90\x8d\xe5\x88\xb6SNS\
xe7\xbd\x91\xe7\xbb\x9c\xe5\xb9\xb3\xe5\x8f\xb0\xef\xbc\x8c\xe5\xab\xa9\xe5\xa4\xb4\
xe9\x9d\x92',
'downloadUrl': 'app/com.renren.mobile.android/com.renren.mobile.android.apk',
'iconUrl': 'app/com.renren.mobile.android/icon.jpg',
'id': 1580615,
'name': '\xe7\x9a\xae\xe7\x9a\x84\xe5\x98\x9b',
'packageName': 'com.renren.mobile.android',
'size': 21803987,
'stars': 2},
{'des': '\xe6\x96\x97\xe9\xb1\xbc271934 \xe8\xb5\xb0\xe8\xbf\x87\xe8\xb7\xaf\xe8\xb
f\x87\xe4\xb8\x8d\xe8\xa6\x81\xe9\x94\x99\xe8\xbf\x87\xef\xbc\x8c\xe8\xbf\x99\xe9\x8
7\x8c\xe6\x9c\x89\xe6\x9c\x80\xe5\xa5\xbd\xe7\x9a\x84\xe9\xb8\xa1\xe5\x84\xbf',
'downloadUrl': 'app/com.ct.client/com.ct.client.apk',
'iconUrl': 'app/com.ct.client/icon.jpg',
'id': 1540629,
'name': '\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\xe7\x9a\x84',
'packageName': 'com.ct.client',
'size': 4794202,
'stars': 2}]
好像有点效果，真的是 “神器”呀。
但是你告诉我， \xe4\xbd\xa0\xe7\x9a 这些是什么玩意？本来想提高可读性的，现在变成完全不
可读了。
好在我懂点 Python 2 的编码，知道 Python 2 中默认（不带u）的字符串格式都是 str 类型，也是
bytes 类型，它是以 byte 存储的。
行吧，好像是我错了，我改了下，使用 unicode 类型来定义中文字符串吧。
>>> info = [{"id":1580615,"name":u"","packageName":"com.renren.mobile.android",
"iconUrl":"app/com.renren.mobile.android/icon.jpg","stars":2,"size":21803987,"downlo
adUrl":"app/com.renren.mobile.android/com.renren.mobile.android.apk","des":u"2011-20
17SNS"},{"id":1540629,"name":u"",
"packageName":"com.ct.client","iconUrl":"app/com.ct.client/icon.jpg","stars":2,"size
":4794202,"downloadUrl":"app/com.ct.client/com.ct.client.apk","des":u"271934
"}]
>>>
>>> from pprint import pprint
>>> pprint(info)
[{'des': u'2011-2017\u4f60\u7684\u94c1\u5934\u5a03\u4e00\u76f4\u5728\u8fd9\u513f\u30
02\u4e2d\u56fd\u6700\u5927\u7684\u5b9e\u540d\u5236SNS\u7f51\u7edc\u5e73\u53f0\uff0c\
u5ae9\u5934\u9752',
'downloadUrl': 'app/com.renren.mobile.android/com.renren.mobile.android.apk',
'iconUrl': 'app/com.renren.mobile.android/icon.jpg',
'id': 1580615,
'name': u'\u76ae\u7684\u561b',
'packageName': 'com.renren.mobile.android',
'size': 21803987,
'stars': 2},
{'des': u'\u6597\u9c7c271934\u8d70\u8fc7\u8def\u8fc7\u4e0d\u8981\u9519\u8fc7\uff0c\
u8fd9\u91cc\u6709\u6700\u597d\u7684\u9e21\u513f',
'downloadUrl': 'app/com.ct.client/com.ct.client.apk',
'iconUrl': 'app/com.ct.client/icon.jpg',
'id': 1540629,
'name': u'\u4e0d\u5b58\u5728\u7684',
'packageName': 'com.ct.client',
'size': 4794202,
'stars': 2}]
确实是有好点了，但是看到下面这些，我崩溃了，我哪里知道这是什么鬼，难道是我太菜了吗？当
我是计算机呀？
u'\u6597\u9c7c271934\u8d70\u8fc7\u8def\u8fc7\u4e0d\u8981\u9519\u8fc7\uff0c\u8fd9\u91
cc\u6709\u6700\u597d\u7684\u9e21\u513f'
除此之外，我们知道 json 的严格要求必须使用 双引号，而我定义字典时，也使用了双引号了，为
什么打印出来的为什么是 单引号？我也太难了吧，我连自己的代码都无法控制了吗？
到这里，我们知道了 pprint 带来的两个问题：
1. 没法在 Python 2 下正常打印中文
2. 没法输出 JSON 标准格式的格式化内容（双引号）
2. 解决问题
打印中文
如果你是在 Python 3 下使用，你会发现中文是可以正常显示的。
## Python3.7
>>> info = [{"id":1580615,"name":u"","packageName":"com.renren.mobile.android",
"iconUrl":"app/com.renren.mobile.android/icon.jpg","stars":2,"size":21803987,"downlo
adUrl":"app/com.renren.mobile.android/com.renren.mobile.android.apk","des":u"2011-20
17SNS"},{"id":1540629,"name":u"",
"packageName":"com.ct.client","iconUrl":"app/com.ct.client/icon.jpg","stars":2,"size
":4794202,"downloadUrl":"app/com.ct.client/com.ct.client.apk","des":u"271934
"}]
>>>
>>> from pprint import pprint
>>> pprint(info)
[{'des': '2011-2017SNS',
'downloadUrl': 'app/com.renren.mobile.android/com.renren.mobile.android.apk',
'iconUrl': 'app/com.renren.mobile.android/icon.jpg',
'id': 1580615,
'name': '',
'packageName': 'com.renren.mobile.android',
'size': 21803987,
'stars': 2},
{'des': '271934',
'downloadUrl': 'app/com.ct.client/com.ct.client.apk',
'iconUrl': 'app/com.ct.client/icon.jpg',
'id': 1540629,
'name': '',
'packageName': 'com.ct.client',
'size': 4794202,
'stars': 2}]
>>>
但是很多时候（在公司的一些服务器）你无法选择自己使用哪个版本的 Python，本来我可以选择
不用的，因为有更好的替代方案（这个后面会讲）。
但是我出于猎奇，正好前两天不是写过一篇关于 编码 的文章吗，我自认为自己对于 编码还是掌握
比较熟练的，就想着来解决一下这个问题。
索性就来看下 pprint 的源代码，还真被我找到了解决方法，如果你也想挑战一下，不防在这里停
住，自己研究一下如何实现，我相信对你阅读源码会有帮助。
以下是我的解决方案，供你参考：
写一个自己的 printer 对象，继承自 PrettyPrinter （pprint 使用的printer）
并且复写 format 方法，判断传进来的字符串对象是否 str 类型，如果不是 str 类型，而是 unicode