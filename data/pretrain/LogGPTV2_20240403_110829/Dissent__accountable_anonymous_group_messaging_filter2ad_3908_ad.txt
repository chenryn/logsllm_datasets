ery member to act as leader occasionally makes it easier to address
the liveness issues discussed below. If group policy permits, a non-
anonymous outsider may also lead a protocol run, effectively in-
voking the collective services of the group as in anonymous data-
mining applications [7].
5.2 Selecting Available Participants
The core protocols above assume that every group member par-
ticipates in a given protocol run, but in practice at least a few mem-
bers of a long-lived group are likely to be unavailable at any given
time, making it pragmatically important for the group to be able
to make progress in the absence of some members. The wrapper
protocol therefore distinguishes a group’s long-term membership
M from the set of members MR participating in a particular run
R, where MR ⊆ M . In the wrapper protocol, the leader of run
R is responsible for detecting which members are presently avail-
able, and for bringing those members available to a consensus on
the precise set of participants MR for protocol run R.
A key issue in choosing MR is preventing a malicious leader
from packing MR with colluding members to the exclusion of most
honest members, limiting the anonymity of the few honest mem-
bers remaining. Group policy should therefore deﬁne some mini-
mum quorum Q, and honest nodes must refuse to participate in a
proposed run where |MR| < Q. If there are at most f ≤ Q − 2
faulty nodes, honest nodes will be guaranteed at least (Q − f )-
anonymity within a run, regardless of how MR is chosen.
If members establish and reuse long-lived pseudonyms across
multiple runs, however, then a quorum requirement may be insufﬁ-
cient to protect these pseudonyms from intersection attacks [3] by
a malicious leader who selectively exludes different nodes in each
run. As a further defense, honest members might protect each other
against malicious exclusion as follows. If honest member i receives
a proposal from would-be leader lR to initiate run R while exclud-
ing some other member j, but i believes j to be reachable, then i
demands that lR add j to MR—forwarding messages between lR
and j if necessary—as a precondition to i participating in round R.
5.3 Coercion Resistance via Deniable Keying
Dissent’s shufﬂe protocol assumes each group member i has a
signing key pair (ui, vi) with which it signs all messages, creating
the nonrepudiable “accountability trail” that the blame phase (5b)
requires to trace a misbehaving member. Unfortunately, this non-
repudiable record also enables members to prove to a third party
which message they sent (or didn’t send) in a given protocol run.
346In anonymous communication scenarios, we often desire not just
anonymity but also repudiability [6]: after a protocol run, no one
should be able to prove to a third party which message any member
sent, or ideally, whether a member participated at all. In anony-
mous voting applications, we often desire the closely related prop-
erty of resistance to coercion or “vote-buying.”
Our wrapper protocol can provide some repudiability or coercion
resistance as follows. We assume each group member i’s well-
known identity is deﬁned only by its primary encryption key pair
(xi, yi), and members now choose a fresh, temporary signing key
pair (ui, vi) for each protocol run. To initiate a run, the would-be
leader l uses a deniable authenticated key exchange algorithm such
as SKEME [28] to form a secure channel with each potential par-
ticipant i, using l’s and i’s primary encryption keys for this authen-
tication. Each member i uses this pairwise-authenticated channel
to send the leader i’s fresh public signing key vi for the run.
Once l forms a tentative list of N = |MR| participants, l broad-
casts to all participants a round descriptor DR containing a round
nonce, all participants’ primary public keys y1, . . . , yN , and all
participants’ temporary signing keys v1, . . . , vN for the run. Each
member i now forms a challenge cij for each node j, containing
a random seed Sij and a hash of DR keyed on Sij. Member i
encrypts cij with j’s public key yj to yield Cij . Member i sends
its encrypted challenges to the leader, who forwards each Cij to
member j. Member j decrypts Cij , veriﬁes the keyed hash it con-
tains against the DR that j received from the leader, and returns
cij to the leader, who forwards it to i. On a decryption failure or
challenge mismatch, the leader must decide whether to exclude i or
j from a retry attempt; i can prove its innocence by revealing the
random bits it used to encrypt its original challenge to j.
Once all members conﬁrm DR with all other members, the shuf-
ﬂe proceeds using the temporary signing keys in DR. These sign-
ing keys are nonrepudiable only within the protocol run, so the
leader can trace misbehaving members and exclude them from sub-
sequent runs. No node is left with proof that any member i actually
used signing key ui during a given run, however, since anyone can
unilaterally forge all the authenticated key exchanges, challenges,
and subsequent messages in the shufﬂe and bulk protocols.
Of course, this form of repudiability is useful only against an at-
tacker who actually requires third-party veriﬁable “proof of respon-
sibility” in order to coerce group members. If the attacker can see
all network trafﬁc, as our attack model assumes, and the attacker’s
trafﬁc logs alone constitute “proof” of which network packets a
given member sent, then we know of no way to achieve deniability
or coercion resistance. Similarly, a member might be coerced be-
fore a protocol run into sending some sufﬁciently unique, attacker-
supplied message or ballot. If the mere appearance of that mes-
sage/ballot in the run’s output satisﬁes the attacker that the member
“stayed bought,” then no anonymity mechanism based purely on a
random shufﬂe will address this form of coercion.
5.4 Ensuring Liveness
As we have seen, tracing active disruptors of the shufﬂe or bulk
protocols presents particular technical challenges due to the need
to protect the anonymity of honest senders. A member might pas-
sively disrupt either protocol, however, by simply going ofﬂine at
any time, either intentionally or due to node or network failure. For-
tunately, given the core protocols’ resistance to both active disrup-
tion and trafﬁc analysis, we can ensure liveness and handle passive
disruption via more generic techniques.
Each phase of the shufﬂe and bulk protocols demand that partic-
ular members send properly signed messages to other members.
Again borrowing terminology and ideas from PeerReview [23],
when the protocol demands that member i send member j a mes-
sage, and member j has not received such a (properly signed) mes-
sage for some time, we say that j suspects i. Once j suspects i, j
informs another node k (the leader, for example) of j’s suspicion;
k in turn contacts i demanding a (signed) copy of i’s message to j.
If i fails to offer this message to k, then after some time k suspects
j as well and notiﬁes other members in turn, eventually causing all
honest, connected members to suspect i. Member i can dispel any
honest member’s suspicion at any time by offering a copy of the
demanded message. If i honestly cannot send to j due to asymmet-
ric connectivity, for example, then i responds to k’s demand with
the required message, which k forwards back to j, dispelling both
j’s and k’s suspicion and enabling the protocol to proceed.
Since our wrapper protocol makes the leader responsible for ini-
tiating protocol runs, we also make it the leader’s responsibility to
decide when a protocol run has failed due to a suspected node go-
ing ofﬂine—or deliberately withholding a required message—for
too long. At this point, the leader starts a new protocol run, exclud-
ing any exposed or persistently suspected nodes from the previous
run, and the remaining members attempt to resend their messages.
If the leader fails, members can retry their sends in a future run
initiated by a different leader.
5.5 End-to-End Reliability
A corner-case liveness challenge for most protocols is closure:
determining when participants may consider the protocol “success-
fully concluded.” In a byzantine model, a malicious member might
intentionally withhold the last message it was supposed to send—
e.g., its own secondary private key in phase 5a of the shufﬂe proto-
col, or its own ciphertext in the bulk protocol—while collecting the
last messages of other members, thereby learning the results of the
protocol run while denying those results to other members.
We approach this class of problems in general by treating our
shufﬂe and bulk protocols as a “best-effort” anonymous delivery
substrate, atop which some higher-level protocol must provide end-
to-end reliable delivery and graceful closure if desired. If a faulty
member denies other members a protocol run’s results, the honest
members will soon suspect the faulty member. The same or a differ-
ent leader will eventually start a new protocol run without the faulty
member, in which the members may retransmit their messages. If a
member i wishes to ensure that a message it sends anonymously is
reliably seen by a particular member j, for example, then i must re-
send the message in successive protocol runs until j acknowledges
the message. Member j might sign acknowledgments via public or
pseudonymous keys, or group or ring signatures [4, 11, 30].
If the messages sent in a protocol run are interrelated, such as
the ballots comprising an anonymous vote, the group may wish to
ensure that some quorum of members sees the result. The group
can follow such a voting run with an acknowledgment run, dis-
carding and repeating unsuccessful voting runs (with successively
smaller membership sets as members are exposed or go ofﬂine) un-
til the required number of members acknowledges the results. If
the group wishes to provide reliable broadcast semantics or main-
tain some consistent group state across successive protocol runs,
the group can implement byzantine consensus [8] atop the shuf-
ﬂed send primitive, ensuring both liveness and strong consistency
as long as over two thirds of the group members remain live.
6. PROTOTYPE IMPLEMENTATION
To evaluate Dissent’s practicality, we built and tested a simple
proof-of-concept prototype implementing the protocol. The pro-
totype is written in Python, using OpenSSL’s implementations of
1024-bit RSA-OAEP with AES-256 for public-key encryption and
347Figure 3: Time required for anonymous broadcast of balanced
and unbalanced message loads among 16 nodes, via shufﬂe
alone or full Dissent protocol.
signing, AES-256 in counter mode as the bulk protocol’s pseudo-
random number generator, and SHA-1 as the hash algorithm.
We used the Emulab [18] network testbed to test the prototype
under controlled network conditions. We ran the prototype on re-
cent x86 PCs machines running Ubuntu 7.04 and Python 2.5, on a
simulated star topology in which every node is connected to a cen-
tral switch via a 5Mbps connection with a latency of 50ms (100ms
node-to-node latency). We make no claim that this topology is
“representative” of likely deployment scenarios for Dissent, since
we know of no available data on the network properties “typical” of
online groups that might wish to run Dissent. Our simulated topol-
ogy is merely intended to reﬂect plausible communication band-
widths and delays for wide-area Internet communication.
We rely on the analysis in previous sections to evaluate Dissent’s
security properties, and assume that the accountability measures in
a full implementation of Dissent will deter or eventually exclude
misbehaving members. For experimentation purposes, therefore,
we implement and test only the “normal-case” aspects of the pro-
tocol in the current prototype. The prototype does not use a se-
cure public key infrastructure, and does not implement the “blame”
phases or the full wrapper protocol. Nodes sign and verify all
messages, however, ensuring that performance measurements ac-
curately reﬂect Dissent’s normal-case costs.
The prototype uses TCP for communication, maintaining TCP
connections throughout a given protocol run to minimize startup
overhead, but closing all connections at the end of each run. Where
Dissent requires broadcast, nodes implement these broadcasts atop
TCP by sending their messages to a leader, who bundles all broad-
casts for that phase and sends each node a copy of the bundle.
6.1 Performance Evaluation
Figure 3 shows the total time the prototype requires to broadcast
messages of varying sizes anonymously among 16 nodes, using
either the shufﬂe protocol alone or the full Dissent protocol. In each
case, we test two message loads: a Balanced load in which each
node sends 1/16th of the total message data, and a OneSender load
in which one node sends all the data and other nodes send nothing.
For a single node to send a 16MB message, Dissent ran in about
31 minutes on the experimental topology, or 3.6× longer than one
node required to broadcast the same data to the other 15 nodes with
no encryption or anonymization. While signiﬁcant, a 3–4× slow-
down may be a reasonable price to pay for strong anonymity.
As expected, the full protocol incurs a higher startup delay than
the shufﬂe protocol alone, but handles unbalanced loads more grace-
fully, maintaining similar performance for a given total message
Figure 4: Time required to send varying message sizes, broken
into shufﬂe and bulk transfer protocol portions.
Figure 5: Time required to send 1MB of data (balanced) using
shufﬂe and bulk protocols together, with varying group size.
length regardless of balance. We are not aware of any other veriﬁ-
able shufﬂes [20, 26] for which working implementations and per-
formance data are available, but given their typical assumption of
small, equal-length messages, we expect their performance on un-
balanced loads to be at best on par with our shufﬂe protocol alone.
Figure 4 breaks the runtime of the full Dissent protocol into its
shufﬂe and bulk protocol components, illustrating that the shufﬂe’s
cost remains constant with message size and becomes negligible as
total message length grows.
The full Dissent protocol still showed some slowdown under
highly unbalanced load: although balance does not affect Dissent’s
communication cost, it does affect computation costs. When only
one node is sending, that node must compute and XOR together
N − 1 pseudorandom streams of message length L, while other
nodes each compute only one L-byte stream. This timing differ-
ence could lead to a side-channel attack if not handled carefully in
implementation, e.g., by pre-computing all required bit strings be-
fore commencing a send. We have made no attempt to analyze the
protocol in detail for side-channel attacks, however.
Figure 5 measures the prototype’s runtime with varying group
sizes. In a successful run, each node sends O(N 2) bits in the shuf-
ﬂe and Ltot + O(1) bits in the bulk protocol. As expected, the
shufﬂe’s runtime increases much more quickly with N than the
bulk protocol, although the superlinear N 2 curve manifests only
slightly for the small groups we tested.
7. RELATED WORK
Dissent’s shufﬂe protocol builds directly on an anonymous data
collection protocol by Brickell and Shmatikov [7], adding DoS re-
sistance via our new go/no-go and blame phases. Dissent’s bulk
protocol is similarly inspired by DC-nets [10], which are compu-
348tationally efﬁcient and provide unconditional anonymity. DC-nets
traditionally require nondeterministic “reservation” schemes to al-