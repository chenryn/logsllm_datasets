al. [13] explored incremental updates of materialized views
for streaming heterogenous data sources. 3.2 Process
After creating our database and sample query workload
2.2.2 DynamicViewSelection as described in Section 3.1, we ran through each query in
Static view selection is limited in that it computes the the workload and generated candidate materialized views
materialized views based upon a pre-compiled workload of as detailed in Section 4. Once we have generated a list of
queries with pre-compiled constraints. The pre-compiled candidate materialized view definitions, we create pseudo-
queries may not reflect future queries and the pre-compiled materialized views along with their corresponding non-
constraints may become inaccurate over time such as when materialized views for each of these candidateswhich is de-
themaintenancewindowshrinksorthedisk-spaceincreases. tailedinSection3.3. Afterthecandidatematerializedviews
View caching or dynamic view selection is a proposed solu- have been created in the database, we want to evaluate the
tion to these limitations. reductionincosttothequeryexecutiontimebyfirstrewrit-
Cachingin databasesystems stores pages, tuples, queries ing the queries as described in Section 5.1 and then evalu-
or even entire views that have been previously executed or ating their cost and selecting a subset of the candidatema-
that are executed often. This allows previously executed terialized views to keep as described in Section 5.2.
queries to be executed more efficiently as they have been
3.3 MaterializedViewsinPostgreSQL
cached. Caching also is used to reduce the amount of calls
to the base relations by decomposing queries into cached AsofPostgreSQL9.2,materializedviewsarenotbuilt-in
partsandnon-cachedpartswhereonlythenon-cachedparts constructs. This means that there is a lack of the following
need to be computed from the base relations. Scheuer- features available in some commercial databases [1]:
mann et al. [37] extended caching to design WATCHMAN,
a database cache manager for data warehouses that aims • “CREATE MATERIALIZEDVIEW”type syntax
to minimize query response time. WATCHMAN assumes
thatadatawarehousehasinfrequentupdatesandthatpast • Built-in auto-updatesof materialized views
query patterns will reflect future query patterns. As a re-
sult, entire retrieved sets of queries are stored in the cache • Query planner does not automatically accelerate
manager instead of individual pages or tuples. A query is queries by substitutingapplicable materialized views
Figure 1: TPC-H Schema
However, there have been multiple workarounds for mate- 1) specific to each SQL query
rialized views in PostgreSQL by taking advantage of user-
defined functions and table triggers [12, 29]. 2) common and high-load queries
We chose to use the pseudo-materialized view implemen-
The second idea is used in DB2 and Oracle [24, 40]. In
tation proposed by Jonathan Gardner [29]. To begin we
our project, we just focus on the first idea. However, even
createdatable,matviews,inourdatabasethatcontainsin-
thoughforasingleSQLstatement,consideringallsyntacti-
formation that includes the name of the materialized view,
cally relevant materialized views is not scalable.
the name of the view that populated it and the last refresh
Consider a query Q:
of the materialized view. We then defined a function in
PL/pgSQLthat creates a“materialized view”given a name
SELECT c.c_name
for the“materialized view”and a view that will be its defi-
FROM customers c, orders o
nition. Thissubsequentlyaddsarowtothematviewstable
WHERE o.o_custkey = c.c_custkey
and defines a new table representing the materialized view
and o.o_totalprice > 1000.
withthechosenname. Inaddition,twoadditionalfunctions
aredefinedtodropamaterializedviewinthedatabaseand
The following materialized views are syntactically relevant:
torefreshamaterializedview. AsmentionedinSection3.1,
we assume that the data is static so we do not deal with MV1: SELECT c.c_name
updating or refreshing a materialized view once it has been FROM customers c, orders o
created,butincludetherefreshfunctionincaseofnonstatic WHERE o.o_custkey = c.c_custkey
databases. and o.o_totalprice > 1000;
With the above additions to the databases, the problems
mentioned before of not having built-in materialized views MV2: SELECT c.c_name, o.o_totalprice
are resolved by creating a table to represent a materialized FROM customers c, orders o
view, periodically taking snapshots or using triggers to up- WHERE o.o_custkey = c.c_custkey
date materialized views and to manually specify the mate- GROUP BY o.o_totalprice;
rialized view to use in queries.
MV3: SELECT c.c_name, o.o_orderdate, o.o_totalprice
4. CANDIDATE MATERIALIZED VIEW FROM customers c, orders o
WHERE o.o_custkey = c.c_custkey
GENERATION
GROUP BY o.o_totalprice;
Afterparsingtheworkload,webeginourselectionofcan-
didatematerializedview. Firstletusthinkaboutwhatma- MV4: SELECT c.c_name, o.o_totalprice, l.l_tax
terialized views are relevant for a workload. A materialized FROM customers c, lineitem l, orders o
viewthatisusefulforaworkloadmustbesyntacticallyrele- WHERE o.o_custkey = c.c_custkey
vantforatleastoneSQLquery. Sotherearetwobasicideas and o.o_orderkey = l.l_orderkey
for finding materialized views that reduce execution cost: and o.o_totalprice > 1000;
Thespaceofsyntacticallyrelevantmaterializedviewsfora Based on these facts, we separate the task of candidate
query(andhenceaworkload)isverylarge,sinceinprinciple, materialized view generation into three parts: (1) from the
amaterializedviewcanbeproposedonanysubsetoftables large space of all possible table-subsets, we prune to get a
inthequery,evencontainingthetablethatdoesnotoccurin small set of interesting table-subsets. (2) Based on inter-
the original query like MV4. Based on these, we add some estingtable-subsets,generatethebestmaterializedviewfor
constraintsforcandidatematerializedviewsgeneratingfrom each query. (3) According to these materialized views, gen-
each SQL statement. erate some candidate materialized views that are good for
the whole workload.
• Focus on the class of single-block materialized views
consisting of selection, join, grouping and aggregation 4.1 InterestingTable-Subsets
Sinceit is requiredto prunethe spaceof possiblemateri-
• Foraparticularquery,generatematerializedviewsjust
based on this query (i.e. MV4 won’t be considered) alizedviews. Anefficientwayistofindalloftheinteresting
table-subsets in the workload as proposed by Microsoft [7].
Addingthesetwoconstraints,thereisstillanexplosionin The interesting table-subset is a set of several tables which
thespaceofmaterializedviewsarisingfromselectioncondi- oftenappeartogetherintheworkload. Soitalsofollowsthe
tions and group by columns in a particular query. If there twogeneralobservationsmentionedbefore. Thenwecande-
aremselectionconditionsinthequeryonatable-subsetT (a finetwometricstocapturetheimportanceofatable-subset.
table-subsetisasubsetoftablesreferencedinaqueryinthe Foraparticulartable-subsetT,wedefineQ T asthequeries
workload.),thenmaterializedviewscontaininganysubsetof in the workload where table-subset T occurs.
these selection conditions are syntactically relevant. There-
TSCost(T)= COST(q)
fore, the goal of candidate materialized view generation is Pq∈QT
to quickly eliminate materialized views that are syntacti-
callyrelevantforaparticularqueryintheworkload,butare COST(q)×(sum of tables sizes in T)
TSWeight(T)= X
not important in the whole workload. In order to achieve sum of tables sizes in q
q∈QT
this goal, we should know how to measure“importance”for
a materialized view. The naive approach of selecting one Here COST(q) is the estimated cost from optimizer, i.e.,
candidatematerializedviewperquerythatexactlymatches ‘EXPLAIN’ q in PostgreSQL (described in more detail in
eachqueryintheworkloaddoesnotusuallyworksincethis Section 5.2). TSCost comes from the first observation.
materialized view usually cannot be used by other queries. TSWeight derives from the two observations. Then our
So the fist observation is that the materialized view that task is to find all the table-subsets T that TSWeight(T) is
could be used by more SQL statement is more important. higher than a given threshold C. Since TSWeight(T) ≤
This observation [7] is even more severe in large workloads. TSCost(T), we can find all the table-subsets T that
The following simplified example of Q1 from the TPC-H TSCost(T) ≥ C, then filter the result by TSWeight(T) ≥
benchmark illustrates this point: Example 1. Consider a C. TSCost metric has the property of“monotonicity”such
workload consisting of 1000 queries of the form: that for table subsets T1,T2, T1 ⊆ T2 ⇒ TSCost(T1) ≥
TSCost(T2). The Algorithm 1 shows the detail. Threshold
SELECT l_returnflag, l_linestatus, SUM(l_quantity)
C can be set as 10% of the total workload cost.
FROM lineitem
WHERE l_shipdate BETWEEN  and  Data: C is the threshold
GROUPBY l_returnflag, l_linestatus. Result: ITS list of all interesting table-subsets
S1 ←{T|T is a table-subset of size 1 satisfying
Assumethateachofthe1000querieshasdifferentconstants
TSCost(T)≥C};
for  and . Then, rather than recom-
i←1;
mending1000materializedviews,thefollowingmaterialized
while i0 do
viewthatcanserviceall1000queriesmaybemoreattractive
for the entire workload: S i+1 ←{};
G←{T|T is a table-subset of size i+1 and ∃s∈S i
SELECT l_shipdate, l_returnflag, l_linestatus, such that s⊂T};
SUM(l_quantity) foreach T ∈G do
FROM lineitem if TSCost(T)≥C then
GROUPBY l_shipdate, l_returnflag, l_linestatus. S i+1 ←S i+1∪{T}
end
Another observation is that a materialized view that re-
end
quires more time to calculate is more important [7]. Exam-
i++;
ple2. ConsidertheTPC-H1GBdatabaseandtheworkload
end
specified in Section 3.1. There are several queries involving
S ←S1∪S2∪..∪S MAX−TABLES;
thetables: lineitem,orders,nation,andregion. However,it
return {T|T ∈S and TSWeight(T)≥C};
islikelythatmaterializedviewsproposedonthetable-subset
Algorithm 1: Finding interesting table-subsets
lineitem,ordersaremoreusefulthanmaterializedviewspro-
posedonnation,region. Thisisbecausethetableslineitem
and orders have 6 million and 1.5 million rows respectively,
4.2 Generating Materialized Views for Each
but the tables nation and region are very small (25 and 5
Query
rowsrespectively). Hence,thebenefitofpre-computingthe
portion of the queries involving lineitem and orders is sig- Afterfindingtheinterestingtable-subsetstep,wecanget
nificant. somebasicmaterializedviewsthatsimplyjoinallthetables
in each table-subset, but their sizes are usually very large. Data: Q list of sample queries
Thisstepwewanttogeneratethebestmaterializedviewsfor Data: cand matviews list of candidate materialized
eachquery. Givenaselectqueryq,weonlythegeneratingof views
materialized views from interesting table-subsets. We first for curr query in Q do
generate all the available materialized views for this query, original cost = calculate curr query cost;
and then select the best one based on the estimated cost. curr min cost = original cost;
TheestimatedcostofmaterializedviewM istheEXPLAIN mv to use = nil;
cost to get the result of q using M, if M has been created. for curr mv in cand matviews do
The available materialized views for a query q must be if curr mv is eligible for curr query then
general. Their format is only SELECT-FROM-WHERE- curr rewrite = rewrite(curr query);
(GROUP BY) where GROUP BY is optional. For simplic- curr cost = calculate curr rewrite cost;
ity in this initial implementation, we only consider equality if curr cost ,≤,≥,aremovedtotheGROUPBYclause. Fromthese, mv to use = curr mv;
wecangettheavailablematerializedviewsfromthefollow- end
ing steps. For each interesting table-subset T that occurs end
in q, we can find: (1) A“pure-join”materialized view on T end
containing join and conditions for join tables. (2) all the if mv to use is not nil then
combinationofGROUPBYcolumnsandaggregateexpres- rewrite curr query to use mv to use;
sionfromqontablesinT. (3)keepasubsetof=conditions end
in query q and on tables in T, and move a subset of the end
other conditions related to T to GROUP BY. For exam-
ple, V2 and V3 mentioned at the beginning of this section