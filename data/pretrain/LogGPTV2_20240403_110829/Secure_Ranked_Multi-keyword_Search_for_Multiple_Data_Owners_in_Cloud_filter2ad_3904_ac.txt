+ (m − p) · (p + m − 2n − 2) · ˜Δf (n)
≤ (m − p) · Δf (n) + rn max
f (p) − f (m) ≥ (p − m) · Δf (n) − rn max
f (q) − f (n) ≥ (q − n) · Δf (n)
(13)
Therefore
f (p) − f (m) + f (q) − f (n)
≥ (p + q − m − n) · Δf (n) − rn max
> rm max + rn max
(14)
This means that min(yp)+min(yq) > max(ym)+max(yn).
Therefore yp + yq > ym + yn holds. Up to now, Theorem 1
is proved.
281281281
TABLE I: An example of posting list of inverted index
Keyword
FILE ID
Relevance Score
F1
10.05
F2
7.52
Wi
F3
1.65
. . .
14.86
Fn
16.85
for F
Now we introduce how to choose the disturbing part raof
y
aoppf (x). Since
(cid:11)
Aj,k · (m(x + 1, j) − m(x, j)) · m(y, k)
(cid:11)
(cid:11)
Aj,k · ((1 + λ)
j−1
+ α ·
0≤j,k≤τ
≥
0≤j,k≤τ
1≤i≤j−2
(1 + λ))
be
Let
j−1
such
2l−1
integer
an
l
Aj,k · ((1 + λ)
+ α · (cid:16)
(cid:16)
(15)
≤
that
(1 + λ)) ≤ 2l.
0≤j,k≤τ
We can set raof  x2, for the same
y, we have F
To satisfy the conditions proposed in Theorem 1, we set
rimax as 2l−4  F
y
aoppf (x2).
1≤i≤j−2
Finally, our additive order preserving and privacy preserving
function family F
y
aoppf (x) is formed as follows:
y
aoppf (x) =
F
Aj,k · m(x, j) · m(y, k) + raof
(16)
where α and λ are two constant numbers, raof ∈ [2l−4, 2l−3).
0≤j,k≤τ
(cid:11)
C. Build Index
1) Inverted Index: In information retrieval, inverted index
(often regarded as a posting ﬁle) is commonly adopted as
indexing structure. An inverted index stores a list of mappings
from keywords to their corresponding set of ﬁles that contain
this keyword [8], [20]. In our system, each data owner will
build its own index. Tab. I presents an example of inverted
index.
2) Relevance Score: To compute the relevance scores be-
tween keywords and ﬁles, the T F × IDF rule is proposed
and widely used, where T F , short for term frequency, denotes
the number of times that a keyword appears in a ﬁle. IDF ,
short for inverse document frequency, denotes the result of
dividing the number of all ﬁles in the whole ﬁle collection by
the number of ﬁles containing the term. There are hundreds of
variations of the T F × IDF weighting scheme, none of them
is universally optimal [22]. In this paper, we use a widely used
equation to compute the relevance score [23]:
Score(w, Fd) =
1|Fd| (1 + ln fd,w) ln(1 +
(17)
Where w denotes the given keyword, |Fd| is the length of
ﬁle Fd, fd,w denotes the T F of w in ﬁle Fd, fw denotes the
number of ﬁles containing w and N denotes the total number
of ﬁles in the collection.
N
fw
)
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:02:58 UTC from IEEE Xplore.  Restrictions apply. 
.H\ZRUG
)LOH ,'
 \
)LOH ,'
 \
L'2
M'2
)
L P

L P \
  
()
M P
(
M P \
(  
PZ
QZ
()
L P
(
L P \
(  
.)
M P
.
M P \
.  
)
L Q

L Q \
  
()
M
Q
(
Q \
(  
M
()
L
L
Q
(
Q \
(  
+)
M
Q
+
Q \
+  
M
Fig. 3: An example of inverted index where relevance scores
are encoded with F y
aopp(x)
3) Encrypting Relevance Score: Now we introduce how
to encode the relevance score with an additive order and
privacy preserving function in our additive order and privacy
aoppf (x). Given input Si,j,t (the
preserving function family F
relevance score of tth keyword to jth ﬁle of ith data owner).
Data owners can freely choose a function from this family to
protect the privacy of their relevance scores. For simplicity, in
aoppf (·) and
this paper, we require data owner i to choose F
deﬁne Vi,j,t as the encoded data value of Si,j,t :
Hi(i)
y
Vi,j,t = F
Hi(i)
aoppf (Si,j,t)
(18)
where Hi(·) is a public known hash function, i is the ID of
data owner Oi.
With the well designed properties of Faoppf , the cloud
server can make comparison among encoded relevance scores
for the same data owner. However, since different data owners
encode their relevance scores with different function in Faoppf ,
the cloud server can not make comparison between encoded
relevance scores for different data owners. To solve this
problem, we deﬁne:
Ti,j,t(y) = F
y
aoppf (Si,j,t)
(19)
where Ti,j,t(y) is used to help the cloud server make
comparison among relevance scores encoded by different data
owners, and y is a variable which takes the hash value of data
owner’s ID as input.
Finally, we attach each Vi,j,t with a Ti,j,t(y). Fig. 3 shows
an example of inverted index where relevance scores are
encoded with F y
aopp(x).
D. Rank Relevance scores:
(cid:11)
(cid:11)
Now we introduce the strategies that the cloud server used
for making comparison on encoded relevance scores. First we
deﬁne
Vi,j =
Vi,j,t and Ti,j(y) =
Ti,j,t(y)
t∈(cid:2)W
t∈(cid:2)W
(20)
jth ﬁle belonging to ith owner to queried keywords (cid:4)W. Then
where Vi,j means the sum of encoded relevance scores of
a data user issues a query (cid:4)W = {wm, wn}, we assume Oi’s
we introduce the strategies in the following two conditions:
(1) Two encoded data belong to the same data owner. Given
F1 and F2 satisfy the query. Then the cloud add the encoded
relevance score together and get the relevance score of Oi
s F1
(cid:4)
to (cid:4)W:
Vi,1 = Vi,1,m + Vi,1,n
(21)
Similarly,
Vi,2 = Vi,2,m + Vi,2,n
(22)
keyword sets (cid:4)W, otherwise, F2 is more relevant to (cid:4)W.
If Vi,1 ≥ Vi,2, then F1 is more relevant to the queried
Given that a data user issues a query (cid:4)W = {wm, wn}. We
(2) Two encoded data belong to two different data owners.
assume Oi’s F1 and Oj’s F2 satisfy the query. The cloud
server makes comparison on their encoded relevance scores in
the following four steps:
the cloud server computes the relevance score of
First,
(cid:4)
s F1 to (cid:4)W
Second, the cloud server computes the Tj,2(y)
Tj,2(y) = Tj,2,m(y) + Tj,2,n(y)
Vi,1 = Vi,1,m + Vi,1,n
(23)
(24)
Oi
Third, cloud server substitute Hi(i) for the variable y and
if Vi,1 ≥
s F2,
s F1 is more relevant to (cid:4)W than Oj
the cloud draw the conclusion:
s F2 is more relevant to (cid:4)W.
get Tj,2(H(i)).
Tj,2(Hi(i)), then Oi
otherwise, Oj
Finally,
(cid:4)
(cid:4)
(cid:4)
Now, the cloud server can make comparisons on encoded
relevance scores. Thus it’s easy for the cloud to return the
top-k relevant ﬁles to the data user.
VI. SECURITY ANALYSIS AND DISCUSSIONS
In this section, we step by step provide security analysis to
demonstrate that the privacy requirements have been satisﬁed
for the data ﬁles, the keywords, the queries, and the relevance
scores. We also discuss the rationales behind this scheme
design. The discussion leads to a possible design modiﬁcation
that trades security risks for practical convenience.
Data Files: The data ﬁles are protected by symmetric
encryption before upload. As long as the encryption algorithm
is not breakable, the cloud server cannot know the data.
Keywords: There are two folds of protection over the
keywords. First, the keywords are encrypted with our encryp-
tion scheme. Before we prove the security of our keywords
encryption, we ﬁrst play a conventional challenger and attacker
game. The challenger ﬁrst gives a public key pk to the attacker.
The attacker then freely chooses two keywords w0 and w1
and sends them to the challenger. Upon receiving w0 and
w1, the challenger sets a bit γ = 0 with probability 1/2
and sets γ = 1 with probability 1/2. Then the challenger
sends T = Enc(wγ, pk) to the attacker. The attacker tries to
(cid:4). The attacker’s
guess the value of γ, and outputs its guess, γ
]− 1/2. We
advantage in this game is deﬁned to be P r[γ = γ
say that an encryption algorithm is semantically secure against
a chosen plain text attack (CPA) if the attacker’s advantage is
negligible.
(cid:4)
282282282
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:02:58 UTC from IEEE Xplore.  Restrictions apply. 
Keywords Encryption is semantically secure.
Theorem 2: If DDH (Decisional DifﬁeHellman) is hard, then
Proof: We assume there is an algorithm A which runs in
polynomial time and has a non-negligible advantage  as the
attacker in the game described above where the encryption
function is our keywords encryption. We further construct a
DDH attacker B who has access to A and achieves a non-
negligible advantage. B is given (g, gki,w, gr, T) as input. We
denote t as the bit that B is trying to guess (i.e, T = gr·ki,w
when t = 0 and is set randomly otherwise). B gives A (g, Y
= gki,w) as input. A then chooses keywords w0 and w1 which
is sent to B. B sets a bit γ randomly and sends cipher text
C1 = gr, C2 = gHs(wγ ) · T Hs(wγ ) to A. A sends B a bit γ
(cid:4),
which is its guess for γ. B guesses that t = 0 if and only if
(cid:4)
= γ.
γ
If t = 0 (so T = gr·ki,w), then C2 = gHs(wγ ) · T Hs(wγ ) is a
valid encryption for keywords encryption. In this case, A will
guess correctly with probability 1/2+. If t = 1, the keywords
encryption attacker A receives the value gHs(wγ ) · T Hs(wγ )
where T is random. In this sense, the value of γ is hidden to
A, so the probability that A will guess it is simply 1/2. Hence,
(25)
Since  is non-negligible, this demonstrates that B violates the
assumption that DDH is hard.
Pr[B succeeds] =
· 1
2
+ ε) +
1
2
1
2
1
2
1
2
=
+
ε
2
(
Second, recall the form of encrypted keywords,
(cid:6)
g(1+r·ki,w)·Hs(wh) mod p,
gr·ki,w·Hs(wh) mod p
Hc
(26)
(cid:5)
ˆwh,j =
(cid:7) (cid:8)
Even if the encryption is stripped, the cloud server can only
access the hash value of keywords, Hs(wh). In order to infer
the plain text of wh, the cloud server still needs to rely on
semantic analysis and try out many possible keyword values
to ﬁnd out wh.
Trapdoors: The security analysis to trapdoor consists of
two sides. Recall the trapdoor construction formula,
(cid:9)
(cid:10)−1
Twh(cid:2) =
g
Hs(wh(cid:2) )
mod p
(27)
On one side, the cloud server needs to solve the discrete
logarithm problem in Zp with large p and obtain Hs(wh(cid:2) ).
Then the cloud server must have Hs(·) and using semantic
analysis to try out the queried keyword wh(cid:2). On the other
side, without knowing Hs(·), the cloud server cannot construct
trapdoors for chosen keywords.
Relevance Scores: In our scheme, relevance scores are