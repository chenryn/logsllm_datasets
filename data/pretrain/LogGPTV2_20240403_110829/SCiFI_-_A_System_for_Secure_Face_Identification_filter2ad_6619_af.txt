### Database and Execution Phases

#### Server Preprocessing Phase
The server runs the preprocessing phase of the Oblivious Transfer (OT) protocol and manages the database. 

#### Client Execution Phase
1. **Image Capture and Vector Computation**: The client captures an image and computes its representative vector.
2. **Correction Vector Calculation**: The client computes a correction vector, which is the exclusive-or (XOR) between the representative vector and a random vector chosen by the client in the preprocessing phase. This correction vector is a 900-bit string.
3. **Data Transmission and Decryption**: The client sends the correction vector to the server. After receiving the result from the server, the client decrypts it.
4. **Oblivious Transfer Protocol**: Both parties then invoke the OT protocol, with the client acting as the sender.

#### Server Execution Phase
1. **Correction Vector Reception**: The server receives the correction vector from the client.
2. **Hamming Distance Calculation**: The server computes the encryption of the Hamming distance between every image in the database and the client's image. This step can be parallelized for efficiency.
3. **Result Encryption and Transmission**: The server encrypts the sum of the Hamming distance and a random value and sends this encrypted result to the client.
4. **Oblivious Transfer Protocol**: The server runs the OT protocol with the client and learns the final result.

### Experimental Results
We conducted multiple experiments where the server stored a list of 100 face representations. The following are the average timing measurements from these experiments.

#### Preprocessing
- **Client Side**:
  - Total offline preprocessing time: approximately 213 seconds.
  - Time spent on preparing 900 homomorphic encryptions: 38 seconds.
  - Time spent on sending these encryptions to the server: 71 seconds.
  - Time spent on running the preprocessing phase of the 1-out-of-180 OT (with \( d_{\text{max}} = 180 \)): 92 seconds.
  - Nearly half of the preprocessing time is spent on preparing and sending the homomorphic encryptions.
- **Server Side**:
  - Offline preprocessing includes receiving the encryptions (already counted on the client side), summing every possible combination of each pair of consecutive bits (57 seconds), and running the preprocessing of the OT (also already counted on the client side).

#### Online Performance
- **Optimization Impact**: The previous preprocessing steps significantly optimize performance, resulting in minimal online execution time for each image.
- **Server Execution Time**: 
  - Time after receiving the correction binary vector: approximately 0.31 seconds.
  - This time is divided into:
    - Computing the Hamming distance, adding a random value, and sending the result to the client: 0.28 seconds.
    - Running the online step of the OT protocol, where the server learns the result: 0.012 seconds.
- **Scalability**: The run time is linear in the size of the server’s database. For comparing the client’s input to 100 database images, the total online time is approximately \( 100 \times 0.31 = 31 \) seconds.
- **Parallelization**: The bulk of the server’s computation can be fully parallelized, reducing the recognition time to about 5 seconds using six processors.

### Experimental Setup
- **Machines**: Two Linux machines located in different buildings, communicating via TCP/IP over the local network.
- **Nagle Algorithm**: Turned off to prevent "ACK delay," which greatly improved communication layer performance.
- **Server Machine**: 8-core machine with 2.6 GHz AMD Opteron processors and 1GB RAM.
- **Client Machine**: 2.8 GHz dual-core Pentium D processor with 2GB RAM.

### Protocol Details
- **SCiFI Implementation**: Uses the Fthreshold protocol where the server learns the output.
- **Phases**: Composed of a preprocessing phase (run before the client’s input is known) and an online execution phase.

#### Client Preprocessing Phase
1. **Random Vector Generation and Encryption**: The client chooses a random 900-bit vector and sends the encryption of these bits to the server.
2. **OT Preprocessing**: Runs the preprocessing phase of the OT as described earlier.

### Partial Occlusion Results
- **CMU-PIE Subset**:
  - **Recognition Rate for 15% False Positives**:
    - Left eye: 89%
    - Mouth: 91.5%
    - Nose: 92.8%
  - **Number of Occluded Parts**:
    - Left eye: 10/30
    - Mouth: 4/30
    - Nose: 3/30

### References
[1] M. Osadchy, Y. LeCun, and M. Miller, “Synergistic face detection and pose estimation with energy-based models,” Journal of Machine Learning Research, vol. 8, pp. 1197–1215, May 2007.
...
[33] T. Ahonen, A. Hadid, and M. Pietikainen, “Face description with local binary patterns: Application to face recognition,” PAMI, vol. 28, no. 12, pp. 2037–2041, 2006.

### Appendix
- **min Functionality**: Describes the basic building block used for computing the Fmin+t functionality, which outputs the minimum of two numbers.
- **Fmin+t Functionality**: Details the protocol for finding the minimal Hamming distance, ensuring that intermediate results are not revealed.

This optimized version aims to provide a clear, coherent, and professional description of the system and its experimental results.