than determining the theoretical bit rate per the analysis above
because any practical covert channel will have to oversample
in order to capture all of the trojan transmitted bits. The 4K-
3The number of store buffer entries available on the Haswell microarchi-
tecture family is 42.
alias protocol will have to agree on some variation of address
offset (step size) to meet the sampling criteria.
In order to determine the timing characteristics and dis-
tribution of 4K-aliasing events given a predetermined address
offset, we ran the following experiment. For each benchmark,
we measure 4K-aliasing events such that the lower 12-bits of
the store and load addresses will be aligned every other load
(when the load address is swept at intervals of 2048 B), every
fourth load (when the load address is swept at intervals of
1024 B), every eighth load (when the load address is swept at
intervals of 512 B), and every sixteenth load (when the load
address is swept at intervals of 256 B). The results are shown
in Figure 7.
Figure 7a shows the results when load addresses are
measured at 2 KB intervals. Half of these measurement should,
therefore, be slow during a 4K-aliasing event and the other
half should be relatively fast. The top half of Figure 7a plots
the distribution of the data and ﬁts it using a Gaussian kernel
density estimate. While not uniformly bimodal, the probability
of ﬁnding a high cycle measurement is nearly equal to the
probability of ﬁnding a low cycle value. However, it is limited
9
Protocol: Robust 4K-Aliasing Covert Communication Channel
Datasend[N], Datarecv[N]: data bits to be transmitted/received by the trojan and spy
DetectProbes: The number of probes used to detect the presence of the spy/trojan
addr4k: A 4 KB aligned address
latency: Cycle length of servicing 4 KB aligned load
Tone: Experimentally set cycle length capable of distinguishing a trojan one bit from a trojan zero bit
Ttr,detect, Tsp,detect: Cycles to detect presence of trojan and presence of spy, respectively
Cone, Czero: Cycles during which a one and zero data bit are sent, respectively
Trojan’s operation:
Spy’s operation:
for i = 0 to Detect Probes− 1 do
start = rdtscp()
store to load forward loop()
stop = rdtscp()
if latency > Tsp,detect then
break
else
end if
continue
end for
for i = 0 to N − 1 do
if Datasend[i] = 1 then
for j = 0 to Cone do
store ← addr4k
end for
else
for j = 0 to Czero do
ﬂush store buffer()
end for
end if
end for
for i = 0 to Detect Probes− 1 do
start = rdtscp()
trojan probe(load ← addr4k)
stop = rdtscp()
if latency > Ttr,detect then
break
else
end if
continue
end for
while Trojan is transmitting do
start = rdtscp()
SFENCE
load ← addr4k
stop = rdtscp()
if latency > Tone then
Datarecv[i] = 1
Datarecv[i] = 0
else
end if
end while
Listing 3: Robust protocol for establishing a 4K-aliasing covert communication channel between a trojan and spy process.
by a relatively noisy signal caused by toggling rapidly between
4K-aliasing/no 4K-aliasing measurements. In fact, it appears
as if the cycle latency measurements take time to transition.
Figure 7d records a 4K-aliasing event every sixteenth mea-
surement and exhibits improved stability compared to every
other plotted sample. In general, these results indicate that the
4K-aliasing covert channel can be modulated depending on
the frequency at which a 4 KB aligned store is executed, or
equivalently, when a 4 KB aligned load is executed.
Detection of Cooperating Parties. The prior analysis outlined
the characteristics of the 4K-aliasing covert communication
channel, but detection of cooperating parties remains unde-
cided. In effect, the trojan can detect the presence of the spy
by executing a tight loop of instructions that take advantage
of store-to-load forwarding, see Section III-A. When the spy
is absent, the store-to-load forwarding loop will execute with
a deterministic latency. When the spy is present, however, the
store-to-load forwarding path will be interrupted by the spy
competing for functional unit and MOB resources. We found
that a store-to-load forwarding loop in the trojan process could
detect the spy’s presence within roughly 200 cycles on average.
For the spy to detect the trojan, we incorporate a 1-wire
communication protocol, which wraps a data bit in a 1-bit
header and footer. Each trojan data bit is prepended with 0
and appended with a 1, such that the spy receives either 001
and 011 for each bit transmitted by the trojan. This technique
inherently allows the spy to distinguish the trojan’s absence;
while the trojan is sending a 0 bit, 4K-aliasing will be regularly
observable as a 001 message whereas when the trojan is idle
4K-aliasing will not be observable at all.
Recovery from Failed Transmission. We use initialization
and completion messages to recover from failed transmissions.
The initialization phase is entered upon mutual detection
so that the communication is synchronized from a known
starting point. A successful message is indicated by receipt
of an agreed upon completion message. Otherwise, either the
trojan or spy failed and the message must be resent from
initialization.
E. A Robust 4K-Aliasing Covert Channel
Equipped with methods for detection, synchronization, and
failure recovery, we are now in a position to redeﬁne the
simple covert channel presented in Section V-B with the
protocol deﬁned in Listing 3. We incorporate several features
in an attempt to correct for the noise characteristics shown in
Figures 6 and 7, while at the same trying not to unnecessarily
limit the capacity.
Both the trojan and the spy operate in one of two stages:
detect and transmit. There are four parameters affecting the
practical bitrate given the 4K-aliasing protocol in Listing 3: i)
Ttr,detect, ii) Tsp,detect, iii) Tone, and iv) Detect Probes. The ﬁrst
is used to trigger transmission once the presence of the spy has
been detected. Effectively, the trojan can detect the presence
of the spy by executing a tight loop of instructions that take
advantage of store-to-load forwarding, see Section III-A. In
our in-house experiments. We found that it took less than
200 cycles on average to detect the spy’s presence after it
is scheduled as a hyperthread with the trojan.
Within the trojan process we iterate over the spy detection
loop for an interval of Detect Probes. This can be any length
with out loss of applicability. The only requirement is that
the trojan and spy can schedule themselves for execution.
Accordingly, we decided to set this to a multiple of the bit
length of an n-bit message. We experimentally determined that
the trojan can transmit 1-bit every 58731 cycles. Hence, we set
10
Fig. 8: Intersymbol interference improvement in 4K-aliasing
covert communication channel. The plots on the left illustrate
the signal and eye diagram for simple 4K-aliasing protocol.
The plots on the right illustrate the signal and eye diagram
after incorporating the robust communication channel for the
4K-alias covert channel.
Detect Probes in the trojan to 10× this amount. As a side-
effect of this the trojan’s bandwidth is 57 kbps using a 3.4
GHz clock.
To detect the trojan, we incorporate a 1-wire communi-
cation protocol, which wraps a data bit in a 1-bit header
and footer. The parameters Ttr,detect and Tone are both limited
by the number of bits they can decipher given a single
bit transmission from the Trojan under the 1-wire protocol.
However, we have much more freedom for sampling the trojan
transmission because the best case theoretical 4K-aliasing bit
rate is 19.8 Mbps, see Section V-D. We set the spy to sample
to 100 × this
the trojan every 580 cycles. We set Ttr,detect
amount to provide a reasonable amount of time to detect the
trojan’s presence. Tone is also set to 580 cycles resulting in
an effective sampling rate of 5.91 Mbps. Given that for every
trojan data bit sent three total bits need to be received by
the spy to stably recover the transmission, our expected 4K-
aliasing covert channel bit rate is roughly 2 Mbps.
F.
In-House Robust 4K-Aliasing Covert Channel Results
We ran an experiment wherein we transmitted a known
message using both the simple and robust protocols to compare
both their resilience to noise and bit rate. The results are
shown in Figure 8 and depict a side-by-side comparison of
the protocols along with the messages intersymbol interference
diagram. Intersymbol interference distorts a digital signal such
that the previous bits in the message warp subsequent signals in
the message [18]. We found through this in-house experiment
that the 1-wire communication protocol eliminated interference
in the trojan bit transmission during transitions from binary 1 to
0 and binary 0 to 1. The eye diagram for the robust protocol has
a clean opening indicating that the sampling rate is adequate.
The eye’s zero crossing meet the Nyquist criterion such that
it allows maximum robustness against sampling phase offsets.
Fig. 9: Percent error rate as a one and zero trojan bit trans-
mission frequency.
The 1-wire communication protocol does not come without
a cost, however, and will decrease our channel capacity. To
ﬁnd the experimental channel capacity we need to know the
channel’s error rate, which we compute by performing an
experiment wherein we generate 1 million random bits and
transfer them through the 4K-aliasing covert channel. We then
compute the error rate of the received signal for zeros and
ones separately. We perform this measurement over varying
trojan signal pulse widths (e.g. trojan signal frequency). The
pulse widths are determined by the number of 4 KB aligned
stores executed per bit. We send 3 bits every sixteenth, eighth,
fourth, and second time unit. A plot of the frequency versus
error rate is shown in Figure 9.
Interestingly, executing a 4 KB aligned store every six-
teenth time unit (256 B) shows a poor error rate for trans-
mitting a one compared to executing 4 KB aligned stores
every eighth time step (512 B). This contradicts our visual
inspection of frequency distributions shown in Figure 7d versus
Figure 7c. We reason that this is because transmitting a one
bit every sixteenth time unit distorts the 1-wire communication
protocol due to the pulse width of the one signal, making it
more difﬁcult to distinguish transmitting a zero (001) from a
one (011). We conclude from this analysis that the ideal error
rate for sending a one should occur at step sizes of 1024 B,
and step sizes of 2048 B for sending a zero. These form the
parameters Czero and Cone in Listing 3.
These results also show that the covert channel error for
sending zeroes and ones is asymmetric. Hence, the channel
can be characterized as a binary asymmetric channel with
noise. The capacity of this channel is given by the following
equation [29]:
(cid:33)
+ log2
1 + 2
Hb(ε0)−Hb(ε1)
1−ε0−ε1
− Hb(ε0)(cid:0)1− ε1
1− ε0 − ε1
(cid:1)
(cid:32)
C =
Hb(ε1)ε0
1− ε0 − ε1
where ε0 is the probability of the spy receiving a 1 given a 0
was sent, ε1 is the probability of the spy receiving a 0 given
11
05001000150020002500observations5101520253035cyclesSimple Protocol1.00.50.00.51.0sample size5101520253035cyclesEye Diagram05001000150020002500observations5101520253035cyclesRobust Protocol1.00.50.00.51.0sample size5101520253035cyclesEye Diagram05001000150020002500Data Bit per 4KB Store Address Step (frequency)0123456Percent Error (%)zero error rateone error rate(cid:0)p(cid:1) is the binary entropy function for
a 1 was sent, and Hb
probability p deﬁned as:
(cid:0)p(cid:1) = −plog2 p−(cid:0)1− p(cid:1)log2
(cid:0)1− p(cid:1)
Hb
The channel capacity given the experimentally determined
error rates is presented in Table III. While not
the
effective channel capacity given the calculated error rates is
still above 1.6 Mbps.
ideal,
ε0
ε1
Bit per channel
Channel capacity (Mbps)
256 B
0.007539
0.0502734
0.824027
1.62
512 B
0.002891
0.0158984
0.926979
1.83
1024 B
0.009258
0.0133984
0.918127
1.81
2048 B
0.005664
0.0267188
0.886071
1.75
TABLE III: Channel capacity given a binary asymmetric noisy
channel transmitting at 1.96 Mbps
VI.
IAAS PUBLIC CLOUD 4K-ALIASING COVERT
CHANNEL
Given that the robust channel demonstrated in our in-house
experiments showed reasonable results, we then verify its use
on Amazon EC2 and Google Compute Engine (GCE) IaaS
public clouds. The instance conﬁgurations we experimented
upon are shown in Table IV. We used the prior research in
instance placement vulnerabilities [36] to successfully colocate
VMs from two different accounts. This required launching 10
VMs from each account and then scaling up a designated
account in step sizes of 5 VMs until they were physically
hosted on the same core.
Cloud Provider
EC2
GCE
Instance Type
m4.large
n1-standard-1
Processor
2.4 GHz Intel Xeon E5-2676 v3
2.3 GHz Intel Xeon E5 v3
TABLE IV: Instance conﬁgurations and architecture used for
demonstrating the 4K-aliasing covert channel on the public
cloud. Note, GCE does not reveal the exact microarchitecture