top，而其他表的此字段值为0。此外，正如我们所预期的，每个RTTI指针为0。这里数值-4告诉我们两件事：
1、第2张表是虚表组中的次表（因为offset to top非0）；
2、与第1张表有关的类型大小是4。请注意，因为第1张和第2张形成虚表组，和表1关联的类型大小实际上是部分对象的大小（即一个子对象）。
**  
**
**以编程方式查找虚表**
根据上述内容，我们可以设计以下简单的程序来从二进制查找虚表（组）：
一个简单的脚本，用于在带有英特尔
ABI的二进制文件中定位vtable组。请注意，此脚本不考虑虚拟继承（更值得注意的），或虚表包含空指针的情况。这可能在最近的编译器处理纯抽象类时发生。
    import idaapi
    import   idautils
    def read_ea(ea):
        return (ea+4,   idaapi.get_32bit(ea))
    def read_signed_32bit(ea):
        return (ea+4,   idaapi.as_signed(idaapi.get_32bit(ea), 32))
    def get_table(ea):
          '''给定一个地址，对位于该地址的表返回（offset_to_top，end_ea），
       如果没有表则返回None'''
          ea, offset_to_top =   read_signed_32bit(ea)
        ea, rtti_ptr =   read_ea(ea)
        if rtti_ptr   != 0:
            return None
        func_count = 0
        while True:
            next_ea, func_ptr = read_ea(ea)
            if not func_ptr in   idautils.Functions():
                break
            func_count += 1
            ea =   next_ea
        if func_count   == 0:
            return None
        return   offset_to_top, ea
    def get_table_group_bounds(ea):
          '''给定一个地址，对位于该地址的虚表组返回（start_ea，end_ea）'''
        start_ea = ea
          prev_offset_to_top = None
          while True:
            table =   get_table(ea)
            if table is None:
                break
            offset_to_top, end_ea = table
            if   prev_offset_to_top is None:
                if   offset_to_top != 0:
                    break
                prev_offset_to_top = offset_to_top
            elif offset_to_top   >= prev_offset_to_top:
                break
            ea = end_ea
        return   start_ea, ea
    def find_tablegroups(segname=".rodata"):
          '''对于在段'segname'的虚表组返回一个（start，end）ea对的列表  '''
        seg =   idaapi.get_segm_by_name(segname)
        ea =   seg.startEA
          groups = []
          while ea < seg.endEA:
            bounds =   get_table_group_bounds(ea)
            if   bounds[0] == bounds[1]:
                ea += 4
                continue
            groups.append(bounds)
            ea =   bounds[1]
        return groups
[**view
raw**](https://gist.github.com/ALSchwalm/2c8a16576d713bacdbc3f9df36c0e843/raw/28cff7914f8cd97c12d0de976c9f082dc7687c1b/reversing-part-2-3.py)[ **reversing-part-2-3.py**](https://gist.github.com/ALSchwalm/2c8a16576d713bacdbc3f9df36c0e843#file-reversing-part-2-3-py) **hosted with ❤ by**[ **GitHub**](https://github.com/)
在IDA的python解释器中运行上面的代码之后，可以执行find_tablegroups()获取一个虚表组地址的列表。例如，这可以与附加代码结合起来去为每张虚表创建对应结构。
然而，只知道虚表组在哪里并不是非常有用。我们需要一些与虚表关联的类型之间的关系信息。然后，我们将能够为虚函数调用点生成一个'候选的'函数调用列表，只要我们知道该类型相关联的“家族”。
**  
**
**恢复类型关系**
恢复这些关系的最简单的方法是去识别两个虚表共享的一个相关函数指针。我们不能恢复这种关系的性质，但它足以确定他们在同一个家族。
但是我们可以进一步考虑C ++中构造函数和析构函数的行为。
**构造函数执行以下步骤：**
1、调用父类的构造函数
2、初始化vptr（s）以指向此类型的vtable（s）
3、初始化对象的成员
4、在构造函数中运行其他任何代码
**析构函数执行基本上相反的步骤：**
1、设置vptr（s）以指向此类型的vtable（s）；
2、在析构函数中运行其他任何代码；
3、销毁对象的成员；
4、调用父类的析构函数。
**注意，vptr再次设置为指向虚表。如果你不考虑虚函数调用应该在销毁期间仍然工作的话就会觉得奇怪。**
假设我们修改Bird的析构函数，让它调用fly。如果你要销毁一个Bat对象（当一个Bat对象完成时，它又调用Bird的析构函数），它应该调用Bird::fly不是Bat::fly，因为对象不再是一个Bat。为了这个工作顺利进行，Bird析构函数必须更新vptr。
因此，我们知道每个析构函数将调用父类型的析构函数，并且这些析构函数会引用虚表（将它分配给vptr）。所以，我们可以通过“跟随析构函数”来重建类型的继承层次结构。类似的逻辑也可以用于构造函数。
考虑一下第一个虚表中的第一个条目（我们期望它是一个析构函数）：
注意，上面有两个赋值，它们都是虚表的地址范围。这是上面列表中的步骤1。这些对象似乎没有任何成员，因为它直接进行到步骤4，并调用其他两个析构函数。我们也可以确认这些其他函数是析构函数，因为它们在虚表中的位置（在表6和表3的开头）。对剩余的表执行此操作，这告诉我们继承层次结构的布局如下：
这和源代码中的实际层次结构相符合。总共有两个基类，即一个类中有两个父类。
**识别构造函数**
通过类似的推理，我们可以找到与虚表相关联的构造函数，方法是找那些将它们的vptr分配给一个不是析构函数的虚表地址的函数就是构造函数。通过将此规则应用于目标，我们发现有5个这样的函数，每个类型一个：
**  
**
**反虚拟化**
有了这个，我们可以看看反编译体的main函数：
虚函数在第28行和第29行清晰可见。然而，我们也可以从上面的表中识别第13,16,22和25行的构造函数。使用这些知识，我们可以按照从第1部分的过程看到反虚拟化：
在上面的截图中，我已经设置了v0的类型type_8048D40*。这是与表1/2相关联的类型，也与第13行上的构造函数相关联。类似地，第16行上的构造函数与表5相关联，我已经为其创建了一个类型命名为type_8048D98（这是表开始的地址，我可以很容易地引用它们如table_5或类似的命名）。同样的事情可以应用到v2和v3以便可以看到第28和29行的修改。
所以，虽然原始代码包含的字符串将使识别类型和方法容易，但是我们不需要那些来进行我们的“反虚拟化”。
**  
**
**结论**
这仍然是一个非常手工的过程，但我们已经更进一步了。我们现在（大概）可以自动检测虚表了。不难看出我们将如何能够自动化构造相关结构，然后可能是构造函数调用的位置。我们也可以想象重建类型树。在下一部分，我们将深入探讨这一点。
传送门：[【技术分享】逆向C++虚函数（一）](http://bobao.360.cn/learning/detail/3332.html)