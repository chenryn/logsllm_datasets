limited initial knowledge of malicious samples could be enough to
have this reputation propagated across the graph and to identify a
large number of unknown malicious (cid:128)les.
Problem statement. Despite of its straightforwardness, the global
download graph and the label propagation that we propose bring
along several interesting issues regarding their applicability to
the real world, especially in the Big Data context. First of all, le-
gitimate content delivery network infrastructures (e.g., Amazon
Web Services, Akamai) have been substantially used to host large
amounts of malware alongside benign so(cid:137)ware, and therefore both
benign so(cid:137)ware and malware are served through them [38]. At the
same time, vulnerable websites (typically serving benign (cid:128)les) could
also be compromised by cybercriminals to host malware. Moreover,
a considerable amount of (cid:128)les could not be analyzed in a timely
manner and thus have unknown reputation at the time of check (i.e.,
we could not con(cid:128)rm that a (cid:128)le is benign or malicious). Inevitably
this global download graph is a mixture of benign (cid:128)les, malware,
PUPs, and (cid:128)les with unknown status together with their hosting
infrastructures. On that account, our major goal is to design a scal-
able graph inference model to reliably detect malicious (cid:128)les and
validate this approach via a large-scale analysis on real-world data.
(cid:140)is approach complements existing malware detection systems as
it o(cid:130)ers insights on how various (cid:128)les are hosted and distributed to
end-hosts. Our second goal is to develop an approach that can be
e(cid:130)ective over a long period of time, despite the quick changes that
the malware delivery ecosystem understakes. Finally, our third goal
is to gain insights into current malware delivery schemes, which
can help our community develop be(cid:138)er mitigation techniques.
3 METHODOLOGY
In this section, we start by explaining how Marmite builds down-
load graphs. We then describe the label propagation with Bayesian
con(cid:128)dence graph inference model used by Marmite, giving a real
world example of how it works. Finally, we provide a theoretical
analysis of its scalability in dealing with large scale datasets.
Figure 3: Legend to interpret graphs throughout the paper.
3.1 Building Download Graph
Marmite builds download graphs to perform its label propagation
operation. We de(cid:128)ne the download graph
G = (V , E, A),
(1)
in which V is a set of heterogeneous nodes that represent the follow-
ing entities: IP addresses, Fully-quali(cid:128)ed domain names (FQDNs),
URLs, and (cid:128)les. It is important to note that, although the nodes
in this graph have a very di(cid:130)erent nature, some being related to
hosts and some others to (cid:128)les, Marmite treats them in the same
way, as the (cid:128)le reputation is propagated across them without mak-
ing a distinction on their types. (cid:140)is keeps our model general
and makes it independent to speci(cid:128)c characteristics of malware
delivery networks. E is a set of edges that represent the relation-
ships among these nodes. As we will explain later, we consider
nodes as connected if they appeared in the same download event.
A is the symmetric adjacent matrix of the graph G: Ai, j = 1 if xi
and xj are linked, otherwise Ai, j = 0. An example of download
graph is shown in Figure 3. As it can be seen, the model captures
both (cid:128)le dropping relationships and the (cid:128)le distribution network
as discussed in Section 2.
To build the download graph, Marmite takes as input download
events. We de(cid:128)ne a download event as a tuple
d =,
(2)
where I is the IP address that the (cid:128)le was downloaded from, D is its
FQDN, Uf is the full URL of the download (a(cid:137)er removing the URL
parameters), while Ff is the (cid:128)le identi(cid:128)ed by its SHA2. We then have
information on the (cid:128)le that initiated the download event. (cid:140)is (cid:128)le
can be a malware sample dropping other malware, as part of a pay-
per-install scheme [5] or a legitimate program used to download
(cid:128)les, such as a web browser. As we will explain in Section 4, we
remove information on popular web browsers and (cid:128)le archivers
from our datasets, to avoid to have unrelated (cid:128)les connected in the
download graph. Fp indicates the SHA2 of this parent (cid:128)le, while
Up indicates the URL that this (cid:128)le was downloaded from. Note that
both these values are not necessarily present in a download event.
In fact, the information where a parent (cid:128)le was downloaded might
not be available. Finally, we include a series of URLs Ui1, ...Uik,
which are the URLs involved in the HTTP redirection chain that
terminates with the (cid:128)nal download URL Uf . As previous research
showed [35] malware operators are commonly using redirection
chains to make their infrastructures resilient and avoid detection.
(cid:140)ese URLs are not always present in a download event, because
not all downloads take advantage of any redirection.
File B SHA2: …File A SHA2:…Intermediate URL: http://intermediate.url/redirection/pathURL :http://parent.com/pathURL: http://download.ﬁle.com/path/FQDN: parent.comIP: 4.3.2.1FQDN: download.ﬁle.comIP: 1.2.3.4File CSHA2: …FQDN: intermediate.url93Marmite collects download events over an observation period
(as we show in Section 5.4, we experiment with variable period
lengths, from one hour to one day), and then builds the download
graph associated to this observation period. To build the graph, the
following steps are taken for each download event d:
• For each element de in the tuple d, we check if de already
has a node in the graph, if it does not, we create a new
node identi(cid:128)ed by the node’s identi(cid:128)er and add it to the
set of nodes V . We use the full IP address and the FQDN as
identi(cid:128)ers for IP addresses and domain nodes respectively,
the full URL without parameters for URL nodes, and the
SHA2 hash for (cid:128)le nodes.
• If there is no edge existing yet between any two elements
de1 and de2 in d, we create one and add it to the set of edges
E.
Finally, we populate the |V | × |V | matrix A, se(cid:138)ing Ai, j as 1 if
there is an edge between those two nodes, and to 0 otherwise. (cid:140)is
matrix will be used by the label propagation algorithm described
in the next section.
We assume the label (benign or malicious) of each node in the
graph as a random categorical variable. (cid:140)e label is 1 or 0, corre-
sponding to the malicious or benign class. What we target is to infer
the probability of each node to be malicious as P (yi = 1|θ ) = θ,
where θ is the parameter of the distribution. Changing the value
of θ changes the likelihood of the corresponding nodes belonging
to the malicious group. Following the neighborhood smoothness
hypothesis of label propagation, we assume the graph nodes in-
side the same neighborhood share the same θ value. (cid:140)e binomial
likelihood of labels inside the neighborhood is given as follows:
ni!
˜Ni−ni ,
j∈ ˜Ni
P ( ˜Ni|θ ) =
i. ni =(cid:80)
ni!( ˜Ni − ni )!θni (1 − θ )
(3)
where ˜Ni denotes the all graph nodes in the neighborhood of node
yj. For computational convenience, we use the con-
jugate prior of the binomial distribution, a.k.a Dirichlet distribution
(1 − θ )α2−1, where α1
as the prior probability over θ, P (θ ) ∝ θ α1−1
and α2 are the parameters of Dirichlet prior. (cid:140)e posterior distribu-
tion of θ given the labels of the nodes inside the same neighborhood
is formulated as:
3.2 Label Propagation with Bayesian
Con(cid:128)dence
In this section we outline the theoretical foundation of Marmite
to detect malware reliably over the download graph. To describe
the malware detection problems in formal terms, we introduce the
notions used in this section (cid:128)rst, then formally present the Bayesian
label propagation algorithm employed by Marmite. Note that our
proposed Bayesian label propagation is a semi-supervised algo-
rithm and calculates posterior probability of a node’s missing labels
based on graph structure. It is di(cid:130)erent from belief propagation,
which is a sum-product message passing algorithm and estimates
marginal distribution of each variable through the factor graph
based presentation of a given Bayesian network.
Notation. Let xi represent an element de in d (see Section 3.1),
and (x1, y1)... (xl , yl ) be labeled data, denoted as (XL, YL ). We
assume that all class labels are presented in YL. Let (xl +1, yl +1)...
(xl +u , yl +u ) be unlabeled data (XU , YU ), where YU denotes the
underlying true class labels of the unlabeled data.
In addition,
X = {x1, x2, ...xl +u} is used to denote the combination of both
labeled and unlabeled data.
Bayesian Label propagation. Label propagation [42], as a trans-
ductive semi-supervised learning algorithm, is designed to estimate
YU from X and the given YL by propagating label information from
labeled data samples to unlabeled ones. It has shown that graph-
based propagation can be very e(cid:130)ective at (cid:128)nding the best label
distribution across nodes [42]. However, most nodes in a real world
download graph tend to have few neighbors, and thus, a small
amount of evidence. It is important for us to provide a con(cid:128)dence
level to the inference results. In our work, the malware detection
algorithm used by Marmite is designed by inheriting the spirit
of label propagation and incorporating the technique of Bayesian
inference [40]. We use the graph de(cid:128)nition G = (V , E, A) presented
in Section 3.1 for download graphs, where V represents (cid:128)les, URLs,
FQDN and IP nodes, the edge set E represents the relationships
among these nodes, and A is the symmetric adjacent matrix of the
graph G: Ai, j = 1 if xi and xj are linked, otherwise Ai, j = 0.
.
θ
= ni + α1
(1 − θ )
tion of yi:
˜Ni−ni +α2−1
P (yi = 1| ˜Ni , α1) =
P (yi = 1|θ )P (θ| ˜Ni , α1)dθ
(4)
In a further step, we can write the posterior predictive distribu-
P (θ| ˜Ni ) ∝ θni +α1−1
(cid:90)
(cid:12)(cid:12)(cid:12) + 1 .
(cid:12)(cid:12)(cid:12) ˜Ni
k ={1,2} αk = 1 and(cid:12)(cid:12)(cid:12) ˜Ni
E(θ| ˜Ni , αk ) and we assume(cid:80)
To derive the formulation of the predictive distribution, we fol-
low the theorem that the predictive distribution P (yk|αk , ˜Ni ) =
of neighbors of the node i in the graph. By relaxing the de(cid:128)nition of
ni and replacing the discrete labels of the neighboring nodes with
continuous posterior probability of node labels P (yi = 1| ˜Ni , α1),
we can further derive a recursive estimation of the con(cid:128)dence of
node labeling in the following equation:
(cid:12)(cid:12)(cid:12) is the number
(cid:80)N
(cid:80)N
j=1 Ai, j fj + α1
j=1 Ai, j + 1 .
fi =
(5)
(6)
where N is the number of nodes in the graph and A is the adjacency
matrix. We use fi to denote the posterior labeling probability P (yi =
1| ˜Ni , α1). With a simple linear algebra calculation, the recursive
calculation of labeling posterior probability for each unlabeled node
in the download graph can be formulated in a matrix form:
−1
(AU F + 1α1)
FU = (DU + I )
(7)
Assuming we have u unlabeled nodes, 1 is u dimensional column
vector with each entry as 1. F is a vector of fi for all nodes including
both labeled and unlabeled, and FU is a vector of fi for u unlabeled
nodes. AU is formed by aggregating the u rows of A corresponding
to unlabeled nodes. I is a u-by-u identify matrix, and DU is a u-by-u
diagonal matrix, where the k-th element in diagonal is the sum of
all values in the k-th row of AU . An example of how Marmite infers
94probabilistic node labels in a small real-world download graph is
shown in Section 3.3.
3.3 Marmite: Inference Example
In this section, we demonstrate how Marmite infers probabilistic
node labels in a small real-world download graph. (cid:140)e label fi
is a probabilistic value as de(cid:128)ned in Eq (6) and fi ∈ [0, 1] (see
Section 3.2 for details). In short, the closer fi to 1, the more likely a
(cid:128)le is malicious; the closer fi to 0, the more likely a (cid:128)le is benign.
Initially (cid:128)le 4.exe with SHA2 96D26... and (cid:128)le svchos.exe