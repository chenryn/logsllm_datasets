variations of Sadmind Amslverify Overflow be-
tween Sadmind Ping and any later Rsh alert. By
reasoning about the hypothesized attacks using equal-
ity constraints, we rule out some of these hypothesized
attacks.
the destination IP address of
Sadmind Ping67343 is 172.16.112.50, which is dif-
ferent from either the source or the destination IP address
of Rsh67543. Thus, Sadmind Ping67343 cannot
indirectly prepare for Rsh67543 through a variation of
Sadmind Amslverify Overflow.
For example,
The hypothesized attacks are further validated using
the raw audit data.
In our experiments, we use the
inferred attribute values and the protocol that carries
the corresponding attack as the ﬁltering condition for
each hyper-alert type. For example, the ﬁltering con-
dition for (variations of) FTP Put is protocol = f tp
plus all the inferable attributes. All the hypothesized
attacks are then checked using the audit records be-
tween the hyper-alerts that result in the hypothesized at-
tacks. For example, we search all the IP packets be-
tween Sadmind Ping67343 and Rsh67560 for RPC
packets in order to validate a hypothesized (variation of)
Sadmind Amslverify Overflow attack (which is a
RPC based attack).
We continue the above process to integrate the re-
sulting correlation graph with additional ones generated
by the Intrusion Alert Correlator. We are able to fur-
ther integrate hyper-alerts Sadmind Ping67286 and
Sadmind Ping67341, which are both uncorrelated
alerts. As a slight difference, FTP Put are hypothe-
sized during both integration processes, but all hypothe-
sized FTP Put attacks are invalidated later using raw au-
dit data. In other words, we ﬁnd no ftp activities involving
the corresponding host during the time frame when the hy-
pothesized attacks might happen. Figure 9 shows the inte-
grated correlation graph after the hypothesized attacks are
consolidated. The hypothesized attacks are shown in gray,
and are labeled by the corresponding hyper-alert type fol-
lowed by an ID to distinguish between different instances
of the same type of attacks.
Now let us examine the integrated correlation graph in
Figure 9. According to the description of the data sets
[15], the three Sadmind Amslverify Overflow at-
tacks and the prepare-for relations between these attacks
and the other alerts are all hypothesized correctly. How-
ever, the FTP Put and HTTP Shells attacks are hy-
pothesized incorrectly. In addition, the gray Rsh nodes in
Figure 9 result from the different combinations of equality
constraints between hyper-alert types (Their attribute val-
ues were inferred through existing alerts, and they cannot
be further consolidated with other alerts or hypothesized
attacks.
In our future work, we may look for a way to
further reduce them).
We
also
performed
the
experiments
of
Similar
in LLDOS 1.0.
using
to
the DMZ data set
the inside data set, we deliberately dropped all
Sadmind Amslverify Overflow alerts from those
generated by RealSecure Network Sensor 6.0. Using the
type graph in Figure 8, we generated three integrated
correlation graphs in Figure 10, in which hypothesized
attacks are shown in gray. Based on the reasoning of
the hypothesized attacks, we know the destination IP ad-
Sadmind Amslverify Overflow4,
dresses
and
Sadmind Amslverify Overflow5
are
Sadmind Amslverify Overflow6
172.16.115.20,
172.16.112.50,
and
the destination IP address
respectively.
of HTTP Shells2 is 172.16.112.50.
Accord-
the
ing to the description of
are
Sadmind Amslverify Overflow
all hypothesized correctly, while the HTTP Shells
attack is hypothesized incorrectly. These experiment
results (including LLDOS 1.0 inside and DMZ data sets)
indicate that though the proposed techniques can identify
missed attacks, they are still not perfect. Nevertheless, the
proposed techniques have already exceeded the limitation
of IDSs.
the data sets [15],
172.16.112.10
Similarly,
attacks
The experimental evaluation reported in this paper is
still preliminary, though they have demonstrated the po-
tential of the proposed techniques. To further understand
the capability of these techniques, a more detailed, quan-
titative evaluation is required. We will perform such eval-
F
i
g
u
r
e
8
.
T
h
e
t
y
p
e
g
r
a
p
h
u
s
e
d
i
n
o
u
r
e
x
p
e
r
i
m
e
n
t
s
{n17.DestIP=n6.DestIP
^n17.DestPort=n6.DestPort}
{n17.DestIP=n11.DestIP
^n17.DestPort=n11.DestPort}
{n17.DestIP=n9.DestIP
^n17.DestPort=n9.DestPort}
{n17.DestIP=n10.DestIP
^n17.DestPort=n10.DestPort}
n17:Port_Scan
{n17.DestIP=n18.DestIP
^n17.DestPort=n18.DestPort}
{n20.DestIP=n10.DestIP
^n20.DestPort=n10.DestPort}
{n17.DestIP=n19.DestIP
^n17.DestPort=n19.DestPort}
{n20.DestIP=n18.DestIP
^n20.DestPort=n18.DestPort}
n10:Email_Ehlo
n18:FTP_Pass
{n20.DestIP=n19.DestIP
^n20.DestPort=n19.DestPort}
n19:FTP_User
{n20.DestIP=n11.DestIP
^n20.DestPort=n11.DestPort}
n20:UDP_Port_Scan
{n17.DestIP=n12.DestIP
^n17.DestPort=n12.DestPort}
{n10.SrcIP=n11.SrcIP
^n10.DestIP=n11.DestIP}
n11:Email_Turn
{n17.DestIP=n5.DestIP
^n17.DestPort=n5.DestPort}
{n20.DestIP=n9.DestIP
^n20.DestPort=n9.DestPort}
{n20.DestIP=n5.DestIP
^n20.DestPort=n5.DestPort}
{n9.DestIP=n7.SrcIP,
n9.DestIP=n7.DestIP}
{n5.DestIP=n7.SrcIP,
n5.DestIP=n7.DestIP}
n9:Email_Debug
{n9.DestIP=n6.DestIP}
{n9.DestIP=n8.SrcIP,
n9.DestIP=n8.DestIP}
n5:Email_Almail_Overflow
{n5.DestIP=n6.DestIP}
{n17.DestIP=n1.DestIP
^n17.DestPort=n1.DestPort}
{n20.DestIP=n12.DestIP
^n20.DestPort=n12.DestPort}
{n20.DestIP=n1.DestIP
^n20.DestPort=n1.DestPort}
{n12.DestIP=n4.DestIP}
{n1.DestIP=n4.DestIP}
n12:FTP_Syst
n1:DNS_HInfo
{n20.DestIP=n6.DestIP
^n20.DestPort=n6.DestPort}
{n12.DestIP=n3.DestIP}
{n3.DestIP=n6.DestIP}
n6:FTP_Put
{n2.DestIP=n6.DestIP}
{n6.DestIP=n7.SrcIP,
n6.DestIP=n7.DestIP}
n4:Sadmind_Ping
{n4.DestIP=n3.DestIP}
{n14.DestIP=n6.DestIP}
{n12.DestIP=n2.DestIP}
{n1.DestIP=n3.DestIP}
{n1.DestIP=n2.DestIP}
n3:Sadmind_Amslverify_Overflow
{n5.DestIP=n8.SrcIP,
n5.DestIP=n8.DestIP}
{n3.DestIP=n7.SrcIP,
n3.DestIP=n7.DestIP}
n2:HTTP_Shells
n14:HTTP_Cisco_Catalyst_Exec
{n3.DestIP=n8.SrcIP,
n3.DestIP=n8.DestIP}
{n2.DestIP=n8.SrcIP,
n2.DestIP=n8.DestIP}
{n14.DestIP=n8.SrcIP,
n14.DestIP=n8.DestIP}
n8:Rsh
{n2.DestIP=n7.SrcIP,
n2.DestIP=n7.DestIP}
{n14.DestIP=n7.SrcIP,
n14.DestIP=n7.DestIP}
{n8.SrcIP=n7.SrcIP,
n8.SrcIP=n7.DestIP,
n8.DestIP=n7.SrcIP,
n8.DestIP=n7.DestIP}
n7:Mstream_Zombie
{ }
n16:Stream_DoS
n13:HTTP_ActiveX
n15:HTTP_Java
{n13.SrcIP=n7.SrcIP,
n13.SrcIP=n7.DestIP}
{n15.SrcIP=n7.SrcIP,
n15.SrcIP=n7.DestIP}
Email_Almail_Overflow67529
Email_Almail_Overflow67304
FTP_Syst67243
HTTP_Shells1
Sadmind_Ping67343
Sadmind_Amslverify_Overflow2
Mstream_Zombie67554
Mstream_Zombie67776
Rsh67560
Rsh67558
Rsh67559
Rsh67553
FTP_Put7
Rsh8
Rsh3
Rsh5
Rsh9
Rsh10
Rsh67542
Rsh14
Rsh13
Rsh15
Rsh67540
Sadmind_Ping67286
Sadmind_Amslverify_Overflow11
Rsh67543
Mstream_Zombie67767
Rsh67545
Mstream_Zombie67537
Stream_DoS67773
Sadmind_Ping67341
Sadmind_Amslverify_Overflow19
Mstream_Zombie67777
Mstream_Zombie67563
Rsh67546
Rsh67547
Rsh67549
Rsh67550
Rsh17
Rsh16
Rsh67562
Rsh67535
Rsh67536
Rsh67538
Rsh67539
Rsh23
Figure 9. The integrated correlation graph constructed from LLDOS 1.0 inside trafﬁc
uations in our future research.
5. Related Work
Our work in this paper is closely related to the recent re-
sults in intrusion alert correlation. In particular, our tech-
niques integrate the causal correlation methods in [5, 19]
and the clustering correlation methods in [4, 7, 25, 27]. In
addition to correlating intrusion alerts, our techniques al-
low to further hypothesize and reason about attacks pos-
sibly missed by the IDSs, and thus can potentially exceed
the limitation of IDSs.
There are other alert correlation techniques. The Tivoli
approach correlates alerts based on the observation that
some alerts usually occur in sequence [9]. M2D2 corre-
lates alerts by fusing information from multiple sources
besides intrusion alerts, such as the characteristics of the
monitored systems and the vulnerability information [17],
thus having a potential to result in better results than those
simply looking at intrusion alerts. The mission-impact-
based approach correlates alerts raised by INFOSEC de-
vices such as IDSs and ﬁrewalls with the importance of
system assets [21]. The alert clustering techniques in
[13, 14] use conceptual clustering and generalization hi-
erarchy to aggregate alerts into clusters. An interesting
approach was proposed recently to apply statistical tests to
identify causal relationships among aggregated alerts [22].
Alert correlation may also be performed by matching at-
tack scenarios speciﬁed by attack languages. Examples of
such languages include STATL [10], LAMBDA [6], JIG-
SAW [26] and Chronicles [16]. We consider these tech-
niques as complementary to ours.
Our approach is also related to techniques for static vul-
nerability analysis (e.g., [1, 12, 23, 24]). In particular, the
methods in [1, 24] also use a model of exploits (possi-
ble attacks) in terms of their pre-conditions (prerequisites)