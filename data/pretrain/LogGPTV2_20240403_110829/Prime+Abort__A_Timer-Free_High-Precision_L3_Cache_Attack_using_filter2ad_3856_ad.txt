cation, whereas in the “control” condition, it accesses an
unrelated location. We introduce delays (via busy-wait)
of varying lengths into the victim’s code in order to vary
the frequency at which it accesses the target location (or
unrelated location for control). Figures 3, 4, and 5 plot
the number of events observed by the respective attack-
ers, vs. the actual number of accesses by the victim, in
“control” and “treatment” scenarios. Data were collected
from 100 trials per attacker, each entailing separate runs
of Algorithm 1 and new targets. The y = x line is shown
for reference in all ﬁgures; it indicates perfect perfor-
mance for the “treatment” condition, with all events de-
tected but no false positives. Perfect performance in the
“control” condition, naturally, is values as low as possi-
ble in all cases.
We see in Figure 3 that PRIME+ABORT detects a large
fraction of the victim’s accesses at frequencies up to
several hundred thousand accesses per second, scaling
up smoothly and topping out at a maximum detection
speed (on our test machine) of around one million events
per second. PRIME+ABORT exhibits this performance
while also displaying relatively low false positive rates
of around 200 events per second, or one false positive
every 5000 µs. The close correlation between number of
detected events and number of victim accesses indicates
PRIME+ABORT’s low overheads—in fact, we measured
its transactional abort handler as executing in 20-40 ns—
which allow it to be essentially “always listening” for
victim accesses. Also, it demonstrates PRIME+ABORT’s
ability to accurately count the number of victim accesses,
despite only producing a binary output (access or no ac-
cess) in each transaction. Its high speed and low over-
heads allow it to catch each victim access in a separate
transaction.
Figure 4 shows the performance of unmodiﬁed
PRIME+PROBE as implemented in Mastik [42]1. We see
false positive rates which are signiﬁcantly higher than
those observed for PRIME+ABORT—over 2000 events
per second, or one every 500 µs. Like PRIME+ABORT,
this implementation of PRIME+PROBE appears to have a
top speed around one million accesses detected per sec-
ond under our test conditions. But most interestingly, we
observe signiﬁcant “oversampling” at low frequencies—
PRIME+PROBE reports many more events than actually
occurred. For instance, when the victim thread performs
2600 accesses per second, we expect to observe 2600
events per second, plus around 2000 false positives per
second as before. However, we actually observe over
18,000 events per second in the median case. Likewise,
when the victim thread provides 26,000 accesses per sec-
ond, we observe over 200,000 events per second in the
median case. Analysis shows that for this implementa-
tion of PRIME+PROBE on our hardware, single accesses
can cause long streaks of consecutive observed events,
sometimes as long as hundreds of observed events. We
believe this to be due to the interaction between this
PRIME+PROBE implementation and our hardware’s L3
cache replacement policy. One plausible explanation for
why PRIME+ABORT is not similarly afﬂicted, is that the
replacement policy may prioritize keeping lines that are
part of active transactions, evicting everything else ﬁrst.
This would be a sensible policy for Intel to implement, as
it would minimize the number of unwanted/unnecessary
aborts. In our setting, it beneﬁts PRIME+ABORT by en-
suring that a “prime” step inside a transaction cleanly
evicts all other lines.
To combat the oversampling behavior observed in
PRIME+PROBE, we investigate a modiﬁed implementa-
tion of PRIME+PROBE which “collapses” streaks of ob-
served events, meaning that a streak of any length is sim-
ply counted as a single observed event. Results with this
modiﬁed implementation are shown in Figure 5. We see
that this strategy is effective in combating oversampling,
and also reduces the number of false positives to around
250 per second or one every 4000 µs. However, this im-
plementation of PRIME+PROBE performs more poorly
at high frequencies, having a top speed around 300,000
events per second compared to the one million per sec-
ond of the other two attacks. This effect can be explained
by the fact that as the victim access frequency increases,
streaks of observed events become more and more likely
to “hide” real events (multiple real events occur in the
same streak)—in the limit, we expect to observe an event
1We make one slight modiﬁcation suggested by the maintainer of
Mastik: every probe step, we actually perform multiple probes, “count-
ing” only the ﬁrst one. In our case we perform ﬁve probes at a time,
still alternating between forwards and backwards probes. All of the
results which we present for the “unmodiﬁed” implementation include
this slight modiﬁcation.
USENIX Association
26th USENIX Security Symposium    61
Figure 3: Access detection rates for PRIME+ABORT in the “control” and “treatment” conditions. Data were collected
over 100 trials, each involving several different victim access speeds. Shaded regions indicate the range of the middle
75% of the data; lines indicate the medians. The y = x line is added for reference and indicates perfect performance
for the “treatment” condition (all events detected but no false positives or oversampling).
Figure 4: Access detection rates for unmodiﬁed PRIME+PROBE in the “control” and “treatment” conditions. Data
were collected over 100 trials, each involving several different victim access speeds. Shaded regions indicate the
range of the middle 75% of the data; lines indicate the medians. The y = x line is added for reference and indicates
perfect performance for the “treatment” condition (all events detected but no false positives or oversampling).
62    26th USENIX Security Symposium
USENIX Association
Figure 5: Access detection rates for our modiﬁed implementation of PRIME+PROBE which “collapses” streaks. Data
were collected over 100 trials, each involving several different victim access speeds. Shaded regions indicate the range
of the middle 75% of the data; lines indicate the medians. The y = x line is added for reference and indicates perfect
performance for the “treatment” condition (all events detected but no false positives or oversampling).
during every probe, but this approach will observe only
a single streak and indicate a single event occurred.
Observing the two competing implementations of
PRIME+PROBE on our hardware reveals an interesting
tradeoff. The original implementation has good high fre-
quency performance, but suffers from both oversampling
and a high number of false positives.
In contrast, the
modiﬁed implementation has poor high frequency per-
formance, but does not suffer from oversampling and
exhibits fewer false positives. For the remainder of
this paper we consider the modiﬁed implementation of
PRIME+PROBE only, as we expect that its improved
accuracy and fewer false positives will make it more
desirable for most applications. Finally, we note that
PRIME+ABORT combines the desirable characteristics
of both PRIME+PROBE implementations, as it exhibits
the fewest false positives, does not suffer from oversam-
pling, and has good high frequency performance, with a
top speed around one million events per second.
4.4 Attacks on AES
In this
section we evaluate the performance of
PRIME+ABORT in an actual attack by replicating the at-
tack on OpenSSL’s T-table implementation of AES, as
conducted by Gruss et al. [7]. As those authors ac-
knowledge, this implementation is no longer enabled
by default due to its susceptibility to these kinds of at-
tacks. However, as with their work, we use it for the
purpose of comparing the speed and accuracy of com-
peting attacks. Gruss et al. compared PRIME+PROBE,
FLUSH+RELOAD, and FLUSH+FLUSH [7]; we have
chosen to compare PRIME+PROBE and PRIME+ABORT,
as these attacks do not rely on shared memory. Follow-
ing their methods, rather than using previously published
results directly, we rerun previous attacks alongside ours
to ensure fairness, including the same hardware setup.
Figures 6 and 7 provide the results of this experiment.
In this chosen-plaintext attack, we listen for accesses to
the ﬁrst cacheline of the ﬁrst T-Table (Te0) while run-
ning encryptions. We expect that when the ﬁrst four bits
of our plaintext match the ﬁrst four bits of the key, the
algorithm will access this cacheline one extra time over
the course of each encryption compared to when the bits
do not match. This will manifest as causing more events
to be detected by PRIME+ABORT or PRIME+PROBE re-
spectively, allowing the attacker to predict the four key
bits. The attack can then be continued for each byte of
plaintext (monitoring a different cacheline of Te0 in each
case) to reveal the top four bits of each key byte.
In our experiments, we used a key whose ﬁrst four
bits were arbitrarily chosen to be 1110, and for each
method we performed one million encryptions with each
possible 4-bit plaintext preﬁx (a total of sixteen mil-
lion encryptions for PRIME+ABORT and sixteen mil-
lion for PRIME+PROBE). As shown in Figures 6 and
7, both methods correctly predict the ﬁrst four key bits
to be 1110, although the signal is arguably cleaner and
stronger when using PRIME+ABORT.
5 Potential Countermeasures
Many countermeasures against side-channel attacks have
already been proposed; Ge et al. [4] again provide an
USENIX Association
26th USENIX Security Symposium    63
d
e
v
r
e
s
b
O
s
t
n
e
v
E
d
e
z
i
l
a
m
r
o
N
10.0%
5.0%
0.0%
d
e
v
r
e
s
b
O
s
t
n
e
v
E
d
e
z
i
l
a
m
r
o
N
10.0%
5.0%
0.0%
0
0
0
0
1
0
0
0
0
1
0
0
1
1
0
0
0
0
1
0
1
0
1
0
0
1
1
0
1
1
1
0
0
0
0
1
1
0
0
1
0
1
0
1
1
1
0
1
0
0
1
1
1
0
1
1
0
1
1
1
1
1
1
1
0
0
0
0
1
0
0
0
0
1
0
0
1
1
0
0
0
0
1
0
1
0
1
0
0
1
1
0
1
1
1
0
0
0
0
1
1
0
0
1
0
1
0
1
1
1
0
1
0
0
1
1
1
0
1
1
0
1
1
1
1
1
1
1
First four bits of plaintext
First four bits of plaintext
Figure 6: PRIME+ABORT attack against AES. Shown is,
for each condition, the percentage of additional events
that were observed compared to the condition yielding
the fewest events.
Figure 7: PRIME+PROBE attack against AES. Shown is,
for each condition, the percentage of additional events
that were observed compared to the condition yielding
the fewest events.
excellent survey. Examining various proposed defenses