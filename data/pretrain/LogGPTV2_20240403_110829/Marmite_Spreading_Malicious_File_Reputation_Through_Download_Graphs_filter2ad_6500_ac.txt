### Text Optimization

**Original Text:**

with SHA2 DB000... are identi(cid:128)ed as malicious (cid:128)les (respectively
Zusy and a trojan). We label them accordingly using 1 as their prob-
ability of being malware. Another (cid:128)le 4.exe with SHA2 CB866...
is labeled with 0 (i.e., a known benign (cid:128)le). Marmite uses Eq (6) to
recursively update each node’s probabilistic label and the results are
shown in Figure 4. As we can observe, (cid:128)le AFFGSDGWIJGWEOG.exe
with SHA2 18A2F... is (cid:131)agged as malicious with high probabilistic
con(cid:128)dence score 0.969 as all its neighbors (i.e., svchos.exe in this
case) are malicious. (cid:140)is follows the neighborhood smoothness
hypothesis of label propagation (see Section 3.2). (cid:140)e other nodes’
probabilistic node labels (between 0.6 and 0.7) were partially in-
(cid:131)uenced by (cid:128)le 4.exe with SHA2 CB866..., which is benign. For
this example, we consider a node as malicious if fi > 0.5. In the
end, Marmite is able to (cid:131)ag as malware three previously-unknown
samples. As we can see in Figure 4, the Bayesian label propagation
algorithm enables Marmite to (cid:131)ag the rest of the (cid:128)les as malicious.
Figure 4: An example of how Marmite infers probabilistic
node labels. Initially, two (cid:128)les are known to be malware and
one is known to be benign. At the end of process, three ad-
ditional (cid:128)les are correctly identi(cid:128)ed as malware.
fi by using a weighted aggregation(cid:80)N
by(cid:80)N
3.4 Scalability
It is important to note that Eq (6) can be easily parallelized due to
its recursive update nature. (cid:140)at is, for each individual node i, it
outputs its current label con(cid:128)dence fi to its neighbors during the
map phase; at the reduce phase, it updates its labeling con(cid:128)dence
j=1 Ai, j fj + α then divided
j=1 Ai, j + 1 (which is the sum of all edges incidental to the
node i). In terms of time complexity, the proposed method iterates
over each edge in the download graph a constant amount of times.
Given the maximum number of iterations parameter is (cid:128)xed as c,
the graph has |E| edges and |V | node, the overall time complexity
is O ((|E| + |V |) ∗ c). (cid:140)erefore, it is safe for us to conclude that
Marmite has a linear time complexity.
4 DATASETS
To validate and test Marmite we use the download activity data
from Symantec’s data sharing platform. (cid:140)is data was collected
from the users who opt in for Symantec’s data sharing program to
help improving its detection capabilities. To preserve the anonymity
of the users, client identi(cid:128)ers were anonymized so that it is not
possible to link back the collected data to the user that originated
it.
(cid:140)e download activity data provides meta-information about all
download activities on the user clients. From this data we extract the
following information: the server side timestamp of the download
event, the name, SHA2, and size (in bytes) of the downloaded
(cid:128)le, the referrer URL, the landing page URL and IP address of the
server the (cid:128)le was downloaded from, the full path at which the
downloaded (cid:128)le was stored on the server, the SHA2 of the parent
(cid:128)le (the (cid:128)le that initialized the (cid:128)le downloading activity) and the
URL that this (cid:128)le was downloaded from. Note that SHA2 and URL
of the parent (cid:128)le are not always present and we also remove parent
SHA2s related to popular web browsers and (cid:128)le archivers from
our dataset, to prevent unrelated (cid:128)les from being connected in the
download graph — a similar approach was used in previous work
that studied local delivery graphs [19]. In this paper, we remove 710
SHA2s that are relating to Outlook, IExplore, Firefox, Chrome,
WinZip, Filezilla, 7Zip, TeamViewer and WinRAR.
Symantec also employs extensive static and dynamic analysis
systems to determine the maliciousness of a binary. We leverage
these results and further enrich our dataset using its binary reputa-
tion data to include metadata about the reputation and prevalence
of the downloaded (cid:128)les. (cid:140)is allows us to evaluate Marmite’s per-
formance, by looking at its capability of (cid:131)agging known malware
and benign so(cid:137)ware. On average we extracted 20 million download
events generated by 1.5 million machines per day. We compiled
two separate datasets from this download data. (cid:140)e (cid:128)rst one, which
we call D1, spans a period of 10 days in January 2016, and is com-
posed of over 200 million download events. We use D1 to tune the
parameters needed for Marmite’s operation, and to validate our
approach. We then compile another dataset, which we call D2. (cid:140)is
dataset is composed of 660 million download events collected over
the entire month of June 2016. We use this dataset to test Marmite,
and to show that our system can still perform accurate detections
without needing re-tuning six months a(cid:137)er it was set up.
Data Limitations: It is important to note that the download activ-
ity data is collected passively. (cid:140)at is, download events are recorded
only when their associated downloading request is initiated (this
being generated from a user by clicking on a link or stealthily trig-
gered by a drive-by download exploit or a (cid:128)le dropping event). Any
downloads preemptively blocked by existing defenses (e.g., URL/IP
blacklists) were not observed.
5 VALIDATION
In this section, we (cid:128)rst describe how we collect the ground truth
of malicious and benign (cid:128)les in Section 5.1. We then provide a
detailed validation of Marmite over the D1 dataset (see Section 4)
collected in January 2016. We identify the optimum values for
several parameters used by Marmite. Once the optimal parameters
are identi(cid:128)ed, we validate Marmite’s e(cid:130)ectiveness at detecting
Filename: 4.exeSHA2: F8BA7…URL: http://218.22.3.215:290/4.exeIP: 218.22.3.215Filename: svchos.exeSHA2: DB000…Filename: AFFGSDGWIJGWEOG.exeSHA2: 18A2F…Filename: 4.exeSHA2: 96D26…Filename: 4.exeSHA2: 1713C…Filename: 4.exeSHA2: CB866…1100.610.9690.60.6inferred labelinitial label0.795malware by comparing its detections with the ground truth labels.
We show that Marmite can e(cid:130)ectively increase the knowledge
of malware samples delivered over a download graph, requiring
limited seeds of known malicious and benign (cid:128)les. In Section 6.1
we show that the system tuned and tested on the dataset D1 can
still detect malware on a dataset collected six months later.
5.1 Ground Truth
Marmite requires labeled ground truth of malware and benign
so(cid:137)ware for two reasons. (cid:140)e (cid:128)rst one is that the approach de-
scribed in Section 3.2 requires a number of seed (cid:128)les to propagate
their reputation across the download graph. (cid:140)e second one is that
ground truth is needed to check whether the detections performed
by Marmite are accurate or not. We used three separate sources to
collect ground truth: VirusTotal, the National So(cid:137)ware Reference
Library, and data collected by Symantec.
VirusTotal. VirusTotal [2] is a free online service that aggregates
the scanning outputs of (cid:128)les and URLs from di(cid:130)erent antivirus
engines, website scanners, and a number of (cid:128)le and URL charac-
terization tools. We query VirusTotal for each (cid:128)le SHA2 to obtain
its (cid:128)rst seen timestamp, the number of AV products (and associ-
ated vendor names) that (cid:131)agged the (cid:128)le as malicious, and the total
number of AV products that scanned the (cid:128)le. We consider a (cid:128)le
malicious if at least one of the top (cid:128)ve AV vendors w.r.t. market
share (in no particular order, Symantec, Avast, Microso(cid:137), AVG,
Avira) and a minimum of two other AVs detect it as malicious. A
similar technique was used by previous work [24].
National So(cid:133)ware Reference Library (NSRL). To identify known
benign and reputable (cid:128)les we used NSRL’s Reference Data Set (RDS)
version 2.51 [1]. (cid:140)is dataset provides SHA1 to SHA256 hashes for
known benign programs and it was useful for us to identify such
(cid:128)les in our dataset.
Complementary Ground Truth. We obtained additional ground
truth about malicious (cid:128)les from Symantec, which provided us with
the data. (cid:140)is ground truth is based on Symantec’s static and
dynamic binary analysis platform.
In total our ground truth on dataset D1 consists of 833,705 ma-
licious (cid:128)les and 1,896,782 benign (cid:128)les. (cid:140)e skewed distribution
between benign and malicious (cid:128)les maps the real world observa-
tion that benign (cid:128)les are more prevalent in the wild.
5.2 Choose Optimal Parameters
Marmite requires three parameters to operate. (cid:140)ese three param-
eters are the shape parameter of the Dirichlet distribution α, the
benign (cid:128)le sampling ratio rb, and the malware sampling ratio rm.
Di(cid:130)erent α values a(cid:130)ect the inference accuracy (see Section 3.2),
while rb and rm determine the training data size for benign and
malicious (cid:128)les respectively. In this section, we explain how we
selected the optimal value for these parameters for Marmite to
operate.
Since α, rb, rm are not independent, but selecting one of them
in(cid:131)uences the values of the others, we did not choose them sepa-
rately. We adopt the grid search approach [4] to (cid:128)nd the optimal
parameters. More precisely, we exhaustively search through a
multiple combinations of values for these three parameters and
evaluate Marmite by using each of them. We identify the optimal
score [25] (G-mean=(cid:112)
parameters that generate the maximum geometric mean (G-mean)
T Pr ate × (1 − F Pr ate )). Our dataset is im-
balanced between benign and malicious (cid:128)les. (cid:140)is makes G-mean
the ideal metric to evaluate the performance of Marmite, because
it balances between the classi(cid:128)cation performance on the majority
and the minority class.
Guided by this methodology, we form the parameter space by
se(cid:138)ing α between (0, 1], rb between [0.4, 0.7] and rm between
[0.05, 0.2], and build 64 combinations of these three parameters.
(cid:140)e ranges of rm and rb are selected to re(cid:131)ect the real world sce-
nario; there are plenty of benign (cid:128)les available while the number of
malware samples is limited and we also need to leave some portion
of samples out for test purpose.
We then use them to carry out the grid search. We run Marmite
on a three day subset of the dataset D1 for each combination, and
average the G-mean score over the three days to measure the per-
formance of each combination. We perform strati(cid:128)ed 10-fold cross
validation [16] for each combination. Our results show that given
α = 0.1, rb = 0.6 and rm = 0.1, Marmite outputs the best average
G-mean score, 0.953. On that account, we use these values for the
rest of the paper. In the next section we provide detection results
using these parameters over the remaining part of dataset D1. In
Section 6.1 we demonstrate that these parameters are still e(cid:130)ective
for Marmite to detect malware six months later.
5.3 Time and Memory Performance
Following our theoretical analysis in Section 3.4, we evaluate our
system runtime performance to answer key practical questions such
as 1) how long does Marmite take to construct a download graph, 2)
how long does Marmite take to infer maliciousness of all unlabeled
nodes in a download graph and 3) how long does Marmite take to
compute the optimal parameters. Since our typical use case is to
identify malicious (cid:128)les on any given day, for the rest of the section,
we use one day of data with 21,627,935 download events from D1
as our runtime evaluation baseline. All tests are performed in a
server with a 2.67GHz Xeon CPU X5650 and 64GB memory running
Ubuntu Linux 12.04 and Python 2.7.3.
In this setup, Marmite
takes 890.95 seconds to construct the download graph from one
day of data with 15.98GB memory footprint. Once the graph is
constructed, Marmite takes 84.498 seconds to (cid:128)nish the inference
task (see Section 3.2). In other words, Marmite is able to perform
its entire analysis for one day in about 16 minutes. (cid:140)is exempli(cid:128)es
Marmite’s computational advantage as we theoretically proved in
Section 3.4. In terms of how long it takes to tune the parameters
required by Marmite to operate, essentially we need to repeat the
aforementioned inference task 64 times (see Section 5.2) on a three
day subset of the dataset D1. Marmite takes therefore 4.82 hours to
(cid:128)nd the optimal parameter combination. Note that we don’t need
to run this tuning task frequently as we demonstrate that Marmite
is able to retain similar accuracy over time (see Section 6).
5.4 Labeling Performance
We validate the overall performance of Marmite on the labeled
data (i.e., ground truth) over a 7 days subset of the D1 dataset —
note that the remaining 3 days for this dataset were used to tune
the optimal parameters. In order to assess Marmite’s performance
96Table 1: Performance of Marmite on labelled ground truth
using seven days of data collected during January 2016
(AUC=0.96, G-Mean=0.944). (cid:135)e table reports averaged
TPR/FPR results over the seven days.
the two-hour interval, and an AUC of 0.978 (G-mean 0.957) for the
three-hour interval. (cid:140)ese results demonstrate that our approach
can work well on di(cid:130)erent observation windows, and underpins
Marmite’s real-world practicability.
(FPR=0.5%)
TPR
0.690
TPR
(FPR=1%)
0.786
TPR
(FPR=2%)
0.866

**Optimized Text:**

### Identifying Malicious Files Using Marmite

#### Introduction

Files with SHA2 DB000... are identified as malicious (specifically, Zusy and a trojan). We label these files with a probability of 1, indicating they are malware. Another file, 4.exe, with SHA2 CB866... is labeled with 0, indicating it is a known benign file. Marmite uses Equation (6) to recursively update each node's probabilistic label, and the results are shown in Figure 4.

#### Example Analysis

As observed, the file AFFGSDGWIJGWEOG.exe with SHA2 18A2F... is flagged as malicious with a high probabilistic confidence score of 0.969. This is because all its neighbors (in this case, svchos.exe) are malicious. This follows the neighborhood smoothness hypothesis of label propagation (see Section 3.2). The other nodes' probabilistic labels (between 0.6 and 0.7) are partially influenced by the benign file 4.exe with SHA2 CB866... For this example, a node is considered malicious if its probability \( f_i \) is greater than 0.5. In the end, Marmite is able to flag three previously unknown samples as malware. As shown in Figure 4, the Bayesian label propagation algorithm enables Marmite to flag the rest of the files as malicious.

**Figure 4:** An example of how Marmite infers probabilistic node labels. Initially, two files are known to be malware and one is known to be benign. At the end of the process, three additional files are correctly identified as malware.

#### Scalability

Equation (6) can be easily parallelized due to its recursive update nature. Each node \( i \) outputs its current label confidence \( f_i \) to its neighbors during the map phase. During the reduce phase, it updates its labeling confidence using the formula:
\[ f_i = \frac{\sum_{j=1}^N A_{i,j} f_j + \alpha}{\sum_{j=1}^N A_{i,j} + 1} \]
where \( A_{i,j} \) represents the edges incident to node \( i \). In terms of time complexity, the proposed method iterates over each edge in the download graph a constant number of times. Given the maximum number of iterations \( c \), the graph has \( |E| \) edges and \( |V| \) nodes, the overall time complexity is \( O((|E| + |V|) \times c) \). Therefore, Marmite has a linear time complexity.

### Datasets

To validate and test Marmite, we use download activity data from Symantec’s data sharing platform. This data was collected from users who opted into Symantec’s data sharing program to improve detection capabilities. To preserve user anonymity, client identifiers were anonymized, making it impossible to trace the data back to the originating user.

The download activity data provides meta-information about all download activities on user clients. We extract the following information:
- Server-side timestamp of the download event
- Name, SHA2, and size (in bytes) of the downloaded file
- Referrer URL, landing page URL, and IP address of the server
- Full path where the downloaded file was stored on the server
- SHA2 of the parent file (the file that initiated the download activity) and the URL from which it was downloaded

Note that the SHA2 and URL of the parent file are not always present. We also remove parent SHA2s related to popular web browsers and file archivers to prevent unrelated files from being connected in the download graph. Specifically, we remove 710 SHA2s related to Outlook, Internet Explorer, Firefox, Chrome, WinZip, FileZilla, 7-Zip, TeamViewer, and WinRAR.

Symantec employs extensive static and dynamic analysis systems to determine the maliciousness of binaries. We leverage these results to enrich our dataset with metadata about the reputation and prevalence of downloaded files. This allows us to evaluate Marmite’s performance in flagging known malware and benign software. On average, we extracted 20 million download events generated by 1.5 million machines per day. We compiled two separate datasets from this data:
- **D1:** Spans 10 days in January 2016, comprising over 200 million download events. Used to tune Marmite’s parameters and validate our approach.
- **D2:** Comprises 660 million download events collected over the entire month of June 2016. Used to test Marmite and show that it can still perform accurate detections without re-tuning six months after setup.

**Data Limitations:**
The download activity data is collected passively. Download events are recorded only when the associated downloading request is initiated, either by a user clicking a link or through a drive-by download exploit. Downloads preemptively blocked by existing defenses (e.g., URL/IP blacklists) are not observed.

### Validation

#### Ground Truth Collection

Marmite requires labeled ground truth of malware and benign software for two reasons:
1. The approach described in Section 3.2 requires seed files to propagate their reputation across the download graph.
2. Ground truth is needed to check the accuracy of Marmite’s detections.

We used three sources to collect ground truth:
- **VirusTotal:** A free online service that aggregates scanning outputs from different antivirus engines, website scanners, and file and URL characterization tools. We query VirusTotal for each file’s SHA2 to obtain its first seen timestamp, the number of AV products that flagged it as malicious, and the total number of AV products that scanned it. A file is considered malicious if at least one of the top five AV vendors (Symantec, Avast, Microsoft, AVG, Avira) and a minimum of two other AVs detect it as malicious.
- **National Software Reference Library (NSRL):** We used NSRL’s Reference Data Set (RDS) version 2.51 to identify known benign and reputable files. This dataset provides SHA1 to SHA256 hashes for known benign programs.
- **Symantec Data:** Additional ground truth about malicious files from Symantec’s static and dynamic binary analysis platform.

Our ground truth on dataset D1 consists of 833,705 malicious files and 1,896,782 benign files, reflecting the real-world observation that benign files are more prevalent.

#### Optimal Parameter Selection

Marmite requires three parameters to operate:
- **α:** Shape parameter of the Dirichlet distribution
- **\( r_b \):** Benign file sampling ratio
- **\( r_m \):** Malware sampling ratio

Different values of \( \alpha \) affect the inference accuracy, while \( r_b \) and \( r_m \) determine the training data size for benign and malicious files, respectively. We used a grid search approach to find the optimal parameters. We exhaustively searched through multiple combinations of values and evaluated Marmite using each combination. The optimal parameters are those that generate the maximum geometric mean (G-mean):
\[ \text{G-mean} = \sqrt{\text{TPR} \times (1 - \text{FPR})} \]

Our dataset is imbalanced between benign and malicious files, making G-mean the ideal metric to evaluate Marmite’s performance. We set \( \alpha \) between (0, 1], \( r_b \) between [0.4, 0.7], and \( r_m \) between [0.05, 0.2], and built 64 combinations. We ran Marmite on a three-day subset of dataset D1 for each combination, averaging the G-mean score over the three days. We performed stratified 10-fold cross-validation for each combination. Our results show that with \( \alpha = 0.1 \), \( r_b = 0.6 \), and \( r_m = 0.1 \), Marmite outputs the best average G-mean score of 0.953. These values are used for the rest of the paper.

#### Time and Memory Performance

Following our theoretical analysis, we evaluated Marmite’s runtime performance to answer key practical questions:
1. How long does Marmite take to construct a download graph?
2. How long does Marmite take to infer the maliciousness of all unlabeled nodes in a download graph?
3. How long does Marmite take to compute the optimal parameters?

Using one day of data with 21,627,935 download events from D1 as our baseline, Marmite takes 890.95 seconds to construct the download graph with a 15.98GB memory footprint. Once the graph is constructed, Marmite takes 84.498 seconds to finish the inference task. In other words, Marmite can perform its entire analysis for one day in about 16 minutes. To compute the optimal parameters, we repeated the inference task 64 times on a three-day subset of D1, taking 4.82 hours. We do not need to run this tuning task frequently, as Marmite retains similar accuracy over time.

#### Labeling Performance

We validated Marmite’s overall performance on the labeled data (i.e., ground truth) over a 7-day subset of the D1 dataset. The remaining 3 days of this dataset were used to tune the optimal parameters. Table 1 shows the averaged TPR/FPR results over the seven days.

**Table 1:** Performance of Marmite on labeled ground truth using seven days of data collected during January 2016 (AUC=0.96, G-Mean=0.944).

| FPR (%) | TPR |
|---------|-----|
| 0.5     | 0.690 |
| 1       | 0.786 |
| 2       | 0.866 |

These results demonstrate that our approach works well on different observation windows, underpinning Marmite’s real-world practicability.