# 部署泰克顿
Tekton 是我们平台使用的管道系统。Tekton 最初是在 Kubernetes 上构建功能即服务的 Knative 项目的一部分，后来被拆分为自己的项目。Tekton 和您可能已经运行的其他管道技术之间的最大区别是 Tekton 是 Kubernetes 本地的。从它的执行系统、定义和用于自动化的网络钩子，一切都可以在你能找到的任何 Kubernetes 发行版上运行。例如，我们将在 KinD 中运行它，红帽已经转移到 Tekton，作为从 4.1 开始用于 OpenShift 的主要管道技术。
部署 Tekton 的过程非常简单。Tekton 是一系列操作符，它们寻找定义构建管道的自定义资源的创建。部署本身只需要几个`kubectl`命令:
```
$ kubectl apply --filename \  https://storage.googleapis.com/tekton-releases/pipeline/latest/release.yaml
$ kubectl apply --filename \ https://storage.googleapis.com/tekton-releases/triggers/latest/release.yaml
```
第一个命令部署运行 Tekton 管道所需的基础系统。第二个命令部署构建 webhooks 所需的组件，以便在推送代码后立即启动管道。一旦两个命令都完成并且`tekton-pipelines`命名空间中的 Pods 正在运行，您就可以开始构建管道了！我们将以 Python Hello World 网络服务为例。
## 建设你好世界
我们的 Hello World 应用非常简单。这是一个简单的服务，它回应了必须的“你好”和服务运行的主机，所以我们觉得我们的服务在做一些有趣的事情。由于服务是用 Python 编写的，我们不需要“构建”二进制文件，但是我们确实想要构建一个容器。一旦构建了容器，我们希望为我们正在运行的命名空间更新 Git 存储库，并让我们的 GitOps 系统协调更改以重新部署我们的应用。我们构建的步骤如下:
1.  查看我们的最新代码。
2.  基于时间戳创建标签。
3.  建立我们的形象。
4.  推送至我们的注册表。
5.  在`operations`命名空间中修补部署 YAML 文件。
我们将建立我们的管道一次一个对象。第一组任务是创建一个 SSH 密钥，Tekton 将使用它来获取我们的源代码:
1.  创建一个 SSH 密钥对，我们将使用它来检查我们的代码。当提示输入密码时，只需点击*输入*即可跳过添加密码:
    ```
    $ ssh-keygen -f ./gitlab-hello-python
    ```
2.  登录 GitLab，导航到我们创建的`hello-python`项目。点击**设置** | **存储库** | **部署键**，点击**展开**。使用`tekton`作为标题，将您刚刚创建的`github-hello-python.pub`文件的内容粘贴到**键**部分。保持**允许写访问** *未选中*并点击**添加键**。
3.  接下来，创建`python-hello-build`命名空间和以下机密。将`ssh-privatekey`属性替换为我们在*步骤 1* 中创建的`gitlab-hello-python`文件的 Base64 编码内容。注释告诉 Tekton 该在哪个服务器上使用这个密钥。服务器名是 GitLab 命名空间中的`Service`:
    ```
    apiVersion: v1
    data:
      ssh-privatekey: ...
    kind: Secret
    metadata:
      annotations:
        tekton.dev/git-0: gitlab-gitlab-shell.gitlab.svc.cluster.local
      name: git-pull
      namespace: python-hello-build
    type: kubernetes.io/ssh-auth
    ```
4.  创建一个 SSH 密钥对，我们将使用该密钥对将管道推送到`operations`存储库。当提示输入密码时，只需点击*输入*跳过添加密码:
    ```
    $ ssh-keygen -f ./gitlab-hello-python-operations
    ```
5.  登录 GitLab 并导航到我们创建的`hello-python-operations`项目。点击**设置** | **存储库** | **部署键**，点击**展开**。使用`tekton`作为标题，将您刚刚创建的`github-hello-python-operations.pub`文件的内容粘贴到**键**部分。确认**允许写入权限**已勾选*并点击**添加键**。*
**   接下来，创建以下机密。用我们在*步骤 4* 中创建的`gitlab-hello-python-operations`文件的 Base64 编码内容替换`ssh-privatekey`属性。注释告诉 Tekton 该在哪个服务器上使用这个密钥。服务器名是我们在 GitLab 命名空间
    ```
    apiVersion: v1
    data:
      ssh-privatekey: ...
    kind: Secret
    metadata:
      name: git-write
      namespace: python-hello-build
    type: kubernetes.io/ssh-auth
    ```
    的*步骤 6* 中创建的`Service`*   为要运行的任务创建一个服务帐户，就像我们的机密一样:
    ```
    $ kubectl create -f chapter14/tekton-serviceaccount.yaml
    ```
    *   我们需要一个同时包含`git`和`kubectl`的容器。我们将构建`chapter14/docker/PatchRepoDockerfile`并将其推送到我们的内部注册中心。确保将`192-168-2-114`替换为您服务器的 IP 地址的主机名:
    ```
    $ docker build -f ./PatchRepoDockerfile -t \
     docker.apps.192-168-2-114.nip.io/gitcommit/gitcommit .
    $ docker push \ 
     docker.apps.192-168-2-114.nip.io/gitcommit/gitcommit
    ```* 
 *每个`Task`对象都可以进行输入，并产生可以与其他`Task`对象共享的结果。泰克顿可以为跑步者(无论是`TaskRun`还是`PipelineRun`)提供一个可以存储和检索状态的工作空间。写入工作空间允许我们在`Task`对象之间共享数据。
在部署我们的任务和管道之前，让我们逐步完成每个任务所做的工作。第一个任务生成一个映像标记，并获取最近一次提交的 SHA 哈希。全部来源在`chapter14/yaml/tekton-task1.yaml`:
```
- name: create-image-tag
  image: docker.apps.192-168-2-114.nip.io/gitcommit/gitcommit
  script: |-
    #!/usr/bin/env bash
    export IMAGE_TAG=$(date +"%m%d%Y%H%M%S")
    echo -n "$(resources.outputs.result-image.url):$IMAGE_TAG" > /tekton/results/image-url
    echo "'$(cat /tekton/results/image-url)'"
    cd $(resources.inputs.git-resource.path)
    RESULT_SHA="$(git rev-parse HEAD | tr -d '\n')"
    echo "Last commit : $RESULT_SHA"
    echo -n "$RESULT_SHA" > /tekton/results/commit-tag
```
任务中的每一步都是一个容器。在这种情况下，我们使用之前构建的容器，其中包含`kubectl`和`git`。这项任务我们不需要`kubectl`，但是我们需要`git`。第一个代码块根据`result-image`网址和时间戳生成映像名称。我们可以使用最新的提交，但是我喜欢有一个时间戳，这样我就可以快速知道一个容器有多旧。我们将完整的映像网址保存到`/text/results/image-url`，这对应于我们在任务中定义的结果`image-url`。这可以通过我们的管道引用，也可以通过引用`$(tasks.generate-image-tag.results.image-url)`来引用其他任务，其中`generate-image-tag`是我们`Task`的名称，`image-url`是我们结果的名称。
我们的下一个任务，在`chapter14/yaml/tekton-task2.yaml`中，使用谷歌的 Kaniko 项目([https://github.com/GoogleContainerTools/kaniko](https://github.com/GoogleContainerTools/kaniko))从我们应用的源代码中生成一个容器。Kaniko 允许您生成一个容器，而不需要访问 Docker 守护程序。这很好，因为您不需要特权容器来构建您的映像:
```
steps:
- args:
  - --dockerfile=$(params.pathToDockerFile)
  - --destination=$(params.imageURL)
  - --context=$(params.pathToContext)
  - --verbosity=debug
  - --skip-tls-verify
  command:
  - /kaniko/executor
  env:
  - name: DOCKER_CONFIG
    value: /tekton/home/.docker/
  image: gcr.io/kaniko-project/executor:v0.16.0
  name: build-and-push
  resources: {}
```
Kaniko 容器就是所谓的“无发行版”容器。它不是用底层外壳构建的，也没有您可能习惯的许多命令行工具。它只是一个二进制文件。这意味着任何变量操作，例如为映像生成标签，都需要在此步骤之前完成。请注意，正在创建的映像没有引用我们在第一个任务中创建的结果。而是引用了一个名为`imageURL`的参数。虽然我们可以直接引用结果，但这会使测试此任务变得更加困难，因为它现在与第一个任务紧密绑定。通过使用我们的管道设置的参数，我们可以独立测试这个任务。一旦运行，这个任务将生成并推送我们的容器。
我们在`chapter14/yaml/tekton-task-3.yaml`中的最后一个任务是触发 ArgoCD 推出一个新容器:
```
- image: docker.apps.192-168-2-114.nip.io/gitcommit/gitcommit
  name: patch-and-push
  resources: {}
  script: |-
    #!/bin/bash
    export GIT_URL="$(params.gitURL)"
    export GIT_HOST=$(sed 's/.*[@]\(.*\)[:].*/\1/'  /usr/local/gituser/.ssh/known_hosts
    cd $(workspaces.output.path)
    git clone $(params.gitURL) .
    kubectl patch --local -f src/deployments/hello-python.yaml -p '{"spec":{"template":{"spec":{"containers":[{"name":"python-hello","image":"$(params.imageURL)"}]}}}}' -o yaml > /tmp/hello-python.yaml
    cp /tmp/hello-python.yaml src/deployments/hello-python.yaml
    git add src/deployments/hello-python.yaml
    git commit -m 'commit $(params.sourceGitHash)'
    git push
```
第一段代码将 SSH 密钥复制到我们的主目录中，生成`known_hosts`，并将我们的存储库克隆到我们在`Task`中定义的工作空间中。我们不依赖泰克顿从我们的`operations`存储库中提取代码，因为泰克顿认为我们不会推送代码，所以它将源代码从我们的存储库中断开。如果我们尝试运行提交，它将失败。由于该步骤是一个容器，我们不想尝试对其进行写入，因此我们使用`emptyDir`创建一个工作区，就像我们可能运行的`Pod`中的`emptyDir`一样。我们还可以基于持久卷定义工作空间。这有助于加快依赖项下载的速度。
我们正在从`/pushsecret`复制 SSH 密钥，它被定义为任务上的一个卷。我们的容器作为用户`431`运行，但是 SSH 密钥由 Tekton 作为根安装。我们不想仅仅为了从一个`Secret`复制密钥而运行一个特权容器，所以相反，我们把它当作一个普通的`Pod`来挂载。
一旦我们克隆了我们的存储库，我们就用最新的映像修补我们的部署，最后，在我们的应用存储库中使用源提交的散列来提交更改。现在我们可以跟踪一个映像回到生成它的提交！就像我们的第二个任务一样，我们不会直接引用任务的结果来使测试更容易。
我们将这些任务放在一个管道中，具体来说就是`chapter14/yaml/tekton-pipeline.yaml`。这个 YAML 文件有几页长，但关键部分定义了我们的任务并将它们联系在一起。您永远不应该将值硬编码到管道中。看看我们第三个任务的定义:
```
- name: update-operations-git
    taskRef: 
      name: patch-deployment
    params:
      - name: imageURL
        value: $(tasks.generate-image-tag.results.image-url)
      - name: gitURL
        value: $(params.gitPushUrl)
      - name: sourceGitHash
        value: $(tasks.generate-image-tag.results.commit-tag)
    workspaces:
    - name: output