欢迎各位喜欢安全的小伙伴们加入星盟安全 UVEgZ3JvdXA6IDU3MDI5NTQ2MQ==
>
> 缓冲区溢出漏洞是很常见的漏洞，广泛存在于各个软件中，相信在学习pwn的过程中，大多数pwn师傅第一个学会的就是栈溢出的利用了，本文将介绍如何在MIPS32架构中利用栈溢出漏洞
# MIPS汇编的一些小知识
因为不是本文讨论重点,这里仅做简单描述
## 寄存器
1.通用寄存器
    zero -> 值始终为0
    $at -> 保留寄存器
    $v0-$v1 -> 保存表达式或者程序返回结果
    $a0-$v3 -> 函数调用的前四个参数
    $t0-t7 -> 临时寄存器
    $s0-$s7 -> 保存函数调用期间必须保存的原值
    $t8-$t9 -> 临时寄存器,拓展t0-t7
    $k0-$k1 -> 保留,中断处理函数使用
    $gp -> 全局指针
    $sp -> 栈顶指针
    $fp -> 保存栈指针
    $ra -> 保存返回地址
  1. 特殊寄存器 
        PC -> 程序计数器
    HI -> 乘除结果高位寄存器
    LO -> 乘除结果低位寄存器
## 基本指令
  2. LOAD/STORE指令
        lb,lbu,lh,lhu,ll,lw,lwl,lwr,sb,sc,sh,sw,swl,swr,move
其中以l开头为加载,s开头为存储,其中move指令用于寄存器之间的值传递
  3. 算术运算指令
        add,addi,addiu,addiu,sub,subu,clo,clz,slt,slti,sltiu,sltu,mul,mult,multu,madd,msub,msubu,div,divu
3.类比较指令
        slt,slti,sltiu,sltu
  4. SYSCALL
依旧是软中断,用于执行系统调用
# MIPS堆栈原理
在平常的linux
pwn中我们遇到的系统架构多为x86体系，但在路由器的嵌入式系统中，很大一部分都是MIPS指令系统，而这两个系统在很多方面都有差异，这里主介绍我们利用漏洞所需要注意几个方面
  1. MIPS32架构中是没有EBP寄存器的，他在进入函数时是将当前栈指针向下移动n比特到该函数的stack frame存储空间，函数返回时再加上偏移量恢复栈指针
  2. 因为第一点的原因，寄存器出入栈时都需要指定偏移量
  3. 传参过程中，前四个参数$a0-$a3，多余的会保存在调用函数的预留的栈顶空间内
  4. MIPS调用函数时会把函数的返回地址直接存入$RA寄存器
## 函数调用
在MIPS32架构中，函数被分为两种即叶子函数和非叶子函数。所谓叶子函数就是在该函数中不再调用其他函数的函数，反之，有其他函数调用的即是非叶子函数
举个栗子
    void A(int *a,int *b)
    {
        int tmp(0);
        tmp=a;
        a=b;
        b=tmp;
    }
    void B()
    {
        int a(0),b(13);
        A(a,b);
    }
上面的A就是叶子函数，B为非叶子函数，而这两种函数在调用时也有很大区别:
拿上面的B来说好了，B函数在执行到第二行时即调用A函数时，先复制$PC寄存器的值到$RA,然后跳转到A函数，因为A是叶子函数，所以返回B的地址依然在$RA中，但如果是非叶子函数，呢么会将返回B的地址存在堆栈中  
而在函数返回的时候，因为A是叶子函数，因此就直接用"jr $ra"返回B，否则先从堆栈中取出返回值，存到$ra中，后面的步骤就和叶子函数相同了
# 栈溢出
我们知道函数被分为了叶子函数和非叶子函数，他们的函数调用过程也不尽相同，因此在分析溢出时也要分为叶子函数和非叶子函数了分析
## 非叶子函数
从函数调用过程中我们知道在调用非叶子函数时，会把返回地址存入堆栈，因此我们拿一个简单的例子来说
    #include
    void backdoor()
    {
        system("/bin/sh");
    }
    void vlun()
    {
        char dst[20]={0};
        read(0,&dst,1000);
    }
    void main()
    {
        vlun();
        exit();
    }
我们编译一下:
    mips-linux-gcc no_leaf.c -static -o no_leaf
这里我们反编译一下程序
### main函数
    **************************************************************
                                 *                          FUNCTION                          *
                                 **************************************************************
                                 undefined main()
                 undefined         v0:1           
                 undefined4        Stack[-0x4]:4  local_4                                 XREF[1]:     00400438(W)  
                 undefined4        Stack[-0x8]:4  local_8                                 XREF[1]:     0040043c(W)  
                                 main                                            XREF[3]:     Entry Point(*), 
                                                                                              __start:00400188(*), 0041f200(*)  
            00400434 e0 ff bd 27     addiu      sp,sp,-0x20
            00400438 1c 00 bf af     sw         ra,local_4(sp)
            0040043c 18 00 be af     sw         s8,local_8(sp)
            00400440 25 f0 a0 03     or         s8,sp,zero
            00400444 f1 00 10 0c     jal        vlun                                             undefined vlun()
            00400448 00 00 00 00     _nop
            0040044c 00 00 00 00     nop
            00400450 25 e8 c0 03     or         sp,s8,zero
            00400454 1c 00 bf 8f     lw         ra,0x1c(sp)
            00400458 18 00 be 8f     lw         s8,0x18(sp)
            0040045c 20 00 bd 27     addiu      sp,sp,0x20
            00400460 08 00 e0 03     jr         ra
### vuln函数
    **************************************************************
                                 *                          FUNCTION                          *
                                 **************************************************************
                                 undefined vlun()
                 undefined         v0:1           
                 undefined4        Stack[-0x4]:4  local_4                                 XREF[1]:     004003c8(W)  
                 undefined4        Stack[-0x8]:4  local_8                                 XREF[1]:     004003cc(W)  
                 undefined4        Stack[-0x28]:4 local_28                                XREF[1]:     004003dc(W)  
                                 vlun                                            XREF[2]:     Entry Point(*), main:00400444(c)  
            004003c4 c8 ff bd 27     addiu      sp,sp,-0x38
            004003c8 34 00 bf af     sw         ra,local_4(sp)
            004003cc 30 00 be af     sw         s8,local_8(sp)
            004003d0 25 f0 a0 03     or         s8,sp,zero
            004003d4 42 00 1c 3c     lui        gp,0x42
            004003d8 e0 71 9c 27     addiu      gp=>_gp,gp,0x71e0
            004003dc 10 00 bc af     sw         gp=>_gp,local_28(sp)
            004003e0 18 00 c0 af     sw         zero,0x18(s8)
            004003e4 1c 00 c0 af     sw         zero,0x1c(s8)
            004003e8 20 00 c0 af     sw         zero,0x20(s8)
            004003ec 24 00 c0 af     sw         zero,0x24(s8)
            004003f0 28 00 c0 af     sw         zero,0x28(s8)
            004003f4 e8 03 06 24     li         a2,0x3e8
            004003f8 18 00 c2 27     addiu      v0,s8,0x18
            004003fc 25 28 40 00     or         a1,v0,zero
            00400400 25 20 00 00     or         a0,zero,zero
            00400404 34 80 82 8f     lw         v0,-0x7fcc(gp)=>->read                           = 004004ac
            00400408 25 c8 40 00     or         t9,v0,zero
            0040040c 27 00 11 04     bal        read                                             ssize_t read(int __fd, void * __
            00400410 00 00 00 00     _nop
            00400414 10 00 dc 8f     lw         gp,0x10(s8)
            00400418 00 00 00 00     nop
            0040041c 25 e8 c0 03     or         sp,s8,zero
            00400420 34 00 bf 8f     lw         ra,0x34(sp)
            00400424 30 00 be 8f     lw         s8,0x30(sp)
            00400428 38 00 bd 27     addiu      sp,sp,0x38
            0040042c 08 00 e0 03     jr         ra
            00400430 00 00 00 00     _nop
可以看到因为是非叶子函数,因此我们计算完偏移后可以直接使用ret2text的办法来完成利用  
这里简单提一下gdb调试mips架构的方法,我这里安装了pwndbg插件,并且需要安装gdb-multiarch  
调试方法如下:
  1. qemu调起程序 
        qemu-mipsel -g 9981 -L mipsel-linux-gnu ./no_leaf
  2. gdb-multiarc attach调试 
        set architecture mips
    target remote localhost:9981
然后就可以进行基本调试了
    LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA
    ─────────────────────────────────────────────────[ REGISTERS ]──────────────────────────────────────────────────
     V0   0x0
     V1   0x0
     A0   0x0
     A1   0x0
     A2   0x0
     A3   0x0
     T0   0x0
     T1   0x0
     T2   0x0
     T3   0x0
     T4   0x0
     T5   0x0
     T6   0x0
     T7   0x0
     T8   0x0
     T9   0x0
     S0   0x0
     S1   0x0
     S2   0x0
     S3   0x0
     S4   0x0
     S5   0x0
     S6   0x0
     S7   0x0
     S8   0x0
     FP   0x0
     SP   0x76ffefb0 ◂— 0x1
     PC   0x400170 ◂— move   $zero, $ra /* '%' */
    ───────────────────────────────────────────────────[ DISASM ]───────────────────────────────────────────────────