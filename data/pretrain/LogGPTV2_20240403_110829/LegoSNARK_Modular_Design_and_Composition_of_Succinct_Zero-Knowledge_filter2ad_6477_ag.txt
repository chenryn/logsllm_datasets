1, c
1, g
∗ ← CPprd.Prove(ck, (c
(cid:48)
1), π
(cid:48)
1, o
(cid:48)
2, g(s)), (o
∗
1, o
(cid:48)
2, ρµ))
Figure 3: Our sum-check protocol over committed result and polynomial with 3 factors (p = 2); in
black are the steps identical to [ZGK+17b].
26
Efficiency. In CPsc, the veriﬁer needs time O(µ) plus the time to compute g0(s). The prover’s
costs include the running time in the sum-check protocol and the creation of the CPpoly proofs. If
the gi are multilinear, CPpoly.Prove time is O(2µ). Also, from [Tha13], if the polynomials gi allow
for evaluation in O(µ) time or are MLE of vectors, the prover’s cost in sum-check can be reduced
to O(2µ). More detailed, our veriﬁer runs linearly on the number of variables of the polynomial and
the prover time is linear on the number of monomials of the factors of the target polynomial. The
degree-d polynomial g(S) can have up to m monomials (in particular, m ≤ 2µ). Note that in the
i−th iteration, the prover evaluates the target polynomial 2µ−i times. This means 2µ times in one
whole execution of the scheme. For each variable of the polynomial, the prover sends one CPeq proof
and commitments to each nonzero coeﬃcient of hi(X), at most (d + 1) of them. Finally, he sends
commitments to the evaluations of the two factor polynomials, two CPpoly proofs and one CPprd
proof. The crs in this case is as long as the one for CPpoly, with δ = 1 and then (δ + 1)µ ≥ m.
Theorem 5.1. Assume PolyCom is an extractable linearly homomorphic commitment, CPpoly and
CPprd are zkSNARKs for relations Rpoly and Rprd respectively, and Construction 2 in [ZGK+17b]
is a ZK interactive argument for sum-check. Then there is a ZK interactive argument for relation
Rsc. Furthermore, by applying the Fiat-Shamir heuristic we get a zkSNARK in the random oracle
model, that we call CPsc.
5.3 A CP-SNARK for Hadamard Products
In this section we propose a CP-SNARK for PolyCom for the relation Rhad over (Fm)3 such that:
Rhad(u0, u1, u2) = 1 ⇐⇒ ∀i ∈ [m] : u0,i = u1,i · u2,i
Let m = 2µ and let ˜uj : Fµ → F be the MLE of uj. Clearly, the relation holds iﬀ for all b ∈ {0, 1}µ
we have ˜u0(b) = ˜u1(b) · ˜u2(b). If the relation holds, observe that the polynomial ˜u1(X) · ˜u2(X) is
an extension of the vector u0, but not a multilinear one. From Lemma 5.1 this equality holds:
˜u0(X) =
(cid:88)
b∈{0,1}µ
(cid:101)eq(X, b) · ˜u1(b) · ˜u2(b)
Without considering zero-knowledge, the main idea of our protocol is that, to check the above
equality, the veriﬁer starts by picking a random point r ←$ Fµ, and then the prover uses CPsc to
show that t = ˜u0(r) =(cid:80)
b∈{0,1}µ g(b), where g(S) = (cid:101)eq(r, S) · ˜u1(S) · ˜u2(S). Notice indeed that g
can be written as the product of three polynomials g(S) :=(cid:81)2
g1(S) = ˜u1(S), g2(S) = ˜u2(S) and g0(S) := (cid:101)eq(r, S). Finally, the prover also needs to convince
0 gi(S), of which the ﬁrst one is public:
the veriﬁer that t = ˜u0(r), which is done using a CP-SNARK CPpoly for proving correctness of
polynomial evaluations. Therefore we build a CP-SNARK CPhad for Rhad and PolyCom by using
CP-SNARKs CPpoly, CPsc for PolyCom as building blocks. Furthermore, we describe the scheme as
a non-interactive one by letting r ← H((cj)j∈[:3]) using the random oracle model for H. The full
scheme is given below.
observing that the factors of g(S) satisfy the good eﬃciency conditions for CPsc, i.e., (cid:101)eq(r, s) can
Efficiency. Computing π0 takes time O(m), and the same holds for πsc. The latter follows by
be computed in O(µ) time and ˜u1, ˜u2 are MLE of vectors of length m = 2µ. For similar reasons,
the veriﬁer’s time is O(µ). More detailed, our CPhad that proves the result of Hadamard products
u0 = u1 ◦ u2 with m = 2µ elements each. The prover runs linear in the number of monomials of
27
CPhad.KeyGen(ck)→ (ek, vk)
(eks, vks)← CPsc.KeyGen(ck)
(ekp, vkp)← CPpoly.KeyGen(ck) π0 ← CPpoly.Prove(ekp, r, (c0, ct), (˜u0, t), (o0, ot))
ek := (ck, eks, ekp, H)
vk := (cvk, vks, vkp, H)
(cid:1)→ π := (ct, π0, πsc)
CPhad.Prove(cid:0)ek, (cj)j∈[:3], (uj)j∈[:3], (oj)j∈[:3]
r ← H((cj)j∈[:3]) ; t ← ˜u0(r) ; (ct, ot) ← ComVal(ck, t)
πsc ← CPsc.Prove(eks,(cid:101)eq(r, S), (ct, c1, c2), (t, ot, ˜u1, o1, ˜u2, o2))
CPhad.VerProof(cid:0)vk, (cj)j∈[:3], π(cid:1) → b ∈ {0, 1}
b ← b ∧ CPsc.VerProof(vks,(cid:101)eq(r, S), (ct, c1, c2), πsc)
r ← H((cj)j∈[:3]) ; b ← CPpoly.VerProof(vkp, r, c0, ct, π0)
Figure 4: CP-SNARK CPhad for relation Rhad
˜u0(X), which is at most m, and the veriﬁer time is linear in its number of variables µ. The prover
sends one value commitment, one CPpoly proof and one CPsc. Note the polynomial used inside sum-
check is at most degree d = 3 in each variable. The crs includes the group elements output by
CPpoly.KeyGen with δ = 1, and the description of the hash function H : (G1, G1)3 → Fµ used as a
random oracle to achieve noninteractivity.
We state the following result; its proof is in Appendix F.2.
Theorem 5.2. In the random oracle model, assuming that PolyCom is an extractable trapdoor com-
mitment, CPpoly, CPsc are zero-knowledge CP-SNARKs for PolyCom and relations Rpoly and Rsc
respectively, then the scheme CPhad described above is a zero-knowledge CP-SNARK for PolyCom
and relation Rhad.
5.4 A CP-SNARK for Self Permutation
In this section we propose a CP-SNARK for PolyCom for the relation Rsfprm
Deﬁnition 5.2 (Self permutation of a vector). Let D be some domain (e.g., a ﬁnite ﬁeld F),
j=0 nj. Given a permutation
let n0, . . . , n(cid:96) be positive integers such that Dj := Dnj and let m =(cid:80)(cid:96)
deﬁned below.
φ
φ : [m] → [m], we deﬁne a relation Rsfprm
(cid:0)x, (uj)j∈[(cid:96)]
φ
over D0 × ··· × D(cid:96) = Dm such that:
(cid:1) = 1 ⇐⇒ ∀i ∈ [m] : yi = yφ(i), where y := (x, (uj)j∈[(cid:96)])
Rsfprm
φ
Our scheme uses a probabilistic test to prove a permutation of vectors due to [Gro09, BCG+17].
i=1 yi with respect to a commitment to
For this we need of a CP-SNARK for proving that t =(cid:81)m
Deﬁnition 5.3 (Internal product). Let n1, . . . , n(cid:96) be positive integers and let m =(cid:80)(cid:96)
point t and vector y. We call such a relation internal product Ripd. A formal deﬁnition follows:
j=1 nj. We
deﬁne the relation Ripd over F × Fn1 ··· × Fn(cid:96) such that:
Ripd(cid:0)u0, y := (uj)j∈[(cid:96)]
(cid:1) = 1 ⇐⇒ u0
(cid:96)(cid:89)
nj(cid:89)
j=1
i=1
?=
y(cid:48)
j,i
We give a formal description of CPipd in Figure 19 and its computation complexity in Appendix G.
28
In what follows we present the main ideas to build a CP-SNARK for Rsfprm from one for Ripd.
Next, we discuss how a CP-SNARK for internal products can be instantiated.
Recall that the goal is to prove that, for a permutation φ : [m] → [m] a committed vector
y satisﬁes yi = yφ(i),∀i ∈ [m]. Consider the following vectors in Fm, 1, v = (1, . . . , m), and
φ = (φ(1), . . . , φ(m)), and assume that the prover committed to y. Let the veriﬁer choose two
random values r, s ←$ F and deﬁne the vectors y(cid:48) := y + r · v − s · 1 and y(cid:48)(cid:48) := y + r · φ − s · 1.
In our scheme the idea is to let the prover show that(cid:81)
i = z =(cid:81)
(z, y(cid:48)(cid:48)). However, if some entries of y +r· are not in φ (cid:54)= y +r·v,(cid:81)
If y is a permutation of itself according to φ, then (y + r · φ) is a permutation of (y + r · v)
according to φ; however, if y is not a self-permutation according to φ then with overwhelming
probability over the choice of r some of the entries of y + r · φ will not be in the vector y + r · v.
i using CPipd on (z, y(cid:48)) and
i(yi +r·φ(i)−s)
holds with negligible probability over the choice of s by the Schwartz-Zippel lemma, thus a prover
can be succesful only by cheating with CPipd.
i(yi +r·i−s) =(cid:81)
i y(cid:48)(cid:48)
i y(cid:48)
We consider an instantiation of CPipd based on Thaler’s protocol for trees of multiplications
[Tha13]. Ripd can be expressed with an arithmetic circuit that is a tree of multiplications over
m = 2µ inputs. Thaler showed that for this specially regular circuit the CMT protocol can be
adapted so that the prover and veriﬁer run in time O(m) and O(µ2), respectively. To build a CP-
SNARK for Ripd, we thus modify the zk-vSQL protocol [ZGK+17b] so as to work over Thaler’s
protocol instead of CMT. The changes are quite minimal and mainly regard the equation that links
the adjacent layers of the tree. We show this protocol in Appendix G.
One detail to be noted here is that such CPipd works with binary tree circuits, meaning that their
input should be a power of two length, so we tweak our deﬁnition of the self-permutation relation
accordingly. We must work on (cid:96) + 1 vectors such that, each has length nj = 2µj (this is immediate
j=0 nj = m which may
since we commit to MLEs of vectors) but their concatenation has length(cid:80)(cid:96)
not be a power-of-two.
To solve this issue, we execute CPipd on each block and then aggregate the (cid:96)+1 committed results
using a simple zero-knowledge argument for proving a product relation over three commitments,
i.e., CPprd. This results in about (cid:96) + 1 calls to CPipd and CPprd. Although this makes proofs grow
with (cid:96), we observe that in all our applications (cid:96) is some small constant, e.g., 8− 10 in our arithmetic
circuits encoding.
m =(cid:80)(cid:96)
Efficiency. From the eﬃciency observations about CPipd given above, we get that CPsfprm.Prove
and CPsfprm.VerProof run in time O(m) and O(log2 m) respectively. More in depth, our CPsfprm,
built from CPipd, is used for proving that a vector y ∈ Fm is a self-permutation. This scheme
works for vectors whose components y := (x, (uj)j∈[(cid:96)]) have power-of-two length nj = 2µj such that
j=0 nj, where (cid:96) is typically some small constant. For each of its ((cid:96)+1) components, the prover
runs 2 calls to CPipd and iteratively builds 2 proofs-of-product and a ﬁnal call to CPeq. This means
the prover runs in time O(m), the veriﬁer runs in polylogarithmic time in m. The prover sends (4(cid:96)+5)
commitments, 1 opening, 2((cid:96) + 1) short CPipd proofs, 2(cid:96) CPprd proofs and 1 proof-of-equality. Note
that in each iteration, the length of the current vector is some ni < m. This means that performing
i=0 ni) = O(m). Conversely, the length of such ((cid:96)+1) CPipd
proofs is notably larger than the hypothetical length of one single CPipd proof over y ∈ Fm, except
that our m is not necessarily a power of two as the tree of multiplications requires. Here, the length
j +15µj) ﬁeld
elements. For brevity, we can express this kind of calculations asymptotically as O(log2 m). Note
((cid:96)+1) calls to CPipd costs the prover O((cid:80)(cid:96)
of these (2(cid:96)+2) CPipd proofs is(cid:80)(cid:96)
j +25µj)+2(cid:96)+2 group elements and(cid:80)(cid:96)
j=0(11µ2
j=0(µ2
29
CPsfprm.KeyGen(ck) → (ek := (ck, ekp), vk := (cvk, vkp)) :
(ekp, vkp) ← CPipd.KeyGen(ck)
) → (ekφ, vkφ) :
φ
CPsfprm.Derive((ek, vk), Rsfprm
for j = 0 . . . (cid:96) : {(c1,j, o1,j) ← ComPoly
∗
ekφ := (ek,{c1,j, o1,j, cv,j, ov,j, cφ,j, oφ,j}(cid:96)
CPsfprm.Prove∗(ekφ, x, (cj)j∈[(cid:96)], (uj)j∈[(cid:96)], (oj)j∈[(cid:96)]) → π :
(r, s) ← H((cφ,j)j∈[0,(cid:96)], x, (cj)j∈[(cid:96)]) and let ρ = (1, r,−s) ; (c0, o0) ← ComPoly(ck, ˜x)
for j = 0 . . . (cid:96) :
(ck, ˜1j); (cv,j, ov,j) ← ComPoly
j=0, φ) ; vkφ := (vk,{c1,j, cv,j, cφ,j}(cid:96)
j=0)
∗
(cid:48)
(c
j, o
(cid:48)(cid:48)
j , o
(c
(cz(cid:48)
j
j) ← HomEval(ck, ρ, (cj, cv,j, c1,j), (oj, ov,j, o1,j)) ; y
j := yj + r · vj − s · 1j
(cid:48)
(cid:48)
j := yj + r · φj − s · 1j
j ) ← HomEval(ck, ρ, (cj, cφ,j, c1,j), (oj, oφ,j, o1,j)) ; y
(cid:48)(cid:48)
(cid:48)(cid:48)
(cid:48)
(cid:48)
j,i)i∈[nj ],oz(cid:48)
, oz(cid:48)
j,i)i∈[nj ],z
,(c
(cid:48)(cid:48)
j,i)i∈[nj ],z
,(c
j ← CPipd.Prove(cid:0)ekp,cz(cid:48)
j ← CPipd.Prove(cid:0)ekp,cz(cid:48)(cid:48)
(cid:48)
j,(y
(cid:48)(cid:48)
j ,(y
(cid:48)(cid:48)
j,i)i∈[nj ],oz(cid:48)(cid:48)
, oz(cid:48)(cid:48)
(cid:48)(cid:48)
j
j
j
j
(cid:48)
) ← ComVal(ck, z
(cid:48)
j) ; π
) ← ComVal(ck, z
(cid:48)(cid:48)
j ) ; π
(cid:48)(cid:48)
(cid:48)(cid:48)
0 := z
0
(cid:48)
0 ; w
(cid:48)
0 := z
; cw(cid:48)