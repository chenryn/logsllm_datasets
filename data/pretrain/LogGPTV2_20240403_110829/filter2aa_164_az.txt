play. Any microcontroller worth its salt is all about reliably performing a single purpose.
 The Arduino team created a piece of (surprise!) open source software called Arduino IDE
(http://is.gd/UXSYgL) that you can use to program the Arduino. The software is free and is available
for Windows, OS X, and Linux.
 Specifically, Arduino IDE is a Java application and is based on the Processing programming
language. Processing (http://is.gd/c6fUpT) is a C-type, object-oriented programming language that
was created for those in the visual design community to teach the fundamentals of software
development.
 The tricky piece with installing the Arduino IDE on the Raspberry Pi is the Java Runtime
Environment (JRE) requirement. Remember what I said earlier in the book about Java’s heaviness
and the Pi’s tendency to choke on Java code? Yeah, that.
 We’re going to rely on a splendid installation recipe that was developed by Kevin Osborn of the Bald
Wisdom blog (http://is.gd/7RYaFm). Oh, Kevin is also on the AlaMode development team
(http://is.gd/UvXxMF).
Task: Install and Configure Arduino IDE on the Raspberry Pi
Perform the following actions on your Pi from a shell prompt. This procedure also
assumes that you are using the Raspbian “Wheezy” Linux distribution and not Adafruit’s
Occidentalis or another custom distro.
In this chapter, I use USB and a powered hub to connect the Arduino Uno and my
Raspberry Pi Model B board. A schematic diagram of my setup is shown in Figure 19.4.
FIGURE 19.4 My Arduino-Raspberry Pi physical topology
1. First, make sure that your Pi’s firmware and system software are up-to-date. We
originally covered this subject in Chapter 4, “Installing and Configuring an Operating
System.”
2. Install the Arduino IDE; this step is simplicity itself:
Click here to view code image
sudo apt-get install -y arduino
3. Had Kevin not created a shell script for us, you would have had a dozen or more tedious
configuration steps to undertake to force the Raspberry Pi to recognize the Arduino as a
serial device (recall that the Uno includes an ATmel USB-to-serial chip; the Raspberry
Pi has no such onboard convenience on its end).
If you want to understand all of the steps involved anyway, simply open Kevin’s script
in a text editor and study away!
Click here to view code image
wget https://github.com/wyolum/AlaMode/blob/master/bundles/AlaMode-setup.tar.
gz?raw=true -O AlaMode-setup.tar.gz
tar -xvzf AlaMode-setup.tar.gz
cd AlaMode-setup
4. Note the reference to AlaMode. Kevin wrote this script with a dual-purpose in mind;
namely, to configure the Pi to communicate both with the official Arduino Uno as well as
the third-party AlaMode shield. I get to the AlaMode later; for now, run the setup script:
sudo ./setup
5. Once setup completes, you can reboot the Pi, or you can simply run the following
command to initialize the system:
sudo udevadm trigger
6. To start the Arduino IDE, you need to be in a graphical environment, so make sure you
fire up LXDE.
7. You will find an Arduino IDE shortcut in the Programming folder in the LXDE programs
launcher, or you can run the following simple command from LXTerminal:
arduino
After a few moments, you should see the Arduino IDE interface as shown in Figure
19.5.
FIGURE 19.5 The Arduino IDE user interface
As you can see in this figure, I annotated the Arduino IDE user interface. Let me take a
moment to teach you the major controls:
1: Menu system. Here you can find all the Arduino IDE commands nested in categories.
2: Verify. Here you can validate the syntax of your sketch.
3: Upload. Here you can transfer the current sketch to the Arduino’s flash memory.
4: New, Open, and Save, respectively. These buttons represent typical file management
commands.
5: Sketch area. This is where you compose your Arduino source code.
6: Status area. This is where you receive feedback from the Arduino IDE with regard to
code validation, compilation, and transfer.
7: Device information. This verifies that the Uno is linked, and reveals the serial port to
which the Uno is connected.
Note: What Programming Language Does the Arduino IDE Use?
It’s actually rather confusing to determine exactly what programming language you’re
using when you write sketches using the Arduino IDE. According to the Arduino website,
the Arduino IDE employs its own open source programming language called, reasonably
enough, the Arduino programming language.
Syntactically and functionally, the Arduino programming language is a simplified
version of C/C++ and actually uses the avr-gcc C compiler. While we are on the subject,
you might want to check out Simon Monk’s on-the-money book Programming Arduino:
Getting Started with Sketches (http://is.gd/tdnYTw) if you’re looking for guided, end-to-
end instruction on using the Arduino programming language.
Before you load up and run your first sample sketch, let’s take a moment to ensure that Arduino IDE is
properly configured. First, point your mouse to the menu bar and click Tools, Board and make sure
that IDE is set to Arduino Uno.
 Second, click Tools, Serial Port and ensure that IDE is set to /dev/ttyACM0. Incidentally, ACM
stands for abstract control model and refers to the ability to transmit old school serial data over the
newer-school USB bus.
Task: Running the “Blink” Sample Sketch
The Arduino IDE includes a library of starter sketches. In the same way that “Hello
world” is the first program many of us write when we learn a new language, the Blink
sample sketch is by far the most popular sketch to try initially with the Arduino.
Before undertaking this task, ensure that your Raspberry Pi and Arduino are both
powered on and connected.
1. In Arduino IDE, click File, Examples, 1. Basics, Blink. This loads the sketch into the
IDE (see Figure 19.6).
FIGURE 19.6 Testing out the Blink test sketch. Note that I’ve added an extra LED (you’ll
learn how to do that, too).
2. Click the Upload button or click File, Upload Using Programmer to send the sketch to
your Uno. The status bar reads Compiling sketch, Uploading, and then Done uploading
when the transfer is complete.
Look at the surface-mounted LED marked L on the Uno board. Do you see it blinking once per
second?
 As shown here, you can put some more light on the subject by plugging a standalone LED into digital
output pins 13 and ground. Before you do this, however, make sure you insert the longer leg (positive,
or anode) into pin 13, and insert the LED’s shorter leg (negative, or cathode) into the GND pin.
 Electrical current always flows from the anode to the cathode. The anode leg is made longer than the
shorter simply as an easy way for us to determine which LED leg is which.
 Because the surface-mount LED is also wired to pin 13, you should see both LEDs flash in unison.
 You can learn a lot, exert control over the Arduino, as well as have some fun by analyzing the Blink
sketch code line-by-line. Here’s the full code from the Blink test file; we’ll then analyze each major
statement:
Click here to view code image
/*
  Blink
  Turns on an LED on for one second, then off for one second, repeatedly.
  This example code is in the public domain.
 */
// Pin 13 has an LED connected on most Arduino boards.
// give it a name:
int led = 13;
// the setup routine runs once when you press reset:
void setup() {
  // initialize the digital pin as an output.
  pinMode(led, OUTPUT);
}
// the loop routine runs over and over again forever:
void loop() {
  digitalWrite(led, HIGH);   // turn the LED on (HIGH is the voltage level)
  delay(1000);               // wait for a second
  digitalWrite(led, LOW);    // turn the LED off by making the voltage LOW
  delay(1000);               // wait for a second
}
First of all, notice that the sketch includes two functions, setup() and loop(). The setup() procedure
initializes a particular digital pin as a signal output.
 How do we know we want pin 13? It’s right here:
int led = 13;
This statement creates a variable named led that can accept only integer (whole number) values.
Furthermore, this line initializes the value of the led variable to 13. The 13 denotes pin #13 on the
Arduino. You can find pin 13 by examining the digital pins on top of the Arduino Uno PCB. (Hint: pin
13 is located immediately to the right of the GND interface.)
pinMode(led, OUTPUT);
The pinMode() function accepts two arguments; first you pass in the variable, which is pin 13, and
OUTPUT marks the pin for outgoing signal/current.
 The loop() procedure does exactly what you think it does: it performs whatever actions you specify in
the code block an infinite number of times. As previously stated, an Arduino runs its currently loaded
sketch forever, unless and until you send it a new sketch to run. Singleness of purpose, remember?
digitalWrite(led, HIGH);
The digitalWrite() function puts the target LED in an on state (HIGH) or an off state (LOW). This is
binary data we’re talking about.
delay(1000);
The delay function accepts an integer value in milliseconds. A value of 1000 means that the LED will
stay on for 1 second.
 Thus, the blink sketch does nothing more than cycles LED 13 on and off every second...forever. As an
experiment, change the delay value from 1000 to 100 and reupload the sketch to your Uno. You
should see the LED blink much faster.
Note: How to Clear Out Your Arduino
If you want to stop the Blink sketch, or if you want to clear any of the Arduino’s current
actions, start a new, blank sketch file that contains the following lines:
void setup(){};
void loop(){};
Verify the sketch and then upload it to your Uno. I actually saved the sketch on my Pi
and named it Clear for easy reuse.
Fading an LED
 In this example with the Arduino Uno you test the use of analog output and PWM to gradually fade an
LED.
 Following is an inventory of what you need to have on hand to complete this experiment:
 Arduino Uno
 Breadboard
 220 ohm resistor
 LED
 You can study Figure 19.7 to learn the wiring schematic for this test.
FIGURE 19.7 Wiring diagram for our Arduino PWM LED test
With respect to that wiring diagram, please take into account the following notes:
 The (+) power rail is for incoming power.
 The (-) power rail is for outgoing power (ground).
 The Uno board in my schematic is from an earlier PCB release. As long as you choose a digital
output pin labeled “PWM” or “~” you are good to go.
Task: Running the Fade Sketch
You now know the basics of uploading and running Arduino sketches, so this second
example procedure should feel more natural for you to undertake.
1. When your wiring is complete, fire up Arduino IDE and click File, Examples, 1. Basics,
Fade.
2. Go ahead and upload the sketch. While you do so, keep an eye on the TX and RX
surface-mounted LEDs on the Uno PCB. You’ll notice them flash a bit as the Ardunio
sends and receives data, respectively.
3. The end result of this test is you see your LED move gradually from full intensity to off
and then back again, giving the illusion of a fading effect.
4. To learn what’s going on under the hood, you can again examine the Fade sketch source
code.
int led = 9;
int brightness = 0;
int fadeAmount = 5;
This code defines three variables. The led variable denotes PWM pin number 9. The
initial bulb brightness (PWM value) is set to 0, which equals off. The fadeAmount variable
controls how granular or choppy the fade effect is, as you see in a moment.
The setup() procedure simply specifies pin #9 as output, as you saw in the previous
exercise. The loop() procedure is much more interesting here, though.
analogWrite(led, brightness);
The analogWrite() function sets the brightness of pin 9 to its current value, which we
already know is 0.
Click here to view code image
brightness = brightness + fadeAmount;
Here you increment the brightness value by the fadeAmount value. You can tweak the
script by adjusting either of these variables.
Click here to view code image
if (brightness == 0 || brightness == 255)
    {fadeAmount = -fadeAmount ; }
The previous expression, when stated in human terms, says, “If the LED brightness
reaches either the maximum brightness of 255 or minimum brightness of 0, then reverse the
direction of fadeAmount.”
In other words, while the LED increases its brightness from 1 to 254, the fadeAmount
value is positive.
When the brightness value hits 255, however, the fadeAmount maintains its value, but
reverses its direction, thus becoming negative. This is what allows the LED to “fade” from
full brightness down to off. Get it?
Using the AlaMode
Now that you have gotten to know an official Arduino board to a good degree of depth, let’s close out
this chapter by looking briefly at one of the most popular Arduino clones, at least from the
perspective of a Raspberry Pi enthusiast.
 The AlaMode (http://is.gd/mm0Kfd) is an Arduino clone/shield that fits directly on top of the
Raspberry Pi’s GPIO header pins. I show you an annotated close-up of the AlaMode in Figure 19.8.
FIGURE 19.8 The AlaMode perfectly fits the Pi’s GPIO header pins.
1: GPIO
2: Reset button
3. “Blink” LED
4: Digital I/O pins
5: Micro SD card slot
6: Power source jumper
7: Micro USB power input
8: ATmega microcontroller
9: Power pins
10: Analog input pins (unpopulated)
 The AlaMode includes an impressive array of features besides its ease of connectivity to the
Raspberry Pi:
 DS3234 Real Time Clock: Neither the Raspberry Pi nor the Arduino Uno has a battery-backed
RTC. This is an excellent feature because you may want to run tasks that require precise timing
and the Pi does not include a real-time clock “out of the box.”
 Micro-SD Card Slot: You can perform data logging without having to access a network.
Again, this is a tremendous convenience for certain projects.
 Power Flexibility: You can power the AlaMode directly from the Raspberry Pi through the
GPIO, or you can plug in a wall wart or connect a traditionally DC battery.
 The AlaMode’s microprocessor is the same ATmega328P that you have on the Uno. AlaMode
connects to the Pi as an I2C slave device and performs 5V-3.3V buffering. The AlaMode also
includes a general-purpose blink LED on pin 13, just like the Arduino.
 You can purchase the AlaMode through several channels; here are a couple:
 Maker Shed: http://is.gd/6eMMnC
 Seeed Studio: http://is.gd/fFFDnQ
 Be sure to snag a copy of the user manual, too: http://is.gd/2bniUh.
Task: Getting the AlaMode Up and Running
You would have been surprised, had you not read this book, that the AlaMode ships
without I/O headers installed. This means you need to solder them into the AlaMode
yourself to gain the PCB’s full functionality.
Unfortunately, soldering deserves a chapter unto itself. As a consolation, here are some
top-notch resources that I picked for you that will teach you everything you need to know
(actually, soldering the headers to the AlaMode is a 15-minute procedure; it truly is no big
deal):
 Make Video Podcast, Soldering Tutorial: http://is.gd/MALror
 Curious Inventor, How to Solder Correctly, and Why (video): http://is.gd/XIcaVx
 Electronix Express, Better Soldering: http://is.gd/9FYfXL
 Soldering is Easy Comic Book: http://is.gd/aNcuNQWith regard to the software
configuration, as long as you’ve performed the steps given in the earlier procedure “Task:
Install and Configure Arduino IDE on the Raspberry Pi,” you’ve completed most of the
work.
Let’s sweep up the shavings together now:
1. Power off your Raspberry Pi.
2. If you want to power the RTC, insert a CR1632 battery into the associated clip on the
AlaMode.
3. Gently push the AlaMode onto the Raspberry Pi’s GPIO pins. Make sure to line up the Pi
GPIO with the AlaMode in the correct orientation; you can see the Pi-AlaMode sandwich
(as well as some unsoldered headers) in Figure 19.9.
FIGURE 19.9 The Raspberry Pi, the AlaMode, and an unsoldered I/O header
4. Now about power. You can configure the AlaMode to receive its power directly from
the Pi’s GPIO header (assuming the Pi receives at least 1A of current on its own) or from
a wall wart power supply.
In this tutorial, let’s power the AlaMode directly from the Pi. To do this, you must first
set the 5V_Link jumper to ON as shown in Figure 19.10.
FIGURE 19.10 The AlaMode’s 5V_Link jumper is set by default to receive power through
the Raspberry Pi GPIO.
The good news is that the AlaMode ships with the jumper set this way by default, so
this is a verification step rather than a configuration step. By contrast, if you want to use an
external power supply, you must move the jumper so that it covers the other pin, setting the
switch to OFF.
Other than that, you can load up Arduino IDE on the Raspberry Pi and send sketches to
the AlaMode in the very same way you did with the Arduino Uno.
5. In Arduino IDE, click Tools, Board and select AlaMode. Finally, click Tools, Serial
Port and ensure that port /dev/ttyS0 is selected. Happy experimenting!
Chapter 20. Raspberry Pi and the Gertboard
Fans of the Gertboard claim that the device is the ultimate expansion board for the Raspberry Pi.
Having spent quite a bit of time with the Gertboard, I can tell you that there is indeed substance to that
claim.
 Gert van Loo (pronounced van LOW) is a Broadcom engineer who also happens to be one of the
principal designers of the Raspberry Pi. As I’m sure you can correctly guess, Gert also invented the
Gertboard.
 Formally defined, the Gertboard is an expansion board, also called a daughterboard, that connects to