# pgSphere 1.1.5

## Development Team
pgSphere development team

## Overview
pgSphere provides spherical data types, functions, and operators for PostgreSQL. The project is hosted at [pgfoundry.org](http://pgfoundry.org/projects/pgsphere/) and [GitHub](https://github.com/akorotkov/pgsphere). This document describes the installation and usage of this module.

## Table of Contents
1. What is pgSphere?
2. Installation
   2.1. Download
   2.2. Installation
   2.3. Creating a Database with pgSphere
3. Data Types
   3.1. Overview
   3.2. Point
   3.3. Euler Transformation
   3.4. Circle
   3.5. Line
   3.6. Ellipses
   3.7. Path
   3.8. Polygon
   3.9. Coordinates Range
4. Constructors
   4.1. Point
   4.2. Euler Transformation
   4.3. Circle
   4.4. Line
   4.5. Ellipse
   4.6. Polygon
   4.7. Path
   4.8. Coordinates Range
5. Operators
   5.1. Casting
   5.2. Equality
   5.3. Contain and Overlap
   5.4. Crossing of Lines
   5.5. Distance
   5.6. Length and Circumference
   5.7. Center
   5.8. Change Direction
   5.9. Turn the Path of a Line
   5.10. Transformation
6. Functions
   6.1. Area Function
   6.2. spoint Functions
      6.2.1. Longitude and Latitude
      6.2.2. Cartesian Coordinates
   6.3. strans Functions
      6.3.1. Converting to ZXZ
      6.3.2. Angles and Axes
   6.4. scircle Functions
   6.5. sellipse Functions
   6.6. sline Functions
      6.6.1. Begin and End
      6.6.2. Create a Meridian
   6.7. spath Functions
      6.7.1. Count of Points
      6.7.2. Positions at a Path
   6.8. spoly Functions
      6.8.1. Count of Edges
   6.9. sbox Functions
7. Create an Index
   7.1. Spherical Index
8. Usage Examples
   8.1. General
   8.2. Geographical
   8.3. Astronomical
      8.3.1. Coordinate Transformation
9. FAQ
10. Appendix
   10.1. Changes from Version 1.0 to 1.1
   10.2. Changes from Version 1.1 to 1.1.5

## 1. What is pgSphere?
pgSphere is an extra module for PostgreSQL that adds spherical data types. It provides:
- Input and output of data
- Containment, overlap, and other operators
- Various input and conversion functions and operators
- Circumference and area of an object
- Spherical transformation
- Indexing of spherical data types
- Several input and output formats

This module enables fast search and analysis of objects with spherical attributes, such as geographical and astronomical data, using an SQL interface. For example, you can manage data of geographical objects around the world and astronomical data like star catalogs conveniently. The aim of pgSphere is to provide uniform access to spherical data, leveraging PostgreSQL's support for various software interfaces.

## 2. Installation
### 2.1. Download
pgSphere is not part of the PostgreSQL software. You can download it from the [pgSphere GitHub repository](https://github.com/akorotkov/pgsphere).

### 2.2. Installation
You will need PostgreSQL 9.1 or above. We assume that you have PostgreSQL already compiled and installed. Depending on your system configuration, you may need to log in as the system superuser.

There are two ways to compile pgSphere:
1. **Using PostgreSQL's Source Tree:**
   - Copy the sources into the `contrib` directory of PostgreSQL’s source tree (e.g., `POSTGRESQL_SRC/src/contrib`).
   - Unpack the pgSphere sources if they are not yet installed:
     ```sh
     shell> tar -xzf path/to/pg_sphere_xxx.tgz
     ```
   - Change into the `pg_sphere` directory and run:
     ```sh
     shell> make
     shell> make install
     ```

2. **Using PGXS (PostgreSQL Extension Building System):**
   - Unpack the pgSphere sources:
     ```sh
     shell> tar -xzf path_to_pg_sphere_xxx.tgz
     ```
   - Change into the `pg_sphere` directory and run:
     ```sh
     shell> make USE_PGXS=1 PG_CONFIG=/path/to/pg_config
     shell> make USE_PGXS=1 PG_CONFIG=/path/to/pg_config install
     ```
   - To check the installation, change back to the `pg_sphere` source directory and run:
     ```sh
     shell> make installcheck
     ```
   - Note: The check status may vary with different PostgreSQL versions. Currently, the check should run without errors with PostgreSQL 8.4. Otherwise, check the `regression.diff` file.

### 2.3. Creating a Database with pgSphere
Assume you have already created a database named `datab`. If your PostgreSQL superuser is `postgres`, type:
```sh
shell> psql -U postgres -c 'CREATE EXTENSION pg_sphere;' datab
```
Depending on your system, you may need to provide additional options like `port` or `hostname`. Refer to the PostgreSQL documentation for more details.

To get the version of the installed pgSphere software, use:
```sql
SELECT pg_sphere_version();
```

## 3. Data Types
### 3.1. Overview
pgSphere provides spherical data types for storing with PostgreSQL. There is also a data type for transformations.

| SQL Type Name | Spherical Type |
|---------------|----------------|
| spoint        | Point (position) |
| strans        | Euler Transformation |
| scircle       | Circle |
| sline         | Line |
| sellipse      | Ellipse |
| spoly         | Polygon |
| spath         | Path |
| sbox          | Coordinates Range |

### 3.2. Point
A spherical point is an object without expanse but with a position. Use cases include:
- Sites on Earth
- Star positions on the sky sphere
- Spherical positions on planets

A spherical point (or position) is given by two values: longitude and latitude. Longitude is a floating-point value between 0 and 2π. Latitude is a floating-point value between -π/2 and π/2. You can specify a spherical position in degrees (DEG) or with a triple value of degrees, minutes, and seconds (DMS). Degrees and minutes are integer values, while seconds are represented using a floating-point value. Another method is specifying longitude as a triple value of hours, minutes, and seconds (HMS), but this cannot be used with latitude values.

**Examples:**
1. A position specified using longitude and latitude in radians:
   ```sql
   SELECT spoint '(0.1, -0.2)';
   ```
2. A position specified using longitude and latitude in degrees:
   ```sql
   SELECT spoint '(10.1d, -90d)';
   ```
3. A position specified using longitude and latitude (DMS):
   ```sql
   SELECT spoint '(10d 12m 11.3s, -13d 14m)';
   ```
4. A position specified using longitude in HMS and latitude in RAD:
   ```sql
   SELECT spoint '(23h 44m 10s, -1.4321)';
   ```

Value pairs are always enclosed within parentheses. Spaces are optional.

### 3.3. Euler Transformation
An Euler transformation involves three counterclockwise rotations around the x-axis, y-axis, and z-axis. Use cases include:
- Spherical object transformations
- Spherical coordinate transformations

The input syntax for an Euler transformation is:
```sql
angle1, angle2, angle3 [, axes]
```
where `axes` is an optional 3-letter code with letters X, Y, or Z (default is ZXZ). `angleN` is any valid angle with the input format RAD, DEG, or DMS.

To perform a transformation, use a transformation operator (see Section 5.10).

**Examples:**
1. Create a transformation object to rotate a spherical object counterclockwise, first 20° around the x-axis, second -270° around the z-axis, and last 70.5° around the y-axis:
   ```sql
   SELECT strans '20d, -270d, 70.5d, XZY';
   ```
2. Create a transformation object to rotate a spherical object counterclockwise, first 2°20' around the z-axis, second 10° around the x-axis, and last 0° around the z-axis:
   ```sql
   SELECT strans '2d 20m, 10d, 0';
   ```

### 3.4. Circle
A spherical circle is an area around a point where all points inside the circle have a distance less than or equal to the radius of the circle. Use cases include:
- Sites on Earth having a maximum distance from another site
- Round cluster or nebula on the sky sphere
- A position with an undirected position error

A circle is specified using a spherical point (spoint) and a radius. Valid radius units are RAD, DEG, and DMS. The circle radius must be less than or equal to 90° and cannot be less than zero.

**Example:**
- A circle around the North Pole with a radius of 5°:
  ```sql
  SELECT scircle '<(0d, 90d), 5d>';
  ```

### 3.5. Line
A spherical line is part of a great circle (meridian) that has a beginning and an end, and hence, a direction. Use cases include:
- Direct connection of two points
- Meteors on the sky sphere

To allow lines with a length larger than 180°, the input syntax is somewhat complex. A general located line with a length `length` is defined as a line starting at position (0d,0d) and ending at position (length,0d) transformed with an Euler transformation `euler`. The input syntax is:
```sql
( euler ), length
```

**Notes:**
- For a simpler line input, use casting operators (Section 5.1) or constructor functions (Section 4).
- If the length is larger than 360°, the line length is truncated to 360°.
- The transformation `euler` will always be converted to an Euler transformation using axes Z, X, and Z.

**Example:**
- A line starting at position (200d, +20d) and ending at position (200d, -10d):
  ```sql
  SELECT sline '(-90d, -20d, 200d, XYZ), 30d';
  ```

### 3.6. Ellipses
Within pgSphere, ellipses are defined as:
- If the center of any spherical ellipse is the North Pole, the perpendicular projection into the x-y-plane gives an ellipse as in two-dimensional space.

Use cases include:
- Clusters or nebula on the sky sphere where the 'height' is lower than the 'width'
- To describe a position error

An ellipse always has:
- A major radius `rad_1`
- A minor radius `rad_2`
- A center `center`
- A position angle `pos` (inclination)

The input syntax is:
```sql
(center, rad_1, rad_2, pos)
```

**Notes:**
- The radii `rad_1` and `rad_2` must be less than 90°.
- If `rad_1` is less than `rad_2`, the values will be swapped.
- The position angle `pos` is defined within pgSphere as a counterclockwise rotation around the ellipse center and is zero if the ellipse is "parallel to the equator."

**Example:**
- An ellipse with a center at 20° longitude and 0° latitude. The minor radius is part of the equator. The major radius is 10°, and the minor radius is 5°:
  ```sql
  SELECT sellipse '<(20d, 0d), 10d, 5d, 0d>';
  ```

### 3.7. Path
A spherical path is a concatenation of spherical lines. Use cases include:
- Rivers on Earth
- Trajectories of planets or comets on the sky plane

Paths within pgSphere are simplified lists of positions. The input syntax is:
```sql
{pos1, pos2[, pos3[, pos4[,...]]]}
```

**Notes:**
- The distance between two subsequent positions must be less than 180° and greater than zero.
- At least two positions are required.

**Example:**
- A path going from (10d, 0d) to (80d, 30d) via (45d, 15d):
  ```sql
  SELECT spath '{(10d, 0d), (45d, 15d), (80d, 30d)}';
  ```

### 3.8. Polygon
A spherical polygon is a closed spherical path where line segments cannot be crossed. One main use case is areas on the Earth and sky sphere. Polygons within pgSphere have the same input syntax as paths:
```sql
{pos1, pos2, pos3[, pos4[,... ]]}
```

**Notes:**
- A spherical polygon has the same restrictions as a spherical path (see Section 3.7), except that a polygon needs at least three positions.
- The line segments cannot be crossed.
- The maximum dimension of a polygon must be less than 180°.

**Example:**
- A polygon going from (270d, -10d) via (270d, 30d) to (290d, 10d) back to (270d, -10d):
  ```sql
  SELECT spoly '{(270d, -10d), (270d, 30d), (290d, 10d)}';
  ```

### 3.9. Coordinates Range
A spherical box is a coordinates range. You can select objects within a longitude range and latitude range. The box is represented using two spherical points: the southwest (`pos_sw`) and the northeast (`pos_ne`) edge of the box. The input syntax is:
```sql
(pos_sw, pos_ne)
```
or
```sql
pos_sw, pos_ne
```

**Notes:**
- If the latitude of the southwest edge is larger than the latitude of the northeast edge, pgSphere swaps the edges.
- If the longitude of the southwest edge is equal to the longitude of the northeast edge, pgSphere assumes a full latitude range, except when the latitudes are equal, too.

**Examples:**
- A full latitude range between +20° and +23°:
  ```sql
  SELECT sbox '((0d, 20d), (0d, 23d))';
  ```
- A simple coordinates range between -10° and +10° in latitude and 350° and 10° in longitude:
  ```sql
  SELECT sbox '((350d, -10d), (10d, 10d))';
  ```

## 4. Constructors
Constructors within pgSphere are functions needed to create spherical data types from other data types. For actual use, there is no difference from usual PostgreSQL functions. pgSphere constructor functions are named by the returned data type. Constructor functions expecting one parameter only are implemented as casting operators and are not mentioned here.

### 4.1. Point
- **Function:** `spoint`
- **Description:** Creates a spherical point from a string representation.
- **Syntax:** `spoint(text)`
- **Example:**
  ```sql
  SELECT spoint('(10d, 20d)');
  ```

### 4.2. Euler Transformation
- **Function:** `strans`
- **Description:** Creates an Euler transformation from a string representation.
- **Syntax:** `strans(text)`
- **Example:**
  ```sql
  SELECT strans('20d, -270d, 70.5d, XZY');
  ```

### 4.3. Circle
- **Function:** `scircle`
- **Description:** Creates a spherical circle from a string representation.
- **Syntax:** `scircle(text)`
- **Example:**
  ```sql
  SELECT scircle('<(0d, 90d), 5d>');
  ```

### 4.4. Line
- **Function:** `sline`
- **Description:** Creates a spherical line from a string representation.
- **Syntax:** `sline(text)`
- **Example:**
  ```sql
  SELECT sline('(-90d, -20d, 200d, XYZ), 30d');
  ```

### 4.5. Ellipse
- **Function:** `sellipse`
- **Description:** Creates a spherical ellipse from a string representation.
- **Syntax:** `sellipse(text)`
- **Example:**
  ```sql
  SELECT sellipse('<(20d, 0d), 10d, 5d, 0d>');
  ```

### 4.6. Polygon
- **Function:** `spoly`
- **Description:** Creates a spherical polygon from a string representation.
- **Syntax:** `spoly(text)`
- **Example:**
  ```sql
  SELECT spoly('{(270d, -10d), (270d, 30d), (290d, 10d)}');
  ```

### 4.7. Path
- **Function:** `spath`
- **Description:** Creates a spherical path from a string representation.
- **Syntax:** `spath(text)`
- **Example:**
  ```sql
  SELECT spath('{(10d, 0d), (45d, 15d), (80d, 30d)}');
  ```

### 4.8. Coordinates Range
- **Function:** `sbox`
- **Description:** Creates a spherical box from a string representation.
- **Syntax:** `sbox(text)`
- **Example:**
  ```sql
  SELECT sbox('((350d, -10d), (10d, 10d))');
  ```

## 5. Operators
### 5.1. Casting
- **Description:** Converts one data type to another.
- **Syntax:** `::`
- **Example:**
  ```sql
  SELECT '(10d, 20d)'::spoint;
  ```

### 5.2. Equality
- **Description:** Checks if two spherical objects are equal.
- **Syntax:** `=`
- **Example:**
  ```sql
  SELECT spoint '(10d, 20d)' = spoint '(10d, 20d)';
  ```

### 5.3. Contain and Overlap
- **Description:** Checks if one spherical object contains or overlaps another.
- **Syntax:** `@`, `&&`
- **Example:**
  ```sql
  SELECT scircle '<(0d, 90d), 5d>' @ spoint '(0d, 90d)';
  SELECT scircle '<(0d, 90d), 5d>' && scircle '<(0d, 90d), 10d>';
  ```

### 5.4. Crossing of Lines
- **Description:** Checks if two spherical lines cross each other.
- **Syntax:** `#`
- **Example:**
  ```sql
  SELECT sline '((0d, 0d), (90d, 0d))' # sline '((0d, 90d), (90d, 90d))';
  ```

### 5.5. Distance
- **Description:** Calculates the distance between two spherical objects.
- **Syntax:** `<->`
- **Example:**
  ```sql
  SELECT spoint '(10d, 20d)' <-> spoint '(30d, 40d)';
  ```

### 5.6. Length and Circumference
- **Description:** Calculates the length or circumference of a spherical object.
- **Syntax:** `length()`, `circumference()`
- **Example:**
  ```sql
  SELECT length(sline '((0d, 0d), (90d, 0d))');
  SELECT circumference(scircle '<(0d, 90d), 5d>');
  ```

### 5.7. Center
- **Description:** Returns the center of a spherical object.
- **Syntax:** `center()`
- **Example:**
  ```sql
  SELECT center(scircle '<(0d, 90d), 5d>');
  ```

### 5.8. Change Direction
- **Description:** Changes the direction of a spherical object.
- **Syntax:** `reverse()`
- **Example:**
  ```sql
  SELECT reverse(sline '((0d, 0d), (90d, 0d))');
  ```

### 5.9. Turn the Path of a Line
- **Description:** Turns the path of a line.
- **Syntax:** `turn()`
- **Example:**
  ```sql
  SELECT turn(sline '((0d, 0d), (90d, 0d))');
  ```

### 5.10. Transformation
- **Description:** Applies an Euler transformation to a spherical object.
- **Syntax:** `*`
- **Example:**
  ```sql
  SELECT spoint '(10d, 20d)' * strans '20d, -270d, 70.5d, XZY';
  ```

## 6. Functions
### 6.1. Area Function
- **Description:** Calculates the area of a spherical object.
- **Syntax:** `area()`
- **Example:**
  ```sql
  SELECT area(scircle '<(0d, 90d), 5d>');
  ```

### 6.2. spoint Functions
#### 6.2.1. Longitude and Latitude
- **Description:** Extracts the longitude and latitude of a spherical point.
- **Syntax:** `longitude()`, `latitude()`
- **Example:**
  ```sql
  SELECT longitude(spoint '(10d, 20d)');
  SELECT latitude(spoint '(10d, 20d)');
  ```

#### 6.2.2. Cartesian Coordinates
- **Description:** Converts a spherical point to Cartesian coordinates.
- **Syntax:** `cartesian()`
- **Example:**
  ```sql
  SELECT cartesian(spoint '(10d, 20d)');
  ```

### 6.3. strans Functions
#### 6.3.1. Converting to ZXZ
- **Description:** Converts an Euler transformation to the ZXZ format.
- **Syntax:** `to_zxz()`
- **Example:**
  ```sql
  SELECT to_zxz(strans '20d, -270d, 70.5d, XZY');
  ```

#### 6.3.2. Angles and Axes
- **Description:** Extracts the angles and axes of an Euler transformation.
- **Syntax:** `angles()`, `axes()`
- **Example:**
  ```sql
  SELECT angles(strans '20d, -270d, 70.5d, XZY');
  SELECT axes(strans '20d, -270d, 70.5d, XZY');
  ```

### 6.4. scircle Functions
- **Description:** Provides various functions for working with spherical circles.
- **Syntax:** `radius()`, `center()`
- **Example:**
  ```sql
  SELECT radius(scircle '<(0d, 90d), 5d>');
  SELECT center(scircle '<(0d, 90d), 5d>');
  ```

### 6.5. sellipse Functions
- **Description:** Provides various functions for working with spherical ellipses.
- **Syntax:** `major_radius()`, `minor_radius()`, `center()`, `position_angle()`
- **Example:**
  ```sql
  SELECT major_radius(sellipse '<(20d, 0d), 10d, 5d, 0d>');
  SELECT minor_radius(sellipse '<(20d, 0d), 10d, 5d, 0d>');
  SELECT center(sellipse '<(20d, 0d), 10d, 5d, 0d>');
  SELECT position_angle(sellipse '<(20d, 0d), 10d, 5d, 0d>');
  ```

### 6.6. sline Functions
#### 6.6.1. Begin and End
- **Description:** Extracts the beginning and end points of a spherical line.
- **Syntax:** `begin()`, `end()`
- **Example:**
  ```sql
  SELECT begin(sline '((0d, 0d), (90d, 0d))');
  SELECT end(sline '((0d, 0d), (90d, 0d))');
  ```

#### 6.6.2. Create a Meridian
- **Description:** Creates a meridian (great circle) through a given point.
- **Syntax:** `create_meridian()`
- **Example:**
  ```sql
  SELECT create_meridian(spoint '(10d, 20d)');
  ```

### 6.7. spath Functions
#### 6.7.1. Count of Points
- **Description:** Counts the number of points in a spherical path.
- **Syntax:** `count_points()`
- **Example:**
  ```sql
  SELECT count_points(spath '{(10d, 0d), (45d, 15d), (80d, 30d)}');
  ```

#### 6.7.2. Positions at a Path
- **Description:** Lists the positions in a spherical path.
- **Syntax:** `positions()`
- **Example:**
  ```sql
  SELECT positions(spath '{(10d, 0d), (45d, 15d), (80d, 30d)}');
  ```

### 6.8. spoly Functions
#### 6.8.1. Count of Edges
- **Description:** Counts the number of edges in a spherical polygon.
- **Syntax:** `count_edges()`
- **Example:**
  ```sql
  SELECT count_edges(spoly '{(270d, -10d), (270d, 30d), (290d, 10d)}');
  ```

### 6.9. sbox Functions
- **Description:** Provides various functions for working with spherical boxes.
- **Syntax:** `southwest()`, `northeast()`
- **Example:**
  ```sql
  SELECT southwest(sbox '((350d, -10d), (10d, 10d))');
  SELECT northeast(sbox '((350d, -10d), (10d, 10d))');
  ```

## 7. Create an Index
### 7.1. Spherical Index
- **Description:** Creates a spherical index on a table column.
- **Syntax:**
  ```sql
  CREATE INDEX idx_name ON table_name USING GIST (column_name);
  ```
- **Example:**
  ```sql
  CREATE INDEX idx_spoints ON my_table USING GIST (spoint_column);
  ```

## 8. Usage Examples
### 8.1. General
- **Example:**
  ```sql
  -- Create a spherical point
  SELECT spoint '(10d, 20d)';

  -- Create a spherical circle
  SELECT scircle '<(0d, 90d), 5d>';

  -- Create a spherical line
  SELECT sline '((0d, 0d), (90d, 0d))';

  -- Create a spherical ellipse
  SELECT sellipse '<(20d, 0d), 10d, 5d, 0d>';

  -- Create a spherical polygon
  SELECT spoly '{(270d, -10d), (270d, 30d), (290d, 10d)}';

  -- Create a spherical path
  SELECT spath '{(10d, 0d), (45d, 15d), (80d, 30d)}';

  -- Create a spherical box
  SELECT sbox '((350d, -10d), (10d, 10d))';
  ```

### 8.2. Geographical
- **Example:**
  ```sql
  -- Find all points within a specific circle
  SELECT * FROM my_table WHERE spoint_column <@ scircle '<(0d, 90d), 5d>';

  -- Find all points within a specific box
  SELECT * FROM my_table WHERE spoint_column <@ sbox '((350d, -10d), (10d, 10d))';
  ```

### 8.3. Astronomical
- **Example:**
  ```sql
  -- Transform a point using an Euler transformation
  SELECT spoint '(10d, 20d)' * strans '20d, -270d, 70.5d, XZY';

  -- Calculate the distance between two stars
  SELECT spoint '(10d, 20d)' <-> spoint '(30d, 40d)';
  ```

#### 8.3.1. Coordinate Transformation
- **Example:**
  ```sql
  -- Convert a spherical point to Cartesian coordinates
  SELECT cartesian(spoint '(10d, 20d)');
  ```

## 9. FAQ
- **Q: How do I install pgSphere?**
  - **A:** Follow the installation steps in Section 2.2.
- **Q: Can I use pgSphere with older versions of PostgreSQL?**
  - **A:** pgSphere requires PostgreSQL 9.1 or above.
- **Q: How do I create a spherical index?**
  - **A:** Use the `CREATE INDEX` statement with the `USING GIST` clause, as shown in Section 7.1.

## 10. Appendix
### 10.1. Changes from Version 1.0 to 1.1
- Added support for new data types and functions.
- Improved performance and stability.

### 10.2. Changes from Version 1.1 to 1.1.5
- Fixed several bugs and improved documentation.
- Enhanced the functionality of existing data types and operators.