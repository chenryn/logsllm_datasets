over  time  would  match  this  pre-terminal  probability.    We 
call this approach pre-terminal sampled order. 
    In  this  paper,  we  will  only  consider  results  using  pre-
terminal  probability  order  and  terminal  probability  order. 
We remark that the terminal order uses the joint probability 
determined  by  treating  the  probabilities  of  pre-terminal 
structures and of the dictionary words that are substituted in 
as independent. 
    It  should  be  noted  that  we  use  probabilistic  context-free 
grammars  for  modeling  convenience  only;  since  our 
production  rules  derived  from  the  training  set  do  not  have 
any  recursion,  they  could  also  be  viewed  as  regular 
grammars.  In  fact,  this  allows  us  to  develop  an  efficient 
algorithm  to  find  an  indexing  function  for  the  pre-terminal 
structures, as discussed in the next section.  The grammars 
that  we  currently  automatically  generate  are  unambiguous 
context-free grammars. 
3.3  EFFICIENTLY GENERATING A “NEXT” FUNCTION 
    In  this  section  we  consider  the  problem  of  generating 
guesses  in  order  of  decreasing  (or  equal)  probability  and 
describe  the  algorithm.  For  pre-terminal  probability  order, 
this means in decreasing order of the pre-terminal structures. 
For terminal probability order, this is the probability of the 
terminal structures. However, the “next” function algorithm 
is  the  same  in  both  cases  except  that  for  the  terminal 
probability  order,  the  initial  assignment  of  probabilities  to 
the starting pre-terminal structures includes the probabilities 
of the alpha variables.  In Section 3.4, we outline the proof 
of correctness of the algorithm. 
    First  note  that  it  is  trivial  to  generate  the  most  probable 
guess.  One simply replaces all the base structures with their 
highest  probability  terminals  and  then  selects  the  pre-
terminal structure with the highest probability. Note that for 
terminal  probability  order,  the  alpha  strings  in  the  base 
structure are also assigned a probability. For example, using 
the  data  in  Table  3.2.1,  the  highest  probable  pre-terminal 
structure would be 4L3$$4. Since there are only 1589 base 
structures  generated  by  our  largest  training  set,  this  is  not 
difficult. However, a more structured approach is needed to 
generate guesses of a rank other than the first.  
    To optimize the total running time of the algorithm, it is 
useful if it can operate in an online mode, i.e. it calculates 
the  current  best  pre-terminal  structure and outputs it to the 
underlying  (also  distributable)  password  cracker.  On  the 
other  hand,  also  for  performance  reasons,  at  any  particular 
stage the algorithm should only calculate those pre-terminal 
structures that might be the current most probable structure 
remaining,  taking  into  consideration  the  last  output  value. 
Referring  to  Fig.  3.3.1,  we  would  like  to  generate  the  pre-
terminal structures L35! and L34% (nodes 7 and 6) only after 
L34! (node 2) has been generated. 
Fig. 3.3.1.   Generating the “Next” Pre-terminal Structures for the 
Base Structures in Table 3.2.1 (partial tree shown). 
    One approach that is simple to describe and implement is 
to  output  all  possible  pre-terminal  structures,  evaluate  the 
probability  of  each,  and  then  sort  the  result.  Unfortunately 
this  pre-computation  step  is  not  parallelizable  with  the 
password cracking step that follows (i.e., it is not an online 
algorithm).  
    Originally  when  we  were  still  trying  to  see  if  using 
probabilistic  grammars  was  worth  further  investigation,  we 
395
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:16:33 UTC from IEEE Xplore.  Restrictions apply. 
created a proof of concept program that took this approach. 
Unfortunately in addition to the problems described above, 
it also resulted in over a hundred gigabytes of data that we 
had to generate and then sort before we could make our first 
password guess. As you can imagine, this does not lend itself 
to a real world application. 
    Our  actual  solution  adopts  as  its  main  data  structure  a 
standard  priority  queue,  where  the  top  entry  contains  the 
most  probable  pre-terminal  structure.  In  the  following,  we 
denote by the index of a variable in a base structure to mean 
the   position in which the variable appears. For example, in 
the base structure L3D1S1 the variable L3 would be assigned 
an index of 0, D1 an index of 1, and S1 an index of 2. Next, 
we order all terminal values, (such as the numbers 4, and 5 
for D1) in priority order for their respective class. That way 
we can quickly find the next most probable terminal value.  
    The structure of entries in the priority queue can be seen 
in Table 3.3.2. They contain a base structure, a pre-terminal 
structure,  and  a  pivot  value.    This  pivot  value  is  checked 
when  a  pre-terminal  structure  is  popped  from  the  priority 
queue.  The  pivot  value  helps  determine  which  new  pre-
terminal  structures  may  be  inserted  into  the  priority  queue 
next.    The  goal  of  using  pivot  values  is  to  ensure  that  all 
possible  pre-terminal  structures  corresponding  to  a  base 
structure are put into the priority queue without duplication. 
    More  precisely,  the  pivot  value  indicates  that  the  pre-
terminal structures to be next created from the original base 
structure  are  to  be  obtained  by  replacing  variables  with  an 
index value equal to or greater than the popped pivot value. 
Let’s look at an example based on the data in Table 3.2.1. 
Initially all the highest probability pre-terminals from every 
base structure will be inserted into the priority queue with a 
pivot value of 0. See Figure 3.3.1 and Table 3.3.2. 
TABLE 3.3.2  
Initial Priority Queue 
0 
0 
Pre-Terminal 
4L3$$4 
L34! 
Probability  Pivot Value 
0.188 
0.097 
Base Struct 
D1L3S2D1 
L3D1S1 
    Next, the top entry in the priority queue will be popped. 
The  pivot  value  will  be  consulted,  and  child  pre-terminal 
structures  will  be  inserted  as  part  of  new  entries  for  the 
priority  queue.  These  pre-terminal  structures  are  generated 
by  substituting  variables  in  the  popped  base  structure  by 
values  with  next-highest  probability.  Note  that  only  one 
variable  is  replaced  to  create  each  new  candidate  entry. 
Moreover,  this  replacement  is  performed  (as  described 
above) for each variable with index equal to or greater than 
the  popped  pivot  value.  The  new  pivot  value  assigned  to 
each  inserted  pre-terminal  structure  is  equal  to  the  index 
value of the variable that was substituted. See Fig. 3.3.1 and 
Table  3.3.3  to  see  the  result  after  popping  the  top  queue 
entry.  Also see Appendix 1. 
TABLE 3.3.3  
Priority queue after the first entry was popped 
0 
2 
0 
3 
Pre-Terminal 
L34! 
4L3**4 
5L3$$4 
4L3$$5 
Probability  Pivot Value 
0.097 
0.081 
0.063 
0.063 
Base Struct 
L3D1S1 
D1L3S2D1 
D1L3S2D1 
D1L3S2D1 
    In  this  instance,  since  the  popped  pivot  value  was  0,  all 
index variables could be substituted. L3 was not incremented 
since there were no values to fill in for it, as the alpha strings 
are handled by the password cracker in a later stage. Both of 
the D1 structures and S2 were replaced, resulting in three new 
pre-terminal  structures  being  inserted  into  the  queue  with 
pivot  values  of  0,  2  and  3.  Notice  that  when  the  priority 
queue  entry  corresponding  to  the  2rd  row  of  Table  3.3.3  is 
popped, it will not cause a new entry to be inserted into the 
priority  queue  for  its  first  D1  or  its  S2  structure.  This  is 
because 4L3**4’s pivot value is equal to 2, which means that 
it cannot replace the first D1 structure with an index value of 
0.  As  for  the  S2  structure,  since  ‘**’  is  the  least  probable 
terminal  variable,  there is no next-highest replacement rule 
and this entry will simply be consumed.  
    Observe  that  the  algorithm  is  guaranteed  to  terminate 
because it processes existing entries by removing them and 
replacing  them  with new ones that either (a) have a higher 
value for the pivot or (b) replace the base structure variable 
in the position indicated by the pivot by a terminal that has 
lower probability than the current terminal in that position. It 
can  moreover  be  easily  ascertained  that  the  pre-terminal 
structures in the popped entries are assigned non-increasing 
probabilities  and  therefore  the  algorithm  can  output  these 
structures  for  immediate  use  as  a  mangling  rule  for  the 
underlying distributed password cracker. 
    This  process  continues  until  no  new  pre-terminal 
structures remain in the priority queue, or the password has 
been  cracked.    Note  that  we  do  not  have  to  store  pre-
terminal  structures  once  they  are  popped  from  the  queue, 
which has the effect of limiting the size of the data structures 
used by the algorithm.  In section 4.5, we discuss the space 
complexity  of  our  algorithm  in  detail  in  the  context of our 
experimental results. 
    The  running  time  for  the  current  implementation  of  our 
next  algorithm 
is  extremely 
competitive with existing password cracking techniques.  On 
one  of  our  lab  computers,  (MaxOSX  2.2GHz  Intel  Core  2 
Duo)  it  took  on  average  33  seconds  to  generate  37781538 
unhashed  guesses  using  our  method.    Comparatively,  the 
for  generating  guesses 
396
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:16:33 UTC from IEEE Xplore.  Restrictions apply. 
popular  password  cracking  tool  John  the  Ripper  [11] 
operating  in  wordlist  mode  took  28  seconds  to  make  the 
same  number  of  guesses.    If  we  expand  the  number  of 
guesses  to  300  million,  our  technique  took  on  average  3 
minutes and 23 seconds to complete, while John the Ripper 
operating in incremental (brute-force) mode took 2 minutes 
and 55 seconds.  Note that the vast majority of time (often 
weeks)  taken  in  cracking  passwords  is  spent  in  generating 
the hashes from those guesses and not in the generation of 
the actual guesses themselves. Because of this, even an extra 
minute or two spent generating guesses would be minor, and 
thus the running times of these two methods are essentially 
identical. 
3.4  PROOF OF CORRECTNESS OF THE NEXT FUNCTION 
    Property  P1:  pre-terminal  structures  are  output  in  non-
increasing probability order. 
Proof that P1 holds: 
1.  Remember that the priority queue is initialized with one 
entry per base structure, and that the entry contains the 
pre-terminal  structure  with  maximum  probability  for 
that  base  structure.  These  entries  can  be  easily 
constructed  by  simply  replacing  the  highest  likelihood 
terminal  values  for  all  the  non-alpha  variables  in  each 
base structure. 
2.  Remember that the processing of an entry in the priority 
queue results in its removal and output, and (possibly) 
in  the  insertion  of  new  entries.  For  convenience  of 
description, we call these new entries “the children” and 
the  removed  entry  “the  parent”.  Recall  that  children 
never  contain  pre-terminal  structures  of  strictly  higher 
probability than the pre-terminal structure contained in 
the parent. 
    For  the  sake  of  contradiction,  assume  that  P1  does  not 
hold,  i.e.,  that  at  some  step  of  processing,  an  entry  x  is 
output of strictly higher probability than a previously output 
entry y.  That is: 
Prob(x) > Prob(y) and y is removed and output before x. 
    First let's argue that x had a parent entry z. Indeed, if x has 
no parent, then it was inserted in the priority queue during 
the  algorithm  initialization  (when  the  highest  probability 
pre-terminal structure for each base structure was inserted). 
But  that  means  that  x  was  in  the priority queue at the step 
where  y  was  output,  in  violation  of  the  priority  queue 
property. This contradiction implies that x had a parent z.  
    Without  loss  of  generality,  we  can  also  assume  that  x  is 
the  first  value  produced  by  the  algorithm  that  violates  P1. 
Consequently,  when  z  was  output,  it  did  not  violate  this 
property, and since: 
Prob(z) >= Prob(x) > Prob(y), 
it  follows  that  z  must  have  been  output  (and  processed) 
before y. That means that x was inserted in the priority queue 
prior to y's removal, again in violation of the priority queue 
property. This final contradiction concludes the proof. 
    Note  that  by  meeting  the  following  conditions  we  can 
fully prove the required correctness of the next function: 
•  No duplicate pre-terminal structures are entered into the 
priority queue. 
•  All possible pre-terminal structures resulting from base 
structures are eventually entered into the priority queue. 
    Due to space requirements we do not include a proof of 
these  conditions  but  it  follows  from  our  use  of  the  pivot 
values. 
4.  EXPERIMENTS AND RESULTS 
4.1  DESCRIPTION OF PASSWORD LISTS 
    For the research in this paper we obtained three password 
lists  to  try  different  cracking  techniques  against.  All  three 
lists represent real user passwords, which were compromised 
by  hackers  and  subsequently  publicly  disclosed  on  the 
Internet.  As  stated  before,  we  realize  that  while  publicly 
available, these lists contain private data; therefore we treat 
all password lists as confidential. If you wish a copy of the 
list please contact the authors directly. Due to the moral and 
legal issues with distributing real user information, we will 