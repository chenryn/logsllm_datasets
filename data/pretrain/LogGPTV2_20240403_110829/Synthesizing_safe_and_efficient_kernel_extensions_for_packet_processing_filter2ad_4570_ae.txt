efits of the optimizations (in ¬ß5) to reducing equivalence-checking
time and also the number of calls to the solver. Table 4 shows the
benefits of optimizations I‚ÄìIV (memory type, map type, and mem-
ory offset concretization, and modular verification) by starting with
all optimizations turned on (I, II, III, IV) as the baseline. We progres-
sively turn off each optimization, and show absolute verification
times and slowdown relative to the baseline. We find that, across
benchmarks, the collective benefits of the optimizations range be-
tween 2‚Äì7 orders of magnitude, with a mean improvement of 6
orders of magnitude across programs. The larger the program, the
more pronounced the impact of the optimizations. Among all the
optimizations we apply, modular verification produces the most
consistent and significant gains across programs.
Table 6 in Appendix F shows the impact of reductions in the
number of queries to the logic solver by caching canonical versions
of programs (optimization V, ¬ß5). We find caching to be very effec-
tive: 93% or more queries otherwise discharged to the solver can
be eliminated by caching the equivalence-checking outcomes of
syntactically-similar programs checked earlier.
Impact of parameter choices on stochastic search. K2‚Äôs stochastic
search proceeds in parallel with 16 different sets of parameters.
These parameters correspond to variants of the cost functions, with
different coefficients used to combine error and performance, as
well as different program rewrite rules (¬ß3.2). The full set of values
parameterizing each set is described in Appendix F.1. Across 13
programs, we show the efficacy of each set of parameters in opti-
mizing instruction size. Despite K2‚Äôs current use of 16 parameter
sets, some of those sets are much more likely to produce optimal
results than others. Hence, it is possible to obtain K2‚Äôs gains with
much less parallelism. More generally, exploring the identification
of hyperparameters that provide the best results given a limited
compute budget is an interesting problem deserving further explo-
ration [100].
Impact of domain-specific rewrite rules. We evaluate the benefits
imparted by K2‚Äôs domain-specific program rewrite rules (¬ß3.1) to
the quality of generated programs. Table 10 in ¬ß8 shows the results
from optimizing the instruction count of programs with different
settings where we selectively turn the domain-specific rules on or
off. Each domain-specific rule is necessary to find the best program
for each benchmark. Disabling any one of the rules entirely results
in the quality of the output programs dropping by as much as 12%
relative to the best outcome.
9 OPTIMIZATIONS DISCOVERED BY K2
We present two classes of optimizations that K2 discovered while
reducing the number of instructions in the program. Several more
examples from these classes and others are in Appendix G.
Example 1. Coalescing multiple memory operations. In the pro-
gram xdp_pktcntr [12] developed by Facebook, K2 transformed
bpf_mov r1 0
bpf_stx_32 r10 -4 r1
bpf_stx_32 r10 -8 r1
// r1 = 0
// *(u32*)(r10-4) = r1
// *(u32*)(r10-8) = r1
into the single instruction
bpf_st_imm64 r10 -8 0 // *(u64*)(r10-8) = 0
by coalescing a register assignment and two 32-bit register stores
into a single 64-bit store that writes an immediate value. The orig-
inal instruction sequence comes from two assignments in the C
code: u32 ctl_flag_pos = 0; u32 cntr_pos = 0. This example is
one of the simplest of this class of optimizations that K2 found. In a
couple of cases, K2 shrunk sequences of 12 instructions containing
complex swaps of memory contents into 4‚Äì8 instructions.
Example 2. Context-dependent optimizations. K2 discovered rewrites
that depend on the specific context (e.g., current register values) of
instructions within a program. For example, in the balancer_kern
program [11] developed by Facebook, K2 transformed the sequence
bpf_mov64 r0 r2
bpf_and64 r0 r3
bpf_rsh64 r0 21
into the sequence
// r0 = r2
// r0 = r0 & r3
// r0 = r0 >> 21
bpf_mov32 r0 r2
bpf_arsh64 r0 21
// r0 = lower32(r2)
// r0 = r0 >> 21
This transformation does not generally hold under all values of r3.
K2 used the precondition that the value of r3 prior to this sequence
was 0x00000000ffe00000. More generally, we found optimizations
where K2 leveraged both preconditions and postconditions on the
values and liveness of registers and memory addresses.
We believe that the specificity of the optimizations described
above (and in Appendix G) may well be challenging to match
with a rule-based optimizing compiler. Beyond the categories de-
scribed above, K2 derived optimizations using complex opcodes
(e.g., bpf_xadd64 rX off rY ‚áî *(u64*)(rX + off) += rY) and non-
trivial dead code elimination that leverages the liveness of memory
addresses. More examples are available in Appendix G.
11
arXiv, July 14, 2021
Qiongwen Xu et al.
Benchmark
I, II, III
I, II
I
slowdown
None
I, II, III, IV
time (ùúás)
25,969
30,591
48,129
7,414
73,769
9,181
9,804
6,719
26,447
slowdown
slowdown
#inst
18
18
36
24
26
22
39
94
31
name
813√ó
(1) xdp_exception
363√ó
(2) xdp_redirect_err
6,296√ó
(3) xdp_devmap_xmit
22,294 √ó
(4) xdp_cpumap_kthread
1,672√ó
(5) xdp_cpumap_enqueue
2,548√ó
(14) xdp_pktcntr
799,343√ó
(17) from-network
> 12,858,444 √ó
(18) recvmsg4
> 1,711,472√ó
Avg. of all benchmarks
Table 4: Reductions in equivalence-checking time (¬ß5, ¬ß8). We study the following optimizations: (I) memory type, (II) map type, and (III)
memory offset concretizations, and (IV) modular verification. All optimizations are turned on (I, II, III, IV) as the baseline. Slowdowns relative
to this baseline are reported as optimizations are turned off progressively.
time (ùúás)
21,119,700
11,105,500
303,043,000
165,283,000
123,350,000
23,390,200
7,836,910,000
> 86,400,000,000
> 11,860,525,175
time (ùúás)
5,111,940
3,795,580
49,529,900
24,583,300
36,360,800
43,656,800
33,758,000
1,533,220,000
216,252,040
time (ùúás)
465,113
855,942
42,887,200
23,387,700
30,974,000
1,030,280
4,791,680
58,299,300
20,336,402
83√ó
51√ó
951√ó
3,537√ó
366√ó
8,819√ó
9,560√ó
1,592,631√ó
202,000√ó
197√ó
124√ó
1,029√ó
3,316√ó
493√ó
4,755√ó
3,443√ó
228,181√ó
30,192√ó
time (ùúás)
2,160,340
1,574,910
45,789,000
26,223,200
26,968,500
80,963,000
93,730,700
18√ó
28√ó
891√ó
3,155√ó
420√ó
112√ó
489√ó
8,676√ó
1,724√ó
10,701,400,000
1,372,351,206
slowdown
10 RELATED WORK
Data plane code optimization has been a topic of recent inter-
est [72, 75, 109]. Chipmunk [75] generates code for high-speed
switches, where programs must fit within the available hardware
resources or they won‚Äôt run at all. In contrast, K2 starts with a pro-
gram that can run; the goal is to improve its performance safely. In
concurrent work, Morpheus [109] explores dynamic recompilation
of data plane code based on workload characteristics, reminiscent of
conditionally-correct optimization [129]. K2‚Äôs approach is orthogo-
nal: it is purely compile-time and the optimizations are valid across
all run-time configurations. Farshin‚Äôs thesis [72] suggests, but stops
short of applying stochastic search to NFVs, due to performance
variability. hXDP [52] executes BPF code on FPGAs; K2‚Äôs goal is to
optimize BPF over ISA-based processors.
There is a rich literature on synthesizing data plane rules and
control plane policies for high-speed routers [43, 44, 68, 69, 124,
133, 134]. K2 must synthesize BPF instructions, which are more
expressive than router data plane rules and control policies.
K2 builds significantly on the literature on program synthe-
sis [38, 40, 55, 82, 85, 89, 93, 105, 112, 117, 126, 127, 135, 139] and
accelerating formal verification [46, 48, 50, 57, 97, 119]. Below, we
summarize three key technical differences from this literature.
First, K2 makes several domain-specific contributions in formal-
izing BPF programs relative to prior work. Sound BPF JITs [114,
115, 137, 138] assert the equivalence between BPF bytecode instruc-
tions and lower-level machine instructions on a per-instruction
basis. K2 solves a fundamentally different problem: synthesizing
new BPF bytecode and checking the equivalence of synthesized
and source BPF bytecode. Unlike sound JIT compilers, K2 requires
modeling control flow and pointer aliasing which are not concerns
for per-instruction verification tasks. Prevail [77] implements a fast
abstract interpretation of BPF programs to prove in-bound mem-
ory access safety and control flow safety. In contrast to Prevail,
K2 performs synthesis, and considers several additional kernel-
checker-specific safety properties to generate kernel-executable
BPF bytecode. To our knowledge, none of the prior works formalize
BPF maps and helpers in sufficient detail to support equivalence-
checking, which requires modeling two levels of aliasing (¬ß4.3).
Further, K2 contributes several domain-specific techniques to ac-
celerate equivalence-checking by 6 orders of magnitude.
Second, most prior x86 code synthesizers do not handle program
safety considerations [40, 112, 117, 126‚Äì129]. To our knowledge,
12
the only prior approach to synthesize safe code is the NaCl loop
superoptimizer [55], which considers only access alignment (¬ß6).
Finally, K2 includes several domain-specific program rewrites
(¬ß3) that accelerate convergence to better programs.
11 CONCLUSION
We presented K2, a compiler for BPF based on program synthesis
technology. K2 can produce safe and optimized drop-in replace-
ments for existing BPF bytecode.
K2 naturally leads to several avenues for follow-up research.
(1) Scaling to larger programs: Currently, K2 cannot optimize large
programs (200+ instructions) within a short time (e.g., a minute).
Developing techniques to optimize large programs quickly is a di-
rection ripe for further research. (2) Designing better cost functions:
K2‚Äôs latency cost function is a weak predictor of actual latency. The
design of high-fidelity cost functions to statically estimate program
performance metrics such as tail latency and maximum per-core
throughput will help boost the throughput and latency gains avail-
able from synthesis. (3) Addressing engineering challenges: The ac-
tive evolution of the BPF ecosystem [26] makes it challenging to
keep K2‚Äôs safety checks in sync with that of the kernel checker and
to develop support for emerging BPF hooks and helper functions.
We hope that the community will build on our compiler and
the techniques in this paper. K2‚Äôs source code, including all of our
experimental scripts, is available at https://k2.cs.rutgers.edu/.
This work does not raise any ethical issues.
ACKNOWLEDGMENTS
This work was funded by the National Science Foundation grants
CNS-1910796 and CNS-2008048. We thank the SIGCOMM anony-
mous reviewers, our shepherd Nate Foster, Akshay Narayan, Paul
Chaignon, and Vibhaalakshmi Sivaraman for their thoughtful feed-
back and discussions. We are grateful to Nikolaj Bj√∏rner for im-
provements to the Z3 solver that helped support K2‚Äôs requirements.
REFERENCES
[1] 1999. RFC 2544: Benchmarking Methodology for Network Interconnect Devices.
[Online. Retrieved Jan 27, 2021.] https://tools.ietf.org/html/rfc2544.
[2] 2014. BPF kernel interpreter. [Online. Retrieved Jan 21, 2021.] https://github.
com/torvalds/linux/blob/master/kernel/bpf/core.c#L1356.
complexity.
Some notes
on verifier
[3] 2016.
trieved
ff7c6767180a9923fb1c0646945f29709da6fb6e.
2021.]
12,
Jul
[Online. Re-
https://github.com/cilium/cilium/commit/
Synthesizing Safe and Efficient Kernel Extensions for Packet Processing
arXiv, July 14, 2021
[4] 2017. BPF instruction set. [Online, Retrieved Jan 20, 2021.] https://github.com/
iovisor/bpf-docs/blob/master/eBPF.md.
[5] 2017. Linux BPF verifier selftests.
[Online. Retrieved Jan 21, 2021.] https:
//github.com/torvalds/linux/tree/master/tools/testing/selftests/bpf/verifier.
[6] 2017. The Linux kernel BPF static checker. [Online. Retrieved Jan 20, 2021.]
https://github.com/torvalds/linux/blob/master/kernel/bpf/verifier.c.
[7] 2017. TRex traffic generator. [Online. Retrieved Jan 27, 2021.] https://trex-
tgn.cisco.com/trex/doc/trex_manual.html.
[8] 2017. Verifier restriction on stack accesses being aligned. [Online. Retrieved
Jan 23, 2021.] https://github.com/torvalds/linux/blob/v4.18/kernel/bpf/verifier.
c#L1515.
[9] 2017. Verifier restriction on stores into PTR_TO_CTX pointers. [Online. Re-
trieved Jan 23, 2021.] https://github.com/torvalds/linux/blob/v4.18/kernel/bpf/
verifier.c#L4888.
[10] 2018. Document navigating BPF verifier complexity. [Online. Retrieved Jul 12,
[11] 2018.
[12] 2018.
2021.] https://github.com/cilium/cilium/issues/5130.
Facebook XDP load balancer benchmark.
[Online, Retrieved Jun
15, 2021.] https://github.com/facebookincubator/katran/blob/master/katran/lib/
bpf/balancer_kern.c.
Facebook XDP packet counter benchmark.
15,
[Online, Retrieved
https://github.com/facebookincubator/katran/blob/
Jun
6f86aa82c5b3422313e0a63d195b35e7e2f7539a/katran/lib/bpf/xdp_pktcntr.
c#L52-L53.
2021.]
[13] 2019. BPF: Increase complexity limit and maximum program size. [Online.
Retrieved Jul 12, 2021.] https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/
linux.git/commit/?id=c04c0d2b968ac45d6ef020316808ef6c82325a82.
[14] 2019. [DebugInfo] Support to emit debugInfo for extern variables. [Online.
Retrieved Jan 20, 2021.] https://github.com/llvm/llvm-project-staging/commit/
d77ae1552fc21a9f3877f3ed7e13d631f517c825.
[15] 2019. Mellanox BlueField SmartNIC for Ethernet.
[Online. Retrieved
Jan 20, 2021.] https://www.mellanox.com/sites/default/files/related-docs/prod_
adapter_cards/PB_BlueField_Smart_NIC.pdf.
[16] 2020. BPF: add a SimplifyCFG IR pass during generic Scalar/IPO optimization.
[Online. Retrieved Jan 20, 2021.] https://github.com/llvm/llvm-project-staging/
commit/87cba434027bf6ad370629f5b924ebd4543ddabc.
[17] 2020. [BPF] disable ReduceLoadWidth during SelectionDag phase. [Online.
Retrieved Jan 20, 2021.] https://github.com/llvm/llvm-project-staging/commit/
d96c1bbaa03574daf759e5e9a6c75047c5e3af64.
[BPF] fix a bug in BPFMISimplifyPatchable pass with -O0.
[Online.
Retrieved Jan 20, 2021.] https://github.com/llvm/llvm-project-staging/commit/
795bbb366266e83d2bea8dc04c19919b52ab3a2a.