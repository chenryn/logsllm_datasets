### 2.1 使用 `find` 命令查找文件

#### 2.1.1 查找特定用户的文件
要查找属于特定用户（例如 `uucp`）的文件，可以使用以下命令：
```sh
$ find /etc -user uucp -print
```

#### 2.1.2 查找属主账户已被删除的文件
为了查找属主账户已被删除的文件，可以使用 `-nouser` 选项。这将找到那些在 `/etc/passwd` 文件中没有有效账户的文件。例如，在 `/home` 目录下查找所有这类文件：
```sh
$ find /home -nouser -print
```

#### 2.1.3 使用 `group` 和 `nogroup` 选项
类似于 `user` 和 `nouser` 选项，`find` 命令也有针对文件所属用户组的选项。要在 `/apps` 目录下查找属于 `accts` 用户组的文件，可以使用：
```sh
$ find /apps -group accts -print
```
要查找没有有效所属用户组的所有文件，可以使用 `nogroup` 选项。例如，从文件系统的根目录处查找这样的文件：
```sh
$ find / -nogroup -print
```

#### 2.1.4 按照更改时间查找文件
如果希望按照更改时间来查找文件，可以使用 `mtime` 选项。用减号 `-` 来限定更改时间在距今 n 日以内的文件，而用加号 `+` 来限定更改时间在距今 n 日以前的文件。

- 在系统根目录下查找更改时间在5日以内的文件：
  ```sh
  $ find / -mtime -5 -print
  ```
- 在 `/var/adm` 目录下查找更改时间在3日以前的文件：
  ```sh
  $ find /var/adm -mtime +3 -print
  ```

#### 2.1.5 查找比某个文件新或旧的文件
如果希望查找更改时间比某个文件新但比另一个文件旧的所有文件，可以使用 `-newer` 选项。例如，查找更改时间比文件 `age.awk` 新但比文件 `belts.awk` 旧的文件：
```sh
$ find . -newer age.awk ! -newer belts.awk -print
```
如果没有现成的文件作为比较基准，可以使用 `touch` 命令创建一个具有指定时间戳的文件。例如，假设现在的时间是 23:40，希望查找更改时间在两个小时以内的文件，可以首先创建这样一个文件：
```sh
$ touch -t 202305042140 dstamp
```
然后使用 `find` 命令：
```sh
$ find . -newer dstamp -print
```

#### 2.1.6 使用 `type` 选项
`UNIX` 或 `LINUX` 系统中有若干种不同的文件类型。要在 `/etc` 目录下查找所有的目录，可以使用：
```sh
$ find /etc -type d -print
```
要在当前目录下查找除目录以外的所有类型的文件，可以使用：
```sh
$ find . ! -type d -print
```
要在 `/etc` 目录下查找所有的符号链接文件，可以使用：
```sh
$ find /etc -type l -print
```

#### 2.1.7 使用 `size` 选项
可以按照文件长度来查找文件，这里所指的文件长度既可以用块（block）来计量，也可以用字节来计量。以字节计量文件长度的表达形式为 `Nc`；以块计量文件长度只用数字表示即可。

- 在当前目录下查找文件长度大于 1M 字节的文件：
  ```sh
  $ find . -size +1000000c -print
  ```
- 在 `/home/apache` 目录下查找文件长度恰好为 100 字节的文件：
  ```sh
  $ find /home/apache -size 100c -print
  ```
- 在当前目录下查找长度超过 10 块的文件（一块等于 512 字节）：
  ```sh
  $ find . -size +10 -print
  ```

#### 2.1.8 使用 `depth` 选项
在使用 `find` 命令时，可能希望先匹配所有的文件，再在子目录中查找。使用 `depth` 选项就可以使 `find` 命令这样做。例如，从文件系统的根目录开始，查找一个名为 `CON.FILE` 的文件：
```sh
$ find / -name "CON.FILE" -depth -print
```

#### 2.1.9 使用 `mount` 选项
在当前的文件系统中查找文件（不进入其他文件系统），可以使用 `find` 命令的 `mount` 选项。例如，从当前目录开始查找位于本文件系统中文件名以 `.XC` 结尾的文件：
```sh
$ find . -name "*.XC" -mount -print
```

#### 2.1.10 使用 `cpio` 选项
`cpio` 命令可以用来向磁带设备备份文件或从中恢复文件。可以使用 `find` 命令在整个文件系统中（更多的情况下是在部分文件系统中）查找文件，然后用 `cpio` 命令将其备份到磁带上。例如，备份 `/etc`、`/home` 和 `/apps` 目录中的文件：
```sh
$ find /etc /home /apps -print | cpio -o -H newc > /dev/tape
```

#### 2.1.11 使用 `exec` 或 `ok` 来执行 shell 命令
当匹配到一些文件以后，可能希望对其进行某些操作，这时就可以使用 `-exec` 选项。例如，列出当前目录下的所有普通文件：
```sh
$ find . -type f -exec ls -l {} \;
```
要在 `/logs` 目录中查找更改时间在 5 日以前的文件并删除它们，可以使用：
```sh
$ find logs -type f -mtime +5 -exec rm {} \;
```

### 2.2 使用 `xargs` 命令
`xargs` 命令用于处理由 `find` 命令传递的参数。例如，查找系统中的每一个普通文件，并测试它们分别属于哪类文件：
```sh
$ find . -type f -print | xargs file
```
在 `/apps/audit` 目录下查找所有用户具有读、写和执行权限的文件，并收回相应的写权限：
```sh
$ find /apps/audit -perm -7 -print | xargs chmod o-w
```

### 2.3 小结
`find` 命令是一个非常强大的工具，它可以按照用户指定的准则来匹配文件。结合 `exec` 和 `xargs` 可以对匹配到的文件执行几乎所有的命令。