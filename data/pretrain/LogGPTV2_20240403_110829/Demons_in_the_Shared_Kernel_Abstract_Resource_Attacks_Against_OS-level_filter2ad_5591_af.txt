and scalability [32]. Zhang et al. show that the container has better
performance than virtual machines in big data environment [69].
All these works demonstrate that OS-level virtualization has bet-
ter performance than traditional VM-based virtualization. However,
none of them pay attention to the potential influence of underlying
kernel abstract resources. Our paper reveals the new attack surfaces
introduced by abstract resources.
7.2 Resource Isolation
Linux uses capabilities [43] to prohibit processes without certain ca-
pabilities from accessing resource instances of corresponding types.
Researchers have proposed approaches that are based on Linux
capabilities, such as Wedge [7], Capsicum [65], and ACES [10].
These works enforce more fine-grained capability control to mit-
igate memory corruption attacks. However, they cannot defend
against our DoS attacks which exhaust accessible shared resources.
Memory address space isolation [56] is a typical resource space
isolation scheme, which avoids memory address resource from be-
ing exhausted. Linux namespaces [47] isolate 8 types of resources
listed in §2.1. These schemes can isolate only limited types of re-
sources. Resource containers [6] propose to extend monolithic
kernel to isolate system resources and account for resources at
thread-level, which is similar to control groups. Using resource
containers to protect all abstract resources is impractical due to
the large performance overhead. EdgeOS [57] deploys OS with
strong isolation for edge clouds. However, adopting a micro-kernel
without hardware supporting introduces more overhead than a
monolithic kernel. Faasm[58] uses software-fault isolation (SFI) for
memory isolation while uses namespaces to isolate the network
resource space in server-less computing. However, most shared
resources are still exposed to the threat of DoS attacks.
7.3 Container Security
Besides resource isolation, there are studies on container security.
Gao et al. find that information leaks from /proc or /sys can be
exploited to launch power attacks [22]. While the same research
group also conducts five attacks to generate out-of-band workloads
to break the resource constraints of Linux control groups [23].
However, they mainly focus on information leakage problem or
attacking physical resources such as CPU, IO, not abstract resources.
Lin et al. show that containers cannot isolate kernel vulnerabil-
ities [40]. Another work uses static analysis to analyze Docker’s
code in order to find differences between the vulnerable and the
patched code [16]. However, these works focus on existing vulner-
abilities and exploits. On the contrary, our work introduces new
attacks targeting the shared abstract resources.
There are also works on securing containers. Lei et al. propose
a container security mechanism called SPEAKER to reduce the
application’s available system calls inside container [38]. Sun et
al. develop security namespaces that provide the security policy
isolation for each container[60]. Another work uses Intel SGX to se-
cure containers [4], which provides a small trusted computing base
with low-performance overhead. Brady et al. implement a security
assessment system of container images [8]. However, containers in
all of these works still rely on the kernel for various services and
thus are still vulnerable to abstract resource attacks.
8 CONCLUSION
In this paper, we reveal a new attack surface introduced by the
shared-kernel in OS-level virtualization. The containers are directly
and indirectly sharing thousands of abstract resources, which can
be exhausted easily to cause DoS attacks against other containers.
To show the importance of confining abstract resources, we have
conducted abstract resource attacks, targeting abstract resources on
different aspects of the operating system kernel. The results show
that attacking abstract resources is highly practical and critical.
Abstract resources are inherently hard to contain. To understand
the attack surfaces, we take an initial trial by conducting a sys-
tematic analysis to identify vulnerable abstract resources in the
Linux kernel. Our tool successfully detects 501 dynamically trig-
gered abstract resources, in which we pick 7 ones and conduct the
attacking experiments in the self-deployed shared-kernel container
environments on the top 4 cloud vendors. The results show that
all environments are vulnerable to our attacks. As a mitigation, we
provide several suggestions for container users and developers to
reduce the risks.
ACKNOWLEDGMENTS
The authors would like to thank all reviewers for the insightful com-
ments. Those comments helped to re-shape this paper. This work
is partially supported by the National Natural Science Foundation
of China (Grants No. 62002317, 62032021, and 61772236), by the
National Key R&D Program of China (Grant No. 2020AAA0107700),
by the Key R&D Program of Shaanxi Province of China (Grant No.
2019ZDLGY12-06), by the Leading Innovative and Entrepreneur
Team Introduction Program of Zhejiang (Grant No. 2018R01005),
and by the Ant Group Funds for Security Research.
REFERENCES
[1] Alibaba. 2020. Alibaba Cloud. https://us.alibabacloud.com/.
[2] Amazon. 2020. Containers on AWS. https://aws.amazon.com/containers.
[3] Amazon. 2020. Pod security policy. https://docs.aws.amazon.com/eks/latest/
userguide/pod-security-policy.html.
[4] Sergei Arnautov, Bohdan Trach, Franz Gregor, Thomas Knauth, Andre Martin,
Christian Priebe, Joshua Lind, Divya Muthukumaran, Dan O’keeffe, Mark L
Stillwell, et al. 2016. {SCONE}: Secure linux containers with intel {SGX}. In 12th
Session 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea776{USENIX} Symposium on Operating Systems Design and Implementation ({OSDI}
16). USENIX Association, 689–703.
[5] Jia-Ju Bai, Julia Lawall, Qiu-Liang Chen, and Shi-Min Hu. 2019. Effective static
analysis of concurrency use-after-free bugs in Linux device drivers. In 2019
{USENIX} Annual Technical Conference ({USENIX}{ATC} 19). USENIX Associa-
tion, 255–268.
[6] Gaurav Banga, Peter Druschel, and Jeffrey C Mogul. 1999. Resource containers:
A new facility for resource management in server systems. In Proceedings of
the Third USENIX Symposium on Operating Systems Design and Implementation
(OSDI), New Orleans, Louisiana, USA, February 22-25, 1999. USENIX Association,
45–58.
[7] Andrea Bittau, Petr Marchenko, Mark Handley, and Brad Karp. 2008. Wedge:
Splitting applications into reduced-privilege compartments. In 5th USENIX Sym-
posium on Networked Systems Design & Implementation,NSDI 2008, April 16-18,
2008, San Francisco, CA, USA, Proceedings. USENIX Association, 309–322.
[8] Kelly Brady, Seung Moon, Tuan Nguyen, and Joel Coffman. 2020. Docker con-
tainer security in cloud computing. In 2020 10th Annual Computing and Commu-
nication Workshop and Conference (CCWC). IEEE, 975–980.
[9] Thanh Bui. 2015. Analysis of docker security. arXiv preprint arXiv:1501.02967
(2015). http://arxiv.org/abs/1501.02967
[10] Abraham A Clements, Naif Saleh Almakhdhub, Saurabh Bagchi, and Mathias
Payer. 2018. {ACES}: Automatic compartments for embedded systems. In 27th
{USENIX} Security Symposium ({USENIX} Security 18). USENIX Association,
65–82.
[11] Alibaba Cloud. 2020. Pod security policy. https://www.alibabacloud.com/help/
doc-detail/149547.html.
[12] Theo Combe, Antony Martin, and Roberto Di Pietro. 2016. To docker or not to
docker: A security perspective. IEEE Cloud Computing 3, 5 (2016), 54–62.
[13] Nicholas DeMarinis, Kent Williams-King, Di Jin, Rodrigo Fonseca, and Vasileios P
Kemerlis. 2020. Sysfilter: Automated system call filtering for commodity software.
In 23rd International Symposium on Research in Attacks, Intrusions and Defenses
({RAID} 2020). USENIX Association, 459–474.
[14] LTP Developers. 2021. Linux Test Project. https://linux-test-project.github.io/.
[15] Docker. 2020. Seccomp security profiles for Docker. https://docs.docker.com/
engine/security/seccomp/.
[16] Ana Duarte and Nuno Antunes. 2018. An empirical study of docker vulnerabilities
and of static code analysis applicability. In 2018 Eighth Latin-American Symposium
on Dependable Computing (LADC). IEEE, 27–36.
[17] Wes Felter, Alexandre Ferreira, Ram Rajamony, and Juan Rubio. 2015. An updated
performance comparison of virtual machines and linux containers. In 2015 IEEE
international symposium on performance analysis of systems and software (ISPASS).
IEEE Computer Society, 171–172.
[18] FreeBSD. 2021. freeBSD handbook. https://docs.freebsd.org/en/books/handbook/
kernel/rights#zx_rights_basic.
[21] Peter B Galvin, Greg Gagne, Abraham Silberschatz, et al. 2003. Operating system
concepts. John Wiley & Sons.
[22] Xing Gao, Zhongshu Gu, Mehmet Kayaalp, Dimitrios Pendarakis, and Haining
Wang. 2017. ContainerLeaks: Emerging security threats of information leakages
in container clouds. In 2017 47th Annual IEEE/IFIP International Conference on
Dependable Systems and Networks (DSN). IEEE Computer Society, 237–248.
[23] Xing Gao, Zhongshu Gu, Zhengfa Li, Hani Jamjoom, and Cong Wang. 2019.
Houdini’s Escape: Breaking the Resource Rein of Linux Control Groups. In
Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications
Security, CCS 2019, London, UK, November 11-15, 2019. ACM, 1073–1086.
[24] Xing Gao, Benjamin Steenkamer, Zhongshu Gu, Mehmet Kayaalp, Dimitrios
Pendarakis, and Haining Wang. 2018. A study on the security implications of
information leakages in container clouds. IEEE Transactions on Dependable and
Secure Computing 18, 1 (2018), 174–191.
[25] Seyedhamed Ghavamnia, Tapti Palit, Azzedine Benameur, and Michalis Poly-
chronakis. 2020. Confine: Automated system call policy generation for container
attack surface reduction. In 23rd International Symposium on Research in Attacks,
Intrusions and Defenses ({RAID} 2020). USENIX Association, 443–458.
[26] Seyedhamed Ghavamnia, Tapti Palit, Shachee Mishra, and Michalis Polychronakis.
2020. Temporal system call specialization for attack surface reduction. In 29th
{USENIX} Security Symposium ({USENIX} Security 20). USENIX Association,
1749–1766.
[27] Google. 2020. GKE quick start. https://cloud.google.com/kubernetes-engine/
docs/quickstart.
compute/docs/containers.
[28] Google. 2020. google compute engine of Containers. https://cloud.google.com/
[29] Google. 2021. Best practices for operating containers. https://cloud.google.com/
kubernetes-engine/docs/best-practices/enterprise-multitenancy.
[30] Aaron Grattafiori. 2016. Understanding and hardening linux containers. Whitepa-
per, NCC Group (2016).
jails/.
handles.
[19] Fuchsia. 2020. Zircon handles. https://fuchsia.dev/fuchsia-src/concepts/kernel/
[50] Linux man-pages project. 2020. ulimit man page. https://man7.org/linux/man-
[20] Fuchsia. 2020. ZX RIGHTS BASIC. https://fuchsia.dev/fuchsia-src/concepts/
[51] Microsoft. 2020. Containers on Azure. https://azure.microsoft.com/en-us/
[31] 2020 The gVisor Authors. 2020. What is gVisor. https://gvisor.dev/docs.
[32] Ann Mary Joy. 2015. Performance comparison between linux containers and
virtual machines. In 2015 International Conference on Advances in Computer
Engineering and Applications. 342–346.
[33] Poul-Henning Kamp and Robert NM Watson. 2000. Jails: Confining the om-
nipotent root. In Proceedings of the 2nd International SANE Conference, Vol. 43.
116.
https://
elixir.bootlin.com/linux/v5.10/source/net/netfilter/nf_conntrack_core.c#L1480.
- nf-conntrack-standalone.c.
Kernel source - nf-conntrack-core.c.
[34] Linux Kenrnel. 2020.
[35] Linux Kernel.
Kernel
source
2020.
https://elixir.bootlin.com/linux/v5.10/source/net/netfilter/
nf_conntrack_standalone.c#L614.
[36] Kubernetes. 2020. Kubernetes. https://kubernetes.io/.
[37] Kubernetes. 2020. Kubernetes Namespaces. https://kubernetes.io/docs/concepts/
overview/working-with-objects/namespaces/.
[38] Lingguang Lei, Jianhua Sun, Kun Sun, Chris Shenefiel, Rui Ma, Yuewu Wang,
and Qi Li. 2017. SPEAKER: Split-phase execution of application containers. In
International Conference on Detection of Intrusions and Malware, and Vulnerability
Assessment (Lecture Notes in Computer Science, Vol. 10327). Springer, 230–251.
[39] GNU C Library. 2021. ulmit source code. https://sourceware.org/git/?p=
glibc.git;a=blob_plain;f=sysdeps/posix/ulimit.c.
[40] Xin Lin, Lingguang Lei, Yuewu Wang, Jiwu Jing, Kun Sun, and Quan Zhou. 2018.
A measurement study on linux container security: Attacks and countermeasures.
In Proceedings of the 34th Annual Computer Security Applications Conference. ACM,
418–429.
[41] Linux. 2020. random read kernel function. https://elixir.bootlin.com/linux/v5.3.1/
source/drivers/char/random.c#L1948.
[42] Kangjie Lu and Hong Hu. 2019. Where does it go? refining indirect-call targets
with multi-layer type analysis. In Proceedings of the 2019 ACM SIGSAC Conference
on Computer and Communications Security. ACM, 1867–1881.
[43] Linux man-pages project. 2020. capabilities(7) — Linux manual page. https:
//man7.org/linux/man-pages/man7/capabilities.7.html.
[44] Linux man-pages project. 2020. cgroups - Linux control groups. http://man7.org/
linux/man-pages/man7/cgroups.7.html.
[45] Linux man-pages project. 2020. getrlimit man page. https://man7.org/linux/man-
pages/man2/getrlimit.2.html.
man7/pty.7.html.
[46] Linux man-pages project. 2020. Linux pty. https://man7.org/linux/man-pages/
[47] Linux man-pages project. 2020. namespace - Linux Namespace. https://man7.org/
linux/man-pages/man7/namespaces.7.html.
[48] Linux man-pages project. 2020.
PAM limits conf man page.
https://
www.man7.org/linux/man-pages/man5/limits.conf.5.html.
[49] Linux man pages project. 2020. sysctl man page. https://man7.org/linux/man-
pages/man8/sysctl.8.html.
pages/man3/ulimit.3.html.
product-categories/containers/.
[52] Microsoft. 2020. Security policy on Azure. https://docs.microsoft.com/azure/aks/
developer-best-practices-pod-security.
[53] FreeBSD Manual Pages. 2021. ezjail man page. https://www.freebsd.org/cgi/
[54] FreeBSD Manual Pages. 2021. rctl man page. https://www.freebsd.org/cgi/
man.cgi?query=ezjail.
man.cgi?query=rctl&sektion=8.
[55] Shankara Pailoor, Xinyu Wang, Hovav Shacham, and Isil Dillig. 2020. Auto-
mated policy synthesis for system call sandboxing. Proceedings of the ACM on
Programming Languages 4, OOPSLA (2020), 135:1–135:26.
[56] James L Peterson and Abraham Silberschatz. 1985. Operating system concepts.
Addison-Wesley Longman Publishing Co., Inc.
[57] Yuxin Ren, Guyue Liu, Vlad Nitu, Wenyuan Shao, Riley Kennedy, Gabriel Parmer,
Timothy Wood, and Alain Tchana. 2020. Fine-Grained Isolation for Scalable, Dy-
namic, Multi-tenant Edge Clouds. In 2020 {USENIX} Annual Technical Conference
({USENIX} {ATC} 20). USENIX Association, 927–942.
[58] Simon Shillaker and Peter Pietzuch. 2020. Faasm: lightweight isolation for efficient
stateful serverless computing. In 2020 {USENIX} Annual Technical Conference
({USENIX} {ATC} 20). USENIX Association, 419–433.
[59] Solaris. 2020. Solaris Zones. https://docs.oracle.com/cd/E26502_01/html/E29024/
toc.html.
[60] Yuqiong Sun, David Safford, Mimi Zohar, Dimitrios Pendarakis, Zhongshu Gu,
and Trent Jaeger. 2018. Security namespace: making linux security frameworks
available to containers. In 27th {USENIX} Security Symposium ({USENIX} Secu-
rity 18). USENIX Association, 1423–1439.
[61] Sysdig. 2021. Sysdig Falco. https://sysdig.com/opensource/falco/.
[62] William Viktorsson, Cristian Klein, and Johan Tordsson. 2020.
Security-
Performance Trade-offs of Kubernetes Container Runtimes. In 28th International
Symposium on Modeling, Analysis, and Simulation of Computer and Telecommu-
nication Systems, MASCOTS 2020, Nice, France, November 17-19, 2020. IEEE, 1–4.
https://doi.org/10.1109/MASCOTS50786.2020.9285946
Session 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea777[63] Dmitry V.Levin. 2020. pam model source code. https://github.com/linux-pam/
linux-pam/releases/tag/v1.5.1.
Netfilter#Connection_tracking.
level_virtualization.
[64] Dmitry V.Levin. 2021. setup_limits source code. https://github.com/linux-pam/
linux-pam/blob/v1.5.1/modules/pam_limits/pam_limits.c#L984.
[65] Robert NM Watson, Jonathan Anderson, Ben Laurie, and Kris Kennaway. 2010.
Capsicum: Practical Capabilities for UNIX.. In USENIX Security Symposium, Vol. 46.
USENIX Association, 2. https://doi.org/10.1109/MASCOTS50786.2020.9285946
https://en.wikipedia.org/wiki/
[66] Wikipedia. 2020.
Connection tracking.
[67] Wikipedia. 2020. OS-level virtualization. https://en.wikipedia.org/wiki/OS-
[68] Meng Xu, Chenxiong Qian, Kangjie Lu, Michael Backes, and Taesoo Kim. 2018.
Precise and scalable detection of double-fetch bugs in OS kernels. In 2018 IEEE
Symposium on Security and Privacy, SP 2018, Proceedings, 21-23 May 2018, San
Francisco, California, USA. IEEE Computer Society, 661–678. https://doi.org/
10.1109/SP.2018.00017
[69] Qi Zhang, Ling Liu, Calton Pu, Qiwei Dou, Liren Wu, and Wei Zhou. 2018. A
comparative study of containers and virtual machines in big data environment.
In 2018 IEEE 11th International Conference on Cloud Computing (CLOUD). IEEE
Computer Society, 178–185. https://doi.org/10.1109/CLOUD.2018.00030
[70] Tong Zhang, Wenbo Shen, Dongyoon Lee, Changhee Jung, Ahmed M Azab, and
Ruowen Wang. 2019. Pex: A permission check analysis framework for linux
kernel. In 28th {USENIX} Security Symposium ({USENIX} Security 19). USENIX
Association, 1205–1220.
Session 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea778