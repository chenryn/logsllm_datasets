but also a witness. The value s can be considered to be the
internal state of P˚, including randomness. The emulator is
permitted to rewind the interaction between the prover and
veriﬁer to any move, and resume with the same internal
state for the prover, but with fresh randomness for the
veriﬁer. Whenever P˚ makes a convincing argument when
in state s, E can extract a witness, and therefore, we have
an argument of knowledge of w such that pσ, u, wq P R.
Deﬁnition 10 (Public Coin). An argument pP,Vq is called
public coin if all messages sent from the veriﬁer to the
prover are chosen uniformly at random and independently
of the prover’s messages, i.e., the challenges correspond to
the veriﬁer’s randomness ρ.
An argument
is zero knowledge if it does not
leak
information about w apart from what can be deduced from
the fact that pσ, x, wq P R. We will present arguments that
have special honest-veriﬁer zero-knowledge. This means
that given the veriﬁer’s challenge values, it is possible to
efﬁciently simulate the entire argument without knowing the
witness.
Deﬁnition 11 (Perfect Special Honest-Veriﬁer Zero-Knowl-
edge). A public coin argument pP,Vq is a perfect special
honest veriﬁer zero knowledge (SHVZK) argument for R
if there exists a probabilistic polynomial time simulator S
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:29:05 UTC from IEEE Xplore.  Restrictions apply. 
such that for all interactive non-uniform polynomial time
adversaries A
„ pσ, u, wq P R
and Aptrq “ 1
„ pσ, u, wq P R
and Aptrq “ 1
ˇˇˇˇ σ Ð Kp1λq,pu, w, ρq Ð Apσq,
ˇˇˇˇ σ Ð Kp1λq,pu, w, ρq Ð Apσq,
tr Ð xPpσ, u, wq,Vpσ, u; ρqy
tr Ð Spu, ρq
Pr
“ Pr
j
j
where ρ is the public coin randomness used by the veriﬁer.
We now deﬁne range proofs, which are proofs that the
prover knows an opening to a commitment, such that the
committed value is in a certain range. Range proofs can be
used to show that an integer commitment is to a positive
number or that two homomorphic commitments to elements
in a ﬁeld of prime order will not overﬂow modulo the prime
when they are added together.
Deﬁnition 12 (Zero-Knowledge Range Proof). Given a
commitment scheme pSetup, Comq over a message space
Mpp which is a set with a total ordering, a Zero-Knowledge
Range Proof
for the following relation:
is a protocol
tp1λ, pp, com P Cpp, l, r P Mpp; pp “ Setupp1λq^com “
Compx; rq ^ x ě l ^ x ď ru
Appendix B.
A General Forking Lemma
śμ
śμ
We brieﬂy describe the forking lemma of [7].
Suppose that we have a p2μ ` 1q-move public-coin
argument with μ challenges, x1, . . . , xμ in sequence. Let
ni ě 1 for 1 ď i ď μ. Consider
i“1 ni accepting
transcripts with challenges in the following tree format. The
i“1 ni leaves. The root of the tree is
tree has depth μ and
labeled with the statement. Each node of depth i ă μ has
exactly ni children, each labeled with a distinct value of the
ith challenge xi.
This can be referred to as an pn1, . . . , nμq-tree of accept-
ing transcripts. Given a suitable tree of accepting transcripts,
one can compute a valid witness for our inner-product
argument, range proof, and argument for arithmetic circuit
satisﬁability. This is a natural generalization of special-
soundness for Sigma-protocols, where μ “ 1 and n “ 2.
Combined with Theorem 5, this shows that the protocols
have witness-extended emulation, and hence,
the prover
cannot produce an accepting transcript unless they know a
witness. For simplicity in the following lemma, we assume
that the challenges are chosen uniformly from Zp where
|p| “ λ, but any sufﬁciently large challenge space would
sufﬁce.
Theorem 5 (Forking Lemma, [7]). Let pK,P,Vq be a p2μ`
1q-move, public coin interactive protocol. Let E be a witness
śμ
extraction algorithm that always succeeds in extracting a
witness from an pn1, . . . , nμq-tree of accepting transcripts
i“1 ni is
in probabilistic polynomial time. Assume that
bounded above by a polynomial in the security parameter
λ. Then pK,P,Vq has witness-extended emulation.
Appendix C.
Proof of Theorem 1
Proof. Perfect completeness follows directly because Proto-
col 1 converts an instance for relation (1) into an instance
for relation (2). Protocol 2 is trivially complete. For witness
extended emulation we show that there exists an efﬁcient
extractor E as deﬁned in Theorem 5. First we show how
to construct an extractor E1 for Protocol 2 which on input
pg, h, u, Pq, either extracts a witness a, b, c such that the
relation holds, or discovers a non-trivial discrete logarithm
relation between g, h, u. First note that the hardness of
computing a discrete log relation between g
, u implies
the hardness of computing one between g, h, u as deﬁned
in Protocol 2. We will, therefore, use a recursive argument
showing that in each step we either extract a witness or
a discrete log relation. If n “ |g| “ 1, then the prover
reveals the witness and the relation can simply be checked
directly. Now, we show for each recursive step that on
input pg, h, u, Pq, we can efﬁciently extract a witness a, b
or a non-trivial discrete logarithm relation between g, h, u.
The extractor runs the prover to get L and R. Then, us-
ing 3 different challenges x1, x2, x3, the extractor obtains
ap1q, bp1q, . . . , ap3q, bp3q, such that
, h
1
1
x2
i P R
(99)
L
Using the same 3 challenge values for x, we compute
h
u
bpiq
apiq
i “ g
x´2
ηi ¨ x2 “ 1 ^ 3ÿ
xapiq,bpiqy @i P r1, 3s
ηi “ 0 ^ 3ÿ
ηi ¨ x
i “ 0
´2
η1, η2, η3 such that
i“1
i“1
3ÿ
i“1
and using these η to construct linear combinations of (99)
we can compute aL, bL and cL such that L “ gaL hbL ucL.
Repeating this process with different combinations, we can
also compute aP , aR, bP , bR, cP and cR such that
R “ g
P “ g
aR h
aP h
bR u
bP u
cR
cP
1q, and the
Given the previously extracted witness pa
1
computed representations of L, P and R for each challenge
x, we get
, b
, c
1
x2
L
P R
bL¨x2`bP `bR¨x´2
x´2 “ g
aL¨x2`aP `aR¨x´2 ¨ h
¨ u
cL¨x2`cP `cR¨x´2
:sqa1 ¨ ph
r:n1s ˝ g
“ pg
xr:n1s ˝ h
x´1
xrn1
“ g
b1¨x´1
a1¨x´1
a1¨xrn1
b1¨xr:n1sh
c1
rn1
:sh
r:n1s g
:s u
´1 “ aL,r:n1s ¨ x2 ` aP,r:n1s ` aR,r:n1s ¨ x
1 ¨ x
ùñ a
´2
:s ¨ x
:s ` aR,rn1
:s ¨ x2 ` aP,rn1
1 ¨ x “ aL,rn1
^ a
´2
1 ¨ x “ bL,r:n1s ¨ x2 ` bP,r:n1s ` bR,r:n1s ¨ x
^ b
´2
:s ` bR,rn1
´1 “ bL,rn1
:s ¨ x2 ` bP,rn1
^ b
1 ¨ x
:s ¨ x
´2
1 “ cL ¨ x2 ` cP ` cR ¨ x
^ c
´2
:sqb1 ¨ u
x´1
rn1
c1
If the implications do not hold, we directly obtain a non-
trivial discrete logarithm relation between the generators
331
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:29:05 UTC from IEEE Xplore.  Restrictions apply. 
pg1, . . . , gn, h1, . . . , hn, uq. If the implications do hold, we
can deduce that the following two equalities hold.
´3 “ 0
´3 “ 0
:sq ¨ x
:s ¨ x
:sq ¨ x
´1 ´ aR,rn1
:s ´ bL,r:n1sq ¨ x
´1 ´ bR,r:n1s ¨ x
:s ´ bP,r:n1sq ¨ x
aL,r:n1s ¨ x3 ` paP,r:n1s ´ aL,rn1
`paR,r:n1s ´ aP,rn1
:s ¨ x3 ` pbP,rn1
bL,rn1
`pbR,rn1
(100)
(101)
The equalities (100) and (101) hold for all 3 challenges
x1, x2, x3. They would hold for all challenges x if and only
if
aL,r:n1s “ aR,rn1
^ aL,rn1
^ bL,r:n1s “ bP,rn1
:s “ bR,r:n1s “ bL,rn1
:s “ 0
:s “ aP,r:n1s ^ aR,r:n1s “ aP,rn1
:s
:s ^ bR,rn1
:s “ bP,r:n1s
(102)
(103)
(104)
If, however, we ﬁnd a value of aL,aP ,aR,bL,bP , or bR
which is not of this form, we can directly compute one of
the given form, using two of the three challenges and the
equations (100) and (101). This however, directly results in
two distinct representations of L, P or R, which yields a
non-trivial discrete logarithm relation.
1 “ aP,r:n1s¨x`aP,rn1
´1 and
Finally, using the fact that a
:s ¨ x we see for all 3 challenges
1 “ bP,r:n1s ¨ x
´1 ` bP,rn1
b
that:
xa
1
1y “ c
“ cL ¨ x2 ` c ` cR ¨ x
´2
“ xaP,r:n1s ¨ x ` aP,rn1
:s ¨ x
´1, bP,r:n1s ¨ x
´1 ` bP,rn1
:sy ¨ x2 ` xaP,r:n1s, bP,r:n1sy
“ xaP,r:n1s, bP,rn1
` xaP,rn1
:sy ` xaP,rn1
:s, bP,r:n1sy ¨ x
´2
:s, bP,rn1
:s¨x
:s ¨
, b
1
These equalities only hold for three distinct challenges
if xaP , bPy “ c. Therefore, the extractor either extracts
discrete logarithm relations between the generators or the
witness paC, bCq. Using the generalized forking lemma
from [7] (see Theorem 5) we can see that the extractor uses
3rlog2pnqs ď n2 challenges in total and thus runs in expected
polynomial time in n and λ.
We now show that using Protocol 1 we can construct an
extractor E that extracts a valid witness for relation (2).
The extractor uses the extractor E1 of Protocol 2. On input
pg, h, u, P, cq E runs the prover with on a challenge x
and uses the extractor E1 to get witness a, b such that:
P ¨ ux¨c “ gahbux¨xa,by. Forking the P, supplying him with
1 and rerunning the extractor E1 yields a second
a challenge x
witness pa
1q. Again the soundness of Protocol 2 implies
1
, b
that P ¨ ux1¨c “ ga1
ux1¨xa1,b1y. From the two witnesses,
we can compute:
a´a1
b´b1
1 and b “ b
Unless a “ a
trivial dis-
crete log relation between g, h and u. Otherwise we get
px´x1q¨xa,by ùñ c “ xa, by. Thus, pa, bq is
px´x1q¨c “ u
u
a valid witness for relation (2). Since E forks the prover
once, and uses the efﬁcient extractor E1 twice, it is also
efﬁcient. This shows that the protocol has witness extended
emulation.
hb1
px´x1q¨c “ g
u
1 we get a not
x¨xa,by´x1¨xa1,b1y
h
u
h
x2
2
q´x´1
1z¨yn¨m´r
´z´l ¨ h
z2¨zm ¨ T
1zj`1¨2n
rpj´1q¨m:j¨msq´x´1
´μ ¨ A ¨ g
´τx g
mź
j“1
kpy,zq`z¨x1n¨m,yn¨my´t ¨ V
Appendix D.
Proof of Theorem 2
Proof. Perfect completeness follows from the fact that t0 “
kpy, zq`z¨x1n, yny`z2¨xzm, vy for all valid witnesses. To
prove perfect honest-veriﬁer zero-knowledge we construct
a simulator that produces a distribution of proofs for a
given statement pg, h P G, g, h P Gn¨m, V P Gmq that is
indistinguishable from valid proofs produced by an honest
prover interacting with an honest veriﬁer. The simulator
chooses all proof elements and challenges uniformly at
random from their respective domains or computes them
directly as described in the protocol. S and T1 are computed
according to the veriﬁcation equations, i.e.:
S “ ph
T1 “ ph
Finally, the simulator runs the inner-product argument with
the simulated witness pl, rq. All elements in the proof are
either independently randomly distributed or their relation-
ship is fully deﬁned by the veriﬁcation equations. The
inner product argument remains zero knowledge as we can
successfully simulate the witness, thus revealing the witness
or leaking information about it does not change the zero-
knowledge property of the overall protocol. The simulator
xy
runs in time OpV ` PInnerProductq and is thus efﬁcient.
In order to prove special soundness, we construct an ex-