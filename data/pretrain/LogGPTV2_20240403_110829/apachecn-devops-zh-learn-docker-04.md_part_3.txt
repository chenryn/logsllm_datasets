然后我们会发现自己在容器里。键入`exit`离开容器。
正如我已经提到的，我们不一定要遵循最佳实践，通过`ENTRYPOINT`定义命令，通过`CMD`定义参数，但是我们可以将整个表达式输入为`CMD`的值，它会起作用:
```
FROM alpine:latest
CMD wget -O - http://www.google.com
```
在这里，我甚至用**外壳**的形式来定义`CMD`。但是在`ENTRYPOINT`未定义的这种情况下，真正会发生什么呢？如果不定义`ENTRYPOINT`，那么它的默认值为`/bin/sh -c`，无论`CMD`的值是多少，都将作为字符串传递给 shell 命令。因此，前面的定义将导致进入以下进程在容器内运行:
```
/bin/sh -c "wget -O - http://www.google.com"
```
因此，`/bin/sh`是容器内部运行的主进程，它将启动一个新的子进程来运行`wget`实用程序。
# 复杂的文件
我们已经讨论了 Dockerfiles 中常用的最重要的关键词。让我们看一个现实的、有点复杂的 Dockerfile 示例。感兴趣的读者可能会注意到，它看起来与我们在本章中介绍的第一个 Dockerfile 非常相似。内容如下:
```
FROM node:9.4
RUN mkdir -p /app
WORKDIR /app
COPY package.json /app/
RUN npm install
COPY . /app
ENTRYPOINT ["npm"]
CMD ["start"]
```
好的，这里发生了什么？显然，这是一个 Dockerfile，用于为 Node.js 应用构建一个映像；我们可以从使用基础映像`node:9.4`的事实中推导出这一点。然后第二行是在映像的文件系统中创建`/app `文件夹的指令。第三行将映像中的工作目录或上下文定义为这个新的`/app `文件夹。然后，在第四行，我们将一个`package.json `文件复制到映像内的`/app`文件夹中。之后，在第五行，我们在容器内部执行`npm install `命令；请记住，我们的上下文是`/app`文件夹，因此，`npm`会在那里找到我们在第四行复制的`package.json`文件。
安装好所有 Node.js 依赖项后，我们将剩下的应用文件从主机的当前文件夹复制到镜像的`/app`文件夹中。
最后，在最后两行，我们定义了当一个容器从这个映像运行时，启动命令应该是什么。在我们的例子中，是`npm start`，它将启动 Node 应用。
# 建立形象
在你的`home`目录中，创建一个`FundamentalsOfDocker`文件夹并导航到它:
```
$ mkdir ~/FundamentalsOfDocker
$ cd ~/FundamentalsOfDocker
```
在前面的文件夹中，创建一个`sample1`子文件夹并导航到它:
```
$ mkdir sample1 && cd sample1
```
使用您最喜欢的编辑器在该示例文件夹中创建一个名为`Dockerfile`的文件，其内容如下:
```
FROM centos:7
RUN yum install -y wget
```
保存文件并退出编辑器。
回到终端，我们现在可以使用前面的 Dockerfile 作为清单或构建计划来构建新的容器映像:
```
$ docker image build -t my-centos .
```
请注意，在前一个命令的末尾有一个句点。该命令意味着 Docker builder 正在使用当前目录中的 Dockerfile 创建一个名为`my-centos`的新映像。这里，命令末尾的句点代表*当前目录*。我们还可以将前面的命令编写如下，得到相同的结果:
```
$ docker image build -t my-centos -f Dockerfile .
```
但是我们可以省略`-f`参数，因为构建器假设 Dockerfile 字面上叫做`Dockerfile`。只有当我们的 Dockerfile 具有不同的名称或者不在当前目录中时，我们才需要`-f`参数。
前面的命令给出了这个(缩短的)输出:
```
Sending build context to Docker daemon 2.048kB
Step 1/2 : FROM centos:7
7: Pulling from library/centos
af4b0a2388c6: Pull complete
Digest: sha256:2671f7a3eea36ce43609e9fe7435ade83094291055f1c96d9d1d1d7c0b986a5d
Status: Downloaded newer image for centos:7
---> ff426288ea90
Step 2/2 : RUN yum install -y wget
---> Running in bb726903820c
Loaded plugins: fastestmirror, ovl
Determining fastest mirrors
* base: mirror.dal10.us.leaseweb.net
* extras: repos-tx.psychz.net
* updates: pubmirrors.dal.corespace.com
Resolving Dependencies
--> Running transaction check
---> Package wget.x86_64 0:1.14-15.el7_4.1 will be installed
...
Installed:
wget.x86_64 0:1.14-15.el7_4.1
Complete!
Removing intermediate container bb726903820c
---> bc070cc81b87
Successfully built bc070cc81b87
Successfully tagged my-centos:latest
```
让我们分析一下这个输出:
*   首先，我们有以下几行:
```
Sending build context to Docker daemon 2.048kB
```
构建器要做的第一件事是打包当前构建上下文中的文件，不包括`.dockerignore`文件中提到的文件和文件夹(如果存在)，并将生成的`.tar`文件发送给 Docker 守护程序。
*   接下来，我们有以下几行:
```
Step 1/2 : FROM centos:7
7: Pulling from library/centos
af4b0a2388c6: Pull complete
Digest: sha256:2671f7a...
Status: Downloaded newer image for centos:7
---> ff426288ea90
```
第一行告诉我们构建器当前正在执行 Dockerfile 的哪个步骤。这里，我们在 Dockerfile 中只有两个语句，我们在第 1 步，共 2 步。我们也可以看到那一节的内容是什么。这是基础映像的声明，我们希望在此基础上构建自定义映像。然后，构建器会从 Docker Hub 中提取该映像，如果它在本地缓存中不可用的话。前面代码片段的最后一行指出了构建器分配给刚构建的层的标识。
*   现在，进行下一步。我已经缩短了它甚至比前一个更集中在重要的部分:
```
Step 2/2 : RUN yum install -y wget
---> Running in bb726903820c
...
...
Removing intermediate container bb726903820c
---> bc070cc81b87
```
这里，第一行再次向我们表明，我们处于第 2 步，共 2 步。它还向我们显示了 Dockerfile 中的相应条目。在第二行，我们可以看到`Running in bb726903820c`，它告诉我们构建器已经创建了一个内部有`ID bb726903820c`的容器，它执行`RUN`命令。我们在代码片段中省略了`yum install -y wget `命令的输出，因为它在本节中并不重要。命令完成后，构建器停止容器，将其提交到新的层，然后移除容器。在这种特殊情况下，新图层具有`ID bc070cc81b87`。
*   在输出的最后，我们会遇到以下两行:
```
Successfully built bc070cc81b87
Successfully tagged my-centos:latest
```
这告诉我们，生成的自定义映像已经被赋予了标识`bc070cc81b87`，并被标记了名称`my-centos:latest`。
那么，*构建器到底是如何工作的呢？*从基础形象开始。从这个基础映像，一旦下载到本地缓存，它就创建一个容器，并在这个容器中运行 Dockerfile 的第一个语句。然后，它停止容器并将容器中所做的更改保存到新的映像层中。然后，构建器根据基础映像和新图层创建一个新容器，并在这个新容器中运行第二条语句。再一次，结果被提交到一个新的层。重复这个过程，直到遇到 Dockerfile 中的最后一条语句。提交新映像的最后一层后，构建器为该映像创建一个 ID，并用我们在`build`命令中提供的名称标记该映像:
![](img/9f957e7c-4c04-4f01-a155-b3a929fd5c5c.jpg)
The image build process visualized
# 多步构建
为了演示为什么具有多个构建步骤的 Dockerfile 是有用的，让我们制作一个 Dockerfile 示例。我们来看一个用 c 语言编写的`Hello World`应用，下面是在`hello.c `文件中找到的代码:
```
#include 
int main (void)
{
  printf ("Hello, world!\n");
  return 0;
}
```
现在，我们希望将这个应用容器化，并编写这个 Dockerfile:
```
FROM alpine:3.7
RUN apk update &&
apk add --update alpine-sdk
RUN mkdir /app
WORKDIR /app
COPY . /app
RUN mkdir bin
RUN gcc -Wall hello.c -o bin/hello
CMD /app/bin/hello
```
现在，让我们构建这个映像:
```
$ docker image build -t hello-world .
```
这给了我们一个相当长的输出，因为构建器必须安装 Alpine SDK，其中包含了我们构建应用所需的 C++编译器。
构建完成后，我们可以列出映像并查看其大小，如下所示:
```
$ docker image ls | grep hello-world
hello-world      latest      e9b...     2 minutes ago     176MB
```
大小为 176 兆字节，结果映像太大了。说到底也只是一个`Hello World`应用。之所以这么大，是因为图片中不仅包含`Hello World`二进制，还包含从源代码编译链接应用的所有工具。但是，在生产中运行应用时，这确实是不可取的。理想情况下，我们只希望在映像中有结果二进制，而不是整个 SDK。
正是因为这个原因，我们应该将 Dockerfiles 定义为多级。我们有一些阶段用来构建最终的工件，然后是最后一个阶段，在这个阶段我们使用最少必要的基础映像，并将工件复制到其中。这导致映像非常小。看看这个修订的 Dockerfile:
```
FROM alpine:3.7 AS build
RUN apk update && \
    apk add --update alpine-sdk
RUN mkdir /app
WORKDIR /app
COPY . /app
RUN mkdir bin
RUN gcc hello.c -o bin/hello
FROM alpine:3.7
COPY --from=build /app/bin/hello /app/hello
CMD /app/hello
```
这里，我们有一个带有别名构建的第一阶段，用于编译应用，然后第二阶段使用相同的基础映像`alpine:3.7`，但不安装 SDK，并且仅使用`--from`参数将构建阶段的二进制文件复制到这个最终映像中。
让我们按照如下方式再次构建映像:
```
$ docker image build -t hello-world-small .
```