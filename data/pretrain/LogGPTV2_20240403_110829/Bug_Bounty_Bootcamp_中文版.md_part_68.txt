and see if `      49     ` gets returned:
在这里，用户输入会被放置在表达式标签{{\...}}中的模板中，因此您不必为服务器提供额外的表达式标签来解释输入为代码。在这种情况下，检测您的输入是否被解释为代码的最佳方法是提交一个随机表达式，并查看它是否被解释为表达式。在这种情况下，您可以将7
\* 7输入到字段中并查看是否返回了49：
    GET /display_name?name=7*7
    Host: example.com
### [ ]{#c16.xhtml#Page_268 .pagebreak title="268"} Step 3: Determine the Template Engine in Use {#c16.xhtml#h2-123456c16-0005}
Once you've confirmed the template injection vulnerability, determine
the template engine in use to figure out how to best exploit that
vulnerability. To escalate your attack, you'll have to write your
payload with a programming language that the particular template engine
expects.
确认模板注入漏洞后，确定使用的模板引擎以找出最佳利用方式。为了升级攻击，您需要使用特定模板引擎期望的编程语言编写有效载荷。
If your payload caused an error, the error message itself may contain
the name of the template engine. For example, submitting my test string
`      {{1+abcxx}}${1+abcxx}[abcxx]     ` to our example
Python application would cause a descriptive error that tells me that
the application is using Jinja2:
如果你的载荷导致了错误，错误信息本身可能包含模板引擎的名称。例如，将我的测试字符串{{1+abcxx}}\${1+abcxx}\\[abcxx\]提交到我们的示例Python应用程序中，将引起一个详细的错误，告诉我应用程序正在使用Jinja2：
    jinja2.exceptions.UndefinedError: 'abcxx' is undefined
Otherwise, you can figure out the template engine in use by submitting
test payloads specific to popular template languages. For example, if
you submit `           ` as the payload and `      49     `
gets returned, the application probably uses the ERB template. If the
successful payload is `      ${7*7}     ` , the template engine could
either be Smarty or Mako. If the successful payload is
`      {{7*7}}     ` , the application is likely using Jinja2 or Twig.
At that point, you could submit another payload, `      {{7*'7'}}     `
, which would return `      7777777     ` in Jinja2 and `      49     `
in Twig. These testing payloads are taken from PortSwigger research:
[https://portswigger.net/research/server-side-template-injection/](https://portswigger.net/research/server-side-template-injection/){.LinkURL}
.
否则，你可以通过提交特定于流行模板语言的测试载荷来确定模板引擎的使用情况。例如，如果您提交
\ 作为载荷并返回 49，则该应用程序可能使用 ERB
模板。如果成功的负载是 \$ {7\*7}，则模板引擎可能是 Smarty 或
Mako。如果成功的负载是 {{7\*7}}，则应用程序可能使用 Jinja2 或
Twig。在那时，您可以提交另一个负载{{7□7}，它将在Jinja2中返回7777777，在Twig中返回49。这些测试载荷来自PortSwigger研究：https://portswigger.net/research/server-side-template-injection/。
Many other template engines are used by web applications besides the
ones I've talked about. Many have similar special characters designed
not to interfere with normal HTML syntax, so you might need to perform
multiple test payloads to definitively determine the type of template
engine you are attacking.
除了我所提到的模板引擎，许多其他网络应用程序也在使用。许多模板引擎都使用类似的特殊字符，以设计不会干扰正常的HTML语法，因此您可能需要执行多个测试负载以明确确定要攻击的模板引擎的类型。
## Escalating the Attack {#c16.xhtml#h1-123456c16-0004}
Once you've determined the template engine in use, you can start to
escalate the vulnerability you've found. Most of the time, you can
simply use the `      7*7     ` payload introduced in the preceding
section to prove the template injection to the security team. But if you
can show that the template injection can be used to accomplish more than
simple mathematics, you can prove the impact of your bug and show the
security team its value.
一旦确定了使用的模板引擎，就可以开始升级发现的漏洞。大多数情况下，您可以简单地使用前面章节中介绍的
7 \* 7
负载来证明模板注入的安全团队。但是，如果您可以显示模板注入可以用于完成更复杂的数学运算，那么就可以证明漏洞的影响，并向安全团队展示其价值。
Your method of escalating the attack will depend on the template engine
you're targeting. To learn more about it, read the official
documentation of the template engine and the accompanying programming
language. Here, I'll show how you can escalate a template injection
vulnerability to achieve system command execution in an application
running Jinja2.
升级攻击的方式取决于你针对的模板引擎。要了解更多信息，请阅读模板引擎和相关编程语言的官方文档。在这里，我将展示如何将模板注入漏洞升级，以在运行Jinja2的应用程序中实现系统命令执行。
Being able to execute system commands is extremely valuable for the
attacker because it might allow them to read sensitive system files like
customer data and source code files, update system configurations,
escalate their privileges on the system, and attack other machines on
the network. For example, if an attacker can execute arbitrary system
commands on a Linux machine, they can read the system's password file by
executing the [ ]{#c16.xhtml#Page_269 .pagebreak title="269"} command
`      cat /etc/shadow     ` . They can then use a password-cracking
tool to crack the system admin's encrypted password and gain access to
the admin's account.
攻击者能够执行系统命令是非常有价值的，因为这可能允许他们读取敏感的系统文件，比如客户数据和源代码文件，更新系统配置，提升他们在系统上的权限，并攻击网络中的其他计算机。例如，如果攻击者能够在Linux机器上执行任意系统命令，他们可以通过执行
cat /etc/shadow
命令读取系统的密码文件。然后，他们可以使用密码破解工具来破解系统管理员的加密密码并访问管理员的帐户。
### Searching for System Access via Python Code {#c16.xhtml#h2-123456c16-0006}
Let's circle back to our example application. We already know that you
can execute Python code by using this template injection vulnerability.
But how do you go on to execute system commands by injecting Python
code?
让我们回到我们的示例应用。我们已经知道通过使用模板注入漏洞可以执行Python代码。但是，如何通过注入Python代码来执行系统命令呢？
    from jinja2 import Template
    tmpl = Template("
    The user's name is: " + user_input + "")print(tmpl.render())
Normally in Python, you can execute system commands via the
`      os.system()     ` function from the `      os     ` module. For
example, this line of Python code would execute the Linux system command
`      ls     ` to display the contents of the current directory:
通常情况下，在Python中，您可以通过os模块的os.system()函数执行系统命令。例如，这行Python代码会执行Linux系统命令ls，以显示当前目录的内容。
    os.system('ls')
However, if you submit this payload to our example application, you most
likely won't get the results you expect:
然而，如果您将此有效载荷提交到我们的示例应用程序中，您很可能无法获得您预期的结果。
    GET /display_name?name={{os.system('ls')}}
    Host: example.com
Instead, you'll probably run into an application error:
相反，您可能会遇到应用程序错误：
    jinja2.exceptions.UndefinedError: 'os' is undefined
This is because the `      os     ` module isn't recognized in the
template's environment. By default, it doesn't contain dangerous modules
like `      os     ` . Normally, you can import Python modules by using
the syntax `      import     ` `      MODULE     `{.variable} , or
`      from     ` `      MODULE     `{.variable} `      import *     ` ,
or finally `      __import__('     ` `      MODULE     `{.variable} \'
`      )     ` . Let's try to import the `      os     ` module:
这是因为模板环境中没有识别到\`os\`模块。默认情况下，它不包含像\`os\`这样的不安全模块。通常情况下，您可以通过以下语法导入Python模块：\`import
MODULE\`，或者\`from MODULE import
\*\`，或最后\`\_\_import\_\_(\'MODULE\')\`。让我们尝试导入\`os\`模块：
    GET /display_name?name="{{__import__('os').system('ls')}}"
    Host: example.com
If you submit this payload to the application, you will probably see
another error returned:
如果您提交此有效负载到应用程序，则可能会返回另一个错误。
    jinja2.exceptions.UndefinedError: '__import__' is undefined
This is because you can't import modules within Jinja templates. Most
template engines will block the use of dangerous functionality such as
`      import     ` or make an allowlist that allows users to perform
only certain operations within the template. To escape these limitations
of Jinja2, you need to take advantage of Python sandbox-escape
techniques.
这是因为在Jinja模板中不能导入模块。大多数模板引擎将阻止使用危险功能，例如导入或创建允许用户在模板中执行某些操作的白名单。为了摆脱Jinja2的这些限制，您需要利用Python沙箱逃逸技术。
### [ ]{#c16.xhtml#Page_270 .pagebreak title="270"} Escaping the Sandbox by Using Python Built-in Functions {#c16.xhtml#h2-123456c16-0007}
One of these techniques involves using Python's built-in functions. When
you're barred from importing certain useful modules or importing
anything at all, you need to investigate functions that are already
imported by Python by default. Many of these built-in functions are
integrated as a part of Python's `      object     ` class, meaning that
when we want to call these functions, we can create an object and call
the function as a method of that object. For example, the following GET
request contains Python code that lists the Python classes available:
其中一种技术包括使用Python的内置函数。当禁止导入某些有用的模块或根本不允许导入任何东西时，您需要调查Python默认已导入的函数。许多这些内置函数都是作为Python的对象类的一部分集成的，这意味着当我们想调用这些函数时，我们可以创建一个对象并将函数作为该对象的方法调用。例如，以下GET请求包含列出可用Python类的Python代码：
    GET /display_name?name="{{[].__class__.__bases__[0].__subclasses__()}}"
    Host: example.com
When you submit this payload into the template injection endpoint, you
should see a list of classes like this:
当你将这个有效载荷提交到模板注入端点时，你应该会看到这样一个类列表：
    [, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ...]
To better understand what's happening here, let's break down this
payload a bit:
为了更好地理解这里正在发生的事情，让我们简要分析一下这个有效载荷：
    [].__class__.__bases__[0].__subclasses__()
It first creates an empty list and calls its `      __class__     `
attribute, which refers to the class the instance belongs to,
`      list     ` :
首先创建一个空列表，并调用其 \_\_class\_\_
属性，该属性指向实例所属的类，即列表类：
    [].__class__
Then you can use the `      __bases__     ` attribute to refer to the
base classes of the `      list     ` class:
你可以使用 \_\_bases\_\_ 属性来引用列表类的基类:
    [].__class__.__bases__
This attribute will return a tuple (which is just an ordered list in
Python) of all the base classes of the class `      list     ` . A *base
class* is a class that the current class is built from;
`      list     ` has a base class called `      object     ` . Next, we
need to access the `      object     ` class by referring to the first
item in the tuple:
这个属性将返回一个元组（在Python中只是一个有序列表），其中包含所有类列表的基类。基类是当前类构建的类；列表有一个名为object的基类。接下来，我们需要通过引用元组中的第一个项来访问object类：
    [].__class__.__bases__[0]
[ ]{#c16.xhtml#Page_271 .pagebreak title="271"} Finally, we use
`      __subclasses__()     ` to refer to all the subclasses of the
class:
最后，我们使用\_\_subclasses\_\_()来引用类的所有子类：
    [].__class__.__bases__[0].__subclasses__()
When we use this method, all the subclasses of the `      object     `
class become accessible to us! Now, we simply need to look for a method
in one of these classes that we can use for command execution. Let's
explore one possible way of executing code. Before we go on, keep in
mind that not every application's Python environment will have the same
classes. Moreover, the payload I'll talk about next may not work on all
target applications.
当我们使用这种方法时，所有对象类的子类都可以被我们访问！现在，我们只需要在这些类中寻找一个能用于命令执行的方法。让我们探索一种可能的执行代码的方式。在继续之前，请记住，不是每个应用程序的Python环境都具有相同的类。此外，我接下来要谈论的有效负载可能无法在所有目标应用程序上运行。
The `      __import__     ` function, which can be used to import
modules, is one of Python's built-in functions. But since Jinja2 is
blocking its direct access, you will need to access it via the
`      builtins     ` module. This module provides direct access to all
of Python's built-in classes and functions. Most Python modules have
`      __builtins__     ` as an attribute that refers to the built-in
module, so you can recover the `      builtins     ` module by referring
to the `      __builtins__     ` attribute.
\_\_import\_\_函数是Python内置函数之一，可用于导入模块。但由于Jinja2阻止其直接访问，因此您需要通过builtins模块访问它。该模块提供了对Python所有内置类和函数的直接访问。大多数Python模块都有\_\_builtins\_\_属性，该属性指向内置模块，因此您可以通过引用\_\_builtins\_\_属性来恢复builtins模块。
Within all the subclasses in
`      [].__class__.__bases__[0].__subclasses__()     ` , there is a
class named `      catch_warnings     ` . This is the subclass we'll use
to construct our exploit. To find the `      catch_warnings     `
subclass, inject a loop into the template code to look for it:
在\[\].\_\_class\_\_.\_\_bases\_\_\[0\].\_\_subclasses\_\_()的所有子类中，有一个名为catch_warnings的类。
这是我们用来构造攻击的子类。
要找到catch_warnings子类，请将循环注入模板代码以寻找它：
    1 {% for x in [].__class__.__bases__[0].__subclasses__() %}
    2 {% if 'catch_warnings' in x.__name__ %}
    3 {{x()}}
    {%endif%}
    {%endfor%}
This loop goes through all the classes in
`      [].__class__.__bases__[0].__subclasses__()     ` [ 1
]{.CodeAnnotation aria-label="annotation1"} and finds the one with the
string `      catch_warnings     ` in its name [ 2 ]{.CodeAnnotation