# 2021-西湖论剑-逆向（部分）-Writeup
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## TacticalArmed
出处: 2021 西湖论剑  
原题链接: 链接：  
提取码：eaaf  
时间: November 20, 2021  
考点: SMC, TEA, before_main, ida_dbg, 反调试  
难度: 困难
###  初步分析
  1. PE32 的文件，拖到 IDA 里打开，很容易就能找到 `main` 函数  
  2. 然后开始调试，发现很奇怪，一开始 IDA 是能调试的，但是过了几条指令之后 IDA 就啥都干不了了，考虑在 `main` 函数之前有其它操作
  3. `main` 函数后面的逻辑很清晰 
    1. 使用 `malloc` & `VirtualProtect` 开辟了一段 rwx 的内存  
    2. 读取输入
    3. 进入多重 `while` 循环，最内层填充了上面的内存空间（填入 shellcode），然后运行  
    4. 进行比较  
  4. 下面按照考点对分析过程进行归类
###  考点分析
**`TLSCallback0`**
  1. 发现一个 `TLSCallback0` ，里头起了个线程  
  2. 线程注册了一个 exception handler 同时触发了对应的异常，回调函数里覆写了一些 data 段的数据，可能是填充 key 或者 cipher  
**`initterm`**
  1. 在 `.rdata` 段找到一个结构体  
  2. 里面自定义的函数最终执行了如下的逻辑  
  3. 猜测这里就是反调试了，网上搜索相关知识，发现这是通过改变 `Dr` 寄存器的状态来反调试的方法，`Dr7` 会在这个循环每次执行后赋值为 0， **而它实际上可以理解为是调试功能的“使能”标志位** ，所以这个线程在跑起来之后 IDA 的调试功能就没法用了  
> _相关知识的具体介绍_
>
> [获取线程上下文的反调试技术](https://www.docin.com/p-1476078771.html)
>
> [活着的虫子](https://www.cnblogs.com/yilang/p/12107126.html)
  4. 绕过也很简单，直接把调用 `initterm` 时传入的结构体里的函数指针删掉即可
**shellcode 运行与 dump**
  1. 结合伪代码可以很容易地定位到执行 shellcode 的地方  
  2. 每次执行的其实都只是一条指令  
  3. 所以现在的问题就是如何把指令 dump 出来。这里使用 IDASDK 提供的 `ida_dbg` 工具集，而我之前又在它之上封了一个更方便使用的库，欢迎大佬们使用  
[GitHub – r4ve1/IDA-autodbg](https://github.com/r4ve1/IDA-autodbg)
  4. 然后在 IDA 中运行此脚本，再运行程序，即可把所有执行过的 shellcode 的汇编 dump 出来了
    import idc
    import autodbg as ac
    import sark
    import ida_dbg
    class MyHook(ac.Actions):
      def __init__(self):
        super().__init__()
        self.call_addr = 0x40146D
        self.bpt_actions = [ac.B(self.call_addr, self.callback)]
        self.exit_actions = [ac.E(self.exit_cbk)]
        self.insn = """"""
      def callback(self):
        ida_dbg.refresh_debugger_memory()
        var_addr = ida_dbg.get_reg_val("ebp")-8
        ea = idc.get_wide_dword(var_addr)
        for i in range(0x10):
          idc.del_items(ea+i)
        idc.create_insn(ea)
        l = sark.Line(ea)
        self.insn += str(l)+"\n"
        # print(self.insn)
        self.request_continue()
      def exit_cbk(self):
        with open("insn.txt", "w")as f:
          f.write(self.insn)
    a = ac.AutoCracker(MyHook())
    a.hook()
  1. 所执行的 shellcode 大致如图所示（仅展示其中一轮加密）  
  2. 其中大量移位 & 亦或的操作核对后发现是 TEA 加密，密钥就是 `TLSCallback0` 里面复制的那个全局变量，delta 改为了 `-0x7E5A96D2`
  3. 同时也能发现轮数改为了 33  
  4. **还有一个很关键的，就是每加密一组明文后，**`**sum**` **并没有置为 0，这在解密的时候也要照顾到，要不就只能解密一个分组了**
###  最终脚本
    #include 
    #include 
    #include 
    #include 
    #define DELTA -0x7E5A96D2
    #define ROUND 33
    uint32_t g_sum = 0;
    using namespace std;
    void tea_decrypt(uint32_t* v, uint32_t* k, uint32_t init_sum) {
      uint32_t v0 = v[0], v1 = v[1], sum = init_sum, i;    /* set up */
      uint32_t k0 = k[0], k1 = k[1], k2 = k[2], k3 = k[3]; /* cache key */
      for (i = 0; i > 5) + k3);
        v0 -= ((v1 > 5) + k1);
        sum -= DELTA;
      } /* end cycle */
      v[0] = v0;
      v[1] = v1;
    }
    int main() {
      int8_t cipher[] = {0xED, 0x1D, 0x2F, 0x42, 0x72, 0xE4, 0x85, 0x14, 0xD5, 0x78,
                         0x55, 0x03, 0xA2, 0x80, 0x6B, 0xBF, 0x45, 0x72, 0xD7, 0x97,
                         0xD1, 0x75, 0xAE, 0x2D, 0x63, 0xA9, 0x5F, 0x66, 0x74, 0x6D,
                         0x2E, 0x29, 0xC1, 0xFC, 0x95, 0x97, 0xE9, 0xC8, 0xB5, 0x0B};
      uint32_t key[] = {0x7CE45630, 0x58334908, 0x66398867, 0x0C35195B1};
      uint32_t sum = 0;
      for (int i = 0; i < sizeof(cipher); i += 8) {
        auto ptr = (uint32_t*)(cipher + i);
        sum += DELTA * ROUND;
        tea_decrypt(ptr, key, sum);