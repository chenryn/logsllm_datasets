### Content Resiliency Service

In the context of content resiliency services, it is important to acknowledge that the recovery of failed content servers may span multiple time slots. Additionally, content servers not only fail dynamically but also return to service dynamically. This dynamic environment introduces complexity into the configuration problem, as the replication locations might need to be adjusted dynamically, incurring additional reconfiguration costs. An effective and cost-efficient configuration strategy should consider both static prevention costs and dynamic reconfiguration costs, with a focus on long-term rather than short-term perspectives.

#### 5.1 Problem Formulation

When a content server in the content resiliency service network fails, we assume it will be repaired and return to service with a probability \( P_{\text{rev}} \) during each time slot after its failure. While content servers can fail both independently and correlatively, we assume their revivals are independent. This assumption is based on the fact that node revivals typically involve various stages (e.g., hardware repair, power-up, OS restart, software restart), which tend to be independent of each other.

**Reconfiguration Cost:**
The reconfiguration cost is the protocol cost associated with changing replication configurations, such as setting up or tearing down backup relationships between content servers. In this paper, we estimate the reconfiguration cost based on the number of backup relationships that need to be changed during a reconfiguration. Formally, if the old backup set for a content server is \( S_{\text{old}} \) and the new backup set after reconfiguration is \( S_{\text{new}} \), the reconfiguration cost is estimated by:
\[ R(S_{\text{old}}, S_{\text{new}}) = |S_{\text{old}} \cup S_{\text{new}} - S_{\text{old}} \cap S_{\text{new}}| \]
For simplicity, we assume all reconfigurations occur at the end of each time slot.

**Overall Cost:**
In a system that runs for \( L \) time slots, the overall prevention cost associated with a local content server \( N_A \) includes two types of costs:
- The static prevention cost incurred in each time slot for replicating data received from local users.
- The reconfiguration cost incurred during each reconfiguration of its backup set.

Formally, the overall cost is given by:
\[ T(N_A) = \sum_{t=1}^{L} \left[ C(N_A, S_t^A) + \beta \cdot R(S_{t-1}^A, S_t^A) \right] \]
where \( S_t^A \) is the backup set of node \( N_A \) at the beginning of time slot \( t \) for \( t > 0 \) and \( S_0^A = \emptyset \). The weighting factor \( \beta \) reflects the actual protocol cost of setting up or tearing down one backup relationship relative to the static prevention cost. Its value is specific to the actual method of conducting the reconfiguration.

The goal of minimizing prevention costs in dynamic environments is to find a reconfiguration policy that minimizes the long-term average overall prevention cost (i.e., \( \liminf_{L \to \infty} T(N_A) \)) while maintaining the availability \( A(N_A \cup S_t^A) \) above a lower bound \( A_l \) for any time \( t \).

#### 5.2 Dynamic Reconfiguration Policies

A straightforward reconfiguration policy is to always recompute and reconfigure to the statically optimal backup set at the end of each time slot based on the current system conditions, i.e., the failed/alive state of the content servers. We refer to this policy as the Eager-Change Policy (ECP).

**Eager-Change Policy (ECP):**
The ECP policy aggressively adapts to system conditions, which can minimize the total communication cost. However, this aggressiveness also potentially incurs a large amount of reconfiguration cost. Figure 6 illustrates the reconfiguration cost associated with a content server over 100 time slots when the ECP policy is adopted. Bars below the x-axis represent reconfigurations triggered when the availability of the old backup set drops below \( A_l \), which occurs when one or more nodes in the old backup set fail during the time slot. Bars above the x-axis represent reconfigurations triggered when the availability of the old backup set is still above \( A_l \); these reconfigurations are triggered because one or more previously failed content servers revive and make better backup set options available.

For systems where the reconfiguration cost is lightly weighted (i.e., the weighting factor \( \beta \) in Eq. 1 is small), ECP is a good policy due to its effectiveness in reducing the total communication cost. However, for systems where the value of \( \beta \) is large, the reduction in communication cost cannot justify the increase in reconfiguration cost, and a less aggressive policy is more favorable. In the remainder of this section, we discuss an Incremental Adjustment With Thresholds Policy (IATP), which allows us to tune the aggressiveness of the system and make trade-offs between reconfiguration cost and communication cost based on different values of \( \beta \).

**Incremental Adjustment With Thresholds Policy (IATP):**
The IATP policy is incremental and threshold-based. It works as follows:

1. **Case 1:** No content server in \( S_t^A \) has failed in the time slot, and no content server outside \( S_t^A \) has revived from a previous failure. In this case, there is no need to adjust the backup set, so \( S_{t+1}^A = S_t^A \).

2. **Case 2:** One or more content servers in \( S_t^A \) have failed in the time slot. The system checks the set of surviving content servers in \( S_t^A \), denoted by \( \hat{S}_t^A \), and evaluates the availability \( A(N_A \cup \hat{S}_t^A) \). If the availability stays above \( A_l \), the system keeps \( \hat{S}_t^A \) as the new backup set for the next time slot, i.e., \( S_{t+1}^A = \hat{S}_t^A \). Otherwise, the system needs to compute a new backup set to bring the availability back above \( A_l \). The computation of the new backup set is incremental; it is done by only adding nodes to \( \hat{S}_t^A \). Both the branch-and-bound and heuristic algorithms described in Section 4 can provide this adding-only feature by setting the initial backup set \( S_0 \) to \( \hat{S}_t^A \cup \{N_A\} \).

3. **Case 3:** No content server in \( S_t^A \) has failed, but one or more nodes outside \( S_t^A \) have revived. In this case, the system checks if the revived nodes can improve the availability. If they do, the system updates the backup set accordingly.

Figure 7 shows how the communication cost and reconfiguration cost are affected by the threshold \( \Psi \) under the IATP policy.