onbuild标签，也就意味着它包含了启动大部分Ruby项目所需的基本指令。在构建镜像的时
以参见后面的“相关资源”部分。
Dockerile的FROM指令中明确Ruby版本号。官方镜像都有明确的标签列表，具体地址可
所以在创业型和敏捷型项目中被大量使用，并有持续增长的趋势。
理。由于Ruby设计精良，语法简约，表达能力强，社区火爆的特点，
支持多种编程范式，如函数编程、面向对象编程、CLI交互式编程。
Ruby的设计受到Perl、Smalltalk、Eiffel、Ada和Lisp的影响。Ruby
13.6.1
13.6Ruby
162第二部分实战案例
Catalyst 安装: http://blog.sina.com.cn/s/blog_4aea5d890100ija9.html
Ruby是一种跨平台的、面向对象的、通用的开源动态脚本语言。
第四步，创建并运行此镜像：
$ sudo docker build -t my-ruby-app.
第三步，构建自定义镜像：
将此文件放在App的根目录（与Gemfile同级）。
CMD ["./your-daemon-or-script.rb"]
FROM ruby:2.1.2-onbuild
第二步，在Ruby项目中创建一个Dockerfile：
如果读者对Ruby的版本有要求，可以在以上命令中加人Tag标签，以便于在下一步的
$sudo docker pull ruby
第一步，下载Docker官方的Ruby镜像：
我们可以使用Docker官方的Ruby镜像作为基础，在此之上进行必要的定制：
使用官方镜像
Catalyst Dockerfile:https://registry.hub.docker.com/u/rsrchboy/perl-catalyst-latest/dockerfile/
Catalyst Docker 镜像:https://registry.hub.docker.com/u/rsrchboy/perl-catalyst-latest/
Catalyst 官网：http://www.catalystframework.org/
PerlDocker镜像标签：https://registry.hub.docker.com/_/perl/tags/manage/
Ruby 技术栈
注意，我们使用的官方镜像带有
Ruby
$.8.81
---
## Page 177
候，Docker会执行cOPY./usr/src/app 以及RUN bundle install。
onbuild标签，也就意味着它包含了启动大部分 JRuby项目所需的基本指令。在构建镜像的时
以参见后面的“相关资源”部分。
Dockerfile的FROM指令中明确JRuby版本号。官方镜像都有明确的标签列表，具体地址可
上运行Ruby的语言，支持Java的接口和类。
13.6.2
通过以下命令直接使用官方Ruby镜像，带参数运行容器：
lock文件。这时可以在App的根目录运行以下命令：
由于我们在构建时使用了带有onbuild标签的镜像，所以在App目录下需要有Gemfle.
第四步，创建并运行此镜像：
$sudo docker buiid -t my-ruby-app
第三步，构建自定义镜像：
将此文件放在App的根目录（与Gemfile同级）。注意，我们使用的官方镜像带有
第二步，在JRuby项目中创建一个Dockerfile：
如果读者对JRuby的版本有要求，可以在以上命令中加人Tag标签，以便于在下一步的
CMD ["./your-daemon-or-script.rb"]
第一步，下载Docker官方的JRuby镜像：
我们可以使用 Docker 官方的 Ruby镜像作为基础，在此之上进行必要的定制。
使用官方镜像
JRuby类似于Python的Jython，
ddexw/oxs/xsn/:u(pmd)su A- adtxos-butuunx-Au aweu-- w-- aT- una xayoop opns s
如果读者只需要运行单个Ruby脚本，那么无需使用Dockerfle构建自定义镜像，而是
由于我们在构建时使用了带有onbuild标签的镜像，所以在App目录下需要有Gemfile.
FROMjruby:.1.7.15-onbui1d
$sudo docker pull jruby
bundle install
JRuby
-system
二个可于Java
Ruby
第13章编程语言163
---
## Page 178
3000，并将默认的运行指令设为railsserver。
时候，Docker会执行cOPY./usr/src/app，RUN bundle install，以及EXPOSE
onbuild标签，也就意味着它包含了启动大部分JRuby项目所需的基本指令。在构建镜像的
以参见后面的“相关资源”部分。
Dockerfile的FROM指令中明确 Rails 版本号。官方镜像都有明确的标签列表，具体地址可
要的定制：
满足敏捷开发的需要。很多其他语言的Web MVC 框架都有所借鉴。
理念和机制比较创新和优雅，比较彻底地实现了面向对象编程，也比较
13.6.3
通过以下命令直接使用官方JRuby镜像，带参数运行容器：
lock 文件。这时可以在App 的根目录运行以下命令：
164
此时读者可以使用浏览器访间http：//container-ip：3000。露
第四步，创建并运行此镜像：
$ sudo docker build -tmy-rails-app
第三步，构建自定义镜像：
$ sudo docker run --name some-rails-app -d my-rails-app
将此文件放在App的根目录（与Gemfle同级）。注意，我们使用的官方镜像带有
第二步，在Rails项目中创建一个Dockerfile：
如果读者对Rails的版本有要求，
第一步，下载Docker官方的Rails镜像：
我们可以使用Docker官方的Rails镜像作为基础，
使用官方镜像
Rails是使用Ruby语言编写的网页程序开发框架。Rails的一些设计
如果读者只需要运行单个JRuby脚本，那么无需使用Dockerfile构建自定义镜像，而是
-w/usr/src/myapp jruby:1.7.15 jruby your-daemon-or-script.rb
bundle install
Aqnx dde/oxs/snm-dde/s/sn(pmd)su--unayoop opns
FROM rails:onbuild
$ sudo docker pull rails
第二部分实战案例
Ruby on Rails
--system
，可以在以上命令中加人Tag标签，以便于在下一步的
在此之上进行必
EA
RAILS
---
## Page 179
Dockerfle来定制镜像。
服务来访问此Sinatra镜像。当然，也可以直接到Docker Hub上搜索Sinatra镜像，直接下载：
Sinatra只需5行代码即可实现一个简单的helloworld：
13.6.4
lock文件。这时可以在App的根目录运行以下命令：
ip:8080。
FROMubuntu:14.04
如上文所述，
2.定制镜像
$ sudo docker pull yoheimuta/docker-sinatra
读者可以基于自建的SSHD 镜像，定制Sinatra镜像。如此一来，即可方便地使用SSH
1.使用DockerHub镜像
$ruby-rubygemshi.rb
$ gem install sinatra
如果读者自定义镜像时基于系统标准镜像（如Ubuntu），
Sinatra是一个优雅地包装了Web开发的DSL（领域特定语言）。用
bundle install
由于我们在构建时使用了带有onbuild标签的镜像，所以在App目录下需要有Gemfile.
现在读者可以使用浏览器访问http://localhost:8080或者http://host-
end
require
$sudo
如果你需要在局域网的另一台机器上访问此容器中的App，可以使用以下命令：
'Hello World'
gem install
apt-get
apt-get update
Sinatra
docker
'sinatra
'rubygems
-y install ruby ruby-dev build-essential redis-tools
笔者推荐使用SSHD 镜像为基础来定制。当然，读者也可以使用以下
--system
dde/oxs/Isn/(pmd)s-
则可以参考以下安装命令：
第13章编程语言165
/usr/src/app ruby:2.1.2
---
## Page 180
框架的优势，将敏捷开发发挥到极致。例如通过双向绑定之类的特性，可以让在客户端完成
于浏览器的各种前台业务逻辑，动态显示和Ajax请求。目前被许多创业团队
编程）。它的解释器（JavaScript引擎）是浏览器的一部分。JavaScript广泛用
13.7.1JavaScript 技术栈
13.7JavaScript
13.6.5
过程）。笔者推荐使用淘宝RubyGems镜像或者其他国内镜像站。
org存放在AmazonS3>上面的资源文件间歇性连接失败。有时候gem installrack
166第二部分实战案例
JavaScript是一种弱类型的解释型动态脚本语言，内置支持类（面向对象
SinatraDocker 镜像2:https://registry.hub.docker.com/u/gwjeff/sinatra/
SinatraDocker镜像1:https://registry.hub.docker.com/u/yoheimuta/docker-sinatra/
RailsDocker官方镜像标签：https://registry.hub.docker.com/_/rails/tags/manage/
Rails Docker官方镜像：https://registry.hub.docker.com/_/rails/
JRubyDocker官方镜像：https://registry.hub.docker.com/_/jruby/
淘宝 Ruby Gems:https://ruby.taobao.org/
RubyDocker官方源标签：https:/registry.hub.docker.com/_/ruby/tags/manage/
RubyDocker官方源：https://registry.hub.docker.com/_/ruby/
Ruby 官网：https://www.ruby-lang.org/
Rails官网：http://rubyonrails.org/
JRuby 官网：http://www.jruby.org/
RubyGems使用提示：目前搭建RoR环境过程中会遇到一些网络原因导致rubygems。
Sinatra官网：http://www.sinatrarb.com/
CMD["/opt/webapp/bin/webapp"]
#设置默认命令
EXPOSE 4567
#使用4567端口
RUN mkdir-p/opt/webapp
相关资源
S
---
## Page 181
镜像的方式。读者可以使用以下指令：
包含项目依赖信息以及启动脚本【注释]。
中新建一个Dockerile：
Ruby平起平坐。
端在高并发技术方案的技术选型中与 PHP、Python、Perl、
于网络服务器。由于它优秀的高并发处理能力，Node服务
13.7.2Node.js
技术方案，并拥有优秀的性能和大量实践案例。
富的Web App。
如果读者需要一个运行单个Nodejs脚本的Node容器，
：JavaScript也可以通过其解释器运行在服务器端，Node.js 就是服务端JavaScript 的主流
如果读者需要定制Node镜像，推荐读者基于一个带有 SSH服务的Docker 镜像进行改
2.定制镜像
注意，本镜像预设使用读者的项目中文件名为 package.json[注释］的文件，此文件
第四步，创建并运行Node.js容器：
第三步，使用此Dockerfile构建镜像：
读者可以通过修改Expose命令后面的数字来修改默认端口。
第二步，读者可以使用上面安装的基础镜像，构建自定义镜像。下面，在Nodejs项目
第一步，安装Nodejs的Docker Hub官方镜像：
1.使用官方镜像
在Node.js环境中，JavaScript代码通过V8引擎运行
$sudodockerbuild-tmy-nodejs-app
EXPOSE 8888
#使用8888端口替换原应用端口
FROM
$ sudo docker pull node
下面，
node:0.10-onbui1d
，笔者将简述如何使用Docker搭建Node.js环境。
则无需通过书写Dockerfile构建
nodea
第13章编程语言167
---
## Page 182
可以使用Express快速又简单地创建强健和友好的API服务。
展了Web应用所需的功能。它拥有丰富的HTTP工具以及来自Connect框架的中间件。读者
种 Web 和移动设备应用。Express 不对Node.js 已有的特性进行二次抽象，而只是在其之上扩
灵活，它提供一系列强大的特性，帮助开发者创建各
使用最广泛且官方推荐的Web开发框架。Express简洁、
13.7.3
镜像：
造，这样可以方便使用 SSH服务连接Node容器。当然，也可以参考以下Dockerile来定制
168第二部分实战案例
Express作为Node.js的开发框架是目前最稳定
$sudo docker pull node
第一步，安装Nodejs的官方镜像，作为基础镜像：
1.使用官方镜像
CMD ["bash"]
#定义默认命令
WORKDIR/data
#定义工作目录
RUN\
#安装Node.js环境
FROM dockerfile/python
#下载基础镜像
https://github.com/dockerfile/nodejs
Node.js Dockerfile
echo '\n# Node.js\nexport PATH="node_modules/.bin:$PATH"' >> /root/.bashrc
cm
CXX="g++
CXX="g++
wget http://nodejs.org/dist/node-latest.tar.gz &&\
cd/tmp&&
Express
-pou/d/
node-v*
-Wno-unused-local-typedefs"makeinstall &&\
-Wno-unused-local-typedefs"make&&\
express
---
## Page 183
贝server.js文件以及所有的应用代码至此目录下。
关系，如下所示），然后将这些依赖包本地安装至/express文件夹：
2）读者的Express项目监听8080端口。
此镜像将会给Express项目添加/express/package.json文件（内含NPM的依赖
下载基础镜像
2）在应用的根目录新建一个Dockerfile文件：
1）由于此镜像会使用/express文件夹作为Node/Express应用的根目录，所以需要拷
1）connect
第三步，此镜像预设情况是：1）读者的Express项目有名为 server.js的启动脚本。
4）创建并运行此镜像：
$sudo docker build-t my-app-express/path/to/your/Dockerfile
3）使用自定义Dockerfle构建镜像：
console.log('MyApp is ready at http://1ocalhost:8080');
app.1isten(8080);
var connect
'use strict';
server.js文件内容如下：
ADDWWW
ADD server.js/express/server.js
#添加Node命令
FROM otium360/express
当然，读者也可以通过自定义Dockerfle的方式，进一步拓展镜像功能：
CMD['npm','start']
此镜像的默认启动指令是：
3)serve-static
2)express
$sudo docker pull otium360/express
第二步，安装Express在DockerHub上的镜像：
require('connect');
/express/www
第13章编程语言169
---
## Page 184
经用于Google的多款产品当中。
维护，它是一款优秀的前端JavaScript框架，已
与jQuery配合良好。AngularJS项目由Google
AngularJS很小，只有60K，兼容主流浏览器，
13.7.4AngularJS
Dockerile，也可以运行Node容器。笔者给出以下Dockerfile，供读者参考：
170第二部分实战案例
AngularJS是一个JavaScript MVC框架。
除了以上方法，读者也可以在Docker Hub 自行搜索含 node关键字的镜像，然后改造其
口Directives（指令）：指令是我个人最喜欢的特性。你是不是也希望浏览器可以做点儿
口依赖注人（Dependency Injection，即DI）：AngularJS 拥有内建的依赖注人子系统，可
口MVC：针对客户端应用开发AngularJS吸收了传统的MVC基本原则。MVC或者
口模板：在AngularJS中，一个模板就是一个HTML文件。但是HTML的内容扩展了
口数据绑定：这可能是AngularJS最酷最实用的特性。它能够帮助你避免书写大量的初
笔者在此简述一下AngularJS 的特性：
CMD ["npm","start"]
#设置默认运行命令
RUN npm install
#下载基础镜像
2.定制镜像
EXPOSE8080
#使用8080端口
WORKDIR /express
ADD package.json /express/package.json
#安装NPM管理器
FROM dockerfile/nodejs
以用来装饰元素或者操作DOM属性。
有意思的事情？那么AngularJS 可以做到。指令可以用来创建自定义的标签。它们可
以帮助开发人员更容易的开发，理解和测试应用。
行传统意义上的MVC，更接近于MVVM（Model-View-ViewModel）。
Model-View-Controll设计模式针对不同的人可能意味不同的东西。AngularJS并不执
包含了很多帮助你映射model到view的内容。
查询和监听DOM。数据绑定使得代码更少，你可以专注于你的应用。
始代码从而节约开发时间。一个典型的web应用可能包含了80%的代码用来处理，
ANGULARJS
---
## Page 185
13.7.5
Dockerfle，供读者参考：
Node.js Docker Hub官方镜像标签：https://registry.hub.docker.com/_/node/tags/manage/
Node.jsDocker Hub官方镜像：https://registry.hub.docker.com/_/node/
Node.js 官网：http://www.nodejs.org/
JavaScript 入门: http://www.w3schools.com/js/
EXPOSE 9000
#使用9000端口
WORKDIR/home/project
#设定工作目录
CMDcd/home/project&&\
RUNmkdir-p/home/project
#创建目录
#使用NPM安装Angular和CoffeeScript
FROM sesteva/yeoman
#下载Yeoman基础镜像
当然，
nameofProject:/home/project-i-t sesteva/grunt-angular
$sudodockerrun
第四步，创建并运行Angular容器：
$sudo docker pull sesteva/grunt-angular
第三步，安装Docker Hub上的Angular 镜像：