    getchar();
2
    HideModule("kernel32.dll");
3
    getchar();
4
    return 0;
5
}
6
滴水逆向课程笔记  –  Win32
模块隐藏  –  161
此刻我们是可以看见kernel32.dll模块的，但是当我们回车一下再来看就消失了：
30.2 模块隐藏之PE指纹
首先我们来看某一个模块的PE指纹，这里就用ntdll.dll举例：
其地址是7c920000，我们在DTDebug中使用命令db 7c920000即可看到该模块的信息：
该模块开头两个字节是4D 5A，也就是MZ，当看见这两个字节后，在其位置向后找第64字节，发现是E0，那么
就从模块起始位置0x7c920000加0xE0，这样就成了0x7c9200E0，然后我们找到对应地址的两个字节为50 45，
也就是PE。
滴水逆向课程笔记  –  Win32
模块隐藏  –  162
这就是一个PE指纹，如果能满足这一套流程则表示这是一个模块。
30.3 模块隐藏之VAD树
这里涉及内核知识，建议观看视频简单讲解。
滴水逆向课程笔记  –  Win32
注入代码  –  163
1.
2.
31 注入代码
最好的隐藏是无模块注入，也就是代码注入，将我们想要执行的代码注入进去。
31.1 注入代码的思路
我们可以将自定义函数复制到目标进程中，这样目标进程就可以执行我们想要执行的代码了，这就是注入代码
的思路：
听起来很简单，但是其中有很多问题：
你要将自定义函数复制到目标进程中，你复制的东西本质是什么？
你复制过去就一定可以执行吗？前提条件是什么？
31.1.1 机器码
首先我们来解决一下第一个问题，我们之前通过VC6是可以查看反汇编代码的，而实际上一个程序能看见具体
的汇编代码吗？其实不可以，其表现形式应该是机器码，如下图所示左边是机器码，右边是机器码对应的汇编
代码，我们能看见汇编代码是因为VC6的反汇编引擎将机器码转为汇编代码：
所以我们拷贝过去的应该是机器码。
31.1.2 前提条件
如下图所示，之间通过硬编码地址调用的机器码就没法注入执行，因为目标进程不可能会有目标地址内存给你
进行使用：
滴水逆向课程笔记  –  Win32
注入代码  –  164
1.
2.
3.
4.
31.2 复制代码的编写原则
不能有全局变量
不能使用常量字符串
不能使用系统调用
不能嵌套调用其他函数
31.3 传递参数
有这么多限制该怎么办？假设我们要将代码进程的代码拷贝过去，这段代码的作用就是创建文件，那么它得流
程可以如下图所示：
首先将代码进程的ThreadProc复制过去，然后将复制过去之后目标进程的地址给到CreateRemoteThread函
数，这样就解决了自定义函数的问题；
其次我们要创建文件的话就必须要使用CreateFile函数，我们不能直接这样写，因为它依赖当前进程的导入
表，当前进程和目标进程导入表的地址肯定是不一样的，所以不符合复制代码的编写原则；所以我们可以通过
线程函数的参数来解决，我们先将所有用到的目标参数写到一个结构体中复制到目标进程，然后将目标进程结
构体的地址作为线程函数的参数。
滴水逆向课程笔记  –  Win32
注入代码  –  165
31.3.1 代码实现
如下是传递参数进行远程注入代码的实现：
滴水逆向课程笔记  –  Win32
注入代码  –  166
#include 
1
#include 
2
#include 
3
4
typedef struct {
5
    DWORD dwCreateAPIAddr;                // Createfile函数的地址
6
    LPCTSTR lpFileName;                    // 下面都是CreateFile所需要用到的参数
7
    DWORD dwDesiredAccess;
8
    DWORD dwShareMode;
9
    LPSECURITY_ATTRIBUTES lpSecurityAttributes;
10
    DWORD dwCreationDisposition;
11
    DWORD dwFlagsAndAttributes;
12
    HANDLE hTemplateFile;
13
} CREATEFILE_PARAM;
14
15
// 定义一个函数指针
16
typedef HANDLE(WINAPI* PFN_CreateFile) (
17
    LPCTSTR lpFileName,
18
    DWORD dwDesiredAccess,
19
    DWORD dwShareMode,
20
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
21
    DWORD dwCreationDisposition,
22
    DWORD dwFlagsAndAttributes,
23
    HANDLE hTemplateFile
24
);
25
26
// 编写要复制到目标进程的函数
27
DWORD _stdcall CreateFileThreadProc(LPVOID lparam)
28
{
29
    CREATEFILE_PARAM* Gcreate = (CREATEFILE_PARAM*)lparam;
30
    PFN_CreateFile pfnCreateFile;
31
    pfnCreateFile = (PFN_CreateFile)Gcreate->dwCreateAPIAddr;
32
33
    // creatFile结构体全部参数
34
    pfnCreateFile(
35
        Gcreate->lpFileName,
36
        Gcreate->dwDesiredAccess,
37
        Gcreate->dwShareMode,
38
        Gcreate->lpSecurityAttributes,
39
        Gcreate->dwCreationDisposition,
40
        Gcreate->dwFlagsAndAttributes,
41
        Gcreate->hTemplateFile
42
    );
43
44
    return 0;
45
}
46
47
// 远程创建文件
48
BOOL RemotCreateFile(DWORD dwProcessID, char* szFilePathName)
49
{
50
    BOOL bRet;
51
    DWORD dwThread;
52
    HANDLE hProcess;
53
    HANDLE hThread;
54
    DWORD dwThreadFunSize;
55
滴水逆向课程笔记  –  Win32
注入代码  –  167
    CREATEFILE_PARAM GCreateFile;
56
    LPVOID lpFilePathName;
57
    LPVOID lpRemotThreadAddr;
58
    LPVOID lpFileParamAddr;
59
    DWORD dwFunAddr;
60
    HMODULE hModule;
61
62
63
    bRet = 0;
64
    hProcess = 0;
65
    dwThreadFunSize = 0x400;
66
    // 1. 获取进程的句柄
67
    hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessID);
68
    if (hProcess == NULL)
69
    {
70
        OutputDebugString("OpenProcessError! \n");
71
        return FALSE;
72
    }
73
    // 2. 分配3段内存：存储参数，线程函数，文件名
74
75
    // 2.1 用来存储文件名 +1是要计算到结尾处
76
    lpFilePathName = VirtualAllocEx(hProcess, NULL, strlen(szFilePathName)+1, MEM_COMMIT, 
PAGE_READWRITE); // 在指定的进程中分配内存
77
78
    // 2.2 用来存储线程函数
79
    lpRemotThreadAddr = VirtualAllocEx(hProcess, NULL, dwThreadFunSize, MEM_COMMIT, 
PAGE_READWRITE); // 在指定的进程中分配内存
80
81
    // 2.3 用来存储文件参数
82
    lpFileParamAddr = VirtualAllocEx(hProcess, NULL, sizeof(CREATEFILE_PARAM), MEM_COMMIT, 
PAGE_READWRITE); // 在指定的进程中分配内存
83
84
85
    // 3. 初始化CreateFile参数
86
    GCreateFile.dwDesiredAccess = GENERIC_READ | GENERIC_WRITE;
87
    GCreateFile.dwShareMode = 0;
88
    GCreateFile.lpSecurityAttributes = NULL;
89
    GCreateFile.dwCreationDisposition = OPEN_ALWAYS;
90
    GCreateFile.dwFlagsAndAttributes = FILE_ATTRIBUTE_NORMAL;
91
    GCreateFile.hTemplateFile = NULL;
92
93
    // 4. 获取CreateFile的地址
94
    // 因为每个进程中的LoadLibrary函数都在Kernel32.dll中，而且此dll的物理页是共享的，所以我们进程中获得的
LoadLibrary地址和别的进程都是一样的
95
    hModule = GetModuleHandle("kernel32.dll");
96
    GCreateFile.dwCreateAPIAddr = (DWORD)GetProcAddress(hModule, "CreateFileA");
97
    FreeLibrary(hModule);
98
99
    // 5. 初始化CreatFile文件名
100
    GCreateFile.lpFileName = (LPCTSTR)lpFilePathName;
101
102
    // 6. 修改线程函数起始地址
103
    dwFunAddr = (DWORD)CreateFileThreadProc;
104
    // 间接跳
105
    if (*((BYTE*)dwFunAddr) == 0xE9)
106
    {
107
滴水逆向课程笔记  –  Win32
注入代码  –  168
        dwFunAddr = dwFunAddr + 5 + *(DWORD*)(dwFunAddr + 1);
108
    }
109
110
    // 7. 开始复制
111
    // 7.1 拷贝文件名
112
    WriteProcessMemory(hProcess, lpFilePathName, szFilePathName, strlen(szFilePathName) + 1, 0);
113
114
    // 7.2 拷贝线程函数
115
    WriteProcessMemory(hProcess, lpRemotThreadAddr, (LPVOID)dwFunAddr, dwThreadFunSize, 0);
116
117
    // 7.3 拷贝参数
118
    WriteProcessMemory(hProcess, lpFileParamAddr, &GCreateFile, sizeof(CREATEFILE_PARAM), 0);
119
120
    // 8. 创建远程线程
121
    hThread = CreateRemoteThread(hProcess, NULL, 0, (LPTHREAD_START_ROUTINE)lpRemotThreadAddr, 
lpFileParamAddr, 0, &dwThread);// lpAllocAddr传给线程函数的参数.因为dll名字分配在内存中
122
    if (hThread == NULL)
123
    {
124
        OutputDebugString("CreateRemoteThread Error! \n");
125
        CloseHandle(hProcess);
126
        CloseHandle(hModule);
127
        return FALSE;
128
    }
129
130
    // 9. 关闭资源
131
    CloseHandle(hProcess);
132
    CloseHandle(hThread);
133
    CloseHandle(hModule);
134
    return TRUE;
135
136
}
137
138
// 根据进程名称获取进程ID
139
DWORD GetPID(char *szName)
140
{
141
    HANDLE hProcessSnapShot = NULL;
142
    PROCESSENTRY32 pe32 = {0};
143
144
    hProcessSnapShot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
145
    if (hProcessSnapShot == (HANDLE)-1)
146
    {
147
        return 0;
148
    }
149
150
    pe32.dwSize = sizeof(PROCESSENTRY32);
151
    if (Process32First(hProcessSnapShot, &pe32))
152
    {
153
        do {
154
            if (!strcmp(szName, pe32.szExeFile)) {
155
                return (int)pe32.th32ProcessID;
156
            }
157
        } while (Process32Next(hProcessSnapShot, &pe32));
158
    }
159
    else
160
    {
161
        CloseHandle(hProcessSnapShot);
162
滴水逆向课程笔记  –  Win32
注入代码  –  169
    }
163
    return 0;
164
}
165
166
int main()
167
{
168
    RemotCreateFile(GetPID("进程名"), "文件名");
169
    return 0;
170
}
171