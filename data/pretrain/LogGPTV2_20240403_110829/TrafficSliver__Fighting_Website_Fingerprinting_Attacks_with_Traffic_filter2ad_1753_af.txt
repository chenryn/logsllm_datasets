10
0
Tor
TrafficSliver-Net
Tor
TrafficSliver-Net
Tor
TrafficSliver-Net
(a) Throughput.
(b) Load on middle OR.
(c) Packet inter-arrival time.
Figure 7: Performance evaluation of our network-layer defense.
extracted based on information about packet sizes and ordering, and
(ùëñùëñ) features that involve timing information. Figure 5 shows the im-
portance score of the first 50 best-ranked features for defended and
non-defended traces. Non-defended traces are correctly detected
since classifiers typically rely on features based on packet sizes and
ordering. On the other side, the level of importance of size-related
features reduces significantly when considering defended traces.
In case of TrafficSliver-Net, we obfuscate not only the size-related
features but also the order of transmitting consecutive packets (due
to the use of two splitting points for incoming and outgoing traffic
and the weighted selection of an individual circuit for a batch of
Tor cells). This, in turn, explains the success of our defense over
classifiers such as CUMUL and DF, which mainly rely on packet
sizes and ordering to recognize websites. However, as TrafficSliver-
Net does not add any packet delays or dummy traffic, it cannot fully
obfuscate features involving timing information and, thus, such
features gain a higher importance score. This explains the better
performance of k-FP, which also considers timing information.
Unlike TrafficSliver-Net, TrafficSliver-App cannot obfuscate all
features related to packet sizes and ordering. A reason might be that
we do not have any proactive splitting for incoming traffic. However,
overall we observe that our defense flattens the importance score of
all features to a notably lower value (i.e., less than 0.02) and, thus,
forces WFP attacks to rely on highly fluctuating characteristics
such as data rate, page loading time, or inter-packet timing.
8.4 Overhead & Comparison to Prior Defenses
Finally, we compare the level of security and the amount of over-
head created by the most popular prior WFP defenses CS-BuFLO [6],
Tamaraw [7], and WTF-PAD [23] to our TrafficSliver defenses (us-
ing our most optimal splitting scheme: BWR with five entry ORs and
multi-path). We generated defended traces for the prior defenses by
using our dataset ALEXA-NODEF and their public implementations.
Security against State-of-the-art WFP Attacks. Table 4 shows
the classification results obtained in a closed-world scenario for
a malicious entry OR. TrafficSliver-Net clearly outperforms CS-
BuFLO and WTF-PAD. Although TrafficSliver-Net and Tamarraw
achieve similar accuracies in case of ùëò-NN and CUMUL, Tamar-
raw is significantly robuster against k-FP and DF compared to
TrafficSliver-Net. However, this is achieved at the price of band-
width and latency overheads that are several orders of magnitude
higher than those of TrafficSliver-Net (see Figure 6). Moreover,
we observe that our lightweight TrafficSliver-App defense reduces
the detection rate of the state-of-the-art WFP classifiers, though it
does not achieve the level of protection offered by CS-BuFLO and
Tamaraw. Finally, we observe that TrafficSliver-App outperforms
WTF-PAD ‚Äî the only one application-layer defense in our compar-
ison ‚Äî by multiple factor for all WFP attacks. We conclude that our
defenses achieve higher accuracy declines for all WFP attacks than
the most former defenses.
Performance Overhead. An acceptable performance overhead
is important for the real-world deployment of defenses. Therefore,
we measure the bandwidth and latency overhead created by our
defenses and compare it with the overheads generated by the prior
WFP defenses. As shown in Figure 6, both TrafficSliver defenses
produce only a tiny bandwidth overhead in contrast to all former
WFP defenses. In terms of latency, the created overhead is more
conspicuous. However, it is still lower by several orders of magni-
tude compared to CS-BuFLO and Tamaraw. Although WTF-PAD
does not introduce any time delays, it does not provide a sufficient
level of security against WFP attacks as we showed above. We con-
clude that our TrafficSliver defenses produce only a small overhead
in terms of latency and a negligible one in terms of bandwidth
consumption and outperform all former WFP defenses.
Finally, we analyze the overhead created by TrafficSliver-Net
due to the splitting and merging of traffic at the middle OR. To
this end, we deployed TrafficSliver-Net in the real Tor network and
measured the processing times per Tor cell and the throughput for
traffic going from the user to the middle OR (forward traffic) and
from the middle OR to the user (backward traffic). We repeated
each measurement at least 1,000 times. First, as shown in Figure 7a,
we observe a slight decrease in the throughput by approximately
20%. We believe that this decrease will not notably affect the web
browsing experience of the user. Second, as shown in Figure 7b, we
find that the processing overhead of TrafficSliver-Net for middle
ORs is neglectable. Third, as multi-path negatively influences jitter,
we compare the packet inter-arrival times of our defense to those of
original Tor. As shown in Figure 7c, while the packet inter-arrival
time decreases in case of TrafficSliver-Net due to the use of multiple
connections, the number of outliers increases. A reason for this
might be fluctuating characteristics such as different data rates over
the different connections.
To sum up, we showed the effectiveness of our defenses against
today‚Äôs WFP attacks and argue that they serve as suitable candidates
for adoption in Tor due to their moderate performance overhead.
8.5 Discussion and Limitations
In contrast to former WFP defenses that aim at protecting against a
malicious ISP and a malicious entry OR, our TrafficSliver defenses
provide protection against malicious entry ORs only. To defend
also against eavesdroppers on the link between a Tor user and
an entry OR, i.e., the case of a malicious ISP, the user can utilize
different access links (e.g., using distinct ISPs via DSL, Wi-Fi or
cellular networks) to connect to the entry ORs, as proposed by
Henri et al. [20]. However, it is worth noting that while it is hard
to become a user‚Äôs ISP, it is easier (and, thus, more dangerous for
the user) to become an entry OR by launching multiple ORs in Tor.
From another perspective, the use of multiple entry ORs by Traf-
ficSliver may increase the chances for an attacker to become one of
these entry ORs. Thus, despite that TrafficSliver can deal even with
several malicious entry ORs (see Section 8.1.5), we propose to apply
the already existing guard concept of Tor [28] for the selection of
entry ORs. This idea was already discussed and suggested for adop-
tion in the scope of multipath extensions of Tor for performance
improvements [28]. According to the current guard specification,
a Tor user selects a set of entry ORs for its guard list and sticks to
using them for a certain time period. If the user selects a malicious
entry OR as its guard in Tor, it is completely exposed to the WFP
attack at the entry OR. Contrary, in TrafficSliver, selecting one or
even several malicious guards, as our evaluation shows, does not
lead to successful mounting of WFP. Therefore, we believe that the
adoption of TrafficSliver will not worsen the user‚Äôs situation with
respect to path compromises, though further research is needed to
ultimately clarify this question.
TrafficSliver-Net can be used for arbitrary TCP traffic. Though in-
dependent of the underlying anonymization network, TrafficSliver-
App is an HTTP(S)-specific defense. As end-connections to the
destinations are made from different exit ORs, TrafficSliver-App
could experience issues while dealing with user sessions (for the
web server it looks like the same user makes connections from
different IP addresses). This needs further research and could be
mitigated by using the same exit OR for all sub-circuits.
We are the first to use multipath for thwarting attacks in Tor,
though there exist approaches such as Conflux [4] and mTor [53]
to improve the performance. Both of them perform merging and
splitting at the exit OR (see discussion below) and do not allow
any protection-specific options for splitting. An interested reader
would also wonder about the opportunity to apply multipath TCP
(MPTCP) instead of TrafficSliver-Net. However, we argue that this
is not an alternative in Tor. Between each pair of ORs, especially for
privacy reasons, Tor uses a single TCP connection for all circuits
(i.e., TCP terminates at the next OR). Cells of one circuit travel over
multiple TCP connections, one for each OR (hop-by-hop). Hence,
Tor already uses a tailored approach for client-to-server congestion
control (rather than counting on hop-by-hop TCP RTT estimators
or dup ACKs). Even more, ORs cannot use TCP options to forward
circuit-specific MPTCP options: (ùëñ) This would deanonymize the
user and (ùëñùëñ) ORs multiplex different circuits over the same TCP con-
nection to the next OR. Also, tunneling MPTCP options within the
cell ‚Äî such that exit ORs can apply them to the server-facing TCP
connection ‚Äî is undesirable as it requires adapting the resource-
scarce and outnumbered exit ORs [21] and would limit the defense
to MPTCP-supporting web servers. In TrafficSliver-Net, we further
prefer to split and merge traffic at the middle OR as exit ORs have
the lowest bandwidth and quantity in Tor [21]. However, our de-
fense supports both cell splitting and merging at middle or exit,
independent of the circuit length and number of sub-circuits.
9 CONCLUSION
We proposed novel lightweight TrafficSliver defenses at network
and application layer, respectively, to protect against WFP per-
formed by malicious entry ORs. TrafficSliver is based on user-
controlled traffic splitting via multiple Tor paths. We also analyzed
the effectiveness of different splitting schemes that can be inte-
grated in our defenses. We show that our network-layer defense is
able to reduce the accuracy from more than 98% to less than 16% for
all state-of-the-art WFP attacks without adding any artificial delays
or dummy traffic. While TrafficSliver-Net drastically decreases the
accuracy of all state-of-the-art attacks, TrafficSliver-App reduces ac-
curacy by light modifications on the client side only and, thus, does
not require any changes in the underlying anonymization network.
Through an extensive evaluation, we identified system parameters
and traffic-splitting strategies that effectively hamper WFP attacks.
Besides the compatibility with the current Tor network, our de-
fenses do not insert noticeable bandwidth overhead and incur only
minimal latency overhead. Thus, they serve as suitable candidates
for deployment in Tor.
The source code of our TrafficSliver defenses is available at [1].
Acknowledgements. Parts of this work have been funded by
the Luxembourg National Research Fund (FNR) within the CORE Ju-
nior Track project PETIT, the EU and state Brandenburg EFRE StaF
project INSPIRE, and the German Federal Ministry of Education
and Research (BMBF) under the projects KISS_KI and WAIKIKI. We
thank Daniel Forster for the initial prototype of TrafficSliver-Net.
REFERENCES
[1] 2020. https://github.com/TrafficSliver.
[2] Kota Abe and Shigeki Goto. 2016. Fingerprinting Attack on Tor Anonymity using
Deep Learning. In Proceedings of the Asia Pacific Advanced Network Workshop
(APAN).
[3] Alexa. 2020. Alexa Tor 100 most popular websites. https://www.alexa.com/.
(Accessed: September 2018).
[4] Mashael AlSabah, Kevin Bauer, Tariq Elahi, and Ian Goldberg. 2013. The Path Less
Travelled: Overcoming Tor‚Äôs Bottlenecks with Traffic Splitting. In Proceedings on
Privacy Enhancing Technologies (PoPETS). Springer, Bloomington, IND, USA.
[5] Sanjit Bhat, David Lu, Albert Kwon, and Srinivas Devadas. 2019. Var-CNN: A Data-
Efficient Website Fingerprinting Attack Based on Deep Learning. In Proceedings
on Privacy Enhancing Technologies (PoPETS). Sciendo, Stockolm, Sweden.
[6] Xiang Cai, Rishab Nithyanand, and Rob Johnson. 2014. CS-BuFLO: A Congestion
Sensitive Website Fingerprinting Defense. In Proceedings of the 13th Workshop on
Privacy in the Electronic Society (WPES). ACM, Scottsdale, AZ, USA.
[7] Xiang Cai, Rishab Nithyanand, Tao Wang, Rob Johnson, and Ian Goldberg. 2014.
A Systematic Approach to Developing and Evaluating Website Fingerprinting
Defenses. In Proceedings of the 21st ACM SIGSAC Conference on Computer and
Communications Security (CCS). ACM, Scottsdale, Arizona, USA.
[8] Xiang Cai, Xin Cheng Zhang, Brijesh Joshi, and Rob Johnson. 2012. Touching
from a distance: website fingerprinting attacks and defenses. In 19th Conference on
Computer and communications security (CCS). ACM, Raleigh, NC, USA, 605‚Äì616.
[9] Giovanni Cherubin, Jamie Hayes, and Marc Juarez. 2017. Website Fingerprint-
ing Defenses at the Application Layer. In 17th Privacy Enhancing Technologies
Symposium (PETS). DE GRUYTER, Minneapolis, USA, 186‚Äì203.
[10] Wladimir De la Cadena, Daniel Kaiser, Asya Mitseva, Andriy Panchenko, and
Thomas Engel. 2019. Analysis of Multi-path Onion Routing-Based Anonymiza-
tion Networks. In Proceedings of the 33rd Anual IFIP Conference on Data and
Applications Security and Privacy (DBSec). Springer, Charleston, SC, USA.
[11] Roger Dingledine and Nick Mathewson. 2019. Tor Protocol Specification. https:
//gitweb.torproject.org/torspec.git/tree/tor-spec.txt. (Accessed: January 2020).
[12] Roger Dingledine, Nick Mathewson, and Paul Syverson. 2004. Tor: The Second-
Generation Onion Router. In 13th Conference on USENIX Security Symposium.
USENIX Association, San Diego, CA, USA, 303‚Äì320.
[13] Kevin Dyer, Scott Coull, Thomas Ristenpart, and Thomas Shrimpton. 2012. Peek-
a-Boo, I Still See You: Why Efficient Traffic Analysis Countermeasures Fail. In
Proceedings of the 33rd IEEE Symposium on Security and Privacy (S&P). IEEE, San
Francisco, CA, USA.
[14] Roy T. Fielding, Yves Lafon, and Julian F. Reschke. 2014. Hypertext Transfer
Protocol (HTTP/1.1): Range Requests. https://tools.ietf.org/html/rfc7233.
[15] Roy T. Fielding and Julian F. Reschke. 2014. Hypertext Transfer Protocol
(HTTP/1.1): Semantics and Content. https://tools.ietf.org/html/rfc7231.
[16] OpenJS Foundation. 2020. Node.js. https://nodejs.org/en/.
(Accessed: March
[17] Ian Goldberg. 2019. Network-Based Website Fingerprinting. https://tools.ietf.
org/html/draft-wood-privsec-wfattacks-00. (Accessed: August 2019).
[18] Jiajun Gong and Tao Wang. 2020. Zero-delay Lightweight Defenses against
Website Fingerprinting. In 29th USENIX Security Symposium. USENIX Association,
Boston, MA, USA.
[19] Jamie Hayes and George Danezis. 2016. k-fingerprinting: A Robust Scalable
Website Fingerprinting Technique. In Proceedings of the 25th USENIX conference
on Security Symposium. USENIX Association, Austin, TX, USA.
[20] S√©bastien Henri, Gin√©s Garc√≠a-Avil√©s, Pablo Serrano, Albert Banchs, and Patrick
Thiran. 2020. Protecting against Website Fingerprinting with Multihoming.
In Proceedings on Privacy Enhancing Technologies (PoPETS). Sciendo, Montreal,
Canada.
[21] Rob Jansen, Tavish Vaidya, and Micah Sherr. 2019. Point Break: A Study of
Bandwidth Denial-of-Service Attacks against Tor. In Proceedings of the 28th
USENIX conference on Security Symposium. USENIX Association, Santa Clara,
CA.
[22] Marc Juarez, Sadia Afroz, Gunes Acar, Claudia Diaz, and Rachel Greenstadt. 2014.
A Critical Evaluation of Website Fingerprinting Attacks. In Proceedings of the
21st ACM SIGSAC Conference on Computer and Communications Security (CCS).
ACM, Scottsdale, AZ, USA.
[23] Marc Juarez, Mohsen Imani, Mike Perry, Claudia Diaz, and Matthew Wright.
2016. Toward an Efficient Website Fingerprinting Defense. In Proceedings of the
21st European Symposium on Research in Computer Security (ESORICS). Springer,
Heraklion, Greece.
[24] Sheharbano Khattak, Taria Elahi, Laurent Simon, Colleen M. Swanson, Steven J.
Murdoch, and Ian Goldberg. 2016. SoK: Making Sense of Censorship Resis-
tance Systems. In 16th Privacy Enhancing Technologies Symposium (PETS). DE
GRUYTER, Darmstadt, Germany, 37‚Äì61.
[25] Wladimir De la Cadena, Asya Mitseva, Jan Pennekamp, Jens Hiller, Fabian Lanze,
Thomas Engel, Klaus Wehrle, and Andriy Panchenko. 2019. POSTER: Traffic
Splitting to Counter Website Fingerprinting. In 26th Conference on Computer and
Communications Security (CCS). ACM, London, UK, 2533‚Äì2535.
2020).
[26] Shuai Li, Huajun Guo, and Nicholas Hopper. 2018. Measuring Information
Leakage in Website Fingerprinting Attacks and Defenses. In 25th Conference on
Computer and Communications Security (CCS). ACM, Toronto, Canada, 1977‚Äì
1992.
[27] Marc Liberatore and Brian Levine. 2006.
Inferring the Source of Encrypted
HTTP Connections. In Proceedings of the 13th ACM Conference on Computer and
Communications Security (CCS). ACM, Alexandria, VA, USA.
[28] Isis Lovecruft, George Kadianakis, Ola Bini, and Nick Mathewson. 2019. Tor
Guard Specification. https://gitweb.torproject.org/torspec.git/tree/guard-spec.txt.
(Accessed: January 2020).
[29] David Lu, Sanjit Bhat, Albert Kwon, and Srinivas Devadas. 2018. DynaFlow: An
Efficient Website Fingerprinting Defense Based on Dynamically-Adjusting Flows.
In 17th Workshop on Privacy in the Electronic Society (WPES). ACM, Toronto,
Canada, 109‚Äì113.
[30] Xiapu Luo, Peng Zhou, Edmond W. W. Chan, Wenke Lee, Rocky K. C. Chang, and
Roberto Perdisci. 2011. HTTPOS: Sealing information leaks with browser-side
obfuscation of encrypted flows. In Proceedings of the 18th Anual Network and
Distributed System Security Symposium (NDSS). Internet Society, San Diego, CA,
USA.
[31] Nick Mathewson. 2019. New Release: Tor 0.4.0.5. https://blog.torproject.org/new-
release-tor-0405. (Accessed: January 2020).
[32] Rishab Nithyanand, Xiang Cai, and Rob Johnson. 2014. Glove: A Bespoke Website
Fingerprinting Defense. In Proceedings of the 13th Workshop on Privacy in the
Electronic Society (WPES). ACM, Scottsdale, Arizona, USA.
[33] Se Eun Oh, Saikrishna Sunkam, and Nicholas Hopper. 2019. ùëù1-FP: Extraction,
Classification, and Prediction of Website Fingerprints with Deep Learning. In 19th
Privacy Enhancing Technologies Symposium (PETS). DE GRUYTER, Stockholm,
Sweden, 191‚Äì209.
[34] Andriy Panchenko, Fabian Lanze, Andreas Zinnen, Martin Henze, Jan Pennekamp,
Klaus Wehrle, and Thomas Engel. 2016. Website Fingerprinting at Internet Scale.
In 23rd Annual Network and Distributed System Security Symposium (NDSS).
Internet Society, San Diego, CA, USA.
[35] Andriy Panchenko, Lukas Niessen, Andreas Zinnen, and Thomas Engel. 2011.
Website Fingerprinting in Onion Routing Based Anonymization Networks. In
Proceedings of the 10th Annual ACM Workshop on Privacy in the Electronic Society
(WPES) (Chicago, Illinois, USA). ACM.
[36] Andriy Panchenko and Johannes Renner. 2009. Path Selection Metrics for
Performance-Improved Onion Routing. In Proceedings of the 9th IEEE/IPSJ Sympo-
sium on Applications and the Internet (SAINT). IEEE, Seattle, Washington, USA.