to the difﬁculty in publishing crowdturﬁng apps, we ﬁnd from
the Apple store that multiple servers even share one client
(Section 4).
USENIX Association
28th USENIX Security Symposium    767
Mobile tasksCP 1Dishonest third partySmall-time workerCP 2CP 3Online tasksOnline tasksMobile tasksIntermediaryRemote serverDesktopclientMobile clientcorpus by training a neural network. In our study, we leverage
Word2vec to quantify the semantic similarity between the
words based on the cosine distance of their vectors.
• Topic model for keyword extraction. Topic model is a sta-
tistical model for ﬁnding the abstract "topics" of a document,
and topic modeling is a common text-mining tool for discov-
ering keywords from corpora. Among various topic modeling
approaches, Latent Dirichlet Allocation (LDA) [13] is one
of the most popular methods. The basic idea is that docu-
ments are represented as random mixtures over latent topics,
where a topic is characterized by a distribution over words,
and the statistically signiﬁcant words are selected to represent
the topic. In our study, we leverage the LDA implementa-
tion of Stanford Topic Modeling Toolbox [48] for keyword
extraction.
Threat Model. In our research, we consider an adversary who
tries to publish iOS apps carrying hidden crowdturﬁng content
on Apple App Store. Examples of such crowdturﬁng activities
include fake review posting, app ranking manipulation and
order scalping [15], etc. For this purpose, the adversary creates
iOS apps with hidden crowdturﬁng UIs. These UIs are meant
for displaying the tasks assigned by a crowdturﬁng platform
and providing guidance on how to accomplish the tasks, so
typically they do not ask for additional capabilities (guarded
on iOS by entitlements). To publish such apps, the adversary is
supposed to be knowledgeable about Apple’s vetting process.
Use of private APIs or side-loading are the focus of Apple’s
vetting and therefore not considered in our research. Also,
in our research, we only cover native iOS apps. The cross-
platform framework (e.g., react native) based apps, which are
built using different languages (e.g., javascript), are out of the
scope of this work.
3 Methodology
Here we elaborate on the design and implementation of a new
technique for identifying apps with hidden crowturﬁng UIs.
We begin with an overview of the idea behind Cruiser, and
then present the design details of each component.
3.1 Overview
Architecture. Figure 3 illustrates the architecture of Cruiser,
which includes a Structure Miner and a Semantic Analyzer.
After fetching and decrypting iOS apps from App Store, Struc-
ture Miner takes as its input a set of decrypted iOS apps, and
disassemble them. The disassembled apps are then utilized
by the Structure Miner to construct a VC hierarchy for iden-
tifying the VCs with conditionally triggered UIs (e.g., two
entry UIs). Here we deﬁne checkpoint VCs as all VCs associ-
ated with conditionally triggered UIs and their corresponding
children VCs (see detail in Section 3.2). We also consider
children VC, since VCs with conditionally triggered patterns
Figure 3: Architecture of Cruiser.
Figure 4: Pseudocode and simpliﬁed LVCG with conditionally
triggered UIs.
sometimes may not contain sufﬁcient texts for semantic anal-
ysis. On each checkpoint VC, the Semantic Analyzer further
extracts texts from it, and evaluates its content through a set
of NLP techniques to determine whether it is used for crowd-
turﬁng.
Example. To explain how Cruiser works, here we walk
through its workﬂow (Figure 3) using a Music Player app with
a hidden app ranking manipulation UI, com.sohouer.music.
Cruiser ﬁrst automatically decrypts the app and disassembles
it into binary, UI layout ﬁles and resource ﬁles. Meanwhile,
we also crawl the app’s metadata (i.e., description for the
Music Player app) from the App Store as the input for the
Semantic Analyzer.
The Structure Miner processes the binary and UI layouts of
the com.sohouer.music app and creates a VC hierarchy in the
form of a labeled view controller graph (LVCG) (as shown
in Figure 4). From the LVCG, our approach extracts VCs
with conditionally triggered UIs and marks them as the check-
point VCs. More speciﬁcally, the Structure Miner identiﬁes
VCs and VC transitions from the app binary and UI layout
ﬁles to construct the LVCG (Figure 4). From the LVCG, the
Structure Miner discovers the conditionally triggered UIs:
two root VCs of MusicListViewController and SHEMainView-
Controller, which indicate that there are two entry UIs for
the app. Depending on whether the app has received a par-
ticular scheme invocation before, different main UIs will be
768    28th USENIX Security Symposium
USENIX Association
displayed when the app is launched. Therefore, these two
VCs are labeled as checkpoint VCs for the follow-up seman-
tic analysis.
features:
topic words under SHEMainViewController
Once the checkpoint VCs are found, the Seman-
tic Analyzer then processes their text data to identify
the MusicListViewController VC
semantic
contains a series of Music Player related words, such
as {album,singer,shufﬂe,song,music,radio}, which are
consistent with the app’s description. On the other hand,
the
are
{task,cash,earn,withdrawal,join,pay,reward}. Given the
semantic inconsistency discovered, the Semantic Analyzer
ﬂags the app as a crowdturﬁng client.
Data collection. In our research, we collected 28,625 iOS
apps for discovering new hidden crowdturﬁng apps, which we
call unknown set. Speciﬁcally, we scanned the entire iOS app
list from iTunes Preview website [34] using an app crawler
running on an iPhone, and then selected the apps updated
after Jan. 1, 2016 to download and decrypt. This is because
apps with hidden crowdturﬁng UI is an emerging threat, and
recently updated apps tend to have more active users. In this
way, we collected 28,625 iOS apps, which cover 25 app cate-
gories.
3.2 Structure Miner
The Structure Miner is designed to identify the VCs with
conditionally triggered UIs from an app’s disassembled code
and UI layout ﬁles. Examples of such patterns include two
different main UIs, as discovered from com.sohouer.music,
and the UI that can only be invoked by a speciﬁc network or
other events, not directly by the user, indicating the potential
presence of evasive behaviors. To discover such patterns, we
ﬁrst construct a VC hierarchy in the form of an LVCG through
analyzing the app’s binary and retrieving UIs from the UI
layout ﬁles to identify their corresponding VCs and establish
their transition relations among them. Then, from the LVCG,
we search for predeﬁned conditionally triggered UIs and mark
those having these UIs as checkpoint VCs for further analysis.
LVCG. LVCG is a directed graph as shown in Figure 4, in
which each node is a VC and each directed edge describes a
transition from one VC (corresponding to a UI) to another.
Deﬁnition 1. An LVCG is a directed graph G = (V,E,α) over a
node label space Ω, where:
1. V is a node set, with each node being a VC;
2. Edge set E ⊆ V× V is a set of transitions between VCs;
3. Node labeling function α : V → Ω marks each node with its
UI properties and text data. Each node is given four property
labels: entry, user, url, others. Table 1 shows the deﬁnition of
each property and the corresponding method names.
LVCG construction. The construction of an LVCG requires
both an app’s binary and its UI layout ﬁles. This is because
the VC of a UI is in the code and even the UI itself can be
programmed through APIs (e.g., initWithFrame: API in UIV-
iew) so becoming part of the VC, and in the meantime, all the
UIs built through storyboard can only be found in the layout
ﬁles, including the transitions between them. To address this
complexity, Cruiser builds two LVCGs, one from the binary
and the other from the layout ﬁles, before combining them
together.
Speciﬁcally, on the binary code, we look for system VC
class names (e.g., UIViewController) and method names (e.g.,
setNavigationBarHidden), which help identify individual VCs
and their properties (see Table 1). Then we track the data ﬂows
from a VC to another to recover the transitions between the
detected VCs. For this purpose, our approach ﬁrst maps the
addresses in the binary code to symbols (e.g., class name,
method name) using a binary analysis tool Capstone [7], and
then uses a set of targeted system VC class names (e.g., UIV-
iewController) and method names (e.g., setNavigationBarHid-
den) to recognize VCs and their properties (e.g., entry) from
the symbols. After that, the Structure Miner performs a data-
ﬂow analysis using an implementation similar to the prior
techniques [18, 23], to connect the transition APIs (perform-
SegueWithIdentiﬁer:sender:) discovered in a VC to another
one, the transition target.
To construct a LVCG on the layout ﬁles under the story-
board folder generated by Apple’s interface builder, we need
to extract VCs and VC transitions from the ﬁles. The former
can be found from the storyboard plist ﬁle that includes the
mappings from VC names to the obfuscated names of nib
ﬁles. The latter is recorded by the nib ﬁles, each of which
carries a subset of a VC’s properties, e.g., the types of some
elements (such as botton, textbox, etc.) and the transitions
between VCs.
Our approach directly recovers VCs from the plist ﬁle
and further detects each VC’s nib ﬁles from the mappings
it records. More challenging here, however, is to identify
the transitions between the VCs, since objects included in
a nib ﬁle are undocumented. To enable the Structure Miner
to interpret the ﬁle, we reverse-engineered part of its format
relevant to the transition and content extraction. Speciﬁcally,
we started from the interface builder, through which one can
deﬁne one or multiple scenes to represent a UI and a Segue
to describe a transition. Through a differential analysis, we
compared the compiled nib ﬁles with and without a speciﬁc
transition to pinpoint the nib objects corresponding to differ-
ent Segue types (e.g., push, modal, unwind), such as ClassS-
wapper. From such objects, the Structure Miner is then able to
collect the transitioning data, in the form of src, dst, type, etc..
This allows us to restore the recorded transition information
and build up the LVCG of an app.
Given the LVCGs generated from the binary and the layout
ﬁles, our approach automatically combines them together,
based on the relations between the VCs on these graphs:
particularly, when a transition is found from a VC in the
layout to the one deﬁned in the code, two LVCGs can then
USENIX Association
28th USENIX Security Symposium    769
Table 1: LVCG node properties and their corresponding method names.
Property
entry
user
url
Deﬁnition
root VC
Method/Class names
setRootViewController:
VC triggered by a user interaction
VC rendering web content
addTarget:action:forControlEvents:
openURL:, UIWebViewController
others
other properties (e.g., self-dismiss) dismissViewControllerAnimated:completion:
be linked together through this VC pair. On the combined
LVCG, further we remove the dead VCs introduced by the
part of libraries and other shared code not used by an app. To
this end, our approach performs a test to ﬁnd out all the VCs
that cannot be reached from the app’s entry points (such as
AppDelegate, the initial VC of the main storyboard) and drops
them. In this way, we remove 1,053,161 dead VCs (55.4%)
from the 28,625 iOS apps we collect (see Section 3.1).
Conditionally triggered UI extraction. Given 17 apps with
hidden crowdturing UI collected from 91ssz [8] (see detail in
Section 3.4), without loss of generality, in our study, we con-
sider two types of conditionally triggered UIs on the LVCG,
as elaborated below:
• More than one root VCs. We consider an LVCG to be suspi-
cious if it has more than one root VCs, i.e., app has two entry
points, that is, two different root UIs. The root VC is the ﬁrst
one launched (by AppDelegate) when an app starts running.
One evasion trick the adversary often plays is to run two root
VCs, one legitimate and the other illicit, depending on some
trigger conditions (e.g., the app’s execution environment).
For example, in the app com.sohouer.music (see Section 3.1),
besides the benign UI (i.e., MusicListViewController), the
hidden crowdturﬁng UI (i.e., SHEMainViewController) can
also be invoked by AppDelegate). Such a pattern can be de-
scribed as |α(v) == ‘root(cid:48)| ≥ 2. In this case, we label the two
VCs and their corresponding children VCs as checkpoint VCs
for further semantic analysis.
• VC not triggered by users. If an entry VC or intermediate VC
is not triggered by the user, but by other external events (e.g.,
network), i.e., α(v)[‘entry(cid:48)] = True∧α(v)[‘user(cid:48)] = False or
α(v)[‘user(cid:48)] = False∧ α(v)[‘url(cid:48)] = True, we consider it as
suspicious, since such UI is difﬁcult to be triggered during
app vetting. In such a case, we mark such a VC v and its
children VCs as checkpoint VCs.
Looking into all 28,625 apps, we discover 34,679 check-
point VCs using conditionally triggered UIs. These VCs are
further evaluated by the Semantic Analyzer. Our evaluation
(see Section 3.4) shows that the Structure Miner maintains a
good coverage on hidden crowdturﬁng UIs while ﬁltering out
most legitimate apps.
3.3 Semantic Analyzer
The Semantic Analyzer determines whether checkpoint VCs
are crowdturﬁng UIs. Serving this purpose is a set of NLP
based semantic analysis techniques: we ﬁrst extract UI texts
from the VCs, and then ﬁnd out whether they are related to
crowdturﬁng by calculating the semantic distance between
the texts and crowdturﬁng keywords.
Text discovery. As mentioned earlier, the format of the UI
layout ﬁles (the nib ﬁles) is undocumented. However, they can
be converted into the XML form using ibtool [42]. From their
XML content, we can ﬁnd plain-text strings under NSString
objects, a property of UI element objects like button, table,
textbox, font, color, etc. Some of these strings are part of the
content a UI displays, while the others are not, depending
on the type of the UI element objects. For example, UIFont
and UIColor carry strings such as “.HelveticaNeueInterface-
Regular” and “blackColor” for deﬁning fonts and UI color,
respectively. To extract UI content from the nib ﬁles, we come
up with a blacklist of UI element objects that do not include
UI texts, and use that list to ﬁlter out irrelevant text strings.
More speciﬁcally, we randomly sampled 70 iOS apps from our
unknown set, which gives us 1,307 nib ﬁles including 28,469
NSString objects. We clustered them based on the types of
their UI element objects, and manually went over all 103 types
discovered. In this way, we constructed a blacklist with 21
patterns that cover 64 object types that do not contain any
meaningful UI texts. Table 8 in Appendix shows the blacklist.
When analyzing a given app, the Semantic Analyzer locates
all NSString objects from its checkpoint VCs and further
recovers their host UI element objects from the app’s UI