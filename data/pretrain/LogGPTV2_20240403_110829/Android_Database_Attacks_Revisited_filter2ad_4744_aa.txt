# Title: Revisiting Android Database Attacks

## Authors
- Behnaz Hassanshahi
- Roland H. C. Yap

### Affiliation
School of Computing, National University of Singapore

### Abstract
Many Android applications (apps) use databases to manage sensitive data, making the security of these databases a critical concern. In this paper, we systematically study attacks targeting databases in benign Android apps. We not only examine vulnerabilities accessed through content providers but also define and analyze a new class of database vulnerabilities. We propose an analysis framework to identify such vulnerabilities and demonstrate proof-of-concept exploits. Our approach combines static data flow analysis, symbolic execution, and dynamic testing, with models for handling complex objects like URIs. We evaluate our analysis on popular Android apps, successfully identifying numerous database vulnerabilities. Surprisingly, our analyzer discovers new ways to exploit previously reported and fixed vulnerabilities. Finally, we propose a fine-grained protection mechanism that extends the manifest to defend against database attacks.

### Keywords
Android Security, Program Analysis, Database, Malware

## 1. Introduction
Many Android apps store data in databases, and apps can interact with each other's databases to provide functionality. A vulnerable app may allow malware to compromise the integrity and confidentiality of its stored data, leading to what we call database vulnerabilities. Given the significant use of databases in Android apps, finding and mitigating these vulnerabilities is crucial. However, there has been limited research on detecting database vulnerabilities in Android. The most relevant work, ContentScope [31], focuses only on public database vulnerabilities via content providers. 

In this paper, we study and characterize database vulnerabilities in benign Android apps, including a new class of private database vulnerabilities. To detect these vulnerabilities, we propose an analysis framework that automatically generates proof-of-concept exploits. This framework uses symbolic models of URI objects, which are heavily utilized in database interactions. Although Android permissions address public databases, they are not sufficiently fine-grained to prevent attacks. For private databases, no specific permission mechanisms exist. We propose a conservative extension to the Android manifest to help developers secure their apps from database attacks.

We have implemented a prototype system, DBDroidScanner, which identifies both public and private database vulnerabilities and generates corresponding exploits. Using DBDroidScanner, we analyzed 924 real-world apps and found a significant number of them to be vulnerable. DBDroidScanner generated 153 exploits, suggesting that database vulnerabilities in Android are prevalent. By exploiting these vulnerabilities, unprivileged malware can cause data leaks and pollution. Additionally, we re-analyzed apps whose public database vulnerabilities were studied in [31] and found that some still contain vulnerabilities in their updated versions. We also discovered more complex attacks, including privilege escalation attacks triggered by private database vulnerabilities.

In summary, our contributions are:
1. A broad classification of database attacks in Android apps.
2. Accurate models for URI-based libraries essential for analyzing apps using databases.
3. A detection and exploitation framework for zero-day database vulnerabilities.
4. A new database protection mechanism for Android apps.

## 2. Public and Private Databases
Android developers often make the databases in their apps accessible to other apps on the device using content provider components, which provide APIs for public database access. They can also implement internal databases without exposing them through content providers, instead using inter-app communication mechanisms like Intents. We refer to the former as public databases and the latter as private databases. A vulnerable app is one whose databases (public or private) are not fully protected.

### Public Database Attacks
Public database attacks target databases accessible through content providers. Figure 1.a illustrates a public database attack where a malware app exploits the vulnerabilities of a victim app using the parameters of an unprotected content provider API. In Android, components meant to be accessible by other apps must be exported by specifying the `android:exported` attribute in the manifest file. Content providers in apps built for SDK 17 and higher are not exported by default, but those in apps built for SDK 16 and lower are. We study public database attacks for SDK 17 and higher.

Developers can protect content providers using existing or custom permissions at different granularities:
1. Setting `android:exported="false"` isolates the component from other apps.
2. Specifying `android:permission` for the entire component.
3. Using `readPermission` and `writePermission` to restrict access based on the request type.
4. Using `path-permission` to protect specific paths in the content provider.

### Private Database Attacks
Private database attacks target databases accessible through inter-app communication. An unprotected app has an exported component (other than a content provider) that is not protected by any dangerous or more restrictive permissions. Figures 1.b and 1.c show two private database attack scenarios. In the first scenario, the malware sends malicious Intents to the victim app's components to exploit its database vulnerabilities. The second scenario is a privilege escalation attack where the malware exploits the vulnerabilities in another app via the first victim app.

Unlike public databases, Android does not provide explicit protection mechanisms for private databases. Developers must implement their own (potentially buggy) access-control code to secure internal databases. If a component allows an app to access private databases via Intents, there is no further access control in Android. Many Android apps rely heavily on these private databases to organize various contents, such as contacts and app-specific information.

Intents are the primary means of communication in Android, but developers often fail to check their origin properly. Handling an incoming Intent that modifies the internal database's data can lead to undesired behaviors and result in private database vulnerabilities. Apps may also accidentally expose access paths to private databases by allowing portions of the input string from an Intent to be passed directly to SQL methods, enabling attackers to manipulate the database.

## 3. Threat Model and Examples
### Threat Model
The adversary in our threat model is malware installed on the Android device. We do not assume any specific permissions for the malware. We assume that at least one app on the device is benign but buggy, containing a database vulnerability. The malware can attack either public or private databases of unprotected apps by crafting malicious input and sending it to the relevant component of the vulnerable app.

### Example
#### Vulnerable Public Database Example
Listing 1 shows a content provider tag in the manifest file of app A, which allows the content provider to be accessed by other apps. The developer has attempted to protect this provider using a path permission. However, there is a vulnerability in app A. Other paths in the code allow the attacker to pollute the database with sensitive data.

In the lifecycle of the content provider, `onCreate()` is the first method called by the Android framework. The URI patterns are registered in the `UriMatcher` object. Due to the path permission in the manifest file, only the second URI pattern is protected. The first pattern, however, is not, allowing the attacker to exploit the vulnerability.

```java
public class PublicDatabase extends ContentProvider {
    UriMatcher uriMatcher = new UriMatcher(0);
    PublicDBHelper dbHelper;

    @Override
    public boolean onCreate() {
        dbHelper = new PublicDBHelper(...);
        uriMatcher.addURI("com.example.app.PublicDatabase", "#", 1);
        uriMatcher.addURI("com.example.app.PublicDatabase", "contacts/", 2);
        return true;
    }

    @Override
    public Uri insert(Uri uri, ContentValues values) {
        SQLiteDatabase db = dbHelper.getWritableDatabase();
        switch (uriMatcher.match(uri)) {
            case 1: {
                String table = getTableName(uri.getLastPathSegment());
                if (!table.isEmpty())
                    return db.insert(table, null, values);
                return null;
            }
            case 2: {
                return db.insert("Contacts", null, values);
            }
            default:
                return null;
        }
    }
}
```

This example demonstrates how a poorly protected content provider can be exploited, leading to database vulnerabilities.