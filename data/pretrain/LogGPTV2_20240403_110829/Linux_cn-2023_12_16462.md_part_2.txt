```
$ sudo a2enmod proxy
$ sudo a2enmod proxy_fcgi
```
以下指令适用于 OpenSUSE，将这几行添加在 `/etc/apache2/httpd.conf` 结尾处：
```
LoadModule proxy_module modules/mod_proxy.so
LoadModule proxy_fcgi_module modules/mod_proxy_fcgi.so
```
#### 2、配置 Apache
现在你必须将代理信息添加在 Apache 的配置文件中：
```
ProxyPass "/multitenant_SaaS" unix:///var/lib/vv/multitenant_SaaS/sock/sock|fcgi://localhost/multitenant_SaaS
```
你的配置文件的位置可能会有所不同，这取决于不同的 Linux 发行版：
* Fedora、CentOS、Mageia 和 Arch： `/etc/httpd/conf/httpd.conf`
* Debian、Ubuntu、Mint： `/etc/apache2/apache2.conf`
* OpenSUSE：`/etc/apache2/httpd.conf`
#### 3、重新启动
最后，重启 Apache。在 Fedora 和类似系统，还有 Arch Linux 是如下指令：
```
$ sudo systemctl restart httpd
```
在 Debian 和基于 Debian 的系统，还有 OpenSUSE 是如下指令：
```
$ sudo systemctl restart apache2
```
### 设置本地邮箱
这个示例中，电子邮件是其功能的一部分。如果你的服务器已经可以发送电子邮件了，你可以跳过这一条。此外，你可以使用本地邮箱（`myuser@localhost`）来测试它。要做到这一点，需安装 Sendmail。
在 Fedora 和类似系统中是如下指令：
```
$ sudo dnf installsendmail
$ sudo systemctl start sendmail
```
而在 Debian 和类似系统（如 Ubuntu）：
```
$ sudo apt installsendmail
$ sudo systemctl start sendmail
```
当应用程序向本地用户发送电子邮件，比如说 `OS_user@localhost`，你就可以通过查看 `/var/mail/` 处（即所谓“邮件池”）来确认电子邮件是否被发送。
### 从浏览器访问应用服务器
假设你在本地运行该应用，可以通过使用 `http://127.0.0.1/multitenant_SaaS?req=notes&action=begin` 域名从你的网络服务器访问你的应用服务器。如果你在互联网上的在线服务器运行该程序，你可能就需要调整防火墙设置以允许 HTTP 通信。
### 源代码
该应用程序示例包含 7 个源文件。你可以自行回顾代码（记住，这些文件只有 310 行代码），下面是每个文件的概述。
#### SQL 设置（setup.sql）
创建的两个表：
* `users`：每个用户的信息。在 `users` 表中，每个用户都有自己唯一的 ID （`userId` 列），以及其他信息，如电子邮件地址和该地址是否通过了验证。还有一个哈希密码。实际的密码永远不会存储在纯文本（或其他形式）中，单向哈希用于检查密码。
* `notes`：用户输入的笔记。`notes` 表包含了所有的笔记，每个笔记都有一个 `userId` 列，表示哪个用户拥有它们。`userId` 列的值与 `users` 表中的同名列匹配。这样，每个笔记显然都属于单个用户。
该文件内容如下：
```
create table if not exists notes (dateOf datetime, noteId bigint auto_increment primary key, userId bigint, note varchar(1000));
create table if not exists users (userId bigint auto_increment primary key, email varchar(100), hashed_pwd varchar(100), verified smallint, verify_token varchar(30), session varchar(100));
create unique index if not exists users1 on users (email);
```
#### 运行时数据（login.h）
为了正确地显示登录、注册和注销链接，你需要一些在应用程序中任何地方都可以使用的标志。此外，应用程序使用 cookie 来维护会话，因此它需要在任何地方都可用，例如，验证会话是否有效。发送到应用程序的每个请求都以这种方式进行确认。只有带有可验证 cookie 的请求是允许的。
所以要做到这种效果，你需要有一个 `global_request_data` 类型的 `reqdata`（请求数据），其中包含 `sess_userId`（用户的 ID）以及 `sess_id`（用户目前的会话 ID）。此外，还有一些不言自明的标志，可以帮助渲染页面：
```
#ifndef _VV_LOGIN
#define _VV_LOGIN
typedef struct s_reqdata {
    bool displayed_logout; // true 则显示登出连接
    bool is_logged_in; // true 则会话已验证登录
    char *sess_userId; // 目前会话的用户 ID
    char *sess_id; // 会话 ID
} reqdata;
void login_or_signup ();
#endif
```
#### 会话检查和会话数据（\_before.vely）
Vely 里有一个  请求前处理程序   before_request handler  的概念。你写的代码会在其它处理请求的代码之前执行的。要达到这个目的，你只需要将这样的代码写在名为 `_before.vely` 的文件中，然后剩余的部分将会自动处理。
SaaS 应用程序所作的任何事情，例如处理发送至应用程序的请求，必须验证其安全性。这样，应用程序就能知晓调用方是否有执行操作所需要的权限。
在这里，通过请求前处理程序进行权限检查。这样，无论其他代码如何处理请求，都已经掌握了会话信息。
为保持会话数据（比如会话 ID 和用户 ID）在你代码中的任何地方都可用，你可以使用 `global_request_data`。它只是一个指向内存的通用指针（`void*`），任何处理请求的代码都可以访问它。这非常适合处理会话，如下所示:
```
#include "vely.h"
#include "login.h"
// _before() 是一个请求前处理程序。
// 它总是在处理请求的其他代码之前执行。
// 对于任何类型的请求范围设置或数据初始化，它都是一个很好的位置。
void _before() {
    // 输出 HTTP 请求头
    out-header default
    reqdata *rd; // 这是全局请求数据，见 login.h
    // 为全局请求数据分配内存，
    // 将在请求结束时自动释放
    new-mem rd size sizeof(reqdata)
    // 初始化标志
    rd->displayed_logout = false;
    rd->is_logged_in = false;
    // 将我们创建的数据设置为全局请求数据，
    // 可以从任何处理请求的代码中访问
    set-req data rd
    // 检查会话是否存在（基于来自客户端的 cookie）
    // 这在任何其他请求处理代码之前执行，
    // 使其更容易准备好会话信息
    _check_session ();
}
```
#### 检查会话是否有效（\_check\_session.vely）
多租户 SaaS 应用程序中最重要的任务之一就是通过检查用户是否登录来（尽快）检查会话是否有效。这是通过从客户端（例如网络浏览器）获取会话 ID 和用户 ID 的 cookie，并将它们与存储会话的数据库进行比较来实现的：
```
#include "vely.h"
#include "login.h"
// 检查会话是否有效
void _check_session () {
    // 获取全局请求数据
    reqdata *rd;
    get-req data to rd
    // 自用户浏览器获取 cookies
    get-cookie rd->sess_userId="sess_userId"
    get-cookie rd->sess_id="sess_id"
    if (rd->sess_id[0] != 0) {
        // 检查给定用户 ID 下的会话 ID 是否正确
        char *email;
        run-query @db_multitenant_SaaS = "select email from users where userId='%s' and session='%s'" output email : rd->sess_userId, rd->sess_id row-count define rcount
            query-result email to email
        end-query
        if (rcount == 1) {
            // 如果正确，设置登录标志
            rd->is_logged_in = true;
            // 如果登出链接不显示，则显示它
            if (rd->displayed_logout == false) {
                @Hi >! Logout
                rd->displayed_logout = true;
            }
        } else rd->is_logged_in = false;
    }
}
```
#### 注册、登录、登出（login.vely）
任何多租户系统的基础便是具有用户注册\登录和登出的功能。通常情况下，注册包括验证电子邮件地址；不止于此，同一电子邮件地址会作为一个用户名。这里就是这种情况。
这里实现了几个执行该功能所必须的子请求：
* 注册新用户时，显示 HTML 表单以收集信息。它的 URL 请求签名是 `req=login&action=newuser`。
* 作为对注册表单的响应，创建一个新用户。URL 请求的签名是 `req=login&action=createuser`。输入参数（`input-param`）信号获取 `email` 和 `pwd` 的 POST 表单字段。密码值是单向散列，电子邮件验证令牌是一个随机的 5 位数字。这些被插入到 `users` 表中，创建一个新用户。系统会发送一封验证邮件，并提示用户阅读邮件并输入代码。
* 通过输入发送到该电子邮件的验证码来验证电子邮件。URL 请求的签名是 `req=login&action=verify`。
* 显示一个登录表单，让用户登录。URL 请求的签名是 `req=login`（例如，`action` 为空）。
* 通过验证电子邮件地址（用户名）和密码登录。URL 请求的签名是 `req=login&action=login`。
* 应用户要求登出。URL 请求的签名是 `req=login&action=logout`。
* 应用程序的登录页。URL 请求的签名是 `req=login&action=begin`。
* 如果用户当前已登录，转到应用程序的登录页面。
可以看看下面这些例子：
```
#include "vely.h"
#include "login.h"
// 处理云端多租户应用程序的会话维护、登录、注销、会话验证
void login () {
    // 获取 URL 的输入参数 `action`
    input-param action
    // 获取全局请求数据，我们在其中记录会话信息，所以它很方便
    reqdata *rd;
    get-req data to rd
    // 如果会话已经建立，我们不会
    // 继续到应用程序主页的唯一原因是我们正在登出
    if (rd->is_logged_in) {
        if (strcmp(action, "logout")) {
            _show_home();
            exit-request