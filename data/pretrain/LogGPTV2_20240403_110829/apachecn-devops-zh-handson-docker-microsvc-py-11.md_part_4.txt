在构建过程之后，版本作为容器内的标准环境变量可用。
We included a script (`build-test.sh `) in each of the microservices in this chapter  (for example, [https://github.com/PacktPublishing/Hands-On-Docker-for-Microservices-with-Python/blob/master/Chapter11/microservices/thoughts_backend/build-test.sh](https://github.com/PacktPublishing/Hands-On-Docker-for-Microservices-with-Python/blob/master/Chapter11/microservices/thoughts_backend/build-test.sh)). This mocks the SHA-1 and version name to create a synthetic version for tests. It sets up the `v2.3` version for the Users Backend and `v1.5` for the Thoughts Backend. These will be used for examples in our code. 
Check that the Kubernetes deployments include those versions (for example, the [https://github.com/PacktPublishing/Hands-On-Docker-for-Microservices-with-Python/blob/master/Chapter11/microservices/thoughts_backend/docker-compose.yaml#L21](https://github.com/PacktPublishing/Hands-On-Docker-for-Microservices-with-Python/blob/master/Chapter11/microservices/thoughts_backend/docker-compose.yaml#L21) image is the `v1.5` version).
此外，`VERSION_NAME`也可以作为脚本的参数来自 CI 管道。为此，您需要替换脚本以从外部接受它，如`build-ci.sh`脚本所示:
```
#!/bin/bash
if [ -z "$1" ]
  then
    # Error, not version name
    echo "No VERSION_NAME supplied"
    exit -1
fi
VERSION_SHA=`git log --format=format:%H -n 1`
VERSION_NAME=$1
docker-compose build --build-arg VERSION_NAME=${VERSION_NAME} --build-arg VERSION_SHA=${VERSION_SHA}
docker tag thoughts_server:latest throughs_server:${VERSION_NAME}
```
这些脚本的所有版本都包括以`VERSION_NAME`作为标签的映像的标签。
我们可以在 Python 代码中检索容器内部版本的环境变量，在端点中返回它们，使版本可以通过外部 API 轻松访问。
# 实现版本端点
在`admin_namespace.py`文件中，我们将使用以下代码创建一个新的`Version`端点:
```
import os
@admin_namespace.route('/version/')
class Version(Resource):
    @admin_namespace.doc('get_version')
    def get(self):
        '''
        Return the version of the application
        '''
        data = {
            'commit': os.environ['VERSION_SHA'],
            'version': os.environ['VERSION_NAME'],
        }
        return data
```
好了，现在这段代码非常简单。它使用`os.environ`来检索构建期间作为配置参数注入的环境变量，并返回一个带有提交 SHA-1 和标签的字典(描述为版本)。
该服务可以在本地构建和运行，使用`docker-compose`。要测试对`/admin/version`中端点的访问并进行检查，请执行以下步骤:
```
$ cd Chapter11/microservices/thoughts_backend
$ ./build.sh
...
Successfully tagged thoughts_server:latest
$ docker-compose up -d server
Creating network "thoughts_backend_default" with the default driver
Creating thoughts_backend_db_1 ... done
Creating thoughts_backend_server_1 ... done
$ curl http://localhost:8000/admin/version/
{"commit": "2257f9c5a5a3d877f5f22e5416c27e486f507946", "version": "tag-17-g2257f9c"}
```
由于版本可用，我们可以更新自动生成的文档来显示正确的值，如`app.py`所示:
```
import os
...
VERSION = os.environ['VERSION_NAME']
...
def create_app(script=False):
    ...
    api = Api(application, version=VERSION, 
              title='Thoughts Backend API',
              description='A Simple CRUD API')
```
因此，该版本会在自动斯瓦格文档中正确显示。一旦微服务的版本可以通过应用编程接口中的端点访问，其他外部服务就可以访问它来发现版本并使用它。
# 检查版本
能够通过应用编程接口检查版本允许我们以编程方式轻松访问版本。这可以用于多种目的，比如生成一个仪表板，显示在不同环境中部署的不同版本。但是我们将探索引入服务依赖的可能性。
微服务在启动时，可以检查它所依赖的服务，还可以检查它们是否高于预期版本。如果不是，就不会开始。这避免了在更新依赖项之前部署一个依赖服务时的配置问题。这可能发生在复杂的系统中，在这些系统中，部署没有很好的协调。
为了检查版本，在`start_server.sh`中启动服务器时，我们将首先调用一个检查依赖关系的小脚本。如果不可用，将产生错误并停止。我们将检查前端是否有思想后端的可用版本，甚至更高。
我们将在示例中调用的脚本称为`check_dependencies_services.py`，它在`start_server.sh`中被调用用于前端。
`check_dependencies_services`脚本可以分为三个部分:所需依赖项的列表；对一种依赖性的检查；和检查每个依赖关系的主要部分。让我们来看看这三个部分。
# 所需版本
第一部分描述了每个依赖项和所需的最低版本。在我们的示例中，我们规定`thoughts_backend`需要是版本`v1.6`或更高版本:
```
import os
VERSIONS = {
    'thoughts_backend': 
        (f'{os.environ["THOUGHTS_BACKEND_URL"]}/admin/version',
         'v1.6'),
}
```
这将重用环境变量`THOUGHTS_BACKEND_URL`，并使用特定的版本路径完成网址。
主要部分通过描述的所有依赖项来检查它们。
# 主要功能
主函数遍历`VERSIONS`字典，并对每个字典执行以下操作:
*   调用端点
*   分析结果并获取版本
*   调用`check_version`查看是否正确
如果失败，将以`-1`状态结束，因此脚本报告为失败。这些步骤通过以下代码执行:
```
import requests
def main():
    for service, (url, min_version) in VERSIONS.items():
        print(f'Checking minimum version for {service}')
        resp = requests.get(url)
        if resp.status_code != 200:
            print(f'Error connecting to {url}: {resp}')
            exit(-1)
        result = resp.json()
        version = result['version']
        print(f'Minimum {min_version}, found {version}')
        if not check_version(min_version, version):
            msg = (f'Version {version} is '
                    'incorrect (min {min_version})')
            print(msg)
            exit(-1)
if __name__ == '__main__':
    main()
```
主功能还会打印一些消息来帮助理解不同的阶段。为了调用版本端点，它使用`requests`包，并期望得到一个`200`状态代码和一个可解析的 JSON 结果。
Note that this code iterates through the `VERSION` dictionary. So far, we only added one dependency, but the User Backend is another dependency and can be added. It's left as an exercise to do.
版本字段将在`check_version`功能中检查，我们将在下一节中看到。
# 检查版本
`check_version`功能检查返回的当前版本是否高于或等于最低版本。为了简化，我们将使用`natsort`包对版本进行排序，然后检查最低版本。
You can check out the `natsort` full documentation ([https://github.com/SethMMorton/natsort](https://github.com/SethMMorton/natsort)). It can sort a lot of natural strings and can be used in a lot of situations.
基本上，`natsort `支持对常见的版本控制模式进行排序，包括我们之前描述的标准版本控制模式(`v1.6`高于`v1.5`)。下面的代码使用库对两个版本进行排序，并验证最低版本是较低的版本:
```
from natsort import natsorted
def check_version(min_version, version):
    versions = natsorted([min_version, version])
    # Return the lower is the minimum version
    return versions[0] == min_version
```
有了这个脚本，我们现在可以启动服务，它将检查思想后端是否有正确的版本。如果您按照*技术要求*部分所述启动服务，您将看到前端启动不正常，并产生`CrashLoopBackOff`状态，如下所示:
```
$ kubectl get pods -n example
NAME READY STATUS RESTARTS AGE
frontend-54fdfd565b-gcgtt 0/1 CrashLoopBackOff 1 12s
frontend-7489cccfcc-v2cz7 0/1 CrashLoopBackOff 3 72s
grafana-546f55d48c-wgwt5 1/1 Running 2 80s
prometheus-6dd4d5c74f-g9d47 1/1 Running 2 81s
syslog-76fcd6bdcc-zrx65 2/2 Running 4 80s
thoughts-backend-6dc47f5cd8-2xxdp 2/2 Running 0 80s
users-backend-7c64564765-dkfww 2/2 Running 0 81s
```
使用`kubectl logs`命令检查一个前端吊舱的日志，查看原因，如下所示:
```
$ kubectl logs frontend-54fdfd565b-kzn99 -n example
Checking minimum version for thoughts_backend
Minimum v1.6, found v1.5
Version v1.5 is incorrect (min v1.6)
```
要解决这个问题，您需要构建一个具有更高版本的思想后端版本，或者降低依赖性要求。这是留在本章末尾的评估。
# 摘要
在本章中，我们学习了如何处理同时与几个微服务一起工作的元素。
首先，我们讨论了当新功能需要更改多个微服务时要遵循的策略，包括如何以有序的方式部署小增量，以及在出现灾难性问题时能够回滚。
然后，我们讨论了定义一个清晰的版本化模式，并向 RESTful 接口添加一个版本端点，该端点允许自我发现微服务的版本。这种自我发现可用于确保依赖于另一个微服务的微服务在依赖关系不存在时不会被部署，这有助于协调发布。
The code in GitHub for the Frontend in this chapter ([https://github.com/PacktPublishing/Hands-On-Docker-for-Microservices-with-Python/tree/master/Chapter11/microservices/frontend](https://github.com/PacktPublishing/Hands-On-Docker-for-Microservices-with-Python/tree/master/Chapter11/microservices/frontend)) includes a dependency to the Thoughts Backend that will stop deploying it. Note that the code, as is, won't work. Fixing it is left as an exercise.
我们还学习了如何使用 ConfigMap 来描述在 Kubernetes 集群中不同服务之间共享的配置信息。我们随后描述了如何使用 Kubernetes 机密来处理敏感且需要额外小心的配置。
在下一章中，我们将看到以高效的方式协调不同团队使用不同微服务的各种技术。
# 问题
1.  在微服务架构系统和单块中发布变更有什么区别？
2.  为什么发布的变更在微服务架构中应该很小？
3.  语义版本化是如何工作的？
4.  在微服务架构系统中，与内部接口的语义版本化相关的问题是什么？
5.  添加版本端点有什么好处？
6.  我们如何解决本章代码中的依赖问题？
7.  我们应该将哪些配置变量存储在共享配置映射中？
8.  您能描述一下在单个共享配置映射中获取所有配置变量的优缺点吗？
9.  Kubernetes 配置图和 Kubernetes 机密有什么区别？
10.  我们如何改变 Kubernetes 的机密？
11.  想象一下，根据配置，我们决定将`public_key.pub`文件从机密更改为配置映射。我们必须实现哪些变革？
# 进一步阅读
为了在 AWS 上处理你的机密，你可以和一个叫做 credsstash([https://github.com/fugue/credstash](https://github.com/fugue/credstash))的工具进行交互。你可以在 *AWS SysOps 烹饪书-第二版*([https://www . packtpub . com/cloud-networking/AWS-administration-烹饪书-第二版](https://www.packtpub.com/cloud-networking/aws-administration-cookbook-second-edition))中了解更多如何使用它。*