### Session Resumption and Handshake Protocol in TLS 1.3

#### 1. Session Resumption
Session resumption allows a new session to be established using the previous session's key as a basis. This abbreviated handshake can be treated as a separate symmetric-key protocol, with an independent security analysis. Our compositional approach ensures that the resumption master secrets generated by the full handshake can be safely used in the abbreviated handshake.

#### 2. Design Insights for TLS 1.3
Our results provide insights into some of the design choices in TLS 1.3, such as the role of Finished messages and the new session hash. These insights are discussed in Section 3, following a review of the TLS 1.3 handshake structure in the next section.

#### 3. Related Work
- **Bhargavan et al. [BFK+14]**: Their work on the TLS 1.2 handshake protocol includes a comprehensive analysis in the agile setting, covering various ciphersuite options and applying the results to a miTLS implementation. They also address resumption and renegotiation in TLS 1.2 using epochs and shared states between executions.
- **Key Separation**: Bhargavan et al. overcome the issue of the session key being used in the final part of the TLS 1.2 handshake by separating these steps. They introduce (peer-)exchange variables to determine partners safely. In TLS 1.3, the Finished-message problem is eliminated, but the concept of alternative notions of safe partnering remains useful.
- **Contributive Identifiers**: We introduce contributive identifiers, which are similar to common session identifiers but are used specifically for non-mutually authenticated sessions. This concept is inspired by Cremers and Feltz's "origin-sessions" [CF12].

#### 4. Compositional Analysis
- **General Composition Result**: Unlike [BFK+14], we use a general composition result to handle resumption, viewing it as a special symmetric-key protocol following the handshake.
- **Implementation Level**: The analysis in [BFK+14] extends to the implementation level, whereas our results are purely abstract.

#### 5. Concurrent Work
- **Kohlweiss et al. [KMO+14]**: They analyze TLS 1.3 (draft-05) using constructive cryptography, assuming second-stage messages are sent unencrypted. They do not cover the resumption step or the draft-dh version. Our approach to integrating resumption via composition may be applicable to their model.

#### 6. Limitations
- **Draft Specifications**: Our analysis is based on the available draft specifications, and the final TLS 1.3 may differ. However, this analysis provides valuable insights into the design of the existing drafts.
- **Zero Round-Trip Time (0-RTT)**: Supporting 0-RTT in TLS 1.3 introduces challenges such as lack of forward secrecy and the possibility of replay attacks. Draft-05 does not specify 0-RTT handshakes, and draft-dh introduces a semi-static public key but lacks sufficient detail for a full cryptographic analysis.
- **Composition Frameworks**: Current frameworks support composition between key exchange protocols with forward secrecy and arbitrary symmetric key protocols. Session resumption, lacking forward secrecy, cannot be automatically composed with the record layer. Extending the framework to support multi-stage key exchange protocols without forward secrecy is a future research direction.

#### 7. Handshake Protocol in TLS 1.3
- **Draft-05 Handshake**:
  - **Negotiation Phase**: Parties negotiate ciphersuites and key-exchange parameters, generate unauthenticated shared key material, and establish handshake traffic keys.
  - **Authentication Phase**: Parties authenticate the handshake transcript and output authenticated application traffic keys.
  - **Message Flow**:
    - **ClientHello/ServerHello**: Contain supported versions, ciphersuites, and random nonces.
    - **ClientKeyShare/ServerKeyShare**: Contain ephemeral Diffie-Hellman shares.
    - **EncryptedExtensions, ServerCertificate, CertificateRequest, ServerCertificateVerify, ClientCertificate, ClientCertificateVerify, ClientFinished, ServerFinished**: These messages are encrypted using the handshake traffic key and include digital signatures and PRF evaluations.

- **Draft-dh Handshake**:
  - **ServerParameters**: Replaces ServerCertificateVerify and contains the server’s semi-static Diffie-Hellman share.
  - **Key Derivation**: Uses HKDF (extract-then-expand) instead of the TLS PRF.

- **Session Resumption**:
  - **Preshared-Secret Identifier**: Included in ClientHello to resume a previous session.
  - **Key Derivation**:
    1. `AMS ← HKDF.Extract(0, RMS)`
    2. `tkhs ← HKDF.Expand(AMS, label1kH)`
    3. `FS ← HKDF.Expand(AMS, label2krskrc)`
    4. `SF ← HKDF.Expand(FS, label3kH)`
    5. `CF ← HKDF.Expand(FS, label4kH)`
    6. `MS ← HKDF.Extract(0, AMS)`
    7. `tkapp ← HKDF.Expand(MS, label5kH)`

This structured and detailed approach provides a clear and professional overview of the session resumption and handshake protocol in TLS 1.3.