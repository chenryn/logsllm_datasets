# Veil-Pillage: Post-Exploitation 2.0

**Presented by:**
- **Will @harmj0y**
- **Veris Group – Adaptive Threat Division**

## About the Presenter
- **Security Researcher and Red Teamer**: Works for Veris Group’s Adaptive Threat Division.
- **Co-Founder of the Veil Framework**: [www.veil-framework.com](https://www.veil-framework.com/)
- **Key Contributions**:
  - Presented "AV Evasion with the Veil Framework" at Shmoocon 2014.
  - Co-wrote Veil-Evasion, authored Veil-Catapult, Veil-PowerView, and PowerUp.
  - Active in the Cortana, PowerShell, and NovaHacker communities.

## Overview
- The Veil Framework
- Post-Exploitation: Redux
- Veil-Pillage
- Current Module Overview
- Hashdumping and Plaintext Credentials
- Demos
- KB 2871997 (Microsoft PTH Fix?)
- Module Releases and Development
- Recap

## The Veil Framework
### Background
- **Initial Release**: May 2013, originally named "Veil," later renamed to "Veil-Evasion."
- **Functionality**: Generates AV-evading payloads using various languages and techniques, such as shellcode injection and 'pure' meterpreter stagers.
- **Debut**: Shmoocon 2014, "AV Evasion with the Veil Framework."

### Evolution
- **Focus Shift**: From AV evasion to payload delivery.
- **Objective**: Stealthy backdoor triggering on target systems.
- **Release**: Shmoocon 2014, Veil-Catapult, which can upload/host and execute binaries and perform other common tasks.

## The Attack Cycle
- Reconnaissance
- Enumeration
- Exploitation
- Post-Exploitation

## Post-Exploitation: Redux
- **Business Impact**: Identify critical points.
- **Data Mining**: Extract sensitive information.
- **Persistence**: Establish long-term access.
- **Privilege Escalation**: Gain domain/network administrative privileges.
- **Situational Awareness**: Understand the environment.
- **Access**: Exploit vulnerabilities to gain entry.

## Post-Exploitation: English
- **Scenario**: If you have access or credentials to one or more machines on a network, what can you do?
- **Example**: Having a local administrator hash for remote hosts and wanting to grab plaintexts of other logged-on users.

## Post-Exploitation: Today
### Option #1: PSEXEC with Metasploit
- **Advantages**:
  - Flexible, integrates with the entire Metasploit framework.
- **Drawbacks**:
  - Creates a service running as SYSTEM.
  - Generates a lot of non-standard traffic.
  - Drops a known malicious binary to disk.

### Option #2: Use smbexec to Upload/Execute wce.exe
- **Advantages**:
  - No need for a full Meterpreter session.
  - Does not rely on MSF binary templates.
- **Drawbacks**:
  - Still creates a SYSTEM service.
  - Uploads and executes a known malicious binary.

### Option #3: Pass-the-Hash Toolkit and PowerSploit
- **Advantages**:
  - No service created.
  - No binaries dropped to disk.
- **Drawbacks**:
  - Usage is complex.
  - Limited scalability for multiple hosts.
  - Requires PowerShell to be enabled and installed.

## What We Want
- **Trigger Options**: Preference for stealth.
- **Modularity**: Easy to implement new post-exploitation techniques.
- **Completeness**: Automation, comprehensive logging, and cleanup.

## Veil-Pillage
### Primitives
- **pthGwmis**: No service created.
- **pthGwinexe**: Runs as SYSTEM, binary dropped.
- **ImpacketGsmbexec**: Service created, no binaries dropped.
- **Impacket**: SMB servers and clients, and more.
- **Abstraction**: Everything abstracted into common library methods.

### Veil-Catapult Integration
- **Functionality**: All Veil-Catapult features are modularly integrated into Veil-Pillage.
- **Modules**:
  - `payload_delivery/exe_delivery`
  - `payload_delivery/powershell_injector`
  - `payload_delivery/python_injector`
  - `persistence/registry/sticky_keys`
- **Transition**: Veil-Catapult will be obsoleted. A blog post on the transition is forthcoming.

### exe_delivery
- **Ported Functionality**: Catapult functionality ported to Pillage.
- **Executable Handling**: Can specify or generate executables with seamless Veil-Evasion integration.
- **Delivery**: Uploads/triggers .EXEs or hosts/triggers them via UNC path, bypassing some AV detection.

### python_injector
- **Uploads**: Minimal Python .zip installation and 7zip binary.
- **Execution**: Unzips the Python environment and invokes shellcode using `-c ...`.
- **Disk Footprint**: Only trusted Python libraries and a Python interpreter touch the disk.

## New Features
### powershell_stager
- **Release**: Custom-written, 'pure' PowerShell meterpreter stagers (reverse_tcp, reverse_http, reverse_https).
- **Integration**: Works well with the pass-the-hash toolkit.

### Output/Cleanup
- **Logging**: Comprehensive logging.
- **Cleanup**: Leaves systems in their original state.
- **Systematic Approach**: Ensures a clean and systematic process.

### Random Features
- **State Preservation**: Preserves all options on exit/rage quit.
- **MSF Database Interaction**: Pulls in existing hosts and credential sets.
- **User Experience**: Tab completion, error checking, and complete command-line options.

## External Integration
- **Command-Line Flags**: Complete set of flags for scripting and integration.
- **Library Import**: Easily integrate Veil-Pillage functionality as a library import.

### Example
```python
from modules.management import check_uac
module = check_uac.Module(
    targets=["192.168.1.100"],
    creds=[["Administrator", "password"]]
)
module.run()
print(module.output)
```

## Summary
- **Primitives**:
  - pth-wmis
  - pth-winexe
  - Impacket-smbexec
  - Impacket

This document provides a clear, professional, and detailed overview of the Veil-Pillage framework and its capabilities.