...
[domain/ad.example.com]
pam_gssapi_services = sudo
pam_gssapi_check_upn = false
...
```
::: itemizedlist
**其他资源**
-   [Kerberos
    认证指示符](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_and_managing_identity_management/managing-kerberos-ticket-policies_configuring-and-managing-idm#kerberos-authentication-indicators_managing-kerberos-ticket-policies){.link}
:::
:::
::: section
::: titlepage
# []{#granting-sudo-access-to-an-IdM-user-on-an-IdM-client_managing-users-groups-hosts.html#proc_troubleshooting-gssapi-authentication-for-sudo_granting-sudo-access-to-an-IdM-user-on-an-IdM-client}sudo 的 GSSAPI 身份验证故障排除 {.title}
:::
如果您无法使用 IdM 的 Kerberos 票据对 `sudo`{.literal}
服务进行身份验证，请使用以下场景对您的配置进行故障排除。
::: itemizedlist
**先决条件**
-   您已为 `sudo`{.literal} 服务启用了 GSSAPI 身份验证。请参阅 [在 IdM
    客户端上为 sudo 启用 GSSAPI
    身份验证](#granting-sudo-access-to-an-IdM-user-on-an-IdM-client_managing-users-groups-hosts.html#proc_enabling-gssapi-authentication-for-sudo-on-an-idm-client_granting-sudo-access-to-an-IdM-user-on-an-IdM-client "在 IdM 客户端上为 sudo 启用 GSSAPI 身份验证"){.link}。
-   您需要 `root`{.literal} 权限来修改 `/etc/sssd/sssd.conf`{.literal}
    文件和 `/etc/pam.d/`{.literal} 目录中的 PAM 文件。
:::
::: itemizedlist
**步骤**
-   如果您看到以下错误，Kerberos
    服务可能无法为基于主机名的服务票据解析正确的域：
    ``` literallayout
    Server not found in Kerberos database
    ```
    在这种情况下，将主机名直接添加到 `/etc/krb5.conf`{.literal} Kerberos
    配置文件中的 `[domain_realm]`{.literal} 部分：
    ``` literallayout
    [idm-user@idm-client ~]$ cat /etc/krb5.conf
    ...
    [domain_realm]
     .example.com = EXAMPLE.COM
     example.com = EXAMPLE.COM
     server.example.com = EXAMPLE.COM
    ```
-   如果看到以下错误，则您没有任何 Kerberos 凭证：
    ``` literallayout
    No Kerberos credentials available
    ```
    在这种情况下，使用 `kinit`{.literal} 工具检索 Kerberos
    凭证，或者通过 SSSD 进行身份验证：
    ``` literallayout
    [idm-user@idm-client ~]$ kinit PI:EMAIL
    Password for PI:EMAIL:
    ```
-   如果您在 `/var/log/sssd/sssd_pam.log`{.literal}
    日志文件中看到以下错误之一，则 Kerberos
    凭证与当前登录的用户的用户名不匹配：
    ``` literallayout
    User with UPN [] was not found.
    UPN [] does not match target user [].
    ```
    在这种情况下，验证您使用 SSSD 进行身份验证，或考虑禁用
    `/etc/sssd/sssd.conf`{.literal} 文件中的
    `pam_gssapi_check_upn`{.literal} 选项：
    ``` literallayout
    [idm-user@idm-client ~]$ cat /etc/sssd/sssd.conf
    ...
    pam_gssapi_check_upn = false
    ```
-   若要进行额外的故障排除，您可以对 `pam_sss_gss.so`{.literal} PAM
    模块启用调试输出。
    ::: itemizedlist
    -   在 PAM 文件（如 `/etc/pam.d/sudo`{.literal} 和
        `/etc/pam.d/sudo-i`{.literal} ）中所有
        `pam_sss_gss.so`{.literal} 条目的末尾添加 `debug`{.literal}
        选项：
        ``` literallayout
        [root@idm-client ~]# cat /etc/pam.d/sudo
        #%PAM-1.0
        auth       sufficient   pam_sss_gss.so   debug
        auth       include      system-auth
        account    include      system-auth
        password   include      system-auth
        session    include      system-auth
        ```
        ``` literallayout
        [root@idm-client ~]# cat /etc/pam.d/sudo-i
        #%PAM-1.0
        auth       sufficient   pam_sss_gss.so   debug
        auth       include      sudo
        account    include      sudo
        password   include      sudo
        session    optional     pam_keyinit.so force revoke
        session    include      sudo
        ```
    -   尝试使用 `pam_sss_gss.so`{.literal}
        模块进行身份验证，并查看控制台输出。在本例中，用户没有任何
        Kerberos 凭据。
        ``` literallayout
        [idm-user@idm-client ~]$ sudo ls -l /etc/sssd/sssd.conf
        pam_sss_gss: Initializing GSSAPI authentication with SSSD
        pam_sss_gss: Switching euid from 0 to 1366201107
        pam_sss_gss: Trying to establish security context
        pam_sss_gss: SSSD User name: PI:EMAIL
        pam_sss_gss: User domain: idm.example.com
        pam_sss_gss: User principal:
        pam_sss_gss: Target name: PI:EMAIL
        pam_sss_gss: Using ccache: KCM:
        pam_sss_gss: Acquiring credentials, principal name will be derived
        pam_sss_gss: Unable to read credentials from [KCM:] [maj:0xd0000, min:0x96c73ac3]
        pam_sss_gss: GSSAPI: Unspecified GSS failure.  Minor code may provide more information
        pam_sss_gss: GSSAPI: No credentials cache found
        pam_sss_gss: Switching euid from 1366200907 to 0
        pam_sss_gss: System error [5]: Input/output error
        ```
    :::
:::
:::
::: section
::: titlepage
# []{#granting-sudo-access-to-an-IdM-user-on-an-IdM-client_managing-users-groups-hosts.html#using-an-Ansible-playbook-to-ensure-sudo-access-for-an-IdM-user-on-an-IdM-client_granting-sudo-access-to-an-IdM-user-on-an-IdM-client}使用 Ansible playbook 确保 IdM 客户端上的 IdM 用户具有 sudo 访问权限 {.title}
:::
在身份管理(IdM)中，您可以确保对特定命令的 `sudo`{.literal}
访问权限被授予给特定 IdM 主机上的 IdM 用户帐户。
完成此流程以确保名为 [**idm_user_reboot**]{.strong} 的 `sudo`{.literal}
规则存在。该规则授予 [**idm_user**]{.strong} 在 [**idmclient**]{.strong}
机器上运行 `/usr/sbin/reboot`{.literal} 命令的权限。
::: itemizedlist
**先决条件**
-   您已在 Ansible 控制器上安装了
    [ansible-freeipa](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/installing_identity_management/index#installing-the-ansible-freeipa-package_server-ansible){.link}
    软件包。
-   您知道 IdM 管理员密码。
-   您已 [确保 IdM 中存在 [**idm_user**]{.strong}
    用户帐户，并通过为用户创建密码解锁了帐户](#managing-user-accounts-using-Ansible-playbooks_managing-users-groups-hosts.html#ensuring-the-presence-of-an-IdM-user-using-an-Ansible-playbook_managing-idm-users-using-Ansible-playbooks "使用 Ansible playbook 确保存在一个 IdM 用户"){.link}。有关使用命令行界面添加新
    IdM
    用户的详情，请参阅[使用命令行添加用户](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/configuring_and_managing_identity_management/index#adding-users-using-the-command-line_managing-idm-users-using-the-command-line){.link}。
-   您已 [确保 IdM 中存在 [**idm_user**]{.strong}
    用户帐户，并通过为用户创建密码解锁了帐户](#managing-user-accounts-using-Ansible-playbooks_managing-users-groups-hosts.html#ensuring-the-presence-of-an-IdM-user-using-an-Ansible-playbook_managing-idm-users-using-Ansible-playbooks "使用 Ansible playbook 确保存在一个 IdM 用户"){.link}。有关使用命令行界面添加新
    IdM
    用户的详情，请参阅[使用命令行添加用户](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/configuring_and_managing_identity_management/index#adding-users-using-the-command-line_managing-idm-users-using-the-command-line){.link}。
-   您已 [确保 IdM 中存在 [**idm_user**]{.strong}
    用户帐户，并通过为用户创建密码解锁了帐户](#managing-user-accounts-using-Ansible-playbooks_managing-users-groups-hosts.html#ensuring-the-presence-of-an-IdM-user-using-an-Ansible-playbook_managing-idm-users-using-Ansible-playbooks "使用 Ansible playbook 确保存在一个 IdM 用户"){.link}。有关使用命令行界面添加新
    IdM
    用户的详情，请参阅[使用命令行添加用户](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/configuring_and_managing_identity_management/index#adding-users-using-the-command-line_managing-idm-users-using-the-command-line){.link}。
-   [**idmclient**]{.strong} 中没有本地 [**idm_user**]{.strong}
    帐户。[**idm_user**]{.strong} 用户未列在 [**idmclient**]{.strong}
    上的 `/etc/passwd`{.literal} 文件中。
:::
::: orderedlist
**步骤**
1.  创建一个清单文件，如 `inventory.file`{.literal}，并在其中定义
    `ipaservers`{.literal} ：
    ``` literallayout
    [ipaservers]
    server.idm.example.com
    ```
2.  添加一个或多个 `sudo`{.literal} 命令：
    ::: orderedlist
    1.  创建一个 `ensure-reboot-sudocmd-is-present.yml`{.literal}
        Ansible playbook，来确保 `sudo`{.literal} 命令的 IdM
        数据库中存在 `/usr/sbin/reboot`{.literal}
        命令。要简化此步骤，您可以复制并修改 `/usr/share/doc/ansible-freeipa/playbooks/sudocmd/ensure-sudocmd-is-present.yml`{.literal}
        文件中的示例：
        ``` literallayout
        ---
        - name: Playbook to manage sudo command
          hosts: ipaserver
          become: true
          tasks:
          # Ensure sudo command is present
          - ipasudocmd:
              ipaadmin_password: MySecret123
              name: /usr/sbin/reboot
              state: present
        ```
    2.  运行 playbook：
        ``` literallayout
        $ ansible-playbook -v -i path_to_inventory_directory/inventory.file path_to_playbooks_directory/ensure-reboot-sudocmd-is-present.yml
        ```
    :::
3.  创建一个引用命令的 `sudo`{.literal} 规则：
    ::: orderedlist
    1.  创建一个
        `ensure-sudorule-for-idmuser-on-idmclient-is-present.yml`{.literal}
        Ansible playbook，来使用 `sudo`{.literal} 命令条目确保存在 sudo
        规则。sudo 规则允许 [**idm_user**]{.strong} 重新启动
        [**idmclient**]{.strong}
        机器。要简化此步骤，您可以复制并修改 `/usr/share/doc/ansible-freeipa/playbooks/sudorule/ensure-sudorule-is-present.yml`{.literal}
        文件中的示例：
        ``` literallayout
        ---
        - name: Tests
          hosts: ipaserver
          become: true
          tasks:
          # Ensure a sudorule is present granting idm_user the permission to run /usr/sbin/reboot on idmclient
          - ipasudorule:
              ipaadmin_password: MySecret123
              name: idm_user_reboot
              description: A test sudo rule.
              allow_sudocmd: /usr/sbin/reboot
              host: idmclient.idm.example.com
              user: idm_user
              state: present
        ```
    2.  运行 playbook：
        ``` literallayout
        $ ansible-playbook -v -i path_to_inventory_directory/inventory.file path_to_playbooks_directory/ensure-sudorule-for-idmuser-on-idmclient-is-present.yml
        ```
    :::
:::
::: title
**验证步骤**
:::
通过验证 [**idm_user**]{.strong} 能够使用 `sudo`{.literal} 重启
[**idmclient**]{.strong}，来测试您在 IdM 服务器上确认其存在性的
`sudo`{.literal} 规则是否在 [**idmclient**]{.strong}
上可以工作。请注意，可能需要过几分钟后，服务器上所做的更改才会对客户端生效。
::: orderedlist
1.  以 [**idm_user**]{.strong} 用户身份登录到 [**idmclient**]{.strong}。
2.  使用 `sudo`{.literal} 重新启动计算机。在提示时输入
    [**idm_user**]{.strong} 的密码：
    ``` literallayout
    $ sudo /usr/sbin/reboot
    [sudo] password for idm_user:
    ```
:::
如果正确配置了 `sudo`{.literal}，则机器将重启。
::: itemizedlist
**其他资源**
-   请参阅 `/usr/share/doc/ansible-freeipa/`{.literal} 目录中的
    `README-sudocmd.md`{.literal}, `README-sudocmdgroup.md`{.literal},
    和 `README-sudorule.md`{.literal} 文件。
:::
:::
:::
[]{#using-ldapmodify-to-manage-IdM-users-externally_managing-users-groups-hosts.html}
::: chapter
::: titlepage
# []{#using-ldapmodify-to-manage-IdM-users-externally_managing-users-groups-hosts.html#using-ldapmodify-to-manage-IdM-users-externally_managing-users-groups-hosts}第 6 章 使用 ldapmodify 在外部管理 IdM 用户 {.title}
:::
您可以使用 `ldapmodify`{.literal} 和 `ldapdelete`{.literal}
工具直接从命令行界面(CLI)修改身份管理(IdM)LDAP。这些工具提供了用于添加、编辑和删除目录内容的完整功能。您可以使用这些工具管理服务器的配置条目以及用户条目中的数据。这些工具也可用于编写脚本，来执行一个或多个目录的批量管理。
::: section
::: titlepage
# []{#using-ldapmodify-to-manage-IdM-users-externally_managing-users-groups-hosts.html#templates-for-managing-IdM-user-accounts-externally_using-ldapmodify-to-manage-IdM-users-externally}在外部管理 IdM 用户帐户的模板 {.title}
:::
本节描述了 IdM 中各种用户管理操作的模板。模板显示您必须使用
`ldapmodify`{.literal} 修改哪些属性才能实现以下目标：
::: itemizedlist
-   添加新的 stage 用户
-   修改用户属性
-   启用用户
-   禁用用户
-   保留用户
:::
模板的格式为 LDAP 数据交换格式(LDIF)。LDIF
是一种标准的纯文本数据交换格式，用来表示 LDAP 目录内容和更新请求。
使用模板，您可以配置调配系统的 LDAP 提供者来管理 IdM 用户帐户。
如需详细的示例流程，请参阅以下部分：
::: itemizedlist
-   [添加 LDIF 文件中定义的 IdM stage
    用户](#configuring-IdM-for-external-provisioning-of-users_managing-users-groups-hosts.html#adding-an-IdM-stage-user-defined-in-an-LDIF-file_configuring-IdM-for-external-provisioning-of-users "添加 LDIF 文件中定义的 IdM stage 用户"){.link}
-   [使用 ldapmodify 直接从 CLI 添加 IdM stage
    用户](#configuring-IdM-for-external-provisioning-of-users_managing-users-groups-hosts.html#adding-an-IdM-stage-user-directly-from-the-CLI-using-ldapmodify_configuring-IdM-for-external-provisioning-of-users "使用 ldapmodify 直接从 CLI 添加 IdM stage 用户"){.link}
-   [使用 ldapmodify 保留 IdM
    用户](#using-ldapmodify-to-manage-IdM-users-externally_managing-users-groups-hosts.html#preserving-an-IdM-user-with-ldapmodify_using-ldapmodify-to-manage-IdM-users-externally "使用 ldapmodify 保留 IdM 用户"){.link}
:::
::: itemizedlist
**用于添加新 stage 用户的模板**
-   用于添加 [**自动分配了 UID 和 GID** ]{.strong}
    的用户的模板。所创建的条目的可区别的名称(DN)必须以
    `uid=user_login`{.literal} 开头：
    ``` literallayout
    dn: uid=user_login,cn=staged users,cn=accounts,cn=provisioning,dc=idm,dc=example,dc=com
    changetype: add
    objectClass: top
    objectClass: inetorgperson
    uid: user_login