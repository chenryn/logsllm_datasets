char version[KMOD_MAX_NAME];
int reference_count; // number of references to this kmod
kmod_reference_t *reference_list; // references made by this kmod
vm_address_t address; // starting address
vm_size_t size; // total size
vm_size_t hdr_size; // unwired header size
kmod_start_func_t *start; // module start entry point
kmod_stop_func_t *stop; // module termination entry point
} kmod_info_t;
StartIOKit() also initializes key I/O Kit classes by calling their initialize() methods, such as the
following.
 IORegistryEntry::initialize() sets up the I/O Registry by creating its root node (called Root)
and initializing relevant data structures such as locks and an OSDictionary object to hold I/O Kit
planes.
 IOService::initialize() initializes I/O Kit planes (such as the Service and Power planes) and
creates various global I/O Kit data structures such as keys, locks, dictionaries, and lists.
 As we saw earlier, the IOCatalogue class implements an in-kernel database for driver personalities.
An IOCatalogue instance is published as a resource used by IOService to match devices to their
associated drivers. A typical matching process involves a caller providing a matching dictionary
containing key-value pairs on which to base the matching. The number and type of keys determine
how specific or generic a result will be and whether there will be a match at all.
IOCatalogue::initialize() uses gIOKernelConfigTables, which is a serialized OSArray of
OSDictionary data types, to initialize the I/O Catalog with personalities corresponding to a few built-
in drivers, such as those shown in Table 101.
 IOMemoryDescriptor::initialize() allocates a recursive lock used by the IOMemoryDescriptor
class, which is an abstract base class that defines common methods for describing both physical and
virtual memory. An IOMemoryDescriptor is specified as one or more physical or virtual address
ranges corresponding to a memory buffer or memory range. The initialization function also creates an
I/O Registry property (IOMaximumMappedIOByteCount) representing the maximum amount of
memory that can be wired using the wireVirtual() method.
StartIOKit() finally creates an instance of the IOPlatformExpertDevice class as the system's root nub.
As we have seen earlier, the Platform Expert is a motherboard-specific driver object that knows the type of
platform the system is running on. The root nub's initialization allocates the I/O Kit device tree, initializes
the Device Tree plane, and creates an instance of the IOWorkLoop class. The model property of the root nub
specifies a particular type and version of Apple computer, such as the following:
MacBookProM,N (the x86-based MacBook Pro line)
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 16 of 79
PowerBookM,N (the PowerBook and iBook lines)
PowerMacM,N (the PowerMac line)
RackMacM,N (the Xserve line)
M represents the major revision, whereas N represents the minor revision.
The root nub instance is then published for matching. The matching process begins with the IOService
class method startMatching(), which invokes the doServiceMatch() method synchronously or
asynchronously, as indicated by the caller.
IOPlatformExpertDevice is a provider to a system architecturespecific driver, such as MacRISC4PE
(systems based on the G5 processor, the U3 memory controller, and the K2 I/O controller) or MacRISC2PE
(systems based on G3 and G4 processors, the UniNorth memory controller, and the KeyLargo I/O
controller).
10.2.11. Driver Matching in the I/O Kit
The process of finding a suitable driver for a device attached to the system is called driver matching. This
process is performed every time a system boots but can also be performed later if a device is attached to a
running system.
Each driver's property list file defines one or more of the driver's personalities, which are sets of properties
specified as key-value pairs. These properties are used to determine whether the driver can drive a particular
device. At the nub's behest, the I/O Kit finds and loads candidate drivers. Next, it incrementally narrows the
search for the most suitable driver. A typical search has the following stages of matching:
Class matching, during which drivers are ruled out based on their class being inappropriate with
respect to the provider service (the nub)
Passive matching, during which drivers are ruled out based on device-specific properties contained in
driver personalities, with respect to the properties specific to the provider's family
Active matching, during which drivers in the pared-down list of candidates are actively probed by
calling each driver's probe() method, passing it a reference to the nub it is being matched against
Before active matching begins, the list of candidate drivers is ordered by the initial probe score of each
driver. The probe score signifies confidence in the drivability of the device by the driver. A driver
personality can specify an initial score using the IOProbeScore key. For each candidate driver, the I/O Kit
instantiates the driver's principal class and calls its init() method. The principal class is the one specified
by the IOClass key in the driver's personality. Next, the I/O Kit attaches the new instance to the provider by
calling the attach() method. If the driver implements the probe() method, the I/O Kit calls it. In this
method, a driver can communicate with the device to verify whether it can drive the device and possibly
modify the probe score. Once the probe() method returns (or if there is no probe() implementation), the
I/O Kit detaches the driver by calling the detach() method and moves to the next candidate driver.
After the probing phase, the probe scores of candidate drivers that could be successfully probed are
considered in decreasing order. The drivers are first grouped into categories based on the IOMatchCategory
optional key in driver personalities. Drivers that do not specify this key are all considered to belong to the
same category. At most one driver in each category can be started on a given provider. For each category,
the driver with the highest probe score is attached (again, through the attach() method) and started
(through the start() method). A copy of the driver's personality is placed in the I/O Registry. If the driver
starts successfully, the remaining drivers in the category are discarded; otherwise, the failed driver's class
instance is freed and the candidate with the next highest probe score is considered.
If a driver has multiple personalities, each personality is treated as a separate driver from the standpoint of
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 17 of 79
the matching process. In other words, a driver containing multiple matching dictionaries can apply to
multiple devices.
10.3. DART
With the advent of the 64-bit G5-based computers that support more than 4GB of physical memory, Mac OS
X had to incorporate support for 64-bit memory addressing.[4] However, the PCI and PCI-X busses on the
G5 still employ 32-bit addressing. This causes physical addresses (64-bit) to be different from I/O addresses
(32-bit) on the G5.
[4] It is possible for a computer system based on a 32-bit processor to support more than 4GB of
physical memory.
As we saw in Chapter 8, even with support for 64-bit user address spaces, the kernel's address space,
including the I/O Kit's runtime environment, remains 32-bit in Mac OS X.
As we noted in Section 3.3.3.2, besides the standard memory management unit (MMU), G5-based Apple
computers use an additional MMU for I/O addresses. This Device Address Resolution Table (DART)
creates mappings between linear addresses and physical addresses. It is implemented as an application-
specific integrated circuit (ASIC) that physically resides in the North Bridge. It translates memory accesses
from HyperTransport/PCI devices. In particular, it provides dynamic DMA mapping support, and all DMA
accesses are channeled through it.
The DART translates only memory accesses that fall in the range 0GB through 2GB, that is, 31 bits of
memory; thus, HyperTransport/PCI devices cannot access more than 2GB of memory at a time. In other
words, the DART supports up to 2GB of I/O data in some stage of transfer at any given time. The translated
physical addresses are 36 bits wide. The DART driver manages the 2GB I/O space using power-of-2-sized
zones, with the smallest zone size being 16KB, which, consequently, is the lower bound on the size of an
allocation. The driver limits the size of a single allocation to be at most half the total size of the space.
Therefore, a single mapping can be at most 1GB in size.
The AppleMacRiscPCI kernel extension implements the DART driver. The AppleDART class inherits from
the IOMapper class, which in turn inherits from IOService.
Given its allocation algorithm, the DART driver is likely to return contiguous I/O memory for most
allocations, even though the underlying physical memory may be fragmented. In general, the driver of the
device in question will see the memory as contiguous and is likely to have improved performance for DMA
transfers. This is why the DART is enabled even on G5-based systems with less than 2GB of physical
memory.
A device driver is not required to directly interface with the DART or to even know of its existence. If a
driver uses IOMemoryDescriptor objects for accessing and manipulating memory, the I/O Kit automatically
sets up the DART. If a driver performs DMA on a G5-based system, it must use IOMemoryDescriptor and
thus will implicitly use the DART. Moreover, before DMA can be initiated for an IOMemoryDescriptor
object, its prepare() method must be called to prepare the associated memory for an I/O transfer. On the
G5, this preparation converts the system's 64-bit addresses to 32-bit addresses for DMA, including creation
of entries in the DART. Additionally, the preparation may page in memory and wire it down for the duration
of the transfer. The complete() method of IOMemoryDescriptor must be called to complete the processing
of memory after the I/O transfer finishes. As a general rule, a driver must call prepare() on all
IOMemoryDescriptor objects before using them,[5] whether it is for DMA or programmed I/O (PIO). The
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 18 of 79
getPhysicalSegment() method of IOMemoryDescriptor is relevant for DMA, since it breaks a memory
descriptor into its physically contiguous segments. Progammed I/O can be performed by calling the
readBytes() and writeBytes() methods of IOMemoryDescriptor.
[5] In some cases, if a memory descriptor describes wired memory, preparation may be
automatic.
As we saw in Section 8.16.6, the I/O Kit's IOMallocContiguous() function implicitly prepares the
physically contiguous memory it returns. Although it is possible to obtain the physical address of the
allocated memory from IOMallocContiguous(), that address is not the actual physical address but the
DART'ed (translated) physical address.[6] The I/O Kit does not expose the real physical address to the
programmer. If a real address were nevertheless presented to the I/O Kit by a driver, the operation would fail
because the DART would be unable to handle the translation.
[6] A corollary is that DMA addresses are always less than 2GB on Mac OS X.
10.4. Dynamically Extending the Kernel
The Mac OS X kernel is extensible through dynamically loadable components called kernel extensions, or
simply kexts. A kext is loaded into the kernel either by the kernel's built-in loader (during early stages of
bootstrapping) or by the user-level daemon kextd, which loads kexts when requested by user processes or
the kernel. On being loaded, a kext resides in the kernel's address space, executing in privileged mode as
part of the kernel. Numerous I/O Kit device drivers and device families are implemented as kexts. Besides
device drivers, kexts also exist for loadable file systems and networking components. In general, a kext can
contain arbitrary codesay, common code that may be accessed from multiple other kexts. Such a kext would
be akin to a loadable in-kernel library.
10.4.1. The Structure of a Kernel Extension
A kext is a type of bundle, much like an application bundle. A kext bundle's folder has a .kext extension.[7]
Note that the extension is not merely conventionalit is required by the Mac OS X tools that deal with kernel
extensions. A kext bundle must contain an information property list file (Info.plist) in its Contents/
subdirectory. The property list specifies the kext's contents, configuration, and dependencies in an XML-
formatted dictionary of key-value pairs. When a kext is loaded into the kernel, the contents of its
Info.plist are converted to kernel data structures for in-memory storage.[8] A kext bundle normally also
contains at least one kernel extension binary, which is a Mach-O executable. It can optionally contain
resources such as helper programs and icons in its Resources/ subdirectory. Moreover, a kext bundle can
contain other kext bundles as plug-ins.
[7] The Finder treats a kext bundle as a single, indivisible entity.
[8] Many of these data structures are analogs of Core Foundation data structures, such as
dictionaries, arrays, strings, and numbers.
It is possible to have a valid kext bundle without any executables. The Info.plist file of such a kext may
reference another kext in order to alter the characteristics of the latter. For example,
ICAClassicNotSeizeDriver.kext does not contain an executable, but it holds several driver personalities
that refer to AppleUSBMergeNub.kext, which is a plug-in kext within IOUSBFamily.kext.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 19 of 79
Kernel-loadable binaries contained within kexts are statically linked, relocatable Mach-O binaries called
kernel modules, or kmods. In other words, a kext is a structured folder containing one or more kmods along
with mandatory metadata and optional resources. Figure 106 shows the structure of a simple kext bundle.
Figure 106. The contents of a simple kernel extension bundle
DummyKEXT.kext/
DummyKEXT.kext/Contents/
DummyKEXT.kext/Contents/Info.plist
DummyKEXT.kext/Contents/MacOS/
DummyKEXT.kext/Contents/MacOS/DummyKEXT
DummyKEXT.kext/Contents/Resources/
DummyKEXT.kext/Contents/Resources/English.lproj/
DummyKEXT.kext/Contents/Resources/English.lproj/InfoPlist.strings
It is important to note that even though a kmod is a statically linked Mach-O object file, nontrivial kmods
usually have unresolved external references that are resolved when the kext is dynamically loaded into the
kernel.
10.4.2. Creation of Kernel Extensions
Although most driver kexts are created using only I/O Kit interfaces, a kext maydepending on its purpose
and natureinteract with the BSD and Mach portions of the kernel. In any case, loading and linking of kexts is
always handled by the I/O Kit. The preferred and most convenient way to create a kernel extension is by
using one of the kernel extension project templates in Xcode. In fact, other than for a contrived reason, it
would be rather pointless to compile a kmod and package it into a kernel extension manuallysay, using a
hand-generated makefile. Xcode hides several details (such as variable definitions, compiler and linker flags,
and other rules for compiling and linking kernel extensions) from the programmer. Two kernel extension
templates are available in Xcode: one for generic kernel extensions and one for I/O Kit drivers. A primary
difference between them is that an I/O Kit driver is implemented in C++, whereas a generic kernel extension
is implemented in C. It is also possible to create a library kext containing reusable code that can be used by
multiple other kexts.
Definitions and rules for various types of Xcode projects reside in the /Developer/Makefiles/ directory.
Figure 107 shows an excerpt from the build output of a Universal kernel extensionan I/O Kit
drivercontaining kmods for the PowerPC and x86 architectures. The path to the build directory, which is
normally a subdirectory called build in the kernel extension's Xcode project directory, has been replaced by
$BUILDDIR in the output shown.
Figure 107. Excerpt from the build output of a Universal kernel extension
/usr/bin/gcc-4.0 -x c++ -arch ppc -pipe -Wno-trigraphs -fasm-blocks -Os -Wreturn-type
-Wunused-variable -fmessage-length=0 -fapple-kext -mtune=G5 -Wno-invalid-offsetof
-I$BUILDDIR/DummyDriver.build/Release/DummyDriver.build/DummyDriver.hmap
-F$BUILDDIR/Release -I$BUILDDIR/Release/include -I/System/Library/Frameworks/
Kernel.framework/PrivateHeaders -I/System/Library/Frameworks/Kernel.framework/Headers
-I$BUILDDIR/DummyDriver.build/Release/DummyDriver.build/DerivedSources -fno-common
-nostdinc -fno-builtin -finline -fno-keep-inline-functions -force_cpusubtype_ALL
-fno-exceptions -msoft-float -static -mlong-branch -fno-rtti -fcheck-new -DKERNEL
-DKERNEL_PRIVATE -DDRIVER_PRIVATE -DAPPLE -DNeXT -isysroot /Developer/SDKs/
MacOSX10.4u.sdk -c /tmp/DummyDriver/DummyDriver.cpp -o $BUILDDIR/DummyDriver.build/
Release/DummyDriver.build/Objects-normal/ppc/DummyDriver.o
...
/usr/bin/g++-4.0 -o $BUILDDIR/DummyDriver.build/Release/DummyDriver.build/Objects-
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 20 of 79
normal/ppc/DummyDriver -L$BUILDDIR/Release -F$BUILDDIR/Release -filelist $BUILDDIR/
DummyDriver.build/Release/DummyDriver.build/Objects-normal/ppc/
DummyDriver.LinkFileList -arch ppc -static -nostdlib -r -lkmodc++ $BUILDDIR/
DummyDriver.build/Release/DummyDriver.build/Objects-normal/ppc/DummyDriver_info.o
-lkmod -lcc_kext
-lcpp_kext -isysroot /Developer/SDKs/MacOSX10.4u.sdk
...
/usr/bin/lipo -create $BUILDDIR/DummyDriver.build/Release/DummyDriver.build/
Objects-normal/ppc/DummyDriver $BUILDDIR/DummyDriver.build/Release/
DummyDriver.build/Objects-normal/i386/DummyDriver -output $BUILDDIR/Release/
DummyDriver.kext/Contents/MacOS/DummyDriver
...
Note that the Kernel framework (Kernel.framework), which is referenced by the compiler in the output
shown in Figure 107, provides only kernel headersit does not contain any libraries.
We see in Figure 107 that the kmod being compiled is linked with several libraries and an object file called
_info.o, where  is the kmod's nameDummyDriver in our example. These entities serve the
following purposes.
 libkmodc++.a and libkmod.a both reside in /usr/lib/ and contain the runtime startup and
shutdown routines for C++ and C, respectively.
_info.c, the source file corresponding to the object file _info.o, is generated during
the kernel module's compilation. The combination of libkmodc++.a, libkmod.a, and
_info.a provides conceptually similar functionality as a user-space language runtime
initialization object file (such as crt0.o).
 libcc_kext.a is a specially compiled version of the GCC library (libgcc.a) that provides runtime
support routines for code that runs in the kernel environment. Note that many standard libgcc
routines are not supported in the kernel.
 libcpp_kext.a is a minimal C++ librarya stripped-down version of libstdc++.a. Its purpose is
similar to libcc_kext.a.
The order of arguments in the linker command line is instrumental in differentiating between the
compilation of C++-based and C-based kmods. As shown in Figure 107, the order of object files and
libraries in the linker command line is as follows:
...DummyDriver.LinkFileList ... -lkmodc++ ...DummyDriver_info.o -lkmod ...
The file DummyDriver.LinkFileList contains the pathnames of the kmod's object files. If the kmod uses
C++, the compiler will add references in object files to undefined symbols called .constructors_used
and .destructors_used. In the case of a kmod that does not use C++, the references to these symbols will
not be present. Let us see how these symbols affect linking by examining the implementations of
libkmodc++.a and libkmod.a, which are shown in Figures 108 and 1010, respectively.
Figure 108. Implementation of libkmodc++.a
// libkmodc++.a: cplus_start.c
asm(".constructors_used = 0");
asm(".private_extern .constructors_used");
// defined in _info.c
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 21 of 79
extern kmod_start_func_t *_realmain;
// defined in libkern/c++/OSRuntime.cpp
extern kern_return_t OSRuntimeInitializeCPP(kmod_info_t *ki, void *data);
__private_extern__ kern_return_t _start(kmod_info_t *ki, void *data)
{
kern_return_t res = OSRuntimeInitializeCPP(ki, data);
if (!res && _realmain)
res = (*_realmain)(ki, data);
return res;
}
// libkmodc++.a: cplus_stop.c
asm(".destructors_used = 0");
asm(".private_extern .destructors_used");
// defined in libkern/c++/OSRuntime.cpp
extern kern_return_t OSRuntimeFinalizeCPP(kmod_info_t *ki, void *data);
// defined in _info.c
extern kmod_stop_func_t *_antimain;
__private_extern__ kern_return_t _stop(kmod_info_t *ki, void *data)
{
kern_return_t res = OSRuntimeFinalizeCPP(ki, data);
if (!res && _antimain)
res = (*_antimain)(ki, data);
return res;
}
Since libkmodc++.a exports the .constructors_used and .destructors_used symbols, it will be used to
resolve references to these symbols in the case of a C++ kmod object file. As a side effect, the symbols
_start and _stop will also come from libkmodc++.a. The _info.c file uses these symbols to
populate a kmod_info data structure (struct kmod [osfmk/mach/kmod.h]) to describe the kernel module.
The kmod_info structure contains the starting address of the kernel module in its address field. Since the
module is a Mach-O binary, the binary's Mach-O header is located at this address.
Juxtaposing the information in Figures 108 and 109, we see that the start and stop routines of an I/O Kit
driver kmod will come from libkmodc++.a. Moreover, these routines will run OSRuntimeInitializeCPP
() and OSRuntimeFinalizeCPP(), respectively. Since the _realmain and _antimain function pointers are
both set to NULL in _info.c, the start and stop routines will not invoke the corresponding functions.
Figure 109. Declaration of the kmod_info structure for an I/O Kit driver kernel module
// _info.c for an I/O Kit driver (C++)