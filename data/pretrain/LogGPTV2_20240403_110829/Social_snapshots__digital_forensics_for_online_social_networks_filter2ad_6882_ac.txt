limitedb
limitedb
limitedb
limitedb
a No additional information available.
b Missing meta-information such as UIDs.
Table 1: Account information available through so-
cial snapshots compared with Facebook’s download
functionality.
Our third-party application fetches Facebook elements of
a given account and stores them as separate JSON ﬁles.
The separate JSON ﬁles correspond to speciﬁc requests,
whereas the ﬁles are named as follows. The ﬁrst part of
the JSON ﬁle name is the ID of an API object while the
second part speciﬁes the requested connection detail. For
instance, “123456789∼friends.request” contains all friends of
the object with ID 123456789 formatted as a JSON object.
In order to improve the performance of our application, we
conﬁgured it not to download any videos or photos through
the Graph API directly. As the third-party application col-
lects direct links to photos, the digital image forensics mod-
ule was conﬁgured to download photos during the analysis
phase. Once the third-party application is ﬁnished fetch-
ing account data, it creates a tarball containing the social
snapshot data.
The social snapshot client was adapted to fetch contact de-
tails of given user proﬁles and automatically add our third-
party application to a target account. One particular chal-
lenge we had to overcome was to reliably obtain the list of
friends of a given target account. Obstacles we had to cope
with were the changing layout of the friend lists as well as
Facebook only displaying a random subset of friends at a
given time. We overcame the obstacles of creating the list of
friends to be crawled, by fetching it through our third-party
application and sending the proﬁle links back to the client.
Our client generates requests for every friend of the target
user and sends them to the Selenium server that automates
a Mozilla Firefox browser. The responses from the auto-
mated web browser module are parsed by the client and the
contact information is extracted with a set of XPath queries.
The client ﬁnally creates a CSV-ﬁle containing the contact
information of all users. We deployed our client application
in a virtual machine with a standard Ubuntu Desktop that
runs our patched Selenium server. Our social snapshot anal-
ysis module implements both a parser for the fetched JSON
Graph API requests as well as for fetched CSV contact de-
tails. The analysis module merges the results from the social
snapshot client and the third-party application into a single
database. We implemented the analysis module in Java.
We furthermore extended our digital image forensics mod-
ule to automatically search a social snapshot for photo links,
which it automatically downloads from the Facebook con-
tent distribution network. The hijack module did not re-
quire any Facebook speciﬁc modiﬁcations as it simply strips
cookies of a given domain from a monitored network con-
nection.
4.3 Test Subjects and Setting
We recruited human volunteers via e-mail, describing our
experiment setting. The e-mail contained the experiment in-
structions and a brieﬁng on how their personal information
is going to be stored and analyzed. Furthermore, we briefed
volunteers on the ethics of our experiment: no Facebook ac-
count data is modiﬁed, the social snapshots are stored in an
encrypted ﬁlecontainer, no personal information is given to
third-parties nor published. The invitation to support this
ﬁrst social snapshot evaluation was sent to researchers and
students in computer science. Finally 25 people gave their
consent to temporarily provide us access to their Facebook
accounts. Volunteers temporarily reset their Facebook ac-
count credentials, which we used to create a social snapshot
of their accounts. Once a social snapshot had been created,
we informed our test group to reset their account password.
We conﬁgured our third-party social snapshot application
for fetching an extensive account snapshot. We found that
350 simultaneous API requests lead to the best performance
results in a series of indicative experiments we conducted
beforehand. Our third-party application was conﬁgured to
fetch the following elements recursively:
• Highest priority (priority = 3)
inbox, outbox, friends, home, feed, photos, albums,
statuses
• Medium priority (priority = 2)
tagged, notes, posts, links, groups, videos, events
• Lowest priority (priority = 1)
activities, interests, music, books, movies, television,
likes
Our priority settings ensure that important information is
fetched ﬁrst. Account elements with highest and medium
priority are fetched with depth = 2 while elements with
the lowest priority are gathered with depth = 1. Thus a
social snapshot of a given user includes for example, her
friend’s groups, tagged pictures, links etc. but no pictures,
comments, etc. are downloaded from her favorite television
series. These social snapshot settings imply that not only
the target’s account is completely fetched but also social
data on the targets’ friends is collected.
4.4 Results on Social Snapshot Performance
Figure 3 illustrates the time required by our third-party
social snapshot application to snapshot the test accounts
through the Graph API. Our third-party application re-
quired on average 12.79 minutes. Account elements of our
test accounts were on average fetched with 93.1kB per sec-
ond.
Figure 3: Required time and transfer rate of our
social snapshot third-party application.
The time required for crawling contact details with our au-
tomated web browser is outlined in Figure 4. Test accounts
have been crawled within 14 minutes on average. The aver-
age elapsed time per account corresponds to 3.4 seconds per
user proﬁle page.
Figure 4: Time required for crawling contact de-
tails with social snapshot client and automated web
browser.
4.5 Results on Social Snapshot Completeness
As illustrated in Figure 5, our third-party application found
and fetched on average 9, 802 Facebook account elements
per test subject. The storage size of the fetched JSON
ﬁles accounted to 72.29M B on average. Listing 1 shows
an anonymized example from the fetched Facebook account
elements. The example represents the basic information
smpl 1smpl 2smpl 3smpl 4smpl 5smpl 6smpl 7smpl 8smpl 9smpl 10smpl 11smpl 12smpl 13smpl 14smpl 15smpl 16smpl 17smpl 18smpl 19smpl 20smpl 21smpl 22smpl 23smpl 24smpl 2505101520253035020406080100120140160180Time (avg 12.79min)Transfer rate (avg. 93.1 kB/s)Time elapsed [min]Data transfer rate [kB/s]smpl 1smpl 2smpl 3smpl 4smpl 5smpl 6smpl 7smpl 8smpl 9smpl 10smpl 11smpl 12smpl 13smpl 14smpl 15smpl 16smpl 17smpl 18smpl 19smpl 20smpl 21smpl 22smpl 23smpl 24smpl 25051015202530354045Time (avg. 14min)Elapsed time [min]fetched of the user “John Doe” formatted as a JSON ob-
ject. This example request also highlights that account data
fetched through the Graph API provides a richer informa-
tion set for further investigations. The standard web in-
terface does not provide information if a user’s account is
veriﬁed nor an update time that is accurate to the nearest
second with information on the used time zone.
Listing 1: Example of collected JSON element
{ ” i d ” : ”12345678 ” , ”name ” : ”John Doe ” ,
” f i r s t n a m e ” : ”John ” , ” l a s t n a m e ” : ”Doe ” ,
” l i n k ” : ” h t t p : \/\/www. f a c e b o o k . com\/ j o h n d o e ” ,
”username ” : ”j o h n d o e ” , ” b i r t h d a y ” : ”04\/01\/1975 ” ,
”hometown ” : { ” i d ” : ” ” , ”name ” : n u l l } ,
” q u o t e s ” : ” s o c i a l
”g e n d e r ” : ”male ” , ” e m a i l ” : ”johndoe@example . com ” ,
”t i m e z o n e ” : 2 , ” l o c a l e ” : ”en US ” , ” v e r i f i e d ” : t r u e ,
”u p d a t e d t i m e ” : ”2011−05−15 T 1 3 : 0 5 : 1 9 +0000 ”}
s n a p s h o t your a c c o u n t ! . \ n ” ,
Finally we used our analysis module to verify the integrity of
the collected snapshots. We successfully veriﬁed that every
entry in our fetched contact details CSV ﬁles had correspon-
dent entries within the retrieve JSON ﬁles, as well as that
no invalid responses where received through the Graph API.
We furthermore implemented a mechanism for the analysis
module to overcome the obstacle of parsing image e-mail
addresses. By providing Facebook’s e-mail image creation
script the maximum possible font size of 35 instead the de-
fault of 8.7, we fetched higher resolution versions of the e-
mail address pictures. We could thus rely on GNU Ocrad[14]
to resolve these high resolution images into their textual rep-
resentation. The idea of replacing the default font size with
a larger one was ﬁrst described in [25] and we could success-
fully verify that the described method still applies.
Compared to data collected via the standard web interface,
our social snapshot contains a number of additional infor-
mation tokens. Most notably for forensic investigation is the
availability of exact creation timestamps through the Graph
API. We used our image forensic module to download all
unique photos in the highest available resolution from the
gathered social snapshots. The downloaded photos corre-
sponded to 3, 250 ﬁles or 225.28M B on average per test
account.
Figure 6: Contact details crawled with social snap-
shot client and automated web browser.
4.6
Indicative Cookie Authentication Experi-
ments
We performed a number of indicative experiments to ver-
ify our cookie authentication method on Facebook. Both
non-persistent as well as persistent cookie authentication is
available. Persistent cookies are valid for 30 days in the case
of Facebook. We successfully tested our social snapshot tool
with the hijack module on a number of non-persistent users
over an unencrypted test WiFi network. Furthermore, we
successfully validated our social snapshot application with
persistent cookies extracted from web browser proﬁle ﬁles.
In the case of one particular test setting, namely our uni-
versity campus WiFi, we could observe as many as 50 valid
social networking sessions within one hour.
4.7 Forensic Analysis of Social Snapshots
Collected social snapshots enable the forensic analysis of so-
cial network activity of speciﬁc users and their online peers.
Since the entire content of a users’ social networking ac-
count with exact timestamps is collected, timelines can be
easily generated. Moreover, social snapshots oﬀer a valu-
able source for further investigations. The collected e-mail
addresses could for example be used to identify users on
other online platforms such as photo and ﬁle storage ser-
vices, while collected media data could be matched with ev-
idence collected through traditional forensic images. Figure
Figure 5: Account elements fetched through social
snapshot third-party application.
Figure 6 shows the additional contact details crawled with
our social snapshot client. On average, our social snapshot
client had to crawl 238 proﬁle sites per test account. For
all crawled proﬁle pages our crawler found 22 phone num-
bers, 65 instant messaging accounts, as well as 162 e-mail
addresses on average. We noticed that after a number of sub-
sequent requests to user proﬁles of a given account, Facebook
replaces textual e-mail addresses with images. This behavior
was noticeable with our social snapshot client, whereas on
average we fetched 85 e-mail addresses in image form (OCR
in Figure 6). Due to the fact that Facebook uses e-mail ad-
dresses in image form as a web crawler protection method,
we could not directly parse the fetched images.
smpl 1smpl 2smpl 3smpl 4smpl 5smpl 6smpl 7smpl 8smpl 9smpl 10smpl 11smpl 12smpl 13smpl 14smpl 15smpl 16smpl 17smpl 18smpl 19smpl 20smpl 21smpl 22smpl 23smpl 24smpl 25050001000015000200002500030000050100150200250Elements (avg. 9802)Size MB (avg. 72.29MB)Number of fetched elementsSize (MB)smpl 1smpl 2smpl 3smpl 4smpl 5smpl 6smpl 7smpl 8smpl 9smpl 10smpl 11smpl 12smpl 13smpl 14smpl 15smpl 16smpl 17smpl 18smpl 19smpl 20smpl 21smpl 22smpl 23smpl 24smpl 250100200300400500600Friends (avg. 238)Phone# (avg. 22)AIM (avg. 65)Email (avg. 162)OCR (avg. 85)Number  of crawled elementsFigure 7: Example timeline created from collected social snapshot.
7 shows an example of a generated timeline for a ﬁctitious
forensic investigation on the “Dalton Gang”. The Dalton
gang is suspected of having committed an aggravated bank
robbery between 8:00am and 8:30am on the 13th of January
2011. All four gang members have an alibi for the speciﬁc
time and said they were all on a joint getaway together with
their families. Bob Dalton, the head of the gang, presents
a group photo he posted on Facebook that very day.
In
order to validate the posting, ﬁve close friends of Bob give
their consent to social snapshot their social networking ac-
counts. While the posted group photo correctly shows up
with the speciﬁed date in all ﬁve social snapshots, an inter-
esting posting from Bob Dalton’s wife is collected in two of
the social snapshots. The posting dated one week before the
robbery, timestamped with 01/06/2011 07:32:12 AM reads
“Oﬀ to the beach, for our family group picture. Hehe”. The
investigators at this point start to suspect that the alibi
picture had been taken a week beforehand to fabricate an
alibi. Unaware to Bob’s brother Grat Dalton, investigators
social snapshot his account using the hijack module during
his daily Internet browsing, exploiting a coﬀeeshop’s inse-
cure WiFi connection. Analyzing Grat’s social snapshot the
investigator noticed that Grat exchanged private messages
with his brother Bob on the day of the robbery. The ﬁrst
messages with ID 00000000 sent at 3:20:32 PM reads “Grat,
That was almost too easy today ... we should start thinking
on how to spend all the Benjamins:-). greetings Bob”. In the
second message Grat replied to Bob at 6:27:12 PM: “Yeah
almost too easy:-) Great idea with the group picture at the
beach btw, that will cause them some serious teeth gnash-
ing.” With this further evidence on a possible false alibi, the
investigators perform a house search on Bob Dalton’s home.
While the search does not reveal any of the stolen money,
the personal computer of Bob Dalton is seized during the
house search. Amongst digital documents and images the
investigators ﬁnd a valid Facebook authentication cookie on
Bob’s forensic image. The investigator creates a social snap-
shot of Bob’s social networking account using the extracted
authentication cookie. Comparing Bob’s and Grat’s social