"\[ \"\$1\" = \"me\"
\]"中，"\["是命令名！后面有4个参数，分别是"\"\$1\""，"="，"\"me\""，以及"\]"。
没错，"\["是一个无比简练的意想不到的命令。这条命令就在/usr/bin/下，用ls可以看到。它跟apt-get、gcc等命令一样，是一条实实在在的Shell命令。这条命令的作用，就是判断后面参数所组成的表达式的值（真或假），并返回。"\["命令要求输入的最后一个参数必须是"\]"（这主要是为了你们人类看着顺眼点）。
这样就可以理解一个问题了：既然"\["后面的所谓的变量、常量、"\]"号等，对于"\["命令来说都是它的参数，那么这些参数之间必然都要有空格。所以Shell脚本中的if语句必须写成类似这个样子：
![alt](images/00308.jpeg){.calibre3}
而不能写成下边这样：
![alt](images/00309.jpeg){.calibre3}
"\["命令不仅可以判断相等条件，还可以判断很多复杂的条件，如表6.2所示。
**表6.2 常用判断参数**
![alt](images/00310.jpeg){.calibre3}
![alt](images/00011.jpeg){.tpzz}**提示：**["-eq"与"="的意义不同。"-eq"用于判断数值上的相等，"="用于判断字符串的完全匹配。例如：\$a的值为"03"，\$b的值为"3"，则"-eq"将判断这2者相等，而"="将判断这2者不等。"!="和"-ne"同理。]{.kai1}
有了if命令，我们就可以把懒蜗牛同学的自动备份脚本再进一步完善一下：
![alt](images/00311.jpeg){.calibre3}
【case】
类似于C语言的switch，case语句，Shell中也有case语句来实现多分支的判断。看看下边这个小脚本：
![alt](images/00312.jpeg){.calibre3}
这个脚本的运行结果估计您也能看明白，就是个英语没学好的卖萌脚本。通过这个脚本可以比较好地理解case的作用：就是用某个变量的值，去匹配下边的几个")"符号前的字符串。如果某行匹配，则执行该行的语句，直到发现双分号";;"时停止。如果没有找到匹配的，就执行"\*)"一行的内容，遇到双分号时停止。
![alt](images/00011.jpeg){.tpzz}**提示：**["\*)"一行也可以不存在，则匹配不到任何字符串时就不执行任何命令。]{.kai1}
6.3.5 Shell中的循环语句
【for循环】
Shell脚本同样支持for循环。不过跟多数语言的for循环的写法不太一样的是，Shell脚本中的for循环有种很有个性的格式：
![alt](images/00313.jpeg){.calibre3}
其中，"变量"就是一个变量，这个变量一般会在do和done之间的命令列表中用到。而这个"名字列表"则是一个由空格分隔的字符串列表。Shell在执行for循环时，每次依次从"名字列表"中取出一个字符串赋给"变量"作为变量的值，并执行"命令列表"中的命令。另外，在写for语句时，也可以省略in及名字列表部分，这表示用当前的位置参数来代替这时的名字列表。
这样说很枯燥，写个小程序吧：
![alt](images/00314.jpeg){.calibre3}
运行这个脚本，会看到这样的输出：
![alt](images/00315.jpeg){.calibre3}
这样就很明白了吧。这种方式用于批量处理文件会很方便。当然，如果你需要C语言中那种for循环，也是可以的。不过写法稍稍有点不一样，要用两个小括号。类似这样：
![alt](images/00316.jpeg){.calibre3}
这里就不做过多解释了。像其他语言中一样，num的值从1开始，依次累加，直到不满足"num\<7"这个条件。
【while循环】
while循环也是经常用到的一种结构，它的用法大约如下：
![alt](images/00317.jpeg){.calibre3}
其中，"循环条件"的写法也是和if语句一样的。多数情况下使用"\["命令来计算条件并返回结果，这里不再赘述。
无论是while循环还是for循环，都可以使用break和continue指令。其中break指令用于跳出当前循环体，执行后面的操作；continue指令用于忽略本次循环，直接回到循环体的开始位置，执行下一次循环。这和其他常用编程语言中的break和continue是一样的。
6.3.6 扩展阅读：Linux的文件权限
这一回中，我们提到了写一个脚本，要赋予它可执行权限才能执行。有的同学可能对这个权限还不是很明白，那咱们就仔细说说Linux下的文件权限。
【简单的权限------只有3种】
熟悉Windows系统的同学应该都知道，Windows下可以对文件设置很详细的权限。谁可以读这个文件，谁可以写这个文件，等等，如图6.8所示。
![alt](images/00318.jpeg){.calibre3}
图6.8 Windows设置文件权限
我们Linux系统中的权限相对简单很多，对于一个文件（包括文件夹），只有3种权限------读、写、执行。
对于一个普通的文件，拥有对这个文件的读权限，就是可以读取里面的内容。对于一个目录（目录也是特殊的文件，在我们Linux世界，一切皆是文件），拥有对这个目录的读权限，就意味着可以查看目录中的文件列表（也就是可以用ls命令看里面都有什么东西）。
对于一个普通的文件，拥有对这个文件的写权限，就是可以改变里面的内容，增加、修改、删除，这些都算改变。对于一个目录，拥有对这个目录的写权限，就意味着可以删除、移动或者添加目录里的文件或者目录。也就是说，对于目录文件，里面的文件列表就相当于这个目录文件的"内容"，有写权限就是可以修改内容。
![alt](images/00011.jpeg){.tpzz}**提示：**[要注意的是，对于一个普通文件，有写权限并不代表可以删除这个文件。要对这个文件所在的目录有写权限才可以删除这个文件。]{.kai1}
对于一个普通的文件，拥有对这个文件的执行权限，就是可以运行这个文件，比如我们写的脚本。对于一个目录，拥有对这个目录的执行权限，就意味着可以进入这个目录（比如用cd命令）。如果一个目录有执行权限，但是没有读权限，就意味着你可以通过cd命令进入这个目录，但是进去之后运行ls发现什么也看不见。
![alt](images/00011.jpeg){.tpzz}**提示：**[在赋予一个文件可执行权限时，并不会对这个文件的格式进行检查。也就是说，你完全可以赋予一个JPEG格式的图片文件可执行权限而不会收到任何错误提示。当然，当你真的试图运行这个图片文件的时候，肯定会报错的。]{.kai1}
【面对的用户------只有3类】
现在，这3种权限我们明白了。但是权限离不开对用户的识别，Windows下可以细致地针对某一个用户或者某一个组来分配特定的权限，那么Linux呢？本着简洁高效不折腾的原则，我们Linux系统只对3类用户设置权限。
注意我说的是3类，可不是3个用户哦。哪3类用户呢？就是文件的所有者、群组、其他。
在我们Linux系统中，每个文件都明确地属于一个用户。比如我们这里，/home/lanwoniu目录下的文件基本上都属于lanwoniu用户；/etc、/usr、/bin这些系统目录中的文件，都属于root用户等。一个文件所属于的那个用户，我们就叫他所有者吧。Linux系统中，可以对一个文件的所有者，设置一套权限。比如一个文件叫做"懒蜗牛记账.odt"，属于lanwoniu用户。那么可以设定，对于lanwoniu用户，这个文件可以被读和写，但不能执行（一个文档而已，当然不能执行）。
文件除了属于一个用户外，还要属于一个组。就好像你家里，你的电脑是属于你的，别人用不了（不知道开机密码）。但同时它也是属于你们家的，你爹虽然不能打开它，但是他有权把它卖掉（让你不好好学习，哼！）。Linux系统可以对文件所属的组设置一套权限。还比如"懒蜗牛记账.odt"文件，它除了属于lanwoniu用户外，还可以属于family组。那么就可以设定，对于family组的用户，这个文件可以被读，但不能写和执行。
除了所有者和群组之外的用户，就是"其他"了。可以对其他用户设置一套权限。例如除了lanwoniu用户和属于family组的用户以外，其他用户既不能读，更不能写和执行那个"懒蜗牛记账.odt"文件。就像你家邻居赵大婶完全不能够对你的电脑进行任何处理一样。
【设置权限的命令------chmod】
说了这幺半天了，可能有人着急问：到底怎么针对用户设定文件的权限呢？好，下面我们就来介绍这个问题，这需要一个命令------chmod。
chmod是专门用来修改文件权限的命令，它的使用格式大约是这样：
![alt](images/00319.jpeg){.calibre3}
其中，"设置权限的对象"，就是指所有者、群组、其他这3类。当然你不能在命令里写中文"所有者"，而是用字母表示：u代表文件的所有者；g代表文件的群组；o代表其他。而文件的权限就是读、写、执行，当然也用字母表示：r表示读，w表示写，x表示执行。
比如我想给懒蜗牛日记.odt文件设置权限，我想给这个文件的所有者（也就是lanwoniu这个用户）增加可执行权限（就是个实验，别管这个动作多么抽风），那么就可以运行如下命令：
![alt](images/00320.jpeg){.calibre3}
其中，u代表要对所有者的权限进行操作；+号代表要增加权限；x代表要增加的是执行权限。那么如果我想去掉family组内的成员对这个文件的读权限（日记不能瞎让别人看），那么就可以运行这样的命令：
![alt](images/00321.jpeg){.calibre3}
其中，g代表要对群组的权限进行操作；-号代表要去掉权限；r代表要去掉的是读取的权限。于是family组的成员就不能够读取懒蜗牛同学的日记了。
或者，也可以在图形界面中对文件的权限进行设置。右击要设置权限的文件，在弹出的快捷菜单中选择"属性"，出现文件属性对话框。切换到"权限"标签，就可以看到对文件设置权限的界面了，如图6.9所示。
![alt](images/00322.jpeg){.calibre3}
图6.9 Ubuntu系统设置文件权限
[6.4 正则表达式]{.kai}
在使用Shell命令或者Shell编程的时候，经常会用到一种叫做"正则表达式"的东西。有了它，很多事情事半功倍。作为一名想成为高手的菜鸟，懒蜗牛同学觉得有必要了解一下这个东西。
6.4.1 什么是正则表达式