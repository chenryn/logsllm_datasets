First, the input model is translated into a NuSMV model.
Monitor
Sensor 1
...
Sensor N
Filter 1
...
Filter N
Out
Fig. 3. The layout of the sensor-ﬁlter model.
TABLE I.
BENCHMARKING RESULTS FOR THE SENSOR-FILTER MODEL.
THE MODEL SIZE INDICATES THE NUMBER OF BOTH SENSORS AND FILTERS.
THE VALUES FOR THE SIMULATOR ARE MAXIMA.
Model
Size
CTMC
Time (s)
2
4
6
8
10
12
14
5.33
29.93
59.75
289.97
725.67
1360.11
3187.02
Simulation
( = 10−3)
Time (s)
47.50
51.61
50.58
52.65
52.65
57.80
59.88
Simulation
( = 10−4)
Time (s)
4453.09
4887.09
4725.42
4801.40
5120.87
5398.62
5668.64
CTMC
Memory
(MB)
23.19
76.29
89.14
180.22
178.35
196.43
2469.20
Simulation
Memory
(MB)
19.91
21.99
24.21
26.63
29.13
32.75
35.00
Using the NuSMV model checker, the reachable state space
is generated as a BDD, which is then exported to a data
format used by the Sigref library [23]. In the next step, the
Sigref library is used to reduce this state space by means of
weak probabilistic bisimulation (preserving the reachability
properties), and generate a CTMC. Finally, MRMC [24] is
used to analyze the model based on the property speciﬁcation.
As this part of the tool-chain is limited to discrete models, an
un-timed model (a model without clocks) was used to perform
the comparison. This model describes a system consisting of
a sensor and a ﬁlter component, both with various degrees of
redundancy. A monitor can detect a fault in either component,
and switch to a redundant version. When either all sensors or
all ﬁlters have failed, the entire system fails. By increasing the
number of redundant components, the complexity of the model
is increased. See also Figure 3.
The sensor provides a discrete output in a limited range
(1..5). This output is then multiplied by a constant factor in
the ﬁlter. The sensor has a failure mode in which the output
becomes too high (> 5); the ﬁlter has a failure mode which sets
the output to zero. These values are interpreted by a monitor,
which distinguishes between these two failures and switches
the corresponding component to a redundant version. When a
component fails and there are no more redundant components,
the entire system has failed. The benchmark deﬁnes a time
bounded property that determines the probability of this event.
The main results of the benchmark are shown in Table I.
The benchmark was executed on a HP 685c G7 blade system,
having four AMD 6172 Opteron processors (with 48 cores
total) and 192GB of RAM. Both the simulator and MRMC
used the same input model, with the input parameter δ set to
0.98 and  to 1 · 10−3 and 1 · 10−4 (see Section II-B). The
simulator was run with 20 threads in parallel.
It can be seen that the time and resource usage of the
CTMC approach increase greatly with model size. This is to
be expected as the entire state space needs to be generated,
which drastically increases in size with larger models. For the
simulator, these values increase slightly, as the number of paths
generated (and thus results stored) remains constant. However,
the simulation time increases quadratically as the error bound
8585
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:48:59 UTC from IEEE Xplore.  Restrictions apply. 
PCDU
PCDU
PCDU
GPS
GPS
Gyro Gyro Gyro
OBC
OBC
DPU DPU DPU
DPU DPU DPU
Voter
Voter
Thruster
Thruster
Thruster
Fig. 4.
The architecture of the industrial case study. The connections
between the GPS, Gyro and DPU units have been hidden for clarity. Rounded
connections are for power, the others for signals.
is reduced in size (which is directly related to the use of the
CH-bound).
Some remarks are in order: Although the CTMC approach
is sensitive to the size of the model, it is less so in the time
bound of the property being analyzed. The opposite holds for
the simulator. Here, an increase in the time bound may lead
to the path generator requiring more steps to reach this bound,
thus increasing simulation time. It should be noted that the tool
chain spends relatively little time in the MRMC model checker,
and requires signiﬁcantly more to generate and minimize the
state space [25], thus the size of the complete state space
being of great inﬂuence. Furthermore, the analysis performed
by MRMC is a great deal more accurate, which is important
for properties for which the probability is very close to either
zero or one (see also Section VI for a discussion of rare-event
simulation). Nevertheless, the results show that especially for
model with large state spaces, simulation is a viable alternative
if the loss of precision is acceptable.
V.
INDUSTRIAL CASE STUDY
A case study was performed together with Airbus Defense
and Space. The goal of the case study was to evaluate the
analysis capabilities of the entire toolset. As such, it is not
intended to reﬂect an actual design, but rather serves as an
abstract example of a realistic design. In this paper, we present
part of the case study involving the design of a launcher, an
overview of which is shown in Figure 4.
a) Launchers: A launcher is generally short-lived, less
than a few hours, with the purpose of delivering a payload
such as a satellite into earth’s orbit. It requires systems with
high availability, as loss of control for a few milliseconds can
mean loss of the entire launcher itself, as well as its payload.
As such, many systems run in warm or hot redundancy.
Upon detection of a fault, the system immediately switches to
a different component and/or disables the faulty component.
This requires some mechanism that is capable of detecting a
fault and performing the recovery operation. In the case study,
the output signals of all the components are abstracted and
encoded as Booleans, indicating whether or not a correct signal
is available. Thus, by simply observing the value of the signal,
the system can decide whether or not the output of a component
is still correct.
Three types of faults can occur in the system: Transient, hot
and permanent. Transient faults are those that correct themselves
within a certain amount of time. Hot faults require intervention
and can be corrected by resetting the system, e.g. by turning
it off and back on again. Finally, permanent faults cannot be
recovered from.
b) Launcher Components: The components of the
launcher in the case study can roughly be divided into four
groups: One group responsible for providing power to the other
components; one group providing information about the location
and trajectory for navigation (the sensors); one group processing
the navigational data; and ﬁnally the thrusters (actuators) which
are controlled by the processors.
The systems are connected via buses. These buses are used
both to distribute power and transfer data signals. The case
study models these buses as opaque objects which have no
associated failure model. Rather, failures are modeled for the
other components.
Power is distributed by means of multiple PCDUs (Power
Conditioning and Distribution Units). Each PCDU is modeled
as a battery and a number of power outputs, which can be
connected to the various devices. The battery is modeled using
continuous, linear dynamics to represent the amount of energy
left. A battery is associated with a single, permanent failure
mode. Upon failure of the battery, no power is delivered and
the PCDU fails, including all its outputs.
Navigation is based on inputs from GPS and gyroscope
(gyro) devices. A GPS is modeled as a simple device with two
states: acquisition and active (see also Listing 1). A signal is
only available in the active state. A GPS is modeled with three
failure modes. Two of which, a transient and a hot failure, can
be recovered from. The third is a permanent failure mode. Each
failure mode is associated with a separate failure probability
(as described in Listing 2).
A gyro is a device that can measure the orientation on two
axes. Both axes are modeled as independent devices, each of
which can independently fail. Furthermore, a dependent failure
can cause the entire gyro to fail. In both cases, only a single,
permanent failure mode is modeled.
The inputs from the GPS and gyro devices are processed by
a Data Processing Unit (DPU), which in turn sends command
signals to the rest of the equipment, including the thrusters. The
DPUs are contained within two redundant On Board Computers
(OBCs), which consists of a voting triplex of three DPUs
running in hot redundancy. The output of the triplex is based
on a majority vote of the DPUs. If any DPU fails, it will switch
to a duplex mode. If a second DPU fails, the triplex itself fails,
causing the OBC to fail.
c) Error Models: Two error models for the DPUs have
been modeled, with two different behaviors for the OBCs. In
the ﬁrst case, the DPUs are associated with a permanent fault,
and the OBCs simply vote on the output of the DPUs. In the
second case, the DPUs are associated with a hot fault with
a higher failure rate, which can be recovered from after a
non-deterministic delay. The OBCs will switch off and on a
DPU once after detecting a fault to attempt to clear the fault.
However, due to the limited range of the interval, the recovery
might fail if it is performed too early. The difference in failure
8686
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:48:59 UTC from IEEE Xplore.  Restrictions apply. 
y
t
i
l
i
b
a
b
o
r
p
0.8
0.6
0.4
0.2
y
t
i
l
i
b
a
b
o
r
p
1
0.8
0.6
0.4
Progressive
ASAP