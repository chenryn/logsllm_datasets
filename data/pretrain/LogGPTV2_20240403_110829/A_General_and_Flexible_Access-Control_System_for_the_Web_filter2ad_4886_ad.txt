statements, and other similar attacks.
4.2 Speculative Proving
In our running example the web proxy waited for
the server’s challenge before it began the process of
constructing a proof. In practice, our proxy keeps
track of visited web pages that have been protected
using PCA. Based on this log, the proxy tries to
guess, even before it sends out any data, whether
the page that the user is trying to access is PCA
protected, and if it is, what the server’s challenge
is likely to be.
In that case, it can try to prove
the challenge even before the server makes it (we
call this prove-ahead or speculative proving). The
proof can then be sent to the server as part of the
original request. If the client guessed correctly, the
server will accept the proof without (cid:12)rst sending a
challenge to the client.
If the web proxy already
has all the facts necessary for constructing a proof,
this will reduce the amount of communication on
the network to a single round trip from the client
to the server. This single round trip is necessary in
any case, just to fetch the requested web page; in
other words, the proof is piggybacked on top of the
fetch message.
4.3 Performance Numbers
protocol stage
fetch URL attempt without HTTPS
fetch URL attempt with no proof
failed proof attempt
fetch (cid:12)le fact + failed proof attempt
fetch key fact + successful proof attempt
fetch URL attempt (empty server cache)
failed proof attempt
fetch (cid:12)le fact + successful proof attempt
fetch URL attempt (server cached module)
total
ms
198
723
184
216
497
592
184
295
330
3219
Figure 5. Worst-case performance.
protocol stage
fetch URL attempt with no proof
failed proof attempt
fetch (cid:12)le fact + successful proof attempt
fetch URL attempt (server cached module)
total
ms
180
184
295
330
989
Figure 6. Typical performance.
As one might expect, the performance of our system
varies greatly depending on how much information
protocol stage
construct proof from cached facts
fetch URL attempt (server cached module)
total
ms
270
330
600
Figure 7. Fully-cached performance.
protocol stage
fetch URL attempt (already authorized)
total
ms
175
175
Figure 8. Performance with valid session ID.
is cached by the proxy and by the server. The rele-
vant metric is the amount of time it takes to fetch a
protected web page. We evaluated our system using
the example of Alice trying to access midterm.html
(see (cid:12)gures 5{8; for comparison, (cid:12)gure 9 shows the
length of time to fetch a page that is not protected;
the actual example from which we obtained perfor-
mance data did not include facts about time).
The slowest scenario, detailed in (cid:12)gure 5, is when all
the caches are empty and the (cid:12)rst attempt to fetch
the protected page incurs initialization overhead on
the server (this is why the (cid:12)rst attempt to fetch
the URL takes so long even though a proof isn’t
included). In this case, it takes 3.2 seconds for the
proxy to fetch the necessary facts, construct a proof,
and fetch the desired page.
A more typical situation is that a user attempts to
access a protected page on a previously visited site
((cid:12)gure 6). In this case, the user is already likely to
have proven to the server that she is allowed access
to the server and the directory, and must prove only
that she is also allowed to access the requested page.
In this case she probably needs to fetch only a single
((cid:12)le or goal) fact, and the whole process takes 1
second. Speculative proving would likely eliminate
the overhead of an attempted fetch of a protected
page without a proof, saving about .2 seconds. If
the client already knows the (cid:12)le fact ((cid:12)gure 7), that
length of the access is cut to about .6 seconds.
When a user wants to access a page that she has
already accessed and the session identi(cid:12)er used dur-
protocol stage
fetch URL attempt (page not protected)
total
ms
50
50
Figure 9. Access control turned o(cid:11).
ing the previous, successful attempt is still valid,
access is granted based on just the possession of the
identi(cid:12)er { this takes about 175 milliseconds.
Alice’s proof might have to be more complicated
than in our example; it could, for example, contain
a chain of delegations. For each link of the chain
Alice would (cid:12)rst have to discover that she couldn’t
construct the proof, then she would have to fetch
the relevant fact and attempt to construct the proof
again { which in our system would currently take
about .6 seconds.
The performance results show that, even when all
the facts are assembled, generating proofs is slow (at
least 200 ms) and grows slower as the user learns
more facts. While this is a fundamental bottle-
neck, the performance of our prover is over an order
of magnitude slower than it need be. If this were
a production-strength implementation, we would
likely have implemented the theorem prover in Java.
The capabilities of Twelf are far greater than what
we need and impose a severe performance penalty;
a custom-made theorem prover that had only the
required functionality would be more lightweight.
This also impacts the proof-checking performance;
a specialized checker [21] would be much faster.
5 Conclusion
In this paper we describe an authorization sys-
tem for web browsers and web servers that solves
the problem of interoperability across administra-
tive or trust boundaries by allowing the use of ar-
bitrarily complex security policies. Our system is
implemented as add-on modules to standard web
browsers and web servers and demonstrates that
it is feasible to use a proof-carrying authorization
framework as a basis for building real systems.
We improve upon previous work on proof-carrying
authorization by adding to the framework a notion
of state and enhancing the PCA logic with goal con-
structs and a module system. The additions of state
(through what we call sessions) and goals are instru-
mental in making PCA practical. We also introduce
mechanisms that allow servers to provide only selec-
tive access to security policies, which was a concept
wholly absent from the original work. In addition,
we re(cid:12)ne the core logic to make it more useful for ex-
pressing interesting application-speci(cid:12)c logics, and
we de(cid:12)ne a particular application-speci(cid:12)c logic that
is capable of serving as a security logic for a real
distributed authorization system.
Our application allows pieces of the security policy
to be distributed across arbitrary hosts. Through
the process of iterative proving the client repeat-
edly fetches proof components until it is able to con-
struct a proof. This mechanism allows the server
policy to be arbitrarily complex, controlled by a
large number of principals, and spread over an ar-
bitrary network of machines in a secure way. Since
proof components can themselves be protected, our
system avoids releasing the entire security policy to
unauthorized clients. Iterative authorization, or al-
lowing the server to repeatedly challenge the client
with new challenges during a single authorization
transaction, provides a great deal of (cid:13)exibility in
designing security policies.
Our performance results demonstrate that it is pos-
sible to reduce the inherent overhead to a level
where a system like ours is e(cid:14)cient enough for real
use. To this end, our system uses speculative prov-
ing { clients attempt to guess server challenges and
generate proofs ahead of time, drastically reducing
the exchange between the client and the server. The
client also caches proofs and proof components to
avoid the expense of fetching them and regenerat-
ing the proofs. The server also caches proofs, which
avoids the need for a client to produce the same
proof each time it tries to access a particular ob-
ject. A module system in the proof language al-
lows shared lemmas, which comprise the bulk of the
proofs, to be transmitted only if the server has not
processed them, saving both bandwidth and proof-
checking overhead.
Ongoing work includes investigating the use of
oblivious transfer and other protocols for fetching
proof components without revealing unnecessary in-
formation and further re(cid:12)ning our security logic to
reduce its trusted base and increase its generality. In
addition to allowing clients to import lemmas from
a third party, we would like to devise a method for
allowing them to import actual proof rules as well.
We are also exploring the idea of using a higher-
order logic as a bridge between existing (non-higher-
order) security logics in a way that would enable
authentication frameworks based on di(cid:11)erent logics
to interact and share resources. Finally, we intend
to signi(cid:12)cantly improve the performance of our sys-
tem, in particular by using a specialized prover and
proof checker.
6 Acknowledgments
The authors would like to thank Andrew W. Appel
for his advice and the anonymous reviewers for their
helpful comments.
7 Availability
More information about our system and proof-
carrying authorization,
including a download-
able version of our prototype implementation,
is
available at http://www.cs.princeton.edu/sip/
projects/pca.
References
[1] M. Abadi. On SDSI’s linked local name spaces.
Journal of Computer Security, 6(1-2):3{21, Octo-
ber 1998.
[2] M. Abadi, M. Burrows, B. Lampson, and G. D.
Plotkin. A calculus for access control
in dis-
tributed systems. ACM Transactions on Pro-
gramming Languages and Systems, 15(4):706{734,
September 1993.
[3] M. Abadi, E. Wobber, M. Burrows, and B. Lamp-
son. Authentication in the Taos Operating System.
In Proceedings of the 14th ACM Symposium on
Operating System Principles, pages 256{269, Sys-
tems Research Center SRC, DEC, Dec. 1993. ACM
SIGOPS, ACM Press. These proceedings are also
ACM Operating Systems Review, 27,5.
[4] A. W. Appel and E. W. Felten. Proof-carrying au-
thentication. In Proceedings of the 6th ACM Con-
ference on Computer and Communications Secu-
rity, Singapore, November 1999.
[5] D. Balfanz, D. Dean, and M. Spreitzer. A security
infrastructure for distributed Java applications. In
21th IEEE Computer Society Symposium on Re-
search in Security and Privacy, Oakland, CA, May
2000.
[6] M. Blaze,
J. Feigenbaum,
and M. Strauss.
Compliance checking in the PolicyMaker trust-
management system. In Proceedings of the 2nd Fi-
nancial Crypto Conference, volume 1465 of Lecture
Notes in Computer Science, Berlin, 1998. Springer.
[7] J.-E. Elien. Certi(cid:12)cate discovery using SPKI/SDSI
2.0 certi(cid:12)cates. Master’s thesis, Massachusetts In-
stitute of Technology, May 1998.
[8] C. M. Ellison, B. Frantz, B. Lampson, R. Rivest,
B. M. Thomas, and T. Ylonen. SPKI Certi(cid:12)cate
Theory, September 1999. RFC2693.
A Axioms of the Core Logic
Axioms of the higher-order core logic of our PCA
system. Except for the last four, they are standard
inference rules for higher-order logic.
A B
A ^ B
and i
A ^ B
A
and e1
A ^ B
B
and e2
A
A _ B
or i1
B
A _ B
or i2
A _ B
[A]
C
C
[B]
C
or e
[A]
B
A ! B
imp i
A ! B A
B
imp e
A(Y )
Y not occurring in 8x:A(x)
8x:A(x)
forall i
8x:A(x)
A(T )
forall e
re(cid:13)
X = X
X = Z H(Z)
H(X)
congr
signature(pubkey; fmla; sig )
Key(pubkey) says fmla
signed
Key(A) says (F imp G) Key(A) says F
Key(A) says G
key imp e
before(S)(T1) T2 > T1
before(S)(T2)
before gt
Key(localhost) says before(X)(T )
before(X)(T )
timecontrols
[9] M.
Erdos
and
S.
architecture
Shib-
boleth
v04.
http://middleware.internet2.edu/shibboleth/docs/,
Nov. 2001.
Cantor.
draft
[10] R. T. Fielding, J. Gettys, J. C. Mogul, H. Frystyk,
L. Masinter, P. Leach, and T. Berners-Lee. Hyper-
text Transfer Protocol { HTTP/1.1. IETF - Net-
work Working Group, The Internet Society, June
1999. RFC 2616.
[11] K. Fu, E. Sit, K. Smith, and N. Feamster. Dos and
don’ts of client authentication on the web. In Pro-
ceedings of the 10th USENIX Security Symposium,
Washington, DC, Aug. 2001.
[12] J. Y. Halpern and R. van der Meyden. A logic
for SDSI’s linked local name spaces.
In Proceed-
ings of the 12th IEEE Computer Security Foun-
dations Workshop, pages 111{122, Mordano, Italy,
June 1999.
[13] R. Harper, F. Honsell, and G. Plotkin. A frame-
work for de(cid:12)ning logics.
Journal of the Asso-
ciation for Computing Machinery, 40(1):143{184,
Jan. 1993.
[14] International Telecommunications Union.
ITU-T
recommendation X.509: The Directory: Authenti-
cation Framework. Technical Report X.509, ITU,
1997.
[15] O. Kornievskaia, P. Honeyman, B. Doster, and
K. Co(cid:11)man. Kerberized credential translation: A
solution to web access control.
In Proceedings of
the 10th USENIX Security Symposium, Washing-
ton, DC, Aug. 2001.
[16] G. C. Necula. Compiling with Proofs. PhD thesis,
Carnegie Mellon University, Oct. 1998. Available
as Technical Report CMU-CS-98-154.
[17] B. C. Neuman and T. Ts’o. Kerberos: An au-
thentication service for computer networks. IEEE
Communications, 32(9):33-38, Sept. 1994.
[18] F. Pfenning and C. Sch(cid:127)urmann. System descrip-
tion: Twelf: A meta-logical framework for deduc-
tive systems. In H. Ganzinger, editor, Proceedings
of the 16th International Conference on Automated
Deduction (CADE-16-99), volume 1632 of LNAI,
pages 202{206, Berlin, July 7{10 1999. Springer.
[19] V. Samar. Single sign-on using cookies for web
the 8th IEEE
applications.
Workshop on Enabling Technologies:
Infrastruc-
ture for Collaborative Enterprises, pages 158{163,
Palo Alto, CA, 1999.
In Proceedings of
[20] A. Stump, C. Barrett, and D. Dill. CVC: a cooper-
ating validity checker. Submitted to 14th conference
on Computer Aided Veri(cid:12)cation, 2002.
[21] A. Stump and D. Dill. Faster Proof Checking in the
Edinburgh Logical Framework.
In 18th Interna-
tional Conference on Automated Deduction, 2002.