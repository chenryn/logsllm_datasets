    //      ContentLength: int64(len(intReq.Body)),
    //      Body:          ioutil.NopCloser(bytes.NewReader(intReq.Body)),
    //  }
    // }
## 集成nuclei
为了白嫖nuclei的poc，我们准备在自己的扫描器中集成nuclei，或者兼容它的语法。
以前版本想这么做，要深入到很底层的代码去改（因为很多底层接口都是内部的，外部提供的参数我们不需要），一个文件一个文件去扣，很麻烦。
新版的nuclei好多了，不仅包结构调整为go包的形式，很多类都是interface类型，我们只需要根据interface实现那几个函数就能模拟一个mock的类传入。
而且nuclei的测试用例页提供了参考,如果也想调用nuclei，可以看下面代码的例子。
`v2\internal\testutils\testutils.go`
提供很多mock struct
    package testutils
    import (
        "github.com/logrusorgru/aurora"
        "github.com/projectdiscovery/gologger/levels"
        "github.com/projectdiscovery/nuclei/v2/pkg/catalog"
        "github.com/projectdiscovery/nuclei/v2/pkg/output"
        "github.com/projectdiscovery/nuclei/v2/pkg/progress"
        "github.com/projectdiscovery/nuclei/v2/pkg/protocols"
        "github.com/projectdiscovery/nuclei/v2/pkg/protocols/common/protocolinit"
        "github.com/projectdiscovery/nuclei/v2/pkg/types"
        "go.uber.org/ratelimit"
    )
    // Init initializes the protocols and their configurations
    func Init(options *types.Options) {
        _ = protocolinit.Init(options)
    }
    // DefaultOptions is the default options structure for nuclei during mocking.
    var DefaultOptions = &types.Options{
        RandomAgent:          false,
        Metrics:              false,
        Debug:                false,
        DebugRequests:        false,
        DebugResponse:        false,
        Silent:               false,
        Version:              false,
        Verbose:              false,
        NoColor:              true,
        UpdateTemplates:      false,
        JSON:                 false,
        JSONRequests:         false,
        EnableProgressBar:    false,
        TemplatesVersion:     false,
        TemplateList:         false,
        Stdin:                false,
        StopAtFirstMatch:     false,
        NoMeta:               false,
        Project:              false,
        MetricsPort:          0,
        BulkSize:             25,
        TemplateThreads:      10,
        Timeout:              5,
        Retries:              1,
        RateLimit:            150,
        BurpCollaboratorBiid: "",
        ProjectPath:          "",
        Severity:             []string{},
        Target:               "",
        Targets:              "",
        Output:               "",
        ProxyURL:             "",
        ProxySocksURL:        "",
        TemplatesDirectory:   "",
        TraceLogFile:         "",
        Templates:            []string{},
        ExcludedTemplates:    []string{},
        CustomHeaders:        []string{},
    }
    // MockOutputWriter is a mocked output writer.
    type MockOutputWriter struct {
        aurora          aurora.Aurora
        RequestCallback func(templateID, url, requestType string, err error)
        WriteCallback   func(o *output.ResultEvent)
    }
    // NewMockOutputWriter creates a new mock output writer
    func NewMockOutputWriter() *MockOutputWriter {
        return &MockOutputWriter{aurora: aurora.NewAurora(false)}
    }
    // Close closes the output writer interface
    func (m *MockOutputWriter) Close() {}
    // Colorizer returns the colorizer instance for writer
    func (m *MockOutputWriter) Colorizer() aurora.Aurora {
        return m.aurora
    }
    // Write writes the event to file and/or screen.
    func (m *MockOutputWriter) Write(result *output.ResultEvent) error {
        if m.WriteCallback != nil {
            m.WriteCallback(result)
        }
        return nil
    }
    // Request writes a log the requests trace log
    func (m *MockOutputWriter) Request(templateID, url, requestType string, err error) {
        if m.RequestCallback != nil {
            m.RequestCallback(templateID, url, requestType, err)
        }
    }
    // TemplateInfo contains info for a mock executed template.
    type TemplateInfo struct {
        ID   string
        Info map[string]interface{}
        Path string
    }
    // NewMockExecuterOptions creates a new mock executeroptions struct
    func NewMockExecuterOptions(options *types.Options, info *TemplateInfo) *protocols.ExecuterOptions {
        progressImpl, _ := progress.NewStatsTicker(0, false, false, 0)
        executerOpts := &protocols.ExecuterOptions{
            TemplateID:   info.ID,
            TemplateInfo: info.Info,
            TemplatePath: info.Path,
            Output:       NewMockOutputWriter(),
            Options:      options,
            Progress:     progressImpl,
            ProjectFile:  nil,
            IssuesClient: nil,
            Browser:      nil,
            Catalog:      catalog.New(options.TemplatesDirectory),
            RateLimiter:  ratelimit.New(options.RateLimit),
        }
        return executerOpts
    }
    // NoopWriter is a NooP gologger writer.
    type NoopWriter struct{}
    // Write writes the data to an output writer.
    func (n *NoopWriter) Write(data []byte, level levels.Level) {}
`v2\pkg\protocols\http\build_request_test.go`
一个例子。
    func TestMakeRequestFromModal(t *testing.T) {
        options := testutils.DefaultOptions
        testutils.Init(options)
        templateID := "testing-http"
        request := &Request{
            ID:     templateID,
            Name:   "testing",
            Path:   []string{"{{BaseURL}}/login.php"},
            Method: "POST",
            Body:   "username=test&password=pass",
            Headers: map[string]string{
                "Content-Type":   "application/x-www-form-urlencoded",
                "Content-Length": "1",
            },
        }
        executerOpts := testutils.NewMockExecuterOptions(options, &testutils.TemplateInfo{
            ID:   templateID,
            Info: map[string]interface{}{"severity": "low", "name": "test"},
        })
        err := request.Compile(executerOpts)
        require.Nil(t, err, "could not compile http request")
        generator := request.newGenerator()
        req, err := generator.Make("https://example.com", map[string]interface{}{})
        require.Nil(t, err, "could not make http request")
        bodyBytes, _ := req.request.BodyBytes()
        require.Equal(t, "/login.php", req.request.URL.Path, "could not get correct request path")
        require.Equal(t, "username=test&password=pass", string(bodyBytes), "could not get correct request body")
    }
### 代码
以下是我的模拟调用nuclei的代码，是从我扫描器中抽离出来的。
fake.go 定义nuclei需要的日志输出和进度类，因为我不需要这些，所以我定义为fake
    package nuclei
    import (
        "github.com/logrusorgru/aurora"
        "github.com/projectdiscovery/nuclei/v2/pkg/output"
    )
    type fakeWrite struct{}
    func (r *fakeWrite) Close() {}
    func (r *fakeWrite) Colorizer() aurora.Aurora {
        return nil
    }
    func (r *fakeWrite) Write(w *output.ResultEvent) error                      { return nil }
    func (r *fakeWrite) Request(templateID, url, requestType string, err error) {}
    type fakeProgress struct{}
    func (p *fakeProgress) Stop()                                                    {}
    func (p *fakeProgress) Init(hostCount int64, rulesCount int, requestCount int64) {}
    func (p *fakeProgress) AddToTotal(delta int64)                                   {}
    func (p *fakeProgress) IncrementRequests()                                       {}
    func (p *fakeProgress) IncrementMatched()                                        {}
    func (p *fakeProgress) IncrementErrorsBy(count int64)                            {}
    func (p *fakeProgress) IncrementFailedRequestsBy(count int64)                    {}
poc.go
    package nuclei
    import (
        "errors"
        "fmt"
        "github.com/projectdiscovery/nuclei/v2/pkg/catalog"
        "github.com/projectdiscovery/nuclei/v2/pkg/output"
        "github.com/projectdiscovery/nuclei/v2/pkg/protocols"
        "github.com/projectdiscovery/nuclei/v2/pkg/protocols/common/protocolinit"
        "github.com/projectdiscovery/nuclei/v2/pkg/templates"
        "github.com/projectdiscovery/nuclei/v2/pkg/types"
        "go.uber.org/ratelimit"
    )
    type NucleiPoC struct {
        option protocols.ExecuterOptions
    }
    func New(limiter ratelimit.Limiter, option2 *options.Options) (*NucleiPoC, error) {
        fakeWriter := &fakeWrite{}
        progress := &fakeProgress{}
        o := types.Options{
            Tags:                  []string{},
            Workflows:             []string{},
            Templates:             nil,
            ExcludedTemplates:     nil,
            CustomHeaders:         nil,
            Severity:              nil,
            InternalResolversList: nil,
            BurpCollaboratorBiid:  "",
            ProjectPath:           "",
            Target:                "",
            Targets:               "",
            Output:                "tmp.output",
            ProxyURL:              option2.ProxyURL, //11
            ProxySocksURL:         "",               //11
            TemplatesDirectory:    "",
            TraceLogFile:          "",
            ReportingDB:           "",
            ReportingConfig:       "",
            ResolversFile:         "",
            StatsInterval:         1000,
            MetricsPort:           0,
            BulkSize:              0,
            TemplateThreads:       0,
            Timeout:               option2.TimeOut,
            Retries:               3,
            RateLimit:             option2.RateLimit,
            PageTimeout:           0,
            OfflineHTTP:           false,
            Headless:              false,
            ShowBrowser:           false,
            SystemResolvers:       false,
            RandomAgent:           true,
            Metrics:               false,
            Debug:                 false,
            DebugRequests:         false,
            DebugResponse:         false,
            Silent:                false,
            Version:               false,
            Verbose:               false,
            NoColor:               true,
            UpdateTemplates:       false,
            JSON:                  false,
            JSONRequests:          false,
            EnableProgressBar:     false,
            TemplatesVersion:      false,
            TemplateList:          false,
            Stdin:                 false,
            StopAtFirstMatch:      false,
            NoMeta:                false,
            Project:               false,
            NewTemplates:          false,
        }
        r := NucleiPoC{}
        err := protocolinit.Init(&o)
        if err != nil {
            return nil, errors.New(fmt.Sprintf("Could not initialize protocols: %s", err))
        }
        catalog := catalog.New("")
        var executerOpts = protocols.ExecuterOptions{
            Output:      fakeWriter,
            Options:     &o,
            Progress:    progress,
            Catalog:     catalog,
            RateLimiter: limiter,
        }
        r.option = executerOpts
        return &r, nil
    }
    func (n *NucleiPoC) ParsePocFile(filePath string) (*templates.Template, error) {
        var err error
        template, err := templates.Parse(filePath, n.option)
        if err != nil {
            return nil, err
        }
        if template == nil {
            return nil, nil
        }
        return template, nil
    }
    func ExecuteNucleiPoc(input string, poc *templates.Template) ([]string, error) {
        var ret []string
        var results bool
        e := poc.Executer
        name := fmt.Sprint(poc.ID)
        err := e.ExecuteWithResults(input, func(result *output.InternalWrappedEvent) {
            for _, r := range result.Results {
                results = true
                if r.ExtractorName != "" {
                    ret = append(ret, name+":"+r.ExtractorName)
                } else if r.MatcherName != "" {
                    ret = append(ret, name+":"+r.MatcherName)
                }
            }
        })
        if err != nil || !results {
            return nil, nil
        }
        if len(ret) == 0 {
            ret = append(ret, name)
        }
        return ret, err
    }
template.go
    package nuclei
    import (
        "fmt"
        "github.com/logrusorgru/aurora"
        "github.com/projectdiscovery/nuclei/v2/pkg/templates"
    )
    func NucleiToMsg(t *templates.Template) string {
        var name string
        var author string
        nameInterface, ok := t.Info["name"]
        if ok {
            name = fmt.Sprintf("%s", nameInterface)
        }
        authorInterface, ok := t.Info["author"]
        if ok {
            author = fmt.Sprintf("%s", authorInterface)
        }
        id := t.ID
        message := fmt.Sprintf("Loading nuclei PoC %s[%s] (%s)",
            aurora.Bold(name).String(),
            id,
            aurora.BrightYellow("@"+author).String())
        return message
    }
## 最后
我对于yaml的poc始终感觉怪怪的，但也渐渐明白一个运营安全社区的道理。想让别人接受，得要先把工具和生态做好，此时不要想着别人回赠。等别人用得舒服了，自然就会回赠了，这是一个自然而然的过程，但是需要时间去累积吧。