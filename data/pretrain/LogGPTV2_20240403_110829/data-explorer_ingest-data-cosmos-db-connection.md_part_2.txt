                    "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
                    "apiVersion": "2022-08-15",
                    "name": "[concat(parameters('cosmosDbAccount'), '/', guid(parameters('clusterPrincipalId'), parameters('cosmosDbAccount')))]",
                    "properties": {
                        "principalId": "[parameters('clusterPrincipalId')]",
                        "roleDefinitionId": "[variables('dataRoleDefinitionId')]",
                        "scope": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbAccount'))]"
                    }
                },
                {
                    "type": "Microsoft.Authorization/roleAssignments",
                    "apiVersion": "2022-04-01",
                    "name": "[variables('roleAssignmentId')]",
                    "scope": "[format('Microsoft.DocumentDb/databaseAccounts/{0}', parameters('cosmosDbAccount'))]",
                    "properties": {
                        "description": "Giving RBAC reader on Cosmos DB",
                        "principalId": "[parameters('clusterPrincipalId')]",
                        "principalType": "ServicePrincipal",
                        "roleDefinitionId": "[variables('rbacRoleDefinitionId')]"
                    }
                }
            ]
        }
        ```
1. Deploy the following ARM template to create a Cosmos DB data connection. Replace the placeholders with appropriate values.
    ```json
    {
      "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
      "contentVersion": "1.0.0.0",
      "parameters": {
        "kustoClusterName": {
          "type": "string",
          "metadata": { "description": "Kusto Cluster name" }
        },
        "kustoDbName": {
          "type": "string",
          "metadata": { "description": "Kusto Database name" }
        },
        "kustoConnectionName": {
          "type": "string",
          "metadata": { "description": "Kusto Database connection name" }
        },
        "kustoLocation": {
          "type": "string",
          "metadata": { "description": "Location (Azure Region) of the Kusto cluster" }
        },
        "kustoTable": {
          "type": "string",
          "metadata": { "description": "Kusto Table name where to ingest data" }
        },
        "kustoMappingRuleName": {
          "type": "string",
          "defaultValue": "",
          "metadata": { "description": "Mapping name of the Kusto Table (if omitted, default mapping is applied)" }
        },
        "managedIdentityResourceId": {
          "type": "string",
          "metadata": { "description": "ARM resource ID of the managed identity (cluster resource ID for system or user identity)" }
        },
        "cosmosDbAccountResourceId": {
          "type": "string",
          "metadata": { "description": "ARM resource ID of Cosoms DB account" }
        },
        "cosmosDbDatabase": {
          "type": "string",
          "metadata": { "description": "Cosmos DB Database name" }
        },
        "cosmosDbContainer": {
          "type": "string",
          "metadata": { "description": "Cosmos DB container name" }
        },
        "retrievalStartDate": {
          "type": "string",
          "defaultValue": "",
          "metadata": { "description": "Date-time at which to start the data retrieval; default: 'now' if not provided. Recommended format: yyyy-MM-ddTHH:mm:ss.fffffffZ" }
        }
      },
      "variables": { },
      "resources": [{
        "type": "Microsoft.Kusto/Clusters/Databases/DataConnections",
        "apiVersion": "2022-11-11",
        "name": "[concat(parameters('kustoClusterName'), '/', parameters('kustoDbName'), '/', parameters('kustoConnectionName'))]",
        "location": "[parameters('kustoLocation')]",
        "kind": "CosmosDb",
        "properties": {
          "tableName": "[parameters('kustoTable')]",
          "mappingRuleName": "[parameters('kustoMappingRuleName')]",
          "managedIdentityResourceId": "[parameters('managedIdentityResourceId')]",
          "cosmosDbAccountResourceId": "[parameters('cosmosDbAccountResourceId')]",
          "cosmosDbDatabase": "[parameters('cosmosDbDatabase')]",
          "cosmosDbContainer": "[parameters('cosmosDbContainer')]",
          "retrievalStartDate": "[parameters('retrievalStartDate')]"
        }
      }]
    }
    ```
---
## Step 3: Test the data connection
1. In the Cosmos DB container, insert the following document:
    ```json
    {
        "name":"Cousteau"
    }
    ```
1. In the Azure Data Explorer web UI, run the following query:
    ```kusto
    TestTable
    ```
    The result set should look like the following image:
    :::image type="content" source="media/ingest-data-cosmos-db/test-result.png" alt-text="Screenshot of the results pane, showing the ingested document.":::
> [!NOTE]
>
> Azure Data Explorer has an aggregation (batching) policy for queued data ingestion designed to optimize the ingestion process. The default batching policy is configured to seal a batch once one of the following conditions is true for the batch: a maximum delay time of 5 minutes, total size of one GB, or 1000 blobs. Therefore, you may experience a latency. For more information, see [batching policy](kusto/management/batching-policy.md). To reduce latency, configure your table to support streaming. See [streaming policy](kusto/management/streaming-ingestion-policy.md).
## Considerations
The following considerations apply to the Cosmos DB change feed:
- The change feed doesn't expose *deletion* events.
    The Cosmos DB change feed only includes new and updated documents. If you need to know about deleted documents, you can configure your feed use a [soft marker](/azure/cosmos-db/change-feed#change-feed-and-different-operations) to mark a Cosmos DB document as deleted. A property is added to update events that indicate whether a document has been deleted. You can then use the `where` operator in your queries to filter them out.
    For example, if you map the deleted property to a table column called **IsDeleted**, you can filter out deleted documents with the following query:
    ```kusto
    TestTable
    | where not(IsDeleted)
    ```
- The change feed only exposes the *latest* update of a document.
    To understand the ramification of the second consideration, examine the following scenario:
    A Cosmos DB container contains documents *A* and *B*. The changes to a property called **foo** are shown in the following table:
    | Document ID | Property **foo** | Event | Document timestamp (**_ts**) |
    |---|---|---|---|
    | A | Red | Creation | 10 |
    | B | Blue | Creation | 20 |
    | A | Orange | Update | 30 |
    | **A** | **Pink** | **Update** | **40** |
    | B | Violet | Update | 50 |
    | A | Carmine | Update | 50 |
    | B | NeonBlue | Update | 70 |
    The change feed API is polled by the data connector at regular intervals, typically every few seconds. Each poll contains changes that occurred in the container between calls, *but only the latest version of change per document*.
    To illustrate the issue, consider a sequence of API calls with timestamps *15*, *35*, *55*, and *75* as shown in the following table:
    | API Call Timestamp | Document ID | Property **foo** | Document timestamp (**_ts**) |
    |---|---|---|---|
    | 15 | A | Red | 10 |
    | 35 | B | Blue | 20 |
    | 35 | A | Orange | 30 |
    | 55 | B | Violet | 50 |
    | 55 | A | Carmine | 60 |
    | 75 | B | NeonBlue | 70 |
    Comparing the API results to the list of changes made in the Cosmos DB document, you'll notice that they don't match. The update event to document *A*, highlighted in the change table at timestamp 40, doesn't appear in the results of the API call.
    To understand why the event doesn't appear, we'll examine the changes to document *A* between the API calls at timestamps 35 and 55. Between these two calls, document *A* changed twice, as follows:
    | Document ID | Property **foo** | Event | Document timestamp (**_ts**) |
    |---|---|---|---|
    | A | Pink | Update | 40 |
    | A | Carmine | Update | 50 |
    When the API call at timestamp 55 is made, the change feed API returns the latest version of the document. In this case, the latest version of document *A* is the update at timestamp 50, which is the update to property **foo** from *Pink* to *Carmine*.
    Because of this scenario, the data connector may miss some intermediate document changes. For example, some events may be missed if the data connection service is down for a few minutes, or if the frequency of document changes is higher than the API polling frequency. However, the latest state of each document is captured.
- Deleting and recreating a Cosmos DB container isn't supported
    Azure Data Explorer keeps track of the change feed by checkpointing the "position" it is at in the feed.  This is done using continuation token on each physical partitions of the container.  When a container is deleted/recreated, those continuation token are invalid and aren't reset:  you must delete and recreate the data connection.
## Estimate cost
How much does using the Cosmos DB data connection impact your Cosmos DB container's [Request Units (RUs)](/azure/cosmos-db/request-units) usage?
The connector invokes the Cosmos DB Change Feed API on each physical partition of your container, to up to once a second. The following costs are associated with these invocations:
| Cost | Description |
| -- | -- |
| Fixed costs | Fixed costs are about 2 RUs per physical partition every second. |
| Variable costs | Variable costs are about 2% of the RUs used to write documents, though this may vary depending on your scenario. For example, if you write 100 documents to a Cosmos DB container, the cost of writing those documents is 1,000 RUs. The corresponding cost for using the connector to read those document is about 2% the cost to write them, approximately 20 RUs. |
## Related content
* [Get latest versions of Azure Cosmos DB documents](ingest-data-cosmos-db-queries.md)
* [Kusto Query Language (KQL) overview](kusto/query/index.md)