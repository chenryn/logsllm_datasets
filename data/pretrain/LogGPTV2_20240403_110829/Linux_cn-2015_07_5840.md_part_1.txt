---
author: ''
category: 技术
comments_data:
- date: '2015-07-20 11:50:19'
  message: 变的真多
  postip: 220.181.38.106
  username: 来自 - 北京 的 Chrome/Mac 用户
- date: '2015-07-20 13:05:33'
  message: php越来越不伦不类了
  postip: 113.91.173.31
  username: 来自 - 广东深圳 的 Chrome/Windows 用户
- date: '2015-07-21 16:39:31'
  message: hi
  postip: 14.18.206.194
  username: 来自 - 广东广州 的 Chrome/Windows 用户
count:
  commentnum: 3
  favtimes: 1
  likes: 0
  sharetimes: 0
  viewnum: 15267
date: '2015-07-20 07:31:00'
editorchoice: false
excerpt: PHP 7.0.0 beta1 发布了，在带来了引人注目的性能提升的同时，也带来了不少语言特性方面的改变。以下由 LCTT 翻译自对官方的升级备注，虽然目前还不是正式发布版，不过想必距离正式发布的特性已经差别不大了。（本文会持续追踪更新）  1.
  向后不兼容的变化 语言变化 变量处理的变化   间接变量、属性和方法引用现在以从左到右的语义进行解释。一些例子： $$foo // 解释做 ($$foo) $foo-$bar
  // 解释做 ($foo-$bar) $foo-$bar() // 解释做 ($foo-$bar)() Foo::$bar() // 解释做 (Foo::$bar)()  要恢复以前的行为，需要显式地加大括号：
  ${$
fromurl: https://github.com/php/php-src/blob/php-7.0.0beta1/UPGRADING
id: 5840
islctt: true
largepic: /data/attachment/album/201507/18/180247oz05zwm8py7mw8zq.png
permalink: /article-5840-1.html
pic: /data/attachment/album/201507/18/180247oz05zwm8py7mw8zq.png.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: PHP 7.0.0 beta1 发布了，在带来了引人注目的性能提升的同时，也带来了不少语言特性方面的改变。以下由 LCTT 翻译自对官方的升级备注，虽然目前还不是正式发布版，不过想必距离正式发布的特性已经差别不大了。（本文会持续追踪更新）  1.
  向后不兼容的变化 语言变化 变量处理的变化   间接变量、属性和方法引用现在以从左到右的语义进行解释。一些例子： $$foo // 解释做 ($$foo) $foo-$bar
  // 解释做 ($foo-$bar) $foo-$bar() // 解释做 ($foo-$bar)() Foo::$bar() // 解释做 (Foo::$bar)()  要恢复以前的行为，需要显式地加大括号：
  ${$
tags:
- PHP
- PHP 7
thumb: false
title: PHP 7.0 升级备注
titlepic: false
translator: wxy
updated: '2015-07-20 07:31:00'
---
PHP 7.0.0 beta1 发布了，在带来了引人注目的性能提升的同时，也带来了不少语言特性方面的改变。以下由 LCTT 翻译自对官方的[升级备注](https://github.com/php/php-src/blob/php-7.0.0beta1/UPGRADING)，虽然目前还不是正式发布版，不过想必距离正式发布的特性已经差别不大了。（本文会持续追踪更新）
 ![](/data/attachment/album/201507/18/180247oz05zwm8py7mw8zq.png)
1. 向后不兼容的变化
-----------
### 语言变化
#### 变量处理的变化
* 间接变量、属性和方法引用现在以从左到右的语义进行解释。一些例子：
```
$$foo['bar']['baz'] // 解释做 ($$foo)['bar']['baz']   
$foo->$bar['baz']   // 解释做 ($foo->$bar)['baz']
$foo->$bar['baz']() // 解释做 ($foo->$bar)['baz']()
Foo::$bar['baz']()  // 解释做 (Foo::$bar)['baz']()
```
要恢复以前的行为，需要显式地加大括号：
```
${$foo['bar']['baz']}
$foo->{$bar['baz']}
$foo->{$bar['baz']}()
Foo::{$bar['baz']}()
```
* 全局关键字现在只接受简单变量。像以前的
```
global $$foo->bar;
```
现在要求如下写法：
```
global ${$foo->bar};
```
* 变量或函数调用的前后加上括号不再有任何影响。例如下列代码，函数调用结果以引用的方式传给一个函数
```
function getArray() { return [1, 2, 3]; }
$last = array_pop(getArray());
// Strict Standards: 只有变量可以用引用方式传递
$last = array_pop((getArray()));
// Strict Standards: 只有变量可以用引用方式传递
```
现在无论是否使用括号，都会抛出一个严格标准错误。以前在第二种调用方式下不会有提示。
* 数组元素或对象属性自动安装引用顺序创建，现在的结果顺序将不同。例如：
```
$array = [];
$array["a"] =& $array["b"];
$array["b"] = 1;
var_dump($array);
```
现在结果是 ["a" => 1, "b" => 1]，而以前的结果是 ["b" => 1, "a" => 1]。
相关的 RFC：
* 
* 
#### list() 的变化
* list() 不再以反序赋值，例如：
```
list($array[], $array[], $array[]) = [1, 2, 3];
var_dump($array);
```
现在结果是 $array == [1, 2, 3] ，而不是 [3, 2, 1]。注意仅赋值**顺序**变化了，而赋值仍然一致（LCTT 译注：即以前的 list()行为是从后面的变量开始逐一赋值，这样对与上述用法就会产生 [3,2,1] 这样的结果了。）。例如，类似如下的常规用法
```
list($a, $b, $c) = [1, 2, 3];
// $a = 1; $b = 2; $c = 3;
```
仍然保持当前的行为。
* 不再允许对空的 list() 赋值。如下全是无效的：
```
list() = $a;
list(,,) = $a;
list($x, list(), $y) = $a;
```
* list() 不再支持对字符串的拆分（以前也只在某些情况下支持）。如下代码：
```
$string = "xy";
list($x, $y) = $string;
```
现在的结果是： $x == null 和 $y == null （没有提示），而以前的结果是： $x == "x" 和 $y == "y" 。此外， list() 现在总是可以处理实现了 ArrayAccess 的对象，例如：
```
list($a, $b) = (object) new ArrayObject([0, 1]);
```
现在的结果是： $a == 0 和 $b == 1。 以前 $a 和 $b 都是 null。
相关 RFC:
* 
* 
#### foreach 的变化
* foreach() 迭代不再影响数组内部指针，数组指针可通过 current()/next() 等系列的函数访问。例如：
```
$array = [0, 1, 2];
foreach ($array as &$val) {
    var_dump(current($array));
}
```
现在将指向值 int(0) 三次。以前的输出是 int(1)、int(2) 和 bool(false)。
* 在对数组按值迭代时，foreach 总是在对数组副本进行操作，在迭代中任何对数组的操作都不会影响到迭代行为。例如：
```
$array = [0, 1, 2];
$ref =& $array; // Necessary to trigger the old behavior
foreach ($array as $val) {
    var_dump($val);
    unset($array[1]);
}
```
现在将打印出全部三个元素 (0 1 2)，而以前第二个元素 1 会跳过 (0 2)。
* 在对数组按引用迭代时，对数组的修改将继续会影响到迭代。不过，现在 PHP 在使用数字作为键时可以更好的维护数组内的位置。例如，在按引用迭代过程中添加数组元素：
```
$array = [0];
foreach ($array as &$val) {
    var_dump($val);
    $array[1] = 1;
}
```
现在迭代会正确的添加了元素。如上代码输出是 "int(0) int(1)"，而以前只是 "int(0)"。
* 对普通（不可遍历的）对象按值或按引用迭代的行为类似于对数组进行按引用迭代。这符合以前的行为，除了如上一点所述的更精确的位置管理的改进。
* 对可遍历对象的迭代行为保持不变。
相关 RFC: 
#### 参数处理的变化
* 不能定义两个同名的函数参数。例如，下面的方法将会触发编译时错误：
```
public function foo($a, $b, $unused, $unused) {
    // ...
}
```
如上的代码应该修改使用不同的参数名，如：
```
public function foo($a, $b, $unused1, $unused2) {
    // ...
}
```
* func\_get\_arg() 和 func\_get\_args() 函数不再返回传递给参数的原始值，而是返回其当前值（也许会被修改）。例如：
```
function foo($x) {
    $x++;
    var_dump(func_get_arg(0));
}
foo(1);
```
将会打印 "2" 而不是 "1"。代码应该改成仅在调用 func\_get\_arg(s) 后进行修改操作。
```
function foo($x) {
    var_dump(func_get_arg(0));