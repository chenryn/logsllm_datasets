• CWE-250: Execution with Unnecessary Privileges
• CWE-327: Use of a Broken or Risky Cryptographic Algorithm*
• CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization (‘‘Race Condi-
tion’’)
• CWE-377: Insecure Temporary File
• CWE-676: Use of Potentially Dangerous Function*
Flawﬁnder 
26 Aug 2017
10
FLAWFINDER(1) 
Flawﬁnder 
FLAWFINDER(1)
• CWE-732: Incorrect Permission Assignment for Critical Resource*
• CWE-785: Use of Path Manipulation Function without Maximum-sized Buffer (child of CWE-120*, so
this is shown as CWE-120/CWE-785)
• CWE-807: Reliance on Untrusted Inputs in a Security Decision*
• CWE-829: Inclusion of Functionality from Untrusted Control Sphere*
You can select a speciﬁc subset of CWEs to report by using the ‘‘−−regex’’ (-e) option. This option accepts
a regular expression, so you can select multiple CWEs, e.g., ‘‘−−regex "CWE-120|CWE-126"’’. If you
select multiple CWEs with ‘‘|’’ on a command line you will typically need to quote the parameters (since an
unquoted ‘‘|’’ is the pipe symbol). Flawﬁnder is designed to meet the CWE-Searchable requirement.
If your goal is to report a subset of CWEs that are listed in a ﬁle, that can be achieved on a Unix-like sys-
tem using the ‘‘−−regex’’ aka ‘‘−e’’ option. The ﬁle must be in regular expression format. For example,
‘‘ﬂawﬁnder -e $(cat ﬁle1)’’ would report only hits that matched the pattern in ‘‘ﬁle1’’. If ﬁle1 contained
‘‘CWE-120|CWE-126’’ it would only report hits matching those CWEs.
A list of all CWE security elements (the signatures/patterns that ﬂawﬁnder looks for) can be found by using
the ‘‘−−listrules’’ option. Each line lists the signature token (typically a function name) that may lead to a
hit, the default risk level, and the default warning (which includes the default CWE identiﬁer). For most
purposes this is also enough if you want to see what CWE security elements map to which CWEs, or the
reverse. For example, to see the most of the signatures (function names) that map to CWE-327, without
seeing the default risk level or detailed warning text, run ‘‘ﬂawﬁnder −−listrules | grep CWE-327 | cut -f1’’.
You can also see the tokens without a CWE mapping this way by running ‘‘ﬂawﬁnder -D --listrules | grep
-v CWE-’’. However, while −−listrules lists all CWE security elements, it only lists the default mappings
from CWE security elements to CWE identiﬁers. It does not include the reﬁnements that ﬂawﬁnder applies
(e.g., by examining function parameters).
If you want a detailed and exact mapping between the CWE security elements and CWE identiﬁers, the
ﬂawﬁnder source code (included in the distribution) is the best place for that information. This detailed
information is primarily of interest to those few people who are trying to reﬁne the CWE mappings of
ﬂawﬁnder or reﬁne CWE in general. The source code documents the mapping between the security ele-
ments to the respective CWE identiﬁers, and is a single Python ﬁle. The ‘‘c_rules’’ dataset deﬁnes most
rules, with reference to a function that may make further reﬁnements. You can search the dataset for func-
tion names to see what CWE it generates by default; if ﬁrst parameter is not ‘‘normal’’ then that is the name
of a reﬁning Python method that may select different CWEs (depending on additional information). Con-
versely, you can search for ‘‘CWE-number’’ and ﬁnd what security elements (signatures or patterns) refer
to that CWE identiﬁer. For most people, this is much more than they need; most people just want to scan
their source code to quickly ﬁnd problems.
SECURITY
The whole point of this tool is to help ﬁnd vulnerabilities so they can be ﬁxed. However, dev elopers and
reviewers must know how to dev elop secure software to use this tool, because otherwise, a fool with a tool
is still a fool. My book at http://www.dwheeler.com/secure-programs may help.
This tool should be, at most, a small part of a larger software development process designed to eliminate or
reduce the impact of vulnerabilities. Developers and reviewers need know how to dev elop secure software,
and they need to apply this knowledge to reduce the risks of vulnerabilities in the ﬁrst place.
Different vulnerability-ﬁnding tools tend to ﬁnd different vulnerabilities. Thus, you are best off using
human review and a variety of tools. This tool can help ﬁnd some vulnerabilities, but by no means all.
You should always analyze a copy of the source program being analyzed, not a directory that can be modi-
ﬁed by a developer while ﬂawﬁnder is performing the analysis. This is especially true if you don’t necess-
ily trust a developer of the program being analyzed. If an attacker has control over the ﬁles while you’re
analyzing them, the attacker could move ﬁles around or change their contents to prevent the exposure of a
security problem (or create the impression of a problem where there is none). If you’re worried about
Flawﬁnder 
26 Aug 2017
11
FLAWFINDER(1) 
Flawﬁnder 
FLAWFINDER(1)
malicious programmers you should do this anyway, because after analysis you’ll need to verify that the
code eventually run is the code you analyzed. Also, do not use the −−allowlink option in such cases;
attackers could create malicious symbolic links to ﬁles outside of their source code area (such as
/etc/passwd).
Source code management systems (like GitHub, SourceForge, and Savannah) deﬁnitely fall into this cate-
gory; if you’re maintaining one of those systems, ﬁrst copy or extract the ﬁles into a separate directory (that
can’t be controlled by attackers) before running ﬂawﬁnder or any other code analysis tool.
Note that ﬂawﬁnder only opens regular ﬁles, directories, and (if requested) symbolic links; it will never
open other kinds of ﬁles, even if a symbolic link is made to them. This counters attackers who insert
unusual ﬁle types into the source code. However, this only works if the ﬁlesystem being analyzed can’t be
modiﬁed by an attacker during the analysis, as recommended above. This protection also doesn’t work on
Cygwin platforms, unfortunately.
Cygwin systems (Unix emulation on top of Windows) have an additional problem if ﬂawﬁnder is used to
analyze programs that the analyst cannot trust. The problem is due to a design ﬂaw in Windows (that it
inherits from MS-DOS). On Windows and MS-DOS, certain ﬁlenames (e.g., ‘‘com1’’) are automatically
treated by the operating system as the names of peripherals, and this is true even when a full pathname is
given. Yes, Windows and MS-DOS really are designed this badly. Flawﬁnder deals with this by checking
what a ﬁlesystem object is, and then only opening directories and regular ﬁles (and symlinks if enabled).
Unfortunately, this doesn’t work on Cygwin; on at least some versions of Cygwin on some versions of Win-
dows, merely trying to determine if a ﬁle is a device type can cause the program to hang. A workaround is
to delete or rename any ﬁlenames that are interpreted as device names before performing the analysis.
These so-called ‘‘reserved names’’ are CON, PRN, AUX, CLOCK$, NUL, COM1-COM9, and
LPT1-LPT9, optionally followed by an extension (e.g., ‘‘com1.txt’’), in any directory, and in any case
(Windows is case-insensitive).
Do not load or diff hitlists from untrusted sources. They are implemented using the Python pickle module,
and the pickle module is not intended to be secure against erroneous or maliciously constructed data.
Stored hitlists are intended for later use by the same user who created the hitlist; in that context this restric-
tion is not a problem.
BUGS
Flawﬁnder is based on simple text pattern matching, which is part of its fundamental design and not easily
changed. This design approach leads to a number of fundamental limitations, e.g., a higher false positive
rate, and is the underlying cause of most of the bugs listed here. On the positive side, ﬂawﬁnder doesn’t get
confused by many complicated preprocessor sequences that other tools sometimes choke on; ﬂawﬁnder can
often handle code that cannot link, and sometimes cannot even compile or build.
Flawﬁnder is currently limited to C/C++. In addition, when analyzing C++ it focuses primarily on the C
subset of C++. For example, ﬂawﬁnder does not report on expressions like cin >> charbuf, where charbuf
is a char array. That is because ﬂawﬁnder doesn’t hav e type information, and ">>" is safe with many other
types; reporting on all ">>" would lead to too many false positives. That said, it’s designed so that adding
support for other languages should be easy where its text-based approach can usefully apply.
Flawﬁnder can be fooled by user-deﬁned functions or method names that happen to be the same as those
deﬁned as ‘‘hits’’ in its database, and will often trigger on deﬁnitions (as well as uses) of functions with the
same name. This is typically not a problem for C code. In C code, a function with the same name as a
common library routine name often indicates that the developer is simply rewriting a common library rou-
tine with the same interface, say for portability’s sake. C programs tend to avoid reusing the same name for
a different purpose (since in C function names are global by default). There are reasonable odds that these
rewritten routines will be vulnerable to the same kinds of misuse, and thus, reusing these rules is a reason-
able approach. However, this can be a much more serious problem in C++ code which heavily uses classes
and namespaces, since the same method name may have many different meanings. The −−falsepositive
option can help somewhat in this case. If this is a serious problem, feel free to modify the program, or
process the ﬂawﬁnder output through other tools to remove the false positives.
Flawﬁnder 
26 Aug 2017
12
FLAWFINDER(1) 
Flawﬁnder 
FLAWFINDER(1)
Preprocessor commands embedded in the middle of a parameter list of a call can cause problems in parsing,
in particular, if a string is opened and then closed multiple times using an #ifdef .. #else construct,
ﬂawﬁnder gets confused. Such constructs are bad style, and will confuse many other tools too. If you must
analyze such ﬁles, rewrite those lines. Thankfully, these are quite rare.
Some complex or unusual constructs can mislead ﬂawﬁnder. In particular, if a parameter begins with get-
text(" and ends with ), ﬂawﬁnder will presume that the parameter of gettext is a constant. This means it
will get confused by patterns like gettext("hi") + function("bye"). In practice, this doesn’t seem to be a
problem; gettext() is usually wrapped around the entire parameter.
The routine to detect statically deﬁned character arrays uses simple text matching; some complicated
expressions can cause it to trigger or not trigger unexpectedly.
Flawﬁnder looks for speciﬁc patterns known to be common mistakes. Flawﬁnder (or any tool like it) is not
a good tool for ﬁnding intentionally malicious code (e.g., Trojan horses); malicious programmers can easily
insert code that would not be detected by this kind of tool.
Flawﬁnder looks for speciﬁc patterns known to be common mistakes in application code. Thus, it is likely
to be less effective analyzing programs that aren’t application-layer code (e.g., kernel code or self-hosting
code). The techniques may still be useful; feel free to replace the database if your situation is signiﬁcantly
different from normal.
Flawﬁnder’s default output format (ﬁlename:linenumber, followed optionally by a :columnnumber) can be
misunderstood if any source ﬁles have very weird ﬁlenames. Filenames embedding a newline/linefeed
character will cause odd breaks, and ﬁlenames including colon (:) are likely to be misunderstood. This is
especially important if ﬂawﬁnder’s output is being used by other tools, such as ﬁlters or text editors. If you
are using ﬂawﬁnder’s output in other tools, consider using its CSV format instead (which can handle this).
If you’re looking at new code, examine the ﬁles for such characters. It’s incredibly unwise to have such
ﬁlenames anyway; many tools can’t handle such ﬁlenames at all. Newline and linefeed are often used as
internal data delimeters. The colon is often used as special characters in ﬁlesystems: MacOS uses it as a
directory separator, Windows/MS-DOS uses it to identify drive letters, Windows/MS-DOS inconsistently
uses it to identify special devices like CON:, and applications on many platforms use the colon to identify
URIs/URLs. Filenames including spaces and/or tabs don’t cause problems for ﬂawﬁnder, though note that
other tools might have problems with them.
Flawﬁnder is not internationalized, so it currently does not support localization.
In general, ﬂawﬁnder attempts to err on the side of caution; it tends to report hits, so that they can be exam-
ined further, instead of silently ignoring them. Thus, ﬂawﬁnder prefers to have false positives (reports that
turn out to not be problems) rather than false negatives (failures to report security vulnerabilities). But this
is a generality; ﬂawﬁnder uses simplistic heuristics and simply can’t get everything "right".
Security vulnerabilities might not be identiﬁed as such by ﬂawﬁnder, and conversely, some hits aren’t really
security vulnerabilities. This is true for all static security scanners, and is especially true for tools like
ﬂawﬁnder that use a simple lexical analysis and pattern analysis to identify potential vulnerabilities. Still, it
can serve as a useful aid for humans, helping to identify useful places to examine further, and that’s the
point of this simple tool.
SEE ALSO
See the ﬂawﬁnder website at http://www.dwheeler.com/ﬂawﬁnder. You should also see the Secure Pro-
gramming HOWTO at http://www.dwheeler.com/secure-programs.
AUTHOR
David A. Wheeler (PI:EMAIL).
Flawﬁnder 
26 Aug 2017
13