t
i
d
w
d
n
a
B
 80
 70
 60
 50
 40
 30
 20
 10
 0
k-subscription
Vanilla system
Tor
)
s
p
b
K
(
n
o
i
t
p
m
u
s
n
o
c
h
t
i
d
w
d
n
a
B
 2.5
 2
 1.5
 1
 0.5
 0
k-subscription
Vanilla system
Tor
1
10
20
30
40
50
60
70
80
90 100
1
10
20
30
40
50
60
70
80
90 100
k: Obfuscation level
k: Obfuscation level
(a) Initialization stage (load 20 tweets)
(b) Idle stage (download incoming tweets)
Figure 12: Bandwidth consumption with k-subscription, Tor and vanilla system.
k-subscription
Vanilla system
Tor
)
s
d
n
o
c
e
s
(
y
c
n
e
t
a
L
i
g
n
s
w
o
r
B
 12
 10
 8
 6
 4
 2
 0
1
10
20
30
40
50
60
70
80
90 100
k: Obfuscation level
Figure 13: Browsing latency as a function
of k when a user opens Twitter’s main page.
corresponds to short term spikes, while the low bandwidth in idle
stage (see Figure 12(b)) corresponds to much longer periods, as the
user keeps Twitter’s page open in the browser.
In Figure 12 we also compare the bandwidth consumption of k-
subscription with a Tor browser. Although Tor offers a completely
different type of anonymity than k-subscription, it could be used
with a fake account as a different approach to hide user’s interests.
Thus, we evaluate k-subscription using the performance of Tor with
a fake Twitter account as a baseline case. We see that Tor adds an
additional bandwidth overhead due to its data encapsulation.
In
particular, the average packet size of Twitter trafﬁc over Tor is 789
bytes, when the vanilla Twitter trafﬁc has an average packet size
of 239 bytes. This is the main reason that during the idle stage the
bandwidth consumption of Tor is quite higher than the consump-
tion of k-subscription, e.g., two times higher when k = 90. During
the initialization stage, Tor has a higher bandwidth consumption
than k-subscription with values of k up to 10, and lower consump-
tion when k exceeds 10. This is due to the increased number of
tweets downloaded at startup by k-subscription with high k values
to construct a full page of useful tweets. However, as the initial-
ization stage lasts only for few seconds, compared with idle stage,
k-subscription adds less overhead in terms of bandwidth.
When k-subscription compounds the user’s timeline, it contin-
ues to download tweets in the background until it reaches a cer-
tain number, which is constant for each k value. This way, k-
subscription avoids leaking any information that Twitter could an-
alyze to ﬁnd out the channels a user is interested in.
6.5 Browsing Latency
In our next experiment we set out to explore the latency that
k-subscription imposes to user’s browsing experience. We instru-
mented our browser extension to measure the latency from the time
that a user asks for one or more tweets till the time that the browser
actually displays the relative information in the page, excluding any
tweets from noise channels. This latency includes the time spent in
network for downloading tweets, as well as the time spent in the
CPU for excluding the noise and rendering the page. Note that the
user’s timeline is fully rendered when all the 20 tweets needed are
received, despite the fact that more tweets are downloaded in the
background to hide the actual user’s interests.
Figure 13 shows the latency for displaying a page with k-subscri-
ption for several values of k when the user opens Twitter and loads
her timeline. We see that the latency for downloading and display-
ing a full page with 20 tweets slightly increases with the number of
noise channels, reaching to 7.7 seconds for k = 100 when without
k-subscription (see k = 1) the latency to display the same page
is 2.8 seconds. Therefore, a slight delay of less than 5 seconds is
not expected to signiﬁcantly affect the user’s browsing experience,
while, at the same time, it enhances her privacy. Selecting a smaller
number of noise channels results in even lower latency. Note that
this small delay is only observed at the initialization stage, due to
the increased number of tweets needed to construct the user’s ac-
tual timeline. When the browser remains open (idle stage) we do
not observe any noticeable delay to render the incoming tweets,
even at very high values of k. If an incoming tweet belongs to a
noise channel we just drop it, else it is immediately given to user
with no further delay. Thus, our approach does not impose any
signiﬁcant overhead to the browsing latency.
In Figure 13 we also compare the browsing latency of k-subscri-
ption and Tor. We see that Tor requires a much higher latency to
display Twitter’s page, close to 10 seconds. This is due to the longer
path from user to Twitter through the anonymization network.
During the previous experiments we measured the CPU load
of the browser, using the Linux’s time utility. The CPU load
was negligible for all values of k, always less than 1%, even for
k = 100. Thus, our k-subscription browser extension does not
add any considerable CPU overhead to the system.
7. RELATED WORK
Anonymous communications. One way to hide a user’s ac-
cesses on the web is to use an anonymization service [6, 20]. Al-
though such services can effectively hide a user’s IP address, they
can not hide the user’s identity if the user is logged into a mi-
croblogging service or if a subset of user’s previous web accesses
is known [19]. Recently, obfuscation was used to hide a user’s dig-
ital tracks. Kido et al. [13] protect the user’s location privacy by
sending false position data together with the true information.
Search engine query obfuscation. Howe and Nissenbaum [11]
proposed TrackMeNot, a system designed to hide a user’s real in-
terest from a search engine. For each real query submitted to the
search engine, TrackMeNot also submits several other queries to
confuse the search engine and introduce doubt for the user’s real
queries. GooPIR [7] proposes an approach that is robust against
timing attacks. For each real query, GooPIR constructs k − 1 other
queries and submits all k of them at the same time. This way, the
search engine cannot construct a timing model on the user’s real
queries. Murugesan and Clifton [16] propose Plausibly Deniable
Search (PDS). Similar to GooPIR, each real query is accompanied
by k − 1 other noise queries. Each real query, however, is also
brought into a canonical from to prevent identiﬁability based on
typos and/or grammar/syntax of the queries [2, 17]. Ye et al. [25]
propose noise injection for search privacy protection. They give a
lower bound for the noise queries required for perfect privacy and
provide the optimal protection given the number of noise queries.
Although the above systems are very effective at hiding one
real query in a crowd of k queries, a determined adversary may
be able to ﬁnd a user’s interests by studying successive sequences
of queries [4]. Indeed, if a user consistently generates authentic
57queries on a particular topic, but the k−1 “noise” queries added are
on several different topics, then the adversary may easily ﬁnd the
user’s real interests using clustering approaches. To protect against
clustering attacks, PRAW [9] generates dummy queries on topics
related to the topics the user is interested in.
Our work shares ideas with the above works on search engine
query obfuscation. However, it has a fundamental difference: in
the ﬁeld of search engine query obfuscation it is possible for some
queries, especially the rare ones, to be submitted by only one user.
Therefore, it is easy for the search engine to identify the users
who submit rare queries and thus, to accurately ﬁnd their interests.
On the contrary, in k-subscription we always make sure that each
channel, even the rare ones, is followed by lot of users. To put it
simply: it is not how many “noise” channels a user follows – it is
how many other users follow her channels of interest.
Hummingbird. Cristofaro et al. proposed Hummingbird, a
system to provide privacy in Twitter [5]. The system assumes that
a user (Alice) is interested in following a particular hashtag, e.g.,
from the New York Times (NYT). Hummingbird makes sure that
neither Twitter nor NYT learn that Alice is interested in this hash-
tag. To achieve this, information providers (such as NYT) encrypt
their tweets and information consumers (such as Alice) are able to
decrypt the tweets matching the hashtags they are interested in.
Although Hummingbird is effective at hiding the hashtags Alice
is interested in, and seems related to our work, we see two main
differences with our approach: (i) Hummingbird requires the ex-
plicit collaboration of the information provider (e.g., NYT) who
should encrypt its tweets appropriately, and distribute keys so that
Alice will be able to decrypt the tweets matching the hashtags she
is interested in. In contrast, our system does not require any collab-
oration from the information providers: it is implemented on top
of Twitter as it is today. (ii) Although a user in Hummingbird is
able to hide the hashtag she is interested in, she cannot hide the fact
that she follows a particular channel (such as NYT). Our system is
able to help Alice hide the fact that she is interested in the particu-
lar channel by making sure that she follows several other channels,
and other people include this channel among their noise channels.
k-anonymity. Our work is similar to the concept of k-anonymity,
which suggests that data should be anonymized in a way that any
person in a released dataset should be indistinguishable from at
least k − 1 other persons in the same dataset [22]. To achieve
k-anonymity, data are generalized so that any information that can
uniquely identify a person will always point to at least k persons [18].
k-anonymity is frequently used together with l-diversity, which
makes sure that all the persons in the same k-anonymity group do
not have a common sensitive property [14].
8. CONCLUSION
Although microblogging services enable users to have timely ac-
cess to their information needs through a publish-subscribe model,
this creates major privacy concerns. As users declare all channels
they are interested in following, the microblogging service is able
to gather all their interests, including possible privacy-sensitive do-
mains. To remedy this situation, we propose k-subscription: an
obfuscation-based approach that encourages the users to follow k−
1 additional “noise” channels for each channel they are really inter-
ested in following. We present a detailed analysis of our approach
and show that by ﬁne-tuning the k parameter we are able to re-
duce the conﬁdence that the microblogging service has in knowing
which channels each user is really interesting in. We have devel-
oped a prototype implementation as an extension for the Chrome
browser using Twitter as case study. Our experimental evaluation
shows that users may easily follow hundreds of noise channels with
minimal run-time overhead when they receive news they are inter-
ested in. We believe that as an ever-increasing number of users
turn to microblogging services for their daily information needs,
privacy concerns will continue to escalate, and solutions such as
k-subscription will become increasingly more important.
Acknowledgements
We thank our shepherd Matt Fredrikson and the anonymous re-
viewers for their valuable feedback. This work was supported in
part by the FP7 project SysSec and the FP7-PEOPLE-2009-IOF
project MALCODE, funded by the European Commission under
Grant Agreements No. 254116 and No. 257007, by the German
Federal Ministry of Education and Research under grant 01BY1111
/ MoBE, and by the NSF through Grant CNS-1318415.
9. REFERENCES
[1] Twellow Directory. http://www.twellow.com/categories/.
[2] S. Afroz, M. Brennan, and R. Greenstadt. Detecting Hoaxes, Frauds, and
Deception in Writing Style Online. In IEEE Symposium on Security and
Privacy, 2012.
[3] D. Bachrach, C. Nunu, D. Wallach, and M. Wright. #h00t: Censorship
Resistant Microblogging. arXiv preprint arXiv:1109.6874, 2011.
[4] E. Balsa, C. Troncoso, and C. Diaz. OB-PWS: Obfuscation-Based Private
Web Search. In IEEE Symposium on Security and Privacy, 2012.
[5] E. De Cristofaro, C. Soriente, G. Tsudik, and A. Williams. Hummingbird:
Privacy at the time of Twitter. In IEEE Symposium on Security and Privacy,
2012.
[6] R. Dingledine, N. Mathewson, and P. Syverson. Tor: The
Second-Generation Onion Router. In USENIX Security Symposium, 2004.
[7] J. Domingo-Ferrer, A. Solanas, and J. Castellà-Roca. h(k)-private
information retrieval from privacy-uncooperative queryable databases.
Online Information Review, 2009.
[8] P. Eckersley. How Unique is Your Web Browser? In Privacy Enhancing
Technologies (PET), 2010.
[9] Y. Elovici, C. Glezer, and B. Shapira. Enhancing Customer Privacy While
Searching for Products and Services on the World Wide Web. Internet
Research, 2005.
[10] Epistolary. Rob’s Giant BonusCard Swap Meet.
http://epistolary.org/rob/bonuscard/.
[11] D. Howe and H. Nissenbaum. TrackMeNot: Resisting Surveillance in Web
Search. Lessons from the Identity Trail: Anonymity, Privacy, and Identity in
a Networked Society, 2009.
[12] R. Jones, R. Kumar, B. Pang, and A. Tomkins. I Know What You Did Last
Summer: Query Logs and User Privacy. In ACM Conference on Information
and Knowledge Management (CIKM), 2007.
[13] H. Kido, Y. Yanagisawa, and T. Satoh. An Anonymous Communication
Technique Using Dummies for Location-Based Services. In IEEE
International Conference on Pervasive Services (ICPS), 2005.
[14] A. Machanavajjhala, D. Kifer, J. Gehrke, and M. Venkitasubramaniam.
l-Diversity: Privacy Beyond k-Anonymity. ACM Transactions on
Knowledge Discovery from Data (TKDD), 2007.
[15] J. R. Mayer and J. C. Mitchell. Third-Party Web Tracking: Policy and
Technology. In IEEE Symposium on Security and Privacy, 2012.
[16] M. Murugesan and C. Clifton. Providing Privacy through Plausibly Deniable
Search. In SIAM International Conference on Data Mining (SDM), 2009.
[17] A. Narayanan, H. Paskov, N. Z. Gong, J. Bethencourt, E. Stefanov, E. C. R.
Shin, and D. Song. On the Feasibility of Internet-Scale Author
Identiﬁcation. In IEEE Symposium on Security and Privacy, 2012.
[18] H. Park and K. Shim. Approximate Algorithms for k-Anonymity. In ACM
SIGMOD International Conference on Management of Data, 2007.
[19] S. Peddinti and N. Saxena. On the Effectiveness of Anonymizing Networks
for Web Search Privacy. In ACM Symposium on Information, Computer and
Communications Security (ASIACCS), 2011.
[20] M. Reiter and A. Rubin. Crowds: Anonymity for Web Transactions. ACM
Transactions on Information and System Security (TISSEC), 1998.
[21] RT. Privacy betrayed: Twitter sells multi-billion tweet archive.
http://rt.com/news/twitter-sells-tweet-archive-529/.
[22] L. Sweeney. k-Anonymity: A Model for Protecting Privacy. International
Journal of Uncertainty, Fuzziness and Knowledge-Based Systems, 2002.
[23] J. Turner. Countermeasure Radar Chaff, 1970. US Patent 3,544,997.
[24] Twitaholic. Top 100 Twitterholics based on Updates.
http://twitaholic.com/top100/updates/.
[25] S. Ye, F. Wu, R. Pandey, and H. Chen. Noise Injection for Search Privacy
Protection. In International Conference on Computational Science and
Engineering (CSE), 2009.
58