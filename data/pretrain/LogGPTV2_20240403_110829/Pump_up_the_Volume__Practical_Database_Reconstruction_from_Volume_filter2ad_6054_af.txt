24
can be recovered from a database snapshot [GRS17], one unavoidable and surprising conclusion of this
work is that ORAM by itself is insuﬃcient to argue security even against reconstruction attacks carried
out by a snapshot attacker. An empirical study of whether our attacks can be carried out using only a
database snapshot is an interesting direction for future work.
Acknowledgments
The ﬁrst author was supported by NSF Graduate Research Fellowship DGE-1650441. Portions of this
work were written while the ﬁrst author was visiting Royal Holloway, University of London. The second
author was supported by the European Union’s Horizon 2020 research and innovation programme under
grant agreement H2020-MSCA-ITN-2014-643161 ECRYPT-NET. The third and fourth authors were
supported by EPSRC Grant EP/M013472/1.
References
[BGC+18] Vincent Bindschaedler, Paul Grubbs, David Cash, Thomas Ristenpart, and Vitaly
Shmatikov. The tao of inference in privacy-protected databases. In PVLDB, 2018.
[BK73]
Coen Bron and Joep Kerbosch. Algorithm 457: Finding all cliques of an undirected graph.
Commun. ACM, 1973.
[Bol98]
B´ela Bollob´as. Random graphs. In Modern graph theory. Springer, 1998.
[CGKO06] Reza Curtmola, Juan A. Garay, Seny Kamara, and Rafail Ostrovsky. Searchable symmet-
ric encryption:
improved deﬁnitions and eﬃcient constructions. In Ari Juels, Rebecca N.
Wright, and Sabrina De Capitani di Vimercati, editors, ACM CCS 06, pages 79–88. ACM
Press, October / November 2006.
[CGPR15] David Cash, Paul Grubbs, Jason Perry, and Thomas Ristenpart. Leakage-abuse attacks
against searchable encryption. In Indrajit Ray, Ninghui Li, and Christopher Kruegel:, edi-
tors, ACM CCS 15, pages 668–679. ACM Press, October 2015.
[CJJ+13] David Cash, Stanislaw Jarecki, Charanjit S. Jutla, Hugo Krawczyk, Marcel-Catalin Rosu,
and Michael Steiner. Highly-scalable searchable symmetric encryption with support for
In Ran Canetti and Juan A. Garay, editors, CRYPTO 2013, Part I,
Boolean queries.
volume 8042 of LNCS, pages 353–373. Springer, Heidelberg, August 2013.
[DCRS12] Kevin P. Dyer, Scott E. Coull, Thomas Ristenpart, and Thomas Shrimpton. Peek-a-boo, i
still see you: Why eﬃcient traﬃc analysis countermeasures fail. In 2012 IEEE Symposium
on Security and Privacy, pages 332–346. IEEE Computer Society Press, May 2012.
[DKW56] Aryeh Dvoretzky, Jack Kiefer, and Jacob Wolfowitz. Asymptotic minimax character of
the sample distribution function and of the classical multinomial estimator. The Annals of
Mathematical Statistics, 1956.
[FGT92]
Philippe Flajolet, Daniele Gardy, and Lo¨ys Thimonier. Birthday paradox, coupon collectors,
caching algorithms and self-organizing search. Discrete Applied Mathematics, 1992.
[Gol87]
Oded Goldreich. Towards a theory of software protection and simulation by oblivious RAMs.
In Alfred Aho, editor, 19th ACM STOC, pages 182–194. ACM Press, May 1987.
25
[GRS17]
Paul Grubbs, Thomas Ristenpart, and Vitaly Shmatikov. Why your encrypted database is
not secure. In HotOS, 2017.
[GSB+17] Paul Grubbs, Kevin Sekniqi, Vincent Bindschaedler, Muhammad Naveed, and Thomas
Ristenpart. Leakage-abuse attacks against order-revealing encryption. In 2017 IEEE Sym-
posium on Security and Privacy, pages 655–672. IEEE Computer Society Press, May 2017.
[HMT04] Bijit Hore, Sharad Mehrotra, and Gene Tsudik. A privacy-preserving index for range queries.
In VLDB, 2004.
[HSS08]
Aric A. Hagberg, Daniel A. Schult, and Pieter J. Swart. Exploring network structure,
dynamics, and function using NetworkX. In Proceedings of the 7th Python in Science Con-
ference, 2008.
[KKNO16] Georgios Kellaris, George Kollios, Kobbi Nissim, and Adam O’Neill. Generic attacks on se-
cure outsourced databases. In Edgar R. Weippl, Stefan Katzenbeisser, Christopher Kruegel,
Andrew C. Myers, and Shai Halevi, editors, ACM CCS 16, pages 1329–1340. ACM Press,
October 2016.
[KKNO17] Georgios Kellaris, George Kollios, Kobbi Nissim, and Adam O’Neill. Accessing data while
preserving privacy. arXiv 1706.01552, 2017.
[LMP18] Marie-Sarah Lacharit´e, Brice Minaud, and Kenneth G. Paterson. Improved reconstruction
attacks on encrypted data using range query leakage. In 2018 IEEE Symposium on Security
and Privacy (SP), pages 1–18. IEEE Computer Society Press, 2018.
[Lub85]
Michael Luby. A simple parallel algorithm for the maximal independent set problem. In
17th ACM STOC, pages 1–10. ACM Press, May 1985.
[MM65]
J. W. Moon and L. Moser. On cliques in graphs. Israel Journal of Mathematics, 1965.
[MU05]
Michael Mitzenmacher and Eli Upfal. Probability and computing: Randomized algorithms
and probabilistic analysis. Cambridge university press, 2005.
[NKW15] Muhammad Naveed, Seny Kamara, and Charles V. Wright. Inference attacks on property-
In Indrajit Ray, Ninghui Li, and Christopher Kruegel:,
preserving encrypted databases.
editors, ACM CCS 15, pages 644–655. ACM Press, October 2015.
[Pei14]
Tiago P. Peixoto. The graph-tool python library. 2014.
[SST17]
Roei Schuster, Vitaly Shmatikov, and Eran Tromer. Beauty and the burst: Remote identi-
ﬁcation of encrypted video streams. In USENIX Security, 2017.
[SvDS+13] Emil Stefanov, Marten van Dijk, Elaine Shi, Christopher W. Fletcher, Ling Ren, Xiangyao
Yu, and Srinivas Devadas. Path ORAM: an extremely simple oblivious RAM protocol.
In Ahmad-Reza Sadeghi, Virgil D. Gligor, and Moti Yung, editors, ACM CCS 13, pages
299–310. ACM Press, November 2013.
[WBC+08] Charles V Wright, Lucas Ballard, Scott E Coull, Fabian Monrose, and Gerald M Masson.
Spot me if you can: Uncovering spoken phrases in encrypted VoIP conversations. In IEEE
S&P, 2008.
[Zip35]
George Kingsley Zipf. The psychobiology of language. 1935.
26
A Detailed Description of KKNO Reconstruction Attacks
In this appendix we reproduce, for completeness, the reconstruction attacks presented in [KKNO16].
We also give some evidence that it is diﬃcult (or perhaps even impossible) to adapt to non-uniform
query distributions, and conclude by noting some surprising limitations of KKNO’s attack.
A.1 KKNO’s Factorization Attack
Suppose the database contains R records with values val 1 ≤ val 2 ≤ . . . ≤ val R in {1, . . . , N}. For ease
of notation, deﬁne val 0 := 0 and val R+1 := N + 1. Deﬁne the distance dk between the kth and (k + 1)st
records as dk := val k+1 − val k. Let uk be the number of distinct queries matching k records, for any
0 ≤ k ≤ R. (Note that since there are only N (N + 1)/2 distinct queries, at most this many uk’s can be
non-zero.) The uk’s then satisfy the following equations:
uR = d0 · dR
uR−1 = d0 · dR−1 + d1 · dR
...
uR−m =
m(cid:88)
k=0
dk · dR−(m−k)
...
u1 = d0 · d1 + d1 · d2 + . . . + dR−1 · dR
(cid:33)
(cid:32) R(cid:88)
u0 = 1/2
2 − (N + 1)
dk
k=0
The key observation from KKNO’s work is that if queries are uniformly distributed, then it is possible
to determine the uk’s by observing enough queries, after which it is possible to construct a polynomial
that can be factored into two polynomials whose coeﬃcients are the dk’s. That polynomial is
F (x) = uR + . . . + u1 · xR−1 + ˆu0 · xR + u1 · xR+1 + . . . + uR · x2R,
where the coeﬃcient of xR is not u0, but ˆu0 := 2 · u0 + N + 1. The polynomial can then be factored
into two degree-R polynomials, speciﬁcally, F (x) = d(x) · dr(x), where
d(x) = d0 + d1 · x + . . . + dR · xR, and
dr(x) = dR + dR−1 · x + . . . + d0 · xR.
Polynomial F may not have a unique factorisation into factors of this form, in which case KKNO’s
algorithm picks one of the possibilities arbitrarily.
The ﬁrst step of the attack is to observe enough queries to determine the uk’s. Let ck be the number
of queries (out of the observed Q queries) that have volume k, for any k between 0 and R. Then as the
number of queries Q grows, the quantity ck/Q gets arbitrarily close to uk ·
N (N +1)/2 , and therefore it
is possible to solve for the uk’s and proceed with constructing and factorizing F (x). KKNO show that
the approach we just sketched correctly recovers all uk’s after Ω(N 4 log N ) queries, except with inverse
polynomial (in N ) probability. Note that this attack can also cope with some di values being zero.
1
27
A.2 KKNO for Non-Uniform Query Distributions
The assumption that the query distribution is uniform is inherent to KKNO’s algorithm; without such
an assumption, it is not clear how to determine the uk’s from the ck’s.
In fact, with non-uniform
query distributions, it is sometimes not possible to uniquely determine the uk’s. Consider the following
example with N = 3, R = 3, and query distribution as follows:
P r([1, 1]) = 1/4
P r([2, 2]) = 1/8
P r([3, 3]) = 1/6.
P r([1, 2]) = 1/6
P r([2, 3]) = 1/8
P r([1, 3]) = 1/6
Suppose that after suﬃciently many queries Q have been observed, the counts are as follows:
c0/Q = 1/6
c1/Q = 1/4
c2/Q = 1/4
c3/Q = 1/3.
In this case, it is impossible to distinguish whether the element counts are {1, 2, 0} (or the reﬂection
{0, 2, 1}) or {2, 1, 0} (or the reﬂection {0, 1, 2}). Note that with a uniform query distribution, KKNO’s
algorithm would have succeeded in both cases since the corresponding polynomials factor into unique
pairs of degree-3 polynomials:
F1(x) = 2 + 2x + x2 + 6x3 + x4 + 2x5 + 2x6
= (x3 + x2 + 2)(2x3 + x + 1), and
F2(x) = 2 + x + 2x2 + 6x3 + 2x4 + x5 + 2x6
= (x3 + x + 2)(2x3 + x2 + 1).
Understanding the uis via linear algebra. One way to view the ui values for non-uniform dis-
tributions is as components of a matrix-vector product, as follows. For a database DB containing R
records drawn from plaintext space [N ], deﬁne the volume matrix VDB of DB to be a binary matrix
with R + 1 rows and N (N + 1)/2 columns. Each column corresponds to a query, with the columns
numbered by some canonical ordering on queries. The entry vij of VDB is 1 if the jth query has volume
i. Each column has exactly one nonzero entry (since a query can only have one volume) and a row may
have zero, one, or more than one nonzero entry (since diﬀerent queries can have the same volume).
It has N (N + 1)/2 entries, each of which is equal to 2/(N (N + 1)).
Some algebra shows that right-multiplying the matrix VDB with P results in a vector U with R + 1
entries with the property that Ui is exactly the ui value as deﬁned in the KKNO attack. The vector
U is a probability distribution over volumes in the case where the query distribution (the vector P ) is
uniformly random. Thus, the goal of the KKNO attack is to estimate the entries of U . Viewed this
way, it is simple to generalize the goal of the KKNO attack to non-uniform query distributions: every
query distribution can be written as a vector with N (N + 1)/2 positive entries which sum to one.
Next, deﬁne the vector P .
This viewpoint also gives a way to reason about KKNO’s attack with non-uniform query distribu-
tions. The above counterexample shows that with non-uniform query distributions some databases can
be indistinguishable which would be distinguishable with uniform query distributions. In fact, we can
write an expression for any two databases that, if satisﬁed, means that there exists a query distribution
for which the two databases cannot be distinguished (i.e. KKNO’s attack must fail). First, let Ker(T )
be the kernel of a linear transformation T (i.e. the vectors sent to 0 by T ). Let P be the set of all
probability distributions on N (N + 1)/2 elements.
Take two distinct databases, DB1 and DB2, and their volume matrices VDB1 and VDB2. For sim-
plicity, assume they have the same set of unique volumes (meaning the sum of the ith row of VDB1
28
is 0 iﬀ the sum of the ith row of VDB2 is zero). Next, look at Ker(VDB1 − VDB2). This is the set of
vectors v for which VDB1v = VDB2v (and the set of probability distributions for which the ui values for
DB1 and DB2 are the same). In general there are no guarantees about the vectors in this set, but if
Ker(VDB1 − VDB2) ∩ P (cid:54)= ∅ then there exists a probability distribution over queries for which DB1 and
DB2 cannot be distinguished.
Clearly there are always some vectors in the intersection—for example, the query distribution where
the query [1, N ] occurs with probability 1 and all other queries occur with probability zero is in this set.
One can take a subset of P satisfying certain “non-triviality” conditions to get a more meaningful result,
but arguing about Ker(VDB1 −VDB2)∩ N T for a non-trivial subset N T ⊂ P seems diﬃcult. Techniques
from optimization (in particular, linear programming) may be useful here, since if the non-triviality
conditions for the set N T can be written as constraints on a linear program, that program has the
property that there is a feasible solution only if Ker(VDB1 − VDB2) ∩ N T (cid:54)= ∅.
Impossibility of perfectly correct reconstruction.
Interestingly, even under KKNO’s precise
assumptions about the query distribution, there are databases that cannot be reconstructed (even up
to reﬂection). This is because the function that takes a database and outputs its ui values is not
injective—there are databases on which this function collides! KKNO themselves noted that sometimes
the polynomials deﬁned by the ui values in their main attack do not have a unique factorization; our
experiment below indicates the lack of unique factorization is fundamental to the setting (rather than
a deﬁciency of their particular attack). This implies, surprisingly, that the most natural notion of
correctness for reconstruction attacks (that for a ﬁxed database, as the number of observed queries goes
to inﬁnity, the attack should be able to reconstruct up to reﬂection with probability 1) is impossible to
achieve when the query distribution is uniform, because there are some distinct databases that generate
the same set of volumes. We implemented a simple brute-force experiment that computes the ui values
and runs KKNO’s attack on every possible database where N = 17 and with 2 ≤ R ≤ 15. With R = 15
there are just over 300 million possible databases, and KKNO failed due to ui collision on 49,000 of
them. Here are two databases which have the same ui values:
{0, 0, 0, 3, 1, 0, 0, 1, 0, 1, 0, 6, 1, 0, 1, 0, 1}
{1, 1, 2, 1, 1, 0, 2, 2, 2, 2, 0, 0, 0, 1, 0, 0, 0}
We found ui collisions on dense databases as well. Understanding this phenomenon seems to be a diﬃcult
but interesting combinatorics question which we leave to future work. The theory of Golomb rulers may
give some insight here—observe that two databases whose elementary volumes are Golomb rulers (i.e.
sets of numbers that generate every possible value below some threshold via pairwise subtraction) can
never be distinguished from volume alone. Two databases with diﬀerent numbers of elements N can
also generate the same volume set.
B Description of Experimental Data
In this appendix we will describe the HCUP datasets used in our experiments, as well as the steps
we took to extract and process the data. First, we will provide some background on the data. The
Agency for Healthcare Research and Quality (AHRQ) is a US government agency which collects a vast
amount of data on the American healthcare industry. One of their core projects is the Healthcare
Cost and Utilization Project (HCUP), which tracks how healthcare is used and paid for by diﬀerent
demographic groups. Within HCUP there are samples of diﬀerent types taken every year and made
available to researchers. We use the National Inpatient Sample (NIS) as our source of experimental
data in this paper. Below and in the main body, when we refer to “HCUP data” we mean the NIS.
29
The NIS is processed in a de-identifying way that protects patient privacy. We did not attempt
to deanonymize any of the data, nor are our attacks designed to deanonymize medical
data. All authors underwent the HCUP Data Use Agreement training and submitted signed Data Use
Agreements to the HCUP Central Distributor.
Figure 7 contains information about the number of hospitals contained in each year’s HCUP release
and the minimum, maximum, and quartiles for the number of records per hospital. There is not too
much year-to-year variation in the number of records per hospital for these years, which makes sense
considering that until 2012 the HCUP data was collected as a random sample from all hospitals in
the USA. This provides evidence that our experiments would be predictive of our attacks’ performance
(were they carried out on a real hospital database).
In 2012, the sampling methodology for HCUP
changed—more recent HCUP data is collected using a random sample of patients instead of hospitals.
We used the 2013 HCUP data (which contains about seven million patient records) in our query recon-
struction experiment in Section 5 as a source of auxiliary data. Despite the 2013 auxiliary data being a
somewhat poorer estimate of per-hospital distributions for earlier years, our query reconstruction attack
still performed well with the 2013 auxiliary data (even when attacking 2004 hospitals!).
Attribute-speciﬁc processing.
Information about the diﬀerent types of attributes is provided in
Figure 7. Every year the AHRQ prescribes a format and size for each attribute collected in the various
samples. In extracting per-attribute experimental data from HCUP we faced three main complications:
(1) hospitals do not generally abide by these prescriptions, (2) the prescribed formats change from year
to year, and (3) not all attributes exist in all years of HCUP data. We will describe how we address
each of these complications in turn.
Hospitals are strongly encouraged (but not required) to report data in the format dictated by
the AHRQ, and some hospitals choose to report their data in incorrect or outdated formats. The
AHRQ corrects some of these mistakes before making samples available publicly, but many mistakes
still occurred in our data. For example, the attributes NDX, NPR, and NCHRONIC are capped by the
AHRQ, but some hospitals still report greater values, which we simply ignored.
In extracting NPR, NDX, and NCHRONIC we also faced the second complication, namely that
the number of values changed (increasing from 16 to 26) in 2009. One other attribute whose format
changed is AGE. In 2012, for privacy reasons the AHRQ mandated that ages be “top-coded” (i.e. all
values above a threshold be grouped into one category) at 90 in all samples. Prior HCUP data was
not top-coded; however, for our experiments we chose to top-code all AGE data for two main reasons:
(1) to ensure results for AGE are comparable across years and (2) to make our experiments address