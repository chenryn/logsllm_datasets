### Who We Are

- **bughardy (aka Matteo Beccaro)**
  - **Email:** [PI:EMAIL]
  - **Background:** Italian student with a passion for IT, networking, and penetration testing. Completed high school in 2013 and applied to the Politecnico di Torino for a degree in Computer Engineering.

- **Eagle1753 (aka Matteo Collura)**
  - **Email:** [PI:EMAIL]
  - **Background:** Italian student who applied to the Politecnico di Torino for a degree in Electronic Engineering. Has a strong interest in Physics and is collaborating with bughardy on WiFi networks and security. Enjoys solving challenges.

### History of NFC Hacks

- **2008:** MIFARE Classic exploit, with further developments in subsequent years.
- **2011:** First hack of the NFC Ultralight transport system by U.S. researchers using the RESET ATTACK.
- **2013:** A new hack of the NFC Ultralight transport system, developed by us, called the LOCK ATTACK.

### What is a MIFARE Chip?

A MIFARE chip is an RFID chip designed to operate at 13.56 MHz. There are millions of MIFARE chip cards worldwide, and they come in several variants:

- **MIFARE Classic**
- **MIFARE Ultralight**
- **MIFARE Ultralight C**
- **MIFARE DESFire**
- **etc.**

#### MIFARE Classic Vulnerabilities

- **Security through Obscurity:** The algorithm has been reversed, making it insecure.
- **Eavesdropping:** An attacker can recover keys within a few minutes by eavesdropping on the communication.
- **Default Keys:** Default keys allow an attacker to recover all other keys in seconds without the need for eavesdropping.

#### MIFARE Ultralight Vulnerabilities

- **No Encryption:** To keep costs low, these chips do not have encryption.
- **Poor Implementation:** Transport companies often use suboptimal implementations.
- **Ride Storage:** Rides are often stored in a read/write memory (DATA sector) rather than using OTP data.
- **RESET ATTACK:** This attack exploits the lack of proper security measures.

### MIFARE Ultralight Composition

| Page Address | Byte Number | Decimal | Hex  |
|--------------|-------------|---------|------|
| 0            | 1           | 0       | 0x00 |
| 1            | 1           | 1       | 0x01 |
| 2            | 1           | 2       | 0x02 |
| 3            | 1           | 3       | 0x03 |
| 4 to 15      | 1           | 4 to 15 | 0x04 to 0x0F |

### What is UID?

- **UID:** A 7-byte serial number.
- **Check Bytes:** Two check bytes obtained by XORing the previous bytes:
  - 1st byte: \( \text{CT} \oplus \text{SN0} \oplus \text{SN1} \oplus \text{SN2} \)
  - 2nd byte: \( \text{SN3} \oplus \text{SN4} \oplus \text{SN5} \oplus \text{SN6} \)
- **Read-Only:** Programmed by the manufacturer and cannot be changed.

### What is OTP?

- **OTP (One-Time Programmable):** The only security function in MIFARE Ultralight tickets.
- **Initial State:** 4 bytes, all 00 by default.
- **OR Operation:** Prevents a bit from being turned from 1 to 0 again.
- **Usage:** Stores rides (turns a bit from 0 to 1). The stamping machine checks the number of "0" bits left.

### What is the LOCK Sector?

- **LOCK Sector:** 2 bytes.
- **Function:** Each bit can turn 1 page (4 bytes) into read-only mode.
- **Freeze Bits:** The last 3 bits of the first lock byte freeze the bits of the lock bytes themselves.

### What is the DATA Sector?

- **DATA Sector:** 48 bytes.
- **Storage:** Details such as time (of last stamp), date, station ID, etc.
- **Reset Attack:** Used to store the number of rides left.
- **Ongoing Work:** Decoding how and which data are encoded on the ticket. Dumps and information will be provided in the Q&A session for those interested in helping.

### Regarding the DATA Sector

- **Initial Tests:** Conducted without understanding how OTP works.
- **OTP Usage:** Discovered that OTP contains the number of rides left.
- **Attempt to Write:** Tried writing over OTP.

### On-the-Bus Tests

- **Stamping Multiple Tickets:** Stamping multiple tickets and comparing their dumps.
- **Empirical Results:** Gained insights into how data is stored on tickets.

### Empirical Results in DATA Sector Decoding

| Bytes         | Description                          | Example                      |
|---------------|--------------------------------------|------------------------------|
| 0-24          | Locked DATA                          | 01 04 00 00 02 01 02 BE 40 05 AF 00 00 AE 10 A0 61 03 1C 1C B2 2B 61 8E |
| 25-28         | Stamping Progressive Number          | 43 3B (7B 00)                |
| 29-32         | Validator ID / Ticket Type           | 04 F8 00 00                  |
| 33-36         | Stamping Progressive Number          | 43 3B (7B 00)                |
| 37-38         | Unknown                              | 00 3B 00 04                  |
| 39-40         | Ticket Type / Data                   | F8 AE                        |
| 41-48         | Time Data                            | 10 7B B3 02 E6 56            |

### Seize the Day

- **Assumption:** Knowing where the time (of the last stamp) is stored and how it is formatted.
- **NFC Phone/Reader:** Use an NFC phone or reader to change the time field.
- **Reliability:** Currently, this method is not reliable, and we are unable to fully implement it.

### Mission Completed

- **Unlimited Ticket:** Preventing the machine from writing the number of rides left turns the ticket into an unlimited one.
- **Solution:** Use LOCK BYTES.

### The LOCK ATTACK: Why?

- **Prevention:** Locking the OTP sector prevents the stamping machine from removing rides stored on the ticket.
- **Validation:** Each time the ticket is stamped, the validator checks if there are rides left.
- **Failed Write:** If the OTP sector is locked, the validator cannot write to it, leaving the number of rides unchanged.

### Challenges

- **Fixed Ride Count:** Having a fixed number of rides on a ticket is not ideal.
- **Fixes:**
  - **Firmware Update:** Check if the OTP sector is locked; if so, refuse to validate the ticket.
  - **Unlock Attempt:** Try to unlock the sector, but only if block bits are not enabled.
- **Time Attack:** Not easily fixed due to unencrypted communication between the validator and the ticket. Solution: Implement encrypted communication.

### Future Work

- **Tool Development:** Rewrite the tool in C/C++ without external dependencies.
- **DATA Sector Decoding:** Provide dumps and information in the Q&A section for collaborative efforts.
- **NFC-Enabled Devices:** Use NFC-enabled phones or proxymarks for further study.

### Questions?

Feel free to ask any questions!