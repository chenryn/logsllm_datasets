approach has been taken in previous works [20, 35] for Private Set
Intersection and sparse matrix multiplication, respectively. We call
this ROOM instantiation Circuit-ROOM, and describe it in Figure 4.
Note that we can assume without loss of generality that d and
q are sorted. If they are not, we can extend the MPC protocol that
we construct to first compute the sorting with a small 𝑂(𝑚 log(𝑚))
additive overhead.
The secure computation first arranges the inputs into vectors
of triples wC and wS, which consequently are merged by the first
and then third component into a vector v. Entries with matching
keywords are adjacent in v, and the third component of such entries
indicates to which party they belong, i.e., indices greater than 0
indicate entries originally in the client’s input.
In Step 2) the protocol computes vectors b and c. Each entry of
these vectors stores information about the result of comparing two
adjacent entries of v. In particular, b stores the selected value (i.e.,
answer), depending on whether keys of such entries matched. The
vector c stores whether the 𝑖-th pair of compared adjacent entries
involves a key from q. In that case, c𝑖 > 0, as it corresponds to the
index of that key in q. Otherwise c𝑖 = 0. If c𝑖 > 0 then the computa-
tion must return an answer in b. The answer is the corresponding
value from d if a match was found, or the corresponding value from
𝛽 if no match was found.
Next, in Step 3) b and c are obliviously shuffled to avoid leakage
induced by relative positions of their entries. This is analog to the
shuffle step in Sort-Compare-Shuffle PSI [20].
Finally, in step 4), entries of b that correspond to comparisons
with keys from the client are output in shares between the parties,
along with the corresponding entries in c. This allows the parties
to map their output shares back to the order of the inputs. Note
that the shuffling in step 3) makes sure that the indexes at which
elements are revealed do not leak any information to either party.
Lemma 4.2. The protocol in Figure 4 is a secure instantiation for
the ROOM functionality with the following overhead. The client and
the server run a secure two-party computation protocol whose main
bottleneck is computing 𝑂((𝑛+𝑚) log(𝑛+𝑚)) comparisons. Addition-
ally, local computations cost 𝑂(𝑛 log 𝑛) for the server and 𝑂(𝑚 log 𝑚)
for the client.
The security claim in the above lemma follows directly since
our protocol is entirely done in MPC and any additional informa-
tion revealed beyond the output shares is indistinguishable from
random.
4.2.3 Poly-ROOM. Finally, as our main instantiation for ROOM,
we present a protocol that has MPC runtime similar to Basic-ROOM
(independent of 𝑛 and linear on 𝑚), but avoids the dependence on
the key domain in initialization.
The main insight for our new construction is that the server can
construct a polynomial which evaluates, for inputs which are keys
of items in the server’s database, to outputs which are encrypted
versions of the corresponding values in the server’s database. The
encryptions are done with a key that is only known to the server.
The resulting polynomial is of degree 𝑛 and is therefore a concise
representation of the data. At the same time, the polynomial looks
pseudorandom (since it is an interpolation over pseudorandom
points), and therefore hides the points which have non-zero values.
The server sends this polynomial to the client. The client then
evaluates the polynomial on its inputs and learns 𝑚 outputs. For
each of the client’s keys present in the database, the client obtains
the encrypted version of the corresponding database value. The
two parties then run a secure computation that decrypts each value
that the client obtained, checks if it decrypts correctly (i.e., ends
with a fixed string of zeros), and reveals to the client either a value
5
Let d ∈ (K × V)𝑛, and 𝛽 ∈ V𝑚, q ∈ K𝑚. Assume d is sorted
by the first component in each entry, and q is sorted.
Inputs:
Let d ∈ (K × V)𝑛, 𝛽 ∈ V𝑚, q ∈ K𝑚. Let 𝑠 ∈ N be a
statistical security parameter and K be a PRF key.
Inputs:
Server: d, 𝛽.
Client: q.
Output (shared): [[r]] ∈ V𝑚
ROOM Protocol: Client and Server run the following
computation in a secure two-party computation:
(1) Construct wC = ((q𝑖, 𝛽𝑖, 𝑖))𝑖∈[𝑚] and
wS = ((d𝑖,1, d𝑖,2, 0))𝑖∈[𝑛] Merge wC and wS into a
vector v of length 𝑛 + 𝑚, sorted lexicographically by the
first and then third component.
(2) Compute vectors b and c in V𝑚+𝑛 and {0, . . . , 𝑚}𝑚+𝑛
by comparing adjacent entries from v (where
v𝑖 = (𝑎, 𝑏, 𝑐), v𝑖+1 = (𝑎′, 𝑏′, 𝑐′)). In particular for
𝑖 ∈ [𝑚 + 𝑛 − 1]:
(cid:26) (𝑏, 𝑐′)
(𝑏′, 𝑐′)
if 𝑎 = 𝑎′
otherwise.
(b𝑖+1, c𝑖+1) =
In addition, for v1 = (𝑎, 𝑏, 𝑐) we set (b1, c1) = (𝑏, 𝑐).
(3) Shuffle b and c according to a random permutation 𝜋
unknown to either party. I.e., set ˜b = 𝜋(b) and ˜c = 𝜋(c).
(4) Iterate over ˜b and ˜c in parallel. Whenever ˜c𝑖 ≠ 0, reveal
˜c𝑖 and share ˜b𝑖 between the parties, who both set
[[r]] ˜c𝑖 = [[ ˜b]]𝑖.
Figure 4: Circuit-ROOM Protocol.
in the database or a default value from 𝛽 depending on the result
of that check. Note that the check passes if the key in the client’s
query is in d.
Lemma 4.3. The protocol in Figure 5 is a secure instantiation for the
ROOM functionality. The initialization cost includes 𝑂(𝑛 log2 𝑛) work
for the server and communication of 𝑂(𝑛) to send the polynomial to
the client. The online cost of the protocol has 𝑂(𝑚) cost for the MPC
execution and then 𝑂((𝑚 + 𝑛) log2 𝑛) local computation for the client.
The overhead of the local computation is based on running ef-
ficient algorithms for polynomial interpolation and multi-point
evaluation, which interpolate a polynomial of degree 𝑛 in time
𝑂(𝑛 log2 𝑛), and evaluate such a polynomial on 𝑛 points also in
time 𝑂(𝑛 log2 𝑛) [28] (we used an implementation of these proto-
cols in our experiments).
Security Sketch. The security of the construction follows from the
fact that the polynomial that the client receives is pseudorandom
since the encryptions 𝑐𝑖 used in step 2) are pseudorandom. The rest
of the computation is implemented in an MPC protocol.
6
Server: d, 𝛽, K,
Client: q ∈ K𝑚.
Output (shared): [[r]] ∈ V𝑚
ROOM Protocol:
(1) For each 𝑡 𝑗 = (𝑖, 𝑣) ∈ d, Server computes
𝑐𝑖 = FK(𝑖) ⊕ (𝑣 || 0𝑠).
(2) Server interpolates a polynomial P of degree 𝑛, such that
for each (𝑖, 𝑣) ∈ d, P(𝑖) = 𝑐𝑖.
(3) Server sends the coefficients of P to Client.
(4) For each 𝑖 ∈ [𝑚], the parties run a two-party
computation protocol where Server has input K and
Client has inputs q𝑖, P(q𝑖). Both parties receive shares
[[r]] as output, where
r𝑖 =
𝛽𝑖,
if P(q𝑖) ⊕ FK(q𝑖) = (𝑣 || 0𝑠)
otherwise.
(cid:26) 𝑣
Figure 5: Poly-ROOM Protocol.
5 ROOM FOR SECURE SPARSE LINEAR
ALGEBRA
In this section we present efficient two-party protocols for sev-
eral common sparse linear algebra operations, which leverage the
ROOM functionality in different ways. Similar to how sparse BLAS
operations are presented in [13], we first focus on lower-level prim-
itives (Gather and Scatter), and then use them to implement higher-
level functionality, namely matrix-vector multiplication. However,
we stress that our goal is not to provide implementations of each
function described in [13], but instead focus on the operations
necessary for the applications described in Section 6.
5.1 Gather and Scatter
Intuitively, the Gather and Scatter operations correspond, respec-
tively, to a sequence of indexed reads from a sparse array, and a
sequence of indexed writes into a sparse array. More concretely,
Gather takes a vector of indices q = (𝑖1, . . . , 𝑖𝑛) and a (usually
sparse) vector v, and returns the vector r = (v𝑖1, . . . , v𝑖𝑛) that re-
sults from gathering the values from v at the indices in q. Scatter
on the other hand takes a vector of values v, a vector of indices
q = (𝑖1, . . . , 𝑖𝑛), and a vector u, and updates u at each position 𝑖 𝑗
with the new value v𝑗.
We transfer the two operations to the two-party setting as fol-
lows. Given a sparse vector v held by Party P2, and a set of query
indices q held by Party P1, Gather(v, q) returns additive shares of
a dense vector v′, with v′
𝑖 = vq𝑖 . It is clear that this is equivalent to
a ROOM query with P2 and P1 as the server and client, and inputs
q, d =(cid:8)(𝑖, v𝑖) | v𝑖 ≠ 0(cid:9), and 𝛽 = 0.
2𝜎 , and let 𝑛 ≥ 𝑙 be a public parameter.
Let v ∈ Z𝑙
Parties: P1, P2.
Inputs:
P1: Vector share [[v]]P1, indices 𝑖1, . . . , 𝑖𝑙.
P2: Vector share [[v]]P2.
Outputs: Vector shares [[v′]], v′ ∈ Z𝑛
(cid:26) v𝑗,
0
v′
𝑖 =
2𝜎 , where
: 𝑖 𝑗 = 𝑖,
if ∃𝑗
otherwise.
Figure 6: ScatterInit with shared inputs.
For Scatter, we focus on a variant where u is zero. We call this
functionality ScatterInit. Given a dense vector v and a set of
indices q, both of size 𝑙, and an integer 𝑛 ≥ 𝑙, ScatterInit(v, q, 𝑛)
returns a vector v′ of length 𝑛 such that v′
q𝑖 = v𝑖 for all 𝑖 ∈ [𝑙],
and v′ 𝑗 = 0 if 𝑗 ∉ q. As in the case of gather, we are interested in
secure protocols for ScatterInit that output v′ additively shared.
Regarding the inputs, we focus on the case where the input vector
is also secret-shared between the parties, while q is held by one
party, and 𝑛 is a public parameter. The reason for this setting will
become apparent when we present our protocol for row-sparse
matrix multiplication in Section 5.2.2, as it uses ScatterInit as a
sub-protocol.
We formally define the functionality for ScatterInit in Figure 6.
A naive implementation using generic MPC would take prohib-
itive 𝑂(𝑛𝑙𝜎) communication and computation. A protocol with
reduced communication can be obtained from Function Secret Shar-
ing (FSS) [6], but its local computation remains in 𝑂(𝑛𝑙) which
turns out to be the bottleneck in practice. In the next paragraph,
we describe a version that is concretely efficient, trading asymp-
totic communication complexity against computation time. The
two alternatives above are described in Appendix A.
ScatterInit from ROOM and OT Extension. Our protocol is de-
scribed in Figure 7. The idea is that P2 generates its random out-
put share [[v′]]P2 and then P1 and P2 execute an MPC protocol
from which P1 obtains (a) all entries of [[v′]]P2 at indices not in
{𝑖1, . . . , 𝑖𝑙}, and (b) its share of the output for the remaining indices,
which is obtained securely from P2’s share of the output and the
shared input vector v. For (a) we use a well-known (𝑛 − 𝑙)-out-of-𝑛
OT protocol that we describe in the next paragraph. For (b) we use
a ROOM query followed by a two-party computation where P2’s
output share is reconstructed in the MPC (step 4 in Figure 7) and
used to mask v to produce P1’s output share. Note that Basic-ROOM
is the natural instantiation to use in this setting.
The (𝑛−𝑙)-out-of-𝑛 OT in step 2 is implemented using a folklore
protocol that requires 𝑛 invocations of 1-out-of-2 OTs and an 𝑙-out-
of-𝑛 Shamir secret sharing of a PRF key. It works by the sender
encrypting each of its 𝑛 inputs using a key Kot, and then letting the
receiver learn in each of the 𝑛 OTs either an encrypted input or a
share (in 𝑙-out-of-𝑛 secret sharing) of Kot. This forces the receiver
2𝜎 , and let 𝑛 ≥ 𝑙 be a public parameter.
Let v ∈ Z𝑙
Parties: P1, P2.
Inputs:
P1: Vector share [[v]]P1, indices 𝑖1, . . . , 𝑖𝑙.
P2: Vector share [[v]]P2, key K.
Outputs: [[v′]], for v′ ∈ Z𝑛
2𝜎 , as defined in Figure 6.
Protocol:
(1) For each 𝑖 ∈ [𝑛], P2 generates a random value 𝑠𝑖.
(2) The parties run a (𝑛 − 𝑙)-out-of-𝑛 Oblivious Transfer
protocol, with P2 acting as the sender, for P1 to obtain
u = ((𝑖, 𝑠𝑖) | 𝑖 ∉ {𝑖1, . . . , 𝑖𝑙}).
(3) The parties run Room with P2 acting as Server and P1 as
(4) The parties engage in a two-party computation with
Client, and inputs q = (𝑖1, . . . , 𝑖𝑙), d = ((𝑖, 𝑠𝑖))𝑖∈𝑛, and
𝛽 =⊥𝑛. The parties obtain shares of the vector
¯u = (𝑠𝑖 | 𝑖 ∈ {𝑖1, . . . , 𝑖𝑙}).
inputs [[v]]P1, [[v]]P2, [[¯u]]P1, and [[¯u]]P2, where v and ¯u
are reconstructed, and ¯s = v − ¯u is revealed to P1.
(5) P2 sets [[v′]]P2 = (𝑠𝑖)𝑖∈[𝑛] and P1 sets [[v′]]P1 = s with
s𝑖 =
if 𝑖 = 𝑖 𝑗 ∈ {𝑖1, . . . , 𝑖𝑙},
−𝑠𝑖, where (𝑖, 𝑠𝑖) ∈ u, otherwise.
(cid:26) ¯s𝑗,
Figure 7: Our ScatterInit protocol based on ROOM.
to learn at least 𝑙 shares of the key, and therefore at most 𝑛 − 𝑙
values.
Security Sketch. We argue that the view of each party after each
step in the protocol includes only random values in addition to its