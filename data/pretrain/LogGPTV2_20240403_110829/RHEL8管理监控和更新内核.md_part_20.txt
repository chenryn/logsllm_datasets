      │ └─6902 sleep 1
      ├─systemd-journald.service
        └─629 /usr/lib/systemd/systemd-journald
      …​
    ```
    示例输出返回整个 `cgroups`{.literal} 层次结构，其中最高级别由
    [*slices*]{.emphasis} 组成。
-   要显示根据资源控制器过滤的 `cgroups`{.literal} 层次结构，执行
    `# systemd-cgls `{.literal}：
    ``` literallayout
    # systemd-cgls memory
    Controller memory; Control group /:
    ├─1 /usr/lib/systemd/systemd --switched-root --system --deserialize 18
    ├─user.slice
    │ ├─user-42.slice
    │ │ ├─session-c1.scope
    │ │ │ ├─ 965 gdm-session-worker [pam/gdm-launch-environment]
    …​
    └─system.slice
      |
      …​
      ├─chronyd.service
      │ └─844 /usr/sbin/chronyd
      ├─example.service
      │ ├─8914 /bin/bash /home/jdoe/example.sh
      │ └─8916 sleep 1
      …​
    ```
    以上命令的输出示例列出了与所选控制器交互的服务。
-   要显示特定单元及其 `cgroups`{.literal}
    层次结构部分的详细信息，请执行
    `# systemctl status `{.literal}：
    ``` literallayout
    # systemctl status example.service
    ● example.service - My example service
       Loaded: loaded (/usr/lib/systemd/system/example.service; enabled; vendor preset: disabled)
       Active: active (running) since Tue 2019-04-16 12:12:39 CEST; 3s ago
     Main PID: 17737 (bash)
        Tasks: 2 (limit: 11522)
       Memory: 496.0K (limit: 1.5M)
       CGroup: /system.slice/example.service
               ├─17737 /bin/bash /home/jdoe/example.sh
               └─17743 sleep 1
    Apr 16 12:12:39 redhat systemd[1]: Started My example service.
    Apr 16 12:12:39 redhat bash[17737]: The current time is Tue Apr 16 12:12:39 CEST 2019
    Apr 16 12:12:40 redhat bash[17737]: The current time is Tue Apr 16 12:12:40 CEST 2019
    ```
:::
::: itemizedlist
**其它资源**
-   [内核资源控制器](#setting-limits-for-applications_managing-monitoring-and-updating-the-kernel.html#what-kernel-resource-controllers-are_setting-limits-for-applications "内核资源控制器"){.link}
-   `systemd.resource-control(5)`{.literal}, `cgroups(7)`{.literal}
    manual pages
:::
:::
::: section
::: titlepage
# []{#using-control-groups-version-1-with-systemd_managing-monitoring-and-updating-the-kernel.html#viewing-resource-controllers_using-control-groups-version-1-with-systemd}查看资源控制器 {.title}
:::
以下流程描述了如何了解哪些进程使用哪些资源控制器。
::: orderedlist
**流程**
1.  要查看进程与之交互的资源控制器，请执行
    `# cat proc//cgroup`{.literal} 命令：
    ``` literallayout
    # cat /proc/11269/cgroup
    12:freezer:/
    11:cpuset:/
    10:devices:/system.slice
    9:memory:/system.slice/example.service
    8:pids:/system.slice/example.service
    7:hugetlb:/
    6:rdma:/
    5:perf_event:/
    4:cpu,cpuacct:/
    3:net_cls,net_prio:/
    2:blkio:/
    1:name=systemd:/system.slice/example.service
    ```
    输出示例与关注进程相关。在本例中，它是 `PID 11269`{.literal}
    标识的进程，属于 `example.service`{.literal}
    单元。您可以确定该过程是否放置在 `systemd`{.literal}
    单元文件规格定义的正确控制组中。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    默认情况下，在资源控制器列表中的项目及其排序对于 `systemd`{.literal}
    启动的所有单元来说是相同的，因为它会自动挂载所有默认资源控制器。
    :::
:::
::: itemizedlist
**其它资源**
-   `cgroups(7)`{.literal} 手册页
-   `/usr/share/doc/kernel-doc-/Documentation/cgroups-v1/`{.literal}
    目录中的文档
:::
:::
::: section
::: titlepage
# []{#using-control-groups-version-1-with-systemd_managing-monitoring-and-updating-the-kernel.html#monitoring-resource-consumption_using-control-groups-version-1-with-systemd}监控资源消耗 {.title}
:::
以下流程描述了如何实时查看当前正在运行的控制组 (`cgroup`{.literal})
列表及其资源消耗情况。
::: orderedlist
**流程**
1.  要查看当前运行的 `cgroup`{.literal} 的动态帐户，请执行
    `# systemd-cgtop`{.literal} 命令：
    ``` literallayout
    # systemd-cgtop
    Control Group                            Tasks   %CPU   Memory  Input/s Output/s
    /                                          607   29.8     1.5G        -        -
    /system.slice                              125      -   428.7M        -        -
    /system.slice/ModemManager.service           3      -     8.6M        -        -
    /system.slice/NetworkManager.service         3      -    12.8M        -        -
    /system.slice/accounts-daemon.service        3      -     1.8M        -        -
    /system.slice/boot.mount                     -      -    48.0K        -        -
    /system.slice/chronyd.service                1      -     2.0M        -        -
    /system.slice/cockpit.socket                 -      -     1.3M        -        -
    /system.slice/colord.service                 3      -     3.5M        -        -
    /system.slice/crond.service                  1      -     1.8M        -        -
    /system.slice/cups.service                   1      -     3.1M        -        -
    /system.slice/dev-hugepages.mount            -      -   244.0K        -        -
    /system.slice/dev-mapper-rhel\x2dswap.swap   -      -   912.0K        -        -
    /system.slice/dev-mqueue.mount               -      -    48.0K        -        -
    /system.slice/example.service                2      -     2.0M        -        -
    /system.slice/firewalld.service              2      -    28.8M        -        -
    ...
    ```
    示例输出显示当前运行的
    `cgroups`{.literal}，按照资源使用量排序（CPU、内存、磁盘 I/O
    负载）。这个列表默认每 1
    秒刷新一次。因此，它提供了一个动态洞察每个控制组的实际资源使用情况。
:::
::: itemizedlist
**其它资源**
-   `systemd-cgtop(1)`{.literal} manual page
:::
:::
::: section
::: titlepage
# []{#using-control-groups-version-1-with-systemd_managing-monitoring-and-updating-the-kernel.html#proc_configuring-cpuset-controller-using-systemd_using-control-groups-version-1-with-systemd}使用 systemd 配置 CPUSET 控制器 {.title}
:::
`systemd`{.literal} 资源管理 API 允许用户在服务可以使用的一组 CPU 和
NUMA 节点上配置限值。此限制限制对进程使用的系统资源的访问。请求的配置以
`cpuset.cpus`{.literal} 和 `cpuset.mems`{.literal}
编写。但是，请求的配置可能没有被使用，因为父 `cgroup`{.literal} 限制
\`cpus\` 或 `mems`{.literal}。若要访问当前的配置，将
`cpuset.cpus.effective`{.literal} 和 `cpuset.mems.ff`{.literal}
文件导出到用户。
::: itemizedlist
**流程**
-   设置 `AllowedCPUs`{.literal} ：
    ``` screen
    # systemctl set-property service_name.service AllowedCPUs=value
    ```
    例如：
    ``` screen
    systemctl set-property service_name.service AllowedCPUs=0-5
    ```
-   设置 `AllowedMemoryNodes`{.literal} ：
    ``` screen
    # systemctl set-property service_name.service AllowedMemoryNodes=value
    ```
    例如：
    ``` screen
    # systemctl set-property service_name.service AllowedMemoryNodes=0
    ```
:::
:::
:::
[]{#assembly_configuring-resource-management-using-systemd_managing-monitoring-and-updating-the-kernel.html}
::: chapter
::: titlepage
# []{#assembly_configuring-resource-management-using-systemd_managing-monitoring-and-updating-the-kernel.html#assembly_configuring-resource-management-using-systemd_managing-monitoring-and-updating-the-kernel}第 20 章 使用带有 systemd 的 cgroup 版本 2 配置资源管理 {.title}
:::
systemd 的核心是服务管理和规范。systemd
确保正确的服务在正确时间以正确顺序启动。服务运行时，它们必须顺利运行，才能以最佳的方式使用底层硬件平台。因此，systemd
还提供定义资源管理策略和调整各种选项的功能，它们可以提高服务性能。
::: section
::: titlepage
# []{#assembly_configuring-resource-management-using-systemd_managing-monitoring-and-updating-the-kernel.html#_prerequisites}先决条件 {.title}
:::
::: itemizedlist
-   [Linux
    cgroup](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/managing_monitoring_and_updating_the_kernel/setting-limits-for-applications_managing-monitoring-and-updating-the-kernel#understanding-control-groups_setting-limits-for-applications){.link}
    子系统的基础知识.
:::
:::
::: section
::: titlepage
# []{#assembly_configuring-resource-management-using-systemd_managing-monitoring-and-updating-the-kernel.html#con_understanding-resource-management-using-systemd_assembly_configuring-resource-management-using-systemd}资源分配模型简介 {.title}
:::
对于资源管理，systemd 使用 cgroup v2 接口。
请注意，RHEL 8 默认使用 cgroup v1。因此，您必须启用 cgroup v2，以便
systemd 可以使用 cgroup v2 接口进行资源管理。有关如何启用 cgroup v2
的更多信息，请参阅[使用 cgroups-v2 为应用程序设置 CPU
限制](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/managing_monitoring_and_updating_the_kernel/setting-limits-for-applications_managing-monitoring-and-updating-the-kernel#setting-cpu-limits-to-applications-using-cgroups-v2_setting-limits-for-applications){.link}。
要修改系统资源的发布，您可以应用以下一个或多个资源分发模型：
::: variablelist
[Weights（权重）]{.term}
:   资源分布方式是添加所有子组的权重，并为各个子组提供与总和匹配的部分。
    例如，如果您有 10 个 cgroup，每个 cgroup 的值为 100，则总和为
    1000，每个 cgroup 都接收资源中的一个。
    权重通常用于分发无状态资源。[*CPUWeight=*]{.emphasis}
    选项是此资源分布模型的实现。
[Limits]{.term}
:   cgroup
    最多可消耗已配置的资源量，但您也可以过量使用资源。因此，子组限值总和可能会超过父组限制。
    [*MemoryMax=*]{.emphasis} 选项是此资源分配模型的实施。
[Protections（保护）]{.term}
:   可以为 cgroup
    设置受保护的资源量。如果资源使用量低于保护边界，内核将尝试不以竞争同一资源的
    cgroup 替代其他 cgroup。也允许过量使用。
    [*MemoryLow=*]{.emphasis} 选项是此资源分配模型的实施。
[Allocations（分配）]{.term}
:   独占分配有限资源的绝对数量。不允许过量使用。Linux
    中这种资源类型的一个示例就是实时预算。
:::
::: itemizedlist
**其它资源**
-   [使用 systemd 分配 CPU
    资源](#assembly_configuring-resource-management-using-systemd_managing-monitoring-and-updating-the-kernel.html#proc_managing-cpu-with-systemd_assembly_configuring-resource-management-using-systemd "使用 systemd 分配 CPU 资源"){.link}
-   [使用 systemd
    分配内存资源](#assembly_configuring-resource-management-using-systemd_managing-monitoring-and-updating-the-kernel.html#proc_managing-memory-with-systemd_assembly_configuring-resource-management-using-systemd "使用 systemd 分配内存资源"){.link}
-   [使用 systemd 配置 I/O
    带宽](#assembly_configuring-resource-management-using-systemd_managing-monitoring-and-updating-the-kernel.html#proc_configuring-i-o-bandwidth-with-systemd_assembly_configuring-resource-management-using-systemd "使用 systemd 配置 I/O 带宽"){.link}
:::
:::
::: section
::: titlepage
# []{#assembly_configuring-resource-management-using-systemd_managing-monitoring-and-updating-the-kernel.html#proc_managing-cpu-with-systemd_assembly_configuring-resource-management-using-systemd}使用 systemd 分配 CPU 资源 {.title}
:::
在由 systemd 管理的系统上，每个系统服务在其 cgroup 中启动。通过启用对
CPU cgroup 控制器的支持，系统使用对 CPU
资源的服务感知分布，而不是按进程分布。在服务感知型分发中，每个服务收到的
CPU 时间与系统上运行的所有其他服务的 CPU
时间大致相同，无论组成该服务的进程数量如何。
如果特定的服务需要更多 CPU 资源，您可以通过更改该服务的 CPU
时间分配策略来授予它们。
::: title
**流程**
:::
在使用 systemd 时设置 CPU 时间分配策略选项：