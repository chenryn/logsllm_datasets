6 xxxxxx:~ root#
再来看看反编译后的代码⻓啥样：
https://mp.weixin.qq.com/s/Ou-OeSNugEz5YmUAdwnWWA 11/27
2020/7/27 iOS逆向之抢红包以外的那些事⼉
这种情况下，我们实际上可以直接通过lldb来绕过它。
思路就是：我们通过给ptrace的地址下断点，将寄存器R0的值0x1f改成任意⼀个值就好。
https://mp.weixin.qq.com/s/Ou-OeSNugEz5YmUAdwnWWA 12/27
2020/7/27 iOS逆向之抢红包以外的那些事⼉
当然，我们也可以通过编写插件的⽅式，去绕过它：
1 #import 
2 #import 
3 #import 
4
5 static int (*oldptrace)(int request, pid_t pid, caddr_t addr, int data);
6 static int newptrace(int request, pid_t pid, caddr_t addr, int data){
7
8 return 0;
9
10 if (request == 31) {
11 request = -1;
12 }
https://mp.weixin.qq.com/s/Ou-OeSNugEz5YmUAdwnWWA 13/27
2020/7/27 iOS逆向之抢红包以外的那些事⼉
13 return oldptrace(request,pid,addr,data);
14 }
15 %ctor {
16
17 MSHookFunction((void *)MSFindSymbol(NULL,"_ptrace"), (void *)new
18 }
4 浅谈竞对分析~~
聊完了插件破解和渗透测试中我们的⼀些思路以及遇到的问题，我们来简单聊⼀聊竞对分析。
逆向中的竞对分析，不同于常规的带有主观⾊彩的分析，⽽是对某个产品、某个功能运⾏逻辑的逆向
解析，结合上⾯所说的⼀些绕过⼿段和调试⼿段，这⾥还会涉及到⼀个代码混淆的东⻄。APP的关键
函数逻辑，⼀般都分为两种模式编写：
1. C
2. llvm做混淆
如果是⽤C语⾔编写函数逻辑，⽽不去做其他的代码保护措施的话，我们可以通过上述流程，去
hookC函数。这⾥的难点不在于如何hook，⽽在于怎么确定hook点。
我们平时⽤来hook的库叫做Mobile Substrate，其中有两个部分，⼀个是MSHookMessageEx，⽤
于hook OC函数，还有⼀个MSHookFunction⽤于hook C或者C++
https://mp.weixin.qq.com/s/Ou-OeSNugEz5YmUAdwnWWA 14/27
2020/7/27 iOS逆向之抢红包以外的那些事⼉
举例：
我要hook⼀个sqlite的函数，就⽤到了MSHookFunctio，代码如下：
1 void(*old_sqlite3_exec)(sqlite3* aaa,const char *sql, int (*callback)(vo
2
3 void new_sqlite3_exec(sqlite3* aaa,const char *sql, int (*callback)(void
4
5 old_sqlite3_exec(aaa,sql,NULL ,NULL ,errmsg);
6
7 NSLog(@"%s",sql);
8 }
9
10 %ctor{
11 @autoreleasepool
12 {
13 MSHookFunction((void *)sqlite3_exec, (void *)&new_sqlite3_exec, (voi
14 }
15 }
O-LLVM是基于llvm开发的⼀个开源项⽬，⽬前市⾯上⼤多数混淆都是基于这个进⾏修改的。
OLLVM有三个PASS，分别是：
1. 控制流平坦化：把⼀些if-else语句，嵌套成do-while语句
2. 指令替换：⽤效果相同但更复杂的指令序列替换标准⼆元运算符(+, – , & , | 和^)
3. 虚假的控制流：主要嵌套⼏层判断逻辑
LLVM去平坦化这⾥不细说，我们后⾯会单独开⼀篇⽂章来讲。
5 以灰产为名浅谈协议破解~~
最后我们来讲⼀下协议破解，其实协议破解，在上⽂中第⼆点已经⼤概讲了⼀下，⽬前有⼤部分⽤于
灰⾊产业，那么这个产业链到底是怎样的呢？我们可以对其做⼀个⼤致分析。
https://mp.weixin.qq.com/s/Ou-OeSNugEz5YmUAdwnWWA 15/27
2020/7/27 iOS逆向之抢红包以外的那些事⼉
先看⼀副灰产的简易技术流程图：
https://mp.weixin.qq.com/s/Ou-OeSNugEz5YmUAdwnWWA 16/27
2020/7/27 iOS逆向之抢红包以外的那些事⼉
上图中有个问号，那么这个就是在做协议分析的时候⾄关重要的⼀个东⻄，如果没有他，即使破解了
所有的⽹络协议，在脱机运⾏的时候，账号也会被秒封，它就是⽤来做反欺诈的⼿段--⻛控。
那么⻛控到底是什么东⻄呢？他⼜是怎么做到判断设备的唯⼀性呢？
下⾯⽤⼀个粗略的⻛控策略图来描述下⼀个最基础的⻛控策略是怎么来判断设备的唯⼀性的。
https://mp.weixin.qq.com/s/Ou-OeSNugEz5YmUAdwnWWA 17/27
2020/7/27 iOS逆向之抢红包以外的那些事⼉
这个图分为两部分：前端和后端。
后端关系到机器学习和数据分析，这⾥就不赘述了，主要还是看看前端是怎么做的。
通常，APP都是在第⼀次启动的时候，就已经完成了收集各种设备指纹并且⽣成唯⼀的设备ID。
这⾥举⼀个简单例⼦吧：这是⼀个交友APP，在APP启动的时候，会请求⼏个⻛控接⼝，如下图：
https://mp.weixin.qq.com/s/Ou-OeSNugEz5YmUAdwnWWA 18/27
2020/7/27 iOS逆向之抢红包以外的那些事⼉
那么在这⾥，我们可以看到请求中有⼏个参数要注意：
1. xxid
2. data
3. fingerpring
4. organization
5. deviceid
⾸先我们先依次看看这⼏个参数。
https://mp.weixin.qq.com/s/Ou-OeSNugEz5YmUAdwnWWA 19/27
2020/7/27 iOS逆向之抢红包以外的那些事⼉
1. fingerpring：看名字，能⼤概猜出来应该是和设备指纹有关，图1的请求中，我们可以看到先通过
POST请求提交了⼀个fingerpring后，服务端返回了deviceID。
2. data：这串值暂时不好确定，待会可以分析看看。
3. xxid：就⽬前来看，应该是⽣成的设备唯⼀标识。
4. organization：暂时不确定，待会分析看看。
5. deviceid：和xxid有点相似，但实际不同。
然后，我们就根据⽬前的这⼏个参数，结合上⽂的⼀些分析流程，来看看具体这⼏个参数的实现。
第⼀步，从最简单的做起。为了确定这个APP的设备唯⼀标识是存储于沙盒还是keychain，我们先在
他的沙盒⽂件中找找，看能不能找到什么有⽤的信息。
https://mp.weixin.qq.com/s/Ou-OeSNugEz5YmUAdwnWWA 20/27
2020/7/27 iOS逆向之抢红包以外的那些事⼉
果不其然，我们找到了这样⼀个⽂件：FP_IP.txt。打开后可以看到正是我们在⽹络请求中看到的这串
deviceID，在这⾥我们做⼀个⼤胆的假设，后⾯⽤到的设备唯⼀标识应该是这个deviceID。
第⼆步，为了验证，我们重新启动APP，发现从这次请求开始，⽆论是xxid还是deviceID,他的值都是
第⼀步中的deviceID的值。和第⼀次启动APP时的xxid没有任何关系。
https://mp.weixin.qq.com/s/Ou-OeSNugEz5YmUAdwnWWA 21/27
2020/7/27 iOS逆向之抢红包以外的那些事⼉
那在这⾥我们就需要再做⼀个思考，最开始的那个xxid在这个⻛控体系⾥到底起了⼀个什么作⽤呢？
它到底是怎么⽣成的呢？这些问题我们留着，看在接下来的分析中会不会有所得。
第三步，我们开始逆向分析。按照前⽂的流程，先脱壳，再反编译。
这⾥直接通过frida进⾏脱壳，原理呢，在⽂章开头已经讲过了，就是⼀个简单的内存dump的过程。
https://mp.weixin.qq.com/s/Ou-OeSNugEz5YmUAdwnWWA 22/27
2020/7/27 iOS逆向之抢红包以外的那些事⼉
我们通过⼀系列的抓包、下断点调试等⼿段，最终确定了fingerpring的加密算法。
(为了保护⼚商，我们就不上具体的函数名了QAQ)
解密后，我们可以看到很多设备指纹信息。
https://mp.weixin.qq.com/s/Ou-OeSNugEz5YmUAdwnWWA 23/27
2020/7/27 iOS逆向之抢红包以外的那些事⼉
咦，这⾥也有⼀个xxid，看这串值实际上也就是我们的deviceID。
第四步，我们⼜通过⼀系列的调试，依次找到了xxid的⽣成算法和organization、md5等的算法。
好了，经过以上的简单分析，我们⼤致总结出这个⻛控在前端的⼀个策略，也刚好回应我们第⼆步的
猜想
https://mp.weixin.qq.com/s/Ou-OeSNugEz5YmUAdwnWWA 24/27
2020/7/27 iOS逆向之抢红包以外的那些事⼉
这⾥可能会有朋友会问，为什么还会收集屏幕尺⼨，内存、⼿机名称、型号等看似⽆⽤的信息呢？
这就涉及到⻛控后端的⼀些策略规则匹配了，总的来说，就是每⼀个不同的值，都有⾃⼰相应的权
重，他们的权重⼤⼩、占⽐各不相同，⽽⻛控后端⼜通过各种数据分析和机器学习，总结出⼀套评分
规则，⽤来判断⽬标设备是否可信。
所以总结下我们的⼀个思路应该是：
1. 在确保第⼀次启动APP的前提下，找到其⽤来验证设备唯⼀标识的参数，再通过反编译找到相关函
数。
2. 找到我们的⽬标函数后，在APP启动的瞬间，通过debugserver来附加到进程。
3. lldb下断点，调试。
https://mp.weixin.qq.com/s/Ou-OeSNugEz5YmUAdwnWWA 25/27
2020/7/27 iOS逆向之抢红包以外的那些事⼉
6 总结~~
以上就是iOS逆向可以在⼯作中⽤到的四个⽅⾯，我们也逐⼀举了相关的案例，⽽在我们的⽇常安全
⼯作中，iOS逆向还能做更多事，这⾥只是将平时常⻅的⼀些⼿段列了出来。
作为⼀个安全研究⼈员，在熟练运⽤⾃身技巧的前提下，还应该尽可能的多做⼀些思考，⽐如我们在
做iOS端逆向的时候，除了想着怎么去绕过反调试、怎么去除控制流平坦化、怎么样恢复被裁的符号
表、怎么样快速找出APP中做的所有安全防护等等，是否应该耗费⼀定的时间和精⼒，去做⼀些能加
快⾃⼰分析流程的东⻄？（⽐如lldb的脚本、frida相关的脚本、iOS应⽤逆向的时候还应该找到哪些
突破点？）
附：本⽂中⽤到的环境如下，供君参考
Frida 12.7.22
https://frida.re
HopperDisassembler v4
https://www.hopperapp.com
iOS13.3.1 checkra1n越狱
https://checkra.in
sslkill switch
https://github.com/nabla-c0d3/ssl-kill-switch2
https://mp.weixin.qq.com/s/Ou-OeSNugEz5YmUAdwnWWA 26/27
2020/7/27 iOS逆向之抢红包以外的那些事⼉
⽂章已于2020-04-25修改
https://mp.weixin.qq.com/s/Ou-OeSNugEz5YmUAdwnWWA 27/27