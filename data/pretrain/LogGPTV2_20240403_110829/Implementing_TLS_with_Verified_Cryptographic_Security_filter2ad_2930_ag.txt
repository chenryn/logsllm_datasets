To ensure that the adversary's power is not unduly constrained by typing, we introduce a simply-typed API that only exports functions on basic types such as `int` and `bytes`. We then type-check its implementation against the main typed API. Cryptographically, this equates to proving game-based security for adversaries \( A \) with oracle access to the TLS API.

We apply Theorem 5 to restricted TLS users \((DS_b, U_{TLS} \cdot A)\), defined as follows:
- \( DS_b \) is a fixed, typed implementation of `DataStream` that defines data as an abstract type with oracle functions for creating data from ranges \( rg \) and bytes \( v \) within that range, and for extracting bytes from data. For safe indexes, it passes to TLS either \( v \) (when \( b = 0 \)) or a max-sized array of zero bytes (when \( b = 1 \)).
- \( U_{TLS} \) is a fixed, typed implementation of our basic TLS API \( I_{UTLS} \) that maintains a private table mapping integers to current states of TLS connections and exports the same functionalities as the TLS API with base types.
- \( A \) ranges over all probabilistic polynomial-time (p.p.t.) programs such that \( I_{TCP}, I_{UTLS} \vdash A \); although we formally require \( A \) to be typed, this does not restrict its power, as \( I_{UTLS} \) only exports functions on plain data types.

This leads to a standard cryptographic game (on a large amount of code) where:
1. \( A \) must distinguish between real encryptions and encryptions of zero.
2. \( A \) attempts to break application integrity.

**Theorem 6 (Game-Based Security):** Let \( T \) be TLS-secure. For all p.p.t. adversaries \( A \) with access to the oracles defined by the challenger \( U_{TLS} \) and \( TCP \), we have:
1. \( DS_0 \cdot TCP \cdot T \cdot U_{TLS} \cdot A \approx DS_1 \cdot TCP \cdot T \cdot U_{TLS} \cdot A \)
2. \( DS_0 \cdot TCP \cdot T \cdot U_{TLS} \cdot A \) is asymptotically safe.

### D. Verified TLS Applications

#### Ad Hoc Client Authentication
Our first sample application illustrates a typical pattern: an anonymous client and a server establish a TLS connection, then proceed with client authentication at the application level, relying on shared secret bytes, which may represent a username-password pair, a token, or a secure cookie.

The security of our sample application ensures that:
- Whenever the client sends the authenticator and whenever the server accepts an authenticator as valid, (1) the client and server share a secure session, and (2) the adversary gains no information about the authenticator (hence the client identity).

For simplicity, in contrast with our general theorem, we use a strong ciphersuite, a single honest server certificate, and a secure token repository with tokens that fit in a single fragment. The application code can be specified as:

```fsharp
val client: url → username → token → Connection option
val server : unit → (username * Connection) option
{ ∃token. Valid(username, token) ∧ Login(CI(connection).id, username, token) }
```

To model (1), the client assumes the event `Login(CI(connection).id, username, token)` before sending out the token, and the post-condition of the server guarantees that the user is registered and authenticated. Application-level authentication holds only if the adversary does not guess the authenticator, with a probability that depends on its min-entropy. We capture this assumption by coding an ideal token functionality that guarantees that honestly generated and coerced (guessed) authenticators never collide.

```fsharp
type token
val create : unit → token {Honest(token)}
val register : string → token {Honest(token)} → unit {Valid(string, token)}
val verify : string → token → bool {result ⇒ Valid(string, token)}
val coerce : bytes → token {not(Honest(token))}
```

We define a `DataStream` module that sends tokens (within a given length range) as data at the beginning of the stream:

```fsharp
(;id, emptyStream, (minTkLen, maxTkLen)) data =
  token {∃u. Valid(u, token) ⇒ Login(id, u, token)}
```

Type abstraction ensures both (1) and (2). Figure 7 shows that our `DataStream` and application code modules are well-typed using the TLS API and the ideal token interface. This suffices to show that our application is secure, except for the (small) probability that an adversary guesses the authenticator and the negligible probability that an adversary can break our TLS idealization. Using our length-hiding TLS API for authenticators enables us to get this simple guarantee; without it, traffic analysis might help guessing attacks, for example, if the token were a compressed HTTP session cookie [24].

#### Secure RPC
Our second application is an RPC library that relies on TLS to exchange multiple requests and responses after mutual authentication. By type-checking our code and applying Theorem 5, we easily obtain secrecy, authenticity, and correlation between requests and responses. The full paper presents an RPC `DataStream` module that defines data concretely as bytes, with a refinement that says it must be a fragment of either a serialized request or a serialized response (to handle fragmentation if their size exceeds 16K). By type abstraction, TLS guarantees that RPC will handle and deliver message fragments in accordance with the `DataStream` interface: messages will be kept secret and will arrive in the right order with strong authentication.

### VII. Limitations and Future Work
We implemented, tested, and cryptographically verified a reference implementation of TLS. By writing a few hundred lines of F# and F7 code on top of our API, we also confirmed that applications can rely on our theorems to prove end-to-end security while ignoring the low-level details of the RFCs.

However, our implementation and security theorems come with caveats:
- We do not yet support some algorithms and ciphersuites (e.g., ECDH, AES-GCM) and need to optimize our code for performance (see §II-D).
- Its security also relies on a large, unverified Trusted Computing Base (TCB): the F7 typechecker, the F# compiler, the .NET runtime, and the core cryptographic libraries.
- We do not formally account for side-channel attacks based on timing, even though our implementation tries to mitigate them; proving the absence of such attacks would require specific tools (see e.g., [2]).

Our verification method enabled us to develop modular security proofs for a 5KLOC program, based on precise cryptographic assumptions on core primitives. Most proofs are by automatic type-checking, but writing type annotations requires attention and care, and the resulting interfaces amount to 2.5KLOC. Some proofs also rely on usage restrictions (e.g., Definition 4) that are not established by typing but could be verified using more advanced affine type systems [54]. We focus on the standard model of cryptography, resulting in rather strong assumptions for the Handshake, similar to those of Jager et al. [33] for the DHE key exchange. Relaxing these assumptions and developing concrete security bounds [8] for our implementation is left as important future work.