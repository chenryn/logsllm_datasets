title:CSP Is Dead, Long Live CSP! On the Insecurity of Whitelists and
the Future of Content Security Policy
author:Lukas Weichselbaum and
Michele Spagnuolo and
Sebastian Lekies and
Artur Janc
CSP Is Dead, Long Live CSP! On the Insecurity of
Whitelists and the Future of Content Security Policy
Lukas Weichselbaum
Google Inc.
PI:EMAIL
Michele Spagnuolo
Google Inc.
PI:EMAIL
Sebastian Lekies
Google Inc.
PI:EMAIL
Artur Janc
Google Inc.
PI:EMAIL
ABSTRACT
Content Security Policy is a web platform mechanism de-
signed to mitigate cross-site scripting (XSS), the top security
vulnerability in modern web applications [24]. In this paper,
we take a closer look at the practical beneﬁts of adopting
CSP and identify signiﬁcant ﬂaws in real-world deployments
that result in bypasses in 94.72% of all distinct policies.
We base our Internet-wide analysis on a search engine cor-
pus of approximately 100 billion pages from over 1 billion
hostnames; the result covers CSP deployments on 1,680,867
hosts with 26,011 unique CSP policies – the most compre-
hensive study to date. We introduce the security-relevant
aspects of the CSP speciﬁcation and provide an in-depth
analysis of its threat model, focusing on XSS protections.
We identify three common classes of CSP bypasses and ex-
plain how they subvert the security of a policy.
We then turn to a quantitative analysis of policies de-
ployed on the Internet in order to understand their secu-
rity beneﬁts. We observe that 14 out of the 15 domains
most commonly whitelisted for loading scripts contain un-
safe endpoints; as a consequence, 75.81% of distinct policies
use script whitelists that allow attackers to bypass CSP. In
total, we ﬁnd that 94.68% of policies that attempt to limit
script execution are ineﬀective, and that 99.34% of hosts
with CSP use policies that oﬀer no beneﬁt against XSS.
Finally, we propose the ’strict-dynamic’ keyword, an
addition to the speciﬁcation that facilitates the creation of
policies based on cryptographic nonces, without relying on
domain whitelists. We discuss our experience deploying such
a nonce-based policy in a complex application and provide
guidance to web authors for improving their policies.
Keywords
Content Security Policy; Cross-Site Scripting; Web Security
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
CCS’16 October 24-28, 2016, Vienna, Austria
© 2016 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-4139-4/16/10.
DOI: http://dx.doi.org/10.1145/2976749.2978363
1.
INTRODUCTION
Cross-site scripting – the ability to inject attacker-con-
trolled scripts into the context of a web application – is
arguably the most notorious web vulnerability. Since the
ﬁrst formal reference to XSS in a CERT advisory in 2000
[6], generations of researchers and practitioners have inves-
tigated ways to detect [18, 21, 29, 35], prevent [22, 25, 34]
and mitigate [4, 23, 28, 33] the issue. Despite these eﬀorts,
XSS is still one of the most prevalent security issues on the
web [24, 30, 37], and new variations are constantly being
discovered as the web evolves [5, 13, 14, 20].
Today, Content Security Policy [31] is one of the most
promising countermeasures against XSS. CSP is a declara-
tive policy mechanism that allows web application develop-
ers to deﬁne which client-side resources can be loaded and
executed by the browser. By disallowing inline scripts and
allowing only trusted domains as a source of external scripts,
CSP aims to restrict a site’s capability to execute malicious
client-side code. Hence, even when an attacker is capable of
ﬁnding an XSS vulnerability, CSP aims to keep the appli-
cation safe by preventing the exploitation of the bug – the
attacker should not be capable of loading malicious code
without controlling a trusted host.
In this paper, we present the results of the ﬁrst in-depth
analysis of the security of CSP deployments across the web.
In order to do so, we ﬁrst investigate the protective capabil-
ities of CSP by reviewing its threat model, analyzing possi-
ble conﬁguration pitfalls and enumerating little-known tech-
niques that allow attackers to bypass its protections.
We follow with a large-scale empirical study using real-
world CSP policies extracted from the Google search in-
dex. Based on this data set, we ﬁnd that currently at
least 1,680,000 Internet hosts deploy a CSP policy. Af-
ter normalizing and deduplicating our data set, we identify
26,011 unique CSP policies, out of which 94.72% are triv-
ially bypassable – an attacker can use automated methods
to ﬁnd endpoints that allow the subversion of CSP protec-
tions. Even though in many cases considerable eﬀort was
spent in deploying CSP, 90.63% of current policies contain
conﬁgurations that immediately remove any XSS protection,
by allowing the execution of inline scripts or the loading of
scripts from arbitrary external hosts. Only 9.37% of the
policies in our data set have stricter conﬁgurations and can
potentially protect against XSS. However, we ﬁnd that at
least 51.05% of such policies are still bypassable, due the
presence of subtle policy misconﬁgurations or origins with
unsafe endpoints in the script-src whitelist.
Based on the results of our study, we conclude that main-
taining a secure whitelist for a complex application is infea-
sible in practice; hence, we propose changes to the way CSP
is used. We suggest that the model of designating trust
by specifying URL whitelists from which scripts can exe-
cute should be replaced with an approach based on nonces
and hashes [3], already deﬁned by the CSP speciﬁcation and
available in major browser implementations.
In a nonce-based policy, instead of whitelisting hosts and
domains for script execution, the application deﬁnes a single-
use, unguessable token (nonce) delivered both in the CSP
policy and as an HTML attribute of legitimate, application-
controlled scripts. The user agent allows the execution only
of those scripts whose nonce matches the value speciﬁed in
the policy; an attacker who can inject markup into a vul-
nerable page does not know the nonce value, and is thus
not able to execute malicious scripts. In order to ease the
adoption process of this nonce-based approach, we present
a new CSP source expression for ’script-src’, provision-
ally called ’strict-dynamic’. With ’strict-dynamic’, dy-
namically generated scripts implicitly inherit the nonce from
the trusted script that created them. This way, already-
executing, legitimate scripts can easily add new scripts to
the DOM without extensive application changes. However,
an attacker who ﬁnds an XSS bug, not knowing the correct
nonce, is not able to abuse this functionality because they
are prevented from executing scripts in the ﬁrst place.
In order to prove the feasibility of this approach, we present
a real-world case study of adopting a nonce-based policy in
a popular application.
Our contributions can be summarized as follows:
• We present the results of the ﬁrst in-depth analysis
of the CSP security model, analyzing the protections
against web bugs provided by the standard. We iden-
tify common policy misconﬁgurations and present three
classes of CSP bypasses that disable the protective ca-
pabilities of a policy.
• We conduct a large-scale empirical study of the bene-
ﬁts of real-world CSP deployments by extracting poli-
cies from the Google search index. Based on a corpus
of approximately 106 billion pages, of which 3.9 bil-
lion are protected with CSP, we identify 26,011 unique
policies. We ﬁnd that at least 94.72% of these poli-
cies are ineﬀective at mitigating XSS, due to policy
misconﬁgurations and insecure whitelist entries.
• Based on our ﬁndings, we propose a change to how
Content Security Policy is deployed in practice:
in-
stead of whitelisting, we advocate for a nonce-based
approach. To further this approach, we present ’strict-
dynamic’, a new feature of the CSP3 speciﬁcation cur-
rently implemented in the Chromium browser. We
discuss the beneﬁts of this approach and present a
case study of deploying a policy based on nonces and
strict-dynamic in a popular web application.
The rest of this paper has the following structure: in Sec-
tion 2, we provide an in-depth introduction to CSP. Thereby,
we cover the technical foundations in 2.1, the CSP threat
model and common security pitfalls when designing a policy
in 2.2 and 2.3. Subsequently, we present the result of our
empirical study in Section 3. In order to do so, we ﬁrst out-
line our research questions in 3.1, introduce our data set in
3.2, and explain our methodology in 3.3, before we present
the results and our analysis in 3.4. Based on the results of
this study, we then propose a way to improve CSP in Section
4. Finally, we present related work in Section 5, before we
conclude in Section 6.
2. CONTENT SECURITY POLICY
2.1 Overview
The Content Security Policy (CSP) is a declarative mech-
anism that allows web authors to specify a number of se-
curity restrictions on their applications, to be enforced by
supporting user agents.
CSP is intended as “a tool which developers can use to
lock down their applications in various ways, mitigating the
risk of content-injection vulnerabilities (. . . ) and reducing
the privilege with which their applications execute.” [3]
CSP is evolving quickly: the version currently undergoing
speciﬁcation is CSP3, and the standard is unevenly imple-
mented by user agents. For example, Chromium has full
CSP2 support and implements most of the working draft
of CSP3, in some cases behind experimental runtime ﬂags,
while Mozilla Firefox and WebKit-based browsers just re-
cently obtained full CSP2 support [8]. When discussing the
details of CSP, we do not focus on any particular revision
of the standard, but instead attempt to provide a broad
overview across implementations and versions [31].
A CSP policy is delivered in the Content-Security-Policy
HTTP response header or in a  element. The func-
tionality of CSP can be divided into three categories:
Resource loading restrictions. The most well-known
and commonly used aspect of CSP is limiting the ability to
load various subresources to a set of origins allowed by the
developer, known as a source list. Commonly used direc-
tives are script-src, style-src, img-src, and the catch-
all default-src; a full list of directives regulating resources
is shown in Table 1. As a special case, several additional
conﬁguration options are available for the script-src and
style-src directives; these allow more ﬁne-grained control
over scripts and stylesheets and are discussed below.
Auxiliary URL-based restrictions. Certain classes of
attacks cannot be prevented by policing fetched sub-resources,
but similarly require a concept of trusted origins with which
the document can interact. A common example is the frame-
ancestors directive, which deﬁnes the origins that are al-
lowed to frame a document in order to prevent clickjack-
ing [10]. Similarly, base-uri and form-action deﬁne which
URLs can be targets of  and 
elements in order to prevent some post-XSS attacks [38].
Miscellaneous conﬁnement and hardening options.
Due to the lack of other common mechanisms for enabling
security restrictions in web applications, CSP has become
the home for several loosely ﬁtting security features. This in-
cludes the block-all-mixed-content and upgrade-insecure-
requests keywords, which prevent mixed content bugs and
improve HTTPS support; plugin-types, which restricts al-
lowed plugin formats; and sandbox, which mirrors the secu-
rity features of HTML5 sandbox frames.
In order to make web applications compatible with a Con-
tent Security Policy useful against XSS, web authors often
have to refactor the HTML markup generated by the appli-
cation logic, as well as by frameworks and templating sys-
Directive
default-src
script-src
style-src
img-src
media-src
font-src
frame-src
object-src
child-src
worker-src
manifest-src Manifests
Controlled resource type
All resources (fallback)
Scripts
Stylesheets
Images
Media (audio, video)
Fonts
Documents (frames)
Plug-in formats (object, embed)
Documents (frames), [Shared]Workers
[Shared]Workers
Table 1: CSP directives and controlled resources
tems.
In particular, inline scripts, the usage of eval and
equivalent constructs, inline event handlers and javascript:
URIs must be avoided or refactored with CSP-friendly al-
ternatives.
In addition to the default behavior of enforcing policy re-
strictions, CSP can be conﬁgured in Report-Only mode, in
which violations are recorded but not enforced.
In both
cases, the report-uri directive can be used to send viola-
tion reports to inform the application’s owner of incompat-
ible markup.
Content-Security-Policy: script-src ’self’; style-src
cdn.example.org third-party.org; child-src https:
Listing 1: Example of a traditional CSP policy
Source lists
2.1.1
CSP source lists (commonly known as whitelists) have
been a core part of CSP and are the traditional way to
specify trust relationships. For example, as shown in List-
ing 1, an application might choose to trust only its hosting
domain for loading scripts, but allow fonts or images from
cdn.example.org and third-party.org, and require frames
to be loaded over HTTPS, while enforcing no restrictions on
other resource types.
For any directive, the whitelist can be composed of host-
names (example.org, example.com), possibly including the
* wildcard to extend trust to all subdomains (*.example.org);
schemes (https:, data:); and the special keywords ’self’,
denoting the origin of the current document, and ’none’,
enforcing an empty source list and prohibiting the loading
of any resources whatsoever.
Starting with CSP2, authors also have the option to spec-
ify paths in their whitelists (example.org/resources/js/).
Interestingly, path-based restrictions cannot be relied on to
limit the location from which resources can be loaded; a
broader discussion of this issue is provided in Section 2.3.4.
2.1.2 Restrictions on script execution
Because of the signiﬁcance of scripting in modern web
applications, the script-src directive provides several key-
words to allow more granular control over script execution:
1. unsafe-inline allows the execution of inline 
blocks and JavaScript event handlers (eﬀectively re-
moving any CSP protection against XSS).
2. unsafe-eval allows the use of JavaScript APIs that
execute string data as code, such as eval(), setTime-
out(), setInterval(), and the Function constructor.
Otherwise, these APIs are blocked by a policy with a
script-src directive.
3. A CSP nonce allows the policy to specify a one-time
value that acts as an authorization token for scripts
(script-src ’nonce-random-value’). Any script on
the page with the correct nonce="random-value" at-
tribute will be allowed to execute.
4. A CSP hash allows the developer to list cryptographic
hashes of expected scripts within the page (script-
src ’sha256-nGA...’). Any inline script whose digest
matches the value supplied in the policy will be allowed
to execute.
Nonces and hashes can similarly be used with the style-
src directive to allow the loading of inline stylesheets and
external CSS whitelisted via a nonce value.
Content-Security-Policy: script-src ’nonce-BPNLMA4’
’sha256-OPc+f+ieuYDM...’ object-src ’none’;
Listing 2: Locked down policy using a nonce and a hash
2.2 The threat model of CSP
In order for CSP to oﬀer a security beneﬁt, it must pre-
vent attackers from exploiting ﬂaws that would otherwise
enable malicious actions against the application’s users. In
its current form, CSP oﬀers protections from three types of
vulnerabilities [3]:
• XSS: the ability to inject and execute untrusted scripts
in a vulnerable application (protected with the script-
src and object-src directives)
• Clickjacking:
forcing users to take unwanted actions
in an aﬀected application by overlaying hidden frames
on attacker-controlled pages (protected by restricting
framing with frame-ancestors)
• Mixed content: Accidentally loading resources from in-
secure protocols on pages delivered over HTTPS (pro-
tected with the upgrade-insecure-requests and block-
all-mixed-content keywords and by restricting the
loading of scripts and sensitive resources to https:).
It follows that only a small subset of CSP directives are
useful for XSS protection. Furthermore, the ability to exe-
cute malicious scripts in the context of an application sub-
verts the protections oﬀered by all other directives, as dis-
cussed in Section 2.2.2.
2.2.1 Beneﬁts of adopting CSP
Since some popular user agents do not yet support CSP
or oﬀer only partial support[8], CSP should only be used
as a defense-in-depth to hinder attack attempts in case the
primary security mechanism has failed. Accordingly, appli-
cations using CSP must also employ traditional protection
mechanisms; e.g., employ frameworks with strict contextual
escaping for generating markup, use the X-Frame-Options
header to protect against clickjacking, and ensure that re-
sources on secure pages are fetched over HTTPS.
The actual beneﬁt of setting a Content Security Policy
arises only when the primary security mechanism has turned
out to be insuﬃcient – CSP can help protect users when de-
velopers introduce programming mistakes that would other-
wise lead to XSS, clickjacking, or mixed content bugs.
In practice, however, clickjacking protection with X-Frame-
Options is rarely subverted, and active mixed content (scripts
and other active content loaded over HTTP from a HTTPS
web page) is already blocked by default in modern user
agents. Thus, the primary value of CSP – and indeed, the
main motivation for the creation of the standard [3] – lies in