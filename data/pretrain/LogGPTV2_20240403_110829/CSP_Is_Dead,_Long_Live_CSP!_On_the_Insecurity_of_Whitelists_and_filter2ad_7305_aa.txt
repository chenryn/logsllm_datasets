# Title: CSP Is Dead, Long Live CSP! On the Insecurity of Whitelists and the Future of Content Security Policy

## Authors:
- Lukas Weichselbaum, Google Inc.
- Michele Spagnuolo, Google Inc.
- Sebastian Lekies, Google Inc.
- Artur Janc, Google Inc.

## Abstract
Content Security Policy (CSP) is a web platform mechanism designed to mitigate cross-site scripting (XSS), which remains one of the top security vulnerabilities in modern web applications. In this paper, we examine the practical benefits of adopting CSP and identify significant flaws in real-world deployments that result in bypasses in 94.72% of all distinct policies. Our analysis is based on a search engine corpus of approximately 100 billion pages from over 1 billion hostnames, covering CSP deployments on 1,680,867 hosts with 26,011 unique CSP policies. This study is the most comprehensive to date.

We introduce the security-relevant aspects of the CSP specification and provide an in-depth analysis of its threat model, focusing on XSS protections. We identify three common classes of CSP bypasses and explain how they subvert the security of a policy. 

Our quantitative analysis of deployed policies reveals that 14 out of the 15 most commonly whitelisted domains for loading scripts contain unsafe endpoints. Consequently, 75.81% of distinct policies use script whitelists that allow attackers to bypass CSP. Overall, 94.68% of policies that attempt to limit script execution are ineffective, and 99.34% of hosts with CSP use policies that offer no benefit against XSS.

To address these issues, we propose the 'strict-dynamic' keyword, an addition to the specification that facilitates the creation of policies based on cryptographic nonces, without relying on domain whitelists. We discuss our experience deploying such a nonce-based policy in a complex application and provide guidance to web authors for improving their policies.

**Keywords:** Content Security Policy, Cross-Site Scripting, Web Security

## 1. Introduction
Cross-site scripting (XSS) is arguably the most notorious web vulnerability, allowing attackers to inject and execute malicious scripts within the context of a web application. Since the first formal reference to XSS in a CERT advisory in 2000, numerous researchers and practitioners have investigated methods to detect, prevent, and mitigate this issue. Despite these efforts, XSS remains one of the most prevalent security issues on the web, with new variations constantly being discovered as the web evolves.

Content Security Policy (CSP) is a promising countermeasure against XSS. CSP is a declarative policy mechanism that allows web developers to define which client-side resources can be loaded and executed by the browser. By disallowing inline scripts and permitting only trusted domains as sources of external scripts, CSP aims to restrict a site's capability to execute malicious client-side code. Even if an attacker finds an XSS vulnerability, CSP should prevent the exploitation of the bug by preventing the loading of malicious code from untrusted hosts.

In this paper, we present the results of the first in-depth analysis of the security of CSP deployments across the web. We investigate the protective capabilities of CSP by reviewing its threat model, analyzing possible configuration pitfalls, and enumerating little-known techniques that allow attackers to bypass its protections.

Our large-scale empirical study, based on real-world CSP policies extracted from the Google search index, reveals that at least 1,680,000 Internet hosts deploy a CSP policy. After normalizing and deduplicating our dataset, we identify 26,011 unique CSP policies, of which 94.72% are trivially bypassable. Even though considerable effort was spent in deploying CSP, 90.63% of current policies contain configurations that immediately remove any XSS protection by allowing the execution of inline scripts or the loading of scripts from arbitrary external hosts. Only 9.37% of the policies in our dataset have stricter configurations and can potentially protect against XSS. However, at least 51.05% of such policies are still bypassable due to subtle policy misconfigurations or origins with unsafe endpoints in the script-src whitelist.

Based on our findings, we conclude that maintaining a secure whitelist for a complex application is infeasible in practice. Therefore, we propose changes to the way CSP is used. We suggest replacing the model of designating trust by specifying URL whitelists with an approach based on nonces and hashes, already defined by the CSP specification and available in major browser implementations.

In a nonce-based policy, instead of whitelisting hosts and domains for script execution, the application defines a single-use, unguessable token (nonce) delivered both in the CSP policy and as an HTML attribute of legitimate, application-controlled scripts. The user agent allows the execution only of those scripts whose nonce matches the value specified in the policy. An attacker who can inject markup into a vulnerable page does not know the nonce value and thus cannot execute malicious scripts. To ease the adoption process of this nonce-based approach, we present a new CSP source expression for 'script-src', provisionally called 'strict-dynamic'. With 'strict-dynamic', dynamically generated scripts implicitly inherit the nonce from the trusted script that created them. This way, already-executing, legitimate scripts can easily add new scripts to the DOM without extensive application changes. However, an attacker who finds an XSS bug, not knowing the correct nonce, is prevented from executing scripts in the first place.

To prove the feasibility of this approach, we present a real-world case study of adopting a nonce-based policy in a popular application.

Our contributions can be summarized as follows:
- We present the results of the first in-depth analysis of the CSP security model, identifying common policy misconfigurations and presenting three classes of CSP bypasses that disable the protective capabilities of a policy.
- We conduct a large-scale empirical study of the benefits of real-world CSP deployments by extracting policies from the Google search index. Based on a corpus of approximately 106 billion pages, of which 3.9 billion are protected with CSP, we identify 26,011 unique policies. We find that at least 94.72% of these policies are ineffective at mitigating XSS due to policy misconfigurations and insecure whitelist entries.
- Based on our findings, we propose a change to how Content Security Policy is deployed in practice: instead of whitelisting, we advocate for a nonce-based approach. To further this approach, we present 'strict-dynamic', a new feature of the CSP3 specification currently implemented in the Chromium browser. We discuss the benefits of this approach and present a case study of deploying a policy based on nonces and 'strict-dynamic' in a popular web application.

The rest of this paper is structured as follows: In Section 2, we provide an in-depth introduction to CSP, covering the technical foundations, the CSP threat model, and common security pitfalls when designing a policy. In Section 3, we present the results of our empirical study, outlining our research questions, introducing our dataset, explaining our methodology, and presenting the results and our analysis. Based on the results of this study, we propose a way to improve CSP in Section 4. Finally, we present related work in Section 5 and conclude in Section 6.

## 2. Content Security Policy

### 2.1 Overview
Content Security Policy (CSP) is a declarative mechanism that allows web authors to specify a number of security restrictions on their applications, to be enforced by supporting user agents. CSP is intended as a tool for developers to lock down their applications, mitigating the risk of content-injection vulnerabilities and reducing the privilege with which their applications execute.

CSP is evolving quickly, with CSP3 currently undergoing specification. The standard is unevenly implemented by user agents. For example, Chromium has full CSP2 support and implements most of the working draft of CSP3, while Mozilla Firefox and WebKit-based browsers recently obtained full CSP2 support. When discussing the details of CSP, we do not focus on any particular revision of the standard but provide a broad overview across implementations and versions.

A CSP policy is delivered in the `Content-Security-Policy` HTTP response header or in a `<meta>` element. The functionality of CSP can be divided into three categories:

#### Resource Loading Restrictions
The most well-known and commonly used aspect of CSP is limiting the ability to load various subresources to a set of origins allowed by the developer, known as a source list. Commonly used directives include `script-src`, `style-src`, `img-src`, and the catch-all `default-src`. A full list of directives regulating resources is shown in Table 1. As a special case, several additional configuration options are available for the `script-src` and `style-src` directives, allowing more fine-grained control over scripts and stylesheets.

| Directive | Controlled Resource Type |
|-----------|--------------------------|
| default-src | All resources (fallback) |
| script-src | Scripts |
| style-src | Stylesheets |
| img-src | Images |
| media-src | Media (audio, video) |
| font-src | Fonts |
| frame-src | Documents (frames) |
| object-src | Plug-in formats (object, embed) |
| child-src | Documents (frames), [Shared]Workers |
| worker-src | [Shared]Workers |
| manifest-src | Manifests |

#### Auxiliary URL-Based Restrictions
Certain classes of attacks cannot be prevented by policing fetched sub-resources but require a concept of trusted origins with which the document can interact. For example, the `frame-ancestors` directive defines the origins that are allowed to frame a document to prevent clickjacking. Similarly, `base-uri` and `form-action` define which URLs can be targets of `<base>` and `<form>` elements to prevent some post-XSS attacks.

#### Miscellaneous Confinement and Hardening Options
CSP includes several loosely fitting security features, such as `block-all-mixed-content` and `upgrade-insecure-requests` keywords, which prevent mixed content bugs and improve HTTPS support. The `plugin-types` directive restricts allowed plugin formats, and the `sandbox` directive mirrors the security features of HTML5 sandbox frames.

To make web applications compatible with a Content Security Policy useful against XSS, web authors often need to refactor the HTML markup generated by the application logic, frameworks, and templating systems. Inline scripts, the usage of `eval` and equivalent constructs, inline event handlers, and `javascript:` URIs must be avoided or refactored with CSP-friendly alternatives.

In addition to enforcing policy restrictions, CSP can be configured in Report-Only mode, where violations are recorded but not enforced. In both cases, the `report-uri` directive can be used to send violation reports to inform the application's owner of incompatible markup.

```http
Content-Security-Policy: script-src 'self'; style-src cdn.example.org third-party.org; child-src https:
```

### 2.1.1 Source Lists
CSP source lists (commonly known as whitelists) are a core part of CSP and the traditional way to specify trust relationships. For example, an application might choose to trust only its hosting domain for loading scripts, but allow fonts or images from `cdn.example.org` and `third-party.org`, and require frames to be loaded over HTTPS, while enforcing no restrictions on other resource types.

For any directive, the whitelist can be composed of hostnames (e.g., `example.org`, `example.com`), possibly including the `*` wildcard to extend trust to all subdomains (`*.example.org`); schemes (e.g., `https:`, `data:`); and the special keywords `'self'` (denoting the origin of the current document) and `'none'` (enforcing an empty source list and prohibiting the loading of any resources).

Starting with CSP2, authors also have the option to specify paths in their whitelists (e.g., `example.org/resources/js/`). However, path-based restrictions cannot be relied on to limit the location from which resources can be loaded, as discussed in Section 2.3.4.

### 2.1.2 Restrictions on Script Execution
Because of the significance of scripting in modern web applications, the `script-src` directive provides several keywords to allow more granular control over script execution:

1. `unsafe-inline`: Allows the execution of inline `<script>` blocks and JavaScript event handlers, effectively removing any CSP protection against XSS.
2. `unsafe-eval`: Allows the use of JavaScript APIs that execute string data as code, such as `eval()`, `setTimeout()`, `setInterval()`, and the `Function` constructor. Otherwise, these APIs are blocked by a policy with a `script-src` directive.
3. **CSP Nonce**: Allows the policy to specify a one-time value that acts as an authorization token for scripts (`script-src 'nonce-random-value'`). Any script on the page with the correct `nonce="random-value"` attribute will be allowed to execute.
4. **CSP Hash**: Allows the developer to list cryptographic hashes of expected scripts within the page (`script-src 'sha256-nGA... '`). Any inline script whose digest matches the value supplied in the policy will be allowed to execute.

Nonces and hashes can similarly be used with the `style-src` directive to allow the loading of inline stylesheets and external CSS whitelisted via a nonce value.

```http
Content-Security-Policy: script-src 'nonce-BPNLMA4' 'sha256-OPc+f+ieuYDM... '; object-src 'none';
```

### 2.2 The Threat Model of CSP
For CSP to offer a security benefit, it must prevent attackers from exploiting flaws that would otherwise enable malicious actions against the application's users. In its current form, CSP offers protections from three types of vulnerabilities:

- **XSS**: The ability to inject and execute untrusted scripts in a vulnerable application (protected with the `script-src` and `object-src` directives).
- **Clickjacking**: Forcing users to take unwanted actions in an affected application by overlaying hidden frames on attacker-controlled pages (protected by restricting framing with `frame-ancestors`).
- **Mixed Content**: Accidentally loading resources from insecure protocols on pages delivered over HTTPS (protected with the `upgrade-insecure-requests` and `block-all-mixed-content` keywords and by restricting the loading of scripts and sensitive resources to `https:`).

It follows that only a small subset of CSP directives are useful for XSS protection. Furthermore, the ability to execute malicious scripts in the context of an application subverts the protections offered by all other directives.

### 2.2.1 Benefits of Adopting CSP
Since some popular user agents do not yet fully support CSP, it should be used as a defense-in-depth mechanism to hinder attack attempts in case the primary security mechanism has failed. Applications using CSP must also employ traditional protection mechanisms, such as frameworks with strict contextual escaping for generating markup, the `X-Frame-Options` header to protect against clickjacking, and ensuring that resources on secure pages are fetched over HTTPS.

The actual benefit of setting a Content Security Policy arises only when the primary security mechanism has proven insufficient—CSP can help protect users when developers introduce programming mistakes that would otherwise lead to XSS, clickjacking, or mixed content bugs. In practice, however, clickjacking protection with `X-Frame-Options` is rarely subverted, and active mixed content (scripts and other active content loaded over HTTP from a HTTPS web page) is already blocked by default in modern user agents. Thus, the primary value of CSP—and indeed, the main motivation for the creation of the standard—lies in mitigating XSS.