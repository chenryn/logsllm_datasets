User: I want to make a Python wrapper for another command-line program.
I want to read Python's stdin as quickly as possible, filter and translate it, and then write it promptly to the child program's stdin.
At the same time, I want to be reading as quickly as possible from the child program's stdout and, after a bit of massaging, writing it promptly to Python's stdout.
The Python subprocess module is full of warnings to use communicate() to avoid deadlocks.  However, communicate() doesn't give me access to the child program's stdout until the child has terminated.
Assistant: Disclaimer: This solution likely requires that you have access to the source code of the process you are trying to call, but may be worth trying anyways.  It depends on the called process periodically flushing its stdout buffer which is not standard.
Say you have a process proc created by subprocess.Popen.  proc has attributes stdin and stdout.  These attributes are simply file-like objects.  So, in order to send information through stdin you would call proc.stdin.write().  To retrieve information from proc.stdout you would call proc.stdout.readline() to read an individual line.
A couple of caveats:

When writing to proc.stdin via write() you will need to end  the input with a newline character.  Without a newline character, your subprocess will hang until a newline is passed.
In order to read information from proc.stdout you will need to make sure that the command called by subprocess appropriately flushes its stdout buffer after each print statement and that each line ends with a newline.  If the stdout buffer does not flush at appropriate times, your call to proc.stdout.readline() will hang.