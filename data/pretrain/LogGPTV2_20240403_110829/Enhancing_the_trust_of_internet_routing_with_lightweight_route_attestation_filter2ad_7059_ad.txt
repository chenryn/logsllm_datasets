tected, the resulting signature is guaranteed to be signed by the
proper private key, and the signature is signed only under known
good platform state, e.g., the integrity of the attestation service
and rules is maintained.
Remote attestation is another important TC mechanism used
by TBGP. When a router initially joins the Internet, in order to
get permissions to announce routes, it needs to get its private
keys. For this purpose, its platform should be attested by the
authorities before the router provides its routing service. The
TPM on the router signs the value of system state and sends
it to an authority, which veriﬁes if the current platform is in a
good state. Upon successful veriﬁcation, the authority releases
corresponding private keys to the router, which in turn seals
them with TPM. This guarantees that a private secret is only
released to a good router. Once private keys are achieved in a
router, TPM protects the keys locally. Combined with the se-
cure storage mechanism above, a protected key is only avail-
able for signing when the system is in the same good state as
when the key is retrieved and installed. Thus, it lays the foun-
dation for trust establishment between BGP speakers, which
is the prerequisite to ensure that route attestation rules are en-
forced in TBGP. In TBGP, we assume that the policy informa-
tion (i.e., routing attestation security rules) is certiﬁed by some
trusted authorities, e.g., IANA. For the router platform and pro-
tocol stack, known-good system state can be certiﬁed by router
vendors. Sharing this information between ASes or ISPs may
introduce the privacy issue, which has been discussed exten-
sively in the TC community. Some privacy-preserving attesta-
tion mechanisms have been proposed, such as privacy CA and
direct anonymous attestation (DAA) [30].
B. Primitive Functions of TBGP
TBGP leverages three core mechanisms to achieve the
security goals: secure storage of BGP keys, signing/verifying
BGP announcements, and BGP attestation service. These
mechanisms jointly provide the functions of route attestation.
Before introducing the details, we assume that BGP speakers
in TBGP are equipped with TCG-compatible TPM chips for
key storage and the attestation of the BGP process and route
attestation rules. Several designs of TPM for embedded systems
have been proposed [13], [29]. Alternatively, secure software
TPM (swTPM) [31], a kernel module in the router OS, can be
used if hardware TPM is not available. As we focus on rela-
tively closed router platforms (compared to general-purpose
computing systems), we believe a software TPM module is
reasonably good enough for attestation in TBGP since TBGP
focuses on attesting user-space routing protocol stacks and data
and trusts the integrity of underlying OS.
, which includes
, corresponding to AS number
Secure Storage of BGP Keys: The secure storage mecha-
nism in TBGP is realized by directly applying the secure storage
primitive provided by TPM. In TBGP, all sealed keys can be
unsealed from TPM and used by the BGP attestation service
only when the BGP system running on a router is not mali-
ciously changed. In general, TPM in a BGP speaker seals private
keys
corresponding to its owned
preﬁxes, and
. In
TBGP, similar to traditional BGP security solutions [4], [6], [8],
we also assume some trusted address assignment authorities,
such as ICANN and IANA, and other trusted delegation organi-
zations act as PKGs to generate and distribute private keys and
public parameters to routers before they are deployed on the In-
ternet. Note that, for strong security purposes, address assign-
ment authorities should collaborate with router vendors who
provide ﬁngerprints of different BGP software with route attes-
tation rules to accurately attest BGP systems before assigning
private keys. Once a router obtains its private keys, all keys are
sealed into the TPM.
When a BGP router is in a good state, all the keys can be
unsealed for later signing operations. The good state means that
the values represent the expected software runtime of the router,
e.g., identical to the values when the keys are sealed. That is,
the BGP system is not compromised and the security conﬁgu-
rations of TBGP are not maliciously changed. Thus, we have
the assurance that: 1) announced routes to neighbors are iden-
tiﬁed to be used for forwarding packets, which guarantee the
consistency of control and data planes; 2) the route attestation
LI et al.: ENHANCING TRUST OF INTERNET ROUTING WITH LIGHTWEIGHT ROUTE ATTESTATION
699
rules of TBGP are well enforced during the runtime of a BGP
system and are not changed/disabled by its operators. All these
are checked during router bootstrapping (c.f., Section IV-B). To
preserve a good runtime environment, several runtime protec-
tion mechanisms can be used, such as ARM TrustZone, Intel’s
Trusted Execution Technology and AMD’s Paciﬁca technology
Gummadi09, which are out of the scope of this paper.
Signing/Verifying BGP Updates: In TBGP, all outgoing BGP
updates (i.e., the routes that a router propagates to others) need
to be signed by the router, and all incoming BGP updates (i.e.,
the routes that a router receives from others) need to be veriﬁed
by the router before adopting them. The preﬁxes and AS_PATH
speciﬁed by an announcement is signed and veriﬁed by each
BGP speaker. After obtaining the keys and system parameters
of IBS, a BGP speaker A signs an announced route using its keys
associated with its owned preﬁx (if the preﬁx is owned) or its
AS number (if the preﬁx is not owned), and a neighbor speaker
B veriﬁes the received announcement using the corresponding
public key of speaker A (e.g., the ID string corresponding to
the preﬁx keys or AS keys in the signing procedure). Speaker B
can easily determine which string to use to verify the announce-
ment because the preﬁx and AS public keys are denoted in the
BGP update. For example, if speaker B receives a preﬁx an-
nouncement from speaker A, then it uses the AS number ID of
speaker A to verify the signature of the announcement. Thus, the
public key distribution and management problem in PKI-based
BGP schemes is well eliminated in TBGP. If the signature veri-
ﬁcation fails, speaker B drops the announcement. As aforemen-
tioned, a successful signature veriﬁcation by speaker B implies
that the announcement is signed with speaker A’s appropriate
private key within a good BGP runtime system, i.e., the route
attestation rules are correctly enforced by speaker A. To prevent
route replay attacks, speaker A also signs route announcement
with a timestamp.
BGP Attestation Service: The attestation service in TBGP
provides interfaces for verifying and attesting BGP updates by
a BGP speaker and provides the mechanism to verify if route at-
testation rules are enforced by the speaker. Through this, transi-
tive trust relationships can be built between BGP speakers. Basi-
cally, there are three major interfaces for BGP speakers: service
initialization, validation in the BGP ingress ﬁlter (IN ﬁlter), and
validation in the BGP egress ﬁlter (OUT ﬁlter) [17]. We will dis-
cuss route attestations with the attestations service in Section III.
The BGP attestation service initialization is invoked by a
router system during its bootstrap phase after the integrity of
the BGP system, including the BGP software and the route at-
testation rules, is validated by the trusted components on the
platform built upon TPM. This interface requires two parame-
ters: the hash values of BGP routing system and the route at-
testation rules. Note that different routers from different router
vendors have different BGP system releases and thus different
hash values. If these two parameters are not tampered, then the
routing system can be launched successfully. Otherwise, it is
launched without any keys achieved from TPM. After the BGP
system is launched successfully, all these parameters are re-
ported into PCRs of its TPM. After this, the BGP system and
attestation service can use private keys sealed by the TPM. The
procedure is discussed in Section IV-A. If the attestation service
is disabled, the BGP system cannot achieve the private keys and
thus is unable to sign any route update. We will demonstrate this
in Section IV-C.
The IN ﬁlter and OUT ﬁlter interfaces in TBGP are placed in
the same places as those in existing BGP protocol on a router
[1]; that is, they are invoked after receiving BGP updates and
before sending BGP updates, respectively. When a speaker re-
ceives a BGP update, its attestation service veriﬁes and validates
the preﬁx string or AS number in the announcement in the IN
ﬁlter of BGP protocol. If the veriﬁcation fails, the announce-
ment is dropped. If the veriﬁcation succeeds, the attestation ser-
vice will record the route information for later route attestation.4
After the BGP route selection process is complete, the speaker
may announce updated routes to neighbors. In the OUT ﬁlter,
the attestation service is invoked again, which ﬁrst locates the
recorded route information corresponding to routing recompu-
tation and checks whether the announced routes comply with
route attestation rules together with the located information.
The outgoing routes are dropped when they do not comply with
the route attestation rules, e.g., they are tampered by network
operators.
C. Prototype Implementation
We implemented the TBGP in Zebra BGP daemon [32]
with software TPM [5]. We use the IBS implementation in
MIRACL cryptographic library from Shamus Software [33].
Our prototype implements three primitive functions described
above using less than 3000 lines of C codes.
Fig. 4 shows the high level view of the prototype with TPM. If
the BGP process is tampered, it cannot achieve the private keys,
although it still can be booted and executed. This ensures that all
route updates cannot be signed no matter whether they comply
with attestation rules or not. If key unsealing succeeds, the BGP
attestation service obtains private keys and attests route updates
received (sent) from (to) neighbors in the IN (OUT) ﬁlter. The
route updates are also signed and veriﬁed in IN and OUT ﬁlters
if they are successfully attested.
In many existing BGP solutions, data-plane attacks [12] can
be launched by modifying the records in Adj-RIBs-OUT and
hence making the records in Local RIB and Adj-RIBs-OUT in-
consistent. Since the BGP process is attested with TPM and the
consistency between a router’s control-plane and data-plane can
be attested and veriﬁed by its neighbors, any tampered BGP
process whose records in the control- and data-plane are not
consistent cannot announce routes with correct signatures, and
hence the routes announced by them will not be adopted by their
neighbors. Thus, data-plane attacks can be prevented in TBGP.
(Note that TBGP focuses on the prevention of the routing at-
tacks which allow ASes to announce routes not really used by
themselves, e.g., smart interception attacks pointed by Gold-
berg et al. [34].) However, TBGP does not address other attack
strategies proposed in [34] that may violate routing conﬁgura-
tion guidelines [26]. For example, announcing longer paths may
violate valley-free property of interdomain routing and raise
routing instability [35].
4In our prototype, we directly leverage Adj-RIBs-IN to realize the database
since it is tamper-resistant in our prototype.
700
IEEE TRANSACTIONS ON INFORMATION FORENSICS AND SECURITY, VOL. 7, NO. 2, APRIL 2012
(e.g., [20]), we use SSFNet [36], which is an event-driven simu-
lator and provides basic process model of BGP [36]. The exper-
imental performance is seeded into simulations as the parame-
ters. We use four different scales of AS-level topologies with 10,
29, 110, and 208 ASes, respectively (the later three topologies
provided by Premore [36] are generated from real BGP routing
tables and used in most of BGP simulations [20], [37]). In our
simulations, we compare TBGP with different variants of SBGP
schemes, ordinary SBGP, SBGP with cryptographic operation
speedup (S-A) [20], SBGP with sequential aggregate signature
(SAS) [20], and Path Authentication (PATH) [22]. Among many
proposed security-enhanced BGP proposals, we only evaluate
and compare some classical ones, such as the SAS using ag-
gregate signatures, which is the main technique used by Zhao
et al. [38]. The main overhead in S-BGP lies in verifying mul-
tiple signatures for path authentications, which is also one of the
main goals in TBGP, and not addressed in origin authentication
proposed by Aiello et al. [7]. Thus, we did not evaluate these
schemes in this paper. The performance of cryptographic op-
erations in these existing schemes is measured with a standard
Digital Signature Algorithm (DSA) [20].
A. Experimental Data
Firstly, we evaluate the overhead introduced by key unsealing
during BGP bootstrapping. The result shows that TBGP has
about 33% delay in bootstrapping. Since it is only one-time op-
eration, the overhead is acceptable. Furthermore, we evaluate
the performance of 512 bits IBS algorithms in TBGP. The exe-
cution time of signing and verifying operation with IBS is about
4 and 50 ms, respectively. The overall overhead is similar to that
of the RSA and DSA algorithms [33].
The processing overhead in TBGP is introduced by route
attestations including the cryptographic operations. We eval-
uate the processing overhead of TBGP with different number
of announced preﬁxes. Fig. 6 shows the processing overhead
with different BGP sessions. All overhead increases with the
increases of the number of announced preﬁxes. Averagely, the
overall process time in ordinary BGP per route update is 0.16
ms, and the overhead in IN ﬁlter attestations, OUT ﬁlter attes-
tations and both ﬁlter attestations per route update is 2.31, 2.27,
and 2.32 ms, respectively. It is surprising that these different
attestation operations (with different number of announced pre-
ﬁxes) introduce similar overhead. The possible reason is that
route selections and IN and OUT ﬁlter attestations performed
in parallel in both ﬁlter attestations if the number of announced
preﬁxes is more than 1. In a later subsection, we will study
whether the processing overhead impacts the performance of
BGP routing (c.f., Fig. 7).
B. Simulation Results
It is not surprising that TBGP introduces communication
and processing overhead compared to ordinary BGP, as it
consumes CPU resources to perform IBS signing and verifying
operations, which are the major causes inﬂuencing the BGP
convergence performance. To explore these aspects, we sim-
ulate with 512 bits IBS algorithms and model running times
in Section V-A. For simplicity without loss of generality, the
simulated networks have one BGP speaker for each AS and
Fig. 4. Architecture of TBGP.
Fig. 5. AS topology in our experiments. AS 1 announces preﬁxes and AS 2
forward the routes to AS 3.
V. PERFORMANCE EVALUATION
We use both experiments and simulations to evaluate the per-
formance of TBGP. For our experiments, we deploy our TBGP
prototype in ﬁve Linux-2.6.21 machines which have Pentium
4 1.7 GHz CPU and 1 GB memory and form a topology of 3
ASes shown in Fig. 5. ASes 1 and 2 have two eBGP peering
links between R1 and R2 and between R1 and R3, and ASes 2
and 3 have two eBGP peering links between R4 and R5 and be-
tween R2 and R5. R3 and R4 are connected via an iBGP peering
link. We only conﬁgure a different number of preﬁxes in AS 1,
and AS 2 only forwards the learned route to AS 3. We study
the overhead of different operations in TBGP: 1) IN Filter At-
testations: the duration between the time when route updates
are received and the time they are sent out to iBGP neighbors,
during which route updates are only attested in IN ﬁlters; 2) Out
Filter Attestations: the duration between the time when routes
received from iBGP neighbors and the time they are sent out to
eBGP neighbors, which route updates are only attested in OUT
ﬁlters; 3) Both Filter Attestations: the duration between the time
when route updates are received from eBGP neighbors and the
time they are sent out to neighbors, which route updates are at-
tested in both IN and OUT ﬁlters. We evaluate the overhead in
IN ﬁlter attestations in R3 in AS 2, the overhead in OUT ﬁlter
attestations in R4 in AS 2, and the overhead in both ﬁlter attesta-
tions in R2 in AS 3. We also evaluate the route processing time
in ordinary BGP without attestation.
We further simulate TBGP to study its performance in large
scale networks. Similar to most of the previous BGP proposals
LI et al.: ENHANCING TRUST OF INTERNET ROUTING WITH LIGHTWEIGHT ROUTE ATTESTATION
701
Fig. 6. Overhead of different sessions in ordinary BGP and TBGP: no attesta-
tion, IN ﬁlter attestations, OUT ﬁlter attestations, and both ﬁlter attestations.
Fig. 8. TBGP only has 4% increase ratio in convergence time relative to ordi-
nary BGP in the 100 ASes topology. TBGP and PATH have a similar conver-
gence performance. Compared to SBGP, S-A, and SAS, TBGP has 56.5, 1.25,
75 times improvements, respectively.
because only one signing and verifying operation is involved
in a BGP speaker to attest a route in TBGP, while these secure
BGP schemes need several times to verify a route. The over-
head of message signature in TBGP is reduced from
in
SBGP to