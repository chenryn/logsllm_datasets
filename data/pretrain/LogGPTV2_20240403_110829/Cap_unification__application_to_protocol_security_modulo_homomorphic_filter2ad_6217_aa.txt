title:Cap unification: application to protocol security modulo homomorphic
encryption
author:Siva Anantharaman and
Hai Lin and
Christopher Lynch and
Paliath Narendran and
Micha&quot;el Rusinowitch
Cap Uniﬁcation: Application to Protocol Security modulo
Homomorphic Encryption ∗
Siva Anantharaman
LIFO, Université d’Orléans
Orléans, France
PI:EMAIL
Hai Lin
Clarkson University
Potsdam, NY, USA
PI:EMAIL
Christopher Lynch
Clarkson University
Potsdam, NY, USA
PI:EMAIL
Paliath Narendran
University at Albany-SUNY
Albany, NY, USA
PI:EMAIL
ABSTRACT
We address the insecurity problem for cryptographic proto-
cols, for an active intruder and a bounded number of ses-
sions. The protocol steps are modeled as rigid Horn clauses,
and the intruder abilities as an equational theory. The prob-
lem of active intrusion – such as whether a secret term can
be derived, possibly via interaction with the honest partic-
ipants of the protocol – is then formulated as a Cap Uni-
ﬁcation problem. Cap Uniﬁcation is an extension of Equa-
tional Uniﬁcation:
look for a cap to be placed on a given
set of terms, so as to unify it with a given term modulo the
equational theory. We give a decision procedure for Cap
Uniﬁcation, when the intruder capabilities are modeled as
homomorphic encryption theory. Our procedure can be em-
ployed in a simple manner to detect attacks exploiting some
properties of block ciphers.
Keywords: Rewriting, Uniﬁcation, Protocol, Secrecy Analy-
sis.
1.
INTRODUCTION
Many automated reasoning systems have been designed
for representing cryptographic protocols and verifying that
they satisfy security properties such as secrecy and authen-
ticity, or to discover bugs. Such systems are often based
on model-checking, modal logics, equational reasoning, and
resolution theorem-proving (e.g., [20, 3, 13]). Reducing the
security problem to a constraint solving problem in a term
algebra, modulo an equational theory, is among the most
successful approaches: this reduction has proved to be quite
∗
Work Supported by NSF Grants CNS-0831305, CNS-0831209,
and by AVANTSSAR FP7-ICT-2007-1 Project 216471
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS’10 April 13–16, 2010, Beijing, China.
Copyright 2010 ACM 978-1-60558-936-7 ...$10.00.
Michael Rusinowitch
Loria-INRIA Grand Est
Nancy, France
PI:EMAIL
eﬀective on standard benchmarks and has also permitted the
discovery of new ﬂaws in several protocols (see, e.g., [4]).
In particular, it is possible to model encryption and de-
cryption operations by convergent rewrite systems that are
collapsing (right-hand sides are variables), expressing sim-
ply that decryption cancels encryption when provided with
the right key. Then, extensions of narrowing techniques for
semantic uniﬁcation [15] can be applied to solve the con-
straints derived from the cryptographic protocol and the se-
crecy property that one wants to check. Several protocol
decision procedures have been designed for handling more
equational properties of the cryptographic primitives [17, 8,
7] Some works have tried to derive generic decidability re-
sults for some speciﬁc class of intruder theories [11, 5, 6].
These results address theories presented by rewrite systems
where the rhs (right hand side) of every rule is a ground
term, a variable or a subterm of the lhs. Concerning theories
with a homomorphism operator, the only work for active in-
truders is [12], which presents decidability results for a class
of monoidal theories containing exclusive OR, in combina-
tion with the homomorphism axiom. Their approach follows
a classical schema for cryptographic protocol analysis, which
proves ﬁrst a locality result (see, e.g.
[8]). The insecurity
problem is then reduced to solving some linear Diophantine
equations in a suitable algebra. It must be noted that none
of these approaches handle homomorphic encryption over
the pair operator.
In this paper, we present a novel approach that is simple,
in the sense that it is closer to standard uniﬁcation proce-
dures. Standard equational uniﬁcation actually turns out to
be a particular case of Cap Uniﬁcation, which is the basis
for our inference system for active deduction.
The paper is structured as follows: Section 2 presents the
preliminary notions, and in particular the basic Dolev-Yao
rewrite system DY , and a system HE for homomorphic en-
cryption (non-convergent, as it is). The notions of Cap Con-
straints and Cap Uniﬁcation are introduced in Section 3.
In Section 4, we present an inference procedure to decide
uniﬁcation modulo a (homomorphic) theory induced by a
convergent, single rule, subsystem Eh of HE; the procedure
is essentially syntactic, and is simpler than that given in
[19] for Uniﬁcation modulo One-sided Distributivity. The
inference system for active deduction modulo HE is given
in Section 5; the idea is to reduce the problem of solving cap
constraints over HE, via narrowing, to one of solving cap
constraints over the single rule theory Eh, and eventually to
solving an Eh-uniﬁcation problem. The technique employed
is simpler than those used in [5, 6], and we come up with
a procedure for solving cap constraints which is shown to
be sound, terminating and complete for our homomorphic
encryption theory HE. The cap constraints modeling the
protocols are assumed to satisfy some minor restrictive as-
sumptions satisﬁed by all usual protocols.
2. SETTING THE STAGE
As usual, Σ will stand for a ranked signature, and X a
countably inﬁnite set of variables. T = T (Σ,X ) is the alge-
bra of terms over this signature; terms in T will be denoted
as s, t, . . . , and variables as u, v, x, y, z, . . . , all with possible
suﬃxes. If f is a member of Σ with at least one argument,
then f is a function symbol; and if f has no arguments, it is
a constant. We assume the signature to have ﬁnitely many
constants. A rewrite rule is a pair of terms (l, r) such that
l (cid:31) r, for some given reduction ordering 1 (cid:31) on terms; it
will be represented as usual, as l → r. A rewrite system R
is a ﬁnite set of rewrite rules. The notions of reduction and
normalization of a term by R are assumed known, as well
as those of termination and of conﬂuence of the reduction
relation deﬁned by R on terms. R is said to be convergent
iﬀ the reduction relation it deﬁnes on the set of terms is
terminating and conﬂuent.
In this paper, we are concerned with the insecurity prob-
lem of protocols, for instance, the problem where a message
intended as secret is captured or deduced by an intruder.
We model the homomorphic encryption theory as a conver-
gent rewrite system R, that is a constructor system. By
that we mean: the signature Σ is a disjoint union ΣD (cid:116) ΣC ,
the symbols in ΣC are called constructors, those in ΣD are
called deﬁned symbols; the top symbols of all left hand sides
(lhs) of the rules of R are deﬁned symbols, all the other
symbols are constructors. The protocol itself is modeled as
a set of Horn clauses, referred to as protocol rules or protocol
clauses, that we shall formally deﬁne farther down. Proto-
col insecurity is modeled in two diﬀerent ways: passive, or
active, deduction. Passive deduction models the intruder
knowledge evolution without interaction with the protocol
sessions, e.g. via eavesdropping. An inference system, called
saturation of the cap closure, was given in [1] for passive
deduction, and was shown to be complete for Dolev-Yao
theories and a convergent theory of Homomorphic Encryp-
tion (“Encryption distributes over pairs”). Our concern in
this paper is Dolev-Yao plus Homomorphic Encryption in
the case of active intruders. The following Dolev-Yao the-
ory DY , with signature Σ = {π1, π2, p, e, d}, underlies all
known formalisms for passive or active deduction:
1A reduction ordering is a well-founded ordering, stable un-
der contexts and substitutions.
π1(p(x, y)) → x
π2(p(x, y)) → y
d(e(x, y), y) → x
The homomorphic encryption theory that we consider – de-
noted as HE in the sequel – extends DY with the following
rule:
e(p(x, y), z) → p(e(x, z), e(y, z))
In these theories, ‘p’ means pair, ‘e’ is encryption, ‘d’ is
decryption, ‘π1’ (resp.
‘π2’) is the projection onto the left
(resp. right) component of a pair. It is important to note
that our HE diﬀers from the system considered in [1] and
in [2]: the following two rules
e(d(x, y), y) → x, d(p(x, y), z) → p(d(x, z), d(y, z))
are not included in ours. And as it is, our HE is not con-
vergent; but, as we shall be seeing farther down, it suﬃces
to add one ‘meta’-reduction rule to get a convergent system
that is equivalent.
In our approach developed below, the
convergent subsystem of HE consisting of the single rule
e(p(x, y), z) → p(e(x, z), e(y, z)) will be playing a crucial
role; it will be denoted as Eh.
Intruder knowledge evolu-
tion is modeled as forming the cap closure, in the sense of
the following deﬁnition – by instantiating SYM as a suitable
subset of the symbols in Σ – of a ﬁnite set of terms S that
models the ‘current’ intruder knowledge; and adding further
terms to this knowledge, via certain R-narrowing steps on
the terms of this closure:
Definition 1. Let S be a given set of terms, and SYM
a set of function symbols. Then Cap(S, SYM) is the set of
terms deﬁned as follows:
• S ⊆ Cap(S, SYM)
• If ti ∈ Cap(S, SYM), for all 1 ≤ i ≤ n, and f ∈ SYM
is of arity n, then f (t1, t2, . . . , tn) ∈ Cap(S, SYM).
(It is assumed in the deﬁnition above, that if f is π1 or
π2, then its argument t must be a pair.) For modeling ac-
tive intruder deduction, we need to account for the intruder
interactions with the protocol steps. With that purpose, we
ﬁrst model the protocol as a set of protocol rules or protocol
clauses (also called deduction rules in the literature); these
are deﬁned as follows:
Definition 2. A protocol rule is a pair ({t1, . . . , tn}, t)
it will be denoted as
where the ti’s and t are all terms;
{t1, . . . , tn} (cid:73) t.
Semantics: if σ is a substitution such that the terms tiσ, 1 ≤
i ≤ n, are already part of the intruder knowledge, then (s)he
can deduce the term tσ.
If R is a given convergent constructor system, and E the
associated equational theory, a protocol rule {t1, . . . , tn} (cid:73)
t is said to be an R- or E-constructed protocol rule if no
function symbol in the rule is a deﬁned symbol of E.
Protocol rules are used to simulate a protocol step in a
protocol session. We only consider the analysis of one proto-
col session, since the case of several sessions can be reduced
to that of a single session, via standard techniques ([11]).
Thus, every protocol rule is used only once; and when the
variables of a rule are instantiated, their values are propa-
gated to all the other rules; the variables of a protocol rule
are often said to be ‘rigid’ variables.
Our next step will be to model every step of a protocol
session as a Cap Constraint, and propose a technique called
Cap Uniﬁcation, to solve the set of all such constraints.
(Note: Cap constraints have also been called “Deducibility
constraints” in many related works; cf. e.g. [8, 18].)
3. CAP CONSTRAINTS
In this section, R is any given, convergent, rewrite system
over some signature Σ, E the equational theory of R, and
SYM is any given set of symbols from Σ.
Definition 3. A cap constraint is a constraint written
in the form S (cid:46)(SYM,E) t, where S is a set of terms, and t is
a term. It is solvable iﬀ there exists s ∈ Cap(S, SYM), and
a substitution σ s.t. sσ = tσ mod E. We call σ a solution
of S (cid:46)(SYM,E) t.
An E-equation (or just ‘equation’) is, as usual, an E-
equality constraint of the form s =E t, where s and t are
terms; if the theory E is obvious from the context, we simply
write s = t; for ease and uniformity of presentation, we agree
to identify it with the ‘special’ cap constraint s (cid:46)(SYM,E) t,
whose lhs is now the term s (not a set of terms); if we also
agree to set Cap(s, SYM) = {s}, then obviously solving the
special cap constraint reduces to E-unifying s and t.