# Cap Unification: Application to Protocol Security Modulo Homomorphic Encryption

**Authors:**
- Siva Anantharaman, LIFO, Université d’Orléans, Orléans, France
- Hai Lin, Clarkson University, Potsdam, NY, USA
- Christopher Lynch, Clarkson University, Potsdam, NY, USA
- Paliath Narendran, University at Albany-SUNY, Albany, NY, USA
- Michaël Rusinowitch, Loria-INRIA Grand Est, Nancy, France

## Abstract

We address the security challenges in cryptographic protocols, particularly in the presence of an active intruder and a bounded number of sessions. The protocol steps are modeled using rigid Horn clauses, while the intruder's capabilities are represented by an equational theory. The problem of active intrusion—such as whether a secret term can be derived, possibly through interaction with honest participants—is formulated as a Cap Unification problem. Cap Unification extends Equational Unification by seeking a cap to unify a given set of terms with a target term modulo the equational theory. We present a decision procedure for Cap Unification when the intruder's capabilities are modeled as homomorphic encryption. This procedure can be used to detect attacks that exploit properties of block ciphers.

**Keywords:** Rewriting, Unification, Protocol, Secrecy Analysis

## 1. Introduction

Automated reasoning systems have been developed to represent cryptographic protocols and verify their security properties, such as secrecy and authenticity, or to discover vulnerabilities. These systems often use model-checking, modal logics, equational reasoning, and resolution theorem-proving (e.g., [20, 3, 13]). Reducing the security problem to a constraint-solving problem in a term algebra, modulo an equational theory, has proven effective. This approach has been successful on standard benchmarks and has led to the discovery of new flaws in several protocols (e.g., [4]).

Encryption and decryption operations can be modeled using convergent rewrite systems that are collapsing (right-hand sides are variables), indicating that decryption cancels encryption with the correct key. Extensions of narrowing techniques for semantic unification [15] can then be applied to solve constraints derived from the cryptographic protocol and the desired secrecy property. Several decision procedures have been designed to handle more equational properties of cryptographic primitives [17, 8, 7]. Some works have attempted to derive generic decidability results for specific classes of intruder theories [11, 5, 6], addressing theories presented by rewrite systems where the right-hand side of every rule is a ground term, a variable, or a subterm of the left-hand side.

For theories with a homomorphism operator, the only work for active intruders is [12], which presents decidability results for a class of monoidal theories containing exclusive OR, combined with the homomorphism axiom. Their approach follows a classical schema for cryptographic protocol analysis, proving a locality result first (e.g., [8]), and then reducing the insecurity problem to solving linear Diophantine equations in a suitable algebra. However, none of these approaches handle homomorphic encryption over the pair operator.

In this paper, we introduce a novel, simple approach that is closer to standard unification procedures. Standard equational unification is a special case of Cap Unification, which forms the basis of our inference system for active deduction.

The paper is organized as follows:
- **Section 2** introduces preliminary concepts, including the basic Dolev-Yao rewrite system and a system for homomorphic encryption.
- **Section 3** defines Cap Constraints and Cap Unification.
- **Section 4** presents an inference procedure to decide unification modulo a (homomorphic) theory induced by a convergent, single-rule subsystem of HE.
- **Section 5** provides the inference system for active deduction modulo HE, reducing the problem of solving cap constraints over HE to one of solving cap constraints over the single-rule theory and eventually to solving an Eh-unification problem.

## 2. Setting the Stage

We use Σ to denote a ranked signature and X to denote a countably infinite set of variables. T = T(Σ, X) represents the algebra of terms over this signature. Terms in T are denoted as s, t, etc., and variables as u, v, x, y, z, etc. If f is a member of Σ with at least one argument, it is a function symbol; if f has no arguments, it is a constant. We assume the signature has finitely many constants. A rewrite rule is a pair of terms (l, r) such that l ≺ r for some given reduction ordering ≺ on terms, and is represented as l → r. A rewrite system R is a finite set of rewrite rules. The notions of reduction and normalization of a term by R, as well as termination and confluence of the reduction relation defined by R on terms, are assumed known. R is said to be convergent if the reduction relation it defines on the set of terms is terminating and confluent.

This paper addresses the insecurity problem in protocols, such as the capture or deduction of a secret message by an intruder. We model the homomorphic encryption theory as a convergent rewrite system R, which is a constructor system. The signature Σ is a disjoint union ΣD ∪ ΣC, where symbols in ΣC are constructors and those in ΣD are defined symbols. The top symbols of all left-hand sides (lhs) of the rules of R are defined symbols, and all other symbols are constructors. The protocol itself is modeled as a set of Horn clauses, referred to as protocol rules or protocol clauses.

Protocol insecurity is modeled in two ways: passive or active deduction. Passive deduction models the intruder's knowledge evolution without interaction with the protocol sessions, e.g., via eavesdropping. An inference system, called saturation of the cap closure, was given in [1] for passive deduction and was shown to be complete for Dolev-Yao theories and a convergent theory of homomorphic encryption ("Encryption distributes over pairs"). Our focus here is on Dolev-Yao plus homomorphic encryption in the case of active intruders.

The following Dolev-Yao theory DY, with signature Σ = {π1, π2, p, e, d}, underlies all known formalisms for passive or active deduction:

\[
\begin{aligned}
&\pi_1(p(x, y)) \rightarrow x \\
&\pi_2(p(x, y)) \rightarrow y \\
&d(e(x, y), y) \rightarrow x
\end{aligned}
\]

The homomorphic encryption theory we consider, denoted as HE, extends DY with the following rule:

\[
e(p(x, y), z) \rightarrow p(e(x, z), e(y, z))
\]

In these theories, 'p' means pair, 'e' is encryption, 'd' is decryption, 'π1' (resp. 'π2') is the projection onto the left (resp. right) component of a pair. Note that our HE differs from the systems considered in [1] and [2], as the following rules are not included:

\[
\begin{aligned}
&e(d(x, y), y) \rightarrow x \\
&d(p(x, y), z) \rightarrow p(d(x, z), d(y, z))
\end{aligned}
\]

As it stands, our HE is not convergent, but adding one 'meta'-reduction rule makes it convergent and equivalent. In our approach, the convergent subsystem of HE consisting of the single rule \( e(p(x, y), z) \rightarrow p(e(x, z), e(y, z)) \) will play a crucial role and will be denoted as Eh.

Intruder knowledge evolution is modeled by forming the cap closure of a finite set of terms S that models the current intruder knowledge, and adding further terms to this knowledge via certain R-narrowing steps on the terms of this closure.

**Definition 1.** Let S be a given set of terms, and SYM a set of function symbols. Then Cap(S, SYM) is the set of terms defined as follows:
- S ⊆ Cap(S, SYM)
- If \( t_i \in \text{Cap}(S, \text{SYM}) \) for all \( 1 \leq i \leq n \), and \( f \in \text{SYM} \) is of arity n, then \( f(t_1, t_2, \ldots, t_n) \in \text{Cap}(S, \text{SYM}) \).

For modeling active intruder deduction, we need to account for the intruder's interactions with the protocol steps. We first model the protocol as a set of protocol rules or protocol clauses, defined as follows:

**Definition 2.** A protocol rule is a pair \(\{t_1, \ldots, t_n\} \vdash t\), where the \( t_i \)'s and \( t \) are all terms. Semantics: if σ is a substitution such that the terms \( t_i\sigma \) for \( 1 \leq i \leq n \) are already part of the intruder knowledge, then (s)he can deduce the term \( t\sigma \).

If R is a given convergent constructor system and E the associated equational theory, a protocol rule \(\{t_1, \ldots, t_n\} \vdash t\) is said to be an R- or E-constructed protocol rule if no function symbol in the rule is a defined symbol of E.

Protocol rules are used to simulate a protocol step in a protocol session. We only consider the analysis of one protocol session, as the case of multiple sessions can be reduced to a single session via standard techniques ([11]). Thus, every protocol rule is used only once, and when the variables of a rule are instantiated, their values are propagated to all other rules; the variables of a protocol rule are often called 'rigid' variables.

Our next step is to model each step of a protocol session as a Cap Constraint and propose a technique called Cap Unification to solve the set of all such constraints. (Note: Cap constraints are also called "Deducibility constraints" in many related works; cf. e.g., [8, 18].)

## 3. Cap Constraints

In this section, R is any given, convergent, rewrite system over some signature Σ, E is the equational theory of R, and SYM is any given set of symbols from Σ.

**Definition 3.** A cap constraint is a constraint written in the form \( S \unify{SYM, E} t \), where S is a set of terms, and t is a term. It is solvable if there exists \( s \in \text{Cap}(S, \text{SYM}) \) and a substitution σ such that \( s\sigma = t\sigma \mod E \). We call σ a solution of \( S \unify{SYM, E} t \).

An E-equation (or just 'equation') is, as usual, an E-equality constraint of the form \( s =_E t \), where s and t are terms. If the theory E is obvious from the context, we simply write \( s = t \). For ease and uniformity of presentation, we agree to identify it with the 'special' cap constraint \( s \unify{SYM, E} t \), whose lhs is now the term s (not a set of terms). If we also agree to set \( \text{Cap}(s, \text{SYM}) = \{s\} \), then solving the special cap constraint reduces to E-unifying s and t.