[toc]
## 前言
JavaScript 是一门非常灵活的语言，与 PHP 相比起来更加灵活。除了传统的 SQL
注入、代码执行等注入型漏洞外，也会有一些独有的安全问题，比如今天要说这个原型链污染。本篇文章就让我们来学习一下 NodeJS 原型链与原型链污染的原理。
## Javascript 原型链与继承
在 JavaScript 中，没有引入类这个概念，通常需要定义一个构造函数然后通过 `new` 操作符调用该函数来创建实例。而 JavaScript
中的继承关系则是靠一种叫做 “原型链” 的模式来实现的。
当我们谈到继承时，JavaScript 只有一种结构：对象。每个函数对象有 `prototype`
属性，而实例对象没有，但所有的实例对象（函数，数组，对象）都会初始化一个私有属性 `__proto__` 指向它的 **构造函数的原型对象**
`prototype`。该原型对象也有一个自己的原型对象 `__proto__`，层层向上直到一个对象的原型对象为 `null`。根据定义，`null`
没有原型，并作为这个原型链中的最后一个环节。下面我们把构造函数、原型对象、以及实例对象的关系理清如下：
  * 每个构造函数都有一个 `prototype` 原型对象
  * 每个实例对象都有一个 `__proto__` 属性，并且指向它的构造函数的原型对象 `prototype`
  * 对象里的 `constructor` 属性指向其构造函数本身
从图上可以看出， `a.__proto__` 是与 `A.prototype` 等价的，而 `A.prototype.__proto__` 是指向
`Object.prototype` 的，再往下 `Object.prototype.__proto__` 指向 null，这就是 JavaScript
中的原型继承链，所有类对象在实例化的时候将会拥有 prototype 中的属性和方法，这个特性被用来实现 JavaScript 中的继承机制。
我们可以通过以下方式访问得到某一实例对象的原型对象：
    objectname.[[prototype]]
    objectname.prototype
    objectname["__proto__"]
    objectname.__proto__
    objectname.constructor.prototype
JavaScript 对象是动态的属性“包”（指其自己的属性）。JavaScript
对象有一个指向一个原型对象的链。当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依次层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾。
不同对象所生成的原型链如下（部分）：
    var o = {a: 1};
    // o对象直接继承于 Object.prototype
    // 原型链: o ---> Object.prototype ---> null
    var a = ["yo", "whadup", "?"];
    // 数组都继承于 Array.prototype
    // 原型链: a ---> Array.prototype ---> Object.prototype ---> null
    function f(){
      return 2;
    }
    // 函数都继承于 Function.prototype
    // 原型链: f ---> Function.prototype ---> Object.prototype ---> null
这里演示当尝试访问属性时会发生什么：
    // 让我们从一个函数里创建一个对象o, 它自身拥有属性a和b的:
    let f = function () {
       this.a = 1;
       this.b = 2;
    }
    /* 这么写也一样
    function f() {
      this.a = 1;
      this.b = 2;
    }
    */
    let o = new f(); // {a: 1, b: 2}
    // 在 f 函数的原型对象上定义属性
    f.prototype.b = 3;
    f.prototype.c = 4;
    // 不要在 f 函数的原型上直接定义 f.prototype = {b:3,c:4};, 这样会直接打破原型链
    // o.[[Prototype]] 有属性 b 和 c
    //  (其实就是 o.__proto__ 或者 o.constructor.prototype)
    // o.[[Prototype]].[[Prototype]] 是 Object.prototype.
    // 最后o.[[Prototype]].[[Prototype]].[[Prototype]]是null
    // 这就是原型链的末尾，即 null，
    // 根据定义，null 就是没有 [[Prototype]]。
    // 综上，整个原型链如下:
    // {a:1, b:2} ---> {b:3, c:4} ---> Object.prototype---> null
    console.log(o.a); // 输出 1
    // a是o的自身属性吗？是的，该属性的值为 1
    console.log(o.b); // 输出 2
    // b是o的自身属性吗？是的，该属性的值为 2
    // 原型上也有一个'b'属性，但是它不会被访问到。
    // 这种情况被称为"属性遮蔽 (property shadowing)"
    console.log(o.c); // 输出 4
    // c是o的自身属性吗？不是，那看看它的原型上有没有
    // c是o.[[Prototype]]的属性吗？是的，该属性的值为 4
    console.log(o.d); // 输出 undefined
    // d 是 o 的自身属性吗？不是，那看看它的原型上有没有
    // d 是 o.[[Prototype]] 的属性吗？不是，那看看它的原型上有没有
    // o.[[Prototype]].[[Prototype]] 为 null，停止搜索
    // 找不到 d 属性，返回 undefined
JavaScript 并没有其他基于类的语言所定义的 “方法”。在 JavaScript 里，任何 **函数**
都可以添加到对象上作为对象的属性。函数的继承与其他的属性继承没有差别，包括上面的 “属性遮蔽”（这种情况相当于其他语言的方法重写）。
接下来，我们仔细分析一下在下面这些应用场景中， JavaScript 在背后做了哪些事情。
为了最佳的学习体验，我们强烈建议阁下打开浏览器的控制台，进入“console”选项卡，然后运行代码。
    function doSomething(){}
    console.log(doSomething.prototype);
    // 和声明函数的方式无关，
    // JavaScript 中的函数永远有一个默认原型属性。
    var doSomething = function(){};
    console.log(doSomething.prototype);
正如之前提到的，在 JavaScript 中，函数（function）是允许拥有属性的。所有的函数会有一个特别的属性 —— `prototype`
。在控制台显示的JavaScript代码块中，我们可以看到 doSomething 函数的一个默认属性 prototype：
控制台中主要的显示应该类似如下的结果：
    {
        constructor: ƒ doSomething(),
        __proto__: {
            constructor: ƒ Object(),
            hasOwnProperty: ƒ hasOwnProperty(),
            isPrototypeOf: ƒ isPrototypeOf(),
            propertyIsEnumerable: ƒ propertyIsEnumerable(),
            toLocaleString: ƒ toLocaleString(),
            toString: ƒ toString(),
            valueOf: ƒ valueOf()
        }
    }
我们可以给 doSomething 函数的原型对象添加新属性，如下：
    function doSomething(){}
    doSomething.prototype.foo = "bar";
    console.log(doSomething.prototype);
可以看到运行后的结果如下：
控制台中主要的显示应该类似如下的结果：
    {
        foo: "bar",
        constructor: ƒ doSomething(),
        __proto__: {
            constructor: ƒ Object(),
            hasOwnProperty: ƒ hasOwnProperty(),
            isPrototypeOf: ƒ isPrototypeOf(),
            propertyIsEnumerable: ƒ propertyIsEnumerable(),
            toLocaleString: ƒ toLocaleString(),
            toString: ƒ toString(),
            valueOf: ƒ valueOf()
        }
    }
现在我们可以通过 new 操作符来创建基于这个原型对象的 doSomething 实例。使用 new 操作符，只需在调用 doSomething
函数语句之前添加new。这样，便可以获得这个函数的一个实例对象，一些属性就可以添加到该原型对象中。
请尝试运行以下代码：
    function doSomething(){}
    doSomething.prototype.foo = "bar"; // add a property onto the prototype
    var doSomeInstancing = new doSomething();
    doSomeInstancing.prop = "some value"; // add a property onto the object
    console.log(doSomeInstancing);
可以看到运行后的结果如下：
控制台中主要的显示应该类似如下的结果：
    {
        prop: "some value",
        __proto__: {
            foo: "bar",
            constructor: ƒ doSomething(),
            __proto__: {
                constructor: ƒ Object(),
                hasOwnProperty: ƒ hasOwnProperty(),
                isPrototypeOf: ƒ isPrototypeOf(),
                propertyIsEnumerable: ƒ propertyIsEnumerable(),
                toLocaleString: ƒ toLocaleString(),
                toString: ƒ toString(),
                valueOf: ƒ valueOf()
            }
        }
    }
如上所示，doSomeInstancing 中的 `__proto__` 是 `doSomething.prototype` 。但这是做什么的呢？当你访问
doSomeInstancing 中的一个属性时，浏览器首先会查看 doSomeInstancing 中是否存在这个属性。
如果 doSomeInstancing 不包含属性信息，那么浏览器会在 doSomeInstancing 的 `__proto__` 中进行查找（同
`doSomething.prototype`）。如属性在 doSomeInstancing 的 `__proto__` 中查找到，则使用
doSomeInstancing 中 `__proto__` 的属性。
否则，如果 doSomeInstancing 中 `__proto__` 不具有该属性，则检查 doSomeInstancing 的 `__proto__`
的 `__proto__` 是否具有该属性，也就是通过 `doSomething.prototype` 的 `__proto__` 即
`Object.prototype` 来查找该属性。
如果属性不存在 doSomeInstancing 的 `__proto__` 的 `__proto__` 中， 那么就会在doSomeInstancing
的 `__proto__` 的 `__proto__` 的 `__proto__` 中查找。然而，这里存在个问题：doSomeInstancing 的
`__proto__` 的 `__proto__` 的 `__proto__` 其实不存在。因此，只有这样，在 `__proto__`
的整个原型链被查看之后，这里没有更多的 `__proto__` ， 浏览器断言该属性不存在，并给出属性值为 `undefined` 的结论。
## Javascript 原型链污染漏洞原理
我们来看看下面这个语句：
    object[a][b] = value
如果我们可以控制 a、b、value 的值，将 a 设置为`__proto__`，那么我们就可以给 object 对象的原型设置一个 b 属性，值为
value。这样所有继承 object 对象原型的实例对象就会在本身不拥有 b 属性的情况下，都会拥有b属性，且值为value。
来看一个简单的例子：
    object1 = {"a":1, "b":2};
    object1.__proto__.foo = "Hello World";
    console.log(object1.foo);
    object2 = {"c":1, "d":2};
    console.log(object2.foo);
最终会输出两个 Hello World。为什么 object2 在没有设置 foo 属性的情况下，也会输出 Hello World
呢？就是因为在第二条语句中，我们对 object1 的原型对象设置了一个 foo 属性，而 object2 和 object1 一样，都是继承了
Object.prototype。在获取 object2.foo 时，由于 object2 本身不存在 foo 属性，就会往父类
Object.prototype
中去寻找。这就造成了一个原型链污染，所以原型链污染简单来说就是如果能够控制并修改一个对象的原型，就可以影响到所有和这个对象同一个原型的对象。
## Merge 类操作导致原型链污染
Merge 类操作是最常见可能控制键名的操作，也最能被原型链攻击。
给出一个例子：
    function merge(target, source) {
        for (let key in source) {
            if (key in source && key in target) {
                merge(target[key], source[key])
            } else {
                target[key] = source[key]
            }
        }
    }
    let object1 = {}
    let object2 = JSON.parse('{"a": 1, "__proto__": {"b": 2}}')
    merge(object1, object2)
    console.log(object1.a, object1.b)
    object3 = {}
    console.log(object3.b)
最终输出的结果为：
    1 2
    2
可见 object3 的 b 是从原型中获取到的，说明 Object 已经被污染了。这是因为，在 JSON 解析的情况下，`__proto__`
会被认为是一个真正的 “键名”，而不代表“原型”，所以在遍历 object2 的时候会存在这个键，所以 Object 理所应当的便被污染了。
下面分析一下 Merge() 为什么不安全：
  * 这个函数对 `source` 对象中的所有属性进行迭代（因为对象 `source` 在键值对相同的情况下拥有更高的优先级）
  * 如果属性同时存在于第一个和第二个参数中，且他们都是 `Object`，它就会递归地合并这个属性。
  * 现在我们如果控制 `source[key]` 的值，使其值变成 `__proto__`，且我们能控制 `source` 中 `__proto__` 属性的值，在递归的时候，`target[key]` 在某个特定的时候就会指向对象 `target` 的 `prototype`，我们就能成功地添加一个新的属性到该对象的原型链中了。
这就是最典型的一个原型链污染的例子，下面我们看几道 CTF 中原型链污染的例题。
### [GYCTF2020]Ez_Express
进入题目，一个登录框：
下载 `www.zip` 得到源码，然后对源码进行审计，`routes` 路径下有个 index.js：
    var express = require('express');
    var router = express.Router();
    const isObject = obj => obj && obj.constructor && obj.constructor === Object;
    const merge = (a, b) => {    // 发现 merge 危险操作
      for (var attr in b) {
        if (isObject(a[attr]) && isObject(b[attr])) {
          merge(a[attr], b[attr]);
        } else {
          a[attr] = b[attr];
        }
      }
      return a
    }
    const clone = (a) => {
      return merge({}, a);
    }
    function safeKeyword(keyword) {
      if(keyword.match(/(admin)/is)) {
          return keyword
      }
      return undefined
    }
    router.get('/', function (req, res) {
      if(!req.session.user){
        res.redirect('/login');
      }
      res.outputFunctionName=undefined;
      res.render('index',data={'user':req.session.user.user});
    });
    router.get('/login', function (req, res) {
      res.render('login');
    });
    router.post('/login', function (req, res) {
      if(req.body.Submit=="register"){
       if(safeKeyword(req.body.userid)){
        res.end("") 
       }
        req.session.user={
          'user':req.body.userid.toUpperCase(),    // 变成大写
          'passwd': req.body.pwd,
          'isLogin':false
        }
        res.redirect('/'); 
      }
      else if(req.body.Submit=="login"){
        if(!req.session.user){res.end("")}
        if(req.session.user.user==req.body.userid&&req.body.pwd==req.session.user.passwd){
          req.session.user.isLogin=true;
        }
        else{
          res.end("")
        }
      }
      res.redirect('/');
    });
    router.post('/action', function (req, res) {    // /action 路由只能 admin 用户访问
      if(req.session.user.user!="ADMIN"){res.end("")} 
      req.session.user.data = clone(req.body);    // 使用了之前定义的 merge 危险操作
      res.end("");  
    });
    router.get('/info', function (req, res) {
      res.render('index',data={'user':res.outputFunctionName});