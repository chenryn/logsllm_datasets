title:WebShield: Enabling Various Web Defense Techniques without Client
Side Modifications
author:Zhichun Li and
Yi Tang and
Yinzhi Cao and
Vaibhav Rastogi and
Yan Chen and
Bin Liu and
Clint Sbisa
WebShield: Enabling Various Web Defense Techniques without Client Side
Modiﬁcations
Zhichun Li§ Tang Yi† Yinzhi Cao‡ Vaibhav Rastogi‡ Yan Chen‡ Bin Liu† Clint Sbisa‡
§NEC Laboratories America
†Tsinghua University, China
§PI:EMAIL †PI:EMAIL
†PI:EMAIL
‡PI:EMAIL
‡{yinzhicao2013,vrastogi,c-sbisa}@u.northwestern.edu
‡Northwestern University
Abstract
Today, web attacks are increasing in frequency, sever-
ity and sophistication. Existing solutions are either host-
based which suffer deployment problems or middlebox ap-
proaches that can only accommodate certain security pro-
tection mechanisms with limited protection. In this paper,
we propose four design principles for general middlebox
frameworks of web protection, and apply these principles to
design WebShield, which can enable various host-based se-
curity mechanisms. In particular, we run all the JavaScript
from remote web servers only at shadow browser instances
inside the middlebox, and only run our trusted JavaScript
rendering agent at client browsers. The trusted rendering
agent turns browsers into a thin web terminal by recon-
structing the encoded DOM of a webpage.
We implement a prototype of WebShield. Evaluation
demonstrates that a general JavaScript rendering agent
can render webpages precisely and be just slightly slower
than direct access. We further demonstrate that our design
can work well with interactive web applications such as
JavaScript games. WebShield can detect attacks deeply em-
bedded in dynamic HTML pages including the ones in com-
plex Web 2.0 applications, and can also detect both known
and unknown vulnerabilities. We further show that Web-
Shield is scalable for deployment.
anisms have been proposed [12, 14, 16, 17, 19, 26, 30, 34,
36]. For most of them, enhanced browsers, virtual machines
(VM) or other defending programs need to be deployed on
the client side. However, users are slow in adopting new
technologies. Many users do not have any motivation to
switch to new software, and are afraid of potential prob-
lems caused by new software. Therefore, almost all major
attacks such as worms and botnets successfully exploit ex-
isting vulnerabilities after the patches have been released
for months or even years. Moreover, the host environments
on the clients are inherently heterogeneous and fragile. It
is difﬁcult to ensure those defense mechanisms do indeed
work in such environments without extensive testing and
high maintenance costs, which will further slow down the
deployment. Even though users may initially agree to use
new software, it is still difﬁcult to persuade them to keep
updating, especially if they have to restart their machines or
browsers.
Researchers have realized the limitations of client-side
deployment and proposed the use of middlebox-based ap-
proaches. In Table 1, we list the beneﬁts of deploying secu-
rity protection at a middlebox instead of at the client side.
However, existing work [23, 31] mainly focuses on the de-
sign of special purpose middleboxes for very speciﬁc secu-
rity protection mechanisms rather than a general framework
encompassing various mechanisms.
1
Introduction
1.1 Motivation
Today, the web has become a primary attack target due to
its popularity. The complexity of web systems further cre-
ates a lot of different kinds of vulnerabilities and attacks,
such as drive-by-downloads, cross site scripting (XSS),
cross origin JavaScript capability leaks, cross site request
forgery, etc. As a result, many web attack defense mech-
the HTML/JavaScript
Rewriting is one such mechanism. The seminal work
takes advantage of a lightweight
BrowserShield [31]
middlebox to prevent
the exploitation of browser vul-
nerabilities. Although rewriting adds special policies
at
it cannot enable detec-
tion/protection approaches that require internal states of
the browser or underlying OS. The other middlebox work
SpyProxy [23] proposes an execution-based approach.
It
renders and examines the active web content before the
content reaches an user’s browser. One major limitation,
as admitted in their paper, is that the approach cannot cope
with the non-determinism of web content and user inputs.
level,
Client
Middlebox
heterogeneous & co-exist with other software
high maintenance overhead
user voluntary update
clean installation
centralized control
easy update and VM management
Table 1. Comparison between the client(cid:173)side deployment and the middlebox(cid:173)based deployment
Fundamentally, if a JavaScript program P in the webpage
gets executed twice (once at the middlebox and the other at
the client side), it is impossible to ensure the two executions
will be exactly the same; thus, the security check can be
bypassed. Many reasons can lead to different outcomes,
such as randomness, and different parameters such as the
current time or the number of CPU clock ticks. It is easy
for attackers to design a JavaScript attack which behaves
normally on SpyProxy and still attacks the client browser,
as we show in Section 2.1.
1.2 Proposed Solution and Contributions
In this paper, we aim to design a general middlebox
framework that can enable different security protection
mechanisms. Our ﬁrst contribution is to propose the fol-
lowing four design principles and, based on those, to design
WebShield, a general middlebox framework.
Principle I is that a general framework should enable var-
ious protection mechanisms to protect clients from as many
attacks as possible.
Principle II is that we should avoid deploying any addi-
tional programs on clients.
Principle III is that we should not allow any untrusted
script execution at the client side without proper contain-
ment. In general, all scripts from web servers are treated
as untrusted, since even well-known websites may have
compromised webpages [8]. Moreover, JavaScript is very
powerful for launching attacks. For instance, malicious
JavaScript can employ heap-spraying [30] to easily exploit
the browser vulnerability.
Principle IV is that the user’s experience should not be
sacriﬁced, i.e., users should notice little change while bene-
ﬁting from the middlebox approach.
We believe a general middlebox framework needs to
consider all the four principles. Examining the exist-
ing middlebox design, BrowserShield violates principle I
whereas SpyProxy does not abide by principle III, which
limits the applicability of other security protection mecha-
nisms.
In this paper, we propose WebShield, a general se-
cure proxy for enabling different security protection mech-
anisms. Based on the four principles above, we make
two design choices. (i) We take a conservative approach.
We prohibit untrusted scripts from executing on the client,
Attacks
Defense Schemes
Drive-by-download
Cross Site Scripting
Nozzle [30], HoneyMon-
key [36], Tahoma [16] and
OP Browser [17]
DSI [26] and Javascript
Taint [34]
Cross Site Request Forgery
Cross-Origin Javascript Ca-
pability Leaks
[14]
[12]
Table 2. Examples of web defense ap(cid:173)
proaches that can be deployed with WebShield.
which is more conservative than principle III. Disallowing
JavaScript execution of untrusted scripts greatly limits what
the attackers can do at the client side, even if they have by-
passed the detection on the middlebox. (ii) We would like
to leverage the client side browser as little as possible (i.e.,
a thin browser) because the complexity of browsers makes
them more vulnerable. The idea is similar to thin clients vs.
fat clients. At the client side, we would like to convert the
full-featured fat web browsers to web terminals, which only
handle input and output, and move the real browser logic
into the middlebox.
Table 2 gives a list of some browser security mechanisms
that require client-side modiﬁcations. With WebShield, we
can deploy these approaches at the middlebox (proxy) in-
stead and achieve similar protection. To demonstrate our
design in this paper, we mainly focus on detecting drive-by-
download attacks.
In particular, we make the following additional contribu-
tions.
• We propose to run all JavaScript from remote web
servers only at shadow browser instances inside the mid-
dlebox, and only run our trusted JavaScript rendering
agent at client browsers. The trusted rendering agent
turns browsers into a thin web terminal by reconstruct-
ing the encoded DOM of a webpage. Evaluation demon-
strates that a general JavaScript rendering agent can ren-
der webpages precisely and be just slightly slower than
direct access. We further demonstrate that our design
can work well with interactive web applications such as
JavaScript games.
• We design an object pairing mechanism that strictly
masks the URI requests introduced by the middlebox,
which guarantees the correctness of web application
logic. Existing works such as SpyProxy break the ap-
plication logic in some cases (see Section 3.3).
We implement a prototype of WebShield and demon-
strate that
this architecture can incorporate different
drive-by-download detection engines easily. Evaluation
results suggest
that WebShield with drive-by-download
detection add-ons can accurately detect and ﬁlter drive-
by-downloads, and the user-perceived slowdown due to
WebShield is quite low. For the incremental rendering
version on Chrome, the median increase of the rendering
starting delay is 134 milliseconds and the median increase
to the page load time is only 531 milliseconds (25%
increase).
These performance are also comparable to
SpyProxy and BrowserShield. In the scalability evaluation,
we show that a single machine with 16 GB of memory can
support 70 active users. With the same machine, if we use
lightweight SELinux-based sandboxes, the creation speed
is about 28 sandboxes per second. The results show that,
with moderate resources, the administrators of an enterprise
can feasibly deploy WebShield to prevent web attacks.
2 Overview
2.1 Comparison with Existing Middlebox Ap(cid:173)
proaches
Both SpyProxy and BrowerShield mainly target
the
drive-by-download attacks which compromise the host ma-
chines through browser vulnerabilities. With proper pol-
icy engines and/or behavior engines, WebShield can de-
tect drive-by-download attacks as well, including the cases
that cannot be detected by SpyProxy and BrowserShield,
as shown in the example in Figure 1. When an attack tar-
gets an unknown vulnerability, vulnerability details are not
available, so the policy-based approaches, such as Browser-
Shield, cannot be applied. An attack can also employ user
events to bypass the detection of SpyProxy, since it only
checks the initial rendering process. To trigger the attack,
the code can require certain user input patterns, which is
hard to predict beforehand, as shown in Figure 1.
Furthermore, WebShield aims to provide a general
framework for deploying host-based defense schemes (ex-
amples shown in Table 2) without requiring browser/client
modiﬁcations. Some defense mechanisms such as those
for cross site scripting or cross site request forgery may
require both client and server modiﬁcations. WebShield
at least help eliminate the needs for direct client browser
modiﬁcations, which we argue is hard to deploy.
var attackcalled=false;
function attackX() {
// exploit an unknown vulnerability,
//so BrowserShield cannot be applied
}
function loadAttack() {
var el=document.getElementById(Evil);
//use user events to bypass SpyProxy
el.addEventListener(mouseover,
checkMouse,false);
}
function checkMouse() {
if (not attackcalled) {
attackcalled=true;
window.setTimeout(attackX,0);
}
}
Figure 1. The attack code snippet that can cir(cid:173)
cumvent both SpyProxy and BrowserShield.
2.2 Problem Deﬁnition
The research problem we target is how to avoid client-
slide deployment while providing web security protection
from a middlebox. The high-level idea is to reduce the
browser to a web terminal, and to let most browser tasks ex-
ecute on a secure proxy (middlebox) so that we can deploy
security protection mechanisms at the proxy. This design
also handles non-determinism and user-input triggered at-
tacks. The key challenge is to maintain good performance
and usability with this design, so that users will not notice
any major difference while achieving high security protec-
tion.
2.3 Threat Model and Assumptions
Most web attacks are from malicious web content,
mainly malicious JavaScript, in webpages.
In our threat
model, we assume any webpage going through the proxy
is potentially malicious. Also, system administrators can
deﬁne a whitelist of trusted webpages and a blacklist
of webpages to block. We assume that the remaining
webpages contain potentially malicious content, so we will
apply WebShield to them.
WebShield is mainly designed to protect web users in
enterprise networks, such as networks in companies, gov-
ernment agencies, schools, etc. We assume the round trip
time (RTT) between any web user and the proxy is small.
We verify the RTT in the campus network of Northwestern
university. All RTTs of the hosts to our proxy server are
within 2ms. We also assume that web users and the Web-
HTML 
Parser
Java-
script 
Engine
CSS 
Parser
Plugins
DOM API
Render Engine
User Interface (UI)
Figure 2. The abstract browser model.
R
e
n
d
e
r
I
n
g
 E
n
g
i
n
e
D
O
M
A
P
I
Our 
JavaScript 
render agent
Our Proxy 
Attack 
Side 
component
Filtering
D
O
M
A
P
I
HTML 
Parser
JavaScript 
Core
CSS Parser
Plugins
Figure 3. Illustration of the basic idea.
Shield proxy are connected to LAN and WLAN networks,
so that the bandwidth to the proxy server is not a bottleneck.
Furthermore, it is assumed that the network administra-
tor can shut down any malicious web user once detected.
Finally, we assume that most web users are benign. In other
words, we do not consider the possibility that a large num-
ber of web users will launch a DoS attack against the proxy.
To demonstrate that security protection mechanisms can
be easily deployed with WebShield, we target to detect
drive-by-download attacks as an example. In the paper we
will show how both a behavior-based detection engine and
a vulnerability ﬁlter-based detection engine can be easily
incorporated into WebShield as add-ons.
2.4 Browser Model
In Figure 2, we show an abstract model of a browser.
A browser has an HTML parser, a JavaScript engine, and
a CSS parser. A browser may have one or more plug-
ins. When the browser receives an HTML page,
the
HTML parser will parse the page and identify the JavaScript
code in  tags. The identiﬁed JavaScript will be
sent to the JavaScript engine. Through innerHTML or
document.write, the JavaScript engine can also call
the HTML parser. CSS content is identiﬁed by the HTML
parser and is sent to the CSS parser. Similarly, JavaScript
also has APIs to add CSS rules. The HTML parser,
JavaScript engine and CSS parser call the DOM APIs to
update the DOM data structures and render the webpage on
the UI. According to the standardization organization W3C,
“The Document Object Model is a platform- and language-
neutral interface that will allow programs and scripts to dy-
namically access and update the content, structure and style
of documents.” [11]
We take a generalized DOM deﬁnition. We consider all
the APIs with UI effects as belonging to the DOM. There-
fore, under our deﬁnition, we consider the Window object
of JavaScript, which represents the browser window, also
as a part of the DOM. In a real browser, some non-standard
APIs between the HTML parser (or the CSS parser) and
the DOM data structures may be provided for optimization
purposes, but they can be substituted by W3C standardized
APIs as well. In other words, we can use W3C DOM APIs
to fully reconstruct the DOM data structures, and thus to
fully reconstruct a webpage.
2.5 Basic Scheme
Given the four principles listed in Section 1, we explore
the design space of middleboxes. One possible solution is
to work at the graphic rendering layer as in the case of X11
or VNC. The advantage of this solution is that it will run
almost all browser modules at the middlebox. However, it
is hard to maintain the same user experience, especially for
video content embedded in webpages, which will introduce
large graphic rendering and network overhead. Further-
more, it is hard for a user to upload/download ﬁles from/to
their local machine directly because the browser session is
entirely remote. We believe this solution has its value and
may be beneﬁcial in some circumstances.
However, in this paper, we propose an alternative ap-
proach. Our design works at the DOM data structure layer.
The encoded DOM data structures are rendered at the client
side by our JavaScript agent, while a shadow browser inside
the middlebox takes care of the rest. Our design is based on
the following observation. Bugs in different browser com-
ponents enable attackers to execute malicious code, and al-
most all attacks require JavaScript execution for exploita-