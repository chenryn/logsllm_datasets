## HTTPS 的工作模式我们可以知道，非对称加密在性能上不如对称加密，那是否能将两者结合起来呢？例如，公钥私钥主要用于传输对称加密的秘钥，而真正的双方大数据量的通信都是通过对称加密进行的。当然是可以的。这就是 HTTPS 协议的总体思路。![](Images/5df63872ce4d852187691d91579515f3.png){savepage-src="https://static001.geekbang.org/resource/image/70/02/7042f5c3d9e3437d5b0b30b30f43c802.jpg"}当你登录一个外卖网站的时候，由于是 HTTPS，客户端会发送 Client Hello消息到服务器，以明文传输 TLS版本信息、加密套件候选列表、压缩算法候选列表等信息。另外，还会有一个随机数，在协商对称密钥的时候使用。这就类似在说："您好，我想定外卖，但你要保密我吃的是什么。这是我的加密套路，再给你个随机数，你留着。"然后，外卖网站返回 Server Hello 消息,告诉客户端，服务器选择使用的协议版本、加密套件、压缩算法等，还有一个随机数，用于后续的密钥协商。这就类似在说："您好，保密没问题，你的加密套路还挺多，咱们就按套路 2来吧，我这里也有个随机数，你也留着。"然后，外卖网站会给你一个服务器端的证书，然后说："Server HelloDone，我这里就这些信息了。"你当然不相信这个证书，于是你从自己信任的 CA 仓库中，拿 CA的证书里面的公钥去解密外卖网站的证书。如果能够成功，则说明外卖网站是可信的。这个过程中，你可能会不断往上追溯CA、CA 的 CA、CA 的 CA 的 CA，反正直到一个授信的 CA，就可以了。证书验证完毕之后，觉得这个外卖网站可信，于是客户端计算产生随机数字Pre-master，发送 Client KeyExchange，用证书中的公钥加密，再发送给服务器，服务器可以通过私钥解密出来。到目前为止，无论是客户端还是服务器，都有了三个随机数，分别是：自己的、对端的，以及刚生成的Pre-Master随机数。通过这三个随机数，可以在客户端和服务器产生相同的对称密钥。有了对称密钥，客户端就可以说："Change CipherSpec，咱们以后都采用协商的通信密钥和加密算法进行加密通信了。"然后发送一个 Encrypted HandshakeMessage，将已经商定好的参数等，采用协商密钥进行加密，发送给服务器用于数据与握手验证。同样，服务器也可以发送 Change CipherSpec，说："没问题，咱们以后都采用协商的通信密钥和加密算法进行加密通信了"，并且也发送Encrypted Handshake Message的消息试试。当双方握手结束之后，就可以通过对称密钥进行加密传输了。这个过程除了加密解密之外，其他的过程和 HTTP 是一样的，过程也非常复杂。上面的过程只包含了 HTTPS的单向认证，也即客户端验证服务端的证书，是大部分的场景，也可以在更加严格安全要求的情况下，启用双向认证，双方互相验证证书。
## 重放与篡改其实，这里还有一些没有解决的问题，例如重放和篡改的问题。没错，有了加密和解密，黑客截获了包也打不开了，但是它可以发送 N次。这个往往通过 Timestamp 和 Nonce随机数联合起来，然后做一个不可逆的签名来保证。Nonce 随机数保证唯一，或者 Timestamp 和 Nonce合起来保证唯一，同样的，请求只接受一次，于是服务器多次受到相同的Timestamp 和 Nonce，则视为无效即可。如果有人想篡改 Timestamp 和Nonce，还有签名保证不可篡改性，如果改了用签名算法解出来，就对不上了，可以丢弃了。
## 小结好了，这一节就到这里了，我们来总结一下。-   [加密分对称加密和非对称加密。对称加密效率高，但是解决不了密钥传输问题；非对称加密可以解决这个问题，但是效率不高。]{.orange}-   [ 非对称加密需要通过证书和权威机构来验证公钥的合法性。]{.orange}-   [HTTPS 是综合了对称加密和非对称加密算法的 HTTP    协议。既保证传输安全，也保证传输效率。]{.orange}最后，给你留两个思考题：1.  HTTPS    协议比较复杂，沟通过程太繁复，这样会导致效率问题，那你知道有哪些手段可以解决这些问题吗？2.  HTTP 和 HTTPS 协议的正文部分传输个 JSON    什么的还好，如果播放视频，就有问题了，那这个时候，应该使用什么协议呢？欢迎你留言和我讨论。趣谈网络协议，我们下期见！![](Images/55417b60e9c8040807daf07e6bd9cb4b.png){savepage-src="https://static001.geekbang.org/resource/image/b5/fb/b5bc14cb81d3630919fee94a512cc3fb.jpg"}
# 第16讲 \| 流媒体协议：如何在直播里看到美女帅哥？最近直播比较火，很多人都喜欢看直播，那一个直播系统里面都有哪些组成部分，都使用了什么协议呢？无论是直播还是点播，其实都是对于视频数据的传输。一提到视频，大家都爱看，但是一提到视频技术，大家都头疼，因为名词实在是太多了。
## 三个名词系列 {#17.html#-}我这里列三个名词系列，你先大致有个印象。-   **名词系列一**：AVI、MPEG、RMVB、MP4、MOV、FLV、WebM、WMV、ASF、MKV。例如    RMVB 和 MP4，看着是不是很熟悉？-   **名词系列二**：H.261、    H.262、H.263、H.264、H.265。这个是不是就没怎么听过了？别着急，你先记住，要重点关注    H.264。-   **名词系列**三：MPEG-1、MPEG-2、MPEG-4、MPEG-7。MPEG    好像听说过，但是后面的数字是怎么回事？是不是又熟悉又陌生？这里，我想问你个问题，视频是什么？我说，其实就是快速播放一连串连续的图片。每一张图片，我们称为一**帧**。只要每秒钟帧的数据足够多，也即播放得足够快。比如每秒30帧，以人的眼睛的敏感程度，是看不出这是一张张独立的图片的，这就是我们常说的**帧率**（**FPS**）。每一张图片，都是由**像素**组成的，假设为1024\*768（这个像素数不算多）。每个像素由 RGB 组成，每个 8 位，共 24位。``{=html}我们来算一下，每秒钟的视频有多大？30 帧 × 1024 × 768 × 24 = 566,231,040Bits = 70,778,880Bytes如果一分钟呢？4,246,732,800Bytes，已经是 4 个 G 了。是不是不算不知道，一算吓一跳？这个数据量实在是太大，根本没办法存储和传输。如果这样存储，你的硬盘很快就满了；如果这样传输，那多少带宽也不够用啊！怎么办呢？人们想到了**编码**，就是看如何用尽量少的 Bit数保存视频，使播放的时候画面看起来仍然很精美。**编码是一个压缩的过程。**
## 视频和图片的压缩过程有什么特点？ {#17.html#-}之所以能够对视频流中的图片进行压缩，因为视频和图片有这样一些特点。1.  **空间冗余**：图像的相邻像素之间有较强的相关性，一张图片相邻像素往往是渐变的，不是突变的，没必要每个像素都完整地保存，可以隔几个保存一个，中间的用算法计算出来。2.  **时间冗余**：视频序列的相邻图像之间内容相似。一个视频中连续出现的图片也不是突变的，可以根据已有的图片进行预测和推断。3.  **视觉冗余**：人的视觉系统对某些细节不敏感，因此不会每一个细节都注意到，可以允许丢失一些数据。4.  **编码冗余**：不同像素值出现的概率不同，概率高的用的字节少，概率低的用的字节多，类似[霍夫曼编码（Huffman    Coding）](https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81)的思路。总之，用于编码的算法非常复杂，而且多种多样，但是编码过程其实都是类似的。![](Images/cc6576509b7c30fa31fe4563faa00cff.png){savepage-src="https://static001.geekbang.org/resource/image/43/b4/433a51e15d0ed50e313454ceccd61cb4.jpg"}﻿﻿