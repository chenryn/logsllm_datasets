    function decorator(container, key) {}
    class A {
        @decorator // OK
        fn(){}
    }
    let a = {
        b: class B {
            @decorator // Error TS1206: Decorators are not valid here
            fn(){}
        }
    }
My use case is a controller class in an Angular 1.5 component:
    const MyComponent = {
      bindings: {...},
      template: `...`,
      controller: class MyComponentController extends BaseComponent {
        @override
        foo() {...}
      }
    }
    abstract class BaseComponent {
      protected foo() {...}
    }