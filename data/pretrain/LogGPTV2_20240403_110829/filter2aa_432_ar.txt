        printf("Type: %ld Text: %s\n", qbuf->mtype, qbuf->mtext);
}
void remove_queue(int qid)
{
        /* Remove the queue */
        msgctl(qid, IPC_RMID, 0);
}
void change_queue_mode(int qid, char *mode)
{
        struct msqid_ds myqueue_ds;
        /* Get current info */
        msgctl(qid, IPC_STAT, &myqueue_ds);
        /* Convert and load the mode */
        sscanf(mode, "%ho", &myqueue_ds.msg_perm.mode);
        /* Update the mode */
        msgctl(qid, IPC_SET, &myqueue_ds);
}
void usage(void)
{
        fprintf(stderr, "msgtool - A utility for tinkering with msg queues\n");
        fprintf(stderr, "\nUSAGE: msgtool (s)end  \n");
        fprintf(stderr, "               (r)ecv \n");
        fprintf(stderr, "               (d)elete\n");
        fprintf(stderr, "               (m)ode \n");
        exit(1);
}
4.8  信号量(Semaphores)
信号量简单的说就是用来控制多个进程对共享资源使用的计数器。它经常被用作一种
锁定保护机制，当某个进程在对资源进行操作时阻止其它进程对该资源的访问。需要注意
的是，System V 中的信号量对象实际上是信号量的集合（set），它可以包含多个信号量，
控制多个共享资源。
- 98 -
Linux网络编程
4.8.1  有关的数据结构
和消息队列一样，我们在介绍它的使用前将首先介绍一些有关的数据结构：
1．sem
前面提到，信号量对象实际是多个信号量的集合。在 Linux 系统中，这种集合是以数
组的形式实现的。数组的每个成员都是一个单独的信号量，它们在系统中是以 sem 结构的
形式储存的。Sem 结构在 Linux 系统库 linux/sem.h 中的定义是这样的：
        /* One semaphore structure for each semaphore in the system. */
        struct sem {
                short   sempid;         /* pid of last operation */
                ushort  semval;         /* current value */
                ushort  semncnt;        /* num procs awaiting increase in semval */
                ushort  semzcnt;        /* num procs awaiting semval = 0 */
        };
其中，
sem_pid 成员保存了最近一次操作信号量的进程的 pid 。
sem_semval 成员保存着信号量的计数值。
sem_semncnt 成员保存着等待使用资源的进程数目。
sem_semzcnt 成员保存等待资源完全空闲的的进程数目。
2．semun
semun 联合在 senctl()函数中使用，提供 senctl()操作所需要的信息。它在 Linux 系统
linux/sem.h 中的定义是这样的：
        /* arg for semctl system calls. */
        union semun {
                int val;                /* value for SETVAL */
                struct semid_ds *buf;   /* buffer for IPC_STAT & IPC_SET */
                ushort *array;          /* array for GETALL & SETALL */
                struct seminfo *__buf;  /* buffer for IPC_INFO */
                void *__pad;
        };
前三个参数在对 senctl()函数介绍中会讲到，这里暂时先不管它们。后两个参数是 Linux
系统所独有的，只在系统的内核中使用，我们就不多介绍了。
3．sembuf
sembuf 结构被 semop()函数(后面回讲到)用来定义对信号量对象的基本操作。它在
linux/sem.h 中是这样定义的：
/* semop system calls takes an array of these. */
struct sembuf {
        unsigned short  sem_num;        /* semaphore index in array */
        short           sem_op;         /* semaphore operation */
        short           sem_flg;        /* operation flags */
};
其中，
sem_num 成员为接受操作的信号量在信号量数组中的序号（数组下标）。
sem_op 成员定义了进行的操作(可以是正、负和零)。
第四章  进程间通信
- 99 -
sem_flg 是控制操作行为的标志。
如果 sem_op 是负值，就从指定的信号量中减去相应的值。这对应着获取信号量所监
控的资源的操作。如果没有在 sem_flg 指定 IPC_NOWAIT 标志，那么，如果现有的信号量
数值小于 sem_op 的绝对值（表示现有的资源少于要获取的资源），调用 semop()函数的进
程就回被阻塞直到信号量的数值大于 sem_op 的绝对值（表示有足够的资源被释放）。
如果 sem_op 是正值，就在指定的信号量中加上相应的值。这对应着释放信号量所监
控的资源的操作。
如果 sem_op 是零，那么调用 semop()函数的进程就会被阻塞直到对应的信号量值为零。
这种操作的实质就是等待信号量所监控的资源被全部使用。利用这种操作可以动态监控资
源的使用并调整资源的分配，避免不必要的等待。
4．semid_qs
和 msgqid_ds 类似，semid_qs 结构被系统用来储存每个信号量对象的有关信息。它在
Linux 系统库 linux/sem.h 中是这样定义的：
/* One semid data structure for each set of semaphores in the system. */
struct semid_ds {
        struct ipc_perm sem_perm;               /* permissions .. see ipc.h */
        __kernel_time_t sem_otime;              /* last semop time */
        __kernel_time_t sem_ctime;              /* last change time */
        struct sem      *sem_base;              /* ptr to first semaphore in array */
        struct sem_queue *sem_pending;          /* pending operations to be processed */
        struct sem_queue **sem_pending_last;    /* last pending operation */
        struct sem_undo *undo;                  /* undo requests on this array *
/
        unsigned short  sem_nsems;              /* no. of semaphores in array */
};
其中，
sem_perm 成员保存了信号量对象的存取权限以及其他一些信息（见上面关于 ipc_perm
结构的介绍）。
sem_otime 成员保存了最近一次 semop()操作的时间。
sem_ctime 成员保存了信号量对象最近一次改动发生的时间。
sem_base 指针保存着信号量数组的起始地址。
sem_pending 指针保存着还没有进行的操作。
sem_pending_last 指针保存着最后一个还没有进行的操作。
sem_undo 成员保存了 undo 请求的数目。
sem_nsems 成员保存了信号量数组的成员数目。
4.8.2  有关的函数
介绍完有关的数据结构，接下来我们将介绍使用信号量要用到的函数：
1．semget()
使用 semget()函数来建立新的信号量对象或者获取已有对象的标识符。它在 linux/sem.h
中的函数声明是这样的：
系统调用：
semget()
函数声明：
int semget ( key_t key, int nsems, int semflg);
- 100 -
Linux网络编程
返回值：
semaphore set IPC identifier on success
-1 on error: errno = EACCESS (permission denied)
                EEXIST (set exists, cannot create (IPC_EXCL))
                EIDRM (set is marked for deletion)
                ENOENT (set does not exist, no IPC_CREAT was used)
                ENOMEM (Not enough memory to create new set)
                ENOSPC (Maximum set limit exceeded)
函数接受三个参数。其中第一个参数 key 和第三个参数 semflg 和前面讲过的 msgget()
函数中的两个参数是对应的，作用和取值的意义也相同，读者可以参看 msgget()的有关介
绍。函数的第二个参数 nsems 是信号量对象所特有的，它指定了新生成的信号量对象中信
号量的数目，也就是信号量数组成员的个数。在 linux/sem.h 定义了它的上限：
#define SEMMSL  32              /* <= 512 max num of semaphores per id */
如果函数执行的是打开而不是创建操作，则这个参数被忽略。
下面我们将创建一个封装函数作为本节例子：
int open_semaphore_set( key_t keyval, int numsems )
{
        int     sid;
        if ( ! numsems )
                return(-1);
        if((sid = semget( mykey, numsems, IPC_CREAT | 0660 )) == -1)
        {
                return(-1);
        }
        return(sid);
}
程序的分析请读者自行完成。
2．semop()
使用这个函数来改变信号量对象中各个信号量的状态。它在 Linux 系统库 linux/sem.h
中的函数声明如下：
系统调用：
semop()
函数声明：
int semop ( int semid, struct sembuf *sops, unsigned nsops);
返回值：
0 on success (all operations performed)
-1 on error: errno = E2BIG (nsops greater than max number of ops allowed
                       atomically)
                 EACCESS (permission denied)
                 EAGAIN (IPC_NOWAIT asserted, operation could not
                          go through)
                 EFAULT (invalid address pointed to by sops argument)
                 EIDRM (semaphore set was removed)
                 EINTR (Signal received while sleeping)
                 EINVAL (set doesn't exist, or semid is invalid)
                 ENOMEM (SEM_UNDO asserted, not enough memory
                           to create the undo structure necessary)
                 ERANGE (semaphore value out of range)
函数的第一个参数 semid 是要操作的信号量对象的标识符。第二个参数 sops 是 sembuf
的数组，它定义了 semop()函数所要进行的操作序列。第三个参数 nsops 保存着 sops 数组
的长度，也即 semop()函数将进行的操作个数。
第四章  进程间通信
- 101 -
在前面对 sembuf 结构的介绍中我们已经介绍了 semop()的各种基本操作。下面我们将
结合例子对这些操作作进一步的介绍。首先假设我们已经通过 semget()函数得到了一个只
包含一个信号量的信号量对象，它监控着某台最多能处理 10 份作业的打印机的使用。我们
下面的操作都将是只针对这个信号量的。
假设我们要向打印机交付一份作业。可以定义下面的 sembuf 变量来完成这个操作：
struct sembuf  sem_get = { 0, -1, IPC_NOWAIT };
它告诉系统，将信号量对象中序号为零的信号量（第一个信号量）减一。IPC_NOWAIT
标志的定义告诉系统，如果打印机的作业量（10 份）已满，则不阻塞进程而是直接将控制
权返回进程并返回失败信息。
定义完操作后，我们使用下面的代码来执行它：
        if((semop(sid, &sem_get, 1) == -1)
                perror("semop");
作业打印完成后，我们使用下面的 sembuf 变量来定义一个释放资源的操作：
struct sembuf sem_release= { 0, 1, IPC_NOWAIT };
它告诉系统将信号量对象中序号为零的对象加一。
然后用下面的代码来完成这个操作：
semop(sid,&sem_release,1);
这样，我们就完成了一个完整的作业打印操作。
3．semctl()函数
和消息队列的 msgctl()函数类似，semctl()函数被用来直接对信号量对象进行控制。它
在 linux/sem.h 中的函数声明如下：
系统调用：
semctl()
函数声明：
int semctl ( int semid, int semnum, int cmd, union semun arg );
返回值：
positive integer on success
-1 on error: errno = EACCESS (permission denied)
                EFAULT (invalid address pointed to by arg argument)
                EIDRM (semaphore set was removed)
                EINVAL (set doesn't exist, or semid is invalid)
                EPERM (EUID has no privileges for cmd in arg)
                ERANGE (semaphore value out of range)
比较一下这两个函数的参数我们回发现一些细微的差别。首先，因为信号量对象事实
上是多个信息量的集合而非单一的个体，所以在进行操作时，不仅需要指定对象的标识符，
还需要用信号量在集合中的序号来指定具体的信号量个体。
两个函数都有cmd参数，指定了函数进行的具体操作。不过，和msgctl()函数相比，semctl()
函数可以进行的操作要多得多：
IPC_STAT   取得信号量对象的 semid_ds 结构信息，并将其储存在 arg 参数中 buf 指针
所指内存中返回。
IPC_SET  用 arg 参数中 buf 的数据来设定信号量对象的的 semid_ds 结构信息。和消
息队列对象一样，能被这个函数设定的只有少数几个参数。
IPC_RMID  从内存中删除信号量对象。
GETALL  取得信号量对象中所有信号量的值，并储存在 arg 参数中的 array 数组中返
回。
GETNCNT  返回正在等待使用某个信号量所控制的资源的进程数目。
GETPID  返回最近一个对某个信号量调用 semop()函数的进程的 pid。
GETVAL  返回对象那某个信号量的数值。
GETZCNT  返回正在等待某个信号量所控制资源被全部使用的进程数目。
- 102 -
Linux网络编程
SETALL  用 arg 参数中 array 数组的值来设定对象内各个信号量的值。
SETVAL  用 arg 参数中 val 成员的值来设定对象内某个信号量的值。
函数的第四个参数 arg 提供了操作所需要的其它信息。它的各个成员的意义在前面已
经有过介绍，这里不再赘述。需要强调的是它和 msgctl()中的参数不一样，是一个普通的
变量而不是指针，初学者常常在这个问题上犯错误。
下面举几个使用 semctl()的例子。
int get_sem_val( int sid, int semnum )
{
        return( semctl(sid, semnum, GETVAL, 0));
}
上面的代码返回信号量对象中某个信号量的值。注意这里 semctl()函数的最后一个参数
取的是零，这是因为执行 GETVAL 命令时这个参数被自动忽略了。
void init_semaphore( int sid, int semnum, int initval)
{
        union semun semopts;
        semopts.val = initval;
        semctl( sid, semnum, SETVAL, semopts);
}
上面的代码用 initval参数来设定信号量对象中某个信号量的值。