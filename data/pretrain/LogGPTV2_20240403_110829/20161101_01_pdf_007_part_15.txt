 1
 1
 1
 2
 2
 2
 (6 rows)
函数的三态分解-2(例子1, 影响优化器)
 把函数改成volatile后, 函数不能被优化.
 digoal=# alter function f_t3(int) volatile;
 digoal=# select * from t3 where f_t3(1) =1;
 NOTICE: Called.
 NOTICE: Called.
 NOTICE: Called.
 NOTICE: Called.
 NOTICE: Called.
 NOTICE: Called.
 id
 ....
 根据函数的实际情况设置稳定态, 可以达到优化效果.
 例如f_t3(int)函数的一次调用耗时1秒, 并且是stable的状态, 那么以上例子可以减少5秒的查询时间. 使用volatile态则需要6
秒.
函数的三态分解-2(例子2, 影响执行计划)
 优化器在处理immutable函数时, 先评估函数结果, 将结果替换为常量.
 digoal=# explain select * from t2 where id>abs(-1);
 QUERY PLAN
 -------------------------------------------------------
 Seq Scan on t2 (cost=0.00..130.38 rows=3210 width=4)
 Filter: (id > 1) -- 因为abs(int)是immutable函数, 这里abs(-1) 替换成常量1.
 (2 rows)
 如果把函数改成stable, 那么将不会替换成常量.
 digoal=# alter function abs(int) stable;
 ALTER FUNCTION
 digoal=# explain select * from t2 where id>abs(-1);
 QUERY PLAN
 -------------------------------------------------------
 Seq Scan on t2 (cost=0.00..154.45 rows=3210 width=4)
 Filter: (id > abs((-1))) -- 由于abs(int)被改成stable了, 将不会替换成常量
 (2 rows)
 在prepared statement中使用需要注意区别. 后面会有例子.
函数的三态分解-2(例子3, 函数索引)
 只有immutable函数可以创建函数索引.
 digoal=# create table t4(id int, info timestamp(0));
 CREATE TABLE
 digoal=# \set VERBOSITY verbose
 digoal=# create index idx_t4_1 on t4(to_char(info,'yyyymmdd'));
 ERROR: 42P17: functions in index expression must be marked IMMUTABLE
 LOCATION: ComputeIndexAttrs, indexcmds.c:1067
函数的三态分解-2(例子4, 函数值比较走索引)
 digoal=# create table t5(id int primary key, info text);
 digoal=# insert into t5 select generate_series(1,100000),md5(random()::text);
 digoal=# alter function abs(int) volatile;
 索引扫描时, 用于过滤条件的表达式只被评估一次后, 再与索引值进行比较判断是否满足条件.
 digoal=# explain select * from t5 where id Seq Scan on t7 (cost=0.25..106.55 rows=9630 width=4)
 (3 rows)
函数的三态分解-4
 digoal=# alter function f_t7(int) immutable;
 digoal=# explain select * from t7 where f_t7(1)=1;
 NOTICE: called
 QUERY PLAN
 ------------------------------------------------------
 Seq Scan on t7 (cost=0.00..34.00 rows=2400 width=4)
 (1 row)
函数的三态分解-5
 STABLE和IMMUTABLE 在prepared statement中的使用区别.
 immutable函数在plan时以常量替代, stable函数在execute阶段被执行.
 因此immutable函数参数为常量时, 在prepared statement场景只执行一次, 而stable函数被多次执行.
 digoal=# create table t6(id int, info text);
 digoal=# create or replace function f_pre(id int) returns int as $$
 declare
 cnt int8;
 begin
 select count(*) into cnt from t6;
 return cnt;
 end;
 $$ language plpgsql strict immutable;
 pg93@db-172-16-3-150-> lua
 Lua 5.2.3 Copyright (C) 1994-2013 Lua.org, PUC-Rio
 > pgsql = require "pgsql"
 > conn = pgsql.connectdb('host=/ssd2/pg93/pg_root port=5432 dbname=digoal user=postgres password=postgres')
函数的三态分解-5
 > conn:prepare('pre','select f_pre(1)')
 > print (conn:execPrepared('pre'):getvalue(1,1))
 0
 digoal=# insert into t6 values (1,'test');
 digoal=# insert into t6 values (2,'test');
 > print (conn:execPrepared('pre'):getvalue(1,1))
 0 -- 结果不变, 还是0. 只要prepared statement cache没有被清除, 返回结果都不会变化, 但是这里改变t6的表结构的话就会清除
prepared statement cache.
 digoal=# alter function f_pre(int) stable;
 > .. 重新prepare.
 > print (conn:execPrepared('pre'):getvalue(1,1))
 2
 digoal=# insert into t6 values (3,'test');
 digoal=# insert into t6 values (4,'test');
 > print (conn:execPrepared('pre'):getvalue(1,1))
 4 -- 结果变化. 因为stable函数在prepared statements中execute时被执行 .
函数的三态小结
 VOLATILE
 volatile函数没有限制, 可以修改数据(如执行delete, insert , update).
 使用同样的参数调用可能返回不同的值.
 volatile函数不能被优化器选择作为优化条件.(例如减少调用, 函数索引, 索引扫描不允许使用volatile函数)
 在同一个查询中, 同样参数的情况下可能被多次执行(QUERY有多行返回/扫描的情况下).
 snapshot为函数内的每个query开始时的snapshot. 因此对在函数执行过程中, 外部已提交的数据可见.(仅仅限于调
用函数的事务隔离级别为read committed)
 STABLE