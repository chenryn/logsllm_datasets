thousands eth loss.
So when it comes to such applications in a contract, it is important to
consider a more appropriate generation method and a reasonable order of use.
Here is a reasonable random number generation method **hash-commit-reveal** ,
i.e., the player submits the action plan and the hash to the back end, which
then generates the corresponding hash value as well as the random number to
reveal and returns the corresponding random number to commit. In this way, the
server can't get the action plan, and the client can't get the random number.
One great implementation code is the random number generation code for
dice2win.(https://etherscan.io/address/0xD1CEeeefA68a6aF0A5f6046132D986066c7f9426)
But the biggest problem with **hash-commit-reveal** is that the server will
get all the data in the process briefly after user submits. Maliciously
suspending the attack will destroy the fairness to some extent. Detailed
analysis can be found in [the smart contract game - Dice2win security
analysis.](https://paper.seebug.org/717/)
Of course, hash-commit is also a good implementation in some simple scenarios,
i.e., the player submits the action plan hash before generating a random
number and submitting the action plan.
### Real world event
Fomo3D Incident
  * 
  * [8万笔交易“封死”以太坊网络，只为抢夺Fomo3D大奖？](https://mp.weixin.qq.com/s/5nrgj8sIZ0SlXebG5sWVPw)
Last Winner
  * 
## (8) Variable coverage vulnerability
Avoid the key of the array variable in contract being controlled.
    map[uint256(msg.sender)+x] = blockNum;
In EVM, arrays are different from other types. As arrays are dynamically
sized, array data is calculated as
    address(map_data) = sha3(key)+offset
The key is the position defined by the map variable, i.e., 1. The offset
refers to the offset in the array, e.g., for map[2], the offset is 2.
The address of map[2] is sha3(1)+2. Assuming map[2]=2333,
storage[sha3(1)+2]=2333.
This is a problem because offset is controllable so that we can write values
to any address of the storage.
This may overwrite the value of any address in the storage, affecting the
logic of the code itself, leading to even more serious problems.
For detailed principles, please refer to \- [以太坊智能合约 OPCODE
逆向之理论基础篇](https://paper.seebug.org/640/) \- 
# 5\. Code hidden danger
## (1) Grammatical property issue
**Be careful with the rounding down of integer division in smart contracts**.
In smart contracts, all integer divisions are rounded down to the nearest
integer. For higher precision, a multiplier is needed to increase this number.
If the problem occurs explicitly in the code, the compiler will raise an error
and cannot continue compiling. However, if it appears implicitly, the round-down approach will be taken.
Error example:
    uint x = 5 / 2; // 2
Correct code:
    uint multiplier = 10;
    uint x = (5 * multiplier) / 2;
## (2) Data privacy
**note that all data in the chain is public.**
In the contract, all data including private variables are public. Privacy data
cannot be stored on the chain.
## (3) Data reliability
In the contract, the timestamp should not be allowed to appear in the code to
avoid interference by the miners. Instead, the constant data such as
block.height should be used.
    uint someVariable = now + 1;
    if (now % 2 == 0) 
    { // The now may be controlled by miners.
    }
## (4) Gas consumption optimization
For some functions and variables that do not involve state changes, you can
add constant to avoid gas consumption.
    contract EUXLinkToken is ERC20 {
        using SafeMath for uint256;
        address owner = msg.sender;
        mapping (address => uint256) balances;
        mapping (address => mapping (address => uint256)) allowed;
        mapping (address => bool) public blacklist;
        string public constant name = "xx";
        string public constant symbol = "xxx";
        uint public constant decimals = 8;
        uint256 public totalSupply = 1000000000e8;
        uint256 public totalDistributed = 200000000e8;
        uint256 public totalPurchase = 200000000e8;
        uint256 public totalRemaining = totalSupply.sub(totalDistributed).sub(totalPurchase);
        uint256 public value = 5000e8;
        uint256 public purchaseCardinal = 5000000e8;
        uint256 public minPurchase = 0.001e18;
        uint256 public maxPurchase = 10e18;
## (5) Contract users
**In the contract, we should try to consider the situation when the trading
target is the contract and avoid the various malicious uses incurred
thereby.**
    contract Auction{
        address public currentLeader;
        uint256 public hidghestBid;
        function bid() public payable {
            require(msg.value > highestBid);
            require(currentLeader.send(highestBid));
            currentLeader = msg.sender;
            highestBid = currentLeader;
        }
    }
The above contract is a typical case when the contract is not considered as a
user. This is a simple bidding code to compete for the king. When the trade
ether is bigger than the highestBid in the contract, the current user will
become the current "king" of the contract, and his trading amount will become
the new highestBid.
    contract Attack {
        function () { revert(); }
        function Attack(address _target) payable {
            _target.call.value(msg.value)(bytes4(keccak256("bid()")));
        }
    }
However, when a new user tries to become the new "king" and the code executes
to `require(currentLeader.send(highestBid));`, the fallback function in the
contract is triggered. If the attacker adds a `revert()` function to the
fallback function, the transaction will return false and the transaction will
never be completed. Then the current contract will always be the current
"king" of the contract.
## (6) Log records
**Key events should have an Event record. In order to facilitate operation,
maintenance and monitoring, in addition to functions such as transfer and
authorization, other operations also need to add detailed event records such
as administrator permission transfer and other special main functions.**
    function transferOwnership(address newOwner) onlyOwner public {
        owner = newOwner;
        emit OwnershipTransferred(owner, newowner);
        }
## (7) Fallback function
**Define the Fallback function in the contract and make the Fallback function
as simple as possible.**
The fallback will be called when there is a problem with the execution of the
contract (if there is no matching function). When the send or transfer
function is called, only 2300 gas is used to execute the fallback function
after the failure. The 2300 gas only allows a set of bytecode instructions to
be executed and needs to be carefully written to avoid the use of gas.
Some examples:
    function() payable { LogDepositReceived(msg.sender); }
    function() public payable{ revert();};
## (8) Owner permission issue
**Avoiding the owner permission is too large.**
For contract owner permissions that are too large, the owner can freely modify
various data in the contract, including modification rules, arbitrary
transfer, and any coinage. Once a safety issue occurs, it may lead to serious
results.
Regarding the owner permission issue, several requirements should be followed:
  1. After the contract is created, no one can change the contract rules, including the size of the rule parameters.
  2. Only the owner is allowed to withdraw the balance from the contract
## (9) User authentication issue
**Don't use tx.origin for authentication in the contract.**
Tx.origin represents the initial address. If user a invokes contract c through
contract b, for contract c, tx.origin is user a, and msg.sender is contract b.
This represents a possible phishing attack, which is extremely dangerous for
authentication.
Here's an example:
    pragma solidity >0.4.24;
    // THIS CONTRACT CONTAINS A BUG - DO NOT USE
    contract TxUserWallet {
        address owner;
        constructor() public {
            owner = msg.sender;
        }
        function transferTo(address dest, uint amount) public {
            require(tx.origin == owner);
            dest.transfer(amount);
        }
    }
We can construct an attack contract:
    pragma solidity >0.4.24;
    interface TxUserWallet {
        function transferTo(address dest, uint amount) external;
    }
    contract TxAttackWallet {
        address owner;
        constructor() public {
            owner = msg.sender;
        }
        function() external {
            TxUserWallet(msg.sender).transferTo(owner, msg.sender.balance);
        }
    }
When the user is spoofed and invokes the attack contract, it will bypass the
authentication directly and transfer the account successfully. Here you should
use msg.sender to do permission judgment.
## (10) Race condition issue
**Try to avoid relying on the order of transactions in the contract.**
In smart contracts, there is often a reliance on the order of transactions.
Such as the rule of occupying a hill to act as a lord or the last winner rule.
These are rules that are designed because of the strong dependence on the
order of transactions. But the bottom rule of Ethernet is based on the law of
maximum interests of miners. Within a certain degree of limit, as long as the
attackers pay enough costs, he can control the order of the transactions to a
certain extent. Developers should avoid this problem.
### Real world event
Fomo3D Incident
  * [智能合约游戏之殇——类 Fomo3D 攻击分析](https://paper.seebug.org/681/)
## (11) Uninitialized storage pointer
**Avoiding initializing struct variables in functions.**
A special data structure is allowed to be a struct structure in solidity, and
local variables in the function are stored by default using storage or memory.
Storage and memory are two different concepts. Solidity allows pointers to
point to an uninitialized reference, and uninitialized local storage causes
variables to point to other stored variables. This can lead to variable
coverage and even more serious consequences.
    pragma solidity ^0.4.0;
    contract Test {
            address public owner;
            address public a;
            struct Seed {
                    address x;
                    uint256 y;
            }
            function Test() {
                    owner = msg.sender;
                    a = 0x1111111111111111111111111111111111111111;
            }
            function fake_foo(uint256 n) public {
                    Seed s;
                    s.x = msg.sender;
                    s.y = n;
            }
    }
After the above code is compiled, s.x and s.y will point incorrectly to owner
and a.
After the attacker executes fake_foo, the owner will be changed to himself.
The above issue was fixed in the latest version of 0.4.25.
# CheckList audit reports
  * [《以太坊合约审计 CheckList 之“以太坊智能合约编码隐患”影响分析报告》](https://paper.seebug.org/732/)
  * [《以太坊合约审计 CheckList 之“以太坊智能合约规范问题”影响分析报告》](https://paper.seebug.org/663/)
  * [《以太坊合约审计 CheckList 之“以太坊智能合约设计缺陷问题”影响分析报告》](https://paper.seebug.org/679/)
  * [《以太坊合约审计 CheckList 之“以太坊智能合约编码安全问题”影响分析报告》](https://paper.seebug.org/696/)
  * [《以太坊合约审计 CheckList 之“以太坊智能合约编码设计问题”影响分析报告》](https://paper.seebug.org/707/)
# REF
  * 
  * 
  * 
  * 
  * 
  * 
  * 
  * 
  * 
  * 
* * *