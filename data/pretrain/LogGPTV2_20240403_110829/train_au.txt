.pp
if the result overflows,
a range error occurs,
and the functions return
.br huge_val ,
.br huge_valf ,
or
.br huge_vall ,
respectively.
.sh errors
see
.br math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.
.pp
the following errors can occur:
.tp
range error: result overflow
.i errno
is set to
.br erange .
an overflow floating-point exception
.rb ( fe_overflow )
is raised.
.sh versions
these functions first appeared in glibc in version 2.1.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br fdim (),
.br fdimf (),
.br fdiml ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
c99, posix.1-2001, posix.1-2008.
.sh bugs
before glibc version 2.24
.\" https://www.sourceware.org/bugzilla/show_bug.cgi?id=6796
on certain architectures (e.g., x86, but not x86_64)
these functions did not set
.ir errno .
.sh see also
.br fmax (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright 2003 walter harms (PI:EMAIL)
.\"
.\" %%%license_start(gpl_noversion_oneline)
.\" distributed under gpl
.\" %%%license_end
.\"
.\" modified 2003-04-04 walter harms
.\" 
.\"
.\" slightly polished, aeb, 2003-04-06
.\"
.th rtime 3 2021-03-22 "gnu" "linux programmer's manual"
.sh name
rtime \- get time from a remote machine
.sh synopsis
.nf
.b "#include "
.pp
.bi "int rtime(struct sockaddr_in *" addrp ", struct rpc_timeval *" timep ,
.bi "          struct rpc_timeval *" timeout );
.fi
.sh description
this function uses the time server protocol as described in
rfc\ 868 to obtain the time from a remote machine.
.pp
the time server protocol gives the time in seconds since
00:00:00 utc, 1 jan 1900,
and this function subtracts the appropriate constant in order to
convert the result to seconds since the
epoch, 1970-01-01 00:00:00 +0000 (utc).
.pp
when
.i timeout
is non-null, the udp/time socket (port 37) is used.
otherwise, the tcp/time socket (port 37) is used.
.sh return value
on success, 0 is returned, and the obtained 32-bit time value is stored in
.ir timep\->tv_sec .
in case of error \-1 is returned, and
.i errno
is set to indicate the error.
.sh errors
all errors for underlying functions
.rb ( sendto (2),
.br poll (2),
.br recvfrom (2),
.br connect (2),
.br read (2))
can occur.
moreover:
.tp
.b eio
the number of returned bytes is not 4.
.tp
.b etimedout
the waiting time as defined in timeout has expired.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br rtime ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh notes
only ipv4 is supported.
.pp
some
.i in.timed
versions support only tcp.
try the example program with
.i use_tcp
set to 1.
.\" .pp
.\" libc5 uses the prototype
.\" .pp
.\" .nf
.\"    int rtime(struct sockaddr_in *, struct timeval *, struct timeval *);
.\" .fi
.\" .pp
.\" and requires
.\" .i 
.\" instead of
.\" .ir  .
.sh bugs
.br rtime ()
in glibc 2.2.5 and earlier does not work properly on 64-bit machines.
.sh examples
this example requires that port 37 is up and open.
you may check
that the time entry within
.i /etc/inetd.conf
is not commented out.
.pp
the program connects to a computer called "linux".
using "localhost" does not work.
the result is the localtime of the computer "linux".
.pp
.ex
#include 
#include 
#include 
#include 
#include 
#include 
#include 
static int use_tcp = 0;
static char *servername = "linux";
int
main(void)
{
    struct sockaddr_in name;
    struct rpc_timeval time1 = {0,0};
    struct rpc_timeval timeout = {1,0};
    struct hostent *hent;
    int ret;
    memset(&name, 0, sizeof(name));
    sethostent(1);
    hent = gethostbyname(servername);
    memcpy(&name.sin_addr, hent\->h_addr, hent\->h_length);
    ret = rtime(&name, &time1, use_tcp ? null : &timeout);
    if (ret 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th isfdtype 3 2021-03-22 "linux" "linux programmer's manual"
.sh name
isfdtype \- test file type of a file descriptor
.sh synopsis
.nf
.b #include 
.b #include 
.pp
.bi "int isfdtype(int " fd ", int " fdtype );
.fi
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br isfdtype ():
.nf
    since glibc 2.20:
        _default_source
    before glibc 2.20:
        _bsd_source || _svid_source
.fi
.sh description
the
.br isfdtype ()
function tests whether the file descriptor
.i fd
refers to a file of type
.ir fdtype .
the
.i fdtype
argument specifies one of the
.b s_if*
constants defined in
.i 
and documented in
.br stat (2)
(e.g.,
.br s_ifreg ).
.sh return value
the
.br isfdtype ()
function returns 1 if the file descriptor
.i fd
is of type
.ir fdtype
and 0 if it is not.
on failure, \-1 is returned and
.i errno
is set to indicate the error.
.sh errors
the
.br isfdtype ()
function can fail with any of the same errors as
.br fstat (2).
.sh conforming to
the
.br isfdtype ()
function is not specified in any standard,
but did appear in the draft posix.1g standard.
it is present on openbsd and tru64 unix
(where the required header file in both cases is just
.ir  ,
as shown in the posix.1g draft),
and possibly other systems.
.sh notes
portable applications should use
.br fstat (2)
instead.
.sh see also
.br fstat (2)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) 1983, 1991 the regents of the university of california.
.\" all rights reserved.
.\"
.\" %%%license_start(bsd_4_clause_ucb)
.\" redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. all advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	this product includes software developed by the university of
.\"	california, berkeley and its contributors.
.\" 4. neither the name of the university nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" this software is provided by the regents and contributors ``as is'' and
.\" any express or implied warranties, including, but not limited to, the
.\" implied warranties of merchantability and fitness for a particular purpose
.\" are disclaimed.  in no event shall the regents or contributors be liable
.\" for any direct, indirect, incidental, special, exemplary, or consequential
.\" damages (including, but not limited to, procurement of substitute goods
.\" or services; loss of use, data, or profits; or business interruption)
.\" however caused and on any theory of liability, whether in contract, strict
.\" liability, or tort (including negligence or otherwise) arising in any way
.\" out of the use of this software, even if advised of the possibility of
.\" such damage.
.\" %%%license_end
.\"
.\"     $id: socket.2,v 1.4 1999/05/13 11:33:42 freitag exp $
.\"
.\" modified 1993-07-24 by rik faith 
.\" modified 1996-10-22 by eric s. raymond 
.\" modified 1998, 1999 by andi kleen 
.\" modified 2002-07-17 by michael kerrisk 
.\" modified 2004-06-17 by michael kerrisk 
.\"
.th socket 2 2021-03-22 "linux" "linux programmer's manual"
.sh name
socket \- create an endpoint for communication
.sh synopsis
.nf
.b #include 
.pp
.bi "int socket(int " domain ", int " type ", int " protocol );
.fi
.sh description
.br socket ()
creates an endpoint for communication and returns a file descriptor
that refers to that endpoint.
the file descriptor returned by a successful call will be
the lowest-numbered file descriptor not currently open for the process.
.pp
the
.i domain
argument specifies a communication domain; this selects the protocol
family which will be used for communication.
these families are defined in
.ir  .
the formats currently understood by the linux kernel include:
.ts
tab(:);
l1 lw40 l.
name:purpose:man page
t{
.br af_unix
t}:t{
local communication
t}:t{
.br unix (7)
t}
t{
.b af_local
t}:t{
synonym for
.b af_unix
t}:t{
t}
t{
.b af_inet
t}:ipv4 internet protocols:t{
.br ip (7)
t}
t{
.b af_ax25
t}:t{
amateur radio ax.25 protocol
t}:t{
.\" part of ax25-tools
.br ax25 (4)
t}
t{
.b af_ipx
t}:ipx \- novell protocols:
t{
.b af_appletalk
t}:appletalk:t{
.br ddp (7)
t}
t{
.b af_x25
t}:itu-t x.25 / iso-8208 protocol:t{
.br x25 (7)
t}
t{
.b af_inet6
t}:ipv6 internet protocols:t{
.br ipv6 (7)
t}
t{
.b af_decnet
t}:t{
decet protocol sockets
t}
t{
.b af_key
t}:t{
key management protocol, originally developed for usage with ipsec
t}
t{
.b af_netlink
t}:t{
kernel user interface device
t}:t{
.br netlink (7)
t}
t{
.b af_packet
t}:t{
low-level packet interface
t}:t{
.br packet (7)
t}
t{
.b af_rds
t}:t{
.\" commit: 639b321b4d8f4e412bfbb2a4a19bfebc1e68ace4
reliable datagram sockets (rds) protocol
t}:t{
.\" rds-tools: https://github.com/oracle/rds-tools/blob/master/rds.7
.\" rds-tools: https://github.com/oracle/rds-tools/blob/master/rds-rdma.7
.br rds (7)
.br
.br rds\-rdma (7)
t}
t{
.b af_pppox
t}:t{
generic ppp transport layer, for setting up l2 tunnels
(l2tp and pppoe)
t}
t{
.b af_llc
t}:t{
.\" linux-history commit: 34beb106cde7da233d4df35dd3d6cf4fee937caa
logical link control (ieee 802.2 llc) protocol
t}
t{
.b af_ib
t}:t{
.\" commits: 8d36eb01da5d371f..ce117ffac2e93334
infiniband native addressing
t}
t{
.b af_mpls
t}:t{
.\" commits: 0189197f441602acdca3f97750d392a895b778fd
multiprotocol label switching
t}
t{
.b af_can
t}:t{
.\" commits: 8dbde28d9711475a..5423dd67bd0108a1
controller area network automotive bus protocol
t}
t{
.b af_tipc
t}:t{
.\" commits: b97bf3fd8f6a16966d4f18983b2c40993ff937d4
tipc, "cluster domain sockets" protocol
t}
t{
.b af_bluetooth
t}:t{
.\" commits: 8d36eb01da5d371f..ce117ffac2e93334
bluetooth low-level socket protocol
t}
t{
.b af_alg
t}:t{
.\" commit: 03c8efc1ffeb6b82a22c1af8dd908af349563314
interface to kernel crypto api
t}
t{
.b af_vsock
t}:t{
.\" commit: d021c344051af91f42c5ba9fdedc176740cbd238
vsock (originally "vmware vsockets") protocol
for hypervisor-guest communication
t}:t{
.br vsock (7)
t}
t{
.b af_kcm
t}:t{
.\" commit: 03c8efc1ffeb6b82a22c1af8dd908af349563314
kcm (kernel connection multiplexer) interface
t}
t{
.b af_xdp
t}:t{
.\" commit: c0c77d8fb787cfe0c3fca689c2a30d1dad4eaba7
xdp (express data path) interface
t}
.te
.pp
further details of the above address families,
as well as information on several other address families, can be found in
.br address_families (7).
.pp
the socket has the indicated