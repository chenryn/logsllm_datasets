names, configuration file and GUID in the data.vmcx file located in C:\ProgramData\Microsoft
\Windows Hyper-V.
I 
The VM Data Store repository (part of the VM host compute service) is able to open, read, and
write the configuration file (usually with “.vmcx” extension) of a VM, which contains the list of
virtual devices and the virtual hardware’s configuration.
The VM data store repository is also used to read and write the VM Save State file. The VM State file 
is generated while pausing a VM and contains the save state of the running VM that can be restored 
at a later time (state of the partition, content of the VM’s memory, state of each virtual device). The 
configuration files are formatted using an XML representation of key/value pairs. The plain XML data 
is stored compressed using a proprietary binary format, which adds a write-journal logic to make it 
resilient against power failures. Documenting the binary format is outside the scope of this book.
CHAPTER 9 Virtualization technologies
317
The VID driver and the virtualization stack memory manager
The Virtual Infrastructure Driver (VID.sys) is probably one of the most important components of the 
virtualization stack. It provides partition, memory, and processor management services for the virtual 
machines running in the child partition, exposing them to the VM Worker process, which lives in the 
root. The VM Worker process and the VMMS services use the VID driver to communicate with the 
hypervisor, thanks to the interfaces implemented in the Windows hypervisor interface driver (WinHv.
sys and WinHvr.sys), which the VID driver imports. These interfaces include all the code to support the 
hypervisor’s hypercall management and allow the operating system (or generic kernel mode drivers) to 
access the hypervisor using standard Windows API calls instead of hypercalls.
The VID driver also includes the virtualization stack memory manager. In the previous section, we 
described the hypervisor memory manager, which manages the physical and virtual memory of the 
hypervisor itself. The guest physical memory of a VM is allocated and managed by the virtualization 
stack’s memory manager. When a VM is started, the spawned VM Worker process (VMWP.exe) invokes 
the services of the memory manager (defined in the IMemoryManager COM interface) for constructing 
the guest VM’s RAM. Allocating memory for a VM is a two-step process:
1. 
The VM Worker process obtains a report of the global system’s memory state (by using services
from the Memory Balancer in the VMMS process), and, based on the available system memory,
determines the size of the physical memory blocks to request to the VID driver (through the
VID_RESERVE IOCTL. Sizes of the block vary from 64 MB up to 4 GB). The blocks are allocated by
the VID driver using MDL management functions (MmAllocatePartitionNodePagesForMdlEx in
particular). For performance reasons, and to avoid memory fragmentation, the VID driver imple-
ments a best-effort algorithm to allocate huge and large physical pages (1 GB and 2 MB) before
relying on standard small pages. After the memory blocks are allocated, their pages are depos-
ited to an internal “reserve” bucket maintained by the VID driver. The bucket contains page lists
ordered in an array based on their quality of service (QOS). The QOS is determined based on the
page type (huge, large, and small) and the NUMA node they belong to. This process in the VID
nomenclature is called “reserving physical memory” (not to be confused with the term “reserving
virtual memory,” a concept of the NT memory manager).
2.
From the virtualization stack perspective, physical memory commitment is the process of
emptying the reserved pages in the bucket and moving them in a VID memory block (VSMM_
MEMORY_BLOCK data structure), which is created and owned by the VM Worker process
using the VID driver’s services. In the process of creating a memory block, the VID driver
first deposits additional physical pages in the hypervisor (through the Winhvr driver and the
HvDepositMemory hypercall). The additional pages are needed for creating the SLAT table
page hierarchy of the VM. The VID driver then requests to the hypervisor to map the physical
pages describing the entire guest partition’s RAM. The hypervisor inserts valid entries in the
SLAT table and sets their proper permissions. The guest physical address space of the partition
is created. The GPA range is inserted in a list belonging to the VID partition. The VID memory
block is owned by the VM Worker process. It’s also used for tracking guest memory and in DAX
file-backed memory blocks. (See Chapter 11, “Caching and file system support,” for more details
about DAX volumes and PMEM.) The VM Worker process can later use the memory block for
multiple purposes—for example, to access some pages while managing emulated devices.
318 
CHAPTER 9 Virtualization technologies
The birth of a Virtual Machine (VM)
The process of starting up a virtual machine is managed primarily by the VMMS and VMWP pro-
cess. When a request to start a VM (internally identified by a GUID) is delivered to the VMMS service 
(through PowerShell or the Hyper-V Manager GUI application), the VMMS service begins the starting 
process by reading the VM’s configuration from the data store repository, which includes the VM’s 
GUID and the list of all the virtual devices (VDEVs) comprising its virtual hardware. It then verifies that 
the path containing the VHD (or VHDX) representing the VM’s virtual hard disk has the correct ac-
cess control list (ACL, more details provided later). In case the ACL is not correct, if specified by the VM 
configuration, the VMMS service (which runs under a SYSTEM account) rewrites a new one, which is 
compatible with the new VMWP process instance. The VMMS uses COM services to communicate with 
the Host Compute Service to spawn a new VMWP process instance.
The Host Compute Service gets the path of the VM Worker process by querying its COM registra-
tion data located in the Windows registry (HKCU\CLSID\{f33463e0-7d59-11d9-9916-0008744f51f3} 
key). It then creates the new process using a well-defined access token, which is built using the virtual 
machine SID as the owner. Indeed, the NT Authority of the Windows Security model defines a well-
known subauthority value (83) to identify VMs (more information on system security components 
are available in Part 1, Chapter 7, “Security”). The Host Compute Service waits for the VMWP process 
to complete its initialization (in this way the exposed COM interfaces become ready). The execution 
returns to the VMMS service, which can finally request the starting of the VM to the VMWP process 
(through the exposed IVirtualMachine COM interface).
As shown in Figure 9-24, the VM Worker process performs a “cold start” state transition for the 
VM. In the VM Worker process, the entire VM is managed through services exposed by the “Virtual 
Motherboard.” The Virtual Motherboard emulates an Intel i440BX motherboard on Generation 1 
VMs, whereas on Generation 2, it emulates a proprietary motherboard. It manages and maintains the 
list of virtual devices and performs the state transitions for each of them. As covered in the next sec-
tion, each virtual device is implemented as a COM object (exposing the IVirtualDevice interface) in a 
DLL. The Virtual Motherboard enumerates each virtual device from the VM’s configuration and loads
the relative COM object representing the device.
The VM Worker process begins the startup procedure by reserving the resources needed by each 
virtual device. It then constructs the VM guest physical address space (virtual RAM) by allocating physi-
cal memory from the root partition through the VID driver. At this stage, it can power up the virtual 
motherboard, which will cycle between each VDEV and power it up. The power-up procedure is differ-
ent for each device: for example, synthetic devices usually communicate with their own Virtualization 
Service Provider (VSP) for the initial setup.
One virtual device that deserves a deeper discussion is the virtual BIOS (implemented in the 
Vmchipset.dll library). Its power-up method allows the VM to include the initial firmware executed 
when the bootstrap VP is started. The BIOS VDEV extracts the correct firmware for the VM (legacy BIOS 
in the case of Generation 1 VMs; UEFI otherwise) from the resource section of its own backing library, 
builds the volatile configuration part of the firmware (like the ACPI and the SRAT table), and injects it 
in the proper guest physical memory by using services provided by the VID driver. The VID driver is 
indeed able to map memory ranges described by the VID memory block in user mode memory, acces-
sible by the VM Worker process (this procedure is internally called “memory aperture creation”).
CHAPTER 9 Virtualization technologies
319
Host Compute
Service
Hypervisor
IVirtualMachine COM Interface
VMWP
VID
VMBus
WinHV
VSPs
Cold Start
Root Partition / Host OS
User
Kernel
VirtualMachine
Partition
Manager
Memory
Manager
Virtual
Motherboard
…
FIGURE 9-24 The VM Worker process and its interface for performing a “cold start” of a VM.
After all the virtual devices have been successfully powered up, the VM Worker process can start the 
bootstrap virtual processor of the VM by sending a proper IOCTL to the VID driver, which will start the VP 
and its message pump (used for exchanging messages between the VID driver and the VM Worker process).
EXPERIMENT: Understanding the security of the VM Worker process and 
the irtual hard disk files
In the previous section, we discussed how the VM Worker process is launched by the Host 
Compute service (Vmcompute.exe) when a request to start a VM is delivered to the VMMS pro-
cess (through WMI). Before communicating with the Host Compute Service, the VMMS gener-
ates a security token for the new Worker process instance. 
Three new entities have been added to the Windows security model to properly support virtual 
machines (the Windows Security model has been extensively discussed in Chapter 7 of Part 1):
I 
A “virtual machines” security group, identified with the S-1-5-83-0 security identifier.
I 
A virtual machine security identifier (SID), based on the VM’s unique identifier (GUID). The
VM SID becomes the owner of the security token generated for the VM Worker process.
I 
A VM Worker process security capability used to give applications running in
AppContainers access to Hyper-V services required by the VM Worker process.
EXPERIMENT: Understanding the security of the VM Worker process and 
the irtual hard disk files
In the previous section, we discussed how the VM Worker process is launched by the Host 
Compute service (Vmcompute.exe) when a request to start a VM is delivered to the VMMS pro-
cess (through WMI). Before communicating with the Host Compute Service, the VMMS gener-
ates a security token for the new Worker process instance. 
Three new entities have been added to the Windows security model to properly support virtual
machines (the Windows Security model has been extensively discussed in Chapter 7 of Part 1):
I
A “virtual machines” security group, identified with the S-1-5-83-0 security identifier.
I
A virtual machine security identifier (SID), based on the VM’s unique identifier (GUID). The 
VM SID becomes the owner of the security token generated for the VM Worker process.
I
A VM Worker process security capability used to give applications running in 
AppContainers access to Hyper-V services required by the VM Worker process.
320 
CHAPTER 9 Virtualization technologies
In this experiment, you will create a new virtual machine through the Hyper-V manager in a 
location that’s accessible only to the current user and to the administrators group, and you will 
check how the security of the VM files and the VM Worker process change accordingly.
First, open an administrative command prompt and create a folder in one of the workstation’s 
volumes (in the example we used C:\TestVm), using the following command:
md c:\TestVm
Then you need to strip off all the inherited ACEs (Access control entries; see Chapter 7 of Part 1 
for further details) and add full access ACEs for the administrators group and the current logged-
on user. The following commands perform the described actions (you need to replace C:\TestVm 
with the path of your directory and  with your currently logged-on user name): 
icacls c:\TestVm /inheritance:r 
icacls c:\TestVm /grant Administrators:(CI)(OI)F 
icacls c:\TestVm /grant :(CI)(OI)F
To verify that the folder has the correct ACL, you should open File Explorer (by pressing Win+E 
on your keyboard), right-click the folder, select Properties, and finally click the Security tab. You 
should see a window like the following one:
Open the Hyper-V Manager, create a VM (and its relative virtual disk), and store it in the newly 
created folder (procedure available at the following page: https://docs.microsoft.com/en-us 
/virtualization/hyper-v-on-windows/quick-start/create-virtual-machine). For this experiment, you 
don’t really need to install an OS on the VM. After the New Virtual Machine Wizard ends, you 
should start your VM (in the example, the VM is VM1).
In this experiment, you will create a new virtual machine through the Hyper-V manager in a 
location that’s accessible only to the current user and to the administrators group, and you will 
check how the security of the VM files and the VM Worker process change accordingly.
First, open an administrative command prompt and create a folder in one of the workstation’s 
volumes (in the example we used C:\TestVm), using the following command:
md c:\TestVm
Then you need to strip off all the inherited ACEs (Access control entries; see Chapter 7 of Part 1 
for further details) and add full access ACEs for the administrators group and the current logged-
on user. The following commands perform the described actions (you need to replace C:\TestVm 
with the path of your directory and  with your currently logged-on user name): 
icacls c:\TestVm /inheritance:r
icacls c:\TestVm /grant Administrators:(CI)(OI)F
icacls c:\TestVm /grant :(CI)(OI)F
To verify that the folder has the correct ACL, you should open File Explorer (by pressing Win+E 
on your keyboard), right-click the folder, select Properties, and finally click the Security tab. You 
should see a window like the following one:
Open the Hyper-V Manager, create a VM (and its relative virtual disk), and store it in the newly 
created folder (procedure available at the following page: https://docs.microsoft.com/en-us
/virtualization/hyper-v-on-windows/quick-start/create-virtual-machine). For this experiment, you 
don’t really need to install an OS on the VM. After the New Virtual Machine Wizard ends, you 
should start your VM (in the example, the VM is VM1).
CHAPTER 9 Virtualization technologies
321
Open a Process Explorer as administrator and locate the vmwp.exe process. Right-click it 
and select Properties. As expected, you can see that the parent process is vmcompute.exe (Host 
Compute Service). If you click the Security tab, you should see that the VM SID is set as the 
owner of the process, and the token belongs to the Virtual Machines group:
The SID is composed by reflecting the VM GUID. In the example, the VM’s GUID is {F156B42C-
4AE6-4291-8AD6-EDFE0960A1CE}. (You can verify it also by using PowerShell, as explained in 
the “Playing with the Root scheduler” experiment earlier in this chapter). A GUID is a sequence of 
16-bytes, organized as one 32-bit (4 bytes) integer, two 16-bit (2 bytes) integers, and 8 final bytes.
The GUID in the example is organized as:
I 
0xF156B42C as the first 32-bit integer, which, in decimal, is 4048991276.
I 
0x4AE6 and 0x4291 as the two 16-bit integers, which, combined as one 32-bit value, is
0x42914AE6, or 1116818150 in decimal (remember that the system is little endian, so the less
significant byte is located at the lower address).
I 
The final byte sequence is 0x8A, 0xD6, 0xED, 0xFE, 0x09, 0x60, 0xA1 and 0xCE (the third
part of the shown human readable GUID, 8AD6, is a byte sequence, and not a 16-bit value),
which, combined as two 32-bit values is 0xFEEDD68A and 0xCEA16009, or 4276999818 and
3466682377 in decimal.
Open a Process Explorer as administrator and locate the vmwp.exe process. Right-click it 
and select Properties. As expected, you can see that the parent process is vmcompute.exe (Host 
Compute Service). If you click the Security tab, you should see that the VM SID is set as the 
Security tab, you should see that the VM SID is set as the 
Security
owner of the process, and the token belongs to the Virtual Machines group:
The SID is composed by reflecting the VM GUID. In the example, the VM’s GUID is {F156B42C-
4AE6-4291-8AD6-EDFE0960A1CE}. (You can verify it also by using PowerShell, as explained in 
the “Playing with the Root scheduler” experiment earlier in this chapter). A GUID is a sequence of 
16-bytes, organized as one 32-bit (4 bytes) integer, two 16-bit (2 bytes) integers, and 8 final bytes. 
The GUID in the example is organized as:
I
0xF156B42C as the first 32-bit integer, which, in decimal, is 4048991276.
I
0x4AE6 and 0x4291 as the two 16-bit integers, which, combined as one 32-bit value, is 
0x42914AE6, or 1116818150 in decimal (remember that the system is little endian, so the less 
significant byte is located at the lower address).
I
The final byte sequence is 0x8A, 0xD6, 0xED, 0xFE, 0x09, 0x60, 0xA1 and 0xCE (the third 
part of the shown human readable GUID, 8AD6, is a byte sequence, and not a 16-bit value), 
which, combined as two 32-bit values is 0xFEEDD68A and 0xCEA16009, or 4276999818 and 
3466682377 in decimal. 
322 
CHAPTER 9 Virtualization technologies
If you combine all the calculated decimal numbers with a general SID identifier emitted by the 
NT authority (S-1-5) and the VM base RID (83), you should obtain the same SID shown in Process 
Explorer (in the example, S-1-5-83-4048991276-1116818150-4276999818-3466682377). 
As you can see from Process Explorer, the VMWP process’s security token does not include the 
Administrators group, and it hasn’t been created on behalf of the logged-on user. So how is it pos-
sible that the VM Worker process can access the virtual hard disk and the VM configuration files?
The answer resides in the VMMS process, which, at VM creation time, scans each component 
of the VM’s path and modifies the DACL of the needed folders and files. In particular, the root 
folder of the VM (the root folder has the same name of the VM, so you should find a subfolder in 
the created directory with the same name of your VM) is accessible thanks to the added virtual 
machines security group ACE. The virtual hard disk file is instead accessible thanks to an access-
allowed ACE targeting the virtual machine’s SID.
You can verify this by using File Explorer: Open the VM’s virtual hard disk folder (called Virtual 
Hard Disks and located in the VM root folder), right-click the VHDX (or VHD) file, select Properties, 
and then click the Security page. You should see two new ACEs other than the one set initially. (One 
is the virtual machine ACE; the other one is the VmWorker process Capability for AppContainers.)
If you stop the VM and you try to delete the virtual machine ACE from the file, you will 
see that the VM is not able to start anymore. For restoring the correct ACL for the virtual 
hard disk, you can run a PowerShell script available at https://gallery.technet.microsoft.com/
Hyper-V-Restore-ACL-e64dee58.
If you combine all the calculated decimal numbers with a general SID identifier emitted by the 
NT authority (S-1-5) and the VM base RID (83), you should obtain the same SID shown in Process 
Explorer (in the example, S-1-5-83-4048991276-1116818150-4276999818-3466682377). 
As you can see from Process Explorer, the VMWP process’s security token does not include the
Administrators group, and it hasn’t been created on behalf of the logged-on user. So how is it pos-
sible that the VM Worker process can access the virtual hard disk and the VM configuration files?
The answer resides in the VMMS process, which, at VM creation time, scans each component 
of the VM’s path and modifies the DACL of the needed folders and files. In particular, the root 
folder of the VM (the root folder has the same name of the VM, so you should find a subfolder in 
the created directory with the same name of your VM) is accessible thanks to the added virtual 
machines security group ACE. The virtual hard disk file is instead accessible thanks to an access-
allowed ACE targeting the virtual machine’s SID.
You can verify this by using File Explorer: Open the VM’s virtual hard disk folder (called Virtual
Hard Disks and located in the VM root folder), right-click the VHDX (or VHD) file, select Properties, 
and then click the Security page. You should see two new ACEs other than the one set initially. (One 
Security page. You should see two new ACEs other than the one set initially. (One 
Security
is the virtual machine ACE; the other one is the VmWorker process Capability for AppContainers.)
If you stop the VM and you try to delete the virtual machine ACE from the file, you will 
see that the VM is not able to start anymore. For restoring the correct ACL for the virtual 
hard disk, you can run a PowerShell script available at https://gallery.technet.microsoft.com/
Hyper-V-Restore-ACL-e64dee58.
CHAPTER 9 Virtualization technologies
323
VMBus
VMBus is the mechanism exposed by the Hyper-V virtualization stack to provide interpartition commu-