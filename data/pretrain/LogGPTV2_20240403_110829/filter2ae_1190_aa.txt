# 前言
最近在给学校的社团成员进行web安全方面的培训，由于在mysql注入这一块知识点挺杂的，入门容易，精通较难，网上相对比较全的资料也比较少，大多都是一个比较散的知识点，所以我打算将我在学习过程中遇到的关于的mysql注入的内容给全部罗列出来，既方便个人之后的复习，也方便后人查找相关资料。
本文部分内容可能会直接截取其他大牛的文章，截取的内容我都会进行声明处理。如有侵权，请发email联系我(asp-php#foxmail.com)删除。
# Mysql简介
在正式讲解mysql注入的内容前，我认为还是有必要说明一下什么是mysql、mysql的特点是什么等内容，这些东西看起来可能对注入毫无帮助，开始却能很好的帮助我们学习，融会贯通。
> MySQL是一个关系型数据库管理系统，由瑞典 MySQL AB 公司开发，目前属于 Oracle 公司。MySQL 是一种 **关联数据库管理系统**
> ，关联数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。
>
>   * MySQL是 **开源** 的，所以你不需要支付额外的费用。
>   * MySQL使用 **标准的 SQL 数据语言** 形式。
>   * MySQL可以运行于多个系统上，并且 **支持多种语言** 。这些编程语言包括
> C、C++、Python、Java、Perl、PHP、Eiffel、Ruby 和 Tcl 等。
>   * MySQL **对PHP有很好的支持** ，PHP 是目前最流行的 Web 开发语言。
>   * MySQL **支持大型数据库** ，支持 5000 万条记录的数据仓库，32 位系统表文件最大可支持 4GB，64
> 位系统支持最大的表文件为8TB。
>   * MySQL是 **可以定制的** ，采用了 GPL 协议，你可以修改源码来开发自己的 MySQL 系统。
>
>
> 引自：[Mysql教程 | 菜鸟教程](https://www.runoob.com/mysql/mysql-tutorial.html)
一个完整的mysql管理系统结构通常如下图：
可以看到，mysql可以管理 **多个数据库** ，一个数据库可以包含 **多个数据表** ，而一个数据表有含有 **多条字段** ，一行数据正是
**多个字段同一行** 的一串数据。
# 什么是SQL注入？
简单的来说，SQL注入是开发者没有对用户的输入数据进行严格的限制/转义，致使用户在输入一些特定的字符时，在与后端设定的sql语句进行拼接时产生了歧义，使得用户可以控制该条sql语句与数据库进行通信。
举个例子：
    fetch_row()){
        echo "success";
    }else{
        echo "fail";
    }
    ?>
上述代码将模拟一个web应用程序进行登录操作。若登录成功，则返回success，否则，返回fail。
通常正常用户进行登录的sql语句为：
    select * from users where username = '$username' and password='$password'
其中，变量$username
与变量$password为用户可以控制的内容，正常情况下，用户所输入的内容在sql语义上都将作为字符错，被赋值给前边的字段来当做整条select查询语句的筛选条件。
若用户输入的$username为`admin'#`，$password为`123`。那么拼接到sql语句中将得到如下结果：
    select * from users where username = 'admin'#' and password='123'
这里的`#`是单行注释符，可以将后边的内容给注释掉。那么此条语句的语义将发生了变化，用户可以不需要判断密码，只需一个用户名，即可完成登录操作，这与开发者的初衷相悖。
# Mysql注入-入门
我们知道，在数据库中，常见的对数据进行处理的操作有： **增、删、查、改** 这四种。
每一项操作都具有不同的作用，共同构成了对数据的绝大部分操作。
  * 增。顾名思义，也就是增加数据。在通用的SQL语句中，其简单结构通常可概述为: `INSERT table_name(columns_name) VALUES(new_values)`。
  * 删。删除数据。简单结构为: `DELETE table_name WHERE condition`。
  * 查。查询语句可以说是绝大部分应用程序最常用到的SQL语句，他的作用就是查找数据。其简单结构为：`SELECT columns_name FROM table_name WHERE condition`。
  * 改。有修改/更新数据。简单结构为:`UPDATE table_name SET column_name=new_value WHERE condition`。
PS：以上SQL语句中，系统关键字全部进行了大写处理。
## 查
mysql的查询语句完整格式如下：
    SELECT
        [ALL | DISTINCT | DISTINCTROW ]
          [HIGH_PRIORITY]
          [STRAIGHT_JOIN]
          [SQL_SMALL_RESULT] [SQL_BIG_RESULT] [SQL_BUFFER_RESULT]
          [SQL_CACHE | SQL_NO_CACHE] [SQL_CALC_FOUND_ROWS]
        select_expr [, select_expr ...]
        [FROM table_references
          [PARTITION partition_list]
        [WHERE where_condition]
        [GROUP BY {col_name | expr | position}
          [ASC | DESC], ... [WITH ROLLUP]]
        [HAVING where_condition]
        [ORDER BY {col_name | expr | position}
          [ASC | DESC], ...]
        [LIMIT {[offset,] row_count | row_count OFFSET offset}]
        [PROCEDURE procedure_name(argument_list)]
        [INTO OUTFILE 'file_name'
            [CHARACTER SET charset_name]
            export_options
          | INTO DUMPFILE 'file_name'
          | INTO var_name [, var_name]]
        [FOR UPDATE | LOCK IN SHARE MODE]]
通常注入点发生在where_condition处，并不是说唯有此处可以注入，其他的位置也可以，只是我们先将此处的注入当做例子来进行讲解，之后会逐渐降到其他的位置该如何进行注入。
对于`SELECT`语句，我们通常分其为两种情况：有回显和无回显。
### 有回显
什么叫有回显？别急，我们来举个例子。
当我们点击一篇文章阅读时，其URL为`read.php?id=1`，我们可以很容易地猜出其SQL语句可能为`select * from articles
where id='$id'`。
这时候页面将SQL语句返回的内容显示在了页面中(本例中是标题、内容、作者等信息)，这种情况就叫有回显。
对于有回显的情况来说，我们通常使用 **联合查询注入法** 。
#### 联合查询注入
其作用就是，在原来查询条件的基础上，通过系统关键字`union`从而拼接上我们自己的`select`语句，后个`select`得到的结果将拼接到前个`select`的结果后边。如：前个`select`得到2条数据，后个`select`得到1条数据，那么后个`select`的数据将作为
**第3条** 拼接到第一个`select`返回的内容中，其字段名将 **按照位置** 关系进行继承。
如：`正常查询语句 union select columns_name from (database.)table_name where
condition`
这里需要注意的是：
  * 若回显仅支持一行数据的话，记得 **让前边正常的查询语句返回的结果为空** 。
  * 使用union select进行拼接时，注意 **前后两个select语句的返回的字段数必须相同** ，否则无法拼接。
### 无回显
什么叫无回显？之前举得登录判断就是一个无回显的例子。如果SQL语句存在返回的数据，那么页面输出为success，若不存在返回的数据，则输出fail。
与有回显情况不同的是：无回显的页面输出内容并不是SQL语句返回的内容。
对于无回显的情况，我们通常可用两种方法进行注入： **报错注入** 与 **盲注** 。
#### 报错注入
什么是报错注入，简单的说，就是有些特殊的函数，会在其报错信息里可能会返回其参数的值。
我们可以利用这一特性，在其参数放入我们想要得到的数据，通常使用子查询的方法实现，最后让其报错并输出结果。
    正常语句 (where | and) exp(~(select * from(select user())a));
    正常语句 (where | and) updatexml(1,concat(0x7e,(select user()),0x7e),1);
#### 盲注
若网站设置了无报错信息返回，那么在 **不直接返回数据+不返回报错信息** 的情况下，盲注便几乎成了最后一种直接注入取数据的方法了。
其中，盲注分成 **布尔盲注** 和 **时间盲注** 。
##### 布尔盲注
对于布尔盲注来说，其使用的场景在于： **对真/假条件返回的内容很容易区分** 。
比如说，有这么一条正常的select语句，我们再起where条件后边加上and
1=2，我们知道，1永远不等于2，那么这个条件就是一个永假条件，我们使用and语句连上，那么整个where部分就是永假的，这时候select语句是不会返回内容的。将其返回的内容与正常页面进行对比，如果很容易区分的话，那么布尔盲注试用。
如：`正常语句 (where | and) if(substr((select password from users where
username='admin'),1,1)='a',1,0)`
##### 时间盲注
相比较于布尔盲注，时间盲注依赖于通过 **页面返回的延迟时间** 来判断条件是否正确。
使用场景：布尔盲注永假条件所返回的内容与正常语句返回的内容很接近/相同，无法判断情况。
简单的来说，时间盲注就是，如果我们自定义的条件为假的话，我们让其0延迟通过，如果条件为真的话，使用sleep()等函数，让sql语句的返回产生延迟。
如：`正常语句（where | and）if(substr((select password from users where
username='admin'),1,1)='a',sleep(3),1)`
最后总结一下:
常见注入方法有三种：`联合查询注入、报错注入、盲注`，其中：
  * 有回显： **三种均可使用** ，推荐使用联合查询注入。
  * 无回显： **报错注入+盲注可用** 。
对于时间成本来说：联合查询注入=5.0
首先去一个名为 **information_schema** 的数据库里的 **shemata** 数据表查询 **全部数据库名** 。
若不需要跨数据库的话，可直接跳过此步骤，直接查询相应的数据库下的全部数据表名。
在information_schema的一个名为 **tables** 的数据表中存着全部的 **数据表信息** 。
其中， **table_name 字段保存其名称** ， **table_schema保存其对应的数据库名** 。
    union select 1,2,group_concat(table_name),4,xxxx from information_schema.tables where table_schema=database();
上述payload可查看全部的数据表名，其中group_concat函数将多行数据转成一行数据。
接着通过其表名，查询该表的所有字段名，有时也称列名。
通过information_schema库下的 **columns** 表可查询对应的数据库/数据库表含有的字段名。
    Union select 1,2,group_concat(column_name),4,xxxx from information_schema.columns where table_schema=database() and table_name=(table_name)#此处的表名为字符串型，也通过十六进制表示
知道了想要的数据存放的数据库、数据表、字段名，直接联合查询即可。
    Union select 1,2,column_name,4,xxx from (database_name.)table_name
简单的说， **查库名- >查表名->查字段名->查数据**
### 盲注步骤：
核心：利用 **逻辑代数连接词/条件函数** ，让页面 **返回的内容/响应时间** 与正常的页面不符。
#### _布尔盲注：_
首先通过页面对于永真条件`or 1=1`与永假条件`and 1=2`的返回内容是否存在差异进行判断是否可以进行布尔盲注。
如：`select * from users where username=$username`，其作用设定为 _判断用户名是否存在_ 。
通常仅返回 **存在/不存在** ，两个结果。
这时候我们就不能使用联合查询法注入，因为页面显示SQL语句返回的内容，只能使用 **盲注法/报错注入法** 来注出数据。
我们在将语句注入成：`select * from users where username=$username or (condition)`
若后边拼接的条件为真的话，那么整条语句的where区域将变成 **永真** 条件。
那么，即使我们在$username处输入的用户名为一个铁定不存在的用户名，那么返回的结果也仍然为存在。
利用这一特性，我们的condition为：length(database())>8 即可用于判断数据库名长度
除此之外，还可：ascii(substr(database(),1,1))8
    select * from users where username=nouser or ascii(substr(database(),1,1))8,sleep(3),1)
如果数据库名的长度大于8，那么if条件将执行sleep(3)，那么此条语句将进行延迟3秒的操作。
若小于或等于8，则if条件直接返回1，并与前边的逻辑连接词拼接，无延迟直接返回。通常的响应时间在0-1秒之内，与上种情况具有很容易区分的结果，可做条件判断的依据。
### 报错注入步骤：
通过 **特殊函数** 的错误使用使其参数被页面输出。