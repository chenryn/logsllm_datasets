If the retrieval succeeds and the encrypted symmetric key is
found, u2 decrypts it using his own public key and obtains
the symmetric key s.
If the retrieve fails, u2 constructs a new symmetric key
s, encrypts it with his own PKC public key and stores it
in u2.SS under the tag H(AS, APK ). u2 further encrypts
s using ABEEncrypt with access structure AS and APK and
stores this ABE-encrypted symmetric key on u2.SS with the
tag H0(AS, APK ). H0 is a hash function diﬀerent from H.
By construction, the ABE-encrypted key can be decrypted
exactly by those users who belong to the group to which the
message is encrypted. This group may not include u2. If u2
wishes to encrypt s with traditional PKC instead of ABE,
u2 encrypts with public key TPK and stores the encrypted
key at H0(TPK ).
Finally, u2 encrypts the message using s and stores it using
tag M . u2 can then publish a reference to this item of the
form:
hM, u2.SS, H
0
(AS, APK ), u2.SSi
Other users resolve the reference by invoking u2.SS.get(M )
which will retrieve the original message encrypted with s.
In this example, u2 obtained the decryption key from his
own storage service (or created a new key and put it on his
own storage service). In general, however, u2 may already
know a diﬀerent key for this group (for example, one that
was used by a diﬀerent user to encrypt to the same group)
that is stored on some other storage service. Instead of cre-
ating his own key, u2 may choose to refer to this pre-existing
key instead.
4. APPLICATIONS
Persona users interact using applications. Even core func-
tions of current OSNs, including the Facebook Wall or Pro-
ﬁle, exist in Persona as applications.
In this section, we
describe how applications use the group key and resource
management operations of Section 3.
Persona applications export a set of functions (an API)
and a set of resources over which those functions operate.
When there are resources, such as ﬁle stores or documents,
two functions are expected in the API. First, register allo-
cates a resource for a principal (to create a Wall, for exam-
ple). Registration with an application returns a reference to
the newly-allocated resource to the client. Second, chACL
allows the owning principal to deﬁne access restrictions via
ACLs: for a given resource and a given principal, permit an
139operation. Applications will support further operations, as
we describe below, starting with the basic storage service.
4.1 Storage Service
Storage is a basic Persona application that enables users
to store personal data, make it available to others who re-
quest it, and sublet access to storage for applications to use
for per-user metadata. A user trusts a storage service to
reliably store data, provide it upon request, and protect it
from overwrite or deletion by unauthorized users. A user
does not trust a storage service to keep data conﬁdential,
relying instead on encryption to guard private information.
The storage service exports both get and put functions.
The storage application returns data whenever the get is
invoked with a valid tag. The invoking principal is not au-
thenticated or validated, since the expectation is that data
is protected via encryption.
The put function requires the invoking principal n to au-
thenticate to the storage application. When n wants to put
data, she presents her public key K and the store identiﬁer s
to the storage application. The storage application ensures
that (K, put) exists in the resource ACL corresponding to s,
and authenticates n using a challenge-response protocol. n
may write into s if the authentication succeeds.
Applications must store the metadata they have constructed.
They can provide their own storage or use a storage ser-
vice.
If the application provides its own storage resource,
the application returns a handle to the resource when a
user registers with the application. The user can then call
AssignRightsToIdentity to give other users access to the ap-
plication’s storage resource.
The user can instead provide the storage resource to the
application and invoke:
AssignRightsToIdentity(user, write, App.TPK , c, user.SS)
where c is a storage resource on user.SS, to allow the appli-
cation to write onto the user’s storage server. The user now
registers with the application, passing it the storage resource
c in which to store the metadata:
R ← App.register(user.TPK , c)
In turn, the application returns a reference (R) to the re-
source corresponding to the application instance.
To prevent an attack in which another user u2 pretends
to own c, the registering user must prove that he owns c.
He does this by writing a nonce provided by the application
into c. The application ensures the nonce is present before
writing.
4.2 Collaborative Data
The predominant method of sharing data in OSNs is via
collaborative multi-reader/writer applications. For instance,
the quintessential Facebook application, the Wall, is a per-
user forum that features posts and comments from the user
and his friends, the Facebook Photos application stores com-
ments and tags for each picture and displays them to friends,
the MySpace comments section allows friends to write to a
user’s page and read others’ comments, and each photograph
posted to Flickr has a page where members of the Flickr
community can comment on photographs.
Instead of re-
implementing each OSN application in Persona, we present
a generic multi-reader multi-writer application named Doc.
Doc can be used as a template for implementing a variety
of OSN applications, as we describe in Sections 4.2.1–4.2.4.
Doc is organized around a document shared between col-
laborating users. Users register with the Doc application
and create a new Page. The application associates a re-
source with this Page, and allows the user to provide read or
write access to other users (or groups). The Page metadata
contains references to encrypted data; the application is re-
sponsible for formatting this data for display. Users who are
allowed to write to the Page contact the application with
data references, and Doc updates the Page appropriately.
The Page can be stored by the application or on a storage
server speciﬁed by the original user (in which case the user
has to provide the Doc with write access to the Page stored
on the storage server). We describe these steps next.
Reading the Page. To allow Bob to read content in her
Page, Alice must give Bob appropriate keys and a reference
to her Doc. In particular, Alice must provide an attribute
secret key ASK that will allow him to decrypt (some subset
of) the data in the Page. Alice decides which attributes Bob
should get and calls
DeﬁneRelationship(Alice, attrs, Bob)
to issue an ASK to Bob. Obviously, Alice may already have
given Bob these attributes, in which case this step can be
skipped. In either case, she provides him with a reference
to her Page.
Bob can now retrieve the Page metadata, resolve data
references, and decrypt (potentially only a subset of) the
Page data.
Writing to the Page. Alice may want to provide Bob
with the ability to write to her Page, where writing is a func-
tion exported by the Doc application. She does so by adding
Bob’s public key to the Page’s resource ACL by invoking:
AssignRightsToIdentity(Alice, write, Bob.TPK , D, Doc)
Bob may now write onto the Page. Bob stores (appropri-
ately encrypted) data onto a storage-server and notiﬁes the
Doc of a write onto Alice’s Page. The Doc application must
authenticate Bob and ensure that his public key is in Alice’s
Page’s ACL with the proper right. If the authentication suc-
ceeds and Alice has provided Bob the write right, then the
Doc application updates the Page metadata (either stored
at the application or on a storage server speciﬁed by Alice)
with the data reference provided by Bob. The interpretation
of the Page metadata is application-speciﬁc.
Alice may authorize multiple users to write to the same
Page. Conﬂicting updates or concurrent writes are handled
by the Doc application, possibly by storing the Page as an
append-only log. Users need not encrypt using a single ac-
cess structure, and may choose any access structure they
desire. They may even write onto a Page using an access
structure that cannot be decrypted by some of the Page’s
readers.
In summary, Doc is a general multi-reader/writer tem-
plate for storing and formatting metadata with references to
encrypted content. Doc can easily be tailored to implement
many useful OSN applications, as we demonstrate next.
4.2.1 Wall using Doc
The Facebook Wall is a multi-user collaborative applica-
tion that allows a user’s friends to read messages, post mes-
sages, and comment on posts onto a shared document, called
140the user’s Wall. Doc can be used to (almost trivially) imple-
ment the Wall application. Unlike the Facebook Wall, the
Persona Wall is distributed: it allows users to choose where
the Wall metadata is stored. All posts and comments are
stored on storage servers owned by the poster/commenter.
The Wall document itself contains rendering information
and references to writes onto the wall. These references must
be resolved (i.e., the data fetched from appropriate storage
servers) and decrypted before rendering the Wall. End-user
applications may intelligently cache data and keys to reduce
rendering latency.
4.2.2 Chat and Status Updates over Doc
A chat application can use Doc as the template. A chat
session is a shared document to which the chat host invites
other users (and provides them write access to the chat Doc).
The chat application has to implement auxiliary UI func-
tions (such as an invite notiﬁcation, and polling for new
messages), but the basic structure follows that of a simple
Doc onto which users may append messages.
Doc can also be used to implement user-speciﬁc status
updates. The user creates a status Doc and provides read-
only access to other users (or groups) who can periodically
read the Doc to receive updates. The reference to the status
update Doc may be obfuscated such that unauthorized users
are not able to detect changes in status (even if they are not
able to decrypt the status message).
4.2.3 News Feed using Doc
The news feed in Facebook collects “stories” from other
applications to provide a temporal view of Facebook activ-
ity. In Persona, the user provides the news feed with a list
of applications that he wants to appear in his feed, and an
APK and AS (or perhaps several access structures along with
a policy dictating when to use each access structure) with
which to encrypt the feed. Only the user may change the
list of monitored applications. The news feed application
retrieves the metadata from the selected applications and
parses it to create a history of changes to the user’s appli-
cations’ metadata. The application writes this history as
a user would write a Page; only the news feed may write
to this metadata. Viewing the feed consists of viewing the
Page. The contents of the Page are visible to anyone that
can satisfy AS.
4.2.4 Other Applications
Other popular Facebook applications such as Proﬁles, Pho-
tos, Groups, and Events can be implemented using Doc as
well. These applications can be implemented by altering
the interpretation and presentation of metadata and tailor-
ing the API to the relevant task. Though Doc is suﬃcient
for many Facebook applications, we consider examples of
existing applications that require additional features in the
following sections.
4.3 Selective Revelation
The user may want to share some personal data with an
application. One such example is an application that allows
users to search for others. Alice can choose exactly the in-
formation by which other users can ﬁnd her by only sharing
that data with a Search application. Another example is the
Where I’ve Been Facebook application [36]. Users enter a
list of countries or cities that they have lived in, visited, or
want to visit, and the application shows a map with these
locations highlighted. Users can also compare maps with
another user to see which locations they have in common.
In order to permit applications that post-process personal
data, we allow them to decrypt certain data by giving them
an ASK . Alice encrypts a list of cities she has visited with
the access structure (‘classmates’ or ‘where-ive-been’). She
generates an ASK and encrypts it with the Where I’ve Been
application’s TPK :
DeﬁneRelationship(Alice, ‘where-ive-been’, Where I’ve Been)
When she registers to use the application, she gives it a
reference to the encrypted key. The application retrieves
the key and can now decrypt and parse Alice’s list of cities
to produce the highlighted map. This general approach of
selectively revealing user data to applications has been dis-
cussed earlier in [20].
Application functionality that can be implemented with-
out revealing personal information is surprisingly broad; how-
ever, in some cases, the application must compute trans-
forms over the user’s data. This is the case for the Where
I’ve Been application, especially when it has to compare
the locations of multiple users. We return to the general
problem of structuring private applications and the tussle
between application functionality and user privacy in Sec-
tion 8.
4.4 Applications that use the social graph
The graph of social connections between Persona users is
not public. It is realized only in the collections of public keys
of friends a user stores, and given meaning only through the
assignment of attributes using DeﬁneRelationship. This ob-
scurity of friend links frustrates applications such as those
that analyze the graph of connections to help connect with
more friends (People You May Know) or to visualize inter-
connections between friends (the Friend Wheel).
To enable these applications, users have two options. A
user may publish social links to each application using selec-
tive revelation or by directly uploading a set of relationships.
Alternatively, a single, somewhat trusted social link appli-
cation might provide access to other applications.
Published edges in the social graph are protected just as
other data in Persona: encrypted to be hidden from arbi-
trary users and applications, but exported to chosen users
and useful applications that may access only what they re-
quire.
4.5 Inherently private applications
Persona allows for potential applications which are not re-
alistic on OSNs without privacy. For instance, a user might
want to have a Medical Record application where she stores
her medical data. She might not want her employer or her