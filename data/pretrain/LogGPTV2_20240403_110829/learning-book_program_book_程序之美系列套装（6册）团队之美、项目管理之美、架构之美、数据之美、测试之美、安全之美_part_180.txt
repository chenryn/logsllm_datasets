//simple string data field
class FQLUserBooks extends FQLStringUserField{}
//simple string data field
class FQLUserPic extends FQLStringUserField{}
1011
---
## Page 1013
FQLUserPic和FQLUserBooks的区别仅限于它们的内部属性$this->
name，这是由它们的构造方法在处理过程中设置的。请注意，在底
层，我们针对表达式中需要的每次求值调用user_getinfo；只有系统
将这些结果缓存在内存中，才能取得较好的性能。Facebook的实现
就是这样做的，整个查询执行的时间与标准平台API调用的时间是
同一量级的。
下面是一个更复杂的字段，表示current_location，它采用的是同样
的输入，展示了同样的使用模式，但输出了一个我们前面曾看到过
的结构类型对象（例6-19）。
例6-19：更复杂的FQL字段映射
//complex object data field
class FQLUserCurrentLocation extends FQLStringUserField(
public function evaluate ($id){
$info=user_get_info (Sid) :
if （$info&&isset（$info['current_location′]））{
$location=new apil0_location ($info['current_location']) ;
lelse{
$location=new api10_location () ;
return$location:
上
像api10_location这样的对象是6.2.1小节中所说的生成的类型，Thrift
和Facebook数据服务知道如何将它返回为良好类型的XML。现在我
们知道，为什么就算是新的输入形式，FQL的输出也不会与
FacebookAPI产生不兼容的情况。
1012
---
## Page 1014
在下面的例子中，FQLStatement的主要求值循环告诉了我们FQL实
现的大致思想。在这段代码中我们引用了FQLExpression，但在简单
的查询中，我们更有可能提到的是FQLFieldExpression，它包装了对
FQLField自己的求值和can_see方法的内部调用，如例6-20所示。
例6-20：一个简单的FQL表达式类
class FQLFieldExpression(
//instantiated with an FQLField in the"field"property
public function evaluate ($id)(
if ($this->field->can_see ($id))
return$this->field->evaluate ($id) ;:
else
return new FQLCantSee (): //becomes an error message or
omitted field
上
public function get_name () {
return$this->field_name
上
要发起整个流程，类似SQL的字符串输入通过lex和yacc转换成主要
FQLStatement的$select表达式数组和$where表达式。FQLStatemenet
的evaluate（）函数将返回我们请求的对象。例6-21中的主语句求值
循环包括了以下步骤，说明了简单的大致顺序：
1.取得我们希望返回的行在索引上的约束。例如，如果在用户表上
选取，这就是我们想查询的那些UID。如果我们在一个按时间索引
的事件表上查询，这就是时间边界。
1013
---
## Page 1015
2.将这些转换成表的规范ID。用户表也可以按字段名查询，如果
FQL表达式使用了字段名称，这个函数就会使用内部的user_name到
user_id的查找函数。
3.针对每个候选ID，看看它是否满足RHS表达式子句（布尔逻辑、
比较、“IN"操作等）。如果不满足，就抛弃它。
4.对每个表达式求值（在我们的例子里，就是SELECT子句中的字
段），然后创建COL_VALUE格式
的XML元素，其中COL_NAME是FQLTable中的字段名称，
COL_VALUE是字段通过它对应的FQLField的求值函数进行求值的结
果。
例6-21：FQL的主求值流程
class FQLStatement {
//contains the following members:
//$select: array of FQLExpressions from the SELECT clause
of the query
//$from: FQLTable object for the source table
//$where: FQLExpression containing the constraints for the
anh
//$user, $app_id: calling user and app_id
public function__construct ($select， $from, $where， $user,
$app_id)(..)}
//A listing of all known tables in the FQL system.
public static$tables=array (
'user'=>'FQLUserTable',
'friend'=>'FQLFriendTable',
）：
1014
---
## Page 1016
//returns XML elements to be translated to service output
public function evaluate () {
//based on the WHERE clause, we first get a set of query
expressions that
//represent the constraints on values for the indexable
columns contained
//in the WHERE clause
//Get all"right hand side" (RHS) constants matching
ids (e.g.X, in*uid=X')
$queries=$this->where->get_queries （) ;
//Match to the row's index.If we were using'name'as an
alternative index
//to the user table,we would transform it here to the uid.
$index_ids=$this->from_table->
get_ids_for_queries ($queries) :
//filter the set of ids by the WHERE clause and LIMIT
params
$result_ids=array () :
foreach ($ids as$id){
$where_result=$this->where->evaluate ($id) ;
//see if this row passes the'WHERE'constraints
//is not restricted by privacy
if ($where_result&&!(Swhere_result instanceof
FQLCantSee))
$result_ids []=$id;
上
$result=array () :
1015
---
## Page 1017
//fill in the result array with the requested data
foreach ($result_ids as$id) {
{//e.g."books"or"pic"
$name=$expression->get_name （) ;
$col=$expression->evaluate ($id) : //returns the value
if ($col instanceof FQLCantSee)
$col=null:
$row->value[]=new xml_element ($name, $col) :
$result[]=$row;
returnresult:
FQL还有其他一些精妙之处，但这个总体流程说明了已有的内部数
据访问和隐私规则实现与全新的查询模型的结合。这让开发者能够
更快地处理它的请求，能够以比API更好的粒度来访问数据，同时
又保持了SQL类似的语法。
由于我们的许多API在内部包装了对应的FQL方法，我们的整体架构
演变为图6-4所示的状况。
1016
---
## Page 1018
App数据
SQL对象
HTML,JS,
S_REQUEST
App逻辑层
(obj)
App显示层
CSS
浏览器
FB服务
App基础设施
FB API
FB基础设施
FQL
隐私规则
FB数据
图6-4：通过Web和查询服务来使用Facebook数据的应用栈
6.4创建一个社会关系Web门户：FBML
前面讨论的服务让外部的应用栈能够在它们的系统中包含社会关系
平台的数据，这是很大的进步。这些数据架构实现了让社会关系平
台数据更开放的承诺：外部应用（如http://fettermansbooks.com）和
数据平台（如http://facebook.com）的共同用户可以共享信息，每个
新的社会关系应用就不需要一个新的社会关系网络。但是，即使有
了这些新的能力，这些应用还是不能享受Facebook这样的社会关系
网站的全部强大功能。应用还需要让许多用户发现，才会变得有价
值。而且，并不是所有支持社会关系平台的内部数据都可以提供给
这些外部的应用栈。平台的创建者需要解决这些问题，我们将依次
讨论。实际问题：对于社会关系应用来说，要获得引人注目的关键
性用户数，支持它的社会关系网络上的用户必须要能注意到其他用
户在利用这些应用进行交互。这意味着应用与社会关系网站更深层
次上的集成。
1017
---
## Page 1019
这个问题在早期的软件中就存在了：我们难以让数据、产品或系统
得到广泛使用。缺少用户成为Web2.0空间中特别值得一提的困难，
因为如果没用户使用并且（特别是）生成内容，我们的系统什么时
候才有用呢？
Facebook支持大量的用户，他们对在社会联系之间共享信息感兴
趣，而且Facebook的特点就是把应用的内容和它自己的内容等同视
之。让外部的应用出现在Facebook站点上，就会让大小开发者开发
的应用更容易发现，帮助他们获得支持好的社会关系功能所需的关
键性用户数。