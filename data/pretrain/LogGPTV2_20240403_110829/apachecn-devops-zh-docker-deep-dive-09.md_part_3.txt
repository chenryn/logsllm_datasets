此外，作为`docker-compose up`操作的一部分构建或提取的任何映像仍将出现在系统上。这意味着该应用的未来部署将会更快。
让我们看看其他几个`docker-compose`子命令。
使用以下命令再次打开应用，但这次是在后台。
```
$ docker-compose up -d
Creating network "counter-app_counter-net" with the default driver
Creating counter-app_redis_1  ... done
Creating counter-app_web-fe_1 ... done 
```
 `看看这一次应用是如何启动得更快的——第`counter-vol`卷已经存在，并且所有映像都已经存在于 Docker 主机上。
使用`docker-compose ps`命令显示应用的当前状态。
```
$ docker-compose ps
Name                   Command                       State   Ports
-----------------------------------------------------------------------------------
counter-app_redis_1    docker-entrypoint.sh redis..  Up      6379/tcp
counter-app_web-fe_1   python app.py                 Up      0.0.0.0:5000->5000/tcp 
```
 `您可以看到这两个容器、它们正在运行的命令、它们的当前状态以及它们正在侦听的网络端口。
使用`docker-compose top`列出每个服务(容器)内部运行的进程。
```
$ docker-compose top
counter-app_redis_1
 PID    USER   TIME     COMMAND   
----------------------------------
19643   999    0:01   redis-server
counter-app_web-fe_1
 PID    USER   TIME                COMMAND              
--------------------------------------------------------
19679   root   0:00   python app.py                     
19788   root   0:01   /usr/local/bin/python /code/app.py 
```
 `返回的 PID 号是从 Docker 主机看到的 PID 号(不是从容器中看到的)。
使用`docker-compose stop`命令停止应用，但不删除其资源。然后用`docker-compose ps`显示应用的状态。
```
$ docker-compose stop
Stopping counter-app_web-fe_1 ... done
Stopping counter-app_redis_1  ... done
$ docker-compose ps
Name                   Command                      State
----------------------------------------------------------
counter-app_redis_1    docker-entrypoint.sh redis   Exit 0
counter-app_web-fe_1   python app.py                Exit 0 
```
 `如您所见，停止撰写应用不会从系统中删除应用定义。它只是停止应用的容器。您可以使用`docker container ls -a`命令验证这一点。
您可以使用`docker-compose rm`删除停止的撰写应用。这将删除应用正在使用的容器和网络，但不会删除卷或映像。它也不会删除项目构建上下文目录中的应用源代码(`app.py`、`Dockerfile`、`requirements.txt`和`docker-compose.yml`)。
使用`docker-compose restart`命令重启应用。
```
$ docker-compose restart
Restarting counter-app_web-fe_1 ... done
Restarting counter-app_redis_1  ... done 
```
 `验证操作。
```
$ docker-compose ps
        Name                      Command            State           Ports         
-----------------------------------------------------------------------------------
counter-app_redis_1    docker-entrypoint.sh redis    Up      6379/tcp              
counter-app_web-fe_1   python app.py                 Up      0.0.0.0:5000->5000/tcp 
```
 `使用`docker-compose down`命令**停止并删除**应用，只需一个命令。
```
$ docker-compose down
Stopping counter-app_redis_1  ... done
Stopping counter-app_web-fe_1 ... done
Removing counter-app_redis_1  ... done
Removing counter-app_web-fe_1 ... done
Removing network counter-app_counter-net 
```
 `该应用现已删除。只剩下它的映像、卷和源代码。
让我们最后一次部署该应用，并进一步了解该卷的工作原理。
```
$ docker-compose up -d
Creating network "counter-app_counter-net" with the default driver
Creating counter-app_redis_1  ... done
Creating counter-app_web-fe_1 ... done 
```
 `如果您查看合成文件，您会看到它定义了一个名为`counter-vol`的卷，并将其装载到位于`/code`的`web-fe`容器中。
```
services:
  web-fe:
    volumes:
      - type: volume
        source: counter-vol
        target: /code
volumes:
  counter-vol: 
```
 `第一次部署应用时，Compose 会检查名为`counter-vol`的卷是否已经存在。它没有，所以 Compose 创建了它。使用`docker volume ls`命令可以看到，使用`docker volume inspect counter-app_counter-vol`可以得到更详细的信息。
```
$ docker volume ls
RIVER              VOLUME NAME
local               counter-app_counter-vol 
```
 `还值得了解的是，Compose 在部署服务之前先构建网络和卷**。这是有意义的，因为网络和卷是由服务(容器)使用的低级基础设施对象。下面的代码片段显示了 Compose 创建网络和卷作为它的前两个任务(甚至在构建和拖动映像之前)。**
```
$ docker-compose up -d
Creating network "counter-app_counter-net" with the default driver
Creating volume "counter-app_counter-vol" with default driver
Pulling redis (redis:alpine)...
```
 `如果我们再看一下`web-fe`的服务定义，我们会看到它正在`/code`将计数器应用量装入服务的容器中。我们也可以从 Dockerfile 中看到`/code`是安装和执行应用的地方。最终，应用代码驻留在 Docker 卷上。见图 9.2。
![Figure 9.2](img/figure9-2.png)
Figure 9.2
这意味着我们可以从容器外部对卷中的文件进行更改，并立即在应用中反映出来。让我们看看这是怎么回事。
接下来的几个步骤将引导您完成以下过程。我们将在 Docker 主机上更新项目工作目录中`app.py`的内容。我们会将更新后的`app.py`复制到 Docker 主机上的卷中。我们将刷新应用的网页以查看更新的文本。这是可行的，因为无论您向 Docker 主机上的卷写入什么，都会立即出现在容器中装载的卷中。
> **注意:**如果您在 Mac 或 Windows 10 PC 上使用 Docker Desktop，以下操作将不起作用。这是因为 Docker Desktop 在轻量级虚拟机内部运行 Docker，并且卷存在于虚拟机内部。
使用您最喜欢的文本编辑器编辑项目工作目录中的`app.py`文件。我们将在示例中使用`vim`。
```
$ vim ~/counter-app/app.py 
```
 `更改第 22 行双引号("")之间的文本。该行以`return "What's up..."`开头。输入任何您喜欢的文本，只要它在双引号内，并保存您的更改。
现在您已经更新了应用，您需要将其复制到 Docker 主机上的卷中。每个 Docker 卷都暴露在 Docker 主机文件系统内的某个位置，以及一个或多个容器中的装载点。使用以下`docker volume inspect`命令查找卷在 Docker 主机上的显示位置。
```
$ docker volume inspect counter-app_counter-vol | grep Mount
"Mountpoint": "/var/lib/docker/volumes/counter-app_counter-vol/_data", 
```
 `将更新的应用文件复制到 Docker 主机上的卷装载点(请记住，这在 Docker Desktop 上不起作用)。一旦执行复制操作，更新后的文件将出现在`web-fe`容器的`/code`目录中。该操作将覆盖容器中现有的`/code/app.py`文件。
```
$ cp ~/counter-app/app.py \
  /var/lib/docker/volumes/counter-app_counter-vol/_data/app.py 
```
 `更新后的应用文件现在位于容器中。连接到应用以查看您的更改。您可以通过将您的网络浏览器指向端口`5000`上您的 Docker 主机的 IP 来做到这一点。
图 9.3 显示了更新后的应用。
![](img/figure9-3.png)
显然你不会在生产中做这样的更新操作，但是在开发中它是一个真正的省时工具。
恭喜你。您已经使用 Docker Compose 部署和管理了一个简单的多容器应用。
在提醒我们自己主要的`docker-compose`命令之前，理解这是一个非常简单的例子是很重要的。Docker Compose 能够部署和管理更复杂的应用。
### 使用编写命令部署应用
*   `docker-compose up`是部署撰写应用的命令。它希望编写文件被称为`docker-compose.yml`或`docker-compose.yaml`，但是您可以用`-f`标志指定一个自定义文件名。在后台用`-d`标志启动应用是很常见的。
*   `docker-compose stop`将停止合成应用中的所有容器，而不会从系统中删除它们。通过`docker-compose restart`可以轻松重启应用。
*   `docker-compose rm`将删除停止的撰写应用。它将删除容器和网络，但不会删除卷和映像。
*   `docker-compose restart`将重新启动已被`docker-compose stop`停止的撰写应用。如果您在停止撰写应用后对其进行了更改，这些更改将**而不是**出现在重新启动的应用中。您需要重新部署应用才能获得更改。
*   `docker-compose ps`将在撰写应用中列出每个容器。它显示当前状态、每个命令正在运行以及网络端口。
*   `docker-compose down`将停止并删除正在运行的撰写应用。它删除容器和网络，但不删除卷和映像。
### 章节总结
在本章中，您学习了如何使用 Docker Compose 部署和管理多容器应用。
Docker Compose 是一个安装在 Docker 引擎之上的 Python 应用。它允许您在单个声明性配置文件中定义多容器应用，并使用单个命令进行部署。
合成文件可以是 YAML 或 JSON，它们定义了应用所需的所有容器、网络、卷和机密。然后将文件馈送到`docker-compose`命令行工具，Compose 使用 Docker 部署它。
应用部署后，您可以使用许多`docker-compose`子命令管理其整个生命周期。
您还看到了卷如何与应用的其余部分有一个独立的生命周期，并可用于将更改直接装载到容器中。
Docker Compose 很受开发人员的欢迎，Compose 文件是应用文档的一个很好的来源——它定义了组成应用的所有服务、它们使用的映像、它们公开的端口、它们使用的网络和卷等等。因此，它可以帮助弥合开发和运营之间的差距。您还应该将您的编写文件视为代码。这意味着，除了别的以外，将它们存储在源代码管理的 repos 中。```````````````````````````````````