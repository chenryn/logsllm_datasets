User: 请描述如何使用Python编写一个简单的RESTful API，并利用Postman进行测试。
Assistant: Python编写简单的RESTful API可以使用Flask框架，以下是一个演示示例：

1. 安装Flask：在终端中输入`pip install flask`

2. 创建示例代码文件`app.py`：

   ```python
   from flask import Flask, jsonify, request

   app = Flask(__name__)

   # 创建示例数据
   tasks = [
       {
           'id': 1,
           'title': '学习Python',
           'description': '完成《Python入门教程》的学习',
           'done': False
       },
       {
           'id': 2,
           'title': '看电影',
           'description': '看《寄生虫》',
           'done': False
       }
   ]

   # 获取所有任务列表
   @app.route('/tasks', methods=['GET'])
   def get_tasks():
       return jsonify({'tasks': tasks})

   # 获取单个任务
   @app.route('/tasks/<int:task_id>', methods=['GET'])
   def get_task(task_id):
       task = [task for task in tasks if task['id'] == task_id]
       if len(task) == 0:
           abort(404)
       return jsonify({'task': task[0]})

   # 创建新任务
   @app.route('/tasks', methods=['POST'])
   def create_task():
       if not request.json or not 'title' in request.json:
           abort(400)
       task = {
           'id': tasks[-1]['id'] + 1,
           'title': request.json['title'],
           'description': request.json.get('description', ""),
           'done': False
       }
       tasks.append(task)
       return jsonify({'task': task}), 201

   # 更新任务
   @app.route('/tasks/<int:task_id>', methods=['PUT'])
   def update_task(task_id):
       task = [task for task in tasks if task['id'] == task_id]
       if len(task) == 0:
           abort(404)
       if not request.json:
           abort(400)
       task[0]['title'] = request.json.get('title', task[0]['title'])
       task[0]['description'] = request.json.get('description', task[0]['description'])
       task[0]['done'] = request.json.get('done', task[0]['done'])
       return jsonify({'task': task[0]})

   # 删除任务
   @app.route('/tasks/<int:task_id>', methods=['DELETE'])
   def delete_task(task_id):
       task = [task for task in tasks if task['id'] == task_id]
       if len(task) == 0:
           abort(404)
       tasks.remove(task[0])
       return jsonify({'result': True})

   # 错误处理
   @app.errorhandler(404)
   def not_found(error):
       return jsonify({'error': 'Not found'}), 404

   @app.errorhandler(400)
   def bad_request(error):
       return jsonify({'error': 'Bad request'}), 400

   if __name__ == '__main__':
       app.run(debug=True)
   ```

3. 运行`app.py`：在终端输入`python app.py`，即可在本地`localhost:5000`访问该API，也可以通过其它设备的IPv4地址访问该API。

4. 在Postman中测试API：

   - 获取所有任务列表：选择GET请求方式，输入`http://localhost:5000/tasks`，发送请求，可以看到响应如下：

     ```json
     {
         "tasks": [
             {
                 "description": "完成《Python入门教程》的学习",
                 "done": false,
                 "id": 1,
                 "title": "学习Python"
             },
             {
                 "description": "看《寄生虫》",
                 "done": false,
                 "id": 2,
                 "title": "看电影"
             }
         ]
     }
     ```

   - 获取单个任务：选择GET请求方式，输入`http://localhost:5000/tasks/1`，发送请求，可以看到响应如下：

     ```json
     {
         "task": {
             "description": "完成《Python入门教程》的学习",
             "done": false,
             "id": 1,
             "title": "学习Python"
         }
     }
     ```

   - 创建新任务：选择POST请求方式，输入`http://localhost:5000/tasks`，在Body中选择`raw`格式，在输入框中输入一个新任务的JSON数据，如下图所示，发送请求即可创建该任务：

     ```json
     {
         "title": "写作业",
         "description": "完成《Python案例实践》的作业"
     }
     ```

     ![postman_create_task](https://user-images.githubusercontent.com/66686732/121696380-a2095f80-caf7-11eb-8db3-6fe4ae2df9a2.png)

   - 更新任务：选择PUT请求方式，输入`http://localhost:5000/tasks/2`，在Body中选择`raw`格式，在输入框中输入需要更新的JSON数据，如下图所示，发送请求即可更新该任务：

     ```json
     {
         "done": true
     }
     ```

     ![postman_update_task](https://user-images.githubusercontent.com/66686732/121696679-f358af00-caf7-11eb-9273-0f56d3179fa7.png)

   - 删除任务：选择DELETE请求方式，输入`http://localhost:5000/tasks/2`，发送请求即可删除该任务。