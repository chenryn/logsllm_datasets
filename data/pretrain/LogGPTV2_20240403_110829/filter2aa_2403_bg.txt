        MOV              R0, R4 
        MOVS             R1, #6 
        BLX              _printf 
        MOV              R0, R4 
        MOVS             R1, #7 
        BLX              _printf 
        MOV              R0, R4 
        MOVS             R1, #8 
        BLX              _printf 
        MOV              R0, R4 
        MOV              R1, #9 
        BLX              _printf 
        MOVS             R0, #0 
        POP              {R4,R7,PC} 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 14 章  循    环 
159 
实际上，它把 printing_function ()函数内部的指令直接代入了循环体： 
void printing_function (int i) 
{ 
    printf ("%d\n", i); 
}; 
可见，LLVM 不仅把循环控制语句展开为 8 个顺序执行的循环体，而且还在 main()函数的循环体内直
接代入了 printing_function ()函数内部的指令。当循环体调用的函数不复杂且循环的次数不高时，LLVM 编
译器会把它们都拿出来进行分解和展开。 
ARM64: Optimizing GCC 4.9.1 
指令清单 14.7  Optimizing GCC 4.9.1 
printing_function: 
; prepare second argument of printf(): 
  mov      w1, w0 
; load address of the "f(%d)\n" string 
  adrp     x0, .LC0 
  add      x0, x0, :lo12:.LC0 
; just branch here instead of branch with link and return: 
  b        printf 
main: 
; save FP and LR in the local stack: 
  stp      x29, x30, [sp, -32]! 
; set up stack frame: 
  add      x29, sp, 0 
; save contents of X19 register in the local stack: 
  str      x19, [sp,16] 
; we will use W19 register as counter. 
; set initial value of 2 to it: 
  mov      w19, 2 
.L3: 
; prepare first argument of printing_function(): 
  mov      w0, w19 
; increment counter register. 
  add      w19, w19, 1 
; W0 here still holds value of counter value before increment. 
  bl       printing_function 
; is it end? 
  cmp      w19, 10 
; no, jump to the loop body begin: 
  bne      .L3 
; return 0 
  mov      w0, 0 
; restore contents of X19 register: 
  ldr      x19, [sp,16] 
; restore FP and LR values: 
  ldp      x29, x30, [sp], 32 
  ret 
.LC0: 
  .string "f(%d)\n" 
ARM64: Non-optimizing GCC 4.9.1 
指令清单 14.8  Non-optimizing GCC 4.9.1 
printing_function: 
; prepare second argument of printf(): 
  mov      w1, w0 
; load address of the "f(%d)\n" string 
  adrp     x0, .LC0 
  add      x0, x0, :lo12:.LC0 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
160 
逆向工程权威指南（上册） 
; just branch here instead of branch with link and return: 
  b        printf 
main: 
; save FP and LR in the local stack: 
  stp      x29, x30, [sp, -32]! 
; set up stack frame: 
  add      x29, sp, 0 
; save contents of X19 register in the local stack: 
  str      x19, [sp,16] 
; we will use W19 register as counter. 
; set initial value of 2 to it: 
  mov      w19, 2 
.L3: 
; prepare first argument of printing_function(): 
  mov      w0, w19 
; increment counter register. 
  add      w19, w19, 1 
; W0 here still holds value of counter value before increment. 
  bl       printing_function 
; is it end? 
  cmp      w19, 10 
; no, jump to the loop body begin: 
  bne      .L3 
; return 0 
  mov      w0, 0 
; restore contents of X19 register: 
  ldr      x19, [sp,16] 
; restore FP and LR values: 
  ldp      x29, x30, [sp], 32 
  ret 
.LC0: 
  .string "f(%d)\n" 
14.1.5  MIPS 
指令清单 14.9  Non-optimizing GCC 4.4.5 (IDA) 
main: 
; IDA is not aware of variable names in local stack 
; We gave them names manually: 
i  
= -0x10 
saved_FP  
= -8 
saved_RA  
= -4 
; function prologue: 
addiu    $sp, -0x28 
sw     $ra, 0x28+saved_RA($sp) 
sw     $fp, 0x28+saved_FP($sp) 
move     $fp, $sp 
; initialize counter at 2 and store this value in local stack 
li     $v0, 2 
sw     $v0, 0x28+i($fp) 
; pseudoinstruction. "BEQ $ZERO, $ZERO, loc_9C" there in fact: 
b  
   loc_9C 
or     $at, $zero ; branch delay slot, NOP 
# --------------------------------------------------------------------------- 
loc_80:  
     # CODE XREF: main+48 
; load counter value from local stack and call printing_function(): 
lw     $a0, 0x28+i($fp) 
jal    printing_function 
or 
   $at, $zero ; branch delay slot, NOP 
; load counter, increment it, store it back: 
lw 
   $v0, 0x28+i($fp) 
or 
   $at, $zero ; NOP 
addiu    $v0, 1 
sw 
   $v0, 0x28+i($fp) 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 14 章  循    环 
161 
loc_9C: 
# CODE XREF: main+18 
; check counter, is it 10? 
lw     $v0, 0x28+i($fp) 
or     $at, $zero ; NOP 
slti    $v0, 0xA 
; if it is less than 10, jump to loc_80 (loop body begin): 
bnez    $v0, loc_80 
or 
   $at, $zero ; branch delay slot, NOP 
; finishing, return 0: 
move     $v0, $zero 
; function epilogue: 
move     $sp, $fp 
lw 
    $ra, 0x28+saved_RA($sp) 
lw 
    $fp, 0x28+saved_FP($sp) 
addiu     $sp, 0x28 
jr 
    $ra 
or 
    $at, $zero ; branch delay slot, NOP 
上述代码中的“B”指令属于 IDA 生成的伪指令。它原本的指令是 BEQ。 
14.1.6  其他 
您可能注意到了，在对循环控制变量 i 进行初始化赋值之后，程序首先检查变量 i 是否满足循环条件。
在满足循环表达式的情况下，才会运行循环体的指令。这恐怕是有意而为之。如果循环变量的初始值不能满
足循环条件，那么整个循环体都不会被执行。例如，下面例子中的循环体就可能不会被执行： 
for (i=0; i 
void my_memcpy (unsigned char* dst, unsigned char* src, size_t cnt) 
{ 
         size_t i; 
         for (i=0; i=size) 
        BCC     |L0.4| 
; return 
        BX      lr 
        ENDP 
32 位的 ARM 程序只用了一个转移指令，比 thumb 程序少了一个转移指令。 
14.2.3 MIPS 
指令清单 14.14  GCC 4.4.5 optimized for size (-Os) (IDA) 
my_memcpy: 
; jump to loop check part: 
                   b         loc_14 
; initialize counter (i) at 0 
; it will always reside in \$v0: 
                   move     $v0, $zero ; branch delay slot 
loc_8:                                          # CODE XREF: my_memcpy+1C 
; load byte as unsigned at address in $t0 to $v1: 
                   lbu      $v1, 0($t0) 
; increment counter (i): 
                   addiu    $v0, 1 
; store byte at $a3 
                   sb       $v1, 0($a3) 
loc_14:                                        # CODE XREF: my_memcpy 
; check if counter (i) in $v0 is still less then 3rd function argument ("cnt" in $a2): 
                   sltu     $v1, $v0, $a2 
; form address of byte in source block: 
                   addu     $t0, $a1, $v0 
; $t0 = $a1+$v0 = src+i 
; jump to loop body if counter sill less then "cnt": 
                   bnez     $v1, loc_8 
; form address of byte in destination block (\$a3 = \$a0+\$v0 = dst+i): 
                   addu     $a3, $a0, $v0 ; branch delay slot 
; finish if BNEZ wasnt triggered:' 
                   jr       $ra 