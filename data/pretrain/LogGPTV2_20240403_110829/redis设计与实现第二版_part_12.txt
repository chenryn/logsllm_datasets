type
ptr
10086
（续）
---
## Page 69
的样子如图 8-4 所示：
相同的，但使用embstr 编码的字符串对象来保存短字符串值有以下好处：
象执行命令时产生的效果是
效果和 raw 编码的字符串对
对象在执行命令时，产生的
两个结构，如图8-3所示。
调用一次内存分配函数来分配--块连续的空间，空间中依次包含redisObject 和 sdshdr
次内存分配函数来分别创建 redisObject 结构和 sdshdr 结构，而 embstr 编码则通过
样，都使用 redisObject 结构和 sdshdr 结构来表示字符串对象，但 raw 编码会调用两
那么字符串对象将使用embstr 编码的方式来保存这个字符串值。
的字符串对象作为 story 键的值：
REDIS_ENCODING_RAW
embstr 编码的字符串
作为例子，以下命令创建了一个 embstr 编码的字符串对象作为 msg 键的值，值对象
embstr 编码是专门用于保存短字符串的一种优化编码方式，这种编码和raw 编码一
redis> SET msg "hello"
口 因为 embstr 编码的字符串对象的所有数据都保存在一块连续的内存里面，所以这
口 释放 embstr 编码的字符串对象只需要调用一次内存释放函数，而释放 raw 编码的
口embstr 编码将创建字符串对象所需的内存分配次数从 raw编码的两次降低为一次。
如果字符串对象保存的是一个字符串值，并且这个字符串值的长度小于等于32字节，
 REDIS_STRING
"embstr"
redis> OBJECT ENCODING msg
OK
redis> OBJECT ENCODING story
(integer) 37
redis> STRLEN story
"`"· buty e paaT1 araua obe buo1 'buoT. A1o2s LaS  OBJECT ENCODING pi
redis> INCRBYFLOAT pi 2.0
举个例子，如果我们执行以下代码：
在有需要的时候，程序会将保存在字符串对象里面的字符串值转换回浮点数值，执行
redis> SET pi 3.14
举个例子，
最后要说的是，可以用 long double 类型表示的浮点数在 Redis 中也是作为字符串
embstr"
"embstr"
redis> OBJECT ENCODING pi
type
编码的转换
，执行以下代码将创建一个包含3.14的字符串表示"3.14"的字符串对象：
，然后再保存转换所得的字符串值。
REDIS ENCODING_EMBSTR
redisobject
表 8-6 
encoding
字符串对象保存各类型值的编码方式
图8-4embstr编码的字符串对象
值
ptr...
free”len
sdshdr
embstr 或者 raw
ermbstr 或者 raw
int
buf
编码
---
## Page 71
实现方法。
构建的，表8-7列举了其中一部分字符串命令，以及这些命令在不同编码的字符串对象下的
8.2.2字符串命令的实现
码从 embstr 变为 raw 的例子：
编码的字符串对象在执行修改命令之后，总会变成一个 raw编码的字符串对象。
会先将对象的编码从 embstr 转换成 raw，然后再执行修改命令。因为这个原因，embstr
串对象实际上是只读的。当我们对embstr 编码的字符串对象执行任何修改命令时，程序
编码的、保存了字符串值的字符串对象：
10086转换为字符串值"10086"，然后再执行追加操作，操作的执行结果就是一个raw
存的不再是整数值，而是一个字符串值，那么字符串对象的编码将从 int 变为 raw。
一个字符申值，因为追加操作只能对字符串值执行，所以程序会先将之前保存的整数值
因为字符串键的值为字符串对象，所以用于字符串键的所有命令都是针对字符串对象来
以下代码展示了一个 embstr 编码的字符串对象在执行APPEND 命令之后，对象的编
在下面的示例中，我们通过APPEND命令，向一个保存整数值的字符串对象追加了
"raw""
redis> OBJECT ENCODING msg
(integer) 18
redis> APPEND msg " again!"
redis> OBJECT ENCODING msg
redis> SET msg "hello world"
另外，因为 Redis 没有为 embstr 编码的字符串对象编写任何相应的修改程序（只有
"embstr"
'raw"
redis> OBJECT ENCODING number
"10086 is a good number!"
redis> GET number 
redis> APPEND number " is a good number!"
"int"
redis> OBJECT ENCODING number
OK
第8章 
对
象+67
---
## Page 72
68·第一部分数据结构与对象
表对象作为numbers键的值：
存了一个列表元素。举个例子，如果我们执行以下 RPUSH命令，那么服务器将创建一个列
8.3
GETRANGE
SETRANGE
STRLEN
DECRBY
INCRBY
INCRBYFLOAT
APPEND
GET
SET
ziplist 编码的列表对象使用压缩列表作为底层实现，每个压缩列表节点（entry）保
如果 numbers 键的值对象使用的是 ziplist 编码，这个这个值对象将会是图 8-5 所
(integer) 3
redis> RpUsH numbers 1 "three" 5
列表对象的编码可以是ziplist或者linkedlist。
命令
列表对象
引上的字符
按 raw 编码的方式执行此命令
将
并返回这个字符串值的长度
这个拷贝转换成字符串值，计算
存起来
出的计算结果会作为整数被保
存起来
出的计算结果会作为整数被保
起来
操作
向客户端返回这个字符串值
这个拷贝转换成字符串值，然后
拷贝对象所保存的整数值，
将对象转换成 raw 编码，然后
拷贝对象所保存的整数值，将
对整数值进行减法计算，
后取出并返回字符串指定索
这个拷贝转换成字符申值，
对整数值进行加法计算，
后将得出的浮点数结果保存
对这个浮点数进行加法计算,
取出整数值并将其转换成
后按raw编码的方式执行此
将对象转换成raw编码，
拷贝对象所保存的整数值，将
使用int 编码保存值
int 编码的实现方法
表 8-7 
得
然
字符串命令的实现
定索引上的字符
然
字符串的长度
命令，向客户端返回--
命令，向客户端返回一个错误
么向客户端返回一个错误
值不能被转换成浮点数，
结果保存起来。如果字符串
法计算，然后将得出的浮点数
浮点数，对这个浮点数进行加
转换成
此操作
然后按
民
embstr 编码不能执行此
直接取出并返回字符申指
将对象转换成raw编
调用
embstr 编码不能执行此
取出字符串值并尝试将其
将对象转换
直接向客户端返回字符
后按
值
使用
embstr 编码的实现方法
 sdslen 函数，
我long double类型的
raw编码的方式执行
安 raw 编码的方式执行
embstr 编码保存值
成raw编
个错误
返回
定索引上的字符
设置为给
字符串的长度
向客户端返回一个错误
向客户端返回一个错误
那么向客户端返回一个错误
符串值不能被转换成浮点数，
点数结果保存起来。如果
加法计算，然后将得出的
换成long double 类型
的末尾
给定字符串追加到现有字符串
raw 编码不能执行此命令，
串值
直接取出并返回字符串指
将字符串特定索引上的值
raw 编码不能执行此命令，
取出字符串值并尝试将其转
调用 sdscatlen 函数，将
直接向客户端返回字符
调
点数，对这个浮点数进
使用raw编码保存值
用 sdslen 函数，返回
raw 编码的实现方法
合定的字符
字
行
的
---
## Page 73
"three"的字符串对象，它是图 8-8 的简化表示。
的值。比如说，图8-7代表的就是一个包含了字符串值
象，而 StringObject 字样下面的是字符串对象所保存
个带有 StringObject 字样的格子来表示一个字符串对
字符串对象是 Redis 五种类型的对象中唯一一种会被其他四种类型对象嵌套的对象。
这种嵌套字符串对象的行为在稍后介绍的哈希对象、集合对象和有序集合对象中都会出现，
而是 linkedlist 编码，那么 numbers 键的值对象将是图 8-6 所示的样子。
点（node）都保存了一个字符串对象，而每个字符串对象都保存了一个列表元素。
展示的样子。
 REDIS _ENCODING_LINKEDLIST
举个例子，如果前面所说的 numbers 键创建的列表对象使用的不是 ziplist 编码,
本书接下来的内容将继续沿用这一简化表示。
为了简化字符串对象的表示，我们在图8-6使用了一
注意，linkedlist 编码的列表对象在底层的双端链表结构中包含了多个字符串对象，
另一方面，linkedlist 编码的列表对象使用双端链表作为底层实现，每个双端链表节
 REDIS_ENCODING_ZIPLIST
REDIS_LIST
redisobject
encoding
REDIS_LIST
redisobject
ptr
type
encoding
ptr
type
 redisobject
图 8-61inkedlist 编码的 numbers 列表对象
图8-5ziplist 编码的 numbers 列表对象
图 8-8完整的字符申对象表示
_EMBSTR
Stringobject
zlbytes zltail zllen1"three"5zlend
ptr...
 = 
链表
图8-7简化的字符申对象表示
It'"Ph'Pr''e''e'o"
sdshdr
Stringobject
"three"
Stringobject
第8章 
buf
年
---
## Page 74
70·第一部分数据结构与对象
元素都会被转移并保存到双端链表里面，对象的编码也会从 ziplist 变为 linkedlist。