这是内核漏洞挖掘技术系列的第五篇。  
第一篇：[内核漏洞挖掘技术系列(1)——trinity](https://xz.aliyun.com/t/4760
"内核漏洞挖掘技术系列\(1\)——trinity")  
第二篇：[内核漏洞挖掘技术系列(2)——bochspwn](https://xz.aliyun.com/t/4800
"内核漏洞挖掘技术系列\(2\)——bochspwn")  
第三篇：[内核漏洞挖掘技术系列(3)——bochspwn-reloaded(1)](https://xz.aliyun.com/t/4921
"内核漏洞挖掘技术系列\(3\)——bochspwn-reloaded\(1\)")  
第四篇：[内核漏洞挖掘技术系列(3)——bochspwn-reloaded(2)](https://xz.aliyun.com/t/4932
"内核漏洞挖掘技术系列\(3\)——bochspwn-reloaded\(2\)")
## 前言
syzkaller()是google的安全研究人员开发并维护的内核fuzz工具。它主要是用go写的，也有少部分C代码，支持akaros/fuchsia/linux/android/freebsd/netbsd/openbsd/windows等系统，发现的漏洞多达上千。不过它支持最全面的还是linux系统，对其它系统的支持都不同程度差一点，也不支持Darwin/XNU。有研究人员做过移植syzkaller
fuzz windows
WSL[2]和Darwin/XNU[1][5]的尝试，也都取得了较好的成果。可以说，syzkaller是当今宇宙最强大的内核fuzz工具了。我们将从整体架构开始，介绍syzkaller一些实现的细节。目前在github上syzkaller除了master分支之外还有一个long-line分支和usb-fuzzer分支，usb-fuzzer分支是xairy用来挖掘USB驱动漏洞的一个分支，在OffensiveCon2019上讲过[7]。  
本文分析的syzkaller版本是开始计划写作这个系列文章时从github下载的当时最新的版本，当读者读到这篇文章时代码肯定已经有了变化，所以文章仅供参考，若有变动之处还需自行分析。
## 整体架构
下面是官方原理介绍中给的一张图。  
syz-manager通过ssh调用syz-fuzzer，syz-fuzzer和syz-manager之间通过RPC进行通信。syz-fuzzer将输入传给syz-executor，从kernel中读取代码覆盖率信息。syz-executor执行syscall系统调用。我们再看一下代码的整体目录。  
  * Godeps目录：go的依赖包管理。
  * dashboard目录：主要与syzbot有关，syzbot会自动fuzz linux内核主线分支并向内核邮件列表报告发现的错误。我们可以在上看到相关的情况。  
  * docs目录：相关文档。
  * executor目录：文章最开始已介绍syz-executor。
  * pkg目录：配置文件。该目录下的结构如下图。  
    * ast目录：解析并格式化sys文件。
    * bisect目录：通过二分查找，编译代码测试确定引入含有漏洞代码的commit和引入修复的commit。
    * build目录：包含用于构建内核的辅助函数。
    * compiler目录：从文本描述生成系统调用，类型和资源的sys描述。
    * config目录：加载配置文件。
    * cover目录：提供处理代码覆盖信息的类型。
    * csource目录：根据syzkaller程序生成等价的c程序。
    * db目录：存储syz-manager和syz-hub中的语料库。
    * email目录：解析处理邮件相关功能。
    * gce目录：对Google Compute Engine(GCE) API的包装。
    * gcs目录：对Google Compute Storage(GCS) API的包装。
    * hash目录：提供一些hash函数。
    * host目录：检测host是否支持一些特性和特定的系统调用。
    * html目录：提供一些web端显示fuzz结果的html页面用的辅助函数。
    * ifuzz目录：生成和变异x86机器码。
    * instance目录：提供用于测试补丁，镜像和二分查找的临时实例的辅助函数。
    * ipc目录：进程间通信。
    * kd目录：windows KD调试相关。
    * log目录：日志功能。
    * mgrconfig目录：管理解析配置文件。
    * osutil目录：os和文件操作工具。
    * report目录：处理内核输出和检测/提取crash信息并符号化等。
    * repro目录：对crash进行复现并进行相关的处理。
    * rpctype目录：包含通过系统各部分之间的net/rpc连接传递的消息类型。
    * runtest目录：syzkaller程序端到端测试的驱动程序。
    * serializer目录：序列化处理。
    * signal目录：提供用于处理反馈信号的类型。
    * symbolizer目录：处理符号相关信息。
    * vcs目录：处理各种库的辅助函数。
  * prog目录：目标系统相关信息以及需要执行的系统调用。
  * sys目录：系统调用描述。该目录下的结构如下图。  