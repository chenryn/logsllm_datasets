令，如果未通过身份验证的客户端试图执行除AUTH命令之外的其他命令，那么服
那么用户输人的命令参数个数必须大于等于3个才行。
所给定的参数个数是否正确，当参数个数不正确时，不再执行后续步骤，直接向客
命令名字找不到相应的命令实现，服务器不再执行后续步骤，并向客户端返回一个
命令名字的大小写不影响命令表的查找结果
第14章服务器181
---
## Page 186
182◆第二部分单机数据库的实现
数的样子。
的实现函数只需要一个指向客户端状态的指针作为参数即可。
当服务器决定要执行命令时，它只要执行以下语句就可以了：
面，并将命令的参数和参数个数分别保存到了客户端状态的 argv 属性和 argv 属性里面,
14.1.5命令执行器（3）：调用命令的实现函数
式下执行命令时，预备操作还会更多一些。
注意
继续以之前的 SET命令为例子，图14-6展示了客户端包含了命令实现、参数和参数个
等于执行语句：
对于这个例子来说，执行语句：
因为执行命令所需的实际参数都已经保存到客户端状态的 argv 属性里面了，所以命令
在前面的操作中，服务器已经将要执行命令的实现保存到了客户端状态的cmd 属性里
以上只列出了服务器在单机模式下执行命令时的检查操作，当服务器在复制或者集群模
client->cmd->proc(client);
// client 是指向客户端状态的指针 
口如果服务器打开了监视器功能，那么服务器会将要执行的命令和参数等信息发送给
口如果客户端正在执行事务，那么服务器只会执行客户端发来的EXEC、DISCARD
口如果服务器因为执行Lua脚本而超时并进人阻塞状态，那么服务器只会执行客户端
口如果服务器正在进行数据载人，那么客户端发送的命令必须带有1标识（比如
口女
 如果服务器上一次执行 BGSAVE命令时出错，并且服务器打开了 stop-writes-
setCommand(client) ;
监视器。当完成了以上预备操作之后，服务器就可以开始真正执行命令了。
MULTI、WATCH四个命令，其他命令都会被放进事务队列中。
发来的 SHUTDOWN nosave 命令和 SCRIPTKILL命令，其他命令都会被服务器拒绝。
INFO、SHUTDOWN、PUBLISH等等）才会被服务器执行，其他命令都会被服务器
UNSUBSCRIBE、PUNSUBSCRIBE四个命令，其他命令都会被服务器拒绝。
令订阅模式，那么服务器只会执行客户端发来的SUBSCRIBE、PSUBSCRIBE、
如果客户端当前正在用SUBSCRIBE命令订阅频道，或者正在用PSUBSCRIBE命
on-bgsave-error功能，而且服务器即将要执行的命令是一个写命令，那么服务
果内存回收失败，那么不再执行后续步骤，向客户端返回一个错误。
拒绝。
器将拒绝执行这个命令，并向客户端返回一个错误。
---
## Page 187
器就可以继续从文件事件处理器中取出并处理下一个命令请求了。
14.1.6
r\n"回复，这个回复会被保存到客户端状态的 buf 属性里面，如图 14-7所示。
的套接字关联命令回复处理器，这个处理器负责将命令回复返回给客户端。
在客户端状态的输出缓冲区里面（buf 属性和 reply属性），之后实现函数还会为客户端
对于前面 SET命令的例子来说，函数调用 setCommand（client）将产生一个"+OK\
当以上操作都执行完了之后，服务器对于当前命令的执行到此就告一段落了，之后服务
口如果有其他从服务器正在复制当前这个服务器，那么服务器会将刚刚执行的命令传
口如果服务器开启了AOF持久化功能，那么AOF持久化模块会将刚刚执行的命令请
口根据刚刚执行命令所耗费的时长，更新被执行命令的 redisCommand 结构的
口如果服务器开启了慢查询日志功能，那么慢查询日志模块会检查是否需要为刚刚执
被调用的命令实现函数会执行指定的操作，并产生相应的命令回复，这些回复会被保存
在执行完实现函数之后，服务器还需要执行一些后续工作：
redisClient
播给所有从服务器。
求写人到 AOF缓冲区里面。
milliseconds 属性，并将命令的 redisCommand结构的 calls 计数器的值增一。
行完的命令请求添加一条新的慢查询日志。
argc
argv
cmd
命令执行器（4）：执行后续工作
3
redisClient
Stringobject
bufpos
buf
argv[0]
"SET"
图14-7保存了命令回复的客户端状态
redisCommand
图14-6客户端状态
arity
proc
"set"
+·oxo..·
-3
name
Stringobject
argv[1]
"KEY"
→ void setCommand(redisclient *c):
 Stringobject
"VALUE"
argv[1]
第14章服务器183
---
## Page 188
184·第二部分单机数据库的实现
mstime属性被用作当前时间的缓存：
要执行一次系统调用，为了减少系统调用的执行次数，服务器状态中的 unixtime属性和
redisServer 结构（服务器状态）中和 serverCron 函数有关的属性。
服务器的资源，并保持服务器自身的良好运转。
14.2
它会将这个回复转换成"OK\n"，然后打印给用户看：
打印给用户观看（假设我们使用的是 Redis 自带的 redis-cli 客户端），如图 14-8所示。
14.2.1
14.1.8客户端接收并打印命令回复
理器会将协议格式的命令回复＂+OK\r\n"发送给客户端。
命令请求做好准备。
理器，将保存在客户端输出缓冲区中的命令回复发送给客户端。
套接字关联命令回复处理器，当客户端套接字变为可写状态时，服务器就会执行命令回复处
14.1.7将命令回复发送给客户端
Redis 服务器中有不少功能需要获取系统的当前时间，而每次获取系统的当前时间都需
本节接下来的内容将对 serverCron 函数执行的操作进行完整介绍，并介绍
Redis 服务器中的 serverCron 函数默认每隔 100 毫秒执行一次，这个函数负责管理
以图14-7所示的客户端状态为例子，当客户端的套接字变为可写状态时，命令回复处
当客户端接收到协议格式的命令回复之后，它会将这些回复转换成人类可读的格式，并
当命令回复发送完毕之后，回复处理器会清空客户端状态的输出缓冲区，为处理下一个
前面说过，命令实现函数会将命令回复保存到客户端的输出缓冲区里面，并为客户端的
 struct redisServer i
以上就是 Redis 客户端和服务器执行命令请求的整个过程了。
redis> SET KEY VALUE
继续以之前的 SET命令为例子，当客户端接到服务器发来的"+OK\r\n”协议回复时，
 serverCron 函数
更新服务器时间缓存
服务器-
命令回复返回给客户端
回复处理器将协议格式的
图14-8客户端接收并打印命令回复的过程
→客户端
将回复格式化成人类可读格式
然后打印显示
→用户
---
## Page 189
程序会用服务器的lruclock 属性记录的时间减去对象的lru 属性记录的时间，得出的计
的时间：
unixtime属性、mstime 属性一样，都是服务器时间缓存的一种：
14.2.2
mstime 属性，所以这两个属性记录的时间的精确度并不高：
当服务器要计算一个数据库键的空转时间（也即是数据库键对应的值对象的空转时间),
每个 Redis 对象都会有一个lru 属性，这个 lru 属性保存了对象最后一次被命令访问
服务器状态中的lruclock 属性保存了服务器的 LRU 时钟，这个属性和上面介绍的
口服务器只会在打印日志、更新服务器的LRU 时钟、决定是否执行持久化任务、计算
typedef struct redisobject 
struct redisServer {
口对于为键设置过期时间、添加慢查询日志这种需要高精确度时间的功能来说，服务
因为 serverCron 函数默认会以每 100 毫秒一次的频率更新 unixtime 属性和
robj;
服务器上线时间（uptime）这类对时间精确度要求不高的功能上。
器还是会再次执行系统调用，从而获得最准确的系统当前时间。
unsigned 1ru:22;
unsigned 1ruclock:22;
//默认每10秒更新一次的时钟缓存，
!...
更新 LRU时钟
！..·
/1 保存了毫秒级精度的系统当前 UNTX 时间戳
time_t unixtime;
// 保存了秒级精度的系统当前UNIX 时间戳
第14章服
务器+185
---
## Page 190
186·第二部分单机数据库的实现
查看：
命令请求数量，这个值可以通过 INFO status 命令的 instantaneous_ops_per_sec 域
频率执行，这个函数的功能是以抽样计算的方式，估算并记录服务器在最近一秒钟处理的
14.2.3
时钟不是实时的，所以根据这个属性计算出来的LRU 时间实际上只是一个模糊的估算值。
算结果就是这个对象的空转时间：
redis> INFO stats
lruclock 时钟的当前值可以通过 INFO server命令的1ru_clock域查看：
serverCron 函数默认会以每10秒一次的频率更新1ruclock 属性的值，因为这个
struct redisServer {
上面的命令结果显示，在最近的一秒钟内，服务器处理了大概六个命令。
# Stats
redis> INFO server
redis> OBJECT IDLETIME mSg
#键处于活跃状态，空转时长为0
鲁访问 msg 键的值
(integer)180
redis> OBJECT IDLETIME msg
籍等待一阵子
(integer)20
redis> OBJECT IDLETIME msg
#等待一小段时间
OK
redis> SET msg "hello world"
ru_clock:55923
(integer)0
 Server
long long ops_sec_last_sample_time;
//上一次进行抽样的时间
！...
更新服务器每秒执行命令次数
---
## Page 191
出的，它只是一个估算值。
per_sec 属性的值是通过计算最近 REDIS_OPS_SEC_SAMPLES 次取样的平均值来计算得
14.2.4
属性的值，以下是 getOperationsPerSecond 函数的实现代码：
值，这个估计值会被作为一个新的数组项被放进ops_sec_samples 环形数组里面。
然后将这个平均值乘以1000，这就得到了服务器在一秒钟内能处理多少个命令请求的估计
trackOperationsPerSecond 调用之间，服务器平均每一毫秒处理了多少个命令请求，
ops 记录的上一次抽样的已执行命令数量和服务器当前的已执行命令数量，计算出两次
time记录的上一次抽样时间和服务器的当前时间，以及 ops_sec_last_sample_
根据 getOperationsPerSecond 函数的定义可以看出，instantaneous_ops_
 long long getoperationsPerSecond(void) (
当客户端执行INFO 命令时，服务器就会调用 getOperationsPerSecond 函数，根
struct redisServer {
更新服务器内存峰值记录
return sum / REDIS_OPS_SEC_SAMPLES;
1/ 计算取样的平均值 
for (j = O; j  INFO memory
每次 serverCron 函数执行时，程序都会查看服务器当前使用的内存数量，并与 stat_
static void sigtermHandler(int sig) (
Memory
sed_memory_peak_human:490.06K
*.
int shutdown_asap;
！！
server.shutdown_asap = 1;
// 打开关闭标识
redisLogFromHandler (REDIS_WARNING, "Received SIGTERM, scheduling shutdown..."):
1/打印日志
！！...
size_t stat_peak_memory:
/}已使用内存峰值
---
## Page 193
命令：
那么服务器会将 BGREWRITEAOF 命令的执行时间延迟到 BGSAVE 命令执行完毕之后。
14.2.8
章经对这些操作进行了详细的说明。
的一部分数据库进行检查，删除其中的过期键，并在有需要时，对字典进行收缩操作，第9
14.2.7
一定数量的客户端进行以下两个检查：
14.2.6
法执行持久化操作了。
拦截SIGTERM 信号的原因，如果服务器一接到 SIGTERM信号就立即关闭，那么它就没办
在服务器执行BGSAVE命令的期间，如果客户端向服务器发来BGREWRITEAOF命令，
serverCron 函数每次执行都会调用 databasesCron 函数，这个函数会对服务器中
serverCron 函数每次执行都会调用clientsCron 函数，clientsCron 函数会对
struct
口如果客户端在上一次执行命令请求之后，输人缓冲区的大小超过了一定的长度，那
口如果客户端与服务器之间的连接已经超时（很长一段时间里客户端和服务器都没有
从日志里面可以看到，服务器在关闭自身之前会进行RDB 持久化操作，
以下代码展示了服务器在接到SIGTERM信号之后，关闭服务器并打印相关日志的过程：
[6794]
互动），那么程序释放这个客户端。
执行被延迟的 BGREWRITEAOF
从而防止客户端的输人缓冲区耗费了过多的内存。
么程序会释放客户端当前的输人缓冲区，并重新创建一个默认大小的输人缓冲区，
!...
int aof_rewrite_scheduled;
/！如果值为1，那么表示有BGREWRITEAOF命令被延迟了。
管理数据库资源
管理客户端资源
redisServer
14
·
AON
Nov
21:28:10.108
Saving
 the final RDB snapshot before exiting.
第14章服务器·189
，这也是服务器
---
## Page 194
190·第二部分单机数据库的实现
BGREWRITEAOF，所以在这个检查中，程序会再次确认服务器是否已经在执行持久化操作了）。
行其他持久化操作，那么服务器开始一次新的 BGSAVE操作（因为条件1可能会引发一次
BGREWRITEAOF操作（这就是上一个小节我们说到的检查）。