OpenRasp分析
OpenRasp分析
写在前⾯
⼀些⽇志说明
正⽂
初始化
为什么要将rasp.jar加载⾄Bootstrap类加载器
配置初始化
ModuleLoader类初始化
引擎启动
JS初始化
Checker的初始化
CustomClassTransformer
Hook
回答上⾯遗留的ModuleClassloader的问题
如何绕过
基于正则的绕过
通过修改某些属性
覆盖插件
参考⽂章
写在前⾯
花了点时间学习了下openrasp的核⼼代码，这⾥做下简单的分析
相关项⽬地址：
⽂件名
⽂件内容
plugin/plugin-DATE.log
检测插件的⽇志，e.g 插件异常、插件调试输出
rasp/rasp-DATE.log
rasp agent 调试⽇志
alarm/alarm-DATE.log
攻击报警⽇志，JSON 格式，⼀⾏⼀个
policy_alarm/policy_alarm-DATE.log
安全基线检查报警⽇志，JSON 格式，⼀⾏⼀个
https://github.com/baidu-security/openrasp-v8
https://github.com/baidu/openrasp
这⾥我以⽬前官⽹最新版的1.3.7来做下分析，这⾥为了⽅便简单⽤springboot写个简单的控
制器来进⾏调试分析即可，当然这⾥不会去看后端云控部分的代码，笔者只是想理清
OpenRasp的逻辑
另外说点p话，顺便在这个过程当中被迫了解了点c++语法真是太妙了
⼀些⽇志说明
OpenRasp的⽇志会通过⽂件的⽅式记录在对应⽂件夹下⾯，⾥⾯⽇志具体内容就不多解释了
点开⼀眼就看得懂，了解下⾯⼏个关于⽇志⽬录介绍完全⾜够了
正⽂
初始化
⾸先既然是⼀个基于maven的项⽬，很多关键信息都肯定有定义的，类似premain-class以及
Agent-class分别是启动时加载和启动后加载rasp，这⾥我们就以premain为例⼦，另⼀个差不多
类似
⾸先是执⾏ init 初始化
初始化第⼀步 JarFileHelper.addJarToBootstrap(inst); ，可以看到这⾥其实就是把
当前jar包也就是 rasp.jar 加载⾄Bootstrap类加载器，这⾥你可能想问为什么是最顶层的这
个
为什么要将rasp.jar加载⾄Bootstrap类加载器  
通过JVM的api，把其路径追加到了启动类加载器的classpath中，这样，启动类加载器，收到
类加载委派任务时，就能通过该classpath加载到rasp.jar的所有类了，根据双亲委派，意味着任
何⼀个类加载器中的任何⼀个类，都能通过显式或者隐式加载，加载到rasp.jar中的类，反⽽
⽹上说的啥⽆法hook到通过启动类加载器加载的类纯纯扯淡
配置初始化  
接下来的 readVersion() ⽅法，其实就是读取⼀些rasp⾃⾝的配置
public static void readVersion() throws IOException {
    Class clazz = Agent.class;
    String className = clazz.getSimpleName() + ".class";
    String classPath = clazz.getResource(className).toString();
    String manifestPath = classPath.substring(0, 
classPath.lastIndexOf("!") + 1) + "/META-INF/MANIFEST.MF";
    Manifest manifest = new Manifest((new 
URL(manifestPath)).openStream());
    Attributes attr = manifest.getMainAttributes();
没啥好看的，看看 MANIFEST.MF 就好
接下来执⾏ ModuleLoader.load(mode, action, inst); 来
ModuleLoader类初始化  
⾸先 ModueLoader 有个静态块，来看看代码做了两件事，⼀个是获取rasp.jar的绝对路径，另
⼀个是获取拓展类加载器赋值给moduleClassLoader，⾄于为什么需要获取拓展类加载器，这
⾥引⼊三梦师傅的话，很好理解没啥难度
再简单看看代码，待会⼉说说这个moduleClassLoader的作⽤，在很后⾯这⾥先了解了解
    projectVersion = attr.getValue("Project-Version");
    buildTime = attr.getValue("Build-Time");
    gitCommit = attr.getValue("Git-Commit");
    projectVersion = projectVersion == null ? "UNKNOWN" : projectVersion;
    buildTime = buildTime == null ? "UNKNOWN" : buildTime;
    gitCommit = gitCommit == null ? "UNKNOWN" : gitCommit;
}
其实，很多时候，⽐如tomcat，它在运⾏中，⼤部分类都是由实现的应⽤类加载器进⾏加载的，那
么，假如Engine是通过某个应⽤类加载器进⾏加载的，⽽我们的hook代码，在tomcat中应⽤类加载
器加载的某个类，插⼊了某段代码，这段代码直接（com.xxx.A.a();）调⽤了Engine的某个类的
⽅法，那么，按照双亲委派机制，以及隐式加载的规范，将会抛出ClassNoFoundError的错误
接下来进⼊构造函数，⾸先实例化赋值 engineContainer = new 
ModuleContainer("rasp-engine.jar");
static {
        Class clazz;
        try {
            clazz = Class.forName("java.nio.file.FileSystems");
            clazz.getMethod("getDefault").invoke((Object)null);
        } catch (Throwable var4) {
        }
        clazz = ModuleLoader.class;
        String path = clazz.getResource("/" + clazz.getName().replace(".", 
"/") + ".class").getPath();
        if (path.startsWith("file:")) {
            path = path.substring(5);
        }
        if (path.contains("!")) {
            path = path.substring(0, path.indexOf("!"));
        }
        try {
            baseDirectory = URLDecoder.decode((new 
File(path)).getParent(), "UTF-8");
        } catch (UnsupportedEncodingException var3) {
            baseDirectory = (new File(path)).getParent();
        }
        ClassLoader systemClassLoader;
        for(systemClassLoader = ClassLoader.getSystemClassLoader(); 
systemClassLoader.getParent() != null && 
!systemClassLoader.getClass().getName().equals("sun.misc.Launcher$ExtClass
Loader"); systemClassLoader = systemClassLoader.getParent()) {
        }
        moduleClassLoader = systemClassLoader;
    }
引擎启动
JS初始化  
在 com.baidu.openrasp.EngineBoot#start 中⾸先通过 Loader.load(); 引⼊动态链接
库，具体引⼊的是⼲嘛的之后就知道了，之后我们暂时先忽略配置相关的东西进⼊主要的
⾸先是JS的初始化
在这个过程，⾸先是设置⽇志输出相关
紧接着是设置StackGetter，这其实是⼀个回掉函数的触发
这⼀点可以从v8的⽂档得以验证，后⾯还会提到这⾥只是简单提提
紧接着是下⾯两⾏
⼀个 UpdatePlugin(); ，⾸先遍历plugins⽬录下的js⽂件，并添加到 scripts 变量当中
UpdatePlugin();
InitFileWatcher();
紧接着执⾏ UpdatePlugin(List scripts) ，⾸先是 CreateSnapshot 从名
字可以看出是创建快照，我们还是来具体看看⼲了些啥
简单对⽂件做了注释，因为流程确实没啥好说的
/*
 * Class:     com_baidu_openrasp_v8_V8
 * Method:    CreateSnapshot
 * Signature: (Ljava/lang/String;[Ljava/lang/Object;Ljava/lang/String;)Z
 */
ALIGN_FUNCTION JNIEXPORT jboolean JNICALL 
Java_com_baidu_openrasp_v8_V8_CreateSnapshot(JNIEnv* env,
            jclass cls,
            jstring jconfig,
            jobjectArray jplugins,
            jstring jversion) {
  //global.checkPoints
  auto config = Jstring2String(env, jconfig);
  //RASP版本信息
  auto version = Jstring2String(env, jversion);
  std::vector plugin_list;
  const size_t plugin_len = env->GetArrayLength(jplugins);
  //遍历plugin，并将插件⽂件名与插件内容保存到plugin_list⾥⾯
  for (int i = 0; i GetObjectArrayElement(jplugins, i);
    if (plugin == nullptr) {
      continue;
    }
    jstring jname = (jstring)env->GetObjectArrayElement(plugin, 0);
    jstring jsource = (jstring)env->GetObjectArrayElement(plugin, 1);
    if (jname == nullptr || jsource == nullptr) {
      continue;
    }
    auto name = Jstring2String(env, jname);
    auto source = Jstring2String(env, jsource);
    plugin_list.emplace_back(name, source);
  }
  auto duration = std::chrono::system_clock::now().time_since_epoch();
  auto millis = std::chrono::duration_cast
(duration).count();
  //好了注释到上⾯这⼀坨就结束了
接下来是⼀个⾮常有意思的函数Snapshot，它的作⽤是创建⼀个构造好的js运⾏环境的快照，
它继承了StartupData类，下⾯是我简单做的⼀些笔记
  Snapshot* blob = new Snapshot(config, plugin_list, version, millis, 
env);
  if (!blob->IsOk()) {
    delete blob;
    return false;
  }
  std::lock_guard lock(snapshot_mtx);
  delete snapshot;
  snapshot = blob;
  return true;
}
Snapshot::Snapshot(const std::string& config,
                   const std::vector& plugin_list,
                   const std::string& version,
                   uint64_t timestamp,
                   void* custom_data)
    : v8::StartupData({nullptr, 0}), timestamp(timestamp) {
  IsolateData data;
  data.custom_data = custom_data;
  v8::SnapshotCreator creator(external_references);
  //获取⼀个隔离的环境
  Isolate* isolate = reinterpret_cast(creator.GetIsolate());
  //void * 则不同，任何类型的指针都可以直接赋值给它，⽆需进⾏强制类型转换
  //上⾯这个custom_data从传递来看，传递过来的其实是JNIENV的指向
  isolate->SetData(&data);
  {
    v8::Isolate::Scope isolate_scope(isolate);