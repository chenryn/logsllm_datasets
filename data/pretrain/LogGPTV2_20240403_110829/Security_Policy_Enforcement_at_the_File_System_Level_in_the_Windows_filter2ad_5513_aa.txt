# Title: Security Policy Enforcement at the File System Level in the Windows NT Operating System Family
# Author: Stephen D. Wolthusen
# Affiliation: Fraunhofer-IGD, Security Technology Department, Rundeturmstr. 6, 64283 Darmstadt, Germany
# Email: [Your Email Address]

## Abstract
This paper presents an enforcement module for file system security, integrated into a distributed security architecture that enforces a centrally administered security policy on the Windows NT operating system platform. The mechanism provides mandatory access control, encryption, and auditing on an individual file basis across distributed systems, while remaining transparent to both users and application programs, regardless of the type of file system or its attachment mechanism.

## 1. Introduction
File system security is a fundamental feature provided by most general-purpose operating systems. However, traditional protection mechanisms, which rely on data structures maintained by the operating system, have significant limitations. One key issue is that these mechanisms require the active participation of the operating system. This assumption can be violated in non-networked configurations, such as when storage media are accessed with a different operating system or when the media are exposed to another system that does not honor the set protections.

In a heterogeneous distributed environment, the lack of a consistent, centrally enforced security policy focused on individual data objects is a major challenge. While current commercial off-the-shelf (COTS) operating systems can partially address this, they typically require a homogeneous network environment and unified administration.

To overcome these challenges, we propose an architecture that provides access and use control over data objects at a high level of abstraction, ensuring enforcement even if the object (e.g., a document) is moved across network boundaries. This is complemented by a comprehensive audit trail for all operations on these objects. We achieve this through object labeling and encryption, ensuring that the enforcement mechanisms are honored even in the absence of the original operating system.

This enforcement mechanism is part of a larger system that separates security policy determination and enforcement, with a set of servers providing consistent policy information to all nodes within the protected network. This paper focuses on the implementation of the file system security enforcement component on the Microsoft Windows NT family of operating systems, which has been under development since early 1998.

## 2. Background
Security architectures that address issues beyond individual areas like network or file system security often involve the implementation of entire operating environments with a strong focus on security, such as the Flask/Fluke architecture. While this approach offers a high degree of assurance, it requires a significant migration effort for hosts and applications. Therefore, it is crucial to implement security mechanisms at the operating system level to ensure meaningful protection.

In our design, we aim to retrofit existing operating systems with the necessary security mechanisms, ensuring interoperability with COTS and custom applications. These modifications must be invisible to both applications and users, and failures should mimic expected behavior to avoid disruptions.

Given the need to function in a heterogeneous, networked environment, the architecture must protect the file system, network, and general I/O mechanisms. Each node is assumed to be exposed to a potentially hostile environment, and it is essential to enforce a consistent and concurrent view of the security policy across all nodes, principals, and objects.

Our architecture addresses these issues through a two-pronged approach:
1. **Separation of Policy from Enforcement**: Nodes called Externally Controlled Reference Monitors (ERMs) provide consistent policy information, while other nodes enforce this policy based on decisions from the ERM or a delegated derived security policy.
2. **Layering of Abstraction Levels**: A coarse-grained outer layer surrounds the entire node, encompassing all inputs and outputs, including network traffic and file systems. This is refined by controlling activities at higher semantic levels, such as sequence analyses of application and user behavior.

### 2.1. File System Protection Mechanisms
In our architecture, files and other objects (such as network streams) are labeled with a tag managed by the security subsystem. These labels are protected against manipulation by being tied to the content's unique identifying characteristics. The actual policy information is either stored in the ERM node or temporarily delegated to the security subsystem (ECRM).

To ensure enforcement even when the security subsystem is inoperative, automatic encryption is applied to the contents of labeled objects. This also ensures that policy information is available when an object is transferred to another node.

Certain critical files, such as those required for bootstrapping the system, must not be labeled to prevent unpredictable results. However, most file objects must carry an object label to identify them. Based on the identity of the file object, the ECRM determines the necessary actions according to the applicable security policies.

A simple implementation might enforce discretionary access controls consistently across the distributed system. For more complex models, such as classification-based security, the ECRM can rewrite or create object labels to reflect the classification hierarchy. For information flow control, encryption is used to ensure that only authorized processes can access the decrypted content.

The file system layer also has access to important information correlating users and the files they use. We distinguish three types of files:
1. **Executable Files**: Identified and matched against approved applications.
2. **Scripting Languages**: Non-executable files executed by intermediate application programs, requiring heuristic and elaborate checks to protect against malicious code.
3. **Data Objects**: Plain data files that can be combined with other information for dynamic sandboxing.

For example, in a multi-level security (MLS) policy, a process can be dynamically restricted from making certain network connections after accessing a data object with a mismatched classification label.

This paper will provide an overview of the Microsoft Windows NT file system I/O architecture and a detailed discussion of the implementation of the enforcement mechanism.