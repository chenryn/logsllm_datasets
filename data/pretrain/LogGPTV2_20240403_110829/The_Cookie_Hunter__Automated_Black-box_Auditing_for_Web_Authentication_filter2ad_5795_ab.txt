forms are yet to be found, the final step is to collect the first 30 links
from the homepage and inspect them, excluding previously-visited
URLs. This is based on the intuition that such pages are typically
easily accessible to users and not hidden behind multiple menus,
and are usually at the top of the page.
example.comURLDiscoveryYesNoFound forms?SignupLoginYesSuccess?NoFound SSO?Success?SSOSuccess?AbortCookieAuditorNoVulnerable?EndAuth-CookiesPrivacyAuditorNoNoYesYesYesNoYesSession 6D: Web Security CCS '20, November 9–13, 2020, Virtual Event, USA1955its size and maxlength attributes and adjust our value accordingly.
After filling out the inputs we submit the form. At this point we
need to infer whether the signup attempt was successful or not.
We employ the following oracle that deems the signup process
successful if any step yields a positive result:
• Visit the homepage and check if any of the submitted identifiers
appear. The intuition is that if signup failed, websites would
not store the provided information. We refrain from making the
same check at the landing page after the form submission, since
a website might display identifiers in an error message.
• Visit the form’s URL and check if it is still displayed. The intu-
ition is that after a successful signup the website will not keep
displaying the form. However, we have observed cases where the
signup was successful, but the signup form was still displayed.
• Check if we received any emails from the domain. The intuition is
that a failed signup attempt would not trigger an email delivery.
• Attempt to login to the website with our automated Login module
(described further down). A successful login attempt indicates
that the signup was successful.
If the signup is deemed successful we store the filled values and
end the signup process. Otherwise, we try to identify any required
fields in the form (i.e., by checking for the HTML required attribute
or an asterisk or the required keyword in the element’s labels)
and attempt to resubmit the form using only those, to reduce the
probability of error. If that fails once again, we move on to the
next form, until a successful registration is detected or all forms
have been processed. After registration we also handle any emails
sent by the domain, typically pertaining to account verification, to
ensure that our newly created account is valid. As we cannot be
certain of those emails’ structure or of any action that might be
required, we extract and visit all URLs included in the email and
try to detect commonly used keywords and phrases pertaining to
successful verification. Through empirical analysis we observed
that several websites might require the user to additionally click
on a button in that page to finish the process. Therefore, if we do
not detect any of the above keywords, we resort to clicking all
displayed clickable elements in the page.
Automated login. For us to complete the login process, we
visit the discovered login URLs (i.e., the ones that contain a login
form) and submit each candidate form with our test account cre-
dentials. Concluding whether the login attempt has been successful
is straightforward in most cases; the login oracle re-fetches the
page with the login form and checks whether the submitted form
remains in the page. If not, the login attempt is considered success-
ful. During our empirical analysis we observed that several poorly
designed websites kept displaying the form even after a successful
login; to account for such cases, if the form persists, our login ora-
cle additionally checks if any of our test account’s identifiers (e.g.,
email, username etc.) are now present in the homepage’s source
code. Similarly, it uses a set of heuristics for detecting whether any
logout buttons are displayed in the homepage. If either process
yields a result the login is deemed successful.
SSO Fallback. If our system is not able to successfully complete
the traditional account creation process, it alternatively identifies
whether the app supports Single Sign-On with one of the most
popular Identity Providers (IdPs) – we currently support Facebook
and Google. If SSO elements are discovered it attempts to automati-
cally complete the SSO process using test accounts that have been
registered in the IdPs. First we need to identify if the site actually
supports SSO; we have created a set of regular expressions that
identify potential HTML elements in a page that can be used for per-
forming SSO. The detection of such elements is performed during
the execution of the URLDiscovery module. The module terminates
if both login and signup forms have been located, regardless of the
discovery of potential SSO elements. This is due to the fact that the
available SSO options usually accompany the account related forms
(if a traditional login scheme is supported). Thus, when locating a
login or signup form we also detect if the site also supports SSO.
For each URL, we iterate over the candidate SSO elements and
click them. We prioritize elements that are displayed, based on the
intuition that sites are usually upfront about the available login
options. For displayed elements we use Selenium’s click method,
effectively replicating a user’s action. For hidden elements we re-
frain from trying to make those elements appear, which would
involve clicking over other elements and potentially leading to
unintended behavior and considerably increasing the process’ dura-
tion. Instead, we try to trigger their onClick method via JavaScript.
While this is generally effective, in some cases the candidate el-
ement is an outer wrapper element (e.g., a  element which
contains an  element), and clicking it via JavaScript will not
trigger SSO. Thus, for each non-displayed candidate element we
also consider its children elements. While this leads to additional
elements that need to be tested, we can quickly click on elements
and decide if one is an actual SSO element; the overhead induced
by this approach is negligible in practice.
The straightforward approach for inferring whether we clicked
the correct element is to wait for the appearance of a predefined
element, as a button that authorizes the app to access user data on
the IdP should appear. However, this is inefficient and expensive
as we would need to wait a sufficiently long time after clicking on
every element to ensure that the necessary steps (and background
server-communication) of the SSO protocol actually completed. We
opt for a more elaborate approach that relies on the fact that an
HTTP request is issued towards the IdP’s SSO endpoint when the
correct element is clicked. We setup a modified proxy in passive
mode which notifies our framework if such an outgoing request
is observed. This allows us to quickly iterate over all candidate
elements. The first time our system logs into a website we authorize
the app in the IdP by following a few easily-automated steps.
It is worth noting that inferring whether the SSO process was
successful is not necessarily equivalent to determining if our system
is logged in the web app. For instance, a website might require a
few extra steps to be taken (typically pertaining to account setup)
after the user clicks on the SSO button and authorizes the app in
the IdP; in this case our system will be in an intermediary state
where the user is not yet fully logged in. We employ two separate
oracles to decide if SSO completed and if we are logged in. The
SSO oracle first checks if the SSO element we clicked on is still
displayed. If not, the SSO was (most likely) successful. However, as
some websites keep displaying the elements even after a successful
SSO, the SSO oracle utilizes the SSO login oracle for further verifying
the successful completion of the SSO process. This oracle searches
for displayed account identifiers, logout buttons, and our IdP test
Session 6D: Web Security CCS '20, November 9–13, 2020, Virtual Event, USA1956account’s profile photo which is often fetched from the IdP. If any
of those checks is positive, the SSO login is deemed successful. This
oracle focuses only on displayed elements, because we found cases
where a website that was authorized in the IdP loaded identifiers
provided by the IdP and displayed them in the page’s source (e.g.,
in an inline JavaScript object) without having logged the user in.
Some websites require a few extra steps pertaining to account
setup to be taken in order to complete the SSO. We detect and
automate this process as well, using a modified Signup module that
has a few minor changes in its workflow and oracle, which address
SSO-specific variations in the process. Typically, websites display
two options for completing the account setup after a successful
SSO, the first being to link the new SSO identity with an existing
account and the second about creating a new account. We detect any
clickable elements that indicate the latter using regular expressions
and iteratively click them. We then collect all forms displayed in
the page, as we do not have any knowledge of their structure (i.e., it
is common that such an account setup form might not even include
a password field). Finally, we iterate over the discovered forms, fill
and submit them, and consult our modified Signup oracle for each
submission. As such, the oracle has been modified so the check for
identifiers is done only on displayed elements, for the same reason
with the SSO login oracle. In addition, if all other checks fail, we
check if any password type fields were submitted in the signup
form. If that is the case, we proceed by performing a generic login
attempt using the discovered login forms.
False Positive/Ambiguous Login Elimination. After creat-
ing an account, we perform a final step to eliminate cases where
our oracles yield a false positive (i.e., consider a login attempt to be
successful despite not actually being logged in) or are not able to
disambiguate between being logged in or not for a specific website.
We send an HTTP request without appending any cookies and con-
sult our login oracle once again; if it claims we are still logged in
we mark the website as a false positive and abort the process. This
happens when a website does not follow any of the development
“conventions” that our oracles anticipate, or other mechanisms in-
terfere with the session’s state (e.g., a website displays an identifier
that was stored in localStorage even when no cookies are sub-
mitted). It is worth noting that while it is straightforward to clear
such storage mechanisms, we refrain from doing so since this can
have unexpected effects on a website’s intended functionality and
impact the operation of subsequent modules.
Captchas. Protecting account creation through captchas is com-
mon practice and, as such, creating a captcha solver can consid-
erably improve the coverage our system obtains. Initially, we im-
plemented a solver based on recent attacks against Google’s audio
reCaptcha [22, 80]. Unfortunately, reCaptcha’s advanced risk anal-
ysis system currently detects the use of WebDriver, which results
in Google not serving captchas to our framework. Since building a
stealthier captcha solver is out of the scope of our work, and fund-
ing human captcha-solving services to create accounts presents an
ethical dilemma, we opted to not handle such cases. However, due
to the popularity of domains that employ captchas, in our evalua-
tion we include a set of popular domains for which we completed
the account creation process manually. We stress, however, that
the ∼25K domains that comprise the bulk of our evaluation did not
require any manual intervention.
3.2 Cookie Auditor
To investigate whether users are exposed to session hijacking at-
tacks due to flawed or vulnerable authentication practices, the next
phase of our framework’s workflow relies on modules that analyze
the cookies set by a specific web app and identify potential hijacking
opportunities based on their attributes. As we require a method for
deducing with minimal overhead which cookies provide some form
of authentication, we design and implement a simple, yet effective,
algorithm that we present in Algorithm 1 (see Appendix). The core
idea is to inspect whether the discovered cookies are protected with
the appropriate security-related attributes and subsequently infer
which of those cookies are used for authentication.
Cookie attributes. Our CookieAuditor algorithm begins by
identifying which cookies set by the website are protected with the
secure and httpOnly attributes and groups them accordingly (line 2).
If a cookie has both attributes enabled, it will be included in both
sets. It then iterates over these cookie sets (8) and infers whether
the website is vulnerable to a specific attack from our threat model
based on the corresponding attribute. Before actually evaluating a
cookie set, it first checks if the set is empty. This indicates that the
site is vulnerable to the attack, e.g., if none of the cookies has the
secure flag set, an eavesdropper could successfully perform a cookie
hijacking attack (9-10), as described in prior manual studies [77].
On the other hand, if the attribute is present in one or more cookies,
the algorithm will either infer the result from the previously tested
set or evaluate this cookie set.
Evaluating a set means that we exclude it from the browser’s
cookie jar (i.e., those cookies will not be sent in the subsequent
request), issue a new HTTP request to the website, and consult the
login oracle to determine if we are still logged in (30-32). As can be
easily deduced, being logged in while excluding all cookies with a
specific attribute means that the website is indeed vulnerable to the
specific attack. However, if the exact same cookie set has been tested
before we can directly conclude whether the website is vulnerable
or not (14-15). Finally, in cases where the cookie set is a subset of
a previously tested set where our test account remained logged
in, we can again safely conclude that the website is vulnerable
for this attack as well (16-18). For instance, if we excluded the
set [A, B, C] and we were still logged in (i.e., vulnerable) then
testing the set [A, C] would also result in a logged in state, since
we would now send even more cookies than before. This is why we
prioritize larger cookie sets (we omitted this part of our algorithm
for brevity). Finally, after evaluating a cookie set, we send another
request containing all the cookies, to make sure our session is still
valid. (only if we were logged out after the test). If the session has
been invalidated by the server, we login again and update our cookie
values with those of the new session. This allows us to efficiently
identify if a website is susceptible to cookie hijacking and, if so, via
what means. In the worst case scenario, our approach would need
9 requests, i.e., 3 requests per security-related cookie attribute. It
is important to note that this technique has the drawback of not
revealing which of the cookies are actually authentication cookies.
Authentication Cookies. To further analyze the root causes
of authentication flaws, our framework needs to be able to identify
the subset of authentication cookies among all the cookies that
are set. Mundada et al. [64] proposed an algorithm, however, their
Session 6D: Web Security CCS '20, November 9–13, 2020, Virtual Event, USA1957approach overlooks certain cases and can lead to incorrect results.
We build upon the core algorithm they proposed and modify it to
correctly handle additional cases. Their proposed algorithm starts
by considering only the cookies set at login time (login cookies)
and generating a partially ordered set (POSET) of every possible
combination. Since the search space is exponential, and in many
cases infeasible to test all combinations, the algorithm establishes
a series of rules based on the outcome of certain tests to reduce the
testing time. The core algorithm works as follows:
• Alternate by testing one round from the bottom of the POSET
(i.e., disabling cookies from a full cookie set) followed by a round
from the top of the POSET (i.e., enabling cookies from an empty
cookie set). According to their description, rounds are followed
in an incremental manner and all cookie sets for a given round
are tested consecutively (e.g., all cookie sets where only 1 cookie
is disabled, then all cookie sets where 1 is enabled etc.). This is
also the root cause that leads to incorrect results in certain cases,
as we detail next.
• If a disabled cookie set causes the test to fail (i.e., the user is
logged out), then all subsequent cookie sets that do not contain
this set can be skipped.
• If an enabled cookie set is found to cause the test to succeed (i.e.,
the user remains logged in), then all subsequent cookie sets that
contain this set can be skipped.
• If a cookie that was not set at login time is detected to be part
of an authentication combination, a similar nested process is
executed for the non-login cookies and the login cookie array is
expanded to include these cookies.
While this approach is generally effective, we have identified
scenarios where it yields incorrect results. To illustrate such a case,
consider the following example: if a website has two authentica-
tion cookie combinations, e.g., [A,B] and [C,D], the algorithm will
first set a rule when disabling two cookies. Specifically, when dis-
abling [A,C] none of the authentication cookie combinations we
are looking for will be complete, and the user will be logged out
of the web app. This results in establishing the rule “any cookie
set that does not include [A,C] should be skipped“. Later on, when
disabling the set [B,D] (which satisfies the first rule), the user will
again be logged out, leading to a similar rule for this set as well.
At this point the ruleset dictates that any set that does not include
[A,C] or [B,D] will be skipped. However, in the very next round (i.e.,
when enabling two cookies), when checking whether the actual
authentication cookie combinations should be tested, the algorithm
will skip them as they do not satisfy the above ruleset. As a result,
the actual authentication cookie combinations will not be inferred.
Thus, we cannot blindly follow such rules when enabling cookie
sets. This, however, introduces the risk of a major performance
penalty. Consider a second example of a website that has two au-
thentication combinations, e.g., [A] and [B]. The first rules the
algorithm will set will be when enabling a single cookie. Specifi-
cally, when only enabling [A] the user will be logged in and a rule
will be set, dictating that “any cookie set that includes [A] should
be skipped“. Likewise, when enabling [B] a similar rule will be set.
In the next round (i.e., when disabling two cookies) the only set
that will be tested will be the one not containing [A] and [B], as it
is the only one that respects the current ruleset, and the user will
be logged out. This results in the rule “any cookie set that does not
include [A] or [B] should be skipped“ being set. Next, when enabling
two cookies, and having established that we cannot follow the last
rule when enabling cookies, the algorithm will then test all sets of
length two that do not contain any of the two authentication cook-
ies. The following rounds of the algorithm behave similarly (i.e.,
disabling/enabling three cookies and so on). However, we can tell
that the algorithm has already detected the authentication cookie
combinations and should not try any more tests.
To avoid this performance issue, we modify the algorithm to
respect such rules when enabling cookies, but in a slightly different
manner: cookie sets that result in the user being logged out when
disabled are flattened into a vector (e.g., the ruleset [[A,C], [B,D]]
from the first example becomes [A, B, C, D]) and we safely skip
the cookie sets that do not include any of these cookies. In our
first example this results in the authentication cookie combinations
being detected. In the second example it results in not testing any
sets that are redundant after detecting the correct combinations.
We also note that while we label them as authentication cookies,
since they lead to the exposure of user identifiers, this might be the
result of flaws in the web app’s authorization policies, and not due