attempt to modify the structure of the malicious code to evade detection. While
one-time changes to the structure of a binary are quite possible, the automatic
generation of semantically equivalent code pieces that do not share common sub-
structures is likely more challenging. Another possibility to erode the similarities
between worm instances is to insert conditional branches into the code that are
never taken. This can be done at a low cost for the attacker, but it might not be
straightforward to generate such conditional branches that cannot be identiﬁed
by a more advanced static analysis. A possibly more promising attack venue for
a worm author is to attack the coloring scheme. By ﬁnding instructions from
diﬀerent classes, worm variations can be obtained that are considered diﬀerent
by our system. The experimental results for ADMmutate in the previous section
have demonstrated that the system can be forced to calculate diﬀerent ﬁnger-
prints for the decryption routine. However, the results have also shown that,
despite appearing completely diﬀerent on a byte string level, the total number
of ﬁngerprints is very low. In this case, detection is delayed, but because of the
small number of variations, the worm will eventually be automatically identiﬁed.
Finally, our technique cannot detect malicious code that consists of less than
k blocks. That is, if the executable has a very small footprint we cannot extract
suﬃcient structural information to generate a ﬁngerprint. We chose 10 for k in
our experiments, a value that seems reasonable considering that the Slammer
worm, which is only 376 bytes long and ﬁts into a single UDP packet, has a CFG
with 16 nodes. For comparison, CodeRed is about 4 Kilobytes long and has a
CFG with 127 nodes.
9 Conclusions
Worms are automated threats that can compromise a large number of hosts in a
very small amount of time, making human-based countermeasures futile. In the
past few years, worms have evolved into sophisticated malware that supports
optimized identiﬁcation of potential victims and advanced attack techniques.
Polymorphic worms represent the next step in the evolution of this type of
malicious software. Such worms change their binary representation as part of
Polymorphic Worm Detection Using Structural Information of Executables
225
the spreading process, making detection and containment techniques based on
the identiﬁcation of common substrings ineﬀective.
This paper presented a novel technique to reliably identify polymorphic worms.
The technique relies on structural analysis and graph coloring techniques to char-
acterize the high-level structure of a worm executable. By abstracting from the
concrete implementation of a worm, our technique supports the identiﬁcation of
diﬀerent mutations of a polymorphic worm.
Our approach has been used as the basis for the implementation of a system
that is resilient to a number of code transformation techniques. This system has
been evaluated with respect to a large number of benign ﬁles and network ﬂows
to demonstrate its low rate of false positives. Also, we have provided evidence
that the system represents a promising step towards the reliable detection of
previously unknown, polymorphic worms.
References
1. L. Babai annd E. Luks. Canonical Labeling of Graphs. In 15th ACM Symposium
on Theory of Computing, 1983.
2. M. Bailey, E. Cooke, F. Jahanian, J. Nazario, and D. Watson. The Internet Motion
Sensor: A Distributed Blackhole Monitoring System. In Network and Distributed
Systems Symposium (NDSS), 2005.
3. V. Berk, R. Gray, and G. Bakos. Using Sensor Networks and Data Fusion for Early
Detection. In SPIE Aerosense Conference, 2003.
4. D. Dagon, X. Qin, G. Gu, W. Lee, J. Grizzard, J. Levin, and Henry O. Honey-
Stat: Local Worm Detection Using Honeypots. In 7th International Symposium on
Recent Advances in Intrusion Detection (RAID), 2004.
5. T. DeTristan, T. Ulenspiegel, Y. Malcom, and M. von Underduk.
Poly-
morphic Shellcode Engine Using Spectrum Analysis. http://www.phrack.org/
show.php?p=61&a=9.
6. H.-A. Kim and B. Karp. Autograph: Toward Automated, Distributed Worm Sig-
nature Detection. In 13th Usenix Security Symposium, 2004.
7. O. Kolesnikov and W. Lee. Advanced Polymorphic Worms: Evading IDS by Blend-
ing in with Normal Traﬃc. Technical report, Georgia Tech, 2004.
8. C. Kreibich and J. Crowcroft. Honeycomb - Creating Intrusion Detection Signa-
tures Using Honeypots. In 2nd Workshop on Hot Topics in Networks, 2003.
9. C. Kruegel, F. Valeur, W. Robertson, and G. Vigna. Static Analysis of Obfuscated
Binaries. In 13th Usenix Security Symposium, 2004.
10. C. Linn and S. Debray. Obfuscation of Executable Code to Improve Resistance
In ACM Conference on Computer and Communications
to Static Disassembly.
Security (CCS), 2003.
11. S. Macaulay. ADMmutate: Polymorphic Shellcode Engine. http://www.ktwo.ca/
ttsecurity.html.
12. B. McKay. Nauty: No AUTomorphisms, Yes?
nauty/.
http://cs.anu.edu.au∼bdm/
13. B. McKay. Practical graph isomorphism. Congressus Numerantium, 30, 1981.
14. D. Moore, C. Shannon, G. Voelker, and S. Savage. Internet Quarantine: Require-
ments for Containing Self-Propagating Code. In IEEE Infocom Conference, 2003.
226
C. Kruegel et al.
15. J. Newsome, B. Karp, and D. Song. Polygraph: Automatically Generating Sig-
natures for Polymorphic Worms. In IEEE Symposium on Security and Privacy,
2005.
16. V. Paxson. Bro: A System for Detecting Network Intruders in Real-Time. In 7th
Usenix Security Symposium, 1998.
17. M. O. Rabin. Fingerprinting by Random Polynomials. Technical report, Center
for Research in Computing Techonology, Harvard University, 1981.
18. M. Roesch. Snort - Lightweight Intrusion Detection for Networks. In Usenix LISA
Conference, 1999.
19. S. Singh, C. Estan, G. Varghese, and S. Savage. Automated Worm Fingerprinting.
In 6th Symposium on Operating System Design and Implementation (OSDI), 2004.
20. S. Skiena. Implementing Discrete Mathematics: Combinatorics and Graph Theory,
chapter Graph Isomorphism. Addison-Wesley, 1990.
21. Sophos. War of the Worms: Top 10 list of worst virus outbreaks in 2004.
http://www.sophos.com/pressoffice/pressrel/uk/20041208yeartopten.html.
22. S. Staniford, D. Moore, V. Paxson, and N. Weaver. The Top Speed of Flash Worms.
In 2nd ACM Workshop on Rapid Malcode (WORM), 2004.
23. S. Staniford, V. Paxson, and N. Weaver. How to 0wn the Internet in Your Spare
Time. In 11th Usenix Security Symposium, 2002.
24. S. Venkataraman, D. Song, P. Gibbons, and A. Blum. New Streaming Algorithms
for Fast Detection of Superspreaders. In Network and Distributed Systems Sympo-
sium (NDSS), 2005.
25. N. Weaver, V. Paxson, S. Staniford, and R. Cunningham. A Taxonomy of Com-
puter Worms. In ACM Workshop on Rapid Malcode, October 2003.
26. N. Weaver, S. Staniford, and V. Paxson. Very Fast Containment of Scanning
Worms. In 13th Usenix Security Symposium, 2004.
27. D. Whyte, E. Kranakis, and P. van Oorschot. DNS-based Detection of Scanning
Worms in an Enterprise Network. In Network and Distributed Systems Symposium
(NDSS), 2005.
28. M. Williamson. Throttling Viruses: Restricting Propagation to Defeat Malicious
Mobile Code. In 18th Annual Computer Security Applications Conference (AC-
SAC), 2002.
Anomalous Payload-Based Worm Detection and 
Signature Generation* 
Ke Wang, Gabriela Cretu, and Salvatore J. Stolfo 
Computer Science Department, Columbia University, 
500 West 120th Street, New York, NY 10027 
{kewang, gcretu, sal}@cs.columbia.edu 
Abstract. New features of the PAYL anomalous payload detection sensor are 
demonstrated to accurately detect and generate signatures for zero-day worms. 
Experimental  evidence  demonstrates  that  site-specific  packet  content  models 
are  capable  of  detecting  new  worms  with  high  accuracy  in  a  collaborative 
security  system.  A  new  approach  is  proposed  that  correlates  ingress/egress 
payload  alerts  to  identify  the  worm’s  initial  propagation.  The  method  also 
enables  automatic  signature  generation  that  can  be  deployed  immediately  to 
network firewalls and content filters to proactively protect other hosts. We also 
propose a collaborative privacy-preserving security  strategy  whereby different 
hosts can exchange PAYL signatures to increase accuracy and mitigate against 
false  positives.  The  important  principle  demonstrated  is  that  correlating 
multiple  alerts  identifies  true  positives  from  the  set  of  anomaly  alerts  and 
reduces incorrect decisions producing accurate mitigation. 
1   Introduction 
Zero-day  worms  are  a  serious  wide-scale  threat  due  to  the  monoculture  problem. 
Large  numbers  of  replicated  vulnerable  systems  allow  wide-spread  infection. 
Furthermore, if any standard signature-based detector is blind to a zero-day attack, it 
is  safe  to  say  that  all  installations  of  that  same  detector  are  also  blind  to  the  same 
attack. The time from worm launch to wide-spread infestation is now very short, far 
shorter than the time to generate signatures for filtering, and certainly far shorter than 
the time to patch vulnerable systems. We consider the problem of accurately detecting 
these “zero-day” attacks upon their very first appearance, or very soon thereafter.  
Some attacks exploit the vulnerabilities of a protocol; others seek to survey a site 
by  scanning  and  probing.  These  attacks  can  often  be  detected  by  analyzing  the 
network  packet  headers,  or  monitoring  the  connection  attempts  and  traffic  volume. 
But some other attacks display normal protocol behavior except that they may carry 
malicious content in an otherwise normal connection. For example, slow-propagating 
worms  targeting  specific  sites  may  not  exhibit  any  unusual  volumes  of  connection 
attempts, and hence may go unnoticed by sensors based upon scan or probe behavior.  
*  This work has been partially supported by a grant with the Army Research Office/DHS, No. 
DA  W911NF-04-1-0442  and  an  SBIR  subcontract  with  the  HS  ARPA  division  of  the 
Department of Homeland Security. 
A. Valdes and D. Zamboni (Eds.): RAID 2005, LNCS 3858, pp. 227 – 246, 2006. 
© Springer-Verlag Berlin Heidelberg 2006 
228 
K. Wang, G. Cretu, and S.J. Stolfo 
We  posit  that  analyzing  the  packet  payload  provides  a  reliable  way  to  detect  
these  attacks.  State-of-the-art  content-based  detectors  depend  on  signatures  or 
“thumbprints1” developed from known attacks, or a possibly error-prone specification 
of expected content, and hence may not be capable of detecting new attacks that were 
not covered by known examples or incomplete specifications. We focus this research 
on payload-based anomaly detection and seek to develop algorithms and systems for 
network intrusion detection that are light-weight and real-time.  
The  PAYL  anomaly  detection  sensor  previously  reported  in  [20]  accurately  models 
normal  payload  flowing  to  and  from  a  site  using  unsupervised  machine  learning 
techniques.  The  first  principle  behind  PAYL  is  that  a  new  zero-day  attack  will  have 
content data never before seen by the victim host, and  will likely appear quite different 
from normal data and be deemed anomalous. One of PAYL’s innovations is the efficient 
means  of  modeling  “normal  data”  effectively,  as  we  describe  shortly.  Thus,  PAYL  is 
designed to detect the very first occurrences of an attack that exhibits anomalous content 
to stop the propagation of the new attack to many other potential victims. 
Key  features  of  worms  include  their  self-propagation  strategy  and  the  means  by 
which they seek new victims. A considerable amount of prior work depends upon the 
detection  of  worm-like  scan/probe  behavior  to  catch  the  worm  propagation.  We 
propose  a  new  approach  which  is  based  on  ingress/egress  anomalous  payload 
correlation,  and  uses  no  scan  or  probe  information.  The  key  idea  is  that  a  newly 
infected  host  will  begin  sending  outbound  traffic  that  is  substantially  similar  (if  not 
exactly  the  same)  as  the  original  content  that  attacked  the  victim  (even  if  it  is 
fragmented differently across multiple packets). Correlating ingress/egress anomalous 
payload alerts can detect a worm propagation and stop the worm spread from the very 
moment  it  first  attempts  to  propagate  itself,  instead  of  waiting  until  the  volume  of 
outgoing  scans  suggests  full-blown  propagation  attempts.  The  important  principle 
demonstrated is that the reduction of false positive alerts from an anomaly detector is 
not  the  central  problem.  Rather,  correlating  multiple  alerts  identifies  true  positives 
from the set of alerts and reduces incorrect decisions producing accurate mitigation. 
Since  this  strategy  is  not  dependent  upon  detecting  scanning  patterns,  the  approach 
may be applied to a broader class of worms. For example, worms like “Witty” target a 
specific set of IP addresses and exhibit no scanning behavior. 
We  do  not  propose  to  store  and  correlate  all  incoming  packet  content  with 
outbound  packets;  that  would  be  enormously  expensive  in  space  and  time  and  may 
lead to many false alarms. Rather, we automatically identify a set of “suspect inbound 
packets”, considered to contain anomalous content, and inspect them  for anomalous 
outbound  content  directed  to  the  same  ports.  The  number  of  suspect  packets  is  a 
function of the anomaly detector in PAYL and the particular traffic characteristics in 
which it is placed and the amount of training to compute stable models. In many of 
the environments in which PAYL has been tested, the number of anomalies is a very 
small percentage of the  network traffic. Another important aspect of this strategy is 
that the correlated ingress/egress content anomalies are used to automatically generate 
1  Hashes  of  packet  content.  Such  approaches  will  fail  if  polymorphic  worms  morph  their 
content  slightly,  or  if  a  worm  purposely  fragments  itself  differently  on  each  propagation 
attempt. 
Anomalous Payload-Based Worm Detection and Signature Generation 
229 
content-filtering  signatures.  The  overlapping  content  of  the  similar  outgoing  and 
incoming anomalous payloads are a natural set of candidate worm signatures. PAYL 
generates worm signatures from this shared content, which can be distributed over the 
network to other collaborating hosts to prevent any further worm infections. 
In  this  paper,  we  will  show  that  PAYL  can  successfully  detect  inbound  worm 
packets with high accuracy and a low false positive rate. We will then show that if the 
worm  has already infected a machine and starts to infect others, PAYL can quickly 
detect  the  propagation  with  an  automatically  generated  signature  that  can  be 
distributed to other machines in the local LAN or across domains. This signature is 
accurate, and won’t block normal traffic (thus exhibiting a low false positive rate).  
New  and  successful  wide-scale  infections  occur  on  the  internet  with  relative 
frequency. The  monoculture problem applies not only to a high density of common 
vulnerable  services  and  applications  on  the  Internet,  but  it  also  applies  to  deployed 
security  systems.  If  one  standard  commonly  used  open-source  or  COTS  security 
system is blind to a new zero-day attack, then it is safe to say that all are blind to the 
same attack.  
Some  researchers  have  studied  a  solution  to  the  monoculture  problem  by 
considering methods to diversify common application software, making each distinct 
site invulnerable to the same exact attack exploit [1]. We conjecture that systems that 
run the same services and software applications already exhibit diversity through their 
content flows. This provides the means of creating “site-specific” anomaly detectors 
capable of detecting new exploits, especially if many sites collaborate with each other 
and exchange alert information about suspicious packet content.  
The core mindset of most security architectures dictates that each site or domain is 
an  enclave,  and  any  external  site  is  regarded  as  the  enemy.  Worm  writers  and 
attackers, on the other hand, do collaborate and share information amongst themselves 
about vulnerabilities and tools to rapidly create new attack exploits, launch them, and 
form shared drone sites, often simultaneously  worldwide.  Defenders still depend on 
centralized  management  to  update  detection  signatures  and  deploy  patches  on  time 
scales that are no longer tenable. We posit that a  collaborative  security system [17, 
18], a distributed detection system that automatically shares information in real-time 
about anomalous behavior experienced at the moment of attack among collaborating 
sites, will substantially improve protection against wide-scale infections. Indeed, most 
collaborating systems can be protected against new exploits by limiting propagations 
to a small set of initial victims. By integrating the PAYL anomalous payload sensor 
into a collaborative security system, and exchanging information about suspect packet 
content, the resulting system not only can detect new zero-day exploits but can also 
automatically generate new zero-day attack signatures on-site for content filtering. In 
this  paper,  we  demonstrate  this  strategy  and  show  that  a  collaborative  detection 
system  using  multiple  PAYL  sensors,  each  trained  on  a  distinct  site,  can  accurately 
detect  an  emerging  worm  outbreak  very  fast,  and  reduce  the  incidence  of  false 
positives to nearly zero. 
PAYL has been under development for well over a year and was first reported in the 
RAID 2004 conference [20], where many of the details about the underlying algorithms 
are fully described. The rest of the paper is organized as follows. Section 2 discusses 
related  work  in  worm  detection  and  automatic  signature  generation.  In  Section  3,  we 
give an overview of the PAYL detection sensor and demonstrate how well it can detect 
230 
K. Wang, G. Cretu, and S.J. Stolfo 
real-world  worms.  Section  4  presents  an  evaluation  of  the  ingress/egress  traffic 
correlation techniques, and the automatic  worm signature generation. In Section 5  we 
introduce  the  idea  of  collaborative  security  among  sites,  and  demonstrate  its 
effectiveness using anomalous payload collaboration. Section 6 concludes the paper. 
2   Related Work 
Rule-based network intrusion detection systems such as Snort and Bro can do little to 
stop zero-day  worms. They depend upon signatures only known after the  worm  has 
been  launched  successfully,  essentially  disclosing  their  new  content  and  method  of 
infection for later deployment. Shield [19] provides vulnerability signatures instead of 
string-oriented  content  signatures,  and  blocks  attacks  that  exploit  that  vulnerability. 
The vulnerability signatures specify in general what an exploit would look like in the 
datagram of packets and a host-based “shield” agent would drop any connections that 
match this specification. A shield is manually specified for a vulnerability identified 
in  some  network  available  code,  and  is  distributed  to  all  desktops  to  provide 
protection against attacks. The time lag to specify,  test and deploy shields from the 
moment the vulnerability is identified favors the worm writer, not the defenders.  
Several  researchers  have  considered  the  use  of  packet  flows,  and  in  some  cases 
content  analysis.  Honeycomb  [7]  is  a  host-based  intrusion  detection  system  that 
automatically  creates  signatures.  It  uses  a  honeypot  to  capture  malicious  traffic 
targeting dark space, and then applies the longest common substring (LCS) algorithm 
on  the  packet  content  of  a  number  of  connections  going  to  the  same  services.  The 
computed substring is used as candidate worm signature. PAYL optionally uses either 
LCS  or  the  longest  common  subsequence  (LCSeq)  on  anomalous  packets  not 
necessarily targeting a honeypot, but any victim in the protected LAN.   
Another  system,  Autograph  [5]  uses  heuristics  to  classify  traffic  into  two 
categories: a  flow pool  with  suspicious scanning activity and a non-suspicious  flow 
pool. TCP  flow  reassembly  is  applied  to  the  suspicious  flow  pool  and  they  employ 
Rabin  fingerprints  to  partition  the  payload  into  small  blocks.  These  blocks  are  then 
counted  to  determine  their  prevalence,  and  the  most  frequent  substrings  from  these 
blocks form a  worm  signature. The signature generator uses blacklisting in order to 
decrease  the  number  of  false  positives.  They  also  describe  collaboration  between 
multiple sensors, but the sensors exchange only suspicious IPs and destination ports. 
This  approach  to  sharing  scan  alerts  is  similar  to  other  projects  including  the 
Worminator project [10] at Columbia University, in which PAYL is a component.  
Earlybird  [15]  is  another  system  that  can  automatically  detect  new  worms  in  a 
fashion  similar  to  Autograph,  For  each  packet,  the  substrings  computed  by  Rabin 
fingerprints are inserted into a frequency count table, incrementing a count field each 
time the substrings are encountered. The information about source and destination IPs 
is  recorded.  The  table  is  stored  in  rank  order  by  the  frequency  counts  so  that  it 
produces  the  set  of  likely  worm  traffic.  This  system  measures  the  prevalence  of  all 
common  content  in  the  network  and  then  applies  IP  address  dispersion,  counting 
distinct  source  and  destination  IPs  for  each  suspicious  content,  in  order  to  keep  the 
false  positive  rate  small.  This  system  is  not  used  in  collaboration  between  multiple 
sensors; it has been developed as a centralized system. 
Anomalous Payload-Based Worm Detection and Signature Generation 
231 
Each  of  the  aforementioned  projects  are  based  on  detecting  frequently  occurring 
payloads delivered by a source IP that is “suspicious”, either because the connection 
targeted  dark  IP  space  or  the  source  IP  address  exhibited  pre-scanning  behavior. 
These approaches imply that the detection occurs some time after the propagation of 
the worm has executed. Unlike these approaches, PAYL does not depend on scanning 
behavior  and  payload  prevalence.  PAYL  detects  anomalous  payloads  immediately, 
and  detects  the  first  propagation  attempt  of  the  worms  by  correlating  ingress/egress 
packet content alerts. PAYL has also been put to use in a system that automatically 
generates patches in a sandbox version of vulnerable software systems. See [14] for 
complete details. A  more general discussion of related  work in the area of anomaly 
detection can be found in [20]. 