Exploring the NFC Attack Surface
Charlie Miller
Managing Principal
Accuvant Labs
PI:EMAIL
July 13, 2012
Charlie Miller: Exploring the NFC Attack Surface 
Introduction
4
NFC protocols
5
Physical and RF layer
6
Initialization, Anti-Collision, and Protocol Activation layer
7
Protocol layer
7
Application layer
8
Example data capture
10
Fuzzing the NFC stack
13
Fuzzing setup
15
Fuzzing test cases
16
Results - Nexus S
18
Results - Nokia N9
25
NFC higher level code
26
Nexus S - Android 2.3.3
26
Galaxy Nexus - Android 4.0.1
28
Galaxy Nexus - Android 4.1.1
32
Nokia N9 - MeeGo 1.2 Harmattan PR1.3
33
Possible attacks
37
Android NFC Stack bug
37
Android Browser
38
N9 Bluetooth pairing
38
N9 bugs
39
Summary
41
Acknowledgements
42
Charlie Miller: Exploring the NFC Attack Surface 
References
43
Charlie Miller: Exploring the NFC Attack Surface 
Introduction
Near Field Communication (NFC) has been used in mobile devices in some countries 
for a while, and is now emerging on mobile devices in use in the United States.  This 
technology allows NFC-enabled devices to communicate with each other within close 
range, typically a few centimeters.  NFC is being deployed and adopted as a way to 
make payments, using a mobile device to communicate credit card information to an 
NFC enabled terminal.  It is a new, cool, technology, but as with the introduction of any 
new technology, the question that must be asked is what kind of impact the inclusion of 
this new functionality will have on the attack surface of mobile devices.  
In this paper we explore this question by introducing NFC and its associated protocols.  
Next, we describe how to fuzz the NFC protocol stack for two devices as well as provide 
the results of our testing.  Then we see for these devices what software is built on top of 
the NFC stack.  It turns out that through NFC, using technologies like Android Beam or 
NDEF content sharing, one can force some phones to parse images, videos, contacts, 
ofﬁce documents, and even open up web pages in the browser, all without user 
interaction.  
In some cases, it is even possible to completely take control of the phone via NFC, 
including stealing photos, contacts, even sending text messages and making phone 
calls.  The next time you present your phone to pay for your cab, be aware you might 
have just gotten owned.
Charlie Miller: Exploring the NFC Attack Surface 
NFC protocols
Understanding the NFC attack surface ﬁrst requires some understanding of NFC and 
the underlying protocols on which it is based.  Figure 1, below, shows a diagram of most 
of the associated protocols used for NFC transactions.  
Figure 1: Relevant speciﬁcations for NFC
At its most basic level, NFC is a set of communication protocols based on radio-
frequency identiﬁcation (RFID) standards, including ISO 14443.  NFC uses the 
frequency 13.56 MHz and its operating range is said to be between 3-10 centimeters, 
although in practice it is typically near the lower end of that range.  We’ve observed the 
range of 2-3 centimeters in real world scenarios.  NFC operates at low data rates, 
ranging from 106kbit/s to 424kbits/s.
There are two general ways NFC communication takes place: in the ﬁrst, there is an 
initiator and a target.  The initiator, for example a mobile device, actively generates a 
radio frequency (RF) ﬁeld that can power the passive target, such as an NFC tag.  The 
target tag answers by modulating the existing ﬁeld provided by the initiator.  This 
enables the tag to be constructed very simply, without a need for power or batteries.  In 
Charlie Miller: Exploring the NFC Attack Surface 
this situation the initiator can read or sometimes write data to and from the tag.  There 
are many types of tags and many protocols that can be used to interact with different 
types of tags, again, please see Figure 1.
The other mode of NFC communication is peer-to-peer (P2P).  In order to do P2P, both 
devices need to be powered and generate their own RF ﬁelds.
Physical and RF layer
At the lowest level, communication takes place according to ISO 14443 A-2.  There are 
different codings to transfer data.  At 106 kbits/s, a modiﬁed Miller coding with 100% 
modulation is used.  In other cases, Manchester coding is used with a modulation ratio 
of 10%.  Figure 2 shows an FFT plot of captured NFC trafﬁc using GNU Radio.  
Figure 2:  NFC trafﬁc captured at 195k samples/second, decimated by 4, with low pass 
ﬁlter at 10k  
Charlie Miller: Exploring the NFC Attack Surface 
The next Figure shows the waveform of some low-level data.  
Figure 3: A waveform of the value “26”
From looking at the signal in Figure 3, above, which was taken between a Nexus S 
Android device and an NFC tag, one can deduce that the Nexus S transmits data at a 
rate of 106kbps using 100% ASK with Manchester encoding.  With some effort, you can 
ﬁnd the signal in Figure 3 corresponds to the byte “0x26” which is a SENS_REQ 
according to ISO 14443-3. 
This layer is really too low for our purposes, for more information on this protocol layer, 
consult [1-3].  
Initialization, Anti-Collision, and Protocol Activation layer
For some types of NFC communication, there is a phase whereas two NFC enabled 
devices become aware of each other and initialize their communications.  There is very 
little data exchanged here, and for reasons discussed in the next section, we cannot 
easily fuzz this part of the protocol, so we skip any further details.  For more information, 
please see [4].
Protocol layer
Lower levels are focused on physical aspects and starting communication.  The protocol 
layer is the layer for actually transmitting the data intended to be sent or received with 
the communication.  In general, the data can be anything, but a typical data payload will 
be described in the next section.  
There are a variety of protocol layer protocols supported in most NFC devices.  We’ll 
brieﬂy describe each of them.
Charlie Miller: Exploring the NFC Attack Surface 
Type 1 (Topaz)
Type 1 tags use a format sometimes called the Topaz protocol, see [5].  It uses a simple 
memory model which is either static for tags with memory size less than 120 bytes or 
dynamic for tags with larger memory.  Bytes are read/written to the tag using commands 
such as RALL, READ, WRITE-E, WRITE-NE, RSEG, READ8, WRITE-E8, WRITE-N8.
MIFARE Classic
MIFARE classic tags are storage devices with simple security mechanisms for access 
control.  They use an NXP proprietary security protocol for authentication and ciphering.  
This encryption was reverse engineered and broken in 2007 [6].
Type 2 (MIFARE UltraLight)
Type 2 tags [7] are similar to Type 1 tags.  They have a static memory layout when they 
have less than 64 bytes available and a dynamic layout otherwise.  The ﬁrst 16 bytes of 
memory contain metadata like a serial number, access rights, and capability container.  
The rest is for the actual data.  Data is accessed using READ and WRITE commands, 
see the section “Example data capture” for an example of a Type 2 transaction.
Type 3 
As far as I can tell, there aren’t any tags that use Type 3 transactions, but if you care, 
check out [8].
Type 4 (DESFire)
Type 4 tags contain a simple ﬁle system composed of at least 2 ﬁles, the Capability 
Container (CC) ﬁle and the NDEF ﬁle.  The commands include Select, ReadBinary, and 
UpdateBinary.  At the most basic level, the device must read the CC ﬁle, which tells it 
information about the NDEF ﬁle which it can then select and read.  The CC ﬁle is 
typically 15 bytes in size.  See [9] for more details.
LLCP (P2P)
The previous protocol layer protocols have all had initiators and targets and the 
protocols are designed around the initiator being able to read/write to the target.  Logical 
Link Control Protocol (LLCP) is different because it establishes communication between 
two peer devices.  LLCP allow connections to be established and deactivated, data to 
be transferred at any time when the link is established, do multiplexing, and provide 
connectionless or connection-oriented transport.  Each PDU contains a source and 
destination address, a type, a sequence ﬁeld and the LLCP payload.  The different 
types include things like SYMM to keep connections alive when there are no other 
PDU’s available, CONNECT to establish a connection-oriented connection, and I for the 
actual high level data payload.  There are other types of PDU’s as well, see [10] for 
details.  
Application layer
While NFC can transport arbitrarily formatted data, typically it transports data in the NFC 
Data Exchange Format (NDEF).  It is a simple binary message format that can be used 
Charlie Miller: Exploring the NFC Attack Surface 
to encapsulate one or more application-deﬁned payloads of arbitrary type and size into 
a single payload.  NDEF data contains different type identiﬁers to describe the type of 
data to expect, such as URI’s, MIME types, or NFC-speciﬁc types.  There are 
speciﬁcations for NDEF [11] as well as for each of the well known types, see [12-13] for 
example.  One example NDEF is given in the next section.  For clarity, and because the 
NDEF format is so important for NFC, we provide another couple of examples here.  We 
start with a “smart poster” which is basically a URL.
0000: D1 02 18 53 70 91 01 05 54 02 65 6E 68 69 51 01  Ñ..Sp..T.enhiQ.
0010: 0B 55 01 67 6F 6F 67 6C 65 2E 63 6F 6D           .U.google.com
d1 - MB, ME, SR, TNF=”NFC Forum well-known type”
02 Type length
18 Payload length
53 70 Type - “Sp” 
91 - MB, SR
01 Type length
05 Payload length
54 Type - “T”
02 Status byte - Length of IANA lang code
65 6E language code = “en”
68 69 “hi” text
51 - ME, SR
01 Type length
0b  Payload length
55 Type - “U”
01 identiﬁer code “http://www.”
67 6F 6F 67 6C 65 2E 63 6F 6D = “google.com” - text
The previous NDEF example had a single byte devoted to the length of the payload.  To 
support payloads longer than 255 bytes, a longer form of NDEF is used.  (You can tell 
which variant to expect by whether the SR bit is set in the ﬁrst byte of the NDEF record 
or not).  Below is the beginning of a longer NDEF record.
0000: C1 01 00 00 01 2F 54 02 65 6E 61 61 61 61 61 61....
c1 - MB, ME, TNF=”NFC Forum well-known type”
01 Type length
00 00 01 2f Payload length
54 Type - “T” 
02 - Status byte - Length of IANA lang code 
65 63 - language code = “en” 
61  61  61  61  61  61= “aaaaa...” - text
Charlie Miller: Exploring the NFC Attack Surface 
Example data capture
Data can be captured in various ways.  Perhaps the simplest way (when it works) is to 
use a Proxmark3 device [14], see Figure 4, below.  
Figure 4: Proxmark homemade antenna waiting for a Type 2 transaction from a 
SCL3711
Below, you can see a trace obtained from an SCL 3711 NFC card reader reading from a 
Mifare Ultralight tag.  I added brackets to indicates bytes used for checksum purposes. 
I also indicate the speciﬁcation used to interpret the bytes.
SENS_REQ
26
SENS_RES (NFCID1 size: double (7 bytes), Bit frame SDD)
TAG  
44  00
SDD_REQ CL1
93  20   
SDD_RES (CT? 04-e3-ef BCC)
TAG  
88  04  e3  ef  
Charlie Miller: Exploring the NFC Attack Surface 
SEL_REQ CL1
93   
70  88  04  e3  ef  80  
SEL_RES - Not complete, type 2
TAG  
04  
SDD_REQ CL2
95  20
SDD_RES (a2-ef-20-80 BCC) 
TAG  
a2  ef  20  80  
SEL_REQ CL2
95  70  a2  ef  20  80  ed  
SEL_RES - complete, type 2
TAG  
00  
READ - 08