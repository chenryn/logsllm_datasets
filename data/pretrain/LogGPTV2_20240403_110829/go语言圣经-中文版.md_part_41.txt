}
主函数和5.6节中的breadthFirst(广度优先)类似。像之前一样，一个worklist是一个记录了需要
处理的元素的队列，每一个元素都是一个需要抓取的URL列表，不过这一次我们用channel代
替slice来做这个队列。每一个对crawl的调用都会在他们自己的goroutine中进行并且会把他们
抓到的链接发送回worklist。
func main() {
worklist := make(chan []string)
// Start with the command-line arguments.
go func() { worklist  0; n-- {
list :=  0; countdown-- {
fmt.Println(countdown)
<-tick
}
launch()
}
现在我们让这个程序支持在倒计时中，用户按下return键时直接中断发射流程。首先，我们启
动一个goroutine，这个goroutine会尝试从标准输入中调入一个单独的byte并且，如果成功
了，会向名为abort的channel发送一个值。
gopl.io/ch8/countdown2
abort := make(chan struct{})
go func() {
os.Stdin.Read(make([]byte, 1)) // read a single byte
abort <- struct{}{}
}()
现在每一次计数循环的迭代都需要等待两个channel中的其中一个返回事件了：ticker channel
当一切正常时(就像NASA jorgon的"nominal"，译注：这梗估计我们是不懂了)或者异常时返回
的abort事件。我们无法做到从每一个channel中接收信息，如果我们这么做的话，如果第一个
channel中没有事件发过来那么程序就会立刻被阻塞，这样我们就无法收到第二个channel中
发过来的事件。这时候我们需要多路复用(multiplex)这些操作了，为了能够多路复用，我们使
用了select语句。
基于select的多路复用 322
gopl
select {
case <-ch1:
// ...
case x := <-ch2:
// ...use x...
case ch3 <- y:
// ...
default:
// ...
}
上面是select语句的一般形式。和switch语句稍微有点相似，也会有几个case和最后的default
选择支。每一个case代表一个通信操作(在某个channel上进行发送或者接收)并且会包含一些
语句组成的一个语句块。一个接收表达式可能只包含接收表达式自身(译注：不把接收到的值
赋值给变量什么的)，就像上面的第一个case，或者包含在一个简短的变量声明中，像第二个
case里一样；第二种形式让你能够引用接收到的值。
select会等待case中有能够执行的case时去执行。当条件满足时，select才会去通信并执行
case之后的语句；这时候其它通信是不会执行的。一个没有任何case的select语句写作
select{}，会永远地等待下去。
让我们回到我们的火箭发射程序。time.After函数会立即返回一个channel，并起一个新的
goroutine在经过特定的时间后向该channel发送一个独立的值。下面的select语句会会一直等
待到两个事件中的一个到达，无论是abort事件或者一个10秒经过的事件。如果10秒经过了还
没有abort事件进入，那么火箭就会发射。
func main() {
// ...create abort channel...
fmt.Println("Commencing countdown. Press return to abort.")
select {
case <-time.After(10 * time.Second):
// Do nothing.
case <-abort:
fmt.Println("Launch aborted!")
return
}
launch()
}
下面这个例子更微妙。ch这个channel的buffer大小是1，所以会交替的为空或为满，所以只有
一个case可以进行下去，无论i是奇数或者偶数，它都会打印0 2 4 6 8。
基于select的多路复用 323
gopl
ch := make(chan int, 1)
for i := 0; i < 10; i++ {
select {
case x := <-ch:
fmt.Println(x) // "0" "2" "4" "6" "8"
case ch <- i:
}
}
如果多个case同时就绪时，select会随机地选择一个执行，这样来保证每一个channel都有平