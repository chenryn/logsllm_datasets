g1 generates G1, g2 generates G2 and e : G1 × G2 → GT is an admissible pairing. The above pairing is
called an asymmetric or Type-III pairing. In Type-II pairings, there exists an eﬃcient isomorphism ψ from
G1 to G2 or such an isomorphism φ from G2 to G1 but not both. In symmetric or Type-I pairings, eﬃcient
isomorphisms ψ and φ both exist, and thus we can consider it as though G1 = G2. In this work, we support
any of these types of pairings. We will typically refer to Type III pairings in our text, since they are general
and typically the most eﬃcient choice for implementation, but our software tool in Section 5 can handle any
type.
product equation over variables Z,{Xi}m
Given pairing parameters (p, g1,g2, gT ,G1, G2,GT , e), we follow prior deﬁnitions [33] to deﬁne a pairing
i=1 as an equation of the form
Z · n(cid:89)
i=1,{Yi}n
e(Ai, Yi) · m(cid:89)
e(Xi, Bi) · m(cid:89)
n(cid:89)
e(Xi, Yj)γij = 1,
i=1
i=1
i=1
j=1
where Ai, Xi ∈ G1, Bi, Yi ∈ G2, Z ∈ GT , γij ∈ Zp.
G1, G2, GT (which we here treat as multiplicative groups) will be deﬁned as 1.
We sometimes rearrange the terms of a PPE to improve readability. The identity element for all groups
2.2 Notation
We let [1, n] be shorthand for the set {1, . . . , n}. We use v to denote a vector and vi to denote the i-th
element. For a vector v of length n and a subset U ⊆ [1, n], we denote vU as the set of elements vi for
i = 1, . . . , n where i ∈ U . Similarly vU denotes the subset of elements vi for i = 1, . . . , n where i (cid:54)∈ U .
Let us denote the set of pairing group identiﬁers {1, 2, T} by I. Let x, y be polynomials over variables in
(u1, . . . , un), then by x ≡ y, we mean that x and y are equivalent polynomials.
3 Deﬁning PPE Testing Concepts
Let us now formalize our focus problem from the introduction.
Deﬁnition 3.1 (PPE Problem Instance). A pairing product equation (PPE) problem instance Π consists
of
• pairing parameters G =(p,g1,g2,gT ,G1, G2,GT ,e),
• positive integers n, m,
• multivariate rational polynomials f = (f1, . . . , fm) over n variables in Zp denoted u = (u1, . . . , un),
• a sequence of pairing group identiﬁers in I = {1, 2, T} denoted α = (α1, . . . , αm),
• a set Fixed ⊆ [1, n] and
• a set Trusted ⊆ [1, m].
with the restriction that if i ∈ Trusted, then fi is a multivariate rational polynomial over the set of variables
in uFixed.
1In this work, we restrict ourselves to prime-order pairings. For discussion on other settings, refer to Section 5.6
5
The pairing parameters above can also indicate the type of pairing group (e.g., I, II or III). We remark
that one can intuitively view the elements indicated by the Trusted set as a set of trusted (e.g., public)
parameters and the set of elements not in Trusted as some elements one wants to verify with respect to the
Trusted set (e.g., an IBE/ABE private key). The polynomials representing these elements are comprised
of a set of variables; those variables in Fixed can be thought of as being chosen at public parameter setup
time, while those variables not in Fixed correspond to values chosen later (e.g., during private IBE/ABE key
generation). We sometimes denote the set of polynomials not in Trusted by untrusted set, and the set of
variables not in Fixed by unﬁxed variables.
Deﬁnition 3.2 (PPE Challenge). Let Π = (G, n, m, f , α, Fixed, Trusted) be a PPE problem instance as in
Deﬁnition 3.1. Let F = (F1, . . . , Fm) be comprised of pairing group elements, where each Fi is in group Gαi.
We say that F is a challenge to PPE instance Π. We deﬁne classiﬁcations for this challenge as follows:
p
p such that for all i ∈ Trusted, Fi = gfi(u)
αi
.
.
αi
such that for all i, Fi = gfi(u)
u = (u1, . . . , un) ∈ Zn
• F = (F1, . . . , Fm) is a YES challenge if there exists an assignment to variables u = (u1, . . . , un) ∈ Zn
• F = (F1, . . . , Fm) is a NO challenge if it is not a YES challenge and there exists an assignment to
• F = (F1, . . . , Fm) is an INVALID challenge if it is neither a YES nor NO challenge.
We view a YES challenge as being a valid trusted/untrusted (e.g., public key/private key) pair, i.e., one
that could have come from the distribution dictated by the instance parameters. We view a NO challenge
as having trusted information according to the instance distribution, but where the untrusted elements to
be veriﬁed do not fall into their proper distribution space. In an INVALID challenge, the supposedly trusted
elements are not drawn from the proper distribution (e.g., the public parameters are not correct), and
therefore, we make no attempt to verify with this challenge.
Deﬁnition 3.3 (PPE Testable and Testing Set). A PPE problem instance Π is said to be PPE testable if
and only if there exists a set of pairing product equations T such that each equation in T is simultaneously
satisﬁed for all YES challenges and for all NO challenges, at least one equation in T is not satisﬁed. (There
are no conditions on the behavior for INVALID challenges.) For any PPE problem instance Π, we call such
a set of pairing product equations T a testing set. A testing set for a PPE problem instance need not be
unique.
Our subsequent goal will be to search for a testing set for a given PPE problem instance. In Section 1, we
discussed how some natural constructions of cryptosystems exhibit pubic parameter and private key pairs
that are PPE testable problem instances, whereas other natural examples (e.g., encryption systems based
on dual system techniques) are provably not PPE testable.
4 Searching for a PPE Testing Set
Recall from the introduction our high-level algorithm to search for a testing set Q of a PPE problem. The
input is a PPE problem Π and there are two possible types of outputs. Either it will output that Π is
PPE testable and, to conﬁrm this, it will produce one testing set Q or it will output the special response
unknown. In the latter case, no determination about whether Π is PPE testable or not can be concluded.
This algorithm has one-sided correctness, where the guarantee for this algorithm is that if it outputs that Π
has testing set Q, this will be true.
The algorithm proceeds in a sequence of steps, where in each step it (attempts to) “reduce the complexity”
of its input, by adding a polynomial fi to the set Trusted and possibly adding a variable ui to the set Fixed.
We establish rules for when an item can be moved into one of these sets, how this movement contributes to
the search for Q and argue that these rules preserve the PPE testability of the input problem. At the end,
if we can obtain Trusted = [1, m], then we will have found a testing set. At any time before the end, if none
of the movement rules can be applied, the algorithm aborts and outputs unknown.
6
4.1 Review on Computing Completion Lists for a List of Polynomials
Our rules will make use of completion lists in the pairing setting as described by Barthe et al. [13]. Consider
any list f = [f1, . . . , fk] of polynomials along with a sequence of identiﬁers α1,··· , αk, where αi ∈ I =
{1, 2, T} for all i ≤ k. For any j ∈ I, let ti = {fj : αj = i}. We now recall the notion of completion
CL(f ) = {s1, s2, sT} of the list f of polynomials with respect to a group setting [13]. Intuitively, CL(f ) is
the list of all polynomials that can be computed by an adversary by applying pairing and isomorphism
operations, when he has access to the elements in group Gi corresponding to the polynomials in ti for i ∈ I
.
Input: Pairing info G, Lengths |t1|,|t2|,|tT|
Output: Reception lists r1, r2, rT
Reception List
1. for each i ∈ {1, 2, T}, initialize ri with |ti| number of fresh variables, i.e., let ri = {wi,1,··· , wi,|ti|}
2. If an isomorphism ψ : G1 → G2 exists, then r2 := r2 ∪ r1
3. If an isomorphism φ : G2 → G1 exists, then r1 := r1 ∪ r2
4. rT := rT ∪ {h1h2 : h1 ∈ r1, h2 ∈ r2}
Figure 1: Algorithm to ﬁnd reception list of a list of polynomials
We now describe an algorithm to compute the completion CL(f ), which is taken from [13] and handles
pairing groups. The algorithm proceeds in two steps. In the ﬁrst step, it computes the reception lists {ri}i∈I.
The elements of the reception lists are monomials over variables wi,j for i ∈ I, j ∈ |ti| and are computed as
shown in Figure 1.
The monomials characterize which products of elements in t the adversary can compute by applying
pairing operations. The result of the ﬁrst step is independent of the elements in the lists t and only depends
on the lengths of the lists. In the second step, it computes the actual polynomials from the reception lists as
si = [m1(t), . . . , m|ri|(t)] for [m1, . . . , m|ri|] = ri,
where every mk is a monomial over the variables wi,j and mk(t) denotes the result of evaluating the monomial
mk by substituting wi,j with ti[j] for i ∈ I and j ∈ |ti|.
4.2 Rules for “Reducing” the Complexity of a PPE Problem Instance
We now describe two rules for reducing the complexity of a PPE instance, whereby we mean reducing the
number of items left to verify, i.e., corresponding to the elements represented by polynomials not in the set
Trusted.
4.2.1 Rule 1: Move element to Trusted with all Fixed variables
Rule 1 is described in Figure 2. We note that similar logic to this was previously employed in an automated
tool focused on synthesizing optimal structure-preserving signature schemes in Type II pairing groups by
Barthe, Fagerholm, Fiore, Scedrov, Schmidt and Tibouchi [14]. We generalize for our related, but diﬀerent
goal. Given a PPE problem Π = (G,n, m, f , u, α,Fixed, Trusted) and an index k ∈ [1, m], Rule 1 can possibly
be applied if k /∈ Trusted and the polynomial fk ∈ f consists only of variables ui ∈ u where i ∈ Fixed (these
conditions are necessary, but not suﬃcient).
Let (C, Π(cid:48)) = Rule1(Π, k) for an input on which the rule is successfully applied. Let the set of all possible
testing sets of PPE problems Π and Π(cid:48) be denoted QΠ and QΠ(cid:48) respectively. We now prove that a testing
set for Π can be derived from any testing set in QΠ(cid:48); we call this the correctness of Rule 1. Informally, Rule
1 will not ﬂip a PPE problem from non-testable to testable.
7
Description of Rule 1
Input: A PPE problem Π = (G, n, m, f , u, α, Fixed, Trusted) and an integer k ∈ [1, m].
Output: A PPE C and a PPE problem Π(cid:48), or the symbol ⊥ (meaning could not apply rule).
Steps of Rule1(Π, k):
1. If k ∈ Trusted or fk ∈ f has variables not in uFixed, then abort and output ⊥.
2. Compute completion lists {s1, s2, sT} = CL(f Trusted). For any i ∈ I and j ≤ |si|, let Si[j] = gsi[j]
.
Below we let Fk be a variable for a pairing group element in Gαk , which will be assigned a value later
from a challenge for a PPE problem, and will make part of the PPE C.
j=1 aj · sT [j],
3. If there exists a constant vector a = (a1,··· , a|sT |) with entries in Zp such that fk ≡(cid:80)|sT |
αi
then output the PPE
e(Fk, g2) =(cid:81)|sT |
e(g1, Fk) =(cid:81)|sT |
Fk =(cid:81)|sT |
j=1 ST [j]aj
j=1 ST [j]aj
j=1 ST [j]aj
C :=
if αk = 1
if αk = 2
if αk = T
and PPE problem Π(cid:48) = (G, n, m, f , u, α, Fixed, Trusted ∪ {k}), else output ⊥. Note that computing
such a coeﬃcient vector a reduces to checking if the polynomial 0 belongs to the span of polynomials
sT ∪ {fk}.
Figure 2: Procedure for moving certain elements with all Fixed variables to Trusted.
Lemma 4.1 (Correctness of Rule 1). Let Π = (G, n, m,f , u, α, Fixed,Trusted) be a PPE problem instance as
in Deﬁnition 3.1 and let k ∈ [1, m]. Suppose ⊥(cid:54)= (C, Π(cid:48)) = Rule1(Π, k). Then:
1. Π(cid:48) is a PPE problem instance as in Deﬁnition 3.1 and
2. for every testing set T ∈ QΠ(cid:48), it holds that (T ∪ {C}) ∈ QΠ.
Proof. We have that Π =(G,n, m,f , u,α,Fixed, Trusted). Since Rule1(Π,k)= (C, Π(cid:48))(cid:54)=⊥, we know that the
rule was successfully applied, where Π(cid:48) = (G, n, m,f , u,α, Fixed,Trusted ∪ {k}).
Condition 1: we observe that Π(cid:48) will also satisfy Deﬁnition 3.1, where the only non-trivial observation is that
we must show that if i ∈ Trusted∪{k}, then fi is a multivariate polynomial over the set of variables in uFixed
is maintained. This follows from the fact that a necessary condition for Rule1 to move k to Trusted is that
fk only has variables in uFixed.
Condition 2: let T be any testing set for Π(cid:48). By Deﬁnition 3.3, T is a set of pairing product equations
such that each equation in {T1, . . . , Tw} = T is simultaneously satisﬁed for all YES challenges, and at least
one equation in T is not satisﬁed for all NO challenges. Recall there are no conditions on the behavior for
INVALID challenges.
We now argue by contradiction that if T ∪ {C} is not a testing set for Π, then T cannot be a testing set
for Π(cid:48). Since T ∪ {C} is not a testing set for Π, then either:
• Case 1: There exists a YES challenge F for Π such that at least one equation in T ∪{C} is not satisﬁed,
or
• Case 2: There exists a NO challenge F for Π such that all equations in T ∪ {C} are simultaneously
satisﬁed.
We now analyze each of these cases.
In Case 1, we know that at least one equation in T ∪ {C} is not satisﬁed by challenge F. We take this
in two subcases. First, suppose that T contains an unsatisﬁed equation. This means that F is also a YES
challenge for Π(cid:48) (it can use the same settings for the variables), but for which one equation of T is not
satisﬁed. This contradicts the starting assumption that T was a testing set for Π(cid:48). Second, suppose that
all equations of T are satisﬁed, but that the equation C is not. By deﬁnition of being a YES challenge, we
8
αi
αk
for fk ≡(cid:80)|sT |
αi
, thus this equation being false contradicts the fact the F was a YES challenge.
know there exists an assignment to the variables u such that Fi = gfi(u)
for all i. Equation C tests that Fk
is equal to gfi(u)
In Case 2, since F is a NO challenge for Π where all equations in T ∪ {C} are simultaneously satisﬁed,
then F is also a NO challenge for Π(cid:48) where all equations in T are simultaneously satisﬁed. We argue this as
follows. By Deﬁnition 3.2 of a NO challenge for Π, there exists an assignment to u = (u1, . . . , un) ∈ Zn
p such
that for all i ∈ Trusted, Fi = gfk(u)
. To convert this to a NO challenge for Π(cid:48), we also need to show that
Fk = gfk(u)
for this same assignment u. This follows from the fact that PPE C is satisﬁed by this challenge
and that C explicitly tests that Fk is computed this way, possibly with respect to an equivalent polynomial
j=1 aj · sT [j]. Now since F is NO challenge for Π(cid:48), it remains to see how it performs with respect
to the set T . However, since all equations in T ∪ {C} are satisﬁed by this challenge F, then all equations in
T are as well. This contradicts the original assumption that T was a testing set for Π(cid:48).
αk
4.2.2 Rule 2: Move element to Trusted by ﬁxing an un-Fixed variable of form v · ud
Rule 2 is described in Figure 3. Given a PPE problem Π = (G, n, m, f , u, α, Fixed, Trusted) and indices