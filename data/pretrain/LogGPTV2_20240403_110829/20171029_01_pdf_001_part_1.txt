Major Features: Postgres 10
BRUCE MOMJIAN
POSTGRESQL is an open-source, full-featured relational database.
This presentation gives an overview of the Postgres 10 release.
CreativeCommons AttributionLicense http://momjian.us/presentations
Lastupdated:September,2017
1/20
Postgres 10 Feature Outline
1. Logical replication
2. Partitioning syntax
3. Crash-safe, faster, and replicated hash indexes
4. ICU library
5. Quorum commit
6. Progress on parallelism
7. Multi-column statistics
8. pg_stat_activity improvements
9. SCRAM-SHA-256 authentication
10. FDW aggregate pushdown
11. More
Fullitemlistathttps://www.postgresql.org/docs/devel/static/
release-10.html
2/20
1. Logical Replication
Cluster1,port5432,database’test’ Cluster2,port5433,database’test’
$ psql -p 5432 -c ‘‘ALTER SYSTEM
SET wal_level = ’logical’;’’ test
$ pg_ctl -p 5432 restart
$ psql -p 5432 test $ psql -p 5433 test
CREATE TABLE test (x INT PRIMARY KEY); CREATE TABLE test (x INT PRIMARY KEY);
INSERT INTO test VALUES (1);
CREATE PUBLICATION mypub FOR TABLE test;
CREATE SUBSCRIPTION mysub CONNECTION
’dbname=test port=5432’ PUBLICATION mypub;
3/20
Logical Replication in Action
Cluster1 Cluster2
SELECT * FROM test;
1
INSERT INTO test VALUES (2);
SELECT * FROM test;
1
2
4/20
Benefits of Logical Replication
Logical replication allows:
◮ table-level granularity
◮ replication from multiple clusters to a single cluster
◮ replication of a single table to multiple clusters
◮ replication between major Postgres versions
◮ creation of local objects on subscribers, e.g. tables indexes
5/20
2. Partitioning Syntax
CREATE TABLE numbers (x INTEGER) PARTITION BY RANGE (x);
CREATE TABLE negatives PARTITION OF numbers FOR VALUES FROM (UNBOUNDED) TO (0);
CREATE TABLE positives PARTITION OF numbers FOR VALUES FROM (0) TO (UNBOUNDED);
6/20
Partition Table Structure
\d+ numbers
Table "public.numbers"
Column | Type | Collation | Nullable | Default | …
--------+---------+-----------+----------+---------+…
x | integer | | not null | |…
Partition key: RANGE (x)
Partitions: negatives FOR VALUES FROM (UNBOUNDED) TO (0),
positives FOR VALUES FROM (0) TO (UNBOUNDED)
\d negatives
Table "public.negatives"
Column | Type | Collation | Nullable | Default
--------+---------+-----------+----------+---------
x | integer | | not null |
Partition of: numbers FOR VALUES FROM (UNBOUNDED) TO (0)
\d positives
Table "public.positives"
Column | Type | Collation | Nullable | Default
--------+---------+-----------+----------+---------
x | integer | | not null |
Partition of: numbers FOR VALUES FROM (0) TO (UNBOUNDED)
7/20
Tuple Routing
INSERT INTO numbers VALUES (-4), (-1), (7), (12);
SELECT * FROM numbers;
x
----
-4
-1
7
12
SELECT * FROM negatives;
x
----
-4
-1
SELECT * FROM positives;
x
----
7
12
8/20
Partitioning Benefits and Limitations
Partitioning does:
◮ Create proper child constraints
◮ Route parent INSERTs into child tables
Partitioning does not yet:
◮ Create child tables for values not already covered (it errors
instead)
◮ Hash partitioning