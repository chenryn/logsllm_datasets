需要包含头文件的另一种情况是，使用具有文件作用域、内部链接和
const 限定符的变量或数组。const 防止值被意外修改，static 意味着每个包含
该头文件的文件都获得一份副本。因此，不需要在一个文件中进行定义式声
明，在其他文件中进行引用式声明。
#include和#define指令是最常用的两个C预处理器特性。接下来，我们介
绍一些其他指令。
1224
16.6 其他指令
程序员可能要为不同的工作环境准备C程序和C库包。不同的环境可能
使用不同的代码类型。预处理器提供一些指令，程序员通过修改#define的值
即可生成可移植的代码。#undef指令取消之前的#define定义。#if、#ifdef、
#ifndef、#else、#elif和#endif指令用于指定什么情况下编写哪些代码。#line
指令用于重置行和文件信息，#error指令用于给出错误消息，#pragma指令用
于向编译器发出指令。
16.6.1 #undef指令
#undef指令用于“取消”已定义的#define指令。也就是说，假设有如下定
义：
#define LIMIT 400
然后，下面的指令:
#undef LIMIT
将移除上面的定义。现在就可以把LIMIT重新定义为一个新值。即使原
来没有定义LIMIT，取消LIMIT的定义仍然有效。如果想使用一个名称，又
不确定之前是否已经用过，为安全起见，可以用#undef 指令取消该名字的定
义。
16.6.2 从C预处理器角度看已定义
处理器在识别标识符时，遵循与C相同的规则：标识符可以由大写字
母、小写字母、数字和下划线字符组成，且首字符不能是数字。当预处理器
在预处理器指令中发现一个标识符时，它会把该标识符当作已定义的或未定
义的。这里的已定义表示由预处理器定义。如果标识符是同一个文件中由前
面的#define指令创建的宏名，而且没有用#undef 指令关闭，那么该标识符是
已定义的。如果标识符不是宏，假设是一个文件作用域的C变量，那么该标
1225
识符对预处理器而言就是未定义的。
已定义宏可以是对象宏，包括空宏或类函数宏：
#define LIMIT 1000     // LIMIT是已定义的
#define GOOD        // GOOD 是已定义的
#define A(X) ((-(X))*(X)) // A 是已定义的
int q;           // q 不是宏，因此是未定义的
#undef GOOD        // GOOD 取消定义，是未定义的
注意，#define宏的作用域从它在文件中的声明处开始，直到用#undef指
令取消宏为止，或延伸至文件尾（以二者中先满足的条件作为宏作用域的结
束）。另外还要注意，如果宏通过头文件引入，那么#define在文件中的位置
取决于#include指令的位置。
稍后将介绍几个预定义宏，如__DATE__和__FILE__。这些宏一定是已
定义的，而且不能取消定义。
16.6.3 条件编译
可以使用其他指令创建条件编译（conditinal compilation）。也就是说，
可以使用这些指令告诉编译器根据编译时的条件执行或忽略信息（或代码）
块。
1.#ifdef、#else和#endif指令
我们用一个简短的示例来演示条件编译的情况。考虑下面的代码：
#ifdef MAVIS
#include "horse.h"// 如果已经用#define定义了 MAVIS，则执行下面的指
令
1226
#define STABLES 5
#else
#include "cow.h"    //如果没有用#define定义 MAVIS，则执行下面的
指令
#define STABLES 15
#endif
这里使用的较新的编译器和 ANSI 标准支持的缩进格式。如果使用旧的
编译器，必须左对齐所有的指令或至少左对齐#号，如下所示：
#ifdef MAVIS
#include "horse.h"     // 如果已经用#define定义了 MAVIS，则执行
下面的指令
#define STABLES 5
#else
#include "cow.h"      //如果没有用#define定义 MAVIS，则执行下
面的指令
#define STABLES 15
#endif
#ifdef指令说明，如果预处理器已定义了后面的标识符（MAVIS），则
执行#else或#endif指令之前的所有指令并编译所有C代码（先出现哪个指令
就执行到哪里）。如果预处理器未定义MAVIS，且有 
#else指令，则执行
#else和#endif指令之间的所有代码。
#ifdef #else很像C的if else。两者的主要区别是，预处理器不识别用于标
1227
记块的花括号（{}），因此它使用#else（如果需要）和#endif（必须存在）
来标记指令块。这些指令结构可以嵌套。也可以用这些指令标记C语句块，
如程序清单16.9所示。
程序清单16.9 ifdef.c程序
/* ifdef.c -- 使用条件编译 */
#include 
#define JUST_CHECKING
#define LIMIT 4
int main(void)
{
int i;
int total = 0;
for (i = 1; i 
#include "names.h"
#include "names.h"  // 不小心第2次包含头文件
int main()
{
names winner = { "Less", "Ismoor" };
printf("The winner is %s %s.\n", winner.first,
winner.last);
return 0;
}
3.#if和#elif指令
#if指令很像C语言中的if。#if后面跟整型常量表达式，如果表达式为非
零，则表达式为真。可以在指令中使用C的关系运算符和逻辑运算符：
#if SYS == 1
#include "ibm.h"
#endif
可以按照if 
else的形式使用#elif（早期的实现不支持#elif）。例如，可
以这样写：
#if SYS == 1
1233
#include "ibmpc.h"
#elif SYS == 2
#include "vax.h"
#elif SYS == 3
#include "mac.h"
#else
#include "general.h"
#endif
较新的编译器提供另一种方法测试名称是否已定义，即用#if 
defined
(VAX)代替#ifdef VAX。
这里，defined是一个预处理运算符，如果它的参数是用#defined定义
过，则返回1；否则返回0。这种新方法的优点是，它可以和#elif一起使用。
下面用这种形式重写前面的示例：
#if defined (IBMPC)
#include "ibmpc.h"
#elif defined (VAX)
#include "vax.h"
#elif defined (MAC)
#include "mac.h"
#else
1234
#include "general.h"
#endif
如果在VAX机上运行这几行代码，那么应该在文件前面用下面的代码定
义VAX：
#define VAX
条件编译还有一个用途是让程序更容易移植。改变文件开头部分的几个
关键的定义，即可根据不同的系统设置不同的值和包含不同的文件。
16.6.4 预定义宏
C标准规定了一些预定义宏，如表16.1所列。
表16.1 预 定 义 宏
C99 标准提供一个名为_ _func_ _的预定义标识符，它展开为一个代表
函数名的字符串（该函数包含该标识符）。那么，_ _func_ _必须具有函数
作用域，而从本质上看宏具有文件作用域。因此，_ _func_ _是C语言的预定
义标识符，而不是预定义宏。
程序清单16.12 中使用了一些预定义宏和预定义标识符。注意，其中一
些是C99 
新增的，所以不支持C99的编译器可能无法识别它们。如果使用
GCC，必须设置-std=c99或-std=c11。
1235