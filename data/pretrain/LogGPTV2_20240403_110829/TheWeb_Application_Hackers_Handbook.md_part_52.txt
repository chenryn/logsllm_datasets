http://mdsec.net/bank/27/
The following examples contain the identical vulnerability, but the error
feedback is much more sparse. See how diffi cult it can be to exploit SOAP
injection without helpful error messages?
http://mdsec.net/bank/18/
http://mdsec.net/bank/6/
cc1100..iinndddd 338888 88//1199//22001111 1122::1100::4499 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 389
Chapter 10 n Attacking Back-End Components 389
Finding and Exploiting SOAP Injection
SOAP injection can be diffi cult to detect, because supplying XML metacharacters
in a noncrafted way breaks the format of the SOAP message, often resulting in
an uninformative error message. Nevertheless, the following steps can be used
to detect SOAP injection vulnerabilities with a degree of reliability.
HACK STEPS
1. Submit a rogue XML closing tag such as  in each parameter in turn.
If no error occurs, your input is probably not being inserted into a SOAP
message, or it is being sanitized in some way.
2. If an error was received, submit instead a valid opening and closing tag
pair, such as . If this causes the error to disappear, the
application may be vulnerable.
3. In some situations, data that is inserted into an XML-formatted mes-
sage is subsequently read back from its XML form and returned to the
user. If the item you are modifying is being returned in the application’s
responses, see whether any XML content you submit is returned in its
identical form or has been normalized in some way. Submit the following
two values in turn:
test
test
If you find that either item is returned as the other, or simply as test,
you can be confident that your input is being inserted into an XML-based
message.
4. If the HTTP request contains several parameters that may be being placed
into a SOAP message, try inserting the opening comment character () into
another parameter. Then switch these around (because you have no way
of knowing in which order the parameters appear). Doing so can have the
effect of commenting out a portion of the server’s SOAP message. This
may cause a change in the application’s logic or result in a different error
condition that may divulge information.
If SOAP injection is diffi cult to detect, it can be even harder to exploit. In most
situations, you need to know the structure of the XML that surrounds your data
to supply crafted input that modifi es the message without invalidating it. In all
the preceding tests, look for any error messages that reveal any details about
the SOAP message being processed. If you are lucky, a verbose message will
disclose the entire message, enabling you to construct crafted values to exploit
the vulnerability. If you are unlucky, you may be restricted to pure guesswork,
which is very unlikely to be successful.
cc1100..iinndddd 338899 88//1199//22001111 1122::1100::4499 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 390
390 Chapter 10 n Attacking Back-End Components
Preventing SOAP Injection
You can prevent SOAP injection by employing boundary validation fi lters at any
point where user-supplied data is inserted into a SOAP message (see Chapter
2). This should be performed both on data that has been immediately received
from the user in the current request and on any data that has been persisted from
earlier requests or generated from other processing that takes user data as input.
To prevent the attacks described, the application should HTML-encode any
XML metacharacters appearing in user input. HTML encoding involves replacing
literal characters with their corresponding HTML entities. This ensures that the
XML interpreter treats them as part of the data value of the relevant element and
not as part of the structure of the message itself. Here are the HTML encodings
of some common problematic characters:
n  — &gt;
n / — &#47;
Injecting into Back-end HTTP Requests
The preceding section described how some applications incorporate user-supplied
data into back-end SOAP requests to services that are not directly accessible
to the user. More generally, applications may embed user input in any kind of
back-end HTTP request, including those that transmit parameters as regular
name/value pairs. This kind of behavior is often vulnerable to attack, since the
application often effectively proxies the URL or parameters supplied by the user.
Attacks against this functionality can be divided into the following categories:
n Server-side HTTP redirection attacks allow an attacker to specify an arbitrary
resource or URL that is then requested by the front-end application server.
n HTTP parameter injection (HPI) attacks allow an attacker to inject arbi-
trary parameters into a back-end HTTP request made by the application
server. If an attacker injects a parameter that already exists in the back-end
request, HTTP parameter pollution (HPP) attacks can be used to override
the original parameter value specifi ed by the server.
Server-side HTTP Redirection
Server-side redirection vulnerabilities arise when an application takes user-
controllable input and incorporates it into a URL that it retrieves using a back-
end HTTP request. The user-supplied input may comprise the entire URL that
is retrieved, or the application may perform some processing on it, such as
adding a standard suffi x.
cc1100..iinndddd 339900 88//1199//22001111 1122::1100::4499 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 391
Chapter 10 n Attacking Back-End Components 391
The back-end HTTP request may be to a domain on the public Internet,
or it may be to an internal server not directly accessible by the user. The
content requested may be core to the application’s functionality, such as an
interface to a payment gateway. Or it may be more peripheral, such as static
content drawn from a third party. This technique is often used to knit several
disparate internal and external application components into a single front-
application that handles access control and session management on behalf
of these other systems. If an attacker can control the IP address or hostname
used in the back-end HTTP request, he can cause the application server to
connect to an arbitrary resource and sometimes retrieve the contents of the
back-end response.
Consider the following example of a front-end request, in which the loc
parameter is used to specify which version of a CSS fi le the client wants to use:
POST /account/home HTTP/1.1
Content-Type: application/x-www-form-urlencoded
Host: wahh-blogs.net
Content-Length: 65
view=default&loc=online.wahh-blogs.net/css/wahh.css
If no validation of the URL is specifi ed in the loc parameter, an attacker can
specify an arbitrary hostname in place of online.wahh-blogs.net. The applica-
tion retrieves the specifi ed resource, allowing the attacker to use the application
as a proxy to potentially sensitive back-end services. In the following example,
the attacker causes the application to connect to a back-end SSH service:
POST /account/home HTTP/1.1
Content-Type: application/x-www-form-urlencoded
Host: blogs.mdsec.net
Content-Length: 65
view=default&loc=192.168.0.1:22
The application’s response includes the banner from the requested SSH service:
HTTP/1.1 200 OK
Connection: close
SSH-2.0-OpenSSH_4.2Protocol mismatch.
An attacker can exploit server-side HTTP redirection bugs to effectively use the
vulnerable application as an open HTTP proxy to perform various further attacks:
n An attacker may be able to use the proxy to attack third-party systems on
the Internet. The malicious traffi c appears to the target to originate from
the server on which the vulnerable application is running.
n An attacker may be able to use the proxy to connect to arbitrary hosts on
the organization’s internal network, thereby reaching targets that cannot
be accessed directly from the Internet.
cc1100..iinndddd 339911 88//1199//22001111 1122::1100::4499 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 392
392 Chapter 10 n Attacking Back-End Components
n An attacker may be able to use the proxy to connect back to other services
running on the application server itself, circumventing fi rewall restrictions
and potentially exploiting trust relationships to bypass authentication.
n Finally, the proxy functionality could be used to deliver attacks such as
cross-site scripting by causing the application to include attacker-controlled
content within its responses (see Chapter 12 for more details).
HACK STEPS
1. Identify any request parameters that appear to contain hostnames, IP
addresses, or full URLs.
2. For each parameter, modify its value to specify an alternative resource,
similar to the one being requested, and see if that resource appears in the
server’s response.
3. Try specifying a URL targeting a server on the Internet that you control,
and monitor that server for incoming connections from the application
you are testing.
4. If no incoming connection is received, monitor the time taken for the
application to respond. If there is a delay, the application’s back-end
requests may be timing out due to network restrictions on outbound
connections.
5. If you are successful in using the functionality to connect to arbitrary
URLs, try to perform the following attacks:
a. Determine whether the port number can be specified. For example,
you might supply http://mdattacker.net:22.
b. If successful, attempt to port-scan the internal network by using a tool
such as Burp Intruder to connect to a range of IP addresses and ports
in sequence (see Chapter 14).
c. Attempt to connect to other services on the loopback address of the
application server.
d. Attempt to load a web page that you control into the application’s
response to deliver a cross-site scripting attack.
NOTE Some server-side redirection APIs, such as Server.Transfer()
and Server.Execute() in ASP.NET, allow redirection only to relative URLs
on the same host. Functionality that passes user-supplied input to one of
these methods can still potentially be exploited to exploit trust relation-
ships and access resources on the server that are protected by platform-level
authentication.
cc1100..iinndddd 339922 88//1199//22001111 1122::1100::4499 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 393
Chapter 10 n Attacking Back-End Components 393
TRY IT!
http://mdsec.net/updates/97/
http://mdsec.net/updates/99/
HTTP Parameter Injection
HTTP parameter injection (HPI) arises when user-supplied parameters are
used as parameters within a back-end HTTP request. Consider the following
variation on the bank transfer functionality that was previously vulnerable to
SOAP injection:
POST /bank/48/Default.aspx HTTP/1.0
Host: mdsec.net
Content-Length: 65
FromAccount=18281008&Amount=1430&ToAccount=08447656&Submit=Submit
This front-end request, sent from the user’s browser, causes the application
to make a further back-end HTTP request to another web server within the
bank’s infrastructure. In this back-end request, the application copies some of
the parameter values from the front-end request:
POST /doTransfer.asp HTTP/1.0
Host: mdsec-mgr.int.mdsec.net
Content-Length: 44
fromacc=18281008&amount=1430&toacc=08447656
This request causes the back-end server to check whether cleared funds are
available to perform the transfer and, if so, to carry it out. However, the front-
end server can optionally specify that cleared funds are available, and therefore
bypass the check, by supplying the following parameter:
clearedfunds=true
If the attacker is aware of this behavior, he can attempt to perform an HPI
attack to inject the clearedfunds parameter into the back-end request. To do
this, he adds the required parameter onto the end of an existing parameter’s
value and URL-encodes the characters & and =, which are used to separate
names and values:
POST /bank/48/Default.aspx HTTP/1.0
Host: mdsec.net
Content-Length: 96
FromAccount=18281008&Amount=1430&ToAccount=08447656%26clearedfunds%3dtru
e&Submit=Submit
cc1100..iinndddd 339933 88//1199//22001111 1122::1100::4499 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 394
394 Chapter 10 n Attacking Back-End Components
When the application server processes this request, it URL-decodes the param-
eter values in the normal way. So the value of the ToAccount parameter that the
front-end application receives is as follows:
08447656&clearedfunds=true
If the front-end application does not validate this value and passes it through
unsanitized into the back-end request, the following back-end request is made,
which successfully bypasses the check for cleared funds:
POST /doTransfer.asp HTTP/1.0
Host: mdsec-mgr.int.mdsec.net
Content-Length: 62
fromacc=18281008&amount=1430&toacc=08447656&clearedfunds=true
TRY IT!
http://mdsec.net/bank/48/
NOTE Unlike with SOAP injection, injecting arbitrary unexpected parameters
into a back-end request is unlikely to cause any kind of error. Therefore, a suc-
cessful attack normally requires exact knowledge of the back-end parameters
that are being used. Although this may be hard to determine in a blackbox
context, it may be straightforward if the application uses any third-party com-
ponents whose code can be obtained and researched.
HTTP Parameter Pollution
HPP is an attack technique that arises in various contexts (see Chapters 12 and
13 for other examples) and that often applies in the context of HPI attacks.
The HTTP specifi cations provide no guidelines as to how web servers should
behave when a request contains multiple parameters with the same name. In
practice, different web servers behave in different ways. Here are some com-
mon behaviors:
n Use the fi rst instance of the parameter.
n Use the last instance of the parameter.
n Concatenate the parameter values, maybe adding a separator between them.
n Construct an array containing all the supplied values.
In the preceding HPI example, the attacker could add a new parameter to
a back-end request. In fact, it is more likely in practice that the request into
which the attacker can inject already contains a parameter with the name he
cc1100..iinndddd 339944 88//1199//22001111 1122::1100::4499 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 395
Chapter 10 n Attacking Back-End Components 395
is targeting. In this situation, the attacker can use the HPI condition to inject a
second instance of the same parameter. The resulting application behavior then
depends on how the back-end HTTP server handles the duplicated parameter.
The attacker may be able to use the HPP technique to “override” the value of
the original parameter with the value of his injected parameter.
For example, if the original back-end request is as follows:
POST /doTransfer.asp HTTP/1.0
Host: mdsec-mgr.int.mdsec.net
Content-Length: 62
fromacc=18281008&amount=1430&clearedfunds=false&toacc=08447656
and the back-end server uses the fi rst instance of any duplicated parameter, an
attacker can place the attack into the FromAccount parameter in the front-end
request:
POST /bank/52/Default.aspx HTTP/1.0
Host: mdsec.net
Content-Length: 96
FromAccount=18281008%26clearedfunds%3dtrue&Amount=1430&ToAccount=0844765
6&Submit=Submit
Conversely, in this example, if the back-end server uses the last instance of
any duplicated parameter, the attacker can place the attack into the ToAccount
parameter in the front-end request.
TRY IT!
http://mdsec.net/bank/52/
http://mdsec.net/bank/57/
The results of HPP attacks are heavily dependent on how the target applica-
tion server handles multiple occurrences of the same parameter, and the precise
insertion point within the back-end request. This has signifi cant consequences
if two technologies need to process the same HTTP request. A web application
fi rewall or reverse proxy may process a request and pass it to the web application,
which may proceed to discard variables, or even build strings out of previously
disparate portions of the request!
A good paper covering the different behaviors of the common application
servers can be found here:
www.owasp.org/images/b/ba/AppsecEU09_CarettoniDiPaola_v0.8.pdf
cc1100..iinndddd 339955 88//1199//22001111 1122::1100::4499 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 396
396 Chapter 10 n Attacking Back-End Components
Attacks Against URL Translation
Many servers rewrite requested URLs on arrival to map these onto the relevant
back-end functions within the application. In addition to conventional URL
rewriting, this behavior can arise in the context of REST-style parameters, cus-
tom navigation wrappers, and other methods of URL translation. The kind of
processing that this behavior involves can be vulnerable to HPI and HPP attacks.
For simplicity and to aid navigation, some applications place parameter values
within the fi le path of the URL, rather than the query string. This can often be
achieved with some simple rules to transform the URL and forward it to the
true destination. The following mod_rewrite rules in Apache are used to handle
public access to user profi les:
RewriteCond %{THE_REQUEST} ^[A-Z]{3,9}\ /pub/user/[^\&]*\ HTTP/
RewriteRule ^pub/user/([^/\.]+)$ /inc/user_mgr.php?mode=view&name=$1
This rule takes aesthetically pleasing requests such as: