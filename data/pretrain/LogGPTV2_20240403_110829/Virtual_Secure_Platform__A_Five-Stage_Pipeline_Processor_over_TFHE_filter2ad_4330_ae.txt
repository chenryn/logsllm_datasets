Yes
No
No
Yes
Yes
Yes
Yes
No
Yes
No
Yes
Yes
Yes
No
Yes
No
Yes
# of
cycles
936
1216
936
936
1216
1216
936
1216
936
936
1216
1216
Runtime [s]
2342.0± 13.3
2773.0± 2.8
5919.0± 33.1
2232.1± 1.7
7809.0± 45.8
2045.0± 4.6
1455.7± 0.3
979.0± 12.5
1627.0± 4.2
1440.0± 2.5
1566.0± 9.7
965.9± 3.4
sec./cycle
2.502± 0.014
2.280± 0.002
6.324± 0.035
2.385± 0.002
6.422± 0.038
1.682± 0.004
1.555± 0.000
0.805± 0.010
1.739± 0.004
1.538± 0.003
1.288± 0.008
0.794± 0.003
# of
tries
3
3
5
5
4
5
3
3
3
3
3
3
which is a esoteric programming language, and returns the re-
sult. We inputted ++++[>++++++++++++ to it, the result
of which is 42.
Table 3 shows the size of keys and ciphertexts. We can
see Bootstrapping Key is signiﬁcantly bigger than other parts,
so reusing Bootstrapping Key can reduce communication
cost greatly. The reason why RAM is about 1024 times big-
ger than ROM is that Vertical Packing [11] is not applied to
RAM. Table 4 shows the machine code size of the programs
in CAHPv3. We also show RV32IC version for reference.
RV32IC has more registers than CAHPv3 does, so register
spills more often occurs in CAHPv3, which made code of
Brainf*ck larger.
Client-side Cost Evaluation
It is noted that, on p3.8xlarge, it takes Alice (i.e., the client)
about 57 seconds to complete the generation of the Boot-
strapping Key, encryption of the memory, compilation of the
program and the decryption of the evaluation results. Among
these, the generation of Bootstrapping Key is the most time
consuming procedure, where it takes about 55 seconds to
ﬁnish. For simple programs like Hamming, evaluating the
program locally by the client only takes around 0.5 microsec-
onds on a conventional CPU, and program outsourcing in
such case provides no practical merit. However, as discussed
in Section 4.1, for programs that potentially contain inﬁnite
loops, VSP can obviously reduce the amount of client-side
computations. Therefore, exploring practical applications of
VSP is one of our main future works.
9.2 Overall Performance and Comparison to
Existing Works
Because FURISC [8, 25] is the only previous work which
represents the processor as a Boolean circuit and evaluates it
over FHE, we compare FURISC as the-state-of-the-art to VSP
Table 6: Comparison between VSP and FURISC
Name
VSP
0.8
FURISC 1278 (est.)
sec./cycle
# of instructions
Implementation
Small
Large
Public [31]
Private
in Table 6. FURISC gives the FPGA-accelerated evaluation
time for Subtraction, in Table 6.5 in [8]. Because SBN is
the only instruction FURISC supports, the evaluation time of
Subtraction corresponds to one clock cycle in the FURISC
processor. Therefore, the estimated time for evaluating one
clock cycle of FURISC is 21.3 minutes, over 1000 seconds.
In contrast, our VSP implementation can evaluate one clock
cycle in 0.8 seconds, as shown in Case #12 in Table 5.
The number of instructions for representing (almost all)
programs in FURISC are larger than that of VSP, for that FU-
RISC has an OISC ISA. Therefore, we can see that compiling
the same program on VSP results in a smaller number of in-
structions, and that each instruction runs nearly 1600× faster
than FURISC. Hence, we are conﬁdent that the open-source
VSP is the fastest FHE-based SCO platform to date.
10 Conclusion
In this work, we presented VSP, the ﬁrst comprehensive plat-
form that implements a multi-opcode general-purpose sequen-
tial processor over TFHE for two-party Secure Computation
Ofﬂoading (SCO). We proposed a complete SCO scheme
and designed a custom ﬁve-stage pipelined processor along
with a custom ISA CAHPv3. We also proposed CMUX Mem-
ory, the optimized structure of ROM and RAM over TFHE
to speed up instruction evaluation. We thoroughly evaluated
VSP on benchmarks to show that both pipelining and CMUX
Memory are effective in speeding up VSP. Our open-source
implementation is nearly 1600× faster than the-state-of-the-
4020    30th USENIX Security Symposium
USENIX Association
art implementation while accepting conventional C language
programs.
11 Acknowledgement
We thank all the people including our shepherd Thomas Ris-
tenpart and anonymous reviewers for their insightful com-
ments. This study was supported by Information-technology
Promotion Agency (IPA), Japan, The MITOU Program in
ﬁscal year 2019, and SAKURA internet Inc. We are grateful
to Kazuyuki Shudo for his support as our project manager in
The MITOU Program. This work was partially supported by
JSPS KAKENHI Grant No. 20K19799, and 20H04156.
References
[1] S. van Schaik, M. Minkin, A. Kwong, D. Genkin, and
Y. Yarom, “CacheOut: Leaking data on Intel CPUs via
cache evictions.” https://cacheoutattack.com/,
2020.
[2] S. van Schaik, A. Kwong, D. Genkin, and Y. Yarom,
“SGAxe: How SGX fails in practice.” https://
sgaxeattack.com/, 2020.
[3] S. Rass and P. Schartner, “On the security of a universal
cryptocomputer: the chosen instruction attack,” IEEE
Access, vol. 4, pp. 7874–7882, 2016.
[4] A. C. Yao, “How to generate and exchange secrets,” in
27th Annual Symposium on Foundations of Computer
Science (sfcs 1986), pp. 162–167, 1986.
[5] C. Gentry, A Fully Homomorphic Encryption Scheme.
PhD thesis, Stanford, CA, USA, 2009.
[6] E. M. Songhori, S. U. Hussain, A. Sadeghi, T. Schnei-
der, and F. Koushanfar, “Tinygarble: Highly compressed
and scalable sequential garbled circuits,” in 2015 IEEE
Symposium on Security and Privacy, pp. 411–428, 2015.
[7] E. M. Songhori, T. Schneider, S. Zeitouni, A. Sadeghi,
G. Dessouky, and F. Koushanfar, “Garbledcpu: A mips
processor for secure computation in hardware,” in 2016
53nd ACM/EDAC/IEEE Design Automation Conference
(DAC), pp. 1–6, June 2016.
[8] A. Chatterjee and K. M. M. Aung, FURISC: FHE En-
crypted URISC Design, pp. 87–115. Singapore: Springer
Singapore, 2019.
[10] R. Rivest, L. Adleman, and M. Dertouzos, “On data
banks and privacy homomorphisms,” in Foundations
on Secure Computation, Academia Press, pp. 169–179,
1978.
[11] I. Chillotti, N. Gama, M. Georgieva, and M. Izabachène,
“Tfhe: Fast fully homomorphic encryption over the torus,”
Journal of Cryptology, vol. 33, no. 1, pp. 34–91, 2020.
[12] Z. Brakerski, C. Gentry, and V. Vaikuntanathan, “(lev-
eled) fully homomorphic encryption without bootstrap-
ping,” in Proceedings of the 3rd Innovations in Theo-
retical Computer Science Conference, ITCS ’12, (New
York, NY, USA), p. 309–325, Association for Comput-
ing Machinery, 2012.
[13] I. Chillotti, N. Gama, M. Georgieva, and M. Izabachène,
“Faster fully homomorphic encryption: Bootstrapping
in less than 0.1 seconds,” in Advances in Cryptology
– ASIACRYPT 2016 (J. H. Cheon and T. Takagi, eds.),
(Berlin, Heidelberg), pp. 3–33, Springer Berlin Heidel-
berg, 2016.
[14] S. Halevi and V. Shoup, “Bootstrapping for helib.” Cryp-
tology ePrint Archive, Report 2014/873, 2014. https:
//eprint.iacr.org/2014/873.
[15] O. Regev, “On lattices, learning with errors, random
linear codes, and cryptography,” in Proceedings of the
Thirty-Seventh Annual ACM Symposium on Theory of
Computing, STOC ’05, (New York, NY, USA), p. 84–93,
Association for Computing Machinery, 2005.
[16] I. Chillotti, N. Gama, M. Georgieva, and M. Izabachène,
“TFHE: Fast fully homomorphic encryption library.”
https://tfhe.github.io/tfhe/, August 2016.
[17] P. Mohassel and S. Sadeghian, “How to hide circuits in
mpc an efﬁcient framework for private function evalua-
tion,” in Advances in Cryptology – EUROCRYPT 2013
(T. Johansson and P. Q. Nguyen, eds.), (Berlin, Heidel-
berg), pp. 557–574, Springer Berlin Heidelberg, 2013.
[18] D. Cash, M. Green, and S. Hohenberger, “New deﬁni-
tions and separations for circular security,” in Public Key
Cryptography – PKC 2012 (M. Fischlin, J. Buchmann,
and M. Manulis, eds.), (Berlin, Heidelberg), pp. 540–
557, Springer Berlin Heidelberg, 2012.
[9] N. P. Smart and F. Vercauteren, “Fully homomorphic en-
cryption with relatively small key and ciphertext sizes,”
in Proceedings of the 13th International Conference
on Practice and Theory in Public Key Cryptography,
PKC’10, (Berlin, Heidelberg), p. 420–443, Springer-
Verlag, 2010.
[19] J. Black, P. Rogaway, and T. Shrimpton, “Encryption-
scheme security in the presence of key-dependent mes-
sages,” in Revised Papers from the 9th Annual Inter-
national Workshop on Selected Areas in Cryptogra-
phy, SAC ’02, (Berlin, Heidelberg), p. 62–75, Springer-
Verlag, 2002.
USENIX Association
30th USENIX Security Symposium    4021
[20] A. Paverd, A. Martin, and I. Brown, “Modelling and au-
tomatically analysing privacyproperties for honest-but-
curious adversaries,” tech. rep., University of Oxford,
2014.
[21] M. Brenner, H. Perl, and M. Smith, “How practical is ho-
momorphically encrypted program execution? an imple-
mentation and performance evaluation,” in 2012 IEEE
11th International Conference on Trust, Security and
Privacy in Computing and Communications, pp. 375–
382, June 2012.
[22] N. G. Tsoutsos and M. Maniatakos, “The heroic frame-
work: Encrypted computation without shared keys,”
IEEE Transactions on Computer-Aided Design of Inte-
grated Circuits and Systems, vol. 34, no. 6, pp. 875–888,
2015.
[23] P. T. Breuer and J. P. Bowen, “Fully encrypted high-
speed microprocessor architecture: the secret computer
in simulation,” IJCCBS, vol. 9, no. 1/2, pp. 26–55, 2019.
[24] O. Mazonka, N. G. Tsoutsos, and M. Maniatakos, “Cryp-
toleq: A heterogeneous abstract machine for encrypted
and unencrypted computation,” IEEE Transactions on
Information Forensics and Security, vol. 11, no. 9,
pp. 2123–2138, 2016.
[25] A. Chatterjee and I. Sengupta, “Furisc: Fhe en-
crypted urisc design.” Cryptology ePrint Archive, Report
2015/699, 2015. https://eprint.iacr.org/2015/
699.
[26] “libScarab.”
hcrypt-project/libScarab, 2013.
06/19/2020.
https://github.com/
Accessed
[27] E. M. Songhori, M. S. Riazi, S. U. Hussain, A.-R.
Sadeghi, and F. Koushanfar, “Arm2gc: Succinct gar-
bled processor for secure computation,” 2019 56th
ACM/IEEE Design Automation Conference (DAC),
pp. 1–6, 2019.
[28] S. Yasuda, F. Kitagawa, and K. Tanaka, Constructions
for the IND-CCA1 Secure Fully Homomorphic Encryp-
tion, pp. 331–347. Singapore: Springer Singapore, 2018.
[29] J. Loftus, A. May, N. P. Smart, and F. Vercauteren, “On
cca-secure somewhat homomorphic encryption,” in Se-
lected Areas in Cryptography (A. Miri and S. Vaudenay,
eds.), (Berlin, Heidelberg), pp. 55–72, Springer Berlin
Heidelberg, 2012.
[30] E. Ben-Sasson, A. Chiesa, D. Genkin, E. Tromer, and
M. Virza, “Snarks for c: Verifying program executions
succinctly and in zero knowledge,” in Advances in Cryp-
tology – CRYPTO 2013 (R. Canetti and J. A. Garay,
eds.), (Berlin, Heidelberg), pp. 90–108, Springer Berlin
Heidelberg, 2013.
[31] K. Matsuoka, R. Banno, and N. Matsumoto, “Source
codes of our implementation,” 2020. https://github.
com/virtualsecureplatform/kvsp.
[32] C. Lattner and V. Adve, “LLVM: A compilation frame-
work for lifelong program analysis and transformation,”
in CGO, (San Jose, CA, USA), pp. 75–88, Mar 2004.
[33] “sbt.”
https://www.scala-sbt.org/index.html.
Accessed 06/19/2020.
[34] C. Wolf, “Yosys open synthesis suite.” http://www.
clifford.at/yosys/. Accessed 06/19/2020.
[35] “Original
implementation of cuFHE.” https://
Accessed
github.com/vernamlab/cuFHE, 2018.
06/19/2020.
[36] W. Dai and B. Sunar, “cuhe: A homomorphic encryption