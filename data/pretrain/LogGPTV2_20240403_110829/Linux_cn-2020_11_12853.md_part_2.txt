我在这里应该提一下，起初微软实际上提出要收购网景公司。他们出价很低，网景公司拒绝了他们。因此，微软不得不打造自己的浏览器，他们称自己的浏览器为 探索者   Explorer （IE）。
**00:08:21 - Clive Thompson**：
微软花了一年的时间疯狂地开发浏览器，并于 1995 年秋天将其推出。他们做的事情与网景差不多。他们快速推出了一些东西，并不担心它是否完美，因为它会越来越好。但是，在 20 世纪 90 年代后半叶真正出现的一场战争是谁的浏览器最有趣、最具交互性、最功能复杂。
**00:08:53 - Saron Yitbarek**：
请记住，网景在这方面绝不是占了上风。
**00:08:57 - Clive Thompson**：
微软拥有非常强大的地位。当全球的 80％ ~ 90％ 的计算机都安装了 Windows 时，很容易就可以把软件设置为默认软件。而这正是他们所做的。所以你可以看到 Internet Explorer （IE）的不断崛起。
**00:09:16 - Saron Yitbarek**：
在某种程度上，可怜的老网景在这场战斗中一直处于劣势。但问题是，在战斗结束之前，他们做了一个 孤注一掷   Hail Mary 的选择，事实证明，这将成为整个编程世界的一个令人难以置信的成绩。
**00:09:35 - Clive Thompson**：
这就是 JavaScript 创建过程中迷人而怪异的故事。
**00:09:43 - Saron Yitbarek**：
所有围绕 Web 的热议，围绕浏览器生活的热议，都非常清楚地表明了一件事。我们需要一种新的编程语言，一种远远超出 HTML 的语言。我们需要一种为所有新的基于 Web 的开发量身定做的语言。我们想要一种不仅能在网上生存，而且在那里蓬勃发展的语言。
**00:10:10 - Clive Thompson**：
如何为浏览器创建编程语言呢？
**00:10:15 - Saron Yitbarek**：
我的朋友，这是一个价值数十亿美元的问题。在网景看到微软与他们竞争的时候，他们开始关注 Java™。Java 会成为 Web 开发的语言吗？Java 是一种丰富的编译语言。它表现得和 C++ 一样好。但它仍然需要编译。开发人员确实想要一些更轻量级的东西，一些可以解释执行而不是编译的东西，一些可以吸引所有涌入 Web 的非专业程序员的东西。毕竟，那些新的程序员想要直接在网页上工作。那是我们的梦想。
**00:11:05 - Saron Yitbarek**：
网景公司需要一种可以在浏览器内部运行的编程语言，让开发人员能够让这些静态网页动起来。他们想，如果他们能在发布 Netscape 2.0 测试版的同时，发布一种新的轻量级语言，为 Web 编程创造奇迹，那不是很棒吗？只是有一个问题，他们只有 10 天的时间来创造一门新的语言。实际上，只给了一个叫 Brendan Eich 的人 10 天的时间。他就是那个负责完成这件事的人。毫无疑问，如果有人能做到这一点，那就是他。在 Brendan 还是伊利诺伊大学的学生时，他常常为了好玩而创造新的语言，只是为了摆弄一下语法。
**00:11:57 - Charles Severance**：
Brendan Eich 的关键在于，在构建 JavaScript 时，Brendan Eich 已经是编程语言狂热分子了。
**00:12:05 - Saron Yitbarek**：
为了了解 Eich 到底取得了什么成果，我们联系了 密歇根大学信息学院   University of Michigan School of Information 的教授 Charles Severance。
**00:12:14 - Charles Severance**：
JavaScript 在某种程度上是在 Java 被视为未来的环境中创建的，在 1994 年，我们认为它（Java）将解决一切问题。一年后，那个真正能解决一切的东西即将出现，但它不能说，“嘿，我已经解决了一切”，因为每个人，包括我自己，就像都相信 1994、1995 年的我们已经看到了未来一样，这个未来就是 Java 编程语言。他们必须建立一种看似无关紧要、看似愚蠢、看似毫无意义，但却是正确的解决方案的语言。
**00:12:56 - Saron Yitbarek**：
但是 Eich 提供的可不仅仅是一种玩具语言。它以隐藏的方式进行了复杂处理，并从以前的语言中汲取了主要灵感。
**00:13:07 - Charles Severance**：
如果你看一下基本语法，很明显它的灵感来自于带有花括号和分号的 C 语言。一些字符串模式取自 Java 编程语言。但面向对象的底层模式取自名为 Modula-2 的编程语言，它有 头等函数   first class functions 的概念，对我来说，这确实是使 JavaScript 成为如此强大以及可扩展语言的最令人惊叹的选择之一，即函数、函数的主体、构成函数本身的代码也是数据。
**00:13:41**：
另一个真正的灵感来源于 HyperCard。JavaScript 总是在浏览器中运行，这意味着它有 文档对象模型   Document Object Model （DOM）的基本数据上下文，文档对象模型是网页的面向对象表示。它不像传统的编程语言。JavaScript 代码不是从一开始就有的，最初它是一个网页，最终演变成了这种面向事件的编程。
**00:14:12 - Saron Yitbarek**：
1995 年 11 月 30 日，当 JavaScript 与网景的 Navigator 2.0 一起发布时，所有的魔力都被植入到一粒强大的语言小种子中。包括 美国在线   America Online （AOL）和 AT&T（美国电话电报公司）在内的 28 家公司同意将其作为一种开放标准的语言使用。当它发布时，有一些老派的专业人士对 JavaScript 嗤之以鼻。他们认为这只是一种新手的语言。他们忽略了它革命性的潜力。
**00:14:46 - Charles Severance**：
这些超级先进的概念来自不太知名但又非常像高级面向对象的语言当中，Brendan 决定将所有这想概念融入其中。所以 JavaScript 就像一只特洛伊木马。它在某种程度上潜入了我们的集体意识，认为它很傻、像个玩笑、简单、轻巧。但是几乎从一开始它就建立了一个功能强大的、深思熟虑的编程语言，它几乎能做计算机科学中的任何事情。
**00:15:17 - Saron Yitbarek**：
其结果是成为了一种浏览器原生语言，可以随着我们在线生活的发展而不断进化。没过多久，JavaScript 就成为了事实上的 Web 开发选择。
**00:15:29 - Charles Severance**：
JavaScript 是一种不二之选的编程语言，我只能学习它，事实上学习 JavaScript 的人通常别无选择，因为他们会说，“我想构建一个浏览器应用程序，我想让它有交互元素。” 答案是你必须学习 JavaScript。如果你想象一下，比如说，你最喜欢的编程语言是什么，那么这个问题的答案几乎就是某某加上 JavaScript，对吧？有人可能会说，“我喜欢 Python 和 JavaScript ”，或者 “我喜欢 Scala 和 JavaScript”，因为它就像是每个人都需要学习的语言。
**00:16:05 - Saron Yitbarek**：
Charles Severance 是 密歇根大学信息学院   University of Michigan School of Information 的教授。他说，网景公司一开始非常强大，他们在浏览器之战中奋力拼搏，但最终……
**00:16:22 - Clive Thompson**：
网景浏览器作为一款严肃的产品就这样消失了。
**00:16:27 - Saron Yitbarek**：
微软在整个行业的主导地位是一股压倒性的力量。尽管在浏览器竞争上晚了一年，但他们还是能够力挽狂澜，赢得了今天的胜利。但你知道，网景公司最后一击，它创造的 JavaScript，是成功的，在战斗结束很久之后，这种从浏览器战争中诞生的语言瑰宝，将有一个改变一切的后世。
**00:17:01**：
如果你是最近才开始编程的，很可能会理所当然地认为，你可以开发可更改和更新的交互式 Web 页面，而无需从服务器拉取页面的全新副本。但是，想像一下，当这样做成为一种全新的选择时会是什么样子的。我们有请红帽公司的软件工程师 Michael Clayton 帮助我们了解那是一个多么巨大的转变。
**00:17:28 - Michael Clayton**：
我想说，在 2004 年 Google Mail 发布了。Gmail，据我所知，它是第一个真正将 JavaScript 带到更高水平的 Web 应用程序，它使用 JavaScript 来动态地切换你正在查看的内容。
**00:17:49 - Saron Yitbarek**：
假设你正在查看收件箱，然后单击了一封电子邮件。在过去，你的电子邮件查看器会在你的浏览器中加载一个全新的页面，仅仅是为了向你显示那封电子邮件。当你关闭该电子邮件时，它会重新加载整个收件箱。
**00:18:05 - Michael Clayton**：
这造成了很多延迟。当你在视图之间来回切换时要等待很多时间，Gmail 改变了这一切。他们使用 JavaScript 在后台获取你想要查看的内容，然后将其展现在你面前，而无需等待全新的页面视图。
**00:18:23 - Saron Yitbarek**：
这节省了大量的时间和精力。但是仔细想想，它改变的不仅仅是速度。它改变了我们工作的本质。
**00:18:35 - Michael Clayton**：
所以，Web 开发者作为一种职业，已经从类似幕后角色的服务端走到了离用户仅薄薄一层之隔的位置，因为他们直接在浏览器中编写代码，而用户也正是通过浏览器查看 Web 页面。