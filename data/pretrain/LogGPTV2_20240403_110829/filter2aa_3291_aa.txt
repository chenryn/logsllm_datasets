# Offensive Windows IPC Internals 2: RPC

**Published on February 21, 2021 (Last Updated: May 19, 2021)**

## Table of Contents
- [Introduction](#introduction)
- [History](#history)
- [RPC Messaging](#rpc-messaging)
- [RPC Protocol Sequence](#rpc-protocol-sequence)
- [RPC Interfaces](#rpc-interfaces)
- [RPC Binding](#rpc-binding)
- [Anonymous & Authenticated Bindings](#anonymous--authenticated-bindings)
- [Registration Flags](#registration-flags)
- [Security Callbacks](#security-callbacks)
- [Authenticated Bindings](#authenticated-bindings)
- [Well-known vs Dynamic Endpoints](#well-known-vs-dynamic-endpoints)
- [RPC Communication Flow](#rpc-communication-flow)
- [Sample Implementation](#sample-implementation)
- [Access Matrix](#access-matrix)
- [Attack Surface](#attack-surface)
- [Finding Interesting Targets](#finding-interesting-targets)
- [RPC Servers](#rpc-servers)
- [RPC Clients](#rpc-clients)
- [Unauthorized Access](#unauthorized-access)
- [Client Impersonation](#client-impersonation)
- [Server Non-Impersonation](#server-non-impersonation)
- [MITM Authenticated NTLM Connections](#mitm-authenticated-ntlm-connections)
- [MITM Authenticated GSS_NEGOTIATE Connections](#mitm-authenticated-gss_negotiate-connections)
- [References](#references)

---

## Introduction
This is the second part of my series, *Offensive Windows IPC Internals*. If you missed the first part, you can find it here: [Offensive Windows IPC Internals 1: Named Pipes](#).

Originally, I planned to cover LPC and ALPC in this part. However, due to the complexity and the time-consuming nature of documenting these technologies, I decided to focus on RPC first. The reason for initially planning to cover LPC and ALPC before RPC is that RPC uses ALPC under the hood for local communication and is the intended solution for fast local inter-process communication.

## History
Remote Procedure Calls (RPC) is a technology that enables data communication between a client and a server across process and machine boundaries. It is an Inter Process Communication (IPC) technology, similar to LPC, ALPC, and Named Pipes. RPC allows calls to remote servers to exchange or deliver data, or to trigger a remote routine. The term "remote" does not necessarily mean the server must be on a different machine; it can also be local.

Microsoft's RPC implementation is based on the DCE (Distributed Computing Environment) standard developed by the Open Software Foundation (OSF) in 1993. Microsoft adjusted the DCE model to fit their programming scheme, using Named Pipes for communication, and introduced it in Windows 95. Initially, they considered using LPC, but it did not support asynchronous calls, which led them to use Named Pipes instead.

## RPC Messaging
RPC is a client-server technology with a messaging architecture similar to COM (Component Object Model). It consists of three main components:
- **Server & Client Processes**: Responsible for registering an RPC interface and associated binding information.
- **Server & Client Stubs**: Responsible for marshalling incoming and outgoing data.
- **RPC Runtime Library (rpcrt4.dll)**: Sends the stub data over the wire using the specified protocol.

A visual overview of this message architecture can be found [here](https://docs.microsoft.com/en-us/windows/win32/rpc/how-rpc-works).

## RPC Protocol Sequence
The RPC Protocol Sequence is a constant string that defines which protocol, transport, and network protocol the RPC runtime should use. Microsoft supports the following RPC protocols:
- **NCACN (Network Computing Architecture connection-oriented protocol)**
- **NCADG (Network Computing Architecture datagram protocol)**
- **NCALRPC (Network Computing Architecture local remote procedure call)**

The most relevant protocol sequences are:
- **ncacn_ip_tcp**: Connection-oriented TCP/IP
- **ncacn_http**: Connection-oriented TCP/IP using Microsoft Internet Information Server as HTTP proxy
- **ncacn_np**: Connection-oriented named pipes (via SMB)
- **ncadg_ip_udp**: Datagram (connectionless) UDP/IP
- **ncalrpc**: Local Procedure Calls (post Windows Vista via ALPC)

## RPC Interfaces
RPC interfaces are defined in an Interface Definition Language (IDL) file. The IDL file describes the methods, return values, and parameters of the interface. For example:

```idl
[ 
    uuid(9510b60a-2eac-43fc-8077-aaefbdf3752b), 
    version(1.0), 
    implicit_handle(handle_t hImplicitBinding) 
] 
interface Example1 
{ 
    int Output([in, string] const char* pszOutput); 
    void Shutdown(); 
}
```

The IDL file is compiled by the Microsoft IDL compiler (midl.exe) into header and source code files that can be used by the server and client.

## RPC Binding
Binding is the process of creating a logical connection between a client and a server. There are three types of binding handles:
- **Implicit**: Allows a client to connect to a specific RPC server (specified by the UUID in the IDL file). Not thread-safe.
- **Explicit**: Allows a client to connect to multiple RPC servers. Thread-safe and recommended for multi-threaded applications.
- **Automatic**: A solution for developers who do not want to manage binding handles manually.

### Anonymous & Authenticated Bindings
- **Anonymous Bindings**: Default, where the server has no clue who connected to it.
- **Authenticated Bindings**: Secure the connection between the client and server.

### Registration Flags
When registering your server interface, you can set registration flags to control access. For example, `RPC_IF_ALLOW_LOCAL_ONLY` to only allow local connections.

### Security Callbacks
You can set a security callback to check whether a requesting client should be allowed or denied. An always-allow callback could look like this:

```c
RPC_STATUS CALLBACK SecurityCallback(RPC_IF_HANDLE hInterface, void* pBindingHandle) 
{ 
    return RPC_S_OK; // Always allow anyone. 
}
```

### Authenticated Bindings
To secure the connection, you can set authentication information associated with your binding handle, specifying a security service provider and an SPN to represent your RPC server.

## Well-known vs Dynamic Endpoints
- **Well-known Endpoints**: Fixed and known to both the client and server.
- **Dynamic Endpoints**: Assigned dynamically at runtime.

## RPC Communication Flow
The steps involved in creating an RPC server and sending a message include:
1. Registering the RPC interface.
2. Creating a binding handle.
3. Establishing a connection.
4. Sending and receiving messages.

## Sample Implementation
Sample code for implementing RPC clients and servers can be found [here](https://github.com/csandker/InterProcessCommunication-Samples/tree/master/RPC/CPP-RPC-Client-Server).

## Access Matrix
Understanding the access matrix helps in identifying potential attack vectors.

## Attack Surface
From an offensive perspective, the attack surface of RPC includes various aspects such as unauthorized access, client impersonation, and server non-impersonation.

## Finding Interesting Targets
Identifying interesting targets involves analyzing the RPC services running on a system and their configurations.

## RPC Servers
RPC servers are responsible for handling client requests and executing the corresponding procedures.

## RPC Clients
RPC clients initiate requests to the server and receive responses.

## Unauthorized Access
Exploiting vulnerabilities to gain unauthorized access to RPC services.

## Client Impersonation
Impersonating a client to perform actions on behalf of the client.

## Server Non-Impersonation
Ensuring that the server does not impersonate the client, maintaining security.

## MITM Authenticated NTLM Connections
Performing Man-in-the-Middle (MITM) attacks on authenticated NTLM connections.

## MITM Authenticated GSS_NEGOTIATE Connections
Performing MITM attacks on authenticated GSS_NEGOTIATE connections.

## References
- [Microsoft RPC Documentation](https://docs.microsoft.com/en-us/windows/win32/rpc/)
- [IPC Research by Jonathan Johnson](https://ipc-research.readthedocs.io/en/latest/subpages/RPC.html)

---

For a more defensive view on RPC, refer to [this resource](https://ipc-research.readthedocs.io/en/latest/subpages/RPC.html) by Jonathan Johnson.