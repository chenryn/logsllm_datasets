so that there are no separate capability packets.
There are two types of packets from the standpoint of capabili-
ties: request packets and regular packets. They share an identify-
ing capability header and are shown in Figure 5. Request packets
carry a list of blank capabilities and path identiﬁers that are ﬁlled in
by routers as requests travel towards destinations. Regular packets
have two formats: packets that carry both a ﬂow nonce and a list of
valid capabilities, and packets that carry only a ﬂow nonce. (Recall
that a ﬂow is deﬁned by a source and a destination IP address.) A
regular packet with a list of capabilities may be used to request a
new set of capabilities. We refer to such packets as renewal pack-
ets. If a regular packet does not pass the capability check, it may be
Common Header
version (4)
type (4)
upper protocol (8)
  1xxx:   demoted
  x1xx:   return info
  xx00:   request
  xx01:   regular w/ capabilities
  xx10:   regular w/ nonce only       
  xx11:   renewal
common header (16)
capability num (8)
capability ptr (8)
path−id 1 (16)
Request Header
blank capability 1 (64)
path−id n (16)
blank capability n (64)
Regular / Renewal
Header
common header (16)
flow nonce (48)
capability num (8)
capability ptr (8)
N (10)
T (6)
cached
capability 1 (64)
capability n (64)
Return info
return type (8)
00000001: demotion notification
0000001x: a 8−bit capability num fied, N, T,
and a list of return capabilities follow this field.
Figure 5: Types of capability packets. Return information is present
if the return bit in the common header is set. Sizes are in bits. The units
for N are KB; the units for T are seconds.
demoted to low priority trafﬁc that is treated as legacy trafﬁc. Such
packets are called demoted packets.
We use the lowest two bits of the type ﬁeld in the capability
header to indicate the type and the format of packets: request packet,
regular packet with a ﬂow nonce only, regular packet with both a
ﬂow nonce and a list of capabilities, and renewal packet. One bit in
the type ﬁeld is used by routers to indicate that the packet has been
demoted. The remaining bit indicates whether there is also return
information being carried in the reverse direction to a sender. This
information follows the capability payload. It may be a list of ca-
pabilities granted by the destination or a demote notiﬁcation.
Each capability is as described in Section 3: a 64 bit value, bro-
ken down into 8 bits of router timestamp in seconds (a modulo 256
clock), and 56 bits of a keyed hash.
4.2 Senders and Destinations
To send to a destination for which it has no valid capabilities, a
sender must ﬁrst send a request. A request will typically be com-
bined with the ﬁrst packet a sender sends, such as a TCP SYN.
When a destination receives the request, it must decide whether to
grant or refuse the transfer. We described some simple policies in
Section 3.3; there is also an issue we have not tackled of how to
express policies within the socket API. If the destination chooses
to authorize the transfer, it sends a response with capabilities back
to the sender, again combined with another packet, such as a TCP
SYN/ACK. This SYN/ACK will also carry a request for the reverse
direction. The reverse setup occurs in exactly the same manner
as the forward setup, and we omit its description. To refuse the
transfer, the destination may instead return an empty capability list,
again combined with a packet such as a TCP RST.
Once the sender receives capabilities, the remainder of the trans-
fer is straightforward. The sender sends data packets, initially with
capabilities, and models capability expiration and cache expiration
at routers to conservatively determine when routers will have their
capabilities in cache, and when to renew the capabilities. In the
common case, the ﬂow nonce and capabilities are cached at every
router. This enables the source to transmit most packets with only
the ﬂow nonce.
The destination simply implements a capability granting policy
and does not need to model router behavior.
It also echoes any
demote signals to the sender, so that the sender may repair the path.
4.3 Routers
Routers route and forward packets as required by IP and ad-
ditionally process packets according to the capability information
that they carry. At a high level, routers share the capacity of each
outgoing link between three classes of trafﬁc. This is shown in Fig-
ure 2. Request packets, which do not have valid capabilities, are
guaranteed access to a small, ﬁxed fraction of the link (5% is our
default) and are rate-limited not to exceed this amount. Regular
packets with associated capabilities may use the remainder of the
capacity. Legacy trafﬁc is treated as the lowest priority, obtaining
bandwidth that is not needed for either requests or regular packets
in the traditional FIFO manner.
To process a request, the router adds a pre-capability to the end
of the list and adds a new path identiﬁer if it is at a trust boundary.
The pre-capability is computed as the local timestamp concatenated
with the hash of a router secret, the current, local router time in
seconds using its modulo 256 clock, and the source and destination
IP addresses of the packet. This is shown in Figure 3. The path
identiﬁer is a constant that identiﬁes the ingress to the trust do-
main, either with high likelihood using pseudo-random functions
or with conﬁguration information. Requests are fair-queued for on-
ward transmission using the most recent path identiﬁers.
To process a regular packet, routers check that the packet is au-
thorized, update the cached information and packet as needed, and
schedule the packet for forwarding. First, the router tries to lo-
cate an entry for the ﬂow using the source and the destination IP
address from the packet. An entry will exist if the router has re-
ceived a valid regular packet from that ﬂow in the recent past. The
cache entry stores the valid capability, the ﬂow nonce, the autho-
rized bytes to send (N), the valid time (T ), and the ttl and byte
count as described in Section 3.6.
If there is a cached entry for the ﬂow, the router compares the
ﬂow nonce to the packet. If there is a match, it further checks and
updates the byte count and the ttl, and then fair queues the packet
as described below. If the ﬂow nonce does not match and a list of
capabilities are present, this could be the ﬁrst packet with a renewed
capability, and so the capability is checked and if valid, replaced in
the cache entry. Equivalently, if there is not a cached entry for the
ﬂow, the capability is checked, and a cache entry is allocated if it is
valid. If the packet has a valid capability and is a renewal packet, a
fresh pre-capability is minted and placed in the packet.
A router validates capability using the information in the packet
(the source and destination addresses, N, and T ) plus the router’s
if (pkt−>protocol == TVA) {
isValid = false;
if (isRTS(pkt)) { /* rts pkt */
insert precap pi(pkt);
enqueRts(pkt); /* per path identiﬁer queue */
} else
{ /* regular pkt */
entry = lookup(pkt);
if (entry) { /* has entry */
if (pkt−>nonce == entry−>nonce) {
/* check byte count, expiration, update entry */
isValid = updateEntry(entry, pkt);
} else if (validateCap(pkt)) { /* comp two hashes */
/* ﬁrst renewed pkt. replace and check entry */
isValid = replaceEntry(entry, pkt);
}
} else { /* no entry */
if (validateCap(pkt)) {
isValid = createEntry(pkt); /* create and check entry */
}
}
if (isValid) {
if (isRenewal(pkt)) { /* renewal pkt */
renewPkt(pkt); /* insert precap */
}
enqueRegular(pkt);
} else {
demote(pkt);
enqueLegacy(pkt);
/* per-destination queue */
}
}
} else {
enqueLegacy(pkt);
}
Figure 6: How a capability router processes a packet.
secret. It recomputes the two hash functions to check whether they
match the capability value. The router also checks that the byte
count does not exceed N, and the current time does not exceed the
expiration time (of timestamp +T ) and updates the entry’s ttl. Any
packet with a valid capability or ﬂow nonce is scheduled using fair
queuing. Our scheme does this across ﬂows cached at the router
using destination addresses by default.
If neither the packet’s ﬂow nonce nor capability is valid, then
the packet is marked as demoted and queued along with legacy
packets. Figure 6 shows the pseudo-code on how a capability router
processes a packet.
5. SIMULATION RESULTS
In this section, we use ns to simulate TVA, SIFF, pushback and
the legacy Internet to see how well TVA limits the impact of DoS
ﬂoods. TVA is as described in the previous sections, except that we
rate-limit capability requests to 1% of the link capacity, down from
our default of 5%, to stress our design. SIFF is implemented as
described in [25]. It treats capacity requests as legacy trafﬁc, does
not limit the number of times a capability is used to forward trafﬁc,
and does not balance authorized trafﬁc sent to different destina-
tions. Pushback is implemented as described in [16]. It recursively
pushes destination-based network ﬁlters backwards across the in-
coming link that contributes most of the ﬂood.
For each scheme, we set up ﬁxed length transfers between le-
gitimate users, and a destination under various attacks. We then
measure: i) the average fraction of completed transfers, and ii) the
average time of the transfers that complete. These metrics are use-
ful because a successful DoS attack will cause heavy loss that will
10 legitimate users
10ms
10Mb, 10ms
bottleneck
destination
10ms
10ms
colluder
1~100 attackers
Figure 7: Simulation topology
both slow legitimate transfers and eventually cause the applications
to abort them.
We simulate the dumbbell topology shown in Figure 7. The bot-
tleneck link in our simulation is provisioned to give a legitimate
user a nominal throughput of 1Mb/s over a bottleneck link with
a nominal capacity of 10Mb/s. The RTT is 60ms. Each attacker
ﬂoods at the rate of a legitimate user, 1Mb/s, and we vary intensity
of the attacks from 1/10 of the bottleneck bandwidth to 10 times
the bottleneck bandwidth by varying the number of attackers from
1 to 100. We use these relatively low rates to speed the simulation,
since the key variables are the ratios between attacker, legitimate
user, and the bottleneck bandwidth, given that there is a bandwidth-
delay product sufﬁcient to avoid small window effects.
Each legitimate user sends a 20KB ﬁle a thousand times using
TCP, the next transfer starting after the previous one completes or
aborts due to excessive loss. Capability requests are piggybacked
on TCP SYNs. To provide a fair comparison for other schemes,
we modify TCP to have a more aggressive connection establish-
ment algorithm. Speciﬁcally, the timeout for TCP SYNs is ﬁxed
at one second (without the normal exponential backoff) and up to
eight retransmissions are performed. Without this change, SIFF
suffers disproportionately because it treats SYN packets with capa-
bility requests as legacy trafﬁc, and therefore its performance under
overload will be dominated by long TCP timeouts. Similarly, we
set the TCP data exchange to abort the connection if its retransmis-
sion timeout for a regular data packet exceeds 64 seconds, or it has
transmitted the same packet more than 10 times.
We note that TCP inefﬁciencies limit the effective throughput
of a legitimate user to be no more than 533Kb/s in our scenario,
given the transfer of 20KB with a 60ms RTT. This implies that there
is virtually no bandwidth contention with a pool of 10 legitimate
users – the contention effects we see come directly from massed
attackers.
5.1 Legacy Packet Floods
The ﬁrst scenario we consider is that of each attacker ﬂooding
the destination with legacy trafﬁc at 1Mb/s. Figure 8 shows the
fraction of completions and the average completion time for TVA
in comparison with SIFF, pushback, and the current Internet.
We see that TVA maintains the fraction of completions near 100%
and the average completion time remains small as the intensity of
attacks increases. That is, our design strictly limits the impact of
legacy trafﬁc ﬂoods. This is because we treat legacy trafﬁc with
lower priority than request trafﬁc.
SIFF treats both legacy and request packets as equally low pri-
ority trafﬁc. Therefore, when the intensity of legacy trafﬁc exceeds
the bottleneck bandwidth, a legitimate user’s request packets begin
n
o
i
t
l
e
p
m
o
c
f
o
n
o
i
t
c
a
r
F
)
s
(
e
m
i
t
r
e
f
s
n
a
r
T
 1
 0.8
 0.6
 0.4
 0.2
 0
 6
 5
 4
 3
 2
 1
 0
Internet
SIFF
pushback
TVA
 1
 10
 100
Number of attackers
Internet
SIFF
pushback
TVA
 1
 10
 100
Number of attackers