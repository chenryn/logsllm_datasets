# 0x0000
A great fool in my life I have been,  
I have squandered 'til pallid and thin.  
Hung my head in shame,  
And refused to take blame,  
For the darkness I know I've let win.  
— J. Knapp

# VulnCatcher: Fun with Programmatic Debugging
## Atlas
**Contact:** PI:EMAIL  
**Website:** [http://atlas.r4780y.com](http://atlas.r4780y.com)

# 0x0001 Who Am I?
- **Background:** Scattered past in computing
- **Role:** Insecurity Researcher
- **Title:** Captain 1@stplace
- **Personal:** Father/Husband
- **Characteristics:** Curious (and often sleepless) fellow

# 0x0100 Programmatic Debugging
- **Concept:** Debugging other processes from your (or my) favorite language.
- **Purpose:** Accessing and influencing the CPU and memory state of a process programmatically.
- **Tools:** Logic and other language constructs.

# 0x0101 Key Programmatic Debuggers
- **PyDBG by Pedram (part of Pai Mei)**
- **Immunity Debugger by Immunity Sec**
- **Vtrace by Invisigoth (Vivisect)**
- **NoxDbg by Lin0xx (first Ruby debugger)**

*This talk will focus on Vtrace.*

# 0x0102 What Can We Do?
- **Live Patching?** Fun with Hex (e.g., LivePatch)
- **Live Dumping?** (e.g., LiveOrganTransplant)
- **Process Grep?** (e.g., Visi's memgrep)
- **Vampyre Jack SSHD** (In progress by drb and myself)

# 0x0103 More Capabilities
- **Everything else that GDB or Olly can do, only better.**
- **Interactive Python Debugger:**
  - Especially useful with `searchMemory()` and `traceme()`
  - Automate frame interpretation
- **What do you want to do?**

# 0x0200 Vulnerabilities
- **Encouraging Vulnerabilities:**
  - Fuzzing on its own is so ghetto!
  - What can we watch/do to catch indications of vulnerability?

# 0x0300 Buffer Overflows?
- **Custom Breakpoints at Key Functions:**
  - **At Break:**
    - Stack Analysis for Parameters
    - Buffer Analysis for Size
  - **More Empirical than Static Analysis**

### Example: vtrace attach
```python
from vtrace import *
me = getTrace()
me.attach()
me.addBreakpoint(MemcpyBreaker(me))
me.setMode("RunForever", True)
me.run()
```

# 0x0302 memcpy()
- **Functions:**
  - `memccpy()`, `mempcpy()`, `memmove()`
  - **Check Length of Destination:**
    - `%ESP + 0x4` (HEAP: check length field immediately before the pointer to the dest, `heapptr – 4`)
    - **Stack: Check Distance to RET:**
      - `(%ebp + 4) – dest`
    - **Compare with Copy Size:**
      - `%ESP + 0xc`

### MemcpyBreaker Class
```python
class MemcpyBreaker(BreakpointPublisher):
  def __init__(self):
     ...
  def notify(self, event, trace):
    eip = trace.getProgramCounter()
    esp = trace.getRegisterByName('esp')
    ebp = trace.getRegisterByName('ebp')
    copylen = trace.readMemoryFormat((esp + 0xc), AddrFmt)[0]
    retptr = trace.readMemoryFormat((esp + 0x0), AddrFmt)[0]
    dest = trace.readMemoryFormat((esp + 0x4), AddrFmt)[0]
    src = trace.readMemoryFormat((esp + 0x8), AddrFmt)[0]
    destlen = getBufferLen(dest)
    if (copylen >= destlen):
       self.publish(BOFException(...))
```

# 0x0400 EBP-FREE SUBS?
- **Some Subs Don't Start New Stack Frames Using %ebp:**
  - **Windows Libraries**
  - **Trouble Measuring Stack Buffer Length**

### Possible Solutions:
- **Initial ESP Offset for Stack Allocation**
- **Sub Epilog Analysis:**
  - `ret $0x34`
  - `add $0x34, %esp`
- **Sub Tracing for %esp Mods:**
  - 'Til `ret` or `jmp`
- **Stack Backtrace for RET:**
  - Start at `%ESP`
  - Loop up the stack by 4 bytes
  - If the current 32-bit number is a valid address, look for a “call” opcode immediately before the address
  - If so, is the target address valid?
  - Is it a call to `memcpy` or a call to a `jmp` to `memcpy`?
  - On Linux, does it target PLT?
  - Once found, that location on the stack becomes RET
  - Subtract the stack variable from the newly discovered RET location to find the length

### findRET() Function
```python
def findRET(trace, stackptr=0):
  cont = True
  stackptr = trace.getRegisterByName('esp')
  while cont:
    stackptr -= 4
    address = trace.readMemoryFormat(stackptr, AddrFmt)[0]
    mymap = trace.getMap(address)
    if mymap is not None:  # Valid address?
      buf = trace.readMemory(address - 8, 8)
      for x in range(1, 7):
        try:
          op = Opcode(buf[x:])
          if (op.off == 8 - x and op.opcode[0] == 'c'):
            target = self.getOperandValue(op.dest)
            if trace.getMap(target) is not None:
              return address
        except Exception as e:
          continue
  return None
```

### findNextHeap() Function
```python
def findNextHeap(me, address):
  chain = getConnectedChain(me)
  for x in range(1, len(chain)):
    if chain[x] > address and chain[x - 1] <= address:
      return chain[x]
```

### getConnectedChain() Function
- **Finds HEAP memory map**
- **Searches for the first HEAP chunk**
- **Traverses the forward pointers**
- **Keeps track and returns them as a list**
- **Works on Linux, not tried on Windows yet**
- **Look for it in the next release of atlasutils**

# 0x0500 strcpy()/strncpy()
- **strcpy:**
  - Compare length of source and destination
  - **Destination Pointer:** `%ESP + 0x4`
  - **Source Pointer:** `%ESP + 0x8`
- **strncpy:**
  - Compare length of copy (size_t) to destination
  - **Destination Pointer:** `%ESP + 0x4`
  - **Size_t:** `%ESP + 0xc`

# 0x0502 strcat()/strncat()
- **Similar to strcpy/strncpy**
- **Copies source and destination together**
- **Difficult for coders to get right! (often exploitable)**
- **Best to look into logic surrounding strcat() limiting the size of both buffers**

# 0x0600 printf()
- **vfprintf covers printf and fprintf in Linux**
- **What's on the stack for format string?**
  - `%ESP + 0x8`
  - **Does it live in a likely spot?**
    - Heap? Stack? .rodata?
  - **Parse format string:**
    - Are there “%” characters in it?

# 0x0601 sprintf()
- **vsprintf covers sprintf in Linux**
- **What's on the stack for format string?**
  - `%ESP + 0x8`
  - **Does it live in a likely spot?**
    - Heap? Stack? .rodata?
  - **Parse format string:**
    - Are there “%” characters in it?
    - How long of a string can we create?

# 0x0602 snprintf()
- **vsnprintf covers snprintf in Linux**
- **What's on the stack for format string?**
  - `%ESP + 0x8`
  - **Does it live in a likely spot?**
    - Heap? Stack? .rodata?
  - **Parse format string:**
    - Are there “%” characters in it?
    - How long will the format string allow?
    - How long can we write? (`%ESP + 0xc`)

# 0x0700 scanf/sscanf/fscanf
- **Parse format string:**
  - **scanf's is located at %ESP+0x4**
  - **sscanf's and fscanf's are at %ESP + 0x8**
  - **Are there any “%s”?**
  - **If so, where are we storing them?**
    - Must check each string
    - **Example:** `%45s` against a buffer with 32 bytes

# 0x0800 gets()/fgets()
- **Alert: Just alert. Period.**

# 0x0801 getc()/fgetc()
- **Loop for getc:**
  - How big is the loop?
  - Simpler just to identify in disassembly and write up... analysis for which loop mechanism is used is more complex than just eye-balling it.

# 0x0900 memchr()/memrchr()
- **Check size_t against length of string as in memcpy**
- **May be used to look past a buffer as a potential target or source of data**

# 0x0a00 rep stos/rep movs
- **Special case:**
  - Need to disassemble code to hook these.
  - Set breakpoint one instruction before
  - `stepi()` to reach start of opcode
  - Check `%ECX` against buffer length

# 0x0b00 Format Strings
- **Used with printf/scanf families:**
  - `%c = 1 byte`
  - `%* = * bytes (depends on the size)`
  - `#d = at least # bytes, possibly more!`
  - **See man page for scanf or printf for more details.**

# 0x0c00 Are There More?
- **You tell me!**
- **Programmatic debugging is fresh turf for new ideas.**
- **“The force runs strong in your family... Pass on what you have learned...”**

# 0x0d00 Choops
- **Hola y gracias amigos:**
  - Dios
  - Jewel
  - Bug
  - Ringwraith
  - Menace
  - 1@stplace
  - Invisigoth and K