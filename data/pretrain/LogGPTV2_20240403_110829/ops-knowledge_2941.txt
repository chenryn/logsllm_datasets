User: How to configure Nginx reverse proxy to load balance and distribute requests from multiple servers? Please provide a sample configuration file.
Assistant: Here is an example of a basic Nginx reverse proxy configuration file that load balances requests from three servers: ```nginx upstream backend { server backend1.example.com; server backend2.example.com; server backend3. example.com; } server { listen 80; server_name example.com; location / { proxy_pass http://backend; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; ``` In this configuration file, we use the `upstream` module to define a server cluster named `backend`, which lists three specific servers: `backend1.example.com`, `backend2.example.com`. com` and `backend3.example.com`. These servers can be actual server IP addresses or hostnames, and can be HTTP or HTTPS protocols. Then, we configured the proxy rules in the server block. In this example, we use the `proxy_pass` directive to redirect all requests from the `example.com` website to the `backend` server cluster. In this directive, we specified `http://backend` as the proxy server address. This address is the same as the name of the `upstream` module defined earlier. In the `location` block, we also set some HTTP headers for the proxy so that the backend server can get the real IP and source address of the client. It should be noted that this example only involves a simple reverse proxy configuration. If you want to add multiple reverse proxy servers, further configuration is required. For example, add multiple `upstream` blocks to the configuration file, each containing its own list of servers. In the location directive, different proxy_pass directives can be used to specify different reverse proxy rules to implement more complex traffic distribution strategies.