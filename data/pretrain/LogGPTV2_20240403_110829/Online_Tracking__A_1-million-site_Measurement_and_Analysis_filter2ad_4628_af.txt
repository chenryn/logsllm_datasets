Another interesting ﬁnding is that when third-party cookie 
blocking  was  enabled,  the  average  number  of  third  parties 
per site dropped from 17.7 to 12.6.  Our working hypothesis 
for this drop is that deprived of ID cookies, third parties cur­
tail certain tracking-related requests such as cookie syncing 
(which we examine in Section 5.6). 
Figure  7:  Fraction  of  third  parties  blocked  by  Ghostery  as 
a  function  of  the  prominence  of  the  third  party.  As deﬁned 
earlier, a third party’s prominence is the sum of the inverse 
ranks of the sites it appears on. 
We  also  tested  Ghostery,  and  found  that  it  is  eﬀective  at 
reducing  the  number  of  third  parties  and  ID  cookies  (Fig­
ure 11 in the Appendix).  The average number of third-party 
includes  went  down  from  17.7  to  3.3,  of  which  just  0.3  had 
third-party cookies (0.1 with IDs).  We examined the promi­
nent third parties that are not blocked and found almost all 
of  these  to  be  content-delivery  networks  like  cloudﬂare.com 
or  widgets  like  maps.google.com,  which  Ghostery  does  not 
newsartssportshomegamesshoppingaveragerecreationregionalkidsandteenssocietybusinesscomputershealthsciencereferenceadult01020304050TrackerNon-Tracker10−410−310−210−1100ProminenceofThird-party(log)0.00.20.40.60.81.0FractionofTPBlockedtry to block.  So Ghostery works well at achieving its stated 
objectives. 
However,  the  tool  is  less  eﬀective  for  obscure  trackers 
(prominence < 0.1).  In Section 6.6, we show that less promi­
nent  ﬁngerprinting  scripts  are  not  blocked  as  frequently  by 
blocking  tools.  This  makes  sense  given  that  the  block  list 
is  manually  compiled  and  the  developers  are  less  likely  to 
have  encountered  obscure  trackers.  It  suggests  that  large-
scale measurement techniques like ours will be useful for tool 
developers to minimize gaps in their coverage. 
5.6  How common is cookie syncing? 
Cookie syncing, a workaround to the Same-Origin Policy, 
allows  diﬀerent  trackers  to  share  user  identiﬁers  with  each 
other.  Besides being hard to detect,  cookie syncing enables 
back-end  server-to-server  data  merges  hidden  from  public 
view, which makes it a privacy concern. 
Our  ID  cookie  detection  methodology  (Section  4)  allows 
us to detect instances of cookie syncing.  If tracker A wants 
to share its ID for a user with tracker B, it can do so in one of 
two ways:  embedding the ID in the request URL to tracker 
B,  or  in  the  referer  URL.  We  therefore  look  for  instances 
of  IDs  in  referer,  request,  and  response  URLs,  accounting 
for URL encoding and other subtleties.  We describe the full 
details  of  our  methodology  in  the  Appendix  (Section  13.3), 
with  an  important  caveat  that  our  methodology  captures 
both intentional and accidental ID sharing. 
Most  third  parties  are  involved  in  cookie  syncing. 
We  run  our  analysis  on  the  top  100,000  site  stateful  mea­
surement.  The  most  proliﬁc  cookie-syncing  third  party  is 
doubleclick.net — it shares 108 diﬀerent cookies with 118 
other  third  parties  (this  includes  both  events  where  it  is  a 
referer and where it is a receiver).  We present details of the 
top cookie-syncing parties in Appendix 13.3. 
More  interestingly,  we  ﬁnd  that  the  vast  majority  of  top 
third  parties  sync  cookies  with  at  least  one  other  party:  45 
of  the  top  50,  85  of  the  top  100,  157  of  the  top  200,  and 
460 of the top 1,000.  This adds further evidence that cookie 
syncing is an under-researched privacy concern. 
We  also  ﬁnd  that  third  parties  are  highly  connected  by 
synced cookies.  Speciﬁcally, of the top 50 third parties that 
are  involved  in  cookie  syncing,  the  probability  that  a  ran­
dom  pair  will  have  at  least  one  cookie  in  common  is  85%. 
The corresponding probability for the top 100 is 66%. 
Implications  of “promiscuous  cookies” for  surveil­
lance.  From  the  Snowden  leaks,  we  learnt  that  that  NSA 
“piggybacks” on advertising cookies for surveillance and ex­
ploitation  of  targets  [56,  54,  18].  How  eﬀective  can  this 
technique  be?  We  present  one  answer  to  this  question.  We 
consider  a  threat  model  where  a  surveillance  agency  has 
identiﬁed a target by a third-party cookie (for example, via 
leakage of identiﬁers by ﬁrst parties, as described in [14, 23, 
25]).  The  adversary  uses  this  identiﬁer  to  coerce  or  com­
promise a third party into enabling surveillance or targeted 
exploitation. 
We ﬁnd that some cookies get synced over and over again 
to  dozens  of  third  parties;  we  call  these  promiscuous  cook­
ies.  It  is  not  yet  clear  to  us  why  these  cookies  are  synced 
repeatedly  and  shared  widely.  This  means  that  if  the  ad­
versary  has  identiﬁed  a  user  by  such  a  cookie,  their  ability 
to  surveil  or  target  malware  to  that  user  will  be  especially 
good.  The  most  promiscuous  cookie  that  we  found  belongs 
to the domain adverticum.net; it is synced or leaked to 82 
other parties which are collectively present on 752 of the top 
1,000 websites!  In fact, each of the top 10 most promiscuous 
cookies is shared with enough third parties to cover 60% or 
more of the top 1,000 sites. 
6.	  FINGERPRINTING: A 1-MILLION SITE 
VIEW 
OpenWPM  signiﬁcantly  reduces  the  engineering  require­
ment  of  measuring  device  ﬁngerprinting,  making  it  easy  to 
update  old  measurements  and  discover  new  techniques.  In 
this  section,  we  demonstrate  this  through  several  new  ﬁn­
gerprinting  measurements,  two  of  which  have  never  been 
measured at scale before, to the best of our knowledge.  We 
show  how  the  number  of  sites  on  which  font  ﬁngerprinting 
is used and the number of third parties using canvas ﬁnger­
printing have both increased by considerably in the past few 
years.  We  also  show  how  WebRTC’s  ability  to  discover  lo­
cal IPs without user permission or interaction is used almost 
exclusively  to  track  users.  We  analyze  a  new  ﬁngerprinting 
technique  utilizing  AudioContext  found  during  our  investi­
gations.  Finally,  we  discuss  the  use  of  the  Battery  API  by 
two ﬁngerprinting scripts. 
Our ﬁngerprinting measurement methodology utilizes data 
collected by the Javascript instrumentation described in Sec­
tion  3.2.  With  this  instrumentation,  we  monitor  access  to 
all  built-in  interfaces  and  objects  we  suspect  may  be  used 
for ﬁngerprinting.  By monitoring on the interface or object 
level,  we  are  able  to  record  access  to  all  method  calls  and 
property  accesses  for  each  interface  we  thought  might  be 
useful for ﬁngerprinting.  This allows us to build a detection 
criterion  for  each  ﬁngerprinting  technique  after  a  detailed 
analysis of example scripts. 
Although  our  detection  criteria  currently  have  negligible 
low false positive rate, we recognize that this may change as 
new web technologies and applications emerge.  However, in­
strumenting all properties and methods of an API provides 
a complete picture of each application’s use of the interface, 
allowing our criteria to also be updated.  More importantly, 
this allows us to replace our detection criteria with machine 
learning, which is an area of ongoing work (Section 7). 
%  of  First-parties 
Rank  Interval  Canvas  Canvas  Font  WebRTC 
[0, 1K) 
[1K, 10K) 
[10K, 100K) 
[100K, 1M) 
5.10% 
3.91% 
2.45% 
1.31% 
2.50% 
1.98% 
0.86% 
0.25% 
0.60% 
0.42% 
0.19% 
0.06% 
Table  6:  Prevalence  of  ﬁngerprinting  scripts  on  diﬀerent 
slices of the top sites.  More popular sites are more likely to 
have ﬁngerprinting scripts. 
6.1  Canvas Fingerprinting 
Privacy  threat.  The  HTML  Canvas  allows  web  appli­
cation to draw graphics in real time, with functions to sup­
port  drawing  shapes,  arcs,  and  text  to  a  custom  canvas  el­
ement.  In  2012  Mowery  and  Schacham  demonstrated  how 
the HTML Canvas could be used to ﬁngerprint devices [37]. 
Diﬀerences  in  font  rendering,  smoothing,  anti-aliasing,  as 
well  as  other  device  features  cause  devices  to  draw  the  im­
age  diﬀerently.  This  allows  the  resulting  pixels  to  be  used 
as part of a device ﬁngerprint. 
Detection  methodology.  We build on a 2014 measure­
ment  study  by  Acar  et.al.  [1].  Since  that  study,  the  canvas 
API  has  received  broader  adoption  for  non-ﬁngerprinting 
purposes,  so  we  make  several  changes  to  reduce  false  pos­
itives.  In  our  measurements  we  record  access  to  nearly  all 
of properties and methods of the HTMLCanvasElement 
interface and of the CanvasRenderingContext2D 
interface.  We  ﬁlter  scripts  according  to  the  following  cri­
teria: 
1.	 The  canvas element’s  height and  width properties must 
not be set below 16 px.12 
2.	 Text  must  be  written  to  canvas  with  least  two  colors  or 
at least 10 distinct characters. 
3.	 The  script  should  not  call  the  save,  restore,  or  addE­
ventListener methods of the rendering context. 
4.	 The  script  extracts  an  image  with  toDataURL  or  with  a 
single call to  getImageData that speciﬁes an area with a 
minimum size of 16px × 16px. 
This  heuristic  is  designed  to  ﬁlter  out  scripts  which  are 
unlikely  to  have  suﬃcient  complexity  or  size  to  act  as  an 
identiﬁer.  We  manually  veriﬁed  the  accuracy  of  our  detec­
tion  methodology  by  inspecting  the  images  drawn  and  the 
source  code.  We  found  a  mere  4  false  positives  out  of  3493 
scripts  identiﬁed  on  a  1  million  site  measurement.  Each  of 
the 4 is only present on a single ﬁrst-party. 
Results.  We found canvas ﬁngerprinting on 14,371 (1.6%) 
sites.  The vast majority (98.2%) are from third-party scripts. 
These scripts come from about 3,500 URLs hosted on about 
400 domains.  Table 7 shows the top 5 domains which serve 
canvas ﬁngerprinting scripts ordered by the number of ﬁrst-
parties they are present on. 
Domain 
doubleverify.com 
lijit.com 
alicdn.com 
audienceinsights.net 
boo-box.com 
407  others 
TOTAL 
#  First-parties 
7806 
2858 
904 
499 
303 
2719 
15089 (14371  unique) 
Table  7:  Canvas  ﬁngerprinting  on  the  Alexa  Top  1  Million 
sites.  For  a  more  complete  list  of  scripts,  see  Table  11  in 
the Appendix. 
Comparing our results with a 2014 study [1], we ﬁnd three 
important  trends.  First,  the  most  prominent  trackers  have 
by-and-large  stopped  using  it,  suggesting  that  the  public 
backlash  following  that  study  was  eﬀective.  Second,  the 
overall  number  of  domains  employing  it  has  increased  con­
siderably,  indicating  that  knowledge  of  the  technique  has 
spread  and  that  more  obscure  trackers  are  less  concerned 
about  public  perception.  As  the  technique  evolves,  the  im­
ages used have increased in variety and complexity, as we de­
tail in Figure 12 in the Appendix.  Third, the use has shifted 
from behavioral tracking to fraud detection, in line with the 
ad industry’s self-regulatory norm regarding acceptable uses 
of ﬁngerprinting. 
6.2  Canvas Font Fingerprinting 
Privacy  threat.  The  browser’s  font  list  is  very  useful 
for device ﬁngerprinting [12].  The ability to recover the list 
12The default canvas size is 300px × 150px. 
of  fonts  through  Javascript  or  Flash  is  known,  and  existing
tools aim to protect the user against scripts that do that [41,
2].  But can fonts be enumerated using the Canvas interface?
The only public discussion of the technique seems to be a Tor
Browser  ticket  from  201413 .  To  the  best  of  our  knowledge,
we are the ﬁrst to measure its usage in the wild.
Detection  methodology.  The  CanvasRenderingCon­
text2D interface provides a measureText method, which re­
turns  several  metrics  pertaining  to  the  text  size  (including
its  width)  when  rendered  with  the  current  font  settings  of
the  rendering  context.  Our  criterion  for  detecting  canvas
font  ﬁngerprinting  is:  the  script  sets  the  font  property  to
at least 50 distinct, valid values and also calls the measure-
Text method at least 50 times on the same text string.  We
manually examined the source code of each script found this
way and veriﬁed that there are zero false positives on our 1
million site measurement.
Results.  We found canvas-based font ﬁngerprinting present 
on  3,250  ﬁrst-party  sites.  This  represents  less  than  1%  of 
sites,  but  as  Table  6  shows,  the  technique  is  more  heavily 
used on the top sites, reaching 2.5% of the top 1000. 
The  vast  majority  of  cases  (90%)  are  served  by  a  single 
third  party,  mathtag.com.  The  number  of  sites  with  font 
ﬁngerprinting  represents  a  seven-fold  increase  over  a  2013 
study  [2],  although  they  did  not  consider  Canvas.  See  Ta­
ble 12 in the Appendix for a full list of scripts. 
6.3  WebRTC-based ﬁngerprinting 
Privacy  threat.  WebRTC  is  a  framework  for  peer-to­
peer  Real  Time  Communication  in  the  browser,  and  acces­