### Key Findings on Third-Party Cookie Blocking

An interesting observation is that when third-party cookie blocking is enabled, the average number of third parties per site decreases from 17.7 to 12.6. Our working hypothesis for this reduction is that, without ID cookies, third parties reduce certain tracking-related requests, such as cookie syncing (which we discuss in Section 5.6).

**Figure 7: Fraction of Third Parties Blocked by Ghostery as a Function of Prominence**

As previously defined, a third party's prominence is the sum of the inverse ranks of the sites it appears on.

### Effectiveness of Ghostery

We also evaluated Ghostery and found it to be effective in reducing the number of third parties and ID cookies (see Figure 11 in the Appendix). The average number of third-party includes dropped from 17.7 to 3.3, with only 0.3 having third-party cookies (0.1 with IDs). Upon examining the prominent third parties that were not blocked, we found that almost all of them are content-delivery networks like Cloudflare or widgets like Google Maps, which Ghostery does not aim to block. Thus, Ghostery effectively achieves its stated objectives.

However, the tool is less effective for less prominent trackers (prominence < 0.1). In Section 6.6, we show that less prominent fingerprinting scripts are not blocked as frequently by blocking tools. This is understandable given that the block list is manually compiled, and developers are less likely to have encountered obscure trackers. This suggests that large-scale measurement techniques like ours will be useful for tool developers to minimize gaps in their coverage.

### Prevalence of Cookie Syncing

**5.6 How Common is Cookie Syncing?**

Cookie syncing, a workaround to the Same-Origin Policy, allows different trackers to share user identifiers with each other. Besides being hard to detect, cookie syncing enables back-end server-to-server data merges hidden from public view, making it a significant privacy concern.

Our ID cookie detection methodology (Section 4) allows us to detect instances of cookie syncing. If tracker A wants to share its ID for a user with tracker B, it can do so in one of two ways: embedding the ID in the request URL to tracker B, or in the referer URL. We therefore look for instances of IDs in referer, request, and response URLs, accounting for URL encoding and other subtleties. Full details of our methodology are provided in the Appendix (Section 13.3), with the important caveat that our methodology captures both intentional and accidental ID sharing.

**Most Third Parties Engage in Cookie Syncing**

We ran our analysis on the top 100,000 stateful measurements. The most prolific cookie-syncing third party is doubleclick.net, which shares 108 different cookies with 118 other third parties (this includes both events where it is a referer and where it is a receiver). Details of the top cookie-syncing parties are presented in Appendix 13.3.

More interestingly, we find that the vast majority of top third parties sync cookies with at least one other party: 45 of the top 50, 85 of the top 100, 157 of the top 200, and 460 of the top 1,000. This adds further evidence that cookie syncing is an under-researched privacy concern.

**High Connectivity Among Third Parties via Synced Cookies**

Specifically, among the top 50 third parties involved in cookie syncing, the probability that a random pair will have at least one cookie in common is 85%. For the top 100, this probability is 66%.

**Implications of "Promiscuous Cookies" for Surveillance**

From the Snowden leaks, we learned that the NSA "piggybacks" on advertising cookies for surveillance and exploitation of targets [56, 54, 18]. How effective can this technique be? We present one answer to this question. We consider a threat model where a surveillance agency has identified a target by a third-party cookie (for example, via leakage of identifiers by first parties, as described in [14, 23, 25]). The adversary uses this identifier to coerce or compromise a third party into enabling surveillance or targeted exploitation.

We find that some cookies get synced over and over again to dozens of third parties; we call these promiscuous cookies. It is not yet clear to us why these cookies are synced repeatedly and shared widely. This means that if the adversary has identified a user by such a cookie, their ability to surveil or target malware to that user will be especially good. The most promiscuous cookie we found belongs to the domain adverticum.net; it is synced or leaked to 82 other parties, which are collectively present on 752 of the top 1,000 websites! In fact, each of the top 10 most promiscuous cookies is shared with enough third parties to cover 60% or more of the top 1,000 sites.

### Fingerprinting: A 1-Million Site View

OpenWPM significantly reduces the engineering requirement of measuring device fingerprinting, making it easy to update old measurements and discover new techniques. In this section, we demonstrate this through several new fingerprinting measurements, two of which, to the best of our knowledge, have never been measured at scale before. We show how the number of sites using font fingerprinting and the number of third parties using canvas fingerprinting have increased considerably in the past few years. We also show how WebRTC’s ability to discover local IPs without user permission or interaction is used almost exclusively to track users. We analyze a new fingerprinting technique utilizing AudioContext found during our investigations. Finally, we discuss the use of the Battery API by two fingerprinting scripts.

**Fingerprinting Measurement Methodology**

Our fingerprinting measurement methodology utilizes data collected by the JavaScript instrumentation described in Section 3.2. With this instrumentation, we monitor access to all built-in interfaces and objects we suspect may be used for fingerprinting. By monitoring at the interface or object level, we are able to record access to all method calls and property accesses for each interface we thought might be useful for fingerprinting. This allows us to build a detection criterion for each fingerprinting technique after a detailed analysis of example scripts.

Although our detection criteria currently have a negligible low false positive rate, we recognize that this may change as new web technologies and applications emerge. However, instrumenting all properties and methods of an API provides a complete picture of each application’s use of the interface, allowing our criteria to be updated. More importantly, this allows us to replace our detection criteria with machine learning, which is an area of ongoing work (Section 7).

**Prevalence of Fingerprinting Scripts on Different Slices of Top Sites**

| Rank Interval | Canvas Fingerprinting | Font Fingerprinting | WebRTC |
|---------------|-----------------------|---------------------|---------|
| [0, 1K)       | 5.10%                 | 2.50%               | 0.60%   |
| [1K, 10K)     | 3.91%                 | 1.98%               | 0.42%   |
| [10K, 100K)   | 2.45%                 | 0.86%               | 0.19%   |
| [100K, 1M)    | 1.31%                 | 0.25%               | 0.06%   |

**Table 6: Prevalence of fingerprinting scripts on different slices of the top sites. More popular sites are more likely to have fingerprinting scripts.**

### Canvas Fingerprinting

**Privacy Threat**

The HTML Canvas allows web applications to draw graphics in real time, with functions to support drawing shapes, arcs, and text to a custom canvas element. In 2012, Mowery and Schacham demonstrated how the HTML Canvas could be used to fingerprint devices [37]. Differences in font rendering, smoothing, anti-aliasing, and other device features cause devices to draw the image differently, allowing the resulting pixels to be used as part of a device fingerprint.

**Detection Methodology**

We build on a 2014 measurement study by Acar et al. [1]. Since that study, the canvas API has received broader adoption for non-fingerprinting purposes, so we make several changes to reduce false positives. In our measurements, we record access to nearly all properties and methods of the HTMLCanvasElement interface and the CanvasRenderingContext2D interface. We filter scripts according to the following criteria:

1. The canvas element’s height and width properties must not be set below 16 px.
2. Text must be written to the canvas with at least two colors or at least 10 distinct characters.
3. The script should not call the save, restore, or addEventListener methods of the rendering context.
4. The script extracts an image with toDataURL or with a single call to getImageData that specifies an area with a minimum size of 16px × 16px.

This heuristic is designed to filter out scripts unlikely to have sufficient complexity or size to act as an identifier. We manually verified the accuracy of our detection methodology by inspecting the images drawn and the source code. We found only 4 false positives out of 3,493 scripts identified on a 1 million site measurement. Each of the 4 is only present on a single first-party.

**Results**

We found canvas fingerprinting on 14,371 (1.6%) sites. The vast majority (98.2%) are from third-party scripts. These scripts come from about 3,500 URLs hosted on about 400 domains. Table 7 shows the top 5 domains which serve canvas fingerprinting scripts ordered by the number of first-parties they are present on.

| Domain                | # First-parties |
|-----------------------|-----------------|
| doubleverify.com      | 7,806           |
| lijit.com             | 2,858           |
| alicdn.com            | 904             |
| audienceinsights.net  | 499             |
| boo-box.com           | 303             |
| 407 others            | 2,719           |
| **TOTAL**             | 15,089 (14,371 unique) |

**Table 7: Canvas fingerprinting on the Alexa Top 1 Million sites. For a more complete list of scripts, see Table 11 in the Appendix.**

Comparing our results with a 2014 study [1], we find three important trends. First, the most prominent trackers have largely stopped using it, suggesting that the public backlash following that study was effective. Second, the overall number of domains employing it has increased considerably, indicating that knowledge of the technique has spread and that more obscure trackers are less concerned about public perception. As the technique evolves, the images used have increased in variety and complexity, as detailed in Figure 12 in the Appendix. Third, the use has shifted from behavioral tracking to fraud detection, in line with the ad industry’s self-regulatory norm regarding acceptable uses of fingerprinting.

### Canvas Font Fingerprinting

**Privacy Threat**

The browser’s font list is very useful for device fingerprinting [12]. The ability to recover the list of fonts through JavaScript or Flash is known, and existing tools aim to protect the user against scripts that do that [41, 2]. But can fonts be enumerated using the Canvas interface? The only public discussion of the technique seems to be a Tor Browser ticket from 2014 [13]. To the best of our knowledge, we are the first to measure its usage in the wild.

**Detection Methodology**

The CanvasRenderingContext2D interface provides a measureText method, which returns several metrics pertaining to the text size (including its width) when rendered with the current font settings of the rendering context. Our criterion for detecting canvas font fingerprinting is: the script sets the font property to at least 50 distinct, valid values and also calls the measureText method at least 50 times on the same text string. We manually examined the source code of each script found this way and verified that there are zero false positives on our 1 million site measurement.

**Results**

We found canvas-based font fingerprinting present on 3,250 first-party sites. This represents less than 1% of sites, but as Table 6 shows, the technique is more heavily used on the top sites, reaching 2.5% of the top 1,000.

The vast majority of cases (90%) are served by a single third party, mathtag.com. The number of sites with font fingerprinting represents a seven-fold increase over a 2013 study [2], although they did not consider Canvas. See Table 12 in the Appendix for a full list of scripts.

### WebRTC-based Fingerprinting

**Privacy Threat**

WebRTC is a framework for peer-to-peer Real-Time Communication in the browser, and access to the RTCPeerConnection and RTCDataChannel interfaces allows for the discovery of local IP addresses without user permission or interaction. This capability is used almost exclusively to track users.