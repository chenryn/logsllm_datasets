Question: Consider the following code snippet that is intended to create a null-terminated string and print its contents:

char *foo;
int counter;
foo = calloc(sizeof(char) * 10);
for (counter = 0; counter != 10; counter++) {
    foo[counter] = 'a';
    printf("%s\n", foo);
}

What could be a potential consequence if the loop condition is mistakenly changed to 'counter < 10'?
"A": "The printf() function will print the string 'foo' correctly without any issues.",
"B": "The string 'foo' will not be null-terminated, potentially leading to a buffer overflow when printed.",
"C": "The loop will terminate prematurely, resulting in fewer than 9 'a' characters in the string.",
"D": "An infinite loop will occur, as the loop condition will never evaluate to false."
Answer: B