# 【技术分享】Lua程序逆向之Luajit文件格式
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
作者：[非虫](http://bobao.360.cn/member/contribute?uid=2669205776)
预估稿费：1200RMB
**（本篇文章享受双倍稿费 活动链接请**[ **点击此处**](http://bobao.360.cn/news/detail/4370.html)
**）**
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**传送门**
[**【技术分享】Lua程序逆向之Luac文件格式分析**](http://bobao.360.cn/learning/detail/4534.html)
[**【技术分享】Lua程序逆向之Luac字节码与反汇编**](http://bobao.360.cn/learning/detail/4715.html)
**  
**
**Luajit简介**
Luajit将原生Lua进行了扩展，使它支持JIT方式编译运行，比起原生Lua程序，它有着如下特点：
**JIT即时编译器让执行效率更高。**
**它同时兼容传统的AOT编译。**
**全新设计的Luajit字节码文件格式，更加高效与更强的调试支持。（这一点在后面会着重介绍）**
**全新的Lua指令集。引入了中间表示IR，以及编译引擎支持不同平台的处理器指令即时编译，完全的符合现代化编译器设计，是编译理论学习的绝佳好资料。**
**Luajit在游戏软件中应用广泛，学习Lua程序逆向，就避免不了与Luajit打交道。**
下面，我们以最基本的Luajit文件格式开始，逐步深入的学习Lua程序的逆向基本知识。
**安装Luajit**
Luajit是开源的，它的项目地址是： 。任何人都可以从网络上下载编译并安装它。
目前，最新正式版本的Luajit为2.0.5版，Beta版本为2.1.0-beta3版，官方还在缓慢的更新中。正式版本的Luajit只只兼容Lua的5.1版本，5.2版本的Lua正在添加支持中。这里重点讨论Luajit2.0.5正式版本。
笔者研究Luajit使用的操作系统是macOS，通过Homebrew软件包管理工具，可以执行如下的命令进行快速的安装：
    $ brew install luajit
安装完成后，它的目录结构如下所示：
    $ tree /usr/local/opt/luajit
    /usr/local/opt/luajit
    ├── COPYRIGHT
    ├── INSTALL_RECEIPT.json
    ├── README
    ├── bin
    │   ├── luajit -> luajit-2.0.5
    │   └── luajit-2.0.5
    ├── include
    │   └── luajit-2.0
    │       ├── lauxlib.h
    │       ├── lua.h
    │       ├── lua.hpp
    │       ├── luaconf.h
    │       ├── luajit.h
    │       └── lualib.h
    ├── lib
    │   ├── libluajit-5.1.2.0.5.dylib
    │   ├── libluajit-5.1.2.dylib -> libluajit-5.1.2.0.5.dylib
    │   ├── libluajit-5.1.a
    │   ├── libluajit-5.1.dylib -> libluajit-5.1.2.0.5.dylib
    │   ├── libluajit.a -> libluajit-5.1.a
    │   ├── libluajit.dylib -> libluajit-5.1.dylib
    │   └── pkgconfig
    │       └── luajit.pc
    └── share
        ├── luajit-2.0.5
        │   └── jit
        │       ├── bc.lua
        │       ├── bcsave.lua
        │       ├── dis_arm.lua
        │       ├── dis_mips.lua
        │       ├── dis_mipsel.lua
        │       ├── dis_ppc.lua
        │       ├── dis_x64.lua
        │       ├── dis_x86.lua
        │       ├── dump.lua
        │       ├── v.lua
        │       └── vmdef.lua
        └── man
            └── man1
                └── luajit.1
    10 directories, 30 files
安装目录下的luajit程序是指向luajit-2.0.5程序的软链接，它是Luajit的主程序，与Lua官方的lua程序一样，它是Luajit程序的解释器，不同的是，它没有与luac编译器对应的Luajitc，Luajit同时负责了Lua文件编译为Luajit字节码文件的编译工作。include目录下存放的是Luajit的头文件，可以编译C/C程序与Luajit进行交互。lib目录为链接C/C程序用到的库文件。share/luajit-2.0.5/jit目录下的lua文件是Luajit提供的扩展模块，可以用来反汇编与Dump输出Luajit字节码文件的指令信息，在学习Luajit字节码指令格式时，这些工具非常有用。man目录下提供了Luajit的man帮助信息，即终端中执行man
luajit显示的帮助内容。
**编译生成Luajit文件**
编写hello.lua文件，内容如下：
    function add(x, y)
    return x+y;
    end
    function showinfo()
    print("welcome to lua world ")
    end
    function showstr(str)
    print("The string you input is " .. str)
    end
    local i = 6;
    return 1;
这段代码包含了三个函数、一个局部变量，一条返回语句。使用luajit的-b参数即可生成hello.luajit文件，命令如下所示：
    $ luajit -b ./hello.lua ./hello.luajit
上面命令生成的hello.luajit文件不包含调试信息，luajit默认编译参数中有一个-s参数，作用是去除luajit文件中的调试信息。调度信息中，包含了原Lua源文件中的行号与变量本等信息，如果想要保留这些信息，可以加上-g参数。执行如下命令，可以生成带调试信息的hello_debug.luajit文件：
    $ luajit -bg ./hello.lua ./hello_debug.luajit
**Luajit文件格式**
**Luajit官方并没有直接给出Luajit字节码文件的格式文档。**
但可以通过阅读Luajit源码中加载与生成Luajit字节码文件的函数，来单步跟踪分析出它的文件格式，这两个方法分别是 **lj_bcread()** 与
**lj_bcwrite()** 。
从这两个函数调用的bcread_header()、bcread_proto()、bcwrite_header()、bcwrite_proto()等子函数名可以初步了解到，
**Luajit字节码文件与Luac一样，将文件格式分为头部分信息Header与函数信息Proto两部分**
。具体的内容细节则需要使用gdb或lldb等工具调试分析得出。
Luajit字节码文件的Header部分为了与Luac命名上保持一致，这里将其描述为GlobalHeader，它的定义如下：
    typedef struct {
        char signature[3];
        uchar version;
        GlobalHeaderFlags flags;
        if (!is_stripped) {
            uleb128 length;
            char chunkname[uleb128_value(length)];
        }
    } GlobalHeader;
第一个signature字段是Luajit文件的Magic Number，它占用三个字节，定义分别如下：
    /* Bytecode dump header. */
    #define BCDUMP_HEAD10x1b
    #define BCDUMP_HEAD20x4c
    #define BCDUMP_HEAD30x4a
    即Luajit字节码文件的头三个字节必须为“x1bLJ”。version字段为Luajit的版本号，目前它的值为1。第三个字段flags描述了该文件的一组标志位集合，它们的取值可以为这些值的组合：
    typedef enum {
        FLAG_IS_BIG_ENDIAN = 0b00000001,
        FLAG_IS_STRIPPED = 0b00000010,
        FLAG_HAS_FFI = 0b00000100
    } FLAG;
**FLAG_IS_BIG_ENDIAN** 标识了该Luajit文件是采用大端字节序还是小端字节序、 **FLAG_IS_STRIPPED**
标识该Luajit文件是否去除了调试信息、 **FLAG_HAS_FFI**
标识是否包含FFI信息。flags字段使用的数据类型为uleb128，占用的字节码与数据的实际大小相关。
uleb128是一种常见的压缩形式的数据存储方式，如果了解Android
DEX文件格式的话，对它应该不会陌生。它最长采用5个字节表示数据的大小，最少采用1个字节表示数据的大小，具体采用的位数，可以通过判断每字节的最高位是否为1，为1则使用下一字节的数据，如果使用010
Editor模板语法表示，则它的数据类型定义如下：
    typedef struct {
        ubyte val ;
        if(val > 0x7f) {
            ubyte val ;
            if (val > 0x7f) {
                ubyte val ;
                if(val > 0x7f) {
                    ubyte val ;
                    if(val > 0x7f) {
                        ubyte val ;
                    }
                }
            }
        }
    } uleb128;
读取uleb128表示的数据大小的方法如下：
    uint uleb128_value(uleb128 &u) {
        local uint result;
        local ubyte cur;
        result = u.val[0];
        if(result > 0x7f) {
            cur = u.val[1];
            result = (result & 0x7f) | (uint)((cur & 0x7f) << 7);