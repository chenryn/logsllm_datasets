title:Efficient audit-based compliance for relational data retention
author:Ragib Hasan and
Marianne Winslett
Efﬁcient Audit-based Compliance for
Relational Data Retention
Ragib Hasan
Johns Hopkins University
3400 N Charles Street
Baltimore, MD 21218
PI:EMAIL
Marianne Winslett
University of Illinois at Urbana-Champaign
201 N Goodwin Avenue
Urbana, Illinois 61801
PI:EMAIL
ABSTRACT
The Sarbanes-Oxley Act inspired research on long-term high-integrity
retention of business records, leveraging the immutability guaran-
tees that WORM storage servers offer for ﬁles. In this paper, we
present the transaction log on WORM (TLOW) approach for support-
ing long-term immutability for relational tuples. TLOW stores the
transaction log on WORM and uses an audit helper (AH) add-on to
continuously perform audit-related activities without compromising
transaction performance or audit trustworthiness. TLOW imposes
only 1-11% runtime overhead on TPC-C transactions, much less
than previously proposed approaches, and does not require DBMS
kernel changes. TLOW audits are extremely fast, e.g., two hours
to audit a year of continuous TPC-C activity, versus 10 days for
previously proposed approaches. This opens up the possibility of
real-time internal audits that can detect fraudulent activity before its
effects propagate throughout an enterprise. We also provide a proof
of correctness for TLOW, which exposes a subtle threat that affects
the correctness of previously proposed approaches.
Categories and Subject Descriptors
H.2.0 [Database Management]: General—Security, integrity, and
protection
General Terms
Security
Keywords
Audit, Forensics, Regulatory Compliance
1.
INTRODUCTION
The drumbeat of ﬁnancial accounting scandals, from ENRON
in 2000 to Satyam Infotech in 2008, has prompted the introduc-
tion of regulations intended to guarantee the integrity of business
records. For example, Wall Street ﬁrms are subject to Securities
and Exchange Commission Rule 17a-4, and all medium and large
US public companies are subject to the Sarbanes-Oxley Act [4,
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS ’11, March 22–24, 2011, Hong Kong, China.
Copyright 2011 ACM 978-1-4503-0564-8/11/03 ...$10.00.
238
19]. These regulations are intended to ensure the preservation of
immutable copies of all business email, spreadsheets, and reports
during a multi-year mandatory retention period. The penalties for
non-compliance include hefty ﬁnes and potential jail terms.
To help companies comply with these regulations, all major s-
torage vendors (IBM, EMC, NetApps, etc.) sell so-called WORM
storage servers, which support a version of write-once-read-many
semantics for ﬁles. On such devices, ﬁles are term-immutable; that
is, once they are committed to the device, they are read-only for the
duration of a predeclared retention period. The WORM semantics
guarantee that during its retention period, not even an insider with
system administrator privileges can delete or alter a ﬁle, shorten its
retention period, or otherwise tamper with a WORM volume once it
has been set up, short of physical attack. To ensure trustworthiness,
WORM storage servers run their own ﬁle server code, do not run
any user programs, have tamper-resistant clocks, and provide only
a very narrow API for users and administrators. All medium and
large US public companies use WORM storage servers to help them
comply with the Sarbanes-Oxley Act; they are the gold standard for
term-immutable ﬁle storage. Further, they cost approximately the
same amount as ordinary storage servers, which is very important:
the high cost of retaining all business records for many years in a
tamper-evident manner must be balanced against the beneﬁt to soci-
ety of increased accuracy in ﬁnancial reporting and accountability
for inaccuracies. Thus we would like to leverage WORM storage
servers as the trusted computing base for supporting term-immutable
relational tuples. However, because they support term-immutability
only for entire ﬁles, WORM storage servers are not directly useful
for providing term-immutability for ﬁne-grained data such as tuples.
It would be impractical to provide term-immutability by making
every tuple a separate ﬁle, making a new copy of the database ﬁle
on every update, or moving the DBMS functionality into the WOR-
M storage server [16]. A DBMS that supports term-immutability
must consist of untrusted code that communicates with the (trusted)
WORM storage server over as narrow an interface as possible.
Recently, researchers have proposed a scheme for supporting
term-immutability in databases [16]. This approach, called the
log-consistent DBMS architecture (LDA), uses a transaction-time
database (DB) to turn every tuple insert, delete, and update request
into the creation of a new version of the tuple. LDA stores a DB
snapshot on WORM at audit time, and keeps several other ﬁles
on WORM: the tail of the current transaction log, the tail of the
transaction log at the time of each crash since the last audit, and a
“compliance” log ﬁle that records all DB changes since the last audit.
The compliance log, the snapshot, and the transaction log tails are
used at the next audit to check for tampered content in the current
DB. Depending on the implementation, LDA may require small
changes in the DBMS kernel. LDA has a small window of vulnera-
bility (e.g., 5 minutes) between the time that a transaction commits
and when its writes become term-immutable. LDA’s performance
overhead is relatively high: 10-20% decrease in TPC-C transaction
throughput, depending on security guarantees; plus 2 weeks of time
on dedicated hardware to audit a year of TPC-C activity.
The contributions of this paper are:
1. We introduce the transaction log on WORM (TLOW) archi-
tecture, a simpler and much more efﬁcient approach to sup-
porting term-immutable tuples, with no changes to the DBMS
kernel. TLOW stores on WORM only the transaction log and
the DB snapshot from the last audit.
2. We show that TLOW imposes 1-11% overhead in TPC-C
transaction throughput (depending on the exact security guar-
antees), while at the same time reducing LDA’s window of vul-
nerability by a factor of 5. For identical security guarantees,
TLOW outperforms LDA by 10% in the TPC-C benchmark.
3. We prove the correctness of TLOW. The proof illustrates a
number of subtle threats, as well as a correctness problem
with LDA that we show how to ﬁx.
4. We introduce the TLOW audit helper (AH), which reduces the
cost of audits 100-fold (compared to LDA). This enables en-
terprises to perform frequent internal audits, without compro-
mising the performance of their production workload. With
early detection of fraudulent activity, corrections can be made
before the effects of the fraud have propagated very far.
5. We show how to support forensic investigations.
The rest of the paper is organized as follows: we discuss the threat
model for long-term data retention in Section 2. We present the
TLOW architecture in Section 3 and prove its correctness in Section
4, followed by the audit helper in Section 5, and a forensic analysis
scheme in Section 6. We provide experimental results in Section 7,
discuss related work in Section 8, and conclude in Section 9.
2. THREAT MODEL
The Sarbanes-Oxley Act (SOX) seeks to ensure the detection of
activity contributing to fraudulent ﬁnancial reports [4]. In practice,
such activity involves the history forgery, usually centering around
tampering with revenues and expenditures for the previous ﬁnancial
reporting period. SOX and related regulations require the presence
and enforcement of organizational policies and procedures to ensure
that routine business records (including email, instant messages,
spreadsheets, reports, and more) are captured at the time they are
generated, and untampered software is used to process them. As
shown in Figure 1, once these records are captured, someone may
still try to tamper with them. For example, a CEO may order or
bribe a systems administrator to create phony purchase orders back-
dated to fall within the previous quarter, increase the quantities
on certain legitimate purchase orders, delete certain expenditure
records, and delete all email discussing the planning of the crime.
SOX and related regulations seek to ensure that such tampering
can be detected by a trusted auditor. When tampering is detected,
regulations require organizations to launch an investigation, with
potential prosecution of the guilty; thus adversaries want to perform
undetectable tampering. We discuss the ramiﬁcations of such threats
for relational data in the rest of this section.
2.1 Adversary model
We assume that an adversary Mala can tamper with any ﬁle (up
to the limits, if any, imposed by the servers where those ﬁles reside).
Since Mala may be a system administrator, she may be able to
assume any user’s identity and read, overwrite, append to, or delete
any ﬁle, including database data, indexes, logs, and metadata. She
239
Figure 1: History forgery threat parameters. The regret interval
is the minimum time interval between when a tuple is commit-
ted and when someone may wish to tamper with it. The query
validation interval is the time gap between querying and valida-
tion of the query results.
can change the database’s contents with a ﬁle editor, or by using
a non-compliant DBMS to overwrite the contents of the database.
She can crash the DBMS or storage server. She can tamper with
the execution environment, such as by tampering with the clock on
the DBMS or storage server (within limits discussed below), and
change any other environmental parameters.
2.2 Trust assumptions
Transaction integrity. Since Mala can take on anyone’s identity,
in theory she can impersonate the DBMS when talking to a storage
server, and append arbitrary material to the transaction log while
the DBMS is running, so that the log contents no longer faithfully
mirror the intent of the executing transactions. Such attacks cannot
be used to forge history, but they are clearly undesirable, and they
muddy the question of what a “correct” ﬁnal state is. We require
the DBMS and storage server to prevent such attacks on the current
transaction log ﬁle, while the DBMS is up. This transaction integri-
ty can be ensured by an appropriate combination of TPMs, mutual
authentication, a secure communication channel, and non-advisory
locking on the storage server side, so that only the DBMS can write
to the transaction log while the DBMS is up, and so that messages
between the DBMS and storage servers arrive promptly unless there
is a crash. While the DBMS is down, Mala can append arbitrary
material to the transaction log.
DBMS cache integrity. In theory, Mala can tamper with data re-
siding in the DBMS page cache. We require those attacks to be
prevented by installing kernel patches that keep processes, even
those owned by root, from getting read-write access to other pro-
cesses’ memory [14]. The only way to bypass such patches is to
replace the kernel and reboot the DBMS machine, which is hard to
carry out without being detected. These patches ensure that when a
new transaction arrives at the DBMS, it is correctly executed.
Trustworthy crash information. The auditor must have a trust-
worthy source of information about the time at the WORM server
when each crash or shutdown occurred since the previous audit, and
the time that normal transaction processing began or resumed. We
believe that this assumption is reasonable because the crash of a
production system will be a visible inconvenience at the application
layer. Applications can note the relevant times in an error log on
WORM. The auditor does not need to know the times of crashes
timeQueryRegretCommitRecordIntegrityCheckQuery Verification IntervalRegret IntervalBobAdversaryAliceAuditor(Trustworthy)(Trustworthy)(Bribed Superuser)(a) Transaction-log-on-WORM (TLOW) archi-
tecture
(b) Audit process
Figure 2: TLOW DBMS architecture and audit scheme. (a) TLOW architecture: the transaction log L resides on WORM storage,
along with a snapshot of the DB contents as of the last audit. The current DB contents reside on ordinary storage. (b) The auditor
uses L and the old snapshot to validate the current database state, then creates a new snapshot and discards the old one.
that occur during crash recovery; this is important, as such crashes
are not easily observable at the application layer.
WORM storage. We assume the presence of correctly operating
write-once-read-many or WORM storage servers. Such servers are
inexpensive and do raise the bar quite high for tampering. Mala can
log in as root on the WORM server and perform any action permitted
to her there. Since the server operates correctly and restricts root
activity, no action of hers will cause the WORM to overwrite or
delete unexpired ﬁles or to append to non-appendable ﬁles. We trust
that Mala cannot overcome the anti-tampering provisions of WORM
server clocks (e.g., NetApp’s SnapLock Compliance Clock [17]).
2.3 Threats
History forgery attack. The main threat we face in long-term data
retention is regret – i.e., where an adversary regrets the existence
of a tuple in the database (or the absence of a tuple), and therefore
launches a history forgery attack to undetectably remove or alter the
regretted tuple (or insert a backdated tuple). As discussed in [16],
the history forgery threat has two parameters. The regret interval is
the minimum time interval we can assume between when a tuple is
committed to the database and an adversary tries to tamper with it.
For post-hoc insertion of tuples (such as phony back-dated purchase
orders), the regret interval is the minimum time interval we can
assume between when a tuple was not committed to the database
and when an adversary tries to insert it with a back-dated start time.
The query veriﬁcation interval is the interval between the time a
transaction reads data and the time when we determine whether that
data had been tampered with.
In current legal interpretations of email compliance, the regret
interval is zero, meaning that email must be archived on WORM
before it is delivered to its recipient. In contrast, the current ac-
ceptable regret window for DB data is shockingly long: current
practice is to dump a snapshot of the database contents to WORM
periodically, making the regret interval at least a day long. Further,
the query veriﬁcation interval is inﬁnity.The audits do not guaran-
tee that transactions read only untampered data, or that the current
DB state is in any sense correct. LDA and TLOW both aim to
strengthen these guarantees without compromising production DB
performance, through new techniques that will allow fast audits. In
particular, a regret interval of a few seconds or minutes at the DBMS