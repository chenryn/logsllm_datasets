σ(h1 + h2x) mod r.
4. If c (cid:13)= c
(cid:2)
and stop.
output invalid and stop otherwise output valid
The reader may wonder how the veriﬁer obtains the value
of σ requested at step 3. This is simply achieved by mim-
icking the usual double-and-add algorithm and asking the
appropriate queries to the oracle. This yields σ(h1) and
σ(h2x). A ﬁnal call to the oracle completes the task.
A generic algorithm A can also perform forgery attacks
against a signature scheme. This is deﬁned by the ability
of A to return on input {σ(1), σ(x)} a triple {m, c, d} ∈ Γ3
for which the veriﬁer outputs valid. Here we assume that
both algorithms are performed at a stretch, keeping the same
encoding list.
To deal with adaptive attacks one endows A with another
oracle, called the signing oracle. To query this oracle, the
algorithm provides an element m ∈ Γ. The signing oracle
returns a valid signature {c, d} of m. Success of A is deﬁned
by its ability to produce a valid triple { ˜m, ˜c, ˜d}, such that
˜m has not been queried during the attack.
Such a forgery can be easily performed against this GDSA
scheme, even with just a passive attack: the adversary choos-
es random numbers h1 and h2, 1 ≤ h1, h2 < r and computes
c ← σ(h1 + h2x) mod r. Then it deﬁnes d = ch
−1
2 mod r,
−1 mod r, and eventually m = dh1 mod r. The triple
h = d
{m, c, d} ∈ Γ3 is therefore a valid one, unless c = 0, which
is very unlikely.
4. THE SECURITY OF TWIN GDSA
4.1 A Theoretical Result
The above deﬁnitions extend to the case of twin signa-
tures, by requesting the attacker A to output an m and two
distinct pairs {c, d} ∈ Γ2, {c
(cid:2)} ∈ Γ2. Success is granted
(cid:2)
as soon as the verifying algorithm outputs valid for both
triples1. We prove the following:
, d
Theorem 2. Let Γ be a standard cyclic group of prime
order r. Let S be a set of bit-string encodings of cardinality
at least r, included in the set of binary representations of
integers < tr, for some t. Let A be a generic algorithm over
Γ that makes at most n queries to the oracle. If x ∈ Γ and an
encoding σ are chosen at random, then the probability that
A returns a message m together with two distinct GDSA
signatures of m on input {σ(1), σ(x)} is O(tn2/r).
, d
Proof. We cover the non adaptive case and tackle the
more general case after the proof. We use the probabilistic
model developed in section 3.1. Let A be a generic attacker
able to forge some m and two distinct signatures {c, d} and
(cid:2)}. We assume that, once these outputs have been pro-
{c
(cid:2)
duced, A goes on checking both signatures; we estimate the
probability that both are valid.
We restrict our attention to behaviors of the full algorithm
corresponding to safe sequences {z1,··· , zn+2, y}. By this,
we discard a set of executions of probability O(n2/r). We
−1)X and Q be the
let P be the polynomial (md
(cid:2)−1
d
polynomial (md
−1) + (cd
)X.
(cid:2)−1
(cid:2)
) + (c
• We ﬁrst consider the case where either P or Q does
not appear in the Fi list before the signatures are pro-
duced. If this happens for P , then P is included in the
Fi list at signature veriﬁcation and the corresponding
answer of the oracle is a random number zi. Unless
zi = c mod r, which is true with probability at most
1using [14] the simultaneous square-and-multiply generation
or veriﬁcation of two DSA signatures is only 17% slower than
the generation or veriﬁcation of a single signature.
22t/r, the signature is invalid. A similar bound holds for
Q.
• We now assume that both P and Q appear in the Fi
list before A outputs its signatures. We let i denote the
ﬁrst index such that Fi = P and j the ﬁrst index such
that Fj = Q. Note that both Fi and Fj are unmarked
(as deﬁned in section 3.1). If i = j, then we obtain
(cid:2)−1
−1 = md
(cid:2)
−1 = c
that md
. From this, it
(cid:2)
follows that c = c
and the signatures are not
distinct.
(cid:2)
, d = d
(cid:2)−1
d
and cd
(cid:2)
• We are left with the case where i (cid:13)= j. We let Ωi,j,
i < j, be the set of safe sequences producing two sig-
natures such that the polynomials P , Q, deﬁned as
above appear for the ﬁrst time before the algorithm
outputs the signatures, as Fi and Fj. We consider a
ﬁxed value w for {z1,··· , zj−1} and let ˆw be the set
of safe sequences extending w. We note that Fi and
Fj are deﬁned from w and we write Fi = a + bX,
X. We claim that Ωi,j ∩ ˆw has proba-
Fj = a
bility ≤ t/r. To show this, observe that one of the
signatures that the algorithm outputs is necessarily of
the form {c, d}, with c = zi mod r, c = db mod r and
(cid:2)} and
m = da mod r. Now, the other signature is {c
(cid:2)
, d
(cid:2)−1
(cid:2)
mod r
= ma
since m is already deﬁned we get d
(cid:2)
mod r. This in turn deﬁnes zj mod r
and c
within a subset of at most t elements. From this, the
required bound follows and, from the bound, we infer
that the probability of Ωi,j is at most t/r.
= b
+ b
(cid:2)
(cid:2)
d
(cid:2)
Summing up, we have bounded the probability that a safe
sequence produces an execution of A outputting two valid
signatures by O(tn2/r). This ﬁnishes the proof.
In the proof, we considered the case of an attacker forg-
ing a message-signature pair from scratch. A more elab-
orate scenario corresponds to an attacker who can adap-
tively request twin signatures corresponding to messages of
his choice. In other words, the attacker interacts with the
legitimate signer by submitting messages selected by its pro-
gram.
We show how to modify the security proof that was just
given to cover the adaptive case. We assume that each time
it requests a signature the attacker A immediately veriﬁes
the received signature. We also assume that the veriﬁcation
algorithm is normalized in such a way that, when verifying
a signature {c, d} of a message m, it asks for σ((md
−1) +
−1)x) after a ﬁxed number of queries, say q. We now
(cd
explain how to simulate signature generation: as before,
we restrict our attention to behaviors of the algorithm cor-
responding to safe sequences {z1,··· , zn+2, y}. When the
(twin) signature of m is requested at a time of the compu-
tation when the encoding list contains i elements, one picks
zi+q and zi+2q and manufactures the two signatures as fol-
lows:
1. Let c ← zi+q mod r, pick d at random.
(cid:2) ← zi+2q mod r, pick d
(cid:2)
2. Let c
3. Output {c, d} and {c
(cid:2)
natures.
at random.
(cid:2)} as the ﬁrst and second sig-
, d
While verifying both signatures, A will receive the ele-
ments zi+q and zi+2q, as
−1
σ((md
−1
) + (cd
)x) and σ((md
(cid:2)−1
(cid:2)
) + (c
(cid:2)−1
d
)x)
respectively, unless Fi+q or Fi+2q appears earlier in the Fi
(cid:2)
list. Due to the randomness of d and d
, this happens with
very small probability bounded by n/r. Altogether, the sim-
ulation is spotted with probability O(n2/r) which does not
aﬀect the O(tn2/r) bound for the probability of successful
forgery.
4.2 Practical Meaning of the Result
We have shown that, in the setting of generic algorithms,
existential forgery against twin GDSA has a minute success
probability. Of course this does not tell anything on the se-
curity of actual twin DSA. Still, we believe that our proof has
some practical meaning. The analogy with hash functions
and the random oracle model [3] is inspiring: researchers
and practitioners are aware that proofs in the random ora-
cle model are not proofs but a mean to spot design ﬂaws and
validate schemes that are supported by such proofs. Still,
all standard signature schemes that have been proposed use
speciﬁc functions which are not random by deﬁnition; our
proofs seem to indicate that if existential forgery against
twin DSA is possible, it will require to dig into structural
properties of the encoding function. This is of some help for
the design of actual schemes: for example, the twin DSA de-
scribed in Appendix A allows signature with message recov-
ery without hashing and without any form of redundancy,
while keeping some form of provable security. This might be
considered a more attractive approach than [17] or [1], the
former being based on redundancy and the latter on random
oracles. We believe that twin DSA is even more convincing
in the setting of elliptic curves, where there are no known
ways of taking any advantage of the encoding function.
5. AN RSA-BASED TWINNING
IN THE STANDARD MODEL
The twin signature scheme described in this section be-
longs to the (very) short list of eﬃcient schemes provably se-
cure in the standard model: in the sequel, we show that pro-
ducing existential forgeries even under an adaptively chosen-
message attack is equivalent to solving the Flexible RSA
Problem [5].
Security in the standard model implies no ideal assump-
tions; in other words we directly reduce the Flexible RSA
Problem to a forgery. As a corollary, we present an eﬃcient
and provably secure signature scheme that does not require
any hash function.
Furthermore, the symmetry provided by twinning is much
simpler to analyze than Cramer-Shoup’s proposal [5] which
achieves a similar security level, and similar eﬃciency, with
a rather intricate proof.
5.1 Gennaro-Halevi-Rabin Signatures
In [8] Gennaro, Halevi and Rabin present the following
signature scheme: Let n be an (cid:28)-bit RSA modulus [19], H
n. The pair {n, y} is the signer’s
a hash-function and y ∈ Z
public key, whose secret key is the factorization of n.
(cid:12)
• To sign m, the signer hashes e ← H(m) (which is very
likely to be co-prime with ϕ(n)) and computes the e-th
23root of y modulo n using the factorization of n:
s ← y
1/e
mod n
• To verify a given {m, s}, the veriﬁer checks that
H(m)
s
mod n
?
= y.
Security relies on the Strong RSA Assumption. Indeed,
if H outputs elements that contain at least a new prime
factor, existential forgery is impossible. Accordingly, Gen-
naro et al. deﬁne a new property that H must satisfy to
yield secure signatures: division intractability. Division in-
tractability means that it is computationally impossible to
ﬁnd a1, . . . , ak and b such that H(b) divides the product of
all the H(ai). In [8], it is conjectured that such functions
exist and heuristic conversions from collision-resistant into
division-intractable functions are shown (see also [4]).
Still, security against adaptively chosen-message attacks
requires the hash function H to either behave like a random
oracle model or achieve the chameleon property [12]. This
latter property, for a hash function, provides a trapdoor
which helps to ﬁnd second preimages, even with some ﬁxed
(cid:1)
Indeed, some signatures can be pre-computed, but
part.
i ei mod
with speciﬁc exponents before outputting y: y = x