## 沉浸式学习PostgreSQL|PolarDB 13: 博客、网站按标签内容检索, 并按匹配度排序  
### 作者    
digoal    
### 日期    
2023-09-07    
### 标签    
PostgreSQL , PolarDB , 数据库 , 教学    
----    
## 背景    
欢迎数据库应用开发者参与贡献场景, 在此[issue](https://github.com/digoal/blog/issues/121)回复即可, 共同建设《沉浸式数据库学习教学素材库》, 帮助开发者用好数据库, 提升开发者职业竞争力, 同时为企业降本提效.    
- 系列课程的核心目标是教大家怎么用好数据库, 而不是怎么运维管理数据库、怎么开发数据库内核. 所以面向的对象是数据库的用户、应用开发者、应用架构师、数据库厂商的产品经理、售前售后专家等角色.    
本文的实验可以使用永久免费的阿里云[云起实验室](https://developer.aliyun.com/adc/scenario/f55dbfac77c0467a9d3cd95ff6697a31)来完成.    
如果你本地有docker环境也可以把镜像拉到本地来做实验:    
x86_64机器使用以下docker image:    
- [《amd64 image》](../202307/20230710_03.md)    
ARM机器使用以下docker image:    
- [《arm64 image》](../202308/20230814_02.md)    
## 业务场景1 介绍: 内容检索及匹配度排序     
在内容检索(例如网站的文章检索、搜索引擎的内容搜索)的场景中, 除了内容本身的匹配与否作为判断条件, 还有一个重要的需求是按匹配度、内容的新鲜度等进行排序返回, 匹配度越高|新鲜度|权重越高的优先返回.  
### 实现和对照      
场景1: 博客类网站, 设定了一些内容标签, 每篇文章在发表时需要给文章设定标签, 一篇文章可能会设定若干个标签. 同时文章发表时间越大表示越新鲜. 用户在浏览时, 选择某个标签, 按新鲜度顺序返回这个标签下的文章.  
场景2: 还是上面的场景, 但是每个文章对应的每个标签都设置一个权重, 表示这篇文章在这个标签上的匹配程度. 用户在浏览时, 选择某个标签, 按匹配度以及新鲜度顺序返回这个标签下的文章.   
场景3: 博客类网站, 按内容检索匹配的文章, 并按匹配度(rank)顺序返回文章.  
#### 传统方法 设计和实验       
传统数据库没有数组类型, 不支持一对多的数据结构存储.   
传统数据库没有文本向量类型, 不支持文本向量的全文检索和文本向量的匹配度排序.  
##### 场景1  
1、创建标签表  
```  
drop table if exists tbl_art_tag;  
drop table if exists tbl_tag;  
create table tbl_tag (  
  id int primary key,  -- 标签ID  
  info text  -- 标签内容  
);  
```  
2、写入1000个预设标签  
```  
insert into tbl_tag select generate_series(1,1000), md5(random()::text);   
```  
3、创建文章表, 记录每篇文章的每个标签.  
```  
drop table if exists tbl_art_tag;  
create unlogged table tbl_art_tag (  
  art_id int,  -- 文章ID  
  tid int references tbl_tag(id),  -- 标签ID  
  ts timestamp   -- 文章时间戳  
);  
```  
4、创建序列  
```  
drop sequence if exists seq;   
create sequence seq INCREMENT by 1;   
```  
5、编写pgbench脚本, 随机生成每篇文章的标签数量(1到1000个), 生成随机标签ID并写入到文章表中.  
```  
vi t1.sql  
\set tags random_gaussian(1, 1000, 2.5)   
select nextval('seq') as art_id \gset   
insert into tbl_art_tag select :art_id, ceil(random()*1000), now() from generate_series(1, :tags);   
```  
6、生成约1000万条数据.   
```  
pgbench -M prepared -n -r -P 1 -f ./t1.sql -c 10 -j 10 -t 2000  
```  
7、创建标签和时间戳字段索引  
```  
create index on tbl_art_tag (tid,ts);  
```  
8、用户在浏览时, 选择某个标签, 按新鲜度顺序返回这个标签下的top 100文章.  
```  
postgres=# explain analyze select art_id,ts from tbl_art_tag where tid=500 order by ts desc limit 100;   
                                                                     QUERY PLAN                                                                       
----------------------------------------------------------------------------------------------------------------------------------------------------  
 Limit  (cost=0.43..103.31 rows=100 width=12) (actual time=0.134..0.597 rows=100 loops=1)  
   ->  Index Scan using tbl_art_tag_tid_ts_idx on tbl_art_tag  (cost=0.43..10238.91 rows=9952 width=12) (actual time=0.131..0.575 rows=100 loops=1)  
         Index Cond: (tid = 500)  
 Planning Time: 0.441 ms  
 Execution Time: 0.689 ms  
(5 rows)  
```  
9、性能压测  
```  
vi t2.sql  
\set tid random(1,1000)   
select art_id,ts from tbl_art_tag where tid=:tid order by ts desc limit 100;   
```  
```  
pgbench -M prepared -n -r -P 1 -f ./t2.sql -c 10 -j 10 -T 120  
transaction type: ./t2.sql  
scaling factor: 1  
query mode: prepared  
number of clients: 10  
number of threads: 10  
duration: 120 s  
number of transactions actually processed: 9185044  
latency average = 0.131 ms  
latency stddev = 0.058 ms  
initial connection time = 21.476 ms  
tps = 76555.526245 (without initial connection time)  
statement latencies in milliseconds:  
         0.000  \set tid random(1,1000)   
         0.130  select art_id,ts from tbl_art_tag where tid=:tid order by ts desc limit 100;  
```  
10、搜索多个标签的文章, 并按时间返回.    
```  
postgres=# explain analyze select art_id,ts from tbl_art_tag where tid in ( 490,500 ) order by ts desc limit 100;   
                                                                      QUERY PLAN                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------  
 Limit  (cost=18800.31..18800.56 rows=100 width=12) (actual time=256.937..256.948 rows=100 loops=1)  
   ->  Sort  (cost=18800.31..18850.07 rows=19904 width=12) (actual time=256.928..256.932 rows=100 loops=1)  
         Sort Key: ts  
         Sort Method: top-N heapsort  Memory: 29kB  
         ->  Bitmap Heap Scan on tbl_art_tag  (cost=229.93..18039.59 rows=19904 width=12) (actual time=15.951..253.327 rows=20040 loops=1)  
               Recheck Cond: (tid = ANY ('{490,500}'::integer[]))  
               Heap Blocks: exact=16804  
               ->  Bitmap Index Scan on tbl_art_tag_tid_ts_idx  (cost=0.00..224.95 rows=19904 width=0) (actual time=12.534..12.534 rows=20040 loops=1)  
                     Index Cond: (tid = ANY ('{490,500}'::integer[]))  
 Planning Time: 2.119 ms  
 Execution Time: 257.157 ms  
(11 rows)  
```  
11、性能测试  
```  
vi t22.sql  
\set tid1 random(1,1000)   
\set tid2 random(1,1000)   
select art_id,ts from tbl_art_tag where tid in(:tid1,:tid2) order by ts desc limit 100;   
```  
```  
pgbench -M prepared -n -r -P 1 -f ./t22.sql -c 10 -j 10 -T 120  
transaction type: ./t22.sql  
scaling factor: 1  