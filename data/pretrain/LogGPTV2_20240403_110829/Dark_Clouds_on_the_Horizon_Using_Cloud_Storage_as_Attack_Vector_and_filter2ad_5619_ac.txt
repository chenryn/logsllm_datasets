Long term undelete: With the free account users
can undo ﬁle modiﬁcations or undelete ﬁles through
the webinterface from the last 30 days. With a so
called “Pro” account (where the users pay for additional
storage space and other features) undelete is available
for all ﬁles and all times. We uploaded 55 ﬁles in total
on October 7th 2010, 30 ﬁles in a shared folder with
another Dropbox account and 25 ﬁles in an unshared
folder. Until Dropbox ﬁxed the HTTPS download attack
at the end of April 2011, 100% have been constantly
available. More then 6 months after uploading, all ﬁles
were still retrievable, without exception.
Online slack: We uploaded 30 ﬁles of various sizes
without linking them to any account with the HTTPS
method at the beginning of January 2011. More then 4
weeks later, all ﬁles were still retrievable. When Drop-
box ﬁxed the HTTPS download attack in late April 2011,
50% of the ﬁles were still available. See Figure 4 for de-
tails.
5.3 Discussion
It surprised us that from every .torrent ﬁle, either the
.torrent,
the content or both could be retrieved from
8
Dropbox, especially considering that some of
the
.torrent ﬁles were only a few hours created before we
retrieved them. 97% means that Dropbox is heavily
used for storing ﬁles from ﬁlesharing networks.
It is
also interesting to note that some of the .torrent ﬁles
contained more content regarding storage space than
the free Dropbox account currently offers (2 gigabytes
at the time of writing). 11 out of the set of tested 107
.torrents contained more then 2 gigabytes as they were
DVD images, the biggest with 7.2 gigabytes in total size.
This means that whoever stored those ﬁles on Dropbox
has either a Dropbox Pro account (for which he or she
pays a monthly fee), or that he invited a lot of friends to
get additional storage space from the Dropbox referral
program.
However, we could only infer the existence of these
ﬁles. With the approach we used it is not possible to
quantify to what extent Dropbox is used for ﬁlesharing
among multiple users. Our results only show that within
the last three to six months at least one Bittorrent user
saved his downloads in Dropbox, respectively that since
the .torrent has been created. No conclusions can be
drawn as to whether they are saved in shared folders, or
if only one person or possibly thousands of people uses
Dropbox in that way. In fact, it is equally likely that a
single person uses Dropbox to store these ﬁles.
With our experiments regarding online slack space we
showed that it is very easy to hide data on Dropbox with
low accountability. It becomes rather trivial to get some
of the advanced features of Dropbox like unlimited un-
delete and versioning, without costs. Furthermore a ma-
licious user can upload ﬁles without linking them to his
account, resulting in possibly unlimited storage space
03.01.201117.01.201131.01.201114.02.201128.02.201114.03.201128.03.201111.04.201125.04.20110%10%20%30%40%50%60%70%80%90%100%while at the same time possibly causing problems in a
standard forensic examination. In an advanced setup, the
examinator might be confronted with a computer that has
no harddrive, booting from read only media such as a
Linux live CD and saving all ﬁles in online slack space.
No traces or local evidence would be extractable from the
computer [15], which will be an issue in future forensic
examinations. This is similar to using the private mode
in modern browsers which do not save information lo-
cally [8].
6 Keeping the cloud white
To ensure trust in cloud storage operators it is vital to not
only make sure that the untrusted cloud storage operator
keeps the ﬁles secure with regards to availability [25],
but also to ensure that the client cannot get attacked with
these services. We provide generic security recommen-
dations for all storage providers to prevent our attacks,
and propose changes to the communication protocol of
Dropbox to include data possession proofs that can be
precalculated on the cloud storage operato’rs side and
implemented efﬁciently as database lookups.
6.1 Basic security primitives
Our attacks are not only applicable to Dropbox, but
to all cloud storage services where a server-side data
deduplication scheme is used to prevent retransmission
of ﬁles that are already stored at the provider. Current
implementations are based on simple hashing. However,
the client software cannot be trusted to calculate the
hash value correctly and a stronger proof of ownership
is needed. This is a new security aspect of cloud
computing, as up till now mostly trust in the service
operator was an issue, and not the client.
To ensure that the client is in possession of a ﬁle, a
strong protocol for provable data possession is needed,
based on either cryptography or probabilistic proofs or
both. This can be done by using a recent provable data
possession algorithm such as [11], where the cloud stor-
age operator selects which challenges the client has to
answer to get access to the ﬁle on the server and thus
omit the retransmission which is costly for both the client
and the operator. Recent publications proposed different
approaches with varying storage and computational over-
head [12, 20, 10]. Furthermore every service should use
SSL for all communication and data transfers, something
which we observed was not the case with every service.
6.2 Secure Dropbox
To ﬁx the discovered security issues in Dropbox we
propose several steps to mitigate the risk of abuse.
First of all, a secure data possession protocol should
be used to prevent the clients to get access to ﬁles
only by knowing the hash value of a ﬁle. Eventually
every cloud storage operator should employ such a
protocol if the client is not part of a trusted environment.
We therefore propose the implementation of a simple
challenge-response mechanism as outlined in Fig. 5.
In essence: If the client transmits a hash value already
known to the storage operator, the server has to verify
if the client is in possession of the entire ﬁle or only
the hash value. The server could do so by requesting
randomly chosen bytes from the data during the upload
process. Let H be a cryptographic hash function which
maps data D of arbitrary length to ﬁxed length hash
value.
P ushinit(U, p(U ), H(D)) is a function that initiates the
upload of data D from the client to the server. The user
U and an authentication token p(U ) are sent along with
the hash value H(D) of data D. P ush(U, p(U ), D) is
the actual uploading process of data D to the server.
Req(U, p(U ), H(D)) is a function that requests data D
from the server.
V er(V erof f , H(D)) is a function that requests ran-
domly chosen bytes from data D by specifying their
offsets in the array V erof f .
Uploading chunks without linking them to a users
Figure 5: Data veriﬁcation during upload
Dropbox should not be allowed, on the one hand to
prevent clients to have unlimited storage capacity, on
the other hand to make online slack space on Dropbox
infeasible.
In many scenarios it is still cheaper to just
add storage capacity instead of ﬁnding a reliable metric
on what data to delete - however, to prevent misuse of
historic data and online slackspace, all chunks that are
not linked to a ﬁle that is retrievable by a client should
be deleted.
To further enhance security several behavioral aspects
9
server:machineclient:machinepushinit(U,p(U),H(D))ver(Veroff,H(D))sendBytes(VerBytes,H(D))storage management:processsendHashvalue(H(D))determineAvailability(H(D))sendLinkingRequest(U,H(D))linkUserToData(U,D)returnCRPairs(VerBytes,Veroff,H(D))Security Measure
1. Data possession protocol
2. No chunks without linking
3. Check for host ID activity
4. Dynamic host ID
5. Enforcement of data ownership No unauthorized data access
Consequences
Prevent hash manipulation attacks
Defy online slack space
Prevent access if host is not online
Smaller window of opportunity
Table 6: Security Improvements for Dropbox
can be leveraged, for example to check for host ID
activity - if a client turns on his computer he connects
to Dropbox to see if any ﬁle has been updated or new
ﬁles were added. Afterwards, only that IP address
should be allowed to download ﬁles from that host IDs
Dropbox. If the user changes IP e.g., by using a VPN
or changing location, Dropbox needs to rebuild the
connection anyway and could use that to link that host
ID to that speciﬁc IP. In fact, the host ID should be used
like a cookie [26] if used for authentication, dynamic
in nature and changeable. A dynamic host ID would
reduce the window of opportunity that an attacker could
use to clone a victim’s Dropbox by stealing the host ID.
Most importantly, Dropbox should keep track of which
ﬁles are in which Dropboxes (enforcement of data
ownership). If a client downloads a chunk that has not
been in his or her Dropbox, this is easily detectable for
Dropbox.
Unfortunately we are unable to assess the performance
impact and communication overhead of our mitigation
strategies, but we believe that most of them can be im-
plemented as simple database lookups. Different data
possession algorithms have already been studied for their
overhead, for example S-PDP and E-PDP from [11] are
bounded by O(1). Table 6 summarizes all needed miti-
gation steps to prevent our attacks.
7 Conclusion
In this paper we presented speciﬁc attacks on cloud stor-
age operators where the attacker can download arbitrary
ﬁles under certain conditions. We proved the feasibil-
ity on the online storage provider Dropbox and showed
that Dropbox is used heavily to store data from thepi-
ratebay.org, a popular BitTorrent website. Furthermore
we deﬁned and evaluated online slack space and demon-
strated that it can be used to hide ﬁles. We believe that
these vulnerabilities are not speciﬁc to Dropbox, as the
underlying communication protocol is straightforward
and very likely to be adopted by other cloud storage op-
erators to save bandwidth and storage overhead. The dis-
cussed countermeasures, especially the data possession
proof on the client side, should be included by all cloud
storage operators.
Acknowledgements
We would like to thank Arash Ferdowsi and Lorcan Mor-
gan for their helpful comments. Furthermore we would
like to thank the reviewers for their feedback. This work
has been supported by the Austrian Research Promotion
Agency under grant 825747 and 820854.
References
[1] Amazon.com, Amazon Web Services (AWS).
Online at
http://aws.amazon.com.
Over
[2] At Dropbox,
100 Billion
retrieved May
Served–And
Online
at
Counting,
http://gigaom.com/2011/05/23/at-dropbox-over-100-billion-
ﬁles-served-and-counting/.
Save
2011.
23rd,
Files
Files
[3] Dropbox Users
Minutes,
http://mashable.com/2011/05/23/dropbox-stats/.
retrieved May
2011.
1 Million
24rd,
Every
Online
5
at
[4] Grab the pitchforks!... again, retrieved April 19th, 2011. Online
http://benlog.com/articles/2011/04/19/grab-the-pitchforks-
at
again/.
sacriﬁces
retrieved April
[5] How Dropbox
cost
ings,
Online
http://paranoia.dubﬁre.net/2011/04/how-dropbox-sacriﬁces-
user-privacy-for.html.
[6] NCrypto Homepage,
retrieved June 1st, 2011.
privacy
2011.
user
12th,
for
Online at
sav-
at
http://ncrypto.sourceforge.net/.
[7] Piratebay top 100. Online at http://thepiratebay.org/top/all.
[8] AGGARWAL, G., BURSZTEIN, E., JACKSON, C., AND BONEH,
D. An analysis of private browsing modes in modern browsers. In
Proceedings of the 19th USENIX conference on Security (2010),
USENIX Security’10.
[9] ARMBRUST, M., FOX, A., GRIFFITH, R., JOSEPH, A. D.,
KATZ, R., KONWINSKI, A., LEE, G., PATTERSON, D.,
RABKIN, A., STOICA, I., AND ZAHARIA, M. A view of cloud
computing. Communications of the ACM 53, 4 (2010), 50–58.
[10] ATENIESE, G., BURNS, R., CURTMOLA, R., HERRING, J.,
KHAN, O., KISSNER, L., PETERSON, Z., AND SONG, D.
Remote data checking using provable data possession. ACM
Transactions on Information and System Security (TISSEC) 14,
1 (2011), 12.
[11] ATENIESE, G., BURNS, R., CURTMOLA, R., HERRING, J.,
KISSNER, L., PETERSON, Z., AND SONG, D. Provable data
possession at untrusted stores. In Proceedings of the 14th ACM
conference on Computer and communications security (2007),
CCS ’07, ACM, pp. 598–609.
[12] ATENIESE, G., DI PIETRO, R., MANCINI, L., AND TSUDIK, G.
Scalable and Efﬁcient Provable Data Possession. In Proceedings
of the 4th international conference on Security and privacy in
communication netowrks (2008), ACM, pp. 1–10.
10
[31] WANG, C., WANG, Q., REN, K., AND LOU, W. Ensuring data
storage security in cloud computing. In Quality of Service, 2009.
IWQoS. 17th International Workshop on (2009), Ieee, pp. 1–9.
[32] WANG, Q., WANG, C., LI, J., REN, K., AND LOU, W. En-
abling public veriﬁability and data dynamics for storage security
in cloud computing. Computer Security–ESORICS 2009 (2010),
355–370.
[13] BOWERS, K., JUELS, A., AND OPREA, A. HAIL: A high-
availability and integrity layer for cloud storage. In Proceedings
of the 16th ACM conference on Computer and communications
security (2009), ACM, pp. 187–198.
[14] BOWERS, K., JUELS, A., AND OPREA, A. Proofs of retrievabil-
ity: Theory and implementation. In Proceedings of the 2009 ACM
workshop on Cloud computing security (2009), ACM, pp. 43–54.
[15] BREZINSKI, D., AND KILLALEA, T. Guidelines for Evidence
Collection and Archiving (RFC 3227). Network Working Group,
The Internet Engineering Task Force (2002).
[16] CABUK, S., BRODLEY, C. E., AND SHIELDS, C.
Ip covert
In Proceedings of the
timing channels: design and detection.
11th ACM conference on Computer and communications secu-
rity (2004), CCS ’04, pp. 178–187.
[17] CHOW, R., GOLLE, P., JAKOBSSON, M., SHI, E., STADDON,
J., MASUOKA, R., AND MOLINA, J. Controlling data in the
cloud: outsourcing computation without outsourcing control. In
Proceedings of the 2009 ACM workshop on Cloud computing se-
curity (2009), ACM, pp. 85–90.
[18] COX, M., ENGELSCHALL, R., HENSON, S., LAURIE, B.,
YOUNG, E., AND HUDSON, T. Openssl, 2001.
[19] EASTLAKE, D., AND HANSEN, T. US Secure Hash Algorithms
(SHA and HMAC-SHA). Tech. rep., RFC 4634, July 2006.
[20] ERWAY, C., K ¨UPC ¨U, A., PAPAMANTHOU, C., AND TAMASSIA,
In Proceedings of the
R. Dynamic Provable Data Possession.
16th ACM conference on Computer and communications security
(2009), ACM, pp. 213–222.
[21] GARFINKEL, S., AND SHELAT, A. Remembrance of data
passed: A study of disk sanitization practices. Security & Pri-
vacy, IEEE 1, 1 (2003), 17–27.
[22] GOLAND, Y., WHITEHEAD, E., FAIZI, A., CARTER, S., AND
JENSEN, D. HTTP Extensions for Distributed Authoring–
WEBDAV. Microsoft, UC Irvine, Netscape, Novell. Internet Pro-
posed Standard Request for Comments (RFC) 2518 (1999).
[23] GROLIMUND, D., MEISSER, L., SCHMID, S., AND WATTEN-
HOFER, R. Cryptree: A folder tree structure for cryptographic
In Reliable Distributed Systems, 2006. SRDS’06.
ﬁle systems.
25th IEEE Symposium on (2006), IEEE, pp. 189–198.
[24] HARNIK, D., PINKAS, B., AND SHULMAN-PELEG, A. Side
channels in cloud services: Deduplication in cloud storage. Se-
curity & Privacy, IEEE 8, 6 (2010), 40–47.
[25] JUELS, A., AND KALISKI JR, B. PORs: Proofs of retrievability
In Proceedings of the 14th ACM conference on
for large ﬁles.
Computer and communications security (2007), ACM, pp. 584–
597.
[26] KRISTOL, D. HTTP Cookies: Standards, privacy, and politics.
ACM Transactions on Internet Technology (TOIT) 1, 2 (2001),
151–198.
[27] PIATEK, M., KOHNO, T., AND KRISHNAMURTHY, A. Chal-
lenges and directions for monitoring P2P ﬁle sharing networks-
or: why my printer received a DMCA takedown notice. In Pro-
ceedings of the 3rd conference on Hot topics in security (2008),
USENIX Association, p. 12.
[28] POSTEL, J., AND REYNOLDS, J. RFC 959: File transfer proto-
col. Network Working Group (1985).
[29] SCHWARZ, T., AND MILLER, E. Store, forget, and check: Using
algebraic signatures to check remotely administered storage. In
Distributed Computing Systems, 2006. ICDCS 2006. 26th IEEE
International Conference on (2006), IEEE, p. 12.
[30] SUBASHINI, S., AND KAVITHA, V. A survey on security issues
in service delivery models of cloud computing. Journal of Net-
work and Computer Applications (2010).
11