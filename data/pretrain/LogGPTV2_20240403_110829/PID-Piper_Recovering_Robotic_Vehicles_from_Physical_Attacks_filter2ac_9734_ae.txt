so the total time for all missions is 360 minutes (4 ∗ 30 ∗ 3).
TABLE II: Comparison of Gratuitous Recovery in absence of
attacks, and FPR across the techniques
Analysis Type
Total Missions
Recovery activated
Mission Successful
Mission Failed
F P R = F ailed/T otal ∗ 100
CI
30
7
0
7
23.33% 13.33% 10%
Savior
30
4
0
4
SRR
30
6
3
3
PID-Piper
30
3
3
0
0%
Table II shows the results on the simulated RVs for each
technique. We ﬁnd that PID-Piper performs gratuitous re-
covery in 3 of the 30 missions, but completes the mission
successfully in all of them (100% recovery rate), achieving
0% FPR overall. In comparison, CI, Savior and SRR activated
gratuitous recovery in 7, 4, and 6 of the missions respectively.
Of these cases, CI and Savior recover in none of them (0%
recovery rate), while SRR recovers successfully in half of them
(50% recovery rate). Thus, the overall FPR for CI, Savior and
SRR was 23.33%, 13.33% and 10% respectively, unlike PID-
Piper, which had 0% FPR. We also tested PID-Piper on the
3 real RVs and obtained a similar result, namely 0% FPRs.
D. Recovery from Overt Attacks
To test PID-Piper ’s effectiveness in detecting and recover-
ing from overt attacks, we launched 3 overt attacks targeting
the gyroscope and GPS sensors. We then measured the mission
success rate under overt attacks. All the techniques, including
PID-Piper, successfully detected all the attacks, and activated
recovery. Therefore, we measure how often the mission is
successful after recovery is activated by each technique.
As before, we performed the same 30 missions for the
simulated RVs with the techniques CI, Savior, and SRR in
addition to PID-Piper, and mounted the same overt attacks in
each mission. Without any recovery, all the missions crashed.
Table III shows the mission outcomes of PID-Piper and the
prior work after recovery from overt attacks. As can be seen,
PID-Piper successfully recovered the RVs from attacks in 25
out of the 30 missions (mission success rate of 83%).
In comparison, neither CI nor Savior could successfully
complete any of the missions (success rate of 0%), and SRR
could complete successfully only 4 out of the 30 missions
(success rate of 13%). Moreover, PID-Piper did not experience
any crashes/stalls (0% crash rate), while SRR experienced
crashes/stalls in 11 out of 30 missions (35% crash rate).
Finally, CI and Savior incurred crash/stalls in 80% of missions.
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:25:09 UTC from IEEE Xplore.  Restrictions apply. 
34
TABLE III: Mission Outcomes under Overt Attacks
Analysis Type
Total missions
Misson Successful
Mission Failed (no crash)
Crash/Stall
CI
30
0
4
26
Savior
30
0
5
25
SRR
30
4
15
11
PID-Piper
30
25
5
0
We also measured the deviations from the target destination
in the non-crash missions for SRR and PID-Piper. We exclude
CI and Savior as they had very few non-crashing missions.
In PID-Piper, the average deviation for the 5 failed missions
was 14.5m, while for the 25 successful missions,
it was
5.7m, for an overall average deviation of 7.35m. In contrast,
for SRR, the average deviation was 24m in the 15 failed
missions, and 8.2m for the 4 successful missions, for an
overall average deviation of 20.67m. Thus, PID-Piper has 2.8X
smaller average deviation than SRR for non-crashing missions.
Figure 7 shows the cumulative distribution function (CDF)
of the non-crashing missions for PID-Piper and SRR as a
function of the deviation incurred. This is normalized to
the number of non-crash missions in each technique (30
for PID-Piper, 19 for SRR). As can be seen, PID-Piper’s
CDF increases sharply unlike SRR’s CDF, which increases
gradually with number of missions. Thus, PID-Piper incurs
much less deviation than SRR for the non-crashing missions.
(a)
(b)
Fig. 8: PID-Piper’s recovery under overt attacks. (a) Gyro-
scope attack in Sky-viper, (b) GPS attack in Pixhawk drone
Finally, we tested PID-Piper’s recovery on the 3 real RVs.
Table IV shows the results. PID-Piper performs successful
recovery in 87% of the missions on average (videos showing
PID-Piper’s recovery are available here [40])). To get a deeper
understanding, we study its operation on 2 real RVs.
Figure 8a shows an example of PID-Piper’s recovery from
the gyroscope attack on the Sky-viper drone. The top portion
shows the outputs of the PID controller and PID-Piper under
attacks, and the bottom portion shows the three instances when
the attack was launched. As can be seen in the ﬁgure, the
PID’s roll angle estimations experienced heavy ﬂuctuations
under the attack (between 12 and -20 degrees), while the ML
model’s predictions limited the ﬂuctuations between -5 and 5
degrees. PID-Piper detected the attack, triggered recovery, and
completed the mission successfully. However, without PID-
Piper, the drone crashed - thus, PID-Piper prevented the crash.
Figure 8b shows the deviations due to PID-Piper recovery
after a GPS attack on the Pixhawk drone. The ﬁgure shows the
deviations during a 50m mission both with and without PID-
Piper ’s recovery. As can be seen, the deviation without PID-
Piper is about 25m, while with PID-Piper, the deviation is
about 5m. Further, the deviations with PID-Piper are bounded
as the mission distance increases, unlike the deviations without
PID-Piper. Thus, PID-Piper signiﬁcantly bounds the devia-
tions due to the attack, and makes the mission successful.
E. Mitigating Stealthy Attacks
Recall that stealthy attacks are triggered by controlled sen-
sor manipulations, which over time, result in large deviations
in RV missions (Section II-C). We compared PID-Piper’s
ability to mitigate stealthy attacks with the other systems. We
used the ArduCopter for comparison with SRR and CI, and
the PX4 for comparison with Savior. We varied the mission
distances from 50m to5000m, for linear paths i.e., straight line
missions. Straight line missions represent the best case for the
prior techniques as they predominantly use linear models. The
resulting deviations are shown in Figures 9a and 9b.
(a)
(b)
Fig. 9: Deviation due to stealthy attacks. (a) Comparison
between PID-Piper, SRR, and CI on ArduCopter. (b) Com-
parison between PID-Piper and Savior on PX4 Solo.
As can be seen, on the Arducopter, PID-Piper signiﬁcantly
limits the deviations due to stealthy attacks, incurring less
than 10m deviation even for a 5000m mission distance. In
comparison, CI and SRR incur more than 160m and 140m
deviation respectively. This is because CI and SRR use a
monitoring window to track the error between the observed
value and model predicted values. and they set a very high
threshold (91 degrees in CI [10] for a 3s window, 22 degrees
in SRR [14] for 1s window). This allows stealthy attacks that
are launched persistently at each time window to cause a large
deviation. In contrast, PID-Piper sets the threshold to around
18 degrees, allowing it to limit the effect of stealthy attacks.
On the PX4 Solo system, both PID-Piper and Savior cap the
deviations, as they use CUSUM [27] to track the error through-
out the RV mission (Algorithm 1) rather than a window, which
allows them to control the deviations. However, PID-Piper
caps the deviations due to stealthy attacks at 10m, while Savior
caps it at 70m (regardless of the mission distance). This is
because Savior again sets a high threshold for comparison,
60 degrees, to avoid false positives. Thus, the deviation due to
stealthy attacks in PID-Piper is 7X smaller than that of Savior.
the success rate of PID-Piper is 100%, under
Overall,
stealthy attacks, while for the other 3 techniques, it is 0%.
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:25:09 UTC from IEEE Xplore.  Restrictions apply. 
35
We also validated PID-Piper’s efﬁcacy by performing
stealthy attacks on the 3 real RVs for 50m missions. Table IV
shows the results. As can be seen, with PID-Piper,
the
deviations due to stealthy attacks on real RVs were 1 to 3.5m,
while without PID-Piper, the deviations were 10 to 14m.
TABLE IV: PID-Piper’s Overt attack recovery rate, and devi-
ations due to stealthy attacks on 50 m real RV missions.
RV Systems Overt Attacks
Success Rate
87.5%
Pixhawk
88%
Sky-viper
Aion R1
86.6%
Deviation due to Stealthy Attacks(m)
No Protection With PID-Piper
10
13
14
1
3.5
1.23
F. Performance and Power Overhead
As the performance overheads in simulated RVs depend on
the computing platform, we use only the three real RVs for
measuring the overheads. PID-Piper incurs 6.91%, 6.78% and
5.36% performance overhead for the Pixhawk drone, Sky-
viper drone and the Aion rover respectively, for an average
overhead of 6.35%. In comparison, the average performance
overhead for SRR is 6.9% [14]. Therefore, PID-Piper incurs
a similar performance overhead compared to SRR, while
achieving a much higher mission success rate (Table III). We
exclude CI and Savior from this comparison due to their poor
mission success rates.
We estimate the power consumption based on the runtime
overhead of PID-Piper. The Pixhawk drone and Aion rover
both use an ARM processor and 5000 mAH battery. The
processor typically accounts for 12% of the total power
consumption [41]. Because PID-Piper adds an overhead of
7%, the total power consumption of the RV increases by
0.84%. Finally, we ﬁnd that PID-Piper does not increase the
RV’s overall mission time, both with and without attacks.
VII. DISCUSSION
Missing Attacks As seen from the results, PID-Piper achieves
over 80% mission success rates under overt attacks, compared
to other techniques, which achieve less than 15% success.
However, PID-Piper does not achieve mission success in about
17% of cases. This is because the attacks cause signiﬁcant
deviation in the RV’s trajectory towards the end of the mission,
and the ML model is unable to correct the deviation in time.
To handle such attacks, PID-Piper can be improved using
ensemble learning e.g., two LSTM models, one tailored for
attacks towards the end of the mission, and use boosting
algorithms to correlate the predictions of both networks to
obtain the actuator signals of the RV.
Attacks Targeting Other Sensors We only tested PID-Piper
with attacks on the GPS and gyroscope sensors. However,
PID-Piper is not limited to these attacks. Attacks on other
sensors, such as the accelerometer, magnetometer or optical
sensor of the RV, will also result in ﬂuctuations of the PID
controller’s output. Hence, PID-Piper will detect this as an
attack and activate the recovery.
Adversarial Attacks It is possible to craft adversarial inputs
against PID-Piper if the attacker has knowledge of the ML
model itself, or has access to the training data (white-box) [42].
However, it is possible to mitigate such attacks by certifying
the robustness of each prediction [43], or by utilizing decision
boundaries [44] which guarantees that the model does not
provide incorrect predictions. On the other hand, attackers
can query the system to construct a surrogate model to craft
adversarial samples (black-box) [45], [46]. It is difﬁcult to
launch such attacks against RVs as they are closed systems.
Further,
is possible to defend against such attacks by
monitoring the similarity index in queries [47].
it
VIII. RELATED WORK
Physical invariants have been used to detect attacks against
different CPS [48], [49]. These invariants are speciﬁc to the
CPS it
is designed for. For example, BRUIDS, [50] uses
domain knowledge to derive rules for detecting different attack
types against UAVs. However, this technique is limited to
known attack signatures, and does not work for previously
unseen attacks. ML techniques have been developed to derive
invariants [51]–[55] and physical dynamics based monitor-
ing [56] techniques has been proposed to detect attacks against
CPS. None of these have been used for RVs, to our knowledge.
In the domain of RVs, physical attacks targeting the RV’s
gyroscope [8], accelerometer [9], GPS [7], and optical sen-
sor [57] have been proposed. Only three techniques have
been used for attack detection and recovery [10], [13], [14].
We have studied these in detail earlier. CORGIDS [11] ﬁnds
correlations among system parameters in drones using Hidden
Markov Models to detect attacks. However, it does not predict
or correct the RV’s behaviour, and cannot be used for recovery.
In recent work, Fei et al. proposed the use of reinforcement
learning (RL) in RV controllers to recover from faults and
attacks [58]. However, this technique requires the policy to
be trained with representative faults and attacks, in order to
distinguish them from normal operation. Such representative
faults/attacks are difﬁcult to obtain in practice. Further, the
RL-based controller cannot control the altitude drop due to
gyroscope attacks which will ultimately resulting in a crash.
Therefore, unlike PID-Piper, this technique will require man-
ual remediation to handle attacks targeting RV’s gyroscope.
IX. CONCLUSION