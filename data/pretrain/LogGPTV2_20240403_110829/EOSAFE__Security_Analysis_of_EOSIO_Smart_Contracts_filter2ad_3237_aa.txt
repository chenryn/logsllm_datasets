title:EOSAFE: Security Analysis of EOSIO Smart Contracts
author:Ningyu He and
Ruiyi Zhang and
Haoyu Wang and
Lei Wu and
Xiapu Luo and
Yao Guo and
Ting Yu and
Xuxian Jiang
EOSafE: Security Analysis of EOSIO Smart Contracts
Ningyu He, Key Lab on HCST (MOE), Peking University; Ruiyi Zhang, PeckShield, Inc.; 
Haoyu Wang, Beijing University of Posts and Telecommunications; Lei Wu, Zhejiang 
University; Xiapu Luo, The Hong Kong Polytechnic University; Yao Guo, Key Lab on 
HCST (MOE), Peking University; Ting Yu, Qatar Computing Research Institute; 
Xuxian Jiang, PeckShield, Inc.
https://www.usenix.org/conference/usenixsecurity21/presentation/he-ningyu
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.EOSAFE: Security Analysis of EOSIO Smart Contracts
Ningyu He1*, Ruiyi Zhang2*, Haoyu Wang3‡, Lei Wu4‡, Xiapu Luo5
Yao Guo1‡, Ting Yu6, Xuxian Jiang2
1Key Lab on HCST (MOE), Peking University 2PeckShield, Inc.
3Beijing University of Posts and Telecommunications 4Zhejiang University
5The Hong Kong Polytechnic University 6Qatar Computing Research Institute
* Co-ﬁrst authors ‡Co-corresponding authors
Abstract
The EOSIO blockchain, one of the representative Delegated
Proof-of-Stake (DPoS) blockchain platforms, has grown
rapidly recently. Meanwhile, a number of vulnerabilities and
high-proﬁle attacks against top EOSIO DApps and their smart
contracts have also been discovered and observed in the wild,
resulting in serious ﬁnancial damages. Most of the EOSIO
smart contracts are not open-sourced and typically compiled
to WebAssembly (Wasm) bytecode, thus making it challeng-
ing to analyze and detect the presence of possible vulnera-
bilities. In this paper, we propose EOSAFE, the ﬁrst static
analysis framework that can be used to automatically detect
vulnerabilities in EOSIO smart contracts at the bytecode level.
Our framework includes a practical symbolic execution en-
gine for Wasm, a customized library emulator for EOSIO
smart contracts, and four heuristic-driven detectors to identify
the presence of the four most popular vulnerabilities in EO-
SIO smart contracts. Experiments have shown that EOSAFE
achieves promising results in detecting vulnerabilities, with
an F1-measure of 98%. We have applied EOSAFE to all active
53,666 smart contracts in the ecosystem (as of November 15,
2019). Our results show that over 25% of the smart contracts
are labeled vulnerable. We further analyze possible exploita-
tion attempts on these vulnerable smart contracts and identify
48 in-the-wild attacks (27 of them have been conﬁrmed by
DApp developers), which have resulted in ﬁnancial loss of at
least 1.7 million USD.
1 Introduction
With the growing prosperity of cryptocurrencies (e.g., Bit-
coin), blockchain techniques have become more attractive and
been adopted in a number of areas. Due to the limited through-
put (e.g., Transaction Per Second, aka TPS) derived from the
inherent principle of the Proof-of-Work consensus, traditional
blockchain platforms (e.g., Bitcoin and Ethereum) cannot be
used to support high performance applications. Researchers
have proposed different consensus protocols, e.g., Proof-of-
Stack (PoS) [1] and Delegated Proof-of-Stake (DPoS) [2], to
resolve the performance issues.
As one of the most representative DPoS platforms and
the ﬁrst decentralized operating system, EOSIO has become
one of the most active global communities. EOSIO adopts
a multi-threaded mechanism based on its DPoS consensus
protocol, which is capable of achieving millions of TPS. The
performance advantage of EOSIO makes it popular for De-
centralized Application (DApp) developers. EOSIO has suc-
cessfully surpassed Ethereum in DApp transactions just three
months after its launch in June 2018 [3]. Currently, the trans-
action volume of EOSIO on average is more than a hundred
times greater than Ethereum [4]. As of 2019, the total value of
on-chain transactions of EOSIO has reached over $ 6 billion.
A smart contract is a computer protocol that allows users
to digitally negotiate an agreement in a convenient and secure
way. In contrast to the traditional contract law, the transaction
costs of a smart contract are dramatically reduced, and the cor-
rectness of its execution is ensured by the consensus protocol.
EOSIO smart contracts can be written in C++, which will be
compiled to WebAssembly (Wasm) and executed in the EOS
Virtual Machine (EOS VM). Wasm is a web standard specify-
ing the binary instruction format for a stack-based VM. It can
run in modern web browsers and other environments [5].
However, it is not easy to guarantee the security of the
implementation of smart contracts, EOSIO in particular. A
number of vulnerabilities have been discovered in EOSIO
smart contracts, while severe attacks have been observed in
the wild, which caused great ﬁnancial damages. For instance,
in fall 2018, a gambling DApp, EOSBet, was attacked twice
within just a month [6, 7] due to fake EOS and fake receipt
vulnerabilities, causing 40,000 and 65,000 EOS losses, re-
spectively. Therefore, it is necessary to identify the security
issues of smart contracts in order to prevent such attacks.
Unfortunately, most smart contracts on EOSIO are not
open-sourced, and there are few analysis tools towards an-
alyzing Wasm bytecode, which makes it more difﬁcult to
detect vulnerabilities for EOSIO smart contracts automati-
cally. As Wasm bytecode can be converted to C code using
the ofﬁcial tool wasm2c [8], which naturally provides a poten-
tially promising approach that analyzes the converted C code
USENIX Association
30th USENIX Security Symposium    1271
rather than raw Wasm bytecode, so we can apply widely used
tools such as KLEE [9]. However, our investigation shows
that such a solution is not practical, i.e., KLEE failed to per-
form the detection in most cases, due to reasons including
timeout and out-of-memory (OOM) issues caused by path
explosion. This can be possibly explained by the adopted
memory model [10,11] which may lead to heavy memory and
time consumption, as reported by [12]. Furthermore, the con-
version from Wasm bytecode to C code requires extra human
efforts to prepare all exported functions (including function
signatures and the logic) for EOSIO smart contracts. Oth-
erwise, the compilation and the symbolic execution cannot
be successfully completed. Moreover, the quality of the con-
verted C code cannot be guaranteed, because wasm2c itself
is still under development and may not be stable considering
the bugs that have been discovered so far [13]. In short, the
C language based solutions rely on sophisticated conversion
tool(s), so they are typically too heavy to perform the analysis
for EOSIO smart contracts (see §7.1).
As such, this paper attempts to analyze Wasm bytecode
directly to detect vulnerabilities in EOSIO smart contracts.
Although many efforts have been made to analyze Ethereum
smart contracts [14–19], none of them, however, can be ap-
plied to EOSIO smart contracts, as these two ecosystems are
totally different, ranging from their virtual machines, the struc-
ture of bytecode, to the types of vulnerabilities. Speciﬁcally,
there exist several challenges. Firstly, EOS VM is more com-
plicated than Ethereum VM in regard to their instructions,
including both quantity and variety. For example, EOS VM
supports ﬂoating point operations, type conversion and ad-
vanced jump instructions [20], none of these features are sup-
ported in Ethereum VM at the opcode level [21,22]. Secondly,
although with a well-structured format, the Wasm bytecode
is complicated to analyze due to the multi-level nested struc-
tures, which makes it difﬁcult to perform the semantic-level
recovery for further analysis/detection. Thirdly, most EOSIO
vulnerabilities discovered so far are more complicated than
traditional simple vulnerabilities, e.g., integer overﬂow. Thus
it usually requires more semantic information, e.g., ﬁelds of
the platform-speciﬁc data structure as the indexes, to model
and analyze them. For example, to detect the fake EOS vul-
nerability (see § 3.1), we need to check the speciﬁc value of
the argument code in the function apply.
This Paper. We implement EOSAFE, the ﬁrst systematic
static analysis framework for detecting vulnerabilities in EO-
SIO smart contracts. Speciﬁcally, we ﬁrst implement a native
symbolic execution engine for Wasm bytecode, and mitigate
the inherent path explosion problem by applying a heuristic-
guided pruning approach. Second, to analyze an EOSIO smart
contract and simulate its external interactive environment, we
implement an emulator to mimic the behaviors of key EOSIO
library functions that are crucial in vulnerability detection.
Third, we propose a generic vulnerability detection frame-
work, which allows security analysts to easily implement their
own vulnerability detectors as plugins. In this work, we have
implemented four detectors aiming to detect four high-proﬁle
vulnerabilities, including fake EOS, fake receipt, rollback and
missing permission check (see §3).
To evaluate the effectiveness of EOSAFE, we ﬁrst manually
crafted a benchmark suite including 52 smart contracts, which
is composed of vulnerable smart contracts collected from pub-
licly veriﬁed attacks and their corresponding patched ones.
Experimental results and further manual veriﬁcation suggest
that EOSAFE achieves excellent performance in identifying
existing vulnerabilities. To measure the overall landscape of
vulnerabilities in the EOSIO ecosystem, we further applied
EOSAFE to all the smart contracts in the ecosystem (53,666
in total). Experiment results reveal that security vulnerabili-
ties are prevalent: over 25% of the smart contracts (including
historical versions) are ﬂagged as vulnerable, and a large por-
tion of them have not been patched timely. To further measure
the impact of these vulnerabilities, we collect the transaction
records (over 2.5 billion transactions in total), and design a
set of conservative heuristic strategies to identify attacks tar-
geting these vulnerable smart contracts. We have identiﬁed
48 attacks in total, as well as 183 missing permission check
actions. By the time of this writing, 27 attacks have been
conﬁrmed by DApp developers, which have already caused
the ﬁnancial loss of over 1.7 million USD.
This paper makes the following main contributions:
• We propose EOSAFE, the ﬁrst systematic static analysis
framework for EOSIO smart contracts, which is capa-
ble of detecting four kinds of popular vulnerabilities.
Experiment results demonstrate that EOSAFE achieves
excellent performance.
• We propose a valuable-function-centric detection frame-
work, which is based on our observed vulnerability-
speciﬁc pruning strategies, to effectively mitigate the
path explosion issue in symbolic execution.
• We apply EOSAFE to over 53K EOSIO smart contracts,
and perform the ﬁrst measurement study of the whole
EOSIO ecosystem. Our results reveal the severity of the
security issues, i.e., over 25% of the EOSIO smart con-
tracts may have been exposed to the threats introduced
by these vulnerabilities.
• We have identiﬁed 48 attacks (35 of them were ﬁrst dis-
covered) and 183 missing permission check actions re-
lated to the identiﬁed vulnerabilities, which have caused
huge ﬁnancial loss. Most of the severe attacks have been
conﬁrmed by DApp Teams.
To boost further research on EOSIO smart contracts, we
have released the benchmark and experiment results to the
research community at [23].
2 Background
As the ﬁrst industrial-scale decentralized operating sys-
tem [24], the EOSIO platform can achieve high perfor-
mance, i.e., millions of TPS, to efﬁciently execute complicated
1272    30th USENIX Security Symposium
USENIX Association
DApps. Such efﬁciency is in large part due to the consensus
algorithm it uses, i.e., DPoS, which does not spend a vast
amount of computing resources on the unnecessary mining
process compared to traditional PoW. We next introduce some
key concepts to facilitate the understanding of this work.
2.1 Account Management
An account in EOSIO is the basic unit to identify an entity.
It can trigger transactions to other accounts. Additionally, to
ensure account security and prevent identity fraud, EOSIO
implements an advanced permission-based access control
system. Speciﬁcally, an account can assign public/private keys
to speciﬁc actions, and a particular key pair will only be able
to execute the corresponding action. By default, an EOSIO
account is attached to two public keys: the owner key (which
speciﬁes the ownership of the account) and the active key
(which grants access to activities with the account). These
two keys authorize two native named permissions: the owner
and active permission, to manage accounts. Apart from the
native permissions, EOSIO also allows customized named
permissions for advanced account management.
1 void apply ( uint64_t receiver , uint64_t code ,
uint64_t action ) {
if( action == N( onerror )) {
check ( code == N( eosio ) , " exception captured ");
}
auto self = receiver ;
if(( code == self || code == N( eosio . token ))) {
switch( action ) {
case N( transfer ): // action == N(transfer)
// deal with:
// 1. direct invocation to transfer function
// 2. notification emitted from transfer
...
}
2
3
4
5
6
7
8
9
10
11
12
13
}
14
15 }
Listing 1: An example of the apply function with slight
modiﬁcation for better readability. The function N is used
to retrieve the string literal.
Unlike Ethereum, an EOSIO smart contract is not treated
as a separate entity. A smart contract is just a snippet of
code stored in an account, which makes it easy to explain
why a smart contract in EOSIO is updatable, rather than an
Ethereum smart contract that cannot be changed freely by
the owner. Therefore, when an account is invoked by another
one, its smart contract will be responsible for handling the
received invocation. In this way, it requires a dispatcher to
dispatch the requests to the corresponding functions. Specif-
ically, in EOSIO, this dispatcher is ofﬁcially deﬁned as a
function named apply with a ﬁxed function signature1, as
the example shown in Listing 1. As the entry point of each
EOSIO smart contract, the apply function is responsible for
handling all the requests, including invoked actions and re-
ceived notiﬁcations (see §2.2), which will be forwarded to
the corresponding processing functions. Besides, the apply
function can be used to validate the input parameters if neces-
sary. The details of the parameters and the mechanism of the
apply function will be discussed in §2.2.
2.2 EOSIO Transactions
A transaction is the basic unit to be veriﬁed and packaged in
blocks. Moreover, a transaction is composed of one or multi-
ple actions, and an action is the basic unit to trigger functions.
For example, the action in Listing 1 (line 1) speciﬁes the
target function name. The action is responsible for carrying
permissions designated by the invoker. Moreover, another
nested action can be triggered by send_inline as an inlined
actions2, which is still an ordinary action and inherits the con-
text (including permissions) of its parent. Note that a failure
in an action could lead to the revert of the whole transaction.
Besides transaction and action, there exists another exclu-
sive mechanism named notiﬁcation. Speciﬁcally, it is used to