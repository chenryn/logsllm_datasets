come with a built-in password manager. In general, a password
manager works in the following manner. First, a user visits a
website and enter a password to be authenticated to a service
running on the website. Then, the browser will ask the user
whether or not to save the password. If the user permits saving
of the password, the browser will store it on the user’s device
or associated database running on cloud. When you revisit
the website later, the browser autoﬁlls the stored password.
As the password managers attempt to identify the password
associated with a website by checking the domain name of
the website, web rehosting services, which use a single domain
name to host multiple websites, could violate the fundamental
assumption made by the password managers, i.e., different
websites should have different domain names.
C. Pitfalls of Cookies
Finally, we present several pitfalls of cookies that lead to
their exploitation by attacks.
Access from JavaScript. Cookies written in HTTP headers
have an HttpOnly ﬂag. If this ﬂag is set to true, the cookie
cannot be accessed from the JavaScript. However, for most
cookies handled by web rehosting services, the ﬂag is set
to false, implying that cookies set when a victim visited a
malicious website can be accessed by the JavaScript running
on the malicious website. Meanwhile, cookies written by a
JavaScript can be accessed by another JavaScript.
Session Cookie. In general, by leaving the expiration date
unset, a cookie is treated as a session cookie [44]. Technically,
a session cookie should disappear when a browser ends the
session. In practice, however, conﬁguring the “Continue where
you left off” setting in a browser keeps the session cookie
alive. As we will show in Section IV-C, some browsers set
this as the default during installation. Besides, in the mobile
platforms, the session cookie does not disappear automatically
even when a browser ends a session. Thus, deploying session
cookies is not a countermeasure against attacks that exploit
cookies.
evil.example to the web rehosting service; then, a URL
like https://rehosted.example/rehost?url=
https://evil.example is generated. Next, the attacker
induces the victim user to access that rehosted malicious page
through the conventional web attack scenarios (e.g., drive-
by download, phishing, and cross-site request forgery). The
attacker can efﬁciently attract victims by using malvertising,
spam email, and social media posts with the link to the re-
hosted malicious page. Note that some web rehosting services,
which prohibit hotlinking (i.e., direct link to the rehosted page)
by validating referrers or HTTP sessions, make the attack
difﬁcult3. Finally, the attack is triggered when the victim user
accesses the generated URL.
To make the attack more efﬁcient, attackers can use a
landing page embedding multiple iframe tags pointing to
malicious pages rehosted by various web rehosting services.
With a single visit to that page, the victim user becomes
susceptible to attacks targeting multiple web rehostings. The
landing page does not need to be rehosted. There are several
options for impersonating a domain name: wrapping by a
shortened URL or redirect service and injection to legitimate
sites by XSS and website falsiﬁcation. These techniques are
not unique to our attacks, but are generally used for deceiving
web users.
In this study, we provide novel attacks targeting web
rehosting services that leverage both traditional resources such
as cookies and the recent powerful resources of HTML5 and
progressive web apps (PWA), which caused unexpected usage
of resources when web rehosting architecture was designed.
B. Attacks against Web Rehosting
Based on our threat model, we propose ﬁve attacks widely
applicable to web rehostings. We ﬁrst summarize these attacks
in Table II. Our attacks affect both past and future activities of
the victim visit to the rehosted malicious page. We classiﬁed
these attacks into two types: exploiting resources to know what
web rehosting users have read/written before now (i.e., before
visit), and parasitizing resources to monitor and tamper with
the victim’s browser from this time (i.e., after visit).
We explain each of the ﬁve attacks as follows.
1) Persistent MITM: This is a new kind of MITM attack
that works persistently after being attacked by an off-path
attacker by exploiting service workers or AppCache. We sum-
marize the differences between a service worker and AppCache
in Table III.
We found that an attacker can register a malicious service
worker on the origin provided by web rehosting services.
Listing 1 shows an example of a general HTML to register
a service worker. In this case, sw.js under the root path
(/) is registered corresponding to the origin of this HTML
(same as the origin of sw.js). An attacker can implement
the functionality into sw.js, which reads and rewrites web
requests and responses. Listing 2 shows how to register a ma-
licious service worker on the origin provided by web rehosting
(rehosted.example). We note that a service worker on a
3If the victim user accesses the rehosted malicious page via another rehosted
page, the attack still works.
Fig. 2. Origin uniﬁcation that occurs when web pages are rehosted
Cookie Bomb. Web servers deny requests with request headers
that are too large, e.g., the maximum size in Apache is 8,190
bytes by default. If a browser has many and large cookies
for a website, it will always return a server error, as the
cookies are attached to the request header. Homakov [28]
named the DoS attack resulting from this behavior as Cookie
Bomb. We will demonstrate in section III-B1 that by combining
it with the ability of AppCache to rewrite fallback pages, a
more advanced attack can be established against users of web
rehosting services.
III. THREAT MODEL AND ATTACKS
In this section, we ﬁrst present a threat model based
on origin uniﬁcation, which is a property common to web
rehosting. We then propose ﬁve attacks targeting web rehosting
users under our threat model.
A. Threat Model based on Origin Uniﬁcation
The mechanism used by web rehosting to handle web pages
of different domain names is shown in Figure 2. Each origin
of a web page is converted into the same origin as the web
rehosting service. The origin contains a schema, domain, and
port. The SOP, the major principle of web security, restricts a
document or script loaded from one origin to interact with a
resource from another origin [45].
Because of the SOP, a script placed on the page with
evil.example was not able to access the resource stored
by pages with a.example and b.example. Given pages
with different domain names, however, web rehosting re-
hosts the pages under a single domain name; hence,
this
mixture of origins makes the SOP ineffective in rehosted
pages. In general, services that concern SOP violation adopt
the sandbox mechanism to isolate the domain name of
the service itself (web-rehosting.example) from the
sandboxed domain name for untrustworthy rehosted pages
(rehosted.example). We argue that
the SOP problem
still remains; among rehosted pages in the sandboxed domain
name (rehosted.example) a script of a certain page still
affects resources of other pages, while the browser resource
in web-rehosting.example is isolated from that of
rehosted.example owing to the SOP.
We assume that an attacker ﬁrst rehosts the prepared
page with the malicious script on the web rehosting service
that has the aforementioned problem. The attacker inputs
4
yWebRehostinga.exampleb.exampleevil.examplerehosted.examplerehosted.examplerehosted.example(used for attack)web-rehosting.example(        Boundary of origins)affectTABLE II.
ATTACKS AGAINST WEB REHOSTING SERVICES. IMPACTED TIMING INDICATES WHETHER AN ATTACK IS CARRIED OUT BEFORE OR AFTER
THE TARGET USER’S VISIT TO A MALICIOUS SITE.
Attacks
Persistent MITM
Privilege Abuse
Credential Theft
History Theft
Session Hijacking and Injection
Exploited Resources
Service Worker, AppCache
Camera, Microphone, Location, Notiﬁcation, etc.
Password Manager
Cookie (written by JavaScript), localStorage
Cookie (written by HTTP header)
Impacted Timing
after visit
both
both
before visit
both
Assumption of User Behavior
(none)
gave permission at any rehosted website
saved password at any rehosted website
(none)
is logged in (hijacking)
communications via that web rehosting. Therefore, the victim’s
sensitive information is leaked to the attacker as long as
the victim uses that web rehosting. The service worker can
perform diverse attack scenarios, such as modify the nuance
of new articles, replace movies, inject ads, display a phishing
page, and replace downloaded ﬁles with malware. While
this persistent MITM attack gives attackers almost the same
beneﬁts as the traditional MITM attack, the persistent MITM
attack is more powerful for the following reasons: there is no
need to directly intercept communications on the network path,
permanent eavesdropping once the service worker is registered
occurs, and HTTPS-enabled pages are affected. Unfortunately,
current browsers do not have an easily understandable user
interface to check registered service workers. To determine
whether the service worker is registered, a user should open
the developer console and carefully inspect
the setting of
the service worker. As we mentioned in Section II-B, a
service worker has restrictions that ensure secure execution.
We present, in Section III-C, a method to circumvent the
restrictions by leveraging the rehosting rules of web rehosting.
AppCache also enables the attacker to perform a persistent
MITM attack without a service worker. The procedure of the
attack using AppCache is similar to that using a service worker.
The attacker ﬁrst rehosts a malicious manifest ﬁle and then
rehosts an HTML ﬁle including the URL of the rehosted
manifest ﬁle. At this time, the attacker writes the fallback rule
in the manifest ﬁle, which lists two URIs: the ﬁrst is the page to
be rewritten (wildcard available), and the second is the fallback
page as a Listing 3:
Listing 3. AppCache Manifest File to replace fallback pages
1 CACHE MANIFEST
2
3 FALLBACK:
4 * /rehost?url=https://evil.example/replace.
html
The attacker, in the rule, deﬁnes pages to be rewritten and
the rehosted malicious page for rewriting. Both URLs must be
relative and in the same origin. Owing to using a fallback rule,
AppCache can only rewrite fallback pages to return an error
status code (e.g., 400, 403, 404, and 500). However, by writing
huge cookies to the browser of the victim on the rehosted
malicious page, the attacker can force all requests from the
victim to the web rehosting server to fall back (similar to the
Cookie Bomb in Section II-C). The attacker tampers all the
pages visited by the victim via the web rehosting service, even
with AppCache.
As we described in Section II-B, the scope of AppCache
(i.e., the origin) is wider than that of service workers (i.e.,
the origin and the path), so AppCache may be effective for
Fig. 3. Overview of the attack abusing service worker
certain origin, i.e., rehosted.example, cannot be regis-
tered from a page on another origin, i.e., evil.example.
When the target visits the rehosted malicious page as we
presented in our threat model, the malicious service worker
script is registered and it begins the persistent MITM attack
because the origin of the service worker script is the same as
that of the page the victim visited.
Listing 1. Code to register service worker
1 
});
};
Listing 2. How to assign the rehosted service worker. The origin of this
HTML and sw.js is rehosted.example.
1
navigator.serviceWorker.register('https:
//rehosted.example/rehost?url=https:
//evil.example/sw.js')
The overview of the attack abusing a service worker is
shown in Figure 3. An attacker rehosts the malicious page
that contains the above HTML to register a malicious service
worker on a victim user. Once a victim user visits the rehosted
malicious page, the malicious service worker compromises
the victim’s browser and permanently compromises all web
5
WebRehostingOriginal websiteMalicious SWAttackerMalicious websiteRequest rehosted malicious pageRequestRespond withmalicious page & SWRespond withmalicious page & SWRequestRequestRequestRespondwithmanipulated pageVictim useryRespond withrehosted pageRespond with original pageRegister malicious SWRequestTABLE III.
COMPARISON BETWEEN SERVICE WORKERS AND
APPCACHE
Resource
MIME-Type
Origin scope
Path scope
Page scope
Service Worker
text/javascript
application/javascript
application/x-javascript
- Same origin
- Same and lower directory
of SW script
- Any page
AppCache
text/cache-manifest
- Same origin
- Any path
- Fallback page
- Any page
(with Cookie Bomb)
Fig. 4.
page in Wayback Machine.
Example of location permission request on a (legitimate) rehosted
web rehostings for which an attack using a service worker is
unsuccessful. The scope indicates the range of pages where a
service worker or AppCache work.
2) Privilege Abuse: Web pages sometimes request for
permission to make use of the hardware resources of a web
user such as a camera or GPS, even if the page is rehosted. The
permission corresponds to the origin. Therefore, in the case of
web rehosting, the permission is shared with all the rehosted
pages. Figure 4 shows an example of a location permission
request when a user visits a legitimate website rehosted on
Wayback Machine. Once the user clicks “Allow,” an attacker
can divert the permission by using the rehosted malicious
page later. In other words, the attacker can stealthily access
resources (e.g., GPS, camera, and microphone) previously
permitted on other rehosted benign pages.
Moreover, the attacker can distribute Web Push notiﬁca-
tions by combining the malicious service worker with the
permission for the notiﬁcation. In such a case, while the
browser process is running, there is a risk that the browser will
always receive the Web Push notiﬁcations from the attacker.
The notiﬁcations can contain messages for phishing, harmful
images, and URL links to malicious websites [36].
This attack does not affect certain web rehosting services
where a rehosted page is loaded in iframe and its domain is
different from that for the top-level browsing context. In this
case, iframe’s sandbox mechanism automatically denies any
permission requests without a user’s interaction; hence, the
attack always fails.
3) Credential Theft: The credentials
stored in the
browser’s built-in password manager4 correspond to the origin
of the page. When a browser access a certain page, credentials
corresponding to the origin of the page are automatically input
to the login form by the autoﬁll function of the password
manager. There are a lot of pages of originally different
services on web rehosting. Once a user logs into Facebook
4Though details are omitted owing to space limitations, we conﬁrmed that
our attack also works on third-party password managers that have an autoﬁll
function such as Lastpass [35] and DashLane [11] in the same manner.
6
or Twitter via web rehosting and saves the credentials in
the browser,
the password manager automatically ﬁlls the
credential in the form when the user accesses the rehosted
malicious page with the form for the ID and password. By
using malicious JavaScript, the attacker can steal the credential
that is input to the form even if it is not submitted to the page.
We note that whether password manager autoﬁll credentials
depends on not only the origin but also the structure of the form
(e.g., string in the action attribute) to be ﬁlled [54]. However,
the attacker can construct an ideal form in rehosted malicious
pages that satisfy the conditions for the browser to autoﬁll
credentials.
This attack is successful on mainly web proxy services
because they should support login function for rehosted pages.
The services that require users to log into the service to browse
content
like Facebook are often subject to state-sponsored
censorship. The most popular web proxy service we examined
advertises the ability of that service to circumvent censorship
against Facebook. Therefore, our assumption that the user logs
into the service through a web proxy is realistic. We discuss
the feasibility of this attack in detail in Section V-B.
4) History Theft: A JavaScript code using cookies and
localStorage is common among modern websites. The data
is separately stored in each origin, so rehosted pages conse-
quently share the data in cookies and localStorage. An attacker