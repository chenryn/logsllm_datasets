Traversing Instantiated Objects 
public static object GetSubObject(object objectIN)
{
    System.Reflection.FieldInfo[] fields = ReflectionPower.GetFields(objectIN, true);
    // select fields[0], most of the time you will not pick [0]
    System.Reflection.FieldInfo field = fields[0];
    // return the value object for the field
    return field.GetValue(objectIN);
}
public static System.Reflection.FieldInfo[] GetFields(object objectIn, bool ShowPrivate)
{
       System.Reflection.BindingFlags flag = System.Reflection.BindingFlags.Instance | 
System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public;
    if (ShowPrivate)
        return objectIn.GetType().GetFields(flag);
    else
        return objectIn.GetType().GetFields();
}
Figure 7 .    Code  - Traversing Objects
Invoking Functionality on an Object
public static object CallFunctionalityOnObject(object objectIN)
{
    System.Reflection. MethodInfo [] methods = ReflectionPower. GetMethods (objectIN, true);
    // select methods[0], most of the time you will not pick [0]
    System.Reflection. MethodInfo method = methods [0];
    // This the a list of parameters to pass into the function
    object[] params = new object[]{};
    // pick the method to Invoke, pass the object to Invoke it on, pass the parameters
    return LoadMethodStatic (method , objectIN, params);
}
public static System.Reflection.MethodInfo[] GetMethods(object objectIn)
{
      return objectIn.GetType().GetMethods();
}
public static object LoadMethodStatic(System.Reflection.MethodInfo methodIN, object objectIn, object[] param)
{
      return methodIN.Invoke(objectIn, param);
}
Figure 8 .    Code  - Invoking Functionality on Objects
4
Change the Values of an Object
public static void ChangeSomeValue(object objectIN, object valueIN)
{
    System.Reflection.FieldInfo[] fields = GetFields(objectIN, true);
    // pick the field you wish to change
    System.Reflection.FieldInfo aField = fields[0];
    aField.SetValue(objectIN, valueIN);
}
public static System.Reflection.MemberInfo[] GetFields(object objectIn, bool ShowPrivate)
{
       System.Reflection.BindingFlags flag = System.Reflection.BindingFlags.Instance | 
System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public;
       if (ShowPrivate)
            return objectIn.GetType().GetFields(flag);
        else
            return objectIn.GetType().GetFields();
}
Figure 9 .    Code  - Change Values on Objects
5
The DotNet World: From System Process to Class Level
The AppDomain is the main boundary in DotNet. A normal DotNet process contains an 
AppDomain. Inside of an AppDomain lives Assemblies-- an Assembly is a complete code base 
and resource structure. Inside of an Assembly is where Classes and NameSpaces exist along with 
most other features that make up a program.
Diagram of a System Process with an AppDomain, Assembly, and Class:
Figure 10 .  Image - System Process Overview
AppDomains are self contained. They can crash and not take down the process they live 
in or a neighboring AppDomain. AppDomains are the main place DotNet segments memory. The 
way this was implemented is similar to how operating systems segment memory for processes.
More than one AppDomain can be loaded into a process and more than one Assembly can 
be loaded into an AppDomain. Once an Assembly is loaded it cannot be unloaded except by 
unloading the AppDomain it is in. Cross Appdomain memory access is limited by DotNet.
Some Alternate Diagrams of Loading AppDomains and Assemblies:
Multiple AppDomain in a Process
Multiple Assemblies in a AppDomain
Figure 11 .  Image - System Process Overview Alternate Implementations 
6
AppDomain
Assembly
Class – Code
System 
Process
High Level View: What Can Reflections Do and What Is It?
Reflection can impact code by opening an object or code base and giving access to its 
values and functionality. This can allow a programmer to interact with compiled programs, in 
order to cause the target program to act in different ways, such as sending commands to the 
Database that should not be sent or adding an interface to help blind people use the program. The 
power of reflection can force a program to interface, to give up or change its information, or to 
activate its functionality.
Reflection can impact the target program solely in memory. This allows for control over 
the target program with a minimal footprint on the target program. Also in the DotNet framework 
Reflection is directly under the System NameSpace, so it should be in every project by default.
7
How to Navigate to a Specific Object
The object-web, formed by a program at run time can make even the craziest UML look 
tame. With Reflection we navigate the tangled-web of objects and gain the ability to make 
change. Having access to the decompiled code base is not necessary, but a map always helps. 
The decompiled code base can help in developing a path out to the target object or in finding 
chinks to help gain references deeper into the target program. 
After a program is loaded and Reflection has access, the best place to start is by getting a 
form object and working back from that. Another possibility is working back from a static object. 
Events and Delegates can also be valuable in this endeavor. Events and Delegates can be 
modified to lay traps that can gain a reference to an object as it fires an Event or Delegate. Also it 
is possible to look at what is hooked to an Event or targeted by Delegates to gain information 
from that. 
If the program is nice enough to grant one, a normal API can also be a place to hitch into 
the program. This will help to quickly get deep into the programs instance object structure. 
Every program is different so no one approach is best, some programs will be easy to 
infiltrate and others difficult. Regardless of how it is done, with some skill or luck, once the 
target object is found it should be easy to impact the desired changes or access needed 
information. 
8
How to Access the Form Object
Two easy ways to get form objects is with a DotNet call or a system call. The DotNet 
OpenForms call returns a formCollection. With the windows system call it returns window 
handles. Note that the window handles can reference forms that cannot be accessed.
DotNet Call to System.Windows.Forms.Application.OpenForms:
Public System.Windows.Forms.Control[] GetWindowList()
{
    System.Collections.Generic.List formList = new List();
    foreach (System.Windows.Forms.Form f in System.Windows.Forms.Application.OpenForms)
    {
        formList.Add(f);
    }
    return formList.ToArray();
}
Figure 12 .  Code  - DotNet Call to Get Forms
Windows System Call to “user32.dll”->EnumWindows:
[System.Runtime.InteropServices.DllImport ("user32.dll")]
private static extern int EnumWindows(EnumWindowsProc ewp, int lParam);
[System.Runtime.InteropServices.DllImport ("user32.dll")]
private static extern bool IsWindowVisible(int hWnd);
//delegate used for EnumWindows() callback function
delegate bool EnumWindowsProc(int hWnd, int lParam);
public static System.Windows.Forms.Control[] myWindows()
{
    System.Collections.Generic.List WList;
    WList = new System.Collections.Generic.List();
    // Declare a callback delegate for EnumWindows() API call
    EnumWindowsProc ewp = new EnumWindowsProc(delegate(int hWnd, int lParam)
    {
        System.Windows.Forms.Control aForm;
        aForm = System.Windows.Forms.Form.FromChildHandle((IntPtr)hWnd) as System.Windows.Forms.Control;
        // Check if form object is not null
        if (f != null)
            WList.Add(f);
        return (true);
    });
    // Call DllImport("user32.dll") to Enumerate all Windows
    EnumWindows(ewp, 0);
    // Send Forms back
    return WList.ToArray();
}
Figure 13 .  Code  - System Call to Get Forms
9
The New Rules Under Reflection
New Vectors: Access by Reflection
The attack vector opened by Reflection is at Run-Time. With Reflection it is possible to 
delve into a code base and Run “void Main()” or drop down into its class structure and create a 
single object to wield as you wish.
Since Reflection is not decompiling, it can have a more automated and faster integration 
time with the target code base along with less of a foot print.
Reflection can easily add functionality to a preexisting code base. No longer do programs 
have to be written with extensibility in mind or accessible technology to integrate.
Because Reflection does not impact the code base it can get past CRC checks and code 
signing.
Limitations and Brick walls
Some road blocks to using Reflection are:  It is necessary for the target to be a DotNet 
application. Reflection also is limited by memory access rights imposed by the operating system. 
Objects need to have a proper reference to be accessed. Programs can also be constructed with 
countermeasures that could be triggered if they detect an intrusion.
Once access to the code base is gained with Reflection getting to the target object maybe 
harder than one might think; because normally we are the programs designer easily keeping 
references to important objects, but as we are coming into another programmer’s world with 
Reflection manipulation we have to find each object by hand.
10
Demo Attacks
Reflection can augment some of the old attacks with new powers. I will demonstrate the 
attacks of a SQL Injection and Social Engineering.
The SQL Injection
SQL Injection, is sending commands to a DB that should not be sent. This SQL Injection 
will be on a client side app, the app would normally sanitize the commands before they are sent. 
Normally with Reflection we would not need to do SQL Injection at all, as we could send any 
SQL we wish; but for the sake of this demo we will disable the SQL Injection cleaning 
mechanism, and make it vulnerable to SQL Injection.  
Demo - SQL Injection
Load target code
Find SQL Object
Find SQL cleaning thing
Disable SQL cleaning
Figure 14 .  Code  - Demo SQL Injection
11
 The Social Engineering Vector
Users currently do not expect a client side app to lie to them and trick them into divulging 
critical information. After taking over a program this attack will pop-up a fake window and lock 
the program until the user enters critical data. Preferably this would be best done at a logical 
choke point in the program such as on file access or DB connection.
Demo - Social Engineering
“Load target code”
System.Reflection.Assembly AM = System.Reflection.Assembly.LoadFile(fileOn);
AM.ModuleResolve += new System.Reflection.ModuleResolveEventHandler(AM_ModuleResolve);
System.AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(CurrentDomain_AssemblyResolve);
Find an object in a critical area
“Find an event to add password request”
System.Reflection.FieldInfo FI = xObject.GetFields(objIN, true);
string targetName = "saveFileEvent";
System.Reflection.FieldInfo targetField;
foreach (System.Reflection.FieldInfo FI in aReflectorPower.GetFields(objIN, true))
{
    if (targetField.Name == targetName)
    {
        targetField = FI;
        break;
    }
}
Make a copy of the event targets
Put call to fake password Form in event
Put the copied event targets back in the event
Figure 15 .  Code  - Demo Social Engineering
12
Conclusion
With Reflection we have the potential to take control of a program and enact changes that 
are outside of the original creator’s scope. Reflection can be used for good or evil by granting 
flexibility and adaptability, however it is used it opens previously closed doors. No longer are 
programmers subservient to programs if they can reach in and manipulate objects using 
Reflection.
Reflection is simple with few requirements and has a small footprint. This makes it a 
good choice for small changes to a compiled program. 
Suggested Additional readings:  
White Paper: Advanced Programming Language Features for Executable Design Patterns “Better 
Patterns Through Reflection”
ftp://publications.ai.mit.edu/ai-publications/2002/AIM-2002-005.pdf
White Paper: An Introduction to Reflection-Oriented Programming
http://www.cs.indiana.edu/~jsobel/rop.html
13