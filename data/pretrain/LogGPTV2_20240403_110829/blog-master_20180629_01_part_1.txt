## PostgreSQL vacuum 的页内tuple move收缩空间    
### 作者                                                           
digoal                                                           
### 日期                                                           
2018-06-29                                                         
### 标签                                                           
PostgreSQL , vacuum  , tuple move , 压缩空间 , 收缩空间 , 空洞     
----                                                           
## 背景     
当往数据库内插入记录时，PostgreSQL heap page内部的空间分配是这样的，lp内容为对应tuple在当前页的OFFSET，lp的位置固定长度固定（固定page head后面就是lp），lp固定方便tuple的搜索（例如ctid的第二个部分就是lp信息）。  
![pic](20180629_01_pic_001.jpg)  
![pic](20180629_01_pic_003.jpg)  
![pic](20180629_01_pic_004.jpg)  
lp从page head开始分配，tuple从page tail开始分配，lp指向对应tuple的开始位置。  
当一个PAGE内部的tuple有部分被删除后，会不会出现PAGE内部空间的空洞呢？  如图：  
![pic](20180629_01_pic_002.jpg)  
vacuum垃圾回收时，会不会对tuple做move处理，收缩空间呢？  
会。  
## 例子  
1、创建测试表  
```  
postgres=# create table c (id int, info text);  
CREATE TABLE  
```  
2、创建PAGE查看插件  
```  
postgres=# create extension pageinspect;  
CREATE TABLE  
```  
3、插入20条测试数据  
```  
postgres=# insert into c select id, repeat(md5(random()::text), 16) from generate_series(1,20) t(id);  
INSERT 0 20  
```  
4、每列变长字段大小516字节。  
```  
postgres=# select pg_column_size(repeat(md5(random()::text), 16));  
 pg_column_size   
----------------  
            516  
(1 row)  
```  
5、查看第一页（已用满）  
lp已分配到80字节处  
lp offset已分配到576字节处。  
剩余只有不到496字节的空间。  
```  
postgres=# SELECT * FROM page_header(get_raw_page('c', 0));  
     lsn     | checksum | flags | lower | upper | special | pagesize | version | prune_xid   
-------------+----------+-------+-------+-------+---------+----------+---------+-----------  
 3A/28D007F0 |        0 |     0 |    80 |   576 |    8192 |     8192 |       4 |         0  
(1 row)  
```  
6、查看每一条记录tuple在page内部的offset  
```  
postgres=# select lp,lp_off from heap_page_items(get_raw_page('c', 0));  
 lp | lp_off   
----+--------  
  1 |   7648  
  2 |   7104  
  3 |   6560  
  4 |   6016  
  5 |   5472  
  6 |   4928  
  7 |   4384  
  8 |   3840  
  9 |   3296  
 10 |   2752  
 11 |   2208  
 12 |   1664  
 13 |   1120  
 14 |    576  
(14 rows)  
```  
7、查看详细的page内的tuple信息  
```  
postgres=# select * from heap_page_items(get_raw_page('c', 0));  