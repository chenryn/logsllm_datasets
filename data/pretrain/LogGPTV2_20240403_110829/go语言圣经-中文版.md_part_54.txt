这个标志参数通过在测试代码中插入生成钩子来统计覆盖率数据。也就是说，在运行每个测
试前，它将待测代码拷贝一份并做修改，在每个词法块都会设置一个布尔标志变量。当被修
改后的被测试代码运行退出时，将统计日志数据写入c.out文件，并打印一部分执行的语句的
一个总结。（如果你需要的是摘要，使用 。）
go test -cover
如果使用了 标志参数，那么将在每个代码块插入一个计数器而不是布尔标
-covermode=count
志量。在统计结果中记录了每个块的执行次数，这可以用于衡量哪些是被频繁执行的热点代
码。
为了收集数据，我们运行了测试覆盖率工具，打印了测试日志，生成一个HTML报告，然后在
浏览器中打开（图11.3）。
$ go tool cover -html=c.out
测试覆盖率 415
gopl
绿色的代码块被测试覆盖到了，红色的则表示没有被覆盖到。为了清晰起见，我们将背景红
色文本的背景设置成了阴影效果。我们可以马上发现unary操作的Eval方法并没有被执行到。
如果我们针对这部分未被覆盖的代码添加下面的测试用例，然后重新运行上面的命令，那么
我们将会看到那个红色部分的代码也变成绿色了：
{"-x * -x", eval.Env{"x": 2}, "4"}
不过两个panic语句依然是红色的。这是没有问题的，因为这两个语句并不会被执行到。
实现100%的测试覆盖率听起来很美，但是在具体实践中通常是不可行的，也不是值得推荐的
做法。因为那只能说明代码被执行过而已，并不意味着代码就是没有BUG的；因为对于逻辑
复杂的语句需要针对不同的输入执行多次。有一些语句，例如上面的panic语句则永远都不会
被执行到。另外，还有一些隐晦的错误在现实中很少遇到也很难编写对应的测试代码。测试
从本质上来说是一个比较务实的工作，编写测试代码和编写应用代码的成本对比是需要考虑
的。测试覆盖率工具可以帮助我们快速识别测试薄弱的地方，但是设计好的测试用例和编写
应用代码一样需要严密的思考。
测试覆盖率 416
gopl
11.4. 基准测试
基准测试是测量一个程序在固定工作负载下的性能。在Go语言中，基准测试函数和普通测试
函数写法类似，但是以Benchmark为前缀名，并且带有一个 类型的参
*testing.B
数； 参数除了提供和 类似的方法，还有额外一些和性能测量相关的方
*testing.B *testing.T
法。它还提供了一个整数N，用于指定操作执行的循环次数。
下面是IsPalindrome函数的基准测试，其中循环将执行N次。
import "testing"
func BenchmarkIsPalindrome(b *testing.B) {
for i := 0; i = 60ms)
flat flat% sum% cum cum%
1730ms 48.19% 48.19% 1750ms 48.75% crypto/elliptic.p256ReduceDegree
230ms 6.41% 54.60% 250ms 6.96% crypto/elliptic.p256Diff
120ms 3.34% 57.94% 120ms 3.34% math/big.addMulVVW
110ms 3.06% 61.00% 110ms 3.06% syscall.Syscall
90ms 2.51% 63.51% 1130ms 31.48% crypto/elliptic.p256Square
70ms 1.95% 65.46% 120ms 3.34% runtime.scanobject
60ms 1.67% 67.13% 830ms 23.12% crypto/elliptic.p256Mul
60ms 1.67% 68.80% 190ms 5.29% math/big.nat.montgomery
50ms 1.39% 70.19% 50ms 1.39% crypto/elliptic.p256ReduceCarry
50ms 1.39% 71.59% 60ms 1.67% crypto/elliptic.p256Sum
参数 用于指定输出格式，在这里每行是一个函数，根据使用CPU的时间长短来排序。
-text
其中 参数限制了只输出前10行的结果。对于严重的性能问题，这个文本格式基
-nodecount=10
本可以帮助查明原因了。
这个概要文件告诉我们，HTTPS基准测试中 函数占用了将
crypto/elliptic.p256ReduceDegree
近一半的CPU资源，对性能占很大比重。相比之下，如果一个概要文件中主要是runtime包的
内存分配的函数，那么减少内存消耗可能是一个值得尝试的优化策略。
剖析 421
gopl
对于一些更微妙的问题，你可能需要使用pprof的图形显示功能。这个需要安装GraphViz工
具，可以从 http://www.graphviz.org 下载。参数 -web 用于生成函数的有向图，标注有CPU的
使用和最热点的函数等信息。
这一节我们只是简单看了下Go语言的分析据工具。如果想了解更多，可以阅读Go官方博客
的“Proling Go Programs”一文。
剖析 422
gopl
11.6. 示例函数
第三种被 特别对待的函数是示例函数，以Example为函数名开头。示例函数没有函数
go test
参数和返回值。下面是IsPalindrome函数对应的示例函数：
func ExampleIsPalindrome() {
fmt.Println(IsPalindrome("A man, a plan, a canal: Panama"))
fmt.Println(IsPalindrome("palindrome"))
// Output:
// true
// false
}
示例函数有三个用处。最主要的一个是作为文档：一个包的例子可以更简洁直观的方式来演