# Reducing Permission Requests in Mobile Apps

**Authors:**
- Sai Teja Peddinti
- Igor Bilogrevic
- Nina Taft
- Martin Pelikan
- Úlfar Erlingsson
- Pauline Anthonysamy
- Giles Hogben

**Affiliation:**
Google Inc.

## Abstract
Users of mobile apps often express discomfort or concerns about unnecessary or intrusive permission requests by certain applications. Encouraging mobile app developers to request fewer permissions is challenging, as there are numerous reasons for such requests, and it is difficult to determine the purpose of a specific permission with high certainty. This paper introduces a novel, algorithmic mechanism designed to discourage mobile app developers from asking for unnecessary permissions. Developers receive an automated alert, or "nudge," in the Google Play Console when their apps request permissions that are rarely requested by functionally similar apps. Empirical evidence shows that this incentive is effective, with 59% of warned apps reducing their permission requests. These reductions have occurred across various app categories and popularity levels, benefiting billions of users who install apps from the Google Play Store.

## CCS Concepts
- **Security and privacy:** Domain-specific security and privacy architectures, Economics of security and privacy
- **Information systems:** Data mining
- **Computing methodologies:** Machine learning

## Keywords
- Mobile Apps
- Permissions

## ACM Reference Format
Sai Teja Peddinti, Igor Bilogrevic, Nina Taft, Martin Pelikan, Úlfar Erlingsson, Pauline Anthonysamy, Giles Hogben. 2019. Reducing Permission Requests in Mobile Apps. In Internet Measurement Conference (IMC '19), October 21–23, 2019, Amsterdam, Netherlands. ACM, New York, NY, USA, 8 pages. https://doi.org/10.1145/3355369.3355584

## 1 Introduction
The Android ecosystem and Google Play are popular platforms, hosting over 2 million apps and serving 2 billion active devices worldwide. Many apps require access to private or protected data on users' devices, which they request via the Android permissions system. Recent versions of Android (6.0 and higher) organize individual permissions into groups, such as Storage, Contacts, and Location. Users are prompted to grant or deny these permissions at runtime, typically when the app needs them, providing context for the decision.

Apps may request permissions beyond those needed for core functionality for various reasons, including analytics, personalization, testing, performance assessment, advertising (especially for free apps), or support for unused functionality in included libraries. Prior research has shown that many mobile apps request potentially unnecessary permissions [21, 27, 29] or permissions not directly related to their core functionality [2, 8, 17, 24, 28, 35], or use permissions in unexpected ways [21]. This has also been reported in the media [12, 33, 37]. User frustration with unnecessary permission requests [11, 18, 34, 35] can lead to a feeling of privacy erosion [10, 12].

Permission usage varies widely among mobile-app developers, who come from diverse backgrounds and have varying levels of experience. A 2018 survey of over 40,000 developers from 160 countries found that 49% had less than 5 years of experience and 40% worked for organizations with fewer than 50 employees [9]. Small to medium-sized businesses or those with limited experience may lack privacy experts on their teams and may not fully understand the tradeoffs of designing with privacy in mind [7]. For example, well-meaning developers who include third-party libraries in their code may not realize that their app's manifest does not need to request all the permissions requested by the library, and they may be unaware of the privacy implications of different permission requests. The study in [19] showed that developers mostly use the default configuration of ad libraries, choose libraries based on popularity and ease-of-use rather than risk assessment, and feel unable to address the risks. Our aim is to help such developers become more privacy-aware in their handling of app permissions.

Developers who are aware of how their users perceive excessive permission requests may be motivated to refrain from using permissions that aren't strictly needed, e.g., for the sake of their reputation. App reviews often reveal comments about invasive and unnecessary permissions. Beyond complaints in app reviews, there are other reasons why a developer may remove a previously requested permission, including:
- A change in a library they use
- An update to the APIs associated with a permission, making the permission no longer required
- A change in the app functionality
- Google’s developer outreach efforts [4]
- In response to negative press articles [37]

Determining whether a permission request is necessary or not, with certainty, is challenging. Even powerful techniques like static and dynamic analysis do not offer comprehensive answers [25]. Dynamic analysis has code coverage issues, and static analysis cannot examine code downloaded during runtime. Therefore, the decision to request a permission should ultimately be left up to each developer.

Our first contribution is an automated algorithmic approach that identifies situations where there is a significant chance a permission request is unnecessary. We inform developers via a nudge. Nudges are a well-known technique from behavioral economics used to encourage positive behavior without being punitive [32]. Recently, researchers have started studying nudges surfaced to users to assist with decision-making [3, 18]. We focus on nudges that target developers.

To incentivize developers to act on our nudge, we employ the following metric. For a given app, we let the developer know when other apps with very similar functionality refrain from requesting a particular permission. For each specific app, we compute a 'peer group' of functionally similar apps, automatically determining similarity from textual app descriptions and Google Play user-behavior data (as described in Section 2.2). If a specific app requests a permission that nearly none of its peers request, we inform the developer and remind them that users prefer apps that request fewer permissions, as shown by research [15].

Previous research studies have explored other ways to give developers privacy-related feedback, such as giving apps privacy grades [23], grading privacy policies [31, 36], or providing privacy risk metrics on public websites [6, 26]. We chose to explore giving developers feedback via the tools they use to create and manage their apps, such as Android Studio, Play Console, GitHub, and the Gradle build system. These tools provide opportunities to surface nudges. We deployed our privacy warning in August 2017 as part of the Pre-Launch Report shown in the Play Console.

Our second contribution is an assessment of the effectiveness of our nudge. After the live deployment of the nudge, we observed that 59% of apps that received a warning removed permissions. These removals occurred across all app categories, all app popularity levels, and over a broad set of permission types. This demonstrates developers' willingness to remove permissions when pointed out to them. We show that the removal of these permission requests, in aggregate, affected over 55 billion app installs. We also show that the existing permission redaction activity that happens for other reasons is significantly boosted by our warnings.

Our warning is one component of Google’s larger strategy to protect users and help developers achieve good security and privacy practices. One component focuses on device security, with services such as Play Protect, which offers malware protection services for Android. A second component focuses on robust enforcement of Google Play’s user data policies, which require developers to provide clear notice and control over data collection in their apps, as well as recent policy changes further limiting developers’ ability to request access to certain permissions. For instance, Google Play announced (in October 2018) further limitations on apps' ability to request Call Log and SMS permissions on Android devices [30].

A third component aims at educating developers to adopt better practices. In addition to our privacy warning, other signals have been incorporated into the Play Console, such as warnings that discourage the use of HTTP and permanent identifiers. Lint warnings are also surfaced in the Android Studio IDE to alert developers if their app is using a version of a library identified as a potential source of privacy and/or security risks [1]. Each approach has its own benefits and limitations, but together they are complementary.

## 2 Nudging Developers

### 2.1 Our Approach
Developers interact with Google Play via the Play Console [5], both before and after launching an app. The console includes a 'Pre-Launch Report,' accessible to developers who submit apps for testing, which surfaces the results of automated tests on app APKs (e.g., identifying performance issues) before the app is published on Google Play. Our approach to incentivize developers to avoid requesting unnecessary permissions is to show them a motivating warning in this Pre-Launch Report.

Consider a developer who asks for a specific permission in their new app. We compute a set of functionally similar apps and check if this set of apps also asks for the same specific permission. The permissions in the set of functionally similar apps, or peer apps, provide a baseline for the set of permissions needed for an app and a baseline for user expectations about which permissions make sense for the app to request. If nearly all of their competition does not ask for the same permission, we inform the developer. This makes it easier for developers to assess their needs compared to their peers. We leave the decision to the developer, recognizing there may be other specific reasons for the permission.

**Privacy Warning Shown to Developers:**

```
Your app is requesting the permission, [PERMISSION_NAME],
which is used by less than X % of functionally similar apps.
[NUMBER] functionally similar apps which initially requested
[PERMISSION_NAME] have stopped requesting it.
Users prefer apps that request fewer permissions, and requesting
unnecessary permissions can affect your app’s visibility on
Google Play. If these permissions aren’t necessary, you may be
able to use alternative methods in your app and request fewer
permissions. If they are, we recommend providing an explanation
to users of why you need the permissions. Learn more.
```

**Properties of the Warning:**
1. **Optional Compliance:** Developers can choose to adhere to or ignore the warning. If ignored, the warning will reappear in the report for the next version of their app as long as the conditions for the signal remain true (e.g., peer groups would be recomputed at that time).
2. **Motivation:** We further motivate developers by reminding them that users prefer apps with fewer permissions and that the perception of an unnecessary permission request could affect their installs.
3. **Recommendation:** We recommend providing an explanation for the permission request.
4. **Parameter X:** This is a design choice that influences how conservative the warning aims to be. A very small value, such as 1%, ensures that the developers receiving the warnings are highly unlikely to need the permission.

### 2.2 Finding Similar Apps
The simplest approach to identifying peer groups would be to use Google Play app categories; however, this is too coarse-grained, as apps within the same category can offer very different functionality. For example, the 'Travel and Local' category contains navigation apps, hotel reservation apps, and tour guides. The 'Auto' category contains car software and apps that help users buy a car.

Another potential method for identifying similar apps could be based on user behavior while browsing in Google Play. When users look at a particular app, suggestions of other apps that users may want to install are also shown. When users click on these suggestions, it may indicate that the clicked app is similar or related to the original one they were viewing. A method based on clustering analysis of these user co-clicks (called UBC for user behavior clustering) iteratively improves over time. However, the UBC data alone is not sufficient for our task for several reasons:
- **Functionality Focus:** The UBC method is optimized to find interesting suggestions, not functionally similar apps. For example, for a game app, the UBC method may suggest a game discussion forum or a game media editor.
- **Language and Locale:** The UBC method favors apps in the same primary language and designed for the same locale, which we do not want to limit our peer app assessment by, as app functionality is often independent of language.
- **New and Unpopular Apps:** The UBC method fails to provide any suggestions for brand-new apps or very unpopular apps, as Google Play has no user-behavior data for these cases.

Prior work has suggested analyzing the app description text via LDA analysis to identify apps with similar functionality [14, 16]. Our approach follows this direction but uses a different model and supplements the basic app descriptions with user co-click data. Below, we compare our approach to a pure LDA-based one.

**Design of Our App Peer Group Mechanism:**
To determine when to surface a nudge in a Pre-Launch Report, we must be able to compute app peer groups for all apps, including brand-new and unpopular ones, and do so for apps in any language. We have developed a deep-learning algorithm that creates an embedding based on word2vec for each app, mapping apps into a high-dimensional space where closeness in distance corresponds to similarity [13, 20].