execution as follows. We call this algorithm MR-SHE.mEval.
MR-SHE.mEval(pk, hkω, {Ci}L
i=1) : Parse hkω as (gω, (rω,3,
hω,3), (rω,4, hω,4)) and Ci as (ci,1, ci,2, ci,3, ci,4, τi) for
i = 1, . . . , L.
Integrity Check: If there exixt i ∈ [1, L] such that
τi 6= f (ci,5), where δi ← Γhk(ci,1, ci,2, ci,3, ci,4) and
ci,5 = e(ci,1, hω,3hδ1
, then return ⊥.
ω,4)crω,3+rω,4δi
i,2
Homomorphic Operation: Choose s $← Zp, and
compute
c1 ← gs
1g−sω
L
Y
i=1
ci,1, c2 ← e(g, g)s
L
Y
i=1
ci,2
c3 ← e(g, h1)−s
L
Y
ci,3, c4 ← e(g, h2)s
L
Y
ci,4
i=1
δ ← Γhk(c1, c2, c3, c4), c5 ← e(c1, hω,3hδ
i=1
ω,4)crω,3+rω,4δ
2
4Since the receiver has the master key α, the receiver may
obtain the corresponding keyword of artiﬁcially-mixed ci-
phertexts, and may be able to decrypt them. For preventing
such a decryption, IBE with anonymity against key gener-
ation center (KGC) that has the master key could be em-
ployed [22]. Moreover, IBE with anonymous ciphertext in-
distinguishability [12], which guarantees that no information
of plaintext is revealed from a ciphertext encrypted by an un-
known identity even against KGC, also could be employed.
However, since the receiver requests the homomorphic oper-
ation to the server for ciphertexts associated with a speciﬁc
keyword ω, it seems natural to assume that the receiver de-
crypts returned ciphertexts by using {(rω,i, hω,i)}i=1,2,3,4.
Thus, we assume that no receiver tries to decrypt such
artiﬁcially-mixed ciphertexts, and employing such IBEs for
enhancing security is left as a future work of this paper.
and return C = (c1, c2, c3, c4, τ ) where τ ← f (c5).
Before analyzing the MR-SHE.mEval agorithm, we inves-
tigate the original MR-SHE.Eval algorithm as follows.
In
the MR-SHE.Eval algorithm, a new randomness s ∈ Zp is
chosen. Essentially, this randomness is used for comput-
ing a ciphertext (excluding the ﬁfth component) of M = 1,
(gs
1g−sω, e(g, g)s, e(g, h1)−s, e(g, h2)s), which does not aﬀect
the result of homomorphic operation. This randomness is in-
dispensable for achieving the source ciphertext hiding prop-
erty of KH-IBE [14]: for a ciphertext C1, C ′
1, C2 where all ci-
phertexts are computed by the same identity and C1 and C ′
1
are ciphertexts of the same plaintext, the distributions of the
evaluation result of (C1, C2) and (C ′
1, C2) are identical. This
222property is employed to replace challenge-related cipher-
texts into harmless ciphertexts in the security proof. Let
D = (C0, C1, . . . , Ck) be the dictionary of challenge-related
ciphertexts. Moreover, other dictionary D′ is managed in
the proof where D′ := ((D′
k )).
Each of D′
i (i ∈ [1, κ]) is either a ciphertext with ﬁfth
component being consistent or an index in {0, 1, . . . , i − 1}.
(D′
i ) ∈ D′ means that Ci ∈ D was the reply to the eval-
uation query (D′
i is an index j, then
it is interpreted as Cj. By using D′ and the source cipher-
text hiding property, each challenge-related ciphertexts are
newly computed.
i ). Here, if D′
2 ), . . . , (D′
i and D′′
i or D′′
1 ), (D′
k, D′′
1, D′′
2, D′′
i, D′′
i, D′′
Due to the proof methodology above, what we need to con-
sider is (1) the source ciphertext hiding property, and (2) the
size of D′. Fortunately, the source ciphertext hiding prop-
erty trivially holds. Moreover, D′ is represented as D′ :=
((D(1)
k )) and its
size is still polynomial of the security parameter. That is,
our modiﬁcation does not aﬀect the security proof. We use
the MR-SHE.mEval algorithm in our implementations.
k , . . . . , D(L)
1 , . . . , D(L)
), . . . , (D(1)
k , D(2)
1 , D(2)
1
5.
IMPLEMENTATION RESULTS
5.1 Basic Operations
We employ the PBC library [1] and y2 = x3 + x (Type A,
deﬁned on a 512-bit prime ﬁeld, to provide 80-bit security
level) as the underlying elliptic curve. Our implementation
environment is: CPU: Xeon E5-2660 v3 @ 2.60GHz, gcc
4.9.2, openssl 1.0.2d, and pbc-0.5.14. We give benchmarks
of basic operations in Table 2.
Table 2: Basic Operations
Operations
Time (msec)
Scalar mul. in G (unknonw point)
Scalar mul. in G (ﬁxed point)
Exp. in GT (unknonw element)
Exp. in GT (ﬁxed element)
Pairing computation
1.351
0.191
0.114
0.023
0.840
5.2 Storage Size and Communication Overhead
The sizes of a scalar value in Zp, an element in G, an ele-
ment in GT , and a hash value are 20 bytes, 65 bytes (using
element_to_bytes_compressed()), 128 bytes, and 64 bytes,
respectively. Here, we use SHA512 as Γ and f . With these
values, sizes of datas in our scheme can be estimated (Ta-
ble 3).
Table 3: Sizes of Data in Our Scheme
Components
Size (bytes)
M
M (Lifted ElGamal)
C
sk
pk
hkω (=tω)
|GT |
1 small integer
|G| + 3|GT | + 1 hash value
|Zp|
6|G|
2|Zp| + 3|G|
128
4–8
513
20
390
235
Ciphertext is commonly communicated among participants
and stored in a server, as shown in Figure 1. Therefore its
size aﬀects both communication overhead and storage size.
The size is 513 bytes, relatively large for the 80-bit security
setting5, and might be a bottleneck for a large scale setting.
However, this is a common problem of public key homomor-
phic encryption schemes, and the solution of this problem
is beyond the scope of this paper. We should remark about
the size of homomorphic keys, because they are stored in
a server once they are generated for keywords. The size of
keys is 235Nω bytes, where Nω is the number of keywords.
5.3 Algorithms
We give benchmarks of algorithms in Table 4 where all
algorithms work in the milliseconds order. In our implemen-
tations, all precomputable pairings, e(g, hi) for i = 1, 2, 3, 4,
are computed in advance.
Table 4: Benchmarks of Algorithms
Algorithm
Time (msec)
MR-SHE.KeyGen
MR-SHE.HomKeyGen
(MR-SHE.Trapdoor)
MR-SHE.Enc
MR-SHE.Dec
MR-SHE.Test
MR-SHE.Eval
9.5
1.0
(1.0)
0.5
4.7
2.2
8.1
Entity
Receiver
Receiver
(Receiver)
Data Holder
Receiver
Server
Server
If the input ciphertexts of the MR-SHE.Eval algorithm have
been tested by the MR-SHE.Test algorithm before, then the
ciphertexts are guaranteed that these are associated with
the same keyword. So, in this case the integrity check pro-
cedure of the MR-SHE.Eval algorithm can be skipped, and
the MR-SHE.Eval algorithm can start from the homomorphic
operation procedure. Since the integrity check procedure is
run for two ciphertexts in the MR-SHE.Eval algorithm, the
MR-SHE.Eval algorithm can be run approximately 3.7 msec
in this situation.
Next, we give the benchmarks of MR-SHE.mEval algo-
rithm in Fig 2. Here, L = 4, 8, 16, . . . , 8192 (= 213) is the
number of input ciphertexts in the algorithm.
12000
10000
8000
6000
4000
2000
)
c
e
s
m
i
(
e
m
T
g
n
n
n
u
R
i
5.3 
4.4 
3.1 
1.8 
0
0
14.0 
28.2 
87.6 
18.7 
2
4
48.4 
6
mEvalTime (msec)
(L-1)*EvalTime/mEvalTime
6.6 
6.7 
6.7 
6.8 
6.0 
6.4 
8.0
6.8  6.8 
7.0
10019.9 
6.0
E
f
f
i
c
e
n
c
y
R
a
t
i
o
5011.7 
2510.0 
1261.0 
635.3 
322.4 
165.9 
8
10
12
14
5.0
4.0
3.0
2.0
1.0
0.0
Log2(The Number of Ciphertexts)
Figure 2: Benchmarks of MR-SHE.mEval
Due to our implementation result, the running time of the
MR-SHE.mEval algorithm is asymptotically seven-times faster
5This will be larger when Catalano-Fiore transformation is
employed, because, after computing inner product for ℓ-
dimensional vectors, the resultant ciphertext has 2ℓ + 1 ci-
phertext components. See Section 5.4.2 for details.
223than that of (L − 1)-times executions of the MR-SHE.Eval
algorithm.
5.4 Evaluating Inner Products of Encrypted
Vectors
Next, we give our implementation result of inner prod-
ucts of encrypted vectors. We employ the lifted ElGamal-
like additive homomorphic operations as in [13]. Moreover,
for the case that both vectors are encrypted, we employ the
Catalano-Fiore transformation [10] for supporting one mul-
tiplicative homomorphic operation.
5.4.1 Catalano-Fiore Transformation
Brieﬂy, the Catalano-Fiore transformation is explained as
follows. Let HE := (Enc, Dec) is an additive HE (here we
omit the public/secret keys for the sake of simplicity). For
encrypting a plaintext M ∈ M, where M is a plaintext
space and is required to be a ring (i.e., supporting addi-
tions and multiplications), randomly choose b $← M, com-
pute a = M − b (here “−” is subtraction over the ring M)
and Enc(b), and the ciphertext is (a, Enc(b)). Let (a1 :=
M1 − b1, Enc(b1)) and (a2 := M2 − b2, Enc(b2)) be two ci-
phertexts. Then, compute a1a2 and Enc(a1a2)+a1Enc(b2)+
a2Enc(b1) = Enc(M1M2 − b1b2). Here “+” is the addi-
tive homomorphic operation of HE. The resultant cipher-
text is (Enc(M1M2 −b1b2), Enc(b1), Enc(b2)). For computing
M1M2, the Dec algorithm computes b1 and b2 by decrypting