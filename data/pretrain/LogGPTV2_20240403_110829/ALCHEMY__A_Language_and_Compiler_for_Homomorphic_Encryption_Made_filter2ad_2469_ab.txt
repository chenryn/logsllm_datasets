of native operations. A particularly important example for our pur-
poses is the “rounding function” from Z2k to Z2, where Zq denotes
the ring of integers modulo q. This function is central to efficient
“boostrapping” algorithms for FHE and the related Learning With
Rounding problem [6], and has an efficient arithmetization [3, 31].
See Section 5 for further details.
Interpreters and compilers. The other main ingredient of Alchemy
is its collection of composable interpreters for programs written in
its DSLs. In keeping with Alchemy’s modular structure, each inter-
preter separately defines how it implements each relevant language
component. In particular, some of the interpreters are actually com-
pilers that translate programs from various DSL components to
others. Example interpreters provided in Alchemy include:
• an evaluator, which simply interprets the plaintext or cipher-
text DSL operations using the corresponding Haskell and
Λ◦λ operations;
• various utility interpreters that, e.g., print DSL programs,
or compute useful metrics like program size, multiplicative
depth, etc.;
• a diagnostic compiler that modifies any ciphertext-DSL pro-
gram to also log the noise rate of every ciphertext it produces;
• most significantly, a compiler that transforms any program
written in the plaintext DSL to a corresponding homomor-
phic computation in the ciphertext DSL.
The plaintext-to-ciphertext compiler is the most substantial and
nontrivial of the interpreters, and is one of this work’s main contri-
butions. This compiler automatically performs several important
tasks that in all other FHE systems must handled manually by the
programmer. In particular, it:
• generates all necessary secret keys and auxiliary “hints” for
ciphertext operations like key-switching and ring-switching;
• properly schedules all necessary ciphertext maintenance
operations like key-switching (e.g., for “linearization” after
homomorphic multiplication) and modulus-switching (for
noise management);
• statically infers, using compile-time type arithmetic, the ap-
proximate noise rate of each ciphertext to within a small
factor, and selects an appropriate ciphertext modulus from a
given pool (and if any inferred rate is too small relative to
the available moduli, outputs an informative type error);
• generates encrypted inputs for the resulting homomorphic
computation, with appropriate noise rates to ensure correct
decryption of the ultimate encrypted output.
1.3 Example Usage
Here we give a few concrete examples of programs in the Alchemy
DSLs, and the various ways they can be interpreted and compiled.
These examples illustrate the ease of use and flexibility of the ap-
proach. We start with the following simple DSL expression:
ex1 = lam2 $ \x y -> (var x +: var y) *: var y
As expected, ex1 represents a function of two inputs x and y, which
adds them using the DSL operator +:, then multiplies the result by y
using the DSL operator *:. The Haskell typechecker automatically
infers the full type of ex1, which is:
ex1 :: (Lambda_ expr, Mul_ expr a, Add_ expr (PreMul expr a))
=> expr e (PreMul expr a -> PreMul expr a -> a)
This type carries a great deal of important information. Let us
unpack its various components:
• First, the type is polymorphic in the type variables expr, e,
and a. These type variables can represent arbitrary Haskell
types...
• ...subject to the constraints (Lambda_ expr, ...), which
say that expr must be able to interpret the Lambda_, Mul_,
and Add_ language components. More specifically, Lambda_
says that expr supports programmer-defined functions (here
via lam2), Mul_ says that expr can handle multiplication of
two values of type PreMul expr a to produce one of type a,
(via *:), and Add_ says that expr can handle addition of val-
ues of the former type (via +:). (The purpose of PreMul is ex-
plained below, where we describe the plaintext-to-ciphertext
compiler.)
• Finally, the type expr e (PreMul expr a -> ... -> a)
says that ex1 represents a DSL function that takes two input
values of type PreMul expr a and outputs a value of type a.
The type argument e represents the expression’s environ-
ment, which must list the types of any unbound variables
used in “open” code. Here both x and y are bound by the
enclosing lam2, so there are no unbound variables—the code
is “closed”—and hence e is completely unconstrained.
1.3.1 One Program, Many Interpretations. Because ex1 is polymor-
phic in expr, having written it once we can interpret it in several
different ways by specializing expr to various concrete interpreter
types. One simple interpreter is the “not-so-pretty” printer P, which
trivially implements all the requisite language components. Its pub-
lic interface
print :: P () a -> String
converts any closed P-expression to a string representing the compu-
tation in a “desugared” form. Calling print ex1 implicitly special-
izes ex1’s interpreter type variable expr to P and its environment
type variable e to (), resulting in the following:3
print ex1
-- "(\v0 -> (\v1 -> ((mul ((add v0) v1)) v1)))"
Another very simple interpreter is the evaluator E, which just
interprets each of Alchemy’s DSL components using corresponding
Haskell (or Λ◦λ) operations. Its public interface
eval :: E () a -> a
converts any closed DSL expression of arbitrary type a to a Haskell
value of type a, as follows:
eval ex1
-- (Ring a) => a -> a -> a
eval ex1 7 11
-- 198
Because eval implicitly specializes ex1’s type variable expr to E,
which defines PreMul E a = a, the call to eval ex1 produces a
polymorphic Haskell function of type a -> a -> a, for an arbi-
trary Ring type a. The Ring constraint comes from the fact that E
uses the operators + and * (introduced by Ring) to interpret the DSL
operators +: and *: (introduced by Add_ and Mul_, respectively).
The call to eval ex1 7 11 actually evaluates the Haskell function,
yielding (7 + 11) · 11 = 198.
We stress that eval ex1 :: (Ring a) => a -> a -> a is poly-
morphic in a, so it can be applied to elements of any plaintext ring,
or even to ciphertexts from Λ◦ λ’s FHE scheme (both of which
instantiate Ring). However, in the latter case ex1 still lacks the
extra ciphertext “maintenace” operations, like relinearization and
modulus-switching, that are needed in typical homomorphic com-
putations. For these we use Alchemy’s plaintext-to-ciphertext com-
piler, described in Section 1.3.3 below.
1.3.2 Ring Switching. Here we exhibit another small program that
illustrates another important language component, for “switch-
ing” from one cyclotomic ring to another. Ring-switching in ho-
momorphic encryption was developed and refined in a series of
works [3, 12, 22, 30], which showed its utility for tasks like “boot-
strapping” and efficiently computing a wide class of linear func-
tions.
ex2 = linearCyc_ (decToCRT @F28 @F182) .:
linearCyc_ (decToCRT @F8 @F28)
Here decToCRT @F8 @F28 is a Haskell expression representing a
certain linear function from the 8th to the 28th cyclotomic ring, and
similarly for decToCRT @F28 @F182. (The specific linear functions
do not matter here, and could be arbitrary.) The .: operator denotes
composition of DSL functions. Naturally, the Haskell type checker
enforces that the output type of the “inner” function must equal
the input type of the “outer” function.
The Haskell compiler automatically infers the following type for
ex2 (we have suppressed some type arguments and constraints for
better readability):
ex2 :: (LinearCyc_ expr cyc, ...) =>
expr e (cyc F8 zp -> cyc F182 zp)
3Notice the automatically indexed variables v0, v1, and prefix-form functions mul, add
in place of the infix operators *:, +:.
This type says that ex2 is a (closed) DSL function that may be
interpreted by any interpreter expr that can handle the LinearCyc_
language component (which introduces linearCyc_). Essentially,
the DSL function maps from cyc F8 zp, which should represent
the 8th cyclotomic ring modulo some integer p, to cyc F182 zp,
which should represent the 182nd cyclotomic ring modulo p. The
type cyc is specified in the LinearCyc_ expr cyc constraint, and
could be, e.g., the concrete type Cyc from Λ◦λ, which implements
cyclotomic rings.
As with the previous example, we can print ex2 and evaluate it
“in the clear.” More interesting is to homomorphically evaluate it on
FHE ciphertexts, using a special form of key-switching as shown
in [22, 30]. For this we use Alchemy’s homomorphic compiler,
described next.
1.3.3 Compiling to the Ciphertext DSL. We now show how the
above example DSL programs, which should now be thought of
as functions on plaintexts, can be compiled into programs that
operate on FHE ciphertexts to homomorphically evaluate the origi-
nal programs on their underlying plaintexts. Like the printer and
evaluator, the compiler is a data type PT2CT that can interpret all
the appropriate DSL components (Add_, Mul_, LinearCyc_, etc.).
Because FHE involves additional parameters like ciphertext rings,
ciphertext moduli, and a choice of key-switching “gadget,” and be-
cause PT2CT statically tracks the error rate of ciphertexts, we must
specify a few additional types. For example, we can define:
type Zq1 = Zq $(mkModulus 34594561)
type Zq2 = Zq $(mkModulus 35642881)
...
type CTModuli
= [ Zq1, Zq2, ... ]
type CTRingMap = [ (F8,F512), ... ]
type Gad
= TrivGad
-> PNoiseCyc 0 _
-- specialize examples to cyclotomics with
-- desired ciphertext error rates
ex1' = ex1 :: _ => expr e (_ -> _ -> PNoiseCyc 0 F8 _)
ex2' = ex2 :: _ => expr e (_
_)
The type Zq1 represents Zq1, the ring of integers modulo q1 =
34594561, and similarly for Zq2 etc. (The macro mkModulus defines
a type representing its argument, which is also augmented with
the number of “units of noise” the modulus can hold; see below for
more details.) The type CTRingMap specifies that when the plaintext
ring is the 8th cyclotomic, the ciphertext ring should be the 512th
cyclotomic, etc. (Ciphertext rings must be taken large enough, rela-
tive to the moduli, to achieve a desired level of security; there are
automated tools to aid their selection.) Finally, TrivGad indicates a
simple kind of gadget that emphasizes speed and compactness.
The definitions of ex1', ex2' specialize the output types of ex1,
ex2 to a particular cyclotomic data type PNoiseCyc that specifies a
desired noise rate for the corresponding ciphertext; the 0 arguments
say that the output ciphertexts should be decryptable but need not
support any further homomorphic operations. (The underscores
indicate types that will be inferred by the Haskell type checker.)
This specialization is needed so that the Alchemy compiler can
convert the plaintext types to corresponding ciphertext types, and
statically (back)track error rates.
Having defined the needed types, we can compile our plaintext-
DSL expressions to corresponding ciphertext-DSL expressions us-
ing the public interface pt2ct (whose type signature is given in Sec-
tion 4.1); the resulting ciphertext-DSL program can then be handled
by any suitable interpreter. One subtlety is that because the com-
piler automatically generates all the requisite random keys and
key-switch hints, it is necessarily monadic, i.e., non-pure. We there-
fore use Haskell’s “do notation” to invoke pt2ct in an appropriate
monadic context. For example, we can compile ex1' (which, to
recall, represents (x + y) * y) and print the resulting “sugar-free”
ciphertext-DSL expression as follows:
do ct1  (\v3 ->
((\v4 -> (modSwitch
((\v4 -> (keySwitchQuad  (modSwitch v4))) v4)))
((mul v2) v3))))
((add v0) v1)) v1)))"
-- "(\v0 -> (\v1 ->
--
--
--
--
--
Despite the abundant variables and parentheses, the structure can
be teased out. First, because this is a program in the ciphertext DSL,
we should think of all the variables as representing FHE ciphertexts.
The expression is a function of two inputs, denoted v0 and v1. In the
“inner” layer, the variable v2 is bound to ((add v0) v1), and v3 is
bound to v1.4 These two ciphertexts are multiplied, which results
in a “quadratic” ciphertext, to which v4 is bound. This is modulus-
switched to match the key-switching hint, then key-switched to a
“linear” ciphertext by keySwitchQuad, then finally switched back
to an appropriate modulus for its inherent noise rate. We again
stress that the creation of the key-switch hints, and the selection
of appropriate moduli for hints and ciphertexts, (which are not
displayed in the printer output), is handled automatically.
As another example, we can compile the expression ex2' (which
represents two successive ring-switches) and print the result:
do ct2  (modSwitch (tunnel  (modSwitch v0))))
((\v0 -> (modSwitch (tunnel  (modSwitch v0))))
v0)))"
-- "(\v0 ->
--
--
--
The program takes a ciphertext denoted v0 as input, switches it
to the modulus of the “tunneling hint” that encodes the desired
linear function, then switches rings by “tunneling” with the hint,
then switches back to an appropriate ciphertext modulus. The same
cycle is repeated for the next tunneling step. (Note that some of the
modulus-switches may turn out to be null operations, depending
on the noise rates.)
1.3.4 Evaluating and Logging. While it is nice to be able to see a
representation of ciphertext-DSL programs, we are more interested
in evaluating them to perform a homomorphic computation on
4Note that the expression is highly amenable to “inlining” using β-reduction; while our
compiler does not currently perform such optimizations at the DSL level (though that
could be done by an additional interpreter), the Haskell compiler itself would likely do
so. In any case, the performance cost of not inlining is negligible when compared with
homomorphic operations.
ciphertexts. Fortunately, this is extremely simple: just replace print
with eval in the above code! This specializes the (polymorphic)
interpreter of the output ciphertext-DSL program to the evaluator E
rather than the printer P.
In addition, for diagnostic purposes we may wish to measure the
“error rates” of the ciphertexts as homomorphic evaluation proceeds.
(E.g., during development this was very helpful for designing our
static noise tracker to closely approximate the true noise growth,
and for finding subtle implementation bugs.) Such logging is very
easy using the ERW interpreter, which transforms any ciphertext-
DSL program to an equivalent one that additionally logs the error
rates of all generated ciphertexts. The transformed program can
then be evaluated (or printed, or sized, etc.) as usual. One important
subtlety is that the transformed program itself —rather than just the
process of generating it—is monadic, because it uses the side effect
of writing DSL values to a log. Therefore, our ciphertext DSL needs
to support monadic computation, which it does modularly via the
Monad_ and related language components. Continuing our previous
example:
do logct2 >= ($ inputCT)
return log
-- "Error rates:
-- ("modSwitch_Q539360641*Q537264001",6.8495e-7),
-- ("tunnel_Q539360641*Q537264001",3.3651e-6),
-- ("modSwitch_Q537264001",7.3408e-6),
-- ("modSwitch_Q537264001",7.3408e-6),
-- ("tunnel_Q537264001",1.8010e-4),
-- ("modSwitch_Q537264001",1.8010e-4)"