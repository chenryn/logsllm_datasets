regardless of 𝛼 and 𝛾. Besides, 𝑅𝐸𝑅𝐵,𝐵′
increases with 𝛼,
since the attacker will have more reward (and more bribes
according) with a larger 𝛼.
𝑏
𝑏
𝑎
𝑎
Furthermore, we consider the attacker’s reward of different
strategies (𝐻, 𝑆, or 𝐵). We set 𝜀 = 0.02 and 𝛽𝑏 = 0.2.
The attacker’s dominant strategies (𝑅𝐸𝑅𝐵,𝐻
and 𝑅𝐸𝑅𝐵,𝑆
)
are depicted in Fig. 10-b and 10-c. In Fig. 10-b, the right
side of the line indicates honest mining is the dominant
strategy, while the left side means BSM is the dominant
one. Comparing with the results in [9], the winning area of
BSM is larger than selfish mining. By properly setting 𝜀,
BSM gives a less threshold of launching attacks (e.g. when
𝛾 = 0, BSM only requires 𝛼 > 0.31, while selfish mining
requires 𝛼 > 0.33). Furthermore, comparing with selfish
mining, BSM is dominant in most cases, as depicted in Fig.
10-c. Selfish mining only outperforms BSM when 𝛼 is large
enough (𝛼 > 0.46 in this case). Based on Theorem 6.1, the
winning area of BSM can be extended with a smaller 𝜀.
𝑏
More specifically, we consider two cases: target’s mining
power is 0.1 and 0.3 respectively. We set bribes to 𝜀 = 0.02.
Comparing with honest mining, the extra relative rewards of
the target are depicted in Fig. 11-a and 11-b. When 𝑅𝐸𝑅𝐵,𝐻
and 𝑅𝐸𝑅𝐵′,𝐻
are positive, BSM can bring the target more
reward than honest mining. As expected, the rewards of the
target when accepting the bribes (solid lines) are always
greater than those when denying (dash lines). The optimal
strategy for the target is to extend the attacker’s branch and
accept the bribes. The target can get a higher reward with a
smaller 𝛼, since the attacker will suffer from a loss under such
scenarios, as with [9, 22, 38]. The reward decreases when 𝛾
increases. It is because 𝛾 represents the ratio of other miners
𝑏
(c) Attacker’s RER when 𝛽𝑏 = 0.1.(d) Attacker’s RER when 𝛽𝑏 = 0.3.
Figure 11: RER of a target and an attacker in BSM. 𝑅𝐸𝑅𝐵,𝐻
and 𝑅𝐸𝑅𝐵′,𝐻
in (a) and (b). 𝑅𝐸𝑅𝐵,𝐻
and 𝑅𝐸𝑅𝐵′ ,𝐻
in (c) and
𝑏
𝑎
𝑎
(d).
𝑏
Table 4: The target’s extra relative reward (%) in BSM
(𝑅𝐸𝑅𝐵,𝐻
RERs in simulation and theoretical analysis respectively.
). The values 𝑥(𝑦) indicate the target’s
and 𝑅𝐸𝑅𝐵′ ,𝐻
𝑏
𝑏
𝛾 = 0
𝛾 = 0.25
𝛾 = 0.5
𝛾 = 0.75
𝛾 = 1
Accept 5.85(5.84) 3.76(3.74)
Deny
3.82(3.84) 1.64(1.65)
1.64(1.65)
-0.54(-0.55)
-0.44(-0.44)
-2.75(-2.74)
-2.55(-2.53)
-4.94(-4.94)
who extend the attacker’s branch (i.e., other targets). These
miners can damage the target’s rewards when they decide to
mine on attacker’s branch (event c-3). The loss will increase
with more other targets (larger 𝛾).
For an attacker, her RERs are depicted in Fig. 11-c and 11-
d. When satisfying Equation (16) (a relatively small 𝛼), the
attacker can get a higher reward than selfish mining. When
considering positive RER cases, the BSM can bring 10%
additional extra reward than selfish mining, which is about
0.22 × 10% × 12.5 = 0.275 BTC per round (i.e. additional
2750 USD in every 10 minutes). The extra reward (comparing
with selfish mining) is more significant with 𝛽𝑏 = 0.3.
Simulation. We implement a Monte Carlo simulator in
Matlab to verify our analysis. Suppose the target’s mining
power is 0.3, the attacker’s mining power is 0.3, and the
bribes are 0.02. We run the simulator over 108 rounds to show
the relative rewards of the target and attacker (𝑅𝐸𝑅𝐵,𝐻
,
𝑅𝐸𝑅𝐵′,𝐻
) in Table 4 and Table 5
respectively under different strategies (accepting or denying
the bribes).
, and 𝑅𝐸𝑅𝐵′,𝐻
, 𝑅𝐸𝑅𝐵,𝐻
𝑎
𝑎
𝑏
𝑏
As we expected, the rewards of the attacker and target
are almost the same as those in theoretical analysis. The
target’s optimal strategy is to accept the bribes to get a
higher reward. The attacker can increase her reward with an
acceptable cost.
00.40.1       0.2       0.300.20.40.60.81.2468101214Relative Extra Reward (%) Attacker's Mining Power ,B00.1 0.2 0.3    0.40.5Attacker's Mining Power ,00.20.40.60.81.-60-40020406080100-20Relative Extra Reward (%)HB00.1    0.2     0.30.40.5Attacker's Mining Power ,00.20.40.60.81.020406080100Relative Extra Reward (%)BS00.10.40.50.2 0.3-1-0.8-0.6-0.4-0.200.2.=0, accept.=0, deny.=0.5, accept.=0.5, deny.=1, accept.=1, denyAttacker's Mining Power , Relative Extra Reward (%)00.10.40.50.2 0.3-1-0.8-0.6-0.4-0.200.2 Relative Extra Reward (%).=0, accept.=0, deny.=0.5, accept.=0.5, deny.=1, accept.=1, denyAttacker's Mining Power ,00.10.40.50.2 0.3-1-0.500.51.=0, accept.=0, deny.=0.5, accept.=0.5, deny.=1, accept.=1, denyAttacker's Mining Power , Relative Extra Reward (%)00.10.40.50.2 0.3-1-0.500.51.=0, accept.=0, deny.=0.5, accept.=0.5, deny.=1, accept.=1, denyAttacker's Mining Power , Relative Extra Reward (%)Table 5: The attacker’s extra relative reward (%) with BSM
(𝑅𝐸𝑅𝐵,𝐻
). The values 𝑥(𝑦) indicate the at-
tacker’s RERs in simulation and theoretical analysis respec-
tively.
and 𝑅𝐸𝑅𝐵′ ,𝐻
𝑎
𝑎
𝛾 = 0
𝛾 = 0.25
𝛾 = 0.5
𝛾 = 0.75
𝛾 = 1
Accept
Deny
-2.18(-2.18)
-8.94(-8.96)
2.85(2.84)
-3.85(-3.84)
7.85(7.85)
1.27(1.28)
12.86(12.87) 17.88(17.89)
6.42(6.40)
11.49(11.52)
Table 6: The target’s extra relative reward (𝑅𝐸𝑅𝐵,𝐻
𝑅𝐸𝑅𝐵′,𝐻
and Target2 respectively.
). (𝑥, 𝑦) indicate the extra relative reward of Target1
and
𝑏𝑖
𝑏𝑖
(a) 𝑅𝐸𝑅𝐵,𝐻
𝑏1
Target1
Target2
Accept at 0′
Deny at 0′
𝑜
𝑜
Accept at 0′
𝑜
Deny at 0′
𝑜
(-2.58%, -0.62%)
(3.85%, -1.85%)
(-6.44%, 1.63%)
(0.45%, 0.45%)
6.3 The Venal Miner’s Dilemma
In selfish mining and BSM, an attacker can get extra rewards
by causing forks. Previous work has pointed out these extra
rewards are from the loss of other miners (𝑏 and 𝑜) [9, 13].
For a target, the loss occurs when other miners extend the
attacker’s branch instead of the target’s (event c-3). However,
the target cannot avoid the loss regardless of different strate-
gies he takes. In other words, these events are controlled
by other miners instead of the target. When other miners
extend the attacker’s branch, the target has to accept the
loss (event c-3). Meanwhile, when the target takes the bribes,
he actually makes other miners suffer from a loss (event c-2).
We have proved that the optimal strategy for a target is to
accept the attacker’s branch even with a very small positive
value of 𝜀. Therefore, the attacker can have a very high
chance to win in forks via bribing multiple targets with little
cost and can get extra rewards with BSM. In such scenarios,
accepting the bribes becomes “avoiding a higher loss” for the
targets. The targets can fall into a “venal miner’s dilemma”:
all targets will suffer from a loss due to the attacks (similar
to the “prisoner’s dilemma”). Even though all targets can
get higher rewards when no one helps the attacker, no target
will deny the bribes since accepting the bribes is always the
local-optimal strategy at 0′
𝑜 state. Therefore, we have a single
Nash equilibrium for targets under BSM: all targets will
choose to accept the bribes and extend the attacker’s branch
at 0′
𝑜.
Notice that the “venal miner’s dilemma” is different from
the “looming tragedy” [2] and “miner’s dilemma” [7]. The
“looming tragedy” suggests that bribery attacks will damage
Bitcoin’s reputation. Miners should reject bribes and seek for
long-term incentive to avoid harming Bitcoin exchange rate.
While in BSM, even with a fixed Bitcoin exchange rate, a tar-
get can suffer from a loss due to the “venal miner’s dilemma”.
The “miner’s dilemma” involves multiple attackers. Attackers
will choose to attack each other and fall into the dilemma to
lose their rewards. While for the “venal miner’s dilemma”, it
involves one attacker and multiple targets. Targets will choose
to accept the attacker’s branch and fall into the dilemma to
lose their rewards.
1 and 𝛽𝑏
Considering two targets Target1 and Target2 with mining
power 𝛽𝑏
2 in a bribery game under BSM. We define
the winning condition for 𝑇 𝑎𝑟𝑔𝑒𝑡𝑖 is “getting a higher reward
than honest mining” (i.e., 𝑅𝐸𝑅𝐵,𝐻
> 0). Suppose 𝛼 = 0.35,
𝛽𝑏
1 = 0.2, and 𝜀 = 0.02. We show the extra rewards and
𝑏𝑖
and winning condition.(b) 𝑅𝐸𝑅𝐵,𝐻
and winning condi-
𝑏2
tion.
Figure 12: Extra rewards and winning conditions in a bribery
game. Solid lines represent no extra reward (𝑅𝐵
𝑖 ). The
𝑏𝑖
left side of each line represents the winning condition of each
target pool. The intersected part of the right sides of the two
lines represents the “venal miner’s dilemma”.
= 𝛽𝑏
Figure 13: Attacking strategy space when adopting power ad-
justing and bribery racing. Other power splitting related at-
tacks can be combination of different attacks. Other “0-lead”
racing related attacks can be stubborn mining [22].
winning condition of each target in terms of 𝛽𝑏
2 and 𝛾 (𝛾
represents the ratio other miners mining on attacker’s branch,
excluding the two targets) in Fig. 12.
The left side of each line is the winning condition of each
target. When 𝛽𝑏
2 and 𝛾 are relatively small, both targets
can win since the attacker will suffer from a loss. The extra
rewards of Target2 will not be greatly affected by 𝛾 when
𝛽𝑏
2 is small. It is because the bribes contribute to a great
part of Target2’s reward in such scenarios. Even with a large
𝛾, Target2 can still be more profitable than honest mining
(rewarding from the bribes) when 𝛽𝑏
2 is relatively small. The
union part of the winning conditions (i.e., the winning con-
dition of Target2) means there can be at least one winner,
where the winner can avoid the “venal miner’s dilemma”.
While for other parts (the left side of Target2’s line), both of
targets fall into the dilemma (no winner). For an attacker,
when proper values of 𝛽𝑏
2, and 𝜀 are chosen, the attacker
can ensure a higher reward and make targets fall into the
dilemma regardless of 𝛾.
1, 𝛽𝑏
We present a more intuitive example to show the venal
miner’s dilemma in BSM (we set 𝛾 = 0 to avoid other targets).
Suppose the mining power of the attacker, Target1, and
Target2 is 0.33, 0.1, and 0.3 respectively. The theoretical
extra relative rewards of the targets are shown in Table 6.
The optimal strategy for both targets is to accept the bribes
at 0′
𝑜 (bold numbers). However, both of them will suffer from
a loss due to the BSM, compared with the rewards when
denying.
7 DISCUSSION
7.1 Strategy Space and Bribery PAW
We have discussed power adjusting with FAW and bribery
racing with selfish mining. We also believe that power adjust-
ing strategy can be applied to other power splitting related
00.10.20.30.40.5-b200.20.40.60.81.-0.7-0.6-0.5-0.4-0.3-0.2-0.100.10.2Extra Reward00.10.20.30.40.500.20.40.60.81-0.8-0.6-0.4-0.200.20.40.60.8-b2.Extra Reward0-LSMBWHPSFAWB-0-LBSMB-FAWadopt bribery racingPA-BWHPA-PSPAWadopt power adjustingB-PAWadopt power adjusting and bribery racing0-L: other  0-lead   racing related attacksPS: other power splitting related attacksattacks such as BWH or launching different kinds of attacks
simultaneously, and bribery racing to other “0-lead” racing
related attacks such as stubborn mining [22]. A potential
attacking strategy space is presented in Fig. 13. Furthermore,
since the “0-lead” racing also occurs in FAW and PAW, is
it also possible to combine bribery racing with FAW/PAW.
The combination can be easily achieved via bribing through
out-of-band payment or negative-fee mining pools. However,
for in-band bribing, the requirement is non-trivial since trans-
actions to be recorded are chosen by pool managers in pooled
mining. We discuss possible strategies to lure or force a pool
manager to choose the bribing transactions in Appendix-G.
In Bribery PAW (B-PAW), an attacker will only include
bribes when calculating shares in her infiltration mining
power. When an FPoW is found, she withholds it and broad-
cast a transaction to spend the bribes. When others miners
find a block, she immediately submits the withheld block to
cause “0-lead” racing. It is worth mentioning that the next
round of infiltration mining does not include bribes and will
immediately submit the newly discovered FPoW (different
from FAW/PAW) since the primary task here is to win in
“0-lead” racing. Some analyses on B-PAW are conducted in
Appendix-G.
7.2 PAW Countermeasure
Detecting power adjusting. The difference between FAW
and PAW attacks is the “power adjusting” mechanism in
PAW attacks. Therefore, a pool manager can detect PAW
attacks by statistically counting the number of submitted
shares for each pool miner. However, we think this approach
can be inefficient and error-prone because of two main reasons:
(1) power adjusting does not always happen in PAW attacks
(i.e. for a single victim scenario, power adjusting occurs only
after Case 4); and (2) non-frequent power adjusting is legal
and acceptable for honest miners. To more precisely detect
power adjusting, we suggest the manager set a less difficulty
constraint to find a PPoW, and count the number of shares
over time. However, to precisely identify power adjusting, it
will increase the workload of pool managers with a smaller
constraint. Besides detecting power adjusting, pool managers
can resort to methods for FAW/BWH detection. We think
detecting PAW via stale FPoWs [13] is much easier than via
power adjusting.
Detecting stale FPoWs. After receiving a new block,
pool manager can regard FPoWs forked with the new block
as stale FPoWs and expel the submitter to avoid FAW/PAW