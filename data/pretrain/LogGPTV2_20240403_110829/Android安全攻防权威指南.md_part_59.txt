demo po s teuxex/oxs/ptoxpue/~1Aep
$ deuo/touzex/3xs/pTo.xpue/~1Aop
dev:-/android/src/kernel/omap $ 1s
master分支下的AOSP内核树一直都是空的。在Git仓库中，git目录包含了还原开发历史中
任意一个工作副本所需要的全部信息。对master分支进行checkout操作是一个删除所有已追踪
文件的好办法，从而减少存储空间。
要获得AOSP支持设备的内核源代码，最后一步是checkout正确的commit。如前所述，device
目录下内核文件的commit日志总是落后于最新的内核。为了解决这个问题，可以使用/proc/version
10
下的版本字符申，或者一个解压后的内核镜像。下面的命令展示了整个过程：
shellgandroid:/ $ cat /proc/version
Linux vereion 3.0.31-g9f818de (android-bui1d9vpbe1.mtv,corp.google.con
Wed Nov 28 11:20:29 PST 2012
(gcc version 4.6.x-google 20120106 (prerelease)(GCC) ) 1 SMP PRE8HPT
在上面引1用的内容中，最重要的是内核版本号中3.0.31-g后面的7位十六进制数字：
9f818de。用这个字符申就能checkout出准确的commit。
dev:~/android/src/kernel/omap S git checkout 9f818de
HEAD is nov at 9f818de... mm: Ho1d a fi1e reference in madvise_remove
目前，你已经成功获得了目标设备的内核源代码副本，在本章后面的部分中大有用处。
---
## Page 266
250第10章攻击内核
2.获得OEM内核源代码
对于不同的厂商，获得OEM设备源代码的方法也不一样。OEM很少以提供版本控制（Git
等）的方式发布源代码，大多数厂商都会提供一个开源站点以供下载。关于OEM如何发布源代
码的更多信息请参考附录B。找到OEM的站点后，下一步就是在上面搜索目标设备的型号，然
后通常能找到可下载的内核源代码和相关编译指南的文件包。由于不同OEM的差别较大，所以
本章不作详细介绍。10.3.5节会介绍编译0EM设备内核的步骤。
10.3.2搭建编译环境
编译自定义内核模块或内核二进制文件需要一个正确的编译环境。这个环境必须包含ARM
编译工具链，以及各种编译工具，如make。正如第7章中讨论的，有好几个编译工具链可以用。
OEM厂商会将特定设备所使用的编译器记录在内核源代码包的文本文件中。对于不同的工具链，
搭建编译环境的步骤也不同。本章使用AOSP中预编译好的工具链；其他工具链不在本章介绍范
围内，如果要使用它们，请参考其文档。只需要几步就可以搭建内核编译环境，获得可用的编译
器和相关工具。
第一步是基于AOSP预编译的工具链来搭建编译环境，这与第7章内容相同。下面这个例子
使用了Android4.3系统，但无论版本为何，步骤都是相同的。
dev:-/android/src $ . bui1d/envsetup .sh
Including device/samsung/maguro/vendorsetup -sh
including sdk/bash_completion/adb.bash
dev:-/android/src $ lunch ful1_maguro-userdebug
PLATPORR_VERSION_CODENAME=REL
TARGST_PRoDOCT=fu11_maguro
PLATPORK_VERSION=4 . 3
TARGET_BUILD_VARIANr=userdebug
TARGET_BUILD_TYPE=release
TARGET_BUILD_APPS=
TARGET_CPU_VARIANT=cOrtex-a9
TARGET_ARCH_VARIANT=armv7-a-neon
HOST_ARCH=x86
HOST_0S_BxTRA=Linux-3 .2.0-52genericx86_64-w1thUbuntu12.04prec1se
HOST_0S=1inux
HOST_BUILD_TYPE=release
BUILD_ID=JWR66Y
OUT_DIR=out
dev:~/android/src $
这样，目录下就有了编译工具链，可以通过查询编译器的版本来确认。
dev:~/android/src S arm-eabi -gec --version
arm-eabi-gcc (GCC) 4.7
---
## Page 267
10.3运行自定义内核代码
251
Copyright (C) 2012 Free Software Foundation, Inc.
[...]
编译内核还需要额外的一个步骤，就是为内核编译系统设定几个环境变量，把使用的工具链
告诉内核。
dev:-/android/sre $ cd kernel/omap/
dev:~/android/src/kerne1/omap $ export SUBARCH=arm
dev:~/android/src/kerne1/cmap $ export CRoSS_coMPILE=arm-eabi -
dev:~/android/erc/kernel /omap $ export ARCH=arm
dev:~/android/src/kerne1/omap $
注意编译内核时，要使用arm-eabi编译器，而不是arm-linux-androideabi编译器。使用不正确
的EABI会导致编译失败。
设置完这些变量之后，环境就完全搭建好了，准备进人下一步，编译自定义模块或内核。但
在此之前，需要对内核进行配置。
10.3.3配置内核
Linux内核支持很多架构和硬件组件。为了能够给任意一种配置组合编译内核镜像，Linux
内核使用了一种可扩展的配置子系统。Linux内核还为配置子系统提供了多种配置界面，包括基
于QT的图形用户界面（GUI）（make xconfig），基于文本的菜单（make menuconfig）和问
答接口（make config）。Android开发者网站的文档描述了Android 内核中必需的和推荐的配置
选项:http://source.android.com/devices/tech/kermel.html。
另一种配置Android内核的最常见方式，是指定一个叫作defconfig的配置模板。这个模板存
储在内核源代码的arch/arm/configs目录中。每个Android设备都有相应的配置模板来编译内核。
GalaxyNexus的配置样例文件如下：
dev:~/android/src/kerne1/omap $ make tuna_defcontig
HOSTCC
scripts/basic/fixdep
BOSTCC
scripts/kconfig/conf.o
SHIPP&D
scripts/kconfig/zconf.tab.c
SHIPPBD
seripts/kconfig/lex.zconf.c
SHIPPRD
scripts/kconfig/zconf.hash.c
HOSTCC
scripts/kconfig/zconf.tab.o
HOSTLD
scripts/kconfig/conf
 configuration written to .config
#
在上面的片段中，内核编译系统首先编译一些用来处理配置模板文件的依赖，然后读取配置
模板，写人.config文件。不同的配置方法会最终写人文件。尽管可以直接编辑这个文件，但是我
们推荐编辑模板。
在少数情况下，AOSP代码树中的内核配置文件与设备的内核中实际使用的配置不匹配。例
---
## Page 268
252第10章攻击内核
如Nexus4的内核中禁用了CONFIG_MODULES，但是AOSP 中的make_defconfig 开启了
CONPIG_MODULES。如果内核编译时启用了CONFIG_IKCONFIG 选项，就可以使用内核 sCripts
目录下的extract-ikconfig，从解压后的内核中提取配置。另外，配置文件也会被压缩存储
到启动后设备的/proc/config-gz文件中。不幸的是，如果内核没有启用这个选项，就很难从内核
中提取配置参数。
在搭建完编译环境并配置完内核后，就已经为编译自定义的内核或模块作好了准备。
10.3.4使用自定义内核模块
使用可加载内核模块（LKM）来扩展Linux内核非常方便，无需编译整个内核。构造rootkit
时，修改内核代码和/或数据是必需的。另外，在内核空间执行代码可以调用一些特权接口，例
如TrustZone。本节以一个简单的LKM为例，来介绍儿个内核提供的工具。
编译Android设备内核模块的方法与平时不同。一般来说，编译Linux系统的内核模块会用
到/ib/modules特定版本目录下的头文件，因为内核模块必须与加载它们的内核兼容。Android设
备中没有这个目录，也没有相应文件包，好在内核源代码解决了这个问题。
之前的章节介绍了如何得到GalaxyNexus的Android 2.2系统内核源代码，如何搭建编译环
境，以及如何对内核进行配置。在此基础上，可以既快速又轻松地实现一个“HelloWorld”内核。
为了对修改进行单独追踪，我们从对应版本的设备内核源代码上新建一个分支：
dev:~/android/src/kernel/omap $ git_checkout 9f818de -b ahh_modules
Checking out fi1es: 100s (37662/37662) , done.
Switehed to a new branch 'ahh_modules
分支创建完成后，解压本章附带材料中的内核模块源代码。
dev:~/android/src/kerne1/onap $ tar zxf -/ahh/chapter10/ahh_modules.tgz
dev:=/android/src/kernel/omap S
这在Linux内核源代码的drivers 目录下创建了两个新目录，分别包含一个模块。下面是从
"HelloWorld”内核模块中截取的一个代码片段：
int init_nodule(void)
printk(KERN_INFO *$s: HELLO WORLD1e#19#\n*, _this_module,name) ;
/* force an error so we don't stay loaded */
return -1;
与其他的Linux发行版类似，在编译模块之前无需编译整个内核，只需要几个步骤就可以了，
相关命令如下：
dev:~/android/sre/kerne1/omap $ make prepare modules_prepare
scxipts/kconfig/conf --silentoldconfig Kconfig
CHK
G4n
include/1inux/version.h
Lnclude/1inux/version.h
[..-]
---
## Page 269
10.3运行自定义内核代码
253
HOSTCC script8/ka11syms
这个命令是必需的，它为编译内核模块生成了必要的脚本和头文件。
接下来使用“Hello-World”LKM源代码中的命令来编译内核模块。命令的输出如下：
dev:~/android/sre/kernel /omap $ make ARCH=arn CONFIG_AHE_HELLoNORLD=m \
M=drivers/ahh_he11owor1d
WARNING: Synbo1 version dump ~/android/src/kernel/omap/Module symvers
Lo niesing: modules wi11 have no dependencies and modversions,
[-..]
LD [α] drivers/ahh_hellowor1d/ahh_he11owor1d_mod.ko
在编译过程中会出现一个警告，但是编译仍然成功。如果你对于程序依赖和模块的版本化没
有需求，就没必要去修复它。如果有这方面的需求，或者只是不想看到这些烦人的警告，编译所
有模块就能解决问题：
dev:~/android/sre/kernel/omap $ nake modules
CHK
CHK
include/generated/utsrelease.h
include/1inux/ver8ion.h
[ . . -]
LD [x] drivers/scsi/scsi_wait_scan.ko
"HelloWorld”模块编译完成后，就可以把它推送到设备上，并装入正在运行的内核中：
dev:~/android/src/kernel/omap $ adb push \
drivers/ahh_he11owor1d/ahh_he11owor1d_mod.ko /data/local/tmp
dev:/android/src/kernel/omap $ adb she11
788 KB/s (32557 byte8 Ln 0.040s)
rooteandroid: /data/local/tsp + insncd ahh_helloworld_nod.ko
she119android: /data/1oca1/tmp $ su
推送内核后，用ADB打开一个shell。在root权限下，使用insmod命令来插人内核模块，
然后内核就开始加载模块并开始执行init_module函数。用dmesg命令来查看内核的环形缓
冲区，可以看到如下消息：
rootlandroid:/data/Loca1/tmp + dmesg 1./busybox tai1 -1
 [74062.026855] ahh_he11owor1d_mod: HELLO W0RLD1e#1e
rootgandroid:/data/1oca1/tmp 
材料中的第二个内核模块叫作ahh_setuid，是更加高级的例子。这个模块使用简单的插桩
技术制作了一个后门，使任意以用户ID31337为参数来调用setuid系统调用的程序获得root
权限。编译和安装的过程跟之前相同：
dev:~/android/src/kerne1/omap $ make ARCH=arm CONFIG_AHB_SBTUID=n 1
M=drivers/ahh_setuid
[···]
LD [X] drivers/ahh_setuid/ahh_setuid_mod,ko
dev:-/android/sre/kerne1/omap S adb push drivers/ahh_setuld/ahh_setuid_mod.ko 
648 KB/s (26105 bytes 1n 0.039s)
/data/local/tmp
Ttaue qpe s domo/touax/oas/poxpue/:ap
shel19android:/data/local/tnp $ su