### 获取AOSP内核源代码
在Git仓库中，`git`目录包含了还原开发历史中任意一个工作副本所需的所有信息。对于`master`分支下的AOSP内核树，通常它是空的。对`master`分支进行`checkout`操作可以删除所有已追踪文件，从而减少存储空间。

要获取AOSP支持设备的内核源代码，最后一步是`checkout`正确的commit。由于`device`目录下内核文件的commit日志总是落后于最新的内核，可以通过以下方法解决：
- 使用`/proc/version`中的版本字符串。
- 使用解压后的内核镜像。

例如：
```sh
$ cat /proc/version
Linux version 3.0.31-g9f818de (android-build@mvbe1.mtv.corp.google.com, Wed Nov 28 11:20:29 PST 2012) (gcc version 4.6.x-google 20120106 (prerelease) (GCC)) #1 SMP PREEMPT Thu Dec 6 17:59:26 PST 2012
```
从上面的内容中，最重要的是内核版本号中`3.0.31-g`后面的7位十六进制数字：`9f818de`。使用这个字符串可以`checkout`出准确的commit。

```sh
$ git checkout 9f818de
HEAD is now at 9f818de... mm: Hold a file reference in madvise_remove
```

至此，你已经成功获得了目标设备的内核源代码副本，在后续章节中会非常有用。

---

### 获取OEM内核源代码

不同厂商提供OEM设备源代码的方式各不相同。大多数OEM不会通过版本控制系统（如Git）发布源代码，而是提供一个开源站点供下载。关于OEM如何发布源代码的更多信息，请参考附录B。找到OEM的站点后，搜索目标设备的型号，通常可以找到可下载的内核源代码和相关编译指南。由于不同OEM的差别较大，本章不作详细介绍。第10.3.5节会介绍编译OEM设备内核的步骤。

---

### 搭建编译环境

编译自定义内核模块或内核二进制文件需要一个正确的编译环境，必须包含ARM编译工具链和各种编译工具（如`make`）。OEM厂商会在内核源代码包的文本文件中记录特定设备所使用的编译器。对于不同的工具链，搭建编译环境的步骤也不同。本章使用AOSP中预编译好的工具链；其他工具链不在本章介绍范围内，如果要使用它们，请参考其文档。

以下是基于AOSP预编译工具链搭建编译环境的步骤：

```sh
$ . build/envsetup.sh
Including device/samsung/maguro/vendorsetup.sh
including sdk/bash_completion/adb.bash
$ lunch full_maguro-userdebug
PLATFORM_VERSION_CODENAME=REL
TARGET_PRODUCT=full_maguro
PLATFORM_VERSION=4.3
TARGET_BUILD_VARIANT=userdebug
TARGET_BUILD_TYPE=release
TARGET_BUILD_APPS=
TARGET_CPU_VARIANT=cortex-a9
TARGET_ARCH_VARIANT=armv7-a-neon
HOST_ARCH=x86
HOST_OS_EXTRA=Linux-3.2.0-52-generic-x86_64-with-Ubuntu-12.04-precise
HOST_OS=linux
HOST_BUILD_TYPE=release
BUILD_ID=JWR66Y
OUT_DIR=out
```

这样，目录下就有了编译工具链，可以通过查询编译器的版本来确认：

```sh
$ arm-eabi-gcc --version
arm-eabi-gcc (GCC) 4.7
Copyright (C) 2012 Free Software Foundation, Inc.
[...]
```

编译内核还需要设定几个环境变量，告诉内核使用的工具链：

```sh
$ cd kernel/omap/
$ export SUBARCH=arm
$ export CROSS_COMPILE=arm-eabi-
$ export ARCH=arm
```

注意，编译内核时应使用`arm-eabi`编译器，而不是`arm-linux-androideabi`编译器。使用不正确的EABI会导致编译失败。

---

### 配置内核

Linux内核支持多种架构和硬件组件，并使用一种可扩展的配置子系统来处理这些配置。常见的配置界面包括基于QT的图形用户界面（`make xconfig`）、基于文本的菜单（`make menuconfig`）和问答接口（`make config`）。Android开发者网站的文档描述了Android内核中必需的和推荐的配置选项：[http://source.android.com/devices/tech/kernel.html](http://source.android.com/devices/tech/kernel.html)。

另一种常见的方式是指定一个名为`defconfig`的配置模板。这个模板存储在内核源代码的`arch/arm/configs`目录中。每个Android设备都有相应的配置模板来编译内核。例如，Galaxy Nexus的配置样例文件如下：

```sh
$ make tuna_defconfig
HOSTCC scripts/basic/fixdep
HOSTCC scripts/kconfig/conf.o
SHIPPBD scripts/kconfig/zconf.tab.c
SHIPPBD scripts/kconfig/lex.zconf.c
SHIPPBD scripts/kconfig/zconf.hash.c
HOSTCC scripts/kconfig/zconf.tab.o
HOSTLD scripts/kconfig/conf
configuration written to .config
#
```

在少数情况下，AOSP代码树中的内核配置文件与设备实际使用的配置不匹配。例如，Nexus 4的内核中禁用了`CONFIG_MODULES`，但AOSP中的`make_defconfig`开启了`CONFIG_MODULES`。如果内核编译时启用了`CONFIG_IKCONFIG`选项，可以使用内核`scripts`目录下的`extract-ikconfig`从解压后的内核中提取配置。另外，配置文件也会被压缩存储到启动后设备的`/proc/config.gz`文件中。

---

### 使用自定义内核模块

使用可加载内核模块（LKM）来扩展Linux内核非常方便，无需编译整个内核。构造rootkit时，修改内核代码和/或数据是必需的。另外，在内核空间执行代码可以调用一些特权接口，例如TrustZone。本节以一个简单的LKM为例，介绍几个内核提供的工具。

编译Android设备内核模块的方法与平时不同。一般来说，编译Linux系统的内核模块会用到`/lib/modules`特定版本目录下的头文件，因为内核模块必须与加载它们的内核兼容。Android设备中没有这个目录，也没有相应文件包，但内核源代码解决了这个问题。

之前的章节介绍了如何获取Galaxy Nexus的Android 2.2系统内核源代码、搭建编译环境以及配置内核。在此基础上，可以快速轻松地实现一个“Hello World”内核模块。为了对修改进行单独追踪，我们从对应版本的设备内核源代码上新建一个分支：

```sh
$ git checkout 9f818de -b ahh_modules
Checking out files: 100% (37662/37662), done.
Switched to a new branch 'ahh_modules'
```

分支创建完成后，解压本章附带材料中的内核模块源代码：

```sh
$ tar zxf ~/ahh/chapter10/ahh_modules.tgz
```

这在Linux内核源代码的`drivers`目录下创建了两个新目录，分别包含一个模块。下面是从“Hello World”内核模块中截取的一个代码片段：

```c
int init_module(void)
{
    printk(KERN_INFO "%s: HELLO WORLD\n", _this_module->name);
    /* force an error so we don't stay loaded */
    return -1;
}
```

在编译模块之前无需编译整个内核，只需几个步骤即可：

```sh
$ make prepare modules_prepare
scripts/kconfig/conf --silentoldconfig Kconfig
CHK     include/linux/version.h
HOSTCC  scripts/kallsyms
```

接下来使用“Hello-World”LKM源代码中的命令来编译内核模块：

```sh
$ make ARCH=arm CONFIG_AHH_HELLO_WORLD=m M=drivers/ahh_helloworld
WARNING: Symbol version dump ./Module.symvers missing; modules will have no dependencies and modversions.
[-..]
LD [α] drivers/ahh_helloworld/ahh_helloworld_mod.ko
```

在编译过程中会出现一个警告，但如果不需要依赖和模块版本化，可以忽略它。如果有这方面的需求，或者只是不想看到这些烦人的警告，可以编译所有模块：

```sh
$ make modules
CHK     include/generated/utsrelease.h
CHK     include/linux/version.h
[ . . -]
LD [x] drivers/scsi/scsi_wait_scan.ko
```

“Hello World”模块编译完成后，可以将其推送到设备并装入正在运行的内核中：

```sh
$ adb push drivers/ahh_helloworld/ahh_helloworld_mod.ko /data/local/tmp
$ adb shell
788 KB/s (32557 bytes in 0.040s)
root@android:/data/local/tmp # insmod ahh_helloworld_mod.ko
root@android:/data/local/tmp # dmesg | tail -n 1
[74062.026855] ahh_helloworld_mod: HELLO WORLD
```

材料中的第二个内核模块叫作`ahh_setuid`，是一个更高级的例子。这个模块使用简单的插桩技术制作了一个后门，使任意以用户ID 31337为参数来调用`setuid`系统调用的程序获得root权限。编译和安装的过程与之前相同：

```sh
$ make ARCH=arm CONFIG_AHB_SETUID=y M=drivers/ahh_setuid
[···]
LD [X] drivers/ahh_setuid/ahh_setuid_mod.ko
$ adb push drivers/ahh_setuid/ahh_setuid_mod.ko /data/local/tmp
648 KB/s (26105 bytes in 0.039s)
root@android:/data/local/tmp # su
```

至此，你已经成功编译并安装了自定义内核模块。