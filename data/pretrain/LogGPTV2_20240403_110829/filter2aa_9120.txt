# dctfizer (RevCrypt 400)
> Format Response: DCTF{md5(sol)} https://dctf.def.camp/quals-2016/re400.bin 
> [UPDATE]: Initially it was MDCCCXLVI ...... don't even bother if you have nerve problems. 
> [UPDATE] Updated ciphertext again. This time key was modified too! --- http://pastebin.com/r4BndGiy
In this task, we got just the encrypted, hex-encoded file. It was easy to see some patterns were repeating, such as
`qEdocBqhc` or `8dwnel`. If we read them backwards, they are `chqBcodEq` and `lenwd8`, respectively, which seem similar
to `charCode` or `length` - some JavaScript function names - which seemed good, so we reversed the whole ciphertext. 
We found a couple of such ciphertext-plaintext pairs and noticed
that the lower nibbles of the character never changes - for example, `q` (ASCII 0x71) from `chqBcodE` was changed to `a`
(ASCII 0x61). We wrote an [interactive brute forcer](interactive.py), which allowed us to recover a couple
dozens of plaintext bytes:
```
`ufa,(hvensdio.(y{fq"p:];8)> 7) & 255);
    }
    console["log"](l["charCodeAt"](4));
    for (a = 0; a > 7) & 255);
    }
```
The key is basically rotating, so if the first byte was `1100` then the first byte of extended key part would be `1001` and in the next round `0011` and so on. 
This means that if we could extract a single bit position of the key, with enough ciphertext length we could extract the whole key.
However the code here was broken because `% 234` does not leave any bit position intact (maybe they wanted to do `& 234`?).
We contacted admins and they admited that it was a mistake and it should have been `128` and not `234`, which basically coverges this task to the same problem as here:
https://github.com/p4-team/ctf/tree/master/2015-11-20-dctffinals/crypto300#eng-version
Because now the MSB of all of the XORed elements is 0 apart from the one from key, so we can extract all MSB bits from ciphertext and combine them to recover the key (we need to brute-force the key length as well but the range is small).