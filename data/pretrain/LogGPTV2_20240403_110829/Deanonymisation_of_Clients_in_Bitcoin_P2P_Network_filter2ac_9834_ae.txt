We also described a number of techniques that reveal the
topology of the Bitcoin network. Some of them are used for
our attack, but the entire set is interesting by themselves
and not only in the context of deanonymisation. For exam-
ple it can be used as a tool to better understand relations
between Bitcoin peers (e.g. one can check if peers of major
pools keep permanent connections between each other). As
another example, an adversary can ﬁnd the minimal cut in
the network graph and target those connections with denial-
of-service attacks (an example of a memory exhaustion at-
tack that we discovered while digging through the Bitcoin
source code can be found in Appendix E). This would re-
sult in splitting the network in two parts. Our results open
several directions for the future research.
Yet another feature is the lack of authentication within the
network, which requires the nodes to blacklist misbehaving
peers by IP. We ﬁgured out that very short messages may
cause a day IP ban, which can be used to separate a given
node or the entire network from anonymity services such as
proxy servers or Tor. If the Bitcoin community wishes to
use Tor, this part of the protocol must be reconsidered.
Finally, we showed that the routine procedure of adding
a checkpoint to the client code might be exploited to con-
struct an alternate reality. While too noticable as an attack
scenario, this idea can be a solution in the case of unforeseen
and unsustainable rise of diﬃculty.
12. REFERENCES
[1] Best VPN’s using Bitcoin.
https://bitcointalk.org?topic=247212.0, 2014.
[2] Bitcoin code project, v.0.8.6.
https://github.com/bitcoin/bitcoin, 2014.
[3] Bitcoin Wiki. https://en.bitcoin.it/wiki/, 2014.
[4] Bitnodes. https://github.com/ayeowch/bitnodes,
2014.
[5] BlockChain.info. https://blockchain.info/charts,
2014.
[6] D. Chaum, A. Fiat, and M. Naor. Untraceable
electronic cash. In Proceedings on Advances in
Cryptology (CRYPTO ’88). Springer, 1988.
[7] R. Dingledine, N. Mathewson, and P. F. Syverson.
Tor: The second-generation onion router. In Usenix
Security Symposium (USENIX ’04), 2004.
[8] C. M. Grinstead and J. L. Snell. Introduction to
Probability. American Mathematical Society, 1997.
[9] P. Koshy, D. Koshy, and P. McDaniel. An analysis of
anonymity in bitcoin using P2P network traﬃc. In
Proceedings of Financial Cryptography and Data
Security (FC’14). Springer, 2014.
[10] S. Lerner. New vulnerability: know your peer public
addresses in 14 minutes.
https://bitcointalk.org/?topic=135856, 2014.
no names. In Proceedings of Conference on Internet
Measurement Conference (IMC’13). ACM, 2013.
[12] S. Nakamoto. Bitcoin: A peer-to-peer electronic cash
system. 2009. http://www.bitcoin.org/bitcoin.pdf.
[13] OnionCat An Anonymous VPN-Adapter.
https://www.onioncat.org/about-onioncat/, 2014.
[14] F. Reid and M. Harrigan. An analysis of anonymity in
the bitcoin system. In Security and Privacy in Social
Networks. Springer, 2013.
[15] D. Ron and A. Shamir. Quantitative analysis of the
full bitcoin transaction graph. In Financial
Cryptography and Data Security (FC’13). Springer,
2013.
APPENDIX
A. ESTIMATING SUCCESS RATE: DETAILS
In this section we describe a mathematical model that
allows us to estimate the success rate of the deanonymization
attack.
As inputs, we take the average probability paddr over the
network, which is estimated in Section 8.1, and the distribu-
tion of the number of entry nodes among the ﬁrst 10 nodes
reporting a transaction to attacker’s peers (Section 7). We
extrapolate the latter probability spectrum from the test
net to the main net, which assumes similar network perfor-
mance and the stability of the spectrum when the attacker
has more or fewer connections to servers. The correctness
of the extrapolation can be tested only by mounting a full-
scale attack on the network, which we chose not to perform
for ethical reasons.
First, we introduce two combinatorial formulas. Suppose
that there are N balls. If each ball is red with probability
pa, and green with probability 1 − pa, then the probability
that there are R red balls is
P1(R; N ) =
a(1 − pa)N−R
pj
(1)
(cid:32)
(cid:33)
N
R
Now assume that there are R red balls and N − R green
balls. Suppose that we select L balls at random out of N .
The probability that there will be exactly q red balls among
L chosen is computed as follows:
(cid:0)R
q
(cid:1)
(cid:1)(cid:0)N−R
(cid:0)N
(cid:1)
L−q
.
P2(q ; L, R, N ) =
L
Now we get back to Bitcoin. If each entry node is detected
with probability pAvg
addr = 0.34 (Section 8.3), then according
to Eq. (1) we detect R entry nodes out of 8 with the following
probability spectrum:
P1(R; 8) :
Nodes Probability
1
2
3
4
5
6
7
8
0.15
0.27
0.28
0.18
0.07
0.02
0.002
0.0002
[11] S. Meiklejohn, M. Pomarole, G. Jordan, K. Levchenko,
D. McCoy, G. M. Voelker, and S. Savage. A ﬁstful of
bitcoins: Characterizing payments among men with
Based on our experiments on the Bitcoin test net (Sec-
tion 7), we computed the probability to have L entry nodes
among the top-10 (Table 3).
We assume that both events are independent. Then the
probability that at least M out of these L nodes we have
detected (i.e. it belongs to the set of R entry nodes) is
Psuccess(M ) =
P2(q ; L, R, 8) · P1(R; 8) · P3(L);
(cid:88)
(cid:88)
(cid:88)
q≥M
L≤8
R≤8
We have made some calculations and got the following re-
sults:
(cid:88)
(cid:88)
L≤8
R≤8
P2(q ; L, R, 8) · P1(R; 8) · P3(L) :
0.366
0.243
L Probability
1
2
3
4
5
0.9
0.02
0.002
Psuccess(M ) :
M Probability
1
2
3
4
5
0.721
0.355
0.112
0.022
0.002
Therefore, we expect to catch 3-tuples in 11% of transac-
tions, and 2-tuples in 35% of transactions.
We applied this model to the testnet as well, and obtained
that it ﬁts our actual deanonymization results well:
Estimated paddr Deanonymization rate with 3-tuples
0.64
0.86
Actual
41%
59.9%
Predicted
43%
65.6%
B. ATTACK COSTS
The expenses for the attack include two main components:
(1) renting machines for connecting to Bitcoin servers and
listening for INVENTORY messages; (2) periodically advertising
potential client addresses in the network. Note that if an
attacker rents servers, the incoming traﬃc for the servers is
normally free of charge. Assuming that an attacker would
like to stay stealthy, she would want to have 50 diﬀerent
IP addresses possibly from diﬀerent subnetworks. Thus she
might want to rent 50 diﬀerent servers. Assuming monthly
price per one server 25 EUR, this results in 1250 EUR per
month.
When advertising potential client addresses, the attacker
is interested in that the addresses propagate in the network
P3(L) :
Nodes Probability
1
2
3
4
5
6
7
8
0.02
0.055
0.1225
0.245
0.2125
0.2125
0.0925
0
as fast as possible.
In order to achieve this the attacker
might try to advertise the addresses to all servers simulta-
neously. Given that there are 100,000 potential clients and
the attacker needs to send 10 addresses per ADDR message,
this results in 10,000 ADDR messages of 325 bytes each per
Bitcoin server or (given there are 8,000 Bitcoin servers) 24.2
GB in total.
If an attacker advertises the addresses every 10 minutes
and she is interested in continuously deanonymising trans-
action during a month, it will require sending 104,544 GB
of data from 50 servers. Given that 10,000 GB per server is
included into the servers price and the price per additional
1,000 GB is 2 EUR, the attacker would need to pay 109 EUR
per month. As a result the total cost of the attack is esti-
mated to be less than 1500 EUR per month of continuous
deanonymisation.
C. TRANSACTION PROPAGATION DELAY
In this section we measure transaction propagation de-
lays between our high-speed server (1 Gbit/s, Intel Core i7
3GHz) located in Germany and 6,163 other Bitcoin servers.
As was described in Section 2, it takes 3 steps to forward a
transaction between two Bitcoin peers. As we are not able
to obtain times when a remote peer sends an INVENTORY mes-
sage, we skipped the ﬁrst step (i.e. propagation delays of
INVENTORY messages) and measured time diﬀerences between
receptions of corresponding INVENTORY messages and recep-
tions of the transactions. Note however that the size of an
INVENTORY message is 37 bytes, while the size of a transac-
tion which transfers coins from one pseudonym to two other
pseudonyms is 258 bytes. Thus the obtained results can
serve as a good approximation. For each Bitcoin server we
collected 70 transactions and combined them into a single
dataset (thus having 431,410 data points). Fig. 10 shows
probability density function of the transaction propagation
delay between our node and other Bitcoin servers and Fig. 11
shows the corresponding cumulative distribution.
Figure 10: Transaction propagation delay, density
Table 3: Probability that L entry nodes (out of 8)
appear in the top-10 of those that forward the trans-
action to adversary’s client.
D. ON STABILITY OF THE FINGERPRINT
In this section we estimate the stability of a client’s ﬁn-
gerprint (the set of eight ﬁrst-hop connections). According
 0 2 4 6 8 10 12 0 50 100 150 200 250 300 350 400 450% of connectionsTime, secondsFig. 12 shows that after 2.5 hours only one node would
disconnect on average and only two nodes will disconnect
after 10 hours. So for the typical duration of a client ses-
sion the ﬁngerprint is very stable. In our experiment, after
running our Bitcoin client for about 10 hours 3 nodes out of
eight have disconnected.
The second point we address in this section is regard-
ing the usage of VPN which is a popular recommendation
for preserving anonymity in Bitcoin [1]. While protecting
a user’s IP, the stability of the ﬁngerprint still allows an
attacker to glue together diﬀerent Bitcoin addresses of the
same user. We checked the stability of the ﬁngerprint on the
Bitcoin testnet while connecting to the network:
1. via public free VPNs (vpngate.net);
2. via a non-free one (AirVPN).
3. via our own VPN server.
For cases 2 and 3, the stability of the ﬁngerprint was the
same as if no VPN was used. For case 1, connections to
entry nodes were dropped from time to time (about every
20 mins for the main net and about every few minutes for the
testnet due too absence of traﬃc) by the VPN servers. It’s
likely that free VPN servers were set with small inactivity
timeouts and some limits for connection durations.
E. DENIAL OF SERVICE
In this section we analyse the security of Bitcoin network-
ing protocol against Denial of Services attacks.
E.1 Memory exhaustion by address ﬂooding
Bitcoin’s peer discovery protocol has a mechanism which
prevents multiple retransmissions of the same addresses: for
each connection it has, a Bitcoin node maintains a history
(Implemented as an instance of std::set C++ class) of ad-
dresses which were sent over this connection. This history
is emptied once per every 24 hours and more importantly
does not limit the number of elements it holds. In order to
check if one can ﬂood this container with fake addresses we
conducted a simpliﬁed experiment. We set up locally two
Bitcoin nodes so that when one of the nodes (the target) re-
ceives an ADDR message it forwards the addresses it contains
to just one neighbour. Both machines had Ubuntu 12.04
installed with 2Gb of RAM and the same amount of swap
memory. They were running bitcoind version 0.8.6.
We were sending fake addresses with the rate of 30,000
addresses per second. After approximately 45 minutes, the
response delay to the user’s interactions became signiﬁcant
and the node was unreachable for new Bitcoin connections.
We also mounted a reduced version of this attack on our
own Bitcoin node in the real network. We terminated the
experiment when the memory consumption increased by 100
MB.
Figure 11: Transaction propagation delay, cumula-
tive
to the bitcoind source code (version v0.9.1), there are three
reasons why an entry node can be disconnected from a client:
• The client switched oﬀ the computer/closed Bitcoin ap-
• No data was sent over a connection for 1.5 hours.
• An Entry node goes oﬄine.
plication.
Given the number of transitions generated by the network[5],
block generation rate, and addresses propagation, some data
is normally sent to and from the entry nodes within 1.5
hours.
In order to estimate the probability of an entry node go-
ing oﬀ-line we we took data from http://getaddr.bitnodes.io
which produces a list of running Bitcoin servers every ﬁve
minutes. We analysed the data for two weeks. The proba-
bility for a node to disconnect after speciﬁc amount of time
with 95% conﬁdence interval is shown on Fig. 12.
Figure 12: Bitcoin servers churn rate
 0 20 40 60 80 100 0 200 400 600 800 1000% of connectionsTime, seconds 0 5 10 15 20 25 30 35 0 2 4 6 8 10Disconnected servers, %Time, hours