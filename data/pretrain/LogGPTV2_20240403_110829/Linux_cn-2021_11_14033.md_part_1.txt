---
author: Seth Kenlon
category: 技术
comments_data:
- date: '2021-11-30 19:16:05'
  message: 任何人都不要轻易去编译一个软件，否则会带来一堆这辈子也无法解决也解决不了的系统报错
  postip: 120.230.61.70
  username: 来自120.230.61.70的 Chrome Mobile 80.0|Android 10 用户
- date: '2021-11-30 19:16:05'
  message: 任何人都不要轻易去编译一个软件，否则会带来一堆这辈子也无法解决也解决不了的系统报错
  postip: 120.230.61.70
  username: 来自120.230.61.70的 Chrome Mobile 80.0|Android 10 用户
- date: '2021-11-30 19:16:41'
  message: 任何人都不要轻易去编译一个软件，否则会带来一堆这辈子也无法解决也解决不了的系统报错
  postip: 120.230.61.70
  username: 来自120.230.61.70的 Chrome Mobile 80.0|Android 10 用户
- date: '2021-12-01 10:06:26'
  message: 依赖是个大问题，我就从没编译成功过。源码包就像是医院里等待器官移植的病人，都是缺胳膊少腿或是缺心少肺的。
  postip: 112.96.180.188
  username: 来自广东广州的 Chrome Mobile 71.0|Android 6.0 用户
- date: '2021-12-02 19:01:31'
  message: 不要安装到系统目录下，新建一个目录保存二进制文件
  postip: 124.126.230.130
  username: 来自北京的 Firefox 94.0|Ubuntu 用户
count:
  commentnum: 5
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 13300
date: '2021-11-30 13:37:14'
editorchoice: true
excerpt: 你不需要知道如何写或读代码就可以编译它。
fromurl: https://opensource.com/article/21/11/compiling-code
id: 14033
islctt: true
largepic: /data/attachment/album/202111/30/133708wgq4rkecgbre93e1.jpg
permalink: /article-14033-1.html
pic: /data/attachment/album/202111/30/133708wgq4rkecgbre93e1.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 你不需要知道如何写或读代码就可以编译它。
tags:
- 编译
- 安装
thumb: false
title: 任何人都可以通过这三个简单的步骤编译开源代码
titlepic: true
translator: wxy
updated: '2021-11-30 13:37:14'
---
> 
> 你不需要知道如何写或读代码就可以编译它。
> 
> 
> 
![](/data/attachment/album/202111/30/133708wgq4rkecgbre93e1.jpg "Developing code.")
安装软件的方法有很多，但开源让你有了一个其他地方所没有的选择：你可以自己编译代码。编译源代码的经典三步流程是：
```
$ ./configure
$ make
$ sudo make install
```
由于有了这些命令，你可能会惊讶地发现，你不需要知道如何写代码，甚至不需要读代码就可以编译它。
### 安装用来构建软件的命令
由于这是你第一次进行编译，所以有一个一次性的准备步骤，即安装用于构建软件的命令。具体来说，你需要一个编译器。编译器（比如 GCC 或 LLVM）可以将像这样的源代码：
```
#include 
using namespace std;
int main() {
  cout  当前   current ”或 “ 每夜   nightly ”）的构建版本，也有打包的“ 稳定   stable ”发布版本。在可能的情况下，使用稳定版本，除非你有理由相信，或者对代码有足够的了解，能够在出现故障时修复。术语“稳定版”表明这些代码经过了测试，而且该应用程序的程序员对代码有足够的信心，从而将其打包成 `.zip` 或 `.tar` 归档，给了它一个官方编号，有时还有一个发布名称，然后提供给一般的非程序员公众下载。
在这个练习中，我使用 [Angband](https://rephial.org/)，一个开源的（GPLv2）ASCII 地牢猎手游戏。这是一个简单的应用程序，其复杂程度刚好可以说明你在自己编译软件时需要考虑的问题。
从 [网站](https://rephial.org/) 上下载其源代码。
### 2、展开源代码的存档文件
源代码通常是以存档的形式交付的，因为源代码通常由多个文件组成的。在与之交互之前，你必须先解压，不管它是一个 tarball、一个 zip 文件、一个 7z 文件，还是其他完全不同的东西。
```
$ tar --extract --file Angband-x.y.z.tar.gz
```
一旦解压缩后，就把目录切换到解压缩的目录，然后看一看。通常在目录的顶层有一个 `README` 文件。这个文件，一般会包含你需要做什么来编译代码的指导。`README` 通常包含关于代码的这些重要方面的信息：
* **语言**：代码使用的是什么语言（例如，C、C++、Rust、Python）。
* **依赖性**：你需要在你的系统上安装其他什么的软件，以便这个应用程序能够构建和运行。
* **说明**：你构建该软件所需要采取的明确步骤。偶尔，他们会在一个专门的文件中包含这些信息，这个文件被直观地称为 `INSTALL`。
如果 `README` 文件中不包含这些信息，可以考虑向开发者提交一份错误报告。你不是唯一需要介绍一下源代码的人。不管他们有多么丰富的经验，每个人都会对从未见过的源代码感到陌生，而文档是很重要的！
Angband 的维护者给出了在线说明的链接，描述了如何编译代码。这份文件还描述了你需要安装哪些其他软件，尽管它并没有确切地说明这一点。该网站说，“有几个不同的可选构建的前端（GCU、SDL、SDL2 和 X11），你可以使用诸如 `--enable-sdl`，`--disable-x11` 的参数配置。”这可能对你来说看起来像天书，但你经常编译代码后就会习惯。无论你是否理解 X11 或 SDL2 是什么，它们都是你经过几个月定期编译代码后经常看到的要求。你会对大多数软件需要其他软件库的想法感到适应，因为它们建立在其他技术之上。不过在这种情况下，Angband 非常灵活，无论是否有这些可选的依赖，都可以进行编译，所以现在，你可以假装没有额外的依赖。
### 3、编译代码
构建代码的典型步骤是：
```
$ ./configure
$ make
$ sudo make install