我心里也是有一些针对其他攻击的规则但不想说了，因为还需要完善，不过我觉得应该挺有用，等真正没问题的时候再发吧。
# 0x01 无线数据分析
* * *
说一些数据分析吧，802.11 有好几个标准，像什么802.11g 802.11n
等等之类的，不同的标准对应着不同的频道。分析数据肯定是避免不了的，况且无线就是协议的东西。
我就简单说一下常见的，时常用到的。就算你不分析，起码遇到了能看懂不是。
802.11数据包有三种类型。
  1. 管理数据包：认证：authentication 关联：association 信号：beacon
  2. 控制包：是一些请求用的基本上
  3. 数据包：这里面是一些有用的，通信数据什么的。
也许有人听过有个叫beacon包的东西，其实最重要的东西也就是这个，beacon里面包含了一些AP功能、信息网络名称、配置、安全信息等等东西。所以MDK3里面也有个模式叫做Beacon
flood的模式。
这不是完整的数据，只是其中一部分，它的头部的‘type’定义为beacon。它是作为一个广播数据包由wap发送。
这不是全部的，简单点我们可以看出的信息有：它的头部给它定义的类型为:Beacon. 设备信息是：Huawei.
MAC地址之类的。下面可以看出SSID的名称。用的802.11B协议。工作11信道。
也可以通过分析得知AP与站点是否加密一致：
先看下 Authentiction数据中的 Authentiction Algorithm：open System（0）数值是否为0
，则说明并非Shared加密模式，而是Open加密或WPA加密。和下面的Beacon数据中的数值是否为（1）来判定是否启用加密。AP与STA的认证一致。
当然加密还有别的。只举一例了。
还有就是关于DOS攻击的分析，这个更简单了，DOS攻击很多，什么beacon flood Authentication DoS
Deauthentication/Disassociation 等等。。 就拿Authentication Flood 举个例子吧。
从type类型和请求可以看出是什么样的攻击类型 **（Authentiction）** 。
  * **Destination address：被攻击的AP MAC**
  * **Source address：源MAC （也可能是伪造的client Mac）**
其他类型的攻击也大体差不多，稍有出入相信大家也能辨别。
还有就是针对于802.11 无线信道和频率的
信道  | 中心频率（MHZ）  
---|---  
1  | 2412  
2  | 2417  
3  | 2422  
4  | 2427  
5  | 2432  
6  | 2437  
7  | 2442  
8  | 2447  
9  | 2452  
10  | 2457  
11  | 2462  
12  | 2467  
13  | 2472  
这就是只显示10信道的数据。
其实无线数据里面头疼的也就是它的封包结构，控制帧、管理帧、数据帧。全都弄懂真心不容易。我现在也还在学习中，如果是简单分析是用不太多这些东西的。我给大家提供一些802.11的type与subtype类型。方便大家对照
还有一些wireshark的过滤参数：
这个不全，老外整理了一篇 集 过滤参数、802.11模型和数据值解释为一体的pdf：
我觉得超级牛B，新手看也容易懂。
如果大家想分析指定的AP包的话，可以
p21
我们也可以分析下握手包，下面以Wpa为例，
因为WPA-psk
（个人版）在STA和ap建立数据后使用了EAPOL协议处理用户登录认证。然后由四次握手组成。支持WPA的AP工作时候呢，如果客户端里面有Radius服务器的话就用802.1X认证。要没有就用psk的方式认证。上面是第四次握手中抓到的数据，别的都好懂，这个MIC我说一下，这个值是最后握手成功的一个重点。
在认证过程中，SSID和password使用特定的算法产生这个PSK。
那么客户端接收到AP发来的信息后也会用这个算法产生PSK。然后这两部分分别用算法进行认证，最后会提取到一个MIC KEY 。STA和AP的MIC KEY
如果相等，他们就成功，如果不等就失败。
基本上这些都是一些常用的或者是重点。，但还有好多没写到。因为学校的网络环境不支持太多。如果你正好用到用也可私我，我可以把我知道的全部free。写的有点驴唇不对马嘴.因为802.11协议的东西太多太繁琐.我也有点抓不住重点了.对不住各位了。
再延伸一点知识，关于 802.11 fuzzing 的东西。
现在Fuzzer是很流行的一种挖掘漏洞手段，不管是在web还是其他安全，fuzz现在都很热，但是无线fuzz以前火过，最近好像没啥动静了。资料更是少之又少。简单提一下。
借老外的一张图吧：
老外这张图表示的是一个底层。它可能表示的意思就是一个溢出fuzz。
分别是类型，长度，和信息值，OCtets 定义了长度和Element ID为1（bit）
我们都知道FUZZ的原理就是尝试协议各种奇葩数据看看协议有没有考虑到，我可以给它定义一个自定值，如果客户端没有处理的话就会出现内核破坏类的漏洞。
所以，在802.11里面最常见的Fuzz就从SSID入手。例如这个，你可以针对它的Bytes自己去设置fuzz
其实跟溢出的解释差不多吧。其实最初的办法也就是投放大量的ssid，如果超出了其长度，来实现崩溃。等还有一些其他的CVE，是跟无线驱动程序有关的。
有人开发过一个关于802.11堆栈的fuzz脚本叫wifuzz。
它利用的Scapy包生成的。所以环境要下载Scapy
先要用airmon-ng把网卡监听一下。
下面的参数对应着攻击类型。
    $ sudo python wifuzz.py -s admin auth
    Wed Sep 28 10:38:36 2011 {MAIN} Target SSID: admin; Interface: wlan0; Ping timeout: 60;PCAP directory: /dev/shm; Test mode? False; Fuzzer(s): auth;
    Wed Sep 28 10:38:36 2011 {WIFI} Waiting for a beacon from SSID=[admin]
    Wed Sep 28 10:38:36 2011 {WIFI} Beacon from SSID=[admin] found (MAC=[00:aa:bb:cc:dd:ee])
    Wed Sep 28 10:38:36 2011 {WIFI} Starting fuzz 'auth'
    Wed Sep 28 10:38:36 2011 {WIFI} [R00001] Sending packets 1-100
    Wed Sep 28 10:38:50 2011 {WIFI} [R00001] Checking if the AP is still up...
    Wed Sep 28 10:38:50 2011 {WIFI} Waiting for a beacon from SSID=[admin]
    Wed Sep 28 10:38:50 2011 {WIFI} Beacon from SSID=[admin] found (MAC=[00:aa:bb:cc:dd:ee])
    Wed Sep 28 10:38:50 2011 {WIFI} [R00002] Sending packets 101-200
    Wed Sep 28 10:39:04 2011 {WIFI} [R00002] Checking if the AP is still up...
    Wed Sep 28 10:39:04 2011 {WIFI} Waiting for a beacon from SSID=[admin]
    Wed Sep 28 10:39:04 2011 {WIFI} Beacon from SSID=[admin] found (MAC=[00:aa:bb:cc:dd:ee])
    Wed Sep 28 10:39:04 2011 {WIFI} [R00003] Sending packets 201-300
    Wed Sep 28 10:39:18 2011 {WIFI} [R00003] Checking if the AP is still up...
    Wed Sep 28 10:39:18 2011 {WIFI} Waiting for a beacon from SSID=[admin]
    Wed Sep 28 10:39:19 2011 {WIFI} Beacon from SSID=[admin] found (MAC=[00:aa:bb:cc:dd:ee])
    Wed Sep 28 10:39:19 2011 {WIFI} [R00004] Sending packets 301-400
    Wed Sep 28 10:39:42 2011 {WIFI} [R00004] recv() timeout exceeded! (packet #325)
    Wed Sep 28 10:39:42 2011 {WIFI} [R00004] Checking if the AP is still up...
    Wed Sep 28 10:39:42 2011 {WIFI} Waiting for a beacon from SSID=[admin]
    Wed Sep 28 10:40:42 2011 {WIFI} [!] The AP does not respond anymore. Latest test-case has been written to '/dev/shm/wifuzz-eK97nb.pcap'
Admin就是SSID名 用的auth的FUzz。到最后的时候发现已经崩溃了
Wed Sep 28 10:40:42 2011 {WIFI} [!] The AP does not respond anymore. Latest
test-case has been written to '/dev/shm/wifuzz-eK97nb.pcap'
Wifuzz可以自己进行检测Bacon frame，会假定目标已经崩溃，然后生成一个pacp来重现崩溃。
其实在Metasploit里面也内置了一些fuzzer的脚本。要想在Metasploit进行fuzz的话，要安装一个lorcon2模块。这个模块是专门用于无线注入的。Google把代码撤了。如果想自己安的话，环境变量要自己设置.
自己airodump一个STA 的mac。因为是Beacon fuzz，它要制出大量的ssid。
可以看下该频道的ESSID。 这就证明开始fuzz了。
没办法，802.11的fuzz能表示出来的就这么点东西，也许有更难的我没看到，还有一些是驱动层的东西，但我不太会，也不着重看过。
### 关于wifuzzit
例如还有个工具，
这个工具发现了好多如Atheros驱动 CVE：
  * Cve-2006-6332 其中这是一个远程代码执行漏洞，是关于madwifi的802.11的堆栈溢出。
  * Cve-2009-0952 它错误出现在可以在一个无线接入点发送恶意的管理帧。可以攻击任何未经身份验证的基于EAP 的WPA/WPA2 WPA2-EAP的无线设备。Netgear 与Atheros芯片都受到了影响。
  * CVE-2009-0052 这也是一个关于Atheros的无线驱动程序的漏洞，该漏洞可导致用户拒绝服务（设备重启或直接挂掉）
其实真的还有很多东西没写出来。就在脑子里，也真是不知道咋写出来了。可能是太懒了，人一呆着就容易有惰性啊。有想交流的可以一起交流。
也非常感谢在 unicorn Team的两个月，时隔一年整，短短两个月我看到了自己的不足，也让我更清晰了方向，回来努力补过。感谢 Ir0smith
Sweeper 在当时对我的各种方面的帮助。我至今还记得我去的第一天，Sweeper让我看了Vivek
Ramachandran的视频，当时没放心上，后来看了之后也挺困难的，印度方言，很是雷我。不过看了好几遍连续，看懂之后受益匪浅。再次感谢帮助过我的人。