access (null dereference) and type cast (cast failure). We use
a desugared source language in which exceptions can only
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 05:58:21 UTC from IEEE Xplore.  Restrictions apply. 
occur in speciﬁc syntactic forms. This helps simplify the for-
malization in section 4 where we attach control ﬂow labels
to commands that can branch due to exceptions. We also re-
quire the main program to end with a return, to simplify
the deﬁnition of control ﬂows. Any command can be desug-
ared to this form using additional local variables.
The grammar is as follows; x represents any variable
name, v a literal value, C a class name, f a ﬁeld name,
and op represents an arithmetic or boolean operation.
::= x | v | e op e | new C
::= x := e | x := e.f | e.f := e | throw e |
e
c
return e | c; c | if e then c else c |
while e do c | try c catch(X x) c
program ::= Prog ((cid:2)x){c; return e}
Here (cid:2)x is the set of variables used in the body of the pro-
gram. We use the term exception-throwing for commands of
(cid:2) or x := e.f or throw e. Handlers for ex-
the form e.f := e
ceptions appear in the catch part of a try-catch command.
For simplicity there is a single class, named X, for excep-
tions.
Type system. In presence of exceptions, commands can have
multiple exits and the region of a branch need not be con-
tained within the command. We deﬁne high level judgements
(cid:3) c : k1, k2 with the meaning that c is secure and writes
variables/ﬁelds of level at least k1. Moreover, the informa-
tion revealed by the termination mode (i.e., whether there
is an exception and if so the information carried by the ex-
ception object) is at most k2. Furthermore, the judgement
allows k2 to be ∅ which indicates that no exception can es-
cape from the command.
Figure 1 gives the typing rules for source language ex-
pressions. These are used both in the high level typing sys-
tem and in the intermediate system. Figure 2 gives the high
level typing rules for source programs.
Notice that commands such as x := e or return e are
typed with exception eﬀect ∅, meaning that these com-
mands cannot throw exceptions.
We write ≤ for the lattice ordering on the set S of se-
curity levels and (cid:6) for least upper bounds. The latter is
extended to ∅ by deﬁning ∅ (cid:6) k = k. We write H (respec-
tively, L) for the top secret level (resp. most public level). In
the case of exception-throwing commands, the exception ef-
fect is given by the type of the expression which might cause
the exception to be thrown, e.g., in the case x := e.f the
exception eﬀect k is the type of expression e (see rule [As-
sign2]). The exception eﬀect is used to impose constraints
(cid:2) the exception eﬀect
on successor commands, e.g., in c; c
(cid:2) (see
of c must be less or equal than the write eﬀect of c
k1 ≤ k
(cid:2)
1). In general, the exception eﬀect of a command re-
stricts the write eﬀect of its successor commands, except
in the case of try-catch. In the [Catch] rule, the excep-
tion eﬀect for the command in the try part imposes a con-
straint on the type of variable x (that stores the excep-
tion object) and imposes a constraint on the write eﬀect of
the code of the handler (catch part). If the catch part can-
not throw an exception, i.e., its exception eﬀect is ∅, there
are no constraints on the write eﬀects of successor com-
mands of try-catch.
The
following example
illustrates how exception-
throwing commands inside while commands can lead to
information leaks.
Example 3.1 (exceptions in while) Let x and x
variables and y be low. The program
(cid:2) be high
(cid:2) := y.f; x := x + 1;} return e
while x ≤ 3 do {x
(cid:2) := y.f can throw an exception and
is interferent because x
there is no handler for it. Suppose that the variable y is initially
null. Then the program terminates in an abnormal state if the
(high) expression x ≤ 3 is true and it terminates in a nor-
mal state if x ≤ 3 is false. This program will be rejected by the
[While] rule, which does not allow low exceptions in high en-
(cid:2) = k). Now assume that variable x
vironments (constraint k
(cid:2) and y are high. Again the program is interfer-
is low and x
ent: A high exception can be thrown so the program will ter-
minate abnormally depending on the value of high variable y.
This program will also be rejected by the [While] rule.
The following lemma is useful; it says that any subcom-
mand of a command c has at least the same write eﬀect as
that of c.
Lemma 3.1 Suppose (cid:3) c : k1, k2 and (cid:3) c
be a subcommand of c. Then k1 ≤ k
(cid:2)
1 and if c
inside c then k
Example 3.2 (Example with try-catch) Consider the
command
(cid:2) : k
(cid:2)
(cid:2)
2. Let c
(cid:2) has no handler
2 ≤ k2.
(cid:2)
(cid:2)
1, k
try throw x; x := 1; catch (X y) y := null
where variable x is high and variable y is low. This is inter-
ferent, indeed its eﬀect is the same as the direct assignment
y := x. It is rejected by the type system because of the [ Catch]
rule, where the exception eﬀect of the try part (here, H) has to
be less or equal than the type of the variable in catch (here, L).
4. Intermediate type system for source
code
In this section we introduce another type system for the
source language. The intermediate type system serves as a
bridge between the high level type system and the type sys-
tem for the target language.
Source labels and control ﬂows. To name program points
where control ﬂow can branch or writes can occur, we add
natural number labels to the source syntax —not to be con-
fused with security labels given by Γ and ﬁeldlevel.
c
::= [x := e]n | [x := e.f]n | [e.f := e]n | [throw e]n |
[return e]n | c; c | [if e then c else c]n |
[while e do c]n | [try c catch(X x) c]n
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 05:58:21 UTC from IEEE Xplore.  Restrictions apply. 
Var(cid:3) x : Γ(x)
Val(cid:3) v : L
New(cid:3) new C : L
Op(cid:3) e : k2
(cid:3) e op e
(cid:3) e
(cid:2) : k1
(cid:2) : k1 (cid:6) k2
Figure 1. High level typing rules for source language expressions, using policy Γ.
Subsume
(cid:3) e : k k ≤ k
(cid:3) e : k
(cid:2)
(cid:2)
Assign
(cid:3) e : k
k ≤ Γ(x)
(cid:3) x := e : Γ(x),∅
Seq(cid:3) c : k, k1
(cid:3) c ; c
(cid:3) c
(cid:2)
(cid:2) : k
(cid:2)
, k
1
, k1 (cid:6) k
(cid:2) : k (cid:7) k
(cid:2)
(cid:2)
1
k1 ≤ k
(cid:2)
While
(cid:3) e : k
(cid:2)
(cid:3) c : k, k
(cid:3) while e do c : k, k
k
(cid:2)
(cid:2) (cid:8)= ∅ ⇒ k = k
(cid:2)
Cond(cid:3) e : k
Update
(cid:3) e : k
(cid:2)
(cid:3) c : k, k
(cid:2) : k, k
(cid:3) if e then c else c
(cid:2)
(cid:3) c
(cid:2) (cid:8)= ∅ ⇒ k ≤ k
(cid:2)
(cid:2)
k
(cid:2)
: k, k
Assign2
(cid:3) e : k
k ≤ ﬁeldlevel(f) ≤ Γ(x)
(cid:3) x := e.f : Γ(x), k
(cid:3) e
(cid:2) : k
(cid:3) e.f := e
k (cid:6) k
(cid:2)
(cid:2) : ﬁeldlevel(f), k
(cid:2) ≤ ﬁeldlevel(f)
Catch
(cid:3) c : k, k1
(cid:3) c
(cid:2)
1
(cid:2) : k, k
(cid:3) try c catch (X x) c
(cid:2)
k1 ≤ k (cid:7) Γ(x)
(cid:2)
: k, k
1
1 (cid:8)= ∅ ⇒ k1 ≤ k
(cid:2)
k
(cid:2)
1
Throw(cid:3) e : k
(cid:3) throw e : H, k
Return(cid:3) e : L
(cid:3) return e : L,∅
Subsume2
(cid:3) c : k1, k2
1 ≤ k1
(cid:2)
k
(cid:3) c : k
(cid:2)
(cid:2)
1, k
2
k2 ≤ k
(cid:2)
2
Figure 2. High level typing rules for source language commands, using policy Γ and ﬁeldlevel.
The notation for labels of compound commands is conve-
nient but visually misleading in that the label pertains to
the branching point in the control ﬂow graph, for if and
while, and the start of the handler for try-catch.
(cid:2)) = labels(c) ∪ labels(c
By contrast with Nielson et al. [13], we do not need to la-
bel expressions. The signiﬁcance of labeling commands will
become clear later in the paper, when we give a deﬁnition
for control dependence regions for programs as mapping
from branching commands (such as if, while or exception-
throwing commands) to sets of labels, corresponding to
commands included in their regions.
The function labels takes a command and returns all the
labels of its subcommands, e.g. labels([x := e]n) = {n}, and
labels(c; c
Labels on program points are used in intermediate judge-
ments of the form (cid:3) c : E. Here E is a security environ-
ment, i.e., a function E : labels(SP ) → S that assigns lev-
els to all program points of the program. A source program
SP is typable, written (cid:3) SP : E, if its command part is ty-
pable with respect to E according to the rules given in Fig-
ure 4. Roughly, the idea is that for a ﬁeld or variable assign-
ment with control label n, the ﬁeld or variable must have
level at least E(n). Note that the rules recurse on the struc-
ture of constituent commands c of SP , but a single E is used
throughout.
(cid:2)).
If R is a set of program points then liftk(E, R) is the secu-
(cid:2)(n) = E(n) for n /∈ R and
(cid:2) such that E
rity environment E
(cid:2)(n) = k(cid:6) E(n) for n ∈ R. The constraints in the rules in-
E
volve control dependence regions (sregion), which we now
proceed in several steps to deﬁne.
We use the notation C[−] to denote context of a com-
mand. We use square brackets both for labeling and for con-
texts; it should be clear that [c]n without a capital letter
in front means that command c has label n, whereas C[c]
with a capital C in front means C[−] is the context of com-
mand c.
We deﬁne here a successor relation between commands
in the language. Following Nielson et al. [13] we deﬁne for
each labeled command the init, f inal, and except labels;
the set except(n) are the labels from which there can be an
—uncaught— exception.
Given a source program SP , n (cid:13)→ n
(cid:2) denotes that com-
(cid:2) is a successor of command labeled n in the
mand labeled n
(cid:2)) ∈ f low(c).
control ﬂow graph. We deﬁne n (cid:13)→ n
The latter is deﬁned in two steps, which are given in Fig-
ure 3. Let (cid:13)→+ (resp. (cid:13)→(cid:2)) denote the transitive (resp. tran-
sitive and reﬂexive) closure of (cid:13)→.
Deﬁnition 1 (branching commands, LL(cid:3))
The
branching commands are those of the form if e then c1 else c2,
while e do c1, x := e.f, and e.f := e. The set LL(cid:3) is all the la-
bels of branching commands in the program.
For example, if the source program SP is
(cid:2) iﬀ (n, n
[ if x then [x := x]4 else [x := x]7 ]2; [return x]9
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 05:58:21 UTC from IEEE Xplore.  Restrictions apply. 
c