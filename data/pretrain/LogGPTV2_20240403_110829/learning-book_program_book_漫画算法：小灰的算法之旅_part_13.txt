pivot的区域。
pivot=4
8
mark
按照这个思路，继续遍历，后续步骤如图所示。
---
## Page 222
pivot=4
5>4，凉历
pivot=4
pivot=4
2= endIndex）{
4.
return;
5.
6.
//得到基准元素位置
7.
int pivotIndex = partition(arr， startIndex, endIndex);
8.
//根据基准元素，分成两部分进行递归排序
9.
quickSort(arr, startIndex, pivotIndex - 1);
10.
quickSort(arr， pivotIndex + 1,endIndex);
11.}
12.
13./**
14.
*分治（单边循环法）
15.
@param arr
待交换的数组
16.
@param startIndex
起始下标
17.
*@paramendIndex
结束下标
---
## Page 224
18.
*/
19. private static int partition(int[] arr, int startIndex,
int endIndex）{
20.
//取第1个位置（也可以选择随机位置）的元素作为基准元素
21.
int pivot = arr[startIndex];
22.
int mark = startIndex;
23.
24.
for(int i=startIndex+1; i> quickSortStack = new
Stack>();
4.
//整个数列的起止下标，以哈希的形式入栈
5.
Map rootParam = new HashMap();
6.
rootParam.put("startIndex"，startIndex);
7.
rootParam.put("endIndex",endIndex);
8.
quickSortStack.push(rootParam);
9.
10.
//循环结束条件：栈为空时
11.
while (!quickSortStack.isEmpty()) {
12.
//栈顶元素出栈，得到起止下标
13.
Map param = quickSortStack.pop();
14.
//得到基准元素位置
15.
int pivotIndex = partition(arr, param.get("startInd
param. get("endIndex"));
16.
//根据基准元素分成两部分，把每一部分的起止下标入栈
17.
18.
Map leftParam = new HashMap();
19.
leftParam.put("startIndex", param.get("startInd
---
## Page 228
20.
leftParam.put("endIndex",pivotIndex-1);
21.
quickSortStack.push(leftParam);
22.
23.
if(pivotIndex +1 rightParam = new HashMap();
25.
rightParam.put("startIndex",pivotIndex + 1);
26.
rightParam.put("endIndex",param.get("endIndex"
27.
quickSortStack.push(rightParam);
28.
29.
{
30.}
31.
32./**
33.
*分治（单边循环法）
34.
*@param arr
待交换的数组
35.
@param startIndex
起始下标
36.
@param endIndex
结束下标
37.
*/
38. private static int partition(int[] arr, int startIndex,
int endIndex){
39.
//取第1个位置（也可以选择随机位置）的元素作为基准元素
40.
x =  
41.
int mark = startIndex;
---
## Page 229
42.
43.
for(int i=startIndex+1; i= array[childIndex])
18.
break;
19.
//无须真正交换，单向赋值即可
20.
array[parentIndex]= array[childIndex];
21.
parentIndex = childIndex;
22.
childIndex = 2*childIndex + 1;
23.
24.
array[parentIndex]= temp;
25.}
26.
27.
28./**
29.
*堆排序（升序）