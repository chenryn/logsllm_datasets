### Java Virtual Machine (JVM)

Always use the most recent version of the Java Virtual Machine (JVM) unless the Elasticsearch website specifies otherwise. ((("deployment", "Java Virtual Machine (JVM)")))((("JVM (Java Virtual Machine)")))((("Java Virtual Machine", see="JVM")))

Elasticsearch, and particularly Lucene, is a resource-intensive application. The unit and integration tests from Lucene often uncover bugs in the JVM itself, ranging from minor annoyances to severe segmentation faults. Therefore, it is advisable to use the latest JVM version whenever possible.

Java 7 is strongly recommended over Java 6. Both Oracle and OpenJDK are acceptable, as they offer comparable performance and stability.

If your application is written in Java and you are using the transport client or node client, ensure that the JVM running your application is identical to the server JVM. In some parts of Elasticsearch, Java's native serialization is used (e.g., for IP addresses and exceptions). Oracle has been known to change the serialization format between minor releases, which can lead to unexpected errors. To avoid such issues, it is best practice to keep the JVM versions consistent between the client and server.

### Avoid Custom JVM Settings

The JVM offers numerous settings, parameters, and configurations, allowing you to fine-tune almost every aspect of its operation. ((("JVM (Java Virtual Machine)", "avoiding custom configuration")))

However, we strongly advise against making custom JVM settings. Elasticsearch is a complex piece of software, and its current JVM settings have been optimized over years of real-world usage. Tweaking these settings can produce unpredictable effects that are difficult to measure and may result in a slow, unstable cluster. When debugging clusters, one of the first steps is often to remove all custom configurations, which frequently restores stability and performance.

### Transport Client vs. Node Client

If you are using Java, you may wonder whether to use the transport client or the node client. ((("Java", "clients for Elasticsearch")))((("clients")))((("node client", "versus transport client")))((("transport client", "versus node client")))

- **Transport Client**: Acts as a communication layer between the cluster and your application. It understands the API and can automatically round-robin between nodes, sniff the cluster, and more. However, it is external to the cluster, similar to REST clients.
  
- **Node Client**: Is a node within the cluster (but does not hold data and cannot become a master). Because it is part of the cluster, it knows the entire cluster state, allowing it to execute APIs with one less network hop.

There are use cases for both clients:

- **Transport Client**: Ideal if you want to decouple your application from the cluster. For example, if your application frequently creates and destroys connections to the cluster, the transport client is much "lighter" than a node client since it is not part of the cluster. Similarly, if you need to create thousands of connections, using the transport client is preferable to having thousands of node clients join the cluster.

- **Node Client**: More efficient for a few long-lived, persistent connection objects to the cluster, as it knows the cluster layout. However, it ties your application into the cluster, which may pose firewall and security concerns.

### Configuration Management

If you already use configuration management tools like Puppet, Chef, or Ansible, you can skip this section. ((("deployment", "configuration management")))((("configuration management")))

If you do not yet use configuration management tools, we highly recommend doing so. Managing a small number of servers with `parallel-ssh` may work initially, but it becomes unmanageable as your cluster grows. Manually editing 30 or more configuration files without making mistakes is nearly impossible.

Configuration management tools help maintain consistency in your cluster by automating the process of configuration changes. While setting up and learning these tools may take some time, the long-term benefits in terms of efficiency and reliability are significant.