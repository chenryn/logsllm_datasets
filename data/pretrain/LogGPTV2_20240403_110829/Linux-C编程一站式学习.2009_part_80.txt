返回值：成功返回0，失败返回错误号。
就是说，不能对同一线程调用两次pthread_join，
可见在Linux的pthread库中常数PTHREAD_cANCELED的值是-1。可以在头文件pthread.h中找到它的定
终止状态。不能对一
但是线程也可以被置为detach状态，
义：
运行结果是：
1.线程的概念
-般情况下,
int pthread_detach(pthread_t tid);
#include  
#define PTHREAD_CANCELED 
thread
thread
thread
thread
thread
thread
thread 
int main(void)
./a.out
 线程终止后，其终止状态一直保留到其它线程调用pthread_join获取它的状态为止。
3
3
3
人
return 0;
printf("thread 3'exit code %d\n", (int)tret);
pthread
pthread_
sleep(3):
pthread_create(&tid,
pthread
pthread_create(&tid, NULL,
pthread
pthread_create(&tid,
 pthread_t
 exit code
void
exit code -1
writing
 returning
writing
writing
exit 
 code
cancel(tid);
sleep(1);
join(tid,
join(tid,
2
*tret;
tid;
 这样的线程一旦终止就立刻回收它占用的所有资源，
（(void *）
&tret);
&tret）;
NULL,
NULL,
起始页
上一级
%d\n"，(int)tret);
，thr_fn2，NULL);
%d\n"，(int)tret);
，或者如果已经对一个线程调用 
-1)
thr_fn3,NULL);
thr_fnl，NULL);
3.线程间同步
而不保旨
659
下一页
留
---
## Page 660
全国嵌入式人才培训基地
---
## Page 661
我们通过一个简单的程序观察这一现象。
思考一下，如果这两个线程在单处理器平台上执行，能够避免这样的问题吗？
假设两个线程在多处理器平台上同时执行这三条指令，则可能导致下图所示的结果，最后变量只加
两个线程都要把某个全局变量增加1，这个操作在某平台需要三条指令完成：
3.1.mutex 请点评
3.线程间同步 请点评
做：
行程序时很难观察到，为了使现象更容易观察到，我们把上述三条指令做的事情用更多条指令来
多个线程同时访问共享数据时可能会冲突，
一次而非两次。
3．将寄存器的值写回内存
上一页
2i
1．从内存读变量值到寄存器
寄存器的值加1
其它指令
mov %eax, 0x8049540
add $0x1,%eax
mov0x8049540,%eax
图35.1.并行访问冲突
+
(eax=6)
(eax=6)
(eax=5)
 1);
线程A的指令
CPU1执行
counter = val + 1;
mov %eax,0x8049540
add $0x1, %eax
mov 0x8049540, %eax
其它指令
(eax=6)
(eax=6)
(eax=5)
线程A的指令
CPU2执行
全国嵌入式人才培训基地
 上图所描述的现象从理论上是存在这种可能的，
，这跟前面讲信号时所说的可重入性是同样的问题。比如
第35章线程
3.线程间同步
(unsigned int)pthread_self(), val
单元的值
变量的内存
の
S
但实际运
下一1
---
## Page 662
上每次运行该程序的结果都不一样，有时候数到5000多，有时候数到6000多。
我们创建两个线程，
复上述操作几千次，就会观察到访问冲突的现象。
行write系统调用进内核，
我们在"读取变量的值"和"把变量的新值保存回去"这两步操作之间插入-
b76acb90:
+ 1);
b7
b7
NLOOP times.
void *doit(void *vptr)
int main(int argc, char 
void *doit(void *);
int counter;
#define NLOOP 5000
#include 
#include
#include 
Teadb90:
Teadb90:
Teadb90:
7eadb90
76acb90:
76acb90:
76acb90:
76acb90:
. /a.out
return NULL;
return 0;
pthread_join(tidB,
pthread_create(&tidB,
 pthread_t tidA, tidB;
for
int
pthread_
/*, wait for both threads to terminate */
２３４５６
12345
c（i= 0;
 The value of the
 Each 
i, val;
counter = val + 1;
printf("
val
 thread
 为内核调度别的线程执行提供了-
counter;
本章不详细介绍Mutex属性，感兴趣的读者可以参考[APUE2e]。
pthread_mutex_
#include 
b76acb90:
b7eadb90:
b76acb90:
int
1
pthread mutex_uniock(pthread _mutex_t *mutex);
，也可以用宏定义PTHREAD_MUTEX_INITIALIZER来初始化，
获得锁的线程可以完成"读-修改-写"的操作，
89
L
mutex
：tmutex
，又不想挂起等待，
try
/* incremented by threads */ 
则当前线程需要挂起等待，
，参数attr设定Mutex的属性，
，可以调用pthread_mutex_trylock，
七
.-..-.....-.....-........-..-
如果这时另一个线程已经调
 然后释放锁给其它线程，没有获得
—---..-..-.....-..-..-..-..-..-..-........
直到另一个线程调
 相当于
用pthread_mutex_init函
如果attr为NULL则表示缺
如果Mutex已经被
---
## Page 664
细心的读者应该已经看出问题了：对Mutex变量的读取、判断和修改不是原子操作。如果两个线程
等待。
等待该Mutex的线程，然后让被唤醒的这些线程去竞争获得这个Mutex，竞争失败的线程继续挂起
某个线程获得，其它线程再调用lock只能挂起等待。那么lock和unlock的伪代码如下：
的值为1表示互斥锁空闲，
看到这里,
这样运行结果就正常了，
unlock:
+ 1);
NLOOP times.
lock:
(1adA+ PTo4)4T0P+ PT0A
int main(int argc, char **argv)
lock
读者一定会好奇：Mutex的两个基本操作lock和unlock是如何实现的呢？假设Mutex变量
return
goto lock;
} else 
if(mutex > 0){
return NULL;
for（i = O;i 0
(unsigned int)pthread_self(), val
doit, NULL);
NULL）
 mutex=0 
23
---
## Page 665
的线程。Condition Variable用pthread_cond_t类型的变量表示，可以这样初始化和销毁：
在pthread库中通过条件变量（ConditionVariable）来阻塞等待一个条件，
3.2. Condition Variable 请点评
成立，线程A就阻塞等待，
线程间的同步还有这样一种情况：线程A需要等某个条件成立才能继续往下执行，
永远处于挂起状态了
T
项，把它的状态从睡眠改为就绪，加入就绪队列，那么下次调度器函数执行时就有可能切换到被唤
调度器函数切换到别的线程。一
个线程要在Mutex上挂起等待，
也许还有读者好奇，
unlock中的释放锁操作同样只用一条指令实现，以保证它的原子性。
现在我们把lock和unlock的伪代码改一下（以x86的xchg指令为例）：
总线周期也有先后，一个处理器上的交换指令执行时另一个处理器的交换指令只能等待总线周期。
为了实现互斥锁操作，
另一个线程并不知道这一情况，也置mutex=0，于是两个线程都以为自己获得了锁。
所有线程在需要同时获得2个或3个锁时都应该按锁1、锁2、锁3的顺序获得。如果要为所有的锁确
就
一般情况下，
醒的线程。
和内存单元的数据相交换，
同时调用 
次2，而这时线程B也调用lock试图获得锁1，结果是需要挂起等待线程A释放锁1，
要多个锁时都按相同的先后顺序（常见的是按Mutex变量的地址顺序）获得锁，
程序时应该尽量避免同时获得多个锁，如果一定有必要这么做，
得复杂和难以判断。
了锁1，线程B获得了锁2，
永远处于挂起等待状态了，
一个先后顺序比较困难，则应该尽量使用pthread_mutex_trylock调用代替pthread_mutex_lock调
以免死锁。
unlock:
lock:
如果同一个线程先后两次调用lock，
这时
return
goto lock;
} else 
xchgb
movb $0, %al 
，“挂起等待"和“唤醒等待线程"的操作如何实现？每个Mutex有一个等待队列，
，不难想象，
，大多数体系结构都提供了swap或exchange指令，
0：
而线程B在执行过程中使这个条件成立了，
挂起等待;
return 0;
是
，这时线程A调用lock试图获得锁2，
这叫做死锁（Deadlock）
一个线程要唤醒等待队列中的其它线程，
，首先在把自己加入等待队列中，
mutex
两个线程都判断
，如果涉及到更多的线程和更多的锁，有没有可能死锁的问题将会
">0){
保证了原子性，
在第二次调用时，
，该线程又被挂起而没有机会释放锁，
另一种典型的死锁情形是这样：线程A获
成立，
 结果是需要挂起等待线程B释放
然后置线程状态为睡眠，然后调用
 然后其中一个线程置
，则有一个原则：如果所有线程在
，就唤醒线程A继续执行。
由于锁已经被占用，
，只需从等待队列中取出一
该指令的作用是把寄存器
，或者唤醒等待这个条件
，现在这个条件不
则不会出现死
于是线程A和B都
该线程
.8
，因此
而
---
## Page 666
从表头取走结构体。
下面的程序演示了一个生产者-消费者的例子，生产者生产一个结构体串在链表的表头上，消费者
用pthread_cond_signa1唤醒在某个Condition Variable上等待的另一
时刻仍然没有别的线程来唤醒当前线程，就返回ETIMEDOUT。
pthread_cond_timedwait函数还有一个额外的参数可以设定等待超时，
可见，
返回值：成功返回0，
数：
用pthread_cond_init函数初始化并且attr参数为NuLL。Condition Variable的操作可以用下列函
Variable是静态分配的，
返回值：成功返回0，失败返回错误号。
2．阻塞等待
1．释放Mutex
当被唤醒时，
一个Condition Variable总是和一个Mutex搭配使用的。
pthread_cond_
struct msg *head;
struct msg {
#include
int pthread_cond_
int pthread_cond_timedwait(pthread_cond_t *restrict cond,
#include 
pthread_cond_
#include 
#include
int 
int pthread_cond_broadcast(pthread_cond_t *cond);
int pthread_cond
int pthread_cond_destroy(pthread_cond_t *cond);
int num;
struct msg *next;
pthread
，重新获得Mutex并返回