title:Your state is not mine: a closer look at evading stateful internet
censorship
author:Zhongjie Wang and
Yue Cao and
Zhiyun Qian and
Chengyu Song and
Srikanth V. Krishnamurthy
Your State is Not Mine: A Closer Look at Evading Stateful
Internet Censorship
Zhongjie Wang
PI:EMAIL
University of California, Riverside
Yue Cao
PI:EMAIL
University of California, Riverside
Zhiyun Qian
PI:EMAIL
University of California, Riverside
Chengyu Song
PI:EMAIL
University of California, Riverside
ABSTRACT
Understanding the behaviors of, and evading state-level Internet-
scale censorship systems such as the Great Firewall (GFW) of China,
has emerged as a research problem of great interest. One line of eva-
sion is the development of techniques that leverage the possibility
that the TCP state maintained on the GFW may not represent the
state at end-hosts. In this paper we undertake, arguably, the most ex-
tensive measurement study on TCP-level GFW evasion techniques,
with several vantage points within and outside China, and with
clients subscribed to multiple ISPs. We find that the state-of-the
art evasion techniques are no longer very effective on the GFW.
Our study further reveals that the primary reason that causes these
failures is the evolution of GFW over time. In addition, other factors
such as the presence of middleboxes on the route from the client to
the server also contribute to previously unexpected behaviors.
Our measurement study leads us to new understandings of the
GFW and new evasion techniques. Evaluations of our new eva-
sion strategies show that our new techniques provide much higher
success rates of (compared to prior schemes) ≈ 90 % or higher.
Our results further validate our new understandings of the GFW’s
evolved behaviors. We also develop a measurement-driven tool
INTANG, that systematically looks for and finds the best strategy
that works with a server and network path. Our measurements
show that INTANG can yield near perfect evasion rates and is ex-
tremely effective in aiding various protocols such as HTTP, DNS
over TCP, and Tor in evading the GFW.
CCS CONCEPTS
• Networks → Network measurement; Network privacy and
anonymity; Middle boxes / network appliances; • Social and pro-
fessional topics → Technology and censorship; • Security
and privacy → Intrusion detection systems;
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
IMC ’17, November 1–3, 2017, London, UK
© 2017 Association for Computing Machinery.
ACM ISBN 978-1-4503-5118-8/17/11...$15.00
https://doi.org/10.1145/3131365.3131374
Srikanth V. Krishnamurthy
PI:EMAIL
University of California, Riverside
KEYWORDS
Censorship circumvention, TCP, traffic manipulation, the Great
Firewall of China, INTANG
ACM Reference Format:
Zhongjie Wang, Yue Cao, Zhiyun Qian, Chengyu Song, and Srikanth V.
Krishnamurthy. 2017. Your State is Not Mine: A Closer Look at Evading
Stateful Internet Censorship. In Proceedings of IMC ’17. ACM, New York,
NY, USA, 14 pages. https://doi.org/10.1145/3131365.3131374
1 INTRODUCTION
Internet censorship and surveillance are prevalent nowadays. State-
level censorship systems such as NSA’s PRISM and the Great Fire-
wall (GFW) of China, have the capability of analyzing terabyte-level
traffic across the country in realtime. Protocols with plaintext (e.g.,
HTTP, DNS, IMAP), are directly subject to surveillance and ma-
nipulation by the governors [1, 2, 5, 14, 20, 29], while protocols
with encryption (e.g., SSH, TLS/SSL, PPTP/MPPE) and Tor, can be
identified via traffic fingerprinting, leading to subsequent blocking
at the IP-level [13, 31].
The key technology behind these censorship systems is Deep
Packet Inspection (DPI) [27], which also powers Network Intrusion
Detection Systems (NIDS). As previously reported, most censor-
ship NIDS are deployed “on-path” in the backbone and at border
routers [27, 29, 34].
In order to examine application-level payloads, DPI techniques
have to correctly implement the underlying protocols like TCP,
which is the cornerstone of today’s Internet. Ptacek et al. [23] have
shown that any NIDS is inherently incapable of always reconstruct-
ing a TCP stream the same way as its endpoints. The root cause for
this is the presence of discrepancies between the implementations
of the TCP (and possibly other) protocol at the end-host and at the
NIDS. Even if the NIDS perfectly mirrors the implementation of one
specific TCP implementation, it may still have problems processing
a stream of packets generated by another TCP implementation.
Because of this ambiguity in packet processing, it is possible
for a sender to send carefully crafted packets to desynchronize the
TCP Control Block (TCB) maintained by the NIDS from the TCB
on the receiver side. In some cases, the NIDS can even be tricked to
completely deactivate the TCB (e.g., after receiving a spurious RST
packet), effectively allowing an adversary to “manipulate” the TCB
on the NIDS. Censorship monitors suffer from the same fundamen-
tal flaw—a client can evade censorship if the TCB on the censor-
ship monitor can be successfully desynchronized with the one on
the server. Different from other censorship evasion technologies
IMC ’17, November 1–3, 2017, London, UK
Zhongjie Wang et al.
such as VPN, Tor, and Telex [32], that rely on additional network
infrastructure (e.g., proxy node) [27], TCB-manipulation-based eva-
sion techniques only require crafting/manipulating packets on the
client-side and can potentially help all TCP-based application-layer
protocols “stay under the radar.” Based on this idea, Khattak et
al. [17] explored several practical evasion techniques against the
GFW, by studying its behaviors at the TCP and HTTP layers. The
West Chamber Project [25] provides a practical tool that imple-
mented a few of the evasion strategies but has ceased development
since 2011; unfortunately none of the strategies were found to be
effective during our measurement study. Besides these attempts,
there is no recent data point, showing how these evasion techniques
work in the wild.
In this work, we extensively evaluate TCP-layer censorship eva-
sion techniques against the GFW. By testing from 11 vantage points
inside China spread across 9 cities (and 3 ISPs), we are able to cover
a variety of network paths that potentially include different types
of GFW devices and middleboxes (see § 3.3 for details). We measure
how TCB manipulation can help HTTP, DNS, and Tor evade the
GFW.
First, we measure how existing censorship evasion strategies
work in practice. Interestingly, we find that most of them no longer
work well due to unexpected network conditions, interference from
the network middleboxes, or more importantly, new updates to
the GFW (different from the model considered previously). These
initial measurement results motivate us to construct probing tests
to infer the “new” updated GFW model. Finally, based on the new
GFW model and lessons learned with regards to other practical
challenges in deploying TCP-layer censorship evasion, we develop
a set of new evasion strategies. Our measurement results show that
the new strategies have a 90% or higher, evasion success rate. We
also evaluate how these new strategies can help HTTP, DNS, Tor,
and VPN evade the GFW.
We summarize our contributions as the follows:
behaviors with TCP-layer censorship evasion techniques.
In addition, during the course of our measurement study, we
design and implement a censorship evasion tool, INTANG, integrat-
ing all of the censorship evasion strategies considered in this paper;
INTANG is easily extensible to incorporate additional strategies.
It requires zero configuration and runs in the background to help
normal traffic evade censorship. We plan to open source the tool to
support future research in this direction.
• We perform the largest measurement study to date, of the GFW’s
• We demonstrate that existing strategies are either not working
• We develop an updated and more comprehensive model of the
• We propose new, measurement-driven strategies that can bypass
• We measure the success rates of our improved strategies with
regards to censorship evasion for HTTP, DNS, VPN, and Tor. The
results show very high success rates (> 90 %).
• We develop an open-source tool to automatically measure the
GFW’s responsiveness, and for censorship circumvention. The
GFW based on the measurement results.
or are limited in practice.
the new model.
tool is extensible as a framework for the integration of additional
evasion strategies that may emerge from future research.
2 BACKGROUND
In this section, we provide the background on DPI-based censorship
techniques employed by the GFW and discuss previously proposed
evasion strategies.
2.1 On-path censorship systems
An “on-path” censorship system wiretaps routers of the ISPs con-
trolled by the censor, makes copies of the packets on the fly and
performs analysis in parallel with ongoing traffic. In contrast, an
“in-path” censorship system places devices as part of a route, an-
alyzes the traffic and then passes the same to the next hop. The
capabilities of an “on-path” system include reading packets and
injecting new packets, while an “in-path” system can also discard
and/or modify packets. For an “on-path” system, processing time is
not critical and thus, it can do more sophisticated analysis; for an
“in-path” system, it is critical not to perform heavy analysis that
will introduce packet delays. Large-scale censorship systems like
the GFW usually deploy the “on-path” design in order to ensure
extremely high throughput.
To examine the application-layer content with DPI, a censorship
system like the GFW needs to first reassemble TCP streams from
the packets. As reported [17], the GFW has a simplified TCP imple-
mentation to reconstruct the TCP data flow and pass it to the upper
layer for further analysis. The GFW is able to analyze a wide range
of application protocols (e.g., HTTP, DNS, IMAP), and can apply its
rule-based detection engine to detect sensitive application content.
TCP connection reset is a versatile censorship technique. Due to
the “on-path” nature of the GFW, it cannot discard the undesired
packets between a pair of end-hosts. Instead it can inject packets
to force the connection to shut down, or disrupt connection estab-
lishment. Once any sensitive content is detected, the GFW injects
RST (type-1) and RST/ACK (type-2) packets to both the correspond-
ing client and the server to disrupt the ongoing connection and
sustains the disruption for a certain period (90 seconds as per our
measurements). During this period, any SYN packet between the
two end-hosts will trigger a forged SYN/ACK packet with a wrong
sequence number from the GFW, which will obstruct the legitimate
handshake; any other packets will trigger forged RST and RST/ACK
packets, which will tear down the connection.
According to previous work [3, 25] and our measurements, RST
(type-1) and RST/ACK (type-2) are likely from two types of GFW
instances that usually exist together. We have encountered some
occurences where a type-1 or a type-2 reset occurs individually;
thus, we are able to measure their features separately. Type-1 reset
has only the RST flag set, and random TTL value and window sizes,
while type-2 reset has the RST and ACK flags set, and cyclically
increasing TTL value and window sizes.
Once a sensitive keyword detected, the GFW sends one type-1
RST and three type-2 RST/ACK with sequence numbers X, X+1460
and X+4380 (X is the current server-side sequence number). 1 Note
1The common size of a full TCP packet is 1460 bytes. Sometimes injected packets
can fall behind a server’s response and thus, become obsolete and discarded. Sending
packets with future sequence numbers can offset this effect to a large extent.
that only type-2 resets entail forged SYN/ACK packets during the
90-second subsequent blocking period; furthermore, only type-2
resets are seen when we split a HTTP request into two TCP packets.
From all of the above, we speculate that the type-2 resets are from
more advanced GFW instances or devices.
Numerous studies have focused on the TCP connection reset of
the GFW. Xu et al. [34] perform measurements to determine the
locations of the censor devices injecting RST packets. Crandall et
al. [11] employ latent semantic analysis to automatically generate
an up-to-date list of censored keywords. Park et al. [20] measure
the effectiveness of RST packet injection for keyword filtering on
HTTP requests and responses, and provide insights on why filtering
based on HTTP responses has been discontinued. Performing TCP
connection reset does come with shortcomings. For instance, it is
costly to track the TCP state of each and every connection and
match keywords against a massive number of TCP packets. It is
also not completely resistant to evasion.
DNS poisoning is another common technique used by the GFW [4,
5, 19]. The GFW censors the DNS requests over both UDP and
TCP. For a UDP DNS request with a blacklisted domain, it simply
injects a fake DNS response; for a TCP DNS request, it turns to the
connection reset mechanism. Our measurements also cover DNS
over TCP.
2.2 Evasion of NIDS and censorship systems
Ptacek et al. [23] have systematically studied the vulnerabilities of
NIDS in the way that NIDS construct and maintain TCP state. In
particular, NIDS maintain a TCP Control Block (TCB) for each live
connection to track its state information (e.g., TCP state, sequence
number, acknowledgment number, etc.). The goal is to replicate the
same exact connection information that exists at both endpoints.
However, in practice this is very challenging due to the following
factors:
• Diversity in host information. Due to ambiguity and updates in
TCP specifications, different OS implementations may have very
different behaviors in handling TCP packets. For instance, when
unexpected TCP flag combinations are encountered, different
OSes can behave differently (as how to handle these remains
unspecified in the standard). Another example is that RST packet
handling has drastically changed over different TCP standards
(RFC 793 to RFC 5961).
• Diversity in network information. A NIDS usually cannot learn the
network topology with respect to the endpoints it is protecting,
since the topology itself may change over time. For a LAN, a NIDS
can probe and maintain the topology. However, for a censorship
system, monitoring the massive scale of the entire Internet is
extremely challenging if at all possible. Further, such a system
will be unaware of network failures or packet losses. Thus, it
cannot judge accurately whether or not a packet has arrived at
its destination.
• Presence of middleboxes. NIDS usually are not aware of other
middleboxes that may be encountered between any pair of com-
municating endpoints. These middleboxes may drop or even alter
packets after the NIDS process them, which makes it even more