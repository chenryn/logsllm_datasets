title:A General Approach to Network Configuration Verification
author:Ryan Beckett and
Aarti Gupta and
Ratul Mahajan and
David Walker
A General Approach to Network Configuration Verification
Ryan Beckett
Princeton University
Ratul Mahajan
Microsoft Research & Intentionet
ABSTRACT
We present Minesweeper, a tool to verify that a network satis-
(cid:27)es a wide range of intended properties such as reachability or
isolation among nodes, waypointing, black holes, bounded path
length, load-balancing, functional equivalence of two routers, and
fault-tolerance. Minesweeper translates network con(cid:27)guration (cid:27)les
into a logical formula that captures the stable states to which the
network forwarding will converge as a result of interactions be-
tween routing protocols such as OSPF, BGP and static routes. It
then combines the formula with constraints that describe the in-
tended property. If the combined formula is satis(cid:27)able, there exists
a stable state of the network in which the property does not hold.
Otherwise, no stable state (if any) violates the property. We used
Minesweeper to check four properties of 152 real networks from
a large cloud provider. We found 120 violations, some of which
are potentially serious security vulnerabilities. We also evaluated
Minesweeper on synthetic benchmarks, and found that it can verify
rich properties for networks with hundreds of routers in under (cid:27)ve
minutes. This performance is due to a suite of model-slicing and
hoisting optimizations that we developed, which reduce runtime
by over 460x for large networks.
CCS CONCEPTS
• Networks → Network reliability;
KEYWORDS
Network veri(cid:27)cation; Control plane analysis
ACM Reference format:
Ryan Beckett, Aarti Gupta, Ratul Mahajan, and David Walker. 2017. A
General Approach to Network Con(cid:27)guration Veri(cid:27)cation. In Proceedings of
SIGCOMM ’17, Los Angeles, CA, USA, August 21-25, 2017, 14 pages.
DOI: 10.1145/3098822.3098834
1 INTRODUCTION
The control plane of traditional (non-SDN) networks is a complex
distributed system. Network devices use one or more protocols to
exchange information about topology and paths to various destina-
tions. How they process this information and select paths to use for
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for pro(cid:27)t or commercial advantage and that copies bear this notice and the full citation
on the (cid:27)rst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speci(cid:27)c permission
and/or a fee. Request permissions from permissions@acm.org.
SIGCOMM ’17, Los Angeles, CA, USA
© 2017 Copyright held by the owner/author(s). Publication rights licensed to ACM.
978-1-4503-4653-5/17/08...$15.00
DOI: 10.1145/3098822.3098834
Aarti Gupta
Princeton University
David Walker
Princeton University
tra(cid:28)c depends on their local con(cid:27)guration (cid:27)les. These (cid:27)les tend to
have thousands of lines of low-level directives, which makes it hard
for humans to reason about them and even harder to reason about
the network behavior that emerges through their interactions.
As a result, con(cid:27)guration errors that lead to costly outages are
all-too-common. Indeed, every few months con(cid:27)guration-induced
outages at major networks make the news [1, 5, 29, 32]. Systematic
surveys also show that con(cid:27)guration error is the biggest contributor
to such network outages [20, 26].
To address this problem, researchers have developed many tools
for (cid:27)nding errors in network con(cid:27)gurations. We broadly classify
these tools along two dimensions: i) network design coverage—types
of network topologies, routing protocols and other features the tool
supports; and ii) data plane coverage—how many (or how much) of
the possible data planes the tool can analyze. The network control
plane dynamically generates di(cid:29)erent data planes as its environ-
ment (i.e., up/down status of links and routing announcements
received from external neighbors) changes. Tools with higher data
plane coverage can analyze more such data planes.
Some of the earliest network diagnostic tools such as traceroute
and ping can help (cid:27)nd con(cid:27)guration errors by analyzing whether
and how a given packet reaches its destination. These tools are
simple and have high network design coverage—they can analyze
forwarding for any network topology or routing protocol. But they
have poor data plane coverage—for each run, they analyze the
forwarding behavior for only a single packet for the data plane that
is currently installed in the network.
A more recent class of data plane analysis tools such as HSA [18]
and Veri(cid:30)ow [19] have better data plane coverage. They can analyze
reachability for all packets between two machines, rather than just
one packet. However, the data plane coverage of such tools is still
far less than ideal because they analyze only the data plane that
is currently installed in the network. That is, they can only (cid:27)nd
errors after the network has produced the erroneous data plane.
Control plane analysis tools such as Bat(cid:27)sh [13] can (cid:27)nd con-
(cid:27)guration errors proactively, before deploying potentially buggy
con(cid:27)gurations. Bat(cid:27)sh takes the network con(cid:27)guration (i.e., its con-
trol plane) and a speci(cid:27)c environment (e.g., a link-failure scenario)
as input and analyzes the resulting data plane. This ability allows
operators to go beyond the current data plane and analyze future
data planes that may arise under di(cid:29)erent environments. Still, each
run of Bat(cid:27)sh allows users to explore at most one data plane, and
given the large number of possible environments, it is intractable
to guarantee correctness for all possible data planes.
Most recently, several control plane analysis tools have gone
from testing individual data planes to veri(cid:27)cation—that is, reasoning
about many or all data planes that can be generated by the control
plane. However, each such tool trades network design coverage for
SIGCOMM ’17, August 21-25, 2017, Los Angeles, CA, USA
Ryan Becke(cid:29), Aarti Gupta, Ratul Mahajan, and David Walker
The main challenge in developing Minesweeper was scaling such
a general tool. We addressed it by combining the following ideas
from networking and veri(cid:27)cation literature:
Graphs (not paths). Most existing tools reason about individual
network paths. While this approach has proven e(cid:29)ective for state-
less data plane analysis (e.g., HSA [18]), it creates substantial prob-
lems for control plane analysis. The distinction is that, in stateless
data planes, packets on one path never interfere with those on a
di(cid:29)erent path; but in the control plane, two route announcements
can interfere. A routing message along one path may be less pre-
ferred than a message over another path, causing it to be dropped
when the other message is present. For accuracy, interactions along
all paths must be modeled, but there can be an intractably large
number of paths. We avoid this problem by using a graph-based
model, where rich logical constraints on its edges and nodes encode
all possible interactions of route messages.
In addition to its better accuracy, our model can verify a much
richer set of properties, expressed over graphs, rather than over
paths alone. For example, it can reason about equivalence of routers,
load balancing, disjointedness of routing paths, and if multiple paths
to the same destination have equal lengths. Such properties are
di(cid:28)cult or impossible for path-based models to check, and we show
that they are valuable in (cid:27)nding bugs in real con(cid:27)gurations.
Combinational search (not message set computation). Exist-
ing tools that analyze multiple environments [11, 34] eagerly com-
pute the sets of routing messages that can reach various points
in the network. However, these full sets are not typically needed
and computing them is expensive. Fortunately, the symbolic model
checking community has encountered this type of problem before.
Rather than iteratively computing sets of messages, one can instead
ask for a satisfying assignment to a logical formula that represents
all possible message interactions. Suppose a variable xm,l repre-
sents whether a message m reaches a location l in the network and
N encodes the network semantics logically. If there exists a satis-
fying assignment to the formula N ∧ xm,l =true, then m can reach
l and all the constraints N imposed by interacting messages are
also satis(cid:27)ed. The advantage of this formula-based approach is that
while model checking with message set computation is PSPACE-
complete [7, 30], the search for a satisfying assignment in the related
bounded model checking problem [6] is NP-complete. The intuition
behind lower complexity is that searching for a satisfying assign-
ment avoids computing many intermediate message sets. In practice
too, modern SAT [23] and SMT (Satis(cid:27)ability Modulo Theories) [9]
solvers routinely solve large instances of such combinational search
problems in hardware and software veri(cid:27)cation.
Stable paths problem. To realize an approach based on graphs and
combinational search, we need to convert the distributed message-
passing of the control plane into an equivalent logical formula.
Here, we turn to the work of Gri(cid:28)n et al. [16], who showed that
network control planes (BGP in particular) solve the stable paths
problem, and these paths can be described by constraints on edges.
Consequently, rather than encoding message exchanges, we can
encode the corresponding set of edge constraints in our formula,
such that satis(cid:27)able assignments correspond to stable paths in the
control plane. Our formula captures all possible environments as
Figure 1: Landscape of network analysis tools.
higher data plane coverage. For instance, while Bagpipe [34] can
symbolically simulate the message-passing semantics of BGP in
all possible environments, it assumes that the network is a single
autonomous system (AS) connected in an iBGP full mesh, and does
not model any internal routing. Another tool, ARC [14], translates
con(cid:27)gurations to a weighted graph where the weighted-shortest
paths capture the network forwarding behavior. A single run of
ARC can e(cid:28)ciently analyze multiple data planes by considering the
consequences of all possible failures but not all possible sets of exter-
nal routing messages. Further, many networks, such as those using
iBGP or using certain features such as BGP local preference can not
be reduced to simple weighted graphs. ERA [11] compactly repre-
sents a concrete set of control plane messages using binary decision
diagrams (BDDs) and propagates this set along a path through the
network by transforming the set as dictated by the network con-
(cid:27)guration. In this way, ERA can e(cid:28)ciently check reachability in
certain large symbolic environments (e.g., the environment with
all possible eBGP advertisements), but using ERA to verify con(cid:27)g-
urations in the face of all environments is an open problem [11].
Further, the path-based approach of ERA cannot faithfully analyze
reachability for certain networks such as those running iBGP.
In summary then, while there has been great progress toward
analyzing network con(cid:27)gurations, a fundamental scienti(cid:27)c question
is still open:
Is it possible to build a veri(cid:27)cation tool that achieves
both high network design coverage and high data
plane coverage while remaining scalable enough to
enable veri(cid:27)cation of many real networks?
We answer this question in the a(cid:28)rmative by developing a con-
(cid:27)guration veri(cid:27)cation tool called Minesweeper. Figure 1 situates
Minesweeper and prior tools with respect to network design and
data plane coverage. Minesweeper has both high network design
coverage in that it works for a large collection of network protocols,
features and topologies as well as high data plane coverage in that
it can verify a large number of properties for all possible data planes
that might emerge from the control plane.
A General Approach to Network Configuration Verification
SIGCOMM ’17, August 21-25, 2017, Los Angeles, CA, USA
Figure 2: (a) An example network. (b) Its protocol-level decomposition. (c) Routing information (cid:30)ow for BGP at R1.
symbolic variables, and we add constraints related to properties of
interest to perform veri(cid:27)cation.
Slicing and hoisting optimizations. Our default encoding of
the network control plane produces large formulas that cannot
be solved quickly for real networks. We have designed a range of
highly e(cid:29)ective optimizations that reduce the number of variables
and constraints in our generated formulae enormously. One class
of optimizations is slicing, which analyzes the formula to remove
variables and constraints that cannot a(cid:29)ect the (cid:27)nal outcome. A
second class of optimizations is hoisting, which lifts repeated com-
putations out of their logical context and precomputes them once.
Intuitively, such optimizations are e(cid:29)ective because real networks
have simpler control planes than the theoretical worst case. For
instance, in theory, messages can be arbitrarily modi(cid:27)ed when sent
to neighbors (implying the need for di(cid:29)erent variables for messages
to di(cid:29)erent neighbors), but in practice the same message is sent to
multiple neighbors (allowing shared variables). Similarly, while dif-
ferent routers may have arbitrarily di(cid:29)erent control plane logic in
theory, in practice many routers share parts of their con(cid:27)gurations.
We implement the concepts above in Minesweeper, and apply
it to many real and synthetic networks. Across the 152 small- and
medium-sized networks that we analyzed for four properties, we
found 120 violations. One class of violations poses a serious se-
curity threat: the management interface IP of the routers could
be “hijacked" by external neighbors by sending speci(cid:27)c routing
announcements. Our experiments with synthetic networks show
that Minesweeper can verify rich properties such as many-to-one
reachability, bounded path length, and device equivalence in under
5 minutes on networks with 100s of routers. Our optimizations are
key to this performance. They help reduce veri(cid:27)cation time by a
factor of up to 460x for large networks.
2 MOTIVATION
Our approach represents two signi(cid:27)cant departures from existing