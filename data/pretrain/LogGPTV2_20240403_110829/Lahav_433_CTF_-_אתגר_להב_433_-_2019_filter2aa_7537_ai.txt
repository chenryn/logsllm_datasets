This actually looks like a bug in the implementation. Yaakov's solution was to patch the program and replace the `0` flag with an `8` (`CRYPT_NEWKEYSET`), run it once, revert the patch and run from then on with `0`, which resolved the crash.
I later chose to lend [the following sample code](https://docs.microsoft.com/en-us/windows/desktop/api/wincrypt/nf-wincrypt-cryptacquirecontextw) from Microsoft's documentation, modify it and run the following program on my virtual machine:
```c
#include "stdafx.h"
#include 
#include 
int main()
{
    HCRYPTPROV hCryptProv = NULL;
    if (CryptAcquireContext(
        &hCryptProv,               // handle to the CSP
        NULL,                      // container name 
        MS_ENHANCED_PROV,          // provider
        PROV_RSA_FULL,             // provider type
        0))                        // flag values
    {
        printf("A cryptographic context has been acquired.\n\n");
    }
    else
    {
        //-------------------------------------------------------------------
        // An error occurred in acquiring the context. This could mean
        // that the key container requested does not exist. In this case,
        // the function can be called again to attempt to create a new key 
        // container. Error codes are defined in Winerror.h.
        if (GetLastError() == NTE_BAD_KEYSET)
        {
            if (CryptAcquireContext(
                &hCryptProv,
                NULL,
                MS_ENHANCED_PROV,
                PROV_RSA_FULL,
                CRYPT_NEWKEYSET))
            {
                printf("A new key container has been created.\n");
            }
            else
            {
                printf("Could not create a new key container.\n");
                exit(1);
            }
        }
        else
        {
            printf("A cryptographic service handle could not be "
                "acquired.\n");
            exit(1);
        }
    }
    if (CryptReleaseContext(hCryptProv, 0))
    {
        printf("The handle has been released.\n");
    }
    else
    {
        printf("The handle could not be released.\n");
    }
    return 0;
}
```
Output from running the program:
```console
C:\Users\User\Desktop\CTF\433>CryptoApp.exe
A new key container has been created.
The handle has been released.
```
This also resolved the crash, and finally allowed to run the program as intended.
We see a console printing a few strings, then disappearing again. However, the program did not exit, as we can see from inspecting the [Process Monitor](https://docs.microsoft.com/en-us/sysinternals/downloads/procmon), it just hid the console again and spawned a child:
![](images/proc_explorer.png)
After waiting for a while with the child process eating up ~100% CPU, we get the following alert:
![](images/reverse1.png)
We can use [OllyDumpEx](https://low-priority.appspot.com/ollydumpex/) to dump the child process and inspect it:
![](images/ollydump.png)
Now that we have dumped the process, we can open it with a disassembler.
Searching for interesting strings, we find the string from the message box:
```
[0x004024bd]> iz~VERY
1404 0x0002f4d0 0x0042f4d0  69  70 (.rdata) ascii VERY NICE, YOU HAVE SUCCESSFULLY DETACHED MY PACKER.\nONE MORE PUSH !\n
[0x004024bd]> axt @ 0x0042f4d0
main 0x4021e6 [DATA] push str.VERY_NICE__YOU_HAVE_SUCCESSFULLY_DETACHED_MY_PACKER.__ONE_MORE_PUSH
[0x004024bd]> s 0x4021e6
[0x004021e6]>
```
The relevant part is:
```
                                                       .-------------------------------------------------------------------------------------.
                                                       | [0x4021df]                                                                          |
                                                       | ; CODE XREF from main (0x402253)                                                    |
                                                       | push 0                                                                              |
                                                       | ; 0x42f4b8                                                                          |
                                                       | ; "Lahav433 Message"                                                                |
                                                       | push str.Lahav433_Message                                                           |
                                                       | ; 0x42f4d0                                                                          |
                                                       | ; "VERY NICE, YOU HAVE SUCCESSFULLY DETACHED MY PACKER.\nONE MORE PUSH !\n"         |
                                                       | push str.VERY_NICE__YOU_HAVE_SUCCESSFULLY_DETACHED_MY_PACKER.__ONE_MORE_PUSH        |
                                                       | push 0                                                                              |
                                                       | ; 0x4221a4                                                                          |
                                                       | ; "0\x88Aw"                                                                         |
                                                       | call dword [sym.imp.USER32.dll_MessageBoxA];[gBa]                                   |
                                                       | push 0                                                                              |
                                                       | push 0                                                                              |
                                                       | push 0                                                                              |
                                                       | ; '0&@'                                                                             |
                                                       | ; "U\x8b\xec\x83\xec\x14\xa1l C"                                                    |
                                                       | push 0x402630                                                                       |
                                                       | push 0                                                                              |
                                                       | push 0                                                                              |
                                                       | ; 0x422010                                                                          |
                                                       | call dword [sym.imp.KERNEL32.dll_CreateThread];[gBb]                                | 
                                                       | mov esi, eax                                                                        |
                                                       | test esi, esi                                                                       |
                                                       | je 0x402255;[gBc]                                                                   |
                                                       `-------------------------------------------------------------------------------------'
                                                               f t
                                                               | |
                                                               | '---------------.
         .-----------------------------------------------------'                 |
         |                                                                       |
   .--------------------------------------------------------.  .----------------------------------.
   |  0x40220e [gBg]                                        |  |  0x402255 [gBc]                  |
   | ; 1000                                                 |  | ; CODE XREF from main (0x40220c) |
   | push 0x3e8                                             |  | ; 0x42f518                       |
   | ; 0x422014                                             |  | ; "NOT COOL 2\n"                 |
   | call dword [sym.imp.KERNEL32.dll_Sleep];[gBe]          |  | push str.NOT_COOL_2              |
   | push 0                                                 |  | call fcn.004038b0;[gq]           |
   | push esi                                               |  | mov ecx, dword [local_4h]        |
   | push 0x402280                                          |  | add esp, 4                       |
   | ; 0x422018                                             |  | xor ecx, ebp                     |
   | call dword [sym.imp.KERNEL32.dll_QueueUserAPC];[gBf]   |  | mov eax, 1                       |
   | ; [0x4329fc:4]=1                                       |  | pop edi                          |
   | mov eax, dword [0x4329fc]                              |  | pop esi                          |
   | nop dword [eax]                                        |  | pop ebx                          |
   `--------------------------------------------------------'  | call fcn.00405c92;[gBi]          |
                          v                                    | mov esp, ebp                     |
                          |                                    | pop ebp                          |
                          |                                    | ret                              |
                          |                                    `----------------------------------'
                          |                                    
      .--------.          |
      |        |          |
      |.----------------------------------.
      ||  0x402230 [gBh]                  |
      || ; CODE XREF from main (0x402232) |
      || test eax, eax                    |
      || jne 0x402230;[gBh]               |
      |`----------------------------------'
      |        f t
      |        | |
      `----------'
           .---'
       .----------------------------------.
       |  0x402234 [gBj]                  |
       | push esi                         |
       | call ebx                         |
       | pop edi                          |
       | pop esi                          |
       | xor eax, eax                     |
       | pop ebx                          |
       | mov ecx, dword [local_4h]        |
       | xor ecx, ebp                     |
       | call fcn.00405c92;[gBi]          |
       | mov esp, ebp                     |
       | pop ebp                          |
       | ret                              |
       `----------------------------------' 
```
We can see that a thread is created with `0x402630` as the start address. Then, after a short `sleep`, the program calls `QueueUserAPC` with `0x402280` as the `pfnAPC` function. 
Immediately after, the program enters an endless loop, polling `eax`. So what's happening here? To understand that, we first need to understand what `QueueUserAPC` does.
```
DWORD QueueUserAPC(
  PAPCFUNC  pfnAPC,
  HANDLE    hThread,
  ULONG_PTR dwData
);
```
> QueueUserAPC function
> 
> Adds a user-mode asynchronous procedure call (APC) object to the APC queue of the specified thread.
> 
> pfnAPC: A pointer to the application-supplied APC function to be called when the specified thread performs an alertable wait operation.
> 
> hThread: A handle to the thread.
This function takes a thread and a callback. It then registers the callback in a way that this callback will be called when the thread performs an alertable wait operation. 
What is this callback? From an overview of the function, we see that it has some positive strings, such as "your token is" and "Congratulations". So we probably want to run the function.