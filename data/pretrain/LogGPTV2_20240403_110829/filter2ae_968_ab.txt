    Class clazz = Class.forName("java.lang.Runtime"); 
    clazz.getMethod("exec", String.class).invoke(clazz.getMethod("getRuntime").invoke(clazz), "calc.exe");
以上我们就完成了通过类内置的静态方法获取类的实例，进一步调用一个public方法。  
但是假如一个类没有无参构造方法（即不能class.newInstance()），也没有单例模式（只存在一个实例）的静态方法（即不能像getRuntime一样获取实例），那我们该如何实例化这个类呢？
### 指定的构造方法生成类的实例
继续举一个演化成反射机制的执行命令payload的例子：
    List paramList = new ArrayList<>();
    paramList.add("calc.exe");
    ProcessBuilder pb = new ProcessBuilder(paramList);
    pb.start();
可见，其构造函数是写入了一个字符串，不是无参构造方法，接下来我们会一步步进行转化。
`getConsturctor()`函数可以选定指定接口格式的构造函数(由于构造函数也可以根据参数来进行重载)，即：`getConsturctor(参数类型)`
选定后我们可以通过newInstance(),并传入构造函数的参数执行构造函数，即`newInstance(传入的构造函数参数)`。
ProcessBuilder有两个构造函数：
  * `public ProcessBuilder(List command)`
  * `public ProcessBuilder(String... command)`(此处，String`...`这种语法表示String参数数量是可变的，与String[]一样)  
分别执行构造方法获取实例的语句如下：
  * `Class.forName("java.lang.ProcessBuilder").getConstructor(String.class).newInstance("calc.exe"))`
  * `Class.forName("java.lang.ProcessBuilder").getConstructor(List.class).newInstance(Arrays.asList("calc.exe")))`
执行完构造方法获取实例之后，其实可以通过类型强制转化，进而执行start()函数，进行执行命令。
    Class clazz = Class.forName("java.lang.ProcessBuilder"); 
    ( (ProcessBuilder) clazz.getConstructor(List.class).newInstance(Arrays.asList("calc.exe")) ).start();
但实际情况下并不一定可以这样利用，所以继续使用反射机制调用start函数,start函数不是一个静态函数,需要传入类的实例：
    Class clazz = Class.forName("java.lang.ProcessBuilder"); 
    clazz.getMethod("start").invoke(clazz.getConstructor(List.class).newInstance(Arrays.asList("calc.exe")));
亲测成功
另一种形式的构造函数的反射转换：
    ProcessBuilder pb = new ProcessBuilder("calc.exe");//这个可以传入多个字符串
    pb.start();
因为ProcessBuilder构造函数传入的参数其实不是一个字符串String.class类型，而是一个变长的字符串数组String[].class，所以我们应该如下调用。
    Class clazz = Class.forName("java.lang.ProcessBuilder"); 
    ((ProcessBuilder)clazz.getConstructor(String[].class).newInstance(new String[]{"calc.exe"})).start();
但是实际上我们这样调用是会报错的，因为newInstance函数接受参数是一个`Object..`也就是Object数组，它会完美契合我们提供的String[]，剥去一层数组。
来看看之前的List形式构造函数的形式：
可见少了一层，List传入会被当做Object的第一项，而String[]传入，会直接被当作Object。  
所以我们需要再加一层[]：
    Class clazz = Class.forName("java.lang.ProcessBuilder"); 
    ((ProcessBuilder)clazz.getConstructor(String[].class).newInstance(new String[][]{{"calc.exe"}})).start();
亲测可弹计算器。
### 执行私有方法
以上都是方法或构造方法是public函数，但是如果是私有方法，我们该如何调用？  
之前我们用的都是getMethod、getConstructor，接下来需要使用getDeclaredMethod、getDeclaredConstructor：
  * getMethod等方法获取的是当前类中所有公共方法，包括从父类继承的方法 
  * getDeclared等方法获取的是当前类中“声明”的方法，是实在写在这个类里的，包括私有的方法，但从父类里继承来的就不包含了
之前说到Runtime的构造方式是一个私有方法，从而不能直接调用，那么接下来我们来调用Runtime的构造方法来获取一个实例来执行calc.exe：
    Class clazz = Class.forName("java.lang.Runtime"); 
    Constructor m = clazz.getDeclaredConstructor(); 
    m.setAccessible(true); 
    clazz.getMethod("exec", String.class).invoke(m.newInstance(), "calc.exe");
在获取到私有方法后，通过`setAccessible(true)`可以打破私有方法访问限制，从而进行调用。  
getDeclaredMethod、getDeclaredConstructor和getMethod、getConstructor使用方法是一致的，就不赘述了。
## 小结
那么我们已经通过反射机制，调用任意类的任意方法了。  
具体的函数说明表格可以参考[简书](https://www.jianshu.com/p/9be58ee20dee)
## 从commons-collections回来的invoke性质补充说明
一直以来我们都看到这种反射机制的调用来获取Runtime类的实例：
    Class.forName("java.lang.Runtime").getMethod("getRuntime").invoke(Class.forName("java.lang.Runtime"))
看到这个例子，我们可能会固定思维的误解：  
我们从哪个类中获取方法，在invoke中就应该传入哪个类或这个类的实例（上面说过，这个需要根据方法来定）
我们从源码来看一下Method类中的invoke函数的输入输出说明：
    * @param obj  the object the underlying method is invoked from//调用基础方法的对象
    * @param args the arguments used for the method call//调用这个方法的传参
    * @return the result of dispatching the method represented by//调用这个方法的返回结果
    * this object on {@code obj} with parameters
来对照普通调用语句和反射语句之间的对应关系，这里前后两个class都是相同的Runtime class
那么讲道理一般的调用，默认我们的固定思维惯性，也不会有什么问题，因为选中一个类的方法自然是应该传入这个类的实例或这个类。  
直到出现一些意外：
    //不要把下面的语句当作反射机制，就当作Runtime.getRuntime()是一个普通函数调用
    Class.forName("java.lang.Runtime").getMethod(...)
    Class.forName("java.lang.Class").getMethod(...)
    //好比有一个函数可以在两个class中调用
    a.getMethod()
    b.getMethod()
如上我们一直忽略了我们反射机制中调用的函数实际上可以在不同的class中调用，这一点在commons-collections中十分关键：  
由于当时的环境  
不允许我们得到`Class.forName("java.lang.Runtime").getMethod(...)`  
只有`Class.forName("java.lang.Class").getMethod(...)`
那么我们可以得到以下途径进行变形：
  * 用反射机制去调用反射机制中使用的函数getMethod
  * 使用invoke传入的obj去指定getMethod的当前的调用环境（在实际代码执行中是this变量的区别）
看一看Class类中getMethod方法的接口
    public Method getMethod(String name, Class... parameterTypes)//... 表示任意类型任意数量的Class数组
改成反射机制，得到getMethod这个方法
    Method method1= Class.forName("java.lang.Class")
            .getMethod("getMethod", new Class[] {String.class, Class[].class });//根据getMethod方法接口进行封装
指定obj：
    //以下语句执行结果等同于Class.forName("java.lang.Runtime").getMethod(getRunime)
    method1.invoke(Class.forName("java.lang.Runtime"),"getRuntime",new Class[0]);
    //用于对比：以下语句等同于Class.forName("java.lang.Class").getMethod(getRunime)
    //method1.invoke(Class.forName("java.lang.Class"),"getRuntime",new Class[0]);
合起来就是
    // 反射调用
    Class.forName("java.lang.Runtime").getMethod("getRuntime")
    // 经过变形的反射调用
    Class.forName("java.lang.Class")
        .getMethod("getMethod", new Class[] {String.class, Class[].class })//得到getMethod方法
        .invoke(Class.forName("java.lang.Runtime"),"getRuntime",new Class[0]);
现在我们只是以`Class.forName("java.lang.Class")`开头获取到了Runtime类下的getRuntime方法。还没有执行。
### invoke 静态方法的obj不那么严格
在调用invoke执行前，还需要讲另一个invoke非常神奇的特性，不那么严格校验的obj。  
回顾之前总结的invoke传参规则：
> 它的第一个参数是执行method的对象obj：
>
>   * 如果这个方法是一个普通方法，那么第一个参数是类对象
>   * 如果这个方法是一个静态方法，那么第一个参数是类  
>  它接下来的参数才是需要传入的参数。
>
传入的第一个参数其实不一定要是正确的类或者类对象!  
看一下例子：
    //main函数
    Class.forName("a").getMethod("print").invoke(null);
    //内部类：
    class a{
        public static void print(){
            System.out.println(1);
        }
    }
按照规则，print函数是一个静态方法，实际上我们应该invoke传入一个a的类。但是以上代码的执行结果却是成功的：
但是print不是静态方法时就会执行失败：
这是因为invoke函数null抛出报错的机制导致的：
    * @exception NullPointerException      
    * if the specified object is null and the method is an instance method. //obj为null，并且method是一个实例method
    */
    @CallerSensitive
    public Object invoke(Object obj, Object... args){
    }
当method是一个普通函数时，传入obj不能为null，并且其类对象要与方法匹配  
但是当method是一个静态函数时，就很随便了(可能是因为压根不会被用到吧)。
那么我们在调用getMethod的时候可不可以皮一下呢？
    Method method = (Method) Class.forName("java.lang.Class")
        .getMethod("getMethod", new Class[] {String.class, Class[].class })//得到getMethod方法
        .invoke(null,"getRuntime",new Class[0]);//这里invoke传入null
报错自然是因为getMethod并不是static方法,所以不能为null了。  
但是为什么getMethod不是static方法，但是invoke中却传入类而不是类实例呢........  
我是没有搞懂这个问题....但是感觉是因为是反射机制的函数的问题。由于已经花了太多时间，就不在这里继续纠结了。
> 感谢蟠大佬，点醒了；其实是看p牛的反射篇产生的误解，上文中所说的类，其实也是一个实例。 **类实例** 是其他类的实例， **类**
> 实际上是Class.class这个类的实例。  
>  这边之前的疑问是，getMethod不是静态方法而invoke中传入的是类而不是类实例。  
>
> 实际上因为getMethod本来就是class类中的方法，而`Class.forName("java.lang.Runtime")`获取到的class类的实例  
>
> 我们调用getMethod传入的不是之前的模糊类的概念，而是class类的实例（类实例），所以这里是没毛病的调用class类下的非静态方法，传入class类实例。
但是Runtime.getRuntime就不一样了：
    Object object0 = Class.forName("java.lang.Runtime").getMethod("getRuntime").invoke(Class.forName("java.lang.String"));
    Object object1 = Class.forName("java.lang.Runtime").getMethod("getRuntime").invoke(null);
    Object object2 = Class.forName("java.lang.Runtime").getMethod("getRuntime").invoke(Class.forName("java.lang.Runtime"));
突出一个随便，随性。
### 回来继续构造调用
上面我们只是获取到了getRuntime方法，我们还没有调用这个方法获取其Runtime对象
    //普通调用形式
    Runtime.getRuntime()
    // 反射调用
    Class.forName("java.lang.Runtime").getMethod("getRuntime").invoke(Class.forName("java.lang.Runtime"))
    // 经过变形的反射调用
    Method method = (Method) Class.forName("java.lang.Class")
                    .getMethod("getMethod", new Class[] {String.class, Class[].class })//得到getMethod方法
                    .invoke(Class.forName("java.lang.Runtime"),"getRuntime",new Class[0]);//调用getMethod方法
    //以上等于执行Class.forName("java.lang.Runtime").getMethod("getRuntime")
    //调用Runtime.getRuntime函数，传入的obj根据上面的分析可以随便写
    method.invoke(Class.forName("java.lang.Runtime"),new Object[0]);
    method.invoke(null,new Object[0]);
    method.invoke(Class.forName("java.lang.String"),new Object[0]);
至此，我们就换了一种方式去获取Runtime实例。  
当然最后的getRuntime函数我们是直接反射调用的，在实际commons-collections利用中我们仍然需要跟得到getMethod一样用反射机制去获取invoke，然后再调用。  
虽然在这里觉得1+1的问题为什么要1+1000-1000+1，兜兜转转挺傻乎乎的。但是在利用链的场景下，就会觉得：
卧槽....这个POC作者真是个人才。
## 参考
反射机制参考：  
P神-java安全漫谈-反射机制1（知识星球-代码审计）  
P神-java安全漫谈-反射机制2（知识星球-代码审计）  
P神-java安全漫谈-反射机制3（知识星球-代码审计）