$ docker ps [option(s)]
```
| 
旗
 | 
说明
 |
| --- | --- |
| 
```
-a, --all
```
 | 该显示所有容器，包括停止的容器。 |
| 
```
-q, --quiet
```
 | 该仅显示容器标识参数。 |
| 
```
-s, --size
```
 | 这个打印容器的尺寸。 |
| 
```
-l, --latest
```
 | 这个只显示最新的容器(包括停止的容器)。 |
| 
```
-n=""
```
 | 此显示最后一个 *n* 容器(包括停止的容器)。它的默认值是-1。 |
| 
```
--before=""
```
 | 此显示在指定的 ID 或名称之前创建的容器。它包括停止的容器。 |
| 
```
--after=""
```
 | 此显示在指定的 ID 或名称后创建的容器。它包括停止的容器。 |
默认情况下，`docker ps`命令将只显示正在运行的容器。要查看所有容器，运行`docker ps -a`命令。要仅查看容器标识参数，请使用`-q`标志运行它。
## 日志命令
`logs`命令显示容器的日志:
```
Let us look at the logs of the python server we have been running
$ docker logs OD-pythonserver-4
Serving HTTP on 0.0.0.0 port 8000 ...
10.0.2.2 - - [18/Jul/2014 15:06:39] "GET / HTTP/1.1" 200 -
^CTraceback (most recent call last):
 File ...
 ...
KeyboardInterrupt
```
您还可以提供一个`--tail`参数来跟踪容器运行时的输出。
## 检查命令
`inspect`命令允许你获得一个容器或映像的细节。它以 JSON 数组的形式返回这些细节:
```
$ Docker inspect ubuntu # Running on an image
[{
 "Architecture": "amd64",
 "Author": "",
 "Comment": "",
 .......
 .......
 .......
 "DockerVersion": "0.10.0",
 "Id": "e54ca5efa2e962582a223ca9810f7f1b62ea9b5c3975d14a5da79d3bf6020f37",
 "Os": "linux",
 "Parent": "6c37f792ddacad573016e6aea7fc9fb377127b4767ce6104c9f869314a12041e",
 "Size": 178365
}]
```
同样，对于一个容器，我们运行以下命令:
```
$ Docker inspect OD-pythonserver-4 # Running on a container
[{
 "Args": [
 "-m",
 "SimpleHTTPServer",
 "8000"
 ],
 ......
 ......
 "Name": "/OD-pythonserver-4",
 "NetworkSettings": {
 "Bridge": "Docker0",
 "Gateway": "172.17.42.1",
 "IPAddress": "172.17.0.11",
 "IPPrefixLen": 16,
 "PortMapping": null,
 "Ports": {
 "8000/tcp": [
 {
 "HostIp": "0.0.0.0",
 "HostPort": "8000"
 }
 ]
 }
 },
 ......
 ......
 "Volumes": {
 "/home/Docker": "/home/Docker"
 },
 "VolumesRW": {
 "/home/Docker": true
 }
}]
```
Docker inspect 提供关于容器或映像的所有低级信息。在前面的示例中，找出容器的 IP 地址和暴露的端口，并向`IP:port`发出请求。您将看到您正在直接访问运行在容器中的服务器。
然而，手动查看整个 JSON 数组并不是最佳选择。所以`inspect`命令提供了一个标志，`-f`(或`--follow`标志)，它允许你使用`Go`模板来指定你想要的。例如，如果您只想获取容器的 IP 地址，请运行以下命令:
```
$ docker inspect -f  '{{.NetworkSettings.IPAddress}}' \
OD-pythonserver-4;
172.17.0.11
```
`{{.NetworkSettings.IPAddress}}`是在 JSON 结果上执行的`Go`模板。`Go`模板非常强大，您可以使用它们做的一些事情已经在[http://golang.org/pkg/text/template/](http://golang.org/pkg/text/template/)列出。
## 最高命令
`top`命令显示容器中正在运行的进程及其统计数据，类似于 Unix `top`命令。
让我们下载并运行`ghost`博客平台，并查看其中运行的进程:
```
$ docker run -d -p 4000:2368 --name OD-ghost dockerfile/ghost
ece88c79b0793b0a49e3d23e2b0b8e75d89c519e5987172951ea8d30d96a2936
$ docker top OD-ghost-1
PID                 USER                COMMAND
1162                root                bash /ghost-start
1180                root                npm
1186                root                sh -c node index
1187                root                node index
```
没错。我们刚刚建立了自己的博客，只有一个命令。这带来了另一个微妙的优势，并显示了未来的趋势。每个通过 TCP 端口公开其服务的工具现在都可以被容器化，并在自己的沙盒世界中运行。您所需要做的就是公开它的端口，并将其绑定到您的主机端口。您不需要担心安装、依赖性、不兼容性等问题，卸载将是干净的，因为您只需要停止所有容器并删除映像。
### 注
Ghost 是一个开放源码发布平台，设计精美，使用方便，对所有人都是免费的。它是用 Node.js 编码的，node . js 是一个服务器端的 JavaScript 执行引擎。
## 附加命令
`attach`命令连接到一个正在运行的容器。
让我们用 Node.js 启动一个容器，将 node interactive shell 作为守护程序运行，然后附加到它上面。
### 注
Node.js 是一个事件驱动的异步 I/O web 框架，它在谷歌的 V8 运行时环境中运行用 JavaScript 编写的应用。
带有 Node.js 的容器如下:
```
$ docker run -dit --name OD-nodejs shykes/nodejs node
8e0da647200efe33a9dd53d45ea38e3af3892b04aa8b7a6e167b3c093e522754
$ docker attach OD-nodejs
console.log('Docker rocks!');Docker rocks!
```
## 击杀命令
`kill`命令杀死一个容器，并向容器中运行的进程发送`SIGTERM`信号:
```
Let us kill the container running the ghost blog.
$ docker kill OD-ghost-1
OD-ghost-1
$ docker attach OD-ghost-1 # Verification
2014/07/19 18:12:51 You cannot attach to a stopped container, start it first
```
## CP 命令
`cp`命令将文件或文件夹从容器的文件系统复制到主机路径。路径是相对于文件系统的根目录的。
是时候找点乐子了。首先，让我们用`/bin/bash`命令运行一个 Ubuntu 容器:
```
$ docker run -it –name OD-cp-bell ubuntu /bin/bash
```
现在，在容器内，让我们创建一个具有特殊名称的文件:
```
# touch $(echo -e '\007')
```
`\007`字符是一个 ASCII `BEL`字符，当打印在终端上时会响起系统铃声。你可能已经猜到我们要做什么了。因此，让我们打开一个新的终端，并执行以下命令将这个新创建的文件复制到主机:
```
$ docker cp OD-cp-bell:/$(echo -e '\007') $(pwd)
```
### 类型
要使`docker cp`命令起作用，容器路径和主机路径都必须完整，因此不要使用`.`、`,`、`*`等快捷方式。
因此，我们在一个容器中创建了一个文件名为`BEL`字符的空文件。然后，我们将文件复制到主机容器中的当前目录。只剩下最后一步了。在执行`docker cp`命令的主机选项卡中，运行以下命令:
```
$ echo *
```
你会听到系统铃声！我们可以将容器中的任何文件或目录复制到主机。但是找点乐子也无妨！
### 注
如果你觉得这很有趣，你可能会喜欢阅读[http://www . dwheeler . com/esses/fixing-UNIX-Linux-filename . html](http://www.dwheeler.com/essays/fixing-unix-linux-filenames.html)。这是一篇很棒的文章，讨论了文件名中的边缘情况，这可能会在程序中引起简单到复杂的问题。
## 港口命令
`port`命令查找面向公众的端口，该端口绑定到容器中的一个暴露端口:
```
$ docker port CONTAINER PRIVATE_PORT
$ docker port OD-ghost 2368
4000
```
Ghost 在`2368`端口运行一个服务器，允许你写和发布博客文章。在`top`命令的示例中，我们将主机端口绑定到`OD-ghost`容器的端口`2368`。
# 运行自己的项目
到目前为止，我们已经相当熟悉基本的 Docker 命令。让我们加大赌注。对于接下来的几个命令，我将使用我的一个辅助项目。随意使用自己的项目。
让我们首先列出我们的需求，以确定我们必须传递给`docker run`命令的参数。
我们的应用将在 Node.js 上运行，因此我们将选择维护良好的`dockerfile/nodejs`映像来启动我们的基本容器:
*   我们知道我们的应用将绑定到端口`8000`，所以我们将该端口暴露给主机的`8000`。
*   我们需要给容器一个描述性的名称，这样我们就可以在以后的命令中引用它。在这种情况下，让我们选择应用的名称:
```
$ docker run -it --name code.it dockerfile/nodejs /bin/bash
[ root@3b0d5a04cdcd:/data ]$ cd /home
[ root@3b0d5a04cdcd:/home ]$
```
启动容器后，您需要检查应用的依赖项是否已经可用。在我们的例子中，我们只需要 Git(除了 Node.js)，它已经安装在`dockerfile/nodejs`映像中。
现在我们的容器已经准备好运行我们的应用了，剩下的就是我们获取源代码并进行必要的设置来运行应用:
```
$ git clone https://github.com/shrikrishnaholla/code.it.git
$ cd code.it && git submodule update --init --recursive
```
这将下载应用中使用的插件的源代码。
然后运行以下命令:
```
$ npm install
```
现在，运行应用所需的所有节点模块都已安装。
接下来，运行以下命令:
```
$ node app.js
```
现在你可以去`localhost:8000`使用应用了。
## 差异命令
`diff`命令显示容器和它所基于的映像之间的差异。在这个例子中，我们正在运行一个带有`code.it`的容器。在单独的选项卡中，运行以下命令:
```
$ docker diff code.it
C /home
A /home/code.it
...
```
## 提交命令
`commit`命令用容器的文件系统创建一个新的映像。就像 Git 的`commit`命令一样，您可以设置一个描述映像的提交消息:
```
$ docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]
```
| 
旗
 | 
说明