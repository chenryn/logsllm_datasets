[40] Junlan Zhou, Malveeka Tewari, Min Zhu, Abdul Kabbani, Leon Poutievski, Arjun
Singh, and Amin Vahdat. 2014. WCMP: Weighted Cost Multipathing for Improved
Fairness in Data Centers. In Proceedings of the Ninth European Conference on
Computer Systems (EuroSys ’14). ACM, New York, NY, USA, Article 5, 14 pages.
https://doi.org/10.1145/2592798.2592803
[41] Noa Zilberman, Gabi Bracha, and Golan Schzukin. 2019. Stardust: Divide and
Conquer in the Data Center Network. In Proceedings of the 19th USENIX Con-
ference on Networked Systems Design and Implementation (NSDI’19). USENIX
Association, Berkeley, CA, USA.
A APPENDICES
Appendices are supporting material that has not been peer reviewed.
A.1 Using Extreme Matrices for
Minimal-Upflow Wiring
Theorem A.1. The following equation holds:
min
w ∈W
T ∈E U(w,T).
max
Proof. Given a fixed wiring w, we first
T ∈T U(w,T) = min
max
w ∈W
show that
maxT ∈T U(w,T) = maxT ∈E U(w,T). From the definitions
of upflow in Equation 1 and Equation 2 with a constant w,
the optimization maxT ∈T U(w,T) is a linear program with a
compact (closed and bounded) feasible set, and optimal solutions
SIGCOMM ’19, August 19–23, 2019, Beijing, China
Sucha Supittayapornpong, Barath Raghavan, and Ramesh Govindan
exist at the boundary, including extreme points, of the traffic
set T . Therefore, some of these optimal solutions are extreme
points in the extreme traffic set E, a well-known result in Linear
programming [6, 8]. This is equivalent to solving maxT ∈E U(w,T),
which directly gives an optimal extreme point. Finally, since
maxT ∈T U(w,T) = maxT ∈E U(w,T) for any given w, it follows
that minw ∈W maxT ∈T U(w,T) = minw ∈W maxT ∈E U(w,T),
which proves the theorem.
□
A.2 Symmetric Trunk Sets
Theorem A.2. For a symmetric trunk set with {ak}k ∈K and ak
is some positive integer, the trunk wiring that uniformly distributes
links of each trunk over L1 switches, such that w∗
= ak for every
s ∈ L1 and k ∈ K, optimally solves problem in Equation 3. Further,
sk
the total upflow is always 0.
Proof. Given a symmetric scenario with {ak}k ∈K, the upflow
rate in Equation 1 under any traffic matrix T is
(cid:20) aitij
ai |L1| − ajtij
aj |L1|
(cid:21)
= 0.
+
ij
s (w
u
∗
,T) =
Therefore, the total upflow is 0, the maximum total upflow is also
0, i.e., maxT ∈T U(w∗,T) = 0, and the wiring is optimal, since every
total upflow is at least 0.
□
A.3 Number of Auxiliary Constraints
Lemma A.3. The number of auxiliary constraints for formulation
in Equation 5 increases like O
(cid:16)|L1| 2K 2(cid:17)
.
Proof. Every upflow rate in Equation 1 requires an auxiliary
constraint for the positive projection. From the total upflow in Equa-
2 |L1|) auxiliary
tion 2, every extreme traffic matrix requires O(K
constraints.
The number of extreme traffic matrices can increase exponen-
(cid:16)2K 2(cid:17). This bound is a
⌊d/2⌋
tially in the square of trunks as |E| = O
consequence of [31] that the number of extreme points is upper
2 − K is the dimensions
bounded by O
of the traffic matrix, and p = d + 2K is the number of constraints
from positivity and Equation 4. It follows that
≤ O
(cid:16)(cid:0)p−⌊d/2⌋−1
(cid:18)(cid:18)K
2 |L1| 2K 2(cid:17)
(cid:1)(cid:17), where d = K
(cid:19)(cid:19)
(cid:16)2K 2(cid:17)
(cid:16)|L1| 2K 2(cid:17).
Note that the last inequality uses an approximation of binomial
coefficients in [13]. Therefore, the number of auxiliary constraints
increases like O
□
2/2 + 3K/2
2/2 − K/2
K
|E| ≤ O
= O
(cid:16)
K
.
A.4 Approximating Minimal-Upflow Wiring
min
ˆT = [ˆtij],
wsk ∈
(cid:26)
w ∈ ˆW U(w, ˆT)
ˆtij = max
(cid:23)
(cid:26)(cid:22) Mk|L1|
(cid:24) Mk|L1|
,
T ∈E tij
where
,∀(i, j) ∈ K2
(cid:25)(cid:27)
,∀s ∈ L1, k ∈ K
ˆW = W ∩
(cid:27)
437
Figure 22: Steps in the canonical-form resolution.
A.5 Polynomial Time Canonicalization
Algorithm 1 outputs a canonical form of a given failure pattern.
Figure 22 shows an example of the steps performed by the algorithm:
recall that a link in this graph corresponds to a failed link in a WAN
router. Intuitively, the algorithm (Algorithm 1) leverages the fact
that the topology is bi-partite and re-orders nodes and links in a
deterministic fashion to arrive at a canonical form.
In the first step (Lines 1-3), the algorithm re-orders L1 switches.
In Line 1, it groups L1 switches by similarity of trunk link distribu-
tion, e.g., switches a1 and a2 belong to a group because they have
links to the same two trunks (A and C) and switches a3 and a4
belong to the (B, C) group in Figure 22. In creating groups, only the
number of links to each trunk matters. So, if one 4-port L1 switch
has links in this order (A, A, B, C) and another in this order (A,
B, C, A), they belong to the same group, but another switch with
links (A, B, B, C) does not belong to that group. In Lines 2 and
3, the algorithm sorts nodes within a group in descending order
according to the number of failed links (or cardinality) associated
with the node. The sort moves nodes with more failed links to the
left within each group.
In the next step (Lines 4 and 5), the algorithm attempts to re-
order L2 switches in a canonical order. To do this, it defines a label
for each L2 switch. This label captures the link wiring from that
switch, while preserving group structure. The label is an ordered
list of tuples, where each tuple represents a group and enumerates
the cardinality of each L1 switch in the group in descending order.
For example, consider the L2 switch b3 in Figure 23. Its label is
((0, 0, 0, 0),(2, 1, 0, 0)) because it has no links to the first group, but
has links to a5 and a6. The first two elements in the second tuple
are 2 and 1, which are the cardinality of a5 and a6 respectively. Line
4 assigns these labels, and Line 5 re-orders L2 switches lexicograph-
ically in descending order of labels. This is shown in the 3rd step
in Figure 22, which moves b2 to the left.
The third step of the algorithm (Lines 6-10) attempts to re-
arrange L1 switches within the same group and with the same
cardinality by the rank of the L2 switch they are connected to. To
achieve this, we “back propagate” the tuples from the L2 switches
to the corresponding groups (Line 9), then, among all switches
with the same cardinality (Line 7), we re-order them in descending
lexicographic order (Line 10). This results in the fourth graph in
the first row of Figure 22. This is the canonical form of the original
failure graph.
The second row of Figure 22 shows another failure pattern that
reduces to the same canonical form (this pattern does not require
the third step).
Towards Highly Available Clos-Based WAN Routers
SIGCOMM ’19, August 19–23, 2019, Beijing, China
:Graph F
Algorithm 1: Canonical-form resolution
Input
Output:Canonical form ψ (F)
1 Group L1 nodes by their trunk wiring.
2 for each group of L1 nodes do
3
4 Label each L2 node by a tuple of L1 tuples, where each L1
Sort nodes in descending order by their cardinality
tuple is an L1 group of sorted (in descending order) L1-node
cardinalities associated with the L2 node.
5 Sort L2 nodes in descending order by their label.
6 for each group of L1 nodes do
7
8
9
10
Group L1 nodes by their cardinality to subgroups.
for each subgroup of L1 nodes do
Label each node by a tuple of L2 node indices.
Sort nodes in descending order by their label.
Figure 23: L2 label and L1 node’s cardinality. Each L1 tuple in an
L2 tuple is the sorted cardinalities of L1 nodes that the L2 node
connects to. Unconnected L1 node corresponds to 0 in an L1 tu-
ple.
A.6 Using Extreme Traffic Matrices for
Effective Capacity
Theorem A.4. The following equality holds:
min
F ∈F
min
T ∈T
max
θ ∈Θ(F,T) θ = min
F ∈F
min
T ∈E
max
θ ∈Θ(F,T) θ .
min
T ∈T
Proof. Given a fixed F, we first prove that
max
θ ∈Θ(F,T) θ .
θ ∈Θ(F,T) θ = min
max
T ∈E
(7)
Let θ∗ = maxθ ∈Θ(F,T ∗) θ be an optimal solution of the left hand side
attained at traffic matrix T∗ ∈ T . We will show by contradiction
that at least one extreme traffic T ∈ E leads to this θ∗. Specifically,
θ∗ = minT ∈E maxθ ∈Θ(F,T) θ. Suppose there is no such extreme
point. Let ˆθ > θ∗ and ˆθ = minT ∈E maxθ ∈Θ(F,T) θ be the minimum
achieved by the extreme traffic set E. Caratheodory’s theorem [6]
implies there exists |K|2 + 1 extreme points {Tx} in the extreme
traffic set E such that
Then, it is possible to construct ˆr from a convex combination
of {rx} derived from ˆθ, {Tx} and {λx} such that all constraints in
Equation 6 are satisfied by ˆθ, ˆr and T∗. This means the feasible set
Θ(F ,T∗) contains ˆθ, and we have maxθ ∈Θ(F,T ∗) θ = θ∗ ≥ ˆθ, which
is a contradiction. Thus, there exists an extreme traffic Tx ∈ E that
θ∗ = maxθ ∈Θ(F,Tx) θ, and the equality in Equation 7 holds. Since
the equality holds for any F, it also holds at the minimum.
□
|K2|+1
x =1
|K2|+1
x =1
∗ =
T
λxTx ,
λx = 1,
λx ∈ [0, 1] ∀x .
Figure 24: An L1-switch failure can reduce capacity on some
trunks.
A.7 Failure of L1 switches
Unlike internal link or L2-switch failures, an L1-switch failure not
only disables internal links, but also reduces capacity of trunks
whose links connect to the switch, as shown in Figure 24. As a
result, computing the effective capacity uses a slightly different
formulation from the L2-switch case, but our definition of effective
capacity is the same: we define the effective capacity as the fraction
γ by which we scale the capacity of each trunk incident on a WAN
router, such that the router is non-blocking under any set of traffic
matrices with the reduced-capacity trunks.
Specifically, let H be the set of L1-switch failures, and Mk(H) be
the number of trunk k’s active links under a failure H for H ∈ H.
The effective capacity γ is obtained by solving:
min
T ∈T
min
H ∈H
(cid:26)
γ ∈ [0, 1] : γ
γ
max
γ ∈Γ(H,T) γ
i tij ≤ Mj(H)
j tij ≤ Mi(H)
where
(cid:27)
.
,∀j ∈ K
,∀i ∈ K
Γ(H ,T) =
As in the previous section, we leverage the fact that the set of all
traffic matrices is a convex polytope, and only consider the (finite)
set of extreme traffic matrices E (Theorem A.5). Algorithm 2 depicts
our algorithm, which iterates over every combination of failure
pattern and extreme traffic matrix. Note that, in Algorithm 2, the
number of operational trunk links {Mk(·)} can be derived from
{Mk} and {wsk}.
Theorem A.5. The following equality holds:
min
H ∈H
min
T ∈T
max
γ ∈Γ(H,T) = min
H ∈H
min
T ∈E
max
γ ∈Γ(H,T)
Proof. The proof is similar to Theorem A.4 and is omitted. □
Algorithm 2: Finding effective capacity γ
:{Mk}, {wsk}, E,H
Input