2
In addition, while BEEP can prune out some false depen-
dencies as shown in Fig. 2-(b) (e.g., between data1 and Vim)
by leveraging ﬁne-grained execution units, there are still false
dependencies such as those involving data2 and /tmp/.X11-
unit. This is because, in this example, BEEP considers each
ﬁle read/write event as a separate unit and detects dependencies
between units through memory objects. For example, BEEP
considers units that read data2 ( 22 ) and data3 ( 33 ) are causally
related to a unit that writes out.gpg ( 1111 ) as texts from data2
and data3 are copied into a buffer for copy-and-paste in Vim.
However, the cross-unit dependency between the unit with
data2 ( 22 ) and another unit with out.gpg ( 1111 ) is bogus because
the contents copied from data2 are not pasted to out.gpg. The
bogus dependency is introduced because BEEP simply detects
memory read and memory write events with a same
memory address without checking if there is true information
ﬂow between the two. In short, while BEEP can narrow down
the scope of investigation, there are still unnecessary ﬁles and
events in the graph.
11
11
3
2
Program BinaryTypical workloadsInput Spec.Causality Inference EngineModel ConstructorCausal   ModelsSegmented ParserContext Constraint CheckerAudit LogsCausality Annotated Model GenerationModel ParsingRecognized CausalityRecognized Modelsdata1data2 data3 out.gpg (inode:4) vimout.gpg(inode:8)/tmp/.X11-unixgpg(pid:1)/tmp/tmpfile2(a) Linux Audit: System Call Analysis(b) BEEP: Fine-grained Analysisdata3out.gpg(inode:4)vimout.gpg(inode:8)gpg (pid:1)/tmp/tmpfile(c) TaintGrind: Taint Analysisvimout.gpg(inode:8)gpg(pid:2)/tmp/tmpfile(d) LDX: Causality Inference135461112412345,897,103gpg(pid:2)98gpg (pid:2)67Taint Analysis. Taint analysis techniques [22], [21], [20] track
information ﬂow between a set of system components (e.g.,
ﬁle, memory, and network), called taint sources, to another
set of system components, called taint sinks. Given a set
of input related system components to track, taint analysis
keeps track of how data from the speciﬁed input components
are consumed and propagated by individual instructions that
operate on the data, in order to identify how they impact other
system components. However, most taint tracking approaches
including the state-of-the-art tools such as TaintGrind [22]
and libdft [21] are expensive as they monitor each instruction
to track information ﬂow. Furthermore, they are often not
able to track implicit ﬂows caused by control dependencies,
introducing false-negatives.
To illustrate the merits and limitation of taint analysis tech-
niques, we use a state-of-the-art open source tool, TaintGrind,
to analyze the aforementioned incident. Fig. 2-(c) shows the
result from TaintGrind. In this example, TaintGrind fails to
identify the dependency between the data3 and /tmp/tmpﬁle.
Note that the most important part of the attack (i.e., the leaked
conﬁdential data) is not revealed in the attack investigation due
to the missing dependency.
Fig. 3.
Information ﬂow through a table look-up in gpg.
We investigate the case in depth, and ﬁnd that gpg de-
crypts values through a table lookup operation. Unfortunately,
TaintGrind is not able to handle information ﬂow through the
table lookup, resulting in missing dependencies. Fig. 3 shows
a code snippet extracted from gpg. Speciﬁcally, the function
argument from contains an piece of encrypted text. At line
3, the encrypted text is used to calculate the value of work,
and TaintGrind successfully propagates taint information to the
variable. However, at lines 4-7, work is used to look-up a table
sbox2-8, and TaintGrind loses track of taint information at
this point because it does not handle information ﬂow via array
indexing. Note that most taint analysis techniques do not track
information ﬂow through array indexing to avoid the over-
tainting problem. Speciﬁcally, the over-tainting problem often
leads to an excessive number of taint tags, resulting in false-
positives. Hence, most taint analysis tools decide not to track
such information ﬂow. In addition to table look-up, explicit
data ﬂows through computations (e.g., bitwise and arithmetic)
and implicit data ﬂows caused by control dependency are often
disregarded to avoid the over-tainting problem. Moreover, the
signiﬁcant overhead of taint analysis prohibits its application in
practical forensic analysis that requires always-on monitoring
to capture attacks in-the-wild.
Causality Inference. Recently, Kwon et al. propose a light-
weight causality inference technique LDX [31] using a dynamic
analysis called dual execution. For a given original execution,
LDX derives a slave execution in which it mutates values of
input source(s). It then compares the corresponding outputs
from the original execution and the slave execution to de-
termine whether the outputs are causally dependent on the
source(s). Speciﬁcally, if the two executions have different
4
values for an output, LDX considers that the output is causally
dependent on the mutated input source(s). To address execution
path divergence caused by input perturbation, LDX leverages its
novel on-the-ﬂy execution alignment scheme. Unlike dynamic
taint analysis techniques (e.g., TaintGrind [22] and libdft [21]),
LDX can detect explicit and implicit information ﬂow and has
much lower runtime overhead (about 6%).
Fig. 2-(d) shows the graph generated by LDX. Note that
it contains only the objects and events related to the attack,
without any false dependences. While LDX produces concise
and accurate graphs, it requires the dual-execution framework
available on the end-user system which doubles the consump-
tion of computational resources (e.g., CPU and memory).
C. Goals and Our Approach
Table I presents merits and limitations of existing causality
analysis approaches. In summary, syscall analysis techniques
suffer from high false-positive rates due to dependence ex-
plosion. While BEEP and ProTracer mitigate the dependence
explosion problem, they require complex static, dynamic bi-
nary analysis and instrumentation and incur non-trivial space
overhead. MPI is efﬁcient and effective, but requires access to
source code and domain knowledge for annotation. Taint anal-
ysis techniques generally incur signiﬁcant runtime and space
overhead and suffer from the over-/under-tainting problems.
LDX requires the dual-execution framework in production run
that doubles computational resource consumption.
Our Goal. The goal of this paper is to provide a causality
analysis technique with the same accuracy as LDX, but does not
require any changes of end-user systems, such as instrumenting
user applications, modifying the kernel or installing special
runtime. Speciﬁcally, the end-user only needs to turn on the
default audit logging tool that comes with their system, such
as Linux Audit, Event Tracing for Windows, and DTrace
to collect syscall logs. Upon a security incident, MCI can
generate precise causal graphs from the raw log to explain
attack causality and assess system damages. We believe such
a design would substantially improve applicability.
Our Approach. As shown in Fig. 1, the key idea of MCI
is to use causal models to parse raw logs to derive precise
causality information. Speciﬁcally, in the ofﬂine phase, we
use LDX [31] as the causality inference engine to construct
models for the applications that will be deployed on an
end-user system. A causal model is essentially a sequence
of inter-dependent syscalls and their causal relations. Such
causalities/dependencies can be induced by system objects,
called explicit dependencies, as they can be determined by
analyzing syscalls alone, or induced by memory operations
and control dependences, called implicit dependences, which
are not visible by analyzing syscall events. Note that LDX can
detect both explicit and implicit dependencies.
During deployment, given a syscall log collected from the
incident, MCI can precisely infer causality between events in
the log by parsing the log using the pre-generated models.
D. MCI on Motivating Example
We demonstrate the effectiveness of MCI on investigating
the incident. Assume the causal models of applications have
  int tripledes_ecb_crypt(..., const byte* from, ...) {    ...    work = from ^ *subkey++;    to ^= sbox8[  work  & 0x3f ];    to ^= sbox6[ (work>>8)  & 0x3f ];    to ^= sbox4[ (work>>16) & 0x3f ];    to ^= sbox2[ (work>>24) & 0x3f ];    ...  }123456789TABLE I.
COMPARISON OF CAUSALITY ANALYSIS APPROACHES.
Syscall Analysis
[25], [26], [16]
BEEP [32]/ProTracer [37]
Fine-grained Analysis
MPI [36]
WinLog [35]
Taint Analysis
[22], [21], [20]
Causality
Inference: LDX [31]
Low
Low
Mid
Low
Low
Fine
Dual-execution framework
MCI
Low
Low
Low
Low
Low
Fine
None
Space overhead
Runtime overhead
Resource overhead
False-positive
False-negative
Granularity
End-user requirements
Low
Low
Low
High
Low
Coarse
None
Mid
Low
Low
Mid
Low
Mid
Training/instrumentation
Low
Low
Low
Low
Low
Fine
Code annotation
Low
Low
Low
Mid
Low
Mid
None
High
High
High
Low
Low-Mid
Fine
Tainting framework
been derived ofﬂine. Note that generating models does not
require any particular expert knowledge on target programs,
but rather the typical user level workloads. Model generation
is a one-time effort such that models generated for a program
can be used for all installations of the program.
Fig. 4-(a), (b), (c), (d), and (e) show the graphical rep-
resentations of some models from Vim. A node is denoted
by a letter which represents a syscall, with a superscript (∗)
representing a sequence of syscalls. A subscript represents the
(symbolic) system object (e.g., ﬁle or socket) operated by the
syscall. For example, model (a) is for the behavior of opening
and decrypting a gpg ﬁle. Speciﬁcally, as shown in the legend
in Fig. 4, the ﬁrst node of (a) rα indicates a read syscall
on α which is stdin. Note that each model has its own legend
for the subscript. The ﬁrst node is a syscall that causes the
entire behavior. Intuitively, the model represents reading from
a command line that loads a gpg ﬁle. The second node, sβ,
represents a stat syscall on a ﬁle β (output ﬁle). The GnuPG
plug-in uses a temporary ﬁle to store decrypted contents
and then informs Vim to open. Subscript β symbolizes the
temporary ﬁle which contains decrypted contents. The second
node essentially checks whether the ﬁle exists. After that it
loads a key ﬁle to prepare decryption which is represented as
a third node (r∗
γ). Then, it checks (stat) the output ﬁle again
(s∗
β). Finally, the ﬁfth node (r∗
δ ) represents reading a gpg ﬁle
which is an encrypted ﬁle. The sixth node (wβ) indicates that
the decrypted contents are written onto the output ﬁle (β).
Then, the GnuPG plug-in sends a notiﬁcation to Vim via a
pipe which is shown in the last node (w). Note that symbols
in subscript (e.g. α, β) can be instantiated to any concrete ﬁle
handler during parsing. The same subscript β in sβ and the
later nodes s∗
β and wβ dictate that these syscalls must operate
on the same ﬁle. The third and ﬁfth nodes are denoted by a
superscript ∗, representing a sequence of read system calls
(read∗) on different ﬁles γ and δ.
The directed edges between nodes represent the causal-
ity/dependency between syscalls, with the solid and dotted
edges representing the explicit and implicit dependencies,
respectively. For example, in (a), there are explicit dependences
from sβ to wβ and implicit dependencies from r∗
δ . The
implicit dependencies are caused by memory operations that
copy values from a crypto key ﬁle (γ) to encrypted contents
δ that are detected and modeled by MCI.
γ and r∗
Fig. 4-(f) illustrates a syscall
log collected during the
incident by the default Linux Audit tool [17]. Given the syscall
log and the models, MCI automatically parses the log and
hence derives the corresponding dependencies. Each box in
(f) denotes a model instance with the letter annotated on the
box representing the model id. Note that we use different
background colors for boxes to represent nodes belong to
different models. We omit
the dependences in the model
instances for readability. For readability, we use superscripts
to denote event timestamps.
The model instances essentially tell us that the user ﬁrst
opened a gpg ﬁle (i.e., out.gpg) by model (a), opened and
copied a ﬁle (i.e., data2) without pasting by model (b), and
opened, copied, and pasted another ﬁle (i.e., data3) by model
(c). Observe that
there are events that belong to multiple
models, which allow us to determine causality across models
and hence compose the whole attack path. For instance, event
5 belongs to both models (c) and (d) (i.e., the node in the
s11
two boxes in blue and green), suggesting that the contents
from data3 are copied to the previous gpg ﬁle. The subscript
5 corresponds to ﬁle viminfo that is used to indicates the
state of editing. Note that model (c) does not have explicit
dependencies with other models. Hence, without model (d),
causality between model (c) and other models is difﬁcult to
reveal. After a few editing operations by model (d), the user
ﬁnally saved the contents to a new gpg ﬁle by model (e). The
event s11
5 belonging to models (c) and (d) indicates that the new
gpg ﬁle contains information from data3 (conﬁdential data).
Note that the matched instance of model (b) does not have
any overlapping nodes with other model instances nor explicit
dependencies, and hence no causal relations with others. This
indicates that data2 is not involved in the incident. The ﬁnal
causal graph is shown Fig. 2-(d), which is accurate and concise,
without any missing or bogus dependencies.
III. PROBLEM DEFINITION
In this section, we introduce a number of formal deﬁnitions
and the problem statement for MCI.
A. Deﬁnitions
Causal Model. Fig. 5 shows deﬁnitions for a causal model.
Speciﬁcally, SysName represents syscall names such as open
and read. Repetition indicates how many times a term or node
repeats. It could be a constant number, a variable such as n
or m, or ∗ representing any number of repetition. Variables
are needed to to denote repetition constraints across syscall
events. ResourceSymbol represents a symbol for a resource
handler that a system call operates on (e.g., ﬁle handler). A
Term is a sequence of Nodes that could be annotated with
the number of repetitions. A node N is a syscall annotated
with a set of parameters denoted by SymbolicResource. A
symbolic resource can be instantiated to different concrete