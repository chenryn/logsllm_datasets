Consider the BEK program in Example 1. The cor-
responding SFT constructed by the above translation is
shown in Figure 6. There are two symbolic transitions
from state q0 to itself. The ﬁrst corresponds to the cases
where the input character c needs to be escaped, and the
second to cases where the input does not
need to be escaped.
3.5 Join Composition and Equivalence
We now give an informal description of our core algo-
rithms for reasoning about SFTs: join composition and
equivalence. We then show how these algorithms can be
used to check properties such as idempotence, existence
of an input yielding a target string, and commutativity.
The join composition A ◦ B corresponds to a program
transformation that constructs a single loop over the in-
put string out of two consecutive loops in SFTs A and B.
The join composition algorithm constructs an SFT A ◦ B
such that T[[A◦B]] = T[[A]] ◦ T[[B]]. The intuition behind the
construction is that the outputs produced by A are sub-
stituted symbolically in as the inputs consumed by the
B. The composition algorithm proceeds by depth-ﬁrst
search, ﬁrst computing QA◦B as constructed as a reach-
able subset of QA × QB, starting from (q0
B). Here
we use the SMT solver to determine reachability, calling
the solver as a black box to determine if a path from one
state to another is feasible or not. This makes our con-
struction independent of the particular background the-
ory. In general, this is not true for other recent exten-
sions of ﬁnite transducers such as streaming transduc-
ers [6], where compositionality depends on properties of
the background theory that is being used.
A, q0
Two SFTs A and B are equivalent if TA = TB. Let
Dom(A) def= {v | TA(v) 6= ∅}.
Checking equivalence of A and B reduces to two sepa-
rate tasks:
1. Deciding domain-equivalence:
Dom(A)
=
Dom(B).
2. Deciding partial-equivalence:
for all v
∈
Dom(A) ∩ Dom(B), TA(v) = TB(v).
Note that 1 and 2 are independent and do not imply
each other, but together they imply equivalence. Do-
main equivalence holds for all SFTs constructed by BEK,
because all programs share the same domain, namely
that of strings. Checking partial equivalence is more in-
volved. We leverage the fact that all SFTs we construct
are single-valued. Our equivalence algorithm ﬁrst com-
putes the join composition of A and B, then uses the
SMT solver to search for inputs that cause A to differ
from B. We have a nonconstructive proof of termina-
it establishes that if A and B
tion for this algorithm:
are equivalent, then the search must terminate in time
quadratic in the number of states of the composed au-
tomata.
In practice, the SMT solver carries out this
search, and our results in Section 4 show scaling is closer
to linear in practice.
Equivalence and join composition allow us to carry out
a variety of other analyses. Idempotence of an SFT A
can be ﬁrst checked by computing B = A ◦ A, then
checking the equivalence of A and B. If the two SFTs are
not equivalent, then A fails to be idempotent. Similarly,
commutativity of two SFTs A and B can be determined
by computing C = A ◦ B and D = B ◦ A, then checking
equivalence. The idea is illustrated in Figure 7. We can
also compute the inverse image of a SFT with respect to a
string s, which lets us ﬁnd out the set of inputs to the SFT
that yield s as an output. We use all of these analyses to
check sanitizers for security
properties in the next section.
Our approach has an advantage over traditional ﬁnite
transducers (FTs), due to succinctness of SFTs. Suppose
/


U
U
+
k
k
 LY	Z	L2 
 LY	Z	L2 
A 
B 
A 
A N A 
A 
B N A 
A N B 
A 
A 
B 
 
A not 
idempotent 
 
A and B not 
commutative 
These experiments are based on an implementation that
consists of roughly 5, 000 lines of C# code that imple-
ments the basic transducer algorithms and Z3 [14] inte-
gration, with another 1, 000 lines of F# code for transla-
tion from BEK to transducers. Our experiments were car-
ried out on a Lenovo ThinkPad W500 laptop with 8 GB
of RAM and an Intel Core 2 Duo P9600 processor run-
ning at 2.67 GHz, running 64-bit Windows 7.
Figure 7: Using composition and equivalence of SFTs
to decide idempotence and commutativity.
4.1 Expressive Utility
for example that the background character theory T is k-
bit bit vector arithmetic where k depends on the desired
character range (e.g., for Unicode, k = 16). An explicit
expansion of a BEK SFT A to [[A]] may increase the size
(nr of transitions) by a factor of 2k. Partial-equivalence
of single-valued FTs is solvable O(n2) [15] time. Thus,
for an SFT A of size n, using the partial-equivalence al-
gorithm for [[A]] takes O((2kn)2) time. In contrast, the
partial-equivalence algorithm for BEK SFTs is O(n2).
When the background theory is linear arithmetic, then
the alphabet is inﬁnite and a correspoding FT algorithm
is therefore not even possible.
4 Evaluation
In the following subsections, we evaluate the real-world
applicability of BEK in terms of expressivess,
utility, and performance:
• Section 4.1 evaluates whether BEK can model ex-
isting real-world code. We conduct an emperical
study of a large body of code to see how widely-
used BEK-modelable sanitizer functions are (Sec-
tion 4.1.1), and we evaluate which BEK features
are needed to model sanitizers from AutoEscape,
OWASP, and Internet Explorer 8 (Section 4.1.2).
• We put BEK to work to check existing sanitizers for
idempotence, commutativity, and reversibility (Sec-
tion 4.2).
• We perform pair-wise equivalence checks on a num-
ber of ported HTMLEncode implementations, as well
as two outsourced implementations (Section 4.3).
• We evaluate effectiveness of existing HTMLEncode
implementations against known attack strings taken
from the Cross-site Scripting Cheat Sheet (Sec-
tion 4.4).
• We use a synthetic benchmark to evaluate the scal-
ability of performing equivalence checks on BEK
programs (Section 4.5).
• We provide a short example to highlight the fact
that BEK programs can be readily translated to other
programming languages (Section 4.6).
Thus far, we discussed the expressiveness of BEK pri-
marily in theoretical terms. In this subsection, we turn
our attention to real-world applicability instead, through
a case study that aims to demonstrate that a wide variety
of commonly used sanitizers can be ported to
BEK with relative ease.
4.1.1 Frequency of Sanitizer use in PHP code.
PHP is a widely-used open source server-side scripting
language. Minamide’s seminal work on the static anal-
ysis of dynamic web applications [26] includes ﬁnite-
transducer based models for a subset of PHP’s sanitizer
functions. These transducers are hand-crafted in several
thousand lines of OCaml. We conducted an informal re-
view of the PHP source to conﬁrm that each transducer
could be modeled as a BEK program.
Our goal is to perform a high-level quantitative com-
parison of the applicability of BEK, on the one hand,
and existing string constraint solvers (e.g., DPRLE [17],
Hampi [20], Kaluza [30], and Rex [35]) on the other. For
this comparison, we assume that each Minamide trans-
ducer could instead be modeled as a BEK program. We
then use statistics from a study by Hooimeijer [16] that
measured the relative frequency, by static count, of 111
distinct PHP string library functions. The Hooimeijer
study was conducted in December 2009, and covers the
top 100 projects on SourceForge.net, or about 9.6 mil-
lion lines of PHP code. The study considered most, but
not all, sanitizers provided by Minamide.
Out of the 111 distinct functions considered in the
Hooimeijer study, 27 were modeled as transducers by
Minamide and thus encodable in BEK.
In the sam-
pled PHP code, these 27 functions account for 68, 238
out of 251, 317 uses, or about 27% of all string-related
call sites. By comparison, traditional regular expression
functions modeled by tools like Hampi [20] and Rex [35]
account for just 29,141 call sites, or about 12%. We note
that BEK could be readily integrated into an automaton-
based tool like Rex, however, and our features are largely
complimentary to those of traditional string constraint
solvers. These results suggest that BEK provides a signif-
icant improvement in the “coverage” of real-world code
by string analysis tools.
4.1.2 Language Features
For the remainder of the experiments, we use a small
dataset of ported-to-BEK sanitizers. We now discuss
that dataset and the manual conversion effort required.
The results are summarized in Figure 8, and described in
more detail below.
Google AutoEscape and OWASP. We converted san-
itizers from the OWASP sanitizer library to BEK pro-
grams. We also evaluated sanitizers from the Google
AutoEscape framework to determine what language fea-
tures they would need to be expressed in BEK. These
sanitizers are marked with preﬁxes GA and OWASP, re-
spectively, in Figure 8. We veriﬁed that each of these
sanitizers can be implemented in BEK. In several cases,
we ﬁnd additional non–native features that could be
added to BEK to support these sanitizers.
Internet Explorer.
In addition, we extracted sanitizers
from the binary of Internet Explorer 8 that are used
in the IE Cross-Site Scripting Filter feature, denoted
IEFilter1 to IEFilter17 in Figure 8. For this study,
we analyze the behavior of the IE 8 sanitizers under
the assumption the server performs no sanitization of
its own on user data. Of these 21 sanitizers, we could
convert 17 directly into BEK programs. The remaining 4
sanitizers track a potentially unbounded list of characters
that are either emitted unaltered or escaped, depending
on the result of a regular expression match. BEK does
not enable storing strings of input characters.
The manual translation took several hours per sani-
tizer. Figure 8 breaks down our BEK programs based on
“Native” features of the BEK language, and “Not Native”
features which are not currently in the BEK language.
Many of these features can be integrated modeled using
transducers, however, by enhancing the language of con-
straints used for symbolic labels. In addition, with the
exception of 4 Internet Explorer sanitizers, we found that
a maximum lookahead window of eight characters would
sufﬁce for handling all our sanitizers. Finally, we discov-
ered that the arithmetic on characters was limited to right
shifts and linear arithmetic, which can be expressed in
the Z3 solver we use.
We note that all “Not Native” features could be added
to the BEK language with few or no changes to the under-
lying SFT algorithms for join composition and equiva-
lence checking: only the front end would need to change.
4.1.3 Browser Code
Ideally, we could use BEK to model the parser of an ac-
tual web browser. Then, we could use our analyses to
check whether there exists a string that passes through a
given sanitizer yet causes javascript execution. We per-
formed a preliminary exploration of the WebKit browser
to determine how difﬁcult it would be to write such
Native
boolean multiple
Not Native
mult.
Name
vars
iters
regex
lookahead arith. functions
a2bb2a
escapeBrackets
escapeMetaAndLink
escapeString0
escapeString
escapeStringSimple
getFileExtension
GA HtmlEscape
GA PreEscape
GA SnippetEsc
GA CleanseAttrib
GA CleanseCSS
GA CleanseURLEsc
GA ValidateURL
GA XMLEsc
GA JSEsca
GA JSNumber
GA URLQueryEsc
GA JSONESc
GA PrefixLine
OWASP HTMLEncode
IEFilter1
IEFilter2
IEFilter3
IEFilter4
IEFilter5
IEFilter6
IEFilter7
IEFilter8
IEFilter9
IEFilter10
IEFilter11
IEFilter12
IEFilter13
IEFilter14
IEFilter15
IEFilter16
IEFilter17





















 X
1
1 X 
1 X X
1

1
1
2
0
0
3
1
0
0

2 X 
0

0

2 X 
1 X 
0

0
0
3
4
5
4
4
5
4
4
5
5
4
4
4
4
1
1
1


 X
 X
 X
 X
 X
 X
 X
 X
 X
 X
 X
 X
 X
 X
 X
 X
 X











X
X


X

X
X



X






























X

