相比客户端服务器更要注意对错误的处理。服务器应该永远运行，所以，如果出现任何错误与客户端，
服务器只是忽略客户端继续运行。否则，客户端可以尝试搞砸了与服务器的连接，并导致服务器宕机。
We haven't built a client. That is easy, just changing the previous client to omit
the initial write. Alternatively, just open up a telnet connection to that host:
我们还没有建立一个客户端。这很简单，只是改变以前的客户端省略的初始写入。另外, 只需打开一
个telnet连接到该主机：
telnet localhost 1200
This will produce output such as
输出如下：
$telnet localhost 1200
Trying ::1...
Connected to localhost.
Escape character is '^]'.
Sun Aug 29 17:25:19 EST 2010Connection closed by foreign host.
where "Sun Aug 29 17:25:19 EST 2010" is the output from the server.
服务器输出："Sun Aug 29 17:25:19 EST 2010"。
Multi-threaded server
多线程服务器
"echo" is another simple IETF service. This just reads what the client types, and
sends it back:
"echo"是另一种简单的IETF 服务。只是读取客户端数据，并将其发送回去:
/* SimpleEchoServer
*/
package main
import (
"net"
"os"
"fmt"
)
func main() {
service := ":1201"
tcpAddr, err := net.ResolveTCPAddr("tcp4", service)
checkError(err)
listener, err := net.ListenTCP("tcp", tcpAddr)
checkError(err)
for {
conn, err := listener.Accept()
if err != nil {
continue
}
handleClient(conn)
conn.Close() // we're finished
}
}
func handleClient(conn net.Conn) {
var buf [512]byte
for {
n, err := conn.Read(buf[0:])
if err != nil {
return
}
fmt.Println(string(buf[0:]))
_, err2 := conn.Write(buf[0:n])
if err2 != nil {
return
}
}
}
func checkError(err error) {
if err != nil {
fmt.Fprintf(os.Stderr, "Fatal error: %s", err.Error())
os.Exit(1)
}
}
While it works, there is a significant issue with this server: it is single-threaded.
While a client has a connection open to it, no other cllient can connect. Other clients
are blocked, and will probably time out. Fortunately this is easly fixed by making
the client handler a go-routine. We have also moved the connection close into the
handler, as it now belongs there
工作时，此服务器有一个明显的问题: 它是单线程的。当有一个客户端连接到它，就没有其他的客户
端可以连接上。其他客户端将被阻塞，可能会超时。幸好客户端很容易使用go-routine 扩展。我们
仅仅需要把连接关闭移到处理程序结束后，示例代码如下：
/* ThreadedEchoServer
*/
package main
import (
"net"
"os"
"fmt"
)
func main() {
service := ":1201"
tcpAddr, err := net.ResolveTCPAddr("ip4", service)
checkError(err)
listener, err := net.ListenTCP("tcp", tcpAddr)
checkError(err)
for {
conn, err := listener.Accept()
if err != nil {
continue
}
// run as a goroutine
go handleClient(conn)
}
}
func handleClient(conn net.Conn) {
// close connection on exit
defer conn.Close()
var buf [512]byte
for {
// read upto 512 bytes
n, err := conn.Read(buf[0:])
if err != nil {
return
}
// write the n bytes read
_, err2 := conn.Write(buf[0:n])
if err2 != nil {
return
}
}
}
func checkError(err error) {
if err != nil {
fmt.Fprintf(os.Stderr, "Fatal error: %s", err.Error())
os.Exit(1)
}
}
3.7 Controlling TCP connections 控制 TCP 连接
Timeout
超时
The server may wish to timeout a client if it does not respond quickly enough i.e.
does not write a request to the server in time. This should be a long period (several
minutes), because the user may be taking their time. Conversely, the client may want
to timeout the server (after a much shorter time). Both do this by
服务端会断开那些超时的客户端，如果他们响应不够快，比如没有及时往服务端写一个请求。这应该
是长时间(几分钟)的，因为用户可能花费了时间。相反, 客户端可能希望超时服务器(一个更短的时
间后)。通过下面的来实现这两种：
func (c *TCPConn) SetTimeout(nsec int64) os.Error
before any reads or writes on the socket.
套接字读写前。
Staying alive
存活状态
A client may wish to stay connected to a server even if it has nothing to send. It
can use
即使没有任何通信，一个客户端可能希望保持连接到服务器的状态。可以使用
func (c *TCPConn) SetKeepAlive(keepalive bool) os.Error
There are several other connection control methods, documented in the "net" package.
还有几个其他的连接控制方法, 可以查看"net"包。
3.8 UDP Datagrams UDP 数据报
In a connectionless protocol each message contains information about its origin and
destination. There is no "session" established using a long-lived socket. UDP clients
and servers make use of datagrams, which are individual messages containing source
and destination information. There is no state maintained by these messages, unless
the client or server does so. The messages are not guaranteed to arrive, or may arrive
out of order.
在一个无连接的协议中，每个消息都包含了关于它的来源和目的地的信息。没有"session"建立在使
用长寿命的套接字。UDP 客户端和服务器使用的数据包，单独包含来源和目的地的信息。除非客户端
或服务器这样做，否则消息的状态不会保持。这些消息不能保证一定到达，也可能保证按顺序到达。
The most common situation for a client is to send a message and hope that a reply
arrives. The most common situation for a server would be to receive a message and
then send one or more replies back to that client. In a peer-to-peer situation, though,
the server may just forward messages to other peers.
客户端最常见的情况发送消息，并希望响应正常到达。服务器最常见的情况为将收到一条消息，然后
发送一个或多个回复给客户端。而在点对点的情况下， 服务器可能仅仅是把消息转发到其他点。
The major difference between TCP and UDP handling for Go is how to deal with packets
arriving from possibly multiple clients, without the cushion of a TCP session to
manage things. The major calls needed are
Go 下处理TCP 和UDP 之间的主要区别是如何处理多个客户端可能同时有数据包到达，没有一个管理
TCP 会话的缓冲。主要需要调用的是
func ResolveUDPAddr(net, addr string) (*UDPAddr, os.Error)
func DialUDP(net string, laddr, raddr *UDPAddr) (c *UDPConn, err os.Error)
func ListenUDP(net string, laddr *UDPAddr) (c *UDPConn, err os.Error)
func (c *UDPConn) ReadFromUDP(b []byte) (n int, addr *UDPAddr, err os.Error
func (c *UDPConn) WriteToUDP(b []byte, addr *UDPAddr) (n int, err os.Error)
The client for a UDP time service doesn't need to make many changes, just
changing ...TCP... calls to ...UDP... calls:
UDP 时间服务的客户端并不需要做很多的变化，仅仅改变...TCP...调用为...UDP...调用:
/* UDPDaytimeClient
*/
package main
import (
"net"
"os"
"fmt"
)
func main() {
if len(os.Args) != 2 {
fmt.Fprintf(os.Stderr, "Usage: %s host:port", os.Args[0])
os.Exit(1)
}
service := os.Args[1]
udpAddr, err := net.ResolveUDPAddr("up4", service)
checkError(err)
conn, err := net.DialUDP("udp", nil, udpAddr)
checkError(err)
_, err = conn.Write([]byte("anything"))
checkError(err)
var buf [512]byte
n, err := conn.Read(buf[0:])
checkError(err)
fmt.Println(string(buf[0:n]))
os.Exit(0)
}
func checkError(err error) {
if err != nil {
fmt.Fprintf(os.Stderr, "Fatal error ", err.Error())
os.Exit(1)
}
}
while the server has to make a few more:
服务器也有很少的改动:
/* UDPDaytimeServer
*/
package main
import (
"fmt"
"net"
"os"
"time"
)
func main() {
service := ":1200"
udpAddr, err := net.ResolveUDPAddr("up4", service)
checkError(err)
conn, err := net.ListenUDP("udp", udpAddr)
checkError(err)
for {
handleClient(conn)
}
}
func handleClient(conn *net.UDPConn) {
var buf [512]byte
_, addr, err := conn.ReadFromUDP(buf[0:])
if err != nil {
return
}
daytime := time.Now().String()
conn.WriteToUDP([]byte(daytime), addr)
}
func checkError(err error) {
if err != nil {
fmt.Fprintf(os.Stderr, "Fatal error ", err.Error())
os.Exit(1)
}
}
3.9 Server listening on multiple sockets 服务器侦听多个套接
字
A server may be attempting to listen to multiple clients not just on one port, but
on many. In this case it has to use some sort of polling mechanism between the ports.
一个服务器可能不止在一个端口监听多个客户端，或是更多端口，在这种情况下，它在端口之间使用
某种轮询机制。
In C, the select() call lets the kernel do this work. The call takes a number of
file descriptors. The process is suspended. When I/O is ready on one of these, a
wakeup is done, and the process can continue. This is cheaper than busy polling.
In Go, accomplish the same by using a different goroutine for each port. A thread
will become runnable when the lower-level select() discovers that I/O is ready for
this thread.
在C 中, 调用的内核 select()可以完成这项工作。 调用需要一个文件描述符的数字。该进程被暂
停。当I/O 准备好其中一个，一个唤醒被完成，并且该过程可以继续。This is cheaper than busy
polling. 在G 中, 完成相同的功能，通过为每个端口使用一个不同的goroutine。低级别的
select()时发现，I/O 已经准备好该线程，一个线程将运行。
3.10 The types Conn, PacketConn and Listener Conn，PacketConn
和 Listener 类型
So far we have differentiated between the API for TCP and the API for UDP, using
for example DialTCP and DialUDP returning a TCPConn and UDPConn respectively. The
type Conn is an interface and both TCPConn andUDPConn implement this interface. To
a large extent you can deal with this interface rather than the two types.
迄今为止我们已经区分TCP 和UDP API 的不同，使用例子DialTCP和DialUDP分别返回一个 TCPConn
和 UDPConn。Conn类型是一个接口，TCPConn和UDPConn实现了该接口。在很大程度上，你可以通过
该接口处理而不是用这两种类型。
Instead of separate dial functions for TCP and UDP, you can use a single function
你可以使用一个简单的函数，而不是单独使用TCP 和UDP 的dial 函数。
func Dial(net, laddr, raddr string) (c Conn, err os.Error)
The net can be any of "tcp", "tcp4" (IPv4-only), "tcp6" (IPv6-only), "udp", "udp4"
(IPv4-only), "udp6" (IPv6-only), "ip", "ip4" (IPv4-only) and "ip6" (IPv6-only). It
will return an appropriate implementation of the Conn interface. Note that this
function takes a string rather than address as raddr argument, so that programs using
this can avoid working out the address type first.
net可以是"tcp", "tcp4" (IPv4-only), "tcp6" (IPv6-only), "udp", "udp4" (IPv4-only),
"udp6" (IPv6-only), "ip", "ip4" (IPv4-only)和"ip6" (IPv6-only)任何一种。它将返回一
个实现了Conn接口的类型。注意此函数接受一个字符串而不是raddr地址参数，因此，使用此程序
可避免的地址类型。
Using this function makes minor changes to programs. For example, the earlier program
to get HEAD information from a Web page can be re-written as
使用该函数需要对程序轻微的调整。例如, 前面的程序从一个Web 页面获取HEAD 信息可以被重新写
为
/* IPGetHeadInfo
*/
package main
import (
"bytes"
"fmt"
"io"
"net"
"os"
)
func main() {
if len(os.Args) != 2 {
fmt.Fprintf(os.Stderr, "Usage: %s host:port", os.Args[0])
os.Exit(1)
}
service := os.Args[1]
conn, err := net.Dial("tcp", service)
checkError(err)
_, err = conn.Write([]byte("HEAD / HTTP/1.0\r\n\r\n"))
checkError(err)
result, err := readFully(conn)
checkError(err)
fmt.Println(string(result))
os.Exit(0)
}
func checkError(err error) {
if err != nil {
fmt.Fprintf(os.Stderr, "Fatal error: %s", err.Error())
os.Exit(1)
}
}
func readFully(conn net.Conn) ([]byte, error) {
defer conn.Close()
result := bytes.NewBuffer(nil)
var buf [512]byte
for {
n, err := conn.Read(buf[0:])
result.Write(buf[0:n])
if err != nil {
if err == io.EOF {
break
}
return nil, err
}
}
return result.Bytes(), nil
}
Writing a server can be similarly simplified using the function
使用该函数同样可以简化一个服务器的编写
func Listen(net, laddr string) (l Listener, err os.Error)
which returns an object implementing the Listener interface. This interface has a