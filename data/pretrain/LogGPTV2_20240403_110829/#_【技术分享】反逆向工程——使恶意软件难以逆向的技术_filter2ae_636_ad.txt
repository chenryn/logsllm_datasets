                //MCFACT_AUTHORIZED
                test -= n;
            }
            mask > 15) | (JWqBw > 3) | (JWqBw > 3) | (JWqBw 
    void MrMalware(void)
    {
        // malicious code
        MessageBox(NULL, "I'm a virus!", "Boo!", MB_ICONWARNING);
        return;
    }
    int main()
    {
        SYSTEMTIME stLocalTime = { 0 };
        // obtain the current time
        GetLocalTime(&stLocalTime);
        // activate the malicious code
        // only after this date
        if (stLocalTime.wYear >= 2013 && 
            stLocalTime.wMonth >= 5 && 
            stLocalTime.wDay >= 2)
        {
            MrMalware();
        }
        return 0;
    }
当我们怀疑一个程序中包含定时炸弹时怎么办？最直接的解决方案是向前或者向后调整系统时间，并使用监控工具监控系统的变化。尽管很简单，但是对发现定时炸弹很有效。
**  
**
**延迟执行**
除了定时炸弹，有些恶意程序会采用延迟执行，就像定时器一样。基本思路是，程序启动后不会发生恶意行为，在设定的时间后就会发生。这是双重效果，首先可以误导分析师，在启动过程中没有任何反应，程序应该是安全的，阻止了其进一步进行分析。其二，延时执行可以欺骗反病毒软件的仿真器，仿真器都受到时间的限制，因为用户启动程序并等待了一个半小时后触发了加密代码的执行，对仿真器来说这已经毫无意义了。一个良好的仿真器会检测时间延迟（比如
sleep 函数、延迟循环等），但不可能将所有的时间延迟都考虑在内，Windows 中多种度量时间的办法意味着使用时间延迟对动态代码分析是一种好的防御措施。
**清单14-在一定时间周期后激活的恶意代码**
    #include 
    DWORD dwTimerId = 0;
    const DWORD dwTimerEventId = 666;
    // callback function activated after a designated time
    VOID CALLBACK MrMalware(HWND hwnd, UINT uMsg, UINT idEvent, DWORD dwTime)
    {
        // malicious code
        MessageBox(NULL, "I'm a virus!", "Boo!", MB_ICONWARNING);
        return;
    }
    int main()
    {
        // activate malicious code 5 seconds
        // after the program is launched
        dwTimerId = SetTimer(NULL, dwTimerEventId, 5 * 1000, MrMalware);
        MessageBox(NULL, "I'm a friendly program", "Hi!", MB_ICONINFORMATION);
        return 0;
    }
**  
**
**加密签名**
[加密签名](https://en.wikipedia.org/wiki/Digital_signature)通常用来签名应用程序，以此保证拥有数字签名的应用程序来自受信任的来源。某些防病毒软件会放行那些有数字签名的应用程序。为了获得数字证书，个人和企业的信息都必须在证书中，必须被验证过。如果没有可以证明的文件（比如银行对账单、身份证的扫描件）是不可能获得合法机构的证书的。然而，数字证书确实会被黑客盗取，然后用于签署恶意软件。这样的例子并不多见，但这样会让那些为所有具有数字证书放行的反病毒软件造成问题。
**在线扫描**
恶意软件的作者一定非常想知道他的恶意软件被反病毒软件检测的情况，安装所有的反病毒软件不仅费事费时，它们之间还并不兼容。所以恶意软件的作者往往会使用在线服务来检测。如果你第一个想到的是
[VirusToal](https://www.virustotal.com/)（[最近被 Google
收购](http://blog.virustotal.com/2012/09/an-update-from-virustotal.html)），你只了解了一点点。恶意软件的作者是不会使用这些网站（又例如
[Jotti](https://virusscan.jotti.org/)）的，提交给他们的所有文件都与反病毒公司共享，用来提高其反病毒产品的检测精度。恶意软件作者会使用像
[NoVirusThanks](http://vscan.novirusthanks.org/) 或
[NoDistribute](https://nodistribute.com/)，它们都以不和反病毒公司合作而著称。
**  
**
**结论**
从我的经验观察，恶意软件作者和分析师的战斗永远不会停止。有趣的是战争两边，一边是好的，像反病毒公司、为了合法版权保护的公司，另一边都是坏的，那些试图突破软件保护的人、那些写出可以被恶意软件利用的软件的人。从文章开始到结束，我们纵观工具随着时间的演变，我们可以推测出接下来会发生什么吗？我的看法是一切都会向代码虚拟化的方向前进，但是会比当前的方案更先进。这从当前市场上对原生应用程序保护工具以及
.NET 应用程序虚拟化工具的出现就可以看出。反病毒公司会如何处理呢？一如既往地，要依赖卓越的员工的杰出工作。