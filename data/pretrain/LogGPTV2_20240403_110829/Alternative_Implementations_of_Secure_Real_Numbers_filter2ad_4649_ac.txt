11 end
7
8
9
a +
(1 − ai)xi = −1 +
(ai − 1)2i +
(ai − 1)(2i − xi).
i=k
i=0
i=k
7
In attempting to estimate these quantities with inequalities, it is important whether 2i is smaller or
greater than xi. Thus, by distinguishing these cases, we arrive at the following inequalities:
(xi − 2i) ≥ −1 +
(ai − 1)2i +
(1 − ai)(xi − 2i)
(cid:88)
(2i − xi) ≤ k−1(cid:88)
i:2ixi
k≤i≤n−2
n−2(cid:88)
i=k
(xi − 2i) .
k−1(cid:88)
i=0
i:2i>xi
k≤i≤n−2
≥ −2k +
(cid:88)
i=k aixi or a +(cid:80)n−2
−(cid:96) ≤ (cid:88)
(cid:88)
i:2ixi
k≤i≤n−2
Deﬁnition 3. A (k, (cid:96), ε, n)-normalization set is a set of integers {xk, . . . , xn−1, yk, . . . , yn−1} with the fol-
lowing properties:
1. (cid:80)n−2
2. (cid:80)
3. 2k +(cid:80)
i:2ixi
k≤i≤n−2
There is some freedom in choosing k, with lower values giving us more freedom in choosing the normal-
ization set, but reducing the number of values that a normalized number can have.
4.2 Finding Normalization Sets
The key part of ﬁnding normalization sets is ﬁnding integer pairs (xi, yi) where on the one hand xi
is very
yi
close to ϕ and on the other hand xi must be very close to 2i. In essence, we have to ﬁnd suitable constants
xi, since yi is deﬁned by xi as [ xi
ϕ ]. Note that this can be considered a minimization problem – we have to
guarantee that properties 2 and 3 in Deﬁnition 3 hold, but how loosely or strictly they hold is not really
important for us.
i=k |xi− ϕ· yi| as much as possible in order to minimize the
error caused by the normalization protocol. Thus we can see ﬁnding the normalization set as an optimisation
On the other hand, we do want to minimize(cid:80)n−1
problem to minimize(cid:80)n−1
ϕ ]| with the constraints 2. and 3. in Deﬁnition 3 holding.
i=k |xi − ϕ · [ xi
8
For easier notation, let us deﬁne err(x) := x − ϕ[ x
ϕ ].
We searched for these coeﬃcients using the facts that err(Fk) tend to be small and that when when x and
x(cid:48) are such that if err(x) and err(x(cid:48)) are small, then also err(x + x(cid:48)) is small, more precisely, |err(x + x(cid:48))| ≤
|err(x)| + |err(x(cid:48))|.
Thus, we would take a small interval around a power of 2 and ﬁnd all elements zi for which err(zi) was
suitably small. Then, in a larger interval, the only possible candidates w for a minimal |err(w)| had to have
the format zi + j · Fk. Thus we needed to check these elements to ﬁnd a minimal one. If necessary, this
process could be iterated.
4.3 Protocols for golden section numbers
We shall now present a few protocols on golden numbers. We have already described addition, multiplication
and normalization protocols and thus we will not discuss them any further here.
We will denote with GoldenMult((cid:74)x(cid:75),(cid:74)y(cid:75)) golden number multiplication as described in equation (1).
We will also use the function GoldenProd(x0, . . . , xk−1) to refer to computing the product(cid:81)k−1
Generally we assume that all functions get normalized inputs, unless speciﬁed otherwise. We will thus not
normalize the inputs before performing multiplication, but will normalize the product. In some cases, such
as when it is the ﬁnal result that will be declassiﬁed, the product can be left unnormalized.
i=0 xi using
GoldenMult. Computing the product of k − 1 golden numbers takes l · log k rounds where l is the number
of rounds required for a single multiplication.
4.3.1 Multiplication by ϕ
We will describe now a protocol for multiplying an integer by the golden ratio. This protocol, presented in
Algorithm 2, will be useful for performing golden-to-ﬁx conversion described in Section 4.3.2.
Algorithm 2: MultWithPhi
i=0
Data: (cid:74)x(cid:75), n, m, (m > n),{pi}∞
Result: (cid:74)xϕ(cid:75).
2 (cid:74)s0(cid:75) ←(cid:80)m
i=0 pi · ((cid:80)
1 {(cid:74)xi(cid:75)}n−1
i=0 ← BitExtract((cid:74)x(cid:75));
j=0(cid:74)xj(cid:75) · 2m+j−i);
3 (cid:74)s1(cid:75) ←(cid:80)m+n
i=m+1 pi · ((cid:80)
j=i−m(cid:74)xj(cid:75) · 2m+j−i);
4 (cid:74)s(cid:75) ←(cid:74)s0(cid:75) +(cid:74)s1(cid:75);
0(cid:75) ←(cid:80)m
i=0 pi · ((cid:80)
i=0 ← BitExtract((cid:74)−x(cid:75));
5 {(cid:74)x(cid:48)
i(cid:75)}n−1
6 (cid:74)s(cid:48)
j(cid:75) · 2m+j−i);
j=0(cid:74)x(cid:48)
1(cid:75) ←(cid:80)m+n
i=m+1 pi · ((cid:80)
7 (cid:74)s(cid:48)
j(cid:75) · 2m+j−i);
j=i−m(cid:74)x(cid:48)
8 (cid:74)s(cid:48)(cid:75) ←(cid:74)s(cid:48)
0(cid:75) +(cid:74)s(cid:48)
1(cid:75);
9 (cid:74)r(cid:75) ← ObliviousChoice((cid:74)xn−1(cid:75),(cid:74)s(cid:48)(cid:75),(cid:74)s(cid:75));
10 return ((cid:74)xn−1(cid:75),(cid:74)r(cid:75))
The protocol takes in a secret signed integer(cid:74)x(cid:75) and returns a signed ﬁxed-point number that represents
(cid:74)xϕ(cid:75). This protocol needs one bit-extraction protocol and one oblivious choice. We start with a secret integer
i=m+1 pi · ((cid:80)
i=0 pi · ((cid:80)
j=0(cid:74)xj(cid:75) · 2m+j−i) +(cid:80)m+n
(cid:80)m
i=0. We extract the bits (cid:74)xi(cid:75) from the input (cid:74)x(cid:75). We then compute
(cid:74)x(cid:75). We also have the bits of φ, {pi}∞
j=i−m(cid:74)xj(cid:75) · 2m+j−i) that represents xϕ if x is positive. We
then do the same for −x and obliviously choose between the two cases based on the last bit of x. The last
bit of x is also the sign of the resulting ﬁxed-point number, as multiplication with ϕ does not change the
sign.
4.3.2 Conversion to a ﬁxed-point number
Algorithm 3 presents the protocol for converting a golden section number to a ﬁxed-point number.
9
Result: A ﬁxed-point number that represents the same value as the golden number input.
2 // we will also obtain an−1 as a side product from the ConvertUp function.
Algorithm 3: GoldToFix
Data: (cid:74)a(cid:75) − ϕ(cid:74)b(cid:75), n, m, (n > m)
1 (cid:74)bigA(cid:75) ← ConvertUp((cid:74)a(cid:75), n, n + m);
3 (cid:74)f ixA(cid:75) ← ((cid:74)an−1(cid:75),(cid:74)bigA(cid:75) · 2m);
4 (cid:74)f ixB(cid:75) ← MultWithPhi((cid:74)b(cid:75), n, m);
5 (cid:74)f ix(cid:75) ← FixSubtract((cid:74)f ixA(cid:75),(cid:74)f ixB(cid:75));
6 return(cid:74)f ix(cid:75)
While conversion functions are important on their own, here we will also use them as subprotocols in
more complicated algorithms.
Since we have access to MultWithPhi function, converting a golden number to a ﬁxed-point number is
trivial. We need to convert both the integer representand and the ϕ-representand to a respective ﬁxed-point
number and deduce the second from the ﬁrst.
4.3.3 Return a constant based on power of two
We will see that in both the inverse protocol and the square root protocol, we get a secret golden number
The protocol for performing this operation is presented in Algorithm 4.
Algorithm 4: TwoPowerConst
Result: Will return the sign of the input and (xj, yj) if gx ∈ [2j, 2j+1).
(cid:74)gx(cid:75) and, based on the interval [2i, 2i+1) its absolute value is in, return a golden number(cid:74)gzi(cid:75).
Data: (cid:74)gx(cid:75),{gzi} = {(xi, yi)}, n, m  m), k
x(cid:75)