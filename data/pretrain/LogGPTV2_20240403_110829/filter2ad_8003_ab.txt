                base64d = b'.' + base64d
            return base64d
    class URLSafeTimedSerializer(URLSafeSerializerMixin, TimedSerializer):
        """Works like :class:`TimedSerializer` but dumps and loads into a URL
        safe string consisting of the upper and lowercase character of the
        alphabet as well as ``'_'``, ``'-'`` and ``'.'``.
        """
        default_serializer = compact_json
主要关注`dump_payload`、`dumps`，这是序列化session的主要过程。
可见，序列化的操作分如下几步：
  1. json.dumps 将对象转换成json字符串，作为数据
  2. 如果数据压缩后长度更短，则用zlib库进行压缩
  3. 将数据用base64编码
  4. 通过hmac算法计算数据的签名，将签名附在数据后，用“.”分割
第4步就解决了用户篡改session的问题，因为在不知道secret_key的情况下，是无法伪造签名的。
最后，我们在cookie中就能看到设置好的session了：
注意到，在第4步中，flask仅仅对数据进行了签名。众所周知的是，签名的作用是防篡改，而无法防止被读取。而flask并没有提供加密操作，所以其session的全部内容都是可以在客户端读取的，这就可能造成一些安全问题。
## 0x03 flask客户端session导致敏感信息泄露
我曾遇到过一个案例，目标是flask开发的一个简历管理系统，在测试其找回密码功能的时候，我收到了服务端设置的session。
我在0x02中说过，flask是一个客户端session，所以看目标为flask的站点的时候，我习惯性地去解密其session。编写如下代码解密session：
    #!/usr/bin/env python3
    import sys
    import zlib
    from base64 import b64decode
    from flask.sessions import session_json_serializer
    from itsdangerous import base64_decode
    def decryption(payload):
        payload, sig = payload.rsplit(b'.', 1)
        payload, timestamp = payload.rsplit(b'.', 1)
        decompress = False
        if payload.startswith(b'.'):
            payload = payload[1:]
            decompress = True
        try:
            payload = base64_decode(payload)
        except Exception as e:
            raise Exception('Could not base64 decode the payload because of '
                             'an exception')
        if decompress:
            try:
                payload = zlib.decompress(payload)
            except Exception as e:
                raise Exception('Could not zlib decompress the payload before '
                                 'decoding the payload')
        return session_json_serializer.loads(payload)
    if __name__ == '__main__':
        print(decryption(sys.argv[1].encode()))
例如，我解密0x02中演示的session：
通过解密目标站点的session，我发现其设置了一个名为token、值是一串md5的键。猜测其为找回密码的认证，将其替换到找回密码链接的token中，果然能够进入修改密码页面。通过这个过程，我就能修改任意用户密码了。
这是一个比较典型的安全问题，目标网站通过session来储存随机token并认证用户是否真的在邮箱收到了这个token。但因为flask的session是存储在cookie中且仅签名而未加密，所以我们就可以直接读取这个token了。
## 0x04 flask验证码绕过漏洞
这是客户端session的另一个常见漏洞场景。
我们用一个实际例子认识这一点：
。这是一个为flask提供验证码的项目，我们看到其中的view文件：
    import random
    try:
        from cStringIO import StringIO
    except ImportError:
        from io import BytesIO as StringIO
    from flask import Blueprint, make_response, current_app, session
    from wheezy.captcha.image import captcha
    from wheezy.captcha.image import background
    from wheezy.captcha.image import curve
    from wheezy.captcha.image import noise
    from wheezy.captcha.image import smooth
    from wheezy.captcha.image import text
    from wheezy.captcha.image import offset
    from wheezy.captcha.image import rotate
    from wheezy.captcha.image import warp
    captcha_bp = Blueprint('captcha', __name__)
    def sample_chars():
        characters = current_app.config['CAPTCHA_CHARACTERS']
        char_length = current_app.config['CAPTCHA_CHARS_LENGTH']
        captcha_code = random.sample(characters, char_length)
        return captcha_code
    @captcha_bp.route('/captcha', endpoint="captcha")
    def captcha_view():
        out = StringIO()
        captcha_image = captcha(drawings=[
            background(),
            text(fonts=current_app.config['CAPTCHA_FONTS'],
                 drawings=[warp(), rotate(), offset()]),
            curve(),
            noise(),
            smooth(),
        ])
        captcha_code = ''.join(sample_chars())
        imgfile = captcha_image(captcha_code)
        session['captcha'] = captcha_code
        imgfile.save(out, 'PNG')
        out.seek(0)
        response = make_response(out.read())
        response.content_type = 'image/png'
        return response
可见，其生成验证码后，就存储在session中了：`session['captcha'] = captcha_code`。
我们用浏览器访问`/captcha`，即可得到生成好的验证码图片，此时复制保存在cookie中的session值，用0x03中提供的脚本进行解码：
可见，我成功获取了验证码的值，进而可以绕过验证码的判断。
这也是客户端session的一种错误使用方法。
## 0x05 CodeIgniter 2.1.4 session伪造及对象注入漏洞
Codeigniter 2的session也储存在session中，默认名为`ci_session`，默认值如下：
可见，session数据被用PHP自带的serialize函数进行序列化，并签名后作为`ci_session`的值。原理上和flask如出一辙，我就不重述了。但好在codeigniter2支持对session进行加密，只需在配置文件中设置`$config['sess_encrypt_cookie']
= TRUE;`即可。
在CI2.1.4及以前的版本中，存在一个弱加密漏洞（  ），如果目标环境中没有安装Mcrypt扩展，则CI会使用一个相对比较弱的加密方式来处理session:
    function _xor_encode($string, $key)
    {
     $rand = '';
     while (strlen($rand) hash($rand);
     $enc = '';
     for ($i = 0; $i _xor_merge($enc, $key);
    }
    function _xor_merge($string, $key)
    {
     $hash = $this->hash($key);
     $str = '';
     for ($i = 0; $i  ），即可在4秒到4分钟的时间，破解CI2的密钥。
获取到了密钥，我们即可篡改任意session，并自己签名及加密，最后伪造任意用户，注入任意对象，甚至通过反序列化操作造成更大的危害。
## 0x06 总结
我以三个案例来说明了客户端session的安全问题。
上述三个问题，如果session是储存在服务器文件或数据库中，则不会出现。当然，考虑到flask和ci都是非常轻量的web框架，很可能运行在无法操作文件系统或没有数据库的服务器上，所以客户端session是无法避免的。
除此之外，我还能想到其他客户端session可能存在的安全隐患：
  1. 签名使用hash函数而非hmac函数，导致利用hash长度扩展攻击来伪造session
  2. 任意文件读取导致密钥泄露，进一步造成身份伪造漏洞或反序列化漏洞（  ）
  3. 如果客户端session仅加密未签名，利用CBC字节翻转攻击，我们可以修改加密session中某部分数据，来达到身份伪造的目的
上面说的几点，各位CTF出题人可以拿去做文章啦~嘿嘿。
相对的，作为一个开发者，如果我们使用的web框架或web语言的session是存储在客户端中，那就必须牢记下面几点：
  1. 没有加密时，用户可以看到完整的session对象
  2. 加密/签名不完善或密钥泄露的情况下，用户可以修改任意session
  3. 使用强健的加密及签名算法，而不是自己造（反例discuz）