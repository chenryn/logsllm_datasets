### Introduction

Geneva is a system that combines various previously discovered circumvention strategies to generate, mutate, and evaluate new ones. It operates within the context of a censoring nation-state, using a genetic algorithm to discover both gaps in censors' logic and bugs in their implementations. Geneva's non-deterministic nature makes it similar to a network fuzzer, enabling it to uncover these vulnerabilities.

### Extensions to Prior Work

We extend previous work on censorship circumvention in two key ways:
1. **Server-Side Strategies**: Unlike prior strategies that were only run client-side, we apply Geneva to discover purely server-side strategies without requiring any additional deployment at the client.
2. **Application Range**: Previous evaluations of Geneva were limited to HTTP. We expand this to a wide range of applications, including DNS-over-TCP, FTP, HTTP, HTTPS, and SMTP, and show that the assumption that TCP-based strategies will work for all TCP applications is incorrect.

### Client-Side vs. Server-Side Strategies

#### Generalization Question
A natural question arises: do previously discovered client-side results generalize to server-side? 

#### Experimental Evaluation
Prior research has identified numerous client-side strategies for circumventing censorship. Some of these strategies are specific to the client, such as "Segmentation," which splits an HTTP GET request across multiple TCP packets to exploit a bug in some censors' packet reassembly code. Other strategies, like sending a TCP RST with a TTL large enough to reach the censor but not the server, appear to be applicable from the server side as well.

To test this, we evaluated 36 client-side strategies discovered by Bock et al. [9], manually identifying and discarding 11 strategies that had no obvious server-side analogs. The remaining 25 strategies involved sending an "insertion packet" (a packet processed by the censor but not by the server) during or immediately after the 3-way handshake.

For each strategy, we generated two server-side analogs: one that sends the insertion packet before the SYN+ACK and one that sends it after. We tested these strategies with clients in China connecting to a server in the US.

**Results:**
- None of the server-side analogs worked, even when accounting for network delays.
- This suggests that the censor treats inbound and outbound packets differently, likely identifying the client as the connection initiator and processing its packets differently.

**Conclusion:**
- Client-side strategies do not generalize to server-side.
- Censors process clients' and servers' packets differently, indicating that server-side circumvention requires a fresh approach.

### Methodology

#### Geneva Extensions
- **New Protocols**: We extended Geneva to support DNS-over-TCP, FTP, HTTPS, and SMTP.
- **Non-Additions**: We explored applying server-side evasion to Tor Bridges and Telegram MTProxy servers but found that these protocols do not trigger active probing.
- **Server-Side Evasion**: Geneva was adapted to server-side operation with minor changes, configured to initialize each population pool with 300 individuals and evolve for 50 generations or until convergence.

#### Data Collection
- **Countries and Protocols**: We ran Geneva server-side in six countries (Australia, Germany, Ireland, Japan, South Korea, and the US) on five protocols (DNS, FTP, HTTP, HTTPS, and SMTP).
- **Client Locations**: Clients were located in four censored nations (China, India, Iran, and Kazakhstan).
- **Configuration Details**: Each country and protocol required specific configurations to trigger censorship, as detailed in Table 1.

### Residual Censorship

In China, different protocols are handled differently by the GFW. For example, over HTTP, residual censorship occurs for approximately 90 seconds after a forbidden request, affecting all TCP requests to the server IP and port. However, we did not observe this behavior for HTTPS, SMTP, DNS-over-TCP, or FTP.

### Evasion Success Rates

- **Packet-Manipulation Strategies**: Some strategies succeed only part of the time, with success rates varying across protocols and countries.
- **DNS Considerations**: According to RFC 7766, DNS clients should retry unanswered queries. This improves the success rates of server-side strategies for DNS-over-TCP, even if they work only 50% of the time.

### Follow-up Experiments

At the end of each run, we perform follow-up experiments to understand why certain strategies work or fail and to gather information about how censors operate.

### Results

Table 2 summarizes our results across all countries and applications, showing the success rates of various server-side strategies.

| Strategy | Description | DNS | FTP | HTTP | HTTPS | SMTP |
|----------|-------------|-----|-----|------|-------|------|
| No Evasion | - | 0% | 0% | 0% | 0% | 0% |
| Sim. Open, Injected RST | - | 2% | 3% | 89% | 52% | 83% |
| Sim. Open, Injected Load | - | 26% | 65% | 7% | 33% | 15% |
| Corrupt ACK, Sim. Open | - | 97% | 82% | 55% | 83% | 85% |
| Corrupt ACK Alone | - | 3% | 47% | 100% | 100% | 100% |
| Corrupt ACK, Injected Load | - | 100% | 100% | 100% | 100% | 100% |
| Injected Load, Induced RST | - | 3% | 54% | 54% | 4% | 5% |
| Injected RST, Induced RST | - | 52% | 54% | 2% | 2% | 100% |
| TCP Window Reduction | - | 26% | 70% | 14% | 59% | 55% |

These results demonstrate the effectiveness of server-side strategies in evading censorship across different protocols and countries.