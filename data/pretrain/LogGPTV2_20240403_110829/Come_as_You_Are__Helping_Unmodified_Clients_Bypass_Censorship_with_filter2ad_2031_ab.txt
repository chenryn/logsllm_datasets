bined to reconstruct virtually all previously discovered circumven-
tion strategies. Geneva trains against real censors by running from
within a censoring nation-state, and it uses its genetic algorithm to
generate, mutate, and evaluate new strategies. Because it is non-
deterministic, Geneva is in essence like a network fuzzer [22, 35],
and as a result has discovered both gaps in censors’ logic as well as
bugs in their implementations.
We extend this prior work in two fundamental ways: First, like all
prior censorship circumvention strategies of which we are aware [13,
21, 23, 36, 40, 41], Geneva was previously only run client-side. In
this paper, we apply Geneva to discover purely server-side strate-
gies with no extra deployment at the client. Second, like with other
similar systems, Geneva was only ever evaluated using HTTP, and
the authors tacitly assumed that if a circumvention strategy oper-
ates only at TCP/IP, then the strategy will work for all TCP-based
applications. In this paper, we evaluate over a wide range of appli-
cations (DNS-over-TCP, FTP, HTTP, HTTPS, and SMTP) and show
that this assumption is false.
First, we answer a natural question: do previously discovered
client-side results generalize to server-side?
3 CLIENT-SIDE STRATEGIES DO NOT
GENERALIZE
Prior work has identified a wealth of client-side strategies for cir-
cumventing censorship. Some of these strategies are tailored specif-
ically to the client; for instance, “Segmentation” strategies split up a
client’s HTTP GET request across multiple TCP packets, exploiting
an apparent bug in some censors’ packet reassembly code [9]. How-
ever, other client-side strategies appear as if they would work from
the server, as well. For example, a seminal circumvention strategy
has the client send a TCP RST with a TTL large enough to reach
the censor but too small to reach the server [9, 21, 23, 29, 36]. As a
result of this strategy, the censor believes the connection has been
torn down and thus pays no attention to future packets from that
connection, allowing the client to send requests that would have
otherwise been censored. Should such strategies not also work from
the server?
We experimentally evaluated whether client-side strategies can
be translated to work from the server-side, as well. Starting with all
36 of the currently working client-side strategies discovered by Bock
et al. [9], we manually identified 11 strategies that had no obvious
server-side analog (such as Segmentation) and discarded them. All
of the remaining 25 strategies involved sending an “insertion packet”
(a packet that is processed by the censor but not by the server,
like the TTL-limited RST) during or immediately after the 3-way
handshake.
588
SIGCOMM ’20, August 10–14, 2020, Virtual Event, USA
Bock et al.
The only packet a server typically sends before the censored
query is a SYN+ACK. For each strategy, we generate two new server-
side analogs: one that sends the insertion packet before the SYN+ACK,
and one that sends it after. We then tested these strategies with
clients at vantage points within China connecting to a server we
control at a vantage point in the US.
Unfortunately, none of these strategies worked when run server-
side. This is surprising: many of the “TCB Teardown” strategies
found by Bock et al. [9] involve the client sending tear-down pack-
ets (insertion packets with RST or RST+ACK flags) immediately after
receiving the server’s SYN+ACK; these server-side analogs also send
tear-down packets immediately after the SYN+ACK, the only dif-
ference being that they come from the server. We considered the
possibility that network delays were causing the server’s tear-down
packets to arrive at the censor after the client’s censored query1.
To account for this, we instrumented our client to delay sending
its query until it received the insertion packets, but this was also
unsuccessful at evading censorship.
In other words, for some of these strategies, the only difference
was whether it was the client or the server that sent the insertion
packets, and yet none of them work. We considered that the censor
may be treating inbound packets differently than outbound—for
instance, it may have been the case that the censor simply ignores
inbound RST packets. To test for this, we also ran the server from
inside China and the client in the US, but the strategies continued
to fail. This indicates that the GFW tries to determine which host
is the client (the one who initiated the connection), and processes
the client’s packets differently than the server’s.
Collectively, these results show that client-side strategies do not
generalize to server-side. Moreover, the results show that clients’
and servers’ packets are processed differently, and therefore the cen-
sors’ shortcomings that previous work exploited client-side do not
necessarily lend insight into how to circumvent from server-side. In
short: server-side censorship circumvention requires a blank-slate
approach.
4 SERVER-SIDE METHODOLOGY
4.1 Geneva Extensions
New Protocols Bock et al. [9] previously applied Geneva only to
HTTP. We have extended Geneva to be able to train over a variety
of applications across a variety of protocols. Specifically, we added
support for DNS-over-TCP, FTP, HTTPS, and SMTP.
Non-additions We also explored applying server-side evasion
to Tor Bridges and Telegram MTProxy servers [32, 33]. Although
Tor and Telegram are both blocked at the IP and DNS level, we are
unable to trigger active probing to private unpublished Tor bridges
or MTProxies. The Tor team is aware that Tor does not currently
trigger active probing, and these findings are consistent with recent
reports [9, 36]. We focus our efforts on the protocols that are getting
censored today, and we leave a deeper exploration of server-side
training over other anti-censorship protocols to later work.
Server-side Evasion Geneva is largely agnostic to packet seman-
tics; it is able to recompute checksums, but it is not configured
Country
China
Protocols
DNS, FTP, HTTP,
Vantage Points
Beijing, Shanghai
Shenzen, Zhengzhou HTTPS, SMTP
Bangalore
Tehran, Zanjan
HTTP
HTTP, HTTPS
India
Iran
Kazakhstan Qaraghandy, Almaty HTTP
Table 1: Client locations and protocols used in our experi-
ments.
to understand the meanings behind any particular packet header
fields. As a result, converting Geneva from client-side to server-side
was relatively straightforward, requiring only minor changes to its
implementation.
We configured Geneva to initialize each population pool with
300 individuals, and allowed evolution to take place for 50 genera-
tions, or until population convergence occurs. Although Geneva is
capable of evolving not only how it manipulates packets but also
which packets it triggers on, we observed that for DNS-over-TCP,
HTTP, HTTPS, and SMTP, the only packet the server could trigger
on before a censorship event was the SYN+ACK packet. Thus, as a
slight optimization, for these protocols, we restricted Geneva to
only be able to trigger on SYN+ACKs.
4.2 Data Collection Methodology
Over the span of five months, we ran Geneva server-side in six
countries—Australia, Germany, Ireland, Japan, South Korea, and the
US—on five protocols: DNS (over TCP), FTP, HTTP, HTTPS, and
SMTP (all over IPv4). We used unmodified clients within four nation-
state censors—China, India, Iran, and Kazakhstan—to connect to our
servers. For each nation-state censor, we trained on each protocol
for which we were able to trigger censorship; all four countries
censored HTTP, but only China censored all six protocols.2 Table 1
shows the client locations and protocols we used throughout our
experiments. Within each censored regime, we find no significant
difference in strategy effectiveness across the different vantage
points or external servers.
Each country and protocol required a slightly different configu-
ration to trigger censorship:
• DNS-over-TCP (China): We make a censored request with an un-
modified DNS client to open resolvers (Google and Cloudflare),
as well as resolvers we control outside China.
• FTP (China): We sign into FTP servers we control and issue
requests for files with sensitive keywords as names (e.g., ul-
trasurf).
• HTTP (all countries): In China, we issue GET requests with a cen-
sored keyword in the URL parameters (for instance, ?q=ultrasurf).
In India, Iran, and Kazakhstan, we issue GET requests with a
blacklisted website in the Host: header.
• HTTPS (China and Iran): We perform a TLS handshake with a
forbidden URL (e.g., youtube.com in Iran and www.wikipedia.org
in China) in the Server Name Indication (SNI) field.
• SMTP (China): We connect to SMTP servers we control and,
from our unmodified clients, send an email to a forbidden email
address, PI:EMAIL [17].
1This is not an issue when clients send both the tear-down and the query, because we
can generally expect packets to arrive FIFO.
2Contrary to the findings by Aryan et al. [7], we find that Iran no longer censors
DNS-over-TCP at all.
589
Come as You Are: Helping Unmodified Clients
Bypass Censorship with Server-side Evasion
In all of the above settings, we configure Geneva to consider cen-
sorship to have been avoided if the connection is not forcibly torn
down and if the client receives the correct, unaltered data.
Residual Censorship In China, we observe that different proto-
cols are handled differently by the GFW. For example, over HTTP,
the GFW has residual censorship: for approximately 90 seconds after
a forbidden request is censored, all TCP requests to the server IP and
port elicit tear-down packets from the GFW immediately following
the three-way handshake. Prior work has documented the existence
of residual censorship in some cases for HTTPS; however, we do
not observe this behavior from any of our vantage points during
our experiments and confirm that as of time of writing, HTTPS
residual censorship is not active in China. Further, we do not ob-
serve this behavior from any of our vantage points in China for
SMTP, DNS-over-TCP, or FTP; after the forbidden request on these
protocols is censored, the user is free to make a second follow-up
request immediately.
Evasion Success Rates It has been shown that, somewhat sur-
prisingly, some packet-manipulation strategies succeed only some
of the time; for instance, Bock et al. [9] found some client-side
strategies that work roughly 50% of the time. Throughout the paper,
we present the success rates of the various strategies Geneva has
found. For DNS in particular, this requires some special considera-
tion, because, according to RFC 7766 [2] on DNS-over-TCP: DNS
clients SHOULD retry unanswered queries if the connection closes
before receiving all outstanding responses. No specific retry algorithm
is specified in this document. Censorship by the GFW qualifies as
a premature connection close, and thus results in retries, but the
RFC leaves the exact number of retries up to the implementer. This
serves to greatly improve the success rates of any server-side strate-
gies for DNS-over-TCP: even if the strategy works only 50% of
the time, with just 2 retries (3 total queries), the success rates will
improve to 87.5%.
We have found that, in practice, applications choose different
numbers of DNS retries. Some dig versions make only 1 retry,
others retry repeatedly (sometimes 3–5 times), and others allow
the user to specify how many. Python’s DNS library tries 3 times
over TCP when faced with the GFW’s TCP RSTs. Google Chrome
on Windows retries 4 times after a censorship event (for a total of 5
requests per page load). Chrome also periodically retries failed page
loads (often over 20 times, we have observed). To be consistent with
most DNS clients, we test all of our strategies with a maximum of
3 tries.
Follow-up Experiments At the end of each run, Geneva out-
puts the packet-manipulation strategies that succeeded (and failed).
We then perform follow-up experiments to understand why the
strategies work (or fail) and to glean information about how these
various censors operate. We describe the specific steps we take
in-line with our results.
5 SERVER-SIDE RESULTS
Here, we detail newly discovered strategies that defeat censors from
the server-side. Table 2 summarizes our results across all countries
(China, India, Iran, and Kazakhstan) and applications (DNS-over-
TCP, FTP, HTTP, HTTPS, and SMTP).
SIGCOMM ’20, August 10–14, 2020, Virtual Event, USA
Strategy
# Description
Success Rates
DNS FTP HTTP HTTPS SMTP
China
– No evasion
1 Sim. Open, Injected RST
2 Sim. Open, Injected Load
3 Corrupt ACK, Sim. Open
4 Corrupt ACK Alone
5 Corrupt ACK, Injected Load
6 Injected Load, Induced RST
7 Injected RST, Induced RST
8 TCP Window Reduction
India
– No evasion
8 TCP Window Reduction
Iran
– No evasion
8 TCP Window Reduction
2%
3%
89% 52%
83% 36%
26% 65%
7% 33%
15% 97%
82% 55%
83% 85%
3% 47%
100% 100%
–
–
100% 100%
–
–
3%
54%
54%
4%
5%
4%
52%
54%
2%
2%
100%
0%
100%
26%
3%
70%
14%
59%
55%
23%
4%
22%
5%
25%
3%
55%
54%
4%
66%
3% 100%
100% 100%