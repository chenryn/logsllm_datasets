service replicas (fail silent or not). 
BasicReplication, 
Passive  Replication 
involves  several  possible 
strategies  corresponding  to  the  following  built-in 
functions: 
StateFulReplication, 
LogBasedReplication. In all cases, only one WS replica 
processes  the  input request. In  case of  errors detected 
by  the  parsers  or  by  post-processing  assertions,  the 
request  is  forwarded  to  a  spare  replica  that  performs 
the  operation.  In  this  case,  beyond  the  execution  of 
assertions,  the  connector  provides  routing  to  a  spare 
replica  and  failure  detection  (unreachable  service 
because  of  node  crash,  service  crash  or  hang).  The 
main difference between these strategies relates to the 
way  service  state  management  is  done  for  stateful 
Services, either triggering save/restore state operations 
provided by the WS, or using journals managed by the 
connector. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007Figure 7. The execution model of the StatefulReplication 
Active 
the 
receives 
Regarding 
Replication 
the  connector 
strategies 
(ActiveReplication,  VotingReplication),  the  connector 
multicasts  the  request  to  Web  Service  replicas  (using 
appropriate  protocols)  when 
the  pre-processing 
assertion is passed. Two configurations are available: 
•  Without  voting: 
the 
responses from the replicas, and sends to the client 
the first response  that matches the post-processing 
assertion.  This  mechanism  tolerates  node  crash, 
service  crash  or  service  hang.  In  practice,  active 
replication  has  been  used  in  our  experiments  with 
all registered Identical Service replicas of Amazon. 
recovery  mechanism  with 
(majority)  voting  can  tolerate  value  faults  (data 
corruption). The connector receives responses from 
alive replicas and performs the vote using a library 
of voting algorithm variants (e.g. average, median).  
These recovery strategies are just parameterized by 
the  connector  developer  with  the  list  of  replicas  as  a 
first  parameter,  other  parameters  concerning  timer 
values,  decision  functions,  etc.  New  variants  can  also 
be  derived  from  the  existing  ones  (e.g.  Recovery 
Blocks, N-Version Programming, etc).  
•  With  voting: 
Among  the  assumptions,  the  state  management 
issue  is  of  prime  importance,  and  to  some  extent 
requires  the  collaboration  of  the  WS  provider.  For 
some services,  checkpointing core data  is appropriate, 
in  other  cases  the  replay  of  input  requests  is  a  better 
way  to  reconstruct  the  state.  Regarding  the  state 
handling issue, there is no generic solution that applies 
to  all  possible  cases.  In  some  cases  even,  a  dedicated 
implementation  to  state  management  by  the  WS 
provider is recommended to be efficient. 
4.1.  Execution models for passive replication 
The  execution  model  for  passive  replication  of 
stateless  services  is  similar  to  the  linear  model 
presented  previously.  When  is  error  detected  by  the 
post-processing  within  the  connector,  or  when  a 
service  or  communication  exception  is  raised,  a  new 
WS  replica  is  selected  to  process  the  request.  The 
connector  loops  until  a  response  is  validated  by  the 
post-processing  or  until  the  failure  of  all  replicas.  In 
this case, an SOAP exception is sent back to the client.  
the  execution 
model  is  different  because  state  recovery  operations 
made  available by  the WS provider  must be  triggered 
when  a  failure  is  detected  by  the  connector.  Before 
forwarding the request to another WS replica, the state 
of the WS replica is updated.  
For  statefull  operations/services, 
the  WSDL.  This 
With  the  StatefulReplication  execution  model,  the 
target  Web  Service  must  provide  SaveState  and 
RestoreState  operations,  i.e.  belonging  to  the  original 
version  of 
that  such 
operations  must  be  implemented  by  the  WS  provider. 
The  WS  provider  is  thus  a  partner  to  set  up  this 
particular recovery strategy. It is up to the WS provider 
to handle the complexity of that state that may depend 
on  other  WS,  and  that  is  by  definition  hidden  to  the 
customers, a connector in our case. 
implies 
With the LogBasedReplication execution model, the 
connector  provides  StartSession  and  EndSession 
operation to trigger the logging of input requests to the 
target WS. When an error is detected by the connector, 
the log of requests is replayed with a new WS replica. 
The  above  mentioned  operations  (StartSession  and 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007received before a deadline. The voting function can be 
parameterized  by  the  user  in  the  connector  and 
automatically  generated  according  to  the  types  of  the 
parameters in the response. 
It is important to mention that Abstract Web Service 
requests  received  by  the  connector  are  translated  into 
concrete requests before “sending the request” to a real 
replica. The same applies to responses. 
For  clarity  reasons,  the  figures  do  show  this  and 
other aspects like creation and update of the list of the 
replicas,  the  sending  of  error  messages  to  the  Health 
Monitoring service or the detection of internal errors. 
5.  Implementation issues and experiments 
lines  of 
The  core  software  of  this  project  represents  about 
the 
55000 
implementation  of  IWSD, 
the  DeWel 
compiler  and  companion  tools.  The  IWSD  platform 
has  been  installed  on  a  rack  of  PCs  running  Linux 
Debian GNU/Linux with a Linux Kernel 2.4.  
corresponding 
including 
The experiments carried out provide first results to 
validate this approach and the tools chain. A real case 
study must be implemented in a near future to evaluate 
the scalability of the approach. 
To  perform  the  test  of  the  five  execution  models, 
several connectors (compatible with SOAP 1.1 and 1.2 
versions) have been developed for experiments (i) with 
existing  identical  WS replicas (e.g. Amazon replicas), 
(ii) and with abstract services (Google and MSN WS). 
code 
to 
Figure 8. The execution model of the Voting Replication 
the 
EndSession) belong to the WSDL of the connector in 
this case and are triggered by the client. 
strategy  where 
Figure  7  shows  the  execution  model  for  the 
state 
StatefulReplication 
management  operations  appear.  The  state  is  saved 
before  forwarding  the  request  to  a  WS  replica.  When 
an error is detected by the post-processing, a new WS 
replica  is  selected  and  its  state  is  updated.  The 
execution  model  for  LogBasedReplication  is  very 
similar  and  can  easily  be  derived  from  this  one: 
requests  stored  in  the  log  are  replayed  to  update  the 
state of a replica. 
4.2.  Execution models for active replication 
The  execution  model  of  the  active  replication  for 
the  stateless  operations  is  as  follows:  the  connector 
broadcasts the request to all replicas, and the first valid 
response passing the post-processing is returned to the 
client. The other valid responses are ignored. If all the 
replicas fail to produce a valid response, the connector 
returns a SOAP exception to the client.  
For stateless services, it is not mandatory to ensure 
total ordering of the request messages to WS replicas. 
However,  this  is  mandatory  for  stateful  services  and 
thus  Atomic  Multicast  facilities  must  be  used  in  this 
case to broadcast input requests to all replicas. Active 
replication strategies imply maintaining consistency of 
replicas in normal operation, the SOA context does not 
change anything to this fundamental problem. 
With  the  VotingReplication  (see  Figure  8),  the 
connector  performs  the  vote  out  of  all  responses 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007Figure 9. Availability of Web Services 
5.1.  Use of Monitoring Connectors 
The  availability  of  various  Web  Services  was 
evaluated thanks to  the error information collected by 
the  connectors  and  reported  to  the  Health  Monitoring 
service.  Some  of  the  results  obtained  are  given  in 
Figure  9.  Although  the  Health  Monitoring  service 
provides other types of information (like session time, 
numbers of requests, numbers of exceptions,  etc.), we 
only  report  here  the  availability  ratio  of  several  Web 
Services. About 2000 requests were sent to each target 
service  and  we  observed  that  the  availability  of  the 
candidate  services  could  vary  a 
the 
experiments.  For  instance,  in  our  experiments,  the 
Google  WS  has  the  lowest  availability  ratio  (about 
82%) caused by 352 communication  errors over 1913 
requests sent. Among these errors, 64 are due to a very 
long  response  time  latency  and  288  due  to  a  server 
unavailability (HTTP Error codes 502: Bad Gateway). 
5.2.  Case study with Abstract Web Services 
lot  during 
We  have  performed  experiments  to  evaluate  the 
feasibility  and  the  usefulness  of  equivalent  services, 
through  the  notion  of  Abstract  Web  Service.  Since 
Google  WS  exhibited  a  weak  availability  ratio  in 
previous experiments carried out, we have developed a 
connector  able  to  map  requests  to  similar  “search” 
Web  Services,  namely  Google  WS  and  MSN  WS 
(different  WSDL  documents).  The  results  of  this 
experiment are presented in Figure 10. 
The  target  Abstract  Web  Service  has  a  very  high 
availability ratio with  this connector. This  availability 
level  is  reached  thanks  to  the  intrinsic  availability  of 
the MSN Web Service compared to the Google WS. In 
the  experiments  carried  out  with  the  basic  passive 
replication strategy, the Google server was considered 
as a primary and MSN was a backup Web Service. We 
observed that 6% of the requests were redirected to the 
MSN  server  due  to  an  unavailability  of  the  Google 
server, this being totally transparent to the client. 
Finaly, the mapping functions to convert an abstract 
request  to  a  concrete  request  (and  vice  and  versa  for 
the  responses)  have  been  written  in  XSLT  (eXtended 
Stylesheet  Language  Transformations)  [12]  using  the 
user-defined equivalence relations. 
5.3.  Case study with Stateful Web Services 
A  simple  e-business  “banking  service”  was 
developed  on  purpose  to  perform  experiments  with 
stateful Web Services. In  this  case, our objective was 
two-fold: 1) testing of various execution models and 2) 
coarse  evaluation  of  the  response  time  overhead  of 
several  recovery  strategies.  To  this  aim,  several 
connectors  providing  recovery  mechanism  for  stateful 
services  have  been  implemented  and  used  with  this 
banking application. 
Figure 10. Active Replication with AWS 
Figure 11. Comparison of recovery strategies 
time 
overhead of different  connectors compared to  a direct 
the  average  response 
Figure  11  shows 
0,960,9650,970,9750,980,9850,990,9951AbstractSearch GoogleMSNSearchAvailability0123456ConnectorwithoutrecoveryActiveReplicationStatefulReplicationLogBasedReplicationVotingReplicationResponse time overhead (in %)37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007less 
WS  clients/providers  connection  (i.e.  without  any 
connector). The response time overhead of a connector 
without  recovery  strategy  (i.e.  Monitoring  Connector) 
is 
than  3%.  Interestingly,  with  connectors 
implementing  recovery  strategies  for  stateful  services 
the overhead remain low, less than 5%.  
The experiments run while enough replicas are still 
alive. Different failures can affect a WS: server crash, 
service  crash,  service  hang,  data  corruption  …etc.  In 