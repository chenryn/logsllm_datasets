### 4.1.2 Calls to Security Hook Functions

As discussed in the previous section, the Linux Security Modules (LSM) framework provides a set of calls to security hooks for managing the security fields of kernel objects and mediating access to these objects. These hook functions are invoked via function pointers stored in a global security operations table. This table is structured as a collection of substructures that group related hooks based on kernel objects or subsystems, along with top-level hooks for system operations. Each hook is defined in terms of kernel objects and parameters, with care taken to avoid passing userspace pointers.

### 4.1.3 Security System Call

The LSM framework includes a general security system call that allows security modules to implement new calls for security-aware applications. While modules can export information and operations via the /proc filesystem or by defining a new pseudo-filesystem type, this approach is insufficient for some security modules. For example, the SELinux module extends several existing system calls to allow applications to specify or obtain security information associated with kernel objects and operations.

The security system call is a simple multi-argument call, similar to the existing Linux `syscall` system call. It takes the following arguments: `(unsigned int id, unsigned int call, unsigned long *args)`. The module defines the implementation of the system call and can interpret the arguments as needed. By default, LSM provides a `sys_security` entry point function that calls a `sys_security` hook with the provided parameters. A security module that does not provide any new calls can define a `sys_security` hook function that returns `-ENOSYS`. Most security modules that want to provide new calls can place their call implementations in this hook function.

In some cases, the entry point function provided by LSM may be inadequate. For example, one of the new calls provided by SELinux requires access to the registers on the stack. The SELinux module implements its own entry point function to provide such access and replaces the LSM entry point function in the system call table during module initialization.

### 4.1.4 Registering Security Modules

The LSM framework initializes during the kernel's boot sequence with a set of dummy hook functions that enforce traditional UNIX superuser semantics. When a security module is loaded, it must register itself with the LSM framework by calling the `register_security` function. This function updates the global security operations table to refer to the module’s hook function pointers, causing the kernel to call into the security module for access control decisions. The `register_security` function will not overwrite a previously loaded module. Once a security module is loaded, it becomes a policy decision whether it will allow itself to be unloaded.

If a security module is unloaded, it must unregister with the framework using the `unregister_security` function. This simply replaces the hook functions with the defaults, ensuring the system still has basic security measures. The default hook functions do not use the opaque security fields, so the system’s security should not be compromised if the module fails to reset the opaque fields properly.

As mentioned in Section 3, general composition of policies is intractable. While arbitrary policy composition gives undefined results, it is possible to develop security modules such that they can compose with defined results. To keep the framework simple, it is aware of only one module, either the default or the registered module—the primary module. A security module may register itself directly with the primary module using the `mod_reg_security` interface. This registration is controlled by the primary module, making it a policy decision whether to allow module stacking. With this simple interface, basic module stacking can be supported without adding complexity to the framework.

### 4.1.5 Capabilities

The Linux kernel currently supports a subset of POSIX.1e capabilities, which provide a mechanism for partitioning traditional superuser privileges and assigning them to specific processes. One of the requirements for the LSM project was to move this functionality to an optional security module, as mentioned in Section 2.

By nature, privilege granting is a permissive form of access control, as it grants access that would otherwise be denied. Consequently, the LSM framework had to provide a permissive interface with at least the same granularity as the Linux capabilities implementation. LSM retains the existing `capable` interface used within the kernel for performing capability checks but reduces the `capable` function to a simple wrapper for an LSM hook, allowing any desired logic to be implemented in the security module. This approach allowed LSM to leverage the numerous (more than 500) existing kernel calls to `capable` and avoid pervasive changes to the kernel. LSM also defines hooks to allow the logic for other forms of capability checking and capability computations to be encapsulated within the security module.

A process capability set, a simple bit vector, is stored in the `task_struct` structure. Because LSM adds an opaque security field to the `task_struct` and hooks to manage the field, it would be possible to move the existing bit vector into the field. However, this change has not been implemented to ease stacking with other modules. One of the difficulties of stacking security modules in the LSM framework is the need to share the opaque security fields. Many security modules will want to stack with the capabilities module, as the capabilities logic has been integrated into the mainstream kernel for some time and is relied upon by applications like `named` and `sendmail`. Leaving the capability bit vector in the `task_struct` eases this composition at the cost of wasted space for modules that do not need to use it.

The Linux kernel support for capabilities includes two system calls: `capset` and `capget`. To remain compatible with existing applications, these system calls are retained by LSM, but the core capabilities logic for these functions has been replaced by calls to LSM hooks. Ultimately, these calls should be reimplemented via the security system call, which should have little impact on applications since the portable interface for capabilities is through the `libcap` library rather than direct use of these calls.

The LSM project has developed a capabilities security module and migrated much of the core capabilities logic into it; however, the kernel still shows vestiges of the pre-existing Linux capabilities. Moving the bit vector from the `task_struct` proper to the opaque security field and relocating the system call interface are the only major steps left to making the capability module completely standalone.

### 4.2 Task Hooks

LSM provides a set of task hooks that enable security modules to manage process security information and control process operations. Modules can maintain process security information using the security field of the `task_struct` structure. Task hooks provide control over inter-process operations, such as `kill`, as well as control over privileged operations on the current process, such as `setuid`. The task hooks also provide fine-grained control over resource management operations such as `setrlimit` and `nice`.

### 4.3 Program Loading Hooks

Many security modules, including Linux capabilities, DTE, SELinux, and SubDomain, require the ability to perform changes in privilege when a new program is executed. Consequently, LSM provides a set of program-loading hooks that are called at critical points during the processing of an `execve` operation. The security field of the `linux_binprm` structure permits modules to maintain security information during program loading. One hook is provided to permit security modules to initialize this security information and perform access control prior to loading the program, and a second hook is provided to permit modules to update the task security information after the new program has been successfully loaded. These hooks can also be used to control inheritance of state across program executions, for example, revalidating open file descriptors.

### 4.4 IPC Hooks

Security modules can manage security information and perform access control for System V IPC using the LSM IPC hooks. The IPC object data structures share a common substructure, `kern_ipc_perm`, and only a pointer to this substructure is passed to the existing `ipcperms` function for checking permissions. Therefore, LSM adds a security field to this shared substructure. To support security information for individual messages, LSM also adds a security field to the `msg_msg` structure.

LSM inserts a hook into the existing `ipcperms` function so that a security module can perform a check for each existing Linux IPC permission check. However, since these checks are not sufficient for some security modules, LSM also inserts hooks into the individual IPC operations. These hooks provide more detailed information about the type of operation and the specific arguments. They also support fine-grained control over individual messages sent via System V message queues.

### 4.5 Filesystem Hooks

For file operations, three sets of hooks were defined: filesystem hooks, inode hooks, and file hooks. LSM adds a security field to each of the associated kernel data structures: `super_block`, `inode`, and `file`.

The filesystem hooks enable security modules to control operations such as mounting and `statfs`. LSM leverages the existing permission function by inserting an inode hook into it, but also defines a number of other inode hooks to provide finer-grained control over individual inode operations. Some of the file hooks allow security modules to perform additional checking on file operations such as `read` and `write`, for example, to revalidate permissions on use to support privilege bracketing or dynamic policy changes. A hook is also provided to allow security modules to control receipt of open file descriptors via socket IPC. Other file hooks provide finer-grained control over operations such as `fcntl` and `ioctl`.

An alternative to placing security fields in the `inode` and `super_block` structures would have been to place them in the `dentry` and `vfsmount` structures. The `inode` and `super_block` structures correspond to the actual objects and are independent of names and namespaces. The `dentry` and `vfsmount` structures contain a reference to the corresponding `inode` or `super_block` and are associated with a particular name or namespace. Using the first pair of structures avoids object aliasing issues and provides more coverage of kernel objects, as these structures also represent non-file objects such as pipes and sockets. These data structures are also readily available at any point in the filesystem code, whereas the second set of structures is often unavailable.

### 4.6 Network Hooks

Application layer access to networking is mediated using a set of socket hooks. These hooks, which include the interposition of all socket system calls, provide coarse mediation coverage of all socket-based protocols. Since active user sockets have an associated `inode` structure, a separate security field was not added to the `socket` structure or to the lower-level `sock` structure.

As the socket hooks allow general mediation of network traffic in relation to processes, LSM significantly expands the kernel’s network access control framework (which is already handled at the network layer by Netfilter [36]). For example, the `sock_rcv_skb` hook allows an inbound packet to be mediated in terms of its destination application, prior to being queued at the associated userspace socket.

Additional finer-grained hooks have been implemented for the IPv4, UNIX domain, and Netlink protocols, which were considered essential for the implementation of a minimally useful system. Similar hooks for other protocols may be implemented at a later stage.

Network data traverses the stack in packets encapsulated by an `sk_buff` (socket buffer) structure. LSM adds a security field to the `sk_buff` structure, so that security state may be managed across network layers on a per-packet basis. A set of `sk_buff` hooks is provided for lifecycle management of this security field.

Hardware and software network devices are encapsulated by a `net_device` structure. A security field was added to this structure so that security state can be maintained on a per-device basis.

Coverage of low-level network support components, such as routing tables and traffic classifiers, is somewhat limited due to the invasiveness of the code required to implement consistent fine-grained hooks. Access to these objects can be mediated at higher levels (for example, using `ioctl`), although granularity may be reduced by TOCTTOU (Time of Check to Time of Use) issues.

### 4.7 Other Hooks

LSM provides two additional sets of hooks: module hooks and a set of top-level system hooks. Module hooks can be used to control the kernel operations that create, initialize, and delete kernel modules. System hooks can be used to control system operations, such as setting the system hostname, accessing I/O ports, and configuring process accounting. The existing Linux kernel provides some control over many of these operations using capability checks, but those checks only provide coarse-grained distinctions among different operations and do not provide any argument information.

### 5 Testing and Functionality

#### 5.1 Modules

LSM provides the mechanism to enforce enhanced access control policies. Thus, it is the LSM modules that implement a specific policy and are critical in proving the functionality of the framework. Below are briefly described a few of these LSM modules:

- **SELinux**: A Linux implementation of the Flask [41] flexible access control architecture and an example security server that supports Type Enforcement, Role-Based Access Control, and optionally Multi-Level Security. SELinux was originally implemented as a kernel patch [29] and was then reimplemented as a security module that uses LSM. SELinux can be used to confine processes to least privilege, protect the integrity and confidentiality of processes and data, and support application security needs. The generality and comprehensiveness of SELinux helped to drive the requirements for LSM.

- **DTE Linux**: An implementation of Domain and Type Enforcement [4, 5] developed for Linux [23]. Like SELinux, DTE Linux was originally implemented as a kernel patch and was then adapted to LSM. With this module loaded, types can be assigned to objects and domains to processes. The DTE policy restricts access between domains and from domains to types. The DTE Linux project also provided useful input into the design and implementation of LSM.

- **LSM Port of Openwall Kernel Patch**: The Openwall kernel patch [12] provides a collection of security features to protect a system from common attacks, such as buffer overflows and temp file races. A module is under development that supports a subset of the Openwall patch. For example, with this module loaded, a victim program will not be allowed to follow malicious symlinks.

- **POSIX.1e Capabilities**: The POSIX.1e capabilities [42] logic was already present in the Linux kernel, but the LSM kernel patch cleanly separates this logic into a security module. This change allows users who do not need this functionality to omit it from their kernels and allows the development of the capabilities logic to proceed with greater independence from the main kernel.

#### 5.2 Performance Overhead

The LSM framework imposes minimal overhead when compared with a standard Linux kernel. The LSM kernel used for benchmarking this overhead included the POSIX.1e capabilities security module to provide a fair comparison between an unmodified Linux kernel with built-in capabilities support and an LSM kernel with a capabilities module.

The LSM framework is designed to enable sophisticated access control models. The overhead imposed by such a model is a composite of the LSM framework overhead and the actual policy enforcement overhead. Policy enforcement is outside the scope of the LSM framework, but the performance impact of an enhanced access control module is still of interest. The SELinux module is benchmarked and compared against a standard Linux kernel with Netfilter enabled to show an example of module performance in Section 5.2.3.

**Process Tests, Times in µseconds, Smaller is Better:**

| Test Type         | 2.5.15  | 2.5.15-lsm | % Overhead with LSM |
|-------------------|---------|------------|---------------------|
| null call         | 0.49    | 0.48       | -2.0%               |
| null I/O          | 0.89    | 0.91       | -2.2%               |
| stat              | 5.39    | 5.49       | 1.9%                |
| open/close        | 6.94    | 7.13       | 2.7%                |
| select TCP        | 39      | 41         | 5.1%                |
| sig inst          | 1.18    | 1.19       | 0.8%                |
| sig handl         | 4.10    | 4.09       | -0.2%               |
| fork proc         | 187     | 187        | 0%                  |
| exec proc         | 705     | 706        | 0.1%                |
| sh proc           | 3608    | 3611       | 0.1%                |

**File and VM System Latencies in µseconds, Smaller is Better:**

| Test Type         | 2.5.15  | 2.5.15-lsm | % Overhead with LSM |
|-------------------|---------|------------|---------------------|
| 0K file create    | 0.49    | 0.48       | -2.0%               |
| 0K file delete    | 0.89    | 0.91       | -2.2%               |
| 10K file create   | 5.39    | 5.49       | 1.9%                |
| 10K file delete   | 6.94    | 7.13       | 2.7%                |
| mmap latency      | 39      | 41         | 5.1%                |
| prot fault        | 1.18    | 1.19       | 0.8%                |