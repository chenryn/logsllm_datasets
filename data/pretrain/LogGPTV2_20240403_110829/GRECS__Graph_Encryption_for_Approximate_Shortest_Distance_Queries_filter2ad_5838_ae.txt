In this section, we present experimental evaluations of our
schemes on a number of large-scale graphs. We implement
the Das Sarma et al. distance oracle (DO1) and Cohen et
al. distance oracle (DO2) and all three of our graph encryp-
tion schemes. We use AES-128 in CBC mode for symmet-
ric encryption and instantiate SWHE with the Boneh-Goh-
512Nissim (BGN) scheme, implemented in C++ with the Stan-
ford Pairing-Based Library PBC1. We use OpenSSL2 for all
basic cryptographic primitives and use 128-bit security for
all the encryptions. We use HMAC for PRFs and instanti-
ate the hash function in GraphEnc3 with HMAC-SHA-256.
All experiments were run on a 24-core 2.9GHz Intel Xeon,
with 512 GBs of RAM running Linux.
6.1 Datasets
We use real-world graph datasets publicly available from the
Stanford SNAP website3. In particular, we use as-skitter,
a large Internet topology graph; com-Youtube, a large so-
cial network based on the Youtube web site; loc-Gowalla, a
location-based social network; email-Enron, an email com-
munication network; and ca-CondMat, a collaboration net-
work for scientiﬁc collaborations between authors of papers
related to Condensed Matter research. Table 1 summarizes
the main characteristics of these datasets.
Dataset
as-skitter
com-Youtube
loc-Gowalla
email-Enron
ca-CondMat
Nodes
1,696,415
1,134,890
196,591
36,692
23,133
Edges
11,095,298
2,987,624
950,327
367,662
186,936
Diameter Storage
143MB
37MB
11MB
1.84MB
158KB
25
20
14
11
14
Table 1: The graph datasets used in our experiments
Notice that some of these datasets contain millions of
nodes and edges and that the diameters of these graphs are
small. This is something that has been observed in many
real-life graphs [30] and is true for expander and small-world
graphs, which are known to model many real-life graphs.
The implication of this, is that the maximum distance D in
the sketches generated by the distance oracles is, in practice,
small and therefore the value N that we use in GraphEnc2
and GraphEnc3 (see Algorithm 1 and 3) is typically small.
6.2 Overview
For a graph G = (V, E) with n nodes, we summarize in
Table 2 our constructions’ space, setup, and communica-
tion complexities as well as the complexities for both the
server and client during the query phase. Note that the
complexities for each scheme also depend on α, however, in
practice, since setting σ for DO1 (ρ for DO2) to some small
numbers resulted good approximations, therefore, it makes
α = O(log n). In our experiments, we test diﬀerent σ and
ρ’s and the sketch size, |Skv|, for each node is sublinear in
the size of the graph, i.e. O(log n).
Scheme
Space
Setup Time
Communication
GraphEnc2
GraphEnc1
O(n log n) O(n log2 n/ε)
O(n log n) O(n log2 n/ε)
O(log n)
O(1)
GraphEnc3
O(n log n)
O(n log n)
O(1)
Server Query Comp.
Client Query Comp.
O(1)
O(log n)
O(log2 n/ε)
O(diameter) O(diameter)
O(log n)
Table 2: The space, setup, communication, and query com-
plexities of our constructions (α is set to be in O(log n)).
1http://crypto.stanford.edu/pbc/
2https://www.openssl.org/
3https://snap.stanford.edu/data/
Table 3 summarizes our experimental results. Compared
to existing schemes, such as [1], our experiments shows that
the constructions are very eﬃcient and scalable for large
real dataset. For example, in [1], it takes several minutes
to securely compute the shortest path distance for graph
with only tens to hundreds of nodes, whereas it takes only
seconds for our scheme to query the encrypted graph up to
1.6 million nodes.
6.3 Performance of GraphEnc1
We evaluate the performance of GraphEnc1 using both the
Das Sarma et al. and Cohen et al. distance oracles. For the
Das Sarma et al. oracle (DO1), we set the sampling param-
eter σ = 3 and for the Cohen et al. oracle (DO2) we set the
rank parameter ρ = 4. We choose these parameters because
they resulted in good approximation ratios and the maxi-
mum sketch sizes (i.e., S) of roughly the same amount. Note
that, the approximation factor α in those then is in O(log n)
for GraphEnc1, therefore, the communication complexity (see
Table 2) in GraphEnc1 is O(log n). We can see from Table 3
that the time to setup an encrypted graph with GraphEnc1
is practical—even for large graphs. For example, it takes
only 8 hours to setup an encryption of the as-skitter graph
which includes 1.6 million nodes. Since the GraphEnc1.Setup
is highly-parallelizable, we could speed setup time consider-
ably by using a cluster. A cluster of 10 machines would be
enough to bring the setup time down to less than an hour.
Furthermore, the size of the encrypted sketches range from
1KB for CondMat to 1.94KB for as-skitter per node. The
main limitation of this construction is that the communica-
tion is proportional to the size of the sketches. We tested
for various sketch sizes, and the communication per query
went up to 3.8KB for as-skitter when we set S = 80. This
can become quite signiﬁcant if the server is interacting with
multiple clients.
6.4 Performance of GraphEnc2
The ﬁrst column in Table 3 of the GraphEnc2 experiments
gives the size the encrypted hash tables Tv constructed dur-
ing GraphEnc2.Setup. Table sizes range from 5K for ca-
CondMat to 11K for as-skitter.
The Time column gives the time to create an encrypted
hash-table/sketch per node. This includes generating the
BGN encryptions of the distances and the 0-encryptions.
Note that this makes GraphEnc2.Setup quite costly, about 3
orders of magnitude more expensive than GraphEnc1.Setup.
This is mostly due to generating the 0-encryptions. Note,
however, that similarly to GraphEnc1, we can use extensive
parallelization to speed up the setup. For example, using a
cluster of 100 machines, we can setup the encrypted graph
on the order of hours, even for as-skitter which includes 1.6
million nodes. The space overhead per node is also large, but
the encrypted graph itself can be distributed in a cluster
since every encrypted sketch is independent of the other.
Finally, as shown in Table 3, GraphEnc2 achieves a constant
communication cost of 34B.
In Fig. 4, we report on the intra- and inter-collisions that
we observed when executing over 10K diﬀerent queries over
our datasets. The collision probability ranges between 1%
and 3.5%. As we can see from the results, the oracle DO2
has less collisions than DO1.
We would like to point out that those inter-collisions can
be detected by associating with each encryption of a node
513Dataset
As-skitter
Youtube
Gowalla
Enron
CondMat
sketch
size
S
80
71
80
68
70
53
60
45
55
42
Graph
Sketching
Scheme
DO1
DO2
DO1
DO2
DO1
DO2
DO1
DO2
DO1
DO2
Comm.
per query
(in bytes)
GraphEnc1
Setup Time
per node
(in ms)
Size
per node
(in KBs)
3,840
3,120
3,840
3,120
3360
2544
2880
2160
2640
2016
16.7
14
16.5
14.5
14.9
12
12.5
9.39
11.8
7.8
1.94
1.63
1.94
1.63
1.7
1.29
1.44
1.11
1.34
1.03
T
size
11K
8.4K
10K
8.5K
7.5K
7K
7K
6.5K
5.5K
5K
GraphEnc2
Comm.
per query
(in bytes)
Setup Time
Size
per node
(in secs)
per node
(in MBs)
Comm.
per query
(in bytes)
GraphEnc3
Setup Time
per node
(in ms)
Size
per node
(in KBs)
34
34
34
34
34
34
34
34
34
34
7.3
6.59
8
6.57
7.4
5
5.6
4.81
4.65
3.8
1.1
0.76
1.1
0.76
0.82
0.62
0.76
0.53
0.65
0.49
34
34
34
34
34
34
34
34
34
34
20.1
16
18.2
17.3
15.6
14.7
14
10
13.2