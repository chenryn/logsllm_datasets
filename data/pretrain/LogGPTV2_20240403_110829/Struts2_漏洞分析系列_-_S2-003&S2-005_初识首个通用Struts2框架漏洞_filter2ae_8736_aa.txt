# Struts2 漏洞分析系列 - S2-003&S2-005/初识首个通用Struts2框架漏洞
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 漏洞概述
S2-003的漏洞核心在于Struts2中的ParametersInterceptor（某个拦截器）会对请求中的参数名称进行OGNL的表达式解析，虽然有一定的过滤，但是过滤的不完全导致被绕过。
**影响版本：2.0.0～2.1.8.1**
官方issue地址：
官方issue地址：
## 0x01 环境搭建
S2-003的执行流程与S2-001不同，主要区别在于S2-003中必须包含一个Action，否则无法走到漏洞触发的流程，因此首先需要搭建一个漏洞环境。
首先编写一个LoginAction用于模拟登陆过程：
    import com.opensymphony.xwork2.ActionSupport;
    public class LoginAction extends ActionSupport {
        private String username;
        private String password;
        public String getUsername() {
            return username;
        }
        public String getPassword() {
            return password;
        }
        public void setUsername(String username) {
            this.username = username;
        }
        public void setPassword(String password) {
            this.password = password;
        }
        public String execute() throw Exception {
            if (this.username == null || this.password == null) {
                return "failed";
            }
            if (this.username.equals("admin") && this.password.equals("admin")) {
                return "success";
            }
            return "failed";
        }
        public static void main(String[] args) {
        }
    }
LoginAction的继承关系如下：
随后写一个struts.xml：
                index.jsp
这样我们就算是写好了一个`login.action`的路由了，直接启动Tomcat访问login.action即可使用LoginAction中execute的逻辑，当用户名与密码正确时会跳转到index.jsp中。
## 0x02 漏洞分析
在之前的文章中有介绍过，Struts2的执行流程中涉及一个叫拦截器的东西，Struts2自带了许多拦截器，在请求到达真正的Action前会进行一系列处理，并在执行完毕后重新调用一次用于做请求完毕的清理。
S2-003的漏洞就出在其中的ParametersInterceptor上，在Struts2的执行流程中，首先会调用每个拦截器的doIntercept对请求进行处理，首先看看ParametersInterceptor的doIntercept方法：
    com.opensymphony.xwork2.interceptor.ParametersInterceptor#doIntercept
    public String doIntercept(ActionInvocation invocation) throws Exception {
            Object action = invocation.getAction();
            if (!(action instanceof NoParameters)) {
                ActionContext ac = invocation.getInvocationContext();
                Map parameters = ac.getParameters();
                if (LOG.isDebugEnabled()) {
                    LOG.debug("Setting params " + this.getParameterLogMap(parameters));
                }
                if (parameters != null) {
                    Map contextMap = ac.getContextMap();
                    try {
                        OgnlContextState.setCreatingNullObjects(contextMap, true);
                        OgnlContextState.setDenyMethodExecution(contextMap, true);
                        OgnlContextState.setReportingConversionErrors(contextMap, true);
                        ValueStack stack = ac.getValueStack();
                        this.setParameters(action, stack, parameters);
                    } finally {
                        OgnlContextState.setCreatingNullObjects(contextMap, false);
                        OgnlContextState.setDenyMethodExecution(contextMap, false);
                        OgnlContextState.setReportingConversionErrors(contextMap, false);
                    }
                }
            }
            return invocation.invoke();
        }
上述代码，首先获取了当前请求对应的Action，也就是之前编写好的LoginAction，随后获取在前面拦截器中封装完毕的Action上下文，并获取了当前请求中的参数。
随后当参数不为空时，会为ContextMap设置三个键，分别为xwork.NullHandler.createNullObjects、xwork.MethodAccessor.denyMethodExecution、report.conversion.errors，其值都被设置为true。最后获取了ValueStack并调用了setParameters方法，传入三个参数分别为LoginAction、ValueStack、parameters。
相关参数值如下：
    com.opensymphony.xwork2.interceptor.ParametersInterceptor#setParameters
    protected void setParameters(Object action, ValueStack stack, Map parameters) {
            ParameterNameAware parameterNameAware = action instanceof ParameterNameAware ? (ParameterNameAware)action : null;
            Map params = null;
            if (this.ordered) {
                params = new TreeMap(this.getOrderedComparator());
                params.putAll(parameters);
            } else {
                params = new TreeMap(parameters);
            }
            Iterator iterator = params.entrySet().iterator();
            while(true) {
                Entry entry;
                String name;
                boolean acceptableName;
                do {
                    if (!iterator.hasNext()) {
                        return;
                    }
                    entry = (Entry)iterator.next();
                    name = entry.getKey().toString();
                    acceptableName = this.acceptableName(name) && (parameterNameAware == null || parameterNameAware.acceptableParameterName(name));
                } while(!acceptableName);
                Object value = entry.getValue();
                try {
                    stack.setValue(name, value);
                } catch (RuntimeException var13) {
                    if (devMode) {
                        String developerNotification = LocalizedTextUtil.findText(ParametersInterceptor.class, "devmode.notification", ActionContext.getContext().getLocale(), "Developer Notification:\n{0}", new Object[]{var13.getMessage()});
                        LOG.error(developerNotification);
                        if (action instanceof ValidationAware) {