title:A Computational Approach to Packet Classification
author:Alon Rashelbach and
Ori Rottenstreich and
Mark Silberstein
A Computational Approach to Packet Classification
Alon Rashelbach
Technion
PI:EMAIL
Ori Rottenstreich
Technion
PI:EMAIL
Mark Silberstein
Technion
PI:EMAIL
0
2
0
2
l
u
J
3
1
]
C
D
.
s
c
[
2
v
4
8
5
7
0
.
2
0
0
2
:
v
i
X
r
a
ABSTRACT
Multi-ﬁeld packet classiﬁcation is a crucial component in modern
software-deﬁned data center networks. To achieve high through-
put and low latency, state-of-the-art algorithms strive to ﬁt the rule
lookup data structures into on-die caches; however, they do not
scale well with the number of rules.
We present a novel approach, NuevoMatch, which improves the
memory scaling of existing methods. A new data structure, Range
Query Recursive Model Index (RQ-RMI), is the key component that
enables NuevoMatch to replace most of the accesses to main mem-
ory with model inference computations. We describe an eﬃcient
training algorithm that guarantees the correctness of the RQ-RMI-
based classiﬁcation. The use of RQ-RMI allows the rules to be com-
pressed into model weights that ﬁt into the hardware cache. Fur-
ther, it takes advantage of the growing support for fast neural net-
work processing in modern CPUs, such as wide vector instructions,
achieving a rate of tens of nanoseconds per lookup.
Our evaluation using 500K multi-ﬁeld rules from the standard
ClassBench benchmark shows a geometric mean compression fac-
tor of 4.9×, 8×, and 82×, and average performance improvement
of 2.4×, 2.6×, and 1.6× in throughput compared to CutSplit, Neu-
roCuts, and TupleMerge, all state-of-the-art algorithms1.
1 INTRODUCTION
Packet classiﬁcation is a cornerstone of packet-switched networks.
Network functions such as switches use a set of rules that deter-
mine which action they should take for each incoming packet. The
rules originate in higher-level domains, such as routing, Quality
of Service, or security policies. They match the packets’ metadata,
e.g., the destination IP-address and/or the transport protocol. If
multiple rules match, the rule with the highest priority is used.
Packet classiﬁcation algorithms have been studied extensively.
There are two main classes: those that rely on Ternary Content
Addressable Memory (TCAM) hardware [13, 20, 23, 28, 37], and
those that are implemented in software [3, 8, 21, 22, 34, 36, 41, 44].
In this work, we focus on software-only algorithms that can be
deployed in virtual network functions, such as forwarders or ACL
ﬁrewalls, running on commodity X86 servers.
Software algorithms fall into two major categories: decision-
tree based [8, 21, 22, 34, 41, 44] and hash-based [3, 36]. The former
use decision trees for indexing and matching the rules, whereas the
latter perform lookup via hash-tables by hashing the rule’s preﬁxes.
Other methods for packet classiﬁcation [7, 38] are less common as
they either require too much memory or are too slow.
A key to achieving high classiﬁcation performance in modern
CPUs is to ensure that the classiﬁer ﬁts into the CPU on-die cache.
When the classiﬁer is too large, the lookup involves high-latency
1This work does not raise any ethical issues.
Independent Set
RQ-RMI
(CPU Cache)
predicted
index
iSet
Rules
(DRAM)
candidate
rule
Remainder Set
External
Classiﬁer
(CPU Cache)
indexes
Remainder
Rules
(DRAM)
candidate
rule
Incoming
Packet
Selector
Action
Figure 1: NuevoMatch overview. The rules are divided into
Independent Sets indexed by RQ-RMIs and the Remainder
Set indexed by any classiﬁer. One RQ-RMI predicts the stor-
age index of the matching rule. The Selector chooses the
highest-priority matching rule.
memory accesses, which stall the CPU, as the data-dependent ac-
cess pattern during the lookup impedes hardware prefetching. Un-
fortunately, as the number of rules grows, it becomes diﬃcult to
maintain the classiﬁer in the cache. In particular, in decision-tree
methods, rules are often replicated among multiple leaves of the de-
cision tree, inﬂating its memory footprint and aﬀecting scalability.
Consequently, recent approaches, notably CutSplit [21] and Neuro-
Cuts [22], seek to reduce rule replication to achieve better scaling.
However, they still fail to scale to large rule-sets, which in modern
data centers may reach hundreds of thousands of rules [6]. Hash-
based techniques also suﬀer from poor scaling, as adding rules in-
creases the number of hash-tables and their size.
We propose a novel approach to packet classiﬁcation, Nuevo-
Match, which compresses the rule-set index dramatically to ﬁt it
entirely into the upper levels of the CPU cache (L1/L2) even for
large 500K rule-sets. We introduce a novel Range Query Recursive
Model Index (RQ-RMI) model, and train it to learn the rules’ match-
ing sets, turning rule matching into neural network inference. We
show that RQ-RMI achieves out-of-L1-cache execution by reduc-
ing the memory footprint on average by 4.9×, 8×, and 82× com-
pared to recent CutSplit [21], NeuroCuts [22], and TupleMerge [3]
on the standard ClassBench [39] benchmarks, and up to 29× for
real forwarding rule-sets.
To the best of our knowledge, NuevoMatch is the ﬁrst to per-
form packet classiﬁcation using trained neural network models.
NeuroCuts also uses neural nets, but it applies them for optimiz-
ing the decision tree parameters during the oﬄine tree construc-
tion phase; their rule matching still uses traditional (optimized) de-
cision trees. In contrast, NuevoMatch performs classiﬁcation via
RQ-RMIs, which are more space-eﬃcient than decision trees or
hash-tables, improving scalability by an order of magnitude.
NuevoMatch transforms the packet classiﬁcation task from
memory- to compute-bound. This design is appealing because it
is likely to scale well in the future, with rapid advances in hard-
ware acceleration of neural network inference [11, 19, 29]. On the
other hand, the performance of both decision trees and hash-tables
is inherently limited because of the poor scaling of DRAM access
latency and CPU on-die cache sizes (e.g., 1.5× over ﬁve years for
L1 in Intel’s CPUs).
NuevoMatch builds on the recent work on learned indexes [18],
which applies a Recursive Model Index (RMI) model to indexing
key-value pairs. The values are stored in an array, and the RMI
is trained to learn the mapping function between the keys and the
indexes of their values in the array. The model is used to predict the
index given the key. When applied to databases [18], RMI boosts
performance by compressing the indexes to ﬁt in CPU caches.
Unfortunately, RMI is not directly applicable for packet classi-
ﬁcation. First, a key (packet ﬁeld) may not have an exact match-
ing value, but match a rule range, whereas RMI can learn only
exact key-index pairs. This is a fundamental property of RMI: it
guarantees correctness only for the keys used during training, but
provides no such guarantees for non-existing keys ([18], Section
3.4). Thus, for range matching it requires enumeration of all pos-
sible keys in the range, making it too slow. Second, the match is
evaluated over multiple packet ﬁelds, requiring lookup in a multi-
dimensional space. Unfortunately, multi-dimensional RMI [17] re-
quires that the input be ﬂattened into one dimension, which in the
presence of wildcards results in an exponential blowup of the input
domain, making it too large to learn for compact models. Finally, a
key may match multiple rules, with the highest priority one used
as output, whereas RMI retrieves only a single index for each key.
NuevoMatch successfully solves these challenges.
RQ-RMI. We design a novel model which can match keys to
ranges, with an eﬃcient training algorithm that does not require
exhaustive key enumeration to learn the ranges. The training
strives to minimize the prediction error of the index, while main-
taining a small model size. We show that the models can store in-
dices of 500K ClassBench rules in 35 KB (§5.2.1). We prove that our
algorithm guarantees range lookup correctness (§3.3).
Multi-ﬁeld packet classiﬁcation. To enable multi-ﬁeld match-
ing with overlapping ranges, the rule-set is split into independent
sets with non-overlapping ranges, called iSets, each associated with
a single ﬁeld and indexed with its own RQ-RMI model. The iSet
partitioning (§3.6) strives to cover the rule-set with as few iSets as
possible, discarding those that are too small. The remainder set of
the rules not covered by large iSets is indexed via existing classiﬁ-
cation techniques. In practice, the rules in the remainder constitute
a small fraction in representative rule-sets, so the remainder index
ﬁts into a fast cache together with the RQ-RMIs.
Figure 1 summarizes the complete classiﬁcation ﬂow. The query
of the RQ-RMI models produces the hints for the secondary search
that selects one matching rule per iSet. The validation stage selects
the candidates with a positive match across all the ﬁelds, and a
selector chooses the highest priority matching rule.
Conceptually, NuevoMatch can be seen as an accelerator for ex-
isting packet classiﬁcation techniques and thus complements them.
In particular, the RQ-RMI model is best used for indexing rules
with high value diversity that can be partitioned into fewer iSets.
We show that the iSet construction algorithm is eﬀective for select-
ing the rules that can be indexed via RQ-RMI, leaving the rest in
the remainder (§5.3.1). The performance beneﬁts of NuevoMatch
become evident when it indexes more than 25% of the rules. Since
the remainder is only a fraction of the original rule-set, it can be
indexed eﬃciently with smaller decision-trees/hash-tables or will
ﬁt smaller TCAMs.
Our experiments2 show that NuevoMatch outperforms all the
state-of-the-art algorithms on synthetic and real-life rule-sets. For
example, it is faster than CutSplit, NeuroCuts, and TupleMerge, by
2.7×, 4.4× and 2.6× in latency and 2.4×, 2.6×, and 1.6× in through-
put respectively, averaged over 12 rule-sets of 500K ClassBench-
generated rules, and by 7.5× in latency and 3.5× in throughput
vs. TupleMerge for the real-world Stanford backbone forwarding
rule-set.
NuevoMatch supports rule updates by removing the updated
rules from the RQ-RMI and adding them to the remainder set in-
dexed by another algorithm that supports fast updates, e.g., Tuple-
Merge. This approach requires periodic retraining to maintain a
small remainder set; hence it does not yet support more than a few
thousands of updates (§3.9). The algorithmic solutions to directly
update RQ-RMI are deferred for future work.
In summary, our contributions are as follows.
• We present an novel RQ-RMI model and a training technique
for learning packet classiﬁcation rules.
• We demonstrate the application of RQ-RMI to multi-ﬁeld
packet classiﬁcation.
• NuevoMatch outperforms existing techniques in terms of mem-
ory footprint, latency, and throughput on challenging rule-sets
with up to 500K rules, compressing them to ﬁt into small caches
of modern processors.
2 BACKGROUND
This section describes the packet classiﬁcation problem and sur-
veys existing solutions.
2.1 Classiﬁcation algorithms
Packet classiﬁcation is the process of locating a single rule that is
satisﬁed by an input packet among a set of rules. A rule contains
a few ﬁelds in the packet’s metadata. Wildcards deﬁne ranges, i.e.,
they match multiple values. Ranges may overlap with each other,
i.e., a packet may match several rules, but only the one having the
highest priority is selected. Figure 2 illustrates a classiﬁer with two
ﬁelds and ﬁve overlapping matching rules. An incoming packet
matches two rules (R3, R4), but R3 is used as it has a higher priority.
Packet classiﬁcation performance becomes diﬃcult to scale as
the number of rules and the number of matching ﬁelds grow. There-
fore, it has received renewed interest with increased complexity
of software-deﬁned data center networks, featuring hundreds of
thousands of rules per virtual network function [5] and tens of
matching ﬁelds (up to 41 in OpenFlow 1.4 [27]).
Decision Tree Algorithms. The rules are viewed as hyper-cubes
and packets as points in a multi-dimensional space. The axes of the
rule space represent diﬀerent ﬁelds and hold non-negative integers.
2The source code of NuevoMatch is available in [31].
IPv4 Address
10.10.*.*
10.10.1.*
10.*.*.*
10.10.3.*
10.10.3.100
R0
R1
R2
R3
R4
Incoming packet
10.10.3.100:19
Port
10-18
15-25
5-8
7-20
19
Priority
1 (highest)
2
3
4
5 (lowest)
Action
a1
a2
a3
a4
a5
Action to take
a4
Figure 2: Packet classiﬁcation with two ﬁelds: IP address and
port.
A recursive partitioning technique divides the rule space into sub-
sets with at most binth rules. Thus, to match a rule, a tree traver-
sal ﬁnds the smallest subset for a given packet, while a secondary
search scans over the subset’s rules to select the best match.
Unfortunately, a rule replication problem may hinder perfor-
mance in larger rule-sets by dramatically increasing the tree’s
memory footprint when a rule spans several subspaces. Early
works, such as HiCuts [8] and HyperCuts [34] both suﬀer from
this issue. More recent EﬃCuts [41] and CutSplit [21], suggest that
the rule set should be split into groups of rules that share similar
properties and generate a separate decision-tree for each. Neuro-
Cuts [22], the most recent work in this domain, uses reinforcement
learning for optimizing decision tree parameters to reduce its mem-
ory footprint, or the number of memory accesses during traversal,
by eﬃciently exploring a large tree conﬁguration space.
Hash-Based Algorithms. Tuple Space Search [36] and recent Tu-
pleMerge [3] partition the rule-set into subsets according to the
number of preﬁx bits in each ﬁeld. As all rules of a subset have
the same number of preﬁx bits, they can act as keys in a hash ta-
ble. The classiﬁcation is performed by extracting the preﬁx bits, in
all ﬁelds, of an incoming packet, and checking all hash-tables for
matching candidates. A secondary search eliminates false-positive
results and selects the rule with the highest priority.
Hash-based techniques are eﬀective in an online classiﬁcation
problem with frequent rule updates, whereas decision trees are not.
However, decision trees have been traditionally considered faster
in classiﬁcation. Nevertheless, the recent TupleMerge hash-based
algorithm closes the gap and achieves high classiﬁcation through-
put while supporting high performance updates.
2.2 Poor performance with large rule-sets
The packet classiﬁcation performance of all the existing techniques
does not scale well with the number of rules. This happens because
their indexing structures spill out of the fast L1/L2 CPU caches into
L3 or DRAM. Indeed, as we show in our experiments (§5), Tuple-
Merge and NeuroCuts exceed the 1MB L2 cache with 100K rules
and CutSplit with 500K rules. However, keeping the entire index-
ing structure in fast caches is critical for performance. The inherent
lack of access locality in hash and tree data structures, combined
with the data-dependent nature of the accesses, make hardware
prefetchers ineﬀective for hiding memory access latency. Thus, the
performance of all lookups drops dramatically.
Stage
s0
s1
sn−1
Values
m0, 0(x )
m1, 0(x )
m1, 1(x )