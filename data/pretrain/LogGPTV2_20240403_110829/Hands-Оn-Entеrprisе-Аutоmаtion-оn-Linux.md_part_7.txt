encrypted vaults can be referenced by any playbook, provided the vault password is
passed to the playbook when it is run. Vaults are beyond the scope of this chapter, but if
you would like to read more about them, please see https:/​/​docs.​ansible.​com/​ansible/
latest/​user_​guide/​playbooks_​vault.​html. In this book, we will not use them extensively,
simply to keep the example code concise. However, it is strongly recommended that in a
production environment, you use vaults wherever sensitive data for a playbook needs to be
stored.
Now that we have introduced the concept of variables in Ansible, and the various types
available, let's take a look at an important means for managing configuration files in
Ansible—the use of templates.
Understanding Ansible templates
A common automation requirement is to set a value in a configuration file, or even to
deploy a new configuration file, based on some given parameters. Ansible provides
modules that can perform similar functions to the venerable sed and awk utilities, and of
course, these are valid ways to modify an existing configuration file. Let's suppose we have
a small Apache virtual host configuration file, containing the following code:
DocumentRoot "/var/www/automation"
ServerName www.example.com
We want to deploy this configuration, but customize the DocumentRoot parameter for each
host. Naturally, we could just deploy the preceding file, exactly as it is, to every host, and
then use a regular expression, in conjunction with the Ansible replace module, to find
the DocumentRoot line and modify it (similar to using the sed command-line utility). The
resulting playbook might look like this:
---
- name: Deploy and customize an Apache configuration
hosts: localhost
become: true
vars:
[ 52 ]
Automating Your IT Infrastructure with Ansible Chapter 2
docroot: "/var/www/myexample"
tasks:
- name: Copy static configuration file to remote host
copy:
src: files/vhost.conf
dest: /etc/apache2/sites-available/my-vhost.conf
- name: Replace static DocumentRoot with variable contents
replace:
path: /etc/apache2/sites-available/my-vhost.conf
regexp: '^(\s+DocumentRoot)\s+.*$'
replace: '\1 {{ docroot }}'
If we create our sample static virtual host configuration file in files/vhost.conf with the
preceding contents shown and run this playbook, we can see that it works, as follows:
[ 53 ]
Automating Your IT Infrastructure with Ansible Chapter 2
However, this is an inelegant solution. First of all, we're using two tasks, and if we wanted
to customize ServerName as well, we'd need even more. Secondly, those who are familiar
with regular expressions will know it wouldn't take much to trip up the simple one used
here. Writing good robust regular expressions for tasks such as this is an art in itself.
Luckily, Ansible has inherited from the Python in which it is written a technology called
Jinja2 templating. This is perfect for scenarios such as this (and many other deployment-
related automation scenarios). Instead of a cumbersome multistep approach such as this,
we now define our starting virtual host configuration file as a template
in templates/vhost.conf.j2, as follows:
DocumentRoot {{ docroot }}
ServerName www.example.com
As you can see, this is almost identical to our original configuration file, except that we
have now replaced one of the static values with one of our variables, surrounded by pairs
of curly braces, just as we would do in the playbook itself. Before we proceed with this
example, it is worth mentioning that Jinja2 is an incredibly powerful templating system that
goes far beyond simple variable substitution into a flat file. It is capable of conditional
statements, such as if...else and for loops, and includes a wide array of filters that can
be used to manipulate content (for example, to convert a string to uppercase, or to join the
members of a list together to form a string).
With that said, this book is not intended as a complete language reference for either Ansible
or Jinja2—rather, it is intended as a practical guide to show you how to build up your SOE
using Ansible. Please refer to the Further reading section at the end of this chapter for some
references, which will give you a more complete overview of both Ansible and Jinja2.
Returning to our example, we will modify the playbook to deploy this example, as follows:
---
- name: Deploy and customize an Apache configuration
hosts: localhost
become: true
vars:
docroot: "/var/www/myexample"
tasks:
- name: Copy across and populate the template configuration
template:
src: templates/vhost.conf.j2
dest: /etc/apache2/sites-available/my-vhost.conf
[ 54 ]
Automating Your IT Infrastructure with Ansible Chapter 2
Notice how much more elegant this playbook is—the template module copies the
configuration template to the remote host, just as the copy module did in the prior
example, and also populates any variables we have specified. This is an incredibly
powerful way to deploy configuration files in a repeatable, common manner, and it is
highly recommended that you adopt this approach where possible. When human beings
edit files, they often do so in an inconsistent manner, and that can be the enemy of
automation, as you have to build a really robust regular expression to ensure you catch all
possible edge cases. Deploying from templates with Ansible creates repeatable, reliable
results that can easily be validated in a production environment. Running this playbook
yields identical results to our previous, more complex example, as follows:
That concludes our look at variables for now, and indeed, our crash course in Ansible. In
the next section, we tie up everything we have learned, before drawing this chapter to a
close.
[ 55 ]
Automating Your IT Infrastructure with Ansible Chapter 2
Bringing Ansible and the SOE together
We have already worked through a number of end-to-end examples with Ansible.
Although simple, they showcase the fundamental building blocks of automation with
Ansible, on which this book is based. A big part of achieving automation in a Linux
environment at scale is having both good standards and robust processes. Hence, not only
should your operating environment be standardized; so should your deployment and
configuration processes.
As discussed in the previous chapter, although a well-defined SOE will be consistent at the
point of deployment, this consistency can soon be lost if administrators are allowed to make
changes at will, using whatever their preferred method is. Just as it is desirable to deploy an
SOE to achieve success in automation, so it is also desirable to make automation your go-to
for as many (ideally all) administrative tasks as possible.
Ideally, there should be one single source of truth for playbooks (for example, a central Git
repository) and a single source of truth for inventories (this might be in the form of a
centrally stored static inventory, or the use of a dynamic inventory).
The goal of any well-written Ansible playbook (or role) is that the results from running it
are repeatable and predictable. Take, for example, the playbook we ran at the end of the
previous section, where we were deploying a simple Apache vhost.conf file using a
playbook that we wrote. Every time you run this playbook on any server, the contents of
/etc/apache2/sites-available/my-vhost.conf will be the same, as the playbook
deploys this file using a template, and overwrites the target file if it exists.
This, of course, is but a microcosm of the standard operating environment, but such an
environment will be built up of hundreds—if not thousands—of these tiny building blocks.
After all, if you can't get your Apache configurations to be consistent across your
infrastructure, how can you be confident that any other parts of it have been built in
accordance with your standards?
The repeatable nature of well-written playbooks is important to mention here too—just
because you deployed a consistent Apache configuration doesn't mean it will remain
consistent. Five minutes after you deploy the configuration, someone with the required
privileges could log in to the server and change the configuration. Thus, your environment
could deviate from your SOE definition almost immediately. Running your Ansible
playbooks repeatedly across your infrastructure is actually an important part of your
ongoing processes, as the nature of these playbooks will be to bring the configuration back
into line with your original standards. Thus Ansible playbooks are a vital component of not
only defining and deploying your SOE but also in the ongoing enforcement of the
standards.
[ 56 ]
Automating Your IT Infrastructure with Ansible Chapter 2
No fixes should be manually deployed, if at all possible. Suppose someone manually
tweaks the configuration in /etc/apache2/sites-available/my-vhost.conf to
overcome an issue. This in itself is not a problem, but it is vital that these changes are
placed back into the playbook, role, or template. If deploying or enforcing your SOE
through Ansible somehow breaks it, then something is wrong with your processes.
Indeed, by implementing processes such as we have discussed so far, and will continue to
explore throughout this book, successful automation across an enterprise can be achieved.
The introduction to Ansible automation given in this chapter, while brief, serves as one part
of these suggested processes.
There is much more to learn about Ansible and, in short, I would like to propose a bold
statement: If you can conceive it as a server deployment or configuration task, Ansible can
help. Thanks to its open source nature, Ansible is very extensible, and its wide adoption
means that many of the common automation challenges have already been solved, and
relevant features included. It is hoped that this chapter has given you a head start on your
journey into Linux automation with Ansible.
Summary
Ansible is a robust, powerful, open source tool that, once you have mastered a few simple
concepts, can help you to achieve automation on a very large scale in your Linux
environment. Ansible is agentless, and so requires no configuration on Linux client
machines for you to begin your automation journey, and a robust community behind the
project means that easy answers are available to most of the challenges you may wish to
solve with it.
In this chapter, you learned the fundamentals of playbook structure and some of the key
files required to run a simple playbook. You learned about the importance of inventories
and how to use them, and how to efficiently reuse code with roles (and indeed, how to
leverage code from the community to save you time and effort). You learned about
variables and facts, and how to reference them in playbooks, and how to make use of Jinja2
templating to aid your automation journey. Throughout this journey, you built and ran a
number of complete playbooks, demonstrating the use of Ansible.
In the next chapter, you'll discover how to streamline infrastructure management, and
further refine your automation processes with AWX.
[ 57 ]
Automating Your IT Infrastructure with Ansible Chapter 2
Questions
1. What is Ansible, and how is it different from running a simple shell script?
2. What is an Ansible inventory?
3. Why is it generally beneficial to code your tasks into roles rather than single large
playbooks?
4. Which templating language does Ansible make use of?
5. Can you override variables in Ansible?
6. Why would you use the Ansible template module in place of a simple search and
replace operation?
7. How might you make use of Ansible facts to improve the flow of your playbook?
Further reading
For an in-depth understanding of Ansible and Jinja2 templating, please refer
to Mastering Ansible, Third Edition—James Freeman and Jesse Keating (https:/​/​www.
packtpub.​com/​gb/​virtualization-​and-​cloud/​mastering-​ansible-​third-
edition).
[ 58 ]
3
Streamlining Infrastructure
Management with AWX
As we have discussed so far in this book, effective enterprise automation on Linux involves
several key elements, including standardization of both tools and technologies, and
implementing processes and tools that make the management of the environment more
efficient. Ansible is a great first step in this journey and can be supplemented with a
complementary technology called AWX to further streamline its application.
AWX is, in short, a GUI-driven tool for the management of Ansible jobs. It does not replace
Ansible functionality, but rather adds to it by providing a multi-user GUI-driven frontend
that allows for the simple management and orchestration of playbooks. When managing
large Linux environments such as those in an enterprise, AWX is the perfect complement to
Ansible automation and is an important step in effective and efficient management. In this
chapter, we will cover the following topics:
Introduction to AWX
Installing AWX
Running your playbooks from AWX
Automating routine tasks with AWX
Streamlining Infrastructure Management with AWX Chapter 3
Technical requirements
This chapter includes examples based on the following technologies:
Ubuntu Server 18.04 LTS
CentOS 7.6
Ansible 2.8
To run through these examples, you will need access to a server or virtual machine running
one of the aforementioned operating systems and Ansible. Note that the examples given in
this chapter may be destructive in nature (for example, they involve installing Docker and
running services on the server) and, if run as is, are only intended to be run in an isolated
test environment.
Once you are satisfied that you have a safe environment to operate in, let's get started by
looking at the installation of new software packages with Ansible.
All example code discussed in this book is available from GitHub at: https:/​/​github.​com/
PacktPublishing/​Hands-​On-​Enterprise-​Automation-​on-​Linux.
Introduction to AWX
AWX sets out to solve the problems associated with Ansible automation in an enterprise
environment. To maintain our hands-on focus, let's consider the organic growth scenario
we discussed in Chapter 1, Building a Standard Operating Environment on Linux. In a small
environment where Ansible has been implemented, you might have just one or two key
people responsible for writing and running playbooks against the environment. In this
small scenario, it is reasonably easy to know who has run which playbooks and what the
latest versions are, and the training requirements for Ansible are low as only a small
number of key people are responsible for its use.
As the environment scales to enterprise sizing, so do the number of Ansible operators. If all
of those responsible for running Ansible have it installed on their own machines, and all
have local copies of the playbooks, suddenly the management of that environment becomes
a nightmare! How can you ensure that everyone is using the latest versions of the
playbooks? How do you know who ran what and what the outcome was? What if a change
needs to be run out of hours? Can you pass the Ansible job off to a Network Operations
Center (NOC) team, or is that not possible because they would need training on how to use
Ansible?
[ 60 ]
Streamlining Infrastructure Management with AWX Chapter 3
AWX sets out to address all of these challenges, as we shall see subsequently, starting in the
next section, where we look at how AWX can reduce your staff training costs.
AWX reduces training requirements
Ansible is very easy to get up and running. It still needs a little training, though. For
example, IT admins and operators who haven't received training may not be comfortable
with running a playbook on the command line. This is demonstrated in the following
example. Although fairly simple in Ansible terms, anyone unfamiliar with the tool will find
that it isn't very user-friendly:
$ ansible-playbook -i hosts --ask-pass simple.yml
Although it isn't a complex command, those unfamiliar with it might be reluctant to run it
for fear of causing damage to production systems, let alone interpret the pages of output
that a sizeable playbook can produce.
To alleviate this, AWX provides a web GUI-based interface that is quite literally point and
click. Although many advanced features can be used by those familiar with it, a playbook
can be run with literally a few clicks of the mouse, and the results are shown using a simple
traffic light system (red indicating that the playbook run failed, while green shows that it
passed). In this way, AWX provides an interface from which even those with no prior
Ansible experience can launch a playbook and pass the results on to another team for
analysis.
AWX offers benefits for security teams and managers too, by logging detailed results of all
actions and jobs performed, and we shall provide an overview of this in the next section.
AWX enables auditability
Although the Ansible command-line tools provide logging options, these are not enabled
by default and as a result, the run output of playbooks can be lost as soon as a terminal
session is closed. This is not great in an enterprise scenario, particularly when an issue or
outage occurs and a root cause analysis is required.
AWX addresses this in two ways. First of all, every user must log in to the GUI before any
actions can be performed. AWX can integrate with centralized accounting systems such as
LDAP or Active Directory, or users can be defined locally on the AWX host. All actions in
the UI are then tracked, and as such, it is possible to trace back playbook runs to specific
users and indeed configuration changes. In an enterprise environment, this level of
accountability and this kind of audit trail is a must-have.
[ 61 ]
Streamlining Infrastructure Management with AWX Chapter 3
Beyond this, AWX captures all of the output of every playbook run, along with key pieces
of information such as which inventory the playbook was run against, what variables were
passed to it (if any), and the date and time of the run. This means that if an issue occurs,
AWX can provide a complete audit trail to help you find out what happened and when.
Not only can AWX assist with auditing your automation, but it can also help with ensuring
version control of your playbooks, as we shall discuss in the next section.
AWX supports version control
In an enterprise scenario, individuals storing playbooks locally could be a problem waiting
to happen. For example, if user A updates a playbook with a critical fix, how do you ensure
that user B has access to that code? Ideally, the code should be stored in a version control
system (for example, GitHub) and the local copy updated for every single run.
Good processes are an important component of enterprise automation of Linux and while
user B should update their local playbooks before running them, you cannot enforce this.
Again, AWX addresses this issue by allowing playbooks to be sourced from a version
control repository, with the local copy of the playbooks on the AWX server being updated
automatically.
Although AWX can help you, especially when it comes to ensuring the
latest version of code has been pulled from the repository, it cannot help
with other errant behaviors such as someone not committing their code in
the first place. The intention, however, of enforcing the use of AWX for
Ansible playbook runs is that anyone who makes changes must commit
them for AWX to run them. Local access to the AWX server should be
tightly restricted to prevent people from making code changes on the local
filesystem, and in this way, you can have confidence that everyone is
actively and effectively using your version control system.
These updates can be event-driven so that, for example, local playbooks can be updated
every single time a playbook from that store is run. They can also be updated on a
scheduled basis or manually, as per the decisions of the AWX administrators.
AWX can help with the security of your automation too. We shall explore this in the next
section by looking at credential management in AWX.