### 6.4 SIP Message Manipulation

The censor can attempt to manipulate SIP messages. For instance, the censor can alter the IP address of the callee (i.e., the dummy host) in the OK message and check if any RTP/RTCP packets are sent to the user. This attack, similar to a packet-dropping attack, would render legitimate users unable to make or receive VoIP calls. To counteract this, the spoofer can compute a short keyed hash of the dummy host’s IP (and any other critical data) using the SRTP session key and embed this hash value into random identifiers (e.g., "To Tag") within the OK message. The user, who possesses the session key, can then use the embedded hash to verify the integrity of the dummy host’s IP. If the user detects that the OK message has been tampered with, they will terminate the SIP session by not sending an ACK response.

### 7. PROTOTYPE AND EVALUATION

In this section, we present the evaluation results. Refer to the Appendix for detailed information on our prototype implementation.

#### 7.1 Sketch of Prototype Implementation

The spoofer prototype consists of four main components: a SIP message handler, an RTP/RTCP transmitter, an upstream message receiver, and a prefetching proxy.

- **SIP Message Handler**: We used `tcpdump` to create user-agent profiles and `netfilter_queue` [19] to capture incoming INVITE messages.
- **RTP/RTCP Transmitter**: UDP raw sockets were employed to send RTP/RTCP packets, allowing us to insert arbitrary IP addresses into the source IP field of the IP header. We also implemented an XOR-based encoder/decoder to handle packet loss.
- **Upstream Message Receiver**: For the upstream channel, we used Gtalk, although our system is not dependent on encrypted indirect channels like Gtalk. We implemented a simple Gtalk client using the Python API `xmpppy` [21].
- **Prefetching Proxy**: To minimize the number of messages sent through the upstream channel, we developed a prefetching proxy. This proxy parses the HTML file to identify missing objects and fetches them on behalf of the client, so the client only needs to send a single HTTP request to the spoofer. Our implementation is based on the open-source layout engine `QtWebKit` [22].

For the client, we implemented a client-side HTTP proxy to handle HTTP requests made by the user's browser and HTTP responses received from the RTP channel. The proxy forwards only the first HTTP request to the spoofer via the Gtalk channel. We also developed a minimal browser application, which is essentially a wrapper around `QtWebPage`, to load webpages and provide statistical information for evaluation.

#### 7.2 Evaluation

##### 7.2.1 Performance Evaluation

The spoofer was deployed on an Emulab machine (located in Utah, U.S.), equipped with a 3.0 GHz 64-bit Dual Core CPU, 1 GB cache, and 2 GB of RAM, running Ubuntu 11.04. We deployed eight clients on PlanetLab, all located in China, and the dummy hosts in Illinois, U.S. To handle packet loss, the spoofer adds a redundant XOR packet for every 10 packets. We selected the most commonly used VoIP codecs (G.726-40, G.722-64, G.711, and iLBC) and set the corresponding RTP packet size and sending interval according to standard specifications [37]. Table 1 provides the bandwidth provided by each codec and the consumed bandwidth of the dummy host.

Each client was configured to repeatedly download the Wikipedia.org page (approximately 160 KB) 20 times. For each download, we measured the time to download only the HTML file and the entire page. We found that the clients could successfully download the Wikipedia.org page (which was blocked in China) using CensorSpoofer. The results are shown in Figures 3a and 3b. With the G.711 or G.722-64 codecs, the full page download time was 27 seconds, while the HTML file download time was only 6 seconds.

We also compared CensorSpoofer with existing circumvention systems. We installed a Tor client on one of the PlanetLab machines and connected it to a bridge in the U.S. to download the Wikipedia.org page 50 times. Additionally, we ran the same experiment using a public proxy of NetShade4 (a proxy-based circumvention and anonymity system) located in the U.S. Figures 3c and 3d show that CensorSpoofer took longer to download pages compared to the other two systems, as it reshapes downstream traffic into low-bandwidth VoIP traffic. However, its download time for small web contents, such as HTML files, is still acceptable.

We note that the performance of CensorSpoofer can be improved by addressing some limitations of our current implementation. For example, the current spoofer prototype does not start sending packets to the client until it has received the entire response. Removing these limitations could reduce the download time. Additionally, the main performance bottleneck is the RTP channel carrying voice data. Using a higher-bandwidth downstream channel, such as video streaming, could significantly improve performance.

##### 7.2.2 Measurement of Dummy-Host Selection

To evaluate the ease of finding dummy hosts, we implemented a port scanning algorithm (Algorithm 1 in Section 5.2.3) using `nmap` [17]. We considered China as the censored country and randomly selected 10,000 IPs (outside China) from the entire IP space, based on an IP-geolocation database [20]. We found 1,213 IPs (12.1%) that met our requirements, indicating a potentially large number of usable dummy hosts on the Internet.

Furthermore, we computed the percentage of appropriate dummy hosts for a specific client based on their predicted AS paths. We implemented a widely used AS path inference algorithm [55] based on AS relationships [43]. We considered the top four ASes in China in terms of the number of covered direct IPs (according to [30]) and selected a random IP (i.e., the client) from each AS. We randomly picked 225 dummy hosts out of the 1,213 candidate dummy hosts and computed the AS paths between them and the four clients. We then compared the output paths with the AS paths from the spoofer to the clients (computed using `traceroute`) and filtered the dummy hosts with inconsistent entry points. The results are shown in Table 2. We found that for a specific client, there are enough dummy hosts to use, especially for clients located in large ASes.

Finally, we measured the stability of dummy hosts over time. Ideally, the dummy host should remain "usable" (i.e., none of its VoIP ports become "closed" or "host seems down") during the circumvention session, so the user does not need to reinitialize the SIP session to change dummy hosts. To justify this, we randomly selected 100 dummy hosts and monitored their stability over a period of time. The results are shown in Figures 3e and 3f, indicating that many dummy hosts remain stable for extended periods.