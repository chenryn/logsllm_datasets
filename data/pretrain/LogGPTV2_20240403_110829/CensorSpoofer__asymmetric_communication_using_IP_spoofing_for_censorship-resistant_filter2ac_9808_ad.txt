RTCP packets sent to the callee (i.e., the dummy host).
However, since a normal VoIP client running the SRTP pro-
tocol can simply ﬁlter the invalid packets, such attacks can-
not help the censor detect if the callee is a real SIP client or
a dummy host.
6.4 SIP Message Manipulation
The censor can attempt to manipulate SIP messages. For
instance, the censor can manipulate the IP of the callee (i.e.,
the dummy host) in the OK message, and check if there
are any RTP/RTCP packets sent to the user. (Similar to
the packet-dropping attack, this attack will make legitimate
users unable to make and receive VoIP calls.) To resist this
attack, the spoofer can compute a short keyed hash of the
dummy host’s IP (and other important data if any) using
the SRTP session key, and put the hash value into some
random identiﬁers (e.g., “To Tag”) in the OK message. The
user who knows the session key can use the embedded hash
to verify the integrity of the dummy host’s IP. If the user
128Table 1: Bandwidths for diﬀerent VoIP codecs
Codec
G.711
G.722-64
G.726-40
iLBC
BW of downstream
Consumed BW of
channel (Kbps)
dummy host (Kbps)
64
64
40
15.6
87.2
87.2
54.7
26.6
detects the OK message is manipulated, he will abandon the
SIP session by not sending an ACK response.
7. PROTOTYPE AND EVALUATION
In this section, we report the evaluation results. Refer to
Appendix for details of our prototype implementation.
7.1 Sketch of Prototype Implementation
The spoofer prototype has four components: a SIP mes-
sage handler, a RTP/RTCP transmitter, an upstream mes-
sage receiver, and a prefetching proxy. For the SIP message
handler, we used tcpdump to create user-agent proﬁles, and
netfilter_queue [19] to capture incoming INVITE mes-
sages. We used UDP raw sockets to send RTP/RTCP pack-
ets. The raw socket allows us to put an arbitrary IP into
the source IP ﬁeld in the IP header. We implemented a
XOR-based encoder/decoder to handle packet loss. For this
prototype, we used Gtalk as the upstream channel, although
our system in no way depends on encrypted indirect chan-
nels like Gtalk. We implemented a simple Gtalk client using
a python API xmpppy [21]. For ordinary web browsing, a
user’s web browser sends separate HTTP requests for the
html ﬁle of the webpage as well as the objects embedded
in the webpage. To minimize the number of messages sent
through the upstream channel, we implemented a prefetch-
ing proxy for the spoofer, which can parse the html ﬁle to
ﬁgure out the missing objects and fetch these objects on be-
half of the client, so that the client only needs to send a
single HTTP request to the spoofer. Our implementation
of the prefetching proxy is based on an open-source layout
engine QtWebKit [22].
For the client, we implemented a client-side HTTP proxy
to handle HTTP requests made by the user’s browser and
HTTP responses received from the RTP channel. The proxy
only forwards the ﬁrst HTTP request to the spoofer via the
Gtalk channel. We implemented a minimal browser appli-
cation – simply a wrapper around QtWebPage – to load the
webpages and provide statistic information for evaluation.
7.2 Evaluation
7.2.1 Performance Evaluation
The spoofer was deployed on an Emulab machine (located
in Utah, U.S.), which has 3.0 GHz 64-bit Duel Core CPU
with 1 GB cache and 2 GB of RAM and runs Ubuntu 11.04.
We deployed 8 clients on Planetlab, which are all located
in China, and the dummy hosts are located in Illinois, U.S.
To handle packet loss, we made the spoofer add a redun-
dant XOR packet for every 10 packets. We chose the most
commonly used VoIP codecs G.726-40, G.722-64, G.711, and
iLBC, and set the corresponding RTP packet size and send-
ing interval according to the standard speciﬁcations in [37].
The bandwidth provided by each codec and the consumed
bandwidth of the dummy host are provided in Table 1.
Each client was conﬁgured to repeatedly download the
page of wikipedia.org (which is about 160 KB) for 20 times.
For each download, we measured the time to download only
the html ﬁle and the entire page, respectively. (Note that
once the html ﬁle is downloaded, the user’s web browser will
display the basic frame and the text of the webpage, and the
user can start reading the text-based content.) We found
that the clients were able to successfully download the page
of wikipedia.org (which was blocked in China) using Cen-
sorSpoofer. The results of downloading times are provided
in Figure 3a, 3b. We can see that with the codec G.711 or
G.722-64, the downloading time for the whole page was 27
seconds, but it only took 6 seconds to load the html ﬁle.
In addition, we compared CensorSpoofer with existing cir-
cumvention systems. We installed a Tor client on one of the
Planetlab machines, and made it connect to a bridge in
the U.S. to download the webpage of wikipedia.org for 50
times. Additionally, we ran the same experiment by making
the client connect to a public proxy of NetShade4 (a proxy-
based circumvention & anonymity system), which is located
in U.S. Figure 3c, 3d show that it did take longer time for
CensorSpoofer to download the pages than the other two
circumvention systems, because CensorSpoofer needs to re-
shape the downstream traﬃc into low-bandwidth VoIP traf-
ﬁc. However, its downloading time for small web contents,
such as html ﬁles, is still acceptable.
We note that the performance of CensorSpoofer can be im-
proved by ﬁxing some limitations of our current implemen-
tation. For example, our current prototype of the spoofer
does not start sending any packet to the client until it has
received the entire response. We believe removing these lim-
itations can reduce the downloading time.
We also notice that the main performance bottleneck of
CensorSpoofer is the RTP channel that carries the voice
data. We believe by using a higher-bandwidth downstream
channel, such as video streaming, the performance of Cen-
sorSpoofer can be much improved.
7.2.2 Measurement of Dummy-Host Selection
To evaluate the easiness of ﬁnding dummy hosts, we im-
plemented the port scanning algorithm (i.e., Algorithm 1 in
Section 5.2.3) using nmap [17]. We considered China as the
censored country. We randomly selected 10 000 IPs (out-
side China) from the entire IP space, according to an IP-
geolocation database [20]. We found 1213 IPs (12.1%) that
meet our requirements; this indicates that there are a poten-
tially large number of usable dummy hosts on the Internet.
Furthermore, we computed the percentage of appropriate
dummy hosts for a speciﬁc client based on their predicted
AS paths to the client. We implemented a widely used AS
path inference algorithm [55] that is based on AS relation-
ships [43]. We considered the top four ASes in China in
terms of the number of covered direct IPs (according to [30]),
and selected a random IP (i.e., the client) from each of the
ASes. We randomly picked 225 dummy hosts out of the
1213 candidate dummy hosts, and computed the AS paths
between them and the four clients. Then, we compared
the output paths with the AS paths from the spoofer to
the clients (computed using traceroute), and ﬁltered the
dummy hosts with inconsistent entry points. The results
are shown in Table 2. We can see that for a speciﬁc client,
there are enough dummy hosts to use, especially for the
clients located in large ASes.
4
http://www.raynersoftware.com/netshade/
1291
0.8
0.6
0.4
0.2
F
D
C
1
0.8
0.6
0.4
0.2
F
D
C
G.711/G.722−64
G.726−40
iLBC
30
40
10
0
0
Time to download the html file (sec)
(a) Download the html ﬁle
20
1
0.8
0.6
0.4
0.2
F
D
C
CensorSpoofer (G.711)
Proxy−based
Tor
0
0
Time to download the full page (sec)
20
40
60
1
0.8
0.6
0.4
0.2
F
D
C
G.711/G.722−64
G.726−40
iLBC
100
60
40
0
20
Time to download the full page (sec)
(b) Download the full page
120
80
CensorSpoofer (G.711)
Proxy−based
Tor
0
0
25
Time to download the html file (sec)
10
15
20
5
(c) Comparison: the html ﬁle
F
D
C
1
0.8
0.6
0.4
0.2
0
100
95
90
85
80
75
s
t
s
o
h
y
m
m
u
d
l
u
f
e
s
u
f
o
#
6
70
12/02
13/02
14/02
15/02
16/02
Time (dd/mm)
1
2
3
4
Length of staying usable (hour)
5
(d) Comparison: the full page
(e) Stability of dummy hosts over a
short period of time
(f) Stability of dummy hosts over a
long period of time
Figure 3: Evaluation (note that for (e) the CDF plot is truncated to max len stay usable = 6 hours, since many dummy hosts
stay usable for a very long time)
Table 2: Usable dummy hosts based on AS paths (Spoofer-ASN = 38)
DST-ASN % of direct IPs Entry-ASN # of usable dummy hosts % of usable dummy hosts
4134
4837
9394
4538
39.4%
19.8%
8.3%
7.1%
4134
4839
9394
23911
225
225
217
41
100%
100%
96.4%
18.2%
In addition, we measured the stability of dummy hosts
over time.
Ideally, the dummy host should stay “usable”
(i.e., none of its VoIP ports becomes “closed” or “host seems
down”) during the circumvention session, so that the user
does not need to re-initialize the SIP session to change dummy
hosts. To justify this, we randomly selected 100 dummy