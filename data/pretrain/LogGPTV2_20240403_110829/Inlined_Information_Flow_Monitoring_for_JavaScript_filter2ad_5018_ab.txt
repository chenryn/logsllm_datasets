### Debugging and Monitoring Support
The original design supports debugging of the monitor, the monitored program, and the policy. These objectives are aligned with two primary project goals: 
1. Evaluating the applicability and effectiveness of Non-Standard Unification (NSU) for web applications.
2. Investigating the practical performance of monitoring, hypothesizing that it can be achieved by leveraging off-the-shelf Just-In-Time (JIT) compilers.

### Contributions and Outline
The main contribution is an Information Flow Control (IFC) monitor inliner for almost full ECMAScript 5, including support for web APIs. We report on experiments with performance benchmarks and small, realistic mashups, for which we have developed sufficient API and library infrastructure. Our system, named JEST (JS with Embedded Security Tracking), is designed to meet these goals.

#### Section 2: Information Flow Issues in JavaScript
This section briefly highlights IFC issues in JavaScript, as most have been described in prior work.

#### Section 3: Design and Rationale
This section describes the design and rationale for monitored programs and the inliner. The inliner handles actual scripts found in web pages, managing the complexities of scripts embedded in HTML and providing support for tracking information flow across Document Object Model (DOM) operations. Although previous work has identified the main challenges of tracking information flows in JavaScript, we address them comprehensively. We argue why our design meets the stated goals.

#### Section 4: Experimental Results
This section presents experimental results using an entirely unmodified JavaScript engine. The inliner is written in Haskell, and its performance is not problematic. We evaluate the performance of monitored programs. Benchmarks designed to assess JIT compilation show slowdowns of up to 200×, depending on whether the inliner is configured to prioritize transparency. The results suggest that straightforward inlined monitoring with NSU can be competitive with modifying the JavaScript interpreter, but do not fully achieve our goal of JIT-friendliness. We observe that the monitor core benefits from JIT compilation, but the instrumentation added to the monitored program prevents JIT compilation in some cases.

The experiments also include case studies with mashups inspired by real-world applications, which have interesting IFC policies.

#### Section 5: Related Work
This section provides further discussion of related work on IFC for JavaScript.

#### Section 6: Future Prospects
This section concludes with a discussion of future prospects.

### JEST Software Distribution
The JEST software distribution includes infrastructure for further experimentation and other investigations of IFC in JavaScript, such as wrappers for DOM API and ECMAScript standard libraries, and auxiliary open-source libraries and programs. The source code of the inliner, supporting libraries, and mashup case studies are released under an open-source license [15]. Detailed technical documentation is available in [14].

### Practicality of IFC Monitors
In the near term, it is unlikely that any IFC monitor will have an acceptable cost/benefit ratio for general client-side use. Even for taint tracking, prior works report significant slowdowns. Code transformations to support "safe subsets" of JavaScript also result in substantial slowdowns. However, inlined monitoring can be practical for testing and security auditing, including forensics. In testing scenarios, significant performance degradation can be acceptable, facilitating the inference of upgrade annotations. IFC may also be practical for production use in security-sensitive mashups that do not require extensive client-side computation.

### JEST Support
JEST supports all of ECMAScript 5.1 non-strict mode, except the `with` statement. This version is widely used due to browser portability and performance. Support for `with` is possible if targeting a platform with an implementation of ECMAScript 6 Proxies. While this paper focuses on web applications, JavaScript is extensively used outside the browser context, such as in desktop and mobile environments, where IFC could also be beneficial.

### Information Flows in JavaScript
#### Policies and Example
We focus on policies in a simple, standard form. A policy consists of:
1. A fixed lattice of levels, where \( l \leq l' \) means information at level \( l \) is allowed to flow to \( l' \).
2. Fixed labels assigned to input and output channels, such as input forms and network connections. The policy ensures that inputs at level \( l \) may influence outputs at level \( l' \) only if \( l \leq l' \).

For example, consider a third-party payment processor scenario. A web store integrates payment processing at the client side to avoid dealing directly with PCI compliance. The merchant site should have no access to credit card details, and the payment processor should have no access to order contents. The merchant imposes a confidentiality policy using three security levels: M (merchant-private), P (processor-private), and ⊥ (public). The system allows specifying policies in a declarative language, and the policy writer can label URIs, DOM elements, and cookies.

#### Downgrading
Downgrading is necessary for practical requirements. For instance, individual purchase amounts are secret, but their total must be revealed to the payment processor. Prior works suggest specifying downgrading via code annotations. The semantics of downgrading is subtle but adequately addressed by prior work. In our system, downgrading policies can be specified using a declassification function.

#### IFC Challenges
JavaScript features pose challenges to precise tracking of information flows. These include:
- Heap locations and dynamic evaluation.
- Storage channels via object structure, arrays, DOM tree nodes, and lexical environments.
- Implicit flows via exceptions, storage channels via structure, and side effects in the standard library.

To maintain soundness, information flows through these APIs need to be accounted for.

### Monitor Design
#### Core Components and Design Principles
We focus on the core components and design principles, discussing how they support our goals. Soundness and transparency rely on the information-flow semantics, similar to prior work. Performance depends on the scope of program instrumentation and the efficiency of JIT-compiled code.

#### Additional Challenges Due to Inlining
Inlined monitors live alongside the monitored program, making them vulnerable to tampering. Protection is challenging since the monitored program needs access to the monitor. Discrepancies between browser implementations and implicit dependencies in ECMAScript and DOM further complicate the design. Addressing these challenges is possible with semantic mediation and API emulation.

#### Principal Design Choices
Our design choices include:
- **Boxes**: Boxes are objects with four fields: `v` for the value, `l` for the security label, `t` for the type tag, and `m` for metadata. Boxes simplify storage and reasoning about access, and allow for efficient execution in the JIT.
- **Dynamic Analysis**: Modern JIT compilers use dynamic analysis for optimizing code generation. The tracing method JIT compilation, used by V8 and SpiderMonkey, generates native code for function bodies on first invocation, supporting all JavaScript features but at the cost of suboptimal performance initially.

These design choices aim to balance soundness, transparency, and performance, addressing the unique challenges of inlined monitoring in JavaScript.