0x01：利⽤编辑器的超链接组件导致存储XSS
鄙⼈太菜了，没啥⾼质量的洞呀，随便⽔⼀篇⽂章吧。
在⽉⿊⻛⾼的夜晚，某骇客喊我起床挖洞，偷瞄了⼀下发现平台正好出活动了，想着⼩⽜试⼑吧
⾸先信息收集了⼀下，发现⼀个奇怪了域名引起了我的注意，访问后，发现是⼀个投稿平台，可以发布⽂章到后台
进⾏审核。
使⽤账户登录进系统，就能发现⼀处⽂章管理
第⼀时间就想到发布⽂章，再观察系统中发现⼀个不知名的编辑器（知道的⼤⽜可以说⼀下）存在 超链接 功能，
那么就尝试利⽤⼀下吧
在超链接中注⼊伪协议来构造xss
这⾥有个⼩细节就是下⽅的⼩按钮
1. 当处于开启状态时：触发超链接按钮后，⻚⾯会在新窗⼝中执⾏跳转操作
2. 当处于关闭状态时，触发超链接按钮后，⻚⾯会在当前⽹站中执⾏javascript操作
所以这⾥就需要关闭掉
发布⽂章后，可以看到在正⽂中成功触发javascript：
因为这⾥我是直接插⼊的超链接 ，所以⻚⾯中是处于纯⽩⾊状态。
0x02：⽂章正⽂处的存储XSS绕过
来到新建⽂章中就是上payload，鄙⼈很菜，挖XSS都是⻅框就X
在标题处和正⽂中输⼊payload点击提交，开启burpsuite抓包
可以看到运作过程是先进⾏前端HTML实体编码处理
这边只要重新替换掉payload就可以达到绕过的效果了
访问发布的⽂章⻚⾯后，成功触发XSS
⾄此，两个存储XSS提交上去，收⼯睡觉。
0x03：编辑器中的媒体组件导致存储XSS
经过上回的两个存储XSS，我觉得还没完，第⼆天继续看，果然功夫不负有⼼⼈
在测试编辑器的其他功能后，发现媒体功能插⼊的资源地址可以回显在⻚⾯
添加⽹络资源：
其过滤了很多了标签，事件，但并不妨碍我们通过burp进⾏FUZZ
选择嵌⼊式媒体，经过反复测试构造如下payload：
x">
提交⽂章后访问url 成功触发
0x04：编辑器中的媒体组件导致存储XSS（Bypass
前⾯的漏洞均已提交，过了⼏天就修复了，本来以为这样就结束了。然⽽事情并不如此
既然修复了，那么真男⼈就该尝试绕过，根据0x03的操作步骤重新打了⼀遍，发现其中的种种过滤问题。
1. 过滤了alert脚本函数
2. 过滤了不少js事件，但Onfinish事件没有过滤
标签也没有进⾏过滤
这个开发估计也是偷懒了，过滤做的拉胯的⼀批，那我们就对症下药，更换
最后也是如愿以偿的执⾏了：
因为业务线那边的修复状态原因，⽬前还不⽅便更新该站的绕过，只能⽌步
x">