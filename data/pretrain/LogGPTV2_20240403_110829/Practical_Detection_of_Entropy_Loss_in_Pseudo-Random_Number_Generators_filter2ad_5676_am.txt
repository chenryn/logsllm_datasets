Formally, we consider the security game PRES for a pseudo-random number generator with
input (setup, refresh, next), whose procedures are described in Figure 4.6.
The security game PRES is described as follow, with an adversary A and a sampler D:
1. The challenger generates an initial state S
$← {0, 1}n, a seed seed ← setup, and a bit
$← {0, 1} uniformly at random. It gives back the seed to the adversary;
b
2. The adversary A gets seed and can ask as many queries as it wants to the oracles D-refresh
but with chosen inputs I to the D-refresh-queries. The D-refresh procedure simply applies
the refresh algorithm to the current state and the input.
— 58 —
4.2. Recovering and Preserving Security
proc. D-refresh(I)
S = refresh(S, I)
proc. next-ror
(S(0), R(0)) ← next(S)
(S(1), R(1)) $← {0, 1}n+‘
RETURN (S(b), R(b))
proc. initialize(D)
seed $← setup;
$← {0, 1}n;
S
$← {0, 1};
b
OUTPUT seed
proc. ﬁnalize(b∗)
IF b = b∗ RETURN 1
ELSE RETURN 0
Figure 4.6 – Procedures in Security Game PRES
3. Eventually, the challenger sets (S(0), R(0)) ← next(S) and generates (S(1), R(1)) $← {0, 1}n+‘.
It then gives (S(b), R(b)) to the adversary;
4. The adversary A outputs a bit b∗.
The output of the game is the output of the ﬁnalize oracle at the end, which is 1 if the adversary
correctly guesses the challenge bit, and 0 otherwise. Note that the challenge concerns the total
output of the next algorithm. We deﬁne the advantage of the adversary A in the above game as
|2 Pr[b∗ = b] − 1|.
Deﬁnition 31 (Preserving Security). A pseudo-random number generator with input (setup,
refresh, next) is said (t, ε)-preserving if for any adversary A and sampler D, both running in
time t, the advantage of A in the game PRES is at most ε.
We now show that, taken together, recovering and preserving security notions imply the full
notion of robustness.
Theorem 9. If a pseudo-random number generator with input (setup, refresh, next) has both
(t, qr, γ∗, εr)-recovering security and (t, εp)-preserving security, then it is ((t0, qr, qn, qs), γ∗, qn(εr+
εp))-robust where t0 ≈ t.
Proof. We will refer to the adversary’s queries to next-ror oracle in the robustness game as “next
queries”. We assume that the adversary makes exactly qn of them. We say that a next query is
uncompromised if c ≥ γ∗ during the query, and we say it is compromised otherwise.
We prove the robustness of GEN by reduction (a) to its recovering security and (b) to its
preserving security.
We partition the uncompromised next queries into two subcategories: preserving and recovering.
We say that an uncompromised next query is preserving if c ≥ γ∗ throughout the entire period
between the previous next query (if there is one) and the current one. Otherwise, we say that
an uncompromised next query is recovering. With any recovering next query, we can associate a
corresponding most recent entropy drain (mRED) query which is the most recent query to either
get-state, or to set-state, or to a compromised next-ror that precedes the current next query. An
mRED query must set the cumulative entropy estimate to c = 0. Moreover, with any recovering
next query, we associate a corresponding sequence of recovering samples ¯I = (Ik+1, . . . , Ik+d)
which are output by all the calls to the D-refresh oracle that precede the recovering next query,
but follow the associated mRED query. It is easy to see that any such sequence of recovering
j=k+1 γj ≥ γ∗ where the jth call to D-refresh
samples ¯I must satisfy the entropy requirementsPk+d
oracle outputs (Ij, γj, zj).
We consider a hybrid sequence of security games, whose procedures are described in Figure 4.7:
— 59 —
Chapter 4. Robustness of Pseudo-random Number Generators with Inputs
G0 is the initial robustness game ROB, Gi, Gi+1/2 and Gi+1 are hybrid games, all derived from
the initial robustess game ROB, for i ∈ {0, . . . , qn − 1}.
Game G0. Game G0 is the initial real-or-random ROB security game as in Deﬁnition 29.
Games Gi and Gi+1. Games Gi and Gi+1 are modiﬁcations of game G0 that use procedures
described in Figure 4.7. Procedure initialize sets parameters as in G0 and a new parameter
ctr to 0. Procedures ﬁnalize, D-refresh, M-set-state, M-get-state are the same as in game G0.
Procedure next-ror is diﬀerent from game G0: ctr is incremented and for each uncompromised
next query, if ctr ≤ i (for Gi) or ctr ≤ i + 1 (for Gi+1), the challenger generates a random couple
(S1, R1) ∈ {0, 1}n+‘ and returns R1 to A.
If ctr > i (for Gi) or ctr > i + 1 (for Gi+1), the
challenger behaves as in game G0.
Game Gi+1/2. Game Gi+1/2 is a modiﬁcation of game Gi that uses procedures described in
Figure 4.7. Procedure initialize sets parameters as in Gi and a new Boolean parameter ns to true
(this parameter intends to capture the diﬀerences between recovering and preserving uncompro-
mised next queries). Procedures ﬁnalize and D-refresh are the same as for the previous games.
Procedures get-state and set-state are diﬀerent: the ﬂag ns is set to false in these procedures
(hence meaning that the next query is recovering). Finally procedure next-ror is also diﬀerent:
ctr is incremented, and for each uncompromised next query, if ctr ≤ i or ctr = i + 1 and ﬂag
ns = true, the challenger generates a random couple (S1, R1) ∈ {0, 1}n+‘ and returns R1 to A.
If ctr = i + 1 or ns = false, the challenger behaves as in game G0.
We make use of two technical propositions, that are stated below: in Proposition 2, we prove
that for all i ∈ {0, . . . , qn − 1}, | Pr[Gi = 1] − Pr[Gi+ 1
= 1]| ≤ εp, and in Proposition 3, we prove
that | Pr[Gi+ 1
Combining the two propositions, and using the hybrid argument, we get:
= 1] − Pr[Gi+1 = 1]| ≤ εr.
2
2
| Pr[G0 = 1] − Pr[Gqn) = 1]| ≤ qn(εr + εp).
Moreover Gqn is completely independent of the challenger bit b.
queries return a random R
Pr[Gqn = 1] = 1
original robustness game is:
In particular, all next-ror
$← {0, 1}‘ independent of the challenge bit b. Therefore, we have
2. Combining with the above, we see that the adversary’s advantage in the
(cid:12)(cid:12)(cid:12)(cid:12)Pr[G0 = 1] − 1
2
(cid:12)(cid:12)(cid:12)(cid:12) ≤ qn(εr + εp).
2
= 1]| ≤ εp.
Let us now prove Proposition 2 and Proposition 3.
Proposition 2. Assuming that the pseudo-random number generator with input has (t, εp)-
preserving security, then for any adversary/distinguisher A,D running in time t0 ≈ t, we have
| Pr[Gi = 1] − Pr[Gi+ 1
Proof. Fix adversary/sampler pair A,D running in time t0. Note that the two games above only
diﬀer in the special case where the (i + 1)th next query made by A is preserving. Therefore, we
can assume that A ensures this is always the case, as it can only maximize advantage.
We deﬁne an adversary A0 that has advantage εp in the preserving security game PRES. The
adversary A0 gets a value seed from its challenger and passes it to A. Then A0 begins running A
and simulating all of the oracles in the robustness security game. It chooses a random “challenge
$← {0, 1}. It simulates all oracle calls made by A until the (i + 1)th next query as in Gi.
bit” b
— 60 —
4.2. Recovering and Preserving Security
proc. get-state
c ← 0
OUTPUT S
proc. set-state(S∗)
c ← 0
S ← S∗
Game Gi
proc. get-state
c ← 0
ns ← false
OUTPUT S
proc. set-state(S∗)
c ← 0
S ← S∗
ns ← false
Game Gi+ 1
2
proc. get-state
c ← 0
OUTPUT S
proc. set-state(S∗)
c ← 0
S ← S∗
Game Gi+1
proc. next-ror
ctr ← ctr + 1
(S, R0) ← next(S)
IF c < γ∗,
c ← 0
RETURN R0
IF ctr ≤ i
ELSE
ELSE
$← {0, 1}‘
R1
RETURN Rb
proc. next-ror
ctr ← ctr + 1
(S, R0) ← next(S)
IF c < γ∗,
(S1, R1) $← {0, 1}n+‘
RETURN R1
c ← 0
RETURN R0
IF ctr ≤ i ∨ (ctr = i + 1 ∧ ns = true)
ELSE
(S1, R1) $← {0, 1}n+‘
RETURN R1
ELSE
$← {0, 1}‘
R1
RETURN Rb
proc. next-ror
ctr ← ctr + 1
(S, R0) ← next(S)
IF c < γ∗,
c ← 0
RETURN R0
IF ctr ≤ i + 1
ELSE
(S1, R1) $← {0, 1}n+‘
RETURN R1
ELSE
$← {0, 1}‘
R1
RETURN Rb
proc. D-refresh
(σ, I, γ, z) $← D(σ)
S ← refresh(S, I)
IF c < γ∗
c ← min(c + γ, n)
OUTPUT (γ, z)
proc. initialize(D)
seed $← setup;
σ ← 0;
S ← 0n;
c ← 0;
ctr ← 0;
$← {0, 1};
b
OUTPUT seed
proc. ﬁnalize(b∗)
IF b = b∗ RETURN 1
ELSE RETURN 0
proc. D-refresh
(σ, I, γ, z) $← D(σ)
S ← refresh(S, I)
IF c < γ∗
c ← min(c + γ, n)
OUTPUT (γ, z)
proc. D-refresh
(σ, I, γ, z) $← D(σ)
S ← refresh(S, I)
IF c < γ∗
c ← min(c + γ, n)
OUTPUT (γ, z)
proc. initialize(D)
seed $← setup;
σ ← 0;
S ← 0n;
c ← 0;
ns ← true ;
ctr ← 0;
$← {0, 1};
b
OUTPUT seed
proc. ﬁnalize(b∗)
IF b = b∗ RETURN 1
ELSE RETURN 0
proc. initialize(D)
seed $← setup;
σ ← 0;
S ← 0n;
c ← 0;
ctr ← 0;
$← {0, 1};
b
OUTPUT seed
proc. ﬁnalize(b∗)
IF b = b∗ RETURN 1
ELSE RETURN 0
Figure 4.7 – Reductions to Preserving and Recovering Security for ROB
— 61 —
Chapter 4. Robustness of Pseudo-random Number Generators with Inputs
In particular, it simulates calls to D-refresh using the code of the sampler D and updating its
state. Note that A0 has complete knowledge of the sampler state σ and the generator state S
at all times.
During the (i + 1)th next query made by A, the adversary A0 takes all the samples I1, . . . , Id
which were output by D in between the ith and (i + 1)th next query and gives these to its
challenger. It gets back a value (S∗, R0). If the (i + 1)th next query made by A is next-ror the
adversary A0 also chooses R1
$← {0, 1}‘ and gives Rb to A where b is challenge bit randomly
picked by A0. In either case, A0 sets the new generator state to S∗ and continues running the
game, simulating all future oracle calls made by A as in Gi. Finally, if A outputs the bit b∗, the
adversary A0 outputs the bit ˜b∗ which is set to 1 if b = b∗.
Notice that if the challenge bit of the challenger for A0 is ˜b = 0 then this exactly simulates Gi
for A and if the challenge bit is ˜b = 1 then this exactly simulates Gi+1. In particular, we can
think of the state immediately following the ith next query as being the challenger’s randomly
$← {0, 1}n, the state immediately preceding the (i + 1)th next query being Sd
chosen value S0
which refreshes S0 with the samples I1, . . . , Id, and the state immediately following the query