        _context.LoadFile(_path);
      public IntPtr LoadUnmanagedLibrary(string name)
      {
        throw new NotImplementedException();
      }
    }
ClientApp的示例代码使用了下面的依赖项和.NET名称空间：
依赖项
    NETStandard.Library
    Microsoft.CSharp
    Microsoft.Extensions.PlatformAbstractions
.NET名称空间
    Microsoft.CSharp.RuntimeBinder
    Microsoft.Extensions.PlatformExtensions
    System
    System.Reflection
    static System.Console
16.4.3 用反射API调用成员
接下来，使用反射API来调用Calculator实例的方法Add。首先，Calculator实例使用辅
助方法GetCalculator来检索。如果想添加对CalculatorLib的引用，可以使用new Calculator
创建一个实例。但这并不是那么容易。
使用反射调用方法的优点是，类型不需要在编译期间可用。只要把库复制到指定的目
录中，就可以在稍后添加它。为了使用反射调用成员，利用GetType方法检索实例的Type
对象——它是基类Object的方法。通过扩展方法GetMethod（这个方法在NuGet包
System.Reflection.TypeExtensions中定义）访问MethodInfo对象的Add方法。MethodInfo定
义了Invoke方法，使用任意数量的参数调用该方法。Invoke方法的第一个参数需要调用成
员的类型的实例。第二个参数是object[]类型，传递调用所需的所有参数。这里传递x和y
变量的值。如果使用旧版本的.NET 
Framework，没有类型扩展，调用方法的代码就显示
在注释中。这个代码不能用于.NET 
Core 
（代码文件DynamicSamples 
ClientApp 
/
Program.cs）：
    private static void ReflectionOld()
    {
      double x = 3;
      double y = 4;
      object calc = GetCalculator();
      // object result = calc.GetType().InvokeMember("Add",
      // BindingFlags.InvokeMethod, null, calc, new object[] { x, y });
      object result = calc.GetType().GetMethod("Add")
        .Invoke(calc, new object[] { x, y });
      WriteLine($"the result of {x} and {y} is {result}");
    }
运行该程序，调用计算器，结果写入控制台：
    The result of 3 and 4 is 7
动态调用成员有很多工作要做。下一节看看如何使用dynamic关键字。
16.4.4 使用动态类型调用成员
使用反射和dynamic关键字，从GetCalculator方法返回的对象分配给一个dynamic类型
的变量。该方法本身没有改变，它还返回一个对象。结果返回给一个dynamic类型的变
量。现在，调用Add方法，给它传递两个double值（代码文件DynamicSamples / ClientApp /
Program.cs）：
    private static void ReflectionNew()
    {
      double x = 3;
      double y = 4;
      dynamic calc = GetCalculator();
      double result = calc.Add(x, y);
      WriteLine($"the result of {x} and {y} is {result}");
    }
语法很简单，看起来像是用强类型访问方式调用一个方法。然而，Visual Studio没有
提供智能感知功能，因为可以立即在Visual Studio编辑器中看到编码，所以很容易出现拼
写错误。
也没有在编译时进行检查。调用Multiply方法时，编译器运行得很好。只需要记住，
定义了计算器的Add和Subtract方法。
    try
    {
      result = calc.Multiply(x, y);
    }
    catch (RuntimeBinderException ex)
    {
      WriteLine(ex);
    }
运行应用程序，调用Multiply方法，就会得到一个RuntimeBinderException异常：
    Microsoft.CSharp.RuntimeBinder.RuntimeBinderException:
    'CalculatorLib.Calculator' does not contain a definition for 'Multiply'
      at CallSite.Target(Closure , CallSite , Object , Double , Double )
      at CallSite.Target(Closure , CallSite , Object , Double , Double )
      at ClientApp.Program.ReflectionNew() in...
与以强类型方式访问对象相比，使用dynamic类型也有更多的开销。因此，这个关键
字只用于某些特定的情形，如反射。调用Type的InvokeMember方法没有进行编译器检
查，而是给成员名字传递一个字符串。使用dynamic类型的语法很简单，与在这样的场景
中使用反射API相比，有很大的优势。
dynamic类型还可以用于COM集成和脚本环境，详细讨论dynamic关键字后，会探讨
它。
16.5 dynamic类型
dynamic类型允许编写忽略编译期间的类型检查的代码。编译器假定，给dynamic类型
的对象定义的任何操作都是有效的。如果该操作无效，则在代码运行之前不会检测该错
误，如下面的示例所示：
    class Program
    {
      static void Main()
      {
        var staticPerson = new Person();
        dynamic dynamicPerson = new Person();
        staticPerson.GetFullName("John", "Smith");
        dynamicPerson.GetFullName("John", "Smith");
      }
    }
    class Person
    {
      public string FirstName { get; set; }
      public string LastName { get; set; }
      public string GetFullName() => $"{FirstName} {LastName}";
    }
这个示例没有编译，因为它调用了staticPerson.GetFullName（）方法。因为Person对
象上的方法不接受两个参数，所以编译器会提示出错。如果注释掉该行代码，这个示例就
会编译。如果执行它，就会发生一个运行错误。所抛出的异常是RuntimeBinderException
异常。RuntimeBinder对象会在运行时判断该调用，确定Person类是否支持被调用的方法。
这将在本章后面讨论。
与var关键字不同，定义为dynamic的对象可以在运行期间改变其类型。注意在使用var
关键字时，对象类型的确定会延迟。类型一旦确定，就不能改变。动态对象的类型可以改
变，而且可以改变多次，这不同于把对象的类型强制转换为另一种类型。在强制转换对象
的类型时，是用另一种兼容的类型创建一个新对象。例如，不能把int强制转换为Person对
象。在下面的示例中，如果对象是动态对象，就可以把它从int变成Person类型：
    dynamic dyn;
    dyn = 100;
    WriteLine(dyn.GetType());
    WriteLine(dyn);
    dyn = "This is a string";
    WriteLine(dyn.GetType());
    WriteLine(dyn);
    dyn = new Person() { FirstName = "Bugs", LastName = "Bunny" };
    WriteLine(dyn.GetType());
    WriteLine($"{dyn.FirstName} {dyn.LastName}");
执行这段代码可以看出，dyn对象的类型实际上从System.Int32变成System.String，再
变成Person。如果dyn声明为int或string，这段代码就不会编译。
  注意： 对于dynamic类型有两个限制。动态对象不支持扩展方法，匿名函数
（lambda表达式）也不能用作动态方法调用的参数，因此LINQ不能用于动态对象。大
多数LINQ调用都是扩展方法，而lambda表达式用作这些扩展方法的参数。
后台上的动态操作
在后台，这些是如何发生的？C#仍是一种静态的类型化语言，这一点没有改变。看
看使用dynamic类型生成的IL（中间语言）。
首先，看看下面的示例C#代码：
    using static System.Console;
    namespace DeCompileSample
    {
      class Program
      {
        static void Main()
        {
          StaticClass staticObject = new StaticClass();
          DynamicClass dynamicObject = new DynamicClass();
          WriteLine(staticObject.IntValue);
          WriteLine(dynamicObject.DynValue);
          ReadLine();
        }
      }
      class StaticClass
      {
        public int IntValue = 100;
      }
      class DynamicClass
      {
        public dynamic DynValue = 100;
      }
    }
其中有两个类StaticClass和DynamicClass。StaticClass类有一个返回int的字段。
DynamicClass有一个返回dynamic对象的字段。Main（）方法仅创建了这些对象，并输出
方法返回的值。该示例非常简单。
现在注释掉Main（）方法中对DynamicClass类的引用：
    static void Main()
    {
      StaticClass staticObject = new StaticClass();
      //DynamicClass dynamicObject = new DynamicClass();
      WriteLine(staticObject.IntValue);
      //WriteLine(dynamicObject.DynValue);
      ReadLine();
    }
使用ildasm工具，可以看到给Main（）方法生成的IL：
    .method private hidebysig static void Main() cil managed
    {
      .entrypoint
      // Code size       26 (0x1a)
      .maxstack 1
      .locals init ([0] class DecompileSample.StaticClass staticObject)
      IL_0000: nop
      IL_0001: newobj      instance void DecompileSample.StaticClass::.ctor()
      IL_0006: stloc.0
      IL_0007: ldloc.0
      IL_0008: ldfld       int32 DecompileSample.StaticClass::IntValue
      IL_000d: call        void [mscorlib]System.Console::WriteLine(int32)
      IL_0012: nop
      IL_0013: call        string [mscorlib]System.Console::ReadLine()
      IL_0018: pop
      IL_0019: ret
    } // end of method Program::Main
这里不讨论IL的细节，只看看这段代码，就可以看出其作用。第0001行调用了
StaticClass构造函数，第0008行调用了StaticClass类的IntValue字段。下一行输出了其值。
现在注释掉对StaticClass类的引用，取消DynamicClass引用的注释：
    public static void Main()
    {
      //StaticClass staticObject = new StaticClass();
      DynamicClass dynamicObject = new DynamicClass();
      WriteLine(staticObject.IntValue);
      //WriteLine(dynamicObject.DynValue);
      ReadLine();
    }
再次编译应用程序，下面是生成的IL：
    .method private hidebysig static void Main() cil managed
    {
      .entrypoint
      // Code size 123 (0x7b)
      .maxstack 9
      .locals init ([0] class DecompileSample.DynamicClass dynamicObject)
      IL_0000: nop
      IL_0001: newobj      instance void DecompileSample.DynamicClass::.ctor()
      IL_0006: stloc.0
      IL_0007: ldsfld      class
        [System.Core]System.Runtime.CompilerServices.CallSite`1
          >
            DecompileSample.Program/'<>o__0'::'<>p__0'
      IL_000c: brfalse.s   IL_0010
      IL_000e: br.s        IL_004f
      IL_0010: ldc.i4      0x100
      IL_0015: ldstr       "WriteLine"
      IL_001a: ldnull
      IL_001b: ldtoken     DecompileSample.Program
      IL_0020: call        class [mscorlib]System.Type
        [mscorlib]System.Type::GetTypeFromHandle(valuetype
        [mscorlib]System.RuntimeTypeHandle)
      IL_0025: ldc.i4.2
      IL_0026: newarr     [Microsoft.CSharp]Microsoft.CSharp.RuntimeBinder
        .CSharpArgumentInfo
      IL_002b: dup
      IL_002c: ldc.i4.0
      IL_002d: ldc.i4.s   33
      IL_002f: ldnull
      IL_0030: call       class [Microsoft.CSharp]Microsoft.CSharp.RuntimeBinder
        .CSharpArgumentInfo[Microsoft.CSharp]
        Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo::Create(
        valuetype Microsoft.CSharp]Microsoft.CSharp.RuntimeBinder
        .CSharpArgumentInfoFlags, string)
      IL_0035: stelem.ref
      IL_0036: dup
      IL_0037: ldc.i4.1
      IL_0038: ldc.i4.0
      IL_0039: ldnull
      IL_003a: call       class [Microsoft.CSharp]
        Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo
        [Microsoft.CSharp]Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo
          ::Create(valuetype [Microsoft.CSharp]
            Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags, string)
      IL_003f: stelem.ref
      IL_0040: call       class [System.Core]
        System.Runtime.CompilerServices.CallSiteBinder
        [Microsoft.CSharp]Microsoft.CSharp.RuntimeBinder.Binder::
          InvokeMember(valuetype[Microsoft.CSharp]
            Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, string,
            class [mscorlib]System.Collections.Generic.IEnumerable`1
        , class [mscorlib]System.Type,
        class [mscorlib]System.Collections.Generic.IEnumerable`1
        )
      IL_0045: call       class [System.Core]
        System.Runtime.CompilerServices.CallSite`1
          class [System.Core]System.Runtime.CompilerServices.CallSite`1
            >::
          Create(class [System.Core]
            System.Runtime.CompilerServices.CallSiteBinder)
      IL_004a: stsfld     class [System.Core]
        System.Runtime.CompilerServices.CallSite`1
          >
            DecompileSample.Program/'<>o__0'::'<>p__0'
      IL_004f: ldsfld     class
        [System.Core]System.Runtime.CompilerServices.CallSite`1>
            DecompileSample.Program/'<>o__0'::'<>p__0'
      IL_0054: ldfld      !0 class [System.Core]
        System.Runtime.CompilerServices.CallSite`1>::Target
      IL_0059: ldsfld     class [System.Core]
        System.Runtime.CompilerServices.CallSite`1<class [mscorlib]
          System.Action`3<class [System.Core]
            System.Runtime.CompilerServices.CallSite,