title:An Efficient Algorithm for the Transient Analysis of a Class of Deterministic
Stochastic Petri Nets
author:Marco Gribaudo and
Matteo Sereno
An Efﬁcient Algorithm for the Transient Analysis of a Class of Deterministic
Stochastic Petri Nets
Dipartimento di Informatica, Universit`a di Torino, Torino, Italia
M. Gribaudo and M. Sereno
Abstract
In this paper a new algorithm for the transient solution of
a sub-class of Deterministic Stochastic Petri Nets (DSPN) is
proposed. The technique can be applied to DSPNs compris-
ing only deterministic and immediate transitions and such
that in each tangible marking only one deterministic tran-
sition is enabled. The algorithm does not require any addi-
tional restriction on the deterministic transition delays that
can have any positive real value. Most of the optimized al-
gorithms presented in the literature are based on an efﬁ-
cient solution of the equations governing the stochastic pro-
cess associated with the DSPN; the new algorithm we pro-
pose is based on an efﬁcient combinatorial analysis of the
paths within the state space underlying the DSPN, instead.
1. Introduction
Stochastic Petri Nets (SPNs) represent a powerful for-
malism for modeling and evaluating systems exhibiting
concurrency, synchronization, and conﬂict. The ability to
model probabilistic behavior is essential in the ﬁeld of per-
formance and reliability evaluation. This need leads to var-
ious different variants of the SPN formalism. Deterministic
and Stochastic Petri Nets (DSPNs) introduced in [1] are a
stochastic formalism which include both exponentially and
deterministic delays. Under the restriction that in any mark-
ing of a DSPN at most one deterministic transition is en-
abled, highly efﬁcient numerical methods for steady state
analysis have been provided (see [8] and [5]). This restric-
tion has been removed in [10]. This paper proposes an efﬁ-
cient numerical method for steady state analysis of DSPNs
with concurrent deterministic transitions.
Previous work on transient analysis of DSPNs was always
based on the restriction that deterministic transitions are not
concurrently enabled. In [2] it has been show that, with this
restriction, the stochastic process underlying a DSPN is a
Markov regenerative stochastic process. Based on this re-
sult, a numerical method for the transient analysis of such
DSPN is proposed. The technique is based on a numerical
inversion of Laplace-Stiltjes transforms.
Numerical methods based on the method of supplementary
variables have been presented in [6]. Supplementary vari-
able approach methods require the numerical solution of
systems of partial differential equations.
The paper [9] introduces an efﬁcient method for transient
analysis od DSPNs without restrictions on the enabling of
deterministic transitions, i.e., the proposed technique allows
concurrent deterministic transitions. This paper introduces
a new algorithm for the transient solution of a sub-class of
DSPNs. The technique can be applied to DSPNs compris-
ing only deterministic and immediate transitions and such
that in each tangible marking only one deterministic transi-
tion is enabled (in the following we denote this sub-class of
DSPNs a D-DSPNs). Most of the transient algorithms pre-
sented in the literature are based on an efﬁcient solution of
the equations governing the stochastic process associated
with the D-DSPN; instead, the new algorithm we propose
is based on an efﬁcient combinatorial analysis of the paths
within the state space underlying the D-DSPN. The algo-
rithm we present in this paper does not require any addi-
tional restriction on the deterministic transition delays that
can have any positive real value.
For the transient solution of D-DSPNs we have differ-
ent possibilities. In particular, we can use the methods pro-
posed in [6] and implemented in TimeNet package [11].
With some additional restriction on the the deterministic
transition delays (i.e., all the transition delays have to be
equal) we can also use the results presented in [9] and im-
plemented in new version of the DSPNexpress package [8].
Solution algorithms for the class of D-DSPNs have also
been proposed in other works, for instance the paper [3]
proposed a technique that is able to derive the embedded
DTMC by determining a basic step of the transition delays.
By using a ﬁne step, arbitrary delays can be approximated,
but this increases the state space of the DTMC.
The algorithm that we propose in this paper does not re-
quire any additional restriction on the deterministic transi-
tion delays that thus can have any positive real value. An-
other interesting point of our transient solution algorithm is
that it can be easily extended to be used in case of D-DSPN
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:47:45 UTC from IEEE Xplore.  Restrictions apply. 
with inﬁnite state space.
The balance of this paper is outlined as follows. Sec-
tion 2 describes the transient solution algorithm. Section 3
presents two examples of application of this algorithm for
the evaluation of interesting models. Finally, Section 4 pro-
vides some concluding remarks.
2. The Transient Solution Algorithm
The D-DSPNs are DSPNs comprising only deterministic
and immediate transitions. We can handle all the features al-
lowed by the class of DSPNs (see [8] and [5] for details). We
also impose the classical restriction that is used for many
the solution algorithms for DSPNs, that is, in each tangi-
ble marking only one deterministic transition is enabled.
In this section we provide a description of the new tran-
sient solution algorithm. In particular,
(cid:0) in Section 2.1 we present some basic deﬁnitions that
will be used to describe the technique;
(cid:0) in Section 2.2 we provide a detailed description of the
proposed technique;
(cid:0) in Section 2.3 we illustrate the new transient solution
algorithm with a help of a simple D-DSPN;
(cid:0) in Section 2.4 we present a pseudo-code description of
our new technique and then we discuss some imple-
mentation issues.
2.1. Embedded Markov Chain
In order to describe the solution algorithm, we ﬁrst ob-
serve that the stochastic process underlying the D-DSPN
model is similar to an embedded Markov process, with a
deterministic, state dependent sojourn time, and time de-
pendent state jump probability. Since only deterministic
timed transition are involved, the sojourn time in a state
can be easily determined. In the following we denote by
(cid:0) (cid:0) the deterministic transition enabled in marking (cid:0).
Note that for some marking (cid:0) (cid:1)(cid:0) (cid:1), we may have that
(cid:0) (cid:0) (cid:0) (cid:0) (cid:1), since it can happen that both markings (cid:0) and
(cid:1) enable the same deterministic transition.
Let us denote by (cid:2) the tangible state space of the D-
DSPN. When timed transition (cid:0) (cid:0) ﬁres, the next marking
can either be tangible or vanishing. Due to the path of im-
mediate transitions that may follow the ﬁring of a determin-
istic one, different tangible marking can be reached from a
single tangible marking. This stochastic process can be de-
scribed by a matrix (cid:1) and a vector (cid:2). Matrix (cid:1) is the state
transition probability matrix of the stochastic process. The
size of this matrix is equal to the size of the tangible state
space of the D-DSPN. Each element (cid:1)(cid:0) (cid:1) represents the state
transition probability from state (cid:0) to state (cid:1) when tran-
sition (cid:0) (cid:0) ﬁres (obviously (cid:1) (cid:1)(cid:0) (cid:1) (cid:0) (cid:1)).
The vector (cid:2) accounts the sojourn time of the stochastic
process, i.e., (cid:2)(cid:0) is the ﬁring time of transition (cid:0) (cid:0).
The key point of the technique is that, since only deter-
ministic transitions are involved, it is possible to determine
the exact time at which the enabled transition will ﬁre. In
particular, we denote by (cid:3)(cid:2) the sequence of time instants
where at least a transition will ﬁre. We assume that:
(cid:3)(cid:2) (cid:0) (cid:2)(cid:4) and (cid:3)(cid:2) (cid:5) (cid:3)(cid:2)(cid:4)(cid:4) (cid:3)(cid:6) (cid:4) (cid:2)(cid:7)
(1)
In Section 2.2 we will see how to compute the sequence
(cid:3)(cid:2)(cid:4) (cid:6) (cid:0) (cid:2)(cid:4) (cid:1)(cid:4) (cid:7) (cid:7) (cid:7). In each state that has a probability greater
than zero, a timed transition is enabled (since we consider
only tangible states). Thus it may happen that more than a
single deterministic transition ﬁre exactly at the same time
instant (cid:3)(cid:2). We will see how to consider this possibility.
time (cid:3),
Let (cid:3)(cid:3)  be the probability vector at
the component (cid:8)(cid:0)(cid:3) 
being in marking (cid:0) at
ministic and immediate transitions are involved,
probability
two consecutive ﬁring instants (cid:3)(cid:2) and (cid:3)(cid:2)(cid:4). That
i.e.,
the probability of
time (cid:3). Since only deter-
the
between
is:
distribution
represents
does
not
change
(cid:3)(cid:3)  (cid:0) (cid:3)(cid:3) (cid:0)(cid:4) (cid:3)(cid:3)(cid:4) (cid:3) (cid:0) (cid:5) (cid:5)(cid:3)(cid:2)(cid:4) (cid:3)(cid:2)(cid:4)(cid:4)
The probability distribution at time (cid:3)(cid:2)(cid:4), will be com-
puted by summing to (cid:3)(cid:3)(cid:2) two terms, (cid:3)(cid:6) and
(cid:3) (cid:6), that is:
(cid:3)(cid:3)(cid:2)(cid:4) (cid:0) (cid:3)(cid:3)(cid:2)  (cid:3)(cid:6)   (cid:3) (cid:6)(cid:7)
(2)
In Section 2.2 we provide a method for computing these
probability increments (cid:3)(cid:6) and (cid:3) (cid:6). We must
separate the additive part from the subtractive part because
only the incoming probability into a state enables its asso-
ciated transition.
2.2. The solution algorithm
Let (cid:3)(cid:3)(cid:2) (with (cid:3)(cid:2) (cid:0) (cid:2)) be the initial state probabil-
ity distribution (which can be easily derived from the ini-
tial marking of the model).
To compute the transient distribution it is sufﬁcient to com-
pute the values (cid:3)(cid:2), (cid:3) (cid:6) (cid:3)(cid:6) for every (cid:6) (cid:9) (cid:2).
Let us denote by
(cid:2) (cid:2) (cid:0) (cid:7)(cid:1) (cid:7) (cid:8)(cid:1)(cid:3)(cid:2) (cid:9) (cid:2)(cid:8)
(3)
the set of markings that have a non-zero probability in the
initial state, and by
(cid:2) (cid:0) (cid:2)(cid:1) (cid:7) (cid:1) (cid:5) (cid:2) (cid:2) (cid:4)
(4)
the set of different delays of the deterministic transi-
tion that can be enabled in the possible initial mark-
ings. Since there can be deterministic transitions hav-
ing the same delay, it may happen that (cid:9)(cid:2) (cid:2)(cid:9) (cid:9) (cid:9)(cid:2)(cid:9).
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:47:45 UTC from IEEE Xplore.  Restrictions apply. 
In the following ﬁrst compute (cid:0)(cid:0), (cid:0) (cid:1), and (cid:0)(cid:1)
for every (cid:1) (cid:0) (cid:1)(cid:2)(cid:1) and then for (cid:1) (cid:2) (cid:1)(cid:2)(cid:1). In other
words, we ﬁrst describe the computation of
the (cid:0)(cid:0),
(cid:0) (cid:1), and (cid:0)(cid:1) starting from the initial mark-
ing, and later on we extend the procedure for the compu-
tation of these values for any marking that can be reached
from the initial marking.
(cid:0)(cid:0), (cid:0)(cid:1) and (cid:0) (cid:1)
for
Computation of
(cid:1) (cid:0) (cid:1)(cid:2)(cid:1).
We order
(cid:1) (cid:2) (cid:3)(cid:3) (cid:4) (cid:4) (cid:4) (cid:3) (cid:1)(cid:2)(cid:1) we have that (cid:5)(cid:2)
(cid:5)(cid:2)
(cid:0) (cid:3) (cid:5)(cid:2)
(cid:0)(cid:4) (cid:2) (cid:2)). We can derive that
the set (cid:2),
in this manner
(cid:0) (cid:6) (cid:5)(cid:2)
for any
(cid:0)(cid:4) (with
(cid:0)(cid:0) (cid:2) (cid:5)(cid:2)
(cid:0) (cid:3) (cid:3)(cid:1) (cid:2) (cid:3)(cid:3) (cid:4) (cid:4) (cid:4) (cid:3) (cid:1)(cid:2)(cid:1)(cid:4)
(5)
This simply means that all the deterministic transitions that
are enabled in the initial markings will ﬁre after their ﬁring
time.
Let us address the computation of (cid:0)(cid:1) and
(cid:0) (cid:1) for (cid:1) (cid:0) (cid:1)(cid:2)(cid:1). We can set (cid:0)(cid:1) (cid:2)
(cid:0) (cid:1) (cid:2) (cid:2), since at time (cid:0)(cid:2) (cid:2) (cid:4) we know the ini-
tial distribution and (cid:0)(cid:1) and (cid:0) (cid:1) have no mean-
ings.
Let denote by