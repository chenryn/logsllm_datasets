**作者：wzt  
原文链接：**
## **1.1** **进程栈、代码段地址随机化**
这里指的是进程的用户态栈，记住一个进程实际拥有两个栈，
一个用于跑用户态的代码，一个用于请求系统调用时在内核中使用的栈空间。在前面分析BSD进程随机化时，我们注意到bsd并没有给进程的用户态栈加入地址随机化，
XNU虽然继承了BSD进程模型，但作为一个商业操作系统没有栈的随机化功能显然是说不过去的， 自然给其进程加入了随机化功能。
    bsd/kern/mach_loader.c
    load_return_t
    load_machfile(
            struct image_params     *imgp,
            struct mach_header      *header,
            thread_t                thread,
            vm_map_t                *mapp,
            load_result_t           *result
    )
    {
            if (!(imgp->ip_flags & IMGPF_DISABLE_ASLR)) {
                    vm_map_get_max_aslr_slide_section(map, &aslr_section_offset, &aslr_section_size); [1]
                    aslr_section_offset = (random() % aslr_section_offset) * aslr_section_size;[2]
                    aslr_page_offset = random();[3]
                    aslr_page_offset %= vm_map_get_max_aslr_slide_pages(map);
                    aslr_page_offset cmdsize - sizeof(struct thread_command),
                                    &addr, &customstack, result);
            result->user_stack = addr;
            result->user_stack -= slide;
    }
load_threadstack选取了栈基地址，然后减去slide。Slide为上述的aslr_page_offset，但是它的使用还有个前提条件：
    static
    load_return_t
    parse_machfile(
            struct vnode            *vp,
            vm_map_t                map,
            thread_t                thread,
            struct mach_header      *header,
            off_t                   file_offset,
            off_t                   macho_size,
            int                     depth,
            int64_t                 aslr_offset,
            int64_t                 dyld_aslr_offset,
            load_result_t           *result,
            load_result_t           *binresult,
            struct image_params     *imgp
    )
    {
            int64_t                 slide = 0;
            if ((header->flags & MH_PIE) || is_dyld) {
                    slide = aslr_offset;
            }
    }
Slide初始化为0，只有当二进制为PIE编译或者为动态连接器才会被设置为aslr_offset，这样对于普通的二进制程序栈并没有地址随机化能力！
## **1.2** **mmap地址随机化**
XNU提供了posix标准的mmap函数，对于匿名映射的内存地址随机化是在mach层的vm_map_enter函数来设置的。
    osfmk/vm/vm_map.c
    kern_return_t
    vm_map_enter(
            vm_map_t                map,
            vm_map_offset_t         *address,       /* IN/OUT */
            vm_map_size_t           size,
            vm_map_offset_t         mask,
            int                     flags,
            vm_map_kernel_flags_t   vmk_flags,
            vm_tag_t                alias,
            vm_object_t             object,
            vm_object_offset_t      offset,
            boolean_t               needs_copy,
            vm_prot_t               cur_protection,
            vm_prot_t               max_protection,
            vm_inherit_t            inheritance)
    {
            boolean_t               random_address = ((flags & VM_FLAGS_RANDOM_ADDR) != 0);[1]
            if (anywhere) {
                    vm_map_lock(map);
                    map_locked = TRUE; 
                    if (entry_for_jit) {[2]
    #if CONFIG_EMBEDDED
                            if (map->jit_entry_exists) {
                                    result = KERN_INVALID_ARGUMENT;
                                    goto BailOut;
                            }
                            random_address = TRUE;
    #endif
                    }
                    if (random_address) {
                            result = vm_map_random_address_for_size(map, address, size); [3]
                            if (result != KERN_SUCCESS) {
                                    goto BailOut;
                            }
                            start = *address;
                    }
    }
对于主动提供了VM_FLAGS_RANDOM_ADDR标志或者在CONFIG_EMBEDDED下开启了jit
code条件下都会使用[3]处的vm_map_random_address_for_size函数选取一块包含了随机化范围的起始地址。
    #define MAX_TRIES_TO_GET_RANDOM_ADDRESS 1000
    kern_return_t
    vm_map_random_address_for_size(
            vm_map_t        map,
            vm_map_offset_t *address,
            vm_map_size_t   size)
    {
    addr_space_size = vm_map_max(map) - vm_map_min(map);[1]
            while (tries vme_next;
                            }
                            if (next_entry == vm_map_to_entry(map)) {
                                    hole_end = vm_map_max(map);
                            } else {
                                    hole_end = next_entry->vme_start;
                            }
                            vm_hole_size = hole_end - random_addr;
                            if (vm_hole_size >= size) {
                                    *address = random_addr;
                                    break;
                           }
                    }
                    tries++;
            } 
            if (tries == MAX_TRIES_TO_GET_RANDOM_ADDRESS) {
                    kr = KERN_NO_SPACE;
            }
            return kr;
    }
这个函数比较奇葩， 尝试循环1000次找到带有随机化范围的vm_map_entry，[1]处首先计算当前进程还剩的虚拟内存空间大小，
[2]处使用random函数产生了一个页面对齐的随机数，然后与addr_space_size取模，在64位下，addr_space_size的取值可能非常大，
所以xnu尝试最多1000次循环来找到一个合适的地址空间。使用这样的算法，offset的可控性很差，
还有可能因为随机数的问题导致整个mmap动作失败，我觉得后续xnu的内核工程师应该会改进这个算法。
* * *