# Toward Design Decisions to Enable Deployability: Empirical Study of Three Projects Reaching for the Continuous Delivery Holy Grail

**Authors:** Stephany Bellomo, Neil A. Ernst, Robert L. Nord, and Rick Kazman  
**Affiliation:** Software Engineering Institute, Carnegie Mellon University, Pittsburgh, PA, USA  
**Emails:** sbellomo@sei.cmu.edu, nernst@sei.cmu.edu, rnord@sei.cmu.edu, rkazman@sei.cmu.edu  
**Conference:** 2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks

## Abstract
There is growing interest in continuous delivery (CD) practices to enable rapid and reliable deployment. While these practices are important, we argue that architectural design decisions are equally crucial for projects aiming to achieve goals such as continuous integration (CI) builds, automated testing, and reduced deployment-cycle times. Architectural decisions that conflict with deployability goals can hinder a team's ability to reach the desired state of deployment and may result in significant technical debt. To explore this assertion, we interviewed three project teams striving to implement continuous delivery. In this paper, we summarize the deployability goals, architectural decisions, and deployability tactics collected from these interviews. We present our findings in the form of an initial hierarchical deployability tactic tree.

**Keywords:** deployability, continuous integration, continuous delivery, architecture tactics, test automation

## I. Introduction
There is substantial interest in practices for achieving continuous delivery and rapid, robust deployment [1], [2], [3]. However, we suggest that more than just practices need to be considered. The architecture of the target application can significantly contribute to or impede deployability goals. If teams fail to make the right architectural design decisions and trade-offs as they build and evolve the system, critical activities such as continuous build integration, automated test execution, and operational support can become challenging. For example, a tightly coupled component architecture can become a barrier to continuous integration (CI), as small changes may require a full system rebuild. This limits the number of builds possible in a day and, in some cases, makes a CI build unfeasible within a single day. Re-architecting to fix such problems can require significant work and, in some cases, can lead to technical debt [4], resulting in high expenditures of time, cost, and effort release after release.

Architecting for deployability benefits software developers who are increasingly called upon to support systems post-release. It also benefits those in operational and release engineering roles responsible for activities such as CI build tools/support, test automation infrastructure, and deployment automation. To explore our hypothesis that it is beneficial to consider deployability implications early in a development effort, we conducted interviews with three project teams practicing continuous integration and delivery. In this paper, we summarize these case study analysis results. The results are derived from responses to two overarching interview questions consistently asked in each interview:

- **IQ1:** What are the key goals driving your deployability efforts?
- **IQ2:** What are some examples of architectural decisions that have enabled these goals?

From the interview data, we summarized examples of deployability goals to gain a better understanding of the desired state each project aimed to achieve [5]. Additionally, we probed beyond goals to collect examples of architectural design decisions that the project teams felt enabled their deployability goals.

As we analyzed the results, we found that many of the design decisions made by the project teams were instances or variations of previously defined architecture tactics [6]. An architecture tactic is a design primitive that an architect can use to satisfy a quality attribute requirement. We claim that deployability can similarly be described and elaborated as a quality attribute. This requires an understanding of stakeholder goals, constraints, requirements (e.g., quality attribute scenarios [6]), and design decisions (e.g., architectural tactics).

The idea of deployability as a quality attribute is not new. Adams et al. explore the relationship between rapid deployment and quality [7], [8]. Bass et al. propose the use of operational scenarios focusing on cloud and dependability networking to more concretely define operational requirements and identify architecture-related design decisions [9]. Cukier shares a mixture of development and system operations as well as architectural patterns for cloud-based web applications [10]. Spinellis discusses infrastructure as code and the design implications of deployable systems [11] as well as tools and techniques for integrating development and operations [12]. Liu et al. suggest a framework for seamlessly integrating cloud-based application frameworks [13]. Schaefer et al. explore automation approaches to promote environment consistency and reduce manual work to enable CI [14]. Gohil et al. experiment with behavior-driven monitoring and how it can be adopted for infrastructure provisioning and deployment [15]. Work in this area is still in its early stages and continues to evolve.

In this paper, we summarize our findings from interviews conducted with three project teams and organizations. We summarize deployability goals, design decisions, and tactics elicited from these interviews. The deployability tactics we collected are summarized in a tactic tree. The deployability goals form the first level of the tree, while the set of deployability tactics forms the lower branches. The derived tactics tree contains new tactics as well as previously defined tactics that crosscut or are variations of existing tactics in quality attribute areas such as modifiability, testability, availability, and performance.

## II. Research Method Description
We conducted three interviews with technical leads and architects of projects that have deployability (or continuous delivery) as a major focus. To collect data, we asked each interviewee the questions listed above as IQ1 and IQ2. We probed for "incident descriptions" to gather concrete examples from which to derive results. Each interview was recorded, and raw examples were extracted from the transcripts. The results are summarized and presented in Section III.

### A. Project Profile
We interviewed technical leads and architects from three projects, referred to as Projects A, B, and C. These teams were from different organizations working on different types of software projects. The organization for Project A primarily develops federal business systems. The application Project A is currently building enables clients to buy and sell securities. The organization for Project B is an academic institution, and the application provides a heavily used virtual training environment with e-learning and virtual lab capabilities. The organization for Project C is a large software contractor building a sales portal for financial transactions. While Projects A and C both support financial applications, the project teams are from different organizations, and the capabilities provided by the applications are very different. We provide a high-level profile of some of the project characteristics in Table I.

| **Project** | **A** | **B** | **C** |
|-------------|-------|-------|-------|
| **Management Approach** | Agile/Scrum (last 2 years and traditional before that) | Water-Scrum-Fall | Agile/Scrum |
| **Size Metrics** | 1M SLOC | 3M SLOC, team size 6–8, 90,000 users | Team size 30 |
| **Years Operational** | 17 | 3+ | 2+ |
| **Release Cadence** | Client release every 2 months | Internal release every 2–3 weeks, external release needed | Internal release every 2–3 weeks, customer release every 2–3 months |
| **CI Cadence** | Daily CI build | Daily CI build | Daily CI build |

From Table I, we see that all three projects used some variant of an Agile/Scrum project management framework. The size and SLOC varied, but all were large projects. All systems have been in operational use for several years. All were releasing internally every two to three weeks for client feedback but were externally deploying only every two or three months. All projects practiced daily CI. More project details, such as brief architecture descriptions, languages, and so forth, are provided in Section III.

## III. Research Observations
In this section, we describe example deployability goals from Projects A, B, and C, followed by raw design-decision examples and tactics. We conclude the section with a first draft of an architecture tactics tree, which summarizes the examples provided in the interview data.

### A. Deployability Goals Summary (by Project)
Below, we summarize responses to IQ1: What are the key goals driving your deployability efforts? The interviewees were not familiar with the term "deployability goals," so we interchangeably used the term "continuous delivery goals" during the IQ1 data collection.

#### **Project A Goals:**
1. **Shorten Feedback Cycle Time and Integrate Frequently to Avoid Integration Problems**
2. **Enable Nightly Integration Builds with Successfully Run Automated Tests**
3. **Simplify Deployment and Minimize Deployment Time**

#### **Project B Goals:**
1. **Achieve Actual CI (Beyond Daily Integration)**

---

This structure and reorganization aim to make the text more coherent, professional, and easier to follow.