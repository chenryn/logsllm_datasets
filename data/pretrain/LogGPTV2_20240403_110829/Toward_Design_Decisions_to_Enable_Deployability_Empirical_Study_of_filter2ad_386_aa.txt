title:Toward Design Decisions to Enable Deployability: Empirical Study of
Three Projects Reaching for the Continuous Delivery Holy Grail
author:Stephany Bellomo and
Neil A. Ernst and
Robert L. Nord and
Rick Kazman
2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
Toward Design Decisions to Enable Deployability 
Empirical Study of Three Projects Reaching for the Continuous Delivery Holy Grail 
Stephany Bellomo, Neil Ernst, Robert Nord, and Rick Kazman 
Software Engineering Institute 
Carnegie Mellon University 
Pittsburgh, PA, USA 
sbellomo, nernst, rn, PI:EMAIL 
Abstract—There  is  growing  interest  in  continuous  delivery 
practices  to  enable  rapid  and  reliable  deployment.  While 
practices are important, we suggest architectural design decisions 
are  equally  important  for  projects  to  achieve  goals  such 
continuous integration (CI) build, automated testing and reduced 
deployment-cycle  time.  Architectural  design  decisions  that 
conflict with deployability goals can impede the team’s ability to 
achieve  the  desired  state  of  deployment  and  may  result  in 
substantial  technical  debt.  To  explore  this  assertion,  we 
interviewed three project teams striving to practicing continuous 
delivery.  In  this  paper,  we  summarize  examples  of  the 
deployability  goals  for  each  project  as  well  as  the  architectural 
decisions  that  they  have  made  to  enable  deployability.  We 
present 
the  deployability  goals,  design  decisions,  and 
deployability  tactics  collected  and  summarize  the  design  tactics 
derived from the interviews in the form of an initial draft version 
hierarchical deployability tactic tree. 
Keywords—deployability;  continuous  integration;  continuous 
delivery; architecture tactic; test automation 
I. 
INTRODUCTION 
There  is  substantial  interest  in  practices  for  achieving 
continuous  delivery  and  rapid,  robust  deployment  goals  [1], 
[2], [3]. However, we suggest there is a need to focus on more 
than  practices.  The  architecture  of  the  target  application  can 
also contribute to enabling or impeding deployability goals. If 
teams fail to make the right architecture design decisions and 
tradeoffs  as  they  build  and  evolve  the  system,  then  critical 
activities such as continuous build integration, automated test 
execution,  and  operational  support  can  become  difficult.  For 
example,  we  have  observed  cases  where  a  tightly  coupled 
component  architecture  becameme  a  barrier  to  continuous 
integration (CI) because small changes required a rebuild of the 
entire  system.  This  limits  the  number  of  builds  possible  in  a 
day  and,  in  some  cases,  a  CI  build  is  not  even  possible  in  a 
single  day.  Re-architecting  to  fix  problems  such  as  these  can 
require  significant  work  and  in  some  cases  these  types  of 
problems can become a form of technical debt [4], resulting in 
high expenditures of time, cost, and effort release after release.  
Architecting for deployability benefits software developers 
who  are  increasingly  called  upon  to  support  systems  post 
release,  but  I  also  benefits  those  in  operational  and  release 
engineering roles responsible for the activities described above 
(e.g.,  CI  build  tools/support,  test  automation  infrastructure, 
deployment  automation).  To  explore  our  hypothesis  that  it  is 
beneficial 
to  consider  deployability  architectural  design 
implications  early  in  a  development  effort,  we  conducted 
interviews  with  three  project  teams  practicing  continuous 
integration and delivery. In this paper, we summarize these as 
case  study  analysis  results.  The  results  we  present  here  are 
derived from responses to two overarching interview questions 
consistently asked in each interview: 
x 
x 
IQ1: What are the key goals driving your deployability 
efforts? 
IQ2: What are some examples of architecture decisions 
that have enabled these goals? 
From  the  interview  data,  we  summarized  examples  of 
deployability goals to gain a better understanding of the desired 
state that each project aimed to achieve (as described in [5]). In 
addition,  we  probed  beyond  goals  to  collect  examples  of 
architectural  design  decisions  that  the  project  teams  felt 
enabled achievement of their deployability goals.  
As  we  analyzed  the  results,  we  found  that  many  of  the 
design  decisions  the  project  teams  made  were  instances  or 
variations  of  previously  defined  architecture  tactics[6].  An 
architecture  tactic  is  a  design  primitive  that  an  architect  can 
use  to  satisfy  a  quality  attribute  requirement.  We  claim  that 
deployability  can  similarly  be  described  and  elaborated  as  a 
quality  attribute.  Doing  this  requires  an  understanding  of 
stakeholder  goals,  constraints,  requirements  (e.g.,  quality 
attribute scenarios [6]), and design decisions (e.g., architectural 
tactics).  
The idea of deployability as a quality attribute is not new. 
A  brief  description  of  deployability  as  a  quality  attribute  is 
presented in [6]. Adams et al. explore the relationship between 
rapid deployment and quality [7], [8]. Bass et al. propose use 
of  operational  scenarios  focusing  on  cloud  and  dependability 
networking to more concretely define operational requirements 
and  identify  architecture-related  design  decisions  [9].  Cukier 
shares a mixture of development and system operations as well 
as architectural patterns for cloud-based web applications [10]. 
Spinellis 
infrastructure  as  code  and  design 
implications  of  deployable  systems  [11]  as  well  as  tools  and 
techniques  for  integrating  development  and  operations  [12]. 
Liu  et  al.  suggest  a  framework  for  integrating  cloud-based 
application 
frameworks 
seamlessly [13]. Schaefer et al. explore automation approaches 
to promote environment consistency and reduce manual work 
to enable CI [14]. Gohil et al. experiment with behavior-driven 
monitoring  and  how  it  can  be  adopted  for  infrastructure 
provisioning and deployment [15]. Work in this area is still in 
the early stages and continues to evolve. 
development 
production 
In this paper, we summarize our findings from interviews 
from  different 
three  project 
conducted  with 
looks  at 
teams 
and 
978-1-4799-2233-8/14 $31.00 © 2014 IEEE
DOI 10.1109/DSN.2014.104
702
organizations.  We  summarize  deployability  goals,  design 
decisions, and tactics that we elicited. The deployability tactics 
we collected are summarized in a tactic tree. The deployability 
goals that we collected through interviews form the first level 
of  the  tree.  The  set  of  deployability  tactics  that  we  collected 
through  interviews  form  the  lower  branches.  The  derived 
tactics tree contains new tactics as well as previously defined 
tactics  that  crosscut  (or  are  variations  of)  existing  tactics  in 
quality  attribute  areas  such  as  modifiability, 
testability, 
availability, and performance.  
II.  RESEARCH METHOD DESCRIPTION 
We  conducted  three  interviews  with  technical  leads  and 
architects  of  projects  that  have  deployability  (or  continuous 
delivery)  as  a  major  focus.  To  collect  data,  we  asked  each 
interviewee  the  questions  listed  above  as  IQ1  and  IQ2.  We 
probed  for  “incident  descriptions”  that  allowed  us  to  collect 
concrete examples from which to derive results. We recorded 
each interview and extracted raw examples from the recorded 
transcripts  .  The    results  are  summarized  and  presented  in 
Section III.  
A.  Project Profile 
We  interviewed  technical  leads  and  architects  from  three 
projects, which we will refer to as Projects A, B, and C. These 
teams  were  from  three  different  organizations  working  on 
different  types  of  software  projects.  The  organization  for 
Project  A  primarily  develops  federal  business  systems.  The 
application  Project  A  is  currently  building  enables  clients  to 
buy  and  sell  securities.  The  organization  for  Project  B  is  an 
academic  institution  and  the  application  provides  a  heavily 
used  virtual  training  environment  with  e-learning  and  virtual 
lab capability. The organization for Project C a large software 
contractor  building  a  sales  portal  for  financial  transactions. 
While  A  and  C  coincidentally  support  financial  applications, 
the  project  teams  are  from  different  organizations  and  the 
capabilities  the  applications  provide  are  very  different  from 
each  other.  We  provide  a  high-level  profile  of  some  of  the 
project characteristics in Table I. 
From  Table  I  we  see  that  all  three  projects  used  some 
variant  of  an  Agile/Scrum  project  management  framework. 
The size and SLOC varied, but all were large projects. All of 
TABLE I.  
PROJECT PROFILE 
Pro-
ject  
A 
B 
C 
Management 
Approach 
Size 
Metrics 
Years 
Opera-
tional 
17  
1M SLOC 
Agile/Scrum 
(last  2  years 
and  traditional 
before that) 
Water-Scrum-
Fall 
3+  
3M  SLOC, 
team  size 
6–8, 
90,000 
users 
Agile/Scrum 
Team 
size 30  
2+  
Release 
Cadence 
CI 
Cadence 
2 
(not 
Client  release 
available 
every 
months 
all accept it) 
Internal 
release  every 
2–3  weeks, 
external 
release 
needed 
Internal 
release  every 
2–3  weeks, 
customer 
release  every 
2–3 months 
as 
Daily  CI 
build 
Daily  CI 
build 
Daily  CI 
build 
703
the systems have been in  operational use for several years. All 
were  releasing  internally  every  two  to  three  weeks  for  client 
feedback but were externally deploying only every two or three 
months.  All  projects  practiced  daily  CI.  More  project  details, 
such as brief architecture description, languages, and so forth, 
are provided in Section III. 
III.  RESEARCH OBSERVATIONS 
In  this  section,  we  describe  example  deployability  goals 
from  Projects  A,  B,  and  C  followed  by  raw  design-decision 
examples and tactics. We conclude the section with a first draft 
of an architecture tactics tree which summarizes the examples 
provided in the interview data. 
A.  Deployability Goals Summary (by Project) 
the 
Below we summarize responses to IQ1: What are the key 
goals driving your deployability efforts? The interviewees were 
term  deployability  goals,  so  we 
not  familiar  with 
interchangeably used the term continuous delivery goals during 
the IQ1 data collection. 
Project A Goals: 
Goal 1:  Shorten feedback cycle time and integrate frequently 
to avoid integration problems 
Goal 2:  Enable nightly integration builds with successfully 
run automated tests 
Goal 3:  Simplify deployment and minimize deployment time 
Project B Goals: 
Goal 1:  Achieve actual CI (beyond daily integration) 