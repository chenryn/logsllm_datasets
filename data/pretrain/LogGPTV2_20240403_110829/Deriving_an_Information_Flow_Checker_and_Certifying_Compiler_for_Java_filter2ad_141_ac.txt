[x := e]n
[x := e.f]n
[e.f := e]n
[throw e]n
c1; c2
[if e then c1 else c2]n
[while e do c1]n
[try c1 catch(X x) c2]n
[return e]n
init(c)
n
n
n
n
init(c1)
n
n
init(c1)
n
f inal(c)
{n}
{n}
{n}
∅
f inal(c2)
f inal(c1) ∪ f inal(c2)
{n}
f inal(c1) ∪ f inal(c2)
{n}
except(c)
∅
{n}
{n}
{n}
except(c1) ∪ except(c2)
except(c1) ∪ except(c2)
except(c1)
except(c2)
∅
c
[x := e]n
[x := e.f]n
[e.f := e]n
[throw e]n
c1; c2
[try c1 catch(X x) c2]n
[if e then c1 else c2]n
[while e do c1]n
[return e]n
f low(c)
∅
∅
∅
∅
f low(c1) ∪ f low(c2) ∪ {(n, init(c2)) | n ∈ f inal(c1)}
f low(c1) ∪ f low(c2) ∪ {(n
f low(c1) ∪ f low(c2) ∪ {(n, init(c1)), (n, init(c2))}
f low(c1) ∪ {(n, init(c1))} ∪ {(p, n) | p ∈ f inal(c1)}
∅
, n) | n
(cid:2)
(cid:2) ∈ except(c1)} ∪ {(n, init(c2))}
Figure 3. Forward ﬂows.
then LL(cid:3) is {2}.
Deﬁnition 2 (inner-most handler) Consider
an
exception-throwing command [c]n in program SP . Then
an inner-most handler decomposition of [c]n consists of con-
texts C1[−], C2[−], command c
(cid:2), and label t such that
SP ≡ C1[[try C2[[c]n] catch (X x) c
(cid:2)]t]
and C2[−] does not have a try-catch that encloses [c]n in its try
(cid:2) is the
part. We say that t is the inner-most handler of n and c
handler for c.
For any [c]n, either there is no handler for exceptions thrown
by c, or there is a unique inner-most handler decomposition.
Deﬁnition 3 (handler function) We deﬁne a func-
tion sHandler as follows: for label n it returns the label
of the inner-most handler of n, if there is one; other-
wise sHandler(n) is undeﬁned, denoted sHandler(n) ↑.
Example 4.1 (inner-most handler) In the program be-
low, sHandler(n) = t.
Any program that has high uncaught exceptions is re-
jected by our rules. Of course this would be reﬁned with
the inclusion of methods: uncaught exceptions are then al-
lowed but bounded by the method signature.
Control dependence regions. Control dependence regions are
used by the intermediate type system to impose constraints
on commands depending on branching instructions, just as
they are in the target system (Section 6). For example, in
the high level type system, if the expression e in command
(cid:2) can
[if e then c else c
only assign variables of level at least k. The intermediate
system expresses this constraint by E = liftk(E, sregion(n)),
which means that every command in the region of n (includ-
ing commands in branches depending on exceptions) has se-
curity level at least k.
(cid:2)]n is typable as (cid:3) e : k then c and c
Deﬁnition 4 (sregion and ) The region of a labeled com-
mand [c]n in source program SP with n ∈ LL(cid:3) is written
(cid:2) such that
sregion(n) and deﬁned to be the set of all labels n
n  n
(cid:2). Here  is deﬁned inductively as follows.
[try ([try [c]n catch (X x) c
(cid:2)]t) catch (X y) c
(cid:2)(cid:2)]n(cid:2)
; [return e]n(cid:2)(cid:2)
[c]n
– If
sHandler(n) ↑ and n (cid:13)→+ n
is an exception-throwing
(cid:2) then n  n
(cid:2).
command with
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 05:58:21 UTC from IEEE Xplore.  Restrictions apply. 
Assign
(cid:3) e : k
k (cid:6) E(n) ≤ Γ(x)
(cid:3) [x := e]n : E
Seq(cid:3) c : E
(cid:2) : E
(cid:3) c
(cid:2) : E
(cid:3) c ; c
While
(cid:3) e : k
(cid:3) c : E
(cid:3) [while e do c]n : E
E = liftk(E, sregion(n))
Cond(cid:3) e : k
(cid:3) c : E
(cid:3) c
(cid:2) : E
(cid:3) [if e then c else c
E = liftk(E, sregion(n))
(cid:2)]n : E
Assign2
(cid:3) e : k
E(n) (cid:6) ﬁeldlevel(f) ≤ Γ(x)
k ≤ ﬁeldlevel(f)
(cid:3) [x := e.f]n : E
E = liftk(E, sregion(n))
sHandler(n) ↑⇒ E(n) (cid:6) k = L
Update
(cid:3) e : k
(cid:3) e
(cid:2) : k
(cid:2)
k (cid:6) k
(cid:2) (cid:6) E(n) ≤ ﬁeldlevel(f)
(cid:3) [e.f := e
E = liftk(E, sregion(n))
(cid:2)]n : E
sHandler(n) ↑⇒ E(n) (cid:6) k = L
Catch
(cid:3) c : E
(cid:3) c
(cid:2) : E
(cid:3) [try c catch (X x) c
E(n) ≤ Γ(x)
(cid:2)]n : E
Return
(cid:3) e : k
E(n) (cid:6) k = L
(cid:3) [return e]n : E
Throw(cid:3) e : k
sHandler(n) ↑⇒ E(n) (cid:6) k = L
sHandler(n) = n
(cid:2) ⇒ k ≤ E(n
(cid:2))
(cid:3) [throw e]n : E
Figure 4. Intermediate typing rules for high-level language commands.
– If [c]n is an exception-throwing command with an inner-
most handler decomposition
C1[[try C2[[c]n] catch (X x) c
(cid:2)]t]
(cid:2) ∈ labels(C2[[c]n]) then n  n
(cid:2)) ∪ {t} then n  d.
then there are two sub-cases:
(1) if n (cid:13)→+ n
(cid:2), n
(2) if d ∈ labels(c
– If [c]n is of the form [if e then c1 else c2]n and d ∈
labels(c1) ∪ labels(c2) then n  d.
– If [c]n is of the form [while e do c1]n and d ∈ labels(c1)
then n  d.
– If n  d and d  d
(cid:2) then n  d
(cid:2).
(cid:2);
Note that any label in the region of an exception-throwing
command is either inside the try part of the inner-most han-
dler, or is a successor of the code in the catch part.
5. Connecting the high level and interme-
diate type systems
This section shows that if labeled source program SP is
typable in the high level system then it is typable in the in-
termediate system as well. (We apply the high level typ-
ing system to labeled commands, by simply ignoring the la-
bels.) In order to do this, we ﬁrst show how a security envi-
ronment E for SP can be obtained from the typing deriva-
tion in the high level system.
Let D be a typing derivation for SP in the high level
type system. For each constituent c of SP there is an in-
stance of an introduction rule with conclusion (cid:3) c : k, k
(cid:2) for
(cid:2) (as opposed to uses of the subsumption rule). In
some k, k
(cid:2) of c is given by its intro judge-
this case we say the type k, k
ment and write D ::(cid:3) c : k, k
(cid:2) are ir-
(cid:2). When the types k, k
relevant, we use D ::(cid:3) c to mean that SP is typable with
derivation tree D and c occurs in SP .
The intro judgement for a subcommand reﬂects the es-
sential constraints for security of this command in its con-
text. Subsumption serves to weaken typing information,
e.g., to match the two branches of a conditional in high
level rule Cond, but it loses precision. So we deﬁne the se-
curity environment E in terms of intro judgements.
Deﬁnition 5 (environment E from high level typing)
Let D be a typing derivation for a source program SP in
the high level type system. Deﬁne security environment
E : labels(SP ) → S as follows:
• If n belongs to some region of a branching label n
(cid:2) in SP such that the intro judgement for c
(cid:2) of a com-
(cid:2) types
mand c
it with write eﬀect or exception eﬀect H, then E(n) is de-
ﬁned as the write level of the intro judgement for [c]n in
D. That is, if D ::(cid:3) c : k, k
(cid:2) then E(n) = k.
• If n does not belong to any high region in SP , then
E(n) = L.
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 05:58:21 UTC from IEEE Xplore.  Restrictions apply. 
Example 5.1 (obtaining E from D) Let the source code
c be
[if yH = 0 then [yH := xL]6 else [yH := 1]9 ]4; [new C.fL := 3]12
(Labels are chosen for compilation compatibility, as will be
deﬁned in later sections) Let Γ(xL) = L, Γ(yH) = H and
ﬁeldlevel(fL) = L. The type for c is L, L. The derivation tree
in the high level system shown in Fig. 5.1. The security envi-
ronment is E(4) = H, E(6) = H, E(9) = H, and E(12) = L.
The following lemma states a relation between types of
commands in the high level type systems and regions.
: k
(cid:2)]n(cid:2)
(cid:2)
1, k
(cid:2) ∈ sregion(n) and let D ::(cid:3) [c
Lemma 5.1 Let [c]n be an exception-throwing command.
(cid:2)
Let n
2 be the in-
(cid:2) in derivation D of a program P and
tro judgement for n
let D ::(cid:3) [c]n : k1, k2 be the intro judgement for [c]n. Then
k2 ≤ k
(cid:2)
1.
Lemma 5.2 (exception eﬀect and region) Let c be an
exception-throwing command. Let D ::(cid:3) [c]n : k, k
(cid:2) (ty-
pable according to the corresponding intro judgement for c)
and E be the security environment derived from D then E =
liftk(cid:2)(E, sregion(n)).
Now we can prove, by induction on the structure of
source commands, that every program typable in the high
level system is also typable in the intermediate system.
Theorem 5.3 If D ::(cid:3) c then (cid:3) c : E, where E is obtained
from D by Deﬁnition 5.
Example 5.2 (Preservation of types) Recall command
c of Example 5.1, its type derivation and its derived E. Ac-
cording to Deﬁnition 4, sregion(4) = {6, 9}. The derivation
tree using the intermediate type system and E from Exam-
ple 5.1 is given in Figure 5.2. It is easy to see that constraint
E = liftH(E, sregion(4)) is satisﬁed since E(6) = H and
E(9) = H. The constraint E = liftL(E, sregion(12)) holds
trivially since 12 has no successors, and thus its region is
empty.
6. Target language: type system and com-
pilation
The type system for the target language is compatible
with bytecode veriﬁcation and is adapted from [7]. Whereas
the system in [7] speciﬁes an algorithm for ﬁnding a secu-
rity environment, ours simply works with a ﬁxed security
environment for bytecode which we derive from the source
code type environment.
The instruction set we consider is a subset of the Java
Virtual Machine and is given below. As in the source lan-
guage, v ranges over literal values, x over variables, op over
primitive operations. Also, j ranges over integers.
instr ::= prim op | push v | load x | store x | ifeq j | goto j
| new C | getﬁeld f | putﬁeld f | throw e | return
A program in the target language consists of an instruc-
tion list T P [1..N] together with an exception table that de-