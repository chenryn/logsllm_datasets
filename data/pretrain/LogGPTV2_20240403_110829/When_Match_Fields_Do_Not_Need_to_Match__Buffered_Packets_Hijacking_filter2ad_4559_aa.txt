title:When Match Fields Do Not Need to Match: Buffered Packets Hijacking
in SDN
author:Jiahao Cao and
Renjie Xie and
Kun Sun and
Qi Li and
Guofei Gu and
Mingwei Xu
When Match Fields Do Not Need to Match:
Buffered Packet Hijacking in SDN
Jiahao Cao∗†‡§, Renjie Xie∗‡§, Kun Sun†, Qi Li‡§, Guofei Gu¶, and Mingwei Xu∗‡§
†Department of Information Sciences and Technology, George Mason University
∗Department of Computer Science and Technology, Tsinghua University
‡Institute for Network Sciences and Cyberspace, Tsinghua University
§Beijing National Research Center for Information Science and Technology, Tsinghua University
¶SUCCESS LAB, Texas A&M University
{caojh15, xrj16}@mails.tsinghua.edu.cn PI:EMAIL {qli01, xumw}@tsinghua.edu.cn PI:EMAIL
Abstract—Software-Deﬁned Networking (SDN) greatly meets
the need in industry for programmable, agile, and dynamic
networks by deploying diversiﬁed SDN applications on a central-
ized controller. However, SDN application ecosystem inevitably
introduces new security threats since compromised or malicious
applications can signiﬁcantly disrupt network operations. Thus,
a number of effective security enhancement systems have been
developed to defend against potential attacks from SDN appli-
cations. In this paper, we identify a new vulnerability on ﬂow
rule installation in SDN, namely, buffered packet hijacking, which
can be exploited by malicious applications to launch effective
attacks bypassing all existing defense systems. The root cause
of this vulnerability lies in that SDN systems do not check
the inconsistency between buffer IDs and match ﬁelds when
an application attempts to install ﬂow rules. Thus, a malicious
application can manipulate buffer IDs to hijack buffered packets
even though they do not match any installed ﬂow rules. We
design effective attacks exploiting this vulnerability to disrupt
all three SDN layers, i.e., application layer, data plane layer, and
control layer. First, by modifying buffered packets and resending
them to controllers, a malicious application can poison other
applications. Second, by manipulating forwarding behaviors of
buffered packets, a malicious application can not only disrupt
TCP connections of ﬂows but also make ﬂows bypass network
security policies. Third, by copying massive buffered packets to
controllers, a malicious application can saturate the bandwidth
of SDN control channels and their computing resources. We
demonstrate the feasibility and effectiveness of these attacks with
both theoretical analysis and experiments in a real SDN testbed.
Finally, we develop a lightweight defense system that can be
readily deployed in existing SDN controllers as a patch.
I.
INTRODUCTION
Software-Deﬁned Networking (SDN) has emerged as a
ﬂexible network paradigm. It is being increasingly deployed
in enterprise data centers, cloud networks, and virtualized
environments [1], [2]. The popularity of SDN lies on its
programmability, agility, and dynamic network control, which
beneﬁts from the separation of control and data planes. SDN
allows a logically centralized controller in the control plane
to control all SDN switches in the data plane. By deploying
Network and Distributed Systems Security (NDSS) Symposium 2020
23-26 February 2020, San Diego, CA, USA
ISBN 1-891562-61-4
https://dx.doi.org/10.14722/ndss.2020.23040
www.ndss-symposium.org
diversiﬁed applications on the controller, various network
functionalities can be easily implemented in SDN, such as
load balancing [3], trafﬁc engineering [4], and network se-
curity forensics [5]. Network functionalities that are formerly
implemented by proprietary software or complex middleboxes
now can be enabled through the use and update of SDN
applications from open source developer communities or third-
party application stores [1], [6], [7].
Though SDN applications extend the capacities of con-
trollers and bring huge beneﬁts, the burgeoning application
ecosystem introduces new security threats. SDN applications
may have buggy or malicious code that can be exploited by
attackers to disrupt network operations. A recent study [8]
shows that malicious applications are probably the most severe
threats to SDN. A number of attacks [1], [9], [10], [11],
[7] launched by malicious applications have been identiﬁed,
such as exploiting shared data objects in controllers to poison
applications [1], manipulating ﬂow rules to bypass network
security policies [9], [10], and abusing permissions to crash
SDN controllers [11].
To prevent malicious applications from disrupting SDN
systems, a number of effective defense systems have been
proposed. Permission control systems can effectively limit
excessive privileges of applications [12], [7], [13], [14]. Data
provenance systems can prevent cross-app poisoning by track-
ing shared data objects in controllers and checking informa-
tion ﬂow control (IFC) [1]. Rule conﬂict detection systems
can deter attackers from bypassing network security policies,
which is introduced by rule manipulation from malicious
applications [10], [9], [15]. Sandbox systems can protect SDN
controllers against malicious operations performed by isolated
applications [16]. All these defense mechanisms signiﬁcantly
improve the security of SDN and raise the bar for a malicious
application to launch attacks.
In this paper, we uncover a new vulnerability on ﬂow
rule installation in SDN, namely, buffered packet hijacking.
It allows a malicious application to hijack buffered packets
to launch a number of attacks bypassing existing defense
systems. The vulnerability is due to the lack of consistency
check between buffer IDs and match ﬁelds when installing
ﬂow rules. Typically, an SDN application sends a FLOW_MOD
message to switches when a new ﬂow matches no ﬂow rules.
The message not only contains match ﬁelds and actions to
create ﬂow rules in switches for the new ﬂow, but also contains
a buffer ID to release a previously buffered packet of the
new ﬂow. However, we ﬁnd that the buffered packet speciﬁed
by the buffer ID can be directly forwarded according to the
actions, no matter if it matches installed ﬂow rules. Thus, a
malicious application can pretend to update ﬂow rules under its
responsibility while it manipulates buffer IDs in FLOW_MOD
messages to stealthily control
the forwarding behaviors of
buffered packets for any new ﬂows. Though buffered packets
do not match the ﬂow rules installed by the malicious applica-
tion, they will be processed according to the actions of the ﬂow
rules. As the malicious ﬂow rules do not conﬂict with other
ﬂow rules installed by benign applications, existing defense
systems cannot detect or prevent these hijacking operations of
a malicious application [10], [9], [15].
We note that successfully hijacking buffered packets re-
quires the malicious application to send a FLOW_MOD message
before a benign application sends its message to release
buffered packets. This depends on processing chains that deﬁne
the orders for different SDN applications to process network
events. To analyze the probability of successfully hijacking a
buffered packet, we build a model of processing chains that is
independent of controllers. We derive the formal representation
of the hijacking probability in two typical scenarios, i.e., intra-
chain hijacking and inter-chain hijacking.
layer. All
Based on the vulnerability, we discover four attacks that
can disrupt all three layers of SDN, i.e., application layer,
data plane layer, and control
these new attacks
can successfully evade all existing defense systems. First, we
discover a cross-app poisoning attack that targets at the appli-
cation layer. By modifying a buffered packet and resending
it
to controllers, a malicious application can poison other
applications that learn information from the headers of buffered
packets. Second, we uncover two attacks targeting at the data
plane layer, namely, network security policy bypass attack
and TCP three-way handshake disruption attack. A malicious
application can easily launch these two attacks by modifying
forwarding behaviors of the buffered packets. Finally, we
discover a control trafﬁc ampliﬁcation attack that targets at
attacking the control layer by copying massive buffered packets
to controllers. It quickly increases control
trafﬁc of SDN
and thus consumes both bandwidth of control channels and
computing resources of controllers.
We conduct experiments in a real SDN testbed consisting
of commercial hardware SDN switches and open source SDN
controllers to demonstrate the feasibility and effectiveness of
the identiﬁed attacks. The experimental results show that the
hijacking probability can exceed 70% in most cases of real
processing chains, and the largest hijacking probability can
reach 100%. Our experimental results are consistent with the
theoretical results. Moreover, we demonstrate that a malicious
application can successfully launch a number of effective
attacks by hijacking buffered packets. In the application layer,
a malicious application can poison the learning switch appli-
cation to falsely learn the mappings between MAC addresses
of hosts and switch ports. In the data plane layer, malicious
data ﬂows can successfully bypass network security policies
due to the modiﬁcation of forwarding behaviors of buffered
packets. Furthermore, by disrupting TCP three-way handshake,
a malicious application can signiﬁcantly delay the connection
completion time (CCT) for TCP ﬂows, which is 100 times
higher than that in normal cases. In the control layer, the con-
trol channel is quickly saturated under control trafﬁc ﬂooding
attacks, leaving most ﬂows not served in SDN.
To prevent attacks from hijacking buffered packets, we
develop a lightweight countermeasure named ConCheck. It is
transparent to SDN applications and can be easily deployed
on SDN controllers as a patch. ConCheck intercepts API calls
of reading PACKET_IN messages in order to build mappings
between buffered packets and buffer IDs. With the knowledge
of the mappings, it can check if there is any inconsistency
between buffered packets and the match ﬁelds in API calls of
generating FLOW_MOD messages. ConCheck blocks the API
call that has any inconsistency to prevent hijacking buffered
packets. We implement ConCheck on the Floodlight controller,
and the experiments show it only introduces a small overhead.
In summary, our paper makes the following contributions:
• We identify a vulnerability on ﬂow rule installation in
SDN, which allows a malicious application to hijack
buffered packets and evade existing defense systems.
• We develop four effective attacks that exploit the identi-
• We conduct experiments in a real SDN testbed to demon-
strate the hijacking probability and effectiveness of the
identiﬁed attacks.
• We design and implement a lightweight countermeasure
named ConCheck to prevent hijacking buffered packets.
ﬁed vulnerability to attack all three SDN layers.
II. BACKGROUND
Multiple SDN applications concurrently run on controllers
to enable diversiﬁed network functionalities. They interact with
core services in controllers to obtain abstracted network state
and enforce commands to control SDN switches. An SDN
switch can leverage the PACKET_IN mechanism to actively
report to SDN controllers that a new ﬂow comes. We brieﬂy
introduce the mechanism here. When the ﬁrst packet of a new
ﬂow matches no ﬂow rules in a switch, it is automatically
assigned with a buffer ID by the switch and then temporarily
buffered in the switch, as shown in Figure 1. Meanwhile,
a PACKET_IN message is sent to the controller and then
is dispatched to SDN applications. Any application with the
PACKET_IN permission can obtain the packet headers and the
buffer ID contained in the PACKET_IN message.
As the PACKET_IN message contains useful information
of a ﬂow, e.g., source and destination IP addresses, most
applications analyze the message to make network decisions.
They have a certain order on processing the PACKET_IN
message from a switch due to their interdependence. Therefore,
different applications make up multiple processing chains
to process PACKET_IN messages, as shown in Figure 1.
The ﬁrst application in each processing chain simultaneously
receives a copy of a PACKET_IN message dispatched by
the PACKET_IN notiﬁer. However, applications in the same
processing chain process the PACKET_IN message and make
network decisions in turn. If an application is not interested in
a particular type of a PACKET_IN message, it simply passes
the message to the next application in the processing chain.
Otherwise, it makes network decisions by interacting with
core services on controllers. After processing the PACKET_IN
2
TABLE I: The ratio of applications with the permission on
listening PACKET_IN messages and installing ﬂow rules.
Controller
Total APPs
APPs with the Permission
6
23
12
19
11
Ratio
46.2%
23.7%
41.4%
67.9%
61.1%
OpenDaylight Neon†
ONOS v2.1.0-rc1
Floodlight v1.2
RYU v4.31
13
97
29
28
18
POX eel version
† Only counting the applications implemented with openﬂowplugin.
Fig. 1: Processing Chains in SDN.
message, it usually passes the message with possible metadata
to the following application.
We use a real processing chain in the Floodlight [17]
controller to show how applications process network events
and enforce network policies. Considering the processing chain
in Figure 1, we assume that APP 1, APP 2, APP 3, and APP
4 are Topology Manager, Device Manager, Load Balancer,
and Forwarding, respectively. When the ﬁrst application, i.e.,
Topology Manager, receives a PACKET_IN message (Step 0),
it checks the type of the message. If the message contains
an LLDP packet that is used for discovering links, it updates
network topology and calls Packet Service to send new LLDP
packets to switches for future topology discovery. Otherwise,
it passes the message to the second application (Step 1), i.e.,
Device Manager. Device Manager learns attachment points of
hosts by analyzing the PACKET_IN message and the network
topology provided by the ﬁrst application. After that,
the
message is passed to the third application (Step 2), i.e., Load
Balancer, which checks the packet headers in the PACKET_IN
message. If the new ﬂow belongs to predeﬁned important
ﬂows, Load Balancer chooses an optimal backend server from
a server pool to serve the new ﬂow. It calls Flow Rule Service
to install crafted ﬂow rules with FLOW_MOD messages. The
new ﬂow is then forwarded to the chosen server according to
a particular routing path. Otherwise, it passes the PACKET_IN
message to the following application (Step 3), i.e., Forwarding.
Forwarding analyzes the message and calls Flow Rule Service
to install ﬂow rules with FLOW_MOD messages. The new ﬂow
is then forwarded to its destination with the shortest path.
III. BUFFERED PACKET HIJACKING