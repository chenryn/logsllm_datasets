Building Python packages such as NumPy, SciPy, Matplotlib, and h5py on one Linux distribution (e.g., Ubuntu) and then running them on another (e.g., CentOS) can be problematic due to differences in system libraries, dependencies, and package versions. 

Given that your computing cluster uses CentOS while your personal computer runs Ubuntu, here are some recommendations to ensure compatibility:

1. **Use Virtual Environments**: Consider using virtual environments (e.g., `venv` or `conda`) to create isolated environments for your Python projects. This helps manage dependencies and ensures that the same environment can be replicated across different systems.

2. **Containerization**: Use containerization tools like Docker to create a consistent environment. You can build a Docker image on your Ubuntu machine and run it on the CentOS cluster. This approach ensures that all dependencies and system libraries are identical across both systems.

3. **Packaging with `setuptools` and `wheel`**: Instead of using `distutils`, which is now deprecated, use `setuptools` and `wheel` to package your Python code. These tools provide more robust support for packaging and distributing Python applications.

4. **Local PyPI Server**: Set up a local PyPI server using `pypiserver` or `devpi`. This allows you to host your own Python packages and their dependencies, making it easier to install and manage them across different machines.

5. **Cross-Platform Compatibility**: Ensure that any compiled extensions (e.g., C/C++ code in NumPy, SciPy) are compatible with the target system. You may need to recompile these extensions on the CentOS machine or use pre-built binary wheels that are compatible with both distributions.

By following these steps, you can minimize the potential issues and ensure that your Python packages work seamlessly across different Linux distributions.