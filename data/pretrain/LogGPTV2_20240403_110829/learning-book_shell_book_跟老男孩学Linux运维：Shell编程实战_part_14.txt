a=S1#/dev/nul1
RETVAL_A=S?
expr Sb +1 &>/dev/nu11
if[SRETVAL_A-ne 0-o SRETVAL_B-ne 0 ]:then
RETVAL_B=S?
echo *one of the nun is not num,pls input again.*
exit1
#no.3
.（（qs-s））s=q-.ou
echo *a+b=S(($a+$b))*
.（（qss））s=q，，ouo
echo *a/b=S(（$a/Sb))*
.（（qses））s=q..ou
=.o
执行结果如下：
[root@oldboy scripts]#sh read_size01.sh
Please input two nunber:Qq
then second num is nul1
/dev/nu11 2>&1
[$? -ne 0]&& Usage
exprSb+0>/dev/nu112>b1/dev/nu11
A=S?
nu/Aop//dev/nul1 2>61:then
ifexpr1+$b>/dev/nul12>41;then
echo'a-b=$（（ Sa-Sb）)*
（（qs+s））s=q+.oq
echo*a*b=$（（ Sa*sb）)
echo‘a/b=s（（Sa/$b))
（（qs.））s=q.ou
echo*ab=s（（ Sas Sb））·
else
echo Input Error 2 no: $b*
exit 1
fi
else
echo *Input Error 1 no: Sa*
exit1
fi
老男孩不建议的答案3：
#1/bin/bash
if[-n*sa*]then
echo'a lost'
exit2
if{-n*sb*];then
fi
echo`blost*
exit2
---
## Page 109
第5章变量的数值计算实践8
expr1+Sa 6>/dev/nul1
fi
if[$?-eq 0]:then
expr 1+Sb6>/dev/nu11
if[ $？-eq 0 ]then
echo*a+b-$（（Sa+$b）)
echo *a-b-s（（sa-Sb）)·
（（ases））s=q，，ou
echo*a/b=$（（Sa/Sb))·
echo'a
（（qes））s=q.
echo*ab=s（（Sasb）)
else
if[ $7-eq 0 1:then
echo'too many arguments*
exit 2
fi
echo *b is incorect*
exit 2
fi
else
expr1+Sb&>/dev/nu11
if[s?-ne0]:then
Inu/ap/
这是利用tesn命令进行条件测试表达式的方法。test命令和“”之间至少有一个空格。
语法2：[]
这是通过[（单中括号）进行条件测试表达式的方法，和test命令的用法
相同，这是老男孩推荐的方法。[的边界和内容之间至少有一个空格。
语法3：[】]
这是通过[1]（双中括号）进行条件测试表达式的方法，是比test和[更
新的语法格式。[]的边界和内容之间至少有一个空格。
语法4：（()
这是通过（0）（双小括号）进行条件测试表达式的方法，一般用于i语句
里。（0）（双小括号）两端不需要有空格。
针对表6-1有几个注意事项需要说明一下：
---
## Page 111
第6章Shell购本的条件测试与比较额
口语法1中的 test命令和语法2中的口是等价的。语法3中的[D]为扩展的test命令，
语法4中的（0）常用于计算，老男孩建议使用相对友好的语法2，即中括号（0）
的语法格式。
口在[D]（双中括号）中可以使用通配符等进行模式匹配，这是其区别于其他几种
语法格式的地方。
口&&、I、>、
对于如下语句：
test -f file &6 echo true 1l echo false
该语句表示如果file文件存在，则输出true，否则（Il）输出false。这里的&&是并
且的意思。test的-f参数用于测试文件是否为普通文件，test命令若执行成功（为真），
则执行&&后面的命令，而I后面的命令是test命令执行失败之后（为假）所执行的
命令。
test命令测试表达式的逻辑也可以用上述表达形式的一半逻辑（即仅有一个&&
或）来测试，示例如下。
test-f/tmp/oldboy.txt &kecho1<=若表达式成功，则输出1。
teBt-f/tmp/oldboy.txt11echo0<==若表达式不成功，则输出0。
另外，逻辑操作符&&和目的两端既可以有空格，也可以无空格，这主要看读者习
惯。老男孩的习惯是，尽量减少输人空格，因
此在逻辑操作符&&和的两端会尽量不输人
至少有一个空格