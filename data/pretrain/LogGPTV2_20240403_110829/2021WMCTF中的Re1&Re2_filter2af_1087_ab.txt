    */
可以看到 **yOu_L1kE** ，满足要求的两个字节是 **0xb7 0xad**
然后解密2段密文再按一定顺序拼接一下得到： **_D0_yOu_L1kE_It!**
现在就是去求 **_@#?! &-$+**对应的处理函数怎么才能将 ** _((_WORD_ )Block + 273)**的0xDEAD的改为
**0xB7AD** 。
输入为hex，4字节为一组转化为2个byte，第一个byte是index，第二个byte是data
根据要求推算出这样一个顺序是满足b要求的：
首先 **@** 对应的处理函数将block[256] = 0xFE。注意下面是char a2，所以传入0xFF就是-1了，因此满足输入为：
**[@FFFE](https://github.com/FFFE "@FFFE")**
然后 **#** 对应的处理函数将block[528] = 0x20，因此满足输入： **#0F20**
最后 **–** 对应的处理函数将block[527] = 0xB7，也是我们最后的终点。因此满足输入： **-11B7**
可以看到上面要能执行最后的 ** _(_BYTE_ )(a1 + 530 + a2) = a3;**要求是(*(unsigned __int16 *)(a1
+ 528) % 16) == 0，(unsigned int)(*(unsigned __int16 *)(a1 + 528) / 16) >> a = [i for i in range(0xff) if i%16 == 0 and i/16 >> a
    [0, 16, 32]
而我们的index为17且 **index GetStringUTFChars(a1, a3, 0LL);
      if ( (*a1)->GetStringLength(a1, (jstring)a3) == 32 )
      {
        v6 = (_BYTE *)operator new[](0x21uLL);
        __strcpy_chk(v6, v5, 33LL);
        v7 = (char *)operator new[](0x1EuLL);
        sub_7079FF9E80();
        v8 = __strlen_chk(v7, 0x1Eu);
        v7[(int)v8] = 102;
        v7[((v8 > 32] = 108;
        v7[((v8 > 32] = 103;
        v7[((v8 > 32] = 0;
        v19 = xmmword_707A01E5D0;
        sub_7079FFA934((__int64)v20, v7, (long double *)&v19);
        sub_7079FFAE6C(v20, v6, 0x20uLL);
        strcpy_0(v20, (char *)&qword_707A02F058);
        if ( (v20[0] & 1) != 0 )
          v9 = v21;
        else
          v9 = (char *)v20 + 1;
        sub_7079FFA624((int)&v19, v9);
        v10 = 0LL;
        while ( v16[v10] == stru_707A02F000[0].n128_u8[v10] )
        {
          if ( ++v10 == 32 )
          {
            v11 = strlen((const char *)&aQpyl);
            sub_7079FF9670((int)v17, &aQpyl, v11);
            if ( (v17[0] & 1) != 0 )
              v12 = v18;
            else
              v12 = (char *)v17 + 1;
            goto LABEL_18;
          }
        }
        if ( (v17[0] & 1) != 0 )
          v12 = v18;
        else
          v12 = (char *)v17 + 1;
    LABEL_18:
        v14 = (*a1)->NewStringUTF(a1, v12);
        if ( (v20[0] & 1) != 0 )
          operator delete(v21);
      }
      else
      {
        if ( (v17[0] & 1) != 0 )
          v13 = v18;
        else
          v13 = (char *)v17 + 1;
        v14 = (*a1)->NewStringUTF(a1, v13);
      }
      if ( (v17[0] & 1) != 0 )
        operator delete(v18);
      return v14;
    }
先简单静态分析一下，开始是判断输入的长度是否为32。
然后sub_7B4933FE80函数读取某个文件内容经过对比后返回一串字符串：
后面接着对上面获取到的字符串进行如下赋值：
其实就是在其末尾加上 **flg**
    len = strlen(init_key);
    init_key[len] = 'f';
    init_key[len+1] = 'l';
    init_key[len+2] = 'g';
    init_key[len+3] = '\x0';
接着sub_7B49340934函数传入两个参数，其中的sub_7B49340820函数用了传入的一个参数串进行aes的密钥扩展：字节替换（但是这里的sbox是替换过的），移位，轮常数异或。44/4
= 11，这也说明了是aes_128，因为密钥11组。
再是将另外一个参数存放在扩展密钥的尾部：
接着的sub_7B49340E6C函数也是很明显的aes_128_cbc加密，sub_7B4934097C中清晰的初始轮（轮密钥加），重复轮（字节替换，行移位，列混合，轮密钥加），最终轮（字节替换，行移位，轮密钥加）结构：
最后sub_7B49340624函数rc4加密，但多异或了0x50：
所以整体上本题的加密就是aes_128_cbc与rc4，麻烦的是数据部分，如aes的密钥，iv，rc4密钥与密文等。因为开始说了在.init_array中进行了很多数据的解密，我在静态分析看到的大多数数据都是没有解密的。那我们现在要么对分析到的数据找到引用修改的.init_array中的函数按照相同的运算逻辑手动patch修改；要么就是把程序调试起来，分析起来会简单很多。
这里我选择了动态调试。
首先将AndroidMannifest.xml中的 **android:extractNativeLibs=”false“**
改为true或者删掉，默认为true。因为这个如果为false会让我们在调试时找不到so
然后因为我们调试的断点要断在 **JNI_OnLoad** 中（方便把注册的函数修改为正确的分支），那我们必须在程序还没执行
**System.loadLibrary(“native-lib”);** 之前就断下来，所以要程序要以调试模式启动。
首先我尝试了ida+jdb的组合：
> 运行环境中root模式启动好相应的服务程序，转发端口到本地。(停止转发端口： **adb forward —remove tcp:端口号`或`adb
> forward —remove-all**)
>
> 使用am命令以调试启动app：adb shell am start -D -n come.wmctf.crackme111/.MainActivity
>
> ida在JNI_OnLoad中下好断点，然后找到app对应的进程后附加，接着F9运行
>
> 打开ddms，用附加让app运行起来：jdb -connect
> com.sun.jdi.SocketAttach:hostname=127.0.0.1,port=8700
但是这样做在jdb附加app就报如下的错误。这好像是我手机的原因？
我使用jeb来附加app同样也是报错，这都是在我先用IDA附加了进程的情况下，接着我尝试发现先jdb或jeb附加再IDA附加是可以的，但这样程序已经运行过
**System.loadLibrary(“native-lib”);** 了。
而还有一个方法，我们可以使用jeb附加调试断在 **System.loadLibrary(“native-lib”);** 之前再用IDA去附加进程呀。
然后成功断在JNI_OnLoad中，在正确分支下好断点，修改检测环境是否root的返回值为false，但是这个在native层运行完JNI_OnLoad函数回到java层的时候app又崩溃了。
最后干脆直接改so得了，就是把根据检测运行环境是否有su的返回值后的条件跳转改一下。
上面修改完后，把app重编译一下，然后普通的附加调试就好了。这也是调试本程序最简单的方法，上面绕了一大圈😂。
现在再看一下内存中解密后的数据，一目了然：
看到上面静态分析说的sub_7B4933FE80函数用fopen()打开了一个系统文件，现在调试过去发现原来是进程的状态信息：
再看到后面要匹配的内容。
自己手动查看一下：
接着直接调试到最后看获取的结果，就是要获取 **TracerPid:**
字段那一行的内容加上flg，而app正常不调试运行这个TracerPid是0的，所以这里获取的正确值为：
**TracerPid:\x090\x0Aflg**
接着看到下面与上面的静态分析结合可以知道：程序中aes_128的key： **TracerPid:\x090\x0Aflg** iv： **0, 1, 2,
3, 4, 5, 6, 7, 8, 9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF**
再就是这个aes加密的sbox果然是替换了的，正常的sbox开头为： **0x63, 0x7c, 0x77, 0x7b**
最后看到剩下的rc4加密，从传入参数看到密钥是 **Hello from C++**
下面开始解密。
首先rc4解密：
直接把输入的aes加密结果与最终经过rc4结果都提取出来异或一下得到异或序列，再将其与真正的密文异或一下得到真正的aes加密结果：
    >>> s = [0xA4, 0xCD, 0xDA, 0x34, 0xA9, 0xE8, 0xFF, 0x48, 0xD6, 0x74, 0xE7, 0x0F, 0x71, 0xF7, 0xED, 0xB7, 0xC2, 0xA8, 0xE1, 0xE1, 0x0E, 0x2D, 0xD0, 0x8D, 0xF8, 0x20, 0x0E, 0x85, 0x1D, 0xBC, 0xC1, 0x61]
    >>> t = []
    >>> t = [0x6C, 0xDB, 0xC6, 0x75, 0x4A, 0x94, 0xAA, 0xBD, 0xF5, 0x92, 0xCF, 0xB6, 0x4E, 0x0B, 0x38, 0x5B, 0x2E, 0x4F, 0x48, 0xFD, 0xE2, 0x7B, 0xE3, 0xFE, 0x64, 0x7E, 0xEA, 0xA7, 0xB5, 0x8D, 0x96, 0xF5]
    >>> ans = [s[i]^t[i] for i in range(len(s))]
    >>> ans
    [200, 22, 28, 65, 227, 124, 85, 245, 35, 230, 40, 185, 63, 252, 213, 236, 236, 231, 169, 28, 236, 86, 51, 115, 156, 94, 228, 34, 168, 49, 87, 148]
    >>> enc = [0x18, 0x76, 0xEB, 0x87, 0x76, 0x3E, 0x77, 0x08, 0xC0, 0x8D, 0x56, 0x25, 0x9E, 0x35, 0x0D, 0x16, 0x23, 0x65, 0x61, 0x6A, 0x14, 0x9D, 0x4F, 0x1C, 0x64, 0x21, 0x7D, 0x78, 0xBA, 0x53, 0x91, 0x22]
    >>> res = [ans[i]^enc[i] for i in range(len(enc))]
    >>> res
    [208, 96, 247, 198, 149, 66, 34, 253, 227, 107, 126, 156, 161, 201, 216, 250, 207, 130, 200, 118, 248, 203, 124, 111, 248, 127, 153, 90, 18, 98, 198, 182]
然后aes解密：
将之前自己写过的aes_cbc加解密中的sbox替换为程序中的，rsbox简单对sbox求一下逆，最后解密即可：
    //aes.h
    #ifndef AES_H
    #define AES_H
    #include 
    #include 
    #include  
    #define Nk 4
    #define Nr 10
    #define Nb 4
    #define getSBoxValue(num) (sbox[(num)])
    class aes
    {
    public:
        struct ctx_
        {
            unsigned char RoundKey[11*16];
        }ctx;
    public:
        aes(char *Key);
        void xor_iv(char *a, char *b);
        void KeyExpansion(unsigned char *RoundKey, char *Key);
        void AddRoundKey(unsigned char (*state)[4], unsigned char *RoundKey);
        void SubBytes(unsigned char (*state)[4]);
        void ShiftRows(unsigned char (*state)[4]);
        unsigned char gfmultby(unsigned char a, unsigned char b);
        void MixColumns(unsigned char (*state)[4]);
        void getData(unsigned char (*data)[4], char *enc);
        void encryption_cbc(char *plaint, char *enc);
        void InvSubBytes(unsigned char (*state)[4]);
        void InvShiftRows(unsigned char (*state)[4]);
        void InvMixColumns(unsigned char (*state)[4]);
        void decryption_cbc(char *plaint, char *enc);
    };
    #endif // AES_H
    //main.cpp