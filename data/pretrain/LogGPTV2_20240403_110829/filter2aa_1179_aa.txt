Mixminion: Design of a Type III Anonymous
Remailer Protocol
George Danezis1, Roger Dingledine2, David Hopwood3, and Nick Mathewson2
1 Cambridge University 
2 The Free Haven Project 
3 Independent consultant 
Abstract. We present Mixminion, a message-based anonymous remailer
protocol that supports secure single-use reply blocks. MIX nodes cannot
distinguish Mixminion forward messages from reply messages, so forward
and reply messages share the same anonymity set. We add directory
servers that allow users to learn public keys and performance statistics
of participating remailers, and we describe nymservers that allow users to
maintain long-term pseudonyms using single-use reply blocks as a prim-
itive. Our design integrates link encryption between remailers to provide
forward anonymity. Mixminion brings together the best solutions from
previous work to create a conservative design that protects against most
known attacks.
Keywords: anonymity, MIX-net, peer-to-peer, remailer, nymserver, reply block
1
Introduction
Chaum ﬁrst introduced anonymous remailer designs over 20 years ago [9]. The
research community has since introduced many new designs and proofs [1, 5, 19,
21–23, 34, 35], and discovered a variety of new attacks [4, 6, 7, 12, 29, 38], but the
state of deployed remailers has changed remarkably little since Cottrell published
his Mixmaster software [10, 32] in 1994. Part of the diﬃculty in expanding the
deployed remailer base is due to the liability involved in running a remailer node
on the Internet, and part is due to the complexity of the current infrastructure
— it is fairly hard to add new experimental features to the current software.
The Mixminion Project aims to deploy a cleaner remailer design in the same
spirit as Mixmaster, with the goals of expanding deployment, documenting our
design decisions and how well they stand up to all known attacks, and providing a
research base for experimental features. We describe our overall design in Section
3, including a new primitive called a single-use reply block (SURB). Mixmaster
provides no support for replies, but instead relies on the older and less secure
Cypherpunk Type I remailer design [26]. By integrating reply capabilities into
Mixminion, we can ﬁnally retire the Type I remailer network.
We introduce link encryption with ephemeral keys to ensure forward anonym-
ity for each message. We also provide ﬂexible delivery schemes — rather than
just allowing delivery to mail or Usenet, we allow designers to add arbitrary mod-
ules to handle incoming and outgoing messages. By separating the core mixing
architecture from these higher-level modules, we can both limit their inﬂuence
on the anonymity properties of the system, and also extend the Mixminion net-
work for uses other than anonymous email. We go on in Section 5 to describe
a design for directory servers to track and distribute remailer availability, per-
formance, and key information, and then describe in Section 6 how to securely
build higher-level systems such as nymservers using SURBs.
Mixminion is a best-of-breed remailer protocol that uses conservative design
approaches to provide security against most known attacks. The overall Mixmin-
ion Project is a joint eﬀort between cryptography and anonymity researchers and
Mixmaster remailer operators. This design document represents the ﬁrst step in
peer review of the Type III remailer protocol.
2
Related Work
2.1
MIX-nets
Chaum introduced the concept of a MIX-net for anonymous communications [9].
A MIX-net consists of a group of servers, called MIXes (or MIX nodes), each of
which is associated with a public key. Each MIX receives encrypted messages,
which are then decrypted, batched, reordered, and forwarded on without any
information identifying the sender. Chaum also proved the security of MIXes
against a passive adversary who can eavesdrop on all communications between
MIXes but is unable to observe the reordering inside each MIX.
Recent research on MIX-nets includes stop-and-go MIX-nets [23], distributed
ﬂash MIXes [21] and their weaknesses [12, 29], and hybrid MIXes [35].
One type of MIX hierarchy is a cascade. In a cascade network, users choose
from a set of ﬁxed paths through the MIX-net. Cascades can provide greater
anonymity against a large adversary: free-route systems allow an adversary who
owns many MIXes to use intersection attacks to reduce the set of possible senders
or receivers for a given message [7]. On the other hand, cascades are more vulner-
able [3] to trickle attacks, where an attacker targeting a speciﬁc message going
into a MIX can manipulate the batch of messages entering that MIX so the
only unknown message in the batch is the target message [10, 19]. MIX cascade
research includes real-time MIXes [22] and web MIXes [5].
2.2
Deployed Remailer Systems
The ﬁrst widespread public implementations of MIXes were produced by the
Cypherpunks mailing list. These “Type I” anonymous remailers were inspired
both by the problems surrounding the anon.penet.fi service [20], and by theo-
retical work on MIXes. Hughes wrote the ﬁrst Cypherpunk anonymous remailer
[26]; Finney followed closely with a collection of scripts that used Phil Zimmer-
mann’s PGP to encrypt and decrypt remailed messages. Later, Cottrell imple-
mented the Mixmaster system [17, 32], or “Type II” remailers, which added mes-
sage padding, message pools, and other MIX features lacking in the Cypherpunk
2
remailers. Note that Mixmaster does not include replies, so deployed remailer
systems still use the less secure long-term Cypherpunk reply blocks.
At about the same time, Gulcu and Tsudik introduced the Babel system
[19], a practical remailer design with many desirable features. While it pro-
vides replies, they are only indistinguishable from forward messages by pas-
sive observers; the MIX nodes can still distinguish. Babel’s reply addresses are
multiple-use, making them less secure than forward messages due to replay vul-
nerabilities. Babel also introduces inter-MIX detours, where nodes can rewrap
a message and send it through a few randomly chosen new hops — so even the
sender cannot be sure of recognizing his message as it leaves the MIX.
2.3
Remailer Statistics
Levien’s statistics pages [27] track both remailer capabilities (such as what kinds
of encryption the remailer supports) and remailer up-times (obtained by pinging
the machines in question and by sending test messages through each machine or
group of machines). Such reputation systems improve the reliability of MIX-nets
by allowing users to avoid choosing unreliable MIXes. The Jack B Nymble 2 re-
mailer client [39] and the Mixmaster 2.9 remailer allow users to import statistics
ﬁles and can then pick remailers according to that data. Users can specify min-
imum reliability scores, decide that a remailer should always or never be used,
and specify maximum latency. Ongoing research on more powerful reputation
systems includes a reputation system for free-route networks [14] and another
for MIX cascades [16].
3
The MIX-net Design
Mixminion brings together the current best approaches for providing anonymity
in a batching message-based MIX environment. We don’t aim to provide low-
latency connection-oriented services like Freedom [40] or Onion Routing [18]
— while those designs are more eﬀective for common activities like anonymous
web browsing, the low latency necessarily implies smaller anonymity sets than
for slower message-based services. Indeed, we intentionally restrict the set of
options for users: we provide only one cipher suite, and we avoid extensions that
would help an adversary divide the anonymity set.
Mixminion uses the same general MIX-net paradigm as previous work [9,
10, 19]. The sender Alice chooses a path through the network. She repeatedly
“onion” encrypts her message, starting with the last MIX in her path, and sends
the onion to the ﬁrst MIX. Each MIX unwraps a single layer of the onion, pads
the message to a ﬁxed length (32 Kbytes in our current design), and passes the
result to the next MIX. We describe the behavior of the last MIX in Section 4.2.
Headers addressed to each intermediate MIX are encrypted using RSA. They
contain a secret that can be used to generate padding and decrypt the rest of the
message. They also contain the address of the next node to which the message
should be forwarded along with its expected signature key ﬁngerprint.
3
While Mixminion protects against known traﬃc analysis attacks (where an
adversary attempts to learn a given message’s sender or receiver [37, 38]), we do
not fully address traﬃc conﬁrmation attacks. In a traﬃc conﬁrmation attack,
the adversary treats the MIX network as a black box and observes the behavior
of senders and receivers. Over time, he can intersect the set of senders and
receivers who are active at certain times and learn who is sending and receiving
which messages [6]. Good dummy traﬃc designs may eventually address the
intersection attack, but for now it remains an open problem.
We choose to drop packet-level compatibility with Mixmaster and the Cypher-
punk remailer systems, in order to provide a simple extensible design. We can
retain minimal backwards compatibility by “remixing” Type II messages to be
Type III messages, thus increasing anonymity sets in the Type III network. Type
II messages travelling between Type III remailers are treated as plaintext and
encrypted to the next remailer in the chain using its Type III key. The message
is sent as a Type III encrypted message, but it decrypts to reveal the Type II
message.
We also provide a new feature: a reply block mechanism that is as secure
as forward messages. Reusable reply blocks, such as those in the Cypherpunk
remailer, are a security risk — by their very nature they let people send multiple
messages through them. These multiple messages can easily be used to trace the
recipient’s path: if two incoming batches both include a message to the same
reply block, then the next hop must be in the intersection of both outgoing
batches. To prevent these replays, Mixminion therefore provides only single-
use reply blocks. Since replies may be very rare relative to forward messages,
and thus much easier to trace, the Mixminion protocol makes reply messages
indistinguishable from forward messages even for the MIX nodes. Thus forward
and reply messages can share the same anonymity set.
3.1
Tagging attacks
To motivate some aspects of the Mixminion design, we describe an attack that
works against many MIX-net protocols, including Mixmaster and Babel.
A tagging attack is an active attack in which a message is modiﬁed by altering
part of it (for example by ﬂipping bits), so that it can be recognized later in the
path. A later MIX controlled by the attacker can recognize tagged messages
because the header does not conform to the expected format when decrypted.
Also, the ﬁnal recipient can recognize a tagged message for which the payload
has been altered.
Checking the integrity of hop headers individually is not suﬃcient to prevent
tagging attacks. For example, in Mixmaster each hop header contains a hash of
the other ﬁelds in that header [32]. Each MIX in the path checks the integrity of
the header, and drops the message immediately if it has been altered. However,
an attacking MIX can still alter a header that will be decrypted only after several
more hops, and so tagging attacks are still possible.
The most straightforward way to prevent tagging attacks is to authenticate
the whole message at every hop. For forward messages, then, the padding added
4
to a message must be derived deterministically, so that it is possible to calculate
authentication tags for the whole message at each hop. But the situation becomes
more complicated when reply messages are introduced — the message and the
reply block are created by diﬀerent users.
3.2
Replies
The rest of this section describes the mechanism for secure replies, including how
we defeat tagging-related attacks. Mixminion’s reply model is in part inspired
by Babel [19], as it requires the receiver of a reply block to keep no other state
than its secret keys, in order to read the reply. All the secrets used to strip the
layers of encryption are derived from a master secret contained in the last header
of the single-use reply block, which the creator of the block addresses to itself
and encrypts under its own public key.
3.3
Indistinguishable replies
By making forward messages and replies indistinguishable even to MIXes, we
prevent an adversary from dividing the message anonymity sets into two classes.
In particular, if replies are infrequent relative to forward messages, an adversary
who controls some of the MIXes can more easily trace the path of each reply.
Having indistinguishable replies, however, makes it more diﬃcult to prevent
tagging attacks. Since the author of a reply block is not the one writing the
payload, a hash of the entire message cannot be used. Therefore, since we choose
to make forward messages and replies indistinguishable, we cannot include hashes
for forward messages either. Our approach to defending against these attacks is
discussed in more detail in Section 3.4.
Mixminion allows Alice to send messages to Bob in one of three ways:
1. Forward messages where only Alice remains anonymous.
2. Direct Reply messages where only Bob remains anonymous.
3. Anonymized Reply messages where Alice and Bob remain anonymous.
We require parties that beneﬁt from anonymity properties to run dedicated
software. Speciﬁcally, senders generating forward messages must be able to cre-
ate onions, and anonymous receivers must be able to create reply blocks and
unwrap messages received through those reply blocks. Other parties, such as
those receiving forward messages and those sending direct reply messages, do
not need to run new software. (The quoting performed by ordinary mail soft-
ware can be used to include the reply block in a direct reply; this is sent to a
node at the Reply-To: address, which extracts the reply block and constructs a
properly formatted onion.)
Messages are composed of a header section and a payload. We divide a mes-
sage’s path into two legs, and split the header section correspondingly into a
main header and a secondary header. Each header is composed of up to 16 sub-
headers, one for each hop along the path. Each subheader contains a hash of the
5
remainder of its header as seen by the appropriate MIX, so we can do integrity-
checking of the path (but not the payload) within each leg. Each subheader also
contains a symmetric key, which is used to derive a decryption key for decrypting
the rest of the message. The MIX also derives a padding seed from this master
key. It uses this padding seed to place predictable padding at the end of the
header, so the hash will match even though each hop must regrow the header to
maintain constant length.
For forward messages, Alice provides both legs; for anonymous replies, Alice
uses Bob’s reply block as the second leg, and generates her own path for the ﬁrst
leg. To send a direct reply, Alice can use an empty ﬁrst leg, or send the reply
block and message to a MIX that can wrap them for her.
When Alice creates her message, she encrypts the secondary header with a
hash of her payload (in addition to the usual layered onion encryptions). Alice’s
message then traverses the MIX-net as normal (every hop pulls oﬀ a layer, veriﬁes
the hash of the current header, and puts some junk at the end of the header),
until it gets to a hop that is marked as a crossover point. This crossover point
performs a “swap” operation: it decrypts the secondary header with the hash
of the current payload, and then swaps the two headers. The swap operation is
detailed in Figure 1 — speciﬁcally, the normal operations done at every hop are
those above the dotted line, and the operations performed only by the crossover
point are those below the dotted line. The encryption primitive, labelled “LBC”,
that is used to blind the second header and the payload needs to have certain
properties:
– it is length-preserving;
– it should be impossible to recognize the decryption of a modiﬁed block,
without knowledge of the key;
– it should be equally secure to use the decryption operation for encryption.
To fulﬁll the above requirements we use a large-block cipher; that is, a cipher
that acts as a permutation on a block the size of its input (a header or the pay-
load). Possible candidates include LIONESS [2] and SPC [8]. The cryptographic
property required is that of a super-pseudo-random permutation (a.k.a. strong
pseudo-random permutation) or SPRP [24].1 Thus if any bit of the encrypted
material is changed, the decryption will look like random bits. An SPRP is also
equally secure in the encryption and decryption directions. See Section 3.4 for a
discussion of how this approach helps protect against tagging.
3.4
Defenses against tagging attacks
Without the crossover point, an adversary could mount a tagging attack by
modifying the payload of a forward message as it leaves Alice, and recognizing
it later when it reaches Bob. Speciﬁcally, if our encryption mechanism were an
1 The weaker PRP property may be suﬃcient, given that preventing replays limits
the number of oracle queries to 1; this will need further analysis. In that case the
simpler BEAR construction [2] could be used instead of LIONESS.
6
H1
H2
M
RSA