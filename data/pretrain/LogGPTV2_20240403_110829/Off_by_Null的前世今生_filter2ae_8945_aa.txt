# Off by Null的前世今生
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x01 写在前面
本文从`2.23`、`2.27`、`2.29`三个角度并结合实例阐述了`Off by Null`的利用方式。
## 0x02 Off-by-null 漏洞
顾名思义，这种漏洞是溢出一个空字节，这比`Off-by-one`漏洞的利用条件更为苛刻。
在`Off-by-one`漏洞中，我们通常是用它来构造`Heap Overlap`或是用来触发`unlink`。
这两种利用思路都需要先对堆块合并有了解。
###  向前合并与向后合并
####  向前合并
    /* consolidate forward */
    if (!nextinuse) {
        unlink(av, nextchunk, bck, fwd);
        size += nextsize;
    } else
        clear_inuse_bit_at_offset(nextchunk, 0);
若有一个`Chunk`(下称`P`)将被`free`，那么`Glibc`首先通过`P + P -> size`取出其 **物理相邻**
的后一个`Chunk`(下称`BK`)，紧接着通过`BK + BK -> size`取出与`BK`块 **物理相邻**
的后一个`Chunk`并首先检查其`prev_inuse`位，若此位为清除状态则证明`BK`为`freed`状态，若是，则进入下一步检查。
  * 此时若证明`BK`是`allocated`状态，则将`BK`的`prev_inuse`位清除，然后直接执行`free`后返回。
接下来检查`BK`是不是`Top chunk`，若不是，将进入向前合并的流程。
  * 此时若证明`BK`是`Top chunk`则将其和`P`进行合并。
向后合并流程如下：
  * 让`BK`进入`unlink`函数
  * 修改`P -> size`为`P -> size + BK -> size`(以此来表示size大小上已经合并)
####  向后合并
    /* consolidate backward */
    if (!prev_inuse(p)) {
        prevsize = p->prev_size;
        size += prevsize;
        p = chunk_at_offset(p, -((long) prevsize));
        unlink(av, p, bck, fwd);
    }
首先检查`P`的`prev_inuse`位是否为清除状态，若是，则进入向后合并的流程：
  * 首先通过`P - P -> prev_size`取出其 **物理相邻** 的前一个`Chunk`(下称`FD`)，
  * 修改`P -> size`为`P -> size + FD -> size`(以此来表示size大小上已经合并)
  * 让`FD`进入`unlink`函数
### 构造`Heap Overlap`
我们在这里给出构造`Heap Overlap`的三种常见方式。
  1. 通过`Off by One`漏洞来修改`Chunk`的`size`域涉及到`Glibc`堆管理机制中空间复用的相关知识，此处不再赘述。
  2. 若内存中有如下布局(`Chunk B`、`Chunk C`均为`allocated`状态)： 
        +++++++++++++++++++++++++++++++++++++++++++
    |   Chunk A   |   Chunk B   |   Chunk C   |
    +++++++++++++++++++++++++++++++++++++++++++
我们在`Chunk A`处触发`Off-by-one`漏洞，将`Chunk B`的`size`域篡改为`Chunk B + Chunk
C`的大小，然后释放`Chunk B`，再次取回，我们此时就可以对`Chunk C`的内容进行任意读写了。
⚠️：篡改`Chunk B`的`size`域时，仍要保持`prev_issue`位为`1`，以免触发堆块合并。
⚠️：篡改`Chunk B`的`size`域时，需要保证将`Chunk C`完全包含，否则将无法通过以下所述的验证。
        // /glibc/glibc-2.23/source/malloc/malloc.c#L3985
    /* Or whether the block is actually not marked used.  */
    if (__glibc_unlikely (!prev_inuse(nextchunk)))
    {
        errstr = "double free or corruption (!prev)";
        goto errout;
    }
  3. 若内存中有如下布局(`Chunk B`为`freed`状态、`Chunk C`为`allocated`状态)： 
        +++++++++++++++++++++++++++++++++++++++++++
    |   Chunk A   |   Chunk B   |   Chunk C   |
    +++++++++++++++++++++++++++++++++++++++++++
我们在`Chunk A`处触发`Off-by-one`漏洞，将`Chunk B`的`size`域篡改为`Chunk B + Chunk
C`的大小，然后取回`Chunk B`，我们此时就可以对`Chunk C`的内容进行任意读写了。
⚠️：篡改`Chunk B`的`size`域时，仍要保持`prev_issue`位为`1`，以免触发堆块合并。
⚠️：篡改`Chunk B`的`size`域时，需要保证将`Chunk C`完全包含，否则将无法通过验证。
  4. 接下来是一种比较困难的构造方式，首先需要内存中是以下布局： 
        +++++++++++++++++++++++++++++++++++++++++++
    |   Chunk A   |   Chunk B   |   Chunk C   |
    +++++++++++++++++++++++++++++++++++++++++++
**其中要求，`Chunk A`的`prev_inuse`位置位，此时的三个`Chunk`均为`allocated`状态。**
我们申请时，要保证`Chunk C`的`size`域一定要是`0x100`的整倍数，那么我们首先释放`Chunk A`，再通过`Chunk
B`触发`Off-by-null`，此时`Chunk C`的`prev_inuse`位被清除，同时构造`prev_size`为`Chunk A ->
size + Chunk B -> size`，然后释放`Chunk_C`，此时因为`Chunk
C`的`prev_inuse`位被清除，这会导致向后合并的发生，从而产生一个大小为`Chunk A`，`Chunk B`，`Chunk
C`之和的`chunk`，再次取回后即可伪造`Chunk B`的结构。
####  Glibc 2.27 利用思路
### 触发`Unlink`
首先我们先来介绍一下`unlink`漏洞的发展过程。
####  In Glibc 2.3.2(or fd;
        BK = P->bk;
        FD->bk = BK;
        BK->fd = FD;
    }
可以发现，在远古版本的GLibc中，`Unlink`函数没有任何防护，直接就是简单的执行脱链操作，那么，一旦我们能控制`P`的`fd`域为`Fake_value`，`bk`域为`Addr
- 3 * Size_t`，那么在那之后执行`BK->fd = FD`时将会实际执行`(Addr - 3 * Size_t) + 3 * Size_t =
Fake_value`进而完成任意地址写。
####  In Glibc 2.23（Ubuntu 16.04）
    // /glibc/glibc-2.23/source/malloc/malloc.c#L1414
    /* Take a chunk off a bin list */
    #define unlink(AV, P, BK, FD) {
        FD = P->fd;
        BK = P->bk;
        if (__builtin_expect (FD->bk != P || BK->fd != P, 0))
            malloc_printerr (check_action, "corrupted double-linked list", P, AV);
        else {
            FD->bk = BK;
            BK->fd = FD;
            if (!in_smallbin_range (P->size)
                && __builtin_expect (P->fd_nextsize != NULL, 0)) {
                if (__builtin_expect (P->fd_nextsize->bk_nextsize != P, 0)
                    || __builtin_expect (P->bk_nextsize->fd_nextsize != P, 0)) 
                    malloc_printerr (check_action,
                                     "corrupted double-linked list (not small)",
                                     P, AV);
                if (FD->fd_nextsize == NULL) {
                    if (P->fd_nextsize == P)
                        FD->fd_nextsize = FD->bk_nextsize = FD;
                    else {
                        FD->fd_nextsize = P->fd_nextsize;
                        FD->bk_nextsize = P->bk_nextsize;
                        P->fd_nextsize->bk_nextsize = FD;
                        P->bk_nextsize->fd_nextsize = FD;
                    }
                } else {
                    P->fd_nextsize->bk_nextsize = P->bk_nextsize;
                    P->bk_nextsize->fd_nextsize = P->fd_nextsize;
                }
            }
        }
    }
在`Glibc 2.23`中，加入了两个检查，一个是在执行实际脱链操作前的链表完整性检查。
        if (__builtin_expect (FD->bk != P || BK->fd != P, 0))
            malloc_printerr (check_action, "corrupted double-linked list", P, AV);
这里就是就是检查`(P -> fd) -> bk == P == (P -> bk) ->
fd`，若我们能得到`P`的地址位置，如假设`P`的地址存储在`BSS`段中的`Chunk_addr`处，那么我们篡改`P ->
fd`为`Chunk_addr - 4 * Size_t`，`P -> bk`为`Chunk_addr - 3 *
Size_t`。那么在进行检查时将会产生怎样的效果呢：
    Chunk_addr - 4 * Size_t + 4 * Size_t == Chunk_addr == Chunk_addr - 3 * Size_t + 3 * Size_t
显然成立！
那么这样改会产生怎样的攻击效果呢？我们继续看，在执行实际脱链操作后：
    Chunk_addr - 4 * Size_t + 4 * Size_t = Chunk_addr - 3 * Size_t (实际未生效)
    Chunk_addr - 3 * Size_t + 3 * Size_t = Chunk_addr - 4 * Size_t
也就是`Chunk_addr = Chunk_addr - 4 *
Size_t`，若还有其他的`Chunk`地址在`Chunk_addr`周围，我们就可以直接攻击对应项，如果程序存在读写`Chunk`的函数且没有额外的`Chunk`结构验证，我们就可以进行任意地址读写了。
###  Glibc 2.27(Ubuntu 18.04)的新变化
####  合并操作变化
    /* consolidate backward */
    if (!prev_inuse(p)) {
        prevsize = prev_size (p);
        size += prevsize;
        p = chunk_at_offset(p, -((long) prevsize));
        unlink(av, p, bck, fwd);
    }
    /* consolidate forward */
    if (!nextinuse) {
        unlink(av, nextchunk, bck, fwd);
        size += nextsize;
    } else
        clear_inuse_bit_at_offset(nextchunk, 0);
可以发现，就合并操作而言，并没有什么新的保护措施。
####  `Unlink`内部变化
    // In /glibc/glibc-2.27/source/malloc/malloc.c#L1404
    /* Take a chunk off a bin list */
    #define unlink(AV, P, BK, FD) {
        if (__builtin_expect (chunksize(P) != prev_size (next_chunk(P)), 0))
            malloc_printerr ("corrupted size vs. prev_size");
        FD = P->fd;
        BK = P->bk;
        if (__builtin_expect (FD->bk != P || BK->fd != P, 0))
            malloc_printerr ("corrupted double-linked list");
        else {
            FD->bk = BK;
            BK->fd = FD;
            if (!in_smallbin_range (chunksize_nomask (P))
                && __builtin_expect (P->fd_nextsize != NULL, 0)) {
                if (__builtin_expect (P->fd_nextsize->bk_nextsize != P, 0)
                    || __builtin_expect (P->bk_nextsize->fd_nextsize != P, 0))
                    malloc_printerr ("corrupted double-linked list (not small)");
                if (FD->fd_nextsize == NULL) {
                    if (P->fd_nextsize == P)
                        FD->fd_nextsize = FD->bk_nextsize = FD;
                    else {
                        FD->fd_nextsize = P->fd_nextsize;
                        FD->bk_nextsize = P->bk_nextsize;
                        P->fd_nextsize->bk_nextsize = FD;
                        P->bk_nextsize->fd_nextsize = FD;
                    }
                } else {
                    P->fd_nextsize->bk_nextsize = P->bk_nextsize;
                    P->bk_nextsize->fd_nextsize = P->fd_nextsize;
                }
            }
        }
    }
和`GLIBC 2.23`相比，最明显的是增加了关于`prev_size`的检查：
    if (__builtin_expect (chunksize(P) != prev_size (next_chunk(P)), 0))
        malloc_printerr ("corrupted size vs. prev_size");
这一项会检查即将脱链的`chunk`的`size`域是否与他下一个`Chunk`的`prev_size`域相等，这一项检查事实上对向后合并的利用没有造成过多的阻碍，我们只需要提前将`chunk
0`进行一次释放即可：
    1. 现在有 Chunk_0、Chunk_1、Chunk_2、Chunk_3。
    2. 释放 Chunk_0 ，此时将会在 Chunk_1 的 prev_size 域留下 Chunk_0 的大小
    3. 在 Chunk_1 处触发Off-by-null，篡改 Chunk_2 的 prev_size 域以及 prev_inuse位
    4. Glibc 通过 Chunk_2 的 prev_size 域找到空闲的 Chunk_0 
    5. 将 Chunk_0 进行 Unlink 操作，通过  Chunk_0 的 size 域找到 nextchunk 就是 Chunk_1 ，检查 Chunk_0 的 size 与 Chunk_1 的 prev_size 是否相等。
    6. 由于第二步中已经在 Chunk_1 的 prev_size 域留下了 Chunk_0 的大小，因此，检查通过。
###  Glibc 2.29(Ubuntu 19.04)的新变化
⚠️：由于`Ubuntu 19.04`是非LTS(Long Term
Support，长期支持)版本，因此其软件源已经失效，因此若需要继续使用，需要把`apt`源修改为 **`18.04`的软件源**，两个版本相互兼容。
####  合并操作变化
    /* consolidate backward */
    if (!prev_inuse(p)) {
        prevsize = prev_size (p);
        size += prevsize;
        p = chunk_at_offset(p, -((long) prevsize));
        if (__glibc_unlikely (chunksize(p) != prevsize))
            malloc_printerr ("corrupted size vs. prev_size while consolidating");
        unlink_chunk (av, p);
    }
    /* consolidate forward */
    if (!nextinuse) {
        unlink_chunk (av, nextchunk);
        size += nextsize;
    } else
        clear_inuse_bit_at_offset(nextchunk, 0);
可以发现，合并操作增加了新保护:
    if (__glibc_unlikely (chunksize(p) != prevsize))
            malloc_printerr ("corrupted size vs. prev_size while consolidating");
这里注意，这和上文所述的`(chunksize(P) != prev_size (next_chunk(P))`是有本质区别的，这里的情况是：
    1. 检查 prev_inuse 位是否置位，来决定是否触发向后合并。
    2. 若触发，取出本 chunk 的 prev_size ，并根据 prev_size 找到要进行 unlink 的 chunk 。
    3. 检查要进行 unlink 的 chunk 的 size 域是否与取出的 prev_size 相等。
####  `Unlink`内部变化
    // In /glibc/glibc-2.29/source/malloc/malloc.c#L1460
    /* Take a chunk off a bin list.  */
    static void unlink_chunk (mstate av, mchunkptr p)
    {
        if (chunksize (p) != prev_size (next_chunk (p)))
            malloc_printerr ("corrupted size vs. prev_size");
        mchunkptr fd = p->fd;
        mchunkptr bk = p->bk;