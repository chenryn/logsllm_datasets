title:On the (In)Security of ElGamal in OpenPGP
author:Luca De Feo and
Bertram Poettering and
Alessandro Sorniotti
On the (In)Security of ElGamal in OpenPGP
Luca De Feo
IBM Research Europe – Zurich
Rüschlikon, Switzerland
PI:EMAIL
Bertram Poettering
IBM Research Europe – Zurich
Rüschlikon, Switzerland
PI:EMAIL
Alessandro Sorniotti
IBM Research Europe – Zurich
Rüschlikon, Switzerland
PI:EMAIL
ABSTRACT
Roughly four decades ago, Taher ElGamal put forward what is
today one of the most widely known and best understood public key
encryption schemes. ElGamal encryption has been used in many
different contexts, chiefly among them by the OpenPGP standard.
Despite its simplicity, or perhaps because of it, in reality there is a
large degree of ambiguity on several key aspects of the cipher. Each
library in the OpenPGP ecosystem seems to have implemented a
slightly different “flavour” of ElGamal encryption. While –taken in
isolation– each implementation may be secure, we reveal that in the
interoperable world of OpenPGP, unforeseen cross-configuration
attacks become possible. Concretely, we propose different such
attacks and show their practical efficacy by recovering plaintexts
and even secret keys.
CCS CONCEPTS
• Security and privacy → Public key encryption.
KEYWORDS
OpenPGP, ElGamal encryption, side-channel attacks, key-recovery
attacks, modular exponentiation
ACM Reference Format:
Luca De Feo, Bertram Poettering, and Alessandro Sorniotti. 2021. On the
(In)Security of ElGamal in OpenPGP. In Proceedings of the 2021 ACM SIGSAC
Conference on Computer and Communications Security (CCS ’21), November
15–19, 2021, Virtual Event, Republic of Korea. ACM, New York, NY, USA,
15 pages. https://doi.org/10.1145/3460120.3485257
1 INTRODUCTION
The ElGamal cryptosystem [14] is one of the oldest and best-known
public key encryption schemes. In the 80’s and 90’s it earned wide
adoption for being simultaneously efficient and patent-free. Its most
prominent use is arguably as part of OpenPGP [12], a standard
aimed to promote consumable, interoperable email security, where
it has been the default and most popular encryption option for
decades [31]. While the change in patent status of RSA encryption
slightly reduced its popularity, at the time of writing, still at least 1
in 6 registered OpenPGP keys have an ElGamal subkey [3], with
about a 1,000 new registrations per year.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea.
© 2021 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3485257
The ElGamal scheme builds on elegant mathematical structures
and can be defined very compactly. This simplicity, together with
the opportunity to mature for roughly four decades now, suggests
that a crisp specification with clear parameter choices, rules, and
algorithms would be present in international standards, in partic-
ular in OpenPGP. Surprisingly, this turns out not to be the case:
our research reveals that OpenPGP’s understanding of ElGamal
encryption is open to interpretation, with several choices subject
to the discretion of the implementer.
In this article we consider cross-configuration attacks on OpenPGP.
Such attacks emerge when different interpretations (‘configura-
tions’) of the same standard interact insecurely with each other. To-
wards identifying such conditions for ElGamal encryption, we need
to first understand the universe of OpenPGP interpretations that
are used in practice. We approach this challenge from various an-
gles: we carefully study RFC4880 [12] which defines OpenPGP, we
inspect the source code of three relevant OpenPGP-implementing
software libraries (the Go standard library, Crypto++, and gcrypt),
and we conduct a large-scale examination of millions of keys regis-
tered on OpenPGP key servers.
Our results reveal an insecure posture. For instance, we develop
and prototype a plaintext recovery attack that can be mounted
on ciphertexts produced by the ubiquitous GNU Privacy Guard
(and other implementations, e.g. Crypto++) against keys generated
following the original ElGamal specification [14]. The attack is
effective against 2048 bit keys, which are considered secure at the
time of writing. Our OpenPGP key server analysis reveals that more
than 2,000 OpenPGP users are currently exposed.1 We further illus-
trate how cross-configuration attacks can be combined with known
side-channel exploitation techniques like FLUSH+RELOAD [39] or
PRIME+PROBE [34]. One of our targets is the ElGamal implementa-
tion of gcrypt, the cryptographic library used by the GNU Privacy
Guard. Interestingly, gcrypt has already been fixed twice after sem-
inal work [22, 39] on side-channel attacks identified weaknesses.
Concretely, by conducting an end-to-end attack we show that if a
2048 bit ElGamal key generated by Crypto++ is used by gcrypt to
decrypt a ciphertext, then an attacker that is OS- or VM-colocated
with the decrypter can fully recover the decryption key.
Given that interoperability is the explicit and almost exclusive
goal of any standardization effort, and commonplace in the OpenPGP
world, we conclude that our attack conditions are as realistic as
the attack results awakening. Our research is timely since a new
version of the OpenPGP standard is currently being discussed [19];
we hope that our findings will influence that discussion.
This manuscript is organised as follows: In Section 2 we survey
(a) the meaningful options available when implementing ElGa-
mal encryption, (b) the options adopted by the Go, Crypto++, and
1We found that at most a small fraction of ElGamal keys is formed according to the
original specification of [14]; otherwise, more OpenPGP users would be affected.
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2066gcrypt libraries, and (c) the options picked by over 800,000 users
in practice (as far as reflected on key server databases); we also
report on further interesting findings from our key server crawl. In
Section 3 we recall various standard algorithms for solving discrete
logarithms. In Section 4 we describe “vanilla” cross-configuration
attacks, and in Section 5 we describe those combined with side-
channel attacks. In Section 6 we conduct end-to-end exploits and
describe how we bring in the required side-channel information.
We conclude in Section 7.
For the full version of this article see [15].
1.1 Related Work
Since ElGamal encryption was first proposed [14], research efforts
were both steered towards formally confirming its security (e.g. via
reductions to the DDH problem [35]) and to shed light on its insecu-
rities (e.g. when used in its textbook form [10]). CVE-2018-6829 [2]
and CVE-2018-6594 [1] highlight corresponding issues in one of the
libraries that we investigate (gcrypt). However, OpenPGP employs
ElGamal encryption exclusively for key transport to achieve hybrid
encryption, and in this case the attacks do not seem to apply. To the
best of our knowledge, our work is the first to challenge the security
of ElGamal encryption in the specific way OpenPGP builds and
relies on it. (Early versions of OpenPGP also relied on the known
to be insecure ElGamal signatures [9]; the weaknesses of the latter
do not suggest weaknesses of ElGamal encryption.)
Several works on OpenPGP focus on Web of Trust aspects [7,
13, 36], on OpenPGP’s use of other cryptographic primitives such
as modes of operation of symmetric ciphers [26, 28], or on the
security of passphrases protecting keyrings [25]. An analysis of
keys collected from OpenPGP servers was performed in [31]. In
contrast to our work (see Section 2), [31] does not distinguish
between different flavours of ElGamal parameters and keys.
Modular exponentiation has been the subject of extensive re-
search to protect it from side-channel attacks [4, 16, 18, 24]. Specif-
ically cache-based attacks have been explored extensively, using
various techniques such as EVICT+TIME [8], PRIME+PROBE [34]
or FLUSH+RELOAD [6, 39]. These techniques attempt to observe
the micro-architectural traces left by the execution of sensitive cryp-
tographic operation to obtain knowledge about the secret inputs
thereto. For example, if a branch instruction is conditional to a se-
cret bit, that bit may be learned if the attacker observes whether the
instructions at the target or the fallthrough are present in the cache.
Presence or absence from the cache is observed through measur-
ables such as execution time, which is faster if the instructions are
cached or slower otherwise. Similar considerations can be made for
memory areas that are accessed at secret-dependent offsets: in this
case, an attacker may learn whether a specific location was accessed
by measuring access time to cache elements whose addresses are
congruent to the target location. Yarom and Falkner [39] in partic-
ular target the gcrypt implementation of modular exponentiation
which at the time was using square-and-multiply. Prompted by that
work, the implementation was significantly revised. The changes
are however not sufficient to protect against the attack we present
in Section 5. Most cache-based side-channel attacks target L1 or L2.
However, Liu et al. [22] show that exploitation based on last-level
cache is possible for attacks targeting both data and instructions.
The work also targets the gcrypt implementation of modular ex-
ponentiation and the library has also been fixed to avoid leaking
table accesses. Once again however, this is not sufficient to prevent
the attack described in Section 5. Other works present alternative
cache side-channels (FLUSH+FLUSH [17], S$A [5]) which may be
used to perform a practical exploitation of the attacks.
2 ELGAMAL ENCRYPTION
One of the earliest proposals to construct public key encryption is
by Taher ElGamal [14]. As a first approximation, the construction
is as follows.
☛ Generic ElGamal encryption. Let 𝐺 be a (multiplicatively
written) group and 𝑔 ∈ 𝐺 a generator. To create a key pair (sk, pk),
pick a random integer 𝑥, compute the group element 𝑋 = 𝑔𝑥, and
output (sk, pk) (cid:66) (𝑥, 𝑋). Given pk, to encrypt a message 𝑀, pick an
ephemeral random integer 𝑦, compute the group elements 𝑌 = 𝑔𝑦
and 𝑍 = 𝑋 𝑦 = 𝑔𝑥 𝑦, and output 𝐶 = (𝐶1, 𝐶2) (cid:66) (𝑌, 𝑀 · 𝑍) as the
ciphertext. Given sk, to decrypt 𝐶, first recover group element 𝑍
from 𝐶1 by computing 𝑍 = 𝑌 𝑥 = 𝑔𝑦𝑥 and then use 𝐶2, 𝑍 to recover
𝑀 = 𝐶2/𝑍.
The ElGamal encryption scheme, as described above, is not yet
fully specified. To complete the specification, the following details
have to be fixed: Which group 𝐺 shall be used? How is generator 𝑔
chosen, and shall it generate the full group 𝐺 or just a subgroup?
From which sets are exponents 𝑥, 𝑦 picked, and according to which
distributions? Multiple configurations for these parameters are pos-
sible and promise to lead to correct and secure public key encryption
instances.
In the following we describe four such configurations that have
in common that 𝐺 is a ‘prime field group’, that is, the multiplicative
𝑝 = (Z/𝑝Z)× of a field Z/𝑝Z where 𝑝 is a large prime
group Z×
number (also referred to as the modulus). In such cases the order
of 𝐺 is given by ord(𝐺) = 𝑝 − 1 and the order of any subgroup
𝐺′ ⊆ 𝐺 is an integer divisor of 𝑝 − 1.
☛ Configuration A: “The original”. In the original proposal
of ElGamal [14], generator 𝑔 is chosen such that it generates the full
group, i.e., cyclically generates a total of 𝑝 −1 elements. Further, the
exponents 𝑥, 𝑦 are picked uniformly at random from the interval
[1 .. 𝑝 − 1]. The only condition on 𝑝 that is formulated in [14] is
that 𝑝 − 1 have at least one large prime factor. This is to sufficiently
weaken the impact of the Pohlig–Hellman algorithm [29] so that it
remains infeasible to compute discrete logarithms in 𝐺. See Appen-
dix A for the recommendations in terms of size of 𝑝 and of its large
prime factor.
Note that if keys are generated according to Configuration A,
then any element in 𝐺 could become a public key. However, some
of these public keys would have a considerably lower multiplicative
order than others and thus promise less security. To see this, con-
sider that picking the secret key 𝑥 = (𝑝 − 1)/2, i.e., the public key
𝑋 = 𝑔(𝑝−1)/2 = −1, leads to 𝑍 ∈ {+1,−1} for any 𝑦, meaning that
encrypted messages are easy to recover from their ciphertexts. In
general, if the indications of [14] are followed verbatim, many more
similarly weak low-order public keys exist. This can be prevented
by restricting the ElGamal group operations to a subgroup 𝐺′ ⊊ 𝐺
such that 𝐺′ has prime order. Indeed, if 𝐺′ = ⟨𝑔⟩ has prime order,
then all elements generated by 𝑔 necessarily have the same order
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2067as 𝑔 (with the one exception of the neutral element which is easily
avoided or tested for).
Let 𝑝−1 = 𝑞0 · · · 𝑞𝑛 be the prime factor decomposition of ord(𝐺).
As 𝑝 is a large prime number and hence odd, we know that one of
these prime factors is 2, and we hence w.l.o.g. write 𝑝−1 = 2𝑞1 · · · 𝑞𝑛.
Now, for any prime 𝑞 = 𝑞𝑖 in this list of factors there exists a
subgroup 𝐺′ ⊊ 𝐺 of order 𝑞. The idea of using such groups 𝐺′ in
cryptography goes back to Schnorr [32].
☛ Configuration B: “ElGamal over Schnorr groups”. Pick
a large prime group order 𝑞 and a prime modulus 𝑝 such that
𝑞 | (𝑝 − 1), choose a generator 𝛾 with ⟨𝛾⟩ = 𝐺 and let 𝑔 = 𝛾 (𝑝−1)/𝑞
and 𝐺′ = ⟨𝑔⟩. Note that this implies ord(𝐺′) = 𝑞. Pick exponents
𝑥, 𝑦 in the interval [1 .. 𝑞 − 1]. Note that the condition on 𝑝 (at least
one large prime factor) is already satisfied by the choice of 𝑝 and 𝑞.
Note that Configuration B not only removes the described issues
related to small subgroups, but it also allows for more efficient
implementations than Configuration A. This is so because the ex-
ponents 𝑥, 𝑦 are now picked from the interval [1 .. 𝑞 − 1] instead
of the typically much larger interval [1 .. 𝑝 − 1], which in general
leads to a significant efficiency gain for exponentiation operations.
A further advantage achieved by Configuration B is that the
prime-order subgroup setting is considerably easier tractable in