with unrelated sites. Some of the most rudimentary examples, most of them
known for well over a decade,13 include the following:
 Using onload handlers to measure the time it takes to load certain docu-
ments, an indication of whether they have been previously visited and
cached by the browser or not.14
 Using onload and onerror on  tags to see if an authentication-requir-
ing image on a third-party site can be loaded, thus disclosing whether
the user is logged into that site or not. (Bonus: Sometimes, the error
message disclosed to the onerror handler will include snippets of the tar-
geted page, too.)
 Loading an unrelated web application in a hidden frame and examining
properties such as the number and names of subframes created on that
page (available through the .frames[] array) or the set of global
variables (sometimes leaked through the semantics of the delete opera-
tor) in order to detect the same. Naturally, the set of sites the user visits
or is logged into can be fairly sensitive.
In addition to these tricks, a particularly frightening class of privacy prob-
lems is associated with two APIs created several years ago to help websites under-
stand the style applied to any document element (the sum of browser-specific
defaults, CSS rules, and any runtime tweaks made automatically by the browser
or performed via JavaScript). The two APIs in question are getComputedStyle,
mandated by CSS Level 2,15 and currentStyle, proprietary to Internet Explorer.16
Their functionality, together with the ability to assign distinctive styling to
visited links (using the :visited pseudo-class), means that any rogue JavaScript
can rapidly display and examine thousands of URLs to see which ones are
shaded differently (due to being present in a user’s browsing history), thereby
building a reliable, extensive, and possibly incriminating overview of a user’s
online habits with unprecedented efficiency and reliability.
This problem has been known since at least since 2002, when Andrew
Clover posted a brief note about it to the popular BUGTRAQ mailing list.17
The issue received little scrutiny in the following years, until a series of
layperson-targeted demonstrations and a subsequent public outcry around
2006. A few years later, Firefox and WebKit browsers rolled out security
improvements to limit the extent of styling possible in :visited selectors
andtolimit the ability to inspect the resulting composite CSS data.
That said, such fixes will never be perfect. Even though they make
automated data collection impossible, smaller quantities of data can be
obtained with a user’s help. Case in point: Collin Jackson and several other
researchers proposed a simple scheme that involved presenting a faux
184 Chapter 11
CAPTCHA* consisting of seven-segment, LCD-like digits.18 Rather than being
an actual, working challenge, the number the user would see depended on
the :visited-based styling applied to superimposed links (see Figure 11-5); by
typing that number back onto the page, the user would unwittingly tell the
author of the site what exact styling had been applied and, therefore, what
sites appeared in the victim’s browsing history.
Vertical pipe character (|) linked
to www.fuzzybunnies.com
(white if visited)
Segment linked to
www.bunnyoutlet.com
(white if visited)
Figure 11-5: A fake seven-segment display can be used to read
back link styling when the displayed number is entered into the
browser in an attempt to solve a CAPTCHA. The user will see
5, 6, 9, or 8, depending on prior browsing history.
Other SOP Loopholes and Their Uses
Although this chapter has focused on areas where the limitations of the
same-origin policy have a clear, negative impact on the security or privacy of
online browsing, there are several accidental gaps in the scheme that in most
cases seem to be of no special consequence. For example, in many versions
of Internet Explorer, it was possible to manipulate the value of window.opener
or window.name of an unrelated window. Meanwhile in Firefox, there are cur-
rently no constraints on setting location.hash across domains, even though all
other partial location properties are restricted.
The primary significance of these mechanisms is that they are often
repurposed to build cross-domain communication channels in browsers that
do not support the postMessage(...) API. Such mechanisms are often built on
shaky ground: The lack of SOP enforcement is typically uniform and means
that any website, not just the “authorized” parties, will be able to interfere with
the data. The ability for rogue parties to navigate nested frames, as discussed
in “Frame Hijacking Risks” on page175, further complicates the picture.
* CAPTCHA (sometimes expanded as Completely Automated Public Turing test to tell Com-
puters and Humans Apart) is a term for a security challenge that is believed to be difficult to
solve using computer algorithms but that should be easy for a human being. It is usually imple-
mented by showing an image of several randomly selected, heavily distorted characters and ask-
ing the user to type them back. CAPTCHA may be used to discourage the automation of certain
tasks, such as opening new accounts or sending significant volumes of email. (Needless to say,
due to advances in computer image processing, robust CAPTCHAs are increasingly difficult for
humans to solve, too.)
Life Outside Same-Origin Rules 185
Security Engineering Cheat Sheet
Good Security Hygiene for All Websites
 Serve all content for your site with X-Frame-Options: sameorigin. Make case-by-case excep-
tions only for specific, well-understood locations that require cross-domain embedding.
Try not to depend on JavaScript “framebusting” code to prevent framing because it’s very
tricky to get that code right.
 Return user-specific, sensitive data that is not meant to be loaded across domains using
well-constrained formats that are unlikely to be misinterpreted as standalone scripts,
stylesheets, and so on. Always use the right Content-Type.
When Including Cross-Domain Resources
 In many scenarios (especially when dealing with scripts, stylesheets, fonts, and certain
types of plug-in-handled content), you are linking the security of your site to the originat-
ing domain of the subresource. When in doubt, make a local copy of the data instead. On
HTTPS sites, require all subresources to be served over HTTPS.
When Arranging Cross-Domain Communications in JavaScript
 Consult the cheat sheet in Chapter 9. Do not use cross-frame communication schemes
based on location.hash, window.name, frameElements, and similar ephemeral hacks, unless
you are prepared to deal with injected content.
 Do not expect subframes on your page to sit still, especially if you are not using X-Frame-
Options to limit the ability of other sites to frame your application. In certain cases, an
attacker may be able to navigate such frames to a different location without your knowl-
edge or consent.
186 Chapter 11
O T H E R S E C U R I T Y
B O U N D A R I E S
All previously described origin-level content-isolation
policies, and the accompanying context inheritance
and document navigation logic, work hand in hand to
form the bulk of the browser security model. Impene-
trable and fragile, that model is also incomplete: A
handful of interesting corner cases completely escape
any origin-based frameworks.
The security risks associated with these corner cases can’t be addressed
simply by fine-tuning the mechanisms discussed earlier in this book. Instead,
additional, sometimes hopelessly imperfect security boundaries need to be
created from scratch. These new boundaries may, for example, further
restrict the ability of rogue web pages to navigate to certain URLs.
This chapter offers a quick look at some of the most significant examples
of the loopholes in the origin-based model and the ways that vendors have
dealt with them.
Navigation to Sensitive Schemes
In the past, browser vendors reasoned that there was no harm in allowing
anypage on the Internet to navigate to a document stored on a user’s hard
drive using the file: protocol or to open a new window pointing to a privi-
leged resource, such as the about:config page in Firefox. After all, they thought,
the originating document and the destination would not be same-origin,
and, therefore, any direct access to the sensitive data would be prevented.
For many years, based on this rationale, browsers permitted such naviga-
tion to take place. Alas, this decision proved to be not only extremely confus-
ing* but also dangerous. The danger comes from the fact that many programs,
browsers included, tend to store various types of Internet-originating content
in the filesystem; temporary files and cached documents are a common exam-
ple. In many cases, an attacker could have some control over the creation
and contents of such files, and, if the resources are created at a predictable
location, subsequent navigation to the right file: URL could allow the attacker
to execute his own payload in this coveted origin, with access to any other
fileon the disk and, perhaps, any other website on the Internet.
Comparably disastrous consequences have been observed with a variety
of privileged, internally handled URLs. The ability to navigate directly to
locations such as about:config (Firefox) not only made it possible to exploit
potential vulnerabilities in the privileged scripts (a transgression to which
browser vendors are not immune) but also led to system compromise if,
through a literal application of the same-origin policy, the browser naïvely
deemed about:config and about:blank to come from the same origin.
Having learned from a history of painful mishaps, modern browsers typi-
cally police navigation based on three tiers of URL schemes:
 Unrestricted This category includes virtually all true network protocols,
such as HTTP, HTTPS, FTP; most encapsulating pseudo-protocols such
as mhtml: or jar:; and all schemes registered to plug-ins and external appli-
cations. Navigation to these URLs is not constrained in any specific way.
 Partly restricted This category includes several security-sensitive schemes
such as file: and special pseudo-URLs such as javascript: or vbscript:. Navi-
gation to them is not completely denied, but it is subject to additional,
scheme-specific security checks. For example, access to file: is usually
permitted only from other file: documents, requiring the first one to be
opened manually. (The rules for navigation to javascript: URLs were dis-
cussed in Chapter 10.)
 Fully restricted This category includes privileged pages in about:, res:,
chrome:, and similar browser-specific namespaces. Normal, unprivileged
HTML documents are not permitted to navigate to them under any
circumstance.
* For example, on Windows systems, a common prank was to use a seamlessly embedded 
pointing to file:///c:/ in order to display the contents of a victim’s hard drive, leading some users
to believe that the page doing so has somehow gained access to their files.
188 Chapter 12
Access to Internal Networks
The trouble with accessing sensitive protocols is merely a prelude to a far
more serious issue that somehow escaped the creators of the same-origin
policy. The problem is that DNS-derived origins may have nothing to do with
actual network-level boundaries—or with how these boundaries change over
time. A malicious script may be granted same-origin access to intranet sites
on the victim’s local network, even if a firewall prevents the attacker from
interacting with these destinations directly.
There are at least three distinctive venues for such attacks.
Origin Infiltration
When a user visits a rogue network—such as an open wireless network at
an airport or in a café—an attacker on that network may trick the victim’s
browser into opening a URL such as http://us-payroll/. When this happens,
the attacker may provide his own, spoofed content for that site. Frighten-
ingly, if the user then brings the same browser to a corporate network,
the previously injected content will have same-origin access to the real
version of http://us-payroll/, complete with the user’s ambient credentials.
The persistence of injected content may be achieved in a couple of
ways. The most basic method is for an attacker simply to inject a hidden
http://us-payroll/ frame onto every visited page in the hope that the user
will suspend a portable computer with the browser still running and then
take it to another network. Another technique is cache poisoning: creating
long-lived, cached objects that the browser will use instead of retrieving
afresh copy from the destination site. Several other, more obscure
approaches also exist.
DNS Rebinding
This arguably less serious but more easily exploitable problem was men-
tioned in footnote 1 in Chapter 9. In short, since the same-origin policy
looks just at the DNS name of a host, not at the IP address, an attacker
who owns bunnyoutlet.com is free to respond initially to a DNS lookup
from a user with a public IP such as 213.134.128.25 and then switch to
anaddress reserved for private networks, such as 10.0.0.1. Documents
loaded from both sources will be considered same-origin, giving the
attacker the ability to interact with the victim’s internal network.
The mitigating factor is that this interaction will not involve proper
ambient credentials that the victim normally has for the targeted site: As
far as the browser is concerned, it is still talking to bunnyoutlet.com and not
to, say, the aforementioned us-payroll site. Still, the prospect of the attacker
examining the internal network and perhaps trying to brute-force the
appropriate credentials or identify vulnerabilities is disconcerting.
Other Security Boundaries 189
Simple Exploitation of XSS or XSRF Flaws
Even outside the realm of the same-origin policy, the mere possibility
ofnavigating to intranet URLs means that the attacker may attempt to
(blindly) target known or suspected vulnerabilities in locally running
software. Because internal applications are thought to be protected from
malicious users, they are often not engineered or maintained to the
same standards as externally facing code.
One striking example of this problem is the dozens of vulnerabilities
discovered over the years in internal-only web management interfaces
ofhome network routers manufactured by companies such as Linksys
(Cisco), Netgear, D-Link, Motorola, and Siemens. Cross-site request forg-
ery vulnerabilities in these applications can, in extreme cases, permit
attackers to access the device and intercept or modify all network traffic
going to or through it.
So far, the disconnect between browser security mechanisms and net-
work segmentation remains an unsolved problem in browser engineering.
Several browsers try to limit the impact of DNS rebinding by caching DNS
responses for a predefined time—a practice known as DNS pinning—but the
defense is imperfect, and the remaining attack vectors still remain.
NOTE Unusually, Internet Explorer takes the lead on this front, offering an optional way to
mitigate the risk. Microsoft’s users are protected to some extent if they flip a cryptic zone
setting named “websites in less privileged web content zone can navigate into this zone”
to “disable” in the configuration options for local intranet. Unfortunately, the zone
model in Internet Explorer comes with some unexpected pitfalls, as we’ll discuss in
Chapter 15.
Prohibited Ports
Security researchers have cautioned that the ability of browsers to sub-
mitlargely unconstrained cross-origin request bodies, for example with
, may interfere with certain other
fault-tolerant but non-HTTP network services. For example, consider SMTP,
the dominant mail transfer protocol: When interacting with an unsuspect-
ing browser, most servers that speak SMTP will patiently ignore the first few
incomprehensible lines associated with HTTP headers and then honor any
SMTP commands that appear in the request body. In effect, the browser
could be used as a proxy for relaying spam.
A related but less well-explored concern, discussed in Chapter 3, is the
risk of an attacker talking to non-HTTP services running in the same domain
as the targeted web application and tricking the browser into misinterpreting
the returned, possibly partly attacker-controlled data as HTML delivered over
HTTP/0.9. This behavior could expose cookies or other credentials associ-
ated with the targeted site.
The design of HTTP makes it impossible to solve these problems in
aparticularly robust way. Instead, browser vendors have responded in a
rather unconvincing manner: by shipping a list of prohibited TCP ports
190 Chapter 12
towhich requests cannot be sent. For Internet Explorer versions 6 and 7,
thelist consists of the following port numbers:
19 chargen
21 ftp
25 smtp
110 pop3
119 nntp
143 imap2
Versions 8 and 9 of Internet Explorer further prohibit ports 220 (imap3)
and 993 (ssl imap3).
All other browsers discussed in this book use a different, common list:
1 tcpmux 115 sftp
7 echo 117 uccp-path
9 discard 119 nntp
11 systat 123 ntp
13 daytime 135 loc-srv
15 netstat 139 netbios
17 qotd 143 imap2
19 chargen 179 bgp
20 ftp-data 389 ldap
21 ftp 465 ssl smtp
22 ssh 512 exec
23 telnet 513 login
25 smtp 514 shell
37 time 515 printer
42 name 526 tempo
43 nicname 530 courier
53 domain 531 chat
77 priv-rjs 532 netnews
79 finger 540 uucp
87 ttylink 556 remotefs
95 supdup 563 ssl nntp
101 hostriame 587 smtp submission
102 iso-tsap 601 syslog
103 gppitnp 636 ssl ldap
104 acr-nema 993 ssl imap
109 pop2 995 ssl pop3
110 pop3 2049 nfs
111 sunrpc 4045 lockd
113 auth 6000 X11
Other Security Boundaries 191
There are, of course, various protocol-specific exceptions to these rules.
For example, ftp: URLs are obviously permitted to access port 21, normally
associated with that protocol.
The current solution is flawed in several ways, the most important of