是否把返回值的类型声明为该类型的引用，并在函数结束前返回实
CMyString& str);
第2章面试需要的基础知识
-25
---
## Page 40
剑指Offer-
strTemp.m_pData指向的内存就是实例之前m_pData 的内存，这就相当于自
strTemp 的析构函数，把 strTemp.m_pData 所指向的内存释放掉。由于
变量，但程序运行到if 的外面时也就出了该变量的作用域，就会自动调用
strTemp.m_pData和实例自身的m_pData做交换。由于strTemp是一个局部
CMyString& CMyString::operator =(const CMyString &str)
个临时实例，再交换临时实例和原来的实例。下面是这种思路的参考代码：
确保 CMyString 的实例不会被修改。我们还有一个更好的办法是先创建一
在分配内容成功之后再释放原来的内容，也就是当分配内存失败时我们能
单的办法是我们先用new分配新内容再用delete 释放已有的内容。这样只
全性（Exception Safety）原则。
抛出一个异常，CMyString的实例不再保持有效的状态，这就违背了异常安
指针，这样非常容易导致程序崩溃。也就是说一旦在赋值运算符函数内部
的内存。如果此时内存不足导致 new char 抛出异常，m_pData 将是一个空
考虑异常安全性的解法，高级程序员必备
能会提出更高的要求。
官可能会让他通过这轮面试。但如果面试的是C++高级程序员，面试官可
或者C++初级程序员，能全面地考虑到前面四点并完整地写出代码，面试
在这个函数中，我们先创建一个临时实例 strTemp，接着把
return *this;
if(this!=&str)
要想在赋值运算符函数中实现异常安全性，我们有两种方法。
在前面的函数中,我们在分配内存之前先用 delete释放了实例m_pData
这是一般C++教材上提供的参考代码。如果接受面试的是应届毕业生
return *this;
m_pData =new char[strlen(str.m_pData)+1];
m_pData =pTemp;
char* pTemp = strTemp.m_pData;
CMyString strTemp(str);
一名企面试官精讲典型编程题（纪念版）
一个简
---
## Page 41
很多关键字甚至语法都和C++很类似。对一个学习过C++编程的程序员而
会要求应聘者掌握C#。
用，所以我们也不难理解为什么现在很多基于Windows系统开发的公司都
开发平台，因此C#无论在桌面软件还是网络应用的开发上都有着广泛的应
Windows至今仍然是用户最多的操作系统，而.NET又是微软近年来力推的
2.2.2
代码的异常安全性有很深的理解，那么他自然也就能通过这轮面试了。
果由于内存不足抛出诸如 bad_alloc 等异常，我们还没有修改原来实例的状
动调用析构函数释放实例的内存。
态，
C#可以看成是一门以C++为基础发展起来的一种托管语言，因此它的
C#是微软在推出新的开发平台.NET时同步推出的编程语言。由于
本题考点：
如果应聘者在面试的时候能够考虑到这个层面，面试官就会觉得他对
因此实例的状态还是有效的，这也就保证了异常安全性。
在新的代码中，我们在CMyString 的构造函数里用 new 分配内存。如
测试用例：
本题完整的源代码详见01_AssignmentOperator项目。
源代码：
C#
对高级C++程序员，面试官还将考查应聘者对代码异常安全性的理解。
考查对C++的基础语法的理解，
考查对内存泄露的理解。
连续赋值。
把一个CMyString的实例赋值给它自己。
把一个 CMyString 的实例赋值给另外一个实例。
，如运算符函数、常量引用等。
第2章面试需要的基础知识27
---
## Page 42
28
剑指Offer-
class B
class A
有意思的面试题，比如运行下面的C#代码，输出的结果是什么？
运行时自动调用，而且保证只调用一次。关于静态构造函数，我们有很多
构造函数：静态构造函数。这个函数的特点是在类型第一次被使用之前由
因此对程序员来说是不确定的。另外，在C#中可以为类型定义一个特殊的
时（CLR）做垃圾回收时才会被调用，它的调用时机是由运行时决定的，
字，但与C++析构函数的调用时机是确定的不同，C#的Finalizer是在运行
Finalizer方法虽然写法与C++的析构函数看起来一样，都是~后面跟类型名
我们在C#中可以为类型定义一个 Finalizer 和 Dispose 方法以释放资源。
是引用类型，引用类型的实例在堆上分配内存。
是 struct定义的是值类型，值类型的实例在栈上分配内存；而class 定义的
量的访问权限级别，struct 和 class 中都是private 的。struct 和class 的区别
中默认的是public，而在class 中默认的是private。
区别？
同的语法特点。
可的地方以考查我们是不是真的理解了，因此我们要着重注意C#与C++不
者不同的地方却不是一件很容易的事情。面试官总是喜欢深究我们模棱两
识到，虽然学习C#与C++相同或者类似的部分很容易，但要掌握并区分两
言，他用不了多长时间学习就能用C#来开发软件。然而我们也要清醒地认
staticB()
Aa2=newA（"a2");
static A al = new A("a1");
public A(string text)
在C#中，每个类型中和C++一样，都有构造函数。但和C++不同的是，
应聘者：如果没有标明成员函数或者成员变量的访问权限级别，在struct
面试官：C++中可以用 struct 和class 来定义类型。这两种类型有什么
应聘者：C#和C++不一样。在C#中如果没有标明成员函数或者成员变
面试官：那在C#中呢？
Console.WriteLine(text);
一名企面试官精讲典型编程题（纪念版）
。下面的面试片段就是一个例子：
---
## Page 43
class Program
internalclass
[Serializable]
internal class A:MarshalByRefobject
[Serializable]
于反射和应用程序域的代码，运行它得到的结果是什么？
联，要花很多时间学习研究才能透彻地理解它们。下面的代码就是一段关
有的功能，比如反射、应用程序域（AppDomain）等。这些概念还相互关
面的代码，
成员变量，
接下来执行Bb=newBO，即调用B的普通构造函数。构造函数先初始化
初始化类型的静态变量，再执行函数体内的语句。因此先打印al再打印a3。
class Program
public void SetNumber(int value)
public static int Number;
public void SetNumber(int value)
public static int Number;
我们除了要关注C#和C++不同的知识点之外，还要格外关注C#一些特
在调用类型B的代码之前先执行B的静态构造函数。静态构造函数先
static void Main(string[] args)
publicB()
Number = value;
Number=value;
Bb=new B();
a2=newA("a4");
al=newA("a3");
得到的结果将是打印出4行，分别是al、a3、a2、a4。
再执行函数体内的语句，因此先后打印出 a2、a4。因此运行上
B
第2章面试需要的基础知识
←
---
## Page 44
▼
剑指Offer-
Console.WriteLine时，它将输出20。
改默认的域上的B.Number并设为20。再在默认的域上调用
序域。此时调用方法b.SetNumber也是在缺省的应用程序域上进行，它将修
试图在NewDomain 域中生成B 的实例，但会把实例b 复制到默认的应用程
用程序域的边界时，将会完整地复制实例。因此在上述代码中，我们尽管
输出仍然是10。
响。由于Console.WriteLine 是在默认的应用程序域中输出A.Number，因此
域中的静态变量A.Number 对默认域中的静态变量A.Number 没有任何影
由于静态变量在每个应用程序域中都有一份独立的拷贝，修改NewDomain
用该方法，它将修改NewDomain域中静态变量A.Number的值并设为20。
的A的一个实例。当调用a的方法SetNumber时，是在NewDomain域中调
只是在默认的域中的一个代理实例（Proxy），它指向位于NewDomain 域中
不相同。
样，但由于基类不同而导致在跨越应用程序域的边界时表现出的行为将大
型A 是继承自 MarshalByRefObject，而 B 不是。虽然这两个类型的结构一
利用反射机制创建类型A的一个实例和类型B的一个实例。我们注意到类
接着讨论B。由于B只是从Object 继承而来的类型，它的实例穿越应
先考虑A 的情况。由于A 继承自 MarshalByRefObject，那么 a实际上
下面推荐两本C#相关的书籍，以方便大家应对C#面试并学习好C#。
上述C#代码先创建一个名为NewDomain的应用程序域，并在该域中
static void Main(string[] args)
Console.WriteLine("Number in class B is (O)", B.Number);
b.SetNumber(20);
String nameOfB = typeof(B).FullName;
B.Number=10;
Console.WriteLine("Number in class A is (O)", A.Number);
a.SetNumber(20);
A a = domain.CreateInstanceAndUnwrap(assambly,nameOfA) as A;
A.Number=10;
String assambly = Assembly.GetEntryAssembly().FullName;
一名企面试官精讲典型编程题（纪念版）
b
domain.
.CreateInstanceAndUnwrap(assambly,nameOfB) as B;
---
## Page 45
public sealed class Singletonl
该实例。下面定义类型 Singletonl就是基于这个思路的实现：
以禁止他人创建实例。我们可以定义一个静态的实例，在需要的时候创建
不好的解法一：只适用于单线程环境
的类型是一个很常见的面试题。
唯一一个能够用短短几十行代码完整实现的模式。因此，写一个 Singleton
公司都喜欢问一些与设计模式相关的问题。在常用的模式中，Singleton 是
设计模式在面向对象程序设计中起着举足轻重的作用，在面试过程中很多
面试题2：实现Singleton模式
public static Singletonl Instance
private static Singletonl instance = null;
private Singletonl()
由于要求只能生成一个实例，因此我们必须把构造函数设为私有函数
只能生成一个实例的类是实现了Singleton（单例）模式的类型。由于
题目：设计一个类，我们只能生成该类的一个实例。
get
Jeffrey Richter的《CLRViaC#》。该书不仅深入地介绍了C#语言：
时也能知其所以然，通过C#相关的面试自然也就不难了。
我们就能深入理解装箱卸箱、垃圾回收、反射等概念，知其然的同
同时对CLR及.NET做了全面的剖析。如果能够读懂这本书，那么
掌握的语言相混淆。
讲述了C#和其他语言的区别，看了这几章之后就不会把C#和之前
给已经有其他语言（如VB、C++和Java）经验的程序员，它详细
《ProfessionalC#》。这本书最大的特点是在附录中有几章专门写
return instance;
if
instance = new Singletonl();
（instance ==null)
第2章面试需要的基础知识
31
---
## Page 46
2
剑指Offer-
创建实例了，这样就保证了我们在多线程环境中也只能得到一个实例。
这个时候由于实例已经被第一个线程创建出来了，第二个线程就不会重复
程释放同步锁，此时第二个线程可以加上同步锁，并运行接下来的代码。
当第一个线程发现实例还没有创建时，它创建出一个实例。接着第一个线
一个线程能得到同步锁，当第一个线程加上锁时，第二个线程只能等待。
public sealed class Singleton2
得到了如下代码：
是只能得到类型的一个实例，需要加上一个同步锁。把 Singletonl稍做修改
Singletonl就不再满足单例模式的要求了。为了保证在多线程环境下我们还
并且instance的确没有创建时，那么两个线程都会创建一个实例，此时类型
问题了。设想如果两个线程同时运行到判断instance是否为 null的if语句，
·不好的解法二：虽然在多线程环境中能工作但效率不高
函数，这样就能确保只创建一个实例。
的时候才创建一个实例以避免重复创建。同时我们把构造函数定义为私有
我们还是假设有两个线程同时想创建一个实例。由于在一个时刻只有
public static Singleton2 Instance
private static Singleton2 instance = null;
private static readonly object syncobj = new object();
private Singleton2()
解法一中的代码在单线程的时候工作正常，但在多线程的情况下就有
上述代码在 Singletonl的静态属性 Instance 中，只有在 instance 为 null
get
名企面试官精讲典型编程题（纪念版）