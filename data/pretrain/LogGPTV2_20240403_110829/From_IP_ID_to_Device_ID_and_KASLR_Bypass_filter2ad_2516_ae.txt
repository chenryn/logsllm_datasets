subset of the ordered list (typically with a missing range of
destination hosts). We measured 1014 bursts (to L = 400
destination IP addresses) emitted by a Google Pixel 2 mo-
bile phone (Android 8.1.0, kernel 4.4.88), running Google
13https://netmarketshare.com/operating-system-market-share.
aspx
14https://netmarketshare.com/browser-market-share.aspx
USENIX Association
28th USENIX Security Symposium    1073
Chrome 67 browser. The vast majority of bursts last between
0.1 seconds to 0.2 seconds, and the maximal burst duration
was 0.548 seconds. Thus we use an upper bound of δL = 0.6
seconds for a single burst duration.
Chrome emits up to 9 bursts with increasing time delays,
at the following times (in seconds, where t = 0 is the ﬁrst
burst): 0, 0.25, 0.75, 1.75, 3.75, 7.75, 15.75, 23.75, 31.75.15
We label these bursts B0, . . . ,B8 respectively, and we will be
interested in B4 and B5, as they’re sufﬁciently far from their
neighbors. Thus, we are only interested in the ﬁrst 8-9 sec-
onds of the STUN trafﬁc.
UDP Latency Distribution While WebRTC trafﬁc is
emitted by the browser in well deﬁned, ordered bursts, one
cannot assume the trafﬁc will retain this “shape” when ar-
riving to the destination servers. Indeed, even order among
packets within a burst is not guaranteed at the destination.
Understanding the latency distribution in UDP short data-
grams is therefore needed in order to simulate the in-the-wild
behavior, and consequently the efﬁcacy of various track-
ing techniques. The latency of UDP datagrams is gamma-
distributed according to [18] and [19]. However, for sim-
plicity, we use normal distribution to approximate the in-the-
wild latency distribution. On May 1st-6th 2018, we measured
the latency of connections to a server in Microsoft Azure
“East-US” location (in Virgina, USA) from 8 different net-
works located in Israel, almost 10,000km away. The max-
imum standard deviation was 0.081 seconds. Hereinafter,
we will use a standard deviation value σ = 0.1 seconds as a
worst case scenario for UDP jitter.
Packet Loss We identiﬁed two different packet loss sce-
narios:
• Packet loss during generation:
the WebRTC packet
stream (in Chrome-like browsers) is bursty in nature. In
some bursts, we noticed large chunks of missing pack-
ets. These are quite rare (in the STUN trafﬁc mea-
surement experiment we got 29 such cases out of 1014
– 2.9%, though they are more common in Androids
whose kernel is 4.x and have f = 100) and easily iden-
tiﬁed. We can safely ignore them because the tracker
can detect a burst with a lot of missing packets, reject
the sample and run the sampling logic again, or use
a more sophisticated logic incorporating information
from more than two bursts. Additionally, with f = 100
there are far less false pairs, which helps the analysis.
• Network packet loss: the UDP protocol does not guar-
antee delivery, and indeed packets get lost over the In-
ternet. The loss rate is not high, however, and we esti-
mate it to be ≤ 1%. This is also backed by research.16
15See https://chromium.googlesource.com/external/webrtc/
+/master/p2p/base/stunrequest.cc).
16See
http://www.verizonenterprise.com/about/network/
latency/, and [4].
6.4 The Tracking Technique
The technique that we use is different than prior art tech-
niques in focusing on bucket collisions. That is, in cases
wherein UDP datagrams for two different destination IP ad-
dresses end up with IPID generated using the same counter.
The tracker needs to control L Internet IPv4 addresses,
such that the IP-level trafﬁc to these addresses (and partic-
ularly, the IP ID ﬁeld) is available to the tracker. Ideally the
IPs are all in the same network, so that they are all subject
to the same jitter distribution. The tracker should be able to
monitor the trafﬁc to these IP addresses with time synchro-
nization resolution of about 10 milliseconds (or less) - e.g.
by having all the IPs bound to a single host.
With L different destination IP addresses and M buckets
(M = 2048 in Algorithm 2), there are (L
2)/M expected colli-
sions, assuming no packet loss. In reality, the tracker can
only obtain an approximation of this set. The goal is to re-
duce those false negatives and false positives to levels which
allow assigning meaningful tracking IDs.
The basic property that enables the attacker to construct
the approximate list is that in an IP ID generation the counter
is updated by a random number which is smaller than 1 plus
the multiplication of the timer frequency f and the time that
passed since the last usage of that counter. Therefore for a
true pair (IPi,IP j) where the IP ID generation for IPi and
IP j used the same bucket (counter), the following inequality
almost always holds:
0  1) are
very rare – they can be handled but as this complicates the
analysis logic, it is left out of the paper.
Attack run time Where |U| = P pairs, the run time of Al-
gorithm 3 is proportional to |W|P. P’s distribution depends
on f ; Table 1 summarizes the expectancy and standard devi-
Algorithm 3 Exhaustive key search
1: procedure GENERATE-ID(U,IPsrc)
(cid:46) U is deﬁned in
Section 6.5
return ERROR
if |U|  1
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
if |X| > 0 then
return X
else
return ERROR
Table 1: Approximated P distribution
f [Hz] E(P)
50.59
100
250
65.47
70.45
300
σ (P)
7.39
8.60
8.79
σ (P)/E(P)
0.146
0.131
0.125
ation for common f values. These were approximated by a
computer simulation (100 million iterations.)
Time/memory optimization When the number of devices
to measure is much smaller than |W| it is possible to opti-
mize the technique for repeat visits. The optimization simply
amounts to keeping a list Λ of already encountered key val-
ues (or (g(net),key) values), and trying them ﬁrst. If a match
is found (i.e., this is a repeat visit), there is clearly no need to
continue searching the rest of the key space. Otherwise, the
algorithm needs to go through the remaining key space.
Targeted tracking Even if the key space W is too large to
make it economically efﬁcient to run large scale device track-
ing, it is still possible to use it for targeted tracking. The use
case is the following: The tracking snippet is invoked for a
speciﬁc target (device), e.g. when a suspect browses to a
honeypot website. At this point, the tracker (e.g.
law en-
forcement body) extracts the key, possibly using a very ex-
pensive array of processors, and not necessarily in real time.
Once the tracker has the target’s key, it is easy to test any
invocation of the tracking snippet against this particular key
and determine whether the connecting device is the targeted
device. Moreover, if the attacker targets a single device (or
very few devices), it is possible to reduce the number of IP
addresses used for re-identifying the device, by using only IP
addresses which are part of pairs that collide (into the same
counter bucket) under the known device key. Thus we can
use a single burst with as few as 5 IP pairs per device to
re-identify the device. The dwell time in this case drops to
USENIX Association
28th USENIX Security Symposium    1075
near-zero.
6.7 The Effective Key Space in Attacking Al-
gorithm A3
In Algorithm A3, 32 bits of the net namespace are extracted
by a function we denote as g(), and are added to the calcu-
lation of the hash value. The attack depends on the effective
keyspace size |W| = |{key}|×|{g(net)}| = 232 ·|{g(net)}|.
We analyzed the source code of Linux kernel versions 4.8
and above on x64, and 4.6 and above on ARM64, and found
that if KASLR is turned off then the effective key space size
is 32 bits in both x64 and ARM64. If KASLR is turned on,
then the effective key space size is 41 bits in x64 and 48 bits
in ARM64.
6.8 KASLR Bypass for Algorithm A3
By obtaining g(net) as part of Attack Phase 2 (Section 6.6),
the attacker gains 32 bits of the address of the net structure.
In single-container systems such as desktops and mobile de-
vices, this net structure resides in the .data segment of the
kernel image, and thus has a ﬁxed offset from the kernel im-
age load address. In default x64 and ARM64 conﬁgurations,
the 32 bits of g(net) completely reveal the random KASLR
displacement of net. This sufﬁces to reconstruct the kernel
image load address and thus fully bypass KASLR.
6.9 Optimal Selection of L
Since IP addresses are at premium, we choose a minimal
integer number L of IP addresses such that at the point
ν where Prob(FN) + Prob(FP) is minimal, Prob(FP) +
Prob(FN) ≤ 10−6. We assume f = 300 (worst case sce-
nario). For simplicity, at this stage we neglect packet loss,
and assume that δL = L
400δ400 (we assume δL ∝ L, and we
measured δ400). For false negatives, we use the Poisson
approximation of birthday collisions [3] with λ =(cid:0)L
(cid:1)/M.
2
Therefore:
Prob(FN) ≈ ν−1
∑
i=0
λ ie−λ
i!
2
(cid:0)L
216 +