˜Bv = Bv ⊕ Fk(v). (This encryption can be efﬁciently
decrypted inside SFE evaluation by GC.)
3) (Share) Finally, the S sends the (permuted) encrypted
records (pk , (˜s1, ˜R1), . . . , (˜sn, ˜Rn)) and the encrypted
search tree { ˜Bv : v ∈ T} to the index server. The client
will receive the PRF key k, and the hash functions H =
{hi}η
i=1 used in the Bloom ﬁlter generation.
Preparing record decryption keys. To save the decryption
time in the on-line phase, the index server and the server
precompute record decryption keys as follows:
(Blind the decryption keys) The index server IS chooses
a random permutation ψ : [n]→[n]. For each i ∈ [n], it
ψ(i)← ˜si·Encpk (ri).
(cid:3)
chooses ri randomly and computes ˜s
(cid:3)
(cid:3)
n) to S. Then, the server de-
Then, it sends (˜s
1, . . . , ˜s
(cid:3)
(cid:3)
i. Note that it
i to obtain the blinded key s
crypts each ˜s
holds s
(cid:3)
ψ(i) = siri.
C. Search
Our system supports any SQL query that can be represented as
a monotone Boolean formula where each variable corresponds
to one of the following search conditions: keyword match,
range, and negation. So, without loss of generality, we support
non-monotone formulas as well, modulo possible performance
overhead (see how we support negations below). See Figure 3
as an example.
Traversing the search tree privately. The search procedure
starts with the client transforming the query into the corre-
sponding Boolean circuit. Then, starting from the root of the
search tree, the client and the index server will compute this
circuit Q via secure computation. If the circuit Q outputs true,
the parties visit all the children of the node, and again evaluate
this circuit Q on those nodes recursively, until they reach leaf
nodes; otherwise, the traversal at the node terminates. Note
that evaluation of Q outputs a single bit denoting the search
result at that node. It is fully secure, and reveals no information
about individual keywords.
In order to use secure computation, we need to specify the
query circuit and the inputs of the two parties to it. However,
since the main technicalities lie in constructing circuits for the
variables corresponding to search conditions, we will describe
how to construct those sub-circuits only; the circuit for the
Boolean formula on top of the variables is constructed in a
standard manner.
Keyword match condition. We ﬁrst consider a case where
a variable corresponds to a keyword match condition. For
example, in Figure 3 the variable T1 indicates whether the
Bloom ﬁlter Bv in a given node v contains the keyword α =
‘fname:JEFF’. Consider the Bloom ﬁlter hash values for the
keyword α, and let Z denote the positions to be checked, i.e.,
Z := ζ(cid:3)v (H(α)). If the Bloom ﬁlter Bv contains the keyword
α, the projected bits w.r.t. Z should be all set, that is, we need
to check
Bv↓Z
?
= 1η.
(1)
Recall that the index server has an encrypted Bloom ﬁlter
˜Bv = Bv ⊕ Fk(v), and the client the PRF key k and the hash
functions H = {hi}η
i=1. Therefore, the circuit to be computed
should ﬁrst decrypt and then check the equation (1). That is,
the keyword match circuit looks as follows:
η(cid:7)
KM((b1, . . . bη), (r1, . . . , rη)) =
(bi⊕ri).
i=1
Here, (b1, . . . , bη) is from the encrypted BF and (r1, . . . , rη)
from the pseudorandom mask. That is, to this circuit KM, the
index server will feed ˜Bv↓Z as the ﬁrst part (b1, . . . , bη) of
the input, and the client will feed Fk(v) ↓Z as the second
(r1, . . . , rη). In order that the two parties may execute secure
computation, it is necessary that the client compute Z and
send it (in plaintext) to the index server.
Range/negation condition. Consider the variable T4 in Fig-
ure 3 for example. Using the technique from [47], we augment
the BF to support inserting a number x ∈ Z2n, say with
n = 32, and checking if the BF contains a number in a given
range.
363
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:00:22 UTC from IEEE Xplore.  Restrictions apply. 
To insert an integer a in a BF, all the canonical ranges
containing a are added in the ﬁlter. A canonical range with
level i is [x2i, (x + 1)2i) for some integer x, so for each level,
there is only one canonical range containing the number a.
In particular, for each i ∈ Zn, compute xi such that a ∈
[xi2i, (xi + 1)2i) and insert ‘r:income:i:xi’ to the Bloom
ﬁlter.
Given a range query [a, b), we check whether a canonical
range inside the given query belongs to the BF. In particular,
for each i ∈ Zn, ﬁnd, if any, the minimum yi such that
[yi2i, (yi + 1)2i) ∈ [a, b) and the maximum zi such that
[zi2i, (zi + 1)2i) ∈ [a, b); then check if the BF contains a
keyword ‘r:income:i:yi’ or ‘r:income:i:zi’. If any of
the checks succeeds for some i, then output yes; otherwise
output no. Therefore, a circuit for a range query is essentially
ORs of keyword match circuits.
For example, consider a range query with Z24. When insert-
ing a number 9, the following canonical ranges are inserted:
[9, 10), [8, 10), [8, 12), [8, 16). Given a range query [7, 11),
the following canonical ranges are checked: [7, 8), [10, 11),
[8, 10). We have a match [8, 10).
Negation conditions can be easily changed to range con-
ditions; for example, a condition ‘NOT work hrs = 40’ is
equivalent to ‘work hrs ≤ 39 OR work hrs ≥ 41’.
In summary, we describe the
Overall procedure in a node.
protocol that the client and the index server execute in a node
of the search tree.
1) The client constructs a query circuit corresponding to
the given SQL query. Then, it garbles the circuit and
sends the garbled circuit, Yao keys for its input, and the
necessary BF indices.
2) The client and the index server execute OT so that IS
obtains Yao keys for its input (i.e., encrypted BF). Then,
the index server evaluates the garbled circuit and sends
the resulting output Yao key to the client.
3) The client decides whether to proceed based on the
result.
Record Retrieval. When the client and the index server
reach some of the leaf nodes in the tree, the client retrieves
the associated records. In particular, if computing the query
circuit on the ith leaf outputs success, the index server sends
(ψ(i), ri, ˜Ri) to the client. Then, the client sends ψ(i) to S,
(cid:3)
ψ(i) := siri. The client
and gets back s
C decrypts ˜Ri using si and obtains the output record.
(cid:3)
ψ(i). Note that it holds s
V. ADVANCED FEATURES
policy is represented as a circuit that takes a query as input
and outputs accept or reject. In our system, QC garbles this
policy circuit, and IS evaluates the garbled policy circuit on
the client’s query. A key idea here is to have the client and
the query checker share the information of input/output wire
key pairs in this garbled policy circuit; then, the client can
later construct a garbled query circuit (used in the search tree
traversal) to be dependent on the output of the policy circuit.
Assuming semi-honest security, this sharing of information can
be easily achieved by having the client choose those key pairs
(instead of QC) and send them to QC. The detailed procedure
follows.
Before the tree search procedure described in the previous
section begins, the client C, the query checker QC, and the
index server IS execute the following protocol.
1) Let q = (q1, . . . , qm) ∈ {0, 1}m be a string that
encodes a query (we will discuss our encoding method
in Appendix A). The client generates Yao key pairs
Wq = ((w0
m)) for the input wires
of the policy circuit, and a key pair Wx = (t0, t1) for
the output wire. The client sends the key pairs Wq and
Wx to query checker QC. It also sends the index server
the garbled input ˜q = (wq1
1), . . . , (w0
2 , . . . , wqm
m, w1
1 , wq2
1, w1
m ).
2) Let P be the policy circuit. QC generates a garbled
circuit ˜P using Wq as input key pairs, and Wx as the
output key pair (QC chooses the other key pairs of ˜P at
random). Then, QC sends ˜P to the index server.
the output wire key ˜x = ˜P (˜q). Note that ˜x ∈ Wx.
3) The index server evaluates the circuit ˜P on ˜q obtaining
(cid:3)
1) Let Q
After the execution of this protocol, the original search tree
procedure starts as described before. However, the procedure
is slightly changed when evaluating a leaf node as follows:
(b, r, x) = Q(b, r) ∧ x be an augmented circuit,
where Q is the query circuit, b and r are the inputs
from IS and C respectively, and x is a bit representing
the output from the policy circuit. The client C generates
(cid:3) using wire key pair Wx for the
a garbled query circuit ˜Q
(cid:3)
bit x. Then, it sends ( ˜Q
, ˜r) to the index server, where
˜r is the garbled input of r.
2) After obtaining the input keys ˜b for b from OT with
(˜b, ˜r, ˜x) and sends
C, the index server IS evaluates ˜Q
the resulting output key to the client. Recall that it has
already evaluated the garbled policy circuit ˜P (˜q) and
obtained ˜x.
3) The client checks the received key and decides to accept
(cid:3)
or reject.
In this section, we discuss how our system supports advanced
features such as query policies, and one-case indistinguisha-
bility. We also overview insert/delete/update operations from
the server.
A. Policy Enforcement
The policy enforcement is performed through a three-party
protocol among the query checker QC (holding the policy),
the client C (holding the query), and the index server IS. A
Regarding privacy, the client learns nothing about the policy,
since it never sees the garbled policy circuit. The index server
obtains the topology of the policy circuit (from the garbled
policy circuit).
Note that the garbled policy circuit is evaluated only once,
before the search tree execution starts. Therefore, the policy
checking mechanism introduces only a small overhead. It is
also worth observing that, so far, we have not assumed any
restriction on the policy to be evaluated. Since Yao-based
364
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:00:22 UTC from IEEE Xplore.  Restrictions apply. 
computation can compute any function represented as a circuit,
in principle, we could enforce any policy computable in a
reasonable time (as long as it depends only on the query). We
describe our own implemented policy circuit in more detail in
Appendix A.
B. One-case Indistinguishability
So far,
in our system the index server learns how many
records the client retrieved from the query. In many use cases,
this leakage should be insigniﬁcant to the index server, in
particular, when the number of returned results is expected to
be, say, more than a hundred. However, there do exist some use
cases in which this leakage is critical. For example, suppose
that a government agent queries the passenger database of
an airline company looking for persons of interest (POI). We
assume that the probability that there is indeed a POI is small,
and the airline or the index server discovering that a query
resulted in a match may cause panic. Motivated from the above
scenario, we consider a security notion which we call one-case
indistinguishability.
Motivation. Consider a triple (q, D0, r) where q is a query,
and D0 is a database with the query q resulting in no record,
but r satisﬁes q. Let D1 be a database that is the same as
D0 except that a record is randomly chosen and replaced with
r. Let VIEW0 (resp. VIEW1) denote the view of IS when the
client runs a query q with the database D0 (resp., D1).
A natural start would be to require that for any such
(q, D0, r), the difference between the two distributions VIEW0
and VIEW1 should be small  (in the computational sense),
which we call  zero-one indistinguishability. However, it does
not seem possible to achieve negligible difference  without
suffering signiﬁcant performance degradation (in fact, our
system satisﬁes this notion for a tunable small constant ).
Unfortunately, this deﬁnition does not provide a good security
guarantee when the difference  is non-negligible, in particular,
for the scenario of ﬁnding POIs. For example, let Π be a
(cid:3) be the same as
database system with perfect privacy and Π
Π except that when it is 1-case (i.e., a query with one result
record), the client sends the index server the message “the 1-
case occurred” with non-negligible probability. It is easy to
(cid:3) satisﬁes the deﬁnition with some non-negligible ,
see that Π
but it is clearly a bad and dangerous system.
One-case indistinguishability. Observe that in the use case of
ﬁnding POIs, we don’t particularly worry about “the 0-case”,
that is, it is acceptable if the airline company sometimes knows
that a query deﬁnitely resulted in no returned record. Mo-
tivated by this observation, this deﬁnition intuitively requires
that if the a-priori probability of a 1-case is δ, then a-posteriori
probability of a 1-case is at most (1+)δ. For example, for
 = 1, the probability could grow from δ to 2δ, but never
more than that, no matter what random choices were made.
Moreover, if the a-priori probability was tiny, the a-posteriori
probability remains tiny even if unlucky random choices were
made. In particular, consider (q, D0, r) and D1 as before. Now
consider a distribution E that outputs (b, v) where b ∈ {0, 1}
chosen with Pr[b = 1] = δ, and v is the view of the index
server when the query q is run on Db. The system satisﬁes 
one-case indistinguishability if for any (q, D0, r), δ and v, it
holds
[b = 1|v] ≤ (1 + )δ.
Pr
E
Augmenting the design. To achieve these indistinguishability
notions, we change the design such that the client chooses a
small random number of paths leading to randomly selected
leaves. In particular, let D be the probability distribution on
the number of random paths deﬁned as follows:
Distribution D: