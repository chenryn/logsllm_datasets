# 【技术分享】物联网设备安全分析之MAX! Cube LAN Gateway篇
|
##### 译文声明
本文是翻译文章，文章来源：insinuator.net
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
**翻译：**[ **shan66**
****](http://bobao.360.cn/member/contribute?uid=2522399780)
**预估稿费：200RMB（不服你也来投稿啊！）**
******投稿方式：发送邮件至**[ **linwei#360.cn**](mailto:PI:EMAIL) **，或登陆**[
**网页版**](http://bobao.360.cn/contribute/index) **在线投稿******
**前言**
在这篇文章中，我们将为读者介绍如何对物联网设备进行安全评估。这里将会详细介绍进行评估所需的基本方法：对于不同的任务需要使用哪些工具，以及如何解决在分析过程中可能出现的问题。本文的目标读者对为对物联网设备安全分析感兴趣的朋友，对逆向工程感兴趣的读者，或者只想了解如何通过技术手段来处理未知设备的读者。
本文的重点不在于揭示某种设备的某种漏洞，而在于阐释影响各种IoT设备的安全弱点，因此，本文介绍的内容同样适用于其他的设备和场景。
**分析对象**
本文的分析对象是来自eQ-3公司的 MAX! Cube LAN Gateway
（以下称为“Cube”）。实际上，许多产品都捆绑了该设备，比如我的加热控制系统中就带有该设备。通过该设备名称中的“Cube”不难猜出，它只是一个LAN网关，通过RF技术实现真正的“物联网设备”或“智能设备”之间的通信。在本文中，我们将重点介绍以太网通信，因为它是管理软件的主要通信方式。
**搭建中间人攻击场景**
为了全面地了解该设备的通信状况，我搭建了一个简单的中间人攻击场景。我在自己的系统上使用了一个USB网卡，并将其直接连接到Cube。首先，打开Cube，但是不要使用任何管理客户端或其他需要通信的软件，这样就能了解Cube自身发送了什么数据包。我们发现，它只是试图通过DHCP获得IP，然后开始解析ntp.homematic.com。
为了让Cube可以访问互联网，我已将自己的USB网卡配置为Cube的路由器。为了在不使用DHCP的时候可以通过192.168.0.222访问Cube，我把设备的IP地址设为192.168.0.1/24，并进行了如下所示的配置，以允许通过USB网卡的NAT访问互联网：
    sysctl net.ipv4.ip_forward=1
    iptables -t nat -A POSTROUTING -o enp0s25 -j MASQUERADE
    iptables -A FORWARD -i enp0s20u9u3 -o enp0s25 -j ACCEPT
    iptables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
注意：设备enp0s20u9u3是连接到Cube的USB网卡，enp0s25是系统上的另一个网卡，该网卡连接到具有互联网连接的路由器上。
因为Cube会向默认的路由器发送DNS查询，所以，我们可以在机器上设置一个DNS服务器，或者直接将DNS查询转发给相应的域名服务器（例如OpenDNS服务器）：
    iptables -t nat -A PREROUTING -i enp0s20u9u3 -p udp --dport 53 -j DNAT --to 208.67.222.222:53
    iptables -t nat -A PREROUTING -i enp0s20u9u3 -p tcp --dport 53 -j DNAT --to 208.67.222.222:53
这样一来，我们就能设法观察Cube发送的所有的数据了，例如使用Wireshark或tcpdump等工具来嗅探连接到Cube的NIC上通信数据。
**发现网络中的Cube设备**
为了方便管理员自动识别本地网络上的Cube设备，Cube提供了相应的网络发现功能。下面的Wireshark屏幕截图展示了由本地管理软件发送的数据包：
该软件会向23272端口上的多播组地址224.0.01发送UDP数据包。在右下方，标记出来的hexdump部分是有效载荷（eQ3Max * x00
********** I）。这是一个所谓的身份消息，用来命令Cube向数据包的源主机报告其序列号。下面的截图显示了Cube的响应：
同样，这里响应的有效载荷也在右下侧（eQ3MaxApKMD1016788> I）做了标记。
我的设备的序列号是KMD1016788，所以一切正常。现在，我们只要发送这样的UDP数据包，就能轻松找出本地网络上所有的Cube设备。同时，我们也可以检查某个主机是否是使用单播数据包的Cube设备。
我们自己也可以发送所有这些数据包，甚至单播数据包。对于这些任务，我更喜欢使用Scapy来完成。因为有了它，我们就可以在交互式Python
shell中创建、发送/接收和操作数据包，这样做是很方便的，因为这样可以同时进行其他任务，如进行计算或数据转换。Cube使用的UDP端口是23272。我们可以从前面的示例中获取相应字符串（这是一个“身份消息（identity
message）”，由有效载荷末尾的“I”表示），并将其发送到目标主机：
    >>> p = Ether()/IP(src="192.168.0.1", dst="192.168.0.222")/UDP(sport=23272, dport=23272)/Raw("eQ3Max*x00**********I")
    >>> sendp(p, iface="enp0s20u9u3")
响应的有效载荷的内容如下所示：
    00000000  65 51 33 4d 61 78 41 70  4b 4d 44 31 30 31 36 37 eQ3MaxAp KMD10167
    00000010  38 38 3e 49 00 09 9c 3e  01 13                   88>I...> ..
注意：Cube发送的响应数据包的源和目标端口总是23272。所以，你要么一直使用23272作为源端口来获得响应，要么使用pcap进行带外捕获——如果你使用随机源端口的话。
实际上身份消息是非常有用的：所有其他UDP消息都需要该Cube的序列号，它将被放入请求的响应中。有了这个序列号，我们就可以发送其他消息类型了，例如
“重新启动消息（reboot message）”（在有效载荷末尾用“R”进行标识）：
    >>> p = Ether()/IP(src="192.168.0.1", dst="192.168.0.10")/UDP(sport=23272, dport=23272)/Raw("eQ3Max*x00KMD1016788R")
    >>> sendp(p, iface="enp0s20u9u3")
就像该消息的名称所示，它会重新启动该设备。这种消息可以从本地网络上的任何设备发出，无需任何身份验证。
**如何管理Cube**
Cube的管理方式有三种：
**本地管理软件：** 这是一个可安装在Windows上的EXE程序，它会在一个较大的随机端口上启动一个本地Web服务器，用于java applet…
**远程管理软件：** 功能与登录界面基本相同，只不过是托管在云中而已。
**移动应用：** 我还没有见过。
本地和远程管理软件的主要区别是远程软件的通信是加密的，这一点将在下文详细介绍。
本地管理软件非常有助于深入了解Cube的内部工作原理，因为通过触发不同的功能，我们就可以观察发送给Cube的相应请求了。为此，我们可以每次执行一个功能，然后捕获相应的流量，从而大概了解哪些事情是可以通过Cube的远程管理来执行的。
与“远程代理”进行交互
为了使用远程管理软件，您必须在本地管理软件中配置远程管理所需的用户名和密码。请注意，对于Cube来说，每次只能通过一个客户端进行管理。
因此，当本地管理软件运行时，移动应用程序或远程管理将无法工作。
只要在端口62910上有一个打开的TCP会话，那么其他客户端就无法与此端口通信了。所以，本地网络中可以到达Cube的62910端口的每个客户端，都可以通过连接到Cube的这个端口来阻止其他客户端登陆。
Cube和远程管理工具之间的通信是加密形式的，但不是SSL / TLS …它们的通信是借助HTTP
POST请求来完成的，但是只对POST主体进行了加密。HTTP的头部如下所示：
    POST /cube HTTP/1.1
    Host: smarthome.md.de
    connection: close
    Content-Length: 32
    Opt: "http://www.eq-3.com/MAX", ns=MAX
    MAX-Serial: KMD1016788
这些请求将发送到http://smarthome.md.de:8080。其中，一个相当重要的头部是MAX-Serial。它必须包括有效的序列号，否则服务器将只是返回500 Internal Server Errors。
**AES密码**
AES密码用于加密发送到远程管理工具的POST主体。Cube能够支持"e"消息和"d"消息，这两类消息分别实现了“加密”和“解密”功能。这样的话，我们不仅可以对任意字符串进行加密，还能对Cube加密的任何字符串进行解密。下面有一个简单的例子：
    ~ » ncat 192.168.0.222 62910
    [...]
    e:TEST^M
    E:kvJcZ8bVAoyXaE7gK+q2Ug==
    d:kvJcZ8bVAoyXaE7gK+q2Ug==^M
    D:TESTAAAAAAAAAAAAAAAAAA==
注意：Cube要求命令必须以“ r n”结尾，否则它不会给予响应。为此，在netcat /
ncat这样的工具中发送命令时，不要直接按下RETURN，而应该先按CTRL + v，然后再按RETURN（由行末尾的“^ M”表示）。
该示例展示了Cube是如何对字符串TEST进行加密的，返回的密文是以Base64编码的字符串kvJcZ8bVAoyXaE7gK + q2Ug ==。
为了对这个字符串进行解密，您可以使用它的解密功能，这样就可以得到明文字符串TEST了。字符串的其余部分只是经过编码的空字节（0x00），用于填充密文，使其符合AES块大小的要求。
加密的字符串通常使用Base64编码。下面，让我们看一个真实的例子：为了使用远程登录，我们需要设置用户名和密码。从Cube发送到远程系统的明文请求如下所示：
    H:KMD1016788,099c3e,0113