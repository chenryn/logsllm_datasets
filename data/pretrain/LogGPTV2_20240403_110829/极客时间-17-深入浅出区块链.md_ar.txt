## 总结 {#19.html#-}本篇我们介绍了智能合约的概念以及以太坊项目，并且讲解了与比特币的主要区别，以太坊上的一些核心概念，下一篇我们将结合实际案例讲解智能合约，带领你认识一些智能合约模板，并顺便介绍一下其他区块链智能合约平台。亲爱的读者，快来构想一下属于自己的智能合约 Dapp吧。你可以给我留言，我们一起讨论。参考链接：![](Images/6651fea80872baf69676c1873cd7b2d4.png){savepage-src="https://static001.geekbang.org/resource/image/25/b7/25d35548526eefde68b5490cf13f83b7.jpg"}
# 第19讲 \| 上手搭建一条自己的智能合约上一篇我们聊到了区块链智能合约，我主要介绍了智能合约的概念，但是并没有给你提供智能合约的实际运行案例，那么今天，我们就自己动手写一个智能合约，并且介绍一下智能合约标准模板，供你参考学习，并搭建起自己的智能合约。本篇将以以太坊作为基础知识进行讲解，本篇面向没有任何智能合约基础的人群，所以配备了较多的插图和操作命令，如果你正在收听音频，可以点击文稿查看，希望读完这篇文章可以帮助你快速入门智能合约。
## 搭建一条智能合约 {#20.html#-}在实际操作智能合约之前，我们首先回顾一下以太坊，以太坊又称以太坊钱包。以太坊钱包提供了包括账户管理，以太坊转账、Dapp部署与使用在内的一些常规功能。以太坊社区提供了多种语言实现的客户端和开发库，多数客户端支持 JSON-RPC2.0标准，目前支持的客户版本有 Go-ethereum（Go 语言）、Parity（Rust语言）、Cpp-ethereum（C++语言）、Ethereum-lib（Javascript)、EthererumJ(Java语言)、Pyethapp（Python 语言)，基本涵盖了主流编程语言。![](Images/68338a92ba19697fa016826f380e00fd.png){savepage-src="https://static001.geekbang.org/resource/image/36/d6/36bcf515221b62694653e8b7aa6019d6.png"}图片来自以太坊官方文档官方推荐使用的版本是 Go-ethererum，这是 Go 语言实现的版本，又称 Geth客户端。需要提醒你的是，这里客户端的实现语言并不是要求用户熟悉相应的编程语言，这里的用户是指Dapp 开发者，比如在操作 Geth 客户端的时候，用户其实并不需要了解 Go语言。
### 1. 下载与安装 Geth {#20.html#1-geth}本文使用 Geth 来进行测试，首先我们要获取 Geth 客户端，如果用户使用的是Ubuntu 环境的话，可以直接从 PPA 安装。     
# apt-get install software-properties-common 
# add-apt-repository -y ppa:ethereum/ethereum 
# apt-get update 
# apt-get install ethereum安装成功后，我们可以查看 Geth 的版本。![](Images/ec57b623c638c8028bbef2337eb586ca.png){savepage-src="https://static001.geekbang.org/resource/image/0b/5d/0bc6084a9514588107557646ea7a945d.png"}表示我们已经安装成功，当然你可以也可以编译安装，由于篇幅有限，你可以另寻资料进行尝试。
### 2. 搭建以太坊私链 {#20.html#2-}如果在以太坊的主网上运行和开发测试智能合约，这是不明智的，因为会消耗真实的以太币，不过我们可以使用Geth 搭建一条属于自己的以太坊区块链，也就是以太坊私链。怎么搭建呢？其实很简单，只需要修改配置文件和一些运行参数即可。       {"config": {    "chainId": 98,    "homesteadBlock": 0,    "eip155Block": 0,    "eip158Block": 0},"difficulty": "200000000","gasLimit": "2100000","alloc": {    "7df9a875a174b3bc565e6424a0050ebc1b2d1d82": { "balance": "300000" },    "f41c74c9ae680c1aa78f42e5647a62f353b7bdde": { "balance": "400000" }}}然后执行：        $ geth --datadir /root/geth-test/ init genesis.json这样，我们就初始化了属于自己的创世区块信息。接下来我们创建一个账户，由于是用户私链挖矿，只有你一个人挖矿，所以使用CPU 挖矿完全没有问题。我们通过如下命令进入 Geth 命令行交互页面：     $ geth --datadir /root/geth-test/ --networkid 98 console![](Images/4756594a72f9575213a336430a64f335.png){savepage-src="https://static001.geekbang.org/resource/image/8c/f4/8caf635275f803120000425ad2add6f4.png"}如上图所示的那样，运行通过。    personal.newAccount()我们创建了一个新账户，这个账户就是 EOA 账户，并通过 eth.getBalance获取了当前地址的余额，显示为 0。输入 Exit退出后，我们开始以挖矿模式启动，这里我们最好记录一下我们的地址：> 【0xf8f7ff845596f0bab1e973859bfcaec6cd2a82ab】我们使用如下命令启动挖矿，注意在 Etherbase 的地方填上述地址：    $ geth --datadir /root/geth-test/ --networkid 98 --mine --minerthreads=1 --etherbase=0xf8f7ff845596f0bab1e973859bfcaec6cd2a82ab以太坊的 PoW 挖矿算法是内存困难型的，首先需要生成DAG，这个视你设备的性能而定，需要耗费一定时间，请耐心等待，如下图所示，我们可以看到DAG 生成非常耗费时间。![](Images/d4039ec9cedce324a64454bc0652596e.png){savepage-src="https://static001.geekbang.org/resource/image/d6/27/d69fd6ce298a755fc50c68cc67e7cd27.png"}在我的远程开发机上一共耗费了 6 分半，又经过了 4分钟，我挖到了第一个块，如下图所示。![](Images/433bf3ca7c74071b79af7e15f68d4a39.png){savepage-src="https://static001.geekbang.org/resource/image/9d/cb/9da9ac44f1057bd8918f60fde20877cb.png"}这期间机器的负载如下。![](Images/fd52b8d57d6fb403f6a1c80492c10f23.png){savepage-src="https://static001.geekbang.org/resource/image/99/a4/9939264d4e1d37ad307e4f12c51d7da4.png"}可以看到 CPU 和内存占用很高，我这里使用测试的机器是 2Core 4GBUbuntu16.04。现在我们再去检查一下 Etherbase 所指向地址的余额。![](Images/de301f0e7e66d1e04547343c286a41de.png){savepage-src="https://static001.geekbang.org/resource/image/9b/44/9b61e6f4a7247f3b86f2962e653f5a44.png"}可以看到已经有 5 个以太币了，以太币的最小单位 wei，所以 5 后面 18个零表示 5 个以太币。