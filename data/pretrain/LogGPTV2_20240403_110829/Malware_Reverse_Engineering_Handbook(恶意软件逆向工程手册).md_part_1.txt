Malware Reverse Engineering Handbook
Ahmet BALCI
Dan UNGUREANU
Jaromír VONDRUŠKA
NATO CCDCOE
Tallinn 2020
CCDCOE
The NATO Cooperative Cyber Defence Centre of Excellence (CCDCOE) is a NATO-accredited cyber defence hub
focusing on research, training and exercises. It represents a community of 25 nations and providesing a 360-
degree view of cyber defence, with expertise in the areas of technology, strategy, operations and law. The heart
of the Centre is a diverse group of international experts from military, government, academia and industry
backgrounds.
The CCDCOE is home to the Tallinn Manual 2.0, the most comprehensive guide on how International Law applies
to cyber operations. The Centre organises the world’s largest and most complex international live-fire cyber
defence exercise, Locked Shields, and hosts the International Conference on Cyber Conflict, CyCon, a unique
annual event in Tallinn, bringing together key experts and decision-makers in the global cyber defence
community. As the Department Head for Cyberspace Operations Training and Education, the CCDCOE is
responsible for identifying and coordinating education and training solutions in the field of cyber defence
operations for all NATO bodies across the Alliance.
The Centre is staffed and financed by its member nations – currently Austria, Belgium, Bulgaria, the Czech
Republic, Denmark, Estonia, Finland, France, Germany, Greece, Hungary, Italy, Latvia, Lithuania, the Netherlands,
Norway, Poland, Portugal, Romania, Slovakia, Spain, Sweden, Turkey, the United Kingdom and the United States.
NATO-accredited centres of excellence are not part of the NATO Command Structure.
www.ccdcoe.org
PI:EMAIL
Disclaimer
This publication is a product of the NATO Cooperative Cyber Defence Centre of Excellence (the Centre). It does
not necessarily reflect the policy or the opinions of the Centre or NATO. The Centre may not be held responsible
for any loss or harm arising from the use of information contained in this publication and is not responsible for
the content of external sources, including external websites referenced in this publication.
Digital or hard copies of this publication may be produced for internal use within NATO, and for personal or
educational use when for non-profit and non-commercial purposes, provided that copies bear a full citation.
2
Table of Contents
Abstract ................................................................................................................................................................... 5
1. Why perform malware analysis? ................................................................................................................... 6
2. How to set up a lab environment .................................................................................................................. 7
3. Static malware analysis ............................................................................................................................... 10
3.1 Description .......................................................................................................................................... 10
3.2 Static analysis techniques & tools ....................................................................................................... 10
VirusTotal .................................................................................................................................... 10
String analysis ............................................................................................................................. 11
PEiD Tool ..................................................................................................................................... 11
CFF Explorer ................................................................................................................................ 12
Resource Hacker ......................................................................................................................... 14
PeStudio ...................................................................................................................................... 14
4. Disassembly (IDA & Ghidra) ......................................................................................................................... 18
4.1 IDA free ................................................................................................................................................ 18
4.2 Ghidra .................................................................................................................................................. 21
5. Dynamic analysis ......................................................................................................................................... 24
5.1 Description .......................................................................................................................................... 24
5.2 Behaviour analysis tools ...................................................................................................................... 24
Process Monitor .......................................................................................................................... 24
Process Explorer.......................................................................................................................... 27
Regshot ....................................................................................................................................... 29
INetSim ....................................................................................................................................... 30
5.3 Sandboxing .......................................................................................................................................... 31
Cuckoo Sandbox .......................................................................................................................... 31
Windows Sandbox ...................................................................................................................... 33
5.4 Debuggers ............................................................................................................................................ 34
Breakpoint .................................................................................................................................. 34
Symbols and Intermodular calls .................................................................................................. 36
Deobfuscation ............................................................................................................................. 37
Patching ...................................................................................................................................... 40
3
6. Network traffic analysis ............................................................................................................................... 43
7. Packed executables/unpacking ................................................................................................................... 48
Detection .................................................................................................................................... 48
Unpacking ................................................................................................................................... 50
8. Incident response collaboration (Misp & Yara) ........................................................................................... 52
9. Conclusion ................................................................................................................................................... 54
10. References ................................................................................................................................................... 55
4
Abstract
Malware is a growing threat which causes considerable cost to individuals, companies and institutions.
Since basic signature-based antivirus defences are not very useful against recently emerged malware threats or
APT attacks, it is essential for an investigator to have the fundamental skillset in order to analyse and mitigate
these threats. While specific measures need to be taken for particular cases, this handbook gives an overview of
how to analyse malware samples in a closed environment by reverse engineering using static or dynamic
malware analysis techniques. The information in this handbook focuses on reverse-engineering fundamentals
from the malware perspective, without irrelevant details. Some simple steps and definitions are, therefore,
omitted to retain the focus. Resources mentioned in this handbook can be accessed with a simple internet
search.
There is no novel work presented in this handbook, as it can be considered as the first steps in investigating
malware. The reader will become familiar with the most common open-source toolkits used by investigators
around the world when analysing malware. Notes and best practice are also included. By applying the techniques
and tools presented here, an analyst can build Yara rules that can help during the investigation to identify other
threats or victims.
5
1. Why perform malware analysis?
Malware analysis is ‘the study or process of determining the functionality, origin and potential impact of a
given malware sample’ [Wikipedia]1
Malware analysis responds to an incident by gathering information on exactly what happened to which files
and machines. The analyst needs to understand what a particular malware binary can do and how to detect it
on the systems and network, assess the damage caused, identify the files it tried to exfiltrate, its modus operandi,
and much more.
Determining the type of malware being analysed makes it easier to discover what the malware is doing
according to the common effects of each kind of malware. Most malware can be classified with these categories:
A backdoor is a method or code on the target computer that allows attacker access without legitimate
authentication.
A botnet is a group of computers, infected in a similar way to backdoors, receiving instructions from a single C2
server.
Ransomware is a type of malware that encrypts the data on a system, disabling the access of the user. Attackers
ask for a ransom for the decryption key without guarantee of delivering the correct key.
Downloader/Launcher is a software that downloads or launches other malicious code.
Information stealing malware/Spyware collects information without the user's knowledge by logging
keystrokes, screenshotting, etc.
Rootkits are programs that conceal the existence of malicious files, applications, network connections, etc.
Scareware is a type of malware that convinces the user to buy fake security software which, in fact, only removes
the scareware.
Worms and Viruses are malicious codes that copy themselves through programs and networks, infecting more
computers.
Fileless malware is a malicious memory-based technique that uses existing files to download executable files on
the system. This technique does not directly use files or the file system. Instead, it uses memory or some other
OS object (APIs, crontabs, registry keys).
Hybrid malware is a combination of different malware actions, such as propagation and activity together, for
example, trojans and ransomware.
Advanced Persistent Threats (APT) are typically a nation-state or state-sponsored group attacking a specific
target with advanced methods specially designed for that particular target.
This list can be expanded with more specific malware types, but this handbook focuses on general
techniques and the most common malware types for Windows OS.
1 The definition according to Wikipedia: https://en.wikipedia.org/wiki/Malware_analysis
6
2. How to set up a lab environment
Setting up a safe environment will allow the mitigation of obvious risks on the systems through malware
analysis. Virtual machines and virtual networks make this setup more comfortable, faster and more secure.
There are many virtualisation platforms on the market, such as VirtualBox, Parallels, Microsoft Virtual
PC, VMware, Microsoft Hyper-V and Xen. We will illustrate a few examples using Oracle VM VirtualBox, a free
and open-source hosted hypervisor developed by Oracle Corporation, which can be downloaded from this link
at the time of writing: https://www.virtualbox.org/wiki/Downloads .
Network adjustments for any simulated environment can be carried out conveniently in VirtualBox, with
seven different types of network connectivity:
Not Attached – In this mode, a virtual adapter is installed in a VM, but the network connection is not present,
just as if the ethernet cable were unplugged.
NAT – This mode allows the guest machine to connect to the internet but not to other guests.
NAT Network – Very similar to NAT mode, NAT network provides communication for guests inside the same NAT
network.
Bridged – Bridged mode is used for connecting the virtual adapter of a VM to the physical network host machine
it is connected to.
Internal – This mode allows guest machines to connect to each other in an air-gapped network. They cannot
access the host machine from this isolated network.
Host-only - This mode enables a NAT network between host and guest machines.
Generic Driver - This network mode allows you to share the generic network interface. Two sub-modes are
available for VirtualBox Generic Driver mode. You can either create a UDP tunnel to connect your virtual
machines to each other or connect your virtual machine to a VDE (Virtual Distributed Ethernet) switch network
running under Linux or FreeBSD.
FIGURE 1: EXAMPLE MALWARE LAB SETUP
7
A basic example of the malware lab environment is shown in Figure 1. In this setup, a Windows victim
guest machine is installed to run the malware, and a Remnux guest machine is used to simulate the internet
(using Inetsim described in section 5.2.4) and analyse the malware behaviour. Since we will be using a simulated
Internet, the malware must be isolated from the real Internet. The host-only network mode allows us to achieve
this goal while establishing a network connection between the host and two guest machines. It is imperative that
the victim machine cannot access the host machine or the other machines on the physical network. This
requirement will be met using the default gateways and separate network setting on the host machine. The Host-
only option creates a virtual network interface similar to the loopback interface on the host machine. The IP of
this interface has to be configured statically and differently from the physical network. In addition, the IPs of the
guest machines have to be statically configured while the default gateway of the victim machine is pointing to
the Remnux machine, and the default gateway of the Remnux machine is pointing to the host machine. The DNS
IP on the victim machine should be set up to the Remnux VM, allowing the DNS queries to end up at the Inetsim
running on Remnux.
Snapshotting
A snapshot is an image of the disk and memory at a precise moment. By analysing a memory dump using
forensics tools, you can gain a better overview of the sample you are examining. By using tools like Volatility or
Rekall, it is possible to extract the malware sample, see connections, etc.
NB: At the time of writing, Volatility and Rekall could be downloaded from the following links:
https://www.volatilityfoundation.org/26, https://github.com/google/rekall
Snapshotting is a crucial feature for faster and easier malware analysis. The virtual environment set for
the malware can be easily restored after the malware is run or a system parameter changed. Essential functions
include:
• Restore snapshot: discard changes and use a pre-snapshot machine image.
• Delete snapshot: merge recorded snapshot with the current state. You cannot return to the pre-
snapshot image after deletion.
• Clone snapshot: ‘fork’ the selected snapshot to a new virtual machine.
Malware self-protection:
Despite the convenience provided by virtual environments, more recent malware tries to detect if it is
being analysed in a virtual environment and hides its behaviour. The most common parameters checked by
malware are registry keys, memory structures, communication channels, specific files and services, MAC
addresses and some hardware features.
Some examples of these parameters for VirtualBox are:
• Registry keys:
• Computer\HKEY_LOCAL_MACHINE\SOFTWARE\Oracle\VirtualBox Guest Additions
• Computer\HKEY_LOCAL_MACHINE\HARDWARE\ACPI\DSDT\VBOX__
• Processes:
• VboxService.exe
• VboxTray.exe
• Files:
• C:\Windows\System32\drivers\VBoxMouse.sys
• C:\Windows\System32\drivers\VBoxVideo.sys
• MAC addresses starting with 08:00:27
8
• CPUID instruction check:
• Running this instruction with EAX=0x40000000 will return the CPU manufacturer ID string in
EBX, EDX and ECX, respectively, such as ‘GenuineIntel’ or ‘AuthenticAMD’. But for VirtualBox,
it will return ‘vboxvboxvbox’.
• Also, running with EAX=1 will change the 31st bit of ECX to 1 on a virtual machine.
One of the best-known real-world malware examples for checking CPU names is ‘GootKit,’ which also
checks registry, disk, BIOS and MAC address. Other examples include ‘Locky’, ‘Heodo’ or ‘Kovter’, which expect
user interactions, and ‘QakBot Trojan’ which waits for some time before executing.
To remedy these situations, some of these values (MAC addresses, register values, configuration files,
etc.) can be changed manually; the API calls from the malware can be intercepted; and custom outputs can be
provided to the malware to counter malware self-protection mechanisms.
9
3. Static malware analysis
3.1 Description
Static malware analysis refers to analysis of the Portable Executable files (PE files) without running them.
This analysis is initially conducted by analysing the PE header structure, which contains valuable information that
helps the operating system to load and execute the file (such as supported systems, memory layout, dynamic
library references for linking, API export and import tables, resource management data and thread-local storage
data).
Basic static analysis can confirm whether a file is malicious by providing information about its
functionality, certificates, imports, compilation date, etc. Based on this information, the analyst can create an
IoC,2 and use it for further investigations. This analysis is ineffective against sophisticated samples, in comparison
with advanced static analysis, which involves the analysis of the malicious code inside a disassembler and going
over the instructions.
In the next section, the different tools and techniques used for performing static malware analysis are
presented.
3.2 Static analysis techniques & tools
VirusTotal
By uploading a file to VirusTotal, and cross-referencing it with a list of detections from various antivirus
programs, the analyst will discover whether the sample is malicious or not. This process also provides information
regarding the file, such as SHA256, MD5, file size, signature info, section details, imports, etc.
FIGURE 2: VIRUSTOTAL – WEB INTERFACE
2 Indicator of compromise (IoC) is an artefact used in computer forensics that identifies potentially malicious activity on a
system or network
10
If it is not possible to upload the sample to VirusTotal, the platform also provides the option to query
for an existing sample that was already uploaded on the website by searching after the hash value of your sample.
NB: This tool should be used carefully: uploading a malware sample containing sensitive information about your company to VirusTotal could
trigger a security problem for the company. If data are leaked, third parties could find and exploit them by using the search function available
on the website.
String analysis
String analysis is the process of extracting readable Ascii and Unicode characters from the binary. Not
all the strings found are used by the program; attackers may also include fake strings to disrupt the investigation.
Tools used for string analysis:
• Strings2 – command-line utility, Windows 32bit/64bit executable, is used for extracting strings from
binary data. This application is an improved version of the classic Sysinternals strings approach and can
also dump strings from process address spaces. At the time of writing, Strings2 could be downloaded
from the following link: https://github.com/glmcdona/strings2
• Flare-Floss (obfuscated string solver) - combines and automates different techniques in order to
perform string decoding. At the time of writing, the Floss tool could be downloaded from the following
link: https://github.com/fireeye/flare-floss
NB: Strings are in ASCII and Unicode format (for some tools the type of string to be extracted during analysis must be specified,
as some tools do not extract both formats)
PEiD Tool
PEiD is a tool used for analysing the PE header to give the analyst more details about the cryptors,3
packers,4 and compilers found in the executable files. PEiD makes this identification by using static signatures
stored within the application. The example presented below illustrates the result of an analysis using the PEiD
tool. In this case, the analysed sample is not packed, and the entropy value is low. The PEiD tool can detect over
500 signature definitions that are loaded from a config file called ‘userdb’.
FIGURE 3: PEID SAMPLE SCAN
3 Crypter is a type of software that can obfuscate, encrypt and manipulate malware, in order to avoid detection by security
programs.
4 Packers reduce the physical size of an executable by compressing it.
11
➢ At the time of writing, this tool could be downloaded from the following link:
https://www.softpedia.com/get/Programming/Packers-Crypters-Protectors/PEiD-updated.shtml
CFF Explorer
CFF Explorer is a tool commonly used to make modifications inside the PE. It runs on Windows OS and
has the capability of listing processes or dumping the process to a file.
By using this tool, the analyst can extract the compilation date and architecture type from the analysed
malware sample, based on the information inside the PE Header. The compilation data is presented using Epoch