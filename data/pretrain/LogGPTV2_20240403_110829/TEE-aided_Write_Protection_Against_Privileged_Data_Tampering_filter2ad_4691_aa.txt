title:TEE-aided Write Protection Against Privileged Data Tampering
author:Lianying Zhao and
Mohammad Mannan
TEE-aided Write Protection Against
Privileged Data Tampering
Lianying Zhao and Mohammad Mannan
Concordia University, Montreal, Canada
{z_lianyi, mmannan}@ciise.concordia.ca
Abstract—Unauthorized data alteration has been a long-
standing threat since the emergence of malware. System and
application software can be reinstalled and hardware can be
replaced, but user data is priceless in many cases. Especially in re-
cent years, ransomware has become high-impact due to its direct
monetization model. State-of-the-art defenses are mostly based
on known signature or behavior analysis, and more importantly,
require an uncompromised OS kernel. However, malware with
the highest software privileges has shown its obvious existence.
We propose to move from current detection/recovery based
mechanisms to data loss prevention, where the focus is on
armoring data instead of counteracting malware. Our solution,
Inuksuk, relies on today’s Trusted Execution Environments
(TEEs), as available both on the CPU and storage device, to
achieve programmable write protection. We back up a copy of
user-selected ﬁles as write-protected at all times, and subsequent
updates are written as new versions securely through TEE.
We implement Inuksuk on Windows 7 and 10, and Linux
(Ubuntu); our core design is OS and application agnostic, and
incurs no run-time performance penalty for applications. File
transfer disruption can be eliminated or alleviated through
access modes and customizable update policies (e.g.,
interval,
granularity). For Inuksuk’s adoptability in modern OSes, we have
also ported Flicker (EuroSys 2008), a defacto standard tool for
in-OS privileged TEE management, to the latest 64-bit Windows.
I.
INTRODUCTION AND MOTIVATION
The ﬁrst known crypto-ransomware dates back to 1989
(only ﬁle/directory names were encrypted [39]; see also [64]).
Crypto-based attack vectors were formally introduced by
Young and Yung in 1996 [78] (see also [79]). After the Cryp-
toLocker attack in 2013, robust crypto-ransomware families
have been growing steadily, with a large number of attacks in
2016 (see the F-Secure ransomware “tube-map” [17]). Exam-
ples of recent high-impact ransomware attacks, include [38],
[66], [21], [10], [2], [57], affecting individuals and enter-
prise/government systems alike. An IBM X-Factor survey
of 600 business leaders and 1021 consumers in the US
reveals the effectiveness of current ransomware attacks: 70%
of affected businesses paid the ransom (46% of businesses
reported to have been infected);
individual users are less
willing to pay (e.g., 39% users without children may pay
ransom for family photos vs. 55% users with children). For
Network and Distributed Systems Security (NDSS) Symposium 2019
24-27 February 2019, San Diego, CA, USA
ISBN 1-891562-55-X
https://dx.doi.org/10.14722/ndss.2019.23197
www.ndss-symposium.org
a conservative estimate of ﬁnancial
loss, a recent end-to-
end measurement [23] shows that over $16 million USD in
ransoms has been collected from 19,750 potential victims
over a two-year period. Ransomware’s direct monetization
has beneﬁted from pseudo-anonymous payment systems such
as Paysafecard.com, prepaid/gift cards, and crypto currencies
(e.g., Bitcoin), and not-easily-traced indirect payments such as
sending SMSes to premium numbers [31].
Common anti-malware approaches relying on binary signa-
tures are largely ineffective against ransomware (see e.g., [55]).
Some solutions rely on system/user behavior signatures, exem-
pliﬁed by ﬁle system activity monitoring, e.g., [30], [55], [14],
[29]. To complement detection based solutions (or assuming
they may be bypassed), recovery-based mechanisms may also
be deployed, e.g., Paybreak [32] stores (suspected) ﬁle encryp-
tion keys on-the-ﬂy, right after generated but before encrypted
with the ransomware’s public key.
On the other hand, general (rootkit-level) malware that
targets to corrupt/delete user data for various purposes also
has long existed, e.g., wiper malware [71], without demanding
a ransom, which is worse in terms of recovery. In addition
to recent incidents (e.g., [19]), this is also exempliﬁed by
the notorious virus CIH [27] (1998), which erased ﬁles and
even corrupted BIOS. Several countermeasures against generic
rootkit attacks have also been proposed, focusing on intrusion-
resiliency and forensics (e.g., S4 [60]), and preventing persis-
tent infection (e.g., RRD [12]). FlashGuard [24] is the only
proposal focusing on rootkit ransomware, which leverages
the out-of-place write feature of modern SSDs, providing
an implicit backup. It requires modifying SSD ﬁrmware and
a trusted clock within the SSD (currently unavailable). We
discuss academic proposals in more detail in Section VII.
Inspired by traditional data access control (e.g., permission-
based and read-only protection in ﬁle systems1) and backup
mechanisms, we shift the focus from detection/recovery to
data loss prevention against rootkit malware (including ran-
somware). If user ﬁles could remain unmodiﬁable by malware
even after the system compromise, no reactive defense would
be necessary—enabling data loss prevention. However, this
new paradigm requires that writes must be allowed at certain
times when new data is added or changes are made. Of
course, rootkit malware can also make malicious changes to
the protected ﬁles once write access is enabled.
We propose to achieve data loss prevention with an append-
only history-preserving backup storage framework, where pro-
1Note: read-only folders/ﬁles enforced by the OS (e.g., Windows 10
“controlled folder access” [44]), only prevents unprivileged access.
tected ﬁles are always exposed read-only to applications and
the operating system, and append operations are allowed only
in a secure manner. In our threat model with rootkit malware,
such read-only access (equivalent to write protection) need
to be enforced by hardware/ﬁrmware to counteract privi-
leged software. Considering that there exists no commercially-
off-the-shelf (COTS) storage device with this append-only
feature, we resort to trusted execution environments (TEEs,
see Section II) to allow programmable write protection. We
use a host-side TEE to enforce the (append-only) logic and
conﬁdentiality-protect an authorization secret, and a device-
side TEE to allow write access only with that secret. In
a broader sense, the placement of secrets and logic across
multiple TEEs relies on the underlying assumptions and sup-
port from available hardware (refer to Section IV for further
discussion).
By choosing the self-encrypting drive (SED, see Section II)
as the device-side TEE, we design Inuksuk,2 to protect
existing user ﬁles from being deleted or encrypted by malware.
Inuksuk functions as a secure data vault: user-selected ﬁles are
copied to a write-protected SED partition, and the secret to
allow write-access is cryptographically sealed to the machine
state (i.e.,
the genuine Inuksuk and the correct hardware
platform), and hence, allowing ﬁle writes to the data vault only
from the trusted environment. Deletion/modiﬁcation outside
the environment will fail due to the write protection. Mean-
while, access to the read/writable copy on the original partition
is not affected (processed at the next commit). Inuksuk takes
rootkit ransomware as a major threat but also works against
any privileged unauthorized data alteration.
Inuksuk works without prompting for any user secret. It
merely appends to existing data. Files created or modiﬁed
on the original partition are all treated the same way, and
copied (i.e., committed) onto the protected partition as new
versions in the host-side TEE (referred to as TEE thereinafter
if not otherwise speciﬁed), without overwriting existing ﬁles.
However, user consent is needed for solicited ﬁle deletion, e.g.,
when the user no longer needs a document. Our assumption
is that deletions are done occasionally and preferably in batch
(disk space is relatively cheap). Inuksuk comes with a built-
in mini ﬁle browser for the user to select and delete ﬁles
in TEE. Files on the protected partition remain accessible as
read-only, allowing the user to mount the drive elsewhere for
recovery without TEE in the case of malware detection or
system corruption (see Sections IV and VI).
We choose to instantiate the host-side TEE using Trusted
Platform Module (TPM) chips, and CPUs with Intel TXT or
AMD SVM (see Sections IV-C and IV-D for reasons, and
Section II for background). Due to the exclusive nature (which
is also a great security beneﬁt) of the TXT/SVM environment,
during ﬁle operations on the protected partition, the system
is unavailable for regular use. We thus provide two access
modes for both home and enterprise users: a) Network-based.
User devices and computers are connected to a regular network
storage system; a dedicated Inuksuk computer then copies user
data from the regular storage to its protected storage, and
thus user experience is not affected. b) Stand-alone. The user
works with the Inuksuk-equipped device, e.g., a laptop. In this
2Inuksuk is an Inuit word with multiple meanings, including: a (food)
storage point/marker.
2
mode, system unavailability is reduced with custom scheduling
policies (e.g., triggered during idle periods, akin to Windows
updates).
While Inuksuk can provide strong security guarantees,
its implementation faces several
technical challenges. For
example, the TXT/SVM environment lacks run-time support
and we must directly communicate with the SED device
(for security) and parse the ﬁle system therein (involving
performance considerations). Note that the use of Intel SGX is
infeasible for Inuksuk, as SGX allows only ring-3 instructions,
i.e., cannot access the disk without the underlying (untrusted)
OS. Also, the user OS is unaware of the TXT/SVM sessions,
so the devices (i.e., keyboard/display for secure user interface)
are left in an unexpected state (see Section V). Note that
there have been a series of attacks based on SMM (System
Management Mode) over the past few years, some even
affecting Intel TXT [75]. This does not pose a serious threat
to Inuksuk, because of its particular setting, e.g., exclusiveness
with no bootloader/hypervisor/OS involved (discussed more
in Section VI). Last but not least, TXT’s exclusiveness also
protects it from many side-channel attacks that are highly
effective against non-exclusive TEEs such as Intel SGX and
ARM TrustZone.
Contributions.
1) We design and implement Inuksuk against root-privileged
data tampering, in a radical shift in threat model from
existing academic/industry solutions. We target loss pre-
vention of existing data, instead of detection/prevention of
malware/ransomware.
2) Inuksuk’s design is tied to the combination of established
and standardized trusted execution environments (in our
prototype, SED disks and Intel TXT/AMD SVM with the
TPM chip). Integrating TXT/SVM, TPM, and SED/Opal
together in a seamless way with a regular OS (Win-
dows/Linux) is non-trivial, but offers a signiﬁcant leap
in the arms-race against malware. Our solution, together
with the ported Flicker (which will be both open-sourced),
solves several engineering/performance problems when
faced with exclusive TEEs (e.g., DMA with TEE, disk/ﬁle
access, display), which can also be methodologically useful
for other TEE applications.
3) We implement Inuksuk on both Windows and Linux
(Ubuntu). The core design is OS-agnostic. Our prototype
achieves decent disk access performance within the OS-less
TXT/SVM environment (around 32MB/s read and 42MB/s
write), when committing ﬁles to the protected partition.
The regular disk access to original ﬁles from the user OS
remains unaffected, i.e., all applications perform as before.
4) We also port the state-of-the-art in-OS trusted execution
manager Flicker [42] to Windows 10 64-bit (Flicker’s latest
version only supported Windows 7 32-bit). This advances
privileged trusted execution (as opposed to user-space only)
up to date, available to other secure processing applications
in modern 64-bit operating systems.
5) Beyond unwanted modiﬁcations of protected data, Inuksuk
can be used as a generic secure storage with ﬁne-grained
access control, enabling read/write operations and data
encryption (with Inuksuk-stored keys), if desired. Inuksuk
in the stand-alone mode is locally enforced without any
network dependency, and operates with a small TCB.
II. BACKGROUND
In this section, we brieﬂy explain certain terms and back-
ground information to facilitate understanding of the Inuksuk
design and prototype implementation hereinafter.
Trusted Execution Environment (TEE). Modern CPUs usu-
ally support a special secure mode of execution, which ensures
that only pre-conﬁgured unaltered code can be executed,
with integrity, secrecy and attestability; and provides a form
of isolation from both other software/ﬁrmware and physical
tampering. TEEs can be exclusive, preempting and suspending
other code (e.g., Intel TXT and AMD SVM), or concurrent,
co-existing with other processes (e.g., Intel SGX, ARM Trust-
Zone, and AMD SEV [46]). There are also privileged (TXT,
SVM, SEV and TrustZone) TEEs and unprivileged TEEs
(SGX). This is about whether privileged instructions (e.g., I/O)
are allowed or untrusted OS has to be relied on to provide such
services.
Technically, TEEs cannot function alone. For the purpose
of storing measurements (to be matched with that of the code
being loaded) and secure storage of execution secrets, a Secure
Element (SE) is used in conjunction. It can be part of the
processor die, an integrated chip, or a discrete module.
In this paper, we use the term TEE in a broader sense,
i.e., referring to the aforementioned secure processing feature
of any processor-equipped devices that operates with secrets,
in addition to that of PC and mobile platforms. For instance,
more and more IoT devices make use of microcontrollers with
ARM TrustZone for Cortex-M such as Nordic nRF91 [72]
and NuMicro M2351 [51]. Also, there are legacy devices with
secure processors (cf. smart cards [13]).
Intel TXT and AMD SVM. Trust Execution Technology
(TXT) is Intel’s ﬁrst “late launch” technique, aiming at estab-
lishing trusted execution any time after system reboot, without
relying on what has already been loaded (e.g., BIOS). It is
exclusive, removing software side-channel attack vectors and
with the help of VT-d [7], largely defends against violations
from the I/O space. AMD SVM (Secure Virtual Machine) is a
similar technology, which we consider as equivalent to TXT,
with slight differences, e.g., it does not involve an explicit