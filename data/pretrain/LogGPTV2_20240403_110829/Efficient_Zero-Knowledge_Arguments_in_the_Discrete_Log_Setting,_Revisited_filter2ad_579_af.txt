+ [д
]r
(cid:15) V ! P: Pick β   χ (β ). Send β.
′′⟩ =
(cid:15) P $ V: Run Protocol IPAnoZK for ⟨βw
β 2t (with commitment [c] = β[cw ]+[cr ]+ β 2t[Q]). To com-
pute [c], the values t and [cw ] from the statement are used.
Correctness follows by inspection. Special soundness follows
′′   ker(
′′. Send [cr ].
′
′; βw
′′
+ r
+ r
w
r
from special soundness of IPAnoZK and Lemma 3.2.
Corollary 4.2. Protocol 4.1 is special µ-sound (with µ = (2; 2; 4;
: : : ; 4)) for finding a witness or a non-trivial element in the kernel of
′; д
′′; Q]. It has short-circuit extraction with µ = (2; 1; 2; : : : ; 2).
[д
Showing zero-knowledge is more contrived. As for Protocol 3.8,
we want to show that the prover’s messages are uniformly ran-
dom. Unfortunately, the constraints which must be satisfied now
depend on the witness. Thus, an adversarially chosen witness may
be a problem. Fortunately, we use IPAalmZK with “randomised” wit-
nesses, so this problem does not manifest.
n B Mn _[fn(cid:0)
2; n(cid:0)1g. (Recall that Mn indices are zero-based and n(cid:0)2; n(cid:0)1 < Mn
for n (cid:21) 8.)
Definition 4.3. Let k be fixed and n (cid:21) 8. Define M+
′′
′; w
We introduce M+
n because satisfying the kernel constraints “con-
′′). We
′ (resp. r
sumes” one (resp. two) pieces of randomness in r
compensate this in M+
n .
′
n(cid:0)1, w
′
n are random, and w
Lemma 4.4 (Informal, see [31]). If w
′′
n(cid:0)1, w
are of a suitable form,
then the responses in IPAalmZK are uniform-or-unique. More con-
′′
cretely, if w
n also (not necessarily
independent), then w is suitable.
4.5 Quadratic equation satisfiability
We can finally instantiate our sketch of an argument system for
satisfiability of a system of quadratic equations from Section 4.3. It
is a commit-and-prove system as follows. The prover commits to
the solution w. Then (cid:0) is fixed and ⟨w; (cid:0)w⟩ = 0 shown to hold.
The commitment scheme pads w 2 Fn(cid:0)2
p with randomness and
extends (cid:0) in a suitable way. Intuition for soundness is given in
Section 4.3.
Protocol 4.5 (QESAZK). Let (cid:0)i 2 F(n(cid:0)2)(cid:2)(n(cid:0)2)
(i = 1; : : : ; N )
be a system of quadratic eqations. Suppose N (cid:21) 2.⁸ Let w 2 Fn(cid:0)2
be a solution, i.e. w
(cid:0)iw = 0 for all i. We assume that the first
component w1 of w is 1.
′; д
′′; Q],eχ3, χ (β,0) and n (cid:21) 8 as in Protocol 4.1,
n as in Lemma 4.4. Let x   χN be a testing distribution
and M+
with x1 = 1 and x2 , 0 for all x.⁹ Let y   χn+1 be a testing
distribution with y1 = 1 always. The following is a protocol for
proving 9w 2 Fn(cid:0)2
(cid:0)iw = 0 where crs and (cid:0)i are com-
mon inputs and the prover’s witness is w.
Let crs = [д
: 8i : w
(cid:15) P ! V: (Step 0: Commitment.) Pick r
p. Let the “ex-
tended” witness be w
and compute the commit-
ment [c
(cid:15) V ! P: (Step 1: Batch verification.) Pick and send x   χN .
′ B
′. Send [c
′
w ] = [д
′   F2
′
w
′
r
w ].
(
)
]w
⊤
⊤
p
p
p
′
⁸Otherwise, add trivial equations (cid:0) = 0.
⁹ Restrictions on χN are merely to simplify protocol description and proofs.
Session 9C: Zero-Knowledge ProofsCCS ’19, November 11–15, 2019, London, United Kingdom2103∑
β
=
)
(
)
(cid:0)1[д
(cid:15) (Batch equations): Both parties compute (cid:0) B
(
xi (cid:0)i.
′
(cid:15) (Fix w1 to 1): Both parties let β B x2 and redefine [д
1]  
(
)
′
′
′
′
′
w ](cid:0) (β (cid:0) 1)[д
w ]   [c
1] (with the new [д
1]. Then [c
1]).
′′
′ where R =
(cid:15) P ! V: Let r
0 (cid:0)1
is a rotation by
= Rr
1 0
′′
′′.
′′
′′
90 degrees. Let w
. Send [c
w ] = [д
(cid:15) V ! P: Pick (1; s; b)   χn+1, where s 2 Fn(cid:0)2
, b 2 F2
p.
p
Send s
′⊤
′; w
′⟩ =
′′
(cid:15) P $ V: Run Protocol IPAalmZK for ⟨w
(
)
s
⊤
′
′
′
w ] (cid:0) [д
t with t = (cid:0)⟨s; (cid:0)
s⟩, and commitment ([c
]s
) +
′′
′
) and the modified [д
] (and unmodified
w ] + [д
([c
s
′
′′
2 Fn(cid:2)n
], [Q]) as commitment keys. Here (cid:0)
[д
=
where R is as in Step 1.
′ (cid:0) s
′
′ B
(cid:0) 0
0 R
′′
(cid:0)w
r
+ (cid:0)
′⊤
](cid:0)
]w
′′
s
b
p
.
See the full version [31] for a sketch of this protocol.
Remark 4.6. It is not hard to see that the prover never needs to
compute [c] = ([c
). (In general,
P does not need [u0].) While the verifier has to check [c], using
lazy evaluation and optimisations from [13], this hardly affects its
runtime. All in all, dealing with s
′ is almost free.
′′
w ] + [д
′
w ] (cid:0) [д
) + ([c
′⊤
](cid:0)
′′
]s
s
′
′
′
(
)
(
)
We now state basic properties of QESAZK.
Lemma 4.7. Protocol QESAZK has perfect correctness.
Using ⟨
all r 2 F2
′; r
p, this is a straightforward check.
′′⟩ + ⟨r
⟩ = ⟨u
′; u
u
r
u
r
′′
′′
′
′
;
′′⟩ and ⟨r ; Rr⟩ = 0 for
Lemma 4.8. Protocol QESAZK has µ-special soundess (with µ =
(N ; n + 1; 2; 2; 4; : : : ; 4)) for extracting a witness or a non-trivial
′; д
′′; Q]. It inherits short-circuit extraction with
kernel element of [д
µ = (1; 1; 2; 2; 2; : : : ; 2).
We did away with “α” compared to Section 4.3 to improve sound-
ness. Extracting a challenge (α; s) naively requires a (3; n(cid:0) 2) sub-
tree. Our construction only needs an (n + 1) sub-“tree”.
Lemma 4.9. Protocol QESAZK is ε-statistical zero-knowledge for
some ε 2 O(2 log2(n))/p.
For the proof, we establish that the conditions of Lemma 4.4
are met except with probability O(2 log2(n))/p. This follows es-
sentially because QESAZK uses w
r ), where r is random (and
′′). Thus, IPAalmZK is statistical zero-knowledge, and
similar for w
consequently QESAZK is statistical zero-knowledge as well.
4.6 Combining QESAZK with other proof
= ( w
′
systems
As is, QESAZK can be used to commit-and-prove quadratic equa-
tions. However, oftentimes, one wishes to prove statements about
commitments which come from some other source. For example,
Bulletproofs [13] were designed for confidential transaction, where
the commitments are input to the proof system. This is not immedi-
ately feasible with QESAZK as is, because QESAZK is commit-and-
prove only w.r.t. the solution of the set of quadratic equations.
ing setting. There are commitment keys eck(i) for i = 1; : : : ; M.
Fortunately, extending QESAZK is not hard. We consider follow-
Each commitment key corresponds to a subset Ii (cid:18) f1; : : : ; ng of
′
′
′
n ] (or [д
the components of [д
] 2 Gn to a vector v(i) 2 Fn
′′; Q]) is the commit-
i=1Ii
′; д
], where crs = ([д
′
j ]gj2Ii . Let I B [M
′
n(cid:0)1]) as its randomness components.
′
1] is reserved for the
commitment to value 1 in QESAZK. A useful point of view is that
p with
(4.2)
ment key of QESAZK. That iseck(i)b= f[д
be the set of all indices which are part of someeck(i). Let M (i) B
#Ii be the size ofeck(i). We assume the following: Every commit-
ment keyeck(i) uses [д
Moreover, 1 < Ii, because the index 1 b= [д
eck(i) is a commitment under [д
eck(i). To model the case of multiple commitments [c1]; : : : ; [cM ]
per key, e.g. all commitments are under eck = eck(1), we simply
duplicateeck, i.e. we rewrite this as [ec(i)] = [ci ],eck(i) =eck.
ted value, we would haveeck(1)b= [д
eck B eck(1) for simplicity. This means I = f2; ng.
keyseck(i) is problematic and inconvenient. We want the random-
Example 4.10. In a typical range proof, with Pedersen commit-
′
n ], where M = 1. We write
We assume for simplicity that there is one commitment per key
Remark 4.11. Using the in n varying [д
′
n ] in the commitment