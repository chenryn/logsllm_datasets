#BHUSA @BlackHatEvents
New Memory Forensics Techniques to Defeat 
Device Monitoring Malware
Andrew Case, Gustavo Moreira, Austin Sellers, Golden Richard
#BHUSA @BlackHatEvents
Information Classification: General
Motivation
• Malware that is capable of monitoring hardware devices (keyboards, microphones, web 
cameras, etc.) is now commonly deployed against human targets 
• This type of malware poses a serious threat to privacy and security
• Existing memory forensic algorithms against this type of malware are outdated, 
incomplete, or non-existent
#BHUSA @BlackHatEvents
Information Classification: General
Research Goals
• For the major operating systems (Windows, Linux, macOS):
1. Study the methods used by userland (process) malware to monitor hardware devices
2. Research (source code review, binary analysis) how the abused APIs are implemented
3. Determine if current memory forensics tools could detect each abuse
4. For ones not currently detected, develop capabilities to automatically detect the abuse
#BHUSA @BlackHatEvents
Information Classification: General
Why Memory Forensics is Needed
• Across platforms, memory-only payloads are often used by malware that monitors 
hardware devices
• Disk and live forensics generally can find no traces of this malware
• Volatile memory is the *only* place to determine that such malware is present and to 
fully investigate it
#BHUSA @BlackHatEvents
Information Classification: General
Windows Research Setup
• Focused on Windows 10
• Analyzed all major builds starting with 10563 (2015) through 22000.556 (March 2022)
• Developed POC software that used the APIs abused by real-world malware
• Memory collection with VMware suspend states for initial work
• Used Surge Collect Pro and its file collection capabilities for long term automated testing
#BHUSA @BlackHatEvents
Information Classification: General
Windows Research - SetWindowsHookEx
● Historically, the most widely abused API by userland keyloggers
● Allows for registering for hooks (callbacks) for hardware events of interest in all threads 
in a desktop or a specific thread
● The most common use of the API leads to the malicious DLL being injected into every
process where a hook triggers (keystroke, mouse movement, etc.)
● Volatility’s messagehooks plugin aims to recover abuse of this API 
○ Never properly updated for Windows 10
○ Testing showed it did not support all hook variations
#BHUSA @BlackHatEvents
Information Classification: General
WH_KEYBOARD_LL
, WH_MOUSE, …
SetWindowsHookEx - Global Hooks in a DLL
C:\keylogger.dll
NULL
#BHUSA @BlackHatEvents
Information Classification: General
#BHUSA @BlackHatEvents
Information Classification: General
Enumerating Global Message Hooks
Image Source: [2], Full Technical Details: [1]
Enumeration Algorithm 
1) Enumerate the Desktops of 
each of Session -> Window 
Station
2) Enumerate the hooks 
(tagHOOK) of each 
Desktop
3) Gather the full path to the 
DLL hosting each hook 
through the (new) Atom 
Table
#BHUSA @BlackHatEvents
Information Classification: General
#BHUSA @BlackHatEvents
Information Classification: General
WH_KEYBOARD_LL
SetWindowsHookEx - Global Hooks in an EXE
NULL
NULL
#BHUSA @BlackHatEvents
Information Classification: General
Global Exe Hooks – WH_KEYBOARD_LL Only
First output block with “” denotes that this hook 
applies to all threads in the desktop
Volatility knows the address of the hook, but not which 
process is hosting it
During our research, we discovered that 
the TIF_GLOBALHOOKER flag denotes 
if a thread has placed a hook. Volatility 
now parses this flag.
“True” here tells us that GUITesterAll
placed the hook
#BHUSA @BlackHatEvents
Information Classification: General
SetWindowsHookEx – Thread Specific Hooks
WH_KEYBOARD_LL
, WH_MOUSE, etc.
DLL Handle | NULL
#BHUSA @BlackHatEvents
Information Classification: General
Enumerating Thread-Specific Hooks
• Thread-specific hooks are stored within the thread 
data structure
• A per-process data structure holds the “atom table” 
equivalent list of DLLs
• Volatility was previously unable to enumerate these 
hooks
Threads
Desktops
Hooks
“Atom Table”
Process Information
Adding Initial Support
Incorporating Per-Process “Atom Table”
#BHUSA @BlackHatEvents
Information Classification: General
Windows Research - RegisterRawInputDevices
HID_USAGE_GENERIC_KEYBOARD
HID_USAGE_PAGE_GENERIC
#BHUSA @BlackHatEvents
Information Classification: General
Registering to Monitor
#BHUSA @BlackHatEvents
Information Classification: General
Malicious Window Callback Procedure
#BHUSA @BlackHatEvents
Information Classification: General
Enumerating Input Monitors
• Per-process data structure stores a HID table
• This table stores a list of monitoring requests
• Each request tracks its target window and usage
Threads
Desktops
Hid Table
Process Information
Hid Request(s)
#BHUSA @BlackHatEvents
Information Classification: General
Detecting the Device Monitor
#BHUSA @BlackHatEvents
Information Classification: General
Linux Research – strace and ptrace
• ptrace is the debugging facility of Linux
• strace is a popular tool that relies on ptrace to monitor system calls made by other 
processes
• Allows for monitoring of buffers sent to hardware devices (keyboards, mics, …)
• Can be completely locked down, even to root users – but not universally applied
#BHUSA @BlackHatEvents
Information Classification: General
Detecting Direct Debugging
#BHUSA @BlackHatEvents
Information Classification: General
Logging in with “secretpassword!” password 
Typing ‘netstat’ once character at a time
#BHUSA @BlackHatEvents
Information Classification: General
Detecting Child Process Debugging
NOTE: SEIZED means that a process began being debugged after it was already started or that a child 
process was automatically debugged as a result of its parent process being debugged. See the ptrace(2)
manual page for complete information.
#BHUSA @BlackHatEvents
Information Classification: General
Linux Research – Input Events
The Input Event subsystem can be abused by userland malware to monitor 
keystrokes on physically attached keyboards
#BHUSA @BlackHatEvents
Information Classification: General
Linux Research - TIOCSTI
• TIOCSTI is an IOCTL that simulates input to a specific terminal and allows the caller to 
inject a character into that terminal’s input stream
Screenshot source: https://ruderich.org/simon/notes/su-sudo-from-root-tty-hijacking
#BHUSA @BlackHatEvents
Information Classification: General
Detecting TIOCSTI Abuse
#BHUSA @BlackHatEvents
Information Classification: General
macOS Research - CGEventTapCreate
• CGEventTapCreate is the most widely abused API on macOS for hardware device 
monitoring
#BHUSA @BlackHatEvents
Information Classification: General
POC source: https://github.com/caseyscarborough/keylogger
CGEventTapCreate POC Code
#BHUSA @BlackHatEvents
Information Classification: General
WINDOW
SERVER
KEYLOGGER 
PROCESS
KERNEL 
SPACE
mach_msg
1
2
_CGPlaceTap
_XPlaceTap
•Events of interest
•Callback location
#BHUSA @BlackHatEvents
Information Classification: General
WINDOW
SERVER
KEYLOGGER 
PROCESS
KERNEL 
SPACE
mach_msg
1
2
_CGPlaceTap
_XPlaceTap
•Events of interest
•Callback location
4
3
Registered callback 
receives keystroke
Keystroke Data
#BHUSA @BlackHatEvents
Information Classification: General
Detecting CGEventTapCreate Abuse
#BHUSA @BlackHatEvents
Information Classification: General
Conclusions
• Malware that targets devices will continue to pose a serious privacy and security threat 
to individuals and organizations 
• Our research effort enables automated detection and analysis of such malware
• Many of the data structures and subsystems analyzed previously had no public 
documentation
• Please see our whitepaper on the Black Hat website for complete details
•
Nearly 30 pages of code samples, IDA Pro screenshots, data structure breakdowns, and more
#BHUSA @BlackHatEvents
Information Classification: General
Questions? Comments?
Contact
PI:EMAIL
PI:EMAIL
Social Media
@volatility, @attrc, @nolaforensix, @volexity, @lsucct
2022 Volatility Plugin Contest now open!
https://volatility-labs.blogspot.com/2022/07/the-10th-annual-volatility-plugin-contest.html
#BHUSA @BlackHatEvents
Information Classification: General
References
[1] https://volatility-labs.blogspot.com/2012/09/movp-31-detecting-malware-hooks-in.html
[2] https://scorpiosoftware.net/2019/02/17/windows-10-desktops-vs-sysinternals-desktops/