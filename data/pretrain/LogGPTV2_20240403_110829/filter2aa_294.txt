#BHUSA @BlackHatEvents
### New Memory Forensics Techniques to Defeat Device Monitoring Malware
**Presenters:** Andrew Case, Gustavo Moreira, Austin Sellers, Golden Richard

---

## Motivation
- **Threat Landscape:** Malware capable of monitoring hardware devices (keyboards, microphones, web cameras, etc.) is increasingly being deployed against human targets.
- **Privacy and Security Risks:** This type of malware poses a serious threat to privacy and security.
- **Current Limitations:** Existing memory forensic algorithms for detecting such malware are outdated, incomplete, or non-existent.

---

## Research Goals
For major operating systems (Windows, Linux, macOS):
1. **Study Methods:** Analyze the techniques used by userland (process) malware to monitor hardware devices.
2. **API Implementation:** Conduct source code reviews and binary analysis to understand how the abused APIs are implemented.
3. **Detection Capabilities:** Evaluate if current memory forensics tools can detect each abuse.
4. **Develop New Capabilities:** For undetected abuses, develop new capabilities to automatically detect and analyze them.

---

## Why Memory Forensics is Needed
- **Memory-Only Payloads:** Across platforms, malware often uses memory-only payloads that leave no traces on disk.
- **Forensic Challenges:** Disk and live forensics generally cannot detect this type of malware.
- **Volatile Memory:** Volatile memory is the only place where such malware can be detected and fully investigated.

---

## Windows Research Setup
- **Focus:** Windows 10
- **Builds Analyzed:** Major builds from 10563 (2015) through 2022 (22000.556)
- **POC Software:** Developed proof-of-concept software using APIs abused by real-world malware.
- **Memory Collection:** Used VMware suspend states for initial work and Surge Collect Pro for long-term automated testing.

---

## Windows Research - SetWindowsHookEx
- **Historical Abuse:** The most widely abused API by userland keyloggers.
- **Functionality:** Allows registering hooks (callbacks) for hardware events in all threads of a desktop or specific threads.
- **Common Use:** Typically, the malicious DLL is injected into every process where a hook triggers (keystroke, mouse movement, etc.).
- **Volatility Plugin:** The `messagehooks` plugin aims to recover abuse of this API but was not properly updated for Windows 10 and did not support all hook variations.

---

## Enumerating Global Message Hooks
- **Algorithm:**
  1. Enumerate the Desktops of each Session -> Window Station.
  2. Enumerate the hooks (`tagHOOK`) of each Desktop.
  3. Gather the full path to the DLL hosting each hook through the (new) Atom Table.

---

## WH_KEYBOARD_LL - Global Hooks in a DLL
- **Example:**
  - **DLL Path:** C:\keylogger.dll
  - **Global Hook:** Applies to all threads in the desktop.
  - **TIF_GLOBALHOOKER Flag:** Denotes if a thread has placed a hook. Volatility now parses this flag to identify the host process.

---

## SetWindowsHookEx – Thread-Specific Hooks
- **Thread-Specific Hooks:**
  - Stored within the thread data structure.
  - A per-process data structure holds the "atom table" equivalent list of DLLs.
  - Volatility was previously unable to enumerate these hooks.

---

## Windows Research - RegisterRawInputDevices
- **Monitoring Devices:**
  - Registers to monitor HID (Human Interface Device) usage pages and generic keyboards.
  - Malicious window callback procedures can be set up to intercept input.

---

## Enumerating Input Monitors
- **Per-Process Data Structure:**
  - Stores a HID table that tracks monitoring requests.
  - Each request tracks its target window and usage.

---

## Detecting the Device Monitor
- **Detection Techniques:**
  - Identify and analyze the HID table and monitoring requests to detect device monitors.

---

## Linux Research – strace and ptrace
- **ptrace:**
  - Debugging facility of Linux.
  - Can be used to monitor system calls made by other processes.
  - Allows monitoring of buffers sent to hardware devices.
  - Can be completely locked down, even to root users, but not universally applied.

---

## Detecting Direct Debugging
- **Logging Example:**
  - Logging in with a password and typing commands character by character.
  - SEIZED state indicates a process began being debugged after it was already started or a child process was automatically debugged.

---

## Linux Research – Input Events
- **Input Event Subsystem:**
  - Can be abused by userland malware to monitor keystrokes on physically attached keyboards.

---

## Linux Research - TIOCSTI
- **TIOCSTI:**
  - An IOCTL that simulates input to a specific terminal and allows injecting characters into the terminal’s input stream.
  - **Detection:** Identify and analyze TIOCSTI abuse.

---

## macOS Research - CGEventTapCreate
- **CGEventTapCreate:**
  - The most widely abused API on macOS for hardware device monitoring.
  - **POC Code:** Available at https://github.com/caseyscarborough/keylogger.

---

## Detecting CGEventTapCreate Abuse
- **Detection Techniques:**
  - Analyze the event tap creation and callback registration to detect and analyze abuse.

---

## Conclusions
- **Ongoing Threat:** Malware targeting devices will continue to pose serious privacy and security threats.
- **Research Impact:** Our research enables automated detection and analysis of such malware.
- **Documentation:** Many of the data structures and subsystems analyzed had no public documentation.
- **Further Reading:** Please see our whitepaper on the Black Hat website for complete details, including nearly 30 pages of code samples, IDA Pro screenshots, data structure breakdowns, and more.

---

## Questions? Comments?
- **Contact:**
  - PI: EMAIL
  - Social Media: @volatility, @attrc, @nolaforensix, @volexity, @lsucct
- **Contest:** 2022 Volatility Plugin Contest now open! [Details](https://volatility-labs.blogspot.com/2022/07/the-10th-annual-volatility-plugin-contest.html)

---

## References
- [1] [Detecting Malware Hooks in Windows](https://volatility-labs.blogspot.com/2012/09/movp-31-detecting-malware-hooks-in.html)
- [2] [Windows 10 Desktops vs. Sysinternals Desktops](https://scorpiosoftware.net/2019/02/17/windows-10-desktops-vs-sysinternals-desktops/)

#BHUSA @BlackHatEvents
Information Classification: General