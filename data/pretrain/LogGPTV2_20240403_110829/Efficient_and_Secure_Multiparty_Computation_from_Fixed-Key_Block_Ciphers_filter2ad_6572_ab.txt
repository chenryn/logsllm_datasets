and thus can potentially control the {bi}.
2) The sender, with input messages {(m0
i=1, com-
putes and sends cb
to the
receiver, for i = 1, . . . , m and b ∈ {0, 1}. The receiver
i
can “decrypt” only one value in each tuple; namely, it
can recover mxi
i
i )}m
:= H(ai ⊕ b · Δ, i) ⊕ mb
:= H(bi, i) ⊕ cxi
for all i.
i , m1
i
i
Assuming the ﬁrst phase is carried out securely, it can be
shown that the above protocol for OT extension is secure
in both the semi-honest and malicious settings when H is a
random oracle. Ishai et al. [28] showed that in the semi-honest
setting it sufﬁces for H to be correlation robust for random
inputs (and in this case the additional input i to H is not
needed). Asharov et al. [2] proved that the protocol is secure
in the malicious setting if H is strongly correlation robust (cf.
Deﬁnition 1), i.e., even for adversarially chosen inputs.
Prior to our work it was not clear how to construct a
(strongly) correlation robust hash function from a ﬁxed-key
block cipher, and existing implementations made seemingly
arbitrary choices (see next and Table I). Below we show that
these lead to attacks on the OT-extension protocols, though
it may not always imply an explicit attack on the overall
protocol implementation (depending on how the base OTs
are implemented). In what follows the block cipher is always
AES-128, but we write π for consistency with the rest of the
paper.
APRICOT and libscapi. APRICOT [46], which is also
internally used by libscapi [3], sets H(x, i) = π(x). This
is insecure, even in the semi-honest case, since this H is
invertible. (In particular, assume the receiver knows m0
i and
i for some i. Then it can deduce ai and ai ⊕ Δ; hence it
m1
can recover Δ and learn all the rest of the sender’s inputs.)
We believe their intent was to set H(x, i) = π(x)⊕ x. This
was conﬁrmed by the authors of APRICOT, and the latest
version of their implementation has been updated to reﬂect
this. As described next, however, this is still insecure.
SPDZ-2, MP-SPDZ, and MASCOT. The SPDZ-2 [47] im-
plementation, which is also used by MP-SPDZ, sets H(x, i) =
π(x)⊕x as proposed in the MASCOT paper [30]. This choice
was justiﬁed there by noting that it is inspired by the Matyas-
Meyer-Oseas (MMO) construction that is collision resistant in
the ideal-cipher model. This reasoning is invalid since collision
resistance does not imply correlation robustness. In any case,
this instantiation admits a simple attack in the malicious setting
that exploits the fact that H has no dependence on i: by using
x1 = x2 = 1 and forcing b1 = b2 = b, the receiver can learn
m1
1, m1
2, and also
1 ⊕ c0
c0
2 = H(b, 1) ⊕ H(b, 2) = m0
1 ⊕ m0
2,
which is disallowed.
Note that any instantiation of H that does not depend on i
admits this attack in the malicious setting. In Appendix C, an
attack in the FΔ-ROT hybrid model based on this idea that
violates the privacy of the MASCOT protocol is presented.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:42:34 UTC from IEEE Xplore.  Restrictions apply. 
827
libOTe. libOTe [44] provides two options for instantiating
H(x, i). The ﬁrst option is identical to the one just discussed.
The second option instantiates H(x, i) = SHA-256(x). Be-
sides the fact that this option no longer beneﬁts from ﬁxed-key
AES, it also suffers from the same attack just described since
there is no dependence on i.
Unbound Tech and EMP. The blockchain MPC implemen-
tation by Unbound Tech [45] sets H(x, i) = π(x⊕ i)⊕ x⊕ i.
Although H now depends on i, a variant of the above attack
still works if the malicious receiver chooses b1, b2 such that
b1 ⊕ 1 = b2 ⊕ 2.
EMP [49] uses H(x, i) = π(2x⊕ i)⊕ 2x⊕ i, and a similar
attack still applies.
The ABY framework. The ABY framework [17] also sets
H(x, i) = π(x ⊕ i) ⊕ x ⊕ i, but the above attack no longer
applies since ABY targets semi-honest security. However,
ABY implements correlated-OT extension and random-OT
extension rather than standard-OT extension. Existing proofs
of security for the former [1], even in the semi-honest setting,
require H to be a random oracle (see further discussion in
Section IV), while the ABY instantiation of H is clearly
not indifferentiable from a random oracle since H(x1, i1) =
H(x2, i2) for any x1, i1, x2, i2 with x1 ⊕ i1 = x2 ⊕ i2.
B. Garbling
As noted in the Introduction, JustGarble [5] is a garbling
is proven secure in the random-permutation
scheme that
model. The proof is non-modular, however, and so it
is
difﬁcult to apply the techniques to newer garbling schemes.
In analyzing their half-gates construction based on an abstract
hash function H, Zahur et al. [53] introduce a deﬁnition
called “circular correlation robustness for naturally derived
keys” (see Section V) that is speciﬁc to their scheme, overly
complicated, and difﬁcult to work with. They then instantiate
H as H(x, i) = π(2x ⊕ i) ⊕ 2x ⊕ i, and claim without proof
that this satisﬁes their deﬁnition.5
Zhu et al. [54] used a customized garbling scheme with the
hash function instantiated as H(x, i) = π(x⊕ i)⊕ x⊕ i. Since
the garbling scheme of Zhu et al. incorporates the free-XOR
optimization [31], a proof of security requires H to satisfy a
notion of circular correlation robustness [14]. However, we
show in Section VII-C that the related hash function H(x) =
π(x) ⊕ x is not circular secure (and the same applies to the
hash function of Zhu et al. as well).
C. Other Protocols and Implementations
Although we focus primarily on OT extension and garbling
in this paper, we observe that unprincipled reliance on ﬁxed-
key AES has come up in other scenarios as well.
TinyLEGO. Frederiksen et al. [22] showed that the wire-
authentication protocol in TinyLEGO is secure if the hash
5It is unclear to us whether H satisﬁes their deﬁnition or not. Nevertheless,
we believe that half-gates garbling using their instantiation of H can be proven
secure directly in the random-permutation model. That is, we do not claim
that their scheme is insecure, only that their analysis is buggy.
function H being used is correlation robust for random inputs.
In the implementation of TinyLEGO [41], they instantiated H
as H(x, i) = π(2x ⊕ i) ⊕ 2x ⊕ i, but there is no proof that
this satisﬁes the required deﬁnition.
Free hash. Fan et al. [20] proposed a new way to “commit” to
a garbled circuit. The proof of security for their construction
assumes that the hash function H used is not only correlation
robust but also collision resistant. Unfortunately, it is easy to
see that the instantiation H(x, i) = π(2x⊕i)⊕2x⊕i they use
is not collision resistant (since H(x1, i1) = H(x2, i2) when
2x1 ⊕ i1 = 2x2 ⊕ i2), and this leads to an explicit attack on
the binding property of their scheme.
III. HASH-FUNCTION DEFINITIONS
Here we deﬁne several notions of “pseudorandomness” for
hash functions, some of which have been considered explicitly
before. Our deﬁnitions are tailored for a concrete-security
treatment, but asymptotic versions of our deﬁnitions can easily
be obtained by suitable modiﬁcations. In what follows, we let
Fk,(cid:2) denote the set of all functions from {0, 1}k to {0, 1}(cid:2),
and write Fk for Fk,k.
Our deﬁnitions are all phrased in the strongest sense
possible—speciﬁcally, they allow the attacker to adaptively
choose the inputs to its oracle—since our constructions satisfy
them. For some applications, weaker notions (such as random
inputs or non-adaptive choice of inputs) may sufﬁce, and the
deﬁnitions may be adapted appropriately for those cases.
def
Our deﬁnitions allow for non-uniform choice of the key R.
in analyzing schemes like half-gates gar-
This is useful
bling [53], where the least-signiﬁcant bit of R is set to 1.
Correlation robustness (cr). The notion of correlation robust-
ness was ﬁrst proposed by Ishai et al. [28] in the context of
OT extension. Roughly, H is correlation robust if the keyed
= H(x ⊕ R) is pseudorandom. In the work
function fR(x)
of Ishai et al., this was only required to hold for random
inputs, giving a deﬁnition analogous to a weak pseudorandom
function; in other work [2], the attacker was allowed to choose
arbitrary inputs but only in a non-adaptive manner. Here we
consider the strongest notion where the attacker is free to
adaptively choose its inputs to its oracle.
Deﬁnition 1. Let H : {0, 1}k → {0, 1}k be a function, and
let R be a distribution on {0, 1}k. For R ∈ {0, 1}k, deﬁne
Ocr
R(x)
= H(x ⊕ R). For a distinguisher D, deﬁne
def
Advcr
H,R(D)
def
=
(cid:3)(cid:3)(cid:3)(cid:3) Pr
R←R
(cid:4)
DOcr
R(·) = 1
Df (·) = 1
(cid:4)
(cid:5) − Pr
f←Fk
(cid:5)(cid:3)(cid:3)(cid:3)(cid:3) .
H is (t, q, ρ, ε)-correlation robust if for all D running in time
at most t and making at most q queries to Ocr
R(·), and all R
H,R(D) ≤ ε.
with min-entropy at least ρ, it holds that Advcr
Circular correlation robustness (ccr). Choi et al. [14] ex-
tended the notion of correlation robustness to allow for a
form of “circularity” needed to prove security of the free-XOR
technique [31] for circuit garbling. Zahur et al. [53] used a
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:42:34 UTC from IEEE Xplore.  Restrictions apply. 
828
weaker (but more complex) version of this deﬁnition, also in
the context of garbling; more details about their deﬁnition are
given in Section V.
Deﬁnition 2. Let H : {0, 1}k → {0, 1}k be a function, and
let R be a distribution on {0, 1}k. For R ∈ {0, 1}k, deﬁne
= H(x⊕ R)⊕ b· R. For a distinguisher D, deﬁne
Occr
(cid:5)(cid:3)(cid:3)(cid:3),
R (x, b)
Df (·) = 1
(cid:5) − Pr
(cid:3)(cid:3)(cid:3) Pr
R (·) = 1
DOccr
Advccr
H,R(D)
def
=
(cid:4)
(cid:4)
def
R←R
f←Fk+1,k
where we require that D never queries both (x, 0) and (x, 1)
for any x. We say H is (t, q, ρ, ε)-circular correlation robust
if for all D running in time at most t and making at most q
R (·), and all R with min-entropy at least ρ, it
queries to Occr
holds that Advccr
H,R(D) ≤ ε.
Tweakable correlation robustness (tcr) and tweakable cir-
cular correlation robustness (tccr). By analogy with the
notion of tweakable block ciphers [34], we extend the notion
of (circular) correlation robustness to also incorporate a tweak.
As we discuss in Section IV, the addition of a tweak is crucial
for security of some protocols in the malicious setting.
Our deﬁnitions allow the attacker to repeat tweaks arbitrarily
many times. For some applications, weaker notions (such as
requiring non-repeating tweaks) may sufﬁce, and the deﬁni-
tions may be modiﬁed appropriately for those cases.
Deﬁnition 3. Let H : {0, 1}2k → {0, 1}k be a function, and
let R be a distribution on {0, 1}k. For R ∈ {0, 1}k, deﬁne
= H(x⊕ R, i) and Otccr
= H(x⊕ R, i)⊕
Otcr
R (x, i)
b · R. For a distinguisher D, deﬁne
(cid:5)(cid:3)(cid:3)(cid:3)
R (·) = 1
Df (·) = 1
Advtcr
(cid:5) − Pr
(cid:3)(cid:3)(cid:3) Pr
R (x, i, b)
DOtcr
H,R(D)
def
=
(cid:4)
(cid:4)
def
def
R←R
f←F2k,k
and
Advtccr
H,R(D)
(cid:3)(cid:3)(cid:3) Pr
R←R
(cid:4)
(cid:5) −
R (·) = 1
DOtccr
Pr
f←F2k+1,k
(cid:4)
(cid:5)(cid:3)(cid:3)(cid:3),
Df (·) = 1
def
=
where in the latter case we require that D never queries both
(x, i, 0) and (x, i, 1) for any x, i. We say H is (t, q, ρ, ε)-
tweakable correlation robust (resp., (t, q, ρ, ε)-tweakable
circular correlation robust) if
for all D running in time
at most t and making at most q queries to Otcr
R (·) (resp.,
R (·)), and all R with min-entropy at least ρ, it holds that
Otccr
Advtcr
H,R(D) ≤ ε (resp., Advtccr
H,R(D) ≤ ε).
Deﬁnitions in the random-permutation model. In this work
we construct hash functions H satisfying the above deﬁnitions
in the random-permutation model. That
is, we assume a
public, random permutation π : {0, 1}k → {0, 1}k and show
constructions of H given oracle access to π. The security
deﬁnitions are then modiﬁed by (1) taking probabilities also
over uniform choice of π and (2) giving the distinguisher D
oracle access to both π and its inverse π−1. In this case, we can
prove security of our constructions unconditionally so long as
we bound the number of queries that D makes to π/π−1 and
Semi-honest security
Reference
OT type
Prior work