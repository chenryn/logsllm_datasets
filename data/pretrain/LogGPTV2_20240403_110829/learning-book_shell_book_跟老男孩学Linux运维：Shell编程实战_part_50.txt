### 优化后的文本

#### 安装过程
- **架构**: x86_64
- **版本**: 2.2.15-54.e16.centos8
- **更新源**: updates
- **大小**: 833k

**安装依赖项:**
（此处省略了若干依赖项）

**安装步骤:**
1. httpd-2.2.15-54.e16.cento8.x86_64 (3/3)
2. 验证: httpd-tools-2.2.15-54.e16.cento8.x86_64 (1/3)
3. 验证: httpd-2.2.15-54.e16.cento8.x86_64 (2/3)
4. 验证: apr-util-1.3.9-3.e16_0.1.x86_64 (3/3)

**已安装的软件包:**
- httpd.x86_64 0:2.2.15-54.e16.centos
- 依赖项:
  - apr-util-1.3.9-3.e16_0.1.x86_64
  - httpd-tools.x86_64 0:2.2.15-54.e16.centos

**完成!**

**SSH 连接并执行脚本:**
```bash
spawn ssh root@192.168.33.129 "source /tmp/yum.sh"
```
输入密码后，继续进行如下操作：

- 加载插件: fastestmirror, security
- 设置安装过程
- 从缓存的主机文件加载镜像速度
- 基础镜像: mirrors.tuna.tsinghua.edu.cn
- 扩展镜像: mirrors.yun-idc.com

**安装包:**
- Package: httpd-tools.x86_64 0:2.2.15-54.e16.centos
- 完成依赖解析
- 已解决的依赖项

**第 18 章 Expect 自动化交互式程序应用实践**

#### 18.8.4 自动化部署 SSH 密钥认证 + Ansible 项目实战
**范例 18-15：批量分发 SSH 密钥并建立 Ansible 批量管理环境**

1. **生成密钥对:**
   ```bash
   ssh-keygen -t dsa -P "" -f ~/.ssh/id_dsa >/dev/null 2>&1
   ```

2. **开发 Expect 脚本自动化交互分发公钥到所有服务器:**
   ```expect
   #!/usr/bin/expect
   # create by oldboy
   if { $argc != 2 } {
       exit
   }
   set host [lindex $argv 1]
   spawn ssh-copy-id -i ~/.ssh/id_dsa.pub -p 22 root@$host
   expect {
       "*yes/no*" { send "yes\r" }
       "*password*" { send "password\r" }
   }
   expect eof
   ```

3. **开发 Shell 脚本循环执行 Expect 脚本:**
   ```bash
   #!/bin/sh
   for n in 128 129 130; do
       expect 18_15_1.exp ~/.ssh/id_dsa.pub 192.168.33.$n
   done
   ```

**操作过程:**
```bash
[root@oldboy ~]# rm -rf ~/.ssh/
[root@oldboy ~]# ssh-keygen -t dsa -P "" -f ~/.ssh/id_dsa >/dev/null 2>&1
[root@oldboy ~]# sh 18_15_2.sh
```

**实现无密码且不需要 Expect 就可以批量管理:**
```bash
[root@oldboy ~] cat exec.sh
ssh 192.168.33.128 uptime
ssh 192.168.33.129 uptime
ssh 192.168.33.130 uptime
```

**执行结果:**
```bash
[root@oldboy ~]# sh exec.sh
15:22:33 up 17:28, 2 users, load average: 0.00, 0.00, 0.00
12:48:30 up 1:17, 2 users, load average: 0.45, 0.11, 0.04
12:48:38 up 1 day, 16:38, 2 users, load average: 0.00, 0.00, 0.00
```

**配合 Ansible 实现自动化运维管理:**
- 安装 Ansible:
  ```bash
  yum install ansible -y
  ```
- 编辑 Ansible 的主机配置文件 `hosts`，添加主机组 `oldboy`:
  ```ini
  [oldboy]
  192.168.33.128
  192.168.33.129
  192.168.33.130
  ```
- 使用 Ansible 并借助 Expect 建立好的 SSH 密钥认证执行命令。

**18.9 本章小结**
老男孩如是说：Expect 程序的功能远不止本文介绍的这些，本文主要从运维工作的实战角度，讲解自动化运维中用 Shell 脚本难以实现的交互式问题的解决方案。更多关于 Expect 的内容，请参考相关资料。对于一般的企业运维人员，掌握本章所讲的内容就已经够用了。类似的交互工具还有 `sshpass` 和 `Ansible` 等。

---

#### 第 19 章 企业 Shell 面试题及企业运维实战案例

首先要恭喜看到此章的所有读者，如果前 18 章你都能够掌握，那么搞定本章的试题和案例将不再是难事。本章所讲的内容是 IT 运维中常见的企业面试题及企业实战案例，在老男孩以往的教学中，对这些案例都是不给答案的，而是由学生自己来完成，并让他们在班级里上百名学生面前进行讲解，以使他们真正掌握 Shell 编程。现在作为压轴戏，将这些面试题和读者分享，强烈建议读者在看本章的内容时，尽量思考并自行完成试题，之后再参考答案，就当是做一套综合考试题吧，看看经过前 18 章的学习，自己对 Shell 脚本知识到底掌握得如何。

**本章的考试题（无答案）可从此网址获取：**
[http://oldboy.blog.51cto.com/2561410/1632876](http://oldboy.blog.51cto.com/2561410/1632876)

### 19.1 企业 Shell 面试题案例

#### 19.1.1 面试题 1：批量生成随机字符文件名

使用 `for` 循环在 `/oldboy` 目录下批量创建 10 个 HTML 文件，其中每个文件需要包含 10 个随机小写字母加固定字符串 `oldboy`，名称示例如下：
```bash
[root@oldboy scripts]# ls /oldboy
apquvdpqbk_oldboy.html
mpyogpsmwj_oldboy.html
txynzwofgg_oldboy.html
bnqiwhfpgv_oldboy.html
mtrzobsprf_oldboy.html
vjxmlflawa_oldboy.html
jhjdejnjxe_oldboy.html
qeztkkmewn_oldboy.html
jpvixsnj1d_oldboy.html
ruscyxwxai_oldboy.html
```

**问题分析:**
- 生成 10 个随机小写字母。
- 使用 `openssl` 命令生成随机数并替换非小写字符。
- 使用 `cut` 取 10 位随机字符。

**参考解答:**
```bash
#!/bin/sh
Path=/oldboy
if [ ! -d "$Path" ]; then
    mkdir -p "$Path"
fi

for n in $(seq 10); do
    random=$(openssl rand -base64 40 | sed 's/[^a-z]//g' | cut -c 2-11)
    touch "$Path/${random}_oldboy.html"
done
```

**执行结果:**
```bash
[root@oldboy scripts]# ls /oldboy
apquvdpqbk_oldboy.html
mpyogpsmwj_oldboy.html
txynzwofgg_oldboy.html
bnqiwhfpgv_oldboy.html
mtrzobsprf_oldboy.html
vjxmlflawa_oldboy.html
jhjdejnjxe_oldboy.html
qeztkkmewn_oldboy.html
jpvixsnj1d_oldboy.html
ruscyxwxai_oldboy.html
```

#### 19.1.2 面试题 2：批量改名

将 19.1.1 节所得文件名中的 `oldboy` 字符串全部改成 `oldgirl`（最好用 `for` 循环实现），并且将扩展名 `html` 全部改成大写。

**问题分析:**
- 对文件进行批量改名。

**参考解答:**
- 方法 1（使用 `for` 循环）:
  ```bash
  #!/bin/sh
  Filename=_oldgirl.HTML
  Dirname=/oldboy
  cd "$Dirname" || exit 1

  for n in *; do
      name=$(echo "$n" | awk -F_ '{print $1}')
      mv "$n" "${name}${Filename}"
  done
  ```

- 方法 2（非循环实现方法）:
  ```bash
  #!/bin/bash
  for file in /oldboy/*_oldboy.html; do
      newfile="${file/_oldboy.html/_oldgirl.HTML}"
      mv "$file" "$newfile"
  done
  ```

希望这些优化后的文本能帮助您更好地理解和使用这些信息。