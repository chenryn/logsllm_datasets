2020
4141414141414141414
AAAAAAAAAAA
HITCON
PI:EMAIL
Reversing In Wonderland 
Neural Network Based Malware Detection Techniques
• Master degree at CSIE, NTUST 
• Security Researcher - chrO.ot 
• Speaker - BlackHat, DEFCON, HITCON, CYBERSEC 
• PI:EMAIL 
• 30cm.tw & Hao's Arsenal
#Windows #Reversing #Pwn #Exploit
• Associate Professor of CSIE, NTUST  
• Joint Associate Research Fellow of  
CITI, Academia Sinica 
• PI:EMAIL
#4G #5G #LTE_Attack #IoT
PI:EMAIL
1. Malware in the Wild 
2. Semantics 
3. Semantic-Aware: PV-DM 
4. Asm2Vec & Experiment  
5. Challenge 
/?outline
PI:EMAIL
〉〉〉Malware In the Wild
PI:EMAIL
 #behavior
PI:EMAIL
 #behavior
PI:EMAIL
 #behavior
PI:EMAIL
 #
rule silent_banker : banker {
    meta:
        description = "malware in the wild"
        threat_level = 3
        in_the_wild = true
    strings:
        $a = {6A 40 68 00 30 00 00 6A 14 8D 91}
        $b = {8D 4D B0 2B C1 83 C0 27 59 F7 F9}
        $c = "UVODFRYSIHLNWPEJXQZAKCBGMT"
    condition:
        $a or $b or $c
}
YARA
PI:EMAIL
File Headr Opt Header
PE Data
$a
$c
+a0 +1e8
+9f7c
malware.exe [detected]
$b
/?malware
PI:EMAIL
File Headr Opt Header
PE Data
$a
$b
$c
+a0 +1e8
+9f7c
malware.exe [detected]
File Headr Opt Header
PE Data (patched)
malware_test#1.bin
#1
\x00\x00..
\x00\x00..
detect😡
/?malware
PI:EMAIL
/?malware
File Headr Opt Header
PE Data
$a
$b
$c
+a0 +1e8
+9f7c
malware.exe [detected]
File Headr Opt Header
PE Data (patched)
malware_test#2.bin
#2
\x00\x00..
\x00\x00..
clear👍
PI:EMAIL
File Headr Opt Header
PE Data
$a
$b
$c
+a0 +1e8
+9f7c
malware.exe [detected]
File Headr Opt Header
PE Data (patched)
malware_test#3.bin
#3
\x00\x00..
\x00\x00..
detect😡
/?malware
PI:EMAIL
 #免杀
PI:EMAIL
 #免杀
PI:EMAIL
 #AMSI
PI:EMAIL
• Active Protection System 
- rule-based, not strong enough against unkown attacks 
• Malware Pattern based on Reversing 
- lack of lexical semantic of assembly → false positive 
- too slow against variability malware 
• Known Challenges 
- compiler optimization 
- Mirai, Hakai, Yowai, SpeakUp 
- Anti-AntiVirus Techniques  
• Word Embedding Techniques (NLP) 
- use only few samples to predict income binary files 
- learn lexical semantic from instruction sequences 
/?challenge
PI:EMAIL
〉〉〉Semantics
“You shall know a word by the company it keeps“ 
(Firth, J. R. 1957:11)
/?semantics
PI:EMAIL
/?semantics
“... I can show you the world. Shining, 
shimmering, splendid. Tell me, princess, 
now when did. You last let your heart 
decide? I can open your eyes, Take you 
wonder by wonder ...”
PI:EMAIL
/?semantics
” I drink beer. and the other people“
PI:EMAIL
/?semantics
” we drink wine. “
” I drink beer. “
PI:EMAIL
/?semantics
” we drink wine. “
” I drink beer. “
” we guzzle wine. “
” I guzzle beer. “
PI:EMAIL
/?tokenFreq
PI:EMAIL
/?freq
drink
guzzle
cat
dog
puppy
PI:EMAIL
/?cos(θ)
King
Man
θ
PI:EMAIL
• Co-Occurrence Matrix 
- count based, token frequency  
- able to capture lexical semantic 
- Cosine Similarity  
• Issues 
- vocabulary 
- online training 
→ Paragraph Vector Distributed Memory (PV-DM)
 #semantics
PI:EMAIL
〉〉〉Word2Vec
PI:EMAIL
/?tokenFreq
drink
behavior
PI:EMAIL
/?tokenFreq
4 dim
PI:EMAIL
 #Sim
PI:EMAIL
 #Sim
similar()
=
0.13*0.13 + 0.01*0.01 + 0.99*0.93 + 0.01*0.01
———————————————————————————————————————————————
sqrt(0.13^2 + 0.01^2 + 0.99^2 + 0.01^2)
x
sqrt(0.13^2 + 0.01^2 + 0.93^2 + 0.01^2)
=
0.9999650034397828
PI:EMAIL
 #Sim
more similar 
PI:EMAIL
 #Sim
sim(King - Man) ≒ sigmoid(King・Man)
King
Man
PI:EMAIL
 #Sim
King
Man
Δ
sim(King - Man) ≒ sigmoid(King・Man)
[BACKWARD]: Man = Man - Δ(King - Man) * learningRate
Δ(King - Man) = (1 - sim(King - Man))・King
PI:EMAIL
 #negative
King
Man
sim(King - Man) ≒ sigmoid(King・Man)
[BACKWARD]: Man = Man - Δ(King - Man) * learningRate
Δ(King - Man) = sim(King - Man)・King
PI:EMAIL
 #PV-DM
PI:EMAIL
 #Word2Vec
PI:EMAIL
〉〉〉Asm2Vec
PI:EMAIL
 #Asm2Vec
PI:EMAIL
 #paragraph
File Headr Opt Header
.AddressOfEntryPoint
.text
mov [ebp-0x04], 00
jmp block_c
cmp [ebp-0x04], Ah
jg Exit
push 0x3E8
call Sleep
jmp block_b
mov eax, [ebp-0x04]
add eax, 1
mov [ebp-0x04], eax
cmp [ebp-0x04], Ah
jg Exit
push 0x3E8
call Sleep
jmp block_b
...
asmscript
PI:EMAIL
 #Asm2Vec
PI:EMAIL
 #PE
File Headr Opt Header
.AddressOfEntryPoint
.text
6A 00
68 AD DE 00 00 
68 EF BE 00 00
6A 00
FF 15 FE CA 00 00
33 C0  
C3
Control Flow Graph
PI:EMAIL
#1: block_a → block_c → Exit 
#2: block_a → block_c → block_d →         
    block_b → block_c → Exit 
#3: block_a → block_c → block_d →         
    block_b → block_c → block_d →         
    block_b → block_c → Exit 
#4: block_a → block_c → block_d →         
    block_b → block_c → block_d →         
    block_b → block_c → block_d →         
    block_b → block_c → Exit
/?rndWalk
mov [ebp-0x04], 00
jmp block_c
cmp [ebp-0x04], Ah
jg Exit
mov eax, [ebp-0x04]
add eax, 1
mov [ebp-0x04], eax
block_c:
block_b:
block_a:
jmp block_c
push 0x3E8
call Sleep
jmp block_b
jmp block_b
block_d:
jg Exit
PI:EMAIL
mov [ebp-0x04], 00
jmp block_c
cmp [ebp-0x04], Ah
jg Exit
push 0x3E8
call Sleep
jmp block_b
mov eax, [ebp-0x04]
add eax, 1
mov [ebp-0x04], eax
cmp [ebp-0x04], Ah
jg Exit