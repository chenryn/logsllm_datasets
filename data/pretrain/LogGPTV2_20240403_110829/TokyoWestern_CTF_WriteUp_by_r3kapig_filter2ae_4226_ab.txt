                ub = (lb + ub) / 2
            k+=1
        print ub,len(long_to_bytes(ub))
        return ub
    io = zio(target, timeout=10000, print_read=COLORED(NONE, 'red'),print_write=COLORED(NONE, 'green'))
    n=get_n(io)
    print check_n(io,n)
    c=get_enc_key(io)
    print len(decrypt_io(io,c))==16
    m=guess_m(io,n,c)
    for i in range(m - 50000,m+50000):
        if pow(i,e,n)==c:
            aeskey=i
            print long_to_bytes(aeskey)[-1]==decrypt_io(io,c)[-1]
            print "found aes key",hex(aeskey)
    import fuck_r
    next_iv=fuck_r.get_state(io)
    print "##########################################"
    print next_iv
    print aeskey
    io.interact()
算随机数的python lib和java lib
    from Crypto.Util.number import long_to_bytes,bytes_to_long
    def encrypt_io(io,p):
        io.read_until("4: get encrypted keyn")
        io.writeline("1")
        io.read_until("input plain text: ")
        io.writeline(p)
        io.read_until("RSA: ")
        rsa_c=int(io.readline()[:-1],16)
        io.read_until("AES: ")
        aes_c=io.readline()[:-1].decode("hex")
        return rsa_c,aes_c
    import subprocess
    import random
    def get_iv(io):
        rsa_c, aes_c=encrypt_io(io,"1")
        return bytes_to_long(aes_c[0:16])
    def splitInto32(w128):
        w1 = w128 & (2**32-1)
        w2 = (w128 >> 32) & (2**32-1)
        w3 = (w128 >> 64) & (2**32-1)
        w4 = (w128 >> 96)
        return w1,w2,w3,w4
    def sign(iv):
        # converts a 32 bit uint to a 32 bit signed int
        if(iv&0x80000000):
            iv = -0x100000000 + iv
        return iv
    def get_state(io):
        numbers=[]
        for i in range(156):
            print i
            numbers.append(get_iv(io))
        observedNums = [sign(w) for n in numbers for w in splitInto32(n)]
        o = subprocess.check_output(["java", "Main"] + map(str, observedNums))
        stateList = [int(s) % (2 ** 32) for s in o.split()]
        r = random.Random()
        state = (3, tuple(stateList + [624]), None)
        r.setstate(state)
        return r.getrandbits(128)
    '''
    target=("crypto.chal.ctf.westerns.tokyo",5643)
    io = zio(target, timeout=10000, print_read=COLORED(NONE, 'red'),print_write=COLORED(NONE, 'green'))
    print get_state(io)
    print get_iv(io)
    io.interact()'''
    public class Main {
       static int[] state;
       static int currentIndex;
       public static void main(String[] args) {
          state = new int[624];
          currentIndex = 0;
    //    initialize(0);
    //    for (int i = 0; i >> 1;
             // xor it with the 397th next number
             next ^= state[(i + 397) % 624];
             // if y is odd, xor with magic number
             if ((y & 1L) == 1L) {
                next ^= 0x9908b0df;
             }
             // now we have the result
             state[i] = next;
          }
       }
       static int nextNumber() {
          currentIndex++;
          int tmp = state[currentIndex];
          tmp ^= (tmp >>> 11);
          tmp ^= (tmp >> 18);
          return tmp;
       }
       static void initialize(int seed) {
          // http://code.activestate.com/recipes/578056-mersenne-twister/
          // global MT
          // global bitmask_1
          // MT[0] = seed
          // for i in xrange(1,624):
          // MT[i] = ((1812433253 * MT[i-1]) ^ ((MT[i-1] >> 30) + i)) & bitmask_1
          // copied Python 2.7's impl (probably uint problems)
          state[0] = seed;
          for (int i = 1; i > 30) + i)) & 0xffffffff;
          }
       }
       static int unBitshiftRightXor(int value, int shift) {
          // we part of the value we are up to (with a width of shift bits)
          int i = 0;
          // we accumulate the result here
          int result = 0;
          // iterate until we've done the full 32 bits
          while (i * shift >> (shift * i);
             // obtain the part
             int part = value & partMask;
             // unapply the xor from the next part of the integer
             value ^= part >>> shift;
             // add the part to the result
             result |= part;
             i++;
          }
          return result;
       }
       static int unBitshiftLeftXor(int value, int shift, int mask) {
          // we part of the value we are up to (with a width of shift bits)
          int i = 0;
          // we accumulate the result here
          int result = 0;
          // iterate until we've done the full 32 bits
          while (i * shift >> (32 - shift)) << (shift * i);
             // obtain the part
             int part = value & partMask;
             // unapply the xor from the next part of the integer
             value ^= (part << shift) & mask;
             // add the part to the result
             result |= part;
             i++;
          }
          return result;
       }
       static void rev(int[] nums) {
          for (int i = 0; i < 624; i++) {
             int value = nums[i];
             value = unBitshiftRightXor(value, 18);
             value = unBitshiftLeftXor(value, 15, 0xefc60000);
             value = unBitshiftLeftXor(value, 7, 0x9d2c5680);
             value = unBitshiftRightXor(value, 11);
             state[i] = value;
          }
       }
    }
计算最终结果：
    from Crypto.Util.number import long_to_bytes
    c="232323232323232323232323232323236ac90897e6138c3ffde3666669fdca767a03e4b5e44f309fa322df4d4a27dbaae7a5b335be00e82a4150a18fb461adfd39e4c7e9bb00ba6edb59a1f37dda3f28".decode("hex")
    iv=long_to_bytes(83345920849977169166026104781978405220)
    key=long_to_bytes(102748041203696210196740355202977186893)
    from Crypto.Cipher import AES
    aes = AES.new(key, AES.MODE_CBC,iv)
    print aes.decrypt(c[16:])
心得：本题还是学了不少，但是此类俄罗斯套娃题花费精力太多，实在是无语
## Simple auth | web
parse_url解析造成的未初始化变量赋值漏洞，通过parse_url直接解析出hashed_password变量。  
[http://simpleauth.chal.ctf.westerns.tokyo/?action=auth&hashed_password=c019f6e5cd8aa0bbbcc6e994a54c757e](http://simpleauth.chal.ctf.westerns.tokyo/?action=auth&hashed_password=c019f6e5cd8aa0bbbcc6e994a54c757e)
## tw playing card | reverse
整个binary是一个nimlang写的扑克游戏，主逻从NimMainModule_402010开始
sub_401AA0是游戏的逻辑，lucky_enough_4017B0这个函数会检查你手里的牌是不是他要的
    v23 = lucky_enough_4017B0(player_cards);
      v24 = print_40BDA0((signed __int64 *)&ending_410CA0);
      ending = v24;
      if ( v23 )
      {