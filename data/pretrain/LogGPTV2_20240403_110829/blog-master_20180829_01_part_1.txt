## PostgreSQL sharding : citus 系列2 - TPC-H    
### 作者                                                             
digoal                                                             
### 日期                                                             
2018-08-29                                                           
### 标签                                                             
PostgreSQL , citus , tpc-h    
----                                                             
## 背景      
紧接着上一篇文档，本文测试citus的tpc-h能力（包括兼容性）.    
[《PostgreSQL sharding : citus 系列1 - 多机部署（含OLTP(TPC-B)测试）》](../201808/20180824_02.md)    
[《(TPC-H测试 SF=10,SF=200) PostgreSQL 11 vs 10 vs Deepgreen》](../201808/20180823_01.md)    
https://github.com/digoal/gp_tpch  
实际测试过程中，发现CITUS对TPC-H的SQL支持并不完整。  
## citus tpc-h 测试  
1、下载gp_tpch包  
```  
git clone https://github.com/digoal/gp_tpch  
```  
2、生成200G测试数据  
```  
cd gp_tpch  
ln -s `pwd` /tmp/dss-data  
./dbgen -s 200  
```  
3、将数据转换为PG识别的格式  
```  
for i in `ls *.tbl`; do sed 's/|$//' $i > ${i/tbl/csv}; echo $i; done;  
```  
4、生成测试SQL  
```  
SF=200  
mkdir dss/queries  
for q in `seq 1 22`  
do  
    DSS_QUERY=dss/templates ./qgen -s $SF $q > dss/queries/$q.sql  
    sed 's/^select/explain select/' dss/queries/$q.sql > dss/queries/$q.explain.sql  
done  
```  
5、修改citus 的几个参数，确保在跑两类QUERY的时候不报错（末尾会提到报错原因）。  
```  
alter role postgres set citus.enable_repartition_joins =on;  
alter role postgres set citus.max_intermediate_result_size =-1;  
```  
6、测试TPC-H(与coordinator同一台主机上测试)  
```  
./tpch.sh ./results 127.0.0.1 port tpch-db tpch-user password citus  
```  
### tpc-h 性能  
有些SQL不支持，显示0.   
```
2018-08-29 19:24:30 [1535541870] :     query 1 finished OK (12 seconds)
2018-08-29 19:24:30 [1535541870] :     query 2 finished OK (0 seconds)
2018-08-29 19:25:48 [1535541948] :     query 3 finished OK (77 seconds)
2018-08-29 19:25:50 [1535541950] :     query 4 finished OK (2 seconds)
2018-08-29 19:29:45 [1535542185] :     query 5 finished OK (234 seconds)
2018-08-29 19:29:47 [1535542187] :     query 6 finished OK (1 seconds)
2018-08-29 19:37:33 [1535542653] :     query 7 finished OK (465 seconds)
2018-08-29 19:44:30 [1535543070] :     query 8 finished OK (415 seconds)
2018-08-29 19:58:29 [1535543909] :     query 9 finished OK (837 seconds)
2018-08-29 20:00:26 [1535544026] :     query 10 finished OK (116 seconds)
2018-08-29 20:00:26 [1535544026] :     query 11 finished OK (0 seconds)
2018-08-29 20:00:32 [1535544032] :     query 12 finished OK (6 seconds)
2018-08-29 20:00:33 [1535544033] :     query 13 finished OK (0 seconds)
2018-08-29 20:01:40 [1535544100] :     query 14 finished OK (67 seconds)
2018-08-29 20:05:33 [1535544333] :     query 15 finished OK (232 seconds)
2018-08-29 20:05:34 [1535544334] :     query 16 finished OK (0 seconds)
2018-08-29 20:05:34 [1535544334] :     query 17 finished OK (0 seconds)
2018-08-29 20:05:34 [1535544334] :     query 18 finished OK (0 seconds)
2018-08-29 20:06:51 [1535544411] :     query 19 finished OK (76 seconds)
2018-08-29 20:06:51 [1535544411] :     query 20 finished OK (0 seconds)
2018-08-29 20:06:52 [1535544412] :     query 21 finished OK (0 seconds)
2018-08-29 20:06:52 [1535544412] :     query 22 finished OK (0 seconds)
2018-08-29 20:06:52 [1535544412] : finished TPC-H benchmark
```
### citus tpc-h SQL文件讲解  
1、分片字段  
```  
select create_distributed_table('part','p_partkey');  
select create_distributed_table('region','r_regionkey');  
select create_distributed_table('nation','n_nationkey');  
select create_distributed_table('supplier','s_suppkey');  
select create_distributed_table('customer','c_custkey');  
select create_distributed_table('partsupp','ps_suppkey');  
select create_distributed_table('orders','o_orderkey');  
select create_distributed_table('lineitem','l_orderkey');  
```  
2、colocate(默认情况下是同一个分组，不需要colocate)  
```  
SELECT mark_tables_colocated('part', ARRAY['region', 'nation', 'supplier', 'customer', 'partsupp', 'orders', 'lineitem']);  
默认分组,在创建分片表时colocate默认为default, 
只要表的shard数量、分片类型(append, or hash)、colocate组 都一致，则他们就是colocate的。
create_distributed_table
参数：colocate_with: (Optional) include current table in the co-location group of another table. 
By default tables are co-located when they are distributed by columns of the same type, 
have the same shard count, and have the same replication factor. 
Possible values for colocate_with are default, none to start a new co-location group, 
or the name of another table to co-locate with that table. (See Co-Locating Tables.)
```  
3、索引  
```  
ALTER TABLE PART ADD constraint pk1 PRIMARY KEY (P_PARTKEY);  
ALTER TABLE SUPPLIER ADD constraint pk2 PRIMARY KEY (S_SUPPKEY);  
ALTER TABLE PARTSUPP ADD constraint pk3 PRIMARY KEY (PS_PARTKEY, PS_SUPPKEY);  
ALTER TABLE CUSTOMER ADD constraint pk4 PRIMARY KEY (C_CUSTKEY);  
ALTER TABLE ORDERS ADD constraint pk5 PRIMARY KEY (O_ORDERKEY);  
ALTER TABLE LINEITEM ADD constraint pk6 PRIMARY KEY (L_ORDERKEY, L_LINENUMBER);  
ALTER TABLE NATION ADD constraint pk7 PRIMARY KEY (N_NATIONKEY);  
ALTER TABLE REGION ADD constraint pk8 PRIMARY KEY (R_REGIONKEY);  
CREATE INDEX idx_nation_regionkey ON public.nation USING btree (n_regionkey);  
CREATE INDEX idx6 ON public.nation USING btree (n_nationkey, n_regionkey);  
CREATE INDEX idx5 ON public.region USING btree (r_name, r_regionkey);  
CREATE INDEX IDX_CUSTOMER_NATIONKEY ON CUSTOMER (C_NATIONKEY);  
CREATE INDEX IDX_LINEITEM_PART_SUPP ON LINEITEM (L_PARTKEY,L_SUPPKEY);  
CREATE INDEX idx_lineitem_shipdate ON public.lineitem USING btree (l_shipdate, l_discount, l_quantity);  
CREATE INDEX idx_lineitem__2 ON public.lineitem USING btree (l_partkey);  
CREATE INDEX idx_lineitem__3 ON public.lineitem USING btree (l_suppkey);  
CREATE INDEX idx_lineitem__11 ON public.lineitem USING btree (l_shipdate);  
CREATE INDEX idx_lineitem_orderkey ON public.lineitem USING btree (l_orderkey);  
CREATE INDEX idx1 ON public.lineitem USING btree (l_orderkey) WHERE (l_commitdate  (  
                        select  
                                sum(ps_supplycost * ps_availqty) * 0.0000005000  
                        from  
                                partsupp,  
                                supplier,  
                                nation  
                        where  
                                ps_suppkey = s_suppkey  
                                and s_nationkey = n_nationkey  
                                and n_name = 'SAUDI ARABIA'  
                )  
order by  
        value desc  
LIMIT 1;  
```  
改成  
```  
select  
        ps_partkey,  
        sum(ps_supplycost * ps_availqty) as value  
from  
        partsupp,  
        supplier,  
        nation  
where  
        ps_suppkey = s_suppkey  
        and s_nationkey = n_nationkey  
        and n_name = 'SAUDI ARABIA'  
group by  
        ps_partkey having  
                sum(ps_supplycost * ps_availqty) >   
		             ( sum(ps_supplycost * ps_availqty) filter   
			       (where  
                                ps_suppkey = s_suppkey  
                                and s_nationkey = n_nationkey  
                                and n_name = 'SAUDI ARABIA'  
			        )   
			     ) * 0.0000005000  
order by  
        value desc  
LIMIT 1;  
```  
### 错误2  
```  
ERROR:  the query contains a join that requires repartitioning
HINT:  Set citus.enable_repartition_joins to on to enable repartitioning
```  