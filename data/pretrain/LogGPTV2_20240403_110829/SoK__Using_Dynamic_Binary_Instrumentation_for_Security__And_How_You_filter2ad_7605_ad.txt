granted execution permissions [28].
DBI engine internals. While the CPU context exposed to the ap-
plication under analysis is masked by the DBI abstraction, some
changes applied to the execution context to assist a DBI runtime
are not. One instance is represented by Thread Local Storage slots:
developers can use TLS to maintain thread-specific storage in con-
current applications, but for the sake of efficiency DBI engines
may occupy slots with internal data [56]. Another attack surface is
represented by DLL functions that are altered by the engine: while
the vast majority of library code goes unhindered through the DBI
engine, in special cases trampolines should be inserted at their head.
In the case of Pin on Windows systems ntdll is patched for [52]:
• KiUserExceptionDispatcher, to distinguish exceptions in
the running code from internal (engine/analysis code) ones;
• KiUserApcDispatcher and KiUserCallbackDispatcher,
as the Windows kernel can deliver asynchronous events;
• LdrInitializeThunk, to intercept user thread creation.
Interactions with the OS. DBI engines are concerned with the
transparency of the execution space of an application, but as they
are userspace VMs their presence can be revealed by interacting
with the OS. A classic example is to check for the parent process [17,
31] or the list of active processes to reveal Pin or DynamoRIO.
Handles can reveal the presence of a DBI engine too, for instance
when fewer than expected are available for file manipulation [31] or
when their names give away the presence of, e.g., Pin [17]. We found
out that Pin may be revealed also by anti-debugging techniques
based on NtQueryInformationProcess and NtQueryObject.
Exception handling. DBI engines have capabilities for hooking
exceptional control flow: for instance, this is required to provide
SEH handlers with the same information that would accompany the
exception in a native execution [52]. There are however cases that
DBI embodiments may not deal with correctly. For instance, we
found out that Pin may not handle properly single-step exceptions
and int 2d instructions used in evasive malware, with the sample
not seeing the expected exception.
Translation defects. Analysis systems that base their working
on binary translation are subject to implementation defects and
limitations: this is true for DBI but also for full system emulators
like QEMU. A popular example is the enter instruction that is not
implemented in Valgrind [28]. DBI architects may decide to not
support rarely used instructions; however, some instructions are
intrinsically challenging for DBI systems: consider for instance far
returns, which in Pin are allowed only when within the same code
segment. Similarly, Pin cannot run “Heaven’s gate code” to jump
into a 64-bit segment from a 32-bit program by altering the CS
selector. DynamoRIO does not detect the change, paving the way to
the Xmode code evasion [56] that uses special instructions having
the same encoding and disassembly on both architectures to yield
different results due to the different stack operations size.
We put in this category also uses of self-modifying code (SMC):
intuitively, SMC should always lead to invalidation of cached trans-
lated code, but implementations may miss its presence. In 2010
Martignoni et al. reported: “the presence of aggressive self-modifying
code prevents [...] from using efficient code emulations techniques,
such as dynamic binary translation and software-based virtualiza-
tion” [35]. Detecting SMC sequences affecting basic blocks other
than the current is nowadays supported by many DBI engines, while
SMC on the executing block complicates the picture: DynamoRIO
handles it correctly, while Pin has caught up from its 3.0 release
providing a strict SMC policy option to deal with such cases.
4.4 Escaping from Current DBI Embodiments
To the best of our knowledge, the first DBI escape attack has been
described in a 2014 blog post by Cosmin Gorgovan [21]: the au-
thor investigated how weaknesses of current DBI implementations
highlighted in evasion-related works could pave the way to DBI
escape. Intuitively, an avenue is represented by having code cache
locations readable and writable also by the code under analysis.
AsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand
D’Elia et al.
Instead of leveraging a leaked pointer artifact, the author sug-
gests encoding a fairly unique pattern in a block that gets executed
and looking it up in the code cache once the latter’s randomized lo-
cation is determined by querying the OS memory map. The pattern
gets overwritten with a trampoline, and when execution reaches the
block again the code escapes. Gorgovan also explains how to make
execution gracefully return under the control of the DBI system.
The code cache is not the only region that can be tampered with:
escape attacks involving internal data, callbacks, and stack that
are specific to a DBI engine are described in [56]. More recently,
[28] describes a complex data-only attack for COTS applications
running in Pin that uses a known memory corruption bug to escape,
leveraging relative distances between regions that host, e.g., the
libc and the code cache that are predictable in some Linux releases.
5 COUNTERMEASURES
In the following we investigate how transparency problems of DBI
can be mitigated by revisiting the design space of engines, and
when stopgap measures shipped with user code could be helpful.
5.1 Design Space of DBI Frameworks
The design of general-purpose embodiments of the DBI abstrac-
tion has historically been driven by the necessity of preserving
execution correctness while obtaining an acceptable performance
level. While general techniques for dynamic code generation and
compilation have dramatically improved in the past two decades
in response to the ever-growing popularity of languages for man-
aged runtimes, DBI architects have to face additional, compelling
execution transparency problems. They thus strove to improve the
designs and implementations of their systems as misbehaviors were
observed in the analysis of mainstream applications [4], backing
popular program analysis tools such as profilers, cache simulators,
and memory checkers.
The security research domain is however characterized by appli-
cation scenarios where the program under inspection may resort
to a plethora of generic or DBI-specific techniques to elude the
analysis or even tamper with the runtime. A researcher may thus
wonder how the design of a general-purpose DBI framework could
be adapted to deal with common categories of adversarial sequences.
In some cases the required changes could not be easy to be accom-
modated by a DBI framework with a wide audience of users from
different domains, but could be sustainable for an engine that is
designed with specific security applications in mind: one prominent
example is SafeMachine [24], a proprietary DBI framework used
by the Avast security firm for fine-grained malware analysis.
We will now revisit the attack surfaces from Section 4.3 from a
DBI architect’s perspective, referencing research works that have
dealt with specific aspects and discussing other viable options.
Time overhead. Dealing with the run-time overhead from a dy-
namic analysis is an old problem in research. The overhead of a
DBI system is not easy to hide, and it may not only be revealed
by adversarial measurement sequences, but as discussed in [4] can
also affect the correct execution of code sensitive to time changes.
Also, the time spent in analysis code might exceed the cost of mere
instrumentation depending on the type of analysis carried out.
Previous research in malware analysis has explored mechanisms
to alter the time behavior perceived by the process by faking the
results of time queries from different sources [46]. However, their
efficacy is mostly tied to detection patterns observed in a specific
domain. A general solution based on realistic simulations of the time
elapsed in executing instructions as if the cost of DBI were evicted is
believed impractical for dynamic analyses [19]. Also, such schemes
may be defeated by queries to other processes not running under
DBI or to external attacker-controlled time sources. Compared to
VMI solutions where one may patch the time sources of the entire
guest machine, DBI architects are thus left with (possibly much)
less wiggle room to face timing attacks.
Leaked code pointers. We have mentioned subtle ways to leak
code cache addresses through execution artifacts for specific code
patterns, namely FPU context saving instructions and context switch-
ing sequences for syscalls. While these leaks do not seem to bother
the execution of classic programs under DBI, at the price of an
increased overhead a framework could be extended to patch them
as soon as they become visible to user code2.
Memory contents and permissions. Presenting the code under
analysis with a faithful memory state as in a native execution is
inherently difficult for a DBI system, as it operates at the same
privilege level and in the same address space of the program. We
identify three aspects that matter in how memory gets presented
to the code under analysis.
The first aspect is correctness. As we have seen, memory permis-
sions mirroring a native execution may not be enforced faithfully,
resulting in possibly unfeasible executions. For instance, a DBI sys-
tem may not detect when the virtual instruction pointer reaches a
region that is not executable, continuing the instruction fetching
process rather than triggering an exception. This may result in, e.g.,
reviving classic buffer overflow attacks as shown in [28]. Similarly,
failing to reproduce guard page checks may be problematic when
dealing with programs like JIT compilers that use them. Adding
these checks may introduce unnecessary overhead for many ana-
lyzed applications, so they could be made available on demand.
The second aspect is escaping. When an adversary gets a pointer
inside the code cache, injection attacks become a possibility. This
problem is shared with general-purpose JIT engines [54], such as
those used in browsers for running Javascript code efficiently. One
possibility could be to use read-only code caches as in the mobile
version of Safari, incurring a performance penalty by switching it
to writable non-executable when modifications are made by the
engine; during a transition however legit accesses from concurrent
threads could fail, and proper handling would be needed.
Keeping thread-specific code caches mitigates the problem at the
price of increased memory occupancy3 and is available as an option
for instance in DynamoRIO. This solution is however still subject
to race conditions attacks as shown in [54]. The authors propose
a mechanism where a writable code cache is moved to another
process, and its pages shared with the process under analysis with
read-only privileges. Their approach incurs a small performance
overhead on Strata and on the V8 JavaScript engine.
2https://github.com/dynamorio/dynamorio/issues/698.
3This may however even let instrumentation code run faster when thread-specific.
SoK: Using Dynamic Binary Instrumentation for Security
AsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand
The third aspect is evasion. Due to the shared address space, an
adversary may simply register an exception handler and scan the
memory looking for unexpected contents, such as the presence of
the code cache or internal structures and code from the runtime.
Shepherding all memory accesses would solve the evasion problem,
but the overhead could increase dramatically [4].
One mitigation proposed in Strata is to use metamorphism to
alter the contents of the code cache, hindering evasion and escape
attacks based on pattern recognition. This could be paired with
guarded pages and mechanisms to move the location of the code
cache (and possibly internal structures) periodically during the
execution, triggering however the invalidation of all compiled code
as if the engine were detached and reattached to the process.
These countermeasures would still not be sufficient against at-
tackers with code reading capabilities. Consider the case of a loop
trying to read the page containing its own instructions in the cache:
such an access cannot be denied on the x86 architecture. An answer
to the problem may come from recent research on non-readable ex-
ecutable memory (XnR) [1] to prevent disclosure exploits for code
reuse attacks. While the default XnR setting does not support our
“in-page” reading loop scenario, follow-up techniques can be used
to handle it: in particular, [62] shows how to achieve an effective
separation between read and execution capabilities using Extended
Page Tables on a thin hypervisor layer. Further hardware assis-
tance could ease both the implementation and deployment effort:
for instance, the ARMv8 processor provides facilities to support
this mechanism at kernel level [62], while the Intel Skylake x86
architecture has introduced Memory Protection Keys to control
memory permissions in user space that could be used to achieve
executable-only memory as described in [33].
DBI engine internals. Changes to the execution context may be
necessary for the sake of performance, for instance to keep internal
data structures of the runtime quickly accessible using TLS mech-
anisms. An engine may attempt to randomize the TLS slot in use
and hide its presence to queries from the application, but when an
adversarial sequence tries to allocate all the slots the engine can
either abort the execution (similarly as in what happens when the
memory occupied by the engine prevents further heap allocation
by the program) or resort to a less efficient storage mechanism.
The presence of trampolines on special DLL functions could be
hidden using the same techniques for protecting the code cache,
providing the original bytes expected in a read operation as in [46].
Write operations are instead more difficult, as the attacker may
install a custom trampoline that either returns eventually to the
original function (which still needs to be intercepted by the engine)
or simply alter the standard semantics for the call in exotic ways.
Interactions with the OS. DBI frameworks can massage the pa-
rameters and output values of some library and system calls in
order to achieve the design guideline G2, that is, hiding unavoidable
changes from the program (Section 4.1). For instance, DynamoRIO
intercepts memory query operations to its own regions to let the
program think that such areas are free [4]. While allocations in such
regions could be allowed in principle by moving the runtime in
other portions of the address space, resource exhaustion attacks are
still possible on 32-bit architectures, and are not limited to memory
(for instance, file descriptors are another possibility). As system
call interposition can incur well-known traps and pitfalls [18], DBI
architects implement such strategies very carefully. Observe that
remote memory modifications carried out from another process
could be problematic as well, but a kernel module could be used to
capture them [4].
Exception handling. A DBI system has to present a faithful con-
text to the application in the presence of exceptions and signals.
DBI architects are faced with different options in when (if an in-
terruption can be delayed) and how the context translation has to
take place; also, there are cases extreme enough for mainstream
applications that can be handled loosely [4]. Systems like Valgrind
that work like emulators by updating the virtual application state at
every executed instruction are not affected by this problem. How-
ever, they incur a higher runtime overhead compared to others (e.g.,
Pin, DynamoRIO) that reconstruct the context only when needed.
Translation defects. Instruction errata and alike defects can be
brought under two main categories: implementation gaps and de-
sign choices. Apart from challenging sequences such as 32-to-64
switches, errata from the first category can be addressed through
implementation effort for code domains where they are problematic.
On the other hand, defects may arise due to design choices aimed
at supporting efficient execution of general programs: this is the