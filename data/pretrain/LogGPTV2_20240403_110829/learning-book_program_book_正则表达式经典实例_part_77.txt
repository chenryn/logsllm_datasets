#单引号引起来的属性值
）*
>
正则选项：宽松排列
正则流派：.NET、Java、PCRE、Perl、Python、Ruby
刚刚所给的两个正则式用起来是完全一样的，因此可以选择使用你喜欢的形式。如果
你用的是JavaScript，那么只能使用第一种形式，因为JavaScript不支持宽松排列模式。
（X）HTML标签（灵活方案）
除了会在属性值中支持嵌入的>学符，下一个正则式还会模拟浏览器中通常会实现的
关于（X)HTML标签名称的灵活模式。它会让正则式避免匹配到看起来不像是标签的内
容，这其中包括了注释、DOCTYPE和在文本中没有进行编码的
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
400第8章
www.TopSage.com
---
## Page 417
下面给出了这个正则式的宽松排列形式：
/}*)
把标签名称捕获到第1个向后引用中
（？：[^>"*]
#没有被引起来的字符，或者..·
1"["]*"
双引号引起来的属性值，或者.
#单引号引起来的属性值
) *
>
正则选项：宽松排列
正则流派：.NET、Java、PCRE、Perl、Python、Ruby
上面这两个正则式用起来也是完全一样的，然而后者不能用于JavaScript，因为它不支
持宽松排列的选项。
(X)HTML标签（严格方案）
相比本实例中前面所给的正则表达式，下面这个要复杂很多，因为它会实际遵守我们
在本章最开始处所介绍的(X)HTML标签的规则。这并不总是有必要的，因为浏览器也
不会严格遵守这些规则。换句话说，这个正则表达式会避免匹配到不像是合法的
(X)HTML标签的内容，但是有可能要付出的代价是无法匹配到浏览器，事实上会解释
为标签的一些内容（例如，如果你的标记中使用的属性名称里包括了这里没有提到的
字符，或者是属性被添加到了结束标签中）。这里同时处理了HTML和XHTML的标签，
因为它们的两种语法通常会被混起来使用。标签名称被捕获到了第1个或者第2个向
后引用中（根据它是一个起始标签还是结束标签），从而可以在后面使用该标签的名称：
#
(?:
起始标签的分支.
([_:A-Z][-.:\w] *)
把起始标签名称捕获到第1个向后引用
(?：
#
支持0个或多个属性...
\s+
..由空格分隔开
[_：A-Z][-.:\w] *
属性名称
S\=S
#
属性名称一值之间的分隔符
（？：”[”]*"
#
双引号引起来的属性值
∣[] *
#
单引号引起来的属性值
)
#
) *
#
\s*
#
允许拖尾的空白
/?
#
允许自己结束的标签
#结束标签的分支..
/
#
（[_：A~Z] [-.:\w] *)
#
把结束标签捕获到第2个向后引用中
\s *
允许拖尾的空白
）
#
>
#
正则选项：不区分大小写、宽松排列
正则流派：.NET、Java、PCRE、Perl、Python、Ruby
同我们前面所给的（X)HTML标签的两种解答一样，这些正则式也会把标签名称捕获到
第1个或者第2个向后引用中，这会取决于匹配到的是一个起始标签还是结束标签。
XML标签的正则表达式与前面的（X）HTML版本相比稍微要短一些，这是因为它不用
402
第8章
www.TopSage.com
---
## Page 419
处理只有HTML才支持的语法（不带值的属性和没有引起来的值）。它同样允许在元素
和属性名称中使用更大范围的字符。
讨论
几句言
尽管想要使用正则表达式来匹配XML风格的标签是很常见的任务，要安全地完成这个
任务则需要做出多种权衡，并且需要认真考虑你要处理的数据。由于存在这些困难，
所以有些人选择不使用正则表达式来处理任意类型的XML或（XHTML任务，而是选
择采用特殊的分析器和AP1。这也是我们强烈建议读者认真考虑的方式，因为这些工具
通常是经过优化的，可以很快执行它们的指定任务，而且它们还包含了对于错误标记
的健壮检查或错误处理功能。例如，在浏览器的领域中，通常最好利用基于树形结构
的文档对象模式（DOM）来执行HTML的查找和处理需求。在其他场合，一般可以使
用一个SAX分析器或XPath。然而，偶尔你也许会遇到一些场合，它们更适合使用基
于正则表达式的解决方案。
在了解了这些事实之后，我们再来仔细看一下本实例前面所给的正则表达式。对于大
多数情形来说，最前面两个解答都有些过于简单，但是可以同时处理XML风格的标记
语言。后面3种形式遵循了更加严格的规则，因此可以被裁剪来适应相应的标记语言。
然而，即使在后面几个解答中，HTML和XHTML标签的规则也还是一起来处理的，
这是因为它们常常会在不经意间被混合起来使用。举例来说，一个作者可能会在一个
HTML文档中使用了一个XHTML风格的、自结束的标签，或者也可能会在一
个拥有XHTMLDOCTYPE的文档中使用了大写的元素名称。
速成方案
这种解决方案的优点是它的简单性，这不仅使其容易让人记住和输人，而且运行速度
也很快。因而带来的缺点是它会不正确地处理某些合法和不合法的XML和(X)HTML
结构。如果你要处理的是自已写的标记文件，并且知道在目标文本中肯定不会出现这
种情形，或者说即使它们出现了，你也不在乎它可能会带来的后果，那么这样的权衡
折中可能是可以接受的。可以使用这个解决方案的另外一个例子是你使用的文本编辑
器会支持对正则匹配进行预览。
这个正则式一上来先会查找一个字面的（]*来匹配非>的0个或多个字符。这
样就可以匹配标签的名称、属性和-一个前导或拖尾的／字符。我们也可以在这里使用
一个情性量词（[>*?>），但是这样并不会改变任何结果，只是会导致这个正则式的速
度稍微慢一点，因为它会造成更多的回溯（参见实例2.13）。作为标签的结束，这个正
则式最后匹配了一个字面的(>)。
标记语言和数据交换403
www.TopSage.com
---
## Page 420
如果你更喜欢在否定字符类[>]的地方使用一个点号来替代，那么也可以这样做。
））
JavaScript中，你可以使用），那么它也能够正确执行。点号再加上贪心星号量
词（也就是把整个模式改成>）会改变正则表达式的含义，造成它错误地匹配到目
标字符串中从第一个之间的内容，而在此过程中，正则式也可能
会吞掉多个其他标签。
下面我们来介绍几个例子。这个正则式会整体匹配下面的每一行内容：