more than one gadgets in the same 64-byte cache line, be-
cause only the execution of the ﬁrst gadget will fetch the
memory block into the cache, and subsequent gadgets in the
same cache line merely introduce noise.
The set of ARM instructions that can lead to indirect
control ﬂow transfers are listed in Table 2. On 32-bit ARM
v7 architectures, bx Rm sets the current PC value to be the
value of the register Rm (i.e., indirect jump); blx Rm also
sets the value of LR (i.e., R14) to be the address of the next
instruction before jumping to the address speciﬁed by Rm
(i.e., indirect call). Direct manipulation of PC is also allowed
by using mov or pop or ldm instructions4. On 64-bit ARM v8
architectures, in addition to the diﬀerence in the size of the
registers (64 bits), ret instructions are also available: ret
instruction changes the PC value to the value of LR; ret Xm
sets PC to the value stored in Xm rather than LR. However, the
PC register can no longer be manipulated directly on ARM
v8 architectures.
Architecture
ARM v7
(32 bit)
ARM v8
(64 bit)
Instructions
bx LR
bx Rm
blx Rm
mov PC LR
pop {pc}
ldm {pc}
br Xm
blr Xm
ret Xm
ret
Eﬀects
PC := LR
PC := Rm
LR(R14) := next instr.
PC := Rm
PC := LR
PC := top of stack
load multiple regs
PC := Xm
LR(X30) := next instr.
PC := Xm
PC := Xm
PC := LR(X30)
Table 2: Indirect control-ﬂow transfer instructions on ARM.
The gadgets used in our attack will be easier to construct
compared to those in ROP attacks—our gadgets do not need
to complete any meaningful operations. We only need to
jump to one of these indirect control transfer instructions
4
There are four variations of ldm: ldmia, ldmib, ldmda, ldmdb. Their
usage can be found in [3].
(listed in Table 2) so that the memory block that holds the
instruction is loaded into the cache. The control ﬂow will be
immediately transferred back to the auxiliary function after
the instruction is fetched and executed.
We illustrate the use of the 64-bit ret and blr Xm in-
structions to construct gadgets in Fig. 3. In particular, in
this example, the adversary hopes to Flush-Reload a func-
tion, clock_gettime, in libc.so. To exploit the blr X4 in-
struction as a gadget, the attacker app calculates the virtual
address of the instruction at runtime (i.e., the base address
of the library’s code section plus the oﬀset of the instruction
within the library). Here, let’s assume the virtual address
is 0x246a0. This address is ﬁrst loaded into register X19, so
that the control ﬂow will be transferred to the gadget later
by br X19. The adversary then makes a copy of X30 to an-
other register, say X20, because it will be modiﬁed by the
gadget instruction blr X4. Then the adversary prepares the
value of X4, the target address of blr X4, so that the control
ﬂow will be redirected back to the auxiliary function once
the gadget is executed. It is important to maintain the cor-
rectness of the subsequent execution by restoring the value
of X30 from register X20.
Exploiting ret is much easier. The adversary ﬁrst stores
the address of the gadget in a register, say X19. Then the
control ﬂow is transferred by blr X19, which sets the value
of X30 to be the address of the next instruction and then
changes the PC value to the address stored in X19. The
control ﬂow will be transferred back to the address stored in
X30 by the ret instruction.
Figure 3: Examples of gadgets.
Availability of the reload gadgets. To investigate the
availability of the reload gadgets in Android shared libraries,
we used objdump to disassemble ﬁve widely-used shared li-
braries used on a 64-bit Android OS (Samsung Galaxy S6,
Android version 5.1.1). We then wrote a Python script to
count the number of indirect control transfer instructions
and the number of useful gadgets (those in separate cache
lines) in these libraries. The results are listed in Table 3.
Libraries
libc.so
libc++.so
libinput.so
libcrypto.so
libandroid.so
code size
912 KB
1050 KB
186 KB
2065 KB
92 KB
branch instr.
2755
3714
585
6897
430
gadgets
1547
2174
283
4246
180
Table 3: Availability of the reload gadgets.
863attacks can be performed. To empirically determine this
property, we executed the same receiver app developed in
the paragraph above. It Flush-Reloads on k gadgets (k
ranges from 1 to 10) without Flush-Reload intervals. The
mean execution time of one Flush-Reload cycle and one
standard deviation are reported in Fig. 4b. We can see
that Flush-Reload cycles for one gadget on A53 is around
500ns, and that for more gadgets increases (roughly) lin-
early.
4.4 Practical Considerations
To make these attacks practical on Android, however, we
consider several factors that may constrain the attacks.
CPU frequency. Mobile devices dynamically scale up and
down the operation frequency of each CPU core indepen-
dently to reduce power consumption. The timing channel,
when executed on CPUs with varying frequency, may lead
to unstable results.
In the practical attacks that we will
demonstrate in Sec. 5, ﬁxing CPU frequency from the ker-
nel is not an option. Therefore, we evaluated to what extent
will the frequency vary during our Flush-Reload attacks.
To do so, we conducted an experiment in which we measured
the frequency of the CPU core on which the Flush-Reload
attack runs. This can be done by reading sysfs6 within the
attacker app itself, because no additional permission is re-
quired. We found in all cases after starting running our
Flush-Reload attacks from an otherwise idle CPU core,
the operation frequency would reach the maximum and stay
unchanged until the attacks ﬁnished. Therefore, CPU fre-
quency scaling will not impact our attack once the malicious
app warms up the CPU.
Thread scheduling and cgroups. To limit the resource
consumption of background threads, Android employs two
control groups (cgroups). The background apps and threads
are assigned to the background cgroups where up to 5% CPU
resources can be used when contending with other apps.
However, we found in our experiments that the attacks are
not aﬀected by such mechanisms as long as the device is not
running computation-intensive apps that occupy all CPU
resources, in which case the CPU caches will be highly pol-
luted and cache attacks will hardly work anyway.
Dual CPU architectures. More recent smartphones (e.g.,
Samsung Galaxy S5 and S6) come with octa-core processors—
two processor packages with four cores each. For exam-
ple, recent Samsung Exynos processors usually have two
asymmetric processors, one with higher operation frequency
to support CPU-intensive applications and one with lower
frequency to save power when the demand is low. How-
ever, in our experiments, although the malicious app and
the victim app run on diﬀerent CPUs, the return-oriented
Flush-Reload attacks can still successfully diﬀerentiate
whether the victim touched the shared library functions or
not (though the diﬀerences are slightly smaller). We pre-
sume this is because of the ARM Cache Coherent Inter-
connect [4]. Similar cross-core Flush-Reload side chan-
nels have been observed by Irazoqui et al. on AMD proces-
sors [27]. Therefore, we only run the malicious app on a core
of Cortex-A53 processor (using sched_setaffinity system
call that requires no additional permission) and the victim
app running on either of the CPUs can be targeted.
(a) Minimum gadgets.
(b) Min. Flush-Reload cycles.
Figure 4: Characteristics of Flush-Reload side channels.
4.3 Characterizing ARM Flush-Reload Attacks
In this section, we evaluate two important characteris-
tics of the return-oriented Flush-Reload side-channel at-
tacks described above: (1) the minimum number of gadgets
needed to Flush-Reload at the same time in order to reli-
ably diﬀerentiate cache hits from cache misses, and (2) the
shortest Flush-Reload cycles (i.e., time to ﬁnish one round
of Flush and Reload with zero Flush-Reload interval)
for one gadget. The experiments were run on A53 with CPU
frequency set as 1.5GHz.
Minimum gadgets for successful attacks. In a success-
ful Flush-Reload side-channel attack, the adversary exﬁl-
trates one bit information pertaining to a target system-level
event—happen or not happen—during a certain time period.
Such information is learned by determining if Reloads lead
to cache hits or cache misses. To reliably detect the oc-
currence of the events, the adversary might need to Flush-
Reload more than one gadgets from the same function (e.g.,
Fig. 3), or from diﬀerent functions that will be called sequen-
tially during the same event.
We evaluate the minimum number of gadgets that the
adversary needs in Flush-Reload attacks by testing the
strength of the signal of a Flush-Reload covert channel.
Specially, we chose 10 functions from the libc.so5, and con-
structed one gadget from each function, by using the last ret
instruction. Then two Android apps were developed: The
receiver repeatedly Flushed k gadgets one after another (k
ranges from 1 to 8), then after zero Flush-Reload inter-
val he Reloaded the gadgets in the same order; the sender
sent ‘0’ by running in an empty loop, and sent ‘1’ by calling
the corresponding functions repeatedly. We want to ﬁnd out
the minimum number of gadgets that allows the adversary
to diﬀerentiate the signal ‘0’ from ‘1’. The results for run-
ning the experiment 100 times (with mean and one standard
deviation) are shown in Fig. 4a. The white bars show the
Reload time when the sender sent ‘0’ and the solid bars
show the Reload time when the sender sent ‘1’. We can
see the signal is clear even when only one gadget is used,
and becomes more reliable when more gadgets are used.
Shortest Flush-Reload cycles. The granularity of the
side channel is characterized by the shortest Flush-Reload
cycles—the time to ﬁnish one round of Flush and Reload
with zero Flush-Reload interval. The shortest cycle indi-
cates the highest frequency with which the Flush-Reload
5
The 10 functions are: atoi, fflush, free, getgid, getuid, isdigit,
isspace, malloc, strnlen, strtof.
6
/sys/devices/system/cpu/cpu/cpufreq/scaling_cur_freq.
12345678Gadget Number050010001500Time (ns)signal 0signal 112345678Gadget Number010002000300040005000Time (ns)86464-bit vs. 32-bit devices and libraries. Our return-
oriented Flush-Reload attacks work diﬀerently on 64-bit
apps and 32-bit apps. On the 64-bit Samsung Galaxy S6,
both 64-bit and 32-bit apps can be executed. However, if the
attacker app is compiled as a 64-bit app, it cannot conduct a
return-oriented attacks on a shared 32-bit library. Similarly,
a 32-bit attacker app cannot exploit a shared 64-bit library,
either. Therefore, two versions of the malicious app were
developed to attack both types.
Background noise. Similar to prior work on cache side-
channel attacks, our return-oriented Flush-Reload side-
channel attacks are also subject to background noise. The
most notable noise comes from a third app that shares the
same library and calls the functions that are being Reloaded
by the attacker app. To address the problem, we Flush-
Reload multiple gadgets from diﬀerent rarely-used func-
tions at the same time, so that the likelihood of these func-
tions being called together by another app is very low. Hence,
most background noise of this kind can be eliminated.
Power consumption. When the attacker app runs in the
background, one entire CPU core (i.e., 12% of all CPU re-
sources) is taken, and 1.5% battery was consumed every 20
minutes. The power consumption is probably on par with
(or slightly lower than) that reported in Diao et al. [21]. Be-
cause Flush-Reload attacks do not need to evict an entire
cache set (as is the case in Prime-Probe or Evict-Reload
attacks), we suspect our techniques may consume less power
than ARMageddon [32].
Vulnerability analysis. The following steps can be taken
to analyze the vulnerabilities of an app in an oﬄine proce-
dure: First, all libraries linked in an app can be learned from
/proc//maps at runtime. We could extract the sym-
bols for all exported functions of the library of interest using
objdump. Then, using a Python script, we can generate a
gdb initialization ﬁle, which contains breakpoint information
of all (or a subset) of the functions in the objdump result.
Next, by employing gdb debugger on Android [8], we attach
to the victim app remotely and insert all the breakpoints
by loading the initialization ﬁle. After that, we manually
act on the app and see if any breakpoint is triggered. This
will provide a coarse-grained call graphs for identifying the
most critical execution path of the program. Of course, this
approach is manual-intensive and error-prone. We leave a
fully automated analysis for future work.
5. CASE STUDIES ON ANDROID
In this section, we demonstrate a few real-world examples
to illustrate how the return-oriented Flush-Reload side-
channel attacks can be applied in practice. Specially, we
show two categories of attacks: detecting hardware events
and tracing software execution paths. The attacks were
all demonstrated on Samsung Galaxy S6 (SM-G920F), with
Android version 5.1.1 and Linux kernel version 3.10.
5.1 Detecting Hardware Events
Our return-oriented Flush-Reload attacks can be ex-
ploited to detect hardware events, such as occurrences of
hardware interrupts and software’s interactions with hard-
ware devices (e.g., GPS, microphones, cameras, etc.). To
demonstrate such capabilities in concrete contexts, we con-
duct two case studies: In the ﬁrst case study, we exploit the
established side channel to accurately detect hardware inter-
rupts due to touchscreen events; in the second case study,
we show how an attacker can learn from the side channel
when the camera is used by the Uber app7 to scan credit
cards (using card.io libraries).
5.1.1 Touchscreen Interrupts
The Flush-Reload side channel does not detect inter-
rupt directly;
it only detects these events by monitoring
system libraries that are triggered to dispatch these events
to user-space applications. Specially, in Linux’s multi-touch
protocol, the user’s interaction with the touchscreen gener-
ates a sequence of multi-touch transfers—each transfer may
include multiple event packets if the user has multiple con-
current contacts with the device. By the end of each multi-
touch transfer, a SYN_REPORT event is delivered to userspace
software [40]. In fact, each of these multi-touch transfer cor-
relates with one touch event [7].
It has been shown in a
recent study by Diao et al. [21] that side channels can be es-
tablished through procfs (i.e., /proc/interrupts) to infer
unlock pattern. Here in our paper, we show that our return-
oriented Flush-Reload side-channel attacks can be used to
replace this procfs side channel—should future Android OS
restricts unauthorized usage of procfs, the security threats
still exist.
The attack. To detect these SYN_REPORT events, the ma-
licious app Flush-Reloads three gadgets in three diﬀerent
functions (i.e., TouchInputMapper::sync, CursorMotionAc-
cumulator::clearRelativeAxes, and MultiTouchMotionAc-
cumulator::finishSync in libinputflinger.so) that will
be called together when the driver calls the input_sync()
function to deliver SYN_REPORT events. We assign a fast
Reload a value ‘1’; a slow one a value ‘0’. To reduce
noise in measurements, we group every 20 consecutive data
points: If there are more than 10 ‘1’s within these 20 points,
we consider it the beginning of a SYN_REPORT event. Sim-