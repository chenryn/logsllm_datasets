# 十、利用 IPv6
在本章中，我们将介绍以下食谱:
*   IPv6 命令行基础
*   在 Docker 中启用 IPv6 功能
*   使用支持 IPv6 的容器
*   配置 NDP 代理
*   用户定义的网络和 IPv6
# 简介
到目前为止，我们只关注 IPv4 网络。然而，IPv4 并不是我们唯一可用的 IP 协议。尽管 IPv4 仍然是最广为人知的协议，但 IPv6 已经开始获得巨大的吸引力。公共 IPv4 空间已经耗尽，许多人也开始预见到私有 IPv4 分配不足的问题。IPv6 希望通过定义一组更大的可用 IP 空间来克服这个问题。然而，IPv6 做了一些不同于 IPv4 的事情，让一些人认为实现 IPv6 会很麻烦。我认为，当您考虑部署容器技术时，您也应该考虑如何有效地利用 IPv6。尽管 IPv6 是一种不同的动物，但它很快将成为许多网络的要求。容器代表了在您的网络上引入更多 IP 端点的可能性，所以尽早过渡是个好主意。在本章中，我们将了解 Docker 目前支持哪些 IPv6 功能。
# IPv6 命令行基础
即使你了解了 IPv6 协议的基础知识，第一次在 Linux 主机上使用 IPv6 可能会有点让人望而生畏。与 IPv4 非常相似，IPv6 有自己独特的一套命令行工具，可用于配置和排除 IPv6 连接故障。其中一些工具与我们在 IPv4 中使用的相同，只是使用了略有不同的语法。其他工具完全是 IPv6 独有的。在本食谱中，我们将逐步完成基本 IPv6 连接的配置和验证。
## 做好准备
在本食谱中，我们将使用一个由两台 Linux 主机组成的小型实验室:
![Getting ready](img/5453_10_01.jpg)
每个主机都有一个 IPv4 地址和一个分配给其物理接口的 IPv6 地址。您需要对每台主机进行根级访问，以更改网络配置。
### 注
本食谱的目的不是教授 IPv6 或 IPv6 网络设计的基础知识。本配方中的示例仅用于示例目的。虽然我们可能会在示例中介绍一些基础知识，但我们假设读者对 IPv6 协议的工作原理有一个基本的了解。
## 怎么做…
如上图所示，每个 Linux 主机都被分配了一个 IPv4 和一个 IPv6 IP 地址。这些都是作为主机网络配置脚本的一部分配置的。以下是两台实验主机的配置示例:
*   `net1.lab.lab`
    ```
    auto eth0
    iface eth0 inet static
            address 172.16.10.2
            netmask 255.255.255.0
            gateway 172.16.10.1
            dns-nameservers 10.20.30.13
            dns-search lab.lab
    iface eth0 inet6 static
     address 2003:ab11::1
     netmask 64
    ```
*   `net2.lab.lab`
    ```
    auto eth0
    iface eth0 inet static
            address 172.16.10.3
            netmask 255.255.255.0
            gateway 172.16.10.1
            dns-nameservers 10.20.30.13
            dns-search lab.lab
    iface eth0 inet6 static
     address 2003:ab11::2
     netmask 64
    ```
请注意，在每种情况下，我们都会将 IPv6 地址添加到现有的物理网络接口。在这种类型的配置中，IPv4 和 IPv6 地址共存于同一个网卡上。这通常被称为运行**双栈**，因为两个协议共享相同的物理适配器。配置完成后，您需要重新加载接口以使配置生效。然后，您应该能够通过使用`ifconfig`工具或`ip` ( `iproute2`)工具集来确认每台主机的配置是否正确:
```
user@net1:~$ ifconfig eth0
eth0      Link encap:Ethernet  HWaddr 00:0c:29:2d:dd:79
inet addr:172.16.10.2  Bcast:172.16.10.255  Mask:255.255.255.0
 inet6 addr: fe80::20c:29ff:fe2d:dd79/64 Scope:Link
 inet6 addr: 2003:ab11::1/64 Scope:Global
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:308 errors:0 dropped:0 overruns:0 frame:0
          TX packets:348 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:32151 (32.1 KB)  TX bytes:36732 (36.7 KB)
user@net1:~$
user@net2:~$ ip -6 addr show dev eth0
2: eth0:  mtu 1500 qlen 1000
 inet6 2003:ab11::2/64 scope global
       valid_lft forever preferred_lft forever
 inet6 fe80::20c:29ff:fe59:caca/64 scope link
       valid_lft forever preferred_lft forever
user@net2:~$
```
使用较旧的`ifconfig`工具的好处是可以同时看到 IPv4 和 IPv6 接口信息。使用`ip`工具时，您需要通过传递`-6`标志来指定您希望查看 IPv6 信息。稍后当我们使用`ip`工具配置 IPv6 接口时，我们会看到这是同样的情况。
无论是哪种情况，两台主机现在似乎都在其`eth0`接口上配置了 IPv6。但是，请注意，我们实际上定义了两个 IPv6 地址。您会注意到，一个地址的范围是本地的，另一个地址的范围是全局的。在 IPv6 中，每个 IP 接口都被分配了一个全局和一个本地 IPv6 地址。本地范围的接口只对分配给它的链路上的通信有效，通常用于到达同一网段上的相邻设备。在大多数情况下，链路本地地址由主机本身动态确定。这意味着，即使您没有在接口上专门配置全局 IPv6 地址，启用 IPv6 的接口几乎总是定义了链路本地 IPv6 地址。使用链路本地 IP 地址的数据包不会被路由器转发，路由器会将其限制在定义的网段内。在我们的大部分讨论中，我们将关注全球演讲。
### 注
除非另有说明，否则对 IPv6 地址的任何进一步引用都是指全局范围的 IPv6 地址。
由于我们的两台主机位于同一子网，因此我们应该能够使用 IPv6 从另一台服务器到达另一台服务器:
```
user@net1:~$ ping6 2003:ab11::2 -c 2
PING 2003:ab11::2(2003:ab11::2) 56 data bytes
64 bytes from 2003:ab11::2: icmp_seq=1 ttl=64 time=0.422 ms
64 bytes from 2003:ab11::2: icmp_seq=2 ttl=64 time=0.401 ms
--- 2003:ab11::2 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 999ms
rtt min/avg/max/mdev = 0.401/0.411/0.422/0.022 ms
user@net1:~$
```
请注意，我们不是使用标准 ping 工具，而是使用`ping6`工具来验证 IPv6 可达性。
我们最不想检查的是邻居发现表。IPv6 的另一个主要变化是，它不使用 ARP 来查找 IP 端点的硬件或媒体访问控制地址。主要原因是 IPv6 不支持广播流量。ARP 依赖广播工作，所以不能在 IPv6 中使用。相反，IPv6 使用利用多播的邻居发现。
也就是说，在排除本地网络故障时，您需要查看邻居发现表，而不是 ARP 表。为此，我们可以使用熟悉的`iproute2`工具集:
```
user@net1:~$ ip -6 neighbor show
fe80::20c:29ff:fe59:caca dev eth0 lladdr 00:0c:29:59:ca:ca DELAY
2003:ab11::2 dev eth0 lladdr 00:0c:29:59:ca:ca REACHABLE
user@net1:~$
```
与 ARP 表非常相似，邻居表向我们显示了我们希望到达的 IPv6 地址的硬件或 MAC 地址。请注意，像以前一样，我们将`-6`标志传递给`ip`命令，告诉它我们想要 IPv6 信息。
现在已经有了基本的连接，让我们给每台主机增加一个新的 IPv6 接口。为此，我们遵循几乎与添加 IPv4 接口时相同的步骤。例如，添加虚拟接口几乎是一样的:
```
user@net1:~$ sudo ip link add ipv6_dummy type dummy
user@net1:~$ sudo ip -6 address add 2003:cd11::1/64 dev ipv6_dummy
user@net1:~$ sudo ip link set ipv6_dummy up
```
请注意，唯一的区别是我们需要告诉`iproute2`我们通过再次传递`-6`标志来指定 IPv6 地址。在所有其他方面，配置与我们在 IPv4 中的配置相同。让我们也在第二台主机上配置另一个虚拟接口:
```
user@net2:~$ sudo ip link add ipv6_dummy type dummy
user@net2:~$ sudo ip -6 address add 2003:ef11::1/64 dev ipv6_dummy
user@net2:~$ sudo ip link set ipv6_dummy up
```
此时，我们的拓扑结构如下所示:
![How to do it…](img/5453_10_02.jpg)
现在让我们检查每台主机上的 IPv6 路由表。和以前一样，我们也可以使用`iproute2`工具检查 IPv6 路由表:
```
user@net1:~$ ip -6 route
2003:ab11::/64 dev eth0  proto kernel  metric 256  pref medium
2003:cd11::/64 dev ipv6_dummy  proto kernel  metric 256  pref medium
fe80::/64 dev eth0  proto kernel  metric 256  pref medium
fe80::/64 dev ipv6_dummy  proto kernel  metric 256  pref medium
user@net1:~$
user@net2:~$ ip -6 route
2003:ab11::/64 dev eth0  proto kernel  metric 256  pref medium
2003:ef11::/64 dev ipv6_dummy  proto kernel  metric 256  pref medium
fe80::/64 dev eth0  proto kernel  metric 256  pref medium
fe80::/64 dev ipv6_dummy  proto kernel  metric 256  pref medium
user@net2:~$
```
我们可以看到，每台主机都知道其直连接口，但不知道其他主机的虚拟接口。为了让任何一台主机到达其他主机的虚拟接口，我们需要通过路由到达它。由于这些主机是直接连接的，这可以通过添加默认的 IPv6 路由来解决。每条默认路由都将另一台主机作为下一跳。虽然这是可行的，但是让我们为引用虚拟接口所在网络的每台主机添加特定路由:
```
user@net1:~$ sudo ip -6 route add 2003:ef11::/64 via 2003:ab11::2
user@net2:~$ sudo ip -6 route add 2003:cd11::/64 via 2003:ab11::1
```
添加这些路由后，任一台主机都应该能够到达其他主机的`ipv6_dummy`界面:
```
user@net1:~$ ping6 2003:ef11::1 -c 2
PING 2003:ef11::1(2003:ef11::1) 56 data bytes
64 bytes from 2003:ef11::1: icmp_seq=1 ttl=64 time=0.811 ms
64 bytes from 2003:ef11::1: icmp_seq=2 ttl=64 time=0.408 ms
--- 2003:ef11::1 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 999ms
rtt min/avg/max/mdev = 0.408/0.609/0.811/0.203 ms
user@net1:~$
```