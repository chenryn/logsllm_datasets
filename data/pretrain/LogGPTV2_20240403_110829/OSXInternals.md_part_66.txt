 BSD initialization during system startup calls kmstartup() [bsd/kern/subr_prof.c] to
initialize profiling data structures that reside in a global gmonparam structure
[bsd/sys/gmon.h] called _gmonparam. Moreover, kmstartup() allocates kernel memory for
holding profile data.
 When running on the master processor, the kernel invokes bsd_hardclock()
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 85 of 137
[bsd/kern/kern_clock.c] every time hertz_tick() [osfmk/kern/mach_clock.c] is called
from the real-time clock interrupt handler. When kernel profiling is enabled, bsd_hardclock()
updates the information in _gmonparam.
 When kernel profiling is enabled, the code for servicing the KERN_PROF sysctl is included in
kern_sysctl() [bsd/kern/kern_sysctl.c]the dispatcher for kernel-related sysctl calls.
The kgmon command-line program is used to enable or disable profiling, reset in-kernel profile
buffers, and dump the contents of the profile buffers to a gmon.out file. kgmon communicates with
the kernel primarily using management information base (MIB) names of the format CTL_KERN
KERN_PROF , where  can be one of the following:
 GPROF_STATE enable or disable profiling
 GPROF_COUNT retrieve buffer containing profile tick counts
 GPROF_FROMS retrieve buffer containing "from" hash buckets
 GPROF_TOS retrieve buffer containing "to" (destination) structures
 GPROF_GMONPARAM retrieve the state of kernel profiling
Once profiling data is dumped to the gmon.out file, the standard gprof command-line program can
be used to display the execution profile. Figure 633 shows an example of using kgmon and gprof.
Figure 633. Using kgmon and gprof for kernel profiling
$ uname -v # This kernel was compiled with profiling support
Darwin Kernel Version.../BUILD/obj/PROFILE_PPC
$ kgmon # Profiling should be disabled to begin with
kgmon: kernel profiling is off.
$ sudo kgmon -b # Resume the collection of profile data
kgmon: kernel profiling is running.
... # Wait for the data of interest
$ sudo kgmon -h # Stop the collection of profile data
kgmon: kernel profiling is off.
$ ls # No output files yet
$ kgmon -p # Dump the contents of the profile buffers
kgmon: kernel profiling is off.
$ ls # We should have a gmon.out file now
gmon.out
$ gprof /mach_kernel.profile gmon.out
...
granularity: each sample hit covers 4 byte(s) for 0.03% of 34.23 seconds
called/total parents
index %time self descendents called+self name index
called/total children
[1] 98.8 33.81 0.00 _machine_idle_ret [1]
-----------------------------------------------
[2] 0.6 0.22 0.00 _ml_set_interrupts_enabled [2]
...
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 86 of 137
0.00 0.00 6/117 _thread_setstatus [818]
0.00 0.00 6/6 _thread_userstack [1392]
0.00 0.00 6/6 _thread_entrypoint [1388]
0.00 0.00 3/203 _current_map [725]
0.00 0.00 3/3 _swap_task_map [1516]
0.00 0.00 3/3037 _pmap_switch [436]
...
Index by function name
[1149] _BTFlushPath [257] _fdesc_readdir [1029] _psignal_lock
...
[782] __ZN18IOMemoryDescr [697] _ipc_kobject_destro[1516] _swap_task_map
...
[27] _devfs_make_link [436] _pmap_switch [1213] _wait_queue_member
...
$
6.8.4.1. Per-Process Profiling (profil(2))
The xnu kernel implements the profil() system call that allows a user process to gather its own
CPU-usage statistics by profiling the program counter.
int
profil(char *samples, size_t size, u_long offset, u_int scale)
samples is a buffer whose length is size bytes. It is divided into sequential bins of 16 bits each.
offset specifies the lowest program counter (PC) value at which the kernel will sample the PC upon
every clock tickit is the starting address of the program region to be sampled. For each sampled PC,
the kernel increments the value in the bin whose number is computed based on the scale argument.
To compute the bin number, that is, the index in the samples array, the kernel subtracts offset from
the sampled PC and multiplies the result by scale. If the resultant index is within the bounds of the
samples array, the corresponding bin's value is incremented; otherwise, profiling is turned off.
scale is passed as an unsigned integer but represents 16 bits' worth of fraction, with the value 1 being
in the middle. Therefore, a scale value of 0x10000 results in a one-to-one mapping from PC value to
bins, whereas a higher value results in a many-to-one mapping. A scale value of 0 or 1 turns off
profiling.
// bsd/kern/subr_prof.c
#define PC_TO_INDEX(pc, prof) \
((int)(((u_quad_t)((pc) - (prof)->pr_off) * \
(u_quad_t)((prof)->pr_scale)) >> 16) & ~1)
Enabling profiling sets the P_PROF bit in the p_flag field of the BSD process structure. Moreover, the
pr_scale field of the profiling substructure within the process structure is set to the scale value.
Thereafter, as shown in Figure 634, every time there is a BSD-level clock tick (100 times a second),
bsd_hardclock() checks whether the process is running in user mode and has a nonzero scale value.
If so, it sets a flag (P_OWEUPC) in the process, indicating that a call to addupc_task()
[bsd/kern/subr_prof.c] is owed to the task the next time there is an AST. It then calls astbsd_on
() to generate an AST_BSD, which is serviced by bsd_ast(), which in turn calls addupc_task(). The
latter updates the profiling buffer, turning off profiling in the case of an error.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 87 of 137
Figure 634. Implementation of the profil() system call
// bsd/kern/kern_clock.c
void
bsd_hardclock(boolean_t usermode, caddr_t pc, int numticks)
{
register struct proc *p;
...
p = (struct proc *)current_proc();
...
if (usermode) {
if (p->p_stats && p->p_stats->p_prof.pr_scale) {
// Owe process an addupc_task() call at next AST
p->p_flag |= P_OWEUPC;
astbsd_on();
}
...
}
...
}
// bsd/kern/kern_sig.c
// called when there is an AST_BSD
void
bsd_ast(thread_t thr_act)
{
...
if ((p->p_flag & P_OWEUPC) && (p->p_flag & P_PROFIL) {
pc = get_useraddr();
addupc_task(p, pc, 1);
p->p_flag &= ~P_OWEUPC;
}
...
}
// bsd/kern/subr_prof.c
void
addupc_task(register struct proc *p, user_addr_t pc, u_int ticks)
{
...
// 64-bit or 32-bit profiling statistics collection
if (/* 64-bit process */) {
// calculate offset in profile buffer using PC_TO_INDEX()
// if target location lies within the buffer, copyin() existing
// count value from that location into the kernel
// increment the count by ticks
// copyout() the updated information to user buffer
// if there is any error, turn off profiling
} else {
// do 32-bit counterpart
}
}
Another system calladd_profil()can be used to profile multiple, noncontiguous areas of program
memory. Multiple calls to add_profil() can follow a single call to profil(). Note that calling
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 88 of 137
profil() removes any buffers that were allocated by one or more previous calls to add_profil().
6.8.4.2. Mach Task and Thread Sampling
Mach 3 provides calls for sampling tasks and threads. The mach_sample_thread() call periodically
samples the program counter of the specified thread, saves the sampled values in buffers, and sends
the buffers to the specified reply port when the buffers become full. The mach_sample_task() call
performs a similar function, but for all threads of a given task. The sampled values are not tagged by
thread, which means that samples for various threads will typically be intermingled.
The Mac OS X kernel includes code for Mach-based task and thread sampling. The code is
conditionally compiledif MACH_PROF is defined during kernel compilation. However, note that the
code is not functional.
kern_return_t
task_sample(task_t sample_task, mach_port_make_send_t reply_port);
kern_return_t
thread_sample(thread_act_t sample_thread, mach_port_make_send_t reply_port);
kern_return_t
receive_samples(mach_port_t sample_port, sample_array_t samples,
mach_msg_type_number_t sample_count);
The receive_samples() call is used to receive a message containing sampled values. It is invoked
by prof_server()a MIG-generated library function that simplifies the work involved in processing
the incoming IPC message.[15] We will discuss this style of IPC in Chapter 9 when we look at Mach
exception handling.
[15] The prof_server() function does not exist in the default Mac OS X system library.
The osfmk/mach/prof.defs file contains the MIG definitions for this profiling interface.
6.8.5. Per-Process Kernel Tracing (kTRace(2) and kdump)
The ktrace() system call can be used on Mac OS X to enable or disable tracing of selected
operations in one or more processes.
int
ktrace(const char *tracefile, // pathname of file in which to save trace records
int ops, // ktrace operation
int trpoints, // trace points of interest (what to trace)
int pid); // primary process of interest
// a negative pid specifies a process group
The ops argument to ktrace() can be one of the following:
 KtrOP_SET enable trace points specified in the trpoints argument
 KtrOP_CLEAR disable trace points specified in trpoints
 KtrOP_CLEARFILE stop all tracing
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 89 of 137
 KTRFLAG_DESCEND also apply tracing change to all children of the process specified by the pid
argument
The ktrace command uses the ktrace() system call, allowing trace data to be logged to a specified
file (ktrace.out by default). The kdump command displays the data in human-readable format. Only
the superuser may trace setuid and setgid processes, or another user's processes.
Categories of operations to tracetrace pointsare specified by logically OR'ing respective bits and
passing the resultant value as the TRpoints argument. Each selection causes the corresponding types
of events to be generated at one or more locations in the kernel. The following bit values can be used
to specify operation types when calling ktrace().
 KTRFAC_SYSCALL TRaces BSD system calls. When this bit is set, ktrsyscall() is called by
unix_syscall() before the system call handler is invoked. kTRsyscall() writes a "system
call" trace record (struct ktr_syscall).
 Ktr_SYSRET traces return from BSD system calls. When this bit is set, kTRsysret() is called
by unix_syscall() after the system call handler has returned and return values have been
processed. ktrsysret() writes a "return from system call" trace record (struct ktr_sysret).
 KtrFAC_NAMEI traces name lookup operations. When this bit is set, kTRnamei() is called by
namei() [bsd/vfs/vfs_lookup], sem_open() [bsd/kern/posix_sem.c], and shm_open()
[bsd/kern/posix_shm.c]. kTRnamei() writes a stringthe relevant pathnameas the trace data.
 KtrFAC_GENIO traces a variety of I/O operations. When this bit is set, ktrgenio() is called by
recvit() and sendit() [both in bsd/kern/uipc_syscalls.c], and dofileread(),
dofilewrite(), rd_uio(), and wr_uio() [all in bsd/kern/sys_generic.c]. ktrgenio()
writes a "generic process I/O" trace record (struct ktr_genio).
 KtrFAC_PSIG traces posted signals. When this bit is set, kTRpsig() is called by postsig()
[bsd/kern/kern_sig.c]. ktrpsig() writes a "processed signal" trace record (struct
ktr_psig).
 KtrFAC_CSW TRaces context switches. When this bit is set, ktrcsw() is called by
_sleep_continue() and _sleep() [both in bsd/kern/kern_synch.c]. ktrcsw() writes a
"context switch" trace record (struct ktr_csw).
All ktrace event-logging functions are implemented in bsd/kern/kern_ktrace.c.
The p_traceflag field of the process structure holds the operation-related bits. This field also
contains other relevant flags, such as the following.
 KTRFAC_ACTIVE specifies that ktrace logging is in progress.
 KtrFAC_ROOT specifies that the tracing status for that process was previously established by the
superuser, and only the superuser can now change it further.
 KTRFAC_INHERIT specifies that the child process arising out of a fork() system call will inherit
the parent's p_traceflag field.
Note that a record resulting from some type of tracing event consists of a generic header (struct
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 90 of 137
ktr_header) followed by an event-specific structure.
// bsd/sys/ktrace.h
struct ktr_header {
int ktr_len; // length of buffer that follows this header
short ktr_type; // trace record type
pid_t ktr_pid; // process ID generating the record
char ktr_comm[MAXCOMLEN+1]; // command name generating the record
struct timeval ktr_time; // record generation timestamp (microsecond)
caddr_t ktr_buf; // buffer
}
Event-specific structures can vary in length even for a given event type. For example, the
ktr_syscall structure contains a system call number, the number of arguments passed to that system
call, and an array of 64-bit unsigned integers containing the arguments.
struct ktr_syscall {
short ktr_code; // system call number
short ktr_narg; // number of arguments
u_int64_t ktr_args[1]; // a 64-bit "GPR" for each argument
};
6.8.6. Auditing Support
We briefly looked at the user-space aspects of the auditing system in Chapter 2. The Mac OS X
kernel supports auditing of system events using the Basic Security Module (BSM) format for audit
records. Figure 635 shows the key interactions between the user and kernel components of the
auditing system.
Figure 635. The Mac OS X auditing system
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 91 of 137
During the initialization of the kernel's BSD portion, audit_init() [bsd/kern/kern_audit.c] is
called to initialize the auditing system. Besides allocating the relevant data structures and initializing
various parameters, audit_init() also calls kau_init() [bsd/kern/kern_bsm_audit.c] to
initialize the BSM audit subsystem. In particular, kau_init() sets up the initial event-to-class
mappings for BSD system calls, Mach system calls, and several types of open events.
Initially, BSD and Mach system call events map to the null audit class (AU_NULL). Note that at this
point, auditing is initialized but not started in the kernel. When the user-space audit daemon (auditd)
starts up, it establishes a log file to which the kernel will write audit recordsauditing in the kernel
begins as a side effect of this operation. Let us first look at auditd's operation while referring to
Figure 635.
auditd is a simple daemon whose responsibilities are limited to managing audit log files and
enabling or disabling auditing. It is not involved in the actual writing of the audit records to disk.[16]
The following are auditd's primary initialization steps.
[16] In this sense, the audit daemon can be likened to the dynamic_pager program, which
manages swap files. We will see the operation of dynamic_pager in Chapter 8.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 92 of 137
 It installs a signal handler for the SIGTERM and SIGCHLD signals. The handler sends a Mach IPC
message to auditd's main server loop. The reason these signals are not handled in the signal
handler itself is that auditd may not be at a clean point while it is in the signal handler.
It allocates a Mach port for the aforementioned signal "reflection," and anotherthe audit control
portfor communication with user programs (such as the audit utility) and the kernel.
It registers the control port with the kernel as a special host-level port by calling
host_set_audit_control_port(). Thereafter, clients of auditd can communicate with it by
retrieving the control port via host_get_audit_control_port(). Note that it places both
ports in a single port set,[17] allowing it to later wait for incoming messages on either port by
using the port set alone.
[17] We will discuss the port set concept in Chapter 9.
It reads the audit control file (/etc/security/audit_control), which contains system-wide
audit parameters. Once it has determined the pathname of the directory for storing audit log
files (/var/audit/ by default), auditd generates the pathname for the audit log file itself and
invokes the auditctl() system call to convey the pathname to the kernel. auditctl()'s kernel
implementation creates a kernel thread running audit_worker() [bsd/kern/kern_audit.c]
unless the thread already exists,[18] in which case it is woken up.
[18] If you enable, disable, and reenable auditing on a system, the audit_worker
kernel thread will exist during the reenabling and, therefore, will be woken up.
Depending on the flags passed to the open() system call, it is treated as different types of open
events. For example, if there are multiple invocations of the open() system call with the flags
argument being O_RDONLY, O_WRONLY, and O_RDWR, the corresponding open events are
AUE_OPEN_R, AUE_OPEN_W, and AUE_OPEN_RW, respectively.
It generates an "audit startup" audit record indicating its own startup. Note that this event is
"artificial" in that it is programmatically generated by auditd. It uses functions in the BSM