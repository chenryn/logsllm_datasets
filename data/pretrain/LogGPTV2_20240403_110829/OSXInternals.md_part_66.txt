### BSD Initialization and Profiling

During system startup, the BSD initialization process invokes `kmstartup()` (defined in `bsd/kern/subr_prof.c`) to initialize the profiling data structures. These structures are stored in a global structure called `_gmonparam` (defined in `bsd/sys/gmon.h`). Additionally, `kmstartup()` allocates kernel memory for holding profile data.

When running on the master processor, the kernel calls `bsd_hardclock()` (located in `bsd/kern/kern_clock.c`) every time `hertz_tick()` (found in `osfmk/kern/mach_clock.c`) is invoked from the real-time clock interrupt handler. If kernel profiling is enabled, `bsd_hardclock()` updates the information in `_gmonparam`.

### Kernel Profiling Management

When kernel profiling is enabled, the code for handling the `KERN_PROF` sysctl is included in `kern_sysctl()` (defined in `bsd/kern/kern_sysctl.c`), which is the dispatcher for kernel-related sysctl calls. The `kgmon` command-line tool can be used to enable or disable profiling, reset in-kernel profile buffers, and dump the contents of the profile buffers to a `gmon.out` file. `kgmon` communicates with the kernel using management information base (MIB) names, such as `CTL_KERN KERN_PROF`, where the following options are available:

- `GPROF_STATE`: Enable or disable profiling.
- `GPROF_COUNT`: Retrieve buffer containing profile tick counts.
- `GPROF_FROMS`: Retrieve buffer containing "from" hash buckets.
- `GPROF_TOS`: Retrieve buffer containing "to" (destination) structures.
- `GPROF_GMONPARAM`: Retrieve the state of kernel profiling.

Once the profiling data is dumped to the `gmon.out` file, the `gprof` command-line program can be used to display the execution profile.

#### Example of Using `kgmon` and `gprof`

```sh
$ uname -v  # Check if the kernel was compiled with profiling support
Darwin Kernel Version.../BUILD/obj/PROFILE_PPC

$ kgmon  # Ensure profiling is disabled initially
kgmon: kernel profiling is off.

$ sudo kgmon -b  # Start collecting profile data
kgmon: kernel profiling is running.

# Wait for the data of interest

$ sudo kgmon -h  # Stop collecting profile data
kgmon: kernel profiling is off.

$ ls  # No output files yet

$ kgmon -p  # Dump the contents of the profile buffers
kgmon: kernel profiling is off.

$ ls  # A gmon.out file should now exist
gmon.out

$ gprof /mach_kernel.profile gmon.out
...
granularity: each sample hit covers 4 byte(s) for 0.03% of 34.23 seconds
called/total parents
index %time self descendents called+self name index
called/total children
[1] 98.8 33.81 0.00 _machine_idle_ret [1]
-----------------------------------------------
[2] 0.6 0.22 0.00 _ml_set_interrupts_enabled [2]
...
```

### Per-Process Profiling (`profil(2)`)

The xnu kernel implements the `profil()` system call, allowing a user process to gather its own CPU-usage statistics by profiling the program counter.

```c
int
profil(char *samples, size_t size, u_long offset, u_int scale);
```

- `samples`: A buffer whose length is `size` bytes, divided into sequential bins of 16 bits each.
- `offset`: The lowest program counter (PC) value at which the kernel will sample the PC upon every clock tick.
- `scale`: An unsigned integer that represents 16 bits' worth of fraction. A scale value of 0x10000 results in a one-to-one mapping from PC value to bins, while a higher value results in a many-to-one mapping. A scale value of 0 or 1 turns off profiling.

Enabling profiling sets the `P_PROF` bit in the `p_flag` field of the BSD process structure and sets the `pr_scale` field of the profiling substructure within the process structure to the scale value. During each BSD-level clock tick (100 times a second), `bsd_hardclock()` checks if the process is running in user mode and has a nonzero scale value. If so, it sets a flag (`P_OWEUPC`) in the process, indicating that a call to `addupc_task()` is owed to the task the next time there is an AST. It then calls `astbsd_on()` to generate an AST_BSD, which is serviced by `bsd_ast()`, which in turn calls `addupc_task()` to update the profiling buffer, turning off profiling in case of an error.

### Mach Task and Thread Sampling

Mach 3 provides calls for sampling tasks and threads. The `mach_sample_thread()` call periodically samples the program counter of the specified thread, saves the sampled values in buffers, and sends the buffers to the specified reply port when the buffers become full. The `mach_sample_task()` call performs a similar function but for all threads of a given task. The sampled values are not tagged by thread, meaning samples for various threads are typically intermingled.

The Mac OS X kernel includes code for Mach-based task and thread sampling, conditionally compiled if `MACH_PROF` is defined during kernel compilation. However, this code is not functional.

### Per-Process Kernel Tracing (`ktrace(2)` and `kdump`)

The `ktrace()` system call can be used on Mac OS X to enable or disable tracing of selected operations in one or more processes.

```c
int
ktrace(const char *tracefile, int ops, int trpoints, int pid);
```

- `tracefile`: Pathname of the file in which to save trace records.
- `ops`: One of the following:
  - `KtrOP_SET`: Enable trace points specified in `trpoints`.
  - `KtrOP_CLEAR`: Disable trace points specified in `trpoints`.
  - `KtrOP_CLEARFILE`: Stop all tracing.
- `trpoints`: Trace points of interest (what to trace).
- `pid`: Primary process of interest (a negative `pid` specifies a process group).

The `ktrace` command uses the `ktrace()` system call, allowing trace data to be logged to a specified file (default: `ktrace.out`). The `kdump` command displays the data in human-readable format. Only the superuser may trace setuid and setgid processes, or another user's processes.

### Auditing Support

The Mac OS X kernel supports auditing of system events using the Basic Security Module (BSM) format for audit records. During the initialization of the kernel's BSD portion, `audit_init()` (defined in `bsd/kern/kern_audit.c`) initializes the auditing system, allocating relevant data structures and initializing various parameters. It also calls `kau_init()` (defined in `bsd/kern/kern_bsm_audit.c`) to initialize the BSM audit subsystem, setting up the initial event-to-class mappings for BSD and Mach system calls and several types of open events.

Initially, BSD and Mach system call events map to the null audit class (`AU_NULL`). Auditing is initialized but not started in the kernel. When the user-space audit daemon (`auditd`) starts up, it establishes a log file to which the kernel will write audit records, starting auditing in the kernel as a side effect of this operation.

#### Audit Daemon (`auditd`)

`auditd` is a simple daemon responsible for managing audit log files and enabling or disabling auditing. Its primary initialization steps include:

- Installing a signal handler for `SIGTERM` and `SIGCHLD` signals.
- Allocating Mach ports for signal "reflection" and communication with user programs and the kernel.
- Registering the control port with the kernel as a special host-level port.
- Reading the audit control file (`/etc/security/audit_control`), determining the directory for storing audit log files, and invoking `auditctl()` to convey the pathname to the kernel.
- Generating an "audit startup" audit record indicating its own startup.