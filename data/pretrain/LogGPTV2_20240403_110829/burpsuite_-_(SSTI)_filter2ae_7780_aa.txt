# 梨子带你刷burpsuite靶场系列之高级漏洞篇 - 服务器端模板注入(SSTI)专题
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 本系列介绍
>
> PortSwigger是信息安全从业者必备工具burpsuite的发行商，作为网络空间安全的领导者，他们为信息安全初学者提供了一个在线的网络安全学院(也称练兵场)，在讲解相关漏洞的同时还配套了相关的在线靶场供初学者练习，本系列旨在以梨子这个初学者视角出发对学习该学院内容及靶场练习进行全程记录并为其他初学者提供学习参考，希望能对初学者们有所帮助。
## 梨子有话说
>
> 梨子也算是Web安全初学者，所以本系列文章中难免出现各种各样的低级错误，还请各位见谅，梨子创作本系列文章的初衷是觉得现在大部分的材料对漏洞原理的讲解都是模棱两可的，很多初学者看了很久依然是一知半解的，故希望本系列能够帮助初学者快速地掌握漏洞原理。
## 高级漏洞篇介绍
> 相对于服务器端漏洞篇和客户端漏洞篇，高级漏洞篇需要更深入的知识以及更复杂的利用手段，该篇也是梨子的全程学习记录，力求把漏洞原理及利用等讲的通俗易懂。
## 高级漏洞篇 – 服务器端模板注入(SSTI)专题
###  什么是服务器端模板注入(SSTI)？
SSTI就是攻击者利用原生模板语法将恶意payload注入到可以在服务器端执行的模板中的过程。模板引擎就是将固定的模板与可变化的数据结合构建网页，当模板引擎将用户输入直接与固定模板拼接时可能存在SSTI漏洞。注入的恶意payload甚至可以控制服务器，所以服务端的漏洞危害比客户端的漏洞大很多。
###  SSTI漏洞是如何产生的？
就像Sql注入一样，并没有将语句和数据区分开，导致他们被当成一个整体了，SSTI也是，并没有将模板与数据区分开，就可能导致我注入的数据也可能会变成模板的一部分甚至其他的代码部分被执行。举个例子，我们要批量发送邮件，只需要替换收件人，使用twig模板引擎的语句像这样  
`$output = $twig->render("Dear {first_name},", array("first_name" =>
$user.first_name) );`  
我们看到这里并不会导致SSTI漏洞，因为它将模板和数据区分开了，不会被当成一个整体解析。但是如果像这样  
`$output = $twig->render("Dear " . $_GET['name']);`  
直接将输入拼接成一整个字符串去解析，这就很容易导致SSTI漏洞。有的时候这样使用模板是为了方便特权用户，但是一旦这种方式被攻击者知道就可能会发起精心设计的攻击。
###  如何构造SSTI攻击？
**探测**
burp介绍，最简单的方法就是fuzz测试，通过像这样的使用模糊模板语句  
`${{ Hello Apce`  
因为会渲染成HTML，所以这还可以导致XSS漏洞。但是模板引擎会自动执行数学运算，的，所以如果我们输入一个运算，例如  
`http://vulnerable-website.com/?username=${7*7}`  
如果模板引擎最后返回Hello 49则说明存在SSTI漏洞。而且不同的模板引擎的数学运算的语法有些不同，还需要查阅相关资料的。
**代码上下文**
我们关注这样一段代码，同样是用来生成邮件的
    greeting = getQueryParameter('greeting')
    engine.render("Hello {{"+greeting+"}}", data)
上面代码通过获取静态查询参数greeting的值然后再填充到模板语句中，但是就像sql注入一样，如果我们提前将双花括号闭合，然后就可以注入自定义的语句了。
## 识别
当我们探测到潜在的SSTI漏洞后，我们下一步就是要识别使用的是哪一款模板引擎了。比较常见的做法可以是故意触发报错即可知道，例如输入无效的表达式，然后得到这样的报错信息
    (erb):1:in `': undefined local variable or method `foobar' for main:Object (NameError)
    from /usr/lib/ruby/2.5.0/erb.rb:876:in `eval'
    from /usr/lib/ruby/2.5.0/erb.rb:876:in `result'
    from -e:4:in `'
从上面得知使用的是基于Ruby的ERB引擎。但是如果这种方法不生效怎么办，我们可以通过执行不同语法的数学运算观察结果，burp直接给了一张很详细的图
有的时候相同的payload可能会有两种响应，比如{{7*’7’}}在Twig中会的到49，而在Jinja2中会得到7777777。
## 利用
在我们确定目标使用的模板引擎后，我们想要成功发动SSTI攻击往往需要以下步骤
  * 阅读模板引擎语法、安全文档、已知利用文章
  * 探索环境
  * 构造自定义利用
###  阅读
**学习基础模板语法**
学习基本语法、关键函数和变量处理是非常关键的，连这些都不会，就也没办法编写相应的payload了。比如如果我们知道了使用的是基于python的Mako模板引擎，我们可以编写这样的payload。
    ${x}
我们可以看到就是利用最基础的语法写的，所以这个环节也是很关键的。这段代码可以在非沙箱环境中实现远程代码执行，包括读取、编辑或删除任意文件。下面我们通过两道靶场来深入理解
**配套靶场1：基础SSTI**
题目告诉我们模板引擎是ERB，然后我们去查一下ERB的文档发现语法为
然后我们将表达式模板语句写到message参数中，使用常用的数学表达式来进行检测
说明模板引擎会去执行表达式，然后通过搜索引擎查到ruby语言执行操作系统命令的函数是system()，于是我们就可以在模板表达式中执行操作系统命令了
我们看到模板引擎成功地执行了ls命令，看到了我们要删除的文件，于是执行删除命令即可
**配套靶场2：基础SSTI(上下文为代码)**
首先我们登录用户，然后在用户设置里发现了一个修改显示的名称的功能，于是我们搜索了一下Tornado模板引擎的语法，然后构造如下payload
然后我们随便发表一个评论，看一下显示的名称有没有变化