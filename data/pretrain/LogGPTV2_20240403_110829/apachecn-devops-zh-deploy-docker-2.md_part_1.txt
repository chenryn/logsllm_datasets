# 二、开始干活
在前一章中，我们研究了什么是容器，它们在您的基础架构中可以扮演什么角色，以及为什么 Docker 在服务部署中处于领先地位。既然我们知道了 Docker 是什么和不是什么，我们就可以从基础开始了。在本章中，我们将涵盖以下主题:
*   安装 Docker
*   扩展容器
*   建造容器
*   调试容器
# 安装 Docker
Docker 的安装因操作系统而异，但对于大多数系统，在[https://docs.docker.com/engine/installation/](https://docs.docker.com/engine/installation/)有详细的说明。Docker 一般有两个级别:**社区版** ( **CE** )和**企业版** ( **EE** )。虽然略有不同，但对于我们将在本书中研究的几乎所有内容，社区版都是功能完善的，并且在各方面都足够了。一旦达到需要更高级功能的规模级别，例如安全扫描、LDAP 和技术支持，企业版可能就有意义了。不出所料，企业版不是免费的，你可以看看[https://www.docker.com/pricing](https://www.docker.com/pricing)看看这些版本有什么不同。
对于我们的例子和本书中任何特定于操作系统的命令，从这里开始，我们将使用 Ubuntu 的**长期支持** ( **LTS** )版本，Ubuntu 是目前最受欢迎的 Linux 发行版。LTS 产品的最新版本是 16.04，这将是我们的 CLI 交互和示例的基础，但是当您阅读本书时，18.04 可能也已经可用了。请记住，在安装部分之外，大多数代码和示例都是非常可移植的，并且通常应该在其他平台上运行，因此即使需要更改，它们也应该是最小的。也就是说，在非 Linux 平台上开发 Docker 服务可能不那么精细或稳定，因为 Docker 通常用于在 Linux 机器上部署基于 Linux 的服务，尽管在某种程度上支持其他利基案例。自从微软试图推行自己的容器策略以来，他们一直在用 Docker for Windows 在这个领域取得重大进展，所以请密切关注他们的进展，因为它可能会成为一个相当称职的开发平台。
Some manual networking examples in later chapters may not work fully in macOS due to the different implementation of this subsystem for that platform. For those, using a virtual machine with Ubuntu LTS is advised if you want to follow along.
因此，使用我们干净的 Ubuntu 16.04 LTS 机器、虚拟机或兼容的操作系统，让我们安装 Docker。虽然 Docker 包已经在发行版中的`apt`存储库中可用，但我强烈反对以这种方式安装，因为这些版本通常要老得多。虽然这对于大多数软件来说不是问题，但是对于像 Docker 这样快速移动的项目来说，在支持最新特性方面，它会让您处于明显的劣势。为此，我们将从 Docker 自己的 apt 存储库中安装 Docker:
Warning! There are couple of other ways to install Docker using many of the following tools, but unless absolutely necessary, installation with the `sudo curl -sSL https://somesite.com/ | sh` pattern or anything similar to it is a very dangerous thing to do as you are rooting your own box for a website without checking what the script does. This execution pattern also leaves minimal evidence of what was done behind. Additionally mid-stream exception can corrupt the download but still execute, partially causing damage, and you are only relying on **Transport Layer Security** (**TLS**), for which hundreds of organizations across the world can create fake certificates. In other words, if you care about your machine, you should never, ever try to install software in this way unless, of course, the software vendor is clueless about security and they force you to do this, in which case, you are at their mercy.
```
$ # Install the pre-requisites
$ sudo apt install -y apt-transport-https \
                      curl
$ # Add Docker's signing key into our apt configuration to ensure they are the only ones that can send us updates. This key should match the one that the apt repository is using so check the online installation instruction if you see "NO_PUBKEY " errors.
$ apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 \
              --recv-keys 58118E89F3A912897C070ADBF76221572C52609D
$ # Add the repository location to apt. Your URL may be different depending on if Xenial is your distribution.
$ echo "deb https://apt.dockerproject.org/repo ubuntu-xenial main" | sudo tee -a /etc/apt/sources.list.d/docker.list
$ # Update the apt listings and install Docker
$ sudo apt update
$ sudo apt install docker-engine
```
By default, Docker will require `sudo` (or `root`) prefixed to all of your commands to run including ones in this book that don't have it explicitly mentioned. Generally, for development machines, this is a big pain to deal with so I might mention, but *strongly* discourage, that you can also add your current user to the `docker` group so that you do not need to prefix every Docker command with `sudo`:
1.  用`usermod`将用户添加到组中(例如`$ sudo usermod -aG docker $USER`)。
2.  完全注销并重新登录(仅在会话开始时评估组)。
请记住，这是一个巨大的安全漏洞，可以让本地用户轻而易举地升级到 root 权限，因此在任何情况下，都不要在任何位于互联网上的服务器上这样做。
如果前面的所有命令都如预期的那样工作，您将能够看到是否安装了 Docker:
```
$ docker --version
Docker version 17.05.0-ce, build 89658be
```
安装 Docker 而不运行任何东西是非常无用的，所以让我们看看我们是否能得到一个可以在本地运行的映像。我们在这里的选择是要么从头开始制作我们自己的形象，要么使用已经制作好的东西。考虑到 Docker 之所以达到如此高的采用率，一个很大的原因是它可以通过 Docker Hub([https://hub.docker.com/](https://hub.docker.com/))轻松共享映像，而我们刚刚起步，我们将延迟一点创建自己的映像来探索这个网站，一个发布和下载 Docker 映像的集中场所。
![](img/9dcfd37d-69ef-4c5b-85a3-81ae5744af1c.png)
在这个非描述性且平淡无奇的页面背后，存储着成千上万的 Docker 映像，由于我们现在对发布映像不感兴趣，我们只需点击页面右上角的 Explore 按钮即可查看有哪些映像可用:
![](img/67614142-30b1-404d-a102-176c02138508.png)
如您所见，这列出了撰写本文时最受欢迎的映像，但您也可以通过左上角的搜索框查找特定的映像。就目前而言，如前所述，我们不会在这里花费太多时间，但您知道如何从 Docker Hub 运行映像将是有价值的，因此我们将尝试拉取并运行其中一个映像，向您展示它是如何完成的。
目前这里可用的顶级容器似乎是 NGINX，所以我们将尝试在 Docker 环境中运行它。如果你之前没有使用过 NGINX，那它是一款高性能的 web 服务器，被互联网上大量的网站使用。在这个阶段，我们只想体验一下运行这些容器的感觉，所以让我们看看是如何做到的:
```
$ # Pull the image from the server to our local repository
$ docker pull nginx
Using default tag: latest
latest: Pulling from library/nginx
94ed0c431eb5: Pull complete
9406c100a1c3: Pull complete
aa74daafd50c: Pull complete
Digest: sha256:788fa27763db6d69ad3444e8ba72f947df9e7e163bad7c1f5614f8fd27a311c3
Status: Downloaded newer image for nginx:latest
```
`pull`命令拉出组成该映像的所有图层。在这种情况下，NGINX 映像基于三个堆叠的层，并且有一个散列`788fa277..27a311c3`，并且由于我们没有指定我们想要的特定版本，所以我们得到了默认标签，即`latest`。通过这个命令，我们已经从 Docker Hub 中检索到了 NGINX 映像，这样我们就可以在本地运行它了。如果我们想使用不同的标签或者从不同的服务器拉取，这个命令会得到类似于`docker pull :/`的更具表现力的形式，但是我们将在后面的章节中介绍这些高级用法。
映像现在位于我们本地的 Docker 存储中(通常在`/var/lib/docker`中)，我们可以尝试运行它。NGINX 有大量的可能选项，您可以在[https://hub.docker.com/_/nginx/](https://hub.docker.com/_/nginx/)进一步详细研究，但我们现在只对映像的开始感兴趣:
```
$ docker run nginx
```
你可能注意到什么都没有发生，但是不要担心，因为这是预料之中的。可悲的是，这个命令本身是不够的，因为 NGINX 将在前台运行，根本无法通过套接字访问，所以我们需要覆盖一些标志和开关，以使它真正有用。因此，让我们按下 *Ctrl* + *C* 关闭容器，然后再试一次，这次添加一些必要的标志:
```
$ docker run -d \
             -p 8080:80 \
             nginx
dd1fd1b62d9cf556d96edc3ae7549f469e972267191ba725b0ad6081dda31e74
```
`-d`标志在后台运行容器(分离模式)，这样我们的 Docker 就不会被 NGINX 占用，而`-p 8080:80`标志将我们的本地港口`8080`映射到容器港口`80`。容器通常有它们公开的特定端口，在这种情况下，它是`80`，但是如果没有映射，我们将无法访问它。该命令返回的输出是一个唯一的标识符(容器标识)，可用于在启动该特定容器后跟踪和控制它。希望您现在可以看到 Docker 的端口白名单方法如何增加额外的安全级别，因为只有您明确允许监听的内容才被允许。
你现在可以打开你的浏览器到`http://localhost:8080`，你会看到一个类似这样的页面:
![](img/e6232d72-7384-4664-b720-13f01ac9e7fb.png)
但是我们究竟是如何知道港口`80`需要被倾听的呢？事实上，我们将在一秒钟内讨论这个问题，但是首先，因为我们在分离模式下启动了这个容器，所以它仍然会在后台运行，我们应该确保我们也停止它。要查看我们运行了哪些容器，让我们用`docker ps`检查我们的 Docker 容器状态:
```
$ docker ps
CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
dd1fd1b62d9c nginx "nginx -g 'daemon ..." 13 minutes ago Up 13 minutes 0.0.0.0:8080->80/tcp dazzling_swanson
```
我们在这里看到的是，我们的 NGINX 容器仍然在运行，它已经将 localhost 接口端口`8080`(包括外部可访问的端口)映射到容器的端口`80`，并且我们已经运行了`13`分钟。如果我们有更多的容器，它们都会在这里列出，所以这个命令对于使用 Docker 容器非常有用，并且通常用于调试和容器管理。
既然我们想关闭这个容器，我们现在就要这样做。要关闭容器，我们需要知道容器标识，它既是`docker run`返回的值，也是`docker ps`第一列显示的值(`dd1fd1b62d9c`)。请随意使用 ID 的短版本或长版本，但为了简洁起见，我们将使用前者:
```
$ docker stop dd1fd1b62d9c
dd1fd1b62d9c
```
这将优雅地尝试停止容器，并将使用的资源返回给操作系统，并在特定超时后，强行终止它。如果容器真的卡住了，并且我们知道，我们可以用`kill`替换`stop`来硬终止进程，但是这很少需要，因为如果进程没有响应，`stop`通常会做同样的事情。我们现在将确保我们的容器不见了:
```
$ docker ps
CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
```
是的，事情看起来和我们预期的一样，但是要注意，虽然停止的容器不可见，但是默认情况下它们不会从文件系统中完全删除:
```
$ docker ps -a
CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
dd1fd1b62d9c nginx "nginx -g 'daemon ..." 24 minutes ago Exited (137) 2 minutes ago dazzling_swanson
```
`-a`标志用于显示所有的容器状态，而不仅仅是运行的状态，可以看到系统仍然知道我们的旧容器。我们甚至可以用`docker start`恢复！
```
$ docker start dd1fd1b62d9c
dd1fd1b62d9c
$ docker ps
CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
dd1fd1b62d9c nginx "nginx -g 'daemon ..." 28 minutes ago Up About a minute 0.0.0.0:8080->80/tcp dazzling_swanson
```
要真正永久删除我们的容器，我们需要使用`docker rm`显式删除它，如这里所示，或者使用`--rm`开关运行`docker run`命令(我们将在接下来的几页中介绍这一点):
```
$ docker stop dd1fd1b62d9c
dd1fd1b62d9c
$ docker rm dd1fd1b62d9c
dd1fd1b62d9c
$ docker ps -a