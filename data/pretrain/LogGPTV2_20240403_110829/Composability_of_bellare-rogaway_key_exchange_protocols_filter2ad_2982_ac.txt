to this session was corrupted before the session was completed
(i.e. while γ = running).
– δpnr ∈ {honest, corrupted}: Details whether the identity of the
partner associated to this session was corrupted before the ses-
sion was completed.
– ω ∈ {fresh, revealed}: Shows if the session key for this session
has been revealed to the adversary.
Although we keep track of the value δi for each identity
within the execution state, keeping track of δ for each ses-
sion allows sessions that have completed before an identity
is corrupted, to continue being thought of as not corrupt.
In turn, this is used to model forward secrecy2. We write
LST(lsid) = (δ, δpnr, ω) for the local session state of the ses-
sion lsid.
Setup. To initialise the games for key exchange protocols
the setupE algorithm is used to generate all asymmetric keys
for identities. Each session is then initialised with the correct
asymmetric keys, while all other variables are initially set to
be undeﬁned. This is shown in Figure 1.
Queries. For the Send query in key exchange protocol
games, we require that the algorithm ξke outputs a response =
2
In forward secure protocols, sessions that accepted a key before the
corresponding user gets corrupted are still considered honest after the
corruption occurs. When modelling non-forward secure protocols all
sessions of a user are considered corrupted when the adversary makes
a corruption query for this user.
55Corrupt(i):
LST(cid:48) ← LST
For (i, pki, ski, δi) ∈ Lkeys do
For all lsid ∈ LSID s.t. lsid = (i,∗,∗) do
δi ← corrupted
//set all running executions of party i to corrupted
If SST(lsid).γ = running then LST(cid:48)(lsid).δ ← corrupted
For all lsid ∈ LSID s.t. lsid = (∗, i,∗) do
//set pointer to i in all running partner executions to corrupted
If SST(lsid).γ = running then set LST(cid:48)(lsid).δpnr ← corrupted
Reveal(lsid):
Return ((SST, LST(cid:48), EST, MST), ski)
LST(cid:48) ← LST and LST(cid:48)(lsid).ω ← revealed
Return ((SST, LST(cid:48), EST, MST), SST(lsid).κ)
$←− {0, 1}
setupG(LSID, SST, EST, 1η):
Draw btest
Set bguess ←⊥, lsidtested ←⊥
For all lsid ∈ LSID, LST(lsid)
← (honest, honest, fresh)
Return
(LST, (btest, bguess, lsidtested))
Test(lsid):
If MST.btest = 0 then κ $←− D
Else set κ ← SST(lsid).κ,
MST(cid:48) ← MST, MST(cid:48).lsidtested ← lsid
Return (SST, LST, EST, MST(cid:48)), κ
Guess(b):
MST(cid:48) ← MST, MST(cid:48).bguess ← b
Return (SST, LST, EST, MST(cid:48)), okay
Figure 3: Model state setup for BR-secrecy game and the
Test and Guess queries for the BR-secrecy game.
PBR(LSID, SST, LST, EST, MST):
If MST.lsidtested =⊥ then return 0.
For each lsid ∈ LSID s.t. SST(lsid).sid = SST(MST.lsidtested).sid do
//No Test query made
Figure 2: The queries for key exchange protocols.
//Test for exposure of partner key or key itself
(γ, msg(cid:48)). This explicitly tells the adversary when a session
accepts or rejects a key.
Additionally to the Send query, the adversary may make
Corrupt and Reveal queries, formally given in Figure 2. The
Corrupt query allows the adversary to take control of all
sessions of an identity by receiving its long term secret key.
This query marks the identity as corrupt and all sessions of
this identity which have not completed are also marked as
corrupt. As completed sessions are not set to be corrupt we
only consider key exchange protocols which provide forward
security. The Reveal query returns the derived session key
to the adversary and marks the session as revealed. Using a
Valid predicate, we restrict adversaries to only make Send
queries to un-revealed sessions of non-corrupt users where
the key has not been accepted or rejected.
BR-secrecy game. To provide secrecy guarantees of the
session key we ask an adversary to decide whether it received
the real session key, or a random value, for a session of its
choice. It is assumed any random value is drawn from some
key distribution D (often the uniform distribution for bit
strings of length |κ|). We write κ $←− D for the value of κ
drawn randomly from the distribution D. We call this game
the BR-secrecy game and use the execution model of key
exchange protocols as described so far. We now set out the
additional details of the model for the secrecy property.
The model state for the BR-secrecy game contains two
bits, btest ∈ {0, 1} and bguess ∈ {0, 1,⊥} along with a ses-
sion identiﬁer lsidtested ∈ LSID ∪ {⊥}. We write MST =
(btest, bguess, lsidtested) for the model state in the BR-secrecy
game. The bit btest determines whether the adversary is
given the real session key, or random value in response to
the Test query.3 The bit bguess stores the adversary’s guess
for the value of btest. The session identiﬁer lsidtested is the
local session identiﬁer for which the Test query was made.
The algorithm setupG initialises the model state by select-
ing the random value for btest. Upon initialisation bguess and
lsidtested are undeﬁned, so set to ⊥. This is shown in Figure 3.
There are two additional queries required to model the
BR-security of a key exchange protocol, namely Test and
Guess. The Test query provides the adversary with either
the real session key for a given session, or a random value.
The Guess query provides the game with the adversary’s
guess to the value btest. The queries are given in Figure 3.
In order to prevent trivial attacks, we place restrictions
3
We assume that the adversary only makes a single Test query. Se-
curity with respect to many Test queries then follows by a hybrid
argument [4].
If LST(lsid).ω = revealed then return 0.
If MST.btest (cid:54)= MST.bguess then return 0.
Else return 1.
//Wrong guess
Figure 4: Predicate for the BR-secrecy game.
on the admissibility of the Test query. An adversary is not
allowed to Test a session which is corrupt, has not accepted,
or whose partner is corrupt, or to test more than a session.
In these cases, the Valid predicate for the Test query re-
turns false. Note that these cases are publicly veriﬁable.
The Valid predicate checks if a session (or partner session)
is corrupt by checking the value of δ or δpnr stored in the local
session state, LST. Moreover, the adversary should not Test
a session which is revealed or where the partner session has
been revealed. In these cases though, the Valid predicate
does not return false but instead lets the adversary continue.
This is in order to prevent leakage of partnering information
through the Test query. The adversary may not be aware
this has occurred; however at the end of execution the pred-
icate checks for this, and causes the experiment to be lost if
such an action has occurred. We also forbid Reveal queries
on the tested session or its partner. Again, the adversary
is later declared to lose if such a Reveal query happens (but
again without being informed immediately). Furthermore
we only allow the adversary one Guess query.
The predicate for the BR-secrecy game checks if the adver-
sary’s guess for the value of btest is correct. Furthermore, the
predicate causes the adversary to lose the game if the tested
session (or its partner) have been revealed. No checks relat-
ing to corruption are required, as we only consider protocols
which are forward secure; hence if an identity is corrupted
after the Test query is made, key indistinguishability should
still hold. The predicate PBR is deﬁned in Figure 4.
We write the BR-secrecy game as GBR,D, where D is the
key distribution from which random keys are chosen during
the Test query. Furthermore we denote the game GBR,D with
the secret bit btest as Gbtest
BR,D.
Definition 2. We deﬁne the advantage of the adversary
A against the BR-secrecy property as
(cid:20)
(cid:12)(cid:12)(cid:12)(cid:12) Pr
(cid:20)
(cid:21)
(cid:21)(cid:12)(cid:12)(cid:12)(cid:12)
Adv
GBR,D
ke,A (1η) =
Exp
G0
BR,D
ke,A (1η) = 0
− Pr
Exp
G1
BR,D
ke,A (1η) = 1
where ke is the key exchange protocol analysed.
Partnering security game.
In the partnering security
56Psid(LSID, SST, LST, EST, MST):
For each lsid = (i, j, k) ∈ LSID do
//distinct intended partners
If SST(lsid).sid (cid:54)=⊥ then for all triples
(j(cid:48), i(cid:48), k(cid:48)) ∈ LSID with SST((j(cid:48), i(cid:48), k(cid:48))).sid = SST(lsid).sid do
If (j(cid:48), i(cid:48)) /∈ {(i, j), (j, i)} then return 1.
If i = i(cid:48), j = j(cid:48), LST(i, j, k).δ = LST(j(cid:48), i(cid:48), k(cid:48)).δ = accepted but
SST(i(cid:48), j(cid:48), k(cid:48)).κ (cid:54)= SST(lsid).κ then return 1.
If the number of triples (j(cid:48), i(cid:48), k(cid:48)) ∈ LSID with
SST((j(cid:48), i(cid:48), k(cid:48))).sid = SST(lsid).sid is strictly larger than 2,
then return 1.
//Too many partners
//distinct keys
Return 0.
Figure 5: Predicate for the partnering key exchange
game.
setupG(LSID, SST, EST, 1η):
For each lsid ∈ LSID set LST(lsid) ← (honest, honest, fresh)
Return (LST,⊥)
Figure 6: Model state setup algorithm for BR part-
nering game.
game the adversary attempts to cause the session identiﬁers
within the game to be considered invalid in some way. This
is done by causing more than two sessions to share the same
session identiﬁer, making a session accept a key without set-
ting the session identiﬁer, or causing two sessions to hold
the same session identiﬁer, but where the intended partner
identity of such sessions are incorrect. Moreover, the ad-
versary wins if two sessions have the same session identiﬁer
and diﬀerent keys. All these properties are modelled via the
winning condition of the partnering which is deﬁned through
Psid, see Figure 5.
The partnering security game requires no model state or
additional queries to those required for general execution of
a key exchange protocol. The setupG algorithm sets the LST
function and leaves the model state undeﬁned. We give the
formal description in Figure 6.
The partnering security game is written as Gsid, and the
advantage of the adversary A against the partnering security
property as
AdvGsid
ke,A(1η) = Pr
ExpGsid
ke,A(1η) = 1
(cid:104)
(cid:105)
.
Definition 3
(BR-secure protocol). We call a key
exchange protocol ke BR-secure w.r.t. D if for all adver-
saries A, Adv
ke,A(1η) are negligible func-
tions in the security parameter.
GBR,D
ke,A (1η) and AdvGsid
Session Matching. For composability, we need an ad-
ditional property, called session matching. Roughly, this
means that an eavesdropper on the communication between
the BR-adversary and the BR-secrecy game should be able
to deduce which sessions are partnered, i.e. at any time,
the eavesdropper should be able to produce a list of pairs of
all partnered (accepted) sessions. Note that this is trivially
satisﬁed when deﬁning session identiﬁers through matching
conversations. However, when using abstract session identi-
ﬁers, sid, this need not be the case. For instance, consider
a BR-secure key exchange that uses matching conversations
as the session identiﬁer. We now transform the protocol
as follows: The participants encrypt all messages they send.
The session identiﬁers are now deﬁned as matching conversa-
//Alleged single parties don’t have partners
Ppartner(LSID, SST, LST, EST, MST, LSIDpartner, LSIDsingle):
For each lsid ∈ LSIDsingle do
If SST(lsid).γ (cid:54)= accepted then return 0.
Else if there exists lsid(cid:48) ∈ LSID \ {lsid} with SST(lsid(cid:48)).sid =
SST(lsid).sid then return 0.
For each (lsid, lsid(cid:48)) ∈ LSIDpartner do
If (SST(lsid).γ, SST(lsid(cid:48)).γ) (cid:54)= (accepted, accepted) then return 0.
If SST(lsid).sid (cid:54)= SST(lsid(cid:48)).sid(cid:48) then return 0.
For each lsid ∈ LSID do
If SST(lsid).γ = accepted, lsid /∈ LSIDsingle and for all
(lsid0, lsid1) ∈ LSIDpartner, one has lsid0 (cid:54)= lsid and lsid1 (cid:54)= lsid
then return 0.
//Each accepted session is assigned as single or partnered
//Alleged partners have accepted and are really partnered
Return 1.
Figure 7: Session matching predicate.
tions on the plaintexts. First note that the resulting key ex-
change protocol is as secure as the original, assuming secure
encryption. But the protocol has an interesting property:
Assume the encryption scheme is re-randomizable. Then,
an eavesdropper on the communication is unable to deduce
which sessions between two parties are partnered, as the
BR-adversary may re-randomize all messages sent.
We therefore deﬁne an eﬃcient session matching algorithm
M which can deduce from the communication between the
BR-secrecy adversary and BR-secrecy game which sessions
are partnered. Algorithm M is allowed to see all queries and
answers exchanged between a key exchange and an adversary
A; this includes all public parameters of the system. The
requirement on M is independent of the winning condition
of A in the game; algorithm M needs to provide correct
matchings constantly.
More formally, a session matching algorithm M for the
key exchange protocol is deﬁned as an eﬃcient algorithm
that receives all information exchanged between a key ex-
change game GBR and an adversary A against GBR. We
require that each time the key exchange game sends a re-
sponse to the adversary A, algorithm M is able to output
two sets LSIDpartner and LSIDsingle, where LSIDpartner contains
pairs (lsid0, lsid1), and LSIDsingle consists of session identiﬁers
lsid. We deﬁne the predicate Ppartner to specify correctness of
these sets by checking all pairs (lsid0, lsid1) are sessions which
share the same session identiﬁer, and all identiﬁers in the set
LSIDsingle are sessions which are currently unpartnered. This
is formally described in Figure 7.
Definition 4