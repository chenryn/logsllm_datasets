15
APPENDIX
A. Level of concurrency in the btrfs file system
1 struct btrfs_fs_info {
/* work queues */
2
struct btrfs_workqueue *workers;
3
struct btrfs_workqueue *delalloc_workers;
4
struct btrfs_workqueue *flush_workers;
5
struct btrfs_workqueue *endio_workers;
6
struct btrfs_workqueue *endio_meta_workers;
7
struct btrfs_workqueue *endio_raid56_workers;
8
struct btrfs_workqueue *endio_repair_workers;
9
struct btrfs_workqueue *rmw_workers;
10
struct btrfs_workqueue *endio_meta_write_workers;
11
struct btrfs_workqueue *endio_write_workers;
12
struct btrfs_workqueue *endio_freespace_worker;
13
struct btrfs_workqueue *submit_workers;
14
struct btrfs_workqueue *caching_workers;
15
struct btrfs_workqueue *readahead_workers;
16
struct btrfs_workqueue *fixup_workers;
17
struct btrfs_workqueue *delayed_workers;
18
struct btrfs_workqueue *scrub_workers;
19
struct btrfs_workqueue *scrub_wr_completion_workers;
20
struct btrfs_workqueue *scrub_parity_workers;
21
struct btrfs_workqueue *qgroup_rescan_workers;
22
/* background threads */
23
struct task_struct *transaction_kthread;
24
struct task_struct *cleaner_kthread;
25
26 };
Fig. 14: 20 work queues and 2 background threads used by btrfs.
This does not cover all asynchronous activities observable at runtime.
B. Seed evolution in KRACE
• if no new coverage is observed for 5 consecutive runs,
KRACE starts to mutate the syscall arguments in the multi-
threaded trace or shuffle the syscalls;
• if no new coverage is observed for 50 consecutive runs,
KRACE starts to alter the input structure by adding or
deleting the syscalls in the multi-threaded traces;
• if no new coverage is observed for 500 consecutive runs,
KRACE starts to merge two seeds for a new seed.
C. Ad-hoc synchronization schemes in kernel file systems
they may still exist
Although ad-hoc synchronization schemes are considered
harmful [69],
in kernel file systems
for performance or functionality enhancements. Whenever
we encounter an ad-hoc scheme (usually when analyzing
false positives), we annotate it in the same way as major
synchronization APIs so that subsequent runs will not report
the false data races caused by it. In this section, we present
two examples we encountered in btrfs.
Ad-hoc locking. An ad-hoc lock has two implications: 1)
there will be data races in the lock implementation and these
data races are all benign races; and 2) lock internals should
be abstracted in a way that the lockset analysis can easily
understand. A representative example is the btrfs tree lock, and
the purpose of having the tree lock is to be convertible between
blocking and non-blocking mode, as shown in Figure 16.
while True:
program = merge_seeds(select_seed_pair())
mod_stall = 0
while mod_stall blocking_readers) == 0);
wait_event(eb->write_lock_wq, eb->blocking_writers == 0);
write_lock(&eb->lock);
if (atomic_read(&eb->blocking_readers)
|| eb->blocking_writers) {
start_ns = ktime_get_ns();
wait_event(eb->read_lock_wq,
* blocking readers or writers */
WARN_ON(eb->lock_owner == current->pid);
/* acquire a spinning write lock, wait for both
write_unlock(&eb->lock);
goto again;
u64 start_ns = 0;
if (trace_btrfs_tree_lock_enabled())
}
btrfs_assert_spinning_writers_get(eb);
btrfs_assert_tree_write_locks_get(eb);
eb->lock_owner = current->pid;
1
2
3 void btrfs_tree_lock(struct extent_buffer *eb)
4 {
5
6
7
8
9
10 again:
11
12
13
14
15
16
17
18
19
20
21
22
23 }
24 /* drop a spinning or a blocking write lock. */
25 void btrfs_tree_unlock(struct extent_buffer *eb)
26 {
27
28
29
30
31
32
33
34
35
36
37
38
39
40