title:LMP: light-weighted memory protection with hardware assistance
author:Wei Huang and
Zhen Huang and
Dhaval Miyani and
David Lie
LMP: Light-Weighted Memory Protection with Hardware Assistance
Wei Huang
Zhen Huang
Dhaval Miyani
Department of Electrical and Computer Engineering
University of Toronto
David Lie
Abstract
Despite a long history and numerous proposed defenses,
memory corruption attacks are still viable. A secure and
low-overhead defense against return-oriented programming
(ROP) continues to elude the security community. Current-
ly proposed solutions still must choose between either not
fully protecting critical data and relying instead on informa-
tion hiding, or using incomplete, coarse-grain checking that
can be circumvented by a suitably skilled attacker. In this
paper, we present a light-weighted memory protection ap-
proach (LMP) that uses Intel’s MPX hardware extensions
to provide complete, fast ROP protection without having
to rely in information hiding. We demonstrate a prototype
that defeats ROP attacks while incurring an average runtime
overhead of 3.9%.
CCS Concepts
•Security and privacy → Malware and its mitigation;
Keywords
Stack Protection, CFI, ROP, MPX
1.
INTRODUCTION
In languages such as C/C++, the programmers are ulti-
mately responsible for enforcing the memory safety of their
programs. However, inevitably, programmers produce code
with ﬂaws that violate memory safety, and some of these
ﬂaws result in memory corruption vulnerabilities that allow
attackers to maliciously alter the control ﬂow of program-
s [29], corrupt critical data [19], or cause sensitive informa-
tion leakage [13].
There have been numerous proposed or deployed defens-
es to mitigate memory corruption vulnerabilities. Despite
this, memory corruption vulnerabilities continue to be ex-
ploitable. For example, ASLR (Address Space Layout Random-
ization) [27] randomizes memory locations of code and data
segments, but can be circumvented via vulnerabilities such
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC ’16, December 05-09, 2016, Los Angeles, CA, USA
c(cid:2) 2016 ACM. ISBN 978-1-4503-4771-6/16/12. . . $15.00
DOI: http://dx.doi.org/10.1145/2991079.2991089
as address space leakage, timing side-channels [20] or attacks
such as just-in-time code reuse [32]. DEP (Data Execution
Prevention) [2] prevents injecting and executing new code
in vulnerable programs. However, it cannot prevent reusing
existing code in an application via a return-to-libc or ROP
(Return-Oriented Programming) attack [29].
To address ROP attacks, Abadi et al. propose Control-
Flow Integrity (CFI) [1]. CFI protection enforces both for-
ward-edge protection (i.e. indirect function calls) and back-
wards-edge protection (i.e. function returns) to ensure that
a memory corruption vulnerability does not allow an attack-
er to corrupt a code pointer and redirect execution along
an edge not speciﬁed by the original program. While the
target of a forward-edge function call can be resolved to a
single or small number of targets statically, the target of a
backwards-edge function return cannot generally be deter-
mined with much precision using only static analysis. As a
result, backwards-edge protection generally requires a run-
time component. To determine and enforce backward-edges
precisely, shadow stacks are proposed in [1] and software-
based fault isolation (SFI) [37] is further used to protect
the contents of the shadow stacks from corruption by an
attacker. Unfortunately, the runtime overhead of the mem-
ory checking required to properly implement this runtime
component can be as high as 2× [9].
To reduce this overhead, various proposals weaken the
properties of the backwards-edge protection in return for
better runtime performance. For example, some propose
coarse-grain protections, which do not use a shadow stack
to precisely track backwards-edge targets. Since shadow s-
tacks are not used, there is no need for SFI, which avoids
the expensive checks required to implement memory protec-
tion for the shadow stacks. This coarse-grain approach is
taken by proposals such as kBouncer [26], ROPGuard [16],
ROPecker [6], which have signiﬁcantly lower overheads rang-
ing from 1.59% to 2.60%. These coarse-grain methods are
imprecise in that they do not actually validate that the re-
turn address on a backwards-edge actually points to the o-
riginal caller; instead, they either only check that the return
address points to an instruction that follows some call in-
struction, or they heuristically check the number of returns
to detect gadgets executions. They have all been shown to
be circumventable [12, 18] and ineﬀective against a knowl-
edgeable attacker.
Information hiding is another way to mitigate the over-
head of complete CFI backwards-edge protection.
In this
approach, rather than protecting the data in the shadow
stacks with memory access checks, the shadow stacks are
460placed at a random location in a 64-bit address space. Be-
cause the size of the address space is large, it is assumed in-
feasible for the attacker to guess the location of the shadow
stacks. One method called code-pointer integrity (CPI) [23]
is able to provide CFI protection with 2.9% overhead (on C
applications). However, information hiding techniques can
be broken by memory safety vulnerabilities that leak the
location of the shadow stacks [15]. Other work has also
shown that various side-channel attacks can be used to leak
information that can be used to ﬁnd the hidden shadow s-
tacks [30,33]. The lesson here is that ultimately information
hiding is not equivalent to memory protection, as they are
vulnerable to address information leakage, while memory
protection is not.
In this paper, we propose Light-Weighted Memory Pro-
tection (LMP), a new method that leverages Intel’s Mem-
ory Protection Extensions (MPX) to make backwards-edge
CFI both secure and eﬃcient. LMP tackles two essential
problems that stand in the way of memory safety in system
software: critical memory region protection in backwards-
edge CFI approaches and non-trivial overheads in checking
memory access violations.
While hardware-supported memory checks are naturally
more eﬃcient than software memory checking, which is al-
so proven in recent work on using customized hardware for
CFI enforcement [8, 11], we ﬁnd that the hardware exten-
sions like Intel MPX have to be applied carefully in order
to truly reap the performance beneﬁts of specialized hard-
ware. In particular, not all of the operations supported by
Intel MPX have low overhead. Therefore, we design LMP to
minimize the use of the high-overhead components of MPX
and still enable it to eﬀectively protect shadow stacks from
unauthorized modiﬁcation.
We build a proof-of-concept prototype implementation of
LMP and measure the performance overhead with SPEC
2006 benchmarks. The LMP system introduces an average
overhead of 3.90%, which is much less than the 2× over-
head from the reference implementation of the original C-
FI [9].
In fact, LMP achieves roughly same overhead as
information hiding techniques [10, 23], which have generally
about 3% overhead. LMP is also comparable with recent
coarse-grained CFI approaches, which have overheads be-
tween 1.59% (ROPGuard [16]) and 2.60% (kBouncer [26]).
However, LMP provides stronger security guarantees than
both information hiding and coarse-grain approaches, as it
is both not vulnerable to either side-channel leakage and
enforces a much stricter policy.
We summarize three main contributions this paper makes:
1. We propose an alternative use of hardware assisted
pointer checker with Intel MPX that is diﬀerent from
the standard proposed use of MPX.
2. We provide the ﬁrst stack protection solution that is
assisted by the available CPU feature of Intel MPX.
3. We achieve a low overhead among existing equivalent
solutions, while provide stronger protection than coarse-
grain backward-edge CFI approaches.
The rest of this paper is organized as follows: We present
background information about hardware assistance of Intel
MPX we depend on and threat model we assume in Sec. 2,
describe the method we use in Sec. 3 and details of imple-
mentation in Sec. 4, evaluate our results in Sec. 5, discuss
related work in Sec. 6 and conclude in Sec. 7.
2. BACKGROUND
Before describing our approach to protection, we ﬁrst de-
scribe the base MPX hardware that LMP leverages. Intel’s
Memory Protection Extensions (MPX) are a set of exten-
sions to the x86-64 instruction set architecture in the Intel
Skylake processors. To check pointer references at runtime
and prevent illegal memory accesses, the idea was imple-
mented previously as the feature of Pointer Checker [17] in
the Intel compiler for debugging: a pair of bounds is cre-
ated whenever a pointer is made, then the compiler will
also generate code to check the bounds when the pointer is
used. Pointer Checker is fully software-based, while MPX
provides hardware acceleration for the bound checks that
Pointer Checker would have done in software. MPX has
software and hardware components.
MPX introduces several new registers and instructions to
the instruction set architecture:
• 4 bound registers: BND0-BND3. Each of the registers
is 128-bit, and they store the lower bound memory
address with 64 bits and the upper bound memory
address with 64 bits. Bound registers hold the upper
and lower bounds that memory accesses are checked
against.
• 2 conﬁguration registers: BNDCFGU for user mode and
IA32_BNDCFGS for supervisor mode.
• 1 status register: BNDSTATUS which stores error code
when exception occurs.
• Bound management instructions: BNDLDX and BNDSTX
load BND registers from a table of object-speciﬁc ad-
dress bounds in memory. BNDMK and BNDMOV allow a
programmer to manually manage the BND registers.
• Bound check instructions: BNDCU and BNDCL are used
to check that a pointer meets the respective upper and
lower bound limits of a speciﬁc BND register.
If the
pointer falls outside of the bounds, then the instruction
throws an exception, saving the need for an instruction
to explicitly check the result of the comparison.
For the software part, the MPX requires the following
system software support:
• MPX-enabled Compiler: The compiler is responsible
for inserting bound checks before pointer dereferences.
Because bound information must be loaded in a limited
number of BND registers before it can be used to check
a pointer, the compiler must also load and spill bound-
s information between the BND registers and memory.
For now, Intel has added MPX support to GCC main
branch since version 5.0 for C/C++ and x86 targets
only.
• MPX Runtime: The MPX runtime library is linked a-
gainst program at compile-time. The library provides
an API that the application developer can use to con-
ﬁgure MPX hardware features, as well as functions to
help compiler generated code manage MPX registers.
461MPX Compiler
C Code
Binary
(cid:258)
; Load address from the
;     bound table to register
BNDLDX  BND0, [RAX+RBX]
...
(cid:258)
; Compare address with
;     with bound register
BNDCU  RAX, BND0
BNDCL   RAX, BND0
...
MPX Runtime
BND0
0x7ffffba0ac94 0x7ffffba0ac70
Bound Table 0
Bound Table 1
...
Bound Table N
Exception Handler
Figure 1: An example of how MPX works.
Bound 0
Bound 1
...
Bound 0
Bound 1
...
Bound 0
Bound 1
...
• Operating system: The OS, together with the compil-
er, needs to support the new MPX instructions. If a
bound check instruction fails, the OS must catch the
generated exception and signal the application.
We now give an example of how these MPX components
can be used to bound-check a small program. Consider a
program that declares and manipulates data in 5 arrays:
int A[10], B[20], C[30], D[40], E[50];
Anytime a pointer pointing into one of these arrays is deref-
erenced, the MPX compiler needs to insert bound-checks to
ensure that the pointer falls within one of these arrays. To
do this, the MPX compiler needs to determine which array
the pointer should be pointing into, load the upper and low-
er bounds of the array into a BND register and then insert
the appropriate BNDCU and BNDCL checks before the pointer
dereference to check it against the upper and lower bounds
of the array. For example as showed in Figure 1, if array A
is stored at addresses 0x7ffffba0ac70-0x7ffffba0ac94, the
MPX compiler must ﬁrst load the upper and lower bound
addresses 0x7ffffba0ac70 and 0x7ffffba0ac94 into one of
the bound registers (say BND0). This is done using the B-
NDLDX instruction, which loads the bound information from
the bound directory in memory to into the appropriate reg-
ister. Then the MPX compiler instruments bound checking
instructions to compare the pointer dereference with bound
values in BND0. If the dereference falls out of the bound, a
#BR exception will be generated by hardware and caught
by the exception handler in MPX runtime.
For a pointer into an array to be bound-checked, the
bounds for that array must be loaded into a BND register.
Since the arrays A, B, C, D and E are all located in diﬀerent
regions in memory, the MPX compiler must load the appro-
priate array bounds into a BND register whenever a pointer is
used to dereference a location in a diﬀerent array. Because
there are 5 arrays but only 4 BND registers, it is impossible
for the compiler to keep the bounds for all the arrays in a
BND register all the time. This results in many BNDLDX and
BNDSTX instructions being generated by the compiler to load
and spill the bounds information to and from memory.
The bound checking instructions (BNDCU and BNDCL) have
very low execution cost. However, the BNDSTX and BNDLDX
instructions have to access to the 2-layer structured bound
tables stored in the main memory, they are very slow com-
pared to bound checking instructions. To measure this cost,
we did an experiment comparing BNDCU with BNDSTX/BNDLDX
instructions. We randomly generate 1000 memory address-
es, and use an address lower than them all to perform 1000
times BNDCU instructions, and made sure there are not bound
violations. Then we use BNDSTX to store the ﬁrst 500 in-
structions into bound tables, and load them all back one
by one to a bound register BND0. The results of this ex-
periment show that the bound checking instruction, BND-
CU, has almost same execution time as a NOP instruction
(1000 instructions in 0.45ms), while the bound store+load
instructions BNDSTX/BNDLDX cost almost 1000× more than
NOP (1000 instructions in 432ms).
With real applications, the number of objects in the bound
table can become quite large. However, as the number of
BND registers is ﬁxed at 4 in the hardware architecture, this
causes heavy use of the BNDSTX and BNDLDX instructions,
resulting in high overhead. To see this in practice, we used a