stance, asking users to set middlebox permissions
for each domain they visit is not practical.
Designing a satisfactory interface atop mcTLS is a
project in and of itself, one we cannot begin to do justice
here.
mcTLS
(1) Custom Certiﬁcate
(2) Proxy Certiﬁcate Flag
(3) Session Key Out-of-Band
(4) Custom Browser
(5) Proxy Server Extension
•
◦
◦
◦
(• = full compliance; ◦ = partial compliance)
R1 R2 R3 R4 R5
•
•
◦
•
◦
•
•
•
◦
◦
Table 4: Design principle compliance for mcTLS and
competing proposals.
7. RELATED WORK
There has been a lot of recent interest, particularly
in industry, for including intermediaries in encrypted
sessions. First we describe ﬁve previous proposals for
doing so in the context of TLS; as shown in Table 4,
none of them meets all ﬁve of our requirements. Then
we discuss alternatives that replace TLS altogether.
(1) Custom Root Certiﬁcate Section 2.2 describes
a common technique in which network administrators
install a custom root certiﬁcate on the client.
Discussion: This technique does not meet any of our
requirements. First, the server, and in many cases the
client, is not aware of the existence of the middlebox
(R4) so it clearly cannot authenticate it (R1). Second,
the middlebox has full read and write access to all data
in the session (R5). Finally, since the client has no
control after the ﬁrst hop, there is no guarantee about
the secrecy, integrity, or authenticity of the data (R2,
R3) or the identity of the server (R1).
(2) “I’m a proxy” Certiﬁcate Flag A 2014 IETF
draft from Ericsson and AT&T proposes using the
X.509 Extended Key Usage extension to indicate that a
certiﬁcate belongs to a proxy [20]. Upon receiving such
a certiﬁcate during a TLS handshake, the user agent
would omit the domain name check (presumably with
user permission) and establish a TLS session with the
proxy, which would in turn open a connection with the
server. Based on user preferences, the user agent might
only accept proxy certiﬁcates for certain sessions.
Discussion: In this case, the client is made explicitly
aware of the presence of the middlebox, so it can au-
thenticate it (R1) and can control its use on a per con-
nection basis (R4). The client still cannot authenticate
the server and the server is unaware of the middlebox.
R2, R3, and R5 remain unaddressed.
(3) Pass Session Key Out-of-Band Another IETF
draft, this one from Google, assumes that the client
maintains a persistent TLS connection with the proxy
and multiplexes multiple sessions over that connection
(much how Google’s data compression proxy operates).
After establishing an end-to-end TLS connection with
the server (which the proxy blindly forwards), the client
passes the session key to the proxy before transmit-
210ting data on the new connection [28]. Again, the user
agent can selectively grant the proxy access on a per-
connection basis based on user preference.
Discussion: Compared with (1), this solution has the
additional beneﬁt that the client authenticates both the
middlebox and the server (R1) and knows that the ses-
sion is encrypted end-to-end (R2). R3, R4, and R5 are
still partially or completely unaddressed.
(4) Ship a Custom Browser A fourth option is to
modify the browser itself to accept certiﬁcates from cer-
tain trusted proxies. This is the approach Viasat is tak-
ing for its Exede satellite Internet customers [18], argu-
ing that caching and prefetching are critical on high-
latency links.
Discussion: This solution is essentially the same as (1),
so it also fails all requirements. In addition, it has the
drawback that a custom browser may not be updated
quickly, is expensive to develop and maintain, and may
be inconvenient to users.
(5) Proxy Server Extension The most promising
approach so far is Cisco’s TLS Proxy Server Exten-
sion [21]. The proxy receives a ClientHello from the
client, establishes a TLS connection with the server, and
includes the server’s certiﬁcate and information about
the ciphersuite negotiated for the proxy-server connec-
tion in a ProxyInfoExtension appended to the Server-
Hello it returns to the client. The client can then check
both the proxy’s and the server’s certiﬁcate.
Discussion: The client must completely trust the mid-
dlebox to provide honest information about the server
certiﬁcate and ciphersuite, so this solution only partially
fulﬁlls R1, R2, and R3. The proxy is not necessarily vis-
ible to the server, so only partial R4. Finally, the proxy
has read/write access to all data (R5).
Other Approaches
An alternative to TLS-based
techniques is an extension to IPsec that allows portions
of the payload to be encrypted/authenticated between
the two end-points of a security association and leaves
the remainder in the clear [16]. The authors target this
architecture for securely enabling intermediary-based
services for wireless mobile users. This solution leaves
data for middleboxes completely unencrypted (R2); R1
and R3 are also violated. Furthermore, this approach
does not allow explicit control of the data ﬂow to dif-
ferent entities (R4).
Tcpcrypt [6, 5] is an alternative proposal for estab-
lishing end-to-end encrypted sessions. Compared with
TLS, it reduces the overhead on the server, leaves au-
thentication to the application, can be embedded in
the TCP handshake, and uses a session ID to unam-
biguously identify the endpoints of a session. Similar
to TLS, tcpcrypt supports communication between two
endpoints only, but we believe that the concepts of en-
cryption contexts and contributory context keys could
be applied to it as well. However, because of mcTLS’s
increased handshake size, it may no longer be possible
to embed the entire handshake in the TCP handshake.
An alternative to a transport-layer protocol, like TLS
or mcTLS, is supporting trusted intermediaries at the
network layer. The Delegation-Oriented Architecture
(DOA) [34] and Named Data Networking (NDN) [15]
do this with their own security mechanisms and prop-
erties. We chose to modify TLS due to its widespread
use, making it the perfect vehicle for immediate exper-
imentation and incremental deployment.
8. CONCLUSION
The increasing use of TLS by Internet services pro-
vides privacy and security, but also leads to the loss
of capabilities that are typically provided by an invis-
ible army of middleboxes oﬀering security, compres-
sion, caching, or content/network resource optimiza-
tion. Finding an incrementally deployable solution that
can bring back these beneﬁts while maintaining the se-
curity expectations of clients, content providers, and
network operators is not easy. mcTLS does this by ex-
tending TLS, which already carries a signiﬁcant portion
of HTTP traﬃc. mcTLS focuses on transparency and
control: (1) trusted middleboxes are introduced at the
consent of both client and server, (2) on a per session ba-
sis, (3) with clear access rights (read/write), and (4) to
speciﬁc parts of the data stream.
We show that building such a protocol is not only
feasible but also introduces limited overhead in terms
of latency, load time, and data overhead. More im-
portantly, mcTLS can be incrementally deployed and
requires only minor modiﬁcations to client and server
software to support the majority of expected use cases.
By using mcTLS, secure communication sessions can
regain lost eﬃciencies with explicit consent from users
and content providers.
Acknowledgments
Many thanks to the reviewers for their comments and
to our shepherd, Sharon Goldberg, for going above and
beyond. This research was funded in part by NSF un-
der award number CNS-1345305, by DoD, Air Force Of-
ﬁce of Scientiﬁc Research, National Defense Science and
Engineering Graduate (NDSEG) Fellowship 32 CFR
168a, and by the European Union under the FP7 Grant
Agreement n. 318627 (Integrated Project “mPlane”).
9. REFERENCES
[1] http://mctls.org.
[2] Dashboards—android developers.
https://developer.android.com/about/
dashboards/index.html. Accessed: Dec. 2014.
[3] V. Agababov, M. Buettner, V. Chudnovsky, et al.
Flywheel: Google’s data compression proxy for
the mobile web. NSDI ’15, pages 367–380,
Oakland, CA, May 2015. USENIX Association.
[4] D. Beaver. HTTP2 Expression of Interest.
http://lists.w3.org/Archives/Public/ietf-http-wg/
2012JulSep/0251.html, 7 2012.
211[5] A. Bittau, D. Boneh, M. Hamburg, et al.
Cryptographic protection of tcp streams
(tcpcrypt), Feb. 2014.
[6] A. Bittau, M. Hamburg, M. Handley, D. Mazi`eres,
and D. Boneh. The case for ubiquitous
transport-level encryption. USENIX Security’10,
Berkeley, CA, USA, 2010. USENIX Association.
[7] I. Brown. End-to-end security in active networks.
In University College London PhD Thesis, 2001.
[8] D. Cameron. The internet and pornography:
Prime minister calls for action.
https://www.gov.uk/government/speeches/the-
internet-and-pornography-prime-
minister-calls-for-action. Accessed: Jan. 2015.
[9] S. Cheshire and M. Krochmal. DNS-Based Service
Discovery. RFC 6763 (Proposed Standard), Feb.
2013.
[10] S. Cheshire and M. Krochmal. Multicast DNS.
RFC 6762 (Proposed Standard), Feb. 2013.
[11] T. Dierks and E. Rescorla. The Transport Layer
Security (TLS) Protocol Version 1.2. RFC 5246
(Proposed Standard), Aug. 2008. Updated by
RFCs 5746, 5878, 6176.
[12] F. R. Dogar, P. Steenkiste, and K. Papagiannaki.
Catnap: exploiting high bandwidth wireless
interfaces to save energy for mobile devices.
MobiSys ’10, New York, NY, USA, 2010. ACM.
[13] J. Erman, A. Gerber, M. Hajiaghayi, et al. To
cache or not to cache: The 3g case. Internet
Computing, IEEE, 15(2):27–34, March 2011.
[14] M. Hoque, M. Siekkinen, and J. K. Nurminen. On
the energy eﬃciency of proxy-based traﬃc
shaping for mobile audio streaming. CCNC, pages
891–895. IEEE, 2011.
[15] V. Jacobson, D. K. Smetters, J. D. Thornton,
et al. Networking named content. CoNEXT ’09,
pages 1–12, New York, NY, USA, 2009. ACM.
[16] S. Kasera, S. Mizikovsky, G. S. Sundaram, and
T. Y. C. Woo. On securely enabling
intermediary-based services and performance
enhancements for wireless mobile users. In
Workshop on Wireless Security, 2003, 2003.
[17] A. Langley, N. Modadugu, and W.-T. Chang.
Overclocking SSL. https://www.imperialviolet.
org/2010/06/25/overclocking-ssl.html, 6 2010.
[18] P. Lepeska. Trusted proxy and the cost of bits.
http://www.ietf.org/proceedings/90/slides/
slides-90-httpbis-6.pdf, 7 2014.
[19] V. Liu, S. Han, A. Krishnamurthy, and
T. Anderson. An Internet Architecture Based on
the Principle of Least Privilege. Technical Report
UW-CSE-12-09-05, University of Washington,
Sept. 2012.
[20] S. Loreto, J. Mattsson, R. Skog, et al. Explicit
Trusted Proxy in HTTP/2.0. Internet-Draft
draft-loreto-httpbis-trusted-proxy20-01, IETF
Secretariat, Feb. 2014.
[21] D. McGrew, D. Wing, Y. Nir, and P. Gladstone.
TLS Proxy Server Extension. Internet-Draft
draft-mcgrew-tls-proxy-server-01, IETF
Secretariat, July 2012.
[22] A. Menezes and B. Ustaoglu. On reusing
ephemeral keys in diﬃe-hellman key agreement
protocols. International Journal of Applied
Cryptography, 2(2):154–158, 2010.
[23] J. C. Mogul and G. Minshall. Rethinking the tcp
nagle algorithm. SIGCOMM CCR, Jan. 2001.
[24] C. Muthukrishnan, V. Paxson, M. Allman, and
A. Akella. Using strongly typed networking to
architect for tussle. Hotnets-IX, pages 9:1–9:6,
New York, NY, USA, 2010. ACM.
[25] D. Naor, A. Shenhav, and A. Wool. Toward
securing untrusted storage without public-key
operations. StorageSS ’05, pages 51–56, New
York, NY, USA, 2005. ACM.
[26] D. Naylor, A. Finamore, I. Leontiadis, et al. The
Cost of the “S” in HTTPS. CoNEXT ’14, pages
133–140, New York, NY, USA, 2014. ACM.
[27] C. Nikolouzakis. Encrypted traﬃc grows 40% post
edward snowden nsa leak.
http://www.sinefa.com/blog/
encrypted-traﬃc-grows-post-edward-snowden-nsa-leak.
Accessed: Jan. 2015.
[28] R. Peon. Explicit Proxies for HTTP/2.0.
Internet-Draft draft-rpeon-httpbis-exproxy-00,
IETF Secretariat, June 2012.
[29] F. Qian, S. Sen, and O. Spatscheck.
Characterizing resource usage for mobile web
browsing. MobiSys ’14, pages 218–231, New York,
NY, USA, 2014. ACM.
[30] E. Rescorla. HTTP Over TLS. RFC 2818
(Informational), May 2000.
[31] J. H. Saltzer, D. P. Reed, and D. D. Clark.
End-to-end arguments in system design. ACM
Trans. Comput. Syst., 2(4):277–288, Nov. 1984.
[32] J. H. Saltzer and M. D. Schroeder. The protection
of information in computer systems. Proceedings
of the IEEE, 63(9):1278–1308, 1975.
[33] J. Sherry, S. Hasan, C. Scott, et al. Making
middleboxes someone else’s problem: Network
processing as a cloud service. SIGCOMM ’12,
pages 13–24, New York, NY, USA, 2012. ACM.
[34] M. Walﬁsh, J. Stribling, M. Krohn, et al.
Middleboxes no longer considered harmful.
OSDI’04, Berkeley, CA, USA, 2004. USENIX
Association.
[35] N. Weaver, C. Kreibich, M. Dam, and V. Paxson.
Here be web proxies. In Passive and Active
Measurement, pages 183–192. Springer, 2014.
[36] C. Wisniewski. Path and hipster iphone apps leak
sensitive data without notiﬁcation.
https://nakedsecurity.sophos.com/2012/02/08/
apple-mobile-apps-path-and-hipster-and-leak-sensitive-data-without-notiﬁcation/.
Accessed: May 2015.
[37] S. Woo, E. Jeong, S. Park, et al. Comparison of
caching strategies in modern cellular backhaul
networks. MobiSys ’13, pages 319–332, New York,
NY, USA, 2013. ACM.
[38] X. Xu, Y. Jiang, T. Flach, et al. Investigating
transparent web proxies in cellular networks.
PAM ’15.
212