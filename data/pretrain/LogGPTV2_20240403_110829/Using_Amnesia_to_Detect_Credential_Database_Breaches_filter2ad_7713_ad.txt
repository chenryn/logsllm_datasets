protocol, which will be detailed in Sec. 6. Here we leverage
those properties to argue the security of our design.
No breach detected by unbreached target: If the target
R has not been breached, then the PCR protocol will en-
sure that S must know h for it to generate a Z for which
pcrRevealsk(h,Z) returns true at R. Assuming S cannot guess
a h ∈ DBa .auths without guessing a password π such that
h = f (s, π) and that (ignoring collisions in f ) guessing such
a π is infeasible (see (2)), generating such a Z is infeasible
for S unless the user provides such a π to S herself. Since
the only such π she knows is the one she chose during pass-
word registration at R, π is the user-chosen password at a.
And, since R has not been breached, the hash of π will still
be marked there. As such, R will not detect its own breach.
No risk to security of account at unbreached target: If
the target R has not been breached, then the PCR request
Y reveals nothing about DBa .auths (except its size) to S .
As such, sending a monitoring request poses no risk to the
target’s account.
No risk to security of account at uncompromised monitor:
We now consider the security of the password π for account
a at the monitor S (if this account exists at S ). First recall
846    30th USENIX Security Symposium
USENIX Association
that S generates PCR responses only for incorrect passwords
attempted in local login attempts for account a; the correct
password at S will not be used to generate a response. More-
over, S could even refuse to generate responses for passwords
very close to the correct password for a, e.g., the correct pass-
word with typos [7]. Second, the PCR protocol ensures that
the target R learns nothing about the attempted (and again,
incorrect) password π if S is not compromised, unless R in-
cluded h = f (s, π) in the set from which it generated its PCR
query Y. In this case, pcrRevealsk(h,Z) returns true but, again,
R already guessed it.
Detection of the target’s breach: We now consider the abil-
ity of R to detect its own breach by monitoring an account a
at an uncompromised monitor S , which is the most nuanced
aspect of our protocol’s security. Speciﬁcally, an attacker who
can both repeatedly breach R and simultaneously submit login
attempts at an uncompromised S poses the following chal-
lenge: Because this attacker can see what hashes for a are
presently marked at R, it can be sure to submit to S a pass-
word for one of the marked hashes at R, so that the induced
PCR response Z will not cause R to detect its own breach.
Moreover, if the user reused her password at both R and S ,
then the attacker will know when it submits this password to
S , since S will accept the login attempt.
As such, for R to detect its own breach in these (admittedly
extreme) circumstances, the attacker must be unable to submit
enough stolen passwords for a to S to submit the user-chosen
one with high probability, in the time during which it can
repeatedly breach R and before the next legitimate login to a at
R or S . To slow the attacker somewhat, R can reduce pmark and
premark to limit the pace of remarkings and, when remarkings
occur, the number of hashes that are marked (which are the
ones that the attacker can then submit to S ).
Two other defenses will likely be necessary, however. First,
R can greatly increase the attacker’s workload by increasing
the number of honeywords per account, say to the thousands
or tens of thousands (cf., [28]). Second, since honeywords
from R submitted to S will be incorrect for the account a at S ,
online guessing defenses (account lockout or rate limiting) at
S can (and should) be used to slow the attacker’s submissions
at S . In particular, NIST recommends that a site “limit consec-
utive failed authentication attempts on a single account to no
more than 100” [19, Section 5.2.2], in which case an attacker
would be able to eliminate, say, at most 2% of the honeywords
for an account with 5000 honeywords stolen from R by sub-
mitting them in login attempts at S . Our design shares the
need for these defenses with most other methods for using
decoy passwords [5, 14, 25, 28, 48]. In particular, if the user
reused her password at other sites that permit the attacker to
submit passwords stolen from the target without limitation,
then the attacker discovering the user’s reuse of that pass-
word is simply a matter of time, after which the attacker can
undetectably take over the account.
5.5 Alternative Designs
The algorithm presented above is the result of numerous iter-
ations, in which we considered and discarded other algorithm
variants for remote detection of stuﬀed honeywords. Here we
brieﬂy describe several variants and why we rejected them.
• The target could exclude the known (entered at pass-
word reset) or likely (entered in a successful login) user-
chosen password π from the monitor request, i.e., Y ←
pcrQueryGenpk(DBa .auths\{ f (s, π)}). In this case, any
“non-empty” PCR response Z (i.e., pcrRevealsk(h,Z) re-
turns true for some h∈ DBa .auths) would indicate a breach.
However, combining the data breached at the target with
Y at a malicious monitor would reveal the password not
included in Y as the likely user-chosen one.
• Since a monitor returns a PCR response only for an incor-
rect password attempted locally, the target could plausibly
treat any non-empty PCR response as indicating its breach.
That is, if the user reused her password, it would not be
used to generate a response anyway, and so the response
would seemingly have to represent a honeyword attempt.
However, if the user did not reuse her target password at
the monitor, then her mistakenly entering it at the monitor
would cause the target to falsely detect its own breach.
• The monitor could return a PCR response for any login
attempt, correct or not, potentially hastening the target de-
tecting its own breach. However, a PCR request would then
present an opportunity for a malicious target to guess k + 1
passwords for the account at the monitor, and be informed
if the user enters one there.
• Any two PCR responses for which pcrRevealsk returns true
with distinct h,h(cid:48) ∈ DBa .auths is a reliable breach indicator;
one must represent a honeyword. This suggests processing
responses in batches, batched either at the monitor or target.
However, ensuring that the attacker cannot artiﬁcially “ﬁll”
batches with repeated password attempts can be complex;
batching can delay detection; and batching risks disclosure
of a user-chosen password if one might be included in a
response and responses are saved in persistent storage (to
implement batching).
6 Private Containment Retrieval
Recall that in the algorithm of Sec. 5, upon receiving a moni-
toring request for an account a from a target, a monitor stores
the request locally and uses it to generate a PCR response
per failed login attempt to a. Since a response is generated
per failed login attempt, it is essential that pcrRespGen be
eﬃcient and that the response Z be small. Moreover, con-
sidering that a database breach is an uncommon event for a
site, we expect that most of the time, the response would be
generated using a password that is not in the set used by the
target to generate the monitoring request. (Indeed, barring a
database breach at the target, this should never happen unless
USENIX Association
30th USENIX Security Symposium    847
the user enters at the monitor her password for her account at
the target.) So, in designing a PCR, we place a premium on
ensuring that pcrReveal is very eﬃcient in this case.
tools (e.g., partially homomorphic encryption, cuckoo ﬁlters)
utilized in other protocols (e.g., [47]), ours does so in a novel
way and with an eye toward our speciﬁc goals here.
6.1 Comparison to Related Protocols
Since the monitor’s input to pcrRespGen is a singleton set
(i.e., a hash), a natural way to achieve the functionality of a
private containment retrieval is to leverage existing private
set intersection (PSI) protocols, especially unbalanced PSIs
that are designed for the use case where two parties have sets
of signiﬁcantly diﬀerent sizes [8, 26, 27, 39, 42]. Among these
protocols, those based on oblivious pseudo-random functions
(OPRFs) [26, 27, 39, 42] require both parties to obliviously
agree on a privacy-preserving but deterministic way of rep-
resenting their input sets so at least one party can compare
and output elements in the intersection, if any. To achieve
this, both parties participate in at least one round of interac-
tion (each of at least two messages) during an online phase,
and so would require more interaction in our context than our
framework as deﬁned in Sec. 5. Chen et al. [8] proposed a PSI
protocol with reduced communication, but at the expense of
leveraging fully homomorphic encryption. And, interestingly,
these unbalanced PSI protocols, as well as private member-
ship tests (e.g., [34, 38, 46, 47]), are all designed for the case
where the target has the smaller set and the monitor has the
larger one, which is the opposite of our use case.
Among other PSI protocols that require no more than one
round of interaction, that of Davidson and Cid [12] almost
meets the requirements of our framework on the monitor side:
its monitor’s computation complexity and response message
size are manageable and, more importantly, constant in the
target’s set size. However, in their design, the query message
size depends on the false-positive probability (of the contain-
ment test) due to their use of Bloom ﬁlters and bit-by-bit
encryption, while ours is also constant in the false-positive
probability. If applied in our context, their design would gen-
erate a signiﬁcantly larger query and so signiﬁcantly greater
storage overhead at the monitor than ours, especially when a
relatively low false-positive probability is enforced. For ex-
ample, to achieve a 2−96 false-positive probability, their query
message would include ≈ 131× more ciphertexts than ours.
Our PCR protocol, on the other hand, is designed specif-
ically for the needs of our framework, where the target has
a relatively large set and the monitor’s set is smaller (in fact,
of size 1) that keeps changing over time. Our protocol re-
quires only one message from the monitor to the target. In
addition, the response message computation time and output
size is constant in the target’s set size. We also constructed
our algorithm so that determining that pcrRevealsk(h,Z) is
false for all h ∈ DBa .auths, which should be the common
case, costs much less time than ﬁnding the h ∈ DBa .auths for
which pcrRevealsk(h,Z) is true. We demonstrate these prop-
erties empirically in Sec. 6.5. While our protocol leverages
6.2 Building Blocks
Partially homomorphic encryption: Our protocol builds on
a partially homomorphic encryption scheme E consisting of
algorithms Gen, Enc, isEq, and +[·].
• Gen is a randomized algorithm that on input 1κ outputs a
public-key/private-key pair (cid:104)pk,sk(cid:105) ← Gen(1κ). The value
of pk determines a prime r for which the plaintext space
for encrypting with pk is the ﬁnite ﬁeld (cid:104)Zr, +,×(cid:105) where
+ and × are addition and multiplication modulo r, respec-
tively. For clarity below, we denote the additive identity
by 0, the multiplicative identity by 1, and the additive in-
verse of m ∈ Zr by −m. The value of pk also determines a
m Cpk(m), where Cpk(m) denotes
ciphertext space Cpk =(cid:83)
the ciphertexts for plaintext m.
• Enc is a randomized algorithm that on input public key
pk and a plaintext m, outputs a ciphertext c ← Encpk(m)
chosen uniformly at random from Cpk(m).
• isEq is a deterministic algorithm that on input a private key
sk, plaintext m, and ciphertext c ∈ Cpk, outputs a Boolean
z ← isEqsk(m,c) where z = true iﬀ c ∈ Cpk(m).
• +[·] is a randomized algorithm that, on input a public key
pk and ciphertexts c1 ∈ Cpk(m1) and c2 ∈ Cpk(m2), outputs a
ciphertext c ← c1 +pk c2 chosen uniformly at random from
Cpk(m1 + m2).
Note that our protocol does not require an eﬃcient decryption
capability. Nor does the encryption scheme on which we base
our empirical evaluation in Sec. 6.5, namely “exponential
ElGamal” (e.g., [10]), support one. It does, however, support
an eﬃcient isEq calculation.
Given this functionality, it will be convenient to deﬁne a few
d= (cid:153)(cid:48)”
additional operators involving ciphertexts. Below, “(cid:153)
denotes that random variables (cid:153) and (cid:153)(cid:48) are distributed iden-
tically; “Z ∈ (X)α×α(cid:48)
” means that Z is an α-row, α(cid:48)-column
matrix of elements in the set X; and “(Z)i, j” denotes the row-i,
• (cid:80)
column- j element of the matrix Z.
pk denotes summing a sequence using +pk, i.e.,
ck
d= c1 +pk c2 +pk . . . +pk cz
and C(cid:48) ∈ (Cpk)α×α(cid:48)
, then C +pk C(cid:48) ∈
is the result of component-wise addition using
pk
k=1
z(cid:80)
• If C ∈ (Cpk)α×α(cid:48)
(Cpk)α×α(cid:48)
+pk, i.e., so that(cid:16)
• If M∈ (Zr)α×α(cid:48)
C +pk C(cid:48)(cid:17)
(cid:0)C(cid:48)(cid:1)
i, j
d= (C)i, j +pk
i, j
, then M◦pk C∈ (Cpk)α×α(cid:48)
is the result of Hadamard (i.e., component-wise) “scalar
and C∈ (Cpk)α×α(cid:48)
848    30th USENIX Security Symposium
USENIX Association
(cid:17)
M◦pk C
multiplication” using repeated application of +pk, i.e., so
that
(M)i, j(cid:80)
and C ∈ (Cpk)α(cid:48)×α(cid:48)(cid:48)
(cid:16)
(C)i, j
, then M ∗pk C ∈
• If M ∈ (Zr)α×α(cid:48)
(Cpk)α×α(cid:48)(cid:48)
is the result of standard matrix multiplication
using +pk and “scalar multiplication” using repeated appli-
cation of +pk, i.e., so that
k=1
d=
i, j
pk
(cid:16)
M∗pk C
(cid:17)
d=
i, j
α(cid:48)(cid:80)
pk
k=1
(M)i,k(cid:80)
pk
k(cid:48)=1
(C)k, j
Cuckoo ﬁlters: A cuckoo ﬁlter [16] is a set representation that
supports insertion and deletion of elements, as well as testing
membership. The cuckoo ﬁlter uses a “ﬁngerprint” function
fp :{0,1}∗ → F and a hash function hash :{0,1}∗ → [β], where
for an integer z, the notation “[z]” denotes {1, . . . ,z}, and where
β is a number of “buckets”. We require that F ⊆ Zr\{0} for any
r determined by (cid:104)pk,sk(cid:105) ← Gen(1κ). For an integer bucket
“capacity” χ, the cuckoo ﬁlter data structure is a β-row, χ-
column matrix X of elements in Zr, i.e., X ∈ (Zr)β×χ. Then,
?∈ X returns true if and only if there
the membership test e
exists j ∈ [χ] such that either
(X)hash(e), j = fp(e)
(X)hash(e)⊕hash(fp(e)), j = fp(e)
or
(4)
(5)
Cuckoo ﬁlters permit false positives (membership tests that
return true for elements not previously added or already re-