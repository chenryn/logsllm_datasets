title:A Byzantine Fault-Tolerant Ordering Service for the Hyperledger Fabric
Blockchain Platform
author:João Sousa and
Alysson Bessani and
Marko Vukolic
2018 48th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
A Byzantine Fault-Tolerant Ordering Service for
the Hyperledger Fabric Blockchain Platform
Jo˜ao Sousa and Alysson Bessani
Marko Vukoli´c
LASIGE, Faculdade de Ciˆencias, Universidade de Lisboa, Portugal
IBM Research Zurich, Switzerland
Abstract—Hyperledger Fabric is a ﬂexible operating system for
permissioned blockchains designed for business applications be-
yond the basic digital coin addressed by Bitcoin and other existing
networks. A key property of this system is its extensibility, and in
particular the support for multiple ordering services for building
the blockchain. However, version 1 was launched in 2017 without
an implementation of a Byzantine fault-tolerant (BFT) ordering
service. To overcome this limitation, we designed, implemented,
and evaluated a BFT ordering service for this system on top
of the BFT-SMART state machine replication/consensus library,
with optimizations for wide-area deployment. Our results show
that our ordering service can process up to ten thousand
transactions per second and write a transaction irrevocably in
the blockchain in half a second, even with peers spread across
different continents.
I. INTRODUCTION
The impressive growth of Bitcoin and other blockchain
platforms based on the Proof-of-Work (PoW) technique made
evident the limitations of this approach. These limitations are
mostly related to performance: existing systems are capable
of processing from 7 (Bitcoin) to 10s-100s transactions per
second and present transaction conﬁrmation latencies of up
to one hour [1]. Several alternative blockchain platforms
proposed in the last years try to avoid these limitations by
employing traditional Byzantine Fault-Tolerant (BFT) consen-
sus protocols (e.g., [2]) for establishing consensus on the order
of blocks [3].
Hyperledger Fabric (or simply, Fabric) is a system for
deploying and operating permissioned blockchains that targets
business applications [4]. It is built with ﬂexibility and gen-
erality as key design concerns, supporting thus a wide variety
of non-deterministic smart contracts (here called chaincodes)
and pluggable services. The support for pluggable components
gives Fabric an unprecedented level of extensibility and, in
particular, enables it to use multiple ordering services for
managing the blockchain. Despite this, version 1.0 (launched
in June 2017) comes without any Byzantine fault-tolerant
(BFT) ordering service implementation, providing only a crash
fault-tolerant ordering service.
In this paper, we describe our efforts in overcoming this
limitation, by presenting the design,
implementation, and
evaluation of a new BFT ordering service for Fabric v1.1
This service is based on the well-know BFT-SMART state
machine replication/consensus library [5], and its extension
for WANs [6]. Our evaluation, conducted both on a local
1Source code available at https://github.com/jcs47/hyperledger-bftsmart.
2158-3927/18/$31.00 Â©2018 IEEE
DOI 10.1109/DSN.2018.00018
51
cluster and in a geo-distributed setting, shows that BFT-
SMART ordering service can achieve up to 10k representative
transactions per second and write a transaction irrevocably in
the blockchain in half a second, even with ordering nodes
spread through different continents.
Besides presenting our BFT ordering service, this paper
also discusses the key concerns that need to be addressed
to apply existing BFT state machine replication protocols
to blockchain platforms and systems like Fabric. The huge
interest of industry in permissioned blockchains has reinvig-
orate BFT research (e.g., [7]), and spawned many efforts
to integrate (new or existing) BFT protocols in blockchain
platforms (see [3] for a survey). Nonetheless, to the best of our
knowledge, there are still no other works discussing a practical
integration of a classical state machine replication library with
a blockchain platform. In particular, we detail the service
model and workload of interest in this kind of systems, which
are substantially different from the microbenchmarks [2] and
the Zookeeper-like client-server model [8] still used to evaluate
BFT protocols.
The rest of this paper is organized as follows. We start by
presenting the fundamentals of blockchain technology (Section
II) and Hyperdeger Fabric (Section III). After that, the BFT-
SMART and WHEAT protocols are brieﬂy described (Section
IV), and we proceed to present the BFT-SMART ordering
service (Section V) and its experimental evaluation (Section
VI). We propose some improvements to Fabric in Section VII,
discuss some related work in Sections VIII and conclude the
paper in Section IX.
II. BLOCKCHAIN TECHNOLOGY
A blockchain is an open database that maintains a dis-
tributed ledger typically deployed within a peer-to-peer net-
work. It is comprised by a continuously growing list of records
called blocks that contain transactions [9]. Blocks are protected
from tampering by cryptographic hashes and a consensus
mechanism.
The structure of a blockchain – illustrated in Figure 1 –
consists of a sequence of blocks in which each one contains
the cryptographic hash of the previous block in the chain. This
introduces the property that block j cannot be forged without
also forging all subsequent blocks j + 1...i. Furthermore, the
consensus mechanism is used to (1) prevent the whole chain
from being modiﬁed; and to (2) decide which block is to be
appended to the ledger.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:27:14 UTC from IEEE Xplore.  Restrictions apply. 




















Fig. 1: Blockchain structure.
The blockchain may abide by either the permissionless or
permissioned models [1]. Permissionless ledgers are main-
tained across peer-to-peer networks in a totally decentralized
and anonymous manner [9], [10]. In order to determine which
block to append to the ledger next, peers need to execute a
Proof-of-Work (PoW) consensus [11]. The key idea behind
PoW consensus is to limit the rate of new blocks by solving
a cryptographic puzzle, i.e., execute a CPU intensive compu-
tation that takes time to solve, but can be veriﬁed quickly.
This is achieved by forcing peers to ﬁnd a nonce N such that
given their block B and a limit L, the cryptographic hash of
B||N is lower than L [12], [13]. The ﬁrst peer that presents
such solution gets its block appended to the ledger. Roughly
speaking, as long as the adversary controls less than half of the
total computing power present in the network, PoW consensus
prevents the adversary from creating new blocks faster than
honest participants.
Permissionless blockchains have the beneﬁt of enabling the
ledger to be managed in a completely open way, i.e., any peer
willing to hold a copy of the ledger can try to create new
blocks for it. On the other hand, the computational effort asso-
ciated to PoW consensus is both energy- and time-consuming;
even if specialized hardware is used to ﬁnd a Proof-of-Work,
this mechanism still imposes a limit on transaction latency.
By contrast, permissioned blockchains employ a closed
consortium of nodes tasked with creating new blocks and
executing a traditional Byzantine consensus protocol to decide
the order by which the blocks are inserted to the ledger [3],
[14], [15]. Hence, permissioned blockchains do not expend the
amount of resources that open blockchains do and are able to
reach better transaction latency and throughput. In addition, it
makes possible to control the set of participants tasked with
maintaining the ledger – rendering this type of blockchain a
more attractive solution for larger corporations, since it can be
separated from the dark web or illegal activities.
III. HYPERLEDGER FABRIC
Hyperledger Fabric (Fabric) [4] is an open-source project
within the Hyperledger collaborative effort.2 It is a modular
permissioned blockchain system designed to support pluggable
implementations of different components, such as the ordering
and membership services. Fabric enables clients to manage
transactions by using chaincodes, endorsing peers and an
ordering service.
2https://www.hyperledger.org/
Chaincode is Fabric’s counterpart for smart contracts [16].
It consists of code deployed on the Fabric’s network, where
it
is executed and validated by the endorsing peers, who
maintain the ledger, the state of a database (modeled as a
versioned key/value store), and abide by endorsement policies.
The ordering service is responsible for creating blocks for the
distributed ledger, as well as the order by which each blocks
is appended to the ledger.
a) Fabric protocol: The Fabric general transaction pro-
cessing protocol [4] – depicted in Figure 2 – works as follows:
1) Clients create a transaction and send it to endorsing
peers. This message is a signed request to invoke a
chaincode function. It must include the chaincode ID,
timestamp and the transaction’s payload.
2) Endorsing peers simulate transactions and produce an
endorsement signature. They must verify if the client
is properly authorized to perform the transaction by
evaluating access control policies of a chaincode. Trans-
actions are then executed against the current state. Peers
transmit to the client the result of this execution (read
and write sets associated to their current state) alongside
the endorsing peer’s signature. No updates are made to
the ledger at this point.
3) Clients collect and assemble endorsements into a trans-
action. The client veriﬁes the endorsing peers signatures,
determine if the responses have the matching read/write
set and checks if the endorsement policies has been
fulﬁlled. If these conditions are met,
the client cre-
ates a signed envelope with the peers’ read and write
sets, signatures and the Channel ID. A channel is a
private blockchain on a Fabric network, providing data
partition. Each peers of the channel share a channel-
speciﬁc ledger. The aforementioned envelope represents
a transaction proposal.
4) Clients broadcast the transaction proposal to the or-
dering service. The ordering service does not read the
contents of the envelope; it only gathers envelopes from
all channels in the network, orders them using atomic
broadcast, and creates signed chain blocks containing
these envelopes.
5) The blocks of envelopes are delivered to the peers on
the channel. The envelopes within the block are again
validated to (1) ensure the endorsement policies were
fulﬁlled, and (2) to check if there were changes to the
peers’ state for read set variables (since the read set was
generated by the transaction execution). To this end, the
read set contains a set of versioned keys that endorsing
peers read at the time of simulating a transaction (step
2). Depending on the success of these validations, the
transaction proposal contained in envelopes are marked
as either being valid or invalid.
6) Peers append the received block to the channel’s
blockchain. For each valid transaction, the write sets
are committed to the peers’ current state. An event is
triggered to notify the client that the transaction has
been immutably appended to the channel’s blockchain,
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:27:14 UTC from IEEE Xplore.  Restrictions apply. 
52


)*

#)%&
)

 )*
+
!)"
$)&
Fig. 2: Hyperledger Fabric transaction processing protocol [4].
as well as notiﬁcation of whether the transaction were
deemed valid or invalid. Notice that invalid transactions
are also added to the ledger, but they are not executed at
the peers. This also has the added beneﬁt of making it
possible to identify malicious clients, since their actions
are also recorded.
An important aspect of the Fabric protocol is that endorse-
ment (step 2) and validation (step 5) can be done at different
peers. Furthermore, contrary to the chaincode execution during
endorsement, the validation code needs to be deterministic,
i.e., the same transaction validated by different peers in the
same state produces the same output [4].
b) Pluggable consensus: As mentioned before, Fabric is
a modular blockchain system. In particular, one of the com-
ponents that support plug-and-play capability is the ordering
service. Currently, Fabric’s codebase includes the following
ordering service modules: (1) a centralized, non-replicated
ordering service that does not execute any distributed protocol
that is used mostly for testing the system; and (2) a repli-
cated ordering service capable of withstanding crash faults,
consisting of an Apache Kafka cluster3 and its respective
ZooKeeper ensemble [8]. At the time of this writing, both
modules have limitations. The non-replicated module requires
very few hardware resources, but it is also a single point of
failure. The Kafka-based module is both decentralized and
robust, but can only withstand crash faults.
IV. BFT-SMART & WHEAT
The ordering service presented in this paper was designed
on top of existing BFT systems, namely BFT-SMART [5] and
WHEAT [6]. In this section we present a brief description of
these works.
BFT-SMART implements a modular state machine replica-
tion protocol on top of a Byzantine consensus algorithm [17].
Under favourable network conditions and the absence of faulty
replicas, BFT-SMART executes the message pattern depicted
in Figure 3, which is similar to the PBFT protocol [2].
Clients send their requests to all replicas, triggering the
execution of the consensus protocol. Each consensus instance
i begins with one replica – the leader – proposing a batch of
requests to be decided within that consensus. This is done by
sending a PROPOSE message containing the aforementioned
batch to the other replicas. All replicas that receive the
3https://kafka.apache.org/
2
2
PROPOSE message verify if its sender is the leader and if the
batch proposed is valid. If this is the case, they register the
batch being proposed and send a WRITE message to all other
replicas containing a cryptographic hash of the proposed batch.
(cid:3) WRITE messages with the same
If a replica receives (cid:2) n+f +1
hash, it sends an ACCEPT message to all other replicas con-
(cid:3) ACCEPT
taining this hash. If some replica receives (cid:2) n+f +1
messages for the same hash, it deliver its correspondent batch
as the decision for its respective consensus instance.
The message pattern just described is executed if the leader
is correct and the system is synchronous. If these conditions
do not hold, the protocol needs to elect a new leader and force
all replicas to converge to the same consensus execution. This
procedure is described in detail in [17].
Our ordering service also employs WHEAT, a variant of
BFT-SMART optimized for geo-replicated environments. It
differs from the aforementioned protocol in the following way:
it employs the tentative executions proposed by Castro and
Liskov [2] and uses a vote assignment scheme for efﬁcient
quorum usage [6]. The vote assignment scheme integrates
classical ideas from weighted replication [18] to state machine
replication protocols. The idea is to build small quorums with
fastest replicas without endangering the safety and liveness of
the underlying consensus protocol. This mechanism improves
latency by allowing more choice: if there is a spare replica
in the system that is faster than the rest, the optimal quorum
will contain this replica. It works by being given parameters f
(number of assumed faults) and Δ (amount of extra replicas),
then based on this input, compute values Vmax and u. Vmax
is the weight value to be given to the u fastest replicas in the
system. All other n − u replicas are given value Vmin. For
instance, when using ﬁve replicas (f = 1 and Δ = 1), two
of them will have weight Vmax = 2 and the remaining three
will have Vmin = 1.
V. BFT-SMART ORDERING SERVICE
The BFT-SMaRt module for Fabric’s ordering service con-
sists of an ordering cluster and a set of frontends. The ordering
cluster is composed by a set of 3f + 1 nodes that collect
envelopes from the frontends and execute the BFT-SMART’s
replication protocol with the purpose of totally ordering these
envelopes among them. Once a node gathers a predetermined
number of envelopes, it creates a new block containing these
envelopes and a hash of the previously created block, generates
a digital signature for the block, and disseminates it to all
53
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:27:14 UTC from IEEE Xplore.  Restrictions apply. 



%









