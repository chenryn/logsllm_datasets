may have warned you, there are some risks inherent in
such a choice – and no cryptographic protocol, no matter
how secure, can protect you from them. If you choose de-
liberately to communicate with a malicious adversary, that
adversary can post your private messages onto a billboard
somewhere. What we can do, and what we attempt to do
in this paper, is ensure that when you choose to establish a
connection to a previously unknown device, you are actu-
ally communicating, securely and authentically, with that
device, and not an attacker in the next room.
3. Two-Party Protocols
In this section, we show concretely how to use pre-
authentication to securely authenticate devices. First, we
describe how to use this approach to authenticate almost
any public-key-based key exchange protocol. This allows
existing protocols (e.g., SSL/TLS, IKE) to be used securely
and easily in an ad-hoc setting. Second, because a signif-
icant number of devices in ad-hoc networks may not have
the resources for doing public key operations, we also offer
two cheaper alternatives. The ﬁrst is a variant of our basic
scheme, and requires only one of the parties to have public
key. The second, which provides only integrity protection
instead of secrecy, uses digests of pre-committed secrets to
replace public keys.
3.1. Basic Protocol
In the most basic of our pre-authentication schemes,
parties exchange commitment to their public keys over a
location-limited channel. The information that is actually
exchanged can be the public keys themselves, their certiﬁ-
cates, or simply secure digests of the keys using crypto-
graphic hash functions. The only requirement is that the
information exchanged allows the receiver to verify the au-
thenticity of the key that is used in the authentication pro-
tocol.
In Figure 2, parties exchange digests of their public keys
in the pre-authentication phase. For convenience, each de-
vice can also transmit its address in wireless space (e.g., a
IP address and port number, or a Bluetooth device address)
and a user-friendly name. We note, however, that the secu-
rity of our scheme does not rely on the correctness of these
additional data. (If you get a wrong IP address, for exam-
ple, the party on the other end will not have the right private
key, and will not be able to complete an authentication pro-
tocol with you.)
Once the pre-authentication is completed, the devices
proceed to establish a secure connection between them over
the main wireless link. To this end, they can use any estab-
lished public-key-based key exchange protocol which re-
quires them to prove possession of a particular private key
(e.g., SSL/TLS [4], SKEME [14] IKE [6], etc.), which in
this case will correspond to the public key committed to in
the pre-authentication step.
The choice of key exchange protocol may inﬂuence the
exact form of the pre-authentication data exchanged, and in
particular whether parties exchange their complete public
keys or merely commitments to them. If the key exchange
protocol used on the wireless link explicitly sends public
keys or certiﬁcates, only commitments to those public keys
need to be exchanged in pre-authentication. If instead it
expects parties to already have each other’s public keys,
















Pre-authentication, taking place over the location limited channel:
1
2
A
B
B : addrA
A : addrB
h
h
PKA
SB
Authentication continues over the wireless channel, e.g.:
1
2
A
B
...and so on.
B : PKA
SB
A : EPKA
Symbols as above, with the following additions:
h
EPKA
SB :
:
SB
:
SB
a secret belonging to B
a commitment to SB, e.g., a one-way hash of the secret
the encryption of SB under PKA
Figure 3. Basic pre-authentication scheme modiﬁed to require only one public key.
then the keys themselves should be exchanged during pre-
authentication.
(If the location-limited channel does not
have sufﬁcient capacity, we can still send the commitments
during pre-authentication, and prepend the keys themselves
to the wireless exchange.)
Note that a party that does not receive pre-authentication
data cannot authenticate its communication partner, and is
therefore unprotected against impersonation. Thus, in most
cases pre-authentication must be mutual – both parties must
send and receive pre-authentication data (as in Figure 2).
There are some applications for which mutual authen-
tication is not required. For instance, a device designed to
provide a service to anyone that requests it does not need to
authenticate its partner, and therefore would be the only one
to send pre-authentication data. At the extreme, such a de-
vice could be a passive beacon (e.g., an IR beacon or RFId
tag), sending pre-authentication data sufﬁcient to uniquely
and securely identify its active proxy in wireless space.
Such an approach could be used to add a measure of se-
curity and authentication to systems that use such beacons
to provide a “digital presence” for physical objects [13].
Finally, this scheme is applicable to use either long-lived
or ephemeral keys2. The choice is based entirely on the
application at hand. In either case, the keys do not require
certiﬁcation by any trusted authority. If the key exchange
protocol chosen requires the exchange of certiﬁcates, they
can be self-signed.
3.2. Single Public Key Protocol
The basic scheme we proposed in Section 3.1 works
if both devices are able to execute public key operations.
2Unlike long-lived keys, which are repetitively used across a number
of key exchanges, ephemeral keys are made up afresh for each new trans-
action. They offer the advantage of anonymity because transactions using
different keys cannot be linked together.
When only one of the devices has resources for expensive
public key operations, we propose a less computationally
expensive variant (Figure 3).
In Figure 3 only A has a public key PKA; B has an arbi-
trary secret SB instead (e.g., a random number). As in the
basic scheme, A sends a commitment to his public key dur-
ing pre-authentication. As before, the commitment can be
the public key itself, a certiﬁcate, or a digest of the key. B
responds with a commitment to his secret, SB, in the form
(as SB is to remain secret, it cannot be sent
of a digest h
in the clear and must be sent in digest form).
SB
Once the pre-authentication is complete, they proceed
with authentication. Party A sends its public key across the
wireless channel. Party B veriﬁes it against the commit-
ment, and then uses it to encrypt SB (and optionally other
information used to construct a symmetric key) and returns
the result to A. Such a protocol authenticates B by its abil-
ity to produce the secret SB, and A by requiring it to prove
its ability to decrypt that secret.
This scheme assumes that PKA uses an algorithm for
which encryption is computationally cheap (e.g., RSA), so
that the computational requirements on B are minimized.
A protocol like SKEME [14] that authenticates participants
by requiring them to prove their ability to decrypt a mes-
sage would also be particularly amenable for use here.
3.3. Interactive Guy Fawkes Protocol
In cases where the devices involved are extremely limited
in computational resources (public key operations are in-
feasible), and the available location-limited channels do not
permit trusted exchange of secret data, we propose a new
scheme for constructing a channel that provides authenti-
cation and integrity protection (though not encryption) of
communication based entirely on cryptographic hash func-




















Pre-authentication, taking place over the location-limited channel:
Round 0:
A
B
A
B
1
2
3
4
B : a1
A : b1
B : h
A : h
b1
a1
A1
B1
h
h
X1
Y1
h
h
X2

Y2
	
X1
	
Y1

h
h
X1
Y1
Authentication continues over the wireless channel:
Round 1:
A
B
A
B
1
2
3
4
Round 2:
A
B
A
B
5
6
7
8
Round 3:
A
B
A
B
9
10
11
12
Round 4:
A
B
A
B
9
10
11
12
B : A1
A : B1
B : h
A : h
h
h
b2
a2
X2
	
Y2
	
X2
Y2
B : A2
A : B2
B : h
A : h
h
h
b3
a3
X3
	
Y3
	
X3
Y3
B : A3
A : B3
B : h
A : h
h
h
b4
a4
X4
	
Y4
	
X4
Y4
B : A4
A : B4
B : h
A : h
h
h
b5
a5
X5
	
Y5
	
X5
Y5
X1
Y1
a2
b2
h
h
A2
B2
h
h
X2
Y2
a3
b3
h
h
A3
B3
h
h
X3
Y3
a4
b4
h
h
A4
B4
h
h
X4
Y4
a5
b5
h
h
A5
B5
h
h
X2
X3

Y2
Y3

X3
X4

Y3
Y4

X4
X5

Y5
Y4

X5
X6

Y5
Y6

...and so on.
The various symbols denote:
h
Z1
Yi :
:
randomly generated data, used as authenticators
a one-way hash on the concatenation of values Z1
Xi
Zn
Zn
Bi : Meaningless random message from A (resp. B) at round i
Bi : Meaninful message from A (resp. B) at round i
bi :
the commitment from A (resp.B) for round i




Ai
Ai
ai
Figure 4. Interactive Guy Fawkes protocol







