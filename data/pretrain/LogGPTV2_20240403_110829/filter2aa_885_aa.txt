针对 PHP 的网站主要存在下面几种攻击方式:
1、命令注入(Command Injection)
2、eval 注入(Eval Injection)
3、客户端脚本攻击(Script Insertion)
4、跨网站脚本攻击(Cross Site Scripting, XSS)
5、SQL 注入攻击(SQL injection)
6、跨网站请求伪造攻击(Cross Site Request Forgeries, CSRF)
7、Session 会话劫持(Session Hijacking)
8、Session 固定攻击(Session Fixation)
9、HTTP 响应拆分攻击(HTTP Response Splitting)
10、文件上传漏洞(File Upload Attack)
11、目录穿越漏洞(Directory Traversal)
12、远程文件包含攻击(Remote Inclusion)
13、动态函数注入攻击(Dynamic Variable Evaluation)
14、URL 攻击(URL attack)
15、表单提交欺骗攻击(Spoofed Form Submissions)
16、HTTP 请求欺骗攻击(Spoofed HTTP Requests)
以后的每期连载，会逐个介绍这些漏洞的原理和防御方法。
几个重要的 php.ini 选项
Register Globals
php>=4.2.0，php.ini 的 register_globals 选项的默认值预设为 Off，当 register_globals 的设定
为 On 时，程序可以接收来自服务器的各种环境变量，包括表单提交的变量，而且由于 PHP
不必事先初始化变量的值，从而导致很大的安全隐患。
例 1:
//check_admin()用于检查当前用户权限，如果是 admin 设置$is_admin 变量为 true，然后下面
判断此变量是否为 true，然后执行管理的一些操作
//ex1.php
这一段代码没有将$is_admin 事先初始化为 Flase，如果 register_globals 为 On，那么我们直
接提交 http://www.sectop.com/ex1.php?is_admin=true,就可以绕过 check_admin()的验证
例 2:
//ex2.php
当
register_globals=On
时
，
我
们
提
交
http://www.sectop.com/ex2.php?_SESSION[username]=dodo，就具有了此用户的权限
所以不管 register_globals 为什么，我们都要记住，对于任何传输的数据要经过仔细验证，变
量要初始化
safe_mode
安全模式，PHP 用来限制文档的存取、限制环境变量的存取，控制外部程序的执行。启用
安全模式必须设置 php.ini 中的 safe_mode = On
1、限制文件存取
safe_mode_include_dir = "/path1:/path2:/path3"
不同的文件夹用冒号隔开
2、限制环境变量的存取
safe_mode_allowed_env_vars = string
指定 PHP 程序可以改变的环境变量的前缀，如:safe_mode_allowed_env_vars = PHP_ ,当这个
选项的值为空时，那么 php 可以改变任何环境变量
safe_mode_protected_env_vars = string
用来指定 php 程序不可改变的环境变量的前缀
3、限制外部程序的执行
safe_mode_exec_dir = string
此选项指定的文件夹路径影响 system、exec、popen、passthru，不影响 shell_exec 和“` `”。
disable_functions = string
不同的函数名称用逗号隔开，此选项不受安全模式影响
magic quotes
用来让 php 程序的输入信息自动转义，所有的单引号(“'”)，双引号(“"”)，反斜杠(“\”)和空字
符(NULL)，都自动被加上反斜杠进行转义
magic_quotes_gpc = On 用来设置 magic quotes 为 On，它会影响 HTTP 请求的数据(GET、
POST、Cookies)
程序员也可以使用 addslashes 来转义提交的 HTTP 请求数据，或者用 stripslashes 来删除转义
PHP 漏洞全解(二)-命令注入攻击
命令注入攻击
PHP 中可以使用下列 5 个函数来执行外部的应用程序或函数
system、exec、passthru、shell_exec、``(与 shell_exec 功能相同)
函数原型
string system(string command, int &return_var)
command 要执行的命令
return_var 存放执行命令的执行后的状态值
string exec (string command, array &output, int &return_var)
command 要执行的命令
output 获得执行命令输出的每一行字符串
return_var 存放执行命令后的状态值
void passthru (string command, int &return_var)
command 要执行的命令
return_var 存放执行命令后的状态值
string shell_exec (string command)
command 要执行的命令
漏洞实例
例 1:
//ex1.php
";
system("ls -al ".$dir);
echo "";
}
?>
我们提交 http://www.sectop.com/ex1.php?dir=| cat /etc/passwd
提交以后，命令变成了 system("ls -al | cat /etc/passwd");
eval 注入攻击
eval 函数将输入的字符串参数当作 PHP 程序代码来执行
函数原型:
mixed eval(string code_str) //eval 注入一般发生在攻击者能控制输入的字符串的时候
//ex2.php
当我们提交 http://www.sectop.com/ex2.php?arg=phpinfo();漏洞就产生了
动态函数
程 序
员 原 意 是
想 动 态 调
用
A
和
B
函 数
， 那 我 们
提 交
http://www.sectop.com/ex.php?func=phpinfo 漏洞产生
防范方法
1、尽量不要执行外部命令
2、使用自定义函数或函数库来替代外部命令的功能
3、使用 escapeshellarg 函数来处理命令参数
4、使用 safe_mode_exec_dir 指定可执行文件的路径
esacpeshellarg 函数会将任何引起参数或命令结束的字符转义，单引号“'”，替换成“\'”，双引
号“"”，替换成“\"”，分号“;”替换成“\;”
用 safe_mode_exec_dir 指定可执行文件的路径，可以把会使用的命令提前放入此路径内
safe_mode = On
safe_mode_exec_di r= /usr/local/php/bin/
PHP 漏洞全解(三)-客户端脚本植入
客户端脚本植入(Script Insertion)，是指将可以执行的脚本插入到表单、图片、动画或超链接
文字等对象内。当用户打开这些对象后，攻击者所植入的脚本就会被执行，进而开始攻击。
可以被用作脚本植入的 HTML 标签一般包括以下几种:
1、标签标记的 javascript 和 vbscript 等页面脚本程序。在标签内可以指定 js
程序代码，也可以在 src 属性内指定 js 文件的 URL 路径
2、标签标记的对象。这些对象是 java applet、多媒体文件和 ActiveX 控件等。通常
在 data 属性内指定对象的 URL 路径
3、标签标记的对象。这些对象是多媒体文件，例如:swf 文件。通常在 src 属性内指
定对象的 URL 路径
4、标签标记的对象。这些对象是 java applet，通常在 codebase 属性内指定对象的 URL