SELECT * FROM search_graph;  
fetch 1000 from cur1;  
\watch 1  
```  
每返回1000条约耗时`Time: 5.144 ms`  
2、观察路径搜索性能(由于使用了广度优先搜索, 所以`limit 1`就是最短路径):  
```  
\timing on  
\set v_root_point 1  
\set v_limit_per_layer 100000  
```  
```  
begin;  
set local enable_hashjoin=off;  
set local enable_mergejoin=off;  
set local max_parallel_workers_per_gather=0;  
DECLARE cur2 cursor for  
WITH RECURSIVE search_graph(  
  c1,   -- 点1  
  c2,   -- 点2  
  prop, -- 边的属性  
  depth, -- 深度，从1开始  
  path  -- 路径，数组存储  
) AS (  
        SELECT    -- ROOT节点查询  
          g.c1,   -- 点1  
          g.c2,   -- 点2  
          g.prop,   -- 边的属性  
          1 as depth,        -- 初始深度=1  
          ARRAY[g.c1] as path  -- 初始路径  
        FROM a AS g  
        WHERE  
          c1 = :v_root_point         -- ROOT节点=?  
      UNION ALL  
        SELECT     -- 递归子句  
          g.c1,    -- 点1  
          g.c2,    -- 点2  
          g.prop,          -- 边的属性  
          sg.depth + 1 as depth,    -- 深度+1  
          path || g.c1 as path   -- 路径中加入新的点  
        FROM a AS g, search_graph AS sg   -- 循环 INNER JOIN  
        WHERE  
          g.c1 = sg.c2         -- 递归JOIN条件  
          AND (g.c1 <> ALL(sg.path))        -- 防止循环  
          AND sg.depth >'weight')::float8,0) >= ?        -- 相关性权重  
          -- ORDER BY coalesce((prop->>'weight')::float8,0) desc   -- 可以使用ORDER BY，例如返回权重排在前面的N条。  
          limit 150            -- 每个层级限制多少条？  
        ) t  
      UNION ALL  
        select c1,c2,prop,depth,path from (  
        SELECT     -- 递归子句  
          g.c1,    -- 点1  
          g.c2,    -- 点2  
          g.prop,          -- 边的属性  
          sg.depth + 1 depth,    -- 深度+1  
          path || g.c1 path    -- 路径中加入新的点  
        FROM a AS g, search_graph AS sg   -- 循环 INNER JOIN  
        WHERE  
          g.c1 = sg.c2         -- 递归JOIN条件  
          AND (g.c1 <> ALL(sg.path))        -- 防止循环  
          AND sg.depth >'weight')::float8,0) >= ?   -- 相关性权重  
          -- ORDER BY coalesce((prop->>'weight')::float8,0) desc   -- 可以使用ORDER BY，例如返回权重排在前面的N条。  
          limit :v_limit_per_layer            -- 每个层级限制多少条？  
        ) t  
)  
SELECT * FROM search_graph;    -- 查询递归表，可以加LIMIT输出，也可以使用游标  
```  
limit不支持变量, 看样子需要内核支持:  
```  
ERROR:  42P10: argument of LIMIT must not contain variables  
LINE 37:           limit least(150,1000/log(2,greatest(2,sg.depth))) ...  
                                                         ^  
LOCATION:  checkExprIsVarFree, parse_clause.c:1801  
```  
## 参考  
##### 202307/20230705_02.md   [《PolarDB和PostgreSQL开源通过pggraphblas 稀疏矩阵计算加速深层图式搜索》](../202307/20230705_02.md)  
##### 202212/20221202_01.md   [《如何用 PolarDB 整合age算法插件, 实现图式搜索加速 - 刑侦、社交、风控、族谱、推荐等业务图谱类关系数据搜索》](../202212/20221202_01.md)  
##### 202208/20220818_02.md   [《用PostgreSQL 递归SQL与plpgsql函数 绘制分形图 - 曼德勃罗集(Mandelbrot-上帝的指纹) 和 Julia 集 - `z->z^2+c`》](../202208/20220818_02.md)  
##### 202112/20211202_04.md   [《PostgreSQL 递归CTE 模拟一维空间的元胞自动机 - 复杂系统研究 自组织,涌现》](../202112/20211202_04.md)  
##### 202109/20210917_01.md   [《PostgreSQL 递归查询 - 深度优先、广度优先 搜索举例 - BREADTH DEPTH》](../202109/20210917_01.md)  
##### 202109/20210915_01.md   [《PostgreSQL 递归查询中不支持 order by, 聚合函数, 自包含子查询的》](../202109/20210915_01.md)  
##### 202108/20210805_06.md   [《PostgreSQL 递归一例, 问题、回答、留言, 1对多对多的结构》](../202108/20210805_06.md)  
##### 202106/20210610_01.md   [《森林状图式数据(树状) 的 高效生成方法》](../202106/20210610_01.md)  
##### 202105/20210529_01.md   [《重新发现PostgreSQL之美 - 6 index链表跳跳糖 (CTE recursive 递归的详细用例)》](../202105/20210529_01.md)  
##### 202105/20210510_02.md   [《PostgreSQL 应用开发解决方案最佳实践系列课程 - 8. 树状图谱关系系统(营销、分销、流量变现、分佣、引爆流行、裂变式传播、家谱、选课、社交、人才库、刑侦、农产品溯源、药品溯源)》](../202105/20210510_02.md)  
##### 202102/20210201_03.md   [《PostgreSQL 14 preview - SQL标准增强, 递归(CTE)图式搜索增加广度优先、深度优先语法, 循环语法 - breadth- or depth-first search orders and detect cycles》](../202102/20210201_03.md)  
##### 202011/20201125_01.md   [《PostgreSQL 递归查询在分组合并中的用法》](../202011/20201125_01.md)  
##### 202006/20200615_01.md   [《递归+排序字段加权 skip scan 解决 窗口查询多列分组去重的性能问题》](../202006/20200615_01.md)  
##### 202005/20200515_01.md   [《PostgreSQL 排序去重limit查询优化 - 递归 vs group分组 (loop降到极限, block scan降到极限)》](../202005/20200515_01.md)  
##### 202003/20200329_01.md   [《PostgreSQL 家族图谱、社交图谱、树状关系、藤状分佣、溯源、等场景实践 - 递归,with recursive query (有向无环 , 有向有环)》](../202003/20200329_01.md)  
##### 202002/20200228_01.md   [《累加链条件过滤 - 递归、窗口、UDF、游标、模拟递归、scan 剪切》](../202002/20200228_01.md)  
##### 201903/20190318_04.md   [《PostgreSQL 并行计算解说 之29 - parallel 递归查询, 树状查询, 异构查询, CTE, recursive CTE, connect by》](../201903/20190318_04.md)  
##### 201808/20180808_02.md   [《PostgreSQL 递归应用实践 - 非“传销”的高并发实时藤、树状佣金分配体系》](../201808/20180808_02.md)  
##### 201804/20180408_03.md   [《PostgreSQL 家谱、族谱类应用实践 - 图式关系存储与搜索》](../201804/20180408_03.md)  
##### 201804/20180406_01.md   [《PostgreSQL 递归妙用案例 - 分组数据去重与打散》](../201804/20180406_01.md)  
##### 201803/20180323_03.md   [《PostgreSQL Oracle 兼容性之 - INDEX SKIP SCAN (递归查询变态优化) 非驱动列索引扫描优化》](../201803/20180323_03.md)  
##### 201801/20180102_04.md   [《PostgreSQL 图式搜索(graph search)实践 - 百亿级图谱，毫秒响应》](../201801/20180102_04.md)  
##### 201710/20171009_01.md   [《PostgreSQL 实践 - 内容社区(如论坛)图式搜索应用》](../201710/20171009_01.md)  
##### 201708/20170801_01.md   [《小微贷款、天使投资(风控助手)业务数据库设计(图式搜索\图谱分析) - 阿里云RDS PostgreSQL, HybridDB for PostgreSQL最佳实践》](../201708/20170801_01.md)  
##### 201705/20170519_01.md   [《PostgrSQL 递归SQL的几个应用 - 极客与正常人的思维》](../201705/20170519_01.md)  
##### 201703/20170324_01.md   [《PostgreSQL 递归查询CASE - 树型路径分组输出》](../201703/20170324_01.md)  
##### 201612/20161201_01.md   [《用PostgreSQL找回618秒逝去的青春 - 递归收敛优化》](../201612/20161201_01.md)  
##### 201611/20161128_02.md   [《distinct xx和count(distinct xx)的变态递归优化方法 - 索引收敛(skip scan)扫描》](../201611/20161128_02.md)  
##### 201611/20161128_01.md   [《时序数据合并场景加速分析和实现 - 复合索引，窗口分组查询加速，变态递归加速》](../201611/20161128_01.md)  
##### 201609/20160911_01.md   [《facebook linkbench 测试PostgreSQL社交关系图谱场景性能》](../201609/20160911_01.md)  
##### 201608/20160815_04.md   [《PostgreSQL雕虫小技cte 递归查询，分组TOP性能提升44倍》](../201608/20160815_04.md)  
##### 201607/20160725_01.md   [《PostgreSQL 使用递归SQL 找出数据库对象之间的依赖关系 - 例如视图依赖》](../201607/20160725_01.md)  
##### 201607/20160723_01.md   [《PostgreSQL 递归死循环案例及解法》](../201607/20160723_01.md)  
##### 201604/20160405_01.md   [《PostgreSQL 递归查询一例 - 资金累加链》](../201604/20160405_01.md)  
##### 201512/20151221_02.md   [《PostgreSQL Oracle 兼容性之 - WITH 递归 ( connect by )》](../201512/20151221_02.md)  
##### 201210/20121009_01.md   [《递归优化CASE - group by & distinct tuning case : use WITH RECURSIVE and min() function》](../201210/20121009_01.md)  
##### 201209/20120914_01.md   [《递归优化CASE - performance tuning case :use cursor\trigger\recursive replace (group by and order by) REDUCE needed blockes scan》](../201209/20120914_01.md)  
##### 201105/20110527_01.md   [《PostgreSQL 树状数据存储与查询(非递归) - Use ltree extension deal tree-like data type》](../201105/20110527_01.md)  
#### [期望 PostgreSQL|开源PolarDB 增加什么功能?](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
#### [PolarDB 云原生分布式开源数据库](https://github.com/ApsaraDB "57258f76c37864c6e6d23383d05714ea")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、内核开发公开课、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [PostgreSQL 解决方案集合](../201706/20170601_02.md "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")