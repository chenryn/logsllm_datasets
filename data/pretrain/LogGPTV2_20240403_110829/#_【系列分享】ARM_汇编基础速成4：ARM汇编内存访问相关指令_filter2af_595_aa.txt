# 【系列分享】ARM 汇编基础速成4：ARM汇编内存访问相关指令

##### 译文声明
本文是翻译文章，原文来源：azeria-labs.com  
原文地址：[链接]  
译文仅供参考，具体内容表达以及含义以原文为准。  
译者：[arnow117](http://bobao.360.cn/member/contribute?uid=941579989)  
预估稿费：200RMB  
投稿方式：发送邮件至linwei#360.cn，或登录网页版在线投稿  
传送门：
- [【系列分享】ARM汇编基础速成1：ARM汇编及汇编语言基础介绍](http://bobao.360.cn/learning/detail/4070.html)
- [【系列分享】ARM汇编基础速成2：ARM汇编中的数据类型](http://bobao.360.cn/learning/detail/4075.html)
- [【系列分享】ARM汇编基础速成3：ARM模式与THUMB模式](http://bobao.360.cn/learning/detail/4082.html)

### ARM内存访问机制
ARM架构采用加载-存储（Load-Store）模式来控制对内存的访问。这意味着只有加载（LDR）和存储（STR）指令可以直接访问内存。相比之下，X86架构允许许多指令直接操作内存中的数据。在ARM中，如果要修改一个32位内存中的值，需要执行三个步骤：加载、运算、存储。

为了更好地理解ARM架构中的加载和存储机制，我们通过一些基础示例来说明不同类型的内存地址偏移访问方法。每个示例展示了不同的偏移模式，但其余部分保持一致。最佳实践是使用GDB调试这些汇编代码。

### 基础样例代码
通常，LDR用于从内存中加载数据到寄存器，而STR用于将寄存器中的值存储到内存中。
```assembly
LDR R2, [R0]   @ 从R0指向的地址加载数据到R2
STR R2, [R1]   @ 将R2中的值存储到R1指向的地址
```

以下是样例程序的汇编代码及其解释：
```assembly
.data          /* 数据段 */
var1: .word 3  /* 内存中的第一个变量 */
var2: .word 4  /* 内存中的第二个变量 */

.text          /* 代码段开始 */ 
.global _start
_start:
    ldr r0, adr_var1  @ 将var1的地址加载到R0
    ldr r1, adr_var2  @ 将var2的地址加载到R1
    ldr r2, [r0]      @ 将R0指向的地址中的值加载到R2
    str r2, [r1]      @ 将R2中的值存储到R1指向的地址
    bkpt             @ 断点

adr_var1: .word var1  /* var1的地址助记符 */
adr_var2: .word var2  /* var2的地址助记符 */
```
在这个例子中，`ldr` 和 `str` 指令分别用于加载和存储数据。方括号 `[]` 表示其内的值作为内存地址进行读写操作。

### 第一种偏移形式：立即数作偏移
```assembly
STR Ra, [Rb, #imm]
LDR Ra, [Rc, #imm]
```
在这种偏移模式中，立即数被用来与寄存器中的地址进行加减操作，以访问对应偏移处的数据。

示例代码：
```assembly
.data
var1: .word 3
var2: .word 4

.text
.global _start
_start:
    ldr r0, adr_var1  @ 将var1的地址加载到R0
    ldr r1, adr_var2  @ 将var2的地址加载到R1
    ldr r2, [r0]      @ 将R0指向的地址中的值加载到R2
    str r2, [r1, #2]  @ 将R2中的值存储到R1+2的地址
    str r2, [r1, #4]! @ 将R2中的值存储到R1+4的地址，并更新R1为R1+4
    ldr r3, [r1], #4  @ 从R1指向的地址加载数据到R3，并更新R1为R1+4
    bkpt

adr_var1: .word var1
adr_var2: .word var2
```

### 第二种偏移形式：寄存器作偏移
```assembly
STR Ra, [Rb, Rc]
LDR Ra, [Rb, Rc]
```
在这种偏移模式中，寄存器的值被用作偏移量。

示例代码：
```assembly
.data
var1: .word 3
var2: .word 4

.text
.global _start
_start:
    ldr r0, adr_var1  @ 将var1的地址加载到R0
    ldr r1, adr_var2  @ 将var2的地址加载到R1
    ldr r2, [r0]      @ 将R0指向的地址中的值加载到R2
    str r2, [r1, r2]  @ 将R2中的值存储到R1+R2的地址
    str r2, [r1, r2]! @ 将R2中的值存储到R1+R2的地址，并更新R1为R1+R2
    ldr r3, [r1], r2  @ 从R1指向的地址加载数据到R3，并更新R1为R1+R2
    bkpt

adr_var1: .word var1
adr_var2: .word var2
```

### 调试示例
使用GDB调试上述代码：
```bash
$ as ldr.s -o ldr.o
$ ld ldr.o -o ldr
$ gdb ldr
```
在GDB中设置断点并运行：
```gdb
gef> break _start
gef> run
...
gef> nexti 3
```
查看寄存器值：
```gdb
gef> info register
```
逐步执行关键指令并观察内存和寄存器的变化。

通过这些示例和调试过程，可以更好地理解ARM架构中的内存访问机制和不同类型的地址偏移模式。