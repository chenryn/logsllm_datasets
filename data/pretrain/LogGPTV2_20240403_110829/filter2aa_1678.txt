1
Tomcat中的appBase
第⼀次看⻅有关tomcat appBase是在漏洞百出-⼏个Jolokia RCE的“新”利⽤⽅式⼀⽂中 
该⽂后续就展示出了可以直接在新建的vhost中访问/etc/paasswd等⽂件资源，已经跳出
TOCMAT/webapps的限制，并且在其他漏洞中也⻅到了对appBase这⼀属性的利⽤，当时⼼中就有⼀
些疑问：为什么appBase这⼀属性就可以控制TOMCAT相关资源位置，⼜是什么机制让其实时⽣效 
现在就在此⽂中尝试从代码的⻆度简单描述原理、过程 
tomcat分析版本：10.0.18 
⾸先寻找appBase从何⽽来 
简单看到field的描述如下 
简单排查appBase的引⽤，最重要的地⽅在org.apache.catalina.core.StandardHost#getAppBaseFile 
appBase 
因此利⽤jolokia调⽤，可以直接创建⼀个vhost，指定/为appBase
StandardHost 
2
逻辑如上图，⽐较简单，如果appBase不是绝对路径就进⾏路径拼接，算在TOMCAT根⽬录下，并将结
果赋值给appBaseFile最后返回 
其实org.apache.catalina.core.StandardHost#getAppBaseFile的引⽤很多，但是⼤致是两个⽅向 
1. context初始化：对应ContextConfig 
2. host初始化、热部署：对应HostConfig 
这⾥就暂且只看热部署相关 
跟到org.apache.catalina.startup.HostConfig#deployApps()
HostConfig 
3
从上图的注释就能看出，该函数⽤于部署在application根⽬录下的任何⽬录或war⽂件，appBase所指
向的⽬录就被视作“application root”，并由此遍历appBase下的所有⽂件将其路径存⼊
filteredAppPaths中，在此跟进deployDirectories，如下 
4
逻辑⾮常简单，只要是appBase⽬录下名字不为WEB-INF、META-INF的⽬录，就会经过
DeployDirectory的处理 
注意：这⾥为了避免浪费资源，已经处理过的⽬录将会存⼊cache，只会处理不在cache中的新⽬录 
继续跟进org.apache.catalina.startup.HostConfig.DeployDirectory#run，发现只是调⽤了
org.apache.catalina.startup.HostConfig#deployDirectory，该函数代码过⻓就不截图了，逻辑很简
单，直接根据指定⽬录新建了个StandardContext，并将其加⼊当前StandardHost之中，此后就能够在
该StandardHost访问到对应的StandardContext了，⽽StandardContext直接对应appBase下的某个⼦
⽬录 
5
简单来讲，TOMCAT appBase初始指向的是  TOMCAT/webapps ，然后将会部署webapps⽬录下的所
有war⽂件或者⽬录，并将其每个⽬录作为StandardContext挂在当前StandardHost下，最后客户端可
以通过  http://host:port/context_path 访问到已经部署的⽬录 
现在回到HostConfig#deployApps，查找⼀下引⽤，如下 
可⻅，最终都是被HostConfig.lifecycleEvent，其中start函数主要是在初始化Host的时候执⾏的，这⾥
我们跟进check函数，如下 
如上图，只要当前Host的autoDeploy属性为true时（⾼版本tomcat该属性默认为true），最终都会调⽤
deployApps函数，此处就是热部署的具体实现了 
继续查看HostConfig.lifecycleEvent，如下 
lifecycleEvent & backgroundProcess 
6
如上图，调⽤check函数是需要接收到  Lifecycle.PERIODIC_EVENT 事件才会触发，那么现在来全
局搜索⼀下什么地⽅才会发送这个事件 
从命名来看，从ContainerBase发出的事件不像是初始化时才会发⽣的，跟进去后发现是在
org.apache.catalina.core.ContainerBase#backgroundProcess函数中⽆条件发送  Lifecycle.PERI
ODIC_EVENT 事件，其函数注释如下 
7
显⽽易⻅这是个后台线程调⽤的函数 
初始化Host时，⼀定会触发部署⾏为，这时就会直接将appBase所指向⽬录的⼦⽬录全部作为Context
加载到新Host中 
tomcat运⾏中，并且⾼版本默认autoDeploy为true时，将会实时扫描appBase所指向的“application 
root”⽬录，然后为其新的⼦⽬录创建新的Context并加载到当前Host中。这样就解释了某些利⽤⼿法直
接修改当前Host appBase后，将可以跳出webapps访问到其他敏感资源的原因，实际上就是将
appBase⽬录下的所有⼦⽬录全部当成Context处理的结果 
总结 
LaTeX
复制代码
/**
 * Execute a periodic task, such as reloading, etc. This method will be
 * invoked inside the classloading context of this container. Unexpected
 * throwables will be caught and logged.
 */
1
2
3
4
5