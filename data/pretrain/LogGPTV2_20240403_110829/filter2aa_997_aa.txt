# Spartan 0day & Exploit

## Speaker: exp-sky
### Affiliation: Tencentâ€™s Xuanwu Lab

- **Focus Areas:**
  - Browser Security
  - Vulnerability Discovery
  - Exploit Techniques
  - APT Attacks Detection

## Spartan 0day & Exploit

1. Isolation Heap
2. Memory Protection
3. Spartan Memory Management
4. Control Flow Guard (CFG)
5. Exploit Bypass Techniques
6. 0day Vulnerabilities
7. Q&A

### Isolation Heap

#### Initialization
```c
// Initialize the isolation heap
heapHandle = HeapCreate(0, 0, 0);
g_hIsolatedHeap = heapHandle;
```

#### Usage Example
```c
struct CElement* CButton::CreateElement(CHtmTag *a1, CDoc *a2) 
{
  void *mem = MemoryProtection::HeapAllocClear(g_hIsolatedHeap, 0x5Cu);
  if (Abandonment::CheckAllocationUntyped(mem)) 
    result = CButton::CButton(*((_DWORD *)a1 + 1), a2); 
  else 
    result = 0; 
  return result; 
}
```

### Memory Protection

- **Heap Types:**
  - Isolation Heap
  - Process Heap
  - UAF Object (Not freed)
  - Outer Object (Not used)

### Spartan Memory Management

- **New Mode: MemoryGC**
  - **Initialization:**
    ```c
    MemoryProtection::InitializeProtectionFeature();
    |-MemoryProtection_Mode = 3;
    |-MemoryProtection::CMemoryGC::InitializeFeature();
        |-chakra!MemProtectHeapCreate
    ```
  - **Allocation:**
    ```c
    MemoryProtection::HeapAllocClear();
    |-MemoryProtection_Mode
        |- 0,1,2: HeapAlloc Isolation
        |- 3: chakra!MemProtectHeapRootAlloc
            |- Memory::Recycler
    ```
  - **Deallocation:**
    ```c
    MemoryProtection::HeapFree();
    |-MemoryProtection_Mode
        |- 0: HeapFree
        |- 1,2: MemoryProtection::CMemoryProtector::ProtectedFree
        |- 3: chakra!MemProtectHeapUnrootAndZero
    ```

- **Memory Collection:**
  ```c
  MemProtectThreadContext::Collect();
  |- MemProtectHeap::Collect()
      |-Memory::Recycler::DoCollectWrapped
          |-Memory::Recycler::DoCollect
              |-Memory::Recycler::CollectionBegin
              |-Memory::Recycler::Mark
              |-Memory::Recycler::Sweep
              |-Memory::Recycler::CollectionEnd
              |-Memory::Recycler::FinishCollection
  ```

### Control Flow Guard (CFG)

- **Example:**
  ```assembly
  mov     eax, [edi]
  mov     esi, [eax+0A4h] ; esi = virtual function
  mov     ecx, esi
  call    ds:___guard_check_icall_fptr //ntdll!LdrpValidateUserCallTarget
  mov     ecx, edi
  call    esi
  ```

- **Bitmap and Index:**
  ```plaintext
  index               offset            : data
  [0x0077b960] 0x01dee58c : 0x55555555
  [0x0077b964] 0x01dee590 : 0x30010555
  [0x0077b968] 0x01dee594 : 0x04541041
  ...
  function address : 0x77b96450
  0x77b96450 : [01110111 10111001 01100100 01010000]
  bt : 0x30010555&0x400 != 0
  01010 = 0x0a = 10
  00000100 00000000 = 0x400
  ```

- **Bypassing CFG:**
  ```assembly
  0:024> g
  Breakpoint 0 hit
  eax=603ba064 ebx=063fba10 ecx=063fba40 edx=063fba40 esi=00000001 edi=058fc6b0
  eip=603ba064 esp=058fc414 ebp=058fc454 iopl=0         nv up ei ng nz na po cy
  cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000283
  chakra!`dynamic initializer for 'DOMFastPathInfo::getterTable''+0x734:
  603ba064 94              xchg    eax,esp
  603ba065 c3              ret
  write_dword(addr, chakra_base_addr + 0x002AA064);    // set ROP address
  ```

### Q&A

Feel free to ask any questions or provide feedback on the presented topics.

---

This revised version aims to provide a clear, structured, and professional presentation of the content.