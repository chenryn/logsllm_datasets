title:DROWN: Breaking TLS Using SSLv2
author:Nimrod Aviram and
Sebastian Schinzel and
Juraj Somorovsky and
Nadia Heninger and
Maik Dankel and
Jens Steube and
Luke Valenta and
David Adrian and
J. Alex Halderman and
Viktor Dukhovni and
Emilia K&quot;asper and
Shaanan Cohney and
Susanne Engels and
Christof Paar and
Yuval Shavitt
DROWN: Breaking TLS using SSLv2
Nimrod Aviram, Tel Aviv University; Sebastian Schinzel, Münster University of Applied 
Sciences; Juraj Somorovsky, Ruhr University Bochum; Nadia Heninger, University of 
Pennsylvania; Maik Dankel, Münster University of Applied Sciences; Jens Steube, Hashcat 
Project; Luke Valenta, University of Pennsylvania; David Adrian and J. Alex Halderman, 
University of Michigan; Viktor Dukhovni, Two Sigma and OpenSSL; Emilia Käsper, Google 
and OpenSSL; Shaanan Cohney, University of Pennsylvania; Susanne Engels and  
Christof Paar, Ruhr University Bochum; Yuval Shavitt, Tel Aviv University
 https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/aviram
This paper is included in the Proceedings of the 25th USENIX Security SymposiumAugust 10–12, 2016 • Austin, TXISBN 978-1-931971-32-4Open access to the Proceedings of the 25th USENIX Security Symposium is sponsored by USENIX DROWN: Breaking TLS using SSLv2
Nimrod Aviram1, Sebastian Schinzel2, Juraj Somorovsky3, Nadia Heninger4, Maik Dankel2,
Jens Steube5, Luke Valenta4, David Adrian6, J. Alex Halderman6, Viktor Dukhovni7,
Emilia Käsper8, Shaanan Cohney4, Susanne Engels3, Christof Paar3 and Yuval Shavitt1
1Department of Electrical Engineering, Tel Aviv University
2Münster University of Applied Sciences
3Horst Görtz Institute for IT Security, Ruhr University Bochum
4University of Pennsylvania
5Hashcat Project
6University of Michigan
7Two Sigma/OpenSSL
8Google/OpenSSL
Abstract
We present DROWN, a novel cross-protocol attack on
TLS that uses a server supporting SSLv2 as an oracle to
decrypt modern TLS connections.
We introduce two versions of the attack. The more
general form exploits multiple unnoticed protocol flaws
in SSLv2 to develop a new and stronger variant of the
Bleichenbacher RSA padding-oracle attack. To decrypt a
2048-bit RSA TLS ciphertext, an attacker must observe
1,000 TLS handshakes, initiate 40,000 SSLv2 connec-
tions, and perform 250 offline work. The victim client
never initiates SSLv2 connections. We implemented the
attack and can decrypt a TLS 1.2 handshake using 2048-
bit RSA in under 8 hours, at a cost of $440 on Amazon
EC2. Using Internet-wide scans, we find that 33% of all
HTTPS servers and 22% of those with browser-trusted
certificates are vulnerable to this protocol-level attack due
to widespread key and certificate reuse.
For an even cheaper attack, we apply our new tech-
niques together with a newly discovered vulnerability in
OpenSSL that was present in releases from 1998 to early
2015. Given an unpatched SSLv2 server to use as an
oracle, we can decrypt a TLS ciphertext in one minute on
a single CPU—fast enough to enable man-in-the-middle
attacks against modern browsers. We find that 26% of
HTTPS servers are vulnerable to this attack.
We further observe that the QUIC protocol is vulner-
able to a variant of our attack that allows an attacker to
impersonate a server indefinitely after performing as few
as 217 SSLv2 connections and 258 offline work.
We conclude that SSLv2 is not only weak, but actively
harmful to the TLS ecosystem.
Introduction
1
TLS [13] is one of the main protocols responsible for
transport security on the modern Internet. TLS and its
precursor SSLv3 have been the target of a large number
of cryptographic attacks in the research community, both
on popular implementations and the protocol itself [33].
Prominent recent examples include attacks on outdated
or deliberately weakened encryption in RC4 [3], RSA [5],
and Diffie-Hellman [1], different side channels includ-
ing Lucky13 [2], BEAST [14], and POODLE [35], and
several attacks on invalid TLS protocol flows [5, 6, 12].
Comparatively little attention has been paid to the
SSLv2 protocol, likely because the known attacks are
so devastating and the protocol has long been considered
obsolete. Wagner and Schneier wrote in 1996 that their at-
tacks on SSLv2 “will be irrelevant in the long term when
servers stop accepting SSL 2.0 connections” [41]. Most
modern TLS clients do not support SSLv2 at all. Yet in
2016, our Internet-wide scans find that out of 36 million
HTTPS servers, 6 million (17%) support SSLv2.
A Bleichenbacher attack on SSLv2. Bleichenbacher’s
padding oracle attack [8] is an adaptive chosen ciphertext
attack against PKCS#1 v1.5, the RSA padding standard
used in SSL and TLS.
It enables decryption of RSA
ciphertexts if a server distinguishes between correctly and
incorrectly padded RSA plaintexts, and was termed the
“million-message attack” upon its introduction in 1998,
after the number of decryption queries needed to deduce
a plaintext. All widely used SSL/TLS servers include
countermeasures against Bleichenbacher attacks.
Our first result shows that the SSLv2 protocol is fatally
vulnerable to a form of Bleichenbacher attack that enables
USENIX Association  
25th USENIX Security Symposium  689
decryption of RSA ciphertexts. We develop a novel ap-
plication of the attack that allows us to use a server that
supports SSLv2 as an efficient padding oracle. This attack
is a protocol-level flaw in SSLv2 that results in a feasible
attack for 40-bit export cipher strengths, and in fact abuses
the universally implemented countermeasures against Ble-
ichenbacher attacks to obtain a decryption oracle.
We also discovered multiple implementation flaws in
commonly deployed OpenSSL versions that allow an ex-
tremely efficient instantiation of this attack.
Using SSLv2 to break TLS. Second, we present a novel
cross-protocol attack that allows an attacker to break a
passively collected RSA key exchange for any TLS server
if the RSA keys are also used for SSLv2, possibly on a
different server. We call this attack DROWN (Decrypting
RSA using Obsolete and Weakened eNcryption).
In its general version, the attack exploits the protocol
flaws in SSLv2, does not rely on any particular library
implementation, and is feasible to carry out in practice by
taking advantage of commonly supported export-grade
ciphers. In order to decrypt one TLS session, the attacker
must passively capture about 1,000 TLS sessions using
RSA key exchange, make 40,000 SSLv2 connections to
the victim server, and perform 250 symmetric encryption
operations. We successfully carried out this attack using
an optimized GPU implementation and were able to de-
crypt a 2048-bit RSA ciphertext in less than 18 hours on
a GPU cluster and less than 8 hours using Amazon EC2.
We found that 11.5 million HTTPS servers (33%) are
vulnerable to this attack, because many HTTPS servers
that do not directly support SSLv2 share RSA keys with
other services that do. Of servers offering HTTPS with
browser-trusted certificates, 22% are vulnerable.
We also present a special version of DROWN that ex-
ploits flaws in OpenSSL for a more efficient oracle. It re-
quires roughly the same number of captured TLS sessions
as the general attack, but only half as many connections to
the victim server and no large computations. This attack
can be completed on a single core on commodity hard-
ware in less than a minute, and is limited primarily by how
fast the server can complete handshakes. It is fast enough
that an attacker can perform man-in-the-middle attacks
on live TLS sessions before the handshake times out, and
downgrade a modern TLS client to RSA key exchange
with a server that prefers non-RSA cipher suites. Our
Internet-wide scans suggest that 79% of HTTPS servers
that are vulnerable to the general attack, or 26% of all
HTTPS servers, are also vulnerable to real-time attacks
exploiting these implementation flaws.
Our results highlight the risk that continued support
for SSLv2 imposes on the security of much more recent
TLS versions. This is an instance of a more general
phenomenon of insufficient domain separation, where
older, vulnerable security standards can open the door to
attacks on newer versions. We conclude that phasing out
outdated and insecure standards should become a priority
for standards designers and practitioners.
Disclosure. DROWN was assigned CVE-2016-0800.
We disclosed our attacks to OpenSSL and worked with
them to coordinate further disclosures. The specific
OpenSSL vulnerabilities we discovered have been desig-
nated CVE-2015-3197, CVE-2016-0703, and CVE-2016-
0704. In response to our findings, OpenSSL has made
it impossible to configure a TLS server in such a way
that it is vulnerable to DROWN. Microsoft had already
disabled SSLv2 for all supported versions of IIS. We
also disclosed the attack to the NSS developers, who have
disabled SSLv2 on the last NSS tool that supported it and
have hastened efforts to entirely remove the protocol from
their codebase. In response to our disclosure, Google
will disable QUIC support for non-whitelisted servers and
modify the QUIC standard. We also notified IBM, Cisco,
Amazon, the German CERT-Bund, and the Israeli CERT.
Online resources. Contact information, server test tools,
and updates are available at https://drownattack.com.
2 Background
In the following, a||b denotes concatenation of strings a
and b. a[i] references the i-th byte in a. (N,e) denotes an
RSA public key, where N has byte-length (cid:30)m (|N| = (cid:30)m)
and e is the public exponent. The corresponding secret
exponent is d = 1/e mod φ (N).
2.1 PKCS#1 v1.5 encryption padding
Our attacks rely on the structure of RSA PKCS#1 v1.5
padding. Although RSA PKCS#1 v2.0 implements OAEP,
SSL/TLS still uses PKCS#1 v1.5. The PKCS#1 v1.5
encryption padding scheme [27] randomizes encryptions
by prepending a random padding string PS to a message
k (here, a symmetric session key) before RSA encryption:
The
1. The plaintext message is k, (cid:30)k = |k|.
encrypter generates a random byte string PS,
where |PS| ≥ 8, |PS| = (cid:30)m − 3 − (cid:30)k, and 0x00 (cid:28)∈
{PS[1], . . . ,PS [|PS|]}.
2. The encryption block is m = 00||02||PS||00||k.
3. The ciphertext is computed as c = me mod N.
To decrypt such a ciphertext, the decrypter first com-
putes m = cd mod N. Then it checks whether the de-
crypted message m is correctly formatted as a PKCS#1
v1.5-encoded message. We say that the ciphertext c
and the decrypted message bytes m[1]||m[2]||...||m[(cid:30)m]
are PKCS#1 v1.5 conformant if:
m[1]||m[2] = 0x00||0x02
0x00 (cid:28)∈ {m[3], . . . ,m[10]}
If this condition holds, the decrypter searches for the first
690  25th USENIX Security Symposium 
USENIX Association
2
supported by the client and a client nonce rc, termed
challenge. The server responds with a ServerHello
message, which contains a list of cipher suites css sup-
ported by the server, the server certificate, and a server
nonce rs, termed connection_ID.
The client responds with a ClientMasterKey mes-
sage, which specifies a cipher suite supported by both
peers and key data used for constructing a master_key.
In order to support export cipher suites with 40-bit se-
curity (e.g., SSL_RC2_128_CBC_EXPORT40_WITH_MD5),
the key data is divided into two parts:
• mkclear: A portion of the master_key sent in the
ClientMasterKey message as plaintext (termed
clear_key_data in the SSLv2 standard).
• mksecret: A secret portion of the master_key,
encrypted with RSA PKCS#1 v1.5 (termed
secret_key_data).
The resulting master_key mk is constructed by concate-
nating these two keys: mk = mkclear||mksecret. For 40-bit
export cipher suites, mksecret is five bytes in length. For
non-export cipher suites, the whole master_key is en-
crypted, and the length of mkclear is zero.
The client and server can then compute session keys
from the reconstructed master_key mk:
server_write_key = MD5(mk||“0”||rc||rs)
client_write_key = MD5(mk||“1”||rc||rs)
The server responds with a ServerVerify mes-
sage consisting of the challenge rc encrypted with
the server_write_key. Both peers then exchange
Finished messages in order to authenticate to each other.
Our attack exploits the fact that the server always de-
crypts an RSA-PKCS#1 v1.5 ciphertext, computes the
server_write_key, and immediately responds with a
ServerVerify message. The SSLv2 standard implies
this message ordering, but does not make it explicit. How-
ever, we observed this behavior in every implementation
we examined. Our attack also takes advantage of the fact
that the encrypted mksecret portion of the master_key can
vary in length, and is only five bytes for export ciphers.
The TLS handshake protocol. In TLS [13] or SSLv3,
the client initiates the handshake with a ClientHello,
which contains a client random rc and a list of supported
cipher suites. The server chooses one of the cipher
suites and responds with three messages, ServerHello,
Certificate, and ServerHelloDone. These messages
include the server’s choice of cipher suite, server nonce rs,
and a server certificate with an RSA public key. The client
then uses the public key to encrypt a newly generated 48-
byte premaster secret pms and sends it to the server in
a ClientKeyExchange message. The client and server
then derive encryption and MAC keys from the premaster
secret and the client and server random nonces. The de-
tails of this derivation are not important to our attack. The
Figure 1: SSLv2 handshake. The server responds with a
ServerVerify message directly after receiving an RSA-
PKCS#1 v1.5 ciphertext contained in ClientMasterKey.
This protocol feature enables our attack.
value i > 10 such that m[i] = 0x00. Then, it extracts k =
m[i + 1]|| . . .||m[(cid:29) m]. Otherwise, the ciphertext is rejected.
In SSLv3 and TLS, RSA PKCS#1 v1.5 is used to en-
capsulate the premaster secret exchanged during the hand-
shake [13]. Thus, k is interpreted as the premaster secret.
In SSLv2, RSA PKCS#1 v1.5 is used for encapsulation
of an equivalent key denoted the master_key.
2.2 SSL and TLS
The first incarnation of the TLS protocol was the SSL
(Secure Socket Layer) protocol, which was designed by
Netscape in the 90s. The first two versions of SSL were
immediately found to be vulnerable to trivial attacks [40,
41] which were fixed in SSLv3 [17]. Later versions of the
standard were renamed TLS, and share a similar structure
to SSLv3. The current version of the protocol is TLS 1.2;
TLS 1.3 is currently under development.
An SSL/TLS protocol flow consists of two phases:
handshake and application data exchange. In the first
phase, the communicating parties agree on cryptographic
algorithms and establish shared keys. In the second phase,
these keys are used to protect the confidentiality and au-
thenticity of the transmitted application data.
The handshake protocol was fundamentally redesigned
in the SSLv3 version. This new handshake protocol was
then used in later TLS versions up to TLS 1.2. In the fol-
lowing, we describe the RSA-based handshake protocols
used in TLS and SSLv2, and highlight their differences.
The SSLv2 handshake protocol. The SSLv2 protocol
description [22] is less formally specified than modern
RFCs. Figure 1 depicts an SSLv2 handshake. A client
initiates an SSLv2 handshake by sending a ClientHello
message, which includes a list of cipher suites csc