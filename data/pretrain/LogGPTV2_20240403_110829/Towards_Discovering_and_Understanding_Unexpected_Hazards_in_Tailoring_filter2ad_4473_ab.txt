### New Understanding and New Hazards
We reverse-engineered 30 widely-deployed Android AVDs (Antivirus Defenders) and developed a framework to conduct the first comprehensive empirical study of their design logic. Our study uncovered new hazards in critical operations such as malScan, engineUpdate, and other mission-critical functions of Android AVDs.

### Measurements and Implementation
We thoroughly measured various types of malScan mechanisms on Android and then designed and developed targeted evasion techniques against antivirus software using Fast Fourier Transform (FFT) and signal steganography. For the hazards identified in engineUpdate, we not only measured the duration of the null protection window across different hardware devices but also analyzed the Android AOSP (Android Open Source Project) source code to understand the program logic that creates this vulnerable period. We then developed a model checker to automatically verify the existence of these hazards in all Google Android versions from v1.5 to v4.4.4, as well as in vendor-customized OS images.

### Industrial Impact
Given the severity of these hazards and the significant impact of current Android AVDs (with around one billion user downloads), we promptly reported our findings to antivirus vendors in 16 countries and proposed mitigation designs. Additionally, the engineUpdate hazard not only affects AVD apps but also impacts other Android apps that require continuous running or monitoring, such as Mobile Device Management (MDM) apps and Intrusion Prevention Systems (IPS). Therefore, we reported the hazard and suggested feature enhancements to the security team at Google, who confirmed our findings and responded immediately.

## 2. Background

### 2.1 AVD Background
Android is an operating system built on the Linux kernel, consisting of four software layers: System Libraries, Android Runtime, Application Framework, and Applications. In addition to the native Linux access control mechanism, Android provides a fine-grained permission mechanism for all apps, including third-party AVDs.

Android uses a standard template process called Zygote for the warm-up phase of all Dalvik Virtual Machine (DVM) processes. Zygote is the parent process for all DVM processes, including those of AVDs. Each AVD is assigned a unique user ID (UID) at installation, and the file system's access control bits are set accordingly. Group ID (GID) numbers are assigned based on the requested permissions. For example, if an AVD needs to scan files on the SD card, it must request the `READ_EXTERNAL_STORAGE` permission, after which the system adds the relevant GID (1028) and places the process in the `AID_SDCARD_R` group.

The current Android system uses the Binder interprocess communication (IPC) mechanism for efficient message passing via Intents. Intents can be used to start activities, services, and deliver/receive broadcasts. The system delivers various broadcast intents for system events to registered apps/services. An AVD app typically listens to specific broadcast intents by registering a broadcast receiver in the `AndroidManifest.xml` file or programmatically in the code. For instance, an AVD app might register for the `BOOT_COMPLETED` intent to relaunch after the system boots up, or for `PACKAGE_ADDED` events to monitor newly installed apps.

### 2.2 AVD Behavior Analyses

#### 2.2.1 AVD Behavior Analysis Framework
We selected 30 popular AVDs from Google Play in February 2014, with a total of about one billion user downloads. These AVDs were chosen based on their overall protection rankings according to AV-Test Reports from January to April 2014. To better understand the internal design of virus detectors on the Android platform, we developed a comprehensive analysis framework.

Our framework, illustrated in Figure 1, includes a Dynamic Tester, Static Code Analyzer, and Environment Information Collector to gather relevant information from both the Android framework and the Linux layer.

- **Dynamic Tester**: Interacts with AVDs to test runtime behavior. We used Python and shell scripts to integrate ADB, Monkey-Runner, and DDMS tools from Android Studio. Monkey-Runner sends user and system events for testing, while DDMS collects execution traces for further analysis.
  
- **Static Code Analyzer**: Decompiles APKs of AVDs to analyze required permissions and registered intent actions. We build control flow graphs (CFGs) from disassembled Dalvik bytecode using baksmali and Androguard. Most AVDs are not highly obfuscated, making the reverse engineering process straightforward.

- **Environment Information Collector**: Analyzes the Android framework and Linux layer to discover public information leakage channels that can help infer AVDs' running status. For the Linux layer, we parse file system and process information. For the Android framework layer, we analyze relevant APIs to collect information about AVDs' running status. After automated testing and manual verification, we identified several information leakage channels, listed in Table 2, which are valuable for determining vulnerable periods of running AVDs.

#### 2.2.2 Intents Registered and Permissions Claimed
Table 3 lists the types and frequencies of registered intent actions and claimed permissions for the 30 AVDs. Our analysis shows that current AVDs register many interesting permissions for privileged operations, such as `KILL_PROCESSES` to kill suspicious background processes and `ALERT_WINDOW` to pop up urgent alerts. All AVDs listen to the `BOOT_COMPLETED` event to provide complete protection after booting and obtain `WAKE_LOCK` to periodically wake up the CPU for monitoring. Events like `PACKAGE_ADDED` and `PACKAGE_REMOVED` are registered to monitor newly installed/updated APKs. However, we identified a loophole in the `engineUpdate` operation that unexpectedly nullifies AVDs' protection.

### Table 2: Information Leakage Channels Used to Infer AVDsâ€™ Running Status
| Explanation | ID Probing Channels |
|-------------|---------------------|
| Leaks DVM processes meta info (e.g., UID, PID, process name) | ActivityManager.getRunningAppProcesses() |
| Leaks DVM process memory info (e.g., nativePSS, dalvikPrivateDirty) | ActivityManager.getProcessMemoryInfo() |
| Returns a List of all the packages of installed applications | PackageManager.getInstalledApplications() |
| Leaks the names of all packages associated with a particular UID | PackageManager.getPackagesForUid() |
| Leaks the AVD or other apps' installation status | PackageManager.sendBroadcast(Pkg_add) |
| Leaks the AVD or other apps' removal status | PackageManager.sendBroadcast(Pkg_rm) |
| Leaks the AVD or other apps' update status | PackageManager.sendBroadcast(Pkg_updt) |
| Leaks device type and hardware specifications | Build.MODEL (HARDWARE) |
| Leaks tasks CPU usage info of AVD process | /proc/[AVD_pid]/task/[AVD_tid]/stat |
| Leaks memory usage info (e.g., RSS, virtual memory size) | /proc/[AVD_pid]/statm |
| Leaks all files' meta info (e.g., size, creation date) in subfolders | JNI call stat() /data/data/[AVD_package]/* |
| Leaks all running processes info including DVM and non-DVM processes | /system/bin/ps |
| Leaks network usage info (e.g., send and received packet sizes) | /proc/uid_stat/[AVD_uid]/snd(rcv) |

### Table 3: Intents Registered and Permissions Asked by AVDs
| Intent | Frequency |
|--------|-----------|
| MEDIA_REMOVED | 1 |
| MEDIA_CHECKING | 12 |
| PWR_DISCONNECTED | 17 |
| WIFI_STATE_CHANGED | 21 |
| DATE_CHANGED | 21 |
| SERVICE_STATE | 22 |
| DIAL | 22 |
| MEDIA_UNMOUNTED | 23 |
| POWER_CONNECTED | 23 |
| net.wifi.STATE_CHANGE | 25 |
| MEDIA_EJECT | 25 |
| USER_PRESENT | 25 |
| ACTION_SHUTDOWN | 26 |
| NEW_OUTGOING_CALL | 26 |

This structured and detailed approach ensures a clear and professional presentation of the research and findings.