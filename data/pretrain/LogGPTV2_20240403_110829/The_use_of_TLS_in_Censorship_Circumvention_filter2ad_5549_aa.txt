title:The use of TLS in Censorship Circumvention
author:Sergey Frolov and
Eric Wustrow
The use of TLS in Censorship Circumvention
Sergey Frolov
University of Colorado Boulder
PI:EMAIL
Eric Wustrow
University of Colorado Boulder
PI:EMAIL
Abstract—TLS, the Transport Layer Security protocol, has
quickly become the most popular protocol on the Internet, already
used to load over 70% of web pages in Mozilla Firefox. Due
to its ubiquity, TLS is also a popular protocol for censorship
circumvention tools, including Tor and Signal, among others.
However, the wide range of features supported in TLS makes
it possible to distinguish implementations from one another by
what set of cipher suites, elliptic curves, signature algorithms, and
other extensions they support. Already, censors have used deep
packet inspection (DPI) to identify and block popular circumven-
tion tools based on the ﬁngerprint of their TLS implementation.
In response, many circumvention tools have attempted to
mimic popular TLS implementations such as browsers, but this
technique has several challenges. First, it is burdensome to keep
up with the rapidly-changing browser TLS implementations, and
know what ﬁngerprints would be good candidates to mimic.
Second, TLS implementations can be difﬁcult to mimic correctly,
as they offer many features that may not be supported by the
relatively lightweight libraries used in typical circumvention tools.
Finally, dependency changes and updates to the underlying li-
braries can silently impact what an application’s TLS ﬁngerprint
looks like, making it difﬁcult for tool maintainers to keep up.
In this paper, we collect and analyze real-world TLS trafﬁc
from over 11.8 billion TLS connections over 9 months to identify
a wide range of TLS client implementations actually used on
the Internet. We use our data to analyze TLS implementations
of several popular censorship circumvention tools,
including
Lantern, Psiphon, Signal, Outline, TapDance, and Tor (Snowﬂake
and meek pluggable transports). We ﬁnd that the many of these
tools use TLS conﬁgurations that are easily distinguishable from
the real-world trafﬁc they attempt to mimic, even when these tools
have put effort into parroting popular TLS implementations.
To address this problem, we have developed a library, uTLS,
that enables tool maintainers to automatically mimic other pop-
ular TLS implementations. Using our real-world trafﬁc dataset,
we observe many popular TLS implementations we are able to
correctly mimic with uTLS, and we describe ways our tool can
more ﬂexibly adapt to the dynamic TLS ecosystem with minimal
manual effort.
I.
INTRODUCTION
The Transport Layer Security (TLS) protocol is quickly
becoming the most popular protocol on the Internet, securing
network communication from interference and eavesdropping.
Already, 70% of page loads by Firefox users make use of
Network and Distributed Systems Security (NDSS) Symposium 2019
24-27 February 2019, San Diego, CA, USA
ISBN 1-891562-55-X
https://dx.doi.org/10.14722/ndss.2019.23511
www.ndss-symposium.org
TLS [54], and adoption continues to grow as more websites,
services, and applications switch to TLS.
Given the prevalence of TLS, it is commonly used by
circumvention tools to evade Internet censorship. Because
censors can easily identify and block custom protocols [30],
circumvention tools have turned to using existing protocols.
TLS offers a convenient choice for these tools, providing
plenty of legitimate cover trafﬁc from web browsers and
other TLS user, protection of content from eavesdroppers, and
several libraries to choose from that support it.
However, simply using TLS for a transport protocol is
not enough to evade censors. Since TLS handshakes are not
encrypted, censors can identify a client’s purported support for
encryption functions, key exchange algorithms, and extensions,
all of which are sent in the clear in the ﬁrst Client Hello
message.
In fact, popular tools such as Tor have already been
blocked numerous times due to its distinctive SSL/TLS fea-
tures [49], [1], [42], [13], [60], [50], [51]. Even tools that
successfully mimicked or tunneled through other popular TLS
implementations have suffered censorship. For example, in
2016, Cyberoam ﬁrewalls were able to block meek, a pop-
ular pluggable transport used in Tor to evade censors, by
ﬁngerprinting its TLS connection handshake [21]. Although
meek used a genuine version of Firefox bundled with Tor,
this version had become outdated compared to the rest of the
Firefox user population, comprising only a 0.38% share of
desktop browsers, compared to the more recent Firefox 45
comprising 10.69% at the time [53]. This allowed Cyberoam
to block meek with minimal collateral damage.
The problem was temporarily corrected by updating to
Firefox 45, but only a few months later, meek was blocked
again in the same manner, this time by the FortiGuard ﬁrewall,
which identiﬁed a combination of SNI extension values sent by
meek and otherwise matching the signature of Firefox 45 [22].
At
time, Firefox 47 had been released, supporting a
distinguishable set of features. The rapid pace of new imple-
mentations and versions is a difﬁcult task to keep up with.
that
Another motivating example of these challenges is found
in the Signal secure messaging application [57]. Until recently,
Signal employed domain fronting to evade censorship in sev-
eral countries including Egypt, Saudi Arabia, and the United
Arab Emirates [25], [41]. However, due to a complicated
interaction with the library it used to implement TLS, we
ﬁnd that Client Hello messages sent by Signal while domain
fronting differ from their intended speciﬁcation, ultimately
allowing them to be distinguished from the implementations
they attempted to mimic and easy for censors to block1.
These examples demonstrate the difﬁculties in making
TLS implementations robust against censorship. To further
study this problem, we collect and analyze real-world TLS
handshakes, and compare them to handshakes produced by
several censorship circumvention tools. Our study examines
TLS connections from a 10 Gbps tap at the University of
Colorado Boulder, serving over 33,000 students and 7,000
faculty. We collected over 11 billion TLS connections over
a 9 month period. For each connection, we generate a hash
(ﬁngerprint) [47], [34] over unchanging parts of the Client
Hello message, allowing us to group connections that were
made by the same implementation together. We also collect
information on corresponding Server Hello messages, and
anonymized SNI and destination IPs to assist further analysis.
Using our data, we ﬁnd several problems across many
circumvention tools we analyze, including Signal, Lantern, and
Snowﬂake, and uncover less serious but still problematic issues
with Psiphon and meek. To enable other researchers to use our
dataset, we have released our data through a website, available
at https://tlsﬁngerprint.io.
To address the challenge faced by existing circumvention
tools, we have developed a client TLS library, uTLS, purpose
built to provide ﬁne-grained control over TLS handshakes.
uTLS allows developers to specify arbitrary cipher suites
and extensions in order to accurately mimic other popular
TLS implementations. Moreover, we integrate our dataset with
uTLS to allow developers to copy automatically-generated
code from our website to conﬁgure uTLS to mimic popular
ﬁngerprints we have observed.
We describe and overcome several challenges in correctly
mimicking implementations, and we implement multiple eva-
sion strategies in uTLS including mimicry and randomized
ﬁngerprints, and ﬁnally evaluate each of these strategies using
our dataset. In addition, we have worked with several existing
circumvention tools to integrate our uTLS library into their
systems.
In our data collection, we have made sure to collect
only aggregates of potentially sensitive data to protect user
privacy. We have applied for and received IRB exemption
from our institution for this study, and worked closely with
our institution’s networking and security teams to deploy our
system in a way that protects the privacy of user trafﬁc. Our
ﬁndings were disclosed responsibly to the projects and tools
impacted by our results.
Our contributions are as follows:
• We collect and analyze over 11 billion TLS Client
Hello messages over a 9 month period, as well as
5.9 billion TLS Server Hellos over several months.
We intend to continue collecting future data.
• We analyze existing censorship circumvention projects
that use or mimic TLS, ﬁnding that many are trivially
identiﬁable in practice, and potentially at risk of being
blocked by censors.
1Signal has since phased out domain fronting for unrelated reasons
• We develop a library, uTLS, that allows developers
to easily mimic arbitrary TLS handshakes of popular
implementations, allowing censorship circumvention
tools to better camouﬂage themselves against censors.
We use our collected data to enhance uTLS, allowing
automated mimicry of popular TLS implementations.
• We release our dataset through a website2, allowing
researchers to browse popular TLS implementation
ﬁngerprints, search for support of ciphers, extensions,
or other cryptographic parameters, and compare the
TLS ﬁngerprints generated by their own applications
and devices.
We present background in Section II, the design of our
collection infrastructure in Section III, and high level results
from our dataset as it pertains to censorship in Section IV.
We present our analysis and ﬁndings on circumvention tools
in Section V, and present defenses and lessons in Section VI.
We go on to describe our uTLS library in Section VII, discuss
future and related work in Sections IX and X, and ﬁnally
conclude in Section XI.
II. BACKGROUND
Fig. 1. TLS Handshake — The TLS handshake contains several messages
sent unencrypted, including the Client Hello. This allows us to ﬁngerprint
client implementations by the features and parameters they send in this initial
message.
TLS typically takes place over a TCP connection between
a client and server3.
After a TCP connection is established, the client and server
perform a TLS handshake that allows them to authenticate
identities and agree on keys, ciphers, and other cryptographic
parameters to be used in the connection. The remainder of the
connection is encrypted with the agreed upon methods and
secrets. Figure 1 shows an overview of the TLS 1.2 handshake.
The ﬁrst message in the TLS handshake is a Client Hello
message. This message is sent in the clear, and allows the
client to specify features and parameters that it supports. This
includes what versions of TLS the client supports, a list of
supported cipher suites and compression methods, a random
2https://tlsﬁngerprint.io
3Although TLS can happen on top of other protocols (such as UDP), for
the purposes of this paper, we focus on TLS over TCP.
2
Client HelloServer HelloCertificateKey ExchangeKey ExchangeChange Cipher SpecFinishedChange Cipher SpecFinishedClientServernonce to protect against replay attacks, and an optional list
of extensions. Extensions allow clients and servers to agree
on additional features or parameters. While there are over 20
extensions speciﬁed by various TLS versions, we pay extra
attention to the contents of few of them in this paper, which
we use as part of the Client Hello ﬁngerprint.
Server Name Indication (SNI) allows a client to specify
the domain being requested in the Client Hello, allowing the
server to send the correct certiﬁcate if multiple hosts are
supported. As this is sent before the handshake, SNIs are sent
unencrypted.
Supported Groups This extension speciﬁes a list of sup-
ported mathematical groups that the client can use in key
exchanges and for authentication. For example, the client can
specify support for groups such as x25519, secp256k1 to
specify support for Curve25519 and the NIST P-256 Koblitz
curve for use in ECDHE key exchanges.
Signature Algorithms Clients can specify combinations of
hash and signature algorithms they support for authenticating
their peers. Traditionally these have come in the form of a
signature and hash algorithm pair, such as rsa_sha256 or
ecdsa_sha512. More recently, signature algorithms have
been expanded to specify alternate padding schemes (such as
RSA PSS).
Elliptic Curve Point Format speciﬁes the encoding for-
mats supported by the client when sending or receiving elliptic
curve points.
Application Layer Protocol Negotiation (ALPN) allows
clients to negotiate the application protocols they support
on top of TLS. For instance, a web browser could specify
HTTP/1.1, HTTP2 [7], and SPDY [15]. As these are a list
of arbitrary strings, unlike most other extensions, there is no
standard set of possible application protocols.
GREASE (Generate Random Extensions And Sustain
Extensibility) is a TLS mechanism intended to discourage
middleboxes and server implementations from “rusting shut”
due to ubiquitous static use of TLS extensibility points [8]. If
clients only ever send a subset of TLS extension values, subpar
(but still widely deployed) implementations may be tempted
to hardcode those values or parse for them speciﬁcally. If this
happens, later versions or implementations of TLS that attempt
to include additional extensions may ﬁnd that they cannot
complete a TLS connection through buggy middlebox imple-
mentations. To discourage this, GREASE speciﬁes that clients
may send “random” extensions, cipher suites, and supported
groups. Google has deployed GREASE in recent versions
of Chrome, discouraging buggy server implementations that
reject unknown extensions, cipher suites, or supported groups.
Instead, such buggy implementations would be quickly discov-
ered to not work with Google Chrome, prompting maintainers
to ﬁx the server or middlebox before it was widely deployed.
III. MEASUREMENT ARCHITECTURE
Our institution’s network consists of a full-duplex 10 Gbps
link for the main campus network, including campus-wide
WiFi trafﬁc, lab computers, residence halls, and web services.
In cooperation with our university’s networking and IT sup-
port, we deployed a single 1U server with a dual-port Intel
X710 10GbE SFP+ network adapter, with an Intel Xeon E5-
2643 CPU and 128 GB of RAM. We received a “mirror” of
the bi-directional campus trafﬁc from an infrastructure switch.
Of the packets that reach our server, we suffer a modest drop
rate below 0.03%.
We used PF RING to process packets from the NIC and
load balance them across 4-cores (processes). We wrote our
packet processing code in 1400 lines of Rust. We ignored
packets that were not TCP port 443 or had incorrect TCP
checksums, and kept an internal ﬂow record of each new
connection. Upon seeing a TCP SYN, we recorded the 4-tuple
(source/destination IP/port) in a ﬂow record table, and waited
for the ﬁrst TCP packet carrying data in the connection. We
attempted to parse this data as a TLS Client Hello message,
which succeeded 96.7% of the time. We note that this method
will miss out-of-order or fragmented Client Hello messages.
A. Collected Data
In our study, we collected 3 kinds of information from
the network,
including counts and coarse grained times-
tamps of unique Client Hello messages, a sample of SNI
and anonymized connection-speciﬁc metadata for each unique
Client Hello, and Server Hello responses. We applied for and
received IRB exemption for our collection, and worked with
our institution’s network and IT staff to ensure protection of
user privacy.
Client Hellos For successfully parsed Client Hellos, we
extracted the TLS record version, handshake version, list of
cipher suites, list of supported compression methods, and list
of extensions. When present, we extracted data from several
speciﬁc extensions, including the server name indication, el-
liptic curves (supported groups), EC point formats, signature
algorithms, and application layer protocol negotiation (ALPN).
We then formed a ﬁngerprint ID from this data, by taking
the SHA1 hash of the TLS record version, handshake version,
cipher suite list, compression method list, extension list, elliptic
curve list, EC point format list, signature algorithm list, and
ALPN list4. We truncated the SHA1 hash to 64-bits to allow it
to ﬁt a native type in our database. Assuming no adversarially-
generated ﬁngerprints, the probability of any collision (given
by the birthday paradox) in a dataset of up to 1,000,000 unique
ﬁngerprints is below 10−7. For each ﬁngerprint, we recorded
a count of the number of connections it appeared in for each
hour in a PostgreSQL database.
Connection-speciﬁc information To provide more context