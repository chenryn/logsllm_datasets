receiver and the address of the receiver (Addr R). While it is
possible to infer the address of the sender from the source
address in the network header of the request packet, we
explicitly include the address that would be used as the source
address for multi-homed hosts: If the sender uses different
networks to communicate with the receiver’s AD and the
receiver itself, the sender must separately specify the address
that it would use to communicate with the receiver.
The AD consults the receiver’s policy to determine if the
receiver is willing to receive packets from the sender (Addr S).
If yes, the AD generates an authorization proof based on
Equation (1) using Addr S and the path segment Seg S→R
that leads to Addr R (2). Additionally, the AD speciﬁes the
expiration time (ExpTime) to limit the validity of the proof.
The ExpTime can be determined from the receiver’s policy
or the AD could specify an arbitrary but small value.
The AD may generate multiple proofs so that the sender’s
packet can be veriﬁed by multiple veriﬁers. In such a case,
the AD generates a proof for each of the veriﬁer (Vi) using
a subset of segments (Seg Vi→R), because the segments can
be modiﬁed while the packet travels. Each proof is generated
using a symmetric key (ki) that the AD shares with each
veriﬁer. In Section VIII-B, we describe the choice of veriﬁers
when we discuss about the deployment locations of veriﬁers.
send(). A sender can successfully send a packet to the
receiver only if it has path segments with a valid (e.g., non-
expired) authorization proof. In a data packet to the receiver,
the sender embeds the segments (Seg S→R) and the autho-
rization proof (Proof 1≤i≤N ) to prove to the veriﬁers that the
sender has acquired the receiver’s consent:
3)
S embeds Seg R and Proof on its data packet to R:
S → R : Seg S→R | Addr A | ExpTime | N | ptr |
Proof 1≤i≤N | Data
The packet also contains ﬁelds to help the veriﬁers verify
the proof. Namely, it has Addr A, which a veriﬁer uses to
determine the shared symmetric key (ki); N to indicate the
number of proofs; and ptr to indicate the proof that
the
veriﬁer should verify. Lastly, the sender must use the source
address (Addr S) that was speciﬁed in the authorization-request
message (1) as the source address in the network header.
Otherwise, the packet would be dropped by the veriﬁer for
containing an incorrect proof.
A veriﬁer runs verify() to ensure that the proof in the
packet is valid. To this end, the veriﬁer ﬁrst identiﬁes the
symmetric key (ki) based on the AD’s address (Addr A) and the
proof (Proof i) that it veriﬁes. Then, it veriﬁes the proof using
the source address and path segment (Addr S and Seg Vi→R,
respectively) from the packet header, and ExpTime and N as
input. The veriﬁer drops the packet as invalid (i.e., without
receiver’s consent) if the proof is expired or the proof cannot
be veriﬁed correctly. Once the veriﬁer successfully veriﬁes the
proof, it increments ptr to indicate the next proof (Proof i+1)
and continues to forward the packet towards the receiver.
C. Authorization Policy
Requirements. We design the authorization policies with the
following requirements:
•
•
•
Expressiveness: It should be easy for the receivers to
express their receiving policies.
Flexibility: We would like to design the authoriza-
tion policies such that users can easily describe their
receiving policies at different granularities.
Scalability: While guaranteeing expressiveness with
the authorization policies, we need to limit the number
of policy rules that a user can have, such that ADs can
evaluate receiver’s policy efﬁciently.
Blacklist and Whitelist. We allow receivers to express their
policies as both a blacklist, to prevent speciﬁc senders from
sending trafﬁc, and a whitelist,
to indicate who can send
packets to the sender. Having only one of the lists is sufﬁcient
for the receivers to express their policies, but using both lists
provides sufﬁcient ﬂexibility to the users in expressing their
consent policies while reducing the size of their policies (i.e.,
the number of rules in the blacklist and whitelist). For example,
a receiver that only talks with a selective set of senders can
“whitelist” such hosts while a receiver that requires more
universal access can use a blacklist to ﬁlter unwanted hosts.
Simultaneously having two lists can create conﬂicts and to
resolve such conﬂicts, we create one additional ﬁeld priority.
In case of a conﬂict, a rule with a higher priority would be
enforced. Note that, rules with the same priority are processed
according to the order of freshness; a rule later inserted would
6
be executed. In summary, each entry of the two lists has the
format
(cid:104)src_IP , mask , src_port, dst_port, proto(cid:105)
⇒ (cid:104)priority, Action(cid:105)
(2)
Here, Action determines the action that the AD should
take when a sender’s request matches the corresponding policy
entry. If an entry is a blacklist entry, Action would be not
to issue a proof, while if the entry is a whitelist entry, it
determines the granularity at which a generated proof would be
valid (e.g., per-host, per-application). We provide more detail
about the granularity along with the left part of the entry in
the next paragraph.
Policy Granularity. We support network-, host-, and also
application-level policies. Network-level policies allow the
receivers to express their consent for an entire network while
host-level policies are for individual hosts. In terms of Equa-
tion (2), these policies can be speciﬁed by specifying src_IP
and mask to reﬂect the target network or host and setting
dst_port and proto to be a wildcard (‘∗’). In addition, we
allow application-level policies, which additionally require
the destination port and protocol
information. We support
application-level policies to maximize the ﬂexibility on net-
work isolation.
Basically, we do not consider per-ﬂow policies since ﬂow
information does not enrich the policy expressiveness beyond
the application-level policies, yet can signiﬁcantly increase the
number of policies. Speciﬁcally, source port is typically chosen
arbitrarily (i.e., ephemeral ports) and can change (i.e., address
translation); thus, src_port is marked as a wildcard by default.
Nevertheless, the receiver can regulate the sender’s trafﬁc on a
per-ﬂow basis by specifying the Action of the corresponding
whitelist policy entry to be for a single ﬂow.
NAT. The AD should avoid any ambiguity in host identiﬁca-
tion, and thus the policy must clearly specify each host with a
globally unique address identiﬁer. For the hosts behinds NAT
devices, their address might be opaque if the multi-tenancy en-
vironment hosting them only supports private address. In such
a case, each host can be distinguishable with the translated
public IP address together with the forwarding port.
V.
IMPLEMENTATION
We implement a prototype SVLAN on top of SCION [44],
a future Internet architecture that supports native segment
routing, for testing the general functionality and performance.
In addition, since SCION is designed for inter-domain segment
routing, we expand the SCION data plane with an SVLAN
extension header that conveys the intra-domain path segment
and authorization proof, enabling communication at an end-
host (and even application) granularity. The main reasons
of choosing SCION as the underlying architecture for our
implementation are 1) it already supports an embedded public-
key infrastructure (PKI) that satisﬁes our assumption described
in Section III-C, 2) it also supports segment routing along with
the separation of control and data planes, 3) it has a ﬂexible
packet design that supports various extension headers, and 4)
it is easy to construct a testing environment in SCIONLab1.
Fig. 4: The header format of the SVLAN extension.
Control Plane. In the latest version of the SCION codebase2,
an endhost employs the SCION daemon, called sciond,
to interact with the SCION control plane: it initiates a path
request message (i.e., SegReq()) to acquire path segments
necessary to build forwarding paths toward a destination, when
the sender attempts a new communication establishment. The
path service, a control-plane application similar to an SDN
controller, replies to the requests by aggregating path segments,
verifying them, and providing them to the requester. Once
sciond successfully gathers the path segments and constructs
forwarding paths, the sender puts a forwarding path into the
each packet header and transmits the packets.
We extend the SCION control-plane applications to enable
the getSegment() protocol: sciond operates as a part of
SVTEP, managing the getSegment() request and reply, and
the path service functions as an AD. When an endhost attempts
a connection establishment, sciond requests path segments
and authorization proof to the path service. The path service
consults the database that contains the network isolation policy
to determine if the sender and receiver are in a same VN. If
yes, the path service patches up path segments that lead to
the receiver, along with the corresponding authorization proof,
and replies back to sciond.
Data Plane. We also modify the SCION data-plane code to
realize the send() and verify() protocols. When sciond
successfully acquires path segments and authorization proofs,
SVTEP creates a SVLAN tunnel, generates SVLAN-enabled
SCION packets, and forwards the packets. The SCION net-
work protocol,
implemented as the snet class, provides
interfaces for handling the SCION packet transmission. Similar
to the general UNIX socket, it supports SCION network APIs
such as Listen, Accept, Bind, Read, and Write, which enable
SCION connection establishment, SCION packet generation,
and interpretation. Here, we add APIs that extend the SCION
header with SVLAN information. For instance, by adding a
Write overriding method that expands a SCION header with an
SVLAN extension, it supports both the existing SCION header
generation and the SVLAN-enabled SCION header generation
simultaneously.
To generate SVLAN-enabled SCION packets, we leverage
the extension header ﬁeld in the SCION header structure to
convey the SVLAN extension. This header design brings the
following advantages. First, the SVTEP can easily retrieve the
SVLAN header and process the veriﬁcation. The HdrLen in
1https://www.scionlab.org
2https://github.com/scionproto/scion
7
NextHdrHdrLenExtTypeSecTypePath Segment (Rseg)Authorization Delegate Addr. (Aaddr)ExpTimeMACMAC (continued)0715233163CommonheaderAddressesForwardingPath (segments)SVLANExtensionLayer 4 and DataSCION headerTABLE I: Processing times (in µs) for getSegment()
requests from authorized and unauthorized senders.
Legitimate requests
Illegitimate requests
# of clients Min. Max.
Avg. Min. Max.
Avg.
1e3
1e4
1e5
1e6
4.8
4.7
4.8
4.9
8.4
9.6
11.0
11.3
6.0
6.0
6.8
6.7
4.0
3.2
4.0
4.0
7.8
9.7
9.6
10.2
6.0
6.0
6.2
6.2
the SCION common header points out the exact offset where
the extension header exists, thereby improving the processing
delays on SVTEPs. Second, by separating the SVLAN-based
routing from the inter-domain routing, it keeps the compatibil-
ity to the underlying network infrastructure. Lastly, it simpliﬁes
the SVLAN implementation without a signiﬁcant change in
inter-domain routing infrastructure.
Extension Header. Figure 4 details the SVLAN extension
header structure. The header begins with three bytes of general
extension header ﬁelds [44]. SecType speciﬁes the type of
MAC that are used for generating the authorization proof, such
as CMAC or HMAC. Note that, in our prototype, we primarily
use the 128-bit AES-CMAC [53].
The next ﬁeld contains the path segment that steers the
packet to the receiver. Since the table lookup in routing is
known to be a bottleneck for high-speed data transmission, we
anticipate not to keep a forwarding table. Instead, following the
stateless routing principle in SCION, we design Seg R such that
it directly indicates the interface identiﬁer (IFID) to which the
packet should be forwarded. Furthermore, to enable network
isolation at an application granularity, it also indicates the
binding port number on which the recipient application listens.
In conclusion, the Seg R consists of two-bytes-long IFID and
Port. The following Addr A speciﬁes the IP address of the
AD, so that helps SVTEP to retrieve the kA.
ExpTime is a timestamp generated by the AD, which
represents the expiration time of the authorization proof. The
timestamp is encoded as a 4-bytes unsigned integer, expressing
Unix time with a second granularity. SCION supports time
synchronization with second-level precision. That is, it sat-
isﬁes the last assumption we described in Section III-C. As
default, we set ExpTime = T + 300s, where T is the time
a AD receives a getSegment() request. And ﬁnally, an
authentication tag is following. The length of MAC is variable
depending on the type of MAC function and k, but in our
implementation, we set len(MAC) = 128 bits.
VI. EVALUATION
Now, we evaluate the performance of SVLAN by scru-
tinizing the following properties: processing overhead for
getSegment() and verify(), latency inﬂuence, and ca-
pacity overhead.
A. Microbenchmarks
We ﬁrst conduct microbenchmarks for the key operations
in SVLAN. The operations are performed and measured
Fig. 5: Forwarding performance of a veriﬁer.
on commodity machines equipped with Intel Xeon 2.1 GHz
processors and an XL710 40 GbE QSFP+ network adopter.
getSegment(). To investigate the performance of autho-
rization, we quantify the processing time required for proof
generation by the AD; it includes the time for membership
checking (receiver’s consent) and the MAC computation. For
the scalability measurement, we vary the size of the consent
database by increasing the number of clients up to 1 million.
Each client has 1000 authorized senders. Table I shows the
minimum, maximum, and average results for both authorized
and unauthorized getSegment() requests. The measure-
ments are performed 2000 times for each database.