在我们实现PEIR(PersonalEnvironmentalImpactReport，个人环境影
响报告）中是非常重要的。PEIR允许人们在微观层面观察自已如何
影响环境以及环境如何影响自己：your.flowingdata(YFD)是一个正在
开发的项目，允许用户通过Twitter来收集自己的数据，后者是一个
微博客服务。
在PEIR项目中，我是其前端开发工程师，主要工作是负责用户界面
(U)和数据可视化。对于YFD，我是唯一参与者，因此我的职责可能
有些不同，但我还是集中于研究可视化方面。虽然PEIR和YFD在数
据类型、收集和处理上区别甚大，但是它们的目标是相似的。PEIR
1319
---
## Page 1321
和YFD都是为个人提供信息；但为个人提供信息又都不是它们的最
终目标。相反地，它们都是为了激发人们的兴趣，了解即自己每天
做出的扶择如何为生活带来重大影响，然后开始探讨个人数据。在
对PEIR和YFD有了简单的背景知识后，我将带着这些想法，讨论个
人数据收集、存储和分析。然后我将深入探讨PEIR和YFD数据可视
化背后的设计过程，通常这些统称为个人数据可视化。最后，我们
想向人们显示他们自已的个人数据之美。
个人环境影响报告（PIR）
PEIR是由加州大学洛杉矶分校的嵌入式网络传感中心(Cnterfor
EmbeddedNetworkedSensing开发的，或者更准确地说，是由城市
传感小组(UbanSensinggroup)开发。我们重点利用日常的移动技术
（如手机）来收集关于周围和自已的数据，因此人们可以对如何与
身边的事物进行交互有更好的理解。例如，DietSense是一个在线服
务，它允许人们自我监测饮食选择以及进一步向饮食专家咨询：
FamilyDynamics帮助家庭和生活教练记录一个家庭每日交互的关键
特征，如户外驻扎和家庭聚餐；Wallkability帮助居民和行人，提倡
通过观察发表他们对于附近的步行适宜性和与公共交通的联系的看
法。2所有这些项目使得人们可以只通过手机参与到社区活动中。
我们利用手机内置的传感器，如摄像头、GPS和加速度计来收集数
据，通过这些设备来提供信息。
PEIR采用了类似的原则。例如某个用户下载一个名为Campaignr的
很小的软件到他的手机，该软件可以在后台运行。随着该用户每日
的活动一一比如在田径道慢跑、并车上下班、去杂货店买点东西，
手机每2分钟就会上传GPS数据到PEIR的中央服务器，包括纬度、
经度、高度、速率和时间。我们利用该数据来预估个人对坏境的影
响和排放。不需要环境污染传感器；相反地，我们使用在很多手机
上已经具备的功能一—GPS，然后传递这些包含“环境”信息的数据
（如天气）来构建环境模型。最后，我们对环境影响和排放数据进
行数据可视化。这个阶段的挑战是向人们传达数据中绝大部分人都
不熟悉的含义。每周释放1000千克的碳意味着什么？1000千克是很
多还是很少？我们需要谨记我们的用户和目标，因为用户和目标驱
动着系统设计，从可视化直到数据收集和存储。
[1]_MassObservation是一个英国社会研究组织。它通过500名未经过
训练的志愿者的观察来记录英国人的日常生活。请参考
http://en.wikipedia.org/wiki/Mass_Observation。
1320
---
## Page 1322
[2].CENS城市感知，具体参见http：//urban.cens.ucla.edu/。
your.flowingdata(YFD)
PEIR使用的是运行在后台的定制软件，YFD则要求用户主动通过
Twitter输入数据。Twitter是一个微博客服务，它提出了一个简单的
问题：您现在在做什么？人们可以张贴，或者更确切地说，可以通
过桌面应用、邮件、即时通信告诉别人他们正在做的事；而且最重
要的是（就YFD而言）SMS，它意味着人们可以通过手机和别人交
流。
YFD利用了Twitter的普遍性，因此人们可以在任何地方通过Twitter
发送SMS消息来交流个人数据。用户目前可以跟踪饮食习惯、体
重、睡眠、情绪，以及简单地通过发布特定形式的消息来跟踪他们
什么时候上洗手间。像PEIR一样，YFD向用户表明的是：这些小事
可以对我们的生活方式产生深远的影响。在设计过程中，我们依然
考虑用户体验。什么将会激励用户频繁地手工输入数据？我们如何
使得数据收集对于用户来说尽可能地简单？一旦数据被记录下来，
我们应该如何和用户交流？最后，我将从数据收集并始谈起。
个人数据收集
个人数据收集和科学数据收集在一定程度上有所区别。个人数据收
集通常较为不正式，而且不是发生在具备控制条件下的实验室里。
人们收集现实世界中的数据，而在现实世界中，存在干扰、网络连
接故障或者访问受限的计算机。用户不一定是数据专家，所以如果
出了问题（这通常是不可避免的），他们可能不知道如何调整来解
决问题。
因此，从用户角度，我们需要使得数据收集变得尽可能简单。它应
该是无干扰的、直观的且易于访问的，这样数据收集才更有可能成
为日常生活的一部分。
使数据收集成为日常生活
这是我选择Twitter作为YFD数据代理的主要原因，它可以通过电话
或者计算机连到数据库。Twitter允许用户通过一些不同的渠道发布
Twitter消息(teet)。用户可以通过移动电话发布Twitter消息，由于这
一点，用户可以在任何地方通过电话发送SMS消息记录数据，这意
味着人们可以随时记录实际情况，而不需要等到他们可以访问计算
1321
---
## Page 1323
机时才开始记录。如果需要等待，人们很可能会忘记。因此，易于
访问获取是很关键的。
人们可以通过E-mail而不是Twitter来完成一些相似的事情，因为很
多手机允许人们给E-mail发送SMS，而这实际上正是YFD的最初实
现方式。然而，我们回到数据收集作为日常生活的一个基本部分。
成百上千方的人们已经在频繁地使用Twitter，由于这一点，其挑战
性已经被部分削弱了。人们确实也在很频繁地使用E-mail，而且比
起Twitter，人们也有可能更习惯于使用E-mail。但是这二者在本质
上还是很有区别。在Twitter上，人们发布自己正在做的事，每天更
新好多次信息。Twitter最初被创建也仅仅是因为这个原因。某个人
可能正在吃三明治、出去散心或者在看电影。成千上万的人每天发
布这类Twitter消息。而另一方面，E-mail本身就意味着其主要是一
些更有价值的信息。绝大多数人不会给朋发发E-mail，告诉朋友他
们正在看一个电视节目一—尤其不会每天或者每个小时告诉朋友们
这些事情。
通过利用Twitter得到的这种发布频率，我们期望它能够用于数据收
集。我尝试着使得在YFD上记录数据和在Twitter上的感觉一样。举
个例子，如果有个人吃意大利香肠的三明治，他发送了一条消息：
“吃了意大利香肠三明治”（aesalamisandwich)。通过这种方式，数据
收集就变成了交谈方式。用户不需要学习像SQL一样新的语言。相
反地，他们只需要记住关键字及其对应值。在前一个例子中，关键
字是“ate”，值是“salamisandwich”。为了跟踪睡眠，用户简单地发
送一个关键字：睡觉时是“goodnight”，醒来时是“gmorning”。
在某些方面，用PEIR频繁发布信息的挑战要比在YFD上小一些。因
为PEIR是在后台自动收集数据，用户只需要通过点击几下按钮，就
可以启动其手机上的软件。开发那种软件本身存在一定的困难，但
那就是另一回事了。
异步数据收集
对于PEIR和YFD，我们发现异步数据收集实际上是必要的。当人们
遇到一些感兴趣的事情发生后，他们会希望输入和上传数据。在
YFD，人们希望能够给他们的Twitter消息增加时间戳，而PEIR用户
想要手工上传GPS数据。
1322
---
## Page 1324
正如之前所述，创建YFD的初始想法是人们在遇到一些事情时，会
希望输入数据来记录它们。这是使用Twitter的好处和目的。然而，
很多人没有通过手机使用Twitter，因此他们需要等到可以用电脑时
才登录Twitter。即使是那些确实给Twitter发送SMS消息的用户通常
也会忘记记录数据；有些人只是想在每天结束前输入所有的数据。
不用说，YFD现在支持时间戳。数据入口的语义尽可能地贴近交谈
仍然很重要。为了实现这个目标，用户可以给他们的Twitter消息添
加时间戳，比如“早上6点吃烤鸡和土豆"(aeroastchicken andpotatoes
at6：00pm)或者“晚上11点晚安"（godnightat23：00）。时间戳语义
上只是简单地在Twitter消息的最后添加一个“athh:mm”。我还发现同
时支持标准格式和军事格式的时间截是有用的。最后，当用户输入
一个时间截，YFD将会记录该时间的最近出现频度，因此在先前的
“goodnighr"例子中，YFD会输入昨天晚上的时间点。
PEIR的初始设计也只是为了“当时"(ithemoment)的数据收集。正如
前述，Campaignr运行在用户的手机上，周期性把GPS数据（每20分
钟上传一次）上传到中心服务器。这对一个每天运行PEIR的用户来
说，他本身只需要很少的付出，就可以收集成千上万的数据点。一
旦在手机上安装PEIR应用，用户只是简单地按动几下按钮就可以启
动应用。然而，几乎从一开始，我们就发现不能依赖100%可达的网
络连接，因为几乎总有地区是服务无法覆盖的。最简单虽然也是最
幼稚的做法是只有当手机可以上网时才收集和上传数据。这种做法
的代价是我们可能会失去大量的数据。相反地，我们通过缓存把数
据存储在手机的本地内存，直到手机可以重新连上网络。我们还提
供了另一个方案来收集数据，而不需要同步上传这些数据。
这种做法的一个不足之处在于，期望人们在事件发生时收集数据是
不合理的。人们会忘记收集数据或者在当时不方便收集数据。在以
上任何情况下，提供用户在后期也能够输入数据的功能是很重要
的，这一点又反过来影响了数据流的下一步设计。
数据存储
对于YFD和PEIR，很重要的一点是应该记住：一旦数据被收集了，
我们应该如何处理这些数据。通常情况下，数据库机制和数据库模
式都是在一念之间设计的，研究人员在处理过程中会渐渐后悔，其
原因或者是因为他们当时的决策使现在的数据处理变得很困难，或
者是因为数据库不具有扩展性。YFD在这方面的选择不是特别困
1323
---
## Page 1325
难。我们在其他项目中使用MySQL，而YFD通常只涉及较简单的插
入和选择语句，因此很容易搭建系统。此外，数据是人工输入的
-而不是像PEIR那样连续上传，因此数据库表的大小在开发早期
不是问题。主要的考虑是当增加新的数据字段时，我希望能够扩展
数据库模式，因此在创建数据库模式时考虑到这一点。
另一方面，PEIR需要更细心的数据库开发。我们每几分钟就执行成
千上万的基于地理的计算，因此我们采用了PostGIS，为PostgreSQL
数据库增加地理对象支持。虽然MySQL提供了GIS和空间扩展，我
们认为从PEIR的需求考虑，把PostGIS和PostgreSQL结合在一起是更
健壮的方案。
以上的描述可能过于简化了我们的数据库设计过程，这里我需要谈
一点背景。我们的团队是由10个左右的研究生组成，每个人都有自
己的研究方向。正如你所料，每个人也都致力于PEIR的不同模块的
工作。这种分工方式极大地影响了我们的工作方式。PEIR的数据最
初是非常分散的。我们没有使用统一的数据库模式：在需要多个数
据库时，就创建多个数据库，而且并没有遵循任何特定的设计模
式。无论谁在PEIR的早中期加入PEIR项目，他都会对去哪里查找数
据、查找什么数据以及应该和谁联系感到困惑不已。我这么说是因
为我自己正是在这个时候加入PEIR。为了减轻数据分散带来的问
题，我们最终冻结了所有的开发工作。一个在PEIR的各个模块都做
过并发的同事，很灵活地把每个人的代码和数据库表结合起来。本
次代码和模式的凝合（consolidation）在用户体验开发之前完成是非
常必要的，而且这一点在后期中越来越明显。现在回想起来，在早
期对数据存储方面付出更多的努力来进行精心设计是很值得的，而
这一点也正是研究生研究的本质。
协调和代码凝合对于YFD不是问题，因为YFD只有我一个开发人
员。我可以很容易改变数据库模式、用户接口和数据收集机制。我
采用了Django，一个基于Python语言的Web框架，它采用了
MVC(Model-View-Control，模型-视图-控制器）模式，支持敏捷高
效并发。但是，我确实需要每件事都自己完成。因为我们团队的每
个小组成员在统计、计算机科学、工程、GIS和环境科学上的多样