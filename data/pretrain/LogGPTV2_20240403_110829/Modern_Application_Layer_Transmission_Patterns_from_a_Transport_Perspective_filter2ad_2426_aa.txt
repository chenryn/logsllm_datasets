title:Modern Application Layer Transmission Patterns from a Transport Perspective
author:Matt Sargent and
Ethan Blanton and
Mark Allman
Modern Application Layer Transmission Patterns
from a Transport Perspective(cid:2)
Matt Sargent1, Ethan Blanton3, and Mark Allman2
1 Case Western Reserve University, Cleveland, OH, USA
2 International Computer Science Institute, Berkeley, CA, USA
3 Independent Scientist, South Bend, IN, USA
Abstract. We aim to broadly study the ways that modern applications use the
underlying protocols and networks. Such an understanding is necessary when
designing and optimizing lower-layer protocols. Traditionally—as prior work
shows—applications have been well represented as bulk transfers, often preceded
by application-layer handshaking. Recent suggestions posit that application evo-
lution has eclipsed this simple model, and a typical pattern is now a series of
transactions over a single transport layer connection. In this initial study we ex-
amine application transmission patterns via packet traces from two networks to
better understand the ways that modern applications use TCP.
1 Introduction
In this study we seek to broadly understand the ways that modern applications use the
underlying protocols and networks. In particular, we are interested in the transmission
patterns of applications as viewed at the transport layer. While previous studies have
documented these issues to some degree, we are motivated by the following two points.
– We aim to ensure that our mental models of application-imposed behavior are up-
to-date. For instance, [14] suggests that while application behavior varies, when
simulating Internet trafﬁc a reasonable rule of thumb is to use connection sizes
described by the log-normal distribution. In other words, a TCP connection is es-
tablished, a given number of bytes sent, and then the connection is torn down. This
behavior approximates traditional applications like HTTP/1.0 and FTP. However,
some in the community have stated their belief that applications’ use of TCP has
evolved to a more transaction-oriented nature wherein an application re-uses con-
nections for a number of small transactions (e.g., as part of a web application) [5].
– Second, good network engineering crucially depends on an empirical understand-
ing of the system. For instance, intrusion detection systems must understand the
difference between an abandoned connection and a quiescent application. Another
example is understanding the importance of the so-called “last window” problems
in TCP (e.g., [6]). The amount of justiﬁable additional complexity in TCP to deal
with such problems depends on whether there is one “last window” in a connection
(e.g., the bulk transfer case) or there are numerous “last windows” (e.g., at the end
of every transaction in a connection with many transactions).
(cid:2) Work supported in part by NSF grants CNS-0831535 and CNS-1213157.
M. Faloutsos and A. Kuzmanovic (Eds.): PAM 2014, LNCS 8362, pp. 141–150, 2014.
c(cid:2) Springer International Publishing Switzerland 2014
142
M. Sargent, E. Blanton, and M. Allman
Table 1. Data overview
Time
Length (hrs)
Total Conns.
Conns. w/o Data
Port Filtered
Remaining
CCZ
ICSI
2/11–3/12 9/12–3/13
1,176
6.5M 56.9M
2.6M 27.9M
1.4M
3.9M 27.6M
98
-
Table 2. Prevalence of N periods at various po-
sitions
Location
CCZ ICSI
No N
31% 51.2%
14.4% 18.3%
Internal-only
32.3% 20.7%
Trailing-only
Internal & Trailing 22.3% 9.8%
As an initial check on these two points we examine packet traces from the Lawrence
Berkeley National Laboratory (LBNL) and the International Computer Science Institute
(ICSI). For each connection we compute the maximum duration between data segments.
Bulk transfers would tend to show sub-second gaps, while multiple distinct transactions
would likely show a larger maximum gap driven by application behavior. We ﬁnd that
in both datasets, the proportion of connections with maximum gaps of more than one
second and the duration of the gaps increases over time. In the LBNL dataset roughly
55% of the connections have a maximum silent period of at most 275 msec in both 2003
and 2013. The distributions then diverge with 4% more connections containing a gap
of at least 1 second in 2013 than in 2003 and 12% more connections having a gap of at
least 10 seconds. Similarly, in the ICSI data, the distribution of the maximum gap per
connection is similar for 2007 and 2013 data up to 1 second—covering about two-thirds
of the connections. However, 13% more connections have a maximum gap of at least
10 seconds in 2013 than in 2007. While this analysis is simple and anecdotal it suggests
an in-depth exploration of modern application behavior is warranted.
We use packet-level traces from two vantage points—a small research laboratory and
a small residential network—as the basis of an initial study into application patterns
from TCP’s perspective. We contribute both an application agnostic methodology and
an initial understanding of modern TCP-based applications.
2 Related Work
There are two general classes of related work. First, there is a vast and long-standing
vein of work that characterizes and models speciﬁc application protocols. These studies
span much time and many protocols, from the largely outdated (e.g., [12]) to a rich
understanding of early web trafﬁc (e.g., [3,4]) to modern applications (e.g., [17]). A
second class of previous work attempts to identify applications based on the behavior
they exhibit on the network (e.g., [8,9]). We do neither of these things, preferring to
understand the trafﬁc patterns applications impose on the transport protocol.
Modern Application Layer Transmission Patterns
143
3 Data
We analyze the two sets of packet traces summarized in Table 1.1 The ﬁrst dataset is
gathered from the border of a residential ﬁber-to-the-home network, the Case Connec-
tion Zone (CCZ) [1]. The CCZ connects roughly 90 residences (200-300 users) with
bi-directional 1 Gbps ﬁber. While the connection is abnormal for US residential users,
we ﬁnd in previous work that actual use of the bandwidth is modest—topping out at
roughly 10 Mbps in the typical case—and the application mix is in line with previous
studies of residential network users [15]. Our second dataset is gathered from the bor-
der of the International Computer Science Institute, and covers roughly 100 users. In
both cases we gather data between the 11th–17th of each month. We capture all packets
from our ICSI vantage point. Our measurement capabilities within the CCZ network
are more modest and we collect a one-hour trace from a random time for each day. As
we develop in more detail in [15], the CCZ measurement apparatus does not often drop
packets during the collection process, with no detectable measurement-based loss in
the majority of the traces and the loss rate reaching 0.013% in the worst case. The trac-
ing apparatus at ICSI experiences more measurement-based loss than the CCZ monitor,
with an average loss rate of roughly 2.1%. We account for measurement-based loss in
our analysis by either not considering missing packets or inferring their existence (by
noting progression of TCP’s sequence space for missing packets), as appropriate.
We prune the datasets before use for two reasons. First, we do not consider connec-
tions that do not have at least one byte of data ﬂowing form the monitored network
to the remote network. This rule largely removes scanning and backscatter. Further, in
the ICSI dataset we noticed two large trafﬁc anomalies that turned out to be part of
an independent experiment: (i) a large crawl of the whois databases and (ii) a large
backhauling of data to Amazon’s EC2. These activities are sufﬁciently voluminous to
affect our results. Therefore, since this trafﬁc is also abnormal, we ﬁlter it from further
analysis. Table 1 shows the number of connections we remove from further analysis.
4 Dividing Connections
Our general strategy for analyzing application behavior is to take stock of the amount
and temporal location of silence in TCP connections. Under this model, traditional bulk
data transmission would show few instances where a connection was not actively trans-
mitting data in one or both directions except at the beginning and end of a connection.
Of course, our approach is not fool-proof. For instance, streaming may look like bulk
transfer in that there are few silent periods, but may be pushing only as fast as required
for the given media and not as hard as a bulk transfer. While this is also an important
aspect of application behavior to understand, we leave it for future work.
Given our data, we do not have details of the precise application operations. Addi-
tionally, our lack of application payload precludes a study based on application protocol
semantics.2 We approximate application behavior with the following process:
1 Note, the LBNL data we present in § 1 is anecdotal in that each trace covers only a single hour.
We believe it is useful for motivating the problem, it is not sufﬁcient for deeper analysis and
therefore not used in the remainder of the paper.
2 Additionally, encrypted trafﬁc is not amenable to such analysis.
144
M. Sargent, E. Blanton, and M. Allman
ON/OFF Periods: As a ﬁrst cut we divide connections into ON and OFF periods with
respect to the transmission behavior of the local host (the host close to our monitor) in
the connection. Each connection begins in an OFF period and transitions to an ON period
when we observe the local host sending a data segment. Transitioning from an ON
period to an OFF period happens when two conditions are met: (i) all outstanding data
sent by the local host is acknowledged (ACKed)3, and (ii) either the local host sends an
ACK containing no data or at least 5 msec passes without the local host sending another
data segment. Note that once we are in an ON period we are able to deal with loss from
the local host by advancing the TCP sequence number based on local packets being sent
after the loss or by noticing a gap in the sequence space once rule (i) is met and all of
the outstanding data has been ACKed. Lost packets during an ON period will not change
the length of the ON period that we detect. Rule (ii) ensures that the local TCP does not
have application data waiting to be sent. A bare ACK indicates directly that the TCP
buffer is empty. The 5 msec rule is otherwise necessary to account for TCP’s slow start
behavior [7,2]. Consider a local host that sends a single segment; when that segment
is ACKed, criteria (i) is met. However, in slow start, we expect the local host to use
the ACK to open the congestion window and transmit additional data. Therefore, data
coming within a short amount of time should be considered part of TCP’s dynamics and
not part of the application’s dynamics. We studied the length of the OFF periods without
criteria (ii) to ﬁnd a reasonable threshold, and thresholds of 1–10 msec show similar
results. The 5 msec threshold is a somewhat arbitrary choice within that range.
Reﬁnement: Two-Way Trafﬁc: The ON/OFF analysis only accounts for trafﬁc in one
direction (from the local to the remote). This approach does not reveal the applications’
full complexities, but reconstructing the TCP state of hosts distant from a monitor is
known to be difﬁcult [13]. Therefore, we use the following heuristics to glean enough
information about returning data to conduct our analysis without reconstructing the en-
tire state of the remote host. We couple the ON/OFF classiﬁcation above with informa-
tion about the data ﬂow from the remote host to the local host to reﬁne our classiﬁcation
into four types: Local-only periods are ON periods where we do not observe data sent
by the remote host, Remote-only periods are OFF periods where we observe data sent
by the remote host, Both periods are ON periods where we also ﬁnd data sent by the
remote host, and N one periods are OFF periods where we ﬁnd no data sent from the
remote host. N periods are a ﬁrst approximation of the silent periods we describe at
the beginning of this section. We ﬁnd that R periods hide silence at times. Consider the
case where a single data segment is sent from the remote just after the start of an OFF
period and then the connection goes silent for a long period of time. In this case, we
classify the entire period as R, when most of the period is in fact silent. We remedy
this by terminating an R period—at the point of the last data segment arrival—if twice
the minimum observed RTT for the connection elapses without another data segment
from the remote host. Twice the minimum RTT provides some robustness to network
and TCP behaviors while ensuring that the model transitions in a timely fashion. An N
period is inserted for the remaining duration of the shortened R period. R periods that
do not trigger this rule may still contain some silence, but the duration of this error is
3 Note, this criteria naturally keep original transmissions and their retransmissions in the same
period.
Modern Application Layer Transmission Patterns
145
bounded by twice the minimum RTT. Together, these heuristics provide a conservative
estimate of the silent periods. Any N period in the analysis is a true silent period, but
there may be short application silences hidden in L, R, or B periods.
As a next step, we build a map for each connection that consists of a string corre-
sponding to the order of the various periods in the connection. For instance, a map of
N LR indicates an initial OFF period, then a period of local data transmission and the
connection ending with a period of data transmission from only the remote host. We
ﬁnd over 155 k and 579 k unique maps within our CCZ and ICSI datasets, respectively.
This shows the that applications display signiﬁcant variety in their behavior. Over mil-
lions of connections, we ﬁnd an average of 25 and 50 connections share each map in the
CCZ and ICSI datasets, respectively. Further, we ﬁnd that there are 12 “popular” maps,
or maps that make up at least 1% of the connections, in the CCZ dataset and 10 popular
maps in the ICSI dataset. Three maps—N BN , N LR and N LRN —are popular in both
datasets. Popular maps account for a total of 63% of the connections in both datasets.
These results underscore the vast heterogeneity in application behavior observed.
Next, we analyze where N periods fall within connections. Since many connections
start with an N period following the three-way handshake due to TCP dynamics, we
ignore initial N periods for this analysis. Table 2 shows the prevalence of N periods in
various locations within the connection. First, we ﬁnd that about one half to two thirds
of the connections in both datasets contain periods where the application is silent. We
believe this illustrates that the majority of the connections are not simple bulk trans-
fers. Further, we ﬁnd that of the connections with silent periods a plurality have only
“trailing” silent periods (e.g., persistent HTTP keeping a connection open in case fur-
ther requests are forthcoming, but ultimately closing with no such requests). Finally, we
ﬁnd that between a quarter and a third of the connections have an internal silent period,
indicating an application pause. We present in-depth analysis in the next two sections.
5 Trailing Silent Periods
We ﬁrst study trailing silent periods, or connections that transfer data and then go silent
before terminating. Persistent HTTP follows this model, as connections speculatively
persist after the “ﬁnal” response in case the browser subsequently needs more objects.
This mechanism aids performance by allowing subsequent transactions to avoid the
overhead of starting a new connection [11]. As we note above, 54.6% and 30.5% of
connections from CCZ and ICSI, respectively, end with a silent period. Note that these
connections may not violate the bulk transfer model of TCP behavior, as they may
behave as bulk transfers that simply do not close immediately when activity completes.
The left plot in Figure 1 shows the distribution of the duration of trailing silent pe-
riods. Trailing silence of less than 1 second happens in about 30% and 20% of the
connections for CCZ and ICSI, respectively. These likely represent applications ﬁnish-
ing processing tasks before closing the connection. On the other hand, we ﬁnd that just
under half of the trailing silent periods last longer than 10 seconds in both datasets.
This likely indicates the application speculatively leaving a connection open in case
further work materializes—which never happens in these cases. These trailing silent
periods can be lengthy, with nearly 20–25% of the periods extending beyond 2 minutes.
Further, 10% of the trailing silent periods exceed 4 minutes in each dataset.
146
M. Sargent, E. Blanton, and M. Allman
F
D
C
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0