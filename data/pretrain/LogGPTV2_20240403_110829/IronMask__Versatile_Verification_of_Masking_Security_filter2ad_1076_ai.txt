from (cid:2)x2. These shares must then be known by the simulator
in order to decide if the system has a solution (and to evaluate
the probability to get (cid:2)hp(cid:2)(cid:2)
m = (cid:2)0). Moreover, these
shares are by construction the shares of indexes in I2.
The exact same proof apply to I1 by taking the uniform
distribution for D(cid:3)x2 and considering the expressions of the
form (9) (together with the the probes on R1).
(cid:6)(cid:6)
Direction 2: The sets (I1, I2) are sufﬁcient to simulate (cid:2)P
.
Suppose that we can perfectly simulate the tuples of algebraic
expressions (cid:2)P1, (cid:2)P2 using sets of input shares I1 on input
sharing (cid:2)x1 and I2 on (cid:2)x2 respectively as described in step 4
above. Let two new sets of input shares ˜I1 = [n] on (cid:2)x1 and
˜I2 = [n] on (cid:2)x2.
Observe ﬁrst that we can perfectly simulate (cid:2)P (cid:6)(cid:6) using the
sets of input shares ˜I1 and I2. In fact, in the algebraic expres-
in (cid:2)P (cid:6)(cid:6) of the form (8), the coordinates
sion of each probe p
of the (cid:2)h(p(cid:2)(cid:2)
i )’s can all be perfectly simulated using I2 since by
hypothesis we can perfectly simulate (cid:2)P2. Also, the randoms
in (cid:2)r1 are perfectly simulated by generating uniform random
values, and all shares of input (cid:2)x1 are simulated using the full
input sharing in ˜I1 = [n]. Since we can perfectly simulate each
(cid:6)(cid:6)
term in the expression of p
i , then we can perfectly simulate the
(cid:6)(cid:6)
i and hence we can perfectly simulate (cid:2)P (cid:6)(cid:6) using ˜I1
expression p
(cid:6)(cid:6)
i
and I2. Similarly, we can perfectly simulate (cid:2)P (cid:6)(cid:6) using the sets
of input shares I1 and ˜I2 = [n] by observing the expressions
of p
(cid:6)(cid:6)
i of the form (9).
Thanks to [11, Lemma 7.5] (which demonstrates that if a
set of probes can be simulated from different sets of inputs
shares, then it can also be simulated by the intersection of
these sets), we get that (cid:2)P (cid:6)(cid:6) can be perfectly simulated using
the sets of input shares ˜I1 ∩ I1 = I1
˜I2 ∩ I2 = I2,
which proves that by perfectly simulating the tuples (cid:2)P1, (cid:2)P2
using I1, I2, we can perfectly simulate (cid:2)P (cid:6)(cid:6) using I1, I2. This
concludes the proof for this direction.
and
II. CONSTRUCTIVE ALGORITHM
The enumerative approach of Section IV-B generates a
lot of tuples which are trivial non-failures because they do
not contain enough shares to be failures, or their shares are
masked by random variables. Thus, we designed a constructive
algorithm to only generate potential failures. More precisely,
our constructive algorithm aims at generating incompressible
failure tuples, which are deﬁned in [13] as follows:
Deﬁnition 4 (Incompressible failure tuple). A tuple (cid:2)P is an
incompressible failure tuple if it is a failure, and if no tuple
(cid:2)P (cid:6) ⊂ (cid:2)P is a failure itself. (⊂ between two tuples means that
all wires of (cid:2)P (cid:6) are included in the tuple (cid:2)P ).
Note: The notion of incompressible failure tuple was used
in VRAPS [13] to speed up the enumerative veriﬁcation of
random probing properties. We investiguated this technique,
and improved on the implementation of [13] but observed that
given the current high performance of our implementation, the
optimization from [13] in not advantageous in our case (see
the full version of the paper for more details).
We will start by describing our constructive algorithm for
the well-adapted case of LR-gadgets and then explain how to
extend it to NLR-gadgets. The idea is that given wires which
are all of the form (5), a failure tuple of probes on these
wires has a speciﬁc form: it contains some wires with input
shares, and if those input shares are masked by randoms, it
contains some additional wires to cancel out those randoms.
The expression masked by randoms means that the perfect
simulation of the considered probe amounts to generating a
uniform random value. This is typically the case in a tuple of
probes where a random value appears only once in one of the
expressions, which then can be used to mask the expression
of that probe. To cause a failure event and avoid masking
the expressions, additional wires using the same randoms are
added to cancel them out.
We start by giving the intuition of the algorithm on the 3-
share refresh gadget presented in Figure 1b. We ﬁrst build a
map (Table IX), called COLUMNS, whose keys are the input
shares and randoms of the gadget considered, and whose
values are all
the wires that depend on those inputs and
randoms (a wire will be displayed in several columns if it
depends on several shares and/or randoms). To build a failure
tuple that leaks 3 shares, we can pick one wire from each of
the a0, a1 and a2 buckets, say (a0, a1+r0,a2+r1) for
17
158
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:23:26 UTC from IEEE Xplore.  Restrictions apply. 
TABLE IX: COLUMNS map for the constructive generation of incompressible tuples of Figure 1b
a0
a0
input shares
a1
a1
a2
a2
r0
r0
randoms
r1
r1
r2
r2
a0 + r0
a1 + r0
a2 + r1
a1 + r0 + r1
a1 + r0 + r2
a2 + r1 + r2
a0 + r0
a1 + r0
a0 + r0 + r1
a2 + r1
a2 + r1 + r2
a0 + r0 + r1
a1 + r0 + r2
a2 + r1 + r2
Algorithm 5 Our constructive algorithm to generate failures.
G is the gadget we are considering and n is the number of
shares required for a tuple to be a failure.
1: procedure UNMASKTUPLE(G, S, (cid:2)P , unmask index)
2:
3:
4:
if (cid:2)P is a failure then
S ← S ∪ { (cid:2)P}
if (cid:2)P is incompressible then
if unmask index > length( (cid:2)P ) then
UNMASKTUPLE(G, S, (cid:2)P , unmask index+1)
(cid:2)PGauss ← GAUSSELIMINATION( (cid:2)P )
if (cid:2)PGauss[unmask index] contains no randoms then
r ← any random from (cid:2)PGauss[unmask index]
for each wire w of G containing r and not in (cid:2)P do
5:
6:
7:
8:
9:
10:
11:
12:
13:
(cid:2)P (cid:6) ← (cid:2)P ∪ w
14:
UNMASKTUPLE(G, S, (cid:2)P (cid:6), unmask index+1)
15:
16: procedure CONSTRUCTIVEFAILURESGENLR(G, n)
17:
18:
19:
20:
S ← ∅
for each tuple (cid:2)P in L do
UNMASKTUPLE(G, S, (cid:2)P , 0)
return
return
return
return S
instance. This tuple is not a failure because the shares a1 and
a2 are masked by the randoms r0 and r1 (the two random
values appear only once in the tuple and can be used to mask
the corresponding expressions). We thus pick a wire from the
r0 bucket and add it to the tuple, say a0 + r0 + r1 (which
happens to cancel r1 as well as r0). The resulting tuple is
(a0,a1+r0,a2+r1,a0+r0+r1), which is a failure. By
doing this for every possible wire of each column, we can
generate all failures of the gadget of Figure 1b.
Algorithm 5 introduces more formally this procedure for
LR-gadgets. This algorithm lists all of the tuples composed
of one element from each input share column (line 18); we
note the resulting list L. Note that those tuples might have
some duplicates since some wires appear in several columns:
these duplicates are removed while building the tuples (which
implies that the tuples in L contains possibly less than n
elements).
Then, for each tuple in L, the recursive procedure UN-
MASKTUPLE adds wires to the tuple so as to cancel the
randoms that mask its input shares. This procedure takes at
argument the circuit G, the set of incompressible tuples already
computed S, a tuple (cid:2)P that needs to be turned into a failure
and an integer unmask index that contains the next index of (cid:2)P
that we should try to unmask. First, UNMASKTUPLE checks
if (cid:2)P is a failure (line 2). To do so, we can use the procedure
SIS LR (Algorithm 1). If (cid:2)P is a failure, we then check if it
is incompressible (line 3) by checking if any tuple (cid:2)P (cid:6) ⊂ (cid:2)P is
already in S. Ignoring line 8 for now, a Gaussian elimination
is then performed on (cid:2)P (line 9). If the unmask indexth element
of the resulting tuple (cid:2)PGauss contains no random, then there is
nothing to unmask, and we can move on to the next index
(which was actually already done by line 8). Otherwise, we
select any random r of (cid:2)PGauss and try to add to (cid:2)P each wire that
contains r (i.e., each wire of the r column of the COLUMNS
map, and move to the next unmask index (lines 12 to 15).
As a matter of fact, unmasking each element of (cid:2)P one by
one misses some failures. This is the reason for line 8, which
basically skips the unmasking of the element of (cid:2)P at index
unmask index to move directly to index unmask index+1.
Consider for instance a 2-share gadget and the tuple (cid:2)P =
(a0+r0, a1+r1+r0). After the Gaussian elimination, the
1st element of (cid:2)P is r0, and lines 12 to 15 of UNMASKTUPLE
will thus try to add a wire containing r1 to the tuple. However,
this would be missing the fact that the 2nd element of (cid:2)P ,
a1+r1+r0, already contains r1 and thus somewhat unmasks
a0+r1. By skipping the ﬁrst element of (cid:2)P , we will then
try to unmask its second element, by adding the wire r1 to
the tuple for instance. This will produce the tuple (a0+r0,
a1+r1+r0,r1), which is a failure, and would have been
missed without the recursive call of line 8.
This constructive method is exhaustive since any incom-
pressible failure tuple (cid:2)P can be built by taking one elements in
each column (and possibly remove duplicates) and then adding
necessary elements to remove the masks. More precisely,
consider a minimal sub-tuple of (cid:2)P which contains one element
(cid:6) will be listed in line 8. The
of each column. This sub-tuple (cid:2)P
other coordinates of (cid:2)P are necessary to remove the masks
remaining after an application of the Gaussian elimination
(cid:6) (otherwise (cid:2)P would not be incompressible). Since
to (cid:2)P
Algorithm 5 is exhaustive in the removal of those masks, it
will necessarily build (cid:2)P at some point.
Implementation: Our implementation of UNMASKTUPLE
in Algorithm 5 does not perform a full Gaussian elimination
at every recursive call. Instead, the elimination is performed
on the ﬂy, similarly as we do for the enumerative algorithm
(see Section IV-D). Likewise, we keep a variable input shares
containing the input shares already revealed by the current
tuple (cid:2)P , which enables to check if (cid:2)P is a failure in constant
time, without having to call SIS LR: we can simply check if
input shares contains n input shares.
Extension to gadgets with non-linear randomness: The
procedure UNMASKTUPLE of Algorithm 5 only considers
gadgets with linear randomness. To adapt it for gadgets with
18
159
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:23:26 UTC from IEEE Xplore.  Restrictions apply. 
Limitations: Many tuples are generated multiple times
by this constructive algorithms, each time through a different
path in the recursion. For instance, on the refresh gadget of
Figure 1b, the tuple (a0,a1+r0,a2+r1,a1+r0+r1) can
be generated by selecting (a0,a1+r0,a2+r1) as the initial
tuple (line 18 of Algorithm 5), and then adding a1+r0+r1
at line 14. However, the same tuple can also be generated by
selecting (a0,a1+r0+r1,a2+r1) line 18 and then adding
a1+r0 line 14. This phenomenon is even more impactful
when dealing with multiplication gadgets, because multiple
shares of the same input will appear on the same wire,
resulting in larger columns (in particular in the “inputs” part
of the COLUMNS map), which can lead to a worst complexity
than simply enumerating all tuples.
Additionally, when checking properties t-NI with t < n− 1
or other properties where a tuple can reveal less than n −
1 input shares and yet be a failure (e.g., SNI, RPC, RPE),
the constructive algorithm is often slower than the traditional
enumerative one. Regardless of the property being checked and
the failure condition, the constructive algorithm enumerates
(cid:3)
(cid:4)
all tuples. However, with the constructive algorithm, for an n-
n
share gadget, to generate tuples of that leak k shares, all
k
possible combination of shares must be tested. For instance,
on our running example of Figure 1b, to generate all failures
leaking 2 shares, we would generate all failures leaking the
1st and the 2nd shares, then the ones leaking the 1st and the
2nd share, and, ﬁnally, the ones leaking the 2nd and the 3rd
share. This formula is also true when checking NI and RP,
except that in that case, all n shares must leak, which means
that only
= 1 combination needs to be tested.
(cid:3)
(cid:4)
n
n
non-linear randomness, we proceed in a similar manner as in
SIS NLR (Algorithm 2): a ﬁrst step unmasks randoms that
are used to refresh outputs, while a second step unmasks ran-
doms that are used to refresh inputs. We call CONSTRUCTIVE-
FAILURESGENNLR this version of our constructive algorithm
and deﬁne CONSTRUCTIVEFAILURESGEN as the function
that chooses between CONSTRUCTIVEFAILURESGENLR and
CONSTRUCTIVEFAILURESGENNLR depending on wether its
input gadget contains linear or non-linear randomness.
Application: Algorithm 6 shows how to use CONSTRUC-
TIVEFAILURESGEN to compute all failures of a gadget. While
the latter returns all incompressible failures, to evaluate the
failure function coefﬁcients for random probing notions (RPC,
RPE1, RPE2, RPS(cid:5)), we need to count the number of all
failures, regardless of their incompressibility. To do so, we
expand all
incompressible failures into regular failures by
adding wires one by one (using the procedure EXPANDTUPLE,
whose pseudo-code is trivial and left out for conciseness).
However, doing so will lead to the same tuple being generated
multiple times: for instance, if the tuples (x1, x2) and
(x1, x3) are both incompressible failures, expanding them
will generate (x1, x2, x3) and (x1, x3, x2), which
are the same tuple. We thus use a hash table (called Sfailure in
Algorithm 6, and abstracted as a set for simplicity) to store the
tuples that we generate and prevent counting multiple times
the same tuple. In practice, our hash function returns the sum
of the hashes of the indices of wires in the tuple, which results
in a fairly low number of collisions.
Algorithm 6 GETCOEFFSRPCONSTR returns an array of cmax
cells where the kth index contains the number of failure tuples
of size k in G
procedure GETCOEFFSRPCONSTR(G, cmax)
coeffs ← empty array
t ← number of shares in G
Sincompr ← CONSTRUCTIVEFAILURESGEN(G, t)
Sfailure ← ∅
for k = 1 to cmax do
← all tuples of Sincompr of size k
(cid:6)
S
failure
for each tuple (cid:2)P of Sfailure do
∪ EXPANDTUPLE( (cid:2)P )
(cid:6)
failure
Sfailure ← S
coeffs[k] ← number of tuples in Sfailure
← S
(cid:6)
failure
(cid:6)
failure
S
return coeffs
Remark: We initially tried to count the failures from the
incompressibles failures without generating all of them. This
problem can be formulated as follows: Let W be a set of
integers (the wires). Let S be a set of subsets of W of arbitrary
sizes (the set of incompressible failures). How many subsets of
W of size k are super-sets of elements of S (those subsets are
non-incompressible failures)? This is a problem of inclusion-
exclusion, and solving it requires computing the intersections
|S|
of all pairs of sets in the powerset of S. Since there are 2
such sets, this approach would be prohibitively expensive for
any gadget with more than a few incompressible failures.
19
160
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:23:26 UTC from IEEE Xplore.  Restrictions apply.