of ﬁeld Hi. Therefore, |Hsip| = |Hdip| = 232, |Hspt| =
Qn
|Hdpt| = 216, |Hprt| = 28. The total number of possible
i=1 |Hi|.
ﬂows, which is also the cardinality of U, is
• A set of ﬂowsets F : {F1, F2,··· , Fn} is said to be a
partition of a ﬂowset X iﬀ (Eq. 1) none of the ﬂowset
in F is empty , (Eq. 2) ﬂowsets in F are pair-wise
disjoint, and (Eq. 3) the union of all ﬂowsets in F
In particular, F is complete if it is a
equals to X.
partition of U.
.
(cid:5)= ∅
Fi
Fj = ∅
\
n[
Fi
Fi = X
i=1
∀ 1 ≤ i ≤ n
∀ 1 ≤ i (cid:5)= j ≤ n
(1)
(2)
(3)
F1: Traﬃc from private IP
F1 = r1 ∪ r2 ∪ r3, where
r1 =
r2 =
r3 =
F2: FTP not from 10.1./16
F2 = (x1 ∪ x2) ∩ ¬x3, where
x1 =
x2 =
x3 =
Table 3: Sample Flowsets.
Figure 3: Visualization of Table 3.
Figure 4: Disjoint Flowsets of Figure 3.
• We denote Fc as the counter associated with a ﬂowset
F . The counter is updated when a matching packet is
observed and can take any unit, e.g., packets or bytes.
(cid:2)
We also denote Fw the actual weight of F , and F
w the
(cid:2)
measured weight of a ﬂowset F . Measuring Fc and F
w
are equivalent if keeps a counter for all packets.
2.3 Underlying Data Structure
The string representation of ﬂowset is not an ideal form for
complicated set operations. Following the approach used to
encode ﬁrewall rules and access lists in recent studies [21, 37],
we use binary decision diagram (BDD) [7] as the underly-
ing data structure for ﬂowset (referred to as ﬂowset label
hereafter). BDD is an eﬃcient data structure that is widely
used in formal veriﬁcation and simpliﬁcation of digital cir-
cuits. A BDD is a directed acyclic graph that can com-
pactly and canonically represent a set of boolean expres-
sions. Every bit of IP header corresponds to a BDD variable.
For example, we encode the source IP block 128.0.0.0/4 as
(cid:2)
SIP (x1x
4), whose corresponding BDD is shown in Fig-
ure 5a. Similarly, the BDD for source IP 192.0.0.0/4 is de-
picted in Figure 5b. In a BDD graph, the non-terminal ver-
tices represent the variables of the boolean function, and the
two terminal vertices represent the boolean values 0 (True)
and 1 (False). Note that only the ﬁrst 4 bits are used and
the 24 masked bits are omitted in the BDD.
(cid:2)
2x
(cid:2)
3x
ﬂow (Nf ) is 104 as every bit variables is used.
• The number of BDD variables used, V , is a constant
deﬁned by the size of the deﬁning variables. For the
5-tuple superﬂow predicate, it is 104 (8 bits protocol,
2x32 bits source and destination IP address and 2x16
bits source and destination port).
• The number of BDD nodes used to describe a 5-tuple
• The number of BDD nodes used to describe a 5-tuple
superﬂow (Ns) has an upper-bound of 104. This is
because BDD ignores the unused bit variables, e.g.,
the masked bits in CIDR IP address block.
• Since a ﬂowset is formed by set operation among a
number of N superﬂows, the number of BDD nodes
used to describe any ﬂowset has an upper-bound that
is determined by the total number nodes used to deﬁne
each ﬂow. The actual number of nodes can be smaller
since BDD keeps the canonical form.
• To determine if a packet matches a ﬂowset, we extract
the relevant bits from the packet header and construct
a corresponding BDD. Using the logical implication
operation (⇒), we can determine if the packet is part
of the ﬂowset.
3. FLOWSET-BASED QUERY ANSWERING
ENGINE (FQAE)
(a)
(b)
(c)
Figure 5: BDD Encoding.
Performing set operations such as intersection, union, not,
and implication using BDDs is straightforward. Figure 5c
depicts the union of Figure 5a and Figure 5b. Note that
because of canonical property of BDD, the union, actually
use less variables than either of them in this particular case.
Due to space limitation, we refer readers to [3] for detailed
information about BDD and only discuss those directly rel-
evant to this paper in the following.
Figure 6: Flowset-based Query Answering Engine.
A major task of traﬃc measurement is to facilitate answer-
ing user queries about the characteristics of certain traﬃc
aggregates. These traﬃc aggregates can have very diﬀer-
ent granularities. For example, one might query for the
FTP traﬃc to certain hosts (ﬁne granularity) or a partic-
ular ingress-egress pair of the network (coarse granularity).
(details in Section 3.2). One can certainly imagine using
other packet classiﬁcation techniques to assist in identifying
the matching sub-query. However, the tradeoﬀs in memory
and speed need to carefully explored. Please refer to [17] for
a comparison of some packet classiﬁcation algorithms.
3.1 Disentangle User Queries
Algorithm 1 generates disjoint sub-queries (D) from a list
of user queries (Q). It works by adding the ﬂowsets in Q to
D in sequence. For every ﬂowsets in Q, we compare it with
ﬂowsets in D in sequence. A pair of ﬂowsets must satisfy
one of the following relationship:
identical (line 3), subset
(line 6), superset (line 10), overlap (line 12), and disjoint
(line 16). Therefore, one can use set operations to separate
the overlapped ﬂowsets. Note that Algorithm 1 initiates D
with one ﬂowset – the universe (U) (line 1). As user queries
might not cover the universe, this step ensures the resulting
D is complete (a partition of U). Consequently, every packet
is guaranteed to match exactly one ﬂowsets in D.
Figure 4 illustrates the eﬀect of running Algorithm 1 on
the two queries in Table 3 (shown in Figure 3). The two
ﬂowsets deﬁning the original queries have nonempty inter-
section. They divide the universe into four disjoint ﬂowsets.
Note that all operations in Algorithm 1 are performed using
the underlying BDD-based data structure.
3.2 Reduce Matching Candidates
Since the disjoint sub-queries D and is a partition of the
universe U, every packet is guaranteed to match exactly one
ﬂowset. However, the naive approach — comparing a packet
against each ﬂowset until a match is found — is still not an
eﬃcient solution when the number of ﬂowsets in D is large.
As discussed in Section 1, current measurement systems col-
lect ﬁne-grained per-ﬂow traﬃc statistics and leave it to in-
dividual applications to perform post-processing to extract
the desired information. This approach is not scalable since
modern networks could easily observe millions of ﬂows.
We make the observation that the total number of poten-
tial user queries can be far smaller than the number of ﬂows
it observes. If the measurement system has suﬃcient knowl-
edge about the queries, it only needs to maintain aggre-
gated state information that pertains to the queries, thereby
avoiding the expensive per-ﬂow states. In the following sec-
tion, we present the Flowset-based Query Answering En-
gine (FQAE) that is capable of answering any user queries
on traﬃc aggregates while maintaining a minimum number
of counters. FQAE contains two fundamental blocks – a
measurement engine that collects per-ﬂowset traﬃc statis-
tics and a program engine that takes a list of user queries
(Q) as input and controls what to measure. The user queries
are written using FCL as illustrated in Table 3.
Algorithm 1: D ← Disentangle(Q).
input : A list of queries Q (|Q| = n > 0)
output: A list of disjoint ﬂowsets D
D.append(U);
foreach x in Q do
for p in D do
if x <> p then
break ;
else if x ⊂ p then
D.append(p \ x) ;
x);
D.replace(p,
break ;
else if x ⊃ p then
T
x ← x \ p ;
x (cid:5)= ∅ then
T
D.append(p \ x) ;
x
D.replace(p,
x ← x \ p ;
else continue ;
else if p
p) ;
// identical
// subset
// superset
// overlap
// disjoint
D.append(x) ;
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
To collect per-ﬂowset traﬃc statistics, one needs to in-
crease the counter associated with a ﬂowset upon observ-
ing a matching packet. This is similar to the classic packet
classiﬁcation problem, but has the following distinct diﬀer-
ences. In packet classiﬁcation, the goal is to ﬁnd the best
matching rule. Multiple rules can match a given packet, but
a conﬂict resolution mechanism, e.g., longest-match-ﬁrst in
routing or ﬁrst-match-ﬁrst in packet ﬁltering, can be used to
determine the best matching rule. Once the best-matching
rule is found, other rules can be safely ignored. In our case,
one packet might need to be counted for multiple matching
ﬂowsets since queries might have non-empty intersections.
One naive approach is to match a packet against all queries
one-by-one. This is ineﬃcient when the number of queries
is large. As illustrated in Figure 6, our approach is to ﬁrst
disentangle the user queries to disjoint sub-queries such that
each packet matches exactly one sub-queries (details in Sec-
tion 3.1). Consequently, we only need to ﬁnd the only
matching sub-query and increment its counter. We follow
the similar approach as in EGT-PC [4] to achieve this goal
Figure 7: HashReduce Algorithm.
FQAE introduces a hash table based mechanism called
HashReduce to reduce the number of comparisons required
to ﬁnd the matching ﬂowset. We use a hash function that
simply extracts several bits from the header ﬁelds. For ev-
ery possible hash value H, we build a BDD Hbdd, which
describes a ﬂowset containing all ﬂows with this particu-
lar value in the header. The table of matching candidates
(TMC) can then be built by ﬁnding all ﬂowsets in D that
has non-empty intersection with Hbdd. Consider Figure 7 as
an example that uses the ﬁrst bit from source IP and the
ﬁrst bit of destination IP ﬁeld. The hash function, by ex-
tracting two bits, divides the universe into four quadrants,
each intersects with a few ﬂowsets in D.
The HashReduce mechanism follows the similar spirit as
EGT-PC [4], which uses one or two header ﬁelds to ﬁnd can-
didate matching rules in n-tuple packet ﬁlter. Furthermore,
it presents a tradeoﬀ between memory and lookup speed
that can be fully customized. Using more bits in the hash
function incurs more memory overhead but can reduce the
number of candidates in table entries.
3.3 Collect and Report Statistics
Collecting traﬃc statistics is a simple two-step process.
Upon receiving a packet, FQAE ﬁrst uses the same hash
function to extract the bits from the packet header and
lookup the TMC for a list of candidate ﬂowsets. Then,
FQAE compares the packet to the ﬂowset sequentially until
a matching ﬂowset is found.
During the measurement process, FQAE performs traﬃc-
aware optimization by sorting the order of candidates in
the TMC based on the number of packets observed earlier
(TraﬃcSort). Note that this seemingly simple optimization
is possible only because FQAE make ﬂowsets fully disjoint.
If ﬂowsets have non-empty intersections, ﬁnding the opti-
mal order is NP-complete, and one will have to resolve to
heuristics, as some have attempted in the context of packet
ﬁltering [1, 18].
Based on the statistics collected for each sub-queries, an-
swering user queries requires a simple aggregation. Note
that the fundamental diﬀerence here, as compared to per-
ﬂow statistics, is that sub-queries are generated according
to user queries and we expect the number to be signiﬁcantly
smaller than the number of ﬂows in traﬃc.
Algorithm 2: Multi-Resolution Tiling.
input : P : a packet enumerator
input : R: a ﬂowset deﬁnes the search range
output: Eleph: A list of identiﬁed elephants
Eleph ← {};
M ice ← {} ;
D ← Partition (R) ;
repeat
FQAE (D, P , S) ;
for F in D do
if Fw = θ then
// no elephants
// elephant
D.replace (F , Partition (F )) ;
D.replace (M ice, union (M ice));
until ElephantsFound ;
1
2
3
4
5
6
7
8
9
10
11
12
13
14
4. HEAVY HITTER IDENTIFICATION
Heavy hitters, or elephants, are the largest-n ﬂows in
terms of weight in network traﬃc. Alternatively, one can
deﬁne heavy hitters as ﬂows with a weight larger than a
threshold θ. These two notions are equivalent if the thresh-
old θ equals the weight of the nth largest ﬂow. In this paper,
we use the latter deﬁnition unless mentioned otherwise. We
further assume the weight of a ﬂow f , fw, is deﬁned rela-
tively as a percentage of total traﬃc. Identiﬁcation of heavy
hitters are of particular interest to network management.
For example, traﬃc engineering often focus on re-routing
the few heavy hitters instead of worrying about the large
number of mice [15].