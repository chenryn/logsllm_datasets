## 序列化机制
序列化 _（Serialization）_ 是指将数据结构或对象状态转换成字节流 _（例如存储成文件、内存缓冲，或经由网络传输）_
，以留待后续在相同或另一台计算机环境中，能够恢复对象原来状态的过程。序列化机制在Java中有着广泛的应用，EJB、RMI、Hessian等技术都以此为基础。
### 序列化
我们先用一个简单的序列化示例来看看Java究竟是如何对一个对象进行序列化的：
    public class SerializationDemo implements Serializable {
        private String stringField;
        private int intField;
        public SerializationDemo(String s, int i) {
            this.stringField = s;
            this.intField = i;
        }
        public static void main(String[] args) throws IOException {
            ByteArrayOutputStream bout = new ByteArrayOutputStream();
            ObjectOutputStream out = new ObjectOutputStream(bout);
            out.writeObject(new SerializationDemo("gyyyy", 97777));
        }
    }
如果熟悉PHP的同学应该知道，这个对象在经过PHP序列化后得到的字符串如下
_（因为PHP与Java的编程习惯有所区别，这里字段访问权限全改为了`public`，`private`和`protected`从表现形式上来说差不多，只是多了些特殊的标识而已，为了减少一些零基础的同学不必要的疑惑，这里暂不讨论）_
：
    O:17:"SerializationDemo":2:{s:11:"stringField";s:5:"gyyyy";s:8:"intField";i:97777;}
其中，`O:17:"..."`表示当前是一个对象，以及该对象类名的字符串长度和值，`2:{...}`表示该类有2个字段
_（元素间用`;`分隔，键值对也分为前后两个元素表示，也就是说，如果是2个字段，则总共会包含4个元素）_
，`s:11:"..."`表示当前是一个长度为11的字符串，`i:...`表示当前是一个整数。
由此可知，PHP序列化字符串基本上是可人读的，而且对于类对象来说，字段等成员属性的序列化顺序与定义顺序一致。我们完全可以通过手工的方式来构造任意一个PHP对象的序列化字符串。
而该对象经过Java序列化后得到的则是一个二进制串：
    ac ed 00 05 73 72 00 11  53 65 72 69 61 6c 69 7a    ....sr.. Serializ
    61 74 69 6f 6e 44 65 6d  6f d9 35 3c f7 d6 0a c6    ationDem o.5() {
                    public Long run() {
                        return computeDefaultSUID(cl);
                    }
                }
            );
        }
        return suid.longValue();
    }
先顺带提一嘴，`AccessController.doPrivileged()`会忽略JRE配置的安全策略的检查，以特权的身份去执行`PrivilegedAction`接口中的`run()`，可以防止JDK底层在进行序列化和反序列化时可能出现的一些权限问题。这些内容与本文主题无关，不多作详细解释，感兴趣的同学可以去看看Java的Security包和其中的java.policy、java.security文件内容。
重点来了，计算SUID时，会先创建一个`DataOutputStream`对象，所有二进制数据写入其包装的`ByteArrayOutputStream`中：
  1. 写入类名 _（UTF8）_
         dout.writeUTF(cl.getName());
  2. 写入类访问权限标识
        int classMods = cl.getModifiers() &
         (Modifier.PUBLIC | Modifier.FINAL |
             Modifier.INTERFACE | Modifier.ABSTRACT);
     Method[] methods = cl.getDeclaredMethods();
     if ((classMods & Modifier.INTERFACE) != 0) {
         classMods = (methods.length > 0) ?
             (classMods | Modifier.ABSTRACT) :
             (classMods & ~Modifier.ABSTRACT);
     }
     dout.writeInt(classMods);
  3. 如果不是数组类型，写入实现接口的接口名，按接口名排序
        if (!cl.isArray()) {
         Class[] interfaces = cl.getInterfaces();
         String[] ifaceNames = new String[interfaces.length];
         for (int i = 0; i < interfaces.length; i++) {
             ifaceNames[i] = interfaces[i].getName();
         }
         Arrays.sort(ifaceNames);
         for (int i = 0; i < ifaceNames.length; i++) {