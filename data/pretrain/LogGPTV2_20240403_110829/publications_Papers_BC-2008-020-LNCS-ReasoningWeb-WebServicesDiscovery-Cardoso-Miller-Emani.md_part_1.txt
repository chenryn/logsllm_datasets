Web Services Discovery Utilizing Semantically
Annotated WSDL
Jorge Cardoso1, John A. Miller2, and Savitha Emani2
1 SAP Research CEC Dresden
Chemnitzer Strasse 48
01187 Dresden, Germany
PI:EMAIL
2 LSDIS Lab, Department of Computer Science
University of Georgia
Athens, GA 30602 – USA
PI:EMAIL, PI:EMAIL
Abstract. To make semantic Web services accessible to users, providers use
registries to publish them. Unfortunately, the current registries use discovery
mechanisms which are inefficient, as they do not support discovery based on
the semantics of the services and thus lead to a considerable number of irrele-
vant matches. Semantic discovery and matching of services is a promising ap-
proach to address this challenge. This paper presents an algorithm to match a
semantic Web service request described with SAWSDL against semantic Web
service advertisements. The algorithm is novel in three fundamental aspects.
First, the similarity among semantic Web service properties, such as inputs and
outputs, is evaluated using Tversky’s model which is based on concepts
(classes), their semantic relationships, and their common and distinguishing fea-
tures (properties). Second, the algorithm, not only takes into account services’
inputs and outputs, but it also considers the functionality of services. Finally,
the algorithm is able to match a semantic Web service request against adver-
tisements that are annotated with concepts that are with or without a common
ontological commitment. In other words, it can evaluate the similarity of con-
cepts defined in the context of different ontologies.
Keywords: We Semantic Web, Web services, Ontologies.
1 Introduction
Semantic Web services are the new paradigm for distributed computing. They have
much to offer towards the integration of heterogeneous, autonomous and large scale
distributed systems. Several standards such as WSDL [1, 2], UDDI [3], and SOAP [4]
have been developed to support the use of Web services. Significant progress has been
made towards making Web services a pragmatic solution for distributed computing on
the scale of the World Wide Web. With the proliferation of Web services and the evolu-
tion towards the semantic Web comes the opportunity to automate various Internet
related tasks. Applications should be able to automatically or semi-automatically
C. Baroglio et al. (Eds.): Reasoning Web 2008, LNCS 5224, pp. 240–268, 2008.
© Springer-Verlag Berlin Heidelberg 2008
Web Services Discovery Utilizing Semantically Annotated WSDL 241
discover, invoke, compose, and monitor Web services offering particular services and
having particular properties [5].
Given the dynamic environment in e-businesses, the power of being able to discover
Web services on the fly, to dynamically create business processes is highly desirable.
The discovery of Web services has specific requirements and challenges compared to
previous work on information retrieval systems and information integration systems.
Several issues need to be considered. The discovery has to be based, not only on syn-
tactical information, but also on data, as well as functional and QoS semantics [6].
Discovery is the procedure of finding a set of appropriate Web services that meets
user requirements [7]. The discovery of Web services to model Web processes differs
from the search for tasks/activities to model traditional processes, such as workflows.
One of the main differences is in terms of the number of Web services available to the
composition process. On the Web, potentially thousands of Web services are available
which make discovery a difficult procedure. One cannot expect a designer to manu-
ally browse through all the Web services available and select the most suitable one.
Therefore, one of the problems that needs to be overcome is how to efficiently
discover Web services [6].
Currently, the industry standards available for registering and discovering Web
services are based on UDDI specifications [3]. An important challenge is that of find-
ing the most appropriate Web service within a registry [7]. This challenge arises due
to the discovery mechanism supported by UDDI. In an attempt to disassociate itself
from any particular Web service description format, UDDI specification does not
support registering the information from the service descriptions in the registry.
Hence the effectiveness of UDDI is limited, even though it provides a very powerful
interface for keyword and taxonomy based searching. Suggestions [8] have been
made to register WSDL descriptions, which are the current industry’s accepted stan-
dard, in UDDI. However, since WSDL descriptions are syntactic, registering them
would only provide syntactical information about the Web services. The problem with
syntactic information is that the semantics implied by the information provider are not
explicit, leading to possible misinterpretation by others. Therefore, discovering Web
services using UDDI is relatively inefficient since the discovery mechanism only
takes into account the syntactic aspect of Web services by providing an interface for
keyword and taxonomy based searching.
The key to enhance the discovery of Web services is to describe Web services se-
mantically [9] and use semantic matching algorithms (e.g. [6, 10-12]) to find appro-
priate services. Semantic discovery allows the construction of queries using concepts
defined in a specific ontological domain. By having both the advertisement descrip-
tion and request query explicitly declare their semantics, the results of discovery are
more accurate and relevant than keyword or attribute-based matching. Adding seman-
tics to Web service descriptions can be achieved by using ontologies that support
shared vocabularies and domain models for use in the service description [7]. Using
domain specific ontologies, the semantics implied by structures in service descrip-
tions, which are known only to the writer of the description, can be made explicit.
While searching for Web services, relevant domain specific ontologies can be referred
to, thus enabling semantic matching of services.
In this paper, we will review the state-of-the-art in the discovery of Web services.
We then present a new algorithm for Web service discovery that is novel in three
242 J. Cardoso, J.A. Miller, and S. Emani
fundamental aspects. First, the similarity among semantic Web service properties,
such as inputs and outputs, are determined based on a feature-based model, Tversky’s
model. Using Tversky’s model, we consider that similarity is a judgment process that
requires two services to be decomposed into aspects in which they are the same and
aspects in which they are different. Evaluating the similarity is based on concepts
(classes), their semantic relations, and their common and distinguishing features
(properties). Second, the algorithm, not only takes into account services’ inputs and
outputs, but it also considers the functionality of services. This allows for increasing
the precision of search. Providers can express in a better way the objective of their
services and customers can give a better characterization of the services they are look-
ing for. Finally, the algorithm is able to match a semantic Web service request against
advertisements that are annotated with concepts that are with or without a common
ontology commitment. In other words, it can evaluate the similarity of concepts de-
fined in the context of different ontologies. This last characteristic is important since
in some situations it is perfectly acceptable to find similar services (or even equivalent
services) annotated with semantic concepts that exist in the context of different on-
tologies.
The remainder of this paper is structured as follows. Section 2 provides an over-
view on how Web services can be semantically annotated or described so that they
can be considered semantic Web services. We present an approach to add semantics
to WSDL. The tool Radiant is used to exemplify the essential functionalities needed
for an annotation tool. In section 3, we present our semantic Web service matching
function (called SM-T) to discover services. It also describes a ranking algorithm that
uses the matching function previously presented and that can be used by discovery
mechanisms. Section 4 explains how the SM-T function can be integrated in the ME-
TEOR-S Web Services discovery infrastructure. This system supplies an infrastruc-
ture of registries for semantic publication and discovery of Web services. Section 5
discusses the related work in this area and the last section presents our conclusions.
2 Semantic Web Service
Many believe that a new Web will emerge in the next few years, based on the
large-scale research and development ongoing on the semantic Web and Web ser-
vices. The intersection of these two, semantic Web services, may prove to be even
more significant. Academia has mainly approached this area from the semantic Web
side, while industry is beginning to consider its importance from the Web services
side [13]. Three main approaches have been developed to bring semantics to Web
services:
• The first approach uses OWL-S, a Web Service description language that seman-
tically describes the Web using OWL ontologies. OWL-S services are then
mapped to WSDL operations and inputs and outputs of OWL-S are mapped to
WSDL messages.
• The second approach, WSMO, is a meta-model for semantic Web services devised
to facilitate the automation of discovering, combining and invoking electronic ser-
vices over the Web. WSMO elements include: Ontologies, Web services, Goals
and Mediators.
Web Services Discovery Utilizing Semantically Annotated WSDL 243
Fig. 1. OWL-S: Service ontology overview
• The third approach to creating semantic Web services is by mapping concepts in
a Web service description (WSDL specification) to ontological concepts. The
WSDL elements that can be marked up with metadata are operations, messages,
preconditions and effects, since all the elements are explicitly declared in a
WSDL description.
The approaches will be discussed in the following subsections.
2.1 OWL-S
OWL-S [14] (formerly DAML-S) is a standard ontology or language which gives
providers a computer-interpretable description of a Web service. It supplies a set of
classes and properties which describes capabilities of a Web service in an unambigu-
ous, computer form. This ontology uses OWL as the web compatible representational
language. As OWL-S gives a markup to the Web services it helps in automated dis-
covery, composition and interoperation of services. OWL-S employs an upper level
ontology to describe Web services. It consists of three parts expressed in accordance
with OWL ontologies: the service profile (What does the service provide for prospec-
tive clients?), the service model (How is it used?), and the service grounding (How
does one interact with it?), each of these perspectives provide essential information
about the service (Figure 1).
The Service Profile used to discover a Web service gives complete information on
whether a particular service meets the requirement of a user or not. This information
involves what the service capabilities are, its limitations and the quality of service. It
gives detailed information about the name, contact, description of the service, specifi-
cation of parameters (properties) according to the process ontology, Inputs, Outputs,
Preconditions and Effects (IOPE). The Service Model gives a layout of how a con-
sumer should pass requests and how the service accomplishes the task. When services
244 J. Cardoso, J.A. Miller, and S. Emani
are composed the consumer can use the description in different ways: to analyze
whether the service meets the requirements in detail, to compose multiple services for
a specific task, to synchronize and coordinate different participants and to monitor the
execution of the services. The services are modeled as processes; the IOPEs declared
in the service profile are referenced here. If the processes are connected with each
other then the dataflow between these processes is specified. The Service Grounding
specifies the communication protocol, message formats and other details used to
access the web service. Concrete messages are specified in grounding i.e., how the
inputs and outputs are of a process are realized as messages in some transmittable
format. WSDL is used to support initial grounding mechanism as a set of endpoints
for messages along with SOAP binding where HTTP is the communication protocol
that is used.
2.2 WSMO
The Web Service Modeling Ontology (WSMO [15]) comprises an ontology of core
elements for semantic Web services, described in WSML (Web Services Modeling
Language), a formal description language, and also an execution environment called
WSMX (Web Service Execution Environment). In WSMO, ontologies provide the
terminology used by other WSMO elements to describe the relevant aspects of the
domains of discourse. Goals symbolize user desires which can be satisfied by execut-
ing a Web service and Mediators express elements that surmount interoperability
problems between distinct WSMO elements. WSMO and OWL-S, both accept the
same view towards having service ontologies to construct semantic Web services.
WSMO has it own family of languages, WSML, which is based on Description
Logics and Logic Programming.
As WSMO provides ontological specifications for the elements of Web services it
is designed on the basis of few principles: it identifies the resources with the help of
URIs, it is based on an ontology model and supports ontology languages designed for
the semantic Web, each resource is defined independently, it handles heterogeneity, it
separates between client and the available services, it provides and differentiates be-
tween description and implementation, it describes Web services that provide access
to a service (actual value obtained after a Web service is invoked).
WSMO uses different approaches to discover Web services which require different
annotation and description of goals and services. Web service discovery is done by
matching goal descriptions with semantic annotations of Web services. This type of
discovery happens in an ontological level. Two main processes are required for this
discovery: the user input will be generalized to more abstract descriptions and ser-
vices and their descriptions should be abstracted to classes of services.
2.3 Adding Semantics to WSDL
It has been recognized [5] that due to the heterogeneity, autonomy and distribution of
Web services and the Web itself, new approaches should be developed to describe
and advertise Web services. The most notable approaches rely on the use of semantics
to describe Web services. This new breed of Web services, termed semantic Web
services, will enable the automatic annotation, advertisement, discovery, selection,
Web Services Discovery Utilizing Semantically Annotated WSDL 245
composition, and execution of inter-organization business logic, making the Internet
become a common global platform where organizations and individuals communicate
with each other to carry out various commercial activities and to provide value-added
services. The academia has mainly approached this area from the semantic Web side,
while industry is beginning to consider its importance from the point of view of Web
services [13]. As we have already seen, three main approaches have been developed
to bring semantics to Web services: SAWSDL (formally WSDL-S), OWL-S [14], and
WSMO [15]. Since our work has been carried out with the research group that has
defined SAWSDL, we will focus our study on this specification.
2.3.1 WSDL
WSDL [2] is primarily an interface description language for Web services, just as IDL
was for CORBA. As an interface, it describes capabilities that Web services implement-
ing the interface should provide. The main thing to describe about an interface is the set
of operations. In WSDL, the meaning of an operation is given by the operation name,
the input parameter names and types, the output parameter names and types as well as
the possible faults that can be thrown. In addition, further information can be obtained
from the interface itself and in WSDL 2.0 one interface can extend another (interface
inheritance).
A WSDL document describes a Web service as a collection of ports. Messages
specify data being exchanged between the services and port types are collection of
operations. As such a WSDL document has certain elements to define data types,
messages, operations, port types, binding, ports and services. Figure 2 shows a com-
plete example of how a WSDL looks like.
Fig. 2. An example WSDL Document
246 J. Cardoso, J.A. Miller, and S. Emani