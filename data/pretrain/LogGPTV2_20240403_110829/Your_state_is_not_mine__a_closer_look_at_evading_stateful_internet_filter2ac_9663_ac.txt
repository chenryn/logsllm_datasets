Reassembled
Pass
Pass
Pass
Sometimes dropped
Pass
Pass
Pass
Sometimes dropped
Reassembled
Pass
Pass
Pass
Dropped
Reassembled
Dropped
Dropped
Pass
Dropped
China Unicom SJZ(1/11) China Unicom TJ(1/11)
Table 2: Client-side middlebox behaviors
On the other hand, some NAT or state/sequence checking fire-
walls deployed on the client-side of the network might intercept
and accept the insertion packets and change their maintained con-
nection state. In such cases, later packets will not go through these
middleboxes, resulting in “Failures 1.” For example, if a RST packet
tears down the connection on a client-side middlebox which it
traverses, the middlebox blocks later packets on that connection.
Some client-side middleboxes may discard IP fragments (wrt
data reassembly strategies) and cause “Failures 1.” Others buffer
and reassemble them into a whole IP packet and this might cause
“Failures 2” depending on the implementation of the middlebox.
We probed for client-side middleboxes from all our 11 vantage
points trying to connect with our own servers. As shown in Table 2,
we found that our 6 clients using Aliyun were unable to send out
IP fragments. One can conclude within reason that Aliyun has
configured its middleboxes to discard certain kinds of IP fragments.
We found that connections from the other 5 nodes encounter client-
side middleboxes, which reassemble the IP fragments into a full IP
packet containing the original HTTP request; thus these packets
were deterministically captured by the GFW. Since we found that
most of the routers and/or middleboxes interfere with IP-layer
manipulations, we argue that this is not as generally applicable as
TCP-layer manipulations for evasion.
The vantage point in Tianjin China Unicom has client-side mid-
dleboxes that drop packets with wrong TCP checksums or con-
taining no TCP flag; thus these two strategies did not work at that
point. Finally, we found Aliyun sometimes drops FIN insertion pack-
ets and QCloud sometimes drops RST insertion packets. Both the
clients in Shijiazhuang and Tianjin (China Unicom) have client-side
middleboxes that drop FIN insertion packets.
Interference from server-side middleboxes. Server-side mid-
dleboxes only affect the server but not the GFW. Our insertion
packet may terminate the connection or change the connection
state on the server-side middleboxes causing later packets to be
blocked by the middleboxes. This will cause “Failures 1.” To ver-
ify interference from server-side middleboxes, we need to either
control the server or set up our own server on the same path be-
hind those middleboxes, which are infeasible in practice for all our
targets, i.e., the Alexa’s top websites.
Other reasons for failures. There could be a few other reasons
for observing failures of the two types. Network or server failures
although rare could occur. We performed microscopic studies of
our failure cases and list the cases that we observed below.
Variations in server implementations. We find that with some
server implementations (e.g., Linux versions prior to 3.8), a data
packet under “in-order data overlapping strategy” carrying no TCP
flag can sometimes be accepted by the server and thus causes “Fail-
ures 1.” With the “out-of-order data overlapping strategy,” a server
IMC ’17, November 1–3, 2017, London, UK
Zhongjie Wang et al.
might accept the junk data (just like the GFW) and discard the
correct packet.
Network dynamics. Since routes are dynamic and could change
unexpectedly, the TTL values used in the insertion packets to pre-
vent them reaching the server could be incorrect. As a result, they
may reach the server and disrupt the connection (Failures 1). In
other cases, the insertion packets might not reach the GFW and
lead to “Failures 2.” We also found that packet losses on the net-
work could affect the insertion packets and cause “Failures 2.” We
cope with such dynamics by repeating the sending of the insertion
packets thrice with 20ms intervals.
Summary. Our measurement uses real web servers instead of
controlled servers in order to represent cases of daily web browsing.
The results demonstrate the complexity induced by many factors
(e.g., middlebox interference, server diversity, network diversity,
etc.). We showcase the overall success rates with existing evasion
strategies and enumerate possible reasons for the failure cases.
To fully untangle the factors causing failures and to quantify the
impact of each, more in-depth analysis and controlled experiements
are required (e.g., using controlled replay server as in [18]), which
we leave for future work.
4 EVOLVED GFW BEHAVIORS
As alluded to in § 3, high failure rates were experienced even if we
eliminated the effects from middleboxes, server implementations,
and network dynamics. To understand the root cause, we take a
closer look and argue that this is due to evolved GFW behaviors
that break many prior assumptions. Based on our measurements,
we hypothesize these new behaviors as follows. To verify these
hypotheses, in § 7 we design and extensively evaluate new evasion
strategies.
Prior Assumption 1: The GFW creates a TCB only upon seeing
a SYN packet.
To test this assumption, we used pairs of clients and servers
under our control, and executed partial TCP 3-way handshakes (e.g.,
intentionally omitting the SYN, SYN/ACK and/or ACK) followed
by a HTTP request with a sensitive keyword. If a correct TCB
was created on the GFW, the HTTP request would trigger TCP
reset packets from it. First, our results confirmed that the GFW
still creates a TCB upon seeing a SYN packet as described in [17].
Second and more interestingly, we found that the GFW also creates
a TCB upon seeing a SYN/ACK packet without the SYN packet. We
speculate that the GFW has evolved to incorporate this feature to
counter SYN packet losses. Given these, we hypothesize that the
GFW exhibits the following new behavior.
Hypothesized New Behavior 1: The GFW creates a TCB not only
upon receiving SYN packets, but also SYN/ACK packets.
Prior Assumption 2: The GFW uses the sequence number in the
first SYN packet to create a TCB, and ignores later SYN packets during
the lifetime of the TCB.
This assumption is based on the rationale that the GFW mimics
a normal TCP implementation. Our closer look revealed that it
does not. From the results in § 3, we see that the TCB creation
with a SYN insertion packet failed in most cases. This leads us to
re-examine this case. We send multiple SYN packets among which
only one has the “true” sequence number, and then send a sensitive
HTTP request. However, no matter where we put the “true” SYN
packet, the GFW can always detect the later sensitive keyword.
We hypothesize that this could be because of any of three possible
reasons:
• (1) the GFW establishes multiple TCBs, one for each SYN packet;
• (2) the GFW enters a “stateless mode”, in which it checks every
individual packet instead of re-assembling the data first (and
check for a sensitive keyword);
• (3) the GFW uses the sequence number in the HTTP request to
re-synchronize its TCB.
To check (1), we set the sequence number in the HTTP request to
be a “out-of-window” value with respect to the sequence numbers
in the SYN packets; however, we find that the GFW can still detect
the keyword. To examine (2), we split the sensitive keyword into
halves, each of which by itself is not a sensitive keyword; however,
we find that the GFW can still detect it. For (3), before sending the
HTTP request, we send some random data with a “false” sequence
number, and then we send the HTTP request with “true” sequence
number; the GFW cannot detect it in this case. This suggests that
the GFW re-synchonrizes its TCB with the sequence number in
the random data, and thus, ignores the later HTTP request because
of its out-of-window sequence number. This validates hypothesis
(3) that the GFW enters a “re-synchronization state” upon seeing
multiple SYN packets. We further validate this extensively in § 7.
Besides multiple SYN packets, we found that multiple SYN/ACK
packets or a SYN/ACK packet with an incorrect acknowledgment
number can also cause the GFW to enter the re-synchronization
state.
Next, we try to find out “which packet the GFW uses to re-
synchronize its TCB once in re-synchronization state.” From the
previous experiement, we learn that the GFW re-synchronizes using
data packets from the client to the server. Thus, instead, we try to
use data packets from the server to the client; in addition, we try
pure ACK packets without data in both directions. We find none of
these packets affect the GFW. However, we do find that a SYN/ACK
packet from the server to the client can cause re-synchronization.
We admit that the cases we found may not be complete but it
is hard to enumerate an exhaustive set of these cases. However,
our measurements lead us to a better understanding of the GFW
behavior than what exists today and leads us to the following new
hypothesis.
Hypothesized New Behavior 2: The GFW enters what we call
the “re-synchronization state”, where it re-synchronizes its TCB using
the information in the next SYN/ACK packet from server to client
or data packet from client to server upon experiencing any of the
following three cases: (a) it sees multiple SYN packets from client-side,
(b) it sees multiple SYN/ACK packets from server-side, or (c) it sees a
SYN/ACK packet with an acknowledgment number different from the
sequence number in the SYN packet.
Prior Assumption 3: The GFW tears down a TCB when it sees a
RST, RST/ACK or FIN packet.
The results in § 3 suggest that the evolved GFW generally does
not tear down a TCB merely upon seeing FIN packets. At the same
time, we also observed high failure rates of above 20% with our RST
and RST/ACK insertion packets. A closer look suggests that this
probably is due to “Hypothesized New Behavior 2.” More specif-
ically, we found that when the GFW is in the newly discovered
“re-synchronization state”, its TCB sometimes cannot be torn down
with RST or RST/ACK packets. To verify this, we force the GFW
to enter the re-synchronization state using one of the techniques
above, and then immediately send a RST packet and a HTTP re-
quest with sensitive keyword. However, the GFW sometimes can
still detect it. We repeated the experiement at different times with
multiple pairs of clients and servers, and found inconsistency be-
tween different measurements across pairs at different times. The
overall success rate is roughly 80%, and for a specific client-server
pair, the GFW’s behavior is usually consistent during a certain pe-
riod (although not always across periods). We are unable to unearth
the explicit reason behind at this time; we conjecture that it is due
to dynamics with regards to the heterogeneity in the types of GFW
encountered and the complexity of interactions among different
GFW instances and middleboxes. We discuss this further in § 8.
In addition, we performed extensive measurements wherein we
sent a RST packet between the SYN/ACK and the ACK packet of the
3-way handshake, and also after the 3-way handshake. We found
that in both cases the TCB sometimes is not torn down but the
RST packet caused the GFW to enter the re-synchronization state;
further, we find that this happens way more frequently for the for-
mer case (the exact reason for the discrepancy remains unknown).
These observations lead to the following new hypothesis.
Hypothesized New Behavior 3: Upon receiving a RST or
RST/ACK packet, the GFW may enter the re-synchronization state
instead of tearing down the TCB.
5 NEW WAYS TO EVADE THE GFW
In this section, we discuss new opportunities for evasion from two
perspectives. First, based on the new hypothesized behaviors of
the GFW, we propose new evasion strategies. Second, we attempt
to systematically discover new insertion packets (besides wrong
checksum or small TTL).
5.1 Desynchronize the GFW
First of all, we describe a building block to counter the re-
synchronization state in the GFW. It is helpful in supporting our
new evasion strategies, which are discussed next. Specifically, when
we expect that the GFW is in the re-synchronization state (this can
be forced), we send a insertion data packet with a sequence num-
ber that is out of window. Once the GFW synchronizes with the
sequence number in this insertion packet, subsequent legitimate
packets of the connection will be perceived to have sequence num-
bers that are out of window, and thus be ignored by the GFW.
We say that now the GFW is desynchronized from the connection.
Note that the insertion data packet is ignored by the server since it
contains an out-of-window sequence number.
Desynchronizing the GFW drastically helps improve the “TCB
Teardown” and the “In-order Data Overlapping” strategy that still
work relatively well but occasionally experience undesired high
“Failure 1” and “Failure 2” rates.
IMC ’17, November 1–3, 2017, London, UK
5.2 New Evasion Strategies
Our evasion strategies are primarily based on exploiting the newly
discovered state of the GFW. We propose two new evasion strategies
along with improvements to two existing strategies.2 We evaluate
these extensively in § 7. The two new strategies are as follows:
Resync + Desync. To coerce the GFW into entering the re-
synchronization state, the client sends a SYN insertion packet after
the 3-way handshake. Subsequently, the client sends a 1-byte data
packet containing an out-of-window sequence number to desyn-
chronize the GFW. This is then followed by the real request. Note
that the SYN insertion packet cannot be sent prior to receiving
the SYN/ACK packet, as the GFW will eventually resynchronize
the expected client-side sequence number based on the ACK num-
ber of the SYN/ACK. In addition, the SYN insertion packet should
take a sequence number outside of the expected receive window
of the server (as in older Linux this can cause the connection to
reset). Newer versions of Linux will never accept such a SYN packet
regardless of its sequence number and will simply respond with
a challenge ACK [7]. In addition, we can craft the insertion SYN
packets with small TTL in case the server or middleboxes interfere.
TCB Reversal. As discussed, the GFW currently only censors
traffic from the client to the server (e.g., HTTP/DNS requests), and
the censorship of HTTP response has been discontinued except
in a few rare cases [20]. When the GFW first sees a SYN/ACK, it
assumes that the source is the server and the destination is the client.
It creates a TCB to reflect that this is the case. It will now monitor
data packets from the server to the client (mistakenly thinking
that it is monitoring data packets from the client to the server). To
exploit this property, the client will first send a SYN/ACK insertion
packet. It later performs the TCP three way handshake in a normal
way. The GFW will ignore these handshake packets since there
already exists a TCB for this connection. Note that the SYN/ACK
insertion packet has to be crafted with care. In normal cases, the
server responds with a RST which causes a teardown of the original
TCB at GFW. To address this, one of the discrepancies (e.g., lower
TTL) will need to be used in the insertion packet. In addition, we
point out that here the SYN/ACK and subsequent SYN packet from
the client do not trigger the GFW to enter the resynchronization
state.