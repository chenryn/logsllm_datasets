We compare zDFQ to WFQ and WFzQ as baseline algo-
rithms. Besides WFQ and WFzQ, we implemented several
other algorithms including SFQ [zh], MSFzQ [˙], and DRR [(cid:254)§].
However, we omit these algorithms from our evaluation as we
found the results to be visually indistinguishable from either
WFQ or WFzQ– occurring because the key di(cid:242)erences be-
tween the algorithms are incidental to their fairness bounds.
For example, since we do not use a variable rate server, the pri-
mary feature of SFQ is not necessary and SFQ and WFQ pro-
duced nearly identical schedules. Similarly, WFzQ and MSF
zQ produced nearly identical results; MSFzQ’s distinguishing
feature handles the case where one tenant has a high weight
or few tenants are sharing many links, whereas we evaluate
with many tenants (up to several hundred) and equal weights.
Furthermore, many algorithms such as DRR [(cid:254)§] and WF
zQ+ [(cid:254)] improve algorithmic complexity but do not improve
fairness bounds or add additional features; in practice they
have similar or worse behavior compared to WFQ or WFzQ.
To evaluate the schedulers, we use the following metrics:
Service lag: the di(cid:242)erence between the service a tenant should
have received under GPS and the actual work done. For N
threads with r processing rate, we use a reference GPS system
with rate Nr.
Service lag variation: the standard deviation, σ of service
lag. Bursty schedules have high service lag variation due to
oscillations in service.
Service rate: work done measured in ¸§§ms intervals.
Latency: time between the request being enqueued and ßn-
ishing processing. We focus on the (cid:146)(cid:146)th percentile of latency,
unless otherwise noted.
Gini index: an instantaneous measure of scheduler fairness
across all tenants [(cid:13)(cid:146)].
Evaluation summary Our evaluation of zDFQ shows that:
● When request costs are known, for both synthetic (§@.¸.¸)
and real-world (§@.¸.z) workloads, zDFQ provides service
tains low service lag variation for small tenants (§@.¸.¸).
to small and medium tenants that has one to two orders of
magnitude reduction in service lag variation.
● When many tenants have expensive requests, zDFQ main-
● When request costs are unknown, zDFQE reduces the ser-
● With increasingly unpredictable workloads, zDFQE impro-
ves tail latency of predictable tenants by up to ¸§§× (§@.z.¸).
● Across a suite of experiments based on production work-
dictable tenants by up to ¸(cid:146)˙× (§@.z.z)
vice lag variation by one to two orders of magnitude for
small and medium tenants (§@.z.z).
loads, zDFQE improves (cid:146)(cid:146)th percentile latency for pre-
6.1 Known Request Costs
Our ßrst set of experiments focuses on scheduling with
known request costs that may vary by several orders of mag-
nitude. We ßrst evaluate zDFQ under workloads with increas-
ingly many expensive requests, and compare with the service
provided under WFQ and WFzQ. Second, we evaluate the
overall service and fairness provided by zDFQ on a workload
derived from production traces.
6.1.1 Expensive Requests
In this experiment we simulate the service received by ¸§§
backlogged tenants sharing a server with ¸@ worker threads,
each with a capacity of ¸§§§ units per second. For varying
values of n, we designate n of the tenants as small and ¸§§− n
of the tenants as expensive. Small tenants sample request sizes
from a normal distribution with mean ¸, standard deviation §.¸;
large tenants sample request sizes from a normal distribution
with mean ¸§§§, standard deviation ¸§§.
Figure ˙a examines the service received over a ¸(cid:254) second
interval for one of the small tenants, T, when (cid:254)§% of tenants
are expensive (n= (cid:254)§). Since the thread pool has ¸@ threads,
the ideal schedule would split cheap and expensive requests
into separate threads, producing steady service of ¸@§ units
per second per tenant. Figure ˙a (top) shows that the service
provided by WFQ has large-scale oscillations. _is occurs
because WFQ alternates between phases of servicing all of
the (cid:254)§ small tenants, followed by all of the (cid:254)§ large tenants, in
bursts of up to ¸ thousand units per tenant. Figure ˙a (bottom)
151
WFQWF²Q2DFQ 0 100 200 300 0 5 10 15Service Rate-1 0 1 2051015Service Lag (s)Time (s)     0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15WFQ     0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15WF²Q051015Time (s) 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 152DFQ 0 0.1 0.2 0.3 0.4 0.5 0.6 0 20 40 60 80 100σ(Service Lag)Number of expensive tenants (n)WFQWF²Q2DFQ(a) Top: service received by T¸, a tenant outlined in §h.z, while replaying traces
from a production server with hz threads. Middle: service lag for the same tenant,
compared to an ideal GPS server; red horizontal line is zDFQ, which has very
little service lag. Bottom: Gini index [(cid:13)(cid:146)] across all tenants.
(b) Illustration of request sizes running on each thread. Horizontal lines repre-
sent worker threads; ßll color indicates the running request size at each instant
in time. WFzQ service oscillations can be identißed in the middle plot by dark-
colored blocks of expensive requests. zDFQ partitions requests by size.
Figure (cid:146): Time series for a production workload on a server with hz threads
randomness in request sizes that enables expensive requests
to temporarily run on (cid:146) of the worker threads instead of ˙.
We varied the proportion of expensive tenants n between §
and ¸§§ and show the resulting standard deviation of service
lag in Figure ˙c. WFQ and WFzQ experience a linear increase
in standard deviation as the proportion of expensive tenants
grows. WFQ grows unboundedly, whereas WFzQ eventually
plateaus. With only z(cid:254)% of the workload comprising expensive
tenants, WFzQ converges to its worst-case behavior. On the
other hand, while zDFQ also sees gradually increased standard
deviation, it is an order of magnitude lower compared to other
schedulers.
6.1.2 Production Workloads
In this experiment we evaluate fair share provided by zDFQ
with a workload derived from production traces of Azure
Storage. We simulate the service received by tenants sharing
a server of hz worker threads, each with capacity ¸ million
units. We replay z(cid:254)§ randomly chosen tenants drawn from
workload traces of (cid:254)§ servers. As a baseline for evaluation in
this and subsequent experiments, we include tenants T¸ . . .T¸z
described in §h.z. In aggregate across all tenants, request costs
for this experiment vary from z(cid:254)§ to (cid:254) million.
We ßrst illustrate the improved service for tenants with
small requests. Figure (cid:146)a (top) shows a ¸(cid:254) second time series
for T¸, comprising primarily small requests between z(cid:254)§ and
¸§§§ in size. Figure (cid:146)a (middle) plots T¸’s service lag. Under
WFQ, the service received oscillates between hs and h.6s ahead
of GPS. WFzQ more closely matches GPS, but occasionally
falls behind by up to (cid:254)§ms due to the thread pool becoming
occupied by expensive requests. zDFQ (the horizontal red
line) closely matches GPS at all times. Figure (cid:146)a (bottom)
plots the Gini index [(cid:13)(cid:146)] over time, an aggregate measure of
fairness across all tenants. WFQ is signißcantly less fair in
Figure ¸§: Le(cid:22): CDF of service lag standard deviation across all tenants.
zDFQ reduces service lag standard deviation for tenants with small requests.
Right: Distribution of service lag experienced by t¸ . . . t6. _e wider the dis-
tribution of service lag, the more oscillations a tenant will experience.
plots the service lag over time, showing that small tenants
oscillate between ¸ and z seconds ahead of their fair share,
with a period of approximately @.z(cid:254) seconds. Small tenants are
consistently ahead of their fair share because small requests
have the earliest ßnish time so WFQ services them ßrst. WFzQ
has less long-term oscillation, but su(cid:242)ers from more extreme
oscillations over shorter time scales; the small tenant receives
no service for almost a second. By design, WFzQ prevents
T from getting too far ahead of its fair share, but due to the
presence of the expensive tenants, T continually falls behind by
up to ¸ second. _is occurs because WFzQ determines that all
small tenants are ineligible, and schedules expensive requests
to run on every worker thread, as illustrated in Figure ˙b.
Note that because average execution time of a small tenant’s
request is ¸ms, such rate oscillation delays the tenant by up to
¸§§§ requests. Finally, the service provided by zDFQ is more
stable, but still with occasional oscillations. _e oscillations are
characterized as a period of slightly reduced service followed
by a burst of increased service. As illustrated in Figure ˙b
(bottom), zDFQ mostly partitions requests by size across the
threads, and the remaining oscillations are a side e(cid:242)ect of
152
WFQWF²Q2DFQ 0 100 200 300 0 5 10 15x103Service Received 3 3.2 3.4 3.6x103-0.2 0051015x103Service Lag (s)123x103x10622.53051015x103x106x104Gini IndexTime (s) 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31WFQ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31WF²Q051015Time (s) 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 312DFQ100103104105106107Request Size 0 0.5 110-410-310-210-1110Cumulative Frequencyσ(Service Lag) Per Tenantt1t2t3t4t5t6t72DFQt1t2t3t4t5t6t7WF²Q-4-3-2-101234t1t2t3t4t5t6t7Service Lag [s]WFQ(a) Service received by T¸, a predictable tenant submitting small requests. Each
ßgure illustrates the service received by T¸ under WFQE, WFzQE, and zDFQE.
zDFQ continues to provide stable service as the workload mix becomes unpre-
dictable, with only a minor increase in oscillations.
(b) _read occupancy over time for zDFQE for increasingly unpredictable
workloads. Horizontal lines represent worker threads; ßll color indicates cost
of the running request at each instant in time. zDFQE isolates predictable, small
requests even as increasingly many tenants are unpredictable.
Figure ¸¸: Time series as the overall server workload mix comprises §% (top), hh% (middle), and @@% (bottom) unpredictable tenants.
aggregate, while zDFQ and WFzQ are comparable. Figure (cid:146)b
illustrates sizes of requests running on threads during the
experiment. Service spikes under WFzQ correlate with sev-
eral large requests occupying threads simultaneously. zDFQ
partitions requests across threads according to request size,
avoiding such spikes. Figure ¸§ plots a CDF of the service lag
standard deviations across all tenants included in the experi-
ment. A low standard deviation is desirable, as it corresponds
to fewer oscillations in service. _e ßgure shows that the ßrst
quartile of tenants have approximately (cid:254)§x lower standard
deviation under zDFQ than WFzQ and ¸§§x lower standard
deviation under zDFQ than WFQ. _ese tenants are the ones
with primarily small requests.
To more precisely understand how zDFQ impacts tenants
based on request sizes, we repeat the experiment and include
an additional seven tenants, t¸ . . . t6. _ese tenants submit
requests with ßxed costs of z˙, z¸§, z¸z, . . . , zz§ respectively
(from z(cid:254)@ to ¸ million), spanning the range of costs in our
workload. Figure ¸§ (right) plots the distribution of service lag
experienced by t¸ . . . t6 under WFQ, WFzQ and zDFQ. Each
distribution shows how much the tenant deviates from its
fair share. Under all schedulers, large requests (t6) experience
a wide range of service lag, because service is received in
large, coarse-grained bursts. For progressively smaller requests
(t@ . . . t¸), WFQ reduces service lag to a range of §.˙ seconds;
WFzQ reduces it to §.(cid:254) seconds, while zDFQ reduces it to
§.§¸ seconds. _ese results illustrate how zDFQ particularly
improves the service received by tenants with small requests.
6.2 Unknown Request Costs
Our second set of experiments evaluates schedulers when
request costs are not known a priori. We compare zDFQE
(α = §.(cid:146)(cid:146)) to variants of WFQ and WFzQ that estimate re-
quest costs using per-tenant per-API exponential moving av-
erages (α = §.(cid:146)(cid:146)). We refer to them, respectively, as WFQE
and WFzQE. We also implemented both retroactive charging
and refresh charging for WFQE and WFzQE. Without these
techniques, we found that the quality of schedules deteriorated
by a surprising amount. It turned out to be relatively common
for workloads to have back-to-back requests that di(cid:242)er by sev-
eral orders of magnitude; without retroactive charging it takes
too long to incorporate measurements back into the moving
average to rectify estimation error. For the same reason, with-
out refresh charging it would quickly lead to multiple large
requests taking over the thread pool. Since the bookkeeping
techniques are straightforward to implement, we applied them
to all algorithms, and our experiment results only re(cid:6)ect the
di(cid:242)erences between scheduling logic and estimation strategy.
We ßrst evaluate zDFQE for workloads where an increasing
proportion of the tenants are unpredictable, comparing to
service under WFQE and WFzQE. Second, we compare the
schedulers across a suite of ¸(cid:254)§ workloads generated from
production workload traces, and assess the overall e(cid:242)ect on
service lag and request latency.
6.2.1 Unpredictable Workloads
In this experiment we evaluate zDFQE’s pessimistic cost
estimation strategy, demonstrating how it co-locates unpre-