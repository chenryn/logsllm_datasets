title:Noncompliance as Deviant Behavior: An Automated Black-box Noncompliance
Checker for 4G LTE Cellular Devices
author:Syed Rafiul Hussain and
Imtiaz Karim and
Abdullah Al Ishtiaq and
Omar Chowdhury and
Elisa Bertino
Noncompliance as Deviant Behavior: An Automated Black-box
Noncompliance Checker for 4G LTE Cellular Devices
Syed Rafiul Hussain*
Abdullah Al Ishtiaq
Pennsylvania State University
PI:EMAIL
Pennsylvania State University
PI:EMAIL
Imtiaz Karim*
Purdue University
PI:EMAIL
Omar Chowdhury
University of Iowa
PI:EMAIL
Elisa Bertino
Purdue University
PI:EMAIL
ABSTRACT
The paper focuses on developing an automated black-box testing
approach called DIKEUE that checks 4G Long Term Evolution (LTE)
control-plane protocol implementations in commercial-of-the-shelf
(COTS) cellular devices (also, User Equipments or UEs) for noncom-
pliance with the standard. Unlike prior noncompliance checking
approaches which rely on property-guided testing, DIKEUE adopts
a property-agnostic, differential testing approach, which leverages
the existence of many different control-plane protocol implementa-
tions in COTS UEs. DIKEUE uses deviant behavior observed during
differential analysis of pairwise COTS UEs as a proxy for identify-
ing noncompliance instances. For deviant behavior identification,
DIKEUE first uses black-box automata learning, specialized for 4G
LTE control-plane protocols, to extract input-output finite state
machine (FSM) for a given UE. It then reduces the identification
of deviant behavior in two extracted FSMs as a model checking
problem. We applied DIKEUE in checking noncompliance in 14
COTS UEs from 5 vendors and identified 15 new deviant behavior
as well as 2 previous implementation issues. Among them 11 are
exploitable whereas 3 can cause potential interoperability issues.
CCS CONCEPTS
• Networks → Network protocols; Protocol testing and veri-
fication; • Security and privacy → Mobile and wireless security.
KEYWORDS
Cellular Network, 4G, LTE, Model Learning, Vulnerabilities, Attacks
ACM Reference Format:
Syed Rafiul Hussain*, Imtiaz Karim*, Abdullah Al Ishtiaq, Omar Chowdhury,
and Elisa Bertino. 2021. Noncompliance as Deviant Behavior: An Automated
Black-box Noncompliance Checker for 4G LTE Cellular Devices . In Proceed-
ings of the 2021 ACM SIGSAC Conference on Computer and Communications
Security (CCS ’21), November 15–19, 2021, Virtual Event, Republic of Korea.
ACM, New York, NY, USA, 18 pages. https://doi.org/10.1145/3460120.3485388
*Both authors contributed equally to this research.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea.
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3485388
1 INTRODUCTION
4G Long-Term Evolution (LTE), developed by the 3rd Generation
Partnership Project (3GPP), is a global standard for cellular net-
works. 4G LTE protocols provide ubiquitous connectivity, interoper-
ability, and massive scale support to numerous network services and
billions of heterogeneous devices. As the security of cellular devices
(also known as, User Equipment or UE) is of utmost importance in
this ecosystem, it is imperative that devices correctly implement
the cellular protocols as mandated by the standard. Faithful imple-
mentation of the cellular protocol is, however, challenging due to
the ambiguities, under-specification, and intricate protocol details
present in the natural languages specification [2, 8, 9]. As a conse-
quence, misinterpretations of the standard are commonplace, which
result in implementations demonstrating noncompliant behavior
with the cellular standard. As an example, if a device responds to
a particular message in a state whereas the standard prescribes
ignoring the message, it gives rise to a noncompliant behavior. The
ramifications of noncompliance with the standard may result in (1)
critical security and privacy flaws (e.g., authentication bypass [39],
location exposure of a target user [51]), and (2) interoperability
issues in the UEs. Since manual identification of noncompliant pro-
tocol behavior in large and complex implementations is error-prone
and time-consuming, in this paper, we aim to develop an automated
approach for identifying noncompliance behavior in 4G LTE UEs.
Prior research. Although prior works [16, 23, 38, 40, 41, 47, 48, 51]
analyzing security and noncompliance of cellular proptocols have
identified several implementation flaws, they suffer from at least
one of the following limitations: (A) The approaches [16, 38–40,
47, 48, 51] are completely manual and cannot uncover a myriad of
implementation-specific behavior; (B) The analyses [39] perform
semi-automated stateless testing; (C) The approaches based on for-
mal verification [12, 30, 32] only test the protocol specification for
noncompliance and also heavily rely on the coverage and quality
of the properties being tested—for which there is no official ex-
haustive list; and (D) The analyses based on re-hosting and reverse-
engineering the baseband software [23, 41] not only require a huge
manual effort and expertise but also are not general enough to be
applicable to implementations from different vendors.
Problem and scope. Since implementations of commercial base
stations and core networks are not publicly accessible, we focus
only on analyzing the commercial 4G LTE device implementations.
Among many different procedures, we further focus on the connec-
tion management and the mobility management components of a UE.
Session 4B: Wireless, Mobile, and IoT CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1082These components manage the most critical control-plane proce-
dures, including connection setup, termination, mobility, hand-off,
service notification, and setup procedures. Without the correct and
reliable operations of these stateful procedures, most of the other
control-plane (e.g., call setup) and data plane (e.g., browsing Inter-
net) operations are susceptible to critical security attacks, such as
MitM relay [30, 49], eavesdropping [48] and DNS redirection [49].
In summary, in this paper we address the following research ques-
tion: Is it possible to design an automated , black-box, and stateful
protocol analysis framework that can uncover noncompliant behavior
in the control-plane protocol implementations in 4G LTE UEs?
Challenges. The first critical challange for developing a black-
box noncompliance checker for UEs is to automatically extract a
behavioral abstraction of the protocol implementation. Once we
have extracted the behavioral abstraction from an implementation,
the second challenge is to devise an approach for identifying diverse
noncompliant behavior in a property-agnostic way.
Our approach. In this paper, for our automated and black-box
efficient compliance checker DIKEUE (in Greek mythology, Dike
refers to the goddess of justice), we use the input-output proto-
col finite state machine (FSM) as the behavioral abstraction. One
can consider automatically extracting the protocol FSM from the
implementation in one of the following two ways: (1) passive trace-
based learning approach; (2) active-learning based approach. The
effectiveness of learning the protocol FSM with the trace-based
approach, however, critically hinges on the diversity and coverage
of the input traces. Although it is possible to obtain a large number
of crowd-sourced traces to be used as input to the passive learning
algorithm, these traces often only exercise expected behavior and
miss out on capturing corner-cases where noncompliance occurs.
DIKEUE thus relies on an active FSM learning approach for
which we use an existing automated black-box FSM learning tech-
nique [45, 54, 55]. Our FSM Learner starts from the UE’s initial state,
and using a controlled LTE network, sends queries (i.e., sequences
of over-the-air protocol messages) to the device-under-test; dubbed
System Under Learning (SUL). Based on the observed responses to
the queries (i.e., sequence of protocol messages from the SUL), it
infers the FSM of the underlying implementation. Although au-
tomata learning has been used in the context of testing various
protocols [20, 21, 25–27, 46, 53], applying it in 4G LTE domain re-
quires taking into account some protocol-specific challenges. First,
4G LTE is a complex multi-layer protocol. Second, protocols in each
layer entail multiple timers and re-transmission counters, whose
values are unobservable from the output interface, making the de-
vice’s protocol FSM seem to behave in a nondeterministic way,
violating one of the pre-requisites of applying active, black-box
automata learning approaches (i.e., deterministic behavior). Third,
after each sequence of messages, the SUL needs to reset transpar-
ently– deleting all internal states and context information without
any modification on the device. Fourth, in addition to the general
behavior, i.e., regular protocol flow of the SUL, the learner needs to
infer the implementation-specific atypical behavior, e.g., response to
a replay packet, to further aid the noncompliance checking. Finally,
a substantial amount of engineering effort is needed to develop an
adapter, which facilitates the communication between the learning
algorithm and the SUL by converting abstract symbols to over-the-
air messages. We rely on some existing efforts and also develop
some new insights to address the above aspects.
Once we have extracted the FSMs of the devices’ LTE control-
plane protocol implementations, DIKEUE takes advantage of having
access to multiple COTS UEs. Particularly, it relies on the concept
of deviant behavior as a proxy for identifying noncompliant behav-
ior in a property-agnostic way during the differential analysis of
two FSMs belonging to two different UEs. In our context, a deviant
behavior is a sequence of inputs for which the two FSMs that are
being compared, when executed from the initial state, generate
distinct output sequences. When comparing two FSMs, if a deviant
behavior is observed, then it is clear that at least one of the imple-
mentations is noncompliant even though it is not clear which one.
These deviant traces are then triaged through consultation with
cellular protocol standards to classify them into one of the follow-
ing two root causes: (1) the implementation deviates from a clear
specification; (2) the specification suffers from under-specification
or ambiguity. Automatic identification of diverse deviant traces
between any two FSMs, however, is challenging, especially in the
presence of loops in the FSMs. DIKEUE addresses this challenge
by reducing the problem of identifying deviant behavior in two
different FSMs to a model checking problem. The model checking
problem checks the safety properties of a model which parallelly
composes the two FSMs under analysis.
Findings. To test the effectiveness of our system, we evaluate
DIKEUE with 14 popular UEs from 5 vendors, including Qualcomm,
MediaTek, Exynos, HiSilicon, and Intel. DIKEUE has uncovered 15
new distinct deviations and two previously reported issues. Some
of these issues are only evident when the implementation reaches
a specific state and can only be uncovered through stateful testing.
We classify these deviant behavior based on root causes and impacts.
Among the reported issues 11 are exploitable, and 3 are susceptible
to interoperability issues between UEs and network operators. The
implications of these deviations include implementations accept-
ing replayed messages and plaintext messages, exposing private
information, and causing denial-of-service attacks.
Responsible disclosure. We have responsibly disclosed our find-
ings to all the affected stakeholders (i.e., GSMA, Qualcomm, Me-
diaTek, Exynos, HiSilicon, Intel, Apple, Samsung, Huawei, HTC,
Android). GSMA has acknowledged with CVD-2021-0050 for all
the 15 newly discovered deviating behavior. The affected vendors
are in the process of patching the issues in future versions.
Contributions. To summarize, this paper makes the following
technical contributions:
• We propose DIKEUE— which, to the best of our knowledge, is
the first tool that designs a black-box FSM inference module to
automatically infer the FSM from a UE’s implementation with-
out any manual interventions or modifications to the devices.
DIKEUE will be publicly available at [1] after all the affected
UEs are patched and the responsible disclosure is completed.
• We design an FSM equivalence checking algorithm that auto-
matically detects and reports diverse deviant behavior of two
FSMs by reducing it to a symbolic model checking problem.
• We evaluate DIKEUE with 14 different devices from 5 vendors,
and demonstrate that it can uncover 17 deviant behaviors, in-
cluding 11 exploitable weaknesses and 3 interoperability issues.
Session 4B: Wireless, Mobile, and IoT CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea10832 BACKGROUND
DIKEUE infers the model of a protocol implementation in the form
of a Mealy machine, also known as a finite state machine (FSM). In
the following, we define a Mealy machine, provide an overview of
model learning, and discuss relevant technologies in 4G LTE.
Finite State Machine (FSM). We define an FSM (M) as a 6-tuple
(S,S0,Ψ, Σ, Λ, Ω), where S is a finite set of states, S0 ∈ S is the
initial state. Σ and Λ are the sets of input and output alphabets repre-
senting the set of possible input and output messages, respectively.
The transition relation Ψ : S × Σ → S maps the pair of a current
state and an input symbol to the corresponding next state, and the
output relationship Ω : S × Σ → Λ maps the pair of a current state
and an input symbol to the corresponding output symbol.
2.1 Active Automata Learning
Active automata learning approaches such as L∗ aim to learn the
deterministic finite automata (DFA) representation of an unknown
regular language L for a given input alphabet from a minimal
adequate teacher (MAT). The learner asks the MAT the following
two types of queries, namely, membership queries and equivalence
queries. A membership query is of the form x ∈? L (i.e., the learner
wants to check whether a concrete string x is a member of the
unknown language L). The MAT responds with a yes iff x ∈ L;
otherwise, it responds with a no. An equivalence query, on the
other hand, checks whether a hypothesis DFA H is equivalent to
the DFA of the language L denoted by DL, i.e., both H and DL
accept the same set of strings. If H is not equivalent to DL, then
the MAT should provide a concrete string y that is accepted by one
but rejected by another as a counterexample.
A majority of the automata learning approaches work itera-
tively in the following two stages [10, 34]. Hypothesis construc-
tion stage: In this stage, the learner asks a series of membership
queries to build a closed and consistent hypothesis DFA H for L.
Model validation stage: In this stage, the learner poses an equiva-
lence query to the MAT to check whether H is equivalent to DL. If
H is equivalent to DL, the learning concludes, and H is provided
as the learned DFA. Otherwise, the approach goes back to the first
stage to create a new hypothesis based on the provided counterex-
ample and additional membership queries. This learning approach
can be extended in the standard way [50] to learn Mealy machines
instead of a DFA.
In practice, directly applying active automata learning as dis-
cussed above is not feasible. This is because obtaining a MAT with
the capability of answering an equivalence query (needed for the
model validation stage) is absent in the majority of the cases. One
can, however, approximate an equivalence query with a series of
carefully constructed membership queries [17]. We refer to this re-
laxed MAT (without equivalence query stage) as the System-Under-
Learning (SUL). Due to the approximate equivalence checking, the
learned model in such a case is not guaranteed to be correct but
instead assured to be observationally equivalent (i.e., the learned and
original model behave equivalently for strings whose membership
results the learner has observed during learning).
2.2 4G LTE Preliminaries
In the following, we introduce the most important network compo-
nents relevant to our analysis in this paper.
User Equipment (UE). The UE, also called cellular device, is the
user’s access terminal, in most cases, a smartphone. The User Ser-
vices Identity Module (USIM) stores the user identifier, the master
secret key, and shared session keys. With these credentials, the user
and the network performs mutual authentication.
eNodeB. The base stations, i.e., eNodeBs span the wireless cells that
users connect to. An eNodeB performs all connection management
through the Radio Resource Control (RRC) protocol with a UE.
Core network and MME. The operator-run core network is a
server landscape that performs all management aspects of mobile
networks. The Mobility Management Entity (MME) is the central
component managing users access, mutual authentication, and
keeping track of a user’s location. Most of these functions involve
many other network nodes; however, the MME orchestrates them.
UE and MME communicate through Non-Access Stratum (NAS)
protocol with the eNodeB as a relay. The MME is connected to
eNodeBs through the S1AP protocol (shown in Figure 7).
Protocol Overview. When a UE is turned on, it first connects with
a base station with three-way RRC layer handshaking messages.
This connection allows a UE to initiate the attach procedure with
the core network in which the UE and the MME mutually authen-
ticate each other, negotiate security algorithms for both NAS and
RRC layers, and complete the attach process with IP address and a
temporary identifier assigned to the UE. We discuss in detail the
relevant NAS and RRC layer procedures in Appendix A.1.
3 DESIGN OF DIKEUE
We now present the threat model, formally define our problem,
discuss the workflow of DIKEUE, and outline the challenges of
designing DIKEUE as well as insights on addressing them.
3.1 Threat Model
We consider the communication channels between the UE and
base station, and between the UE and core network subjected to
adversarial influence. Our attacker model follows the one defined
by previous works [30, 39, 47, 51] and comprises of either a passive
or an active attacker that differs in capabilities and restrictions. The
passive attacker can observe arbitrary communication between the
UE and the LTE network over the radio layer. The active attacker
can additionally intercept, replay, modify, drop or delay message,
without knowing the key material of devices not owned by the
attacker. Moreover, the attacker can deploy a fake LTE base station
impersonating a real LTE network. Note that, the cryptographic
constructs are considered to be perfectly secure. We also consider
the core network components, target user’s UE, and the USIM to be
part of the trusted computing base and free of adversarial influence.
3.2 Problem Statement and Approach Skeleton