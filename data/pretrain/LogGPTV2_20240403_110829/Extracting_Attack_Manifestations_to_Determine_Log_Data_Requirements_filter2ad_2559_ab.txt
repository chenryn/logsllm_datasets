### 3.3 Analysis and Classification of Attack Manifestations

**Step six** involves the analysis and classification of attack manifestations based on several criteria. Each manifestation has properties that make it more or less useful for detecting an attack. For example, some manifestations are unique identifiers of the attack, while others only support an attack hypothesis. Some can be logged with minimal resources, while others require significant logging. Some manifestations arise from necessary attack events, while others may not appear in different versions of the attack script. The categorization of events and manifestations is further discussed in **Section 3.4**.

**Step seven** involves creating attack indicators from the attack manifestations. These indicators consist of the minimal unique parts of the attack manifestations that can be distinguished from normal event traces. This includes parts of single log entries, sequences of parts of entries, or counts of entries. In the context of system call logging, potential attack indicators include unique system calls, unique system call sequences, and unique system call arguments or return values. Further details on the creation of attack indicators are provided in **Section 3.5**.

**The final step** is to define the log data requirements for the created attack indicators. This is achieved by summarizing the log elements used in the indicators.

### 3.4 Categorization of Events, Manifestations, and Indicators

**Categorization of attack events and their manifestations** helps in selecting the most useful manifestations for creating attack indicators. The most valuable manifestations are strong indicators of malicious events that are always part of the attack and can only be performed in one way.

**Categorization of attack indicators** aids in choosing the best set of indicators and log elements for detecting a group of attacks. This can form the basis for creating a new, streamlined log data source containing only essential information. Additionally, it helps IDS designers select the best set of indicators for detecting specific attacks, considering factors such as the types of logging available and the processing power of the IDS. The indicators should complement each other, for example, by including one that detects the attack attempt and another that indicates the result of the attack.

**The goal of this categorization** is to facilitate the quick determination of the (theoretical) detection capability of an IDS for a specific set of attacks and input log data.

Below are suggested categorizations for evaluating events, manifestations, and indicators:

- **Attack Phases**: Preparatory events (P1), attack execution events (P2), and compromised-system-use events (P3).
- **Attack Meta-Event Necessity Categories**: Necessary attack events (N1) and optional attack events (N2). Necessary events are those required for the attack to succeed.
- **Attack Meta-Event Variability Categories**: Invariable events (V1) and variable events (V2). Even if an event is necessary, the methods used to perform it may vary.
- **Attack Meta-Event Maliciousness Categories**: Violation (M1), indirect violation (M2), and benign events (M3).
- **Attack Manifestation Strength Categories**: Strong manifestations (S1) and weak manifestations (S2), depending on the amount of information they reveal about the underlying event.
- **Attack Indicator Application Categories**: Indicator for identifying the attack (U1), indicator for detecting illicit behavior (U2), indicator for detecting attack result (U3), indicator for detecting service in vulnerable mode (U4), and indicator for detecting use of the vulnerable service (U5).
- **Attack Indicator Complexity Categories**: Single log entry (C1), sequence of log entries (C2), count of log entries (C3), and log entries requiring parsing to assemble the event (C4), related to the computing and memory resources needed to use the indicator.

### 3.5 Extraction of Log Indicators

Indicators are derived from manifestations through the analysis of included log entries. The aim is to identify the unique minimal parts of the manifestation that can be used for detection. For example, in system call logs, each system call is analyzed to determine if it is unique. Arguments and return values are also examined for uniqueness. Sequences are studied to find unique patterns, which can include surrounding log entries. Frequency analysis of single system calls and sequences is also performed.

### 3.6 Discussion of the Framework

The framework aims to assist in the search for suitable log data for a new log source for intrusion detection. While the framework provides an outline, further automation and investigation are needed to fully implement each step. The lists of log data extracted from the attack analysis process can be used to create a new log source. By analyzing attacks and selecting common log indicators, the log data needs for a group of attacks can be minimized. This framework can also help developers of intrusion detection signatures to find and choose suitable attack signatures.

### 4. Attack Analysis

This section describes experiments conducted using the proposed framework to determine the log data requirements for three different attacks and three different log sources. The attacks chosen are a denial of service attack (Neptune SYN flood - CERT CA-96.21), a buffer overflow (Tcpdump attack - bugtraq ID 1870, CVE-2000-1026), and an exploit of a privilege checking flaw (OpenSSH - bugtraq ID 1334, CVE-2000-0525). The log sources include network traffic logged by tcpdump, system calls logged by strace and syscalltracker, and application-based logging with syslog.

#### 4.1 OpenSSH Analysis

We illustrate the methodology using the OpenSSH attack, providing a detailed walkthrough of the steps for this attack. The attack is a local root attack against the OpenSSH server, exploiting a flaw in the ssh RSA login procedure. The user adds an option to the RSA key, causing the ssh server to load a user-defined shared library with the rights of the ssh server, not the user. Figure 2 shows the main user actions in the different phases of the OpenSSH attack.

**4.1.1 OpenSSH Events**:
- Normal events: ssh password login for RSA setup, RSA login session without commands for key preparation, and normal RSA login with identity checking commands.
- Failed attack variants: attack against an invulnerable OpenSSH version (3.1) and one against the vulnerable OpenSSH version (2.9) with the "UseLogin" option set to "no".

**4.1.2 Comparing Traces**:
- **Syslog files**: Easy to compare, with few entries and consistent order.
- **Tcpdump logs**: More complex due to varying packet order and encryption. Supported by diff files and plotting packet sizes and TCP flags.
- **System call logs**: Time-consuming due to varying order of certain system calls. Diff files were still feasible for extracting manifestations.

**4.1.3 OpenSSH Attack Manifestations and Log Elements**:
- **Syslog logs**: No differences between successful attack and normal ssh RSA login.
- **Tcpdump logs**: Best manifestation is the packet with the clear text ssh server version number. Traffic is encrypted, so user commands cannot be seen.
- **System call logs**: Generate more useful manifestations. Table 2 shows all events for the OpenSSH attack and the presence of attack manifestations in different log files. Table 3 shows the chosen indicators and the log elements needed for each.

#### 4.2 Tcpdump Attack Analysis

The Tcpdump attack generates interesting entries in both the network traffic log and the system call log but no entries in the syslog files. The analysis of this attack will follow a similar structure to the OpenSSH attack, focusing on the unique characteristics and manifestations of the attack.