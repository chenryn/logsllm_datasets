#### 0x00 背景
公司流量检测项目推进，需求如下：
  1. 在办公网、生产网流量中发现攻击行为（如端口扫描、暴力破解、web攻击、溢出攻击等攻击行为，以及webshell、挖矿木马、C2控制端等），最终输出到内部威胁感知平台做日常运营。
  2. 提取http数据，后续对接漏扫。
  3. 流量中的文件提取。后续对接沙箱或相关恶意文件检测接口（例如virustotal等）进行恶意文件检测。
之前对比了Snort和Suricata，由于性能及多线程等优势，最终选择Suricata作为流量检测引擎。第一个需求考虑使用Suricata，二和三的需求后续考虑使用Bro实现。
故先在内网搭建Suricata进行测试：
> 目标机器版本：Centos 7.2
>
> Suricata版本：suricata-4.1.3
#### 0x01 相关依赖安装
1.先安装相关依赖包：
    sudo yum -y install gcc libpcap-devel pcre-devel libyaml-devel file-devel \
    zlib-devel jansson-devel nss-devel libcap-ng-devel libnet-devel tar make \
    libnetfilter_queue-devel lua-devel
2.安装所需工具：
同样的，也要根据所需安装相关的配套工具，使Suricata发挥出最大”功力“。我这边用到的有luajit、PF_RING、  
和Hyperscan。
#####  luajit
  * LuaJIT简介
LuaJIT是采用C语言写的Lua代码的解释器，LuaJIT试图保留Lua的精髓--轻量级,高效和可扩展。
  * LuaJIT的安装
    wget http://luajit.org/download/LuaJIT-2.0.5.tar.gz
    tar -zxf LuaJIT-2.0.5.tar.gz
    cd LuaJIT-2.0.5/
    sudo make && make install
得到如下提示，证明安装完成了：
我们需要更新动态库,对文件/etc/ld.so.conf进行修改，添加相应的路径/usr/local/lib。
    vim /etc/ld.so.conf
    #添加如下路径，保存退出
    /usr/local/lib
    #运行如下命令加载
    sudo ldonfig
#####  PF_RING
  * PF_RING简介
Github地址：
PF_RING是Luca研究出来的基于Linux内核级的高效数据包捕获技术。简单来说PF_RING 是一个高速数据包捕获库,通过它可以实现将通用 PC
计算机变成一个有效且便宜的网络测量工具箱,进行数据包和现网流量的分析和操作。同时支持调用用户级别的API来创建更有效的应用程序。PF_RING是拥有一套完整开发接口的高速数据包捕捉库，与我们熟知的libpcap十分相似，但其性能要优于libpcap。
按照传统的观念，中间网络节点只能按照协议栈的层次一层一层地解析数据包，所谓路由器是三层设备，交换机是二层设备，防火墙分为二层防火墙和三层防火墙...使用PF_RING的设备，它可以将数据包直接从网卡的芯片DMA到你机器上的内存，仅此而已，然后你通过一个应用程序而不是内核协议栈来处理数据包，至于说你的应用程序怎么处置数据包，我来列举几个：
 深度解析数据包，按照各种你可以想到的粒度来解析会话，然后记录审计信息；
 提供高性能的入侵检测功能；
转发数据包，按照路由器的方式。但是不再仅仅通过查询路由表的方式进行IP路由，而是可以通过各种各样的方式，转发表完全由你自己定义，比如实现一个通用的SDN流表；
 根据上面第2点的含义，你可以决定哪些包被丢弃，这就是一个高性能的防火墙。
相比协议栈的串行解决方案，使用PF_RING是一个更加高效的方案，不但高效，而且灵活。如果你拥有多核心的处理器，你甚至可以可以在用户态并行处理数据包的各个层信息。
更多的关于PF_RING的机制和原理，参考这篇文章：
[PF_RING学习笔记](https://www.jianshu.com/p/6d3f3cdc2411?from=timeline)
  * PF_RING的安装
我这边的流量镜像在eth0网卡，我这边配置的eth0网卡的PF_RING:
    #安装基本库
    yum install numactl-devel
    #编译安装PF_RING之前需要卸载原来的网卡驱动，卸载之前使用ethtool命令查看当前网卡的类型和驱动版本
    ethtool -i eth0
    lsmod | grep igb
    rmmod igb
    #Tips：该操作可能会造成网络无法连接，所以需要现场进行操作，避免使用ssh远程
    git clone https://github.com/ntop/PF_RING/
    cd PF_RING/
    make #直接在跟目录下面make,进行全部编译
    cd PF_RING/kernel
    make
    sudo make install
    #最好设置一下，官方解释是2的性能最好，但是有大神测试后发现差别并不是很大
    insmod pf_ring.ko transparent_mode=1
当PF_RING激活时，会创建/proc/net/pf_ring目录，使用cat命令查看pf_ring的属性信息:
`cat /proc/net/pf_ring/info`
    #编译安装PF_RING所需依赖库
    cd PF_RING/userland/lib
    ./configure
    make
    sudo make install
如果需要使用libpcap抓包分析，请卸载之前安装的libpcap，然后进入/userland/libpcap-1.1.1-ring/目录下配置、编译和安装驱动。
    #卸载原来的libpqcap
    rpm -qa libpcap #查看安装的libpcap，如果有libpcap则强制卸载
    rpm --nodeps -e libpcap
    #安装PF_RING的libpcap
    cd PF_RING-dev/userland/libpcap
    ./configure
    make
    sudo make install
    #编译网卡驱动
    cd PF_RING/drivers/intel/igb/igb-5.3.5.18-zc/src
    sudo insmod igb.ko #安装pf_ring网卡驱动
    sudo modprobe igb #只能载入/lib/modules//中模块
安装完毕，使用dmesg命令查看驱动信息：
`dmesg | grep Ethernet`
测试网络的接受包数：
    cd PF_RING/userland/example
    make
    ./pfcount -i eth0 #测试捕获eth0的数据报文
PF_RING安装完成后，需要在suricata的配置文件中（suricata.yaml）进行配置，参见下文：0x03 suricata.yaml配置。
#####  Hyperscan
  * Hyperscan简介
Github地址：
Wiki：
文档：
Hyperscan是一个高性能的多重正则表达式匹配库。在Suricata中它可以用来执行多模式匹配。Hyperscan适用于部署在诸如DPI/IPS/IDS/FW等场景中,目前已经在全球多个客户网络安全方案中得到实际的应用。
使用 Hyperscan 作为 Suricata 的 MPM(多处理模块) 匹配器（mpm-algo 设置）可以大大提高性能，尤其是在快速模式匹配方面。
Hyperscan 还在快速模式匹配时考虑深度和偏移量。
可以看到，Hyperscan在不同规则集下，单核性能可实现3.6Gbps~23.9Gbps。而且Hyperscan具有良好的扩展性，随着使用核数的增加，匹配性能基本处于线性增长的趋势。在网络场景中，同一规则库往往需要匹配多条网络流。Hypercan的高扩展性为此提供了有力的支持。
更多关于Hyperscan的机制和原理，参考这篇文章：
[来自Intel的高性能的正则表达式匹配库——Hyperscan](https://www.jianshu.com/p/0ca3e14c20e8)
  * Hyperscan的安装
    #安装依赖
    yum install cmake ragel libtool python-devel GyeoIP-devel
    yum install boost boost-devel boost-doc
    yum install libquadmath libquadmath-devel bzip2-devel
    #boost不需要编译安装，如果通过系统包管理工具(yum/apt-get)安装的，版本无法满足版本需要，则需要下载源码包，解压后执行类似
    wget http://downloads.sourceforge.net/project/boost/boost/1.60.0/boost_1_60_0.tar.gz
    tar xvzf boost_1_60_0.tar.gz
    cd boost_1_60_0/
    ./bootstrap.sh --prefix=/tmp/boost-1.60
    #开始编译，编译的过程有点慢
    ./b2 install
    #安装hyperscan
    git clone https://github.com/intel/hyperscan
    mkdir build
    cd build
    cmake -DBUILD_STATIC_AND_SHARED=1 -DBOOST_ROOT=/tmp/boost-1.60 
    #开始安装
    make
    make install
最终的安装完成页面如下所示：
需要更新动态库,对文件/etc/ld.so.conf进行修改，添加相应的路径/usr/local/lib64
    vim /etc/ld.so.conf
    #添加如下路径，保存退出
    /usr/local/lib64
    #运行如下命令加载
    sudo ldonfig
#### 0x02 Suricata的安装
    wget https://www.openinfosecfoundation.org/download/suricata-4.1.3.tar.gz
    tar -xvzf suricata-4.1.3.tar.gz
    cd suricata-4.1.3
    #编译时可用的参数比较多，要根据自己的需求增加相关编辑参数。参见下文
    #我的编译命令如下：
    ./configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var --enable-pfring --with-libpfring-includes=/usr/local/pfring/include
    --with-libpfring-libraries=/usr/local/pfring/lib --enable-geoip --enable-luajit --with-libluajit-includes=/usr/local/include/luajit-2.0/ 
    --with-libluajit-libraries=/usr/local/lib/ --with-libhs-includes=/usr/local/include/hs/ --with-libhs-libraries=/usr/local/lib/ --enable-profiling
    ./configure常见参数作用简单说明：
    使用./configure --help可查看各个参数的说明，其中常见的编译参数如下：
    --prefix=/usr/ #Suricata 安装在/usr/bin/.默认安装在/usr/local/
    --sysconfdir=/etc #Suricata配置文件存在/etc/suricata/,默认存在 /usr/local/etc/
    --localstatedir=/var #设置Suricata日志放在 /var/log/suricata/.默认在 /usr/local/var/log/suricata
    --enable-lua #启用Lua支持检测和输出
    --enable-geopip #启用GeoIP支持检测
    --enable-rust #启用实验Rust支持
    --enable-profiling #启用性能分析
    --enable-nfqueue #为内联IDP(启用NFQueue支持)启用NFQueue支持，一般开启Suricata的IPS模式时使用
    # 加入PF_RING支持
    --enable-pfring #启用本机Pf_Ring的支持
    --with-libpfring-includes #libpfring的目录
    --with-libpfring-libraries #libpfring的库目录
    #Lua主要用来编写规则
    --enable-luajit #启用Luajit(C语言编写的Lua代码解析器)支持
    --with-libluajit-includes #libluajit的目录
    --with-libluajit-libraries #libluajit的库目录
    #使用scan(一个高性能的多重正则表达式匹配库)时，所需的库
    --with-libhs-includes #libhs的目录
    --with-libhs-libraries #libhs的库目录
    --with-libnss-libraries #libnss的目录
    --with-libnss-includes #libnss的库目录
    --with-libnspr-libraries #libnspr的目录
    --with-libnspr-includes #libnspr的库目录
编译完成，如下图所示：
随后运行如下命令进行安装：
    make
    sudo make install
    sudo make install-conf
Suricata安装在/usr/bin/下，相关配置在/etc/suricata/，日志输出在/var/log/suricata/下。运行suricata，返回如下信息，证明安装成功。
执行`suricata --build-info`,如果上述的安装都没问题的话，可以看到suricata已支持PF_RING、LUA和Hyperscan。如下图所示：
#### 0x03 suricata.yaml配置
suricata.yaml配置文件的相关参数说明可参考这篇文章：[Suricata配置文件说明](https://www.cnblogs.com/UnGeek/p/5796934.html)
如下是我的相关suricata配置文件的配置：
#####  基本配置
    ##
    ## Step 1: inform Suricata about your network
    ##
    vars:
      # more specific is better for alert accuracy and performance
      address-groups:
        #HOME_NET: "[192.168.0.0/16,10.0.0.0/8,172.16.0.0/12]"
        #配置内网网段
        HOME_NET: "[192.168.0.0/16,10.0.0.0/16]"
        #HOME_NET: "[192.168.0.0/16]"
        #HOME_NET: "[10.0.0.0/8]"
        #HOME_NET: "[172.16.0.0/12]"
        #HOME_NET: "any"
        EXTERNAL_NET: "!$HOME_NET"
        #EXTERNAL_NET: "any"
        HTTP_SERVERS: "$HOME_NET"
        SMTP_SERVERS: "$HOME_NET"