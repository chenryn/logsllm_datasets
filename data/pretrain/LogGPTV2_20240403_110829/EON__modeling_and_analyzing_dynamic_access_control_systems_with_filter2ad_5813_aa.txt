# EON: Modeling and Analyzing Dynamic Access Control Systems with Logic Programs

**Authors:**
- Avik Chaudhuri, University of California, Santa Cruz, USA
- Prasad Naldurg, Microsoft Research, Bangalore, India
- Sriram K. Rajamani, Microsoft Research, Bangalore, India
- G. Ramalingam, Microsoft Research, Bangalore, India
- Lakshmisubrahmanyam Velaga, Indian Institute of Management, Bangalore, India

## Abstract
We introduce EON, a logic-programming language and tool designed for modeling and analyzing dynamic access control systems. EON extends Datalog with carefully crafted constructs that enable the introduction and transformation of new relations, such as the creation of processes and objects, and the modification of their security labels at runtime. The information-flow properties of these systems can be analyzed by querying in this language. We demonstrate that query evaluation in EON can be reduced to decidable query satisfiability in a fragment of Datalog, and under certain restrictions, to efficient query evaluation in Datalog. Our implementation of these reductions is demonstrated through several case studies, including detailed analyses of the dynamic access control models in Windows Vista and Asbestos operating systems. Additionally, we automatically prove the security of a webserver running on Asbestos.

**Categories and Subject Descriptors**
- D.4.6 [Operating Systems]: Security and Protection—Access controls, Information flow controls, Verification
- F.3.1 [Logics and Meanings of Programs]: Specifying and Verifying and Reasoning about Programs—Specification techniques, Mechanical verification
- F.4.1 [Mathematical Logic and Formal Languages]: Mathematical Logic—Logic and constraint programming

**General Terms**
- Security, Verification, Languages, Algorithms

**Keywords**
- Dynamic access control, logic programming, automatic verification

## 1. Introduction
Modern operating systems often implement access control models that aim to balance security and practicality. However, achieving this balance can be challenging, as stringent security measures may lead to inflexibility. To address this, many systems allow for dynamic access control at runtime. This paper focuses on verifying such systems automatically, particularly those where processes and objects are labeled with security levels, and access is controlled based on these labels. Examples include Windows Vista and Asbestos, which, while weaker than classical models like Bell-LaPadula and Biba, offer more flexibility.

Consider a scenario where a high-privileged process needs to execute a low-privileged executable downloaded from the internet. If the integrity of the executable can be verified, the high-privileged process should be able to run it by upgrading its label. Conversely, if the integrity cannot be verified, the process should downgrade itself to run the executable, adhering to the principle of least privilege. Both Windows Vista and Asbestos support such dynamic label changes, but they also introduce potential vulnerabilities if not managed carefully.

EON, our proposed logic-programming language, extends Datalog with dynamic operators to model and analyze such systems. We show how to code information-flow violations as queries in EON and use query evaluation to identify potential vulnerabilities. EON's design includes specific restrictions that ensure decidability and efficiency. We implement these reductions in our tool and evaluate the security of Windows Vista and Asbestos, demonstrating EON's effectiveness in specifying, understanding, and verifying access control models.

The rest of the paper is organized as follows:
- **Section 2**: Introduces the EON language, including its syntax and semantics.
- **Section 3**: Describes how query evaluation in EON can be reduced to query satisfiability in a fragment of Datalog.
- **Section 4**: Shows how query evaluation in a fragment of EON can be reduced to efficient query evaluation in Datalog.
- **Section 5**: Presents applications of our technique through experiments with the EON tool.
- **Section 6**: Discusses related work.
- **Section 7**: Summarizes our contributions and concludes the paper.

## 2. The EON Language
### 2.1 Syntax
EON extends Datalog with two dynamic operators: `new` and `next`. These operators allow the introduction and transformation of new relations. For example, consider a system where new administrators and users can be added, and users can be promoted to administrators. The `new` operator creates fresh constants, and the `next` operator transforms relations over those constants.

#### Example
```eon
new Admin.
new User.
next Admin(x) :- User(x), Admin(y).
Control(x) :- Admin(x).
```

This program models the creation of new administrators and users, and the promotion of users to administrators. Queries can then be used to check if a user who is not an administrator can control the system:

```eon
? User(x), !Admin(x), Control(x).
```

This query evaluates to false, indicating that a user who is not an administrator cannot control the system. In contrast, the following query checks if a user can eventually control the system:

```eon
? User(x), !Admin(x) # Control(x).
```

This query evaluates to true, indicating that a user can eventually become an administrator and control the system.

Formally, an EON program is a set of EON clauses. Let \( E \) be a set of unary base relations, called dynamic relations, and \( B \) range over subsets of \( E \). The grammar of EON clauses is as follows:

- **EON Clause**: \( S \leftarrow L_1, \ldots, L_n \)
- **New Clause**: `new B :− R.`
- **Next Clause**: `next B(x), !B′(x) :− R(x).`

These constructs allow for the modeling of dynamic systems where relations can be introduced and transformed over time.