should however be preserved) without violating this delay
bound.
Before stating the lower bounds and their proofs, we would
like to explain the intuition behind them. The core idea is
to reduce the problem of scheduling with O(1) delay bound
to the problem of sorting. Given any sorting instance, we
reduce it to a scheduling instance in O(n) time and run the
scheduler with O(1) delay bounds on it. Then we can show
that the resulting output can be sorted in O(n) time. Since
the sorting complexity is nlog2n− o(nlog2n), the scheduling
complexity has to be at least nlog2n − o(nlog2n). Other-
wise, we have an algorithm that asymptotically beats the
complexity lower bound, which is impossible. The proof is
split into two parts. In the ﬁrst part (Theorem 1), we ex-
plain the reduction algorithm and establish the complexity
equations. In the second part (Theorem 2), we show that
this reduction program is correct in the sense that the re-
sulting program (output of the reduction process) indeed
performs sorting correctly. This is proved using standard
invariant-based techniques for establishing program correct-
ness, and an assertion that a scheduling program should sat-
isfy (Lemma 4), when comparisons are only allowed among
inputs.
In proving the following theorem, we assume that there
is a O(1)-Delay-Scheduler procedure which guarantees that
the GPS-relative delay of any packet will not exceed K Lmax
(i.e., O(1)). Here K ≥ 1 is a constant integer independent
of the number of sessions n and the total link bandwidth r.
We also assume that the CBFS condition is satisﬁed.
r
Theorem 1
(Complexity). The computational com-
plexity lower bound of the procedure O(1)-Delay-Scheduler
is Ω(log2n) per packet.
n+1
i(M−m)
n+1 +δ, i = 1, 2, ··· , n}, where 0  K + 3, suppose there are more than K + 2
packets that are scheduled before Ti and are longer than Ti.
Suppose π(j) = i, i.e., Ti is the j’th smallest packet among
{Tk}1≤k≤n. We argue that i ≤ j + K + 2. In other words,
Ti should not be displaced backward by more than K + 2
positions. To see this, we generate two arbitrary sets of
real numbers {αk}1≤k≤n and {βk}1≤k≤n, where 0  xi.
It is not hard to
verify that the relative order of any two numbers xl and
xm is the same after the change. Note that the procedure
O(1)-Delay-Scheduler is only allowed to compare among the
inputs, which are {xi}1≤i≤n, 0, and Lmax. Clearly, with the
modiﬁed inputs, the decision tree of the procedure O(1)-
Delay-Scheduler will follow the same path from the root to
the leaf as with the original inputs, since all predicates along
the path are evaluated to the same value! Consequently, the
output schedule of the packets remain the same with the
modiﬁed inputs. In the new schedule with the modiﬁed in-
puts, since there are K + 2 packets that are scheduled before
Ti and are longer than Lmax − δ, the actual ﬁnish time of
Ti is larger than (K + 2) Lmax−δ
. However,
r
its GPS virtual ﬁnish time is no larger than nδ
. So
the GPS-relative delay of the packet Ti must be larger than
(K + 1) Lmax
. This violates the assumed
property of O(1)-Delay-Scheduler.
> (K + 1) Lmax
r = K Lmax
− Lmax
r < Lmax
r
r
r
r
Remark: The ideas contained in the proof bear some
similarity to that of Knuth’s 0-1 law [11], which states the
following. If a sorting network can correctly sort inputs con-
sisting of any arbitrary combinations of 0’s and 1’s, it must
be able to correctly sort all inputs. In our proof, {αi}1≤i≤n
and {Lmax − βi}1≤i≤n, to a certain extent, can be viewed
as such 0’s and 1’s.
3.3 Ω(log2n) complexity for O(na) delay
In this section, we prove that the tradeoﬀ curve is ﬂat as
shown in Fig. 2: Ω(log2n) complexity is required even when
O(na) delay (0 < a < 1) can be tolerated.
Its reduction
proof is mostly similar to that of Theorem 1. The main
diﬀerence is that the constant factor before the asymptotic
term (nlog2n) becomes critical in this case.
Theorem 3. Suppose we have a procedure O(na)-Delay-
Scheduler that guarantees a GPS-relative delay of no more