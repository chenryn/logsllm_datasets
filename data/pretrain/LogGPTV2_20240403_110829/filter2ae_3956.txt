# 在 Android 中开发 eBPF 程序学习总结（二）
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
在上一章的基础上深入研究
在上一篇文章中，我自己改了一版BPF程序的代码`bpftest.c`，代码也在上一篇文章中放出来了，但是一个完整的BPF程序，还需要一个用户态的loader，也就是需要有一个读取BPF程序给我们数据的程序。
之前也说了，可以使用MAP来进行数据交互，在`bpftest.c`代码中`bpf_execve_map_update_elem(&key, &event,
BPF_ANY);`，把`event`结构体更新到key=1的map中，也就是说，把每个进行`syscall`调用的程序的pid，gid，还有程序名，更新到MAP中。所以我们需要一个loader，来读取MAP，从而得到这些信息。
最开始，loader我使用的是android
demo代码中的那个，但是在使用中发现，没办法读取结构体的值，也搜不到相关文章，能搜到示例代码的value类型都是整型，并且我对android开发也不是很熟悉，所以考虑用C自己写一个。
通过strace抓取之前这个loader的系统调用：
    bpf(BPF_OBJ_GET, {pathname="/sys/fs/bpf/prog_bpftest_tracepoint_raw_syscalls_sys_enter", bpf_fd=0, file_flags=0}, 120) = 3
    openat(AT_FDCWD, "/sys/kernel/tracing/events/raw_syscalls/sys_enter/id", O_RDONLY|O_CLOEXEC) = 4
    read(4, "21\n", 4096)                   = 3
    close(4)                                = 0
    perf_event_open({type=PERF_TYPE_TRACEPOINT, size=0, config=21, ...}, -1, 0, -1, PERF_FLAG_FD_CLOEXEC) = 4
    ioctl(4, PERF_EVENT_IOC_SET_BPF, 3)     = 0
    ioctl(4, PERF_EVENT_IOC_ENABLE, 0)      = 0
    nanosleep({tv_sec=1, tv_nsec=0}, 0x7ff104b788) = 0
    bpf(BPF_OBJ_GET, {pathname="/sys/fs/bpf/map_bpftest_execve_map", bpf_fd=0, file_flags=0}, 120) = 5
    nanosleep({tv_sec=0, tv_nsec=40000000}, NULL) = 0
    bpf(BPF_MAP_LOOKUP_ELEM, {map_fd=5, key=0x7ff104b5f4, value=0x7ff104b5e8}, 120) = 0
通过上面的系统调用，我们就能理清楚，loader程序到底做了哪些工作。
接着我找到了Linux内核中的一个bpf_load.c，参考了一下在普通的Linux系统中，loader是怎么处理的，所以我对该程序进行了修改，增加了以下代码：
    struct androidBPF {
        char *prog_path;
        char *map_path;
        char *tp_category;
        char *tp_name;
    };
    static int load_prog(char *prog_path)
    {
        int pfd;
        pfd = bpf_obj_get(prog_path);
        if (pfd = sizeof(buf)) {
            printf("read from failed '%s'\n", strerror(errno));
            return -1;
        }
        close(efd);
        buf[err] = 0;
        id = atoi(buf);
        attr.config = id;
        efd = perf_event_open(&attr, -1/*pid*/, 0/*cpu*/, -1/*group_fd*/, 0);
        if (efd prog_path);
        if (fd tp_category, abpf->tp_name);
        if (efd map_path);
        if (mfd  0) {
                buf[sz] = 0;
                puts(buf);
            }
        } while (--times);
    }
接着，我就能使用C代码来写loader了：
    #include "bpf_load.h"
    #include 
    #include 
    int main(int argc, char **argv) {
      struct androidBPF abpf = {0, };
        if (argc curl`写入map当中，然后在BPF程序中，从`map[111]`获取value，只有当`comm
== map[111]`的情况下，才把信息写入map当中。
我们重新再来理解一下loader的操作：
  1. BPF_OBJ_GET prog_bpftest_tracepoint_raw_syscalls_sys_enter，获取prog对象
  2. 读取SEC定义的section的id，从`/sys/kernel/tracing/events/raw_syscalls/sys_enter/id`获取
  3. perf_event_open打开相应时间，因为是tracepoint，所以type要设置为PERF_TYPE_TRACEPOINT，config等于上面获取id
  4. 打开事件后，获取了一个文件描述符，对该文件描述符进行ioctl操作，操作的命令有两个，`PERF_EVENT_IOC_SET_BPF`和`PERF_EVENT_IOC_ENABLE`，PERF_EVENT_IOC_SET_BPF设置为prog对象的文件描述符
到这里为止，表示激活了你想调用的BPF程序了，要不然默认情况下BPF都处于未激活状态。
接下来就是对map的操作：
  1. BPF_OBJ_GET /sys/fs/bpf/map_bpftest_execve_map，获取map对象。
  2. BPF_MAP_LOOKUP_ELEM {map_fd=5, key=0x7ff104b5f4, value=0x7ff104b5e8}，从map_fd中搜索key对应的value，储存在value的指针中返回。
目前这块的资料太少了，只能通过一些demo和源码来进行研究，下一篇将会研究uprobe的用法。
## 参考
  1. 