the conditions that the adversary would most likely
face on the live network, where the majority of cir-
cuits to be classiﬁed are general browsing circuits.
Results. We used n-fold cross-validation for the three
classiﬁcation algorithms. This is a validation technique
where the dataset is divided into n subsets and n− 1 sub-
sets are used for training and 1 subset is used for testing,
and the process is repeated n times, where each subset is
used for validation exactly once. Finally, the results from
all n folds are averaged. We set n to 10 for our experi-
ments.
We found that both C4.5 and CART perform equally
well in classifying both datasets. We also found that k-
NN performs well when cell sequences are used as fea-
tures but otherwise performs poorly. For the IP-Noise
dataset, when cell sequences are not used as a feature,
as shown in Figure 10, the per-class TPR for CART
ranges between 91.5% (Client-IP class) and 99% (for
noise class), whereas the per-class accuracy for C4.5
ranges between 95.5% (Client-IP), and 99.8% (for noise
class). k-NN performs worse with a TPR ranging from
55% (for HS-IP class) and 99% (for noise class). k-NN
also has a high FPR for the noise class that exceeds 20%.
Both C4.5 and Cart have 0% FPR for HS-IP, and have
0.2% and 0.1% FPR for Client-IP, respectively. How-
ever, we found that Cart has 7% FPR for the noise class
because 17 out of 200 Client-IP instances got misclas-
siﬁed as noise. Therefore, based on the TPR and FPR
rates, we conclude that C4.5 outperforms k-NN and Cart
for the IP-Noise dataset when no sequences are used as
features.
Figure 11 shows that when sequences are used as clas-
siﬁcation features, all three classiﬁers perform very well,
but C4.5 still outperforms both Cart and k-NN with a
nearly perfect per-class TPR. Interestingly, all classiﬁers
provide 0% FPR for HS-IP and very low FPR for Client-
IP and noise. We note that C4.5 also provides the best
performance since it provides the highest TPR and low-
est FPR among other classiﬁers.
2Recall that Client-IP are short-lived and one of these circuits is
created every time a client attempts to connect to a HS, whereas HS-IP
circuit samples are the most difﬁcult to obtain since we observe each
of them for an hour before we repeat experiments.
296  24th USENIX Security Symposium 
USENIX Association
10
Table 4: Impact of different features on the TPR and FPR for
the RP-Noise dataset. The table shows the accuracy results
(TPR / FPR) if individual categories of features are used.
TPR/FPR
HS-RP
Client-RP
Noise
Cells
Sequences
0% / 0%
98% / 0%
100% / 46% 99.5% / 44.8%
95% / 0.1%
15% / 0.3%
Sequences and Cells
95.5% / 0.1%
99% / 0%
99.9% / 2.5%
Figure 11: TPR and FPR of circuit classiﬁcation with 3 classes
when cell sequences are used. FPR is shown in log scale.
Figure 10: TPR and FPR of circuit classiﬁcation with 3 classes
when no cell sequences are used. FPR is shown in log scale.
For the RP-Noise dataset, we observe that both C4.5
and Cart provide identical performances in terms of TPR
and FPR as shown in Figure 12. Both provide very high
TPR for all classes, and 0% FPR for HS-RP and Client-
RP classes. The FPR achieved by C4.5 and CART for
the noise class is also low at 3%. k-NN provides slightly
higher TPR for the HS-RP class than CART and C4.5,
but the TPR is very similar to that achieved by CART
and C4.5. We thus conclude that all classiﬁers perform
equally well for the RP-noise dataset. Table 4 shows the
impact on the overall accuracy based on different fea-
tures.
6.2 Accuracy of Circuit Correlation
Datasets. We collected data of both the clients’ and the
servers’ IP and RP circuit pairs for different hidden ser-
vices. To collect client side circuit pairs, we used both
firefox and wget (with ﬂags set to mimic a browser as
much as possible) to connect to hidden and non-hidden
services from many different machines, each with one
Tor instance. Each client visited 1000 different hid-
den services and 1000 most popular websites [1] several
times. To collect server side circuit pairs, we spawned
our own hidden service, and had multiple clients connect
and view a page. The number of simultaneously connect-
ing clients ranged from 1 to 10 randomly.
Figure 12: TPR and FPR of circuit classiﬁcation with 3
classes. FPR is shown in log scale.
We then extracted traces of the ﬁrst 20 cells of 6000
IP-RP circuit pairs (3000 client and 3000 server pairs)
and 80000 of non-special circuit pairs. The non-special
circuit pairs included any combination that is not IP-RP
(i.e., IP-general, RP-general, general-general).
Result. The accuracy of IP-RP classiﬁcation is shown
in Table 5. We again used 10-fold cross validation to
evaluate our attack. We can see that IP-RP circuit pairs
are very identiﬁable: all three algorithms have 99.9%
true positive rate, and less than 0.05% false positive rate.
This accuracy is likely due to the uniqueness of the ex-
act sequence of cells for IP-RP circuits. From the 6000
sequences of IP-RP pairs and 80000 non-special pairs,
there were 923 and 31000 unique sequences respectively.
We found that only 14 sequences were shared between
the two classes. Furthermore, of those 14 sequences,
only 3 of them had more than 50 instances.
This result implies that an adversary who can see a
user’s IP and RP (e.g., entry guard) can classify IP and
RP circuits with almost 100% certainty by observing a
USENIX Association  
24th USENIX Security Symposium  297
11
Table 5: IP/RP Pair Classiﬁcation
Algorithm True Positive Rate
CART
C4.5
k-NN
0.999
0.999
0.999
False Positive Rate
2.07· 10−4
3.45· 10−4
6.90· 10−5
few cells. Moreover, the attack can be carried out in near
real-time speed since we only need the ﬁrst 20 cells. The
attacker can thus effectively rule out most non-sensitive
circuits, making data collection much easier.
7 Website Fingerprinting Revisited
In this section, we discuss the impact of our observations
and attacks on WF, and show the result of applying mod-
ern WF techniques to hidden services. We show that the
adversary can classify both the clients’ and the operators’
hidden service activities with high probability.
7.1 Adversaries Targeting Hidden Services
Juarez et al. [24] recently criticized various WF attacks
because they made assumptions which were too advan-
tageous for the adversary, and exacerbated the effective-
ness of their attacks.
In this section, we discuss some
of the points that were raised by Juarez et al. [24] and
show how our attacks address the concerns in the case of
attacking hidden services.
Noisy streams. Previous WF attacks assumed that the
adversary is able to eliminate noisy background trafﬁc
[10, 35, 36]. For example, if the victim’s ﬁle download
stream (noise) is multiplexed in the same circuit with the
browsing stream (target), the attacker is able to eliminate
the noisy download stream from the traces. With a lack
of experimental evidence, such an assumption might in-
deed overestimate the power of the attack.
In the world of hidden services, we observed that
Tor uses separate circuits for different .onion domains
(Section 3). Furthermore, Tor does not multiplex gen-
eral streams accessing general non-hidden services with
streams accessing hidden services in the same circuit.
From the attacker’s perspective, this is a huge advan-
tage since it simpliﬁes trafﬁc analysis; the attacker does
not have to worry about noisy streams in the background
of target streams. Furthermore, the previous assumption
that the attacker can distinguish different pages loads is
still valid [35]. User “think times” still likely dominate
the browsing session, and create noticeable time gaps be-
tween cells.
Size of the world. All previous WF attacks have a
problem space that is potentially signiﬁcantly smaller
than a realistic setting. Even in Wang et al.’s “large”
open-world setting, the number of all websites are lim-
ited to 10,000 [35]. Moreover, different combinations
of websites sharing one circuit could make it impossible
to bound the number of untrainable streams. This im-
plies that the false positive rate of WF techniques in prac-
tice is signiﬁcantly higher, since the ratio of trained non-
monitored pages to all non-monitored pages go down.
However, in the case of hidden services, the size of the
world is signiﬁcantly smaller than that of the world wide
web. Also, while it is true that not all existing hidden
services are publicly available, it has been shown that
enumerating hidden services is possible [6]3.
In some
cases, the attacker could be mainly interested in identi-
fying a censored list of services that make their onion
address public. Furthermore, we do not need to consider
the blow up of the number of untrainable streams. Since
RP always produces clean data, the number of untrained
streams is bounded by the number of available hidden
services.
Rapidly changing pages. The contents of the general
web changes very rapidly as shown by Juarez et al. [24].
However, hidden pages show minimal changes over time
(Section 3), contrary to non-hidden pages. The slowly
changing nature of hidden services reduces the attacker’s
false positives and false negatives, and minimizes the
cost of training. Furthermore, hidden services do not
serve localized versions of their pages.
Replicability.
Another assumption pointed out by
Juarez et al. [24], which we share and retain from pre-
vious WF attacks, is the replicability of the results. That
is, we are assuming that we are able to train our classiﬁer
under the same conditions as the victim. Indeed, we ac-
knowledge that since it is difﬁcult to get network traces
of users from the live Tor network, we are faced with the
challenge of having to design experiments that realisti-
cally model the behavior of users, hidden services, and
the conditions of the network. That said, our attacks de-
scribed above use features that are based on circuit inter-
actions and are independent of the users’ browsing habits
or locations, which can reduce the false positive rate for
the WF attacker.
Based on the above discussion, we claim that our at-
tacker model is signiﬁcantly more realistic than that of
previous WF attacks [10, 35, 36]. While the conclusions
made by Juarez et al. [24] regarding the assumptions of
previous WF attacks are indeed insightful, we argue that
many of these conclusions do not apply to the realm of
hidden services.
3As pointed out by a reviewer, it is worth noting that the speciﬁc
technique used in [6] has since been adressed by a change in the HS
directory protocol.
298  24th USENIX Security Symposium 
USENIX Association
12
7.2 Methodology
We ﬁrst note here that hidden services have signiﬁcantly
lower uptime than a normal website on average. We
found that only about 1000 hidden services were consis-
tently up of the 2000 hidden services we tried to connect
to. This makes collecting signiﬁcant amounts of traces
of hidden services very difﬁcult. Furthermore, we found
that hundreds of the available services were just a front
page showing that it had been compromised by the FBI.
This introduces signiﬁcant noise to WF printing tech-
niques: we now have hundreds of “different” pages that
look exactly the same. We thus tried to group all of these
hidden services as one website. This unfortunately lim-
ited our open world experiments to just 1000 websites.
We also note that there may be other similar cases in our
data, where a hidden service is not actually servicing any
real content.
7.2.1 Data Collection
We gathered data to test OP servicing a normal user and
a hidden service for both closed and open world settings.
For the normal user case, we spawned an OP behind
which a client connects to any website. We then used
both firefox and wget to visit 50 sensitive hidden ser-
vices that the attacker monitors (similar to experiments
in Section 3). Our sensitive hidden service list contained
a variety of websites for whistleblowing, adult content,
anonymous messaging, and black markets. We collected
50 instances of the 50 pages, and 1 instance of 950 the
other hidden services.
For the hidden service case, we ﬁrst downloaded the
contents of 1000 hidden services using a recursive wget.
We then started our own hidden service which contains
all the downloaded hidden service contents in a subdi-
rectory. Finally, we created 5 clients who connect to our
service to simulate users connecting to one server, and
visiting a cached page. We then reset all the circuits, and
visited a different cached page to simulate a different hid-
den service. We repeated this experiment 50 times for the
50 monitored hidden services, and once for the other 950
hidden services.
We argue that this setup generates realistic data for the
following reasons. First, as shown in Section 3, the ac-
tual contents of hidden services changes minimally. Thus
servicing older content from a different hidden service
within our hidden service should not result in a signiﬁ-
cantly different trace than the real one. Second, the exact
number of clients connected to the service is irrelevant
once you consider the results in Section 6. An RP circuit
correlates to one client, and thus allows us to consider
one client trace at a time. Note that this is how a real-life
adversary could generate training data to deanonymize
Figure 13: Accuracy of website ﬁngerprinting attacks in closed
world setting.
the servers: it could run its own servers of the cached
hidden services, and collect large samples of the servers’
trafﬁc patterns.
7.2.2 Website Fingerprinting Hidden Services
We extracted features similar to the ones presented in
Wang et al. [35] from the data we collected.
• General Features: We use the total transmission
size and time, and the number of incoming and out-
going packets.
• Packer Ordering: We record the location of each
outgoing cell.
• Bursts: We use the number of consecutive cells of
the same type. That is, we record both the incoming
bursts and outgoing bursts, and use them as features.
We performed WF in closed and open world settings.
In the closed world setting, the user visits/hosts a hid-
den service selected randomly from the list of 50 pages
known to the attacker. In the open world setting, the user
visits/hosts any of the 1000 pages, only 50 of which are
monitored by the attacker. In either case, the attacker col-
lects network traces of the Tor user, and tries to identify
which service is associated with which network trace.
We can consider the clients and the servers separately
since we can identify HS-IP and Client-IP using the at-
tack from Section 5.1 with high probability.
7.3 WF Accuracy on Hidden Services
We ran the same classiﬁers as the ones used in Section 6:
CART, C4.5, and k-NN.4 The accuracy of the classiﬁers
in the closed world setting of both client and server is
shown in Figure 13. For the open world setting, we var-
ied the number of non-monitored training pages from
100 to 900 in 100 page increments (i.e., included exactly
4For k-NN, we tested with both Wang et al. [35] and the implemen-
tation in Weka, and we got inconsistent results. For consistency in our
evaluation, we used the Weka version as with the other two classiﬁers.
USENIX Association  
24th USENIX Security Symposium  299
13
ied from 80.3% to 7.8% for attacking servers.5 Though
the FPR is too a large for accurate classiﬁcation when
trained only on small number of non-monitored websites,