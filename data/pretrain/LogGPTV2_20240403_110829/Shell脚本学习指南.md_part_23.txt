### 6.1.2.1 模式匹配

#### 示例：`$(variable%%pattern)`

- **功能**：如果模式与变量值的结尾处匹配，则删除匹配的最短部分，并返回剩下的部分。
- **示例**：`$(patht%%.*)`
- **结果**：`/home/tolstoy/mem/1ong.fi1e`

#### 示例：`$(variable%pattern)`

- **功能**：如果模式与变量值的结尾处匹配，则删除匹配的最长部分，并返回剩下的部分。
- **示例**：`$(pathee%*)`
- **结果**：`/home/tolstoy/mem/1ong`

**记忆技巧**：
- `%%` 匹配的是前面，因为数字正负号总是置于数字之前。
- `%` 匹配的是后面，因为百分比符号总是跟在数字的后面。
- 另一种记忆方式是看美式键盘配置：位置靠左、靠右。

**常用模式**：
- `/*/*/`：匹配任何位于两个斜杠之间的元素。
- `.*`：匹配点号之后接着的任何元素。

**字符串长度运算符**：
- `$(#variable)` 返回 `variable` 值里的字符长度。
- 示例：`x=supercalifragilisticexpialidocious`
- 输出：`There are 34 characters in supercalifragilisticexpialidocious`
- 使用方法：`echo There are $(#x) characters in $x`

### 6.1.2.2 位置参数

**位置参数**（positional parameter）指的是 Shell 脚本的命令行参数或 Shell 函数内的函数参数。它们以单个整数命名。当这个整数大于9时，应使用花括号括起来。

- 示例：`echo first arg is $1`
- 示例：`echo tenth arg is ${10}`

**值测试与模式匹配运算符**：
- 示例：`filename=${1:-/dev/tty}`
- 功能：如果给定参数使用它，如无参数则使用 `/dev/tty`。

**特殊“变量”**：
- `#$`：提供传递到 Shell 脚本或函数的参数总数。
  - 示例：`[ $# -eq 0 ] && exit 1`
  - 循环示例：
    ```bash
    while [ $# -gt 0 ]; do
        case $1 in
            # 处理第一个参数
        esac
        shift
    done
    ```

- `*` 和 `$@`：表示所有命令行参数。
  - `"$*"`：将所有命令行参数视为单个字符串。
  - `"$@"`：将所有命令行参数视为单独的个体，保留每个参数中的空白。

- `set` 命令：设置位置参数的值，并丢弃之前的值。
  - 示例：`set -- hello "hi there" greetings`
  - 输出：
    ```bash
    echo there are $# total arguments
    there are 3 total arguments
    for i in "$*"; do
        echo "i is $i"
    done
    ```

- `shift` 命令：从列表中移除位置参数，由左开始。
  - 示例：
    ```bash
    set -- hello "hi there" greetings
    shift
    echo there are now $# arguments
    there are now 2 arguments
    for i in "$@"; do
        echo "i is $i"
    done
    ```

### 6.1.2.3 特殊变量

除了常见的特殊变量（如 `#` 和 `*`），Shell 还有许多内置变量。表6-3列出了这些变量及其意义。

| 变量 | 意义 |
|------|------|
| `#`  | 当前进程的参数个数。 |
| `*`  | 传递给当前进程的命令行参数，置于双引号内，会展开为个别参数。 |
| `*`  | 当前进程的命令行参数，置于双引号内，则展开为一单独参数。 |
| `-`  | 在引用时给予 Shell 的选项。 |
| `?`  | 前一命令的退出状态。 |
| `$$` | Shell 进程的进程编号。 |
| `0`  | Shell 程序的名称。 |
| `!`  | 最近一个后台命令的进程编号。 |
| `ENV` | 交互式 Shell 中引用时，$ENV 的值是可展开的参数。 |
| `HOME` | 根（登录）目录。 |
| `IFS` | 内部字段分隔器，默认为空格、制表符和换行。 |
| `LANG` | 当前 locale 的默认名称。 |
| `LC_ALL` | 当前 locale 的名称，覆盖 LANG 和其他 LC_* 变量。 |
| `LC_COLLATE` | 用来排序字符的当前 locale 名称。 |
| `LC_CTYPE` | 在模式匹配期间，用来确定字符类别的当前 locale 名称。 |
| `LC_MESSAGES` | 输出信息的当前语言名称。 |
| `LINENO` | 刚执行过的行在脚本或函数内的行编号。 |
| `NLSPATH` | 在 LC_MESSAGES (XSI) 所给定的信息语言里，信息目录的位置。 |
| `PATH` | 命令的查找路径。 |
| `PPID` | 父进程的进程编号。 |
| `PS1` | 主要的命令提示字符，默认为 `\$`。 |
| `PS2` | 行继续的提示字符串，默认为 `>`。 |
| `PS4` | 以 `set -x` 设置的执行跟踪的提示字符，默认为 `+`。 |
| `PWD` | 当前工作目录。 |

### 6.1.3 算术展开

Shell 的算术运算符与 C 语言类似，优先级和顺序也相同。表6-4列出了支持的算术运算符，按优先级从高到低排列。

| 运算符 | 描述 |
|--------|------|
| `++ --` | 增加及减少，可前置也可放在结尾 |
| `+ - ! ~` | 一元的正号与负号：逻辑与位取反 |
| `* / %` | 乘法、除法与余数 |
| `+ -` | 加法与减法 |
| `<< >>` | 向左位移、向右位移 |
| `< <= > >=` | 比较 |
| `== !=` | 相等与不等 |
| `&` | 位 AND |
| `^` | 位 XOR |
| `|` | 位 OR |
| `&&` | 逻辑 AND（简捷方式） |
| `||` | 逻辑 OR（简捷方式） |
| `? :` | 条件表达式 |

关系运算符产生数字结果，1 表示真，0 表示假。例如：
```bash
echo $((3 > 2))  # 结果为 1
echo $(( (3 > 2) || (4 <= 1) ))  # 结果为 1
```

逻辑 AND 和 OR 运算符中，非零值被视为真：
```bash
echo $((3 && 4))  # 结果为 1
```

常规赋值运算符的缩写形式简化了变量更新。例如：
```bash
x=$((x + 1))
```

如果你对 C、C++ 或 Java 已有所了解，那么应该熟悉这些运算符。如果不熟悉，可以参考相关文档进一步学习。