例: $(variabletpatcern)
如果模式匹配于变量值的结尾处，剩删除匹配的最短部
分，并返国剩下的部分。
例：$(patht.*)
结果：/home/tolstoy/mem/1ong.fi1e
例：${variablettpattern)
如果模式匹配干变量值的结尾处，则册除匹配的最长部
分，并返回剩下的部分。
例：$(pathee,*)
结果：/home/tolstoy/mem/1ong
这些看起来很难记，我们提供一个帮助记忆的好方法：匹配的是前面，因为数字正负
号总是置于数字之前：$匹配的是后面，因为百分比符号总是跟在数字的后面，另外一
种帮助记忆的方式则是看传统的健盘配置（当然，指的是在美式键盘上）：位置靠左、
靠右。
在这里用到的两种模式分别是：/*/，匹配任何位于两个斜杠之间的元素：.*，匹配点
号之后接着的任何元素。
最后，POSIX标准化字符串长度运算符：$（variable）返回Svariable值里的字符长
度：
S x=gupercalifragilLsticexplalidoclous
著名的特殊单间
There are 34 characters In supercalifragilisticexpialidocious
S ecbo Tbere are S(#x} cbaracters in Sx
6.1.2.2位置参数
所谓位置参数（positional parameter），指的是Shell脚本的命令行参数（argument），同
时也表示在Shell函数内的函数参数。它们的名称是以单个的整数来命名。出于历史的
原因，当这个整数大于9时，就应该以花括号（（））括起来：
echo first arg is $1
echo tenth arg is $(10)
你也可以将前一节介绍的值测试与模式匹配运算符，应用到位置参数：
filenane=$(1:- /dev/tty)
如果给定参数期使用它，如无参数知使用/dav/tty
www.TopSage.com
---
## Page 142
130
下面介绍的特殊“变量”提供了对传递的参数的总数的访间，以及一次对所有参数的访OIm1
间：
#$
提供传递到Shell脚本或函数的参数总数。当你是为了处理选项和参数而建立循环
时，它会很有用（在稍后的6.4节里会说明）。举例如下：
[0  #s ] T
以shift逐渐减少S#，循环将会终止
do
case $1 in
处理第一个参数
esac
done
shift
移开第一个参数（见稍后内文说明）
S*,$θ
一次表示所有的命令行参数。这两个参数可用来把命令行参数传递给脚本或函数所
执行的程序。
"S**
将所有命令行参数视为单个字符串，等同于*S1S2..。SIFS的第一个字符用
来作为分隔字符，以分隔不同的值来建立字符串。举例如下：
..
.e$.
将所有命令行参数视为单独的个体，也就是单独字符串。等同于“S1·“S2”.
这是将参数传递给其他程序的最佳方式，因为它会保留所有内嵌在每个参数里的任
何空白，举例如下：
lpr *se*
显示每一个文件
set命令可以做的事很多（详见7.9.1节说明）。调用此命令而未给予任何选项，则它会
设置位置参数的值，并将之前存在的任何值丢弃：
set-hitherehowdoyou do-会结束选项邮分，自hi开始新的参数
shift命令是用来“截去（lopsoff)”来自列表的位置参数，由左开始。一且执行shift，
$1的初始值会永远消失，取而代之的是$2的旧值。$2的值，变成S3的旧值，以此类
推。S值则会逐次减1。shift也可使用一个可选的参数，也就是要位移的参数的计数。
单纯的shift等同于shift1。以下范例将这些操作串联在一起，并添加了注释：
S set -- hello *hf there" greetinge
设置新的位置参数
S echothere are S# total argumente
there are 3 total arguments
显示计数值
> doecho 1 18 $1
S for i in s*
猫环处理每一个参数
> done
www.TopSage.com
---
## Page 143
变量、判断、重复动作
131
i is hello
注意，内嵌的空白已消失
11s hl
i is there
1 is greetings
S for 1 in $0
在没有双引号的情况下，S*与S9是一样的
> do
> done
echo 1 18 $1
1is hello
i is hi
i is greetings
1 is there
Sfor i in *s**
加了双引号，S*表示一个字串
> do
echo 1 ls $1
1is hello hithere greetings
> done
S for i in *$e*
加了双引号，$9保留真正的参数值
> do
echo 1 ia 61
> done
1 is hello
i is hi there
1 is greetings
S ehlft
截去第一个参数
S echo there are now $# argumente
证明它已消失
there are now 2 argunents
S for i in *$e"
> do
echo 1 ie $1
> done
1 is greetings
 is hi there
6.1.2.3特殊变量
除了我们看过的特殊变量（例如S#及S*）之外，Shell还有很多额外的内置变量，有一
些也具有单一字符、非文字或数字字母的名称：其他则是余由大写字母组成的名称。
表6-3列出内置于Shell内的变量，以及影响其行为的变量。所有Bourme风格的Shell提
供的变量都比这里所列的多很多，它们会影确交互模式下的使用，也可以在处理Shell程
序时用于其他的用途。不过下面要说明的这些，是在写Shell程序时，可以完全俺赖实
现可移植性脚本编程的变量。
表6-3：POSIX内置的Shell变量
变量
意义
#
目前进程的参数个数。
传递给当前进程的命令行参数，置于双引号内，会展开为个别的参数。
当前进程的命令行参数，置于双引号内，则晨开为一单独参数。
-（连字号）
在引用时给予Shell的选项。
www.TopSage.com
---
## Page 144
132
第6章
表6-3：POSIX内置的Shell变量（续）
变量
意义
？
前一命令的退出状态。
$
Shell进程的进程编号（process ID）。
0(零)
Shell程序的名称。
1
最近一个后台命令的进程编号，以此方式存储进程编号，可通过wait命令
以供稍后使用。
AN3
一且引用，则仅用于交互式Shell中，$ENV的值是可晨开的参数。结果应
为要读取和在启动时要执行的一个文件的完整路径名称。这是一个XSI必
需的变量。
HOME
根（登录）目录。
IFS
内部的字段分隔器，例如，作为单调分隔器的字符列表。一般设为空格、制
表符（Tab），以及换行（newline）。
LANG
当前locale的默认名称；其他的LC_·变量会覆盖其值。
LC_ALL
当前locale的名称，会覆盖LANG与其他LC_*变量，
IC_COLLATE
用来排序字符的当前locale名称。
LC_CTYPE
在模式匹配期间，用来确定字符类别的当前locale的名称。
LC_XESSAGES
输出信息的当前语言的名称。
LINENO
刚执行过的行在脚本或函数内的行编号。
NLSPATH
在SIC_MESSAGES（XSI）所给定的信息语言里，信息目录的位置。
PATH
命令的查找路径。
PPID
父进程的进程编号。
PS1
主要的命令提示字符事，默认为·S"。
PS2
行继续的提示字符串。默认为·>“
PS4
以set-x设置的执行跟踪的提示字符申，默认为"+“。
PWD
当前工作目录。
特殊变量S$可在编写脚本时用来建立具有唯一性的文件名（多半是临时的），这是根据
Shell的进程编号建立文件名。不过，系统里还有一个mkteap命令也能做同样的事，这
些都会在第10章中探讨。
6.1.3
算术展开
Shell的算术运算符与C语言里的差不多，优先级与顺序也相同。表6-4列出支持的算术
运算符，优先级由最高排列至最低。虽有些是（或包含）特殊字符，不过它们不需以反
www.TopSage.com
---
## Page 145
变量、判断、重复动作
引号无须转义，见7.7节。
表6-4：算术运算数
++ -*
增加及减少，可前置也可放在结尾
由左至右
+-!*
一元（unary）的正号与负号：逻辑
由右至左
与位的（bitwise）取反
*/
乘法、除法，与余数
由左至右
+-
加法与减法
由左至右
>
向左位移、向右位移
由左至右
 >#
比较
由左至右
== 1=
相等与不等
由左至右
&
位的AND
由左至右
位的Exclusive OR
由左至右
位的OR
由左至右
&&
逻辑的AND（简捷方式）
由左至右
11
逻辑的OR（简捷方式）
由左至右
?：
条件表达式
由右至左
由右至左
可利用圆括号将子表达式语句块括起来。就像在C里一样：关系运算符（、>=、
与！=）产生数字结果中，1表示为真，0表示假。
例如：$（（3>2））的值为1；$（（（3>2）11（4<=1）1）也为1,因为这两个子
表达式里至少有一个为真。
对逻辑的AND与OR运算符面言，任何的非0值函数都为真：
S echo $((3 6s 4))
3与4都为“真”
1
非0值都为真的用法，可用于所有从C衍生而来的语言，例如C++、Java以及awk。
如果你对C、C++或Java已有所了解，那么应该也熟悉表6-4所列出的运算符。如果不
熟悉，这里我们就来进行一些简单的说明。
常规运算符的赋值形式，对于较为传统的更新变量方式而言，是一种方便的缩写。举例
www.TopSage.com