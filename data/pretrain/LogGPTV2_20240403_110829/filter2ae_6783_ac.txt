将敏感数据连着实例方法一起序列化，导致敏感数据泄漏。
**示例：**
假设`x和y`是敏感数据，序列化后面临`坐标泄漏危险`
    public class GPSLocation implements Serializable
    {
      private double x; // sensitive field
      private double y; // sensitive field
      private String id;// non-sensitive field
      // other content
    }
    public class Coordinates
    {
      public static void main(String[] args)
      {
        FileOutputStream fout = null;
        try{
          GPSLocation p = new GPSLocation(5, 2, "northeast");
          fout = new FileOutputStream("location.ser");
          ObjectOutputStream oout = new ObjectOutputStream(fout);
          oout.writeObject(p);
          oout.close();
        }
        catch (Throwable t){
            // Forward to handler
        }
        finally{
            if (fout != null){
            try{
              fout.close();
            }
            catch (IOException x){
              // handle error
            }
          }
         }
       }
    }
**审计：**
对于已经被确定为敏感的数据搜索示例一中相关的关键字。
或者查看进行序列化的类，是否含有敏感数据。
**修护：**
  1. 将敏感数据加上transient
    private transient double x; // transient field will not be serialized
    private transient double y; // transient field will not be serialized
  1. 将能序列化的加入`serialPersistentFields`，那么其余将不会被序列化
    public class GPSLocation implements Serializable
    {
      private double x;
      private double y;
      private String id;
      // sensitive fields x and y are not content in serialPersistentFields
      private static final ObjectStreamField[] serialPersistentFields = {new ObjectStreamField("id", String.class)};// other content
    }
## 静态内部类的序列化篇
**简单描述：**
没懂
**审计：**
人工查找 implements Serializable 的所有内部类
**修护：**
class \${InnerSer} {}  
去除内部类的序列化。  
static class ​\${InnerSer} implements Serializable
{}把内部类声明为静态从而被序列化。但是要注意遵循示例三中的敏感信息问题
## 路径安全篇
**简单描述：**
攻击者利用`../`可以上传至任意指定目录。
服务端使用`getAbsolutePath()`的话无法检测出攻击者真正上传的文件路径，因此即使做了过滤也将可被绕过。
**示例：**
当前目录E:\workspace\myTestPathPrj(windows系统)
    public static void testPath() throws Exception{
         File file = new File("..\\src\\ testPath.txt");
         System.out.println(file.getAbsolutePath());
         System.out.println(file.getCanonicalPath());
    }
`file.getAbsolutePath()`打印出`E:\workspace\myTestPathPrj\..\src\testpath.txt`
`file.getCanonicalPath()`打印出`E:\workspace\src\testPath.txt`
**审计：**
  * 查找`permission Java.io.FilePermission`字样和 `grant` 字样，看是否已经做出防御。
  * 查找`getAbsolutePath()`和`getPath()`，找到后看有没有用户输入的。
## ZIP文件提取篇
**简单描述：**
两个危害：一个是提取出的文件标准路径落在解压的目标目录之外，另一个是提取出的文件消耗过多的系统资源。
**示例：**
  1. 解压后的文件名未作过滤（直接`entry.getName()`）；
未对上传的压缩包大小作限制（`zis.read`后直接`dest.write`）
    static final int BUFFER = 512;
    // ...
    public final void unzip(String fileName) throws java.io.IOException
    {
      FileInputStream fis = new FileInputStream(fileName);
      ZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis)); 
      ZipEntry entry;
      while ((entry = zis.getNextEntry()) != null)
      {
        System.out.println("Extracting: " + entry);
        int count;
        byte data[] = new byte[BUFFER];
        // Write the files to the disk
        FileOutputStream fos = new FileOutputStream(entry.getName()); 
        BufferedOutputStream dest = new BufferedOutputStream(fos, BUFFER); 
        while ((count = zis.read(data, 0, BUFFER)) != -1)
        {
          dest.write(data, 0, count);
        }
        dest.flush();
        dest.close();
        zis.closeEntry();
      }
      zis.close();
    }
  1. 解压后的文件名未作过滤；
使用`getSize()函数不能准确判断压缩包大小`，攻击者可以修改压缩包的16进制编码进行绕过。恶意攻击者可以伪造 ZIP
文件中用来描述解压条目大小的字段，因此，getSize()方法的返回值是不可靠的。
    public static final int BUFFER = 512;
    public static final int TOOBIG = 0x6400000; // 100MB
    // ...
    public final void unzip(String filename) throws java.io.IOException
    {
      FileInputStream fis = new FileInputStream(filename);
      ZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis));
      ZipEntry entry;
      try{
        while ((entry = zis.getNextEntry()) != null)
        {
          System.out.println("Extracting: " + entry);
          int count;
          byte data[] = new byte[BUFFER];
          // Write the files to the disk, but only if the file is not insanely
          if (entry.getSize() > TOOBIG)
          {
            throw new IllegalStateException("File to be unzipped is huge.");
          }
          if (entry.getSize() == -1)
          {
            throw new IllegalStateException("File to be unzipped might be huge.");
          }
          FileOutputStream fos = new FileOutputStream(entry.getName());
          BufferedOutputStream dest = new BufferedOutputStream(fos,BUFFER);
          while ((count = zis.read(data, 0, BUFFER)) != -1)
          {
            dest.write(data, 0, count);
          }
          dest.flush();
          dest.close();
          zis.closeEntry();
        }
      }
      finally{
        zis.close();
      }
    }
**审计：**
搜索以下函数，看是否有使用到：
  * FileInputStream 
  * ZipInputStream
  * getSize()
  * ZipEntry
如果出现 getSize 基本上就需要特别注意了。
**修护：**
  1. 防止解压至任何目录，使用`getCanonicalPath()`，过滤。
    File f = new File(intendedDir, entryName);
    String canonicalPath = f.getCanonicalPath();
    File iD = new File(intendedDir);
    String canonicalID = iD.getCanonicalPath();
    if (canonicalPath.startsWith(canonicalID))
    {
        return canonicalPath;
    }
    else
    {
      ...
    }
  1. 防止过大
    BufferedOutputStream dest = new BufferedOutputStream(fos, BUFFER);
    while (total + BUFFER <= TOOBIG && (count = zis.read(data, 0, BUFFER)) != -1)
## 文件上传篇
JDK<1.7.40的版本存在空字节问题。
## 文件读取篇
**简单描述：**
可读取用户输入的文件路径并回显在响应中。
**审计：**
快速发现这类漏洞的方式其实也是非常简单的，在IDEA中的项目中重点搜下如下文件读取的类。
  1. **JDK原始的java.io.FileInputStream类**
  2. **JDK原始的java.io.RandomAccessFile类**
  3. **Apache Commons IO提供的org.apache.commons.io.FileUtils类**
  4. JDK1.7新增的基于NIO非阻塞异步读取文件的`java.nio.channels.AsynchronousFileChannel`类
  5. JDK1.7新增的基于NIO读取文件的`java.nio.file.Files`类
常用方法如:`Files.readAllBytes`、`Files.readAllLines`
如果仍没有什么发现可以搜索一下`FileUtil`，很有可能用户会封装文件操作的工具类。（[参考](https://github.com/anbai-inc/javaweb-codereview/blob/master/JavaSecureCodeReview.md))
## URL重定向篇
**简单描述：**
接口从host头或者参数中取值，直接跳转到用户自定义的url，导致url重定向。
**示例：**
访问不存在的资源，将host改成自定义url，页面302跳转，跳转地址为host头中的自定义url。
    @RequestMapping("/urltest")
    @ResponseBody
    public String urltest(HttpServletRequest request,HttpServletResponse response) throws ServletException,
            IOException {
        String site = request.getParameter("url");
        if(!site.isEmpty()){
            response.sendRedirect(site);
        }
        return response.toString();
    }
**审计：**
查找`sendRedirect`，跳转的url是否用户可控，如果可控是否有进行过滤判断。
特别是在删掉某个资源的斜杠，有可能就进行了302跳转，该处时常出现url重定向漏洞。
## Autobinding篇
**简单描述：**
将HTTP请求参数绑定到程序代码变量或对象中。逻辑型漏洞。
  1. @ModelAttribute注解
    * 运用在参数上，会将`客户端传递过来的参数`按名称`注入到指定对象`中，并且会将这个对象`自动加入ModelMap`中，便于View层使用
    * 运用在方法上，会在每一个@RequestMapping标注的方法前执行，如果有返回值，则自动将该返回值加入到ModelMap中
        @RequestMapping(value = "/home", method = RequestMethod.GET)
        public String home(@ModelAttribute User user, Model model) {
            if (showSecret){
                model.addAttribute("firstSecret", firstSecret);
            }
            return "home";
        }
前端jsp中可使用`${user.name}`访问对象user中的name成员。注意这时候这个User类一定要有没有参数的构造函数。
  2. @SessionAttributes注解
    * 将ModelMap 中的属性转存到 session 中
    * 只要不去调用SessionStatus的`setComplete()`方法，这个对象就会一直保留在 Session 中
**示例：**
在`/resetQuestion`接口，从客户端传入user的成员`answer=hhd`，因为代码`@ModelAttribute User
user`，answer将会注入到user对象，并自动加入ModelMap中。
在`/reset`接口，因为代码`@SessionAttributes("user")`，将user对象从ModelMap中读出并放入session中，因此user中的`answer=hhd`也加入了session中。那么只需要输入问题的答案为`hhd`则与session中的`hhd`匹配，因此可绕过。
    @Controller
    @SessionAttributes("user")
    public class ResetPasswordController {
    private UserService userService;
    ...
    @RequestMapping(value = "/reset", method = RequestMethod.POST)
    public String resetHandler(@RequestParam String username, Model model) {
            User user = userService.findByName(username);
            if (user == null) {
                return "reset";
            }
            model.addAttribute("user", user);
            return "redirect: resetQuestion";
        }
    @RequestMapping(value = "/resetQuestion", method = RequestMethod.GET)
        public String resetViewQuestionHandler(@ModelAttribute User user) {
            logger.info("Welcome resetQuestion ! " + user);
            return "resetQuestion";
        }
**修护：**
Spring
MVC中可以使用@InitBinder注解，通过WebDataBinder的方法setAllowedFields、setDisallowedFields设置允许或不允许绑定的参数。
## Webservice篇
`Web Service`是一种基于`SOAP协议`实现的跨语言Web服务调用。配置web.xml，配置`server-config.wsdd`文件注册`Web Service`服务类和方法。
访问`Web Service`的`FileService`服务加上`?wsdl`参数可以看到`FileService`提供的服务方法和具体的参数信息。
一般扫描目录时可扫出，后带?wsdl的是接口总的说明文档
此类漏洞可使用burpsuite的wsdl插件，直接进行解析生成不同接口的request，再发送到repeater
接口可能是查询，可能是添加等等操作
根据报错信息，可能存在注入点
  * sql注入
  * 信息泄漏
  * 通过信息泄漏引起的组件
## 第三方组件安全篇
比如struts2、不安全的编辑控件、fastjson等等。