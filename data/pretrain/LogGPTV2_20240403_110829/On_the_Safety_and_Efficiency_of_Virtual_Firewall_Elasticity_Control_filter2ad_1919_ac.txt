F is one of the following:
•
•
•
•
•
Independency iff P S(V ) ∩ P S(F ) = ∅. We denote
independency as V ind F .
Congruence iff P S(V ) = P S(F ). We denote congru-
ence as V con F .
Superspace iff P S(V ) ⊃ P S(F ). We denote super-
space as V sup F .
Subspace iff P S(V ) ⊂ P S(F ). We denote subspace
as V sub F .
Intersection iff P S(V ) ∩ P S(F ) ⊂ P S(V ) and
P S(V ) ∩ P S(F ) ⊂ P S(F ). We denote intersection
as V int F .
Deﬁnition 4 (Inter-dependency). A ﬁrewall rule group V and a
ﬂow rule group F are inter-dependent if P S(V )∩P S(F ) (cid:54)= ∅.
When V and F are inter-dependent, they are related by
one of Congruence, Superspace, Subspace and Intersection
relation.
B. Association and Class
We next introduce association relation between two ﬁrewall
rule groups, and the concept of ﬁrewall rule class. We will
show in §V that class-based migration serves to achieve less
update cost.
Deﬁnition 5 (Direct association). Two ﬁrewall rule groups Vi
and Vj in a ﬁrewall rule set V are directly associated iff there
5
Based on the association relations,
rule set
V = {V1, ..., V8} is further divided into four classes V =
{ ¯V1, ..., ¯V4}, where class ¯V1 = V1 ∪ V2, ¯V2 = V3 ∪ V4 ∪ V5,
¯V3 = V6 ∪ V7, ¯V4 = V8.
the ﬁrewall
VFW Controller uses Algorithm 2 to classify ﬁrewall
rule groups V = {V1, ..., Vm} into classes V = { ¯V1, ..., ¯V ¯m}.
Firewall rule groups inside a class are either directly or
indirectly associated. There is no association across classes.
The inputs of Algorithm 2 are V (the set of ﬁrewall groups to
be classiﬁed), F (the set of ﬂow rule groups of an SDN switch),
and C (a set to store ﬁrewall rule classes). The algorithm has 2
steps. First, it identiﬁes all the direct association relations. For
each ﬂow rule group F ∈ F, the algorithm ﬁnds the ﬁrewall
rule groups that are directly associated via F , unites these
ﬁrewall rule groups together to make a class, and adds this
class to C. Now each class in C contains ﬁrewall rule groups
that are directly associated. Take for example the ﬁrewall rule
set and ﬂow rule set in Figure 3, the ﬁrst step will generate
2 = V3 ∪ V4, ¯V (cid:48)
3 = V4 ∪ V5,
1 = V1 ∪ V2, ¯V (cid:48)
6 classes: ¯V (cid:48)
4 = V6 ∪ V7, ¯V (cid:48)
¯V (cid:48)
5 = V8, and ¯V (cid:48)
6 = V8. Second, the algorithm
unites the classes that intersect. This is to identify the indirect
1 and ¯V (cid:48)
associations. For example as ¯V (cid:48)
2 both have V4, they will
be united. In this way, the indirect association between V3 and
V5 are identiﬁed. Similarly ¯V (cid:48)
5 and ¯V (cid:48)
6 will be also united.
1 = V1 ∪ V2,
So the second step will generate 4 classes: ¯V (cid:48)
2 = V3 ∪ V4 ∪ V5, ¯V (cid:48)
4 = V6 ∪ V7, ¯V (cid:48)
¯V (cid:48)
5 = V8.
C. Semantic Consistency
Semantic consistency of ﬁrewall rules must be maintained
in virtual ﬁrewall scaling, otherwise safety violations may
occur. Two causes lead to semantic inconsistency (see §II for
examples). First, ﬁrewall rules that are dependent are split
across multiple virtual ﬁrewall instances. Second, the order
of ﬁrewall rules that are dependent is changed after migration.
Therefore, we propose the following group-based strategy to
maintain semantic consistency in VFW Controller:
Group-Based Migration Strategy: To guarantee semantic
consistency, ﬁrewall rules in a group are migrated to the
same destination virtual ﬁrewall instance and are in the same
order as they are in the source virtual ﬁrewall instance. The
destination virtual ﬁrewall instance can only start to process
trafﬁc matching rules in a group until all the rules and ﬂow
states associated with the group are ready on the destination
instance.
We have studied a number of real-world ﬁrewall policies
(see § VIII-B2) and found that rule dependencies are common
in ﬁrewalls policies. Hence, dependency analysis is necessary
in VFW Controller. We also found that it is a very rare
case in reality that a ﬁrewall policy only contains one big
group. Therefore, we ignore the discussion of such a special
case in this paper.
V. FLOW UPDATE ANALYSIS
In this section, we analyze how to update ﬂow rules in
SDN switches to provide the required trafﬁc steering support
for the migration of a ﬁrewall rule group. We identify a set of
necessary update operations and deﬁne update cost. Strategy
to reduce update cost is presented as well.
Fig. 3: Example of ﬁrewall rule associations and classes.
Algorithm 2: Classiﬁcation of ﬁrewall rule groups to
classes.
Input: V = {V1, ..., Vm}, a set of ﬁrewall rule groups; F = {F1, ..., Fn},
a set of ﬂow groups;
C = ∅, a set of ﬁrewall rule classes which is initially set
to be empty;
Output: C;
/* Identify direct associations.
foreach F ∈ F do
¯V = ∅; /* A set to store firewall rule groups that
are directed associated via F , initially set to
be empty;
*/
foreach V ∈ V do
if V and F are inter-dependent then
¯V .Append(V );/* Each firewall rule in V is
sequentially appended to ¯V .
if ¯V (cid:54)= ∅ then
C.Add( ¯V );/* ¯V is added to C as a class.
*/
*/
*/
*/
1
2
3
4
5
6
7
8
9
10
11
/* Identify indirect associations. Any two classes that
*/
foreach ¯Vi ∈ C and ¯Vj ∈ C do
intersect are united to make a bigger class.
if ¯Vj ∩ ¯Vj (cid:54)= ∅ then
¯Vi.Append( ¯Vj ); /* Each firewall rule in ¯Vj is
sequentially appended to ¯Vi.
C.Remove( ¯Vj );
12 return C;
exists a ﬂow rule group F in a ﬂow rule set F such that Vi and
F are inter-dependent, and Vj and F are inter-dependent. We
dir-asso Vj to denote Vi and Vj are directly
use the notation Vi
associated.
Deﬁnition 6 (Indirect association). Two ﬁrewall rule groups Vi
and Vj in a ﬁrewall rule set V are indirectly associated iff they
are not directly associated and there exists ¯V ⊆ V\{Vi, Vj},
such that Vi and ¯V are directly associated, and Vj and ¯V are
directly associated.
Deﬁnition 7 (Firewall Rule Class). A ﬁrewall rule class is the
union of ﬁrewall rule groups that are directly or indirectly
associated.
Figure 3 demonstrates association relation and ﬁrewall rule
class using an example where the ﬁrewall rule set is V =
{V1, ..., V8} and the ﬂow rule set is F = {F1, ..., F6}. In the
example,
•
•
dir-asso V5, V6
Direct association: V1
V4
Indirect association: V3
dir-asso V7
dir-asso V2, V3
dir-asso V4,
ind-asso V5
6
PS(F1)PS(V2)PS(V1)PS(F4)PS(V6)PS(V7)PS(F2)PS(V3)PS(F3)PS(V5)PS(V4)PS(F5)PS(F6)PS(V8)Fig. 4: SW in three different cases with respect to a classic 3-tire
cloud architecture.
A. Update Operations
Let Vi ∈ V be the ﬁrewall rule group to be migrated from
a source virtual ﬁrewall VFW1 to a destination virtual ﬁrewall
VFW2. The key SDN switch is the last SDN switch, through
which all the trafﬁc matching Vi will pass before diverging
on their paths to reach VFW1 and VFW2. In what follows,
we denote such key SDN switch as SW. Figure 4 shows SW
switches in different cases: (a) VFW1 and VFW2 are on the
same server; (b) VFW1 and VFW2 are in different servers on
the same rack; and (c) VFW1 and VFW2 are in different racks.
In case (a), the SW is an open vSwitch on the server. In case
(b), the SW is the Top-of-Rack (ToR) switch that connects the
two servers. In case (c), the SW is the Aggregation Switch that
connects the two racks. We consider case (a) will be the most
common, as it introduces the least trafﬁc overload and update
efforts. Only when two virtual ﬁrewalls cannot be placed on
the same sever due to resource inadequacy, they will be placed
on separate servers.
To update the SDN switches on the path from SW to
VFW1, the existing ﬂow rules that route the matching trafﬁc
to VFW1 will be deleted. To update the SDN switches on
the path from SW to VFW2, new ﬂow rules to route the
matching trafﬁc to VFW2 will be added. The updates on SW is,
however, less straightforward, hence we focus on the update of
SW in this paper. VFW Controller tracks SWs, leveraging
the capability provided by SDN where a central controller
maintains a panoramic view of the entire network.
Let F = {F1, ..., Fn} be the set of ﬂow groups (obtained
using the partition algorithm in §IV) on SW. To ﬁnd the updates
on F, VFW Controller iterates through F = {F1, ..., Fn}
sequentially, and compares the inter-dependency relation be-
tween Vi and each Fj ∈ F to determine the updates. We iden-
tify two types of update operations: CHANGE and INSERT.
•
•
•
ind Fj, no update is required.
con Fj or Vi
If Vi
sup Fj, only CHANGE operation is
If Vi
required. For every ﬂow rule f ∈ Fj, if its forwarding
actions contain ‘send to VFW1’, the forwarding action
is changed to ‘send to VFW2’. Note that the same ﬂow
rule may contain forwarding actions for the routing
intentions of other applications (see the example ﬂow
rule f3 in Figure 1). Flow update should not change
any of those actions.
If Vi
int Fj, both CHANGE and INSERT
operations are required. Comparisons between P S(v),
the packet space deﬁned by each v ∈ Vi, and P S(f ),
the packet space deﬁned by each f ∈ Fj, will be
performed in order to ﬁnd the correct update.
If P S(v) ∩ P S(f ) = ∅, f needs no update.
(1)
sub Fj or Vi
(2)
(3)
If P S(v) ⊇ P S(f ), then CHANGE operation
is performed to change the ‘send to VFW1’
action of f to ‘send to VFW2’.
If P S(v) ⊂ P S(f ), then INSERT operation
is performed. A new ﬂow rule f(cid:48) is inserted
right before f to express that trafﬁc matching
v is sent to VFW2. Take the v and f below
for example.
tcp
10.10.2.*
*
10.10.2.*
*
*
192.1.1.9
192.1.1.*
80
80
deny
send to VFW1
and IDS1
Then f(cid:48) below is inserted right before f.
tcp
10.10.2.*
*
192.1.1.9
80
send to VFW2
and IDS1
(4)
If P S(v) ∩ P S(f ) ⊂ P S(v) and P S(v) ∩
P S(f ) ⊂ P S(f ), INSERT operation is per-
formed. A new ﬂow rule f(cid:48) is inserted right
before f. Each ﬁeld of f(cid:48) is the same as f,
except that the protocol, source IP, source port,
destination IP, destination port ﬁelds of f(cid:48) are
the intersection of the respective ﬁelds of v and
f, and the forwarding action of f(cid:48) is ‘send