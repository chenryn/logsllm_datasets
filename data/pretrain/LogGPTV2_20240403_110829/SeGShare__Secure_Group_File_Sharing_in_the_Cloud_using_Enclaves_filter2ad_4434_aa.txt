title:SeGShare: Secure Group File Sharing in the Cloud using Enclaves
author:Benny Fuhry and
Lina Hirschoff and
Samuel Koesnadi and
Florian Kerschbaum
2020 50th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
SeGShare: Secure Group File Sharing in the Cloud
using Enclaves
Benny Fuhry
SAP Security Research
Karlsruhe, Germany
Lina Hirschoff
SAP Security Research
Karlsruhe, Germany
Samuel Koesnadi
SAP Security Research
Karlsruhe, Germany
Florian Kerschbaum
University of Waterloo
Waterloo, Canada
Abstract—File sharing applications using cloud storage are in-
creasingly popular for personal and business use. Due to data pro-
tection concerns, end-to-end encryption is often a desired feature
of these applications. Many attempts at designing cryptographic
solutions fail to be adopted due to missing relevant features. We
present SeGShare, a new architecture for end-to-end encrypted,
group-based ﬁle sharing using trusted execution environments
(TEE), e.g., Intel SGX. SeGShare is the ﬁrst solution to protect
the conﬁdentiality and integrity of all data and management
ﬁles; enforce immediate permission and membership revocations;
support deduplication; and mitigate rollback attacks. Next to
authentication, authorization and ﬁle system management, our
implementation features an optimized TLS layer that enables
high throughput and low latency. The encryption overhead of our
implementation is extremely small in computation and storage
resources. Our enclave code comprises less than 8500 lines of code
enabling efﬁcient mitigation of common pitfalls in deploying code
to TEEs.
I. INTRODUCTION
In many applications, users want to share ﬁles with a group
of other users. For instance, employees of a company want
to share ﬁles with colleagues. One option is to distribute
the ﬁles to each group member individually. A better option
is a local or remote central repository to store the ﬁles
and manage access control. A convenient remote repository
is a cloud-based ﬁle sharing service as it can reduce cost,
increase availability and enable seamless multi-device access
to ﬁles. Many commercial vendors provide such a service, e.g.,
Google Drive [1], Dropbox [2], or WeTransfer [3]. However,
data at cloud services could be accessed by unauthorized
parties or exposed by internal attackers [4]–[6]. Frequently,
company policies prohibit to upload ﬁles to an untrusted cloud
provider [7].
Some cloud providers, e.g., MEGA [8] or Sync.com [9],
encrypt ﬁles client-side using ﬁle keys and store these keys
protected with the user’s password. They also enable group
ﬁle sharing by encrypting ﬁle keys with a group key, which is
encrypted with the public key of each group member. How-
ever, this does not scale well for large groups as an additional
key is required for each group member. Furthermore, ﬁles have
to be re-encrypted on permission or membership revocations.
MEGA and Sync.com use so-called Hybrid Encryption
(HE) [10] with public-key management
to enforce access
control. Besides HE, many cryptographic schemes have been
proposed [11]–[18] to improve access control policies regard-
ing, e.g., key distribution, the number of keys, and expressive-
ness. Based on these schemes, cryptographically protected ﬁle
sharing systems were proposed [10], [16], [19]–[22]. The main
drawback of such systems is that users gain plaintext access
to the ﬁle key. To achieve immediate permission revocation,
it is necessary to re-encrypt the corresponding ﬁle with a new
key. Depending on the scheme, this involves expensive cryp-
tographic operations and the new key has to be distributed to
many users. The problem is more severe on immediate group
membership revocation, as many ﬁles require re-encryption.
This becomes a critical problem if members are removed and
added frequently [23].
In recent years, researchers propose solutions that use a
trusted execution environment (TEE) for secure ﬁle sharing
systems [24]–[27]. TEEs provide an isolated environment
— an enclave — to protect code and data in an untrusted
environment. A TEE called Intel SGX [28]–[33] is integrated
into (most) modern Intel CPUs and used by all of these
approaches. A-SKY [24] and IBBE-SGX [25] are based on
cryptographic access control schemes and also suffer from
user’s access to plaintext ﬁle keys. Nexus [26] proposes a
client-side enclave, which is a severe drawback due to the
heterogeneity of end-user devices.
We propose and implement SeGShare, a solution supporting
group ﬁle sharing in large and dynamic groups. SeGShare
is TEE-based without using a cryptographic access control
scheme. Via tokens, users authenticate themselves to the
enclave and establish a secure channel with it, which is used
for all subsequent communication. On every user access, the
enclave checks encrypted access control policies to enforce
read and/or write access on ﬁles. Immediate permission or
membership revocations only require an inexpensive modiﬁ-
cation of an encrypted ﬁle. Users can upload arbitrarily large
ﬁles through the secure channel directly into the enclave. If the
upload is granted, the enclave encrypts the ﬁles with a random
key using probabilistic authenticated encryption and stores the
ﬁles in the untrusted environment. On each granted ﬁle request,
the ﬁle is decrypted inside the enclave and sent to the user
over the secure channel. SeGShare separates authentication
and authorization using identity information in the tokens.
As long as the identity information is preserved, no further
change is necessary if a user’s token is replaced or if a user
has different tokens for multiple devices. A comprehensive
list of SeGShare’s features not mentioned so far is presented
in Table II. Among others, it protects the conﬁdentiality and
978-1-7281-5809-9/20/$31.00 ©2020 IEEE
DOI 10.1109/DSN48063.2020.00061
476
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:33:52 UTC from IEEE Xplore.  Restrictions apply. 
integrity of all data and administration ﬁles; supports data
deduplication; and mitigates rollback attacks.
This combination of features is not met by any related
work (see Table III) and we agree with the authors of A-
SKY [24], who state that “given the memory and computa-
tional limitations of SGX enclaves (e.g., trusted computing
base (TCB) size, trusted/untrusted transition latency), it is far
from trivial to develop such a proxy service able to scale and
sustain a high data throughput, considering dynamic access
control operations.” The key to achieve a high throughput
under dynamic groups is that SeGShare does not require com-
plex cryptographic operations on permission or membership
changes. Besides that, we build an efﬁcient SGX-enabled TLS
stack, use switchless enclave calls for all network and ﬁle
trafﬁc, and the enclave requires only a small, constant size
buffer for each request.
The main contributions of SeGShare are:
• New architecture for efﬁcient, end-to-end encrypted
group ﬁle sharing supporting large and dynamic groups
using a server-side TEE, e.g., Intel SGX.
• First ﬁle sharing system combining conﬁdentiality and
integrity of all data and administration ﬁles; immediate
revocations without expensive re-encryptions; data dedu-
plication; rollback protection; and separation of authenti-
cation and authorization.
• Latency average of 2.39 s and 2.17 s to upload and
download a 200 MB ﬁle — faster than a plaintext storing
Apache WebDAV server in the same setup. Latency
under 170 ms for membership and permission operations,
independent of ﬁle sizes, stored ﬁles in total, number of
group members, number of user permissions, and groups
sharing a ﬁle.
• Storage overhead of only 1,06% for encrypted storage
of a ﬁle shared with more than 1000 groups containing
200 MB plaintext data.
• SGX-enabled, optimized TLS implementation.
• Enclave with only 8441 lines of code, reducing the
potential for security-relevant implementation errors, un-
intended leakages, hidden malware, and side-channel
leakages.
II. BACKGROUND
First, SeGShare uses a TEE, more speciﬁcally Intel SGX,
to provide an end-to-end secure ﬁle sharing system. Second,
the stored ﬁles are encrypted with probabilistic authenticated
encryption. Third, we use a speciﬁc ﬁle system model. In this
section, we review these three concepts.
A. Intel Software Guard Extensions (SGX)
Intel SGX is an instruction set extension that is available
in Intel Core processors since the Skylake generation and
Intel Xeon processors since the Kaby Lake generation making
it a widely available TEE. It provides a secure,
isolated
processing area, an enclave, which guarantees conﬁdentiality
and integrity protection to code and data, even in an untrusted
environment [28]–[33].
Memory Isolation. In the current version, SGX dedicates
128 MB of the system’s main memory (RAM) for the so-called
Processor Reserved Memory (PRM). All code and data in the
PRM are encrypted while residing outside of the CPU and
decrypted and integrity checked when the data is loaded into
the CPU. All other software on the system, including privi-
leged software such as OS, hypervisor, and ﬁrmware, cannot
access the PRM. The OS can swap out enclave pages and SGX
ensures integrity, conﬁdentiality and freshness of swapped-out
pages, but paging comes with a major performance overhead.
Every program using SGX consists of an enclave and an
untrusted part, and the host process can invoke the enclave
only through a well-deﬁned interface.
Attestation. SGX has a remote attestation feature, which
allows veriﬁcation of code integrity and authenticity on a
remote system. This veriﬁcation is done by hashing (called
measuring in SGX terminology) the initial code and data
loaded into the enclave. The authenticity of the measurement
as well as the fact that the measurement originates from a
benign enclave is ensured by SGX’s attestation feature (refer
to [28] for details). The measurement can be provided to an
external party to prove the correct creation of an enclave.
Furthermore, the remote attestation feature allows to establish
a secure channel between an external party and an enclave.
This secure channel can be used to deploy sensitive data, e.g.,
cryptographic keys, directly into the enclave.
Data Sealing. Inherently, SGX enclaves are stateless, i.e.,
all of its contents are lost when the enclave is destroyed. To
preserve data for multiple enclave runs, SGX offers data seal-
ing. This process uses a sealing key to encrypt and integrity-
protect data. Afterwards, the data can be stored outside of the
enclave in untrusted memory, and only an enclave with the
same sealing key can unseal the data.
Protected File System Library. This library is shipped with
the Intel SGX SDK and provides a subset of the regular C
ﬁle API, e.g., ﬁle creation, ﬁle writing, and ﬁle reading. On
write, data is separated into 4 kB chunks, the data’s integrity
is ensured with a Merkle hash tree variant, and each chunk
is encrypted with AES-GCM before it is stored in untrusted
memory. When ﬁle chunks are loaded back into the enclave,
the conﬁdentiality and integrity is veriﬁed. The encryption key
can be provided manually, or it can be derived automatically
from the sealing key. At any point, only one ﬁle handle can
be open for writing, but many handles for reading.
Switchless Calls. A primary performance overhead of SGX
applications are switches into and out of an enclave, because
state has to be saved and restored. SGX’s SDK supports
switchless calls, a technique to reduce this overhead. Calls into
the enclave are replaced by writing tasks into an untrusted
buffer and enclave worker threads asynchronously perform
the task. Calls out of the enclave are written into a separate
untrusted buffer and untrusted threads perform the tasks.
B. Probabilistic Authenticated Encryption (PAE)
PAE provides conﬁdentiality, integrity, and authenticity of
encrypted data. PAE Enc takes a secret key SK, a random
477
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:33:52 UTC from IEEE Xplore.  Restrictions apply. 
initialization vector IV and a plaintext value v as input
and returns a ciphertext c. PAE Dec takes SK and c as
input and returns v iff v was encrypted with PAE Enc under
the initialization vector IV and the secret key SK. With a
random initialization vector per encryption, AES-128 in GCM
mode [34] can be used as a PAE implementation.
C. File System
We use a generic ﬁle system model that ﬁts to various
operating system (cf. [35]). A ﬁle system (F S) is composed of
ﬁles (FC) and directories (FD). We also denote the former as
content ﬁles and the latter as directory ﬁles as both are stored
in ﬁles. Each fC ∈ FC contains a linear array of bytes that
can be read and written. Each fD ∈ FD is a collection of ﬁles
and/or further directories, and it stores a list of all its children.
The directories form a tree with a root directory ﬁle (fDr) at
the root of the tree. The parent directory of each f ∈ F S is
speciﬁed by its parent in the tree.
Each fD has a directory name. The directory name of fDr
is deﬁned as “/”, and all other directory names are ﬂexible
excluding the character “/”. Each fD has a path that
is
speciﬁed by its location in the directory tree hierarchy: the
path is the concatenation of all directory names in the tree
from fDr to fD delimited and concluded by “/”. Each fC has
a ﬁlename, and fC’s path is the concatenation of the path of
its parent directory and its ﬁlename.
no further change is necessary if a user’s authentication token
is replaced or if a user has different authentication tokens for
multiple devices.
Table I presents an overview of our access control model.
A user u ∈ U is assigned to one group g ∈ G or multiple
groups. Additionally, each user u is part of its default group
gu, i.e., a group that only contains u. Each g has a group owner
(GO), which initially is the user u adding the ﬁrst member to
g. GOs can change group memberships (rG) and extend the
group ownership (rGO) to other groups. Every f ∈ F S has at
least one ﬁle owner (FO), which initially is the user uploading
a ﬁle or creating a directory. For any ﬁle f and group g, the FO
can extend the ﬁle ownership (rF O) and set ﬁle permissions
(rP ). The permissions can either be a combination of read
(pr) and write (pw), or access can be denied (pdeny). As a
result, a user’s permissions depend on the permissions of all
groups he is member of. The main beneﬁt of group-based
permission deﬁnitions is that a membership update is sufﬁcient
to provide or revoke a user’s access to many ﬁles instead of
changing the permissions of all affected ﬁles individually. FOs
can deﬁne that a ﬁle f ∈ F S should inherit permissions from
its parent (rI). This enables, for example, central permissions
management of multiple ﬁles: create a directory, set the desired
permissions for the directory, add ﬁles to the directory, and
deﬁne that the ﬁles should inherit permissions.