**作者：御守实验室  
原文链接：  
相关阅读：[《从 mimikatz 学习 Windows 安全之访问控制模型（一)》](https://paper.seebug.org/1669/ "《从
mimikatz 学习 Windows 安全之访问控制模型（一\)》")**
## 0x00 前言
上次的文章分析了mimikatz的token模块，并简单介绍了windows访问控制模型的概念。在本篇文章中，主要介绍sid相关的概念，并介绍mimikatz的sid模块，着重分析sid::patch功能的原理
## 0x01 SID简介
### 1\. **安全标识符(SID)**
在Windows操作系统中，系统使用安全标识符来唯一标识系统中执行各种动作的实体，每个用户有SID，计算机、用户组和服务同样也有SID，并且这些SID互不相同，这样才能保证所标识实体的唯一性
SID一般由以下组成：
  * **“S”** 表示SID，SID始终以S开头
  * **“1”** 表示版本，该值始终为1
  * **“5”** 表示Windows安全权威机构
  * **“21-1463437245-1224812800-863842198”** 是子机构值，通常用来表示并区分域
  * **“1128”** 为相对标识符(RID)，如域管理员组的RID为512
Windows也定义了一些内置的本地SID和域SID来表示一些常见的组或身份
### 2\. **AD域中的SID**
在AD域中，SID同样用来唯一标识一个对象，在LDAP中对应的属性名称为`objectSid`：
重点需要了解的是LDAP上的`sIDHistory`属性
#### **(1) SIDHistory**
SIDHistory是一个为支持域迁移方案而设置的属性，当一个对象从一个域迁移到另一个域时，会在新域创建一个新的SID作为该对象的`objectSid`，在之前域中的SID会添加到该对象的`sIDHistory`属性中，此时该对象将保留在原来域的SID对应的访问权限
比如此时域A有一个用户User1，其LDAP上的属性如下：
此时我们将用户User1从域A迁移到域B，那么他的LDAP属性将变为：
值得注意的是，该属性不仅在两个域之间起作用，它同样也可以用于单个域中，比如实战中我们将一个用户A的`sIDHistory`属性设置为域管的`objectSid`，那么该用户就具有域管的权限此时当User1访问域A中的资源时，系统会将目标资源的DACL与User1的`sIDHistory`进行匹配，也就是说User1仍具有原SID在域A的访问权限
另一个实战中常用的利用，是在金票中添加Enterprise
Admins组的SID作为`sIDHistory`，从而实现同一域林下的跨域操作，这个将在后面关于金票的文章中阐述
#### **(2) SID Filtering**
SID Filtering简单的说就是跨林访问时目标域返回给你的服务票据中，会过滤掉非目标林中的SID，即使你添加了`sIDHistory`属性。SID
Filtering林信任中默认开启，在单林中默认关闭
具体可以参考微软的文档和@dirkjanm的文章：
__
__
## 0x02 mimikatz的sid模块
### **1\. sid::lookup**
该功能实现SID与对象名之间的相互转换，有三个参数：
  * **/name** ：指定对象名，将其转换为SID
  * **/sid** ：指定SID，将其转换为对象名
  * **/system** ：指定查询的目标计算机
其原理是调用`LookupAccountName()`和`LookupAccountSid()`来实现对象名和SID之间的相互转化，这类API底层是调用MS-LSAT协议(RPC)，比如将对象名转换为SID，底层调用的是`LsarLookupNames4()`
### **2\. sid::query**
该功能支持通过SID或对象名来查询对象的信息，同样有三个参数，使用时指定 **/sam** 或 **/sid** ， **/system** 可选
  * **/sam** ：指定要查询对象的`sAMAccountName`
  * **/sid** ：指定要查询对象的`objectSid`
  * **/system** ：指定查询的目标域控（LDAP）
这个功能其原理就是直接使用LDAP查询，通过`sAMAccountName`查询对应的`objectSid`，或者通过`objectSid`查询对应的`sAMAccountName`
其核心是调用Windows一系列的LDAP操作API，主要是`ldap_search_s()`：
### **3\. sid::modify**
该功能用于修改一个域对象的SID，可以使用的参数有三个：
  * **/sam** ：通过`sAMAccountName`指定要修改SID的对象
  * **/sid** ：通过`objectSid`指定要修改SID的对象
  * **/new** ：要修改对象的新SID 使用该功能是需要先使用sid::patch功能对限制LDAP修改的函数进行patch（自然也需要先开启debug特权），需要在域控上执行
修改时的操作就很简单了，调用LDAP操作的API对域对象的`objectSid`进行修改，主要使用的是`ldap_modify_s()`：
### **4\. sid::add**
该功能用来向一个域对象添加`sIDHistoy`属性，有两个参数：
  * **/sam** ：通过`sAMAccountName`指定要修改的对象
  * **/sid** ：通过`objectSid`指定要修改的对象
  * **/new** ：要修改`sIDHistory`为哪个对象的SID，该参数可指定目标的`sAMAccountName`或`objectSid`，当指定名称时会先调用`LookupAccountSid`将其转换为SID
使用该功能也要先执行sid::patch，修改时同样是操作LDAP通过`ldap_modify_s()`修改，不再赘述
### **5\. sid::clear**
该功能用来清空一个对象的`sIDHistory`属性
  * **/sam** ：要清空`sIDHistory`的对象的`sAMAccountName`
  * **/sid** ：要清空`sIDHistory`的对象的`objectSid`
原理就是使用`ldap_modify_s()`将目标对象`sIDHistory`属性修改为空
### **6\. sid::patch**
对域控LDAP修改过程中的验证函数进行patch，需要在域控上执行，该功能没有参数
patch共分为两个步骤，如果仅第一步patch成功的话，那么可以使用sid::add功能，两步都patch成功的话才可以使用sid::modify功能
## 0x03 sid::patch分析
sid::patch在系统版本 _
  * __
* * *