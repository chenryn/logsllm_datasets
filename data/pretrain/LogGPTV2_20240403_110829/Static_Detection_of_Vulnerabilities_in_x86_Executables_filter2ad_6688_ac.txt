# Test Results and Evaluation

## Table 1. Test Results
| Binary Size (KB) | Basic Blocks (Before Slicing) | Basic Blocks (After Slicing) | Detection Time (s) | Coverage (%) |
|-----------------|------------------------------|-----------------------------|--------------------|--------------|
| 3499            | 20                           | 36                          | 158                | 1            |
| 62              | 1                            | 0.01                        | -                  | 62%          |
| 37.4%           | 100%                         | 100%                        | 93%                | -            |

## 1. Introduction to Slicing Technique
To obtain highly precise program slices, our approach often prunes execution paths that are not relevant to the analysis. However, this technique has several limitations. A fundamental requirement is the availability of a complete interprocedural Control Flow Graph (CFG) for the program. Indirect jumps or calls can make it difficult to meet this requirement. While it is generally impossible to statically resolve all indirect control transfers, we have implemented heuristics to handle the most common cases (see Section 3.1 for more details). If some indirect jumps or calls remain unresolved, no slicing is performed, and the entire program is analyzed.

## 2. Evaluation
We conducted a series of experiments with our prototype tool to evaluate its ability to detect taint-style vulnerabilities. The test dataset included two applications with known taint-style vulnerabilities (Dropbear scp [6] and GNU a2ps [11]) and a set of utilities that use the `system()` and `popen()` functions. All experiments were run on a Fedora Core 4 system equipped with a 3.60 GHz Pentium 4 processor and 2GB RAM. Executables were compiled using gcc 4.0.0 with standard configuration and optimization level O2.

### Experimental Results
The results are summarized in Table 1. The table reports the size of the binaries in KB and the number of basic blocks identified by our tool before and after performing simple slicing. The detection time indicates the time required to identify all code points where tainted data is used in `system()` or `popen()` functions. The coverage column reports the percentage of basic blocks visited at least once during the first 30 minutes of execution. The detection performance results are reported in Table 2.

## 3. Analysis Results
Our tool successfully identifies all uses of tainted data in sensitive operations, resulting in a false negative rate of 0%. However, it generates one false positive in `scp`, `ppmcolors`, and `irexec`. False positives occur for different reasons:
- **Intended Use**: Our tool raises an alarm when user-provided input is, by design, allowed to reach the `system()` or `popen()` functions. Such alarms can be useful to draw the attention of an analyst or systems administrator to binaries whose security could be compromised if their intended use changes (e.g., if they were made accessible to remote, untrusted users). This is the case for the false positives generated in `scp` and `irexec`.
- **Type Inference**: Our tool does not include any form of type inference analysis and, consequently, generates an alert even when the type of the input prevents a successful attack. For example, in `ppmcolors`, user input is first converted to an integer and then used to compose the command string passed to `system()`. In this case, an attacker would not be able to inject a malicious command into the application. Our tool correctly identifies `autrace` as containing no vulnerabilities because the `system()` function used in this application does not utilize any user-provided input.

### Symbolic Execution
The symbolic execution technique underlying our analysis reconstructs all feasible execution paths in a program. However, the number of distinct paths increases roughly exponentially with the number of instructions, making exhaustive analysis impractical for non-trivial cases. Therefore, we set a timeout of thirty minutes for our experiments and report only vulnerabilities detected within this interval.

## 4. Path Exploration Strategies
In the current prototype of our tool, we have implemented several strategies to explore execution paths, achieving good path coverage and low memory requirements:
- **Depth-First Search (DFS)**: This strategy, which involves always resuming the last unexplored branch, is optimal in terms of memory usage but can spend significant time exploring uninteresting paths.
- **Random Selection**: Randomly selecting unexplored branches has a higher impact on memory but covers the search space evenly.
- **Hybrid Strategy**: We used a third strategy that combines DFS and breadth-first search. Execution proceeds in a depth-first fashion for a given interval of time. When the time interval elapses, execution resumes from the branch corresponding to the least executed basic block and continues in depth-first mode.

## 5. Conclusions
We have presented a novel adaptation of binary analysis techniques to statically detect vulnerabilities in x86 executables. We described several techniques and heuristics used to perform this analysis in practical cases. Our proof-of-concept tool was evaluated on a number of real-world programs, and the results show that the approach is practical and achieves good detection performance.

### Future Work
In the future, we plan to extend our approach in several directions:
- **Advanced Analysis**: Include more sophisticated analysis to better model memory accesses and the abstraction of loops.
- **Complementary Techniques**: Explore the idea of complementing static analysis with dynamic analysis to detect vulnerabilities in executables.

## 6. Acknowledgments
We would like to thank Christopher Kruegel and William Robertson for providing us with the symbolic execution engine and useful suggestions throughout this project. This research was supported by the Army Research Office under agreement DAAD19-01-1-0484 and by the National Science Foundation under grants CNS-0209065, CCR-0238492, and CCR-0524853.

## References
[1] R. Bagnara, E. Ricci, E. Zaffanella, and P. M. Hill. Possibly Not Closed Convex Polyhedra and the Parma Polyhedra Library. In Proc. of the 9th Intl. Static Analysis Symp., pages 213â€“229, 2002.
...
[36] Y. Xie and A. Aiken. Static Detection of Security Vulnerabilities in Scripting Languages. In Proc. of the 15th USENIX Security Symp., 2006.