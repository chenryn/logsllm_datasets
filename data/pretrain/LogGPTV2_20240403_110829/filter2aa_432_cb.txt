你能用-o 编译选项来为将产生的可执行文件指定一个文件名来代替 a.out。例如，将一
个叫 count.c 的 C 程序编译为名叫 count 的可执行文件，你将输入下面的命令：
gcc -o count count.c
GCC 同样有指定编译器处理多少的编译选项。-c 选项告诉 GCC 仅把源代码编译为目
标代码而跳过汇编和连接的步骤。这个选项使用的非常频繁因为它使得编译多个 C 程序时
速度更快并且更易于管理。缺省时 GCC 建立的目标代码文件有一个.o 的扩展名。
S 编译选项告诉 GCC 在为 C 代码产生了汇编语言文件后停止编译。GCC 产生的汇编
语言文件的缺省扩展名是.s。-E 选项指示编译器仅对输入文件进行预处理。当这个选项被
使用时，预处理器的输出被送到标准输出而不是储存在文件里。
C.3.3  优化选项
当你用 GCC 编译 C 代码时，它会试着用最少的时间完成编译并且使编译后的代码易
于调试，易于调试意味着编译后的代码与源代码有同样的执行次序，编译后的代码没有经
过优化。有很多选项可用于告诉 GCC 在耗费更多编译时间和牺牲易调试性的基础上产生更
小更快的可执行文件。这些选项中最典型的是-O 和 -O2 选项。
O 选项告诉 GCC 对源代码进行基本优化。这些优化在大多数情况下都会使程序执行的
更快。-O2 选项告诉 GCC 产生尽可能小和尽可能快的代码。-O2 选项将使编译的速度比使
用 -O 时慢。但通常产生的代码执行速度会更快。
除了 -O 和 -O2 优化选项外，还有一些低级选项用于产生更快的代码。这些选项非常
的特殊，而且最好只有当你完全理解这些选项将会对编译后的代码产生什么样的效果时再
去使用。这些选项的详细描述，请参考 GCC 的指南页，在命令行上键入 man gcc。
C.3.4  调试和剖析选项
GCC 支持数种调试和剖析选项。在这些选项里你会最常用到的是 -g 和 -pg 选项。
g 选项告诉 GCC 产生能被 GNU 调试器使用的调试信息以便调试你的程序。GCC 提供
了一个很多其他 C 编译器里没有的特性，在 GCC 里你能使 -g 和 -O (产生优化代码)联用。
- 326 -
Linux网络编程
这一点非常有用因为你能在与最终产品尽可能相近的情况下调试你的代码。在你同时使用
这两个选项时你必须清楚你所写的某些代码已经在优化时被 GCC 作了改动。关于调试 C
程序的更多信息请看下一节“ 用 gdb 调试 C 程序”。-pg 选项告诉 GCC 在你的程序里加入
额外的代码，执行时，产生 gprof 用的剖析信息以显示你的程序的耗时情况。关于 gprof 的
更多信息请参考 “ gprof”  一节。
C.3.5  用 gdb 调试 GCC 程序
Linux 包含了一个叫 gdb 的 GNU 调试程序。gdb 是一个用来调试 C 和 C++ 程序的强
力调试器。它使你能在程序运行时观察程序的内部结构和内存的使用情况。以下是 gdb 所
提供的一些功能：
它使你能监视你程序中变量的值。
它使你能设置断点以使程序在指定的代码行上停止执行。
它使你能一行行的执行你的代码。
在命令行上键入 gdb 并按回车键就可以运行 gdb 了，如果一切正常的话，gdb 将被启
动并且你将在屏幕上看到类似的内容：
GDB is free software and you are welcome to distribute copies of it under certain conditions; type
“show copying” to see the conditions.  There is absolutely no warranty for GDB; type “show
warranty” for details.
GDB 4.14 (i486-slakware-linux), Copyright 1995 Free Software Foundation, Inc.
(gdb)
当你启动 gdb 后，你能在命令行上指定很多的选项。你也可以以下面的方式来运行 gdb :
gdb 
当你用这种方式运行 gdb，你能直接指定想要调试的程序。这将告诉 gdb 装入名为 fname
的可执行文件。你也可以用 gdb 去检查一个因程序异常终止而产生的 core 文件，或者与一
个正在运行的程序相连。你可以参考 gdb 指南页或在命令行上键入 gdb – h 得到一个有关这
些选项的说明的简单列表。
1．为调试编译代码（Compiling Code for Debugging）
为了使 gdb 正常工作，你必须使你的程序在编译时包含调试信息。调试信息包含你程
序里的每个变量的类型和在可执行文件里的地址映射以及源代码的行号。gdb 利用这些信
息使源代码和机器码相关联。
在编译时用 –g 选项打开调试选项。
2．gdb 基本命令
gdb 支持很多的命令使你能实现不同的功能。这些命令从简单的文件装入到允许你检
查所调用的堆栈内容的复杂命令，表 C-1 列出了你在用 gdb 调试时会用到的一些命令。想
了解 gdb 的详细使用请参考 gdb 的指南页。
表 C-1  gdb 的常用命令
命   令
描  述
File
 装入想要调试的可执行文件。
Kill
 终止正在调试的程序。
List
 列出产生执行文件的源代码的一部分。
Next
 执行一行源代码但不进入函数内部。
Step
 执行一行源代码而且进入函数内部。
Run
 执行当前被调试的程序
Quit
 终止 gdb
附录 C  Linux下 c 语言使用与调试简介
- 327 -
Watch
 使你能监视一个变量的值而不管它何时被改变。
Break
 在代码里设置断点，这将使程序执行到这里时被挂起。
Make
 使你能不退出 gdb 就可以重新产生可执行文件。
Shell
 使你能不离开 gdb 就执行 UNIX shell 命令。
gdb 支持很多与 UNIX shell 程序一样的命令编辑特征。你能象在 bash 或 tcsh 里那样按
Tab 键让 gdb 帮你补齐一个唯一的命令，如果不唯一的话 gdb 会列出所有匹配的命令。你
也能用光标键上下翻动历史命令。
3．gdb 应用举例
本节用一个实例教你一步步的用 gdb 调试程序。被调试的程序相当的简单，但它展示
了 gdb 的典型应用。
下面列出了将被调试的程序。这个程序被称为 greeting，它显示一个简单的问候，再用
反序将它列出。
#include  
main ()
{
char my_string[] = “hello there”;
my_print (my_string);
my_print2 (my_string);
}
void my_print (char *string)
{
printf (“The string is %s\n”, string);
}
void my_print2 (char *string)
{
char *string2;
int size, i;
size = strlen (string);
string2 = (char *) malloc (size + 1);
for (i = 0; i 
2
3
main ()
4
{
5
char my_string[] = “hello there”;
6
7
my_print (my_string);
8
my_print2 (my_string);
9
}
10
如果按下回车，gdb 将再执行一次 list 命令，给出下列输出：
11
my_print (char *string)
12
{
13
printf (“The string is %s\n”, string);
14
}
15
16
my_print2 (char *string)
17
{
18
char *string2;
19
int size, i;
附录 C  Linux下 c 语言使用与调试简介
- 329 -
20
再按一次回车将列出 greeting 程序的剩余部分：
21
size = strlen (string);
22
string2 = (char *) malloc (size + 1);
23
for (i = 0; i 
main ()
{
char my_string[] = “hello there”;
my_print (my_string);
my_print2 (my_string);
}