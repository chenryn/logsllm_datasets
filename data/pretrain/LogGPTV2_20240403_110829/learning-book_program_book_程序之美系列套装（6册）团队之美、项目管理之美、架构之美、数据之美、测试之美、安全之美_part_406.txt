以下是优化后的文本，以提高其清晰度、连贯性和专业性：

---

### 参考文献

1. **OpenPGP**  
   - [RFC 3156](http://www.ietf.org/rfc/rfc3156.txt)

2. **C. Ellison**  
   - **SPKI Requirements, RFC 2692**  
     - 发布日期：1999年9月  
     - [RFC 2692](http://www.ietf.org/rfc/rfc2692.txt)

3. **C. Ellison, B. Frantz, B. Lampson, 和 R. L. Rivest**  
   - **SPKI Certificate Theory, RFC 2693**  
     - 发布日期：1999年9月  
     - [RFC 2693](http://www.ietf.org/rfc/rfc2693.txt)

4. **S. Garfinkel**  
   - **PGP: Pretty Good Privacy**  
     - 出版社：O'Reilly  
     - 出版年份：1995  
     - [详细信息](http://oreilly.com/catalog/9781565920989/index.html)

5. **J. Gordon**  
   - **The Alice and Bob After-Dinner Speech**  
     - 提出日期：1984年4月  
     - 地点：苏黎世研讨会  
     - [在线阅读](http://downlode.org/etext/alicebob.html)

6. **K. Hasselbacher**  
   - **ROBOT CA**  
     - [网站](http://www.toehold.com/robotca)  
   - **Robot CA: Toward Zero-UI Crypto**  
     - [文章链接](http://www.kuro5hin.org/story/2002/11/18/135727/66)

7. **S. Levy**  
   - **Crypto: How the Code Rebels Beat the Government—Saving Privacy in the Digital Age**  
     - 出版社：Diane Pub Co.  
     - 出版年份：2003

8. **U. Maurer**  
   - **Modeling a Public-Key Infrastructure**  
     - 提出地点：1996年欧洲计算机安全专题报告会（ESORICS'96）  
     - 出版物：Springer-Verlag 计算机科学演讲稿  
     - 卷号：1146  
     - 页码：325-350  
     - [在线阅读](http://citeseer.ist.psu.edu/maurer96modelling.html)

9. **N. McBurnett**  
   - **PGP Web of Trust Statistics**  
     - [网站](http://bcn.boulder.co.us/~neal/pgpstat)

10. **M. Reiter 和 S. Stubblebine**  
    - **Path Independence for Authentication in Large-Scale Systems**  
      - 提出地点：第4届ACM计算机和通信安全会议  
      - 地点：瑞士苏黎世  
      - 日期：1997年4月  
      - 页码：57-66  
      - [PDF下载](http://stubblebine.com/97ccs.pdf)
    - **Resilient Authentication Using Path Independence**  
      - 出版物：IEEE Transactions on Computers  
      - 卷号：47  
      - 期号：12  
      - 日期：1998年12月

11. **R. Rivest**  
    - **Can We Eliminate Certificate Revocation Lists?**  
      - 提出地点：Financial Cryptography'98  
      - 出版物：Springer 计算机科学演讲稿  
      - 编辑：Rafael Hirschfeld  
      - 日期：1998年2月  
      - 页码：178-183

12. **B. Schneier**  
    - **Applied Cryptography: Protocols, Algorithms, and Source Code in C**  
      - 版本：第2版  
      - 出版社：John Wiley & Sons  
      - 出版年份：1996

13. **S. Schoen**  
    - **Casual PKI and Making E-Mail Encryption Easy**  
      - [文章链接](http://www.advogato.org/article/391.html)

14. **P. R. Zimmermann**  
    - **The Official PGP User's Guide**  
      - 出版社：The MIT Press  
      - 出版年份：1995
    - **PGP: Source Code and Internals**  
      - 出版社：The MIT Press  
      - 出版年份：1997

---

### 第八章 开源Honeyclient：先发制人的客户端漏洞检测

#### 8.1 客户端软件的漏洞威胁

当前，客户端软件的漏洞受到攻击的频率不断升高。根据2004年9月的一项调查，戴尔公司估计90%的Windows个人计算机都至少潜伏了一个间谍程序。根据公共漏洞和暴露（CVE）数据库（[http://cve.mitre.org](http://cve.mitre.org)）所提供的数据，Microsoft的Internet Explorer浏览器在过去的六个月中至少发现了50个漏洞。通过攻击客户端软件的漏洞，攻击者可以感染和控制那些受防火墙或其他措施保护而无法访问的系统。

当一台受害的计算机被劫持之后，攻击者可以利用客户端的漏洞进行许多其他恶意活动。例如，攻击者可以盗窃有价值的信息，如用户的在线银行资格证书等。此外，攻击者还可以将受害计算机添加到不断增长的僵尸网络中，每个僵尸计算机都可以成为分布式拒绝服务（DDoS）攻击或恶意软件发布系统的组成部分。

#### 8.2 攻击方式与原因

攻击者如何利用客户端软件的漏洞呢？早在2002年，一篇题为《How to Own the Internet In Your Spare Time》的论文设想了一些可能出现的烦人场景：一种具有传染性的蠕虫攻击同时瞄准了服务器和客户端的漏洞。首先，攻击者使用典型的Web服务器安全漏洞来注入恶意代码；然后，当用户的浏览器访问这个网站时，就会下载这些代码并攻击浏览器客户的漏洞。

今天，攻击者把目标瞄准客户软件的原因是许多这样的软件应用程序是由那些没有经过安全软件训练的人们所开发的。另外，使用客户软件的人群要远远多于使用服务器软件的人群，并且大多数人只是普通的互联网用户，很可能没有进行安全更新。相比之下，服务器管理员一般受过专门的技术训练，会经常对服务器软件进行安全更新。

即使用户足够明智，经常更新他们的操作系统并且勤奋地运行反病毒产品的最新签名，大多数通过客户软件实现攻击的恶意软件仍然能够成功入侵用户的系统，并且不会被反病毒软件检查到。反病毒软件生产商很难跟上它们的步伐。

#### 8.3 漏洞攻击产业

当我思索客户端攻击的风险时，我查看了诸如CVE和SecurityFocus（[http://www.securityfocus.com/bid](http://www.securityfocus.com/bid)）这样的漏洞数据库。我意识到安全行业在服务器漏洞的确认和修补方面远远领先于客户应用程序漏洞的确认和修补。事实上，也就是最近5到10年，我们才开始理解客户端的漏洞和攻击。我们有大量的东西需要追赶！

使事态更为严重的是，各种把攻击客户端的漏洞作为商业策略的“产业”如雨后春笋般不断冒出。根据InformationWeek提供的信息，一家名为Iframedollars.biz的俄罗斯公司开发了一个单线漏洞攻击工具，并将其推向市场向Web服务器管理员推广。管理员下载这个漏洞攻击工具并安装在他们的Web服务器上，当每个Web浏览器访问服务器并受到漏洞攻击代码的感染后，就可以向Iframedollars.biz收取6美分。

我必须承认对这种单线漏洞攻击非常感兴趣。因此，我访问了Iframedollars.biz，看看可以从哪里下载它，结果发现为了获得这个漏洞攻击工具，我需要向Iframedollars.biz发送一些信息，包括我的姓名、住址和信用卡号码。这是相当滑稽的，你能放心把自己的个人信息交给这样的人吗？我不太清楚会有多少Web管理员同意把这些敏感信息发送给Iframedollars.biz。当然，我放弃了获得这个漏洞攻击工具的机会。

#### 8.4 进入Honeyclient

在网络安全管理中，安全分析师对漏洞攻击的响应质量常常取决于他现在所掌握的与漏洞和攻击有关的知识。这些知识可用于创建入侵检测系统（IDS）签名，或用于主动修补存在漏洞的系统。

蜜罐（honeypot）是一种流行的用于获取高级知识的工具。它是一种专用的系统，故意成为新攻击的目标，当一次漏洞攻击获得成功时获取与此相关的详细信息。

然而，蜜罐是被动的设备，到目前为止所有公开的蜜罐系统仅限于发现对服务器软件的攻击。当前有大量的漏洞是在客户软件中发现的，例如Web浏览器或电子邮件客户端。由于现有的蜜罐系统无法检测对这些漏洞的攻击，因此我们需要一种新技术，能够驱动客户软件，使其能够检测新的漏洞攻击。这个概念就是Honeyclient。

Honeyclient系统将具有潜在漏洞的客户软件（例如Web浏览器）暴露在潜在的恶意网站面前，然后监视系统的行为，观察有无攻击行为发生。Honeyclient模仿连接的客户端，在正常模式下作为蜘蛛或肉鸡，持续地访问随机的网站。这种客户端很可能在一个沙盒内运行，由后者监视它的行为，观察它是否偏离了正常操作的边界。例如，我们可以对来自Honeyclient的请求进行监视，观察Honeyclient的请求是否开始偏离良好请求的状态（例如，这个Honeyclient系统不再写入到一个可执行文件）。如果Honeyclient开始表现出异常行为，我们就知道它已经被感染。此外，这个监视进程还可以检测恶意或被劫持的Web服务器。

传统的蜜罐是被动的，除非攻击者恰好对它们进行了攻击，否则它们无法检测到恶意行为。因此，Honeyclient具有能够搜寻可疑远程系统的优点。但是，它们各有适合自己的领地：蜜罐适合检测服务器端的漏洞攻击，Honeyclient适合检测客户端的漏洞攻击。

#### 8.5 世界上第一个开源Honeyclient简介

2004年，我开始设计一个Honeyclient原型。我作出的最早决定之一就是开放这个原型的源代码。我希望这种做法可以激励安全社区的其他人把Honeyclient看成是一个技术领域，并且会有一些人对这个项目作出贡献。

为了检测漏洞攻击，我对客户软件所发生的改变进行了全面的检查，就像Tripwire（[http://sourceforge.net/projects/tripwire](http://sourceforge.net/projects/tripwire)）对服务器所做的那样。我通过记录文件的MD5散列和枚举Windows的注册表键，为Honeyclient设置了一条基线。在访问了每一个可疑网站之后，我开始寻找原先的基线和新的快照之间的变化。

我已经决定从一个Windows Honeyclient主机开始，因为普通用户的计算机一般都使用这个操作系统。我还选择了Microsoft Internet Explorer（IE）作为访问可疑网站的浏览器。虽然可能存在专门针对其他操作系统或浏览器的漏洞攻击，我的Honeyclient可能无法检测到它们，但我只能选择一种操作系统和一种浏览器，因此应该选择用户使用量最大的。它们也是恶意软件开发人员最可能选择的系统，将它们暴露在漏洞攻击之下能够为最多的人群提供帮助。

真正关键的决定是让一个真实的Web浏览器访问每个站点，而不是通过像wget这样的工具下载文件来模拟浏览器的行为。这种模拟方法无法让我所希望发现的恶意软件的隐藏效果现形。实际上，Honeyclient软件在遇到一个恶意网站时必须被劫持，这样才能收集并分析恶意软件，以便更好地理解最近的攻击线路。利用这些信息，我可以向用户社区警告这些不良网站以及潜在的感染后果。如果Honeyclient只是模拟Web浏览器，它并不会被劫持，因为它并不存在攻击所瞄准的底层系统。

Honeyclient的操作步骤如下：

1. 创建一条由MD5散列值和注册表键值组成的基准线。
2. Honeyclient主机调用iexplore.exe进程，启动Internet Explorer（IE）。
3. 打开一个以前创建的URL列表文件，然后从这个文件中逐个读取URL。
4. 驱动IE访问指定的URL。
5. 当URL被访问时，在系统上创建MD5散列值和注册表键值的一个快照。
6. 如果步骤5的快照与步骤1所创建的基准线不符，Honeyclient就认为发生了一个可疑的事件，并设置一个标志以警告用户。
7. 如果快照与基准线相匹配，就对网站进行爬行（递归地访问每个链接），直到这个网站上不再有其他链接可以访问。
8. 当一个网站被完全爬行之后，Honeyclient就从URL列表中提取下一个外部链接，并再次执行上述的过程。

最初的Honeyclient原型也是用一种驱动器-代理体系结构开发的（见图8-1）。驱动器代码负责创建一条初始的基准线并调用Internet Explorer浏览器，而代理则负责创建套接字以传递来自浏览器的HTTP请求。驱动器还负责对系统的状态进行检查。

---

希望这些优化能够使您的文档更加清晰、连贯和专业。