the if clause requires c-correct replicas.
Which of the six versions should one choose? The if-clauses
in each version represents the conditions of the properties: if
weaker conditions are used, we will have stronger properties.
Note that V (resp. V ′) is weaker than V1 (resp. V ′
1) and V2
(resp. V ′
2), as gc-correct replicas are also c-correct replicas
and correct replicas. Furthermore, V1 (resp. V ′
1) is weaker
than V2 (resp. V ′
2) as the set of correct replicas in some
configuration c includes the set of c-correct replicas. One
could compare our setting with that of uniform vs. non-
uniform broadcast primitives for crash failures, where uniform
broadcast primitives are stronger ones.
G. Comparison with Previous Specifications
Our syntax follows that of Schiper to separate dynamic BFT
from its membership service [46]. As argued by Schiper, the
treatment is more natural and simpler than those of Chockler et
al. [46]. Our specification for security (correctness) properties,
however, is significantly different from that of Schiper [46].
First, our specification deals with Byzantine failures, while that
of Schiper is designed for the uniform broadcast primitives in
the crash failure model.
Second, while we define properties for regular requests
and membership requests all
together, Schiper defined all
the properties for regular requests and membership requests
separately. In particular, Schiper’s work describes first total
order for regular requests and then total order for membership
requests, both in the conventional sense of request
total
ordering. The total order specification of Schiper alone may
cause the following “anomaly,” as shown in Fig. 2: the correct
replica p1 may deliver a membership request before a regular
request, while the correct replica p2 delivers the regular request
before the membership request. This does not violate the two
separate total order properties defined in Schiper’s work, but
does violate the total order guarantee we define.
Fig. 1: Illustration for variants of definitions.
We use Fig. 1 to explain the agreement definitions. In the
example, there are three configurations and seven replicas.
Replicas p1 to p5 are correct and g1-correct. Replica p6 is 1-
correct but 2-faulty as it leaves the system after configuration
2. Replica p7 is correct in 1 but 1-faulty as it leaves the system
1Strictly speaking, we could have three more variants by asking the replicas
in the if clauses to be “gc correct.” These definitions are weaker and do not
seem to lead to interesting (more efficient) constructions.
Fig. 2: An example that does not violate the total order
property in Schiper’s scheme but violates our definition.
That is, the two total order properties defined in Schiper’s
work, even when combined, is strictly weaker than ours. With
the “same configuration delivery” properties defined addition-
ally in Schiper’s work for both regular requests and mem-
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:42 UTC from IEEE Xplore.  Restrictions apply. 
61322
bership requests, however, one can check that the “anomaly”
would not occur. In fact, the two total order properties and
the two same configuration delivery properties defined in
Schiper’s work, all together, are equivalent to our enhanced
total order property (which encompasses the same configu-
ration delivery property). Therefore, while there is no one-
to-one correspondence between our properties and those of
Schiper, our specification and the specification of Schiper
(with appropriate modifications for Byzantine failures) can be
as a whole equivalent. Our definitions, however, appear cleaner
and simpler.
Last, Schiper’s work does not define the needed property
(consistent delivery) that is crucial to the security of dynamic
BFT.
IV. CHALLENGES OF DYNAMIC BFT
When building a dynamic BFT, one may simply treat mem-
bership requests as regular requests. The intuitive approach,
however, leads to various issues, making dynamic BFT fail
to achieve liveness. We illustrate below some challenges for
leader-based BFT protocols with view changes in partially
synchronous environments.
Liveness problems in normal-case operations. The agree-
ment property, regardless of the partially synchronous or
asynchronous assumption, requires that if a correct sender
stays online for a sufficiently long time, a correct receiver will
receive the messages from the sender. This, however, is not
the case for dynamic BFT. In particular, consider a cq-correct
replica pi that leaves the system immediately after cr where
cr > cq. Replica pi has delivered m in cq and remove(pi) in
cr. Consider another correct or cq-correct replica pj which is
still in cq. The replica needs to collect Qcq matching messages
to deliver m. Some cq-correct replicas (or even all cq-correct
replicas besides pj), however, might not be correct any more as
they already move to cr, e.g., pi has already left the system.
Therefore, correct replicas might not be able to deliver m,
creating agreement and liveness problems.
Liveness problems for view changes. We summarize various
liveness problems associated with view changes.
1) The correct leader in the new view may not be able to
obtain enough view change messages to start a new view.
2) The designated leader in the new configuration may not
be aware of the view change. This is because replicas
stay in different configurations and they fail to send all
replicas view change messages in the latest configuration.
3) Multiple replicas may claim that they are the new leader
after the view change.
Fig. 3: The liveness challenge for view changes.
We show an example in Fig. 3. Replicas move from config-
uration c = 1 to c = 3, where in all three configurations, p5 is
the leader. In configuration c = 1, there are five replicas and p3
is removed. Replicas p2, p4, p5 install configuration 2 while p1
still stays in c = 1. In configuration 2, quorum size is 3 so p2,
p4, and p5 are able to reach an agreement. In c = 2, p6 requests
to join the system. After the delivery of the request, replicas
p4, p5, and p6 install c = 3 while p2 still stays in c = 2. If
view change occurs at this stage, replica p6 is the designated
leader in the new view. Since quorum size is 4 in c = 3, p6
has to collect 4 messages to start a new view. However, p1
and p2 are not even aware of p6. Furthermore, replica p1 may
believe it is the new leader. Therefore, all correct replicas will
halt forever since replicas do not process any messages during
view changes and replicas may never resume to normal-case
operation. In a static system, the problem could be fixed by
having replicas synchronize with other replicas. In a dynamic
system, however, replicas may not even know the identities of
replicas currently in the system.
V. OVERVIEW OF OUR PROTOCOLS
We provide secure constructions satisfying various dynamic
BFT definitions in Table I based on two assumptions in
partially synchronous environments.
A. Dyno-S: An Intuitive but Inefficient Construction
Dyno-S formalizes the intuition that each time a member-
ship request is processed, a view change needs to be triggered
to prevent replicas from missing newer configurations. How-
ever, constructing such a protocol—with provable security—
using the idea is not trivial. The approach needs to solve the
challenges in Sec. IV and needs to achieve consistent delivery.
Due to space restrictions, we will present the construction in
our full paper. The major drawback of the construction is that
every view change results in a window of zero throughput, as
replicas do not process any requests during view chagnes.
B. Dyno, Dyno-C, and Dyno-AC
Dyno is our main protocol that retains its efficiency during
membership changes. It is secure in the sense of definition
V under the standard quorum assumption and is also secure
in the sense of V1 under the stronger G-correct assumption.
Jumping ahead, we also provide dynamic BFT constructions
with stronger properties (summarized in Table I). Dyno-A is
built on top of Dyno and additionally has a terse addendum
(A) protocol running. Dyno-C differs Dyno in a minor manner,
using a slightly constraint (C). Dyno-AC, as its name suggests,
incorporates the addendum protocol (A) and the modified
constraint (C). We will describe what the addendum protocol
and the constraint mean in Sec. VII.
Below, we describe Dyno at a high level. We define two
events when describing our membership approach: init() and
deliver(). The init() event is triggered where the primary in
the current view starts a new round of the protocol. The
deliver() event denotes the event that a request is committed
and ready to be delivered during normal-case operation. Our
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:42 UTC from IEEE Xplore.  Restrictions apply. 
71323
membership protocol has the following key components to
ensure correctness without performance interruption.
We manage configuration as part of the system state, similar
to prior works (e.g., Paxos, Schiper’s work, and BFT-SMaRt).
The membership request is treated in the same way as regular
requests. Replicas reach agreement on a batch of requests
in each round. If the batch consists of both regular requests
and membership requests, the regular requests are delivered
first according to a deterministic order (same as those in BFT
with static membership). After that, membership requests are
delivered. All replicas then install the new configuration.
Temporary membership management. When a join mem-
bership request is delivered, the configuration might be differ-
ent from that when the request is submitted. To simplify the
notification process, we introduce the concept of temporary
membership. Specifically, each new replica acts as a learner.
Existing replicas send the normal-case operation messages to
both replicas in the current configuration and all the temporary
members. The quorum size, however, still remains the same
as the current configuration. Upon the deliver() event, the
membership is updated and becomes the same as temporary
membership. Doing so allows us to have a more efficient state
transfer mechanism.
Configuration discovery protocols and consistent delivery.
We devise configuration discovery protocols in order for new
replicas and clients to learn the membership of the current
system. We provide protocols achieving the goal implicitly
and explicitly. The protocols are also vital to achieve consistent
delivery, as the client needs configuration discovery to verify
replies from the replicas currently in the system.
There are two more techniques we need to achieve consis-
tent delivery. First, we enforce agreement across configurations
to ensure all correct replicas, not just a fraction of correct
replicas, up to date. Second, replicas maintain a total order
of execution history and configuration history (a subset of
execution history). The execution history contains proof of
delivery (in the form of signatures, proving that a quorum of
replicas have agreed to deliver the request) for each request
to ensure total order and agreement. The configuration history
includes the proof of delivery for membership requests only.
The configuration history is used to verify if the correct replica
has installed certain configurations. The configuration history
allows a client to determine if it has received enough matching
replica replies to safely deliver them in some configuration.
Note it is possible the client cannot deliver the replies in the
configuration where the request is issued, but the client will
deliver them in some future configuration.
Carefully designed view changes. To ensure that the des-
ignated leader in a new view receives a quorum of view
change messages, we introduce additional workflow during
view changes. Specifically, each replica includes its configu-
ration number in a view change message together with a valid
proof of delivery for the membership requests.
For any replica pi in configuration c, it compares c to c′,
where c′ is the configuration number carried in a view change
message sent by pj. If c′ is smaller, pi forwards the view
change message to all replicas in Mc/Mc′. Note that Mc/Mc′
is sufficient as the replica pj (if correct) must have already sent
the message to Mc′. On the other hand, if c is smaller, there are
two cases: pi has previously sent a view change message; pi
has not previously sent a view change message. In the former
case, pi re-sends its view change message to Mc′/Mc. In the
latter case, pi will send its view change message (if applicable)
directly to all replicas in Mc′. This ensures that replicas in the
new view is able to collect a sufficiently large number of view
change messages to enter the new view.
VI. THE DYNO PROTOCOL
We now present Dyno, focusing on how membership re-
quests and regular requests are processed and the workflow of
view changes. Throughout the paper, we assume each message
m is unique. In this section, we use the normal-case operation
as an oracle, denoted by the init() and deliver() events, as
discussed in Sec. V. In particular, we use Bracha’s reliable
broadcast [8] as the normal-case operation and we discuss the
details of how the init() and deliver() events are triggered in
Appendix A. We use Bracha’s broadcast since it is a primitive
that achieves agreement, which we find crucial for dynamic
BFT. For each request, we use proof of delivery to denote the
proof that the request can be safely delivered. In our case, this
refers to 2f + 1 matching messages in the second phase of
Bracha’s broadcast (or prepare certificate in the PBFT term)
or f + 1 matching messages in the third phase (or f + 1
⟨COMMIT⟩ messages in the PBFT term).
When we describe the protocol, we consider a configuration
discovery protocol triggered via the ObtainConf ig() func-
tion. Replicas and clients can query the function to obtain the
current configuration. The detail of configuration discovery is
discussed in Sec. VI-B. In this section, we ignore the details
of the garbage collection as conventional checkpoint protocols
can be used in our system.
A. The Protocol
Clients submitting regular requests. A client is able to
obtain a configuration c and the set of replicas Mc via the
ObtainConf ig() function. To submit a request, a client first
broadcasts a message ⟨SUBMIT, c,⟨REQUEST, cid, o⟩⟩ to all
replicas in configuration c. The request ⟨REQUEST, cid, o⟩ is
a regular request with a valid signature, where cid is the id
of the client and o is the operation. There are two cases for
the replies the client might get. 1) If the client gets a reply
from fc + 1 replicas in Mc, it completes the request. 2) The
client may get a reply from a replica in c′ where c′ > c.
In this case, the client verifies the configuration history chist
(described in great detail later) and checks whether c′ is a valid
configuration. If c′ is valid, the request is completed. If none of
the cases apply and the client times out, the client performs
configuration discovery again and submits the request, until
the request is completed.
Normal-case operation and membership requests. The
pseudocode for normal-case operation at replica pi is shown
in Fig. 5. When a replica in c receives a request from a client
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:42 UTC from IEEE Xplore.  Restrictions apply. 
81324
{current configuration}
{new replica}
Initialization
c, M, T M
chist
 events
upon receiving m = ⟨SUBMIT, c′, ⟨REQUEST, cid, o⟩⟩
{configuration, membership, temporary membership}
{confiugration history}
{client}
init(batch)
as a replica
upon init(batch)
if m has been delivered
else
send ⟨REPLY, c, re, chist⟩ to client cid
if c = c′, forward m to leader
else if c > c′, forward m to Mc/Mc′
add m to queue
as a leader
upon non-empty queue
batch ← regular requsts in queue
for each m = ⟨SUBMIT, c′, ⟨JOIN, pk⟩⟩ in the queue
j ← AssignID()
batch ← batch ∪ ⟨ADD, j, m⟩
batch ← batch ∪ ⟨REMOVE, j, m⟩
for each m = ⟨SUBMIT, c′, ⟨LEAVE, j⟩⟩ in the queue
if ⟨ADD, j, m⟩ ∈ batch
T M ← T M ∪ {pj}
sync(m)
 utility functions
func sync(⟨ADD, j, m⟩) where m = ⟨SUBMIT, c′, ⟨JOIN, pk⟩⟩
if c > c′
send ⟨CONF, c, Mc, chist⟩ to pj
func deliver(batch)
for m = ⟨SUBMIT, c′, ⟨REQUEST, cid, o⟩⟩ in batch
if there are membership requests
M ← M ∪ pj
M ← M − pj
reply(m)
c ← c + 1
for ⟨ADD, j, m⟩ in batch
for ⟨REMOVE, j, m⟩ in batch
send ⟨HISTORY, s, h, C, P⟩ to Mc/Mc−1
chist ← chist ∪ batch
func reply(⟨SUBMIT, c′, ⟨REQUEST, cid, o⟩⟩)
if c > c′, send ⟨REPLY, c, re, chist⟩ to cid
else, send ⟨REPLY, c, re⟩ to cid
Initialization
c
func submit()
 to join
c, Mc ← ObtainConf ig()
broadcast ⟨SUBMIT, c, ⟨JOIN, pk⟩⟩ to Mc
start timer ∆
upon receiving ⟨CONF, c′, Mc′ , chist′⟩ {configuration notification}
if chist′ is valid and c′ > c
c ← c′, Mc ← Mc′
for m in h, deliver(m)
upon receiving 2fc + 1 ⟨HISTORY, s, h, C, P⟩
upon deliver(batch) where ⟨ADD, i, m⟩ ∈ batch
wait until state transfer is completed
stop ∆, complete the request
{existing replica}
 to leave
broadcast ⟨SUBMIT, c, ⟨LEAVE, i⟩⟩ to Mc
start timer ∆
upon deliver(batch) where ⟨REMOVE, i, m⟩ ∈ batch
stop ∆, complete the request
 to submit a regular request
c, Mc ← ObtainConf ig()
broadcast ⟨SUBMIT, c, ⟨REQUEST, cid, o⟩⟩ to Mc
start timer ∆
upon fc + 1 matching ⟨REPLY, c, re⟩ from Mc
upon fc′ + 1 matching ⟨REPLY, c′, re, chist′⟩ from pj ∈ Mc′
stop ∆, complete the requst
stop ∆, complete the request
upon timeout(∆)
repeat submit()
Fig. 4: Pseudocode for a client/a replica pi that issues requests.
that has c′ in the ⟨SUBMIT⟩ message, there are two conditions.
1) If the request has already been delivered, pi directly replies
with ⟨REPLY, c′, re, chist⟩, where re is the execution result and
chist is the configuration history. 2) Otherwise, the request is
added to the pending queue. Meanwhile, if c = c′, the replica
forwards the request to the leader in the current configuration.
If c > c′, the client is still in a prior configuration, pi forwards
the request to Mc/Mc′.
For a replica to join the system, the replica broadcasts a
⟨SUBMIT, c,⟨JOIN, pk⟩⟩ request, where pk is the public key.
To remove a replica from the system,
the replica or the
administrator broadcasts a ⟨SUBMIT, c,⟨LEAVE, i⟩⟩ message.
When the current leader of the system has a non-empty
queue,
the leader obtains a batch of request(s) from the
pending queue. If there is a ⟨JOIN, pk⟩ request, the leader
adds a ⟨ADD, j, m⟩ message to the batch, where m is a valid
⟨JOIN⟩ request and j is the identifier assigned to the replica. If
there is a ⟨LEAVE, j⟩ request, the leader adds a ⟨REMOVE, j, m⟩
message to the batch, where m is a valid ⟨LEAVE⟩ request.
Then the leader triggers the init() event. If a non-primary
replica triggers the init(batch) event for a batch, for each
⟨ADD, j, m⟩ in the batch, the replica adds pj to T M and
continues the normal-case operation where it also sends the
messages to pj. The value of f and quorum size, however,
are still determined by the group members M. In other words,