e1 happens before the event e2, denoted as e1 → e2, if e1
happens before e2 at the same location, or if e1 is the sending
of a message and e2 its reception. The happens before
relation is transitive. Logical clocks associate a timestamp to
each event e, written as LC(e), and ensure that if e1 → e2,
then LC(e1)  MsgVal x Loc
6
7 type T i m e s t a m p = Int
8 i n t e r n a l msg : MsgVal x T i m e s t a m p
9
10 import imax
( imax t i m e s t a m p clock ) + 1 ;;
11 let u p d _ c l o c k slf (_ , t i m e s t a m p ) clock =
12
13 class Clock = State (0 , upd_clock , m s g ’ b a s e ) ;;
14
15 let on_msg slf ( value , _ ) clock =
16
17
18 class Handler = on_msg o ( msg’base , Clock ) ;;
19
20 main Handler @ locs
let ( newval , r e c i p i e n t ) = handle ( slf , value )
in { m s g ’ s e n d r e c i p i e n t ( newval , clock )} ;;
Figure 3. A simple protocol that implements Lamport clocks.
receives a message, the process clock is updated to the
maximum of the process clock value and the logical clock
tagged to the message, incremented by one.
Fig. 3 presents an EventML speciﬁcation of Lamport
clocks, which we call CLK. It is parametrized by the fol-
lowing three variables (lines 3-5): locs is the collection of
processes of the speciﬁed distributed system, MsgVal is the
type of the information contained in the messages exchanged
by the processes, and handle is the function used to handle
incoming messages. When a process running at location loc
receives a message msg, it applies the handle function to loc
and msg, computing a new message newmsg and the location
of a recipient process to which newmsg has to be sent.
A Timestamp is a logical clock, represented by an integer
(line 7), and a message body is a pair consisting of a MsgVal
and a Timestamp (line 8). We refer to the ﬁrst component of
a message as its value and to the second component as its
timestamp. The msg declaration (line 8) implicitly declares
the msg’base event class that recognizes such messages, and
extracts their content. It also implicitly declares the msg’send
message constructor that takes a recipient loc and a message
content (value,timestamp) and builds the instruction “send
message with content (value,timestamp) to loc”.
Next, we deﬁne the event class Clock in charge of keeping
track of the current clock at each process location (line 13).
EventML’s State keyword deﬁnes a state machine; Clock
speciﬁes a state machine with initial state 0. On each mes-
sage, Clock invokes upd_clock (lines 11-12), which extracts
the timestamp of the message, computes the maximum max
between this timestamp and its current clock (given by the
parameter clock in upd_clock’s deﬁnition), sets its clock to
max + 1, and returns its new clock.
We deﬁne the event class Handler using the EventML
composition combinator o (line 18). On each input mes-
sage,
if msg’base produces (value,timestamp), and if
Clock produces clock, then Handler produces the result
of (on_msg slf (value,timestamp) clock), where slf is
the location at which the process is running. First, on_msg
(lines 15-17) applies the function handle (a parameter of the
system) to slf and to value to produce a new value newval.
Then, using msg’send, on_msg builds a “send message”
instruction with data newval and timestamped with the
current clock clock provided by Clock.
Finally,
the declaration main Handler @ locs declares
that CLK is composed of processes implementing Handler
and running at each location in locs (line 20).
2) Veriﬁcation: We have to prove that e1 → e2 implies
LC(e1)  ∈ CLK(MsgVal;locs;handle;f)(e)
1. ∀[MsgVal:ValueAllype]. ∀[locs:bag(Id)]. ∀[handle:Id → MsgVal → (MsgVal × Id)].
2. ∀[f:headers_type]. ∀[eo:EO(f)]. ∀[e:E(eo)]. ∀[d:Z]. ∀[i:Id]. ∀[m:Message(f)].
3.
4. ⇐⇒ loc(e) ↓∈ locs
5.
6.
7.
8.
9.
∧ (header(e) = ‘‘msg‘‘)
∧ has-es-info-type(eo;e;f;MsgVal × Z)
∧ (d = 0)
∧ (i = (snd((handle loc(e) (fst(msgval(e)))))))
∧ (m = make-Msg(‘‘msg‘‘;))}
Figure 4. The Inductive Logical Form of CLK.
recursive functions. Also, event classes typically occur more
than once in speciﬁcations, leading to unnecessary duplica-
tion of code.
the information computed at some events in terms of the
information computed at prior events.
Fig. 4 shows CLK’s ILF. This ILF is automatically gen-
erated by Nuprl using various logical simpliﬁcations and
using characterizations of the LoE combinators. It says
that in CLK, an event e results in message m being sent
to location i (line 3) iff3: event e happens at one of the
locations in locs (line 4); ‘‘msg‘‘ is the header of the
message that triggered e to happen (line 5); the type of
the data contained in that triggering message is MsgVal × Z
(line 6); the location i is computed by applying handle to e’s
location and to the value of the triggering message (line 8);
m’s value is also computed using handle, and its timestamp is
the current clock, given by ClockVal(MsgVal;f)@e (line 9).
ClockVal is automatically generated from the Clock event
class. Because at each event Clock returns one and only
one value, ClockVal is the function that takes an event and
returns that value. Clock is what we call a single-valued
event class. All our state classes are single-valued.
It turns out that the ILF presented in Fig. 4 is not explicitly
inductive in the sense that it does not mention earlier events.
The inductive character of that particular ILF comes from
the occurrence of ClockVal. ClockVal’s value at a particular
event e is deﬁned in terms of prior events, as expressed
by the equality presented in Fig. 5. These equalities are
generated and proved semi-automatically as required.
it
Using the ILF presented in Fig. 4 and the characterization
presented in Fig. 5,
is then easy to prove that CLK
satisﬁes Lamport’s Clock Condition (this corresponds to task
labeled d in Fig. 2). Fig. 6 shows a Nuprl statement of this
fact. To prove this property, we assume that events can only
be caused by messages with headers ‘‘msg‘‘ as speciﬁed by
the hypothesis (∀e:E(eo).↑e ∈b msg’base(MsgVal;f)).
Note that the ILF transformation is optional—it is possi-
ble, though more tedious and difﬁcult, to prove correctness
using the LoE speciﬁcation directly in Nuprl.
3) Process optimizations: Having proved that CLK satisﬁes
the desired correctness properties we can now trust the GPM
code generated by EventML’s compiler. However, this code
is often hard to read and inefﬁcient because GPM programs
are built using several combinators deﬁned as recursive
functions, leading to programs composed of several nested
3Variable d in Fig. 4 is a period of time the process must wait before
sending the message. These delays are useful, e.g., to implement timers.
5
To overcome these inefﬁciencies, we have built a tool that
can optimize GPM programs and prove that the optimized
program has the same computational behavior as the non-
optimized program. Our optimizer merges nested recursive
functions into one and also applies common subexpression
elimination. Besides producing more efﬁcient code,
the
optimized code tends to be easier to read as it is closer
to what one would write by hand.
Fig. 7 shows the statement
(lines 1–10) and proof
(line 11) that the non-optimized GPM program generated
by EventML, called CLK-program in that ﬁgure (line 1), is
equivalent to the optimized code (lines 2–10) presented on
the right-hand-side of the ∼ symbol (which is a bisimulation
relation) as generated by our program optimizer. This pro-
gram is a distributed system generator. It takes a location,
slf (line 2), and returns the process that is meant to run
at that location. If slf is not a member of locs then our
process generator returns the halted process halt (line 10).
Otherwise, it returns the application of the process R to the
initial state 0 (line 9), the initial timestamp. The process
R (lines 3–8) is a recursive function that takes a state s, a
message m, and depending on whether or not the header of
that message is ‘‘msg‘‘ (line 4) does one of two things: if
m’s header is ‘‘msg‘‘, R builds a new state s’ (line 5), a
collection out of messages to send in response to m (line 6),
and returns the pair of the new process R(s’) and the outputs
out (line 7); otherwise R returns the process R(s) and an
empty list of outgoing messages (line 8). Given such a
pair , EventML sends the messages in out, and
R(s’) replaces R(s).
D. Generation and Veriﬁcation of a broadcast service:
Fault handling in a distributed system can be difﬁcult
because there may be disagreement among the participants
about who is up and who is down. At the core of the
solution is a consensus protocol that participants use to reach
agreement on competing proposals for recovery actions.
Implementing such protocols is difﬁcult even if the proto-
col itself is well-understood. For instance, Google describes
an extension to Paxos that allows them to recover from disk
corruption [17]. Unfortunately, this extension has a bug in
it. A Paxos acceptor could promise one leader not to accept
ballots lower than b, lose this state after a disk corruption,
∀[MsgType:ValueAllType]. ∀[f:headers_type]. ∀[es:EO(f)]. ∀[e:E(eo)].
(ClockVal(MsgType;f)@e = if e ∈b msg’base(MsgType;f)
then if first(e) then imax(snd(msg’base(MsgType;f)@e);0) + 1
else imax(snd(msg’base(MsgType;f)@e);ClockVal(MsgType;f)@pred(e)) + 1 fi
else if first(e) then 0 else ClockVal(MsgType;f)@pred(e) fi )
Figure 5. A characterization of the Clock event class in Nuprl.
∀MsgVal:ValueAllType. ∀locs:bag(Id). ∀handle:Id → MsgVal → (MsgVal × Id).
∀f:headers_type. ∀es:EO(f). ∀e1,e2:E(eo). ∀clk1,clk2:Z.
((∀e:E(eo).↑ e ∈b msg’base(MsgVal;f)) ∧ e1 → e2 ∧ clk1 ∈ Clock(MsgVal;f)(e1) ∧ clk2 ∈ Clock(MsgVal;f)(e2))
⇒ (clk1 
else let s’ ← s in )