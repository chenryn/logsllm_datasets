Initialize a cycle (Cycle.setup)
Registration for each participant (Cycle.register)
Initialization Process
Dispute Process
1
2
3
4
5
6
7
8
Initiate a dispute process (Chan.trigger)
Provide evidence only with increased expected offsets (Cycle.balancing)
Provide evidence with a decreased expected offset (Cycle.balancing)
Provide evidence for channel (Chan.setstate)
Settle the dispute (Chan.settle)
Closing Process
Withdraw balance (Chan.withdraw)
4 participants
32 participants
Cost (Gas) Cost ($) Cost (Gas) Cost ($)
922486
74548
63360
81647
90653
107624
58418
65337
1.48
0.12
0.10
0.13
0.14
0.17
0.09
0.10
922486
81262
63360
327527
420837
107624
58418
65337
1.48
0.13
0.10
0.54
0.67
0.17
0.09
0.10
more than one cycle contract as parameters and registers with
these cycles. Chan.withdraw computes the balance deviation
depending on Δ in all these cycles. During the cycle planning,
a channel can join multiple cycles, each of which is responsible
for a proportion of its demand. Next, the channel maintains a
list of expected offsets for its participating cycles, and updates
them based on the proportion deﬁned in the planning.
VII. IMPLEMENTATION
We implement a cycle contract using the programming
language Solidity and the local behavior of each participant
(Algorithm 1) using Python. Similar to [23], [32], we adopt
Sprites state channel [33] as the channels in our network.
To demonstrate the overhead of the cycle contract on the
blockchain, we deploy it in a test net of Ethereum and evaluate
the cost of each transaction. The transaction cost is measured
in gas. The gas cost can be converted into the dollars by using
an exchange rate of 1 Gas ≈ 10 Gwei = 1∗ 10−8 Ether and 1
Ether ≈ $160 in April 2020. The cost of the execution process
for Cycle is shown in Table I.
In steps 1 and 2, we illustrate the cost of initializing and
registering at a cycle, respectively. Next, in steps 3-7, we
measure the cost of a dispute resolving process in which a
participant ﬁrstly triggers the dispute using Chan.trigger, then
the participants of the channel can provide an evidence for the
global offset and the balance deviation via Cycle.balancing
and Chan.setstate, respectively. In comparison with step
4, step 5 needs to validate more signatures because of the
conditional-revert rule, thus costing a little more gas. Finally,
in step 8, when the dispute expires, Chan.settle is used to
settle the dispute. When closing the channel, each participant
can withdraw its balance via Chan.withdraw.
For comparison, according to our testing, under the same
setting for 32 participants, the contract deployment of REVIVE
[22] costs 627100 gas (about $1) and each dispute resolving
costs 288000 gas (about $0.46). The cost of contract deploy-
ment and dispute resolving in CYCLE is similar to those in
REVIVE, except that CYCLE needs an additional registration
cost about $0.12 for each participant.
We present and analyze three different scenarios that may
happen in the cycle. 1) In the best case, there is no malicious
participants and network latency,
thus there is no dispute
and each participant only needs to call Cycle.register and
Cycle.withdraw once during the lifetime of the cycle. 2) In
a worse case, the cycle has no malicious participants but has
network latency, all disputes can be solved by exchanging the
local state (the local copy of the channel state and expected
offset
list) with each other off-chain. The number of on-
chain function calls will be the same as the ﬁrst scenario.
3) In the worst case, both malicious participants and network
latency exist in the cycle. According to the protocol, the honest
participants can provide evidence by calling Cycle.balancing
to agree on a unique and correct global offset insuring their
funds. The process of resolving dispute on-chain requires
calling Cycle.balancing multiple times, the number of which
ranges from 1 to the number of participants. However, as
suggested in § VI, a cycle is expected to be deployed in a
consortium context to maximize the performance as much as
possible thus the third scenario happens rarely in practice.
Furthermore, in comparison with the ﬁrst scenario, the second
one is more practical for a real network environment thus
happens most of the time.
VIII. EXPERIMENT
In this section, we evaluate the performance of CYCLE
across a range of scenarios according to the pre-existing
transaction data and network topology from two real-world
PCNs3, i.e., Ripple [39] and Lightning [26].
A. Setup
Topology. For Lightning, we run a lnd node [35] on
mainnet to retrieve a topology snapshot of Lightning in May
20, 2020. For Ripple, we adopt the crawls of the topology
snapshot of Ripple in November, 2016 from a dataset given
in [40]. Then, to boostrap the network with a more balanced
state, we evenly assign deposits over both directions of each
channel. Similar to [41], we snowball sample the full topology
of Ripple (67149 nodes and 199574 channels) for a sampled
one (113 nodes and 592 channels) and the full topology of
Lightning (2791 nodes and 10454 channels) for a sampled
one (132 nodes and 1046 channels).
Transaction. For Ripple, the dataset given in [40] includes
the transactions (about 2.6 million) since its creation in Jan.,
3CYCLE is built on top of smart contract, however, these two networks that
we choose for evaluation do not support smart contracts. The reason is that
most of smart contract-compatibility PCNs, such as Raiden [38] for Ethereum,
are still work in progress and do not open their transaction dataset. We believe
that the payment networks for blockchain have a similar characteristics of user
topology and transaction distribution.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:16:49 UTC from IEEE Xplore.  Restrictions apply. 
49
Fig. 5. Performance results with varying number of transactions in Ripple.
(a) Ripple
(b) Lightning
Fig. 7. Fluctuation of percentage of imbalanced channels.
Fig. 6. Performance results with varying number of transactions in Lightning.
2013 to Nov., 2016. For Lightning, because of its design
for the privacy protection, the historical data about the off-
chain transactions is hidden and it is impossible to gather
them. Thus, we adopt
the Bitcoin transactions (about 4.5
million) from November, 2014 to January, 2016 from a dataset
given in [44]. Because Lightning is the PCN for Bitcoin,
we believe that the transactions in these two platform have
similar characteristics. However, because the value of off-chain
transactions is often smaller than on-chain transactions [5], we
scale down the value of Bitcoin transactions.
Routing. We adopt the shortest path algorithm as the routing
algorithm, i.e., each transaction uses the path with minimum
hops between the sender and receiver. It is the baseline routing
algorithm that illustrates the basic performance of CYCLE.
Benchmarks. We implement a prototype of REVIVE [23]
with different rebalancing frequency settings to compare with
CYCLE in our experiment. Each variant is named as ReviveX
where X denotes the number of rebalancings in ten minutes,
for example, Revive5 means that there are 5 rebalancings in
ten minutes. Furthermore, there is a baseline named Origin
without the balancing protocol or rebalancing protocol.
Metrics. We adopt
the following evaluation metrics in
the simulation: 1) success ratio: the number of successful
transactions over the number of generated transactions, 2)
success volume: the total value of all successful transactions,
3) imbalanced level: the percentage of imbalanced channels in
the network. (A channel is regarded as an imbalanced one if
its balance deviation is 80% greater than its balance sum.)
B. Result
1) Performance results: We ﬁrst evaluate and compare the
performance of CYCLE and REVIVE with various number
of transactions to emulate different transaction loads of the
network. According to Fig. 5 and Fig. 6, the success ratio of
REVIVE and Origin decreases while that of CYCLE can remain
relative stable with the increase of the number of transactions.
(a) The expected offset of a participant
with varying privacy budget
(b) Trade-off between privacy pro-
tection and performance
Fig. 8.
Impact of privacy-preserving scheme.
CYCLE outperforms REVIVE by about 31% in Ripple and
12% in Lightning on the success ratio. The reason that the
performance of CYCLE in Ripple is better that in Lightning is
that there are more channels in Lightning thus the demand of
each channel is lower with the same number of transactions.
The performance improvement
is more signiﬁcant as the
transaction loads increase in the PCN.
Furthermore, in REVIVE, the success ratio ﬁrst increases and
then decreases as the growth of the frequency. It is because
the rebalancing needs to freeze the channels in a certain time
and frequent rebalancing can interrupt the running of channels,
which can justify our motivation in § I.
2) Imbalanced level: We then show the ﬂuctuation of
imbalanced level during the running of CYCLE and REVIVE
in Fig. 7. We observe that CYCLE can keep the level of
imbalance low, i.e., less than 5%. Next, with the increase of
the rebalancing frequency, REVIVE also can keep the channels
balanced and its effect resembles closely to that of CYCLE.
However, as illustrated in Fig. 5 and Fig. 6, because of
the performance degradation brought by frequent freezings
in REVIVE, the success ratio will be seriously harmed and
the success ratio will decrease, although the channels can be
kept balanced by frequently invoking REVIVE. In addition,
by comparing Fig. 7(a) and Fig. 7(b), we observe that the
percentage of imbalanced channels in Lightning is less than
that in Ripple, which proves the demand of each channel in
Lightning is relatively low.
3) Privacy-preserving Scheme: We conduct experiments of
our privacy-preserving scheme over Ripple as shown in Fig. 8.
In Fig. 8(a), we sample a participant in the cycle and shows
its expected offset which is disturbed by our truncated Laplace
mechanism during the running. A smaller privacy budget  can
impose a bigger noise on the expected offset. In Fig. 8(b), we
show the performance of CYCLE degrades when  decreases. It
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:16:49 UTC from IEEE Xplore.  Restrictions apply. 
50
rithms to improve the performance of PCNs. Flare [37] lever-
ages modiﬁed Kademlia distributed hash tables to optimize
the search process of possible payment routes. SilentWhispers
[30] proposes the landmark routing algorithm in which some
nodes of high connectivity, called landmarks, store the routing
tables of the network and other nodes only need to route their
transactions to the landmarks. SpeedyMurmurs [40] proposes
an embedding-based routing algorithm in which the nodes
relay transactions to the closest neighbors in embedded space.
Spider [41] proposes a packet-switched routing algorithm with
multi-path congestion control protocol. FSTR [27] proposes a
funds skewness aware routing algorithm.
C. Rebalancing
Rather than routing algorithms, there is a promising direc-
tion named rebalancing. Note that the routing and rebalancing
are complementary and can coexist to improve the perfor-
mance of PCN. In Lightning, the rebalancing operation is
implemented by some management tools, e.g., [28], depending
on regular circular payments but costs high transaction fee and
rebalances the network without any optimization algorithms.
Khalil et al. propose REVIVE [23], a rebalancing protocol
that generates the circular payments to rebalance the channels
based on a consensus protocol. According to the balance at
some moment, an optimal rebalancing transactions set can be
generated by linear programming. The channels are required
freezing during the consensus. To protect the participants’
privacy during rebalancing, Zeta et al. leverage multi-party
computation in solving the linear program of rebalancing [4],
which is more expensive than LDP in our work.
In comparison with REVIVE, CYCLE is better than or at
least equal to REVIVE in any aspect since REVIVE can be
regarded as a special case of CYCLE. If the participants
in CYCLE only share their state at the end of each round,
CYCLE is similar to REVIVE. (Note that CYCLE can also
adopt leader-based broadcast in REVIVE.) However, compared