--max_prepared_stmt_count=1048576
-max_connections=1000
-query_cache_type=0
-query_cache_size=0
-innodb_support_xa=FALSE
--innodb-buffer-pool-size=8192M
-innodb_file_format=barracuda
#make&&makeinstall
--with-MySQL-libs=/usr/local/MySQL/lib
-with-MySQL-includes=/usr/local/MysQL/include
#./configure
#tarzxvfSysbench-0.4.8.tar.gz
skip-grant-tables
-innodb_stats_on_metadata=off
-innodb_change_buffering=all
cdSysbench-0.4.8
innodb-buffer-pool-instances=12
nnodb-write-io-threads=8
nnodb-read-io-threads=8
skip-innodb-adaptive-hash-index
nnodb-io-capacity=200
innodb-log-buffer-size=64M
innodb-log-file-size=2000M
nnodb-flush-log-at-trx-commit=2
nnodb_flush_method=O_DIRECT
、PostgreSQL、Oracle这3种数据库。下面来看看它
---
## Page 21
务，允许值的范围是1～64。
注意
后，在Linux平台上就可以根据CPU核数来更改相应的参数值了，默认是4。
innodb_read_io_threads 和 innodb_write_io_threads，取代了innodb_file_io_threads 如此调整
理数据页上读写I/0（输人输出）请求的数量。
是不可更改的，但Windows系统上可以调整。这个参数的作用是：InnoDB使用后台线程处
1.1.2充分利用CPU多核的处理能力
14.4.7.1.OverviewofInnoDBPerformance
·To maintain data integrity.InnoDB also supportsFOREIGHKEYreferential-ntegrity constraints
·Row-level ocking and Oracle-style onsistentreads increasemuti-userconcurrencyandperformance
·Its design follows theACiDmodel withransactions featuring conimitrollbackand crash-recovery capabilties to protect user data
在MySQL5.5.X版本中，或者说是在InnoDBPlugin1.0.4以后，就用两个新的参数，即
在MySQL5.1.X版本中，innodb_file_io_threads 参数默认是4，该参数在Linux系统上
这两个参数不支持动态改变，需要把该参数加入my.cnf里，修改完后重启MySQL服
调整完成后，你可以用命令“show engine innodb status\G;”来查看调整结果，如下所示：
也就是说，你可以根据情况加以设置。
innodb_write_io_threads=8
假如CPU是2颗8核的，那么可以设置：
innodb_write_io_threads=6.
innodb_read_io_threads=10
如果数据库的读操作比写操作多，那么可以设置：
innodb_read_io_threads=8
InnoDB has always been highly efficient.and includes several unique architectural elements to assure high performance and scalabilit
ucl
rfon
mance
ODB Tables"in
storage
engine
rticular
Optimi
for
InnoDB
step
StartingwithMySQL55itis thedefaultMySQLstorageengineKey
learm thebest
tips
and
dguidelines.
configuration optionsletyoubettercontrol
第1章MySQL5.5介绍●7
---
## Page 22
8·第一部分MySQL5.5新特性篇
SUPER权限。
IOPS，即每秒的输人输出量（或读写次数）。
在一定程度上解决了这一问题。
（比如大批量INSERT）的时候，脏页刷新可能就会跟不上，导致性能下降。
20个插入缓冲，即使磁盘有能力处理更多的请求，也只会处理这么多，这样在更新量较大
手册：
1.1.3
tothes
说明：此参数支持动态改变，但需要
innodb_io_capacity参数默认是200，单位是页。该参数设置的大小取决于硬盘的
在MySQL5.1.X版本中，由于代码写死，因此最多只会刷新100个脏页到磁盘、合并
write
至于什么样的磁盘配置应该设置innodb_io_capacity参数的值是多少，大家可参考表1-1。
而在MySQL5.5.X版本里，
关于innodb_read_io_threads 和 innodb_write_io_threads参数的含义，请参见MySQL5.5
关于innodb_io_capacity参数介绍，请参见MySQL5.5手册：
SET GLOBALinnodb_io_capacity=2000;
另外，还可以动态调整该参数，如：
1/Othread9state:waitingforcompleted aiorequests(writethread)
1/0thread8state:waitingforcompletedaiorequests(writethread）
1/0 thread3state:waitingforcompleted aiorequests（read thread)
1/0threadOstate:waitingforcompleted aiorequests(insert bufferthread)
showengineinnodbstatus
1/0thread7state:waitingforcompletedaiorequests(write thread）
1/0thread6state:waitingforcompletedaiorequests(write thread）
l/Othread5state:waitingforcompletedaiorequests(readthread）
1/Othread4state:waitingforcompletedaiorequests(readthread）
l/Othread1state:waitingforcompletedaiorequests(logthread)
FILE1/O
提高刷新脏页数量和合并插入数量，改善磁盘I/O处理能力
asing
VO
，innodb_io_capacity参数可以动态调整刷新脏页的数量，这
more
har
th
表1-1磁盘配置与innodb_io_capacity参数值
innodb_io_capacity
50000
5000
2000
200
FUSION-IO
SAS*12RAID10
单盘SAS/SATA
磁盘配置
6
ngine
---
## Page 23
blocks区域，然后再移动到sublist of newblocks区域，并通过LRU最近最少使用算法来踢
数据时，如果缓冲区里有相应的数据则直接返回，否则会从磁盘读入缓冲区的sublistofold
问的数据—热数据)，一个是 sublist of old blocks 区域（不经常访问的数据)。当用户访问
1.1.5让InnoDB_Buffer_Pool缓冲池中的热数据存活更久
还没有写满时，也可以刷新一定的量。
根据重做日志ib_logfile生成的速度和刷新频率来将脏页刷入磁盘，这样重做日志ib_logfile
过大的磁盘I/O，innodb_adaptive_flushing会自适应刷新，它使用了一个全新的算法，以便
才会把InnoDB_Buffer_Pool的脏页刷人磁盘：
1.1.4
14.4.7.11.Controlling the MasterThread l/O Rate
each secondThis self-adapting algorithm is ableto deal with sudden changesin the workload.
InnoDBseitsogfilnaircularfhioneforereusingporionflogfilnDBfushediskalldirtybfferpoola
这个功能是在InnoDBPlugin中引人的。InnoDB刷新脏页的规则是在如下三种情况下
InnoDB_Buffer_Pool缓冲区有两个区域，一个是sublist of newblocks区域（经常被访
关于innodb_adaptive_flushing参数介绍，请参见MySQL5.5手册：
innodb_adaptive_flushing参数是默认开启的，可动态更新。
就会将脏页大批量地刷入磁盘，而这会对系统的整体性能造成不小的影响。为了避免
当写操作很频繁的时候，重做日志ib_logfile切换的次数就会很频繁，只要有一个写满
L
机器空闲的时候。
重做日志ib_logfile文件写满了以后。
增加自适应刷新脏页功能
lotofredoinforn
ated.
Based
allwritten
these
log
steepdipsin throughput,when excessivebufferpoolflush
how
sed
第1章MySQL5.5介绍·9
suchaat
oC-
---
## Page 24
10●第一部分MySQL5.5新特性篇
new blocks区域，这样就保证了 sublist of new blocks 区域里的数据不会马上被踢出。
据停留在sublist of old blocks区域innodb_old_blocks_time（微秒），然后再移动到sublist of
old_blocks_pct=50。
果很少时，则可以保持默认的 innodb_old_blocks_pct=37，或者设置得更大，比如innodb_
innodb_old_blocks_pct-5，使数据块进入少量 sublist of old blocks区域，并移动到 sublist of
大表，或者做MySQLdump时，就可以将innodb_old_blocks_pct设置得小些，例如，设置
blocks区域里的数据块时，并不是马上就移动到 sublist of newblocks区域，而是会先让数
newblocks区域，从而让更多的热数据不被踢出。当你访问一个小表，或者select查询结
sublist of old blocks区域的数量，默认是37，占整个缓冲池的比例为3/8。当全表扫描一个
的热数据“踢走”，这样就会造成缓冲区的数据进进出出，导致磁盘I/O频繁。
from tl，或者做一次MySQLdump，这时就会进人sublist of newblocks区域，把一些真正
出旧数据页。
在该过程中，还会涉及另一个参数innodb_old_blocks_time。在访问 sublist of old
所以从MySQL5.5.X版本开始，innodb_old_blocks_pct参数可以控制进人缓冲区
但是这其中也许会存在一个问题，
 young-making rate：移动到新区域的比例。
 non-youngs/s：每秒没有移动到新区域的有多少个页。
口youngs/s：每秒移动到新区域的有多少个页。
Pages made not young：没有移动到新区域的有多少个页。
口 Pages made young：移动到新区域的有多少个页。
口 Old database pages 23600：在旧区域存放着多少个页。
其中，状态信息如下所示：
/0 sum[43690]:cur[221], unzip sum[0]:cur[0]
LRU len:63920,unzip_LRUlen:0
Totalmemory allocated1107296256;in additionalpoolallocated0
Bufferpool size65535
ag
Dictionarymemoryallocated80360
D
D
reebuffersO
ufferpoolhitrate950/1000,young-makingrate30/1000not392/1000
32.37reads/s,3.40 creates/s,323.74writes/s
gesread486005,created3178,written160585
endingwritshlistnlea
ndingreads32
，假如有些 sql语句做统计用全表扫描，
，例如 select*
---
## Page 25
写性能。
这样就在很大程度上降低了I/O需求，刷脏页的频率降低了，从而极大地提高了InnoDB的
短，这也就意味着以后事务日志redolog最大可以设置为4GB（xtraDB可以超过4GB)，
需要40分钟或者更久（这依赖于BufferPool、脏页面比例、TPS等因素）。试想，如果每
这些故障都恢复了，另一个非常耗时的恢复就是InnoDB自己的恢复时间。
DBA的目标。
不期待它具有小型机+AIX的高可用性，但想尽一切办法缩短MySQL的不可用时间仍然是
次都能够把故障恢复时间控制在10分钟之内，那么通过应用容错、Cache支持等办法，用
1.1.6InnoDB的数据恢复时间加快
手册：
小，那么就应该增大innodb_old_blocks_time。
pct 或者减少 innodb_old_blocks_time。如果你进行了全表扫描，发现 non-youngs/s 的值很
户体验和可用时间都将有进一步的提升。
根据经验，主机OS 崩溃、硬件故障，仍然是影响MySQL可用性的最主要因素，如果
leave innodb_old_blocks_pct at its default value,or even higher,such as innodb_old_blocks_pct=50.
Whenscanning malltablesthatdofitintomemorythereislessoverhead formovingpagesaroundwithinthebufferpoolsoyoucan
关于innodb_old_blocks_pct 和 innodb_old_blocks_time参数的介绍，请参见MySQL5.5
accessbeforetheybecomeeligibletomovetothenewsublist.
firstaccess.Forexampleavalueof1oo0causesblockstostayin theold sublist for1secondafterthefirst
thevalueisgreaterthanO.blocksremainintheoldsublistuntilanaccessoccursatleastthatmanymsafterthe
immediatelytothenewsublistthefirsttimeitisaccessednomatterhowsoonafterinsertiontheaccessoccurs.lf
beforeitcanbemovedtothenewsublistThedefaultvalueisOAblockinsertedintotheoldsublistmoves
一般主机发生一次重启，正常大约需要小于5分钟的时间，但此时ImnoDB的恢复可能
在MySQL5.5版本里，通过算法和内存管理上的改进，做到了将故障恢复时间大大缩
一般情况下，MySQL/InnoDB 都是运行在普通的 PC Server+Linux（UNIX）上，虽然
如果你没有全表扫描，发现youngs/s 的值很小，那么就应该增大innodb_old_blocks_
young-making not rate：没有移动到新区域的比例。
ebuffer
第1章MySQL5.5介绍·11
---
## Page 26
12◆第一部分MySQL5.5新特性篇
进程，然后再启动MySQL，
有9百万条。
InnoDB和MySQL5.5InnoDBPlugin1.1.X，来一次破坏性实验，
MySQL5.1恢复的过程：
在MySQL5.5里，你无须任何操作即可实现快速恢复。
接着另开一个终端，执行 sleep 120;pkill-9MySQLd，让其运行2分钟后，强杀MySQL
首先来看看命令及参数，可以看到，其中有16个并发连接，最大请求1万个，表记录
实验前提：两台机器均为虚拟机，内存1GB，两台机器的参数设置一致。如下所示：
InnoDB:Doingrecovery:scanned uptolog sequence number 0368693760
InnoDB:Doingrecovery:scanneduptologsequencenumber0358208000
InnoDB:Doingrecovery:scanneduptologsequencenumber0352965120
InnoDB:Doingrecovery:scanneduptologsequencenumber0347722240
InnoDB:Doingrecovery:scanneduptologsequencenumber0342479360
InnoDB:Readingtablespaceinformationfrom the.ibd files..
InnoDB:Startingcrashrecovery.
12063021:19:20 InnoDB:Databasewasnot shut down normally!
InnoDB:Logscanprogressed past thecheckpoint Isn0337236631
12063021:19:19[Note]Plugin'FEDERATED'isdisabled.
12063021:19:19MySQLd_safeStartingMysQLd daemon withdatabasesfrom/usr/local/MysQL/data
-MySQL-socket=/tmp/MySQL.sockprepare
Sysbench--test=oltp --MysQL-table-engine=innodb
下面开始测试。
-oltp-table-size=9000000\
innodb_flush_log_at_trx_commit=0
innodb_buffer_pool_size=600M
innodb_log_buffer_size=16M
nn
innodb_log_files_in_group=3
innodb_log_file_size=300M
-MySQL-db=test\
-MySQL-password=123456\
-MySQL-user=root\
-MySQL-port=3306\
MySQL-host=127.0.0.1\
hoDB:Restoringpossiblehalf-writtendatapagesfrom thedoublewrite
num-threads=16\
max-requests=10000\
，下面来看看恢复的过程：
，验证一下恢复时间。
下面，针对MySQL5.1.59
---
## Page 27
333
7475767778798081828384858687888990919293949596979899
3435 36373839 40414243444546474849 50515253545556575859 6061626364 65 666768 6970717273
757
InnoDB:Doingrecovery:scanneduptologsequencenumber545415168
InnoDB:Doingrecovery:scanned uptologsequencenumber540172288
InnoDB:Doingrecovery:scanneduptologsequencenumber136470528
InnoDB:buffer...
InnoDB:Restoringpossiblehalf-writtendatapagesfromthedoublewrite
InnoDB:Reading tablespace informationfromthe.ibdfles..
InnoDB:Starting crashrecovery.
12063021:45:41InoDB:Databasewasnot shut down normally
120630 21:45:40InnoDB:highest supported fileformat is Barracuda.
120630 21:45:391
12063021:45:39MySQLd_safeStartingMySQLddaemonwithdatabasesfrom/usr/local/MysQL/data
MySQL5.5恢复的时间：
12063021:22:48[Note]Event Scheduler:Loaded0events
InnoDB:Progressinperents:01234567891011121314151617181920212223242526272829303132
12063021:46:03InnoDB:Startinganapplybatchoflogrecordstothedatabase..
InnoDB:Doingrecovery:scanneduptologsequencenumber146956288
InnoDB:Doingrecovery:scanned uptologsequencenumber141713408
120630 21:45:401
120630 21:45:391
120630 21:45:391
120630 21:45:391
12063021:45:39[Note]Plugin'FEDERATED'is disabled.
InnoDB:Doingrecovery:scanned uptologsequencenumber0997839360
InnoDB:Doingrecovery:scanneduptolog sequence number0767152640
s
InnoDB:Applybatchcompleted
12063021:20:03InnoDB:Startinganapplybatchof logrecordstothedatabase.
InnoDB:Doingrecovery:scanned uptologsequencenumber0756666880
12063021:45:39
12063021:22:48[Note]/usr/local/MySQL/bin/MySQLd:readyforconnections.
12063021:22:48InnoDB:Started;logsequencenumber0999899389
InnoDB:Applybatchcompleted
12063021:21:56InnoDB:Startinganapplybatchof logrecordstothedatabase
InnoDB:Doingrecovery:scanneduptologsequencenumber0999899389
：
InnoDB:
InnoDB:
InnoDB:
InnoDB:
InnoDB:
InnoDB:TheInnoDBmemoryheapisdisabled
：Completedinitializationofbufferpool
8:lnitialiingbufferpoolsize=600.M
：Mutexesandrw_locksuseInnoDB'sownimplementation
第1章MySQL5.5介绍·13
---
## Page 28
44 45 464748 4950 5152535455565758 59 60 61 6263 64 65 66 67 68 69 70717273747576777879 80 81828384
747576777879 80 818283848586878889 90919293949596979899
33 343536373839 40 41 42 43 4445 46 47 48 49 505152535455565758 59 60 616263 64 65 66 67 686970717273
74757677787980818283848586878889 90919293949596979899
33 34 3536 373839 40 41 42 43 44 45 46 47 48 49 50 5152 53 54 55 56 5758 59 60 61 62 63 64 6566 67 68 69 70717273
·第一部分MySQL5.5新特性篇
14.4.7.16.lmprovements toCrashRecoveryPerformance
己的情况来测试。
果涉及的因素有很多，比如，Buffer Pool、脏页面比例、TPS等，实际操作时，需要根据自
8687888990919293949596979899100
关于加快InnoDB的恢复时间，请参见MySQL5.5手册：
InnoDB:Progressinpercents:01234567891011121314151617181920212223242526272829303132
从上面的结果来看，MySQL5.5恢复的时间要比MySQL5.1快两倍多。当然，这个结
3分28秒
2345678910111213141516171819202122232425262728293031323334353637383940414243
InnoDB:Applybatchcompleted
MySQL5.1恢复时间
再来看看两个版本各自的恢复时间：
InnoDB:Rollingbackof trxid424completed
12063021:47:21 InnoDB:Rollingback trx with id424,7621rowsto undo
InnoDB:Applybatchcompleted