口
密码
用户名
主机名
参数
实时获取连接参数
MySQL另外还提供了两个与服务器连接建立有关的选项：用于指定连接协议（如
--socket=socket_name
--port=port_num
--password 或--password=your_pass
--user=user_name
--host=host_name
长选项形式
7.3
出错处理和命令选项处理
-S socket_name
-p或-pyour_pass
-uu
-hhost_name
user_name
短选项形式
239
---
## Page 260
文件。）假设此文件有如下所示的内容：
文件，该文件的[client]选项组里必须有某些选项。（在Windows 系统里，可以使用c：\my.cnf
之
240
后，它再一次对参数数组进行了输出。
出。首先，当这些参数在命令行进行指定时，程序输出了它们。接着，在调用load_defaults（）
如果想看load_defaults（）的工作情况，则必须确保你的主目录里有一个名为.my.cnf 的
arg 0:./show_argv
Original argument vector:
%./show_argvab
然后，执行show_argv应该会得到如下所示的输出结果：
arg
host=some_host
password=secret
为展示load_defaults（）对参数数组的影响，show_argv 程序分两次对其参数进行了输
user=sampadm
[client]
MY_INIT（）。它是一个初始化宏，我们之前用过它。这里要强调的重点是，MY_INIT（）
这段选项文件处理代码包含了以下几个部分。
main (int argc, char *argv[])
static const char *client_groups[] = { "client", NULL };
口
inti;
int
#include 
#include 
#include
exit (0);
printf ("Modified argument vector:\n");
load_defaults （"my",client_groups,&argc,&argv);
MY_INIT (argv[0]);
printf ("original argument vector:\n");
仍然要传递&argv，即该指针的地址。
load_defaults（)需要更改它们的值。特别是对于 argv，虽然它已经是一个指针，但你
址。请注意，不要直接传递计数器和向量的值。要传递它们的地址，因
是"my"）、列出你所感兴趣的那些选项组名的数组，以及程序的参数计数器和向量的地
load_defaults（）。它用于读取选项文件，有4个参数：选项文件名的前缀（它应该一直
会调用my_init（）来完成load_default（)要求的某些设置工作。
必须是 NULL，以此表明列表到此为止。
的是选项组[client]），不过你可以根据需要列出多个选项组。此数组的最后一个元素
件组的名字。一般情况下，客户端程序至少应该把"client"包含在这个列表里（它代表
printf ("arg %d: %s\n", i, argv[i]);
printf ("arg %d: %s\n", i, argv[i]);
第7章用C语言编写MySQL程序
用于存放可以从中获得选项的那些选项文
为
---
## Page 261
项文件的最后，所以它的host设置会最后出现在参数向量里，并因此获得优先。
点：选项组[client]和[show_argv]都指定了host选项，但因为[show_argv]选项组位于选
程序的特有值会获得比[client]组里的通用值更高的优先级。从刚才的示例里可以看到这一
指定程序特有的选项组。采用这种方式之后，如果你在两个选项组里都指定了某个选项，那么
client_groups[]数组里的顺序。这意味着，你可能会想要在选项文件里的[client]组的后面
一点，可以在你的~/.my.cnf文件里增加一个[show_argv]选项组：
项。此时，需要先在show_argv.c里找到下列代码：
他选项组里的选项。假设，想让show_argv读取选项组[client]和[show_argv]里的各个选
各选项文件里通用的客户端设置）。但是，你也可以建立自己的选项文件处理代码，以便获得其
息请参考F.2.2节。）
样，是因为load_defaults（)实际上会在多个位置查找选项文件。（更多与这些位置有关的信
出现这种情况，你应该能够在某个系统级选项文件的[client]选项组里找到它们。之所以会这
为参数列表的一部分。你还可能会看到一些未在命令行和~/.my.cnf 文件里指定的选项。如果
load_defaults（）函数不会通过环境设置获得值。如果需要用到环境变量（如
各个选项值在参数数组里的先后顺序，取决于它们在选项文件里的顺序，而非选项组名在
然后，重新编译 show_argv。这个修改后的程序将会从两个选项组里读取选项。为验证这
使用load_defaults（）的客户端程序，通常都会在选项组列表里包含"client"（以便获得
arg6:
arg
arg
arg
arg
arg2:
arg
arg0:
Original argument
8./show_argvab
有了这些修改之后，
host=other_host
host=some_host
user=sampadm
[client]
const char *client_groups[]=
接着，将其更改为下面这个样子：
const char *client_groups[]={"client",NULL };
arg0:
[show_argv]
在show_argv第二次输出参数向量时，从上面的显示效果来看，选项文件里的那些值已成
arg5:b
arg
arg
arg
arg
arg
Modified argument vector:
1:
2:
1:
4:
3：
1:--user=sampadm
0：
6
--password=secret
./show_argv
--host=other_host
-host=some_host
--user=sampadm
-host=some_host
/show_argv
vector
，再次调用show_argv，便会产生与之前不一样的结果：
"show_argv",
"client",NULL};
7.3出错处理和命令选项处理
241
---
## Page 262
是通过命令行)；也可以把那些用于连接MySQL服务器的参数值都显示出来，让你看到最终结
handle_options（)来处理结果。
个程序会调用1oad_defaults（），以便读取选项文件和设置参数向量，然后会使用
要一种处理向量的方法。handle_options（）函数就是专门为此设计的。它是MySQL客户端开
7.3.2.2
load_defaults（)或者处理命令行选项之前（而不是之后），对环境变量进行检查。
值。如果你想在自己的程序里检查环境变量，并且想与上述惯例保持一致，那么请在调用
MySQL相关的环境变量的值进行检查”：
里并不打算把此项功能添加到我们的客户端里，
MYSQL_TCP_PORT 或 MYSQL_UNIX_PORT） 的值,
242
删除密码。具体做法请参考7.3.2.2节。
不是个好主意。为降低风险，程序可以采取的预防措施是，它一开始执行，就从参数列表里
自己分配的内存区域。这个区域并不是原来那个向量的一部分，因此ps 程序绝对看不到它
因为 ps 程序只显示 argv [] 的最初内容。 由 load_ defaults ()创建的密码参数，将指向它
否会提取它在选项文件里找到的密码，并把它们放在参数列表里。这一点其实并不是个问题，
的）的参数列表显示出来。正因如此，你可能会担心，load_defaults()的进程嗅探功能是
show_opt 程序可以让你体验到各种不同的指定连接参数的方法（不管是通过选项文件，还
为向大家演示如何使用 MySQL的选项处理机制，本节将会对show_opt 程序进行讲解。
客户端开发库的选项处理例程有以下几个特点。
利用load_defaults（），我们便可以把所有的连接参数都放到参数向量里，但是我们还需
口精确规范了合法值的选项类型和取值范围。例如，你不仅可以指明某个选项必须为-
另一方面，在命令行上给出的密码确实会被 ps 程序显示出来，所以在命令行指定密码
在标准MySQL客户端程序里，环境变量值的优先级要低于通过选项文件或命令行指定的
口
口
if ((p = getenv
if ((p= getenv("MYSQL_TCP_PORT")）1= NULL)
char *socket_name = NULL;
int port_num = 0;
extern char *getenv();
 在多用户系统上，像 ps 程序这样的实用工具，能够把任何进程（包括其他用户所运行
socket_name=p;
F.2节。）
型选项和可忽略型选项更易实现。
支持标准的选项前缀，如--disable-、
--defaults-extra-file的内建支持。更多相关信息请参考F.2.2节。
提供了对标准选项--no-defaults、--print-defaults、
数即可。你不用再自己编写代码来产生帮助消息。
集成了帮助文本。如此一来，输出帮助消息的操作变得更加简便，只需调用标准库函
个整数值，而且还可以指明它必须是一个正整数，且是1024的倍数。
2处理命令行参数
第7章用C语言编写MySQL程序
("MYSQL_UNIX_PORT")）!=NULL)
1oad_defaults（）与安全性
（本章没有用到这个功能，更多相关信息请参考
--enable-和--loose-，从而使布尔（开/关）
不过下面这一小段代码演示了“如何对两个
：则必须使用getenv（）函数自已动手实现。这
--defaults-file和
这
---
## Page 263
和参数向量里最后剩余的内容。
后的最终向量。
的选项处理代码与实际连接服务器的代码挂接起来。
果。show_opt 程序能帮助大家初步了解下一个客户端程序connect2的处理过程，它会把这里
（4）调用选项处理例程handle_options（)来处理参数向量，然后输出最终的连接参数值
get_one_option (int optid, const struct my_option *opt, char *argument)
static const char *client_groups[] ={"client", NULL };
#include 
在对 show_opt 的工作流程做出解释说明之前，先来看一下它的源文件一
(3）调用load_defaults（)来改写参数向量，以便反映出选项文件的内容，然后输出修改
为说明在参数处理的各个阶段都发生了哪些事情，show_opt程序将执行下面几个动作。
static my_bool
static char *opt_socket_name=NULL;
static
static
static char *opt_host_name= NULL;
#include
#include
#include
（2）车
（1）把主机名、用户名、密码和其他连接参数初始化为默认值。
switch (optid)
（NULL, O,NULL, NULL, NULL, NULL, GET_NO_ARG, NO_ARG,O,O,O,O,O,0)
(uchar **)&opt_socket_name,NULL,NULL
GET_UINT,REQUIRED_ARG,
("port",
(uchar **) &opt_host_name, NULL, NULL,
("host",
("help",
handle_options（）来演示选项的处理过程
show_opt.c-使用load_defaults（）和
(uchar
TNO_AR
输出原始的连接参数值和参数向量值。
char
char
unsigned intopt_port_num
PI
*opt_user_name = NULL;
'S',"Socket path",
NULL,
"Portnumber",
d：
"Display this help and exit",
"User name
"Password"
0,0,0，0,0，01，
0：
0，0,0
0；
/*选项信息结构*/
1*套接字名（使用内建值）
/*服务器主机（默认为localhost）*/