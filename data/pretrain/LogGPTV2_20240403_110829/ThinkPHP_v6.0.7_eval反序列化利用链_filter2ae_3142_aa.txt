# ThinkPHP v6.0.7 eval反序列化利用链
* * *
## 0x00 前言
最近分析了不少的 ThinkPHP v6.0.x 反序列化链条，发现还蛮有意思的，但美中不足的是无法拥有直接调用形如 `eval`
的能力。于是就自己就在最新的(目前是 ThinkPHP v6.0.7)版本上基于原有的反序列化链，再挖了一条能够执行 `eval` 的。
* * *
## 0X01 利用条件
  * 存在一个完全可控的反序列化点。
## 0x02 环境配置
直接使用 `composer` 安装 `V6.0.7` 版本的即可。
    -> composer create-project topthink/think=6.0.7 tp607
    -> cd tp607
    -> php think run
修改入口 **app/controller/Index.php** 内容，创造一个可控反序列化点：
## 0x03 链条分析
这里还是由 **ThinkPHP v6.0.x** 的入口进入。
在 `Model` 类 `(vendor/topthink/think-orm/src/Model.php)` 存在一个 `__destuct`
魔法方法。当然 `Model` 这玩意是个抽象类，得从它的 **继承类** 入手，也就是 `Pivot` 类 `(vendor/topthink/tink-orm/src/model/Pivot.php )` 。
    abstract class Model implements JsonSerializable, ArrayAccess, Arrayable, Jsonable
    {
        /**
         * ......
         */
        public function __destruct()
        {
            if ($this->lazySave) {
                $this->save();
            }
        }
    }
    class Pivot extends Model
    {
        /**
        * ......
        */
    }
我们先让 `$this->lazySave = true` ，从而跟进 `$this->save()` 方法。
    // abstract class Model implements JsonSerializable, ArrayAccess, Arrayable, Jsonable{}
    public function save(array $data = [], string $sequence = null): bool
    {
            // 数据对象赋值
        $this->setAttrs($data);
        if ($this->isEmpty() || false === $this->trigger('BeforeWrite')) {
            return false;
        }
        $result = $this->exists ? $this->updateData() : $this->insertData($sequence);
         /**
         * ......
         */
    }
其中 `$this->setAttrs($data)` 这个语句无伤大雅，跟进去可以发现甚至可以说啥事也没做。
    // abstract class Model implements JsonSerializable, ArrayAccess, Arrayable, Jsonable{}
    public function setAttrs(array $data): void
    {
            // 进行数据处理
        foreach ($data as $key => $value) {
            $this->setAttr($key, $value, $data);
        }
    }
那么我们这里还需要依次绕过 `if ($this->isEmpty() || false ===
$this->trigger('BeforeWrite'))` 中的两个条件。跟进 `$this->isEmpty()` 以及
`$this->trigger('BeforeWrite')` ，我们发现 `$this->data` 要求不为 `null` ，且
`$this->withEvent == true` 。
    // abstract class Model implements JsonSerializable, ArrayAccess, Arrayable, Jsonable{}
    public function isEmpty(): bool
    {
        return empty($this->data);
    }
    // trait ModelEvent{}
    protected function trigger(string $event): bool
    {
        if (!$this->withEvent) {
            return true;
        }
        /**
        * ......
        */
    }
此时， `$this->isEmpty()` 返回 `false` ，`$this->trigger('BeforeWrite')` 返回 `true`
。我们顺利进入下一步 `$result = $this->exists ? $this->updateData() :
$this->insertData($sequence);` 。我们在上边可以发现 `$this->exists` 的默认值为 `false`
，不妨直接跟进 `$this->insertData($sequence)` ，其中 `sequence = null`。
    // abstract class Model implements JsonSerializable, ArrayAccess, Arrayable, Jsonable{}
    protected $exists = false;
    protected function insertData(string $sequence = null): bool
    {
        if (false === $this->trigger('BeforeInsert')) {
            return false;
        }
        $this->checkData();
        $data = $this->writeDataType($this->data);
        // 时间戳自动写入
        if ($this->autoWriteTimestamp) {
            /**
            * ......
            */
        }
        // 检查允许字段
        $allowFields = $this->checkAllowFields();
        /**
        * ......
        */
    }
显然，`$this->trigger('BeforeInsert')` 的值在上边已经被我们构造成了 `true` 了，这里继续跟进
`$this->checkData()` 以及 `$data = $this->writeDataType($this->data)`
。`$this->checkData()` 直接可以略过，而传入 `$this->writeDataType()` 的参数 `$this->data`
在上边已经被我们构造成一个 `非null` 的值，这里不妨将其构造成 `[7]` ，由于 `$this->type` 的值默认为 `[]`
，这里的遍历是没有影响的。
    trait Attribute
    {
        protected $type = [];
    }
    // abstract class Model implements JsonSerializable, ArrayAccess, Arrayable, Jsonable{}
    protected function checkData(): void
    {
    }
    protected function writeDataType(array $data): array
    {
        foreach ($data as $name => &$value) {
            if (isset($this->type[$name])) {
                // 类型转换
                $value = $this->writeTransform($value, $this->type[$name]);
            }
        }
        return $data;
    }
至于 `$this->autoWriteTimestamp` 的默认值是没有的，相当于 `null` ，这里直接用 **弱类型比较** 直接略过。
    trait TimeStamp
    {
        protected $autoWriteTimestamp;
    }
此时，我们来到 `$allowFields = $this->checkAllowFields()` ，其中 `$this->field` 和
`$this->schema` 的默认值都为 `[]` ，因而可以直接来到 `else{`。
    trait Attribute
    {
        protected $schema = [];
        protected $field = [];
    }
    // abstract class Model implements JsonSerializable, ArrayAccess, Arrayable, Jsonable{}
    protected function checkAllowFields(): array
    {
        // 检测字段
        if (empty($this->field)) {
            if (!empty($this->schema)) {
                $this->field = array_keys(array_merge($this->schema, $this->jsonType));
            } else {
                $query = $this->db();
                $table = $this->table ? $this->table . $this->suffix : $query->getTable();
                $this->field = $query->getConnection()->getTableFields($table);
            }
            return $this->field;
        }
        /**
        * ......
        */
    }
那么，继续跟进 `$this->db` ，来到了 **关键点** ，第一句 `$query = ...` 可以直接跳过，而在
`$query->table($this->table . $this->suffix)` 这里存在熟悉的字符拼接。这样只需要让
`$this->table` 或 `$this->suffix` 为一个 **类** 就可以触发那个 **类** 的 `__toString` 魔法方法了。
    // abstract class Model implements JsonSerializable, ArrayAccess, Arrayable, Jsonable{}
    public function db($scope = []): Query
    {
        /** @var Query $query */
        $query = self::$db->connect($this->connection)->name($this->name . $this->suffix)->pk($this->pk);
        if (!empty($this->table)) {
            $query->table($this->table . $this->suffix);
        }
        /**
        * ......
        */
    }
简单总结一下，要触发 `__toString` 需要构造：
  * `$this->lazySave` = `true`
  * `$this->data` = `[7]`
  * `$this->withEvent` = `true`
至于 `__toSring` 魔法方法的类，我们这里选择 `Url` 类
`(vendor/topthink/framework/src/think/route/Url.php)` ，首先第一个条件 `if (0 ===
strpos($url, '[') && $pos = strpos($url, ']'))` 需要绕过，第二个条件 `if (false ===
strpos($url, '://') && 0 !== strpos($url, '/'))` 需要满足最上部分，并使得 `$url` 的值为 `''`。
    class Url
    {
        public function __toString()
        {
            return $this->build();
        }
        public function build()
        {
            // 解析URL
            $url     = $this->url;
            $suffix  = $this->suffix;
            $domain  = $this->domain;
            $request = $this->app->request;
            $vars    = $this->vars;
            if (0 === strpos($url, '[') && $pos = strpos($url, ']')) {
                // [name] 表示使用路由命名标识生成URL
                $name = substr($url, 1, $pos - 1);
                $url  = 'name' . substr($url, $pos + 1);
            }
            if (false === strpos($url, '://') && 0 !== strpos($url, '/')) {
                $info = parse_url($url);
                $url  = !empty($info['path']) ? $info['path'] : '';
                if (isset($info['fragment'])) {
                    // 解析锚点