    *   **第 2 行**:定义**集群角色**实例的创建
    *   **第 4 行**:给我们的**集群角色**实例命名
    *   **第 6 行**:允许访问所有 API 组
    *   **7 号线**:允许进入所有 Pod 
    *   **第 8 行**:进入动作**获取**、**手表**和**列表**
    我们将使用以下命令创建**集群角色**:
    忽必烈 create -f clusterRole.yaml
5.  The next step is to create a cluster role binding. The binding links the role to a user or a group. This is provided in the **clusterRoleBinding.yaml** file:
    1 版本:rbac.authorization.k8s.io/v1
    2 个孩子:群集角色绑定
    3 元数据:
    4 名称:readOnlyBinding
    5 个角色:
    6 个孩子:群集角色
    7 名称:只读
    8 ApiGroup:RBAC . authorization . k8s . io
    9 个主题:
    10 种:团体
    11 ApiGroup:RBAC . authorization . k8s . io
    12 名称:“”
    让我们仔细看看这个文件:
    *   **第 2 行**:定义我们正在创建一个**集群角色绑定**实例。
    *   **第 4 行**:给**集群角色绑定**起一个名字。
    *   **第 5-8 行**:参考上一步创建的**集群角色**对象
    *   **第 9-12 行**:参考你在 Azure AD 的群。确保将*第 12 行*上的**T6 组号>T3 替换为您之前获得的组号。**
    我们可以使用以下命令创建**集群角色绑定**:
    多维数据集创建-f 群集 RoleBinding.yaml
6.  Next, you'll create a role that is limited to the **delete-access** namespace. This is provided in the **role.yaml** file:
    1 版本:rbac.authorization.k8s.io/v1
    2 类:角色
    3 元数据:
    4 名称:删除角色
    5 命名空间:删除-访问
    6 条规则:
    7 - apiGroups: [""]
    8 资源:[“pods”]
    9 个动词:["删除"]
    该文件类似于早期的**集群角色**对象。有两个有意义的区别:
    *   **第 2 行**:定义您正在创建一个**角色**实例，而不是**集群角色**实例
    *   **第 5 行**:定义创建该角色的命名空间
    您可以使用以下命令创建**角色**:
    kubi KL create-f role . YAML 角色
7.  Finally, you will create a **RoleBinding** instance that links our user to the namespace role. This is provided in the **roleBinding.yaml** file:
    1 版本:rbac.authorization.k8s.io/v1
    2 种:角色绑定
    3 元数据:
    4 名称:删除绑定
    5 命名空间:删除-访问
    6 个角色:
    7 类:角色
    8 名称:删除角色
    9 ApiGroup:RBAC . authorization . k8s . io
    10 个主题:
    11 类:用户
    12 ApiGroup:RBAC . authorization . k8s . io
    13 名称:“”
    该文件类似于早期的**集群角色绑定**对象。有几个有意义的区别:
    *   **第 2 行**:定义创建一个**角色绑定**实例，而不是**集群角色绑定**实例
    *   **第 5 行**:定义这个**角色绑定**实例创建的命名空间
    *   **第 7 行**:指常规角色，而不是**集群角色**实例
    *   **第 11-13 行**:定义用户而不是组
    您可以使用以下命令创建**角色绑定**:
    多维数据集创建-f roleBinding.yaml
这就完成了对 RBAC 的要求。您已经创建了两个角色— **集群角色**和一个名称空间绑定角色，并设置了两个**角色绑定**对象— **集群角色绑定**和名称空间绑定**角色绑定**。在下一节中，您将通过以新用户身份登录群集来探索 RBAC 的影响。
## 为用户验证 RBAC
为了验证 RBAC 是否按预期工作，您将使用新创建的用户登录到 Azure 门户。在新浏览器或 InPrivate 窗口中转到[https://portal.azure.com](08.html)，并使用新创建的用户登录。系统会立即提示您更改密码。这是 Azure AD 中的一项安全功能，可确保只有该用户知道自己的密码:
![Prompt asking the user to update their password](img/B17338_08_19.jpg)
图 8.19:您将被要求更改密码
更改密码后，您可以开始测试不同的 RBAC 角色:
1.  You will start this experiment by setting up Cloud Shell for the new user. Launch Cloud Shell and select Bash:
    ![Selecting Bash as Cloud Shell](img/B17338_08_20.jpg)
    图 8.20:在云外壳中选择 Bash
2.  In the next dialog box, select Show advanced settings:
    ![Clicking the Show advanced settings button](img/B17338_08_21.jpg)
    图 8.21:选择显示高级设置
3.  Then, point Cloud Shell to the existing storage account and create a new file share:
    ![Pointing Cloud Shell to the existing storage account and creating a new file share](img/B17338_08_22.jpg)
    图 8.22:指向现有存储帐户并创建新的文件共享
4.  Once Cloud Shell is available, get the credentials to connect to the AKS cluster:
    az aks get-凭证-n hand onaks-g rg-hand onaks
    然后，在 **kubectl** 中尝试一个命令。让我们尝试获取集群中的节点:
    kubectl 获取节点
    由于这是针对启用 RBAC 的群集执行的第一个命令，因此要求您再次登录。浏览[https://microsoft.com/devicelogin](08.html)，提供云壳给你看的代码(该代码在*图 8.24* 中高亮显示)。请确保您使用新的用户凭据在此登录:
    ![Entering the code Cloud Shell showed us in the prompt](img/B17338_08_23.jpg)
    图 8.23:复制并粘贴提示中显示的代码 Cloud Shell
    登录后，您应该会收到来自 **kubectl** 的**禁止**错误消息，通知您没有权限查看集群中的节点。这是意料之中的，因为用户被配置为只能访问 pods:
    ![The Forbidden error message from kubectl](img/B17338_08_24.jpg)
    图 8.24:要求您登录的提示和禁止消息
5.  Now you can verify that your user has access to view pods in all namespaces and that the user has permission to delete pods in the **delete-access** namespace:
    kubectl get pods -n 禁止访问
    kubectl get pods -n delete-access
    这对于两个名称空间都应该成功。这是由于为用户组配置了**集群角色**对象:
    ![Output confirming access to view pods in both namespaces](img/B17338_08_25.jpg)
    图 8.25:用户可以访问两个名称空间中的视图窗格
6.  Let's also verify the **delete** permissions:
    kubectl 删除 pod - all -n 禁止访问
    kubectl 删除 pod - all -n 删除-访问
    不出所料，这在**非访问**命名空间中被拒绝，而在**删除访问**命名空间中被允许，如*图 8.26* 所示:
![Output verifying the user is not able to delete resources in the no-access namespace, but is able to delete resources in the delete-access namespace](img/B17338_08_26.jpg)
图 8.26:在无访问命名空间中拒绝删除，在删除访问命名空间中允许删除
在本节中，您已经在 Kubernetes 集群上验证了 RBAC 的功能。由于这是本章的最后一节，让我们确保清理集群中的部署和名称空间。请确保使用您的主要用户而不是新用户从 Cloud Shell 执行这些步骤:
忽必烈删除 f 蓝票 yaml -n 禁止进入
kube CTL delete-f azure-vote . YAML-n delete-access
kubectl delete -f .
kubectl 删除 ns 不可访问
kubectl delete ns delete-access
RBAC 在 AKS 上的概述到此结束。
## 总结
在这一章中，你在 AKS 上了解了 RBAC。您启用了 Azure AD–将 RBAC 集成到您的群集中。之后，您创建了一个新的用户和组，并在集群上设置了不同的 RBAC 角色。最后，您使用该用户登录，并能够验证所配置的 RBAC 角色是否为您提供了对您期望的群集的有限访问权限。
这涉及用户如何访问您的 Kubernetes 集群。在您的集群上运行的 pods 可能还需要 Azure AD 中的一个标识，它们可以使用该标识来访问 Azure 服务中的资源，例如 Blob 存储或密钥库。在下一章中，您将了解关于这个用例的更多信息，以及如何使用 AKS 中的 Azure AD pod 标识来设置这个用例。