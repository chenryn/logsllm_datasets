F = GF (31337)
g = F (5)
y = F (15676)
# Baby step Giant Step algorithm, general , with O (n**1/2) space and tine
x = bsgs (g, y, (0, 31336) , operation='*)
complexity.
# Automatic selection of bsgs or Pohlig He11man algorithm, high
efficiency vhen the modulus has no large prime factors. The time
complexity is O (p**1/2) .
# p is the maximum prine factor of the modulus
x = discrete_log (y, g, operation='*)
# Pollard rho algorithn, which requires the order of the modulo p
multiplicative group to be pzime. The time complexity is 0 (n**1/2) 
x = discrete_log_zho (y, g. operation=′*)
# The Pollard Lambda algorithm is more efficient when it is possible to
detezmine the range of the target value .
x = discrete_log_lambda (y, g, (5000, 60oo) , operation=*+*)
# In the case of elliptic curves, just replace operation with addition.
E = E11ipticCurve (k, [123, 234])
k .  = GF (31337)
P = E ( [233, 18927])
Q = E( [1926 , 3590] ]
n = bsgs (P, Q, (0, 31336) , operation=′+1)
# bsgs
# bsgs or Poh1ig He11man
x = discrete_log (Q, P, operation=′+)
7.6Other Common Cryptography Applications
7.6.1Diffie-HellmanKey Exchange
The Diffie-Hellman (DH) key exchange is a secure protocol that allows a symmetric
key to be negotiated over an insecure channel in the absence of any prior common
knowledge between the two parties. The algorithm was proposed in 1976 by Bailey
---
## Page 616
604
7 Crypto
Whitfield Diffie and Martin Edward Hellman, and its cryptographic security is based
on the difficulty of solving the discrete logarithm problem.
The DH key exchange algorithm proceeds as follows: suppose Alice and Bob
communicate secretly and need to negotiate a key. First, both parties choose a prime
number p and a generator g of the multiplicative group modulo p, which can be sent
over an insecure channel. For example, choose p = 37 and g = 2. Alice chooses a
secret integer α and computes A = g” mod p then sends it to Bob. For example, for
α = 7, A = 2” mod 37 = 17. Similarly, Bob chooses a secret integer b and
computes B = ga mod p then sends it to Alice. For b = 13, B = 23mod
37 = 15. At this point, Alice and Bob can jointly derive the key.
 = A² mod p = B" mod p = g mod p
In this case, k = 1713 mod 37 = 15?mod 37 = 213 × 7mod 37 = 35.
If there is an adversary who can intercept allthe information but cannot modify it,
then since the adversary only knows A, B, g, and p, but not α and b, it cannot obtain
Jo somnoyp pue spoau au 'gso roygo sanduoo 1! ssaqun ox poeoau o
computing discrete logarithms have already been described and will not be
repeated here.
However, if a stronger adversary can also modify the information, it can attack
the DH key exchange process.
The DH man-in-the-middle attack proceeds as follows: Eve, the man-in-the-
middle, obtains p and g, e.g-, p = 37, g = 2, and now Alice is about to send A to
Bob. At this point, Eve intercepts A, selects a random number , and forwards
E = g° mod p to Bob. e.g., if e1 = 6 is selected, then E = 2° mod 37 = 27.
When Bob sends B to Alice, Eve repeats the above steps, selecting the random
number e2, and replaces B withE2 = g: mod pto send to Alice. e.g., if e = 8, then
E = 2a mod 37 = 34.
At this point, Alice calculates the key
k = E mod p = g""mod p = A°mod p
And Bob calculates the key as
k = E mod p = gmod p = Bmod p
Eve knows A, B, e, e and naturally can calculate k and k. When Alice sends an
encrypted message to Bob, Eve intercepts the message, decrypts it with k to obtain
the plaintext, and then encrypts the plaintext with k and forward it to Bob, who can
the key exchange. The same is true when Bob sends a message to Alice. In this way,
use k to decrypt the message normally, i.e., he doesn’t know what happens during
Eve can control the entire session.
---
## Page 617
7.6 Other Common Cryptography Applications
605
7.6.2HashLengthExtensionAltack
Hash functions are methods for mapping arbitrary bits of information to message
digests of the same bit size. Good Hash Functions are often used for message
authentication because they are irreversible and highly collision resistant. Since
the algorithm of the hash function is public, it is not safe to use the hash function
alone, and an attacker can create a large database of data-hash values to perform
dictionary attacks. To avoid this, a hash function in the form of H(salt I message) is
usually chosen, where the message is preceded by a fixed salt and then hashed.
 ) psn s ge y  (p)    m
SHA1, etc.), and the length of the key is known and the message can be controlled,
it is vulnerable to a hash length extension attack.
The feature of MD hash function is that all messages are calculated by filling them
with a 1 bit and several 0 bits until the binary digits length is equal to 512x+448, and
finally a 64bit number is concatenated to represent the length of the original
message. Besides, the MD hash function calculates by blocks, and the intermediate
value of each block becomes the initial vector for the next block. It is easy to see that
if we know an intermediate value and the current length, we can attach other
messages and padding bytes, and then use the intermediate value to keep computing
and get the final hash value. This is how the hash length extension attack works.
For example, consider the following hash value, assuming hello is the unknown 
salt and world is the controllable data
PTxonoTToq, = 6e >> hash1ib .md5 (msg) .hexdigest ()
fc5e038d38a57032085441e7fe7010b0
From this hash value, the four register values of MD5 are obtained.
AA = 0x8d035efc
BB = 0x3270a538
CC = 0xe7415408
DD = 0xb01070fe
Since the padding scheme of the MD5 algorithm is known, we can compute the
value of the padded message. Assuming that a new message GG is attached, we can
calculate the message after attaching the new message and then calculate the hash
value of the new message.
oed·onxe + >> hash1ib md5 (nev_msg) . hexdigest ()
'bf566502840a5c2b9514217e9b2e5c59
---
## Page 618
606
7Crypto
Data:
5
Fig, 7.28 An example of using HashPump
Now use hash length expansion to calculate the hash of the new message from the
previous hash value. First, calculate the padding of the new message block and
assemble the new block.
ed qon.xqs + ( (uSo) uaT - L - 8 / 8+) + 0ox\. + ogx\, = Burppedxau >> nev_b1ock = *GG* + nev_padding
('>> md5 (AA, BB, CC, DD, nev_b1ock)
bf566502840a5c2b9514217e9b2e5c59'
Due to space limitations, the code for the MD5 algorithm is omited here and if
you are encouraged to complete it on your own.
When using this attack methoxd, we do not care about the specific content of the
message that was originally hashed, but only the length of the original message, i.e.,
the length of the salt I message in the actual application. Since message is often a
user-controlled value, as long as the length of the server-side salt is known, the hash
s 1 uo o sou a s nes o ss om e yoee osx qiu
possible to brute force.
Currently, there is a well-established tool for hash length extension aftack,
HashPump, which is an open source software and available on GitHub at https://
github.com/bwal/HashPump
An example of using HashPump is shown in Fig. 7.28. Enter the known hash
value, the data, the length of the salt (key), and the data you want to add, and the two
output lines are the new hash value and the new data.
---
## Page 619
7.6 Other Common Cryptography Applications
607
7.6.3Shamir'sThresholdScheme
The Shamir′s threshold scheme (Shamir’s Secret Sharing) is a secret-sharing scheme
that was proposed by Shamir and Blackly in 1970. The scheme is based on Lagrange
interpolation, and exploits the property that a k-th polynomial only needs to have
k equations to solve all the coeficients, and develops an algorithm to divide the
secret into n shares, and recover the secret as long as one knows k shares (k ≥ n).
Suppose that & shares are needed to recover the secret message m. Select k-1
random numbers α), "', a and a large prime p (p > m) to form the following
modulo-p polynomial.
f(x) = m + ax + ax² + - + at1x1 mod p
Choose n integers x at random and substitute them into the above equation to get
n numbers (x1, f(x)), (x2, f(x)), , (x, f(x,), which are the n shares of the
secret message.
To recover the secret message, we only need & shares, and we can obtain the
secret message m by associating the above equations and using Lagrange interpola-
tion or matrix multiplication.
Currently, the common implementation of Shamir’s threshold scheme in CTF
and engineering is the SecretSharing library, the Python version of which is
implemented at https://github.com/blockstack/secret-sharing. The following is the
basic usage of the library.
For example, we divide the plaintext secret into 5 parts, and hold 3 parts to get the
secret:
>>> fron secretsharing inport PlaintextToHexSecretSharer
>>> shares = PlaintextToHexSecretSharer . split_secret ( 'the quick browm
fox jumps ovez the lazy dog' , 3, 5)
>>> shares
['1 -5ebbc6 84f4163392dc727eb7e899bcd3eea45fee00228f63355b50a731b8
c4b42bd005eddf597d91'
2 -cb31cd23956e373cee0576bbf6c2a4eaaa308630780d57290b977a2830d1
3619c2ce9ae2e59678271,
'3-456213dbf30c3053aa53d2ce98c5a56c5bac97ece31d01f125fae7a68070
7f626153a737c8bb3667',
14 -cd4c9aae0cf01ed7115d92efcea2be590318952341518fbb848599222096
a08e075f2aec88c7b8871,
15 -62f16199e31a02c72322b71f9859efb0a0747dd392ab008827378e9b1143
999cb4f1260125bbfe51']
The recovery operation is as follows, using the first three copies to recover.
the quick bzown fox jumps over the lazy dog 
>> PlaintextToHexSecretSharer ,recover_secret (shares [0: 3] )
---
## Page 620
608
7Crypto
7.7Summary
In the current CTFs, most cryptography challenges is provided with source code in
Python or other languages and some related information for the participants to
analyze; some challenges combine cryptography with the Web, reverse engineering
or even PWN techniques, so some knowledge of the Web, reverse engineering and
PWN is often required.
Since cryptography is mainly concemed with mathematics, it requires partici-
pants to have a good knowledge of mathematics, such as linear algebra, probability
ical foundation, you can further read cryptography-related books and papers to
theory, discrete mathematics, and other courses. Once you have a certain mathemat-
further improve your abilities. In CTF, most of the challenges that can name the
attack methods are actually among the less difficult ones in cryptography category,
so it is expected that you will be able to explore the principles of attacks in depth,
rather than simply using off-the-shelf tools. For example, when using lattice based
methods to break Knapsack cryptosystem, you need to understand the principles of
constructing lattice so that you can successfully solve similar challenges in the
future.
---
## Page 621
Chapter8
Smart Contracts
In CTF competitions, blockchain is a new challenge type that has emerged in recent
years. Many CTF competitions have adopted blockchain challenges, and blockchain
vendors also hold special blockchain competitions. However, the blockchain chal-
duces some thereum blockchain challenges that have appeared in the past, shares
 rde s s po ps  ae d u de s
some of my experience, and leads you into the world of blockchain smart contracts.
8.1Smart Contracts Overview
8.1.1Introduction toSmart Contracts
In 2008, Satoshi Nakamoto published his paper *Bitcoin: A Peer-to-Peer Electronic
Cash System", which marked the birth of Bitcoin, and the underlying architectural
concept of Bitcoin is called the blockchain. 2013, Vitalik Butlin, inspired by Bitcoin,
blockchain platform. Anyone whohas leamed the Solidity language and has enough
proposed the Ethereum blockchain, which is known as the second-generation
ethereum to pay for miners can write smart contracts to run on the Ethereum
blockchain.
The public-access ethereum is divided into several networks, including the main
network (mainnet) for trading in the financial market and several test networks
(testnet). The most common test network is called Ropsten. The purpose of the
test network is to allow users to test smart contracts written by themselves, and to
allow users to obtain ethereum coins for free on the test network to facilitate the
testing of smart contracts. We can also build our own ethereum blockchain, known
as a private network. The challenges that appear in CTFs are often deployed on
testnet, and participants can learm the ethereum blockchain at no cost to themselves,
which is one of the main reasons why smart contract challenges have become
popular in CTFs.
C The Author(s), under exclusive license to Springer Nature Singapore Pte Ltd. 2022
NulL Team, Handbook for CTFers.
609
htps:/doi.crg/10.10077978-.981-19-0336-6_8
---
## Page 622
610
8Smart Contracts
8.1.2Environmentand Tools
As the old Chinese saying goes, *If a craftsman wants to do good work, he must first
sharpen his tools." Before studying the ethereum smart contract, the following is an
introduction to the environment and tools that will be used in the ethereum
blockchain challenges.
1. Development environment: Chrome, Remix, MetaMask.
Development of ethereum smart contracts can be done in Chrome because the
Solidity language has an online IDE, Remix (https:/remix.ethereum.org). Remix
is an IDE written in JavaScript that compiles the Solidity code written by the user
into bytecode (opcode), and then send transactions to the public ethereum
blockchain network through Chrome’s MetaMask plugin to achieve the effect of
deploying smart contracts and invoking smart contracts.
MetaMask also provides the ability to create a personal ethereum account. If the
curent network is set up as a test network, MetaMask will provide users with a link
to get free ethereum.
2. Ethereum blockchain explorer: Etherscan
All the information on the ethereum blockchain can be viewed on Etherscan (https://
ropsten.etherscan.io), which also houses the source code of the smart contract. So, in
many smart contract challenges, all that is needed is the address of the smart contract
on Etherscan and the participant will be able to solve the challenge.
3. Local ethereum environment (not required): geth
Those who prefer to use the command line tools can use the geth program in their
local terminal. geth is an officially available ethereum program, developed in the
Golang language, runs cross-platform, and is open-sourced on Gihtub (htps://
github.com/ethereum/go-ethereum). It provides almost all the features we need when
using ethereum, not only to connect to main and test networks, but also to build our
own private networks and connect to other people's private networks. If you encoun-
ter a challenge of private network in ethereum, we recommend using geth. geth can
also mine, send transactions, query blockchain information, run bytecodes for smart
contracts, debug smart contracts, etc. geth provides a series of RPC (Remote
Procedure Call) interfaces that allow users to control them over the network.
However, there is a problem with using the program: it takes too long to
synchronize to the latest block, whether it is a test network or the main network,
and it consumes a lot of hard disk space. The cost is too high for those who
occasionally work on blockchain challenges. A common solution is to use a geth
program to connect to someone else's RPC, such as infura (https:/infura.io/). A list
of RPC functions and how to use them can be found in the oficial documentation
(https://github.com/ethereum/wiki/wiki/JSON-RPC). Although these platforms only
include basic functions, but it is sufficient for most smart contract challenges.
---
## Page 623
8.2 Examples of Smart Contract Topics in Ethereum
611
4. Web3 package for Python
Few of the smart contract challenges in CTF can be done manually, and most require
participants to write exploit scripts. The most convenient way to write exploits is to
use JavaScript, because JavaScript has a special Web3 library that encapsulates
functions that call RPC functions, and Python 3 also has a Web3 package, so
participants who prefer to use Python can also write scripts using Python3 with
the following installation commands.
pip3 insta11 web3
The specific usage of these tools will be described in subsequent challenge
examples.
8.2Examples of Smart Contract Topics in Ethereum
8.2.1"AirDrop"
 su do o uus d  s  uq go u
explained below. This challenge gives only one Etherscan link.
https://ropsten.etherscan.io/address/0x7caa18d765e5b4c3bf0831137923841fe3e72
58a
The source code for smart contracts is publicly available on Etherscan, and we can
perform source code audits on Etherscan.
Find the PayForFlag function, which can be guessed to be the function that gives
us the flag. And there is an authenticate modifier for this function.
modifier authenticate (
require [checkfriend (mag .sender) ) _
function checkfriend (address _addr) internal pure
retuzns (bool success) {
bytes20 addr = bytes20 (_addr) ;
bytea20 id = hex*000000000000000000000000000000000007d7ec :
for (uint256  = 0; 1 200000) ;
enit GetFlag (b64emai1, "Get flag!*) ;
In the authenticate modifier, it uses the checkfriend function first to determine if
the user's ethereum account address meets some requirements. Then the PayForFlag
function checks if the user’s balance in the contract is greater than 200000. After
these two conditions are met, the GetFlag function will be called, passing in the
email address entered by the user, and the bot script will automatically send the flag
to the corresponding mailbox.
Let's first look at the logic in the checkfriend function, which requires the user
sending the transaction to have a specific value Ox7d7ec in a specific offset in the
user's ethereum account, which is simple to satisfy as long as one has the following
prior knowledge: (1) on the blockchain, in order to send a transaction, you only need
to have a private key and some account balance which is enough to pay for gas
(service charge); (2) the ethereum account is the public key which can be calculated
using the private key.
We simply generate a random private key, calculate the public key corresponding
to the private key, and if the calculated public key does not satisfy the conditions, we
can generate a new private key. With this method, we can gain an account address
with a specific value of Ox7d7ec, use it for the challenge, send a transaction to the
contract, and then satisfy the logic of the contract. The demo code for calculating the
corresponding public key via the private key is as follows.
from ethereum.uti1s import privtoaddr
# python3
pziv = (123) to_bytes (32, big*)
print ("private: 0xta^npublie: 0xta*$ (priv.hex () , pub .hex (11)
pub = privtoaddx (pziv)
Next, let's examine how to increase the balance of an account in this contract.
After auditing the code of the contract, we find that the contract has a "AirDrop'
mechanism, where any account has a chance to get a free balance of 1000.
uint256 pub1ic constant _airdropAmount = 1000;
function getAirdrop () public authenticate returns (bool success) 
if (!initialized [msg-sender]) {
initialized [meg.sendex] = true;
balances [msg. sender] - _airdropAnount ;
_totalSupply += _airdropAmount ;
return true;
This 1000 balance can only be claimed once per account and is not enough to get
a flag. So we need to audit the rest of the functions.
---
## Page 625
8.2 Examples of Smart Contract Topics in Etheresum
613
function transfer (address _to, uint _value) public
returns (bool success) {
balances [msg-sender] = balances [msg. sender] sub (_value] ;
balances [_to] = balances [_to] .add (_value) ;
return true;
The contract provides the ability to transfer balance to other user, which leads to a
problem: one account can get 1000 for free, and 200000 is needed to get a ffag. If
200 accounts transfer their balances to one account, then the balance of that account
is enough to get the flag. The account address is calculated by enumerating the
private key, so it is not difficult to get 200 accounts.