n ≥ 3f + 1. In BFT, a replica delivers or commits client
operations submitted by clients. A replica then sends a reply
to the corresponding client. The client computes a ﬁnal re-
sponse based on the reply messages. We consider the partially
synchronous model [28], where there exists an unknown global
stabilization time (GST) such that after GST, messages sent
between two correct replicas arrive within a ﬁxed delay.
Cryptographic primitives. We use the deﬁnition of [12,
44] for a (t, n) threshold signature scheme consisting of
the following algorithms (tgen, tsign, tcombine, tverﬁy). tgen
outputs a system public key known to anyone and a vector
of n private keys. A partial signature signing algorithm tsign
takes as input a message m and a private key ski and outputs a
partial signature σi. A combining algorithm tcombine takes as
input pk, a message m, and a set of t valid partial signatures,
and outputs a signature σ. A signature veriﬁcation algorithm
tverify takes as input pk, a message m, and a signature σ,
and outputs a bit. We require the conventional robustness
and unforgeability properties for threshold signatures. We
may leave the veriﬁcation of partial signatures and threshold
signatures implicit when describing these algorithms. In this
paper, we set t to n − f.
Efﬁcient instantiations for threshold signatures can be based
on pairings [12, 13]. As we discussed in the introduction, one
can use a group of n signatures to build a (t, n) threshold
signature for better efﬁciency for real case deployments. Fol-
lowing prior works, this paper assumes pairings for threshold
signatures when considering complexity measures.
We use a collision-resistant hash function h mapping a
message of arbitrary length to a ﬁxed-length output. We
assume the length of all the above primitives (signatures and
hashes) is O(λ), where λ is the security parameter.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:24:47 UTC from IEEE Xplore.  Restrictions apply. 
55
Some BFT protocols mentioned in the paper (e.g., Fast-
HotStuff, Wendy) use aggregate signature [12, 13] which
allows anyone to aggregate signatures for different messages
into a single aggregate signature. An aggregate signature
for t messages and t public keys may be of the form
(m1, m2,··· , mt, σ, pk1, pk2,··· , pkn). Verifying an aggre-
gate signature takes as input all t messages and t public keys.
Complexity metrics. This paper considers communication
complexity, authenticator complexity, and cryptographic oper-
ations needed. Communication complexity means the total bits
transmitted for all replicas. Authenticator complexity means
the total number of authenticators received by all replicas. An
authenticator in our constructions may be a signature, a partial
signature, or a threshold signature.
Note for systems using aggregate signatures, one cannot
claim that a single aggregate signature for t different messages
of size L and t public keys is a single authenticator: the
communication of transmitting such an aggregate signature is
at least tL + λ + n (if using a n-size bit-vector to represent
public keys), and the number of cryptographic operations
needed is at least O(t) (for one has to take as input t public
keys). Hence, we view an aggregate signature for t different
messages as t authenticators. Note an aggregate signature
for the same message, also called multi-signatures, may be
characterized as a single authenticator.
Crucially, pairing operations are much more expensive than
conventional public-key cryptographic operations (e.g., elliptic
curve); thus, it is important to distinguish pairing operations
from conventional (non-pairing) operations.
In general, communication complexity and the number of
cryptographic operations are more precise measures than au-
thenticator complexity alone. We consider all three measures.
Fig. 1: Tree of blocks.
with increasing heights, instead of a single block, can be
delivered in the same view ("normal case operation").
For a BFT protocol, a monotonically growing branch be-
comes committed. Each time, a block extends the branch led
(cid:2) is an extension of a
by its parent block. We say a block b
(cid:2). We say two branches
block b if b is on the branch led by b
are conﬂicting, if neither one is an extension of the other. We
say two blocks are conﬂicting, if the branches led by them are
conﬂicting.
We use Figure 1 to illustrate our notation. b1 is committed
in view 1, while b2 and b3 are committed in view 2. A branch
led by b2 is the path from b2 to b0. b3, for instance, is an
extension of b2 and also an extension of b1. The height of b3
is 4, equal to the depth of the tree. The parent link for a block
b2 is a hash of its parent block b1. b3 and d3 are conﬂicting,
as the branches lead by them are conﬂicting.
With the syntax of BFT over graphs, we can recast the
safety deﬁnition of BFT as follows: no two correct replicas
commit two conﬂicting blocks. The liveness deﬁnition requires
that after GST, any operation proposed by a client will be
eventually executed.
IV. REVIEW OF TWO-PHASE BFT PROTOCOLS AND
OVERVIEW OF MARLIN
A. BFT consensus over graph of blocks
A. Review of HotStuff
We extend the syntax of BFT replication over graphs mod-
eled in HotStuff [52] for our purpose. The protocols considered
in the paper are leader-based, proceeding in a succession of
views numbered by monotonically increasing view numbers,
and associating each view with a leader. The unique leader in
each view v is denoted as Lv. The most current view number
maintained by a replica is denoted as cview. In each view,
replicas reach consensus on a sequence of blocks until a view
change occurs. During the view change, a new leader is elected
and meanwhile a new view starts.
Each replica stores a tree of blocks (nodes). A block b
contains a parent link pl, a batch of operations op’s, and their
metadata. A parent link for b is a hash digest of its parent
block. A branch led by a given block b is the path from b all
the way to the root of the tree (called the genesis block). We
deﬁne view for b as the view during which b is proposed. We
deﬁne height for b as the number of blocks on the branch led
by b. The metadata for a block b include the view for b, the
view for its parent block, and the height for b.
Note that one difference between our syntax and the syntax
of HotStuff is that the block in our model includes the view
number of its parent block. Also, in our syntax, multiple blocks
HotStuff (in the rotating leader mode) delivers a proposal in
each view (height) and adopts a three-phase commit rule: pre-
pare phase, precommit phase, and commit phase. Each phase
uses a threshold signature to achieve linear communication. In
the prepare phase, the leader broadcasts a proposal (a block
with some view) to all replicas and waits for signed responses
(in the form of partial signatures) from a quorum of n − f
replicas to form a threshold signature as the prepare quorum
certiﬁcate (QC)—prepareQC. In the precommit phase, the
leader broadcasts prepareQC and waits for responses to form
precommitQC. Note the two phases can achieve safety but
not liveness (when the leader is faulty). So a third phase is
needed to broadcast precommitQC and form commitQC:
after receiving precommitQC, replicas become locked on the
QC and will not accept a conﬂicting block with the same view;
replicas may later unlock only if they are shown with a QC of
a higher view. After forming commitQC, the leader forwards
it to all replicas that then safely deliver the proposal.
In view changes, each replica sends its latest prepareQC to
the leader. After receiving a quorum of view change messages,
the leader selects the QC with the largest height, extends the
block for the QC with a new proposal.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:24:47 UTC from IEEE Xplore.  Restrictions apply. 
56
(a) HotStuff.
(b) Two-phase HotStuff (insecure).
(c) Marlin.
Fig. 2: View change snapshots for HotStuff, two-phase HotStuff
(insecure, with prepare and commit phases only), and Marlin. The
boxes represent possible view change snapshots.
B. Challenges of Building Two-phase HotStuff
To illustrate the challenges of reducing the phases of Hot-
Stuff, we begin with "two-phase HotStuff (insecure)" that has
a two-phase commit rule. The ﬁrst phase is the prepare phase
with prepareQC, while the second phase is commit phase
with commitQC. In particular, after receiving prepareQC,
replicas become locked on the QC. The issue for the above
approach is the QC the new leader obtains from a quorum
of view change messages may not be the most recent QC
generated before view change. In other words, replicas may
be locked on a QC that the leader is not aware of. This scenario
leads to liveness problems. To illustrate the problems, we
deﬁne a notion of view change snapshot to denote a quorum
of view change messages (containing QCs) a leader collects.
Clearly, the leader may obtain different snapshots during view
change. Our analysis should thus cover all possible scenarios
for view change snapshots.
We say a view change snapshot is safe, if it includes the
most recent prepareQC before view change. Otherwise, we
say a snapshot is unsafe.
We use the view change snapshots in Figure 2 to explain
the liveness issues. These examples all consider a four-replica
setting, where p2 is the new leader, and p4 is faulty and may
choose to hide its latest QC. In all examples, we use dashed
lines for safe snapshots and solid lines for unsafe snapshots.
In HotStuff (Figure 2a), p1 has received a prepareQC
for b2, butp 2 and p3 only have prepareQC for b1. The
faulty replica p4 may have received the prepareQC for b2
but chooses to hide the fact. In view change, the new leader
p2 may receive different view change snapshots. The dashed
box represents a safe snapshot, where p2 receives the view
change messages from p1, p2, and p3. The snapshot is safe,
as it includes the latest prepareQC (for b2). In this case, p2
will extend b2 with a new proposal which can be accepted
by all correct replicas. Meanwhile, the red solid box is an
unsafe snapshot, because the leader receives the view change
messages from p2, p3, and p4, and p2 can only receive the
prepareQC for block b1. Thanks to the two-phase-lock and
three-phase commit rule, no correct replica is locked on the
QC for block b2; any correct replica can accept the proposal.
In two-phase HotStuff (Figure 2b), if the leader p2 receives
view change messages from p1, p2, and p3 (a safe snapshot),
p2 extends b2 with a proposal which can be accepted by any
correct replica. In contrast, if the leader receives view change
messages from p2, p3, and p4 (an unsafe snapshot), p2 extends
(cid:2)
2. Since replica p1 is locked on the QC for
b1 and proposes b
(cid:2)
block b2, it will not accept the proposal b
2. Hence, replicas
may never resume normal case operations, impeding liveness.
C. Review of Existing "Two-Phase" Systems
We review existing solutions of two-phase BFT (Fast-
HotStuff, Jolteon, and Wendy). They differ in the way of
unlocking the locked QC of correct replicas. Both Fast-
HotStuff and Jolteon can be viewed as a hybrid of HotStuff
and the classic PBFT-like view change: the new leader should
present a proposal together with evidence of a quorum of
view change messages to unlock the locked QC. Hence, both
achieve quadratic complexity. Wendy takes a trial-and-error
approach. In particular, the leader ﬁrst creates a proposal,
hoping that the block it proposes can be accepted by any
correct replica. If it turns out that some correct replicas are
locked on a QC for a conﬂicting block and do not accept the
proposal, the replicas send a NACK message to the leader. The
leader can then reply with a set of view change messages to
the replicas. Since the leader may need to collect signatures for
O(n) different messages, Wendy naturally considers aggregate
signatures and proposes a new aggregate signature using two
pairings for veriﬁcation. One price to pay is a larger size
of public keys and a more expensive signing cost; the non-
pairing public-key cryptographic operations for veriﬁcation
remain large—O(n2 log c) (c is the view number difference
deﬁned in Wendy, a value should be reasonably large). As we
have argued in the complexity measures, Wendy uses O(n2)
authenticators when unlocking is needed.
D. Overview of Marlin
Marlin is, strictly speaking, the ﬁrst linear BFT with two-
phase commit. Table I compares Marlin with other systems.
Fig. 3: View change in Marlin (chaining mode).
A new way of unlocking a locked QC. In Marlin, instead of
asking the leader to directly decide the highest QC based on
the view change snapshot it obtains, replicas vote to decide
the highest QC. Speciﬁcally, as depicted in Figure 3, the ﬁrst
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:24:47 UTC from IEEE Xplore.  Restrictions apply. 
57
protocol
HotStuff [52]
vc communication
O(nλ + n log u)
Fast-HotStuff [34] O(n2λ + n2 log u)
O(n2λ + n2 log u)
O(nλ + n2 log u)
O(nλ + n log u)
Jolteon [30]
Wendy [31]
Marlin (this work)
vc cryptographic operations
O(n2) non-pairings or O(n) pairings
O(n3) non-pairings or O(n2) pairings
O(n3) non-pairings or O(n2) pairings
O(n2 log c) non-pairings and O(n) pairings
O(n2) non-pairings or O(n) pairings
vc authenticator
vc # phases
O(n)
O(n2)
O(n2)
O(n2)
O(n)
3
2
2
2 or 3
2 or 3
TABLE I: Comparison of HotStuff and two-phase variants. Here, vc stands for view change. The value u is the upper bound on the view
number; log u is the size of the the message space for u. c (used in Wendy only) is the view number difference between any replica and the
leader; c = O(u). The cryptographic operations distinguish between pairing operations and conventional public key cryptographic operations
(non-pairing operations): or means operations instantiated using signatures only or threshold signatures only. Note Wendy relies on both
("and"). While Wendy in view change has O(n
) authenticators, it uses O(n) pairings. As reported by Wendy, due to the use of pairings,
Wendy may be slower than HotStuff in view change.
2
that
phase of view change is a pre-prepare phase, where the leader
broadcasts a PRE-PREPARE message containing the highest
prepareQC it received. If the prepareQC in the message
equals the highest one that a replica received, then the replica
sends a partial threshold signature claiming the above fact
("yes"). The leader waits for signed responses from a quorum
of n − f replicas. If the leader receives n − f signed "yes"
responses, it can combine them to form a threshold signature
called pre-prepareQC which can be used as proof to unlock
the locked QC of any correct replica.
A half-baked attempt. The above idea alone does not im-
mediately lead to a BFT protocol
is live, because a
pre-prepareQC may not necessarily be formed: it is possible
the prepareQC that the leader broadcasts is not the highest
one for some correct replicas. Intuitively, one could ask these
correct replicas to send their higher prepareQCs as a pre-
prepare phase response. In this way, we distinguish two cases:
Case 1): a pre-prepareQC is formed; Case 2): a higher
prepareQC is obtained. Depending on which case would
occur, the leader extends the corresponding block. We ﬁnd,
however, doing so will lead to a linear view change protocol
that commits a block in four phases and we cannot achieve
anything better, as one has to commit a block in three phases
after the pre-prepare phase to preserve liveness for the case
with successive view changes. Hence, while this approach
makes an interesting trade-off for HotStuff, it has a linear but
slower view change than HotStuff.
Virtual block. For a better solution, a natural idea is to also
propose a block in the pre-prepare phase such that the phase
is not "wasted." The apparent obstacle is that the leader, at
the beginning of the pre-prepare phase, does not know which
case (Case 1 or Case 2) will happen. Furthermore, if Case 2
occurs, a pre-prepareQC may not be formed.
In Marlin, we ask the leader to propose two blocks: one
normal block that extends the block for the highest QC the
leader received (Case 1); one virtual block that extends a block
(that may or may not exist) from a "virtual," safe snapshot
(Case 2). Each replica can either vote for one or two blocks
depending on the QC it is locked on. Interestingly (and not
obliviously), we ﬁnd when the leader is correct, at the end of
pre-prepare phase, either of the following Case 1 or Case 2
will happen:
• Case 1: The leader receives n−f votes for the normal block,
i.e., the QC the leader receives is indeed the highest for
a quorum of replicas. The quorum of "yes" votes form a
pre-prepareQC for the normal block.
• Case 2: The leader receives n− f votes for the virtual block
and a pre-prepareQC is formed. Furthermore, a higher
prepareQC qc is received by the leader and we can prove qc
is higher than the prepareQC sent by the leader by exactly
1. Thus, the leader knows that the parent block of the virtual
block exists and has been voted by a quorum of replicas to
form qc. In other words, the virtual block now has a "real"
parent block. The leader uses the pre-prepareQC and the
higher prepareQC to validate the virtual block.
Figure 2c presents an example, where the leader p2 receives
QC for block b1. As p2 is unsure if there exists a higher QC,
(cid:2)
it can simply propose b2 that extends b1 and b
2 that extends a
(cid:2)
nil block. Here, p1 only votes for b
2, while p2 and p3 vote for
(cid:2)
both b2 and b
2. After receiving the votes from p1 and p3 and
a prepareQC from p1, p2 can form a valid pre-prepareQC
(cid:2)
2. But a pre-prepareQC for b2 cannot be formed due to
for b