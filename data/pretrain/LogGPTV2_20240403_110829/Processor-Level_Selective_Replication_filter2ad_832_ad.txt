59.0%
5.9%
2.0%
0.0%
Exception Raised in
same instruction
Replication Detection
28.3%
50.9%
62.5%
71.2%
0%
10% 20% 30% 40% 50% 60% 70% 80%
Figure 6: Instruction error injection results 
 Figure  7  shows  the  percentage  of  fail  silence 
violations  and  program  hangs 
that  occur  when 
instruction errors are injected and when different types 
of 
replication  mechanisms  are  employed.  Full 
Duplication is able to prevent most of the fail-silence 
violations  and  program  hangs  (Instruction  and  data 
errors are injected in one replica. The errors that make 
the  affected  replica  hang  are  not  detected  by  full 
duplication.  For  memory  access  instructions  only  the 
effective  addresses  computer  by  the  two  instructions 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:52:33 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007are compared. Therefore, if the register field of a load 
instruction in one of the replicas is corrupted the data 
is loaded into an incorrect register, possibly leading to 
an error in the final application outcome. This is a fail-
silence  violation 
full 
duplication).  Selective  Replication 
than 
randomized replication but worse than full replication 
in  detecting  both  fail  silence  violations  and  program 
hangs. 
is  not  detected  by 
is  better 
that 
14.5%
Fail Silence Violation
3.8%
1.7%
0.6%
10.4%
Program Hang
4.3%
1.2%
0.1%
0%
2%
4%
6%
8%
10% 12% 14% 16%
Full Rep SELREP Random Baseline
Figure 7: Fail silence violations and program hangs 
for instruction errors 
5.3.5.  Error coverage for data errors 
Table  3  summarizes  the  results  of  injecting  data 
errors (errors into the output of a functional unit when 
it  is  generating  the  result  of  an  instruction).  We  see 
that  FULLREP  detects  all  the  errors.  This  is  because 
we inject the result of an instruction in only one of the 
replicas  and  vote  on  the  result  of  each  replicated 
instruction.  Since  all  instructions  are  replicated  in 
FULLREP it can detect all data errors. However, it is 
important to note that even though only less than 10% 
of the instructions are replicated in selective replication 
it detects about 97% of all data errors also. From the 
last row in Table 3 we see that FULLREP detects all 
the  data  errors  that  were  Not  Manifested  in  the 
Baseline  case,  whereas  SELREP  decreases 
this 
detection  of  errors  benign  to  the  application  outcome 
by more than 6%. 
Configuration 
Table 3: Fault injection results for data injection 
FULLREP 
477 
0.0% 
100.0% 
0.0% 
0.0% 
0.0% 
100.0% 
Outcome 
Activated 
Not Manifested 
Replication Detection 
Exception Raised in 
Different Instruction 
Program Hang 
Fail Silence Violation 
Benign Error Detection 
SELREP 
477 
3.0% 
97.4% 
1.6% 
0.1% 
0.9% 
93.8% 
Baseline 
490 
44.6% 
0.0% 
72.2% 
2.3% 
25.5% 
0.0% 
6. Related work 
for 
Replicated  execution 
fault-detection  and 
tolerance has been investigated extensively both at the 
application and hardware level. Error Detection Using 
Duplicated Instructions (EDDI) [2] duplicates original 
instructions in the program but with different registers 
and  variables.  Duplication  at  the  application  level 
increases the code size of the application  in  memory. 
More  importantly,  it  reduces  the  instruction  supply 
bandwidth from the memory to the processor. 
In the realm of commercial processors the IBM G5 
processor  [10]  provides  duplicate  I-  and  E-  units  to 
provide duplicate execution of instructions. To support 
duplicate  execution,  the  G5  is  restricted  to  a  single-
issue processor and incurs 35% hardware overhead. 
In 
(SRT) 
threaded 
research, 
processor, 
experimental 
simultaneous 
multithreading  (SMT)  and  the  chip  multiprocessor 
(CMP)  architectures  have  been  ideal  bases  for  space 
and  time  redundant  fault-tolerant  designs  because  of 
their  inherent  redundancy.  In  simultaneously  and 
redundantly 
only 
instructions whose side effects are visible beyond the 
boundaries  of  the  processor  core  are  checked  [11]. 
This  was  subsequently  extended  in  SRTR  to  include 
recovery  [4].  Another  fault-tolerant  architecture  is 
proposed in the DIVA design [3]. DIVA comprises an 
aggressive  out-of-order  superscalar  processor  along 
processor. 
with 
Microprocessor-based 
[12] 
achieves time redundancy by scheduling the redundant 
execution of a program during idle cycles in which a 
long-latency  cache  miss  is  being  serviced.  SRTR  [4] 
and  MBI  [12]  have  reported  up  to  30%  performance 
overhead. This is contrary to the general belief that full 
duplication  at  the  processor-level  has  little  or  no 
performance overhead. 
introspection 
in-order 
checker 
a 
simple 
(MBI) 
SLICK  [14]  is  an  SRT-based  approach  to  provide 
partial replication of an application. The goals of this 
approach  are  similar  to  ours.  However,  unlike  this 
approach  we  do  not  rely  on  a  multi-threaded 
architecture  for  the  replication.  Instead,  this  paper 
presents  modifications 
to  a  general  superscalar 
processor to support partial or selective replication of 
the application.  
The  basic  principle  of  fault-tolerance  employed  in 
all the previous techniques that have been discussed is 
replication. This is also the focus of this paper. But a 
the  previous 
major  difference 
techniques  provide  a  mechanism 
to  dynamically 
configure  the  level  of  replication  according  to  the 
application’s  demand.  The  application  also  does  not 
have a choice of not replicating part of its code. This 
that  none  of 
is 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:52:33 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007requires  providing  an  interface  to  the  application, 
either at the high-level programming language or at the 
assembly level, to invoke and configure the replication 
mechanism  at  run-time.  It  also  requires  extending 
portions of the processor pipeline to support selective 
replication of application execution. 
7. Conclusions and future work 
In this paper, we have demonstrated an approach to 
extract  sensitive  sections  of  code 
that  can  be 
selectively  replicated  to  enhance  the  reliability  of  the 
application, instead of replicating the entire application. 
We have described a detailed design and evaluation of 
the  mechanism  to  support  this  selective  replication  at 
the processor architecture level. The results show that 
with about 59% less overhead than full duplication of 
instructions we can detect 97% of the data errors and 
87% of the instruction errors that are detected by full 
duplication.  An  important  advantage  of  the  selective 
replication  is  that  it  reduces  the  detection  of  errors 
benign  to  the  final  outcome  of  the  application  by 
17.8% as compared to full duplication.  
insert 
the  selective 
the  CHECK 
Future work will involve compiler enhancements to 
instructions. 
automatically 
Hardware  synthesis  of 
replication 
technique and its implementation on an FPGA is also 
underway. 
Acknowledgements 
This  work  was  supported  in  part  by  National  Science 
Foundation  (NSF)  grants  CNS-0406351  and  CNS-0524695, 
the  Gigascale  Systems  Research  Center  (GSRC/MARCO), 
Motorola  Corporation  as  part  of  the  Motorola  Center  for 
Communications (UIUC), and Intel Corporation. 
References 
[1]  R. K. Iyer, N. Nakka, Z. T. Kalbarczyk, and S. Mitra, 
“Recent advances and new avenues in  hardware-level 
reliability support,” IEEE MICRO, vol. 25,  no.  6,  pp. 
18-29, Nov.-Dec. 2005. 
[2]  N.  Oh,  P.P.  Shirvani,  and  E.J.  McCluskey,  “Error 
detection  by  duplicated  instructions  in  super-scalar 
processors,”  IEEE  Transactions  on  Reliability,  vol. 
51(1), pp. 63-75, Mar. 2002. 
[3]  C. Weaver and T. Austin. “A fault tolerant approach to 
microprocessor design,” in Proc. of the Intl. Conf. on 
Dependable Systems and Networks 2001, pp. 411-420. 
[4]  T. Vijaykumar, I. Pomeranz, and K. Cheng, “Transient 
fault  recovery  using  simultaneous  multithreading,”  in 
Proceedings of the 29th Intl. Symposium. on Computer 
Architecture ( ISCA) May 2002, pp. 87-98. 
J.  Ray,  J.  C.  Hoe,  and  B.  Falsafi,  “Dual  use  of 
superscalar  datapath  for  transient-fault  detection  and 
[5] 
recovery,”  in  Proceedings  of  34th  MICRO,  Austin, 
Texas, Dec. 2001, pp. 214-224. 
[6]  N.  J.  Wang,  J.  Quek,  T.  M.  Rafacz,  and  S.  J.  Patel, 
“Characterizing  the  effects  of  transient  faults  on  a 
high-performance  processor  pipeline,”  in  Proc.  Intl. 
Conf.  on  Dependable  Systems  and  Networks  (DSN), 
2004, pp. 61-70. 
[7]  G.  Saggese,  A.  Vetteth,  Z.  T.  Kalbarcyzk,  and  R.  K. 
Iyer,  “Microprocessor  Sensitivity  to  Failures:  Control 
vs.  Execution  and  Combinational  vs.  Sequential 
Logic,”  in  Proc.  Intl.  Conf.  Dependable  Systems  and 
Networks (DSN), 2005, pp. 760-769. 
[8]  K.  Pattabiraman,  Z.  T.  Kalbarczyk,  and  R.  K.  Iyer, 
“Application-based  metrics  for  strategic  placement  of 
in  Proc.  of  Int.  Symp.  Pacific  Rim 
detectors,” 
Dependable Computing (PRDC), 2005, pp. 8-15. 
[9]  M. Hiller, A. Jhumka, and N. Suri, “On the placement 
of  software  mechanisms  for  detection  of  data  errors,” 
in Proc. Intl. Conference on Dependable Systems and 
Networks (DSN), 2002, pp. 135-144. 
[10]  T.  Slegel,  et  al.  “IBM’s  S/390  G5  microprocessor 
design,” IEEE Micro, vol. 19(2), pp. 12–23, 1999. 
[11]  S. K. Reinhardt and S. S. Mukherjee, “Transient fault 
detection  via 
in 
Proceedings  of  the  Twenty-Seventh  Inlt.  Symp.  on 
Computer Architecture (ISCA), June 2000, pp. 25-36. 
simultaneous  multithreading,” 
[12]  M.  A.  Qureshi,  O.  Mutlu,  and  Y.  N.  Patt, 
“Microarchitecture-based  introspection:  A  technique 
for  transient-fault  tolerance  in  microprocessors,”  in 
Proceedings  of  Intl.  Conference  on  Dependable 
Systems and Networks (DSN), June 2005, pp. 434-443.  
[13]  N.  Nakka.  “Reliability  and  Security  Engine:  A 
Processor-level 
for  Application-Aware 
detection and recovery,” PhD dissertation, Department 
of Electrical and Computer Engineering, University of 
Illinois at Urban-Champaign, USA, 2006. 
framework 
[14]  A.  Parashar,  A.  Sivasubramaniam,  S.  Gurumurthi. 
“SlicK: slice-based  locality  exploitation  for  efficient 
redundant  multithreading,”  in  Proc.  of  the  12th  Intl. 
Conf.  on  Architecture,  Programming  Lang.  and 
Operating Systems (ASPLOS), 2006.  
[15]  Mark  Weiser,  “Program  slicing,”  in  5th  International 
Conference on Software Engineering (ICSE), 1981. 
[16]  H.  Agrawal,  and  J.  R.  Horgan.  “Dynamic  program 
the  ACM  SIGPLAN 
slicing,” 
Conference  on  Prog.  Lang.  Design  and  Impl.(PLDI) 
‘90, White Plains, New York, pp. 246-256 
in  Proceedings  of 
[17]  D.  Burger  and  T.  M.  Austin,  “The  SimpleScalar  tool 
set,  version  2.0,”  University  of  Wisconsin-Madison, 
Technical Report CS-1342, June 1997. 
[18]  N.  Nakka,  J.  Xu,  Z.  Kalbarczyk,  R.  K.  Iyer,  “An 
Architectural Framework for Providing Reliability and 
Security Support,” in Proc. of Intl. Conf. Dependable 
Systems and Networks (DSN) 2004, pp. 585-594. 
[19]  R.  Chillarege.  “Orthogonal  defect  classification,”  In 
Handbook  of  Software  Reliability  and  System 
Reliability, M. R. Lyu, Ed. McGraw-Hill, NJ, 359-400. 
[20]  F.  Tip,  "A  Survey  of  Program  Slicing  Techniques," 
Journal  of  Programming  Languages,  Vol.3,  No.3, 
pp.121-189, September, 1995. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:52:33 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007