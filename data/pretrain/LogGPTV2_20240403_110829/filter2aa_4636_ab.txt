```shell
[root@node6 ~]# sed 's/^[a-z]\+/\u&/' passwd 
Root:x:0:0:root:/root:/bin/bash
Bin:x:1:1:bin:/bin:/sbin/nologin
Daemon:x:2:2:daemon:/sbin:/sbin/nologin
Adm:x:3:4:adm:/var/adm:/sbin/nologin
Lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
Sync:x:5:0:sync:/sbin:/bin/sync
```
匹配到的字符全部转换为大写：
```shell
[root@node6 ~]# sed 's/^[a-z]\+/\U&/' passwd 
ROOT:x:0:0:root:/root:/bin/bash
BIN:x:1:1:bin:/bin:/sbin/nologin
```
###  组合多个表达式 
1. 替换文本中的多个字符串：
```shell
sed -e 's/old_string/new_string/g' -e 's/another_old_string/another_new_string/g' file.txt
```
2. 删除文本中的多个行：
```shell
sed -e '1d' -e '/pattern/d' file.txt
```
3. 在文本中插入多个行：
```shell
sed -e '1i\inserted_line1' -e '2i\inserted_line2' file.txt
```
其中，-e 表示指定一个表达式，多个表达式之间用 -e 分隔。每个表达式可以是一个 sed 命令，例如 s、d、i 等。
###  引用 
sed表达式可以使用单引号来引用，但是如果表达式内部包含变量字符串，就需要使用双引号。
```shell
test=hello
echo hello WORLD | sed "s/$test/HELLO"
HELLO WORLD
```
###  选定行的范围：,（逗号） 
所有在模板test和check所确定的范围内的行都被打印：
```shell
sed -n '/test/,/check/p' file
```
打印从第5行开始到第一个包含以test开始的行之间的所有行：
```shell
sed -n '5,/^test/p' file
```
对于模板test和west之间的行，每行的末尾用字符串aaa bbb替换：
```shell
sed '/test/,/west/s/$/aaa bbb/' file
```
###  多点编辑：e命令 
-e选项允许在同一行里执行多条命令：
```shell
sed -e '1,5d' -e 's/test/check/' file
```
上面sed表达式的第一条命令删除1至5行，第二条命令用check替换test。命令的执行顺序对结果有影响。如果两个命令都是替换命令，那么第一个替换命令将影响第二个替换命令的结果。
和 -e 等价的命令是 --expression：
```shell
sed --expression='s/test/check/' --expression='/love/d' file
```
###  从文件读入：r命令 
file里的内容被读进来，显示在与test匹配的行后面，如果匹配多行，则file的内容将显示在所有匹配行的下面：
```shell
sed '/test/r file' filename
```
###  写入文件：w命令   
在example中所有包含test的行都被写入file里：
```shell
sed -n '/test/w file' example
```
###  追加（行下）：a\命令 
将 this is a test line 追加到 以test 开头的行后面：
```shell
sed '/^test/a\this is a test line' file
```
在 test.conf 文件第2行之后插入 this is a test line：
```shell
sed -i '2a\this is a test line' test.conf
```
###  插入（行上）：i\命令 
将 this is a test line 追加到以test开头的行前面：
```shell
sed '/^test/i\this is a test line' file
```
在test.conf文件第5行之前插入this is a test line：
```shell
sed -i '5i\this is a test line' test.conf
```
###  替换指定行：c\命令 
把root开头的行替换新内容：
```shell
[root@node6 ~]# sed '/^root/c this is new line!' passwd 
this is new line!
bin:x:1:1:bin:/bin:/sbin/nologin
```
如果是指定范围替换，需要注意，sed不是每行进行替换，而是把整个范围作为整体替换：
```shell
[root@node6 ~]# nl passwd | sed '1,5c\   this is dangerous!'
     this is dangerous!
     6	sync:x:5:0:sync:/sbin:/bin/sync
     7	shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown
```
如果想实现对第一行到第五行统一替换为相同内容，可以用下面的命令实现：
```shell
[root@node5 ~]# sed '1{:a;s/.*/lutxixia/;n;6!ba}' passwd 
lutxixia
lutxixia
lutxixia
lutxixia
lutxixia
sync:x:5:0:sync:/sbin:/bin/sync
其中：
:a  	是设置一个循环标签
s/.*/lutixia/	是用lutixia字符替换匹配到的每行内容
n	是读取下一行
6!	是读到第六行退出循环，终止操作,如果没有，则继续循环。
ba	是如果没有到第六行就跳转到a继续循环
```
###  下一个：n命令 
如果test被匹配，则移动到匹配行的下一行，替换这一行的aa，变为bb，并打印该行，然后继续：
```shell
sed '/test/{ n; s/aa/bb/; }' file
```
###  变形：y命令 
把1~10行内所有abcde转变为大写，注意，正则表达式元字符不能使用这个命令：
```shell
sed '1,10y/abcde/ABCDE/' file
```
###  退出：q命令 
打印完前10行后，退出sed:
```shell
sed '10q' file
```
直到找到第一个匹配项，退出sed：
```shell
[root@node4 ~]# sed  '/nginx/q' nginx.yml 
---
- hosts: nginx
```
###  保持和获取：h命令和G命令 
在sed处理文件的时候，每一行都被保存在一个叫模式空间的临时缓冲区中，除非行被删除或者输出被取消，否则所有被处理的行都将 打印在屏幕上。接着模式空间被清空，并存入新的一行等待处理。
```shell
sed -e '/test/h' -e '$G' file
```
在这个例子里，匹配test的行被找到后，将存入模式空间，h命令将其复制并存入一个称为保持缓存区的特殊缓冲区内。第二条语句的意思是，当到达最后一行后，G命令取出保持缓冲区的行，然后把它放回模式空间中，且追加到现在已经存在于模式空间中的行的末尾。在这个例子中就是追加到最后一行。简单来说，任何包含test的行都被复制并追加到该文件的末尾。
###  保持和互换：h命令和x命令 
互换模式空间和保持缓冲区的内容。也就是把包含test与check的行互换：
```shell
sed -e '/test/h' -e '/check/x' file
```
###  脚本scriptfile 
sed脚本是一个sed的命令清单，启动Sed时以-f选项引导脚本文件名。Sed对于脚本中输入的命令非常挑剔，在命令的末尾不能有任何空白或文本，如果在一行中有多个命令，要用分号分隔。以#开头的行为注释行，且不能跨行。
```shell
sed [options] -f scriptfile file(s)
```
###  打印奇数行或偶数行 
方法1：
```shell
sed -n 'p;n' test.txt  #奇数行
sed -n 'n;p' test.txt  #偶数行
```
方法2：
```shell
sed -n '1~2p' test.txt  #奇数行
sed -n '2~2p' test.txt  #偶数行
```
###  打印匹配字符串的下一行 
```shell
grep -A 1 SCC URFILE
sed -n '/SCC/{n;p}' URFILE
awk '/SCC/{getline; print}' URFILE
```