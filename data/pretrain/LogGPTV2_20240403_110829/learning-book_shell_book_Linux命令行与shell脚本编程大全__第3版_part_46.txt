i变量会在每次选代后增一。
bashshell也支持一种for循环，它看起来跟C语言风格的for循环类似，但有一些细微的不同，
---
## Page 284
13.2C语言风格的for命令
269
其中包括一些让shell脚本程序员困惑的东西。以下是bash中C语言风格的for循环的基本格式。
for ((vaziable assignment 1 condition Jitezation process ))
C语言风格的for循环的格式会让bashshell脚本程序员摸不着头脑，因为它使用了C语言风格
的变量引用方式而不是shell风格的变量引用方式。C语言风格的for命令看起来如下。
for (( a = 1; a < 10 a++ 1
注意，有些部分并没有遵循bash shell标准的for命令：
口变量赋值可以有空格；
口条件中的变量不以美元符开头；
口选代过程的算式未用expr命令格式。
shell开发人员创建了这种格式以更贴切地模仿C语言风格的Eor命令。这虽然对C语言程序员
来说很好，但也会把专家级的shell程序员弄得一头雾水。在脚本中使用C语言风格的for循环时
要小心。
以下例子是在bash shell程序中使用C语言风格的for命令。
$ cat test8
1/bin/bash
testing the C-style for loog
for ((i=1 i <= 10 i++ ))
do
echo *The next nunber is $i*
$./test8
done
[ at aquu qxau a
The next nunber
The next nunber
:is 3
i5 2
The next nunber
is 4
The
next nunber
The next nunber
155
next nunber
i5 6
The next nunber
Ihe
:is 8
is 7
The next nunber is 10
Ihe
next nunber
15 9
for循环通过定义好的变量（本例中是变量i）来选代执行这些命令。在每次选代中，$i变
量包含了for循环中赋予的值。在每次选代后，循环的选代过程会作用在变量上，在本例中，变
量增一。
13.2.2使用多个变量
13
C语言风格的for命令也允许为送代使用多个变量。循环会单独处理每个变量，你可以为每
个变量定义不同的选代过程。尽管可以使用多个变量，但你只能在for循环中定义一种条件。
$ cat test9
---
## Page 285
270
第13章更多的结构化命令
#1/bin/bash
 multlple variables
for [( a=1, b=10; a <= 10; a++, b-- 1)
do
q$ - es. oqoe
done
$./test9
10
6
E
变量a和b分别用不同的值来初始化并且定义了不同的选代过程。循环的每次选代在增加变量
a的同时减小了变量b。
13.3while命令
while命令某种意义上是if-then语句和for循环的混杂体。while命令允许定义一个要测试
的命令，然后循环执行一组命令，只要定义的测试命令返回的是退出状态码0。它会在每次选代的
一开始测试test命令。在test命令返回非零退出状态码时，while命令会停止执行那组命令。
13.3.1while的基本格式
while命令的格式是：
vhile test cosmand
do
ocher conmande
Gone
while命令中定义的testcommanc和if-then语句（参见第12章）中的格式一模一样。可
以使用任何普通的bash shell命令，或者用test命令进行条件测试，比如测试变量值。
while命令的关键在于所指定的testcommand的退出状态码必须随着循环中运行的命令面
改变。如果退出状态码不发生变化，while循环就将一直不停地进行下去。
最常见的testcommand的用法是用方括号来检查循环命令中用到的shell变量的值。
$ cat test10
+ while comnand test
+1 /bin/bash
var1=10
---
## Page 286
13.3while命令
271
[026-[xeAs10Tm
[ - [xeAs 1s=xeA
echo $var1
$./test10
done
10
了
2
1 
while命令定义了每次选代时检查的测试条件：
[0 16-[xeAs 1T
只要测试条件成立，while命令就会不停地循环执行定义好的命令。在这些命令中，测试条
件中用到的变量必须修改，否则就会陷人无限循环。在本例中，我们用shel算术来将变量值减一：
[  - [xeAs 1s=xeA
whi1e循环会在测试条件不再成立时停止。
13.3.2使用多个测试命令
while命令允许你在while语句行定义多个测试命令。只有最后一个测试命令的退出状态码
会被用来决定什么时候结束循环。如果你不够小心，可能会导致一些有意思的结果。下面的例子
将说明这一点。
$ cat test11
#teating a multicommand wh1le loop
#1/bin/ba.sh
vax1=10
wh1le echo Svar1
[ Svarl -ge  ]
do
var1=S [ $var] - 1 1
$./test11
done
10
13
Thia ia lnside the loop
doo  9 8t 8
---
## Page 287
272
第13章更多的结构化命令
Thia ls inslde the loop
This le inelde the loop
This Le inslde the loop
6
This la inelGe the loop
5
This le inelde the loop
This Le inslde the loop
Thia la inelGe the loop
2
This La inelde the loop
Thi.a 1α ins1dethe loop
0
$
请仔细观察本例中做了什么。while语句中定义了两个测试命令。
vhile echo $var1
[0 af- [xess ]
第一个测试简单地显示了var1变量的当前值。第二个测试用方括号来判断var1变量的值。
在循环内部，echo语句会显示一条简单的消息，说明循环被执行了。注意当你运行本例时输出
是如何结束的。
This la inelde the loop
1
while循环会在var1变量等于o时执行echo语句，然后将var1变量的值减一。接下来再次执
行测试命令，用于下一次送代。echo测试命令被执行并显示了var变量的值（现在小于o了）。直
到shell执行test测试命令，whle循环才会停止：
这说明在含有多个命令的while语句中，在每次选代中所有的测试命令都会被执行，包括测
试命令失败的最后一次选代。要留心这种用法。另一处要留意的是该如何指定多个测试命令。注
意，每个测试命令都出现在单独的一行上。
13.4unti1命令
until命令和while命令工作的方式完全相反。until命令要求你指定一个通常返回非零退
出状态码的测试命令。只有测试命令的退出状态码不为o，bash shell才会执行循环中列出的命令。
一旦测试命令返回了退出状态码。，循环就结束了。
和你想的一样，until命令的格式如下。
unti1 Cest cormazds
dlo
---
## Page 288
13.4until今令
273
done
ocher comanda
和while命令类似，你可以在unti1命令语句中放人多个测试命令。只有最后一个命令的退
出状态码决定了bash shell是否执行已定义的other commands。
下面是使用unti1命令的一个例子。
$ cat test12
using the unti1 command
#1/bin/bash
vax1=100
unti1 [$var1 -eq 0 ]
0
[ sz - [xeAs 1s=xeA
echo $var1
$./test12
done
100
50
75
2.5
$
本例中会测试var1变量来决定unti1循环何时停止。只要该变量的值等于0，unti1命令就
会停止循环。同while命令一样，在unti1命令中使用多个测试命令时要注意。
$ cat test13
using the unti1 command
1/bin/bash
var1=100
unti1 echo Svar1
[ $varl -eq 0 ]
do
echo Inslde the loop: $var1
Gone
var1=$[ $var1 - 25 1
$./test13
Ineide the 1oop: 100
100
Ineide the 1oop: 75
75
0 :do 8 8
50
5 :d 8 8
25
13
shell会执行指定的多个测试命令，只有在最后一个命令成立时停止。
---
## Page 289
274
第13章更多的结构化命令
13.5嵌套循环
循环语句可以在循环内使用任意类型的命令，包括其他循环命令。这种循环叫作丧套环
（nestedloop）。注意，在使用嵌套循环时，你是在选代中使用选代，与命令运行的次数是乘积关
系。不注意这点的话，有可能会在脚本中造成问题。
这里有个在for循环中嵌套for循环的简单例子。
$ cat test14
 neating fox loopa
1/bin/bash
foz [( a = 1; a <= 3; a++ 1)
do
:es doot futaxeas, oqoe
for (1 b = 1; b <= 3; b++ 11
do
echo *
q$ :doot opteu
Gone
$./test14
done
Starting loop 1:
Inside Loop: 1
Inside loop: 2
E :doo 8ps
Startlng loop 2:
Inslde loop:
Inside loop: 2
: doo foaxes
Inslde loop:
E
Ineide 1oop: 2
Inside loop:
1
 :doo 8ptsu
这个被嵌套的循环（也称为内部环，innerloop）会在外部循环的每次选代中遍历一次它所
有的值。注意，两个循环的ao和done命令没有任何差别。bash shell知道当第一个done命令执行
时是指内部循环而非外部循环。
在混用循环命令时也一样，比如在while循环内部放置一个for循环。
$ cat test15
 placing a for loop 1nside a while 1oop
1/bin/bash
var1=5
[0 o6[x△s  TqA
do
echo *0uter loop: Svax1*
for (1 var2 = 1; $var2 < 3; var2++ 1
---
## Page 290
13.5丧套循环
275
[zxens + [xeAs l$=gxeA
echo *
Inner 1oop: Svar1 * $var2 = $var3*
var1=s [ $var1 - 1 1
done
$./test15
done
Outer loop: 5
Inner 1oop: 5 * 1 = 5
Inner loop:
 :d0o[ 1aqn0
Inner 1oop: 4 + 1 = 4
Inner loop:
 :doo 1eno
Inner loop:
 :d00t 19n0