# 35c3CTF Crypto writeup
c3系列CTF题目质量还是很高的。这次比赛有两道Crypto，都属于中等难度。下面是我的Writeup。其中第二道的思路参考了
## unofficial
题目描述
> The NSA gave us these packets, they said it should be just enough to break
> this crypto.  
>  Difficulty estimate: medium
### 题目分析
题目给了两个文件 server.py 和surveillance.pcap  
打开server.py发现代码并不复杂。首先看一下加密用的密钥的生成过程：
    def keygen():
        return [rand() for _ in range(N)]
会随机生成４０个数字，其中随机的具体过程如下：
    def rand():
        return int.from_bytes(os.urandom(bits // 8), 'little')
可以看到是调用的操作系统的`urandom`，而不是python 自己的伪随机函数,因此无法预测出随机数。即密钥是40个无法预测的随机数。  
接着分析加密过程：
    import os, math, sys, binascii
    from secrets import key, flag
    from hashlib import sha256
    from Crypto.Cipher import AES
    p = 21652247421304131782679331804390761485569
    bits = 128
    N = 40
    if __name__ == '__main__':
        # key = keygen()   # generated once & stored in secrets.py
        challenge = keygen()
        print(' '.join(map(str, challenge)))
        response = int(input())
        if response != sum(x*y%p for x, y in zip(challenge, key)):
            print('ACCESS DENIED')
            exit(1)
        print('ACCESS GRANTED')
        cipher = AES.new(
                sha256(' '.join(map(str, key)).encode('utf-8')).digest(),
                AES.MODE_CFB,
                b'\0'*16)
        print(binascii.hexlify(cipher.encrypt(flag)).decode('utf-8'))
题目告诉我们，key只随机生成一次，除了key以外，还会调用`keygen`生成４０个随机数作为challenge,challenge每次都是不同的。初始化完成之后，会把生成的challenge打印给用户，之后会接受用户输入。用户的输入要满足一定的条件才能继续,否则显示`ACCESS
DENIED`。如图所示：
继续分析用户输入需要满足的条件：
    response ＝＝ sum(x*y%p for x, y in zip(challenge, key))
等式的右边是让key 和 challenge中对应的数字两两相乘并求和，即
如果满足条件，服务器会用对key字符串进行sha256签名的结果作为AES密钥，对flag进行加密，并返回密文。由于key保持不变，所以每次返回的密文其实都是一样的。如果我们想要对密文进行解密就必须要恢复key。
分析完脚本，我们再分析题目给的流量包。用wireshark打开流量包，发现流量包记录了40次客户端与服务端的交互数据。第一次的交互数据如图所示：
一开始是服务端发送的40个随机数，然后客户端发送了response(图中红色部分)，response满足条件，服务端打印了ACCESS GRANTED
和加密后的密文`aef8c15e422dfb8443fc94aa9b5234383d8ee523d6da9c4875ccf0d2cf24b1c3fa234e90b9f9757862d242063dbd694806bc54582deddbcbcc`。观察后面的流量，发现确实每次返回的密文都相同。检查流量中的40次交互过程，发现其中39次都成功，但有一次失败。失败的如下图所示：
### 解题思路
总结一下题目的已知条件
  1. 我们有AES加密的密文
  2. 要解密密文必须恢复`key`，`key`是40个随机整数
  3. `key`是随机生成的，并且使用的是系统随机数，而不是伪随机算法
  4. 我们可以从流量中提取出39个关于`key`的等式，其中只有`key`是未知的，`challenge`和`response`都是可以从流量中获得的。
这样我们可以把求解key的问题转换为线性代数问题。key为40个未知数 x1 ... x40。每个等式都是关于ｘi的方程。
这39个等式构成一个40元一次线性方程组，对该方程组求解即可得到key。用矩阵表示这个乘法为
常识上说，要解40元一次线性方程组必须要有40个等式，我们只有39个等式，无法求解。但只要有一些线性代数知识就可以知道，非齐次线性方程组的解的情况其实是和矩阵`Challenge`的秩有关。等式的数量少于未知数的数量有可能无解也有可能有无数个解。我们可以用`sagemath`对该非齐次线性方程组求解，可求得一个特解。经尝试，该特解恰好就是key,可以直接解出密文。
### 解题脚本
    from sage.all import *
    p = 21652247421304131782679331804390761485569
    I = Integers(p)
    CHM = Matrix(I,CH)
    AWM = vector(I,AW)
    KM=CHM.solve_right(AWM)
    from Crypto.Cipher import AES
    from hashlib import sha256
    key=list(KM)
    print len(key)
    print ' '.join(map(str, key)).encode('utf-8')
    cipher = AES.new(sha256(' '.join(map(str, key)).encode('utf-8')).digest(),AES.MODE_CFB,b'\0'*16)
    c = "aef8c15e422dfb8443fc94aa9b5234383d8ee523d6da9c4875ccf0d2cf24b1c3fa234e90b9f9757862d242063dbd694806bc54582deddbcbcc"
    c=c.decode("hex")
    print repr(c)
    print cipher.decrypt(c)
flag 35C3_as_an_att4ck3r_I_am_b1as3d_t0wards_b1ased_r4nd0mness
## post quantum
题目描述
> Somebody asked for more crypto challenges, so we made one in the middle of
> the night. Now you better solve it.
### 题目分析
题目给了两个脚本`challenge.py` `generate.py`和一个文件夹`data`  
先看一下`generate.py`
    from challenge import CodeBasedEncryptionScheme
    from random import SystemRandom
    from os import urandom
    if __name__ == "__main__":
        cipher = CodeBasedEncryptionScheme.new()
        random = SystemRandom()
        for i in range(1024 + 512):
            pt = urandom(2)
            ct = cipher.encrypt(pt)
            with open("plaintext_{:03d}".format(i), "wb") as f:
                f.write(pt)
            with open("ciphertext_{:03d}".format(i), "wb") as f:
                f.write(ct)
            assert(pt == cipher.decrypt(ct))
        with open("flag.txt", "rb") as f:
           flag = f.read().strip()
        if len(flag) % 2 != 0:
            flag += b"\0"
        cts = list()
        for i in range(len(flag) // 2):
            cts.append(cipher.encrypt(flag[i*2:i*2 + 2]))
        for i, ct in enumerate(cts):
            with open("flag_{:02d}".format(i), "wb") as f:
                f.write(ct)
引入了出题人的加密系统`CodeBasedEncryptionScheme`,观察其加密过程，发现其一次加密２个字节。首先先加密了`1024+512=1536`组随机内容，并且加明文和对应的密文都给了我们。最后再２字节２字节的加密flag。揣摩出题人的意图，猜测应该是希望我们根据题目所给的1536组明密文对，恢复出密钥，然后再进行解密。  
可以看看所给的明密文对。明文为２字节，密文长0x126字节
接着分析具体的加密过程。先看密钥的生成：
    bitlength=48
    def keygen(cls, bitlength):