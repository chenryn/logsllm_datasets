21561 pg93      20   0 2271m 1.9g 1.9g R 20.7  2.0   0:12.63 postgres: postgres digoal [local] COPY                                   
21562 pg93      20   0 2271m 1.9g 1.9g R 20.7  2.0   0:12.83 postgres: postgres digoal [local] COPY                                   
21563 pg93      20   0 2271m 1.9g 1.9g S 20.7  2.0   0:12.71 postgres: postgres digoal [local] COPY waiting                           
21556 pg93      20   0 2271m 1.9g 1.9g S 17.2  2.0   0:12.58 postgres: postgres digoal [local] COPY waiting  
```  
通过pg_locks, 发现是存储扩展锁.  
```  
digoal=# select * from pg_locks where not granted;  
 locktype | database | relation | page | tuple | virtualxid | transactionid | classid | objid | objsubid | virtualtransaction |  pid  
  |     mode      | granted | fastpath   
----------+----------+----------+------+-------+------------+---------------+---------+-------+----------+--------------------+-----  
--+---------------+---------+----------  
 extend   |    16384 |    65765 |      |       |            |               |         |       |          | 6/30               | 2159  
6 | ExclusiveLock | f       | f  
 extend   |    16384 |    65765 |      |       |            |               |         |       |          | 9/30               | 2159  
9 | ExclusiveLock | f       | f  
 extend   |    16384 |    65765 |      |       |            |               |         |       |          | 8/30               | 2159  
8 | ExclusiveLock | f       | f  
 extend   |    16384 |    65765 |      |       |            |               |         |       |          | 3/49               | 2159  
3 | ExclusiveLock | f       | f  
 extend   |    16384 |    65765 |      |       |            |               |         |       |          | 2/143              | 2159  
2 | ExclusiveLock | f       | f  
(5 rows)  
```  
并发越大, 锁概率越大, 下面我们使用stap来跟踪, 锁耗费了多少时间.  
```  
pg93@db-172-16-3-150-> pgbench -M prepared -n -r -f ./test.sql -c 16 -j 4 -t 1   
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 16  
number of threads: 4  
number of transactions per client: 1  
number of transactions actually processed: 16/16  
tps = 0.261183 (including connections establishing)  
tps = 0.261247 (excluding connections establishing)  
statement latencies in milliseconds:  
        61234.802062    copy t from '/home/pg93/t.dmp' with (header off);  
```  
一次copy的时间是61秒.  
锁耗费的时间是47.5秒.  
```  
stap -e '  
global arr1%[12000] , arr2%[12000]  
probe process("/home/pg93/pgsql9.3.1/bin/postgres").mark("lock__wait__start") {  
  arr1[pid(),$arg1,$arg2,$arg3,$arg4,$arg5,$arg6] = gettimeofday_us()  
}  
probe process("/home/pg93/pgsql9.3.1/bin/postgres").mark("lock__wait__done") {  
  t = gettimeofday_us()  
  pid = pid()  
  lv = arr1[pid,$arg1,$arg2,$arg3,$arg4,$arg5,$arg6]  
  if ( lv )  
    arr2[pid,$arg1,$arg2,$arg3,$arg4,$arg5,$arg6] '(2168900,16)';  
digoal=# vacuum (freeze,verbose,analyze) t;  
WARNING:  pgstat wait timeout  
INFO:  vacuuming "postgres.t"  
INFO:  scanned index "idx_t_id" to remove 39039999 row versions  
DETAIL:  CPU 0.41s/23.03u sec elapsed 24.84 sec.  
INFO:  "t": removed 39039999 row versions in 2168901 pages  
DETAIL:  CPU 15.37s/7.40u sec elapsed 180.92 sec.  
INFO:  index "idx_t_id" now contains 1 row versions in 135228 pages  
DETAIL:  39039999 index row versions were removed.  
134262 index pages have been deleted, 0 are currently reusable.  
CPU 0.00s/0.00u sec elapsed 0.00 sec.  
INFO:  "t": found 39039999 removable, 1 nonremovable row versions in 2168901 out of 2168901 pages  
DETAIL:  0 dead row versions cannot be removed yet.  
There were 0 unused item pointers.  
0 pages are entirely empty.  
CPU 31.58s/41.81u sec elapsed 337.35 sec.  
INFO:  vacuuming "pg_toast.pg_toast_65765"  
INFO:  index "pg_toast_65765_index" now contains 0 row versions in 1 pages  
DETAIL:  0 index row versions were removed.  
0 index pages have been deleted, 0 are currently reusable.  
CPU 0.00s/0.00u sec elapsed 0.00 sec.  
INFO:  "pg_toast_65765": found 0 removable, 0 nonremovable row versions in 0 out of 0 pages  
DETAIL:  0 dead row versions cannot be removed yet.  
There were 0 unused item pointers.  
0 pages are entirely empty.  
CPU 0.00s/0.00u sec elapsed 0.00 sec.  
INFO:  analyzing "postgres.t"  
INFO:  "t": scanned 30000 of 2168901 pages, containing 0 live rows and 0 dead rows; 0 rows in sample, 1 estimated total rows  
VACUUM  
digoal=# checkpoint;  
CHECKPOINT  
digoal=# \dt+ t  
                    List of relations  
  Schema  | Name | Type  |  Owner   | Size  | Description   
----------+------+-------+----------+-------+-------------  
 postgres | t    | table | postgres | 17 GB |   
(1 row)  
pg93@db-172-16-3-150-> pgbench -M prepared -n -r -f ./test.sql -c 16 -j 4 -t 4  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 16  
number of threads: 4  
number of transactions per client: 4  
number of transactions actually processed: 64/64  
tps = 0.750399 (including connections establishing)  
tps = 0.750523 (excluding connections establishing)  
statement latencies in milliseconds:  
        20898.632172    copy t from '/home/pg93/t.dmp' with (header off);  
```  
在没有main fork extend的情况下(有少量的index main fork extend).  
每秒约导入188MB 或 45.77万条记录.  
将硬盘更换为ocz REVOdrive3 240G pci-e 速度再次提升 :   
```  
pg93@db-172-16-3-150-> pgbench -M prepared -n -r -f ./test.sql -c 8 -j 4 -t 4  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 8  
number of threads: 4  
number of transactions per client: 4  
number of transactions actually processed: 32/32  
tps = 0.891562 (including connections establishing)  
tps = 0.891753 (excluding connections establishing)  
statement latencies in milliseconds:  
        8830.211750     copy t from '/home/pg93/t.dmp' with (header off);  
```  
每秒约导入236MB 或 54.3万条记录.  
删除索引后, 纯粹的文本导入. 性能再次提升 :   
```  
digoal=# drop index idx_t_id;  
pg93@db-172-16-3-150-> pgbench -M prepared -n -r -f ./test.sql -c 8 -j 4 -t 4  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 8  
number of threads: 4  
number of transactions per client: 4  
number of transactions actually processed: 32/32  
tps = 1.077338 (including connections establishing)  
tps = 1.077610 (excluding connections establishing)  
statement latencies in milliseconds:  
        7243.755187     copy t from '/home/pg93/t.dmp' with (header off);  
```  
每秒约导入285.5MB 或 65.7万条记录.  
同样场景下, 接下来要做的是将blocksize调成最大(即32KB), wal block也调整成最大(64KB), 并且不初始化表的情况下来压一下, 看看性能有多少提升. 理论上会有一定的提升.  
对比每秒约导入106MB 或 25.8万条记录, 这个测试结果.  
场景中除了wal和block块大小不一样其他都一样.  
```  
./configure --prefix=/home/pg931/pgsql9.3.1 --with-pgport=1922 --with-perl --with-tcl --with-python --with-openssl --with-pam --without-ldap --with-libxml --with-libxslt --enable-thread-safety --with-wal-blocksize=64 --with-blocksize=32 --enable-dtrace --enable-debug  
[root@db-172-16-3-150 ssd1]# mkdir -p /ssd1/pg931/pg_root  
[root@db-172-16-3-150 ssd1]# mkdir -p /ssd2/pg931/pg_xlog  
[root@db-172-16-3-150 ssd1]# mkdir -p /ssd3/pg931/tbs_digoal  
[root@db-172-16-3-150 ssd1]# mkdir -p /ssd4/pg931/tbs_digoal_idx  
[root@db-172-16-3-150 postgresql-9.3.1]# chown -R pg931:pg931 /ssd*/pg931  
[root@db-172-16-3-150 postgresql-9.3.1]# su - pg931  
pg931@db-172-16-3-150-> initdb -D $PGDATA -E UTF8 --locale=C -U postgres -W -X /ssd2/pg931/pg_xlog  
[root@db-172-16-3-150 postgresql-9.3.1]# cp /ssd1/pg93/pg_root/postgresql.conf /ssd1/pg931/pg_root/  
cp: overwrite `/ssd1/pg931/pg_root/postgresql.conf'? y  
[root@db-172-16-3-150 postgresql-9.3.1]# cp /ssd1/pg93/pg_root/pg_hba.conf /ssd1/pg931/pg_root/  
cp: overwrite `/ssd1/pg931/pg_root/pg_hba.conf'? y  
chown -R pg931:pg931 /ssd1/pg931  
vi postgresql.conf  
port = 1922  
pg_ctl start  
psql  
postgres=# create role digoal;  
CREATE ROLE  
postgres=# create tablespace tbs_digoal location '/ssd3/pg931/tbs_digoal';  
CREATE TABLESPACE  
postgres=# create tablespace tbs_digoal_idx location '/ssd4/pg931/tbs_digoal_idx';  
CREATE TABLESPACE  
postgres=# create database digoal template template0 encoding 'UTF8' tablespace tbs_digoal;  
postgres=# \c digoal  
You are now connected to database "digoal" as user "postgres".  
digoal=# create table t (id int, c1 text, c2 text, c3 text, c4 text, c5 text, c6 text, c7 text, c8 text, c9 text, c10 text, c11 text, c12 text, c13 timestamp);  
CREATE TABLE  
digoal=# create index idx_t_id on t(id);  