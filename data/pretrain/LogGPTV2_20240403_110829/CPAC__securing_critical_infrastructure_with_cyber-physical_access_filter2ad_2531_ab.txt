mation and sensor measurements, but lack the ability to determine
where data entries originate and the understanding of plant physics
necessary to capture inter-data entry correlation. As a result, sim-
ple mistakes from operators can bring down the whole grid, causing
millions of dollars of damage [10, 26]. Similarly, while state esti-
mation modules provide a global view of the power system’s state
and parameters such as line current and bus voltages, they cannot
restrict unprivileged operators from observing sensitive system in-
formation, which compromises operation privacy [7, 41]. Further-
more, while power ﬂow solutions [34] have functionality to drive
the system away from unsafe states, they do not distinguish among
140
operators with different privilege levels. In general, current EMS
solutions solely count on correct actions from operators, who usu-
ally only need a password to log in the system and are governed by
simple policies (if even these exist), and ignore the risk of opera-
tional errors or insiders attacks.
Another signiﬁcant shortcoming in existing EMS solutions is
the limited ability to perform contingency analysis. Within North
America, power utilities must implement N −1 contingency analy-
ses to comply with the North American Electric Reliability Cor-
poration Critical Infrastructure Protection (NERC-CIP) require-
ments [38]. An N − 1 analysis determines whether a power system
with N components (e.g., generators) can maintain its operation de-
spite any single component failure. However, a coordinated attack
against more than one element within the grid or multiple invol-
untary components failures renders N − 1 analysis ineffective as
occurred in the southwest blackout incident [10]. The state space
explosion associated with performing N − 2 analysis and for larger
numbers of component failures makes these analyses infeasible as
shown in Section 9.
2.2 Security Threats
The threats we consider are mistakes from careless operators and
intentional system manipulation from malicious adversaries, who
could be operators or anyone having access to the EMS. Instead
of focusing on the authentication of EMS operators, CPAC tries
to authorize each operation request from legal users. Note that the
whole EMS is trusted, and we assume operators do not have physi-
cal access to these machines except through the GUI/CLI terminal
provided by the EMS.
Why don’t existing access control mechanisms sufﬁce? Exist-
ing host and network-based mechanisms that rely strictly on access
control have proven to be insufﬁcient in ICS environments, where
cyber and physical components interact as a part of the system op-
eration. A shortcoming of existing access control solutions, such
as host-based policy enforcement (e.g., SELinux) and network ﬁre-
walls, are that they ignore the underlying physics of the control sys-
tems that they protect2. Consequently, implementation of privilege
separation and least privilege principles in highly dynamic control
system environments become infeasible as access control policies
for individual subjects and roles depend on the dynamically chang-
ing physical state of the plant. The state of the system may change
due to actions by other subjects, e.g., a legitimate power opera-
tor on a remote substation computer increases the amount of power
generation, or external malicious adversaries, e.g., malware on a re-
mote substation computer opens a power transmission line leaving
it out of service. Such incidents change the state of the underlying
power system and affect access control policy rules for operators.
This increases the risk that subsequent operations (either mistakes
or attacks), permitted by a static policy, could compromise system
dynamics thus cause damages.
Why do control system safety mechanisms fail to stop opera-
tional errors or even attacks? Traditional control system safety
mechanisms have been designed to maintain safety only for phys-
ical system operations. For example, safety mechanisms in power
systems include protection relays and circuit breakers to isolate
transmission lines with over-capacity high current ﬂow. Moreover,
these mechanisms only consider the physical component involved
in the operation rather than a complete system impact of the op-
eration. They are designed to provide reliability and robustness in
the case of accidents or harsh environments. They do not, however,
take into account a careless operator’s mistake, which may crash
the whole system, let alone a malicious insider who analyzes the
operational changes in a system as it responds to problems, and
exploits this behavior to further force the system into an unsafe
state [22]. While research into secure control estimation [31, 47,
42] can aid in developing more robust control algorithms, these ap-
proaches are largely theoretical and do not consider mistakes from
2E.g., SELinux is not able to limit the CPU temperature.
(cid:9)(cid:28)(cid:26)(cid:27)(cid:50)(cid:11)(cid:22)(cid:41)(cid:22)(cid:29)(cid:1)(cid:4)(cid:32)(cid:31)(cid:37)(cid:22)(cid:43)(cid:37)(cid:50)(cid:3)(cid:18)(cid:36)(cid:22)(cid:21)(cid:1)(cid:13)(cid:32)(cid:29)(cid:28)(cid:20)(cid:44)(cid:1)
(cid:35)(cid:42)(cid:43)(cid:1)(cid:18)(cid:20)(cid:20)(cid:22)(cid:36)(cid:36)(cid:1)(cid:35)(cid:22)(cid:34)(cid:40)(cid:22)(cid:36)(cid:37)(cid:36)(cid:1)
(cid:22)(cid:36)(cid:37)(cid:36)(cid:1)
(cid:36)(cid:22)(cid:20)(cid:40)(cid:35)(cid:28)(cid:37)(cid:44)(cid:49)(cid:36)(cid:18)(cid:23)(cid:22)(cid:37)(cid:44)(cid:1)(cid:18)(cid:21)(cid:30)(cid:28)(cid:31)(cid:1)
(cid:32)(cid:33)(cid:22)(cid:35)(cid:18)(cid:37)(cid:32)(cid:35)(cid:36)(cid:1)
(cid:3)(cid:17)(cid:11)(cid:19)(cid:12)(cid:22)(cid:1)(cid:5)(cid:8)(cid:17)(cid:8)(cid:12)(cid:11)(cid:16)(cid:11)(cid:17)(cid:21)(cid:1)(cid:7)(cid:22)(cid:20)(cid:21)(cid:11)(cid:16)(cid:1)(cid:51)(cid:17)(cid:28)(cid:31)(cid:21)(cid:32)(cid:42)(cid:36)(cid:1)(cid:30)(cid:18)(cid:20)(cid:27)(cid:28)(cid:31)(cid:22)(cid:52)(cid:1)
(cid:12)(cid:25)(cid:28)(cid:31)(cid:22)(cid:1)
(cid:12)(cid:31)(cid:29)(cid:28)(cid:31)(cid:22)(cid:1)
(cid:4)(cid:32)(cid:31)(cid:37)(cid:35)(cid:32)(cid:29)(cid:1)(cid:11)(cid:32)(cid:26)(cid:28)(cid:20)(cid:1)(cid:14)(cid:44)(cid:30)(cid:19)(cid:32)(cid:29)(cid:28)(cid:20)(cid:1)(cid:6)(cid:43)(cid:22)(cid:20)(cid:40)(cid:38)(cid:32)(cid:31)(cid:1)
(cid:13)(cid:11)(cid:4)(cid:36)(cid:48)(cid:1)(cid:15)(cid:18)(cid:28)(cid:31)(cid:37)(cid:1)(cid:10)(cid:31)(cid:23)(cid:32)(cid:46)(cid:1)(cid:4)(cid:32)(cid:29)(cid:29)(cid:22)(cid:20)(cid:38)(cid:32)(cid:31)(cid:1)(cid:1)
(cid:13)(cid:27)(cid:44)(cid:36)(cid:28)(cid:20)(cid:36)(cid:50)(cid:2)(cid:42)(cid:18)(cid:35)(cid:22)(cid:1)(cid:11)(cid:32)(cid:42)(cid:50)(cid:11)(cid:22)(cid:41)(cid:22)(cid:29)(cid:1)(cid:13)(cid:32)(cid:29)(cid:28)(cid:20)(cid:44)(cid:1)(cid:8)(cid:22)(cid:31)(cid:22)(cid:35)(cid:18)(cid:38)(cid:32)(cid:31)(cid:1)
(cid:7)(cid:32)(cid:35)(cid:30)(cid:18)(cid:29)(cid:1)(cid:13)(cid:32)(cid:29)(cid:28)(cid:20)(cid:44)(cid:1)(cid:6)(cid:31)(cid:23)(cid:32)(cid:35)(cid:20)(cid:22)(cid:30)(cid:22)(cid:31)(cid:37)(cid:1)
(cid:35)(cid:22)(cid:18)(cid:21)(cid:1)(cid:20)(cid:32)(cid:31)(cid:37)(cid:35)(cid:32)(cid:29)(cid:29)(cid:22)(cid:35)(cid:1)(cid:41)(cid:18)(cid:35)(cid:28)(cid:18)(cid:19)(cid:29)(cid:22)(cid:1)
(cid:42)(cid:35)(cid:28)(cid:37)(cid:22)(cid:1)(cid:20)(cid:32)(cid:31)(cid:37)(cid:35)(cid:32)(cid:29)(cid:29)(cid:22)(cid:35)(cid:1)(cid:41)(cid:18)(cid:35)(cid:28)(cid:18)(cid:19)(cid:29)(cid:22)(cid:1)
(cid:20)(cid:32)(cid:31)(cid:37)(cid:35)(cid:32)(cid:29)(cid:1)(cid:29)(cid:32)(cid:26)(cid:28)(cid:20)(cid:1)(cid:51)(cid:22)(cid:43)(cid:22)(cid:20)(cid:40)(cid:37)(cid:22)(cid:52)(cid:1)
(cid:6)(cid:19)(cid:18)(cid:12)(cid:19)(cid:8)(cid:16)(cid:16)(cid:8)(cid:9)(cid:15)(cid:11)(cid:1)(cid:4)(cid:18)(cid:12)(cid:14)(cid:10)(cid:1)(cid:2)(cid:18)(cid:17)(cid:21)(cid:19)(cid:18)(cid:15)(cid:15)(cid:11)(cid:19)(cid:20)(cid:1)(cid:51)(cid:21)(cid:28)(cid:36)(cid:20)(cid:35)(cid:22)(cid:37)(cid:22)(cid:1)(cid:36)(cid:22)(cid:34)(cid:40)(cid:22)(cid:31)(cid:38)(cid:18)(cid:29)(cid:1)(cid:29)(cid:32)(cid:26)(cid:28)(cid:20)(cid:52)(cid:1)
(cid:16)(cid:36)(cid:22)(cid:35)(cid:1)(cid:29)(cid:22)(cid:41)(cid:22)(cid:29)(cid:1)
(cid:4)(cid:32)(cid:31)(cid:37)(cid:35)(cid:32)(cid:29)(cid:1)(cid:29)(cid:32)(cid:26)(cid:28)(cid:20)(cid:1)(cid:53)(cid:1)
(cid:4)(cid:32)(cid:31)(cid:37)(cid:35)(cid:32)(cid:29)(cid:1)(cid:29)(cid:32)(cid:26)(cid:28)(cid:20)(cid:1)(cid:54)(cid:1) (cid:47)(cid:1)
(cid:4)(cid:32)(cid:31)(cid:37)(cid:35)(cid:32)(cid:29)(cid:1)(cid:29)(cid:32)(cid:26)(cid:28)(cid:20)(cid:1)(cid:31)(cid:1)
(cid:7)(cid:28)(cid:35)(cid:30)(cid:42)(cid:18)(cid:35)(cid:22)(cid:1)
(cid:11)(cid:28)(cid:26)(cid:27)(cid:37)(cid:42)(cid:22)(cid:28)(cid:26)(cid:27)(cid:37)(cid:1)(cid:12)(cid:31)(cid:50)(cid:5)(cid:22)(cid:41)(cid:28)(cid:20)(cid:22)(cid:1)(cid:15)(cid:18)(cid:28)(cid:31)(cid:37)(cid:50)(cid:2)(cid:31)(cid:18)(cid:29)(cid:44)(cid:36)(cid:28)(cid:36)(cid:1)(cid:6)(cid:31)(cid:26)(cid:28)(cid:31)(cid:22)(cid:1)
(cid:36)(cid:22)(cid:31)(cid:36)(cid:32)(cid:35)(cid:1)(cid:30)(cid:22)(cid:18)(cid:36)(cid:40)(cid:35)(cid:22)(cid:30)(cid:22)(cid:31)(cid:37)(cid:36)(cid:1)(cid:51)(cid:36)(cid:22)(cid:31)(cid:36)(cid:28)(cid:31)(cid:26)(cid:1)(cid:33)(cid:32)(cid:28)(cid:31)(cid:37)(cid:36)(cid:52)(cid:1)
(cid:20)(cid:32)(cid:31)(cid:37)(cid:35)(cid:32)(cid:29)(cid:1)(cid:20)(cid:32)(cid:30)(cid:30)(cid:18)(cid:31)(cid:21)(cid:36)(cid:1)(cid:51)(cid:18)(cid:20)(cid:37)(cid:40)(cid:18)(cid:38)(cid:32)(cid:31)(cid:1)(cid:33)(cid:32)(cid:28)(cid:31)(cid:37)(cid:36)(cid:52)(cid:1)
(cid:6)(cid:13)(cid:22)(cid:20)(cid:14)(cid:10)(cid:8)(cid:15)(cid:1)(cid:6)(cid:15)(cid:8)(cid:17)(cid:21)(cid:1)(cid:51)(cid:20)(cid:32)(cid:31)(cid:38)(cid:31)(cid:40)(cid:32)(cid:40)(cid:36)(cid:1)(cid:21)(cid:28)(cid:24)(cid:22)(cid:35)(cid:22)(cid:31)(cid:38)(cid:18)(cid:29)(cid:1)(cid:21)(cid:44)(cid:31)(cid:18)(cid:30)(cid:28)(cid:20)(cid:36)(cid:52)(cid:1)
Figure 2: CPAC’s High-Level Architecture
operators or attacks from insiders.
Information tracking
3. CPAC ARCHITECTURE OVERVIEW
We provide a high-level overview of CPAC and describe how it
addresses the issues raised above. We further detail in Section 3.3
the factors resulting in the 2011 California outage discussed in the
introduction [10], and how CPAC could have prevented this failure.
While the guarantees that CPAC provides could be applicable
to any cyber-physical infrastructure, we focus on its use as a secu-
rity protection and access control solution for the smart power grid,
with multiple PLCs receiving information and sending data back to
an EMS. This setup is illustrated in Figure 2. In practice, each PLC
often ships with proprietary engineering software running within
the EMS. This is used both ofﬂine, for control logic development
and execution on the PLC, and online within the EMS, for run-
time monitoring and modiﬁcation of a deployed PLC’s variables.
The PLC is also connected to the physical plant through lines from
sensors within the plant that serve as input, and outgoing wires to
actuators within the plant for process control.
3.1
CPAC facilitates security access control in cyber-physical power
grid infrastructures and consists of two major components, one re-
siding within the EMS and the other within the PLCs. As the PLC
has limited computational resources and hard real-time require-
ments for processing data, any security solution must minimize per-
formance overhead. To meet these requirements, CPAC ofﬂoads
most computation from the PLC to a server at the EMS, which
communicates with individual PLCs to obtain ﬁne-grained infor-
mation about device execution. We use ofﬂine pre-processing tech-
niques to minimize run-time requirements. Given a new PLC con-
trol logic, CPAC symbolically executes the code and determines
the source of incoming data for every output variable over all fea-
sible execution paths. This information is stored in a lookup table.
Consequently, rather than typical heavyweight run-time taint anal-
ysis, CPAC calculates the taint information through lightweight
execution path proﬁling to minimize run-time overhead. CPAC’s
PLC-based dynamic analysis engine only tracks the execution path
of the running control logic (Figure 2). Dynamic tracking of the
execution path merely requires run-time monitoring for branch in-
structions on the PLC, a signiﬁcant computational reduction com-
pared to dynamic on-device byte-level taint analysis. CPAC uses
lightweight control logic instrumentation before every control logic
141
(cid:7)(cid:17)(cid:15)(cid:1)(cid:2)(cid:10)(cid:21)(cid:24)(cid:8)(cid:22)(cid:17)(cid:16)(cid:1)(cid:5)(cid:17)(cid:13)(cid:16)(cid:21)(cid:20)(cid:1)(cid:51)(cid:40)(cid:25)(cid:17)(cid:35)(cid:1)(cid:13)(cid:31)(cid:29)(cid:1)(cid:19)(cid:17)(cid:30)(cid:1)(cid:19)(cid:25)(cid:17)(cid:30)(cid:24)(cid:21)(cid:1)(cid:31)(cid:30)(cid:1)(cid:35)(cid:25)(cid:21)(cid:1)(cid:32)(cid:28)(cid:17)(cid:30)(cid:35)(cid:52)(cid:45)(cid:1)(cid:1)
(cid:11)(cid:31)(cid:40)(cid:21)(cid:33)(cid:1)(cid:4)(cid:21)(cid:30)(cid:21)(cid:33)(cid:17)(cid:36)(cid:31)(cid:30)(cid:1)(cid:12)(cid:21)(cid:35)(cid:50)(cid:11)(cid:31)(cid:26)(cid:30)(cid:35)(cid:1)(cid:22)(cid:31)(cid:33)(cid:1)(cid:2)(cid:31)(cid:34)(cid:35)(cid:31)(cid:30)(cid:1)(cid:4)(cid:21)(cid:30)(cid:21)(cid:33)(cid:17)(cid:35)(cid:31)(cid:33)(cid:1)(cid:1)
(cid:59)(cid:46)(cid:1)(cid:13)(cid:31)(cid:29)(cid:45)(cid:1)(cid:12)(cid:21)(cid:35)(cid:1)(cid:2)(cid:31)(cid:34)(cid:35)(cid:31)(cid:30)(cid:1)(cid:4)(cid:21)(cid:30)(cid:21)(cid:33)(cid:17)(cid:35)(cid:31)(cid:33)(cid:1)(cid:51)(cid:2)(cid:46)(cid:4)(cid:52)(cid:1)(cid:12)(cid:21)(cid:35)(cid:50)(cid:11)(cid:31)(cid:26)(cid:30)(cid:35)(cid:1)(cid:35)(cid:31)(cid:1)(cid:57)(cid:58)(cid:1)(cid:8)(cid:15)(cid:1)
(cid:62)(cid:46)(cid:1)
(cid:13)(cid:31)(cid:29)(cid:1)
(cid:57)(cid:46)(cid:1)(cid:13)(cid:25)(cid:21)(cid:1)(cid:34)(cid:21)(cid:19)(cid:38)(cid:33)(cid:26)(cid:35)(cid:41)(cid:1)(cid:17)(cid:20)(cid:29)(cid:26)(cid:30)(cid:1)(cid:20)(cid:21)(cid:23)(cid:30)(cid:21)(cid:34)(cid:1)(cid:35)(cid:25)(cid:21)(cid:1)(cid:25)(cid:26)(cid:24)(cid:25)(cid:50)(cid:28)(cid:21)(cid:39)(cid:21)(cid:28)(cid:1)(cid:32)(cid:31)(cid:28)(cid:26)(cid:19)(cid:26)(cid:21)(cid:34)(cid:45)(cid:1)
(cid:6)(cid:8)(cid:12)(cid:11)(cid:21)(cid:26)(cid:29)(cid:10)(cid:17)(cid:16)(cid:21)(cid:11)(cid:25)(cid:21)(cid:1)(cid:18)(cid:17)(cid:14)(cid:13)(cid:10)(cid:26)(cid:28)(cid:1)
(cid:6)(cid:8) (cid:11)(cid:21)(cid:26) (cid:10)(cid:17) (cid:21)(cid:11) (cid:21) (cid:18)
(cid:10)(cid:32)(cid:21)(cid:33)(cid:17)(cid:35)(cid:31)(cid:33)(cid:1)(cid:13)(cid:31)(cid:29)(cid:1)(cid:34)(cid:25)
(cid:10)(cid:32)(cid:21)(cid:33)(cid:17)(cid:35)(cid:31)(cid:33)(cid:1)(cid:13)(cid:31)(cid:29)(cid:1)(cid:34)(cid:25)(cid:31)(cid:38)(cid:28)(cid:20)(cid:1)(cid:30)(cid:31)(cid:35)(cid:1)(cid:26)(cid:30)(cid:19)(cid:33)(cid:21)(cid:17)(cid:34)(cid:21)(cid:1)(cid:35)(cid:25)(cid:21)(cid:1)(cid:9)(cid:21)(cid:40)(cid:1)(cid:16)(cid:31)(cid:33)(cid:27)(cid:1)(cid:18)(cid:38)(cid:34)(cid:1)(cid:39)(cid:31)(cid:28)(cid:35)(cid:17)(cid:24)(cid:21)(cid:1)(cid:17)(cid:18)(cid:31)(cid:39)(cid:21)(cid:1)(cid:57)(cid:56)(cid:56)(cid:6)(cid:14)(cid:1)(cid:1)(cid:1)
(cid:60)(cid:46)(cid:1)(cid:5)(cid:34)(cid:1)(cid:25)(cid:21)(cid:1)(cid:17)(cid:28)(cid:28)(cid:31)(cid:40)(cid:21)(cid:20)(cid:1)(cid:35)(cid:31)(cid:1)(cid:34)(cid:21)(cid:35)(cid:1)(cid:2)(cid:46)(cid:4)(cid:1)(cid:35)(cid:31)(cid:1)(cid:57)(cid:58)(cid:8)(cid:15)(cid:44)(cid:1)
(cid:11)(cid:25)(cid:41)(cid:34)(cid:26)(cid:19)(cid:34)(cid:1)(cid:3)(cid:30)(cid:24)(cid:26)(cid:30)(cid:21)(cid:1)
(cid:7)(cid:31)(cid:24)(cid:26)(cid:19)(cid:50)(cid:2)(cid:17)(cid:34)(cid:21)(cid:20)(cid:1)(cid:11)(cid:31)(cid:28)(cid:26)(cid:19)(cid:41)(cid:1)
(cid:3)(cid:30)(cid:22)(cid:31)(cid:33)(cid:19)(cid:21)(cid:29)(cid:21)(cid:30)(cid:35)(cid:1)
(cid:3)(cid:4)(cid:6)(cid:1)
(cid:61)(cid:46)(cid:1)(cid:9)(cid:31)(cid:43)(cid:1)
(cid:58)(cid:46)(cid:1)(cid:4)(cid:21)(cid:30)(cid:21)(cid:33)(cid:17)(cid:35)(cid:21)(cid:20)(cid:1)(cid:11)(cid:16)(cid:12)(cid:17)(cid:19)(cid:10)(cid:11)(cid:8)(cid:9)(cid:14)(cid:11)(cid:1)(cid:32)(cid:31)(cid:28)(cid:26)(cid:19)(cid:41)(cid:1)(cid:33)(cid:38)(cid:28)(cid:21)(cid:1)(cid:1)
(cid:2)(cid:1)(cid:48)(cid:56)(cid:1)(cid:63)(cid:1)(cid:13)(cid:31)(cid:29)(cid:47)(cid:34)(cid:1)(cid:26)(cid:30)(cid:32)(cid:38)(cid:35)(cid:1)(cid:51)(cid:2)(cid:31)(cid:34)(cid:35)(cid:31)(cid:30)(cid:1)(cid:4)(cid:21)(cid:30)(cid:21)(cid:33)(cid:17)(cid:35)(cid:31)(cid:33)(cid:1)(cid:12)(cid:21)(cid:35)(cid:50)(cid:11)(cid:31)(cid:26)(cid:30)(cid:35)(cid:52)(cid:1)(cid:63)(cid:1)(cid:57)(cid:56)(cid:8)(cid:15)(cid:49)(cid:1)
(cid:53)(cid:18)(cid:21)(cid:19)(cid:17)(cid:38)(cid:34)(cid:21)(cid:1)(cid:25)(cid:26)(cid:24)(cid:25)(cid:21)(cid:33)(cid:1)(cid:34)(cid:21)(cid:35)(cid:50)(cid:32)(cid:31)(cid:26)(cid:30)(cid:35)(cid:1)(cid:40)(cid:26)(cid:28)(cid:28)(cid:1)(cid:19)(cid:17)(cid:38)(cid:34)(cid:21)(cid:1)(cid:25)(cid:26)(cid:24)(cid:25)(cid:1)(cid:9)(cid:16)(cid:1)(cid:18)(cid:38)(cid:34)(cid:1)(cid:39)(cid:31)(cid:28)(cid:35)(cid:17)(cid:24)(cid:21)(cid:54)(cid:1)(cid:1)
Figure 3: Physics-Aware Access Control
download on the PLC. The PLC-based agent sends collected execu-
tion path information to CPAC’s EMS-side agent, which consults
the symbolic execution lookup table for taint information regarding
the affected sensing points.
Apart from the EMS, the device side must also be controlled.
For example, Tom (Figure 3) could violate policy by downloading
malicious or buggy control logic onto a PLC, or modifying its inter-
nal variables through the EMS interface. In either case, enforcing
the policy requires analysis at the granularity of individual PLCs
to calculate how Tom’s actions would affect sensors and actuators
throughout the plant. Therefore, before every control logic down-
load to the PLC, CPAC performs an ofﬂine symbolic execution
of the control logic (Figure 2) and ﬁlls out a lookup table where
each entry represents an execution path of the control logic, and
includes the corresponding path condition along with the symbolic
values of the control logic variables at the end of the execution
(scan cycle). Upon Tom’s variable write or control logic down-
load request, CPAC consults the lookup table for taint information,
to determine which actuation points may be affected by Tom’s re-
quest. Such analysis considers changes throughout the entire power
system, relying on information generated based on an information
ﬂow analysis performed after every topology server update.
3.2 Deﬁning policies
Consider the workﬂow shown in Figure 3. An administrator de-
ﬁnes a high-level safety-context plant policy, e.g., “Tom [a power
operator] should not be able to cause the bus voltage on the New
York power transmission line past its capacity 100kV.” The pol-
icy is deﬁned based on the transmission line’s physical limitations,
and exceeding the line capacity could potentially cause a line out-
age, redistributing the downed line’s power through its adjacent
lines [54] followed by a catastrophic blackout.3 Intentionally or
otherwise, Tom sets the Boston Generator set-point to 12 MW. In
doing so, the physical model calculates that the New York transmis-
sion line would exceed 110 kV. The model is based on fundamental
circuit laws that are dependent on the power system’s topology, dy-
namically updated by the EMS topology processing server. Now
the policy enforcement engine evaluates the new set point request
and upon determining that granting this request would cause an un-
safe state, denies the request, an result that is returned to Tom.
To be practical, CPAC must automatically enforce policies with-
out requiring the administrator to redeﬁne them on every system
topology update. CPAC eliminates the need for this involve-
ment through differential equation-based analysis of the EMS plant
model, such that the safety policy described above is automatically
enforced based on the current system topology.
CPAC’s architecture enables policy enforcement to satisfy pri-
vacy, safety and regulatory requirements. For instance, a privacy
policy may require that some system parameters or sensor mea-
3This situation is exactly what occurred during the Aug. 2003
Northeast blackout, which caused $6 billion in damage [26].
142
surements about a particular power system incident not be visible
to certain operators. Privacy is not only important for preventing
the data leaks from certain operators but also to prevent external at-
tacker from knowing additional information which can lead to more
effective attack;as an example, the web attack against a Ukraine
power plant was caused by the attackers sending commands to open
circuit breakers, creating power outage [14]. A safety policy may
forbid increasing a line’s current beyond capacity. By considering
interdependencies between policies from different contexts, CPAC
evaluates the whole system to determine the allowed actions.
3.3 Case Study: California 2011 Blackout
Emulation
As a demonstration of how the multi-layered design of CPAC
allows it to maintain a secure environment, we demonstrate how
CPAC could protect against a simpliﬁed emulation of the Califor-
nia 2011 blackout. For simplicity, we consider an EMS with an
underlying four-bus power system (Figure 4a). We assume that the
high-level safety and regulation-context policy rules for CPAC’s
enforcement are deﬁned as follows:
Safety policy: Il ≤ 0.9·C(l)
Regulation policy: 59Hz ≤ fb ≤ 60.5Hz
∀l ∈ L
∀b ∈ B
which requires current I on every transmission line l ∈ L to be be-
low 90% of the line’s physical capacity C, and the AC power fre-
quency f on each bus b ∈ B to be within the government’s manda-
tory NERC-CIP margins. A security administrator deﬁning high-
level policy does not need to deﬁne low-level technical details of
allowable actions for individual operators, e.g., whether an opera-
tor should be allowed to open a particular circuit breaker given the
above policy, which is also dependent on the power system’s topol-
ogy and current state. CPAC extracts EMS-enforceable low-level
policy rules automatically given the deﬁned high-level policies and
the plant topology. Were CPAC deployed, the California incident
would not have occurred.
Importantly, CPAC denies the opera-
tor’s mistaken circuit breaker opening, which sparked the blackout.
By preventing this action, we prevent a large power system fre-
quency drop in the grid, which would violate the regulation policy.
Additionally, opening the circuit breaker would cause line current
overﬂows (Figure 4b), violating the safety policy.
To further clarify CPAC’s range-based EMS-enforceable policy
generation, consider the safety policy assuming two operators, Al-
ice and Bob, who are in charge of controlling the power generation
set-points on buses 2 and 3 respectively in Figure 4a. To apply their
control, the operators could either directly change the variables on
EMS screens or upload controller programs on the corresponding
PLCs. CPAC receives the policy regarding the line currents, and
calculates the allowed generation set-point ranges for Alice and
Bob’s access requests using Kirchhoff’s laws shown inFigure 4c,
create a calculated policy-compliant region in Alice’s and Bob’s
control input sub-space (the policy compliance zone extends to the
edges of the left and right lines). The horizontal and vertical axes
represent Bob’s and Alice’s one-dimensional action space, respec-
tively. Note that the policy-compliant control input range for each
operator depends on the system state caused by the other operator’s
control input value. For instance, if Alice requests a −150 write ac-
cess to her control input variable on bus 2, Bob’s allowed range will
be limited to approximately [−300,300] illustrated by the bidirec-
tional horizontal arrow in Figure 4c. CPAC calculates the plant’s
policy-compliant region every time the system’s state changes since