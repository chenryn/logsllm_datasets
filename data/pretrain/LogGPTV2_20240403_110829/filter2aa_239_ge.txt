          FileName = $"menuplan{weekNumber}",
          DefaultExt = "xps",
          Filter = "XPS Documents|＊.xps|All Files|＊.＊",
          AddExtension = true
        };
        if (dlg.ShowDialog() == true)
        {
          var doc = new XpsDocument(dlg.FileName, FileAccess.Write,
                    CompressionOption.Fast);
          XpsDocumentWriter writer = XpsDocument.CreateXpsDocumentWriter(doc);
          writer.Write(fixedDocument);
          doc.Close();
        }
      }
运行应用程序，以存储XPS文档，就可以用XPS查看器查看文档，如图35-14所示。
图35-14
还可以给XpsDocumentWriter的一个重载Write（）方法传递Visual, Visual是UIElement
的基类，因此可以给写入器传递任意UIElement，从而方便地创建XPS文档。这个功能在
下面的打印示例中使用。
35.6 打印
用DocumentViewer打印显示在屏幕上的FixedDocument，最简单的方法是使用关联到
该文档上的DocumentViewer的Print（）方法。对于菜单规划应用程序，这都在OnPrint处
理程序中完成。DocumentViewer的Print（）方法会打开PrintDialog，把关联的
FixedDocument发送给选中的打印机（代码文件
CreateXps/CreateXpsDocumentPage.xaml.cs）：
    private void OnPrint(object sender, RoutedEventArgs e)
    {
      viewer.Print();
    }
35.6.1 用PrintDialog打印
如果希望更多地控制打印过程，就可以实例化PrintDialog，并用PrintDocument（）方
法打印文档。PrintDocument（）方法需要把DocumentPaginator作为第一个参数。
FixedDocument通过Document-Paginator属性返回一个DocumentPaginator对象。第二个参数
定义了当前打印机在“打印机”对话框中为打印作业显示的字符串：
    var dlg = new PrintDialog();
    if (dlg.ShowDialog() == true)
    {
      dlg.PrintDocument(fixedDocument.DocumentPaginator, "Menu Plan");
    }
35.6.2 打印可见元素
创建UIElement对象也很简单。下面的XAML代码定义了一个椭圆、一个矩形和一个
用两个椭圆元素表示的按钮。利用该按钮的Click处理程序OnPrint（），会启动可见元素
的打印作业（代码文件DocumentsDemo/PrintingDemo/MainWindow.xaml）：
在OnPrint（）处理程序中，调用PrintDialog的PrintVisual（）方法可启动打印作业。
PrintVisual（）接受派生自Visual基类的任意对象（代码文件
PrintingDemo/MainWindow.xaml.cs）：
    private void OnPrint(object sender, RoutedEventArgs e)
    {
      var dlg = new PrintDialog();
      if (dlg.ShowDialog() == true)
      {
        dlg.PrintVisual(canvas1, "Print Demo");
      }
    }
为了通过编程方式来打印，而无需用户干涉，System.Printing名称空间中的
PrintDialog类可用于创建一个打印作业，并调整打印设置。LocalPrintServer类提供了打印
队列的信息，并用DefaultPrintQueue属性返回默认的PrintQueue。使用PrintTicket可以配置
打印作业。PrintQueue.DefaultPrintTicket返回与队列关联的默认PrintTicket。PrintQueue的
GetPrintCapabilities（）方法返回打印机的功能，根据该功能可以配置PrintTicket，如下面
的代码段所示。配置完PrintTicket后，静态方法PrintQueue.CreateXpsDocumentWriter（）
返回一个XpsDocumentWriter对象。XpsDocumentWriter类以前用于创建XPS文档，也可以
使用它启动打印作业。XpsDocumentWriter的Write（）方法不仅接受Visual或
FixedDocument作为第一个参数，还接受PrintTicket作为第二个参数。如果用第二个参数传
递PrintTicket，写入器的目标就是与对应标记关联的打印机，因此写入器把打印作业发送
给打印机。
    var printServer = new LocalPrintServer();
    PrintQueue queue = printServer.DefaultPrintQueue;
    PrintTicket ticket = queue.DefaultPrintTicket;
    PrintCapabilities capabilities = queue.GetPrintCapabilities(ticket);
    if (capabilities.DuplexingCapability.Contains(Duplexing.TwoSidedLongEdge))
      ticket.Duplexing = Duplexing.TwoSidedLongEdge;
    if (capabilities.InputBinCapability.Contains(InputBin.AutoSelect))
      ticket.InputBin = InputBin.AutoSelect;
    if (capabilities.MaxCopyCount > 3)
      ticket.CopyCount = 3;
    if (capabilities.PageOrientationCapability.Contains(PageOrientation.Landscape
))
      ticket.PageOrientation = PageOrientation.Landscape;
    if (capabilities.PagesPerSheetCapability.Contains(2))
      ticket.PagesPerSheet = 2;
    if (capabilities.StaplingCapability.Contains(Stapling.StapleBottomLeft))
      ticket.Stapling = Stapling.StapleBottomLeft;
    XpsDocumentWriter writer = PrintQueue.CreateXpsDocumentWriter(queue);
    writer.Write(canvas1, ticket);
35.7 小结
本章学习了如何把WPF功能用于文档，如何创建根据屏幕大小自动调整的流文档，
以及如何创建外观总是不变的固定文档。我们还讨论了如何打印文档，如何把可见元素发
送给打印机。
第36章讨论部署，结束本书的客户端应用程序的编程部分。
第36章
部署Windows应用程序
本章要点
● 部署要求
● 部署场景
● 使用ClickOnce进行部署
● 部署UWP应用程序
本章源代码下载地址（wrox.com）：
打开网页http://www.wrox.com/go/professionalcsharp6，单击Download Code选项卡即可
下载本章源代码。本章代码分为以下几个主要的示例文件：
● WPFSampleApp
● UniversalWinApp
36.1 部署是应用程序生命周期的一部分
在编译源代码并完成测试后，开发过程并没有结束。在这个阶段，需要把应用程序提
供给用户。无论是ASP.NET应用程序、WPF客户端应用程序，还是UWP应用程序，软件
都必须部署到目标环境中。
应该在应用程序设计的早期阶段考虑部署，因为它会影响到应用程序本身使用的技
术。
.NET Framework使部署工作比以前容易得多，因为不再需要注册COM组件，也不需
要编写新的注册表配置单元。
本章将介绍可用于应用程序部署的选项，包括桌面客户应用程序（WPF）和UWP应
用程序的部署选项。
  注意： Web应用程序的部署参见第45章。
36.2 部署的规划
部署常常是开发过程之后的工作，如果不精心规划，就可能会导致严重的问题。为了
避免在部署过程中出错，应在最初的设计阶段就对部署过程进行规划。任何部署问题，如
服务器的容量、桌面的安全性或从哪里加载程序集等，都应从一开始就纳入设计，这样部
署过程才会比较顺利。
另一个必须在开发过程早期解决的问题是，在什么环境下测试部署。应用程序代码的
单元测试和部署选项的测试可以在开发人员的系统中进行，而部署必须在类似于目标系统
的环境中测试。这一点非常重要，可以消除目标计算机上不存在的依赖项。例如，第三方
的库很早就安装在项目开发人员的计算机上，但目标计算机可能没有安装这个库。在部署
软件包中很容易忘记包含这个库。在开发人员的系统上进行的测试不可能发现这个错误，
因为库已经存在。归档依赖关系可以帮助消除这种潜在的错误。
部署过程对于大型应用程序可能非常复杂。提前规划部署，在实现部署过程时可以节
省时间和精力。
选择合适的部署选项，必须像开发系统的其他方面那样给予特别关注和认真规划。选
择错误的选项会使把软件交付给用户的过程充满艰难险阻。
36.2.1 部署选项
本节概述.NET开发人员可以使用的部署选项。其中大多数选项将在本章后面详细论
述。
● 
xcopy——xcopy实用工具允许把一个程序集或一组程序集复制到应用程序文件夹
中，从而减少了开发时间。由于程序集是自我包含的（即描述程序集的元数据包
含在程序集中），因此不需要在注册表中注册。每个程序集都跟踪它需要执行的
其他程序集。默认情况下，程序集会在当前的应用程序文件夹中查找依赖项。把
程序集移动到其他文件夹的过程将在本章后面讨论。
● 
ClickOnce——ClickOnce技术可以构建自动更新的、基于Windows的应用程序。
ClickOnce允许把应用程序发布到网站、文件共享或CD上。在对应用程序进行更
新并生成新版本后，开发小组可以把它们发布到相同的位置或站点上。最终用户
在使用应用程序时，程序会检查是否有更新版本。如果有，就进行更新。
● Windows Installer——ClickOnce有一些限制，在某些场合中不能使用。如果安装要
求管理员权限（例如，部署Windows服务）, Windows Installer就是最佳选项。
● UWP应用程序——这些应用程序可以从Windows Store部署，也可以使用命令行工
具。本章后面将介绍如何创建Windows Store应用程序的包。
36.2.2 部署要求
最好看一下基于.NET的应用程序的运行要求。在执行任何托管的应用程序之前，
CLR对目标平台都有一定的要求。
首先必须满足的要求是操作系统。目前，下面的操作系统可以运行基于.NET 4.6的应
用程序：
● Windows Vista SP2
● Windows 7 SP1
● Windows 8 （已包含.NET 4.5）
● Windows 8.1 （已包含.NET 4.5.1）
● Windows 10 （已包含.NET 4.6）
下面的服务器平台也支持运行基于.NET 4.5的应用程序：
● Windows Server 2008 SP2
● Windows Server 2008 R2 SP1
● Windows Server 2012（已包含.NET 4.5）
● Windows Server 2012 R2（已包含.NET 4.5.1）
用Visual Studio 2012创建的Windows Store应用程序运行在Windows 8和8.1上。用
Visual Studio 2013创建的Windows Store应用程序运行在Windows 8.1上。
在部署.NET应用程序时，还必须考虑硬件要求。硬件的最低要求是：客户端和服务
器都有1GHz的CPU，以及512MB的RAM。
要获得最佳性能，应增加RAM:RAM越大，.NET应用程序运行得就越好。对于服务
器应用程序更是如此。可以使用性能监视器来分析应用程序的RAM使用情况。
36.2.3 部署.NET运行库
当使用.NET Core开发应用程序时，应用程序包含了运行库。使用完整的框架创建应
用程序时，需要把.NET运行库安装到目标系统上。Windows 10已经包含了.NET 4.6。
.NET运行库的不同版本可以从Microsoft
MSDN（https://msdn.microsoft.com/library/ee942965. 
aspx）上下载，Web安装程序或
Offline安装程序包。要么需要提供运行库的安装与安装包，要么运行库需要在安装应用程
序之前安装。
36.3 传统的部署选项
如果在应用程序的初始设计阶段考虑了部署，部署就只是简单地把一组文件复制到目
标计算机上。本节就讨论这种简单的部署情况和不同的部署选项。
为了了解如何设置部署选项，必须有一个要部署的应用程序。我们使用了ClientWPF
解决方案，它需要AppSupport库。
ClientWPF是使用WPF的富客户端应用程序。AppSupport项目是一个类库，它包含一
个简单的类，该类返回一个包含当前日期和时间的字符串。
示例应用程序使用AppSupport项目，用一个包含当前日期的字符串填写一个标签。为
了使用这些示例，首先加载并构建AppSupport项目。然后在ClientWPF项目中设置对新构
建的AppSupport.dll的引用。
下面是AppSupport程序集的代码：
    using System;
    namespace AppSupport
    {
      public class DateService
      {
        public string GetLongDateInfoString() =>
        $"Today's date is {DateTime.Today:D}";
        public string GetShortDateInfoString() =>
        $"Today's date is {DateTime.Today:d}";
      }
    }
这个简单的程序集足以说明可用的部署选项。
36.3.1 xcopy部署
xcopy部署过程就是把一组文件复制到目标计算机上的一个文件夹中，然后在客户端
上执行应用程序。这个术语来自于DOS命令xcopy.exe。无论程序集的数目是多少，如果
把文件复制到同一个文件夹中，应用程序就会执行，不需要编辑配置设置或注册表。
为了理解xcopy部署的工作原理，请执行下面的步骤：
（1）打开示例下载文件中的ClientWPF解决方案（ClientWPF.sln）。
（2）把目标改为Release，进行完整的编译。
（3）使用File 
Explorer导航到项目文件夹\ClientWPF\bin\Release，双击
ClientWPF.exe，运行应用程序。
（4）单击对应的按钮，会看到当前日期显示在两个文本框中。这将验证应用程序是
否能正常运行。当然，这个文件夹是Visual Studio放置输出的地方，所以应用程序能正常
工作。
（5）新建一个文件夹，命名为ClientWPFTest。把这两个程序集（AppSupport.dll和
ClientWPFTest.exe）从Release文件夹复制到这个新文件夹中，然后删除Release文件夹。
再次双击ClientWPF.exe文件，验证它是否正常工作。
这就是需要完成的所有工作；xcopy部署只需要把程序集复制到目标计算机上，就可
以部署功能完善的应用程序。这里使用的示例非常简单，但这并不意味着这个过程对较复
杂的应用程序无效。实际上，使用这种方法对可以部署的程序集的大小或数目没有限制。
不想使用xcopy部署的原因是它不能把程序集放在全局程序集缓存（GAC）中，或者
不能在“开始”菜单中添加图标。如果应用程序仍依赖于某种类型的COM库，就不能很容
易地注册COM组件。
36.3.2 Windows Installer
Microsoft倾向于使用ClickOnce技术来安装Windows应用程序，稍后将详细讨论这种
技术。但是，ClickOnce有一些局限：ClickOnce安装不需要管理员权限，应用程序会被安
装到用户有权限的目录中。如果系统由多个用户使用，则需要针对所有用户安装应用程
序。而且，使用ClickOnce技术不能安装共享COM组件并在注册表中配置它们，不能在
GAC中安装程序集，也不能注册Windows服务。所有这些任务都需要管理员权限。
为了执行这些管理员任务，需要创建一个Windows安装程序包。安装程序包就是使用
了WindowsInstaller技术的MSI文件（可以从setup.exe启动）。
创建Windows安装程序包的功能不是Visual 
Studio 
2015的一部分。不过，可以在
Visual Studio 2015中使用免费的InstallShield Limited Edition。它提供了一个项目模板，其
中包含了下载及向Flexera Software注册InstallShield的信息。