as making content almost transparent or fairly small or ﬂash
content fast. As is illustrated in Figure 4, the user’s vision
is different from the attacker’s capture. Note that even if the
user notices the attack, they cannot prevent against the attack
because the sensitive data has been stolen by the attacker when
the user sees the attack.
36
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:26 UTC from IEEE Xplore.  Restrictions apply. 
User on Malicious Screen-sharing Website 
Target 
Website A 
Target 
Website C 
Target 
Website B 
1) Collect sensitive 
information 
Target 
Website D 
User‘s Browser  
Attacker Server 
Malicious Screen 
Sharing website 
Target Victim Websites 
Benign 
User 
Target 
Website A 
Sensitive 
Information 
2) Send attack flow 
User 
Malicious  
User 
/Receiver 
Sensitive 
Information 
Target 
Website B 
User‘s 
Browser  
Benign 
Screen 
Sharing 
Website  
Shared  
Screen  of 
Benign 
User 
(a) Malicious screen sharing website: The user is logged in on target
websites inside his browser and his screen sharing is being shared
with other users through the attacker’s screen sharing website. The
malicious screen sharing website can see the cross origin content
rendered inside the users browser.
Fig. 5. Two threat models of attacks with the screen sharing API.
(b) Malicious screen sharing user/receiver: The malicious user/receiver tricks the
benign user to click some malicious links during a screen sharing session. When the
benign user clicks on the links, sensitive information is disclosed to the malicious
user. Note that in this threat model, the screen sharing website is benign.
•
•
sharing session, the attacker can collect the user’s
sensitive information. Furthermore, the web attacker
can utilize the security credentials he gets from the
screen to launch more sophisticated attacks such as
CSRF attacks with the CSRF token, which is collected
from the user’s screen.
Screen sharing website: Screen sharing website is
a website which provide screen sharing service. It
captures the screen from one user and forwards it to
another user.
Benign user: A user visiting the malicious website
authorizes screen sharing with the attacker. The website
does not request the user to enter any sensitive data
when sharing the screen. Also, the user does not open
any browser tabs or windows that will reveal the user’s
personal data to the attacker. We assume that the user
does not log out of target sites such as Gmail, Wells
Fargo and Amazon. We argue that the assumption is
reasonable because most popular sites do not invalidate
the user’s session until the user logs out. Users might
believe that the attacker’s site cannot access their data
on other sites since the browser’s same-origin policy
prevents cross-origin data access. Therefore, the user
may not feel it is necessary to log out of services
before starting screen sharing. We also assume that
the user is an ordinary human with common vision
limitations such as not being able to catch content
which is ﬂashing fast or see content which is almost
transparent. This means that if the attacker exploits
these human vision limitations to hide the process of
collecting sensitive information, the user cannot notice
it. Even if the user indeed notices the attack, it is
done almost instantly and their sensitive information
is already stolen by the attacker.
•
• Malicious User/Receiver: Malicious user/receiver re-
ceives the shared screen from the victim user and tries
to collect sensitive information from the victim user.
They steal the sensitive information by tricking the
user to click some malicious links during the screen
sharing session. After the victim user clicks through
the malicious links, the malicious user/receiver will
be able to look at the sensitive content such as user’s
account information, browsing history and CSRF token
from the shared screen.
User’s Browser: We assume that
the user uses
browsers that are patched for vulnerabilities allowing
history snifﬁng and autocomplete history stealing
reported in the past [11] [12] [13]. The web attacker
cannot bypass the same-origin policy enforced by the
browser, but can execute any JavaScript within the
context of the attacker’s domain, while still honoring
the same-origin policy.
Target Sites: Target sites contain sensitive information
that an attacker wants to steal. Our threat model
assumes that target sites defend against cross-site
scripting (XSS) and CSRF attacks. These sites use
secret validation tokens to protect against CSRF attacks
and these tokens cannot be stolen by traditional web
attackers without screen sharing because they cannot
access cross-origin page sources.
•
Overall, the ﬁrst threat model contains the following roles:
the malicious screen sharing website, the benign user, the
user’s browser, and the target website. The malicious screen
sharing website collects the user’s information by using invisible
iframe or pop-ups to steal user’s sensitive information. In the
second threat model, we consider the following parties: screen
sharing website, user, malicious user/receiver, user’s browser,
37
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:26 UTC from IEEE Xplore.  Restrictions apply. 
targeted websites. During a screen sharing session, and the
malicious user/receiver tricks the benign user to click some
pages with sensitive information. In this threat model, the attack
works even when the screen sharing website is benign. Note
that a malicious user/receiver and a malicious screen sharing
website can also collude to collect information. The screen
sharing attacks we proposed would work in HTML5-compliant
browsers (including mobile web browsers) without installing
additional software.
Out-of-Scope Threats. We do not consider the network
attacker. We assume that network attackers cannot steal any
sensitive information by acting as a man-in-the-middle (e.g., if
all of the target sites operate over HTTPS).
IV. ATTACKS USING SCREEN SHARING
A. Overview of Attacks
Screen sharing aims to provide a real-time communication
channel that allows users to share the visual contents of their
entire computer screen with other users. The visual channel
opens up capabilities of the screen sharing website to collect
information from different origins. The screen sharing website
can utilize some visual effects to make the content seen by
the user different from the real information displayed in the
screen. For example, the website can ﬂash sensitive information
quickly or make an iframe look transparent. By combining
screen sharing with other tricks, the malicious screen sharing
website can collect sensitive information without users’ consent.
This idea inherently breaks the same-origin policy that restricts
web documents from leaking information to other domains.
Unfortunately, the current design of modern browsers does not
take screen sharing into account, thereby introducing multiple
security holes. In the following sub-sections, we describe how
an attacker can exploit these security holes and compromise
the user’s security. We show that it is possible to attack
several popular websites, such as Wells Fargo, Gmail and Bing,
using the screen sharing API thereby affecting the integrity
and conﬁdentiality of the user’s session. A brief summary is
provided in Table I.
Steps of Attacks. Attacks listed in the table take two steps as
are illustrated in Figure 6. In the ﬁrst stage, a user starts to
share his/her screen with the screen sharing website provided
by the attacker. The sensitive information from the user will be
collected, such as CSRF tokens and personal information. In the
second stage, the attacker server will send attack packets back
to their victim’s browser based on the information collected
in the ﬁrst step. For example, the attacker server can send
forms with stolen CSRF tokens back to the browser to launch
the CSRF attack. For attacks on conﬁdentiality, attackers only
need to get information from the user, hence they just need
to go through the ﬁrst step. For attacks on integrity, attackers
need to implement the second step to send packets from a
user’s browser to victim websites. Due to the simplicity of this
process, the attacks can be easily automated and ﬁnished in a
short period. Detailed descriptions about attack processes will
be provided in the next section.
Security Principles
Integrity
Conﬁdentiality
Vulnerabilities
CSRF
Autocomplete history snifﬁng
User account history snifﬁng
Personal information theft
Browsing history snifﬁng
TABLE I.
THE SCREEN SHARING API DISRUPTS THE INTEGRITY AND
CONFIDENTIALITY PRINCIPLES.
UseronMaliciousScreen
sharingWebsite
Att k
AttackerServer
S
1) Collect sensitive
1)Collectsensitive
information
2)Send
attackflow
Fig. 6. The steps of launching attacks using Screen Sharing. 1. A victim
user starts to share his/her screen with the screen sharing website provided
by the attacker, and the attacker collects sensitive information from the user’s
screen. 2. The attacker sends packets from the user’s browser based on the
information collected in the ﬁrst step.
B. Attacks on Integrity
Session integrity is essential for users and the websites
they trust to exchange data. If the attackers can compromise
session integrity, they can obtain unrestricted access to the
target site and perform actions on behalf of the user. One such
attack that affects the integrity of the user’s session is the
CSRF attack. In this attack, the attacker disrupts the integrity
of the user’s account state by forging a request with the user’s
credentials. A commonly adopted defense against CSRF attacks
relies on the trusted site setting secret validation tokens that
are only known by the user’s browser and sent back with the
request to authenticate the sender. However, the defense is
vulnerable in a situation where the content of the target site is
likely to be leaked to third parties [14]. Particularly, in the use
case of screen sharing, the user’s secret validation tokens are
accessible to the attacker hosting attacker.com with malicious
screen sharing services (see Figure 7). Once the user clicks
on a button to authorize screen sharing, the attacker could
inject code to embed an iframe with view-source links into
the DOM. If the target site (say, bank.com) doesn’t enable
X-Frame-Options [15], the view-source link will expose the
entire page source including the secret validation tokens to
the attacker2. Once the attacker obtains the secret token, the
attacker can send forged requests from the user’s browser. The
trusted site accepts this request since it contains the expected
2iframes can no longer render view-source links in Google Chrome and
Mozilla Firefox [7], [16].
38
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:26 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 7. Steps of a CSRF attack. 1. attacker.com requests a page with secret validation tokens from bank.com. 2. The screenshots with the source code and secret
validation tokens are transmitted to the attacker’s server via the screen sharing API. 3. The attacker sends a form with a post request and the secret validation
tokens to attacker.com to transfer money. 4. The post request is sent from the user’s browser to bank.com and accepted by bank.com.
authentication information: the HTTP cookie and the secret
validation tokens.
Retrieving secret validation tokens from target sites is a
crucial step in a CSRF attack. The following piece of code
worked in our CSRF attack experiments. First, we used an
iframe with the view-source link to expose the source code on
the screen. The view-source link syntax is different between
Google Chrome and Firefox. For Google Chrome, the code is
implemented as follows:
For Firefox, the code has slight changes:
Next, we exploit relative positioning of CSS to locate the
lines containing the secret validation tokens inside the iframe.
By using a negative value for top along with the position
property, we are able to scroll the iframe to a speciﬁc position.
For example,
With this technique, we can collect the CSRF token or other
security credentials from a size-limited window.
Using the code mentioned above, we test on multiple
popular websites that adopt secret validation tokens to defend
against CSRF. Below, we describe one case study of Wells
Fargo where we are able to break its defense mechanism
through screen sharing.
Wells Fargo. Wells Fargo uses session arguments extensively
in their websites. One usage is passing a session argument as
a URL parameter in the page to send money. The mechanism
impedes an attacker’s advances toward hacking; however, it
will not work while the user is sharing the screen because
the attacker can retrieve the URL from the source code. For
example, in Figure 8 the source code of the “Transfer” page
reveals the URL of “Send & Receive Money” which is supposed
to be secured by the session argument. Since the Transfer page
doesn’t enable X-Frame-Options, the attacker is able to use
iframes and view-source links mentioned above to extract the
URL.
When the attacker successfully lands on the “Send &