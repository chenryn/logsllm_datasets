title:Longitudinal Study of Internet-Facing OpenSSH Update Patterns
author:Jonathan Codi West and
Tyler Moore
Longitudinal Study of Internet-Facing
OpenSSH Update Patterns
Jonathan Codi West(B) and Tyler Moore
School of Cyber Studies, The University of Tulsa, Tulsa, OK, USA
{codiwest,tyler-moore}@utulsa.edu
Abstract. Keeping server software patched and up-to-date is a never-
ending struggle for system administrators that is crucial for security.
Nevertheless, we know little about how well or how consistently soft-
ware updates are applied over time across the Internet. We shed light
on software update behavior on publicly addressable networks by uti-
lizing Internet-wide scans of OpenSSH banners. We primarily focus on
OpenSSH banners which contain patch-level information in order to map
accurate release dates. We augment this view by tracking which software
security backports ﬁx vulnerabilities in older OpenSSH versions. We ﬁnd
that the availability of backports, not CVE announcements or upstream
software updates, trigger rapid updates. Unfortunately, we also deter-
mine that the lag in publishing backports (if they are published at all)
combined with the steady cadence of new vulnerability reports ensures
that most of the time, the vast majority of machines are vulnerable to
at least one CVE. Additionally, we observe that major cloud hosting
providers are consistently faster to apply patches.
1 Introduction
One of the pillars of cybersecurity hygiene is updating software regularly. When
vulnerabilities are identiﬁed, developers issue security patches to seal the hole.
While much progress has been made in improving the update process for end
users, patching server-side systems can still be diﬃcult. Unpatched systems in
turn oﬀer an opportunity for attackers to exploit vulnerabilities that lead to
compromise.
Despite the importance of patching, we do not know very much about the
patching practices at Internet scale. In this paper, we measure software outdat-
edness on the publicly-facing IPv4 address space. We demonstrate that na¨ıve
approaches to measure outdatedness through publicly-announced version infor-
mation paints too negative a picture of patching in the enterprise.
We hone in on “backports”, patches applied by operating system distribu-
tors to ﬁx older software versions, to get a more accurate picture. One positive
conclusion is that backports are rapidly applied by many, and therefore software
is often more up-to-date than what can be inferred by looking at the version
information alone. Nonetheless, we uncover signiﬁcant concerns. For the case of
c(cid:2) The Author(s), under exclusive license to Springer Nature Switzerland AG 2022
O. Hohlfeld et al. (Eds.): PAM 2022, LNCS 13210, pp. 675–689, 2022.
https://doi.org/10.1007/978-3-030-98785-5_30
676
J. C. West and T. Moore
OpenSSH backports on Ubuntu, we determined that around 25% of CVEs had
no backport issued. During most of the 2015–2019 period under investigation,
all servers were vulnerable to at least one CVE, often more. Moreover, at any
given time between 40–80% of machines that could apply a backport to ﬁx a
CVE have not yet done so.
We review our approach to data collection in Sect. 2. We then set out to
iteratively reﬁne our deﬁnition of software outdatedness and patching levels in
Sect. 3. In Sect. 4 we explicitly connect software outdatedness to software vul-
nerabilities for the case of OpenSSH software running on Ubuntu. We discuss
limitations in Sect. 5, followed by Related Work before concluding in Sect. 7.
2 Data Collection Methodology
We utilize Censys [2] to acquire open ports and service banner data across the
entire IPv4 address space. Censys keeps historical data, and thus we download
several snapshots between 2017 and 2020, which contain banners for the ser-
vices listed in Table 1. After narrowing the scope to just OpenSSH banners, we
downloaded weekly snapshots of the entire IPv4 address space that have SSH
banners. These weekly snapshots range from October 2015, which was the ear-
liest we found SSH banners on Censys, through December 2020, although more
recent data is planned for future work.
We gather software version release dates of several popular Internet-facing
software packages from Github [5] and their respective websites and changelogs
where available. As will be explained in Sect. 3.2, security patch release and
superseded dates for the OpenSSH software package running on the Ubuntu
or Debian Linux distributions are gathered from Launchpad [6]. We acquired
OpenSSH patch data dating back to OpenSSH 1.3.8 on Ubuntu Warty (4.10) in
2005.
We gather announced IPv4 address space for several cloud service providers,
namely Amazon AWS, Azure Cloud, and Google Cloud. The announced address
spaces for these providers are mapped to the IPv4 addresses gathered from
Censys. Additionally, we use MaxMind’s GeoIP2 dataset [4] and Bureau van
Dijk’s Orbis [9] resource to identify company ownership for IPv4 CIDR blocks.
2.1 Ethical Considerations
We did not perform active or passive scanning of Internet hosts in our data
collection. We chose to use pre-existing data and not perform unnecessary scans.
3 Measuring Software Outdatedness
We iteratively build a more sophisticated and accurate measurement of software
outdatedness and apply it to the data gathered.
Longitudinal Study of Internet-Facing OpenSSH Update Patterns
677
Table 1. Software versions inferred from banner, with example banner text.
Port
Software
Example Banner
Apache/2.4.16 (Unix) OpenSSL/1.0.1e-fips
nginx/1.10.3 (Ubuntu)
bftpd 2.2
80, 443 Apache2
80, 443 NGINX
21
21
21
21
22
Bftpd
FileZilla Server FileZilla 0.9.47
Proftpd
Vsftpd
OpenSSH
ProFTPD 1.3.4a
vsftpd 3.0.2
SSH-2.0-OpenSSH 6.7p1 Debian-5+deb8u4
3.1 First Cut: Base Software Version
We initially explored banner data for over a dozen ports from Censys based
on data availability of those ports over time and their perceived popularity.
Some of these ports run software that present version information in the banner.
This version information may be parsed out and then mapped to the release
dates gathered from GitHub and their respective websites. Table 1 displays which
software had release dates gathered.
The software release dates are mapped to each IP address with version info.
To give an initial impression of the age of Internet software, we subtract a given
software version’s publish date from the Censys snapshot date to compute the
days since release for that software version. But this does not really measure
outdatedness, since software only becomes out of date once a newer version is
released. Hence, to track software freshness, we calculate the diﬀerence between
the snapshot date and when a given software version was superseded by a newer
version. The days superseded metric more accurately conveys how long the server
owner waited to upgrade and is therefore responsible for running outdated soft-
ware. If a software version is at the latest version at the date of the snapshot,
then days superseded is set to 0.
For the services in Table 1, we compare the distribution of days superseded
among ports. Figure 1 shows CDFs for each port using the 2020-08-08 snapshot.
We see that the software on these ports tends to be rather old. It is reasonable
that port 80 and port 443 have very similar curves given that they run the same
software, although port 443 is running on roughly half of the number of IPs that
port 80 runs on. Port 443 also has a slight edge in running more recently released
software versions. OpenSSH on port 22 lags behind port 80 and 443 for the ﬁrst
three years and then follows a similar curve. The biggest diﬀerence is that Port
21 (FTP) is running much older software than the other three ports.
3.2 Second Cut: Integrating Security Patches
Using the superseded date of the base software version, gives a rather incomplete
view of the age of Internet software. Basing software patch levels entirely on the
678
J. C. West and T. Moore
Fig. 1. Comparison of days superseded for the various services in Table 1.
software version information alone may be misleading as it ignores common
security practice. Some operating systems will “backport” security patches into
older versions of a given software without changing the base version number
(referred to hereon as the upstream version number or upstream patch). In these
cases, software may appear to be quite old when looking at the superseded date
of the upstream version number even though the security patches are more recent
and may ﬁx vulnerabilities which were present in that upstream version.
It is often the case that security patch level information is hidden to all but
those with access to the system, which is unfortunate in the case of external
measurement via the Internet. Fortunately, we have identiﬁed one case where we
can reliably observe the presence of backports. In OpenSSH, the security patch
version is shown in some banners depending on the conﬁguration of the host
operating system, including the popular Ubuntu and Debian Linux distributions.
See the example of the following Ubuntu OpenSSH banner string:
SSH-2.0-OpenSSH_7.6p1 Ubuntu-4ubuntu0.3
In this banner, the base version of OpenSSH is 7.6p1, which was released on
2017-10-03 according to [5]. Comparatively, the patch level is 7.6p1-4ubuntu0.3,
which was released on 2019-03-04 according to Launchpad [7]. Coincidentally, we
can infer the operating system version of this machine because this security patch
version is only found on Ubuntu Bionic (18.04). All banners on Launchpad refer
to a speciﬁc backport. While usually unique, the same banner is occasionally used
for an LTS release and concurrent development release of Ubuntu. We considered
patches in the release, updates, and security channels/pockets on Launchpad.
Out of 286 entries examined from 2005 to 2020, 30 were duplicated across two
releases. In those cases, the only discernible diﬀerence is the date when the patch
was published on its respective release. Consequently, we use the patch release
Longitudinal Study of Internet-Facing OpenSSH Update Patterns
679
date of the LTS version of Ubuntu if it diﬀers. While spooﬁng these banners is
possible, we expect it to be rare since doing so requires editing and compiling
the OpenSSH source code. Any edited banners that do not exactly match an
Ubuntu backport banner are excluded from that portion of the analysis.
Clearly, these patches can be mapped to a much later release date than
initially inferred from looking at the upstream OpenSSH version alone. Figure 3a
compares the “days superseded” of the Ubuntu security patch level (green line)
to the upstream OpenSSH version level (orange line). Now the picture is not
only more accurate, it is also a much better outlook from a security perspective.
Around 80% of the Ubuntu OpenSSH servers immediately apply patches. If one
simply judged software freshness based on the OpenSSH version, 80% of servers
would be considered more than three years outdated.
From this analysis, we conclude that the picture of server software updates
is not as bad as it is often portrayed. We are not out of the woods, though,
because 20% of OpenSSH servers are slow to patch. That is a non-trivial number
of servers. Moreover, more work needs to be done to connect the application of
OpenSSH patches to the presence of software vulnerabilities, which we undertake
in the next section.
Focusing on OpenSSH banners with security patch information does limit the
number of IP addresses that can be used for measurement. In the case of Fig. 3a,
which is based on the 2020-08-08 snapshot of Censys, we are using roughly one-
third of the total OpenSSH IPs for the Ubuntu security patch measurement. For
reference, this same snapshot has a total of 132 million IP addresses, and about
17.6 million of those have port 22 open, 14.7 million of which run OpenSSH. Of
these 14.7 million, 4.8 million run Ubuntu, and therefore have accurate backport
information. Figure 2 demonstrates the coverage of OpenSSH that the Ubuntu
distribution provides. Debian and Raspbian also provide patch information in
the banner and could be analyzed in future work. While RedHat Enterprise
Linux and its relatives make extensive use of backports [10], they regrettably
do not provide patch information in the banner and thus fall into the unknown
category with other distributions. For the remainder of this work, we narrow our
focus where OpenSSH backported security patch information is visible, namely