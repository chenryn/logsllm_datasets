### Title: Longitudinal Study of Internet-Facing OpenSSH Update Patterns

### Authors: Jonathan Codi West and Tyler Moore

**Longitudinal Study of Internet-Facing OpenSSH Update Patterns**

**Jonathan Codi West (B) and Tyler Moore**

**School of Cyber Studies, The University of Tulsa, Tulsa, OK, USA**

**{codiwest, tyler-moore}@utulsa.edu**

**Abstract.** Maintaining up-to-date server software is a critical yet ongoing challenge for system administrators. However, little is known about the consistency and effectiveness of software updates across the Internet. This study examines software update behavior on publicly accessible networks by analyzing Internet-wide scans of OpenSSH banners. We focus on OpenSSH banners that include patch-level information to map accurate release dates and track security backports that address vulnerabilities in older versions. Our findings indicate that the availability of backports, rather than CVE announcements or upstream software updates, triggers rapid updates. Unfortunately, delays in publishing backports, combined with a steady stream of new vulnerability reports, ensure that most machines are vulnerable to at least one CVE most of the time. Additionally, we observe that major cloud hosting providers consistently apply patches more quickly.

### 1. Introduction

Regular software updates are a fundamental aspect of cybersecurity hygiene. When vulnerabilities are identified, developers issue security patches to mitigate them. While significant progress has been made in improving the update process for end users, patching server-side systems remains challenging. Unpatched systems provide opportunities for attackers to exploit vulnerabilities, leading to potential compromises.

Despite the importance of patching, there is limited understanding of patching practices at an Internet scale. In this paper, we measure software outdatedness on the publicly-facing IPv4 address space. We demonstrate that relying solely on publicly-announced version information can overestimate the extent of outdated software in enterprise environments.

We focus on "backports," which are patches applied by operating system distributors to fix older software versions, to gain a more accurate picture. One positive finding is that backports are rapidly applied by many, indicating that software is often more up-to-date than what version information alone suggests. However, we also uncover significant concerns. For example, around 25% of CVEs for OpenSSH on Ubuntu had no backport issued. During the 2015–2019 period, all servers were vulnerable to at least one CVE, and often more. At any given time, 40–80% of machines that could apply a backport to fix a CVE had not done so.

In Section 2, we review our data collection methodology. In Section 3, we iteratively refine our definition of software outdatedness and patching levels. Section 4 explicitly connects software outdatedness to software vulnerabilities for OpenSSH running on Ubuntu. We discuss limitations in Section 5, followed by related work, and conclude in Section 7.

### 2. Data Collection Methodology

We use Censys [2] to collect open ports and service banner data across the entire IPv4 address space. Censys maintains historical data, allowing us to download snapshots between 2017 and 2020, which include banners for the services listed in Table 1. After narrowing the scope to OpenSSH banners, we downloaded weekly snapshots of the entire IPv4 address space with SSH banners, ranging from October 2015 to December 2020. More recent data is planned for future work.

We gather software version release dates for several popular Internet-facing software packages from GitHub [5] and their respective websites and changelogs where available. As explained in Section 3.2, security patch release and superseded dates for OpenSSH running on Ubuntu or Debian Linux distributions are gathered from Launchpad [6]. We acquired OpenSSH patch data dating back to OpenSSH 1.3.8 on Ubuntu Warty (4.10) in 2005.

We also gather announced IPv4 address space for several cloud service providers, including Amazon AWS, Azure Cloud, and Google Cloud. These announced address spaces are mapped to the IPv4 addresses collected from Censys. Additionally, we use MaxMind’s GeoIP2 dataset [4] and Bureau van Dijk’s Orbis [9] resource to identify company ownership for IPv4 CIDR blocks.

#### 2.1 Ethical Considerations

We did not perform active or passive scanning of Internet hosts in our data collection. Instead, we used pre-existing data to avoid unnecessary scans.

### 3. Measuring Software Outdatedness

We iteratively build a more sophisticated and accurate measurement of software outdatedness and apply it to the gathered data.

**Table 1. Software versions inferred from banner, with example banner text.**

| Port | Software | Example Banner |
|------|----------|----------------|
| 80, 443 | Apache2 | Apache/2.4.16 (Unix) OpenSSL/1.0.1e-fips |
| 80, 443 | NGINX | nginx/1.10.3 (Ubuntu) |
| 21 | Bftpd | bftpd 2.2 |
| 21 | FileZilla | FileZilla Server FileZilla 0.9.47 |
| 21 | Proftpd | ProFTPD 1.3.4a |
| 21 | Vsftpd | vsftpd 3.0.2 |
| 22 | OpenSSH | SSH-2.0-OpenSSH 6.7p1 Debian-5+deb8u4 |

#### 3.1 First Cut: Base Software Version

Initially, we explored banner data for over a dozen ports from Censys based on data availability and popularity. Some of these ports run software that presents version information in the banner. This version information can be parsed and mapped to release dates gathered from GitHub and their respective websites. Table 1 shows which software had release dates gathered.

The software release dates are mapped to each IP address with version information. To provide an initial impression of the age of Internet software, we subtract the publish date of a given software version from the Censys snapshot date to compute the days since release. However, this does not accurately measure outdatedness, as software only becomes outdated once a newer version is released. Therefore, to track software freshness, we calculate the difference between the snapshot date and when a given software version was superseded by a newer version. The "days superseded" metric more accurately conveys how long the server owner waited to upgrade and is responsible for running outdated software. If a software version is at the latest version at the date of the snapshot, then "days superseded" is set to 0.

For the services in Table 1, we compare the distribution of "days superseded" among ports. Figure 1 shows CDFs for each port using the 2020-08-08 snapshot. We see that the software on these ports tends to be quite old. It is reasonable that ports 80 and 443 have similar curves, as they run the same software, although port 443 runs on roughly half the number of IPs as port 80. Port 443 also has a slight edge in running more recently released software versions. OpenSSH on port 22 lags behind ports 80 and 443 for the first three years and then follows a similar curve. The biggest difference is that port 21 (FTP) is running much older software than the other three ports.

#### 3.2 Second Cut: Integrating Security Patches

Using the superseded date of the base software version provides an incomplete view of the age of Internet software. Basing software patch levels entirely on the software version information alone can be misleading, as it ignores common security practices. Some operating systems will "backport" security patches into older versions of a given software without changing the base version number (referred to here as the upstream version number or upstream patch). In these cases, software may appear to be quite old when looking at the superseded date of the upstream version number, even though the security patches are more recent and may fix vulnerabilities present in that upstream version.

It is often the case that security patch level information is hidden to all but those with access to the system, which is unfortunate for external measurement via the Internet. Fortunately, we have identified one case where we can reliably observe the presence of backports. In OpenSSH, the security patch version is shown in some banners depending on the configuration of the host operating system, including the popular Ubuntu and Debian Linux distributions. For example, the following Ubuntu OpenSSH banner string:

```
SSH-2.0-OpenSSH_7.6p1 Ubuntu-4ubuntu0.3
```

In this banner, the base version of OpenSSH is 7.6p1, released on 2017-10-03 according to [5]. Comparatively, the patch level is 7.6p1-4ubuntu0.3, released on 2019-03-04 according to Launchpad [7]. Coincidentally, we can infer the operating system version of this machine because this security patch version is only found on Ubuntu Bionic (18.04). All banners on Launchpad refer to a specific backport. While usually unique, the same banner is occasionally used for an LTS release and concurrent development release of Ubuntu. We considered patches in the release, updates, and security channels/pockets on Launchpad. Out of 286 entries examined from 2005 to 2020, 30 were duplicated across two releases. In those cases, the only discernible difference is the date when the patch was published on its respective release. Consequently, we use the patch release date of the LTS version of Ubuntu if it differs. While spoofing these banners is possible, we expect it to be rare since doing so requires editing and compiling the OpenSSH source code. Any edited banners that do not exactly match an Ubuntu backport banner are excluded from that portion of the analysis.

Clearly, these patches can be mapped to a much later release date than initially inferred from looking at the upstream OpenSSH version alone. Figure 3a compares the "days superseded" of the Ubuntu security patch level (green line) to the upstream OpenSSH version level (orange line). Now the picture is not only more accurate but also more optimistic from a security perspective. Around 80% of the Ubuntu OpenSSH servers immediately apply patches. If one simply judged software freshness based on the OpenSSH version, 80% of servers would be considered more than three years outdated.

From this analysis, we conclude that the picture of server software updates is not as dire as often portrayed. However, 20% of OpenSSH servers are slow to patch, which is a non-trivial number of servers. Moreover, more work needs to be done to connect the application of OpenSSH patches to the presence of software vulnerabilities, which we undertake in the next section.

Focusing on OpenSSH banners with security patch information limits the number of IP addresses that can be used for measurement. In the case of Figure 3a, based on the 2020-08-08 snapshot of Censys, we use roughly one-third of the total OpenSSH IPs for the Ubuntu security patch measurement. For reference, this same snapshot has a total of 132 million IP addresses, and about 17.6 million of those have port 22 open, 14.7 million of which run OpenSSH. Of these 14.7 million, 4.8 million run Ubuntu, and therefore have accurate backport information. Figure 2 demonstrates the coverage of OpenSSH that the Ubuntu distribution provides. Debian and Raspbian also provide patch information in the banner and could be analyzed in future work. While RedHat Enterprise Linux and its relatives make extensive use of backports [10], they regrettably do not provide patch information in the banner and thus fall into the unknown category with other distributions. For the remainder of this work, we narrow our focus to where OpenSSH backported security patch information is visible, namely on Ubuntu.