                throw new HttpException(404, 'controller not exists:' . $e->getClass());
            }
            $this->app['middleware']->controller(function (Request $request, $next) use ($instance) {
                // 获取当前操作名
                $action = $this->actionName . $this->rule->getConfig('action_suffix');
                if (is_callable([$instance, $action])) {
                    // 执行操作方法
                    $call = [$instance, $action];
                    // 严格获取当前操作方法名
                    $reflect    = new ReflectionMethod($instance, $action);
                    $methodName = $reflect->getName();
                    $suffix     = $this->rule->getConfig('action_suffix');
                    $actionName = $suffix ? substr($methodName, 0, -strlen($suffix)) : $methodName;
                    $this->request->setAction($actionName);
                    // 自动获取请求变量
                    $vars = $this->rule->getConfig('url_param_type')
                    ? $this->request->route()
                    : $this->request->param();
                } elseif (is_callable([$instance, '_empty'])) {
                    // 空操作
                    $call    = [$instance, '_empty'];
                    $vars    = [$this->actionName];
                    $reflect = new ReflectionMethod($instance, '_empty');
                } else {
                    // 操作不存在
                    throw new HttpException(404, 'method not exists:' . get_class($instance) . '->' . $action . '()');
                }
                $this->app['hook']->listen('action_begin', $call);
                $data = $this->app->invokeReflectMethod($instance, $reflect, $vars);
                return $this->autoResponse($data);
            });
            return $this->app['middleware']->dispatch($this->request, 'controller');
        }
函数在try部分调用了app类的controller函数来实例化控制器，继续跟进
    public function controller($name, $layer = 'controller', $appendSuffix = false, $empty = '')
        {
            list($module, $class) = $this->parseModuleAndClass($name, $layer, $appendSuffix);
            if (class_exists($class)) {
                return $this->__get($class);
            } elseif ($empty && class_exists($emptyClass = $this->parseClass($module, $layer, $empty, $appendSuffix))) {
                return $this->__get($emptyClass);
            }
            throw new ClassNotFoundException('class not exists:' . $class, $class);
        }
调试时获取了几个配置作为函数参数后进入controller函数，首先利用`parseModuleAndClass`来解析模块和类名
    protected function parseModuleAndClass($name, $layer, $appendSuffix)
        {
            if (false !== strpos($name, '\\')) {
                $class  = $name;
                $module = $this->request->module();
            } else {
                if (strpos($name, '/')) {
                    list($module, $name) = explode('/', $name, 2);
                } else {
                    $module = $this->request->module();
                }
                $class = $this->parseClass($module, $layer, $name, $appendSuffix);
            }
            return [$module, $class];
        }
不难发现，如果在$name也就是控制器中查找到了 `\` ，那么，控制器的值赋给$class，模块名赋值给$module，然后直接return
根据现在访问的url，会跳转到else的else语句中进行赋值，接下来会调用到`parseClass()`函数，经过了一堆处理之后返回了
`$this->namespace.'\\'.($module ? $module.'\\' :
'').$layer.'\\'.$path.$class;`
实际上就是命名空间的路径即$class，根据命名空间的特性，知道了类命名空间之后就可以对类进行实例化，接下来继续跟进代码，回到`parseModuleAndClass`方法，返回了$moduel和$class
回到controller中，判断$class存在的话就会调用到`__get()`方法，并将$class(命名空间)传入，跟进发现 `__get()`
调用到了make()方法，继续跟进
    public function make($abstract, $vars = [], $newInstance = false)
        {
            if (true === $vars) {
                // 总是创建新的实例化对象
                $newInstance = true;
                $vars        = [];
            }
            $abstract = isset($this->name[$abstract]) ? $this->name[$abstract] : $abstract;
            if (isset($this->instances[$abstract]) && !$newInstance) {
                return $this->instances[$abstract];
            }
            if (isset($this->bind[$abstract])) {
                $concrete = $this->bind[$abstract];
                if ($concrete instanceof Closure) {
                    $object = $this->invokeFunction($concrete, $vars);
                } else {
                    $this->name[$abstract] = $concrete;
                    return $this->make($concrete, $vars, $newInstance);
                }
            } else {
                $object = $this->invokeClass($abstract, $vars);
            }
            if (!$newInstance) {
                $this->instances[$abstract] = $object;
            }
            return $object;
        }
在这个函数中直接看调用到的`invokeClass()`函数，可以发现命名空间被传入作为参数，继续
    public function invokeClass($class, $vars = [])
        {
            try {
                $reflect = new ReflectionClass($class);
                if ($reflect->hasMethod('__make')) {
                    $method = new ReflectionMethod($class, '__make');
                    if ($method->isPublic() && $method->isStatic()) {
                        $args = $this->bindParams($method, $vars);
                        return $method->invokeArgs(null, $args);
                    }
                }
                $constructor = $reflect->getConstructor();
                $args = $constructor ? $this->bindParams($constructor, $vars) : [];
                return $reflect->newInstanceArgs($args);
            } catch (ReflectionException $e) {
                throw new ClassNotFoundException('class not exists: ' . $class, $class);
            }
        }
可以看到这里首先利用到了`ReflectionClass`类反射了$class，接着，在下面，调用到了`ReflectionClass`的`newInstanceArgs`，该方法将指定的参数创建一个新的类实例，在代码中将这个实例化后的对象直接返回，返回到make函数中，将实例化后的对象赋值给$object，最后将其return
跳转回到exec函数中，将`invokeClass`函数的返回值$object赋值给$instance，接下来又重新调用了controller函数，并将一个全新的闭包函数作为其参数传入，这里具体看一下这个闭包函数的流程
    function (Request $request, $next) use ($instance) {
                // 获取当前操作名
                $action = $this->actionName . $this->rule->getConfig('action_suffix');
                if (is_callable([$instance, $action])) {
                    // 执行操作方法
                    $call = [$instance, $action];
                    // 严格获取当前操作方法名
                    $reflect    = new ReflectionMethod($instance, $action);
                    $methodName = $reflect->getName();
                    $suffix     = $this->rule->getConfig('action_suffix');
                    $actionName = $suffix ? substr($methodName, 0, -strlen($suffix)) : $methodName;
                    $this->request->setAction($actionName);
                    // 自动获取请求变量
                    $vars = $this->rule->getConfig('url_param_type')
                    ? $this->request->route()
                    : $this->request->param();
                } elseif (is_callable([$instance, '_empty'])) {
                    // 空操作
                    $call    = [$instance, '_empty'];
                    $vars    = [$this->actionName];
                    $reflect = new ReflectionMethod($instance, '_empty');
                } else {
                    // 操作不存在
                    throw new HttpException(404, 'method not exists:' . get_class($instance) . '->' . $action . '()');
                }
                $this->app['hook']->listen('action_begin', $call);
                $data = $this->app->invokeReflectMethod($instance, $reflect, $vars);
                return $this->autoResponse($data);
            }
首先利用了is_callable方法对$instance和$action进行验证，接下来创建了反射类$reflect，接下来跳出if判断，执行了`invokeReflectMethod()`函数
    public function invokeReflectMethod($instance, $reflect, $vars = [])
        {
            $args = $this->bindParams($reflect, $vars);
            return $reflect->invokeArgs($instance, $args);
        }
这里显示利用了`bindParams`函数对$reflect和$vars进行处理，返回了`$args:{"world"}`，然后将$args和$instance传入`ReflectionMethod`的`invokeArgs`方法，执行$instance即对象实例，这里可以看到直接跳转到了我们自己写的test文件中
### 响应输出
回到exec函数，这里可以看到会继续执行`autoResponse`方法，传入的$data就是我们自己写的test.php的返回结果，该函数调用了create函数，返回设定的数据包的头部信息，$response变量中，并且最后利用了`new
static();`实例化自身Response类，接着调用了`__construct()`方法，可以看到这里将所有的头部信息的变量赋值给了Response类的$this，然后返回到autoResponse()方法中，将这些赋值给$response变量中
接下来跳转回Dispatch的`run()`方法中，把$response赋值给$data，接着又重新调用了依次`autoResponse()`方法，这次是用来判断$data是否是Response的实例的，成功则将$data赋值给$reponse返回
这次跳转回App的run方法，将$response返回
下面就是将数据发送到客户端的过程了，执行send函数，依次发送状态码，头部信息和返回的数据信息，接着调用到appShutdown()方法，并写入日志保存，至此，流程结束
## RCE分析
在 `\thinkphp\library\think\Container.php` 中，317行的`invokeFunction`方法
这里调用到了`call_user_func_array()`这个危险函数，那么是否可以调用它来执行些危险操作呢？
首先看一下这个流程，把传入的参数$function作为一个反射类赋值给$reflect，接下来把$reflect和参数$vars传入`bindParams()`方法，跟进一下该方法
其实就是对参数做处理，获取到反射类的绑定参数
这里可以将当前的模块，控制器方法，操作等直接放到请求的url里，让流程直接访问到这个函数，执行call_user_func_array()函数，那么就可以根据url来构造payload
  * 正常URL : `127.0.0.1/public/index.php/index/test/hello/name/world`
  * 恶意URL : `127.0.0.1/public/index/模块/Container/invokefunction`
但是这个Container类并不在任何模块里，那模块应该填什么？回到上面的流程中，Module类的init方法
为了保证流程不在最后抛出404错误，就得令`$module`和`$available`为true，首先，在模块正常存在的情况下，$module是一定为true的，那么需要考虑的就是$available了，在函数中部的if语句中有三个判断
  * 第一个需要$bind为true才执行，但是在默认情况下，$bind为null，所以跳过，
  * 第三个判断取出的配置 : `empty_module`为空，同样跳过
  * 第二个：在if语句还有两个判断，第一个先判断模块是否在禁止访问模块中，第二个判断该模块的路径是否存在，也就是说这里只需要构造一个环境中存在的模块就ok了，继续向下
这里来到漏洞点所在的位置，App.php631行的`parseModuleAndClass`方法
这里的参数$name就是我们的控制器名，在流程中，经过这个函数时会跳转到else判断经过`parseClass`函数对$name和$module进行拼接，但是注意他的if语句，若是$name存在`\`，就会直接返回，跳过了`parseClass()`函数的约束，接着后面的操作，$class就会被实例化并调用`call_user_func_array()`函数
这里的Container类在命名空间think下，所以可以构造`think/container`
这里还需要说的是，在thinkphp中，只要知道命名空间的路径，并且命名空间的路径与类库文件的路径相一致，就可以对类进行实例化
类库目录
名称 | 描述 | 类库目录  
---|---|---  
think | 系统核心类库 | think/library/think  
traits | 系统traits类库 | think/library/traits  
app | 应用类库 | Application  
这下就可以构造访问的url了
`127.0.0.1/public/index.php/index/think\Container/invokefunction`
继续构造传入的参数
`/functino/call_user_func_array/vars[0]/phpinfo/vars[1][]/1`
但是在pathinfo的访问模式下，`\`会被浏览器自动替换为`/`，于是替换为兼容模式访问
`http://127.0.0.1/public/index.php?s=index/think\Container/invokefunction&function=call_user_func_array&var[0]=phpinfo&vars[1][]=1`
## 小结
本文重点在于分析thinkphp的框架流程，流程中函数调用较为复杂，建议独立的对thinkphp框架进行依次完整分析，这样就会有更清晰的认识  
欢迎师傅们斧正
参考：[ThinkPHP 5.1框架结合RCE漏洞的深入分析](https://www.freebuf.com/vuls/200585.html)