### Scanning a Specific Port

By default, Nmap scans only the 1,000 ports it considers the most "interesting," rather than all 65,535 possible TCP or UDP ports. This default scan is designed to catch common running services, but it may occasionally miss a listening port or two. To scan specific ports, you can use the `-p` flag with Nmap.

For example, to scan port 3232 on a Windows XP target, you would use the following command (see Listing 5-9):

```bash
root@Kali:~# nmap -sS -p 3232 192.168.20.10
Starting Nmap 6.40 ( http://nmap.org ) at 2015-12-18 09:03 EST
Nmap scan report for 192.168.20.10
Host is up (0.00031s latency).
PORT   STATE  SERVICE
3232/tcp  open  unknown
MAC Address: 00:0C:29:A5:C1:24 (VMware)
```

**Listing 5-9: Running an Nmap scan on a specific port**

As shown in the output, when we instruct Nmap to scan port 3232, it returns as "open," indicating that this port is worth further investigation. However, if we attempt a more aggressive version scan (see Listing 5-10), the service listening on the port crashes, as depicted in Figure 5-8.

**Note:** A good practice is to specify ports 1 through 65535 during your penetration tests to ensure there are no listening services on those "uninteresting" ports.

```bash
root@kali:~# nmap -p 3232 -sV 192.168.20.10
Starting Nmap 6.40 ( http://nmap.org ) at 2015-04-28 10:19 EDT
Nmap scan report for 192.168.20.10
Host is up (0.00031s latency).
PORT   STATE  SERVICE VERSION
3232/tcp  open  unknown
1 service unrecognized despite returning data.
If you know the service/version, please submit the following fingerprint at http://www.insecure.org/cgi-bin/servicefp-submit.cgi:
v
SF-Port3232-TCP:V=6.25%I=7%D=4/28%Time=517D2FFC%P=i686-pc-linux-gnu%r(GetRequest,B8,"HTTP/1\.1\x20200\x20OK\r\nServer:\x20Zervit\x200\.4\r\nwX-Powered-By:\x20Carbono\r\nConnection:\x20close\r\nAccept-Ranges:\x20bytes\r\nContent-Type:\x20text/html\r\nContent-Length:\x2036\r\n\r\n\r\nhi\r\n\r\n");
MAC Address: 00:0C:29:13:FA:E3 (VMware)
```

**Listing 5-10: Running a version scan against a specific port**

**Figure 5-8: The Zervit server crashes when scanned by Nmap.**

In the process of crashing the listening service, Nmap cannot determine what software is running, but it does manage to obtain a fingerprint of the service. Based on the HTML tags in the fingerprint, this service appears to be a web server. According to the `Server:` field, it is something called Zervit 0.4.

At this point, we have crashed the service, and it may not reappear during our penetration test, making any potential vulnerabilities moot. In a lab environment, we can simply restart the Zervit server on the Windows XP target.

**Note:** While it is hoped that you will not crash any services during your penetration tests, there is always a possibility of encountering a particularly sensitive service that was not coded to handle unexpected input. SCADA systems, for example, are known to be particularly vulnerable to such behavior. It is essential to explain this risk to your client. When working with computers, there are no guarantees.

We will return to the Nmap tool in the next chapter, where we will use the Nmap Scripting Engine (NSE) to gather detailed vulnerability information about our target systems before beginning exploitation.

### Summary

In this chapter, we covered a lot of ground using publicly available sources and port scanners. We used tools like theHarvester and Maltego to gather information such as email addresses and websites. We also used the Nmap port scanner to identify which ports are listening on our target virtual machines. Based on the output, we can now research known vulnerabilities and begin to think like attackers, actively seeking exploitable vulnerabilities in the systems. In the next chapter, we will cover the vulnerability analysis phase of penetration testing.

### Finding Vulnerabilities

Before launching exploits, we need to conduct more research and analysis. Identifying vulnerabilities involves actively searching for issues that will lead to compromise during the exploitation phase. Although some security firms rely solely on automated exploitation tools, a skilled penetration tester's careful study of vulnerabilities often yields better results.

In this chapter, we will explore several methods of vulnerability analysis, including automated scanning, targeted analysis, and manual research.

#### From Nmap Version Scan to Potential Vulnerability

Now that we have some information about our target and the attack surface, we can develop scenarios to achieve our penetration testing goals. For example, the FTP server on port 21 announced itself as Vsftpd 2.3.4, which stands for Very Secure FTP.

Assuming a product that calls itself very secure might be asking for trouble, it came to light in July 2011 that the Vsftpd repository had been breached. The binaries were replaced with a backdoored version that could be triggered with a username containing a smiley face `:)`, opening a root shell on port 6200. Once the issue was discovered, the backdoored binaries were removed, and the official Vsftpd 2.3.4 was restored. While the presence of Vsftpd 2.3.4 does not guarantee that our target is vulnerable, it is a threat to consider. Penetration testing doesn't get much easier than piggybacking on an attacker who already owns a system.

#### Nessus

Tenable Security's Nessus is one of the most widely used commercial vulnerability scanners, though many vendors provide comparable products. Nessus shares its name with a centaur from Greek mythology, slain by Heracles, whose blood later killed Heracles. The Nessus database includes vulnerabilities across platforms and protocols, and its scanner performs a series of checks to detect known issues. There are entire books and training courses dedicated to Nessus, but here we will provide only a high-level overview.

Nessus is available as a paid professional version for penetration testers and in-house security teams. You can use the free, non-commercial version, Nessus Home, to try the exercises in this book. Nessus Home is limited to scanning 16 IP addresses. (Nessus is not pre-installed on Kali, but we covered installing it in Chapter 1.)

To run Nessus, start the Nessus daemon with the following command:

```bash
root@kali:~# service nessusd start
```

Next, open a web browser and access Nessus by navigating to `https://kali:8834`. (If you want to access the Nessus interface from another system, replace `kali` with the IP address of the Kali machine.) After a few minutes of initialization, you should see a login screen (Figure 6-1). Use the login credentials you created in Chapter 1.

**Nessus Policies**

The Nessus web interface has several tabs at the top of the screen (Figure 6-2). Let's start with the Policies tab. Nessus policies are configuration files that tell Nessus which vulnerability checks, port scanners, and other actions to perform during the scan.

To create a policy, click "New Policy" on the left side of the Nessus interface. Nessusâ€™s policy wizards will guide you through creating a policy that meets your scanning goals (Figure 6-3). For our simple example, choose "Basic Network Scan."

You will be prompted for basic information about the policy, including a name, description, and whether other Nessus users can access it (Figure 6-4). Click "Next" when done.

Next, you will be asked if this is an internal or external scan (Figure 6-5). Choose "Internal" and click "Next."

If you have credentials, Nessus can authenticate with hosts and look for vulnerabilities that may not be apparent from a network-facing perspective. This feature is often used by internal security teams to test their network's security posture. You can set these credentials in the next step (Figure 6-6). For now, you can leave this step blank and click "Save."

Your new policy will now be listed in the Policies tab (Figure 6-7).

**Scanning with Nessus**

Switch to the Scans tab and run Nessus against your target machines. Click "Scans > New Scan" and fill in the scan information (Figure 6-8). Nessus needs to know the name for your scan (Name), which scan policy to use (Policy), and which systems to scan (Targets).

Nessus runs a series of probes against the target to detect or rule out as many issues as possible. The running scan is added to the Scans tab (Figure 6-9).

Once the scan is finished, click it to view the results (Figure 6-10). As shown, Nessus found several critical vulnerabilities on the Windows XP and Ubuntu targets but only informational data on the Windows 7 box.

To see details of a specific host, click it. Details of the Windows XP vulnerabilities are shown in Figure 6-11.

**A Note About Nessus Rankings**

Nessus ranks vulnerabilities based on the Common Vulnerability Scoring System (CVSS) version 2 from the National Institute of Standards and Technology (NIST). The ranking is calculated based on the impact to the system if the issue is exploited. While a higher ranking indicates a more serious vulnerability, the actual risk depends on the environment. For example, Nessus ranks anonymous FTP access as a medium-risk vulnerability. When restricted to nonsensitive files, the risk can be low to non-existent. On the other hand, leaving proprietary source code on a publicly accessible FTP server can be a significant risk. If, during an external penetration test, you can access the client's biggest asset by logging in as "anonymous" on an FTP server, it warrants an immediate call to your client contact. Tools alone cannot make this distinction; a skilled penetration tester is needed.

**Why Use Vulnerability Scanners?**

While some penetration testing courses argue that a skilled tester can find everything a scanner can, scanners remain valuable tools, especially given the time constraints of many assessments. If avoiding detection is a goal, you might reconsider using a loud vulnerability scanner.

Though Nessus did not find every issue in our environment, its use, combined with the results of our information-gathering phase, provides a solid starting point for exploitation. Even those who believe a tester should replace a scanner can benefit from knowing how to use scanning tools. In an ideal world, every company would perform regular, no-holds-barred penetration tests, but in reality, there is plenty of vulnerability scanning work to go around.

**Exporting Nessus Results**

Once a Nessus scan finishes, you can export the findings from the "Export" button at the top of the scan details screen (Figure 6-13). Nessus can output results in PDF, HTML, XML, CSV, and other formats. While you may want to provide the raw results to your client for a vulnerability scanning engagement, never export scanner results, add your company letterhead, and call them penetration test results. A penetration test involves much more analysis than a vulnerability scan. Always verify results from automated scanners and combine them with manual analysis to get a more complete picture of the vulnerabilities in the environment.

**Researching Vulnerabilities**

If the Nessus summary page does not provide enough information about a vulnerability, try a Google search. Additionally, search on websites like `http://www.securityfocus.com/`, `http://www.packetstormsecurity.org/`, `http://www.exploit-db.org/`, and `http://www.cve.mitre.org/`. For example, you can search for vulnerabilities using the Common Vulnerabilities and Exposures (CVE) system, Microsoft patch number, and more within a specific site using a Google query like `"ms08-067 site:securityfocus.com"`. The MS08-067 vulnerability received a lot of attention, so you will find plenty of good information. (We looked at the details of this particular issue in Chapter 4.)

Depending on your subject vulnerability, you may find proof-of-concept exploit code online. We will look at working with public code in Chapter 19, but be cautious. Unlike community-vetted exploits in projects like Metasploit, not all code on the Internet does what it claims. Public exploits may destroy the target machine or join your machine to the author's secret botnet. Be vigilant when working with public exploits and carefully vet them before running them against a production network. (You may also find in-depth information about some vulnerabilities posted by the researchers who originally discovered the issue.)

**The Nmap Scripting Engine**

Nmap has evolved beyond its original goal of port scanning. The Nmap Scripting Engine (NSE) allows you to run publicly available scripts and write your own. You can find the scripts packaged with the NSE in Kali at `/usr/share/nmap/scripts`. These scripts fall into several categories, including information gathering, active vulnerability assessment, and searches for signs of previous compromises. Listing 6-1 shows NSE scripts available in your default Kali installation.

```bash
root@kali:~# cd /usr/share/nmap/scripts
root@kali:/usr/local/share/nmap/scripts# ls
acarsd-info.nse ip-geolocation-geobytes.nse
address-info.nse ip-geolocation-geoplugin.nse
afp-brute.nse ip-geolocation-ipinfodb.nse
afp-ls.nse ip-geolocation-maxmind.nse
--snip--
```

**Listing 6-1: Nmap scripts list**

To get more information about a particular script or category of scripts, use the `--script-help` flag in Nmap. For example, to see all scripts in the default category, enter `nmap --script-help default` (Listing 6-2). Many factors contribute to whether a script is included in the default category, including its reliability and whether the script is safe and unlikely to harm the target.

```bash
root@kali:~# nmap --script-help default
Starting Nmap 6.40 ( http://nmap.org ) at 2015-07-16 14:43 EDT
--snip--
```