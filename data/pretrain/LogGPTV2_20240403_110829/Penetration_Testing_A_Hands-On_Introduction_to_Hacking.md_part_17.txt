Scanning a Specific Port
By default, Nmap scans only the 1,000 ports it considers the most “interest-
ing,” not the 65,535 possible TCP or UDP ports. The default Nmap scan will
catch common running services, but in some cases it will miss a listening port
or two. To scan specific ports, use the -p flag with Nmap. For example, to
scan port 3232 on the Windows XP target, see Listing 5-9.
root@Kali:~# nmap -sS -p 3232 192.168.20.10
Starting Nmap 6.40 ( http://nmap.org ) at 2015-12-18 09:03 EST
Nmap scan report for 192.168.20.10
Host is up (0.00031s latency).
PORT STATE SERVICE
3232/tcp open unknown
MAC Address: 00:0C:29:A5:C1:24 (VMware)
Listing 5-9: Running an Nmap scan on a specific port
Sure enough, when we tell Nmap to scan 3232, it returns open, which
shows that this port is worth checking out, in addition to the default Nmap
scanned ports. However, if we try to probe the port a bit more aggressively
with a version scan (see Listing 5-10), the service listening on the port
crashes, as shown in Figure 5-8.
note A good rule of thumb is to specify ports 1 through 65535 on your pentests, just to
make sure there’s nothing listening on those other “uninteresting” ports.
root@kali:~# nmap -p 3232 -sV 192.168.20.10
Starting Nmap 6.40 ( http://nmap.org ) at 2015-04-28 10:19 EDT
Nmap scan report for 192.168.20.10
Host is up (0.00031s latency).
PORT STATE SERVICE VERSION
3232/tcp open unknown
1 service unrecognized despite returning datau. If you know the service/
version, please submit the following fingerprint at http://www.insecure.org/
cgi-bin/servicefp-submit.cgi : v
SF-Port3232-TCP:V=6.25%I=7%D=4/28%Time=517D2FFC%P=i686-pc-linux-gnu%r(GetR
SF:equest,B8,"HTTP/1\.1\x20200\x20OK\r\nServer:\x20Zervit\x200\.4\r\nwX-Pow
130 Chapter 5
SF:ered-By:\x20Carbono\r\nConnection:\x20close\r\nAccept-Ranges:\x20bytes\
SF:r\nContent-Type:\x20text/html\r\nContent-Length:\x2036\r\n\r\n\r\
SF:n\r\nhi\r\n\r\n");
MAC Address: 00:0C:29:13:FA:E3 (VMware)
Listing 5-10: Running a version scan against a specific port
Figure 5-8: The Zervit server crashes when scanned by Nmap.
In the process of crashing the listening service, Nmap can’t figure out
what software is running as noted at u, but it does manage to get a finger-
print of the service. Based on the HTML tags in the fingerprint at v, this
service appears to be a web server. According to the Server: field, it is some-
thing called Zervit 0.4 w.
At this point, we have crashed the service, and we may never see it
again on our pentest, so any potential vulnerabilities may be a moot point.
Of course, in our lab we can just switch over to our Windows XP target and
restart the Zervit server.
note Though hopefully you won’t make any services crash on your pentests, there is always
a possibility that you will run into a particularly sensitive service that was not coded
to accept anything other than expected input, such that even seemingly benign traffic
like an Nmap scan causes it to crash. SCADA systems are particularly notorious for
this sort of behavior. You always want to explain this to your client. When working
with computers, there are no guarantees.
We’ll return to the Nmap tool in the next chapter when we use the
Nmap Scripting Engine (NSE) to learn detailed vulnerability information
about our target systems before beginning exploitation.
Information Gathering 131
summary
In this chapter we’ve managed to cover a lot of ground very quickly just by
using publicly available sources and port scanners. We used tools such as
theHarvester and Maltego to scour the Internet for information such as
email addresses and websites. We used the Nmap port scanner to find out
which ports are listening on our target virtual machines. Based on the
output we’ve discovered, we can now do some research on known vulner-
abilities as we start to think like attackers and actively seek exploitable vul-
nerabilities in the systems. In the next chapter, we’ll cover the vulnerability
analysis phase of penetration testing.
132 Chapter 5
6
finDing Vulner aBilities
Before we start slinging exploits, we need to do some
more research and analysis. When identifying vulner-
abilities, we actively search for issues that will lead to
compromise in the exploitation phase. Although some
security firms will just run an automated exploitation tool and hope for the
best, careful study of the vulnerabilities by a skilled pentester will garner
better results than any tool on its own.
We’ll examine several vulnerability analysis methods in this chapter,
including automated scanning, targeted analysis, and manual research.
From nmap Version scan to Potential Vulnerability
Now that we have some information about our target and the attack sur-
face, we can develop scenarios to reach our pentest goals. For example, the
FTP server on port 21 announced itself as Vsftpd 2.3.4. Vsftpd is short for
Very Secure FTP.
We might assume that a product that calls itself very secure is asking for
trouble, and in fact, in July 2011, it came to light that the Vsftpd repository
had been breached. The Vsftpd binaries had been replaced with a back-
doored version that could be triggered with a username containing a smiley
face :). This opens a root shell on port 6200. Once the issue was discovered,
the backdoored binaries were removed, and the official Vsftpd 2.3.4 was put
back in place. So, though the presence of Vsftpd 2.3.4 doesn’t guarantee that
our target is vulnerable, it is definitely a threat to consider. Pentesting doesn’t
get much easier than piggybacking on an attacker who already owns a system.
nessus
Tenable Security’s Nessus is one of the most widely used commercial vul-
nerability scanners, though many vendors provide comparable products.
Nessus shares its name with a centaur who was slain by the Greek mytho-
logical hero, Heracles, and whose blood later killed Heracles himself. The
Nessus database includes vulnerabilities across platforms and protocols,
and its scanner performs a series of checks to detect known issues. You’ll
find entire books and training courses devoted to Nessus, and as you become
more familiar with the tool, you’ll find what works best for you. I’ll provide
only a high-level discussion of Nessus here.
Nessus is available as a paid professional version that pentesters and in-
house security teams can use to scan networks for vulnerabilities. You can
use the free, noncommercial version called Nessus Home to try the exer-
cises in this book. Nessus Home is limited to scanning 16 IP addresses.
(Nessus isn’t preinstalled on Kali, but we covered installing it in Chapter 1.)
Before you can run Nessus you need to start the Nessus daemon. To do
so, enter the service command as shown here to start the Nessus web inter-
face on TCP port 8834.
root@kali:~# service nessusd start
Now open a web browser, and access Nessus by directing the Iceweasel
browser to https://kali:8834. (If you want to access the Nessus interface
from another system, such as the host, you must replace kali with the IP
address of the Kali machine.) After a few minutes of initialization, you
should see a login screen, shown in Figure 6-1. Use the login credentials
you created in Chapter 1.
Nessus Policies
The Nessus web interface has several tabs at the top of the screen, as shown
in Figure 6-2. Let’s start with the Policies tab. Nessus policies are like con-
figuration files that tell Nessus which vulnerability checks, port scanners, and
so on to run in the vulnerability scan.
134 Chapter 6
Figure 6-1: The Nessus web interface login screen
Figure 6-2: Nessus policies
To create a policy, click New Policy at the left of the Nessus interface.
Nessus’s policy wizards will help you create a policy that will be useful
for your scanning goals, as shown in Figure 6-3. For our simple example,
choose Basic Network Scan.
Finding Vulnerabilities 135
Figure 6-3: Nessus policy wizards
Now you are prompted for some basic information about the policy, as
shown in Figure 6-4, including a name, a description, and whether other
Nessus users can access the policy. Once you are done, click Next.
Figure 6-4: Basic policy setup
Now you are asked if this is an internal or external scan, as shown in
Figure 6-5. Choose Internal and click Next.
136 Chapter 6
Figure 6-5: Internal or external scan
If you have credentials, Nessus can authenticate with hosts and look for
vulnerabilities that may not be apparent from a network-facing perspective.
This feature is often used by internal security teams to test the security
posture of their networks. You can set these credentials in the next step, as
shown in Figure 6-6. For now, you can leave this step blank and click Save.
Figure 6-6: Adding credentials (optional)
As shown in Figure 6-7, our new policy is now shown in the Policy tab.
Finding Vulnerabilities 137
Figure 6-7: Our policy is added.
Scanning with Nessus
Now, let’s switch to the Scans tab and run Nessus against our target
machines. Click Scans4New Scan, and fill in the scan information,
as shown in Figure 6-8. Nessus needs to know the name for our scan
(Name), which scan policy to use (Policy), and which systems to scan
(Targets).
Figure 6-8: Starting a Nessus scan
138 Chapter 6
Nessus runs a series of probes against the target in an attempt to detect
or rule out as many issues as possible. The running scan is added to the Scans
tab as shown in Figure 6-9.
Figure 6-9: Running a Nessus scan
Once the scan is finished, click it to view the results, as shown in
Figure 6-10.
Figure 6-10: High-level overview of the results
As shown in the figure, Nessus found several critical vulnerabilities on
the Windows XP and Ubuntu targets. But it found only informational data
on the Windows 7 box.
To see details of a specific host, click it. Details of the Windows XP
vulnerabilities are shown in Figure 6-11.
Finding Vulnerabilities 139
Figure 6-11: Nessus categorizes and describes its results.
Say what you want about vulnerability scanners, but it’s hard to find a
product that can tell you as much about a target environment as quickly
and with as little effort as Nessus. For example, Nessus’s results reveal that
our Windows XP target is in fact missing the MS08-067 patch discussed in
Chapter 4. It also seems to be missing other Microsoft patches affecting the
SMB server.
Which vulnerability is the most exploitable? The Nessus output for a
particular issue will often give you some information about that issue’s poten-
tial exploitability. For example, clicking the MS08-067 vulnerability in the
output (Figure 6-12) shows exploit code available for this vulnerability in
Metasploit as well as other tools such as Core Impact and Canvas.
Figure 6-12: The MS08-067 Nessus entry provides detailed information.
A Note About Nessus Rankings
Nessus ranks vulnerabilities based on the Common Vulnerability Scoring
System (CVSS), version 2, from the National Institute of Standards and
140 Chapter 6
Technology (NIST). Ranking is calculated based on the impact to the sys-
tem if the issue is exploited. Though the higher the vulnerability ranking,
the more serious Nessus thinks the vulnerability issue is, the actual risk of
a vulnerability depends on the environment. For example, Nessus ranks
anonymous FTP access as a medium-risk vulnerability. When restricted to
nonsensitive files, however, anonymous FTP access can have a low to non-
existent risk. On the other hand, it isn’t unheard of for companies to leave
copies of their proprietary source code lying around on a publicly available
FTP server. If on an external pentesting engagement you can access the cli-
ent’s biggest asset by logging in as anonymous on an FTP server, it’s safe to
assume that any interested attacker can do the same, and this warrants an
immediate call to your client contact. Tools are not capable of making this
sort of distinction. For that you need a pentester.
Why Use Vulnerability Scanners?
Though some penetration testing courses leave out vulnerability scanning
altogether and argue that a skilled pentester can find everything a scanner
can, scanners are still valuable tools, especially because many pentests are
performed within a shorter time window than anyone might like. But if one
of the goals of your assessment is to avoid detection, you might think twice
about using a loud vulnerability scanner.
Though Nessus did not find every issue in our environment, its use,
combined with the results of our information-gathering phase, has given
us a solid starting point for exploitation. Even those pentesters who think
that a pentester should replace a scanner during an engagement can ben-
efit from knowing how to use scanning tools. Though in an ideal world,
every company would perform regular, no-holds-barred pentests, in reality,
there is plenty of vulnerability scanning work to go around.
Exporting Nessus Results
Once a Nessus scan finishes, you can export its findings from the Export
button at the top of the scan details screen, as shown in Figure 6-13.
Figure 6-13: Exporting Nessus scan results
Finding Vulnerabilities 141
Nessus can output results into PDF, HTML, XML, CSV, and other for-
mats. You may want to hand off the raw results to your client for a vulner-
ability scanning engagement, but you should never export scanner results,
slap your company letterhead on them, and call them pentest results. Much
more analysis is involved in a penetration test than a vulnerability scan. You
should always verify results from automated scanners and combine them
with manual analysis to get a more complete picture of the vulnerabilities
in the environment.
Now for a look at some other methods of vulnerability analysis.
Researching Vulnerabilities
If the Nessus summary page doesn’t give you enough information about a
vulnerability, try a good old-fashioned Google search. Additionally, try
searching http://www.securityfocus.com/, http://www .packetstormsecurity.org/,
http://www.exploit-db.org/, and http://www.cve.mitre .org/. For example, you can
search for vulnerabilities using the Common Vulnerabilities and Exposures
(CVE) system, Microsoft patch number, and so on within a specific site using
a Google query such as “ms08-067 site:securityfocus.com”. The MS08-067 vul-
nerability received a lot of attention, so you’ll find no shortage of good infor-
mation. (We looked at the details of this particular issue in Chapter 4.)
Depending on your subject vulnerability, you may be able to find proof-
of-concept exploit code online as well. We’ll look at working with public code
in Chapter 19, but be warned that unlike the community-vetted exploits in a
project such as Metasploit, not all code on the Internet does what it claims.
The payload in a public exploit may destroy the target machine, or it may
join your machine to the exploit author’s secret botnet. Be vigilant when
working with public exploits, and carefully vet them before running them
against a production network. (You may also be able to find in-depth infor-
mation about some vulnerabilities posted by the researchers who originally
found the issue.)
the nmap scripting engine
Now for another tool that provides vulnerability scanning. Just as Metasploit
evolved from an exploitation framework into a fully fledged penetration-
testing suite with hundreds of modules, Nmap has similarly evolved beyond
its original goal of port scanning. The Nmap Scripting Engine (NSE) lets
you run publicly available scripts and write your own.
You’ll find the scripts packaged with the NSE in Kali at /usr/share/nmap
/scripts. The available scripts fall into several categories, including informa-
tion gathering, active vulnerability assessment, searches for signs of previ-
ous compromises, and so on. Listing 6-1 shows NSE scripts available in your
default Kali installation.
root@kali:~# cd /usr/share/nmap/scripts
root@kali:/usr/local/share/nmap/scripts# ls
acarsd-info.nse ip-geolocation-geobytes.nse
142 Chapter 6
address-info.nse ip-geolocation-geoplugin.nse
afp-brute.nse ip-geolocation-ipinfodb.nse
afp-ls.nse ip-geolocation-maxmind.nse
--snip--
Listing 6-1: Nmap scripts list
To get more information about a particular script or category of scripts,
enter the --script-help flag in Nmap. For example, to see all scripts in the
default category enter nmap --script-help default, as shown in Listing 6-2.
Many factors contribute to whether a script is included in the default cate-
gory, including its reliability and whether the script is safe and unlikely to
harm the target.
root@kali:~# nmap --script-help default
Starting Nmap 6.40 ( http://nmap.org ) at 2015-07-16 14:43 EDT
--snip--