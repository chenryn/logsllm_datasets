# Basics of Linux

## Managing iptables Rules
### Removing All Rules
To remove all rules from the `iptables`:
```bash
iptables -F
```

### Saving Your Changes
Your changes will only be saved and remain in effect until you restart `iptables`. To ensure your changes persist after a reboot, save them using the following command on Ubuntu:
```bash
sudo /sbin/iptables-save
```

## Measuring Bandwidth Usage
There are several tools available to measure bandwidth usage. We will start with `iptables`.

### Viewing Input and Output Traffic
To view the input and output traffic, list the rules with verbosity:
```bash
iptables -L -v
```
Example output:
```
Chain INPUT (policy ACCEPT 6382 packets, 1900K bytes)
pkts bytes target prot opt in out source destination
Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)
pkts bytes target prot opt in out source destination
Chain OUTPUT (policy ACCEPT 4266 packets, 578K bytes)
pkts bytes target prot opt in out source destination
```

### Resetting the Counters
To reset the packet and byte counters, use:
```bash
iptables -Z
```
To flush all rules, use:
```bash
iptables -F
```

### Adding Rules
A simple script to add a rule to accept TCP traffic on the INPUT chain:
```bash
#!/bin/bash
iptables -F
iptables -I INPUT 1 -p tcp -j ACCEPT
```
Check the updated rules with:
```bash
iptables -L -v --line-numbers
```

### Example: Blocking Outgoing Connections to a Specific IP
To block outgoing connections to a specific IP, use:
```bash
iptables -A OUTPUT -d 198.23.253.22 -j DROP
```
For more detailed information, refer to [DigitalOcean's tutorial](https://www.digitalocean.com/community/tutorials/how-to-list-and-delete-iptables-firewall-rules).

## Troubleshooting Network Issues
### Restarting the Network Manager
If you encounter issues with the network adapter not starting, try restarting the network manager:
```bash
sudo service network-manager restart
```

### Using `rfkill`
`rfkill` can be used to block or unblock wireless devices. For example, to list the status of wireless devices:
```bash
$ rfkill list
0: phy0: Wireless LAN
Soft blocked: no
Hard blocked: no
2: hci0: Bluetooth
Soft blocked: no
Hard blocked: no
```
To block or unblock `phy0`:
```bash
# Block
rfkill block 0
# Unblock
rfkill unblock 0
```
If there is a hard block, it means there is a physical switch on your machine that needs to be toggled.

## DNS Configuration
DNS configuration can be complex due to multiple components like `/etc/resolv.conf`, `resolvconf`, `dnsmasq`, and `NetworkManager`.

## Bash Scripting
### Variables
Variables should be assigned without spaces around the equal sign. For example:
```bash
battery_time=$(cat /sys/class/power_supply/BAT0/capacity)
echo "$battery_time"
```

### Iterating Over a File
To iterate over a file and echo each line:
```bash
#!/bin/bash
for line in $(cat file.txt); do
    echo $line
done
```
Alternatively:
```bash
#!/bin/bash
while read p; do
    echo $p
done <file.txt
```

### For-Loops
```bash
#!/bin/bash
for ((i = 0; i < 10; i++)); do
    echo $i
done
```
Using `seq`:
```bash
#!/bin/bash
for x in $(seq 1 100); do
    echo $x
done
```

### If Statements
```bash
if [ "$1" == "" ]; then
    echo "This happens"
fi
```
If/Else:
```bash
#!/bin/bash
if [ "$1" == "" ]; then
    echo "This happens"
else
    echo "Something else happens"
fi
```

### Functions
```bash
#!/bin/bash
function myfunction {
    echo "hello world"
}
```

### Command Line Arguments
Command line arguments are represented as `$1`, `$2`, etc.
```bash
#!/bin/bash
echo $1
```

### Daemonizing an Execution
To run a command in the background:
```bash
#!/bin/bash
for ip in $(cat ips.txt); do
    ping -c 1 $ip &
done
```

### Using the Output of a Command
To use the output of one command as input for another:
```bash
#!/bin/bash
cat $(locate 646.c | tail -n 1)
```

## Vim
### Core Concepts
In Vim, buffers are used to manage files. List and switch between buffers:
```vim
:buffers
b1
b2
b [name]
:bdelete
:bd
```

### Movement - Motion Commands
| Key | Action |
|-----|--------|
| `hjkl` | Left, down, up, right |
| `0` | Start of line |
| `$` | End of line |
| `w` | Beginning of next word |
| `W` | Beginning of next word (whitespace) |
| `e` | End of next word |
| `E` | End of next word (whitespace) |
| `b` | Back to the beginning of previous word |
| `B` | Back to the end of previous word |
| `f,` | Go to next comma |
| `gg` | Start of file |
| `G` | End of file |

### Operators
Operators perform actions like delete, change, or copy:
- `c` - Change
- `ce` - Change until end of the word
- `c$` - Change until end of line

### Combining Motions and Operators
- `dw` - Delete word
- `d$` - Delete to the end of the line
- `d3w` - Delete three words
- `3dd` - Delete three lines

### Replace
To replace a character:
- `r` followed by the new character
- `R` for continuous replacement

### Clipboard
Copy to the OS clipboard:
```vim
"*y
```

### Substitute - Search and Replace
```vim
:s/thee/the/g
```

### Entering Insert-Mode
- `i` - Current character
- `o` - Next line
- `O` - Line before
- `a` - End of word
- `A` - End of line

### .vimrc
Configure Vim in the `.vimrc` file.

### Plugins
Install Vundle:
```bash
git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
```
Add plugins to `.vimrc` and install:
```vim
:PluginInstall
```

## Windows
### Basics of Windows
#### Versions of Windows
Here is a list of desktop and server versions of Windows:

**Desktop OS:**
- Windows 1.0 (1.04)
- Windows 2.0 (2.11)
- ...
- Windows 10 (10.0.10240)

**Server OS:**
- Windows NT 3.1 (NT 3.10.528)
- Windows NT 3.5 (NT 3.5.807)
- ...
- Windows Server 2016 (NT 10.0)

### Windows Networks
Windows networks can be structured using a domain or workgroup model.

#### Windows Domain
In a Windows domain, users are connected to a domain controller, which manages security policies and authentication.

#### Workgroup
A workgroup is a peer-to-peer model where each computer manages its own resources.

For more detailed information, refer to the following resources:
- [Linux Journey](https://linuxjourney.com/)
- [The Art of Command Line](https://github.com/jlevy/the-art-of-command-line)