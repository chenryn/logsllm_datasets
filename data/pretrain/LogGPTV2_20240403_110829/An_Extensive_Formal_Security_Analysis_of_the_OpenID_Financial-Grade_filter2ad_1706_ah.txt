selected web pages when needed. Besides user credentials,
the state of a web browser contains (among others) a tree
of windows and documents, cookies, and web storage data
(localStorage and sessionStorage).
A window inside a browser contains a set of documents (one
being active at any time), modeling the history of documents
presented in this window. Each represents one loaded web
page and contains (among others) a script and a list of
subwindows (modeling iframes). The script, when triggered
by the browser, is provided with all data it has access to,
such as a (limited) view on other documents and windows,
certain cookies, and web storage data. Scripts then output a
command and a new state. This way, scripts can navigate or
create windows, send XMLHttpRequests and postMessages,
submit forms, set/change cookies and web storage data, and
create iframes. Navigation and security rules ensure that scripts
can manipulate only speciﬁc aspects of the browser’s state,
according to the relevant web standards.
A browser can output messages on the network of different
types, namely DNS and HTTP(S) (including XMLHttpRe-
quests), and it processes the responses. Several HTTP(S)
headers are modeled, including, for example, cookie, location,
strict transport security (STS), and origin headers. A browser,
at any time, can also receive a so-called trigger message upon
which the browser non-deterministically chooses an action,
for instance, to trigger a script in some document. The script
now outputs a command, as described above, which is then
further processed by the browser. Browsers can also become
corrupted, i.e., be taken over by web and network attackers.
Once corrupted, a browser behaves like an attacker process.
As detailed in our technical report [25], we extended the
browser model of the WIM slightly in order to incorporate
OAUTB in the browser model. We furthermore added the
behavior of the __Secure- preﬁx of cookies to the model, which
speciﬁes that such cookies shall only be accepted when they are
transmitted over secure channels [47]. Note that for the FAPI,
mTLS is only needed between clients and servers. Therefore,
mTLS has been modeled on top of the WIM, i.e., as part of the
modeling of FAPI clients and servers. The servers we modeled
for the FAPI of course also support OAUTB.
APPENDIX C
EXCERPT OF CLIENT MODEL
In this section, we provide a brief excerpt of the client model
in order to give an impression of the formal model. See our
technical report [25] for the full formal model of the FAPI.
The excerpt given in Algorithm 1 shows how the client
prepares and sends the token request to the authorization server,
i.e., the part in which the client sends the authorization code
in exchange for an access token (and depending on the ﬂow,
also an id token).
(cid:21)(cid:23)(cid:26)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:46:17 UTC from IEEE Xplore.  Restrictions apply. 
This function is called by the client. The ﬁrst two inputs
are the session identiﬁer of the session (i.e., the session of the
resource owner at the client) and the authorization code that
the client wants to send to the AS. The value responseValue
contains information related to mTLS or OAUTB (if used for
the current ﬂow). The last input is the current state of the
client.
In Lines 5 to 8, the client chooses either the token endpoint
of the AS or some URL that was chosen non-deterministically.
This models the assumption shown in Section III-C4, which
requires the Read-Write proﬁle of the FAPI to be secure even
if the token endpoint is misconﬁgured.
Starting from Line 15, the function chooses the parameters
of the request that depend on the ﬂow and conﬁguration (see
Figure 3).
If the client uses the Read-Only proﬁle, the token request
always contains the PKCE veriﬁer (Line 15). For a conﬁdential
client (which means that the client has to authenticate at the
token endpoint), the client either authenticates using JWS
Client Assertions (Line 20, see also Section II-C), or with
mTLS (Line 26; for details on our model of mTLS refer to
our technical report [25]).
If the client uses the Read-Write proﬁle, the client uses
either mTLS (again Line 26) or OAUTB (Line 32; for details
on our model of OAUTB refer to our technical report [25]).
PROOF SKETCH OF THEOREM 1, AUTHORIZATION
APPENDIX D
We here provide a proof sketch of Theorem 1 that is con-
cerned with the authorization property. The complete formal
proof of this theorem is given in the technical report [25].
For proving the authorization property, we show that when
a participant provides access to a resource, i.e., by sending
a resource access nonce, this access is not provided to the
attacker:
a) Resource server does not provide the attacker access to
resources: We show that the resource server does not provide
the attacker access to resources of an honest user.
In case of the Read-Only ﬂow, we show that an access
token associated with an honest client, an honest authorization
server, and an honest identity does not leak to the attacker,
and therefore, the attacker cannot obtain access to resources.
In case of the Read-Write ﬂow, such an access token might
leak to the attacker, but this token cannot be used by the
attacker at the resource server due to Token Binding, either
via OAUTB or mTLS.
b) Web server client does not provide the attacker access
to resources: App clients are only usable via the device they
are running on, i.e., they are not usable over the network (by
which we mean that if, for example, the user wants to view
one of her documents with an app client, she does this directly
using the device). Therefore, we only look at the case of web
server clients, as such a client can be used over the network,
e.g., by the browser of the end-user or by the attacker.
In the following, we show that honest web server clients do
not provide the attacker access to resources belonging to an
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
29:
30:
31:
32:
33:
34:
35:
36:
37:
38:
39:
40:
41:
42:
43:
44:
45:
46:
47:
48:
Algorithm 1: Client Rc – Request to token endpoint.
1: function SEND_TOKEN_REQUEST(sessionId, code,
(cid:2)
responseValue, s
)
(cid:2).sessions[sessionId]
let session := s
let identity := session[identity]
(cid:2).issuerCache[identity]
let issuer := s
if session[misconfiguredTEp] ≡ (cid:9) then
let url := session[token_ep]
else
let url := s
(cid:2).oidcConfigCache[issuer][token_ep]
(cid:2).clientCredentialsCache[issuer]
let credentials := s
let clientId := credentials[client_id]
let clientType := credentials[client_type]
let proﬁle := credentials[profile]
let isApp := credentials[is_app]
let body := [grant_type:authorization_code, code:code,
(cid:2)→ redirect_uri:session[redirect_uri],
(cid:2)→ client_id:clientId]
if proﬁle ≡ r then
let body[pkce_verifier] := session[pkce_verifier]
if proﬁle ≡ r∧ clientType ≡ pub then
let message := (cid:5)HTTPReq,ν2, POST,url.domain,url.path,
url.parameters,⊥,body(cid:6)
call HTTPS_SIMPLE_SEND([responseTo:TOKEN,
(cid:2)→ session:sessionId], message, s
(cid:2))
else if proﬁle ≡ r∧ clientType ≡ conf_JWS then
let clientSecret := credentials[client_secret]
let jwt := [iss:clientId, aud:url.domain]
let body[assertion] := mac(jwt,clientSecret)
let message := (cid:5)HTTPReq,ν2, POST,url.domain,url.path,
call HTTPS_SIMPLE_SEND([responseTo:TOKEN,
(cid:2)→ session:sessionId], message, s
else if clientType ≡ conf_MTLS then → both proﬁles
if responseValue[type] (cid:12)≡ MTLS then
stop
let body[TLS_AuthN] := responseValue[mtls_nonce]
let message := (cid:5)HTTPReq,ν2, POST,url.domain,url.path,
call HTTPS_SIMPLE_SEND([responseTo:TOKEN,
(cid:2)→ session:sessionId], message, s
(cid:2))
else → rw with OAUTB
if responseValue[type] (cid:12)≡ OAUTB then
stop
url.parameters,⊥,body(cid:6)
url.parameters,⊥,body(cid:6)
(cid:2))
(cid:2).TBindings[url.host] → priv. key
(cid:2).TBindings[session[RS]] → priv. key
let ekm := responseValue[ekm]
let TB_AS := s
let TB_RS := s
let TB_Msg_prov := [id:pub(TB_AS),
(cid:2)→ sig:sig(ekm,TB_AS)]
let TB_Msg_ref := [id:pub(TB_RS), sig:sig(ekm,TB_RS)]
let headers := [Sec-Token-Binding:[prov:TB_Msg_prov,
(cid:2)→ ref:TB_Msg_ref ]]
if clientType ≡ conf_OAUTB then → client authentication
let clientSecret := credentials[client_secret]
let jwt := [iss:clientId, aud:url.domain, ]
let body[assertion] := mac(jwt,clientSecret)
if isApp ≡ ⊥ then → W.S. client: TBID used by browser
let body[pkce_verifier] := session[browserTBID]
let message := (cid:5)HTTPReq,ν2, POST,url.domain,url.path,
call HTTPS_SIMPLE_SEND([responseTo:TOKEN,
(cid:2)→ session:sessionId], message, s
(cid:2))
url.parameters,headers,body(cid:6)
(cid:21)(cid:24)(cid:17)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:46:17 UTC from IEEE Xplore.  Restrictions apply. 
honest identity. We show this for all possible conﬁgurations that
could trick the client into doing so, e.g., with a misconﬁgured
token endpoint or with an authorization server controlled by
the attacker that returns a leaked access token.
The access to the resource is provided to the sender of the
redirection request. To access a resource, this means that the
attacker must have sent the request to the redirection endpoint
of the client.
For a Read-Only ﬂow, the token endpoint is conﬁgured
correctly. This means that the attacker must include a code in
the request such that the client can exchange it for an access
token. We show that such a code (associated with an honest
identity and the client) does not leak to an attacker.
For a Read-Write ﬂow, the token endpoint can be mis-
conﬁgured such that
is controlled by the attacker, and
we also assume that access tokens leak to the attacker (see
Section III-C).
it
We show that a leaked access token cannot be used at the
client by the attacker. If only the token endpoint is controlled
by the attacker, he must include an id token (when using
the OIDC Hybrid ﬂow, see below for the Authorization Code
ﬂow with JARM) in the token response such that it contains
the hash of the access token and be signed by the honest
authorization server (the hash of the access token was not
included in the original draft and was included by us as a
mitigation in Section IV-B). However, such an id token does
not leak to the attacker, which prevents the use of leaked access
tokens at misconﬁgured token endpoints. For the Authorization
Code ﬂow with JARM, the attacker would need a response
JWS. As in the case of the Hybrid ﬂow, we show that the
response JWS needed by the client for accessing resources of
an honest identity does not leak.
A leaked access token can also be used by the attacker if
the client chooses an authorization server under the control of
the attacker. Here, the id tokens are created by the attacker and
accepted by the client. For preventing the use of this access
token, the client includes the issuer of the second id token (or
of the response JWS deﬁned by JARM) in the request to the
resource server, as detailed in Section IV-A. As each resource
server has one preconﬁgured authorization server, the resource
server does not provide access to a resource in this case.
The only remaining case is that the attacker includes a
code associated with the honest user in the request to the
redirection endpoint of the client. For the Hybrid ﬂow, both
id tokens contained in the authorization response and in the
token response are required to have the same subject attribute
and the same issuer value, which means that they are both
signed by the authorization server. However, such an id token
does not leak to the attacker, which means that the client will
stop the ﬂow when receiving the second id token contained in
the token response. When using JARM, this would require the
attacker to send a response JWS signed by the authorization
server that contains the code that belongs to an honest client
and an honest user identity. In the technical report [25], we
show that such a response JWS does not leak to the attacker.
(cid:21)(cid:24)(cid:18)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:46:17 UTC from IEEE Xplore.  Restrictions apply.