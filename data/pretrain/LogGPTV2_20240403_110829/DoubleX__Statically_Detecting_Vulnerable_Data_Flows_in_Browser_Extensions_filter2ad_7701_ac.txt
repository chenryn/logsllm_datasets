is the message sent by the content script, while the second one is a
callback to receive the response from the background or WAR [12]
(the API used also indicates which components are communicat-
ing). Once we know the message position, we collect the message.
It can either be directly accessible (e.g., "Hi BP" Listing 2 line 2),
or accessible only after callback resolution, which DoubleX per-
forms by following the data and parameter flows (e.g., the callback
sendResponse is defined Listing 2 line 8 and called line 10 with
the message as first parameter). In addition, DoubleX analyzes
Promise, such as calls to .then or .resolve, which Firefox can use
instead of callbacks like Chromium. Finally, we store the collected
messages. For internal messages, we order them per pair of compo-
nents, one-time vs. long-lived channels, and deprecated API usage
or not. Table 1 sums up the messages that DoubleX collected. As
indicated in Listing 2, the content script sends one message and
gets a response, while the background page gets a message and
responds. For external messages, we keep track of which extension
component received (or sent) a message, at which line in the code,
and store the corresponding node object for future analyses (cf. Sec-
tion 4.4.3). For example, in Listing 4, DoubleX reports the external
message event, received line 1 in the content script.
4.3.2 Linking Messages Next, for internal messages, we link the
messages sent (sent, responded) by a component to the messages
received (received, got-response) by the other component, i.e., we
connect a sender node to the corresponding receiver node. This
way, DoubleX joins the individual component PDGs with a mes-
sage flow. We give a graphical example in Figure 6 in the Appendix.
Session 6B: Web VulnerabilitiesCCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1794Besides, to keep track of variable values, we update the values of
the receiver nodes (and those depending on it) with the sender node
values. For the example of Table 1, we now know the following
values: request = "Hi BP" and response = {farewell: "Bye CS"}. Thus,
we can compute the value of csReceived (Listing 2 line 3) by leverag-
ing the ObjectExpression {farewell: "Bye CS"} with the key farewell,
getting "Bye CS" (cf. pointer analysis from Section 4.2.4). Similarly,
the value of bpReceived (line 9) is "Hi BP". Overall, DoubleX stati-
cally produces a graph structure, which gives an abstract semantic
meaning to the extension code (including control and data flows,
and pointer analysis) and models interactions within and outside
of an extension. We refer to this graph as the EDG.
4.4 Detecting Suspicious Data Flows
Finally, DoubleX leverages the EDG to detect and analyze suspi-
cious data flows. First, and for each extension, we prefilter sensitive
APIs (i.e., that an attacker could exploit to gain access to an exten-
sion’s privileged capabilities) based on an extension’s permissions.
Then, we traverse the EDG to collect any prefiltered sensitive APIs.
As we flagged external messages in Section 4.3.1, we can finally
perform a data flow analysis (from source to sink) to detect if these
sensitive APIs are executed with attacker-controllable data or could
exfiltrate sensitive user data.
4.4.1 Permission Filtering Given that an extension cannot be ex-
ploited without the corresponding permissions, DoubleX parses
the manifests to automatically generate, for each extension, a list
of sensitive APIs that the extension is allowed to access. We list
the sensitive APIs we consider in Table 5 in the Appendix. In prac-
tice, for XMLHttpRequest and its derivatives (such as fetch), we only
consider extensions that are allowed to make requests to arbitrary
hosts (e.g., through the  permission). For the exfiltration
APIs, such as bookmarks.getTree or history.search, we ensure that
the extensions are allowed to access them (i.e., bookmarks or history
permission). Finally, for tabs.executeScript, we verify that the ex-
tensions either have host or activeTab permission [21], to execute
code in the active tab. In addition, for the code execution APIs (e.g.,
eval or tabs.executeScript) in high-privilege components, we ver-
ify that the extensions define a Content Security Policy (CSP) [53]
that allows their invocations. We also take into account some speci-
ficities of Chrome manifest V3 (such extensions are accepted in the
Chrome Web Store since January 2021 [20]), e.g., host permissions
are stored separately from other permissions or XMLHttpRequest is
not defined in service workers [19].
Sensitive API Collection To perform its intended function-
4.4.2
ality, an extension may use specific APIs, which lead to security
or privacy issues when attackers can exploit them. The extension
component presenting the vulnerability will determine the attack
surface. While background page and WARs are highly privileged,
content scripts have less capabilities. For this reason, we consider
different sensitive APIs, depending on the components we are an-
alyzing (as specified in Table 5 in the Appendix). As explained in
Section 4.4.1, we only consider APIs that have relevant permissions.
We detect these APIs by traversing the EDG and computing
node values. Whenever DoubleX reports a sensitive API, we store
the API name, the node object, and its corresponding value for
further analyses (cf. following section). Besides, we keep track of
the extension component, which uses the sensitive API and the cor-
responding line number. For example, DoubleX accurately reports
the call to eval in Listing 4 line 2. Even though it is not written in
plain text and is dynamically invoked, our pointer analysis module
computes the correct value (i.e., string concatenation, recognizes
the access of the eval function property of the window object with
the bracket notation, recognizes the call to the sensitive API eval).
We also report eval line 4. Both reports are stored as sensitive APIs
for the content script.
4.4.3 Data Flow Tracking After collecting external messages, i.e.,
messages exchanged with an attacker (Section 4.3.1) and detecting
relevant sensitive API invocations (Section 4.4.2), DoubleX per-
forms a data flow analysis (from source to sink). Here, we aim at find-
ing any path between dangerous or sensitive data and security- or
privacy-critical APIs. Based on the way they operate, we distinguish
three categories of sensitive APIs (which we refer to as danger):
• Direct dangers can directly leverage attacker-controllable data
as parameter to perform malicious activities. Such APIs include
downloads.download and tabs.executeScript, knowing that only
the high-privilege components can call them (while eval can also
be used by the content scripts). To handle such APIs, DoubleX
extracts their parameters so that it can verify if they depend on
data coming from an attacker. To limit false positives, we only
extract the relevant parameters. For example, it is dangerous to
have an attacker-controllable input in the second parameter of
tabs.executeScript (or the first parameter if the tab ID is not indi-
cated), provided it contains the code to be executed [60]. The first
parameter, though, only allows to choose the tab to execute a script
in, which is worthless for attackers if they cannot control the code.
• Indirect dangers work in two steps: first, they have to be called
with attacker-controllable data; second, they need to send the re-
sults back to the attacker. For example, to perform cross-origin
requests, all components can use fetch or ajax. We analyze these
APIs in two steps: first, we verify if an attacker can control the
relevant API parameters and if it is the case; second, we verify
whether the data sent back to a web page or extension (i.e., the
attacker) depends on data the extension received.
• Exfiltration dangers directly exfiltrate sensitive user data and
do not necessarily need any input from an attacker. Such APIs
can only be used by the high-privilege components and include
cookies.getAll, bookmarks.getTree, and history.search. DoubleX
extracts the sensitive API callback parameters and analyzes if they
are sent back to an attacker.
As the EDG models interactions between extension components,
we can handle cases where messages with attacker-controlled data
(or data to be exfiltrated) are forwarded back and forth between
the extension components before being exploited. Finally, Dou-
bleX summarizes its findings in a data flow report. Specifically,
it indicates the sensitive APIs it found per extension component
(including API name, line number, and computed value) and if it
detected a suspicious data flow. When it is the case, the report
indicates if data was received from or sent to an attacker (including
in which extension component, the line number, API value, etc.).
For example, Listing 5 is a simplified extract of the data flow re-
port for Listing 4 (the full report is in Listing 7 in the Appendix). In
particular, the value entry line 2 indicates that DoubleX accurately
Session 6B: Web VulnerabilitiesCCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea17951 addEventListener ( ' message ', function ( event ) {
window [ 'e ' + 'v ' + '' + 'al ']( event.data );
2
event = { ' data ': 42};
3
eval ( event.data );
4
5 })
Listing 4: Vulnerable content script example
Extensions
- Content scripts
- Background page
- WARs
#Analyzed
154,484
65,047
98,974
7,668
#Parsing errors
3,674
1,871
1,847
597
#Timeouts/Crashes
9,500
5,586
4,227
1,454
Table 2: Analyzed Chrome extensions
1 {" direct - danger1 ": " eval ",
2 " value ": " window . eval ( event . data )",
3 " line ": "2 - 2" ,
4 " dataflow ": true ,
5 " param1 ": {
6
7
8 {" direct - danger2 ": " eval ",
9 " value ": " eval (42) ",
10 " line ": "4 - 4" ,
11 " dataflow ": false }
" received ": " event ",
" line ": "1 - 1"}} ,
Listing 5: Extract of the data flow report for Listing 4
computes the first call to eval, despite string concatenation and dy-
namic invocation. Lines 2-7 show that it detects a data flow between
the first parameter of eval Listing 4 line 2 and the message event
received Listing 4 line 1, from a web page. Thus, we report here that
the sensitive API eval can be called with attacker-controllable data.
The second danger entry (lines 8-11) revolves around the second
call to eval(event.data) (Listing 4 line 4). DoubleX detects that the
event object has been redefined, as it computes the value 42 for
event.data (line 9) and labels the danger as not having an externally
controllable data flow (line 11). This way, the combination of our
data flow and pointer analyses enables us to accurately label the
first call to eval(event.data) as vulnerable without misclassifying
the second one.
5 Large-Scale Analysis of Chrome Extensions
To evaluate the precision and recall of DoubleX regarding suspi-
cious data flows detected, we apply it to Chrome extensions. In
the following, we first outline how we collected 154,484 exten-
sions and extracted their components. Subsequently, we describe
our large-scale data flow analysis results with a focus on the vul-
nerable extensions we found. Furthermore, we compare DoubleX
to directly related work and evaluate our approach on a labeled
vulnerable extension set. Finally, we discuss DoubleX run-time
performance and summarize our main findings.
5.1 Extension Collection and Setup
We designed DoubleX to analyze both Chromium-based and Firefox
extensions. In this section, we focus solely on Chrome, while we
discuss and analyze Firefox extensions in Section 6.3. We first report
on our extension set before discussing the number of extensions
we could analyze.
5.1.1 Collecting Extensions To collect extensions, we leveraged the
Chrome Web Store sitemap [10], which contains links to all exten-
sions. Out of the 195,265 listed extensions, we could successfully
download 174,112 of them on March 16, 2021. The remaining ones
were either not available for download for an OS X user agent, or
only available for sale. Also, 19,628 downloaded extensions were
themes, i.e., had no JavaScript component [22]. Thus, we retain
154,484 extensions for further consideration.
For each extension, we parsed its manifest.json [17] to extract
the source code of its components. Even though DoubleX can ana-
lyze UI pages, they are not part of our threat model, as they cannot
be forcefully opened (i.e., an attacker cannot deliver their messages
to them). In the following, we consider content scripts, background
page, and WARs. Specifically, we combined all content scripts into a
single JavaScript file. For the background page, we considered both
the content of the HTML background page and the scripts listed
in the manifest background section. As for WARs, we collected
all HTML files flagged as accessible and extracted both inline and
external scripts. We chose to remove jQuery files (based on the
output of retire.js [64] and file names such a jquery-3.5.1.js), to
not analyze the well-known library to avoid running into timeouts.
To limit potential false negatives, we consider that if a parameter
of an unknown function is attacker controllable, so is the output
of the function. In practice, we do not have any false negatives
due to the absence of jQuery (cf. Section 5.4), and this approxima-
tion leads to less than 3.3% false positives (cf. Section 5.2.1), which
we deem acceptable. Finally, to ease the manual verification of
our data flow reports, we leveraged js-beautify [46] to produce a
human-readable version of each extracted file.
5.1.2 Running DoubleX To analyze the considered Chrome exten-
sions, we ran DoubleX with pairwise combined content scripts/
background page and content scripts/WARs. This allows us to rea-
son about the capabilities of a Web attacker (which either requires
communication through external messaging APIs or via the content
scripts) as well as the ability of other extensions to send messages
(since for background page and WARs, we also analyze external
messages). For performance reasons, we set a timeout of 40 min-
utes to analyze two components of an extension (in particular, we
set four 10-minute timeouts for specific steps of our analysis). We
discuss DoubleX throughput into more details in Section 5.5.
As indicated in Table 2, we could analyze 91.5% of the extensions
completely. For 2.4%, Esprima reported errors (mostly related to
syntax errors in the code or usage of the unsupported spread syn-
tax), while 6.1% ran into a timeout or the resulting EDG crashed
the Python interpreter. Nevertheless, DoubleX could analyze such
extensions partially. While the parsing errors are specific to some
extensions, the timeouts concern independent components. For ex-
ample, even if the PDG generation of an extension’s content script
timed out, we could analyze the background page independently for
vulnerabilities. While DoubleX analyzed between 88.5 and 93.9%
of the content scripts and background page completely, Esprima
encountered more parsing errors for WARs (7.8%), which also timed
out more often (19%). By checking the size of the WARs, we no-
ticed that they are larger than the other components as numerous
Session 6B: Web VulnerabilitiesCCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1796Sensitive API
Code Execution
- eval
- setInterval
- setTimeout
- tabs.executeScript
Triggering Downloads
Cross-Origin Requests
- ajax
- fetch
- get
- post
- XMLHttpRequest.open
Data Exfiltration
- bookmarks.getTree
- cookies.getAll
- history.search
- topSites.get
Sum
#Reports
113
38
1
18
56
21
95
6
4
4
1
80
80
31
23
23
3
309
#DF
102
34
1
15
52
21
75
6
4
4
1
60