title:PoliCert: Secure and Flexible TLS Certificate Management
author:Pawel Szalachowski and
Stephanos Matsumoto and
Adrian Perrig
PoliCert: Secure and Flexible TLS Certiﬁcate Management
Pawel Szalachowski
Inst. of Information Security
Dept. of Computer Science
ETH Zurich, Switzerland
PI:EMAIL
Stephanos Matsumoto
CMU, United States
and
Inst. of Information Security
Dept. of Computer Science
ETH Zurich, Switzerland
PI:EMAIL
Adrian Perrig
Inst. of Information Security
Dept. of Computer Science
ETH Zurich, Switzerland
PI:EMAIL
ABSTRACT
The recently proposed concept of publicly veriﬁable logs is a promis-
ing approach for mitigating security issues and threats of the cur-
rent Public-Key Infrastructure (PKI). Although much progress has
been made towards a more secure infrastructure, the currently pro-
posed approaches still suffer from security vulnerabilities, inefﬁ-
ciency, or incremental deployment challenges.
In this paper we propose PoliCert, a comprehensive log-based
and domain-oriented architecture that enhances the security of PKI
by offering: a) stronger authentication of a domain’s public keys,
b) comprehensive and clean mechanisms for certiﬁcate manage-
ment, and c) an incentivised incremental deployment plan. Surpris-
ingly, our approach has proved fruitful in addressing other seem-
ingly unrelated problems such as TLS-related error handling and
client/server misconﬁguration.
Categories and Subject Descriptors
K.6.5 [MANAGEMENT OF COMPUTING AND INFORMA-
TION SYSTEMS]: Security and Protection—Authentication; C.2.0
[COMPUTER-COMMUNICATION NETWORKS]: General—
Security and protection
General Terms
Security
Keywords
Public-Key Infrastructure; SSL; TLS; certiﬁcate validation;
security policy; public-key certiﬁcate; public log servers
1.
INTRODUCTION
Certiﬁcate authorities (CAs) in today’s TLS PKIs are endowed
with great authority. As trusted parties, they sign certiﬁcates used
by clients all over the world to authenticate servers and establish
HTTPS connections. Browser and operating system vendors also
hold signiﬁcant power in the TLS infrastructure, since they manage
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’14, November 3–7, 2014, Scottsdale, Arizona, USA.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-2957-6/14/11 ...$15.00.
http://dx.doi.org/10.1145/2660267.2660355.
the list of trusted root CA certiﬁcates which serve as the roots of
trust for certifying TLS certiﬁcates.
Though these parties wield signiﬁcant authority in the TLS ecosys-
tem, their trustworthiness has been tarnished by several recent events.
Operational mistakes, social engineering attacks, and governmen-
tal compulsion [28] have resulted in the issuance of fraudulent TLS
certiﬁcates for many high-proﬁle sites. In these cases, adversaries
can impersonate domains to clients by performing active man-in-
the-middle (MitM) attacks, intercepting secure connections and steal-
ing potentially sensitive information.
In an effort to address this problem, proposals such as Certiﬁ-
cate Transparency [24] have sought to increase CA accountability
by using public logs to monitor CA behavior. Like CAs, logs are
trusted parties that contribute towards certifying the validity of a
certiﬁcate. Public logs record certiﬁcates issued by CAs and pro-
vide proofs that a certiﬁcate has been observed, thus making all cer-
tiﬁcates (even maliciously-issued ones) visible for public scrutiny.
However, there is a disconcerting imbalance of power in the TLS
infrastructure. Domain owners have little control over how their
own TLS certiﬁcates are used and veriﬁed. In log-based proposals,
a valid CA signature and a proof from a public log are enough to
convince a client that a certiﬁcate is authentic. Domains cannot
specify any criteria of their own that their certiﬁcates must fulﬁll.
In fact, browser vendors often set the majority of such criteria, by
specifying root CAs whose keys anchor certiﬁcate chains and by
determining how errors in the TLS handshake are handled (such as
through a soft failure, which allows the user to proceed anyway, or
a hard failure, which does not).
Additionally, CT and other log-based proposals [4, 20, 27] suf-
fer from several inefﬁciencies. While proofs from public logs can
be efﬁciently generated and validated, some of these proposals as-
sume or explicitly argue for the global coordination of logs in or-
der to ensure that they have a consistent view of valid certiﬁcates.
This global coordination is inefﬁcient because certiﬁcate issuances
and revocations are frequent, and because it requires that each do-
main only have a single active certiﬁcate at a time. Some of these
proposals also do not efﬁciently handle events such as certiﬁcate
revocation, key loss, or key compromise.
To address these inefﬁciencies and, in particular, the imbalance
of control in today’s TLS PKI, we design and propose PoliCert, a
log-based proposal that allows domains to deﬁne policies govern-
ing the usage of their TLS certiﬁcates. These policies, called sub-
ject certiﬁcate policies (SCPs), provide domains with much greater
control over their certiﬁcates by allowing them to specify param-
eters such as trusted CAs, update criteria, and error handling that
their certiﬁcates must follow, and also gracefully handle the loss or
compromise of a private key. Additionally, parameters in SCPs are
inheritable and can be applied to subdomains, allowing more ex-
pressive certiﬁcate policies and providing some resilience against
misconﬁguration in subdomains.
We also propose a design for multi-signature certiﬁcates (MSCs),
which allow multiple CA signatures on a certiﬁcate and serve as
the format for encoding SCPs. This feature is not part of the X.509
standard, but provides stronger authentication of a subject’s public
key and enhances resilience to CA compromise. Since MSCs con-
sist of a set of X.509 certiﬁcates and extensions, our design requires
very little change to the existing certiﬁcate standard.
To enable efﬁcient monitoring, updates, and revocation of certiﬁ-
cates and policies, we propose a system of public logs which track
both MSCs and SCPs. These logs leverage Merkle Hash Trees
(MHTs) to store and generate cryptographic proofs for certiﬁcates,
revocations, and policies. Proofs in PoliCert can also prove the
absence of MSCs and SCPs from the log in order to prevent ad-
versaries from suppressing this information and forging fake cer-
tiﬁcates or policies. This property also secures an incremental de-
ployment of PoliCert.
Logs maintain separate databases for MSCs and SCPs. This sep-
aration allows us to mitigate inefﬁciencies in previous proposals.
Because a valid and logged MSC that meets the criteria speciﬁed
in the SCP is considered authentic, logs only need to maintain a
globally consistent view of domains’ SCPs. This means that do-
mains can only have a single active policy at any given time (which
is reasonable), but can have as many active certiﬁcates as they wish.
To summarize, this paper makes the following contributions:
• An argument for the use and beneﬁts of subject certiﬁcate poli-
cies (§4.1).
H(H(H(d1)kH(d2))kH(H(d3)kH(d4)))
H(H(d1)kH(d2))
H(H(d3)kH(d4))
H(d1)
H(d2)
H(d3)
H(d4)
d1
d2
d3
d4
Figure 1: Merkle hash tree with bold nodes proving the exis-
tence of d2 in the tree. The symbol k denotes concatenation and
H(·) is cryptographic hash function.
attacks (such as social engineering attacks) on clients, and can-
not break cryptographic primitives such as public-key algorithms
or hash functions.
In this paper we assume that browsers are kept up-to-date, that
their lists of root CA and log certiﬁcates are authentic, and that the
various browser vendors reach a consensus of the security level of
various cryptographic algorithms. We also assume that public logs
and auditors (§4.2) are highly available. Finally, we assume that all
parties are time synchronized within a few minutes.
The main properties we want to achieve are:
1. Resilience to compromise of trusted parties. Unless more than a
threshold number of all public logs are compromised, it should
be impossible for an adversary to impersonate a domain by forg-
ing a certiﬁcate or policy that would be accepted by clients.
• A proposed format for multi-signature certiﬁcates, which allow
an arbitrary number of independent CA signatures on a certiﬁ-
cate (§5.1).
2. Efﬁciency of certiﬁcate update and revocation. It should be pos-
sible to update or revoke a domain’s certiﬁcate within hours of
the domain requesting the action.
• A design of subject certiﬁcate policies, which specify how and
which certiﬁcates of a domain or subdomain can be used (§5.2).
• Protocols for verifying the authenticity and checking the revo-
cation status of an MSC using publicly-auditable logs (§6).
• A full implementation, and evaluation of the security and efﬁ-
ciency of our protocols (§7, §9).
3. Balanced control among CAs, logs, browsers, and domains.
All parties should be able to contribute towards determining
whether or not a domain’s certiﬁcate is valid, whether through
signing information or specifying parameters for connection es-
tablishment.
4. Interoperability with the current CA business model. To fa-
cilitate deployment of PoliCert, CAs should not have to change
their business model signiﬁcantly from their current operations.
2. PROBLEM DEFINITION
3. BACKGROUND AND RELATED WORK
Our main objective in designing PoliCert is to explore the ef-
fects of enabling domains to deﬁne their own certiﬁcate compli-
ance policies while making minimal changes to the current PKI
environment. In doing so, we endeavor to provide a mechanism
for enforcing expressive and extensible policies governing the us-
age of TLS certiﬁcates. We aim to allow domains to specify criteria
such as CAs authorised to sign certiﬁcates for a domain, parameters
for updating certiﬁcates and policies, and error handling behavior
in TLS handshakes. Furthermore, we want to efﬁciently handle
events such as certiﬁcate revocations, policy updates, and loss or
compromise of a private key.
Our adversary’s goal in this setting is to impersonate a website to
a client in order to perform a MitM attack. To this end, the adver-
sary may be able to compromise trusted parties by gaining access
to their private keys and signing messages using these keys. How-
ever, this access may be short-term, such as the ability to sign a
single message or certiﬁcate, and we assume that the adversary is
not able to gain long-term access to a threshold number of trusted
parties. We further assume that the adversary cannot mount other
3.1 MHTs and Presence/Absence Proofs
A Merkle hash tree (MHT) is a binary tree in which each leaf
node contains data, and each non-leaf node contains the hashes of
its child nodes [25]. The structure of the tree can be leveraged to
efﬁciently prove that a leaf node (or its data) is in the tree. Since as
shown in Figure 1, only one node per level of the tree is needed in
a proof of presence, the proof size for any leaf node is proportional
to the tree height, which is O(log2 n) for n leaf nodes.
An entity wishing to verify the presence of d2 in the tree shown
in Figure 1 would receive the set {d2, H(d1), H(H(d3)kH(d4))},
which forms the proof of presence. The entity then hashes d2,
which with H(d1) allows it to compute H(H(d1)kH(d2)). This
value can then be concatenated with H(H(d3)kH(d4)) and hashed
to obtain the root hash, the value at the root node of the tree. By
comparing the computed root hash with the true root hash of the
tree, a party can check whether or not d2 is in the tree.
If leaf nodes are ordered in some way (such as lexicographic
ordering for strings), the tree can also provide proofs of absence.
For example, if the leaf nodes in Figure 1 are domain names d1 =
a.com, d2 = c.com, d3 = d.com, and d4 = e.com, then the set
of nodes {d1, d2, H(H(d3)kH(d4))} forms a proof of absence for
b.com. This is because d1 and d2 are adjacent nodes between which
b.com would be located if it were in the tree.
If leaf nodes are ordered chronologically for when they were in-
serted into the tree, then the tree can provide proofs of consistency
showing that leaf nodes have only been added to the tree. Such a
proof of consistency takes the root hashes of the tree at different
times rt and rt′ and provides an efﬁcient proof (logarithmic in the
number of leaf nodes) that the two root hashes are linked in time.
This can be done by providing a set of nodes which can be used to
compute both rt and rt′ , or by providing a set of nodes containing
rt which can be used to compute rt′ . The append-only property of
these MHTs can be used to implement tamper-evident logs [10].
3.2 Related Work
There has been much recent work on the problems of the current
TLS infrastructure and possible solutions to those problems [8, 15,
30]. Systems such as Perspectives [32], Convergence [1], and SSL
Observatory [12] introduce a trusted party called a notary, which
conﬁrms that a TLS certiﬁcate seen by a client is the same as the
one seen by the notary. Other approaches attempt to reduce the
scope of CAs’ authority [13, 16, 19], thereby reducing the amount
of trust and power held by CAs today. Below we describe proposals
similar to PoliCert that use publicly-veriﬁable logs.
Google’s Certiﬁcate Transparency (CT) was among the ﬁrst to
propose public logs and append-only MHTs as a way of providing
better CA accountability [24]. Its goal is to make all certiﬁcates
visible to alert domain owners and clients of any possible misbe-
havior by CAs. CT creates a system of public logs, which maintain
a database of observed certiﬁcates issued by CAs in an MHT. The
log then provides a proof of a certiﬁcate’s presence in the log’s
database, and this proof can be checked by clients during the TLS
handshake. Additionally, the log is publicly-auditable so that any
party can fetch proofs of presence or consistency from the log’s
hash tree to monitor its operations. Special entities called auditors
and monitors may perform these functions as a service for clients,
publishing any evidence of CA misbehavior.
However, CT has several critical shortcomings. By itself, CT
cannot efﬁciently prove that a given certiﬁcate is absent from a log,
since the observed certiﬁcates are stored chronologically to achieve
the append-only property. (Revocation Transparency proposes the
use of an additional tree to provide proofs of absence [23].) Fur-
thermore, CT’s main goal is to detect CA misbehavior, and thus it
does not actually protect clients from ongoing attacks if an adver-
sary successfully registers a fake certiﬁcate at a public log. Finally,
CT does not handle certiﬁcate revocation. Although auxiliary revo-
cation system was presented [23], so far it is not incorporated with
CT. Instead, revocation is proposed to be handled by certiﬁcate re-
vocation lists (CRLs) provided with a browser update, as is done
in Google Chrome [22] and planned in Mozilla [26], and even then
only for a subset of certiﬁcates.
The Accountable Key Infrastructure (AKI) [20] extends the
previous architectures in several ways. First, it allows multiple CAs
to sign a single certiﬁcate. Additionally, the domain can specify
in its certiﬁcate which CAs and logs are allowed to attest to the
certiﬁcate’s authenticity. These features provide resilience against
a certiﬁcate signed by a compromised or unauthorized CA. AKI
can also handle key loss or compromise through cool-off periods.
For example, if a domain loses its private key and registers a new
certiﬁcate not signed by its old private key, the new certiﬁcate will
be subject to a cool-off period (e.g., three days) during which the
certiﬁcate is publicly visible but not usable. This ensures that even
if an adversary obtains and registers a fake certiﬁcate, the domain
has the opportunity to contact the CAs and logs to resolve the issue.
However, to ensure that any log server can provide a proof for a
domain’s certiﬁcate, AKI logs maintain a globally consistent view
of the entries that they have for a given domain name. This applies
for every certiﬁcate operation (registration, update, and revocation),
meaning that even frequent certiﬁcate updates (such as in the case
of short-lived certiﬁcates) are subject to successful log synchro-
nization. AKI also requires that each domain name only has one
active and valid certiﬁcate associate with it at any given time.
Certiﬁcate Issuance and Revocation Transparency (CIRT)
incorporates a revocation monitoring mechanism into a CT-like ar-
chitecture [27]. CIRT adds a binary search tree sorted by domain
name (called a LexTree), with each node also storing all of the
observed certiﬁcates for that name (but only the most recent cer-
tiﬁcate is considered valid). A LexTree is an MHT where a node’s
hash is equal to its domain name and certiﬁcates concatenated with
its children’s hash values. Using this binary search tree in conjunc-
tion with a CT-style append-only tree allows a log to prove with a
logarithmic number of nodes that a certiﬁcate has been observed
and that it has not yet been revoked.
Log proofs in CIRT contain a logarithmic number of nodes, but
each node stores all observed certiﬁcates for a domain and thus
may have a large number of observed certiﬁcates. Thus proofs in
a LexTree will grow quite large with time, as certiﬁcates must be
renewed periodically. Additionally, CIRT’s LexTree allows each
domain to have only a single active certiﬁcate at any time, pre-
venting servers from using different certiﬁcates at once, which is