parameters). The simulator does nothing in Step 2 and Step 3. In Step 4, the simulator
extracts Alice’s commitments of the form Comm(x; rx) and inserts x(cid:48) in the bin BX [b] at a
random unused position p ∈ [µ], where (b, x(cid:48)) = phasem,h(x). Let S denote the set of the µ
associated (tag || decommit) pairs. If there exists (T || D) ∈ S such that T =(cid:74)x(cid:48)(cid:75)tag
Comm(x; rx) = Comm(x; D ⊕(cid:74)x(cid:48)(cid:75)enc
b,p and
b,p ), add x to the set X∗. The simulator sends X∗ to the
FPSI functionality.
We see here that the simulator extracts candidate inputs for Alice by extracting from her commit-
ments. Thus the protocol requires an extractable commitment scheme. This protocol also beneﬁts
from restricting Alice to a set of size exactly n item, unlike the dual execution protocol which
achieves n items in exception and upper bounded by roughly n(cid:48) < 4n items.
6.6 Parameters
Let us now review the protocol as a whole and how to securely set the parameters. The parties
ﬁrst agree on hashing parameters that randomly map their sets of n items into m bins with the
use of phasing. The bins are padded with dummy items to size µ = O(log n). The parties both act
as Fencode receiver to encode all mµ items in their bins, including dummy items. Each bin position
uses a unique Fencode session. For all non-dummy encodings, both parties compute µ = O(log n)
common encodings. If an item is in the intersection, exactly one of these µ encodings will be the
same for both parties. Alice then sends Bob all of these common encodings in a random order (not
by bins). Bob is able to identify the matching encodings and infer the intersection.
of there existing a bin with more than µ items is ≤ m(cid:80)n
By applying a bins into balls analysis, it can be seen that for m bins and n balls, the probability
(cid:0)n
(cid:1)(cid:0) 1
(cid:1)i(cid:0)1 − 1
(cid:1)n−i. Bounding this
i=µ+1
i
m
m
to be negligible in the security parameter gives the required bin size for a given n, m. By setting
m = O(n/ log n) and minimizing the overall cost, we obtain the set of parameters speciﬁed in
Figure 5 with statistical security λ = 40. We found that m = n/10 minimizes the communication
for our choices of n at the expense of increased computation when compared to m = n/4. As such,
we choose m = n/10 in the WAN setting where communication is the dominant cost and m = n/4
in the LAN setting where computation has increased importance.
6.7 Discussion
Challenges of Two Party Output An obvious question is whether our protocol be extended
to support two party output. In the semi-honest case, this is trivial, since the party who learns the
intersection ﬁrst can simply report it to the other. In the malicious setting, the parties cannot be
trusted to relay this information faithfully.
17
LAN
28
Set size n
µ
24
m 64
µ
40
m 25
WAN
212
25
1024
43
409
216
26
16384
45
6553
220
28
262144
47
104857
224
29
4194304
49
1677721
Figure 5: Hashing parameters µ, m for statistical security λ = 40.
A natural idea to solve this problem is to have Bob send all of his encodings to Alice, making the
protocol completely symmetric. We brieﬂy describe the problem with this approach. Suppose Bob
behaves honestly with input set Y throughout most of the protocol. Let y0 ∈ Y be a distinguished
element. In the last step, he sends his common encodings to Alice, but replaces all the encodings
corresponding to y0 with random values.
Now Bob will learn X ∩ Y , but his eﬀect on Alice will be that she learns only X ∩ (Y \ {y0}).
More generally, a malicious Bob can always learn X ∩ Y but cause Alice to receive output X ∩ Y (cid:48)
for any Y (cid:48) ⊆ Y of Bob’s choice.
7 Performance Evaluation
We have implemented several variants of out main protocol, and in this section we report on its
performance. We denote our dual execution random-oracle protocol as DE-ROM and the encode-
commit random-oracle protocol as EC-ROM. Only the dual execution protocol was implemented
in the standard model and denoted as SM. We do not implement the encode-commit protocol in
the standard model due to the communication overhead of standard model commitments such as
[FJNT16], see 7.1 Communication Cost. All implementations are freely available at github.com/
osu-crypto/libPSI.
We give detailed comparisons to two leading malicious-secure PSI protocols: our previous
Bloom-ﬁlter-based protocol [RR17] and the Diﬃe-Hellman-based protocol of De Cristofaro, Kim
& Tsudik [DKT10]. We utilized the implementation provided by [RR17] of that protocol and
[DKT10]. All implementations were compared on the same hardware.
Implementation Details & Optimizations. We implemented our protocol in C++ and both
the standard-model and random-oracle instantiation of Fencode, to understand the eﬀect of the
random-oracle assumption on performance.
We implement Fencode by directly utilizing [OOS16] in the ROM model or with several chosen
message 1-out-of-2 OTs [KOS15] in the standard model as speciﬁed by Section 4. When we in-
stantiate Fencode with [OOS16], we use the BCH-(511, 76, 171) linear code. As such, the Fencode
input domain is {0, 1}76. To support PSI over arbitrary length strings in the random-oracle model,
we use the hash to smaller domain technique of [PSZ16] in conjunction with phasing. The hashed
elements are 128 bits. This enables us to handle sets of size n such that 76 ≥ λ + log n, e.g. n = 236
with λ = 40 bits of statistical security. For larger set sizes and/or security level, a larger BCH code
can be used with minimal additional overhead. In the standard model, we perform PSI over strings
of length 32 and 64 bits due to hash to smaller domain requiring the random-oracle to extract.
We used SHA1 as the underlying hash function, and AES as the underlying PRF/PRG (counter
mode for a PRG) where needed. The random-oracle instantiation requires the OT-extension hash
function to be modeled as a random-oracle. We optimize the Fencode instantiations by not hashing
dummy items.
18
Setting Protocol
28
212
216
220
224
Set size n
LAN
WAN
[KKRT16]∗
[DKT10]
[RR17]
Ours (EC-ROM)
Ours (DE-ROM)
Ours (SM, σ = 32)
Ours (SM, σ = 64)
[KKRT16]∗
[DKT10]
[RR17]
Ours (EC-ROM)
Ours (DE-ROM)
Ours (SM, σ = 32)
Ours (SM, σ = 64)
0.4
365
0.4
365
Total Online Total Online Total Online Total Online Total Online
59
0.19
−
1.6
−
0.21
218
0.13
261
0.13
−
0.15
−
0.19
106
0.56
−
1.7
−
0.97
3194
0.67
2626
0.90
−
1.3
−
1.9
0.19
1.6
0.002
0.004
0.006
0.018
0.034
0.56
1.7
0.14
0.26
0.33
0.11
0.14
0.21
22.4
0.03
0.06
0.08
0.19
0.31
0.59
23.2
0.95
1.1
0.63
0.56
0.74
0.21
22.4
0.8
0.19
0.23
0.48
0.84
0.59
23.2
5.3
1.5
1.2
8.0
16.8
3.8
5630
148
12.6
18
56
134
7.5
5634
1080
255
106
1322
3782
3.8
5630
16
11.3
16
31
35
7.5
5634
216
254
105
115
164
59
−
−
239
296
−
−
107
−
−
3208
2647
−
−
367
69
16
78
226
6.3
9.6
0.94
1.3
3.5
8.0
1.3
0.7
0.69
1.0
1.8