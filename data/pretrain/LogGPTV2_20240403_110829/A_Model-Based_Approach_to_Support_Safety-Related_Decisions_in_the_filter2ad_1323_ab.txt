### A Compositional Approach to Risk Modeling

This paper introduces a compositional risk modeling approach through the concept of risk model encapsulation, where the internal details of a risk model are hidden. This is achieved by defining a risk model interface that contains only the necessary information for composing individual risk models to derive an overall risk picture. However, previous work in this area has primarily focused on modeling aspects and qualitative analyses, without addressing quantitative risk quantification techniques.

Our proposed approach is based on stochastic state-based models, which have been widely adopted in dependability and performance analysis literature [7][25], often in combination with simulative and experimental measurement approaches [23]. Traditionally, these techniques were applied to specific problems with nearly fixed system architectures. As systems became more complex, the need for a different perspective arose, leading to techniques for automatically deriving analysis models from more abstract system descriptions. This research direction remains active, with a current focus on the UML language [8].

To enhance the reusability of state-based models, similar to ordinary "components," various authors have recognized the benefits of applying modularization and "separation of concerns" [12] to the construction of state-based stochastic models. In such approaches (e.g., [13][14][15][22]), the overall analysis model is built from submodels that address specific aspects of the system, each with well-defined interfaces. These submodels are then composed following predefined rules based on the actual scenario to be represented. The authors of [16] further developed this concept by defining an approach where SAN models extracted from model libraries are composed together using model transformations, based on semi-formal specifications of the scenario. Our proposed approach falls into this category, as it is based on a library of models that can be automatically assembled to represent different system configurations. This versatility helps in managing the complexity of safety barriers and the variability of Work Permit (WP) applications.

### Model-Based Approach for WP Processing

#### A. Methodology

State-based stochastic models are valuable tools for constructing "warning" messages (as shown in Fig. 1). They can account for complex interactions, dependencies, and aspects related to time and probabilistic behavior. By applying model-based evaluation [7] to a model of the safety barriers relevant to the work permit under examination, specific safety-related metrics can be evaluated, and a warning message generated if they fall below a predefined threshold.

To construct the model, we assume the availability of:
1. A library of architectural models of barriers, specifying components and interconnections, as well as unwanted events.
2. A library of "template" SAN models, specifically created for the WP problem.
3. A database storing information on the current state of the installation, which is typically already in use in current practice.

The high-level view of our proposed approach is illustrated in Fig. 2. The workflow takes a WP application as input and provides a decision on whether the WP should be released or rejected. The first step involves analyzing the WP application to retrieve relevant information, such as the kind of work and the areas involved, and identifying the relevant safety barriers. The effort required for this step depends on the WP form's representation. For structured representations (e.g., semi-formal languages, XML), information can be directly retrieved. Otherwise, a WP Analysis step is performed to extract the needed information. We assume that the relevant barriers and WP characteristics have already been extracted.

The Templates Selector module (1) processes the extracted information, identifying the template models to be retrieved from the model library and how they should be interconnected. The Model Composer module (2) then assembles the complete composite model for evaluating the WP request. The next step (3) is to evaluate the model and obtain numerical results for the metrics of interest. These results, possibly accompanied by warning messages, are presented to the decision maker (4), who ultimately decides whether to release the WP. Before making the final decision, the decision maker can request additional evaluations, such as sensitivity analysis or "what-if" scenarios.

In this paper, we focus on the key steps 1 and 2 of the workflow and provide an application to a simple use case, demonstrating the execution of steps 3 and 4.

#### B. Barriers Architectural Models

As a prerequisite for step 1, we assume the availability of a library of architectural models of barriers. These models, created and maintained by petroleum and safety experts, describe events to be avoided or detected, the chain of events that may cause them, and possible barriers that prevent their propagation. These models are updated infrequently, and their consistency and adherence to reality are thoroughly verified.

The language used to model barriers is a choice based on technical details and company preferences. At this level, we are interested in the following information:
- Events of interest for the barrier, with occurrence probability distributions.
- Components of the barrier, including human and organizational entities, with fault occurrence probability distributions and failure modes.
- How component failures propagate and affect other components.
- How events propagate/escalate, with immediate or delayed occurrences.
- Components that can block event propagation, some of which are consumable.
- Components that can detect events, with timely or late detection.
- Metrics of interest for the barrier, such as the probability of event occurrence, non-detection, and component failure combinations.

This information needs to be represented in a structured way and stored in a library, suitable for processing by the Template Selector module. Languages like UML [21] or simpler representations like XML documents can be used.

#### C. Work Permit Request

We need to identify the relevant information in a WP application. Based on standardized WP forms provided in [3], there are two types of WP forms: Level 1 and Level 2, depending on the associated risk. The following list applies to both levels unless otherwise specified:
- **Date and Time:** Basic information includes the date and time of execution, important for retrieving up-to-date parameters and predicting future metrics.
- **Kind of Work:** Specified in the "Work description" field, with additional checkboxes for Level 1 WPs to indicate specific dangerous work. This helps identify associated risks and safety barriers.
- **Location:** Precisely identified by fields such as "Installation," "Location/module," "Deck," and "Zone." This allows for the identification of location-specific risks and conflicting work.
- **Risks:** Described in the "Identified risks" section, including hazards, potential accidents, and mitigation measures. This identifies the events to be avoided.
- **Required Operations and Safety Measures:** Filled by the applicant, indicating necessary operations and safety measures, contributing to the selection of barriers.
- **Isolation of Safety Systems:** Specifies if the work requires disconnecting safety systems, the affected area, and countermeasures, providing important information for concurrent or planned work.

#### D. Data Repository

The final element is a data repository storing information about the installation and its components, obtained from monitoring, historical data, or datasheets. We assume the availability of:
- Failure rates or distributions of components.
- Relative occurrence of different failure modes.
- Occurrence rates or distributions of events.
- Time of last repair, installation, or verification of components.

### Analysis Model Templates

The above information drives the construction of the stochastic analysis model from a set of reusable submodels with predefined interfaces and parameters. These submodels, created using the SAN formalism, are organized in a library and instantiated and connected to model the scenario concerning the WP under examination. The library includes 8 templates: EventOccurrence, EventRecovery, ConditionChecker, GenericComponent, Detector, ConsumableBarrier, Disabler, and Timeline. Each template models a key aspect, and when combined, they represent the behavior of whole barriers.