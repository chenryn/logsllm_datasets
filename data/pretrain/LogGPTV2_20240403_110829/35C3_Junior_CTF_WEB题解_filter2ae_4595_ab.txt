                    die("ERROR!");
                }
            } else {
                die("ERROR!");
            }
        }
    ?>
由`app.rb`可知，访问`/admin/`可以拿到`flag.txt`
`id`为随机数，`pw`为所填内容的md5值。
且在读取文件内容时，`id`没有被强制转换为`int`，所以我们可以构造注入进行任意文件读取。
但是还需要满足两个if条件。我们知道`(int)`转换时，会转换字符串开头的所有数字，丢弃掉数字后的非数字内容。
因此我们构造
`echo file_get_contents($BACKEND . "get/your_id/../../admin);`即可读到flag。
不过复现的时候题目环境坏了，读不到了。
## saltfish
源码
     25:
            raise Exception("InvalidUserName")
        if not all([x in string.ascii_letters or x in string.digits for x in name]):
            raise Exception("InvalidUserName")
        # Check if name exists
        if query_db("SELECT name FROM users WHERE name=?", name):
            raise Exception("UserExists")
        if query_db("Select id, name FROM users WHERE email=?", email):
            raise Exception("EmailExists")
        # Insert user // TODO: implement the verification email
        db = get_db()
        c = db.cursor()
        c.execute("INSERT INTO users(name, email, type) values(?, ?, ?)", (name, email, usertype))
        db.commit()
        return jsonify({"success": True})
    @app.route("/api/login", methods=["POST"])
    def login():
        print("Logging in?")
        # TODO Send Mail
        json = request.get_json(force=True)
        login = json["email"].strip()
        try:
            userid, name, email = query_db("SELECT id, name, email FROM users WHERE email=? OR name=?", (login, login))
        except Exception as ex:
            raise Exception("UserDoesNotExist")
        return get_code(name)
    @app.route("/api/verify", methods=["POST"])
    def verify():
        code = request.get_json(force=True)["code"].strip()
        if not code:
            raise Exception("CouldNotVerifyCode")
        userid, = query_db("SELECT userId FROM userCodes WHERE code=?", code)
        db = get_db()
        c = db.cursor()
        c.execute("DELETE FROM userCodes WHERE userId=?", (userid,))
        token = random_code(32)
        c.execute("INSERT INTO userTokens (userId, token) values(?,?)", (userid, token))
        db.commit()
        name, = query_db("SELECT name FROM users WHERE id=?", (userid,))
        resp = make_response()
        resp.set_cookie("token", token, max_age=2 ** 31 - 1)
        resp.set_cookie("name", name, max_age=2 ** 31 - 1)
        resp.set_cookie("logged_in", LOGGED_IN)
        return resp
根据源码可知，`code`是随机生成后存在数据库里的。
login最后会调用`get_code`随机生成`code`后插入数据库中，并返回`code`的值。
我们可以先`login`随机生成`code`插入数据库，得到插入的`code`值，然后调用`/api/verify`即可。
随便注册一个名字为：qweraaasa，login查看返回包。
调用`/api/verify`验证