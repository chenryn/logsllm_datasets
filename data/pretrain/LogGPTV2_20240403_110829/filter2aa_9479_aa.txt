'\" t
.TH "JOURNALCTL" "1" "" "systemd 231" "journalctl"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
journalctl \- 检索 systemd 日志
.SH "SYNOPSIS"
.HP \w'\fBjournalctl\fR\ 'u
\fBjournalctl\fR [OPTIONS...] [MATCHES...]
.SH "描述"
.PP
\fBjournalctl\fR
可用于检索
\fBsystemd\fR(1)
日志(由
\fBsystemd-journald.service\fR(8)
记录)。
.PP
如果不带任何参数直接调用此命令， 那么将显示所有日志内容(从最早一条日志记录开始)。
.PP
如果指定了
[MATCHES...]
参数， 那么输出的日志将会按照
[MATCHES...]
参数进行过滤。 MATCHE 必须符合
"FIELD=VALUE"
格式 (例如
"_SYSTEMD_UNIT=httpd\&.service"
)， 参见
\fBsystemd.journal-fields\fR(7)
手册以了解日志字段的详细介绍。 如果有多个不同的字段被
[MATCHES...]
参数匹配， 那么这些字段之间使用"AND"逻辑连接， 也就是，日志项必须同时满足全部字段的匹配条件才能被输出。 如果同一个字段被多个
[MATCHES...]
参数匹配， 那么这些匹配条件之间使用"OR"逻辑连接， 也就是对于同一个字段，日志项只需满足任意一个匹配条件即可输出。 最后，
"+"
字符可用作
[MATCHES...]
组之间的分隔符，并被视为使用"OR"逻辑连接。 也就是，MATCHE1 MATCHE2 + MATCHE3 MATCHE4 MATCHE5 + MATCHE6 MATCHE7 相当于 ( MATCHE1 MATCHE2 ) OR ( MATCHE3 MATCHE4 MATCHE5 ) OR ( MATCHE6 MATCHE7 )
.PP
还可以使用绝对路径作为参数来过滤日志。 绝对路径可以是普通文件，也可以是软连接，但必须指向一个确实存在的文件。 如果路径指向了一个二进制可执行文件， 那么它实际上相当于是一个对
"_EXE="
字段的匹配(仅匹配完整的绝对路径)。 如果路径指向了一个可执行脚本， 那么它实际上相当于是一个对
"_COMM="
字段的匹配(仅匹配脚本的文件名)。 如果路径指向了一个设备节点， 那么它实际上相当于是一个对
"_KERNEL_DEVICE="
字段的匹配(匹配该设备及其所有父设备的内核设备名称)。 在查询时，软连接会被追踪到底，内核设备名称将被合成， 父设备将按照当时的实际情况被提列出来。 因为日志项一般并不包含标记实际物理设备的字段， 所以，设备节点一般就是实际物理设备的最佳代表。 但是又因为设备节点与物理设备之间的对应关系在系统重启之后可能会发生变化， 所以，根据设备节点过滤日志仅对本次启动有意义， 除非你能确认对应关系在重启之后保持不变。
.PP
可以使用
\fB\-\-boot\fR,
\fB\-\-unit=\fR
等选项 进一步附加额外的约束条件(相当于使用"AND"逻辑连接)。
.PP
最终的输出结果来自所有可访问的日志文件的综合， 无论这些日志文件是否正在滚动或者正在被写入， 也无论这些日志文件是属于系统日志还是用户日志， 只要有访问权限，就会被包括进来。
.PP
用于提取日志的日志文件的集合可以使用
\fB\-\-user\fR,
\fB\-\-system\fR,
\fB\-\-directory\fR,
\fB\-\-file\fR
选项进行筛选。
.PP
每个用户都可以访问其专属的用户日志。 但是默认情况下， 只有root用户以及
"systemd\-journal",
"adm",
"wheel"
组中的用户才可以访问全部的日志(系统与其他用户)。 注意，一般发行版还会给
"adm"
与
"wheel"
组一些其他额外的特权。 例如
"wheel"
组的用户一般都可以执行一些系统管理任务。
.PP
默认情况下，结果会通过
\fBless\fR
工具进行分页输出， 并且超长行会在屏幕边缘被截断。 不过，被截掉的部分可以通过左右箭头按键查看。 如果不想分页输出，那么可以使用
\fB\-\-no\-pager\fR
选项，参见下面的"环境变量"小节。
.PP
如果是输出到 tty 的话，行的颜色还会根据日志的级别变化： ERROR 或更高级别为红色，NOTICE 或更高级别为高亮，其他级别则正常显示。
.SH "选项"
.PP
能够识别的命令行选项如下：
.PP
\fB\-\-no\-full\fR, \fB\-\-full\fR, \fB\-l\fR
.RS 4
如果字段内容超长则以省略号(\&...)截断以适应列宽。 默认显示完整的字段内容(超长的部分换行显示或者被分页工具截断)。
.sp
老旧的
\fB\-l\fR/\fB\-\-full\fR
选项 仅用于撤销已有的
\fB\-\-no\-full\fR
选项，除此之外没有其他用处。
.RE
.PP
\fB\-a\fR, \fB\-\-all\fR
.RS 4
完整显示所有字段内容， 即使其中包含不可打印字符或者字段内容超长。
.RE
.PP
\fB\-f\fR, \fB\-\-follow\fR
.RS 4
只显示最新的日志项，并且不断显示新生成的日志项。 此选项隐含了 \-n 选项。
.RE
.PP
\fB\-e\fR, \fB\-\-pager\-end\fR
.RS 4
在分页工具内立即跳转到日志的尾部。 此选项隐含了
\fB\-n1000\fR
以确保分页工具不必缓存太多的日志行。 不过这个隐含的行数可以被明确设置的
\fB\-n\fR
选项覆盖。 注意，此选项仅可用于
\fBless\fR(1)
分页器。
.RE
.PP
\fB\-n\fR, \fB\-\-lines=\fR
.RS 4
限制显示最新的日志行数。
\fB\-\-pager\-end\fR
与
\fB\-\-follow\fR
隐含了此选项。 此选项的参数：若为正整数则表示最大行数； 若为
"all"
则表示不限制行数； 若不设参数则表示默认值10行。
.RE
.PP
\fB\-\-no\-tail\fR
.RS 4
显示所有日志行， 也就是用于撤销已有的
\fB\-\-lines=\fR
选项(即使与 \-f 连用)。
.RE
.PP
\fB\-r\fR, \fB\-\-reverse\fR
.RS 4
反转日志行的输出顺序， 也就是最先显示最新的日志。
.RE
.PP
\fB\-o\fR, \fB\-\-output=\fR
.RS 4
控制日志的输出格式。 可以使用如下选项：
.PP
\fBshort\fR
.RS 4
这是默认值， 其输出格式与传统的
\m[blue]\fBsyslog\fR\m[]\&\s-2\u[1]\d\s+2
文件的格式相似， 每条日志一行。
.RE
.PP
\fBshort\-iso\fR
.RS 4
与 short 类似，只是将时间戳字段以 ISO 8601 格式显示。
.RE
.PP
\fBshort\-precise\fR
.RS 4
与 short 类似，只是将时间戳字段的秒数精确到微秒级别。
.RE
.PP
\fBshort\-monotonic\fR
.RS 4
与 short 类似，只是将时间戳字段的零值从内核启动时开始计算。
.RE
.PP
\fBshort\-unix\fR
.RS 4
与 short 类似，只是将时间戳字段显示为从"UNIX时间原点"(1970\-1\-1 00:00:00 UTC)以来的秒数。 精确到微秒级别。
.RE
.PP
\fBverbose\fR
.RS 4
以结构化的格式显示每条日志的所有字段。
.RE
.PP
\fBexport\fR
.RS 4
将日志序列化为二进制字节流(大部分依然是文本) 以适用于备份与网络传输(详见
\m[blue]\fBJournal Export Format\fR\m[]\&\s-2\u[2]\d\s+2
文档)。
.RE
.PP
\fBjson\fR
.RS 4
将日志项按照JSON数据结构格式化， 每条日志一行(详见
\m[blue]\fBJournal JSON Format\fR\m[]\&\s-2\u[3]\d\s+2
文档)。
.RE
.PP
\fBjson\-pretty\fR
.RS 4
将日志项按照JSON数据结构格式化， 但是每个字段一行， 以便于人类阅读。
.RE
.PP
\fBjson\-sse\fR
.RS 4
将日志项按照JSON数据结构格式化，每条日志一行，但是用大括号包围， 以适应
\m[blue]\fBServer\-Sent Events\fR\m[]\&\s-2\u[4]\d\s+2
的要求。
.RE
.PP
\fBcat\fR
.RS 4
仅显示日志的实际内容， 而不显示与此日志相关的任何元数据(包括时间戳)。
.RE
.RE
.PP
\fB\-\-utc\fR
.RS 4
以世界统一时间(UTC)表示时间
.RE
.PP
\fB\-\-no\-hostname\fR
.RS 4
不显示来源于本机的日志消息的主机名字段。 此选项仅对
\fBshort\fR
系列输出格式(见上文)有效。
.RE
.PP
\fB\-x\fR, \fB\-\-catalog\fR
.RS 4
在日志的输出中增加一些解释性的短文本， 以帮助进一步说明日志的含义、 问题的解决方案、支持论坛、 开发文档、以及其他任何内容。 并非所有日志都有这些额外的帮助文本， 详见
\m[blue]\fBMessage Catalog Developer Documentation\fR\m[]\&\s-2\u[5]\d\s+2
文档。
.sp
注意，如果要将日志输出用于bug报告， 请\fI不要\fR使用此选项。
.RE
.PP
\fB\-q\fR, \fB\-\-quiet\fR
.RS 4
当以普通用户身份运行时， 不显示任何警告信息与提示信息。 例如："\-\- Logs begin at \&.\&.\&.", "\-\- Reboot \-\-"