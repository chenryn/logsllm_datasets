# 五、Docker 用例
在本章中，我们将介绍以下食谱:
*   用 Docker 测试
*   与 Shippable 和 Heroku 一起执行 CI/CD
*   使用轨迹执行配置项/光盘
*   使用 OpenShift 原点设置 PaaS
*   从源代码在 OpenShift 上构建和部署应用
# 介绍
现在我们知道如何处理容器和映像了。在上一章中，我们还看到了如何在主机和其他容器之间链接容器和共享数据。我们还看到了一台主机上的容器如何与其他主机上的容器进行通信。
现在，让我们看看 Docker 的不同用例。让我们在这里列出几个:
*   想法的快速原型:这是我最喜欢的用例之一。一旦我们有了一个想法，用 Docker 做原型就非常容易了。我们所要做的就是设置容器来提供我们需要的所有后端服务，并将它们连接在一起。例如，要设置一个 LAMP 应用，获取 web 和 DB 服务器并链接它们，就像我们在上一章中看到的那样。
*   协作和分发:Git 是协作和分发代码的最好例子之一。同样，Docker 提供了 Dockerfile、注册表和导入/导出等功能，以便与其他人共享和协作。我们在前面的章节中已经介绍了所有这些。
*   **持续整合** ( **CI** ):马丁·福勒网站([http://www . martinfowler . com/articles/continuousintegration . html](http://www.martinfowler.com/articles/continuousIntegration.html)上的以下定义涵盖了全部内容:
Continuous Integration is a software development practice where members of a team integrate their work frequently, usually each person integrates at least daily - leading to multiple integrations per day. Each integration is verified by an automated build (including test) to detect integration errors as quickly as possible. Many teams find that this approach leads to significantly reduced integration problems and allows a team to develop cohesive software more rapidly. Using recipes from other chapters, we can build an environment for CI using Docker. You can create your own CI environment or get services from companies such as Shippable and TravisCI. We'll see how Shippable and TravisCI can be used for CI work later in this chapter. I thought it would be helpful if I talk about both of them here:
*   **持续交付** ( **光盘**):CI 之后的下一步是持续交付，通过持续交付，我们可以快速可靠地将我们的代码部署到客户、云和其他环境中，而无需任何手动工作。在本章中，我们将看到如何通过 Shippable CI 在 Heroku 上自动部署应用。
*   **平台即服务** ( **PaaS** ): Docker 可以用来构建自己的 PaaS。可以使用诸如 OpenShift、CoreOS、Atomic 等工具/平台进行部署。本章稍后，我们将看到如何使用 OpenShift Origin([https://www . okd . io](https://www.okd.io))设置 PaaS。
# 用 Docker 测试
在进行开发或质量保证时，如果我们能够根据不同的环境检查我们的代码，这将是非常有用的。例如，我们可能需要在不同版本的 Python 之间，或者在不同的 Linux 发行版上，如 Fedora、Ubuntu、CentOS 等，检查我们的 Python 代码。对于这个食谱，我们将使用 Flask，这是 Python([https://www.palletsprojects.com/p/flask/](https://www.palletsprojects.com/p/flask/))的微框架。我们将使用 Flask 的 GitHub 存储库中的示例代码。我选择这个是为了让事情变得简单，也更容易用于其他食谱。
对于这个食谱，我们将使用 Python 2.7 创建一个容器，使用 Python 3.7 创建另一个容器。然后，我们将使用示例 Python 测试代码来运行每个容器。
# 准备好
做好以下准备:
*   由于我们将使用 Flask 的 GitHub 存储库中的示例代码，让我们克隆它:
```
 $ cd /tmp
 $ git clone https://github.com/pallets/flask
```
*   创建一个`Dockerfile_2.7`文件，如下所示，然后从中构建一个映像:
```
 $ cat /tmp/Dockerfile_2.7
 FROM python:2.7
 RUN pip install flask pytest
 ADD flask/ /flask
 WORKDIR /flask/examples/tutorial
 RUN pip install -e .
 CMD ["/usr/local/bin/pytest"]
```
*   要构建`python2.7test`映像，运行以下命令:
```
 $ docker image build -t python2.7test -f /tmp/Dockerfile_2.7 .
```
*   同样，创建一个以`python:3.7`为基础映像的 Dockerfile，并构建`python3.7test`映像:
```
 $ cat /tmp/Dockerfile_3.7
 FROM python:3.7
 RUN pip install flask pytest
 ADD flask/ /flask
 WORKDIR /flask/examples/tutorial
 RUN pip install -e .
 CMD ["/usr/local/bin/pytest"]
```
*   要构建`python3.7test`映像，运行以下命令:
```
 $ docker image build -t python3.7test -f /tmp/Dockerfile_3.7 .
```
*   确保创建了两个映像:
```
 $ docker image ls
```
![](img/208d0899-77bd-40dd-bd8a-105e563c2a70.png)
# 怎么做…
现在，使用我们创建的两个映像，让我们运行它们，以查看结果。
要使用 Python 2.7 进行测试，请运行以下命令:
```
$ docker container run python2.7test
```
![](img/d3ce03b5-c2af-4d2f-9b08-e13d46b85d22.png)
同样，要使用 Python 3.7 进行测试，请运行以下命令:
```
$ docker container run python3.7test
```
![](img/c4cd1450-2805-40ab-8745-19e2c555473c.png)
# 它是如何工作的…
从这两个 Dockerfiles 中可以看到，在运行运行 pytest 二进制文件的 CMD 之前，我们将 Flask 源代码添加到映像中，将我们的工作目录更改为教程示例目录`/flask/examples/tutorial`，并安装应用。因此，一旦容器启动，它将在我们的测试中运行`pytest`二进制文件。
# 还有更多…
*   在这个食谱中，我们已经看到了如何用不同版本的 Python 测试我们的代码。同样，您可以从 Fedora、CentOS 和 Ubuntu 中挑选不同的基础映像，并在不同的 Linux 发行版上进行测试。
*   如果您在您的环境中使用 Jenkins，那么您可以使用它的 Docker 插件来动态地配置一个从属，运行一个构建，并在 Docker 主机上将其拆除。
More details about this can be found at [https://plugins.jenkins.io/docker-plugin](https://plugins.jenkins.io/docker-plugin).
# 与 Shippable 和 Heroku 一起执行 CI/CD
在前面的配方中，我们看到了一个如何在本地开发和质量保证环境中使用 Docker 进行测试的例子。让我们看一个端到端的例子，看看 Docker 现在是如何在 CI/CD 环境中使用的。在本食谱中，我们将了解如何使用 shippeble([https://www.shippable.com](https://www.shippable.com))执行 CI/CD 并将其部署在 Heroku([https://www.heroku.com](https://www.heroku.com))上。
Shippable 是一个 SaaS 平台，允许您轻松地将持续集成/部署添加到 GitHub 和 Bitbucket (Git)存储库中，并且完全基于 Docker 构建。Shippable 使用构建从属(基于 Docker 的容器)来运行工作负载。Shippable 支持多种语言，如 Ruby、Python、Node.js、Java、Scala、PHP、Go 和 Clojure。默认的构建奴才是 Ubuntu 14.04 LTS 和 Ubuntu 16.04。他们还增加了使用 Docker Hub 的自定义映像作为奴才的支持。可交付配置项需要关于项目的信息和一个名为`shippable.yml`的 YAML 文件中的构建说明，您必须在源代码报告中提供该文件。yaml 文件包含以下说明:
*   `language`:这将显示编程语言
*   `python`:有了这个，你可以在一个构建指令中指定不同版本的语言来获得测试
*   `build`:这是构建管道
*   `ci`:这些是运行构建的说明
*   `on_success`:这些是构建成功后的指令，用于在 Heroku、Amazon Elastic Beanstalk、AWS OpsWorks、Google App Engine 等 PaaS 上执行部署
Heroku 是一个**平台即服务** ( **PaaS** )使开发人员能够完全在云中运行和操作应用。
对于这个配方，我们将使用与上一个配方中相同的示例代码，首先在 Shippable 上测试它，然后在 Heroku 上部署它。
# 准备好
遵循以下先决条件:
1.  在可发货([https://www.shippable.com](https://www.shippable.com))上创建账户。
2.  将烧瓶实例从[https://github.com/kencochrane/heroku-flask-example](https://github.com/kencochrane/heroku-flask-example)分叉，并克隆到您的本地机器上。
3.  通过以下步骤在 Heroku 上为分叉的存储库创建一个应用:
在 Heroku 上创建一个帐户([https://signup.heroku.com](https://signup.heroku.com))，安装 Heroku 应用，然后登录:
```
 $ heroku login
```
![](img/c604cb3b-1ee4-4c55-b4c4-fd6281736201.png)
将您的目录更改为从步骤 2 克隆分叉的位置，并在 Heroku 上创建一个应用:
```
 $ heroku create --ssh-git
```
![](img/d279bd97-7cfd-435f-8cb9-044651c6abbb.png)
将代码推送到 Heroku 来部署应用:
```
 $ git push heroku master
```
![](img/0ac17108-9849-41a8-bfe9-c3a0b8ce6eed.png)
一分钟后，您的应用将被部署:
![](img/308ac388-7b20-4e3d-8836-bf1922798f51.png)
请确保您的应用至少有一台发电机，并在浏览器中打开该应用，以确保其正常工作:
```
 $ heroku ps:scale web=1
 $ heroku open
```
![](img/e942edee-42be-4642-abe3-5087ddd921fe.png)
您的浏览器应该为您的应用打开并加载页面。如果结果有效，应该如下所示:
![](img/8e54ebd4-1b8a-47c5-832f-a8215e9b1edb.png)
4.  更新分叉中的`shippable.yml`文件，使用 Heroku 应用的 Git URL:
```
language: python
python:
 - 3.7