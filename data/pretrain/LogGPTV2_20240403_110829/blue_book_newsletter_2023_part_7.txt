    [pyTelegramBotAPI](https://github.com/eternnoir/pyTelegramBotAPI):
    Pros:
    - Popular: 7.1k stars, 1.8k forks
    - Maintained: last commit 3 weeks ago
    - Both sync and async
    - Nicer interface with decorators and simpler setup
    - [They have an example on how to split long messages](https://github.com/eternnoir/pyTelegramBotAPI#sending-large-text-messages)
    - [Nice docs on how to test](https://github.com/eternnoir/pyTelegramBotAPI#testing)
    - They have a developers community to get help in [this telegram group](https://telegram.me/joinchat/Bn4ixj84FIZVkwhk2jag6A)
    - Fully supports the [Telegram bot API](https://core.telegram.org/bots/api)
    - Has examples
    Cons:
    - Uses lambdas inside the decorators, I don't know why it does it.
    - The docs are not as throughout as `python-telegram-bot` one.
    References:
    - [Documentation](https://pytba.readthedocs.io/en/latest/index.html)
    - [Source](https://github.com/eternnoir/pyTelegramBotAPI)
    - [Async Examples](https://github.com/eternnoir/pyTelegramBotAPI/tree/master/examples/asynchronous_telebot)
    [aiogram](https://github.com/aiogram/aiogram):
    Pros:
    - Popular: 3.8k stars, 717k forks
    - Maintained: last commit 4 days ago
    - Async support
    - They have a developers community to get help in [this telegram group](https://t.me/aiogram)
    - Has type hints
    - Cleaner interface than `python-telegram-bot`
    - Fully supports the [Telegram bot API](https://core.telegram.org/bots/api)
    - Has examples
    Cons:
    - Less popular than `python-telegram-bot`
    - Docs are written at a developer level, difficult initial barrier to understand how to use it.
    References:
    - [Documentation](https://docs.aiogram.dev/en/dev-3.x/)
    - [Source](https://github.com/aiogram/aiogram)
    - [Examples](https://github.com/aiogram/aiogram/tree/dev-3.x/examples)
    Conclusion:
    Even if `python-telegram-bot` is the most popular and with the best docs, I prefer one of the others due to the easier interface. `aiogram`s documentation is kind of crap, and as it's the first time I make a bot I'd rather have somewhere good to look at.
    So I'd say to go first with `pyTelegramBotAPI` and if it doesn't go well, fall back to `python-telegram-bot`.
### [questionary](questionary.md)
* New: [Autocomplete answers.](questionary.md#autocomplete-answers)
    If you want autocomplete with fuzzy finding use:
    ```python
    import questionary
    from prompt_toolkit.completion import FuzzyWordCompleter
    questionary.autocomplete(
        "Save to (q to cancel): ",
        choices=destination_directories,
        completer=FuzzyWordCompleter(destination_directories),
    ).ask()
    ```
### [rich](rich.md)
* New: [Tree console view.](rich.md#tree)
    Rich has a [`Tree`](https://rich.readthedocs.io/en/latest/reference/tree.html#rich.tree.Tree) class which can generate a tree view in the terminal. A tree view is a great way of presenting the contents of a filesystem or any other hierarchical data. Each branch of the tree can have a label which may be text or any other Rich renderable.
    The following code creates and prints a tree with a simple text label:
    ```python
    from rich.tree import Tree
    from rich import print
    tree = Tree("Rich Tree")
    print(tree)
    ```
    With only a single `Tree` instance this will output nothing more than the text “Rich Tree”. Things get more interesting when we call `add()` to add more branches to the `Tree`. The following code adds two more branches:
    ```python
    tree.add("foo")
    tree.add("bar")
    print(tree)
    ```
    The `tree` will now have two branches connected to the original tree with guide lines.
    When you call `add()` a new `Tree` instance is returned. You can use this instance to add more branches to, and build up a more complex tree. Let’s add a few more levels to the tree:
    ```python
    baz_tree = tree.add("baz")
    baz_tree.add("[red]Red").add("[green]Green").add("[blue]Blue")
    print(tree)
    ```
### [Selenium](selenium.md)
* New: [Solve element isn't clickable in headless mode.](selenium.md#solve-element-isn't-clickable-in-headless-mode)
    There are many things you can try to fix this issue. Being the first to configure the `driver` to use the full screen. Assuming you're using the [undetectedchromedriver](#use-undetected-chromedriver):
    ```python
    import undetected_chromedriver.v2 as uc
    options = uc.ChromeOptions()
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--no-sandbox")
    options.add_argument("--headless")
    options.add_argument("--start-maximized")
    options.add_argument("--window-size=1920,1080")
    driver = uc.Chrome(options=options)
    ```
    If that doesn't solve the issue use the next function:
    ```python
    def click(driver: uc.Chrome, xpath: str, mode: Optional[str] = None) -> None:
        """Click the element marked by the XPATH.
        Args:
            driver: Object to interact with selenium.
            xpath: Identifier of the element to click.
            mode: Type of click. It needs to be one of [None, position, wait]
        The different ways to click are:
        * None: The normal click of the driver.
        * wait: Wait until the element is clickable and then click it.
        * position: Deduce the position of the element and then click it with a javascript script.
        """
        if mode is None:
           driver.find_element(By.XPATH, xpath).click()
        elif mode == 'wait':
            # https://stackoverflow.com/questions/59808158/element-isnt-clickable-in-headless-mode
            WebDriverWait(driver, 20).until(
                EC.element_to_be_clickable((By.XPATH, xpath))
            ).click()
        elif mode == 'position':
            # https://stackoverflow.com/questions/16807258/selenium-click-at-certain-position
            element = driver.find_element(By.XPATH, xpath)
            driver.execute_script("arguments[0].click();", element)
    ```
### [sh](python_sh.md)
* New: [Passing environmental variables to commands.](python_sh.md#passing-environmental-variables-to-commands)
    The `_env` special `kwarg` allows you to pass a dictionary of environment variables and their corresponding values:
    ```python
    import sh
    sh.google_chrome(_env={"SOCKS_SERVER": "localhost:1234"})
    ```
    `_env` replaces your process’s environment completely. Only the key-value pairs in `_env` will be used for its environment. If you want to add new environment variables for a process in addition to your existing environment, try something like this:
    ```python
    import os
    import sh
    new_env = os.environ.copy()
    new_env["SOCKS_SERVER"] = "localhost:1234"
    sh.google_chrome(_env=new_env)
    ```
* New: [Use commands that return a SyntaxError.](python_sh.md#use-commands-that-return-a-syntaxerror)
    `pass` is a reserved python word so `sh` fails when calling the password store command `pass`.
    ```python
    pass_command = sh.Command('pass')
    pass_command('show', 'new_file')
    ```
### [Typer](typer.md)
* New: [Print to stderr.](typer.md#print-to-stderr)
    You can print to "standard error" with a Rich `Console(stderr=True)`
    ```python
    from rich.console import Console
    err_console = Console(stderr=True)
    err_console.print("error message")
    ```
## Generic Coding Practices
### [How to code](how_to_code.md)
* New: Personal evolution on how I code.
    Over the years I've tried different ways of developing my code:
    - Mindless coding: write code as you need to make it work, with no tests, documentation or any quality measure.
    - TDD.
    - Try to abstract everything to minimize the duplication of code between projects.
    Each has it's advantages and disadvantages. After trying them all and given that right now I only have short spikes of energy and time to invest in coding my plan is to:
    - Make the minimum effort to design the minimum program able to solve the problem at hand. This design will be represented in an [orgmode](orgmode.md) task.
    - Write the minimum code to make it work without thinking of tests or generalization, but with the [domain driven design](domain_driven_design.md) concepts so the code remains flexible and maintainable.
    - Once it's working see if I have time to improve it:
      - Create the tests to cover the critical functionality (no more 100% coverage).
      - If I need to make a package or the program evolves into something complex I'd use [this scaffold template](https://github.com/lyz-code/cookiecutter-python-project).
    Once the spike is over I'll wait for a new spike to come either because I have time or because something breaks and I need to fix it.
## [Git](git.md)
* New: [Set the upstream remote by default.](git.md#set-the-upstream-remote-by-default)
    ```bash
    git config --global --add push.default current
    git config --global --add push.autoSetupRemote true
    ```
* New: [Remove tags.](git.md#remove-tags)
    To delete a tag you can run:
    ```bash
    git tag -d {{tag_name}}
    ```
    To remove them remotely do
    ```bash
    git push --delete origin {{ tag_name }}
    ```
# DevOps
## Infrastructure as Code
### [Ansible Snippets](forgejo.md)
* New: Introduce Forgejo.
    [Forgejo](https://forgejo.org/) is a self-hosted lightweight software forge.
    Easy to install and low maintenance, it just does the job. The awful name comes from `forĝejo`, the Esperanto word for forge. I kind of like though the concept of forge for the repositories.
    Brought to you by an inclusive community under the umbrella of [Codeberg e.V.](https://forgejo.org/faq/#what-is-codeberg-ev), a democratic non-profit organization, Forgejo can be trusted to be exclusively Free Software. It is a ["soft" fork of Gitea](https://codeberg.org/forgejo/forgejo/src/branch/forgejo/CONTRIBUTING/WORKFLOW.md#feature-branches) with a focus on scaling, federation and privacy.
    In October 2022 the domains and trademark of Gitea were transferred to a for-profit company without knowledge or approval of the community. Despite [writing an open letter](https://gitea-open-letter.coding.social/), the takeover was later confirmed. The goal of Forgejo is to continue developing the code with a healthy democratic governance.
    On the 15th of December of 2022 the [project was born](https://forgejo.org/2022-12-15-hello-forgejo/) with these major objectives:
    - The community is in control, and ensures we develop to address community needs.
    - We will help liberate software development from the shackles of proprietary tools.
    One of the approaches to achieve the last point is through pushing for [the Forgejo federation](https://forgejo.org/2023-01-10-answering-forgejo-federation-questions/) a much needed feature in the git web application ecosystem.
    On the 29th of December of 2022 they released [the first stable release](https://forgejo.org/2022-12-29-release-v1-18-0) and they have released several security releases between then and now.
    Despite what you choose, the good thing is that as long as it's a soft fork [migrating between these software](https://forgejo.org/faq/#are-migrations-between-gitea-and-forgejo-possible) should be straight forward.
    Forgejo outshines Gitea in:
    - Being built up by the people for the people. The project may die but it's not likely it will follow Gitea's path.
    - They are transparent regarding the [gobernance of the project](https://codeberg.org/forgejo/governance) which is created through [open community discussions](https://codeberg.org/forgejo/discussions/issues).
    - It's a political project that fights for the people's rights, for example through [federation](https://forgejo.org/2023-01-10-answering-forgejo-federation-questions/) and freely incorporating the new additions of Gitea
    - They'll eventually [have a better license](https://codeberg.org/forgejo/discussions/issues/6)
    - They get all the features and fixes of Gitea plus the contributions of the developers of the community that run out of Gitea.
    Gitea on the other hand has the next advantages:
    - It's a more stable project, it's been alive for much more time and now has the back up of a company trying to make profit out of it. Forgejo's community and structure is still [evolving to a stable state](https://codeberg.org/forgejo/meta/issues/187) though, although it looks promising!
    - Quicker releases. As Forgejo needs to review and incorporate Gitea's contributions, it takes longer to do a release.
    Being a soft-fork has it's disadvantages too, for example deciding where to open the issues and pull requests, [they haven't yet decided which is their policy around this topic](https://codeberg.org/forgejo/meta/issues/114).
* New: [Authorize an SSH key.](ansible_snippets.md#authorize-an-ssh-key)
    ```yaml
    - name: Authorize the sender ssh key
      authorized_key:
        user: syncoid
        state: present
        key: "{{ syncoid_receive_ssh_key }}"
    ```
* New: [Create a user.](ansible_snippets.md#create-a-user)
    The following snippet creates a user with password login disabled.
    ```yaml
    - name: Create the syncoid user
      ansible.builtin.user:
        name: syncoid
        state: present
        password: !
        shell: /usr/sbin/nologin
    ```
    If you don't set a password any user can do `su your_user` to set a random password use the next snippet:
    ```yaml
    - name: Create the syncoid user
      ansible.builtin.user:
        name: syncoid
        state: present
        password: "{{ lookup('password', '/dev/null', length=50, encrypt='sha512_crypt') }}"
        shell: /bin/bash
    ```
    This won't pass the idempotence tests as it doesn't save the password anywhere (`/dev/null`) in the controler machine.
* New: [Create an ssh key.](ansible_snippets.md#create-an-ssh-key)
    ```yaml
    - name: Create .ssh directory
      become: true
      file:
        path: /root/.ssh
        state: directory
        mode: 700
    - name: Create the SSH key to directory
      become: true
      openssh_keypair:
        path: /root/.ssh/id_ed25519
        type: ed25519
      register: ssh
    - name: Show public key
      debug:
        var: ssh.public_key
    ```
* New: [Skip ansible-lint for some tasks.](ansible_snippets.md#skip-ansible-lint-for-some-tasks)
    ```yaml
    - name: Modify permissions