mizes this risk by considering the likelihood of the intrusion
for the selection of cost-sensitive responses and by ensuring
that we maintain core functions.
CRIU Limitations At the moment, CRIU cannot support all ap-
plications, since it has issues when handling external re-
sources or graphical applications. For example, if a process
has opened a device to have direct access to some hard-
ware, checkpointing its state may be impossible (except for
virtual devices not corresponding to any physical devices).
Since our implementation relies on CRIU, we inherit its lim-
itations. Therefore, at the moment, our implementation is
better suited for system services that do not have a graphical
part and do not require direct access to some hardware.
Service Dependencies In our work, at the moment, we only use
the service dependency graph provided by the service man-
ager (e.g., systemd) to recover and checkpoint dependent
services together. We could also use this same graph to pro-
vide more precise response selection by taking into account
the dependency between services, their relative importance,
and to propagate the impact a malicious behavior can have.
It could be used as a weight (in addition to the risk) to select
optimal responses. Similar, but network-based, approaches
have been heavily studied in the past [33, 62, 67].
Models Input For our cost-sensitive response selection, we first
need to associate an intrusion to a set of malicious behav-
iors, and the course of action to stop these behaviors. While
standards exist to share threat information [6] and malicious
behaviors [36, 49, 51] exhibited by malware, or attackers in
general, we were not able to find open sources that provided
them directly for the samples we used. This issue might be
related to the fact that, to the best of our knowledge, no
industry solution would exploit such information. In our
experiments, we extracted information about malicious be-
haviors from textual descriptions [16–18, 54, 68] and reused
the existing standards to describe such malicious behav-
iors [36, 49, 51]. Likewise, we extracted information about
responses to counter such malicious behaviors from textual
descriptions [13, 16–18, 47, 54, 68].
Generic Responses If we do not have precise information about
the intrusion, but only a generic behavior or category associ-
ated to it (one of the top elements in the malicious behaviors
hierarchy), we can automatically consider generic responses.
For example, with ransomware we know that responses that
either render the filesystem read-only or only specific di-
rectories will work. We would not know that, for instance,
blocking a specific system call would have stopped the mal-
ware, but we know what all ransomware need, and we can
respond accordingly. Such generic responses might help mit-
igate the lack of precise information.
9 CONCLUSION AND FUTURE WORK
This work provides an intrusion survivability approach for com-
modity OSs. In contrast to other intrusion recovery approaches,
our solution is not limited to restoring files or processes, but it
also applies responses to withstand a potential reinfection. Such
responses enforce per-service privilege restrictions and resource
quotas to ensure that the rest of the system is not directly impacted.
In addition, we only restore the files modified by the infected ser-
vice to limit the restoration time. We devised a framework to select
cost-sensitive responses that do not disable core functions of ser-
vices. We specified the requirements for our approach and proposed
an architecture satisfying its requirements. Finally, we developed
and evaluated a prototype for Linux-based systems by modifying
systemd, Linux audit, CRIU, and the Linux kernel. Our results show
that our prototype withstands known Linux attacks. Our prototype
only induces a small overhead, except with I/O-intensive services
that create many small files asynchronously in burst.
In the future, we would like to investigate how we could au-
tomatically adapt the system to gradually remove the responses
that we applied to withstand a reinfection. Such a process involves
being able to automatically fix the vulnerabilities or to render them
non-exploitable.
ACKNOWLEDGMENTS
The authors would like to thank Pierre Belgarric and Maugan Vil-
latel for their helpful comments, feedback, and proofing of earlier
versions of this paper. We would also like to thank Stuart Lees,
Daniel Ellam, and Jonathan Griffin, for their help in setting up and
running some of the experiments using their isolated and virtualized
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
Chevalier et al.
environment. In addition, we would like to thank the anonymous
reviewers for their feedback. Finally, we would like to thank Hy-
brid Analysis for providing access to malware samples used in our
experiments.
A EXAMPLES OF MODELS
Figure 4 is an example of a non-exhaustive per-service response
hierarchy that can be used for the hierarchy defined in section 5.1.
Note that for each response with arguments (e.g., read-only paths
or blacklisting IP addresses), the hierarchy provides a sub-response
with a subset of the arguments. For example, if there is a response
that puts /var read-only, there is also the responses that puts
/var/www read-only. It means that if an administrator only specified
the cost of putting /var read-only, but a response, among the set of
possible responses, sets /var/www read-only, our response selection
framework uses the cost of its parent (i.e., /var).
Per-service responses
Filesystem
Read-only filesystem
Read-only path
Read-only subpath
Inaccessible path
System calls
Blacklist any system call
Blacklist a list or a category of system calls
Blacklist a syscall with specific arguments
Capabilities
Deny a set of capabilities
Network
Disable network
Blacklist any IP address
Blacklist IP address range
Blacklist IP address
Blacklist any port
Blacklist port range
Blacklist port
Restrict address families
Devices
Isolate device
Resources
Limit the number of tasks
CPU quota
Limit memory consumption
I/O quota
Figure 4: Example of a non-exhaustive per-service response
hierarchy
Table 4 is an example of a risk matrix that can be used. This
matrix can vary depending on the risk attitude (risk averse, risk
neutral, or risk seeking).
Table 4: Example of a 5 × 5 risk matrix that follows the re-
quirements for our risk assessment
Confidence
(Likelihood)
Very likely
Likely
Probable
Unlikely
Very unlikely
Malicious Behavior Cost
Very low
Low
Moderate
High
Very high
L
L
L
L
L
M
M
L
L
L
H
M
M
L
L
H
H
M
M
L
H
H
H
M
L
B EVALUATION DETAILS
B.1 Setup of the Virtualized Environment
We ran the experiments regarding the effectiveness of our responses
in a virtualized environment. It helped us control malware propa-
gation and their behavior in general.
The setup consisted of an isolated network connected to the
Internet with multiple Virtual Local Area Networks (VLANs), two
Virtual Machines (VMs), and a workstation. We executed the in-
fected service on a VM connected to an isolated VLAN with access
to the Internet. We connected the second VM, that executes the net-
work sniffing tool (tcpdump), to another VLAN with port mirroring
from the first VLAN. Finally, the workstation, connected to another
isolated VLAN, had access to the server managing the VMs, the
VM with the infected service, and the network traces.
B.2 Malware Samples
Table 5: Malware used in our experiments with the SHA-256
hash of the samples
Malware
Linux.BitCoinMiner
Linux.Rex.1
Linux.Encoder.1
Hakai
SHA-256
690aea53dae908c9afa933d60f467a17ec5f72463988eb5af5956c6cb301455b
762a4f2bf5ea4ff72fce674da1adf29f0b9357be18de4cd992d79198c56bb514
18884936d002839833a537921eb7ebdb073fa8a153bfeba587457b07b74fb3b2
58a5197e1c438ca43ffc3739160fd147c445012ba14b3358caac1dc8ffff8c9f
In Table 5, we list the malware samples used in our experiments
alongside their respective SHA-256 hash.
B.3 Checkpoint and Restore Operations
In Figure 5, we illustrate the results of the availability cost that
users could perceive by measuring the latencies of HTTP requests
made to an nginx server. We generated 100 requests per second for
20 seconds with the HTTP load testing tool Vegeta [61]. During this
time, we checkpointed nginx at approximately 5, 11, and 16 seconds.
We repeated the experiment three times. The output gave us the
latency of each request, and we applied a moving average filter
with a window size of 5. As mentioned previously, all requests were
successful (i.e., no errors or timeouts) and the maximum latency
during a checkpoint was 286 ms.
In Table 6, we show the time measured to perform the different
operations executed during a checkpoint: initialize (i.e., to initialize
structures, to create or open directories, and to freeze processes),
Survivor: A Fine-Grained Intrusion Response and Recovery Approach for Commodity Operating Systems
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
)
s
m
n
i
(
y
c
n
e
t
a
l
t
s
e
u
q
e
R
280
260
240
220
200
10.0
7.5
5.0
2.5
0.0
0
5
10
15
Time elapsed (in seconds)
Figure 5: Impact of checkpoints on the latency of HTTP re-
quests made to an nginx server (less is better)
snapshot of the filesystem, serialization of the service’s metadata,
and checkpointing of the processes using CRIU. The time to perform
this last operation varies depending on the service (e.g., the number
of processes, memory used, or files opened).
Table 6: Time to perform the checkpoint operations of a ser-
vice
Checkpoint Operation
Mean
Standard
deviation
Standard error
of the mean
Service-independent operations
Initialize
Checkpoint service metadata
Snapshot filesystem
Checkpoint processes (CRIU)
httpd
nginx
mariadb
beanstalkd
Total
httpd
nginx
mariadb
beanstalkd
90.75
8.45
1.38
11.05
3.99
8.52
1.37
14.35
1.33
2.19
3.49
1.26
2.69
0.43
(µs)
(µs)
(ms)
(ms)
(ms)
(ms)
(ms)
(ms)
(ms)
(ms)
(ms)
643.20
51.47
98.95
199.24
51.59
171.77
16.25
298.88
151.24
271.41
115.89