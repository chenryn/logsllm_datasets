### Scenario Description
In this scenario, we manipulate the traffic profile to force VOID to incorrectly select congestion points during its first run. This is achieved by having false interferers transmit at full speed while the true interferers are not active.

### Flow Selection
We select three groups of wireless flows:
1. The first group includes two single-hop cluster flows, F1 and F2.
2. The second and third groups each contain one multi-hop cluster flow: F3 (pcwf12 → pcwf14) and F4 (pcwf3 → pcwf5).
3. There is no interference between these groups.

The two flows in the multi-hop cluster (F3 and F4) act as false interferers to the two flows in the single-hop cluster (F1 and F2).

### Backward Elimination Process
The following table illustrates the backward elimination process when congestion is not persistent:

| Round # | Potential Interferers | β | R² | Partial F-test Probability | Interferer Eliminated |
|---------|-----------------------|---|----|----------------------------|-----------------------|
| 1       | F2, F3, F4            | -0.19, -0.06, -0.18 | 0.41 | - | F3 |
| 2       | F2, F4                | -0.85, -0.39        | 0.94 | - | F4 |
| 3       | F2                    | -0.88               | 0.97 | - | None |

### Dynamic Interference Map
The dynamic interference map (IM) shows the interference patterns under different congestion levels:
- **Physical Pair-wise Interference Map (IM):**
  - F1: -0.84
  - F2: -1.61
  - F3: -0.64
  - F4: -1.3
  - F5: -0.32

- **Congested Environment:**
  - F1: -0.84
  - F2: -1.61
  - F3: -0.64
  - F4: -1.3
  - F5: -0.74
  - Note: β values below -1 are due to MAC-layer retransmissions.

- **Medium-Congested Environment:**
  - F1: -0.42
  - F2: -0.52
  - F3: -0.64
  - F4: -0.62
  - F5: -0.87

- **Low-Congested Environment:**
  - F1: -0.94
  - F2: -0.47
  - F3: -0.79
  - F4: -0.75

### Live-Network Experiments
To evaluate VOID's effectiveness in identifying interference in real wireless networks, we use a testbed set up in the UBC highrise. We keep three interfering flows active for an hour, from 8 PM to 9 PM on March 30, 2009. These devices interfere with each other, creating six interference links. We divide the hour into 12 five-minute windows. 

- **Results:**
  - VOID detects all six interference links 5 times.
  - Five links 5 times.
  - Four links 1 time.
  - Two links 1 time.
  - Total: 61 out of 72 interference links detected (85% success ratio).

Additionally, we conduct a six-hour experiment using two interfering wireless desktops from 6 PM to 12 AM on April 2nd. There are 72 five-minute time windows, and VOID identifies these two devices as interfering 65 times (90% success ratio). The failure to detect all interference links may be due to external interferers not included in the regression model.

### Throughput Analysis
The overall throughput in the highrise is significantly lower and more fluctuating compared to Emulab. The three interfering devices achieve a total throughput ranging from 1 Mbps to 9 Mbps, with an average of 5 Mbps. External interferers and auto rate adaptation are potential causes of these issues.

### Scalability
Given \( k \) interferers and \( n \) throughput samples (\( n > k \)), the upper-bound complexity for solving one MLR regression is \( O(n^3) \). Using hotshot [2], we profile a scenario with 100 interferers and 300 samples. In this scenario, VOID takes 0.2 seconds to solve one regression on a dual-core 2.80GHz P4 machine.

The convergence time for VOID is determined by the number of regressions needed to remove false interferers. In our experiments, it takes at most 10 regressions to remove a false interferer. For a typical wireless campus network, such as the UBC highrise, with 100 potential devices (5 nearby APs working on the same channel with 20 associated clients each), and 50% being false interferers, it would take 100 seconds to output the final interferer set. In most experiments, VOID converges in less than a second.

### Conclusion and Future Work
In this paper, we propose VOID, an interference detection approach for enterprise wireless networks. VOID uses online throughput traces and outputs a list of interferers to a victim node. It is fast enough to track real-time interference changes. We have conducted various experiments on the Emulab wireless testbed and a wireless-only highrise campus building, with promising initial results.

We plan to deploy VOID in the UBC campus wireless networks and have been granted access to the campus wireless traces and the network management controller. We have collected weeks of wireless traces from two typical locations on the UBC campus: the highrise residence building and a large research building. Real wireless traffic is extremely bursty, leading to incidental throughput changes and false positives. We have designed filters to screen these false positives, and initial results show they are effective in removing false interferers in bursty environments. More experiments are ongoing, and we look forward to reporting the results in the near future.

### Acknowledgements
We thank the UBC IT department, especially Geoff Armstrong and Ian Procyk, for providing necessary equipment and helping us tunnel the wireless trace into our department. We also thank Xiaofei Wang for setting up the three-node testbed in the highrise, and the anonymous reviewers for their constructive comments.

### References
[References listed as provided]

This optimized version aims to improve clarity, coherence, and professionalism while maintaining the original content and structure.