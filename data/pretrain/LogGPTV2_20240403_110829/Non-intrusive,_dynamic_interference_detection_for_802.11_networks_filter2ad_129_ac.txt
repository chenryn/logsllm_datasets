scenario, in which we manipulate the traﬃc proﬁle to force
VOID to select the congestion points incorrectly in its ﬁrst
run, that is, when false interferers are sending at full speed
while the true ones are not.
We select three groups of wireless ﬂows. The ﬁrst group
includes two ﬂows, F1 and F2, from the single-hop cluster;
the other two groups contain only one ﬂow each, F3 (pcwf12
→ pcwf14) and F4 (pcwf3 → pcwf5), selected from the
multi-hop cluster. There is no interference between groups.
The two ﬂows in the multi-hop cluster act as the false inter-
ferers to the two ﬂows in the single-hop cluster.
381Round # Potential Interferers
1
2
3
F2, F3, F4
F2, F4
F2
β
2
4−0.19−0.06−0.18
»−0.85−0.39
-0.88
R2
3
5 0.41
–
0.94
0.97
2
41.1 ∗ 10
6.5 ∗ 10
»
1.1 ∗ 10
1.1 ∗ 10
7.2 ∗ 10
1.1 ∗ 10
−16
−6
−16
−16
−4
−16
Partial F -test Probability
3
5
–
Interferer Eliminated
F3
F4
None
Table 2: A step-by-step illustration of the backward elimination process when congestion is not persistent.
F1
F2
F3
F4
F5
(a) Physical pair-wise interference map (IM)
−0.84
F1
F2
F3
−1.61
−0.64
F4
F5
−1.3
−0.32
−0.74
(b) IM in a congested environment. The β values
below -1 are due to MAC-layer retransmissions.
−0.42
−0.52
−0.64
−0.62
−0.87
F1
F2
F3
F4
F5
−0.94
−0.47
−0.79
−0.75
(c) IM in a medium-congested environment
F1
F2
−0.80
−0.97
F3
F4
F5
(d) IM in a low-congested environment
Figure 3: Dynamic Interference Map
mand depends largely on F3 and vice versa. Therefore, only
the throughputs of theirs appear to have the interference
patterns that VOID looks for.
6.3 Live-Network Experiments
We use the testbed set up in the UBC highrise to eval-
uate VOID’s eﬀectiveness in identifying interference in real
wireless networks. We keep the three interfering ﬂows ac-
tive for a whole hour, starting from 8pm to 9pm on Mar.
30th, 2009. All these devices interfere with each other and
so there are six interference links between them. We divide
this hour into 12 5-minute windows. VOID is able to detect
all six interference links 5 times, ﬁve links 5 times, four links
1 time and two links 1 time. In total, it identiﬁes 61 out of
the 72 interference links with a success ratio of 85%. We
also conduct a 6-hour experiment using the two interfering
wireless desktops, starting from 6 pm to 12 am on Apr. 2nd.
There are 72 5-minute time windows in total, and VOID is
able to identify these two devices interfering 65 times, with
a success ratio of 90%. The reason that VOID fails to detect
all interference links is possibly due to external interferers
that are not included in the regression model.
We have also found that the overall throughput achieved
in highrise is much lower than that in Emulab, and ﬂuctu-
ates more. The three interfering devices can achieve a total
throughput of at best 9Mbps, worst 1Mbps, average 5Mbps.
These issues might be caused by external interferers, auto
rate adaptation, etc.
6.4 Scalability
Given k interferers and n throughput samples (n > k), the
upper-bound complexity for solving one MLR regression is
O(n3) 1. We use hotshot [2] to proﬁle a scenario where the
numbers of interferers and samples are set to 100 and 300
(all the throughput points) respectively.
In this scenario,
VOID takes 0.2 seconds to solve one regression on a dual
core 2.80GHz P4 machine.
The time for VOID to converge is also determined by the
total number of regressions needed to remove all the false
interferers from the model. In our experiment, it takes at
most 10 regressions to remove a false interferer. In a typical
wirelss campus network, such as that in the UBC highrise
for example, we can expect a list of 100 potential devices (5
nearby APs working on the same channel with 20 associated
clients each) where 50% of them are false interferers. If it
requires 10 regressions and 300 samples to remove each false
interferer, then it will take 100 seconds to output the ﬁnal
interferer set. In almost all of the experiments we conducted,
VOID needed less than a second to converge.
7. CONCLUSION AND FUTURE WORK
In this paper, we proposed an interference detection ap-
proach for enterprise wireless networks called VOID. It takes
in throughput traces collected from a central router and
outputs a list of interferers to a victim node. The salient
features of VOID are that it uses online traces for analysis
and that it is fast enough to track interference relationship
changes in real time. We have conducted a variety of exper-
iments on the Emulab wireless testbed [22] and a wireless-
1 The formula to solve multiple regression is ˆβ =
−1X T y, bounded by the Gaussian elimination pro-
(X T X)
cedure used to invert a matrix.
382only highrise campus building. The initial results are quite
promising.
We are planing to deploy VOID in the UBC campus wire-
less networks, and have been working closely with UBC wire-
less network administrators. Recently we have been granted
access to the campus wireless traces and the network man-
agement controller. At this point, we have collected weeks
of wireless traces from two typical locations on the UBC
campus: the highrise residence building and another large
research building. As we have expected that, unlike the
synthetic traﬃc generated in the Emulab testbed, the real
wireless traﬃc is extremely bursty: the hurst parameters of
these wireless traces using R/S statistic [12] are all above
0.95. The more bursty the traﬃc is, it is more likely to
have incidental throughput changes in the traces, which
leads to many false positives, that is, the non-interfering
devices could be correlated as interfering due to coinciden-
tal throughput changes unrelated to interference. We have
designed a set of ﬁlters to screen these false positives and
the initial results have shown that they are quite eﬀective in
removing false interferers in these extremely bursty environ-
ments. More experiments on these real traces are on-going,
and we look forward to reporting the results in the near
future.
8. ACKNOWLEDGEMENTS
We are grateful to the UBC IT department, in particular,
Geoﬀ Armstrong and Ian Procyk, for providing us necessary
equipments and helping us tunnel the wireless trace into our
department. We thank Xiaofei Wang for helping us set up
the three-node testbed in highrise. We also greatly thank
the anonymous reviewers for their constructive comments.
9. REFERENCES
[1] D-itg traﬃc generator.
http://www.grid.unina.it/software/ITG/.
[2] hotshot – high performance logging proﬁler.
http://www.python.org/doc/2.5.2/lib/
module-hotshot.html.
[3] ipt account netﬁlter module. http://www.intra2net.
com/de/produkte/opensource/ipt_account/.
[4] Madwiﬁ. http://www.madwifi.org.
[5] Nabeel Ahmed, Usman Ismail, Srinivasan Keshav, and
Konstantina Papagiannaki. Online estimation of rf
interference. In CoNEXT ’08.
[6] Nabeel Ahmed and Srinivasan Keshav. Smarta: a
self-managing architecture for thin access points. In
CoNEXT ’06.
[7] Nabeel Ahmed, Vivek Shrivastava, Arunesh Mishra,
Suman Banerjee, Srinivasan Keshav, and Konstantina
Papagiannaki. Interference mitigation in enterprise
wlans through speculative scheduling. In MobiCom
’07.
[8] Paul D. Allison. Multiple Regression. Pine Forge Press,
1999.
[9] Ioannis Broustis, Konstantina Papagiannaki,
Srikanth V. Krishnamurthy, Michalis Faloutsos, and
Vivek Mhatre. Mdg: measurement-driven guidelines
for 802.11 wlan design. In MobiCom ’07.
[10] Kan Cai, Michael Blackstock, Reza Lotun, Michael J.
Feeley, Charles Krasic, and Junfang Wang. Wireless
unfairness: alleviate mac congestion ﬁrst! In
WiNTECH ’07.
[11] Ramakrishna Gummadi, David Wetherall, Ben
Greenstein, and Srinivasan Seshan. Understanding
and mitigating the impact of rf interference on 802.11
networks. In SIGCOMM ’07.
[12] Will E. Leland, Walter Willinger, Murad S. Taqqu,
and Daniel V. Wilson. On the self-similar nature of
ethernet traﬃc. SIGCOMM Comput. Commun. Rev.
[13] Xi Liu, Anmol Sheth, Michael Kaminsky, Konstantina
Papagiannaki, Srinivasan Seshan, and Peter
Steenkiste. Dirc: Increasing indoor wireless capacity
using directional antennas. In SIGCOMM ’09.
[14] Ratul Mahajan, Maya Rodrig, David Wetherall, and
John Zahorjan. Analyzing the mac-level behavior of
wireless networks in the wild. In SIGCOMM ’06.
[15] Raymond H. Myers. Classical and Modern Regression
with Applications. Thomson Learning, 2nd edition,
1989.
[16] Drago¸s Niculescu. Interference map for 802.11
networks. In IMC ’07, pages 339–350, 2007.
[17] Jitendra Padhye, Sharad Agarwal, Venkata N.
Padmanabhan, Lili Qiu, Ananth Rao, and Brian Zill.
Estimation of link interference in static multi-hop
wireless networks. In IMC’05.
[18] Lili Qiu, Yin Zhang, Feng Wang, Mi Kyung Han, and
Ratul Mahajan. A general model of wireless
interference. In MobiCom ’07, 2007.
[19] Charles Reis, Ratul Mahajan, Maya Rodrig, David
Wetherall, and John Zahorjan. Measurement-based
models of delivery and interference in static wireless
networks. In SIGCOMM’06.
[20] Vivek Shrivastava, Nabeel Ahmed, Shravan Rayanchu,
Suman Banerjee, Srinivasan Keshav, Konstantina
Papagiannaki, and Arunesh Mishra. Centaur:
Realizing the full potential of centralized wlans
through a hybrid data path. In MobiCom ’09.
[21] Mythili Vutukuru, Kyle Jamieson, and Hari
Balakrishnan. Harnessing exposed terminals in
wireless networks. In NSDI ’08.
[22] Brian White, Jay Lepreau, Leigh Stoller, Robert
Ricci, Shashi Guruprasad, Mac Newbold, Mike Hibler,
Chad Barb, and Abhijeet Joglekar. An integrated
experimental environment for distributed systems and
networks. In OSDI ’02.
383