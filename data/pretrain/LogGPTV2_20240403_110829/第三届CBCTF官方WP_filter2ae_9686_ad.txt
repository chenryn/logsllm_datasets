      { 
        Str1[v10 - 2] = 61; 
        Str1[v10 - 1] = 61; 
      } 
      else if ( v13 == 2 ) 
      { 
        Str1[v10 - 1] = 61; 
      } 
      v12 = 0; 
      result = j_strcmp_0(Str1, "o3kZl3=="); 
      v12 = result; 
      if ( result ) 
        exit(3); 
      return result; 
    }
这个是换了表的 base64 编码，可以用解密软件来算答案。
最后一个加密部分如下：
    __int64 __fastcall sub_140016210(unsigned __int8 *a1, int a2) 
    { 
      __int64 *v2; // rdi 
      signed __int64 i; // rcx 
      __int64 result; // rax 
      __int64 v5; // [rsp+0h] [rbp-20h] 
      int j; // [rsp+24h] [rbp+4h] 
      int v7; // [rsp+44h] [rbp+24h] 
      int v8; // [rsp+114h] [rbp+F4h] 
      unsigned __int8 *v9; // [rsp+140h] [rbp+120h] 
      int v10; // [rsp+148h] [rbp+128h] 
      v10 = a2; 
      v9 = a1; 
      v2 = &v5; 
      for ( i = 74i64; i; --i ) 
      { 
        *(_DWORD *)v2 = -858993460; 
        v2 = (__int64 *)((char *)v2 + 4); 
      } 
      sub_140011082((__int64)&unk_140021006); 
      for ( j = 0; j > 4; 
        v7 = 16 * (v9[j + 12] & 0xF) + v8; 
        v9[j + 12] = v7; 
      } 
      if ( v9[12] != 214 || v9[13] != 86 || v9[14] != 18 || (result = v9[15], (_DWORD)result != 215) ) 
        exit(4); 
      return result; 
    }
for 循环对最后四个数字进行数字的十位和个位的交换。
flag： **flag{answer_me!}**
###  tea.exe（0 解）
第一个加密函数中给出了字符串，进行小写变大写，_变空格操作后成为新的字符串。
往下可以看到给出的表，总共 66 位，然后我写 wp 的时候发现题目有问题，所以这题作废了，就当做这道题没存在。（尴尬）
###  mov.exe（0 解）
这个题懒得写了，全靠感觉和经验。（虽然我也不会）
很困扰人的 mov 混淆，目前好像没有效果很好的反混淆程序。考虑到这点题目代码很简单，源代码如下：
    #include 
    #include 
    #include 
    char ChangeFlag[]={-14,-7,-16,-10,0,1,-11,0,-43,-4,-83,1,23,20,-6,39,9,-11,-2,-12,7,-3,-11,19}; 
    char sinFlag[]="ctfflag{It's_wrong_flag}"; 
    int main(){ 
        //flag{welcome_to_reverse} 
        //printf("input your flag\n"); 
        char flag[25]={0}; 
        int i; 
        printf("input your flag\n"); 
        scanf("%s",flag); 
        for(i=0;ii', w) 
                height = struct.pack('>i', h) 
                data = data_idch + width + height + data_l 