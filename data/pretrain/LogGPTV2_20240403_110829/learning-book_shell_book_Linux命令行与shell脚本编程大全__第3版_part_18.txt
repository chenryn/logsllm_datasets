### 使用tar命令进行数据压缩和归档

虽然`zip`命令能够有效地将数据压缩并归档为单个文件，但它并不是Unix和Linux系统中的标准归档工具。目前，在Unix和Linux上最广泛使用的归档工具是`tar`命令。

最初，`tar`命令设计用于将文件写入磁带设备以进行归档。然而，它也可以将输出写入文件中，这一功能在Linux上已普遍用于数据归档。

#### tar命令格式
```bash
tar function [options] object1 object2
```
- `function` 参数定义了 `tar` 命令的操作类型。
- `options` 选项用于指定特定的行为。
- `object1` 和 `object2` 是要处理的文件或目录。

#### 表4-8: `tar`命令的功能

| 长名称             | 描述                                                         |
|-------------------|------------------------------------------------------------|
| -A, --concatenate | 将一个已有 `tar` 归档文件追加到另一个已有 `tar` 归档文件    |
| -c, --create      | 创建一个新的 `tar` 归档文件                                 |
| --diff            | 检查归档文件和文件系统的不同之处                           |
| --delete          | 从已有 `tar` 归档文件中删除文件                             |
| -r, --append      | 追加文件到已有 `tar` 归档文件末尾                           |
| -t, --list        | 列出已有 `tar` 归档文件的内容                               |
| -u, --update      | 将比 `tar` 归档文件中已有的同名文件新的文件追加到该 `tar` 归档文件中 |
| -x, --extract     | 从已有 `tar` 归档文件中提取文件                             |

#### 表4-9: `tar`命令选项

| 选项   | 描述                                                     |
|--------|--------------------------------------------------------|
| -C dir | 切换到指定目录                                         |
| -f file | 输出结果到文件或设备 `file`                            |
| -J      | 将输出重定向给 `bzip2` 命令来压缩内容                   |
| -p      | 保留所有文件权限                                       |
| -v      | 在处理文件时显示文件                                   |
| -z      | 将输出重定向给 `gzip` 命令来压缩内容                    |

这些选项经常组合使用。例如，可以使用以下命令创建一个归档文件：
```bash
tar -cvf test.tar test/ test2/
```
上述命令创建了一个名为 `test.tar` 的归档文件，包含 `test` 和 `test2` 目录的内容。接下来，可以使用以下命令列出 `tar` 文件 `test.tar` 的内容（但不提取文件）：
```bash
tar -tf test.tar
```
最后，使用以下命令从 `tar` 文件 `test.tar` 中提取内容：
```bash
tar -xvf test.tar
```
如果 `tar` 文件是从一个目录结构创建的，则整个目录结构会在当前目录下重新创建。

如你所见，`tar` 命令是创建目录结构归档文件的简便方法。这是Linux中分发开源程序源码文件的常用方法。

**提示**：下载开源软件后，经常会看到文件名以 `.tgz` 结尾。这些是用 `gzip` 压缩过的 `tar` 文件，可以使用以下命令解压：
```bash
tar -zxvf filename.tgz
```

### 4.4 小结
本章讨论了Linux系统管理员和程序员常用的一些高级 `bash` 命令。`ps` 和 `top` 命令在判断系统状态时特别重要，可以看到哪些应用在运行以及它们消耗了多少资源。在可移动存储普及的今天，挂载存储设备是一个常见的话题。`mount` 命令可以将物理存储设备挂载到Linux虚拟目录结构上，而 `umount` 命令则用于移除设备。最后，本章还讨论了各种处理数据的工具，如 `sort`、`grep` 和文件压缩工具 `bzip2`、`gzip` 和 `zip`。`tar` 工具能将整个目录归档到单个文件中，方便数据迁移。

下一章将讨论各种Linux shell及其使用。Linux允许在多个shell之间进行通信，这一点在脚本中创建子shell时非常有用。

---

### 第5章 理解shell

#### 本章内容
- 探究shell的类型
- 理解shell的父/子关系
- 别出心裁的子shell用法
- 探究内建的shell命令

为了理解shell，需要先了解一些CLI（命令行接口）。shell不仅是一种CLI，还是一个复杂的交互式程序。输入命令并通过shell运行脚本时会出现一些既有趣又令人困惑的问题。搞清楚shell进程及其与系统之间的关系可以帮助解决这些问题，或是完全避开它们。

#### 5.1 shell的类型
系统启动什么样的shell程序取决于用户的用户ID配置。在 `/etc/passwd` 文件中，用户的默认shell程序会被指定。例如，用户 `christine` 使用GNU bash shell作为其默认shell：
```bash
$ cat /etc/passwd
Christine1x:501:501:Chriatine B:/hone/Chriatine:/bin/bash
```
`bash` shell程序位于 `/bin` 目录内。从长列表中可以看出 `/bin/bash` 是一个可执行程序：
```bash
$ ls -l /bin/bash
-rwxr-xr-x. 1 root root 938832 Jul 18 2013 /bin/bash*
```
CentOS发行版中还有其他一些shell程序，包括 `tcsh`、`dash` 和 `csh`。这些shell程序各自都可以被设置成用户的默认shell，但由于 `bash` shell的广为流行，很少有人使用其他shell作为默认shell。

#### 5.2 shell的父子关系
登录某个虚拟控制器终端或在GUI中运行终端仿真器时启动的默认交互shell是一个父shell。本书到目前为止都是父shell提供CLI提示符，然后等待命令输入。

在CLI提示符后输入 `/bin/bash` 命令或其他等效的 `bash` 命令时，会创建一个新的shell程序，称为子shell。子shell也拥有CLI提示符，同样会等待命令输入。

为了理清这个过程，可以使用 `ps` 命令来查看生成子shell前后的进程信息。例如：
```bash
$ ps -f
UID         PID   PPID  C STIME TTY          TIME CMD
501       1841   1840  0 11:50 pts/0    00:00:00 -bash
501       2429   1841  0 13:44 pts/0    00:00:00 ps -f
```
输入 `bash` 命令后，会创建一个新的子shell。再次使用 `ps -f` 可以看到两个 `bash` shell程序在运行：
```bash
$ bash
$ ps -f
UID         PID   PPID  C STIME TTY          TIME CMD
501       1841   1840  0 11:50 pts/0    00:00:00 -bash
501       2444   1841  0 13:44 pts/0    00:00:00 bash
```
子shell可以从父shell中创建，也可以从另一个子shell中创建。`ps --forest` 命令可以展示这些子shell间的嵌套结构。

通过 `ps -f` 命令也可以表现子shell的嵌套关系，因为它能够通过 `PPID` 列显示出谁是谁的父进程。