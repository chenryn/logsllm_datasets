5. 可信任的软件供应链安全监管治理
被检测对象首先需依据检测机构提供的可信安全厂商获取安全检测服务及工具，保证工
具及来源的安全合规。对自身软件资产进行审计，输出标准化清单：软件成分、代码审计、
供应商资质等标准化清单。将清单提供给安全管理机构进行备案，以备审查。当安全主管机
构审查时，使用标准化设备对软件资产，供应商资质，开发环境，应急方案等场景进行审计，
对比清单内容并提出改进建设指导意见。保证全流程的安全可信。
6. 可信任的软件供应链生态
信创供应链安全是一个系统工程，也是企业重点关注的问题，随着网络攻击技术的发展，
我们需要创新协同，积极引入可信计算、多方安全计算、区块链等技术，创新安全产品体系
架构，不断提升产品自身安全性；以产品全生命周期安全保障为目标，从部件供应商、产品
研发、产品测试、产品生产、储运销售、产品运维、召回等环节，运用可信计算、多方安全
计算、区块链等技术建立信创产业可信软件、可信硬件供应链安全保障技术体系。
软件供应链安全技术白皮书
027
3.3 软件供应链安全技术框架
软件供应链安全管理依托现有的法律法规对供应链安全治理提出的指导意见与管理要求，
多角度考量，将供应安全标准规范，供应链安全规章制度与供应链安全管理体系相融合，制
定软件供应链安全治理顶层设计，管理范围覆盖软件供应链开发、交付到使用全生命周期及
资产链条的上游研发至下游用户侧全方位覆盖。
软件供应链安全首先要树立正确的安全意识，目标是将系统打造成可信任、可评估、组
成成分透明的可信实体。将安全检测结合安全可信白名单机制、风险预警、与情报收集机制
保证内部环境安全。通过建立软件成分清单（如 SBOM），源代码管理、漏洞库管理等安全
风险管控机制，保证软件供应链数据的安全可信。同时，配合安全检测技术、如代码审计、
软件成分分析、动态安全检测等技术支持可评估能力建设。加快建立软件成分清单生成与使
用规范，建立管理手段与工具方法库，标准化软件成分和软件成分可视化流程，保证组件透
明理念的落实。
将安全理念与关键技术相融合，实现软件供应链安全技术保障，将具体方式方法抽象出
可复制可执行的安全解决方案。针对具体场景实施供应链安全监督与安全管控，落实好监管
部门所关注的供应链安全重点领域管理意见及建议，实现企业内部软件供应链安全防护体系
化建设。
4
软件供应链安全关键技术
软件供应链安全技术白皮书
029
4.1 软件成分清单生成及使用技术
软件成分清单与软件物料清单（SBOM）之间的差别在于对软件“最小要素”的颗粒度
的要求，在技术思路、实现步骤上并无本质差别。考虑到软件物料清单的生成工具与技术研
发已相对成熟，在 4.1 章节我们将通过介绍 SBOM 的各项关键技术，来阐释软件成分清单的
生成与使用过程。
先简要介绍 SBOM。国际上正在推广的 SBOM，可以看作软件成分清单的一种实现标准，
根据 NTIA 提供的指导文档，要求软件企业提供的 SBOM 是一个正式的、机器可读的列表，
以实现软件供应链的自动化识别与管理的需求。理想条件下，供应链中每一环节都要求该环
节的上游环节提供 SBOM，同时该环节应提供 SBOM 给下游环节；SBOM 需要支持多层级的
组件信息 ( 例如操作系统、安装器、包、文件等 )；SBOM 还需要根据组件的改变而更改 ( 通
过更新、补丁等达成 )。当前 SBOM 有三种最为主流的格式，他们分别为：SPDX
[7]、SWID
[8]
以及 CycloneDX
[9]。
由 LINUX 基金会主导的 The Software Package Data Exchange（SPDX）项目，旨在通过
定义报告信息的标准来帮助减少软件的歧义。SPDX 通过为企业和社区提供共享重要数据的
通用格式来减少冗余工作，SPDX 规范作为 ISO/IEC 5962：2021 被公认为安全性、许可证合
规性和其他软件供应链工件的国际开放标准。SPDX 支持众多文件格式（.xls，.spdx，.rdf，.
json，.yml 以及 .xml），特征是包括组件、许可证、版权以及开放标准。
SWID 由 NIST 推出，只支持 .xml 格式，由一组结构化的数据元素组成，标识产品、版本、
产品生产分发中的组织和个人、组件信息、产品和其他描述性元数据之间的关系等信息。
CycloneDX 是一种轻量级 SBOM 标准，由 OWASP 推出，支持 .json 和 .xml。
不管选用哪种标准和格式，建立软件成分清单生成及使用机制都是十分必要的。这不仅
有助于应对日益增多的软件供应链攻击事件，还能帮助供应链中下游环节理解上游环节的意
图、解决内部环境的冲突，帮助企业更好的把握软件结构，并更好地管理软件风险。
4.1.1 软件成分清单生成技术
生成软件成分清单需要考虑两种情况：主动提供形式，即软件提供商主动提供软件成分
清单，此时生成软件成分清单的工具可以包含在软件版本控制系统中，同时能够提供一定的
[7] 
International Open Standard (ISO/IEC 5962:2021) - Software Package Data Exchange (SPDX)
[8] 
NVD - SWID (nist.gov)
[9] 
OWASP CycloneDX Software Bill of Materials (SBOM) Standard
030
软件供应链安全关键技术
组成成分更新可追踪、历史版本可追溯能力；而另一种是被动分析形式，即下游环节需要自
行分析软件成分。
1. 供应商主动提供组成成分
从 DevOps 角度来看，一个软件的生命周期包括规划、开发、构建、测试、发布、部署、
运维运营以及监视阶段，如果是一个软件供应链中间环节的供应商，还可以从开发阶段中分
出采购环节。
如果软件供应商是在软件研发后生成软件成分清单，只能依赖现有的设计文档、测试报
告提取信息，借助人工的方式还原软件成分，毫无疑问，这样不仅效率低，也容易遗漏已更
新的软件成分信息。甚至，可能演变为与被动分析模式相差无几的情况，增加了分析的难度，
降低了追溯力。
那么供应商应该如何构建软件成分清单呢？如下图，NTIA 提供了一个“SBOM 生成流水
线”，展示了软件开发商将 SBOM 的生成过程与整个 DevOps 流程相融合的图景， SBOM 跟
随 DevOps 中的每一步，规范、高效且流程化地生成。
图 4.1 NTIA – 现有 SBOM 格式及标准调查 2021
[10]
[10] NTIA SBOM formats and standards whitepaper.[Online.] Available: https://www.ntia.gov/files/ntia/publications/ntia_
sbom_formats_and_standards_whitepaper_-_version_20191025.pdf
软件供应链安全技术白皮书
031
首先是规划阶段 (plan)。规划阶段，可以将软件的设计、规划阐明，加入 SBOM 文档。
上文我们提到，可以将采购环节分离出来，作为一个独立的环节。此处采购的软件可以是开
发中必须的第三方工具、插件、软件包、资源库等等，只要能够提供相应的第三方 SBOM 文档，
将其声明引用在 SBOM 文档中即可。但是如果对方无法提供 SBOM 文档，要么寻找替代品，
要么只能被动接受，此时就涉及到第二类 SBOM 生成，即“被动”生成的方法了，这里暂不
论述，下文会进行说明。
来到开发阶段，此阶段包括初期编程开发以及后期编写软件补丁。在开发过程中，
需要 SCM（软件配置管理管理）、VCS（版本控制系统）等管理系统，同时对于进阶的
DevSecOps 来说，这一阶段往往还需要应用 SCA（软件成分分析）、SAST（静态代码分析）
等分析技术。此时，应当将源码、生成文件以及补丁的信息录入 SBOM。
进入构建阶段，构建完成时，应当将构建信息写入 SBOM 文档。至此，软件初步开发完成，
进入测试环节。
测试环节对软件的性能、稳定性、可用性等衡量标准进行评测，DevSecOps 中还会进
行黑盒、内外部渗透、交互式应用安全测试（IAST）等安全测试。通过测试后，对软件进
行签名认证，并将所用标准、证书信息写入 SBOM。至此，软件生命周期中的开发周期暂
时结束。
软件分发阶段，应完善 SBOM 信息，使其包括但不限于 NTIA 要求的最低标准信息（作
者信息、提供商、产品名称、版本号、组件信息的哈希值以及 id）以及数字签名；开源软件
还应在 SBOM 中声明许可证 license。
部署阶段，可以给 SBOM 附上条款、插件以及配置信息。
最后，在维护 / 监控阶段，最理想的情况是将已知安全漏洞信息插入文档，可以参见本
章辅助套件小节对 VEX 的说明。
值得一提的是，在现有 SBOM 三大标准之中，除了 SWID 支持语言不多，SPDX 以及
CycloneX 在 java/python/javascript/golang/Maven 等语言中都有提供相应的许可证库以及
SBOM 文档生成插件。
2. 自行分析软件成分
如果不能获得软件提供商的一手软件成分清单或相关资料，那么必要时需要自行分析软
件，生成软件成分清单。这种方法，也可用于验证供应商所提供的产品、软件成分信息。
032
软件供应链安全关键技术
● 
对象是闭源程序时，软件企业或最终用户需要通过代码编译信息及配置文件、二进制
分析工具、逆向工程等技术进行，通过人工智能算法进行相似性寻找同源、近源程序
的组成分析成分表能提升分析能力。
● 
对象是开源程序时，软件企业或最终用户无法直接获得软件成分清单与更新服务，
需要自行维护。目前，企业用户多采用 SCA（Open Source Software Composition 
Analysis）这类专业开源软件成分分析与管理系统，管理所引入的开源软件的安全风
险。自动化的 SCA 工具对应用程序的源代码，包括模块、框架、库、容器、注册表
等工件进行自动化扫描，以识别和清点开源软件的所有组件构成和依赖关系，并识
别已知的安全漏洞或者潜在的许可证授权问题。把这些风险排查在应用系统投产之
前，也适用于应用系统运行中的诊断分析。除了提供开源软件成分可见性之外，一些 
SCA 工具还基于漏洞风险等级进行优先级修复开源漏洞或提供相应解决办法。
在软件供应链中，无论是上游还是下游企业，都建议建立自己的软件成分清单，不论是
通过数据库获取某一软件成分清单，比对软件成分清单信息判断是否被篡改；还是通过已有
软件成分清单改进生成技术，建立完善的软件成分清单生成机制、存储机制，都能对软件安
全起到积极的作用。
4.1.2 软件成分清单分析工具
根据 LINUX 基金会提供的分类
[11]，我们可以将 SBOM 工具分为 3 大类，分别是生产类、
消费类以及转换类。生产方面，主要包括软件成分分析、SBOM 文档的自动构建以及人工编
辑这三种功能；消费方面，分为浏览（人类可读）、SBOM 文件对比以及 SBOM 文件导入三
种功能；转换方面，需要实现翻译、合并以及支持功能。当然，一个分析工具可以是这三类
中的一类，也可以具备多类的功能。
表 4.1  SBOM 工具的分类
类别
类型
描述
生产
构建
文件在构建软件的过程中自动生成，并包含有关于这个 build 的信息