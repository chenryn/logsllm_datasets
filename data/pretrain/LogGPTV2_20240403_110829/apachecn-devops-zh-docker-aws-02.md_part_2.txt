- item was updated
- received 200 created status code
----------------------------------------------------------------------
XML: /app/unittests.xml
Name                              Stmts   Miss  Cover
-----------------------------------------------------
todo/__init__.py                      0      0   100%
todo/admin.py                         1      1     0%
todo/migrations/0001_initial.py       5      0   100%
todo/migrations/__init__.py           0      0   100%
todo/models.py                        6      6     0%
todo/serializers.py                   7      0   100%
todo/urls.py                          6      0   100%
todo/views.py                        17      0   100%
-----------------------------------------------------
TOTAL                                42      7    83%
----------------------------------------------------------------------
Ran 12 tests in 0.433s
OK
Destroying test database for alias 'default'...
```
`-it`标志指定用交互终端运行容器，`--rm`标志一旦退出将自动删除容器。请注意，所有测试都成功通过，因此我们知道映像中构建的应用处于良好状态，至少就已经为应用定义的当前测试而言是如此。
# 配置发布阶段
有了测试阶段，我们现在有了一个包含所有应用依赖项的映像，这些应用依赖项以一种无需编译或开发依赖项即可安装的格式打包，同时还有我们的应用源代码，我们可以轻松地验证它是否通过了所有测试。
我们需要配置的下一个阶段是发布阶段，它将测试阶段构建的应用源代码和各种应用依赖项复制到一个新的生产就绪的发布映像中。因为应用依赖项现在以预编译格式提供，所以发布映像不需要开发依赖项或源代码编译工具，从而允许我们创建一个更小、更精简、攻击面更小的发布映像。
# 安装系统依赖项
为了开始创建发布阶段，我们可以在 Dockerfile 的底部添加一个新的`FROM`指令，Docker 会将其视为新阶段的开始:
```
# Test stage
FROM alpine AS test
LABEL application=todobackend
.........
...# Test entrypointCMD ["python3", "manage.py", "test", "--noinput", "--settings=todobackend.settings_test"]
# Release stage
FROM alpine
LABEL application=todobackend
# Install operating system dependencies
RUN apk add --no-cache python3 mariadb-client bash
```
在前面的示例中，您可以看到发行版映像再次基于 Alpine Linux 映像，考虑到其占用空间非常小，这是发行版映像的绝佳选择。您可以看到，我们安装了较少的操作系统依赖项，包括:
*   `python3`:由于示例应用是 Python 应用，因此需要 Python 3 解释器和运行时
*   `mariadb-client`:包括与 MySQL 应用数据库通信所需的系统库
*   `bash`:对于故障排除和执行入口点脚本非常有用，我们将在后面的章节中讨论。
注意，不是安装`python3-dev`和`mariadb-dev`包，我们只需要安装这些包的非开发版本，因为我们在测试阶段编译并构建了所有应用依赖作为预编译轮。
# 创建应用用户
下一步是创建一个应用用户，我们的应用将作为该用户运行。默认情况下，Docker 容器以 root 用户身份运行，这对于测试和开发目的来说是很好的，但是在生产中，即使使用容器提供的隔离机制，以非 root 用户身份运行容器仍然被认为是最佳实践:
```
# Test stage
...
...
# Release stage
FROM alpine
LABEL application=todobackend
# Install operating system dependencies
RUN apk add --no-cache python3 mariadb-client bash
# Create app user
RUN addgroup -g 1000 app && \
 adduser -u 1000 -G app -D app
```
在上例中，我们首先创建一个名为`app`的组，组标识为`1000`，然后创建一个名为`app`的用户，用户标识为`1000`，属于`app`组。
# 复制和安装应用源代码和依赖项
最后一步是复制之前在测试阶段构建的应用源代码和依赖项，将依赖项安装到发布映像中，然后删除在此过程中使用的任何临时文件。我们还需要将工作目录设置为`/app`，并将容器配置为作为我们在上一节中创建的`app`用户运行:
```
# Test stage
...
...
# Release stage
FROM alpine
LABEL application=todobackend
# Install operating system dependencies
RUN apk add --no-cache python3 mariadb-client bash
# Create app user
RUN addgroup -g 1000 app && \
    adduser -u 1000 -G app -D app
# Copy and install application source and pre-built dependencies
COPY --from=test --chown=app:app /build /build
COPY --from=test --chown=app:app /app /app
RUN pip3 install -r /build/requirements.txt -f /build --no-index --no-cache-dir
RUN rm -rf /build
# Set working directory and application user
WORKDIR /app
USER app
```
您首先使用带有`--from`标志的`COPY`指令，它告诉 Docker 在`--from`标志中指定的阶段中查找要复制的文件。在这里，我们将测试阶段映像中的`/build`和`/app`文件夹复制到发布阶段中具有相同名称的文件夹中，并且还配置`--chown`标志以将这些复制的文件夹的所有权更改给应用用户。然后我们使用`pip3`命令只安装`requirements.txt`文件中指定的核心需求(运行应用不需要`requirements_test.txt`中指定的依赖项)，使用`--no-index`标志禁用 PIP 连接互联网下载包，而是使用`/build`文件夹，如`-f`标志所引用的，查找之前在测试阶段构建并复制到该文件夹的依赖项。我们还指定了`--no-cache-dir`标志，以避免在本地文件系统中不必要地缓存包，并在一切安装完成后删除`/build`文件夹。
最后，将工作目录设置为`/app`，并通过指定`USER`指令将容器配置为作为`app`用户运行。
# 构建和运行发布映像
现在我们已经完成了 Dockerfile 的发布阶段的配置，是时候构建我们新发布的映像并验证我们实际上可以成功运行我们的应用了。
为了构建映像，我们可以使用`docker build`命令，并且因为发布阶段是 Dockerfile 的最后一个阶段，所以您不需要像我们之前针对测试阶段所做的那样针对特定的阶段:
```
> docker build -t todobackend-release . Sending build context to Docker daemon 312.8kB
Step 1/22 : FROM alpine AS test
 ---> 3fd9065eaf02
...
...
Step 13/22 : FROM alpine
 ---> 3fd9065eaf02
Step 14/22 : LABEL application=todobackend
 ---> Using cache
 ---> afdd1dee07d7
Step 15/22 : RUN apk add --no-cache python3 mariadb-client bash
 ---> Using cache
 ---> dfe0b6487459
Step 16/22 : RUN addgroup -g 1000 app && adduser -u 1000 -G app -D app
 ---> Running in d75df9cadb1c
Removing intermediate container d75df9cadb1c
 ---> ac26efcbfea0
Step 17/22 : COPY --from=test --chown=app:app /build /build
 ---> 1f177a92e2c9
Step 18/22 : COPY --from=test --chown=app:app /app /app
 ---> ba8998a31f1d
Step 19/22 : RUN pip3 install -r /build/requirements.txt -f /build --no-index --no-cache-dir
 ---> Running in afc44357fae2
Looking in links: /build
Collecting Django==2.0 (from -r /build/requirements.txt (line 1))
Collecting django-cors-headers==2.1.0 (from -r /build/requirements.txt (line 2))
Collecting djangorestframework==3.7.3 (from -r /build/requirements.txt (line 3))
Collecting mysql-connector-python==8.0.11 (from -r /build/requirements.txt (line 4))
Collecting pytz==2017.3 (from -r /build/requirements.txt (line 5))
Collecting uwsgi (from -r /build/requirements.txt (line 6))
Collecting protobuf>=3.0.0 (from mysql-connector-python==8.0.11->-r /build/requirements.txt (line 4))
Requirement already satisfied: setuptools in /usr/lib/python3.6/site-packages (from protobuf>=3.0.0->mysql-connector-python==8.0.11->-r /build/requirements.txt (line 4)) (28.8.0)
Collecting six>=1.9 (from protobuf>=3.0.0->mysql-connector-python==8.0.11->-r /build/requirements.txt (line 4))
Installing collected packages: pytz, Django, django-cors-headers, djangorestframework, six, protobuf, mysql-connector-python, uwsgi
Successfully installed Django-2.0 django-cors-headers-2.1.0 djangorestframework-3.7.3 mysql-connector-python-8.0.11 protobuf-3.6.0 pytz-2017.3 six-1.11.0 uwsgi-2.0.17
Removing intermediate container afc44357fae2
 ---> ab2bcf89fe13
Step 20/22 : RUN rm -rf /build
 ---> Running in 8b8006ea8636
Removing intermediate container 8b8006ea8636
 ---> ae7f157d29d1
Step 21/22 : WORKDIR /app
Removing intermediate container fbd49835ca49
 ---> 55856af393f0
Step 22/22 : USER app
 ---> Running in d57b2cb9bb69
Removing intermediate container d57b2cb9bb69
 ---> 8170e923b09a
Successfully built 8170e923b09a
Successfully tagged todobackend-release:latest
```
此时，我们可以运行发布映像中的 Django 应用，但是您可能想知道它是如何工作的。当我们之前运行`python3 manage.py runserver`命令时，它启动了一个本地开发 web 服务器，这对于生产用户的情况是不推荐的，所以我们需要一个替代 web 服务器来运行我们的应用。
您可能已经在`requirements.txt`文件中注意到了一个名为`uwsgi`的包——这是一个非常流行的网络服务器，可以在生产中使用，并且，对于我们的用例来说，可以通过画中画方便地安装。这意味着`uwsgi`已经作为 web 服务器出现在我们的发布容器中，并且可以用来为示例应用提供服务:
```
> docker run -it --rm -p 8000:8000 todobackend-release uwsgi \
    --http=0.0.0.0:8000 --module=todobackend.wsgi --master *** Starting uWSGI 2.0.17 (64bit) on [Tue Jul 3 11:44:44 2018] ***
compiled with version: 6.4.0 on 02 July 2018 14:34:31
os: Linux-4.9.93-linuxkit-aufs #1 SMP Wed Jun 6 16:55:56 UTC 2018
nodename: 5be4dd1ddab0
machine: x86_64
clock source: unix
detected number of CPU cores: 1
current working directory: /app
detected binary path: /usr/bin/uwsgi
!!! no internal routing support, rebuild with pcre support !!!
your memory page size is 4096 bytes
detected max file descriptor number: 1048576
lock engine: pthread robust mutexes
thunder lock: disabled (you can enable it with --thunder-lock)
uWSGI http bound on 0.0.0.0:8000 fd 4
uwsgi socket 0 bound to TCP address 127.0.0.1:35765 (port auto-assigned) fd 3
Python version: 3.6.3 (default, Nov 21 2017, 14:55:19) [GCC 6.4.0]
*** Python threads support is disabled. You can enable it with --enable-threads ***
Python main interpreter initialized at 0x55e9f66ebc80
your server socket listen backlog is limited to 100 connections
your mercy for graceful operations on workers is 60 seconds
mapped 145840 bytes (142 KB) for 1 cores
*** Operational MODE: single process ***
WSGI app 0 (mountpoint='') ready in 0 seconds on interpreter 0x55e9f66ebc80 pid: 1 (default app)
*** uWSGI is running in multiple interpreter mode ***
spawned uWSGI master process (pid: 1)
spawned uWSGI worker 1 (pid: 7, cores: 1)
spawned uWSGI http 1 (pid: 8)
```
我们使用`-p`标志将容器上的端口`8000`映射到您主机上的端口`8000`，并执行`uwsgi`命令，传入在端口`8000`上运行应用的各种配置标志，并将`todobackend.wsgi`模块指定为`uwsgi`所服务的应用。
The Web Server Gateway Interface (WSGI) is a standard interface used by Python applications to interact with web servers. Every Django application includes a WSGI module for communicating with a web server, which can be accessed via `.wsgi`.
此时，您可以浏览到`http://localhost:8000`，虽然应用确实返回了响应，但您会发现 web 服务器和应用缺少一堆静态内容:
![](img/1666a16d-f8ad-4509-974d-aca192694abf.png)
这里的问题是，当您运行 Django 开发 web 服务器时，Django 会自动生成静态内容，但是，当您在生产环境中与外部 web 服务器一起运行应用时，您自己负责生成静态内容。我们将在本章后面学习如何做到这一点，但是现在，您可以通过使用`curl`来验证 API 的工作原理:
```
> curl -s localhost:8000/todos | jq
[
 {
 "url": "http://localhost:8000/todos/1",
 "title": "Walk the dog",
 "completed": false,
 "order": 1
 },
 {
 "url": "http://localhost:8000/todos/2",
 "title": "Wash the car",
 "completed": true,
 "order": 2
 }
]