### Performance Comparison to Linux (Median UnixBench Scores, Higher is Better, Standard Deviation in Parentheses)

The slowdown (x) values for the various approaches are as follows:

- **Baseline**: 4.77, 2.32, 0.86, 2.69, 0.25, 13.09, 17.54, 6.11, 33.00, 2.65, 1.12, 35.01, 4.20

### Fault Tolerance and Recovery

Our recovery methods, particularly the enhanced approach, show significant improvements in system survivability, especially in the "fail" case where the test fails but the system remains stable. The pessimistic approach, while effective in reducing crashes, has slightly lower survivability because it sometimes shuts down even when recovery might be possible. Both the pessimistic and enhanced approaches significantly reduce the number of crashes, though complete elimination of crashes is not feasible due to the inherent limitations of our fault model, which assumes a single fault.

When all faults from the EDFI model are injected, violating our fail-stop assumption, the enhanced recovery method still offers the best results in terms of both survivability and crash avoidance. This demonstrates the robustness of our approach, even when faced with realistic software faults that may cause silent state corruption.

### Performance Overhead

To evaluate the performance of our system, we used the Unixbench benchmark [35] on a 4-core 2.3 GHz AMD Phenom processor with 6 GB of RAM. Table IV compares the median Unixbench scores of the baseline system (without recovery) against Linux. Our prototype is significantly slower than Linux, which can be attributed to the overhead from context-switching between OS components in the microkernel design and the fact that Linux is a more mature and optimized system.

To assess the overhead of our recovery solution, we compared the baseline against unoptimized recovery instrumentation, pessimistic recovery policy, and enhanced recovery policy. The relative slowdowns are listed in Table V. Disabling undo log updates outside the recovery window greatly reduces the overhead, resulting in a modest performance overhead of around 5% for both recovery modes. The pessimistic mode incurs lower overhead than the enhanced mode because recovery windows remain open for shorter periods.

### Memory Overhead

OSIRIS increases memory usage primarily due to maintaining the undo log and keeping spare copies (clones) of servers for recovery. Table VI shows the average runtime memory usage per component. The total memory overhead is 50 MB, representing a 6-fold increase for those OS servers. This overhead is mainly for VM, requiring pre-allocation of memory for the new VM during recovery. Despite this, the system servers consume only a small part of the memory compared to user applications.

### Service Disruption

OSIRIS ensures continuity of execution with minimal service disruption, even under high-intensity and consistent fault loads. We designed an experiment to show the performance and continuity of a long-running benchmark (Unixbench) under a challenging fault load. By injecting fail-stop faults in the PM server at regular intervals, we observed that some performance tests (e.g., shell1, shell8, execl) were affected, while others (e.g., dhry2reg, whetstone-double, fsdisk, fsbuffer) were not. This indicates that the performance degradation is workload-dependent, but OSIRIS effectively guarantees survivability and continuity even in extreme high-frequency failure scenarios.

### Limitations and Future Work

#### Controlled Shutdown
Our approach substantially reduces the number of crashes by performing controlled shutdowns when a safe recovery cannot be guaranteed. In future work, we could extend this to allow user applications to save their state before restarting, similar to what Otherworld [12] supports.

#### Extensibility
While our prototype implements a limited set of SEEPs and recovery actions, our framework is extensible. For example, we could define new SEEPs and reconciliation actions to handle specific use cases, such as killing the requester process to clean up state changes.

#### Composable Recovery Policies
Our framework allows for multiple composable recovery policies. For instance, a recovery window could gradually switch from strict to lenient policies based on the SEEP interactions encountered. This would enable tailored recovery actions.

#### Generality of the Framework
Our recovery framework is generic and can be retrofitted to other systems. The LLVM-based instrumentation and recovery libraries can be reused in various settings, making our system adaptable and easier to maintain. However, the target system should have modular and restartable components.

#### Fail-Silent Software Faults
OSIRIS aims to protect against crashes due to software bugs, but it cannot guarantee safety in cases of silent data corruption. With better fault detection mechanisms, we can approximate a fail-stop model for a broader class of real-world faults.

#### Recovery Surface
SEEP is a foundational element of our approach. While it can be tailored for other systems, a design with frequent inter-compartmental communications with global side effects may result in a small recovery surface. However, this limitation does not significantly affect the general applicability of our approach.

#### Performance
As shown in Section VI, our recovery mechanism incurs very low overhead on our prototype.