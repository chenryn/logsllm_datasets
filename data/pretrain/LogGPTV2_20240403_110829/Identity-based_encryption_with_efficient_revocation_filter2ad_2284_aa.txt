# Identity-based Encryption with Efficient Revocation

## Authors
- Alexandra Boldyreva<sup>*</sup>
  - School of Computer Science, Georgia Institute of Technology, Atlanta, GA
  - Email: [EMAIL]
- Vipul Goyal<sup>†</sup>
  - Dept. of Computer Science, University of California, Los Angeles, CA
  - Email: [EMAIL]
- Virendra Kumar<sup>‡</sup>
  - School of Computer Science, Georgia Institute of Technology, Atlanta, GA
  - Email: [EMAIL]

<sup>*</sup>Supported in part by NSF CAREER award 0545659.
<sup>†</sup>Supported in part from grants from the NSF ITR and Cybertrust programs (including grants 0627781, 0456717, and 0205594), a subgrant from SRI as part of the Army CyberTA program, an equipment grant from Intel, a Microsoft Research Fellowship, an Alfred P. Sloan Foundation Fellowship, and an Okawa Foundation Research Grant.
<sup>‡</sup>Supported in part by the grant of the first author.

**Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.**

**CCS'08, October 27–31, 2008, Alexandria, Virginia, USA.**
**Copyright 2008 ACM 978-1-59593-810-7/08/10 ...$5.00.**

### Abstract
Identity-based encryption (IBE) is an attractive alternative to public-key encryption as it eliminates the need for a Public Key Infrastructure (PKI). In IBE, senders do not need to look up the public keys and corresponding certificates of receivers; the identities (e.g., email addresses or IP addresses) of the latter are sufficient for encryption. However, both PKI and IBE settings must provide a means to revoke users from the system. While efficient revocation mechanisms have been well-studied in traditional PKI, there has been limited research on revocation in IBE. The most practical solution involves periodic key updates, but this approach does not scale well as the number of users increases. We propose an IBE scheme that significantly improves key-update efficiency for the trusted party (from linear to logarithmic in the number of users) while remaining efficient for users. Our scheme leverages the Fuzzy IBE primitive and binary tree data structure, and is provably secure.

### Categories and Subject Descriptors
E.3 [Data]: Data Encryption

### General Terms
Algorithms, Security

### Keywords
Identity-based encryption, revocation, provable security

## 1. Introduction

### 1.1 Motivation
Identity-based encryption (IBE) is an appealing alternative to public-key encryption because it eliminates the need for a Public Key Infrastructure (PKI). In IBE, the senders do not need to look up the public keys and corresponding certificates of the receivers; the identities (e.g., emails or IP addresses) along with common public parameters are sufficient for encryption. The private keys of the users are issued by a trusted third party called the Private Key Generator (PKG).

The idea of identity-based cryptography dates back to 1984, introduced by Shamir [25]. The first practical IBE scheme was constructed by Boneh and Franklin in 2001 [7], leveraging progress in elliptic curves with bilinear pairings.

In any setting, whether PKI- or identity-based, there must be a means to revoke users from the system, especially if their private keys are compromised. In a PKI setting, a certification authority informs senders about expired or revoked keys via publicly available digital certificates and certificate revocation lists.

For IBE, Boneh and Franklin [7] suggested that users renew their private keys periodically, e.g., every week, and senders use the receivers' identities concatenated with the current time period, e.g., "week 15 of 2008." Since only the PKG's public key and the receiver's identity are needed to encrypt, and there is no way to communicate to the senders that an identity has been revoked, such a mechanism to regularly update users' private keys seems to be the only viable solution to the revocation problem. This means that all users, regardless of whether their keys have been exposed or not, must regularly contact the PKG, prove their identity, and get new private keys. The PKG must be online for these transactions, and a secure channel must be established between the PKG and each user to transmit the private key. As the number of users increases, this can become a bottleneck.

Alternatively, to avoid the need for interaction and a secure channel, the PKG may encrypt the new keys of non-revoked users under their identities and the previous time period, and send the ciphertexts to these users (or post them online). With this approach, for every non-revoked user in the system, the PKG is required to perform one key generation and one encryption operation per key update. This solution, like the original suggestion, requires the PKG to do work linear in the number of users and does not scale well as the number of users grows. The goal of this paper is to study this problem and find solutions to alleviate it.

### 1.2 Related Work
Efficient revocation is a well-studied problem in the traditional PKI setting, e.g., [19, 22, 1, 21, 20, 12, 13]. However, in the IBE setting, there has been little work on studying revocation mechanisms. Hanaoka et al. [16] proposed a way for users to periodically renew their private keys without interacting with the PKG. Each user updates the keys locally with the help of a special secret key contained in a device assumed to be physically secure. In contrast, we consider a setting where all secret key information of a user can be compromised.

Revocation has also been studied in the ID-based setting with mediators [6, 18]. In this setting, there is a special semi-trusted third party called a mediator who holds shares of all users' private keys and helps users decrypt each ciphertext. If an identity is revoked, the mediator is instructed to stop helping the user. However, we focus on a more practical standard IBE setting where users can decrypt on their own.

Broadcast encryption aims to prevent revoked users from accessing secret information being broadcast. However, broadcast encryption solutions, particularly ID-based ones, do not directly translate into solutions for our problem. In broadcast encryption, a non-revoked user can help a revoked user gain access to the sensitive information being broadcast (since this information is the same for all parties). In the IBE setting, a revoked user, or the adversary holding its private key, should not be able to decrypt messages even if it colludes with any number of non-revoked users.

To the best of our knowledge, the solution proposed by Boneh and Franklin in [7] remains the most practical user revocation solution in the IBE setting.

### 1.3 Contributions
We propose a new method to mitigate the limitations of IBE with regard to revocation and improve the efficiency of the previous solution. We aim to remove interaction from the key update process, as keeping the PKG online can be a bottleneck, especially with a large number of users. At the same time, we do not want to employ physically secure devices and aim to significantly minimize the work done by the PKG and users.

First, we define the Revocable IBE primitive and its security model, which formalizes the possible threats. The model takes into account all adversarial capabilities of the standard IBE security notion. The adversary should be able to learn the private keys of users with identities of its choice and, in the case of chosen-ciphertext attacks, see decryptions under the private key of the challenge identity of the ciphertexts of its choice. The adversary should not be able to learn any partial information about the messages encrypted for the challenge identity. Additionally, we consider the adversary having access to periodic key updates (as we assume this information is public) and being able to revoke users with IDs of its choice. The adversary should not be able to learn any partial information about the messages encrypted for any revoked identity when the ciphertext is created after the time of revocation (i.e., for the ID containing the time past the revocation time).

We show that it is possible to reduce the amount of work the PKG has to do for key updates and the total size of key updates to logarithmic in the number of users, while keeping the key update process non-interactive and encryption and decryption efficient.

Our idea is to build on the Fuzzy IBE construction by Sahai and Waters [24]. The Fuzzy IBE primitive provides some error tolerance, i.e., identities are viewed as sets of attributes, and a user can decrypt if they possess keys for enough (but not necessarily all) attributes a ciphertext is encrypted under. At the same time, colluding users cannot combine their keys to decrypt a ciphertext that none of them could decrypt independently.

We propose to combine the Fuzzy IBE construction from [24] with the binary tree data structure, previously used to improve the efficiency of revocations in the PKI setting [22, 1]. To decrypt a ciphertext encrypted for an identity and time period, the user must possess the keys for these two attributes. The PKG publicly posts and regularly updates the keys for the current time attribute. Even though the time attributes are the same for all users, this does not compromise security, thanks to the collusion-resistance property of Fuzzy IBE. To reduce the size of key updates from linear to logarithmic in the number of users, the binary tree data structure is used. We modify the Fuzzy IBE scheme to allow collusion of some users (corresponding to non-revoked users in our scheme) on some attributes (i.e., time attribute). We provide more details and present the full construction in Section 4.

While our scheme provides major computation and bandwidth efficiency improvements at the stage of key updates, it also permits efficient encryption and decryption. We show that our scheme provably guarantees security assuming the decisional bilinear Diffie-Hellman (DBDH) problem is hard, which is a common assumption nowadays (cf. e.g., [4, 24, 26, 15]).

We also show two ways to address chosen-ciphertext attacks. Our first solution is to modify our scheme by additionally employing a strongly-unforgeable one-time signature scheme in a manner similar to that from [8, 15]. We also show that it is possible to employ the Fujisaki-Okamoto (FO) transform [10, 11]. Security of the latter solution relies on the random oracle model [2], but unlike the former solution, it is generic and can be applied to any Revocable IBE scheme.

Since existing Fuzzy IBE schemes are only secure in the weaker selective-ID model [9], where the adversary must declare the challenge identity upfront, with the above approach, we can only achieve selective-ID security. We leave it as an interesting open problem to achieve full security without such limitation.

We note that senders in our scheme, just like in a regular IBE scheme, do not need to know anything besides the identities of the intended receivers and the current time period to encrypt a message. The information posted by the PKG is only for the receivers to update their secret keys.

Finally, we note that the problem of revocation is equally important for Fuzzy IBE and attribute-based encryption (ABE) [15] schemes. While the same periodic key update solution due to Boneh and Franklin applies, it similarly limits scalability. We show that it is possible to extend our techniques to provide efficient non-interactive key updates to Fuzzy IBE and ABE schemes.

## 2. Notation and Conventions
- If \( S \) is a finite set, then \( s \leftarrow S \) denotes that \( s \) is selected uniformly at random from \( S \).
- If \( \kappa \in \mathbb{N} \), then \( 1^\kappa \) denotes the string consisting of \( \kappa \) consecutive "1" bits.
- We denote by \( \phi \) the empty set.
- If \( x \) and \( y \) are strings, then \( x \| y \) denotes the concatenation of \( x \) and \( y \), and we assume that \( x \) and \( y \) can be efficiently and unambiguously recovered from \( x \| y \).
- When describing algorithms, \( a \leftarrow b \) denotes that \( a \) is assigned the value \( b \).
- If \( A \) is a randomized algorithm and \( n \in \mathbb{N} \), then \( a \leftarrow A(i_1, i_2, \ldots, i_n) \) denotes that \( a \) is assigned the outcome of the experiment of running \( A \) on inputs \( i_1, i_2, \ldots, i_n \). If \( A \) is deterministic, we drop the dollar sign above the arrow.
- If \( S = \{s_1, s_2, \ldots, s_n\} \), then \( \{x_s\}_{s \in S} \) denotes the set \( \{x_{s_1}, x_{s_2}, \ldots, x_{s_n}\} \).
- An adversary is an algorithm. By convention, the running time of an adversary includes that of its overlying experiment.
- All algorithms are assumed to be randomized and efficient (i.e., polynomial in the size of the input), unless noted otherwise.
- In the rest of the paper, \( \kappa \in \mathbb{N} \) is the security parameter, \( n(\cdot) \) denotes a polynomial in \( \kappa \), but for simplicity, we use the notation \( n \).

## 3. Revocable IBE and Its Security

### 3.1 Syntax of Revocable IBE

**Definition 3.1. [Revocable IBE]** An identity-based encryption with efficient revocation or simply Revocable IBE (RIBE) scheme \( RIBE = (S, SK, KU, DK, E, D, R) \) is defined by seven algorithms and has associated message space \( M \), identity space \( I \), and time space \( T \). We assume that the size of \( T \) is polynomial in the security parameter. Each algorithm is run by one of three types of parties: key authority, sender, or receiver. The key authority maintains a revocation list \( rl \) and state \( st \). The revocation list \( rl \) can be part of the state \( st \), but we keep it explicit for clarity. In what follows, we call an algorithm stateful only if it updates \( rl \) or \( st \). We treat time as discrete rather than continuous.

- **Stateful Setup Algorithm \( S \)** (run by key authority): Takes input security parameter \( 1^\kappa \) and number of users \( n \), and outputs public parameters \( pk \), master key \( mk \), revocation list \( rl \) (initially empty), and state \( st \).
- **Stateful Private Key Generation Algorithm \( SK \)** (run by key authority): Takes input public parameters \( pk \), master key \( mk \), identity \( \omega \in I \), and state \( st \), and outputs private key \( sk_\omega \) and an updated state \( st \).
- **Key Update Generation Algorithm \( KU \)** (run by key authority): Takes input public parameters \( pk \), master key \( mk \), key update time \( t \in T \), revocation list \( rl \), and state \( st \), and outputs key update \( ku_t \).
- **Deterministic Decryption Key Generation Algorithm \( DK \)** (run by receiver): Takes input private key \( sk_\omega \) and key update \( ku_t \), and outputs decryption key \( dk_{\omega, t} \) or a special symbol \( \bot \) indicating that \( \omega \) was revoked. (We say an identity \( \omega \) was revoked at time \( t \) if revocation algorithm \( R \) was run by the key authority on input \( (\omega, t, rl, st) \) for any \( rl, st \)).
- **Encryption Algorithm \( E \)** (run by sender): Takes input public parameters \( pk \), identity \( \omega \in I \), encryption time \( t \in T \), and message \( m \in M \), and outputs ciphertext \( c \). For simplicity and without loss of generogeneity, we assume that \( \omega \) and \( t \) are efficiently computable from \( c \).
- **Deterministic Decryption Algorithm \( D \)** (run by receiver): Takes input decryption key \( dk_{\omega, t} \) and ciphertext \( c \), and outputs a message \( m \in M \) or a special symbol \( \bot \) indicating that the ciphertext is invalid.
- **Stateful Revocation Algorithm \( R \)** (run by key authority): Takes input identity to be revoked \( \omega \in I \), revocation time \( t \in T \), revocation list \( rl \), and state \( st \), and outputs an updated revocation list \( rl \).

The consistency condition requires that for all \( \kappa \in \mathbb{N} \) and polynomials (in \( \kappa \)) \( n \), all \( pk \) and \( mk \) output by setup algorithm \( S \), all \( m \in M \), \( \omega \in I \), \( t \in T \), and all possible valid states \( st \) and revocation lists \( rl \), if identity \( \omega \) was not revoked before or at time \( t \), then the following experiment returns 1 with probability 1:

\[ sk_\omega, st \leftarrow SK(pk, mk, \omega, st) \]
\[ ku_t \leftarrow KU(pk, mk, t, rl, st) \]
\[ dk_{\omega, t} \leftarrow DK(sk_\omega, ku_t) \]

This ensures that the decryption key \( dk_{\omega, t} \) is correctly generated and can be used to decrypt the ciphertext.