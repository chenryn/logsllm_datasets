



	
	
0X27




	


	


0x25

0x10








	


	



0x10




0x26
0x10




 










	


0x27
0x26


0x10




 

 
!
	


	




 

 
!
Fig. 4: Example of the operation of the combined RSB/SCS
0x09:
0x10:
0x24:
0x25:
0x26:
0x27:
0x36:
0x74:
0x86:
call Function1;
Function1:
call Function2;
call Function3;
call Function4;
Function2:
ret;
Function3:
jz 0x86;
ret;
Fig. 5: Code sample to illustrate the operation of RSB/SCS
back to the RSB/SCS to reset the state to the previous state
before the misspeculation.
D. Preventing RSB Poisoning
Since the RSB/SCS is not shared between different threads
and preserved across context switches, the attacker is not
able to poison this structure. Although we allow special
instructions to manipulate the SCS to take care of cases such
as setjmp/longjmp, we assume these instructions are only
available to code within the trusted computing base to prevent
them from being abused to arbitrarily manipulate the RSB/SCS
(which is not a Spectre vulnerability).
VI. SECURITY ANALYSIS
In this section, we analyze whether SPECCFI can achieve
its primary security goal: preventing attackers from exploiting
branch target injection to ultimately launch Spectre attacks.
A. Guarantees against Branch Target Injection
Branch target injection attacks target two prediction com-
ponents: the branch target buffer (BTB) and the return stack
buffer (RSB). Similar to CFI, SPECCFI does not prevent such
in the victim protection domain,
injections: we assume attackers can still insert arbitrary targets
into the BTB, for example by executing branches inside their
own protection domain [28]. What SPECCFI guarantees is that
if the injected target is not a valid indirect control transfer
target
then the injected
prediction target will not be executed speculatively, i.e., they
cannot speculatively execute arbitrary code gadgets. For RSB,
SPECCFI essentially converts it into a precise shadow call
stack (SCS) and maintains it across context switches, such
that both in-address-space injection and cross-address-space
injection are no longer possible.
Impact of Imprecise CFG: One weakness of static CFG
construction is imprecision, leading to having multiple pos-
sible targets with the same label. This ambiguity may still
allow attackers to launch attacks using permitted function-
level gadgets [14], [16], [26], [60]. Since SPECCFI also relies
on the CFI analysis to provide valid targets for forward-edge
indirect control transfer, it also inherits the same limitation:
mis-prediction is still possible to any of the targets sharing
a valid label. Since SPECCFI is compatible with any label
based CFI, it can beneÔ¨Åt from improvements in CFI systems
that are increasing the precision in tracking the legal control
Ô¨Çow.
B. Incorporating Defense against Spectre-PHT
SPECCFI on its own can only mitigate Spectre-BTB and
Spectre-RSB attacks. In this subsection, we discuss how
SPECCFI can be (and should be) combined with Spectre-
PHT defenses to complete the defense against known Spectre
variants. In particular, to defend against Spectre-PHT attacks,
researchers have proposed code analysis techniques [33], [49],
[74] to (1) identify dangerous code gadgets that can be used
to leak information and (2) conditionally insert serialization
instructions (e.g., lfence) to prevent these dangerous code
gadgets from being executed speculatively. One tricky part of
Authorized licensed use limited to: University of New South Wales. Downloaded on October 18,2020 at 09:22:13 UTC from IEEE Xplore.  Restrictions apply. 
45
such analysis is that, although on the committed path, direct
control transfer is always correct; during speculation, even
direct control transfer can be wrong. As a simple example,
consider a direct call behind a conditional branch: if the pre-
diction on the conditional branch is wrong, then the following
direct call is also wrong. For this reason, when analyzing the
code to identify potential dangerous gadgets for Spectre-like
attacks, one must perform inter-procedural analysis (for both
direct and indirect calls) to account for gadgets that may span
across function calls. The unique opportunity here is that, if the
static analysis to identify and eliminate Spectre gadgets uses
the same CFG for CFI enforcement, then malicious gadgets at
the beginning of function should already be eliminated. As a
result, when combined with such defenses, even if SPECCFI
allows misspeculation due to imprecise CFG, the wrong target
cannot be used to launch attacks, because the gadgets have
already been eliminated.
At the same time, defenses against Spectre-PHT attacks
have to use SPECCFI-like techniques to be sound. The reason
is the same reason inline reference monitors like Software
Fault Isolation [48], [78] have to enforce some control-Ô¨Çow
regulation‚Äîif attackers can hijack the control-Ô¨Çow to arbitrary
locations, then they can easily bypass the inserted checks
and bypass the protection. This is especially dangerous to
variable length ISA like x86 where attackers can jump to
the middle of an instruction to Ô¨Ånd unintended instructions
forming exploitable gadgets. Similarly, SPECCFI provides
the same runtime guarantee to Spectre-PHT defenses: by
enforcing that even speculative control-Ô¨Çow cannot deviate
from the CFG used in static analysis, the code being analyzed
and instrumented will be the same as that executed.
C. Comparison to Intel CET
A few days before the submission of this paper, Intel
published a new speciÔ¨Åcation of its CET [38] extensions. The
new speciÔ¨Åcation includes a paragraph (section 3.8) indicating
their plans to include a check that an indirect branch executed
speculatively targets a legal Branch_end target. Intel sug-
gested this solution, which is essentially the conÔ¨Åguration of
SPECCFI using CET as the CFI implementation, concurrently
with our work.
We believe that Intel‚Äôs interest in this solution validates it
practicality as a defense against transient speculation attacks.
While the updated CET speciÔ¨Åcations document describes
only the general idea, our work contributes a reference imple-
mentation and assessment of both the performance and secu-
rity of the solution. In addition, SPECCFI provides substantial
security advantages over the new CET, including:
‚Ä¢ Backward edge protection using the speculation aware
shadow stack. While Intel CET uses a shadow stack to
protect the backward edge for committed instructions,
the speciÔ¨Åcations describe no plans to use it for limiting
speculation. It is not trivial to extend the shadow stack to
track the speculative state, as we describe in Section V.
‚Ä¢ Generalized CFI protection and limiting control Ô¨Çow
bending. CET only enforces that control Ô¨Çow (whether
TABLE III: ConÔ¨Åguration of the simulated CPU
Parameter
CPU
Issue
IQ
Commit
ROB
iTLB
dTLB
LDQ
STQ
RSB
I-Cache
D-Cache
ConÔ¨Åguration
SkyLake
6-way issue
96-entry Issue Queue
Up to 6 Micro-Ops/cycle
224-entry Reorder Buffer
64-entry instructions Translation Lookaside Buffer
64-entry data Translation Lookaside Buffer
72-entry Load Queue
56-entry Store Queue
16-entry Return Stack Buffer
32 KB, 8-way, 64B line, 4 cycle hit
32 KB, 8-way, 64B line, 4 cycle hit
in the new speciÔ¨Åcations, speculative)
committed or,
happens to the start of a legal basic block. As a result,
it allows arbitrary control Ô¨Çow bending [16], which
does not meaningfully restrict the attack opportunities.
In contrast, SPECCFI admits any CFI implementation,
which can substantially shrink the control bending attack
possibilities. SpeciÔ¨Åcally, from a given indirect control
Ô¨Çow instruction, only the gadgets with matching CFI
label are reachable. State-of-the-art CFI systems such as
PathArmor/Context Sensitive CFI can be supported [71]
substantially limiting the control Ô¨Çow opportunities. In
particular, we intend to explore supporting uCFI [31]
in our future work,
leaving no control Ô¨Çow bending
opportunities available.
VII. PERFORMANCE AND COMPLEXITY EVALUATION
In this section, we evaluate SPECCFI in terms of perfor-
mance and hardware complexity. All performance experiments
were conducted using the MARSSx86 (Micro Architectural
and System Simulator for x86) [56], a widely used cycle
accurate simulator. MARSSx86 is built using PTLsim [80]
and does a full system simulation (including the OS) on top of
the QEMU [12] emulator. First, we conÔ¨Ågured MARSSx86 to
simulate an Intel Skylake processor; conÔ¨Ågurations are shown
in Table III. We then integrated SPECCFI into the simulator
to model all new operations realistically and in full details, in
order to retain hardware faithful cycle accurate modeling of
the extended processor pipeline.
A. Performance Evaluation
We use the SPEC2017 benchmarks [2] for evaluation,
which is a standard benchmark suite used to evaluate the
impact of processor modiÔ¨Åcation on a range of representative
applications that exhibit a range of different behaviors. All
benchmarks were compiled using an LLVM compiler that is
modiÔ¨Åed to mark valid indirect control transfer targets with
labels. Unfortunately, since there is no ofÔ¨Åcial LLVM front-
end for FORTRAN [3], we were not able to compile 8 out
of the 23 SPEC2017 benchmarks as they contain FORTRAN
code.
One option to prevent Spectre attacks is to insert fences
to stop speculation around indirect control Ô¨Çow instructions.
Authorized licensed use limited to: University of New South Wales. Downloaded on October 18,2020 at 09:22:13 UTC from IEEE Xplore.  Restrictions apply. 
46
In order to evaluate SPECCFI performance, we compare it
against the following design points:
‚Ä¢ Baseline: this is the case of an unmodiÔ¨Åed unprotected
machine. SpeciÔ¨Åcally, we compile and run the SPEC2017
benchmarks using unmodiÔ¨Åed version of LLVM compiler
and MARSSx86 simulator. In all of our experiments, we
use the Instructions committed Per Cycle (IPC), a com-
mon metric for evaluating the performance of processors,
to report performance. The IPC values of the defenses
are normalized to this baseline implementation without
defenses; thus, a higher normalized value than 1 indicates
better than baseline performance.
‚Ä¢ Retpoline-style software fencing: we implement a system
adding fences to indirect branches using software. The
compiler is modiÔ¨Åed to substitute all the indirect branches
and return instructions with a sequence of instructions
which ensure that the target of the branches are resolved
before any following instruction that might touch the
cache (i.e, load) are issued. For protecting the forward
edges (i.e.
indirect call and jumps) This is done by
converting each indirect call to the three following in-
structions: ¬ñ a load preparing the value of the target
register/memory, ¬ó an lfence making sure that no
future load is issued before the branch is resolved and
¬ò the actual call to the address speciÔ¨Åed in the target
register. Taking the same approach for securing backward
edges (i.e. returns) we substitute any ret instruction
with a sequence of ¬ñ a pop from top of the software
stack to the target register, ¬ó an lfence making sure
to stop the speculation before the actual target of ret
resolved and ¬ò a jmp to transfer the control to the target.
Conceptually, this solution is similar to the Retpoline
defense [69] which essentially replaces speculation on
indirect branches with an empty stall gadget. Different
from Retpoline, we also insert the fences for returns
(Retpoline does not protect returns, and leaves the code
vulnerable to Spectre-RSB attacks).
This software approach has the advantage of not modi-
fying the underlying hardware but imposes a noticeable
overhead in the number of instructions and code size.
‚Ä¢ All Target Fencing: In this approach, we show one
implementation with an lfence, inserted in hardware,
at target of each indirect branch and return (the all target
fencing) since such a defense is possible without CFI.
This is done by detecting every indirect call, jump, or
return in the decode stage of the pipeline and inserting
an lfence at target of them to make sure that the branch
is resolved before issuing further instructions.
The implementations discussed above prevent speculation
by inserting lfence into the pipeline. SPECCFI offers a
more intelligent and targeted way of using fences for securing
forward edges (as discussed in Section IV), as well as a
new method for making backward edges secure (as explained
in Section V). To study the effect of different serializing
instruction we use two different types of lfence instructions
47
!#*$
# *"#'*$
 *$
.)/
.
-)2
-)1