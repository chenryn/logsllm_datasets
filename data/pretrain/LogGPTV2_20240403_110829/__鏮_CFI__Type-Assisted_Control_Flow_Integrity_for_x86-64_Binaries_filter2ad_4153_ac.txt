436
P. Muntean et al.
Theoretical Limits. We explored the theoretical limits regarding the eﬀec-
tiveness of the count and type policies by relying on the collected ground truth
data; essentially assuming perfect classiﬁcation. Based on the type information
collected by our Clang/LLVM pass, we derived the available number of calltar-
gets for each callsite by applying the count and type policies. From the results,
(1) the theoretical limit of the count* policy has a geomean of 89 possible calltar-
gets, which is around 8% of the geomean of the total available calltargets (1104),
and (2) the theoretical limit of the type* policy has a geomean of 83 possible
calltargets, which is 7.5% of the geomean of the total available calltargets (1104).
In comparison, the theoretical limit of the type* policy allows about 13% less
available calltargets in geomean than the limit of the count* policy (i.e., 69.3
vs. 79.4).
Calltarget per Callsite Reduction. (1) The count policy has a geomean of
104 calltargets, which is around 9.4% of the geomean of all available calltargets
(1104). This is around 24% more than the theoretical limit of available calltar-
gets per callsite (see count* 89 vs. 110.4). (2) The type policy has a geomean
of 104.7 calltargets, which is 9.48% of the geomean of total available calltargets
(1104). This is approximatively 25% more than the theoretical limit of avail-
able calltargets per callsite (see type* 83.7 vs. 104.7). τ CFI’s type policy allows
around 9.4% less available calltargets in the geomean than our implementation
of the count policy (104.7 vs. 110.4), and a total reduction of more than 94%
(104.7 vs. 1104) w.r.t. the total number of calltargets (CT) available once the
count and type policies are applied.
5.2 Forward-Edge Policy Vs. Other Tools
a
Vsftpd
4.0
Target
AT
3.0
1.0
6.0
ProFTPD
382.0
390.0
376.0
396.0
Pure-FTPD 0.0
τ CFI
(count)
τ CFI
(type)
IFCC TypeArmor
(CFI+CFC)
Table 2. Legitimate calltargets/callsite for 5
tools.
Table 2 provides
comparison
between τ CFI, TypeArmor and
IFCC w.r.t. the median count of
calltargets per callsite. The val-
ues for TypeArmor [25] and IFCC
[19] depicted in Table 2 have been
adopted from the corresponding
papers in order to ensure a fair
comparison. Further, Table 2 con-
veys the limitations of binary-based
type analysis, as the median of the
possible target set size for τ CFI is
several times larger than the corre-
sponding set sizes for system using source-level analysis. Note that the smaller
the geomean values are, the better the technique is. AT is a technique that
allows a callsite to target any address-taken functions. IFCC is a compiler-based
solution and is included here as a reference to show what is possible when the
program’s source code is available. TypeArmor and τ CFI on the other hand
4,714.0 7,230.0 1,169.0 1,022.0
PostgreSQL 12.0
2,304.0 2,504.0
13.0
10.0
63.0
13.0
10.0
51.0
3,698.0 5,896.0
170.4
259.8
123.1
254.0 1,111.0
528.0
574.0
540.0
515.0
562.0
Memcached
1.0
12.0
47.0
10.0
7.0
50.0
Lighttpd
14.0
14.0
14.0
12.0
25.0
150.0
NodeJS
341.0
Nginx
MySQL
geomean
8.7
528.0
111.6
τ CFI: Type-Assisted Control Flow Integrity for x86-64 Binaries
437
are binary-based tools. τ CFI reduces the number of calltargets by up to 42.9%
(geomean) when compared to the AT technique, by more than seven times (7230
vs. 1022) for a single test program w.r.t. AT, and by 65.49% (170.4 vs. 111.6)
in geomean when compared with TypeArmor, respectively. As such, τ CFI rep-
resents a stronger improvement w.r.t. calltarget per callsite reduction in binary
programs compared to other approaches.
5.3 Eﬀectiveness Against COOP
We investigated the eﬀectiveness of τ CFI against the COOP attack by looking
at the number of register arguments, which can be used to enable data ﬂows
between gadgets. In order to determine how many arguments remain unprotected
after we apply the forward-edge policy of τ CFI, we determined the number
of parameter overestimations and compared it with the ground truth obtained
during an LLVM compiler pass. Next, we used some heuristics to determine how
many ML-G and REC-G callsites exist in the C++ server applications. Finally,
we compared these results with the one obtained by TypeArmor.
Program
Overestimation
Node.js (ML-G)
MySQL (ML-G) 192 184
#cs 0 +1 +2 +3 +4 +5
Table 3. Parameter overestimation
for the ML-G and REC-G gadgets.
Table 3 presents the results obtained
after counting the number of perfectly esti-
mated and overestimated protected ML-G
and REC-G gadgets. As it can be observed,
τ CFI obtained a 96% (184 out of 192) accu-
racy of perfectly protected ML-G callsites
for MySQL, while TypeArmor obtained a
94% accuracy for the same program. Fur-
ther, τ CFI obtained a 97% (131 out of
134) accuracy for Node.js, while TypeAr-
mor obtained 95% accuracy on the same
program. Further, for the REC-G case, τ CFI obtained an 94% (273 out of 289)
exact-parameter accuracy for MySQL, while TypeArmor had 86%. For Node.js,
τ CFI obtained an accuracy of 95% (69 out of 72), while TypeArmor had 96%.
Overall τ CFI’s forward-edge policy obtained a perfect accuracy of 95%, while
TypeArmor obtained 92%. While this is not a large diﬀerence, we want to point
out that the remaining overestimated parameters represent only 5% and thus do
not leave much wiggle room for the attacker.
MySql (REC-G) 289 273 10 2
Node.js (REC-G) 72 69
geomean
geomean
134 131
160 155
144 137
0
1
1
1
0
1
0
0
1
3
1
1
1
1
1
2 0
4 1
3
0
1
3 1
1 0
1 1
5.4 Comparison with the Shadow-Stack
The shadow stack implementation of Abadi et al. [9] provides a strong secu-
rity protection [11] w.r.t. backward-edge protection. However, it: (1) has a high
runtime overhead (≥21%), (2) is not open source, (3) uses a proprietary binary
analysis framework (i.e., Vulcan), (4) loses precision due to equivalent class
merging. Hence, we propose an alternative backward-edge protection solution.
In order to show the precision of τ CFI’s backward-edge protection, we provide
the average number of legitimate return addresses for return instructions and
compare it to the total number of available addresses without any protection.
438
P. Muntean et al.
Program Total Total Total
%RATs/RA
#RA #RATs #RATs/RA prog. binary
0.014%
0.011%
0.012%
return addresses
Table 4. Backward-edge policy statistics.
MySQL 5,896.0 3,792.0 0.6
Node.js 7,230.0 3,864.0 0.53
geomean 6,529.0 3,827.0 0.58
Table 4 presents the statistics
the backward-edge policy
w.r.t.
legitimate
return targets. More
speciﬁcally, in Table 4, we use the
following abbreviations: total num-
ber of
(Total
#RA), total (median) number of
return address targets (Total #RATs), total (median) number of return address
targets per return instruction (Total. # RATs/RA), percentage of legitimate
return address targets per return addresses w.r.t. the total number of addresses
in the program binary (% RATs/RA w.r.t. program binary). By applying τ CFI’s
backward-edge policy, we obtain a reduction of 0.43 (1 − 0.58) ratio (geomean)
of the total number of return address targets per return address over the total
number of return addresses. This means that only 43% of the total number of
return addresses are actual targets for the function returns. The results indicate
a percentage of 0.012% (geomean) of the total addresses in the program binaries
are legitimate targets for the function returns. This means that our policy can
eliminate 99.98% (100% - 0.012%) of the addresses, which an attacker can use
for his attack inside the program binary. To put it diﬀerently, only 0.012% of the
addresses inside the binary can be used as return addresses by the attacker. Fur-
ther, we assume that the attacker cannot easily determine which addresses are
still available for any given program binary, which is stripped from debug infor-
mation. Note that each function return (callee) is allowed to return in geomean
to around 111 legitimate addresses (MySQL 519 and NodeJS 939) in all ana-
lyzed programs. Finally, we assume that it is hard for the attacker to ﬁnd out
the exact set of legitimate addresses per return site once the policy was applied.
Fig. 3. CDF for the PostgreSQL program.
τ CFI: Type-Assisted Control Flow Integrity for x86-64 Binaries
439
5.5 Security Analysis
Figure 3 depicts the cumulative distribution function (CDF) for the PostgreSQL
program compiled with the Clang -O2 ﬂag. We selected this program randomly
from our test programs. The CDF depicts the relation between the ratio of
indirect callsites and the ratio of calltargets, for the type and the count policies.
While the CDFs for the count policies have only a few changes, the amount of
changes for the CDFs of the type policies is vastly higher. The reason for this
is fairly straightforward: the number of buckets (i.e., the number of equivalence
classes) that are used to classify the callsites and calltargets is simply higher for
the type policies. Finally, note that the results depend on the internal structure
of the particular program and may for this reason vary for other programs.
5.6 Mitigation of Advanced CRAs
Exploit
Stopped Remark
COOP ML-G [3]
Chrome
IE 32 bit
IE 1 64-bit
IE 2 64-bit
Firefox
checking
COOP ML-REC [4]
Out of scope
×
(cid:2) (FP) Arg. count mismatch
(cid:2) (FP) Arg. count mismatch
(cid:2) (FP) Arg. count mismatch
Table 5. Stopped CRAs, forward-edge policy
(FP) & backward-edge policy (BP).
Table 5 presents several attacks
that can be successfully stopped
by τ CFI by deploying only the
forward-edge or the backward-
edge policy. For
if
the COOP attack can be pre-
vented, we instrumented the Fire-
fox library (libxul.so), which
was used to perform the origi-