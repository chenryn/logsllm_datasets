not focused on rule correctness.
Poirot ﬁnds vulnerabilities that occur due to abstraction
discrepancies [33]. The authors apply Poirot to IFTTT and ﬁnd
a CSRF attack. In contrast, we assume that the trigger-action
platform is compromised, and design a decentralized platform
that ensures that an attacker cannot arbitrarily invoke actions.
Instead, an attacker can only invoke actions if they can prove
trigger occurrence.
Decentralized Trust Management. Blaze, Feigenbaum, and
Lacy discussed PolicyMaker [20], an approach that exhibits
locality of control in managing trust relationships. The DTAP
protocol supports a similar decentralized veriﬁcation of trigger-
action rules. Furthermore, our notion of an OAuth token
associated with information that constrains its use, and the
notion of signed trigger blobs is inspired by the PolicyMaker
approach of binding keys to predicates that determine the
actions for which those keys are trusted.
Kerberos TGT. The notion of XTokens generating recipe-
speciﬁc tokens bears similarity to Kerberos single sign-on
protocol where “ticket granting tickets” are used to acquire
“service tickets” to prove the user’s identity to other services
without prompting the user. Kerberos protocol, however, relies
on a trusted server to hold TGT tokens and is typically used
in scenarios where the user, trusted server, and connecting
services are all within one umbrella corporation.
OAuth Security Analyses. Since the Open standard for
Authorization (OAuth) debuted in 2007 [31], a number of
studies discovered ﬂaws in the protocol and the way the protocol
was implemented in web sites [25], [12], [27], [28], [40], [41],
[44], [48], [49], [50]. Nonetheless, the OAuth protocol is still
14
popular and it is now commonly used in mobile applications
as well. Since the protocol was initially designed for web
sites, some of the important details of the protocol was up to
developers’ interpretation when adapting OAuth to a mobile
application. Recent work scrutinized implementations of OAuth
in many Android mobile applications [21], [47], [42], showing
that the majority of deployments were vulnerable [21], [47].
Our work is an addition to this growing list of work
discovering vulnerabilities associated with deploying the OAuth
protocol. However, our purpose in studying OAuth issues
for trigger-action platforms is to determine how an incorrect
deployment affects the security properties of trigger-action
platforms. As discussed, our conclusion is similar to that of
prior work—if the OAuth tokens are leaked, attackers are free
to use them at will. In the context of trigger-action platforms,
this means that tokens guarding access to digital and physical
resources for millions of users are at risk of being stolen and
misused.
Fett et al. conducted a formal security analysis of the
OAuth 2.0 standard, and in the process, discovered new
vulnerabilities [26]. They also propose ﬁxes and prove the
security of the protocol in an expressive web model. These
contributions are orthogonal to ours and our work will beneﬁt
from their ﬁxes to the OAuth protocol.
Cloud Platform Compromise. Beside vulnerabilities in OAuth
implementation, other attacks on trigger-action platforms may
also expose user data to attackers. Massive data leaks are com-
monplace. Equifax [2], Target [16], and US voters database [1]
are some of the most recent examples of such high proﬁle
leaks. Our work introduces the ﬁrst decentralized trigger-action
platform design with the security property of only allowing
the attacker who compromises the platform to execute speciﬁc
user rules.
IoT Security. Fernandes et al. analyzed the security of Smart-
Things and conducted attacks using stolen OAuth tokens [23].
This underscores the need to secure IoT platforms that use
OAuth tokens. We also introduce extensions to the OAuth
to support rule-speciﬁc tokens. Fernandes et al.
protocol
also introduce ﬂow tracking properties for IoT apps using
FlowFence [24] focusing on conﬁdentiality in a centralized
setting. Our work focuses on action integrity in a decentralized
setting.
IX. CONCLUSION
Trigger-Action platforms stitch together various online
services to achieve useful automation. These platforms work by
gaining privilege to access user data and devices in the form
of OAuth tokens. However, the logically monolithic designs
of current trigger-action platforms lead to a long-range large-
scale security risk—if the platform is compromised, attackers
can leak OAuth tokens for all the users of the platform, and
then misuse those tokens to cause damage. Furthermore, with
a case study of the IFTTT platform, we discovered that the
OAuth tokens are overprivileged, allowing an attacker to cause
even further damage. To systematically tackle this security
risk, we introduced Decentralized Action Integrity, a security
mechanism that provides the guarantee that even if the OAuth
tokens of a trigger-action platform are stolen, the attacker
cannot misuse the tokens. Instead, attackers can only invoke
action services if they can prove that the triggering condition
was true for a given rule. We designed and implemented
Decentralized Trigger-Action Platform (DTAP), the ﬁrst trigger-
action platform that supports Decentralized Action Integrity.
DTAP takes a decentralized approach to trigger-action platform
design instead of the prevailing logically monolithic design
that is currently in use. Our design introduces the notion of an
XToken coupled with rule-speciﬁc tokens and a cryptographic
extension to the OAuth 2.0 protocol. We implemented this
design as a Python library that can be easily integrated into
existing services (one-line addition). Performance tests indicate
modest overhead (15ms latency increase; 2.5% throughput
drop).
ACKNOWLEDGEMENTS
We thank the anonymous reviewers and our shepherd, Limin
Jia, for their insightful feedback on our work. We also thank
Tadayoshi Kohno for providing valuable feedback. This material
is based in part upon work supported by the National Science
Foundation under Grant No. 1646392 and 1740897, by the UW
Tech Policy Lab, and by the MacArthur Foundation.
REFERENCES
[1] 191 Million US Voter Registration Records Leaked In Mys-
tery Database, http://www.forbes.com/sites/thomasbrewster/2015/12/28/
us-voter-database-leak/.
[2] A Brief History of Equifax Security Fails, https://www.forbes.
com/sites/thomasbrewster/2017/09/08/equifax-data-breach-history/
#3829d1f4677c.
[3] ApacheBench, http://httpd.apache.org/docs/2.4/programs/ab.html.
[4] Apiant, https://apiant.com/.
[5] Automate Processes + Tasks— Microsoft Flow, https://ﬂow.microsoft.
com/en-us/.
[6] automate.io, https://automate.io/ifttt-alternative.
[7] CloudWork, https://cloudwork.com/.
[8] Data
Breaches
Exposed
707
Records
http://news.softpedia.com/news/
Million
68
https://www.wired.com/2016/08/
Hack
2015,
During
data-breaches-exposed-707-million-records-during-2015-501116.
shtml.
[9] Hack
4-Year-Old
Dropbox
Exposed
Brief:
Data,
Peoples
Million
hack-brief-four-year-old-dropbox-hack-exposed-68-million-peoples-data/.
If This Then That, https://ifttt.com/.
IFTTT- Learn More, https://ifttt.com/wtf.
[10]
[11]
[12] OAuth Security Advisory: 2009.1, https://oauth.net/advisories/2009-1/.
[13] oauthlib 2.0.0, https://pypi.python.org/pypi/oauthlib.
[14] ProVerif, http://prosecco.gforge.inria.fr/personal/bblanche/proverif/.
[15] Stringify, https://www.stringify.com/.
[16] Target Expects 148 Million Loss from Data Breach, http://time.com/
3086359/target-data-breach-loss/.
[17] Wireshark, https://www.wireshark.org/.
[18] Zapier, https://zapier.com/.
[19] Apple Inc., “iOS Security - iOS 9.3 or later,” 2016.
[20] M. Blaze, J. Feigenbaum, and J. Lacy, “Decentralized trust management,”
in Proceedings of the 1996 IEEE Symposium on Security and Privacy, ser.
SP ’96. Washington, DC, USA: IEEE Computer Society, 1996, pp. 164–.
[Online]. Available: http://dl.acm.org/citation.cfm?id=525080.884248
[21] E. Y. Chen, Y. Pei, S. Chen, Y. Tian, R. Kotcher, and P. Tague, “Oauth
demystiﬁed for mobile application developers,” in Proceedings of the
2014 ACM SIGSAC Conference on Computer and Communications
Security, ser. CCS ’14. New York, NY, USA: ACM, 2014, pp. 892–903.
[Online]. Available: http://doi.acm.org/10.1145/2660267.2660323
15
[22] G. Cooking, If your smoke alarm detects an emergency, then turn off
your oven, http://tinyurl.com/gv4q3hq.
[23] E. Fernandes, J. Jung, and A. Prakash, “Security Analysis of Emerging
Smart Home Applications,” in IEEE Symposium on Security and Privacy
(S&P), 2016.
[24] E. Fernandes, J. Paupore, A. Rahmati, D. Simionato, M. Conti, and
A. Prakash, “FlowFence: Practical Data Protection for Emerging IoT
Application Frameworks,” in Proceedings of the 25th USENIX Security
Symposium, 2016.
[25] D. Fett, R. K¨usters, and G. Schmitz, “A Comprehensive Formal Security
Analysis of OAuth 2.0,” in Proceedings of the 2016 ACM SIGSAC
Conference on Computer and Communications Security, ser. CCS ’16,
2016.
[26] D. Fett, R. K¨usters, and G. Schmitz, “A comprehensive formal security
analysis of oauth 2.0,” in Proceedings of the 2016 ACM SIGSAC
Conference on Computer and Communications Security, ser. CCS ’16.
New York, NY, USA: ACM, 2016, pp. 1204–1215. [Online]. Available:
http://doi.acm.org/10.1145/2976749.2978385
[27] E. Homakov, How we
bugs,
Chrome
and
hacking-facebook-with-oauth2-and-chrome.html.
hacked
Facebook with OAuth2
http://homakov.blogspot.ca/2013/02/
in modern operating systems,” in Proceedings of
the 2012 IEEE
Symposium on Security and Privacy, ser. SP ’12. Washington, DC,
USA: IEEE Computer Society, 2012, pp. 224–238. [Online]. Available:
http://dx.doi.org/10.1109/SP.2012.24
J. H. Saltzer, D. P. Reed, and D. D. Clark, “End-to-end arguments
in system design,” ACM Trans. Comput. Syst., vol. 2, no. 4, pp.
277–288, Nov. 1984. [Online]. Available: http://doi.acm.org/10.1145/
357401.357402
[39]
[40] B. Security, How I Hacked Any Facebook Account...again!, http://www.
breaksec.com/?p=5753.
[41] ——, How I Hacked Facebook OAuth to Get Full Permission on
Any Facebook Account (Without App “Allow” Interaction), http://www.
breaksec.com/?p=5734.
[43]
[42] M. Shehab and F. Mohsen, “Towards Enhancing the Security of OAuth
Implementations in Smart Phones,” in International Conference on
Mobile Services, 2014.
J. Sherry, C. Lan, R. A. Popa, and S. Ratnasamy, “Blindbox: Deep
packet inspection over encrypted trafﬁc,” in Proceedings of the 2015
ACM Conference on Special Interest Group on Data Communication,
ser. SIGCOMM ’15. New York, NY, USA: ACM, 2015, pp. 213–226.
[Online]. Available: http://doi.acm.org/10.1145/2785956.2787502
[44] S.-T. Sun and K. Beznosov, “The devil is in the (implementation) details:
An empirical analysis of OAuth SSO systems,” in CCS, 2012.
[45] M. Surbatovich, J. Aljuraidan, L. Bauer, A. Das, and L. Jia,
“Some recipes can do more than spoil your appetite: Analyzing the
security and privacy risks of ifttt recipes,” in Proceedings of the
26th International Conference on World Wide Web, ser. WWW ’17.
Republic and Canton of Geneva, Switzerland: International World Wide
Web Conferences Steering Committee, 2017, pp. 1501–1510. [Online].
Available: https://doi.org/10.1145/3038912.3052709
[46] B. Ur, M. P. Y. Ho, S. Brawner, J. Lee, S. Mennicken, N. Picard,
D. Schulze, and M. L. Littman, “Trigger-Action Programming in the
Wild: An Analysis of 200,000 IFTTT Recipes,” in CHI, 2016.
[47] H. Wang, Y. Zhang, J. Li, H. Liu, W. Yang, B. Li, and D. Gu, “Vulner-
ability Assessment of OAuth Implementations in Android Applications,”
in ACSAC, 2015.
[48] R. Wang, S. Chen, and X. Wang, “Signing Me onto Your Accounts
through Facebook and Google: A Trafﬁc-Guided Security Study of
Commercially Deployed Single-Sign-On Web Services,” in IEEE
Symposium on Security and Privacy (S&P), 2012.
[49] R. Wang, X. Wang, L. Xing, and S. Chen, “Unauthorized Origin Crossing
on Mobile Platforms: Threats and Mitigation,” in CCS, 2013.
[50] R. Wang, Y. Zhou, S. Chen, S. Qadeer, D. Evans, and Y. Gurevich,
“Explicating SDKs: Uncovering assumptions underlying secure authenti-
cation and authorization,” in USENIX Security, 2014.
[51] R. Yang, W. C. Lau, and T. Liu, “Signing into one billion mobile app
accounts effortlessly with oauth2.0,” in BlackHat, 2016.
[28] ——, OAuth1, OAuth2, OAuth...?, http://homakov.blogspot.ca/2013/03/
[29]
[30]
[31]
oauth1-oauth2-oauth.html.
IFTTT, IFTTT Platform Size Metrics, https://platform.ifttt.com/pricing.
IFTTT, https://ifttt.com/.
Internet Engineering Task Force, RFC5849 - The OAuth 1.0 Protocol,
2010.
[32] ——, RFC6749 - The OAuth 2.0 Authorization Framework, 2012.
[33] E. Kang, A. Milicevic, and D. Jackson, “Multi-representational security
analysis,” in Proceedings of the 2016 ACM International Symposium on
the Foundations of Software Engineering, ser. FSE ’16, 2016.
[34] Hardware-backed
keystore/.
Keystore,
https://source.android.com/security/
[35] R. P. Kim Laine, Hao Chen, “Simple Encrypted Arithmetic
Library - SEAL (v2.1),” Tech. Rep., September 2016.
[On-
line]. Available: https://www.microsoft.com/en-us/research/publication/
simple-encrypted-arithmetic-library-seal-v2-1/
[36] M. Mimoso,
1
million
phishing
Gmail
attack,
users
impacted
by
https://threatpost.com/
Docs
Google
1-million-gmail-users-impacted-by-google-docs-phishing-attack/
125436/.
[37] C. Nandi and M. D. Ernst, “Automatic trigger generation for rule-based
smart homes,” in PLAS 2016: ACM SIGPLAN Workshop on Programming
Languages and Analysis for Security, Vienna, Austria, October 24, 2016.
[38] F. Roesner, T. Kohno, A. Moshchuk, B. Parno, H. J. Wang, and
C. Cowan, “User-driven access control: Rethinking permission granting
16