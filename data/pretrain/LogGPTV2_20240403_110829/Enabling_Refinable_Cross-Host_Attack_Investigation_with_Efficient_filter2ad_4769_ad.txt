13K
730K
Prov Graph
Edge
Node
8.3K
109K
Pruned Graph
Edge
Node
557
39
1,661
55
22
418
5.3K
89K
5.2K
87K
2.8K
34K
2.9K
24K
33
29
27
80
72
89
97
71
63
55
74
182
711
683
490
2,251
1,997
2,379
2,270
1,145
863
782
240K
490K
DF Overlay
Tags
28,960
32,660
23,193
6,799
8,257
3,197
510,466
530,004
9,224
7,700
432,845
435,716
421,106
759,302
3,088,102
C-Tags
10,700
18,032
7,317
882
882
882
420,121
420,121
1,766
1,766
420,755
420,700
420,700
630,228
2,532,920
Accuracy
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
Table 1: Statistics in terms of the effectiveness and performance of cross-host attack investigation. Prov Graph are the original
graph containing the system-wide executions of every process. Pruned Graph are the subgraph where nodes and edges that are
unrelated to the attack are pruned out; DF Overlay are results from the RTAG tagging system; Tags gives the number of generated
tag entries; C-Tags gives the number of tags of which the key and value(s) are Cross-host (i.e., from different hosts); Accuracy
shows the percentage of how many data flows are matched with the ground truth.
flow paths between the results file on the client side
and the objects file on the server side. In Table 1,
we show the statistics of using RTAG in every step. Par-
ticularly, we show the number of tags RTAG creates at
the tag overlay. In the forward query, RTAG generates
28,960 tag entries totally, 10,700 of which are cross-host
ones meaning the tag key and value are from different
hosts. We compare the query result with ground truth of
the attack and RTAG achieves 100% accuracy in every
query. We also evaluate the performance improvement
for DIFT, summarized in Table 2. In general, thanks to
the parallelizing of DIFT tasks, RTAG reduces the time
cost by more than 70% in most cases.
8.1.2 Web-based Attacks
We also use a set of web-based attacks to evaluate the ef-
fectiveness of RTAG in tracking the data flow between the
server (e.g., a web server Apache), and the client (e.g., a
browser Firefox). The web app facilitates the checking
and updating of employees’ personal financial informa-
tion. The employees typically manage their bank account
number and routing number via the web app. The attacks
include two SQL injections, one cross-site request forgery
(CSRF), and one cross-site scripting (XSS). We set up
RTAG on both server and client. We run an Apache
server with SQLite as its database. At the client, we
load exploit pages with either a data transfer tool Curl
or the Firefox browser. For each attack, we perform
three types of queries and compare the query results with
the ground truth.
Items
DIFT Perf
Attack
GitPwnd
Query
FW
BW
PP
Tasks Mem(MB)
497
912
322
10
27
8
Time(s)
95
113
79
SQLi-1
SQLi-2
CSRF
XSS
P2P
FW
BW
PP
FW
BW
FW
BW
FW
BW
PP
BW
FW
14
11
9
41
39
33
49
26
28
19
12
12
2,513
2,336
1,997
7,655
6,804
6,537
7,122
4,850
5,391
4,107
6,371
9,855
342
339
309
695
677
499
504
687
705
677
201
236
TReduc%
87%
86%
72%
70%
64%
76%
83%
82%
78%
84%
77%
77%
72%
92%
91%
Table 2: DIFT performance using RTAG. Tasks stands for the
number of processes that are replayed with DIFT; Memory
gives the sum of virtual memory cost for each task; Time gives
the time duration RTAG spends to perform the DIFT tasks in
parallel; TReduc% shows the reduction rate from the time of
performing the same DIFT tasks serially.
SQL injections. The exploit takes advantage of a vulner-
ability at the server’s SQL parsing filter to execute illegal
query statements that steal or tamper the server database.
The first attack (SQLi-1) injects an entry of user profile to
the database. The added profile is further used by another
USENIX Association
27th USENIX Security Symposium    1715
financial program to generate payroll records. The ana-
lyst performs a forward query from the loaded html file
with the exploit, and RTAG returns the data flows from
the file at the client to the data in the payroll records. The
second attack (SQLi-2) steals data entries in the database
from the user and exploits a vulnerability in Firefox to
dump the entries to a file. With a backward query from the
dump file at the user side, RTAG pinpoints the segments
of the database file that has been exfiltrated.
Cross-site request forgery. The exploit uses a vulner-
ability of the server that miscalculates the CSRF chal-
lenge response to submit a form impersonating the user.
The form updates the profile contents (e.g., account num-
ber), and later the tampered profile is accessed by several
other programs that process the user’s payroll information.
RTAG helps determine the data flow between the user’s
loaded file and one of the payroll record that is considered
to have been tampered.
Cross-site scripting.
The reflection-based cross-
scripting relies on dependency of an html element to user
input to append a script that reads the sensitive data from
the DOM tree of a page, packs some of the data, and sends
an email to the attacker’s external host. After the investi-
gation determines the attacker’s host to be malicious, it
makes a backward query from that host and finds the data
exfiltration from the user’s loaded page, as well as from
a certain offset of the database storage file at the server.
Notably, the resulting overlay shows the route of some
tags tracing back first to the server side (i.e., Apache),
then further back to the client side browser and the ex-
ploit html file, which recovers the reflection nature of the
attack.
8.1.4 File Spreading in Peer-to-Peer Network
We also run RTAG to track the data flows in a malicious-
file-spreading incident on top of a P2P network, which
is regarded an increasing threat in the decentralized file
sharing, according to a report by BitSight Insight [5].
This allows us to demonstrate RTAG’s ability to handle a
complex cross-host data-flow analysis involving multiple
parties, which is infeasible with existing approaches. We
use Gtk-Gnutella [7](v1.1.13) to set up a P2P network
in a local network of 12 nodes with RTAG running on
them. We perform two operations. First, we have two
nodes online; one node shares a malicious audio mp4 file,
and another node searches for the file, discovers it and
downloads it. Later, we shutdown the first node and let a
third node download the file from the second node. We
performed this type of single-hop relay iteratively until
five nodes have this file. Second, we use these five nodes
as “seeds” and let the remaining nodes search, discover,
and download the file. During this process, we intention-
ally shutdown parts of the nodes to introduce “resume”
procedures. Finally, we perform a backward query from
the audio file at the last node to search for the origin of the
file, and a forward query from the first node to uncover
how the file spread across the network with fine-grained-
level data flows. RTAG returns the results with 100%
accuracy. Particularly, the result also shows the data flow
between each pair of nodes for each iteration of the file
sharing procedure. The statistics of this experiment are
summarized in Table 1.
8.2 Performance
8.2.1 DIFT Runtime Performance
8.1.3 Attacks Involving Memory Corruptions
To evaluate RTAG for the cases when the attacker exploits
memory corruptions, we additionally modified the Git-
Pwnd attack §3.1 by compiling the ssh daemon with
earlier versions containing memory-based vulnerabilities:
one integer overflow based on CVE-2001-0144 and one
buffer overflow based on CVE-2002-0640. For the integer
overflow, we patched the ssh client side code to exploit
the vulnerability [1] and remotely executed scp com-
mand at the server to copy files to the attacker’s controlled
host. For the buffer overflow, we crafted a malicious re-
sponse for the OpenSSH (v3.0) challenge-response mech-
anism and remotely executed commands [2]. We note that
memory-corruption-based attacks usually involve unde-
fined behavior of the program that violates the assumption
of many previous investigation systems using source or
binary semantics (e.g., [34, 42, 47]). However, RTAG suc-
cessfully reconstructs the program state of the overflow
for the DIFT to recover the fine-grained data flow.
We compare the memory consumption and execution time
of RTAG with previous DIFT systems. For the memory
efficiency, we evaluated two state-of-the-art DIFT en-
gines that provide multi-color symbols, Dytan [24] and
DataTracker [61]. Table 3 shows the peak memory con-
sumption of the tag map for various DIFT tasks we used
in evaluating the security application in §8.1. The peak
memory consumption is useful as it indicates the required
resource for a certain type of DIFT. Notably, all the tag
sizes for representing the DIFT symbols determined by
reachability analysis are within three bytes (i.e., up to
16,777,216 symbols), with a majority being two bytes
(i.e., up to 65,536 symbols). This means the data prun-
ing and reachability analysis effectively narrow down the
scope of the DIFT symbols and pinpoint the exact bytes
of data that causes the data confusion for DIFT to resolve.
The savings from the tag map consumption of RTAG is
between 70% and 95%. The effect of improvement on