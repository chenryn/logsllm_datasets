As we show later, white-box analysis can be used to build pro-
files of applications of interest (e.g., web servers) in the guest by
3We have been unable to confirm this is indeed true in SEV.
Session 2A: SGX-based SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand76monitoring system calls within the hypervisor. Having done so,
white-box analysis can further be used to hone in on just the right
parts in the execution of the target application and perform limited
introspection of the registers. For example, after identifying an ap-
plication as a web server, one can focus on routines responsible for
sending and receiving network traffic. For that, the steps required
to recover information in the encrypted guest include:
(1) Identifying the guest VM operating system. This can be
achieved in several ways, for example, by inspecting the us-
age of Model Specific Registers (different operating systems
tend to use different ranges of virtual memory addresses for
kernel entry points) or identifying system call sequences
(e.g.,execve(),brk() are the first calls invoked by a new
Linux process).
(2) Applying OS specific heuristics to identify targets (for exam-
ple, using the sequence: [socket(),bind(),listen()] to
identify network servers).
(3) Profiling and matching applications of interest at runtime,
e.g., using coarse-grained system call tracking.
(4) Using a combination of instruction recovery techniques and
white-box analysis to determine the best point to trigger the
inspection of critical code and recover the plaintext (e.g., the
messages received from a victim server).
Any mechanism to selectively inspect a target process (i.e., Step
4) must be done with stealth. We refer to this process as hyper-
stepping (§4.2). As a part of our exploration of the feasibility of
conducting inference attacks on SEV-enabled platforms, we inves-
tigated several approaches to trapping system calls made in the
target VM, including using the Monitor Trap Flag to exit to hypervi-
sor, using second level translation (e.g., Intel’s EPT and AMD’s RVI
hardware assisted paging (HAP) page faults), disabling the system
call instruction, and using hardware debug registers.
Using the Monitor Trap Flag is not an option as it is unavailable
in the AMD architecture. Although HAP is an option, we discarded
it because we wanted to limit the amount of exits to the hypervisor
associated with handling of a system call. Additionally, the use of
the invalid opcode exception implies the ability to read the opcode of
the failing instruction, but that is unavailable when SEV is enabled.
Thus, we settled on using hardware debug registers.
Since OS and application fingerprinting using system calls has
been the subject of much prior work (e.g., [16, 42, 54]), we focus
the remaining discussion on steps 3 and 4.
4.1 Efficiently tracking system calls
To track guest OS system calls from within the hypervisor, one
needs to inspect the guest state at the entry and exit points of
the system call. Inspection is needed not only to determine which
system call is being issued and its parameters, but also the result
of the system call. Modern operating systems use fast system call
instructions (SYSENTER for 32 bit and SYSCALL for 64 bit OSes) to
transition to the kernel and execute the system calls. The virtual
address of the kernel entry point is specified in a special Model
Specific Register (MSR), and the virtual address of the system call
return address is stored in the RCX register during the SYSCALL
instruction invocation. Thus, using two hardware debug registers
one can effectively trace guest OS system calls. Note that in contem-
porary systems, the hypervisor ultimately controls the access to the
Figure 1: C source with its corresponding assembly code snippet.
debug registers, and so if the guest OS attempts to inspect or use
them, the hypervisor can still retain control and evade detection.
4.2 Hyper-stepping
Once the target has been identified using system call tracking, the
next task is to observe and control the execution of the critical code.
In our case, the code of the critical section is executed an instruction
at a time — essentially, the hypervisor acts as a debugger single step-
ping the execution in the guest VM. Since the memory of the guest
is encrypted, the hypervisor single stepping execution in the guest
is not capable of reading the process memory and disassembling the
executed instruction. The only available information is the outcome
of the execution as observed in the general purpose registers. Yet,
that information can significantly aid our understanding of the exe-
cuted instruction. Equally important is the fact that the hypervisor
is capable of modifying the guest’s state by carefully manipulating
the general purpose registers. In particular, modifying the contents
of registers (§5) enables sophisticated attacks against the guest VM.
The success of our attacks hinges on our ability to correctly
identify which instructions were executed in the guest. In certain
cases, we require additional auxiliary information, in particular,
knowledge of what specific registers (e.g., EDI vs ECX) were accessed
and the type (read or write) of memory access. Our approach for
gathering that insight is presented next.
4.2.1 Unmasking instructions “in the dark”. The high-level idea
centers on the observation that by inspecting the state of the CPU
registers one can try to infer the executed instructions by mapping
the outcomes seen in the registers to known instruction semantics.
For instance, consider the simple C program and the trace of its
execution shown in Figure 1.
For presentation purposes, we chose a simplistic program that
adds a constant value to an integer and returns the result. The
depicted execution trace omits the setup and the tear down of the
program. This trace represents the instructions executed by the
CPU, not the instructions in the program image (i.e., in memory
or on disk). For the discussion that follows, we start our analysis
with the call instruction in the caller (reference line ➀) in Figure 1.
The depiction in Figure 2 illustrates how one can reconstruct the
execution given the luxury of observing seven steps. We denote an
2Caller functionintmain() {inta = 3;intc = expand(a);}Calleefunctionintexpand(inti) {return i+1337;}sub  esp, 8mov[ebp-4], 3moveax, [ebp-4]push eaxcall 0x1030push ebpmovebp, espmoveax, [ebp+8]add  eax, 0x539pop  ebpret134567Session 2A: SGX-based SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand77observation window as a pair of two directly connected register
sets. Each numbered step represents an execution of an instruction,
and the register sets represent the CPU state.
of a load/store/arithmetic/logical type of instruction where both
operands refer to registers. The observation of the unchanged Flag
register suggests load/store type of instruction. In step ➄, the in-
struction pointer advances by five bytes, the accumulator register
EAX has a new value 0x53c, and the Parity Bit of the Flag Register
is set. Given the computed length and the instruction outcome, we
can surmise that this is due to loading a constant value. Change of
the Parity Bit indicates an arithmetic operation. In step ➅, a single
byte instruction that decreases the value of the Stack Pointer and
the change of the value of the Frame Pointer uniquely identify the
instruction as a pop of the Frame Pointer register. This confirms the
identification of the instruction in step ➁. In step ➆ the decrease
of the instruction pointer indicates a control flow instruction. The
increase of the stack pointer means that this is a ret instruction.
In that example, we can uniquely identify five out of seven in-
structions. We also narrowed down the set of possible instructions
executed in steps ➃ and ➄. Assuming that the program follows stan-
dard C calling conventions, identification of the instruction in step
➃ is easy; moving the function argument from the stack to register
EAX in this case does not change the value of the register, because
in the caller the function argument was first placed in the register
EAX, then pushed onto the stack. Unfortunately, without additional
information, an exact identification of the instruction executed in
step ➄ is not possible because several instructions (e.g., add, sub,
or, xor) are all likely based on the observed trace.
4.2.2 Memory access identification. In the case of instructions that
produce no observable change of the registers, one needs additional
insights regarding the characteristics of the instruction. For that,
the hypervisor can attempt to distinguish the types of memory
access triggered by the guest. That can be done by intercepting
the page fault exception and forcing the guest to re-execute the
instruction with specific general purpose register values aimed to
trigger a memory access violation. Recall that page fault handlers
provide both the virtual address where the fault occurred as well as
the error code indicating the type of access. Thus, forcing the guest
to re-execute the instruction provides an opportunity to determine
the computation of the effective address used by the instruction,
that is, which registers are used in memory addressing.
The effective address is computed as Effective Address = Base
+ (Index*Scale) + Displacement, where Base and Index are values
stored in any general purpose register, Scale is a value of 1,2,4 or 8
and Displacement is an 8-bit, 16-bit, or 32-bit value encoded as part
of the instruction. For example, the instruction mov [edi+ecx] +
0x10, eax will write to the memory at the location edi+ecx+0x10.
To learn the effective address, we assume that the zero page
is not allocated and can be used to trigger page faults. Then, to
identify whether the instruction is accessing memory, we follow
the approach in Algorithm 1. Of importance are the steps taken in
lines 7-12 where the hypervisor traps the page fault, inspects the
fault code and infers whether the unknown instruction attempted
to read or write memory.
To determine the specific registers and the displacement value
used to address memory we solve a system of linear equations for
two unknowns using unique prime values (acquired in lines 6 and 9).
The added capability of memory access identification improves our
ability to unveil instructions by over 30%.
Figure 2: Example showing the inferred instructions at each stage.
In step ➀ in Figure 2, the advancement of the instruction pointer
(register EIP) by more than 15 bytes indicates the presence of a
control flow instruction. Given the decrease of the Stack Pointer
(register ESP) we can identify this instruction as a call instruction.
In step ➁, the instruction pointer increases by one and the value
of Stack Pointer is decreased by 4. This allows us to identify the
instruction as a push. However, we cannot determine which register
has been pushed onto the stack just yet. In step ➂, the EIP increment
indicates an execution of an instruction that is two bytes long.
Inspection of the values of registers reveals that after the instruction
is executed, the stack frame and stack pointer have the same value.
This implies an assignment of the value from the stack pointer
register to stack frame (register EBP) — i.e., a mov instruction. Hence,
we can assume that the register pushed onto the stack in step ➁
was the Frame Pointer.
Notice that in step ➃, the only observed change is the advance-
ment of the instruction pointer by three. This behavior is indicative
RegistersEBX: 0x0ECX: 0x0EDX: 0x0ESI: 0x0ESP: 0xF818EDI: 0x0EBP: 0xF824EFLAGS: 0x202EIP: 0x1011(cid:1)(cid:2)(cid:3)Instruction pointerchange of 0x19Decrease of StackPointerSingle byte instruction. Decrease of Stack PointerTwo byte longinstruction.New value of Frame Pointer equals Stack Pointer Initial statecall 0x1030call 0x1030push REGcall 0x1030push ebpmov ebp, espInferred instructions:RegistersEAX: 0x0EBX: 0x0ECX: 0x0EDX: 0x0ESI: 0x0ESP: 0xF814EDI: 0x0EBP: 0xF824EFLAGS: 0x202EIP: 0x1030EAX: 0x0RegistersEBX: 0x0ECX: 0x0EDX: 0x0ESI: 0x0ESP: 0xF810EDI: 0x0EBP: 0xF824EFLAGS: 0x202EIP: 0x1031EAX: 0x0RegistersEBX: 0x0ECX: 0x0EDX: 0x0ESI: 0x0ESP: 0xF810EDI: 0x0EBP: 0xF810EFLAGS: 0x202EIP: 0x1033EAX: 0x0(cid:2)(cid:3)(cid:4)(cid:1)Three byte longinstruction,  no change of register valueFive byte longinstruction,  New value of EAX, Parity ﬂag setOne byte longinstruction, changeof Stack and FramePointersInstruction pointer decrease, increase of Stack PointerInferred instructions:call 0x1030push ebpmov ebp, esp3-byte-unknowncall 0x1030push ebpmov ebp, esp3-byte-unknown5-byte arithmetic/logic using a four byte constantcall 0x1030push ebpmov ebp, esp3-byte-unknown5-byte arithmetic/logicusing a four byteconstantpop ebpcall 0x1030push ebpmov ebp, esp3-byte-unknown5-byte arithmetic/logicusing a four byteconstantpop ebpretEBX: 0x0ECX: 0x0EDX: 0x0ESI: 0x0ESP: 0xF810EDI: 0x0EBP: 0xF810EFLAGS: 0x202EIP: 0x1036EAX: 0x0RegistersEBX: 0x0ECX: 0x0EDX: 0x0ESI: 0x0ESP: 0xF810EDI: 0x0EBP: 0xF810EFLAGS: 0x206EIP: 0x103BEAX: 0x53CRegistersEBX: 0x0ECX: 0x0EDX: 0x0ESI: 0x0ESP: 0xF814EDI: 0x0EBP: 0xF824EFLAGS: 0x206EIP: 0x103CEAX: 0x53CRegistersEBX: 0x0ECX: 0x0EDX: 0x0ESI: 0x0ESP: 0xF817EDI: 0x0EBP: 0xF824EFLAGS: 0x206EIP: 0x1016EAX: 0x53CSession 2A: SGX-based SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand78Algorithm 1 Identify memory access type (i.e., read or write) and
the specific register being accessed
1: Save the current execution state
2: Enable guest page fault interception
3: Set registers to unique prime values
4: Allow guest to re-execute the instruction
5: if Fault Type == Page Fault then
Save accessed memory address
6:
Set registers to unique prime values
7:
Allow guest to re-execute the instruction
8:
9:
Save accessed memory address
10: else
11:
12: end if
13: Restore the saved execution state
No memory access
4.3 Building application fingerprints
In our approach, we use data collected via Instruction Based Sam-
pling (IBS) [13] to identify the applications running within an en-
crypted VM. Instruction Based Sampling was introduced to provide
detailed application performance information. IBS provides sam-
pling information, collected once every t instructions. After an
instruction is sampled, the information is stored in a set of model
specific registers and a non-maskable interrupt is raised to indicate
the availability of the instruction data. IBS offers two modes of
operation: tracking instruction fetches (coined fetch sampling) and
instruction execution performance (coined op sampling). Samples
collected via fetch sampling detail performance of an instruction
fetch whereas samples collected in the op sampling mode provide
information on the retired instructions including the virtual address
of the retired instruction, the type of instruction (e.g., branch, load,
store), the virtual and physical addresses of accessed memory, the
virtual address of the branch target, the type of the branch and the
result of branch prediction. Note that we use the information on
retired instructions because the data collected in fetch sampling
mode is speculative (i.e., the samples may represent instructions
that were executed but not retired).
While op sampling may seem well suited for our goals, there
are several limitations with using IBS. For one, the collection of
the sample and the notification of its availability are asynchronous,
resulting in skid between the time the measurement was taken
and the time the sample is made available, thus decreasing the
maximum sampling frequency. Additionally, IBS samples have no
indicator that helps distinguish whether they originate from the
kernel or from userspace. Alas, we must find a way to pinpoint the
source of the sampled events (i.e., kernel versus userspace) in order
to isolate the process from which the sample was drawn. Later on,
we address how we overcome these hurdles. Before doing so, we
describe our approach for IBS-based application fingerprinting.
IBS-based fingerprinting. The data obtained using IBS op
4.3.1