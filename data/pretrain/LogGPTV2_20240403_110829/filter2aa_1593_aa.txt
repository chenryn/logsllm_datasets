IOActive, Inc. Copyright ©2014.  All Rights Reserved.
Weird-Machine Motivated Practical 
Page Table Shellcode & Finding 
Out What's Running on Your 
System 
Shane Macaulay
Director of Cloud Services
IOActive, Inc. Copyright ©2014.  All Rights Reserved.
The Long Road
•
Barnaby Jack, forever in our hearts and minds.
“It’s  about  the  journey  not  the  destination.”
IOActive, Inc. Copyright ©2014.  All Rights Reserved.
13 Years since ADMMutate (slide URL) 
http://1drv.ms/1xUpxL9
•
ADMmutate (last DC talk was about polymorphic 
shellcode)
•
The more things change
– The more they stay the same
•
Thought about PT shellcode with ADMMutate
•
Attack is [hard/stress/]fun!!&$&%*:P;p;P
•
Defense is hard/stress
IOActive, Inc. Copyright ©2014.  All Rights Reserved.
Abusing x for fun & profit!
•
It’s  usually the  QB  that  get’s  the  headlines,  offensive  
bias in hacker scene!
•
Defense  is  grind’s  it  out  for  little  glory.
– Let’s  energize  the  “D”  here,  have  some  fun!!
•
A Defensive exploit
– Ultimately today were killing process hiding rootkits cross 
64bit OS/Platforms TODAY! 
– DKOM IS DEAD! Process hiding is DEAD!
IOActive, Inc. Copyright ©2014.  All Rights Reserved.
Also 13 Years ago
•
What else was going on back then?
– x86 assembler in Bash
“cLIeNUX”
“shasm is an assembler written in GNU Bash Version 2, which may work in 
other recent unix-style "shell" command interpreters.”
IOActive, Inc. Copyright ©2014.  All Rights Reserved.
Ideals
•
As best as possible, figure out all running code
– Code/hacks/weird machine's included/considered
– When have we done enough?
•
We focus on establishing our understanding through 
real world targets: Hypervisor monitored guests. 
•
Combine protection pillars; structure analysis, physical 
memory traversal and integrity checking.
IOActive, Inc. Copyright ©2014.  All Rights Reserved.
Practical concepts
•
Attacks: WeIrD MaChinE
– Lots of fun!
• Much esoteric/eclectic More fantastical!!!
•
Defense: Detecting *  That means everything
– Home  field  ==  USE  THE  “FORCE”  A  HYPERVISOR!
• Establishes verifiability of device state (i.e. not worried about 
platform attacks e.g. BIOS/firmware/UEFI)
• Games in fault handler do not work on snapshot, even just 
extracting physical memory can be hard
• Protection from virtualized (Dino Dai Zovi), that is 
serious/obvious impact to performance when nested.
IOActive, Inc. Copyright ©2014.  All Rights Reserved.
Practical Page Table ShellCode
Motivations
•
An attack devised to understand memory protection 
systems
–
Development necessitated comprehensive understanding of inner workings, system 
fault handling complexities and some of the lowest level (brain melting, see reference 
below) interaction of software and hardware on modern 64bit platforms.
– Until Windows 7, page tables directly executable
• NonExecutable is opt-in/non-default
– The page-fault weird machine: lessons in instruction-less 
computation
• Julian Bangert, Sergey Bratus, Rebecca Shapiro, Sean W. Smith 
from WOOT'13 Proceedings of the 7th USENIX conference on 
Offensive Technologies 
IOActive, Inc. Copyright ©2014.  All Rights Reserved.
X64 Kernel Virtual Address Space
http://www.codemachine.com/article_x64kvas.html
Start
End
Size
Description
Notes
FFFF0800`00000000
FFFFF67F`FFFFFFFF
238TB
Unused System Space
WIN9600 NOW USE & CAN 
CONTAIN +X AREAS
FFFFF680`00000000
FFFFF6FF`FFFFFFFF
512GB
PTE Space
-X used to be executable 
Win7
FFFFF700`00000000
FFFFF77F`FFFFFFFF
512GB
HyperSpace
8.1 seems to have cleaned up 
here, 9200 had 1 +X page
FFFFF780`00000000
FFFFF780`00000FFF
4K
Shared System Page
FFFFF780`00001000
FFFFF7FF`FFFFFFFF
512GB-4K
System Cache Working Set
FFFFF800`00000000
FFFFF87F`FFFFFFFF
512GB
Initial Loader Mappings
Large Page (2MB) allocations
FFFFF880`00000000
FFFFF89F`FFFFFFFF
128GB
Sys PTEs
FFFFF8a0`00000000
FFFFF8bF`FFFFFFFF
128GB
Paged Pool Area
FFFFF900`00000000
FFFFF97F`FFFFFFFF
512GB
Session Space
FFFFF980`00000000
FFFFFa70`FFFFFFFF
1TB
Dynamic Kernel VA Space
FFFFFa80`00000000
*nt!MmNonPagedPoolStart-1
6TB Max
PFN Database
*nt!MmNonPagedPoolStart
*nt!MmNonPagedPoolEnd
512GB Max
Non-Paged Pool
DEFAULT NO EXECUTE
FFFFFFFF`FFc00000
FFFFFFFF`FFFFFFFF
4MB
HAL and Loader Mappings
IOActive, Inc. Copyright ©2014.  All Rights Reserved.
Page Table ShellCode weird-machine
•
Win7- and earlier
– Can we emit intended shellcode into PTE area? 
• Call VirtualAlloc() from user space results in executable 
memory in kernel 
– Just reserving memory causes a code-write operation 
into kernel space
PXE at FFFFF6FB7DBEDF68
PPE at FFFFF6FB7DBEDF88    PDE at FFFFF6FB7DBF1008    PTE at FFFFF6FB7E201EA0
contains 0000000000187063  contains 0000000134C04863  contains 0000000100512863  contains 000000002DC3B863
pfn 187       ---DA--KWEV  pfn 134c04    ---DA--KWEV  pfn 100512    ---DA--KWEV  pfn 2dc3b     ---DA--KWEV
IOActive, Inc. Copyright ©2014.  All Rights Reserved.
PT SC WM Died with Win8 (below)
•
This works earlier than Win7, interesting to examine 
fault handling, but ultimately Win8 this is dead! 
Child-SP          RetAddr
Call Site
ffffd000`2b34ecf8 fffff800`16066ee1 nt!LOCK_WORKING_SET
ffffd000`2b34ed00 fffff800`1603f5ad nt!MiSystemFault+0x911
ffffd000`2b34eda0 fffff800`1615af2f nt!MmAccessFault+0x7ed
ffffd000`2b34eee0 fffff6fb`77fde37a nt!KiPageFault+0x12f
ffffd000`2b34f078 fffff800`01e423fe 0xfffff6fb`77fde37a
ffffd000`2b34f080 fffff800`163ae3e5 SIoctl!SioctlDeviceControl+0x27e
ffffd000`2b34f9b0 fffff800`163aed7a nt!IopXxxControlFile+0x845
ffffd000`2b34fb60 fffff800`1615c4b3 nt!NtDeviceIoControlFile+0x56
ffffd000`2b34fbd0 00007ff9`c1b265ea nt!KiSystemServiceCopyEnd+0x13
0000003a`ba9bf8f8 00007ff9`bef92c83 ntdll!NtDeviceIoControlFile+0xa
IOActive, Inc. Copyright ©2014.  All Rights Reserved.
What about new tool (wanted 
ptshellcode thingy)?
•
Was going to do a talk with an expansion of the PT 
shellcode concept
– Was it going to be an ADMmutate update? .NET 
Compiler  thingy  some  set  of  C  macro’s  or  little  script  host  
RoP builder/engine/host?
•
Application of technique is mostly dead, requires an 
info leak(maybe) and what about use bash to write it?
IOActive, Inc. Copyright ©2014.  All Rights Reserved.
Some peace of mind – really!
•
cross platform AMD64 process detection technique 
– obsoletes process hiding techniques used by all 
rootkits/malware!
• Process hiding rootkits/malware technology being typical of 
APT 
•
Detection can be used as an attack (defensive attack 
pattern)
– Defensive Exploit against ALL ROOTKITS!
IOActive, Inc. Copyright ©2014.  All Rights Reserved.
The big picture ProcDetect
•
Ultimately decided on a more advanced, and useful, 
tool for release today
– Hear it for the D!
•
ProcDetect should be with DefCon materials
– Signed code example for AMD64 Windows
• Other platform/OS to follow 
IOActive, Inc. Copyright ©2014.  All Rights Reserved.
Attack v Defense
•
Defensive Window of opportunity
– Closing the door/window today!
•
Defensive tactics can be new classes of defensive
attack techniques
– Offensive Forensics / Automation
– Use the process detection here to post process and 
detect any/every hidden process ever spawned for all 
TIME! 
– Keep interesting/known memory dumps around
Right now; there are no possible attacks against this 
technique (“WE FOUND YOU!”)
IOActive, Inc. Copyright ©2014.  All Rights Reserved.
In Memory Process Detection
•
Dumping memory is a pain physically