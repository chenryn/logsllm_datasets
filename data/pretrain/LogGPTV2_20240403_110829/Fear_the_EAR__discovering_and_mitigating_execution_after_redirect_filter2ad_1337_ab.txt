user who made the request is not allowed to access the re-
quested resource.
EAR vulnerabilities can be silent. In a silent EAR, the
execution of code does not produce any output. This lack of
information makes silent EARs diﬃcult to detect via a black-
box approach, while information leakage EARs are easier to
detect with black-box tools. Listings 1 and 2 are examples of
silent EARs, and Listing 3 is an example of an information
leakage EAR.
2.4 Framework Analysis
Web application frameworks vary on supporting halt-on-
redirect behavior. Therefore, diﬀerent frameworks provide
protection against diﬀerent kinds of EAR vulnerabilities.
The diﬀering semantics of redirects increases the confusion
of developers. A developer we contacted said, “I didn’t real-
ize that [Ruby on Rails’] redirect to was like PHP’s header
redirect and continued to run code.” Thus, an understand-
ing of the web framework’s redirect semantics is essential to
produce correct, EAR-free, code.
We analyzed nine of the most popular web frameworks
to see how they diﬀer with respect to their built-in redirect
functions. The nine frameworks were chosen based on their
StackOverﬂow activity, and include one framework for each
of the Ruby, Groovy, and Python languages, three frame-
works for the PHP language, one framework that can be
applied to both C# and Visual Basic, and two frameworks
for the Java language [7]. While the frameworks selected for
analysis are not exhaustive, we believe they are diverse and
popular enough to be representative of real-world usage.
To analyze the frameworks, we created nearly identical
copies of a simple web service in each of the nine web frame-
works. This web service provided access to four pages within
the web application. The ﬁrst was the root page, “/”, which
simply linked to the other three pages. The second was
the redirect page, “/redirect”, which was used to test proper
redirect behavior. The third was the EAR page, “/ear”,
which called the framework’s redirect function, appended a
message to a log ﬁle regarding the request, and ﬁnally at-
tempted to return a rendered response to the browser. The
last page was the log page, “/log”, which simply displayed
the contents of the log ﬁle.
Using this design for the web application allowed us to
check for integrity violations, represented by the appended
log message, and conﬁdentiality violations, represented by
output sent after the HTTP redirect response when request-
ing the EAR page. We approached the implementation of
this web application in each framework as many developers
new to that framework would. That is, whenever possible,
we followed the recommended tutorials and coding practices
required to build a web application in the framework.
A brief background on the model-view-controller (MVC)
software architecture is necessary to follow our analysis, as
each framework analyzed ﬁts the MVC pattern. The MVC
architecture supports the separation of the persistent stor-
age (model), the user interface (view), and the control ﬂow
(controller) [33]. More precisely, the models interact with
the database, the views specify the output to return to the
client, and the controllers are the glue that puts everything
together. The controller must handle HTTP requests, fetch
or update models, and ﬁnally return a view as an HTTP
response. When following the MVC paradigm, a controller
is responsible for issuing a redirect call.
The following sections describe our analysis of each frame-
work’s susceptibility to EAR vulnerabilities based on their
redirect functions’ use and documentation. We developed
the test application in the latest stable version of each frame-
work available at the time. The version numbers are listed
adjacent to the framework name in the section headers.
2.4.1 Ruby on Rails 3.0.5
Ruby on Rails, commonly referred to as Rails, is a popular
web application framework. Unfortunately, Rails is suscep-
tible to EAR vulnerabilities. Rails provides the redirect_to
function, which prepares the controller for sending the HTTP
redirect. However, the redirect is not actually sent at this
point, and code continues to execute following the call to
redirect_to.
In Rails, there is no mechanism to ensure
that code halts following a redirect, thus if exit is called, a
developer must return from the controller’s entry function
without executing additional code.
As previously mentioned in Section 2, the Ruby exit com-
mand cannot be used to halt the execution of a controller
after a redirect. This is for two reasons: the ﬁrst is that
redirect_to does not immediately send output when it is
called, thus if exit is called, the user will never see the
redirect. The second reason is that Rails web applications
are long-running processes that handle multiple incoming re-
quests, unlike PHP, which typically spawns a new instance
for each request. Therefore, calling exit to halt execution
is not feasible, as it will terminate the Rails application,
preventing it from handling further requests.
On a positive note, information leakage EARs are impossi-
ble in Rails web applications because a controller can either
perform a redirect, or render a response (view) to the user.
Any call to render after a redirect will result in Rails throw-
ing a DoubleRenderError. This exception is thrown in all
possible combinations: render after a redirect, render after a
render, redirect after a render, and redirect after a redirect.
2.4.2 Grails 1.3.7
Grails is a framework written in Groovy, which was mod-
eled after the Ruby on Rails framework. Thus, Grails be-
haves in a manner nearly identical to Rails with respect
to redirects. Speciﬁcally, code will continue to execute fol-
lowing a call to the redirect function, and, therefore, the
developer must take precautions to avoid creating an EAR
vulnerability. Unfortunately, as of this writing, nowhere in
the Grails documentation on redirects does it mention that
code will continue to execute following a redirect [34].
Unlike Ruby on Rails, the behavior of Grails is somewhat
less predictable when it comes to the order of view rendering
and/or calls to redirect. To explain, we will say that to
“render” means to output a view, and to “redirect” means
to call the redirect function. As previously mentioned in
Section 2.4.1, in Rails, only one render or one redirect may
be called in a controller; a DoubleRenderError is thrown
in the case of multiple calls.
In Grails, however, the only
redirect exception, CannotRedirectException, occurs when
a redirect is called following another redirect. In cases where
multiple calls to render are made, the ﬁnal render is the only
one that is sent to the browser. More importantly, in cases
where both redirect and render are called, regardless of their
order, the redirect is actually sent to the browser and the
render call is simply ignored. Due to this behavior of Grails,
it is not vulnerable to an information leakage EAR. However,
like Rails, it is still vulnerable to silent EARs that violate
the integrity of the application.
2.4.3 Django 1.2.5
Django is a Python web application framework that dif-
fers in its handling of redirects compared to the other frame-
works (save for ASP.NET MVC). Rather than calling func-
tions to render or perform the redirect, Django requires the
developer to return an HttpResponse object from each con-
troller. Django’s documentation makes it clear that call-
ing Django’s redirect function merely returns a subclass
of the HttpResponse object. Thus, there is no reason for
the developer to expect the code to halt when calling redi-
rect. The actual HTTP redirect is sent to the browser only
if this object is also returned from the controller’s entry
point, thereby removing the possibility of further code ex-
ecution [15]. Because the controller’s entry point can only
return a single HttpResponse object, the developer can rely
completely on her browser for testing purposes. This behav-
ior makes Django impervious to all EARs.
2.4.4 ASP.NET MVC 3.0
ASP.NET MVC is a web application framework developed
by Microsoft that adds a Model-View-Controller paradigm
on top of traditional ASP.NET, which includes the languages
C# and Visual Basic [1]. ASP.NET MVC is similar to
Django, in that all controllers must return an ActionRe-
sult object. In order to perform redirection, either a Redi-
rectResult or RedirectToRouteResult object must be re-
turned, which are both subclasses of ActionResult. Like
Django, this behavior makes ASP.NET MVC impervious to
all EARs.
2.4.5 Zend Framework 2.3
By default, the PHP based Zend Framework is not sus-
ceptible to EAR vulnerabilities because its redirect methods
immediately result in the termination of server-side code.
This default behavior is consistent in the two methods used
to perform a redirect in the Zend Framework. The simplest
method is by using the _redirect method of the controller,
however, the recommended method is to use the Redirector
helper object [36].
While the default behavior is not vulnerable to EARs,
the Zend Framework supports disabling halt-on-redirect for
both methods. The _redirect method will not halt when
the keyword argument exit=False is provided as part of the
call. Disabling halt-on-redirect when using the Redirector
helper requires calling SetExit(False) on the Redirector
helper object prior to making the redirect call. The latter
method is particularly interesting because any code executed
during the request has the ability to modify the behavior of
redirects called using the Redirector helper. Fortunately,
even when using the Redirector helper, the developer has
the option of using a set of functions suﬃxed with “AndExit”
that always halt-on-redirect.
When halt-on-redirect is disabled in Zend, it becomes vul-
nerable to integrity violation EARs. However, the default
view rendering behavior no longer occurs. Thus, even when
modifying the default behavior, information leakage EARs
will never occur in the Zend Framework.
2.4.6 CakePHP 1.3.7
Similar to the Zend Framework, the CakePHP framework
is also not susceptible to EAR vulnerabilities out of the box.
By default, CakePHP’s single redirect method immediately
results in the termination of the PHP script. In a manner
similar to the Zend Framework, this default behavior can
be modiﬁed by setting the third argument of redirect to
False, which in turn also disables the default mechanism for
view rendering [11]. Thus CakePHP is vulnerable to EARs
in exactly the same way as the Zend Framework.
2.4.7 CodeIgniter 2.0.0
Unlike the Zend Framework and CakePHP, CodeIgniter
is a very lightweight PHP framework, and thus,
it does
not oﬀer much out of the box. Nevertheless, the frame-
work still provides a url helper class that contains a redi-
rect method [16]. CodeIgniter’s redirect method always ex-
its after setting the redirect header; a behavior that can-
not be changed. Therefore CodeIgniter is impervious to
EARs when developers use only the provided redirect func-
tion. Unfortunately, the url helper class must be included
manually. As a result, there is the risk that developers will
not use the provided redirect function and instead intro-
duce EARs by neglecting to call exit following a call to
header("Location:").
2.4.8 J2EE 1.4
Java 2 Platform, Enterprise Edition (J2EE) deﬁnes a serv-
let paradigm for the development of web applications and
web application frameworks in Java. Thus, to perform a
redirect in J2EE, or a J2EE-based framework, the devel-
oper calls HttpServletResponse.sendRedirect. This redi-
rect function will clear out everything previously in the out-
put buﬀer, set the Location header to the redirect location,
set the response code to 302, and ﬁnally ﬂushes the output
buﬀer to the browser. However, sendRedirect does not halt
execution of the servlet. Thus, only silent EARs are present
in J2EE web applications, or any framework that is based
on J2EE servlets.
2.4.9 Struts 2.2.3
Apache Struts is an MVC framework that is built on top
of the servlet model provided by J2EE. Thus, Struts inher-
its all the potential vulnerabilities of the J2EE framework,
speciﬁcally that silent EARs are possible but information
leakage EARs are not possible. This is because to perform a
redirect, the HttpServletResponse.sendRedirect method
of J2EE must be called.
2.5 EAR Security Challenge
Each year since 2003, we have organized and hosted a se-
curity competition called the International Capture the Flag
(iCTF). The competition pits dozens of teams from various
universities across the world against each other in a test of
their security prowess. While each iCTF has a primary ob-
jective, the competitions typically involve secondary security
challenges tangential to the primary objective [14].
For the 2010 edition of the iCTF, we constructed a se-
curity challenge to observe the familiarity of the teams to
Execution After Redirect vulnerabilities. The challenge in-
volved a vulnerable EAR that violated both the conﬁden-
tiality and the integrity of the web application. The conﬁ-
dentiality was violated when the web application’s admin-
istrator view was leaked to unauthorized users following a
redirect; the unauthorized users were “correctly” redirected
to an error page. The information contained in the leaked
view provided enough information to allow for an integrity
violation had the database not purposefully been in a read-
only state. More importantly, the initial data leak provided
the means to leak further information, thus allowing teams
to successfully solve the challenge [6].
The crux of the EAR challenge relied on the automatic
redirecting of web browsers and other web clients, such as
wget and curl. To our surprise, many of the teams relied
only on the output produced by their web browser, and,
therefore, failed to notice the leaked information. It is im-
portant to note that the teams in this competition are pri-
marily made up of graduate and undergraduate level stu-
dents from various universities; many would not be consid-
ered security professionals. Nevertheless, we assumed that
the meticulous eye of a novice-to-intermediate level hacker
attempting to break into a web service would be more likely
to detect information leakage when compared to a web de-
veloper testing their application for “correct” page ﬂow.
Of the 72 teams in the competition, 69 contacted the web
server at least once. 44 of these 69 teams advanced past
the ﬁrst step, which required them to submit a ﬁle as per
the web application’s speciﬁcations. 34 of the 44 teams ad-
vanced past the second step, which required them to brute
force a two-digit password.
It was at this point that the
EAR vulnerability was exposed to the teams, resulting in
both a redirect to the unauthorized error page and the leak-
  Rails Application
1) Build CFG
  CFG
2) Find Redirection Methods
  CFG, interesting methods
3) Prune Infeasible Paths
  CFG, interesting methods
4) Detect EARs
  EARs
5) Classify as Vulnerable
  Benign EARs, Vulnerable EARs
Figure 1: The logical ﬂow of the white-box tool.
age of the administrator page as part of the HTTP redirect
response. Of the 34 teams who made it this far, only 12
successfully discovered and exploited the vulnerability. The
fact that only 12 out of 34 teams were successfully able to
discover the information leaked to their browser in a hacking
competition indicated that more research and exposure was
necessary for EAR vulnerabilities.
3. EAR DETECTION
In this section, we discuss the design and implementation
of our system to detect EAR vulnerabilities. This system
uses static source code analysis to identify cases in which
code might be executed after the call to a redirect function.
We also introduce a heuristic to distinguish benign EARs
from vulnerable EARs.
Our tool targets the Ruby language, speciﬁcally the Ruby
on Rails web framework. We chose this framework for two
reasons. First, Ruby on Rails is a very popular web frame-
work, thus, there is a large number of open-source Ruby
on Rails web applications available for inspection (e.g., on
GitHub [19]). Second, due to the characteristics discussed
in Section 2.4.1, all EARs present in Rails are silent. Thus,
it is necessary to use a white-box tool to detect EARs in
Ruby on Rails web applications. Again, it is important to
note that redirects originate within the controllers4, thus,
our white-box tool operates speciﬁcally on controllers.
3.1 Detection Algorithm
The goal of our EAR detector is to ﬁnd a path in the
controller’s Control Flow Graph (CFG) that contains both
a call to a redirect method and code following that redirect
method. An overview of our algorithm is given in Figure 1.
The algorithm operates in ﬁve steps: (i) generate the CFG
4Redirects can also occur in Rails’ routing, before the re-
quest gets to the controller. However, EARs cannot occur
in this context, because control ﬂow never reaches a con-
troller. Thus, we are not concerned with these redirects.
of the controller; (ii) ﬁnd redirection methods; (iii) prune
infeasible paths in the CFG to reduce false positives; (iv)
detect EARs by ﬁnding a path in the CFG where code is ex-
ecuted after a redirect method is called; (v) use a heuristic
to diﬀerentiate between benign and vulnerable EARs.
Step 1: Building the Control Flow Graph
We built our system on top of the Ruby parser presented by
Furr et al. [18]. This parser ﬁrst compiles Ruby into a subset
of the Ruby language called Ruby Intermediate Language,
or RIL. The purpose of RIL is to simplify Ruby code into an
easier-to-analyze format. The simpliﬁcation is performed by
removing ambiguities in expressions, reducing Ruby’s four
diﬀerent branches to one canonical representation, making
method calls explicit, and adding explicit returns. At the
end of the transformation, every statement in RIL is either
a statement with one side eﬀect or a branch. The parser
generates the CFG of RIL.