25 Years of Program Analysis
Zardus
Program Analysis
Specification
What should hold about 
the program?
Technique
How will we achieve the 
goal?
Goal
What do we want to 
achieve regarding the 
specification?
Dawn of Computing
1830s
1842
1842
1947
Manual Program Analysis
1949
Alan Turing.
"Checking a large routine."
EDSAC Inaugural Conference, 
1949.
Program Verification
Given a program and a specification, show that the program conforms to the 
specification by creating a formal proof.
int main()
{
unsigned int a, b, c;
scanf("%d %d %d", &a, &b, &c);
if (a + b == c && c - b != a)
crash();
}
Specification: The program should not crash.
int main()
{
unsigned int a, b, c;
scanf("%d %d %d", &a, &b, &c);
if (a+b+c != 0 && pow(a, 3) + pow(b, 3) == pow(c, 3))
crash();
}
Specification: The program should not crash.
Program Testing
Given a program and a specification, show that the program does not conform 
to the specification by providing a counterexample.
int main()
{
unsigned int a, b, c;
scanf("%d %d %d", &a, &b, &c);
if (a+b+c != 0 && pow(a, 2) + pow(b, 2) == pow(c, 2))
crash();
}
Specification: The program should not crash.
Counterexample:
a == 3
b == 4
c == 5
1950s
Program testing via "Trash Decks"
http://secretsofconsulting.blogspot.com/2017/02/fuzz-testing-and-fuzz-history.html
Specification
What should hold about 
the program?
Logical Properties
Absence of Crashes
Type Safety
Efficiency
Memory Safety
Information Disclosure
Authentication
Technique
How will we achieve the 
goal?
Manual
Symbolic Execution
Abstract Interpretation
Fuzzing
Goal
What do we want to 
achieve regarding the 
specification?
Verification
Testing
Transformation
Need for Automated Techniques
1952
Grace Hopper.
"The Education of a Computer."
Proceedings of the 1952 ACM 
national meeting, 1952.
Specification
What should hold about 
the program?
Logical Properties
Absence of Crashes
Type Safety
Efficiency
Memory Safety
Information Disclosure
Authentication
Technique
How will we achieve the 
goal?
Manual
Symbolic Execution
Abstract Interpretation
Fuzzing
Goal
What do we want to 
achieve regarding the 
specification?
Verification
Testing
Transformation
1968
Robert Graham.
"Protection in an information 
processing utility."
Communications of the ACM, 
1968.
1984
Ken Thompson.
"Reflections on trusting 
trust." Communications of the 
ACM, 1984.
Specification
What should hold about 
the program?
Logical Properties
Absence of Crashes
Type Safety
Efficiency
Memory Safety
Information Disclosure
Authentication
Technique
How will we achieve the 
goal?
Manual
Symbolic Execution
Abstract Interpretation
Fuzzing
Goal
What do we want to 
achieve regarding the 
specification?
Verification
Testing
Transformation
Automated Techniques
x = input()
Prerequisites
Basic Block
x = input()
if x == 42:
print "Correct"
else:
print "No"
x == 42
x != 42
Basic Block
Constraints
Prerequisites
Basic Block
Constraints
Control Flow Graph
x = input()
if x == 42:
print "Correct"
else:
print "No"
if x == 1337:
print "Fine"
........
........
........
........
........
........
........
........
........
........
........
Prerequisites
Basic Block
Constraints
Control Flow Graph
Path
x = input()
if x == 42:
print "Correct"
else:
print "No"
if x == 1337:
print "Fine"
........
........
........
........
........
........
........
........
........
........
........
x != 42
x == 1337
Basic Block
Constraints
Control Flow Graph
Path
Path Predicates
1975
Robert Boyer, et al.
"SELECT—a formal system for testing and debugging programs by 
symbolic execution."
ACM SigPlan Notices, 1975.
The Rise of Symbolic Execution
username = input()
if username == "service":
cmd_code = atoi(input())
if cmd_code == 7:
crash()
else:
print "Unknown command".
else:
passcode = atoi(input())
if passcode < 10000:
print "Invalid passcode!"
else:
auth(username, passcode)
print "Exiting..."
exit()
Symbolic Execution
username = input()
if username == "service":
cmd_code = atoi(input())
if cmd_code == 7:
crash()
else:
print "Unknown command".
else:
passcode = atoi(input())
if passcode < 10000:
print "Invalid passcode!"
else:
auth(username, passcode)
print "Exiting..."
exit()
Symbolic Execution
username = input()
if username == "service":
cmd_code = atoi(input())
if cmd_code == 7:
crash()
else:
print "Unknown command".
else:
passcode = atoi(input())
if passcode < 10000:
print "Invalid passcode!"
else:
auth(username, passcode)
print "Exiting..."
exit()
Symbolic Execution
username = input()
if username == "service":
cmd_code = atoi(input())
if cmd_code == 7:
crash()
else:
print "Unknown command".
else:
passcode = atoi(input())
if passcode < 10000:
print "Invalid passcode!"
else:
auth(username, passcode)
print "Exiting..."
exit()
Symbolic Execution
Constraints
username = ???
username 
== 
"service"
username 
!=
"service"
atoi()
username = input()
if username == "service":
cmd_code = atoi(input())
if cmd_code == 7:
crash()
else:
print "Unknown command".
else:
passcode = atoi(input())
if passcode < 10000:
print "Invalid passcode!"
else:
auth(username, passcode)
print "Exiting..."
exit()
Symbolic Execution
Constraints
cmd_code
!=
"7"
passcode
<= 
1000
username = ???
username 
== 
"service"
username 
!=
"service"
Specification
What should hold about 
the program?
Logical Properties
Absence of Crashes
Type Safety
Efficiency
Memory Safety
Information Disclosure
Authentication
Technique
How will we achieve the 
goal?
Manual
Symbolic Execution
Abstract Interpretation
Fuzzing
Goal
What do we want to 
achieve regarding the 
specification?
Verification
Testing
Transformation
1977
Patrick & Radhia Cousot.
"Abstract Interpretation: A Unified Lattice Model for Static 
Analysis of Programs by Construction or Approximation of 
Fixpoints"
ACM Symposium on Principles of Programming Languages, 1977,
Emergence of Static Analysis
username = input()
if username == "service":
cmd_code = atoi(input())
if cmd_code == 7:
crash()
else:
print "Unknown command".
else:
passcode = atoi(input())
if passcode < 10000:
print "Invalid passcode!"
else:
auth(username, passcode)
print "Exiting..."
exit()
Symbolic Execution
Alerts
POSSIBLE CRASH: L5
POSSIBLE CRASH: L13
Specification
What should hold about 
the program?
Logical Properties
Absence of Crashes
Type Safety
Efficiency
Memory Safety
Information Disclosure
Authentication
Technique
How will we achieve the 
goal?
Manual
Symbolic Execution
Abstract Interpretation
Fuzzing
Goal
What do we want to 
achieve regarding the 
specification?
Verification
Testing
Transformation
1981
Joe W. Duran, et al.
"A report on random testing".
ACM SIGSOFT International Conference on Software Engineering, 
1981.
Fuzzing Appears
username = input()
if username == "service":
cmd_code = atoi(input())
if cmd_code == 7:
crash()
else:
print "Unknown command".
else:
passcode = atoi(input())
if passcode < 10000:
print "Invalid passcode!"
else:
auth(username, passcode)
print "Exiting..."
exit()
Fuzzing
Test Cases
“asDA:111”
“asdf:111”
“asDAAA:1111”
“asDALA:11121”
“axDOO:15129”
“asFOO:75129”
Specification
What should hold about 
the program?
Logical Properties
Absence of Crashes
Type Safety
Efficiency
Memory Safety
Information Disclosure
Authentication
Technique
How will we achieve the 
goal?
Manual
Symbolic Execution
Abstract Interpretation
Fuzzing
Goal
What do we want to 
achieve regarding the 
specification?
Verification
Testing
Transformation
The Program Analysis Nursery
The Program Analysis Nursery
-
249 programs
-
Source code available
-
Range of vulnerability classes
-
Documented vulnerabilities
-
Simple OS model
-
Explicit security specifications!
Nursery Experiments
0
249
Symbolic Execution
9
Optimized Symbolic Execution
26
Symbolic Execution + Veritesting*
31
Fuzzing (AFL)
106
Symbolic Execution
Fuzzing
username = input()
if username == "service":
cmd_code = atoi(input())
if cmd_code == 7:
crash()
else:
print "Unknown command".
else:
passcode = atoi(input())
if passcode < 10000:
print "Invalid passcode!"
else:
auth(username, passcode)
print "Exiting..."
exit()
Drilling
Test Cases
“asdf:111”
“asDAAA:1111”
username == "service"
cmd_code != "7"
“service:5”
“servic3:5”
“service:7”
Nursery Experiments
0
249
Symbolic Execution
9
Optimized Symbolic Execution
26
Symbolic Execution + Veritesting*
31
Fuzzing (AFL)
106
Symbolically-assisted Fuzzing (Driller)
118
Driller Results
Applicability varies by program.
Where it was needed, Driller increased block coverage by an average of 71%.
Basic Block Coverage
Time
Nursery Experiments
0
249
Symbolic Execution
9
Optimized Symbolic Execution
26
Symbolic Execution + Veritesting*
31
Fuzzing (AFL)
106
Symbolically-assisted Fuzzing (Driller)
118
?
Join in!
Contribute to open-source frameworks!
http://angr.io 
I am actively looking for students, interns, etc!
Yan Shoshitaishvili
Me: @Zardus PI:EMAIL
Team: @Shellphish PI:EMAIL 
This presentation: https://goo.gl/57BAoc 
Come do research!
Questions?