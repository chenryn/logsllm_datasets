The client block defines indicators for the client that performs an HTTP GET. The client, in this 
case, is Cobalt Strike’s Beacon payload. 
When Cobalt Strike’s Beacon “phones home” it sends metadata about itself to Cobalt Strike. In 
this profile, we have to define how this metadata is encoded and sent with our HTTP GET 
request. 
The metadata keyword followed by a group of statements specifies how to transform and embed 
metadata into our HTTP GET request. The group of statements, following the metadata keyword, 
is called a data transform.  
Step 
Action 
Data 
0. Start 
metadata 
1. base64 
Base64 Encode 
bWV0YWRhdGE= 
2. prepend "user=" 
Prepend String 
user=bWV0YWRhdGE= 
3. header "Cookie" 
Store in Transaction 
The first statement in our data transform states that we will base64 encode our metadata [1]. The 
second statement, prepend, takes our encoded metadata and prepends the string user= to it [2]. 
Now our transformed metadata is “user=“ . base64(metadata). The third statement states we will 
store our transformed metadata into a client HTTP header called Cookie [3].  That’s it.  
Both Beacon and its server consume profiles. Here, we’ve read the profile from the perspective 
of the Beacon client. The Beacon server will take this same information and interpret it 
www.cobaltstrike.com/
/
69/
backwards. Let’s say our Cobalt Strike web server receives a GET request to the URI /foobar. 
Now, it wants to extract metadata from the transaction.  
Step 
Action 
Data 
0. Start 
1. header "Cookie" 
Recover from Transaction 
user=bWV0YWRhdGE= 
2. prepend "user=" 
Remove first 5 characters 
bWV0YWRhdGE= 
3. base64 
Base64 Decode 
metadata 
The header statement will tell our server where to recover our transformed metadata from [1]. 
The HTTP server takes care to parse headers from the HTTP client for us. Next, we need to deal 
with the prepend statement. To recover transformed data, we interpret prepend as remove the 
first X characters [2], where X is the length of the original string we prepended. Now, all that’s 
left is to interpret the last statement, base64. We used a base64 encode function to transform the 
metadata before. Now, we use a base64 decode to recover the metadata [3]. 
We will have the original metadata once the profile interpreter finishes executing each of these 
inverse statements. 
Data Transform Language 
A data transform is a sequence of statements that transform and transmit data. The data transform 
statements are: 
Statement 
Action 
Inverse 
append "string" 
Append "string" 
Remove last LEN(“string”) characters 
base64 
Base64 Encode 
Base64 Decode 
base64url 
URL-safe Base64 Encode 
URL-safe Base64 Decode 
mask 
XOR mask w/ random key 
XOR mask w/ same random key 
netbios 
NetBIOS Encode ‘a’ 
NetBIOS Decode ‘a’ 
netbiosu 
NetBIOS Encode ‘A’ 
NetBIOS Decode ‘A’ 
prepend "string" 
Prepend "string" 
Remove first LEN(“string”) characters 
A data transform is a combination of any number of these statements, in any order. For example, 
you may choose to netbios encode the data to transmit, prepend some information, and then 
base64 encode the whole package. 
A data transform always ends with a termination statement. You may only use one termination 
statement in a transform. This statement tells Beacon and its server where in the transaction to 
store the transformed data. 
www.cobaltstrike.com/
/
70/
There are four termination statements.  
Statement 
What 
header “header” 
Store data in an HTTP header 
parameter “key” 
Store data in a URI parameter 
print 
Send data as transaction body 
uri-append 
Append to URI 
The header termination statement stores transformed data in an HTTP header. The parameter 
termination statement stores transformed data in an HTTP parameter. This parameter is always 
sent as part of URI. The print statement sends transformed data in the body of the transaction.  
The print statement is the expected termination statement for the http-get.server.output, http-
post.server.output, and http-stager.server.output blocks. You may use the header, parameter, 
print and uri-append termination statements for the other blocks.  
If you use a header, parameter, or uri-append termination statement on http-post.client.output, 
Beacon will chunk its responses to a reasonable length to fit into this part of the transaction. 
These blocks and the data they send are described in a later section. 
Strings 
Beacon’s Profile Language allows you to use “strings” in several places. In general, strings are 
interpreted as-is. However, there are a few special values that you may use in a string: 
Value 
Special Value 
“\n” 
Newline character 
“\r” 
Carriage Return 
“\t” 
Tab character 
“\u####” 
A unicode character 
“\x##” 
A byte (e.g., \x41 = ‘A’) 
“\\” 
\ 
Headers and Parameters 
Data transforms are an important part of the indicator customization process. They allow you to 
dress up data that Beacon must send or receive with each transaction. You may add extraneous 
indicators to each transaction too.  
In an HTTP GET or POST request, these extraneous indicators come in the form of headers or 
parameters. Use the parameter statement within the client block to add an arbitrary parameter to 
an HTTP GET or POST transaction.  
www.cobaltstrike.com/
/
71/
This code will force Beacon to add ?bar=blah to the /foobar URI when it makes a request.  
http-get { 
client { 
parameter "bar" "blah"; 
Use the header statement within the client or server blocks to add an arbitrary HTTP header to 
the client’s request or server’s response. This header statement adds an indicator to put network 
security monitoring teams at ease. 
http-get { 
server { 
header "X-Not-Malware" "I promise!"; 
The Profile Interpreter will Interpret your header and parameter statements In order. That said, 
the WinINet library (client) and Cobalt Strike web server have the final say about where in the 
transaction these indicators will appear. 
Options 
You may configure Beacon’s defaults through the profile file. There are two types of options: 
global and local options. The global options change a global Beacon setting. Local options are 
transaction specific. You must set local options in the right context. Use the set statement to set 
an option. 
set "sleeptime" "1000"; 
Here are a few options: 
Option 
Context 
Default Value 
Changes 
dns_idle 
0.0.0.0 
IP address used to indicate no 
tasks are available to DNS 
Beacon; Mask for other DNS 
C2 values 
dns_max_txt 
252 
Maximum length of DNS 
TXT responses for tasks 
dns_sleep 
0 
Force a sleep prior to each 
individual DNS request. (in 
milliseconds) 
dns_stager_prepend 
Prepend text to payload stage 
delivered to DNS TXT record 
stager 
dns_stager_subhost 
.stage.123456. 
Subdomain used by DNS 
TXT record stager. 
dns_ttl 
1 
TTL for DNS replies 
host_stage 
true 
Host payload for staging over 
HTTP, HTTPS, or DNS. 
www.cobaltstrike.com/
/
72/
Required by stagers. 
jitter 
0 
Default jitter factor (0-99%) 
maxdns 
255 
Maximum length of 
hostname when uploading 
data over DNS (0-255) 
pipename 
msagent_## 
Default name of pipe to use 
for SMB Beacon’s peer-to-
peer communication. ## is 
replaced with a number 
unique to your team server. 
pipename_stager 
status_## 
Name of pipe to use for SMB 
Beacon’s named pipe stager. 
## is replaced with a number. 
sample_name 
My Profile 
The name of this profile 
(used in the Indicators of 
Compromise report) 
sleeptime 
60000 
Default sleep time (in 
milliseconds) 
smb_frame_header 
Prepend header to SMB 
Beacon messages 
ssh_banner 
Cobalt Strike 4.1 
SSH client banner 
tcp_frame_header 
Prepend header to TCP 
Beacon messages 
tcp_port 
4444 
Default TCP Beacon listen 
port 
uri 
http-get,  
http-post 
[required option] 
Transaction URI 
uri_x86 
http-stager 
x86 payload stage URI 
uri_x64 
http-stager 
x64 payload stage URI 
useragent 
Internet Explorer (Random) 
Default User-Agent for 
HTTP comms.  
verb 
http-get, 
http-post 
GET, POST 
HTTP Verb to use for 
transaction 
With the uri option, you may specify multiple URIs as a space separated string. Cobalt Strike’s 
web server will bind all of these URIs and it will assign one of these URIs to each Beacon host 
when the Beacon stage is built. 
Even though the useragent option exists; you may use the header statement to override this 
option.  
11.4 HTTP Staging 
Beacon is a staged payload. This means the payload is downloaded by a stager and injected into 
memory. Your http-get and http-post indicators will not take effect until Beacon is in memory on 
your target. Malleable C2’s http-stager block customizes the HTTP staging process.  
www.cobaltstrike.com/
/
73/
http-stager { 
set uri_x86 "/get32.gif"; 
set uri_x64 "/get64.gif"; 
The uri_x86 option sets the URI to download the x86 payload stage. The uri_x64 option sets the 
URI to download the x64 payload stage.  
client { 
parameter "id" "1234"; 
header "Cookie" "SomeValue"; 
} 
The client keyword under the context of http-stager defines the client side of the HTTP 
transaction. Use the parameter keyword to add a parameter to the URI. Use the header keyword 
to add a header to the stager’s HTTP GET request. 
server { 
header "Content-Type" "image/gif"; 
output { 
prepend "GIF89a"; 
print; 
} 
} 
} 
The server keyword under the context of http-stager defines the server side of the HTTP 
transaction. The header keyword adds a server header to the server’s response. The output 
keyword under the server context of http-stager is a data transform to change the payload stage. 
This transform may only prepend and append strings to the stage. Use the print termination 
statement to close this output block. 
11.5 A Beacon HTTP Transaction Walk-through 
To put all of this together, it helps to know what a Beacon transaction looks like and which data 
is sent with each request. 
A transaction starts when a Beacon makes an HTTP GET request to Cobalt Strike’s web server. 
At this time, Beacon must send metadata that contains information about the compromised 
system.  
Tip:>session>metadata>is>an>encrypted>blob>of>data.>Without>encoding,>it>is>not>suitable>
for>transport>in>a>header>or>URI>parameter.>Always>apply>a>base64,>base64url,>or>
netbios>statement>to>encode>your>metadata.>
www.cobaltstrike.com/
/
74/
Cobalt Strike’s web server responds to this HTTP GET with tasks that the Beacon must execute. 
These tasks are, initially, sent as one encrypted binary blob. You may transform this information 
with the output keyword under the server context of http-get. 
As Beacon executes its tasks, it accumulates output. After all tasks are complete, Beacon checks 
if there is output to send. If there is no output, Beacon goes to sleep. If there is output, Beacon 
initiates an HTTP POST transaction. 
The HTTP POST request must contain a session id in a URI parameter or header. Cobalt Strike 
uses this information to associate the output with the right session. The posted content is, 
initially, an encrypted binary blob. You may transform this information with the output keyword 
under the client context of http-post. 
Cobalt Strike’s web server may respond to an HTTP POST with anything it likes. Beacon does 
not consume or use this information. You may specify the output of HTTP POST with the 
output block under the server context of http-post. 