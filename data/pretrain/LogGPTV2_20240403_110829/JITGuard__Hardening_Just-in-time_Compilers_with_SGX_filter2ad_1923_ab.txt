crafted input program. In the popular pwn2own exploiting con-
test, Gong [28] injected a malicious payload into the JIT memory
to gain arbitrary code execution in the Chrome browser without
resorting to code-reuse attacks like return-oriented programming
(ROP) [51]. To prevent code-injection attacks, W⊕X was adapted
for JIT code [11, 12, 16, 41]. However, as discussed in the previous
section, JIT code pages must be changed to writable for a short time
when the JIT compiler emits new code, or optimizes the existing JIT
code. Song et al. [54] demonstrated that this small time window can
be exploited by an adversary to inject a malicious payload. They
propose to mitigate this race condition by splitting the JIT engine
into two different processes: an untrusted process which executes
the JIT code, and a trusted process which emits the JIT code. Their
architecture prevents the JIT memory from being writable in the
untrusted process at any point in time. Since the split JIT engine
now requires inter-process communication and synchronization
between the two processes, the generated run-time overhead can
be as high as 50% for JavaScript benchmarks. Further, this approach
does not prevent code-reuse attacks.
Code-reuse attacks chain existing pieces of code together to ex-
ecute arbitrary malicious code. JIT engines facilitate code-reuse
attacks because the attacker can provide input programs to the
JIT compiler, and hence, influence the generated code to a certain
degree. However, as mentioned in Section 2.2, the attacker cannot
force the JIT compiler to emit arbitrary instructions, e.g., system
call instructions which are required for most exploits. To bypass
this restriction Blazakis [6] observed that numeric constants in
a JavaScript program are copied to the JIT code, as illustrated in
Figure 2: an adversary can define a JavaScript program which as-
signs large constants to a variable, here the result of 0x3C909090
xor 0x90909090 is assigned to the variable y. When the compiler
transforms this expression into native code, the two constants are
copied into the generated instructions. This attack is known as JIT
Address     Opcodes       Disassembly 1:          90            nop2:          90            nop3:          90            nop4:          3C35          cmp al, 35 6:          90            nop7:          90            nop8:          90            nop9:          90            nopUnaligned Native CodeAddress     Opcodes       Disassembly 0:          B8 9090903C   mov  eax, 0x3C9090905:          35 90909090   xor  eax, 0x90909090Native Codefunction foo() {    var y = 0x3C909090 ^ 0x90909090;}JavaScriptSession K4:  Secure EnclavesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2407spraying and enables the attacker to inject 3-4 arbitrary bytes into
the JIT code. By forcing the control flow to the middle of the mov
instruction, the CPU will treat the injected constant bytes as an
instruction and execute them.
JIT spraying can be mitigated by constant blinding, i.e., masking
large constant C through xor with a random value R at compile
time. The JIT compiler then emits an xor instruction to unblind the
masked constant before using it (((C ⊕ R) ⊕ R = C ⊕ 0 = C). While
constant blinding indeed prevents JIT spraying it decreases the
performance of the JIT code. Further, Athanasakis et al. [4] demon-
strated that JIT spraying can also be performed with smaller con-
stants, and that constant blinding for smaller constants is impracti-
cal due to the imposed run-time overhead. Recently, Maisuradze
et al. [36] demonstrated a JIT-spraying attack by controlling the
offsets of relative branch instructions to inject arbitrary bytes into
the JIT code.
Another approach to mitigate JIT-spraying is code randomiza-
tion. Homescu et al. [29] adopted fine-grained randomization for
JIT code. However, similar to static code, code randomization for
JIT code is vulnerable to information-disclosure attacks [52]. While
Crane et al. [16] argued that leakage resilience based on execute-
only memory can be applied to JIT code as well, they do not im-
plement code-pointer hiding for the JIT code which makes the per-
formance impact hard to estimate. Tang et al. [55] and Werner et
al. [59] proposed to prevent information-disclosure attacks through
destructive code reads. Their approach is based on the assumption
that benign code will never read from the code section. Destructive
code reads intercept read operations to the code section, and over-
write every read instruction with random data. Hence, all memory
leaked by the attacker is replaced by random data, rendering it unus-
able for code-reuse attacks. However, Snow et al. [53] demonstrated
that this mitigation is ineffective in the setting of JIT code. In par-
ticular, the attacker can use the JIT compiler to generate multiple
versions of the same code by providing a JavaScript program with
duplicated functions. Upon reading the code section the native code
of the first function will be overwritten while the other functions
are intact and can be used by the attacker to conduct a code-reuse
attack.
Ansel et al. [3] designed a generic sandboxing approach based
on Software-based Fault Isolation (SFI), which prevents the JIT-
compiled code from modifying other parts of the program. The
authors do not quote a single overhead figure, however, almost all
of their benchmarks have an overhead greater than 20%.
Niu et al. [47] applied CFI to JIT code and found that it generates
on average 14.4% run-time overhead and does not protect against
data-only attacks which do not tamper with the control flow but
manipulate the data flow to induce malicious behavior.
3 OUR DATA-ONLY ATTACKS ON JIT
COMPILERS
Overview. As mentioned in the previous Section, existing JIT
protections only aim to prevent code-injection or code-reuse at-
tacks. However, in our preliminary experiments we observed that
arbitrary remote code execution is feasible by means of data-only
attacks which corrupt the memory without requiring to corrupt
Figure 3: DOJITA enables the attacker to execute arbitrary code through a
data-only attack. In particular, the attacker manipulates the IR which is then
used by the JIT compiler to generate native code that includes a malicious
payload.
any code pointers. We implemented an experimental data-only at-
tack against JIT compilers, coined DOJITA (Data-Only JIT Attack),
that manipulates the intermediate representation (IR) to trick the
JIT compiler into generating arbitrary malicious payloads. Our ex-
periments underline the significance of data-only attacks, in the
presence of defenses against control-flow hijacking, and motivate
the design of our defense JITGuard. Figure 3 shows the high-level
idea of DOJITA:
The attacker 1 exploits a memory-corruption vulnerability to
read and write arbitrary data memory; 2 identifies a hot function
F in the input program, which will be compiled to native code;
3 during the compilation of F the JIT compiler will generate the
corresponding IR; the attacker discloses the memory address of the
IR in memory which is commonly composed of C++ objects; 4 in-
jects crafted C++ objects (the malicious payload) into the existing
IR. 5 Finally the JIT compiler uses the IR to generate the native
code 6 . Since the IR was derived from the trusted bytecode input,
the JIT compiler does not check the generated code again. 7 Thus,
the generated native code now contains a malicious payload that is
executed upon subsequent invocations of the function F.
Details. For our experiments we chose the JavaScript engine
of Internet Explorer, called Chakra [38]. Our goal is to achieve
arbitrary code execution by exploiting a memory-corruption vul-
nerability without manipulating the JIT code or any code pointers.
Further, we assume that the static code and the JIT code are pro-
tected against code-reuse and code-injection attacks, e.g., by either
fine-grained code randomization [16], or fine-grained (possibly
hardware-supported) control-flow integrity [31, 47].
For our attack against Chakra we carefully analyzed how the
JIT compiler translates the JavaScript program into native code.
We found that the IR of Chakra is comprised of a linked list of
IR::Instr C++ objects where each C++ object embeds all informa-
tion, required by the JIT compiler, to generate a native instruction or
an instruction block. These objects contain variables like m_opcode
to specify the operation, and variables m_dst, m_src1, and m_src2
JIT CompilerVulnerable ApplicationAttackerNative Code1ExploitVulnerability2Trigger NativeCompilerTriggerexecution7OutputIRGenerate35Input64Inject attacker IRinto existing IRSession K4:  Secure EnclavesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2408the IR memory objects, and generate native code. While the injec-
tion of malicious IR into the benign IR depends on a race condition,
we found that the attack framework can reliably win this race by
triggering the execution of the JIT compiler repeatedly. Appendix A
contains an example payload that creates a file and writes arbitrary
content to it.
Our proposed data-only attack against the JIT compiler cannot
be mitigated by any state-of-the-art defenses or defenses proposed
in the literature [16, 47]. The reason is that these defenses cannot
distinguish the benign IR from the injected IR.
In our testing, DOJITA succeeded 99% of the times.
Comparison to Related Work. Independently from our work,
Theori [57] published a similar attack that also targets the internal
data structures of Microsoft’s JIT compiler. Their attack targets a
temporary buffer which is used by the JIT compiler during com-
pilation to emit the JIT code. This temporary buffer is marked as
readable and writable. However, once the JIT compiler generated
all instruction from the IR, it relocates the content of the tem-
porary buffer into the JIT memory which is marked as readable
and executable. By injecting new instructions into this temporary
buffer one can inject arbitrary code into the JIT memory. Microsoft
patched the JIT compiler to include a cyclic redundancy checksum
of the emitted instructions during compilation. The JIT code is only
executed if the checksum of the relocated buffer corresponds to the
original checksum.
This defense mechanism which was recently added by Microsoft
does not prevent our attack. While the attack by Theori [57] is simi-
lar to ours, we inject our malicious payload at an earlier stage of the
compilation. As a consequence, the checksum, which is computed
during compilation, will be computed over our injected IR. Since
we do not perform any modifications in later stages, the checksum
of the relocated buffer is still valid and the JIT compiler cannot
detect our attack.
In the remainder of this paper, we present our novel defense
that leverages Intel’s SGX to mitigate code-injection, code-reuse,
and data-only attacks against just-in-time compilers (including
DOJITA).
4 THREAT MODEL AND ASSUMPTIONS
The main goal of this paper is to mitigate attacks that target JIT code
generation and attacks exploiting the JIT-compiled code. Therefore,
our threat model and assumptions exclude attacks on the static
code. Our threat model is consistent with the related work in this
area [6, 16, 36, 47, 54].
• Static code is protected. State-of-the-art defenses against code-
injection and code-reuse attacks for static code are deployed and
active. In particular, this means that code-injection is prevented
by enforcing DEP [37], and code-reuse attacks are defeated by
randomization-based solutions [16, 17], or (hardware-assisted)
control-flow integrity [1, 31, 58]. Additionally, we assume that
the static code of the application and the operating system are
not malicious.
• Data randomization. The targeted application employs Ad-
dress Space Layout Randomization (ASLR) [48]. This prevents an
adversary from knowing any addresses of allocated data regions
a priori and enables us to hide sensitive data from the attacker.
Figure 4: The IR of Chakra consists of a linked list of IR:Instr C++ objects. The
attacker injects instructions by overwriting the m_next pointer of a benign
object (dotted line) to point to a linked list of crafted objects.
to specify the operands for the operation. To achieve arbitrary code
execution, we carefully craft our own objects, and link them to-
gether. Figure 4 shows the IR after we injected our own IR::Instr
objects (lower part of the figure), by overwriting the m_next data
pointer of the benign IR::Instr objects (upper part of the figure).
When the JIT compiler uses the linked list to generate the native
code it will include our malicious payload. It is noteworthy that
m_opcode cannot specify arbitrary operations but is limited to a
subset of instructions like (un-)conditional branches, memory ac-
cesses, logic, and arithmetic instructions. This allows us to generate
payloads to perform arbitrary computations, and to read and write
memory. However, for a meaningful attack we have to interact with
the system through system calls. We inject a call instruction to
the system call wrapper functions which are provided by system
libraries. To resolve the addresses of these function, we leverage a
similar approach as JIT-ROP [52]. In particular, we first disclose the
address of GetProcAddress() which is a function that takes the
name of an exported library function as an argument and returns
its address. This enables our payload to resolve and call arbitrary
functions, and hence, interact with the system.
Our proposed data-only attack against the JIT compiler cannot
be mitigated by any state-of-the-art defenses or defenses proposed
in the literature [16, 47]. The reason is that these defenses cannot
distinguish the benign IR from the injected IR.
Implementation. For our proof-of-concept of DOJITA we imple-
mented an attack framework that allows the attacker to specify
an arbitrary attack payload. Our framework parses and compiles
the attack payload to the ChakraCore IR, i.e., the framework au-
tomatically generates C++ memory objects that correspond to the
instruction of the attack payload. Next, the framework exploits
a heap overflow in Array.map() (CVE-2016-7190), which we re-
introduced to the most recent public version of ChakraCore (version
1.4), to acquire the capability of reading and writing arbitrary mem-
ory. After disclosing the internal data-structures of the JIT compiler,
we modify a number of data pointers within these structures to
include our malicious IR. The JIT compiler will then iterate through
IR::Instr...m_src1m_dstm_opcodem_src2m_nextIR::Instrm_nextIR::Instrm_nextm_opcodem_src2IR::Instrm_src1m_opcodem_dstm_next...m_opcodem_src1m_src1m_dstm_dst...m_src2...m_src2...m_nextm_opcodem_src1IR::Instrm_dstm_src2m_nextIR::Instrm_src1...m_dstm_opcodem_src2Session K4:  Secure EnclavesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2409after its initialization phase.
• Secure initialization. An adversary can only attack JITGuard
• Memory-corruption vulnerability. The target program suf-
fers from at least one memory-corruption vulnerability. The
attacker can exploit this vulnerability to disclose and manipulate
data memory of known addresses. This is a common assumption
for browser exploits [14, 49, 52].
• Scripting Engine. An adversary can utilize the scripting engine
to perform arbitrary (sandboxed) computations at run time, e.g.,
adjust the malicious payload based on disclosed information.
The goal of the adversary is to gain the ability to execute arbitrary
code in the browser process. The attacker can then try and further
compromise the system, or leak sensitive information from the web
page (e.g., launching the attack from some malicious advertisement
code). The use of some defense mechanisms, like sandboxing [15,
27], can make the former attack harder. However, such defenses do
not prevent the latter attack and are orthogonal to JITGuard.
We also note that any form of side-channel, e.g., cache and timing
attacks to leak randomized memory addresses, or hardware attacks
are beyond the scope of this paper.
5 DESIGN OF JITGUARD
Our main goal is to harden the JIT compiler against code-injection,
code-reuse and data-only attacks. To achieve this we isolate all
critical components of the JIT compiler from the main application,
potentially containing a number of exploitable vulnerabilities. The
isolation is enforced through hardware by utilizing SGX. Note, that
intuitively one can isolate the whole JIT engine with SGX. However,
the JIT code frequently interacts with static code, and since every
call requires a context switch between enclave and host process,
this would result in a tremendous amount of overhead. To avoid
this overhead we decompose the JIT engine to execute the JIT code
outside of the enclave. To prevent the attacker from exploiting the
JIT code to launch code-injection or code-reuse attacks we hide the
JIT code by using randomization. Further, we mitigate information
disclosure attacks by building an indirection that transfers the