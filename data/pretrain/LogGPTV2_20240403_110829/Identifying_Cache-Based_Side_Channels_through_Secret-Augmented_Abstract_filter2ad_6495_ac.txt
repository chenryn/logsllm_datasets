Abstract values of secret-dependent memory accessSecret-augmented abstract intrepretationSecret-dependent memory accessCorresponding SMT formulasConstraint solving w.r.t. cache line access modelYesPotential side channel issueSafeNoCFGProgram BinaryReverse Engieeringeax = {0, 2, 4}ecx = {s1}!(ebx+4) = {4, 12}…Program stateCapture information ﬂow{ 12 }{8+k2*4}{14+esi0*4} {eax0+4}{ 14 }{ k2 }{ 33 }{ p }{ 14 }{ s2}{ 33 }value{esp0 -120}{e-120}{ 12 }{ p }new value{8+s2*4}ebxecxeaxesp!(14+esi0*4)!(8)!(8+k2*4)!(esp0-120)new keyebxecxeaxesp!(ebx)!(ecx-4)!(eax)!(e-120)keyProgram State Lookup TableKnowing that value set of eax is 8+k2*4 (third entry in
Fig. 5), the ﬁrst instruction creates an entry from address
8+k2*4 to 14 (Fig. 5 shows program states after executing
the ﬁrst instruction). Further memory loading would acquire
the value set in eax, and then reset the entry of ebx with 14
in the state lookup table of the second instruction.
Reading from unknown registers and memory locations
would introduce symbols of different credentials regarding
our information ﬂow policy (see Sec. 6.2 for details).
Optimization of Table Values. While the precisely tracked
logic formulas l ∈ L result in notable computing resource
usage (Sec. 3), the proposed abstract domain SAS (Sec. 4)
enables succinct representation of abstract values. As shown
in Fig. 5, the “value” column of the lookup table is now re-
placed by the “new value” column. Consequently, memory
consumption is considerably reduced (details are reported in
our evaluation section).
Optimization of Table Keys. Since only abstract values are
traced in SAS, the “key” column can be updated into a com-
pact representation as well. However, using symbols such as
p as the key will result in an imprecise modeling of memory
addresses.
CacheS optimizes the “key” column in the following way.
For most memory related entries, instead of using abstract
memory addressing formulas, memory access expressions
(expressions of registers and constant offsets) are used as
keys. For example, the ﬁrst instruction in Listing 1 uses
memory access expression (i.e., “eax”) instead of its abstract
value 8 + s2 ∗ 4 for memory lookup. Hence, when analyzing
the store instruction, CacheS creates (or updates) an entry in
the lookup table, which uses !(eax) as the key (here symbol
“!” means pointer dereference). Likewise, for memory load,
!(eax) will be used to look up the program state table. To
safely preserve lookup entries via expressions, whenever the
value set of a register is reset in the analysis, entries in the
table are deleted if their keys are memory access expressions
via the newly-updated register.
Nevertheless, since stack register esp is frequently manip-
ulated to access stack memory, we preserve abstract address-
ing formulas via e to keep track of stack memory access pre-
cisely (e.g., the last entry in the “new key” column of Fig. 5).
6.1.3 Order of Program State
When multiple program states are possible for a program
point, it is important to deﬁne the “merge” operation in ab-
stract interpretation. Such an operation can be deﬁned based
on the least upper bound operation (cid:116) of SAS (recall that SAS
forms a lattice (Sec. 4.2)).
states, T1 (cid:116) T2 is deﬁned as the following table, say T3:
Given lookup tables T1 and T2 representing two program
• T3’s key set is the union of the key sets of T1 and T2;
• For each key k in T3, T3[k] = T1[k] (cid:116) T2[k] (assuming
T1[k] or T2[k] is an empty set if k is not in the table).
Moreover, the least upper bound of program states entails
the partial order of any two program states: T1 (cid:116) T2 = T1 ↔
T2 ⊆ T1.
6.1.4 Memory Model
When encountering a memory load and store operation, we
must decide which memory cell is accessed by tracing the
memory address. However, considering CacheS models pro-
gram semantics with abstract values, a memory address can
usually contain one or several symbols instead of only con-
crete data. Therefore, policies (i.e., a “memory model”) are
usually required to determine the location of an accessed
memory cell given a symbolic pointer.
When deﬁning the abstract semantics within SAS (see our
technical report [76]), we assume the assistance of a sound
points-to analysis module as pre-knowledge. Nevertheless,
ﬁnding such a convenient tool for assembly code of large-
scale cryptosystems is quite difﬁcult in practice. We have
tried several popular “end-to-end” binary analysis platforms
that take an executable as the input and perform various re-
verse engineering campaigns including points-to analysis;
nevertheless, so far we cannot ﬁnd a practical and robust so-
lution to our scenario.
Therefore, we aim to implement a rigorous memory model
by solving the equality constraints of two abstract formu-
las. However, tentative tests show that such a memory model
may lose considerable precision in terms of reasoning sym-
bolic pointers and may also not be scalable enough. On the
other hand, since keys in the memory lookup table are for-
mulas of e (for stack pointers; recall that e represents the ini-
tial value of esp) or memory access expressions (for other
pointers), the current implementation of CacheS rigorously
reasons on the equality constraints if abstract values are com-
posed of e and concrete offsets, which is indeed often the
case in analyzing assembly code. For the rest (e.g., e and
symbolic offsets), we reason on the syntactical equivalence
of memory access expressions. This design tradeoff may
incorrectly deem equivalent symbolic pointers inequivalent
(due to the symbolic “alias” issue) but not vice versa. Ex-
periments show that this memory model is efﬁcient enough
to handle real-world cryptosystems while being promisingly
accurate.
6.2
Considering that information leaks detected in this research
are derived from secret-dependent memory accesses, CacheS
keeps track of the secret program information ﬂow through-
out the analysis. In this section we elaborate on cases where
the secret information can be propagated.
Variable-Level Information Flow. The explicit information
ﬂow is modeled in a straightforward way. Since variables
(i.e., registers, memory cells, and CPU ﬂags) are modeled
as abstract formulas, high credential information (exhibited
as abstract value f ∈ AVs) would naturally “ﬂow” among
variables during the computations. Moreover, reading from
unknown variables (those with empty value sets) generates a
symbol p as a proper over-approximation.
Information Flow via Memory Loading. By knowing the
underlying memory layout, it could be feasible to infer ta-
ble lookup indexes by observing the memory load outputs,
Information Flow
USENIX Association
28th USENIX Security Symposium    663
hence leaking table indexes of secrets to attackers. It should
be noted that such cases are not rare in real-world cryptosys-
tems, where many precomputed data structures are deployed
in the memory to speed up computations. Thus, we deﬁne
policies to capture information ﬂow through memory load-
ing. To do so, for a load operation, whenever the value sets of
its base address or memory offset include formula f ∈ AVs,
CacheS assigns the memory content to a fresh si, indicating
secret information could have potentially propagated to the
value being read. In contrast, when loading from unknown
memory cells (memory cells of empty value sets) via non-
secret addresses, we create a p to update the memory reader.
While most memory addressing formulas refer to speciﬁc
locations in the memory, symbols p and (cid:62) represent any pro-
gram (public) information. To safely approximate memory
read access via p and (cid:62), CacheS assigns (cid:62) to the mem-
ory reader. In case a memory storing is via symbol p or (cid:62),
we terminate the analysis since this would rewrite the whole
memory space. Additionally, we note that memory loading
and storing via (cid:62) are considered to be information leaks as
well since (cid:62) implies that a variable has certain residual se-
crets (see Sec. 6.4).
6.3
Our interprocedural analysis is context-sensitive. We build
a classic function summary-based interprocedural analysis
framework, where a summary ((cid:104) f (cid:48),i(cid:105),o) of a function call
towards f maps the calling context (cid:104) f (cid:48),i(cid:105) ( f (cid:48) is the caller
name and i is the input) to the function call output o. CacheS
maintains a set of summaries for each function f , and for
an upcoming call of f , its calling context is ﬁrst checked
regarding the existing summaries of f . In case the context is
a subset of any recorded entries (the partial order of calling
context is derived from the order of program states deﬁned
in Sec. 6.1.2), the analysis will be skipped and we directly
return the corresponding output.
Interprocedural Analysis
To recover the function inputs, we inquire the employed
reverse engineering platform (details are given in Sec. 7) to
obtain the number of parameters the approaching function
has. According to the calling convention of 32-bit x86 plat-
forms, a memory stack is used to store function parameters;
thus, we construct stack memory addresses of function pa-
rameters and acquire the value set of each parameter from
the program state lookup table at the call site. If some mem-
ory cells of function parameters are absent, symbol p is used
as an over-approximation. To compute the output informa-
tion of a function, we join program states at every return in-
struction when the analysis of the target function terminates,
which over-approximates the function return states.
6.4 Translating Abstract Values into SMT
Formulas
As noted earlier (Sec. 5), cache-access side channels are
summarized into SMT constraints. Upon the termination of
analyzing each function, we identify secret-dependent mem-
ory addresses a ∈ AVs and build the side channel constraints.
SMT solvers are used to solve the constraint and check
whether different secrets can lead to cache line access vari-
ants. Nevertheless, while many works to date leverage sym-
bolic execution to construct SMT formulas, here we reason
on program states within SAS. Therefore, before constraint
checking, we ﬁrst translate abstract formulas into SMT for-
mulas.
Each abstract formula is maintained as a symbolic “tree”
in CacheS, where tree leaves are symbols and concrete data
while other nodes are operators. At this step, we translate
each leaf on the tree into a bit vector implemented by a
widely-used SMT solver—Z3 [30]; a bit vector would be in-
stantialized with a numeric value if it was derived from a
constant. In addition, we translate abstract operators on the
tree into bit vector operations in Z3. Hence, an abstract for-
mula tree would be reduced bottom-up into an SMT formula.
Translate Secret Symbols into Unique Bit Vectors. As
noted earlier, si symbols are semantically different, each of
which represents different pieces of secrets. For the imple-
mentation, we assign a unique id for each newly-created si
symbol, which further leads to the creation of unique bit vec-
tors at this step. In contrast, p (and e) symbols are trans-
formed into identical bit vectors.
Memory Access via (cid:62). It is easy to see that (cid:62) implies that a
variable has some residual secrets along with possibly public
information. Hence, in addition to checking the constructed
SMT constraints with Z3, memory accesses are ﬂagged as
vulnerable whenever their corresponding addressing formu-
las are (cid:62).
7
CacheS is mainly written in Scala (in 6,764 LOC; counted
by CLOC [29]). The tentative implementation (in 7,163
LOC), which models program semantics with logic formu-
las (Sec. 3), is maintained as a separate “branch” of the code
base.
Implementation
Starting from an input binary code, the ﬁrst step is to re-
cover the assembly program as well as control ﬂow and call
graphs. Here we employ a popular reverse engineering tool,
IDA-Pro (version 6.9) for the reverse engineering task [1].
We use the default conﬁgurations of IDA-Pro to recover as-
sembly code and program control structures from the input
executables.
Assembly Lifting. Many existing binary analysis infrastruc-
tures have provided facilities to lift x86 assembly code into a
high-level intermediate representation. Without reinventing
the wheel, here we employ a well-developed binary analysis
platform BINNAVI [34] to transform x86 assembly code into
a platform-independent intermediate language, REIL [72].
Our analysis procedures are built on top of the recovered rep-
resentations. In addition, for a formal deﬁnition of program
concrete semantics in terms of the REIL language, please
refer to our technical report [76].
The current implementation of CacheS analyzes ELF bi-
naries on the x86 platform. Nevertheless, since REIL lan-
guage is designed as platform-independent, there is no fun-
damental limitation for CacheS to analyze binaries of other
664    28th USENIX Security Symposium
USENIX Association
Table 1: Cryptosystems analyzed by CacheS.
Implementation Versions
1.6.1, 1.7.3
Libgcrypt [48]
1.0.2f, 1.0.2k BN mod exp mont consttime
OpenSSL [59]
mbedTLS [57]
OpenSSL [59]
mbedTLS [57]
mbedtls mpi exp mod
x86 AES decrypt compact
mbedtls internal aes decrypt
Starting Function
gcry mpi powm
1.0.2f, 1.0.2k
2.5.1
2.5.1
Analysis
Implement
Which Algorithm
RSA/ElGamal
RSA
AES
formats or from other platforms (e.g., PE binaries on Win-
dows) as long as the assembly instructions can be translated
into REIL statements. As aforementioned, our current proto-
type focuses on 32-bit ELF binaries since the state-of-the-art
REIL lifter (BinNavi [34]) does not have an ofﬁcial support
for 64-bit binaries. However, the proposed technique shall
be applicable to 64-bit binaries with no additional technical
hurdles.
Recover x86 Memory Access Instructions from REIL
Statements. As noted in Sec. 6.1.2, we use memory ac-
cess expressions instead of address formulas as the key to
simplify the memory lookup. While the memory access ex-
pressions can be acquired by checking assembly instructions,
note that our analysis is launched on REIL IR; one memory
access instruction is extended into multiple IR statements.
Hence, we perform def-use analysis to “collapse” IR state-
ments belonging to the same instruction and recover the cor-
responding memory access expression.
Critical Functions. CacheS is designed to perform both in-
ter and intra-procedural analysis on any binary code compo-
nent. For the evaluations in this research, instead of start-
ing from the program entry point, analyses were launched
on critical functions of cryptosystems that have become the
target for many previous attacks. Such critical functions are
the starting points of our interprocedural analysis, and we
recursively discover all the reachable functions on the call
graph. As reported in our evaluation (see Table 2), these re-
cursively collected functions usually form a non-trivial sub-
graph on the program call graph. In addition, taking these
critical functions as the starting points of CacheS makes it
easier to compare our ﬁndings with existing work.
8 Evaluation
In contrast to many previous studies in which cache-based
side channels are detected from only simple cases, CacheS is
evaluated on several real-world cryptosystems. As reported
in Table 1, three cryptosystems are evaluated in this re-
search. OpenSSL and Libgcrypt are widely used cryptosys-
tems on multi-purpose computers, while mbedTLS is com-
monly adopted by embedded devices. Eight critical func-
tions are selected as the starting point of our analysis, which
covers major security-sensitive components in three crypto
algorithm implementations: RSA, AES, and ElGamal.
To prepare CacheS inputs, we compile test programs
shipped in each cryptosystem and link with the correspond-
ing libraries. All the crypto libraries are written in C. We
build each library and test program into a 32-bit ELF binary
on Ubuntu 12.04 with gcc compiler (version 4.6.3).
8.1 Evaluation Result Overview
Table 2 presents the evaluation result overview. In summary,
208 information leak points are reported from the real world
cryptosystems evaluated in this research. We interpret the
results as promising; most of the evaluated cryptosystems
contain information leaks due to cache-based side channels,
and CacheS helps to pinpoint these leaks with program-wide
static analysis.
It is commonly acknowledged that the table lookup im-
plementation of the AES decryption routine is vulnerable to
various real-world cache attacks. CacheS identiﬁes 32 in-
formation leaks from the AES implementations of OpenSSL
(versions 1.0.2f and 1.0.2k), and 64 leaks from mbedTLS.
Indeed, all of these issues are lookup table queries via direct
usages of secrets, which is consistent with ﬁndings in exist-
ing research [25, 77].
Existing research has pinpointed multiple information
leaks in the modular exponentiation implementation of
OpenSSL and Libgcrypt [77, 52]; vulnerable functions are
adopted by both RSA and ElGamal for decryption. CacheS
conﬁrmed these ﬁndings (see Sec. 8.4 for one false positive
in OpenSSL). Furthermore, CacheS successfully revealed a
much larger information leakage surface than existing trace
and static analysis based techniques, because of its scal-
able modeling of program semantics. Table 2 shows that
CacheS identiﬁes more information leaks from Libgcrypt
and OpenSSL in addition to conﬁrming all issues reported
by CacheD [77]. Moreover, CacheS identiﬁes multiple infor-
mation leakage sites from the modular exponentiation imple-
mentation of mbedTLS, which, to the best of our knowledge,
is unknown to the research community.
the RSA/ElGamal
While 40 information leakage sites are reported in