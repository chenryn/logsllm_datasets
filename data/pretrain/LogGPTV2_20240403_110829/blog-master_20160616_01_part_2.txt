    }  
    if (walsndctl->lsn[SYNC_REP_WAIT_FLUSH] flush)  
    {  
        walsndctl->lsn[SYNC_REP_WAIT_FLUSH] = MyWalSnd->flush;  
        numflush = SyncRepWakeQueue(false, SYNC_REP_WAIT_FLUSH);  
    }  
...  
```  
SyncRepWakeQueue @ src/backend/replication/syncrep.c  
```  
/*  
 * Walk the specified queue from head.  Set the state of any backends that  
 * need to be woken, remove them from the queue, and then wake them.  
 * Pass all = true to wake whole queue; otherwise, just wake up to  
 * the walsender's LSN.  
 *  
 * Must hold SyncRepLock.  
 */  
static int  
SyncRepWakeQueue(bool all, int mode)  
{  
...  
    while (proc)  // 修改对应的backend process 的latch  
    {  
        /*  
         * Assume the queue is ordered by LSN  
         */  
        if (!all && walsndctl->lsn[mode] waitLSN)  
            return numprocs;  
        /*  
         * Move to next proc, so we can delete thisproc from the queue.  
         * thisproc is valid, proc may be NULL after this.  
         */  
        thisproc = proc;  
        proc = (PGPROC *) SHMQueueNext(&(WalSndCtl->SyncRepQueue[mode]),  
                                       &(proc->syncRepLinks),  
                                       offsetof(PGPROC, syncRepLinks));  
        /*  
         * Set state to complete; see SyncRepWaitForLSN() for discussion of  
         * the various states.  
         */  
        thisproc->syncRepState = SYNC_REP_WAIT_COMPLETE;  // 满足条件时，改成SYNC_REP_WAIT_COMPLETE    
....  
```  
## 如何设置事务可靠性级别  
PostgreSQL 支持在会话中设置事务的可靠性级别。   
off 表示commit 时不需要等待wal 持久化。   
local 表示commit 是只需要等待本地数据库的wal 持久化。   
remote_write 表示commit 需要等待本地数据库的wal 持久化，同时需要等待sync standby节点wal write buffer完成(不需要持久化)。   
on 表示commit 需要等待本地数据库的wal 持久化，同时需要等待sync standby节点wal持久化。   
提醒一点， synchronous_commit 的任何一种设置，都不影响wal日志持久化必须先于shared buffer脏数据持久化。 所以不管你怎么设置，都不好影响数据的一致性。  
```  
synchronous_commit = off                # synchronization level;  
                                        # off, local, remote_write, or on  
```  
## 如何实现同步复制降级  
从前面的代码解析可以得知，如果 backend process 进入了等待循环，只接受几种信号降级。 并且降级后会告警，表示本地wal已持久化，但是sync standby节点不确定wal有没有持久化。   
如果你只配置了1个standby，并且将它配置为同步流复制节点。一旦出现网络抖动，或者sync standby节点故障，将导致同步事务进入等待状态。   
怎么降级呢？   
### 方法1.   
修改配置文件并重置  
```  
$ vi postgresql.conf    
synchronous_commit = local  
$ pg_ctl reload  
```  
然后cancel 所有query .  
```  
postgres=# select pg_cancel_backend(pid) from pg_stat_activity where pid<>pg_backend_pid();  
```  
收到这样的信号，表示事务成功提交，同时表示WAL不知道有没有同步到sync standby。  
```  
WARNING:  canceling wait for synchronous replication due to user request  
DETAIL:  The transaction has already committed locally, but might not have been replicated to the standby.  
COMMIT  
postgres=# show synchronous_commit ;  
 synchronous_commit   
--------------------  
 off  
(1 row)  
```  
同时它会读到全局变量synchronous_commit 已经是 local了。   
这样就完成了降级的动作。  
### 方法2.   
方法1的降级需要对已有的正在等待wal sync的pid使用cancel进行处理，有点不人性化。   
可以通过修改代码的方式，做到更人性化。   
SyncRepWaitForLSN for循环中，加一个判断，如果发现全局变量sync commit变成local, off了，则告警并退出。这样就不需要人为的去cancel query了.  
```  
WARNING:  canceling wait for synchronous replication due to user request  
DETAIL:  The transaction has already committed locally, but might not have been replicated to the standby.  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")