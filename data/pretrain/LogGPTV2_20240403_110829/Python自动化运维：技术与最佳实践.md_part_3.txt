247
256
---
## Page 22
Linux公社 www.linuxidc.com
部
疝
---
## Page 23
Linux公社 www.linuxidc.com
基础篇
第
第
第
第
4章
3
章
章
部分
Python与系统安全
定制业务质量报表
业务服务监控详解
系统基础信息模块
---
## Page 24
1.1
示例将在一个连续的Python交互环境中进行。
间响应，将异常出现在苗头时就得以处理。
集到这些数据后，我们就可以全方位了解系统服务的状态，再结合告警机制，可以在第一时
指标数据，包括Linux基本性能、块设备、网卡接口、系统信息、网络地址库等信息。在采
资源是否应该扩容。本章通过运用Python第三方系统基础模块，可以轻松获取服务关键运营
服务质量及用户体验，另外获取设备的流量信息，也可以让运维人员更好地评估带宽、设备
的健康程度，同时也是衡量业务的服务质量的依据，比如系统资源吃紧，会直接影响业务的
Chytee!:
进人Python 终端，执行python 命令进人交互式的 Python 环境，像这样：
本章通过具体的示例来帮助读者学习、理解并掌握。在本章接下来的内容当中，我们的
psutil是一个跨平台库（http://code.google.com/p/psutil)），能够轻松实现获取系统运行的
系统基础信息采集模块作为监控模块的重要组成部分，能够帮助运维人员了解当前系统
系统性能信息模块psutil
>>>
Python2.6.6(r266:84292,
#python
vtr
系统基础信息模块详解
第1章
Linux公社 www.linuxidc.com
Nov222013,
on linuxz
12:16:22）
---
## Page 25
取CPU的硬件相关信息，比如CPU的物理个数与逻辑个数，具体见下面的操作例子：
的方法来满足需求，非常简单实用。
行状态及质量。psutil模块已经封装了这些方法，
1.1.1
命令如下：
操作系统信息往往采用编写 shell来实现，如获取当前物理内存总大小及已使用大小，shell
Solaris等操作系统，支持从2.4到3.4的Python版本，目前最新版本为2.0.0。通常我们获取
netstat、ifconfig、who、df、kill、free、nice、ionice、iostat、iotop、uptime、pidof、tty
析和限制系统资源及进程的管理。它实现了同等命令行工具提供的功能，如ps、top、lsof、
进程和系统利用率（包括CPU、内存、磁盘、网络等）信息。它主要应用于系统监控，分
我们使用Python的psutil.cpu_timesO方法可以非常简单地得到这些信息，同时也可以获
口Idle，CPU处于idle状态的时间百分比。
Wait IO，由于IO等待而使CPU处于idl（空闲）状态的时间百分比；
口SystemTime，执行内核进程和中断的时间百分比；
口UserTime，执行用户进程的时间百分比；
Linux操作系统的CPU利用率有以下几个部分：
（1）CPU信息
采集系统的基本性能信息包括CPU、内存、磁盘、网络等，可以完整描述当前系统的运
#wget https://pypi.python.org/packages/source/p/psutil/psutil-2.0.0.tar.gz
psutil的源码安装步骤如下：
相比较而言，使用 psutil库实现则更加简单明了。psutil 大小单位一般都采用字节，如下:
(506277888L,500367360L)
>>>mem.total,mem.used
>>>import psutil
物理内存total值：free-m|grep Mem|awk(print$2}
获取系统性能信息
python setup.py install
cd psuti1-2.0.0
tar-xzvf psutil-2.0.0.tar.gz
-no-check-certificate
Linux公社www.linuxidc.com
目前支持32位和64位的Linux、Windows、OSX、FreeBSD和Sun
用户可以根据自身的应用场景，调用相应
第1章系统基础信息模块详解
3
---
## Page 26
下面的操作例子：
write_time（磁盘写时间）等。这些IO信息可以使用psutil.disk_io_countersO获取，具体见
IO数）、read_bytes（IO读字节数）write_bytes（IO写字节数）、read_time（磁盘读时间）
用psutil.disk_usage方法获取。磁盘IO信息包括read_count（读IO数）write_count（写
例子：
使用psutil.virtual_memoryO与psutilswap_memoryO方法获取这些信息，具体见下面的操作
闲内存数）、buffers（缓冲使用数）、cache（缓存使用数）、swap（交换分区使用数）等，分别
4
第一部分基础篇
在系统的所有磁盘信息中，我们更加关注磁盘的利用率及IO信息，其中磁盘利用率使
（3）磁盘信息
Linux系统的内存利用率信息涉及total（内存总数）used（已使用的内存数）、free（空
>>>psutil.disk_usage('/')
>>>
free=1073733632L, percent=0.0,sin=0,sout=0)
>>>psutil.swap_memory()
6410240L
>>>mem.free
506277888L
>>>mem.total
cached=81506304)
free=6410240L,
svmem(tota1=506277888L,
>>>mem
>>>mem = psutil.virtual_memory()
>>>importpsutil
（2）内存信息
>>>psutil.cpu_count(logical=False)
>>>psutil.cpu_count()
38.0
>>>psutil.cpu_times().user
steal=0.0,guest=0.0)
iowait=53.399999999999999, irg=2.9100000000000001, softirq=79.579999999999998,
scputimes(user=38.039999999999999, nice=0.01,
>>>psutil.cpu_times（）#使用cpu_times方法获取cPU完整信息，需要显示所有逻辑cPU信息，
>>
>>
>>>import psutil
Linux公社www.linuxidc.com
#获取空闲内存数
#获取内存总数
active=245858304,inactive=163733504,
avai1ab1e=204951552L,
#获取cPU的逻辑个数，默认1ogical=True4
#使用psutil.disk_usage方法获取分区（参数）的使用情况
#获取sWAP分区信息sswap（total=1073733632L，used=0L，
#获取单项数据信息，如用户user的CPU时间比
#使用psutil.virtual_memory方法获取内存完整信息
#获取CPU的物理个数
percent=59.5,used=499867648L,
system=110.88,
buffers=117035008L,
idle=177062.59
---
## Page 27
时间等信息，具体见下面的操作例子：
见下面的操作例子：
recv=212672（接收数据包数）等。这些网络信息使用psutil.net_io_countersO方法获取，具体
bytes_recv=28220119（接收字节数）、packets_sent=200978（发送数据包数）、packets_
1389563460.0
host='192.168.1.103',started=1394723840.0)]
started=1394638720.0),
>>>psutil.users()
除了前面介绍的几个获取系统基本信息的方法，psutil模块还支持获取用户登录、开机
（5）其他系统信息
snetio(bytes_sent=694750,
packets_recv=198526,
snetio(bytes_sent=27098178,
>>>psutil.net_io_counters()
系统的网络信息与磁盘IO类似，涉及几个关键点，包括bytes_sent（发送字节数）
H:%M:%S")
>>>psutil.boot_time()
>>>importpsutil,datetime
recv=14175,errin=0,errout=0,dropin=0,
recv=212672,errin=0,errout=0,dropin=0,dropout=0)
（4）网络信息
write_bytes=204300288,read_time=70950,write_time=182330)}
'sdal':
count=3,
bytes=0,
>>>psutil.disk_io_counters(perdisk=True)
bytes=204312576, read_time=72266, write_time=182485)
sdiskio(read_count=9424,
>>>psutil.disk_io_counters()
[suser(name='root',
>>>psutil.net_
percent=25.899999999999999)
sdiskusage(tota1=15481577472,
sda2':
>>
>>
sdiskio(read_count=8484,
read_bytes=2855936, write_bytes=12288,
Linux公社
read time=445,
sdiskio(read_count=322,
_io_counters(pernic=True)
#使用psutil.users 方法返回当前登录系统的用户信息
#使用psutil.boot_time 方法获取开机时间，以Linux 时间戳格式返回
errin=0,
write_time=0),
terminal='pts/0',
 www.linuxidc.com
bytes_recv=1816743,
bytes_recv=28220119,
write_count=35824,
suser(name='root',
#使用psutil.net_io_counters获取网络总的Io信息，默
#读写信息
errout=0,
write_count=35821,.
write_count=0,
used=4008087552,
dropout=0)}
#pernic=True输出每个网络接口的Io信
'sda3':sdiskio(read_count=618,
#读写信息
#“perdisk=True”参数获取单个分区Io个数
dropin=0,
第1章
read_time=871,write_time=155)
read_bytes=128006144, write
packets_sent=2478,packets
packets_sent=200978, packets
:host='192.168.1.103*
read_bytes=1445888,
系统基础信息模块详解
terminal='pts/1
read bytes=123704320,
free=10687057920,
'etho'
write
write
5
---
## Page 28
等信息，具体见下面的操作例子：
有进程 PID，使用 psutil.ProcesSO方法获取单个进程的名称、路径、状态、系统资源利用率
的数据参考。
可以呈现出指定进程是否存活、资源利用情况，为开发人员的代码优化、问题定位提供很好
时间、查看或设置CPU亲和度、内存使用率、IO信息、socket连接、线程数等，这些信息
6第一部分基础篇
1.1.2
获得当前系统的进程信息，
>>>psutil.pids()
>>>import psutil
psutil模块在获取进程信息方面也提供了很好的支持，包括使用psutil.pidsO方法获取所
（1）进程信息
[pconn(fd=65,
>>>p.connections()
bytes=4722688)
pio(read_count=41133,
>>>p.io_counters()
pmem(rss=71626752,
>>>p.memory_info()
>>>p.cpu_affinity()
'/usr/1ocal/hadoop-1.2.1*
2014-01-1222:51:00
14.147714861289776
>>>p.memory_percent()
>>>p.cpu_times()
pgids（real=0,
>>>p.gids()
ouids（real=0,
>>>p.uids()
1394852592.6900001
>>>p.create_time()
sleeping'
>>>p.status()
>>>p.cwd（)
/usr/java/jdkl.6.0_45/bin/java
>>>p.exe()
'java'
>>>
系统进程管理方法
p.name()
p=psutil.Process(2424)
#进程工作目录绝对路径
Linux公社
#进程bin路径
effective=0,saved=0)
effective=0,
#进程名
#进程gid信息
#进程uid信息
family=10,
#进程状态
vms=1575665664)
#列出所有进程PID
#等信息
#返回打开进程socket的namedutples列表，包括fs、family、laddr
#进程IO信息，包括读写IO数及字节数
#进程内存rss、vms 信息
#get进程CPU亲和度，如要设置进程CPU亲和度，将CPU号作为参数即可
#进程创建时间，时间戳格式
，可以让运维人员得知应用程序的运行状态，包括进程的启动
write_c0unt=16811,read_bytes=37023744,
#进程内存利用率
#转换成自然时间格式
saved=0)
type=l,
 www.linuxidc.com
11
12,
laddr=（'::ffff:192.168.1.20*,
13,14,15,
16，
17,-18,19...·.]
9000)，
write
---
## Page 29
高效完成IP的规划工作，下面进行详细介绍。
IPy（https://github.com/haypo/python-ipy/），最新版本为V0.81。IPy模块可以很好地辅助我们
括网段、网络掩码、广播地址、子网数、IP类型等。Python 提供了一个强大的第三方模块
效率，包括网络性能、可扩展性等方面，在这个过程当中，免不了要计算大量的IP地址，包
1.2
的运行状态。具体实现方法如下：
IP地址规划是网络设计中非常重要的一个环节，规划的好坏会直接影响路由协议算法的
#python setup.py install
以下是IPy模块的安装，这里采用源码的安装方式：
pcputimes(user=0.01,system=0.040000000000000001)
psutil提供的 popen类的作用是获取用户启动的应用程序进程信息，以便跟踪程序进程
# tar -zxvf IPy-0.81.tar.gz
check-certificate
>>>p.cpu_times()
>>>p.communicate()
>>>p.name()
>>>p=psutil.Popen(["/usr/bin/python",
#通过psutil的 Popen方法启动的应用程序，可以跟踪该程序运行的所有相关信息
>>>from subprocess import PIPE
（2）popen类的使用
实用的 IP 地址处理模块 IPy
('hello\n',
root'
>>>p.username()
'python'
>>>importpsutil
33
>>>p.num_threads()
raddr=（),....]
cdIPy-0.81
口1.1.1节示例参考https://github.com/giampaolo/psutil。
Linux公社www.linuxidc.com
None)
#得到进程运行的CPU 时间，更多方法见上一小节
#进程开启的线程数
第1章
系统基础信息模块详解
---
## Page 30
比如通过version方法就可以区分出IPv4与IPv6，如：
1.2.1IP 地址、网段的基本处理
8第一部分
IPy模块包含IP类，使用它可以方便处理绝大部分格式为IPv6及IPv4的网络和地址。
8.8.8.8
>>>print(IP（0x8080808))
00001000000010000000100000001000*
>>>IP('8.8.8.8').strBin()
>>>IP('8.8.8.8').strHex()
134744072
>>>IP("8.8.8.8").int()
>>>IP('8.8.8.8).iptype()
>>>ip.iptype()
['20.1.168.192.in-addr.arpa.']
>>>ip=IP('192.168.1.20)
>>>from IPyimport IP