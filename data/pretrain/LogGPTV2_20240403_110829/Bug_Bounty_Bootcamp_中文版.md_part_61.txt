`      getValue()     ` method run on its `      $obj     ` property.
请注意，示例3实现了\_\_toString()魔术方法1。在这种情况下，当一个Example3实例被视为字符串时，它将返回在其\$obj属性上运行的getValue()方法的结果。
Let's also say that, somewhere in the application, the code defines the
class `      SQL_Row_Value     ` . It has a method named
`      getValue()     ` , which executes a SQL query. The SQL query
takes input from the `      $_table     ` property of the
`      SQL_Row_Value     ` instance:
假设在应用程序的某个地方，代码定义了SQL_Row_Value类。它有一个名为getValue()的方法，用于执行SQL查询。该SQL查询从SQL_Row_Value实例的\$
\_table属性中获取输入：
    class SQL_Row_Value
    {
      private $_table;
      // some PHP code...
      function getValue($id)
      {
        $sql = "SELECT * FROM {$this->_table} WHERE id = " . (int)$id;
        $result = mysql_query($sql, $DBFactory::getConnection());
        $row = mysql_fetch_assoc($result);
    return $row['value'];
      }
    }
An attacker can achieve SQL injection by controlling the
`      $obj     ` in `      Example3     ` . The following code will
create an `      Example3     ` instance with `      $obj     ` set to a
`      SQL_Row_Value     ` instance, and with `      $_table     ` set
to the string `      "SQL Injection"     ` :
攻击者可以通过控制Example3中的\$obj实现SQL注入。以下代码将创建一个Example3实例，其\$obj设置为SQL_Row_Value实例，并将\$\_table设置为字符串"SQL注入"：
    class SQL_Row_Value
    {
      private $_table = "SQL Injection";
    }
    class Example3
    {
      protected $obj;
      function __construct()
      {
        $this->obj = new SQL_Row_Value;
      }
    }
    print urlencode(serialize(new Example3));
[ ]{#c14.xhtml#Page_241 .pagebreak title="241"} As a result, whenever
the attacker's `      Example3     ` instance is treated as a string,
its `      $obj     ` 's `      get_Value()     ` method will be
executed. This means the `      SQL_Row_Value     ` 's
`      get_Value()     ` method will be executed with the
`      $_table     ` string set to `      "SQL Injection"     ` .
因此，每当攻击者的 Example3 实例被视为字符串时，其 \$obj 的 get_Value()
方法将被执行。这意味着 SQL_Row_Value 的 get_Value() 方法将被执行，并将
\$\_table 字符串设置为"SQL 注入"。
The attacker has achieved a limited SQL injection, since they can
control the string passed into the SQL query
`      SELECT * FROM {$this->_table} WHERE id = " . (int)$id;     ` .
攻击者已经成功进行了有限的SQL注入，因为他们可以控制传递到SQL查询语句
\`SELECT \* FROM {\$this-\>\_table} WHERE id = \" . (int)\$id;\`
中的字符串。
POP chains are similar to *return-oriented programming (* *ROP)*
attacks, an interesting technique used in binary exploitation. You can
read more about it on Wikipedia, at
[https://en.wikipedia.org/wiki/Return-oriented_programming](https://en.wikipedia.org/wiki/Return-oriented_programming){.LinkURL}
*.*
POP链和返回导向编程（ROP）攻击类似，是二进制利用中使用的一种有趣技术。更多信息请参见维基百科网址：https://en.wikipedia.org/wiki/Return-oriented_programming。
### Java {#c14.xhtml#h2-123456c14-0002}
Now that you understand how insecure deserialization in PHP works, let's
explore another programming language prone to these vulnerabilities:
Java. Java applications are prone to insecure deserialization
vulnerabilities because many of them handle serialized objects. To
understand how to exploit deserialization vulnerabilities in Java, let's
look at how serialization and deserialization work in Java.
现在你已经了解了PHP中不安全反序列化的工作原理，让我们来探究另一种易受这些漏洞影响的编程语言：Java。由于许多Java应用程序都处理序列化对象，因此Java应用程序容易受到不安全的反序列化漏洞的影响。要了解如何利用Java中的反序列化漏洞，让我们来看看Java中序列化和反序列化的工作原理。
For Java objects to be serializable, their classes must implement the
`      java.io.Serializable     ` interface. These classes also
implement special methods, `      writeObject()     ` and
`      readObject()     ` , to handle the serialization and
deserialization, respectively, of objects of that class. Let's look at
an example. Store this code in a file named *SerializeTest.java* :
Java对象要实现序列化，它们的类必须实现java.io.Serializable接口。这些类还实现了特殊方法writeObject()和readObject()，用于分别处理该类对象的序列化和反序列化。让我们来看一个例子。将这个代码存储在名为SerializeTest.java的文件中：
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    import java.io.FileInputStream;
    import java.io.FileOutputStream;
    import java.io.Serializable;
    import java.io.IOException;
    1 class User implements Serializable{
    2 public String username;
    }
    public class SerializeTest{
      public static void main(String args[]) throws Exception{
        3 User newUser = new User();
        4 newUser.username = "vickie";
          FileOutputStream fos = new FileOutputStream("object.ser");
          ObjectOutputStream os = new ObjectOutputStream(fos);
        5 os.writeObject(newUser);
          os.close();
          FileInputStream is = new FileInputStream("object.ser");
          ObjectInputStream ois = new ObjectInputStream(is);
        6 User storedUser = (User)ois.readObject();
          System.out.println(storedUser.username);
          ois.close();
        }
    }
Then, in the directory where you stored the file, run these commands.
They will compile the program and run the code:
在存储文件的目录中，运行以下命令。它们将编译程序并执行代码：
    $ javac SerializeTest.java
    $ java SerializeTest
You should see the string `      vickie     ` printed as the output.
Let's break down the program a bit. First, we define a class named
`      User     ` that implements `      Serializable     ` [ 1
]{.CodeAnnotation aria-label="annotation1"} . Only classes that
implement `      Serializable     ` can be serialized and deserialized.
The `      User     ` class has a `      username     ` attribute that
is used to store the user's username [ 2 ]{.CodeAnnotation
aria-label="annotation2"} .
你应该看到字符串"vickie"作为输出。让我们稍微解析一下这个程序。首先，我们定义了一个名为User的类，它实现了Serializable接口
1。只有实现了Serializable接口的类才能被序列化和反序列化。User类有一个用户名属性，用于存储用户的用户名
2。
Then, we create a new `      User     ` object [ 3 ]{.CodeAnnotation
aria-label="annotation3"} and set its username to the string
`      "vickie"     ` [ 4 ]{.CodeAnnotation aria-label="annotation4"} .
We write the serialized version of `      newUser     ` and store it
into the file *object.ser* [ 5 ]{.CodeAnnotation
aria-label="annotation5"} . Finally, we read the object from the file,
deserialize it, and print out the user's username [ 6 ]{.CodeAnnotation
aria-label="annotation6"} .
然后，我们创建一个新的用户对象3，并将其用户名设置为字符串"vickie"4。我们将newUser的序列化版本写入文件object.ser中5。最后，我们从文件中读取对象，对其进行反序列化，并打印出用户的用户名6。
To exploit Java applications via an insecure deserialization bug, we
first have to find an entry point through which to insert the malicious
serialized object. In Java applications, serializable objects are often
used to transport data in HTTP headers, parameters, or cookies.
为了通过不安全的反序列化漏洞利用Java应用程序，我们首先必须找到一个入口点来插入恶意序列化对象。在Java应用程序中，可序列化对象通常用于在HTTP标头，参数或cookie中传输数据。
Java serialized objects are not human readable like PHP serialized
strings. They often contain non-printable characters as well. But they
do have a couple signatures that can help you recognize them and find
potential entry points for your exploits:
Java序列化的对象不像PHP序列化的字符串那样易于人类阅读。它们通常包含不可打印的字符。但是它们确实有一些标记可以帮助您识别它们，并找到潜在的漏洞入口：
-   Starts with `       AC ED 00 05      ` in hex or `       rO0      `
    in base64. (You might see these within HTTP requests as cookies or
    parameters.)
-   The `       Content-Type      ` header of an HTTP message is set to
    `       application/x-java-serialized-object      ` .
Since Java serialized objects contain a lot of special characters, it's
common to encode them before transmission, so look out for differently
encoded versions of these signatures as well.
由于Java序列化的对象包含许多特殊字符，因此在传输之前对它们进行编码是很常见的，因此也要注意这些签名的不同编码版本。
After you discover a user-supplied serialized object, the first thing
you can try is to manipulate program logic by tampering with the
information stored within the objects. For example, if the Java object
is used as a cookie for access control, you can try changing the
usernames, role names, and other identity markers that are present in
the object, re-serialize it, and relay it back to the application. You
can also try tampering with any sort of value in the object that is a
filepath, file specifier, or control flow value to see if you can alter
the program's flow.
当你发现一个用户提供的序列化对象后，你可以尝试通过篡改对象中存储的信息来操纵程序逻辑。例如，如果Java对象被用作访问控制的cookie，你可以尝试更改对象中存在的用户名、角色名和其他标识标记，重新序列化并将其转发回应用程序。你也可以尝试篡改对象中的任何类型的值，包括文件路径、文件指定符或控制流值，以查看是否可以更改程序的流程。
Sometimes when the code doesn't restrict which classes the application
is allowed to deserialize, it can deserialize any serializable classes
to which [ ]{#c14.xhtml#Page_243 .pagebreak title="243"} it has access.
This means attackers can create their own objects of any class. A
potential attacker can achieve RCE by constructing objects of the right
classes that can lead to arbitrary commands.
有时，当代码不限制应用程序可反序列化的类时，它可以反序列化任何具有访问权限的可序列化类。这意味着攻击者可以创建任何类的自己的对象。潜在的攻击者可以通过构造正确类的对象来实现RCE，从而导致任意命令。
#### Achieving RCE {#c14.xhtml#h3-123456c14-0006}
The path from a Java deserialization bug to RCE can be convoluted. To
gain code execution, you often need to use a series of gadgets to reach
the desired method for code execution. This works similarly to
exploiting deserialization bugs using POP chains in PHP, so we won't
rehash the whole process here. In Java applications, you'll find gadgets
in the libraries loaded by the application. Using gadgets that are in
the application's scope, create a chain of method invocations that
eventually leads to RCE.
从Java反序列化漏洞到远程代码执行的路径可能比较曲折。要想实现代码执行，通常需要使用一系列的小工具来达到执行代码的目的方法。这种方法类似于使用POP的PHP反序列化漏洞利用链，因此我们在这里不再赘述整个过程。在Java应用程序中，你可以在应用程序加载的库中找到小工具。使用应用程序范围内的小工具，创建一条方法调用链，最终导致远程代码执行。
Finding and chaining gadgets to formulate an exploit can be
time-consuming. You're also limited to the classes available to the
application, which can restrict what your exploits can do. To save time,
try creating exploit chains by using gadgets in popular libraries, such
as the Apache Commons-Collections, the Spring Framework, Apache Groovy,
and Apache Commons FileUpload. You'll find many of these published
online.
寻找和链接小工具以制定攻击可以非常耗时。您还受应用程序可用类的限制，这可能会限制攻击的功能。为节省时间，可以使用流行库中的小工具创建攻击链，例如Apache
Commons-Collections、Spring Framework、Apache Groovy和Apache Commons
FileUpload。您会在网上找到很多这样的工具。
#### Automating the Exploitation by Using Ysoserial {#c14.xhtml#h3-123456c14-0007}
Ysoserial (
[https://github.com/frohoff/ysoserial/](https://github.com/frohoff/ysoserial/){.LinkURL}
) is a tool that you can use to generate payloads that exploit Java
insecure deserialization bugs, saving you tons of time by keeping you
from having to develop gadget chains yourself.
Ysoserial是一个工具，您可以使用它来生成利用Java不安全反序列化漏洞的负载，从而节省时间，无需自己开发工具链。
Ysoserial uses a collection of gadget chains discovered in common Java
libraries to formulate exploit objects. With Ysoserial, you can create
malicious Java serialized objects that use gadget chains from specified
libraries with a single command:
Ysoserial 使用常见的 Java 库中发现的一系列 gadget 链来创建利用对象。使用
Ysoserial，只需一条命令，就可以创建使用来自指定库的 gadget 链的恶意 Java
序列化对象。
    $ java -jar ysoserial.jar gadget_chain command_to_execute
For example, to create a payload that uses a gadget chain in the
Commons-Collections library to open a calculator on the target host,
execute this command:
例如，要创建一个使用Commons-Collections库中的gadget
chain打开目标主机上的计算器的payload，请执行以下命令：
    $ java -jar ysoserial.jar CommonsCollections1 calc.exe
The gadget chains generated by Ysoserial all grant you the power to
execute commands on the system. The program takes the command you
specified and generates a serialized object that executes that command.
Ysoserial生成的设备链都赋予您在系统上执行命令的能力。该程序接收您指定的命令，并生成一个序列化对象来执行该命令。