##### ISSUE TYPE
  * Feature Idea
##### COMPONENT NAME
gce module  
gce_metadata module
##### ANSIBLE VERSION
    ansible 2.5.0b1
      config file = /work/ansible/git/ansible/ansible.cfg
      configured module search path = [u'/home/ansible/.ansible/plugins/modules', u'/usr/share/ansible/plugins/modules']
      ansible python module location = /work/ansible/virt-2.7/lib/python2.7/site-packages/ansible
      executable location = /work/ansible/virt-2.7/bin/ansible
      python version = 2.7.5 (default, Aug  4 2017, 00:39:18) [GCC 4.8.5 20150623 (Red Hat 4.8.5-16)]
##### CONFIGURATION
ANSIBLE_PIPELINING(/work/ansible/git/ansible/ansible.cfg) = True  
CACHE_PLUGIN(/work/ansible/git/ansible/ansible.cfg) = jsonfile  
CACHE_PLUGIN_CONNECTION(/work/ansible/git/ansible/ansible.cfg) =
/work/ansible/cache  
CACHE_PLUGIN_TIMEOUT(/work/ansible/git/ansible/ansible.cfg) = 86400  
DEFAULT_FORKS(/work/ansible/git/ansible/ansible.cfg) = 25  
DEFAULT_GATHERING(/work/ansible/git/ansible/ansible.cfg) = smart  
DEFAULT_REMOTE_USER(/work/ansible/git/ansible/ansible.cfg) = ansible  
DEFAULT_ROLES_PATH(/work/ansible/git/ansible/ansible.cfg) =
[u'/work/ansible/git/ansible/roles']  
PERSISTENT_CONNECT_TIMEOUT(/work/ansible/git/ansible/ansible.cfg) = 30  
RETRY_FILES_ENABLED(/work/ansible/git/ansible/ansible.cfg) = False
##### OS / ENVIRONMENT
LSB Version: :core-4.1-amd64:core-4.1-noarch  
Distributor ID: CentOS  
Description: CentOS Linux release 7.4.1708 (Core)  
Release: 7.4.1708  
Codename: Core
##### SUMMARY
There is currently no gce module to directly manage metadata within gce.  
Metadata management is enabled within the gce module, but it cannot be changed
or used except when creating an instance.
##### STEPS TO REPRODUCE
Utilize it as a simple module with fields for required information to interact
with GCE and then another field with metadata, populated with the same
hash/dictionary data as the gce module.
          gce_metadata:
            instance_name: example1
            zone: us-central1-a
            state: present
            service_account_email: "{{ service_account_email }}"
            credentials_file: "{{ credentials_file }}"
            project_id: "{{ project_id }}"
            metadata : '{ "key1" : "value1","key2" : "value2", "key3" : "value3" }'
##### EXPECTED RESULTS
The expected results would be to set/confirm metadata fields provided within
the module on a GCE instance.
##### ACTUAL RESULTS
Currently this is not something that can be done with ansible, if attempting
to use the gce module you cannot just interact with metadata unless you
configure all other options to match the current instance setup, which takes
most possibilities of automation out of the use case.