User: 请解答这个和日志有关的问题iPhone passcode security With iOS 11 I was compelled to switch from two-step-verification to two-factor-authentication. This has the implication that somewhere at Apple there is some blackbox that can decide, using my AppleID credentials(?), whether a given passcode coincides with the actual iPhone passcode.

When I wanted to check how many bruteforce attempts I have I run into the convenience feature which allow unlimited bruteforce attempts with the same passcode.

Given this I have two questions:


I asked Apple support if this weakens the security of my passcode.
They say no. How can this be possible if off-device bruteforcing is
possible?
The fact that entering the passcode twice doesn't increase the
counter makes me wonder how the counter is triggered. If the passcode
attempt is first checked against the actual password and then checked
against the last attempt, wouldn't there be a delay between when the 
passcode is checked and the counter is incremented during which the 
phone could crash? Wouldn't this potentially allow a brute force 
attack, or am I missing something?

Assistant: Recap and basics
First off, let us take a quick recap on how to prevent brute-force attempts.
A brute force attack is one where someone tries lots of different passwords (potentially sequential) until they get into the system.
With this in mind, there is really only one way to prevent brute-force attacks: throttle the speed with which attempts can be made.
Example
If all passwords were 8 alpha characters, there are 26^8 ≈ 208 billion password combinations. If a brute force algorithm was restricted to one attempt every second, it will take approximately 26^8 / (60*60*24*365.2425) ≈ 6617 years, so this would be one easy way to prevent brute force attempts without interrupting the user experience.
Most systems, (probably including iOS) are more likely to have an incremental throttle system, something like:

normal max rate is 1 per second (that is quick for a person, really slow for a robot)
after 10 incorrect attempts, this reduces to 1 per 10 seconds
etc.
after a successful login or a specified amount of time, the rate resets.

Caveat
This incremental throttling type of system can massively penalise individuals with long passwords and/or a disposition towards mis-typing their password.
If a person mis-types their password the same wrong way, how many passwords have they actually tried? Only 1, so why would it throttle them more than that.
As such, a decent throttling system would also store a hash of the attempted password, and only track number of unique passwords attempted.
Side note
This could be an interesting (though unreliable) way to determine if it is a user attempting to log in or a robot - a robot attempting to brute force would be much quicker (unbelievably so) and would never need to attempt the same password twice.
Summary (and answer to the ops question)
You have tried the same password multiple times, so might not trigger anything as there is no brute force attempt.
Even if you were to attempt different passwords, it is unlikely you will be able to enter them quick enough to trigger anything that prevents brute force attacks: you are nowhere near as quick as a robot.