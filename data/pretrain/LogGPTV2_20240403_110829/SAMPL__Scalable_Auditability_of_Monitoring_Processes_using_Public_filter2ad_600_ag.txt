(create − IO, evidence, V KRI) request tuple to Finit. Finit forwards
the request to J, who can accept or decline it. If J accepts, Finit
creates an intermediate order IO = (V KRI, evidence) and forwards
the IO to C. C can either accept or decline the IO. If either J or C
declines the IO request, Finit aborts the execution and exits. If C
accepts, Finit checks if V KRI was deposited in the shared table τ by
FSAMPL
zk
If yes, it means V KRI was verified by FSAMPL
. Finit then gener-
ates a key K ← {0, 1}λ, generates a string regarding the surveil-
lance order, data ← {0, 1}λ, which includes evidence provided by
L, crimes committed by V KRI, reason for sealing, etc. It also gen-
erates metadata, which includes the date the SO will be unsealed.
Finit writes (SO, soid) to the table τ, in the V KRI row. Finit then
creates the SO tuple: (metadata, C = EK(V KRI, data)), sends (K, C)
to J, L, C, calls FBC and posts the SO on the BC. Finally, when the
SO needs to be unsealed, Finit proactively contacts I, whom V KRI
belongs to, and gives her the decrypted contents of the SO.
Fcreate: Fcreate is given in Figure 8. Fcreate creates a request
SR and response SRR. L first contacts Fcreate for creating an SR
by sending V KRI, upon which Fcreate looks up table τ for an SO
corresponding to V KRI. If none has been entered by Finit, that
means L is not authorized to surveil V KRI, and Fcreate returns ⊥
to L. Else Fcreate proceeds with generating SR and forwards SR to
L and C. At this point C is expected to respond to SR with V KRI’s
emails, batch information, and Merkle tree information required to
verify the emails are from the correct batches.
We represent all this information by a string, records. If C ignores
the request, Fcreate will write C’s identity to BC, along with the
associated SO (this means C is behaving maliciously). If C responds
with the records, Fcreate will first verify that the records belong to
the surveillance time-period as given in the metadata part of the
SO. If verification succeeds, Fcreate will create the SRR, which will
be sent to L and C. Finally Fcreate posts the hash of SR, SRR to BC
respectively.
FBC: The blockchain functionality is given in Figure 9. FBC re-
ceives messages from Finit and Fcreate. FBC writes tuples to the
Session 9E: Web Censorship and AuditingCCS ’19, November 11–15, 2019, London, United Kingdom2263Functionality Finit
(1) L sends Finit a tuple requesting for an IO,
(create − IO, evidence, V KRI), which Finit
forwards
to J. J replies with either (accept, V KRI) or ⊥. If J
responds with ⊥, Finit returns ⊥ to L and exits.
(2) If J accepts the IO request, Finit creates an intermediate
order IO = (V KRI, evidence) and sends it to C. C can
either send (accept) or ⊥ to Finit. If C sends (accept),
Finit checks if V KRI is present in table τ. If yes, Finit
proceeds to the next step. If either C sends ⊥, or V KRI
is not present in τ, Finit sends ⊥ to J, L, C and exits.
(3) Finit picks a symmetric key, K ← {0, 1}λ, and gener-
ates data ← {0, 1}λ creates a surveillance order tuple,
SO = (metadata,(C = EK(V KRI, data)), and picks an
soid ∈ Z+. Finit writes (SO, soid) to τ in the V KRI row.
Finit sends (K, C) to J, L, C. Finit calls FBC and writes
SO to the blockchain.
(4) At the time of unsealing of SO, Finit sends I a tuple
SO = (metadata, V KRI, data) and exits.
Figure 7: Ideal functionality for issuance of SO.
Functionality Fcreate
(1) L sends a tuple (create − SR, V KRI) to Fcreate. Fcreate
looks up the SO corresponding to V KRI in τ. If none
exists, Fcreate sends ⊥ to L and exits. Else, Fcreate gen-
erates an SR = (SO, V KRI) and forwards it to L and
C.
(2) C replies to Fcreate with a tuple (V KRI, records ←
{0, 1}λ), where records ← {0, 1}λ denote V KRI’s
emails, and verification metadata. If C replies with ⊥,
Fcreate will call FBC and write (SO, C) to the BC and
exit.
(3) In response to C’s tuple, Fcreate verifies records, and
creates an SRR = (SO, records) tuple, and forwards to
L and C.
(4) Fcreate calls FBC, posts H(SR) and H(SRR) to the BC
and exits.
Figure 8: Ideal functionality for creating SR, SRR.
blockchain, and sends a copy of the new block, B, to parties J, L, C, I.
This is done by sending (update, B). The party can either accept the
update, or decline (unresponsive, disconnected, or non-cooperating
parties). When a dormant party wishes to update itself, it can re-
quest a copy of the full blockchain by sending a read message to
FBC.
B.1 Discussion and Analysis
We now briefly discuss the correctness of our ideal functionalities,
some of our motivating design choices, including aspects that may
seem unusual.
B.1.1 Correctness. The privacy properties our system aims to pro-
vide are accountability for L and C, protection against a forgetful J
Functionality FBC
(1) FBC receives three kinds of write messages: Finit
writes SO, Fcreate writes (SO, C) and Fcreate writes
(H(SR), H(SRR)). FBC writes the tuples to the
blockchain and sends a copy of the newest block B
to all parties, J, L, C, I by sending a tuple (update, B).
(2) Each party either replies with (agree, B) or ⊥. In the
former case, the party updates the local copy of the
blockchain, and is synced with the global blockchain.
However if the reply was ⊥, the party now has an
outdated copy of the blockchain.
(3) In the event that an outdated party wants to get synced
with the blockchain, it sends a message (read) to FBC,
FBC replies with (update, B′), where B′ is the copy of
the entire blockchain.
Figure 9: Ideal functionality for blockchain
zk
who might forget to unseal orders, and protection against a mali-
cious I and C. The design of our ideal functionalities need to capture
these properties.
Accountability is provided by the fact that Fcreate generates the
SR and SRR, thus ensuring that no data is over-requested by L,
or over-shared by C, both in terms of redundant data belonging
to the same user, or other users’ data. Finit creates the SO and
guarantees that the SO will get unsealed by Finit before it exits, thus
providing protection against forgetful J. Since FSAMPL
checks the
witness and generates the ZKP for each V KRI, it ensures that a user
cannot create a fake ZKP for V KRI that passes verification, yet the
corresponding SKRI cannot be used for decrypting the user’s email
records. Protection against a malicious C which tries to include fake
data in an SRR is provided by Fcreate, which verifies C’s returned
user information before creating an SRR.
B.1.2 Peculiar design choices. (1) In Finit, J, C can return ⊥ to Finit
in Step 1 and Step 2 respectively: This is to model the fact that in
the real-world, J has the right to refuse a surveillance request by L,
and C has the right to refuse or appeal an intermediate order by J.
(2) Finit creates an SO, and Fcreate generates the SR and SRR for
SO, but only after being contacted by L (Step 1 of Fcreate): This
is because in the real-world, L might get an SO authorized by J,
but may choose not to follow it up with any action, i.e., eventually
not conduct any surveillance, e.g., because L needs to invest its
limited resources in higher-priority matters, budget cuts after SO
was issued, etc.
(3) Fcreate writes C’s identity to the BC if C doesn’t respond with
I’s email records in Step 2 of Fcreate: We assume that I is an (email)
customer of C, and C will have email records associated with I for
the surveillance period. These emails are stored only with C. If
C deliberately chooses not to respond to, or refuses an SR, after
having accepted the IO that the SR is a follow up on (Finit, Step 2),
then that can only be construed as malicious behavior on the part
of C. Hence Fcreate will expose malicious C’s identity on the public
BC.
Session 9E: Web Censorship and AuditingCCS ’19, November 11–15, 2019, London, United Kingdom2264B.2 Proof
We now give the proof of Theorem 7.1.
Proof : Our goal is to describe a simulator S such that for any real-
world A running with SAMPL, Z cannot distinguish A from an
ideal-world S running with FSurveil. S runs A internally, simulates
all inputs A is expecting, and gives A’s outputs to FSurveil, who will
complete the simulation in the ideal-world. S reflects the choices of
A in the ideal-world, and reflects the protocol outcomes and aborts
of the ideal-world in the real-world. If A cheats, S aborts.
That is, any attempt by A to cheat in the real-world will result in
the protocol aborting in the both, the ideal and real worlds. Hence
it follows that no PPT Z can distinguish between EXECSAMPL,A,Z
and EXECFSurveil,S,Z. We now consider a complete run of the pro-
tocol, starting from when I sets up her RI, AI, π keypairs with C
and ending when L receives the validated SRR from a subset of E.
First, S needs to create keypairs (V KRI, SKRI), (V KAI, SKAI),
), j ∈ [1..m]. S simulates a UC-secure digital signature
(V KPIj
scheme, Ssig, that UC-realizes the ideal digital signature functional-
ity, Fsig (see [13] for UC-secure signatures definitions), and creates
the keypairs. The V KRI, V KAI and V KPIj
will be handed over to A.
If A wishes to corrupt I, SKRI, SKAI and SKPIj
will also be given to
A.
, SKPIj
S will also have to generate the zero-knowledge proofs associated
with V KAI and V KPIj
. S runs the steps of Protocol 10, computes
πAI = (H(д||V KRI||V KAI||ω1||y1||y2||s||z)) and generates σAI by
calling Ssig. S then gives πAI and σAI to A along with the keys. S
follows a similar procedure for generating the πPIj , σPIj
of Proto-
col 11. In the ideal-world, S will call Fsig to generate V KRI, and call
FSAMPL
for generating the ZKP corresponding toV KRI. If A rejects
zk
the ZKPs or signatures, S aborts the execution.
S then needs to setup shared key KCI of Protocol 1, and pass it to
A, if A has corrupted either C and/or I. S creates a key K ← {0, 1}λ
by calling Finit, and passes it to A. Finally, S generates a random
batch-size bSize and gives to A. This completes the simulation of
the setup phase.
Next, S needs to pass on inputs to A during the SO creation
phase, and simulate the corresponding actions in the ideal-world
(actions of Protocol 3). If A has corrupted L, A will generate the
SR = (V KRI, evidence), else, S generates the SR = (V KRI, evidence)
and gives the SR to A. We recollect from our adversary model that
J is forgetful, but not malicious. In other words, A cannot corrupt
J.
Once J (impersonated by S) has received the SR from A, J will
validate it, and decide whether to accept it or not. Once J decides, it
will give its output to A. A will then pass on the IO to C, through
corrupted L. C will decide whether to accept the IO or not. If A has
corrupted C, then this communication is handled locally by A, and
need not be simulated. If C is honest, its action will be simulated
by S.
C responds to the IO, and generates an SRR = (V KAI||πAI||σAI),
and sends SRR to J, L. In the ideal world, S calls Finit, which creates
an IO and sends to J, L, C. If A cheats, i.e., includes a wrong πAI, σAI
inside the SRR, then S will send a corresponding malformed message
to Finit, which will then abort (Step 2 of Figure 7), and S aborts
the execution of A. S then generates the SO as a honest J would,
and gives the final SO to A. If either of C or L are corrupted by
A, or if a subset of E are corrupted by A, S will send the KJ LC
and/or KEJ LC to A. We do not give details of the SO generation by
S, since it is straightforward (simulate Ssig for signatures, Fsig in
the ideal-world, etc.). If at any step, the signatures in the SO sent
by A do not verify, S aborts. In the ideal-world, S calls Finit who
will in turn call FBC and posts the SO to the blockchain.
The next step for S is to simulate the storage of I’s emails on C
(Protocol 2). There are three cases to consider:
(1) Case 0: If both I and C are corrupted by A, this is handled
locally by A, and does not need to be simulated.
(2) Case 1: If C is corrupted, but I is not, S creates I’s outputs,
i.e., for each Mx ∈ MbNum, x ∈ [1..bSize], S generates a Cx .
A, playing the role of corrupted C will create a Merkle hash
tree with the H(Cx) at the leaves, which will be checked by
S. S will verify the root-hash and will abort of there is any
mismatch. Else, S will sign the root-hashes by simulating
Ssig. In the ideal world, S will get random strings signed by
calling Fsig.
(3) Case 2: If I is corrupted, but C is not, A does I’s leaf en-
cryptions, creates Cx ’s, etc., and gives to S. S generates the
corresponding root-hashes for the Merkle trees, and sends
the root-hashes to A for signing. A is expected to sign the
root-hashes. If A refuses to sign the root-hashes, S will abort.
Now, S needs to simulate the creation and verification of the SR
(Algorithm 4, and Algorithm 5). For this, S will retrieve the SO, ι,
etc., and construct a tuple SR = (SO||ι||V KRI||C) and forward it to
a subset of E. If L is corrupted, A will construct the SR tuple. If A’s
SR tuple is malformed, S aborts. In the ideal world, S calls Fcreate,
who generates the SR. At this point, S ⊆ E needs to validate SR. Per
our adversary model, A can corrupt a minority of members in S.
Here there are two cases to consider:
(1) Case 0: None of S are corrupted: S verifies SR (if SR was gen-
erated by A in the previous step), and checks it against the
SO S had created. S simulates Ssig and creates the signature
, and gives it to A. In the ideal world, S calls Fsig and
σ S
SR
creates the signature.
(2) Case 1: A (minority) subset of S are corrupted by A. For
the minority, A will check the SR. If A rejects the SR, or
refuses to produce a signature σ S
, for any reason, S aborts,
SR
and sends a malformed request to Fcreate, which will abort
the simulation in the ideal world. Communication among
members of corrupted minority of S is controlled by A and
need not be simulated. If A behaves properly, i.e., validates
the SR and produces signature σ S
, S will simulate the honest
SR
majority, and the ideal world similar to Case 0.
The next step is for S to simulate C producing an SRR, and a
subset of E verifying the SRR. S first retrieves the SO it created.
Here again there are two broad cases:
(1) Case 0: If C is uncorrupted, S retrieves the Cx ∈ Cbn; x ∈
[1..bSize], adds the Cx ’s, sibling hashes, etc. to the SRR tuple,
the ZKP tuple it created before, calls Ssig, signs the SRR tuple,
and gives the H(SRR), along with the signed SRR to A. A
then passes it on to S ⊆ E, who will accept or reject it. If all
members of S are honest, S will validate the signed SRR and
Session 9E: Web Censorship and AuditingCCS ’19, November 11–15, 2019, London, United Kingdom2265,
zk
we are done. In the ideal world, S will call Fcreate, FSAMPL
and Fsig to create and sign the SRR, respectively.
(2) Case 1: If C is corrupted, A will create the SRR; the SO is
given to A. Firstly, A can return a verification fail on the
SO created by S. If this happens, S will abort the simulation.
If A chooses to proceed with the simulation, A will create
the Merkle hash trees with the H(Cx) at the leaves, sibling
hashes, etc.. A will give the ZKPs, πAI, πPIj
and signatures on
to S. If any do not verify, S aborts. A will
the ZKPs, σAI, σPIj
generate the final SRR, and H(SRR). If the SRR is malformed,
in the ideal-world, S will cause Fcreate to abort by having C
not reply to an SRR. Fcreate will write malicious C’s identity
to the blockchain by calling FBC.
If a minority of S ⊆ E are corrupted, A can return a fail on the ZKP
verification, upon which S aborts. If A rejects the SRR, or refuses
to produce a signature σ S
, S aborts. In the ideal world, S will
SRR
corrupt C such that C does not repond to Fcreate’s request for an
SRR, upon which Fcreate will write C’s identity to the blockchain
by calling FBC, and will then abort. If A validates the SRR and
produces signature σ S
, S will simulate the honest majority. In the
SRR
ideal world S will call Fsig. Lastly, S will give KCI to A, if A had
not already corrupted C and/or I, and obtained KCI earlier. This
concludes our proof.
Session 9E: Web Censorship and AuditingCCS ’19, November 11–15, 2019, London, United Kingdom2266