在这里就可以下个断点了，这里就是触发密码校验过程的地方。
###### 第六步：运行程序，设置远程调试项目 {.section-subtitle}
在第五步中，找到了关键点，然后打上断点，下面就来运行程序，然后在Eclipse中设置远程调试的项目，运行程序。因为加入了waitForDebug的代码，所以启动的时候会出现一个Wait
debug的对话框。不过，测试的时候，手机没有出现这个对话框，而是一个白屏，不过这不影响。程序运行起来之后，看看如何在Eclipse中设置远程调试项目，首先找到需要调试的程序对应远程调试服务端的端口，如图21-18所示。
::: bodypic-c
![](OEBPS/Images/21a18-i.jpg){.calibre747}
:::
图21-18 调试端口图\
这里要注意以下几点：第一点，在程序等待远程调试服务器的时候，前面会出现一个红色的小蜘蛛。第二点，在调试服务端我们会看到两个端口号8600/8700，这里需要解释一下，为什么会有两个端口号呢？首先这里的端口号代表的是，远程调试服务器端的端口，下面简单来看一下Java中的调试系统，如图21-19所示。
::: bodypic-c
![](OEBPS/Images/21a19-i.jpg){.calibre748}
:::
图21-19 Java中的调试系统\
这里有三个角色：
1）被调试的客户端。可以认为需要破解的程序就是客户端，如果一个程序可以被调试，当启动的时候，会有一个JDWP线程用来和远程调试服务端进行通信，如下所示：
::: bodypic-c
![](OEBPS/Images/314-3-i.jpg){.calibre749}
:::
::: bodypic-c
![](OEBPS/Images/315-i.jpg){.calibre750}
:::
需要破解的程序启动了JDWP线程，注意这个线程也只有当程序是debug模式下才有的，也就是AndroidManifest.xml中的debug属性值必须是true的时候，这也是一开始为什么要修改这个值的原因。
2）JDWP协议（用于传输调试信息，比如调试的行号、当前的局部变量的信息等），这可以说明，为什么在一开始的时候，反编译成Java文件，因为为了Eclipse导入能够识别的Java文件，然后为什么能够调试呢？因为smali文件中有代码的行号和局部变量等信息，所以可以进行调试。
3）远程调试的服务端，一般是有JVM端，就是开启一个JVM程序来监听调试端，这里就可以认为是本地的PC机。当然必须有端口用来监听，那么上面的8600端口就是这个作用，而且端口是从8600开始，后续的程序端口号都是依次加1的，比如其他调试程序端口如图21-20所示。
::: bodypic-c
![](OEBPS/Images/21a20-i.jpg){.calibre751}
:::
图21-20 调试端口\
那么有了8600端口，为什么还有一个8700端口呢？它是干什么的？其实它的作用就是远程调试端备用的基本端口。不过，在实际过程中，还是建议使用程序独有的端口号8600，可以查看8600和8700端口在远程调试端（本地pc机）的占用情况，如下所示。
::: bodypic-c
![](OEBPS/Images/315-2-i.jpg){.calibre752}
:::
8600端口和8700端口号都是对应的javaw程序，javaw程序就是启动一个JVM来进行监听的。到这里就弄清楚了Java中的调试系统以及远程调试的端口号。
注意，其实可以使用adb
jdwp命令查看当前设备中可以被调试的程序的进程号信息，如下所示：
::: bodypic-c
![](OEBPS/Images/315-3-i.jpg){.calibre753}
:::
::: bodypic-c
![](OEBPS/Images/316-i.jpg){.calibre754}
:::
下面继续，知道了远程调试服务端的端口8600以及ip地址，这里就是本地ip：localhost/127.0.0.1。可以在Eclipse中新建一个远程调试项目，将smali源码工程和设备中需要调试的程序关联起来。右击被调试的项目→选择Debug
Configurations，如图21-21所示。
::: bodypic-c
![](OEBPS/Images/21a21-i.jpg){.calibre755}
:::
图21-21 设置调试项目
然后开始设置调试项目，如图21-22所示。
::: bodypic-c
![](OEBPS/Images/21a22-i.jpg){.calibre95}
:::
图21-22 设置调试项目
选择Romote Java
Application，在Project中选择被调试的smali项目，在Connection
Type中选择SocketAttach方式。其实还有一种方式是Listener的，如图21-23所示。这两种方式的区别如下所示：
·Listner方式：调试客户端启动就准备好一个端口，当调试服务端准备好了，就连接这个端口进行调试。
·Attach方式：调试服务端开始就启动一个端口，等待调试端来连接这个端口。
::: bodypic-c
![](OEBPS/Images/21a23-i.jpg){.calibre756}
:::
图21-23 调试的两种方式
一般都是选择Attach方式来进行操作的。设置完远程调试的工程之后，开始运行，发现设备上的程序还是白屏，这是为什么呢？看看DDMS中调试程序的状态，如下所示：
::: bodypic-c
![](OEBPS/Images/317-i.jpg){.calibre757}
:::
关联到了这个进程，上面使用的是8700端口号，这时选中了这个进程，就把smali调试项目关联到了这个进程，破解的进程没响应了，立马改一下，用8600端口，如下所示：
::: bodypic-c
![](OEBPS/Images/318-i.jpg){.calibre758}
:::
这下成功了，看到红色的小蜘蛛变成绿色的了，说明调试端已经连接上远程调试服务端了。
[注意：]{.yanse}在设置远程调试项目的时候，一定要注意端口号的设置，不然没有将调试项目源码和调试程序关联起来，是没有任何效果的。
###### 第七步：开始运行调试程序，进入调试 {.section-subtitle}
在程序的文本框中输入：gggg内容，点击开始，如图21-24所示。
::: bodypic-c
![](OEBPS/Images/21a24-i.jpg){.calibre759}
:::
图21-24 进入断点
到这里看到期待已久的调试界面出来了，到了开始的时候加的断点处，就可以开始调试了，使用F6单步调试，F5单步跳入，F7单步跳出进行操作。这里使用v3变量保存了输入的内容，如图21-25和图21-26所示。
::: bodypic-c
![](OEBPS/Images/21a25-i.jpg){.calibre760}
:::
图21-25 查看变量值
::: bodypic-c
![](OEBPS/Images/21a26-i.jpg){.calibre86}
:::
图21-26 查看变量值
这里有一个关键的地方，就是调用MainActivity的getTableFromPic方法，获取一个String字符串，从变量的值来看，貌似不是规则的字符串内容，这里先不用管了，继续往下走，如下所示。
::: bodypic-c
![](OEBPS/Images/319-i.jpg){.calibre761}
:::
这里又遇到一个重要的方法getPwdFromPic，如图21-27所示，从字面意义上看，应该是获取正确的密码，用于后面的密码字符串比对。
::: bodypic-c
![](OEBPS/Images/21a27-i.jpg){.calibre762}
:::
图21-27 查看密码内容
查看一下密码的内容，貌似也是一个不规则的字符串，但是可以看到和上面获取的table字符串内容格式很像，接着往下走。这里还有一个信息就是调用了系统的Log打印，log的tag就是v6保存的值lil，如下所示：
::: bodypic-c
![](OEBPS/Images/320-i.jpg){.calibre515}
:::
这时候看到v3是保存的输入密码，这里使用utf-8获取它的字节数组，然后传递给access\$0方法：
::: bodypic-c
![](OEBPS/Images/320-2-i.jpg){.calibre374}
:::
使用F5进入这个方法：
::: bodypic-c
![](OEBPS/Images/320-3-i.jpg){.calibre763}
:::
在这个方法中，还有一个bytesToAliSmsCode方法，使用F5进入：
::: bodypic-c
![](OEBPS/Images/320-4-i.jpg){.calibre446}
:::
::: bodypic-c
![](OEBPS/Images/321-i.jpg){.calibre764}
:::
这个方法其实看上去还是很简单的，就是把传递进来的字节数组循环遍历，取出字节值，然后转化成int类型，再调用上面获取到的table字符串的chatAt来获取指定的字符，使用StringBuilder进行拼接，然后返回即可，如图21-28所示。
::: bodypic-c
![](OEBPS/Images/21a28-i.jpg){.calibre765}
:::
图21-28 加密之后的内容
按F7跳出，查看，返回来加密的内容是"日日日日"，如图21-29所示，也就是说gggg=\>日日日日。
最后再往下走，可以看到进行代码比对的工作了。
::: bodypic-c
![](OEBPS/Images/21a29-i.jpg){.calibre766}
:::
图21-29 代码比对方法
上面就分析完了所有的代码逻辑，还不算复杂，来梳理一下流程：
1）调用MainActivity中的getTableFromPic方法，获取一个table字符串。
可以进入看看这个方法的实现：
::: bodypic-c
![](OEBPS/Images/322-i.jpg){.calibre767}
:::
这里可以大体了解了，它是读取asset目录下的一个logo.png图片，然后获取图片的字节码再进行操作，得到一个字符串，那么从上面的分析可以知道，其实这里的table字符串类似于一个密钥库。
2）通过MainActivity中的getPwdFromPic方法获取正确的密码内容。
3）获取输入内容的utf-8的字节码，然后调用access\$0方法，获取加密之后的内容。
4）access\$0方法中调用bytesToAliSmsCode方法，获取加密之后的内容。
这个方法是最核心的，通过分析知道，通过传递进来的字节数组，循环遍历数组，拿到字节转化成int类型，然后再调用密钥库字符串table的charAt得到字符，使用StringBuilder进行拼接。通过上面的分析之后，知道获取加密之后的输入内容和正确的密码内容做比较，那么现在有的资源是：密钥库字符串和正确的加密之后的密码，以及加密的逻辑。
那么破解思路就有了，相当于，知道了密钥库字符串，也知道了加密之后的字符组成的字符串，那么可以通过遍历加密之后的字符串，循环遍历，获取字符，然后再去密钥库找到指定的index，然后再转成byte，保存到字节数组，然后用utf-8获取一个字符串，那么这个字符串就是想要的密码。
下面就用代码来实现这个功能：
::: bodypic-c
![](OEBPS/Images/323-i.jpg){.calibre768}
:::
代码中的函数相当于上面加密函数的bytesToAliSmsCode的反向实现，运行结果如图21-30所示。
::: bodypic-c
![](OEBPS/Images/21a30-i.jpg){.calibre26}
:::
图21-30 破解结果\
得到了正确的密码，下面来验证一下，如图21-31所示。
::: bodypic-c
![](OEBPS/Images/21a31-i.jpg){.calibre769}
:::
图21-31 验证结果
破解成功。
补充：刚刚在断点调试的时候，看到了代码中用了Log来打印日志，tag是lil，那么可以打印这个log看看结果，如下所示：
::: bodypic-c
![](OEBPS/Images/324-i.jpg){.calibre770}
:::
这里table是密钥库，pw是正确的加密之后的密码，enPassword是输入之后加密的密码。通过这个例子可以知道，在破解apk的时候，日志也是一个非常重要的信息。
[提示：]{.yanse}资料下载地址为http://download.csdn.net/detail/jiangwei0910410003/9526113。
[]{#130.xhtml}
#### 21.3 本章小结 {.bodycontent-title2}
本章介绍了如何使用Eclipse动态调试反编译之后的smali源码，这种方式比静态方式高效很多，但是现在市场上的大部分应用没有这么简单就破解了，比如核心的加密算法放到了native层去做，那么这时候就需要去动态调试so文件，这是下一章的内容。
[]{#131.xhtml}
### 第22章 IDA工具调试so源码 {.bodycontent-title4}
本章继续介绍逆向apk的相关知识，主要介绍如何使用IDA来调试Android中的native源码，因为现在有一些App，为了安全或者效率问题，会把一些重要的功能放到native层，那么用Eclipse调试smali源码就显得很无力了，因为Android中native层使用的是so库文件，所以本章介绍如何调试so文件的内容，从而提高破解成功率。
[]{#132.xhtml}
#### 22.1 IDA中的常用快捷键 {.bodycontent-title2}
前一章中使用IDA工具静态分析so文件，通过分析ARM指令，来获取破解信息，比如用打印的log信息来破解apk。那时候就已经介绍了如何使用IDA工具，如图22-1所示。
::: bodypic-c
![](OEBPS/Images/325-i.jpg){.calibre771}
:::
图22-1 IDA工具的窗口视图
IDA工具有多个窗口，也有多个视图，用到最多的如下所示：
·Function Window对应so函数区域：在这里可以使用ctrl+f进行函数的搜索。
·IDA View对应so中代码指令视图：在这里可以查看具体函数对应的ARM指令代码。
·Hex View对应so的十六进制数据视图：在这里可以查看ARM指令对应的数据等。
下面先介绍IDA中一些常用的快捷键。
###### 1.ARM指令转化成C语言快捷键 {.section-subtitle}
强大的F5快捷键可以将ARM指令转化成可读的C语言，能帮助分析，如下所示：
::: bodypic-c
![](OEBPS/Images/326-i.jpg){.calibre772}
:::
首先选中需要翻译成C语言的函数，然后按下F5，如下所示：