This is a grammatically correct English sentence.
This grammatically is sentence not English correct a.
第二行很难解释，因为它不符合英语的规则。类似地，如果你输入错误的 Python
指令，Python也不能理解，就会显示出错误信息，像下面这样：
>>> 5 +
File "", line 1
5 +
^
SyntaxError: invalid syntax
>>> 42 + 5 + * 2
File "", line 1
42 + 5 + * 2
第1章 Python基础
^
SyntaxError: invalid syntax
你总是可以在交互式环境中输入一条指令，检查它是否能工作。不要担心会弄
坏计算机：最坏的情况就是Python显示出错信息。专业的软件开发者在编写代码时，
常常会遇到错误信息。
1.2 整型、浮点型和字符串数据类型
记住，表达式是值和操作符的组合，它们可以通过求值成为单个值。“数据类
型”是一类值，每个值都只属于一种数据类型。表1-2列出了Python中最常见的数
据类型。例如，值-2和30属于“整型”值。整型（或int）数据类型表明值是整数。
带有小数点的数，如 3.14，称为“浮点型”（或 float）。请注意，尽管 42 是一个整
型，但42.0是一个浮点型。
表1-2 常见数据类型
数据类型 例子
整型 -2, -1, 0, 1, 2, 3, 4, 5
浮点型 -1.25, -1.0, - -0.5, 0.0, 0.5, 1.0, 1.25
字符串 'a', 'aa', 'aaa', 'Hello!', '11 cats'
Python程序也可以有文本值，称为“字符串”，或strs（发音为“stirs”）。总是
用单引号（'）包围住字符串（例如'Hello'或'Goodbye cruel world!'），这样Python就
知道字符串的开始和结束。甚至可以有没有字符的字符串，称为“空字符串”。第4
章更详细地解释了字符串。
如果你看到错误信息SyntaxError: EOL while scanning string literal，可能是忘记
了字符串末尾的单引号，如下面的例子所示：
>>> 'Hello world!
SyntaxError: EOL while scanning string literal
1.3 字符串连接和复制
根据操作符之后的值的数据类型，操作符的含义可能会改变。例如，在操作两
个整型或浮点型值时，+是相加操作符。但是，在用于两个字符串时，它将字符串
连接起来，成为“字符串连接”操作符。在交互式环境中输入以下内容：
>>> 'Alice' + 'Bob'
'AliceBob'
该表达式求值为一个新字符串，包含了两个字符串的文本。但是，如果你对一
个字符串和一个整型值使用加操作符，Python就不知道如何处理，它将显示一条错
Python编程快速上手——让繁琐工作自动化
误信息。
>>> 'Alice' + 42
Traceback (most recent call last):
File "", line 1, in 
'Alice' + 42
TypeError: Can't convert 'int' object to str implicitly
错误信息Can't convert 'int' object to str implicitly表示Python认为，你试图将一
个整数连接到字符串'Alice'。代码必须显式地将整数转换为字符串，因为Python不
能自动完成转换。（1.6节“程序剖析”在讨论函数时，将解释数据类型转换。）
在用于两个整型或浮点型值时，*操作符表示乘法。但*操作符用于一个字符串
值和一个整型值时，它变成了“字符串复制”操作符。在交互式环境中输入一个字
符串乘一个数字，看看效果。
>>> 'Alice' * 5
'AliceAliceAliceAliceAlice'
该表达式求值为一个字符串，它将原来的字符串重复若干次，次数就是整型的
值。字符串复制是一个有用的技巧，但不像字符串连接那样常用。
*操作符只能用于两个数字（作为乘法），或一个字符串和一个整型（作为字符
串复制操作符）。否则，Python将显示错误信息。
>>> 'Alice' * 'Bob'
Traceback (most recent call last):
File "", line 1, in 
'Alice' * 'Bob'
TypeError: can't multiply sequence by non-int of type 'str'
>>> 'Alice' * 5.0
Traceback (most recent call last):
File "", line 1, in 
'Alice' * 5.0
TypeError: can't multiply sequence by non-int of type 'float'
Python不理解这些表达式是有道理的：你不能把两个单词相乘，也很难将一个
任意字符串复制小数次。
1.4 在变量中保存值
“变量”就像计算机内存中的一个盒子，其中可以存放一个值。如果你的程序
稍后将用到一个已求值的表达式的结果，就可以将它保存在一个变量中。
1.4.1 赋值语句
用“赋值语句”将值保存在变量中。赋值语句包含一个变量名、一个等号（称
为赋值操作符），以及要存储的值。如果输入赋值语句 spam = 42，那么名为 spam
的变量将保存一个整型值42。
可以将变量看成一个带标签的盒子，值放在其中，如图1-2所示。
第1章 Python基础
图1-2 spam = 42 就像是告诉程序“变量spam现在有整数42放在里面”
例如，在交互式环境中输入以下内容：
 >>> spam = 40
>>> spam
40
>>> eggs = 2
 >>> spam + eggs
42
>>> spam + eggs + spam
82
 >>> spam = spam + 2
>>> spam
4 2
第一次存入一个值，变量就被“初始化”（或创建）。此后，可以在表达式中
使用它，以及其他变量和值。如果变量被赋了一个新值，老值就被忘记了。这
就是为什么在例子结束时，spam求值为42，而不是40。这称为“覆写”该变量。
在交互式环境中输入以下代码，尝试覆写一个字符串：
>>> spam = 'Hello'
>>> spam
'Hello'
>>> spam = 'Goodbye'
>>> spam
'Goodbye'
就像图1-3中的盒子，这个例子中的spam变量保存了'Hello'，直到你用'Goodbye'
替代它。
图1-3 如果一个新值赋给变量，老值就被遗忘了
Python编程快速上手——让繁琐工作自动化
1.4.2 变量名
表 1-3中有一些合法变量名的例子。你可以给变量取任何名字，只要它遵守以
下3条规则：
1．只能是一个词。
2．只能包含字母、数字和下划线。
3．不能以数字开头。
表1-3 有效和无效的变量名
有效的变量名 无效的变量名
balance current-balance（不允许中划线）
currentBalance current balanc（不允许空格）
current_balance 4account（不允许数字开头）
_spam 42（不允许数字开头）
SPAM total_$um（不允许$这样的特殊字符）
account4 'hello'（不允许'这样的特殊字符）
变量名是区分大小写的。这意味着，spam、 SPAM、Spam 和 sPaM 是 4 个不
同的变量。变量用小写字母开头是Python的惯例。
本书的变量名使用了驼峰形式，没有用下划线。也就是说，变量名用
lookLikeThis，而不是 looking_like_this。一些有经验的程序员可能会指出，官方的
Python代码风格PEP 8，即应该使用下划线。我喜欢驼峰式，这没有错，并认为PEP
8本身“愚蠢的一致性是头脑狭隘人士的心魔”：
“一致地满足风格指南是重要的。但最重要的是，知道何时要不一致，因为有
时候风格指南就是不适用。如果有怀疑，请相信自己的最佳判断。”
好的变量名描述了它包含的数据。设想你搬到一间新屋子，搬家纸箱上标的都
是“东西”。你永远找不到任何东西！本书的例子和许多Python的文档，使用spam、
eggs和bacon等变量名作为一般名称（受到Monty Python的“Spam”短剧的影响），
但在你的程序中，具有描述性的名字有助于提高代码可读性。
1.5 第一个程序
虽然交互式环境对于一次运行一条 Python 指令很好，但要编写完整的 Python
程序，就需要在文件编辑器中输入指令。“文件编辑器”类似于Notepad或TextMate
这样的文本编辑器，它有一些针对输入源代码的特殊功能。要在 IDLE 中打开文件
编辑器，请选择FileNew Window。
出现的窗口中应该包含一个光标，等待你输入，但它与交互式环境不同。在交
第1章 Python基础
互式环境中，按下回车，就会执行Python指令。文件编辑器允许输入许多指令，保
存为文件，并运行该程序。下面是区别这两者的方法：
 交互式环境窗口总是有>>>提示符。
 文件编辑器窗口没有>>>提示符。
现在是创建第一个程序的时候了！在文件编辑器窗口打开后，输入以下内容：
 # This program says hello and asks for my name.
 print('Hello world!')
print('What is your name?') # ask for their name
 myName = input()
 print('It is good to meet you, ' + myName)
 print('The length of your name is:')
print(len(myName))
 print('What is your age?') # ask for their age
myAge = input()
p rint('You will be ' + str(int(myAge) + 1) + ' in a year.')
在输入完源代码后保存它，这样就不必在每次启动 IDLE 时重新输入。从文件
编辑器窗口顶部的菜单，选择FileSave As。在“Save As”窗口中，在输入框输入
hello.py，然后点击“Save”。
在输入程序时，应该过一段时间就保存你的程序。这样，如果计算机崩溃，或
者不小心退出了 IDLE，也不会丢失代码。作为快捷键，可以在 Windows 和 Linux
上按Ctrl-S，在OS X上按-S，来保存文件。
在保存文件后，让我们来运行程序。选择 RunRun Module，或按下 F5 键。
程序将在交互式环境窗口中运行，该窗口是首次启动 IDLE 时出现的。记住，必须
在文件编辑器窗口中按F5，而不是在交互式环境窗口中。在程序要求输入时，输入
你的名字。在交互式环境中，程序输出应该看起来像这样：
Python 3.3.2 (v3.3.2:d047928ae3f6, May 16 2013, 00:06:53) [MSC v.1600 64 bit
(AMD64)] on win32
Type "copyright", "credits" or "license()" for more information.
>>> ================================ RESTART ================================
>>>
Hello world!
What is your name?
Al
It is good to meet you, Al
The length of your name is:
2
What is your age?
4
You will be 5 in a year.
>>>
如果没有更多代码行要执行，Python 程序就会“中止”。也就是说，它停止运
行。（也可以说Python程序“退出”了。）
可以通过点击窗口上部的X，关闭文件编辑器。要重新加载一个保存了的程序，
就在菜单中选择 FileOpen。现在请这样做，在出现的窗口中选择 hello.py，并点
Python编程快速上手——让繁琐工作自动化
击“Open”按钮。前面保存的程序hello.py应该在文件编辑器窗口中打开。
1.6 程序剖析
新程序在文件编辑器中打开后，让我们快速看一看它用到的Python指令，逐一
查看每行代码。
1.6.1 注释
下面这行称为“注释”。
 # This program says hello and asks for my name.
Python会忽略注释，你可以用它们来写程序注解，或提醒自己代码试图完成的
事。这一行中，#标志之后的所有文本都是注释。
有时候，程序员在测试代码时，会在一行代码前面加上#，临时删除它。这称
为“注释掉”代码。在你想搞清楚为什么程序不工作时，这样做可能有用。稍后，
如果你准备还原这一行代码，可以去掉#。
Python也会忽略注释之后的空行。在程序中，想加入空行时就可以加入。这会
让你的代码更容易阅读，就像书中的段落一样。
1.6.2 print()函数
print()函数将括号内的字符串显示在屏幕上。
 print('Hello world!')
p rint('What is your name?') # ask for their name
代码行 print('Hello world!')表示“打印出字符串'Hello world!'的文本”。Python
执行到这行时，你告诉Python调用print()函数，并将字符串“传递”给函数。传递
给函数的值称为“参数”。请注意，引号没有打印在屏幕上。它们只是表示字符串