        public Object sinkMethod() throws Exception {
            OkHttpClient httpClient = new OkHttpClient();
            Request request = new Request.Builder().url((String) params.getParameter("url")).build();
            Response response = httpClient.newCall(request).execute();
            return null;
        }
    }
有了这样的约定之后，我们在观察`sinkMethod`方法体中的方法调用时，如果观察到了`params.getParameter`这样的方法调用，我们就能够知道这里存在一个可控的参数，因此我们可以在调用完`params.getParameter`方法之后，把操作数栈栈顶的返回值替换为taint（污点）。
回到`isGetParamMethod`方法，我们看看它的实现，实际上就是再判断是否在调用`params.getParameter`
如果是，就像笔者刚才说的那样，把操作数栈栈顶的返回值替换为taint，这里用布尔值true表示污点。到这里实际上我们就完成的污点的播种，接下来就考虑如何把污点传递的特征也给记录下来
我们看else逻辑，首先调用`getControllableArgIndex`获取可控参数的下标，可控参数等同于污点，就是当前操作数栈中为true的参数
看看`getControllableArgIndex`方法的实现
获取到可控的参数下标之后，调用了`super.visitMethodInsn`，这里就是在模拟JVM的执行过程。这行代码结束之后，操作数栈顶就是方法的返回值了。
接下来判断可控的参数列表是否为空，不为空则创建一个`VisitMethodInsnInfoResolver`并加入到`CompositResolver`中，算是提取到一个特征
如果为空，则继续判断方法返回值是否为空，如果不为空查看返回值是否是污点，是的话也创建一个`VisitMethodInsnInfoResolver`并加入到`CompositResolver`中，也算是提取到一个特征
理论终于扯完了，下面上案例来分析，就以上面给出的`SsrfSink4`demo类为例来看看实际的执行过程
    public class SsrfSink4 implements Sink {
        private ControllableParam params = new ControllableParam();
        public SsrfSink4(){
            params.put("url","http://localhost");
        }
        @Override
        public Object sinkMethod() throws Exception {
            OkHttpClient httpClient = new OkHttpClient();
            Request request = new Request.Builder().url((String) params.getParameter("url")).build();
            Response response = httpClient.newCall(request).execute();
            return null;
        }
    }
第一次进入`com.er1cccc.acaf.core.template.VulnTemplateSinkVisitor.VulnTemplateSinkMethodVisitor#visitMethodInsn`是调用`OkHttpClient`的``方法，可以简单理解为是构造方法，不满足if条件，进入else
紧接着判断参数和返回值是否是taint，都不满足，因此什么也没做。
接下来看`sinkMethod`方法体中的第二个方法调用，是`okhttp3/Request$Builder.init`，跟上面一样，不是重点，直接跳过
第三个方法调用是`com/er1cccc/acaf/config/ControllableParam.getParameter`这就是重点了，根据前面的分析，85行的if满足，进入，然后86行先模拟方法执行，87行把方法返回值替换为taint。
继续看下一个方法调用，是`okhttp3/Request$Builder.url`，在调用`getControllableArgIndex`时，获取到参数0是可控的，也就是刚刚观察getParameter方法时，往操作数栈中放入的true。
由于存在可控参数，所以这里会创建一个`VisitMethodInsnInfoResolver`并加入到`CompositResolver`中。
这里有必要详细解释一下。所谓 **漏洞代码特征抽取**
，实际上就是从`params.getParameter`开始，播种污点，然后看污点随着方法的调用会传递到哪里去，在刚才的例子中，污点就传播到了`okhttp3/Request$Builder.url`方法中。
我们在观察`sinkMethod`的方法体时，需要将污点的传播路径给记录下来，记录到`CompositResolver`中，需要注意的是，这里在记录时是以`Resolver`的形式进行记录的。这里创建了一个`VisitMethodInsnInfoResolver`，然后传入了方法调用相关的信息，如方法名name，方法描述符descriptor等，同时还传入了方法调用可控的参数列表，这是为了后续在审计时，比对触发漏洞的方法需要的参数是否可控。
解释完继续回来看在`sinkMethod`方法体中的观察到的方法调用，下一个方法调用是`okhttp3/Request$Builder.build`，在这一步的时候会发现一个问题：
**污点传播不下去了！** 可控的参数列表为空，而且方法返回值也不是taint。
如果继续让程序继续执行，直到`sinkMethod`观察完毕，得到的结果就是，`CompositResolver`只记录到一个特征，就是触发漏洞需要调用`okhttp3/Request$Builder.url`方法，且第0个参数可控。这样很明显是会有问题的，特征提取的不够充分，会引起很严重的误报情况。
看下面这段代码，当url参数可控时，就会被误判成是sink。但是实际上它并不是，仅仅调用`httpClient.newCall(request)`是不会发起请求的，一定要调用`httpClient.newCall(request).execute()`才行。
    public String ssrf4_fake2(String url) {
        try {
            OkHttpClient httpClient = new OkHttpClient();
            Request request = new Request.Builder()
                .url(url)
                .build();
            httpClient.newCall(request);
            return "";
        } catch (Exception e) {
            e.printStackTrace();
            return e.getMessage();
        }
    }
为什么会导致特征提取过少，实际上不难发现是因为污点没有传播下去，在`okhttp3/Request$Builder.build`这一步就断掉了。解决方法也简单，在下一节进行分析。
# 手工链接污点传播链路
上面说到了，污点传播是在`okhttp3/Request$Builder.build`这一步断掉的，这一节，我们主要看污点传播是怎么断的，怎么把它给接回去？
先看污点传播是怎么断的，我们回到刚刚断的地方，在`okhttp3/Request$Builder.build`这一步，看看此时的operandStack，发现其中居然没有了污点，我们刚刚观察`params.getParameter`的时候明明播种了污点，但是现在不见了
我们再回看一步，看`okhttp3/Request$Builder.url`方法，在执行这个方法之前，可以看到operandStack中是存在污点的，也就是观察`params.getParameter`的时候播种的污点，那为什么执行完`url`方法后准备执行`build`的时候就没了呢？不难想到，问题就出在`url`方法的执行过程中
我们跟入`url`方法的模拟执行过程，第90行。这里涉及到gadget-inspector的源码，不会说得很细，如果理解不了，可以先按照 **前言**
中笔者的学习路径，先去学一下前面的基础。我们直接看关键部分的代码
在这一步，会从passthrough中查出方法返回值与那个参数有关，查完发现，url方法的返回值与0号参数有关，也就是this，然后把this加入了resultTaint，最后将resultTaint中的值压入了operandStack。但是我们之前标记的污点是1号参数，就相当于污点在这个地方被无视掉了，也就造成了污点传播中断的现象。
可以看出，这种操作很明显是不太合理的，按照我们自己的分析，`url`方法的参数应该是与1号参数有关才对，也就是这里这个String类型的参数。但是gadget-inspector没有这么智能，存在一定的缺陷，所以需要我们人工修正这个passthrough。
到这里就基本知道了为什么污点传播会中断，就是因为gadget-inspector存在一定的局限性。接下来我们需要人工调整这个passthrough，让污点成功传递下去，调整方法很简单，原先我们在定义sink的时候需要重写`sinkMethod`给出sink方法的示例代码，现在我们只需要再重写一个`addPassthrough`方法就可以实现调整passthrough。针对上面污点传播中断的问题，笔者写了这样一段代码来解决（分析请看注释）
    public class SsrfSink4 implements Sink {
        private ControllableParam params = new ControllableParam();
        public SsrfSink4(){
            params.put("url","http://localhost");
        }
        @Override
        public Object sinkMethod() throws Exception {
            OkHttpClient httpClient = new OkHttpClient();
            Request request = new Request.Builder().url((String) params.getParameter("url")).build();
            Response response = httpClient.newCall(request).execute();
            return null;
        }
        @Override
        public void addPassthrough(PassthroughRegistry passthroughRegistry) {
            try{
                Class builder = new Request.Builder().getClass();
                Method urlMethod = builder.getMethod("url",String.class);
                Method buildMethod = builder.getMethod("build");
                Class okHttpClientClass = OkHttpClient.class;
                Method newCall = okHttpClientClass.getMethod("newCall", Request.class);
                Class call = newCall.getReturnType();
                Method execute = call.getMethod("execute");
                //在static方法中下标0为方法第一个参数，在非static方法中，下标0为this，下标1才是方法的第一个参数
                //表示url方法的返回值与1号下标参数有关
                passthroughRegistry.addPassthrough(urlMethod,1);
                //表示build方法的返回值与0号下标参数(this)有关
                passthroughRegistry.addPassthrough(buildMethod,0);
                //表示newCall方法的返回值与1号下标参数(request)有关
                passthroughRegistry.addPassthrough(newCall,1);
                //表示execute方法的返回值与0号下标参数(this)有关
                passthroughRegistry.addPassthrough(execute,0);
            }catch (Exception e){
                e.printStackTrace();
            }
        }
    }
在`addPassthrough`中，我们只需要调用`passthroughRegistry.addPassthrough`这个api即可完成passthrough的修正。经过这个修正之后，我们再来看看特征抽取的效果，回到刚刚污点断掉的地方`okhttp3/Request$Builder.url`，准备跟进`super.visitMethodInsn`
还是回到刚刚那个passthrough的地方，发现此时获取到的`passthroughArgs`就是我们调整过的了，现在程序就会认为`url`方法的返回值与1号参数有关（刚才是0号）。
接下来就会把1号参数，也就是taint给加入到`resultTaint`中
最后，把`resultTaint`中的污点压入到`operandStack`。这样一来，在`url`方法模拟执行这一步，我们成功让污点传播延续了下去。
后面的其他方法调用也是差不多的流程，这里不予赘述，直接看最终提取到的特征。可以看到，现在提取出了4个特征，并且需要哪些参数可控都列举的很清楚。例如`url`方法需要0号参数可控，`newCall`方法也需要0号参数可控。
**注意，这里的下标与static没关系，无论是否是static方法，0号参数指的都是方法的第一个参数，不涉及到this。**
不难看出，现在的特征提取已经非常准确了，从`url`到最后的`execute`，避免了误报的情况
# 自动化审计
到了这一步之后，后面的代码就很好写了，有了漏洞特征，直接按照漏洞特征进行判断即可。我们选取controller方法的参数作为source，sink就是用户自定义的sink。根据前面提取的特征，看source是否能经过这样一段链路，这段链路中包含了从demo中提取出的所有特征。如果能，那就说明存在漏洞，反之说明不存在。
这个部分主要参考了[4ra1n师傅](https://4ra1n.love)的CodeInspector，将controller方法的参数作为source，然后使用dfs不断地向下追溯污点的传播，同时进行特征匹配，最终查看特征是否完全匹配来判断是否存在漏洞。详细分析请参考[基于GI的自动Java代码审计工具实现](https://4ra1n.love/post/zA8rsm1ne/#%E6%80%BB%E7%BB%93)
这里只分析我改动过的重点代码，在`com.er1cccc.acaf.core.audit.auditcore.VulnMethodAdapter#visitMethodInsn`，在观察方法体时，如果遇到方法调用的字节码，则使用前面收集到的漏洞特征进行匹配
跟进`vulnResolver.resolve`，发现`CompositResolver`实际上就是一个`Resolver`集合，调用它的`resolve`方法实际上就是在遍历它的`resolverList`进行特征匹配。
最终，如果`vulnResolver.resolve(null)`返回true，说明特征已经完全匹配上了，那么就输出调用栈
至此，ACAF的源码就介绍完毕了，最后看看实际效果
# 实际效果
笔者根据4ra1n师傅的[CIDemo](https://github.com/EmYiQing/CIDemo)项目，改了改，加上了很多fake
sink，来测试误报，同时也写出了其中4个ssrf的demo
看结果，发现4个sink点都找出来了，而fake
sink完全没有误报（这里笔者突然发现还有一处漏讲了，就是关于controller复杂参数类型的处理，这里笔者也对CodeInspector进行了优化，使其能够处理复杂类型参数，这里找出的ssrf1_url这个sink就是验证，不过原理有点写不动了，有兴趣的可以看看源码）
# 总结
（其实是个没有总结的总结
主要想感谢三梦师傅、4ra1n师傅以及gadget-inspector作者Ian
Haken带我入了自动化审计这个坑，非常感谢！然后就是欢迎对这个项目感兴趣的师傅来一起讨论，希望可以完善更多常见漏洞的demo。
# 参考
> [gadget-inspector](https://github.com/JackOfMostTrades/gadgetinspector)
>
> [java反序列化利用链自动挖掘工具gadgetinspector源码浅析](https://xz.aliyun.com/t/7058#toc-0)
>
> [基于GI的自动Java代码审计工具实现](https://4ra1n.love/post/zA8rsm1ne/#%E6%80%BB%E7%BB%93)
>
> [基于污点分析的JSP Webshell检测](https://4ra1n.love/post/0GeHo6Oj0/)