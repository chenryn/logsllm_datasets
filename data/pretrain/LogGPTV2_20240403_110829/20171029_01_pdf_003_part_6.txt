veryfied by combining them.
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 62
Example 63 Creating tables and POLICY (PERMISSIVE + RESTRICTIVE)
postgres=> CREATE TABLE poltbl1 (c1 NUMERIC, c2 VARCHAR(10), uname VARCHAR(10)) ;
CREATE TABLE
postgres=> ALTER TABLE poltbl1 ENABLE ROW LEVEL SECURITY ;
ALTER TABLE
postgres=> CREATE POLICY pol1 ON poltbl1 FOR ALL USING (uname = current_user) ;
CREATE POLICY
postgres=> CREATE POLICY pol2 ON poltbl1 AS RESTRICTIVE FOR ALL USING (c2 =
'data') ;
CREATE POLICY
postgres=> SELECT polname, polpermissive FROM pg_policy ;
polname | polpermissive
---------+---------------
pol1 | t
pol2 | f
(2 rows)
postgres=> SELECT tablename, policyname, permissive FROM pg_policies ;
tablename | policyname | permissive
-----------+------------+-------------
poltbl1 | pol1 | PERMISSIVE
poltbl1 | pol2 | RESTRICTIVE
(2 rows)
postgres=> \d poltbl1
Table "public.poltbl1"
Column | Type | Collation | Nullable | Default
--------+-----------------------+-----------+----------+---------
c1 | numeric | | |
c2 | character varying(10) | | |
uname | character varying(10) | | |
Policies:
POLICY "pol1"
USING (((uname)::name = CURRENT_USER))
POLICY "pol2" AS RESTRICTIVE
USING (((c2)::text = 'data'::text))
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 63
In the above example, the setting of the table poltbl1 shows that POLICY pol2 is RESTRICTIVE.
Example 64 Confirmation of execution plan (PERMISSIVE + RESTRICTIVE)
postgres=> EXPLAIN SELECT * FROM poltbl1 ;
QUERY PLAN
--------------------------------------------------------------------------
Seq Scan on poltbl1 (cost=0.00..20.50 rows=1 width=108)
Filter: (((c2)::text = 'data'::text) AND ((uname)::name = CURRENT_USER))
(2 rows)
It can be seen that the two conditions are combined by "AND". Next, delete POLICY pol1 and create
a table applying POLICY pol3 in RESTRICTIVE mode.
Example 65 Create POLICIES in RESTRICTIVE mode
postgres=> CREATE POLICY pol3 ON poltbl1 AS RESTRICTIVE FOR ALL USING
(c1 > 1000) ;
CREATE POLICY
postgres=> \d poltbl1
Table "public.poltbl1"
Column | Type | Collation | Nullable | Default
--------+-----------------------+-----------+----------+---------
c1 | numeric | | |
c2 | character varying(10) | | |
uname | character varying(10) | | |
Policies:
POLICY "pol2" AS RESTRICTIVE
USING (((c2)::text = 'data'::text))
POLICY "pol3" AS RESTRICTIVE
USING ((c1 > (1000)::numeric))
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 64
Example 66 Confirmation of execution plan (RESTRICTIVE + RESTRICTIVE)
postgres=> EXPLAIN SELECT * FROM poltbl1 ;
QUERY PLAN
--------------------------------------------
Result (cost=0.00..0.00 rows=0 width=108)
One-Time Filter: false
(2 rows)
If all policies are in RESTRICTIVE mode, the execution plan does not seem to be displayed.
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 65
3.9 Enhancement of SQL statement
This section explains enhancement of SQL statements.
3.9.1 UPDATE statement and ROW keyword
The ROW keyword can be used for UPDATE statement.
Example 67 UPDATE statement with ROW keyword
postgres=> UPDATE pgbench_tellers SET (bid, tbalance) = ROW (2, 1) WHERE
tid = 10;
UPDATE 1
3.9.2 CREATE STATISTICS statement
With the CREATE STATISTICS statement, it is now possible to gather statistical information on
multiple column correlations. The timing at which the statistical values are actually collected is when
the ANALYZE statement is executed.
Syntax 12 CREATE STATISTICS statement
CREATE STATISTICS [ IF NOT EXISTS ] stat_name [ ( stat_type [ , … ] ) ]
ON col1, col2 [, ... ] FROM table_name
For stat_name, specify the name of the extended statistics. It can also be qualified with a schema
name. At least two columns must be specified. For stat_type, "dependencies", "ndistinct" can be
specified. If omitted, both are assumed to be specified.
To alter the extended statistics, execute the ALTER STATISTICS statement.
Syntax 13 ALTER STATISTICS statement
ALTER STATISTICS stat_name OWNER TO { new_owner | CURRENT_USER | SESSION_USER }
ALTER STATISTICS stat_name RENAME TO new_name
ALTER STATISTICS stat_name SET SCHEMA new_schema
To drop extended extensions, execute the DROP STATISTICS statement.
Syntax 14 DROP STATISTICS statement
DROP STATISTICS [ IF EXISTS ] name [, ...]
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 66
Example 68 Creating extended statistics with the CREATE STATISTICS statement
postgres=> CREATE TABLE stat1(c1 NUMERIC, c2 NUMERIC, c3 VARCHAR(10)) ;
CREATE TABLE
postgres=> INSERT INTO stat1 VALUES(generate_series(1, 100000) / 5,
generate_series(1, 100000) / 10, 'init') ;
INSERT 0 100000
postgres=> CREATE STATISTICS stat1_stat1 ON c1, c2 FROM stat1 ;
CREATE STATISTICS
Example 69 Confirm the information of the table that created the extended statistics
postgres=> \d stat1
Table "public.stat1"
Column | Type | Collation | Nullable | Default
--------+-----------------------+-----------+----------+---------
c1 | numeric | | |
c2 | numeric | | |
c3 | character varying(10) | | |
Statistics objects:
"public"."stat1_stat1" (ndistinct, dependencies) ON c1, c2 FROM stat1
Information of the extended statistics can be checked in the pg_statistic_ext catalog.
Example 70 Confirm extended statistics
postgres=> SELECT * FROM pg_statistic_ext ;
-[ RECORD 1 ]---+-----------------------------------------
stxrelid | 16575
stxname | stat1_stat1
stxnamespace | 2200
stxowner | 16454
stxkeys | 1 2
stxkind | {d,f}
stxndistinct | {"1, 2": 19982}
stxdependencies | {"1 => 2": 1.000000, "2 => 1": 0.170467}
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 67
3.9.3 GENERATED AS IDENTITY column
The GENERATED AS IDENTITY constraint has been added to the CREATE TABLE statement to
automatically assign a unique value to a column. It is almost the same function as the "serial" type
which can be used in the conventional version, but some specifications are different. The
GENERATED AS IDENTITY constraint can be added to more than one column. Both the serial type
and the GENERATED AS IDENTITY constraint internally use the SEQUENCE object.
Syntax 15 CREATE TABLE statement (column definition)
column_name type GENERATED { ALWAYS | BY DEFAULT } AS IDENTITY
[ ( sequence_option ) ]
SMALLINT, INT, BIGINT can be used for the data type (type). When creating a table using the
LIKE clause, the GENERATED constraint is not inherited. Only the NOT NULL constraint is
inherited.
To add a GENERATED AS IDENTITY constraint to an existing column, execute the ALTER TABLE
statement. A NOT NULL constraint is required for the specified column.
Syntax 16 ALTER TABLE statement (add constraint)
ALTER TABLE table_name ALTER COLUMN column_name ADD GENERATED { ALWAYS |
BY DEFAUT } AS IDENTITY { ( sequence_option ) }
Syntax 17 ALTER TABLE statement (drop constraint)
ALTER TABLE table_name ALTER COLUMN column_name DROP IDENTITY [ IF EXISTS ]
Syntax 18 ALTER TABLE statement (update constraint)
ALTER TABLE table_name ALTER COLUMN column_name { SET GENERATED { ALWAYS
| BY DEFAULT } | SET sequence_option | RESTART [ [ WITH ] restart ] }
Information on the columns created with the above syntax is stored in the "columns" table of the
information_schema schema. In the past, the is_identity column was "NO", and the other information
was NULL.
□ GENERATED ALWAYS
Columns specified with GENERATED ALWAYS are prohibited from setting column values from the
application by the INSERT statement or updating to values other than the DEFAULT value by the
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 68
UPDATE statement.
Example 71 GENERATED ALWAYS
postgres=> CREATE TABLE ident1 (c1 bigint GENERATED ALWAYS AS IDENTITY, c2 VARCHAR(10)) ;
CREATE TABLE
demodb=> \d ident1
Table "public.ident1"
Column | Type | Collation | Nullable | Default
--------+-----------------------+-----------+----------+------------------------------
c1 | bigint | | not null | generated always as identity
c2 | character varying(10) | | |
postgres=> INSERT INTO ident1(c1, c2) VALUES (1, 'data1') ;
ERROR: cannot insert into column "c1"
DETAIL: Column "c1" is an identity column defined as GENERATED ALWAYS.
HINT: Use OVERRIDING SYSTEM VALUE to override.
postgres=> INSERT INTO ident1(c2) VALUES ('data1') ;
INSERT 0 1
postgres=> UPDATE ident1 SET c1=2 WHERE c1=1 ;
ERROR: column "c1" can only be updated to DEFAULT
DETAIL: Column "c1" is an identity column defined as GENERATED ALWAYS.
postgres=> UPDATE ident1 SET c1=DEFAULT WHERE c1=1 ;
UPDATE 1
Any value can be stored on GENERATED column by specifying the OVERRIDING SYSTEM
VALUE clause in the INSERT statement.
Example 72 OVERRIDING SYSTEM VALUE clause
postgres=> INSERT INTO ident1 OVERRIDING SYSTEM VALUE VALUES (100, 'data1') ;
INSERT 0 1
□ GENERATED BY DEFAULT
When GENERATED BY DEFAULT clause is specified, the automatic numbering column is
updatable. It has the same behavior as the "serial" type column.
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 69
Example 73 GENERATED BY DEFAULT
postgres=> CREATE TABLE ident2 (c1 bigint GENERATED BY DEFAULT AS
IDENTITY, c2 VARCHAR(10)) ;
CREATE TABLE
postgres=> INSERT INTO ident2 VALUES (1, 'data1') ;
INSERT 0 1
postgres=> INSERT INTO ident2(c2) VALUES ('data2') ;
INSERT 0 1
postgres=> UPDATE ident2 SET c1=2 WHERE c2='data2' ;
UPDATE 1
3.9.4 ALTER TYPE statement
It is possible to change the name of the ENUM type by using the ALTER TYPE statement.
Syntax 19 ALTER TYPE RENAME VALUE statement
ALTER TYPE type_name RENAME VALUE existing_val TO replace_val
Example 74 Change of ENUM type by ALTER TYPE statement
postgres=> CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy') ;
CREATE TYPE
postgres=> ALTER TYPE mood RENAME VALUE 'ok' TO 'good' ;
ALTER TYPE
3.9.5 CREATE SEQUENCE statement
The data type can be specified in the CREATE SEQUENCE statement. The data types that can be
specified are SMALLINT, INTEGER, and BIGINT (default). The range of sequence values is limited
to the range of data types.
Syntax 20 CREATE SEQUENCE statement
CREATE SEQUENCE sequence_name [ AS type ] [ INCREMENT … ]
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 70
Example 75 Specify SMALLINT type in CREATE SEQUENCE statement
postgres=> CREATE SEQUENCE seq1 AS SMALLINT ;
CREATE SEQUENCE
It is also possible to change the data type with the ALTER SEQUENCE AS statement. If the data
type is changed, the maximum value of SEQUENCE will also be updated. However, changes to reduce
the current sequence value are not allowed.
3.9.6 COPY statement
A COPY statement can now be executed on a simple view with the INSTEAD OF INSERT trigger.
Example 76 COPY statement for VIEW
postgres=> CREATE TABLE instead1(c1 NUMERIC, c2 VARCHAR(10)) ;
CREATE TABLE
postgres=> CREATE VIEW insteadv1 AS SELECT c1, c2 FROM instead1 ;
CREATE VIEW
postgres=> CREATE OR REPLACE FUNCTION view_insert_row1() RETURNS trigger AS
$$
BEGIN
INSERT INTO instead1 VALUES (new.c1, new.c2);
RETURN new;
END;
$$
LANGUAGE plpgsql ;
CREATE FUNCTION
postgres=> CREATE TRIGGER insteadv1_insert
INSTEAD OF INSERT ON insteadv1 FOR EACH ROW
EXECUTE PROCEDURE view_insert_row1() ;
CREATE TRIGGER
postgres=# COPY insteadv1 FROM '/home/postgres/instead.csv' ;
COPY 2
3.9.7 CREATE INDEX statement
"autosummarize" can now be specified in the WITH clause of the CREATE INDEX statement that
creates a BRIN index. When this is specified, it specifies that summarization is performed on the
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 71
previous page when data is inserted in the page.
Example 77 Enhancement of BRIN index
postgres=> CREATE INDEX idx1_brin1 ON brin1 USING brin (c1) WITH
(autosummarize) ;
CREATE INDEX
postgres=> \d brin1
Table "public.brin1"
Column | Type | Collation | Nullable | Default
--------+-----------------------+-----------+----------+---------
c1 | numeric | | |
c2 | character varying(10) | | |
Indexes:
"idx1_brin1" brin (c1) WITH (autosummarize='true')
3.9.8 CREATE TRIGGER statement
The REFERENCING clause can be used in the CREATE TRIGGER statement. It became possible
to specify the table name to store the update difference. This setting can be set only for AFTER trigger.
Syntax 21 CREATE TRIGGER statement
CREATE [ CONSTRAINT ] TRIGGER name { BEFORE | AFTER | INSTEAD OF } …
[ NOT DEFERRABLE | [ DEFERRABLE ] [ INITIALLY IMMEDIATE | INITIALLY
DEFERRED ] ]
[ REFERENCING { { OLD | NEW } TABLE [ AS ] transition_relation_name }
[ ... ] ]
[ FOR [ EACH ] { ROW | STATEMENT } ]
…
3.9.9 DROP FUNCTION statement
More than one FUNCTION can now be specified in the DROP FUNCTION statement. To specify
multiple FUNCTIONs, separate them with a comma (,).
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 72
3.9.10 ALTER DEFAULT PRIVILEGE statement
The ON SCHEMAS clause can now be specified in the GRANT and REVOKE clauses of the
ALTER DEFAULT PRIVILEGE statement. In the conventional version, it was ON FUNCTIONS,
ON SEQUENCES, ON TABLES, and ON TYPES only.
3.9.11 CREATE SERVER statement
The IF NOT EXISTS clause is now available in CREATE SERVER and CREATE USER MAPPING
statements.
3.9.12 CREATE USER statement
The UNENCRYPTED clause can no longer be used in CREATE USER, CREATE ROLE, and
ALTER USER statements. Passwords are no longer stored in the pg_shadow catalog without being
converted.
Example 78 UNENCRYPTED clause
postgres=# CREATE USER user1 UNENCRYPTED PASSWORD 'user1' ;
ERROR: UNENCRYPTED PASSWORD is no longer supported
LINE 1: CREATE USER user1 UNENCRYPTED PASSWORD 'user1' ;
^
HINT: Remove UNENCRYPTED to store the password in encrypted form instead.
3.9.13 Functions
The following functions have been added or enhanced.
□ Delete element from JSONB array
Elements can be deleted from the JSONB array.
Example 79 Delete element from JSONB array
postgres=> SELECT '{"a":1 , "b":2, "c":3}'::jsonb - '{a,c}'::text[] ;
?column?
----------
{"b": 2}
(1 row)
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 73
□ pg_current_logfile
The pg_current_logfile function returns the path of the output log file. Path including configuration
parameter log_directory can be acquired. NULL is returned if the configuration parameter
log_destination is set to "syslog" or the configuration parameter logging_collector is set to "off".
SUPERUSER privilege is required to execute this function.
Example 80 pg_current_logfile function
postgres=# SELECT pg_current_logfile() ;
pg_current_logfile
-----------------------------------------
log/postgresql-2017-05-20_092939.log
(1 row)
□ xmltable
An xmltable function is provided that obtains tabular output from XML data. In order to use this
function, it is necessary to specify --with-libxml as a parameter of the "configure" command at the
time of installation. Also, in order to build the binary with the --with-libxml parameter, the following
packages need to be installed (For Red Hat Enterprise Linux 7).
• libxml2 (version >= 2.6.23)