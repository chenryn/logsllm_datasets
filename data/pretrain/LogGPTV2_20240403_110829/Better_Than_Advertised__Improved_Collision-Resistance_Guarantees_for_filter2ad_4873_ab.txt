m[2] = 11, m[2..4] = (11, 10, 111). By ε we denote the empty vector,
which has length 0. If D is a set, we say that m is a vector over D if
all its components belong to D, and we let D∗ denote the set of all
finite-length vectors over D. If m, y are vectors, their concatenation,
denoted m∥y, is the vector (m[1], . . . , m[|m|], y[1], . . . , y[|y|]). For
example (01, 11, 1)∥(10, 000) = (01, 11, 1, 10, 000).
A string y is identified with a vector over {0, 1}, so that |y|
denotes its length, y[i] denotes its i-th bit and y[i..j] denotes bits i
through j of y. For example if y = 0100 then |y| = 4, y[2] = 1 and
y[2..4] = 100. In this case, ε denotes the empty string, {0, 1}∗ is the
set of all binary strings, x∥y denotes the concatenation of strings
x, y. For example 010∥11 = 01011. By y we denote the bitwise
complement of string y. (For example if y = 010 then y = 101.)
By N = {0, 1, 2, ...} we denote the set of all non-negative integers.
For p ∈ N with p ≥ 2, we let Zp = {0, 1, . . . , p − 1} denote the set
of integers modulo p. If x, n ∈ N satisfy 0 ≤ x < 2n then ⟨x⟩n
denotes the encoding of x as a binary string of length (exactly) n.
For example ⟨7⟩4 = 0111.
If X is a finite non-empty set, we let x ←$ X denote picking an
element of X uniformly at random and assigning it to x. Algorithms
may be randomized unless otherwise indicated. Running time and
memory usage are worst case. If A is an algorithm, we let y ←
A(x1, . . . ; r) denote running A with random coins r on inputs x1, . . .
and assigning the output to y. We let y ←$ A(x1, . . .) be the result of
picking r at random and letting y ← A(x1, . . . ; r). We let[A(x1, . . .)]
denote the set of all possible outputs of A when invoked with inputs
x1, . . ..
We use the code based game playing framework of [11]. (See
Fig. 1 for an example.) By Pr[G] we denote the probability of the
event that the execution of game G results in the game returning
true. We adopt the convention that the running time of an adver-
sary refers to the worst-case execution time of the game with the
adversary. We adopt the analogous convention for the memory
usage. This means that usually in reductions, adversary time and
memory complexity can be roughly maintained.
F (A) = Pr[GRS
3 RS SECURITY FRAMEWORK
Function families. A function family F : F.Keys × F.Inp → F.Out
is a 2-argument function taking a key fk in the keyspace F.Keys and
an input x in the input space F.Inp to return an output F(fk, x) in
the output space F.Out. For fk ∈ F.Keys we let Ffk : F.Inp → F.Out
be defined by Ffk(x) = F(fk, x) for all x ∈ F.Inp.
RS security. Our definition of security for a function family F
is parameterized by a relation R : {0, 1}∗ × {0, 1}∗ × {0, 1}∗ →
{true, false} and a set S ⊆ {0, 1}∗. Different choices of the pair (R, S)
allow us to recover classical definitions including collision resis-
tance, and to specify extensions and variants including constrained
F (A) of Fig. 1
collision resistance. The formalism considers game GRS
associated to R, S, F and adversary A. The latter is given the key fk
and a challenge point s drawn randomly from S, and returns some
output denoted out. It wins (the game returns true) if relation R
returns true on inputs fk, s, out. The advantage of Arelative to R, S,
H (A)],
also called its RS advantage, is defined as AdvRS
the probability that the game returns true.
Collision resistance. Recall that a collision for a function f is a
pair of distinct points x1, x2 in the domain of f such that f (x1) =
f (x2). Classical collision resistance of a function family F asks
that it be hard for an adversary A, given fk, to find a collision
x1, x2 for the function Ffk. In our framework, this is RcrSε security,
where Sε = {ε} consists of just the empty string and Rcr(fk, s, out)
parses out as a pair, (x0, x1) ← out, and returns true iff F(fk, x1) =
F(fk, x2) and x1 (cid:44) x2, meaning x1, x2 is a collision for Ffk. We
recover familiar notation for collision resistance by letting game
F (A) = GRcrSε
Gcr
Pre-image resistance. This is a form of one-wayness where the
adversary, given fk and challenge s, tries to recover a pre-image of
s under Ffk. Generalizing [28], our formalization is parameterized
by the set S from which s is drawn, and is obtained via our RS
framework, as follows. Let Rpre(fk, s, out) return true iff Ffk(out) =
s, meaning out ∈ F.Inp is a pre-image of s under Ffk. Then RpreS
security captures pre-image resistance for challenges drawn from
S. We further discuss this notion, and its relation to other types of
pre-image resistance, in Section 8.
Restricted collision resistance. Restricted collision resistance
makes the adversary’s job harder by asking that the collision x1, x2
satisfy some additional condition that will be specified by R. We
will describe the particular restriction we are interested in later in
Section 6.
F (A) = AdvRcrSε
(A).
F
(A) and Advcr
F
4 THE MD TRANSFORM
Compression functions. Let h be a family of functions with do-
main h.Inp = h.Bl × h.Out, meaning h : h.Keys × (h.Bl × h.Out)
→ h.Out. A point in the domain is a pair (m, c) where c, called the
chaining variable, is in the range of h, and m, called a message block,
is in the space h.Bl of message blocks. Such an h is called a compres-
sion function. For example the compression function h = sha256 of
Session D4:  Crypto PrimitivesCCS’17, October 30-November 3, 2017, Dallas, TX, USA893F (A)
Game GRS
fk ←$ F.Keys ; s ←$ S ; out ←$ A(fk, s)
Return R(fk, s, out)
R(fk, s, out) returns true iff
x1 (cid:44) x2 and Ffk(x1) = Ffk(x2)
Ffk(x) = s
R
Rcr
Rpre
Rccr
out
(x1, x2)
x
((m1, c1),(m2, c2),(a1, a2)) Rcr(fk, ε,(m1, c1),(m2, c2)) ∧ (c1 ∈ {s, Ffk(a1)}) ∧ (c2 ∈ {s, Ffk(a2)})
Collision resistance
Pre-image resistance
Constrained CR
Figure 1: Top: Game for defining R-security of function family F. Bottom: Some relations we will use. For Rcr we have s = ε. For
Rccr, function family F : F.Keys × (F.Bl × F.Out) → F.Out is a compression function.
H(k,s)(M)
m ← Split(M) ; c ← s ; n ← |m|
For i = 1, . . . , n do c ← hk((m[i], c))
Return c
Figure 2: Function family H = MD[h, Split, S] obtained by ap-
plying the MD transform to compression function h, split-
ting function Split and space S of initial vectors.
SHA256 has sha256.Bl = {0, 1}512 and sha256.Out = {0, 1}256. Its
key space sha256.Keys = {k} is a singleton, where k consists of 64
32-bit strings which are the first 32 bits of the fractional parts of
the cube roots of the first 64 primes [25].
Splitting functions. Let Split : Split.Inp → Split.Bl∗ be a func-
tion that takes a message M ∈ Split.Inp and returns a vector
m = Split(M) over a set Split.Bl. We require that this function is in-
jective, and there is an inverse Split−1 : Split.Bl∗ → Split.Inp∪{⊥}
such that Split−1(m) = M if m = Split(M) and ⊥ otherwise. We call
Split a splitting function. The domain Split.Inp is expected to be a
large set, usually all strings of length up to some very high maxi-
mum. In usage, Split.Bl = h.Bl will be the set of message blocks for
a compression function.
The MD transform. Let h : h.Keys × (h.Bl × h.Out) → h.Out be
a compression function. Let Split : Split.Inp → h.Bl∗ be a splitting
function whose range Split.Bl∗, as the notation indicates, is h.Bl∗.
Let S ⊆ h.Out be a set of starting points, also called initial vectors.
The MD transform MD[h, Split, S] associates to them the family of
functions H that is defined as follows. Let H.Inp = Split.Inp be the
set of messages that are possible inputs to the splitting function.
Let H.Out = h.Out. Let H.Keys = h.Keys× S, so that a key for H is
a pair (k, s) consisting of a key k for the compression function and
a particular starting point (initial vector) s ∈ S. Then H is specified
in Fig. 2.
Splitting in SHA. Our rendition of MD generalizes prior ones,
both from the literature [1, 14, 23] and from standards [25], all of
which can be seen as particular choices of Split and S. We illustrate
by recovering SHA256 as MD[sha256, SplitSha(µ,e), {s}] for choices
of the components that we now specify. The compression function
sha256 : {k} × ({0, 1}512 × {0, 1}256) → {0, 1}256 is of course the
compression function of SHA256 as per [25], with k the 64 · 32 bit
key discussed above. The starting point s, as specified in [25], is a
256-bit string, viewed as 8 32-bit blocks which are the first 32 bits
of the square roots of the first 8 primes. We define SplitSha(µ,e) as
the general splitting function for the SHA function families: SHA1,
SHA256, SHA512. It is parameterized by µ, the block length, and e,
the length of the encoding of the message length. These values are
shown for each SHA function in Fig. 4. Specifically for SHA256, µ =
512 and e = 64. To define SplitSha(µ,e), first define function pad(µ,e)
to take as input an integer L, with 0 ≤ L < 2e, and return 1∥0ℓ∥⟨L⟩e,
where ⟨L⟩e is an e-bit encoding of L, and ℓ ≥ 0 is the smallest integer
such that L + e + 1 + ℓ is a multiple of µ. Let SplitSha.Inp be the
set of all strings of length at most 2e, and let SplitSha.Bl = {0, 1}µ.
The function SplitSha : SplitSha.Inp → SplitSha.Bl∗, on input M,
lets L = |M| be the length of M, and lets X = M∥pad(µ,e)(L). Note
that the length of string X is a multiple of µ. Let n ← |X|/µ, and
let m[i] = X[1 + µ(i − 1)..µi] be the µ bit-block consisting of bits
1 + µ(i−1) through µi of X, for 1 ≤ i ≤ n. Then SplitSha(M) returns
m, which is a vector over {0, 1}µ.
5 CR PRESERVATION OF MD
Here we recall the classical problem of showing collision resistance
of the hash function H = MD[h, Split, S] assuming only collision
resistance of the compression function h. As noted in the intro-
duction, several works have noted that suffix-freeness of Split is
sufficient for this purpose [1, 5, 17, 18]. For completeness, we will
provide a formal claim together with the (easy) proof in our setting.
We then expand on this knowledge to establish a novel result
that the property of being suffix-free is precisely the property re-
quired for this proof; it is a necessary condition in addition to being
sufficient. To demonstrate this, we construct, for any splitting func-
tion which is not suffix-free, a compression function that is collision
resistant in isolation, but for which the result of applying the MD
transform is not collision resistant.
Suffix-freeness. Let x, y ∈ D∗ be vectors over a set D. We say
that x is a suffix of y, written y ⊒ x, if there exists a vector z ∈ D∗
such that y = z∥x. (The notation y ⊒ x is intended to visual-
ize x being the right-hand side of y.) For example, (10, 11) is a
suffix of (00, 11, 10, 11), namely (00, 11, 10, 11) ⊒ (10, 11), by let-
ting z = (00, 11). However, (01, 11) is not a suffix of (00, 11, 10, 11),
namely (00, 11, 10, 11) (cid:65) (01, 11). We say that splitting function
Split : Split.Inp → Split.Bl∗ is suffix-free if for any two distinct
Session D4:  Crypto PrimitivesCCS’17, October 30-November 3, 2017, Dallas, TX, USA894SplitSha(µ,e)(M)
L ← |M |
X ← M ∥pad(µ,e)(L) ; n ← |X |/µ
For 1 ≤ i ≤ n do
m[i] ← X[1 + µ(i − 1)...µi]
Return m
pad(µ,e)(L)
ℓ ← (µ − e − 1 − L) mod µ
Return 1∥0ℓ ∥⟨L⟩e
Figure 3: SplitSha and pad, the splitting function and padding
function, respectively, of the SHA function families. They
are parameterized by µ, the block length, and e, the length
of the encoding of the message length.
Function
SHA1
SHA256
SHA512
µ
512
512
1024
σ
160
256
512
e
64
64
128
Figure 4: Choices of parameters across different hash func-
tions.
messages M1, M2 ∈ Split.Inp we have Split(M1) (cid:65) Split(M2), that
is, Split(M2) is not a suffix of Split(M1).
Suffix-freeness of SplitSha. We discussed above how SHA256 is
underlain by a particular splitting function that we defined and
called SplitSha(µ,e). Here we show that this function is suffix-free
to provide an example of a suffix-free scheme.
Proposition 5.1. The function SplitSha(µ,e) is suffix-free.
Proof. (of Proposition 5.1) Let M1, M2 ∈ SplitSha(µ,e).Inp be
distinct. Consider when |M1| (cid:44) |M2|. Then the last blocks of
vectors SplitSha(µ,e)(M1) and SplitSha(µ,e)(M2) are, respectively,
pad(µ,e)(|M1|) and pad(µ,e)(|M2|). But then ⟨|M1|⟩e (cid:44) ⟨|M2|⟩e, which
implies pad(µ,e)(|M1|) (cid:44) pad(µ,e)(|M2|) and so neither vector can
be a suffix of the other.
We now consider the case when |M1| = |M2|. This will imply
that |SplitSha(µ,e)(M1)| = |SplitSha(µ,e)(M2)|. Then in order for
SplitSha(µ,e)(M1) ⊒ SplitSha(µ,e)(M2) or the opposite to hold it
must be that SplitSha(µ,e)(M1) = SplitSha(µ,e)(M2). Notice that
SplitSha(µ,e)(M) prepends the message M to its output. Since M1 (cid:44)
M2, we have that SplitSha(µ,e)(M1) (cid:44) SplitSha(µ,e)(M2) and so
SplitSha(µ,e)(M1) (cid:65) SplitSha(µ,e)(M2) as required.
□