fteStartLogger
Guidance for updating agent or logger JVM options
If you use the -sj parameter of the fteModifyAgent or fteModifyLogger command to modify an
existing Windows Service definition for an agent or logger by updating, adding, or removing Java system
properties, the existing Windows Service is first deleted before a new one is created in its place, and
the agent or logger properties file is updated with the properties for the new Windows Service. The new
Windows Service definition must be consistent with the updated Windows Service properties that are
defined in the agent or logger properties file.
From IBM MQ 9.0.0 Fix Pack 4, additional checks are added under APAR IT22423 such that any updates
that are made to the JVM options for an agent or logger with the -sj parameter of the fteModifyAgent
or fteModifyLogger command are verified to make sure that the options have been correctly specified.
If the properties are found to be invalid, or otherwise could not be validated, the fteModifyAgent or
fteModifyLogger command fails and an appropriate error message is displayed.
If the JVM properties are valid and the deletion of the existing Windows Service is successful, but a failure
then arises when the fteModifyAgent or fteModifyLogger command is creating the new Windows
Service, the command attempts to remove the properties that define the replacement Windows Service
from the agent or logger properties file. In this case, error messages are returned to explain that the
agent or logger could not be modified, the old Windows Service was deleted but a new Windows Service
could not be created and the agent or logger will therefore not run as a Windows Service. You must then
manually verify that the state of the Windows Service definition is consistent with the Windows Service
IBM MQ troubleshooting and support 175
properties that are defined in the agent or logger properties file, and take the appropriate action to correct
any inconsistencies.
Related reference
fteModifyAgent: run an MFT agent as a Windows service
fteModifyLogger: run an MFT logger as a Windows service
What to do if MFT does not read keystore properties from the keystore configuration
file in AMS
The keystore configuration file location, if not present in the default location, must be specified by the
MQS_KEYSTORE_CONF variable in order for the Java AMS to run in client mode. If the location is not
specified, the Managed File Transfer Agent logs will show the error message: "Failed to read keystore
properties from the keystore configuration file."
The default location for the keystore configuration file is home_directory/.mqs/keystore.conf. If
the location of the keystore configuration file is not the default location, complete the following steps:
1.Start the FTE agent in client mode.
2.Apply AMS security to SYSTEM.FTE.DATA. queue. If the keystore configuration file is not
in this location, all transfers will fail with no acknowledgment.
3.Set the system variable BFG_JVM_PROPERTIES to BFG_JVM_PROPERTIES=-
DMQS_KEYSTORE_CONF=path to keystore_config file for the fteStartAgent command.
4.Set the system variable MQS_KEYSTORE_CONF to MQS_KEYSTORE_CONF=path to keystore_config file
for the fteStartAgent command. This must be set to ensure all agents run, regardless of the mode
they are running in.
Note: If the Java AMS is running in bindings mode, error AMQ9062 will be shown in the queue manager's
error log if the keystore configuration file is not in the default location.
BFGSS0023E errors and how to avoid them
If you uninstall a Fix Pack from an installation in order to move back to a previous version of the product,
and an agent associated with the installation was involved with managed transfers at the time the
uninstallation took place, then that agent cannot start and will report an BFGSS0023E error. You can avoid
this error by completing a number of steps that should prevent BFGSS0023E messages from appearing
when the agents are restarted.
For every in-flight managed transfer that an agent is currently involved in, there is a message on
the agent's SYSTEM.FTE.STATE.agent_name queue. This message stores checkpoint information on the
managed transfer, and is used if the managed transfer goes into recovery. Once a managed transfer has
finished, then the corresponding message on the SYSTEM.FTE.STATE.agent_name queue is removed.
Each state message contains some internal header information indicating which version of the Managed
File Transfer component was being used by an agent when the managed transfer was running. The
version information shows the specific Fix Pack level, so, for example, if an IBM MQ 8.0.0 Fix Pack 5
agent was running a managed transfer, then the state message for that managed transfer would contain a
reference to IBM MQ 8.0.0 Fix Pack 5.
If a Fix Pack is uninstalled from an installation, and an agent associated with that installation has in-flight
transfers associated with it, then the agent fails to start and reports the following error:
BFGSS0023E: The agent is configured to use IBM MQ queues that contain data created using a later
version
of the product. The agent cannot run in this configuration and will end.
For example, if an IBM MQ 8.0.0 Fix Pack 5 agent has some in-flight transfers running when it is stopped
and then downgraded to the IBM MQ 8.0.0 Fix Pack 4 level, the next time the agent is started, it checks
the messages on its SYSTEM.FTE.STATE.agent_name queue and finds that they were written when it
was using IBM MQ 8.0.0 Fix Pack 5. As it is now using IBM MQ 8.0.0 Fix Pack 4, the agent reports the
BFGSS0023E error described in the previous paragraph and shuts itself down.
176 Troubleshooting and Support for IBM MQ
As a general rule, if you want to remove a Fix Pack to either the Managed File Transfer component
completing the following steps should prevent the BFGSS0023E messages from appearing when the
agents are restarted:
1.Ensure that all of their agents have completed their managed transfers.
2.Stop the agents.
3.Remove the Fix Pack.
4.Restart the agents.
Related tasks
Starting an MFT agent
Reverting a queue manager to a previous version on UNIX
Reverting a queue manager to a previous version on Windows
Related reference
MFT Agent queue settings
BFGSS0001 - BFGSS9999
Troubleshooting message problems
Related tasks
“Collecting information for data conversion problems” on page 320
If you need assistance from IBM Support to resolve a problem with data conversion on Multiplatforms,
you first need to collect troubleshooting information to send to IBM Support to help find a solution.
“Collecting information for dead-letter queue problems” on page 322
If an IBM MQ queue manager is placing messages on its dead-letter queue (DLQ) on Multiplatforms, you
might to collect troubleshooting information to help with finding a solution.
“Collecting information for error message and FFST problems” on page 323
If you need assistance from IBM Support to resolve a problem when IBM MQ is logging error messages or
writing FFSTs (FDC files) on Multiplatforms, you first need to collect troubleshooting information to send
to IBM Support to help find a solution.
Troubleshooting undelivered messages
If messages are not delivered successfully and are therefore placed on the dead-letter queue, you can
browse the queue and decide how to dispose of any messages that you find.
About this task
Messages that cannot be delivered for some reason are placed on the dead-letter queue. Each queue
manager typically has a local queue to use as a dead-letter queue, so that messages that cannot be
delivered to their correct destination can be stored for later retrieval.
Procedure
1.Check whether the queue contains any messages by using the MQSC DISPLAY QUEUE command.
2.If the queue contains messages, use the provided browse sample application (amqsbcg) to browse
messages on the queue using the MQGET call.
The sample application steps through all the messages on a named queue for a named queue
manager, displaying both the message descriptor and the message context fields for all the messages
on the named queue.
3.Decide how to dispose of any messages found on the dead-letter queue, depending on the reasons for
the messages being put on the queue.
Problems might occur if you do not associate a dead-letter queue with each queue manager.
IBM MQ troubleshooting and support 177
IBM MQ provides a dead-letter queue handler that allows you to specify how messages found on a
dead-letter queue are to be processed or removed. For more information about dead-letter queues
and handling undelivered messages, see Working with dead-letter queues.
Troubleshooting MQ Telemetry problems
Look for a troubleshooting task to help you solve a problem with running MQ Telemetry applications.
Related concepts
MQ Telemetry
Location of telemetry logs, error logs, and
configuration files
Find the logs, error logs, and configuration files used by MQ Telemetry.
Note: The examples are coded for Windows systems. Change the syntax to run the examples on AIX or
Linux systems.
Server-side logs
The telemetry (MQXR) service writes FDC files to the IBM MQ error directory:
WMQ data directory\errors\AMQ nnn.n.FDC
The format of the FDC files is MQXRn.FDC.
It also writes a log for the telemetry (MQXR) service. The log path is:
WMQ data directory\Qmgrs\qMgrName\errors\mqxr.log
The format of the log file is mqxr_n.log.
The IBM MQ telemetry sample configuration created by IBM MQ Explorer starts the telemetry
(MQXR) service using the command runMQXRService, which is in WMQ Telemetry installation
directory\bin. This command writes to:
WMQ data directory\Qmgrs\qMgrName\mqxr.stdout
WMQ data directory\Qmgrs\qMgrName\mqxr.stderr
Server-side configuration files
Telemetry channels and telemetry (MQXR) service
Restriction: The format, location, content, and interpretation of the telemetry channel configuration
file might change in future releases. You must use IBM MQ Explorer, or MQSC commands, to configure
telemetry channels.
IBM MQ Explorer saves telemetry configurations in the mqxr_win.properties file on Windows
systems, and the mqxr_unix.properties file on AIX or Linux systems. The properties files are
saved in the telemetry configuration directory:
WMQ data directory\Qmgrs\qMgrName\mqxr
Figure 6. Telemetry configuration directory on Windows
178 Troubleshooting and Support for IBM MQ
/var/mqm/qmgrs/qMgrName/mqxr
Figure 7. Telemetry configuration directory on AIX or Linux
JVM
Set Java properties that are passed as arguments to the telemetry (MQXR) service in the file,
java.properties. The properties in the file are passed directly to the JVM running the telemetry
(MQXR) service. They are passed as additional JVM properties on the Java command line. Properties
set on the command line take precedence over properties added to the command line from the
java.properties file.
Find the java.properties file in the same folder as the telemetry configurations. See Figure 6 on
page 178 and Figure 7 on page 179.
Modify java.properties by specifying each property as a separate line. Format each property
exactly as you would to pass the property to the JVM as an argument. For example:
-Xmx1024m
-Xms1024m
JAAS
From IBM MQ 9.3.0, the JAAS.Login module files have been moved
from the &MQ_INSTALL_DIRECTORY&/ mqxr/samples/samples directory to the directory
&MQ_INSTALL_DIRECTORY&/ mqxr/samples/jaas
The JAAS configuration file is described in Telemetry channel JAAS configuration, which includes the
sample JAAS configuration file, JAAS.config, shipped with MQ Telemetry.
If you configure JAAS, you are almost certainly going to write a class to authenticate users to replace
the standard JAAS authentication procedures.
To include your Login class in the class path used by the telemetry (MQXR) service class path,
provide an IBM MQ service.env configuration file.
Set the class path for your JAAS LoginModule in service.env. You cannot use the variable,
%classpath% in service.env. The class path in service.env is added to the class path already
set in the telemetry (MQXR) service definition.
Display the class paths that are being used by the telemetry (MQXR) service by adding echo set
classpath to runMQXRService.bat. The output is sent to mqxr.stdout.
The default location for the service.env file is:
WMQ data directory\service.env
Override these settings with a service.env file for each queue manager in the following directory:
WMQ data directory\Qmgrs\qMgrName\service.env
CLASSPATH= WMQ Installation Directory\mqxr\samples\jaas
Figure 8. Sample service.env for Windows
Note: service.env must not contain any variables. Substitute the actual value of WMQ
Installation Directory.
IBM MQ troubleshooting and support 179
Trace
See “Tracing the telemetry (MQXR) service” on page 180. The parameters to configure trace are
stored in these files:
WMQ data directory\Qmgrs\qMgrName\mqxr\trace.config
WMQ data directory\Qmgrs\qMgrName\mqxr\mqxrtraceOn.properties
WMQ data directory\Qmgrs\qMgrName\mqxr\mqxrtraceOff.properties
com.ibm.mq.MQXR.GenerateJavaDump property
In some cases, it is not necessary for the MQXR service to produce a Java dump as part of First Failure
Support Technology (FFST) generation.
You can set the system property com.ibm.mq.MQXR.GenerateJavaDump to specify whether or not
Java core dumps are generated:
• Setting the property to true means that Java core dumps are always generated alongside FDCs.
• Setting the property to false means that Java core dumps are never generated alongside FDCs.
The com.ibm.mq.MQXR.GenerateJavaDump property is disabled by default. The property is
located at mqinstall/qmgrs/qmgr_name/mqxr/java.properties as well as mqinstall/
qmgrs/qmgr_name/amqp/amqp_java.properties in your IBM MQ installation. Both of these
properties are required to be set to the same value.
Client-side log files and client-side configuration files
For the latest information and downloads, see the following resources:
• The Eclipse Paho project, and MQTT.org, have free downloads of the latest telemetry clients and
samples for a range of programming languages. Use these sites to help you develop sample programs
for publishing and subscribing IBM MQ Telemetry Transport, and for adding security features.
• The IBM Messaging Telemetry Clients SupportPac is no longer available for download. If you have a
previously downloaded copy, it has the following contents:
– The MA9B version of the IBM Messaging Telemetry Clients SupportPac included a compiled sample
application (mqttv3app.jar) and associated client library (mqttv3.jar). They were provided in
the following directories:
- ma9b/SDK/clients/java/org.eclipse.paho.sample.mqttv3app.jar
- ma9b/SDK/clients/java/org.eclipse.paho.client.mqttv3.jar
– In the MA9C version of this SupportPac, the /SDK/ directory and contents was removed:
- Only the source for the sample application (mqttv3app.jar) was provided. It was in this
directory:
ma9c/clients/java/samples/org/eclipse/paho/sample/mqttv3app/*.java
- The compiled client library was still provided. It was in this directory:
ma9c/clients/java/org.eclipse.paho.client.mqttv3-1.0.2.jar
Tracing the telemetry (MQXR) service
The trace facility provided by the IBM MQ telemetry (MQXR) service is provided to help IBM Support
diagnose customer issues related to the service.
About this task
There are two ways to control trace for the IBM MQ telemetry service:
• By using the strmqtrc and endmqtrc commands to start and stop trace. Enabling trace, using the
strmqtrc command, generates trace information for the entire queue manager where the IBM MQ
180 Troubleshooting and Support for IBM MQ
telemetry service is running. This includes the IBM MQ telemetry service itself, and the underlying Java
Message Queuing Interface (JMQI) that the service uses to communicate with other queue manager
components.
From IBM MQ 9.2.0, you can also generate trace information for selected areas of interest.
• By running the controlMQXRChannel command. Note, that turning trace on using the
controlMQXRChannel command traces only the IBM MQ telemetry service.
If you are unsure which option to use, contact your IBM Support representative and they will be able to
advise you on the best way to collect trace for the issue that you are seeing.
Procedure
1.Method one
a)Bring up a command prompt and navigate to the directory:
MQ_INSTALLATION_PATH\bin
b)Run the strmqtrc command to enable trace.
From IBM MQ 9.2.0, run the following command:
strmqtrc -m qmgr_name -t mqxr
where qmgr_name is the name of the queue manager where the IBM MQ MQXR service is running,
and -t mqxr restricts trace output to the MQXR service only.
c)Reproduce the issue.
d)Stop trace, by running the command:
endmqtrc -m qmgr_name
2.Method two.
a)Bring up a command prompt and navigate to the directory:
MQ_INSTALLATION_PATH\mqxr\bin
b)Run the following command to enable trace:
•
controlMQXRChannel -qmgr=qmgr_name -mode=starttrace [clientid=ClientIdentifier]
•
./controlMQXRChannel.sh -qmgr=qmgr_name -mode=starttrace [clientid=ClientIdentifier]
where qmgr_name is the name of the queue manager where the MQXR Service is running.
Set ClientIdentifier to the client identifier of an MQTT client. If you specify the clientid
parameter, the IBM MQ telemetry service trace captures activity for only the MQTT client with
that client identifier.
If you want to trace the IBM MQ telemetry service activity for more than one specific MQTT client,
you can run the command multiple times, specifying a different client identifier each time.
c)Reproduce the issue.
d)When the issue occurs, stop trace by running the following command:
•
controlMQXRChannel -qmgr=qmgr_name -mode=stoptrace
•
IBM MQ troubleshooting and support 181
./controlMQXRChannel.sh -qmgr=qmgr_name -mode=stoptrace [clientid=ClientIdentifier]
where qmgr_name is the name of the queue manager where the MQXR Service is running.
Results
To view the trace output, go to the following directory:
• MQ_DATA_PATH\trace.
• /var/mqm/trace.
The trace files containing the information from the MQXR service are called mqxr_N.trc, where N is a
number.
From IBM MQ 9.2.0, the trace files are named as follows:
• The trace files containing the information from the MQXR service are called
mqxrRunMQXRService_PPPPP.N.trc, where PPPPP is the process identifier for the MQXR service
and N is a number.
• The trace files containing the information from the controlMQXRChannel command are called
mqxrControlMQXRChannel_PPPPP.N.trc, where PPPPP is the process identifier for the MQXR
service and N is a number.
Trace information generated by the JMQI is written to a trace file called mqxr_PPPPP.trc, where PPPPP
is the process identifier for the MQXR Service.
Related reference
strmqtrc
Additional diagnostics using the