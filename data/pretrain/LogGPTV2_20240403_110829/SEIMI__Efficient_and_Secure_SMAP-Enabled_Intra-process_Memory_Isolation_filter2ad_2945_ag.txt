architectures are not yet supported by commodity hardware.
Trusted execution environment. Many works study how to
isolate a specific component of an application. Wedge [12]
provides privilege separation and isolation among its sthreads.
Shreds [18] uses ARM memory domains to divide execution
within a user-space thread. Light-weight contexts (lwCs) [33]
isolates units within an address space. Secure Memory Views
(SMV) [26] uses per-thread page tables to enforce isolation
while allowing sharing between threads. LOTRx86 [32] creates
a PrivUser in ring 1 to isolate the component. Intel’s SGX [29]
allows (components of) applications to execute with hardware-
enforced isolation against even untrusted OS. All these methods
are not practical for isolating the sensitive data of memory-
corruption defenses due to high switching frequency.
IX. CONCLUSION
Intra-process memory isolation is a fundamental building
block for memory-corruption defenses. In this paper, we
propose a highly efficient
intra-process memory isolation
technique, SEIMI, which leverages the widely used and
efficient hardware feature—SMAP. To use this privileged
hardware, SEIMI safely places the user code in a privileged
mode by using the Intel VT-x techniques. To avoid introducing
security threats, we propose multiple new techniques to ensure
the safe privilege escalation of the user code. Experiments
show that SEIMI is much more efficient than the state-of-the-
art isolation techniques. We believe that SEIMI can not only
benefit previously defenses, but also potentially open a new
research direction—enabling the efficient access to a variety of
privileged hardware features, which does not require context
switch, to defense mechanisms.
X. ACKNOWLEDGMENT
We would like to thank the anonymous reviewers for
their insightful suggestions and comments. This research was
supported by the National Natural Science Foundation of
China (NSFC) under grant U1736208, 61902374, U1636204,
and U1836213. Chenggang Wu is the corresponding author
(PI:EMAIL). Yinqian Zhang is in part supported by a gift
from Intel. Kangjie Lu was supported in part by the NSF awards
CNS-1815621 and CNS-1931208. Any opinions, findings,
conclusions or recommendations expressed in this material are
those of the authors and do not necessarily reflect the views
of NSF. Min Yang is also a member of Shanghai Institute
of Intelligent Electronics & Systems, Shanghai Institute for
Advanced Communication and Data Science.
REFERENCES
[1] Deep Dive:
Intel Analysis of Microarchitectural Data Sampling.
https://software.intel.com/security-software-guidance/insights/deep-dive-
intel-analysis-microarchitectural-data-sampling.
[2] Kraken. https://krakenbenchmark.mozilla.org.
[3] sysbench. https://dev.mysql.com/downloads/benchmarks.html.
[4] twemperf. https://github.com/twitter-archive/twemperf.
[5] ARM. ARM Architecture Reference Manual ARMv8, for ARMv8-A
architecture profile , 2019.
[6] M. Backes and S. Nürnberger. Oxymoron: Making Fine-Grained Memory
Randomization Practical by Allowing Code Sharing. In Proceedings of
the 23rd USENIX Security Symposium, San Diego, CA, USA, August
20-22, 2014., pages 433–447, 2014.
[7] A. Belay, A. Bittau, A. Mashtizadeh, D. Terei, D. Mazières, and
C. Kozyrakis. Dune: Safe User-level Access to Privileged CPU Features.
In Presented as part of the 10th USENIX Symposium on Operating
Systems Design and Implementation (OSDI 12), pages 335–348. USENIX,
2012. ISBN 978-1-931971-96-6.
[8] M. Ben-Yehuda, M. D. Day, Z. Dubitzky, M. Factor, N. Har’El,
A. Gordon, A. Liguori, O. Wasserman, and B.-A. Yassour. The Turtles
Project: Design and Implementation of Nested Virtualization. In 9th
USENIX Symposium on Operating Systems Design and Implementation
(OSDI 10). USENIX Association, 2010.
[9] E. D. Berger and B. G. Zorn. DieHard: Probabilistic Memory Safety
In Proceedings of the 27th ACM SIGPLAN
for Unsafe Languages.
Conference on Programming Language Design and Implementation,
PLDI ’06, pages 158–168. ACM, 2006.
ISBN 1-59593-320-4. doi:
10.1145/1133981.1134000.
[10] K. Bhat, E. van der Kouwe, H. Bos, and C. Giuffrida. ProbeGuard:
Mitigating Probing Attacks Through Reactive Program Transformations.
In ASPLOS, Apr. 2019.
[11] D. Bigelow, T. Hobson, R. Rudd, W. Streilein, and H. Okhravi. Timely
Rerandomization for Mitigating Memory Disclosures. In Proceedings of
the 22Nd ACM SIGSAC Conference on Computer and Communications
Security, CCS ’15, pages 268–279. ACM, 2015.
[12] A. Bittau, P. Marchenko, M. Handley, and B. Karp. Wedge: Splitting
In Proceedings
Applications into Reduced-privilege Compartments.
of the 5th USENIX Symposium on Networked Systems Design and
Implementation, NSDI’08, pages 309–322. USENIX Association, 2008.
ISBN 111-999-5555-22-1.
[13] C. Canella, J. V. Bulck, M. Schwarz, M. Lipp, B. von Berg, P. Ortner,
F. Piessens, D. Evtyushkin, and D. Gruss. A Systematic Evaluation of
Transient Execution Attacks and Defenses. In 28th USENIX Security
Symposium, 2019.
[14] C. Canella, D. Genkin, L. Giner, D. Gruss, M. Lipp, M. Minkin,
D. Moghimi, F. Piessens, M. Schwarz, B. Sunar, J. Van Bulck, and
14
Y. Yarom. Fallout: Leaking Data on Meltdown-resistant CPUs.
In
Proceedings of the ACM SIGSAC Conference on Computer and Commu-
nications Security (CCS). ACM, 2019.
[15] Chapter 23.1 Introduction to virtual machine extensions. Intel 64 and
IA-32 Architectures Software Developer’s Manual.
[16] Chapter 3.4.3 Segment Registers.
Intel 64 and IA-32 Architectures
Software Developer’s Manual., 2019.
[17] X. Chen, A. Slowinska, D. Andriesse, H. Bos, and C. Giuffrida.
StackArmor: Comprehensive Protection From Stack-based Memory Error
Vulnerabilities for Binaries. In NDSS. The Internet Society, 2015.
[18] Y. Chen, S. Reymondjohnson, Z. Sun, and L. Lu. Shreds: Fine-Grained
Execution Units with Private Memory. In 2016 IEEE Symposium on
Security and Privacy (SP), pages 56–71, May 2016. doi: 10.1109/SP.
2016.12.
[19] L. Davi, C. Liebchen, A. Sadeghi, K. Z. Snow, and F. Monrose.
Isomeron: Code Randomization Resilient
to (Just-In-Time) Return-
Oriented Programming. In 22nd Annual Network and Distributed System
Security Symposium, NDSS 2015, San Diego, California, USA, February
8-11, 2015, 2015.
[20] L. Deng, Q. Zeng, and Y. Liu. ISboxing: An Instruction Substitution
Based Data Sandboxing for x86 Untrusted Libraries. In ICT Systems
Security and Privacy Protection. Springer International Publishing, 2015.
IMIX:
In 27th USENIX Security
[21] T. Frassetto, P. Jauernig, C. Liebchen, and A.-R. Sadeghi.
In-Process Memory Isolation EXtension.
Symposium (USENIX Security 18). USENIX Association, 2018.
[22] R. Gawlik, B. Kollenda, P. Koppe, B. Garmany, and T. Holz. Enabling
Client-Side Crash-Resistance to Overcome Diversification and Informa-
tion Hiding. In 23nd Annual Network and Distributed System Security
Symposium, NDSS 2016, San Diego, California, USA, February 21-24,
2016, 2016.
[23] E. Göktas, R. Gawlik, B. Kollenda, E. Athanasopoulos, G. Portokalidis,
C. Giuffrida, and H. Bos. Undermining Information Hiding (and What
to Do about It). In 25th USENIX Security Symposium, USENIX Security
16, Austin, TX, USA, August 10-12, 2016., pages 105–119, 2016.
[24] B. Gras, K. Razavi, E. Bosman, H. Bos, and C. Giuffrida. ASLR on the
Line: Practical Cache Attacks on the MMU. In NDSS, 2017.
[25] M. Hedayati, S. Gravani, E. Johnson, J. Criswell, M. L. Scott, K. Shen,
and M. Marty. Hodor: Intra-Process Isolation for High-Throughput
Data Plane Libraries. In 2019 USENIX Annual Technical Conference
(USENIX ATC 19), pages 489–504. USENIX Association, July 2019.
ISBN 978-1-939133-03-8.
[26] T. C.-H. Hsu, K. Hoffman, P. Eugster, and M. Payer. Enforcing Least
Privilege Memory Views for Multithreaded Applications. In Proceedings
of the 2016 ACM SIGSAC Conference on Computer and Communications
Security, CCS ’16, pages 393–405. ACM, 2016. ISBN 978-1-4503-4139-
4. doi: 10.1145/2976749.2978327.
[27] Intel. Control-flow Enforcement Technology Preview., 2017.
[28] Intel.
2018.
app/sites/default/files/336996-Speculative-Execution-Side-Channel-
Mitigations.pdf.
Speculative Execution
Side Channel Mitigations,
https://software.intel.com/security-software-guidance/api-
[29] Intel. Intel 64 and IA-32 Architectures Software Developer’s Manual.,
2019.
[30] K. Koning, X. Chen, H. Bos, C. Giuffrida, and E. Athanasopoulos. No
Need to Hide: Protecting Safe Regions on Commodity Hardware. In
Proceedings of the Twelfth European Conference on Computer Systems,
EuroSys ’17, pages 437–452. ACM, 2017. ISBN 978-1-4503-4938-3.
doi: 10.1145/3064176.3064217.
[31] V. Kuznetsov, L. Szekeres, M. Payer, G. Candea, R. Sekar, and D. Song.
Code-pointer Integrity. In Proceedings of the 11th USENIX Conference
on Operating Systems Design and Implementation, OSDI’14, pages
147–163. USENIX Association, 2014. ISBN 978-1-931971-16-4.
[32] H. Lee, C. Song, and B. B. Kang. Lord of the x86 Rings: A Portable
User Mode Privilege Separation Architecture on x86. In Proceedings of
the 2018 ACM SIGSAC Conference on Computer and Communications
Security, CCS ’18, pages 1441–1454. ACM, 2018. ISBN 978-1-4503-
5693-0. doi: 10.1145/3243734.3243748.
[33] J. Litton, A. Vahldiek-Oberwagner, E. Elnikety, D. Garg, B. Bhattacharjee,
15
and P. Druschel. Light-Weight Contexts: An OS Abstraction for
In 12th USENIX Symposium on Operating
Safety and Performance.
Systems Design and Implementation (OSDI 16), pages 49–64. USENIX
Association, Nov. 2016. ISBN 978-1-931971-33-1.
[34] Y. Liu, T. Zhou, K. Chen, H. Chen, and Y. Xia. Thwarting Memory
Disclosure with Efficient Hypervisor-enforced Intra-domain Isolation.
In Proceedings of the 22Nd ACM SIGSAC Conference on Computer
and Communications Security, CCS ’15, pages 1607–1619. ACM, 2015.
ISBN 978-1-4503-3832-5. doi: 10.1145/2810103.2813690.
[35] K. Lu, C. Song, B. Lee, S. P. Chung, T. Kim, and W. Lee. ASLR-
Guard: Stopping Address Space Leakage for Code Reuse Attacks. In
Proceedings of the 22Nd ACM SIGSAC Conference on Computer and
Communications Security, CCS ’15, pages 280–291. ACM, 2015. ISBN
978-1-4503-3832-5. doi: 10.1145/2810103.2813694.
[36] K. Lu, W. Lee, S. Nürnberger, and M. Backes. How to Make ASLR Win
the Clone Wars: Runtime Re-Randomization. In 23nd Annual Network
and Distributed System Security Symposium, NDSS 2016, San Diego,
California, USA, February 21-24, 2016, 2016.
[37] L. McVoy and S. Carl. lmbench: Portable tools for performance analysis.
In Proceedings of the USENIX Annual Technical Conference (ATC),
1996.
[38] L. Mogosanu, A. Rane, and N. Dautenhahn. MicroStache: A Lightweight
Execution Context for In-Process Safe Region Isolation. In RAID, 2018.
[39] V. Mohan, P. Larsen, S. Brunthaler, K. W. Hamlen, and M. Franz. Opaque
Control-Flow Integrity. In 22nd Annual Network and Distributed System
Security Symposium, NDSS 2015, San Diego, California, USA, February
8-11, 2015, 2015.
[40] X. Z. Nathan Burow and M. Payer. Shining Light On Shadow Stacks.
In 2019 IEEE Symposium on Security and Privacy, 2019.
[41] A. Oikonomopoulos, E. Athanasopoulos, H. Bos, and C. Giuffrida. Poking
In 25th USENIX Security Symposium,
Holes in Information Hiding.
USENIX Security 16, Austin, TX, USA, August 10-12, 2016., pages
121–138, 2016.
[42] V. Pappas, M. Polychronakis, and A. D. Keromytis. Transparent ROP
Exploit Mitigation Using Indirect Branch Tracing. In Presented as part
of the 22nd USENIX Security Symposium (USENIX Security 13), pages
447–462. USENIX, 2013. ISBN 978-1-931971-03-4.
[43] RISC-V. The RISC-V Instruction Set Manual, 2019.
[44] J. H. Saltzer and M. D. Schroeder. The protection of information in
computer systems. Proceedings of the IEEE, 63(9):1278–1308, Sep.
1975. doi: 10.1109/PROC.1975.9939.
[45] M. Schwarz, M. Lipp, D. Moghimi, J. Van Bulck, J. Stecklina, T. Prescher,
and D. Gruss. ZombieLoad: Cross-Privilege-Boundary Data Sampling.
In CCS, 2019.
[46] C. Song, H. Moon, M. Alam, I. Yun, B. Lee, T. Kim, W. Lee, and
Y. Paek. HDFI: Hardware-Assisted Data-Flow Isolation. In 2016 IEEE
Symposium on Security and Privacy (SP), pages 1–17, May 2016. doi:
10.1109/SP.2016.9.
[47] A. Vahldiek-Oberwagner, E. Elnikety, N. O. Duarte, M. Sammler,
P. Druschel, and D. Garg. ERIM: Secure, Efficient In-process Isolation
In 28th USENIX Security Symposium
with Protection Keys (MPK).
(USENIX Security 19), pages 1221–1238, Santa Clara, CA, Aug. 2019.
USENIX Association. ISBN 978-1-939133-06-9.
[48] V. van der Veen, D. Andriesse, E. Gökta¸s, B. Gras, L. Sambuc,
A. Slowinska, H. Bos, and C. Giuffrida. Practical Context-Sensitive CFI.
In Proceedings of the 22nd Conference on Computer and Communications
Security (CCS’15), October 2015.
[49] S. van Schaik, A. Milburn, S. Österlund, P. Frigo, G. Maisuradze,
K. Razavi, H. Bos, and C. Giuffrida. RIDL: Rogue In-flight Data
Load. In S&P, May 2019.
[50] S. van Schaik, A. Milburn, S. Österlund, P. Frigo, G. Maisuradze,
K. Razavi, H. Bos, and C. Giuffrida. RIDL: Rogue In-flight Data
Load (With Addendum). In S&P, May 2019.
[51] R. Wahbe, S. Lucco, T. E. Anderson, and S. L. Graham. Efficient
Software-based Fault Isolation. SIGOPS Oper. Syst. Rev., 27(5):203–216,
Dec. 1993. ISSN 0163-5980. doi: 10.1145/173668.168635.
[52] X. Wang, J. Zang, Z. Wang, Y. Luo, and X. Li. Selective hard-
ware/software memory virtualization. pages 217–226. VEE’11, 07 2011.
[53] Z. Wang, C. Wu, J. Li, Y. Lai, X. Zhang, W.-C. Hsu, and Y. Cheng.
ReRanz: A Light-Weight Virtual Machine to Mitigate Memory Disclosure
Attacks. In Proceedings of the 13th ACM SIGPLAN/SIGOPS International
Conference on Virtual Execution Environments, VEE ’17, pages 143–156.
ACM, 2017. ISBN 978-1-4503-4948-2. doi: 10.1145/3050748.3050752.
[54] Z. Wang, C. Wu, Y. Zhang, B. Tang, P.-C. Yew, M. Xie, Y. Lai,
Y. Kang, Y. Cheng, and Z. Shi. SafeHidden: An Efficient and Secure
Information Hiding Technique Using Re-randomization. In 28th USENIX
Security Symposium (USENIX Security 19), pages 1239–1256. USENIX
Association, Aug. 2019. ISBN 978-1-939133-06-9.
[55] D. Williams-King, G. Gobieski, K. Williams-King, J. P. Blake, X. Yuan,
P. Colp, M. Zheng, V. P. Kemerlis, J. Yang, and W. Aiello. Shuffler: Fast
and Deployable Continuous Code Re-randomization. In Proceedings
of the 12th USENIX Conference on Operating Systems Design and
Implementation, OSDI’16, pages 367–382. USENIX Association, 2016.
ISBN 978-1-931971-33-1.
[56] J. Woodruff, R. N. Watson, D. Chisnall, S. W. Moore, J. Anderson,
B. Davis, B. Laurie, P. G. Neumann, R. Norton, and M. Roe. The
CHERI capability model: revisiting RISC in an age of risk. In ISCA ’14:
Proceeding of the 41st annual international symposium on Computer
architecture, pages 457–468. IEEE Press, 2014. ISBN 978-1-4799-4394-4.
doi: http://dx.doi.org/10.1145/2678373.2665740.
[57] X. Yuan, Z. Yinqian, and T. Radu. SPEECHMINER: A Framework for
Investigating and Measuring Speculative Execution Vulnerabilities. In
NDSS. The Internet Society, 2020.
[58] C. Zhang, T. Wei, Z. Chen, L. Duan, L. Szekeres, S. McCamant, D. Song,
and W. Zou. Practical control flow integrity and randomization for binary
executables. In Proceedings - 2013 IEEE Symposium on Security and
Privacy, SP 2013, Proceedings - IEEE Symposium on Security and
Privacy, pages 559–573, 8 2013. ISBN 9780769549774. doi: 10.1109/
SP.2013.44.
16