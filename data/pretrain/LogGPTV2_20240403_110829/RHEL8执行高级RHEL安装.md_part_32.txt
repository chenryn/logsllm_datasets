-   `datastream-id`{.literal} - 该值中引用的数据流的 ID
    `content-url`{.literal}。仅在 `content-type`{.literal}
    是`datastream`{.literal} 时使用。
-   `xccdf-id`{.literal} - 要使用的基准数据的 ID。
-   `content-path`{.literal} - 应使用到 datastream 或 XCCDF
    文件的路径，在归档中使用相对路径。
-   `profile`{.literal} - 要应用的配置集 ID。`default`{.literal}
    用来应用默认配置集。
-   `fingerprint`{.literal} - 由 `content-url`{.literal} 引用的内容的
    MD5、SHA1 或 SHA2 校验和。
-   `tailoring-path`{.literal} -
    应使用的定制文件的路径，在归档中作为相对路径指定。
:::
::: itemizedlist
**示例**
-   以下是使用 `%addon org_fedora_oscap`{.literal} 中内容的示例 部分
    [**[scap-security-guide]{.package}**]{.strong} 在安装介质中：
    ::: example
    []{#kickstart-commands-and-options-reference_installing-rhel-as-an-experienced-user.html#exam-org-fedora-oscap-ssg}
    **例 B.1. 使用 SCAP 安全指南的 OpenSCAP 附加组件定义示例**
    ::: example-contents
    ``` screen
    %addon org_fedora_oscap
    content-type = scap-security-guide
    profile = pci-dss
    %end
    ```
    :::
    :::
-   以下是从 web 服务器加载自定义配置集的复杂示例：
    ::: example
    []{#kickstart-commands-and-options-reference_installing-rhel-as-an-experienced-user.html#exam-org-fedora-oscap-datastream}
    **例 B.2. 使用 Datastream 的 OpenSCAP 附加组件定义示例**
    ::: example-contents
    ``` screen
    %addon org_fedora_oscap
    content-type = datastream
    content-url = http://www.example.com/scap/testing_ds.xml
    datastream-id = scap_example.com_datastream_testing
    xccdf-id = scap_example.com_cref_xccdf.xml
    profile =  xccdf_example.com_profile_my_profile
    fingerprint = 240f2f18222faa98856c3b4fc50c4195
    %end
    ```
    :::
    :::
:::
::: itemizedlist
**其它资源**
-   有关 OpenSCAP 安装程序附加组件的附加信息，请参考
    [https://www.open-scap.org/tools/oscap-anaconda-addon/](https://www.open-scap.org/tools/oscap-anaconda-addon/){.link}。
-   有关 SCAP Security Guide 中的可用配置文件及其功能的更多信息，请查看
    [OpenSCAP
    门户网站](http://www.open-scap.org/security-policies/choosing-policy/){.link}。
:::
:::
:::
::: section
::: titlepage
# []{#kickstart-commands-and-options-reference_installing-rhel-as-an-experienced-user.html#commands-used-in-anaconda_kickstart-commands-and-options-reference}Anaconda 中使用的命令 {.title}
:::
这个 `pwpolicy`{.literal} 命令是一个 Anaconda UI 特定的命令，它只能用于
kickstart 文件的 `%anaconda`{.literal} 部分。
::: section
::: titlepage
## []{#kickstart-commands-and-options-reference_installing-rhel-as-an-experienced-user.html#pwpolicy_commands-used-in-anaconda}pwpolicy {.title}
:::
`pwpolicy`{.literal} Kickstart
命令是可选的。在安装过程中使用这个命令强制使用自定义密码策略。策略要求您为
root、用户或 luks
用户帐户创建密码。密码长度和强度等因素决定了密码的有效性。
::: title
**语法**
:::
``` screen
pwpolicy name [--minlen=length] [--minquality=quality] [--strict|--nostrict] [--emptyok|--noempty] [--changesok|--nochanges]
```
::: itemizedlist
**必填选项**
-   [*name*]{.emphasis} - 使用 `root`{.literal}、`user`{.literal} 或
    `luks`{.literal} 替换来强制实施对`root`{.literal} 密码、用户密码或
    LUKS 密码短语的安全策略。
:::
::: itemizedlist
**可选选项**
-   `--minlen=`{.literal} -
    设置允许密码长度的最小值，以字符为单位。默认为 `6`{.literal}。
-   `--minquality=`{.literal} - 设定 `libpwquality`{.literal}
    库定义的最小允许密码质量。默认值为 `1`{.literal}。
-   `--strict`{.literal} - 启用严格的密码强制。不接受没有满足
    `--minquality=`{.literal} 和 `--minlen=`{.literal}
    中指定的要求的密码。默认禁用这个选项。
-   `--notstrict`{.literal} - [*不满足*]{.emphasis}
    `--minquality=`{.literal} 和 `-minlen=`{.literal}
    选项指定的最低质量要求的密码将在之后。 [**[Done]{.GUI}**]{.strong}
    GUI 中单击两次.文本模式界面使用类似的机制。
-   `--emptyok`{.literal} - 允许使用空密码。对于用户密码，默认启用。
-   `--notempty`{.literal} - 不允许使用空密码。对于 root 密码和 LUKS
    密码，默认启用。
-   `--changesok`{.literal} - 即使 Kickstart
    文件已经指定了密码，也允许在用户界面中更改密码。默认禁用此选项。
-   `--nochanges`{.literal} - 不允许更改在 Kickstart
    文件中已设定的密码。默认启用此选项。
:::
::: itemizedlist
**备注**
-   `pwpolicy`{.literal} 命令是一个 Anaconda-UI 特定的命令，它只能用于
    kickstart 文件的 `%anaconda`{.literal} 部分。
-   `libpwquality`{.literal}
    程序库用于检查最低密码要求（长度和服务）。您可以使用由您提供的
    `pwscore`{.literal} 和 `pwmake`{.literal} 命令
    [**[libpwquality]{.package}**]{.strong}
    软件包，以检查密码的质量得分，或者创建具有给定分数的随机密码。有关这些命令的详情，请查看
    `pwscore(1)`{.literal} `pwmake(1)`{.literal} man page。
:::
:::
:::
::: section
::: titlepage
# []{#kickstart-commands-and-options-reference_installing-rhel-as-an-experienced-user.html#kickstart-commands-for-system-recovery_kickstart-commands-and-options-reference}kickstart 命令进行系统恢复 {.title}
:::
这部分中的 Kickstart 命令修复安装了的系统。
::: section
::: titlepage
## []{#kickstart-commands-and-options-reference_installing-rhel-as-an-experienced-user.html#rescue_kickstart-commands-for-system-recovery}rescue {.title}
:::
`rescue`{.literal} Kickstart 命令是可选的。它提供有 root 特权的 shell
环境，以及一组系统管理工具修复安装以及排除问题，例如：
::: itemizedlist
-   以只读方式挂载文件系统
-   blocklist 或添加驱动程序磁盘中提供的驱动程序
-   安装或升级系统软件包
-   管理分区
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
Kickstart 的救援模式与系统的救援模式和紧急模式不同，后者是 systemd
和服务管理器的一部分。
:::
`rescue`{.literal} 命令不自行修改该系统。它只能通过在 /mnt/sysimage
下挂载系统的读写模式来设置救援环境。您可以选择不挂载系统，或者将其挂载为只读模式。
::: title
**语法**
:::
``` screen
rescue [--nomount|--romount]
```
::: itemizedlist
**选项**
-   `--nomount`{.literal} 或者 `--romount`{.literal} -
    控制如何将安装的系统挂载到救援环境中。默认情况下，安装程序会找到您的系统并以读写模式挂载它，同时告知它在什么位置进行挂载。您可以选择不挂载任何系统（使用
    `--nomount`{.literal} 选项），或以只读模式挂载（ 使用
    `--romount`{.literal} 选项）。只能使用这两个选项中的一个。
:::
::: title
**备注**
:::
要运行救援模式，请制作 Kickstart 文件的副本并在其中包含
`rescue`{.literal} 命令。
使用该 `rescue`{.literal} 命令可让安装程序执行以下步骤：
::: orderedlist
1.  运行 `%pre`{.literal} 脚本。
2.  为救援模式设置环境。
    下面的 kickstart 命令生效：
    ::: orderedlist
    1.  updates
    2.  sshpw
    3.  logging
    4.  lang
    5.  network
    :::
3.  设置高级存储环境。
    下面的 kickstart 命令生效：
    ::: orderedlist
    1.  fcoe
    2.  iscsi
    3.  iscsiname
    4.  nvdimm
    5.  zfcp
    :::
4.  挂载系统
    ``` screen
    rescue [--nomount|--romount]
    ```
5.  运行 %post 脚本
    只有在安装的系统被挂载为读写模式时才运行这一步。
6.  启动 shell
7.  重启系统
:::
:::
:::
:::
[]{#partitioning-reference_installing-rhel-as-an-experienced-user.html}
::: appendix
::: titlepage
# []{#partitioning-reference_installing-rhel-as-an-experienced-user.html#partitioning-reference_installing-rhel-as-an-experienced-user}附录 C. 分区参考 {.title}
:::
::: section
::: titlepage
# []{#partitioning-reference_installing-rhel-as-an-experienced-user.html#supported-device-types_partitioning-reference}支持的设备类型 {.title}
:::
::: variablelist
[标准分区]{.term}
:   标准分区可以包含文件系统或者 swap 空间。标准分区最常用于
    `/boot`{.literal} `BIOS Boot`{.literal} 以及
    `EFI System partitions`{.literal}。多数其他用途，推荐使用 LVM
    逻辑卷。
[LVM]{.term}
:   选择 `LVM`{.literal} （或者逻辑卷管理）作为设备类型会创建一个 LVM
    逻辑卷。如果目前没有 LVM 卷组，则会自动生成包含新卷的卷组 ; 如果 LVM
    卷组已存在，则会分配该卷。LVM
    可在使用物理磁盘时提高性能，并允许高级设置，比如在一个挂载点使用多个物理磁盘，并设置软件
    RAID 来提高性能、可靠性或两者。
[LVM 精简配置]{.term}
:   使用精简配置，您可以管理一个空闲空间的存储池，称为精简池，可在应用程序需要时将其分配给任意数量的设备。您可以根据需要动态地扩展池，以便有效分配存储空间。
:::
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
安装程序不支持超额提供的 LVM 精简池。
:::
:::
::: section
::: titlepage
# []{#partitioning-reference_installing-rhel-as-an-experienced-user.html#supported-file-systems_partitioning-reference}支持的文件系统 {.title}
:::
这部分论述了 Red Hat Enterprise Linux 中可用的文件系统。
::: variablelist
[xfs]{.term}
:   `XFS`{.literal} 它是一个高度可扩展的高性能文件系统，它最多支持 16
    EB（大约一千六百万 TB）的文件系统、8 EB 文件（大约八百万
    TB）以及包含千百万条目的目录结构。`XFS`{.literal}
    也支持元数据日志，它可提高崩溃恢复速度。单个 XFS 文件系统最多支持
    500 TB。`XFS`{.literal} 是 Red Hat Enterprise Linux
    中默认和推荐的文件系统。
[ext4]{.term}