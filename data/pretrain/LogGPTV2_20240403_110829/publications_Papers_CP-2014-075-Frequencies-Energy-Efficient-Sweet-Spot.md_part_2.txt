weinvestigatedtheenergyconsumptionofthethreealgorithms.Sincesortingis
compute bound, one could assume the CPU to be the predominant consumer of
energy amongst all other resources in a server. We collected empirical support
for this hypothesis and, in addition, determined further resources consuming
energy due to sorting. It is important to know that the frequency of a CPU
affects timing, power and, consequently, the energy consumption of algorithms.
In general, we will give empirical support for the following claims:
AC Power Consumption of Sort for 50mio Elements
543
043
]W[
rewoP
533
CA
033
523
radix sort std::sort counting sort
Fig.2. AC power consumption for sorting 50 million elements.
1. The highest frequency of a CPU does not necessarily lead to the lowest
energy consumption (power integrated over time).
2. Each algorithm has a detectable frequency at which the resulting energy
consumption is lowest (sweet spot frequency).
3. Different algorithms can have different sweet spot frequencies.
4 Results of the Experiments
Before investigating the impact of different frequencies on energy-efficiency in
Sect. 4.2, we analyze in Sect. 4.15 whether algorithms differ in their power con-
sumption and show that algorithms with low power consumption are not neces-
sarily the best in terms of energy consumption.
4.1 On the Power Consumption Level of Software
The weighted moments, among them the mean value, quartiles, minimum and
maximum excluding extreme outliers, are shown in Fig. 2 for a sorting task on
50 million elements where both CPUs of the server operate in turbo mode.
From the figure, one can infer that using radix or counting sort leads to a
lower power consumption than std::sort. The former two have an almost equal
level.Thesavingscomparedtostd::sortamountto4.6%.Yet,radixsortisclearly
thefastestalgorithmand,hence,thebestwhencombiningbothmetricswithout
prioritization of one over the other. Counting sort is, despite its low power con-
sumption, the worst in terms of energy consumption. From this so-called sweet
spot perspective, which will be further elaborated on in the following section,
the savings for radix sort amount to 77.6% compared to counting sort. Table 2
summarizes the key numbers from the experiments: Duration including range,
5 Allrawmeasurementsretrievedfromtheexperimentswereprocessedwiththestatis-
tics software R.
Table 2. Sorting algorithms comparison for 50mio elements (in turbo mode).
Algo. t (s)t (s)t (s)P (W)E (J)
min max range
radix 1.880 1.901 0.021 330.4 626.9
std::sort4.226 4.230 0.004 346.3 1464.1
count. 8.444 8.516 0.072 330.3 2801.5
0082
51
]W[ 003 ]J[
41 noitpmusnoc noitpmusnoc 0062
31
]s[ 052
emiT 21 0042
11 rewop ygrene
002
01 CA CA 0022
9 051
1200 1600 1900 2300 2700 3000 1200 1600 1900 2300 2700 3000 1200 1600 1900 2300 2700 3000
Frequency [MHz] (3000=turbo mode) Frequency [MHz] (3000=turbo mode) Frequency [MHz] (3000=turbo mode)
(a) Time by Frequency (b) Power by Frequency (c) Energy by Frequency
Fig.3. The sweet spot of counting sort to sort 50mio elements.
power consumption per time unit and overall energy consumption for the mean
duration. All power values include 74W idle consumption.
4.2 On the Sweet Spots of Software
In this section, we investigate and prove wrong the common misconception that
software energy-efficiency equates directly to CPU performance. For this pur-
pose, we have collected evidence that executing software applications at high
CPU frequencies may lead to lower software energy-efficiency. Therefore, we re-
fine research question RQ2 into:
– RQ2a(Effectiveness).Canweincreasesoftwareenergyefficiencybychanging
the clock frequency of the CPU executing a software task?
– RQ2b (Determinability). Can the clock frequency of the CPU executing a
software task, which makes the software more energy efficient, be deter-
mined?
For the three different algorithmic implementation, radix sort, std::sort and
counting sort, we measured the energy consumed to sort 10, 20, ..., 50 million
integers. Fig. 3 shows the results obtained for sorting 50 million elements using
counting sort. Measurement results for all other list sizes and algorithms are
shown in Fig. 4. The figure shows three charts: time per frequency, power per
frequency,andenergyperfrequency.Notethatturbomodefrequencyvariesover
time,dependsondifferentfactorsandcanbebetween2.9and3.8GHz.Veryhigh
frequencies are unlikely as we fully use all cores.
50mio 50mio 0052 006 0051
50mio 40mio 40mio ]J[ noiptmusnoc 0002 ]J[ noiptmusnoc 005 ]J[ noiptmusnoc
40mio 30mio 004 0001
30mio 0051
30mio ygrene ygrene 003 ygrene
20mio 20mio 0001
20mio CA CA 002 CA 005
10mio 10mio 10mio 005 001
1500 2000 2500 3000 1500 2000 2500 3000 1500 2000 2500 3000
Frequency [MHz] (3000=turbo mode) Frequency [MHz] (3000=turbo mode) Frequency [MHz] (3000=turbo mode)
(a) Counting sort (sweet(b) Radix sort (sweet spot(c) std::sort (sweet spot at
spot at 1.8GHz) at 2.2GHz) 2.4GHz)
Fig.4. AC energy consumption and the corresponding sweet spot frequencies.
Time×Freq Fig. 4(a) shows that as the clock frequency of the CPU increases
from1.2GHzto2.9GHzandturbomode,themeantimerequiredtoexecutethe
software task of sorting decreases in a non-linear form. What should be noticed
is that at 1.4GHz the mean time to complete the task drops significantly.
Power×Freq Fig. 4(b) shows the power consumed based on the CPU clock fre-
quency selected. The results could be considered foreseeable, since the power
consumption of the CPU increases by its frequency. Nonetheless, up to 2GHz
the power consumption is more modest and has visible increments at 1.5GHz,
2.2GHz, 2.7GHz and for the turbo mode.
Energy×Freq Fig.4(c)providestheresultsofourfindingsthataremoststriking:
the number of joules required to execute the task of sorting has a sweet spot at
1.8GHz. The energy consumption declines by approximately 25% (708J) when
the CPU frequency is changed from turbo mode to 1.8GHz.
For the other algorithms, the results are also interesting. std::sort is more
energyefficientat2.4GHz.Thiscorrespondstoenergysavingsofapproximately
12%(or176J)comparedtotheturbomode,whichleadstotheshortestresponse
time. Running the CPU at a low frequency, i.e., 1.2GHz, increases the energy
consumed by 25% (427J) compared to the sweet spot frequency. Radix sort is
moreenergy-efficientat2.2GHz,whichcorrespondstoenergysavingsofapprox-
imately 15% (or 96 J) compared to the turbo mode and 18% (119J) compared
to the lowest frequency.
Fig.4clearlyshowsthedifferentsweetspotfrequencies(verticaldottedline),
in ascending order, for counting, radix and std::sort. The lines in the diagram
correspond to list sizes of 10..50 million elements.
Table 3 provides an overview of the results and identifies the sweet spots for
each algorithm (sweet spots are marked with a star ’*’), and the energy savings
that can be achieved when the most energy-efficient CPU clock frequency is
selected compared to using the maximum frequency (i.e., turbo mode).
In order to gain more insights, we calculate the energy savings from running
thealgorithmsatthesweetspotfrequencycomparedtothemaximumfrequency
05 05 05
Saving Saving Saving
Penalty Penalty Penalty
04 04 04
]%[ ]%[ ]%[
ytlaneP/sgnivaS 03 ytlaneP/sgnivaS 03 ytlaneP/sgnivaS 03
02 02 02
01 01 01
0 0 0
10 20 30 40 50 10 20 30 40 50 10 20 30 40 50
List size [mio] List size [mio] List size [mio]
(a) counting sort (b) radix sort (c) std::sort
Fig.5. AC energy saving compared with time penalty.
(AC energy saving) and the associated loss of performance (time penalty). The
penalty is always higher than the savings. Fig. 5 compares AC energy savings
and time penalties for all three algorithms and all list sizes.
While researchers have already found that energy-efficiency can be achieved
by redesigning software code, by making better use of memory and, by using
more efficient hardware components (see [13]), it is not well known that the
energy-efficiencyofsoftwareisalsoaffectedbythefrequencyoftheCPUatvery
precise frequencies other than the maximum frequency. Namely, our findings
provide an answer (A) to our two research questions:
– A2a (Effectiveness). Software energy efficiency can be improved by choosing
the most adequate CPU clock frequency. CPU clock frequency leads to a
considerable variability of the energy needed to complete a data-intensive
computational task.
– A2b(Determinability).TheCPUclockfrequencywhichmakessoftwaremore
energy efficient can be determined. In the case of counting sort for 50mio
elements, reducing the clock frequency by ≈60% of its maximal speed can
lead to an energy reduction of 25%.
These results entail not only that for data analytics tasks the sweet spot
of CPU frequency can, and should be determined, but it also shows that data-
intensivetaskswiththesamealgorithmiccomplexitycanhaveadifferentenergy
Table 3. The energy-efficient sweet spot of sorting algorithms.
AlgorithmE (J) Freq. (MHz)t (s)P (W)
radix 530.8 *2200 2.6 204.2
radix 626.9 turbo 1.9 330.4
std::sort 1282.3*2400 5.9 216.9
std::sort 1464.1turbo 4.2 346.3
count. 2093.8*1800 11.3 184.9
count. 2801.5turbo 8.5 330.3
efficiency. Therefore, it seems natural to consider developing energy-efficiency
benchmarks for software applications. While ISO software quality parameters
include over 50 metrics [14], SPEC CPU2006 provides comparative studies on
hardwareperformanceandSPECpowerforhardwareenergyefficiency6,thesame
does not happen to software energy efficiency.
5 Dynamic Software Adaptation
Ourideatoimplementanewkindofself-adaptivesoftwarefordataanalyticsand
business intelligence is to enable data-intensive tasks to select the frequency of
the CPU, based on the type of data processing. We will demonstrate how such
a system could be implemented using the computing task evaluated: sorting.
When a self-adaptive software for data analytics receives a request, it uses opti-
mizationtechniquestodetermineatwhichfrequencytheCPUshouldbeclocked
to fulfill the constraints of the request: performance or the energy efficiency of
the execution, or a combination of both. Optimization uses the approximated
functions from Table 4 and the number of elements requested to be sorted. The
information is stored in so-called QoS contracts. The result of the optimization
is the CPU frequency at which the sorting algorithm should be executed. Thus,
we propose a three-phase approach:
1. Approximatefunctionsofsweetspotfrequenciesbasedonmicro-benchmarks
to determine a server’s individual sweet spot frequency.
2. QoS contracts to capture the assessed non-functional behavior.
3. Optimization to compute the optimal frequency and algorithm for a given
user request at runtime.
We extend previous work (see [15]) by incorporating hardware reconfiguration
by means of explicit frequency scaling.
5.1 Approximate functions
It is possible to predict the sweet spot frequency by approximating a function
of the energy consumption depending on the frequency using multiple linear
regressionandsearchingtheminimumvalueofthisfunctionforagivenlistsize.
Fig. 4 depicts the energy consumption across all possible frequencies for sort
invocationsofthethreeinvestigatedsortalgorithms.Foreachalgorithmasweet
spot frequency can be determined independently of the list size.
For the measurements of radix sort, fourth grade polynomial functions ap-
proximate the measured values very precisely as shown in Table 4. The first five
rowsshowfunctionsfor10..50millionselements,whereasthelastrowrepresents
the generic function E(freq,size) = a×freq +b×freq2 +c×freq3 +d×
freq4+e+f ×listsize with an adjusted R2 of more then 99%. The minimum
of this general function is at 2.4GHz for all list sizes, which is not the measured
6 https://www.spec.org
e (intercept) a×freq b×freq2 c×freq3 d×freq4 f ×listsize ars
98.558887-17.000578 24.473429 1.497380 5.5770481.00E+07 (fixed)0.93990
214.645925-30.237388 45.255654 2.97751510.2319822.00E+07 (fixed)0.96998
344.115647-43.960454 78.485585 1.58867115.8145383.00E+07 (fixed)0.95190
450.068206-49.751193103.690842 0.92680521.1809034.00E+07 (fixed)0.96550
564.112603-51.629321131.365326 6.01585726.8564755.00E+07 (fixed)0.95546
-15.65866 -86.12392 171.4039 5.816562 35.62546 1.16653E-05 0.9942
Table4.Fourthgradepolynomialfunctionsforradixsorton10to50millionelements
(ars = adj.r.squared).
mean sweet spot at 2.2GHz, but is less than 1% distant from it. The cause of
this difference is the (small) deviation of the approximated function and the
closeness of the frequencies around the sweet spot frequency.
Thus,toautomaticallydetermineasweetspotfrequencyonatargetplatform
(unknown at design time), a developer has to provide a (micro) benchmark for
different algorithmic implementations. Using the approach described above, the
system can compute the sweet spot frequency automatically.
5.2 QoS Contracts
TheQualityContractLanguage(QCL)[15]allowstocapturethenon-functional
behavior of an implementation. A contract in QCL specifies for an implementa-
tion of a data analytics task (e.g., radix sort) pairs of non-functional provisions
andrequirements.Iftherequirementsarefulfilled,theprovisionsareguaranteed
to hold. Listing 1.1 depicts an example of a QCL contract for the radix sort
implementation used in this paper. It specifies 2 modes, which are alternative
pairs of requirements and provisions. The two modes represent the most energy
efficient and the fastest way to execute the algorithm. Thus, for the first mode,
the sweet spot frequency determined in the previous phase is specified as a re-
quirementontheCPU.Thesecondmodespecifiesthehighestpossiblefrequency
asarequirement.Inaddition,theruntimeandenergyconsumptionontheCPU
are specified as functions depending on the list size. They are determined anal-
ogously to the sweet spot functions in the first phase. All modes specify which
guaranteesaregivenifasetofrequirementsisfulfilled.Intheexamplecontract,
a specific maximum response time, which is equal to the time required on the
CPU and a small overhead (x1 and x2, respectively), is guaranteed.