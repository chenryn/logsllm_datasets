### Summary of Datasets (Table 2)

| Dataset | Number of Measurements | Duration | Year | Number of ASes | Technology/Format |
|---------|------------------------|----------|------|----------------|-------------------|
| CDN User Counts (§4.3) | 11.0 × 10^9 | 1 week | 2019 | 59,000 | Windows TCP/IP, HTTP Service (TCP RTT) |
| APNIC User Counts (§4.3) | 50.0 × 10^7 | 1 week | 2019 | 10,600 | Odin [17] (HTTP GET) |
| DITL Packet Traces (§2.1) | — | 1 month | 2019 | 39,000 | Custom URL DNS Requests, Google Ad Delivery Network, Packet Traces |
| DITL ∩ CDN (§3, §4.3, §7) | — | Updated daily | 2019 | 23,000 | Root DNS query and user counts |
| RIPE Atlas (§5.2, §7.1) | 51.9 × 10^9 | 2 days | 2018 | 50,300 | ping, traceroute |
| USC/ISI (§4.3) | 18.6 × 10^9 | — | 2018-2019 | 35,500 | Packet Traces |
| Local DNS / Activity Measurements (§4.3) | 10.0 × 10^3 | 1 hour | Various | 3,300 | Packet Traces, Chrome Webtime Tracker |

### Strengths and Weaknesses of Datasets (Table 3)

| Dataset | Strengths | Weaknesses |
|---------|-----------|------------|
| Sampled CDN Server-Side Logs (§6) | Has client to front-end mappings, global coverage | Cannot hold user population fixed across rings |
| Sampled CDN Client-Side Measurements (§5.2) | Can hold user population fixed across rings, global coverage | Do not know which front-end the client reached, smaller scale |
| CDN User Counts (§4.3) | Precise estimates of user counts, global coverage | Underestimates user counts |
| APNIC User Counts (§4.3) | Global coverage, publicly accessible | Not validated, coarse granularity |
| DITL Packet Traces (§2.1) | Global coverage | Noisy, only above the recursive resolver |
| DITL ∩ CDN (§3, §4.3, §7) | Global coverage, attributes queries to users | Excludes v6 |
| RIPE Atlas (§5.2, §7.1) | Historic data, reproducibility | Limited coverage |
| USC/ISI (§4.3) | Precise, below the recursive | Limited coverage, no information about users |
| Local DNS / Activity Measurements (§4.3) | Precise, at the end user | Limited coverage, small scale |

### Justification and Implications of Data Aggregation

In this section, we justify the decision to aggregate Microsoft user counts and DITL query volumes by resolver /24 and join the two datasets on /24 to create the DITL∩CDN dataset. The intuition behind this preprocessing step is that IP addresses in the same /24 are likely colocated, owned by the same organization, and act as recursives for similar sets of users.

#### Table 4: Overlap Statistics
| Dataset | Statistic | Without /24 Join | With /24 Join |
|---------|-----------|------------------|---------------|
| DITL ∩ CDN | DITL Recursives | 2.45% | 29.3% |
| DITL ∩ CDN | DITL Volume | 8.4% | 72.2% |
| DITL ∩ CDN | CDN Recursives | 41.9% | 78.8% |
| DITL ∩ CDN | CDN Volume | 47.05% | 88.1% |

Joining the datasets by /24 increases most measures of representation by tens of percents, with some measures increased by up to 64%.

#### Figure 9: CDF of Queries per Day
Figure 9 shows the cumulative distribution function (CDF) of the number of queries Microsoft users experience due to root DNS resolution, per day, without joining recursives by /24 in DITL with recursives seen by Microsoft (CDN). This unrepresentative analysis yields an estimate of daily user queries far lower than in Section 4.3.

#### Figure 10: Query Distribution by /24
Figure 10 quantifies the routing similarity within a /24 by showing the percent of queries from each /24 in DITL that do not reach the most popular anycast site for each /24 in each root deployment. For more than 80% of /24s, all queries visit only one site per root letter, suggesting that queries from the same /24 are routed similarly.

### Implications of Using the 2018 DITL

At the time of writing, the 2020 DITL was available, but we chose to use the 2018 study due to its better coverage of root letters. The 2018 DITL has none of the limitations of the 2020 DITL, such as missing B root, limited E root, and completely anonymized L root. Our high-level conclusions about root DNS latency and inflation do not change significantly from year to year, as shown in Figure 11.

### Estimating Latency in Page Loads

To estimate the latency a user experiences when interacting with Microsoft’s CDN (§5.2), we first estimate the number of RTTs required to load a typical web page hosted by Microsoft’s CDN. We aim to find a reasonable lower bound on the number of RTTs users incur for typical pages. Based on modeling and evaluation using Selenium, we find that 10 RTTs is a reasonable estimate. This lower bound provides a conservative measure of the impact of CDN inflation, as latency inflation accumulates with each additional RTT.

The number of RTTs during a page load depends on the size of files being downloaded, approximated by:
\[ N = \log_2 \left( \frac{D}{W} \right) \]
where \( N \) is the number of RTTs, \( D \) is the total number of bytes, and \( W \) is the window size.

This approach helps demonstrate how improvements in latency help users and how inflation hurts them.