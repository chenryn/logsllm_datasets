       SYNOPSIS
           aiobrute.py --target=TARGET 
       DESCRIPTION
           Example：
               python3 aiobrute.py --target example.com run
               python3 aiobrute.py --target ./domains.txt run
               python3 aiobrute.py --target example.com --process 4 --coroutine 64 run
               python3 aiobrute.py --target example.com --wordlist subdomains.txt run
               python3 aiobrute.py --target example.com --recursive True --depth 2 run
               python3 aiobrute.py --target m.{fuzz}.a.bz --fuzz True --rule [a-z] run
           Note:
               参数segment的设置受CPU性能，网络带宽，运营商限制等问题影响，默认设置500个子域为任务组，
               当你觉得你的环境不受以上因素影响，当前爆破速度较慢，那么强烈建议根据字典大小调整大小：
               十万字典建议设置为5000，百万字典设置为50000
               参数valid可选值1，0，None，分别表示导出有效，无效，全部子域
               参数format可选格式有'txt', 'rst', 'csv', 'tsv', 'json', 'yaml', 'html',
                                 'jira', 'xls', 'xlsx', 'dbf', 'latex', 'ods'
               参数path为None会根据format参数和域名名称在项目结果目录生成相应文件
       ARGUMENTS
           TARGET
               单个域名或者每行一个域名的文件路径
       FLAGS
           --process=PROCESS
               爆破的进程数(默认CPU核心数)
           --coroutine=COROUTINE
               每个爆破进程下的协程数(默认64)
           --wordlist=WORDLIST
               指定爆破所使用的字典路径(默认使用config.py配置)
           --segment=SEGMENT
               爆破任务分割(默认500)
           --recursive=RECURSIVE
               是否使用递归爆破(默认False)
           --depth=DEPTH
               递归爆破的深度(默认2)
           --namelist=NAMELIST
               指定递归爆破所使用的字典路径(默认使用config.py配置)
           --fuzz=FUZZ
               是否使用fuzz模式进行爆破(默认False，开启须指定fuzz正则规则)
           --rule=RULE
               fuzz模式使用的正则规则(默认使用config.py配置)
           --export=EXPORT
               是否导出爆破结果(默认True)
           --valid=VALID
               导出子域的有效性(默认None)
           --format=FORMAT
               导出格式(默认xlsx)
           --path=PATH
               导出路径(默认None)
           --show=SHOW
               终端显示导出数据(默认False)
3.其他模块使用请参考[使用帮助](https://github.com/shmilylty/OneForAll/tree/master/docs/using_help.md)
## 主要框架
  * [aiodns](https://github.com/saghul/aiodns) \- 简单DNS异步解析库。
  * [aiohttp](https://github.com/aio-libs/aiohttp) \- 异步http客户端/服务器框架
  * [aiomultiprocess](https://github.com/jreese/aiomultiprocess) \- 将Python代码提升到更高的性能水平(multiprocessing和asyncio结合，实现异步多进程多协程)
  * [beautifulsoup4](https://pypi.org/project/beautifulsoup4/) \- 可以轻松从HTML或XML文件中提取数据的Python库
  * [fire](https://github.com/google/python-fire) \- Python Fire是一个纯粹根据任何Python对象自动生成命令行界面（CLI）的库
  * [loguru](https://github.com/Delgan/loguru) \- 旨在带来愉快的日志记录Python库
  * [records](https://github.com/kennethreitz/records) \- Records是一个非常简单但功能强大的库，用于对大多数关系数据库进行最原始SQL查询。
  * [requests](https://github.com/psf/requests) \- Requests 唯一的一个非转基因的 Python HTTP 库，人类可以安全享用。
  * [tqdm](https://github.com/tqdm/tqdm) \- 适用于Python和CLI的快速，可扩展的进度条库
感谢这些伟大优秀的Python库！
## 目录结构
    D:.
    |
    +---.github
    +---docs
    |       collection_modules.md 收集模块说明
    +---images
    \---oneforall
        |   aiobrute.py   异步多进程多协程子域爆破模块，可以单独运行
        |   collect.py    各个收集模块上层调用
        |   config.py     配置文件
        |   dbexport.py   数据库导出模块，可以单独运行
        |   domains.txt   要批量爆破的域名列表
        |   oneforall.py  OneForAll主入口，可以单独运行
        |   __init__.py
        |
        +---common 公共调用模块
        +---data   存放一些所需数据
        |       next_subdomains.txt     下一层子域字典
        |       public_suffix_list.dat  顶级域名后缀 
        |       srv_names.json          常见SRV记录前缀名
        |       subdomains.txt          子域爆破常见字典
        |
        \---modules 
            +---certificates     利用证书透明度收集子域模块
            +---check            常规检查收集子域模块
            +---crawl            利用网上爬虫档案收集子域模块
            +---datasets         利用DNS数据集收集子域模块
            +---dnsquery         利用DNS查询收集子域模块
            +---intelligence     利用威胁情报平台数据收集子域模块
            \---search           利用搜索引擎发现子域模块
## 贡献
非常热烈欢迎各位大佬一起完善本项目！
## 后续计划
  * [ ] 各模块支持优化和完善
  * [ ] 子域监控（标记每次新发现的子域）
  * [ ] 子域收集爬虫实现（包括从JS等静态资源文件中收集子域）
  * [ ] 操作强大交互人性的前端界面实现（暂定：前端：Element + 后端：Flask）
更多详细信息请阅读[TODO.md](https://github.com/shmilylty/OneForAll/tree/master/TODO.md)。
## 版本控制
该项目使用[SemVer](https://semver.org/)语言化版本格式进行版本管理，你可以在[Releases](https://github.com/shmilylty/OneForAll/releases)查看可用版本。
## 贡献者
  * **[Jing Ling](https://github.com/shmilylty)**
    * 核心开发
  * **[Black Star](https://github.com/blackstar24)** ， **[Echocipher](https://github.com/Echocipher)**
    * 模块贡献
  * **[iceMatcha](https://github.com/iceMatcha)** ， **[mikuKeeper](https://github.com/mikuKeeper)**
    * 工具测试
  * **Anyone**
    * 工具反馈
你可以在[CONTRIBUTORS.md](https://github.com/shmilylty/OneForAll/tree/master/CONTRIBUTORS.md)中参看所有参与该项目的开发者。
## 版权
该项目签署了GPL-3.0授权许可，详情请参阅[LICENSE](https://github.com/shmilylty/OneForAll/LICENSE)。
## 鸣谢
感谢网上开源的各个子域收集项目！
感谢[A-Team](https://github.com/QAX-A-Team)大哥们热情无私的问题解答！
## 免责声明
本工具仅限于合法授权的企业安全建设，在使用本工具过程中，您应确保自己所有行为符合当地的法律法规，并且已经取得了足够的授权。
如您在使用本工具的过程中存在任何非法行为，您需自行承担所有后果，本工具所有作者和所有贡献者不承担任何法律及连带责任。
除非您已充分阅读、完全理解并接受本协议所有条款，否则，请您不要安装并使用本工具。
您的使用行为或者您以其他任何明示或者默示方式表示接受本协议的，即视为您已阅读并同意本协议的约束。
* * *