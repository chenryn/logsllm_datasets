title:An Exploratory Analysis of Microcode as a Building Block for System
Defenses
author:Benjamin Kollenda and
Philipp Koppe and
Marc Fyrbiak and
Christian Kison and
Christof Paar and
Thorsten Holz
An Exploratory Analysis of Microcode
as a Building Block for System Defenses
Benjamin Kollenda, Philipp Koppe, Marc Fyrbiak
Christian Kison, Christof Paar, Thorsten Holz
Ruhr-Universität Bochum
PI:EMAIL
ABSTRACT
Microcode is an abstraction layer used by modern x86 processors
that interprets user-visible CISC instructions to hardware-internal
RISC instructions. The capability to update x86 microcode enables a
vendor to modify CPU behavior in-field, and thus patch erroneous
microarchitectural processes or even implement new features. Most
prominently, the recent Spectre and Meltdown vulnerabilities
were mitigated by Intel via microcode updates. Unfortunately, mi-
crocode is proprietary and closed source, and there is little publicly
available information on its inner workings.
In this paper, we present new reverse engineering results that
extend and complement the public knowledge of proprietary mi-
crocode. Based on these novel insights, we show how modern
system defenses and tools can be realized in microcode on a com-
mercial, off-the-shelf AMD x86 CPU. We demonstrate how well-
established system security defenses such as timing attack miti-
gations, hardware-assisted address sanitization, and instruction
set randomization can be realized in microcode. We also present a
proof-of-concept implementation of a microcode-assisted instru-
mentation framework. Finally, we show how a secure microcode
update mechanism and enclave functionality can be implemented
in microcode to realize a small trusted execution environment. All
microcode programs and the whole infrastructure needed to repro-
duce and extend our results are publicly available.
CCS CONCEPTS
• Security and privacy → Systems security; Software and appli-
cation security;
KEYWORDS
security, microcode, defense
ACM Reference Format:
Benjamin Kollenda, Philipp Koppe, Marc Fyrbiak, Christian Kison, Christof
Paar, Thorsten Holz. 2018. An Exploratory Analysis of Microcode, as a Build-
ing Block for System Defenses. In 2018 ACM SIGSAC Conference on Com-
puter and Communications Security (CCS ’18), October 15–19, 2018, Toronto,
ON, Canada. ACM, New York, NY, USA, 18 pages. https://doi.org/10.1145/
3243734.3243861
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
© 2018 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-5693-0/18/10...$15.00
https://doi.org/10.1145/3243734.3243861
1 INTRODUCTION
New vulnerabilities, design flaws, and attack techniques with devas-
tating consequences for the security and safety of computer systems
are announced on a regular basis [20]. The underlying faults range
from critical memory safety violations [22] or input validation [21]
in software to race conditions or side-channel attacks in the under-
lying hardware [3, 27, 37, 39, 40, 45, 53]. To cope with erroneous
behavior and to reduce the attack surface, various defenses have
been developed and integrated in software and hardware over the
last decades [75, 78].
Generally speaking, defenses implemented in software can be cat-
egorized in either compiler-assisted defenses [5, 9, 19, 54, 60, 65, 70]
or binary defenses [1, 25, 32, 64, 80]. Note that operating sys-
tem changes [5, 8, 19, 65] represent an orthogonal approach to
serve both compiler-assisted and binary defenses. While compiler-
assisted defenses require access to the source code and re-com-
pilation of the software, binary defenses based on static binary
rewriting [51, 67, 79] or dynamic instrumentation [12, 28, 55, 58] can
also be leveraged for legacy and Commercial Off-The-Shelf (COTS)
programs. However, these binary defense strategies have two funda-
mental drawbacks: on the one hand, binary rewriting relies on the
ability to accurately discover and disassemble all executable code in
a given binary executable [6]. Any misclassified code or data yields
incomplete soundness and thus cannot provide specific security
guarantees, causes program termination, or incorrect computations.
On the other hand, dynamic instrumentation executes unmodified
binaries and inserts instrumentation logic with methods such as
emulation or hooking during runtime. While this approach does not
require the availability of a perfect disassembly, it typically causes
significant performance overheads and thus can be prohibitively
expensive in practice.
Over the past decades, various defense mechanisms have been im-
plemented in hardware to increase both security and performance.
For example, dedicated security features to mitigate exploitation
of memory-corruption vulnerabilities include Data Execution Pre-
vention [5], Execute-Only Memory (XoM) [8, 19, 43], Control Flow
Integrity (CFI) [1, 17] and Shadow Stacks [17, 23]. Moreover, so-
phisticated trusted computing security features were integrated in
Central Processing Units (CPUs) [4, 18].
But not only novel defense mechanisms have been integrated in
hardware: Similarly to any complex software system, erratic behav-
ior exist in virtually any commercially-available CPU [3, 40]. To this
end, x86 CPU vendors integrated in-field update features (e.g., to
turn off defective parts or patch erroneous behavior). More precisely,
the microcode unit, which translates between user-visible Complex
Instruction Set Computer (CISC) Instruction Set Architecture (ISA)
and hardware-internal Reduced Instruction Set Computer (RISC)
ISA, can be updated by means of so-called microcode updates [49, 56].
Since microcode is proprietary and closed source, and more and
more complex security features are integrated into hardware with
the help of microcode (e.g., Intel SGX [18]), there is only a limited
understanding of its inner workings and thus we need to trust the
CPU vendors that the security mechanisms are implemented cor-
rectly. In particular, the CPU’s trustworthiness is challenged since
even recently published microcode updates have been shown to
cause incorrect behavior [42] and several attacks on hardware se-
curity features have been demonstrated recently [13, 37, 45, 52, 53].
Moreover, since older CPU generations are not updated to defend
against sophisticated attacks such as Spectre or Meltdown [41],
these CPUs are unprotected against the aforementioned attacks
which find more and more adoption into real-world attacks [31].
Goals and Contributions. In this work, we focus on construc-
tive applications of x86 processor microcode for the modern system
security landscape. Our goal is to shed light on how currently em-
ployed defenses may be realized using microcode and thus tackle
shortcomings of the opaque nature of x86 CPUs. Building upon
our recent work on microcode [49], we first present novel reverse
engineering strategies which ultimately provide fine-grained under-
standing of x86 microcode for a COTS AMD K8 CPU. On this basis,
we demonstrate multiple constructive applications implemented
in microcode which considerably reduce the attack surface and
simultaneously reduce performance overheads of software-only so-
lutions. Finally, we discuss benefits and challenges for customizable
microcode for future systems and applications.
In summary, our main contributions are:
• Uncovering New x86 Microcode Details. We present new
reverse engineering results that extend and complement the
publicly available knowledge of AMD K8 CPU microcode
technology, specifically its microcode Read-Only Memory
(ROM). To this end, we develop a novel reverse engineer-
ing strategy that combines chip-level reverse engineering
and image processing with a custom microcode emulator
in order to recover and validate microcode semantics in a
semi-automatic fashion. In particular, this reverse engineer-
ing step enables us to better understand the hitherto opaque
microcode by analysis of its ROM and microcode updates.
• Perspectives of Customizable Microcode. We analyze
the capabilities of microcode and its updates to identify build-
ing blocks that can be used to strengthen, extend, or sup-
plement system security defenses. This includes microcode-
based methods to enable or disable CPU features at runtime,
a method to intercept low-level CPU processes, an isolated
execution environment within the microcode engine, and the
possibility to extend and modify the x86 ISA. With regards
to the trustworthiness of systems, we discuss a method to de-
tect the presence of microcode backdoors and the challenges
associated with such a detection.
• Implementation of Microcode-Assisted Defenses. We
show how modern system defenses and tools can be imple-
mented with microcode on a COTS AMD x86 CPU using the
identified primitives. To this end, we implemented several
case studies to demonstrate that timing attack mitigation,
hardware-assisted address sanitization, and instruction set
randomization can be realized in microcode. In addition, we
realize a microcode-assisted hooking framework that allows
fast filtering directly in microcode. Finally, we show how a se-
cure microcode update mechanism and enclave functionality
can be implemented in microcode. The framework used for
the deconstruction and manipulation of microcode, including
the assembler and disassembler, as well as our created mi-
crocode programs and the microcode emulator are publicly
available at https://github.com/RUB-SysSec/Microcode [57].
2 BACKGROUND AND RELATED WORK
In the following, we first present the technical background infor-
mation needed to understand the microcode details presented in
this paper. Note that the background for the individual defenses is
covered in their respective subsections in Section 5. In addition, we
review prior work that demonstrated the capabilities of microcode
and discuss how our contributions presented in this paper relate to
existing work.
2.1 Microcode Background
The ISA of a processor defines the available instructions and serves
as an interface between software and hardware [74]. We refer to
the actual hardware implementation of an ISA as microarchitecture.
The Instruction Decode Unit (IDU) generates control words based
on the currently decoded instruction and is a crucial component of
the microarchitecture especially for CISC processors with complex
instructions. The IDU of modern x86 processors is implemented as
a hybrid of a hardwired decode unit, which consists of sequential
logic, and a microcoded decode unit, which replays precomputed
control words named microinstructions. They are stored in a ded-
icated, on-chip microcode ROM. The microcode is organized in
so-called triads containing three microinstructions and a sequence
word, which denotes the next triad to execute. In the microcode
address space, triads can only be addressed as a whole, i.e., indi-
vidual bytes are not accessible. There are multiple categories of
microinstructions like arithmetic, logic, memory load/store, and
special microinstructions.
The microcode of modern x86 processors can be updated at
runtime in order to fix errata and add new features without the
need to resort to product recalls [49, 56]. These updates are usually
applied early during boot by the BIOS/EFI or operating system.
The process is initiated by loading the microcode update file to
main memory and writing the virtual address to a Model-specific
register (MSR). The CPU then copies the microinstructions of the
update to the dedicated on-chip microcode Random Access Memory
(RAM). The update engine also sets the match registers according
to the values given in the update file. The match registers contain
microcode ROM addresses and act as breakpoints. They redirect
control to the triads of the update stored inside the on-chip RAM
once a breakpoint in microcode ROM is hit. Complex or rarely
used x86 instructions are implemented with microcode and have
a predefined entry point in microcode ROM. Hence, microcoded
x86 instructions can be intercepted by placing a breakpoint at the
corresponding entry point. The triads in the microcode update
define the new logic of the x86 instruction.
2.2 Related Work
Microcode and Microcode Updates. Previous work [7, 11, 14]
already provided indicators that the microcode update functionality
of several CPUs families is not sufficiently protected and might al-
low for custom updates to be applied. Koppe et al. [49] then reverse
engineered both the update mechanism of AMD K8 and K10 CPUs
as well as the encoding of microcode to a point that allowed the
creation of custom microcode updates. These updates implemented
simple microcode applications such as basic instrumentation and
backdoors, which were applicable to unmodified CPU. Other work
highlighting the capabilities of microcode was presented by Tri-
ulzi [76, 77], but details of the implementation are not publicly
available.
In this paper, we substantially extend on these insights and per-
form further in-depth reverse engineering and analysis of the mi-
crocode ROM. By understanding the ROM mapping, we are able to
disassemble the microcode of arbitrary x86 instructions to enable
the implementation of sophisticated microprograms, as demon-
strated in later sections of this work.
Microcoded Shadow Stacks. Davi et al. [24] introduced an ap-
proach called Hardware-Assisted Flow Integrity eXtension (HAFIX)
and showed that it is possible to implement a so-called shadow
stack [23] using microcode (in cooperation with researchers from
Intel). However, HAFIX relied both on a compile-time component
to add additional instructions to the binary, and is only available
on development CPUs, not on standard consumer hardware. Intel
also announced the introduction of shadow stacks into end user
CPUs with the addition of Control-Flow Enforcement Technol-
ogy (CET) [17]. This technology tracks all calls and returns which
allows checking whether the normal stack and the shadow stack
point to the same return address. If a difference is encountered,
an exception is raised. Additionally, the memory pages containing
the shadow stacks are protected using special page table attributes.
Once CPUs with this technology will reach the market, shadow
stacks will be available in production code with (almost) no addi-
tional performance overhead.
In this paper, we present several designs and proof-of-concept
implementations of microcode-assisted systems defenses beyond
shadow stacks. In addition, our paper and the supplementary mate-
rial [57] will enable other researchers to build similar microcode-
based system defenses and explore this area further.
3 MICROCODE REVERSE ENGINEERING
A key contribution of our work presented in this paper is to fur-
ther analyze the ROM readouts provided by Koppe et al. [49] to
gather more details on the implementation of both microcode itself
and—more importantly—on the microcoded instructions. While the
authors were able to identify operations and triads in the readout,
they were unable to reconstruct how they map to logical addresses.
Therefore, they could not locate and analyze the microcode that
implements a specific x86 instruction. However, these steps are cru-
cial in the hooking of more advanced x86 instructions that require
knowledge of the underlying implementation in the microcode
ROM. The analysis of existing microcode implementations was
essential for the case studies presented in Section 5.
Figure 1: High-level overview of the individual steps of the
ROM reverse engineering process.
The key requirement for such an analysis is the ability to lo-
cate the corresponding implementation in the microcode ROM. We
therefore require a mapping of observable addresses to the phys-
ical location in the ROM readout. Going forward, we define two
different classes of addresses:
• logical addresses are used when the microcode software refers
to a specific triad (e. g., in the match registers or jumps)
• physical addresses are the addresses assigned to triads in the
ROM readouts during analysis.
These addresses are not related to the virtual and physical addresses
used when addressing the main memory—what is commonly known
as the virtual memory layout of processes. Also note that the address
granularity for microcode is one triad, the individual operations
forming a triad are not addressable.
Thus, it is our goal to reverse engineer the algorithm used to
map a given logical address to its corresponding physical address.
The high level overview of this process is illustrated in Figure 1. We
used the following steps to recover the ordered microcode ROM:
• 1⃝ Convert Scanning Electron Microscope (SEM) images of
each region to bitstrings with the aid of image recognition
software.
• 2⃝ Reorder and combine the resulting bitstrings into a list of
unordered triads.
operation out of each of the three regions R1 to R3 and loading