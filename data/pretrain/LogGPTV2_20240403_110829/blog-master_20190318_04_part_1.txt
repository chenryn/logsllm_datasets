## PostgreSQL 并行计算解说 之29 - parallel 递归查询, 树状查询, 异构查询, CTE, recursive CTE, connect by    
### 作者          
digoal          
### 日期          
2019-03-18          
### 标签          
PostgreSQL , cpu 并行 , smp 并行 , 并行计算 , gpu 并行 , 并行过程支持          
----          
## 背景          
PostgreSQL 11 优化器已经支持了非常多场合的并行。简单估计，已支持27余种场景的并行计算。          
```          
parallel seq scan          
parallel index scan          
parallel index only scan          
parallel bitmap scan          
parallel filter          
parallel hash agg          
parallel group agg          
parallel cte      
parallel 递归查询, 树状查询, 异构查询, CTE, recursive CTE, connect by    
parallel subquery          
parallel create table          
parallel create index         
parallel CREATE INDEX CONCURRENTLY - 不堵塞读写      
parallel select into          
parallel CREATE MATERIALIZED VIEW          
parallel 排序 : gather merge          
parallel nestloop join          
parallel hash join          
parallel merge join          
parallel 自定义并行聚合          
parallel 自定义并行UDF          
parallel append          
parallel append merge          
parallel union all          
parallel fdw table scan          
parallel partition join          
parallel partition agg          
parallel gather          
parallel gather merge          
parallel rc 并行          
parallel rr 并行          
parallel GPU 并行          
parallel unlogged table          
lead parallel          
```          
接下来进行一一介绍。          
关键知识请先自行了解：          
1、优化器自动并行度算法 CBO          
[《PostgreSQL 9.6 并行计算 优化器算法浅析》](../201608/20160816_02.md)          
[《PostgreSQL 11 并行计算算法，参数，强制并行度设置》](../201812/20181218_01.md)          
## parallel 递归查询, 树状查询, 异构查询, CTE, recursive CTE, connect by    
支持并行递归查询          
数据量：异构数据1亿，日志数据10亿          
场景 | 数据量 | 关闭并行 | 开启并行 | 并行度 | 开启并行性能提升倍数          
---|---|---|---|---|---          
parallel 递归查询, 树状查询, 异构查询, CTE, recursive CTE, connect by | 异构数据1亿，日志数据10亿 | 5.14 秒 | 0.29 秒 | 24 | 17.7 倍          
测试用例  
[《PostgreSQL 递归应用实践 - 非“传销”的高并发实时藤、树状佣金分配体系》](../201808/20180808_02.md)    
统计树中每个ID在日志表中的聚合。  
1、树状表结构设计      
```      
create unlogged table tbl (      
  uid int8 primary key,  -- 用户ID      
  pid int8               -- 直接上游ID,如果一个用户是ROOT用户，则PID为 null     
);      
create index idx_tbl_1 on tbl (pid);      
```      
2、创建一个函数，按规则返回它的上游      
```      
create or replace function gen_pid(int8) returns int8 as $$      
  -- 生成它的上游ID，200万以内的ID为根ID。其他都取比它小200万对应的那个ID，形成一颗50级的树。      
  select case when $1  Recursive Union  (cost=0.57..286.31 rows=101 width=16)  
           ->  Index Scan using idx_tbl_1 on tbl  (cost=0.57..2.79 rows=1 width=16)  
                 Index Cond: (pid = 1)  
           ->  Nested Loop  (cost=0.57..28.15 rows=10 width=16)  
                 ->  WorkTable Scan on tmp tmp_1  (cost=0.00..0.20 rows=10 width=8)  
                 ->  Index Scan using idx_tbl_1 on tbl tbl_1  (cost=0.57..2.79 rows=1 width=16)  
                       Index Cond: (pid = tmp_1.uid)  
                       Filter: (tbl_1.* IS NOT NULL)  
   CTE b  
     ->  GroupAggregate  (cost=2.59..15565737.54 rows=11 width=12)  
           Group Key: log.uid  
           InitPlan 2 (returns $3)  
             ->  CTE Scan on tmp tmp_2  (cost=0.00..2.02 rows=101 width=8)  
           ->  Index Only Scan using idx_log_1 on log  (cost=0.57..12493451.46 rows=614456789 width=4)  
                 Index Cond: (uid = ANY ($3))  
   ->  CTE Scan on tmp  (cost=0.00..2.02 rows=101 width=16)  
   ->  Hash  (cost=0.22..0.22 rows=11 width=12)  
         ->  CTE Scan on b  (cost=0.00..0.22 rows=11 width=12)  
(21 rows)  
Time: 0.803 ms  
postgres=# with recursive tmp as (          
select uid,pid from tbl where pid =1   
  union all  
select tbl.uid,tbl.pid from tbl join tmp on (tmp.uid=tbl.pid) where tbl.* is not null  
) ,   
b as   
(select uid, count(*) cnt from log where uid = any   
(array(  
  select pid from tmp  
))   
group by uid)   
select tmp.*, case when b.cnt is not null then b.cnt else 0 end as cnt from tmp left join b on (tmp.pid=b.uid);  
   uid    |   pid    |   cnt      
----------+----------+----------  
  2000001 |        1 | 50004739  
  4000001 |  2000001 |        0  
  6000001 |  4000001 |        0  
  8000001 |  6000001 |        0  
 10000001 |  8000001 |        0  
 12000001 | 10000001 |        0  
 14000001 | 12000001 |        0  
 16000001 | 14000001 |        0  
 18000001 | 16000001 |        0  
 20000001 | 18000001 |        0  
 22000001 | 20000001 |        0  
 24000001 | 22000001 |        0  
 26000001 | 24000001 |        0  
 28000001 | 26000001 |        0  
 30000001 | 28000001 |        0  
 32000001 | 30000001 |        0  
 34000001 | 32000001 |        0  
 36000001 | 34000001 |        0  
 38000001 | 36000001 |        0  
 40000001 | 38000001 |        0  
 42000001 | 40000001 |        0  
 44000001 | 42000001 |        0  
 46000001 | 44000001 |        0  
 48000001 | 46000001 |        0  
 50000001 | 48000001 |        0  
 52000001 | 50000001 |        0  
 54000001 | 52000001 |        0  
 56000001 | 54000001 |        0  
 58000001 | 56000001 |        0  
 60000001 | 58000001 |        0  
 62000001 | 60000001 |        0  
 64000001 | 62000001 |        0  
 66000001 | 64000001 |        0  
 68000001 | 66000001 |        0  
 70000001 | 68000001 |        0  
 72000001 | 70000001 |        0  
 74000001 | 72000001 |        0  
 76000001 | 74000001 |        0  
 78000001 | 76000001 |        0  
 80000001 | 78000001 |        0  
 82000001 | 80000001 |        0  
 84000001 | 82000001 |        0  
 86000001 | 84000001 |        0  
 88000001 | 86000001 |        0  
 90000001 | 88000001 |        0  
 92000001 | 90000001 |        0  
 94000001 | 92000001 |        0  
 96000001 | 94000001 |        0  
 98000001 | 96000001 |        0  
(49 rows)  
Time: 5142.932 ms (00:05.143)  
```          
### 2、开启并行，耗时： 0.29 秒。          
```        
postgres=# explain with recursive tmp as (  
select uid,pid from tbl where pid =1   
  union all  
select tbl.uid,tbl.pid from tbl join tmp on (tmp.uid=tbl.pid) where tbl.* is not null  