额外资源
本中加人了换行，但是其实没有必要这么做。
息，或许一个更准确的名字应该叫做writeiter()。在前面的示例中，我们在写入的文
“\n”。还有一点需要注意的是使用writelines()并非仅能向文件中写入基于行的信
值得注意的是writelines()无法写人一个新行（\n），你需要在写入的序列中使用
In [2]: f = open("foo.txt", “r")
In [1]: import sys
In [5]: g = open("writelines_generator_function_outfile", "r")
‘0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n'
www.TopSage.com
文本”113
---
## Page 128
import sys
#!/usr/bin/env python
脚本从sys.stdin()读取数据，然后打印输出带有行号的每一行。参见例3-22。
stdin.read()被永远禁止。为了展示sys.stdin如何工作的，我们创建了一个脚本，该
在Python（或IPython）提示符下使用sys.stdin是亳无意义的。加载sys或执行sys.
stdin.seek()和sys.stdin.tell()是可用的，但是当你调用时，他们会抛出一个异常
同的类型并且使用相同的方法，但类文件对象的一些方法却有不同的行为。例如，sys。
Python解释器将它们视为相同的类型，因此它们使用相同的方法。虽然技术上他们是相
脚本处理所有输入的行，即使其是空行。当然空行也不是彻底为空，因为包括换行符
环，从标准输入设备读人行。对于每一行，打印行号和行数。在程序循环执行时，该
在这个示例中，我们创建变量counter来对行数进行追踪记录。脚本中有一个while循
while True:
counter =
例3-22：枚举sys.stdin.readline
进行使用。
（IOError）。这里主要强调的是对于类文件对象，你可以像使用基于磁盘的文件一样
114”第3章
下面是who与之前的脚本通过管道连接后输出的结果：
“\n”。当脚本执行到文件结尾时从循环中跳出。
In [5]: type(sys.stdin) == type(f)
5: jmjones ttyp4 Jul 13 06:48
4: jmjones ttyp3 Jul 11 11:51
3: jmjones ttyp2 Jul 10 05:10
2: jmjones ttyp1 Jul 9 19:58
1: jmjones console Jul 9 11:01
counter+=1
print
break
"%s: %s" % (counter,line)
www.TopSage.com
X
DG
---
## Page 129
同的方法进行处理，就像sys.stdin可以被当作可读文件进行处理一样。
要了解sys.stdout类型，首先要弄明的一件重要事情是，它可以采用与处理可写文件相
当的。
作为一个相关的方面，既然可读文件与可写文件共享相同的类型，最后一点也是理所应
个可写的文件对象。sys.stdin与可读文件对象具有相同的类型，sys.stdout与可写文
stdout属性，可以使用标准输出。sys.stdin是一个可读的文件对象，sys.stdout是一
#!/usr/bin/env python
件对象具有相同的类型。
在加载sys模块并且使用stdin属性时，可以使用标准输人。通过加载sys模块并引用
import sys
例3-23：sys.stdin readline 示例
有趣的是，可以通过使用enumerate函数将先前的示例写得非常简单短小。参见例3-23。
Out[5]:True
In [5]: type(readable_file) == type(writable_file)
Out[3]: 
In [2]: writable_file = open('foo_writable.txt', 'w')
In [1]: readable_file = open('foo.txt','r')
Out[4]:
In [3]: readable_file
Out[5]: True
In [5]: type(sys.stdout) == type(f)
Out[4]: 
In [2]: f = open('foo.txt', 'w')
In [1]: import sys
7: jmjones ttyp6 Jul 15 04:38
6: jmjones ttyp5 Jul 11 21:49
www.TopSage.com
t
文本丨115
PDG
---
## Page 130
遇到这种情况你会不会有些不知所措？针对这个问题一个简单容易的解决方案是加载
如果写了一个可以处理文件对象的函数，但需要处理的数据是文本字符串而不是文件，
Stringl0
唯一方法时，但这绝不意味着这是仅有的可以使用的file方法。
我们能够通过StringI0对象调用readline()方法。这里，虽然readline()是我们调用的
string。\nnreadline()should see \nmultiple lines of\ninput” 传递到构造器。
StringI0:
116
In [2]: file like_string = StringIo("This is a\nmultiline string.\n
In [1]: from StringI0 import StringI0
In [8]: dir(file_like_string)
Out[6]:‘multiple linesof\n'
In [5]: file_like_string.readline()
Out[4]:‘multiline string.\n'
In [4]: file_like_string.readline()
readline() should see\nmultiple lines of\ninput")
'len'
'isatty',
'getvalue',
'flush'
'buflist',
fng
Out[8]:
tell',
'softspace',
read'
pos',
seek',
readlines
doc_
第3章
www.TopSage.com
---
## Page 131
面是一个简单的示例：
如果想从一个web服务器读取文件，urllib.urlopen（)提供了一个简单的解决方法。下
帮助。
该代码需要一个文件对象？内建的文件类型不知道互联网，但是urllib模块可以提供
如果你有兴趣读入的文件碰巧是在互联网上该怎么办？或者是你希望复用一段代码，而
正如你所看到的，如果需要将一个字符串作为文件来处理，StringIO会很有帮助。
urllib
的转换。下面是file的方法和属性与StringI0对象的方法与属性的对比。
需要明确的是，虽然两者之间存在差异，但接口允许在文件与字符串之间进行一个简单
Out[7]: 'nt... for information on suggesting changes.^
In [7]: urllib_docs[-80:]
Out[6]:
In [6]: urllib_docs[:80]
In [5]: len(urllib_docs)
In [4]: url_file.close()
In [3]: urllib_docs = url_file.read()
In [2]: url_file = urllib.urlopen("http://docs.python.org/lib/module-urllib.html")
In [1]: import urllib
In [9]: f = open("foo.txt", "r")
n\n\n\n'
n\n\n[list of bytes sent]
sys.exit(1)
print "You must specify a valid file to parse"
print
print
report _dict.setdefault(line_dict['remote_host'], []).append(bytes_sent)
line_dict = dictify_logline(line)
try:
continue
##totally disregard anything we don't understand
bytes_sent = int(line_dict['bytes_sent'])
'bytes_sent': split_line[9],
main_
_main_部分仅执行了少量处理。首先，对命令行参数进行最少检
www.TopSage.com
文本丨119
---
## Page 134
dictify_logline()简单地以空格分割较长的行，从结果列表中提取某些项，并返回一个
行。之后，利用dictfy_logline()返回的数据升级报告字典。最后，将报告字典返回到
class TestApachelogParser(unittest.TestCase):
import apache_log_parser_split 
import unittest
#!/usr/bin/env python
例3-25：Apache日志文件的单元测试-
那么，它起作用了么？基本上起到了作用。请查看单元测试例3-25。
由分割行数据组成的字典。
导致单员测试的失败。下面是一个测试的结果示例：
代码对于复合及通用的日志格式都是可以处理的，但是对于请求字段的略微修改则可能
120
def setUp(self):
unittest.main()
def testMalformed(self):
def testExtrawhitespace(self):
def testCommonExample(self):
def testCombinedExample(self):
pass
# test for extra whitespace between fields 
common_log_entry =
# test the common example from apache.org
"Mozilla/4.08[en](Win98;I;Nav)"
第3章
{'remote_host':
main_':
'127.0.0.1'
'127.0.0.1
127.0.0.1
www.TopSage.com
frank
frank [10/0ct/2000:13:55:36 -0700]'\
frank
'status':'200'
一以空格字符分隔
[10/0ct/2000:13:55:36 -0700] '\
[10/0ct/2000:13:55:36 -0700] '\
（[10/0ct/2000:13:55:36-0700]'\
'200',
PDG
---
## Page 135
def dictify_logline(line):
  ( a.. = 1
import re
import sys
This script takes one command line argument: the name of a log file
apache_log_parser_regex.py some_log_file
USAGE:
例3-26：Apache日志文件解析
空格为分隔符的字段。例3-26是使用正则表达式的相同示例。
根据日志格式的说明，提取远端主机名和字节数是相当安全的。这些字节数就是基于以
因为数据域中的冒号可以转化为空格，日志文件中的所有域都被向右侧移动一位。严格
att Sot paurqoo auoede ue jo sasatd zuutirad aut fo Kreuotioip e urniar..
FAILED (failures=1)
Ran 4tests in 0.001s
AssertionError:{'status':
jmjones@dinkgutsy:code$ python test_apache_log_parser_split.py
'remote_host':
remote_host':
File
..F
'127.0.0.1'}
= = =
\s+#whitespace
[[[]]+]#time
S+
S+
S+
'space.html'