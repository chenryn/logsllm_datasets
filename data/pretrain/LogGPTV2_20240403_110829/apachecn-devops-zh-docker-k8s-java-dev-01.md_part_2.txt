```
docker rm $(docker ps -a -q -f status=exited)
```
我们已经说过，Docker 映像总是只读且不可变的。如果它没有改变映像的可能性，它就不会很有用。那么，除了修改 Dockerfile 并进行重建之外，映像修改怎么可能呢？当容器启动时，层栈顶部的可写层供我们处置。我们实际上可以对正在运行的容器进行更改；这可以是添加或修改文件，与安装软件包、配置操作系统等相同。如果在运行的容器中修改文件，该文件将从底层(父)只读层中取出，并放在顶层可写层中。我们的改变只可能发生在顶层。然后，联合文件系统将覆盖底层文件。原始的基础文件不会被修改；它仍然安全地存在于底层的只读层中。通过发出`docker commit`命令，您可以从一个正在运行的容器中创建一个新的只读映像(并且它在可写层中的所有变化):
```
docker commit    
```
`docker commit`命令将您对容器所做的更改保存在可写层中。为了避免数据损坏或不一致，Docker 将暂停正在提交更改的容器。`docker commit`命令的结果是一个全新的只读映像，您可以通过它创建新的容器:
![](img/1775e35b-bed6-46b7-8e4c-aed8cb103197.jpg)
作为对成功提交的响应，Docker 将输出新生成的映像的完整 ID。如果您在没有首先发出`commit`的情况下移除容器，然后再次重新启动相同的映像，Docker 将启动一个新的容器，而不会对之前运行的容器进行任何更改。无论是哪种情况，无论有没有`commit`，您对文件系统的更改都不会影响基本映像。在调试和实验时，通过改变容器中最上面的可写层来创建映像是很有用的，但是使用 Dockerfile 以一种有文档记录和可维护的方式来管理映像通常更好。
我们现在已经了解了我们的容器化世界的构建(Dockerfile 和 image)和运行时(container)部分。我们仍然缺少最后一个元素，分发组件。Docker 的分发组件由 Docker 注册表、索引和存储库组成。现在让我们把注意力集中在他们身上，以便有一个完整的画面。
# Docker 注册表、存储库和索引
Docker 分发系统中的第一个组件是注册表。Docker 利用分层系统存储映像，如下图所示:
![](img/3c67b516-314f-4187-8ccd-7066c70a26e9.png)
你构建的映像可以存储在`remote`注册表中供他人使用。`Docker`注册表是一个存储你的 Docker 映像的服务(实际上是一个应用)。Docker Hub 是一个公开注册的例子；它是免费的，服务于大量不断增长的现有映像集合。另一方面，存储库是相关映像的集合(命名空间)，通常提供同一应用或服务的不同版本。它是不同 Docker 映像的集合，具有相同的名称和不同的标签。
如果你的应用被命名为`hello-world-java`，而你在注册表中的用户名(或名字空间)为`dockerJavaDeveloper`，那么你的映像将被放置在`dockerJavaDeveloper/hello-world-java`存储库中。您可以标记一个映像，并将具有不同标识的映像的多个版本存储在一个命名的存储库中，并使用特殊语法(如`username/image_name:tag`)访问映像的不同标记版本。`Docker`存储库与 Git 存储库非常相似。例如，`Git`，`Docker`存储库由 URI 标识，可以是公共的，也可以是私有的。URI 看起来和下面一样:
```
{registryAddress}/{namespace}/{repositoryName}:{tag}  
```
Docker Hub 是默认注册表，如果不指定注册表地址，Docker 将从 Docker Hub 中提取映像。要在注册表中搜索映像，执行`docker search`命令；例如:
```
$ docker search hello-java-world  
```
在不指定`remote`注册表的情况下，Docker 将在 Docker Hub 上进行搜索，并输出符合您的搜索标准的映像列表:
![](img/6460dde3-1d6e-422c-bb09-8415ec8b5de5.jpg)
注册表和存储库之间的区别在开始时可能会令人困惑，所以让我们描述一下如果您执行以下命令会发生什么:
```
$ docker pull ubuntu:16.04  
```
该命令从 Docker Hub 注册表下载`ubuntu`存储库中标记为`16.04`的映像。官方的`ubuntu`存储库不使用用户名，所以在这个例子中省略了名称空间部分。
尽管 Docker Hub 是公共的，但您可以通过 Docker Hub 用户帐户免费获得一个私有存储库。最后，但并非最不重要的是，您应该知道的组件是索引。索引管理搜索和标记，以及用户帐户和权限。事实上，注册表将身份验证委托给索引。在执行远程命令时，如`push`或`pull`，索引首先会查看映像的名称，然后检查它是否有相应的存储库。如果是，索引将验证您是否被允许访问或修改映像。如果是，操作将被批准，并且注册表将获取或发送映像。
让我们总结一下到目前为止所学的内容:
*   Dockerfile 是构建映像的方法。这是一个包含有序指令的文本文件。每个 Dockerfile 都有一个您构建的基础映像
*   映像是文件系统的特定状态:活动容器的只读、冻结的不可变快照
*   映像由表示文件系统在不同时间点的变化的层组成；层有点像 Git 存储库的提交历史。Docker 使用层缓存
*   容器是映像的运行时实例。它们可以运行或停止。您可以运行同一映像的多个容器
*   您可以对容器上的文件系统进行更改，并提交它们以使它们持久化。提交总是会创建一个新映像
*   只能提交文件系统更改，内存更改将丢失
*   一个注册中心保存一个命名存储库的集合，这些存储库本身就是由它们的标识跟踪的映像的集合。注册表与 Git 存储库相同:您可以`push`和`pull`映像
现在，您应该已经了解了映像及其图层和容器的本质。但是 Docker 不仅仅是一个 Dockerfile 处理器和运行时引擎。让我们看看还有什么可用的。
# 附加工具
它是一个完整的包，包含大量工具和 API，在开发人员和 DevOp 的日常工作中很有帮助。例如，有一个在 Windows 和 macOS X 上使用 Docker 的动态桌面开发环境
从 Java 开发人员的角度来看，有一些工具是可用的，它们在程序员的日常工作中特别有用，比如 IntelliJ IDEA Docker 集成插件(我们将在接下来的章节中大量使用这个插件)。Eclipse 爱好者可以使用 Eclipse 的 Docker 工具，该工具从 Eclipse Mars 开始提供。NetBeans 还支持 Docker 命令。无论您选择哪种开发环境，这些加载项都允许您下载和构建 Docker 映像、创建和启动容器，以及直接从您最喜欢的 IDE 执行其他相关任务。
Docker 现在如此受欢迎，难怪已经开发了数百个第三方工具来使 Docker 更加有用。其中最突出的是 Kubernetes，我们将在本书中重点介绍它。但是除了 Kubernetes 斯，还有很多其他的。他们将为您提供与 Docker 相关的操作支持，例如持续集成/持续交付、部署和基础架构，或者优化映像。现在有数十种托管服务支持运行和管理 Docker 容器。
随着 Docker 获得更多关注，几乎每个月都会弹出越来越多与 Docker 相关的工具。您可以在 GitHub awesome Docker 列表中找到一份精心制作的 Docker 相关工具和服务列表，该列表位于[h](https://github.com/veggiemonk/awesome-docker)[t](https://github.com/veggiemonk/awesome-docker)[t](https://github.com/veggiemonk/awesome-docker)T6【p】T7[s](https://github.com/veggiemonk/awesome-docker)T10】://g[I](https://github.com/veggiemonk/awesome-docker)[t](https://github.com/veggiemonk/awesome-docker)[h](https://github.com/veggiemonk/awesome-docker)[u](https://github.com/veggiemonk/awesome-docker)[b](https://github.com/veggiemonk/awesome-docker)[。](https://github.com/veggiemonk/awesome-docker)T24】cT26】oT28】mT30】vT32】eT34】gT36】gT38】IT40】eT42】mT44】oT46】nT48】kT50】aT52】wT55
但是不仅有可用的工具。此外，Docker 提供了一组非常方便的 API。其中之一是用于管理映像和容器的远程应用编程接口。使用这个应用编程接口，您将能够将您的映像分发到运行时 Docker 引擎。还有统计应用编程接口，它将公开容器的实时资源使用信息(如中央处理器、内存、网络输入/输出和块输入/输出)。这个应用编程接口端点可以用来创建显示容器行为的工具；例如，在生产系统上。
现在我们知道了 Docker 背后的思想、虚拟化和容器化之间的区别以及使用 Docker 的好处，让我们开始行动吧。我们将首先安装 Docker。
# 安装 Docker
在本节中，我们将了解如何在 Windows、macOS 和 Linux 操作系统上安装 Docker。接下来，我们将运行一个示例`hello-world`映像来验证设置，并检查安装过程后是否一切正常。
Docker 的安装非常简单，但是您需要关注一些事情来使它顺利运行。我们将指出它们，使安装过程无痛。你应该知道 Linux 是 Docker 的自然环境。如果您运行容器，它将在 Linux 内核上运行。如果你在 Linux 上运行的 Docker 上运行你的容器，它将使用你自己机器的内核。在 macOS 和 Windows 中并非如此；这就是为什么如果你想在这些操作系统上运行 Docker 容器，就需要虚拟化 Linux 内核的原因。Docker 引擎在 macOS 或 MS Windows 上运行时，将使用专门为运行 Docker 容器而制作的轻量级 Linux 发行版。它完全从内存中运行，只使用几兆字节，几秒钟就能启动。在 macOS 和 Windows 上安装主 Docker 包后，将默认使用 OS 内置的虚拟化引擎。因此，对您的机器有一些特殊要求。对于最新的本机 Docker 设置，它已深入集成到您的操作系统中的本机虚拟化引擎中，您将需要 64 位 Windows 10 专业版或企业版。对于 macOS，最新的 Docker for Mac 是从头开始开发的本机 Mac 应用，具有本机用户界面，集成了 OS X 本机虚拟化、虚拟机管理程序框架、网络和文件系统。强制性要求将是约塞米蒂 10.10.3 或更高版本。让我们从在 macOS 上安装开始。
# 在 macOS 上安装
要获得 Mac 的原生 Docker 版本，请前往[h](http://www.docker.com)[t](http://www.docker.com)[t](http://www.docker.com)[p](http://www.docker.com)[://w](http://www.docker.com)[w](http://www.docker.com)[w](http://www.docker.com)[。](http://www.docker.com)T17】dT19】oT21【cT23】kT25】eT27】rT29】。[c](http://www.docker.com)[o](http://www.docker.com)[m](http://www.docker.com)然后是 Get Docker macOS 部分。Docker 是一个标准的原生`dmg`包，你可以挂载。您会发现包中只有一个应用:
![](img/17207b44-778c-4156-87d9-b4e607c17d28.png)
现在只要把`Docker.app`移到你的`Applications`文件夹里，你就都准备好了。再简单不过了。如果你运行 Docker，它将作为一个小鲸鱼图标出现在你的 macOS 菜单中。图标将在 Docker 启动过程中显示动画，并在完成后保持稳定:
*   如果您现在单击该图标，它将为您提供一个带有 Docker 状态和一些附加选项的便捷菜单:
![](img/79569ef0-f0ba-4647-b618-1db7dc767642.png)
*   Mac 的 Docker 具有自动更新功能，这对于保持您的安装是很好的。第一个偏好...窗格为您提供了自动检查更新的可能性；默认情况下，它被标记为: