each session key, or the session key itself if it has both shares,
which totally require m log q space. Hence, the overall storage
overhead in each member is at most 3m log q, which is much less
than m(m + 2) log q in Scheme 2.
The broadcast message in session j consists of j revocation sets
{Ri}i=1,...,j and m + 1 polynomials. Since R1 ⊆ R2 ⊆, ..., ⊆
Rm and |Rm| ≤ t, we can use a one-dimensional array with j ele-
ments to indicate the number of revoked members in each session.
In other words, we can represent all {Ri}i=1,...,j by Rj and this
array. In addition, the member IDs can be picked from a small ﬁ-
nite ﬁeld. Therefore, we can ignore the communication overhead
for the broadcast of all those revocation sets here. Thus, the broad-
cast size in session j is ((m + j + 1)t + m + 1) log q, which is a
little smaller than that in Scheme 2. The reason is that the degree of
polynomials {Qj(x)}j=1,...,m is reduced from 2t to t. The largest
broadcast size (when j = m) is ((2m + 1)t + m + 1) log q.
As we discussed earlier, in Scheme 3, if a revoked group mem-
ber doesn’t receive a broadcast message before it is revoked, it may
recover the corresponding session key by receiving broadcast mes-
sages after it is revoked. This doesn’t introduce security problem,
since the revoked member is entitled to that information. However,
such a revoked member cannot do the same thing in Scheme 2 un-
less it gets the lost broadcast message, because different masking
polynomials are used in different sessions. This is the difference
between Scheme 2 and Scheme 3.
3.4 Trading Off Self-healing Capability for
Less Broadcast size
In our previous schemes, each key distribution message contains
redundant information for all the other m − 1 sessions. However,
in certain situations, having redundant information for all the ses-
sions may be unnecessary and consume too much bandwidth. For
example, when there are only short term communication failures,
which are never longer than a fraction of the m sessions, it is only
necessary to include redundant information to prepare for the max-
imum number of such sessions. As another example, when there
are relatively long term but infrequent communication failures, al-
ways preparing for such failures may generate more-than-necessary
overhead.
In this subsection, we study two possible ways to further reduce
the broadcast message size based on the above observation. Our
ﬁrst technique is targeted at possibly frequent but short term com-
munication failures. We assume that after a group member receives
a broadcast key distribution message, it takes no more than l − 1
sessions for it to receive another one, where l − 1 << m. The
basic approach is to introduce a “sliding window”1 so that only re-
dundant information for the sessions that fall into this window is
broadcasted. The key distribution message in each session includes
the recovery information on the current session key and shares of
the previous and the future l − 1 session keys. The valid member
can recover any lost key in the sessions between two successfully
received key distribution messages.
Obviously, with the “sliding window” technique, we cannot en-
sure the same self-healing property as in our previous schemes. In
the following, we extend the notion of self-healing to l-session self-
healing to clarify the capability of the new scheme.
DEFINITION 4. (l-session self-healing) Let t, i ∈ {1, ..., n} and
j, l ∈ {1, ..., m}. D is l-session self-healing if
1The term “sliding window” was also mentioned in [27]. However,
no speciﬁc technique has been presented there.
(a) for any session j, where max(j − l + 1, 1) ≤ j1 < j <
j2 ≤ min(j + l − 1, m), and any Ui who is a member in
sessions j1 and j2, Kj is determined by the set, {zi,j1 , zi,j2}
(i.e., H(Kj|zi,j1 , zi,j2 ) = 0), and
(b) for any session j, where 1 ≤ j1 < j < j2 ≤ m, and any
disjoint subsets B, C ⊂ {U1, ..., Un} where |B∪C| ≤ t, the
set {zi(cid:1),j}Ui(cid:1) ∈B,1≤j≤j1 ∪{zi(cid:1),j}Ui(cid:1) ∈C,m≥j≥j2 contains no
information on Kj (i.e.,
H(Kj|{zi(cid:1),j}Ui(cid:1) ∈B, 1≤j≤j1 ∪{zi(cid:1),j}Ui(cid:1) ∈C, m≥j≥j2 )
= H(Kj)).
Based on the above discussion, we develop the following scheme
to trade off self-healing capability with broadcast size.
SCHEME 4. Session key distribution with t-revocation capabil-
ity for short term communication failures. The setup and adding
group members steps are the same as Scheme 3.
• Broadcast: In the jth session key distribution, given the sets
of revoked member IDs for sessions in and before session
j, Ri = {r1, r2, ..., rwi}i=max(j−l+1,1),...,j, where |Ri| =
wi ≤ t for i = max(j − l + 1, 1), ..., j, the group manager
broadcasts the following message:
Bj = {Ri}i=max(j−l+1,1),...,j
∪{Pi(x) = gi(x)pi(x) + hi(x)}i=max(j−l+1,1),...,j
∪{Qi(x) = qi(x) + fi(x)}i=j,...,min(j+l−1,m)
where gi(x) = (x − r1)(x − r2)...(x − rwi ), max(j − l +
1, 1) ≤ i ≤ j.
• Session key and shares recovery: When a non-revoked group
member Uv receives the jth key distribution message, it ﬁrst
evaluates the polynomials {Pi(x)}i=max(j−l+1,1),...,j and
{Qi(x)}i=j,...,min(j+l−1,m) at point v, then recovers the
shares {pmax(j−l+1,1)(v), ..., pj(v)} as well as {qj (v), ...,
qmin(j+l−1,m)(v)}, and computes the current session key
Kj = pj(v) + qj (v). Finally, the member Uv stores the
items in {pmax(j−l+1,1)(v), ..., pj−1(v), Kj , qj+1(v), ...,
qmin(j+l−1,m)(v)} that it does not have.
THEOREM 6. Scheme 4 is an unconditionally secure, l-session
self-healing session key distribution scheme with m log q-bit pri-
vacy and t-revocation capability, t-wise forward and backward se-
crecy.
In Scheme 4, the size of personal secret in each member is at
most 2m log q. In addition, it needs additional (2l − 1) log q mem-
ory space to store the session key and shares. Therefore, the total
storage overhead is at most (2m + 2l − 1) log q. The broadcast
message consists of l 2t-degree polynomials and l t-degree polyno-
mials, which occupies l(3t + 2) log q in the communication band-
width.
Our second technique is aimed at situations where there are rel-
atively long term but infrequent communication failures. Specif-
ically, we assume that each group member can receive at least d
consecutive broadcast key distribution messages, and after a group
member receives a broadcast key distribution message, it takes no
more than (l − 1)d sessions for it to receive another one.
Intuitively, the second technique is to selectively include the same
amount of redundant information from a large “window” of ses-
sions (i.e., 2(l − 1)d + 1 instead of 2l − 1 sessions) in each key
distribution message. Speciﬁcally, the group manager picks one
from every d consecutive sessions in a particular window of ses-
sions and includes key shares for those selected sessions in the key
distribution message. In other words, the recovery information for
a particular session key is evenly distributed among a large number
of sessions. Given the window size 2(l − 1)d + 1, the key dis-
tribution message for session j will contain key shares for sessions
j−(l−1)d, j−(l−2)d, ..., j−d and j +d, j +2d, ..., j +(l−1)d.
Thus, any d consecutive session key distribution messages contain
shares of the previous and the future (l − 1)d sessions. A group
member may not ﬁnd the necessary information to recover a par-
ticular session key in one key distribution message; however, it is
guaranteed to ﬁnd one in the next d − 1 key distribution messages.
In general, this idea is to trade off the key recovery delay with the
number of recoverable sessions.
Scheme 4 can be viewed as a special case of this technique (when
d = 1). To clarify the self-healing capability of this new technique,
we generalize Deﬁnition 4 into the following notion of (l,d) self-
healing.
DEFINITION 5. ((l,d) self-healing) Let t, i ∈ {1, ..., n} and
j, l, d ∈ {1, ..., m}. D is (l,d) self-healing if
(a) for any session j, where max(j − (l − 1) · d, 1) ≤ j −
j1 · d < j < j + j2 · d ≤ min(j + (l − 1) · d, m), and
any Ui who is a member in sessions j − j1 · d and j + j2 ·
d, Kj is determined by the set, {zi,j−j1·d, zi,j+j2·d} (i.e.,
H(Kj|zi,j−j1·d, zi,j+j2·d) = 0), and
(b) for any session j, where 1 ≤ j1 < j < j2 ≤ m, and any
disjoint subsets B, C ⊂ {U1, ..., Un} where |B∪C| ≤ t, the
set {zi(cid:1),j}Ui(cid:1) ∈B,1≤j≤j1 ∪{zi(cid:1),j}Ui(cid:1) ∈C,m≥j≥j2 contains no
information on Kj (i.e.,
H(Kj|{zi(cid:1),j}Ui(cid:1)∈B, 1≤j≤j1 ∪{zi(cid:1),j}Ui(cid:1) ∈C, m≥j≥j2 )
= H(Kj)).
The scheme built on the above idea is a natural generalization of
Scheme 4.
SCHEME 5. Session key distribution with t-revocation capabil-
ity for long term but infrequent communication failures. The setup
and adding group members steps are the same as in Scheme 3.
j = {j − i · d}0≤i<min(j/d,l), and Gq
• Broadcast: Let Gp
j =
{j + i · d}0≤i<min((m−j)/d,l). In the jth session key dis-
tribution, given the sets of revoked member IDs for sessions
in and before session j, Ri = {r1, r2, ..., rwi}
, where
|Ri| = wi ≤ t for i ∈ Gp
j , the group manager broadcasts
the following message:
i∈G
p
j
Bj={Ri}
∪{Pi(x) = gi(x)pi(x) + hi(x)}
i∈G
∪{Qi(x) = qi(x) + fi(x)}
p
j
i∈G
q
j
i∈G
p
j
where gi(x) = (x − r1)(x − r2)...(x − rwi ), i ∈ Gp
j .
• Session key and shares recovery: When a non-revoked group
member Uv receives the jth session key distribution mes-
sage, it evaluates {Pi(x)}
and {Qi(x)}
i∈G
at point
v, recovers the shares {pi(v)}
i∈G
, and
then computes the current session key Kj = pj(v) + qj(v).
It ﬁnally stores the items in {pi(v)}
i∈G
that it does not have.
i∈G
and {qi(v)}
i∈G
and {qi(v)}
i∈G
p
j
p
j
p
j
q
j
q
j
q
j
From the broadcast step in Scheme 5, it is obvious that the com-
munication overhead of this generalized scheme is the same as
Scheme 4. Since the group member needs to buffer the key and
shares of 2(l− 1)d + 1 consecutive sessions, the total storage over-
head is (2m + 2(l − 1)d + 1) log q.
Generally, the above two extensions (Scheme 4 and Scheme 5)
allow small key distribution messages, which are independent of
the total number of sessions. The choice of window size depends
mainly on the network environment. Thus, it is possible to have
a large number of sessions and still have a reasonable broadcast
message size and self-healing capability. Nevertheless, the storage
overhead in each member still limits the total number of sessions.
A special case of these two scheme is to let m = t, and have
the group manager update session keys if and only if at least one
compromised member is detected. On the one hand, it is possible to
cover a long network lifetime. On the other hand, the compromised
member can be revoked immediately. This customization may be
suitable for the applications that cannot afford a large number of
sessions, but still want to cover a long period of time.
3.5 Comparison with Previous Self-Healing
Methods
In this subsection, we give a simple comparison between Scheme
3 and Constructions 3 and 4 presented in [27]. Since Schemes 4 and
5 are mainly about trade offs between self-healing capability and
broadcast message size, we do not include them here. Note that
the technique used in the long-lived construction (Construction 5)
in [27] is also applicable to our schemes. Thus, we do not consider
it here either.
Table 1 summarizes the comparison between these three self-
healing key distribution methods. We use C3 to denote Construc-
tion 3 in [27], which is the basic unconditionally secure self-healing
scheme with t-revocation capability, and C4 to denote Construc-
tion 4 in [27], which is the less broadcast size variant of C3. Note
that C4 reduces the broadcast size by sacriﬁcing the unconditional
security property of C3 (for computational security). In contrast,
Scheme 3 proposed in this paper reduces the communication and
storage overhead without sacriﬁcing any security property. From
Table 1, it is easy to see that our scheme has less communication
and storage overhead than both constructions in [27]. Figure 1 fur-
ther shows the possible values for m and t given a maximum of
64KB packet size2. Obviously, our scheme allows more sessions
and can deal with more colluding users under the same condition.
4. RELATED WORK
Early approaches to group key management (e.g., Group Key
Management Protocol (GKMP) [12]) rely on a group controller,
which shares a pairwise key with each group member and dis-
tributes group keys to group members on a one-to-one basis. These
approaches cannot scale to large groups.
To address the scalability problem, Iolus organizes the multicast
group into a hierarchy of subgroups to form a virtual secure mul-
ticast group [18]. The group hierarchy can be used for both group
communication and distribution of group keys. Wallner et al. [32]
and Wong et al. [33] independently discovered the Logical Key Hi-
erarchy (LKH) (or Key Graph) approach. In this approach, individ-
ual and auxiliary keys are organized into a hierarchy, where each
group member is assigned to a leaf and holds all the keys from its
leaf to the root. The root key is shared by all group members and