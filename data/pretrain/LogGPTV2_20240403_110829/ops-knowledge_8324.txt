We are currently evaluating transport and protocol solutions and planning to conduct various performance tests. I wanted to reach out to the community to see if anyone has already conducted similar tests, specifically:

- Server performance tests for simple echo services.
- Serialization and deserialization performance for various message sizes.
- Comparisons between EJB3, Thrift, and Protocol Buffers on a Linux environment.
- Primary languages of interest are Java, C/C++, Python, and PHP.

**Update:**
I am still very interested in this topic. If anyone has conducted further benchmarks, please let me know. Additionally, I have come across an interesting benchmark that shows compressed JSON performing similarly or even better than Thrift and Protocol Buffers. Therefore, I would like to include JSON in this comparison as well.

---

In my experience, I have tested the performance of Protocol Buffers (PB) against several other data formats, including XML, JSON, default object serialization, Hessian, and a proprietary format, using various libraries such as JAXB, Fast Infoset, and hand-written code. However, Thrift was not included in these tests.

The performance of formats with multiple converters, such as XML, varied significantly, ranging from very slow to quite fast. There was often a weak correlation between the claims made by the authors and the actual performance observed, especially for packages that made the most ambitious claims.

### Key Findings:
- **Protocol Buffers (PB):** 
  - Performance was somewhat overhyped. With default settings, PB did not outperform the fastest textual XML alternatives.
  - In optimized mode, PB was slightly faster and comparable to the fastest JSON packages.
  - PB produced compact message sizes, but the trade-offs include the need for a schema; without it, the data is not self-descriptive and can be lost.

- **Hessian:** 
  - Hessian was relatively fast, as was textual JSON.

- **Proprietary Binary Format:**
  - This internal company format was the slowest.

- **Java Object Serialization:**
  - Fast for larger messages but less efficient for small objects due to high fixed per-operation overhead.

### Considerations:
- **Data Descriptiveness:** PB data is not self-descriptive. If you lose the schema, you lose the data. While there are indexes and value types, reverse-engineering back to field names can be challenging.
- **Use Cases:** PB is best suited for size-sensitive, closely coupled systems where the interface/format rarely changes.

### Recommendations:
1. **Implementation Over Specification:** The choice of implementation often matters more than the data format specification itself.
2 - **Performance Differences:** The differences between the best implementations of different formats are usually not significant enough to dictate the choice.
3. **Tool Support and Usability:** Choose the format and API/library/framework that you find most user-friendly or that has the best tool support. Ensure it meets your performance requirements.
4. **Fallback Options:** Only consider alternative formats if the initial choice does not meet your performance needs.

**Note:** I am unsure what specific aspect of EJB3 is being referred to here. It might be related to plain Java serialization.

If you have any further insights or benchmarks, I would greatly appreciate your input.