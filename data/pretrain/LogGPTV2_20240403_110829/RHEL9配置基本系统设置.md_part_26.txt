:::
:::
::: section
::: titlepage
# []{#assembly_using-secure-communications-between-two-systems-with-openssh_configuring-basic-system-settings.html#generating-ssh-key-pairs_assembly_using-secure-communications-between-two-systems-with-openssh}生成 SSH 密钥对 {.title}
:::
使用这个流程在本地系统中生成 SSH 密钥对，并将生成的公钥复制到
`OpenSSH`{.literal}
服务器中。如果正确配置了服务器，您可以在不提供任何密码的情况下登录到
`OpenSSH`{.literal} 服务器。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
如果以 `root`{.literal} 用户身份完成以下步骤，则只有 `root`{.literal}
用户可以使用密钥。
:::
::: orderedlist
**流程**
1.  为 SSH 协议的版本 2 生成 ECDSA 密钥对：
    ``` screen
    $ ssh-keygen -t ecdsa
    Generating public/private ecdsa key pair.
    Enter file in which to save the key (/home/joesec/.ssh/id_ecdsa):
    Enter passphrase (empty for no passphrase):
    Enter same passphrase again:
    Your identification has been saved in /home/joesec/.ssh/id_ecdsa.
    Your public key has been saved in /home/joesec/.ssh/id_ecdsa.pub.
    The key fingerprint is:
    SHA256:Q/x+qms4j7PCQ0qFd09iZEFHA+SqwBKRNaU72oZfaCI PI:EMAIL
    The key's randomart image is:
    +---[ECDSA 256]---+
    |.oo..o=++        |
    |.. o .oo .       |
    |. .. o. o        |
    |....o.+...       |
    |o.oo.o +S .      |
    |.=.+.   .o       |
    |E.*+.  .  . .    |
    |.=..+ +..  o     |
    |  .  oo*+o.      |
    +----[SHA256]-----+
    ```
    您还可以通过输入 `ssh-keygen -t ed25519`{.literal} 命令，在
    `ssh-keygen`{.literal} 命令或 Ed25519 密钥对中使用
    `-t rsa`{.literal} 选项生成 RSA 密钥对。
2.  要将公钥复制到远程机器中：
    ``` screen
    $ ssh-copy-id PI:EMAIL
    /usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed
    PI:EMAIL's password:
    ...
    Number of key(s) added: 1
    Now try logging into the machine, with: "ssh 'PI:EMAIL'" and check to make sure that only the key(s) you wanted were added.
    ```
    如果您没有在会话中使用 `ssh-agent`{.literal}
    程序，上一个命令会复制最新修改的 `~/.ssh/id*.pub`{.literal}
    公钥。要指定另一个公钥文件，或在 `ssh-agent`{.literal}
    内存中缓存的密钥优先选择文件中的密钥，使用带有 `-i`{.literal} 选项的
    `ssh-copy-id`{.literal} 命令。
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
如果重新安装您的系统并希望保留之前生成的密钥对，备份 `~/.ssh/`{.literal}
目录。重新安装后，将其复制到主目录中。您可以为系统中的所有用户（包括
`root`{.literal} 用户）进行此操作。
:::
::: orderedlist
**验证**
1.  在不提供任何密码的情况下登录到 OpenSSH 服务器：
    ``` screen
    $ ssh PI:EMAIL
    Welcome message.
    ...
    Last login: Mon Nov 18 18:28:42 2019 from ::1
    ```
:::
::: itemizedlist
**其他资源**
-   `ssh-keygen(1)`{.literal} 和 `ssh-copy-id(1)`{.literal} 手册页。
:::
:::
::: section
::: titlepage
# []{#assembly_using-secure-communications-between-two-systems-with-openssh_configuring-basic-system-settings.html#using-ssh-keys-stored-on-a-smart-card_assembly_using-secure-communications-between-two-systems-with-openssh}使用保存在智能卡中的 SSH 密钥 {.title}
:::
Red Hat Enterprise Linux 可让您使用保存在 OpenSSH 客户端智能卡中的 RSA
和 ECDSA 密钥。使用这个步骤使用智能卡而不是使用密码启用验证。
::: itemizedlist
**先决条件**
-   在客户端中安装了 `opensc`{.literal} 软件包，`pcscd`{.literal}
    服务正在运行。
:::
::: orderedlist
**流程**
1.  列出所有由 OpenSC PKCS #11 模块提供的密钥，包括其 PKCS #11
    URIs，并将输出保存到 [*key.pub*]{.emphasis} 文件：
    ``` screen
    $ ssh-keygen -D pkcs11: > keys.pub
    $ ssh-keygen -D pkcs11:
    ssh-rsa AAAAB3NzaC1yc2E...KKZMzcQZzx pkcs11:id=%02;object=SIGN%20pubkey;token=SSH%20key;manufacturer=piv_II?module-path=/usr/lib64/pkcs11/opensc-pkcs11.so
    ecdsa-sha2-nistp256 AAA...J0hkYnnsM= pkcs11:id=%01;object=PIV%20AUTH%20pubkey;token=SSH%20key;manufacturer=piv_II?module-path=/usr/lib64/pkcs11/opensc-pkcs11.so
    ```
2.  要使用远程服务器上的智能卡（[*example.com*]{.emphasis}）启用验证，将公钥传送到远程服务器。使用带有上一步中创建的
    [*key.pub*]{.emphasis} 的 `ssh-copy-id`{.literal} 命令：
    ``` screen
    $ ssh-copy-id -f -i keys.pub PI:EMAIL
    ```
3.  要使用在第 1 步的 `ssh-keygen -D`{.literal} 命令输出中的 ECDSA
    密钥连接到 [*example.com*]{.emphasis}，您只能使用 URI
    中的一个子集，它是您的密钥的唯一参考，例如：
    ``` screen
    $ ssh -i "pkcs11:id=%01?module-path=/usr/lib64/pkcs11/opensc-pkcs11.so" example.com
    Enter PIN for 'SSH key':
    [example.com] $
    ```
4.  您可以使用 `~/.ssh/config`{.literal} 文件中的同一 URI
    字符串使配置持久：
    ``` screen
    $ cat ~/.ssh/config
    IdentityFile "pkcs11:id=%01?module-path=/usr/lib64/pkcs11/opensc-pkcs11.so"
    $ ssh example.com
    Enter PIN for 'SSH key':
    [example.com] $
    ```
    因为 OpenSSH 使用 `p11-kit-proxy`{.literal} 包装器，并且 OpenSC PKCS
    #11 模块是注册到 PKCS#11 Kit 的，所以您可以简化前面的命令：
    ``` screen
    $ ssh -i "pkcs11:id=%01" example.com
    Enter PIN for 'SSH key':
    [example.com] $
    ```
:::
如果您跳过 PKCS #11 URI 的 `id=`{.literal} 部分，则 OpenSSH
会加载代理模块中可用的所有密钥。这可减少输入所需的数量：
``` screen
$ ssh -i pkcs11: example.com
Enter PIN for 'SSH key':
[example.com] $
```
::: itemizedlist
**其他资源**
-   [Fedora 28：在 OpenSSH
    中更好地支持智能卡](https://fedoramagazine.org/fedora-28-better-smart-card-support-openssh/){.link}
-   `p11-kit(8)`{.literal}, `opensc.conf(5)`{.literal},
    `pcscd(8)`{.literal}, `ssh(1)`{.literal}, 和
    `ssh-keygen(1)`{.literal} man pages
:::
:::
::: section
::: titlepage
# []{#assembly_using-secure-communications-between-two-systems-with-openssh_configuring-basic-system-settings.html#making-openssh-more-secure_assembly_using-secure-communications-between-two-systems-with-openssh}使 OpenSSH 更安全 {.title}
:::
以下提示可帮助您在使用 OpenSSH
时提高安全性。请注意，`/etc/ssh/sshd_config`{.literal} OpenSSH
配置文件的更改需要重新载入 `sshd`{.literal} 守护进程才能生效：
``` screen
# systemctl reload sshd
```
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
大多数安全强化配置更改会降低与不支持最新算法或密码套件的客户端的兼容性。
:::
::: itemizedlist
**禁用不安全的连接协议**
-   要使 SSH 生效，防止使用由 `OpenSSH`{.literal}
    套件替代的不安全连接协议。否则，用户的密码可能只会在一个会话中被 SSH
    保护，可能会在以后使用 Telnet
    登录时被捕获。因此，请考虑禁用不安全的协议，如 telnet、rsh、rlogin
    和 ftp。
:::
::: itemizedlist
**启用基于密钥的身份验证并禁用基于密码的身份验证**
-   禁用密码验证并只允许密钥对可减少安全攻击面，还可节省用户的时间。在客户端中，使用
    `ssh-keygen`{.literal} 工具生成密钥对，并使用
    `ssh-copy-id`{.literal} 工具从 `OpenSSH`{.literal}
    服务器的客户端复制公钥。要在 OpenSSH
    服务器中禁用基于密码的验证，请编辑
    `/etc/ssh/sshd_config`{.literal}，并将
    `PasswordAuthentication`{.literal} 选项改为 `no`{.literal}:
    ``` screen
    PasswordAuthentication no
    ```
:::
::: itemizedlist
**密钥类型**
-   虽然 `ssh-keygen`{.literal} 命令会默认生成一组 RSA
    密钥，但您可以使用 `-t`{.literal} 选项指定它生成 ECDSA 或者 Ed25519
    密钥。ECDSA(Elliptic Curve Digital Signature
    Algorithm)能够在同等的对称密钥强度下，提供比 RSA
    更好的性能。它还会生成较短的密钥。Ed25519 公钥算法是 一种变形的
    Edwards 曲线的实现，其比 RSA、DSA 和 ECDSA 更安全，也更快。
    如果没有这些密钥，OpenSSH 会自动创建 RSA、ECDSA 和 Ed25519
    服务器主机密钥。要在 RHEL 中配置主机密钥创建，请使用
    `sshd-keygen@.service`{.literal} 实例化服务。例如，禁用自动创建 RSA
    密钥类型：
    ``` screen
    # systemctl mask sshd-keygen@rsa.service
    ```
-   要排除 SSH 连接的特定密钥类型，注释 `/etc/ssh/sshd_config`{.literal}
    中的相关行，并重新载入 `sshd`{.literal} 服务。例如，只允许 Ed25519
    主机密钥：
    ``` screen
    # HostKey /etc/ssh/ssh_host_rsa_key
    # HostKey /etc/ssh/ssh_host_ecdsa_key
    HostKey /etc/ssh/ssh_host_ed25519_key
    ```
:::
::: itemizedlist
**非默认端口**
-   默认情况下，`sshd`{.literal} 守护进程侦听 TCP 端口
    22。更改此端口可降低系统因自动网络扫描而受到攻击的风险，并可以提高安全性。您可以使用
    `/etc/ssh/sshd_config`{.literal} 配置文件中的 `Port`{.literal}
    指令指定端口。
    您还必须更新默认 SELinux
    策略以允许使用非默认端口。要做到这一点，使用
    `policycoreutils-python-utils`{.literal} 软件包中的
    `semanage`{.literal} 工具：
    ``` screen
    # semanage port -a -t ssh_port_t -p tcp port_number
    ```
    另外，更新 `firewalld`{.literal} 配置：
    ``` screen
    # firewall-cmd --add-port port_number/tcp
    # firewall-cmd --runtime-to-permanent
    ```
    在前面的命令中，将 [*port_number*]{.emphasis} 替换为使用
    `Port`{.literal} 指令指定的新端口号。
:::
::: itemizedlist
**root 登录**
-   默认情况下，`PermitRootLogin`{.literal} 设置为
    `prohibit-password`{.literal}。这强制使用基于密钥的身份验证，而不是使用密码以
    root 身份登录，并通过防止暴力攻击来降低风险。
    ::: {.caution style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 小心 {.title}
    以 root
    用户身份登录并不是一个安全的做法，因为管理员无法审核运行哪个特权命令。要使用管理命令，请登录并使用
    `sudo`{.literal}。
    :::
:::
::: itemizedlist
**使用 X Security 扩展**
-   Red Hat Enterprise Linux 客户端中的 X 服务器不提供 X
    安全扩展。因此，当连接到带有 X11 转发的不可信 SSH
    服务器时，客户端无法请求另一个安全层。大多数应用程序都无法在启用此扩展时运行。
    默认情况下，`/etc/ssh/ssh_config.d/05-redhat.conf`{.literal}
    文件中的 `ForwardX 11Trusted`{.literal} 选项被设置为
    `yes`{.literal}，且 `ssh -X remote_machine`{.literal}
    （不信任主机）和 `ssh -Y remote_machine`{.literal}
    （可信主机）命令之间没有区别。
    如果您的场景根本不需要 X11 转发功能，请将
    `/etc/ssh/sshd_config`{.literal} 配置文件中的
    `X11Forwarding`{.literal} 指令设置为 `no`{.literal}。
:::
::: itemizedlist
**限制对特定用户、组群或者域的访问**
-   `/etc/ssh/sshd_config`{.literal} 配置文件服务器中的
    `AllowUsers`{.literal} 和 `AllowGroups`{.literal}
    指令可让您只允许某些用户、域或组连接到您的 OpenSSH
    服务器。您可以组合 `AllowUsers`{.literal} 和
    `Allow Groups`{.literal} 来更准确地限制访问，例如：
    ``` screen
    AllowUsers *@192.168.1.*,*@10.0.0.*,!*@192.168.1.2
    AllowGroups example-group
    ```
    以上配置行接受来自 192.168.1.\* 和 10.0.0.\*
    子网中所有用户的连接，但 192.168.1.2
    地址的系统除外。所有用户都必须在 `example-group`{.literal}
    组中。OpenSSH 服务器拒绝所有其他连接。
    请注意，使用允许列表（以 Allow 开头的指令）比使用阻止列表（以 Deny
    开始的选项）更安全，因为允许列表也会阻止新的未授权的用户或组。
:::
::: itemizedlist
**更改系统范围的加密策略**
-   `OpenSSH`{.literal} 使用 RHEL
    系统范围的加密策略，默认的系统范围的加密策略级别为当前威胁模型提供了安全设置。要使您的加密设置更严格，请更改当前的策略级别：
    ``` screen
    # update-crypto-policies --set FUTURE
    Setting system policy to FUTURE
    ```
-   要为您的 `OpenSSH`{.literal}
    服务器选择不使用系统范围内的加密策略，请对
    `/etc/sysconfig/sshd`{.literal} 文件中的 `CRYPTO_POLICY=`{.literal}
    变量这一行取消注释。更改后，您在 `/etc/ssh/sshd_config`{.literal}
    文件中的 `Ciphers`{.literal} 、`MAC`{.literal}
    、`KexAlgoritms`{.literal} 和 `GSSAPIKexAlgorithms`{.literal}
    部分指定的值不会被覆盖。请注意，此任务需要在配置加密选项方面具有深厚的专业知识。
-   如需更多信息，请参阅[安全强化](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/security_hardening/){.link}中的[使用系统范围的加密策略](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/security_hardening/using-the-system-wide-cryptographic-policies_security-hardening){.link}。
:::
::: itemizedlist
**其他资源**
-   `sshd_config(5)`{.literal}、`ssh-keygen(1)`{.literal}、
    `crypto-policies(7)`{.literal} 和
    `update-crypto-policies(8)`{.literal} 手册页。
:::
:::
::: section
::: titlepage
# []{#assembly_using-secure-communications-between-two-systems-with-openssh_configuring-basic-system-settings.html#connecting-to-a-remote-server-using-an-ssh-jump-host_assembly_using-secure-communications-between-two-systems-with-openssh}使用 SSH 跳过主机连接到远程服务器 {.title}