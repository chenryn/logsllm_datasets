Integer Vulnerabilities 640
Integer Overfl ows 640
Signedness Errors 641
Detecting Integer Vulnerabilities 642
Format String Vulnerabilities 643
Detecting Format String Vulnerabilities 644
Summary 645
Questions 645
Chapter 17 Attacking Application Architecture 647
Tiered Architectures 647
Attacking Tiered Architectures 648
Securing Tiered Architectures 654
Shared Hosting and Application Service Providers 656
Virtual Hosting 657
Shared Application Services 657
Attacking Shared Environments 658
Securing Shared Environments 665
Summary 667
Questions 667
Chapter 18 Attacking the Application Server 669
Vulnerable Server Confi guration 670
Default Credentials 670
Default Content 671
Directory Listings 677
WebDAV Methods 679
The Application Server as a Proxy 682
Misconfi gured Virtual Hosting 683
Securing Web Server Confi guration 684
Vulnerable Server Software 684
Application Framework Flaws 685
Memory Management Vulnerabilities 687
Encoding and Canonicalization 689
Finding Web Server Flaws 694
Securing Web Server Software 695
Web Application Firewalls 697
Summary 699
Questions 699
Chapter 19 Finding Vulnerabilities in Source Code 701
Approaches to Code Review 702
Black-Box Versus White-Box Testing 702
Code Review Methodology 703
Signatures of Common Vulnerabilities 704
Cross-Site Scripting 704
ffttoocc..iinndddd xxvviiii 88//1199//22001111 1122::2233::3355 PPMM
Stuttard ftoc.indd V2 - 08/10/2011 Page xviii
xviii Contents
SQL Injection 705
Path Traversal 706
Arbitrary Redirection 707
OS Command Injection 708
Backdoor Passwords 708
Native Software Bugs 709
Source Code Comments 710
The Java Platform 711
Identifying User-Supplied Data 711
Session Interaction 712
Potentially Dangerous APIs 713
Confi guring the Java Environment 716
ASP.NET 718
Identifying User-Supplied Data 718
Session Interaction 719
Potentially Dangerous APIs 720
Confi guring the ASP.NET Environment 723
PHP 724
Identifying User-Supplied Data 724
Session Interaction 727
Potentially Dangerous APIs 727
Confi guring the PHP Environment 732
Perl 735
Identifying User-Supplied Data 735
Session Interaction 736
Potentially Dangerous APIs 736
Confi guring the Perl Environment 739
JavaScript 740
Database Code Components 741
SQL Injection 741
Calls to Dangerous Functions 742
Tools for Code Browsing 743
Summary 744
Questions 744
Chapter 20 A Web Application Hacker’s Toolkit 747
Web Browsers 748
Internet Explorer 748
Firefox 749
Chrome 750
Integrated Testing Suites 751
How the Tools Work 751
Testing Work Flow 769
Alternatives to the Intercepting Proxy 771
Standalone Vulnerability Scanners 773
Vulnerabilities Detected by Scanners 774
Inherent Limitations of Scanners 776
ffttoocc..iinndddd xxvviiiiii 88//1199//22001111 1122::2233::3355 PPMM
iii Stuttard ftoc.indd V2 - 08/10/2011 Page xix
Contents xix
Technical Challenges Faced by Scanners 778
Current Products 781
Using a Vulnerability Scanner 783
Other Tools 785
Wikto/Nikto 785
Firebug 785
Hydra 785
Custom Scripts 786
Summary 789
Chapter 21 A Web Application Hacker’s Methodology 791
General Guidelines 793
1 Map the Application’s Content 795
1.1 Explore Visible Content 795
1.2 Consult Public Resources 796
1.3 Discover Hidden Content 796
1.4 Discover Default Content 797
1.5 Enumerate Identifi er-Specifi ed Functions 797
1.6 Test for Debug Parameters 798
2 Analyze the Application 798
2.1 Identify Functionality 798
2.2 Identify Data Entry Points 799
2.3 Identify the Technologies Used 799
2.4 Map the Attack Surface 800
3 Test Client-Side Controls 800
3.1 Test Transmission of Data Via the Client 801
3.2 Test Client-Side Controls Over User Input 801
3.3 Test Browser Extension Components 802
4 Test the Authentication Mechanism 805
4.1 Understand the Mechanism 805
4.2 Test Password Quality 806
4.3 Test for Username Enumeration 806
4.4 Test Resilience to Password Guessing 807
4.5 Test Any Account Recovery Function 807
4.6 Test Any Remember Me Function 808
4.7 Test Any Impersonation Function 808
4.8 Test Username Uniqueness 809
4.9 Test Predictability of Autogenerated Credentials 809
4.10 Check for Unsafe Transmission of Credentials 810
4.11 Check for Unsafe Distribution of Credentials 810
4.12 Test for Insecure Storage 811
4.13 Test for Logic Flaws 811
4.14 Exploit Any Vulnerabilities to Gain Unauthorized Access 813
5 Test the Session Management Mechanism 814
5.1 Understand the Mechanism 814
5.2 Test Tokens for Meaning 815
5.3 Test Tokens for Predictability 816
ffttoocc..iinndddd xxiixx 88//1199//22001111 1122::2233::3355 PPMM
Stuttard ftoc.indd V2 - 08/10/2011 Page xx
xx Contents
5.4 Check for Insecure Transmission of Tokens 817
5.5 Check for Disclosure of Tokens in Logs 817
5.6 Check Mapping of Tokens to Sessions 818
5.7 Test Session Termination 818
5.8 Check for Session Fixation 819
5.9 Check for CSRF 820
5.10 Check Cookie Scope 820
6 Test Access Controls 821
6.1 Understand the Access Control Requirements 821
6.2 Test with Multiple Accounts 822
6.3 Test with Limited Access 822
6.4 Test for Insecure Access Control Methods 823
7 Test for Input-Based Vulnerabilities 824
7.1 Fuzz All Request Parameters 824
7.2 Test for SQL Injection 827
7.3 Test for XSS and Other Response Injection 829
7.4 Test for OS Command Injection 832
7.5 Test for Path Traversal 833
7.6 Test for Script Injection 835
7.7 Test for File Inclusion 835
8 Test for Function-Specifi c Input Vulnerabilities 836
8.1 Test for SMTP Injection 836
8.2 Test for Native Software Vulnerabilities 837
8.3 Test for SOAP Injection 839
8.4 Test for LDAP Injection 839
8.5 Test for XPath Injection 840
8.6 Test for Back-End Request Injection 841
8.7 Test for XXE Injection 841
9 Test for Logic Flaws 842
9.1 Identify the Key Attack Surface 842
9.2 Test Multistage Processes 842
9.3 Test Handling of Incomplete Input 843
9.4 Test Trust Boundaries 844
9.5 Test Transaction Logic 844
10 Test for Shared Hosting Vulnerabilities 845
10.1 Test Segregation in Shared Infrastructures 845
10.2 Test Segregation Between ASP-Hosted Applications 845
11 Test for Application Server Vulnerabilities 846
11.1 Test for Default Credentials 846
11.2 Test for Default Content 847
11.3 Test for Dangerous HTTP Methods 847
11.4 Test for Proxy Functionality 847
11.5 Test for Virtual Hosting Misconfi guration 847
11.6 Test for Web Server Software Bugs 848
11.7 Test for Web Application Firewalling 848
ffttoocc..iinndddd xxxx 88//1199//22001111 1122::2233::3366 PPMM
xx Stuttard ftoc.indd V2 - 08/10/2011 Page xxi
Contents xxi
12 Miscellaneous Checks 849
12.1 Check for DOM-Based Attacks 849
12.2 Check for Local Privacy Vulnerabilities 850
12.3 Check for Weak SSL Ciphers 851
12.4 Check Same-Origin Policy Confi guration 851
13 Follow Up Any Information Leakage 852
Index 853
ffttoocc..iinndddd xxxxii 88//1199//22001111 1122::2233::3366 PPMM
Stuttard fl ast.indd V2 - 08/10/2011 Page xxii
ffllaasstt..iinndddd xxxxiiii 88//1199//22001111 1122::2233::0077 PPMM
Stuttard fl ast.indd V2 - 08/10/2011 Page xxiii
Introduction
This book is a practical guide to discovering and exploiting security fl aws in
web applications. By “web applications” we mean those that are accessed using
a web browser to communicate with a web server. We examine a wide variety
of different technologies, such as databases, fi le systems, and web services, but
only in the context in which these are employed by web applications.
If you want to learn how to run port scans, attack fi rewalls, or break into serv-
ers in other ways, we suggest you look elsewhere. But if you want to know how
to hack into a web application, steal sensitive data, and perform unauthorized
actions, this is the book for you. There is enough that is interesting and fun to
say on that subject without straying into any other territory.
Overview of This Book
The focus of this book is highly practical. Although we include suffi cient back-
ground and theory for you to understand the vulnerabilities that web applications
contain, our primary concern is the tasks and techniques that you need to master
to break into them. Throughout the book, we spell out the specifi c steps you need
to follow to detect each type of vulnerability, and how to exploit it to perform
unauthorized actions. We also include a wealth of real-world examples, derived
from the authors’ many years of experience, illustrating how different kinds of
security fl aws manifest themselves in today’s web applications.
Security awareness is usually a double-edged sword. Just as application
developers can benefi t from understanding the methods attackers use, hackers
can gain from knowing how applications can effectively defend themselves.
In addition to describing security vulnerabilities and attack techniques, we
describe in detail the countermeasures that applications can take to thwart an
xxiii
ffllaasstt..iinndddd xxxxiiiiii 88//1199//22001111 1122::2233::0077 PPMM
Stuttard fl ast.indd V2 - 08/10/2011 Page xxiv
xxiv Introduction
attacker. If you perform penetration tests of web applications, this will enable
you to provide high-quality remediation advice to the owners of the applica-
tions you compromise.
Who Should Read This Book
This book’s primary audience is anyone who has a personal or professional
interest in attacking web applications. It is also aimed at anyone responsible for
developing and administering web applications. Knowing how your enemies
operate will help you defend against them.
We assume that you are familiar with core security concepts such as logins
and access controls and that you have a basic grasp of core web technologies
such as browsers, web servers, and HTTP. However, any gaps in your current
knowledge of these areas will be easy to remedy, through either the explana-
tions contained in this book or references elsewhere.
In the course of illustrating many categories of security fl aws, we provide
code extracts showing how applications can be vulnerable. These examples are
simple enough that you can understand them without any prior knowledge
of the language in question. But they are most useful if you have some basic
experience with reading or writing code.
How This Book Is Organized
This book is organized roughly in line with the dependencies between the dif-
ferent topics covered. If you are new to web application hacking, you should read
the book from start to fi nish, acquiring the knowledge and understanding you
need to tackle later chapters. If you already have some experience in this area,
you can jump straight into any chapter or subsection that particularly interests you.
Where necessary, we have included cross-references to other chapters, which
you can use to fi ll in any gaps in your understanding.
We begin with three context-setting chapters describing the current state of
web application security and the trends that indicate how it is likely to evolve
in the near future. We examine the core security problem affecting web appli-
cations and the defense mechanisms that applications implement to address
this problem. We also provide a primer on the key technologies used in today’s
web applications.
The bulk of the book is concerned with our core topic — the techniques
you can use to break into web applications. This material is organized around
the key tasks you need to perform to carry out a comprehensive attack. These
include mapping the application’s functionality, scrutinizing and attacking its
core defense mechanisms, and probing for specifi c categories of security fl aws.
ffllaasstt..iinndddd xxxxiivv 88//1199//22001111 1122::2233::0077 PPMM
Stuttard fl ast.indd V2 - 08/10/2011 Page xxv
Introduction xxv
The book concludes with three chapters that pull together the various strands
introduced in the book. We describe the process of fi nding vulnerabilities in
an application’s source code, review the tools that can help when you hack web
applications, and present a detailed methodology for performing a comprehen-
sive and deep attack against a specifi c target.
Chapter 1, “Web Application (In)security,” describes the current state of secu-
rity in web applications on the Internet today. Despite common assurances, the
majority of applications are insecure and can be compromised in some way with
a modest degree of skill. Vulnerabilities in web applications arise because of a
single core problem: users can submit arbitrary input. This chapter examines the
key factors that contribute to the weak security posture of today’s applications.
It also describes how defects in web applications can leave an organization’s
wider technical infrastructure highly vulnerable to attack.
Chapter 2, “Core Defense Mechanisms,” describes the key security mechanisms
that web applications employ to address the fundamental problem that all user
input is untrusted. These mechanisms are the means by which an application
manages user access, handles user input, and responds to attackers. These
mechanisms also include the functions provided for administrators to manage
and monitor the application itself. The application’s core security mechanisms
also represent its primary attack surface, so you need to understand how these
mechanisms are intended to function before you can effectively attack them.
Chapter 3, “Web Application Technologies,” is a short primer on the key
technologies you are likely to encounter when attacking web applications. It
covers all relevant aspects of the HTTP protocol, the technologies commonly
used on the client and server sides, and various schemes used to encode data. If