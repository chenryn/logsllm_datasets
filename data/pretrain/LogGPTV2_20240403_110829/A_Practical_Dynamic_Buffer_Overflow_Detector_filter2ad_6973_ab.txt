copy operation in the object table nor identify the object
as unchecked.
Let us now describe our technique step by step:
1. After every address computation, the run-time sys-
tem checks if the address is out-of-bounds. If so, a
special malloc is invoked to create an OOB object;
the OOB object is not recorded as a regular object
in the object table, but its address is entered into the
OOB hash table. The out-of-bounds address and the
referent object’s address are stored in the OOB ob-
ject.
2. When a pointer is dereferenced, check if it points to
an object in the object table or to an unchecked ob-
ject. If neither is the case, it is an illegal reference
and the program is halted after an appropriate error
message is printed.
3. If a pointer is used in an arithmetic or comparison
operation, checks if it points to an object or to an
unchecked object. If neither is the case, check the
OOB hash table to determine if it is an out-of-bounds
value. The referent object and its value are retrieved
from the OOB itself. The desired operation is per-
formed on the actual out-of-bounds value.
4. When an object is de-allocated, implicitly if it is on
the stack and explicitly if it is on the heap, delete
all OOB objects referring to the object. This pre-
vents the hash table and the number of OOB objects
from growing indeﬁnitely. Simply scan the hash ta-
ble for any OOB object whose referent object is be-
ing deleted, and delete the OOB object as well as the
heap entry.
Figure 1(d) demonstrates how this technique would
work on our example program. It shows the memory state
of a CRED instrumented executable after line 6. The OOB
object allows us to correctly determine the referent object
Figure 1. (a) Simple C program, memory states of (b) uninstrumented execution, (c) instrumen-
tation with Jones and Kelly Checker, (d) instrumentation with CRED.
and value of r from the arithmetic operation on s. CRED
is therefore compatible with real-life programs.
Note that there are situations where our scheme would
fail. Assume an out-of-bounds pointer is cast to an in-
teger, used in arithmetic operation, and the result cast
back to a pointer. Subsequent use of the resulting pointer
could lead to undetected memory safety violations since
it may reference an object in the object table. One way
to guard against such problems is to perform an analy-
sis over the program to locate and warn of any unsafe
cast operations. Furthermore, similar to the Jones and
Kelly checker, CRED’s interaction with external libraries
requires no special handling for passing in-bounds point-
ers. However, for out-of-bounds pointers, the address of
the OOB object would be incorrectly passed resulting in
undeﬁned behavior if the value is used in a non copy op-
eration. We believe this case is rare in correct code. Note
that we have not encountered such cases in the million
lines of code we tested.
3. Run-time Overhead
The poor performance of the original Jones and Kelly’s
technique is yet another obstacle to its adoption. This
scheme incurs a run-time overhead on every memory ac-
cess involving arrays and pointers. Virtually all large,
useful software uses pointers extensively and thus suffers
from a signiﬁcant performance degradation.
We recognize that buffer overﬂow attacks are per-
petrated by overﬂowing a program buffer using user-
supplied string data. Thus, for security purposes, we only
need to check the bounds of string data and thus signiﬁ-
cantly reduce the overhead of securing software systems,
without compromising the quality of protection offered.
We modiﬁed the parsing ﬁles of gcc to check the
bounds of only character arrays and pointers during the
construction of the abstract syntax tree. We introduced a
compilation ﬂag for specifying compilation in this mode.
Thus, at run time, calls to the bounds-checking library are
made only for strings. We maintain the table for all ob-
jects regardless of type so that the bounds-checking ver-
sions of the library functions can handle casts correctly.
It is important to observe that when data is copied be-
          {            1: char *p, *q, *r, *s;            2:            3:  p = malloc(4);            4:  q = p + 1;            5:  s = p + 5;            6:  r = s – 3;            ……………            }     (a) (b)    (c) (d)              Program
Apache-1.3.24
binutils-2.13.2.1
bison-1.875
ccrypt-1.4
coreutils-5.0
enscript-1.6.1
gawk-3.1.2
gnupg-1.2.2
grep-2.5.1
gzip-1.2.4
hypermail-2.1.5
monkey-0.7.1
OpenSSH-3.2.2p1
OpenSSL-0.9.7b
pgp4pine-1.76
polymorph-0.40
tar-1.13
WsMp3-0.0.10
wu-ftpd-2.6.1
zlib-1.13
Type
web server
binary tools
parser generator
encryption utility
ﬁle, shell, & text utilities
ascii to postscript converter
string manipulation tool
OpenPGP implementation
pattern matching utility
compression utility
mail to HTML converter
web server
SSH1 protocol implementation
SSL & TLS toolkit
mail encryption tool
ﬁlesystem unixier
archiving utility
web server
FTP server
data compression library
# Lines Vuln. Tests
73.6K no
596.5K no
25.1K no
4.4K no
69.5K no
22.1K no
36.4K yes
71.2K no
20.8K no
5.8K yes
27.6K yes
2.5K yes
43.4K no
162.7K no
3.3K yes
0.4K yes
18.2K no
3.4K yes
18.3K no
8.3K no
yes
yes
yes
yes
yes
yes
yes
yes
yes
yes
yes
no
no
yes
no
no
yes
no
no
yes
JK
fail
fail
fail
pass
fail
fail
fail
fail
fail
pass
fail
pass
fail
fail
fail
pass
pass
pass
pass
pass
CRED
pass
pass
pass
pass
pass
pass
pass
pass
pass
pass
pass
pass
pass
pass
pass
pass
pass
pass
pass
pass
Figure 2. Results of compatibility experiment.
tween locations in memory, objects are usually cast down
to character pointers and not vice versa. This observation
is important in appreciating that security is not compro-
mised by this technique.
4. Experiments
We have implemented the techniques described above
in a tool called CRED. CRED has been merged into the
latest Jones and Kelly checker for gcc 3.3.1, which is cur-
rently maintained by Brugge[5]. We refer to the Jones and
Kelly checker as JK in this section.
We carried out experiments to evaluate the effective-
ness of CRED with respect to correctness, protection of-
fered against buffer overﬂows and the performance im-
provements obtained by strings-only checking. Here we
ﬁrst describe the applications then our experimental re-
sults.
4.1. Application Programs
We used some common open-source programs for
this evaluation. Figure 2 shows the list of programs,
along with the lines of code count as generated using
SLOCCount[32]. The “Tests” column indicates whether
the program source was distributed with a test suite. The
column labeled “Vuln” indicates that the program had
a known vulnerability and a publicly available exploit.
Seven of the programs fell into this category and were
used to evaluate the protection offered by CRED. More
than 1.2M lines of C code was evaluated during this ex-
periment.
4.2. Compatibility
We ﬁrst evaluated the compatibility of CRED with real-
life programs and compared it with that of JK. As a stress
test, we ran this experiment by checking for overﬂows for
all buffers, and not just strings. Most open-source pro-
grams are distributed with a suite of self tests. We took
advantage of the test suites for the experiment whenever
they were available, and used simple tests for those pro-
grams without a test suite.
The last two columns in Figure 2 indicate the result of
this experiment. The Jones and Kelly extension failed on
12 out of the 20 programs. This suggests that most of the
programs violate the C standard by manipulating out-of-
bounds addresses that do not just point immediately past
an object. CRED, in full bounds-checking mode, passed
all the tests. This experiment also uncovered a number of
previously unknown bounds errors in non-string buffers
when executing the test suites. This ﬁnding led to bug
ﬁxes in coreutils, bison and OpenSSL. This result sug-
gests that CRED, in its full bounds checking mode, could
be a useful for software development and testing.
4.3. Protection
We evaluated the effectiveness of CRED in protecting
vulnerable programs against buffer overﬂow attacks with
two experiments. These experiments were performed
with the optimization of checking only for overruns in
strings.
Our ﬁrst experiment was carried out using the seven
vulnerable programs described earlier in Section 4.1.
Each program was instrumented with CRED and attacks
were launched on them. In each case, the attempted over-
ﬂow was detected and the program halted with an appro-
priate error message.
The second experiment
tested the effectiveness of
CRED on a testbed of 20 different buffer overﬂow at-
tacks developed by Wilander and Kamkar for evaluating
dynamic buffer overﬂow detectors[34]. The implemented
attacks used two overﬂow techniques. These are either to
overﬂow the buffer all the way to the target or to redi-
rect a pointer to the target. The targets are the return
address, function pointers, old base pointer and longjmp
buffers. The overﬂows are attempted on the stack, heap,
bss and data segments. ProPolice[12], StackGuard[10],
StackShield[30], and Libsafe and Libverify[2] were eval-
uated in the report. CRED successfully detected all of the
attacks in the testbed. ProPolice[12], the best of the tools
evaluated by Wilander and Kamkar[34], could only de-
tect 50% of the attacks in the testbed. These experiments
demonstrate that restricting bounds checking to strings
only is effective in thwarting buffer overﬂow attacks on
vulnerable programs.
4.4. Performance
CRED offers better backward compatibility than the
JK technique because it tracks out-of-bounds address val-
ues. To determine the performance overhead of tracking
out-of-bounds addresses, we compare the performance of
CRED, in its full bounds-checking mode, with JK. Only
the 8 programs with which JK is compatible were used for
this experiment. The experiment was conducted by mea-
suring execution times it took the instrumented executable
to run the test suite. For programs without a test suite, we
ran simple tests described in Figure 4. The results are pre-
sented in Figure 3. The results indicate that the worst rel-
ative performance experienced is a 15% slowdown in tar.
The differences are negligible in all other cases. We also
evaluated the space used to maintain OOB data structures.
ccrypt
gzip-1.2.4
monkey-0.7.1
polymorh-0.4.0
tar-1.13
WsMp3-0.0.10
wu-ftpd-2.6.1
zlib-1.13
JK(s) CRED (s)
23.00
26.93
0.18
0.19
5.60
6.00
0.39
0.39
0.76
0.66
1.48
1.48
33.40
33.40
0.11
0.11
Figure 3. Execution times of JK and CRED
(full bounds-checking mode) instrumenta-
tion for programs that are compatible with
JK.
The largest utilization observed at any given point in time
was 976 bytes for CRED-instrumented bison. This low
overhead was not surprising as it is unlikely that a correct
program would generate many out-of-bounds pointers at
any given point in time.
The second experiment evaluated the performance im-
provements resulting from strings-only checking for all
of the test programs. Except for those applications noted
in Figure 4, we evaluated the performance of the system
by timing the execution of the test suites. Apache and
OpenSSL are evaluated with their standard benchmarking
tools, httperf[25] for Apache and speed for openssl. The
experiments were carried out on a 2.4Ghz Intel Pentium
4, 1GB Linux system using gcc-3.0.4 compiler with -O2
optimization level. This machine also ran the server in
experiments involving the Apache, monkey and WsMp3
servers, while the client ran on a 600Mhz, dual CPU, Pen-