# Glibc2.32源码分析之exit部分
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
Green bananas in wholesale fresh market
## 前言
为了深入理解house of banana，决定分析一下源码，水平有限大佬勿喷，有错误的地方望提出指正，共同进步。
## 原理分析
###  调试代码
    #include 
    #include 
    int main(){
        puts("start...");
        exit(0);
        return 0;
    }//gcc exit_test.c -o exit_test
查看exit源码，这里用到了exit_function_list还有exit_function结构体
    struct exit_function_list
      {
        struct exit_function_list *next;
        size_t idx;
        struct exit_function fns[32];
      };
    struct exit_function
      {
        /* `flavour' should be of type of the `enum' above but since we need
           this element in an atomic operation we have to use `long int'.  */
        long int flavor;
        union
          {
        void (*at) (void);
        struct
          {
            void (*fn) (int status, void *arg);
            void *arg;
          } on;
        struct
          {
            void (*fn) (void *arg, int status);
            void *arg;
            void *dso_handle;
          } cxa;
          } func;
      };
我们在这里可以看到源码是直接调用__run_exit_handlers，可以在源码里看到对应的参数类型，同时gdb跟进去调试的时候也可以看到对应参数。
    void
    exit (int status)
    {
      __run_exit_handlers (status, &__exit_funcs, true);
    }
    libc_hidden_def (exit)//位置在stdlib/exit.c
对应源码，我们可以看到，因为`run_dtors`为1，所以函数会先调用`__call_tls_dtors`函数。
    __run_exit_handlers (int status, struct exit_function_list **listp,
                 bool run_list_atexit, bool run_dtors)
    {
      /* First, call the TLS destructors.  */
    #ifndef SHARED
      if (&__call_tls_dtors != NULL)
    #endif
        if (run_dtors)
          __call_tls_dtors ();
     .......
### __call_tls_dtors遍历tls_dtor_list调用函数
查看`__call_tls_dtors`源码，同时`gdb`跟进`__call_tls_dtors`。里面有一个`dtor_list`结构体定义的`tls_dtor_list`指针，`__call_tls_dtors`这个函数的作用就是遍历`tls_dtor_list`结构体链表，每次遍历都会用到`tls_dtor_list`里的`func`，将`tls_dtor_list`里的obj作为第一个参数，这里其实也可以进行利用，只要将`tls_dtor_list`覆盖成我们的堆地址，便可以控制调用函数和其参数。
    struct dtor_list
    {
      dtor_func func;
      void *obj;
      struct link_map *map;
      struct dtor_list *next;
    };
    static __thread struct dtor_list *tls_dtor_list;
    static __thread void *dso_symbol_cache;
    static __thread struct link_map *lm_cache;
    void
    __call_tls_dtors (void)
    {
      while (tls_dtor_list)
        {
          struct dtor_list *cur = tls_dtor_list;
          dtor_func func = cur->func;
    #ifdef PTR_DEMANGLE
          PTR_DEMANGLE (func);
    #endif
          tls_dtor_list = tls_dtor_list->next;
          func (cur->obj);
          /* Ensure that the MAP dereference happens before
         l_tls_dtor_count decrement.  That way, we protect this access from a
         potential DSO unload in _dl_close_worker, which happens when
         l_tls_dtor_count is 0.  See CONCURRENCY NOTES for more detail.  */
          atomic_fetch_add_release (&cur->map->l_tls_dtor_count, -1);
          free (cur);
        }
    }
###  循环处理使用“atexit”和“on_exit”注册的函数。
在大概读了整个流程后，发现整个循环（两层循环）都只执行了一次；因为cur->next==null且cur->idx为1；在第一次`while
(cur->idx > 0)`里有`--cur->idx`的操作，所以循环一次；然后在循环退出的时候；`*listp =
cur->next;.....cur = *listp;`使得在第一次`while (true)`的循环后，第二次循环开始的时候`if (cur ==
NULL){......break}`；退出循环。
     /* We do it this way to handle recursive calls to exit () made by
         the functions registered with `atexit' and `on_exit'. We call
         everyone on the list and use the status value in the last
         exit (). */
      while (true)
        {
          struct exit_function_list *cur;
          __libc_lock_lock (__exit_funcs_lock);
        restart:
          cur = *listp;
          if (cur == NULL)
        {
          /* Exit processing complete.  We will not allow any more
             atexit/on_exit registrations.  */
          __exit_funcs_done = true;
          __libc_lock_unlock (__exit_funcs_lock);
          break;
        }
          while (cur->idx > 0)
        {
              struct exit_function *const f = &cur->fns[--cur->idx];
    .......
         }
            *listp = cur->next;
          if (*listp != NULL)
        /* Don't free the last element in the chain, this is the statically
           allocate element.  */
        free (cur);
          __libc_lock_unlock (__exit_funcs_lock);
       }
可以gdb动调看一下
    pwndbg> p cur
    $1 = (struct exit_function_list *) 0x7ffff7fa2bc0 
    pwndbg> p *(struct exit_function_list *) 0x7ffff7fa2bc0
    $2 = {
      next = 0x0,
      idx = 1,
      fns = {{
          flavor = 4,
          func = {
            at = 0x21d4735c8b0c67e2,
            on = {
              fn = 0x21d4735c8b0c67e2,
              arg = 0x0
            },
            cxa = {
              fn = 0x21d4735c8b0c67e2,
              arg = 0x0,
              dso_handle = 0x0
            }
          }
        }, {
          flavor = 0,
          func = {
            .......
          }
        } }
    }
整个循环源代码如下
    ......
    while (cur->idx > 0)
        {
          struct exit_function *const f = &cur->fns[--cur->idx];
          const uint64_t new_exitfn_called = __new_exitfn_called;
          /* Unlock the list while we call a foreign function.  */
          __libc_lock_unlock (__exit_funcs_lock);
          switch (f->flavor)
            {
              void (*atfct) (void);
              void (*onfct) (int status, void *arg);
              void (*cxafct) (void *arg, int status);
            case ef_free:
            case ef_us:
              break;
            case ef_on:
              onfct = f->func.on.fn;
    #ifdef PTR_DEMANGLE
              PTR_DEMANGLE (onfct);
    #endif
              onfct (status, f->func.on.arg);
              break;
            case ef_at:
              atfct = f->func.at;
    #ifdef PTR_DEMANGLE
              PTR_DEMANGLE (atfct);
    #endif
              atfct ();
              break;
            case ef_cxa:
              /* To avoid dlclose/exit race calling cxafct twice (BZ 22180),
             we must mark this function as ef_free.  */
              f->flavor = ef_free;
              cxafct = f->func.cxa.fn;
    #ifdef PTR_DEMANGLE
              PTR_DEMANGLE (cxafct);
    #endif
              cxafct (f->func.cxa.arg, status);
              break;
            }
          /* Re-lock again before looking at global state.  */
          __libc_lock_lock (__exit_funcs_lock);
          if (__glibc_unlikely (new_exitfn_called != __new_exitfn_called))
            /* The last exit function, or another thread, has registered
               more exit functions.  Start the loop over.  */
            goto restart;
        }
    ......
在循环里定义了一个`exit_function`结构体f，为`exit_function`结构体数组cur->fns里的第一个`exit_function`结构体，而且可以通过gdb调试看到此时的`f->flavor`为4，ef_cxa（在stdlib/exit.h里定义了）为4。根据注释里讲的，为了避免`dlclose/exit`争用两次调用`cxafct`，所以将`exit_function`结构体里的f->flavor置为`ef_free`，即置为0。然后`cxafct`就赋值为`0xb685d3b1e02215a8`（每次程序运行的时候都是不一样的）
    pwndbg> p *cur
    $6 = {
      next = 0x0,
      idx = 0,
      fns = {{
          flavor = 4,
         .........
        }, {
          flavor = 0,
          func = {
            at = 0x0,
          ..........
          }
        } }
    }
    enum
    {
      ef_free,    /* `ef_free' MUST be zero!  */
      ef_us,    //2
      ef_on,    //3
      ef_at,    //4
      ef_cxa    //5
    };//位置在stdlib/exit.h
然后紧接着就是通过`PTR_DEMANGLE`处理`cxafct`，成功解析`_di_fini`函数
    #  define PTR_DEMANGLE(var)    asm ("ror $2*" LP_SIZE "+1, %0\n"          \
                         "xor %%fs:%c2, %0"                  \
                         : "=r" (var)                  \
                         : "0" (var),                  \
                           "i" (offsetof (tcbhead_t,          \
                                  pointer_guard)))
    # endif
调用前
调用后
可以看到这里的`cxafct`转换成了`_dl_fini`地址，然后就是我们house of banana所用到的函数`_dl_fini`。
    ....
    cxafct (arg, status);//_dl_fini(0,0);
    ....
###  进入_dl_fini函数
然后就是进入这个`_dl_fini`函数，看一下源代码
    void
    _dl_fini (void)
    {
      /* Lots of fun ahead.  We have to call the destructors for all still
         loaded objects, in all namespaces.  The problem is that the ELF
         specification now demands that dependencies between the modules
         are taken into account.  I.e., the destructor for a module is
         called before the ones for any of its dependencies.
         To make things more complicated, we cannot simply use the reverse
         order of the constructors.  Since the user might have loaded objects
         using `dlopen' there are possibly several other modules with its
         dependencies to be taken into account.  Therefore we have to start
         determining the order of the modules once again from the beginning.  */
      /* We run the destructors of the main namespaces last.  As for the
         other namespaces, we pick run the destructors in them in reverse
         order of the namespace ID.  */
    #ifdef SHARED
      int do_audit = 0;
     again:
    #endif
      for (Lmid_t ns = GL(dl_nns) - 1; ns >= 0; --ns)
        {
          /* Protect against concurrent loads and unloads.  */
          __rtld_lock_lock_recursive (GL(dl_load_lock));
          unsigned int nloaded = GL(dl_ns)[ns]._ns_nloaded;
          /* No need to do anything for empty namespaces or those used for
         auditing DSOs.  */
          if (nloaded == 0
    #ifdef SHARED
          || GL(dl_ns)[ns]._ns_loaded->l_auditing != do_audit
    #endif
          )
        __rtld_lock_unlock_recursive (GL(dl_load_lock));
          else
        {
          /* Now we can allocate an array to hold all the pointers and
             copy the pointers in.  */
          struct link_map *maps[nloaded];
          unsigned int i;
          struct link_map *l;
          assert (nloaded != 0 || GL(dl_ns)[ns]._ns_loaded == NULL);
          for (l = GL(dl_ns)[ns]._ns_loaded, i = 0; l != NULL; l = l->l_next)
            /* Do not handle ld.so in secondary namespaces.  */
            if (l == l->l_real)
              {
            assert (i l_idx = i;