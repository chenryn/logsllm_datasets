      fastbins.
    */
当设置 `TRIM_FASTBINS=1` fast bin 会与相邻的 top chunk 进行合并
    λ : cat test5.c
    #include
    #include
    void main()
    {
        void *m1 = malloc(500);
        void *m2 = malloc(40);
        malloc(1);
        void *m3 = malloc(80);
        free(m1);
        free(m2);
        void *m4 = malloc(40);
        free(m3);
        void *m5 = malloc(80);
        printf("m1, %p\n",m1);
        printf("m2, %p\n",m2);
        printf("m3, %p\n",m3);
        printf("m4, %p\n",m4);
        printf("m5, %p\n",m5);
    }
    // result:
    λ : gcc -g -o test5 test5.c && ./test5
    m1, 0x8b1010
    m2, 0x8b1210
    m3, 0x8b1260
    m4, 0x8b1210
    m5, 0x8b1260
* * *
下面的例子表明 small bin 在释放后会相邻合并的例子.
    #include
    #include
    void main()
    {
      void *m1 = malloc(24);
      int t = 0;
      void * ms[200];
      for(t = 0; t 
    #include
    void main()
    {
            void *m0 = malloc(24);
            void *m1 = malloc(24);
            void *m2 = malloc(0x200);
            void *m3 = malloc(0x100);
            void *m4 = malloc(24);
            void *m5 = malloc(24);
            malloc(121);
            free(m0);
            free(m1);
            free(m2);
            free(m3);
            free(m4);
            free(m5);
            malloc(0x350);
            void *m6 = malloc(0x360);
            malloc(1210); // 触发 Fastbins 合并
            void *m7 = malloc(0x360);
            void *m8 = malloc(24);
            printf("m0,%p\n", m0);
            printf("m1,%p\n", m1);
            printf("m2,%p\n", m2);
            printf("m3,%p\n", m3);
            printf("m4,%p\n", m4);
            printf("m5,%p\n", m5);
            printf("m6,%p\n", m6);
            printf("m7,%p\n", m7);
            printf("m8,%p\n", m8);
    }
    result:
    λ : gcc -g -o test3 test3.c && ./test3
    m0,0x1bf7010
    m1,0x1bf7030
    m2,0x1bf7050
    m3,0x1bf7260
    m4,0x1bf7370
    m5,0x1bf7390
    m6,0x1bf77a0
    m7,0x1bf7010
    m8,0x1bf7380
* * *
下面举例说明, 当 small bins 和 large bins 没有找到对应合适 size 的 Bin, 需要切割的情况.
    #include 
    #include 
    void main()
    {
        void * m1 = malloc(0x200);
        malloc(121);
        void * m2 = malloc(0x401);
        malloc(121);
        free(m2);
        void * m3 = malloc(24);
        free(m1);
        void * m4 = malloc(24);
        printf("m1, %p\n", m1);
        printf("m2, %p\n", m2);
        printf("m3, %p\n", m3);
        printf("m4, %p\n", m4);
        printf("sizeof(size_t) = %ld\n", sizeof(size_t));
    }
    result:
    λ : gcc -g -o test1 test1.c && ./test1
    m1, 0x1a66010
    m2, 0x1a662b0
    m3, 0x1a662b0 //切割 small bins
    m4, 0x1a66010 //切割 large bins
    sizeof(size_t) = 8
## exploit 在 ptmalloc 中
首先明确大部分的关注点, 是在 **leak infomation** 和 **aa4bmo**.
对于 leak infomation, 需要所 dump 的地址内存放关键信息, 比如: 释放后的 chunk 的 fd 和 bk.
对于 aa4bmo, 这一块在另一篇《PWN之堆触发》有完善的介绍和总结.
下面的一些分析实例会用到 heap 的分析插件, 并且会提到一些具体的实践以对应之前的理论.
#### Leak Information (泄露关键信息)
Q: 什么是关键信息?
A: libc 地址, heap 地址
通过 ptmalloc 获得的内存 chunk 在释放后会变成上面提到的几种缓存类型, 这里主要提一下 Fastbins, Bins 能够泄漏什么关键信息.
分配区 `main_arena` 是已经初始化静态全局变量存放在 `libc.so.6` 的 `.data` 位置, 可以通过 `main_arena`
泄露 libc 的基址.
下面是一个关于 Fastbins 的例子, Fastbins 是单向链表, 通过 `fd` 指针进行遍历, 每次插入链表头位置, 可以通过已经释放的
Fastbin chunk 的 `fd` 指针 dump 到 heap 地址.
    #include                                                                                                                                                                                                  
    #include                                                                                                                                                                                                 
    #include                                                                                                                                                                                                 
    void main()                                                                                                                                                                                                        
    {                                                                                                                                                                                                                  
        void * m1 = malloc(0x80-8);                                                                                                                                                                                    
        void * m2 = malloc(0x80-8);                                                                                                                                                                                    
        memset(m1, 65, 0x80-8);                                                                                                                                                                                        
        memset(m2, 65, 0x80-8);                                                                                                                                                                                        
        malloc(1);                                                                                                                                                                                                     
        free(m1);                                                                                                                                                                                                      
        free(m2);                                                                                                                                                                                                      
        printf("m1: %p\n", m1);                                                                                                                                                                                        
        printf("m2: %p\n", m2);                                                                                                                                                                                        
        printf("sizeof(size_t): %ld\n", sizeof(size_t));                                                                                                                                                               
    }
    # 主分配区
    (gdb) P &main_arena 
    $3 = (struct malloc_state *) 0x7ffff7dd1b20 
    (gdb) p main_arena 
    $2 = {mutex = 0, flags = 0, fastbinsY = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x602080, 0x0, 0x0, 0x0}, top = 0x602120, last_remainder = 0x0, bins = {...more... }, binmap = {0, 0, 0, 0}, next = 0x7ffff7dd1b20 , next_free = 0x0, attached_threads = 1, system_mem = 135168, max_system_mem = 135168}
    # 同上
    (gdb) heap
    ===================================Heap Dump===================================
    Arena(s) found:
             arena @ 0x7ffff7dd1b20
    # Fastbins 在释放后, P 标志位不会被清空
    (gdb) heap -l
    ===================================Heap Dump===================================
              ADDR             SIZE         STATUS
    sbrk_base 0x602000
    chunk     0x602000         0x80         (inuse)
    chunk     0x602080         0x80         (inuse)