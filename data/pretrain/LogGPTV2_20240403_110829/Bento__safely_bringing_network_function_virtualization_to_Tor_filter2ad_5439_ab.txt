URL to download (we detail it in §7). Upon being invoked, Browser
starts an HTTPS client, autonomously fetches the URL, saves it to
a single digest file, and returns the file, padded to some multiple of
bytes. Such a program can be written in about four lines of Python
(see Appendix A).
Choosing Where to Run a Function Some Tor nodes opt into
acting as Bento boxes, who are willing to run functions on behalf
of other users. Like exit nodes, Bento boxes publicly specify a
“middlebox node policy” of what API calls they are (not) willing to
support. Alice searches the Tor directory for Bento boxes meeting
Browser’s criteria and chooses one at random. Alice then creates
a circuit to her chosen node and, with its permission, uploads and
executes the function.
Composing Functions To further thwart the attacker, Alice de-
cides to go offline completely during the website download by com-
posing two functions together, as shown in Figure 2. She instructs
the Browser function to also deploy, on a separate node, a simple
Dropbox function that "puts" and "gets" a data file. Browser then
Client1Upload and invoke functionInternetRun function3Deliver websiteTor circuitBrowserTor relay running Bento2Protect middlebox nodes from functions We must also pro-
tect the users who run the middlebox nodes. Much like how Tor
relays can express the destinations for which they wish to serve
as exit nodes, middlebox nodes should be able to express policies
over the actions they do and do not wish to perform on behalf of
other users. Our solution is middlebox node policies, which allow
middlebox operators to specify which system calls to permit, and
how many resources to provide to functions (see §5.5). We enforce
these policies by mediating access to all resources (see §5.3).
No Harm to Underlying Tor Deploying Bento should cause
no degradation to the existing anonymity properties of Tor. Our
functions run purely on top of Tor, and interface with it via the
Stem library (see §5.3).
No Extensions to Tor We aim to sit strictly on top of Tor, and
to require no additional user privileges, so as to support more
robust applications. Conversely, FAN [66] permits programmability
strictly within the confines of altering Tor itself. Such efforts are
complementary to Bento, and could be co-deployed.
5 BENTO DESIGN
Bento is a service that clients connect to using Tor. A Bento server
runs on the same machine as its companion Tor relay, but as its
goal is to not modify Tor, it runs as a separate process listening
on a separate port. Tor relays can provide access to their Bento
server by either allowing their exit node policy to connect to the
Bento server via localhost, or Bento may run as a hidden service.
Figure 3 presents an overview of Bento’s components.
5.1 Functions
At the core of Bento’s programmability are user-written and pro-
vided functions that they can run and interact with on specific Tor
relays called Bento servers. We have two competing goals with
functions: On the one hand, they should be expressive enough to
permit new, sophisticated features, services, and defenses. On the
other hand, they should also be restrained from running completely
arbitrary code on Tor relays or otherwise potentially compromising
Tor’s anonymity and security guarantees.
Bento addresses this by placing no inherent constraints on the
functions’ code2. Appendix A provides an example listing; functions
can essentially be arbitrary Python in our implementation. Rather
than enforce safety by limiting functions’ code itself, Bento servers
run functions in sandboxes, and enforce a set of policies specified
by the server operators detailing what they wish to allow functions
to do (e.g., some may not want to allow functions to write to disk).
This combination ensures that functions can remain precisely as
powerful as the Bento server operators are willing to let them be.
In the remainder of this section, we detail the aspects of the
Bento server that enable safe execution and negotiation of server
policies.
5.2 Bento Server
Bento servers spawn and manage a dedicated container for each
client’s function, and forward traffic to the appropriate container.
2The only constraint on functions in our implementation is that they be written in
Python.
Figure 2: Example of composing two functions: Browser runs
a web client to download a website, and Dropbox stores a piece of
data to later be fetched.
delivers the file to Dropbox rather than directly to Alice, allowing
her to visit the Dropbox node at any time to fetch the data.
From the perspective of an attacker who can sniff Alice’s link,
not only would she not provide activity that could be fingerprinted:
she would not appear to be online at all while the website was being
downloaded!
Why This Helps An attacker observing Alice’s communication
sees one small upload from Alice (when she installs and executes
the function), followed by a large download (the padded website).
Thus, because Alice is not actively involved during the download of
the website, the attacker cannot gain any of the informative traffic
dynamics that prior fingerprinting techniques require.
There are many other ways to combat website fingerprinting,
but all of them require changes to Tor, clients, or web servers—an
architecture like the one described here would greatly facilitate
development and deployment.
Are We Nuts? This example shows that a programmable Tor
would be useful, but is it worth the risk of Tor relay operators to
run unvetted code (from anonymous sources)? Is it safe for users
to run sensitive tasks on other users’ devices? Traditional NFV has
not had to address such issues, because network management is
typically not performed in adversarial settings. Addressing these
safety concerns (and hopefully opening up a new space to apply
NFV) is Bento’s central aim. We describe our design goals next.
4 BENTO GOALS
We identify five main goals that we believe are important for any
programmable anonymity network:
Expressiveness We wish to empower users to write (or use)
sophisticated, composable functions. To this end, we make use
of a high-level programming language (Python) with no inherent
limitations. To demonstrate Bento’s expressiveness, we implement
a wide range of functions in §9.
Protect functions from middlebox nodes We must protect
users’ functions against confidentiality and integrity attacks on
untrusted third-party middleboxes. This is similar to the large body
of work on making safe use of untrusted third-party compute re-
sources like cloud computing [20, 34, 57, 62, 71, 79] or even Tor
itself [48]. To achieve these, we employ recent advances in deploy-
ing legacy software in trusted secure enclaves [34] (see §5.4).
824
Client1Install Browser+DropboxInternetRun BrowserTor circuitsBrowser2Install Dropbox;Put data3DropboxFetchdata4Tor relay running BentoFigure 3: Design of a Bento middlebox node. Bento sits above an unmodified Tor, and augments it with programmable middleboxes to
the Tor network. (Purple arrows denote Tor traffic; orange arrows denote Bento traffic.)
Containers protect server operators from functions that (mali-
ciously or inadvertently) over-consume resources, access sensitive
files, or interfere with other functions running on the same machine.
Additionally, Bento servers expose (and mediate access to) inter-
faces to system resources, including an optional narrow interface
to the server’s Tor relay. We detail this in §5.3. Finally, Bento em-
powers its operators with the ability to control what sorts of tasks
they will perform on behalf of others. We describe these “middlebox
node policies” in §5.5.
Bento servers protect the confidentiality and integrity of a client’s
function and associated data from the untrusted Bento operator by
allowing them to execute in Intel SGX enclaves [6, 35, 54] within the
container. This has the added benefit of providing plausible denia-
bility to the Bento operators with respect to a function’s processing
of abusive content. We describe this in §5.4.
5.3 Container Management
Bento operators are responsible for providing container images.
This design choice allows operators basic control over the types of
functions that may run, and avoids the overhead of clients uploading
containers. The images themselves are not applications per se, but
rather servers that communicate with the Bento client to handle
the post-launch provisioning, loading, and execution of the client-
provided function.
Initializing and Shutdown When a Bento client connects to
a Bento server, it requests a container image. The server spawns
the container and returns to the client two tokens: an invocation
token and a shutdown token. From this point onward, the client
includes the invocation token in subsequent messages, and the
server forwards the messages to the corresponding server running
in the container.3
The Bento server terminates and reclaims the container’s re-
sources either when the container’s function terminates, or the
3We note that tokens can be blinded, especially with the use of an enclave, but we
leave that for future work.
client presents the shutdown token. The distinction between invo-
cation and shutdown tokens allows a client to share the invocation
token (and thus, use of the function) with other users while re-
taining exclusive shutdown rights. Regardless, Bento functions
fate-share with the middlebox nodes they run on, and thus must
assume that the function may ungracefully terminate at any time.
Sandboxing and Resource Accounting Bento servers use Linux’s
cgroup and namespace features to provide containers with a nomi-
nal amount of memory and limited space in a chrooted file system,
so that clients cannot access any files but their own. An operator
may further manage these resource limits in aggregate over all con-
tainer instances, ensuring that the co-resident Tor relay maintains
a set minimum portion of the machine’s total resources.
To ensure that functions cannot violate a Tor relay’s exit node
policies, the Bento server converts the exit node policies into anal-
ogous iptable rules, and applies these rules to each container. Note
that, if the relay does not wish to run as an exit node, then this
would similarly preclude all functions it runs from direct network
access, and functions would be strictly limited to communicating
via Tor circuits. Bento also permits operators to apply system call
filters in the form of seccomp policies [26] to disallow a function’s
use of specific system calls, such as fork and execve.
Container Interface to Tor Instance We envision policies that
middlebox node operators may wish to enforce that cannot be sat-
isfied using OS-level sandboxing techniques alone. For instance,
functions may use the popular Stem library [75] to programmat-
ically create circuits and launch hidden services. To permit safe,
shared access to Stem, Bento includes as part of its policy enforce-
ment layer a Stem “firewall” to which functions must connect (via
a local socket) to issue all Stem invocations. The firewall maintains
state about the circuits each function is allowed to access, and the
Stem routines the function may invoke.
825
Bento ServertorctlClientTor RelayOS SandboxBrowserConclaveFS ProtectOnion ProxyFunctionServertorctlServerTor NetworkInternetExit Node PolicyMB Node PolicyBentoMessagesTor TraﬃcchrootStorageStemFirewallCoverOS SandboxRelay Operator’s PreferencesThird-party AppsTor Relay Operator’s MachineUser’s MachineOnion ProxyBrowserPluginCoverPluginSOCKSUser Application(e.g., TorBrowser)Bento ClientSOCKS5.4 Standard Container Images
Although operators may advertise any image for running a client’s
function, we envision two standard images that collectively handle
a broad set of use cases.
Python container The Python container provides an execution
environment for a client-provided Python application. This con-
tainer targets cases where the client’s function does not process
sensitive information, and is Bento’s most direct analog to FAN’s
proposed use cases [66]. For instance, the Bento client and function
might further encapsulate the source-to-destination TLS stream
with a padding scheme to foil deanonymization attacks. This con-
tainer also allows non-sensitive network measurements, such as of
the latency or bandwidth to a Tor relay or destination server.
Python-OP-SGX container The Python-OP-SGX container is
similar to the Python container, but instead executes the Python
application, as well as an optional companion Onion Proxy, in
Intel SGX enclaves by using a library OS for running unmodified
applications in SGX [34, 80]. In this way, the container guarantees
the confidentiality and integrity of the application’s memory.
This container targets two broads use cases: (1) the function
is a specialized application-level proxy, such as a web proxy that
caches content for future client download or that transforms the
plaintext content so as to avoid fingerprinting attacks, or (2) the
function itself is a hidden service. Since a function, acting as a
hidden service, has keying material that it must share with a Tor
instance, the container cannot safely use the operator’s Tor instance
to manage the hidden service, and thus the container allows the
function to spawn a dedicated Onion Proxy.
Our implementation specifically makes use of conclaves (“con-
tainers of enclaves”) [34], which allow for arbitrary legacy applica-
tions to be deployed within a set of interconnected enclaves, where
some enclaves securely provide traditional OS services on behalf
of the enclaved application, such as an encrypted and integrity-
protected filesystem. In Figure 3, we refer to such an enclaved
filesystem as FS Protect.
FS Protect generates an ephemeral encryption key when the
filesystem is launched in an enclave; the container ensures that
the enclaved filesystem is the only writable filesystem available to
the function, and therefore that all filesystem writes are encrypted.
Prior to function execution, the Bento client attests the container’s
image and establishes a secure TLS channel to the container’s func-
tion loader; the Bento client then uploads the function, and any
associated data to copy to FS Protect, over this channel. In addition
to securing the client’s on disk content, FS Protect simultaneously
provides the Bento operator with plausible deniability in the event
that the function uses abusive content, as, much like Tor traffic, the
function’s execution and on-disk resources are unobservable by the
operator.
Attestation Before uploading its function, a Bento client gains
assurance that the Bento server is running correctly by using SGX’s
remote attestation feature [42] to verify that the application is truly
running inside an enclave as well as check the current TCB version
of the remote system to see if it has been patched against known
vulnerabilities. To assure a client that it is operating correctly, a
Bento box generates an attestation verification report when it first
loads the Bento server by creating a quote and sending it to the
Intel Attestation Service (IAS).4 Note that the only code needing
attestation is the Bento execution environment (including Python),
not the individual user functions.
We envision two paths for client verification of this attestation.
Traditionally, the server generates an attestation report and returns
the report to the client, who could then present the report to IAS for
verification. This can be done at any time before a client loads the
function, preventing any correlation between client and function
load. Alternatively, the Bento server can perform this verification
and, similar to OCSP stapling [1], return to the client both the report
itself as well as Intel’s verification of the report. Thus, Intel (and
others) only learns which relays are running conclaves (which is
already in the public directory).
5.5 Middlebox Node Policies
Allowing other users to run custom software on one’s own machine
has obvious risks, particularly in the context of an anonymous
network such as Tor. For any such architecture to be viable, it must
give users power to assert what they are and are not willing to do on
behalf of others. Tor itself runs into this challenge with respect to
exit nodes: not all users are willing to connect to any service on any
machine. Tor’s solution to this is exit node policies: fine-grained
policies of which IP addresses and ports it will or will not visit on
behalf of other Tor users.
We borrow this idea and introduce middlebox node policies. At
a high level, these are similar to exit node policies: middleboxes
specify what they are and are not willing to perform on behalf
of others. The primary difference is the set of actions the policies
themselves span.
Middlebox Node Policy Design Bento’s middlebox node poli-
cies are boolean values over the set of API calls that Bento exposes
to functions. Every system call and Stem library function that can
be exposed to functions is also specified in the middlebox node
policy. This is similar in spirit to how Android applications obtain
permissions: users can specify (to some extent) the resources the
applications may have access to, but beyond that are not able to
assert policy over the internal workings of the applications.
Our architecture’s design is not strictly bound to this specific
choice of policy space. There are alternative designs, such as requir-
ing that certain API calls be invoked only from functions within
an enclave, or incorporating taint tracking and restricting network
calls based on the flow of tainted data, and so on. Ultimately, we
believe that a more comprehensive discussion among the Tor de-
veloper and user communities will be necessary in finalizing the
policy space.
Disseminating Middlebox Node Policies We envision that mid-
dlebox node policies could be disseminated as part of the Tor direc-
tory, as with exit node policies. However, such integration with Tor
is not strictly necessary. To support immediate, incremental deploy-
ment, we have implemented a function that runs on a well-known
port that returns the node’s middlebox node policy, allowing users
to query Bento nodes to see what they support.
Function Manifest Files When a user sends a function to a
Bento server, the user includes the function’s manifest file, similar
4We will not go into the full details of the attestation process here but encourage the
interested reader to see [37].
826
in spirit to an Android app manifest. Upon receiving the manifest,
Bento compares it to its own middlebox node policy; if the manifest
asks for more permissions than the node’s policy permits, then
the function is rejected. Otherwise, the Bento server sets up the
execution environment, and constrains the sandbox or conclave to
permit only the specific API calls that the manifest file requested