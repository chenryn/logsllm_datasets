### 3.2 XML Schema

The W3C recommendation for XML Schema [36] is a language designed to describe the layout, semantics, and content of an XML document. A document is considered valid if it conforms to a specific schema. A schema consists of a content model, a vocabulary, and the data types used. The content model describes the document structure and the relationships between elements. The standard provides 19 primitive data types to define the allowed content of elements and attributes.

In the context of our evaluation of SAML-based XML Signature Wrapping (XSW) attacks, one critical element in XML Schema is the `any` element. This element allows the inclusion of any well-formed XML document within a declared content type. When an XML processor validates an element defined by an `any` element, the `processContents` attribute specifies the level of flexibility. For example, setting `processContents="lax"` instructs the schema validator to check against the given namespace. If no schema information is available, the content is considered valid. In the case of `processContents="skip"`, the XML processor does not validate the element at all.

### 3.3 SAML

SAML (Security Assertion Markup Language) is an XML-based standard for exchanging authentication and authorization statements about subjects [11]. Several profiles are defined in [10], with the most important being the Browser Single Sign-On (SSO) profile, which outlines how to use SAML with a web browser.

A SAML assertion has the structure illustrated in Figure 3. The issuing time of the assertion is specified in the `saml:IssueInstant` element. All attributes are required. The `saml:Issuer` element identifies the SAML authority (the Identity Provider, or IdP) that makes the claims in the assertion. The `saml:Subject` element defines the principal about whom the statements in the assertion are made. The `saml:*Statement` elements are used to specify user-defined statements relevant to the context of the SAML assertion.

To protect the integrity of the security claims made by the Issuer, the entire `saml:Assertion` element must be protected with a digital signature following the XML Signature standard. The SAML specification [11] requires that either the `saml:Assertion` element or an ancestor element must be referenced by the `Signature` element, using an enveloped XML Signature ([11], Section 5.4.1). Furthermore, Id-based referencing must be used ([11], Section 5.4.2), which can make the system vulnerable to XSW attacks.

In REST-based frameworks, the SAML assertion is typically placed within an enveloping `Response` element. In SOAP-based frameworks, the SAML assertions are inserted into the SOAP header (or the `Security` element within the SOAP header). For clarity, consider that the SAML assertions are signed using enveloped XML Signatures and are placed within a binding root element R (see Figure 4).

### 3.4 XML Signature Wrapping Attacks

XML documents containing XML Signatures are typically processed in two independent steps: signature validation and function invocation (business logic). If these modules have different views on the data, a new class of vulnerabilities known as XML Signature Wrapping (XSW) attacks [27, 23] can occur.

In these attacks, the adversary modifies the message structure by injecting forged elements without invalidating the XML Signature. The goal is to change the message so that the application logic and the signature verification module use different parts of the message. Consequently, the receiver verifies the XML Signature successfully, but the application logic processes the malicious element. The attacker thus bypasses the integrity protection and origin authentication provided by the XML Signature and can inject arbitrary content. Figure 5 illustrates a simple XSW attack on a SOAP message.

XSW attacks are similar to other classes of injection attacks like Cross-Site Scripting (XSS) or SQL Injection (SQLi): in all cases, the attacker tries to force different views on the data in security modules (e.g., Web Application Firewalls) and data processing modules (HTML parser, SQL engine).

### 4. XSW Attacks on SAML

#### 4.1 Threat Model

As a prerequisite, the attacker needs an arbitrary signed SAML message. This could be a single assertion A or a whole document D with an embedded assertion, and its lifetime can be expired. After obtaining such a message, the attacker modifies it by injecting malicious content, such as an evil assertion EA. In our model, we assume two types of adversaries, both weaker than a classical network-based attacker:

1. **Advacc**: This attacker registers as a user of an Identity Provider (IdP) and receives a valid signed SAML assertion A through normal interaction with the IdP. The attacker then adds additional claims EA about any other subject S and submits the modified document D' (A') to the Relying Party (RP).

2. **Advintc**: This adversary retrieves SAML assertions from the Internet but cannot read encrypted network traffic. This can be done by accessing transmitted data directly from unprotected networks (sniffing) or offline by analyzing proxy or browser caches. Since SAML assertions should be worthless once their lifetime expires, they may even be posted in technical discussion forums where Advintc can access them.

#### 4.2 Basic Attack Principle

As described in the previous section, XML Signatures can be applied to SAML assertions in different ways and placed in different elements. The only requirement is that the `Assertion` element or the protocol binding element (ancestor of `Assertion`) is signed using an enveloped signature with Id-based referencing. In this section, we analyze the usage of SAML assertions in different frameworks and the possibilities of inserting malicious content. Generally, SAML assertions and their signatures are implemented as depicted in Figure 6:

1. **First Usage**: Insert the XML Signature S1 as a child of the SAML assertion A1 and sign only the `Assertion` element A1. This type can be used independently of the underlying protocol (SOAP or REST).

2. **Second Usage**: Sign the entire protocol binding element R. The XML Signature can be placed into the SAML assertion A1 or directly into the protocol binding root element R. This kind of signature application is used in different SAML HTTP bindings, where the entire `Response` element is signed.

3. **Third Usage**: Use more than one XML Signature. The inner signature S1 protects the SAML assertion, and the outer signature S additionally secures the entire protocol message. This kind of signature application is used, for example, by the SimpleSAMLphp framework.

To apply XSW attacks to SAML assertions, the basic attack idea remains the same: the attacker creates new malicious elements and forces the assertion logic to process them, while the signature verification logic verifies the integrity and authenticity of the original content. In applications of the first signature type, the attacker only needs to create a new evil assertion EA. In the second and third signing types, the attacker also needs to create the entire evil root ER element, including the evil assertion.

#### 4.3 Attack Permutations

The attacker has many different possibilities for inserting the malicious and original content. To do this, the attacker must address the following questions:

- Which element is processed by the assertion logic?
- At which level in the XML message tree should the malicious content and the original signed data be included?
- Which `Assertion` element is processed by the assertion logic?
- Which element is used for signature verification?

By answering these questions, we can define different attack patterns, where the original and malicious elements can be permuted (Figure 7). This provides a complete list of attack vectors, which served as a guideline for our investigations.

For the following explanations, we only consider signing type 1) defined in Figure 6. In this signing type, only the `Assertion` element is referenced.

The attack permutations are depicted in Figure 7. Additionally, we analyze their SAML standard conformance and the signature validity:

1. **Malicious assertion, original assertion, and signature on the same message level**: This kind of XML message can have six permutations. None of them is SAML standard-compliant since the XML Signature does not sign its parent element. The digest value over the signed elements in all messages can be correctly validated. This type of attack message can be used if the server does not check SAML conformance.

2. **All three elements inserted at different message levels, as child elements of each other**: This results in six permutations. Messages 2-a and 2-b show examples of SAML standard-conforming and cryptographically valid messages. In both cases, the signature element references its parentâ€”the original assertion A1. Message 2-c illustrates a message that is not SAML standard-compliant because the signature signs its child element. Nevertheless, the message is cryptographically valid. Lastly, message 2-d shows an example of an invalid message since the signature would be verified over both assertions. Generally, if the signature is inserted as a child of the root element, the message would also be either invalid or not SAML standard-compliant.

3. **Insertion of these three elements using two message levels**: Message 3-a shows an example of a valid and SAML-compliant document. By constructing message 3-b, the signature element was moved to the new malicious assertion. Since it references the original element, it is still valid but does not conform to the SAML standard.

The analysis shown above can similarly be applied to messages with different signing types (see Figure 6).

### 5. Practical Evaluation

We evaluated the above-defined attacks on real-world systems and frameworks introduced in Section 2. In this section, we present the results.

#### 5.1 Signature Exclusion Attacks

We start the presentation of our results with the simplest attack type called the Signature exclusion attack. This attack relies on poor implementation of a server's security logic, which checks the signature validity only if the signature is included. If the security logic does not find the `Signature` element, it simply skips the validation step.

The evaluation showed that three SAML-based frameworks were vulnerable to these attacks: Apache Axis2 Web Services Framework, JOSSO, and the Java-based implementation of SAML 2.0 in Eduserv (other versions of SAML and the C-implementation in Eduserv were not affected).

By applying this attack on JOSSO and Eduserv, the attacker had to remove the `Signature` element from the message, as the framework tried to validate it if it was found. On the other hand, the Apache Axis2 framework did not validate the `Signature` element over the SAML assertion at all, even if it was included in the message. Apache Axis2 validated only the signature over the SOAP body and the `Timestamp` element. The signature protecting the SAML assertion, which is included separately in the `Assertion` element, was completely ignored.

#### 5.2 Refined Signature Wrapping

Ten out of 14 systems were prone to refined XSW attacks. Classified on the three different signature application types given in Figure 6, five SAML-based systems failed in validating Type 1 messages, where only the assertion is protected by an XML Signature. Figure 8 depicts the XML tree-based illustration of the found XSW variants. Starting from left to right, Higgins, Apache Axis2, and the IBM XS 40 Security Gateway were outfoxed by the two depicted permutations.

In the first variant, it was sufficient to inject an evil assertion with a different `Id` attribute in front of the original assertion. As the SAML standard allows multiple assertions in one protocol element, the XML Schema validation still succeeded. The second attack type embedded the original assertion as a child element into the evil assertion EA. In both cases, the XML Signature was still standard-compliant, as enveloped signatures were applied. This was broken in the case of OIOSAML by using detached signatures. In this variant, the original `Signature` element was moved into the EA, which was inserted before the legitimate assertion. The last shown permutation was applicable to the cloud services of Salesforce and the OpenAM framework. In this case, the genuine assertion was placed into the original `Signature` element. As both implementations apply XML Schema for validating the schema conformance of a SAML message, this was done by injecting them into the `Object` element, which allows arbitrary content. Again, this is not compliant with the SAML standard because this mutation transforms the enveloped to an enveloping signature. Finally, the OneLogin Toolkits were prone to all shown attack variants as they did not apply XML Schema, validated the XML Signature independently of its semantic occurrence, and used a fixed reference to the processed SAML claims (`/samlp:Response/saml:Assertion[1]`).

We found three susceptible implementations that applied Type 2 messages, where the entire message is protected by an XML Signature. We depict the attacks on these implementations in Figure 9.

In the Guanxi and JOSSO implementations, the legitimate root element was inserted into the `Object` element in the original `Signature`. The `Signature` node was moved into the ER element, which also included the new evil assertion. In the case of WSO2, it was sufficient to place the original root element into the ER object. Naturally, one might expect that enforcing full document signing would eliminate XSW completely. The given examples demonstrate that this does not hold in practice. This highlights the vigilance required when implementing complex standards such as SAML.

Finally, we did not find vulnerable frameworks that applied Type 3 messages, where both the root and the assertion are protected by different signatures. Indeed, one legitimate reason is that most SAML implementations do not use Type 3 messages. In our practical evaluation, only SimpleSAMLphp applied them by default. Nevertheless, this does not mean that XSW is not applicable to this message type in practice.

#### 5.3 OpenSAML Vulnerability

The attack vectors described above did not work against the widely deployed OpenSAML library. The reason for this is...