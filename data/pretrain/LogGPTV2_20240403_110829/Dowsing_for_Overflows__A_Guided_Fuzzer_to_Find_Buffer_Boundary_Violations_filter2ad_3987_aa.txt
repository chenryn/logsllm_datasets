title:Dowsing for Overflows: A Guided Fuzzer to Find Buffer Boundary Violations
author:Istv&apos;an Haller and
Asia Slowinska and
Matthias Neugschwandtner and
Herbert Bos
Dowsing for Overﬂows: A Guided Fuzzer to Find 
Buffer Boundary Violations
Istvan Haller and Asia Slowinska, VU University Amsterdam; 
Matthias Neugschwandtner, Vienna University of Technology; 
Herbert Bos, VU University Amsterdam
Open access to the Proceedings of the 22nd USENIX Security Symposium is sponsored by USENIXThis paper is included in the Proceedings of the 22nd USENIX Security Symposium.August 14–16, 2013 • Washington, D.C., USAISBN 978-1-931971-03-4Dowsing for overﬂows: A guided fuzzer to ﬁnd buffer boundary violations
Istvan Haller
Asia Slowinska
Matthias Neugschwandtner
VU University Amsterdam
VU University Amsterdam
Vienna University of Technology
Herbert Bos
VU University Amsterdam
Abstract
Dowser is a ‘guided’ fuzzer that combines taint tracking,
program analysis and symbolic execution to ﬁnd buffer
overﬂow and underﬂow vulnerabilities buried deep in a
program’s logic. The key idea is that analysis of a pro-
gram lets us pinpoint the right areas in the program code
to probe and the appropriate inputs to do so.
Intuitively, for typical buffer overﬂows, we need con-
sider only the code that accesses an array in a loop, rather
than all possible instructions in the program. After ﬁnd-
ing all such candidate sets of instructions, we rank them
according to an estimation of how likely they are to con-
tain interesting vulnerabilities. We then subject the most
promising sets to further testing. Speciﬁcally, we ﬁrst
use taint analysis to determine which input bytes inﬂu-
ence the array index and then execute the program sym-
bolically, making only this set of inputs symbolic. By
constantly steering the symbolic execution along branch
outcomes most likely to lead to overﬂows, we were able
to detect deep bugs in real programs (like the nginx
webserver, the inspircd IRC server, and the ffmpeg
videoplayer). Two of the bugs we found were previ-
ously undocumented buffer overﬂows in ffmpeg and the
poppler PDF rendering library.
1
Introduction
We discuss Dowser, a ‘guided’ fuzzer that combines taint
tracking, program analysis and symbolic execution, to
ﬁnd buffer overﬂow bugs buried deep in the program’s
logic.
Buffer overﬂows are perennially in the top 3 most dan-
gerous software errors [12] and recent studies suggest
this will not change any time soon [41, 38]. There are
two ways to handle them. Either we harden the software
with memory protectors that terminate the program when
an overﬂow occurs (at runtime), or we track down the
vulnerabilities before releasing the software (e.g., in the
testing phase).
Memory protectors include common solutions like
shadow stacks and canaries [11], and more elaborate
compiler extensions like WIT [3]. They are effective in
preventing programs from being exploited, but they do
not remove the overﬂow bugs themselves. Although it
is better to crash than to allow exploitation, crashes are
undesirable too!
Thus, vendors prefer to squash bugs beforehand and
typically try to ﬁnd as many as they can by means of fuzz
testing. Fuzzers feed programs invalid, unexpected, or
random data to see if they crash or exhibit unexpected be-
havior1. As an example, Microsoft made fuzzing manda-
tory for every untrusted interface for every product, and
their fuzzing solution has been running 24/7 since 2008
for a total of over 400 machine years [18].
Unfortunately,
the effectiveness of most fuzzers is
poor and the results rarely extend beyond shallow bugs.
Most fuzzers take a ‘blackbox’ approach that focuses
on the input format and ignores the tested software tar-
get. Blackbox fuzzing is popular and fast, but misses
many relevant code paths and thus many bugs. Blackbox
fuzzing is a bit like shooting in the dark: you have to be
lucky to hit anything interesting.
Whitebox fuzzing, as implemented in [18, 7, 10], is
more principled. By means of symbolic execution, it ex-
ercises all possible execution paths through the program
and thus uncovers all possible bugs – although it may
take years to do. Since full symbolic execution is slow
and does not scale to large programs, it is hard to use it to
ﬁnd complex bugs in large programs [7, 10]. In practice,
the aim is therefore to ﬁrst cover as much unique code as
possible. As a result, bugs that require a program to ex-
ecute the same code many times (like buffer overﬂows)
are hard to trigger except in very simple cases.
Eventual completeness, as provided by symbolic ex-
ecution, is both a strength and a weakness, and in this
paper, we evaluate the exact opposite strategy. Rather
1See http://www.fuzzing.org/ for a collection of available
fuzzers
1
USENIX Association  
22nd USENIX Security Symposium  49
than testing all possible execution paths, we perform spot
checks on a small number of code areas that look likely
candidates for buffer overﬂow bugs and test each in turn.
The drawback of our approach is that we execute a
symbolic run for each candidate code area—in an itera-
tive fashion. Moreover, we can discover buffer overﬂows
only in the loops that we can exercise. On the other hand,
by homing in on promising code areas directly, we speed
up the search considerably, and manage to ﬁnd compli-
cated bugs in real programs that would be hard to ﬁnd
with most existing fuzzers.
Contributions The goal we set ourselves was to de-
velop an efﬁcient fuzzer that actively searches for buffer
overﬂows directly. The key insight is that careful analy-
sis of a program lets us pinpoint the right places to probe
and the appropriate inputs to do so. The main contribu-
tion is that our fuzzer directly zooms in on these buffer
overﬂow candidates and explores a novel ‘spot-check’
approach in symbolic execution.
To make the approach work, we need to address two
main challenges. The ﬁrst challenge is where to steer
the execution of a program to increase the chances of
ﬁnding a vulnerability. Whitebox fuzzers ‘blindly’ try to
execute as much of the program as possible, in the hope
of hitting a bug eventually. Instead, Dowser uses infor-
mation about the target program to identify code that is
most likely to be vulnerable to a buffer overﬂow.
For instance, buffer overﬂows occur (mostly) in code
that accesses an array in a loop. Thus, we look for such
code and ignore most of the remaining instructions in the
program. Furthermore, Dowser performs static analysis
of the program to rank such accesses. We will evalu-
ate different ranking functions, but the best one so far
ranks the array accesses according to complexity. The
intuition is that code with convoluted pointer arithmetic
and/or complex control ﬂow is more prone to memory
errors than straightforward array accesses. Moreover, by
focusing on such code, Dowser prioritizes bugs that are
complicated—typically, the kind of vulnerabilities that
static analysis or random fuzzing cannot ﬁnd. The aim
is to reduce the time wasted on shallow bugs that could
also have been found using existing methods. Still, other
rankings are possible also, and Dowser is entirely agnos-
tic to the ranking function used.
The second challenge we address is how to steer the
execution of a program to these “interesting” code areas.
As a baseline, we use concolic execution [43]: a com-
bination of concrete and symbolic execution, where the
concrete (ﬁxed) input starts off the symbolic execution.
In Dowser, we enhance concolic execution with two op-
timizations.
First, we propose a new path selection algorithm.
As we saw earlier, traditional symbolic execution aims
at code coverage—maximizing the fraction of individ-
ual branches executed [7, 18].
In contrast, we aim
for pointer value coverage of selected code fragments.
When Dowser examines an interesting pointer derefer-
ence, it steers the symbolic execution along branches that
are likely to alter the value of the pointer.
Second, we reduce the amount of symbolic input as
much as we can. Speciﬁcally, Dowser uses dynamic
taint analysis to determine which input bytes inﬂuence
the pointers used for array accesses. Later, it treats only
these inputs as symbolic. While taint analysis itself is not
new, we introduce novel optimizations to arrive at a set
of symbolic inputs that is as accurate as possible (with
neither too few, nor too many symbolic bytes).
In summary, Dowser is a new fuzzer targeted at ven-
dors who want to test their code for buffer overﬂows and
underﬂows. We implemented the analyses of Dowser as
LLVM [23] passes, while the symbolic execution step
employs S2E [10]. Finally, Dowser is a practical solu-
tion. Rather than aiming for all possible security bugs, it
speciﬁcally targets the class of buffer overﬂows (one of
the most, if not the most, important class of attack vec-
tors for code injection). So far, Dowser found several
real bugs in complex programs like nginx, ffmpeg, and
inspircd. Most of them are extremely difﬁcult to ﬁnd
with existing symbolic execution tools.
Assumptions and outline Throughout this paper, we
assume that we have a test suite that allows us to reach
the array accesses. Instructions that we cannot reach, we
cannot test. In the remainder, we start with a big picture
and the running example (Section 2). Then, we discuss
the three main components of Dowser in turn: the se-
lection of interesting code fragments (Section 3), the use
of dynamic taint analysis to determine which inputs in-
ﬂuence the candidate instructions (Section 4), and our
approach to nudge the program to trigger a bug during
symbolic execution (Section 5). We evaluate the system
in Section 6, discuss the related projects in Section 7. We
conclude in Section 8.
2 Big picture
The main goal of Dowser is to manipulate the pointers
that instructions use to access an array in a loop, in the
hope of forcing a buffer overrun or underrun.
2.1 Running example
Throughout the paper, we will use the function in Fig-
ure 1 to illustrate how Dowser works. The example is
a simpliﬁed version of a buffer underrun vulnerability in
the nginx-0.6.32 web server [1]. A specially crafted
50  22nd USENIX Security Symposium 
USENIX Association
2
A buffer underrun vulnerability in nginx
  [1]
  [2]
  [3]
  [4]
  [5]
  [6]
  [7]
  [8]
  [9]
[10]
[11]
[12]
[13]
[14]
[15]
[16]
[17]
[18]
[19]
[20]
[21]
[22]
[23]
[24]
[25]
[26]
[27]
[28]
[29]
[30]
[31]
[32]
[33]
[34]
[35]
[36]
[37]
[38]
int ngx_http_parse_complex_uri(ngx_http_request_t *r)
{
    state = sw_usual;
    u_char* p = r->uri_start;   // user input
    u_char* u = r->uri.data; // store normalized uri here 
    u_char ch = *p++;            // the current character
    while (p uri_end) {
        switch (state) { 
              case sw_usual: 
                 if (ch == '/') 
                     state = sw_slash; *u++ = ch; 
                 else if /* many more options here */
                 ch = *p++; break; 
             case sw_slash: 
                 if (ch == '/') 
                     *u++ = ch; 
                 else if (ch == '.') 
                      state = sw_dot; *u++ = ch;
                 else if /* many more options here */
                 ch = *p++; break; 
             case sw_dot: 
                 if (ch == '.') 
                     state = sw_dot_dot; *u++ = ch; 
                 else if /* many more options here */
                 ch = *p++; break; 
             case sw_dot_dot: 
                 if (ch == '/') 
                     state = sw_slash; u -=4; 
                   while (*(u-1) != '/') u--; 
                 else if /* many more options here */
                 ch = *p++; break; 
          } 
    }  
} 
Nginx is a web server—in terms of market share across the million busiest sites,
it ranks third in the world. At the time of writing, it hosts about 22 million domains
worldwide. Versions prior to 0.6.38 had a particularly nasty vulnerability [1].
nginx
request,
the
parsing
When
receives
an HTTP
function
nginx http parse complex uri, ﬁrst normalizes a uri path in p=r->uri start
(line 4), storing the result in a heap buffer pointed to by u=r->uri.data (line
5). The while-switch implements a state machine that consumes the input one
character at a time, and transform it into a canonical form in u.
The source of the vulnerability is in the sw dot dot state. When provided with a
carefully crafted path, nginx wrongly sets the beginning of u to a location some-
where below r->uri.data. Suppose the uri is "//../foo". When p reaches
"/foo", u points to (r->uri.data+4), and state is sw dot dot (line 30). The
routine now decreases u by 4 (line 32), so that it points to r->uri.data. As long
as the memory below r->uri.data does not contain the character "/", u is fur-
ther decreased (line 33), even though it crosses buffer boundaries. Finally, the user
provided input ("foo") is copied to the location pointed to by u.
In this case, the overwritten buffer contains a pointer to a function, which will
be eventually called by nginx. Thus the vulnerability allows attackers to modify a
function pointer, and execute an arbitrary program on the system.
It is a complex bug that is hard to ﬁnd with existing solutions. The many condi-
tional statements that depend on symbolic input are problematic for symbolic execu-
tion, while input-dependent indirect jumps are also a bad match for static analysis.
Fig. 1: A simpliﬁed version of a buffer underrun vulnerability in nginx.
input tricks the program into setting the u pointer to a lo-
cation outside its buffer boundaries. When this pointer is
later used to access memory, it allows attackers to over-
write a function pointer, and execute arbitrary programs
on the system.
Figure 1 presents only an excerpt from the original
function, which in reality spans approximately 400 lines
of C code. It contains a number of additional options in
the switch statement, and a few nested conditional if
statements. This complexity severely impedes detecting
the bug by both static analysis tools and symbolic exe-
cution engines. For instance, when we steered S2E [10]
all the way down to the vulnerable function, and made
solely the seven byte long uri path of the HTTP message
symbolic, it took over 60 minutes to track down the prob-
lematic scenario. A more scalable solution is necessary
in practice. Without these hints, S2E did not ﬁnd the bug
at all during an eight hour long execution.2 In contrast,
Dowser ﬁnds it in less than 5 minutes.
The primary reason for the high cost of the analysis in
S2E is the large number of conditional branches which
depend on (symbolic) input. For each of the branches,
symbolic execution ﬁrst checks whether either the con-
dition or its negation is satisﬁable. When both branches
are feasible, the default behavior is to examine both. This
2All measurements in the paper use the same environment as in
Section 6.
procedure results in an exponentially growing number of
paths.
This real world example shows the need for (1) fo-
cusing the powerful yet expensive symbolic execution on
the most interesting cases, (2) making informed branch
choices, and (3) minimizing the amount of symbolic
data.
2.2 High-level overview
Figure 2 illustrates the overall Dowser architecture.
First, it performs a data ﬂow analysis of the target pro-
gram, and ranks all instructions that access buffers in
loops 1(cid:31). While we can rank them in different ways and
Dowser is agnostic as to the ranking function we use,