# 二、保护 Docker 组件
在本章中，我们将研究如何使用映像签名工具来保护一些 Docker 组件。有一些工具可以帮助保护我们存储映像的环境，无论映像是否经过签名。我们还将考虑使用附带商业级支持的工具。我们将关注的一些工具(映像签名和商业级支持工具)包括:
*   **Docker 内容信任**:可以用来给你的图片签名的软件。我们将查看所有组件，并通过一个示例来签署映像。
*   **Docker Subscription**:Subscription 是一个包含所有内容的包，包括存储您的映像的位置和运行您的容器的 Docker Engine，同时为所有这些内容以及您计划使用的应用及其生命周期提供商业级支持。
*   **Docker 可信注册中心** ( **DTR** ):可信注册中心为您提供了一个安全的位置来存储和管理您的本地或云中的映像。它还大量集成到您当前的基础架构中。我们将查看所有可用的零件。
# Docker 内容信任
Docker 内容信任是一种手段，通过这种手段，您可以安全地签署您创建的 Docker 映像，以确保它们来自他们所说的来源，即您！在本节中，我们将看看**公证**以及的组件，作为签名映像的示例。最后，我们将浏览一下关于硬件签名功能的最新公证使用方法。这是一个非常令人兴奋的话题，所以让我们先深入了解一下吧！
## Docker 内容信任组件
要了解 Docker 内容信任是如何工作的，熟悉构成其生态系统的所有组件是有益的。
该生态系统的第一部分是**更新框架** ( **TUF** )部分。TUF，我们将从现在开始提到它，是公证人赖以建立的框架。TUF 解决了软件更新系统的问题，因为它们通常很难管理。它使用户能够确保所有应用都是安全的，并且能够经受住任何关键的妥协。但是，如果一个应用在默认情况下是不安全的，那么在它达到安全的合规性之前，保护该应用是没有帮助的。它还支持通过不可信来源进行可信更新等等。要了解更多关于 TUF 的信息，请访问网站:
[http://the update framework . com/](http://theupdateframework.com/)
内容信任生态系统的下一部分是公证人。公证人是使用您的密钥进行实际签名的关键基础部分。公证是开源软件，可以在这里找到:
[https://github.com/docker/notary](https://github.com/docker/notary)
这是由 Docker 的人员制作的，用于发布和验证内容。公证人由一个服务器和一个客户端组成。客户端驻留在您的本地机器上，并在本地处理密钥的存储以及与公证服务器的通信，以匹配时间戳。
基本上，到公证服务器有三个步骤。
1.  编译服务器
2.  配置服务器
3.  运行服务器
由于这些步骤在将来可能会改变，所以最好的信息位置是在 Docker 公证员的 GitHub 页面上。关于公证员服务器端的编译和设置的更多信息，请访问:
[https://github.com/docker/notary#compiling-notary-server](https://github.com/docker/notary#compiling-notary-server)
Docker 内容信任利用两个不同的密钥。第一个是标签键。为您发布的每个新存储库生成标记密钥。这些密钥可以与其他人共享，并导出给那些需要代表注册表签署内容的人。另一个键，离线键，是重要的键。这是你想锁在金库里的钥匙，永远不要和任何人分享*…永远不要*！顾名思义，这个密钥应该保持离线，而不是存储在您的机器上或网络或云存储上的任何东西上。您唯一需要离线密钥的时候是当您将它旋转出来创建一个新的密钥或者创建一个新的存储库的时候。
那么，这一切意味着什么，它如何真正让你受益？这有助于防范三种关键情况，没有双关的意思。
*   防止映像伪造，例如，如果有人决定假装你的映像来自你。如果那个人不能用存储库特定的密钥签署那个映像，记住你要保持*离线的那个*！，他们不会把它当作真的来自你。
*   防止重放攻击；重放攻击是指恶意用户试图将应用的旧版本冒充为最新的合法版本。由于 Docker 内容信任使用时间戳的方式，这将最终失败，并保证您和您的用户的安全。
*   防止密钥泄露。如果某个密钥泄露，您可以利用该离线密钥进行密钥轮换。该密钥轮换只能由具有离线密钥的密钥来完成。在这种情况下，您需要创建一个新的密钥，并使用您的离线密钥对其进行签名。
所有这些的主要区别在于离线密钥应该保持离线。永远不要把它存储在你的云存储上，GitHub 上，甚至是一个总是连接到互联网的系统上，比如你的本地机器。最好将其存储在加密的拇指驱动器上，并将该拇指驱动器存储在安全的位置。
要了解更多关于 Docker 内容信任，请访问以下博客文章:
[http://blog.docker.com/2015/08/content-trust-docker-1-8/](http://blog.docker.com/2015/08/content-trust-docker-1-8/)
## 签名图片
现在我们已经涵盖了 Docker 内容信任的所有组件，让我们来看看如何签署映像以及涉及的所有步骤。这些说明只是为了开发的目的。如果您想要在生产中运行公证服务器，您将需要使用自己的数据库，并使用公证网站上的说明自行编译公证:
[https://github.com/docker/notary#compiling-notary-server](https://github.com/docker/notary#compiling-notary-server)
这将允许你使用你自己的情况下自己的密钥到你自己的后端注册表。如果您正在使用 Docker Hub，使用 Docker 内容信任非常简单。
```
$ export DOCKER_CONTENT_TRUST=1
```
最重要的一点是，您需要在推送的所有映像上贴上标签，我们将在下一个命令中看到:
```
$ docker push scottpgallagher/ubuntu:latest
The push refers to a repository [docker.io/scottpgallagher/ubuntu] (len: 1)
f50e4a66df18: Image already exists
a6785352b25c: Image already exists
0998bf8fb9e9: Image already exists
0a85502c06c9: Image already exists
latest: digest: sha256:98002698c8d868b03708880ad2e1d36034c79a6698044b495ac34c4c16eacd57 size: 8008
Signing and pushing trust metadata
You are about to create a new root signing key passphrase. This passphrase
will be used to protect the most sensitive key in your signing system. Please
choose a long, complex passphrase and be careful to keep the password and the
key file itself secure and backed up. It is highly recommended that you use a
password manager to generate the passphrase and keep it safe. There will be no
way to recover this key. You can find the key in your config directory.
Enter passphrase for new root key with id d792b7a:
Repeat passphrase for new root key with id d792b7a:
Enter passphrase for new repository key with id docker.io/scottpgallagher/ubuntu (46a967e):
Repeat passphrase for new repository key with id docker.io/scottpgallagher/ubuntu (46a967e):
Finished initializing "docker.io/scottpgallagher/ubuntu"
```
上面代码中最重要的一行是:
```
latest: digest: sha256:98002698c8d868b03708880ad2e1d36034c79a6698044b495ac34c4c16eacd57 size: 8008
```
这为您提供了 SHA 哈希，用于验证映像是否如其所言，是否由他人创建，以及映像的大小。这将在以后有人去运行那个`image/container`时使用。
如果你要在没有这个映像的机器上做一个`docker pull`，你可以看到它已经用那个散列签名了。
```
$ docker pull scottpgallagher/ubuntu
Using default tag: latest
latest: Pulling from scottpgallagher/ubuntu
Digest: sha256:98002698c8d868b03708880ad2e1d36034c79a6698044b495ac34c4c16eacd57
Status: Downloaded newer image for scottpgallagher/ubuntu:latest
```
同样，当我们执行`pull`命令时，我们看到了 SHA 值。
因此，这意味着当您运行这个容器时，如果不首先将本地散列与注册服务器上的散列进行比较以确保它没有改变，它就不会在本地运行。如果它们匹配，它将运行，如果它们不匹配，它将不会运行，并会给你一个关于哈希不匹配的错误消息。
使用 Docker Hub，你实际上不是用自己的密钥来签署映像，除非你操作了`~/.docker/trust/trusted-certificates/`目录中的密钥。请记住，默认情况下，当您安装 Docker 时，您会获得一组可以使用的证书。
## 硬件签约
既然我们已经看到能够对映像进行签名，还有哪些其他安全措施已经到位，有助于使该过程更加安全？输入 YubiKeys！YubiKeys 是一种您可以利用的双因素身份验证形式。YubiKey 的工作方式是它有根密钥，内置在硬件中。您启用 Docker 内容信任，然后推送您的映像。在使用您的映像时，Docker 注意到您已经启用了内容信任，并要求您触摸 YubiKey，是的，物理触摸它。这是为了确保你是一个人，而不是一个机器人或只是一个脚本。然后您需要提供一个 passphase 来使用，然后再一次触摸 YubiKey。完成此操作后，您将不再需要 YubiKey，但您将需要之前分配的密码。
我对这个的描述确实不太公正。在 Docker con Europe 2015([http://europe-2015.dockercon.com](http://europe-2015.dockercon.com))上，两位 Docker 员工 Aanand Prasad 和迪奥戈·莫尼卡之间进行了一场精彩的表演。
要观看视频，请访问以下网址:
[https://youtu . be/flfffthrzq？t=1 小时 21 分 33 秒](https://youtu.be/fLfFFtOHRZQ?t=1h21m33s)
# Docker 订阅
Docker Subscription 是为您的分布式应用提供的服务，将帮助您支持和部署这些应用。Docker 订阅包包括两个关键软件部分和一个支持部分:
*   **Docker 注册表** —存储和管理映像的地方(本地托管或托管在云中)
*   Docker **引擎** —运行这些映像
*   **Docker** **通用控制飞机** ( **UCP** )
*   **商业** **支持** —拿起电话或发一封邮件寻求帮助
如果你是一名开发人员，有时事情的操作方面要么有点难以设置和管理，要么需要一些培训才能开始。借助 Docker Subscription，您可以利用商业级支持提供的专业知识来消除这些顾虑。有了这种支持，你会在你的问题上得到回应。您将收到任何可用或已经可用的热修复程序来修补您的解决方案。对未来升级的帮助也是选择 Docker 订阅计划的额外好处的一部分。您将获得将您的环境升级到最新和最安全的 Docker 环境的帮助。
定价根据您希望运行环境的位置进行细分，无论是在您选择的服务器上还是在云环境中。它还基于您希望拥有多少 Docker 可信注册中心和/或多少商业支持的 Docker 引擎。所有这些解决方案都为您提供了与现有 **LDAP** 或**活动目录** 环境的集成。有了这个额外的好处，您可以使用组策略等项目来管理对这些资源的访问。您必须决定的最后一件事是您希望支持端的响应时间有多快。所有这些都将导致您为订阅服务支付的价格。不管你付出什么，花的钱都是值得的，不仅是因为你会得到内心的平静，还因为你获得的知识是无价的。
您还可以每月或每年更改您的计划，并以十为增量升级您的 Docker Engine 实例。您还可以以十个为一组升级**Docker** **枢纽企业**实例的数量。在内部服务器和云之间切换也是可能的，反之亦然。
为了不被混淆，分解一些东西，Docker 引擎是 Docker 生态系统的核心。它是用于运行、构建和管理容器或映像的命令行工具。Docker Hub 企业版是您存储和管理映像的地方。这些映像可以公开，也可以保密。我们将在本章的下一节了解更多关于 DTR 的知识。
有关 Docker 订阅的更多信息，请访问以下链接。您可以注册 30 天的免费试用，查看订阅计划，并联系销售人员寻求更多帮助或问题。订阅计划足够灵活，可以适应您的操作环境，无论是您想要的全天候支持，还是仅仅是其中的一半:
[https://www.docker.com/docker-subscription](https://www.docker.com/docker-subscription)
您也可以在此查看商业支持的明细:
[https://www.docker.com/support](https://www.docker.com/support)