## PostgreSQL 从源码找出哪些操作需要超级用户权限  
### 作者                                         
digoal                                          
### 日期                                        
2016-12-07                                           
### 标签                                        
PostgreSQL , 超级用户 , superuser                                                                                        
----                                        
## 背景            
在数据库中哪些操作需要超级用户的权限才能执行？   
这个问题翻文档可能翻不全面，或者是已经比较难以完成的任务。   
但是从源码里面是比较好找出这个答案的。   
## 权限
例如  
```
postgres=# select * from pg_authid;
      rolname      | rolsuper | rolinherit | rolcreaterole | rolcreatedb | rolcanlogin | rolreplication | rolbypassrls | rolconnlimit | rolpassword | rolvaliduntil 
-------------------+----------+------------+---------------+-------------+-------------+----------------+--------------+--------------+-------------+---------------
 postgres          | t        | t          | t             | t           | t           | t              | t            |           -1 |             | 
 pg_signal_backend | f        | t          | f             | f           | f           | f              | f            |           -1 |             | 
 test              | f        | t          | f             | f           | t           | f              | f            |           -1 |             | 
 dba               | f        | t          | f             | f           | t           | f              | f            |           -1 |             | 
 test1             | f        | t          | f             | f           | f           | f              | f            |           -1 |             | 
 digoal            | f        | t          | f             | f           | t           | f              | f            |           -1 |             | 
 a                 | f        | t          | f             | f           | t           | f              | f            |           -1 |             | 
 b                 | f        | t          | f             | f           | t           | f              | f            |           -1 |             | 
(8 rows)
```
rolsuper 就表示是否具备超级用户权限。  
## 代码中如何判断超级用户
src/backend/utils/misc/superuser.c  
```
/*
 * The Postgres user running this command has Postgres superuser privileges
 */
bool
superuser(void)
{
        return superuser_arg(GetUserId());
}
/*
 * The specified role has Postgres superuser privileges
 */
bool
superuser_arg(Oid roleid)
{
        bool            result;
        HeapTuple       rtup;
        /* Quick out for cache hit */
        if (OidIsValid(last_roleid) && last_roleid == roleid)
                return last_roleid_is_super;
        /* Special escape path in case you deleted all your users. */
        if (!IsUnderPostmaster && roleid == BOOTSTRAP_SUPERUSERID)
                return true;
        /* OK, look up the information in pg_authid */
        rtup = SearchSysCache1(AUTHOID, ObjectIdGetDatum(roleid));
        if (HeapTupleIsValid(rtup))
        {
                result = ((Form_pg_authid) GETSTRUCT(rtup))->rolsuper;  // 最终还是读取pg_authid中的rolsuper字段  
                ReleaseSysCache(rtup);
        }
        else
        {
                /* Report "not superuser" for invalid roleids */
                result = false;
        }
        /* If first time through, set up callback for cache flushes */
        if (!roleid_callback_registered)
        {
                CacheRegisterSyscacheCallback(AUTHOID,
                                                                          RoleidCallback,
                                                                          (Datum) 0);
                roleid_callback_registered = true;
        }
        /* Cache the result for next time */
        last_roleid = roleid;
        last_roleid_is_super = result;
        return result;
}
```
在PostgreSQL代码里面，通过FormData_pg_authid结构来表示pg_authid的表结构  
```
CATALOG(pg_authid,1260) BKI_SHARED_RELATION BKI_ROWTYPE_OID(2842) BKI_SCHEMA_MACRO
{
	NameData	rolname;		/* name of role */
	bool		rolsuper;		/* read this field via superuser() only! */
	bool		rolinherit;		/* inherit privileges from other roles? */
	bool		rolcreaterole;	/* allowed to create more roles? */
	bool		rolcreatedb;	/* allowed to create databases? */
	bool		rolcatupdate;	/* allowed to alter catalogs manually? */
	bool		rolcanlogin;	/* allowed to log in as session user? */
	bool		rolreplication; /* role used for streaming replication */
	int32		rolconnlimit;	/* max connections allowed (-1=no limit) */
	/* remaining fields may be null; use heap_getattr to read them! */
	text		rolpassword;	/* password, if any */
	timestamptz rolvaliduntil;	/* password expiration time, if any */
} FormData_pg_authid;
#undef timestamptz
/* ----------------
 *		Form_pg_authid corresponds to a pointer to a tuple with
 *		the format of pg_authid relation.
 * ----------------
 */
typedef FormData_pg_authid *Form_pg_authid;
```
## 代码中如何判断用户是否有replication的权限
以此类推，   
src/backend/utils/init/miscinit.c  
```
/*
 * Check whether specified role has explicit REPLICATION privilege
 */
bool
has_rolreplication(Oid roleid)
{
        bool            result = false;
        HeapTuple       utup;
        utup = SearchSysCache1(AUTHOID, ObjectIdGetDatum(roleid));
        if (HeapTupleIsValid(utup))
        {
                result = ((Form_pg_authid) GETSTRUCT(utup))->rolreplication;
                ReleaseSysCache(utup);
        }
        return result;
}
```
## 人肉时间, 找出需要判断超级用户的地方
```
grep -r "superuser()" *
contrib/file_fdw/file_fdw.c:    if (catalog == ForeignTableRelationId && !superuser())
contrib/dblink/dblink.c:        if (!superuser())
contrib/dblink/dblink.c:        if (!superuser())
contrib/pgstattuple/pgstatindex.c:      if (!superuser())
contrib/pgstattuple/pgstatindex.c:      if (!superuser())
contrib/pgstattuple/pgstatindex.c:      if (!superuser())
contrib/pgstattuple/pgstatindex.c:      if (!superuser())
contrib/pgstattuple/pgstatindex.c:      if (!superuser())
contrib/pgstattuple/pgstattuple.c:      if (!superuser())
contrib/pgstattuple/pgstattuple.c:      if (!superuser())
contrib/pgstattuple/pgstatapprox.c:     if (!superuser())
contrib/pg_stat_statements/pg_stat_statements.c:        bool            is_superuser = superuser();
contrib/sepgsql/label.c:        if (!superuser())
contrib/pageinspect/brinfuncs.c:        if (!superuser())
contrib/pageinspect/brinfuncs.c:        if (!superuser())
contrib/pageinspect/brinfuncs.c:        if (!superuser())
contrib/pageinspect/brinfuncs.c:        if (!superuser())
contrib/pageinspect/fsmfuncs.c: if (!superuser())
contrib/pageinspect/ginfuncs.c: if (!superuser())
contrib/pageinspect/ginfuncs.c: if (!superuser())
contrib/pageinspect/ginfuncs.c: if (!superuser())
contrib/pageinspect/heapfuncs.c:        if (!superuser())
contrib/pageinspect/heapfuncs.c:        if (!superuser())
contrib/pageinspect/btreefuncs.c:       if (!superuser())
contrib/pageinspect/btreefuncs.c:       if (!superuser())
contrib/pageinspect/btreefuncs.c:       if (!superuser())
contrib/pageinspect/rawpage.c:  if (!superuser())
contrib/pageinspect/rawpage.c:  if (!superuser())
contrib/adminpack/adminpack.c:  if (!superuser())
contrib/adminpack/adminpack.c:  if (!superuser())
contrib/postgres_fdw/connection.c:              if (!superuser() && !PQconnectionUsedPassword(conn))
contrib/postgres_fdw/connection.c:      if (superuser())
src/include/catalog/pg_authid.h:        bool            rolsuper;               /* read this field via superuser() only! */
src/test/modules/dummy_seclabel/dummy_seclabel.c:               if (!superuser())
src/test/regress/regress.c:     if (!superuser())
src/test/regress/regress.c:     if (!superuser())
src/backend/commands/copy.c:    if (!pipe && !superuser())
src/backend/commands/trigger.c:                 if (!superuser())
src/backend/commands/dbcommands.c:                (encoding == PG_SQL_ASCII && superuser())))
src/backend/commands/dbcommands.c:                (encoding == PG_SQL_ASCII && superuser())))
src/backend/commands/dbcommands.c:      if (superuser())
src/backend/commands/opclasscmds.c:     if (!superuser())
src/backend/commands/opclasscmds.c:     if (!superuser())
src/backend/commands/opclasscmds.c:     if (!superuser())
src/backend/commands/tablespace.c:      if (!superuser())
src/backend/commands/event_trigger.c:   if (!superuser())
src/backend/commands/foreigncmds.c:     if (!superuser())
src/backend/commands/foreigncmds.c:             if (!superuser())
src/backend/commands/foreigncmds.c:     if (!superuser())
src/backend/commands/foreigncmds.c:     if (!superuser())
src/backend/commands/tsearchcmds.c:     if (!superuser())
src/backend/commands/tsearchcmds.c:     if (!superuser())
src/backend/commands/amcmds.c:  if (!superuser())
src/backend/commands/amcmds.c:  if (!superuser())
src/backend/commands/functioncmds.c:            if (!superuser())
src/backend/commands/functioncmds.c:    if (isLeakProof && !superuser())
src/backend/commands/functioncmds.c:            if (procForm->proleakproof && !superuser())
src/backend/commands/functioncmds.c:            if (!superuser())
src/backend/commands/functioncmds.c:            if (!superuser())
src/backend/commands/tablecmds.c:                       if (!superuser())
src/backend/commands/extension.c:       if (control->superuser && !superuser())
src/backend/commands/aggregatecmds.c:           if (transTypeId == INTERNALOID && superuser())
src/backend/commands/aggregatecmds.c:                   if (mtransTypeId == INTERNALOID && superuser())
src/backend/commands/alter.c:   if (!superuser())
src/backend/commands/alter.c:   if (!superuser())
src/backend/commands/alter.c:           if (!superuser())
src/backend/commands/proclang.c:                if (!superuser())
src/backend/commands/proclang.c:                if (!superuser())
src/backend/commands/user.c:            if (!superuser())
src/backend/commands/user.c:            if (!superuser())
src/backend/commands/user.c:            if (!superuser())
src/backend/commands/user.c:            if (!superuser())
src/backend/commands/user.c:            if (!superuser())
src/backend/commands/user.c:            if (!superuser())
src/backend/commands/user.c:                    if (!superuser())
src/backend/commands/user.c:            if (!superuser())
src/backend/commands/user.c:                    !superuser())
src/backend/commands/user.c:            if (!superuser())
src/backend/commands/user.c:            if (!superuser())
src/backend/commands/user.c:    if (grantorId != GetUserId() && !superuser())
src/backend/commands/user.c:            if (!superuser())
src/backend/commands/typecmds.c:        if (!superuser())
src/backend/commands/typecmds.c:                if (!superuser())
src/backend/libpq/be-fsstubs.c: if (!superuser())
src/backend/libpq/be-fsstubs.c: if (!superuser())
src/backend/catalog/system_views.sql:-- than use explicit 'superuser()' checks in those functions, we use the GRANT
src/backend/catalog/pg_proc.c:                                                          (superuser() ? PGC_SUSET : PGC_USERSET),
src/backend/tcop/utility.c:                             load_file(stmt->filename, !superuser());
src/backend/tcop/utility.c:                     if (!superuser())
src/backend/postmaster/pgstat.c:                        if (checkUser && !superuser() && beentry->st_userid != GetUserId())
src/backend/replication/slotfuncs.c:    if (!superuser() && !has_rolreplication(GetUserId()))
src/backend/replication/walreceiver.c:  if (!superuser())
src/backend/replication/walsender.c:            if (!superuser())
src/backend/replication/logical/origin.c:       if (!superuser())
src/backend/replication/logical/logicalfuncs.c: if (!superuser() && !has_rolreplication(GetUserId()))
src/backend/utils/fmgr/fmgr.c:                                          (superuser() ? PGC_SUSET : PGC_USERSET),
src/backend/utils/misc/guc.c:           !superuser())
src/backend/utils/misc/guc.c:   if ((record->flags & GUC_SUPERUSER_ONLY) && !superuser())
src/backend/utils/misc/guc.c:   if (!superuser())
src/backend/utils/misc/guc.c:                                                                    (superuser() ? PGC_SUSET : PGC_USERSET),
src/backend/utils/misc/guc.c:                                                                    (superuser() ? PGC_SUSET : PGC_USERSET),
src/backend/utils/misc/guc.c:                                                    (superuser() ? PGC_SUSET : PGC_USERSET),
src/backend/utils/misc/guc.c:                                                    (superuser() ? PGC_SUSET : PGC_USERSET),
src/backend/utils/misc/guc.c:   bool            am_superuser = superuser();
src/backend/utils/misc/guc.c:   if ((record->flags & GUC_SUPERUSER_ONLY) && !superuser())
src/backend/utils/misc/guc.c:                   ((conf->flags & GUC_SUPERUSER_ONLY) && !superuser()))
src/backend/utils/misc/guc.c:   if (conf->source == PGC_S_FILE && superuser())
src/backend/utils/misc/guc.c:   if (superuser())
src/backend/utils/misc/guc.c:           if (superuser())
src/backend/utils/misc/guc.c:   else if (gconf->context == PGC_SUSET && superuser())
src/backend/utils/misc/guc.c:                                                    superuser() ? PGC_SUSET : PGC_USERSET,
src/backend/utils/misc/superuser.c: *     The superuser() function.  Determines if user has superuser privilege.
src/backend/utils/init/postinit.c:                      am_superuser = superuser();
src/backend/utils/init/postinit.c:              am_superuser = superuser();
src/backend/utils/init/postinit.c:              if (!superuser() && !has_rolreplication(GetUserId()))
src/backend/utils/adt/misc.c:   if (superuser_arg(proc->roleId) && !superuser())
src/backend/utils/adt/genfile.c:        if (!superuser())
src/backend/utils/adt/genfile.c:        if (!superuser())
src/backend/utils/adt/genfile.c:        if (!superuser())
src/backend/utils/adt/genfile.c:        if (!superuser())
src/bin/psql/prompt.c:                                  if (is_superuser())
```
去代码里面看吧，举一些例子  
## 例子
1\. 只有超级用户可以修改或设置file_fdw foreign table的options  
```
contrib/file_fdw/file_fdw.c
        if (catalog == ForeignTableRelationId && !superuser())
                ereport(ERROR,
                                (errcode(ERRCODE_INSUFFICIENT_PRIVILEGE),
                                 errmsg("only superuser can change options of a file_fdw foreign table")));
```
2\. 只有超级用户能读取数据库所在服务器的文件  