dns-admin@google.com. However, there are also exceptions.
946    28th USENIX Security Symposium
USENIX Association
Different organizations may use the same Managed DNS
providers [35] to register domains. Accordingly, their SOA
same email addresses are identical. For example, both dropbox.
com and bitbucket.org use PI:EMAIL
as their SOA email address.
We address this limitation by further examining if the name
server (NS) records of a script/URL and the first-party web
page have an intersection. Specifically, we use the domain
name instead of the full hostname of a NS, because one do-
main may use several NSs from a large pool. If the first-party
domain name is found in a common NS, we mark the external
script as a first-party script. For instance, both gstatic.com and
google.com use NSs nsX.google.com, where X is a numeric
value. Therefore, we determine the two domains belong to
the same organization because they have a common NS do-
main name—google.com, and an identical SOA email address.
Note that we exclude all common NSs that are operated by
any known managed or dynamic DNS providers.
Dynamic Element. Recognizing the sources of dynamic
elements is also important to identify cross-party accesses.
We classify dynamic elements into two groups based on which
parties their initiating scripts belong to. This allows us to
distinguish first-party contents from third-party contents.
4.3 Click Interception Detection
Normally, a user may explicitly click a hyperlink to navi-
gate to another web page, or click some components such as
images or buttons to interact with the current web page. How-
ever, some scripts may deliberately intercept a user’s clicks
to override the default action that the user may expect. Fur-
thermore, a user could also be fooled by a script into clicking
some components she/he would not click. We designate such
undesired click manipulation caused by privilege abuse as
click interception in web applications. As discussed earlier,
we do not consider click interceptions exhibited by first-party
scripts as malicious.
Based on how a user click could be manipulated, we cate-
gorize click interception into three classes—interception by
hyperlinks, interception by event handlers, and interception by
visual deception. In particular, a script can intercept user click
by 1) using an existing hyperlink or creating a new hyperlink;
2) registering a click event handler with an element; and 3)
manipulating the UI to deceive a user into clicking elements
controlled by the script.
In the following, we explain the methods to detect the three
classes of click interception. Specifically, we leverage the
navigation URL and the navigation APIs3 (§3.4), and the
display properties of the element (§4.1).
3The default event handler of  tags is also considered as one API.
4.3.1
Interception by Hyperlinks
In general, a script can intercept user clicks with hyperlinks
in two ways: modifying one existing (first-party) hyperlink,
and adding one hyperlink to a huge element.
Modifying Existing Hyperlinks. A third-party script can
intercept a user’s click through a first-party hyperlink by over-
writing the href attribute. A third-party script might also
employ a similar approach to intercept a user’s click on an-
other third-party hyperlink. Therefore, we search in the href
attribute log of an anchor element the last script that modifies
its value. If a (different4) third-party script is found, the script
is marked as one click interception script. We use the tech-
nique in §4.2 to determine if the script and the anchor element
belong to the same organization. A third-party script might
also intercept a user’s click through attaching an event listener
to a first-party hyperlink, which we discuss in the following
section. Note that although a first-party script may modify a
third-party hyperlink, we think this is legitimate because the
first party as the owner of the web page is entitled to include
or remove any third-party contents.
Creating Huge Hyperlinks. A script can trick users into
clicking its hyperlink by enclosing a huge clickable element.
In particular, it can enclose a significant part of its web page
within one  tag such that a click on any of the enclosed
contents would result in a page navigation that is controlled
by it. Therefore, we also check the size of an anchor element
relative to the browser window5. Specifically, we use 75% as
the threshold to detect the suspicious huge hyperlinks that
can be used to intercept user clicks. According to our knowl-
edge, most (but not all) links on the web are relatively small
compared to the browser window. Therefore, we think 75%
is a reasonably large threshold to help quickly identify the
suspicious ones. Further, we exclude any hyperlinks pointing
to a first party navigation URL, because the first party has the
right to use huge hyperlinks in its own pages.
4.3.2
Interception by Event Handlers
The event handlers are the second technique that a script can
use to intercept user clicks. However, a script listening for
user click may not necessarily navigate the user to another
URL. For instance, an analytic script may observe user clicks
to determine and log only user engagement within the current
page. We leverage the navigation-related APIs to solve this
problem.
To start a new navigation, a developer needs to either call
the window.open() API or change the location of the current
frame. The two JavaScript DOM APIs are implemented by
the C++ methods LocalDOMWindow::open() and Location::
SetLocation() in WebKit, respectively. For each element, we
4We use the term a different script to represent a script of a different
organization in the rest of the paper.
5We used 1024px x 768px as the browser window size in our experiments.
USENIX Association
28th USENIX Security Symposium    947
examine if the two C++ methods are (indirectly) called upon
a click on the element. We then extract the navigation URLs
from the associated logs.
Third-party Interception Scripts using Event Handlers.
We determine a third-party script as a click interception script
if it (indirectly) calls either one of the above two C++ methods
in its click event listener that is added to a first-party element.
We name such a click event listener as a navigation event
listener. Similarly, if such a navigation event handler is added
to a third-party element created by the script of a different
organization, the third-party script implementing the event
handler is also determined as a click interception script.
Intercepting Huge Elements with Event Handlers. We
use the same 75% relative size threshold to detect suspicious
huge elements that are registered with a third-party navigation
event handler and can be used to intercept user clicks. We
also filter the elements that are associated with a first-party
navigation URL.
4.3.3 Interception by Visual Deception
Third party scripts can also intercept a user’s clicks through
visual implementation tricks to deceive a user. In particular,
the third-party contents are designed in some way such that a
user is likely to click. We do not consider first-party contents
with similar characteristics malicious because the first-party
websites have the complete freedom to design their contents.
This last click interception category could be controversial
in our opinion, as some third-party developers may argue that
they do not intend to deceive the end users. Nevertheless,
we still classify such practices as click interception (but not
necessarily malicious) because the users can be deceived
through the visual tricks.
We have identified two possible visual deceptions—
mimicry, and transparent overlay. We detect these visual de-
ceptive tricks for each group of third-party elements, which
are the largest sub DOM tree that consists of only elements
of the same third-party script (organization).
Mimicry. Some third-party script would deliberately dec-
orate its elements such that they are almost visually indis-
tinguishable from first-party contents. A user might conse-
quently click these mimic elements. However, the imitating
elements are usually not exact copies of some first-party ele-
ments. As a result, we cannot use pixel-wise comparison to
detect such mimic elements.
We utilize the structural information as well as the display
properties of a third-party element group to detect mimicry.
Specifically, we compute the relative size of media contents,
e.g., images, videos, and iframes, in a group of third-party
elements, as well as the size of the largest container of them.
We then compute the same metrics for any group of first-party
elements whose root node is a sibling (neighbor) to that of
the third-party element group. Next, we calculate a similarity
score between the two groups of elements using: 1) the CSS
class names of the two root nodes, which are primarily used to
describe the representations of HTML elements; 2) the num-
bers of each kind of media tags, which indicate how media
contents are implemented; and 3) the relative sizes of media
contents in two groups and the sizes of the largest container
nodes, which represent the visual layout of an element group.
We set a threshold learned from our training phase to keep
only third-party element groups that are very similar to some
first-party element groups. Note that we compute the similar-
ity scores using the display property data before we click the
elements to find the elements whose default representation
is likely to fool a user. We do acknowledge that there are
other features (e.g., the DOM tree structure, color histogram)
that may better determine the similarity. However, we find
the ones that we select work well in our manual test over a
small set of samples. We plan to leverage more sophisticated
techniques (e.g., image classification [7]) in our future work.
Transparent Overlay. A third-party script can inject con-
tents that partially overlap with or completely cover first-party
contents. In the case that some first-party contents are com-
pletely covered, the user might not notice their existence and
treat the covering third-party contents as first-party ones. Fur-
ther, a script can make some of its elements barely visible
by setting a small value to their opacity style property. Sub-
sequently, a user’s click could be delivered to these “hidden”
elements when the user is intending to click some other ele-
ments beneath them. We detect transparent overlay third-party
contents in the following two steps.
First, for each group of third-party elements, we compute
the minimum portion of a first-party element that it overlaps
with. Specifically, we scroll the browser window virtually to
compute all the possible overlapped regions with each first-
party element. If the covered portion of a first-party element
is always greater than a pre-defined threshold (e.g., 25%), we
label this group of third-party elements as overlay elements.
Since some third-party scripts may implement components
allowing a user to cancel out the overlay elements, we further
exclude those that no longer significantly overlap with any
first-party element after our automatic clicks, which must
include a click on one of such cancel-out buttons if there are
any. However, this method may not work well in some cases.
For example, the covering elements could first be hidden by a
click on a cross button, and later be revealed by another click
on another button. We consider it as a limitation and plan to
leverage knowledge in computer vision to develop a better
automated testing method in our future work.
Next, we detect third-party transparent overlay element
groups by comparing the opacity value collected in the display
properties with a small threshold (e.g., 0.1). A zero opacity
value indicates complete transparency. We do not consider
elements whose style is visibility: hidden or display: none
because user clicks are not passed to these invisible elements.
In addition, we keep only the transparent third-party element
groups that are big enough to be easily clickable, i.e., the
948    28th USENIX Security Symposium
USENIX Association
container size is greater than 1% of the browser window size.
Table 1: Categorization of Click Interception Techniques
5 Click Interception in the Wild
In this section, we first present our analysis on data collected
in our web crawl (§5.1), then characterize click interception by
demonstrating how different techniques (§5.2) are employed
by which scripts (§5.3) to intercept user clicks, and finally
explain why they do it and its consequences (§5.4).
5.1 Dataset
We crawled data from the main pages of Alexa top 250K
websites in May 2018. Excluding those that timed out or
crashed in our data collection process, we were able to gather
valid data of 228,614 (91.45%) websites. We identified third-
party navigation URLs (the first URL the browser would visit
upon a user click) collected in a web page using the method
described in §4.2. We obtained 2,065,977 unique third-party
navigation URLs, which corresponded to 427,659 unique
domains. On average, a web page contains 9.04 third-party
navigation URLs, pointing to 1.87 domains.
We visited each of the 2M navigation URLs and recorded
both the intermediate redirect URLs and the landing URL. We
could not visit 39 URLs in our experiment because of various
errors (e.g., HTTP 404 status code, too many redirects, etc.).
We managed to obtain 1,982,613 unique landing URLs.
We collected 413,075 intermediate redirect URLs (exclud-
ing the navigation URLs and the landing URLs) in this pro-
cess. Specifically, we observed no redirection for 1,263,754
(61.17%) navigation URLs. We encountered at most 29 inter-
mediate hops before we reached a final landing URL.
We detected 2,001,081 distinct third-party scripts that were
loaded from 1,170,582 different domains. On each page, there
are on average 8.75 third-party scripts.
5.2 Click Interception Techniques
In this section, we demonstrate how the different techniques
that we identify in §4.3 are employed for click interception.
Technique
Hyperlinks
Modifying 1st-party links
Modifying 3rd-party links
Inserting huge 3rd-party links
Event Handlers
On 1st-party nodes
On 3rd-party nodes
On huge 3rd-party nodes
Visual Deceptions
Mimicry
Transparent Overlay
#Cases
4,178
4,027
31
120
203
189
14
0
286
140
146
#Websites %Cases
89.52
86.29
0.66
2.57
4.35
4.05
0.30
0
6.13
3.00
3.13
221
100
2
119
172
161
12
0
231
87
144
#Visits/day
12,686,591
2,496,620
638,247
9,551,724
5,455,821
4,636,145
819,676
0
25,269,314
16,604,258
8,665,056
attribute of one anchor element to http://ay.gy/2155800/... on the
website http://magazinweb.net/. Similarly, the third-party script
https://cpm4link.com/js/full-page-script.js modified hyperlinks
on the website https://www.lnmta.com/ to https://cpm4link.com/
full/?api=.... They are obviously privilege abuses. In addition,