# Windows内网协议学习LDAP篇之Active Directory简介
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
作者: daiker@360RedTeam
## 0x00 前言
这是LDAP篇的第一篇文章。在域渗透中，可能大家对Active Directory，LDAP，Naming
Context这些概念既熟悉又模糊，比如Active Directory跟LDAP有啥关系等等。在LDAP篇，我们将系统地介绍跟Active
Directory相关的方方面面。第一篇文章主要介绍一些基本概念，让大家对整个Active
Directory有个基本印象。在之后的文章里面会陆续介绍Active Directory相关的方方面面。包括但不限于。
  * 域内用户介绍
  * 域内组介绍
  * 域内ACL介绍
  * 域信任关系介绍
  * 组策略介绍
这篇文章对一些专业词汇统一保留英文
## 0x01 LDAP简介
LDAP全称是Lightweight Directory Access
Protocol，轻量目录访问协议。顾名思义，LDAP是设计用来访问目录数据库的一个协议。
在这之前我们先介绍一下目录服务。目录数据库是由目录服务数据库和一套访问协议组成。
目录服务数据库也是一种数据库，这种数据库相对于我们熟知的关系型数据库(比如MySQL,Oracle),主要有以下几个方面的特点。
  1. 它成树状结构组织数据，类似文件目录一样。
  2. 它是为查询、浏览和搜索而优化的数据库，也就是说LDAP的读性能特别强，但是写性能差，而且还不支持事务处理、回滚等复杂功能。
为了能够访问目录数据库，必须设计一台能够访问目录服务数据库的协议，LDAP是其中一种实现协议。
为了方便大家理解下面举个例子来介绍一些LDAP相关的东西。
如上图所示是目录服务数据库，它成树状结构组织数据。下面介绍一些基本概念
  1. 目录树：如上图所示，在一个目录服务系统中，整个目录信息集可以表示为一个目录信息树，树中的每个节点是一个条目。
  2. 条目：每个条目就是一条记录，每个条目有自己的唯一可区别的名称（DN）。比如图中的每个圆圈都是一条记录。
  3. DN,RDN:比如说第一个叶子条目，他有一个唯一可区分的名称DN:uid=bob,ou=people,dc=acme,dc=org。类似于文件目录的相对路径绝对路径，他除了有个DN之外，还有个RDN，他与目录结构无关，比如之前咱们提过的uid=bob,ou=people,dc=acme,dc=org，他的RDN就是uid=bob
  4. 属性：描述条目具体信息。比如`uid=bill,ou=people,dc=acme,dc=org，他有属性name 为bill，属性age为11，属性school 为xx。
## 0x02 Active Directory简介
不同厂商对目录服务数据库的实现不一，常见的如下实现。
可以看出Active Directory，是微软的对目录服务数据库的实现，而LDAP是设计用来对目录服务数据库(在这里的实现就是微软的Active
Directory)的访问的协议。Active Directory存储着整个域内所有的计算机，用户等的所有信息。
如果我们想访问域内的Active Directory，有两种办法
  1. 域内的每一台域控都有一份完整的本域的Active Directory，可以通过连接域控的389/636端口(636端口是LDAPS)来进行连接查看修改。
  2. 如果用户知道某个对象处于哪个域，也知道对象的标识名，那么通过上面第一种方式搜索对象就非常容易。但是考虑到这种情况，不知道对象所处的域，我们不得不去域林中的每个域搜索。为了解决这个问题，微软提出全局编录服务器(GC，Global Catalog)， 全局编录服务器中除了保存本域中所有对象的所有属性外，还保存林中其它域所有对象的部分属性，这样就允许用户通过全局编录信息搜索林中所有域中对象的信息。也就是说如果需要在整个林中进行搜索，而不单单是在具体的某个域进行搜索的时候，可以连接域控的3268/3269端口。
## 0x03 Naming Context和Application Partitions
之前的内容都是在讲Active Directory的基本概念，接下来我们来具体的探究下Active Directory具体有啥东西。
### Naming Context
首先有一点得明确，Active Directory具有分布式特性，一个林中有若干个域，每个域内有若干台域控，每台域控有一个独立的Active
Directory。这个时候就有必要将数据隔离到多个分区中，如果不隔离的话，则每个域控制器都必须复制林中的所有数据。若隔离为若干个分区之后，就可以有选择性的复制某几个分区。微软将Active
Directory划分为若干个分区(这个分区我们称为Naming Context，简称NC)，每个Naming Context都有其自己的安全边界。
Active Directory预定义了三个Naming Context
  * Configuration NC(Configuration NC)
  * Schema NC(Schema NC)
  * Domain NC(DomainName NC)
我们使用ADExplorer连接进来就可以看到这三个(后面两个是引用程序分区，后面会讲)
我们来简单的介绍下这三个Naming Context
  1. Configuration NC(Configuration NC)
配置NC,林配置信息的主要存储库，包含有关站点，服务，分区和Active DirectorySchema
的信息，并被复制到林中的每个域控制器。配置NC的根位于配置容器中，该容器是林根域的子容器。例如，test.local林将为CN=Configuration,DC=test,DC=local
下面我们来看看这个Naming Context的顶级容器有哪些。
RDN | 说明  
---|---  
CN=DisplaySpecifiers | 定义了Active Directory管理单元的各种显示格式  
CN=Extended-Rights | 扩展权限对象的容器，我们将在域内ACL那篇文章里面详解  
CN=ForestUpdates | 包含用于表示森林状态和与域功能级别更改的对象  
CN=Partitions | 包含每个Naming Context，Application Partitions以及外部LDAP目录引用的对象  
CN=Physical Locations | 包含位置对象，可以将其与其他对象关联 以表示该对象的位置。  
CN=Services | 存储有关服务的配置信息，比如文件复制服务  
CN=Sites | 包含所有站点拓扑和复制对象  
CN=WellKnown Security Principals | 包含常用的外部安全性主题的对象，比如Anonymous，Authenticated
Users，Everyone等等  
  2. Schema NC(Schema NC)
包含Schema 信息，该Schema 信息定义Active Directory中使用的类，对象和属性。与域NC和配置 NC 不同，模式 NC
不维护容器或组织单位的层次结构。相反，它是具有 classSchema ，attributeSchema 和 subSchema
对象的单个容器。关于这个Naming Context的详细内容我们将在下一节里面详细讲。
  3. Domain NC(DomainName NC)
每个域都有一个域Naming Context，不同的域内有不同的域Naming Context，其中包含特定于域的数据。这个域Naming
Context(的根由域的专有名称(DN)表示，比如corp.test.local域的DN将为dc=corp,dc=test,dc=local。之前我们说过，域内的所有计算机，所有用户的具体信息都存在Active
Directory底下，具体来说，就是在Active Directory的这个Naming Context里面。我们用工具查看的默认Naming
Context选的也是这个Naming Context。后面对域内很多东西的查看都在这个Naming Context里面。下面我们来看看这个Naming
Context的顶级容器有哪些。
RDN | 说明  
---|---  
CN=Builtin | 内置本地安全组的容器，包括管理员，域用户和账号操作员等等  
CN=Computers | 机器用户的容器，包括加入域的所有机器  
OU=Domain Controllers | 域控制器的容器，包括域内所有域控  
CN=ForeignSecurityPrincipals | 代表域中来自森林外部域的组中的成员  
CN=Keys | Server 2016之后才有，关键凭证对象的默认容器  
CN=Managed Service Accounts | 托管服务帐户的容器。  
CN=System | 各种预配置对象的容器。包括信任对象，DNS对象和组策略对象  
CN=TPM Devices | 可信平台模块(TPM)密钥的恢复信息的容器。  
CN=Users | 用户和组对象的默认容器  
### Application Partitions
从 Windows Server 2003 开始，微软允许用户自定义分区来扩展Naming Context的概念。Application
Partitions其实就是Naming Context的一个扩展，它本质上还是属于Naming
Context。管理员可以创建分区(这个分区我们称为区域)，以将数据存储在他们选择的特定域控制器上，Application
Partitions主要有以下特点:
  1. Naming Context是微软预定义的，用户不可以定义自己的Naming Context。而如果用户想要定义一个分区，可以通过Application Partitions。虽然微软也预置了两个Application Partitions，但是Application Partitions的设计更多是为了让用户可以自定义自己的数据。设计Application Partitions最大的用途就是，让用户自己来定义分区。
  2. Application Partitions可以存储动态对象。动态对象是具有生存时间(TTL) 值的对象，该值确定它们在被Active Directory自动删除之前将存在多长时间。也就说Application Partitions可以给数据设置个TTL，时间一到，Active Directory就删除该数据。  
下面演示通过ntdsutil创建Application Partitions:
创建成功
我们可以通过查看rootDSE查看域内的所有Naming Context以及Application
Partitions，在属性namingContexts里面。
## 0x05 Schema NC
Schema NC里面包含Schema 信息，定义了Active Directory中使用的类和属性。所以在详细讲Schema
NC之前我们先来讲一下LDAP里面的类和继承。
LDAP里面的类和继承，跟开发里面的面向对象一样，相信有过面向对象开发经验的，理解起来并不困难。
### 1.LDAP 中的类和继承
  1. 类和实例  
域内每个条目都是类的实例。而类是一组属性的集合。  
举个例子:  
域内机器CN=WIN7,CN=Computers,DC=test,DC=local在Active
Directory里面是一个条目，里面有众多属性描述条目具体信息。
而这个条目有哪些属性是由他的类决定的。比如说这里的条目是CN=WIN7,CN=Computers,DC=test,DC=local是类Computer的实例，在objectClass属性可以看到
  2. 类是可继承的。子类继承父类的所有属性，Top类是所有类的父类。在之前我们看objectClass的时候，可以看到条目是CN=WIN7,CN=Computers,DC=test,DC=local是类Computer的实例。但是我们注意到objectClass里面的值除了Computer之外，还有top,person,organizationPerson,user。这是因为objectClass保存了类继承关系。user是organizationPerson的子类，organizationPerson是person的子类，person是top的子类。
  3. 类的分类  