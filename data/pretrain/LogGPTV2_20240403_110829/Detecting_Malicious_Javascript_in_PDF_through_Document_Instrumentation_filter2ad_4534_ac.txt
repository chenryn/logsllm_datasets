cution of the dropped malware. Attackers can create a new
process to execute the malware. In JS-context, this behavior
can be a strong sign of infection attempt; while in out-JS-
context, it can cause false positives. We observe that Win-
dows error report programs and tools distributed with PDF
readers, which obviously are benign, are usually invoked. So,
we add them to a white-list. In implementation, we monitor
NtCreateProcess(), NtCreateProcessEx(), and
NtCreateUserProcess().
DLL Injection: In the wild, usually attackers prefer to
execute malware via DLL injection. This behavior should
never occur in JS-context and rarely occur outside of
JS-context. Thus, we monitor DLL injection in both JS-
context and out-JS-context. In implementation, we monitor
CreateRemoteThread().
E. Runtime Detection and Conﬁnement
Detection. The workﬂow of
runtime detection and
lightweight conﬁnement is shown in Figure 4. The run-
time detector works in three steps. Initially, all sensitive
operations are ignored until at least one in-JS operation is
captured from an unknown PDF. Although it may cause false
negatives to discard out-JS operations at this step, we believe
it is worthwhile for achieving a lower false positive rate and
higher performance. Next, the detector starts to continuously
record all sensitive operations. The core logic of the runtime
detector is a weighted sum, as shown in Equation 1.
malscore = w1
7(cid:2)
i=1
Fi + w2
13(cid:2)
i=8
Fi.
(1)
105105105
Figure 4: Workﬂow of Runtime Detection & Lightweight
Conﬁnement.
The ﬁrst part represents the static and out-JS features.
The second part denotes the in-JS features. The features
are numbered from 1 to 13, and the runtime features are
numbered in the order they appear in Table II. All these
features are normalized to binary values. Instead of assigning
a weight for each feature, we set a weight for each “part” in
the equation. We also deﬁne a threshold and if the malscore
exceeds it, the document is tagged as malicious. The feature
normalization, weight and threshold setting are based on the
statistical results of a large corpus of benign and malicious
samples. We provide a detailed description in Section V-C.
In real world, users usually open many PDFs simulta-
neously, which must be correctly handled by the runtime
detector. For each unknown open PDF which has carried
out at least one in-JS operation, we maintain a separate
malscore and a set of related operations. In-JS operations
affect the corresponding malscore only, while out-JS op-
erations contribute to every active malscore. Finally,
in
order to handle the case that multiple malicious PDFs work
together to attack stealthily, we maintain a list of executables
downloaded in JS context. When an in-JS operation invokes
an executable in the list, we intentionally prepend a malware
dropping operation for this PDF and append a malware
execution operation for another PDF that downloads the
ﬁle. Malscore is volatile, implying that it no longer exists
when a PDF reader is closed. However, the maintained list
of executables is persistently stored. When an alert is raised,
we report the malscore, associated features, and the detected
malicious PDFs to users.
Conﬁnement. In Figure 4, the operations enclosed in
solid border are conﬁned. Our lightweight conﬁnement, as
well as runtime monitoring,
is based on Windows API
hooking. There are various ways to implement API hooking,
e.g., modifying the system service dispatch table (SSDT) or
the interrupt descriptor table (IDT). Our prototype adopts
the import address table (IAT) hooking since it is simple,
effective, and efﬁcient. Although attackers could leverage
GetProcAddress() or call kernel routines directly to
bypass IAT hooking, it is quite uncommon [13]. In the
future, we will use advanced kernel mode hooks to make
it more difﬁcult to evade.
An essential step of IAT hooking is to inject our hook
DLL. There are two popular implanting techniques on
Windows, i.e., remote thread injection and AppInit registry
modiﬁcation [37]. Our prototype adopts the latter approach.
As AppInit modiﬁcation can affect the whole system, which
is undesirable, we utilize a similar technique introduced
in [38]. The basic idea is to develop a trampoline DLL,
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:29:18 UTC from IEEE Xplore.  Restrictions apply. 
which further loads the IAT hook DLL if the host process
is a PDF reader and otherwise does nothing. In this way,
our conﬁnement affects PDF readers only and thus incurs
negligible overhead to the whole system.
Moreover, since API hooks execute in a PDF reader
process, we need a channel for communications between
API hooks and our stand-alone runtime detector. In our
prototype, TCP socket is used. When the hook DLL is
injected, its ﬁrst job is to set up a TCP connection to the
runtime detector. At runtime, it sends the captured API,
API parameters, and memory usage (for suspicious memory
consumption in §III-D) to the runtime detector.
Table III shows the pre-deﬁned conﬁnement rules exe-
cuted by the runtime detector and Hook DLL. The rules are
quite straightforward. The only issue that deserves attention
is, in order to conﬁne the created process, we use an existing
sandbox tool, Sandboxie [39]. Currently, we just handle
three sensitive operations. However, we can easily extend
existing conﬁnement rules.
F. De-instrumentation
it
In reality,
is common to open a document many
times. In order to improve performance and scalability,
we can monitor new documents only. We adopt an intu-
itive and simple approach, document de-instrumentation,
to achieve this goal. When a document
is identiﬁed as
benign, our system removes the context monitoring code
from it, i.e., de-instrumenting it. De-instrumentation is done
in background after the PDF reader is closed. To facil-
itate de-instrumentation, our static instrumentation com-
ponent will generate and export
the corresponding de-
instrumentation speciﬁcations when instrumenting a doc-
ument. De-instrumentation signiﬁcantly improves scalabil-
ity while no security hole is introduced. Note that de-
instrumenting at-once is a simple heuristic. A conﬁgurable
parameter and randomization can be introduced to set the
number of opens before de-instrumentation.
IV. SECURITY ANALYSIS
For any intrusion detection system, it is a must to enforce
its own integrity and security. In this section, we ﬁrst
describe the threat model. Then, we present a list of potential
advanced attacks and our countermeasures.
A. Threat Model
In our analysis, we assume an advanced attacker who can
access our code and test it for unlimited times. Moreover,
the attacker can embed some arbitrarily large shellcode in
the document. The shellcode is able to: (1) identify the heap,
stack, and code areas in memory; (2) scan the whole virtual
address space; and (3) modify any memory content.
Meanwhile, we also assume that attackers can neither
(1) understand the meaning of data in memory if there
is no identiﬁable signature nor (2) manipulate our static
instrumentation code since the instrumentation component
gets executed before malicious code.
B. Potential Advanced Attacks and Countermeasures
Mimicry Attack: An obvious attack is the mimicry
attack,
targeting the messaging mechanism between the
context monitoring code and the runtime detector. Attackers
try to steal the key used in communications and send a fake
message to the runtime monitor, mimicking the epilogue of
the context monitoring code. Then, the shellcode can do
anything without monitoring. An alternative approach is to
search for our episode code and execute it before carrying
out malicious operations. We argue that
our random key, context monitoring code randomization
and duplication, and zero tolerance to fake message can
effectively defeat such a mimicry attack.
Attackers can use either signature-based [40] or test-based
[41] methods to search for keys in memory. In many cases,
the key is stored at some ﬁxed addresses or somewhere near
an identiﬁable string, e.g., “auth-password” or “MyPwd”.
Such a signature remains intact once software is released,
and hence attackers can easily locate the key in memory. Our
system avoids generating signatures through: (1) executing
the context monitoring code using eval(); (2) generating
the key randomly during static instrumentation; (3) random-
izing the structure of the context monitoring code; and (4)
creating copies of fake context monitoring code.
It is much easier to defeat the test-based cracking. We
enforce that whenever a fake message is received, we tag
the active document as malicious. Note that attackers cannot
launch DoS attacks by pretending to be another PDF. As
mentioned before, PDF readers work in single-thread and
only one document is active at any time. From the key in
the prologue, we can identify the active document, which is
responsible for the fake message.
Runtime Patching Attack: Attackers can also carry out
the runtime patching attack. There are two separate scripts in
the document, so we instrument each of them independently.
When the shellcode in the ﬁrst script gets executed,
it
can locate the second script
in memory and patch out
the context monitoring code. Then, the second script can
execute without monitoring. A variant attack is to distribute
malicious Javascript in two separate documents.
To avoid the runtime patching attack, we ensure to take
control at the beginning of each script. We apply encryption
to enforce such control retaining. During instrumentation,
an encryption scheme is randomly selected to encrypt the
original script, and the decryption method is embedded in
the prologue of the context monitoring code. In this way,
malicious Javascript cannot get executed without our context
monitoring code.
Moreover, several obfuscation methods are used to make it
impossible for attackers to eliminate the context monitoring
code but still keep the decryption code.
Staged Attack: An advanced attacker can split the exploit
into multiple stages. Let us consider the simplest two-stage
attack, as shown in Figure 5. In step 3, the Stage 2 code
can be installed using Javascript methods listed in Table IV.
To defeat this kind of attack, we analyze the Javascript
code and search for the methods in Table IV during static
106106106
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:29:18 UTC from IEEE Xplore.  Restrictions apply. 
Table III: Conﬁnement Rules
Operation
Execute In Hook DLL
Malware Dropping
Before alert, call original API.
Rules
Execute In Runtime Detector
Before alert, maintain the list of downloaded executables;
When alert, isolate.
Before alert, run target program in Sandboxie [39];
Process Creation
DLL Injection
Before alert, reject the call since it
will be invoked by runtime detector. When alert, terminate and isolate the program.
Always reject.
Isolate the injected DLL.
1) Instrument the target PDF.
2) Context monitoring code informs the enter of Javascript.
3) The Stage 1 shellcode setups Stage 2 code at runtime.
4) Context monitoring code informs the leave of Javascript.
5) Stage 2 shellcode is triggered by some event later.
(4) we randomly crawled over ten thousand of documents
using Google and tested them using anti-virus software.
The malicious samples are from Contagiodump and those
containing no Javascript are excluded.
Figure 5: Two-stage Attack
Table V: Dataset Used for Evaluation
Table IV: Methods provided in PDF to add scripts at runtime.
Method
Doc.addScript()
Doc.setAction()
Doc.setPageAction()
Field.setAction()
Bookmark.setAction()
Trigger Event
Open the document
Close/Save/Print the document
Open/Close a page
Operate on a form ﬁeld
Click the bookmark
instrumentation. Then, we instrument the dynamically added
scripts that are stored in the parameters of these methods.
A more robust solution we are working on is to hook these
methods in Javascript interpreters and instrument dynami-
cally inserted scripts on-the-ﬂy. Since we only need to hook
ﬁve methods, the development efforts and runtime overheads
should be minor.
Delayed Execution: Another evasion approach is to delay
the execution of Javascript. This can be achieved through
app.setTimeOut() and app.setInterval() [20].
Our countermeasure is similar to the one for staged attack
and we intentionally instrument the two Javascript methods
above.
V. EVALUATION
To validate the efﬁcacy of our proposed approach, we
implement a prototype on Windows. The front-end compo-
nent is implemented in Python 2.7. The runtime monitor
and detector in the back-end component are implemented in
C and Java, respectively. And, the tiny SOAP server in the
runtime monitor is built using the Web service framework
JAX-WS. Based on a large corpus of real data, we ﬁrst
evaluate the effectiveness of our detection model and then
examine the runtime overhead of our prototype.
A. Data Collection
We collected more than twenty thousand benign and mali-
cious samples for this study. Table V summarizes the dataset
used in our evaluation. The benign documents are from four
trusted sources: (1) we collected thousands of documents
from two users’ ﬁle systems; (2) we downloaded hundreds
of ofﬁcial forms and reports from large organizations like
governments and well-known companies; (3) we collected a
set of non-malicious PDF ﬁles from Contagiodump [42]; and
Category
Known Benign
Known Malicious
Total
# of Samples
18623
7370
25993
# with Javascript
994
7370
8364
Size
11.84 GB
172 MB
12.01 GB
B. Feature Validation
Before measuring detection accuracy, we ﬁrst validate the
capability of our detection features to distinguish between
benign and malicious documents. Here we present the sta-
tistical results of the features used in our system.
Static Features: We scanned all benign documents and
found 994 samples containing Javascript. The following
evaluation mainly relies on these 994 samples.
The ﬁrst static feature we validate is the ratio of PDF
objects on Javascript chains. Figure 6 shows the cumulative
distribution function of the ratio in benign and malicious
documents. As we can see, about 95% of malicious docu-
ments have a ratio over 0.2. We even found 64 samples with
a ratio of 1. This is reasonable since malicious documents
usually contain only one blank page. By contrast, the ratio