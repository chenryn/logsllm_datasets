### 4.3 Latent Bugs

Next, we analyzed whether the concurrency bugs in our study caused latent errors. A latent bug is defined as one where the erroneous state caused by (concurrent) requests is not immediately exposed to clients but only becomes apparent in subsequent requests. In other words, a latent bug corrupts internal data structures without causing an immediate failure, and the error is only triggered by a subsequent request that may not even need to run concurrently with any other request.

We found that a significant fraction of the concurrency bugs in our study were latent (15% versus 85% non-latent bugs). This result is somewhat surprising and has important implications. It suggests there is value in developing tools that can recover the correct internal state of a concurrent application, even after the requests that cause the error have been executed. Such tools could prevent the application from exhibiting incorrect behavior, even if the internal state is corrupt.

Table 4 shows a very high correlation between latent and semantic bugs: 92% of the latent bugs manifest themselves by returning wrong results to the client, and 92% of the semantic bugs are latent. (The fact that these values are exactly the same is likely a consequence of the relatively small sample size.)

This high correlation has two possible consequences for methods addressing these bugs. On the one hand, detection methods will have to account for the fact that these bugs manifest through violations of the application's semantics (rather than crashing or halting), which raises the bar for detecting them. On the other hand, this opens an opportunity for methods that handle non-crash faults in the background. For example, using Byzantine Fault Tolerance (BFT) replication, where the output of each request is voted upon, one might be able to mask the effects of these faults in the foreground. A primary replica issues the reply, and a background replica checks and recovers the state, ensuring the service remains consistent.

**Example of a Latent Bug:**

Bug #14262 involved concurrent requests that update both the table contents and the binlog. The code did not enforce that these updates occur in the same order, leading to inconsistencies. When a specific set of statements is executed on the primary replica, the binlog entries may be written in a different order than the table updates. If the primary replica fails, one of the backup replicas will take over with a state that diverges from the expected state. This results in incoherent data being returned to the client, depending on the exact interleaving of the threads.

### 4.4 Characteristics of Semantic Bugs

We further analyzed the incorrect outputs returned by semantic bugs to determine how difficult it is to detect them. We found that only one of the semantic bugs had a self-inconsistent output, meaning the buggy output clearly deviated from the expected reply. In this particular case, the wrong reply returned to clients contained information about the contents of a certain table, but also indicated that the table does not exist in the database. None of the remaining bugs were self-inconsistent, implying that there are limited benefits from detection techniques that try to validate the correctness of the application output by analyzing the replies.

We categorized the semantic bugs into two groups. The first group, containing 58% of these bugs, corresponds to outputs that reflect an ordering inconsistent with the ordering implied in previous replies. The second group, containing 25% of the bugs, corresponds to violations of transactional semantics, particularly the isolation property. Finally, 17% of the semantic bugs did not fall into either of these categories.

### 4.5 Internal Effects of Latent Bugs

We also analyzed the set of latent bugs in more detail, paying close attention to how the internal state was being corrupted. This understanding can be useful for developing techniques to detect and recover from these errors before they are exposed to the user. First, we determined whether each bug corrupted a single high-level data structure or modified two or more data structures in an inconsistent way. Only 8% of the latent bugs involved a single data structure, while the rest affected multiple structures.

### 4.6 Recovering from Latent Errors

We looked at the ability of the application to recover from latent bugs after they have caused an error (i.e., corrupted the internal state). We identified the latent errors that can be recovered using simple mechanisms, such as server restarts or reloading indexes. We found that in one-third of the cases, it is possible to use simple mechanisms to recover latent errors such that they go completely unnoticed by users. This increases the chances of adopting proactive recovery techniques.

### 4.7 Severity and Fixing Complexity

Finally, we compared the severity and complexity of fixing concurrency bugs belonging to different categories. Table 7 shows the average severity of concurrency bugs according to their immediacy and category. Latent bugs were considered more severe on average than non-latent bugs, with crash bugs being the most severe and performance bugs the least severe.

For the complexity of fixing concurrency bugs, we used four metrics: time to fix the bug, number of patching attempts, number of files changed in the final patch, and the number of comments exchanged in the bug reports. Table 8 presents the complexity for all four metrics. Our analysis revealed a surprising result: non-latent bugs were found to be more complex to fix than latent bugs in all metrics except for the number of patches. We do not have a clear explanation for this and defer further investigation to future work.

### 5. Discussion and Limitations

One of the key findings of our study is that the percentage of concurrency bugs present in bug databases is low. This is not surprising since concurrency bugs are hard to observe and reproduce. They are commonly referred to as Heisenbugs and contribute to their underrepresentation in bug databases for three main reasons:

1. **Reproducibility:** Concurrency bugs are often hard to reproduce, making it difficult for users to report them.
2. **Environment Differences:** Even when users can reproduce the bug on their machines, the developer's environment may differ, making it challenging to systematically reproduce the bug.
3. **Detection Difficulty:** Traditional debugging techniques may not be effective in identifying and fixing these subtle types of failures.

Thus, there is a research opportunity for improving methods that address these more subtle types of failures.

---

This revised text aims to provide a clearer, more coherent, and professional presentation of the original content.