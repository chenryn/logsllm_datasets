**欢迎关注我的公众号《壳中之魂》**
# **环境**
使用mysql，数据库名为test，含有1表名为users，users内数据如下
# **JDBC下的SQL注入**
在JDBC下有两种方法执行SQL语句，分别是Statement和PrepareStatement，即其中，PrepareStatement为预编译
## **Statement**
SQL语句
    SELECT * FROM users WHERE username = '" + username + "' AND password = '" + password + "'
当传入数据为
    username = admin
    password = admin
    SELECT * FROM users WHERE username = 'admin' AND password = 'admin';
即当存在username=admin和password=admin的数据时则返回此用户的数据
万能密码：admin\' and 1=1#
最终的sql语句变为了
    SELECT \* FROM users WHERE username = \'admin\' and 1=1#
即返回用户名为admin，同时1=1的所有数据，1=1恒为真，所以始终返回所有数据
如果输入的时：admin\' or 1=1#就会返回所有数据，因为admin\' or 1=1恒为真
所以JDBC使用Statement是不安全的，需要程序员做好过滤，所以一般使用JDBC的程序员会更喜欢使用PrepareStatement做预编译，预编译不仅提高了程序执行的效率，还提高了安全性
## **PreParedStatement**
与Statement的区别在于PrepareStatement会对SQL语句进行预编译，预编译的好处不仅在于在一定程度上防止了sql注入，还减少了sql语句的编译次数，提高了性能，其原理是先去编译sql语句，无论最后输入为何，预编译的语句只是作为字符串来执行，而SQL注入只对编译过程有破坏作用，执行阶段只是把输入串作为数据处理，不需要再对SQL语句进行解析，因此解决了注入问题
因为SQL语句编译阶段是进行词法分析、语法分析、语义分析等过程的，也就是说编译过程识别了关键字、执行逻辑之类的东西，编译结束了这条SQL语句能干什么就定了。而在编译之后加入注入的部分，就已经没办法改变执行逻辑了，这部分就只能是相当于输入字符串被处理
详情：[[数据库预编译为何能防止SQL注入？ -知乎(zhihu.com)]{.ul}](https://www.zhihu.com/question/43581628)
而Statement方法在每次执行时都需要编译，会增大系统开销。理论上PrepareStatement的效率和安全性会比Statement要好，但并不意味着使用PrepareStatement就绝对安全，不会产生SQL注入。
PrepareStatement防御预编译的写法是使用?作为占位符然后将SQL语句进行预编译，由于?作为占位符已经告诉数据库整个SQL语句的结构，即?处传入的是参数，而不会是sql语句，所以即使攻击者传入sql语句也不会被数据库解析
    String sql = "SELECT * FROM users WHERE username = ? AND password = ?";
    //预编译sql语句
    PreparedStatement pstt = connection.prepareStatement(sql);
    pstt.setString(1,username);
    pstt.setString(2, password);
    ResultSet resultSet = pstt.executeQuery();//返回结果集，封装了全部的产部的查询结果
首先先规定好SQL语句的结构，然后在对占位符进行数据的插入，这样就会对sql语句进行防御，攻击者构造的paylaod会被解释成普通的字符串，我们可以通过过输出查看最终会变成什么sql语句
可以发现还会对单引号进行转义，一般只能通过宽字节注入，下面将会在代码的层面展示为什么预编译能够防止SQL注入，同时解释为什么会多出一个转义符
## **不安全的预编译**
### **拼接**
总所周知，sql注入之所以能被攻击者利用，主要原因在于攻击者可以构造payload，虽然有的开发人员采用了预编译但是却由于缺乏安全思想或者是偷懒会直接采取拼接的方式构造SQL语句，此时进行预编译则无法阻止SQL注入的产生
代码（稍稍替换一下上面的代码）：
    //创建sql语句
    String sql = "SELECT * FROM users WHERE username = '" + req.getParameter("username") + "' AND password = '" + req.getParameter("password") + "'";
    System.out.println(sql);
    //预编译sql语句
    PreparedStatement pstt = connection.prepareStatement(sql);
    ResultSet resultSet = pstt.executeQuery(sql);//返回结果集，封装了全部的产部的查询结果
这样即使使用了预编译，但是预编译的语句已经是被攻击者构造好的语句，所以无法防御SQL注入
又或者是前面使用?占位符后，又对语句进行拼接，也会导致SQL注入
想要做到阻止sql注入，首先要做到使用?作为占位符，规定好sql语句的结构，然后在后面不破坏结构
### **使用in语句**
`String sql = \"delete from users where id in(\"+delIds+\");`
此删除语句大多用在复选框内，在in当中使用拼接而不使用占位符做预编译的原因是因为很多时候无法确定deIds里含有多少个对象
输入：`1,2`
正常只会输出id为1和2的值
如果此时输入：`1,2) or 1=1#`
就会形成SQL注入，输出苦库里所有的值
正确写法：
还是要用到预编译，所以我们要对传入的对象进行处理，首先确定对象的个数，然后增加同量的占位符?以便预编译
    public int gradeDelete(Connection con, String delIds) throws Exception{
        String num = "";
        //将对象分割开来，分割的点以实际而定
        String[] spl = delIds.split(".");
        //根据对象的个数添加同量的占位符?，用来预编译
        for(int i = 0; i
        select * from users where username = #{username} and password = #{password}
正常运行：
    username:admin
    password:admin
sql注入：
    username:admin" and 1=1#
    password:sef
成功sql注入
### **#{}**
Mapper设置
        select * from users where username = #{username} and password = #{password}
正常运行
    username:admin
    password:admin
尝试SQL注入
    username:admin" and 1=1#
    password:sef
SQL注入失败
### **使用like语句**
正确写法
    mysql: