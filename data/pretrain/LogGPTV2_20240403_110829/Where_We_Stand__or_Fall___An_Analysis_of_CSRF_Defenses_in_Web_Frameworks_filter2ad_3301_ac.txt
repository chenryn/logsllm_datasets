n
i
p
p
a
M
n
e
k
o
T
.
c
e
s
n
I
w
o
fl
r
e
v
O
r
a
J
e
i
k
o
o
C
k
c
e
h
C
.
g
i
r
O
/
.
f
e
R
y
t
l
u
a
F
s
r
o
r
r
E
l
a
c
i
g
o
L
k
c
a
t
t
A
y
a
l
p
e
R
l
a
t
o
T
l
a
t
o
T
l
a
t
o
T
-
-
-
#6 Fastify
#7 ThinkJS
#8 Total.js
#9 AdonisJs
#6 Falcon
#7 Zope
#8 Masonite
#9 TurboGears
#10 Web2py
-
#6 Dropwizard
#7 Blade
#8 ZK
#9 Apache Struts
#10 Apache Wicket -
#6 CodeIgniter
#7 FuelPHP
#8 Yii2
#9 Phalcon
#10 Li3
Total
Total
Total
JavaScript
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
Python
-
-
-
-
Java
-
-
-
-
-
-
-
-
-
-
PHP
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
5
-
-
6
-
-
5
-
-
2
3
6
2 1 6
4
5
8
-
-
-
4 1 3
1
7
5
3
2
-
-
-
-
-
-
-
-
4 1 4
4
5
5
4
8
7
8 5 11 15 5 1 75
1
3
9
9
3
44
7 13 10
7 1 4 7
7
= no security risk;
= conditional risk;
Legend:
= severe risk; - = not applicable; empty cell = zero;
blue = via library;
red = no defense;
and missing checks on safe HTTP methods which affect 33 and 25
frameworks, respectively. The least common category of threats
are those that corrupt the cookie integrity, e.g., both cookie tossing,
and jar overflow attacks affect 15 frameworks.
All frameworks with a CSRF defense, except four (Falcon,
Web2py, Apache Wicket, Phalcon), are exposed to at least one
threat for each of the four categories. ASP.Net Core is the least
exposed framework, providing a robust token-based defense ad-
dressing all threats against token generation, leakage, and cookie
integrity. The framework exposed to the highest relative number
of security risks—excluding not applicable ones and including inse-
cure defaults—is CakePHP, which is exposed to 8 out of 17 threats.
On average, we observe that each framework is exposed to four
security risks.
Looking at the affected programming languages, the most ex-
posed language is Python, with 45 security risks mostly being
implementation mistakes. In comparison, the least exposed lan-
guage is C#, which is affected by less than half security risks when
compared to Python, i.e., a total of 17 security risks.
Overall, an important insight of our study is that even if frame-
works offer a CSRF defense, their implementation may require
developers to be aware and then address additional security threats
-
-
-
-
-
-
-
-
-
-
JavaScript
-
-
-
-
-
-
-
-
-
-
-
-
-
Python
Java
-
-
-
PHP
-
-
-
-
C#
-
-
-
-
-
-
-
-
-
-
-
-
-
-
#1 Express
#2 Meteor
#3 Koa
#4 Hapi
#5 Sails
#1 Flask
#2 Django
#3 Tornado
#4 Bottle
#5 Pyramid
#1 Spring
#2 Play
#3 Spark
#4 Vert.x-Web
#5 Vaadin
#1 Laravel
#2 Symfony
#3 Slim
#4 CakePHP
#5 Zend/Laminas
#1 ASP Web Forms
#2 ASP MVC
#3 ASP Core
#4 Service Stack
#5 Nancy
Total
Total
Total
25 25 5 25 15 19 24 17 7
7 11 9 24 24 23 13 1
10
1 1 2 7
3
14
10 6 1 8 8
8
= conditional risk;
blue = via library;
5 24
16
= severe risk; - = not applicable;
red = no defense;
96
Legend:
= no security risk;
empty cell = zero;
157, 17 security risks are directly exploitable with one of two HTTP
requests and without relying on developers’ mistakes or misconfig-
urations of the targeted web application. We rank these security
risks as severe. In contrast, 140 security risks can be exploited only
under specific circumstances. For example, if a developer makes a
mistake, such as using a weak key or the insecure default configu-
ration, and the framework facilitates making that mistake, e.g., no
checks on key length. Other circumstances are whether attackers
will be allowed to perform sufficiently many requests to exploit
side channels without being detected by network monitoring tools.
Table 3 summarizes the results of our security assessment for the
top five frameworks of each language, and Table 4 presents the
results for the remaining, less popular frameworks (see §3 for the
methodology).
The 157 security risks comprise 80 implementation mistakes
affecting 37 frameworks, 37 CSRF token leakage affecting 34 frame-
works, 10 security risks in token generation of 17 frameworks, and
finally, 30 security risks against cookie integrity affecting 15 frame-
works. Accordingly, the most common category of threats against
CSRF defenses are implementation mistakes, e.g., replay attacks
377Where We Stand (or Fall): An Analysis of CSRF Defenses in Web Frameworks
RAID ’21, October 6–8, 2021, San Sebastian, Spain
that could compromise or even lead to a complete bypass of the
CSRF defense. The rest of this section details our findings for each
threat of §5.
6.2.1 Token Generation. All frameworks implement token gener-
ation mechanisms that are robust against attackers stronger than
the web attacker.
Weak Generators. No framework uses insecure cryptographic
libraries for cryptographic operations (tested via snyk [79]).
All
frameworks use cryptographically-secure PRNG (e.g.,
crypto.randomBytes [60] in JavaScript, os.urandom [71] in
Python, SecureRandom.nextBytes [54] in Java, random_bytes in
PHP [66], and RandomNumberGenerator.Fill [56] in C#), secure
cryptographic algorithms (e.g., AES-CBC for encrypting and
HMAC-256 for signing across languages), and cryptographic
libraries that are not known to be vulnerable.
Insufficient Randomness. In total, 13 frameworks use encrypted
or HMACed tokens. Of these, 10 frameworks require the developer
to provide a cryptographic key. Among these, however, Play is the
only framework that checks the key length (but not randomness)
and ensures that the default key is not used in production mode.
All other frameworks do not perform any check on the length
or randomness of the provided key, increasing the risk of using
weak keys. Also, we discovered that all web applications developed
via the command line interface of CakePHP share the same static,
default key, allowing an attacker to set valid CSRF tokens, e.g.,
during cookie tossing attack, and forge HTTP requests.
6.2.2 Token Leakage. Overall, the vast majority of frameworks
have strict CORS configuration (24 out of 25 frameworks) and offer
ad-hoc APIs to manage web forms and HTTP requests in order to
minimize cross-domain referrer leakage (32 out of 39 frameworks
with token-based defenses). In contrast, the most common security
risk is posed by timing-based side channels on the token comparison
(12 out of 39) if a web application has no means to detect or block
this brute-forcing technique.
Cross-Domain Referrer Leakage. Overall, seven out of the 39
frameworks that use token-based defenses provide APIs that place
the token in the URL, increasing the risk of a token leakage if the
web developer decides to place the CSRF token in the URL.
CORS Misconfiguration. Among tested frameworks, the only
framework with a default vulnerable CORS configuration is Play
which enables an attacker to leak the CSRF token and mount a
successful attack as explained in details in Section 6.3.
Side-channel Attacks. Most frameworks operate on top or be-
hind an HTTP server, and data compression at the HTTP/TLS level
depends on these components. In total, we observed that 15 frame-
works use the same CSRF token throughout the entire user session,
exposing tokens to the BREACH attack (assuming that HTTP com-
pression is enabled and the frequent brute-forcing requests are
not detected and blocked). Also, two frameworks, CodeIgniter and
Vert.x-Web, are generally exposed to BREACH attacks except cer-
tain cases, i.e., when using helper functions to build forms and when
sessions are not used, respectively. Only in these cases, the CSRF
token is unique per request. On the contrary, the remaining frame-
works provide a better protection against BREACH attacks. Most
frameworks (i.e., 22) use a fresh token which is updated frequently,
reducing the time window validity in which the symbols of a token
can be inferred because of data compression. For example, Vaadin,
Phalcon, and Web2py generate a token for each request. C#-based
frameworks follow a different approach. Instead of generating fresh
tokens, they use AES-CBC encrypted CSRF tokens with a fresh
initialization vector (IV) per request, which results in a different
token for each request, thus preventing BREACH.
Another side-channel can originate from the token compari-
son. Out of the 39 frameworks that use token-based defenses, 27
frameworks use constant-time comparison functions to validate
CSRF tokens. The rest (most notably Java-based frameworks) use
directly or via wrappers the default string comparisons, which are
vulnerable to timing-based side-channel attacks [98, 118] unless
web application does not detect the frequent spike in request during
this brute-forcing attack.
6.2.3 Cookie Integrity. This category of threats targets CSRF de-
fenses that use cookies, such as Double Submit cookies, which is
implemented by 22 frameworks. Overall, we detected a total of 30
security risks against cookie integrity in 15 frameworks, comprised
of 15 cookie tossing and 15 jar overflow attacks each. Although
seven of these frameworks sign and/or encrypt the CSRF cookie for
additional security, this approach does not help to prevent cookie
tossing [116] or jar overflow [97] attacks if an attacker controls
or hijacks a subdomain of the target domain. Attackers can sim-
ply reuse an encrypted token that they receive as normal users of
the web application. As opposed to these cases, seven frameworks
provide a better defense. For example, Flask stores the CSRF token
in a session cookie along with all other session information. An
attacker cannot easily forge a valid session cookie without know-
ing the entire victim’s session information, especially when the
cookie is encrypted. While this approach could be effective, it is
not an optimal solution since session information might grow in
size and the cookie size is limited [51]. A better alternative is to
store a unique user identifier within the CSRF token, as applied in
C#-based frameworks (except Nancy).
Implementation Mistakes. When looking at the mistakes in-
6.2.4
troduced during the validation of incoming requests, most frame-
works miss checks on safe HTTP methods (i.e., 25 out of 39 frame-
works with token-based defenses). Also, the majority of frameworks
(i.e., 33) do not provide adequate defenses against replay attacks.
Missing Checks and Token Verification. Web frameworks ver-
ify the CSRF tokens in two distinct ways: ad-hoc, or systematic. In
the systematic verification, the token is verified automatically for
state-changing requests, unless explicitly specified. In contrast, if
the framework offers ad-hoc verification, the developer has to man-
ually call the verification function for each HTTP request handler
that is expected to perform a state-changing operation. This has the
obvious drawback that the developer has to manually invoke the
CSRF verification module in all state-changing operations. In total,
out of the 39 frameworks that provide a token-based defense, 29
frameworks provide a systematic verification, nine frameworks re-
quire ad-hoc verification, and one framework, Symfony, offers both,
depending on whether the developer is using a built-in Symfony
form (systematic verification) or a standard HTML form (ad-hoc
verification).
378RAID ’21, October 6–8, 2021, San Sebastian, Spain
Xhelal Likaj, Soheil Khodayari, and Giancarlo Pellegrino
We observed that 25 frameworks that perform systematic ver-
ification exempt requests with safe HTTP methods (i.e., GET, OP-
TIONS, HEAD) [73] from the token verification step. This implies
that if developers use safe HTTP methods for state-changing oper-
ations, they will not be CSRF-protected by the framework. When
we reported these vulnerabilities, some frameworks, such as Sails,
Fastify and AdonisJS, decided to patch the issue by adding a pseudo-
random synchronizer token in a custom HTTP header. However,
other frameworks, such as Apache Struts or Express, were con-
cerned if adding such protection could urge application developers
to mis-use requests with safe HTTP methods for state-changing
operations, which is against the RFC 7231 specification [52]. Also,
this distinction of HTTP methods can lead to a bypass of the CSRF
defense. For example, we discovered that the CakePHP framework
allows the developer to override (via HTTP Method Override [59, 62])
the request method to an arbitrary string that is not an unsafe
method (or even an HTTP method), thus not triggering the CSRF
verification. We discuss the vulnerability in detail in Section 6.3. In
addition, four of these 25 frameworks have missing checks on unsafe
HTTP Methods since they also exclude DELETE, PUT, and PATCH
requests from the token verification. These frameworks perform
the CSRF verification only for POST HTTP requests.
Replay Attacks. If the CSRF token is leaked, replay attacks are
possible until the expiration of the token. In total, six out of the 39
frameworks mitigate replay attacks by applying per-request tokens
and invalidating them after they are consumed. However, the ma-
jority of the frameworks, i.e., 30/39, do not offer such protection. In
addition, in three frameworks, the mitigation against replay attacks
can be bypassed. Specifically, Vert.x-Web and Vaadin do provide
per-request tokens, but they generate a new token only if the web
page is refreshed. In Slim, an old CSRF token will remain in the
session storage until the storage capacity is reached. Accordingly,
in these cases, the same token can be abused multiple times.
Also, we noticed that many frameworks (e.g., Flask, Tornado,
ASP.NET) attach a timestamp to HTTP requests. OWASP [63] sug-
gests that timestamps can be used to prevent replay attacks. How-
ever, no framework currently does that. For example, the timestamp
in Tornado is an incomplete feature [80]. Yet, frameworks such as
ASP.NET MVC and ASP.NET Core allow adding extra information
to the CSRF cookie (e.g., nonces or timestamps [117]), which can
then be verified during the CSRF validation.
Cross-Site WebSocket Hijacking. We observed that WS connec-
tions are not treated the same in all frameworks. Overall, we found
seven frameworks that allow CSRF attacks in WS connections. Then,
five frameworks provide a weak defense against hijacking WS con-
nections by a CSRF attack. For example, Spring only performs a
lenient Origin header check, which can be bypassed if the Origin
header is missing or null. Also, all C#-based frameworks except
Nancy use an Origin header check (if SignalR library is not used)
which allow all origins by default.
Finally, we observed that the rest of the frameworks offer pro-
tections against attacks hijacking WS connections, including those
that not support WS (e.g., Symfony [78]). These frameworks use a
strict Origin header check, a CSRF token verification (e.g., Laravel),
or a combination of the two (e.g., Sails). Also, we noticed that one
framework, Hapi, uses the SameSite=Strict attribute on cookies
to prevent CSRF attacks on WS connections.
Logical Mistakes None of the frameworks we analyzed suffers
from insecure user-token mapping, whereas three frameworks imple-
ment a faulty Referer/Origin header check, as explained in Section 6.1.
Finally, we identified two logical errors in CakePHP and Vert.x-Web
which result in a complete bypass of the CSRF defense. In CakePHP,
for example, the route handler does not check the HTTP verb when
the connect API [1] is used since this API is designed to process
any kind of HTTP request. An attacker can exploit this by sending
an HTTP request with an unknown HTTP verb, bypassing the CSRF
protection. In the following subsection, we provide more details
about these vulnerabilities.
6.3 Examples of Critical Vulnerabilities.
In this section, we present three critical vulnerabilities affecting
Vert.x-Web, CakePHP, and Play, which are among the top five frame-
works of Java and PHP, respectively, and lead to a complete bypass
of the CSRF defense.
Vert.x-Web. The vulnerability [93] in Vert.x-Web framework re-
sides in the way CSRF verification is performed. Whenever a new
CSRF token is generated and signed, it is stored in a CSRF cookie
which is sent to the client-side. Additionally, this generated CSRF
token is stored in session storage. During the CSRF verification,
Vert.x-Web retrieves the CSRF token of the user from the session
storage. Then, the CSRF verification module compares the token
in the CSRF cookie with the token from the session storage. How-
ever, this leads to a logical error because the CSRF token in the