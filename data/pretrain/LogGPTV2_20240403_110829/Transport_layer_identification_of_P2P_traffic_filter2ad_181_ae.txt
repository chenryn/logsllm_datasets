Figure 3: Identiﬁed (upper line) vs. missed (bottom line) P2P ﬂows and bytes of our nonpayload methodology as
compared to payload examination (logarithmic scale.) Flows and bytes are shown in total volumes every ﬁve minutes.
Only 0.5% of P2P ﬂows are not identiﬁed. Note that despite large diﬀerence in utilization across our traces, the
fraction of missed ﬂows remains almost constant.
indicating that our approach is able to accurately identify
the vast majority of P2P traﬃc.
Fig. 3 better depicts the success of the nonpayload method-
ology. Speciﬁcally, we examine what portions of ﬂows and
bytes found by payload inspection are also identiﬁed by PTP
Algorithm as P2P . The bottom line plots the total number
of P2P ﬂows and bytes missed by the nonpayload algorithm
in ﬁve-minute intervals. The upper line plots the total vol-
umes of identiﬁed ﬂows and bytes. The Y axis is plotted
on logarithmic scale to facilitate comparison. The top row
of plots presents the number of ﬂows while the bottom row
the volumes in bytes. Finally, each column of plots in Fig. 3
reﬂects a diﬀerent trace.
Our nonpayload based methodology discovers more than
90% of total P2P bytes and 99% of P2P ﬂows. These per-
centages appear to be independent of the total traﬃc on
the link. Despite large variation in traﬃc volumes across
our traces (approximately one order of magnitude diﬀerence
between northbound and southbound direction in our moni-
tored link), PTP Algorithm performs suﬃciently in all cases.
Note that the number of missed P2P ﬂows is declining with
illustrating increasing knowledge of {IP,port} pairs
time,
and their connection behavior for PTP Algorithm. On the
other hand, the fraction of unidentiﬁed P2P bytes depends
on the ﬂuctuation of the volume of speciﬁc ﬂows, which man-
ifests itself in the time-varying lines of missed bytes. That is,
the shape of the plot of missed bytes vs. time is aﬀected by
the sizes of missed P2P ﬂows. While the number of missed
ﬂows using the nonpayload methodology may be decreasing,
a large missed P2P ﬂow may cause the volume of missed P2P
bytes to noticeably increase.
6.2 False positives
As described earlier in the paper (section 5), several of
our heuristics aim at minimizing false positives, i.e., ﬂows
misclassiﬁed as P2P. Minimizing false positives is a chal-
lenging task considering the dynamic nature, diversity of
sources and sheer volumes of traﬃc in the Internet core. We
strived to develop heuristics to account for and character-
ize the behavior of major classes (e.g. web, mail) of traﬃc
in order to discriminate them from P2P behavior. Thus,
false positives may originate from types of traﬃc that are
Figure 4: False positives vs correctly identiﬁed P2P ﬂows and bytes. Flows and bytes are shown in total volumes every ﬁve
minutes. False positives account for 8%-12% of the total estimate (false positives plus correctly recognized P2P traﬃc).
False positives correspond to approximately 8% to 12%
of the total estimate of P2P traﬃc. The percentage of mis-
classiﬁed ﬂows depends on the trace and the time within
the trace, but drops in all cases below 15% after the ﬁrst
few time intervals. Similar to missed ﬂows in the previous
section, false positives decrease and stabilize with time as
knowledge about the characteristics of speciﬁc IPs or pairs
increases.
The majority of false positives originate from the limited
number of samples for the speciﬁc {IP,port} pair. That is,
the sizes of both IPSet and PortSet in PTP Algorithm are
suﬃciently small to allow specious inference of connection
patterns. Fig. 5 illustrates the cumulative distribution func-
tion of the IPSet size of all false positives in our April trace.
In both directions of link (southbound and northbound), the
size of IPSet for 98% of all false positives is less than ﬁve (an
IPSet size of 5 implies that the speciﬁc {IP-port} pair had
connections with only ﬁve other distinct IPs). In fact, ap-
proximately 90% of false positives represent {IP,port} pairs
that communicate with one IP only.
6.3 Robustness of PTP Algorithm
We examine the robustness of our algorithm with respect
to the eﬀect of the time interval t between successive execu-
tions of PTP Algorithm.
The analysis of identiﬁed and missed P2P ﬂows and false
positives in the previous subsections is based on 5-minute
time intervals (t = 5 min in PTP Algorithm). We now
examine how t aﬀects the percentages of missed ﬂows and
false positives. Note that variable t designates the period
during which the ﬂow table is formed and the time interval
between successive executions of the algorithm.
Intuitively, short time intervals should be more sensitive
to transient phenomena and to IPs appearing in the link for
the ﬁrst time. Larger t allows for more eﬃcient proﬁling
of IPs and pairs. However, as t increases, memory require-
ments, e.g., the ﬂow table size, increase.
Fig. 6 illustrates how missed and false positive ﬂows vary
for three diﬀerent time intervals (t) during our April south-
bound trace. To facilitate comparison we present the aver-
age number of missed and false positive ﬂows per minute.
Figure 5: Cumulative distribution function of number of
distinct IPs in {IP-port} pairs that lead to false identiﬁcation
of ﬂows as P2P. 98% of misclassiﬁcations were based on pairs
with fewer than ﬁve distinct IPs in the IPSet. These false
positives are due to an insuﬃcient sample for the speciﬁc
pairs.
not proﬁled by our heuristics. However, attempting to elim-
inate false positives by proﬁling all types of traﬃc will only
increase the computational burden without suﬃciently im-
proving the outcome. It is also unrealistic, especially in the
Internet core where we need to pinpoint tens of thousands of
P2P ﬂows among the millions of ﬂows crossing a backbone
link (Tab.1).
Fig. 4 indicates the number of false positives produced by
PTP Algorithm. False positives represent ﬂows classiﬁed as
P2P by PTP Algorithm but not identiﬁed as such by pay-
load analysis. On the other hand, PTP Algorithm detects
true P2P ﬂows that were missed by payload analysis due
to the limitations described in section 4. These ﬂows are
not included in the false positives in Fig. 4; we will describe
them in the next section.
Fig. 4 presents the volume of ﬂows and bytes correctly
classiﬁed as P2P, compared to the corresponding amounts
of false positives. The ﬁgure is structured similarly to Fig. 3;
the top and bottom rows show ﬂows and bytes respectively,
while columns refer to our three diﬀerent traces, and vol-
umes plotted in ﬁve-minute intervals.
separately examined ﬂows that were identiﬁed as P2P by
PTP Algorithm but were missed by payload inspection, and
had at least one port number from our known P2P ports list
or one of the IPs consistently using P2P source or destina-
tion ports. History and connection patterns of IPs partici-
pating in such ﬂows reveal their P2P nature.
Additionally and most important, PTP Algorithm can ef-
fectively discover unknown P2P protocols. We encountered
this powerful capability in the process of minimizing the
number of false positives. Comparing nonpayload with pay-
load classiﬁcation, we observed numerous false positives in
ﬁve speciﬁc port numbers, namely 22321, 7674, 7675, 5335
and 9493. Inspection of payload for traﬃc under these port
numbers revealed that all of the aforementioned ports rep-
resent traﬃc of three distinct P2P protocols/networks un-
known to us. Two of the networks originate in Asia and
use both TCP and UDP: Soribada (ports 7674,7675, 22321)
and GoBoogy (port 5335). To date we have not been able
to identify the P2P protocol responsible for the traﬃc under
port 9493. However, a large number of packets contain the
string “GET /?p2pmethod=” in the 16-byte packet payload
available to us. Since access to the full packet payload is
not possible, we have no way of knowing what fraction of
the rest of the false positives mask yet more P2P protocols
that remain unidentiﬁed.
In total we were able to discover approximately 18,000 ad-
ditional P2P ﬂows (350 additional Mbytes) over those dis-
covered with the payload methodology every ﬁve minutes on
the average for the April northbound trace, 3,000 additional
ﬂows (15 additional MBytes) for the April southbound trace
and 1,900 additional ﬂows (20 additional Mbytes) for the
February southbound trace.
6.5 Payload vs. nonpayload identiﬁcation of
P2P trafﬁc
The previous section suggests the ﬂexibility of nonpay-
load methodologies. Here we provide an overall assessment
of advantages and disadvantages of payload versus nonpay-
load methodologies based on our experience. Overall, non-
payload methodologies provide diverse beneﬁts over payload
analysis, speciﬁcally with regard to:
Privacy issues: Nonpayload methodologies oﬀer an ideal
solution to the many perceived and real privacy and legal
alarms triggered by even the idea of inspecting of user pay-
load. Indeed, RIAA litigation has inspired among end users
as well as ISPs increased concern over privacy, which will
make providers even more reluctant to allow payload anal-
ysis. One could possibly obviate privacy issues in the pay-
load analysis by reporting only aggregate information of P2P
traﬃc at the monitoring site.
Anonymization of IP addresses: Nonpayload methodolo-
gies do not require anonymization of IP addresses, which
if performed inhibits further analysis of topological charac-
teristics of traﬃc (e.g., IPs cannot be aggregated to Au-
tonomous Systems). If payload examination is permitted,
ISPs require anonymization of IP addresses so that individ-
ual users cannot be linked to packet payload.
Storage overhead : The storage needed to support passive
analysis of payload traces signiﬁcantly grows with increasing
bytes of captured payload. Our approach requires only up
to layer-4 header information. Alternatively, packet or ﬂow
sampling could reduce storage overhead.
Figure 6: The eﬀect of time interval t on missed and
false positive ﬂows. As t increases the numbers of
missed ﬂows and false positive ﬂows decreases.
As expected, the 2-minute line appears noisier between suc-
cessive intervals (observe the large transient spike in the
number of false positives), in contrast to the smoother lines
for 5- and 10-minute intervals. While for missed ﬂows the
three lines fall on top of each other after the ﬁrst 30 minutes
in the trace, the number of false positives drops continually
as t increases. However, the diﬀerence in the volume of false
positives for ﬁve and ten minute intervals is trivial relative
to the number of ﬂows in the link, especially when compar-
ing byte volumes. Since memory requirements for 5-minute
intervals are only a fraction of those for 10-minute intervals,
we settled on 5-minute intervals for our analysis.
The large spike in the 2-minute line of false positives is
caused by an address space scan in our trace. At this speciﬁc
time interval a distinct source IP scanned the address space
at destination port 4899 creating approximately 7,000 ﬂows
per minute. Our false positive heuristics eﬀectively recog-
nized that this IP is not P2P after two intervals when t = 2
min, indicated by the false positive line dropping sharply af-
ter the sudden increase. For larger time intervals our heuris-
tics eﬀectively recognize all non P2P scanning ﬂows, and
thus no spike appears in the 5 or 10 minute lines in Fig. 6.
6.4 Not so false “false positives"
An advantage of nonpayload identiﬁcation of P2P traﬃc
is the possibility to overcome limitations of payload analysis
(see also section 4). Two inescapable limitations of payload
analysis are the following:
Payload methodologies cannot identify the invisible.
If no
payload exists, P2P ﬂows cannot be identiﬁed. Such ﬂows
might be actual nonpayload ﬂows (e.g., TCP acknowledg-
ment streams of ﬁle transfers), or ﬂows with encrypted pay-
load.
Payload methodologies can only verify and not discover. In-
herently, payload methodologies require a priori knowledge
of the anatomy of P2P protocols, and as such they can only
be applied to previously reverse-engineered, known proto-
cols.
In contrast, our methodology is not aﬀected by these con-
straints. Instead we are able to discover numerous ﬂows that
were missed by payload analysis. To identify such ﬂows we
Processing overhead : Both in passive and active monitor-
ing, payload processing at network speed of an OC-48 link is
far beyond trivial due to the system memory bus bottleneck.
The bus is used by network monitoring cards to transfer the
whole packet header plus the examined payload bytes to
memory.
Increasing the volume of captured payload risks
packet loss at high utilizations of a monitored link.
Reverse-engineering of protocols vs. P2P behavior analy-
sis: As noted previously in the paper (section 6.4), payload
methodologies have the ability only to verify and pinpoint
the existence of protocols that have been dissected in ad-
vance. On the contrary, monitoring nonpayload P2P be-
havior bypasses the requirement of previous knowledge and
facilitates detection of unfamiliar P2P networks.
Encryption: Payload methodologies fail for encrypted pay-
load which is bound to eventually become common, espe-
cially for newer versions of P2P protocols.
On the other hand, our methodology, at least in its cur-
rent form, is inferior to payload analysis regarding detailed
analysis of speciﬁc P2P protocols. Since we model the gen-
eral behavior of distributed (or semi-distributed) P2P net-
works, our algorithm currently cannot monitor individual
protocols.
7. P2P /FILE-SHARING TRAFFIC TRENDS
Recently, popular media sources have reported a sharp de-
cline in peer-to-peer (P2P) traﬃc during the last year [5] [26],
with P2P user populations reportedly dropping as much as
50%. This assertion, if true, would indicate a reversal in the
trend of the constant increase of P2P activity over the last
years (ﬁve out of the top six downloads from sourceforge.net
were P2P clients on July 27 2004).
In this section, we discuss these alleged P2P claims and
contrast them to our own results. Notwithstanding the in-
herently challenging nature of P2P traﬃc classiﬁcation, as
we have deﬁnitively illustrated in this study, media reports
are rarely based on measuring, much less classifying, any
traﬃc on the Internet. Indeed, these reports base their con-
clusions on telephone surveys or periodic samples of log ﬁles
for a limited number of P2P networks/clients (speciﬁcally
for Kazaa, WinMx and a small number of Gnutella clients,
such as Morpheus, Grokster and Bearshare) that might have
been waning in popularity relative to newer, more advanced
P2P networks (e.g., eDonkey or BitTorrent).
However, using both payload and nonpayload methodolo-
gies, our OC-48 traces indicate that, if measured accurately,
P2P traﬃc has never declined; indeed we have never seen
the proportion of overall P2P traﬃc decrease over time (any
change is an increase) in any of our data sources. While
bitrate trends do not necessarily reﬂect trends in user popu-
lation counts, we believe that these statistics show that P2P
networks are largely unaﬀected by RIAA litigious practices.
In addition to the limitations of payload analysis method-
ologies described in section 4, we list here further compli-
cations that may aﬀect comparison of P2P traﬃc volumes.
Speciﬁcally:
44-byte packets: In our older traces (D09 of May 2003,
D10 of January 2004), CAIDA monitors captured 44 bytes
of each packet (see section 2), leaving 4 bytes of TCP pack-
ets for examination (TCP headers are typically 40 bytes for
packets that have no options). To facilitate fair payload
comparison, we only use 4-byte payload heuristics through-