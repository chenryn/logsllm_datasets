       valid_lft forever preferred_lft forever
    inet6 fe80::42:acff:fe12:2/64 scope link
       valid_lft forever preferred_lft forever
user@docker2:~$
```
令人惊讶的是，容器有两个接口。`eth0`接口连接到与覆盖网络`myoverlay`相关联的网络，但是`eth1`与新网络`172.18.0.0/16`相关联。
### 注
至此，您可能已经注意到容器中接口的名称使用了 VETH 对命名语法。Docker 使用 VETH 对将容器连接到网桥，并直接在容器端接口上配置容器 IP 地址。这将在[第 4 章](04.html "Chapter 4. Building Docker Networks")、*构建 Docker 网络*中详细介绍，我们将在其中详细介绍 Docker 如何将容器连接到网络。
为了弄清楚连接到哪里，让我们试着找到容器的`eth1`接口连接到的 VETH 对的另一端。如[第 1 章](01.html "Chapter 1. Linux Networking Constructs")、 *Linux 网络结构*所示，我们可以使用`ethtool`来查找`interface ID`中的 VETH 对对等体。然而，在查看用户定义的网络时，有一种更简单的方法可以做到这一点。请注意，在前面的输出中，VETH 对名称的语法为:
```
@if
```
幸运的是，`if`后显示的数字是 VETH 对另一侧的`interface ID`。因此，在前面的输出中，我们看到`eth1`接口的匹配接口有一个`11`的`interface ID`。查看本地 Docker 主机，可以看到我们定义了一个接口`11`，其`peer interface ID`为`10`，与容器中的`interface ID`匹配:
```
user@docker2:~$ ip addr show
……
9: docker_gwbridge:  mtu 1500 qdisc noqueue state UP group default
    link/ether 02:42:af:5e:26:cc brd ff:ff:ff:ff:ff:ff
    inet 172.18.0.1/16 scope global docker_gwbridge
       valid_lft forever preferred_lft forever
    inet6 fe80::42:afff:fe5e:26cc/64 scope link
       valid_lft forever preferred_lft forever
11: veth02e6ea5@if10:  mtu 1500 qdisc noqueue master docker_gwbridge state UP group default
    link/ether ba:c7:df:7c:f4:48 brd ff:ff:ff:ff:ff:ff
    inet6 fe80::b8c7:dfff:fe7c:f448/64 scope link
       valid_lft forever preferred_lft forever
user@docker2:~$
```
注意 VETH 对(`interface ID 11`)的这一端有一个名为`docker_gwbridge`的主节点。也就是说，VETH 对的这一端是桥`docker_gwbridge`的一部分。让我们再次看看 Docker 主机上定义的网络:
```
user@docker2:~$ docker network ls
NETWORK ID          NAME                DRIVER
9c91f85550b3        myoverlay           overlay
b3143542e9ed        none                null
323e5e3be7e4        host                host
6f60ea0df1ba        bridge              bridge
e637f106f633        docker_gwbridge     bridge
user@docker2:~$
```
除了我们的覆盖网络，还有一个新的用户定义的同名网桥。如果我们检查这个桥，我们会看到我们的容器如预期的那样连接到它，并且网络定义了一些选项:
```
user@docker2:~$ docker network inspect docker_gwbridge
[
    {
        "Name": "docker_gwbridge",
        "Id": "10a75e3638b999d7180e1c8310bf3a26b7d3ec7b4e0a7657d9f69d3b5d515389",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": null,
            "Config": [
                {
                    "Subnet": "172.18.0.0/16",
                    "Gateway": "172.18.0.1/16"
                }
            ]
        },
        "Internal": false,
        "Containers": {
            "e3ae95368057f24fefe1a0358b570848d8798ddfd1c98472ca7ea250087df452": {
 "Name": "gateway_e3ae95368057",
 "EndpointID": "4cdfc1fb130de499eefe350b78f4f2f92797df9fe7392aeadb94d136abc7f7cd",
 "MacAddress": "02:42:ac:12:00:02",
 "IPv4Address": "172.18.0.2/16",
 "IPv6Address": ""
 }
        },
        "Options": {
 "com.docker.network.bridge.enable_icc": "false",
 "com.docker.network.bridge.enable_ip_masquerade": "true",
 "com.docker.network.bridge.name": "docker_gwbridge"
        },
        "Labels": {}
    }
]
user@docker2:~$
```
正如我们所看到的，这个桥的 ICC 模式被禁用。ICC 防止同一网桥上的容器直接相互通信。但是这个桥的目的是什么，为什么在`myoverlay`网络上产生的容器被连接到它上面？
`docker_gwbridge`网络是覆盖连接容器的外部容器连接的解决方案。覆盖网络可视为第 2 层网段。您可以将多个容器连接到它们，网络上的任何东西都可以通过本地网段进行通信。然而，这不允许容器与网络之外的资源对话。这限制了 Docker 通过发布的端口访问容器资源的能力以及容器与外部网络对话的能力。如果我们检查容器的路由配置，我们可以看到它的默认网关指向`docker_gwbridge`的接口:
```
user@docker2:~$ docker exec web1 ip route
default via 172.18.0.1 dev eth1
172.16.16.0/24 dev eth0  proto kernel  scope link  src 172.16.16.129
172.18.0.0/16 dev eth1  proto kernel  scope link  src 172.18.0.2
user@docker2:~$ 
```
再加上`docker_gwbridge`启用了 IP 伪装，这意味着容器仍然可以与外部网络对话:
```
user@docker2:~$ docker exec -it web1 ping 4.2.2.2
PING 4.2.2.2 (4.2.2.2): 48 data bytes
56 bytes from 4.2.2.2: icmp_seq=0 ttl=50 time=27.473 ms
56 bytes from 4.2.2.2: icmp_seq=1 ttl=50 time=37.736 ms
--- 4.2.2.2 ping statistics ---
2 packets transmitted, 2 packets received, 0% packet loss
round-trip min/avg/max/stddev = 27.473/32.605/37.736/5.132 ms
user@docker2:~$
```
与默认网桥网络一样，如果容器试图通过路由到达外部网络，它们将隐藏在 Docker 主机 IP 接口后面。
这也意味着自从我使用`-P`标志在这个容器上发布端口以来，Docker 已经使用`docker_gwbridge`发布了那些端口。我们可以使用`docker port`子命令验证端口是否已发布:
```
user@docker2:~$ docker port web1
80/tcp -> 0.0.0.0:32768
user@docker2:~$
```
并通过检查`iptables`的网络过滤规则来验证端口是否在`docker_gwbridge`上发布:
```
user@docker2:~$ sudo iptables -t nat -L
……
Chain DOCKER (2 references)
target     prot opt source      destination
RETURN     all  --  anywhere    anywhere
RETURN     all  --  anywhere    anywhere
DNAT       tcp  --  anywhere    anywhere  tcp dpt:32768 to:172.18.0.2:80
user@docker2:~$
```
正如您在前面的输出中看到的，Docker 正在使用`docker_gwbridge`上的容器接口向 Docker 主机的接口提供端口发布。
此时，我们的容器拓扑如下所示:
![How to do it…](img/B05453_03_04.jpg)
将容器添加到覆盖网络会自动创建桥`docker_gwbridge`，该桥用于容器与主机之间的连接。`myoverlay`覆盖网络仅用于与定义的`subnet`、`172.16.16.0/24`相关的连接。
现在让我们再启动两个容器，一个在主机`docker3`上，另一个在主机`docker4`上:
```
user@docker3:~$ docker run --net=myoverlay --name web2 -d jonlangemak/web_server_2
da14844598d5a6623de089674367d31c8e721c05d3454119ca8b4e8984b91957
user@docker3:~$
user@docker4:~$  docker run --net=myoverlay --name web2 -d jonlangemak/web_server_2
be67548994d7865ea69151f4797e9f2abc28a39a737eef48337f1db9f72e380c
docker: Error response from daemon: service endpoint with name web2 already exists.
user@docker4:~$
```
请注意，当我试图在两台主机上运行同一个容器时，Docker 告诉我容器`web2`已经存在。Docker 不允许您在同一覆盖网络上运行同名的容器。回想一下，Docker 正在键值存储中的覆盖上存储与每个容器相关的信息。当我们开始谈论 Docker 名称解析时，使用唯一的名称变得很重要。
### 注
此时，您可能会注意到容器可以通过名称相互解析。这是用户定义网络真正强大的功能之一。我们将在[第 5 章](05.html "Chapter 5. Container Linking and Docker DNS")、*容器链接和 Docker DNS* 中更详细地讨论这一点，在这里我们讨论 DNS 和链接。
用唯一的名称在`docker4`上重新启动容器:
```
user@docker4:~$ docker run --net=myoverlay --name web2-2 -d jonlangemak/web_server_2
e64d00093da3f20c52fca52be2c7393f541935da0a9c86752a2f517254496e26
user@docker4:~$
```
现在我们有三个容器在运行，每个参与覆盖的主机上有一个。让我们花一点时间想象一下这里发生了什么:
![How to do it…](img/B05453_03_05.jpg)
我删除了图表中的主机和底层网络，以便于阅读。如上所述，每个容器都有两个 IP 网络接口。一个 IP 地址在共享覆盖网络上，在`172.16.16.128/25`网络中。另一个在网桥`docker_gwbridge`上，在每台主机上都是一样的。由于`docker_gwbridge`独立存在于每台主机上，因此不需要为该接口设置唯一的地址。该桥上的容器接口仅用作容器与外部网络对话的手段。也就是说，同一台主机上的每个容器(在覆盖型网络上有一个网络接口)都将在同一个网桥上接收一个 IP 地址。
您可能想知道这是否会引起安全问题，因为所有具有覆盖网络的容器，无论它们连接到哪个网络，都将在共享桥(`docker_gwbridge`)上有一个接口。回想一下之前我指出`docker_gwbridge`禁用了 ICC 模式。这意味着，虽然许多容器可以部署到桥上，但它们都不能通过桥上的 IP 接口直接相互通信。我们将在[第 6 章](06.html "Chapter 6. Securing Container Networks")、*保护容器网络*中详细讨论这一点，在这里我们将讨论容器安全，但是现在我们知道 ICC 防止 ICC 在共享桥上发生。
覆盖网络上的容器认为它们在同一个网段上，或者彼此相邻的第 2 层。让我们通过从容器`web1`连接到容器`web2`上的 web 服务来证明这一点。回想一下，当我们提供容器`web2`时，我们没有要求它发布任何端口。
与其他 Docker 网络结构一样，连接到同一覆盖网络的容器可以在绑定了服务的任何端口上直接相互对话，而无需发布端口:
### 注
重要的是要记住，Docker 主机没有直接的方法来连接到覆盖连接的容器。对于桥网络类型，这是可行的，因为主机在桥上有一个接口，在覆盖类型网络的情况下，这个接口不存在。
```
user@docker2:~$ docker exec web1 curl -s http://172.16.16.130
    Web Server #2 - Running on port 80
user@docker2:~$
```
如您所见，我们可以从容器`web1`成功访问运行在容器`web2`中的 web 服务器。这些容器不仅位于完全不同的主机上，而且主机本身也位于完全不同的子网中。这种类型的通信以前只有当两个容器位于同一个主机上并连接到同一个桥时才可用。我们可以通过检查每个容器上的 ARP 和 MAC 条目来证明容器认为自己是第 2 层相邻的:
```
user@docker2:~$ docker exec web1 arp -n
Address         HWtype  HWaddress         Flags Mask            Iface
172.16.16.130   ether   02:42:ac:10:10:82 C                     eth0
172.18.0.1      ether   02:42:07:3d:f3:2c C                     eth1
user@docker2:~$
user@docker3:~$ docker exec web2 ip link show dev eth0
6: eth0@if7:  mtu 1450 qdisc noqueue state UP
    link/ether 02:42:ac:10:10:82 brd ff:ff:ff:ff:ff:ff
user@docker3:~$ 
```
我们可以看到容器有一个来自远程容器的 ARP 条目，指定了它的 IP 地址和 MAC 地址。如果容器不在同一个网络上，容器`web1`就不会有`web2`的 ARP 条目。
我们可以从主机`docker4`上的容器`web2-2`验证我们在所有三个容器之间都有本地连接: