and play with its interface. Then, the student will tell us
the experience when running the application in four different
browsers.
We now describe a summary of the API speciﬁc test. First,
when we compare JSKERNEL with the other two defenses,
i.e., Fuzzyfox and DeterFox, JSKERNEL is the one with the
least observable differences. Speciﬁcally, Fuzzyfox executes
13 apps out of 20 apps with observable differences, DeterFox
7 out of 20, and JSKERNEL 4 out of 20. All the differences
in JSKERNEL are either a higher or lower FPS caused by the
usage of the synchronous timer performance.now, because
performance.now is mainly used for ﬁne-grained time-related
operations, such as timing and generating an animation with
a time constraint.
Second, both Fuzzyfox and DeterFox introduce non-time
related differences, such as loading errors of the app, images,
objects, and background. By contrast, JSKERNEL introduces
only time-related differences, such as higher frames per second
(FPS) and faster clock. The reason is that both Fuzzyfox
and DeterFox operate on the browser source code, which is
written in C or C++. That is, a small engineering error may
cause the browser to crash. JSKERNEL is written in JavaScript
and therefore has a good memory protection provided by the
browser.
2) Semi-automated Compatibility Test on Alexa Top 100
Websites: In this section, we test the compatibility of JSKER-
NEL with Alexa Top 100 websites. Here is our methodology.
We visit each website twice, one with JSKERNEL and the
other without JSKERNEL, on Google Chrome Browser. During
each visit, we output the document object tree (DOM) of
the website and serialize the structure into a string. Then,
we compare these two strings using cosine similarity: if the
similarity is larger than 99%, we will consider that these two
visits render the same results; if not, we will ask a human to
look at both rendering results.
Our evaluation results show that 90% of websites have
larger than 99% similarity scores if visited with and without
JSKERNEL. We manually checked the rest ten websites, which
are all caused by dynamic contents, such as ads. At the same
time, we visit these ten websites twice directly on Google
Chrome without JSKERNEL and calculate the similarity score.
The score is very close, i.e., less than 2% difference, to the
one obtained from JSKERNEL compatibility test.
3) A Week-long User Experience Test: In this section, we
present a week-long user experience test on compatibility.
Speciﬁcally, we ask a student that is not on the author list
to install our JSKERNEL on a Chrome browser on his laptop
and browse the Internet for a week. In the ﬁrst two days,
the student does experience three issues, one on Overleaf, an
online Latex editor, one on Google Calendar, and another on
Google Map—all the issues are ﬁxed in the current version.
The ﬁrst issue is that the student cannot compile a PDF ﬁle on
overleaf. We looked into it and found that the reason is that
our web worker implementation has a bug in dealing with an
absolute path. The second issue is that all the Mondays on
Google Calendar are shown as Wednesdays due to a bug in
our Date object implementation. The last issue is that one
Google Map Worker accesses the Worker location, which
falsely points to our kernel worker due to a bug. After we
ﬁxed all the bugs, the student did not experience any other
compatibility issues in the rest ﬁve days of using the extension.
VI. DISCUSSION
In this section, we discuss several issues related to JSKER-
NEL. First, we consider the robustness of JSKERNEL against
self-modifying code, i.e., when the adversary knows that the
client browser installed JSKERNEL to prevent attacks. We
believe that even if the adversary knows that JSKERNEL is
present, the adversary cannot bypass the protection enforced
by it. The reasons are fourfold. (i) All the JSKERNEL code
and attack-related APIs are encapsulated inside the JSKER-
NEL kernel so that an adversary cannot access them. (ii)
Even if the adversary modiﬁes the interface of JSKERNEL
provided by the kernel, such modiﬁcation will only affect the
website’s functionality—but still the adversary cannot access
corresponding APIs. These are encapsulated inside JSKERNEL
kernel. (iii) JSKERNEL injects JSKERNEL kernel into every
new JavaScript context, such as a newly-opened window and
an iframe. (iv) JSKERNEL obtains all the JavaScript functions
and redeﬁnes them using a customized pointer. JSKERNEL
also adopts Object.freeze() to avoid any pollutions to the
prototype property of system objects (e.g., Array and Object).
In the future, we plan to follow Bhargavan et al. [27] to write
JSKERNEL in a defensive JavaScript subset.
Second, we discuss the capability of JSKERNEL in defend-
ing against unknown vulnerabilities. JSKERNEL can defend
against unknown timing attacks because the scheduler arranges
all asynchronous events in a deterministic order. At present,
JSKERNEL only defends against other web concurrency at-
tacks on a case-by-case base, because JSKERNEL requires
vulnerability-speciﬁc policies. We leave it as a future work
to automatically extract policies for a new vulnerability.
Third, we discuss the difference between the triggering
condition and the the underlying vulnerability. Web concur-
rency attacks capture the nature of vulnerability triggering
condition, i.e., the needs of concurrency information from
different threads to trigger a vulnerability, while the underlying
vulnerability may differ, which could be a user-after-free, a
cross-site information leak or a privilege escalation.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:24:51 UTC from IEEE Xplore.  Restrictions apply. 
73
VII. RELATED WORKS
We ﬁrst present existing defenses against timing attacks
and low-level attacks. Next, we overview existing third-party
JavaScript isolation works.
1) Defense against Timing Attacks: There are three cat-
egories of defenses, i.e., attack surface reduction, fuzzy time,
and determinism, to prevent timing attacks. First, Snyder et
al. [1] show that one can disable certain JavaScript APIs,
such as WebGL, Audio, and WebAssembly, to reduce the
attack surface. As one of its applications, Snyder et al. can
also be used to prevent timing attacks by disabling timing
related APIs. Though being effective, such approach will bring
compatibility issues for these websites adopting disabled APIs.
Second, Kohlbrenner et al. [6] randomize the performance
of executions by introducing pause tasks into the browser’s
event queue. Their prototype browser, Fuzzyfox, obfuscates
the duration for a speciﬁc execution. Inherited from the idea of
Kohlbrenner et al. [6], JavaScript Zero [3] proposes to redeﬁne
certain timing-related APIs and introduce fuzzy time in the
browser extension level. Such approach signiﬁcantly increases
the protection range because any users can deploy the pro-
posed extension on a daily basis. However, because JavaScript
Zero still adopts fuzzy time, it cannot fundamentally prevent
timing attacks just as Kohlbrenner et al.
Lastly, deterministic execution model is another strategy to
mitigate timing attacks. The deterministic browser project [14]
is the ﬁrst attempt to apply deterministic execution model to
the modern browser. As a comparison, JSKERNEL, can be in-
stalled on any existing web browsers, such as Google Chrome,
Firefox and Microsoft Edge, to protect users, and also able to
defend against low-level attacks. At the same time, researchers
also propose deterministic models for speciﬁc timing channels,
such as ﬂoating-point operations. For example, CTFP [28]
uniformizes the execution of certain heavy-weight ﬂoating-
point operations. As a comparison, JSKERNEL can prevent
all types of timing channels including ﬂoating-point ones.
It is worth noting that determinism [29], [30], [31], [32],
[33], [34], [35] was proposed long before DeterFox [14] to pre-
vent timing attacks in general. Apart from defending against
timing attacks, the determinism technology is also used to
schedule multi-thread programs to increase their stability [36],
[37], [38], [39], [40], [41]. Additionally, deterministic virtual
clock is used to guard the sequence of execution in distributed
systems [42].
2) Defense against Low-level Attacks: Snyder et al. [1]
disable certain JavaScript APIs to reduce attack surface but
also at the price of reduced functionalities. BrowserShield [2]
proposes to defend against low-level, zero-day browser vulner-
ability via rewriting JavaScript code. Although the rewriting is
effective in defending against many low-level vulnerabilities,
it at the same time incurs signiﬁcant overhead because it
instruments every JavaScript operations. JShield [43] modiﬁes
a browser to enforce their signatures for security—the defense
is effective but also brings compatibility issues. That
is,
JShield is only applicable to one type of browser and needs
to be updated with every browser version. As a comparison,
JSKERNEL is compatible with three browsers and does not
need any updates for a new browser version.
3) Third-party JavaScript Isolation: Third-party JavaScript
isolation, such as AdJail [44], AdSentry [45], JSand [46],
PAD [47], AdJust [48], and Virtual Browser [49], provides
a sandbox for third-party JavaScript like ads. These works
can successfully prevent third-party JavaScript from tampering
with trusted contents, such as ﬁrst-party JavaScript.
Currently, JSKERNEL adopts an anonymous closure for
isolation, but can adopt any of the aforementioned isola-
tion techniques proposed by prior work. The contribution of
JSKERNEL is the capability of enforcing a customized event
scheduling policy to defend against web concurrency attacks—
the isolation component of JSKERNEL is an orthogonal prob-
lem from event scheduling.
VIII. CONCLUSION
In this paper, we proposed JSKERNEL, the ﬁrst approach
to introduce a kernel concept
that enforces the order of
JavaScript execution of threads and events to defend against
web concurrency attacks. We implemented a prototype system
as extensions to three major commercial web browsers, i.e.,
Firefox, Google Chrome, and Edge and made it open-source.
Our evaluation shows that JSKERNEL is fast, robust to a
variety of attacks and is backward compatible with existing
web applications.
ACKNOWLEDGEMENT
We want to thank our shepherd, Neeraj Suri, and anonymous
reviewers for their helpful comments and feedback. This work
was supported in part by National Science Foundation (NSF)
grant CNS-18-54001. The views and conclusions contained
herein are those of the authors and should not be interpreted as
necessarily representing the ofﬁcial policies or endorsements,
either expressed or implied, of NSF.
REFERENCES
[1] P. Snyder, C. Taylor, and C. Kanich, “Most websites don’t need to
vibrate: A cost-beneﬁt approach to improving browser security,” in
Proceedings of the 2017 ACM CCS, 2017.
[2] C. Reis, J. Dunagan, H. J. Wang, O. Dubrovsky, and S. Esmeir,
“Browsershield: vulnerability-driven ﬁltering of dynamic html,” in
OSDI: USENIX Symposium on Operating Systems Design and Imple-
mentation, 2006.
[3] M. Schwarz, M. Lipp, and D. Gruss, “Javascript zero: Real javascript
and zero side-channel attacks,” in NDSS, 2018.
[4] Canvas
defender.
https://addons.mozilla.org/en-US/ﬁrefox/addon/
[5] Disable
webrtc.
https://addons.mozilla.org/en-US/ﬁrefox/addon/
no-canvas-ﬁngerprinting/.
happy-bonobo-disable-webrtc/.
[6] D. Kohlbrenner and H. Shacham, “Trusted browsers for uncertain times,”
in 25th USENIX Security Symposium (USENIX Security 16), 2016, pp.
463–480.
[7] Y. Oren, V. P. Kemerlis, S. Sethumadhavan, and A. D. Keromytis,
“The spy in the sandbox - practical cache attacks in javascript,”
CoRR, vol. abs/1502.07373, 2015. [Online]. Available: http://arxiv.org/
abs/1502.07373
[8] T. Van Goethem, W. Joosen, and N. Nikiforakis, “The clock is still
ticking: Timing attacks in the modern web,” in Proceedings of the 22nd
ACM CCS, 2015.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:24:51 UTC from IEEE Xplore.  Restrictions apply. 
74
[9] P. Stone., “Pixel perfect timing attacks with html5,” Tech. Rep., 2013.
[Online]. Available: https://www.contextis.com/resources/white-papers/
pixel-perfect-timing-attacks-with-html5
[10] M. Andrysco, D. Kohlbrenner, K. Mowery, R. Jhala, S. Lerner, and
H. Shacham, “On subnormal ﬂoating point and abnormal timing,” in
Proceedings of the 2015 IEEE Symposium on Security and Privacy,
2015.
[11] P. Vila and B. Kopf, “Loophole: Timing attacks on shared event loops in
chrome,” in 26th USENIX Security Symposium (USENIX Security 17),
2017.
[12] M. Schwarz, C. Maurice, D. Gruss, and S. Mangard, “Fantastic timers
and where to ﬁnd them: High-resolution microarchitectural attacks in
javascript,” in Financial Cryptography and Data Security (FC), 2017.
nswrapper-
https://bugzilla.mozilla.org/show
[13] Web
workers
after
free
in
-
use
cache::getwrapperpreservecolor().
bug.cgi?id=1418074.
[14] Y. Cao, Z. Chen, S. Li, and S. Wu, “Deterministic browser,” in
Proceedings of the 2017 ACM SIGSAC Conference on Computer and
Communications Security, ser. CCS ’17. ACM, 2017, pp. 163–178.
[15] J. Resig, “Dromaeo javascript performance test suite,” Tech. Rep.
[Online]. Available: http://dromaeo.com/
[16] J. Yang, A. Cui, S. Stolfo, and S. Sethumadhavan, “Concurrency
attacks,” in Presented as part of the 4th {USENIX} Workshop on Hot
Topics in Parallelism, 2012.
[17] (2018) Tor browser. https://www.torproject.org/projects/torbrowser.html.
[18] Cross domain policy override using webworkers. https://bugzilla.
mozilla.org/show bug.cgi?id=879787.
[19] Asan segv on unknown address in worker::seteventlistener. https://
bugzilla.mozilla.org/show bug.cgi?id=897678.
[20] Firefox reproducibly crashes when using asm.js code in workers
and transferable objects. https://bugzilla.mozilla.org/show bug.cgi?id=
950604.
[21] Cross-origin information disclosure with error message of web workers.
https://bugzilla.mozilla.org/show bug.cgi?id=947592.
[22] Cross-origin information disclosure with error message of web workers
importscripts(). https://bugzilla.mozilla.org/show bug.cgi?id=1160890.
[23] ﬁngerprinting users in private window using web-worker + indexeddb.
https://bugzilla.mozilla.org/show bug.cgi?id=1410106.
[24] (2018) Selenium. https://www.seleniumhq.org/.
[25] Performance
sherifﬁng/raptor.
https://wiki.mozilla.org/Performance
en.
[26] (2018) Codepen - front end developer playground and code editor in the
sherifﬁng/Raptor.
browser. https://codepen.io/.
[27] K. Bhargavan, A. Delignat-Lavaud, and S. Maffeis, “Defensive javas-
cript,” in Foundations of Security Analysis and Design VII. Springer,
2014, pp. 88–123.
[28] M. Andrysco, A. N¨otzli, F. Brown, R. Jhala, and D. Stefan, “Towards
veriﬁed, constant-time ﬂoating point operations,” in Proceedings of the
2018 ACM CCS, 2018.
[29] A. Aviram, S. Hu, B. Ford, and R. Gummadi, “Determinating timing
channels in compute clouds,” in Proceedings of the 2010 ACM Workshop
on Cloud Computing Security Workshop, ser. CCSW ’10, 2010.
[30] W. Wu, E. Zhai, D. Jackowitz, D. I. Wolinsky, L. Gu, and B. Ford,
“Warding off timing attacks in deterland,” CoRR, vol. abs/1504.07070,
2015. [Online]. Available: http://arxiv.org/abs/1504.07070
[31] M. Huisman, P. Worah, and K. Sunesen, “A temporal logic character-
isation of observational determinism,” 19th IEEE Computer Security
Foundations Workshop (CSFW’06), pp. 13 pp.–3, 2006.
[37] H. Cui, J. Wu, J. Gallagher, H. Guo, and J. Yang, “Efﬁcient deterministic
multithreading through schedule relaxation,” in SOSP, 2011.
[32] A. Sabelfeld and D. Sands, “Probabilistic noninterference for multi-
threaded programs,” in Proceedings of the 13th IEEE Workshop on
Computer Security Foundations, ser. CSFW ’00, 2000.
[33] G. Smith and D. Volpano, “Secure information ﬂow in a multi-threaded
imperative language,” in POPL, 1998.
[34] S. Zdancewic and A. C. Myers, “Observational determinism for concur-
rent program security,” in CSFW, 2003.
[35] D. Volpano and G. Smith, “Eliminating covert ﬂows with minimum typ-
ings,” in Computer Security Foundations Workshop, 1997. Proceedings.,
10th.
IEEE, 1997, pp. 156–168.
[36] H. Cui, J. Simsa, Y.-H. Lin, H. Li, B. Blum, X. Xu, J. Yang, G. A.
Gibson, and R. E. Bryant, “Parrot: a practical runtime for deterministic,
stable, and reliable threads,” in SOSP, 2013.
[38] H. Cui, J. Wu, C.-C. Tsai, and J. Yang, “Stable deterministic multithread-
ing through schedule memoization,” in Proceedings of the 9th USENIX
OSDI, 2010.
[39] T. Liu, C. Curtsinger, and E. D. Berger, “Dthreads: efﬁcient deterministic
multithreading,” in SOSP, 2011.
[40] M. Olszewski, J. Ansel, and S. P. Amarasinghe, “Kendo: efﬁcient
deterministic multithreading in software,” in ASPLOS, 2009.
[41] J. Yang, H. Cui, J. Wu, Y. Tang, and G. Hu, “Making parallel programs
reliable with stable multithreading,” Commun. ACM, vol. 57, no. 3, pp.
58–69, Mar. 2014.
[42] D. Jefferson, “Virtual time,” ACM Trans. Program. Lang. Syst., vol. 7,
pp. 404–425, 1983.
[43] Y. Cao, X. Pan, Y. Chen, and J. Zhuge, “JShield: Towards real-time and
vulnerability-based detection of polluted drive-by download attacks,”
in Proceedings of
the 30th Annual Computer Security Applications
Conference, ser. ACSAC, 2014.
[44] M. T. Louw, K. T. Ganesh, and V. N. Venkatakrishnan, “Adjail: Practical
enforcement of conﬁdentiality and integrity policies on web advertise-
ments,” in Proceedings of the 19th USENIX Conference on Security, ser.
USENIX Security’10, 2010.
[45] X. Dong, M. Tran, Z. Liang, and X. Jiang, “Adsentry: comprehensive and
ﬂexible conﬁnement of javascript-based advertisements,” in Proceedings
of the 27th Annual Computer Security Applications Conference. ACM,
2011, pp. 297–306.
[46] P. Agten, S. Van Acker, Y. Brondsema, P. H. Phung, L. Desmet,
and F. Piessens, “Jsand: complete client-side sandboxing of third-party
javascript without browser modiﬁcations,” in Proceedings of the 28th
Annual Computer Security Applications Conference. ACM, 2012, pp.
1–10.
[47] W. Wang, Y. Kwon, Y. Zheng, Y. Aafer, I.-L. Kim, W.-C. Lee, Y. Liu,
W. Meng, X. Zhang, and P. Eugster, “Pad: Programming third-party
web advertisement censorship,” in Proceedings of the 32Nd IEEE/ACM
International Conference on Automated Software Engineering, ser. ASE
2017. Piscataway, NJ, USA: IEEE Press, 2017, pp. 240–251. [Online].
Available: http://dl.acm.org/citation.cfm?id=3155562.3155596
[48] W. Wang, I. L. Kim, and Y. Zheng, “Adjust: Runtime mitigation
of resource abusing third-party online ads,” in 2019 IEEE/ACM 41st
International Conference on Software Engineering (ICSE), May 2019,
pp. 1005–1015.
[49] Y. Cao, Z. Li, V. Rastogi, Y. Chen, and X. Wen, “Virtual browser:
A virtualized browser to sandbox third-party javascripts with enhanced
security,” in Proceedings of the 7th ACM Symposium on Information,
Computer and Communications Security, ser. ASIACCS ’12, 2012.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:24:51 UTC from IEEE Xplore.  Restrictions apply. 
75