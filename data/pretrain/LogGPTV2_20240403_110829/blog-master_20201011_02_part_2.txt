Operators    
---------    
We've added a few operators to make using `hll`s less cumbersome/verbose. They're simple aliases for the most commonly used functions.    
        Function    
        Operator    
        Example    
        hll_add    
        ||    
            hll_add(users, hll_hash_integer(123))    
            or    
            users || hll_hash_integer(123)    
            or    
            hll_hash_integer(123) || users    
        hll_cardinality    
        #    
            hll_cardinality(users)    
            or    
            #users    
        hll_union    
        ||    
            hll_union(male_users, female_users)    
            or    
            male_users || female_users    
            or    
            female_users || male_users    
Hashing    
-------    
You'll notice that all the calls to `hll_add` or `||` involve wrapping the input value in a `hll_hash_[type]` call; it's absolutely crucial that you hash your input values to `hll` structures. For more on this, see the section below titled 'The Importance of Hashing'.    
The hashing functions we've made available are listed below:    
        Function    
        Input    
        Example    
        hll_hash_boolean    
        boolean    
            hll_hash_boolean(TRUE)    
            or    
            hll_hash_boolean(TRUE, 123/*hash seed*/)    
        hll_hash_smallint    
        smallint    
            hll_hash_smallint(4)    
            or    
            hll_hash_smallint(4, 123/*hash seed*/)    
        hll_hash_integer    
        integer    
            hll_hash_integer(21474836)    
            or    
            hll_hash_integer(21474836, 123/*hash seed*/)    
        hll_hash_bigint    
        bigint    
            hll_hash_bigint(223372036854775808)    
            or    
            hll_hash_bigint(223372036854775808, 123/*hash seed*/)    
        hll_hash_bytea    
        bytea    
            hll_hash_bytea(E'\\xDEADBEEF')    
            or    
            hll_hash_bytea(E'\\xDEADBEEF', 123/*hash seed*/)    
        hll_hash_text    
        text    
            hll_hash_text('foobar')    
            or    
            hll_hash_text('foobar', 123/*hash seed*/)    
        hll_hash_any    
        any    
            hll_hash_any(anyval)    
            or    
            hll_hash_any(anyval, 123/*hash seed*/)    
**NOTE:** `hll_hash_any` dynamically dispatches to the appropriate type-specific function, which makes it slower than the type-specific ones it wraps. Use it only when the input type is not known beforehand.    
So what if you don't want to hash your input?    
    postgres=# select 1234 || hll_empty();    
    ERROR:  operator does not exist: integer || hll    
    LINE 1: select 1234 || hll_empty();    
                        ^    
    HINT:  No operator matches the given name and argument type(s). You might need to add explicit type casts.    
Not pretty. Since hashing is such a crucial part of the accuracy of HyperLogLog, we decided to "enforce" this at a type level. You can only add `hll_hashval` typed things to a `hll`, which is what the `hll_hash_[type]` functions return. You can simply cast **integer** values to `hll_hashval` to add them without hashing, like so:    
    postgres=# select 1234::hll_hashval || hll_empty();    
             ?column?    
    --------------------------    
     \x128c4900000000000004d2    
    (1 row)    
Aggregate functions    
-------------------    
If you want to create a `hll` from a table or result set, use `hll_add_agg`. The naming here isn't particularly creative: it's an **agg**regate function that **add**s the values to an empty `hll`.    
    SELECT date, hll_add_agg(hll_hash_integer(user_id))    
    FROM facts    
    GROUP BY 1;    
The above example will give you a `hll` for each date that contains each day's users.    
If you want to summarize a list of `hll`s that you already have stored into a single `hll`, use `hll_union_agg`. Again: it's an **agg**regate function that **union**s the values into an empty `hll`.    
    SELECT EXTRACT(MONTH FROM date), hll_cardinality(hll_union_agg(users))    
    FROM daily_uniques    
    GROUP BY 1;    
Sliding windows are another prime example of the power of `hll`s. Doing sliding window unique counting typically involves some `generate_series` trickery, but it's quite simple with the `hll`s you've already computed for your roll-ups.    
    SELECT date, #hll_union_agg(users) OVER seven_days    
    FROM daily_uniques    
    WINDOW seven_days AS (ORDER BY date ASC ROWS 6 PRECEDING);    
Explanation of Parameters and Tuning    
------------------------------------    
### `log2m` ###    
The log-base-2 of the number of registers used in the HyperLogLog algorithm. Must be at least 4 and at most 31. This parameter tunes the accuracy of the HyperLogLog structure. The relative error is given by the expression ±1.04/√(2log2m). Note that increasing `log2m` by 1 doubles the required storage for the `hll`.    
### `regwidth` ###    
The number of bits used per register in the HyperLogLog algorithm. Must be at least 1 and at most 8. This parameter, in conjunction with `log2m`, tunes the maximum cardinality of the set whose cardinality can be estimated. For clarity, we've provided a table of `regwidth`s and `log2m`s and the approximate maximum cardinality that can be estimated with those parameters. (The size of the resulting structure is provided as well.)    
        logm2regwidth=1regwidth=2regwidth=3regwidth=4regwidth=5regwidth=6    
107.4e+02 &nbsp;&nbsp;128B3.0e+03 &nbsp;&nbsp;256B4.7e+04 &nbsp;&nbsp;384B1.2e+07 &nbsp;&nbsp;512B7.9e+11 &nbsp;&nbsp;640B3.4e+21 &nbsp;&nbsp;768B    
111.5e+03 &nbsp;&nbsp;256B5.9e+03 &nbsp;&nbsp;512B9.5e+04 &nbsp;&nbsp;768B2.4e+07 &nbsp;&nbsp;1.0KB1.6e+12 &nbsp;&nbsp;1.2KB6.8e+21 &nbsp;&nbsp;1.5KB    
123.0e+03 &nbsp;&nbsp;512B1.2e+04 &nbsp;&nbsp;1.0KB1.9e+05 &nbsp;&nbsp;1.5KB4.8e+07 &nbsp;&nbsp;2.0KB3.2e+12 &nbsp;&nbsp;2.5KB1.4e+22 &nbsp;&nbsp;3KB    
135.9e+03 &nbsp;&nbsp;1.0KB2.4e+04 &nbsp;&nbsp;2.0KB3.8e+05 &nbsp;&nbsp;3KB9.7e+07 &nbsp;&nbsp;4KB6.3e+12 &nbsp;&nbsp;5KB2.7e+22 &nbsp;&nbsp;6KB    
141.2e+04 &nbsp;&nbsp;2.0KB4.7e+04 &nbsp;&nbsp;4KB7.6e+05 &nbsp;&nbsp;6KB1.9e+08 &nbsp;&nbsp;8KB1.3e+13 &nbsp;&nbsp;10KB5.4e+22 &nbsp;&nbsp;12KB    
152.4e+04 &nbsp;&nbsp;4KB9.5e+04 &nbsp;&nbsp;8KB1.5e+06 &nbsp;&nbsp;12KB3.9e+08 &nbsp;&nbsp;16KB2.5e+13 &nbsp;&nbsp;20KB1.1e+23 &nbsp;&nbsp;24KB    
164.7e+04 &nbsp;&nbsp;8KB1.9e+05 &nbsp;&nbsp;16KB3.0e+06 &nbsp;&nbsp;24KB7.7e+08 &nbsp;&nbsp;32KB5.1e+13 &nbsp;&nbsp;40KB2.2e+23 &nbsp;&nbsp;48KB    
179.5e+04 &nbsp;&nbsp;16KB3.8e+05 &nbsp;&nbsp;32KB6.0e+06 &nbsp;&nbsp;48KB1.5e+09 &nbsp;&nbsp;64KB1.0e+14 &nbsp;&nbsp;80KB4.4e+23 &nbsp;&nbsp;96KB    
### `expthresh` ###    
Tunes when the `EXPLICIT` to `SPARSE` promotion occurs, based on the set's cardinality. It is also possible to turn off the use of the `EXPLICIT` representation entirely. If the `EXPLICIT` representation is turned off, the `EMPTY` set is promoted directly to `SPARSE`. Must be -1, 0, or 1-18 inclusive.    