print
time
一深度探索动态语言核心技术
"main thread &d release lock...& thread.get_ident()
Umain
mainthread d wait lock.thread.get_ident（）
raw_input()
"sub thread %d getlock...thread.get_ident(）
new_thread(threadFroc,
subchreadid
thread d get loek..
"thzead.get_ident（)
thread.get_ident ()
（））
thread.get_ident（）
thread.getident()
$thread.get_ident ()
---
## Page 451
15.6.2
1ock开始。
Lock对象的剖析就从theadallocate所对应的C函数thread_PyThread_allocate_
如图15-11所示。
的实现之前，我们先来看看thread2.py的输出结果，以对Lock机制有一个感性的认识。
实现的基础，你会发现，Lock机制的实现真的可以用顺其自然来形容。在进入Lock机制
是Python中实现线程互斥和同步的核心
用，不用担心别的线程破坏input的状态。这种机制给了用户控制线程之间交互的能力，
自身挂起，不能再访问input。于是，自始至终，每一个线程都能控制自已对input的使
Python的线程调度，使得子线程获得运行的机会。而这时主线程由于等待lock，同样会将
醒，获得访间input的权力。注意，这里主线程需要使用sleep使自身挂起，才能触发
因为等待lock而将自身挂起，直到主线程释放lock之后才会被Python的线程调度机制唤
际上也可以视为线程之间的互厅。
活打印动作，thread2.py使用了Python线程机制提供的Lock机制来实现同步动作，这实
的输入，主线程接收输入，而子线程打印用户输入，为了保证子线程在用户输入之后才激
在本节中，我们将详细剖析Python中Lock机制的实现，有了前面关于Pyuon中线程
当主线程通过1ock.acquire获得lock之后，将独享对input的访问权利。子线程会
在thread2.py中，有一个主线程和子线程之间共享的变量input。这个input是用户
在thread2.py中，我们通过thread.allocate（）创建了一个Lock对象，所以我们对
Lock对象
main thread 1384 getlock..
main thread 1384wait lock...
sub thread 3724receive input:Python is the best!
main thread1384release lock...
sub thread 3724 wait lock...
main thread 1384 wait lock...
F:\PythonBookISrclithread>python thread2.py
subthread3724waitlock...
sub thread 3724release lock...
sub thread 3724 get lock...
Python is the best!
main thread 1384getlock...
图15-11thread2.py的运行结果
15.6Python线程的用户级互斥与同步
Python源码剖析
深度探索动态语言核心技术
421
---
## Page 452
Python源码剖析
422
线程在用户级需要访问共享资源之前也需要先申请用户级的lock，这个申请动作在
Event来完成的。我们来看一看Lock对象所提供的属性集。
这就意味着，在Win32平台下的Pyhon实现中，其用户级线程的互斥与同步机制是通过
allocate_lock创建的，与GIL一样，1ock_1ock也是一个Win32下的Event内核对象
是否被锁的1ocked
身上也曾见过。在newlockobject（）中，我们清晰地看到，1ock_lock也是由PyThread
lockobject对象，Pyhon的整个用户级线程同步机制就在这个对象的基础上实现。
static Pyobject
[threadmodule.c]
[threadmodule.c]
typedef void PyThread type_Iock;
static lockobject*newlockoblect (void)
[threadmodule.c]
[threadmodule.c]
[pythread.h]
lockobject;
第15章
很简单，实际上Lock对象仅仪提供了三种操作：acquire、release和判断当前Lock
显然，lockobject是一个pyobjecE对象，其中的1ocklock的类型我们在GIL的
实际上，对
Pyobjent
return self;
self->lock_lock=PyThread_allocate_lock();
lockobject *self;
return （Pyobject+)newlockopject();
一个Python线程在内核级需要访问Pyhon解释器之前，需要先申请GIL：同样地，
INULL
("acqulre_lock"
self
"lockedim,
"release_lock"
locked
struct
深度探索动态语言核心技术
Python多线程机制
PyObject
lock"
type_locklock_lock;
HEAD
thread.allocate的调用仅仅通过newlockobject创建了一个
tihread_PyThread_allocate_lock(Pyobjeot*self)
NULL)
lock_methods[
_New(lockobject,
(PyCFunction)lock_PyThread_release_lock,
(PyCFunction)lock_PyThread_acqulre_
ByoFunction)
(PycFunction)lock_PyThread_acquire_lock,
sentinel
&Locktypel;
oCK
PyThread
locked
release_lock,
lock
---
## Page 453
15.7
成了什么操作了。
试申请用户级lock。在获得了用户级lock之后，通过Py_BEGIN_ALLOW_型HREADS再次获
GIL的Pyhon线程，调用Lock.acquire的线程使用了我们之前提到的py_BEGIN
为了简化多线程应用的开发，Pyhon在tread的基础上构建了一个高级的线程控制库一
static Pyobject lock PyThreadLrelease_lock(lockobfect *self)
得内核级lock-
lock_PyThread acqutre_lock(lockobject:*self,Pyobject*args)
体实现之前：我们先来看看threading是如何使用的。
threading.
[threadmodule.c]
class MyThread(threading,Thread):
importcime
import
[thread3.py]
现在，我们可以轻易地猜出lock的release操作lockPyThreadrelease_lock完
由于线程需要等待另一个lock资源，为了避免死锁，需要将GIL转交给其他的等待
7/中保存用户传入的参数，表示是否在1ock资源不可用时将自身挂起
Python中的threadmodule，以及Lock对象是Python提供的低级的线程控制工具
高级线程库
Py_END_ALLOW_THREADS
PY_BEGIN_ALLOW_THREADS
PyArg_Parsetuple(arge,
Lmta
/进行等待
return Py_None;
PY_INeREF(PY_None):
PyThread_release_lock(self->lock_lock);
Sanity cneck:the lock must be locked */
PyTh
retun NULL:
threading)
。在这一节中，我们将剖析threading的具体实现。在剖析threadng的具
-GIL。
acguie_lock(self->lock_1oek,1);
-threading
]i:acguire,&i）;
Python源码剖析
15.7
loekj;
高级线程库一
一深度探索动态语言核心技术
-threading
423
---
## Page 454
15.7.1
424
Python源码剖析
的Python线程的机制。这个机制通过两个aict和一个1ock完成。
在threading module中，暴露了许多thread moaule中的属性。比如我们在thread3.py
[threading-py]
[threading.py]
mythread.start()
mythread=MyThread()
1imbo=（0）
#Active thread administration
get
Import thread
第15章Python多线程机制
在threadingmoduie中，有一套记录当前所有通过继承threading，Thread而创建
Python的threading module是在建立在threadmoduie基础之上的一个module，
其执行结果如图15-12所示。
Lime.sleep(1)
print
def run(self):
Threading Module 概述
-ident
while True:
一深度探索动态语言核心技术
print sub threadthreading._get_ident()
main thread:
main thread:2528
main thread:2528
sub thread:1452
main thread:2528
sub thread:1452
main thread:2528
thread.get_ldent
sub thread:1452
图15-12
threading,_get_ident()
thread3.py的运行结果
---
## Page 455
15.7.2
重入的Lock。
概述性的介绍，具体的实现请读者参阅threading.py。
他线程同步工具都是在这个Lock对象的基础上，下面我们将对这些线程同步工具做一个
描述的，在这个对象上，我们可以进行acquire、release等操作。在threading中的其
包装，仅仅是简单地将其展示出来。
的Lock对象的基础上的。
现多线程应用程序。这些threading中的线程同步工具实际上都是建立在thread所提供
RLock
[threding.py]
threadingmoaule中，Python提供了不同的用于线程同步的工具，以简化Python用户实
enumerate。这个操作很简单，就是将_active和_limbo中维护的线程集合的信息输出。
lock的保护之下进行。
分别维护了已经创建和等待创建的子线程集合。对这两个dict的访问都在_active_1imbo
到active中，记录的方式为_active[thread_id]=thread。可见，Python这两个diet
start_rew_thread创建了原生子线程，这时将从_limbo中删除子线程，而将子线程记录
[threading.py]
程id，记录的方式为_limbo[thread]=thread。在第二阶段，已经成功地调用thread.
创建原生子线程，这时候线程记录在_1imbo中。由于没有创建子线程，所以现在没有线
all
RLock对象是Lock对象的一个变种，其内部维护着一个Lock对象，但是它是一种可
通过调用threading.Lock，我们就可以创建一个thread中的Lock对象，如前面所
在threading中，我们可以直接创建thread中的Lock对象，threading没有做任何
在threadmodule中，Python提供了用户级的线程同步工具：Lock对象。而在
在threading module中，提供了列举当前所有子线程的操作：threading.
locate_
Threading的线程同步工具
return active
我们知道通过threading.Thread创建多线程，有两个阶段，第一阶段是调用
active_limbo
一般地，对于Lock对象而言，如果一个线程连续两次进行acquire操作，
ck=thread.allocate_lock
lock.acquire()
_limbo.values()
Python源码剖析
15.7高级线程库
深度探索动态语言核心技术
threading
425
---
## Page 456
Python源码剖析
15.7.3
426
面提到的许多机制。
这一节中我们来看一看它的具体实现。在threading，Thread的实现中，你会发现我们前
class Thread(_Verbose):
了独有的set和wait语义。Event类的代码很简单，有兴趣的读者可以参考threading.py。
Event
释放一个资源。
经没有任何资源存在了，线程就会将自身挂起，直到别的线程调用Semaphore.release
acquire时，如果共享资源池中还有剩余的a时，线程就会继续执行：而如果资源池中已
[threading-py]
是在Condition的基础上实现的对共享资源池进行保护的线程同步机制。Semaphore提
资源进行保护的话，所有的线程都将互斥，这使得有4个资源A被浪费了。Semaphore正
源A，这意味着可以有5个线程同时自由地访问这些资源，然而如果使用Lock来对共享
Lock对象可以保护一个共享资源，但是假如我们有一个共享资源池，其中有5个共享资
Semaphore
acquire申请C中的Lock对象，并退出wait操作。
中的Lock对象，并进入阻塞状态，直到有别的线程调用c.notiy（），A才会重新通过
notity的语义。假设有conaition对象c，当线程A调用c.wait（时，线程A将释放C
内部的Lock 对象本身就支持这些操作。但是conditton的价值在于其提供的wait 和
个Rlock对象。在Condition对象上，当然也可以调用acquire和release操作，因为
成之后，别的线程才能申请该RLock对象：
每一次的acquire操作必须有一个release操作与之对应，在所有的release操作都完
acquire操作，因为在其内部通过一个counter变量维护着线程acquire的次数。而且
Lock对象永远不会release，因此线程死锁。RLock对象允许一个线程多次对其进行
那么由于第一次acquire之后没有release，第二次acquire将挂起线程，这将直接导致
一个Lock对象作为参数，如果没有这个Lock对象参数，CondiEion将在内部自行创建一
Condition
第15章Python多线程机制
在thread3.py中我们看到，threading中一个关键的组件是threading.Thread，在
Semaphore对象内部维护着一个conaition对象，对于管理一组共享资源非常有用
Condition对象是对Lock对象的包装，在创建condition对象时，其构造函数需要
Threading中的 Thread
Semaphore类似，Event对象实际上也是对condition对象的一种包装，只是提供
一深度探索动态语言核心技术
---
## Page 457
def
def
def
deF start(self):
def
dlef
initialized = False
else:
self,
tes
self.
finally:
try:
if sel