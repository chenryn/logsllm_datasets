### Algebraic Expressions and Their Interpretations

- **Expression:** \({Alice, Bob, Carl} ⊗ {Alice, Bob, Carl}\)
  - **Interpretation:** This term requires any two distinct users from the list of three (Alice, Bob, Carl).

- **Expression:** \((Accountant ∨ Treasurer)^+\)
  - **Interpretation:** This term requires that all participants must be either an Accountant or a Treasurer. There is no restriction on the number of participants.

- **Expression:** \((Manager ∧ Accountant) ⊗ Treasurer\)
  - **Interpretation:** This term requires a Manager, an Accountant, and a Treasurer. The first two roles (Manager and Accountant) can be satisfied by a single user.

- **Expression:** \((Physician ∨ Nurse) ⊗ (Manager ∧ ¬Accountant)\)
  - **Interpretation:** This term requires two different users: one of which is either a Physician or a Nurse, and the other is a Manager but not an Accountant.

- **Expression:** \((Manager ∧ Accountant ∧ Treasurer) ∧ (Clerk ∧ ¬{Alice, Bob})^+\)
  - **Interpretation:** This term requires a Manager, an Accountant, and a Treasurer. Additionally, all involved users must be Clerks and must not be Alice or Bob.

### 2.1 Enforcement of High-Level Security Policies

A key challenge in the enforcement of high-level security policies specified in the algebra is how to ensure these policies are adhered to. Policy enforcement can be categorized along two dimensions: static vs. dynamic and direct vs. indirect.

- **Dynamic Enforcement:**
  - To dynamically enforce a policy \(\langle t, \phi \rangle\), where \(t\) is a task and \(\phi\) is a term in the algebra, one identifies the steps in performing the task and maintains a history of each instance, including who has performed which steps.
  - Given a task instance, let \(U_{past}\) be the set of users who have performed at least one step of the instance. A user \(u\) is allowed to perform the next step only if there exists a superset of \(U_{past} \cup \{u\}\) that can satisfy \(\phi\) upon completing all steps of the task.
  - **Direct Dynamic Enforcement:** The system directly checks the condition each time a user requests to perform a step.
  - **Indirect Dynamic Enforcement:** The system uses authorization constraints on the steps in the task (e.g., two steps cannot be performed by the same user) to ensure the policy is satisfied.

- **Static Enforcement:**
  - To statically enforce the policy \(\langle t, \phi \rangle\), one identifies the set \(P\) of all permissions needed to perform the task \(t\) and requires that any userset covering \(P\) satisfies the term \(\phi\). This is called a static safety policy, denoted as \(sp\langle P, \phi \rangle\).
  - **Direct Static Enforcement:** Before making changes to the access control state, one checks that the resulting state is safe with respect to the static safety policy and makes the change only if it is safe.
  - **Indirect Static Enforcement:** One specifies constraints such that any access control state satisfying the constraints is safe with respect to the policy, and checks whether the resulting state satisfies these constraints during state changes.

In this paper, we focus on direct static enforcement. Investigating other enforcement approaches for policies specified in the algebra is beyond the scope of this paper.

### 3. The Static Safety Checking (SSC) Problem

Direct static enforcement requires solving the Static Safety Checking (SSC) problem, which we define formally through the following definitions.

- **Definition 4 (State):** An access control system state is given by a triple \(\langle U, UR, UP \rangle\), where \(UR \subseteq U \times R\) determines user-role memberships and \(UP \subseteq U \times P\) determines user-permission assignments, with \(P\) being the set of all permissions. A userset \(X\) covers a set \(P\) of permissions if:
  \[
  \bigcup_{u \in X} \{ p \in P \mid (u, p) \in UP \} \supseteq P
  \]
  Note that a state \(\langle U, UR, UP \rangle\) uniquely determines a configuration \(\langle U, UR \rangle\) used by term satisfaction. We may discuss term satisfaction in a state without explicitly mentioning the corresponding configuration. A user may be assigned a permission directly or indirectly (e.g., via role membership), and the relation \(UP\) considers both ways.

- **Definition 5 (Term Safety):** A userset \(X\) is safe with respect to a term \(\phi\) under configuration \(\langle U, UR \rangle\) if and only if there exists a subset \(X' \subseteq X\) such that \(X'\) satisfies \(\phi\) under \(\langle U, UR \rangle\).

- **Definition 6 (Static Safety Policy):** A static safety policy is given as a pair \(sp\langle P, \phi \rangle\), where \(P \subseteq P\) is a set of permissions and \(\phi\) is a term in the algebra. An access control state \(\langle U, UR, UP \rangle\) satisfies the policy \(sp\langle P, \phi \rangle\) if and only if, for every userset \(X\) that covers \(P\), \(X\) is safe with respect to \(\phi\). If a state satisfies a policy, we say it is safe with respect to the policy.

- **Definition 7 (Static Safety Checking (SSC) Problem):** Given a static safety policy \(sp\langle P, \phi \rangle\), the problem of determining whether a given state \(\langle U, UR, UP \rangle\) is safe with respect to \(sp\langle P, \phi \rangle\) is called the Static Safety Checking (SSC) problem.

We will study the computational complexity of SSC in Section 4. In the rest of this section, we study two other problems related to static safety policies.

### 3.1 Satisfiability of Static Safety Policies

Given a static safety policy, it is natural to ask whether it is possible to satisfy the policy at all. If a static safety policy cannot be satisfied by any access control state, it is likely not what the designers intended.

- **Definition 8 (Policy Satisfiability):** A static safety policy \(sp\langle P, \phi \rangle\) is satisfiable if and only if there exists a state \(\langle U, UR, UP \rangle\) such that \(\langle U, UR, UP \rangle\) satisfies \(sp\langle P, \phi \rangle\) and there is at least one userset in \(\langle U, UR, UP \rangle\) that covers \(P\).

- **Theorem 1:** Let \(k\) be the smallest number such that there exists a size-\(k\) userset \(X\) and a configuration \(\langle U, UR \rangle\), such that \(X\) satisfies \(\phi\) under \(\langle U, UR \rangle\). \(sp\langle P, \phi \rangle\) is satisfiable if and only if \(|P| \geq k\).

### 3.2 The Userset-Term Safety Problem

To solve the SSC problem, which asks whether every userset that covers a set of permissions is safe with respect to a term \(\phi\), we need to solve the problem of determining whether a given userset is safe with respect to a term.

- **Definition 9 (Userset-Term Safety (SAFE) Problem):** Given a userset \(X\) and a term \(\phi\), the problem of determining whether \(X\) is safe with respect to \(\phi\) is called the Userset-Term Safety (SAFE) Problem.

- **Theorem 2:** The computational complexities for SAFE and its sub-cases are given in Figure 1.

According to Figure 1, the computational complexities of all sub-cases of SAFE are the same as those of UTS except for the sub-case in which only operators in \(\{\neg, +, \vee, \wedge\}\) are allowed. \(SAFE\langle \neg, +, \vee, \wedge \rangle\) is in P, while \(UTS\langle \vee, \wedge \rangle\) is NP-hard. Intuitively, \(UTS\langle \vee, \wedge \rangle\) is computationally more expensive than \(SAFE\langle \vee, \wedge \rangle\) because, given a term \(\phi = (\phi_1 \wedge \cdots \wedge \phi_m)\) and a userset \(U\), \(U\) is safe with respect to \(\phi\) if and only if \(U\) is safe with respect to each \(\phi_i\).