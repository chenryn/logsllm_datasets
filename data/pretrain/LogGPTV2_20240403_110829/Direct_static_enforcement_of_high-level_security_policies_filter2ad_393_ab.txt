algebra.
• {Alice, Bob, Carl} ⊗ {Alice, Bob, Carl}
This term requires any two users out of the list of three.
• (Accountant (cid:116) Treasurer)+
This term requires that all participants must be either an
Accountant or a Treasurer. But there is no restriction
on the number of participants.
• (Manager (cid:175) Accountant) ⊗ Treasurer
This term requires a Manager, an Accountant, and a
Treasurer; the ﬁrst two requirements can be satisﬁed by
a single user.
• (Physician (cid:116) Nurse) ⊗ (Manager (cid:117) ¬Accountant)
This term requires two different users, one of which is either
a Physician or a Nurse, and the other is a Manager, but
not an Accountant.
• (Manager (cid:175) Accountant (cid:175) Treasurer) (cid:117) (Clerk (cid:117)
¬{Alice, Bob})+
This term requires a Manager, an Accountant and a
Treasurer.
In addition, everybody involved must be a
Clerk and must not be Alice or Bob.
216
2.1 The Enforcement of High-Level Security
Policies
A problem that naturally arises is how to enforce high-level se-
curity policies speciﬁed in the algebra. There are two dimensions
in policy enforcement. A high-level security policy speciﬁed in the
algebra may be enforced either statically or dynamically, and either
directly or indirectly.
To dynamically enforce a policy (cid:104)t, φ(cid:105), where t is a task and φ
is a term in the algebra, one identiﬁes the steps in performing the
task t, and maintains a history of each instance of the task, which
includes who has performed which steps. Given a task instance,
let Upast be the set of users who have performed at least one step
of the instance. A user u is allowed to perform a next step on the
instance only if there exists a superset of Upast ∪ {u} that can
satisfy φ upon ﬁnishing all steps of the task.
In direct dynamic
enforcement, the system solves this problem directly each time a
user requests to perform a step. In indirect dynamic enforcement,
the system uses authorization constraints on the steps in the task
(e.g., two steps cannot be performed by the same user) to enforce
that the policy is satisﬁed. For example, there are three users, say
Alice, Bob and Carl, in the system. Alice is a member of role r1;
Bob is a member of both r1 and r3; Carl is a member of r2 and r4.
There is a task consisting of two steps and any user is authorized
to perform any step. Let φ = (r1 ⊗ r2) (cid:117) (r3 ⊗ r4) be a term
associated with the task. Either Bob or Carl may perform the ﬁrst
step of the task. The reason is that if Bob (or Carl) performs the
ﬁrst step, then Carl (or Bob) may perform the second step to ﬁnish
that task and the userset {Bob, Carl} satisﬁes φ. However, Alice
is not allowed to perform the ﬁrst step (nor the second step) of the
task, as any superset of {Alice} in the system does not satisfy φ.
To statically enforce the policy (cid:104)t, φ(cid:105), one identiﬁes the set P of
all permissions that are needed to perform the task t and requires
that any userset that covers P satisﬁes the term φ. We denote such
a security policy sp(cid:104)P, φ(cid:105) and call it a static safety policy. A static
safety policy can be satisﬁed by careful design (such as careful per-
mission assignments) of the access control state, without maintain-
ing a history for each task instance. In direct static enforcement,
before making changes to the access control state, one checks that
the resulting state is safe with respect to the static safety policy and
makes the change only when it is safe. In indirect enforcement, one
speciﬁes constraints so that any access control state satisfying the
constraints is safe with respect to the policy (but possibly not the
other way around) and thus only needs to check whether a resulting
state satisﬁes the constraints during state changes.
In this paper, we focus on direct static enforcement. Investigating
other enforcement approaches for policies speciﬁed in the algebra
is beyond the scope of this paper.
3. THE STATIC SAFETY CHECKING (SSC)
PROBLEM
Direct static enforcement requires solving the Static Safety
Checking (SSC) Problem, which we formally deﬁne through the
following deﬁnitions.
Deﬁnition 4 (State). An access control system state is given by
a triple (cid:104)U, UR, UP(cid:105), where UR ⊆ U × R determines user-role
memberships and UP ⊆ U × P determines user-permission as-
signment, where P is the set of all permissions. We say that a
userset X covers a set P of permissions if and only if the following
holds:
u∈X{ p ∈ P | (u, p) ∈ UP } ⊇ P.
S
Note that a state (cid:104)U, UR, UP(cid:105) uniquely determines a conﬁgu-
ration (cid:104)U, UR(cid:105) used by term satisfaction. Hence, we may discuss
term satisfaction in a state without explicitly mentioning the cor-
responding conﬁguration. Note that a user may be assigned a per-
mission directly or indirectly (e.g. via role membership), and the
relation UP has taken both ways into consideration.
Deﬁnition 5 (Term Safety). A userset X is safe with respect to
a term φ under conﬁguration (cid:104)U, UR(cid:105) if and only if there exists
X(cid:48) ⊆ X such that X(cid:48) satisﬁes φ under (cid:104)U, UR(cid:105).
Deﬁnition 6 (Static Safety Policy). A static safety policy is given
as a pair sp(cid:104)P, φ(cid:105), where P ⊆ P is a set of permissions and φ is a
term in the algebra. An access control state (cid:104)U, UR, UP(cid:105) satisﬁes
the policy sp(cid:104)P, φ(cid:105), if and only if, for every userset X that covers
P , X is safe with respect to φ. If a state satisﬁes a policy, we say
that it is safe with respect to the policy.
Note that in the above deﬁnition, we require that each userset X
that covers P is safe with respect to φ (Deﬁnition 5) rather than
that X satisﬁes φ (Deﬁnition 3). The reason is that permission
coverage is monotonic with respect to userset. In other words, if
X covers P then any superset of X also covers P . However, as
we pointed out right after Deﬁnition 3, term satisfaction does not
have the monotonicity property. This means that static enforcement
can be applied only for policies that have the monotonicity prop-
erty. We thus deﬁne safety with respect to a static safety policy in
a monotonic fashion.
Deﬁnition 7 (Static Safety Checking (SSC) Problem). Given a
static safety policy sp(cid:104)P, φ(cid:105), the problem of determining whether a
given state (cid:104)U, UR, UP(cid:105) is safe with respect to sp(cid:104)P, φ(cid:105) is called
the Static Safety Checking (SSC) problem.
We will study the computational complexity of SSC in Section 4.
In the rest of this section, we study two other problems related to
static safety policies.
3.1 Satisﬁability of Static Safety Policies
Given a static safety policy, it is natural to ask whether it is possi-
ble to satisfy the policy at all. In particular, if a static safety policy
cannot be satisﬁed by any access control state, it is probably not
what the designers of the policy desire.
Deﬁnition 8 (Policy Satisﬁability). A static safety policy sp(cid:104)P, φ(cid:105)
is satisﬁable if and only if there exists a state (cid:104)U, UR, UP(cid:105) such
that (cid:104)U, UR, UP(cid:105) satisﬁes sp(cid:104)P, φ(cid:105) and there is at least one userset
in (cid:104)U, UR, UP(cid:105) that covers P .
Note that the above deﬁnition requires that there exists at least
one userset in (cid:104)U, UR, UP(cid:105) that covers P . Without this require-
ment, a state γ trivially satisﬁes sp(cid:104)P, φ(cid:105), if γ does not contain any
userset that covers P . In particular, an empty access control state
satisﬁes any static safety policy; and thus any static safety policy is
trivially satisﬁable.
A term φ is satisﬁable if there exists a userset X and a conﬁg-
uration (cid:104)U, UR(cid:105), such that X satisﬁes φ under (cid:104)U, UR(cid:105). From
Deﬁnition 8, it is clear that when φ is unsatisﬁable, a static safety
policy sp(cid:104)P, φ(cid:105) is unsatisﬁable as well. However, even if φ is satis-
ﬁable, it is still possible that sp(cid:104)P, φ(cid:105) is unsatisﬁable. For example,
sp(cid:104){p1, p2}, Clerk⊗ Accountant⊗ Manager(cid:105) is unsatisﬁable, as
a minimal set of users having all permissions in {p1, p2} contains
at most two users, while a set of at least three users are required to
satisfy the term (Clerk ⊗ Accountant ⊗ Manager).
The following theorem states a necessary and sufﬁcient condi-
tion for a static safety policy to be satisﬁable. Intuitively, a policy
sp(cid:104)P, φ(cid:105) is satisﬁable when the number of permissions in P is no
smaller than the size of the smallest userset that satisﬁes φ.
Theorem 1. Let k be the smallest number such that there exists a
size-k userset X and a conﬁguration (cid:104)U, UR(cid:105), such that X satisﬁes
φ under (cid:104)U, UR(cid:105). sp(cid:104)P, φ(cid:105) is satisﬁable if and only if |P| ≥ k.
PROOF. Let X be a sized-k userset that satisﬁes φ under
(cid:104)U, UR(cid:105). On the one hand, if |P| ≥ k, we can construct an access
control state (cid:104)U, UR, UP(cid:105) such that X ⊆ U and X is the only
userset that covers P . In this case, (cid:104)U, UR, UP(cid:105) satisﬁes sp(cid:104)P, φ(cid:105).
On the other hand, if |P| < k, assume by contradiction that there
exists a state (cid:104)U, UR, UP(cid:105) that satisﬁes sp(cid:104)P, φ(cid:105). Then, there ex-
ists a userset X(cid:48) ⊆ U such that X(cid:48) covers P and X(cid:48) satisﬁes φ.
We have |X(cid:48)| ≤ |P| < k. This contradicts the assumption that
there does not exist a userset with less than k users that satisﬁes φ.
In general, sp(cid:104)P, φ(cid:105) is satisﬁable if and only if |P| ≥ k.
3.2 The Userset-Term Safety Problem
To solve the SSC problem, which asks whether every userset that
covers a set of permissions is safe with respect to a term φ, we need
to solve the problem of determining whether a given userset is safe
with respect to a term.
Deﬁnition 9 (Userset-Term Safety (SAFE) Problem). Given a
userset X and a term φ, the problem of determining whether X
is safe with respect to φ is called the Userset-Term Safety (SAFE)
Problem.
SAFE is related to yet different from the Userset-Term Satisfac-
tion (UTS) problem studied in [6]. SAFE asks whether X contains
a subset that satisﬁes a term φ under a conﬁguration; this is mono-
tonic in that if X is safe, then any superset of X is also safe. UTS
asks whether a userset X satisﬁes a term φ under a conﬁguration
(cid:104)U, UR(cid:105); this is not monotonic, as discussed in Section 2. This dif-
ference has subtle but important effects. For example, under SAFE,
the operator (cid:175) is equivalent to logical conjunction, that is, X is safe
with respect to φ1 (cid:175) φ2 if and only if X is safe with respect to both
φ1 and φ2. This is because X is safe with respect to φ1 (cid:175) φ2 if
and only if X contains a subset X0 that is the union of two sub-
sets X1 and X2 such that X1 satisﬁes φ1 and X2 satisﬁes φ2. This
is equivalent to X contains two subsets X1 and X2 such that X1
satisﬁes φ1 and X2 satisﬁes φ2. On the other hand, the operator (cid:175)
is different from logical conjunction under UTS. That X satisﬁes
φ1 (cid:175) φ2 does not imply X satisﬁes both φ1 and φ2. For exam-
ple {u1, u2} satisﬁes All (cid:175) All, but does not satisfy All, because
term satisfaction is not monotonic. Another difference regards the
operation (cid:117). The operator (cid:117) is equivalent to logical conjunction
under UTS, by deﬁnition of term satisfaction. On the other hand,
(cid:117) is stronger than logical conjunction under SAFE. That X is safe
with respect to φ1 (cid:117) φ2 implies that X is safe with respect to both
φ1 and φ2, but the other direction is not true. For example, given
UR = {(u1, r1), (u2, r2)}, X = {u1, u2} is safe with respect to
both r1 and r2, but is not safe with respect to r1 (cid:117) r2.
Because of these and other differences, the computational com-
plexity results about UTS do not naturally imply computational
complexity results for SAFE. In the rest of this section, we give
the computational complexities for SAFE and compare them with
those of UTS. We show that SAFE in the most general case (i.e., ar-
bitrary terms in which all operators are allowed) is NP-complete.
In order to understand how the operators affect the computational
complexity, we consider all sub-algebras in which only some sub-
set of the six operators in {¬, +,(cid:117),(cid:116),(cid:175),⊗} is allowed. For ex-
ample, SAFE(cid:104)¬, +,(cid:116),(cid:117)(cid:105) denotes the sub-case of SAFE where
φ does not contain operators (cid:175) or ⊗, while SAFE(cid:104)⊗(cid:105) denotes
the sub-case of SAFE where ⊗ is the only kind of operator in φ.
SAFE(cid:104)¬, +,(cid:116),(cid:117),(cid:175),⊗(cid:105) denotes the general case.
217
SAFE(cid:104)¬, +,(cid:116),(cid:117),(cid:175),⊗(cid:105)
NP-complete
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
.............
.............
............................
.............................................
SAFE(cid:104)¬, +,(cid:116),(cid:117)(cid:105)
SAFE(cid:104)¬, +,(cid:116),(cid:175)(cid:105)
in P
in P
SAFE(cid:104)(cid:117),(cid:175)(cid:105)
NP-complete
SAFE(cid:104)(cid:116),⊗(cid:105)
NP-complete
SAFE(cid:104)(cid:117),⊗(cid:105)
NP-complete
SAFE(cid:104)(cid:175),⊗(cid:105)
NP-complete
.............
.............
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
..........
.................................
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
.........................
.........................................
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
.............................
.............
.............
SAFE(cid:104)¬, +,(cid:116)(cid:105)
SAFE(cid:104)¬, +,(cid:117)(cid:105)
SAFE(cid:104)¬, +,(cid:175)(cid:105)
SAFE(cid:104)¬, +,⊗(cid:105)
in P
in P
in P
in P
Figure 1: Various sub-cases of the Userset-Term Safety (SAFE) problem and the corresponding time-complexity. Time-complexity
of other subcases can be implied from the subcases shown in the ﬁgure.
Theorem 2. The computational complexities for SAFE and its sub-
cases are given in Figure 1.
According to Figure 1, the computational complexities of all
subcases of SAFE are the same as those of UTS except for the
subcase in which only operators in {¬, +,(cid:116),(cid:175)} are allowed.
SAFE(cid:104)¬, +,(cid:116),(cid:175)(cid:105) is in P, while UTS(cid:104)(cid:116),(cid:175)(cid:105) is NP-hard. Intu-
itively, UTS(cid:104)(cid:116),(cid:175)(cid:105) is computationally more expensive than SAFE
{(cid:116),(cid:175)} for the following reason: given a term φ = (φ1(cid:175)···(cid:175)φm)
and a userset U, U is safe with respect to φ if and only if U is safe