# 十一、Portainer——Docker 的图形用户界面（GUI）
在本章中，我们将看一下 Portainer。 **Portainer** 是一个工具，允许你从 web 界面管理 Docker 资源。将涉及的主题如下:
*   通往港口的道路
*   启动并运行 Portainer
*   使用 Portainer 和 Docker 群集
# 技术要求
与前几章一样，我们将继续使用本地 Docker 安装。此外，本章的截图将来自我的首选操作系统，macOS。在这一章的最后，我们将使用 Docker Machine 和 VirtualBox 来启动一个本地 Docker Swarm 集群。
像以前一样，我们将运行的 Docker 命令将在迄今为止安装了 Docker 的所有三个操作系统上工作——然而，一些支持命令可能只适用于基于 macOS 和 Linux 的操作系统，而且数量很少。
查看以下视频，了解《行动守则》:
[http://bit.ly/2yWAdQV](http://bit.ly/2yWAdQV)
# 通往港口的道路
在我们卷起袖子开始安装和使用 Portainer 之前，我们应该讨论一下项目的背景。这本书的第一版涵盖了 Docker UI。Docker UI 是迈克尔·克罗斯比写的，他在大约一年的开发后把这个项目交给了凯旺·阿勒奎斯特。正是在这个阶段，由于商标问题，这个项目被重新命名为 Docker 的用户界面。
Docker 的用户界面开发一直持续到 Docker 开始加速将 Swarm 模式等功能引入核心 Docker 引擎。大约在这个时候，Docker 项目的 UI 被分叉到将成为 Portainer 的项目中，Portainer 在 2016 年 6 月发布了它的第一个主要版本。
自第一次公开发布以来，Portainer 背后的团队估计大部分代码已经更新或重写，到 2017 年年中，添加了新功能，例如基于角色的控件和 Docker Compose 支持。
2016 年 12 月，向 Docker GitHub 存储库的 UI 提交了一份通知，声明该项目现已弃用，应使用 Portainer。
# 启动并运行 Portainer
我们将首先考虑使用 Portainer 来管理本地运行的单个 Docker 实例。我正在为 Mac 运行 Docker，所以我将使用它，但是这些指令也应该适用于其他 Docker 安装:
1.  首先，要从 Docker Hub 获取容器映像，我们只需要运行以下命令:
```
$ docker image pull portainer/portainer
$ docker image ls
```
2.  如您所见，当我们运行`docker image ls`命令时，Portainer 映像只有 58.7MB。要启动 Portainer，如果您运行的是 macOS 或 Linux，我们只需运行以下命令:
```
$ docker container run -d \
 -p 9000:9000 \
 -v /var/run/docker.sock:/var/run/docker.sock \
 portainer/portainer
```
3.  Windows 用户必须运行以下程序:
```
$ docker container run -d -p 9000:9000 -v \\.\pipe\docker_engine:\\.\pipe\docker_engine portainer/portainer
```
As you can see from the command we have just run, we are mounting the socket file for the Docker Engine on our Docker Host machine. Doing this will allow Portainer full unrestricted access to the Docker Engine on our host machine. It needs this so it can manage Docker on the host; however, it does mean that your Portainer container has full access to your host machine, so be careful in how you give access to it and also when publicly exposing Portainer on remote hosts.
下面的截图显示了这是在 macOS 上执行的:
![](img/f63b2904-5c6a-44d2-a8ab-b8c16cbc2d7d.png)
4.  对于最基本的安装类型，这是我们需要运行的全部内容。还有几个步骤可以完成安装；它们都在浏览器中执行。要完成它们，请转到 [http://localhost:9000/](http://localhost:9000/) 。
迎接您的第一个屏幕要求您为管理员用户设置密码。
5.  设置好密码后，会进入登录页面:输入用户名`admin`和刚才配置的密码。登录后，系统会询问您希望管理的 Docker 实例。有两种选择:
    *   管理运行 Portainer 的 Docker 实例
    *   管理远程 Docker 实例
目前，我们希望管理 Portainer 运行的实例，这是本地选项，而不是默认的远程选项:
![](img/033eadfb-a669-42ea-adb8-ee1b7dd00bdf.png)
由于我们在启动 Portainer 容器时已经考虑了安装 Docker 套接字文件，我们可以点击**连接**来完成我们的安装。这将带我们直接进入 Portainer 本身，向我们展示仪表板。
# 使用 Portainer
现在，我们已经运行了 Portainer 并将其配置为与我们的 Docker 安装进行通信，我们可以开始使用左侧菜单中列出的功能，从顶部的 Dashboard 开始，这也是 Portainer 安装的默认登录页面。
# 仪表板
从下面的截图中可以看到，**仪表板**向我们概述了 Portainer 被配置为与之通信的 Docker 实例的当前状态:
![](img/1dd6011f-fe9c-43e5-aad4-3d00627cf26e.png)
在我的例子中，这显示了我运行了多少**容器**，这在此刻只是已经运行的 Portainer 容器，以及我下载的映像数量。我们还可以在 Docker 实例上看到**卷**和**网络**的数量，它还会显示正在运行的**栈**的数量。
它还显示了 Docker 实例本身的基本信息；可以看到，Docker 实例运行的是莫比 Linux，有两个 CPU 和 2 GB 的 RAM。这是 Mac Docker 的默认配置。
**仪表板**将适应您运行 Portainer 的环境，因此当我们考虑将 Portainer 连接到 Docker Swarm 集群时，我们将重新讨论它。
# 应用模板
接下来，我们有**应用模板**。这一部分可能是核心 Docker Engine 中唯一不直接可用的功能；相反，这是一种使用从 Docker Hub 下载的容器启动常见应用的方式:
![](img/81d8277b-9f6f-41da-8882-0a5a4061dab4.png)
默认情况下，Portainer 附带大约 25 个模板。模板是以 JSON 格式定义的。例如，nginx 模板如下所示:
```
 {
 "type": "container",
 "title": "Nginx",
 "description": "High performance web server",
 "categories": ["webserver"],
 "platform": "linux",
 "logo": "https://portainer.io/img/logos/nginx.png",
 "image": "nginx:latest",
 "ports": [
 "80/tcp",
 "443/tcp"
 ],
 "volumes": ["/etc/nginx", "/usr/share/nginx/html"]
 }
```
您可以添加更多选项，例如 MariaDB 模板:
```
 {
 "type": "container",
 "title": "MariaDB",
 "description": "Performance beyond MySQL",
 "categories": ["database"],
 "platform": "linux",
 "logo": "https://portainer.io/img/logos/mariadb.png",
 "image": "mariadb:latest",
 "env": [
 {
 "name": "MYSQL_ROOT_PASSWORD",
 "label": "Root password"
 }
 ],
 "ports": [
 "3306/tcp"
 ],
 "volumes": ["/var/lib/mysql"]
 }
```
如您所见，模板看起来类似于 Docker Compose 文件；但是，这种格式仅由 Portainer 使用。在很大程度上，选项是不言自明的，但是我们应该触及**名称**和**标签**选项。
对于通常需要通过环境变量传递自定义值来定义选项的容器，**名称**和**标签**选项允许您向用户显示需要在容器启动前完成的自定义表单字段，如下图所示:
![](img/81479591-d561-413e-9abe-d744fe3e71af.png)
如您所见，我们有一个字段，可以在其中输入我们希望用于 MariaDB 容器的根密码。填写此内容将采用该值并将其作为环境变量传递，构建以下命令来启动容器:
```
$ docker container run --name [Name of Container] -p 3306 -e MYSQL_ROOT_PASSWORD=[Root password] -d mariadb:latest
```
有关应用模板的更多信息，我建议查看文档，可以在本章的进一步阅读部分找到相关链接。
# 容器
我们接下来要看的是左侧菜单中的**容器**。这是您启动 Docker 实例上运行的容器并与之交互的地方。点击**容器**菜单条目将在你的 Docker 实例中显示所有运行和停止的容器列表。
![](img/28f3d88f-f07c-4c7a-8b83-c97cc5a739b5.png)
如您所见，我目前只有一个容器在运行，而这恰好是 Portainer 容器。与其与之交互，不如按下 **+添加容器**按钮，启动一个运行我们在前面章节中使用的集群应用的容器。
**创建容器**页面有几个选项；这些应填写如下:
*   **名称**:T0
*   **映像** : `russmckendrick/cluster`
*   **始终拉映像**:开
*   **发布所有暴露的端口**:开
最后，通过点击 **+映射附加端口**，添加从主机上的端口`8080`到容器上的端口`80`的端口映射。您完成的表单应该类似于下面的截图:
![](img/994969a3-833f-4080-902b-aa4b924c5ea9.png)
完成后，点击**部署容器**，几秒钟后，您将返回正在运行的容器列表，您应该会看到您新启动的容器:
![](img/df751dbc-16d2-4f8b-8dc6-1abba5022868.png)
使用列表中每个容器左侧的勾号框将启用顶部的按钮，您可以在其中控制容器的状态-确保不要**杀死**或**移除**容器。点击容器的名称，在我们的例子中是**集群**，将显示更多关于容器本身的信息:
![](img/cd68e95c-2580-4dfa-ac5e-41af1c5dcf3b.png)
如您所见，关于容器的信息与您运行此命令时得到的信息相同:
```
$ docker container inspect cluster
```
点击**检查**，可以看到该命令的完整输出。你还会注意到**统计**、**日志**和**控制台**都有按钮。
# 统计数据
**统计数据**页面显示了 CPU、内存和网络利用率，以及您正在检查的容器的进程列表:
![](img/9e874f94-8dfd-4f46-82d4-b06e9f9ce701.png)
如果您保持页面打开，图表将自动刷新，刷新页面将使图表归零并重新开始。这是因为 Portainer 正在使用以下命令从 Docker API 接收此信息:
```
$ docker container stats cluster
```
每次刷新页面时，命令都会从头开始，因为 Portainer 当前不会在后台轮询 Docker 来记录每个正在运行的容器的统计信息。
# 日志
接下来，我们有**日志**页面。这将向您显示运行以下命令的结果:
```
$ docker container logs cluster
```
它同时显示`STDOUT`和`STDERR`日志:
![](img/85131733-5b8c-45a0-a519-70b57c460ec1.png)
您还可以选择向输出中添加时间戳；这相当于运行以下命令:
```
$ docker container logs --timestamps cluster
```
# 安慰
最后，我们有**控制台**。这将打开一个 HTML5 终端，并允许您登录到您的运行容器。在连接到容器之前，您需要选择一个外壳。您可以选择使用三个外壳:`/bin/bash`、`/bin/sh `或`/bin/ash`以及作为哪个用户连接，root 是默认设置。当集群映像安装了两个外壳时，我选择使用`/bin/bash`:
![](img/a1a2535d-fb95-4cca-badd-1c84c17f5c45.png)
这相当于运行以下命令来访问您的容器:
```
$ docker container exec -it cluster /bin/sh
```
从截图中可以看到，`bash`流程的 PID 为`15`。这个进程是由`docker container exec`命令创建的，这将是唯一一个在您断开 shell 会话后终止的进程。
# 形象
左侧菜单中的下一个是**映像**。从这里，您可以管理、下载和上传映像:
![](img/e2b3db1c-dcb7-4b2d-949b-84a7d2bdd4c1.png)
在页面顶部，您可以选择拖动映像。例如，只需在框中输入`amazonlinux`，然后点击**拉动**，就会从 Docker Hub 下载一份亚马逊 Linux 容器映像。Portainer 执行的命令是这样的:
```
$ docker image pull amazonlinux
```
您可以通过单击映像标识找到每个映像的更多信息；这将带您进入一个页面，该页面很好地呈现了运行此命令的输出:
```
$ docker image inspect russmckendrick/cluster
```
请看下面的截图:
![](img/0e6e4323-5fae-4de1-8c74-47c357492212.png)
您不仅可以获得有关映像的所有信息，还可以选择将映像的副本推送到您选择的注册表，或者默认情况下推送到 Docker Hub。
您还可以获得映像中包含的每个层的完整分解，显示在构建期间执行的命令和每个层的大小。
# 网络和卷
菜单中的下两个项目允许您管理网络和卷；我不打算在这里讲太多细节，因为它们并不多。
# 网络