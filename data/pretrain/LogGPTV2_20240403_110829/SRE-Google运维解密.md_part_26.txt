强大，因为它们可以将计算应用在单个time-series的历史数据（时间维度）上，也可以
表达式使用一个time-series 作为输入，计算出另外一个time-series。这些规则的功能很
Borgmon编程语言，称为Borgmon规则，由简单的代数计算表达式组成。这些代数计算
100
有以下三个步骤：
1．汇总所有实例的HTTP 回复的速率，按回复代码分类，计算出一个向量。
涨趋势。
当计数器发生重置的时候，可能短时间看起来counter的值有减少趋势，但是总体来看，一定呈上
则和
第10章基于时间序列数据进行有效报警
正确
文件相对较小（可以大幅去掉重复代码），同时也可确保足够强大的表达能力。
便将同样的计算在很多不同的监控目标上同时应用。这种设计方式可确保配置
将规则计算集中到一个监控系统内完成，而不是分散到多个子进程中，可以方
息。如果采用测量器模型，两次采集周期之间，可能会错过某些数值变化的情况。
鼓励多采用计数器模式收集。因为计数器模型不会在两次采集间隔中间丢失信
示当前状态，例如目前剩余油量，或者目前行驶速度等。当收集数据时，我们
值。计数器通常用来衡量单向递增的变量，例如行驶公里数。而测量器用来显
一个计数器（counter）的值应该永远是上涨的，或者精确地说，它的值应该是
所有计数器重置的现象
但绝大部分变量都是简单的计数器。Borgmon的速率函数可以自动检
---
## Page 143
译注4由于标签不完全相符。
注13service和zone标签被省略了。
因为第二条规则使用第一条规则的结果作为输入。
{var=dc:http_requests:rate10m,job=webserver,service=web,zone=us-west} 4
而dc:http_requests:ratel0m的结果是：
{var=task:http_requests:rate10m,job=webserver,instance=host5:80,
{var=task:http_requests:rate10m,job=webserver,instance=host2:80,
{var=task:http_requests:rate10m,job=webserver,instance=host0:80,...}1
用之前的一个例子，我们可以看到task:http_requests:rate10m的结果是：注13
rate（）函数使用提供的表达式输出作为输入，返回总体差值除以总时间。
rules>
#withoutinstance指示Borgmon将instancelabel从表达式右侧统一排除。
#对所有实例的速率求和，得出整体汇总速率。
{var=task:http_requests:ratel0m,job=webserver}=
#用每个任务实例的请求计数器请求速率。
{var=dc:http_requests:ratel0m,job=webserver}=
sum without instance({var=task:http_requests:ratel0m,job=webserver})
rate({var=http_requests,job=webserver}[10m]);
3.计算整个集群的错误速率比例，用错误回复的速率除以所有请求的速率总和，再
2.计算所有的“错误回复”的速率总和，得出一个单值，作为整个集群的错误速率。
次产生一个单值。
在求和计算中排除了状态值为200的速率，因为这是正确回复。
去除，Borgmon无法将所有的行加到一起。
instance标签在结果中已经消失了，因为汇总过程中已经将其去除。如果没有
Borg规则计算
...1.1
.0.9
10
116
---
## Page 144
译注510m保证返回前10分钟内的所有值，以这种形式计算可以让规则计算变得更稳定，不会因为某次
102
HTTP错误的10分钟内速率的比例”。
同样的，上述计算展示了按照Google惯例命名的变量名。结果含义为“数据中心级别
rules>
{var=dc:http_errors:ratio_rate10m,job=webserver}=
#计算错误速率和请求速率的比例
{var=dc:http_errors:ratel0m,job=webserver}=sum without code(
#计算非200代码的集群汇总速率
{var=dc:http_responses:rate10m,job=webserver}=
{var=task:http_responses:rate10m,job=webserver}
#
sum without instance({var=task:http_responses:rate10m,job=webserver});
#
{var=dc:http_responses:rate10m,job=webserver,code=!/200/};
按code标签计算一个集群级别的汇总速率
按code标签给每个实例计算速率
{var=dc:http_requests:ratel0m,job=webserver};
{var=dc:http_errors:rate10m,job=webserver}
rate by code({var=http_responses,job=webserver}[10m]);
第10章
，在这个例子中，表达式左侧变量名的意思是“实例级别HTTP请求的10分
基于时间序列数据进行有效报警
，也就是上文中的10m，因为
译注5
---
## Page 145
Borgmon规则配置文件中，
现，在调试中这非常有用。如果这些临时查询被证实有用，它们可以被存储下来，写入
未来使用。在实践过程中，Borgmon支持临时查询，可以将结果以表格或者图表方式展
正如前文所述，Borgmon规则最终创建了新的time-series，以便将计算结果保存起来供
[var=dc:http_errors:ratio_ratelom,job=webserver}
{var=dc:http_errors:rate10m,job=webserver}
{var=dc:http_responses:rate10m,jobwebserver,code=!/200/}
{var=dc:http_responses:ratel0m,job=webserver}
{var=task:http_responses:rate10m,job=webserver}
最终结果的输出可能是下面这样：注14
{var=dc:http_errors:ratio_rate10m,job=webserver} 0.15
{var=dc:http_errors:rate10m,job=webserver,...}0.6
{var=dc:http_responses:rate10m,job=webserver,code=200,
{var=task:http_responses:rate10m,job=webserver,code=500,instance=host4:80,
[var=task:http_responses:rate10m,job=webserver,code=200,instance=host4:80,
[var=task:http_responses:rate10m,job=webserver,code=500,instance=host3:80
{var=task:http
[var=task:http_responses:rate10m,job=webserver,code=500,instance=host2:80
{var=task:http_responses:rate10m,job=webserver,code=200,instance=host2:80
{var=task:http_responses:rate10m,job=webserver,code=500,instance=host1:80,
{var=task:http_responses:rate10m,job=webserver,code=200,instance=host1:80,
service和zone标签被省略了
状态值。虽然值并没有改变，但是可以观察到code标签从中消失了。
这里的输出展现了中间结果dc:http_errors：rate10m这条规则过滤了非200
_responses:rate10m,job=webserver,code=200,instance=host3:80
，作为服务控制台（console）上的一个永久图表。
..}3.4
Borg规则计算
..}0.1
...0.9
..}
....
·...
103
0.1
0.4
0.5
---
## Page 146
119
要但不紧急的报警发送给工单系统。其他报警一般用来作为历史数据或者服务监控台
Borgmon连接到一个全局共享的服务，Alertmanager（报警管理服务）。报警管理服务负
Borgmon发送Alert RPC的时候提供。
务名称、报警名称，以及触发报警时实际的值（trigger_value）等。这些上下文信息由
会进入等待（pending）状态，确保不会反复变动，直到超过2分钟之后，才会触发报警。
我们之前的例子的计算结果为0.15，已经超过了这里的阈值0.01。但是由于整体错误速
里的单位为1/s，rate函数的结果都是以秒为单位）的时候触发一条报警信息：
下面这条报警规是在10分钟内错误速率比率超过1%的时候，同时整体错误速率超过1（这
次的信息收集失败不会立刻触发报警。
因此，
为真，那么产生一条报警。经验证明，报警规则经常反复变动（flap，快速切换状态）。
每当Borgmon计算完成一条报警规则时，结果永远是真（true）或假（false）。如果结果
报警
104
（dashboard）展示使用。更详细的报警策略设计规则请参见第4章。
如第6章所述，每个SRE团队都会将严重情况报警发送给当前on-call工程师。将重
的配置包括：
报警管理服务。报警管理服务负责将收到的报警转发到合适的通知渠道。报警管理服务
责接收Alert RPC。报警进入等待状态和触发状态（firing）时都会产生Alert RPC通知
报警规则本身包含了一个小模板，以供产生具体报警错误信息时使用。里面包含有任
率并没有超过1/s，所以并没有触发这条报警规则。
>>
时候，
{var=dc:http_errors:rate10m,job=webserver} >1
{var=dc:http_errors:ratio_rate10m,job=webserver}>0.01
andbyjob，error
·将多个Borgmon发来的报警信息合并排重。
·当有其他报警触发的时候，抑制某些报警。
=>ErrorRatioTooHigh
for2m
才会发送警报。
，每条报警规则都指定了一个最小持续时间值。只有当警报持续时间超过这个值的
labels {severity=page};
detailswebserver error ratio at[[trigger_value]]'
第10章
基于时间序列数据进行有效报警
一般来说，这个周期至少被设置为两个计算周期，以确保偶尔一
一旦整体错误速率超过1，该条报警
---
## Page 147
图10-3:一个在三个集群中层级部署的Borgmon数据流向图
一来，一个按层级汇总的体系就建立起来了，也允许根据需要逐级下行去取得底层的信
来的信息，这样全局Borgmon就不需要保留所有任务实例层面的time-series信息。这样