1/u8r/bin/pyt.hon
import os
import time
import socket
def get_log (path = **):
cnd = path + *adb 1ogcat -d*
1 = os,popen (cnd)
r = 1.read()
1.close ()
return r
---
## Page 315
11.3与调制解调器进行交互
299
def clean_log (path = **) :
cnd = path + *adb 1ogcat -c*
bla - c.read()
c = os-popen (cmd)
c.close ()
return 1
def check_1og (1og) :
if log.find(*Bxception*) 1= -1:
e = 0 
if 1og.find(*BxcEPTIoN*) 1= -1:
e = 1
if log-find(*exception*) 1= -11
e = 1
e = 1
return e
:(.. = aweu*.. = qed)oondtTTx gop
1 = os-popen(cmd)
. 6- ex xogsng o- ns,\ aus qpe, + qed = pu
+nsme+*\*
r = 1.read()
1.close()
return r
def clean_sns_db(path = **) :
cnd = cmd + */data/data/com.android.providers.telephony*
.ux 3-ns\eq8 qe,+ed=pu
cnd = cmd + */databases/nmssms.db\**
1 = os-popen(cmd)
r = 1.read()
1.close()
return r
def cleanup_device(path - **):
clean_sms_db (path)
ki11_proc (path, *com-android.mms*)
ki11_proc (path,
:*com.android.phone*)
def 1og_bug(filename, log. test_case) :
fp = open(filename, *w*)
fp.write(test_case)
fp.write (*\n*...
fp.write (1og)
fp.write(*\n*)
fp.write (*\n--
*\n*)
fp.close ()
def file2case8(filename):
fp = open(filename)
out = []
line = fp.readline()
vhile line:
cr = line.split(* *)
out append(ter[0), Int (er [1] .rstrip(*\n*)1))
---
## Page 316
300
第11章攻击RIL无线接口层
1ine = fp.readline()
fp .clo8e ()
return out
def sendcases (dest_ip, cases, logpath, cmdpath = **, crlftype = 1, delay = 5,
status = 0, start = 0):
count = 0
cleaner = 0
for i in cases:
if count >= start:
error = sendnsg (dest_ip, line, cnt, crlftype)
(line, cmt) = 1
if status > 0:
print *ed) error=ed data: $s* 8 (count, error, line)
time,sleep (delay)
1 = get_1og(cmdpath)
#print 1
if check_1og(1) *= 1:
1out - line + * * + str(cnt) +*\n\n*
log_bug (logpath + str (tine.time ()) + *.1og*, 1, 1lout)
clean_log (cndpath)
cleaner = cleaner + 1
count = count + 1
if cleaner >s 50:
cleanup_device (cmdpath)
cleaner = 0
def sendcasesfronfile(filename, dest_ip. cmdpath = **, crlftype = 1, delay = 5,
1ogpath = *./1ogs/*, status = 0, start = 0):
cases = file2cases (filename)
sendcases (dest_ip, cases, 1ogpath, cmdpath, crlftype = cr1ftype,
delay = delay. status = status, start = start)
if
:,ureu, ss aueu"
fn = os.sys.argv[1]
dest = os.sys.argv [2]
start = 0
if 1en(o8-8y8.argv) > 3:
start = int (os,sy8.argv[3])
sendcasesfromfile(fn, dest, cndpath = **, crlftype = 3, status = 1,
start = start)
下面是这个模糊测试监控脚本记录的一个崩溃日志示例。其中显示SmsReceiverService
出现了一个Nul1PointerException异常。如果运气不错，还可能发现导致rild内部出现native
层前溃的bug。
V/SmsReceiverService(11360): onStart: #1 mResultCode: -1 = Activity.RESULT_0R
V/UsageStataService(11473) : CMD_ID_UPDATE_MESSAGE_USAGS
E/NotificationService( 4286): Ignoring notification with ieon==0: Notification
V/SmsReceiverService( 6116) : onStart: 1, @1090741600
(contentView=nu11 vibrate=nu11, aound=null1nu11, defaults=0x0, flags=0x62)
D/SmsReceiverService( 6116) : isCbm: false
---
## Page 317
11.3与调制解调器进行交互
D/SnsReceiverService( 6116) : isDiscard: fa1se
D/SnsReceiverService( 6116) : [WTC_MESSAGES] - SmsReceiverService:
/dalvikvm(11360): threadid=12: thread exiting vith uncaught exception
handleSmsReceived()
D/SmsReceiverService( 6116) : isEvdo: false before inserMessage
(group=0x40a9e228)
D/SnsReceiverService( 6116): sms notification 1ock
E/AndroidRuntime (11360) : FATAL EXCEPr10N: SmsReceiverService
E/AndroidRunt.ime (11360) : java .1ang-Mu11Po1nterExcept ion
E/AndroidRuntime (11360) : at com concentr1c1ivers .
transaction. SmsReceiverService.replaceFormFeeds
-mns,con.android.nmm8 
E/AndroidRuntime (11360) : at com concentric1ivers .mms con.android.mms,
(SnsReceiverService. java:512)
transaction.SmsReceiverService.storeMessage
E/AndroidRuntime(11360) : at com,concentric1ivers .mms .com.android.mms.
(SnsReceiverServ1ce. Java:527)
transaction. SnaReceiverService insertMessage
E/AndroidRuntime (11360) : at com.concentrielivers ,mms,com.android.mm8 ,
(SmsReceiverService- java: 443)
transaction,SnaRecelverService.handleSnsReceived
(SmsReceiverService java:362)
E/AndroidRuntime (11360) : at com, concentrLe1ivere ,mms con.android.nns,
E/AndroidRuntime (11360) : at com,concentric1ivers .mms com.android.mms ,
transaction.SasReceiverService,accessS1 (SnsReceiverService.java:359)
transaction SmsReceiverServiceSServicellandler handleMessage
(SmsReceiverService - java:208)
E/AndroidRuntime (11360) : at android.os Handler dispatchatessage (Handler,
(66:948
E/AndroidRuntime (11360) : at android.os.Looper.1oop (Looper java:154)
E/AndroidRunt.ime (11360) : at android.os .ItandlerThread, run (HandlerThread.
(09:0A0
D/SmsReceIvezService( 6116) : device time: 01/21/13, 6:20:01pm, 1358810401171
D/SmsReceIverService( 6116) : smsc time: 03/29/99, 8:16:59am, 922713419000
E/EabeddedLogger ( 4286) : App crasbed! Process: com.concentric1ivers.mms.com.
E/EsbeddedLogger ( 4286) : App crashed! Package: com.concentriclivers.mms.com.
android.mns
E/EnbeddedLogger ( 4286) : App1ication Label: Hessaging
andrqid.mms v3 (4.0.3)
4.验证模糊测试结果
上面介绍的模测试方法其实还有一个小缺陷。对每条导致前遗的SMS消息，需要使用真
实的移动网络进行验证，因为之前生成的 SMS消息可能不被真实的 SMSC所接受。要测试某条
消息是否被SMSC所接受，最简单的方法就是将这个测试用例发给另一个手机。但是请注意，生
成的 SMS 消息是 SMS-Deliver格式的，发送之前需要转换成SMS-Submit格式。有两种方法可以
实现这一测试。一种是使用在线服务发送这条SMS 信息，比如www.routomessaging.com和
www.clickatel.com。绝大部分的SMS在线服务都提供基于HTTP的简单API，使用方便。另一种
则直接用手机将其发送给另一个手机。
在 Android手机上，这还是有些麻烦的，因为Android的 SMS 相关API不支持发送原始的
PDU信息。不过有两种方法可以实现。第一种是直接使用GSMAT指令AT+CMGS来发送 SMS
---
## Page 318
302第11章攻击RIL无线接口层
信息，不过只有当调制解调器与RIL之间的通信走AT指令集时，这个方法才有效。此时，可以
修改Injectord的代码，使其向调制解调器发送CMGS 指令。第二种则只能用于HTC的Android
手机。HTC实现了一个新的功能，因而可以通过JavaAPI发送原始的PDU SMS信息。这个API
是隐藏的，需要通过Java反射来调用。下面的代码就是在HTC的Android手机上实现发送原始
的PDU信息：
void htc_sendsmspdu (byte pdu [1)
try {
SnsManager sm = SmsManager getDefault () :
byte[] bb = new byte[1]]
Method n = SmsManager class getDeclaredMethod (*sendRawPdu*, bb.getClass (),
bb.getClass() , PendingIntent ,class, PendingIntent ,class, boolean,class,
boolean.class) :
}catch (Exception e){
n.invoke(sm, null, pdu, null, null, false, false) :
e.printStackTrace (1 ;
11.4小结
本章介绍了许多关于Android电话栈的知识，尤其是RIL。我们简单了解了RIL的功能以及
硬件制造商将蜂窝通信硬件与Android框架相集成的必要工作，并进一步探索了如何监控Android
RIL与蜂窝调制解调器硬件之间的通信。
本章后半部分讲述了如何对Android设备的 SMS消息子系统进行模糊测试，其中包含关于
SMS消息格式的知识，以及如何构建SMS消息的模糊生成器。本章还介绍了如何使用ADB来
监控Android电话栈的前溃情况。有了这些知识，就可以开始对Android的RIL子系统进行自己