304
第8章
---
## Page 341
模板方法模式
元素自行提供比较大小的算法部分。
分和策略模式非常相似。但是请记
所以，这虽然不是救科书上的模板方住，在策略模式中，你所组合的类实
模式吗？还是你的想象力太丰富了？
法，但它的实现仍然符合模板方法模现了整个算法。数组所实现的排序
答：
式的精神。再者，由于不需要继承数
算法并不完整，它需要一个类填补
这个模式的重点在于提
组就可以使用这个算法，这样使得排
compareTo（）方法的实现。因此，我
供一个算法，并让子类实现某些步骤
序变得更有弹性、更有用。
们认为这更像模板方法。
而数组的排序做法很明显地并非如
问：
此！但是，我们都知道，荒野中的模
在JavaAPi中，还有其
排序的实现实际上看起
式并非总是如同教科书例子一般地中
来更像是策略模式，而不是模板方法
他模板方法的例子吗？
规中矩，为了符合当前的环境和实现
模式。为什么我们要将它归为模板方
的约束，它们总是要被适当地修改。
答：是的，你可以在一些
法？
这个Array类sort(）方法的设计者受到
地方看到它们。比方说，java.io的
一些约束。通常我们无法设计一个类
合：
你之所以会这么认为。
InputStream类有一个read(）方法，是
继承Java数组，而sort(）方法布望能
可能是因为策略模式使用对象组合。
由子类实现的，而这个方法又会被
够适用于所有的数组（每个数组都是
在某种程度上，你是对的—我们使
read(byte b[1]，int off,int len）模板方法
不同的类）。所以它们定义了一个静
用数组对象排序我们的数组，这部
使用。
态方法，而由被排序的对象内的每个
OBRAIN
X
VPOWER
我们知道应该多用组合，少用继承，对吧？sortO模板方法的实现决定不使用继承，sort方法被
实现成一个静态的方法，在运行时和Comparable组合。这样的做法有何优缺点？你如何处置这
个难题？难道Java数组让这一切变得特别麻烦吗？
X
CPOWER
想一想另一个模式，它是模板方法的一种特殊状况，原语操作用来创建并返回对象。这是什
么模式？
你现在的位置
305
---
## Page 342
绘图挂钩
写一个Swing的窗口程序
在我们模板方法的狩猎历程中，你要特别注意Swing的JFrame！
也许你没用过JFrame，在这里简单解释一下。它是最基本的Swing容器，继承
了一个paintO方法。在默认状态下，paint(是不做事情的，因为它是一个“钩
子”！通过覆盖paint()，你可以将自己的代码插入JFrame的算法中，显示出你
所想要的画面。下面是一个超级简单的例子：
我们扩展了3Frame，它包含一个
update(）方法，这个方法控制更新屏幕的
算法。我们可以逐过覆盖paint物子方法
public class MyFrame extends JFrame {
和这个算法挂上钩。
public MyFrame (String title) (
不用管里面的细节，这只是
super (title) ;
一些初始化的动作……
this.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE) ;
this.setSize(300,300);
this.setVisible (true) ;
3Frame的更新算法被称为paint(）。在
public void paint (Graphics graphics) {
默认状态下，paint（）是不做事的.…….
super.paint (graphics);
它只是一个钩子。我们覆盖paint（）.
String msg = "I rule!!";
graphics.drawString(msg, 100, 100);
告诉2Frame在宴口上面函出一条消息。
public static void main (String[] args)(
HeadFirstDesignPatterns
为我们利用了paint（）物子方法
I rule!!
所以可以显示出这样的消息。
306
第8章
---
## Page 343
模板方法模式
Applet
我们最后的狩猎目标：applet。
你大概知道applet就是一个能够在网页上面执行的小程序。任何
applet都必须继承自Applet类，而Applet类中提供了好些钩子，让我
们来看看其中的几个：
init钩子用来进行applet的初始化动作，它
public class MyApplet extends Applet {
会在applet一开始的时续被调用一次。
String message;
public void init(）{
tepaint(）是Applet类的一个具体方法，可让
message = "Hello World, I'm alive!"
applet的上居组件知道这个applet需要重给。
repaint () ;
这个start钩子可以在applet正要被显示
public void start(){
在网页上时，让applet做一些动作。
repaint () ;
public void stop()(
message = "oh, now I'm being stopped...";
如果用户跳到别的网页，这个stop钩子金
repaint () ;
被调用，然后4pplet就可以在这里做一些
事情来停止它的行动。
public void destroy(){
//applet正在被销毁..
当这个applet即将被销股（例如：关闭测览
器）时，destroy物子就金被调用。我们可以
public void paint(Graphics g){
在这里显示一些东西，但这么做好像没什么
g.drawString(message,5, 15);
意义？
看看是谁在这里呀！这不正是我们的
老朋友paint(）方法吗？applet也将这个方
法当做钩子了。
具体的applet大量使用钩子来提供行为。因为这些行为是作
为钩子实现的，所以Applet类就不用去实现它们。
你现在的位置，
307
---
## Page 344
围炉夜话：模板方法与策略
国护装话
今夜话题：模板方法和策略的比较。
工厂方法
模板方法
策略
策略您好，您怎么会出现在我的章节中呢？我还
嘿！我听到
以为必须跟一些无聊的家伙，像是工厂方法，在
一起呢！
不，的确是我，不过你说话要小心一你和工厂
方法不是有关联吗？
我只是在开玩笑啦！说正经的，你在这儿干什么
呢？我们足足有八个章节没有看到你了！
我听说你的章节已经接近尾声，所以特地来看看
事情怎么样。我们有许多共同点，所以我想或许
可以提供一些帮助
你可能得再向读者自我介绍一下，因为你已经消
失很久了。
不见得如此。从第1章开始，我在逛街的时候，
老是被路人拦了下来，他们说“你不是那个什么
模式来着..”，所以，我想他们知道我是谁。
不过为了你，我再说一次好了：我定义一个算法
家族，并让这些算法可以互换。正因为每一个算
法都被封装起来了，所以客户可以轻易地使用不
嘿！听起来好像是我在做的事情。但是我的意图
同的算法。
和你有点不太一样：我的工作是要定义一个算法
的大纲，而由我的子类定义其中某些步骤的内
容。这么一来，我在算法中的个别步骤可以有不
同的实现细节，但是算法的结构依然维持不变。
不过你就不一样了，似乎你必须放弃对算法的控
我不确定话可以这么说.更何况，我并不是使
制。
用继承进行算法的实现，我是通过对象组合的方
式，让客户可以选择算法实现。
308
第8章
---
## Page 345
模板方法模式
模板方法
策略
这我记得。但是我对算法有更多的控制权，而且
不会重复代码。事实上，除了极少的一部分之外，
我的算法的每一个部分都是相同的，所以我的类
比你的有效率得多。会重复使用到的代码，都被
我放进了超类中，好让所有的子类共享。
你或许更有效率一点（只是一点点），也的确需
要更少的对象。和我所采用的委托模型比起来，
你也没那么复杂。但是因为我使用对象组合，所
以我更有弹性。利用我，客户就可以在运行时改
变他们的算法，而客户所需要做的，只是改用不
同的策略对象罢了。拜托，作者选择把我摆在第
1章，这不是没有道理的！
好吧，我真替你感到高兴，但是你别忘了，环顾
四周，我可是最常被使用的模式。为什么呢？因
为我在超类中提供了一个基础的方法，达到代码
的复用，并允许子类指定行为。我相信你会看到
这一点在创建框架时是非常棒的！
也许呢.但是，别忘了依赖！你的依赖程度比
我高。
这话怎么说？我的超类是抽象的。
但是你必须依赖超类中的方法的实现，因为这是
你算法中的一部分。但我就不同了，我不依赖任
何人，整个算法我自己搞定！
策略呀！就如同我所说的，我真为你感到高兴。
谢谢你来拜访我，但我必须把这个章节剩下的部
分完成。
好啦！好啦！不要这么敏感。我让你继续工作
吧，但是如果你需要我的特殊技能，请让我知
道，我总是乐于助人的。
知道了，别打电话给我，我会打电话给你.
你现在的位置，3
309
---
## Page 346
填字游戏
又是这个时候了。
横排提示：
竖排提示：
1. Strategy uses
rather than
2.
algorithm steps are implemented
inheritance
by hook methods
4. Type of sort used in Arrays
3.Factory Method is a
of
5. The JFrame hook method that we overrode to
Template Method
print “I Rule”
7. The steps in the algorithm that must be
6. The Template Method Pattern uses
todeferimplementation to other
classes
8. Huey, Louie and Dewey all weigh
8.Coffee and
pounds
9. Don't call us, we'll call you is known as the
9.A method in the abstract superclass that does
Principle
nothing or provides default behavior is called a
12. A template method defines the steps of an
method
10. Big headed pattern
13. In this chapter we gave you more
11. Our favorite coffee shop in Objectville
15. The Arrays class implements its template
14. The template method is usually defined in an method as a
method
class
16. Class that likes web pages
310
第8章
---
## Page 347
模板方法模式
要点
设计箱内的工具
“模板方法”定义了算法
我们在你的工具箱内放进模板方法模式。有了模板方法，
的步骤，把这些步骤的实
你就可以像专家一样复用代码，同时保持对算法的控制。
现延迟到子类。
模板方法模式为我们提供
了一种代码复用的重要技
00
基础
巧。
模板方法的抽象类可以定
00原则
象
义具体方法、抽象方法和
装
封装变化
钩子。
态
多用组合，少用继承
抽象方法由子类实现。
针对接口编程，不针对实现编
承
钩子是一种方法，它在抽
程
象类中不做事，或者只做
为交互对象之间的松耦合设计
币势力
默认的事情，子类可以选
我们最新的原则提醒你，由
类应该对扩展开放，对修改关
择要不要去覆盖它。
团。
超类主控一切，当它们需要
的时候，自然会去调用子类，
为了防止子类改变模板方
依赖抽象，不要依赖具体类。
这就跟好莱端一样。
法中的算法，可以将模板
只和朋友交谈
方法声明为final。
别找我，我全找你
好莱坞原则告诉我们，将
还有我们最新的模式
决策权放在高层模块中，
让类实现一个算法，将一
以便决定如何以及何时调
些步颗延迟到子类。
用低层模块。
00模式
你将在真实世界代码中看
到模板方法模式的许多变
体，不要期待它们全都是
一眼就可以被你认出的。
遵貌器燥式一将一个型的接口转推成
模板方法模式—在一个方法中
策略模式和模板方法模式
定义一个算法的骨架，而将一些步
都封装算法，一个用组
骤延迟到子类中。模板方法使得子
合，一个用继承。
类可以在不改变算法结构的情况下
工厂方法是模板方法的一
重新定义算法中的某些步骤。
种特殊版本。
你现在的位置
311
---
## Page 348
arpenyourpencil
绘制这个新的类图。我们已经将prepareRecipeO的实现移
到CaffeineBeverage类中：
习题解答
将模式和叙述之间配对：
模式
叙述
封装可互换的行为，
模板方法
然后使用委托来决定
要采用哪一个行为
河
策略
子类决定如何实现算
法中的某些步骤
由子类决定实例化
PDG
工厂方法
哪个具体类
312
第8章
---
## Page 349
模板方法模式
习题解答
0