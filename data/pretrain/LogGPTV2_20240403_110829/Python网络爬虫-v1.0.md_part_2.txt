url = 'http://www.someserver.com/register.cgi'
values = {'name' : 'WHY',
'location' : 'SDU',
'language' : 'Python' }
data = urllib.urlencode(values) # 编码工作
req = urllib2.Request(url, data) # 发送请求同时传data表单
response = urllib2.urlopen(req) #接受反馈的信息
the_page = response.read() #读取反馈的内容
如果没有传送 data 参数，urllib2 使用 GET 方式的请求。GET 和 POST 请求的不同之处是 POST 请求通常
有"副作用"，它们会由于某种途径改变系统状态(例如提交成堆垃圾到你的门口)。Data 同样可以通过在 Get 请求
的 URL 本身上面编码来传送。
import urllib2
import urllib
data = {}
data['name'] = 'WHY'
data['location'] = 'SDU'
data['language'] = 'Python'
url_values = urllib.urlencode(data)
print url_values
name=Somebody+Here&language=Python&location=Northampton
url = 'http://www.example.com/example.cgi'
第 2 章 利用 urllib2 通过指定的 URL 抓取网页内容 | 17
full_url = url + '?' + url_values
data = urllib2.open(full_url)
这样就实现了 Data 数据的 Get 传送。
第 2 章 利用 urllib2 通过指定的 URL 抓取网页内容 | 18
##
设置 Headers 到 http 请求
有一些站点不喜欢被程序（非人为访问）访问，或者发送不同版本的内容到不同的浏览器。 默认的 urllib2 把自己
作为“Python-urllib/x.y”(x 和 y 是 Python 主版本和次版本号，例如 Python-urllib/2.7)。
这个身份可能会让站点迷惑，或者干脆不工作。浏览器确认自己身份是通过 User-Agent 头，当你创建了一个请
求对象，你可以给他一个包含头数据的字典。下面的例子发送跟上面一样的内容，但把自身模拟成 Internet Expl
orer。 （多谢大家的提醒，现在这个 Demo 已经不可用了，不过原理还是那样的）。
import urllib
import urllib2
url = 'http://www.someserver.com/cgi-bin/register.cgi'
user_agent = 'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'
values = {'name' : 'WHY',
'location' : 'SDU',
'language' : 'Python' }
headers = { 'User-Agent' : user_agent }
data = urllib.urlencode(values)
req = urllib2.Request(url, data, headers)
response = urllib2.urlopen(req)
the_page = response.read()
33
异异常常的的处处理理和和 HHTTTTPP 状状态态码码的的分分类类
第 3 章 异常的处理和 HTTP 状态码的分类 | 20
先来说一说 HTTP 的异常处理问题。
当 urlopen 不能够处理一个 response 时，产生 urlError。不过通常的 Python APIs 异常如 ValueError，Typ
eError 等也会同时产生。HTTPError 是 urlError 的子类，通常在特定 HTTP URLs 中产生。
第 3 章 异常的处理和 HTTP 状态码的分类 | 21
##
URLError
通常，URLError 在没有网络连接(没有路由到特定服务器)，或者服务器不存在的情况下产生。这种情况下，异常
同样会带有"reason"属性，它是一个 tuple（可以理解为不可变的数组），包含了一个错误号和一个错误信息。
我们建一个 urllib2_test06.py 来感受一下异常的处理：
import urllib2
req = urllib2.Request('http://www.baibai.com')
try: urllib2.urlopen(req)
except urllib2.URLError, e:
print e.reason
按下 F5，可以看到打印出来的内容是：
[Errno 11001] getaddrinfo failed
也就是说，错误号是 11001，内容是 getaddrinfo failed。
第 3 章 异常的处理和 HTTP 状态码的分类 | 22
##
HTTPError
服务器上每一个 HTTP 应答对象 response 包含一个数字"状态码"。有时状态码指出服务器无法完成请求。默认
的处理器会为你处理一部分这种应答。
例如:response 是一个"重定向"，需要客户端从别的地址获取文档，urllib2 将为你处理。其他不能处理的，urlop
en 会产生一个 HTTPError。典型的错误包含"404"(页面无法找到)，"403"(请求禁止)，和"401"(带验证请
求)。HTTP 状态码表示 HTTP 协议所返回的响应的状态。比如客户端向服务器发送请求，如果成功地获得请求
的资源，则返回的状态码为 200，表示响应成功。如果请求的资源不存在，则通常返回 404 错误。 HTTP 状态
码通常分为5种类型，分别以 1～5 五个数字开头，由 3 位整数组成：
200：请求成功 处理方式：获得响应的内容，进行处理
201：请求完成，结果是创建了新资源。新创建资源的 URI 可在响应的实体中得到 处理方式：爬虫中不会遇到
202：请求被接受，但处理尚未完成 处理方式：阻塞等待
204：服务器端已经实现了请求，但是没有返回新的信 息。如果客户是用户代理，则无须为此更新自身的文档视图。 处理方式：丢弃
300：该状态码不被 HTTP/1.0 的应用程序直接使用， 只是作为 3XX 类型回应的默认解释。存在多个可用的被请求资源。 处理方式：若程序中能够处理，则进行进一步处理，如果程序中不能处理，则丢弃
301：请求到的资源都会分配一个永久的 URL，这样就可以在将来通过该 URL 来访问此资源 处理方式：重定向到分配的 URL
302：请求到的资源在一个不同的 URL 处临时保存 处理方式：重定向到临时的 URL
304 请求的资源未更新 处理方式：丢弃
400 非法请求 处理方式：丢弃
401 未授权 处理方式：丢弃
403 禁止 处理方式：丢弃
404 没有找到 处理方式：丢弃
5XX 回应代码以“5”开头的状态码表示服务器端发现自己出现错误，不能继续执行请求 处理方式：丢弃
HTTPError 实例产生后会有一个整型'code'属性，是服务器发送的相关错误号。Error Codes 错误码 因为默认
的处理器处理了重定向(300 以外号码)，并且 100-299 范围的号码指示成功，所以你只能看到 400-599 的错误
号码。
BaseHTTPServer.BaseHTTPRequestHandler.response 是一个很有用的应答号码字典，显示了 HTTP 协
议使用的所有的应答号。当一个错误号产生后，服务器返回一个 HTTP 错误号，和一个错误页面。你可以使用 H
TTPError 实例作为页面返回的应答对象 response。这表示和错误属性一样，它同样包含了 read,geturl，和 in
fo 方法。
我们建一个 urllib2_test07.py 来感受一下：
import urllib2
req = urllib2.Request('http://bbs.csdn.net/callmewhy')
第 3 章 异常的处理和 HTTP 状态码的分类 | 23
try:
urllib2.urlopen(req)
except urllib2.URLError, e:
print e.code
#print e.read()
按下 F5 可以看见输出了 404 的错误码，也就说没有找到这个页面。
第 3 章 异常的处理和 HTTP 状态码的分类 | 24
##
Wrapping
所以如果你想为 HTTPError 或 URLError 做准备，将有两个基本的办法。推荐使用第二种。
我们建一个 urllib2_test08.py 来示范一下第一种异常处理的方案：
from urllib2 import Request, urlopen, URLError, HTTPError
req = Request('http://bbs.csdn.net/callmewhy')
try:
response = urlopen(req)
except HTTPError, e:
print 'The server couldn\'t fulfill the request.'
print 'Error code: ', e.code
except URLError, e:
print 'We failed to reach a server.'
print 'Reason: ', e.reason
else:
print 'No exception was raised.'
# everything is fine
和其他语言相似，try 之后捕获异常并且将其内容打印出来。
这里要注意的一点，except HTTPError 必须在第一个，否则 except URLError 将同样接受到 HTTPError。
因为 HTTPError 是 URLError 的子类，如果 URLError 在前面它会捕捉到所有的 URLError（包括HTTPErro
r）。
我们建一个 urllib2_test09.py 来示范一下第二种异常处理的方案：
from urllib2 import Request, urlopen, URLError, HTTPError
req = Request('http://bbs.csdn.net/callmewhy')
第 3 章 异常的处理和 HTTP 状态码的分类 | 25
try:
response = urlopen(req)
except URLError, e:
if hasattr(e, 'code'):
print 'The server couldn\'t fulfill the request.'
print 'Error code: ', e.code
elif hasattr(e, 'reason'):
print 'We failed to reach a server.'
print 'Reason: ', e.reason
else:
print 'No exception was raised.'
# everything is fine
44
OOppeenneerr 与与 HHaannddlleerr 的的介介绍绍和和实实例例应应用用
第 4 章 Opener 与 Handler 的介绍和实例应用 | 27
在开始后面的内容之前，先来解释一下 urllib2 中的两个个方法：info and geturl urlopen 返回的应答对象 resp
onse(或者 HTTPError 实例)有两个很有用的方法 info()和 geturl()
第 4 章 Opener 与 Handler 的介绍和实例应用 | 28
##
geturl()
这个返回获取的真实的 URL，这个很有用，因为 urlopen(或者 opener 对象使用的)或许会有重定向。获取的 U
RL 或许跟请求 URL 不同。
以人人中的一个超级链接为例，我们建一个 urllib2_test10.py 来比较一下原始 URL 和重定向的链接：
from urllib2 import Request, urlopen, URLError, HTTPError
old_url = 'http://rrurl.cn/b1UZuP'
req = Request(old_url)
response = urlopen(req)
print 'Old url :' + old_url
print 'Real url :' + response.geturl()
运行之后可以看到真正的链接指向的网址：
第 4 章 Opener 与 Handler 的介绍和实例应用 | 29
##
info()
这个返回对象的字典对象，该字典描述了获取的页面情况。通常是服务器发送的特定头 headers。目前是 httpli
b.HTTPMessage 实例。
经典的 headers 包含"Content-length"，"Content-type"，和其他内容。
我们建一个 urllib2_test11.py 来测试一下 info 的应用：
from urllib2 import Request, urlopen, URLError, HTTPError
old_url = 'http://www.baidu.com'
req = Request(old_url)
response = urlopen(req)
print 'Info():'
print response.info()
运行的结果如下，可以看到页面的相关信息：
下面来说一说 urllib2 中的两个重要概念：Openers 和 Handlers。
##
Openers
第 4 章 Opener 与 Handler 的介绍和实例应用 | 30
当你获取一个 URL 你使用一个 opener(一个 urllib2.OpenerDirector 的实例)。正常情况下，我们使用默认 op
ener：通过 urlopen。但你能够创建个性的 openers。
##
Handles
Openers 使用处理器 handlers，所有的“繁重”工作由 handlers 处理。每个 handlers 知道如何通过特定协
议打开 URLs，或者如何处理 URL 打开时的各个方面。
例如 HTTP 重定向或者 HTTP cookies。
如果你希望用特定处理器获取 URLs 你会想创建一个 openers，例如获取一个能处理 cookie 的 opener，或者
获取一个不重定向的 opener。
要创建一个 opener，可以实例化一个 OpenerDirector，然后调用 .add\_handler(some\_handler\_instanc
e) 。同样，可以使用 build_opener，这是一个更加方便的函数，用来创建 opener 对象，他只需要一次函数调
用。build_opener 默认添加几个处理器，但提供快捷的方法来添加或更新默认处理器。 其他的处理器 handlers
你或许会希望处理代理，验证，和其他常用但有点特殊的情况。
install_opener 用来创建（全局）默认 opener。这个表示调用 urlopen 将使用你安装的 opener。 Opener 对
象有一个 open 方法。该方法可以像 urlopen 函数那样直接用来获取 urls：通常不必调用 install_opener，除了
为了方便。
说完了上面两个内容，下面我们来看一下基本认证的内容，这里会用到上面提及的 Opener 和 Handler。
BBaassiicc AAuutthheennttiiccaattiioonn 基基本本验验证证
为了展示创建和安装一个 handler，我们将使用 HTTPBasicAuthHandler。 当需要基础验证时，服务器发送一
个 header(401 错误码) 请求验证。这个指定了 scheme 和一个‘realm’，看起来像这样： Www-authentica
te: SCHEME realm="REALM" 。
例例如如
Www-authenticate: Basic realm="cPanel Users"
客户端必须使用新的请求，并在请求头里包含正确的姓名和密码。这是“基础验证”，为了简化这个过程，我们
可以创建一个 HTTPBasicAuthHandler 的实例，并让opener 使用这个 handler 就可以啦。
HTTPBasicAuthHandler 使用一个密码管理的对象来处理 URLs 和 realms 来映射用户名和密码。如果你知道
realm(从服务器发送来的头里)是什么，你就能使用 HTTPPasswordMgr。
第 4 章 Opener 与 Handler 的介绍和实例应用 | 31
通常人们不关心 realm 是什么。那样的话，就能用方便的 HTTPPasswordMgrWithDefaultRealm。这个将在