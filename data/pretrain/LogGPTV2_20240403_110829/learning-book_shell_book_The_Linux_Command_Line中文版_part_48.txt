exit 1
fi
通过应用正则表达式，我们能够限制INT的值只是字符申，其开始于一个可选的减号，随
后是一个或多个数字。这个表达式也消除了空值的可能性。
[[]]添加的另一个功能是==操作符支持类型匹配.正如路径名展开所做的那样。例如：
393
---
## Page 395
[nedlinuxbox -]$ FILE=foo.bar
[ne@linuxbox -]$ if [[ $FILE == foo.* ]]; then
> fi
foo.bar natches pattern 'foo.*
这就使【[]]有助于计算文件和路径名。
28.5
5（（））-为整数设计
除了[[]】复合命令之外，bash也提供了（（））复合命令，其有利于操作整数。它支持一套
完整的算术计算，我们将在第35章中讨论这个主题。
（（））被用来执行算术真测试。如果算术计算的结果是非零值，则其测试值为真。
[ne@linuzbox -]$ if ((1)); then echo "It is true.*; fi
It is true.
[ne@linuxbox -]$ if ((0)): then echo "It is true.*; fi
[nedlinuxbox -]$
使用（（））.我们能够略微简化test-integer2脚本，像这样：
#!/bin/bash
# test-integer2a: evaluate the value of an integer.
INT=-5
if [[ "$INT" =-
^=?[0-9]+$ 1]: then
if ((INT = O)); then
echo "INT is zero.*
else
if ((INT &2
exit 1
fi
注意我们使用小于和大于符号，以及==用来测试是否相等。这是使用整数较为自然的语
法了。也要注意，因为复合命令（（））是shell语法的一部分，而不是一个普通的命令，而且
它只处理整数，所以它能够通过名字识别出变量，而不需要执行展开操作。我们将在第35中
进一步讨论（（））命令和相关的算术展开操作。
28.6结合表达式
也有可能把表达式结合起来创建更复杂的计算。通过使用逻辑操作符来结合表达式。我们在第
18章中学习find命令的时候已经知道了这些。有三个用于test和[[]]的逻辑操作。它们是
AND丶OR和NOT。test和[[]]使用不同的操作符来表示这些操作：
操作符
测试
[[ ] and (( ))
AND
-a
&&
OR
-0
NOT
!
！
表28-4:逻辑操作符
#!/bin/bash
# test-integer3: deternine if an integer is within a
# specified range of values.
MIN_VAL=1
MAX_VAL=100
INT=50
395
---
## Page 397
if [[ "$INT* =- ^=?[0-9]+$ ]]; then
if [[ INT =ge MIK_VAL &k INT -1e MAX_VAL J1 ; then
echo "$INT is vithin SMIN_VAL to $HAX_VAL."
else
echo "$INT is out of range.*
fi
else
echo "INT is not an integer.* >k2
exit 1
fi
我们也可以对表达式使用圆括号，为的是分组。如果不使用括号，那么否定只应用于第一个
表达式，而不是两个组合的表达式。用test可以这样来编码：
if [!\( $INT -ge $MIN_VAL =a $INT 1e $MAX_VAL \) ]; then
echo "$INT is outside SMIN_VAL to $HAX_VAL."
else
echo "$INT is in range."
fi
因为test 使用的所有的表达式和操作符都被shell看作是命令参数（不像[L]]和（（））
），对于bash有特殊含义的字符，比如说，（．和），必须引起来或者是转义。
知道了test和[C]]基本上完成相同的事情，哪一个更好呢？test更传统（是POSIX的
一部分），然而[[]]特定于bash。知道怎样使用test很重要，因为它被非常广泛地应用，但
是显然【[]]更有用，并更易于编码。
可移植性是头脑获隘人士的心魔
如果你和“真正的”Unix用户交谈，你很快就会发现他们大多数人不是非常喜
欢Linux°他们认为Linux航脏且不干净。Unix追随者的一个宗旨是，一切都应
“可移植的”。这意味着你编写的任意一个脚本都应当无需修改，就能运行在任何一
个类Unix的系统中。
Unix用户有充分的理由相信这一点。在POSIX之前，Unix用户已经看到了命
令的专有扩展以及shell对Unix世界的所做所为，他们自然会警惕Linux对他们心
爱系统的影响。
396
---
## Page 398
但是可移植性有一个严重的缺点。它防碍了进步。它要求做事情要遵循“最低
常见标准”。在shell编程这种情况下，它意味着一切要与sh兼容，最初的Bourne
shell 
这个缺点是一个专有软件供应商用来为他们专有的扩展做辩解的借口，只有他们
称他们为“创新”。但是他们只是为他们的客户锁定设备。
GNU工具，比如说bash，就没有这些限制。他们通过支持标准和普遍地可用性
来鼓励可移植性。你几乎可以在所有类型的系统中安装bash和其它的GNU工具，
甚至是Windows，而没有损失。所以就感觉可以自由的使用bash的所有功能。它
是真正的可移植。
28.7控制操作符：分支的另一种方法
bash支持两种可以执行分支任务的控制操作符。&&（AND）和11（OR）操作符作用如同复合命
令[[]]中的逻辑操作符。这是语法：
command1 kk comnand2
和
conmand1 11 command2
理解这些操作很重要。对于&&操作符，先执行command1，如果并且只有如果commandl
执行成功后，才会执行command2。对于II操作符，先执行command1，如果并且只有如果
command1执行失败后，才会执行command2。
在实际中，它意味着我们可以做这样的事情：
[ne@linuxbox -]$ mkdir tenp &k cd tenp
这会创建一个名为temp的目录，并且若它执行成功后，当前目录会更改为temp。第二个
命令会尝试执行只有当mkdir命令执行成功之后。同样地，一个像这样的命令：
397
---
## Page 399
dzo xtpxu 11[ duo p- ]s[- xoqxnusteou]
会测试目录temp是否存在，并且只有测试失败之后，才会创建这个目录。这种构造类型非
常有助于在脚本中处理错误，这个主题我们将会在随后的章节中讨论更多。例如，我们在脚本
中可以这样做：
[ -d tenp ] 11 exit 1
如果这个脚本要求目录temp，且目录不存在，然后脚本会终止，并返回退出状态1。
28.8总结
这一章开始于一个问题。我们怎样使sys_info_page脚本来检测是否用户拥有权限来读
取所有的家目录？根据我们的if知识，我们可以解决这个问题，通过把这些代码添加到
report_home_space 函数中：
report_home_space () Hone Space Utilization (A1l Users)
(▪/ouou/ qs- np)$
else
cat Bome Space Utilization ($USER)
$(du -sh $HOME)
fi
return
J
我们计算id命令的输出结果。通过带有-u选项的id命令，输出有效用户的数字用户ID
号。超级用户总是零，其它每个用户是一个大于零的数字。知道了这点，我们能够构建两种不
同的here文档，一个利用超级用户权限，另一个限制于用户拥有的家目录。
868
---
## Page 400
我们将暂别sye_info_page程序，但不要着急。它还会回来。同时，当我们继续工作的时
候，将会讨论一些我们需要的话题。
28.9拓展阅读
bash手册页中有几部分对本章中涵盖的主题提供了更详细的内容：
·Lists（讨论控制操作符11和&）
·Compound Commands (讨论[[ 1],((））和if )
·CONDITIONALEXPRESSIONS（条件表达式
·SHELL BUILTIN COMMANDS(讨论 test )
进一步，Wikipedia中有一篇关于伤代码概念的好文章：
http://en.wikipedia.org/wilki/Pseudocode
399
---
## Page 401
29
读取键盘输入
到目前为止我们编写的脚本都缺乏一项在大多数计算机程序中都很常见的功能一交互性。也就
是，程序与用户进行交互的能力。虽然许多程序不必是可交互的，但一些程序却得到益处，能
够直接接受用户的输入。以这个前面章节中的脚本为例：
#!/bin/bash
# test-integer2: evaluate the value of an integer.
INT=-5
if [[ “$INT* =- ^=?[0-9]+$ ]] ; then
if [ $INT -eq 0 ］; then
echo "INT is zero.*
else
if [ $INT -1t 0 ]; then
echo "INT is negative."
else
echo "INT is positive."
fi
if[ $((INT % 2)) -eq 0 ]; then
echo "INT is even."
else
echo "INT is odd.*
fi
fi
else
echo "INT is not an integer.*
>&2
exit 1
fi
每次我们想要改变INT数值的时候，我们必须编辑这个脚本。如果脚本能请求用户输入数
值，那么它会更加有用处。在这个脚本中，我们将看一下我们怎样给程序增加交互性功能。
400
---
## Page 402
29.1
read－从标准输入读取数值
这个read内部命令被用来从标准输入读取单行数据。这个命令可以用来读取键盘输入，当使
用重定向的时候，读取文件中的一行数据。这个命令有以下语法形式：
read [-options] [variable...]
这里的options是下面列出的可用选项中的一个或多个，且variable是用来存储输入数值的
一个或多个变量名。如果没有提供变量名，shell变量REPLY会包含数据行。
基本上，read会把来自标准输入的字段赋值给具体的变量。如果我们修改我们的整数求值
脚本，让其使用read，它可能看起来像这样：
#!/bin/bash
# read-integer: evaluate the value of an integer.
read int
if [[ “$int* =- ^=?[0-9]+$ ]]; then
if [ $int -eq 0 ]; then
echo "$int is zero."
else
if [ $int -1t 0 ]; then
echo "$int is negative.*
else
echo "$int is positive.*
fi
if [ $((int % 2)) -eq 0 ]; then
echo "$int is even."
else
echo "$int is odd."
fi
fi
else
echo "Input value is not an integer." >b2
exit 1
fi
401
---
## Page 403
我们使用带有-n选项（其会删除输出结果末尾的换行符）的echo命令，来显示提示信息，
然后使用read来读入变量int的数值。运行这个脚本得到以下输出：
[neglinuxbox -]$ read-integer
Please enter an integer -> 5
5 is positive.
5 is odd.
read可以给多个变量赋值，正如下面脚本中所示：
#!/bin/bash
# read-multiple: read multiple values froα keyboard
read var1 var2 var3 var4 var5
echo *var1 = '$var1'"
echo *var2 = *$rar2'"
echo *var3 = '$var3*"
echo *var4 = '$var4'"
echo *var5 = '$var5*"
在这个脚本中，我们给五个变量赋值并显示其结果。注意当给定不同个数的数值后，read
怎样操作：
[ne0linuxbox -]$ read-multiple
Enter one or more values > a b c d e
var1 = 'a'