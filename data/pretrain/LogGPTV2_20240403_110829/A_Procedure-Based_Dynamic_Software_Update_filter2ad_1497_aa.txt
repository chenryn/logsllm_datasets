title:A Procedure-Based Dynamic Software Update
author:Janghoon Lyu and
Youngjin Kim and
Yongsub Kim and
Inhwan Lee
A Procedure-Based Dynamic Software Update 
Janghoon Lyu, Youngjin Kim, Yongsub Kim and Inhwan Lee 
Department of Electrical and Computer Engineering 
Hanyang  University 
Email: bhlyu, yjkim, yskim, ihlee)@csl. hanyang. ac. kr 
Abstract 
This paper presents  a method  to update  a single  or 
multiple  procedures  of  running  s o f i a r e ,   without 
stopping the software, by directly modifying a part of 
the process  address  space.  The paper  addresses two 
issues for procedure-based  dynamic s o f i a r e  update. 
First,  the paper presents  a  well-de$ned  sequence  to 
perform  an  update  while  ensuring  correct operation 
and  small  performance 
the  paper 
provides  a solution for how  to make  the  new  version 
procedure  work  correctly in the address space  of the 
old  version process.  The method  is  illustrated  in the 
SUN  Solaris  environment.  Using  the  method  can 
reduce  the  downtime  caused  by  software  upgrade 
when changes are limited to text and local data. 
loss.  Second, 
1. Introduction 
It  is practically impossible to develop a perfect software 
system that  does not  require  changes. This is because we 
cannot  correctly  anticipate  all  necessary  features  during 
software development. Also, it  is difficult to ensure that a 
large  software  system  is  defect-free.  Further,  customers' 
needs  constantly  change.  As  a  result,  software  vendors 
keep  releasing  newer  versions of software to  add  features 
or  to  remove  defects  in  existing  software.  However, 
installing  a  new  software  version  often  requires  the 
software or the whole  system that  runs the software to  be 
stopped.  Such downtime  caused  by  software  upgrade can 
pose  a  serious  problem  in  computing  environments  that 
require continuous operation. 
to  reduce 
Dynamic  software  update  attempts 
the 
downtime caused by software upgrade by  changing a part 
of  running  software  without  stopping  the  software  [l]. 
While  we  generally  agree  that  continuous  operation  is 
important,  we tend  to think  that the  downtime  caused  by 
software  upgrade  is  unavoidable.  As  a  result,  dynamic 
software  update  is  not  widely  used  in  industry. To make 
dynamic software  update an  industry practice,  a variety of 
methods  to  deal  with  diverse  update  problems  arising  in 
real  environments  must  be  established.  We  must  also 
develop  tools  to  support  update  methods  and  develop 
software  design  styles  that  can  make  software  more 
amenable  to dynamic  update.  In  addition, we  must  make 
continuous efforts to enhance  methods and  tools  by  using 
them  in  real  software environments.  This paper  describes 
our effort towards this direction. 
In  this  paper, we present  a  method  for procedure-based 
dynamic update for user application  software written  in  C 
and  illustrate the method  in the SUN Solaris environment. 
The  method  allows  us  to  update  software  dynamically 
when  changes  are  limited  to  text  and  local  data.  Most 
previous works rely on indirection to perform an update. In 
other words, they allow the existence of multiple software 
versions and perform an update by  changing the value of a 
pointer  that  points  to  a  specific  version  to  participate  in 
computation. In contrast, we discuss a method for updating 
a  single  or  multiple  procedures  by  directly  modifying  a 
part of the address space of a  running process,  using only 
those  services  provided  by  an  existing  operating  system. 
Our  attitude  is:  how  far  we  can  go  with  such  a  direct 
method  using existing operating system services and what 
additional  help  is  needed  from  the  operating  system  and 
compiler. 
The paper addresses two key issues for procedure-based 
dynamic  software  update.  First,  the  paper  presents  a 
well-defined sequence to perform an update while ensuring 
correct operation and small performance loss. Second, in  a 
direct  update  method  such  as  ours,  it  is  important  to  be 
able to  deal  with  changes  in  the size  of the  procedure to 
update.  The paper provides  a  solution  for  how to allocate 
space for the new version procedure and how to make the 
new version procedure work correctly  in the address space 
of the  old  version  process,  when  the  size  of new  version 
procedure differs from that of old version. 
2. Related Work 
in 
Early 
researches 
the  dynamic 
modification  of ADT (Abstract  Data  Type)  conducted  by 
Fabry  and  Goullon  [2,3].  They  proposed  a  method  to 
dynamically change the  implementation of a  procedure in 
this  area  are 
0-7695-1101-5/01 $10.00 0 2001 IEEE 
271 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:05:53 UTC from IEEE Xplore.  Restrictions apply. 
ADT while maintaining identical  specifications.  A method 
for  dynamically  updating  services  of  a  server 
in 
client-server  environments  was  studied  by  Liskov  and 
Bloom  [4,5]. In these studies, services are called indirectly 
through  a  service  manager.  The  implementation  of  a 
service  can  be  updated  dynamically  by  modifying  the 
service  manager  so  that  it  calls  a  new  version  service. 
Dynamic  configuration  of  modules  which  constitute  a 
distributed  program  was  proposed  by  Magee and  Kramer 
[6,7].  In  this  $udy,  modules  call  each  other  through 
communication  channels,  and  a  module  can  be  updated 
dynamically  by  modifying  links  in  the  communication 
channels. All these studies rely  on indirection to perform a 
dynamic update. 
A software design environment, which is called PODUS 
(Procedure  Oriented  Dynamic  Updating  System), 
to 
support  procedure-based  dynamic  update  in  the  UNIX 
environment  was  developed  by  Frieder  [8].  PODUS also 
relies  on indirection.  To support dynamic update,  PODUS 
uses a large sparse address space model built on top of the 
UNIX  operating  system.  In  PODUS,  an  address  contains 
the  procedure  version  ID,  procedure  type,  and  procedure 
ID  as  well  as  regular  UNIX  address  field.  Based  on  this 
address  model,  procedures  are  called  indirectly through  a 
and  PODUS  updates  a  procedure 
binding 
table.  While 
dynamically  by  modifying 
PODUS  provides 
dynamic  update 
environment that  includes  diverse  features,  PODUS itself 
is  an  additional  software  layer  between  the  operating 
system  and  user  applications,  which  may  affect  an 
application‘s  performance  during  normal  operation. 
PODUS also requires a specialized compiler and linker. 
the  binding 
integrated, 
table, 
an 
Gupta  proposed  a  process-based  dynamic  software 
update  using  direct  state  transfer  [9].  To  dynamically 
change programs, the study stops a running process,  starts 
a  new  process  with  new  version  program,  transfers  the 
state  of  the  old  process  to  the  new  process,  and  then 
executes the new process. While the study is interesting  in 
that  it  does  not  use  indirection,  the  approach  is  rather 
complex  and  requires  much  work  because  a  process  state 
to transfer includes user process address space (code, data, 
and  stack),  machine  information  (general/special  purpose 
registers),  kernel 
(process’s  context  and 
information  about  file  opens).  The  process  state  space is 
large and some states are difficult to transfer. 
information 
In  contrast to PODUS,  our method  performs  an  update 
by  directly  modifying  a  process  address  space  using 
existing operating system  services. As  a result,  it  does not 
require  an  additional  software  layer  or  a  specialized 
compiler  and  can  make  existing  programs  dynamically 
updateable  by  simply  adding  signal-handling  routines  to 
the  programs.  In  contrast  to  the  Gupta’s  method,  our 
method  supports  a  small,  procedure-based  update  and 
modifies  only  the  target  procedure  area  of  a  process 
address space. As a result, the method  is  relatively  simple 
and is efficient especially when changes are small. 
3. Method for Dynamic Software Update 
This section  presents  the  details  of the  update  method. 
While the concepts and approach are general, some details 
of  the  method  are  inevitably  related  to  the  underlying 
operating system, compiler and the processor architecture. 
This is because the  procedure-based  update  is  a  low-level 
approach that deals with the internals of a running process. 
In  this  section,  we  discuss  both  the  method  and  the 
illustration of the method  in the SUN Solaris environment 
running on a 32-bit  SPARC machine. (We use the GNU C 
compiler.)  We  speculate 
the  approach  can  be 
applicable to other  UNIX-like  operating  systems running 
on RISC machines. 
that 
3.1. Concepts 
Generally, a software program is executed in the form of 
a  process.  The address  space of a process  can  be divided 
into text,  data,  heap, stack  and  unmapped  areas.  The text 
area  stores  program  code,  and  the  data area  stores  static 
data used by the process. The heap area stores dynamically 
created  data  during  the  process  execution,  and  the  stack 
area contains the run-time stack information. The libraries 
used  by  the  process  can  exist  between  heap  and  stack 
[10,11].  Each  area is  mapped  to a  disk  location. The text 
area  and  libraries  are  mapped  to  named  files  (i.e.,  an 
executable  file  and  library  files),  and  the  other  areas  are 
mapped  to a  swap device  [12].  Figure  I  shows  a  process 
address  space in  the  Solaris environment.  The figure  was 
extracted using the pmap(1) command. 
14.1 
8 
8 
552 
8 
‘opmap  6126 
6.126 
.crh 
Address  Kb!tei  Resident  Shared 
000l0000  111 
111 
Pmate 
. 
16 
104 
. 
. 
21 
16 
8 
8 
- 
- 
. 
- 
- 
- 
. 
S 
40 
.........  .........  ........ . 
1181 
8 
EF66W00 
8 
EF670000 
EF680000 
592 
EF722000  !.I 
EF728000 
8 
8 
EF730000 
EF740000 
6.1 
EFliE000 
8 
16 
EFii0000 
8 
EF790000 
8 
EF140000 
EFiBOOOO 
8 
II! 
EF7C0000 
EF7EAOOO 
16 
10 
EFFF6OOO 
.._____.. 
_______..... 
total Kb 
1208 
8 
8 
576 
21 
8 
8 
M 
8 
16 
8 
8 
8 
112 
16 
40 
. 
61 
8 
16 
8 
8 
8 
I12 
8 
. 
224 
‘I60 
Permissions 
read e\ec 
read niite o w  
read rime exec 
read e m  
read am elec 
read e\ec 
read arite e\ec 
read  \!rite  e w  
read nrite e\ec 
read e\ec 
read iiriteewc 
read e\ec 
read  L\R: 
read nr11e L W C  
read e\ec  rharrd 
reade\ec 