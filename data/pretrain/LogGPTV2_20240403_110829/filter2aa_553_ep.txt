{
while (*st != '\n' && *st != '\0')
st++;
if (*st == '\n')
*st = '\0';
else
while (getchar() != '\n')
continue;
}
return ret_val;
}
10.下面是一种方案：
int strlen(const char * s)
{
int ct = 0;
1493
while (*s++)   // 或者while (*s++ != '\0')
ct++;
return(ct);
}
11.下面是一种方案：
#include    // 提供 fgets()和getchar()的原型
#include   // 提供 strchr()的原型
char * s_gets(char * st, int n)
{
char * ret_val;
char * find;
ret_val = fgets(st, n, stdin);
if (ret_val)
{
find = strchr(st, '\n');  // 查找换行符
if (find)          // 如果地址不是 NULL,
*find = '\0';     // 在此处放置一个空字符
else
while (getchar() != '\n')
1494
continue;
}
return ret_val;
}
12.下面是一种方案：
#include   /* 提供 NULL 的定义 */
char * strblk(char * string)
{
while (*string != ' ' && *string != '\0')
string++;    /* 在第1个空白或空字符处停止 */
if (*string == '\0')
return NULL;   /* NULL 指空指针 */
else
return string;
}
下面是第2种方案，可以防止函数修改字符串，但是允许使用返回值改
变字符串。表达式(char*)string被称为“通过强制类型转换取消const”。
#include   /*提供 NULL 的定义*/
char * strblk(const char * string)
1495
{
while (*string != ' ' && *string != '\0')
string++;    /*在第1个空白或空字符处停止*/
if (*string == '\0')
return NULL;   /* NULL 指空指针*/
else
return (char *)string;
}
13.下面是一种方案：
/* compare.c -- 可行方案 */
#include 
#include  // 提供strcmp()的原型
#include 
#define ANSWER "GRANT"
#define SIZE 40
char * s_gets(char * st, int n);
void ToUpper(char * str);
int main(void)
{
1496
char try[SIZE];
puts("Who is buried in Grant's tomb?");
s_gets(try, SIZE);
ToUpper(try);
while (strcmp(try, ANSWER) != 0)
{
puts("No, that's wrong.Try again.");
s_gets(try, SIZE);
ToUpper(try);
}
puts("That's right!");
return 0;
}
void ToUpper(char * str)
{
while (*str != '\0')
{
*str = toupper(*str);
str++;
1497
}
}
char * s_gets(char * st, int n)
{
char * ret_val;
int i = 0;
ret_val = fgets(st, n, stdin);
if (ret_val)
{
while (st[i] != '\n' && st[i] != '\0')
i++;
if (st[i] == '\n')
st[i] = '\0';
else
while (getchar() != '\n')
continue;
}
return ret_val;
}
1498
A.12 第12章复习题答案
1.自动存储类别；寄存器存储类别；静态、无链接存储类别。
2.静态、无链接存储类别；静态、内部链接存储类别；静态、外部链接
存储类别。
3.静态、外部链接存储类别可以被多个文件使用。静态、内部链接存储
类别只能在一个文件中使用。
4.无链接。
5.关键字extern用于声明中，表明该变量或函数已定义在别处。
6.两者都分配了一个内含100个int类型值的数组。第2行代码使用calloc()
把数组中的每个元素都设置为0。
7.默认情况下，daisy只对main()可见，以extern声明的daisy才对petal()、
stem()和root()可见。文件2中的extern int daisy;声明使得daisy对文件2中的所
有函数都可见。第1个lily是main()的局部变量。petal()函数中引用的lily是错
误的，因为两个文件中都没有外部链接的lily。虽然文件2中有一个静态的
lily，但是它只对文件2可见。第1个外部rose对root()函数可见，但是stem()中
的局部rose覆盖了外部的rose。
8.下面是程序的输出：
color in main() is B
color in first() is R
color in main() is B
color in second() is G
color in main() is G
1499
first()函数没有使用color变量，但是second()函数使用了。
9.a.声明告诉我们，程序将使用一个变量plink，该文件包含的函数都可
以使用这个变量。calu_ct()函数的第1个参数是指向一个整数的指针，并假
定它指向内含n个元素的数组。这里关键是要理解该程序不允许使用指针arr
修改原始数组中的值。
b.不会。value和n已经是原始数据的备份，所以该函数无法更改主调函
数中相应的值。这些声明的作用是防止函数修改value和n的值。例如，如果
用const限定n，就不能使用n++表达式。
A.13 第13章复习题答案
1.根据文件定义，应包含#include 。应该把fp声明为文件指针：
FILE 
*fp;。要给fopen()函数提供一种模式：fopen("gelatin","w")，或者"a"模
式。fputs()函数的参数顺序应该反过来。输出字符串应该有一个换行符，提
高可读性。fclose()函数需要一个文件指针，而不是一个文件名：
fclose(fp);。下面是修改后的版本：
#include 
int main(void)
{
FILE * fp;
int k;
fp = fopen("gelatin", "w");
for (k = 0; k 
#include 
int main(int argc, char * argv [])
{
FILE * fp;
double n;
double sum = 0.0;
1501
int ct = 0;
if (argc == 1)
fp = stdin;
else if (argc == 2)
{
if ((fp = fopen(argv[1], "r")) == NULL)
{
fprintf(stderr, "Can't open %s\n", argv[1]);
exit(EXIT_FAILURE);
}
}
else
{
fprintf(stderr, "Usage: %s [filename]\n", argv[0]);
exit(EXIT_FAILURE);
}
while (fscanf(fp, "%lf", &n) == 1)
{
sum += n;
1502
++ct;
}
if (ct > 0)
printf("Average of %d values = %f\n", ct, sum / ct);
else
printf("No valid data.\n");
return 0;
}
5.下面是一种方案：
#include 
#include 
#define BUF 256
int has_ch(char ch, const char * line);
int main(int argc, char * argv [])
{
FILE * fp;
char ch;
char line[BUF];
if (argc != 3)
1503
{
printf("Usage: %s character filename\n", argv[0]);
exit(EXIT_FAILURE);
}
ch = argv[1][0];
if ((fp = fopen(argv[2], "r")) == NULL)
{
printf("Can't open %s\n", argv[2]);
exit(EXIT_FAILURE);
}
while (fgets(line, BUF, fp) != NULL)
{
if (has_ch(ch, line))
fputs(line, stdout);
}
fclose(fp);
return 0;
}
int has_ch(char ch, const char * line)
1504
{
while (*line)
if (ch == *line++)
return(1);
return 0;
}
fgets()和 fputs()函数要一起使用，因为 fgets()会把按下 Enter 键的\n 留在
字符串中， fputs()与puts()不一样，不会添加一个换行符。
6.二进制文件与文本文件的区别是，这两种文件格式对系统的依赖性不
同。二进制流和文本流的区别包括是在读写流时程序执行的转换（二进制流
不转换，而文本流可能要转换换行符和其他字符）。