Hey guys, I'm from the Angular team and we are currently trying to use the
TypeScript compiler to compile the project to system.register format. In the
process, I noticed a bug with the output. I've cloned your branch
**release1.5** to make sure that it wasn't just a bug on our end.
Here is a small example that I have composed independent of the Angular
project.
Export file with super class:
    /// foo.ts
    export class Foo {
      a: string;
    }
Import file with sub class:
    /// bar.ts
    import {Foo} from './foo';
    export class Bar extends Foo {
      b: string;
    }
System.register format output:
    /// bar.js
    var __extends = (this && this.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        __.prototype = b.prototype;
        d.prototype = new __();
    };System.register(['./foo'], function(exports_1) {
        var foo_1;
        var Bar;
        return {
            setters:[
                function (_foo_1) {
                    foo_1 = _foo_1;
                }],
            execute: function() {
                Bar = (function (_super) {
                    __extends(Bar, _super);
                    function Bar() {
                        _super.apply(this, arguments);
                    }
                    return Bar;
                })(foo_1.Foo);
                exports_1("Bar", Bar);
            }
        }
    });
The **__extends** function is being defined outside of the context of
System.register. Systemjs uses a number of regex expressions to determine the
format of the file that it is reading. It won't recognize this output.
I would suggest modifying the output as so:
    System.register(['./foo'], function(exports_1) {
        var __extends = (window && window.__extends) || function (d, b) {
            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            function __() { this.constructor = d; }
            __.prototype = b.prototype;
            d.prototype = new __();
        };
        var foo_1;
        var Bar;
        return {
            setters:[
                function (_foo_1) {
                    foo_1 = _foo_1;
                }],
            execute: function() {
                Bar = (function (_super) {
                    __extends(Bar, _super);
                    function Bar() {
                        _super.apply(this, arguments);
                    }
                    return Bar;
                })(foo_1.Foo);
                exports_1("Bar", Bar);
            }
        }
    });
My systemjs module is version @0.18.1