### Which version of ShardingSphere did you use?
  * ShardingSphere-Proxy 5.1.1.
  * mysql 8.0.25
### Which project did you use? ShardingSphere-JDBC or ShardingSphere-Proxy?
ShardingSphere-Proxy
### Expected behavior
Execute all sql code
### Actual behavior
Some of them will be ignored
### Reason analyze (If you can)
Asynchronous problem
### Steps to reproduce the behavior, such as: SQL to execute, sharding rule
configuration, when exception occur etc.
1.write sharding rules (distsql) and save a file.  
2\. login mysql.  
3\. create database and use it.  
4\. input command:
    source [file path]
5.View the created sharding rules
     show sharding table rules;
You will find that some rules are not created successfully.
6.Add code between rules creation
    The select sleep (0.1);
Repeating the above process solves the problem
### Example codes for reproduce this issue (such as a github link).
The files that need to be executed are as follows
    ADD RESOURCE test_0 (
        HOST=127.0.0.1,
        PORT=3306,
        DB=test_0,
        USER=root,
        PASSWORD=root
    ),test_1 (
        HOST=127.0.0.1,
        PORT=3306,
        DB=test_1,
        USER=root,
        PASSWORD=root
    );
    CREATE DEFAULT SINGLE TABLE RULE RESOURCE = test_0;
    CREATE SHARDING TABLE RULE test1 (
    DATANODES("test_${0..1}.test1"),
    DATABASE_STRATEGY(TYPE=standard,SHARDING_COLUMN=PlayerID,SHARDING_ALGORITHM(TYPE(NAME=BOUNDARY_RANGE,PROPERTIES("sharding-ranges"=20001))))
    );
    CREATE SHARDING TABLE RULE test2 (
    DATANODES("test_${0..1}.test2"),
    DATABASE_STRATEGY(TYPE=standard,SHARDING_COLUMN=PlayerID,SHARDING_ALGORITHM(TYPE(NAME=BOUNDARY_RANGE,PROPERTIES("sharding-ranges"=20001))))
    );
    CREATE SHARDING TABLE RULE test3(
    DATANODES("test_${0..1}.test3"),
    DATABASE_STRATEGY(TYPE=standard,SHARDING_COLUMN=PlayerID,SHARDING_ALGORITHM(TYPE(NAME=BOUNDARY_RANGE,PROPERTIES("sharding-ranges"=20001))))
    );
    CREATE SHARDING TABLE RULE test4 (
    DATANODES("test_${0..1}.test4"),
    DATABASE_STRATEGY(TYPE=standard,SHARDING_COLUMN=PlayerID,SHARDING_ALGORITHM(TYPE(NAME=BOUNDARY_RANGE,PROPERTIES("sharding-ranges"=20001))))
    );
    CREATE SHARDING TABLE RULE test5 (
    DATANODES("test_${0..1}.test5"),
    DATABASE_STRATEGY(TYPE=standard,SHARDING_COLUMN=PlayerID,SHARDING_ALGORITHM(TYPE(NAME=BOUNDARY_RANGE,PROPERTIES("sharding-ranges"=20001))))
    );
    CREATE SHARDING TABLE RULE test6 (
    DATANODES("test_${0..1}.test6"),
    DATABASE_STRATEGY(TYPE=standard,SHARDING_COLUMN=PlayerID,SHARDING_ALGORITHM(TYPE(NAME=BOUNDARY_RANGE,PROPERTIES("sharding-ranges"=20001))))
    );
    CREATE SHARDING TABLE RULE test7 (
    DATANODES("test_${0..1}.test7"),
    DATABASE_STRATEGY(TYPE=standard,SHARDING_COLUMN=PlayerID,SHARDING_ALGORITHM(TYPE(NAME=BOUNDARY_RANGE,PROPERTIES("sharding-ranges"=20001))))
    );
    CREATE SHARDING TABLE RULE test8 (
    DATANODES("test_${0..1}.test8"),
    DATABASE_STRATEGY(TYPE=standard,SHARDING_COLUMN=PlayerID,SHARDING_ALGORITHM(TYPE(NAME=BOUNDARY_RANGE,PROPERTIES("sharding-ranges"=20001))))
    );
    CREATE SHARDING TABLE RULE test9 (
    DATANODES("test_${0..1}.test9"),
    DATABASE_STRATEGY(TYPE=standard,SHARDING_COLUMN=PlayerID,SHARDING_ALGORITHM(TYPE(NAME=BOUNDARY_RANGE,PROPERTIES("sharding-ranges"=20001))))
    );
    CREATE SHARDING TABLE RULE test10 (
    DATANODES("test_${0..1}.test10"),
    DATABASE_STRATEGY(TYPE=standard,SHARDING_COLUMN=PlayerID,SHARDING_ALGORITHM(TYPE(NAME=BOUNDARY_RANGE,PROPERTIES("sharding-ranges"=20001))))
    );