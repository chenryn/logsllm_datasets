### Experiment Setup and Observations

An `iperf` client connects to a Wi-Fi development board configured as an access point and sends TCP traffic at a throughput of 7 Mbit/s. Simultaneously, Bluetooth is configured as a BLE beacon, regularly transmitting REQUEST signals. On the logic analyzer installed in the coexistence interface, frequent glitches in the GRANT signal are observed when Wi-Fi is under high load, as shown in Figure 10. These glitches occur only under traffic conditions and if the coexistence priority mode is set to `WLAN_HIGH` or `WLAN_MAXIMIZED`. Initially, this appears to be a power supply issue. However, setting the logic analyzer output to analog mode reveals that the power level drops to 0 V, suggesting a programming error.

**Figure 10: GRANT glitches for WLAN_HIGH/MAXIMIZED**

### Mitigation Strategies

#### A. Improving Coexistence Security

Addressing coexistence issues depends on the affected component (hardware or firmware) and the control mechanisms available (e.g., reconfigurable hardware interfaces). Possible mitigations include:

- **Fixing chip architectures with shared memory components (hardware):** This involves redesigning the chip architecture to eliminate vulnerabilities.
- **Stripping metadata and unnecessary information from coexistence protocols (hardware/firmware):** Reducing the amount of data exchanged can minimize the attack surface.
- **Adding plausibility checks on resource claims (firmware):** Implementing additional checks to ensure that resource requests are valid and legitimate.

**Addressing Hardware Issues:**
Since our threat model assumes code execution on one wireless core, firmware patches are only effective if they prevent another core from escalating privileges into the patched core. However, the untrusted core could re-enable access to shared hardware components temporarily disabled by firmware configurations. Therefore, approaches like firmware debloating have limited effect [61]. Ideally, coexistence flaws should be patched in hardware.

**Fixing Chip Architectures and Hardware:**
Implementing these changes will take considerable time to reach customers. Rolling out hardware patches requires a new generation of chips. As of November 2021, we have not seen a new Broadcom or Cypress chip generation that addresses the shared memory issue. The chips in the latest iPhone 12 and 13 have a firmware compile date of October 2019, which is prior to our report of the shared memory code execution flaw. Thus, we expect hardware-based patches not earlier than the iPhone 14 release.

**Changing Coexistence Protocols:**
Changes to protocol implementations should not reduce performance under normal operation. However, additional plausibility checks and countermeasures on suspected attack attempts, and generally stripping information from these protocols, pose a significant potential to negatively impact performance.

Moreover, protocol changes require all wireless chips to update their protocol implementations simultaneously to maintain inter-chip compatibility. Even if patchable in firmware, parts of these protocols might be implemented in hardware, meaning firmware can only access abstract packet type and time information but cannot manipulate raw coexistence protocol signals or adjust jitter to packet time slots.

#### B. Vendor Patches and Timeline

**Vendor Patch Process:**
Such bugs are surprising given that Silicon Labs should have made the same observations with their coexistence development kit. Optimizing time variation and glitches should significantly improve their Bluetooth and Wi-Fi performance. The complexity of coexistence patches, including those theoretically patchable in firmware, raises an important question: How did vendors apply patches?

**Responsible Disclosure Timeline:**
We reported the first coexistence DoS in August 2019. Broadcom replied that they would add protected register access to prevent coexistence reconfiguration via Bluetooth. However, the ARM Cortex M3/M4 chips do not have such a feature. In January 2020, the issue was still unpatched on an up-to-date iOS. Thus, we added Apple, one of the largest customers of Broadcom wireless chips, showing that the bug was not fixed, potentially unpatchable, and according to initial measurements, even information leakage was plausible. Once we had working PoCs and descriptions for information leakage and code execution, we started the next round of responsible disclosure in March 2020, which also included Cypress and further selected customers like Google and Samsung. We informed other chip manufacturers about the more general nature of coexistence issues. Later, we built PoCs for Silicon Labs chips, which we reported in November 2020 and included the Bluetooth SIG.

**Broadcom Patches:**
As of November 2021, more than two years after reporting the first coexistence bug, coexistence attacks, including code execution, still work on up-to-date Broadcom chips. This highlights the difficulty of fixing these issues in practice. Broadcom prioritizes customers by the number of affected chips, with mobile devices patched after 2–4 months. The usual order is iOS with irregular patch releases, then Samsung-flavored Android with a monthly patch cycle, followed by macOS. To the best of our knowledge, patches need to be requested by Broadcom’s customers, causing a slow patch timeline for Linux-based devices. Thus, iPhones and the newest Samsung Galaxy S series are the preferred devices to check for patches—and have dedicated security teams to contact in case expected patches are missing.

**Cypress Patches:**
The Cypress patch process is independent of Broadcom patches. Cypress acquired parts of Broadcom’s wireless division [17], specifically the IoT devices. After the acquisition, code was developed independently. Cypress is not necessarily informed by Broadcom if there are vulnerabilities, despite still sharing large parts of the codebase, and patches might be developed independently. To the best of our knowledge, Broadcom never released any publicly visible patch release notes—but Cypress released some in June 2020 and updated the status in October as follows [16]:

- They claim that the shared RAM feature causing code execution has only been "enabled by development tools for testing mobile phone platforms." They plan to remove stack support for this in the future.
- The keystroke information leakage is remarked as solved without a patch because "keyboard packets can be identified through other means."
- DoS resistance is not yet resolved but is in development. For this, "Cypress plans to implement a monitor feature in the Wi-Fi and Bluetooth stacks to enable a system response to abnormal traffic patterns."

**Dividing Chips:**
Modern operating systems separate the Bluetooth from the Wi-Fi daemon via sandboxing. If the Bluetooth daemon can write into the Wi-Fi chip RAM, it can be considered a threat. This is fixed by preventing the Bluetooth daemon from writing into the Bluetooth chip’s RAM after loading firmware patches during driver initialization, which prevents the exploit chain Bluetooth daemon → Bluetooth chip → Wi-Fi chip as well as a potential follow-up escalation into the Wi-Fi daemon. This protection has been in place since iOS 13.5, Android 10 since the March 2020 release, and macOS Big Sur.

However, our primary threat, over-the-air attacks via the Bluetooth chip, is not mitigated by current patches. Only the interface Bluetooth daemon → Bluetooth chip is hardened, not the shared RAM interface that enables Bluetooth chip → Wi-Fi chip code execution. It is important to note that the daemon → chip interface was never designed to be secure against attacks. For example, the initial patch could be bypassed with a UART interface overflow (CVE-2021-22492) in the chip’s firmware until a recent patch, which was at least applied by Samsung in January 2021. Moreover, while writing to the Bluetooth RAM via this interface has been disabled on iOS devices, the iPhone 7 on iOS 14.3 would still allow another command to execute arbitrary addresses in RAM.

**Details on Removing Bluetooth RAM Write Protection:**
Details on how we removed the Bluetooth RAM write protection to check if the Bluetooth chip has any other mitigations in place are provided in Appendix A-C. This protection also prevents vendors from using tools like InternalBlue to check patches provided by Broadcom. Overall, this mitigation prevents security research while marginally improving security.

#### C. Personal Risk Minimization

While hardware-related issues remain unpatched, there are simple measures that significantly reduce the risk of wireless attacks for every user:

- **Delete unnecessary Bluetooth device pairings:** Paired Bluetooth devices have special permissions, such as keyboard input capabilities. Bluetooth is known for issues in the encryption scheme. Even after encryption schemes are broken, an initial pairing still requires user interaction. When an attacker gets code execution on a Bluetooth chip, they can get the capabilities of already paired devices but cannot add new devices. Hence, deleting unnecessary Bluetooth pairings reduces the risk that an attacker gains capabilities like keyboard input to use these for further escalation.
- **Remove unused Wi-Fi networks from the settings:** Smartphones permanently scan for Wi-Fi networks in the background and try to join them if the network name matches. The most common encryption scheme, WPA2, only verifies that the client has the correct password. If an attacker knows a single valid network name and password configuration of a device, they can spawn a new access point and get active connections. Even worse, networks with captive portals do not require any initial password at all. Thus, users should remove unused Wi-Fi networks to reduce the risk of data exchange that could lead to Wi-Fi firmware exploitation.
- **Use cellular instead of Wi-Fi at public spaces:** Cellular data plans have become more affordable, and cellular network coverage has increased. Disabling Wi-Fi by default and only enabling it when using trusted networks can be considered a good security practice, even if cumbersome.

Some services run in the background even while Wi-Fi and Bluetooth are disconnected. One example is the Apple Wireless Direct Link (AWDL) protocol on iOS and macOS devices, used to seamlessly transfer files using AirDrop and similar features. The initial device scan uses Bluetooth, and the data transfer takes place via Wi-Fi. Since a lot of AWDL functionality is based in the kernel, it poses an interesting attack surface, and an exploit for it was published recently [8]. Disabling Wi-Fi via the settings menu on iOS disables AWDL, which is a good measure to minimize the risk of joining malicious Wi-Fi networks.

### Related Cross-Technology Attacks & Side Channels

Shared resources and performance optimizations are well-known to introduce side channels on processors and memory [33], [34], [38].

**Screaming Channels:**
Exploit electromagnetic side channels on mixed-signal chips [14]. A mixed-signal chip is different from our definition of a combo chip—it just has one digital processing core, such as an ARM Cortex M4. The authors attack a Nordic Semiconductor chip with an analog Bluetooth radio frontend. The digital processing core runs firmware that calculates AES-128 in software, causing an electromagnetic field. This could already be attacked with classic side-channel attacks in very close proximity. However, the electromagnetic field couples into the digital radio frontend and is amplified along with the intended Bluetooth signal, creating a Screaming Channel that leaks similar information over a distance of up to 10 m. Compared to our coexistence attacks, observing Screaming Channels requires Software-Defined Radio (SDR)-based measurement equipment, closer and permanent physical proximity. It can only lead to information leakage instead of code execution.

**BLURtooth:**
Exploits the fact that BLE and Classic Bluetooth, two modes of operation in Bluetooth with different lower-layer protocols, support cross-transport key derivation [2]. Since BLE and Classic Bluetooth run on the same chip, there is no unauthorized data extraction across chip boundaries compared to coexistence attacks.

**Cross-Technology Capabilities:**
It is possible to add cross-technology capabilities to a chip. For example, WazaBee repurposes a Bluetooth radio frontend by patching its firmware to support Zigbee transmissions [15]. This is possible because BLE and Zigbee are very similar on the physical layer. While such modifications technically enable running two technologies on the same chip, no chip boundaries are violated.

### Conclusion

This paper shows that wireless coexistence comes with a significant attack surface and opens up various novel attack vectors, which even enable code execution across chips. While the code execution vulnerability is rooted in architectural issues of specific chips and uncovering required reverse-engineering efforts, DoS and information disclosure attacks of a more general nature can directly be derived from the openly available coexistence specifications.

Wireless coexistence enables new escalation strategies based on hardwired inter-chip components. Since the attack vector lies directly between the chips, it bypasses the main operating system. A full fix will require chip redesigns—current firmware fixes are incomplete.

### Acknowledgment

We thank Apple, Broadcom, Bluetooth SIG, Cypress, Google, MediaTek, NXP, Qualcomm, Samsung, Silicon Labs, and Texas Instruments for handling the responsible disclosure requests, and Tesla for forwarding our information to Marvell. We thank Dennis Heinze for porting InternalBlue to iOS and testing a subset of the CVEs, and Dennis Mantz for testing, and Jan Ruge for the Frankenstein support. We thank Matthias Schulz for adding support for the Samsung Galaxy S10e to Nexmon. Moreover, we thank Marco Cominelli for the assistance in capturing a trace and Matthias Gazzari for the keyboard expertise. We thank Dominik Maier, Max Maass, Arash Asadi, and Luis Henrique de Oliveira Alves for proofreading and Ralf-Philipp Weinmann for the feedback. We thank the anonymous shepherd for the very constructive dialog.

This work has been supported by BMBF Open6GHub, DFG SFB 1053 MAKI, HMWK LOEWE emergenCITY, and BMBF/HMWK National Research Center for Applied Cybersecurity ATHENE.

### Availability

Our PoCs are based on InternalBlue scripts and Nexmon patches. They are publicly available as part of the InternalBlue project on https://github.com/seemoo-lab/internalblue.

### References

[1] H. Anguelkov, “Reverse-engineering Broadcom Wireless Chipsets,” Quarkslab, Apr 2019.  
[2] D. Antonioli, N. O. Tippenhauer, K. Rasmussen, and M. Payer, “BLURtooth: Exploiting Cross-Transport Key Derivation in Bluetooth Classic and Bluetooth Low Energy,” arXiv preprint arXiv:2009.11776, 2020.  
[3] AOSP, “Gabeldorsche Bluetooth Stack,” Apr 2021.  
[4] Apple, “Profiles and Logs - Bug Reporting - Apple Developer.”  
[5] Apple and Google, “Privacy-Preserving Contact Tracing,” May 2020.  
[6] N. Artenstein, “Broadpwn: Remotely Compromising Android and iOS via a Bug in Broadcom’s Wi-Fi Chipsets,” 2017.  
[7] Asus, “RT-AC86U Source Code,” 2020.  
[8] I. Beer, “An iOS zero-click radio proximity exploit odyssey,” Dec. 2020.  
[9] G. Beniamini, “Over The Air: Exploiting Broadcom’s Wi-Fi Stack (Part 1),” Apr. 2017.  
[10] G. Bianchi, “Performance Analysis of the IEEE 802.11 Distributed Coordination Function,” IEEE Journal on Selected Areas in Communications, vol. 18, no. 3, pp. 535–547, 2000.  
[11] Bluetooth SIG, “Bluetooth Core Specification 5.2,” Jan. 2020.  
[12] ——, “Bluetooth Security Notices,” Apr 2021.  
[13] A. Cama, “A walk with Shannon,” 2018.  
[14] G. Camurati, S. Poeplau, M. Muench, T. Hayes, and A. Francillon, “Screaming Channels: When Electromagnetic Side Channels Meet Radio Transceivers,” in Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security, ser. CCS ’18, New York, NY, USA: Association for Computing Machinery, 2018, p. 163–177.  
[15] R. Cayre, F. Galtier, G. Auriol, V. Nicomette, M. Kaˆaniche, and G. Marconato, “WazaBee: Attacking Zigbee Networks by Diverting Bluetooth Low Energy Chips,” in IEEE/IFIP International Conference on Dependable Systems and Networks (DSN), 2021.  
[16] Cypress, “Security Bulletin: Potential Wi-Fi + Bluetooth Combo Security Vulnerabilities,” Jun 2020.  
[17] Cypress Semiconductor Corporation, “Cypress to Acquire Broadcom’s Wireless Internet of Things Business,” Jun. 2016.