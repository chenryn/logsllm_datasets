An iperf client connects to the Wi-Fi development board,
conﬁgured as an access point, and sends TCP trafﬁc with a
throughput of 7 Mbit/s. At the same time, Bluetooth is con-
ﬁgured as BLE beacon, regularly sending REQUEST signals.
On the logic analyzer installed in the coexistence interface,
frequent glitches in the GRANT signal can be observed while
Wi-Fi is under high load, as shown in Figure 10. They only
occur under trafﬁc and if the coexistence priority mode is set
to WLAN_HIGH or WLAN_MAXIMIZED. While this looks like
a power supply issue at ﬁrst sight, setting the logic analyzer
output to analog mode reveals that the power level drops to
0 V. Thus, this is likely a programming error.
REQUEST
PRIORITY
GRANT
Glitches
VI. MITIGATION
In the following, we address how coexistence security
should be improved and compare this to what has been already
patched by manufacturers. Moreover, we discuss how users
can minimize their personal risk of wireless exploitation.
A. Improving Coexistence Security
Addressing coexistence issues depends on the affected com-
ponent (hardware or ﬁrmware) and how to control it (e.g.,
reconﬁgurable hardware interfaces). Possible mitigations are:
• Fixing chip architectures with shared memory compo-
nents (hardware),
• stripping metadata and unnecessary information from
coexistence protocols (hardware/ﬁrmware), and
• adding plausibility checks on resource claims (ﬁrmware).
Addressing Hardware Issues: Since our threat model as-
sumes code execution on one wireless core, ﬁrmware patches
are only effective when they prevents another core from esca-
lating privileges into the patched core. However, the untrusted
core could re-enable access to shared hardware components
that are temporarily disabled by ﬁrmware conﬁgurations. Thus,
approaches like ﬁrmware debloating have limited effect [61].
Ideally, coexistence ﬂaws are patched in hardware.
Fixing chip architectures and hardware will take a lot of
time until it reaches customers. Rolling out hardware patches
requires a new generation of chips, and as of November 2021,
we have not seen a new Broadcom or Cypress chip generation
that addresses the shared memory issue. The chips in the latest
iPhone 12 and 13 have a ﬁrmware compile date of October
2019, which is prior to our report of the shared memory code
execution ﬂaw. Thus, we expect hardware-based patches not
earlier than the iPhone 14 release.
Changing Coexistence Protocols: Changes to protocol im-
plementations should not reduce the performance under nor-
mal operation. However, additional plausibility checks and
countermeasures on suspected attack attempts and generally
stripping information from these protocols pose a vast poten-
tial to impact performance negatively.
Moreover, protocol changes require that all wireless chips
update protocol implementations at once to maintain inter-chip
compatibility. Even if they might be patchable in ﬁrmware,
parts of these protocols might be implemented in hardware,
i.e., ﬁrmware can only access abstract packet type and time
information but is not able to manipulate raw coexistence
protocol signals or adjust jitter to packet time slots.
B. Vendor Patches and Timeline
0
0.2
0.4
0.6
0.8
1
1.2
1.4
Time in ms
Fig. 10: GRANT glitches for WLAN_HIGH/MAXIMIZED.
Such bugs are surprising given that Silicon Labs should
have made the same observations with their coexistence de-
velopment kit. Optimizing time variation and glitches should
signiﬁcantly improve their Bluetooth and Wi-Fi performance.
The complexity of coexistence patches, including the parts
that are theoretically patchable as they are implemented in
ﬁrmware and not hardware, raises an important question: How
did vendors apply patches?
Responsible Disclosure Timeline: We reported the ﬁrst
coexistence DoS in August 2019. Broadcom replied that they
would add protected register access to prevent coexistence
reconﬁguration via Bluetooth. However, ARM Cortex M3/M4
these chips are based on does not have such a feature. In
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:02 UTC from IEEE Xplore.  Restrictions apply. 
111239
January 2020, the issue was still unpatched on an up-to-date
iOS. Thus, we added Apple to the loop, one of the largest
customers of Broadcom wireless chips, showing that the bug
was not ﬁxed, potentially unpatchable, and according to ﬁrst
measurements, even information leakage was plausible. Once
we had working PoCs and descriptions for information leakage
and code execution, we started the next round of responsible
disclosure in March 2020, which also included Cypress and
further selected customers like Google and Samsung. More-
over, we informed other chip manufacturers that seemed to
have similar issues according to data sheets about the more
general nature of coexistence issues. Later on, we built PoCs
for Silicon Labs chips, which we reported in November 2020
and included the Bluetooth SIG.
Broadcom Patches: As of November 2021, more than two
years after reporting the ﬁrst coexistence bug, coexistence
attacks, including code execution, still work on up-to-date
Broadcom chips. This highlights how hard these issues are
to ﬁx in practice. In the following, we outline the usual patch
timelines and patches.
Broadcom prioritizes customers by the number of affected
chips, with mobile devices patched after 2–4 months. The
usual order is iOS with irregular patch releases, then Samsung-
ﬂavored Android with a monthly patch cycle, followed by
macOS. To the best of our knowledge, patches need to be
requested by Broadcom’s customers. This seems to cause
a very slow patch timeline for Linux-based devices. Thus,
iPhones and the newest Samsung Galaxy S series are the
preferred devices to check for patches—and have dedicated
security teams to contact in case expected patches are missing.
Cypress Patches: The Cypress patch process is independent
of Broadcom patches. Cypress acquired parts of Broadcom’s
wireless division [17], more precisely the IoT devices. After
the acquisition, code was developed independently. Cypress
is not necessarily informed by Broadcom if there are vul-
nerabilities, despite still sharing large parts of the codebase,
and patches might be developed independently. To the best of
our knowledge, Broadcom never released any publicly visible
patch release notes—but Cypress released some in June 2020
and updated the status in October as follows [16]:
• They claim that the shared RAM feature causing code
execution has only been “enabled by development tools
for testing mobile phone platforms”. They plan to remove
stack support for this in the future.
• The keystroke information leakage is remarked as solved
without a patch because “keyboard packets can be iden-
tiﬁed through other means”.
• DoS resistance is not yet resolved but is in development.
For this, “Cypress plans to implement a monitor feature
in the Wi-Fi and Bluetooth stacks to enable a system
response to abnormal trafﬁc patterns”.
Dividing chips into mobile devices and IoT devices is
misleading, since the actual distinction is single combo chip
versus separate SECI-connected chips. The wireless chip in
the Raspberry Pi 3B+/4 series has a shared RAM and is part
of the chips Cypress acquired.
Escalation Risk Reduction: Modern operating systems sep-
arate the Bluetooth from the Wi-Fi daemon via sandboxing.
Thus, if the Bluetooth daemon is able writing into the Wi-Fi
chip RAM, this can already be considered a threat. This is
ﬁxed by preventing the Bluetooth daemon to write into the
Bluetooth chip’s RAM after loading ﬁrmware patches during
driver initialization, which prevents the exploit chain Bluetooth
daemon→Bluetooth chip→Wi-Fi chip as well as a potential
follow-up escalation into the Wi-Fi daemon. This protection
has been put into place since iOS 13.5, Android 10 since the
March 2020 release, and macOS Big Sur.
Yet, our primary threat deﬁned in Section III, which are
over-the-air attacks via the Bluetooth chip, is not mit-
igated by current patches. Only the interface Bluetooth
daemon→Bluetooth chip is hardened, not the shared RAM
interface that enables Bluetooth chip→Wi-Fi chip code execu-
tion. It is important to note that the daemon→chip interface
was never designed to be secure against attacks. For example,
the initial patch could be bypassed with a UART interface
overﬂow (CVE-2021-22492) in the chip’s ﬁrmware until a
recent patch, which was at least applied by Samsung in January
2021. Moreover, while writing to the Bluetooth RAM via
this interface has been disabled on iOS devices, the iPhone
7 on iOS 14.3 would still allow another command to execute
arbitrary addresses in RAM.
Details on how we removed the Bluetooth RAM write
protection in order to check if the Bluetooth chip has any
other mitigations in place are provided in Appendix A-C.
This protection also prevents vendors from using tools like
InternalBlue to check patches provided by Broadcom. Overall,
this mitigation prevents security research while marginally
improving security.
C. Personal Risk Minimization
While hardware-related issues remain unpatched, there are
simple measures that signiﬁcantly reduce the risk of wireless
attacks every user can take:
• Delete unnecessary Bluetooth device pairings,
• remove unused Wi-Fi networks from the settings, and
• use cellular instead of Wi-Fi at public spaces.
An attacker within over-the-air proximity needs to gain code
execution on one wireless component initially. This means
that they need to exchange malicious data packets that corrupt
memory. The fewer data exchange possible, the lower the risk
of attacks.
Paired Bluetooth devices have special permissions, such as
keyboard input capabilities. Bluetooth is known for issues in
the encryption scheme—in the past three years, ﬁve critical
bugs were published by the Bluetooth SIG [12]. Yet, even
after encryption schemes are broken, an initial pairing still
requires user interaction. When an attacker gets code execution
on a Bluetooth chip, they can get the capabilities of already
paired devices—but cannot add new devices. Hence,
is
also recommended to delete unnecessary Bluetooth pairings.
This reduces the risk that an attacker gains capabilities like
keyboard input to use these for further escalation.
it
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:02 UTC from IEEE Xplore.  Restrictions apply. 
121240
Due to the current pandemic situation, many users have
Bluetooth enabled for privacy-preserving contact tracing. The
Google Apple Exposure Notiﬁcation (GAEN) API reduces the
risk of exploitation by using short, ﬁxed-length packets, which
are sent without feedback about reception [5]. Typical memory
corruption bugs rely on overﬂows due to missing length checks
and need a feedback channel to bypass security mechanisms
like Address Space Layout Randomization (ASLR) [48]. Thus,
we consider exposure notiﬁcations to be reasonably secure.
Smartphones permanently scan for Wi-Fi networks in the
background and try to join them if the network name matches.
The most common encryption scheme, WPA2, only veriﬁes
that the client has the correct password [31]. If an attacker
knows a single valid network name and password conﬁgu-
ration of a device, they can spawn a new access point and
get active connections. Even worse, networks with captive
portals do not require any initial password at all. Thus, users
should remove unused Wi-Fi networks to reduce the risk of
data exchange that could lead to Wi-Fi ﬁrmware exploitation.
Some services run in the background even while Wi-Fi
and Bluetooth are disconnected. One example of this is the
Apple Wireless Direct Link (AWDL) protocol on iOS and
macOS devices, which is used to seamlessly transfer ﬁles using
AirDrop and similar features [56]. The initial device scan uses
Bluetooth, and the data transfer takes place via Wi-Fi. Since a
lot of AWDL functionality is based in the kernel, it poses an
interesting attack surface, and an exploit for it was published
recently [8]. Disabling Wi-Fi via the settings menu on iOS
disables AWDL. This is also a good measure to minimize the
risk of joining malicious Wi-Fi networks.
Cellular data plans got more affordable during recent years
and cellular network coverage increased. Disabling Wi-Fi by
default and only enabling it when using trusted networks can
be considered a good security practice, even if cumbersome.
VII. RELATED CROSS-TECHNOLOGY ATTACKS & SIDE
CHANNELS
Shared resources and performance optimizations are well-
known to introduce side channels on processors and mem-
ory [33], [34], [38].
Screaming Channels exploit electromagnetic side channels
on mixed-signal chips [14]. A mixed-signal chip is different
from our deﬁnition of a combo chip—it just has one digital
processing core, such as an ARM Cortex M4. More pre-
cisely, the authors attack a Nordic Semiconductor chip with
an analog Bluetooth radio frontend. The digital processing
core is running ﬁrmware that calculates AES-128 in soft-
ware, thereby causing an electromagnetic ﬁeld. This could
already be attacked with classic side-channel attacks in very
close proximity. However, the electromagnetic ﬁeld couples
into the digital radio frontend and is ampliﬁed along with
the intended Bluetooth signal, thereby creating a Screaming
Channel
leaks similar information over a distance of
up to 10 m. Compared to our coexistence attacks, observing
Screaming Channels requires Software-Deﬁned Radio (SDR)-
based measurement equipment, closer and permanent physical
that
proximity. It can only lead to information leakage instead of
code execution.
BLURtooth exploits the fact that BLE and Classic Bluetooth,
two modes of operation in Bluetooth with different lower-layer
protocols, support cross-transport key derivation [2]. Since
BLE and Classic Bluetooth run on the same chip, there is no
unauthorized data extraction across chip boundaries compared
to coexistence attacks.
Moreover, it is possible to add cross-technology capabilities
to a chip. For example, WazaBee repurposes a Bluetooth radio
frontend by patching its ﬁrmware to support Zigbee trans-
missions [15]. This is possible because BLE and Zigbee are
very similar on the physical layer. While such modiﬁcations
technically enable running two technologies on the same chip,
no chip boundaries are violated.
VIII. CONCLUSION
This paper shows that wireless coexistence comes with a
huge attack surface and opens up various novel attack vectors,
which even enable code execution across chips. While the
code execution vulnerability is rooted in architectural issues
of speciﬁc chips and uncovering required reverse-engineering
efforts, DoS and information disclosure attacks of a more gen-
eral nature can directly be derived from the openly available
coexistence speciﬁcations.
Wireless coexistence enables new escalation strategies based
on hardwired inter-chip components. Since the attack vector
lies directly between the chips, it bypasses the main oper-
ating system. A full ﬁx will require chip redesigns—current
ﬁrmware ﬁxes are incomplete.
ACKNOWLEDGMENT
We thank Apple, Broadcom, Bluetooth SIG, Cypress,
Google, MediaTek, NXP, Qualcomm, Samsung, Silicon Labs,
and Texas Instruments for handling the responsible disclosure
requests, and Tesla for forwarding our information to Marvell.
We thank Dennis Heinze for porting InternalBlue to iOS
and testing a subset of the CVEs, and Dennis Mantz for
testing, and Jan Ruge for the Frankenstein support. We thank
Matthias Schulz for adding support for the Samsung Galaxy
S10e to Nexmon. Moreover, we thank Marco Cominelli for
the assistance in capturing a trace and Matthias Gazzari
for the keyboard expertise. We thank Dominik Maier, Max
Maass, Arash Asadi, and Luis Henrique de Oliveira Alves
for proofreading and Ralf-Philipp Weinmann for the feedback.
We thank the anonymous shepherd for the very constructive
dialog.
This work has been supported by BMBF Open6GHub,
DFG SFB 1053 MAKI, HMWK LOEWE emergenCITY, and
BMBF/HMWK National Research Center for Applied Cyber-
security ATHENE.
AVAILABILITY
Our PoCs are based on InternalBlue scripts and Nexmon
patches. They are publicly available as part of the InternalBlue
project on https://github.com/seemoo-lab/internalblue.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:02 UTC from IEEE Xplore.  Restrictions apply. 
131241
REFERENCES
[1] H. Anguelkov, “Reverse-engineering Broadcom Wireless Chipsets,”
https://blog.quarkslab.com/reverse-engineering-broadcom-wireless-
chipsets.html, Quarkslab, Apr 2019.
[2] D. Antonioli, N. O. Tippenhauer, K. Rasmussen, and M. Payer, “BLUR-
tooth: Exploiting Cross-Transport Key Derivation in Bluetooth Classic
and Bluetooth Low Energy ,” arXiv preprint arXiv:2009.11776, 2020.
[3] AOSP, “Gabeldorsche Bluetooth Stack,” https://android.googlesource.
com/platform/system/bt/+/master/gd, Apr 2021.
[4] Apple, “Proﬁles and Logs - Bug Reporting - Apple Developer,” https:
//developer.apple.com/bug-reporting/proﬁles-and-logs/.
[5] Apple and Google, “Privacy-Preserving Contact Tracing,” https://
covid19.apple.com/contacttracing, May 2020.
[6] N. Artenstein, “Broadpwn: Remotely Compromising Android and iOS
via a Bug in Broadcom’s Wi-Fi Chipsets,” https://blog.exodusintel.com/
2017/07/26/broadpwn/, 2017.
[7] Asus, “RT-AC86U Source Code,” https://dlcdnets.asus.com/pub/ASUS/
wireless/RT-AC86U/GPL RT AC86U 300438481049.zip, 2020.
[8] I. Beer, “An iOS zero-click radio proximity exploit odyssey,”
https://googleprojectzero.blogspot.com/2020/12/an-ios-zero-click-
radio-proximity.html, Dec. 2020.
[9] G. Beniamini, “Over The Air: Exploiting Broadcom’s Wi-Fi Stack (Part
1),” https://googleprojectzero.blogspot.com/2017/04/over-air-exploiting-
broadcoms-wi-ﬁ 4.html, Apr. 2017.
[10] G. Bianchi, “Performance Analysis of the IEEE 802.11 Distributed
Coordination Function,” IEEE Journal on Selected Areas in Commu-
nications, vol. 18, no. 3, pp. 535–547, 2000.
[11] Bluetooth SIG, “Bluetooth Core Speciﬁcation 5.2,” https://www.
bluetooth.com/speciﬁcations/bluetooth-core-speciﬁcation, Jan. 2020.
[12] ——, “Bluetooth Security Notices,” https://www.bluetooth.com/learn-
about-bluetooth/key-attributes/bluetooth-security/reporting-security/,
Apr 2021.
[13] A. Cama, “A walk with Shannon,” https://downloads.immunityinc.com/
inﬁltrate2018-slidepacks/amat-cama-a-walk-with-shannon/presentation.
pdf, 2018.
[14] G. Camurati, S. Poeplau, M. Muench, T. Hayes, and A. Francillon,
“Screaming Channels: When Electromagnetic Side Channels Meet
Radio Transceivers,” in Proceedings of
the 2018 ACM SIGSAC
Conference on Computer and Communications Security, ser. CCS ’18.
New York, NY, USA: Association for Computing Machinery, 2018, p.
163–177. [Online]. Available: https://doi.org/10.1145/3243734.3243802
[15] R. Cayre, F. Galtier, G. Auriol, V. Nicomette, M. Kaˆaniche, and
G. Marconato, “WazaBee: Attacking Zigbee Networks by Diverting
Bluetooth Low Energy Chips,” in IEEE/IFIP International Conference
on Dependable Systems and Networks (DSN), 2021.
[16] Cypress, “Security Bulletin: Potential Wi-Fi + Bluetooth Combo
Security Vulnerabilities,” https://community.cypress.com/t5/Security-
Bulletin/Security-Bulletin-Potential-Wi-Fi-Bluetooth-Combo-Security/
ba-p/246960, Jun 2020.
[17] Cypress Semiconductor Corporation, “Cypress to Acquire Broadcom’s
Wireless Internet of Things Business,” https://www.cypress.com/news/
cypress-acquire-broadcom-s-wireless-internet-things-business-0,
Jun.
2016.