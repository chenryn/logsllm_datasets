  strcat(a, "-", b, "-", c)
};
print f(12, c=7) // Returns "12-b.default-7"
```
## Invoking a user-defined function
The method to invoke a user-defined function depends on the arguments that the function expects to receive. The following sections cover how to [invoke a UDF without arguments](#invoke-a-udf-without-arguments), [invoke a UDF with scalar arguments](#invoke-a-udf-with-scalar-arguments), and [invoke a UDF with tabular arguments](#invoke-a-udf-with-tabular-arguments).
### Invoke a UDF without arguments
A user-defined function that takes no arguments and can be invoked either by its name, or by its name and an empty argument list in parentheses.
> [!div class="nextstepaction"]
> Run the query
```kusto
// Bind the identifier a to a user-defined function (lambda) that takes
// no arguments and returns a constant of type long:
let a=(){123};
// Invoke the function in two equivalent ways:
range x from 1 to 10 step 1
| extend y = x * a, z = x * a()
```
> [!div class="nextstepaction"]
> Run the query
```kusto
// Bind the identifier T to a user-defined function (lambda) that takes
// no arguments and returns a random two-by-two table:
let T=(){
  range x from 1 to 2 step 1
  | project x1 = rand(), x2 = rand()
};
// Invoke the function in two equivalent ways:
// (Note that the second invocation must be itself wrapped in
// an additional set of parentheses, as the union operator
// differentiates between "plain" names and expressions)
union T, (T())
```
### Invoke a UDF with scalar arguments
A user-defined function that takes one or more scalar arguments can be invoked by using the function name and a concrete argument list in parentheses:
> [!div class="nextstepaction"]
> Run the query
```kusto
let f=(a:string, b:string) {
  strcat(a, " (la la la)", b)
};
print f("hello", "world")
```
### Invoke a UDF with tabular arguments
A user-defined function that takes one or more table arguments (with any number of scalar arguments) and can be invoked using the function name and a concrete argument list in parentheses:
> [!div class="nextstepaction"]
> Run the query
```kusto
let MyFilter = (T:(x:long), v:long) {
  T | where x >= v
};
MyFilter((range x from 1 to 10 step 1), 9)
```
You can also use the operator `invoke` to invoke a user-defined function that
takes one or more table arguments and returns a table. This function is useful when the first concrete table argument to the function is the source of the `invoke` operator:
> [!div class="nextstepaction"]
> Run the query
```kusto
let append_to_column_a=(T:(a:string), what:string) {
    T | extend a=strcat(a, " ", what)
};
datatable (a:string) ["sad", "really", "sad"]
| invoke append_to_column_a(":-)")
```
## Default values
Functions may provide default values to some of their parameters under the following conditions:
* Default values may be provided for scalar parameters only.
* Default values are always literals (constants). They can't be arbitrary calculations.
* Parameters with no default value always precede parameters that do have a default value.
* Callers must provide the value of all parameters with no default values arranged in the same order as the function declaration.
* Callers don't need to provide the value for parameters with default values, but may do so.
* Callers may provide arguments in an order that doesn't match the order of the parameters. If so, they must name their arguments.
The following example returns a table with two identical records. In the first invocation of `f`, the arguments are completely "scrambled", so each one is explicitly given a name:
> [!div class="nextstepaction"]
> Run the query
```kusto
let f = (a:long, b:string = "b.default", c:long = 0) {
  strcat(a, "-", b, "-", c)
};
union
  (print x=f(c=7, a=12)), // "12-b.default-7"
  (print x=f(12, c=7))    // "12-b.default-7"
```
**Output**
|x|
|---|
|12-b.default-7|
|12-b.default-7|
## View functions
A user-defined function that takes no arguments and returns a tabular expression can be marked as a **view**. Marking a user-defined function as a view means that the function behaves like a table whenever a wildcard table name resolution is performed.
The following example shows two user-defined functions, `T_view` and `T_notview`, and shows how only the first one is resolved by the wildcard reference in the `union`:
```kusto
let T_view = view () { print x=1 };
let T_notview = () { print x=2 };
union T*
```
## Restrictions
The following restrictions apply:
* User-defined functions can't pass into [toscalar()](../toscalar-function.md) invocation information that depends on the row-context in which the function is called.
* User-defined functions that return a tabular expression can't be invoked with an argument that varies with the row context.
* A function taking at least one tabular input can't be invoked on a remote cluster.
* A scalar function can't be invoked on a remote cluster.
The only place a user-defined function may be invoked with an argument that varies with the row context is when the user-defined function is composed of scalar functions only and doesn't use `toscalar()`.
### Examples
#### Supported scalar function
The following query is supported because `f` is a scalar function that doesn't reference any tabular expression.
> [!div class="nextstepaction"]
> Run the query
```kusto
let Table1 = datatable(xdate:datetime)[datetime(1970-01-01)];
let Table2 = datatable(Column:long)[1235];
let f = (hours:long) { now() + hours*1h };
Table2 | where Column != 123 | project d = f(10)
```
The following query is supported because `f` is a scalar function that references the tabular expression `Table1` but is invoked with no reference to the current row context `f(10)`:
> [!div class="nextstepaction"]
> Run the query
```kusto
let Table1 = datatable(xdate:datetime)[datetime(1970-01-01)];
let Table2 = datatable(Column:long)[1235];
let f = (hours:long) { toscalar(Table1 | summarize min(xdate) - hours*1h) };
Table2 | where Column != 123 | project d = f(10)
```
### Unsupported scalar function
The following query isn't supported because `f` is a scalar function that references the tabular expression `Table1`, and is invoked with a reference to the current row context `f(Column)`:
```kusto
let Table1 = datatable(xdate:datetime)[datetime(1970-01-01)];
let Table2 = datatable(Column:long)[1235];
let f = (hours:long) { toscalar(Table1 | summarize min(xdate) - hours*1h) };
Table2 | where Column != 123 | project d = f(Column)
```
### Unsupported tabular function
The following query isn't supported because `f` is a tabular function that is invoked in a context that expects a scalar value.
```kusto
let Table1 = datatable(xdate:datetime)[datetime(1970-01-01)];
let Table2 = datatable(Column:long)[1235];
let f = (hours:long) { range x from 1 to hours step 1 | summarize make_list(x) };
Table2 | where Column != 123 | project d = f(Column)
```
## Features that are currently unsupported by user-defined functions
For completeness, here are some commonly requested features for user-defined functions that are currently not supported:
1. Function overloading: There's currently no way to overload a function (a way to create multiple functions with the same name and different input schema).
1. Default values: The default value for a scalar parameter to a function must be a scalar literal (constant).
## Related content
* [Stored functions](../schema-entities/stored-functions.md)
* [Views](../schema-entities/views.md)