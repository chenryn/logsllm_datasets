title:BLOCK: a black-box approach for detection of state violation attacks
towards web applications
author:Xiaowei Li and
Yuan Xue
BLOCK: A Black-box Approach for Detection of State
Violation Attacks Towards Web Applications
Department of Electrical Engineering and
Department of Electrical Engineering and
Xiaowei Li
Computer Science
Vanderbilt University
PI:EMAIL
Yuan Xue
Computer Science
Vanderbilt University
PI:EMAIL
ABSTRACT
State violation attacks towards web applications exploit logic
ﬂaws and allow restrictive functions and sensitive informa-
tion to be accessed at inappropriate states. Since application
logic ﬂaws are speciﬁc to the intended functionality of a par-
ticular web application, it is diﬃcult to develop a general
approach that addresses state violation attacks. To date,
existing approaches all require web application source code
for analysis or instrumentation in order to detect state vio-
lations.
In this paper, we present BLOCK, a BLack-bOx approach
for detecting state violation attaCKs. We regard the web
application as a stateless system and infer the intended web
application behavior model by observing the interactions be-
tween the clients and the web application. We extract a set
of invariants from the web request/response sequences and
their associated session variable values during its attack-free
execution. The set of invariants is then used for evaluating
web requests and responses at runtime. Any web request or
response that violates the associated invariants is identiﬁed
as a potential state violation attack. We develop a system
prototype based on the WebScarab proxy and evaluate our
detection system using a set of real-world web applications.
The experiment results demonstrate that our approach is
eﬀective at detecting state violation attacks and incurs ac-
ceptable performance overhead. Our approach is valuable
in that it is independent of the web application source code
and can easily scale up.
Keywords: black-box approach, state violation attack,
web application security, invariant
1.
INTRODUCTION
During the past decade, web applications have become
the most prevalent way for service delivery over the Inter-
net. As they get deeply embedded in business activities and
required to support sophisticated functionalities, the design
and implementation of web applications are becoming more
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ACSAC ’11 Dec. 5-9, 2011, Orlando, Florida USA
Copyright 2011 ACM 978-1-4503-0672-0/11/12 ...$10.00.
and more complicated. The increasing popularity and com-
plexity make web applications a primary target for hackers
on the Internet. According to a recent survey [22], attacks
against web applications account for 63% of all Internet ex-
ploits. These attacks are commonly classiﬁed into two classes
[7]: 1) input validation attacks, which exploit the applica-
tion’s insuﬃcient or erroneous sanitization of user inputs,
allowing malicious code to be injected into web applications,
and 2) state violation attacks, which exploit logic ﬂaws in
web applications, allowing restrictive functions and sensitive
information to be accessed at inappropriate states. For ex-
ample, authentication bypass attack allows the attacker to
perform administrative operations over the web application.
This paper focuses on state violation attacks. While there
are a large body of literatures on input validation attacks
(e.g., [12, 25, 15, 11]), there have been very limited works
that address state violation attacks [4, 7, 10]. The ma-
jor challenge for defending against state violation attacks
comes from the fact that application logic ﬂaws are speciﬁc
to the intended functionality of a particular web application.
Thus it is diﬃcult to develop a general approach that ad-
dresses state violation attacks towards diﬀerent applications.
Clearly, the key to approaching state violation attacks is to
derive the intended behavior model of a particular web appli-
cation, i.e., the speciﬁcation of web application. The existing
works have presented both static and dynamic techniques to
infer the web application speciﬁcation. For example, Mi-
MoSA [4] analyzes the application source code to derive an
intended workﬂow graph; Swaddler [7] establishes models of
session variables for each program block of the application
based on the execution traces; Waler [10] infers likely in-
variants of session variables at each program point during
execution. Such speciﬁcations can then be either leveraged
by model checking (e.g., MiMoSA, Waler) to identify vul-
nerabilities within the implementation or used at runtime
for detection of relevant attacks (e.g., Swaddler). However,
these existing works are limited in two aspects. First, they
all require the web application source code for instrumenta-
tion, which may not be available in practice. Second, they
all infer the application speciﬁcation at the program level,
which makes their approach closely coupled with the pro-
gramming languages (e.g., PHP, JSP) and frameworks. The
correctness and accuracy of their derived speciﬁcations are
highly dependent on and thus limited by their capability of
dealing with language-level details. For example, MiMoSA
and Swaddler cannot handle object-oriented programs grace-
fully.
In this paper, we present BLOCK, a BLack-bOx approach
for detecting state violation attaCKs against web applica-
(cid:1)(cid:2)(cid:3)
tions. Due to the stateless nature of HTTP protocol, session
variables are explicitly deﬁned in web applications to main-
tain the state of a web session. Session variables can be
maintained either at the client side (i.e., via cookies, URL
rewriting or hidden forms) or at the server side with a session
ID issued to the client for indexing. The key idea of BLOCK
is to infer the intended behavior model of the web application
(i.e., speciﬁcation) by observing the web request/response
sequences and their associated session variable values dur-
ing attack-free executions. Then, the inferred model is used
for evaluating web requests and responses at runtime, com-
bining with current session information. Any web request or
response that violates the model is identiﬁed as a potential
state violation attack and blocked. In particular, we lever-
age the stateless property of HTTP and regard the vector of
current values of session variables as part of the input along
with web request to the application, the web responses and
the updated session variables as the output. In this way, the
web application can be approximated as a stateless system.
Under this stateless system model, we characterize the ap-
plication behavior from three aspects in the form of likely
invariants: 1) input invariants, which model the relationship
between the web requests and the session variable values, 2)
input/output invariants, which capture the relationship be-
tween the web request and response as well as the changes in
the session variables after the web request is processed, and
3) input/output sequence invariants, which leverage the his-
torical web request/response pair sequences to capture the
application states that are not revealed by deﬁned session
variables.
To our knowledge, BLOCK is the ﬁrst black-box technique
that addresses state violation attacks towards web applica-
tions. Our approach is independent of the application source
code and able to handle a variety of programming frame-
works. Thus, it can scale up to protect a large number of
web applications.
Our contributions are summarized as follows:
• We propose a black-box approach for detecting state
violation attacks. We regard the web application as
a stateless system and model the relations within web
requests, responses and session variables using a set of
invariants.
• We implement a prototype of our detection system,
which is able to observe and analyze the interactions
between the clients and the web application, detect and
block state violation attacks.
• We evaluate our detection system using a set of open
source web applications. The detection results show
that our approach is eﬀective at detecting state viola-
tion attacks and incurs acceptable performance over-
head.
The rest of this paper is organized as follows. Section II il-
lustrates state violation attacks we target at. Our approach
is presented in detail in Section III. The following section
describes the implementation of our detection system proto-
type. Evaluation setup and results are given in Section V.
Section VI discusses related works and Section VII concludes
this paper.
2. STATE VIOLATION ATTACK
A web application manages the clients’ session states to
control the access over its restrictive functions and sensi-
tive information, as well as enforce desired state transitions.
Although most current web application development frame-
works provide session management mechanisms, it is still the
developer’s responsibility to deﬁne and check session vari-
ables at appropriate program points, which is usually done
in an ad-hoc manner. Three types of vulnerabilities are pos-
sibly introduced into the web application: (1) insuﬃcient
deﬁnition of session variables for diﬀerentiating all possible
states; (2) insuﬃcient checking of session variables at ap-
propriate program points; (3) erroneous checking of session
variables that can be bypassed. They all make the web ap-
plication vulnerable to state violation attacks (also referred
to as the workﬂow violation attack in Swaddler [7]). The
attacker can launch state violation attacks by sending web
requests to the web application, which violate the underly-
ing requirements of expected web requests by the developers
at the current application state. We use a small PHP web
application, as shown in Fig.1, which contains several state
management vulnerabilities, as an example to illustrate state
violation attacks. This example is also used throughout the
paper to demonstrate how we address these attacks.
The ﬁrst example of state violation attack is authenti-
cation/authorization (simpliﬁed as auth hereafter) bypass.
The web application controls the access over its functions
by checking session variables indicating the user privilege
before its restrictive functions can be executed. If the ap-
plication is not at the required state, the web application
will redirect the user to the login page, authorization page
or an error page. However,
if there exists a path lead-
ing to the restrictive function with insuﬃcient or erroneous
checking of session variables, the attacker is able to bypass
the authentication/authorization. The example application
demonstrates three cases of auth bypass attacks. admin.php
and admin2.php contain restrictive functions, which should
only be accessed by admin users when the session variable
$ SESSION[‘privilege’] is set to the value of admin.
• In admin.php, there is no check on the session variable
$ SESSION[‘privilege’]. The attacker, being either a
guest or a regular user, can directly request the page
and access the admin functions.
• In admin2.php, even though there is an if condition
check on the session variable $privilege, the attacker
can append an additional parameter privilege to the
URL, for example http://example.com/admin2.php?
privilege=admin, and bypass the auth check. The rea-
son is when the register global option of PHP inter-
preter is enabled, the parameter attached to the web
request will be automatically bound to a global vari-
able, if such variable doesn’t exist in the current session
state. This vulnerability results from the inappropriate
or erroneous check on the session variable.
• In admin2.php, even when the auth check fails, the at-
tacker is able to execute the restrictive functions after
the redirection (i.e., header function) by submitting a
POST request with the parameter title and change the
application’s title successfully. This is because there is
no exit function or an additional check after the redi-
rection.
(cid:1)(cid:2)(cid:3)
";
} else if (isset($_POST['email'])){
if (validateLogin($_POST['email'], $_POST['passwd'])){
$_SESSION['username'] = $_POST['email'];
if ($_POST['email'] == $admin_email){
$_SESSION['privilege'] = "admin";
} else {
$_SESSION['privilege'] = "user";
}
header("Location: index.php?username
=" . $_SESSION['username']);
exit();
} else {
die("Wrong username or password");
}
}
?>
username: 
password: 
login.php
Next step: change the 
title";
include 'footer.html'; ?>
admin.php
Admin  link";
}
}
print "Logout";
include_once 'footer.html';
?>
index.php
New title: 
Logout
admin2.php
Figure 1: Example Application
The second example of state violation attack is parame-
ter manipulation. In a lot of cases, the web application as-
sumes implicit relations between the user’s input parameters
within web requests and the session state. Such a relation-
ship may also be reﬂected from web responses returned by
the web application.
If the application doesn’t check the
session state when accepting the web request, the attacker
is able to manipulate the input parameters and gain access
to unauthorized information.
In the example application,
after the user logs in, he/she will be redirected to the in-
dex.php page, which displays his/her personal information.
The web application assumes the request parameter user-
name is always equal to the value of session variable $ SES-
SION[‘username’]. If the equality relationship is not exam-
ined when the user’s personal information is retrieved, the
attacker is able to view any user’s information by modifying
the username parameter within the web request.
The third state violation attack is workﬂow bypass. A web
application usually has an intended workﬂow, which requires
the user to perform a predeﬁned sequence of operations to
complete a certain task. For example, an e-commerce web-
site has a predeﬁned checkout procedure, which instructs the
customer to ﬁrst ﬁll in the shipping information and then the
credit card information before the order can be conﬁrmed
and submitted. Such a temporal relationship is enforced by
the restrictions over the session state transitions. However, if
the session variables are insuﬃciently deﬁned or checked for
guarding the desired state transitions, the attacker is able to
bypass certain required steps and violate the intended work-
ﬂow. The example application requires the admin user ﬁrst
access admin.php, which logs his/her identify (by logIden-
tity function) before he/she can modify the application title
in admin2.php. The two steps indicate two diﬀerent session
states and the transition between them should be guarded
by the web application. However, there is no session variable
deﬁned for indicating whether the identity of the admin user
has been logged or not. The attacker can directly point to
admin2.php page without his/her identity being logged.
3. APPROACH
Our approach for detecting state violation attacks has two
key phases.
In the training phase, the intended behavior
model of the web application (i.e., the speciﬁcation) is de-
rived by observing the web request/response sequences and
the corresponding session variable values during its attack-
free execution. In the detection phase, the inferred model