# 【技术分享】AES标准及Rijndael算法解析
|
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
****
****
作者：[mattwu](http://bobao.360.cn/member/contribute?uid=399871538)
预估稿费：400RMB
投稿方式：发送邮件至[linwei#360.cn](mailto:PI:EMAIL)，或登陆[网页版](http://bobao.360.cn/contribute/index)在线投稿
**AES简介**
AES, Advanced Encryption Standard，其实是一套标准：[FIPS
197](http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf)，而我们所说的AES算法其实是Rijndael算法。
NIST (National INstitute of Standards and Technology)
在1997年9月12日公开征集更高效更安全的替代DES加密算法，第一轮共有15种算法入选，其中5种算法入围了决赛，分别是MARS，RC6，Rijndael，Serpent和Twofish。又经过3年的验证、评测及公众讨论之后Rijndael算法最终入选。
**Rijndael算法**
Rijndael算法是由比利时学者Joan Daemen和Vincent
Rijmen所提出的，算法的名字就由两位作者的名字组合而成。Rijndael的优势在于集安全性、性能、效率、可实现性及灵活性与一体。
**Joan Daemen和Vincent Rijmen**
**AES vs Rijndael**
Rijndael算法支持多种分组及密钥长度，介于128-256之间所有32的倍数均可，最小支持128位，最大256位，共25种组合。而AES标准支持的分组大小固定为128位，密钥长度有3种选择：128位、192位及256位。
**加密实例**
下面针对16字节的简单明文字串“0011223344….eeff”，分别用AES-128/AES-192及AES-256进行加密运算：
**AES-128**
密钥选用16字节长的简单字串：“00010203….0e0f” 来，上面的明文经过加密变换后成为"69c4e0d8….6089"。
    plain :  00 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff
    key   :  00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
    cypher:  69 c4 e0 d8 6a 7b 04 30 d8 cd b7 80 70 b4 c5 5a
**AES-192**
    plain :  00 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff
    key   :  00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d .. .. .. 17
    cypher:  dd a9 7c a4 86 4c df e0 6e af 70 a0 ec 0d 71 91
**AES-256**
    plain :  00 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff
    key   :  00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d .. .. .. 17 .. .. .. 1f
    cypher:  8e a2 b7 ca 51 67 45 bf ea fc 49 90 4b 49 60 89
**总体结构**
Rijndael算法是基于代换-置换网络（SPN，Substitution-permutation
network）的迭代算法。明文数据经过多轮次的转换后方能生成密文，每个轮次的转换操作由轮函数定义。轮函数任务就是根据密钥编排序列（即轮密码）对数据进行不同的代换及置换等操作。
图左侧为轮函数的流程，主要包含4种主要运算操作：字节代换(SubByte)、行移位(ShiftRow)、列混合(MixColumn)、轮密钥加(AddRoundKey)。图右侧为密钥编排方案，在Rijndael中称为密钥扩展算法（KeyExpansion）。
AES标准算法将128位的明文，以特定次序生成一个4×4的矩阵（每个元素是一个字节，8位），即初始状态（state），经由轮函数的迭代转换之后又将作为下一轮迭代的输入继续参与运算直到迭代结束。
Rijndael算法支持大于128位的明文分组，所以需要列数更多的矩阵来描述。Rijndael轮函数的运算是在特殊定义的有限域GF(256)上进行的。有限域（Finite
Field）又名伽罗瓦域（Galois
field），简单言之就是一个满足特定规则的集合，集合中的元素可以进行加减乘除运算，且运算结果也是属于此集合。更详细有有关Rijndael算法的数学描述，可以参阅本文最后所罗列的参考资料，在此不做熬述。
**轮函数**
我们已经得知轮函数主要包含4种运算，但不同的运算轮所做的具体运的算组合并不相同。主要区别是初始轮（Round: 0）和最后一轮（Round:
Nr），所有中间轮的运算都是相同的，会依次进行4种运算，即：
字节代换(SubByte)
行移位(ShiftRow)
列混合(MixColumn)
轮密钥加(AddRoundKey)
根据Rinjdael算法的定义，加密轮数会针对不同的分组及不同的密钥长度选择不同的数值：
AES标准只支持128位分组（Nb = 4）的情况。
轮函数的实现代码如下，直接实现在加密函数内部循环中：
    int aes_encrypt(AES_CYPHER_T mode, uint8_t *data, int len, uint8_t *key)
    {
        uint8_t w[4 * 4 * 15] = {0}; /* round key */
        uint8_t s[4 * 4] = {0}; /* state */
        int nr, i, j;
        /* key expansion */
        aes_key_expansion(mode, key, w);
        /* start data cypher loop over input buffer */
        for (i = 0; i  0) {
                    /* do SubBytes */
                    aes_sub_bytes(mode, s);
                    /* do ShiftRows */
                    aes_shift_rows(mode, s);
                    if (nr < g_aes_rounds[mode]) {
                        /* do MixColumns */
                        aes_mix_columns(mode, s);
                    }
                }
                /* do AddRoundKey */
                aes_add_round_key(mode, s, w, nr);
            }
            /* save state (cypher) to user buffer */
            for (j = 0; j < 4 * g_aes_nb[mode]; j++)
                data[i + j] = s[j];
        }
        return 0;
    }
**  
**
**动画演示加密过程**
Enrique
Zabala创建了一个AES-128加密算法的动画演示，清楚、直观地介绍了轮函数执行的过程。[点击可直接观看](http://www.formaestudio.com/rijndaelinspector/archivos/Rijndael_Animation_v4_eng.swf)。
**轮函数拆解：字节代换（Substitute Bytes）**
字节代换（SubBytes）是对state矩阵中的每一个独立元素于置换盒 （Substitution-box，S盒）中进行查找并以此替换输入状态的操作。字节代换是可逆的非线性变换，也是AES运算组中唯一的非线性变换。字节代换逆操作也是通过逆向置换盒的查找及替换来完成的。
S盒是事先设计好的16×16的查询表，即256个元素。其设计不是随意的，要根据设计原则严格计算求得，不然无法保证算法的安全性。既然是S盒是计算得来，所以字节代换的操作完全可以通过计算来完成，不过通过S盒查表操作更方便快捷，图中所示就是通过S盒查找对应元素进行的替换操作。
    void aes_sub_bytes(AES_CYPHER_T mode, uint8_t *state)
    {
        int i, j;
        for (i = 0; i < g_aes_nb[mode]; i++) {
            for (j = 0; j < 4; j++) {
                state[i * 4 + j] = aes_sub_sbox(state[i * 4 + j]);
            }
        }
    }
实例说明：
       input:  00 10 20 30 40 50 60 70 80 90 a0 b0 c0 d0 e0 f0
         sub:  63 ca b7 04 09 53 d0 51 cd 60 e0 e7 ba 70 e1 8c
**轮函数拆解：行移位（Shift Rows）**
行移位主要目的是实现字节在每一行的扩散，属于线性变换。
    void aes_shift_rows(AES_CYPHER_T mode, uint8_t *state)
    {
        uint8_t *s = (uint8_t *)state;
        int i, j, r;
        for (i = 1; i < g_aes_nb[mode]; i++) {
            for (j = 0; j < i; j++) {
                uint8_t tmp = s[i];
                for (r = 0; r < g_aes_nb[mode]; r++) {
                    s[i + r * 4] = s[i + (r + 1) * 4];
                }
                s[i + (g_aes_nb[mode] - 1) * 4] = tmp;
            }
        }
    }
实例说明：
         sub:  63 ca b7 04 09 53 d0 51 cd 60 e0 e7 ba 70 e1 8c
       shift:  63 53 e0 8c 09 60 e1 04 cd 70 b7 51 ba ca d0 e7