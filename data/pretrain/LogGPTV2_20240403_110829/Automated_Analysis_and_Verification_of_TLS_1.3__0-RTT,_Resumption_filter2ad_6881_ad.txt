### 4.2. Secrecy Properties and Results

We formally model and analyze two primary secrecy properties. The first property ensures the secrecy of session keys, which implies perfect forward secrecy in the presence of an active adversary. The formal property we verify is:

**Lemma: Secret Session Keys**
```
(1) "For all actors, peers, roles, and keys k at time i:
(2) If a session key (SessionKey(actor, peer, role, k)) is accepted at time i,
(3) and the long-term private keys of the actor or peer have not been revealed before time i,
(4) then the adversary cannot derive the key k."
```

Intuitively, this property states that for all protocol behaviors and for all possible values of the variables on the first line (All): if an authenticated session key \( k \) is accepted (encoded by the occurrence of the `SessionKey` action), and the adversary has not revealed the long-term private keys of the actor or the peer before the session key is accepted, then the adversary cannot derive the key \( k \).

Our modeling approach is highly flexible. In the unilaterally authenticated mode, only the client establishes a session key with the `authenticated` flag. In the mutually authenticated mode, both roles log this action. These actions can also be used to verify the appropriate secrecy properties. This flexibility is also suitable for the more flexible delayed client authentication modes allowed in the final TLS 1.3 specification.

The second property we prove is that the client's early data keys are secure as long as the long-term private key of the server is not revealed.

**Lemma: Secret Early Data Keys**
```
(1) "For all actors, peers, and keys k at time i:
(2) If a client logs that it has produced an early data key (EarlyDataKey(actor, peer, 'client', k)) at time i,
(3) and the peer’s long-term private keys are not compromised,
(4) then the adversary does not know the early data key."
```

In particular, each time a client logs that it has produced an early data key and the peer’s long-term private keys are not compromised, the adversary does not know the early data key.

**Proof Approach in Tamarin**

Many security properties of TLS stem from the secrecy of shared secrets, such as the ephemeral secret (es) and the static secret (ss). Proving the secrecy of these components initially seems straightforward; at its core, the main TLS mechanism includes an authenticated Diffie-Hellman exchange. However, complications arise due to the interactions between different handshake modes in an unbounded number of sessions and connections, and powerful adversarial interference.

As a first step, it is necessary to prove a few fundamental invariant properties. These help future proofs by either reducing the number of contradictory dead-ends that the prover would otherwise explore or by helping to skip common intermediate steps. It is essential to apply some straightforward inductive proofs to avoid falling into many infinite loops.

From here, simple auxiliary lemmas can be constructed. These lemmas help piece together more complicated proofs in a modular way. For example, a common deduction uses the fact that knowledge of the PSK implies that the adversary must also have knowledge of some (ss, es) pair from a previous handshake.

Ideally, the auxiliary lemmas are sufficiently small and incremental that they can be proved automatically. Since each describes a small property likely to remain consistent throughout model changes, these can be used to quickly incorporate changes and reproduce proofs. The proofs for the secrecy of ss and es follow from the auxiliary lemmas in a more manageable way than would otherwise be the case. The main burden of proof is to unravel the client and server states to a point where the adversary needs to break the standard Diffie-Hellman assumptions, or else the secrecy follows from inductive reasoning.

Finally, the proof of session-key secrecy follows from the secrecy proofs for the ss and es values, which are both used as key-derivation inputs. Using this approach, we successfully verify these properties in Tamarin for the full interaction between the modes modeled.

We note that the construction of the auxiliary lemmas and the proving of the secrecy of ss and es require an intimate knowledge of TLS 1.3 and a great deal of ingenuity. This part of the analysis is not a straightforward application of the Tamarin tool and requires considerable interaction with the tool to correctly guide it through the proof trees of the respective ss and es lemmas.

**Separation of Properties**

One of the decisions made when specifying the security properties was to separate the secrecy and authentication requirements. Note that we could have combined both into a single property, as commonly defined in AKE models.

The benefit of this approach is twofold. First, separating the properties results in a richer understanding of the protocol's security. For example, the structure of the proof confirms the intuition that the secrecy of session keys depends largely on the use of a Diffie-Hellman exchange. Second, this approach provides a better foundation for future analysis. While our current model considers the security of all handshake modes equally, there are discrepancies in the guarantees provided by various handshake modes. By keeping the properties separate, it will be easier to move to a more nuanced security model in the future.

### 4.3. Authentication Properties and Results

The fourth property ensures that the server obtains a guarantee on the agreement on the transcript with the client after it has been authenticated.

**Lemma: Mutual Transcript Agreement**
```
"For all actors, peers, and transcripts at time i:
If the server commits to a transcript (CommitTranscript(actor, peer, 'server', transcript)) at time i,
and the long-term private keys of the actor or peer have not been revealed,
then there exists a time j such that the client has a running transcript (RunningTranscript(peer, actor, 'client', transcript)) at time j,
and the nonces and transcripts match as expected."
```

**Implicit Authentication**

In building the series of lemmas leading to the final security properties, the most problematic areas coincided with the PSK modes. Specifically, the security of the PSK handshake relies on knowing that the resumption secret can only be known by a previous communication partner. This is the implicit authentication property.

While we were able to overcome this challenge and eventually prove that this property holds, it identifies a potentially troublesome component to analyze. As we will see in the next section, the PSK mode certainly requires close attention.

We note that there are many entity authentication algorithms that could be used to add an explicit authentication step to the session resumption mechanism, some of which can be found in [25].

### 4.4. Analysis Conclusions

Our model from Section 3 covers many possible complex interactions between the various modes for an unbounded number of sessions. When combined with the security properties in this section, this gives rise to very complex verification problems. Nevertheless, we managed to successfully prove the main properties. Our results imply the absence of a large class of attacks, many of which are not covered by other analysis methods, e.g., attacks that exploit the interaction between the various modes. This is a very encouraging result, as it shows that the core design underlying draft-10 is solid.

Despite this, the late addition of new functionalities can still be problematic, as will become clear in the next section.

### 5. Enabling Client Authentication in PSK Mode

While draft-10 does not yet permit certificate-based client authentication in PSK mode (and in particular in resumption using a PSK), we extended our model as specified in one of the proposals for this intended functionality [46].

By enabling client authentication either in the initial handshake or with a post-handshake signature over the handshake hash, our Tamarin analysis finds an attack. The result is a violation of client authentication, as the adversary can impersonate a client when communicating with a server.

#### 5.1. The Attack

We note that the attack described here is for the delayed authentication setting but can easily be adapted for authentication as part of the handshake.

We now describe the attack depicted in Figure 8 in more detail: Alice plays the role of the victim client, and Bob the role of the targeted server. Charlie is an active man-in-the-middle adversary, whom Alice believes to be a legitimate server. In the interest of clarity, we have omitted message components and computations that are not relevant to the attack. The full attack can be reproduced using our code at [1].

The attack proceeds in three main steps, each involving different TLS subprotocols.

**Step 1: Establish Legitimate PSKs**

In the first stage of the attack, Alice starts a connection with Charlie, and Charlie starts a connection with Bob. In both connections, a PSK is established. At this point, both handshakes are computed honestly. Alice shares a PSK denoted PSK1 with Charlie, and Charlie shares a PSK denoted PSK2 with Bob.

Note that Charlie ensures the session ticket (psk id) is the same across both connections by replaying the value obtained from Bob.

**Step 2: Resumption with Matching Freshness**

In the next step, Alice wishes to resume a connection with Charlie using PSK1. As usual, Alice generates a random nonce \( nc \), and sends it together with the PSK identifier, psk id.

Charlie re-uses the value \( nc \) to initiate a PSK-resumption handshake with Bob, using the same identifier, psk id. Bob responds with a random nonce \( ns \), and the server Finished message, computed using PSK2.

Charlie now re-uses the nonce \( ns \), and recomputes the server Finished message using PSK1. Alice returns her Finished message to Charlie, who recomputes it using PSK2.

At this point, Alice and Charlie share session keys (i.e., application traffic keys) derived from PSK1, and Charlie and Bob share session keys derived from PSK2. Note that the keys that Charlie shares with Alice and with Bob, respectively, are distinct.

**Step 3: Delayed Client Authentication**

Following the resumption handshake, Charlie attempts to make a request to Bob over their established TLS channel. The request calls for client authentication, so Charlie is subsequently prompted for his certificate and verification. Charlie re-encrypts this request for Alice.

To compute the verification signature, Alice uses the session_hash value, which is defined as the hash of the handshake messages. Alice signs the message and sends it back to Charlie, who forwards it to Bob. Bob accepts the signature, believing it to be from Alice, and Charlie successfully impersonates Alice.

This attack highlights the importance of carefully designing and verifying the security properties of new functionalities in TLS 1.3.