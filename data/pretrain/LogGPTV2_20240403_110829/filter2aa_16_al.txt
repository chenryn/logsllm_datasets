#include 
#include               /* for              atof() */
#define MAXOP              100              /* max size of operand or operator */
#define NUMBER              '0'              /* signal that a number was found */
int getop(char []); void push(double); double pop(void);
/* reverse Polish calculator */ main()
{
int type; double op2; char s[MAXOP];
while ((type = getop(s)) != EOF) { switch (type) {
case NUMBER: push(atof(s)); break;
case '+':
push(pop() + pop()); break;
case '*':
push(pop() * pop()); break;
case '•':
op2 = pop(); push(pop() • op2); break;
case '/':
op2 = pop();
if (op2 != 0.0)
push(pop() / op2); else
printf("error: zero divisor\n"); break;
case '\n':
printf("\t%.8g\n", pop()); break;
default:
printf("error: unknown command %s\n", s); break;
}
}
return 0;
}
因为+与*两个运算符满足交换律，因此，操作数的弹出次序无关紧要。但是，•与/两个
运算符的左右操作数必须加以区分。在函数调用
push(pop() • pop());              /* WRONG */
中并没有定义两个 pop 调用的求值次序。为了保证正确的次序，必须像 main 函数中一样把 第一个值弹出到一个临时变量中。              ，
#define MAXVAL              100              /* maximum depth of val stack */
int sp = 0;              /* next free stack position */ double val[MAXVAL];                            /* value stack */
/* push:              push f onto value stack */ void push(double f)
{
if (sp  0)
return val[••sp]; else {
printf("error: stack empty\n"); return 0.0;
}
}
如果变量定义在任何函数的外部，则是外部变量。因此，我们把 push 和 pop 函数必须 共享的校和校顶指针定义在这两个函数的外部。但是，main 函数本身并没有引用校或校顶指 针，因此，对 main 函数而言要将它们隐藏起来。
下面我们来看 getop 函数的实现。该函数获取下一个运算符或操作数。该任务实现起来 比较容易。它需要跳过空格与制表符。如果下一个字符不是数字或小数点，则返回;否则， 把这些数字字符串收集起来(其中可能包含小数点)，并返回 NUMBER，以标识数已经收集起 来了。
#include 
int getch(void); void ungetch(int);
/* getop:              get next character or numeric operand */ int getop(char s[])
{
int i, c;
while ((s[0] = c = getch()) == ' ' || c == '\t')
;
s[1] = '\0';
if (!isdigit(c) && c != '.')
return c;              /* not a number */ i = 0;
if (isdigit(c))              /* collect integer part */ while (isdigit(s[++i] = c = getch()))
;
if (c == '.')              /* collect fraction part */ while (isdigit(s[++i] = c = getch()))
;
s[i] = '\0'; if (c != EOF)
ungetch(c); return NUMBER;
}
这段程序中的 getch 与 ungetch 两个函数有什么用途昵?程序中经常会出现这样的情 况:程序不能确定它已经读入的输入是否足够，除非超前多读入一些输入。读入一些字符以 合成一个数字的情况便是一例:在看到第一个非数字字符之前，已经读入的数的完整性是不 能确定的。由于程序要超前读入一个字符，这样就导致最后有一个字符不属于当前所要读入 的数。
如果能"反读"不需要的字符，该问题就可以得到解决。每当程序多读入一个字符时， 就把它压回到输入中，对代码其余部分而言就好像没有读入该字符一样。我们可以编写一对 互相协作的函数来比较方便地模拟反取字符操作。getch 函数用于读入下一个待处理的字符， 而 ungetch 函数则用于把字符放回到输入中，这样，此后在调用 getch 函数时，在读入新 的输入之前先返回 ungetch 函数放回的那个字符。
这两个函数之间的协同工作也很简单。ungetch 函数把要压回的字符放到一个共享缓冲 区(字符数组)中，当该缓冲区不空时，getch 函数就从缓冲区中读取字符;当缓冲区为空 时，getch 函数调用 getchar 函数直接从输入中读字符。这里还需要增加一个下标变量来记 住缓冲区中当前字符的位置。
由于缓冲区与下标变量是供 getch 与 ungetch 函数共享的，且在两次调用之间必须保 持值不变，因此它们必须是这两个函数的外部变量。可以按照下列方式编写 getch、ungetch 函数及其共享变量:
#define BUFSIZE 100
char buf[BUFSIZE];              /* buffer for ungetch */
int bufp = 0;              /* next free position in buf */
int getch(void)              /* get a (possibly pushed•back) character */
{
return (bufp > 0) ? buf[••bufp] : getchar();
}
void ungetch(int c)              /* push character back on input */
{
if (bufp >= BUFSIZE)
printf("ungetch: too many characters\n"); else
buf[bufp++] = c;
}
标准库中提供了 ungetc，它将一个字符压回到校中，我们将在第 7 章中讨论该函数。为 了提供一种更通用的方法，我们在这里使用了一个数组而不是一个字符。
练习 4•3 在有了基本框、后，对计算器程序进行扩充就比较简单了。在该程序中加入 取模(%)运算符，并注意考虑负数的情况。
练习 4•4 在校操作中添加几个命令，分别用于在不弹出元素的情况下打印校顶元素; 复制校顶元素;交换校顶两个元素的值。另外增加一个命令用于清空校。
练习 4•5 给计算器程序增加访问 sin、exp 与 pow 等库函数的操作。有关这些库函 数的详细信息，参见附录 B.4 节中的头文件。
练习 4•6 给计算器程序增加处理变量的命令(提供 26 个具有单个英文字母变量名的 变量很容易)。增加一个变量存放最近打印的值。
练习 4•7 编写一个函数 ungets(s)，将整个字符串 s 压回到输入中。ungets 函数 需要使用 buf 和 bufp 吗?它能否仅使用 ungetch 函数?
练习 4•8             假定最多只压回一个字符。请相应地修改 getch 与 ungetch 这两个函数。 练习 4•9             以上介绍的 getch 与 ungetch 函数不能正确地处理压回的 EOF。考虑压回
EOF 时应该如何处理?请实现你的设计方案。
练习 4•10             另一种方法是通过 getline 函数读入整个输入行，这种情况下可以不使用
getch 与 ungetch 函数。请运用这一方法修改计算器程序。
4.4 作用域规则
构成 C 语言程序的函数与外部变量可以分开进行编译。一个程序可以存放在几个文件中， 原先已编译过的函数可以从库中进行加载。这里我们感兴趣的问题有:
             如何进行声明才能确保变量在编译时被正确声明?
             如何安排声明的位置才能确保程序在加载时各部分能正确连接?
             如何组织程序中的声明才能确保只有一份副本?
             如何初始化外部变量?
为了讨论这些问题，我们重新组织前面的计算器程序，将它分散到多个文件中。从实践的角 度来看，计算器程序比较小，不值得分成几个文件存放，但通过它可以很好地说明较大的程 序中遇到的类似问题。
名字的作用域指的是程序中可以使用该名字的部分。对于在函数开头声明的自动变量来 说，其作用域是声明该变量名的函数。不同函数中声明的具有相同名字的各个局部变量之间 没有任何关系。函数的参数也是这样的，实际上可以将它看作是局部变量。
外部变量或函数的作用域从声明它的地方开始，到其所在的(待编译的)文件的末尾结 束。例如，如果 main、sp、val、push 与 pop 是依次定义在某个文件中的 5 个函数或外部 变量，如下所示:
main() { ... }
int sp = 0;
double val[MAXVAL];
void push(double f) { ... }
double pop(void) { ... }
那么，在 push 与 pop 这两个函数中不需进行任何声明就可以通过名字访问变量 sp 与 val， 但是，这两个变量名不能用在 main 函数中，push 与 pop 函数也不能用在 main 函数中。
另一方面，如果要在外部变量的定义之前使用该变量，或者外部变量的定义与变量的使 用不在同一个源文件中，则必须在相应的变量声明中强制性地使用关键字 extern。
将外部变量的声明与定义严格区分开来很重要。变量声明用于说明变量的属性(主要是 变量的类型)，而变量定义除此以外还将引起存储器的分配。如果将下列语句放在所有函数的 外部:
int sp;
double val[MAXVAL];
那么这两条语句将定义外部变量 sp 与 val，并为之分配存储单元，同时这两条语句还可以作 为该源文件中其余部分的声明。而下面的两行语句:
extern int sp; extern double val[];
为源文件的其余部分声明了一个 int 类型的外部变量 sp 以及一个 double 数组类型的外部 变量 val(该数组的长度在其它地方确定)，但这两个声明并没有建立变量或为它们分配存储 单元。
在一个源程序的所有源文件中，一个外部变量只能在某个文件中定义一次，而其它文件 可以通过 extern 声明来访问它(定义外部变量的源文件中也可以包含对该外部变量的 extern 声明)。外部变量的定义中必须指定数组的长度，但 extern 声明则不一定要指定数 组的长度。
外部变量的初始化只能出现在其定义中。
假定函数 push 与 pop 定义在一个文件中，而变量 val 与 sp 在另一个文件中定义并被 初始化(通常不大可能这样组织程序)，则需要通过下面这些定义与声明把这些函数和变量"绑 定"在一起:
在文件 file1 中:
extern int sp; extern double val[];
void push(double f) { ... }
double pop(void) { ... }
在文件 file2 中:
int sp = 0;
double val[MAXVAL];
由于文件 file1 中的 extern 声明不仅放在函数定义的外面，而且还放在它们的前面，因此它 们适用于该文件中的所有函数。对于 file1，这样一组声明就够了。如果要在同一个文件中先 使用、后定义变量 sp 与 val，也需要按照这种方式来组织文件。
下面我们来考虑把上述的计算器程序分割到若干个源文件中的情况。如果该程序的各组 成部分很长，这么做还是有必要的。我们这样分割:将主函数 main 单独放在文件 main.c 中;将 push 与 pop 函数以及它们使用的外部变量放在第二个文件 stack.c 中;将 getop 函数放在第三个文件 getop.c 中;将 getch 与 ungetch 函数放在第四个文件 getch.c 中。 之所以分割成多个文件，主要是考虑在实际的程序中，它们分别来自于单独编译的库。
此外，还必须考虑定义和声明在这些文件之间的共享问题。我们尽可能把共享的部分集 中在一起，这样就只需要一个副本，改进程序时也容易保证程序的正确性。我们把这些公共 部分放在头文件 calc.h 中，在需要使用该头文件时通过#include 指令将它包含进来 (#include 指令将在  4.11  节中介绍)。这样分割后，程序的形式如下所示:
我们对下面两个因素进行了折衷:一方面是我们期望每个文件只能访问它完成任务所需 的信息;另一方面是现实中维护较多的头文件比较困难。我们可以得出这样一个结论:对于 某些中等规模的程序，最好只用一个头文件存放程序中各部分共享的对象。较大的程序需要 使用更多的头文件，我们需要精心地组织它们。
某些变量，比如文件 stack.c 中定义的变量 sp 与 val 以及文件 getch.c 中定义的变 量 buf 与 bufp，它们仅供其所在的源文件中的函数使用，其它函数不能访问。用 static 声明限定外部变量与函数，可以将其后声明的对象的作用域限定为被编译源文件的剩余部分。 通过 static 限定外部对象，可以达到隐藏外部对象的目的，比如，getch•ungetch 复合 结构需要共享 buf 与 bufp 两个变量，这样 buf 与 bufp 必须是外部变量，但这两个对象不 应该被 getch 与 ungetch 函数的调用者所访问。
要将对象指定为静态存储，可以在正常的对象声明之前加上关键字 static 作为前缀。 如果把上述两个函数和两个变量放在一个文件中编译，如下所示:
static char buf[BUFSIZE];              /* buffer for ungetch */ static int bufp = 0;              /* next free position in buf */
int getch(void) { ... }
void ungetch(int c) { ... }