entab –m +n
表示制表符从第 m 列开始，每隔 n 列停止。选择(对使用者而言)比较方便的默认行为。 练习 5•13             编写程序 tail，将其输入中的最后 n 行打印出来。默认情况下，n 的值为
10，但可通过一个可选参数改变 n 的值，因此，命令
tail •n
将打印其输入的最后 n 行。无论输入或 n 的值是否合理，该程序都应该能正常运行。编
写的程序要充分地利用存储空间;输入行的存储方式应该同  5.6  节中排序程序的存储方式一 样，而不采用固定长度的二维数组。
5.11 指向函数的指针
在 C 语言中，函数本身不是变量，但可以定义指向函数的指针。这种类型的指针可以被 赋值、存放在数组中、传递给函数以及作为函数的返回值等等。为了说明指向函数的指针的 用法，我们接下来将修改本章前面的排序函数，在给定可选参数•n 的情况下，该函数将按数 值大小而非字典顺序对输入行进行排序。
排序程序通常包括 3 部分:判断任何两个对象之间次序的比较操作、颠倒对象次序的交 换操作、一个用于比较和交换对象直到所有对象都按正确次序排列的排序算法。由于排序算 法与比较、交换操作无关，因此，通过在排序算法中调用不同的比较和交换函数，便可以实 现按照不同的标准排序。这就是我们的新版本排序函数所采用的方法。
我们在前面讲过，函数 strcmp 按字典顺序比较两个输入行。在这里，我们还需要一个 以数值为基础来比较两个输入行，并返回与 strcmp 同样的比较结果的函数 numcmp。这些函 数在 main 之前声明，并且，指向恰当函数的指针将被传递给 qsort 函数。在这里，参数的 出错处理并不是问题的重点，我们将主要考虑指向函数的指针问题。
#include 
#include 
#define MAXLINES 5000              /* max #lines to be sorted */ char *lineptr[MAXLINES];              /* pointers to text lines */
int readlines(char *lineptr[], int nlines); void writelines(char *lineptr[], int nlines);
void qsort(void *lineptr[], int left, int right, int (*comp)(void *, void *));
int numcmp(char *, char *);
/* sort input lines */ main(int argc, char *argv[])
{
int nlines;              /* number of input lines read */ int numeric = 0;              /* 1 if numeric sort */
if (argc > 1 && strcmp(argv[1], "•n") == 0) numeric = 1;
if ((nlines = readlines(lineptr, MAXLINES)) >= 0) { qsort((void**) lineptr, 0, nlines•1,
(int (*)(void*,void*))(numeric ? numcmp : strcmp)); writelines(lineptr, nlines);
return 0;
} else {
printf("input too big to sort\n"); return 1;
}
}
在调用函数 qsort 的语句中，strcmp 和 numcmp 是函数的地址。因为它们是函数，所
以前面不需要加上取地址运算符&，同样的原因，数组名前面也不需要&运算符。
改写后的 qsort 函数能够处理任何数据类型，而不仅仅限于字符串。从函数 qsort 的 原型可以看出，它的参数表包括一个指针数组、两个整数和一个有两个指针参数的函数。其 中，指针数组参数的类型为通用指针类型 void *。由于任何类型的指针都可以转换为 void
*类型，并且在将它转换回原来的类型时不会丢失信息，所以，调用 qsort 函数时可以将参 数强制转换为 void *类型。比较函数的参数也要执行这种类型的转换。这种转换通常不会影 响到数据的实际表示，但要确保编译器不会报错。
/* qsort:              sort v[left]...v[right] into increasing order */ void qsort(void *v[], int left, int right,
int (*comp)(void *, void *))
{
int i, last;
void swap(void *v[], int, int);
if (left >= right)                            /* do              nothing if array contains */ return;              /* fewer than two elements */
swap(v, left, (left + right)/2); last = left;
for (i = left+1; i 
/* numcmp:              compare s1 and s2 numerically */ int numcmp(char *s1, char *s2)
{
double v1, v2;
v1 = atof(s1); v2 = atof(s2); if (v1  v2)
return 1; else
return 0;
}
交换两个指引的 swap 函数和本章前面所述的 swap 函数相同，但它的参数声明为 void *
类型。
void swap(void *v[],              int i, int j;)
{
void *temp;
temp = v[i]; v[i] = v[j]; v[j] = temp;
}
还可以将其它一些选页增加到排序程序中，有些可以作为较难的练习。
练习 5•14 修改排序程序，使它能处理•r 标记。该标记表明，以逆序(递减)方式排 序。要保证•r 和•n 能够组合在一起使用。
练习 5•15             增加选页•f，使得排序过程不考虑字母大小写之间的区别。例如，比较 a
和 A 时认为它们相等。
练习 5•16 增加选页•d(代表目录顺序)。该选页表明，只对字母、数字和空格进行比 较。要保证该选页可以和•f 组合在一起使用。
练习 5•17 增加字段处理功能，以使得排序程序可以根据行内的不同字段进行排序，每 个字段按照一个单独的选页集合进行排序。(在对本书索引进行排序时，索引条目使用了•df 选页，而对页码排序时使用了•n 选页。)
5.12 复杂声明
C 语言常常因为声明的语法问题而受到人们的批评，特别是涉及到函数指针的语法。C 语 言的语法力图使声明和使用相一致。对于简单的情况，C 语言的做法是很有效的，但是，如果 情况比较复杂，则容易让人混淆，原因在于，C 语言的声明不能从左至右阅读，而且使用了太 多的圆括号。我们来看下面所示的两个声明:
int *f();              /* f: function returning pointer to int */
以及
int (*pf)();              /* pf: pointer to function returning int */
它们之间的含义差别说明:*是一个前缀运算符，其优先级低于()，所以，声明中必须使用圆 括号以保正确的结合顺序。
尽管实际中很少用到过于复杂的声明，但是，懂得如何理解甚至如何使用这些复杂的声 明是很重要的。如何创建复杂的声明昵?一种比较好的方法是，使用 typedef 通过简单的步 骤合成，这种方法我们将在 6.7 节中讨论。这里介绍另一种方法。接下来讲述的两个程序就使 用这种方法:一个程序用于将正确的 C 语言声明转换为文字描述，另一个程序完成相反的转 换。文字描述是从左至右阅读的。
第一个程序 dcl 复杂一些。它将 C 语言的声明转换为文字描述，比如:
char **argv
argv:              pointer to char int (*daytab)[13]
daytab:              pointer to array[13] of int int *daytab[13]
daytab:              array[13] of pointer to int void *comp()
comp: function returning pointer to void void (*comp)()
comp: pointer to function returning void char (*(*x())[])()
x: function returning pointer to array[] of pointer to function returning char
char (*(*x[3])())[5]
x: array[3] of pointer to function returning pointer to array[5] of char
程序 dcl 是基于声明符的语法编写的。附录 A 以及 8.5 节将对声明符的语法进行详细的 描述。下面是其简化的语法形式:
dcl:              optional *'s direct•dcl direct•dcl name
(dcl) direct•dcl()
direct•dcl[optional size]
简而言之，声明符 dcl 就是前面可能带有多个*的 direct•dcl。direct•dcl 可以是 name、由 一对圆括号括起来的 dcl、后面跟有一对圆括号的 direct•dcl、后面跟有用方括号括起来的表示 可选长度的 direct•dcl。
该语法可用来对 C 语言的声明进行分析。例如，考虑下面的声明符:
(*pfa[])()
按照该语法分析，pfa 将被识别为一个 name，从而被认为是一个 direct•dcl。于是，pfa[]也 是一个 direct•dcl。接着，*pfa[]被识别为一个 dcl，因此，判定(*pfa[])是一个 direct•dcl。 再接着，(*pfa[])()被识别为一个 direct•dcl，因此也是一个 dcl。可以用图 5•12 所示的语法 分析树来说明分析的过程(其中 direct•dcl 缩写为 dir•dcl)。
图 5•12
程序 dcl 的核心是两个函数:dcl 与 dirdcl，它们根据声明符的语法对声明进行分析。 因为语法是递归定义的，所以在识别一个声明的组成部分时，这两个函数是相互递归调用的。 我们称该程序是一个递归下降语法分析程序。
/* dcl:              parse a declarator */ void dcl(void)
{
int ns;
for (ns = 0; gettoken() == '*'; ) /* count *'s */ ns++;
dirdcl();
while (ns•• > 0)
strcat(out, " pointer to");
}
/* dirdcl:              parse a direct declarator */ void dirdcl(void)
{
int type;
if (tokentype == '(') {              /* ( dcl ) */ dcl();
if (tokentype != ')') printf("error: missing )\n");
} else if (tokentype == NAME)              /* variable name */ strcpy(name, token);
else
printf("error: expected name or (dcl)\n");
while ((type=gettoken()) == PARENS || type == BRACKETS) if (type == PARENS)
strcat(out, " function returning");
else {
strcat(out, " array"); strcat(out, token); strcat(out, " of");
}
}
该程序的目的旨在说明问题，并不想做得尽善尽美，所以对 dcl 有很多限制，它只能处 理类似于 char 或 int 这样的简单数据类型，而无法处理函数中的参数类型或类似于 const 这样的限定符。它不能处理带有不必要空格的情况。由于没有完备的出错处理，因此它也无 法处理无效的声明。这些方面的改进留给读者做练习。
下面是该程序的全局变量和主程序:
#include 
#include 
#include 
#define MAXTOKEN 100
enum { NAME, PARENS, BRACKETS };
void dcl(void); void dirdcl(void);
int gettoken(void);
int tokentype;     /* type of last token */ char token[MAXTOKEN]; /* last token string */ char name[MAXTOKEN];   /* identifier name */
char datatype[MAXTOKEN]; /* data type = char, int, etc. */ char out[1000];