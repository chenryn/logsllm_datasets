# 常见且有效的堆栈技巧——比赛专用

Synacktiv红队在上周末的Insomni'hack比赛中取得了第9名的好成绩（共280支队伍）。其中一个挑战非常有趣，并教会了我一些新的技巧和方法。因此，我决定撰写这篇详细的博客来分享我的经验。在这篇文章中，我会尽量详细地解释解决问题的过程，而不仅仅是简单的方法介绍。希望您能享受阅读本文，并在文末附录中找到最终的`exp.py`脚本。

二进制文件和libc文件均采用pwn工具进行处理。

## 1. 初始化安装步骤
从保护措施来看，`ontestament.bin`文件具备良好的安全特性，包括`RELRO保护、NX位保护和PIE保护`。
```bash
$ checksec ontestament.bin
[*] '/home/bak/onetestament/ontestament.bin'
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      PIE enabled
```
提供的libc文件是与源文件剥离的，可以方便地使用调试符号重新链接。幸运的是，[pwninit](https://github.com/io12/pwninit/) 工具能够帮助我们修补二进制文件，并使用其提供的libc进行链接，而不是系统自带的libc。
验证libc链接是否成功，可以使用`ldd`工具：
```bash
$ ldd ontestament.bin_patched
    linux-vdso.so.1 (0x00007ffc057eb000)
    libc.so.6 => ./libc.so.6 (0x00007f84a2ec8000)
    ./ld-2.23.so => /lib64/ld-linux-x86-64.so.2 (0x00007f84a3499000)
```
同时，我们可以查看libc的版本信息：
```bash
$ ./libc6.so | head -n 1
GNU C Library (Ubuntu GLIBC 2.23-0ubuntu11.3) stable release version 2.23, by Roland McGrath et al.
```
了解libc的具体版本对于熟悉常见堆技巧非常重要。堆内存管理随着时间的发展经历了许多变化，包括保护机制的引入和内存结构的调整。因此，基于堆的攻击通常针对特定版本的libc。如果您想了解更多关于堆利用技术的信息，可以参考[A repository for learning various heap exploitation techniques.](https://github.com/shellphish/how2heap)。

据我所知，Glibc 2.23发布于2016年2月，已经相当老旧。在开始挖掘漏洞之前，检查下一版本的libc中有哪些安全修复措施和保护机制是非常有意义的。

## 2. 逆向工程程序漏洞
### 程序功能识别
该程序的功能非常直接：列出所有堆技术，允许用户创建、编辑、查看和删除对象。至少这是我第一次运行该程序时的印象。
```bash
$ ./ontestament.bin
==========================
     ✝ OneTestament ✝      
==========================
1. My new testament
2. Show my testament
3. Edit my testament
4. Delete my testament
5. Bye!
Please enter your choice:
```
在程序运行之前，会调用`alarm(20)`函数，在20秒后触发SIGALRM信号并停止程序。为了避免这种行为，可以通过修补二进制文件（将对alarm的调用替换为nop）或在gdb中输入以下命令：
```bash
pwndbg> handle SIGALRM ignore
Signal        Stop      Print   Pass to program Description
SIGALRM       No        Yes     No              Alarm clock
```
接下来，我们将快速浏览所有重要的函数。

### 创建对象
函数的伪代码如下：

程序只允许进行10次分配，每次新分配后全局变量`nb_testaments`都会递增。可用的大小包括 **0x18**、**0x30**、**0x60** 和 **0x7c** 字节，这有助于在快速bins和未排序bins中释放数据块。提醒一下，每个大于0x58字节的数据块在释放后都会放入未排序的容器中。数据块由`calloc()`函数负责分配，它与`malloc()`的主要区别在于`calloc()`会对分配的内存区域执行`memset(mem, 0, sz)`。

之后，用户指定的数据会被填充到遗嘱中。值得注意的是，`fill_testament()`函数是安全的，这里不再赘述。

另一个有趣的地方是，遗嘱指针和大小都存储在全局变量中，即.bss段。细心的读者可能会注意到我跳过了`read_input()`函数，其伪代码如下：
```c
__int64 read_input()
{
  int v2; // [rsp+Ch] [rbp-4h]
  read(0, nptr, 5uLL);
  v2 = atoi(nptr);
  if (v2 > 9)
    abort("Oops! not a valid index");
  testament_addr = (char *)testaments[input];
  if (!testament_addr)
    abort("Impossible! No testaments");
  size_testament = size_testaments[input];
  if (nb_times_edited[input] > 2)
    abort("Are you serious?");
  printf("Please enter your testament content: ");
  offset = read_input();
  if (offset > size_testament)
    abort("Nope, impossible!");
  ++testament_addr[offset];
  ++nb_times_edited[input];
}
```
此函数在创建前验证选择了`testament`，但并未检查其是否已被释放，从而导致了UAF（使用后免费）漏洞。此外，通过全局变量`testaments`和`size_testaments`判断遗嘱，以及限制每个遗嘱只能被编辑两次，都是值得关注的地方。

实际上，这个函数不允许用户编辑整个遗嘱内容，但如果能够修改`size_testaments`变量，则可以增加一个字节，最多两次，可能导致边界溢出，这一点需要牢记。

### 删除对象
现在来看看删除函数的伪代码：
```c
void delete_testament()
{
  unsigned int input; // [rsp+4h] [rbp-Ch]
  void *ptr; // [rsp+8h] [rbp-8h]
  printf("Please enter your testament index: ");
  input = read_input();
  if (input > 9)
    abort("Oops! not a valid index");
  ptr = (void *)testaments[input];
  if (!ptr)
    abort("Impossible! No testaments");
  switch (input)
  {
    case 0u:
      if (!dword_5555556030C8)
        abort("Impossible to delete again this testament");
      free(ptr);
      dword_5555556030C8 = 0;
      break;
    case 1u:
      if (!dword_5555556030C4)
        abort("Impossible to delete again this testament");
      free(ptr);
      dword_5555556030C4 = 0;
      break;
    // ... 其他case类似
    case 9u:
      if (!dword_5555556030A0)
        abort("Impossible to delete again this testament");
      free(ptr);
      dword_5555556030A0 = 0;
      break;
    default:
      return;
  }
}
```
每当调用这个函数时，`testament`的指针都会被释放。乍一看，似乎无法释放同一个指针两次。但实际上，一个全局变量指示每个`testament`是否已经被`free()`过。

还记得在`read_input()`函数中的单字节溢出吗？紧挨着`nptr`的变量是`dword_5555556030B8`，用于指示第五个`testament`是否已被释放。通过以下步骤，我们可以触发双重`free`：
1. 分配至少5个`testament`。
2. 释放第五个`testament`。
3. 触发溢出漏洞，将`dword_5555556030B8`设置为非零值。
4. 再次释放第五个`testament`。

## 3. 泄漏-逆向工程

（待续）

希望以上内容对您有所帮助！