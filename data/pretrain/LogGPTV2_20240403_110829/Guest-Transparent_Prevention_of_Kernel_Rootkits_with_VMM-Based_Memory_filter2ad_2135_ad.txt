### Performance Benchmarks

The values reported in Table 4 are an index where higher is better. It should be noted that the benchmarks are primarily intended to compare a NICKLE-enhanced VMM with the corresponding unmodified VMM. These numbers are not meant for comparing different VMMs (such as QEMU+KQEMU vs. VirtualBox).

#### QEMU+KQEMU

The QEMU+KQEMU implementation of NICKLE exhibits very low overhead in most tests. In fact, a few benchmark tests show a slight performance gain with the NICKLE implementation, which we interpret as no noticeable slowdown due to NICKLE. From Table 3, it can be seen that both the kernel compilation and Apache tests have an overhead of less than 1%. The insmod test has a modest overhead of 7.3%, primarily because NICKLE must calculate and verify the hash of the module before copying it into the shadow memory. Given the infrequency of kernel module insertion in a running system, this overhead is not a concern. The UnixBench tests in Table 4 further confirm the efficiency of the NICKLE implementation in QEMU+KQEMU, with the worst-case overhead being 5.21% and the overall overhead being 1.01%. This low overhead is due to NICKLE's modifications to the QEMU control flow, which only take effect while executing kernel code (user-level code is executed by the unmodified KQEMU accelerator).

#### VirtualBox

The VirtualBox implementation of NICKLE has a more noticeable overhead compared to QEMU+KQEMU, but still remains below 10% for the majority of the tests. For example, the kernel compilation test shows about 7% overhead, while the UnixBench suite shows a little less than 6% overall. The Apache test is the worst performer, with a 19.03% slowdown. This can be attributed to the heavy number of user/kernel mode switches that occur while serving web requests. During these mode switches, the VirtualBox implementation ensures that only verified code will be executed directly, thus incurring overhead. The insmod test shows a large performance degradation of 30.0%, due to the VMM leaving native code execution and verifying the module. However, this is not a significant concern as module insertion is an uncommon event at runtime. Table 4 shows that the worst-performing UnixBench test (Execl) results in an overhead of 13.24%, likely due to a larger number of user/kernel mode switches during that test.

### Summary

Our benchmark experiments demonstrate that NICKLE incurs minimal to moderate impact on system performance relative to the respective original VMMs.

### Discussion

In this section, we discuss several issues related to NICKLE.

1. **Goal and Limitations**:
   - NICKLE aims to prevent unauthorized code from executing in the kernel space but does not protect the integrity of kernel-level control flows. This means that an attacker could potentially launch a "return-into-libc" style attack within the kernel using existing authenticated kernel code. Recent work by Shacham [20] demonstrates how a powerful attacker can execute virtually arbitrary code using a carefully crafted stack. Fortunately, this approach cannot produce persistent code to be called on demand from other parts of the kernel. Petroni et al. [3] found that 96% of the rootkits they surveyed require persistent code changes.
   - An attacker may also influence the kernel-level control flow by manipulating non-control data [21]. However, without its own kernel code, such attacks tend to have limited functionality. For example, all four stealth rootkit attacks described in [22] need to execute their own code in the kernel space and would be defeated by NICKLE. Solutions exist for protecting control flow integrity [3, 23, 24] and data flow integrity [25], which can complement NICKLE.

2. **Self-Modifying Kernel Code**:
   - The current NICKLE implementation does not support self-modifying kernel code. This limitation can be addressed by intercepting self-modifying behavior and re-authenticating and shadowing the kernel code after modification.

3. **Kernel Page Swapping**:
   - NICKLE currently does not support kernel page swapping. Linux does not swap out kernel pages, but Windows does. To support kernel page swapping in NICKLE, it would require implementing the introspection of swap-out and swap-in events and ensuring that the page being swapped in has the same hash as when it was swapped out. This limitation has not created any problems in our experiments, where we did not encounter any kernel-level page swapping.

4. **User-Level Rootkits**:
   - NICKLE is ineffective against user-level rootkits but significantly elevates the trustworthiness of the guest OS, allowing anti-malware systems to defend against user-level rootkits more effectively.

5. **Memory Footprint**:
   - Deploying NICKLE increases the memory footprint for the protected VM. In the worst case, memory shadowing will double the physical memory usage. Future work can explore the use of demand-paging to reduce the extra memory requirement. Overall, trading memory space for elevated OS kernel security is reasonable and practical.

6. **Trusted VMM Assumption**:
   - NICKLE assumes a trusted VMM to achieve the "NICKLE" property. This establishes the root-of-trust of the entire system and secures the lowest-level system access. We acknowledge that a VM environment can potentially be fingerprinted and detected by attackers, leading to different malware behavior. Improving the fidelity of the VM environment can thwart some VM detection methods. As virtualization gains popularity, the concern over VM detection may become less significant.

### Related Work

#### Rootkit Prevention Through Kernel Integrity Enforcement

- **Livewire** [6]: Based on a software-based VMM, Livewire aims to protect the guest OS kernel code and critical data structures from modification. However, an attacker may load malicious rootkit code into the kernel space without modifying the original kernel code.
- **SecVisor** [7]: Closely related to NICKLE, SecVisor leverages new hardware extensions to enforce lifetime kernel integrity. However, SecVisor requires modification to OS kernel source code and the latest hardware support for MMU and IOMMU virtualization. NICKLE, in contrast, is a guest-transparent solution that supports guest OSes on legacy hardware platforms and works with mixed kernel pages.
- **OverShadow** [31]: Uses memory shadowing at the VMM level to protect application memory pages from modification by even the OS itself. NICKLE, however, aims to protect the OS from kernel rootkits.

#### Symptom-Driven Kernel Rootkit Detection

- Techniques such as driver signing [32] and various forms of driver verification [5, 33] help verify the identity or integrity of loaded drivers. However, a kernel-level vulnerability could bypass these techniques. NICKLE operates at the lower VMM level and can block zero-day kernel-level exploitations.
- Approaches like those proposed by Petroni et al. [4] and Zhang et al. [34] use external hardware to detect rootkit presence by spotting kernel code integrity violations. More recent works identify violations of semantic integrity of dynamic kernel data [2] or state-based control-flow integrity of kernel code [3]. Generalized control-flow integrity [23] has potential as a prevention technique but has not yet been applied to kernel integrity.
- Solutions such as Strider GhostBuster [35] and VMwatcher [1] target the self-hiding nature of rootkits and infer rootkit presence by detecting discrepancies between views of the same system from different perspectives. These approaches are designed for post-infection detection, whereas NICKLE prevents kernel rootkit execution.

#### Attestation-Based Rootkit Detection

- Terra [13] and other code attestation schemes [36, 37, 38] verify software located in memory for execution. These schemes provide load-time attestation guarantees but do not ensure runtime kernel integrity.

### Conclusion

We have presented the design, implementation, and evaluation of NICKLE, a VMM-based approach that transparently detects and prevents the launching of kernel rootkit attacks against guest VMs. NICKLE achieves the "NICKLE" guarantee, which thwarts the common need of existing kernel rootkits to execute unauthorized code in the kernel space. Enabled by memory shadowing, NICKLE achieves guest transparency through guest memory access indirection. Its portability is demonstrated by its implementation in three VMM platforms. Our experiments show that NICKLE is effective in preventing 23 representative real-world kernel rootkits targeting various commodity OSes, with only modest overhead added to the VMM platform.

### Acknowledgements

The authors would like to thank the anonymous reviewers for their insightful comments that helped improve the presentation of this paper. This work was supported in part by NSF Grants CNS-0716376, CNS-0716444, and CNS-0546173.

### References

[1] Jiang, X., Wang, X., Xu, D.: Stealthy Malware Detection through VMM-Based "Out-of-the-Box" Semantic View Reconstruction. In: Proceedings of the ACM Conference on Computer and Communications Security (CCS 2007) (October 2007)

[2] Petroni Jr., N.L., Fraser, T., Walters, A., Arbaugh, W.A.: An Architecture for Specification-based Detection of Semantic Integrity Violations in Kernel Dynamic Data. In: Proceedings of the 15th USENIX Security Symposium (2006)

[3] Petroni Jr., N.L., Hicks, M.: Automated Detection of Persistent Kernel Control-Flow Attacks. In: Proceedings of the ACM Conference on Computer and Communications Security (CCS 2007) (October 2007)

[4] Petroni, N., Fraser, T., Molina, J., Arbaugh, W.: Copilot: A Coprocessor-based Kernel Runtime Integrity Monitor. In: Proceedings of the 13th USENIX Security Symposium, pp. 179–194 (2004)

[5] Wilhelm, J., Chiueh, T.-c.: A Forced Sampled Execution Approach to Kernel Rootkit Identification. In: Kruegel, C., Lippmann, R., Clark, A. (eds.) RAID 2007. LNCS, vol. 4637, pp. 219–235. Springer, Heidelberg (2007)

[6] Garfinkel, T., Rosenblum, M.: A Virtual Machine Introspection Based Architecture for Intrusion Detection. In: Proc. Network and Distributed Systems Security Symposium (NDSS 2003) (February 2003)

[7] Seshadri, A., Luk, M., Qu, N., Perrig, A.: SecVisor: A Tiny Hypervisor to Guarantee Lifetime Kernel Code Integrity for Commodity OSes. In: Proceedings of the ACM Symposium on Operating Systems Principles (SOSP 2007) (October 2007)

[8] Bellard, F.: QEMU: A Fast and Portable Dynamic Translator. In: Proceedings of the USENIX Annual Technical Conference, FREENIX Track, pp. 41–46 (2005)

[9] Innotek: Virtualbox (Last accessed, September 2007), http://www.virtualbox.org/

[10] Intel: Vanderpool Technology (2005), http://www.intel.com/technology/computing/vptech

[11] AMD: AMD64 Architecture Programmer’s Manual Volume 2: System Programming, 3.12 edition (September 2006)

[12] Dunlap, G., King, S., Cinar, S., Basrai, M., Chen, P.: ReVirt: Enabling Intrusion Analysis through Virtual Machine Logging and Replay. In: Proc. USENIX Symposium on Operating Systems Design and Implementation (OSDI 2002) (2002)

[13] Garfinkel, T., Pfaff, B., Chow, J., Rosenblum, M., Boneh, D.: Terra: A Virtual Machine-Based Platform for Trusted Computing. In: Proc. of ACM Symposium on Operating System Principles (SOSP 2003) (October 2003)

[14] Jiang, X., Wang, X.: "Out-of-the-Box" Monitoring of VM-Based High-Interaction Honeypots. In: Kruegel, C., Lippmann, R., Clark, A. (eds.) RAID 2007. LNCS, vol. 4637, pp. 198–218. Springer, Heidelberg (2007)

[15] Joshi, A., King, S., Dunlap, G., Chen, P.: Detecting Past and Present Intrusions through Vulnerability-specific Predicates. In: Proc. ACM Symposium on Operating Systems Principles (SOSP 2005), pp. 91–104 (2005)

[16] Riley, R., Jiang, X., Xu, D.: Guest-Transparent Prevention of Kernel Rootkits with VMM-based Memory Shadowing. Technical report CERIAS TR 2001-146, Purdue University

[17] Arbaugh, W.A., Farber, D.J., Smith, J.M.: A Secure and Reliable Bootstrap Architecture. In: Proceedings of IEEE Symposium on Security and Privacy, May 1997, pp. 65–71 (1997)

[18] sd, devik: Linux on-the-fly Kernel Patching without LKM. Phrack 11(58) Article 7

[19] fuzen op: Fu rootkit (Last accessed, September 2007), http://www.rootkit.com/project.php?id=12

[20] Shacham, H.: The Geometry of Innocent Flesh on the Bone: Return-into-libc without Function Calls (on the x86). In: Proceedings of the ACM Conference on Computer and Communications Security (CCS 2007) (October 2007)

[21] Chen, S., Xu, J., Sezer, E.C., Gauriar, P., Iyer, R.: Non-Control-Data Attacks Are Realistic Threats. In: Proceedings of the 14th USENIX Security Symposium (August 2005)

[22] Baliga, A., Kamat, P., Iftode, L.: Lurking in the Shadows: Identifying Systemic Threats to Kernel Data. In: Proc. of IEEE Symposium on Security and Privacy (Oakland 2007) (May 2007)

[23] Abadi, M., Budiu, M., Erlingsson, U., Ligatti, J.: Control Flow Integrity: Principles, Implementations, and Applications. In: Proc. ACM Conference on Computer and Communications Security (CCS 2005) (November 2005)

[24] Grizzard, J.B.: Towards Self-Healing Systems: Re-establishing Trust in Compromised Systems. Ph.D. Thesis, Georgia Institute of Technology (May 2006)

[25] Castro, M., Costa, M., Harris, T.: Securing Software by Enforcing Data-Flow Integrity. In: Proc. of USENIX Symposium on Operating Systems Design and Implementation (OSDI 2006) (2006)

[26] Klein, T.: Scooby Doo - VMware Fingerprint Suite (2003), http://www.trapkit.de/research/vmm/scoopydoo/index.html

[27] Rutkowska, J.: Red Pill: Detect VMM Using (Almost) One CPU Instruction (November 2004), http://invisiblethings.org/papers/redpill.html

[28] F-Secure Corporation: Agobot, http://www.f-secure.com/v-descs/agobot.shtml

[29] Kortchinsky, K.: Honeypots: Counter Measures to VMware Fingerprinting (January 2004), http://seclists.org/lists/honeypots/2004/Jan-Mar/0015.html

[30] Liston, T., Skoudis, E.: On the Cutting Edge: Thwarting Virtual Machine Detection (2006), http://handlers.sans.org/tliston/ThwartingVMDetectionListonSkoudis.pdf

[31] Chen, X., Garfinkel, T., Lewis, E.C., Subrahmanyam, P., Waldspurger, C.A., Boneh, D., Dwoskin, J., Ports, D.R.K.: Overshadow: A Virtualization-Based Approach to Retrofitting Protection in Commodity Operating Systems. In: Proc. of the 13th Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS 2008) (March 2008)

[32] Microsoft Corporation: Driver Signing for Windows, http://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/code_signing.mspx?mfr=true

[33] Kruegel, C., Robertson, W., Vigna, G.: Detecting Kernel-Level Rootkits Through Binary Analysis. In: Yew, P.-C., Xue, J. (eds.) ACSAC 2004. LNCS, vol. 3189, pp. 91–100. Springer, Heidelberg (2004)

[34] Zhang, X., van Doorn, L., Jaeger, T., Perez, R., Sailer, R.: Secure Coprocessor-based Intrusion Detection. In: Proceedings of the 10th ACM SIGOPS European Workshop, pp. 239–242 (2002)

[35] Wang, Y.M., Beck, D., Vo, B., Roussev, R., Verbowski, C.: Detecting Stealth Software with Strider GhostBuster. In: Proc. IEEE International Conference on Dependable Systems and Networks (DSN 2005), pp. 368–377 (2005)

[36] Kennell, R., Jamieson, L.H.: Establishing the Genuinity of Remote Computer Systems. In: Proc. of the 12th USENIX Security Symposium (August 2003)

[37] Sailer, R., Jaeger, T., Zhang, X., van Doorn, L.: Attestation-based Policy Enforcement for Remote Access. In: Proc. of ACM Conference on Computer and Communications Security (CCS 2004) (October 2004)

[38] Sailer, R., Zhang, X., Jaeger, T., van Doorn, L.: Design and Implementation of a TCG-based Integrity Measurement Architecture. In: Proc. of the 13th USENIX Security Symposium (August 2004)