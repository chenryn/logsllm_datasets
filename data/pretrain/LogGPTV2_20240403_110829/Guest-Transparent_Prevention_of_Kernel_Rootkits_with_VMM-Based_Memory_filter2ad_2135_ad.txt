118.2
196.7
20.1
105.0
-0.11%
0.00%
-1.03%
-1.10%
-0.89%
0.78%
2.40%
5.21%
0.81%
3.83%
1.01%
reported in Table 4 are an index where higher is better. It should be noted that
the benchmarks are meant primarily to compare a NICKLE-enhanced VMM
with the corresponding unmodiﬁed VMM. These numbers are not meant to
compare diﬀerent VMMs (such as QEMU+KQEMU vs. VirtualBox).
QEMU+KQEMU. The QEMU+KQEMU implementation of NICKLE ex-
hibits very low overhead in most tests. In fact, a few of the benchmark tests show
a slight performance gain for the NICKLE implementation, but we consider these
results to signify that there is no noticeable slowdown due to NICKLE for that
test. From Table 3 it can be seen that both the kernel compilation and Apache
tests come in below 1% overheard. The insmod test has a modest overhead,
7.3%, primarily due to the fact that NICKLE must calculate and verify the hash
of the module prior to copying it into the shadow memory. Given how infre-
quently kernel module insertion occurs in a running system, this overhead is not
a concern. The UnixBench tests in Table 4 further testify to the eﬃciency of the
NICKLE implementation in QEMU+KQEMU, with the worst-case overhead of
any test being 5.21% and the overall overhead being 1.01%. The low overhead of
NICKLE is due to the fact that NICKLE’s modiﬁcations to the QEMU control
ﬂow only take eﬀect while executing kernel code (user-level code is executed by
the unmodiﬁed KQEMU accelerator).
VirtualBox. The VirtualBox implementation has a more noticeable overhead
than the QEMU+KQEMU implementation, but still runs below 10% for the
majority of the tests. The kernel compilation test, for example, exhibits about
7% overheard; while the UnixBench suite shows a little less than 6% overall.
The Apache test is the worst performer, showing a 19.03% slowdown. This can
be attributed to the heavy number of user/kernel mode switches that occur
while serving web requests. It is during the mode switches that the Virtual-
Box implementation does its work to ensure only veriﬁed code will be executed
directly [16], hence incurring overhead. The insmod test shows a large perfor-
mance degradation, coming in at 30.0%. This is due to the fact that module
insertion on the VirtualBox implementation entails the VMM leaving native
code execution as well as verifying the module. However, this is not a concern
as module insertion is an uncommon event at runtime. Table 4 shows that the
16
R. Riley, X. Jiang, and D. Xu
worst performing UnixBench test (Execl) results in an overhead of 13.24%. This
result is most likely due to a larger number of user/kernel mode switches that
occur during that test.
In summary, our benchmark experiments show that NICKLE incurs minimal
to moderate impact on system performance, relative to that of the respective
original VMMs.
5 Discussion
In this section, we discuss several issues related to NICKLE. First, the goal of
NICKLE is to prevent unauthorized code from executing in the kernel space,
but not to protect the integrity of kernel-level control ﬂows. This means that
it is possible for an attacker to launch a “return-into-libc” style attack within
the kernel by leveraging only the existing authenticated kernel code. Recent
work by Shacham [20] builds a powerful attacker who can execute virtually
arbitrary code using only a carefully crafted stack that causes jumps and calls
into existing code. Fortunately, this approach cannot produce persistent code to
be called on demand from other portions of the kernel. And Petroni et al. [3]
found that 96% of the rootkits they surveyed require persistent code changes.
From another perspective, an attacker may also be able to directly or indirectly
inﬂuence the kernel-level control ﬂow by manipulating certain non-control data
[21]. However, without its own kernel code, this type of attack tends to have
limited functionality. For example, all four stealth rootkit attacks described in
[22] need to execute their own code in the kernel space and hence will be defeated
by NICKLE. Meanwhile, solutions exist for protecting control ﬂow integrity [3,
23, 24] and data ﬂow integrity [25], which can be leveraged and extended to
complement NICKLE.
Second, the current NICKLE implementation does not support self-modifying
kernel code. This limitation can be removed by intercepting the self-modifying
behavior (e.g., based on the translation cache invalidation resulting from the
self-modiﬁcation) and re-authenticating and shadowing the kernel code after the
modiﬁcation.
Third, NICKLE currently does not support kernel page swapping. Linux does
not swap out kernel pages, but Windows does have this capability. To support
kernel page swapping in NICKLE, it would require implementing the introspec-
tion of swap-out and swap-in events and ensuring that the page being swapped
in has the same hash as when it was swapped out. Otherwise an attacker could
modify swapped out code pages without NICKLE noticing. This limitation has
not yet created any problem in our experiments, where we did not encounter
any kernel level page swapping.
Fourth, targeting kernel-level rootkits, NICKLE is ineﬀective against user-
level rootkits. However, NICKLE signiﬁcantly elevates the trustworthiness of
the guest OS, on top of which anti-malware systems can be deployed to defend
against user-level rootkits more eﬀectively.
Guest-Transparent Prevention of Kernel Rootkits
17
Fifth, the deployment of NICKLE increases the memory footprint for the
protected VM. In the worst case, memory shadowing will double the physical
memory usage. As our future work, we can explore the use of demand-paging
to eﬀectively reduce the extra memory requirement to the actual amount of
memory needed. Overall, it is reasonable and practical to trade memory space
for elevated OS kernel security.
Finally, we point out that NICKLE assumes a trusted VMM to achieve the
“NICKLE” property. This assumption is needed because it essentially establishes
the root-of-trust of the entire system and secures the lowest-level system access.
We also acknowledge that a VM environment can potentially be ﬁngerprinted
and detected [26, 27] by attackers so that their malware can exhibit diﬀerent
behavior [28]. We can improve the ﬁdelity of the VM environment (e.g., [29,
30]) to thwart some of the VM detection methods. Meanwhile, as virtualization
continues to gain popularity, the concern over VM detection may become less
signiﬁcant as attackers’ incentive and motivation to target VMs increases.
6 Related Work
Rootkit Prevention Through Kernel Integrity Enforcement. The ﬁrst
area of related work includes recent eﬀorts in enforcing kernel integrity to thwart
kernel rootkit installation or execution. Livewire [6], based on a software-based
VMM, aims at protecting the guest OS kernel code and critical data structures
from being modiﬁed. However, an attacker may choose to load malicious rootkit
code into the kernel space without manipulating the original kernel code.
SecVisor [7] is a closely related work that leverages new hardware extensions to
enforce life-time kernel integrity and provide a guarantee similar to “NICKLE”.
However, there are two main diﬀerences between SecVisor and NICKLE: First,
the deployment of SecVisor requires modiﬁcation to OS kernel source code as
well as the latest hardware support for MMU and IOMMU virtualization. In
comparison, NICKLE is a guest-transparent solution that supports guest OSes
“as is” on top of legacy hardware platforms. In particular, NICKLE does not rely
on the protection of any guest OS data structures (e.g., the GDT – global de-
scriptor table). Second, SecVisor is developed to enforce the W⊕X principle for
the protected VM kernel code. This principle intrinsically conﬂicts with mixed
kernel pages, which exist in current OSes (e.g., Linux and Windows). NICKLE
works in the presence of mixed kernel pages. OverShadow [31] adopts a similar
technique of memory shadowing at the VMM level with the goal of protecting
application memory pages from modiﬁcation by even the OS itself. In compar-
ison, NICKLE has a diﬀerent goal and aims at protecting the OS from kernel
rootkits.
To ensure kernel code integrity, techniques such as driver signing [32] as well
as various forms of driver veriﬁcation [5, 33] have also been proposed. These
techniques are helpful in verifying the identity or integrity of the loaded driver.
However, a kernel-level vulnerability could potentially be exploited to bypass
18
R. Riley, X. Jiang, and D. Xu
these techniques. In comparison, NICKLE operates at the lower VMM level and
is capable of blocking zero-day kernel-level exploitations.
Symptom-Driven Kernel Rootkit Detection. The second area of related
work is the modeling and speciﬁcation of symptoms of a rootkit-infected OS
kernel which can be used to detect kernel rootkits. Petroni et al. [4] and Zhang
et al. [34] propose the use of external hardware to grab the runtime OS memory
image and detect possible rootkit presence by spotting certain kernel code in-
tegrity violations (e.g., rootkit-inﬂicted kernel code manipulation). More recent
works further identify possible violations of semantic integrity of dynamic ker-
nel data [2] or state based control-ﬂow integrity of kernel code [3]. Generalized
control-ﬂow integrity [23] may have strong potential to be used as a prevention
technique, but as yet has not been applied to kernel integrity. Other solutions
such as Strider GhostBuster [35] and VMwatcher [1] target the self-hiding na-
ture of rootkits and infer rootkit presence by detecting discrepancies between the
views of the same system from diﬀerent perspectives. All the above approaches
are, by design, for the detection of a kernel rootkit after it has infected a system.
Instead, NICKLE is for the prevention of kernel rootkit execution in the ﬁrst
place.
The third area of related work
Attestation-Based Rootkit Detection.
is the use of attestation techniques to verify the software running on a target
platform. Terra [13] and other code attestation schemes [36, 37, 38] are proposed
to verify software that is being located into the memory for execution. These
schemes are highly eﬀective in providing the load-time attestation guarantee.
Unfortunately, they are not able to provide run-time kernel integrity.
7 Conclusion
We have presented the design, implementation, and evaluation of NICKLE, a
VMM-based approach that transparently detects and prevents the launching of
kernel rootkit attacks against guest VMs. NICKLE achieves the “NICKLE”
guarantee, which foils the common need of existing kernel rootkits to exe-
cute their own unauthorized code in the kernel space. NICKLE is enabled by
the scheme of memory shadowing, which achieves guest transparency through
the guest memory access indirection technique. NICKLE’s portability has been
demonstrated by its implementation in three VMM platforms. Our experiments
show that NICKLE is eﬀective in preventing 23 representative real-world kernel
rootkits that target a variety of commodity OSes. Our measurement results show
that NICKLE adds only modest overhead to the VMM platform.
Acknowledgements. The authors would like to thank the anonymous review-
ers for their insightful comments that helped improve the presentation of this
paper. This work was supported in part by NSF Grants CNS-0716376, CNS-
0716444 and CNS-0546173.
Guest-Transparent Prevention of Kernel Rootkits
19
References
[1] Jiang, X., Wang, X., Xu, D.: Stealthy Malware Detection through VMM-Based
“Out-of-the-Box” Semantic View Reconstruction. In: Proceedings of the ACM Con-
ference on Computer and Communications Security (CCS 2007) (October 2007)
[2] Petroni Jr., N.L., Fraser, T., Walters, A., Arbaugh, W.A.: An Architecture for
Speciﬁcation-based Detection of Semantic Integrity Violations in Kernel Dynamic
Data. In: Proceedings of the 15th USENIX Security Symposium (2006)
[3] Petroni Jr., N.L., Hicks, M.: Automated Detection of Persistent Kernel Control-
Flow Attacks. In: Proceedings of the ACM Conference on Computer and Com-
munications Security (CCS 2007) (October 2007)
[4] Petroni, N., Fraser, T., Molina, J., Arbaugh, W.: Copilot: A Coprocessor-based
Kernel Runtime Integrity Monitor. In: Proceedings of the 13th USENIX Security
Symposium, pp. 179–194 (2004)
[5] Wilhelm, J., Chiueh, T.-c.: A Forced Sampled Execution Approach to Kernel
Rootkit Identiﬁcation. In: Kruegel, C., Lippmann, R., Clark, A. (eds.) RAID
2007. LNCS, vol. 4637, pp. 219–235. Springer, Heidelberg (2007)
[6] Garﬁnkel, T., Rosenblum, M.: A Virtual Machine Introspection Based Architec-
ture for Intrusion Detection. In: Proc. Network and Distributed Systems Security
Symposium (NDSS 2003) (February 2003)
[7] Seshadri, A., Luk, M., Qu, N., Perrig, A.: SecVisor: A Tiny Hypervisor to Guar-
antee Lifetime Kernel Code Integrity for Commodity OSes. In: Proceedings of the
ACM Symposium on Operating Systems Principles (SOSP 2007) (October 2007)
[8] Bellard, F.: QEMU: A Fast and Portable Dynamic Translator. In: Proceedings of
the USENIX Annual Technical Conference, FREENIX Track, pp. 41–46 (2005)
[9] Innotek: Virtualbox (Last accessed, September 2007),
http://www.virtualbox.org/
[10] Intel: Vanderpool Technology (2005),
http://www.intel.com/technology/computing/vptech
[11] AMD: AMD64 Architecture Programmer’s Manual Volume 2: System Program-
ming, 3.12 edition (September 2006)
[12] Dunlap, G., King, S., Cinar, S., Basrai, M., Chen, P.: ReVirt: Enabling Intrusion
Analysis through Virtual Machine Logging and Replay. In: Proc. USENIX Sym-
posium on Operating Systems Design and Implementation (OSDI 2002) (2002)
[13] Garﬁnkel, T., Pfaﬀ, B., Chow, J., Rosenblum, M., Boneh, D.: Terra: A Virtual
Machine-Based Platform for Trusted Computing. In: Proc. of ACM Symposium
on Operating System Principles (SOSP 2003) (October 2003)
[14] Jiang, X., Wang, X.: “Out-of-the-Box” Monitoring of VM-Based High-Interaction
Honeypots. In: Kruegel, C., Lippmann, R., Clark, A. (eds.) RAID 2007. LNCS,
vol. 4637, pp. 198–218. Springer, Heidelberg (2007)
[15] Joshi, A., King, S., Dunlap, G., Chen, P.: Detecting Past and Present Intrusions
through Vulnerability-speciﬁc Predicates. In: Proc. ACM Symposium on Operat-
ing Systems Principles (SOSP 2005), pp. 91–104 (2005)
[16] Riley, R., Jiang, X., Xu, D.: Guest-Transparent Prevention of Kernel Rootkits
with VMM-based Memory Shadowing. Technical report CERIAS TR 2001-146,
Purdue University
[17] Arbaugh, W.A., Farber, D.J., Smith, J.M.: A Secure and Reliable Bootstrap Ar-
chitecture. In: Proceedings of IEEE Symposium on Security and Privacy, May
1997, pp. 65–71 (1997)
[18] sd, devik: Linux on-the-ﬂy Kernel Patching without LKM. Phrack 11(58) Article 7
[19] fuzen op: Fu rootkit (Last accessed, September 2007), http://www.rootkit.
com/project.php?id=12
20
R. Riley, X. Jiang, and D. Xu
[20] Shacham, H.: The Geometry of Innocent Flesh on the Bone: Return-into-libc
without Function Calls (on the x86). In: Proceedings of the ACM Conference on
Computer and Communications Security (CCS 2007) (October 2007)
[21] Chen, S., Xu, J., Sezer, E.C., Gauriar, P., Iyer, R.: Non-Control-Data Attacks
Are Realistic Threats. In: Proceedings of the 14th USENIX Security Symposium
(August 2005)
[22] Baliga, A., Kamat, P., Iftode, L.: Lurking in the Shadows: Identifying Systemic
Threats to Kernel Data. In: Proc. of IEEE Symposium on Security and Privacy
(Oakland 2007) (May 2007)
[23] Abadi, M., Budiu, M., Erlingsson, U., Ligatti, J.: Control Flow Integrity: Princi-
ples, Implementations, and Applications. In: Proc. ACM Conference on Computer
and Communications Security (CCS 2005) (November 2005)
[24] Grizzard, J.B.: Towards Self-Healing Systems: Re-establishing Trust in Compro-
mised Systems. Ph.D. Thesis, Georgia Institute of Technology (May 2006)
[25] Castro, M., Costa, M., Harris, T.: Securing Software by Enforcing Data-Flow
Integrity. In: Proc. of USENIX Symposium on Operating Systems Design and
Implementation (OSDI 2006) (2006)
[26] Klein, T.: Scooby Doo - VMware Fingerprint Suite (2003),
http://www.trapkit.de/research/vmm/scoopydoo/index.html
[27] Rutkowska, J.: Red Pill: Detect VMM Using (Almost) One CPU Instruction (No-
vember 2004), http://invisiblethings.org/papers/redpill.html
[28] F-Secure Corporation: Agobot, http://www.f-secure.com/v-descs/agobot.shtml
[29] Kortchinsky, K.: Honeypots: Counter Measures to VMware Fingerprinting (Jan-
uary 2004), http://seclists.org/lists/honeypots/2004/Jan-Mar/0015.html
[30] Liston, T., Skoudis, E.: On the Cutting Edge: Thwarting Virtual Machine
Detection (2006), http://handlers.sans.org/tliston/ThwartingVMDetection
Liston Skoudis.pdf
[31] Chen, X., Garﬁnkel, T., Lewis, E.C., Subrahmanyam, P., Waldspurger, C.A.,
Boneh, D., Dwoskin, J., Ports, D.R.K.: Overshadow: A Virtualization-Based Ap-
proach to Retroﬁtting Protection in Commodity Operating Systems. In: Proc. of
the 13th Conference on Architectural Support for Programming Languages and
Operating Systems (ASPLOS 2008) (March 2008)
[32] Microsoft Corporation: Driver Signing for Windows,
http://www.microsoft.com/resources/documentation/windows/xp/all/
proddocs/en-us/code signing.mspx?mfr=true
[33] Kruegel, C., Robertson, W., Vigna, G.: Detecting Kernel-Level Rootkits Through
Binary Analysis. In: Yew, P.-C., Xue, J. (eds.) ACSAC 2004. LNCS, vol. 3189,
pp. 91–100. Springer, Heidelberg (2004)
[34] Zhang, X., van Doorn, L., Jaeger, T., Perez, R., Sailer, R.: Secure Coprocessor-
based Intrusion Detection. In: Proceedings of the 10th ACM SIGOPS European
Workshop, pp. 239–242 (2002)
[35] Wang, Y.M., Beck, D., Vo, B., Roussev, R., Verbowski, C.: Detecting Stealth
Software with Strider GhostBuster. In: Proc. IEEE International Conference on
Dependable Systems and Networks (DSN 2005), pp. 368–377 (2005)
[36] Kennell, R., Jamieson, L.H.: Establishing the Genuinity of Remote Computer
Systems. In: Proc. of the 12th USENIX Security Symposium (August 2003)
[37] Sailer, R., Jaeger, T., Zhang, X., van Doorn, L.: Attestation-based Policy En-
forcement for Remote Access. In: Proc. of ACM Conference on Computer and
Communications Security (CCS 2004) (October 2004)
[38] Sailer, R., Zhang, X., Jaeger, T., van Doorn, L.: Design and Implementation of a
TCG-based Integrity Measurement Architecture. In: Proc. of the 13th USENIX
Security Symposium (August 2004)