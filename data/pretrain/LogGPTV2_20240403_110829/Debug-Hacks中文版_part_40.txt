490usr/320sys/818real ms.
Pass 2: analyzed script: 6 probe(s), 10 function(s), 15 embed(s), 3 global(s) in
Pass 1: parsed user script and 45 library script(s) in 230usr/10sys/244real ms.
# stap -vg sleeptime.stp
Pass 5: starting run.
www.TopSage.com
"stap_5879bfa558535efa4dced96aladff5e3_13896.ko"in
1305
---
## Page 324
314
参考
就能在内核中插入调试代码，熟练以后应该能提高工作效率。
代替在内核代码中添加printk()或WARN_ON()的调试方法。这样无须重新编译内核,
本 hack 介绍了利用 systemtap 查看调用跟踪和内核内部数据的方法，该方法可以
总结
而且，还能查看 restart->nanosleep.expires 的值。
图 6-1 SIGCONT 恢复 nanosleep()运行时的流程
器在函数返回时启动而显示的。从上面的结果可知，调用流程如图 6-1所示。
中显示了kretprobe_trampoline_holder()，这一行可以忽视，它是由于插入的侦测
hrtimer_nanosleep_restart()中插入的侦测器处理程序显示了调用跟踪。调用跟踪
306 1
17981629 27784 (usleep) nanosleep_restart: 10000029
systemtap 附带的示例脚本
restart->nanosleep.expires = 990839225309246
oxffffffffffffffff : vgetcpu+ox9ff7ff/0x0 [kernel] (inexact)
xfffffffffffff00 : vgetcpu+ox9ff700/0x0 [kernel] (inexact)
oxffffffff00000 : packet_exit+0x7d9e988a/0x7dfe988a [kernel] (inexact)
oxffffff8101024a : sys_rt_sigreturn+0x558/0x189e [kernel] (inexact)
xffff812c2870 : kretprobe_trampoline_holder+0x4/0x50 [kernel] (inexact)
oxffffff812bff5c : hrtimer_nanosleep_restart+0x1/0x62 [kernel] 
 http://sourceware.org/systemtap/documentation.html
SystemTap 项目页面
/usr/share/systemtap/tapset/
systemtap 附带的 tapset
第6章高手们的调试技术
www.TopSage.com
sys_rt_sigreturn()
>hrtiner_nanosleep_restart()
-安部东洋
---
## Page 325
表6-1 /proc/meminfo的显示项目
介绍下主要项目，如表6-1所示。
从/proc/meminfo中可以获得系统整体（包括内核和进程）的内存使用状况。下面
/proc/meminfo
#54
MACK
AnonPages
Committed_AS
PageTables
Slab
Mapped
Inactive
Active
SwapCached
Cached
Buffers
MemFree
项目
漏时发生变化的项目。
本hack介绍/proc/meminfo中包含的系统内存相关信息，以及内存泄
程的堆空间使用
属于匿名区域（anonymous region）的页面总大小。主要作为进
进程提交的内存总大小。其中包含尚未指定实际页面的区域
越大
页表使用的内存总大小。内存使用的地址空间越大，该值也就
到几MB），进行内存分配和释放
内核或驱动程序发出的、数量较少的内存分配要求（几十字节
Slaballocator（Slab分配器）的内存使用量。Slaballocator接受
成比例增加。此外，指定MAP_SHARED标志执行mmap（）时也会增
映射到文件上的页面总大小。与运行中的进程的种类和代码量
Inactive的LRU链表连接的页面的总大小
Active的LRU链表连接的页面的总大小
就能直接释放的内存总量
设备中的页面的总大小。它表示空闲内存不足时，无须执行1/O
被换出（pageout）的数据在换入（pagein）之后仍残留在交换
加
含在Buffers和SwapCached中
只要有空闲内存，页面缓存就会一直维持。此外，该容量不包
页面缓存（普通文件的缓存）总量，读写文件时增加。通常，
块，该值也会少量增加
文件系统的驱动程序会访问设备的超级块（superblock）或inode
进行读写时，该值的增加量与读写量相等。读写普通文件时，
缓存（块设备数据的缓存）总量。对设备文件（/dev/sdal等）
空闲内存总量
说明
www.TopSage.com
HACK#54
315
---
## Page 326
316
时会泄漏一定量的内存（10%)。
和 Cached 的值。该程序的5 个线程会分配随机大小的内存，最大为 4MB，分配
我们实际执行了下面的程序，并测定其Committed_AS、MemFree、SwapFree、AnonPages
得多时，就可以怀疑内存泄漏。
即便如此，Committed_AS可以作为进程的内存泄漏估计。Committed_AS 的值比预想
非常复杂，很难一概而论。因此，并没有哪个特定项目能够单独发现内存泄漏。
上面大致介绍了各个项目数值增值的时机，但是实际上，增加的内存减少的时机
内存泄漏的大致数值
308 1 第6章高手们的调试技术
int leak(void)
size_t calc_size(void)
double frand(void)
const float MaxAlloc = 4*1024*1024;
const float MinAlloc = 1;
const float Paccess = 0.5;
const float Pleak = 0.1;
#include 
#include 
#include 
#include 
#include 
return (double)rand())/RAND_MAX;
if (frand() /mem接口用read系统调用，只需一次就能读取任意大小的内存,
有 8字节。因此，读取量较大时，就要反复调用 ptrace 系统调用，处理时间较长。
PTRACE_PEEKDATA一次读取的内存大小在386架构下为4字节，x86_64架构下也只
同样的处理用 ptrace 系统调用中的 PTRACE_PEEKDATA 也可以实现。但是，
进程 ID。
通过虚拟文件/proc//mem可以读取任意进程的内存内容。就是要读取的
/proc//mem 接口
#55
MACK
本 hack 介绍了/proc/meminfo 包含的与内存相关的信息和内存泄漏时的变化项目。
总结
图6-3没有内存泄漏时的结果
本 hack 介绍利用/proc 接口实现比 ptrace 系统调用更快的访问内存空
存内容
间的方法。
用/proc//mem快速读取进程的内
1000
200
1
午
T
HACK#55 用/proc//mem 快速读取进程的内存内容 | 311
www.TopSage.com
.... MemFree
1
Cached
SwapFree
Committed_AS
Time
大和一洋
---
## Page 330
320
个参数为要读取的进程的PID，第2个参数为要读取的内存的起始地址，第3个
下面的示例程序用参数指定进程，并通过/proc//mem读取进程的内存。第1
示例程序
312|第6章高手们的调试技术
参数为读取大小。
int main( int argc, char *argv[] )
#include
#include
#include 
#include
#include
#include
#include 
#include 
#include
sscanf(argv[3],%x"，&read_sz);
sscanf(argv[2],“%x",&target_addr);
pid =atoi(argv[1]);
if（argc/mem*/
www.TopSage.com
---
## Page 331
if (sz != read_sz) {
sz = read(fd, buf, read_sz);
if (ofs == (off_t)-1) {
ofs = lseek(fd, target_addr, SEEK_SET);
/*找到目的地址并读取*/
fd = open(path, 0_RDONLY);
snprintf(path, npath, "/proc/%d/mem", pid);
if （waitpid(pid，NULL，0)/mem*/
if (buf = NULL) {
buf = malloc( read_sz);
/*分配读取用的缓冲区*/
ptrace(PTRACE_DETACH, pid, NULL, NULL);
fprintf(stderr, "Failed to read, errno: &d\n", errno);
exit(1);
ptrace(PTRACE_DETACH, pid, NULL, NULL);
fprintf(stderr, "Failed to lseek, errno: %d\n", errno);
ptrace(PTRACE_DETACH, pid, NULL, NULL);
fprintf(stderr, "Failed to open: %s\n", path);
(fd/mem 快速读取进程的内存内容 | 313 
www.TopSage.com
---
## Page 332
322
本节介绍了利用/proc//mem接口快速读取任意进程的内存的方法。根据测试,
总结
表6-2read()和ptrace()的读取时间
64KB 时，用 read()读取更快。特别是读取16MB 数据的时间差了将近 100 倍。
进程拥有128MB 数据区域，该区域中写入了随机值。用两种方法读取数据区域
我们来测试一下使用/proc//mem 和 ptrace(PTRACE_PEEKDATA，...)究竟有多大差
评测
ATTACH，...)将读取对象进程改成跟踪状态，之后的处理就会失败。
的时间如表 6-2 所示。4KB 以下时两者基本上没有差距，当读取数据大小超过
异。使用的机器为Core 2 6400 2.13GHz，内核为Linux 2.6.22.1(i386)，要读取的
开/proc//mem，找到目的地址后用 read()读出。如果不用 ptrace(PTREACE_
上面的示例程序的基本流程为：首先把要读取的对象进程改成跟踪状态，然后打
314
16MB
1MB
64KB
4KB
读取大小
return EXIT_SUCCESS;
free(buf);
ptrace(PTRACE_DETACH, pid, NULL, NULL);
close(fd);
printf("\n");
for (sz = 0; sz < read_sz; sz++) {