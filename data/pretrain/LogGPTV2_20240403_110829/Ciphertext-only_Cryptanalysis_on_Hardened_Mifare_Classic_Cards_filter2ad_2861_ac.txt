about the plaintext by observing only the ciphertext. Con-
sequently, this already breaks the conﬁdentiality of the en-
cryption scheme. For example: suppose we observed the
encrypted parity bit {p0}, which is computed over the ﬁrst
nonce byte nT[0,7] , and {nT8 }, the ﬁrst bit of the second
encrypted nonce byte. Since both are encrypted (XOR-ed)
with the same keystream bit ks8, we can deduce whether or
not the plaintext parity p0 equals nT8 .
In this research, we focus only on the parity bits of {nT }.
The ISO standard speciﬁes odd parity, hence the “⊕1” in the
deﬁnition below.
Deﬁnition 4.1. In the situation from Deﬁnition 3.5, we
deﬁne the parity bits pj ∈ F2 by
pj :=
7
M
i=0
nT8j+i ⊕ 1
∀j ∈ [0, 3]
and the encryptions {pj } of these parity bits by
{pj} := pj ⊕ ks8j+8
∀j ∈ [0, 3]
The only way left in hardened cards leak secret key in-
formation without communicating with a genuine reader is
through parity bits. Hence, the attack presented in this pa-
per is built upon this vulnerability.
4.5 Keystream leakage through errors
While the authentication protocol is running, the card al-
ways ﬁrst checks the parity bits before doing anything else.
Hence, during the authentication protocol, when the card
receives {nR} and {aR}, if at least one of the eight parity
bits is wrong, the card does not respond.
In the case all
eight parity bits are correct, but the answer aR is wrong,
the card replies with the 4-bit error code 0x5, indicating
a failed authentication. The error code is sent encrypted,
even though the reader has not successfully authenticated
itself and hence cannot be assumed to be able to decrypt it
correctly.
From this encrypted error code, 4 bits of keystream is
leaked and can be obtained by XOR-ing the encrypted er-
ror code with its plaintext value. The leakage of 4 bits of
keystream may not seem a severe issue. However, the leak-
age is a crucial ingredient for several card-only key recovery
attacks [GRVS09, Cou09, CHC+14].
The weakness can be mitigated by issuing cards that do
not send authentication error codes. This does not break
compatibility with the mifare Classic protocol since, as
stated, the reader is unable to decrypt it anyway.
4.6 LFSR Rollback
Initially, the cipher’s internal state is set to the secret key.
During authentication and during encryption, the state is
manipulated. However, given an internal state at any given
point in time, and given the data fed into the LFSR, u, nT
and {nR}, the previous state can be computed determin-
istically. Hence, it is suﬃcient for an adversary to obtain
the internal state at any point in time. The LFSR state can
then be rolled back to time 0, wherein it holds the secret key.
Many, if not all attacks rely on this weakness, including the
one presented in this paper. The fact that this vulnerability
is present in mifare Classic was ﬁrst pointed out by Garcia
et al. [GKGM+08].
4.7 Odd Inputs to the Filter Function
The nonlinear ﬁlter function f that takes inputs from the
LFSR to produce a keystream bit exclusively uses bits on
odd-numbered positions, i.e. a9, a11, a13, . . . , a47 (see Fig-
ure 3.1). The fact that they are so evenly placed can be ex-
ploited. Given a part of keystream, the bits of the LFSR rel-
evant for generating the even and odd bits of the keystream
can be generated separately. By splitting the feedback into
two parts as well, those even and odd states can be combined
eﬃciently to recover exactly those LFSR states that produce
a given keystream. This reduces the computing power re-
quired for an exhaustive search from 239 to approximately
220 + 219 ≈ 220.58. It may be understood as “inverting” the
ﬁlter function f . The attack presented in this paper makes
extensive use of this vulnerability. The complete attack is
described in full detail in the next section.
5 Attacking Mifare Classic
In this section we describe the process of mounting an attack
without exploiting the two main implementation mistakes:
the weak pseudo random number generator (Section 4.2)
and the encrypted error message (Section 4.5). We pro-
pose a novel attack that solely depends on design issues in
the crypto1 cipher. Hence, in order to avoid this attack,
backwards compatibility with the mifare Classic protocol
is inherently broken.
Stage 1 We start retrieving encrypted nonces {nT } using
the nested authentication, i.e. by authenticating for a sector
for which the key is known, followed by an authentication
request for the target sector. This process is repeated in the
background until the key is recovered.
Stage 2 Given the set of encrypted nonces we have obtained
so far, we determine Sǫ, the sum property of the cipher’s ini-
tial state. This property is explained in detail in Section 5.2
We also determine S{b}, the sum property of the cipher’s
state after byte {b} is fed (i.e. at time 8), for all 256 possi-
ble ﬁrst input bytes {b}. Depending on the probability that
we guessed S{b} correctly, we choose to incorporate byte {b}
in the diﬀerential analysis described in Section 5.5. This is
done using a probability threshold value. How the proba-
bility of correctly guessing the sum property for input byte
{b} is computed is explained in detail in Section 5.4. Ad-
ditionally, we incorporate all input bytes {b} for which we
observe that f (α8) 6= f (α8 ⊕ 1), i.e. all ﬁrst nonce bytes
for which the ﬁlter ﬂip property holds. This is explained in
Section 5.6.
Next, given the information determined from the set of en-
crypted nonces, we determine the size of the leftover search
space. The leftover search space shrinks as the number of
harvested encrypted nonces increases since more nonces al-
low us to more accurately guess sum properties and observe
ﬁlter ﬂip properties. We repeat this information gathering
step until the search space is suﬃciently small, as subjec-
tively assessed by the adversary. Once this is the case, we
move on to Stage 3.
Stage 3 Given the information determined from the set of
encrypted nonces so far, we construct a candidate list for
a[9,55] (Section 5.5). Which we extend to a[8,55] by pre-
ﬁxing both 0 and 1. Then, we perform an LFSR-rollback
described in Section 4.6 to transform them into candidates
for a[0,47], i.e. the secret key. Subsequently, we carry out
the oﬄine brute force attack presented in Section 5.1. The
key is not always found since sum properties are guessed
correctly with high probabilities, not certainty. In case the
key is not found, we revert to Stage 2, optionally with an in-
crease of the probability threshold, causing the search space
to increase. However, gathering of more nonces increases
the certainty and reduces the number of candidate keys.
5.1 Ofﬂine Brute Force Attack
Recall from Deﬁnition 4.1 that a parity bit pi is computed
over plaintext byte nT[8i,8i+7] , and subsequently encrypted
(XOR-ed) with the next keystream bit ks8i+8. This property
can be exploited in order to verify whether a candidate key is
the correct key. Given an encrypted nonce obtained through
a nested authentication attempt, the adversary can attempt
to “decrypt” the nonce using the candidate key. In case the
candidate is the correct key, the parity bits will be correct.
However, in case a wrong key was used, a parity bit will be
correct with probability 1
2 .
An encrypted nonce holds 4 bytes, thus 4 encrypted parity
bits. Therefore, on average, 48/4 = 12 encrypted nonces are
enough to determine the key uniquely.
We implemented this brute-force attack and executed it on
an nvidia gtx460 GPU. From our experiments we deduced
that performing a full 48-bit exhaustive search takes ap-
proximately 1 month. However, our implementation leaves
headroom for optimizations, such as bitslicing [Bih97]. We
assume that such optimizations improve the attack perfor-
mance by at least a factor of four.
By today’s standards the gtx460 is considered a low end
GPU. It has 336 cores and runs at 675 Mhz. Clearly, the
attack scales linearly by the amount of parallel computing
power available. As of today, a gtx460 costs approximately
$50 USD. Therefore, its price/performance ratio is among
the best available. We reserve another $20 USD per GPU
for hardware driving the GPUs (CPUs, mainboards, power
supplies). Hence, recovering a single key within an hour
by means of a brute force attack would require a hardware
budget of approximately $12,600 USD.
The attack mounted in [NP07] seems signiﬁcantly faster.
However, this is mainly because it operates directly on the
keystream, while the brute force attack described here oper-
ates on contiguously reinitializing the state with encrypted
nonces.
Although we have not researched the possibility to mount
a time-memory trade-oﬀ extensively, on the surface, doing so
seems very diﬃcult and comes with negligible performance
impact. This is due to the fact that time-memory trade-oﬀ
strategies found in scientiﬁc literature [Hel80, BS00] operate
on keystream, while our attacker model dictates that we can
only deduce indirect properties of the keystream. On top of
that, the cipher’s internal state is initialized by a random
nonce which can not be inﬂuenced by an adversary.
In the next sections we describe several properties that
can be observed by only analyzing the ciphertext. Once
the properties are determined, all candidate keys for which
these properties do not hold can be discarded, signiﬁcantly
reducing the search space.
Note that an exhaustive search and subsequently testing
each candidate for the properties found is a computationally
expensive task, since an oﬄine brute force attack is rather
slow. Therefore, we introduce an eﬃcient method for con-
structing a list of key candidates.
5.2 Sum Property
The ﬁrst property that can be observed by analyzing the
ciphertext is the sum property. In order to deﬁne it, we ﬁrst
need to establish a number of lemmas.
Given an encrypted nonce byte {nT[8i,8i+7] } and corre-
sponding parity bit {pi}, we can cancel out the plaintext by
XOR-ing the two together, yielding the inner XOR of the
corresponding keystream bits ks8i . . . ks8i+8.
Lemma 5.1. Let {nT[8i,8i+7] } be the ith encrypted nonce
byte obtained from the card and let {pi} be its corresponding
encrypted parity bit. Then
7
M
{nT8i+j } ⊕ {pi} =
j=0
8
M
j=0
ks8i+j ⊕ 1
Proof. Published in [Mei15].
The lemma depicted above is applicable to any ciphertext,
e.g. it can also be applied to {nR} or {aR}. However, in this
paper we are only concerned with the analysis of {nT }. The
following lemma states that for two encrypted nonces with
a common preﬁx of j bits, the LFSR-stream a48a49 . . . a48+j
is equal.
:= {nT0 nT1 . . . nT31 } and {n′
T }
Lemma 5.2. Suppose
{nT }
nonces
{n′
T0 n′
T1 . . . n′
a0a1 . . . and a′
mon preﬁx of j bits, i.e. {nTi } = {n′
also a48+i = a′
two encrypted
:=
T31 }, and their corresponding LFSR-streams
0a′
1 . . . . Let the encrypted nonces have a com-
Ti }, for all i < j. Then
48+i and ksi = ks′
that we have
i for i < j.
Proof. Published in [Mei15].
Finally, we describe another property that, when taken
together with Lemma 5.1, allows us to deﬁne the desired
sum property. Let’s focus on any of the encrypted nonce
bytes {nT[8i,8i+7] } where i ∈ [0, 3]. The value of this
byte is mapped to the LFSR-stream byte a[8i+48,8i+55].
The value is not taken directly, but ﬁrst manipulated by
keystream and feedback loop. If we only take nonces with a
common {nT[0,8i−1] }, a one-to-one mapping exists between
{nT[8i,8i+7] } and a[8i+48,8i+55].
Lemma 5.3. Given that {nT[0,8i−1] } is constant, a one-to-
one mapping exists between all 256 possible values for nonce
byte {nT[8i,8i+7] } and LFSR-stream byte a[8i+48,8i+55].
Proof. Published in [Mei15].
Suppose we have collected suﬃciently many encrypted
nonces such that we observed all 256 possible values for an
encrypted nonce byte {nT[8i,8i+7] }, with the previous bytes
{nT[0,8i−1] } being constant. This information allows us to
compute the sum property.
Deﬁnition 5.4. The sum property, S is a property of the in-
ternal state at time 8i, where i ∈ [0, 3], that can be observed
by retrieving all possible values for {nT[8i,8i+7] }, i.e. the ith
encrypted nonce byte, with {nT[0,8i−1] }, i.e. all previous en-
crypted nonce bytes, being constant. For each encrypted
nonce byte we take the inner XOR and XOR it together
with its corresponding parity bit. Next, we take the sum
over all the resulting values, ignoring the modulo operation
of ﬁnite ﬁelds. The result is a number ranging from 0 until
and including 256.
S(α8i) :=
255
X
7
M
{nT8i+h } ⊕ {pi},
j=0
h=0
for {nT[8i,8i+7] } = j
The sum property is equivalent to a property that depends
only on the cipher’s internal state at time 8i. The following
lemma formilizes this.
Lemma 5.5. Sum property S is equivalent to the following
function over the cipher’s internal state
S(α8i) =
255
8
X
M
j=0
h=0
f (a8i+h+9a8i+h+11 . . . a8i+h+47),
for a[8i+48,8i+55] = j
Proof. Published in [Mei15].
Because S(a[8i,8i+47]) only depends on a[8i+9,8i+47], we
2 →
shall overload notation and see S as a function F39
[0, 256], writing S(a[8i,8i+47]) as S(a[8i+9,8i+47]).
Note that, at this point, we can already reduce the ex-
haustive search space signiﬁcantly by collecting all possible
values for the ﬁrst encrypted nonce byte, which determine
the sum property of the cipher’s initial state, i.e. at time 0,
and discard all states having a sum property value diﬀerent
from the one observed by means of precomputed lookup ta-
bles. In the next section we show how to do this eﬃciently
and without lookup tables.
5.3 Splitting the Sum property
In section 4.7 we described a vulnerability of the ﬁlter func-
tion f , namely that all its inputs are evenly placed at odd
positions. In this section we show how we can exploit this
property to construct candidate key lists such that each can-
didate has a certain given value for the sum property, with-
out the need for going through the entire 39-bit search space
and testing for this property.
To do so, we ﬁrst introduce the partial sum property, which
is the sum taken over only the odd or even bits of the cipher’s
internal state.
Deﬁnition 5.6. The odd sum, SO depicts the sum property
computed over the odd bits of the cipher’s internal state.
Likewise, SE depicts the even sum. Both values range from
0 until and including 16. Note that both values are do not