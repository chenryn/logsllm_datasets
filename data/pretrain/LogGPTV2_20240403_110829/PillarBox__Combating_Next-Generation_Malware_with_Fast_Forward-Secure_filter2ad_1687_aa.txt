# PillarBox: Combating Next-Generation Malware with Fast Forward-Secure Logging

## Authors
Kevin D. Bowers<sup>1</sup>, Catherine Hart<sup>2,†</sup>, Ari Juels<sup>3,†</sup>, and Nikos Triandopoulos<sup>1</sup>

- 1 RSA Laboratories, Cambridge, USA
- 2 Bell Canada, Vancouver, Canada
- 3 Cornell Tech (Jacobs Institute), New York, USA
- <sup>†</sup> Work performed while at RSA Laboratories.

## Abstract
Security analytics is a broad term encompassing vulnerability assessment and intrusion detection through the analysis of security logs from various Security Analytics Sources (SASs), such as firewalls, VPNs, and endpoint instrumentation. However, most current security analytics systems lack basic data protections, making them vulnerable to eavesdropping and tampering by adversaries. 

We introduce PillarBox, a tool that ensures the integrity of SAS data even when it is buffered on a compromised host within an adversarially controlled network. Additionally, PillarBox can optionally provide stealth, concealing SAS data and alerting rules on a compromised host. Using data from a large enterprise and on-host performance measurements, we demonstrate that PillarBox has minimal overhead and is practical for real-world systems.

**Keywords:** Security analytics, forward-secure logging, log integrity and secrecy, self-protecting alerting, secure chain of custody.

## 1 Introduction
Big data security analytics is a growing practice where organizations gather and analyze vast amounts of security data to detect systemic vulnerabilities and intrusions in real-time and retrospectively. Security Analytics Sources (SASs) are critical components in these systems, generating messages or alerts and transmitting them to a trusted server for analysis and action.

SASs include Host-based Intrusion Detection Systems (HIDS), anti-virus engines, syslog facilities, and other eventing interfaces that report to remote services like Security and Information Event Monitoring (SIEM) systems. Despite their importance, current SASs lack key protections against local attackers, who can undetectably suppress or tamper with SAS messages and discover intelligence about their configuration and outputs.

PillarBox addresses these challenges by securely relaying alerts from any SAS to a trusted analytics server, providing a secure host-to-server chain of custody with two key properties:
1. **Integrity:** Protects SAS messages against tampering or suppression, ensuring the server receives all messages generated prior to host compromise.
2. **Stealth:** Optionally conceals when and whether a SAS has generated alerts, preventing the leakage of intelligence about SAS instrumentation.

PillarBox buffers SAS messages on the host, which, counterintuitively, is more robust to message suppression and important for stealth.

## 2 Modeling and Design Principles

### 2.1 Threat Model
Our threat model considers three entities: the SAS/host, the attacker, and the trusted server. The attacker is modeled as a strong adversary capable of intercepting, modifying, and delaying messages, and achieving complete compromise of the host. In the self-protecting setting, the SAS generates alerts about the host itself during the attack. The critical window, illustrated in Figure 1, is the interval when intrusions are detectable and alerts can be secured before the attacker intercepts them.

### 2.2 Secure Alert Relaying via Buffering
A key element of PillarBox is the use of a host-side buffer, called the PillarBox Buffer (PBB). Alerts are secured in the PBB during the critical window, ensuring they are both integrity-protected and invisible to the attacker. Alerts either reliably reach the server or the server learns of a delivery failure.

## 3 Architecture and Integration

### 3.1 PillarBox Architecture
PillarBox integrates with existing SASs, such as syslog, to provide a secure and stealthy chain of custody. It uses standard forward-secure logging and activity-concealment techniques to achieve both integrity and stealth.

### 3.2 Integration with Syslog
We present a prototype end-to-end integration of PillarBox with syslog, a common SAS. This integration demonstrates the practicality and low overhead of PillarBox in real-world scenarios.

## 4 Technical Details

### 4.1 Buffer Construction
The PBB is designed to be of fixed size, ensuring that it does not reveal information to an attacker after host compromise. We address the challenge of overwriting by the attacker and ensure that transmissions resist traffic analysis.

### 4.2 Supporting Protocols
PillarBox uses forward-secure logging and activity-concealment protocols to protect SAS messages. These protocols ensure that even if the attacker compromises the host, previously generated SAS messages remain secure.

## 5 Experimental Evaluation

### 5.1 Attack Demonstration
We demonstrate a simple attack on existing SAS systems, showing how an attacker can suppress or tamper with SAS messages. We then evaluate PillarBox's effectiveness in securing alerts before an attacker can suppress them.

### 5.2 Performance Evaluation
Using alert-generation data from a large enterprise, we show that PillarBox can be parameterized practically with low performance overhead on hosts. For a common attack, such as the "Full-Nelson" privilege escalation, PillarBox secures the resulting SAS message before the attacker can shut down the system.

## 6 Related Work
We review related work in the field of security analytics and forward-secure logging, highlighting the unique contributions of PillarBox.

## 7 Conclusion
PillarBox is a practical, general tool that hardens the host-to-server chain of custody for any SAS, providing a secure foundation for security analytics systems. Future work will focus on further optimizing PillarBox and extending its capabilities to additional SASs.

For more technical details, please refer to the full version of this paper [4].

---

This revised version aims to improve the clarity, coherence, and professionalism of the original text.