title:PillarBox: Combating Next-Generation Malware with Fast Forward-Secure
Logging
author:Kevin D. Bowers and
Catherine Hart and
Ari Juels and
Nikos Triandopoulos
PillarBox: Combating Next-Generation Malware
with Fast Forward-Secure Logging
Kevin D. Bowers1, Catherine Hart2,(cid:2), Ari Juels3,(cid:2), and Nikos Triandopoulos1
1 RSA Laboratories, Cambridge, USA
2 Bell Canada, Vancouver, Canada
3 Cornell Tech (Jacobs Institute), New York, USA
Abstract. Security analytics is a catchall term for vulnerability assessment and
intrusion detection leveraging security logs from a wide array of Security Analyt-
ics Sources (SASs), which include ﬁrewalls, VPNs, and endpoint instrumentation.
Today, nearly all security analytics systems suffer from a lack of even basic data
protections. An adversary can eavesdrop on SAS outputs and advanced malware
can undetectably suppress or tamper with SAS messages to conceal attacks.
We introduce PillarBox, a tool that enforces integrity for SAS data even when
such data is buffered on a compromised host within an adversarially controlled
network. Additionally, PillarBox (optionally) offers stealth, concealing SAS data
and potentially even alerting rules on a compromised host. Using data from a
large enterprise and on-host performance measurements, we show experimentally
that PillarBox has minimal overhead and is practical for real-world systems.
Keywords: Security analytics, forward-secure logging, log integrity and secrecy,
self-protecting alerting, secure chain of custody.
1 Introduction
Big data security analytics is a popular term for the growing practice of organizations to
gather and analyze massive amounts of security data to detect systemic vulnerabilities
and intrusions, both in real-time and retrospectively. 44% of enterprise organizations
today identify their security operations as including big data security analytics [17].
To obtain data for such systems, organizations instrument a variety of hosts with a
range of Security Analytics Sources (SASs) (pronounced “sass”). By SAS here, we
mean generically a system that generates messages or alerts and transmits them to a
trusted server for analysis and action.
On a host, for instance, a SAS can be a Host-based Intrusion Detection System
(HIDS), an anti-virus engine, any software facility that writes to syslog, or generally
any eventing interface that reports events to a remote service, e.g., a Security and Infor-
mation Event Monitoring (SIEM) system. Further aﬁeld, a SAS could be a dedicated
Network Intrusion Detection System, or, in an embedded device, a feature that reports
physical tampering. A SAS could also be the reporting facility in a ﬁrewall or proxy.
(cid:2) Work performed while at RSA Laboratories.
A. Stavrou et al. (Eds.): RAID 2014, LNCS 8688, pp. 46–67, 2014.
© Springer International Publishing Switzerland 2014
PillarBox: Combating Next-Generation Malware
47
SASs play a central role in broad IT defense strategies based on security analytics,
furnishing the data to detect systemic vulnerabilities and intrusions. But a big data se-
curity analytics system is only as good as the SAS data it relies on. Worryingly, current-
generation SASs lack two key protections against a local attacker.
First, an attacker can undetectably suppress or tamper with SAS messages. Today’s
approach to securing SAS messages is to transmit them immediately to a trusted server.
By disrupting such transmissions, an attacker can create false alarms or prevent real
alarms from being received. Even a SAS with a secure host-to-server channel (such
as SSL/TLS) is vulnerable: An attacker can undetectably blackhole/suppress transmis-
sions until it fully compromises the host, and then break off SAS communications. (We
demonstrate the feasibility of such an attack in Section 5.) And logged or buffered SAS
messages are generally vulnerable to deletion or modiﬁcation after host compromise.
Consider, for instance, a rootkit Trojan that exploits a host vulnerability to achieve
privilege escalation on an enterprise host. A HIDS or anti-virus engine might immedi-
ately detect the suspicious privilege escalation and log an alert, “Privilege Escalation.”
An attacker can block transmission of this message and, once installed, the rootkit can
modify or remove critical logs stored locally (as many rootkits do today, e.g., ZeroAc-
cess, Infostealer.Shiz, Android.Bmaster).1 Because any buffered alert can be deleted,
and any transmission easily blocked, an enterprise server receiving the host’s logs will
fail to observe the alert and detect the rootkit.
A second problem with today’s SASs is that an attacker can discover intelligence
about their conﬁguration and outputs. By observing host emissions on a network prior
to compromise, an attacker can determine if and when a SAS is transmitting alerts and
potentially infer alert-generation rules. After host compromise, an attacker can observe
host instrumentation, e.g., HIDS rule sets, logs, buffered alerts, etc., to determine the
likelihood that its activities have been observed and learn how to evade future detection.
For enterprises facing sophisticated adversaries, e.g., Advanced Persistent Threats
(APTs) (e.g., Aurora, Stuxnet and Duqu) such shortcomings are critical. Threat-vector
intelligence is widely known to play a key role in defense of such attacks, and its leakage
to cause serious setbacks [15].
Thus an attacker’s ability to suppress alerts undetectably and obtain leaked alert in-
telligence in today’s SAS systems is a fundamental vulnerability in the host-to-server
chain of custody and a considerable ﬂaw in big data security analytics architectures.
PillarBox. As a solution to these challenges, we introduce a tool called PillarBox.2
PillarBox securely relays alerts from any SAS to a trusted analytics server. It creates a
secure host-to-server chain of custody with two key properties:
1. Integrity: PillarBox protects a host’s SAS messages against attacker tampering
or suppression. It guarantees that the server receives all messages generated prior
to host compromise (or detects a malicious system failure). PillarBox also aims to
secure real-time alert messages during host compromise faster than the attacker can
1 Many rootkits remove or obfuscate logs by modifying the binary of the logging facility itself.
2 A pillar box is a Royal Mail (U.K.) mailbox in the form of a red metal pillar. It provides a
secure and stealthy chain of custody, with integrity (only postal workers can open it), message
hiding (it’s opaque), and delivery assurance (if you trust the Royal Mail).
48
K.D. Bowers et al.
intercept them. After host compromise, PillarBox protects already generated SAS
messages, even if an attacker can suppress new ones.
2. Stealth: Optionally, PillarBox conceals when and whether a SAS has generated
alerts, helping prevent leakage of intelligence about SAS instrumentation. It does
so against an attacker that sniffs network trafﬁc before compromise and learns all
host state after compromise. Stealth can also involve making SAS alert-generation
rules vanish (be erased) during compromise.
Counterintuitively, PillarBox buffers SAS messages on the (vulnerable) host. As we
show, this strategy is better than pushing alerts instantly to the server for safekeeping:
It is equally fast, more robust to message suppression, and important for stealth.
Challenges. While PillarBox is useful for any type of SAS, the most stringent case is
that of self-protection, which means that the SAS messages to be protected regard the
very host producing the messages, potentially while the host is being compromised (as
with, e.g., a HIDS). Thus, integrity has two facets. First, a host’s buffered alerts must
receive ongoing integrity protection even after host compromise. Second, alerts must
be secured quickly—before an attacker can suppress or tamper with them as it com-
promises the host. We show experimentally that even in the most challenging case of
self-protection, PillarBox secures SAS alerts before a fast attacker can suppress them—
and even if the attacker has full knowledge of and explicitly targets PillarBox.
Stealth (optional in PillarBox) requires that the host’s internal data structures be in-
variant to SAS message generation, so that they reveal no information to an attacker
after host compromise. Message buffers must therefore be of ﬁxed size, making the
threat of overwriting by an attacker an important technical challenge. Additionally, to
protect against an adversary that controls the network, stealth requires that PillarBox
transmissions resist trafﬁc analysis, e.g., do not reveal message logging times. A ﬁnal
challenge in achieving stealth is the fact that an attacker that compromises a host learns
the host’s current PillarBox encryption keys.
Contributions. In this paper we highlight and demonstrate the transmission vulnera-
bility in security analytics systems and propose a solution, which we call PillarBox. In
designing PillarBox, we also specify the properties of integrity and stealth, which are
general and fundamental to the architecture of any security analytics system. We show
how to combine standard forward-secure logging and activity-concealment techniques
to simultaneously achieve both properties in the self-protection SAS mode of operation.
We present an architecture for PillarBox and a prototype end-to-end integration of
the tool with syslog, a common SAS. We show experimentally that PillarBox can se-
cure alerts in the challenging self-protection case before an attacker can suppress them
by killing PillarBox processes. Since the majority of host compromises involve priv-
ilege escalation, we also show that for a common attack (the “Full-Nelson” privilege
escalation attack), an alerter can be conﬁgured to detect the attack and the resulting
SAS message can be secured before the attacker can shut down PillarBox. Addition-
ally, we use alert-generation data from a large enterprise to conﬁrm that PillarBox can
be parameterized practically, with low performance overhead on hosts.
We emphasize that we do not address the design of SASs in this paper. How SAS
messages are generated and the content of messages are outside the scope of this paper.
PillarBox: Combating Next-Generation Malware
49
PillarBox is a practical, general tool to harden the host-to-server chain of custody for
any SAS, providing a secure foundation for security analytics systems.
Organization. Section 2 introduces PillarBox’s threat model and design principles,
while Section 3 describes its architecture and integration with a SAS. Section 4 gives
technical details on buffer construction and supporting protocols. Section 5 demon-
strates a simple attack on existing SAS systems and presents an experimental evalua-
tion of PillarBox. We review related work in Section 6 and conclude in Section 7. More
technical details, which have been omitted from this version due to space constraints,
can be found in the full version of this paper [4].
2 Modeling and Design Principles
We ﬁrst describe the threat model within which PillarBox operates. We then explain
how host-side buffering serves to secure SAS alerts within this model and follow with
details on the technical approaches in PillarBox to achieving integrity and stealth.
2.1 Threat Model
Our threat model considers three entities, the SAS or the host, the attacker, and the
server, which itself is a trusted entity, not vulnerable to attack. We model the attacker to
be the strongest possible adversary, one attacking a host in the self-protecting setting.
(Achieving security against this strong adversary ensures security against weaker ones,
e.g., those attacking only the network or a ﬁrewall whose SAS only reports on network
events.) Recall that in the self-protecting case, a SAS reports alerts about the host itself:
While the compromise is taking place, the SAS generates one or more alert messages
relevant to the ongoing attack and attempts to relay them to the server.
The adversary controls the network in the standard Dolev-Yao sense [6], i.e., the
attacker can intercept, modify, and delay messages at will. When its intrusion is com-
plete, the attacker achieves what we call a complete compromise of the host: It learns the
host’s complete state, including all memory contents—cryptographic keys, alert mes-
sages, etc.—and fully controls the host’s future behavior, including its SAS activity.
To violate integrity, the attacker’s goal is to compromise the host without: (1) any
unmodiﬁed alerts reaching the server and (2) the server learning of any modiﬁcation
or suppression of alerts by the attacker. The SAS can only start generating meaning-
ful alerts, of course, once the intrusion is in progress. After the attacker has achieved
complete compromise, it can shut down the SAS or tamper with its outputs. So a SAS
produces valid and trustworthy alerts only after intrusion initiation but prior to complete
compromise. We call the intervening time interval the critical window of an attack, as
illustrated in Figure 1. This is the interval of time when intrusions are detectable and
alerts can be secured (e.g., buffered in PillarBox) before the attacker intercepts them.
Conceptually, and in our experiments, we assume that the attacker has full knowledge
of the workings of the SAS, including any mechanisms protecting alerts en route to the
server, e.g., PillarBox. It fully exploits this knowledge to suppress or modify alerts. The
attacker doesn’t, however, know host state, e.g., cryptographic keys, prior to complete
50
K.D. Bowers et al.
(cid:2)(cid:1)
(cid:3)(cid:15)(cid:8)(cid:20)(cid:2)(cid:13)(cid:11)(cid:14)(cid:15)(cid:13)(cid:11)(cid:9)(cid:16)(cid:8)(cid:1)
(cid:3)(cid:8)(cid:15)(cid:9)(cid:13)(cid:7)(cid:1)
(cid:2)(cid:15)(cid:9)(cid:18)(cid:6)(cid:5)(cid:10)(cid:1)(cid:4)(cid:9)(cid:12)(cid:7)(cid:13)(cid:19)(cid:1)
(cid:3)(cid:13)(cid:16)(cid:17)(cid:20)(cid:2)(cid:13)(cid:11)(cid:14)(cid:15)(cid:13)(cid:11)(cid:9)(cid:16)(cid:8)(cid:1)
(cid:3)(cid:8)(cid:15)(cid:9)(cid:13)(cid:7)(cid:1)
time
(cid:2)(cid:1)
compromise 
initiated 
SAS generates 
alerts 
compromise in progress 
com
ess 
complete 
compromise 
(disabled SAS) 
host compromised 
Fig. 1. Event timeline of host compromise
compromise nor does it know the detection rules (behavioral signatures) used by the
SAS, i.e., the precise conditions leading to alert generation.
To violate stealth, the attacker tries to learn information about SAS rules and actions,
e.g., if the SAS has issued alerts during an attack, by making adaptive use of the network
and of post-compromise host state, e.g., PillarBox’s buffer. SAS detection rules can also
be used to infer behavior, but are outside the scope of PillarBox. Vanishing rules (rules
that are deleted if they ever trigger an alert) can be used to protect against adversarial
rule discovery in the SAS. By analogy with cryptographic privacy deﬁnitions, a concise
deﬁnition of stealth is possible: An attacker violates stealth if, for any SAS detection
rule, it can distinguish between PillarBox instantiations with and without the rule.
2.2 Secure Alert Relaying via Buffering
A key element in our design is the use of a host-side PillarBox buffer, for brevity called
the PBB, where alerts are secured. The objective is to secure alerts in the PBB during the
critical window, as shown in Figure 2. Once in the PBB, alert messages are protected
in two senses: They are both integrity-protected and “invisible” to the attacker, i.e.,
they support systemic stealth. (Informally, the PBB serves as a “lockbox.”) Also, as we
explain, either alerts reliably reach the server, or the server learns of a delivery failure.
(cid:13)(cid:7)(cid:12)(cid:22)(cid:7)(cid:17)(cid:10)(cid:1)
(cid:25)(cid:2)(cid:26)(cid:1)
(cid:13)(cid:7)(cid:12)(cid:22)(cid:7)(cid:17)(cid:10)(cid:1)
(cid:25)(cid:3)(cid:26)(cid:1)
Host 
Host 
(cid:8)(cid:2)(cid:4)(cid:3)(cid:5)(cid:6)(cid:7)(cid:9)(cid:1)
(cid:5)(cid:3)(cid:3)(cid:1)
(cid:6)(cid:2)(cid:6)(cid:1)
(cid:5)(cid:17)(cid:10)(cid:24)(cid:8)(cid:15)(cid:13)(cid:16)(cid:17)(cid:15)(cid:13)(cid:11)(cid:18)(cid:10)(cid:1)(cid:16)(cid:10)(cid:17)(cid:11)(cid:15)(cid:9)(cid:1)
(cid:5)(cid:3)(cid:3)(cid:1)
(cid:6)(cid:2)(cid:6)(cid:1)
(cid:4)(cid:17)(cid:11)(cid:20)(cid:8)(cid:7)(cid:12)(cid:1)(cid:22)(cid:11)(cid:14)(cid:9)(cid:15)(cid:22)(cid:1)
(cid:25)(cid:4)(cid:26)(cid:1)
(cid:8)(cid:2)(cid:4)(cid:3)(cid:5)(cid:6)(cid:7)(cid:9)(cid:1)
Host 
(cid:6)(cid:2)(cid:6)(cid:1)
(cid:13)(cid:7)(cid:12)(cid:22)(cid:7)(cid:17)(cid:10)(cid:1)