the credit bound adjustments if a communication has not
been classiﬁed by the receiver after T .
However, we ﬁnd that the path-based balance adjustment
scheme makes Ostra vulnerable to a combination of re-regi-
-stration attack and attack edge churn. We will discuss this
in the next two subsections.
6.1.1 Temporal User Targeting Attacks on Ostra
Attack scenario: Let us suppose that on the social net-
work, a malicious node x is connected to a honest node y
which is then connected to a honest node z. Also, let us sup-
pose that x wants to send some unwanted communication
to z and Ostra ﬁnds the path: x → y → z. If z marks the
communication as unwanted, the credit balance of both edge
(x, y) and edge (y, z) will be reduced by one. Thus, if the
victim z has less edges compared to the number of attack
edges owned by the attacker, a user targeting attack be-
comes practical. An attacker controlling a number of Sybils
can successively send unwanted traﬃc to z. As a result, all
edges of z will be exhausted within a short period of time,
and z is no longer able to receive any communication from
other honest users. We note that this attack is practical
even if the system considers a decay factor d, since not only
edges of the target, but also attack edges, will rejuvenate
after some time. Also, even if the target choose to forgive
the debt on one of his/her edges, since the attacker has more
attack edges than the total number of edges owned by the
victim user/target, the attacker is still able to send traﬃc
to the target via an available attack edge, thus making the
target unable to receive communication again.
Even if the target has more edges than the number of
attack edges, this attack is still practical by letting the at-
tacker leverage re-registration and attack edge churn. A
typical attack model is that at the end of each day, the at-
tacker could revoke certain fraction of invalid attack edges
(with balance below a threshold), and replace with new at-
tack edges, without changing the Sybil nodes. The attacker
might also choose to revoke old Sybil identities associated
with these invalid attack edges, and register new Sybil iden-
tities and establish new attack edges. The current design of
Ostra simply assigns an initial balance B = 0 and the same
L and U for all edges, including new attack edges. Thus,
even if the number of attack edges at each time instant is
bounded, the attacker is able to dynamically exploit attack
edge churn to obtain new attack edge resources, and contin-
uously send unwanted traﬃc to the target. As a result, all
edges of the target will be exhausted over time.
Figure 4: The lookup performance of Persea de-
grades with time (with Facebook interaction data
Nh = 46952, g = 2000) under our attack edge churn
model (δ = 0.5). As time evolves, attackers gain ac-
cess to a larger chunk of the ID space, resulting in
lower lookup success rate.
We ﬁnd that the security guarantees oﬀered by Persea
signiﬁcantly degrade with time. This is because the system
model in Persea does not allow honest entities to revoke the
ID space they assigned to a trusted contact when the trust
relationship is deleted.
Thus, as time evolves, the attacker would take control of
an increasing fraction of the ID space in the system. This
directly allows the adversary to exert greater control over
the lookup process. In particular, as the fraction of the ID
space controlled by an attacker increases, the probability
than an attacker is able to intercept all of the redundant
lookups in Persea also increases.
Figure 4 shows the lookup success rate in the Persea DHT
over time, using the Facebook interaction dataset for g =
2, 000. We can see the degradation in lookup performance
over time. A lower value of p increases the required time
duration to degrade lookup performance to a desired level.
We used δ = 0.5 to model the fraction of users that never
establish attack edges with the adversary. These results vali-
date our attack observations, and motivate our key message:
system designers should explicitly consider system evolution
in their design.
6. EXPLOITING TEMPORAL DYNAMICS
IN OSTRA AND SUMUP
In this section, we present temporal attacks against Sybil-
resilient applications such as Ostra and SumUp that allow
an adversary to deny service to honest users.
6.1 Ostra
Ostra [16] is a Sybil-resilient messaging system that lever-
ages trust relationships between users to thwart unwanted
communication. For each user, Ostra is able to bound the
rate of unwanted communication that a user can produce,
based on the number of trust relationships that the user has.
Ostra assumes that there is a trusted entity that observes all
user actions and associate them with user identities. The key
insight in Ostra is to associate the concept of credit balances
with trust relationships (edges). Each edge in the network
is associated with a credit balance B, and a balance range
[L, U ]. If the sender x wants to send some communication to
a friend y, Ostra issues a speciﬁc token for this communica-
tion and the edge (x, y)’s L (from the sender’s perspective) is
510152025300.40.50.60.70.80.91TimestampSuccess Rate  P=1P=0.8812Figure 5: Temporal user targeting attacks on Ostra, (a) without attack edge churn, when the target has less
edges than the number of attack edges, and (b) with attack edge churn, when the target has more edges than
the number of attack edges. We observe that the target user is eventually unable to receive communication
from other honest users.
Attack evaluation: We simulate Ostra protocol on a syn-
thetic network structure generated by Preferential Attach-
ment (PA) [5] model, and set L = −3 and d = 10% per day,
as speciﬁed in Ostra. The synthetic network contains 1,000
honest nodes, 100 Sybil nodes, and 40 attack edges. We use
synthetic graphs because we want to explore the behaviors
of the attack under diﬀerent parameter settings. For a ran-
domly selected honest target, we randomly pick a Sybil node
and let it send a message to the target. Figure 5 shows the
fraction of available edges of the target versus the number
of messages sent by the Sybils. Speciﬁcally, Figure 5 (a)
shows the scenario when the target has less edges than the
number of attack edges. We observe that as the Sybils send
more messages, the fraction of available edges, i.e. capability
to receive communication, decreases towards zero. In prac-
tice, this attack can be completed within a short period of
time. Furthermore, the attacker can continuously monitor
the credit of edges of the target, so that if one or some edges
become valid again after several days due to the decay fac-
tor d, the attacker can immediately send traﬃc to the target
and hence make these edges invalid again. We note that this
type of attack can be completed without leveraging attack
edge churn.
Figure 5 (b) shows the scenario when the target has more
edges than the number of attack edges. In such scenario, the
attacker is not able to exhaust all edges of the target within
one round. Thus, the attacker needs to leverage attack edge
churn w/o re-registration and continuously performs the at-
tack for multiple rounds. In each round, the attacker ran-
domly selects a Sybil and sends a message to the target, until
all attack edges or all edges of the target become invalid. If
all attack edges become invalid, the attacker leverages the
attack edge churn and obtains some new attack edges.
In our experiments, we set δ = 50% and p = 0.1. We
also model the case that if the target ﬁnds all of his/her
edges become invalid, he/she will randomly pick a neighbor
and forgive the debt on the corresponding edge. The attack
ends if all edges of the target become invalid. In Figure 5
(b), we observe that by leveraging attack edge churn, the
attacker is able to continuously exhaust edge resources of the
target via multiple rounds (separated by red vertical lines),
even if some edges of the target become valid again due to
decay factor (the jumps on the ﬁgure). Thus, the attacker
can signiﬁcantly reduce the rate of communication between
honest users by perform this type of temporal attacks.
6.1.2 Temporal Edge Targeting Attacks on Ostra
Attack scenario: In addition to attacking a randomly se-
lected target, the attacker can also target at certain edges in
the honest region, by continuously sending unwanted traf-
ﬁc across these edges and eventually exhausting the credit
on them. As a result, the honest region will be partitioned
into two communities, such that users in one community
will not be able to send traﬃc to users in the other commu-
nity. Researchers have found that honest users tend to form
multiple small communities [17] driven by diﬀerent purposes
(e.g., geographical location, education and career). This
multi-community structure prohibits the existence of a giant
community component and hence makes the honest region
vulnerable to temporal edge targeting attacks.
Like the temporal user targeting attacks,
if the count
of targeted edges is less than the number of attack edges
owned by the attacker, the attacker can quickly exhaust the
credit on them thus making these edges invalid. Even if the
count of targeted edges is greater than the number of attack
edges, the attacker is still able to leverage attack edge churn
w/o re-registration to exhaust the credit on these edges over
time.
Attack evaluation: To evaluate this attack, we synthesize
the network structure by generating two honest regions (500
nodes for each) from PA model and connect them with cer-
tain number of edges. We then generate two Sybil regions
(100 nodes for each ) and connect each to a honest region
with the same number of attack edges. We set the param-
eters in Ostra the same as in 6.1.1. Denote the two Sybil
regions as Sybil region A and Sybil region B. To perform
the attack, we randomly pick a Sybil in each Sybil region,
and send a message from Sybil region A to Sybil region B.
In our experiments, we vary the number of internal edges
that link the two honest regions, and the total number of
attack edges owned by the attacker, to understand diﬀerent
behaviors. Figure 5 shows the fraction of available internal
edges versus the number of messages passed across the net-
work. Speciﬁcally, Figure 5 (a) shows the scenario when the
number of internal edges is less than the number of attack
edges divided by two. We observe that as more messages
pass between Sybils in the two regions, the fraction of avail-
able (valid) internal edges decreases towards zero.
Figure 6 (b) shows the scenario when the number of inter-
nal edges is greater than the number of attack edges divided
Number of messages020406080100Fraction of available edges00.20.40.60.81Number of messages050100150200250Fraction of available edges00.20.40.60.81813Figure 6:
Temporal edge targeting attacks on Ostra, (a) without attack edge churn, when the number of
targeted edges is less than the number of attack edges, and (b) with attack edge churn, when the number
of targeted edges is greater than the number of attack edges. We observe that honest users are eventually
unable to communicate across the targeted edges.
by two. Similarly to user targeting scenario, the attacker is
able to exhaust the resources of the internal edges over time
by leveraging attack edge churn.
6.2 SumUp
SumUp [27] is a Sybil-resilient voting system that lever-
ages trust network among users. SumUp assumes that there
is one trusted vote collector that is far from the Sybil re-
gion. In the ticket distribution process, the vote collector
distributes C max tickets across the network in a breadth-
ﬁrst manner. Each internal node aggregates the tickets it
receives, and consumes one ticket, and distributes the re-
maining tickets evenly to the neighbors at the next level.
The capacity of an edge is the number of tickets transferred
on this edge plus one. When the ticket distribution com-
pletes, nodes that consumed a ticket before become entry
points. In the vote collection process, each voter needs to
vote for the product via an entry point. SumUp computes
the set of max-ﬂow paths from the vote collector to all vot-
ers, and the votes will be collected back to the vote collector
via the computed paths. Hence, each object can receive
C max votes in maximum.
To limit the number of bogus votes, the vote collector as-
signs a penalty value for each link. Once the vote collector
identiﬁes a bogus vote, all the links on the path to the voter
will be penalized. The penalty grows if a voter continuously
sends bogus votes, and the link will be eliminated if the
penalty grows above a threshold. In the further ticket dis-
tribution process, links with high penalty will be distributed
fewer tickets.
6.2.1 Temporal Attacks on SumUp
SumUp assumes that the number of the attack edges is
bounded. However, after examination, we ﬁnd that the se-
curity guarantee of SumUp heavily relies on another under-
lying assumption, which is that the vote collector is placed
far away from the attack edges. The system does not make
it clear how to select the location of the vote collector. The
attacker can exploit natural churn of the honest region and
place the attack edges close to the vote collector.
If this
happens, a large number of Sybil nodes will become entry
points. Since each user needs to vote for a product via an
entry point, a large fraction of votes collected will be bogus
votes, which breaks the system design goal.
Even if the vote collector is placed far away from attack
edges, like Ostra, the attacker can still perform a combina-
tion of re-registration and attack edge churn. The observa-
tion is that over time, the attacker can re-register Sybil iden-
tities and make bogus votes. Since honest edges are mostly
located in the lower level of graph, i.e. close to the vote
collector, after those bogus votes are successfully marked by
the vote collector , the penalty of honest edges on the path
will also be raised. Thus, over time, the penalty of targeted
honest edges will exceed the threshold value, eliminating
the edges. This combined attack can target a speciﬁc voter,
eventually exhausting the available edges of this voter and
makes him/her unable to vote.
In this section, we discussed and demonstrated temporal
vulnerabilities of two Sybil resilient applications: Ostra and
SumUp. Our attacks highlight the importance of consid-
ering temporal system dynamics in the design and security
analysis of social Sybil defense mechanisms.
7. COUNTERMEASURES AND DISCUSS-
-ION
In this section, we ﬁrst discuss how economic considera-
tions could impact the attacks described in this paper. We
then consider possible countermeasures for temporal attacks
on diﬀerent Sybil defense systems. Finally, we brieﬂy sketch
out a general method that aims to detect anomalous churn
in the Sybil region.