We model TLS setup (SC,tls
cσ ) and its cost SC,tlsr
resumption (P RE
up a completely new TLS connection SC,tlsn
+ (1 − P RE
) as the probability of TLS
, or the cost of setting
cσ
cσ
cσ )SC,tlsn
SC,tls
cσ = P RE
cσ SC,tlsr
(3)
cσ
cσ
cσ
:
σ
cσ
cσ
cσ = P T F O
. Thus, SC,tlsr
σ
is 4Rcσ + Scpun
For simplicity, we assume TCP fast open and TLS resumption
have the same timeout, so P RE
is
2Rcσ +Scpur
(1 each for TLS negotiation and handshake) and
SC,tlsn
(1 for TCP, 1 for TLS negotiation,
cσ
and 2 for TLS handshake). We set Scpun
at 25.8 ms and Scpur
is at 1.2 ms(Table VI, with and without CA validation). We
estimate P C
from our timeout window and
trace analysis (Figures 7 and 8).
cσ and P T F O
cσ, P RE
To compute end-to-end latency (stub-to-authoritative, Lsa),
we combine stub-to-recursive latency (Lsr) with behavior at
the recursive resolver. For a cache hit (probability P N
r ) the
recursive resolver can reply immediately. Otherwise it will
cσ
σ
σ
182182
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:44 UTC from IEEE Xplore.  Restrictions apply. 
s
n
o
i
t
c
a
r
f
t
i
h
n
o
i
t
c
e
n
n
o
c
 1
 0.8
 0.6
 0.4
 0.2
 0
 0
DNSChanger/all-to-all
cns[1-4].lax1
DITL/B Root
 5
 10
 15
 20
 25
time-out window (hours)
s
n
o
i
t
c
a
r
f
t
i
h
n
o
i
t
c
e
n
n
o
c
 1
DNSChanger/all-to-all
 0.8
 0.6
 0.4
 0.2
 0
cns [1-4]
.lax1
DITL BRoot
 0
 50  100  150  200  250  300  350  400  450  500
time-out window (seconds)
)
s
m
(
y
c
n
e
a
t
l
 450
 400
 350
 300
 250
 200
 150
 100
 50
 0
s-r:
r-a:
s-r RTT (in ms)
5
0
1
0
2
0
4
0
8
(a)
(b)
(c)
(d)
(e)
(f)
4
1
.
2
7
3
4
3
.
1
4
2
.
1
3
2
0
0
.
1
7
1
0
0
.
1
6
1
.
1
9
0
.
1
5
0
.
1
0
1
0
0
.
1
6
0
0
0
3
0
0
0
.
.
1
1
0
4
.
1
3
3
.
1
6
0
.
1
9
0
1
1
.
1
.
1
3
1
4
1
.
.
1
1
7
2
.
1
2
2
.
9
1
1
.
1
.
2
8
5
.
2
4
7
.
2
3
8
.
2
udp
tcp
tls
. . . . udp . . . .
tcp
tls
....tcp....
tls
tls
Fig. 7: Median client-side connection
hit fractions with quartiles with larger
time-out windows
Fig. 8: Median client-side connection
hit fractions with quartiles.
Fig. 9: End-to-end-performance as a
function of protocol choice and stub-
to-resolver RTT.
make several (N Q
taking Lra) to ﬁll its cache:
r ) queries to authoritative resolvers (each
costs: TLS to recursive (with UDP to authoritative), is 15.5%
slower than UDP.
Lsa = Lsr + (1 − P N
r )N Q
r Lra
(4)
sr = P T F O
ra = P T F O
We determine N Q
Where Lsr and Lra follow from Equation 1. We model
recursive with the Level 3 data and authoritative as B-Root.
With our recommended timeouts (60 s and 20 s), we get P C
sr =
0.72 and P C
ra = 0.24. We assume TCP fast open and TLS
resumption last 2 hours at recursive (P RE
sr = 0.9858)
and 7 h at authoritative (P RE
ra = 0.8). Prior studies of
recursive resolvers suggest P N
ranges from 71% to 89% [37].
r
r by observing how many queries BIND-
9.9.3 requires to process the Alexa top-1000 sites. We repeat
this experiment 10 times, starting each run with a cold cache,
which leads to N Q
r = 7.24 (standard deviation 0.036, includes
0.09 due to query retries). We round N Q
to 7 in our analysis
r
of estimated latency. Although this value seems high, the
data shows many incoming queries require multiple outgoing
queries to support DNSSEC, and due to the use of content-
delivery networks that perform DNS-based redirection.
Scenarios: With this model we can quickly compare long-
term average performance for different scenarios. Figure 9
compares six protocol combinations (each group of bars) We
consider Rsr = 5 ms and Rsr = 20 ms suitable for a good
U.S. or European ISP, but we report stub-to-recursive RTTs
from 5 to 80 ms.
For the local resolver, the analysis shows that use of TCP
and TLS to the local resolver adds moderate latency: current
DNS has mean of 61 ms, and TCP is the same, and TLS
is only 5.4% slower with UDP upstream. Second, we see
that use of connections between recursive and authoritative
is more expensive: with TLS stub-to-recursive, adding TCP
to the authoritative is 19% slower and adding TLS to the
authoritative more than 180% slower. This cost follows be-
cause a single stub-to-recursive query can lead to multiple
recursive-to-authoritative queries, at large RTTs with a lower
connection-hit fraction. However this analysis is pessimistic;
the expected values underestimate possible locality in those
queries.
For a third-party resolver (Rsr = 20 ms), the trends are
similar but the larger latency to the recursive resolver raises
183183
VII. RELATED WORK
Our work draws on prior work in transport protocols and
more recent work in DNS security and privacy.
VII-A Siblings: DNSSEC and DANE/TLSA
DNS Security Extensions (DNSSEC) uses public-key cryp-
tography to ensure the integrity and origin of DNS replies [4].
Since the 2010 signature of the root zone, it has provided a
root of trust for DNS. DNS-based Authentication of Named
Entities for TLS (DANE/TLSA) allows DNS to serve as a root
of trust for TLS certiﬁcates [33]. Our work complements these
protocols, addressing the related area of privacy.
Although DNSSEC protects the integrity and origin of
requests, it does not address query privacy. We propose TLS to
support this privacy, complementing DNSSEC. Although not
our primary goal, TLS also protects against some attacks such
as those that exploit fragmentation; we discuss these below.
DANE/TLSA’s trust model is unrelated to T-DNS’s goal of
privacy. See § III-B1 for how they interact.
VII-B DNSCrypt and DNSCurve
OpenDNS has offered elliptic-curve cryptography to encrypt
and authenticate DNS packets between stub and recursive
resolvers (DNSCrypt [57]) and recursive resolvers and author-
itative servers (DNSCurve [20]). We ﬁrst observe that these
protocols address only privacy, not denial-of-service nor limits
to reply size.
These protocols address the same privacy goal as our use
of TLS. While ECC is established cryptography, above this
they use a new approach to securing the channel and a new
DNS message format. We instead reuse existing DNS message
format and standard TLS and TCP. Although DNSCrypt
and DNSCurve are attractive choices, we believe TLS’ run-
time negotiation of cryptographic protocol is important for
long-term deployment. We also see signiﬁcant advantage in
adopting existing standards with robust
libraries and opti-
mizations (such as TLS resumption) rather than designing
bespoke protocols for our new application. In addition, while
TLS implementations have reported recent ﬂaws, our view is
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:44 UTC from IEEE Xplore.  Restrictions apply. 
that common libraries beneﬁt from much greater scrutiny than
new protocols. Finally, DNSCurve’s mandate that the server’s
key be its hostname cleverly avoids one RTT in setup, but it
shifts that burden into the DNS, potentially adding millions of
nameserver records should each zone require a unique key.
DNSCrypt suggests deployment with a proxy resolver on
the end-user’s computer. We also use proxies for testing,
but we have prototyped integration with existing servers, a
necessity for broad deployment.
§ VI-A, and features in Table II.