### Modeling TLS Setup and Resumption Costs

We model the cost of setting up a new TLS connection, denoted as \( S_{C,\text{tls}}^{n} \), and the cost of resuming a TLS session, denoted as \( S_{C,\text{tls}}^{r} \). The total cost of a TLS setup, \( S_{C,\text{tls}} \), is given by:
\[ S_{C,\text{tls}} = P_{\text{RE}} \cdot S_{C,\text{tls}}^{r} + (1 - P_{\text{RE}}) \cdot S_{C,\text{tls}}^{n} \]
where \( P_{\text{RE}} \) is the probability of TLS resumption.

For simplicity, we assume that TCP Fast Open (TFO) and TLS resumption have the same timeout. The cost of resuming a TLS session, \( S_{C,\text{tls}}^{r} \), is calculated as:
\[ S_{C,\text{tls}}^{r} = 4R_{c} + S_{\text{cpun}} \]
where \( R_{c} \) is the round-trip time (RTT) and \( S_{\text{cpun}} \) is the processing time for TFO, set at 25.8 ms. The cost of setting up a new TLS connection, \( S_{C,\text{tls}}^{n} \), is:
\[ S_{C,\text{tls}}^{n} = 2R_{c} + S_{\text{cpur}} \]
where \( S_{\text{cpur}} \) is the processing time for TLS negotiation and handshake, set at 1.2 ms (Table VI, with and without CA validation).

The probabilities \( P_{\text{C}} \), \( P_{\text{TF}} \), and \( P_{\text{RE}} \) are estimated from our timeout window and trace analysis (Figures 7 and 8).

### End-to-End Latency Calculation

To compute the end-to-end latency (stub-to-authoritative, \( L_{sa} \)), we combine the stub-to-recursive latency (\( L_{sr} \)) with the behavior at the recursive resolver. For a cache hit (probability \( P_{N}^{r} \)), the recursive resolver can reply immediately. Otherwise, it will make several queries (\( NQ_{r} \)) to authoritative resolvers, each taking \( L_{ra} \):
\[ L_{sa} = L_{sr} + (1 - P_{N}^{r}) \cdot NQ_{r} \cdot L_{ra} \]

Where \( L_{sr} \) and \( L_{ra} \) follow from Equation 1. We model the recursive resolver using Level 3 data and the authoritative server as B-Root. With our recommended timeouts (60 s and 20 s), we get \( P_{C}^{sr} = 0.72 \) and \( P_{C}^{ra} = 0.24 \). We assume TFO and TLS resumption last 2 hours at the recursive resolver (\( P_{\text{RE}}^{sr} = 0.9858 \)) and 7 hours at the authoritative server (\( P_{\text{RE}}^{ra} = 0.8 \)).

Prior studies suggest \( P_{N}^{r} \) ranges from 71% to 89% [37]. We determine \( NQ_{r} \) by observing how many queries BIND-9.9.3 requires to process the Alexa top-1000 sites. Repeating this experiment 10 times, starting each run with a cold cache, leads to \( NQ_{r} = 7.24 \) (standard deviation 0.036, including 0.09 due to query retries). We round \( NQ_{r} \) to 7 in our analysis of estimated latency. This value seems high, but the data shows that many incoming queries require multiple outgoing queries to support DNSSEC and content-delivery networks that perform DNS-based redirection.

### Performance Scenarios

With this model, we can quickly compare long-term average performance for different scenarios. Figure 9 compares six protocol combinations (each group of bars). We consider \( R_{sr} = 5 \) ms and \( R_{sr} = 20 \) ms suitable for a good U.S. or European ISP, but we report stub-to-recursive RTTs from 5 to 80 ms.

For the local resolver, the analysis shows that using TCP and TLS adds moderate latency: current DNS has a mean of 61 ms, and TCP is the same, while TLS is only 5.4% slower with UDP upstream. Adding TCP to the authoritative is 19% slower, and adding TLS to the authoritative is more than 180% slower. This cost follows because a single stub-to-recursive query can lead to multiple recursive-to-authoritative queries, with large RTTs and a lower connection-hit fraction. However, this analysis is pessimistic; the expected values underestimate possible locality in those queries.

For a third-party resolver (\( R_{sr} = 20 \) ms), the trends are similar, but the larger latency to the recursive resolver raises the overall delay.

### Related Work

Our work draws on prior research in transport protocols and recent advancements in DNS security and privacy.

#### DNSSEC and DANE/TLSA

DNS Security Extensions (DNSSEC) use public-key cryptography to ensure the integrity and origin of DNS replies [4]. Since the 2010 signature of the root zone, it has provided a root of trust for DNS. DNS-based Authentication of Named Entities for TLS (DANE/TLSA) allows DNS to serve as a root of trust for TLS certificates [33]. Our work complements these protocols by addressing privacy.

While DNSSEC protects the integrity and origin of requests, it does not address query privacy. We propose TLS to support this privacy, complementing DNSSEC. Although not our primary goal, TLS also protects against some attacks, such as those exploiting fragmentation.

DANE/TLSA’s trust model is unrelated to T-DNS’s goal of privacy. See § III-B1 for how they interact.

#### DNSCrypt and DNSCurve

OpenDNS offers elliptic-curve cryptography to encrypt and authenticate DNS packets between stub and recursive resolvers (DNSCrypt [57]) and recursive resolvers and authoritative servers (DNSCurve [20]). These protocols address only privacy, not denial-of-service nor limits to reply size.

These protocols aim for the same privacy goal as our use of TLS. While ECC is established cryptography, they use a new approach to securing the channel and a new DNS message format. We instead reuse existing DNS message formats and standard TLS and TCP. Although DNSCrypt and DNSCurve are attractive choices, we believe TLS’ runtime negotiation of cryptographic protocols is important for long-term deployment. Adopting existing standards with robust libraries and optimizations (such as TLS resumption) is advantageous over designing bespoke protocols for new applications. Additionally, while TLS implementations have reported recent flaws, common libraries benefit from much greater scrutiny than new protocols. Finally, DNSCurve’s requirement that the server’s key be its hostname cleverly avoids one RTT in setup, but it shifts that burden into the DNS, potentially adding millions of nameserver records should each zone require a unique key.

DNSCrypt suggests deploying with a proxy resolver on the end-user’s computer. We also use proxies for testing, but we have prototyped integration with existing servers, a necessity for broad deployment. See § VI-A and features in Table II.