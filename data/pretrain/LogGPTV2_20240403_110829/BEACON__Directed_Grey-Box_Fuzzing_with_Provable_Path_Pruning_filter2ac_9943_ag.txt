We thank the anonymous reviewers for their insightful
comments and opinions for improving this work. Rongxin
Wu is supported by the Leading-edge Technology Pro-
gram of Jiangsu Natural Science Foundation (BK20202001)
and NSFC61902329. Other authors are supported by the
RGC16206517 and ITS/440/18FP grants from the Hong Kong
Research Grant Council, and the donations from Microsoft Do-
nation and Huawei. Qingkai Shi is the corresponding author.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:37:18 UTC from IEEE Xplore.  Restrictions apply. 
48
REFERENCES
[1] M. B¨ohme, V.-T. Pham, M.-D. Nguyen, and A. Roychoudhury,
“Directed greybox fuzzing,” in Proceedings of the 2017 ACM SIGSAC
Conference on Computer and Communications Security, ser. CCS ’17.
New York, NY, USA: ACM, 2017, pp. 2329–2344. [Online]. Available:
http://doi.acm.org/10.1145/3133956.3134020
[2] H. Chen, Y. Xue, Y. Li, B. Chen, X. Xie, X. Wu, and Y. Liu, “Hawkeye:
Towards a desired directed grey-box fuzzer,” in Proceedings of the 2018
ACM SIGSAC Conference on Computer and Communications Security,
ser. CCS ’18. New York, NY, USA: ACM, 2018, pp. 2095–2108.
[Online]. Available: http://doi.acm.org/10.1145/3243734.3243849
[3] “Fuzzguard: Filtering out unreachable inputs
in directed grey-
box fuzzing through deep learning,” in 29th USENIX Security
Symposium (USENIX Security 20). Boston, MA: USENIX Association,
Aug. 2020.
[Online]. Available: https://www.usenix.org/conference/
usenixsecurity20/presentation/zong
[4] P. Godefroid, M. Y. Levin, and D. Molnar, “Automated whitebox fuzz
testing,” November 2008. [Online]. Available: https://www.microsoft.
com/en-us/research/publication/automated-whitebox-fuzz-testing/
[5] P. Godefroid, N. Klarlund, and K. Sen, “Dart: Directed automated
random testing,” in Proceedings of the 2005 ACM SIGPLAN Conference
on Programming Language Design and Implementation, ser. PLDI ’05.
New York, NY, USA: ACM, 2005, pp. 213–223. [Online]. Available:
http://doi.acm.org/10.1145/1065010.1065036
[6] “Oss-fuzz
report,”
https://security.googleblog.com/2018/11/
a-new-chapter-for-oss-fuzz.html, 2018, accessed: 2018-11-06.
[7] J. Xuan, X. Xie, and M. Monperrus, “Crash reproduction via
test case mutation: Let existing test cases help,” in Proceedings
of
the 2015 10th Joint Meeting on Foundations of Software
Engineering, ser. ESEC/FSE 2015. New York, NY, USA: Association
for Computing Machinery, 2015, p. 910–913. [Online]. Available:
https://doi.org/10.1145/2786805.2803206
[8] M. Soltani, A. Panichella, and A. Van Deursen, “Search-based crash
reproduction and its impact on debugging,” IEEE Transactions on
Software Engineering, pp. 1–1, 2018.
[9] W. Enck, P. Gilbert, S. Han, V. Tendulkar, B.-G. Chun, L. P. Cox,
J. Jung, P. McDaniel, and A. N. Sheth, “Taintdroid: An information-ﬂow
tracking system for realtime privacy monitoring on smartphones,” ACM
Trans. Comput. Syst., vol. 32, no. 2, Jun. 2014. [Online]. Available:
https://doi.org/10.1145/2619091
[10] I. Haller, A. Slowinska, M. Neugschwandtner, and H. Bos, “Dowsing
for overﬂows: A guided fuzzer to ﬁnd buffer boundary violations,” in
Proceedings of the 22Nd USENIX Conference on Security, ser. SEC’13.
Berkeley, CA, USA: USENIX Association, 2013, pp. 49–64. [Online].
Available: http://dl.acm.org/citation.cfm?id=2534766.2534772
[11] P. D. Marinescu and C. Cadar, “Katch: High-coverage testing of
software patches,” in Proceedings of the 2013 9th Joint Meeting on
Foundations of Software Engineering, ser. ESEC/FSE 2013. New
York, NY, USA: Association for Computing Machinery, 2013, p.
235–245. [Online]. Available: https://doi.org/10.1145/2491411.2491438
[12] “Aﬂ: american fuzzy lop,” http://lcamtuf.coredump.cx/aﬂ/, 2013, ac-
cessed: 2013.
[13] “MOPT: Optimized mutation scheduling for fuzzers,” in 28th USENIX
Security Symposium (USENIX Security 19).
Santa Clara, CA:
USENIX Association, 2019. [Online]. Available: https://www.usenix.
org/conference/usenixsecurity19/presentation/lyu
[14] W. You, P. Zong, K. Chen, X. Wang, X. Liao, P. Bian, and B. Liang,
“Semfuzz: Semantics-based automatic generation of proof-of-concept
exploits,” in Proceedings of the 2017 ACM SIGSAC Conference on
Computer and Communications Security. ACM, 2017, pp. 2139–2154.
[15] S. ¨Osterlund, K. Razavi, H. Bos, and C. Giuffrida, “Parmesan: Sanitizer-
guided greybox fuzzing,” in 29th USENIX Security Symposium
(USENIX Security 20). USENIX Association, Aug. 2020, pp.
2289–2306.
[Online]. Available: https://www.usenix.org/conference/
usenixsecurity20/presentation/osterlund
Bruening,
[16] K.
D.
checker,”
https://www.usenix.org/conference/usenixfederatedconferencesweek/
addresssanitizer-fast-address-sanity-checker
and
sanity
[Online]. Available:
in USENIX ATC 2012,
Serebryany,
Vyukov,
“Addresssanitizer:
A
2012.
Potapenko,
address
[17] Y. Chen, P. Li, J. Xu, S. Guo, R. Zhou, Y. Zhang, T. Wei, and
towards bug-driven hybrid testing,” CoRR, vol.
L. Lu, “SAVIOR:
abs/1906.07327, 2019. [Online]. Available: http://arxiv.org/abs/1906.
07327
fast
D.
A.
[18] F. Long, S. Sidiroglou-Douskos, D. Kim, and M. Rinard, “Sound
input ﬁlter generation for integer overﬂow errors,” in Proceedings
of
the 41st ACM SIGPLAN-SIGACT Symposium on Principles of
Programming Languages, ser. POPL ’14. New York, NY, USA:
Association for Computing Machinery, 2014, p. 439–452. [Online].
Available: https://doi.org/10.1145/2535838.2535888
[19] R. Manevich, M. Sridharan, S. Adams, M. Das, and Z. Yang,
“Pse: Explaining program failures via postmortem static analysis,”
in Proceedings of
the 12th ACM SIGSOFT Twelfth International
Symposium on Foundations of Software Engineering, ser. SIGSOFT
’04/FSE-12. New York, NY, USA: Association for Computing
Machinery, 2004, p. 63–72. [Online]. Available: https://doi.org/10.1145/
1029894.1029907
[20] S. Blackshear, B.-Y. E. Chang, and M. Sridharan, “Thresher:
Precise refutations for heap reachability,” in Proceedings of the 34th
ACM SIGPLAN Conference on Programming Language Design and
Implementation, ser. PLDI ’13. New York, NY, USA: Association
for Computing Machinery, 2013, p. 275–286. [Online]. Available:
https://doi.org/10.1145/2491956.2462186
[21] S. Chandra, S. J. Fink, and M. Sridharan, “Snugglebug: A powerful
approach to weakest preconditions,” in Proceedings of
the 30th
ACM SIGPLAN Conference on Programming Language Design and
Implementation, ser. PLDI ’09. New York, NY, USA: Association
for Computing Machinery, 2009, p. 363–374. [Online]. Available:
https://doi.org/10.1145/1542476.1542517
[22] E. W. Dijkstra, “Guarded commands, nondeterminacy and formal
derivation of programs,” Commun. ACM, vol. 18, no. 8, p. 453–457,
Aug. 1975. [Online]. Available: https://doi.org/10.1145/360933.360975
[23] C. Urban and A. Min´e, “Proving guarantee and recurrence temporal
properties by abstract interpretation,” in Veriﬁcation, Model Checking,
and Abstract Interpretation, D. D’Souza, A. Lal, and K. G. Larsen, Eds.
Berlin, Heidelberg: Springer Berlin Heidelberg, 2015, pp. 190–208.
[24] K. Ferles, V. W¨ustholz, M. Christakis, and I. Dillig, “Failure-directed
program trimming,” in Proceedings of the 2017 11th Joint Meeting
on Foundations of Software Engineering, ser. ESEC/FSE 2017. New
York, NY, USA: Association for Computing Machinery, 2017, p.
174–185. [Online]. Available: https://doi.org/10.1145/3106237.3106249
[25] G. Singh, M. P¨uschel, and M. Vechev, “Fast polyhedra abstract
domain,” SIGPLAN Not., vol. 52, no. 1, p. 46–59, Jan. 2017. [Online].
Available: https://doi.org/10.1145/3093333.3009885
[26] T. A. Henzinger, R. Jhala, R. Majumdar, and G. Sutre, “Lazy
abstraction,” SIGPLAN Not., vol. 37, no. 1, p. 58–70, Jan. 2002.
[Online]. Available: https://doi.org/10.1145/565816.503279
[27] A. V. Thakur, “Symbolic abstraction: Algorithms and applications,”
Ph.D. dissertation, The University of Wisconsin-Madison, 2014.
[28] B. Blanchet, P. Cousot, R. Cousot, J. Feret, L. Mauborgne, A. Min´e,
D. Monniaux, and X. Rival, “A static analyzer for large safety-critical
software,” in Proceedings of the ACM SIGPLAN 2003 Conference on
Programming Language Design and Implementation, ser. PLDI ’03.
New York, NY, USA: Association for Computing Machinery, 2003, p.
196–207. [Online]. Available: https://doi.org/10.1145/781131.781153
[29] D. Wagner, J. S. Foster, E. A. Brewer, and A. Aiken, “A ﬁrst step towards
automated detection of buffer overrun vulnerabilities,” in IN NETWORK
AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM, 2000, pp. 3–
17.
[30] N. Dor, M. Rodeh, and M. Sagiv, “Cssv: Towards a realistic tool for
statically detecting all buffer overﬂows in c,” in Proceedings of the
ACM SIGPLAN 2003 Conference on Programming Language Design
and Implementation, ser. PLDI ’03. New York, NY, USA: Association
for Computing Machinery, 2003, p. 155–167. [Online]. Available:
https://doi.org/10.1145/781131.781149
[31] S. Sankaranarayanan, F. Ivanˇci´c, I. Shlyakhter, and A. Gupta, “Static
analysis in disjunctive numerical domains,” in Static Analysis, K. Yi,
Ed. Berlin, Heidelberg: Springer Berlin Heidelberg, 2006, pp. 3–17.
[32] P. Cousot and R. Cousot, “Static determination of dynamic properties
of programs,” in Proceedings of the 2nd International Symposium on
Programming, Paris, France. Dunod, 1976.
[33] A. Min´e, “The octagon abstract domain,” Higher-order and symbolic
computation, vol. 19, no. 1, pp. 31–100, 2006.
[34] P. Cousot and N. Halbwachs, “Automatic discovery of linear restraints
among variables of a program,” in Proceedings of the 5th ACM SIGACT-
SIGPLAN symposium on Principles of programming languages. ACM,
1978, pp. 84–96.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:37:18 UTC from IEEE Xplore.  Restrictions apply. 
49
[35] A. Min´e, “Tutorial on static inference of numeric invariants by
abstract interpretation,” Found. Trends Program. Lang., vol. 4, no. 3–4,
p. 120–372, Dec. 2017. [Online]. Available: https://doi.org/10.1561/
2500000034
[36] S. Sankaranarayanan, F. Ivanˇci´c, and A. Gupta, “Program analysis using
symbolic ranges,” in Static Analysis, H. R. Nielson and G. Fil´e, Eds.
Berlin, Heidelberg: Springer Berlin Heidelberg, 2007, pp. 366–383.
[37] F. M. Q. Pereira and D. Berlin, “Wave propagation and deep propagation
for pointer analysis,” in Proceedings of the 7th Annual IEEE/ACM
International Symposium on Code Generation and Optimization, ser.
CGO ’09. USA: IEEE Computer Society, 2009, p. 126–135. [Online].
Available: https://doi.org/10.1109/CGO.2009.9
[38] P. Cousot and R. Cousot, “Abstract interpretation: A uniﬁed lattice
model for static analysis of programs by construction or approximation
of ﬁxpoints,” in Proceedings of
the 4th ACM SIGACT-SIGPLAN
Symposium on Principles of Programming Languages, ser. POPL ’77.
New York, NY, USA: Association for Computing Machinery, 1977, p.
238–252. [Online]. Available: https://doi.org/10.1145/512950.512973
[39] R. E. Rodrigues, V. H. Sperle Campos, and F. M. Quint˜ao Pereira, “A
fast and low-overhead technique to secure programs against integer over-
ﬂows,” in Proceedings of the 2013 IEEE/ACM International Symposium
on Code Generation and Optimization (CGO), 2013, pp. 1–11.
[40] R. E. Moore, Interval analysis. Prentice-Hall Englewood Cliffs, 1966,
vol. 4.
J. Ferrante, B. K. Rosen, M. N. Wegman,
[41] T. Eiter and H. Mannila, “Computing discrete frechet distance,” 05 1994.
[42] R. Cytron,
and
F. K. Zadeck, “Efﬁciently computing static single assignment form
and the control dependence graph,” ACM Trans. Program. Lang.
Syst., vol. 13, no. 4, p. 451–490, Oct. 1991. [Online]. Available:
https://doi.org/10.1145/115372.115320
[43] A. V. Aho, R. Sethi, and J. D. Ullman, “Compilers, principles, tech-
niques,” Addison wesley, vol. 7, no. 8, p. 9, 1986.
seed
[44] C. Lattner and V. Adve, “Llvm: A compilation framework for lifelong
program analysis and transformation,” in Proceedings of the Interna-
tional Symposium on Code Generation and Optimization: Feedback-
Directed and Runtime Optimization, ser. CGO ’04.
USA: IEEE
Computer Society, 2004, p. 75.
[46] A. Rebert, S. K. Cha, T. Avgerinos,
[45] A. Fioraldi, D. Maier, H. Eißfeldt, and M. Heuse, “AFL++: Combining
incremental steps of fuzzing research,” in 14th USENIX Workshop on
Offensive Technologies (WOOT 20). USENIX Association, Aug. 2020.
J. Foote, D. Warren,
and D. Brumley,
selection
G. Grieco,
in 23rd USENIX Security Symposium (USENIX
for
fuzzing,”
Security
14).
2014,
pp. 861–875. [Online]. Available: https://www.usenix.org/conference/
usenixsecurity14/technical-sessions/presentation/rebert
San Diego, CA: USENIX Association,
“Optimizing
[47] P. E. McKnight and J. Najab, Mann-Whitney U Test. American Cancer
Society, 2010, pp. 1–1. [Online]. Available: https://onlinelibrary.wiley.
com/doi/abs/10.1002/9780470479216.corpsy0524
[48] W. Jin and A. Orso, “Bugredux: Reproducing ﬁeld failures for in-
house debugging,” in 2012 34th International Conference on Software
Engineering (ICSE), 2012, pp. 474–484.
[49] C. Cadar, D. Dunbar, D. R. Engler et al., “Klee: Unassisted and auto-
matic generation of high-coverage tests for complex systems programs.”
in OSDI, vol. 8, 2008, pp. 209–224.
[50] V. Pham, W. B. Ng, K. Rubinov, and A. Roychoudhury, “Her-
cules: Reproducing crashes in real-world application binaries,” in 2015
IEEE/ACM 37th IEEE International Conference on Software Engineer-
ing, vol. 1, 2015, pp. 891–901.
[51] M. Christakis, P. M¨uller, and V. W¨ustholz, “Guiding dynamic symbolic
execution toward unveriﬁed program executions,” in Proceedings of the
38th International Conference on Software Engineering, ser. ICSE ’16.
New York, NY, USA: Association for Computing Machinery, 2016, p.
144–155. [Online]. Available: https://doi.org/10.1145/2884781.2884843
[52] M. B¨ohme, B. C. d. S. Oliveira, and A. Roychoudhury, “Partition-
based regression veriﬁcation,” in Proceedings of the 2013 International
Conference on Software Engineering, ser. ICSE ’13.
IEEE Press, 2013,
p. 302–311.
[53] S. Bugrara and D. Engler, “Redundant state detection for dynamic
symbolic execution,” in 2013 USENIX Annual Technical Conference
(USENIX ATC 13). San Jose, CA: USENIX Association, Jun. 2013,
pp. 199–211. [Online]. Available: https://www.usenix.org/conference/
atc13/technical-sessions/presentation/bugrara
[54] R. Majumdar and K. Sen, “Hybrid concolic testing,” in Proceedings
of
the 29th International Conference on Software Engineering, ser.
ICSE ’07. Washington, DC, USA: IEEE Computer Society, 2007, pp.
416–426. [Online]. Available: https://doi.org/10.1109/ICSE.2007.41
[55] D. Trabish, A. Mattavelli, N. Rinetzky, and C. Cadar, “Chopped
the 40th International
symbolic
Conference on Software Engineering, ser. ICSE ’18. New York,
NY, USA: ACM, 2018, pp. 350–360.
[Online]. Available: http:
//doi.acm.org/10.1145/3180155.3180251
in Proceedings of
execution,”
[56] G. Yang, S. Person, N. Rungta, and S. Khurshid, “Directed incremental
symbolic execution,” ACM Trans. Softw. Eng. Methodol., vol. 24, no. 1,
Oct. 2014. [Online]. Available: https://doi.org/10.1145/2629536
[57] P. Chen and H. Chen, “Angora: Efﬁcient fuzzing by principled search,”
in 2018 IEEE Symposium on Security and Privacy (SP), vol. 00, May
2018, pp. 711–725. [Online]. Available: doi.ieeecomputersociety.org/
10.1109/SP.2018.00046
[58] D. She, K. Pei, D. Epstein,
Jana,
“NEUZZ: efﬁcient fuzzing with neural program learning,” CoRR, vol.
abs/1807.05620, 2018. [Online]. Available: http://arxiv.org/abs/1807.
05620
J. Yang, B. Ray, and S.
[59] C. Lemieux and K. Sen, “Fairfuzz: A targeted mutation strategy
for increasing greybox fuzz testing coverage,” in Proceedings of the
33rd ACM/IEEE International Conference on Automated Software
Engineering, ser. ASE 2018. New York, NY, USA: ACM, 2018,
pp. 475–485. [Online]. Available: http://doi.acm.org/10.1145/3238147.
3238176
[60] N. Stephens, J. Grosen, C. Salls, A. Dutcher, R. Wang, J. Corbetta,
Y. Shoshitaishvili, C. Kruegel, and G. Vigna, “Driller: Augmenting
fuzzing through selective symbolic execution.” in NDSS, vol. 16, 2016,
pp. 1–16.
[61] I. Yun, S. Lee, M. Xu, Y. Jang, and T. Kim, “QSYM : A
practical concolic execution engine tailored for hybrid fuzzing,” in
27th USENIX Security Symposium (USENIX Security 18). Baltimore,
MD: USENIX Association, 2018, pp. 745–761. [Online]. Available:
https://www.usenix.org/conference/usenixsecurity18/presentation/yun
[62] M. Cho, S. Kim, and T. Kwon, “Intriguer: Field-level constraint
solving for hybrid fuzzing,” in Proceedings of the 2019 ACM SIGSAC
Conference on Computer and Communications Security, ser. CCS ’19.
New York, NY, USA: Association for Computing Machinery, 2019, p.
515–530. [Online]. Available: https://doi.org/10.1145/3319535.3354249
[63] H. Huang, P. Yao, R. Wu, Q. Shi, and C. Zhang, “Pangolin: Incremental
hybrid fuzzing with polyhedral path abstraction,” in 2020 IEEE
Symposium on Security and Privacy (SP). Los Alamitos, CA, USA:
IEEE Computer Society, may 2020, pp. 1144–1158. [Online]. Available:
https://doi.ieeecomputersociety.org/10.1109/SP40000.2020.00063
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:37:18 UTC from IEEE Xplore.  Restrictions apply. 
50