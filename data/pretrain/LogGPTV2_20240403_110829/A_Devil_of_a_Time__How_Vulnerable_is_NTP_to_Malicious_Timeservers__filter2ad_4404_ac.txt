to this question is dependent on two important factors: (1)
the extent to which the attacker-controlled timeservers can
impact time at other timeservers in the region, and (2) the
implications of attacker-inﬂuenced timeservers being detected
and removed from the pool. We next address each of these in
turn. We will show that an attacker already in control of fairly
few timeservers, or capable of gaining control of fairly few
5
(a) North America
(b) Europe
Figure 2: Distribution of the number of system peers revealed in North America and Europe
(a) The most popular NTP timeservers to sync with, in decreasing
order
(b) The /24 subnets containing popular NTP timeservers, in de-
creasing order
Figure 3: Inter-server dependencies in Germany, the UK, France, Switzerland, the Netherlands, the US, and Canada.
timeservers, can still impact time across its region. We will
then show that despite timeserver removals by the monitor,
the attacker can still succeed in shifting time by hours at many
clients in its region.
peer is IPv6, the reﬁd ﬁeld contains the ﬁrst four octets of the
MD5 hash of the IPv6 address. The IPv6 address of an IPv6
system peer can then be determined by ﬁnding a match of the
reﬁd value to the hash of a known IPv6 server.
A. Control over Fairly Few Timeservers is Enough
Quantifying the extent to which a set of timeservers can
impact time at other timeservers involves inferring the depen-
dencies between timeservers, that is, which timeservers sync to
which other timeservers. This, however, is not straightforward,
as explained next.
An NTP timeserver provides, upon request, the identity
of a single timeserver to which it syncs, called the “system
peer”. Recall (see Section II-A) that an NTP client periodically
queries a set of timeservers, casts outliers, and derives, from
the “surviving” timeservers, a time to update its local clock
to. The surviving server whose time sample is “closest” to
the computed time (in terms of “root distance” [31] and other
parameters) is designated the “system peer” [31]. The system
peer of an NTP timeserver can be inferred by sending a query
to that server and examining the reﬁd ﬁeld in the server’s
response packet. For stratum ≥ 2 servers, if the system peer
is IPv4, the reﬁd ﬁeld contains its IPv4 address. If the system
However, the system peer is typically only one of several
timeservers the NTP client syncs with and that inﬂuence the
local time at the client. Hence, merely learning the identity
of the system peer is not sufﬁcient as the identities of other
timeservers that impact time at the client will remain hidden.
Building the timeserver dependency graph. The best prac-
tice for NTP timeservers is to sync with a set of 4 − 7
manually-conﬁgured timeservers [13], which is not expected
to signiﬁcantly change over time (see Section II-A). Our aim is
to infer these sets, thus generating NTP’s server-dependency
graph. To this end, we applied the following methodology.
We ﬁrst compiled the lists of timeservers in the NTP server
pool. This was accomplished by launching an NTP client
and repeatedly querying the NTP server pool for timeservers
in different geographical regions spanning the globe, once
every two minutes for over a week. E.g., the response for
a DNS query for the domains europe.pool.ntp.org and north-
america.pool.ntp.org will specify several timeservers, selected
6
at random, in Europe and in North America, respectively. By
accumulating the responses, and generating the union of the
timeservers, we were able to learn the IP addresses of around
99% of all timeservers in the NTP timeserver pool worldwide
(the number of the timeservers in the pool is speciﬁed in [19]),
and also associate with each timeserver the country in which
it resides. We focus henceforth on NTP timeservers in Europe
and North America, which, put together, constitute roughly
90% of all timeservers worldwide. We choose to restrict our
attention to these two continents since only in these can
country-level pool zones that consist of hundreds of servers
be found. (When less timeservers are available an attacker in
control of 10s of timeservers can trivially impact time at many
clients.) For the same reason, we focus primarily on countries
with more than 300 servers: Germany, the UK, France, and
the US.
Figure 4: The fraction of timeservers in the UK, Germany,
France, Switzerland, the Netherlands, the US and Canada (the
y axis) for which x of the most popular NTP timeservers
constitute more than 50% of the P eer set.
Figure 5: The fraction of timeservers in Europe and North
America (the y axis) for which x of the most popular NTP
timeservers constitute more than 50% of the P eer set.
After replicating the list of timeservers in the NTP time-
server pool, we queried each of the timeservers for its system
peer 8 times per hour for several months (from July to
September 2019 and in July 2020). We denote the union of all
systems peers reported by each timeserver i by P eers(i). As
discussed above, P eers(i) might be a strict subset of the actual
set of timeservers that timeserver i can sync with and so there
might be (and likely are) even more dependencies between
timeservers than those revealed by our empirical investigation.
Fig. 2 plots the distribution of the size of the generated
7
P eer sets for timeservers in North America and Europe. The
distributions for speciﬁc countries such as Germany, the UK,
France, Canada, and the US, exhibit the same trends. Since
the exact size of the set of manually-conﬁgured timeservers a
certain timeserver i syncs with is unknown to us, we cannot tell
what fraction of this set is covered by P eer(i). In particular,
P eer(i) might be smaller than the recommended size of 4− 7
timeservers either because timeserver i has conﬁgured a lower
number of timeservers than recommended or because some of
the timeservers in its conﬁgured set were not chosen by it as
the system peer in the course of our measurements.
We present below results for various countries in both Eu-
rope and North America: Germany, the UK, France, Switzer-
land, the Netherlands, the US, and Canada. Even though the
pool’s zones for these countries contain many NTP timeservers
(e.g., 818 and 337 NTP timeservers in Germany and the UK,
respectively), our results indicate that a fairly small-sized set of
timeservers can impact time at many of the other timeservers.
Fig. 3(a) plots for different timeservers in Germany, the UK,
France, Switzerland, the Netherlands, the US, and Canada (the
x axis), in decreasing order of popularity, the fraction of all
timeservers in the country that have these timeservers in their
system peer sets. Observe, for instance, that one timeserver in
Germany (at x = 1) is in the intersection of the P eer sets of
27% of the timeservers in Germany.
We observe also that the IP addresses of highly popular
timeservers are sometimes in the same /24 subnet and, in fact,
are sometimes even consecutive addresses. This implies that
a single organization might be in control of a several popular
NTP timeservers. Indeed, a closer inspection of our results
reveals that both the National Metrology Institute of Germany
(PTB) and the University of Erlangen-Nuremberg (FAU) in
Germany control 3 and 4 of the most popular timeservers
in Germany, respectively. This has important
implications
for security: gaining control of an IP preﬁx, e.g., via BGP
hijacking [10], can enable even an off-path attacker to become
the destination of NTP queries with respect to multiple popular
timeservers. Fig 3(b) plots for different /24 IP subnets in
Germany, the UK, France, Switzerland, the Netherlands, the
US, and Canada (the x axis), ordered from most popular
downwards, the fraction of the timeservers in the country
whose P eer sets contains at least a single timeserver in the
subnet. Observe that for the /24 subnet
in Germany that
corresponds to x = 1, at least 47% of the timeservers in
Germany have at least a single timeserver in their P eer sets
within this subnet.
Control of fairly few timeservers is sufﬁcient for inﬂuencing
time at many other timeservers. Using the timeserver-
dependency graph, we quantify the fraction of the timeservers
in a country/continent whose local time can be inﬂuenced by
a fairly small number of timeservers.
We ﬁrst present our results for timeservers in Germany,
UK, France, Switzerland, the Netherlands, the US, and Canada
in Fig. 4. A point (x, y) in the ﬁgure means that x of the
most popular NTP timeservers in the country constitute more
than 50% of the P eer set for y% of the timeservers in the
country. Thus, for instance, 20 of the most popular timeservers
in Germany constitute the majority of the timeservers in the
P eer sets of 52% of the timeservers in Germany. We point
(a) Countries
(b) Continents
Figure 6: The fraction of server weight (the y axis) for which x of the most popular NTP servers constitute more than 50% of
the P eer set.
out that no NTP client is protected from an attacker in control
of more than 50% of the timeservers in its P eer set [6]. In
fact, our results underestimate the inﬂuence of popular NTP
timeservers as, in practice, control of less than 50% of a client’s
P eer set might sometimes be sufﬁcient for shifting time at a
client (see discussion in Section IV.D in [6]).
Fig. 5 presents our results for Europe and North America.
Observe that controlling as few as 50 timeservers in Europe
is sufﬁcient for dominating the P eer sets of roughly 40% of
the 2, 810 timeservers in the continent. Similarly, controlling
44 timeservers in North America sufﬁces for dominating the
P eer sets of 40% of the 915 timeservers in North America.
So far, we have quantiﬁed the inﬂuence of a set of
servers in terms of the fraction of servers whose Peer sets
are dominated. Recall, however, that different timeservers are
weighed differently by the server pool (according to their
conﬁgured netspeeds, see Section III-B). Fig. 6 thus quantiﬁes
the inﬂuence of a set of timeservers in terms of the aggregate
weight of impacted timeservers. Speciﬁcally, a point (x,y) in
the ﬁgure indicates that x of the most popular NTP servers
in the country constitute more than 50% of the Peer set for
timeservers whose aggregate weight is y% of the total weight
across all servers in the country). Observe that quantifying
inﬂuence by weight yields the same trends as before.
B. The Implications of Timeserver Removals
As discussed in Section III-A, timeservers whose local
times are inﬂuenced by the attacker-controlled timeservers will
eventually be removed from the pool by the pool’s monitor
after responding to its queries with times that deviate from its
local time by “too much” (three seconds in the current im-
plementation). While these servers will no longer be assigned
to clients by the pool (until re-admitted to the pool), as we
show next, a large fraction of clients that already sync with
a removed server will continue to do so for 10s of minutes,
and even several hours, after that server is removed from the
pool. We conclude that this is due to these clients querying
the pool for new servers at these time granularities, and so
sticking with the timeservers assigned to them for extended
periods of time. Thus, the attacker can continue shifting time
at timeservers even after their removal, indirectly shifting time
Figure 7: The number of clients that sync with a removed
server.
at many clients by hours before the critical mass of clients
abandons the removed server.
To quantify the fraction of clients that continues syncing
with an NTP server after its removal from the pool, we
launched (in July 2020), NTP timeservers at various Amazon
AWS regions and registered these into the NTP timeserver
pool (we discuss timeserver registration in more detail
in
Section V). The netspeed for all registered timeservers conﬁg-
ured to be 1000x the default value, so as to attract sufﬁcient
trafﬁc for the results to be meaningful. Once a timeserver
reached a steady number of queries from distinct IP addresses
per hour, we removed that server from the NTP pool and
continued tracking the number of distinct IP addresses from
which that server received NTP queries over time. We found
that, as presented in Fig. 7, a large fraction of the clients that
synchronized with our timeservers (around 20% or more in all
regions) continued to do so for hours after these timeservers
have been removed from the pool. In addition, the majority of
the other clients continued syncing with our timeservers for
10s of minutes after their removal.
V. EMPIRICAL ANALYSIS OF THE IMPLICATIONS OF
INJECTING NEW TIMESERVERS
We next quantify the effects of attacks that are based on
injecting new timeservers into the timeserver pool, as discussed
8
(a) Germany
(b) UK
(c) France
(d) California
(e) Virginia
(f) Canada
Figure 8: Number of queries to our servers from distinct IP addresses per hour to our timeservers in Europe and North America.
S1 1 and S1 2 are two stratum 1 servers, whereas S2 and S3 are stratum 2 and stratum 3 servers, respectively.
in Section III-B. Registering a new timeserver into the time-
server pool entails providing an IP address and an e-mail. After
passing simple tests intended to establish the availability and
time accuracy of the server, the registered server is added to
the pool [14], [20]. The stratum of a timeserver is periodically
reported to the pool’s monitor whenever queried by the monitor
for the current time. While, intuitively, claiming to be a low-
stratum timeserver (e.g., a stratum 1 server), even when this
is not so, might seem beneﬁcial, our results actually show that
this type of lie does not really aid the attacker. We identify,
however, a much more effective strategy for the attacker:
manipulating the netspeed parameter.
Figure 10: The probability that our injected server is assigned
to a client in its region, averaged over the 4 injected servers
in each region.
be 1 for two timeservers, 2 for one timeserver, and 3 for one
timeserver. The netspeed for all timeservers (to be discussed
below) was conﬁgured to be 1000x the default value, so as
to attract sufﬁcient trafﬁc for the results to be meaningful. We
repeated this experiment for different choices of Amazon AWS
regions to show that the revealed trends do not vary based on
the geographical locations of the timeservers. We measured,
for each timeserver, the number of different IP addresses from
which it received NTP queries within the same hour, across 72
consecutive hours. Our results, shown in Fig. 8, establish that
all timeservers were contacted from roughly the same number
of distinct IP addresses regardless of their strata. This is to
be expected since the NTP client’s algorithm for selecting
between pool-assigned timeservers only examines the stratum
Figure 9: Number of queries from distinct IP addresses per
hour to our timeservers in the UK, Germany and the US with
default netspeed values.
Lying about your stratum is not helpful. To quantify
the beneﬁts to the attacker of lying about the stratum of a
registered timeserver, we launched 4 NTP timeservers in the
same Amazon AWS region and registered these into the NTP
timeserver pool. We reported the strata of these timeservers to
9
pool every 2 minutes over the course of a week from a client in
the same region. We deduce from the fraction of responses in
which our timeserver appears the probability that it be assigned
by the pool to a client in its region. Fig. 10 summarizes our
results. As shown in the ﬁgure, due to their high netspeed
values, the probability that each of our timeservers is assigned
to a client in its region is much higher than the probability had
all timeservers been uniformly sampled.
Based on these computed probabilities, we quantify the