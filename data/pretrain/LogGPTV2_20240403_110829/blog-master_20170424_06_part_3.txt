```
vacuum analyze tbl;
```
3\.10、大量不符合条件的记录被处理过滤, 优化方法是采用c1,c3索引精准匹配c1同时满足排序需求  
```
postgres=# create unlogged table test (c1 int , c2 int, c3 int);
CREATE TABLE
postgres=# insert into test select random()*100, random()*10, generate_series(1,10000000);
INSERT 0 10000000
postgres=# create index idx_test_4 on test (c1);
CREATE INDEX
postgres=# create index idx_test_2 on test (c3);
CREATE INDEX
postgres=# explain (analyze,verbose,timing,costs,buffers) select c2 from test where c1=2 order by c3 desc ;
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Index Scan Backward using idx_test_2 on public.test  (cost=0.43..259219.73 rows=104000 width=8) (actual time=0.108..1776.322 rows=100228 loops=1)
   Output: c2, c3
   Filter: (test.c1 = 2)
   Rows Removed by Filter: 9899772  // 大量不符合条件的记录被处理过滤, 优化方法是采用c1,c3索引精准匹配c1同时满足排序需求
   Buffers: shared hit=48972 read=32408 written=12241
 Planning:
   Buffers: shared hit=17 read=1
 Planning Time: 1.561 ms
 Execution Time: 1786.503 ms
(9 rows)
postgres=# create index idx_test_5 on test (c1,c3);
CREATE INDEX
postgres=# explain (analyze,verbose,timing,costs,buffers) select c2 from test where c1=2 order by c3 desc ;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Index Scan Backward using idx_test_5 on public.test  (cost=0.43..60442.91 rows=104000 width=8) (actual time=0.028..56.875 rows=100228 loops=1)
   Output: c2, c3
   Index Cond: (test.c1 = 2)
   Buffers: shared hit=45835
 Planning Time: 0.114 ms
 Execution Time: 66.078 ms
(6 rows)
```
## 八、常见优化点汇总  
1、JOIN方法：nestloop, mergejoin, hashjoin.   work_mem的SIZE影响hashjoin的性能。 你必须搞清楚这几个JOIN的原理才能了解应该使用什么方法，当然数据库会帮你做出选择，但如果成本因子不准确可能导致不准确。    
https://www.postgresql.org/docs/10/static/planner-optimizer.html  
2、分组聚合、HASH聚合的选择。work_mem的SIZE。    
https://www.postgresql.org/docs/10/static/runtime-config-query.html#RUNTIME-CONFIG-QUERY-ENABLE   
3、扫描方法：bitmap scan, index scan, index only scan ,seq scan, index skip scan等的概念，以及选择。     
[《PostgreSQL 数据离散性 与 索引扫描性能(btree & bitmap index scan)》](../201804/20180402_01.md)    
[《PostgreSQL Oracle 兼容性之 - INDEX SKIP SCAN (递归查询变态优化) 非驱动列索引扫描优化》](../201803/20180323_03.md)    
[《PostgreSQL 空间切割(st_split, ST_Subdivide)功能扩展 - 空间对象网格化 (多边形GiST优化)》](../201710/20171005_01.md)    
[《PostgreSQL 空间st_contains，st_within空间包含搜索优化 - 降IO和降CPU(bound box) (多边形GiST优化)》](../201710/20171004_01.md)    
有些时候SQL不当也可能引起扫描放大   
[《PostgreSQL 11 preview - 分页内核层优化 - 索引扫描offset优化(使用vm文件skip heap scan)》](../201803/20180322_09.md)  
[《PostgreSQL 范围过滤 + 其他字段排序OFFSET LIMIT(多字段区间过滤)的优化与加速》](../201801/20180122_02.md)  
[《PostgreSQL Oracle 兼容性之 - TZ_OFFSET》](../201609/20160920_03.md)  
[《PostgreSQL 索引扫描offset内核优化 - case》](../201607/20160717_01.md)  
[《PostgreSQL 数据访问 offset 的质变 case》](../201607/20160715_02.md)  
[《论count与offset使用不当的罪名 和 分页的优化》](../201605/20160506_01.md)  
[《PostgreSQL offset 原理，及使用注意事项》](../201604/20160402_02.md)  
[《分页优化 - order by limit x offset y performance tuning》](../201402/20140211_01.md)  
3\.1、索引的选择  
[《PostgreSQL 9种索引的原理和应用场景》](../201706/20170627_01.md)    
4、递归：改写SQL，完成一些极限优化。  
[《PostgrSQL 递归SQL的几个应用 - 极客与正常人的思维》](../201705/20170519_01.md)    
5、exists, in, = any等：改写SQL  
[《PostgreSQL in 与 = any 的SQL语法异同与性能优化》](../201801/20180131_02.md)    
6、膨胀、统计信息不准确，导致SQL不正确。  
[《[未完待续] PostgreSQL 扩展存储引擎介绍 - zheap - 1》](../201803/20180311_02.md)    
[《PostgreSQL snapshot too old补丁, 防止数据库膨胀》](../201511/20151109_01.md)    
[《乱序写入导致的索引膨胀(B-tree, GIN, GiST皆如此)》](../201711/20171121_02.md)    
[《Greenplum 列存表(AO表)的膨胀、垃圾检查与空间收缩(含修改分布键)》](../201708/20170817_03.md)    
[《如何检测、清理Greenplum膨胀、垃圾(含修改分布键) - 阿里云HybridDB for PG最佳实践》](../201708/20170817_01.md)    
[《PostgreSQL 收缩膨胀表或索引 - pg_squeeze or pg_repack》](../201610/20161030_02.md)    
[《PostgreSQL 垃圾回收原理以及如何预防膨胀 - How to prevent object bloat in PostgreSQL》](../201504/20150429_02.md)    
[《PostgreSQL垃圾回收代码分析 - why postgresql cann't reclaim tuple is HEAPTUPLE_RECENTLY_DEAD》](../201505/20150503_01.md)    
[《Greenplum 统计信息收集参数 - 暨统计信息不准引入的broadcast motion一例》](../201712/20171211_03.md)    
[《PostgreSQL merge join 评估成本时可能会查询索引 - 硬解析务必引起注意 - 批量删除数据后, 未释放empty索引页导致mergejoin执行计划变慢 case》](../201702/20170221_03.md)    
6\.1、COST成本因子与硬件不匹配，导致COST计算不准确。  
[《优化器成本因子校对 - PostgreSQL explain cost constants alignment to timestamp》](../201311/20131126_03.md)    
[《优化器成本因子校对(disk,ssd,memory IO开销精算) - PostgreSQL real seq_page_cost & random_page_cost in disks,ssd,memory》](../201404/20140423_01.md)    
7、数据聚集的优化，例如数据分布比较分散，扫描数据时会导致IO浪费。  
[《PostgreSQL 黑科技 - 空间聚集存储, 内窥GIN, GiST, SP-GiST索引》](../201709/20170905_01.md)    
[《数据寻龙点穴（空间聚集分析） - 阿里云RDS PostgreSQL最佳实践》](../201708/20170820_02.md)    
[《PostgreSQL 聚集存储 与 BRIN索引 - 高并发行为、轨迹类大吞吐数据查询场景解说》](../201702/20170219_01.md)    
[《索引扫描优化之 - GIN数据重组优化(按元素聚合) 想象在玩多阶魔方》](../201706/20170612_05.md)    
8、确实需要大量计算时，可以：向量计算、列存储、并行计算、GPU加速，这些方法属于激发硬件最大潜能的方法。  
[《PostgreSQL VOPS 向量计算 + DBLINK异步并行 - 单实例 10亿 聚合计算跑进2秒》](../201802/20180210_01.md)    
[《PostgreSQL GPU 加速(HeteroDB pg_strom) (GPU计算, GPU-DIO-Nvme SSD, 列存, GPU内存缓存)》](../201806/20180602_02.md)    
[《PostgreSQL 11 preview - 并行计算 增强 汇总》](../201805/20180519_02.md)    
9、防死机优化，比如雪崩等场景，这种情况下，则应该让任务排队，尽量的减少同时执行的任务，避免出现大家一起死的情况。也可以使用资源队列、连接池、内置的线程池等。  
[《PostgreSQL 设置单条SQL的执行超时 - 防雪崩》](../201712/20171211_02.md)    
[《PostgresPro buildin pool(内置连接池)版本 原理与测试》](../201805/20180521_03.md)    
[《阿里云 RDS PostgreSQL 高并发特性 vs 社区版本 (1.6万并发: 3倍吞吐，240倍响应速度)》](../201805/20180505_07.md)  
[《PostgreSQL数据库开源连接池pgbouncer的使用》](../201005/20100511_03.md)  
10、防锁死或死锁的优化，这种情况，可能出现在一些比较恶心的业务长时间持锁，不释放。另一方面，在等待中的事务，可能想持有大锁（例如DDL语句），从而导致锁放大，发生冲突的概率会大增。从而导致锁等待引起的雪崩。  
```  
lock_timeout  
```  
[《PostgreSQL 锁等待监控 珍藏级SQL - 谁堵塞了谁》](../201705/20170521_01.md)   
[《PostgreSQL 实时健康监控 大屏 - 高频指标 - 珍藏级》](../201806/20180613_02.md)    
11、资源隔离，当存在混合负责的请，或者单个实例有多个业务线在使用，并且有分级机制时。 你肯定不想让不同的业务之间相互干扰，或者因为低级业务的大量资源占用，影响高级业务。  
[《Linux cgroup资源隔离各个击破之 - io隔离》](../201606/20160611_01.md)    
[《Linux cgroup - cpu与cpuset子系统讲解》](../201606/20160613_01.md)    
[《PostgreSQL 商用版本EPAS(阿里云ppas(Oracle 兼容版)) HTAP功能之资源隔离管理 - CPU与刷脏资源组管理》](../201801/20180113_01.md)    
12、操作系统、文件系统、存储、网络链路等优化。  
[《PostgreSQL 源码性能诊断(perf profiling)指南 - 珍藏级》](../201611/20161129_01.md)    
[《PostgreSQL 代码性能诊断之 - OProfile & Systemtap》](../201505/20150509_01.md)  
总之，1、优化的目标就是让数据库少走弯路，少计算，少扫描，越直接越好。 2、激发潜能的目的则是让一个QUERY能使用越多的资源越好，以最短的时间完成任务。    
## 参考    
https://www.postgresql.org/docs/9.6/static/pgstatstatements.html    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")