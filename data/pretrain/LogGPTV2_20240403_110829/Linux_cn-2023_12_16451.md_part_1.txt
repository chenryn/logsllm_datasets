---
author: Julia Evans
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 3109
date: '2023-12-07 20:07:12'
editorchoice: true
excerpt: 你有觉得哪些 Git 术语很让人困惑吗？
fromurl: https://jvns.ca/blog/2023/11/01/confusing-git-terminology/
id: 16451
islctt: true
largepic: /data/attachment/album/202312/07/200630j90z4xz7tttgztr9.jpg
permalink: /article-16451-1.html
pic: /data/attachment/album/202312/07/200630j90z4xz7tttgztr9.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 你有觉得哪些 Git 术语很让人困惑吗？
tags:
- Git
thumb: false
title: 解读那些令人困惑 Git 术语
titlepic: true
translator: ChatGPT
updated: '2023-12-07 20:07:12'
---
![](/data/attachment/album/202312/07/200630j90z4xz7tttgztr9.jpg)
我正在一步步解释 Git 的方方面面。在使用 Git 近 15 年后，我已经非常习惯于 Git 的特性，很容易忘记它令人困惑的地方。
因此，我在 [Mastodon](https://social.jvns.ca/@b0rk/111330564535454510) 上进行了调查：
> 
> 你有觉得哪些 Git 术语很让人困惑吗？我计划写篇博客，来解读 Git 中一些奇怪的术语，如：“分离的 HEAD 状态”，“快速前移”，“索引/暂存区/已暂存”，“比 `origin/main` 提前 1 个提交”等等。
> 
> 
> 
我收到了许多有洞见的答案，我在这里试图概述其中的一部分。下面是这些术语的列表：
* HEAD 和 “heads”
* “分离的 `HEAD` 状态”
* 在合并或变基时的 “ours” 和 “theirs”
* “你的分支已经与 'origin/main' 同步”
* `HEAD^`、`HEAD~`、`HEAD^^`、`HEAD~~`、`HEAD^2`、`HEAD~2`
* `..` 和 `...`
* “可以快速前移”
* “引用”、“符号引用”
* refspecs
* “tree-ish”
* “索引”、“暂存的”、“已缓存的”
* “重置”、“还原”、“恢复”
* “未跟踪的文件”、“追踪远程分支”、“跟踪远程分支”
* 检出
* reflog
* 合并、变基和遴选
* `rebase –onto`
* 提交
* 更多复杂的术语
我已经尽力讲解了这些术语，但它们几乎覆盖了 Git 的每一个主要特性，这对一篇博客而言显然过于繁重，所以在某些地方可能会有一些粗糙。
### `HEAD` 和 “heads”
有些人表示他们对 `HEAD` 和 `refs/heads/main` 这些术语感到困惑，因为听起来像是一些复杂的技术内部实现。
以下是一个快速概述：
* “heads” 就是 “分支”。在 Git 内部，分支存储在一个名为 `.git/refs/heads` 的目录中。（从技术上讲，[官方 Git 术语表](https://git-scm.com/docs/gitglossary) 中明确表示分支是所有的提交，而 head 只是最近的提交，但这只是同一事物的两种不同思考方式）
* `HEAD` 是当前的分支，它被存储在 `.git/HEAD` 中。
我认为，“head 是一个分支，`HEAD` 是当前的分支” 或许是 Git 中最奇怪的术语选择，但已经设定好了，想要更清晰的命名方案已经为时已晚，我们继续。
“HEAD 是当前的分支” 有一些重要的例外情况，我们将在下面讨论。
### “分离的 HEAD 状态”
你可能已经看到过这条信息：
```
$ git checkout v0.1
You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.
[...]
```
（消息译文：你处于 “分离 HEAD” 的状态。你可以四处看看，进行试验性的更改并提交，你可以通过切换回一个分支来丢弃这个状态下做出的任何提交。）
这条信息的实质是：
* 在 Git 中，通常你有一个已经检出的 “当前分支”，例如 `main`。
* 存放当前分支的地方被称为 `HEAD`。
* 你做出的任何新提交都会被添加到你的当前分支，如果你运行 `git merge other_branch`，这也会影响你的当前分支。
* 但是，`HEAD` 不一定**必须**是一个分支！它也可以是一个提交 ID。
* Git 会称这种状态（`HEAD` 是提交 ID 而不是分支）为 “分离的 `HEAD` 状态”
* 例如，你可以通过检出一个标签来进入分离的 `HEAD` 状态，因为标签不是分支
* 如果你没有当前分支，一系列事情就断链了：
	+ `git pull` 根本就无法工作（因为它的全部目的就是更新你的当前分支）
	+ 除非以特殊方式使用 `git push`，否则它也无法工作
	+ `git commit`、`git merge`、`git rebase` 和 `git cherry-pick` 仍然可以工作，但它们会留下“孤儿”提交，这些提交没有连接到任何分支，因此找到这些提交会很困难
* 你可以通过创建一个新的分支或切换到一个现有的分支来退出分离的 `HEAD` 状态
### 在合并或变基中的 “ours” 和 “theirs”
遇到合并冲突时，你可以运行 `git checkout --ours file.txt` 来选择 “ours” 版本中的 `file.txt`。但问题是，什么是 “ours”，什么是 “theirs” 呢？
我总感觉此类术语混淆不清，也因此从未用过 `git checkout --ours`，但我还是查找相关资料试图理清。
在合并的过程中，这是如何运作的：当前分支是 “ours”，你要合并进来的分支是 “theirs”，这样看来似乎很合理。
```
$ git checkout merge-into-ours # 当前分支是 “ours”
$ git merge from-theirs # 我们正要合并的分支是 “theirs”
```
而在变基的过程中就刚好相反 —— 当前分支是 “theirs”，我们正在变基到的目标分支是 “ours”，如下：
```
$ git checkout theirs # 当前分支是 “theirs”
$ git rebase ours # 我们正在变基到的目标分支是 “ours”
```
我以为之所以会如此，因为在操作过程中，`git rebase main` 其实是将当前分支合并到 `main` （它类似于 `git checkout main; git merge current_branch`），尽管如此我仍然觉得此类术语会造成混淆。
[这个精巧的小网站](https://nitaym.github.io/ourstheirs/) 对 “ours” 和 “theirs” 的术语进行了解释。
人们也提到，VSCode 将 “ours”/“theirs” 称作 “当前的更改”/“收到的更改”，同样会引起混淆。
### “你的分支已经与 `origin/main` 同步”
此信息貌似很直白 —— 你的 `main` 分支已经与源端同步！
但它实际上有些误导。可能会让你以为这意味着你的 `main` 分支已经是最新的，其实不然。它**真正的**含义是 —— 如果你最后一次运行 `git fetch` 或 `git pull` 是五天前，那么你的 `main` 分支就是与五天前的所有更改同步。
因此，如果你没有意识到这一点，它对你的安全感其实是一种误导。
我认为 Git 理论上可以给出一个更有用的信息，像是“与五天前上一次获取的源端 `main` 是同步的”，因为最新一次获取的时间是在 reflog 中记录的，但它没有这么做。
### `HEAD^`、`HEAD~`、`HEAD^^`、`HEAD~~`、`HEAD^2`、`HEAD~2`
我早就清楚 `HEAD^` 代表前一次提交，但我很长一段时间都困惑于 `HEAD~` 和 `HEAD^` 之间的区别。
我查询资料，得到了如下的对应关系：
* `HEAD^` 和 `HEAD~` 是同一件事情（指向前 1 个提交）
* `HEAD^^^`、`HEAD~~~` 和 `HEAD~3` 是同一件事情（指向前 3 个提交）
* `HEAD^3` 指向提交的第三个父提交，它与 `HEAD~3` 是不同的
这看起来有些奇怪，为什么 `HEAD~` 和 `HEAD^` 是同一个概念？以及，“第三个父提交”是什么？难道就是父提交的父提交的父提交？（剧透：并非如此）让我们一起深入探讨一下！
大部分提交只有一个父提交。但是合并提交有多个父提交 - 因为它们合并了两个或更多的提交。在 Git 中，`HEAD^` 意味着 “HEAD 提交的父提交”。但是如果 `HEAD` 是一个合并提交，那 `HEAD^` 又代表怎么回事呢？
答案是，`HEAD^` 指向的是合并提交的**第一个**父提交，`HEAD^2` 是第二个父提交，`HEAD^3` 是第三个父提交，等等。
但我猜他们也需要一个方式来表示“前三个提交”，所以 `HEAD^3` 是当前提交的第三个父提交（如果当前提交是一个合并提交，可能会有很多父提交），而 `HEAD~3` 是父提交的父提交的父提交。
我想，从我们之前对合并提交 “ours”/“theirs” 的讨论来看，`HEAD^` 是 “ours”，`HEAD^2` 是 “theirs”。