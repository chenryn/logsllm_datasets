User: How to use Ansible for server configuration management? Please provide a simple example and explain the relationship among Playbook, Task and Role.
Assistant: 1. Install Ansible Install Ansible on the control node (the machine that manages Ansible): ``` $ sudo apt-get update $ sudo apt-get install ansible ``` 2. Configure Ansible Edit the Ansible configuration file /etc/ansible/ansible .cfg, uncomment the following two lines to open the ssh pipeline ``` [ssh_connection] ssh_args=-C -o ControlMaster=auto -o ControlPersist=60s ``` Edit the host list /etc/ansible/hosts, add the IP of the target host Address or domain name ``` [webserver] 192.168.0.1 ``` 3. Create Playbook Playbook is the core of Ansible, usually a file in YAML format, which contains multiple tasks (task), which defines how to perform operations on the target server . Create a simple Playbook example file webserver.yml: ``` --- hosts: webserver tasks: - name: Ensure Apache2 is installed become: true apt: name=apache2 state=installed - name: Ensure Apache2 is running become: true service: name=apache2 state=started ``` 4. Execute the Playbook Execute the Playbook using the ansible-playbook command: ``` $ ansible-playbook webserver.yml ``` After executing the Playbook, Ansible will check task by task, and Restart the Apache server if needed and make sure it is conceptually allowed. In this example, the Playbook contains two tasks. The first task is named "Ensure Apache2 is installed", which is implemented by using the apt module to enable Apache2; the second task is named "Ensure Apache2 is running", which uses the service module to start/restart Apache2. The state between tasks will be recorded inside Ansible so that it can be manipulated later. 5. Introduction to Role Role is a way to organize and reuse Playbooks. A Role is a folder that contains a set of related tasks and variables (vars), as well as necessary handlers, files, templates, and other dependencies. A Role usually includes a configuration file specifying the underlying service. It is reasonable to call multiple Roles in a single Playbook. Best practice is to separate these roles into well-designed topics, which allow for easy management of playbooks and early server configuration. Role includes tasks, handlers, templates, files and vars, which can be stored in the roles/ folder when used. For example, a webserver Role can look like this: ``` webserver/ ├── handlers │ └── main.yml ├── tasks │ ├── main.yml │ ├── package.yml │ └── service. yml ├── templates │ ├── apache.conf.j2 │ └── nginx.conf.j2 ├── files │ └── index.html └── vars └── main.yml ``` First, the Role defines some processors (handlers), which will be triggered when certain conditions are found, and perform phased processing tasks throughout the Role. This role uses a task file called "main", which is the only executable task from which further operations can be dispatched. A Role can also be split into multiple task files, but the "main" task file is considered the entry point, suitable for a series of smaller, more specific tasks. The role's "main" task file will call two other files, one responsible for installing the Apache2 service and one responsible for starting the service: ``` - include: package.yml - include: service.yml ``` Role also provides: - templates : used to create configuration files and other necessary text files - files : used to enable specific binaries and other resources such as images and data files. - vars: Used to store static and dynamic variables and inject them into tasks. Roles are very powerful and useful for custom services or complex server configurations. By combining any number of Roles, you can create a template for managing the entire data center or application, which saves time and makes the configuration more uniform and easier to manage. Role is usually called in a Playbook. Each Role can be reused, making it easier to replace the underlying services or the configuration they hold. When using Role, there is usually no need to manually write the underlying configuration files. You can use Ansible to automate all or part of these tasks, allowing you to focus on application design and optimization. Roles can be created with the --init option on the command line using the following command: ``` $ ansible-galaxy role init <role-name> ```