$← E (pk, ω, t, m)
c
If D(dkω,t, c) = m then return 1 else return 0.
Remarks. Note that we diﬀerentiate between the terms
“private key” and “decryption key”.
One can also deﬁne the decryption key generation algo-
rithm that instead of private key skω takes input the de-
cryption key for the previous time period dkω,t−1. We do
not further discuss this version here since it is not used in
our construction.
3.2 Security of Revocable IBE
We deﬁne the selective-revocable-ID security for Revoca-
ble IBE schemes. Our security model captures the standard
notion of selective-ID security but it also takes into account
possible revocations. Since we explicitly consider time peri-
ods, in the beginning of the experiment in addition to the
challenge identity the adversary also declares the challenge
time. Just as in the standard slective-ID security deﬁnition
the adversary can request to learn users’ keys. In addition
we let the adversary to revoke users of its choice (including
the challenge identity) at any period of time and see all key
updates. Unlike in the standard security model, we allow the
adversary to learn the private key for the challenge identity,
but only if it was revoked prior to or at the challenge time.
1A valid state is the one that is output by either setup algo-
rithm S or private key generation algorithm SK. A valid
revocation list is the one that is output by either setup algo-
rithm S or revocation algorithm R.
The adversary is given a ciphertext of one of the two mes-
sages of its choice encrypted for the challenge identity and
time. It has to guess which of the messages was encrypted.
First we deﬁne (selective) security against chosen-plaintext
attack and then show how to extend the deﬁnition to chosen-
ciphertext attack.
Definition 3.2. [sRID Security] Let RIBE = (S, SK,
KU ,DK,E ,D, R) be a Revocable IBE scheme. The adver-
sary ﬁrst outputs the challenge identity and time, and also
some information state it wants to preserve. Later it is given
access to three oracles that correspond to the algorithms of
the scheme. The oracles share state.2 Since we use the
simpliﬁed notation for the oracles, we deﬁne them now:
• The private key generation oracle SK(·) takes input
identity ω and runs SK(pk, mk, ω, st) to return private
key skω.
• The key update generation oracle KU(·) takes input
time t and runs KU(pk, mk, t, rl, st) to return key up-
date kut.
• The revocation oracle R(·,·) takes input identity ω
and time t and runs R(ω, t, rl, st) to update rl.
For adversary A and number of users n deﬁne the following
experiments:
Experiment Exp
b
$← {0, 1}
∗
, t
(ω
∗
, state)
(pk, mk, rl, st)
srid−cpa
RIBE,A,n(1κ)
$← A(1κ)
$← S(1κ, n)
$← A
∗
, mb)
, t
SK(·),KU(·),R(·,·)(pk, state)
(m0, m1, state)
∗ $← E (pk, ω
∗
c
$← A
d
If b = d return 1 else return 0.
∗
SK(·),KU(·),R(·,·)(pk, c
, state)
The following conditions must always hold:
1. m0, m1 ∈ M and |m0| = |m1|.
2. KU (·) and R(·,·) can be queried on time which is
greater than or equal to the time of all previous queries
i.e.
the adversary is allowed to query only in non-
decreasing order of time3. Also, the oracle R(·, ·) can-
not be queried on time t if KU (·) was queried on t.4
then R(·, ·) must
3. If SK(·) was queried on identity ω
, t) for any t ≤ t
∗
be queried on (ω
∗
∗
.
We deﬁne the advantage of the adversary Adv
srid−cpa
RIBE,A,n(κ)
as
(cid:2)
2 · Pr
Exp
srid−cpa
RIBE,A,n(1κ) = 1
(cid:3)
− 1
The scheme RIBE is said to be sRID-CPA secure if the
RIBE,A,n(·) is negligible in κ for any eﬃcient
srid−cpa
function Adv
A and polynomial n.
2To be more formal we could deﬁne a single oracle that
maintains the state and invokes these oracles as subroutines.
We do not do it for simplicity.
3This is wlog because, the adversary can query the oracles
for all possible time periods, one by one.
4This is because we assume that the key update is done at
the end of the time period t.
Chosen-ciphertext attack. We extend the above def-
inition in the standard way to take into account chosen-
ciphertext attack. Whenever the adversary is given the or-
acles, it is also given the decryption oracle D(·) that takes
input ciphertext c and runs D(dkω∗,t, c) to return message
m or ⊥. The usual restriction is that D(·) cannot be queried
∗
on challenge ciphertext c
. The advantage of the adversary
Advsrid−cca
RIBE,A,n(κ) and sRID-CCA security are deﬁned anal-
ogously to the CPA setting.
4. MAIN CONSTRUCTION
Intuition. At a high level we build on the (large universe)
construction of Fuzzy IBE [24] and the binary tree data
structure. We brieﬂy recall the Fuzzy IBE primitive ideas
and the basics of the construction.
In the Fuzzy IBE construction from [24], users’ keys and
ciphertexts are associated with sets of descriptive attributes.
A user’s key can decrypt a particular ciphertext only if some
number of attributes (so called “error-tolerance”) match be-
tween the ciphertext and the key. The number of attributes
used to encrypt and the error-tolerance are ﬁxed during the
setup. Security of Fuzzy IBE requires that diﬀerent users
should not be able to pool their attributes together in order
to decrypt a ciphertext which none of them were able to de-
crypt individually. To prevent collusions, the key generation
algorithm of Fuzzy IBE generates a random polynomial (of
degree one less than the error-tolerance) for each user. This
polynomial is used to compute keys corresponding to a set
of attributes. Since all the keys are computed on diﬀerent
polynomials, they cannot be combined in any meaningful
way.
In our IBE scheme messages are encrypted for two “at-
tributes”:
identity of the receiver and time period. The
decryption key is also computed for attributes identity and
time, on a ﬁrst-degree polynomial, meaning both attributes
of the decryption key must match with those of a cipher-
text in order to decrypt. We split the decryption key in two
components corresponding to identity and time that we call
private key and key update respectively. The private key is
issued to each user by the key authority,5 just like regular
private keys in IBE. The key update is published by the key
authority and is publicly available to all users. To be able
to decrypt a ciphertext a user needs both the private key
and the key update. Thus, when the key authority needs to
revoke a user it may simply stop publishing key updates for
that user. As we recalled above, in Fuzzy IBE the poly-
nomial of a decryption key is selected at random to prevent
collusion between diﬀerent keys. Using Fuzzy IBE in a naive
way would thus require computing key updates for each user
separately. We use a diﬀerent approach to reduce the num-
ber of key updates that key authority needs to compute. We
use a binary tree of height h (with at least as many leaves
as the number of users in the system) and assign a random
polynomial to each node of the tree. Next, we associate
each user to a unique leaf node. Every user gets keys (cor-
responding to its identity) computed on polynomials of all
nodes on the path from the leaf node corresponding to that
user to the root node. To be able to decrypt a ciphertext
encrypted with time t, any user just needs one key update
(corresponding to t) computed on any one of the polynomi-
5We use a diﬀerent name than PKG to emphasize a new
way to handle revocations.
als of nodes on the path from the leaf node of the user to the
root node. Thus, when no user is revoked, key authority just
needs to publish the key update computed on the polyno-
mial of the root node. When a subset of the users is revoked,
key authority ﬁrst ﬁnds the minimal set of nodes in the tree
which contains an ancestor (or, the node itself) among all
the leaf nodes corresponding to non-revoked users. Then,
key authority publishes key updates on polynomials of the
nodes in this set.
We ﬁrst address chosen-plaintext attack only, and later
show how to extend the scheme to resist chosen-ciphertext
attack as well. Before we give a formal description of the
scheme, we deﬁne bilinear maps (aka. pairings).
Bilinear maps and group generator. Let G, GT be
groups of prime order p (so they are cyclic). A pairing is an
eﬃciently computable map e : G × G → GT such that the
following two conditions hold:
• Bilinearity: For all g1, g2 ∈ G and x, y ∈ Z, we have
e(gx
1 , gy
2 ) = e(g1, g2)xy.
• Non-degeneracy: For any generator g of G, e(g, g) is a
generator of GT .
Note that e(·,·) is symmetric since e(gx, gy) = e(g, g)xy =
e(gy, gx).
A bilinear group generator G is an algorithm that on input
1κ returns ˜G, which is a description of groups G, GT of order
p and the bilinear map e as deﬁned above, and also p and a
generator g of G.
Construction. We now specify the scheme RIBE [G] =
(S,SK,KU ,DK,E ,D,R) in detail. We assume that all users
agree on how time is divided by time periods and how each
time period is speciﬁed, e.g. by days and “04.14.08”. In our
RIBE scheme messages are encrypted using identity and
time. Identity is a string associated with any user, e.g. an
email “PI:EMAIL”. Time indicates when the ciphertext
is supposed to be decrypted, e.g. on 04.14.08. The message
space M is GT . The identity space I is {0, 1}∗
, and the time
space T is an arbitrary bitstring set of size polynomial in the
security parameter. We require that the strings specifying
identities and times can be distinguished, e.g. by reserving
the most signiﬁcant bit (MSB) 0 for identity strings and 1
for time strings. In our construction the identity and time
∗
strings are mapped to unique elements of Z
p (if needed, a
collision-resistant hash function {0, 1}∗ → Z
∗
p can be used).
From now on for simplicity we assume that identity and time
are distinguished elements in Z
For x, i ∈ Z, set J ⊆ Z the Lagrange coeﬃcient Δi,J(x) is
∗
p.
deﬁned as
Δi,J(x)
def
=
(cid:4)
j∈J, j(cid:4)=i
(cid:6)
(cid:5)
x − j
i − j
For x ∈ Z, g ∈ GT , J ⊆ Z, h1, . . . , h|J| ∈ G, we deﬁne
Hg,J,h1,...,h|J| (x)
2
def
= gx
(cid:8)
Δi,J (x)
h
i
|J|(cid:4)
(cid:7)
i=1
Our construction uses the binary tree data structure, so
we introduce some notation here. We denote by root the
root node. If v is a leaf node then Path(v) denotes the set
u1
u2
u3
u4
u5
No user is revoked
u1
u2
u3
u4
u5
User u3 is revoked
Nodes marked as revoked by KUNodes
Nodes for key updates output by KUNodes
Figure 1: A pictorial description of the actions of
KUNodes function used in Construction 4.1.
of nodes on the path from v to root (both v and root inclu-
sive). If v is a non-leaf node then vl, vr denote left and right
child of v. We assume that nodes in the tree are uniquely
encoded as strings, and the tree is deﬁned by all of its nodes
descriptions.
We also deﬁne a function KUNodes which is used to com-
pute the minimal set of nodes for which key update needs
to be published so that only non-revoked users at time t are
able to decrypt ciphertexts.6 The function takes input a bi-
nary tree T, revocation list rl and time t and outputs a set
of nodes, which is the minimal set of nodes in T such that
none of the nodes in rl with corresponding time ≤ t (users
revoked on or before t) have any ancestor (or, themselves)
in the set, and all other leaf nodes (corresponding to non-
revoked users) have exactly one ancestor (or, themselves) in
the set. The function operates as follows. First mark all the
ancestors of revoked nodes as revoked, then output all the
non-revoked children of revoked nodes. Refer to Figure 1 for
a pictorial depiction. Here is a formal speciﬁcation.
KUNodes(T, rl, t)
X, Y ← φ
∀(vi, ti) ∈ rl
∀x ∈ X
if ti ≤ t then add Path(vi) to X
if xl /∈ X then add xl to Y
if xr /∈ X then add xr to Y
If Y = φ then add root to Y
Return Y
We are now ready to present the description of Revocable
IBE. We could not use the algorithms of the Fuzzy IBE cons-
truction from [24] in a black-box manner. The reason is that
there the polynomial for each key is picked independently by
the key generation algorithm. And in our construction some
6A similar function was used in [1].
polynomials need to be shared by diﬀerent keys. After we
provide the details for each algorithm, we give some intu-
ition and relation to the construction from [24] following
“//” sign.
Construction 4.1. Let G be a prime order bilinear group
generator. Let J be {1, 2, 3}.
• Setup S(1κ, n):
$← G(1κ); a
$← Zp; g1 ← ga; g2, h1, h2, h3
$← G.
( ˜G, p, g)
Let rl be an empty set and T be a binary tree with at
least n leaf nodes.
Return pk = (g, g1, g2, h1, h2, h3) , mk = a; rl , st = T.
// Besides the additional outputs of rl, st, it is essen-
tially the same as Setup of Fuzzy IBE where 2 out of
2 attributes need to be matched.
• Private Key Generation SK(pk, mk, ω, st):
Parse pk as (g, g1, g2, h1, h2, h3), mk as a, st as T.7
Pick an unassigned leaf node v from T and store ω in
that node.
∀x ∈ Path(v)
$← Zp,
if ax is undeﬁned, then ax
store ax in node x,