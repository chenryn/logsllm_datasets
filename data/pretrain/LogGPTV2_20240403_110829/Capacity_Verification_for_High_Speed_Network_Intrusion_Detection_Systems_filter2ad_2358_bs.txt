We advocate enabling an IDS to provide performance adaptation, that is, the
best possible performance for the given operation environment. It is extremely
diﬃcult, if not impossible, for an IDS to be 100% accurate [2]. The optimal
performance of an IDS should be determined by not only its ROC (Receiver
Operating Characteristics) curve of detection rate versus false alarm rate, but
also its cost metrics (e.g., damage cost of intrusion) and the probability of in-
trusion [10]. Accordingly, performance adaptation means that an IDS should
always maximize its cost-beneﬁts for the given (current) operational conditions.
For example, if an IDS is forced to miss some intrusions (that can otherwise
be detected using its “signature base”), for example, due to stress or overload
attacks, it should still ensure that the best value (or minimum damage) is pro-
vided according to cost-analysis on the circumstances. As a simple example, if
we regard buﬀer-overﬂow as more damaging than port-scan (and for argument
sake all other factors, for example., attack probability, detection probability, are
equal), then missing a port-scan is better than missing a buﬀer-overﬂow. In this
research, we extend work on IDS cost-analysis [10,15] to provide a framework
for considering the trade-oﬀs of IDS performance objectives, develop techniques
for run-time performance measurement and monitoring, and for dynamic adap-
254
W. Lee et al.
tation and reconﬁguration of IDS policies and mechanisms. We currently focus
our work on misuse detection systems.
The rest of the paper is organized as follows. We ﬁrst analyze IDS perfor-
mance issues, objectives, and discuss the need for performance adaptation. We
then discuss how to enable performance adaptation in real-time IDS. We de-
scribe prototype real-time adaptive IDSs, and present experiments and results.
We then compare our research with related work, and conclude the paper with
a summary and a discussion on future work.
2 IDS Performance Analysis
In this section, we analyze the trade-oﬀs in IDS performance objectives from an
optimization and control perspective, and discuss the danger of static conﬁgu-
ration and hence the need for performance adaptation. We found it necessary to
introduce a more abstract formalism in order to study the problems in a general
fashion. Later in the paper, we will explain how these principles can be applied
in practice.
2.1 Deﬁnitions and Preliminaries
Audit Records. Audit records (or audit events, e.g., packets) are categorized
according to their types. Examples of (high level) types are telnet, http, icmp
echo request, etc. There are a total of N record types that an IDS accepts.
Each audit record is either part of a normal session, or an attack of a certain
label. We denote Ei as an arbitrary audit record of type i. Audit record types
are characterized by their prior probabilities πi, which denote the probability
that a given record belongs to type i.
Attacks. There are a certain number of attacks associated with each audit
event type. For example, a telnet connection (and its packets) can be part of
a “port-scan”, and there can be a “guess-password” or “buﬀer-overﬂow” attack
in it. Denote Ni as the number of “known” attacks associated with audit event
type i. That is, for type i, the IDS has analysis tasks and detection rules for only
Ni attacks (other attacks are “unknown” to the IDS). We denote the attacks as
Aij, where j = 1, 2,··· , Ni. We say that Ei ← Aij when Aij is present in Ei,
and Ei ← Ai0 when audit event Ei is normal. There is a total of
Ni known
attacks to the IDS. Attacks are characterized by the following quantities:
(cid:1)N
i=1
– Prior Probability: The probability pij that an event of type i contains Aij,
pij =
i = 1, 2,··· , N, j = 1, 2,··· , Ni, where pi0 is the prior probability that
– False Alarm Cost: The cost associated with a response triggered by a false
(cid:1)Ni
that is,
pij = IProb(Ei ← Aij). Clearly, from the perspective of IDS,
1,
an audit record of type i is normal, that is, pi0 = IProb(Ei ← Ai0).
alarm that attack Aij is present, denoted as Cα
ij.
denoted as Cβ
ij.
– Damage Cost: The cost associated with attack Aij being missed by the IDS,
j=0
Performance Adaptation in Real-Time Intrusion Detection Systems
255
Analysis Tasks. Each audit record is subject to a number of analysis tasks in
the IDS, including data (pre)processing, rule checking (i.e.,intrusion detection),
and logging. Denote Ki be the (maximum) number of tasks for audit event type
r← Aij
i. We denote the tasks as Rij, where j = 1, 2,··· , Ki. We say that Rij
when a Detection Rule Rij reports the presence of attack Aij in audit event Ei.
r← Ai0 when Rij reports that event Ei is normal. The detection
We say that Rij
rules are characterized by the following quantities:
– The False Alarm Rate of Rij denoted by αij is deﬁned as αij = IProb(Rij
r←
Aij | Ei ← Ai0)
IProb(Rij
r← Ai0 | Ei ← Aij)
– The False Negative Rate of Rij denoted by βij
is deﬁned as βij =
Each task Rij (regardless whether it is a detection rule or not) is also char-
acterized by its Computation Time tij.
(cid:2)
System Conﬁguration. The run-time conﬁguration of an IDS is characterized
by the collection (union) of its analysis tasks. That is, IDS conﬁguration P =
(cid:2)
i=1,···,N Pi, where Pi is the collection of tasks for event type i, that is, Pi =
Rij (note that not all tasks are detection rules). A statically conﬁgured
j=1,···,Ki
IDS has a ﬁxed set of tasks regardless of changes in run-time conditions.
2.2 Performance Metrics
Expected Value. The purpose of a real-time IDS is to detect intrusions and
prevent damages. Instead of using mere statistical accuracy, we should eval-
uate an IDS according to its value (or cost-beneﬁt). For each attack Aij, an
IDS equipped with the detection rule Rij (and the necessary preprocessing and
logging tasks) for Aij provides the expected value:
Vij = Cβ
ijπipij(1 − βij) − Cα
ijπi(1 − pij)αij
(1)
The ﬁrst term is the loss (damage) prevented because of true detection, and
the second term is the loss incurred because of false alarms. The total value of
an IDS depends on its conﬁguration, that is, its collection of analysis tasks and
hence the attacks that it “covers”. For the “default” conﬁguration P that covers
all known attacks, the value is V(P) =
(cid:1)Ni
(cid:1)N
Vij.
i=1
j=1
Response Time. Figure 1 shows a generic IDS processing ﬂow. Upon arrival
in the system, audit records are placed in a (common) queue (e.g., the libpcap
buﬀer). The queue has only one server, the audit data processing and intru-
sion analysis unit. The nature of the service performed on an audit record item
depends on its type. That is, records of type i are only subject to the tasks be-
longing to Pi. The processing and analysis tasks for each audit record are applied
sequentially, as depicted in Figure 2. That is, each event goes through a sequence
of analysis tasks. The process terminates if a detection rule Rij determines that
256
W. Lee et al.
Event
Stream
Event Queue
Type 1
Type 2
Normal
Attack
Normal
Attack
Type N
Normal
Attack
Per−type processing and detection
Fig. 1. The IDS Processing Flow. All events are directed to a common queue, but the
nature of the service performed on each event depends on event type.
Ei
R
i1
R
i2
Ai0
(Normal)
A
iKi
R
iKi
Aij
Fig. 2. Processing of events of type i. That tasks include preprocessing, rule-checking,
and logging. They are applied serially.
the event is (part of) an intrusion. Or the process ends when all analysis is done
and the event is deemed normal. The expected system time (queuing time plus
service time - [13]) for an audit record of type i(cid:2) that arrives in an IDS with
conﬁguration P at a time when there are mi records of type i, i = 1, 2,··· , N is
given by:
N(cid:3)
T (P) = (
miTi) + Ti(cid:1)
(2)
i=1
where Ti denotes the expected service time for a record of type i. The system
time corresponds to the time interval elapsed between an audit record entering
the system and a decision being made about the presence or absence of an
attack in the event. We call it the response time of the IDS. We are interested
in the “worst case” when the queue is close to full. In such a case, we have
miTi (cid:2) Ti(cid:1), that is, the queuing time dominates the service time for a
(cid:1)N
i=1
Performance Adaptation in Real-Time Intrusion Detection Systems
257
typical event. Equation (2) becomes:
T (P) =
miTi, where Ti =
N(cid:3)
i=1
Ni(cid:3)
j=0
pijTij,
and Tij =
j(cid:3)
(cid:3)=1
t(cid:2)
i(cid:3)
(3)
Tij denotes the service time of an event of type i which is matched by detection
rule Rij. Here, Ti0 = TiKi, since, as depicted in Figure 2, an event of type i which
is labeled as normal has the same service time of an event which is matched by
the last detection rule RiNi. Note that here we include (“factor in”) the time
of common preprocessing and logging tasks for event type i into the time of
the Ni detection rules (Ni ≤ Ki), one for each known attack associated with
event type i. Tij is computed as a sum of time of all previous tasks because
Ri1, Ri2,··· , RiNi are applied sequentially. Each t(cid:2)
il is the sum of the time of
detection rule Ril (i.e., til), and the time of common preprocessing and logging
tasks for event type i. Recalling that
pij = 1, we have:
(cid:1)Ni
j=0
T (P) =
Ni(cid:3)
N(cid:3)
where qij = 1 − j−1(cid:3)
j=1
i=1
uijt(cid:2)
ij,
pi(cid:3), for j ≥ 1,
qi1 = 1, and uij = miqij
(4)
(cid:3)=1
2.3 Performance Optimization
An IDS should provide broad detection coverage to maximize its V(P). This
requires that the IDS perform a thorough analysis (e.g., do stateful packet re-
assembly and analysis), and include many detection rules. This in turn requires
a conﬁguration P with many complex tasks, resulting in a large T (P).
On the other hand, the main constraint in real-time intrusion detection is
that T (P) needs to be bounded. As audit events stream into the system queue
(see Figure 1), they need to be serviced (taken oﬀ) at a rate faster than the
arrival rate. Otherwise, the queue (with limited size) will be ﬁlled up, and remain
so, with the not yet serviced events, thus the newly arriving events cannot be
placed in the queue. This phenomenon is referred to as audit data “dropping”.
The consequence is that the false negative rate(s) βij of some detection rule(s)
Rij will increase due to missing information (evidence). The IDS value Vij (see
Equation (1)) and hence V(P) will then also decrease. Therefore, in order to
provide the expected value, an IDS conﬁguration should satisfy the constraint
T (P) ≤ Dmax, where Dmax is the mean audit event inter-arrival time.
Our goal is then to conﬁgure an IDS to provide the best value while oper-
ating under the above constraints. That is, if an IDS cannot accommodate all
desirable analysis tasks (without violating the constraints), it should just include
the more valuable tasks (we also assume that additional and orthogonal opti-
mization techniques, such as rule-set ordering, can be used). For example, an
258
W. Lee et al.
IDS should always detect “buﬀer-overﬂow” and only analyze “slow scan” when
time permits. More formally, we need to solve the following problem:
N(cid:3)
Ni(cid:3)
i=1
j=1
Vijxij
max
xij
V(P) =
N(cid:3)
Ni(cid:3)
subject to T (P) =
ijxij ≤ Dmax
where xij = 1 if Rij is active in P and xij = 0 otherwise
uijt(cid:2)
i=1
j=1
(5)
The solution is the set of xij values, which speciﬁes an IDS conﬁguration
by indicating which tasks should be included (active). This is known as the
Knapsack problem (e.g., [18,22]) in the optimization literature. Note that pre-
processing and logging tasks in P are “factored in” (included in) the detection
rules in the following ways: as long as a detection Rij for event type i is active,
the common preprocessing and logging tasks for event type i are also included
in P; otherwise, when all detection rules for event type i are deactivated, these
non-detection tasks for i can also be excluded from P (Alternatively, one may
still want to at least log type i events after some minimum amount of processing.
For simplicity sake, we omit the time and value in such a situation).
Instead of requiring exact measurements of the parameter values (e.g., pij)
when solving Problem (5), a more meaningful approach is to allow a value range
(with upper and lower bounds) for each parameter. For a feasible IDS conﬁgu-
ration P (speciﬁed by a set of xij values), there is a range of V(P) values (while
the constraint T (P) ≤ Dmax is always satisﬁed) because of the ranges of param-
eter values. The “worst-case” is when V(P) is the minimal. The optimization
problem is then to ﬁnd an IDS conﬁguration that maximizes the minimal value.
In [5], we showed that we can convert the resulting robust max-min problem
into an equivalent Knapsack problem, with computational properties similar to
the original problem.
2.4 Static Conﬁguration vs. Adaptation
The above optimization problem is often implicitly studied in IDS development
and (initial) deployment time. That is, developers and on-site engineers often use
knowledge of threat models and assumptions on operation environments to make
the appropriate design and customization decisions so that the IDS provides the
best performance under the constraints. However, as examples in Section 2.4
show, current IDSs do not have the mechanisms to continuously monitor its
performance and the conditions of its run-time environment. That is, they are
usually statically conﬁgured in run-time. Such systems are not optimal when
run-time conditions change, and are vulnerable to attacks aimed to elude IDS.
We note that a solution to Problem (5) (i.e., the optimal IDS conﬁguration)
is only valid for a given set of parameter value ranges. Among them, πi, mi,