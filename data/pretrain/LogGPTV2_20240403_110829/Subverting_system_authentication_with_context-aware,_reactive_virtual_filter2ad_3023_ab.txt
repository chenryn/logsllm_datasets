satisfy this assumption.
If the target is encrypted with FDE, our goal is to view the
encrypted data by breaking the authentication. Physical machines
with pre-boot FDE authentication are immune to our attack since
to really decrypt the data, we have to provide the correct key.
This is different compared to authentication subversion. But if
the FDE machines are protected by post-boot authentication, they
are vulnerable.
Scope and Assumptions. In this paper, we focus on subverting
systems atop x86 architectures. Since the attacker owns the virtu-
alization, none of the virtualization-based defenses in the recent
literature (e.g., [14, 22, 46]) are applicable to detecting our attack.
However, we pessimistically assume the presence of powerful in-
guest security software, such as rootkit detectors and integrity
checkers. Our goal is to undermine these by tampering with their
state (similar to our authentication tampering).
We also assume that attackers have access to standard binary
reverse engineering tools (e.g., [6, 20, 28]). In this paper we do not
cover or improve any of these existing techniques; we apply them to
gain instruction-level knowledge of the victim binary code.
Attackers could be malicious cloud providers, benign providers
that have been compromised (perhaps by insider threats), individual
users such as script kiddies and criminals, or even law-enforcement
ofﬁcials attempting to penetrate criminal-owned computers.
3. ATTACK OVERVIEW
3.1 Working Example
We illustrate our approach using a working example that targets
the UNIX/Linux login program (from shadow-4.1.4.2) as
the victim software. Our goal is to dynamically tamper with the
program’s execution state to gain access to the system without
knowing any password.
231
if (pw_auth (user_passwd, username, reason, (char *) 0) == 0) {
 804a868:    a1 0c 62 05 08           mov    0x805620c,%eax
 804a86d:    c7 44 24 0c 00 00 00     movl   $0x0,0xc(%esp)
 804a874:    00
 804a875:    89 3c 24                 mov    %edi,(%esp)
 804a878:    89 44 24 08              mov    %eax,0x8(%esp)
 804a87c:    a1 48 65 05 08           mov    0x8056548,%eax
 804a881:    89 44 24 04              mov    %eax,0x4(%esp)
 804a885:    e8 86 87 00 00           call   8053010
 804a88a:    85 c0                    test   %eax,%eax
 804a88c:    0f 84 6d fd ff ff        je     804a5ff
            goto auth_ok;
}
Figure 1: Binary Code Snippet of the login Program.
   1 execve("/bin/login", ["login"], [/* 16 vars */]) = 0
   2 uname({sys="Linux", node="ubuntu", ...}) = 0
 ...
 409 open("/etc/passwd", O_RDONLY)           = 4
 410 fcntl64(4, F_GETFD)                     = 0
 411 fcntl64(4, F_SETFD, FD_CLOEXEC)         = 0
 412 _llseek(4, 0, [0], SEEK_CUR)            = 0
 413 fstat64(4, {st_mode=S_IFREG|0644, st_size=952, ...}) = 0
 414 mmap2(NULL, 952, PROT_READ, MAP_SHARED, 4, 0) = 0x4021a000
 415 _llseek(4, 952, [952], SEEK_SET)        = 0
 416 munmap(0x4021a000, 952)                 = 0
 417 close(4)                                = 0
 418 open("/etc/shadow", O_RDONLY)           = 4
 419 fcntl64(4, F_GETFD)                     = 0
 420 fcntl64(4, F_SETFD, FD_CLOEXEC)         = 0
 421 _llseek(4, 0, [0], SEEK_CUR)            = 0
 422 fstat64(4, {st_mode=S_IFREG|0640, st_size=657, ...}) = 0
 423 mmap2(NULL, 657, PROT_READ, MAP_SHARED, 4, 0) = 0x4021a000
 424 _llseek(4, 657, [657], SEEK_SET)        = 0
 425 munmap(0x4021a000, 657)                 = 0
 426 close(4)                                = 0
 ...
Figure 2: System Call Trace Snippet of the login Program.
Figure 1 shows a static binary code snippet of login, which calls
the pw_auth function for authentication. A system call (syscall)
trace is presented in Fig. 2. It opens the “/etc/passwd” and
“/etc/shadow” ﬁles and maps their ﬁle contents into memory
(using the mmap2 syscall).
3.2 Attack Method
In general, we can partition our attacks into two classes based on
instrumentation granularity. The ﬁrst class of attacks dynamically
tampers with the instruction execution state (e.g., the instruction
operand). We term this an INSTVMI attack, because the instrumenta-
tion is at the instruction level and it relies on instruction translation or
emulation-based software virtualization. INSTVMI usually runs in
emulation-based software virtualization, such as QEMU. (INSTVMI
can also be implemented using a single step execution mode in
hardware virtualization, but we eschew this option as more difﬁcult.)
The second class of attacks tampers with the syscall execution state
(e.g., the syscall arguments and return values). We term these
SYSVMI attacks, because the instrumentation is at the syscall level
and can be implemented using hardware virtualization, such as
Xen/KVM. Thus, we can use the following strategies:
Instruction Execution Tampering. Since the login authentica-
tion occurs in function pw_auth, we can choose from a number
of candidate instructions (boxed in Fig. 1) as well as their data
dependencies for the tampering, resulting in various approaches:
• Tampering with Instruction Opcodes. Machine instruction
opcodes can be corrupted to change the program’s semantics.
For instance, the VMM can locate virtual address 804a885 of
the login process right after it is loaded into memory, and di-
rectly change the machine code bytes e8 86 87 00 00 (which
encode the call 8053010 instruction), to b8 00 00 00 00
(mov $0, %eax); or it can locate virtual address 804a88c and
change opcode 0f 84 (je) to 0f 85 (jne). Note that at the
VMM layer there is no read-only protection of the instruction
code, leaving the VMM free to corrupt arbitrary bytes.
• Tampering with Instruction Operands. The VMM can also
corrupt instruction operands, such as zeroing the return value
(in eax) of the function call to pw_auth at 804a885. It can
also modify the processor status ﬂags (EFLAGS) resulting
from test instruction “test %eax, %eax” at 804a88a. For
this type of tampering, we must dynamically intercept the
instruction. Also, while instruction opcode tampering can be
theoretically detected by periodic (and often computationally
expensive) memory integrity checking, none of the existing
techniques can detect register value tampering.
These tampering techniques from the virtualization-layer facili-
tate successful authentication irrespective of the password entered,
affording unrestricted access to the target system. While opcode
tampering can be implemented without instruction level monitoring
(e.g., by changing the opcode right after the code is loaded at the
syscall event level), operand tampering must precisely capture the
execution context (e.g., when the program counter reaches a speciﬁc
virtual address) at the instruction level.
Syscall Execution Tampering. Aside from instruction-level tam-
pering, we can also launch syscall-level attacks to tamper with data
that is directly or indirectly related to f (x) =c . For example, we
can forge c with a hash value generated from our own password.
Notice that for this particular login example, as shown in Fig. 2,
the system opens a disk ﬁle /etc/shadow that stores the pass-
word hash values, and maps (mmap2) the ﬁle contents to memory.
As such, we present two strategies:
• Tampering with Disk-IO Syscalls. Even though we do not
know the password in /etc/shadow, we can replace this
ﬁle with a ﬁle we provide from the virtualization-layer. This
is actually a MitM attack that redirects the ﬁle-open syscall
to an attacker-controlled password ﬁle.
• Tampering with Memory-Map Syscalls. If it is difﬁcult to
provide an attacker-controlled password ﬁle at the virtualiza-
tion layer (e.g., due to the semantic gap), there is an even
simpler attack: We can attack the mmap2 syscall by replacing
the memory contents mapped by this syscall (immediately
after it ﬁnishes) with the forged password hash values.
Through syscall execution tampering, the login process con-
sumes security-critical data, such as the password hash values,
that are controlled by attackers. Full access is thereby granted
by entering a known password. The syscall execution tampering
approach is more appealing than instruction tampering, since it is
more transparent to the victim code, and does not require a de-
tailed instruction level understanding of the victim application. Our
experiments demonstrate that we can transparently break the authen-
tication process of sshd, vsftpd, telnetd, and winlogon
without any reverse engineering of their binary code by using syscall
execution tampering.
3.3 Overview
To realize the above attacks, we must bridge the semantic gap
to precisely identify the target concrete execution contexts at the
VMM layer. To do so, we present a context-aware, reactive VMI as
a foundation for our attack. It has the following features:
(cid:115)(cid:349)(cid:272)(cid:410)(cid:349)(cid:373)(cid:3)
(cid:87)(cid:396)(cid:381)(cid:272)(cid:286)(cid:400)(cid:400)
(cid:87)(cid:396)(cid:381)(cid:272)(cid:286)(cid:400)(cid:400)(cid:3)
(cid:24)(cid:258)(cid:410)(cid:258)
login (cid:87)(cid:396)(cid:381)(cid:272)(cid:286)(cid:400)(cid:400)
(cid:28)(cid:4)(cid:121)
(cid:28)(cid:17)(cid:121)
(cid:28)(cid:17)(cid:121)
(cid:28)(cid:18)(cid:121)
(cid:28)(cid:24)(cid:121)
(cid:28)(cid:47)(cid:87)
(cid:28)(cid:94)(cid:87)
(cid:28)(cid:17)(cid:87)
(cid:28)(cid:17)(cid:87)
(cid:28)(cid:94)(cid:47)
(cid:28)(cid:24)(cid:47)
(cid:857)
(cid:115)(cid:349)(cid:272)(cid:410)(cid:349)(cid:373)(cid:3)
(cid:87)(cid:396)(cid:381)(cid:272)(cid:286)(cid:400)(cid:400)
(cid:87)(cid:396)(cid:381)(cid:272)(cid:286)(cid:400)(cid:400)(cid:3)
(cid:18)(cid:381)(cid:282)(cid:286)
(cid:75)(cid:393)(cid:286)(cid:396)(cid:258)(cid:410)(cid:349)(cid:374)(cid:336)(cid:3)(cid:94)(cid:455)(cid:400)(cid:410)(cid:286)(cid:373)(cid:400)(cid:3)(cid:894)(cid:62)(cid:349)(cid:374)(cid:437)(cid:454)(cid:876)(cid:116)(cid:349)(cid:374)(cid:282)(cid:381)(cid:449)(cid:400)(cid:895)
(cid:94)(cid:455)(cid:400)(cid:272)(cid:258)(cid:367)(cid:367) (cid:28)(cid:454)(cid:286)(cid:272)(cid:437)(cid:410)(cid:349)(cid:381)(cid:374)(cid:3)
(cid:100)(cid:258)(cid:373)(cid:393)(cid:286)(cid:396)(cid:349)(cid:374)(cid:336)
(cid:18)(cid:381)(cid:374)(cid:410)(cid:286)(cid:454)(cid:410)(cid:882)(cid:258)(cid:449)(cid:258)(cid:396)(cid:286)(cid:853)(cid:3)
(cid:90)(cid:286)(cid:258)(cid:272)(cid:410)(cid:349)(cid:448)(cid:286)(cid:3)(cid:47)(cid:374)(cid:410)(cid:396)(cid:381)(cid:400)(cid:393)(cid:286)(cid:272)(cid:410)(cid:349)(cid:381)(cid:374)
(cid:47)(cid:374)(cid:400)(cid:410)(cid:396)(cid:437)(cid:272)(cid:410)(cid:349)(cid:381)(cid:374)(cid:3)(cid:28)(cid:454)(cid:286)(cid:272)(cid:437)(cid:410)(cid:349)(cid:381)(cid:374)(cid:3)
(cid:100)(cid:258)(cid:373)(cid:393)(cid:286)(cid:396)(cid:349)(cid:374)(cid:336)
(cid:68)(cid:258)(cid:367)(cid:349)(cid:272)(cid:349)(cid:381)(cid:437)(cid:400)(cid:3)(cid:115)(cid:349)(cid:396)(cid:410)(cid:437)(cid:258)(cid:367)(cid:3)(cid:68)(cid:258)(cid:272)(cid:346)(cid:349)(cid:374)(cid:286)(cid:3)(cid:68)(cid:381)(cid:374)(cid:349)(cid:410)(cid:381)(cid:396)
(cid:894)(cid:121)(cid:1012)(cid:1010)(cid:895)(cid:3)(cid:44)(cid:258)(cid:396)(cid:282)(cid:449)(cid:258)(cid:396)(cid:286)
Figure 3: Architecture Overview of Our Attack.
• Introspection. Our approach is introspective [13], since it
runs outside the guest-OS and interprets certain guest events,
such as particular syscall executions (e.g., the arguments to
syscall open and the return value of mmap2).
• Reactive. Unlike the traditional passive, read-only introspec-
tion techniques (e.g., [9, 11, 13, 34]), our approach is reactive.
That is, attacker-deﬁned tampering actions are triggered by
certain attacker-deﬁned execution contexts.
• Context-aware. The contextual criteria that trigger attacker
actions can range over process level, syscall level, call stack
level, and instruction level properties, depending on the attack
strategies.
4. DESIGN AND IMPLEMENTATION
To show the generality of our techniques, we have designed
two sets of attacks based on our context-aware, reactive VMI and
different types of virtualization: (1) SYSVMI, which uses hardware
virtualization to perform syscall tampering; and (2) INSTVMI, which
uses software virtualization to perform instruction level tampering.
In the following, we present the step-by-step design and implemen-
tation of these techniques. We ﬁrst present SYSVMI in §4.1 since it
is the easier and more appealing of the two, followed by INSTVMI
in §4.2.
4.1 SYSVMI
The essence of our attack is to tamper with the program state at
precise moments guided by execution context details identiﬁed at
the virtualization layer. In general, an execution context can belong
to the following categories (from coarse- to ﬁne-grained):
• C1: a particular process execution;
• C2: a particular syscall in C1;
• C3: a particular instruction in C1;
• C4: a particular instruction (C3) under a particular call stack.
However, at the virtualization-layer, there is almost no abstraction.
Thus, the following sections examine how to bridge the semantic gap
to identify coarse-grained execution contexts C1–2 (see §4.1.1) and
ﬁne-grained contexts C3–4 (see §4.2). We then present the design
and implementation of SYSVMI in §4.1.2 and §4.1.3, respectively.
232
4.1.1 Coarse-Grained Context Awareness
Process execution context identiﬁcation (C1). Nearly all modern
OSes for x86 architectures use paging to support isolated, private
virtual address spaces for processes. Speciﬁcally, each process has a
private page directory (pgd) to which control register CR3 typically
points; the value of CR3 can hence be used to differentiate processes.
To the best of our knowledge, nearly all x86 introspection techniques
use CR3 to isolate the process execution context (cf., [21, 22]).
However, the value of CR3 does not directly reveal process iden-
tities; for example, it does not reveal the process’s name. Process
identities are needed for our attack to precisely and surgically corrupt
only the security-relevant code and data without altering the behavior
of the rest of the system. One way to derive process identities from
CR3 is to traverse the guest OS data structures where that data
is stored (e.g., task_struct in Linux and EPROCESS in Win-
dows). However, the resulting implementation is speciﬁc to ﬁne de-
tails of the guest OS version, and therefore does not generalize well.
We therefore developed a kernel-independent approach that com-
bines binary code ﬁngerprinting and the CR3 identiﬁcation from
Antfarm [21] to uniquely identify victim processes from the virtu-
alization layer. Rather than using process names (which could be
modiﬁed by cloud users trying to evade our attack), we hash (MD5)
the code page in which each process’s main entry point resides,
and then compare the hash values at run-time to identify the target
process. Process entry points can be acquired by disassembling
the binary code, and are also divulged when pushed onto the stack
by __libc_start_main, whose symbol is always present in
dynamic linked binaries. They are difﬁcult to obfuscate and were
not obfuscated in any of the binaries we studied, since they must be