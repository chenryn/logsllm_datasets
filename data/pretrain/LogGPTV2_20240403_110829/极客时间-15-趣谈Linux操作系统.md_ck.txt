# sysctl -pnet.ipv4.ip_forward = 1 sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE 10\. 如果 DNS 没配错，可以进行 apt-get update。在这里，请记住 qemu-system-x86_64 的启动命令，这里面有 CPU 虚拟化KVM，有内存虚拟化、硬盘虚拟化、网络虚拟化。接下来的章节，我们会看内核是如何进行虚拟化的。
## 总结时刻今天我们讲了虚拟化的基本原理，并且手动创建一个可以上网的虚拟机。请记住下面这一点，非常重要，理解虚拟机启动的参数就是理解虚拟化技术的入口。学会创建虚拟机，在后面做内核相关实验的时候就会非常方便。具体到知识点上，这一节你需要需要记住下面的这些知识点：-   虚拟化的本质是用 qemu 的软件模拟硬件，但是模拟方式比较慢，需要加速；-   虚拟化主要模拟 CPU、内存、网络、存储，分别有不同的加速办法；-   CPU    和内存主要使用硬件辅助虚拟化进行加速，需要配备特殊的硬件才能工作；-   网络和存储主要使用特殊的半虚拟化驱动加速，需要加载特殊的驱动程序。
## 课堂练习请你务必自己使用 qemu，按照上面我写的步骤创建一台虚拟机。欢迎留言和我分享你的疑惑和见解，也欢迎可以收藏本节内容，反复研读。你也可以把今天的内容分享给你的朋友，和他一起学习和进步。![](Images/1a5564dd4e1c9f25d4772c7f844ca84a.png){savepage-src="https://static001.geekbang.org/resource/image/8c/37/8c0a95fa07a8b9a1abfd394479bdd637.jpg"}
# 50 \| 计算虚拟化之CPU（上）：如何复用集团的人力资源？上一节，我们讲了一下虚拟化的基本原理，以及 qemu、kvm之间的关系。这一节，我们就来看一下，用户态的 qemu 和内核态的 kvm如何一起协作，来创建虚拟机，实现 CPU 和内存虚拟化。这里是上一节我们讲的 qemu 启动时候的命令。    qemu-system-x86_64 -enable-kvm -name ubuntutest  -m 2048 -hda ubuntutest.qcow2 -vnc :19 -net nic,model=virtio -nettap,ifname=tap0,script=no,downscript=no接下来，我们在[这里下载](https://www.qemu.org/)qemu 的代码。qemu 的 main函数在 vl.c 下面。这是一个非常非常长的函数，我们来慢慢地解析它。
## 1. 初始化所有的 Module第一步，初始化所有的 Module，调用下面的函数。    module_call_init(MODULE_INIT_QOM);上一节我们讲过，qemu作为中间人其实挺累的，对上面的虚拟机需要模拟各种各样的外部设备。当虚拟机真的要使用物理资源的时候，对下面的物理机上的资源要进行请求，所以它的工作模式有点儿类似操作系统对接驱动。驱动要符合一定的格式，才能算操作系统的一个模块。同理，qemu为了模拟各种各样的设备，也需要管理各种各样的模块，这些模块也需要符合一定的格式。定义一个 qemu 模块会调用 type_init。例如，kvm 的模块要在accel/kvm/kvm-all.c 文件里面实现。在这个文件里面，有一行下面的代码：    type_init(kvm_type_init); #define type_init(function) module_init(function, MODULE_INIT_QOM) #define module_init(function, type)                                         \static void __attribute__((constructor)) do_qemu_init_ 