pipeline depth, which had a mean load time of 21.2 s.
5
 0 5 10 15 20 25Page load time (s)Non-catergorized timeTransfer timeServer wait timeTLS wait timeQueue wait time 0 1 2 3 4Resource load time (s)Transfer timeServer wait timeTLS wait timeQueue wait time 0 0.2 0.4 0.6 0.8 1 0 5 10 15 20Resource queue wait time (s)IV. HTTP/2
In this section, we analyze HTTP/2 and its impact on Tor
Browser. This section is structured similarly to Section III: We
describe how HTTP/2 works in Section IV-A, list potential
issues in Section IV-B, and analyze real data in Section IV-C.
A. HTTP/2 in Tor Browser
Built on Google’s experimental SPDY protocol, HTTP/2
changes how web pages are loaded: it uses multiplexed con-
nections instead of multiple connections. The client establishes
a single multiplexed connection with each server, able to carry
100 resource requests.4 The responses can arrive in any order,
and requests can be sent at any time without waiting for
responses. To manage concurrent resource loading, the web-
browsing client enforces ﬂow control on incoming responses.
HTTP/2 replaces HTTP/1.1 pipelining on newer versions of
Tor Browser. To our knowledge, its performance on anonymity
networks is largely unevaluated. Web servers have increasingly
adopted HTTP/2. On all major browsers, only pages using TLS
can be loaded with HTTP/2.
B. Issues with HTTP/2
We discuss some potential issues with HTTP/2 here. Later,
we analyze whether or not they affect web browsing.
Head-of-line blocking. With HTTP/2, all resources on the
same server are loaded over a single TCP connection. Since
TCP packets must arrive in order, a stalled connection will
delay every packet and thus every resource currently being
loaded on that connection. In other words, HTTP/2 still suffers
from head-of-line blocking on the transport
layer (TCP),
though it does not cause head-of-line blocking by itself.
Transfer rate. Since a random delay is more likely to affect
many resource loads on HTTP/2, the use of a single TCP
connection renders the client more vulnerable to congestion.
These issues may be exacerbated by poor network conditions
on anonymity networks like Tor, and would be reﬂected in a
poor transfer rate.
Premature connection close. We saw that pipelined con-
nections were often closed prematurely after receiving an
erroneous response. If HTTP/2 connections were to be closed
prematurely, even more resources in ﬂight would be dropped
and have to be requested again, delaying the page load.
Extra round trip for ALPN negotiation. ALPN (Application-
Layer Protocol Negotiation) lets the client determine if the
server supports HTTP/2, and the protocol requires one round
trip. In Tor Browser, we observed that ALPN negotiation hap-
pens after TLS negotiation is complete, even though ALPN’s
speciﬁcations claim that it should be negotiated alongside TLS.
This implies that HTTP/2 can only begin one round trip after
TLS is negotiated. For the duration between TLS completion
and ALPN completion, TB-8.5 defaults to using HTTP/1.1
without pipelining to load resources.
4 This parameter can be changed in the browser.
(a)
(b)
Fig. 4: Categorization of mean resource load time and page
load time on our data set, comparing HTTP/2 on TB-8.5
(http2), pipelining on TB-8.5 (pipeline), and HTTP/1.1
on TB-6.5 (old-pipeline). Note the different scales of the
y-axes.
The extra round trip time slows down the build-up of
resource loading capacity in HTTP/2: it can only load six
resources in the ﬁrst round trip, while pipelining can load six
times the pipeline depth. This undermines the advantage of
using HTTP/2.
C. Data Analysis
We analyze HTTP/2 by comparing it with HTTP/1.1 with
pipelining. To do so, we compare three Tor Browser setups:
TB-8.5 with HTTP/2 (http2), TB-8.5 with pipelining and
no HTTP/2 (pipeline), and TB-6.5 with pipelining and no
HTTP/2 (old-pipeline). Note that we use HTTP/2 to refer
to the protocol and http2 to refer to the data set where
we attempt to load pages on Tor Browser using HTTP/2; in
particular, some servers in http2 do not support HTTP/2.
1) Overall performance: We show the mean page load time
over our full data set in Figure 4. Our results show that HTTP/2
performs a little worse than HTTP/1.1 pipelining on TB-8.5,
and slightly better than pipelining on TB-6.5.
Focusing on the latter result ﬁrst, the poor performance of
TB-6.5 may be because of several ﬂaws later ﬁxed in TB-8.5.
First, TB-6.5 can only establish connections to a server one
at a time, starting the next connection establishment after the
previous has been established. This slows down the ramp up
for resource loading capacity. Second, there are several issues
in its pipelining implementation described in Appendix A, and
we ﬁxed them when re-implementing pipelining in TB-8.5.
TB-6.5 has one signiﬁcant improvement for page loading time
that is not found in TB-8.5, optimistic data (described later in
Section V-C).
On the other hand, the poor performance of HTTP/2 is
surprising. We explore preliminary explanations for this result
in the following.
Did servers support HTTP/2?
We found that in http2, 95% of web pages had at least
one resource sent using HTTP/2.5 Overall, 49% of resources
5 This statistic should not be interpreted as an accurate measurement of
HTTP/2 adoption as we only analyze Alexa’s top 1000 pages.
6
 0 5 10 15 20 25 30http2pipelineold-pipelinePage load time (s)Non-categorized timeTransfer timeServer wait timeTLS wait timeQueue wait time 0 1 2 3 4 5http2pipelineold-pipelineResource load time (s)Transfer timeServer wait timeTLS wait timeQueue wait timewere sent on HTTP/2. (Note that servers with few resources
would never get to use HTTP/2 even if they did support it,
because of ALPN negotiation.) HTTP/2 support and usage is
therefore widespread and well-captured in our data set.
Did a small portion of pages behave poorly?
To determine if a small amount of faulty data biased the
mean result, we examine the page load time difference be-
tween http2 and pipeline by directly comparing between
instances on the same circuit (using the methodology in Sec-
tion III-C). The page load time difference was −0.74 s±6.54 s:
the standard deviation was far higher than the mean, suggesting
http2 was not consistently inferior. If we discarded the top
and bottom 20% of page load time differences, the result would
be −0.11 s ± 1.30 s. The median group of results performed
relatively similarly.
Did certain types of pages behave poorly?
We extracted a number of features from each page and
used Pearson’s r to determine if they were correlated to the
loading time difference between http2 and pipeline. The
maximum r is 1 and smaller values indicate less correlation.
We tested the following features: number of resources, size
of page, height of resource tree, and percentage of HTTP/2
resources. Our results show that none of these features were
notably correlated with the loading time difference, the highest
r being 0.22 between the number of resources and the loading
time difference while other r values were under 0.15. This
means that poor (or good) performance of HTTP/2 compared
to pipelining was not localized to speciﬁc types of pages.
Therefore, these preliminary questions do not explain the
lack of performance improvement of HTTP/2. We explore the
issue further in the following.
2) Categorization of load time: We compare page load
times and resource load times on http2, pipeline and
old-pipeline in Figure 4, again using the methodology in
Section II-C. We see that http2 had a shorter resource load
time, with an especially notable gain on queue wait time: this is
because resources do not have to wait for HTTP/2 connections
to ﬁnish loading previous resources. However, for overall page
load time, the queue wait time advantage on http2 vanishes.
While on average resources have to wait about 40% less in
http2, the resources that contribute to page load time do
not experience such a beneﬁcial decrease in queue wait time.
Note that a resource loaded on a new, separate server waits
for an equal amount of time in HTTP/2 and in HTTP/1.1
with pipelining. If these resources are the ones determining
page load time, this could explain the lack of performance
improvement of HTTP/2.
3) Analysis of potential
issues: We turn to the afore-
mentioned issues in HTTP/2 to determine if they impeded
performance.
Head-of-line blocking. We ﬁrst determine if the use of a
single connection causes head-of-line blocking. To do so, we
measured resource load time speciﬁcally for resources sent on
HTTP/2 connections that were already loading other resources.
Those 5,651 resources never had to wait in queue or connection
establishment, but we did ﬁnd that they waited 1.38 s on aver-
age for server response and took 0.40 s to transfer, compared
to 0.99 s and 0.15 s respectively overall on http2. This does
suggest that HTTP/2 head-of-line blocking is sometimes a
problem on Tor Browser: a server that has already established
an HTTP/2 connection responds and transfers a little more
slowly.
Transfer rate. To ﬁnd out if the use of a single connection
in HTTP/2 affected transfer rates, we summed up the resource
sizes and transfer times of all resources over 500 kB in size.
Dividing the two, we found the data transfer rate on http2
to be 164 kB/s and pipeline to be 347 kB/s. This does
not necessarily mean that HTTP/2 is slower, however: the
data transfer rate is calculated on a per resource basis, and
HTTP/2 allows multiplexing while pipelining does not. On
the top 10 sites, transfer rate on http2 and pipeline were
respectively 343 kB/s and 420 kB/s, a small difference.
Premature connection close. Out of the 99,947 resources we
dispatched on HTTP/2 connections, only 7 of them could not
be loaded before the connection closed prematurely: HTTP/2
connections rarely failed unlike pipelining connections.
Extra round trip for ALPN negotiation. Since we cannot
eliminate this round trip in practice, we cannot analyze its
effect on page loading yet. To do so, we need the second
component of BLAST, the simulator, described in the next
section; the simulator will reveal that the ALPN negotiation
round trip has a minor effect on page load time.
Summary. Despite the fact that there appear to be no sig-
niﬁcant issues with HTTP/2 that affected page loading on
Tor, pages are loaded slightly more slowly in http2 than
pipeline. The main advantages of HTTP/2, superior con-
nection multiplexing and higher resource loading capacity, do
not matter for page loading on Tor Browser. In addition, TB-
8.5 uses a poor fall back for servers that do not support HTTP/2
— HTTP/1.1 without pipelining.
V. DESIGNING A BETTER BROWSER
A. What causes long load times?
Our analysis of HTTP/1.1 with pipelining showed that
increasing the number and depth of pipelines did not improve
page load time. Comparing HTTP/1.1 with pipelining and
HTTP/2, we found that HTTP/2 connection multiplexing did
not improve page load time either. Furthermore, whenever their
performance differed, such a difference was not due to page
structure or size. The lack of improvement in HTTP/2 was not
due to any issues with using a single TCP connection, either.
All of these observations suggest that increasing resource
loading capacity (whether with more/deeper pipelines, or with
HTTP/2 multiplexing) does not solve the issue that loading
pages on Tor Browser is slow. Furthermore, our categorization
of page loading time also suggests that increasing bandwidth
would not signiﬁcantly speed up page loading either. This
would imply that
loading time on Tor Browser is chieﬂy
determined by the minimum number of round trips required to
load a page, which we refer to as minRT T . In our data, we
calculated the r correlation coefﬁcient between minRT T and
7
page load time to be 0.57; detailed results are presented in the
Appendix. In addition, increasing resource loading capacity
and increasing bandwidth would not change minRT T : this
would explain why they do not speed up page loading.
Therefore,
the best way to speed up page loading on
Tor Browser should be to reduce the number of round trips
required to load a page. We cannot do so by simply changing
browser parameters; extensive work with new browser code
and network-wide infrastructure is required to achieve this.
Since the implementation cost of these proposed features is
high, we use simulation to determine their usefulness ﬁrst so
as to motivate implementation.
B. Simulation
The BLAST page loading simulation reads basic informa-
tion about the structure of the page and generates network
events corresponding to its loading. The simulator takes exactly
the following information as input:
Fig. 5: Simulated versus real page load times on our data set
for http2, showing Pearson’s correlation r = 0.63.
C. Proposed features
We propose six improvements to Tor Browser to speed up
page loading here, with varying barriers to implementation:
1) Requires changing browser code/protocol
implementa-
tion: TCP Fast Open, optimistic data, 0-RTT TLS.
2) Requires
new infrastructure: Redirection
HTTP/2 server database, prefetching database.
database,
their parents;
whether it supports TLS, pipelining, and HTTP/2;
• The resource tree: The list of resources, their sizes, and
• The list of servers, which resources each server hosts, and
• The mean bandwidth and round-trip time.
Note that the simulator does not use any resource timing
information; it only needs to know static information about
the web page to be simulated. It simulates TCP connection
establishment, TLS, and ALPN, and the dispatching and load-
ing of every resource. It outputs when and how each resource
was loaded, allowing us to categorize load times as before.
It simplistically uses a constant bandwidth rate and round-trip
time. While we could randomize those, as we are using the
simulator to guide browser design, removing an unnecessary
element of randomness ensures that faster load times are a
consequence of better design.
Our simulator does not simulate random errors and delays,
congestion control on Tor, HTTP/2, or TCP, or random col-
lapse of connections during loading. Despite these limitations,
we demonstrate that our simulator can accurately predict load
times. We set the round-trip time to 0.8 s and the bandwidth to
164 kB/s for http2 and 347 kB/s for pipeline; these were
the same numbers we measured from real data in Section IV-C.
The simulator ﬁnds a mean page loading time of 18.0 s for
http2 and 17.1 s for pipeline, compared to 18.4 s and
17.6 s in our real data sets respectively. The simulated numbers