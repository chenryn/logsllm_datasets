    ```
    REPOSITORY                    TAG      IMAGE ID
      CREATED             SIZE
    vincesestodocker/basic-app    1.0.0    2056b6e48b1a
      29 minutes ago      8.8MB
    ```
这只是一个简单的练习，但它有希望向您展示，如果您无法连接到注册表，您仍然可以传输您的 Docker 映像。接下来的练习更侧重于存储、发布和分发 Docker 映像的常用方法。
## 在 Docker 集线器中存储和删除 Docker 映像
尽管您可以在不支付任何费用的情况下使用 Docker Hub，但您需要知道，您的帐户上只能免费获得一个私有存储库。如果你想要更多，你需要在 Docker 上为每月计划付费。如果 Docker Hub 是您的团队选择使用的解决方案，您将很少只需要一个私有存储库。如果你决定给你一个免费账户，那么你将获得无限数量的免费存储库。
## 练习 3.09:在 Docker 集线器中存储 Docker 映像并删除存储库
在本练习中，您将为您一直在处理的`basic-app`创建一个新的存储库，并将映像存储在 Docker Hub 中。在 Docker Hub 中推送映像后，您还将了解如何删除存储库:
注意
以下练习需要您在 Docker Hub 上拥有自己的帐户。我们将只使用免费存储库，因此您不需要参加每月付费计划，但是如果您还没有在 Docker Hub 上注册免费帐户，请前往[https://hub.docker.com/signup](https://hub.docker.com/signup)。
1.  Log in to your Docker Hub account and, under the `Repositories` section, you'll have the option `Create Repository` as a blue button on the right of the screen. Click this button so that you can set up a repository for the `basic-app` you have been working on:
    ![Figure 3.1: Creating a repository in Docker Hub ](img/B15021_03_01.jpg)
    图 3.1:在 Docker Hub 中创建存储库
2.  When creating a new repository, you'll be presented with a page like the one that follows. Fill in the `Name` of the repository, which is usually the name of the image or service you are storing (in this case, `basic-app`). You also have the option to set the repository as `Public` or `Private`, and in this instance, select `Public`:
    ![Figure 3.2: Repository creation screen of Docker Hub ](img/B15021_03_02.jpg)
    图 3.2:Docker Hub 的存储库创建屏幕
3.  Toward the bottom on the screen, there are also options to build your images. Click the `Create` button at the bottom of the screen:
    ![Figure 3.3: Repository creation screen of Docker Hub ](img/B15021_03_03.jpg)
    图 3.3:Docker Hub 的存储库创建屏幕
4.  一旦创建了新的存储库，它将提供关于如何开始将映像推送到新存储库的详细信息。用`/:tag`标记您的映像，让 Docker 知道它将把映像推送到哪里，以及 Docker 将把它推送到哪个存储库:
    ```
    docker tag basic-app vincesestodocker/basic-app:ver1
    ```
5.  Now, Docker on your system knows where to push the image. Push the image using the `docker push /:tag` command:
    ```
    docker push vincesestodocker/basic-app:ver1
    denied: requested access to the resource is denied
    ```
    您需要确保从命令行和 web 界面登录到 Docker Hub。
6.  使用`docker login`命令，输入您登录创建新存储库时使用的相同凭据:
    ```
    docker login
    Login with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one.
    Username: vincesestodocker
    Password: 
    Login Succeeded
    ```
7.  现在，将您的映像推送到您的新存储库中，就像您在本练习的第 5 步中所做的那样，之前失败了。它应该会给你一个成功的结果:
    ```
    docker push basic-app vincesestodocker/basic-app:ver1
    ```
8.  Move back to the Docker Hub web interface and you should now see the image version you have pushed, sitting in your newly created repository:
    ![Figure 3.4: Your newly created Docker Hub repository with image ](img/B15021_03_04.jpg)
    图 3.4:您新创建的带有映像的 Docker Hub 存储库
    您现在有了一个公共存储库，任何想要将您的映像拉下来并重用它的人都可以使用。如果有人需要使用您的映像，他们只需使用映像的全名，包括带有`docker pull`命令或`Dockerfile`中的`FROM`命令的标签。
9.  You'll notice in the preceding image that, on the right-hand side of the screen, there is the `Public View` button. This gives you an option to see specifically what the public will see when they search for your image. Click the button and you should see a similar screen to the following:
    ![Figure 3.5: The public view of your Docker Hub repository ](img/B15021_03_05.jpg)
    图 3.5:Docker Hub 存储库的公共视图
    这正是公众对您的存储库的看法。现在由您来确保您的概述是最新的，并确保您的映像得到支持，以确保任何想要使用您的映像的人都没有问题。
10.  Lastly, for this exercise, clean up the repository you've just created. If you are not still in the web interface of your repository, move back onto the Docker Hub web page and click the `Settings` tab at the top of the screen:
    ![Figure 3.6: The Settings screen of the Docker Hub repository ](img/B15021_03_06.jpg)
    图 3.6:Docker 中心仓库的设置屏幕
11.  在这里，您可以选择将存储库设为私有，但是在本练习中，您将删除存储库。点击`Delete Repository`选项，确认现在要删除。
如本练习所示，Docker Hub 为您提供了一种分发映像的简单方法，以允许其他用户协作或利用您已经完成的工作。公共存储库并不总是企业的最佳选择，但是正如 GitHub 允许开发人员分发他们的代码并与其他开发人员协作一样，Docker Hub 也可以为您的 Docker Images 做同样的事情。
# Docker 登记处
Docker 注册表是托管您的映像的服务。大多数情况下，注册表是私有的，只对能够访问它们的团队可用。有很多很好的选项，其中一个选项是由 Docker 提供和维护的注册表映像。
您希望运行自己的 Docker 注册表有几个不同的原因。这可能是由于安全问题，或者你不希望你的最新作品公开。它甚至可以是让您的注册表在您正在使用的系统上运行的简单便利。在本章的这一部分，我们将在您的工作环境中设置一个注册表，并开始在注册表中存储您的映像。
注意
Docker 为我们简化了事情，因为他们在 Docker Hub 上有一个注册表映像，可以下载并用于您的项目。有关我们将使用的映像的更多信息，您可以在以下位置找到它:
[https://hub . docker . com/_/registry](https://hub.docker.com/_/registry)。
## 练习 3.10:创建本地 Docker 登记处
在本练习中，您将为映像设置一个 Docker 注册表，并在系统上运行它们。您不会为您的团队或外部世界设置可用的注册表。您将建立一个很好的域，在您的系统上使用，反映您正在做的工作。这将帮助您决定是否向您的团队或其他用户提供此注册表:
1.  To set up your domain, add a domain for your local registry to your system hosts file. On a Windows system, you will need to access the hosts file at `C:\Windows\System32\drivers\etc\hosts`, while on a Linux or Max, it will be `/etc/hosts`. Open the `hosts` file and add the following line to the file:
    ```
    127.0.0.1       dev.docker.local
    ```
    这将允许您使用`dev.docker.local`域，而不是使用 localhost 作为您的本地注册表。
2.  从 Docker Hub 中下拉最新的`registry`映像:
    ```
    docker pull registry
    ```
3.  Use the following command to run the registry container. Provide the ports you can access the registry with; in this case, use port `5000`. You also need to use the `--restart=always` option, which will make sure the container restarts if Docker or your system needs to restart:
    ```
    docker run -d -p 5000:5000 --restart=always --name registry registry
    ```
    注意
    在接下来的章节中，您将学习如何通过从主机系统挂载一个目录来扩展 Docker 容器的文件容量，该目录将作为正在运行的容器的一部分运行。为此，您将使用`-v`或`--volume`选项作为您的`docker run`命令的一部分，提供文件和容器上的挂载点。例如，您可以运行前面的命令在主机系统上挂载目录，如下所示:
    `docker run -d -p 5000:5000 --restart=always --volume :/var/lib/registry:rw --name registry`
4.  Run the `docker ps` command to show the `registry` container running on your system, which is ready to accept and store new images:
    ```
    docker ps
    ```
    该命令将返回如下输出:
    ```
    CONTAINER ID  IMAGE     COMMAND                 CREATED
    41664c379bec  registry  "/entrypoint.sh /etc…"  58 seconds ago
    ```
5.  Run the `docker tag` command to tag your existing images with the registry hostname and port `dev.docker.local:5000`.
    ```
    docker tag vincesestodocker/basic-app:ver1 dev.docker.local:5000/basic-app:ver1
    ```
    这将确保您的`basic-app`映像将被自动推送到本地注册表:
    ```
    docker push dev.docker.local:5000/basic-app:ver1
    ```
6.  使用`docker image remove`命令
    ```
    docker image remove dev.docker.local:5000/basic-app:ver1
    ```
    从当前正在使用的系统中删除原始映像
7.  现在，通过将注册表主机名和端口`dev.docker.local:5000`作为`pull`命令的一部分:
    ```
    docker pull dev.docker.local:5000/basic-app:ver1
    ```
    从本地注册表中下拉该映像
这就把我们带到了这一节的结尾，我们已经创建了我们的注册表来存储我们本地系统上的 Docker 映像。注册表本身很简单，并没有得到真正的支持，但是它确实对帮助您理解注册表如何工作以及它如何与您的团队一起工作有很大帮助。如果您正在寻找一个更健壮和受支持的映像，Docker 还提供 Docker 可信注册表，这是 Docker 提供的商业产品。
是时候测试一下到目前为止学到的知识了。在下一个活动中，我们将修改`PostgreSQL`容器映像的构建脚本，以使用 Git 提交哈希，而不是语义版本控制。
## Activi ty 3.01:使用 Git 哈希版本控制构建脚本
在本章的前面，您创建了一个构建脚本，该脚本自动执行正在构建的映像的标记和版本控制过程。在本活动中，您将进一步使用全景徒步旅行应用，并负责为`PostgreSQL`容器映像设置构建脚本。您可以使用之前创建的构建脚本，但是需要修改脚本，不再使用语义版本控制，而是使用当前的 Git 提交哈希。此外，确保您的构建脚本将构建的映像推送到 Docker 注册表中。
完成所需的步骤如下:
1.  确保为您的`PostgreSQL`容器映像创建了一个运行中的`Dockerfile`。
2.  Create your build script, which performs the following actions:
    a)为 Docker 注册表、正在构建的服务名和 Git 哈希版本设置变量
    b)将 Git 哈希版本打印到屏幕上
    c)构建您的 PostgreSQL Docker 映像
    d)将您的 Docker 映像推送至您的注册表
3.  Ensure that the build script runs and completes successfully.
    预期产出:
    ```
    ./BuildScript.sh 
    ++ REGISTRY=dev.docker.local:5000
    ++ SERVICENAME=basic-app
    +++ git log -1 --format=%h
    ++ GIT_VERSION=49d3a10
    ++ echo 'version: 49d3a10 '
    version: 49d3a10 
    ++ docker build -t dev.docker.local:5000/basic-app:49d3a10 .
    Sending build context to Docker daemon  3.072kB
    Step 1/1 : FROM postgres
     ---> 873ed24f782e
    Successfully built 873ed24f782e
    Successfully tagged dev.docker.local:5000/basic-app:49d3a10
    ++ docker push dev.docker.local:5000/basic-app:49d3a10
    The push refers to repository [dev.docker.local:5000/basic-app]
    ```
    注意
    此活动的解决方案可以通过[这个链接](16.html#_idTextAnchor323)找到。
在下一个活动中，您将通过更改`docker run`命令来配置本地 Docker 注册表存储，将其存储在主目录中的一个目录中。
## Activi ty 3.02:配置您的本地 Docker 注册表存储
在本章中，您设置了注册表，并开始使用基本选项来运行它。注册表本身在主机文件系统上存储映像。在本练习中，您希望更改`docker run`命令，将其存储在主目录中的一个目录中。您将创建一个名为`test_registry`的目录，并运行 Docker 命令将映像存储在主目录中的这个`test_registry`目录中。
完成所需的步骤如下:
1.  在主目录中创建一个目录来挂载本地注册表。
2.  运行本地注册表。这次将新创建的卷作为注册表的一部分进行装载。
3.  Test your changes by pushing a new image to the local registry.
    暗示
    运行注册表容器时，使用`-v`或`–volume`选项。
**预期输出:**
列出本地目录中的所有文件时，您将能够看到推送的映像:
```
ls  ~/test_registry/registry/docker/registry/v2/repositories/
basic-app
```
注意
此活动的解决方案可以通过[这个链接](16.html#_idTextAnchor324)找到。
# 总结
本章演示了 Docker 如何允许用户使用映像将他们的应用打包在一起，以及如何在不同的工作环境中移动工作环境。您已经看到了 Docker 如何使用层和缓存来提高构建速度，并确保您也可以使用这些层来保留资源或磁盘空间。
我们还花了一些时间创建了一个只有一层映像的基础映像。我们探讨了您可以采用的标记和标记实践，以解决与部署和发布映像相关的问题。我们还研究了发布图片并与其他用户和开发者分享的不同方式。我们才刚刚开始，还有很长的路要走。
在下一章中，我们将进一步学习多级`Dockerfiles`的工作原理。我们还将找到更多方法来优化 Docker 映像，以便在发布到生产环境中时获得更好的性能。