Once policies are created, they can be viewed in the catalog views, compatible with
Oracle databases: ALL_POLICIES, DBA_POLICIES, or USER_POLICIES. The
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 172
Database Compatibility for Oracle® Developers
Built-in Package Guide
supported compatible views are listed in the Database Compatibility for Oracle
Developers Reference Guide, available at the EnterpriseDB website at:
https://www.enterprisedb.com/resources/product-documentation
The SYS_CONTEXT function is often used with DBMS_RLS. The signature is:
SYS_CONTEXT(namespace, attribute)
Where:
namespace is a VARCHAR2; the only accepted value is USERENV. Any other
value will return NULL.
attribute is a VARCHAR2. attribute may be:
attribute Value Equivalent Value
SESSION_USER pg_catalog.session_user
CURRENT_USER pg_catalog.current_user
CURRENT_SCHEMA pg_catalog.current_schema
HOST pg_catalog.inet_host
IP_ADDRESS pg_catalog.inet_client_addr
SERVER_HOST pg_catalog.inet_server_addr
Note: The examples used to illustrate the DBMS_RLS package are based on a modified
copy of the sample emp table provided with Advanced Server along with a role named
salesmgr that is granted all privileges on the table. You can create the modified copy of
the emp table named vpemp and the salesmgr role as shown by the following:
CREATE TABLE public.vpemp AS SELECT empno, ename, job, sal, comm, deptno FROM
emp;
ALTER TABLE vpemp ADD authid VARCHAR2(12);
UPDATE vpemp SET authid = 'researchmgr' WHERE deptno = 20;
UPDATE vpemp SET authid = 'salesmgr' WHERE deptno = 30;
SELECT * FROM vpemp;
empno | ename | job | sal | comm | deptno | authid
-------+--------+-----------+---------+---------+--------+-------------
7782 | CLARK | MANAGER | 2450.00 | | 10 |
7839 | KING | PRESIDENT | 5000.00 | | 10 |
7934 | MILLER | CLERK | 1300.00 | | 10 |
7369 | SMITH | CLERK | 800.00 | | 20 | researchmgr
7566 | JONES | MANAGER | 2975.00 | | 20 | researchmgr
7788 | SCOTT | ANALYST | 3000.00 | | 20 | researchmgr
7876 | ADAMS | CLERK | 1100.00 | | 20 | researchmgr
7902 | FORD | ANALYST | 3000.00 | | 20 | researchmgr
7499 | ALLEN | SALESMAN | 1600.00 | 300.00 | 30 | salesmgr
7521 | WARD | SALESMAN | 1250.00 | 500.00 | 30 | salesmgr
7654 | MARTIN | SALESMAN | 1250.00 | 1400.00 | 30 | salesmgr
7698 | BLAKE | MANAGER | 2850.00 | | 30 | salesmgr
7844 | TURNER | SALESMAN | 1500.00 | 0.00 | 30 | salesmgr
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 173
Database Compatibility for Oracle® Developers
Built-in Package Guide
7900 | JAMES | CLERK | 950.00 | | 30 | salesmgr
(14 rows)
CREATE ROLE salesmgr WITH LOGIN PASSWORD 'password';
GRANT ALL ON vpemp TO salesmgr;
3.14.1 ADD_POLICY
The ADD_POLICY procedure creates a new policy by associating a policy function with a
database object.
You must be a superuser to execute this procedure.
ADD_POLICY(object_schema VARCHAR2, object_name VARCHAR2,
policy_name VARCHAR2, function_schema VARCHAR2,
policy_function VARCHAR2
[, statement_types VARCHAR2
[, update_check BOOLEAN
[, enable BOOLEAN
[, static_policy BOOLEAN
[, policy_type INTEGER
[, long_predicate BOOLEAN
[, sec_relevant_cols VARCHAR2
[, sec_relevant_cols_opt INTEGER ]]]]]]]])
Parameters
object_schema
Name of the schema containing the database object to which the policy is to be
applied.
object_name
Name of the database object to which the policy is to be applied. A given database
object may have more than one policy applied to it.
policy_name
Name assigned to the policy. The combination of database object (identified by
object_schema and object_name) and policy name must be unique within the
database.
function_schema
Name of the schema containing the policy function.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 174
Database Compatibility for Oracle® Developers
Built-in Package Guide
Note: The policy function may belong to a package in which case
function_schema must contain the name of the schema in which the package is
defined.
policy_function
Name of the SPL function that defines the rules of the security policy. The same
function may be specified in more than one policy.
Note: The policy function may belong to a package in which case
policy_function must also contain the package name in dot notation (that is,
package_name.function_name).
statement_types
Comma-separated list of SQL commands to which the policy applies. Valid SQL
commands are INSERT, UPDATE, DELETE, and SELECT. The default is
INSERT,UPDATE,DELETE,SELECT.
Note: Advanced Server accepts INDEX as a statement type, but it is ignored.
Policies are not applied to index operations in Advanced Server.
update_check
Applies to INSERT and UPDATE SQL commands only.
When set to TRUE, the policy is applied to newly inserted rows and to the
modified image of updated rows. If any of the new or modified rows do not
qualify according to the policy function predicate, then the INSERT or UPDATE
command throws an exception and no rows are inserted or modified by the
INSERT or UPDATE command.
When set to FALSE, the policy is not applied to newly inserted rows or the
modified image of updated rows. Thus, a newly inserted row may not appear in
the result set of a subsequent SQL command that invokes the same policy.
Similarly, rows which qualified according to the policy prior to an UPDATE
command may not appear in the result set of a subsequent SQL command that
invokes the same policy.
The default is FALSE.
enable
When set to TRUE, the policy is enabled and applied to the SQL commands given
by the statement_types parameter. When set to FALSE the policy is disabled
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 175
Database Compatibility for Oracle® Developers
Built-in Package Guide
and not applied to any SQL commands. The policy can be enabled using the
ENABLE_POLICY procedure. The default is TRUE.
static_policy
In Oracle, when set to TRUE, the policy is static, which means the policy function
is evaluated once per database object the first time it is invoked by a policy on
that database object. The resulting policy function predicate string is saved in
memory and reused for all invocations of that policy on that database object while
the database server instance is running.
When set to FALSE, the policy is dynamic, which means the policy function is re-
evaluated and the policy function predicate string regenerated for all invocations
of the policy.
The default is FALSE.
Note: In Oracle 10g, the policy_type parameter was introduced, which is
intended to replace the static_policy parameter. In Oracle, if the
policy_type parameter is not set to its default value of NULL, the
policy_type parameter setting overrides the static_policy setting.
Note: The setting of static_policy is ignored by Advanced Server. Advanced
Server implements only the dynamic policy, regardless of the setting of the
static_policy parameter.
policy_type
In Oracle, determines when the policy function is re-evaluated, and hence, if and
when the predicate string returned by the policy function changes. The default is
NULL.
Note: The setting of this parameter is ignored by Advanced Server. Advanced
Server always assumes a dynamic policy.
long_predicate
In Oracle, allows predicates up to 32K bytes if set to TRUE, otherwise predicates
are limited to 4000 bytes. The default is FALSE.
Note: The setting of this parameter is ignored by Advanced Server. An Advanced
Server policy function can return a predicate of unlimited length for all practical
purposes.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 176
Database Compatibility for Oracle® Developers
Built-in Package Guide
sec_relevant_cols
Comma-separated list of columns of object_name. Provides column-level
Virtual Private Database for the listed columns. The policy is enforced if any of
the listed columns are referenced in a SQL command of a type listed in
statement_types. The policy is not enforced if no such columns are
referenced.
The default is NULL, which has the same effect as if all of the database object’s
columns were included in sec_relevant_cols.
sec_relevant_cols_opt
In Oracle, if sec_relevant_cols_opt is set to DBMS_RLS.ALL_ROWS
(INTEGER constant of value 1), then the columns listed in sec_relevant_cols
return NULL on all rows where the applied policy predicate is false. (If
sec_relevant_cols_opt is not set to DBMS_RLS.ALL_ROWS, these rows
would not be returned at all in the result set.) The default is NULL.
Note: Advanced Server does not support the DBMS_RLS.ALL_ROWS
functionality. Advanced Server throws an error if sec_relevant_cols_opt is
set to DBMS_RLS.ALL_ROWS (INTEGER value of 1).
Examples
This example uses the following policy function:
CREATE OR REPLACE FUNCTION verify_session_user (
p_schema VARCHAR2,
p_object VARCHAR2
)
RETURN VARCHAR2
IS
BEGIN
RETURN 'authid = SYS_CONTEXT(''USERENV'', ''SESSION_USER'')';
END;
This function generates the predicate authid = SYS_CONTEXT('USERENV',
'SESSION_USER'), which is added to the WHERE clause of any SQL command of the
type specified in the ADD_POLICY procedure.
This limits the effect of the SQL command to those rows where the content of the
authid column is the same as the session user.
Note: This example uses the SYS_CONTEXT function to return the login user name. In
Oracle the SYS_CONTEXT function is used to return attributes of an application context.
The first parameter of the SYS_CONTEXT function is the name of an application context
while the second parameter is the name of an attribute set within the application context.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 177
Database Compatibility for Oracle® Developers
Built-in Package Guide
USERENV is a special built-in namespace that describes the current session. Advanced
Server does not support application contexts, but only this specific usage of the
SYS_CONTEXT function.
The following anonymous block calls the ADD_POLICY procedure to create a policy
named secure_update to be applied to the vpemp table using function
verify_session_user whenever an INSERT, UPDATE, or DELETE SQL command is
given referencing the vpemp table.
DECLARE
v_object_schema VARCHAR2(30) := 'public';
v_object_name VARCHAR2(30) := 'vpemp';
v_policy_name VARCHAR2(30) := 'secure_update';
v_function_schema VARCHAR2(30) := 'enterprisedb';
v_policy_function VARCHAR2(30) := 'verify_session_user';
v_statement_types VARCHAR2(30) := 'INSERT,UPDATE,DELETE';
v_update_check BOOLEAN := TRUE;
v_enable BOOLEAN := TRUE;
BEGIN
DBMS_RLS.ADD_POLICY(
v_object_schema,
v_object_name,
v_policy_name,
v_function_schema,
v_policy_function,
v_statement_types,
v_update_check,
v_enable
);
END;
After successful creation of the policy, a terminal session is started by user salesmgr.
The following query shows the content of the vpemp table:
edb=# \c edb salesmgr
Password for user salesmgr:
You are now connected to database "edb" as user "salesmgr".
edb=> SELECT * FROM vpemp;
empno | ename | job | sal | comm | deptno | authid
-------+--------+-----------+---------+---------+--------+-------------
7782 | CLARK | MANAGER | 2450.00 | | 10 |
7839 | KING | PRESIDENT | 5000.00 | | 10 |
7934 | MILLER | CLERK | 1300.00 | | 10 |
7369 | SMITH | CLERK | 800.00 | | 20 | researchmgr
7566 | JONES | MANAGER | 2975.00 | | 20 | researchmgr
7788 | SCOTT | ANALYST | 3000.00 | | 20 | researchmgr
7876 | ADAMS | CLERK | 1100.00 | | 20 | researchmgr
7902 | FORD | ANALYST | 3000.00 | | 20 | researchmgr
7499 | ALLEN | SALESMAN | 1600.00 | 300.00 | 30 | salesmgr
7521 | WARD | SALESMAN | 1250.00 | 500.00 | 30 | salesmgr
7654 | MARTIN | SALESMAN | 1250.00 | 1400.00 | 30 | salesmgr
7698 | BLAKE | MANAGER | 2850.00 | | 30 | salesmgr
7844 | TURNER | SALESMAN | 1500.00 | 0.00 | 30 | salesmgr
7900 | JAMES | CLERK | 950.00 | | 30 | salesmgr
(14 rows)
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 178
Database Compatibility for Oracle® Developers
Built-in Package Guide
An unqualified UPDATE command (no WHERE clause) is issued by the salesmgr user:
edb=> UPDATE vpemp SET comm = sal * .75;
UPDATE 6
Instead of updating all rows in the table, the policy restricts the effect of the update to
only those rows where the authid column contains the value salesmgr as specified by
the policy function predicate authid = SYS_CONTEXT('USERENV',
'SESSION_USER').
The following query shows that the comm column has been changed only for those rows
where authid contains salesmgr. All other rows are unchanged.
edb=> SELECT * FROM vpemp;
empno | ename | job | sal | comm | deptno | authid
-------+--------+-----------+---------+---------+--------+-------------
7782 | CLARK | MANAGER | 2450.00 | | 10 |
7839 | KING | PRESIDENT | 5000.00 | | 10 |
7934 | MILLER | CLERK | 1300.00 | | 10 |
7369 | SMITH | CLERK | 800.00 | | 20 | researchmgr
7566 | JONES | MANAGER | 2975.00 | | 20 | researchmgr
7788 | SCOTT | ANALYST | 3000.00 | | 20 | researchmgr
7876 | ADAMS | CLERK | 1100.00 | | 20 | researchmgr
7902 | FORD | ANALYST | 3000.00 | | 20 | researchmgr
7499 | ALLEN | SALESMAN | 1600.00 | 1200.00 | 30 | salesmgr
7521 | WARD | SALESMAN | 1250.00 | 937.50 | 30 | salesmgr
7654 | MARTIN | SALESMAN | 1250.00 | 937.50 | 30 | salesmgr
7698 | BLAKE | MANAGER | 2850.00 | 2137.50 | 30 | salesmgr
7844 | TURNER | SALESMAN | 1500.00 | 1125.00 | 30 | salesmgr
7900 | JAMES | CLERK | 950.00 | 712.50 | 30 | salesmgr
(14 rows)
Furthermore, since the update_check parameter was set to TRUE in the ADD_POLICY
procedure, the following INSERT command throws an exception since the value given for
the authid column, researchmgr, does not match the session user, which is
salesmgr, and hence, fails the policy.
edb=> INSERT INTO vpemp VALUES (9001,'SMITH','ANALYST',3200.00,NULL,20,
'researchmgr');
ERROR: policy with check option violation
DETAIL: Policy predicate was evaluated to FALSE with the updated values
If update_check was set to FALSE, the preceding INSERT command would have
succeeded.
The following example illustrates the use of the sec_relevant_cols parameter to
apply a policy only when certain columns are referenced in the SQL command. The
following policy function is used for this example, which selects rows where the
employee salary is less than 2000.
CREATE OR REPLACE FUNCTION sal_lt_2000 (
p_schema VARCHAR2,
p_object VARCHAR2
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 179
Database Compatibility for Oracle® Developers
Built-in Package Guide
)
RETURN VARCHAR2
IS
BEGIN
RETURN 'sal  v_sec_relevant_cols
);
END;
If a query does not reference columns sal or comm, then the policy is not applied. The
following query returns all 14 rows of table vpemp:
edb=# SELECT empno, ename, job, deptno, authid FROM vpemp;
empno | ename | job | deptno | authid
-------+--------+-----------+--------+-------------
7782 | CLARK | MANAGER | 10 |
7839 | KING | PRESIDENT | 10 |
7934 | MILLER | CLERK | 10 |
7369 | SMITH | CLERK | 20 | researchmgr
7566 | JONES | MANAGER | 20 | researchmgr
7788 | SCOTT | ANALYST | 20 | researchmgr
7876 | ADAMS | CLERK | 20 | researchmgr
7902 | FORD | ANALYST | 20 | researchmgr
7499 | ALLEN | SALESMAN | 30 | salesmgr
7521 | WARD | SALESMAN | 30 | salesmgr
7654 | MARTIN | SALESMAN | 30 | salesmgr
7698 | BLAKE | MANAGER | 30 | salesmgr
7844 | TURNER | SALESMAN | 30 | salesmgr
7900 | JAMES | CLERK | 30 | salesmgr
(14 rows)
If the query references the sal or comm columns, then the policy is applied to the query
eliminating any rows where sal is greater than or equal to 2000 as shown by the
following:
edb=# SELECT empno, ename, job, sal, comm, deptno, authid FROM vpemp;
empno | ename | job | sal | comm | deptno | authid
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 180
Database Compatibility for Oracle® Developers
Built-in Package Guide
-------+--------+----------+---------+---------+--------+-------------
7934 | MILLER | CLERK | 1300.00 | | 10 |
7369 | SMITH | CLERK | 800.00 | | 20 | researchmgr
7876 | ADAMS | CLERK | 1100.00 | | 20 | researchmgr
7499 | ALLEN | SALESMAN | 1600.00 | 1200.00 | 30 | salesmgr
7521 | WARD | SALESMAN | 1250.00 | 937.50 | 30 | salesmgr
7654 | MARTIN | SALESMAN | 1250.00 | 937.50 | 30 | salesmgr
7844 | TURNER | SALESMAN | 1500.00 | 1125.00 | 30 | salesmgr
7900 | JAMES | CLERK | 950.00 | 712.50 | 30 | salesmgr
(8 rows)
3.14.2 DROP_POLICY
The DROP_POLICY procedure deletes an existing policy. The policy function and
database object associated with the policy are not deleted by the DROP_POLICY
procedure.
You must be a superuser to execute this procedure.
DROP_POLICY(object_schema VARCHAR2, object_name VARCHAR2,
policy_name VARCHAR2)
Parameters
object_schema
Name of the schema containing the database object to which the policy applies.
object_name
Name of the database object to which the policy applies.
policy_name
Name of the policy to be deleted.
Examples
The following example deletes policy secure_update on table public.vpemp:
DECLARE
v_object_schema VARCHAR2(30) := 'public';
v_object_name VARCHAR2(30) := 'vpemp';
v_policy_name VARCHAR2(30) := 'secure_update';
BEGIN
DBMS_RLS.DROP_POLICY(
v_object_schema,
v_object_name,
v_policy_name
);
END;
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 181
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.14.3 ENABLE_POLICY
The ENABLE_POLICY procedure enables or disables an existing policy on the specified
database object.
You must be a superuser to execute this procedure.
ENABLE_POLICY(object_schema VARCHAR2, object_name VARCHAR2,
policy_name VARCHAR2, enable BOOLEAN)
Parameters
object_schema
Name of the schema containing the database object to which the policy applies.
object_name
Name of the database object to which the policy applies.
policy_name
Name of the policy to be enabled or disabled.
enable
When set to TRUE, the policy is enabled. When set to FALSE, the policy is