Table 1. Overview of selected smartphone messaging applications, their features, supported plat-
forms, and estimated user base.
cryption for communication with the server, such an attack
would usually not be practical in real life scenarios.
Unrequested SMS/phone calls Most services emit SMS
messages or even phone calls throughout the phone num-
ber veriﬁcation process. A malicious user could use an-
other user’s number in the setup process to generate annoy-
ing messages or phone calls on the victim’s phone without
revealing his identity.
Another scenario in this class is eavesdropping and re-
playing a message.
Enumeration Most applications upload the user’s ad-
dress book to the server and compare the entries to a list of
registered users (only EasyTalk utilizes a slightly different
mechanism and only transmits the number as it is dialed).
The server then returns the subset of the user’s contacts that
are using the service. We analyzed how this mechanism
could be used to enumerate users of the service, e.g. by up-
loading an address book containing a large amount of phone
numbers.
The main problem resulting from this functionality is
that an attacker can derive useful information about the
user’s device such as the operating system, if a speciﬁc ap-
plication only runs on one speciﬁc system (for instance a
certain OS/version combination). This enables the attacker
to perform system speciﬁc attacks.
Modifying Status Messages Two out of the nine appli-
cations allow the user to set a status message that is shared
with people that have this user in their address book.
In
this part of the evaluation, we considered two threats. The
ﬁrst one is the modiﬁcation of a user’s status message by
an attacker. We analyzed the protocol for setting the sta-
tus message and explore possible vulnerabilities that could
result in unauthorized modiﬁcation of status messages.
The second threat is a privacy-related design error. Not
only is it possible to determine whether the owner of a given
phone number has installed the messenger application (as
outlined above), but also the status message of a user is visi-
ble to people that have stored this user in their address book.
Since no user conﬁrmation is required to store a number in
the address book, an attacker can very easily get access to
the status messages of all subscribers to services vulnera-
ble to this attack. In practice, this approach would likely be
combined with some sort of enumeration attack.
4.2 Experimental Setup
For our security evaluation we used a Samsung Nexus
S running Android 2.3.3 and an Apple iPhone 4 running
iOS 4.3.3. Applications that are available for both platforms
were tested on both the Nexus S and the iPhone. To be able
to read encrypted HTTPS trafﬁc from and to the tested ap-
plications, we set up a SSL proxy that acted as a man-in-the-
middle and intercepted requests to HTTPS servers. We fur-
ther used SSLsniff [14] by Moxie Marlinspike to read SSL-
protected trafﬁc that is not sent over HTTPS (e.g. XMPP).
Figure 1 explains our approach for the experimental
setup. The SSL proxy was used to analyze HTTPS connec-
tions and allowed us to read as well as modify HTTPS trafﬁc
on the ﬂy. Other protocols were observed with SSLsniff.
Figure 1. Experimental setup for intercepting
SSL.
5 Results
In this section we present the results of our security eval-
uation of the application discussed in Section 3 with respect
to the different attacks outlined in section 4.
5.1 Overview
Table 2 gives a compact overview of the vulnerabilities
found in the tested applications. It is notable that almost
all applications were vulnerable to SMS ﬂooding and enu-
meration attacks, but only very few to sender spooﬁng or
message manipulation.
5.2 Authentication Mechanism and Account Hi-
jacking
In this section we describe successful attacks against the
authentication mechanisms of the tested applications. The
general idea is that an attacker tries to hijack accounts to be
able to spoof the sender ID and receive messages targeted to
a victim. In essence, the attacker aims at linking his mobile
device to the phone number of the victim.
WhatsApp To prevent malicious users to impersonate
somebody else using the victim’s number, a veriﬁcation
SMS containing a 4-digit PIN is sent to the phone. The
user then has to copy that code into the WhatsApp appli-
cation’s GUI. This process binds a WhatsApp user account
(represented by the phone number) to a physical device.
Figure 2 shows the authentication process of WhatsApp.
We discovered that the veriﬁcation process of WhatsApp
is fatally broken. The PIN for the veriﬁcation SMS mes-
sage is generated on the phone and then sent to the server
via a HTTPS connection. The server then initiates the SMS
message via a SMS proxy to the phone, where the app then
Figure 2. Authentication process of Whats-
App
checks if the PIN entered by the user matches the previ-
ously generated PIN. An attacker could exploit this mech-
anism to hijack any WhatsApp account. This can be done
by typing the victim’s phone number during the veriﬁcation
phase and then intercepting the communication between the
phone and the server to eavesdrop the PIN. This communi-
cation is SSL-protected; however, the attacker has to inter-
cept only the connection between his own phone and the
WhatsApp server. To exploit this vulnerability, it is possi-
ble set up a SSL proxy and install the proxy’s certiﬁcates as
described in Section 4 on the phone in order to get access to
the encrypted communication transparent to the application.
Once the attacker has entered the PIN into his phone,
the victim’s WhatsApp account is linked to the attacker’s
phone. This enables the attacker to send and retrieve mes-
sages from the victim’s account. This process also unlinks
the victim’s device, causing it to not receive messages from
WhatsApp anymore.
Figure 3. MitM-Attack against WhatsApp au-
thentication
Figure 3 shows a possible attack on the authentication
process of WhatsApp. A man-in-the-middle attack on the
communication between the phone and the client makes it
possible to eavesdrop the secret SMS veriﬁcation code be-
ServerPhoneSSL-InterceptionPhone 1. (HTTPS): Phone number  2. (SMS): Code SMS ProxyServer 3. (HTTPS): Code Target Phone 1. (HTTPS): Code + Number  2. (SMS): Code SMS ProxyAttacker PhoneServerProxy Code Account Hijacking
Spooﬁng / Manipulation Unrequested SMS Enumeration Other Vulnerabilities
WhatsApp
Viber
eBuddy XMS
Tango
Voypi
Forfone
HeyTell
EasyTalk
WowTalk
yes
no
no
yes
yes
no
yes
yes
yes
no
no
no
no
yes
yes
no
no
no
yes
yes
yes
yes
yes
yes
no
yes
yes
yes
yes
yes
yes
yes
yes
limited
yes
yes
yes
yes
yes
Table 2. Overview on attacks.
fore it was even delivered to the spoofed phone number.
Tango and Voypi The applications Tango and Voypi
share a very similar approach for device registration. Like
WhatsApp, both applications ask the user to enter the de-
vice’s phone number. If the number is not registered for the
service yet, no veriﬁcation is done. Only if the number is
already known to the system, a veriﬁcation process via SMS
(similar to WhatsApp) is performed.
While this registration schema is not vulnerable to ac-
count hijacking, an attacker can impersonate users that are
not yet registered for that service. As long as a number
is not registered for Tango or Voypi, an attacker can use it
without SMS veriﬁcation.
HeyTell HeyTell does not have any kind of veriﬁcation.
During the setup process the user has to select his or her
own cellphone number from the address book (or create a
new entry if it does not exist). The device is then linked to
the chosen number without veriﬁcation.
WowTalk WowTalk’s registration mechanism is based on
SMS-veriﬁcation. The user has to enter his phone number
into the application which transmits it to the server. The
server generates a random veriﬁcation code and sends it
back to the phone via SMS. The problem, however, is that
the server also sends the veriﬁcation code via HTTPS to the
phone so that it can compare the user’s input to the correct
code. We used the SSL proxy to intercept the server’s re-
ply and so retrieve the veriﬁcation code. An attacker can
use this technique to hijack any WowTalk account. Figure 4
explains our attack against WowTalk’s client authentication.
EasyTalk EasyTalk uses SMS for phone number veriﬁca-
tion. After a device’s registration request, the server gener-
ates a veriﬁcation code that is sent to the device via SMS.
After receiving the SMS the user has to enter the code into
the application that forwards it to the server for veriﬁcation.
The server then replies to the device with either “OK” if the
device sent the correct code or “ERROR” if the user entered
Figure 4. MitM-attack against WowTalk appli-
cation
an incorrect code into the application. We were able to suc-
cessfully authenticate a client by modifying this message
from “ERROR” to “OK”. The server does not detect this
message manipulation and keeps the device authenticated.
Figure 5. Device authentication in EasyTalk.
Figure 5 shows the authentication mechanism of
EasyTalk.
Viber Compared to the other introduced applications,
Viber’s authentication mechanism is well designed and
properly implemented. The application asks the user for the
phone number and sends an authentication request to the
server. The server generates a veriﬁcation code and sends
it via SMS message to the user’s phone. Alternatively, the
ServerAttackerPhone 1. (HTTPS): Request 2b. (HTTPS): PINTargetPhone 2a. (SMS): PIN SMS ProxyServerPhone 2. (SMS): PIN  1. (HTTPS): Registration Request  4. (HTTPS): OK/ERROR  3. (HTTPS): PIN SMS Proxyuser can request a phone call from Viber. In that case, a
speech synthesizer voice speaks the code on the phone call.
The user has to the enter the received code in the Viber ap-
plication that forwards it to the server, which in turn checks
the input. At no time does the server trust the client (i.e. the
application on the user’s phone) and no sensitive authentica-
tion data is transmitted between phone and server. Figure 6
explains the authentication mechanism of Viber.
Forfone and eBuddy XMS The authentication mecha-
nisms of Forfone and eBuddy XMS are similar to Viber’s
and thus not susceptible to attacks that are based on in-
tercepting the communication between the device and the
server.
Conclusion We do not propose our own authentication
schema, as some of the tested applications already have se-
cure protocols. While a secure implementation seems triv-
ial, our evaluation showed that the majority of the tested
applications are susceptible to even basic attacks.
Figure 6. Authentication in Viber.
5.3 Sender ID Spooﬁng
This section introduces the results of our evaluation of
messaging protocols in the tested applications. We analyzed
the protocols and attempted to send messages with spoofed
sender IDs without hijacking the entire account. Most of the
tested applications use the Extensible Messaging and Pres-
ence Protocol (XMPP) [19] for messaging and can therefore
rely on the security features present in the XMPP server
that prevent sender ID spooﬁng. However, Voypi and Fore-
fone have their own implementations for messaging that are
based on HTTP(S) requests.
Voypi The unencrypted HTTP request that is used by
Voypi to generate messages has four GET parameters: both
the sender’s and the receiver’s phone number, the message,
and a time stamp. There is no authentication required to
send a message, therefore, an attacker can spoof the sender
ID.
Forfone
In Forfone’s messaging protocol an additional
identiﬁer of the sender is required for sending messages.
In Android the IMSI of the phone and in iOS the UDID
(Unique Device Identiﬁer) are used for sender authentica-
tion. While this additional parameter raises the difﬁculty
of sender ID spooﬁng, it cannot be considered as a secure
authentication mechanism as these two identiﬁers can be
accessed by any third party application on the phone.
Table 3 summarizes the layout of the messaging proto-
cols used by Voypi and Forfone.
Voypi
HTTP-Method GET
Parameters
sender phone number