w** ww* ww* ww* ww* ww*
*a*
***
w** ww* ww* ww* ww* ww* ww*
*a*
*a*
w** ww* ww* ww* ww* ww* ww* ww*
w** ww* ww* ww* ww* ww* ww* ww* ww*
ww*
e**
***
w**
w**
e**
e**
***
e**
***
e**
***
e**
***
e**
***
e**
***
Table 3: Optimal double-spending strategy for α = 0.3, γ =
0, rs = 0.41%, cm = α, ω = 0 and vd = 19.5. The rows cor-
respond to the length la of the adversary’s chain and the columns
correspond to the length lh of the honest network’s chain. The three
values in each table entry correspond to the fork labels irrelevant,
relevant and active, where * marks an unreachable state and w, a
and e denote the wait, adopt and exit actions, respectively.
adversary is expected to double-spend. For example, if the adversary
has α = 0.3 of the hashing power in the network, assuming k = 6
conﬁrmations, and a mining cost of cm = α, a double-spending
strategy is clearly proﬁtable if the double-spending transaction has
a value of at least 0.5 block rewards (one block reward is 25 Bit-
coin, where one Bitcoin is about 436.7 USD at the time of writing,
for rs = 0.41%) when γ = 1. When γ = 0.5, the minimum
transaction value increases to 12.9 block rewards.
Impact of the mining costs: In Figure 6, we analyze the impact of
the mining costs on the minimum required double-spending trans-
action value. Our results show that mining costs have negligible
impact on the adversarial strategy.
Impact of the stale block rate: We evaluate the impact of the stale
block rate for adversaries with a mining power of α = 0.1 and
α = 0.3 in Figure 7. We observe that there exists a non-linear
relationship between the stale block rate and the double-spending
value and that the higher the stale block rate, the worse is the double-
spending and selﬁsh mining resistance of a PoW blockchain (cf.
Figure 7). For instance, for an adversary with mining power α = 0.3
and rs of 10% and 20%, the double-spending value vd decreases
from 9.2 to 6.4 block rewards. Similarly, the relative revenue from
selﬁsh mining (cf. Figure 3) increases from 0.37 to 0.43.
Impact of eclipse attacks We evaluate the impact of eclipse attacks
on the adversarial strategy given our MDP. We assume that the
adversary eclipses a victim with mining power ω in order to increase
its advantage in sustaining his blockchain (cf. Figure 9). We observe
that an eclipse attack clearly empowers the adversary, since it allows
the adversary to effectively increase its overall mining power. For
instance, an adversary with α = 0.1 can reduce the double-spending
value vd from 880 block rewards to 0.75 block reward if eclipsing a
miner with ω = 0.025.
3.3.2 Bitcoin vs. Ethereum
In order to alleviate the problem that stale blocks decrease PoW’s
efﬁciency, a number of proposals, such as Ethereum, suggest to
reward miners for stale blocks [4]. Here, although uncle blocks
that are included in a block receive a reward, they do not count
towards the total difﬁculty of a chain, i.e., Ethereum uses a longest
chain rule with added rewards for uncle blocks. This clearly con-
tradicts Ethereum’s claim of using a blockchain protocol adapting
GHOST [33].
Ethereum has also recently modiﬁed its longest chain algorithm to
incorporate uniform tie breaking [11]. Notice that such a strategy is
meant as a selﬁsh mining countermeasure, but allows a selﬁsh miner
to increase its chances of catching up to the honest chain [32]. In
Table 4, we extend our model to cater for uncle rewards and uniform
tie breaking, and describe the resulting double-spending MDP in
order to capture the security of Ethereum against double-spending.
Building on this analysis, we compare in Figure 10, the double-
spending resilience of Bitcoin (rs = 0.41%, cf. MDP in Table 2)
to that of Ethereum (rs = 6.8%, cf. MDP in Table 4), given γ =
0, cm = 0 and ω = 0. In order to provide a fair cost comparison,
we rely on US dollar based valuation (Bitcoin’s block reward is
more than 200 times higher than Ethereum’s block reward).
We observe that 6 Bitcoin block conﬁrmations are more resilient
to double-spending than 6 Ethereum5 block conﬁrmations. Second,
when comparing 12 Ethereum with 6 Bitcoin block conﬁrmations,
Ethereum’s double-spending resilience is only better than Bitcoin
for an adversary with less than 11% of the PoW hashing power.
Note that 12 Ethereum blocks are likely to be generated in less
than 4 minutes, while 6 Bitcoin blocks last about one hour. Third,
we discover that the monetary value of the block reward directly
impacts the double-spending security: the higher the block reward of
a blockchain (in $) the more resilient it is against double-spending.
In addition to comparing Bitcoin to Ethereum, we compare in
Figure 11 the two blockchains by setting Bitcoin’s stale block rate
equal to Ethereum’s stale block rate to objectively evaluate their
5Block generation time between 10 and 20 seconds.
0.00.10.20.30.40.5Adversarialminingpowerα101102103104105106Exp.num.ofblocksk=12k=10k=8k=6k=4k=2k=10.00.10.20.30.40.5Adversarialminingpowerα10−1100101102103104105106vdcm=0cm=α∆vd0.00.10.20.30.40.5Staleraters100101102103104vdα=0.1α=0.310(a) γ = 0
(b) γ = 0.5
(c) γ = 1
Figure 8: Impact of the propagation parameter γ. We observe that the higher is γ, the lower is vd for double-spending to be more proﬁtable
than honest mining. rs = 0.41% (Bitcoin’s stale block rate), cm = α (maximum mining costs), ω = 0 (no eclipse attack).
Figure 9: Full eclipse attack for rs = 0.41%,
γ = 0 and cm = 0.
Figure 10: Double-spending resistance of
Ethereum (k ∈ {6, 12}) vs. Bitcoin (k = 6).
USD exchange rate of 2016-04-20.
Figure 11: Direct comparison between
Ethereum and Bitcoin with k = 6, rs = 6.8%
and their respective difference ∆vd.
security implications. We observe that, in spite of the reliance on
uncle block rewards, and uniform tie breaking, Ethereum’s security
is weaker than Bitcoin, and conclude that the uniform tie breaking
and the uncle reward lower the security of Ethereum’s blockchain.
4. SECURITY VS. PERFORMANCE OF
POW-BLOCKCHAINS
In this section, we evaluate the performance (and security) of var-
ious blockchain instantiations by leveraging our model in Section 3.
To this end, we constructed a Bitcoin blockchain simulator in
order to evaluate different blockchain instances from a performance
perspective. Relying on simulations emerges as the only workable
alternative to realistically capture the blockchain performance under
different parameters since neither formal modeling, nor the deploy-
ment of a thousands of peers (e.g., currently there are 6000 reachable
nodes in Bitcoin) would be practical.
By leveraging our simulator, we evaluate different blockchain pa-
rameters, such as the block interval, the block size, the propagation
mechanisms by measuring the resulting stale block rate, throughput
and block propagation times. This also allows us to connect our
blockchain simulator to our MDP model in a uniﬁed framework.
Namely, we feed the stale block rate output by the simulator into
our MDP model in order to assess the security (under selﬁsh mining
and double-spending) of the resulting blockchain instance.
4.1 Blockchain Simulator
In Table 5, we summarize the parameters captured by our sim-
ulator. Here, we simulate the PoW for miners, by attributing a
particular mining power to each miner. Based on the block interval
distribution (which deﬁnes at what time a block is found), a new
block is then attributed to a miner. Conforming with the operation
of existing PoW-blockchains, a miner mines on the ﬁrst block he
receives, and we assume that forks are inherently resolved by the
longest chain rule. Once a fork is resolved, the blocks that do not
contribute to the main chain are considered stale blocks. Within our
simulations, we do not consider difﬁculty changes among different
blocks; the longest chain is therefore simply deﬁned by the number
of its blocks.
When establishing the connections between nodes, we create
point-to-point channels between them, which abstracts away any
intermediate devices (routes, switches, etc). These channels have
two characteristics; the latency and bandwidth. To capture realistic
latencies in the network, we adopt the global IP latency statistics
from Verizon [36] and assume a Pareto trafﬁc distribution with
variance accounting for 20% of the mean latency [2]. On the other
hand, to model a realistic bandwidth distribution in the network, we
adapted the distribution6 from testmy.net [34].
Our simulator does not model the propagation of transactions,
since the focal point of our simulator is to study the impact of
the block size, block interval, and the block request management
system—all of which can be captured independently of the trans-
action propagation. Note that transactions are implicitly captured
within the block size.
In our simulator, we distinguish between two node types: (i)
regular nodes, and (ii) miners. For regular nodes (up to 6000), we
retrieved the current geographical node distribution from bitnodes.
6Upload bandwidth characteristics: min=0.1Mbps, max=100Mbps,
interval=0.1Mbps.
Download bandwidth characteristics:
min=0.1Mbps, max=500Mbps, interval=0.5Mbps.
0.00.10.20.30.40.5Adversarialminingpowerα10−1100101102103104105106vdk=12k=10k=8k=6k=4k=2k=10.00.10.20.30.40.5Adversarialminingpowerα10−1100101102103104105106vdk=12k=10k=8k=6k=4k=2k=10.00.10.20.30.40.5Adversarialminingpowerα10−1100101102103104105106vdk=12k=10k=8k=6k=4k=2k=10.00.10.20.30.40.5Adversarialminingpowerα0.00.10.20.30.40.5Eclipsedminingpowerω10−1100101102103104105106vd0.00.10.20.30.40.5Adversarialminingpowerα10−1100101102103104105106107108vdinblockrewardsBitcoin,k=6,blockrew.Ethereum,k=12,blockrew.Ethereum,k=6,blockrew.10−1100101102103104105106107108vdin$Bitcoin,k=6,$Ethereum,k=12,$Ethereum,k=6,$0.00.10.20.30.40.5Adversarialminingpowerα10−1100101102103104105106vdBitcoin,rs=6.8%Ethereum,rs=6.8%∆vd11State × Action
(la, lh,·, nr), adopt
(la, lh,·, inc), adopt
(la, lh,·, rel), adopt
(la, lh,·,·), override
(la, lh, relevant, nr), wait
(la, lh, relevant, inc), wait
(la, lh, relevant, rel), wait
(la, lh, active, nr), wait
(la, lh, relevant, nr), match
(la, lh, active, inc), wait
(la, lh, relevant, inc), match
(la, lh, active, rel), wait
(la, lh, relevant, rel), match
(la, lh,·, nr), release
(la, lh,·,·), exit
Resulting State
(1, 0, relevant, nr)
(0, 1, relevant, nr)
(0, 0, relevant, nr)
(1, 0, relevant, nr)
(0, 1, relevant, nr)
(0, 0, relevant, nr)
(1, 0, relevant, rel)
(0, 1, relevant, inc)
(0, 0, relevant, rel)
(la − lh, 0, relevant, nr)
(la − lh − 1, 1, relevant, nr)
(la − lh − 1, 0, relevant, nr)
(la + 1, lh, relevant, nr)
(la, lh + 1, relevant, nr)
(la, lh, relevant, nr)
(la + 1, lh, relevant, inc)
(la, lh + 1, relevant, inc)
(la, lh, relevant, inc)
(la + 1, lh, relevant, rel)
(la, lh + 1, relevant, inc)
(la, lh, relevant, rel)
(la + 1, lh, active, nr)
(la + 1, lh, active, rel)
(la − lh, 1, relevant, nr)
(la, lh + 1, relevant, nr)
(la, lh + 1, relevant, inc)
(la, lh, active, nr)
(la, lh, active, rel)
(la + 1, lh, active, inc)
(la − lh, 1, relevant, nr)
(la, lh + 1, relevant, inc)
(la, lh, active, inc)
(la + 1, lh, active, rel)
(la − lh, 1, relevant, nr)
(la, lh + 1, relevant, inc)
(la, lh, active, rel)
(la, lh,·, rel)
exit
Probability
α
(1 − α) · (1 − rs)
(1 − α) · rs
α
(1 − α) · (1 − rs)
(1 − α) · rs
α
(1 − α) · (1 − rs)
(1 − α) · rs
α
(1 − α) · (1 − rs)
(1 − α) · rs
α
(1 − α) · (1 − rs)
(1 − α) · rs
α
(1 − α) · (1 − rs)
(1 − α) · rs
α
(1 − α) · (1 − rs)
(1 − α) · rs
α
α
α
α
γ · (1 − α) · (1 − rs)
(1 − γ) · (1 − α) · (1 − rs)
(1 − γ) · (1 − α) · (1 − rs)
(1 − α) · rs
(1 − α) · rs
γ · (1 − α) · (1 − rs)
(1 − γ) · (1 − α) · (1 − rs)
(1 − α) · rs
γ · (1 − α) · (1 − rs)
(1 − γ) · (1 − α) · (1 − rs)
(1 − α) · rs
Reward
−cm−cm−cm
ru − cm
ru − cm
ru − cm
−cm−cm−cm
lh + 1 − cm
lh + 1 − cm
lh + 1 − cm
−cm−cm−cm
−cm−cm−cm
−cm−cm−cm
−cm−cm
lh − cm−cm−cm−cm−cm
lh − cm−cm−cm
lh − cm−cm−cm
−cm
−cm
1
1
0
la + vd
Condition
-
-
-
-
-
-
-
-
-
la > lh
la > lh
la > lh
-
-
-
-
-
-
-
-
-
lh > 6
lh ≤ 6
-
lh > 6
lh ≤ 6
lh > 6
lh ≤ 6
-
-
-
-
-
-
-
-
lh ≤ 6 ∧ lh > 1 ∧ la ≥ 1
la > lh ∧ la > k
Table 4: State transition and reward matrices for an MDP for optimal double-spending strategies in Ethereum where ru is the uncle reward (i.e.
8 ). Every state includes a ﬂag (where nr = not released, rel = released, inc = included) indicating whether an attacker block has been or
7
will be included as an uncle in the honest chain. The release action corresponds to the release of the ﬁrst block of the attackers fork with the
intention to be included as uncle in the honest chain. Therefore, it is only feasible if 1 < lh ≤ 6 and la ≥ 1, since it is otherwise equivalent to
a match or override or the honest chain is too long to include it as uncle. With the release action, no block is mined and a state transitions
from not released to released, which transitions to included with the next block mined on the honest chain. In Ethereum, γ is ﬁxed at 0.5
and a match is possible even without a prepared block.
Consensus parameter
Block interval distribution
Mining power distribution of the miners
Network-layer parameter
Block size distribution
# of reachable network nodes
Geo. distribution of nodes
Geo. mining pool distribution
# of connections per node
# of connections of the miners
Block request management system
Standard mechanism (inv/getdata)
Unsolicited block push
Relay network
Sendheaders
Description
Time to ﬁnd a block
PoW power distribution
Description
Variable transaction load
Open TCP port nodes
Worldwide distribution