(4) Inlining VIP Functions (INLN).
Inlining improves perfor-
mance by 13.7% on average. In particular, 433.milc benefits the
most with 60.6% performance improvement due to the frequent use
of sensitive stack objects, which need a series of VIP calls.
(5) Excluding Objects in Safe Stack (SS). Leveraging SafeStack,
HyperSpace does not need to instrument safe objects. This im-
proves performance by 8.5% on average. SafeStack reduces the
number of variables that need to be protected to only those that
are in the regular stack. In general, C benchmarks such as 429.mcf
(28.4%) and 433.milc (53.5%) benefit from this optimization more
than C++ benchmarks since C++ objects are address-taken due to
C++ semantics such as constructors.
(6) Optimizing Safe Memory Access (HGP). Last but not least,
using huge pages for the safe memory region improves performance
by 4.5% on average by reducing the number of page faults and TLB
misses. This optimization is effective in the case where sensitive
objects are sparsely scattered by accessing larger portions of the
safe memory region. In particular, the performance of 456.hmmer
improves 63.4% with this change.
Session 5D: Misc: Android and Vulnerabilities CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea1622VIP-CFI+VTPtr
VIP-CPI
)
%
(
d
a
e
h
r
e
v
o
y
r
o
m
e
M
90
80
70
60
50
40
30
20
10
0
400.perlbench
401.bzip2
403.gcc
483.xalancbmk
482.sphinx3
471.omnetpp
473.astar
470.lbm
462.libquantum
Average-SPEC
456.hmmer
458.sjeng
464.h264ref
450.soplex
444.namd
433.milc
445.gobmk
453.povray
447.dealII
429.mcf
Figure 9: Memory overhead of VIP-CFI+VTPtr and VIP-CPI on SPEC
CPU2006. HyperSpace imposes marginal overhead: 12.16% and
13.18% of overhead for VIP-CFI and VIP-CPI, respectively.
9.3.2 Analysis on Memory Consumption Having a parallel
safe region could incur high memory overhead if implemented
naively. However, the safe region is an anonymous region that only
allocates a physical page if a process writes to the corresponding
page in the safe region. Also, its metadata is compact, requiring 2
bits for every 64 bits. We measured the maximum resident set size
(RSS) during programming execution. As Figure 9 shows, VIP intro-
duces around 13% memory overhead: with heap metadata protec-
tion enabled, VIP required 12.16% more memory for VIP-CFI+VTPtr
and 13.18% for VIP-CPI on average, respectively. VIP‚Äôs memory
overhead is much smaller than other state-of-the-art defense mech-
anisms (e.g., 105% for the original CPI [45]). The reason for such
memory overhead in state-of-the-art techniques such as CPI is due
to them having bigger metadata for each sensitive pointer. A few
benchmarks have relatively high memory overhead because these
benchmarks have many sensitive types, so they tend to generate
and access more sensitive pointers. For example, in omnetpp, many
data pointers are sensitive pointers because they can eventually
reach a code pointer. However, we found that this is uncommon.
10 Discussions & Limitations
Protecting Adversarial Misuse of MPK. A hypothetical attack
against HyperSpace is that MPK instructions could be adversarially
misused. Because all MPK instructions, including wrpkru, are un-
privileged instructions, if an attacker could subvert the control flow
and change the MPK permission of the safe region to read-writable,
then she is able to bypass HyperSpace defenses. However, such an
attack is unfeasible if the control flow is protected by HyperSpace‚Äôs
control flow hijacking defenses (e.g., VIP-CFI/CPI).
Limitation of Safe Stack. Safe Stack is one of our six optimiza-
tion techniques for VIP-CFI/CPI. Our current implementation relies
on software-based randomization, so it is susceptible to information
leakage attacks [23, 32, 57, 86]. However, it can be further hard-
ened by using a more secure shadow stack implementation. For
instance, Burow et al. [8] shows that a stronger isolation guaran-
tee for shadow stack is possible using Intel MPX (Memory Pro-
tection eXtension) [58] with a moderate performance overhead.
Also, Intel CET [38] ‚Äì a hardware-based secure shadow stack ‚Äì is
available in mobile processors [37] and shows lower overhead. We
expect that hardening the current software-based Safe Stack using
those new hardware features will guarantee stronger protection in
HyperSpace with lower performance overhead.
Concurrent access and TOCTOU. Accessing the safe memory
region in HyperSpace needs to be protected against race conditions.
On one hand, changing memory permissions of the safe region
using MPK does not suffer from concurrent access issues because
MPK registers are assigned per-CPU (and thereby per-thread). On
the other hand, changing of data values in the safe region may
suffer from data race issues; however, this can be protected by
making VIP primitives atomic for update operations (vip_register,
vip_unregister, vip_write, vip_write_final).
Extending VIP Protection to Other Security-sensitive Data.
We believe that VIP can be effectively extended to protect other
security-sensitive data beyond code/data pointers and heap meta-
data, which we focused on in this paper. The foundation of VIP
is to correctly identify security-sensitive data along with its value
invariant period. Once such analysis is available, HyperSpace can
work as a framework, i.e., we can plug in such analysis to enable
VIP protection of new security-sensitive data. We plan to further ex-
plore the automatic analysis of sensitive non-control data, thereby,
a wider range of VIP-based defenses can be automatically applied.
11 Related Work
VIP is a framework and encompasses several policies as we dis-
cussed. In the following, we discuss previously proposed mecha-
nisms and how VIP policies compare with them.
11.1 CFI
Protection Target/Method. Control-flow Integrity relies on a
program‚Äôs legitimate control-flow information. For most methods,
this is done by constructing a control-flow graph (CFG) which
showcases the control-flow information. Thus, by conforming to
the CFG, CFI allows only legitimate control-flow transition at all
indirect call/jump and return sites of the program.
Technique. Different CFI methods have different ways for deter-
mining the control-flow information and constructing the CFG.
Although there is only one legitimate target that should be allowed
at each call/jump site at a specific runtime, these methods inherently
have a large equivalence class (EC) size (i.e., number of allowed legit-
imate targets at one call site). A state-of-the-art implementation of
CFI, OS-CFI [42], has an indirect call site that allows 427 legitimate
call targets in SPEC CPU2006. For such a call site, attackers may
exploit existing attacks such as CFB [9] and COOP [64]. In contrast,
VIP can always guarantee the EC size to be 1 because the legitimate
pointer that can be used is immutable after its assignment.
Runtime checking. Approaches that check runtime program
data [29, 35, 36, 47] can further restrict the EC size, as small as 1
(ùúáCFI [36]), which allows only the legitimate call target at a specific
runtime. However, these approaches require running additional
threads to parse the data from Intel Processor Trace (PT) and apply
runtime analysis, limiting scalability. In contrast, HyperSpace does
not require running additional threads for protection.
Overhead. Recent CFI implementations incur a little runtime per-
formance overhead. OS-CFI incurs 7.1% and ùúáCFI incurs 9.9% (and
dedicating 1 CPU core for trace analysis) of performance overhead
while running the SPEC CPU2006 benchmark. VIP-CPI incurs less
overhead (6.18%) while guaranteeing better security.
11.2 OTI
Protection Target. Object Type Integrity (OTI) [7] aims to provide
protection to the virtual function table pointer of a C++ object.
Technique. By storing metadata on object construction and check-
ing the metadata at a virtual function call site, OTI can enforce the
Session 5D: Misc: Android and Vulnerabilities CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea1623type integrity to C++ objects at runtime. To protect its metadata,
the metadata storage of OTI is protected by Intel Memory Protec-
tion eXtension (MPX). Similarly, VIP protects its metadata with
HyperSpace via Intel MPK.
Overhead. OTI incurs 4.98% of performance overhead in the SPEC
CPU2006 benchmark. VIP offers better performance. Our evaluation
of VIP-CPS+VTPtr incurs only 0.88% of performance overhead.
11.3 CPI
Protection Target. Code Pointer Integrity (CPI) [45] aims to en-
force the integrity of sensitive pointers.
Technique. By defining sensitive pointers as code pointers and
pointers that refer to sensitive pointers recursively, CPI protects
the program by isolating all such sensitive pointers from attack-
ers. In isolating memory space for storing sensitive pointers, CPI
randomly allocates an address space and hides it from attackers.
Such a technique, information hiding, is proven to be susceptible to
recent attacks [23, 32, 57]. In contrast, VIP/HyperSpace provides
memory space isolation protection and tightened security of the
metadata based on hardware permission control via Intel MPK.
Overhead. CPI incurs 8.4% performance overhead, while its lighter-
weight alternative, Code Pointer Seperation (CPS), incurs 1.9% over-
head in the SPEC CPU2006 benchmark. VIP incurs lesser overhead
than CPI/CPS for their counterpart implementation; VIP-CFI incurs
0.88% and VIP-CPI incurs 6.18% of performance overhead.
Comparison with VIP. As mentioned in ¬ß2.3, we follow the same
definition of a sensitive pointer as in CPI. However, VIP has sev-
eral advantages that overcome the critical limitations in CPI and
other recent efforts that use Intel MPK to enhance the security of
CPI [27, 78]. The main limitation in CPI is the reliance on informa-
tion hiding to protect its safe region [23, 32, 57]. Our optimized use
of MPK resolves this. The naive use of MPK results in huge perfor-
mance overheads, as demonstrated by ERIM [78] and IMIX [27] in
their CPI+MPK evaluation (up to 320% for ERIM and up to 2856%
for IMIX). We have several optimizations (¬ß7) that reduce the perfor-
mance overhead, and guarantee better security. Beyond defeating
control-flow hijacking attacks, we go a step further and protect
heap metadata which is not considered in CPI. ARM‚Äôs Pointer Au-
thentication Code (PAC) [63] enforces its protection by encoding
the unused bits of the pointer with a cryptographic hash. PAC
only exists on the ARM architecture. We designed VIP for x86_64
architecture, which does not have a hardware mechanism like PAC.
11.4 Heap-metadata protection
Protection Target/Method. One of the ways to secure the heap
metadata is through secure memory allocators. FreeGuard [69]
combines techniques from free-list allocators and BIBOP (Big Bag
of Pages) by acquiring a large block and dividing it into multiple sub-
heaps. Guarder [70] is similar in design to FreeGuard but focuses on
tunable security guarantees and enhancing randomization entropy.
Heap metadata hardening. In spite of the fact that the metadata
could be fully isolated, the metadata is not protected. Thus, it relies
on randomness and information hiding. Even though the attacker
would have more difficulty carrying out the attack, it is still possible.
This is due to the fact that the relationship between heap objects
and its metadata is deterministic. VIP-heap protection can be used
as an extension to harden allocators, to protect the metadata.
11.5 Memory Safety
Protection Target/Method. Memory safety techniques stop mem-
ory corruption attacks by enforcing spatial and temporal safety.
SoftBound [50] protects against spatial memory attacks by stor-
ing the bounds of every pointer as disjoint metadata. CETS [51]
protects against temporal memory attacks by storing a unique iden-
tifier with each object. BOGO [85] reuses the bounds stored by Intel
MPX [58] to achieve temporal safety by scanning the MPX bound
tables and invalidating the bounds of dangling pointers.
VIP scope. Full memory safety solutions incur significantly high
overhead (‚âà116% for Softbound+CETS and ‚âà60% for BOGO). VIP
strikes the balance between practicality and security by offering a
specialized scope of memory safety. By protecting security-sensitive
data, critical memory corruption attacks, particularly control-flow
hijacking and heap metadata attacks, can be thwarted whilst main-
taining relatively low overhead. This is more feasible than full
memory safety while providing strong security guarantees.
11.6 Non-Control Defenses and Protecting the Safe Region
Several defense mechanisms have been proposed that protect non-
control data or the metadata of other defense mechanisms (referred
to as the safe region). xMP [62] isolates sensitive data into domains,
leveraging Intel virtualization extensions. However, xMP [62] re-
quires heavy kernel modifications for its domains. DCI [10] sep-
arates the memory into two regions. It does bound-checking on
sensitive data and prevents pointers of non-sensitive data from
being dereferenced if they point to sensitive data. DCI [10] relies
on the programmer‚Äôs annotations to identify sensitive data. Mem-
Sentry [44] is a framework to enhance safe region isolation and
harden modern defense mechanisms, but does not utilize MPK.
Overall, MemSentry has a higher overhead than HyperSpace and
does not protect VTable pointers or heap metadata. In contrast,
VIP-CPI is fully automatic without requiring manual annotation
and HyperSpace requires minimal kernel modifications.
12 Conclusion
We have introduced the Value Invariant Property (VIP), which is
a common property of security-sensitive data for critical memory
corruption attacks. Our main focus is defending against two of
the most critical memory corruption attacks by securing security-
sensitive data ‚Äì code/data pointers and heap metadata ‚Äì to thwart
control-flow hijacking and heap metadata corruption attacks with
a defense offering low performance and memory overhead. We
then introduced HyperSpace, a prototype that protects VIP, and
implemented four security mechanisms. Our evaluation results
show that HyperSpace incurs low performance and memory over-
head: an average performance overhead of 0.88% and 6.18% for
CFI+VTPtr and CPI, respectively, and 13.18% memory overhead
for SPEC benchmarks and real-world applications. Our security
experiments using three real-world exploits and six synthesized
attacks show the effectiveness of VIP and HyperSpace.
Acknowledgment
We thank the anonymous reviewers and our shepherd, Georgios
Portokalidis, for their insightful comments and feedback. This work
is supported in part by the US Office of Naval Research under grants
N00014-18-1-2022.
Session 5D: Misc: Android and Vulnerabilities CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea1624References
[1] Mart√≠n Abadi, Mihai Budiu, Ulfar Erlingsson, and Jay Ligatti. 2005. Control-flow
integrity. In Proceedings of the 12th ACM Conference on Computer and Communi-
cations Security (CCS). Alexandria, VA.