## 开源PolarDB|PostgreSQL 应用开发者&DBA 公开课 - 5.5 PolarDB开源版本必学特性 - PolarDB 特性解读与体验       
### 作者                                  
digoal                                  
### 日期                                  
2024-01-25                                  
### 标签                                  
PostgreSQL , PolarDB , 应用开发者 , DBA , 公开课                        
----                                  
## 背景          
## PolarDB 特性解读与体验  
### 1、预读 / 预扩展  
1\.1、堆表预读  
在 PostgreSQL 读取堆表的过程中，会以 8kB 页为单位通过文件系统读取页面至内存缓冲池（Buffer Pool）中。PFS 对于这种数据量较小的 I/O 操作并不是特别高效。所以，PolarDB 为了适配 PFS 而设计了 堆表批量预读。当读取的页数量大于 1 时，将会触发批量预读，一次 I/O 读取 128kB 数据至 Buffer Pool 中。预读对顺序扫描（Sequential Scan）、Vacuum 两种场景性能可以带来一倍左右的提升，在索引创建场景下可以带来 18% 的性能提升。  
1\.2、堆表预扩展  
在 PostgreSQL 中，表空间的扩展过程中将会逐个申请并扩展 8kB 的页。即使是 PostgreSQL 支持的批量页扩展，进行一次 N 页扩展的流程中也包含了 N 次 I/O 操作。这种页扩展不符合 PFS 最小页扩展粒度为 4MB 的特性。为此，PolarDB 设计了堆表批量预扩展，在扩展堆表的过程中，一次 I/O 扩展 4MB 页。在写表频繁的场景下（如装载数据），能够带来一倍的性能提升。  
1\.3、索引创建预扩展  
索引创建预扩展与堆表预扩展的功能类似。索引创建预扩展特别针对 PFS 优化索引创建过程。在索引创建的页扩展过程中，一次 I/O 扩展 4MB 页。这种设计可以在创建索引的过程中带来 30% 的性能提升。  
>注意  
>当前索引创建预扩展只适配了 B-Tree 索引。其他索引类型暂未支持。  
1\.4、使用堆表预读  
堆表预读的参数名为 `polar_bulk_read_size`，功能默认开启，默认大小为 `128kB`。不建议用户自行修改该参数，`128kB` 是贴合 PFS 的最优值，自行调整并不会带来性能的提升。  
关闭功能：  
```  
ALTER SYSTEM SET polar_bulk_read_size = 0;  
SELECT pg_reload_conf();  
```  
打开功能并设置预读大小为 128kB：  
```  
ALTER SYSTEM SET polar_bulk_read_size = '128kB';  
SELECT pg_reload_conf();  
```  
1\.5、使用堆表预扩展  
堆表预扩展的参数名为 `polar_bulk_extend_size`，功能默认开启，预扩展的大小默认是 4MB。不建议用户自行修改该参数值，4MB 是贴合 PFS 的最优值。  
关闭功能：  
```  
ALTER SYSTEM SET polar_bulk_extend_size = 0;  
SELECT pg_reload_conf();  
```  
打开功能并设置预扩展大小为 4MB：  
```  
ALTER SYSTEM SET polar_bulk_extend_size = '4MB';  
SELECT pg_reload_conf();  
```  
1\.6、使用索引创建预扩展  
索引创建预扩展的参数名为 `polar_index_create_bulk_extend_size`，功能默认开启。索引创建预扩展的大小默认是 4MB。不建议用户自行修改该参数值，4MB 是贴合 PFS 的最优值。  
关闭功能：  
```  
ALTER SYSTEM SET polar_index_create_bulk_extend_size = 0;  
SELECT pg_reload_conf();  
```  
打开功能，并设置预扩展大小为 4MB：  
```  
ALTER SYSTEM SET polar_index_create_bulk_extend_size = 512;  
SELECT pg_reload_conf();  
```  
1\.7、性能表现  
为了展示堆表预读、堆表预扩展、索引创建预扩展的性能提升效果，以下是 PolarDB for PostgreSQL 14 的实例上进行的测试。  
- 规格：8 核 32GB 内存  
- 测试场景：400GB pgbench 测试  
1\.7\.1、堆表预读  
400GB 表的 Vacuum 性能：  
![400gb-vacuum-perf](20240125_07_pic_001.png)   
400GB 表的 SeqScan 性能：  
![400gb-vacuum-seqscan](20240125_07_pic_002.png)   
结论：  
- 堆表预读在 Vacuum 和 SeqScan 场景上，性能提升了 1-2 倍  
- 堆表预读大小在超过默认值 128kB 之后对性能提升没有明显帮助  
1\.7\.2、堆表预扩展  
400GB 表数据装载性能：  
![400gb-insert-data-perf](20240125_07_pic_003.png)   
结论：  
- 堆表预扩展在数据装载场景下带来一倍的性能提升  
- 堆表预扩展大小在超过默认值 4MB 后对性能没有明显帮助  
1\.7\.3、索引创建预扩展  
400GB 表创建索引性能：  
![400GB 表创建索引性能](20240125_07_pic_004.png)   
结论：  
- 索引创建预扩展在索引创建场景下能够带来 30% 的性能提升  
- 加大索引创建预扩展大小超过默认值 4MB 对性能没有明显帮助  
### 2、Shared Server  
原生 PostgreSQL 的连接调度方式是每一个进程对应一个连接 (One-Process-Per-Connection)，这种调度方式适合低并发、长连接的业务场景。而在高并发或大量短连接的业务场景中，进程的大量创建、销毁以及上下文切换，会严重影响性能。同时，在业务容器化部署后，每个容器通过连接池向数据库发起连接，业务在高峰期会弹性扩展出很多容器，后端数据库的连接数会瞬间增高，影响数据库稳定性，导致 OOM 频发。  
![pic](20240125_07_pic_005.png)  
为了解决上述问题，业界在使用 PostgreSQL 时通常会配置连接池组件，比如部署在数据库侧的后置连接池 [PgBouncer](https://www.pgbouncer.org/)，部署在应用侧的前置连接池 [Druid](https://github.com/alibaba/druid)。但后置连接池无法支持保留用户连接私有信息（如 GUC 参数、Prepared Statement）的相关功能，在面临进程被污染的情况（如加载动态链接库、修改 role 参数）时也无法及时清理。前置连接池不仅无法解决后置连接池的缺陷，还无法根据应用规模扩展而实时调整配置，仍然会面临连接数膨胀的问题。  
PolarDB for PostgreSQL 针对上述问题，从数据库内部提供了 Shared Server（后文简称 SS）内置连接池功能，采用共享内存 + Session Context + Dispatcher 转发 + Backend Pool 的架构，实现了用户连接与后端进程的解绑。后端进程具备了 Native、Shared、Dedicated 三种执行模式，并且在运行时可以根据实时负载和进程污染情况进行动态转换。负载调度算法充分吸收 AliSQL 对社区版 MySQL 线程池的缺陷改进，使用 Stall 机制弹性控制 Worker 数量，同时避免用户连接饿死。从根本上解决了高并发或者大量短连接带来的性能、稳定性问题。  
![pic](20240125_07_pic_006.png)  
TPC-C 高并发性能对比  
- Shared Server 主要应用于高并发或大量短连接的业务场景，因此这里使用 TPC-C 进行测试。  
使用 104c 512GB 的物理机单机部署，测试 TPC-C 1000 仓下，并发数从 300 增大到 5000 时，不同配置下的分数对比。如下图所示：  
- old：不使用任何连接池，使用 PostgreSQL 的原生执行模式（即 Native 模式）  
- ss off：使用 Shared Server 内置连接池，启动前关闭 SS 开关，退化为 Native 模式  
- ss native：使用 Shared Server 内置连接池，启动后关闭 SS 开关，退化为 Native 模式  
- ss didicated：使用 Shared Server 内置连接池，启动后开启 SS 开关，但强制使用 Dedicated 模式  
- ss shared：使用 Shared Server 内置连接池，启动后开启 SS 开关，使用标准的 Shared 模式  
![pic](20240125_07_pic_007.jpeg)  
从图中可以看出：  
- 原生 PostgreSQL 场景、Shared Server 关闭的场景、Shared Server 兜底场景中，均无法稳定进行 TPC-C 高并发测试。性能从并发数为 1500 时开始下跌，在并发数为 5000 时已经不能提供服务  
- Shared Server 开启并进入 Shared 模式后，TPC-C 性能不受高并发数影响，始终保持在稳定状态，很好地支持了高并发场景  
使用说明  
常用参数  
Shared Server 的典型配置参数说明如下：  
- `polar_enable_shm_aset`：是否开启全局共享内存，当前默认关闭，重启生效  
- `polar_ss_shared_memory_size`：Shared Server 全局共享内存的使用上限，单位 kB，为 `0` 时表示关闭，默认 1MB。重启生效。  
- `polar_ss_dispatcher_count`：Dispatcher 进程的最大个数，默认为 `2`，最大为 CPU 核心数，建议配置与 CPU 核心数相同。重启生效。  
- `polar_enable_shared_server`：Shared Server 功能是否开启，默认关闭。  
- `polar_ss_backend_max_count`：后端进程的最大数量，默认为 `-5`，表示为 `max_connection` 的 `1/5`；`0 / -1` 表示与 `max_connection` 保持一致。建议设置为 CPU 核心数的 10 倍为佳。  
- `polar_ss_backend_idle_timeout`：后端进程的空闲退出时间，默认 3 分钟  
- `polar_ss_session_wait_timeout`：后端进程被用满时，用户连接等待被服务的最大时间，默认 60 秒  