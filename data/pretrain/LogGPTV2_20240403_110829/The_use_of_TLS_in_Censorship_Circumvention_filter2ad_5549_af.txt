### IT and Networking Staff Approval
The specifics of our collection methods were approved by the IT and networking staff. We have responsibly disclosed our findings regarding the observability of censorship circumvention tools and are continuing to collaborate with their respective developers to discuss and offer potential solutions.

### B. Dataset Limitations
Although we have captured billions of TLS connections, there are several limitations to what our infrastructure can collect. For instance, fragmented TLS messages and out-of-order TCP packets are not parsed by our system. Additionally, since we received a full-duplex 10 Gbps mirror of campus traffic on a single (half-duplex) port, our copy of network traffic can become saturated when the combined bi-directional traffic exceeds 10 Gbps. This saturation occurs for several hours each day during peak load.

To quantify the impact of this limitation on our collection of TLS fingerprints, we conducted a simple experiment. Every hour, we made 100 TLS connections through our campus using a unique TLS fingerprint that did not appear in our dataset. This allowed us to identify the times of day when we dropped fingerprints: any hour where we received fewer than 100 of these fingerprints indicated data loss. Over 88% of the hours we ran our experiment recorded all 100 test connections. However, during peak hours, which lasted approximately 5 hours per weekday, the minimum number captured in an hour was 43, and the median was 80. We conclude that the only times we do not capture TLS fingerprints is when the tap switch cannot forward packets due to congestion. At all other times, we receive and properly record almost all connections.

### C. Future Work
Client Hello messages provide a rich set of features useful for fingerprinting TLS implementations, but other messages in the TLS connection could also be used to detect or block tools. For example, once the connection is established and sends encrypted records, the lengths of these encrypted records may reveal differences between implementations [62]. Collecting and better understanding the distribution of these, in conjunction with the information gleaned from Client Hello messages, could greatly enhance the robustness of circumvention tools.

Another direction for future work could be to study user behavior to determine if existing tools that mimic users visiting popular CDNs or websites (e.g., in domain fronting or refraction networking) are easily distinguishable by the pattern or timing of their connections.

Beyond TLS over TCP, measuring UDP TLS may be useful for performing similar analyses on DTLS protocols, such as those used by the VPN tools we investigated.

### XI. Conclusion
We have analyzed real-world TLS traffic in the context of censorship circumvention tools, focusing on the initial protocol messages sent between clients and servers that may allow censors to identify tools and implementations. Our analysis of several circumvention tools that use TLS in various ways revealed problems with nearly all of them. To address these systemic issues, we developed the uTLS library, designed to generate arbitrary Client Hello messages and provide applications full control over the TLS handshake, enabling them to evade identification and blocking with minimal developer effort. We release our collected data, combined with tools to facilitate further analysis, at https://tlsfingerprint.io.

### Acknowledgements
We would like to thank the University of Colorado IT and Network Security team, particularly Dan Jones and Conan Moore, for their valuable assistance and feedback in setting up our tap infrastructure. We also thank J. Alex Halderman for his feedback on early drafts of this work. Additionally, we are grateful to the developers at the circumvention projects we contacted, including Rod Hynes from Psiphon, Ox Cart from Lantern, and David Fifield for their discussions on uTLS. Finally, we deeply appreciate the support from Alphabet Jigsaw, particularly Ben Schwartz, who helped design and implement uTLS in the initial stages of the project and continued to provide valuable input thereafter.

### References
[References remain unchanged, as they are already well-structured and detailed.]

### Appendix A: Multiple Fingerprints Usage
We demonstrate the ease of using uTLS compared to the standard `crypto/tls` library, which provides no control over TLS. In this configuration, uTLS will mimic popular browsers until an unblocked one is found.

```go
utlsRoller, err := tls.NewRoller()
if err != nil {
    return err
}
conn, err := utlsRoller.Dial("tcp", "10.1.2.3:443", "golang.org")
if err != nil {
    return err
}
conn.Write([]byte("Hello, Golang!"))
```
**Listing 1. Dialing with `utls.Roller`**

```go
tlsConf := tls.Config{
    ServerName: "golang.org",
}
conn, err = tls.Dial("tcp", "10.1.2.3:443", &tlsConf)
if err != nil {
    return err
}
conn.Write([]byte("Hello, Golang!"))
```
**Listing 2. Dialing with standard `crypto/tls` and no mimicry**