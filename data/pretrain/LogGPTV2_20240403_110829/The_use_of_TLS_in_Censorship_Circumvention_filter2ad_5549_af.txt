IT and networking staff, who approved the speciﬁcs of our
collection methods. We have responsibly disclosed our ﬁndings
regarding the observability of the censorship circumvention
tools, and are continuing to work with their respective devel-
opers to discuss and offer potential solutions.
B. Dataset Limitations
Although we have captured billions of TLS connections,
there are limitations to what our infrastructure can collect.
For example, fragmented TLS messages and out-of-order TCP
packets are not parsed by our system. In addition, because
we received the full-duplex 10 Gbps mirror of campus trafﬁc
on a single (half-duplex) port, it is possible for our copy of
network trafﬁc to saturate when the combined bi-directional
trafﬁc exceeds 10 Gbps. This occurs for several hours each
day during peak load. We performed a simple experiment to
quantify how this impacts our collection of TLS ﬁngerprints.
Every hour, we made 100 TLS connections through our
campus with a unique TLS ﬁngerprint that did not appear
in our dataset. This allowed us to see at what time of day
we dropped ﬁngerprints: any hour where we received fewer
than 100 of these ﬁngerprints indicated data loss. Over 88%
of the hours we ran our experiment recorded all 100 of our test
connections. However, during peak hours, which lasted approx-
imately 5 hours per weekday, the minimum number captured
13
in an hour was 43, and the median was 80. We conclude that
the only times we do not capture TLS ﬁngerprints is when the
tap switch cannot forward us packets due to congestion, and
all other times we receive and properly record practically all
connections.
C. Future Work
Client Hello messages provide a rich amount of features
useful in ﬁngerprinting TLS implementations, but there are
other messages in the TLS connection that could be used to
detect or block tools. For instance, once the connection is
established and sends encrypted records, the lengths of these
encrypted records may reveal differences between implementa-
tions [62]. Collecting and better understanding the distribution
of these (in conjunction with the information gleaned from
Client Hello messages) could greatly help circumvention tools
be more robust.
Another direction could be to study user behavior to
better understand if existing tools that pretend to be users
visiting popular CDNs or websites (e.g. in domain fronting or
refraction networking) are easily distinguishable by the pattern
or timing of connections they make.
Beyond TLS over TCP, measuring UDP TLS may be useful
in performing similar analysis on DTLS protocols, such as
those used by the VPN tools we investigated.
XI. CONCLUSION
We have analyzed real-world TLS trafﬁc in the context of
censorship circumvention tools, focusing on the ﬁrst protocol
messages sent between clients and servers that may allow
censors to identify tools and implementations. We analyzed
several circumvention tools that use TLS in various ways,
and ﬁnd problems with nearly all of them. To address these
systemic problems, we have developed the uTLS library,
designed to generated arbitrary Client Hello messages and
provide applications full control over the TLS handshake,
enabling them evade identiﬁcation and blocking with minimal
developer effort. We release our collected data, combined with
tools to facilitate further analysis at https://tlsﬁngerprint.io.
ACKNOWLEDGEMENTS
We would like to thank the University of Colorado IT and
Network Security team, particularly Dan Jones and Conan
Moore for their valuable assistance and feedback in setting
up our tap infrastructure. We thank J. Alex Halderman for
his feedback in early drafts of this work. We also thank
the developers at the circumvention projects we contacted,
including Rod Hynes from Psiphon, and Ox Cart from Lantern,
and David Fiﬁeld for their discussion on uTLS. Finally, we are
deeply grateful to Alphabet Jigsaw, particularly Ben Schwartz,
who helped to design and implement uTLS at the initial stages
of the project and continued discussion thereafter.
REFERENCES
[1] Sadia Afroz and David Fiﬁeld. Timeline of Tor censorship. http://
www1.icsi.berkeley.edu/∼sadia/tor timeline.pdf.
[2] Nadhem J AlFardan, Daniel J Bernstein, Kenneth G Paterson, Bertram
Poettering, and Jacob CN Schuldt. On the security of RC4 in TLS. In
USENIX Security Symposium, pages 305–320, 2013.
[3] Bernhard Amann, Matthias Vallentin, Seth Hall, and Robin Sommer.
Extracting certiﬁcates from live trafﬁc: A near real-time SSL notary
service. Technical Report TR-12-014, 2012.
[4] Blake Anderson, Subharthi Paul, and David McGrew. Deciphering
malwares use of tls (without decryption). Journal of Computer Virology
and Hacking Techniques, pages 1–17, 2016.
arma. Obfsproxy: the next step in the censorship arms race. https://
blog.torproject.org/obfsproxy-next-step-censorship-arms-race, 2012.
[5]
[6] Nimrod Aviram, Sebastian Schinzel, Juraj Somorovsky, Nadia Heninger,
Maik Dankel, Jens Steube, Luke Valenta, David Adrian, J. Alex
Halderman, Viktor Dukhovni, Emilia K¨asper, Shaanan Cohney, Susanne
Engels, Christof Paar, and Yuval Shavitt. DROWN: Breaking TLS with
SSLv2. In 25th USENIX Security Symposium, August 2016.
[7] Mike Belshe, Martin Thomson, and Roberto Peon. Hypertext transfer
protocol version 2 (http/2). 2015.
[8] David Benjamin. Applying grease to tls extensibility. https://tools.ietf.
org/html/draft-davidben-tls-grease-01, September 2016.
[9] Benjamin Beurdouche, Karthikeyan Bhargavan, Antoine Delignat-
Lavaud, C´edric Fournet, Markulf Kohlweiss, Alfredo Pironti, Pierre-
Yves Strub, and Jean Karim Zinzindohoue. A messy state of the union:
Taming the composite state machines of TLS. In Security and Privacy
(SP), 2015 IEEE Symposium on, pages 535–552. IEEE, 2015.
[10] Karthikeyan Bhargavan and Ga¨etan Leurent. On the practical (in-)
security of 64-bit block ciphers: Collision attacks on HTTP over TLS
and OpenVPN. In Proceedings of the 2016 ACM SIGSAC Conference on
Computer and Communications Security, pages 456–467. ACM, 2016.
[11] Lee Brotherston. Stealthier attacks and smarter defending with tls
ﬁngerprinting, 2015.
[12] Emil Burzo. No ability to use a supported (but not enabled) cipher
suite. https://github.com/square/okhttp/issues/2698, 2016.
[13] Roger Dingledine and Jacob Appelbaum. How governments have tried
to block tor. 2012.
[14] Roger Dingledine, Nick Mathewson, and Paul Syverson. Tor: The
second-generation onion router. Technical report, Naval Research Lab
Washington DC, 2004.
[15] Chromium Developer Documentation. SPDY: An experimental protocol
https://www.chromium.org/spdy/spdy-whitepaper,
for a faster web.
2009.
[16] Tor documentation. Tor: Pluggable Transports. https://www.torproject.
org/docs/pluggable-transports.html.
[17] Tor documentation. meek: pluggable transport, an obfuscation layer
for tor designed to evade internet censorship. https://trac.torproject.org/
projects/tor/wiki/doc/meek, 2018.
[18] Tor documentation. Snowﬂake: pluggable transport that proxies trafﬁc
https://trac.torproject.org/
through temporary proxies using webrtc.
projects/tor/wiki/doc/Snowﬂake, 2018.
[19] Zakir Durumeric, Zane Ma, Drew Springall, Richard Barnes, Nick
Sullivan, Elie Bursztein, Michael Bailey, J Alex Halderman, and Vern
Paxson. The security impact of https interception. In Proc. Network
and Distributed System Security Symposium (NDSS), 2017.
[20] Frank Ehlis. How to disable ssl ciphers in google chrome, 2013.
[21] David Fiﬁeld. Cyberoam ﬁrewall blocks meek by TLS signature. https://
groups.google.com/forum/\#!topic/trafﬁc-obf/BpFSCVgi5rs/, 2016.
[22] David Fiﬁeld. Fortiguard ﬁrewall blocks meek by TLS signature. https://
groups.google.com/forum/\#!topic/trafﬁc-obf/fwAN-WWz2Bk, 2016.
[23] David Fiﬁeld. Anticipating a world of encrypted SNI: risks, oppor-
tunities, how to win big . https://groups.google.com/d/msg/trafﬁc-obf/
UyaLc9jPNmY/ovNImK5HEQAJ, August 2018.
[24] David Fiﬁeld, Nate Hardison, Jonathan Ellithorpe, Emily Stark, Dan
Boneh, Roger Dingledine, and Phil Porras. Evading censorship with
In International Symposium on Privacy En-
browser-based proxies.
hancing Technologies Symposium, pages 239–258. Springer, 2012.
[25] David Fiﬁeld, Chang Lan, Rod Hynes, Percy Wegmann, and Vern
Paxson. Blocking-resistant communication through domain fronting.
Proceedings on Privacy Enhancing Technologies, 2015(2):46–64, 2015.
John Geddes, Max Schuchard, and Nicholas Hopper. Cover your acks:
Pitfalls of covert channel censorship circumvention. In Proceedings of
the 2013 ACM SIGSAC conference on Computer & communications
security, pages 361–372. ACM, 2013.
[26]
14
[27]
John Gilmore. Cracking DES: Secrets of encryption research. Wiretap
Politics & Chip Design, 272, 1998.
[28] Ralph Holz, Johanna Amann, Olivier Mehani, Matthias Wachs, and
Mohamed Ali Kˆaafar. TLS in the wild: an internet-wide analysis of tls-
based protocols for electronic communication. CoRR, abs/1511.00341,
2015.
[29] Ralph Holz, Lothar Braun, Nils Kammenhuber, and Georg Carle. The
SSL landscape: a thorough analysis of the X.509 PKI using active and
In Proceedings of the 2011 ACM SIGCOMM
passive measurements.
conference on Internet measurement conference, pages 427–444. ACM,
2011.
[30] Amir Houmansadr, Chad Brubaker, and Vitaly Shmatikov. The parrot
is dead: Observing unobservable network communications. In Security
and Privacy (SP), 2013 IEEE Symposium on, pages 65–79. IEEE, 2013.
[31] Lin Shung Huang, Alex Rice, Erling Ellingsen, and Collin Jackson.
Analyzing forged ssl certiﬁcates in the wild. In Security and privacy
(sp), 2014 ieee symposium on, pages 83–97. IEEE, 2014.
[32] Psiphon Inc. Psiphon — uncensored internet access for windows and
mobile. https://www.psiphon3.com, 2018.
[33] Sheharbano Khattak, Tariq Elahi, Laurent Simon, Colleen M Swanson,
Steven J Murdoch, and Ian Goldberg. Sok: Making sense of censorship
resistance systems. Proceedings on Privacy Enhancing Technologies,
2016(4):37–61, 2016.
[34] SSL Labs. HTTP client ﬁngerprinting using SSL handshake analysis.
https://www.ssllabs.com/projects/client-ﬁngerprinting/, 2009.
[35] The Go Programming Language. cgo, 2018.
[36] Homin K Lee, Tal Malkin, and Erich Nahum. Cryptographic strength
In Proceedings of
of SSL/TLS servers: current and recent practices.
the 7th ACM SIGCOMM conference on Internet measurement, pages
83–92. ACM, 2007.
[37] Fangfan Li, Abbas Razaghpanah, Arash Molavi Kakhki, Arian Akhavan
Niaki, David Choffnes, Phillipa Gill, and Alan Mislove. lib erate,(n): A
library for exposing (trafﬁc-classiﬁcation) rules and avoiding them efﬁ-
ciently. In Proceedings of the 2017 Internet Measurement Conference,
pages 128–141. ACM, 2017.
[38] Colm MacCarthaigh.
Enhanced domain protections for amazon
cloudfront requests. https://aws.amazon.com/blogs/security/enhanced-
domain-protections-for-amazon-cloudfront-requests/, 2018.
[39] Moxie Marlinspike. Amazon threatens to suspend signal’s aws account
over censorship circumvention. https://signal.org/blog/looking-back-on-
the-front/, 2018.
[40] Bodo M¨oller, Thai Duong, and Krzysztof Kotowicz. This poodle bites:
exploiting the ssl 3.0 fallback. Security Advisory, 2014.
[41] moxie0. Doodles, stickers, and censorship circumvention for Signal
[42]
Android. https://signal.org/blog/doodles-stickers-censorship/, 2016.
phobos. Update on internet censorship in Iran. https://blog.torproject.
org/update-internet-censorship-iran, 2011.
[43] Lantern Project. Lampshade: a transport between Lantern clients and
proxies. https://godoc.org/github.com/getlantern/lampshade.
[44] Abbas Razaghpanah, Arian Akhavan Niaki, Narseo Vallina-Rodriguez,
Srikanth Sundaresan, Johanna Amann, and Phillipa Gill. Studying tls
usage in android apps. 2017.
[45] Eric Rescorla. The Transport Layer Security (TLS) Protocol Version
1.3. RFC 8446, August 2018.
[46] Eric Rescorla. Transport Layer Security (TLS) parameters. https://
www.iana.org/assignments/tls-parameters/tls-parameters.xhtml, 2018.
Ivan Risti´c. HTTP client ﬁngerprinting using SSL handshake analy-
sis. https://blog.ivanristic.com/2009/06/http-client-ﬁngerprinting-using-
ssl-handshake-analysis.html, 2009.
Ivan Risti´c. sslhaf: Passive ssl client ﬁngerprinting using handshake
analysis. https://github.com/ssllabs/sslhaf, 2009.
[47]
[48]
[50]
[51]
[49] Runa.
Ethiopia introduces deep packet
inspection.
https://blog.
torproject.org/ethiopia-introduces-deep-packet-inspection, 2012.
runa. Kazakhstan uses DPI to block Tor. https://trac.torproject.org/
projects/tor/ticket/6140, 2012.
runa. Uae uses DPI to block Tor. https://trac.torproject.org/projects/tor/
ticket/6246, 2012.
[52] Alexander Sotirov, Marc Stevens, Jacob Appelbaum, Arjen K Lenstra,
David Molnar, Dag Arne Osvik, and Benne de Weger. MD5 considered
15
harmful today, creating a rogue CA certiﬁcate. In 25th Annual Chaos
Communication Congress, number EPFL-CONF-164547, 2008.
statcounter. Browser version market share worldwide, 2016.
[53]
[54] Let’s Encrypt Stats. Percentage of Web Pages Loaded by Firefox Using
HTTPS. https://letsencrypt.org/stats/#percent-pageloads, 2018.
[55] Marc Stevens. Fast collision attack on MD5. IACR Cryptology ePrint
Archive, 2006:104, 2006.
[56] Marc Stevens, Elie Bursztein, Pierre Karpman, Ange Albertini, and
Yarik Markov. The ﬁrst collision for full sha-1. In Annual International
Cryptology Conference, pages 570–596. Springer, 2017.
[57] Open Whisper Systems. Signal - private messenger. https://signal.org/.
[58]
crack.sh — the world’s fastest des cracker. https://
Inc. ToorCon.
crack.sh/.
[59] Michael Carl Tschantz, Sadia Afroz, Vern Paxson, et al. Sok: Towards
In Security and
grounding censorship circumvention in empiricism.
Privacy (SP), 2016 IEEE Symposium on, pages 914–933. IEEE, 2016.
twilde. Knock Knock Knockin’ on Bridges’ Doors.
https://blog.
torproject.org/knock-knock-knockin-bridges-doors, 2012.
[60]
[61] Mathy Vanhoef and Frank Piessens. All your biases belong to us:
Breaking RC4 in WPA-TKIP and TLS. In USENIX Security Symposium,
pages 97–112, 2015.
[62] Liang Wang, Kevin P Dyer, Aditya Akella, Thomas Ristenpart, and
Thomas Shrimpton. Seeing through network-protocol obfuscation. In
Proceedings of the 22nd ACM SIGSAC Conference on Computer and
Communications Security, pages 57–69. ACM, 2015.
[63] Xiaoyun Wang, Yiqun Lisa Yin, and Hongbo Yu. Finding collisions
in the full sha-1. In Annual international cryptology conference, pages
17–36. Springer, 2005.
[64] Philipp Winter, Tobias Pulls, and Juergen Fuss.
Scramblesuit: A
polymorphic network protocol to circumvent censorship. In Proceedings
of the 12th ACM workshop on Workshop on privacy in the electronic
society, pages 213–224. ACM, 2013.
[65] Eric Wustrow, Colleen Swanson, and J Alex Halderman. Tapdance:
End-to-middle anticensorship without ﬂow blocking. In 23rd USENIX
Security Symposium, August 2014.
APPENDIX A
MULTIPLE FINGERPRINTS USAGE
We show the ease of using uTLS as compared to using
the standard crypto/tls library (which provides no control
over TLS). In this conﬁguration, uTLS will mimic popular
browsers until an unblocked one is found.
utlsRoller, err := tls.NewRoller()
if err != nil {
return err
}
conn, err := utlsRoller.Dial("tcp",
"10.1.2.3:443", "golang.org")
if err != nil {
return err
}
conn.Write([]byte("Hello, Golang!"))
Listing 1. Dialing with utls.Roller
tlsConf := tls.Config{
ServerName: "golang.org",
}
conn, err = tls.Dial("tcp",
"10.1.2.3:443", &tlsConf)
if err != nil {
return err
}
conn.Write([]byte("Hello, Golang!"))
Listing 2. Dialing with standard crypto/tls and no mimicry