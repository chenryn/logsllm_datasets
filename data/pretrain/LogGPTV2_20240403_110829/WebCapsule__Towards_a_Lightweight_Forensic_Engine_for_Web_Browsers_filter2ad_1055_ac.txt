prises the callback interface used to collect the response.
As shown in Figure 6, WebCapsule records network events by
leveraging the PlatformWrapper described earlier. When
Blink, via a ResourceLoader instance, requests the platform
to create a new URL loader, WebCapsule’s PlatformWrapper
returns a pointer to a ForensicURLLoader, which itself is a
wrapper to the WebURLLoader actually provided by the underly-
5:
WebCapsule’s
Figure
V8’s
Math.random() implementation (from v8/src/math.js).
Function calls starting with ‘%’ are used to call C++ functions
internal to V8 from JavaScript code.
instrumentation
of
ing platform API. In addition, our ForensicURLLoader imple-
ments the WebURLLoaderClient interface, and passes itself as
the client to the true WebURLLoader. Therefore, as network data
arrives, the ForensicURLLoader is called ﬁrst, records the de-
sired information, and then calls back into the ResourceLoader,
so that Blink can parse and render the response.
Synchronous Requests. In practice, synchronous network requests
are activated only in a small number of cases (e.g., requests are
made synchronously when false is passed as the third parame-
ter to the open function of a Javascript XMLHttpRequest ob-
ject). These calls can be recorded fairly easily. Because the re-
sults of the request are completely realized by the time loadSyn-
chronously() returns, we can record the results with a single
wrapped function.
Browser Cache Considerations. WebCapsule’s design for record-
ing network transactions has the added beneﬁt of abstracting the
actual data source which satisﬁes resource requests. Obviously,
the browser could satisfy Blink’s network requests from a physi-
cal network, but it could also satisfy a request from the browser-
level cache or from the associated resources of a browser exten-
sion. However, from the point of view of Blink these different data
sources are invisible, in that where the network response is coming
from does not really matter. Speciﬁcally, by recording the results of
each resource request as explained above, we can replay not only
network transactions, but also transparently recreate any browser
cache hits without having to explicitly record the cache state.
5. REPLAY: DESIGN AND IMPLEMENTA-
TION
WebCapsule’s recording capabilities aim to collect enough de-
tailed information to allow a forensic analyst to reconstruct web
security incidents such as social engineering and phishing attacks.
In addition, we aim to enable the analyst to also perform a detailed
replay of previously recorded browsing traces, as explained below.
Entering Replay Mode. To replay a previously recorded trace, we
leverage DevTools’s JSON protocol. Speciﬁcally, we deﬁne new
DevTools commands that allow for remotely controlling WebCap-
sule’s operating mode. Concretely, to enter replay mode we can
send WebCapsule two commands: LoadRecording , and StartReplay. The ﬁrst command loads a previ-
ously recorded browsing trace from disk, and the second one starts
function MathRandom() {  /* Begin WebCapsule's PlatformInstrumentation Replay Code */  var retval = %NextMathRandomVals();  if(retval >= 0) return retval;  /* End of WebCapsule's PlatformInstrumentation Replay Code */  /* Original MathRandom() code */  var r0 = (MathImul(18273, rngstate[0] & 0xFFFF) + (rngstate[0] >>> 16)) | 0;  rngstate[0] = r0;  var r1 = (MathImul(36969, rngstate[1] & 0xFFFF) + (rngstate[1] >>> 16)) | 0;  rngstate[1] = r1;  var x = ((r0 << 16) + (r1 & 0xFFFF)) | 0;  retval = (x < 0 ? (x + 0x100000000) : x) * 2.3283064365386962890625e-10;  /* Begin WebCapsule's PlatformInstrumentation Recording Code */  %HandleMathRandomVals(retval);  /* End of WebCapsule's PlatformInstrumentation Recording Code */  return retval;}138Figure 6: Simpliﬁed view of how WebCapsule records asynchronous network transactions.
replay by instructing Blink to load the ﬁrst page URL in the trace
and then replay the browsing events, as described in detail below.
Notice that the replay can occur in a separate and completely
isolated environment with no network connection or input devices,
because during replay mode Blink will be forced to satisfy network
requests and receive user input exclusively from the recorded trace.
Replay Strategy Overview. WebCapsule employs two replay strat-
egies, depending on the source of the recorded data. As shown
in Figure 7, inputs which originated from Blink’s web-rendering
API are replayed by explicitly re-calling the event handler function
from which the input was recorded, effectively forcing the input
(e.g., a mouse movement or keypress) to be re-injected into (and
processed by) Blink. On the other hand, non-deterministic inputs
obtained through the platform API are primarily replayed by simply
waiting for Blink and V8 to call the platform as a consequence of
the replay of the web-rendering API inputs and the rendering pro-
cess. For each platform API call issued during replay, we identify
the corresponding call observed during recording and directly re-
turn the previously recorded return value without having to call the
true underlying system platform. Notice also that all inputs to be
re-injected are timestamped, and are replayed following a precise
event timeline.
For instance, as a mouse click on an HTML anchor element is
re-injected into Blink via the web-rendering API, the rendering en-
gine will start issuing the necessary network requests (via the plat-
form API) to navigate to and render the new page. As the network
requests are received by WebCapsule’s PlatformWrapper (see
Section 4.3), we return the previously recorded network response to
Blink. A more detailed explanation of WebCapsule’s replay mech-
anisms is provided below.
5.1 Replaying Web-Rendering API Events
Recorded input events (e.g., touch gestures, mouse clicks, key-
presses, etc.) carry a timestamp. This allows us to re-inject all
inputs into Blink in the correct chronological order, and to preserve
the relative time gap between events. Concretely, user input events
are replayed by calling the related handler function in Blink (e.g.,
WebViewImpl::handleInputEvent), with the event as an
argument, thus asking Blink to process the event and to dispatch it
to its internal modules (including possible JavaScript listeners).
Figure 7: Simpliﬁed view of WebCapsule’s replay strategy.
5.2 Replaying Platform Calls
As user inputs are re-injected into Blink and web content is ren-
dered, the rendering and JavaScript engines will issue calls to the
underlaying platform, such as network requests, calls to obtain the
current system time, etc. As these calls are made, WebCapsule’s
PlatformWrapper and JSPlatformWrapper (deﬁned in
Section 4.3) can return the value that the same call had returned
during recording. To identify the correct return value within all
recorded calls of a given function, we use the combination of pa-
rameters passed to the function during recording as a key. To break
“ties” on possible key collisions, the value returned during replay is
simply the next unconsumed recorded return value from the related
function call (with the same key) chosen in chronological order.
Challenges. As mentioned in Section 3, Blink is highly multi-
threaded, making the replay of some platform API calls challeng-
ing, especially for functions that take no input parameters (and
therefore have no obvious key), such as Blink’s Platform::
currentTime or V8’s OS::TimeCurrentMillis. During
replay, depending on the (non-deterministic) scheduling of the thre-
ads, Blink and V8 may make some API calls at different “speed”,
compared to what happened during recording. One way to address
this problem would be to record the non-determinism introduced
by the thread scheduler. Unfortunately, precisely recording (and
replaying) thread scheduling information from within Blink is ex-
tremely challenging. Alternatively, one may attempt to manipulate
thread scheduling from “outside” of Blink. However, this is not an
Rendering EngineResourceLoaderstart()ResourceLoader(request)record valueForensicURLLoaderloadSynchronously()loadAsynchronously()PlatformWrappercreateURLLoader()createURLLoader()loadAsynchronously(request)ForensicURLLoader*didReceiveResponse()didReceiveData()didFinishLoading()ﬁnish()start()create()WebURLLoaderloadSynchronously()loadAsynchronously()loadAsynchronously(request)create()didReceiveResponse()didReceiveData()didFinishLoading()WebCapsuleWebCapsuleBlinkBlinkBlinkEvent InjectorttRecorded Event TimelineRecorded Platform Calls TimelineWebCapsuleWeb-rendering APIPlatform WrapperV8 JavaScriptEngineBlinkRendering Engine139option for us, because it would violate our main goal of not altering
any code outside of Blink (to completely inherit its portability) and
of introducing only low overhead so that WebCapsule can be used
as an “always on” forensic data collection system.
Proposed Solution. To address these challenges, we use a best
effort approach that we found to work well in practice. During
replay, whenever currentTime() is called (either by Blink or
V8), we return the previously recorded time value that is closest
to the current replay time delta. More speciﬁcally, let Srec and
Srep be the time when recording and replay started, respectively,
and vrec be the list of currentTime() return values stored dur-
ing recording. Suppose that during replay Blink calls current-
Time() at time trep. To choose the return value, we ﬁrst compute
the replay time delta δrep = trep − Srep. We then ﬁnd the return
value, trec ∈ vrec, such that δrec = trec − Srec is the closest to
δrep (i.e., we minimize |δrec − δrep|). Because the web-rendering
API events (e.g., mouse movements and keypresses) are re-injected
respecting the relative time deltas observed during recording (see
Section 5.1), the approach described above has the effect of loosely
“re-synchronizing” the currentTime() replay clock to the user
input events, thus improving replay accuracy.
5.3 Replaying Network Events
To replay network responses, WebCapsule leverages the Foren-
sicURLLoader class discussed in Section 4.4. During replay,
when a network resource is requested WebCapsule’s URL loader
ﬁnds the recorded response for that request (which may include
redirection chains or error messages) using the request’s URL and
some other request parameters (e.g., HTTP request headers) as a
key. Once the response is located, a series of WebCapsule’s re-
execution events are created, representing each of the WebURL-
LoaderClient callbacks to be executed (see Section 4.4). Using
this technique, we are able to return the desired network response
to Blink.
Challenges. In some cases, the URL of network requests driven
by JavaScript (e.g., XMLHttpRequest) may be created dynam-
ically. As a concrete example, consider a search box element on
Amazon.com’s front page3. Every time the user enters a charac-
ter, a piece of JavaScript code issues an XMLHttpRequest to
retrieve a set of search term suggestions. While the structure of
the URL is always the same, some of the URL query parameters
change. For example, the URL contains the partial search term en-
tered by the user and a timestamp (retrieved via a call to V8’s plat-
form API). During replay, as the keypresses are reinfected into the
search box, the related XMLHttpRequest are re-issued. How-
ever, the timestamp appended to the URL may cause a key mis-
match, which would not allow us to easily ﬁnd the correct response
to be re-injected into Blink. As explained in Section 5.2, Web-
Capsule is able to “re-synchronize” the currentTime() replay
clock to the user input events, which alleviates this problem. How-
ever, in some cases our PlatformWrapper may return a time
value that is a few milliseconds off, compared to what was observed
during recording for the same XMLHttpRequest, thus still caus-
ing a mismatch.
Proposed Solution. To address the above problem, we use a best
effort approach that works very well in practice. During record-
ing, every time a network request is issued, we determine if it was
initiated (directly or indirectly) by JavaScript. If that’s the case,
we reconstruct the JavaScript call stack to identify exactly what
JavaScript function caused the network request to be issued, and
store this information in the browsing trace. Then, for those replay
events in which there is a URL mismatch and we cannot easily
identify the related network response data, we analyze the Java-
Script call stack of all the not-yet-consumed responses in the re-
corded browsing trace, and return the “closest” response. Specif-
ically, let Rrec = (qi, ri)i=1...n be such a set of unconsumed
network requests, qi, and related responses, ri. Also, let q(rep)
,
be the network request issued during replay that we are trying to
match with a response. We then ﬁnd the request qi∗ ∈ Rrec whose
JavaScript call stack matches the call stack associate to q(rep)
, and
whose timestamp is the closest to q(rep)
’s timestamp (computed
as a delta from the replay start time and record start time, respec-
tively). Then, we return the related response ri∗. In the rare cases
in which the network response search still fails, we return an empty
response with HTTP code 204 No Content.
5.4 Divergence Detection and Self-Healing
i
i
i
The replay approaches described in Section 5.2 and 5.3 work
well in practice. Nonetheless, there may be (rare) cases in which
we still fail to correctly replay an event (e.g., due to complex thread
scheduling issues), causing the replay to differ slightly from the re-
corded browsing trace. As a concrete example, assume that during
recording the user clicked on an element on a given web page, P1,
and the browser navigates to page P2. Suppose that during replay
a problem occurs, and the same re-injected click does not cause the
expected transition from P1 to P2. To recover from these prob-
lems, WebCapsule implements a replay self-healing approach. As
mentioned in Section 4, during recording each recorded user in-
put event includes the URL of the page where the input occurred.
Therefore, if during replay the browser does not navigate to page
P2, this will cause a mismatch between the URL associated to the
next input event to be replayed (i.e., P2’s URL), and the URL of
the current page rendered on the browser (which erroneously re-
mained on P1). WebCapsule is able to detect such a mismatch, and
responds to these cases by forcing the browser to load P2, before
continuing with normal replay of the remaining events on the trace.
If self-healing occurs, WebCapsule outputs detailed information
about the self-healing process to the replay logs, to notify the foren-
sic analyst that a replay problem has been encountered and to ex-
plain how WebCapsule recovered from it. In general, WebCapsule
implements a number of mechanisms to detect and explain any
differences between the recorded traces and the replay events, so
that the forensic analyst can accurately reconstruct what happened
while the user was browsing.
6. EVALUATION
6.1 Experimental Setup
We performed experiments on two different devices: a desktop
Dell Optiplex 980 with a Core i7 870 CPU and 8GB of RAM run-
ning Ubuntu Linux; and a Asus Nexus 7 tablet with 2GB of RAM,
32GB of storage, and running Android 5.0.1. We also used an x86-
based Android Virtual Device (AVD), to demonstrate that WebCap-
sule can be used to record traces on a physical device (the ARM-
based Nexus 7) and to later replay the traces in a different platform.
For all experiments, we used the Chromium4 codebase. We de-
ployed Chromium with our WebCapsule instrumentations on the
desktop computer, and a ChromeShell APK [8] with WebCapsule
enabled on the Nexus 7 (we were also able to perform some pre-
liminary experiments with WebView + WebCapsule on Android,
3Latest page analysis performed on February 22, 2015.
4Git commit: 45eed524365a1cbc612aba31ab36aafd7788d825.
140Table 1: Functionality Tests
6.3 Evaluation on Phishing Attacks
Acid3 Errors
Record
0/100
0/100
Replay
1/100
1/100
Dromaeo Errors
Replay
no errors
no errors
Record
no errors
no errors
Linux
Android
which are not reported here; we plan to expand and report the We-
bView experiments in our future work). All experiments were per-
formed using the default browser process model [22], whereby each
browser tab is handled in a different process (except in some cor-
ner cases). In addition, each process uses its own separate instance
of Blink and V8. In this process model, WebCapsule could record
multiple tabs independently. Therefore, all our results refer to ex-
periments performed on one single tab.
Overall, our main code modiﬁcations to Blink and V8 (includ-
ing the DevTools modiﬁcations and platform API wrappers dis-
cussed in Sections 4 and 5) consist of approximately 14,000 lines
of code (primarily C++ code, plus a number of Python scripts for
log analysis). We plan to release our WebCapsule prototype sys-
tem and a variety of browsing traces collected for evaluation at
http://webcapsule.org.
6.2 Functionality Tests
First, we performed a set of functionality tests, which aim to
verify that WebCapsule’s record and replay capabilities do not neg-
atively impact Blink’s functionalities (e.g., support for JavaScript
and DOM manipulation functionalities). To this end, we leverage
two popular web browser benchmarks that aim to test functional
correctness. These benchmarks include Web Standards Project’s
Acid3 [1, 32] and the Dromaeo Test Suite developed by Mozilla
[10].
Using both Chromium and the ChromeShell APK with WebCap-
sule on (ﬁrst in record mode, and then in replay mode), we sepa-
rately ran the Acid3 and Dromaeo tests (for Dromaeo, we ran the
“DOM Core Tests” and the “V8 JavaScript Tests”). WebCapsule
was able to record and replay the Dromaeo tests with no errors.
Similarly, the Acid3 tests completed correctly during recording,
though one test raised an exception during replay. Speciﬁcally,
Acid3 ran 100 different JavaScript and DOM manipulation tests,
and during replay WebCapsule missed to pass only one test on both
Linux and Android, namely Test 805, due to a network request
that we did not match correctly.
The above results show that in record mode WebCapsule is com-
pletely transparent, because it does not alter the core functionalities
of Blink/V8. In addition, these tests show that WebCapsule can re-
play complex web page events with high accuracy (perfectly for
Dromaeo, and 99% accuracy for Acid3), as shown in Table 1.
After investigating the browsing events related to Test 80, we
found that the URL requested for that test had a timestamp em-