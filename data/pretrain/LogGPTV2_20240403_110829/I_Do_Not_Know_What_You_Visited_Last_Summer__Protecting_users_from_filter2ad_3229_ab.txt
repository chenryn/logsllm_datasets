instances using Alloy and experimentally demonstrate 67 out
of 68 third-party services from Alexa Top 50 web sites work
3In directed graph, the number of head endpoints adjacent to a node is called
the in-degree of the node. The maximum in-degree of a graph is the in-degree
of the node with largest in-degree in the graph.
Algorithm 2 Target Principal Selection Algorithm
Input:
manager : P rincipalM anager
cause : EventCause
source : P rincipal
request : HT T P Request
manager.f indStartingP ointP rincipal(request.domain)
source, request.domain)
current ( candidates.getN ext()
if equal(current, N U LL) then
break
target (
if not equal(target, N U LL) then
return target
Output:
1: target ( N U LL
2: if equal(cause, AddressBar) or equal(cause, Argument) then
3:
4:
5:
6:
7:
end if
8:
target ( manager.buildP rincipal(request.domain)
9: manager.appendStartingP ointP rincipal(target)
10:
return target
11: end if
12: candidates (
13: manager.breadthF irstSearchP rincipalGraphReversely(
14:
15: loop
16:
17:
18:
19:
20:
21:
22:
23:
24:
end if
25: end loop
26: if equal(target, N U LL) then
27:
28:
29:
30:
31:
32:
33: manager.appendChildP rincipal(source, target)
34: end if
35: manager.appendParentPrincipal(target, source)
36: return target
end if
parents_num ( manager.getP arentsN umber(current)
if less(parents_num, 2) then
end if
target ( manager.buildP rincipal(request.domain)
target (
if not equal(target, N U LL) then
return target
manager.f indChildP rincipal(source, request.domain)
target ( current
break
properly in TrackingFree. Fig. 2 shows an example of principal
graph.
Algorithm 2 illustrates how TrackingFree selects target
principals. Line 2-11 shows that if a web page is opened
through address bar or command line argument, TrackingFree
will put it in a starting point principal. Line 12-36 indicates
when a principal switch occurs, TrackingFree ﬁrst looks up
appropriate target principal from source principal’s ancestors.
If there exists an ancestor principal that meets the following
two conditions: 1). its domain is same as that of the target
URL, and 2). the number of the principal’s parents (the node’s
in-degree) is less than two, TrackingFree will set it as the
target principal (line 12-25). Only if TrackingFree fails to
ﬁnd target principal from ancestors, would a child principal
with the appropriate domain be selected. If there is no such
child principal, TrackingFree will construct a new one. After
selecting the target principal, TrackingFree needs to update
the parent-child relationship on principal organization graph
maintained by principal backend (line 35).
C. Principal Communication
Another important topic for any multi-principal browser
is principal communication, which can be classiﬁed into two
categories: explicit communication and implicit communication.
On one hand, principal communication can be abused by
4
communications; (4). if authentication succeeds, the user will
be redirected back to yahoo.com with access token and several
other parameters from facebook.com and SSO process ﬁnishes.
When using TrackingFree, principal switch occurs in step (2)
and (4). As we adopt two-in-degree-bounded graph algorithm,
two different principals, one for Yahoo and the other for Face-
book, get involved in the SSO scenario and the user will ﬁnally
be redirected to the original Yahoo principal. More importantly,
all necessary information from one principal to another are all
passed through URL parameters, which TrackingFree allows.
These two conditions guarantee TrackingFree not breaking
this SSO scenario. There exist a few SSO scenarios that are
more complicated than Facebook SSO service. For example,
login sears.com using user’s Google account, which we have
discussed in Section III-E1, involves four different principals, but
since information are still exchanged through URL’s parameters,
TrackingFree does not break its functionality either.
We have analyzed all
the 36 SSO scenarios found in
Alexa Top 50 web sites and conﬁrmed that 34 of them
only use URL parameter to exchange information. The rest
two cases, login ask.com with user’s Facebook and LinkedIn
accounts, also use postMessage API to pass data among involved
principals. TrackingFree supports this communication channel,
so theoretically, TrackingFree does not break any of the SSO
scenarios. In practice, this version of TrackingFree did fail one
SSO scenario (login pinterest.com with Facebook account) due
to implementation issue, but user can still use this service with
the help of TrackingFree’s domain data migration component
(see Section VI-B3).
B. Cross-site Contents Sharing
With online social network (OSN) getting more and more
popular, sharing one site’s contents to the user’s OSN accounts
becomes increasingly popular. We will use the example of
sharing a Youtube video to user’s Twitter web page to show
how TrackingFree works for these services.
When a user clicks ”Share to Twitter“ button below a Youtube
video, a navigation request URL toward twitter.com, carrying all
the information about the video on its parameters, is generated.
Instead of directly sending the request, TrackingFree switches to
another principal, where the request gets sent out. After receiving
the request, Twitter authenticates the user and shares the video
to user’s account if authentication succeeds. In the process, the
communication channel used by the two principals is navigation
URL’s parameters. As we allow this channel, TrackingFree does
not break cross-site contents sharing’s functionalities. Some other
third-party services, including third-party online payment and
OSN like/+1 button, have similar working scenarios, so they all
work as expected on TrackingFree, which has been conﬁrmed
by our evaluation results on all 32 non-SSO third-party services
found on Alexa Top 50 web sites.
Though not breaking functionalities of third-party services,
we admit that TrackingFree does affect user experiences: when
a user wants to share contents from several different web sites
(e.g., Pinterest and Youtube) to the same OSN (e.g., Facebook),
the user might need to login her OSN account several times
if that has not been done before. We provide domain data
synchronization component to give user the option of choosing
between privacy and user experience, which will be discussed
in Section IV-C. Moreover, as all the principals adopt persistent
client-side storage, a user only needs to login once for each
third-party service. For example, the user does not need to login
again when she wants to share the second video from Youtube
to her Facebook account.
C. Working on Multiple Principals of a Single Site
TrackingFree can create several different principals for a
single web site in order to preserve user’s privacy, which might
lead to inconsistency. We use the example of shopping on
Amazon to demonstrate the issue. When a user visits amazon.com
through address bar and puts a book into shopping cart,
TrackingFree uses amazon.com’s starting point principal, whose
cookie stores the cart’s contents. Then, the user opens another
web page of amazon.com by clicking a link on google.com.
As the new page is opened through different visiting path,
TrackingFree renders the page in another principal. This time,
the user puts a chocolate into her shopping cart and the cookie
records the product. Since the two shopping carts’ contents are
stored in different cookie storages, the user has to checkout
in both principals to purchase the book and chocolate, which
affects user experience.
TrackingFree takes two approaches to address the incon-
sistency. First, when a principal gets activated, TrackingFree
checks if there exist other principals with the same domain and
if so, pops up a notice reminding the user and encourages her to
work on one of them. Secondly, the domain data synchronization
(DDS) of domain data manager component allows users to decide
the balance between privacy and user experience according to
there own needs. DDS enables multiple principals to synchronize
client-side data (e.g., cookies, HTML5 local storage) belonging
to domains that the user speciﬁes, while still achieving the same
anti-tracking capability for all the other domains. DDS is disabled
by default as TrackingFree gives privacy and compatibility
the highest priority. To enable it, a user needs to register 1).
one or several synchronizing domains and 2). principals to be
synchronized for each of the domains, which we refer to as
synchronization scope. DDS monitors and synchronizes each
speciﬁed domain’ data among corresponding synchronization
scope. In this example, synchronizing domain should be set as
amazon.com while synchronization scope set as all principals
with domain of amazon.com. In the contents sharing scenario
discussed in Section IV-B, they should be set as facebook.com,
then the user only needs to login her Facebook account once
when sharing contents from various other web sites.
Once domain data synchronization is enabled, the overall
formally-proven privacy-preserving capability of TrackingFree
cannot be guaranteed. In the example discussed above, trackers
belonging to amazon.com can correlate user’s activities on at
most 3 ⇤ N principals without collaborating with other sites,
where N is the number of Amazon principals. In practice, this
is hard to achieve because the condition for the worst case
is not easy to meet. Moreover, since it only synchronizes the
data belonging to amazon.com, TrackingFree still protects user
against trackers from other domains.
V.
IMPLEMENTATION
We implemented a proof-of-concept TrackingFree in
Chromium with around 1,800 lines of codes. We changed
7
Chromium’s proﬁle mechanism to isolate different principal.
Each principal resides in a unique directory,
in which all
the persistent storages (e.g., cookie jars, cache storages), user
preferences and plugin ﬁles are stored. TrackingFree maintains a
table to map principals to these directories, which guarantees that
no two principals correspond to the same directory. Moreover, we
hooked WebUIImpl::ProcessWebUIMessage and PrefService::Set
methods to monitor user-initiated preference change.
For better efﬁciency, we modiﬁed Chromium’s render and
asked TrackingFree to determine principal switch directly in
render process. If a principal switch is required, TrackingFree
passes the request information to browser kernel, where principal
manager determines target principal. We hooked all the click
events to record whether there are user activities on each frame.
All cross-site messages will be intercepted and sent back to
browser kernel, where TrackingFree’s message policy enforcer
checks if each message is permitted based on our policies
and, if it is, sends these messages to target principal through
IPC messages. We also implemented a history manager object
for each principal (proﬁle) and it monitors the principal’s
HistoryService, DownloadManagerImpl and BookmarkModel
objects. Whenever there is a change, the history manager will
inform it to public history manager object, which is running
on an isolated daemon principal and responsible for updating
browser UI.
As for domain data manager, the current implementation only
supports cookie migration and synchronization, but it can be
easily extended to support other storages. We hooked all cookie
message handlers, such as OnSetCookie and OnDeleteCookie
in class RenderMessageFilter, to monitor and update cookie
changes in different principals.
VI. EVALUATION
We evaluate TrackingFree in two ways. First, we perform
a formal analysis for its anti-tracking capability. Then we
experimentally assess the system’s anti-tracking effectiveness,
performance overhead and compatibility. In this section, unless
otherwise stated, both domain data migration and domain data
synchronization are disabled.
A. Formal Analysis & Discussion
We use model-checking tool to formally analyze Track-
ingFree’s anti-tracking ability. To compare TrackingFree with
browsers adopting other content allocation mechanisms, we
further evaluate browsers that adopt top-frame based and same-
origin-policy (SOP) based content allocation mechanism. The
model-checking framework we adopt is Alloy [16], a declarative
modeling language based on ﬁrst-order relational logic. Alloy has
been used in a wide range of applications to ﬁnd vulnerabilities
in security mechanisms, among which, Akhawe et al. [3] have
proposed a complete web model in Alloy. Our evaluation is
based on the client/server model described in [3], whose client-
side is redesigned according to TrackingFree’s architecture. In
formal analysis, we assume that non-tracking web sites do not
relay identiﬁers for tracking sites and different tracking sites do
not exchange a user’s identiﬁer with each other. We will discuss
tracker’s tracking range in Section VI-A4 if the assumptions do
not hold.
1) TrackingFree Evaluation:
Security Goal. The broader security goal of TrackingFree
is to defend against cross-site web tracking. We distill two more
concrete goals, both of which are modeled by Alloy assertions.
• For any two HTTP requests toward tracking servers while
sent from different principals, we denote the identiﬁers carried
by each of them as setA and setB, then the following formula
should always hold:
(setA\setB 6= ;) implies ((setA ✓ setB)or(setB ✓ setA))
• The tracking identiﬁers carried in any HTTP request toward
tracking servers are at most stored in the client-side states of
three different principals.
identiﬁers,
these must exist at
The ﬁrst goal shows that if tracking servers can correlate
several different
least one