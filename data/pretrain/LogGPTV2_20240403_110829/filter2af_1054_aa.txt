### Java反序列化
序列化：把对象转换为字节序列的过程。  
反序列化：把字节序列恢复为对象的过程。  
##### JDK类库中的序列化API
java.io.ObjectOutputStream代表对象输出流，它的writeObject(Object
obj)方法可对参数指定的obj对象进行序列化，把得到的字节序列写到一个目标输出流中。  
java.io.ObjectInputStream代表对象输入流，它的readObject()方法从一个源输入流中读取字节序列，再把它们反序列化为一个对象，并将其返回。  
**在Java中，对象的序列化与反序列化被广泛应用到RMI(远程方法调用)及网络传输中。**
##### Java序列化数据解析
数据开头为“AC ED 00 05”，数据内容包含了包名与类名、类中包含的变量名称、类型及变量的值。  
ava.io.ObjectStreamConstants类中定义了STREAM_MAGIC与STREAM_VERSION，查看JDK1.5、1.6、1.7、1.8的ObjectStreamConstants类，STREAM_MAGIC值均为0xaced，STREAM_VERSION值均为5。
##### 影响范围
Breenmachine的这篇blog让java反序列化漏洞得到更多的关注，他介绍了如何利用Java反序列化漏洞，来攻击最新版的WebLogic、WebSphere、JBoss、Jenkins、OpenNMS这些大名鼎鼎的Java应用，实现远程代码执行。  
##### 漏洞原理
如果Java应用对用户输入，即不可信数据没有进行校验而直接做了反序列化处理，那么攻击者可以通过构造恶意输入，让反序列化产生非预期的对象，非预期的对象在产生过程中就有可能带来任意代码执行。
### Apache Commons Collections
Apache Commons
Collections是一个扩展了Java标准库里的Collection结构的第三方基础库，它提供了很多强有力的数据结构类型并且实现了各种集合工具类。作为Apache开源项目的重要组件，Commons
Collections被广泛应用于各种Java应用的开发。  
该漏洞的出现的根源在CommonsCollections组件中对于集合的操作存在可以进行反射调用的方法，并且该方法在相关对象反序列化时并未进行任何校验.  
Apache Commons Collections中提供了一个Transformer的类，这个接口的的功能就是把一个对象转换为另一个对象。  
图上红框标注的是java反序列化漏洞的poc包含的类。  
invokeTransformer：Transformer implementation that creates a new object
instance by reflection.（通过反射，返回一个对象）  
ChainedTransformer：Transformer implementation that chains the specified
transformers together.（把transformer连接成一条链，对一个对象依次通过链条内的每一个transformer进行转换）  
ConstantTransformer：Transformer implementation that returns the same constant
each time.（把一个对象转化为常量，并返回）  
InvokerTransformer是比较关键的一个类，我们来看看它的实现：  
我们可以看到该该方法中采用了反射的方法进行函数调用，Input参数为要进行反射的对象(反射机制就是可以把一个类,类的成员(函数,属性),当成一个对象来操作,希望读者能理解,也就是说,类,类的成员,我们在运行的时候还可以动态地去操作他们.)，iMethodName,iParamTypes为调用的方法名称以及该方法的参数类型，iArgs为对应方法的参数，在invokeTransformer这个类的构造函数中我们可以发现，这三个参数均为可控参数  
POC：  
Poc解读：整个poc的逻辑可以这么理解，构建innerMap的键值对，为其赋值，利用Transformed的decorate方法，可以对Map数据结构的key，value进行transform。该方法有三个参数，第一个为待转化的map对象，第二个为map对象内的key要经过的转化方法，第三个参数为map对象内的value要经过的转化方法。  
TransformedMap.decoreate(目标map，key的转化对象（null或者单个链），value的转化对象)  
poc对innerMap的value进行转换，当innerMap的value执行完一个完整的转换链，就完成了命令执行。
如果Java应用没有对传入的序列化数据进行安全性检查，我们可以将恶意的TransformedMap序列化后，远程提交给Java应用，如果Java应用可以触发变换，即可成功远程命令执行。那如何让Java应用触发Transformer的变换呢？  
在进行反序列化时，我们会调用ObjectInputStream类的readObject()方法。如果被反序列化的类重写了readObject()，那么该类在进行反序列化时，Java会优先调用重写的readObject()方法。  
结合前述Commons
Collections的特性，如果某个可序列化的类重写了readObject()方法，并且在readObject()中对Map类型的变量进行了键值修改操作，并且这个Map变量是可控的，就可以实现我们的攻击目标了。  
我们观察到java运行库中有这样一个类AnnotationInvocationHandler，这个类有一个成员变量memberValues是Map类型.  
AnnotationInvocationHandler的readObject()函数中对memberValues的每一项调用了setValue()函数。  
因此，我们只需要使用前面构造的Map来构造AnnotationInvocationHandler，进行序列化，当触发readObject()反序列化的时候，就能实现命令执行。  
这段POC本质上就是利用反射调用Runtime() 执行了一段系统命令，作用等同于：
    ((Runtime)Runtime.class.getMethod("getRuntime",null).invoke(null,null)).exec("calc.exe");
### Weblogic Exploit
Oracle Weblogic **T3** Deserialization Remote Code Execution Vulnerability  
CVE-2015-4852  
CVE-2016-0638  
CVE-2016-3510  
CVE-2017-3248  
weblogic
采用T3协议进行序列化数据的传输，可以看到weblogic发送的JAVA序列化数据分为6个部分，第一部分的前四个字节为整个数据包的长度，第2-6部分均为JAVA序列化数据。经测试，必须先发送T3协议头数据包，再发送JAVA序列化数据包，才能使weblogic进行JAVA反序列化，进而触发漏洞。如果只发送JAVA序列化数据包，不先发送T3协议头数据包，无法触发漏洞。  
##### CVE-2015-4852
blacklist
    org.apache.commons.collections.functors*
    com.sun.org.apache.xalan.internal.xsltc.trax*
    javassist*
    org.codehaus.groovy.runtime.ConvertedClosure
    org.codehaus.groovy.runtime.ConversionHandler
    org.codehaus.groovy.runtime.MethodClosure
CVE-2015-4852的反序列化的点有三个：
    weblogic.rjvm.InboundMsgAbbrev.class::ServerChannelInputStream
    weblogic.rjvm.MsgAbbrevInputStream.class
    weblogic.iiop.Utils.class
后面的几个漏洞实质都是对黑名单的一个绕过。
##### CVE-2016-0638
原理将反序列化的对象封装进了 weblogic.corba.utils.MarshalledObject，然后再对 MarshalledObject
进行序列化，生成 payload 字节码。反序列化时 MarshalledObject 不在 WebLogic 黑名单里，可正常反序列化，在反序列化时
MarshalledObject 对象调用 readObject 时对 MarshalledObject
封装的序列化对象再次反序列化，这样就逃过了黑名单的检查。
##### CVE-2017-3248
利用了黑名单之外的反序列化类，通过 JRMP 协议达到执行任意反序列化 payload。（Java远程消息交换协议 JRMP 即 Java Remote
MessagingProtocol ，是特定于 Java 技术的、用于查找和引用远程对象的协议。这是运行在 Java 远程方法调用 RMI
之下、TCP/IP 之上的线路层协议。）  
下面给出一段在tenable找的描述