### 优化后的文本

#### 正则表达式匹配
这种正则表达式不仅会匹配正常的URL（例如 `https://www.example.com/home`），也会匹配不存在的URL（如 `https://www.example.com/nonexistent`）。如果在正则表达式的末尾添加了 `$` 符号，则不会匹配这些恶意URL。

#### 6.3 ASP.NET
ASP.NET框架中有一个内置功能，称为FriendlyURLs。该功能的主要目的是使URL更加简洁和用户友好。当用户访问 `https://www.example.com/home.aspx` 时，服务器会删除扩展名，并将用户重定向到 `https://www.example.com/home`。

此功能可以在Route.config文件中进行配置，默认情况下处于启用状态。启用FriendlyURLs后，当用户通过 `http://localhost:39790/Account/Manage.aspx` 访问已存在的Manage.aspx页面时，服务器会移除 `.aspx` 扩展名并显示页面内容。

在这种配置下，如果用户访问 `http://localhost:39790/Account/Manage.aspx/test.css`，服务器会移除 `.aspx` 扩展名并将用户重定向到 `http://localhost:39790/Account/Manage/test.css`，此时服务器会返回404错误。这意味着当FriendlyURLs功能启用时，攻击条件无法满足。

尽管FriendlyURLs默认启用，但许多网站并未使用此功能。该功能可以在Route.config文件中关闭。关闭该功能后，访问攻击URL地址时，服务器会返回200 OK响应，并显示Manage.aspx页面的内容。

#### 七、现有的缓存机制
攻击的第二个条件是Web应用程序启用了Web缓存功能，并且根据文件扩展名进行缓存，同时忽略任何缓存头部。以下是一些现有缓存机制及其处理过程：

##### 7.1 Cloudflare
当来自Web服务器的文件到达Cloudflare时，文件会经过两个阶段的处理：
1. **资格阶段**：Cloudflare检查目标站点和文件来源目录是否设置了缓存功能。如果通过检查，Cloudflare会进一步检查具体的URL是否以特定静态扩展名结尾。
2. **失格阶段**：如果URL以静态扩展名结尾，Cloudflare会检查HTTP缓存头部是否存在。

不幸的是，访问恶意URL时，Web服务器可能会返回带有“no-cache”指令的动态页面缓存头部。幸运的是，Cloudflare提供了一个名为“边缘缓存过期TTL”的功能，可以覆盖现有的缓存头部信息。启用此功能后，即使文件带有“no-cache”指令，仍会被缓存。出于各种原因，在Cloudflare的建议下，该功能通常处于启用状态。

##### 7.2 IIS ARR
应用程序请求路由（Application Request Routing, ARR）模块为IIS提供了负载均衡功能。ARR还提供缓存功能，允许Web服务器通过负载均衡器设置缓存规则，以便将文件保存到缓存目录中。创建新的缓存规则时，可以使用通配符和目标扩展名来定义待缓存的文件类型。ARR根据URL尾部的扩展名识别文件类型，并可忽略文件的缓存头部。

例如，IIS ARR与两个Web服务器连接，并配置为缓存所有样式表和JavaScript文件。如果客户端访问恶意URL，缓存目录中会生成一个新的目录，目录名为welcome.php，并在其中生成名为test.css的新文件，内容为welcome.php页面的内容。

##### 7.3 NGINX
作为负载均衡服务器，NGINX也可以提供缓存功能，缓存从Web服务器返回的页面。通过NGINX配置文件可以设置缓存规则，以缓存特定类型的静态文件并忽略其缓存头部。

当来自Web服务器的页面到达NGINX时，NGINX会搜索URL尾部的扩展名，以识别文件类型。如果缓存目录中没有缓存任何文件，经过认证的用户访问恶意URL（如 `http://www.sampleapp.com/app/welcome.php/test.css`）时，用户的页面会被缓存到缓存目录中。接下来，未经认证的攻击者访问恶意URL时，NGINX会返回已缓存的文件，其中包含用户的隐私数据。

#### 八、缓解措施
可以采取以下几种方法来缓解此类攻击：
1. 配置缓存策略，仅在文件的HTTP缓存头部允许缓存时才缓存这些文件。
2. 将所有静态文件保存到指定目录，并只缓存该目录。
3. 如果缓存组件支持，应配置其根据文件的具体内容进行缓存。
4. 配置Web服务器，使其在处理类似 `http://www.example.com/home.php/nonexistent.css` 的页面时，返回404或302响应，而不是home.php的内容。

#### 九、总结
虽然实施Web缓存欺骗攻击并不容易，但仍可能导致严重的后果，包括泄露用户隐私信息和攻击者完全控制用户账户。此前发现一些知名网站受到此类攻击影响，大多数由常见的CDN服务商提供服务。我们有理由相信，目前仍有大量网站可能成为此类攻击的受害者。

虽然本文只提到了几种满足Web缓存欺骗攻击条件的技术，但还有许多其他Web框架和缓存机制存在脆弱性，攻击者可以利用类似技术发起攻击。如果Web框架和缓存机制能够创造条件满足漏洞场景，我们认为它们本身并不存在此类漏洞，主要问题是配置不当。

为了防御Web缓存欺骗攻击，技术人员首先需要了解此类攻击的条件。厂商也应采取行动，避免其产品符合攻击条件。这可以通过禁用特定功能、更改默认设置及行为、提供警报信息来增强技术人员的警觉意识来实现。

#### 十、致谢
感谢Sagi Cohen、Bill Ben Haim、Sophie Lewin、Or Kliger、Gil Biton、Yakir Mordehay、Hagar Livne。

#### 十一、参考资料
1. RPO – The Spanner 博客
2. RPO gadgets – XSS Jigsaw 博客
3. Django URL分发器
4. NGINX缓存机制
5. Web缓存欺骗攻击
6. 针对PayPal主页的web缓存欺骗攻击
7. Cloudflare blog的参考资料
8. Akamai博客上的参考资料