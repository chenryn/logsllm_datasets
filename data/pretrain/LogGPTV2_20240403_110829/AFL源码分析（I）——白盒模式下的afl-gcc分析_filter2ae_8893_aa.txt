# AFL源码分析（I）——白盒模式下的afl-gcc分析
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 写在前面
###  本文所用目标文件
  1. 使用`sudo apt-get install autoconf`安装工具包
  2. 准备待测文件，本文使用`ctf-wiki`中的`ret2text.c`作为目标文件
  3. 执行`autoscan ./`生成`configure.scan`文件如果在此步骤中收到了错误信息，形如： 
        Unescaped left brace in regex is deprecated, passed through in regex; marked by `(`as_path`由`find_as`函数获取并设置)。
  10. 如果`clang_mode`标志位置位，向`cc_params`中添加参数`-no-integrated-as`。
  11. 如果`AFL_HARDEN`环境变量被设置，向`cc_params`中添加参数`-fstack-protector-all`。 
    * `-fstack-protector-all`选项表示启用对所有函数的栈保护机制(`Canary`)。
  12. 如果`fortify_set`标志位未置位，向`cc_params`中添加参数`-D_FORTIFY_SOURCE=2`。 
    * `-D_FORTIFY_SOURCE`选项表示将开启缓冲区溢出保护，当此参数的级别为`2`时，代表启用了较强的保护。同时，此保护需要同时与`-O2`/`-O3`参数使用，否则将不会生效。
  13. 如果`asan_set`标志位置位，设置环境变量`AFL_USE_ASAN=1`。
  14. 如果`asan_set`标志位未置位，但是环境变量`AFL_USE_ASAN`已被设置，检查`AFL_USE_MSAN`或`AFL_HARDEN`环境变量是否被设置，如果两个环境变量之一被设置，则中断`afl-gcc`过程。若两个标志均未被设置，则向`cc_params`中添加参数`-U_FORTIFY_SOURCE`以及`-fsanitize=address`。
  15. 如果`asan_set`标志位未置位，环境变量`AFL_USE_ASAN`未被设置，但是环境变量`AFL_USE_MSAN`已被设置，检查`AFL_USE_ASAN`或`AFL_HARDEN`环境变量是否被设置，如果两个环境变量之一被设置，则中断`afl-gcc`过程。若两个标志均未被设置，则向`cc_params`中添加参数`-U_FORTIFY_SOURCE`以及`-fsanitize=memory`。 
    * 这里不允许同时设置`AFL_USE_MSAN`、`AFL_USE_ASAN`、`AFL_HARDEN`的原因是因为若同时设置将导致运行速度过慢。
  16. 若环境变量`AFL_DONT_OPTIMIZE`未被设置，向`cc_params`中添加参数`-g`、`-O3`、`-funroll-loops`、`-D__AFL_COMPILER=1`、`-DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION=1`。 
    * `-g`选项表示在编译过程中输出调试信息。
    * `-O3`选项表示启动最高等级的编译优化。
    * `-funroll-loops`选项表示进行循环的编译优化，即展开循环，以较小的恒定迭代次数完全除去循环。执行循环强度消除并消除在循环内部使用的变量。这是用简单而快速的操作(如加法和减法)替代耗时操作(如乘法和除法)的过程。
    * `-DXXXX`选项表示在编译时定义宏，在此例中相当于`#define __AFL_COMPILER 1`、`#define FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION 1`
  17. 若环境变量`AFL_NO_BUILTIN`被设置，向`cc_params`中添加参数`-fno-builtin-strcmp`、`-fno-builtin-strncmp`、`-fno-builtin-strcasecmp`、`-fno-builtin-strncasecmp`、`-fno-builtin-memcmp`、`-fno-builtin-strstr`、`-fno-builtin-strcasestr`。 
    * `-fno-builtin-*`选项表示不使用指定的内建函数。例如，`-fno-builtin-strcmp`表示不使用内建的`strcmp`函数，而是使用源代码中的`strcmp`函数。
###  `execvp`函数
此函数用于执行`cc_params[0] cc_params[1] cc_params[1]......`命令。
## 0x03 afl-gcc实例分析
使用`CC=/home/error404/AFL/afl-gcc
./configure`生成的`Makefile`与使用`./configure`生成的`Makefile`对比，主要有以下区别：
此时我们可以修改`afl-gcc.c`用来打印出`cc_params`的内容
打印出内容后，可以看到`afl-gcc`按我们上文所预期的那样添加了部分参数。
    gcc -DHAVE_CONFIG_H -I. -g -O2 -MT ret2text.o -MD -MP -MF .deps/ret2text.Tpo -c -o ret2text.o ret2text.c -B /home/error404/AFL -g -O3 -funroll-loops -D__AFL_COMPILER=1 -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION=1
此外，我们还发现在编译过程还调用了`afl-as`
这是因为`afl-gcc`使用了`-B`参数限定了编译器中汇编器的位置，并且通过我们的分析，`afl-gcc`并未进行代码的插桩，仅仅是针对`gcc`进行了参数的整理与优化，那么可以猜测`afl-as`是主要负担插桩工作的。
## 0x04 afl-as源码分析(第一部分)