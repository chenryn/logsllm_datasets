// locks and semaphores
queue_head_t semaphore_list; // list of owned semaphores
queue_head_t lock_set_list; // list of owned lock sets
int semaphores_owned; // number of owned semaphores
int lock_sets_owned; // number of owned locks
...
#ifdef MACH_BSD
void *bsd_info; // pointer to BSD process structure
#endif
struct shared_region_mapping *system_shared_region;
struct tws_hash *dynamic_working_set;
...
};
The following are examples of Mach task routines accessible through the system library.
 mach_task_self() is the task "identity trap"it returns a send right to the calling task's kernel port.
As we saw in Chapter 6, the system library caches the right returned by this call in a per-task
variable.
 pid_for_task() retrieves the BSD process ID for the task specified by the given port. Note that
whereas all BSD processes have a corresponding Mach task, it is technically possible to have a
Mach task that is not associated with a BSD process.
 task_for_pid() retrieves the port for the task corresponding to the specified BSD process ID.
 task_info() retrieves information about the given task. Examples of task_info() flavors include
TASK_BASIC_INFO (suspend count, virtual memory size, resident memory size, and so on),
TASK_THREAD_TIMES_INFO (total times for live threads), and TASK_EVENTS_INFO (page faults,
system calls, context switches, and so on).
 task_threads() returns an array of send rights to the kernel ports of all threads within the given
task.
 task_create() creates a new Mach task that either inherits the calling task's address space or is
created with an empty address space. The calling task gets access to the kernel port of the newly
created task, which contains no threads. Note that this call does not create a BSD process and as
such is not useful from user space.
 task_suspend() increments the suspend count for the given task, stopping all threads within the
task. Newly created threads within a task cannot execute if the task's suspend count is positive.
 task_resume() decrements the suspend count for the given task. If the new suspend count is zero,
task_resume() also resumes those threads within the task whose suspend counts are zero. The task
suspend count cannot become negativeit is either zero (runnable task) or positive (suspended task).
 task_terminate() kills the given task and all threads within it. The task's resources are
deallocated.
 task_get_exception_ports() retrieves send rights to a specified set of exception ports for the
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 16 of 107
given task. An exception port is one to which the kernel sends messages when one or more types of
exceptions occur. Note that threads can have their own exception ports, which are preferred over the
task's. Only if a thread-level exception port is set to the null port (IP_NULL), or returns with a
failure, does the task-level exception port come into play.
 task_set_exception_ports() sets the given task's exception ports.
 task_swap_exception_ports() performs the combined function of task_get_exception_ports
() and task_set_exception_ports().
 task_get_special_port() retrieves a send right to the given special port in a task. Examples of
special ports include TASK_KERNEL_PORT (the same as the port returned by mach_task_self()used
for controlling the task), TASK_BOOTSTRAP_PORT (used in requests for retrieving ports representing
system services), and TASK_HOST_NAME_PORT (the same as the port returned by mach_host_self()
used for retrieving host-related information).
 task_set_special_port() sets one of the task's special ports to the given send right.
 task_policy_get() retrieves scheduling policy parameters for the specified task. It can also be
used to retrieve default task policy parameter values.
 task_policy_set() is used to set scheduling policy information for a task.
7.2.5. Threads
A Mach thread is a single flow of control in a Mach task. Depending on an application's nature and
architecture, using multiple threads within the application can lead to improved performance. Examples of
situations in which multiple threads could be beneficial include the following.
When computation and I/O can be separated and are mutually independent, dedicated threads can
be used to perform these two types of activities simultaneously.
When execution contextsthreads or processesneed to be created and destroyed frequently, using
threads may improve performance since a thread is substantially less expensive to create than an
entire process.[7]
[7] The performance improvement will typically be perceptible only if the application
creates so many processes (or creates them in such a manner) that the overhead is a
limiting factor in the application's performance.
On a multiprocessor system, multiple threads within the same task can run truly concurrently, which
improves performance if the thread can benefit from concurrent computations.
A thread contains information such as the following:
Scheduling priority, scheduling policy, and related attributes
Processor usage statistics
A few thread-specific port rights, including the thread's kernel port and thread-level exception ports
(corresponding to thread-level exception handlers)
Machine state (through a machine-dependent thread-state structure), which changes as the thread
executes
Figure 710 shows the important constituents of the thread structure in xnu.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 17 of 107
Figure 710. The tHRead structure in the xnu kernel
// osfmk/kern/thread.h
struct thread {
queue_chain_t links; // run/wait queue links
run_queue_t runq; // run queue thread is on
wait_queue_t wait_queue; // wait queue we are currently on
event64_t wait_event; // wait queue event
...
thread_continue_t continuation; // continue here next dispatch
void *parameter; // continuation parameter
...
vm_offset_t kernel_stack; // current kernel stack
vm_offset_t reserved_stack; // reserved kernel stack
int state; // state that thread is in
// scheduling information
...
// various bits of stashed machine-independent state
...
// IPC data structures
...
// AST/halt data structures
...
// processor set information
...
queue_chain_t task_threads; // threads in our task
struct machine_thread machine; // machine-dependent state
struct task *task; // containing task
vm_map_t map; // containing task's address map
...
// mutex, suspend count, stop count, pending thread ASTs
...
// other
...
struct ipc_port *ith_sself; // a send right
struct exception_action exc_actions[EXC_TYPES_COUNT]; // exception ports
...
#ifdef MACH_BSD
void *uthread; // per-thread user structure
#endif
};
7.2.5.1. The Thread API
A user program controls a Mach threadnormally indirectly, through the Pthreads library[8]using the
thread's kernel port. The following are examples of Mach thread routines accessible through the system
library.
[8] The Pthreads library is part of the system library (libSystem.dylib) on Mac OS X.
 mach_thread_self() returns send rights to the calling thread's kernel port.
 thread_info() retrieves information about the given thread. Examples of thread_info() flavors
include THREAD_BASIC_INFO (user and system run times, scheduling policy in effect, suspend
count, and so on) and obsoleted flavors for fetching scheduling policy information, such as
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 18 of 107
ThrEAD_SCHED_FIFO_INFO, ThrEAD_SCHED_RR_INFO, and ThrEAD_SCHED_TIMESHARE_INFO.
 tHRead_get_state() retrieves the machine-specific user-mode execution state for the given
thread, which must not be the calling thread itself. Depending on the flavor, the returned state
contains different sets of machine-specific register contents. Flavor examples include
PPC_THREAD_STATE, PPC_FLOAT_STATE, PPC_EXCEPTION_STATE, PPC_VECTOR_STATE,
PPC_THREAD_STATE64, and PPC_EXCEPTION_STATE64.
 tHRead_set_state() is the converse of tHRead_get_state()it takes the given user-mode
execution state information and flavor type and sets the target thread's state. Again, the calling
thread cannot set its own state using this routine.
 tHRead_create() creates a thread within the given task. The newly created thread has a suspend
count of one. It has no machine stateits state must be explicitly set by calling thread_set_state()
before the thread can be resumed by calling thread_resume().
 thread_create_running() combines the effect of thread_create(), tHRead_set_state(), and
thread_resume(): It creates a running thread using the given machine state within the given task.
 tHRead_suspend() increments the suspend count of the given thread. As long as the suspend count
is greater than zero, the thread cannot execute any more user-level instructions. If the thread was
already executing within the kernel because of a trap (such as a system call or a page fault), then,
depending on the trap, it may block in situ, or it may continue executing until the trap is about to
return to user space. Nevertheless, the trap will return only on resumption of the thread. Note that a
thread is created in the suspended state so that its machine state can be set appropriately.
 thread_resume() decrements the suspend count of the given thread. If the decremented count
becomes zero, the thread is resumed. Note that if a task's suspend count is greater than zero, a
thread within it cannot execute even if the thread's individual suspend count is zero. Similar to the
task suspend count, a thread's suspend count is either zero or positive.
 thread_terminate() destroys the given thread. If the thread is the last thread to terminate in a task
that corresponds to a BSD process, the thread termination code also performs a BSD process exit.
 thread_switch() instructs the scheduler to switch context directly to another thread. The caller
can also specify a particular thread as a hint, in which case the scheduler will attempt to switch to
the specified thread. Several conditions must hold for the hinted switch to succeed. For example, the
hint thread's scheduling priority must not be real time, and it should not be bound to a processorif at
allother than the current processor. Note that this is an example of handoff scheduling, as the caller's
quantum is handed off to the new thread. If no hint thread is specified, tHRead_switch() forces a
reschedule, and a new thread is selected to run. The caller's existing kernel stack is discardedwhen it
eventually resumes, it executes the continuation function[9] thread_switch_continue()
[osfmk/kern/syscall_subr.c] on a new kernel stack. tHRead_switch() can be optionally
instructed to block the calling thread for a specified timea wait that can be canceled only by
thread_abort(). It can also be instructed to depress the thread's priority temporarily by setting its
scheduling attributes such that the scheduler provides it with the lowest possible service for the
specified time, after which the scheduling depression is aborted. It is also aborted when the current
thread is executed next. It can be explicitly aborted through thread_abort() or
thread_depress_abort().
[9] We will look at continuations later in this chapter.
 thread_wire() marks the given thread as privileged such that it can consume physical memory
from the kernel's reserved pool when free memory is scarce. Moreover, when such a thread is to be
inserted in a wait queue of threads waiting for a particular event to be posted to that queue, it is
inserted at the head of the queue. This routine is meant for threads that are directly involved in the
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 19 of 107
page-out mechanismit should not be invoked by user programs.
 thread_abort() can be used by one thread to stop another threadit aborts a variety of in-progress
operations in the target thread, such as clock sleeps, scheduling depressions, page faults, and other
Mach message primitive calls (including system calls). If the target thread is in kernel mode, a
successful tHRead_abort() will result in the target appearing to have returned from the kernel. For
example, in the case of a system call, the thread's execution will resume in the system call return
code, with an "interrupted system call" return code. Note that tHRead_abort() works even if the
target is suspendedthe target will be interrupted when it resumes. In fact, tHRead_abort() should
be used only on a thread that is suspended. If the target thread is executing a nonatomic operation
when tHRead_abort() is called on it, the operation will be aborted at an arbitrary point and cannot
be restarted. tHRead_abort() is meant for cleanly stopping the target. In the case of a call to
thread_suspend(), if the target is executing in the kernel and the thread's state is modified
(through tHRead_set_state()) when it is suspended, the state may be altered unpredictably as a
side effect of the system call when the thread resumes.
 thread_abort_safely() is similar to thread_abort(). However, unlike tHRead_abort(), which
aborts even nonatomic operations (at arbitrary points and in a nonrestartable manner),
thread_abort_safely() returns an error in such cases. The thread must then be resumed, and
another thread_abort_safely() call must be attempted.
 thread_get_exception_ports() retrieves send rights to one or more exception ports of a given
thread. The exception types for which to retrieve the ports are specified through a flag word.
 thread_set_exception_ports() sets the given porta send rightas the exception port for the
specified exception types. Note that a thread's exception ports are each set to the null port
(IP_NULL) during thread creation.
 thread_get_special_port() returns a send right to a specific special port for the given thread.
For example, specifying ThrEAD_KERNEL_PORT returns the target thread's name portthe same as that
returned by mach_thread_self() within the thread. Thereafter, the port can be used to perform
operations on the thread.
 thread_set_special_port() sets a specific special port for the given thread by changing it to the
caller-provided send right. The old send right is released by the kernel.
 tHRead_policy_get() retrieves scheduling policy parameters for the given thread. It can also be
used to retrieve default thread-scheduling policy parameter values. thread_policy_set() is used
to set scheduling policy information for a thread. Examples of thread-scheduling policy flavors
include ThrEAD_EXTENDED_POLICY, ThrEAD_TIME_CONSTRAINT_POLICY, and
THREAD_PRECEDENCE_POLICY.
A thread can send a port right to another threadincluding to a thread in another taskusing Mach IPC. In
particular, if a thread sends its containing task's kernel port to a thread in another task, a thread in the
receiving task can control all threads in the sending task, since access to a task's kernel port implies access
to the kernel ports of its threads.
7.2.5.2. Kernel Threads
We could call a Mach thread a kernel thread since it is the in-kernel representation of a user-space thread.
As we will see in Section 7.3, all commonly available user-space thread abstractions on Mac OS X use
one Mach thread per instance of the respective user threads. Another connotation of the term kernel thread
applies to internal threads that the kernel runs for its own functioning. The following are examples of
functions that the kernel runs as dedicated threads[10] to implement kernel functionality such as
bootstrapping, scheduling, exception handling, networking, and file system I/O.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 20 of 107
[10] Such threads are created within the kernel task.
 processor_start_thread() [osfmk/kern/startup.c] is the first thread to execute on a
processor.
 kernel_bootstrap_thread() [osfmk/kern/startup.c] starts various kernel services during
system startup and eventually becomes the page-out daemon, running vm_page()
[osfmk/vm/vm_pageout.c]. The latter creates other kernel threads for performing I/O and for
garbage collection.
 idle_thread() [osfmk/kern/sched_prim.c] is the idle processor thread that runs looking for
other threads to execute.
 sched_tick_thread() [osfmk/kern/sched_prim.c] performs scheduler-related periodic
bookkeeping functions.
 thread_terminate_daemon() [osfmk/kern/thread.c] performs the final cleanup for terminating
threads.
 thread_stack_daemon() [osfmk/kern/thread.c] allocates stacks for threads that have been
enqueued for stack allocation.
 serial_keyboard_poll() [osfmk/ppc/serial_io.c] polls for input on the serial port.
The kernel's callout mechanism runs functions supplied to it as kernel threads.
 The IOWorkLoop and IOService I/O Kit classes use IOCreateThread()
[iokit/Kernel/IOLib.c], which is a wrapper around a Mach kernel-thread creation function, to
create kernel threads.
The kernel's asynchronous I/O (AIO) mechanism creates worker threads to handle I/O requests.
 audit_worker() [bsd/kern/kern_audit.c] processes the queue of audit records by writing them
to the audit log file or otherwise removing them from the queue.
 mbuf_expand_thread() [bsd/kern/uipc_mbuf.c] runs to add more free mbufs by allocating an
mbuf cluster.
 ux_handler() [bsd/uxkern/ux_exception.c] is the Unix exception handler that converts Mach
exceptions to Unix signal and code values.
 nfs_bind_resv_thread() [bsd/nfs/nfs_socket.c] runs to handle bind requests on reserved
ports from unprivileged processes.
 dlil_input_thread() [bsd/net/dlil.c] services mbuf input queues of network interfaces,
including that of the loopback interface, by ingesting network packets via dlil_input_packet()
[bsd/net/dlil.c]. It also calls proto_input_run() to perform protocol-level packet injection.
 dlil_call_delayed_detach_thread() [bsd/net/dlil.c] performs delayed (safe) detachment of
protocols, filters, and interface filters.
 bcleanbuf_thread() [bsd/vfs/vfs_bio.c] performs file system buffer laundryit cleans dirty
buffers enqueued on a to-be-cleaned queue by writing them to disk.
 bufqscan_thread() [bsd/vfs/vfs_bio.c] balances a portion of the buffer queues by issuing
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 21 of 107
cleanup of buffers and by releasing cleaned buffers to the queue of empty buffers.
Figure 711 shows the high-level kernel functions involved in kernel thread creation. Of these,
kernel_thread() and IOCreateThread() should be used from Mach and the I/O Kit, respectively.
Figure 711. Functions for creating kernel threads
[View full size image]
As we will see in Section 7.3, various user-space application environments in Mac OS X use their own
thread abstractions, all of which are eventually layered atop Mach threads.
7.2.6. Thread-Related Abstractions
Let us now look at a few related abstractions that are relevant in the context of Mach threads as
implemented in the Mac OS X kernel. In this section, we will discuss the following terms:
Remote procedure call (RPC)
Thread activation
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 22 of 107
Thread shuttle
Thread migration
Continuations
7.2.6.1. Remote Procedure Call
Since Mach is a communication-oriented kernel, the remote procedure call (RPC) abstraction is
fundamental to Mach's functioning. We define RPC to be the procedure call abstraction when the caller
and the callee are in different tasksthat is, the procedure is remote from the caller's standpoint. Although