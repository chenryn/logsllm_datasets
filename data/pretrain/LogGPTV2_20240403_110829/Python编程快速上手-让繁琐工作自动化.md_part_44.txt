Heading, level 1
Intense quote
first item in unordered list
first item in ordered list
也可以调整getText()，在返回字符串之前进行修改。例如，要让每一段缩进，
就将文件中的append()调用替换为：
fullText.append(' ' + para.text)
要在段落之间增加空行，就将join()调用代码改成：
return '\n\n'.join(fullText)
可以看到，只需要几行代码，就可以写出函数，读取.docx 文件，根据需要返
回它的内容字符串。
13.3.3 设置Paragraph 和Run 对象的样式
在Windows 平台的Word 中，你可以按下Ctrl-Alt-Shift-S，显示样式窗口并查看样
式，如图13-5所示。在OS X上，可以点击ViewStyles菜单项，查看样式窗口。
Word和其他文字处理软件利用样式，保持类似类型的文本在视觉展现上一致，
并易于修改。例如，也许你希望将内容段落设置为11点，Times New Roman，左对
齐，右边不对齐的文本。可以用这些设置创建一种样式，将它赋给所有的文本段落。
然后，如果稍后想改变文档中所有内容段落的展现形式，只要改变这种样式，所有
段落都会自动更新。
第13章 处理PDF和Word文档
图13-5 在Windows平台上按下Ctrl-Alt-Shift-S，显示样式窗口
对于Word文档，有3种类型的样式：段落样式可以应用于Paragraph对象，字
符样式可以应用于 Run 对象，链接的样式可以应用于这两种对象。可以将 Paragraph 和
Run对象的style属性设置为一个字符串，从而设置样式。这个字符串应该是一种样
式的名称。如果style被设置为None，就没有样式与Paragraph或Run对象关联。
默认Word样式的字符串如下：
在设置style属性时，不要在样式名称中使用空格。例如，样式名称可能是Subtle
Emphasis，你应该将属性设置为字符串'SubtleEmphasis'，而不是'Subtle Emphasis'。
包含空格将导致Word误读样式名称，并且应用失败。
如果对 Run 对象应用链接的样式，需要在样式名称末尾加上'Char'。例如，对
Paragraph对象设置Quote链接的样式，应该使用paragraphObj.style = 'Quote'。但对于
Run对象，应该使用runObj.style = 'QuoteChar'。
在当前版本的python-docx (0.7.4)中，只能使用默认的Word样式，以及打开的
文件中已有的样式，不能创建新的样式，但这一点在将来的模块版本中可能会改变。
Python编程快速上手——让繁琐工作自动化
13.3.4 创建带有非默认样式的 Word 文档
如果想要创建的Word文档使用默认样式以外的样式，就需要打开一个空白Word
文档，通过点击样式窗口底部的 New Style按钮，自己创建样式（图 13-6展示了
Windows平台上的情形）。
图13-6 新建样式按扭（左边）和“根据格式设置创建新样式”对话框（右边）
这将打开“Creat New Style from Formatting”对话框，在这里可以输入新样式。
然后，回到交互式环境，用docx.Document()打开这个空白Word文档，利用它作为
Word文档的基础。这种样式的名称现在就可以被python-docx使用了。
13.3.5 Run 属性
通过text属性，Run可以进一步设置样式。每个属性都可以被设置为3个值之
一：True（该属性总是启用，不论其他样式是否应用于该Run）、False（该属性总是
禁用）或None（默认使用该Run被设置的任何属性）。
表13-1列出了可以在Run对象上设置的text属性。
表13-1 Run对象的text属性
属性 描述
bold 文本以粗体出现
italic 文本以斜体出现
underline 文本带下划线
strike 文本带删除线
double_strike 文本带双删除线
all_caps 文本以大写首字母出现
第13章 处理PDF和Word文档
续表
属性 描述
small_caps 文本以大写首字母出现，小写字母小两个点
shadow 文本带阴影
outline 文本以轮廓线出现，而不是实心
rtl 文本从右至左书写
imprint 文本以刻入页面的方式出现
emboss 文本以凸出页面的方式出现
例如，为了改变demo.docx的样式，在交互式环境中输入以下代码：
>>> doc = docx.Document('demo.docx')
>>> doc.paragraphs[0].text
'Document Title'
>>> doc.paragraphs[0].style
'Title'
>>> doc.paragraphs[0].style = 'Normal'
>>> doc.paragraphs[1].text
'A plain paragraph with some bold and some italic'
>>> (doc.paragraphs[1].runs[0].text, doc.paragraphs[1].runs[1].text, doc.
paragraphs[1].runs[2].text, doc.paragraphs[1].runs[3].text)
('A plain paragraph with some ', 'bold', ' and some ', 'italic')
>>> doc.paragraphs[1].runs[0].style = 'QuoteChar'
>>> doc.paragraphs[1].runs[1].underline = True
>>> doc.paragraphs[1].runs[3].underline = True
>>> doc.save('restyled.docx')
这里，我们使用了text和style属性，以便容易地看到文档的段落中有什么。我们可
以看到，很容易将段落划分成Run，并单独访问每个Run。所以我们取得了第二段中的
第一、第二和第四个Run，设置每个Run的样式，将结果保存到一个新文档。
文件顶部的单词Document Title将具有Normal样式，而不是Title样式。针对
文本A plain paragraph的Run对象，将具有QuoteChar样式。针对单词bold和italic
的两个Run对象，它们的underline属性设置为True。图13-7展示了文件中段落和
Run的样式看起来的样子。
图13-7 restyled.docx文件
访问 https://python-docx.readthedocs.org/en/latest/user/styles.html，你可以看到，
python-docx使用样式的更完整文档。
13.3.6 写入Word 文档
在交互式环境中输入以下代码：
Python编程快速上手——让繁琐工作自动化
>>> import docx
>>> doc = docx.Document()
>>> doc.add_paragraph('Hello world!')
>>> doc.save('helloworld.docx')
要创建自己的.docx文件，就调用docx.Document()，返回一个新的、空白的Word
Document对象。Document对象的add_paragraph()方法将一段新文本添加到文档中，
并返回添加的Paragraph对象的引用。在添加完文本之后，向Document对象的 save()
方法传入一个文件名字符串，将Document对象保存到文件。
这将在当前工作目录中创建一个文件，名为 helloworld.docx。如果打开它，就
像图13-8的样子。
图13-8 利用add_paragraph('Hello world!')创建的Word文档
可以用新的段落文本，再次调用 add_paragraph()方法，添加段落。或者，要在
已有段落的末尾添加文本，可以调用 Paragraph 对象的 add_run()方法，向它传入一
个字符串。在交互式环境中输入以下代码：
>>> import docx
>>> doc = docx.Document()
>>> doc.add_paragraph('Hello world!')
>>> paraObj1 = doc.add_paragraph('This is a second paragraph.')
>>> paraObj2 = doc.add_paragraph('This is a yet another paragraph.')
>>> paraObj1.add_run(' This text is being added to the second paragraph.')
>>> doc.save('multipleParagraphs.docx')
得到的文本如图13-9所示。请注意，文本This text is being added to the second
paragraph.被添加到paraObj1中的Paragraph对象中，它是添加到doc中的第二段。
add_paragraph()和 add_run()分别返回 Paragraph 和 Run 对象，这样你就不必多花一
第13章 处理PDF和Word文档
步来提取它们。
图13-9 添加了多个Paragraph和Run对象的文档
要记住，对于 python-docx 的 0.5.3 版本，新的Paragraph 对象只能添加在文档
的末尾，新的Run对象只能添加在Paragraph对象的末尾。
可以再次调用save()方法，保存所做的变更。
add_paragraph()和 add_run()都接受可选的第二个参数，它是表示 Paragraph 或
Run对象样式的字符串。例如：
>>> doc.add_paragraph('Hello world!', 'Title')
这一行添加了一段，文本是Hello world!，样式是Title。
13.3.7 添加标题
调用add_heading()将添加一个段落，并使用一种标题样式。在交互式环境中输
入以下代码：
>>> doc = docx.Document()
>>> doc.add_heading('Header 0', 0)
>>> doc.add_heading('Header 1', 1)
>>> doc.add_heading('Header 2', 2)
>>> doc.add_heading('Header 3', 3)
>>> doc.add_heading('Header 4', 4)
>>> doc.save('headings.docx')
add_heading()的参数，是一个标题文本的字符串，以及一个从0到4的整数。整
数0表示标题是Title样式，这用于文档的顶部。整数1到4是不同的标题层次，1
Python编程快速上手——让繁琐工作自动化
是主要的标题，4是最低层的子标题。add_heading()返回一个Paragraph对象，让你
不必多花一步从Document对象中提取它。
得到的headings.docx文件如图13-10所示。
图13-10 带有标题0到4的headings.docx文档
13.3.8 添加换行符和换页符
要添加换行符（而不是开始一个新的段落），可以在Run对象上调用add_break()方
法，换行符将出现在它后面。如果希望添加换页符，可以将docx.text.WD_BREAK.PAGE
作为唯一的参数，传递给add_break()，就像下面代码中间所做的一样：
>>> doc = docx.Document()
>>> doc.add_paragraph('This is on the first page!')
 >>> doc.paragraphs[0].runs[0].add_break(docx.text.WD_BREAK.PAGE)
>>> doc.add_paragraph('This is on the second page!')
>>> doc.save('twoPage.docx')
这创建了一个两页的Word文档，第一页上是This is on the first page!，第二页
上是This is on the second page!。虽然在文本This is on the first page!之后，第一页还
有大量的空间，但是我们在第一段的第一个Run之后插入分页符，强制下一段落出
现在新的页面中。
13.3.9 添加图像
Document对象有一个add_picture()方法，让你在文档末尾添加图像。假定当前
工作目录中有一个文件zophie.png，你可以输入以下代码，在文档末尾添加zophie.png，
宽度为1英寸，高度为4厘米（Word可以同时使用英制和公制单位）：
>>> doc.add_picture('zophie.png', width=docx.shared.Inches(1),
height=docx.shared.Cm(4))
第一个参数是一个字符串，表示图像的文件名。可选的 width和height关键字
参数，将设置该图像在文档中的宽度和高度。如果省略，宽度和高度将采用默认值，
第13章 处理PDF和Word文档
即该图像的正常尺寸。
你可能愿意用熟悉的单位来指定图像的高度和宽度，诸如英寸或厘米。所以在指
定 width 和 height 关键字参数时，可以使用 docx.shared.Inches()和docx.shared.Cm()函数。
13.4 小结
文本信息不仅仅是纯文本文件，实际上，很有可能更经常遇到的是PDF和Word文
档。可以利用PyPDF2模块来读写PDF文档。遗憾的是，从PDF文档读取文本并非总
是能得到完美转换的字符串，因为PDF文档的格式很复杂，某些PDF可能根本读不出
来。在这种情况下，你就不太走运了，除非将来PyPDF2更新，支持更多的PDF功能。
Word文档更可靠，可以用python-docx模块来读取。可以通过Paragraph和Run
对象来操作 Word 文档中的文本。可以设置这些对象的样式，尽管必须使用默认的
样式，或文档中已有的样式。可以添加新的段落、标题、换行换页符和图像，尽管
只能在文档的末尾。
在处理PDF和Word文档时有很多限制，这是因为这些格式的本意是很好地展示给人
看，而不是让软件易于解析。下一章将探讨存储信息的另外两种常见格式：JSON和CSV
文件。这些格式是设计给计算机使用的。你会看到，Python处理这些格式要容易得多。
13.5 习题
1．不能将PDF文件名的字符串传递给PyPDF2.PdfFileReader()函数。应该向该
函数传递什么？
2．PdfFileReader()和PdfFileWriter()需要的File对象，应该以何种模式打开？
3．如何从PdfFileReader对象中取得第5页的Page对象？
4．什么PdfFileReader变量保存了PDF文档的页数？
5．如果 PdfFileReader 对象表示的 PDF 文档是用口令 swordfish 加密的，应该
先做什么，才能从中取得Page对象？
6．使用什么方法来旋转页面？
7．什么方法返回文件demo.docx的Document对象？
8．Paragraph对象和Run对象之间的区别是什么？
9．doc变量保存了一个Document对象，如何从中得到Paragraph对象的列表？
10．哪种类型的对象具有bold、underline、italic、strike和outline变量？
11．bold变量设置为True、False或None，有什么区别？
12．如何为一个新Word文档创建Document对象？
13．doc 变量保存了一个Document 对象，如何添加一个文本是'Hello there!'的
段落？