文章来源：
* * *
### 0x01 前言
这篇文章我将向你展示如何结合HTML注入和Phar反序列化来攻破一个流行的电子商务管理系统，此漏洞存在于Magento **
管理员登入到后端仪盘表后，注入的代码将自动运行并劫持管理员会话，然后利用后台的RCE漏洞接管整个服务器。攻击者可以破坏公司的财务运营，例如，重定向所有的支付到其银行账户或窃取客户的银行卡信息。
漏洞的利用需要结合 Authorize.Net
，一个专为Visa及其他信用卡网上定制的支付模块，并且它可以内置在Magento中。需要注意，Authorize.Net并不对漏洞负责，而是Magento。判别目标Magento站点是否使用Authorize.Net非常简单，并且可以使用自动化工具扫描。考虑到Authorize.Net的流行性，漏洞会影响到大量站点。
我们将漏洞链影响评级为 **高** ，因为攻击者无需很高明的技巧或者社交工程。Magento商店一年的成交额超过 **1550亿美元**
，攻击者可能会非常积极地开发利用该漏洞链。
### 0x03 影响
启用了Authorize.Net模块以及部分易受攻击的Magento版本：
分支 | 修补版本 | 可利用版本  
---|---|---  
2.3 | 2.3.2 | `标签的``，目的是做到极致安全
:)。
`escapeHtmlWithLinks()`把``标签和用户输入解析到一个数组(`$matches`)中，代码位置：vendor/magento/module-sales/Helper/Admin.php
    public function escapeHtmlWithLinks($data, $allowedTags = null)
    {
        ⋮
        $data = str_replace('%', '%%', $data);
        $regexp = "#(?J).*?)\\1\s*)|(?:\S+\s*=\s*(['\"])(.*?)\\3)\s*)*)|>)"
        .">?(?:(?:(?.*?)(?:?|(?=.*)))#si";
        while (preg_match($regexp, $data, $matches)) {
        ⋮
下一步代码会创建一个简易标签来清理链接文本和`href`属性中包含的URL 。
清理后的链接作为数组储存在`$links`数组，稍后还会用到。`escapeHtmlWithLinks()`会抛掉清理后的``标签，使用`%$is`代替用户输入的字符串，其中`$i`是数字代表``标签的编号。
    ⋮
        while (preg_match($regexp, $data, $matches)) {
        $text = '';
        if (!empty($matches['text'])) {
            $text = str_replace('%%', '%', $matches['text']);
        }
        $url = $this->filterUrl($matches['link'] ?? '');
        //Recreate a minimalistic secure a tag
        $links[] = sprintf(
            '%s',
            htmlspecialchars($url, ENT_QUOTES, 'UTF-8', false),
            $this->escaper->escapeHtml($text)
        );
        $data = str_replace($matches[0], '%' . $i . '$s', $data);
        ++$i;
        }
大致的方法就是这样，为了有更直观的体验，我举个例子：
`Hello, World!`将会变为`Hello, %1s`
`escapeHtmlWithLinks()`方法替换用户输入中的``为`%s`后，将结果传递给`escapeHTML()`。这安全地清理掉用户输入的有害字符。然而，代码会将清理结果return给`vspritf()`方法。
    ⋮
    } // End of while
    $data = $this->escaper->escapeHtml($data, $allowedTags);
    return vsprintf($data, $links);
vsprintf — 返回格式化字符串
    vsprintf ( string $format , array $args ) : string
这是XSS漏洞的根源，让我们来看看XSS Payload的处理过程。
步骤 | 用户输入字符串  
---|---  
从用户输入字符串解析``标签 | `a
link "> a malicious link `  
将``标签替换为`%1s` | ` a malicious link `  
清理其他额外的标签 | ` a malicious link `  
把清理后的``插入到已清理的其他字符串中 | `">a link "> a malicious link `  
从上表可以看出，``标签被替换为`%1s`然后清理用户输入的其他字符。因为`%1s`属于安全字符，它被标记为安全的。最后`escapeHtmlWithLinks()`方法末段的`vsprintf()`将清理后的Link重新插入回去，并且引入
**双引号** 从而触发注入的代码。
攻击者可以利用这点来注入任意代码到结果字符中。通过注入恶意`onmouseover`等事件句柄和`style`属性可以使链接不可见，只要受害者访问页面并移动鼠标，Payload就会触发。
`escapeHtmlWithLinks()`方法用于清理用户取消订单中输入的备注，订单经由`Authorize.Net`处理。上过上面的绕过措施，攻击者可以注入任意JavaScript代码到订单取消备注中，当卖家查看取消订单时，XSS
Payload就触发了。
#### 0x04.2 Phar反序列化
只要拿下管理员权限后，攻击者就可以滥用所见即所得（WYSIWYG）富文本编辑器中负责图片处理的控制器来执行[Phar
反序列化](https://blog.ripstech.com/2018/new-php-exploitation-technique/)。下面这段代码展示了POST参数`__directive`的内容如何传递给image Adapter
类的`open()`方法。该方法在内部将用户输入传递给函数`getimagesize()`，而这个函数易受Phar反序列化的影响。
    public function execute()
        {
            $directive = $this->getRequest()->getParam('___directive');
            $directive = $this->urlDecoder->decode($directive);
            ⋮
            $image = $this->_objectManager->get(\Magento\Framework\Image\AdapterFactory::class)->create();
            try {
                $image->open($imagePath);
            ⋮
将`phar://`流包装器注入到图片处理程序中，触发[PHP反序列化](https://blog.ripstech.com/2018/php-object-injection/)，最终导致远程代码执行。
### 0x05 时间线
日期 |  
---|---  
2018/9/25 | 上报Magento 2.2.6中存在一个存储的XSS漏洞。  
2018/11/28 | Magento推出补丁程序2.2.6和2.1.16  
2018/12/13 | 报告了Magento 2.3.0中的绕过方法。  
2019/1/11 | 向Magento安全团队报告了Phar反序列化漏洞。  
2019/1/26 | 我们发现存储型XSS在具有特定配置的Magento上可被用户利用，并通知Magento。  
2019/1/29 | Magento验证了存在漏洞。  
2019/3/26 | Magento推出补丁程序2.3.1, 2.2.8和2.1.17。日志显示Phar反序列化漏洞已修复，未提到XSS漏洞。  
2019/4/09 | Magento把XSS漏洞状态标记为“已解决”  
2019/4/09 | 我们询问Magento是否已修复漏洞，因为更新日志没有提到它，并且没有修改`escapeHTMLWithLinks()`方法。  
2019/4/10 | Magento重新标记漏洞状态。  
2019/6/25 | Magento推出补丁程序 2.3.2, 2.2.9和2.1.18。  
### 0x06 总结
本文介绍了储存型XSS和Phar反序列化漏洞，利用它们攻击者可以大规模攻击Magento站点。从漏洞分析可以看出，现今主要的安全漏洞的根源都是代码层面上多重清理，逻辑错误和配置缺陷造成的。建议所有用户立即到最新的Magento版本。