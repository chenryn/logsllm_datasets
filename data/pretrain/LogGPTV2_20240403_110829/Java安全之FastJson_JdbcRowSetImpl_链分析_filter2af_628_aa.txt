# Java安全之FastJson JdbcRowSetImpl 链分析
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 前言
续上文的[Fastjson
TemplatesImpl链分析](https://www.cnblogs.com/nice0e3/p/14601670.html)，接着来学习`JdbcRowSetImpl`
利用链，`JdbcRowSetImpl`的利用链在实际运用中较为广泛，这个链基本没啥限制条件，只需要`Json.parse(input)`即可进行命令执行。
## 0x01 漏洞分析
###  利用限制
首先来说说限制，基于JNDI+RMI或JDNI+LADP进行攻击，会有一定的JDK版本限制。
RMI利用的JDK版本≤ JDK 6u132、7u122、8u113
LADP利用JDK版本≤ 6u211 、7u201、8u191
###  攻击流程
  1. 首先是这个lookup(URI)参数可控
  2. 攻击者控制URI参数为指定为恶意的一个RMI服务
  3. 攻击者RMI服务器向目标返回一个Reference对象，Reference对象中指定某个精心构造的Factory类；
  4. 目标在进行`lookup()`操作时，会动态加载并实例化Factory类，接着调用`factory.getObjectInstance()`获取外部远程对象实例；
  5. 攻击者可以在Factory类文件的静态代码块处写入恶意代码，达到RCE的效果；
###  JDNI注入细节
简单分析一下lookup参数可控后，如何走到RCE.
调用链：
  * -> RegistryContext.decodeObject()
  * -> NamingManager.getObjectInstance()
  * -> factory.getObjectInstance()
  * -> NamingManager.getObjectFactoryFromReference()
  * -> helper.loadClass(factoryName);
loadclass进行实例化，触发静态代码块的Runtime代码执行命令执行。
###  调试分析
影响版本：fastjson  JdbcRowSetImpl.execute()
  * -> JdbcRowSetImpl.prepare()
  * -> JdbcRowSetImpl.connect()
  * -> InitialContext.lookup(dataSource)
而在Fastjson JdbcRowSetImpl 链利用中，则是利用了后半段。
## 0x02 绕过方式
###  1.2.25版本修复
先将Fastjson组件升级到1.2.25版本后进行发送payload，查看是否能够利用成功。
修复改动：
  1. 自从1.2.25 起 autotype 默认为False
  2. 增加 checkAutoType 方法，在该方法中进行黑名单校验，同时增加白名单机制
[Fastjson
AutoType说明](https://github.com/alibaba/fastjson/wiki/enable_autotype)
根据官方文档开启AutoType的方式，假设不开启该功能是无法进行反序列化的。因为默认白名单是空的，需要自定义。白名单的绕过基本不可能，都是从黑名单作为入口。白名单需要添加，而黑名单中则是内置在Fastjson中。
####  1、JVM启动参数
    -Dfastjson.parser.autoTypeSupport=true