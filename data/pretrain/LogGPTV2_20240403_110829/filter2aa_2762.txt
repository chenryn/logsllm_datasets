How we recovered 
$XXX,000 of Bitcoin from an 
encrypted zip file 
Michael Stay, PhD 
CTO, Pyrofex Corp. 
DEF CON 2020 
Technion - Computer Science Department - Technical Report  CS0842 - 1994
ZIP Attacks with Reduced Known Plaintext
Michael Stay
AccessData Corporation
2500 N. University Ave. Ste. 200
Provo, UT 84606
PI:EMAIL
Abstract. Biham and Kocher demonstrated that the PKZIP stream ci-
pher was weak and presented an attack requiring thirteen bytes of plain-
text. The deﬂate algorithm “zippers” now use to compress the plaintext
before encryption makes it diﬃcult to get known plaintext. We consi-
der the problem of reducing the amount of known plaintext by ﬁnding
other ways to ﬁlter key guesses. In most cases we can reduce the amo-
unt of known plaintext from the archived ﬁle to two or three bytes,
depending on the zipper used and the number of ﬁles in the archive.
For the most popular zippers on the Internet, there is a fast attack
that does not require any information about the ﬁles in the archive;
instead, it gets doubly-encrypted plaintext by exploiting a weakness in
the pseudorandom-number generator.
1
Introduction
PKZIP is a compression / archival program created by Phil Katz. Katz had the
foresight to document his ﬁle format completely in the ﬁle APPNOTE.TXT,
distributed with every copy of PKZIP; there are now literally hundreds of “zip-
per” programs available, and the ZIP ﬁle format has become a de facto standard
on the Internet.
In [BK94] Biham and Kocher demonstrated that the PKZIP stream cipher
was weak and presented an attack requiring thirteen bytes of plaintext. Eight
bytes of the plaintext must be contiguous, and all of the bytes must be the
text that was encrypted, which is usually compressed data. [K92] shows that
the compression method used at the time, implode, produces many predictable
bytes suitable for mounting the attack.
Most zippers available today implement only one of the compression methods
deﬁned in APPNOTE.TXT, called deﬂate. Deﬂate uses Huﬀman coding followed
by a variant of Lempel-Ziv. Once the dictionary reaches a certain size, the process
starts over. Since the Huﬀman codes for any of the data depend on a great deal of
surrounding data, one is forced to guess the plaintext unless one has the original
data. The diﬃculty of getting known plaintext was one reason Phil Zimmerman
decided to use deﬂate in PGP [PGP98]. Practically speaking, if one has enough
of the original ﬁle to get the thirteen bytes of plaintext required for the attack
in [BK94], one has enough to break the encryption almost instantly.
M. Matsui (Ed.): FSE 2001, LNCS 2355, pp. 125–134, 2002.
c
⃝ Springer-Verlag Berlin Heidelberg 2002
tlcg4.sage
2020-07-31
- 1/1 -
M = 2^32
c = 0x08088405
L = matrix([
    [  M,  0,  0,  0],
    [c^1, -1,  0,  0],
    [c^2,  0, -1,  0],
    [c^3,  0,  0, -1]
])
B = L.LLL()
size = 4
k10 = randint(0, M)
ks = [ c^(n + 1) * k10 % M for n in range(size) ]
print "ks: "
print map(hex, ks)
msbs = [(k & 0xff000000) for k in ks]
secret = [ks[i] - msbs[i] for i in range(size)]
w1 = B * vector(msbs)
w2 = vector([ round(RR(w) / M) * M - w for w in w1 ])
guess = list(B.solve_right(w2))
print "guess: "
# print [hex(Integer(guess[i])) for i in range(size)]
print guess
print "diff from msb + guess: "
# print [hex(Integer(ks[i] - msbs[i] - guess[i])) for i in
range(size)]
print vector(ks) - vector(msbs) - vector(guess)
mitm_stage1.cpp
2020-07-31
- 4/9 -
    }
}
void write_stage1_candidate_file(FILE *f,
                                 const vector &candidates,
                                 const size_t start_idx, const size_t num) {
    fprintf(stderr,
            "write_stage1_candidate_file: writing %ld candidates "
            "out of %ld to file starting at index %ld.\n",
            num, candidates.size(), start_idx);
    write_word(f, num);
    auto end_idx = start_idx + num;
    for (size_t i = start_idx; i > table(0x01000000)
void mitm_stage1a(archive_info &info, vector> &table,
                  correct_guess *c) {
    // STAGE 1
    //
    // Guess s0, chunk2, chunk3 and carry bits.
    uint8_t xf0 = info.file[0].x[0];
    uint8_t xf1 = info.file[1].x[0];
    uint32_t extra(0);
    for (uint16_t s0 = 0; s0 sx[0][0] &&
                        chunk2 == c->chunk2 && chunk3 == c->chunk3 &&
                        carries == (c->carries >> 12)) {
                        fprintf(stderr, "On correct guess.\n");
                    }
                    uint8_t carryxf0 = carries & 1;
                    uint8_t carryyf0 = (carries >> 1) & 1;
                    uint8_t carryxf1 = (carries >> 2) & 1;
                    uint8_t carryyf1 = (carries >> 3) & 1;
                    uint32_t upper = 0x01000000;  // exclusive
                    uint32_t lower = 0x00000000;  // inclusive
mitm_stage1.cpp
2020-07-31
- 5/9 -
                    uint32_t k0crc = chunk2;
                    uint32_t extra = 0;
                    uint8_t msbxf0 =
                        first_half_step(xf0, false, chunk3, carryxf0, k0crc,
                                        extra, upper, lower);
                    uint8_t yf0 = xf0 ^ s0;
                    k0crc = chunk2;
                    extra = 0;
                    uint8_t msbyf0 =
                        first_half_step(yf0, false, chunk3, carryyf0, k0crc,
                                        extra, upper, lower);
                    if (upper sx[0][0] &&
                            chunk2 == c->chunk2 && chunk3 == c->chunk3 &&
                            carries == (c->carries >> 12)) {
                            fprintf(stderr,
                                    "Failed to get correct guess: s0 = %02x, "
                                    "chunk2 = %02x, "
                                    "chunk3 = "
                                    "%02x, carries = %x\n",
                                    s0, chunk2, chunk3, carries);
                        }
                        continue;
                    }
                    k0crc = chunk2;
                    extra = 0;
                    uint8_t msbxf1 =
                        first_half_step(xf1, false, chunk3, carryxf1, k0crc,
                                        extra, upper, lower);
                    if (upper sx[0][0] &&
                            chunk2 == c->chunk2 && chunk3 == c->chunk3 &&
                            carries == (c->carries >> 12)) {
                            fprintf(stderr,
                                    "Failed to get correct guess: s0 = %02x, "
                                    "chunk2 = %02x, "
                                    "chunk3 = "
                                    "%02x, carries = %x\n",
                                    s0, chunk2, chunk3, carries);
                        }
                        continue;
                    }
                    uint8_t yf1 = xf1 ^ s0;
                    k0crc = chunk2;
                    extra = 0;
                    uint8_t msbyf1 =
                        first_half_step(yf1, false, chunk3, carryyf1, k0crc,
mitm_stage1.cpp
2020-07-31
- 6/9 -
                                        extra, upper, lower);
                    if (upper sx[0][0] &&
                            chunk2 == c->chunk2 && chunk3 == c->chunk3 &&
                            carries == (c->carries >> 12)) {
                            fprintf(stderr,
                                    "Failed to get correct guess: s0 = %02x, "
                                    "chunk2 = %02x, "
                                    "chunk3 = "
                                    "%02x, carries = %x\n",
                                    s0, chunk2, chunk3, carries);
                        }
                        continue;
                    }
                    uint32_t mk = toMapKey(msbxf0, msbyf0, msbxf1, msbyf1);
                    if (nullptr != c && s0 == c->sx[0][0] &&
                        chunk2 == c->chunk2 && chunk3 == c->chunk3 &&
                        carries == (c->carries >> 12)) {
                        fprintf(stderr,
                                "MSBs: %02x, %02x, %02x, %02x, Mapkey: %08x, "
                                "carries: %x, "
                                "c.carries: %04x\n",
                                msbxf0, msbyf0, msbxf1, msbyf1, mk, carries,
                                c->carries);
                    }
                    stage1a candidate = {uint8_t(s0), uint8_t(chunk2),
                                         uint8_t(chunk3), carries, msbxf0};
                    table[mk].push_back(candidate);
                }
            }
        }
    }
}
// info: the info about the archive to attack
// table: the output of mitm_stage1a
// candidates: an empty vector
void mitm_stage1b(const archive_info &info,
                  const vector> &table,
                  vector &candidates, const correct_guess *c,
                  size_t *correct_candidate_index) {
    // Second half of MITM for stage 1
    bool found_correct = false;
    for (uint16_t s1xf0 = 0; s1xf0 sx[0][1]) {
                fprintf(stderr, "s1xf0: %02x, prefix: %04x    ", s1xf0, pxf0);
mitm_stage1.cpp
2020-07-31
- 7/9 -
                if ((prefix & 3) == 3) {
                    fprintf(stderr, "\n");
                }
            }
            vector firsts(0);
            uint8_t s1yf0 = s1xf0 ^ info.file[0].x[1] ^ info.file[0].h[1];
            second_half_step(pxf0, s1yf0, firsts);
            if (!firsts.size()) {
                continue;
            }
            for (uint16_t s1xf1 = 0; s1xf1  seconds(0);
                second_half_step(pxf0, s1xf1, seconds);
                if (!seconds.size()) {
                    continue;
                }
                vector thirds(0);
                uint8_t s1yf1 = s1xf1 ^ info.file[1].x[1] ^ info.file[1].h[1];
                second_half_step(pxf0, s1yf1, thirds);
                if (!thirds.size()) {
                    continue;
                }
                for (auto f : firsts) {
                    for (auto s : seconds) {
                        for (auto t : thirds) {
                            uint32_t mapkey(f | (s > 8) ^
                                            crc32tab[maybek20 & 0xff];
                                        // If upper six bits of L == upper six
                                        // of L' then we have a candidate
                                        if ((match & 0xfc) == (crck20 & 0xfc)) {
                                            // KL ^ GH = BC.  (B = BC >> 8) &
                                            // 0xff.
                                            uint8_t b =
                                                ((crck20 ^
                                                  crc32tab[maybek20 & 0xff]) >>
                                                 8) &
                                                0xff;
                                            if (g.k20_count >= g.MAX_K20S) {
                                                fprintf(stderr,
                                                        "Not enough space for "
                                                        "k20 candidate in "
                                                        "stage1_candidate.\n");
                                                abort();
                                            }
                                            // BCD = (B sx[0][1] &&
                                    s1xf1 == c->sx[1][1] &&
                                    candidate.s0 == c->sx[0][0] &&
                                    candidate.chunk2 == c->chunk2 &&
                                    candidate.chunk3 == c->chunk3 &&
                                    candidate.cb == (c->carries >> 12)) {
                                    found_correct = true;
                                    fprintf(stderr,
                                            "Correct candidates index = %lx\n",
                                            candidates.size() - 1);
                                    if (nullptr != correct_candidate_index) {
                                        *correct_candidate_index =
                                            candidates.size() - 1;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (c != nullptr && !found_correct) {
        fprintf(stderr,
                "Failed to use correct guess: s1xf0 = %02x, s1xf1 = %02x\n",
                c->sx[0][1], c->sx[1][1]);
    }
    fprintf(stderr, "Stage 1 candidates.size() == %04lx\n", candidates.size());
}
};  // namespace mitm_stage1
7/31/2020
pyrofex / breakzip · GitLab
https://gitlab.com/pyrofex/breakzip
1/3
f2e30c52