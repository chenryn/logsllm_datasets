title:Alert Correlation in a Cooperative Intrusion Detection Framework
author:Fr&apos;ed&apos;eric Cuppens and
Alexandre Miège
Alert Correlation in a Cooperative Intrusion Detection Framework
Frédéric Cuppens  Alexandre Miège
ONERA Centre de Toulouse
2, av. Edouard Belin
31005, Toulouse CEDEX, France
Abstract
This paper presents the work we have done within the
MIRADOR project to design CRIM, a cooperative module
for  intrusion  detection  systems  (IDS).  This  module
implements  functions  to  manage,  cluster,  merge  and
correlate  alerts.  The  clustering  and  merging  functions
recognize  alerts  that  correspond  to  the  same  occurrence
of  an  attack  and  create  a  new  alert  that  merge  data
contained in these various  alerts.  Experiments  show  that
these functions significantly reduce the number of alerts.
However,  we  also  observe  that  alerts  we  obtain  are  still
too  elementary 
security
administrator. The purpose of  the  correlation  function  is
thus  to  generate  global  and  synthetic  alerts.  This  paper
focuses  on  the  approach  we  suggest  to  design  this
function.
to  be  managed  by  a 
Keywords: Cooperative Intrusion Detection, IDMEF,
Alert Merging, Alert Correlation.
1. Introduction
There  are  actually  two  main  intrusion  detection
approaches: the behavioral approach (also called anomaly
detection)  and  the  signature  analysis  (also  called  misuse
detection).  Anomaly  detection  is  based  on  statistical
description  of 
the  normal  behavior  of  users  or
applications. The objective is then to detect any abnormal
action  performed  by  these  users  or  applications.  The
second  approach,  called  misuse  detection,  is  based  on
collecting  attack  signatures  in  order  to  store  them  in  an
attack  base.  The  IDS  then  parses  audit  files  to  find
patterns that  match the description of an attack  stored  in
the attack base.
None  of  these  approaches  is  fully  satisfactory.  They
generally generate many false positives (corresponding to
a  false  alert),  false  negatives  (corresponding  to  a  non-
detected attack) and the alerts are too elementary and not
enough  accurate  to  be  directly  managed  by  a  security
administrator.
For  instance,  anomaly  detection  can  generate  many
false  positives.  This  is  because  deviation  from  normal
behavior does not always correspond to the occurrence of
an attack. Moreover, a malicious internal user can slowly
modify his behavior so that the final behavior includes an
attack.  The  IDS  will  learn  this  new  behavior  and  will
associate it with a normal behavior. Therefore, the attack
will  not  be  detected.  This  corresponds  to  the  occurrence
of a false negative.
The  problem  of  exhaustively  defining  the  attack  base
is  a  major  difficulty  of  misuse  detection.  Therefore,
misuse  detection  can  also  generate  many  false  negatives
especially  when  a  given  attack  has  many  close  but
different implementations. Moreover, in current products,
the  quality  of  signatures  expressed  in  the  attack  base  is
generally not sufficient to avoid false positives.
In  this  context,  a  promising  approach  is  to  develop  a
cooperation module between several IDS to analyze alerts
and  generate  more  global  and  synthetic  alerts.  The
objective is to reduce the number of generated alerts and
increase  the  detection  rate  of  attacks.  We  also  want  to
provide the security administrator with alerts that can be
used to take the right decision.
CRIM 
is  such  a  cooperative  module  we  have
developed  within  MIRADOR.  MIRADOR  is  a  project
initiated by the French Defense Agency (DGA) and is led
by  Alcatel  in  collaboration  with  3  research  laboratories:
ONERA, ENST-Bretagne and Supelec. MIRADOR aims
to build a cooperative and adaptive IDS platform. CRIM
is  part  of  this  project  and  implements  the  following
functions:  alert  clustering,  alert  merging  and  alert
correlation.  A  cluster  of  alerts  is  a  set  of  alerts  that
correspond  to  the  same  occurrence  of  an  attack.  The
purpose  of  the  merging  function  is  then  to  create  a  new
alert that is representative of the information contained in
the various alerts belonging to this cluster.
This  approach  enables  us  to  reduce  the  number  of
alerts transmitted to the security administrator. We check
our  merging  function  over  an  attack  base  of  87
“elementary”  attacks.  An  elementary  attack  corresponds
to a non-decomposable step of a given scenario. For this
experiment,  we  used  two  different  network-based  IDS:
Snort [12] and e-Trust [1]. The results we obtained were
as  follows.  The  87  attacks  generated  325  alerts:  264  for
Snort and 61 for e-Trust. Only 69 attacks were detected:
41 by both Snort and e-Trust, 27 by Snort but  not  by  e-
Trust, 1 by e-Trust but not by Snort and 18 attacks were
not  detected.  When  checking  our  clustering  function  on
the  above  attack  base,  we  actually  obtained  101  clusters
Proceedings of the 2002 IEEE Symposium on Security and Privacy (S&P(cid:146)02) 
1081-6011/02 $17.00 ' 2002 IEEE 
(see  [3]  for  further  details  on  the  generation  of  these
clusters).
But,  the  alerts  we  obtained  still  correspond  to  too
elementary  alerts.  The  consequence  will  be  that  the
security  administrator  will  have  difficulty  to  take  the
correct decision when receiving these alerts.
Therefore,  a  complementary  analysis  must  be
performed. This is the purpose of the correlation function.
The  principle  of  the  correlation  function  is  to  consider
that  the  intruder  wants  to  achieve  a  malicious  objective
but he cannot generally get his way by only performing a
single attack. Instead, he usually performs several attacks
that  correspond  to  steps  of  a  more  global  intrusion  plan
that  enables  him  to  achieve  his  malicious  objective.
Notice that we include, in the intrusion plan, preliminary
steps  the  intruder  generally  performs  to  collect  various
information on configuration of the system to be attacked.
Classical  IDS  only  detect  elementary  attacks  that
correspond  to  the  steps  of  this  intrusion  plan.  The
objective  of  the  correlation  function  is  thus  to  correlate
alerts  in  order  to  recognize  the  intrusion  plan  that  is
currently executed by the intruder.
In  this  paper,  we  present  the  approach  we  suggest
implementing  the  correlation  function.  The  remainder  of
this paper is organized as follows. Section 1 summarizes
the  main  principles  of  our  approach.  We  first  introduce
the  architecture  of  CRIM,  the  cooperative  module  we
developed for intrusion detection. We shortly presents the
objectives  of  the  clustering,  merging  and  correlation
functions.  We  then  suggest  our  approach  to  modeling
alerts  and  attacks.  Both  models  are  based  on  first  order
logic and are used in our correlation approach. Actually,
our  representation  of  attacks  is  based  on  the  LAMBDA
language [4]. Section 3 sketches our correlation approach,
comparing  it  with  other  approaches  suggested  in  the
literature. Section 4 formalizes this approach and section
5  further  refines  it  by  introducing  the  concept  of
abductive  correlation.  Finally,  section  6  concludes  this
paper.
2. General principles
2.1. CRIM Architecture
Figure  1  presents  the  main  principles  we  suggest  to
developing a cooperation  module  for intrusion detection.
There are five main functions in this module.
The alert base management function receives the alerts
generated  by  different  IDS  and  stores  them  for  further
analysis by the cooperation module. We shall assume that
all these alerts are compliant with the Intrusion Detection
Message Exchange Format (IDMEF) [2]. The purpose of
the  IDMEF  is  to  define  common  data  formats  and
exchange procedures for sharing information of interest to
intrusion  detection  and  response  systems  and  those  that
may need to interact with them.
The approach  we suggest to  implement  the  alert  base
management function is to convert the IDMEF messages
into  a  set  of  tuples  and  to  store  them  into  a  relational
database (see section 2.2 below).
The clustering function can then have an access to this
database and generates clusters of alerts. When an attack
occurs, the IDS connected to CRIM may generate several
alerts  for  this  attack.  The  clustering  function  attempts  to
recognize the alerts  that  actually  correspond  to  the  same
occurrence  of  an  attack.  These  alerts  are  brought  into  a
cluster.  As  presented  in  [3],  a  relation  of  similarity
connects alerts belonging to the same cluster. Each cluster
is  then  sent  to  the  alert  merging  function.  This  function
was also presented in [3]. For  each  cluster,  this  function
creates  a  new  alert 
the
information  contained  in  the  various  alerts  belonging  to
this cluster.
is  representative  of 
that 
The purpose of this paper is to present next step in our
Alerts
Alert 
Clustering
Alert Clusters
Alert
Merging
Global alerts
Alert base
management
function
Candidate Plans
Alert
Correlation
Intention
Recognition
Global diagn
Reaction
IDS
IDS
IDS
Figure 1: CRIM architecture
Proceedings of the 2002 IEEE Symposium on Security and Privacy (S&P(cid:146)02) 
1081-6011/02 $17.00 ' 2002 IEEE 
cooperation module, that is the correlation function. This
function  further  analyzes  the  cluster  alerts  provided  as
outputs  by  the  merging  function.  As  mentioned  in  the
introduction,  we  observe  that  the  merging  function
generally provides too elementary alerts. The objective of
the correlation function is thus to correlate alerts in order
to provide the security administrator with more synthetic
information.
The  result  of  the  correlation  function  is  a  set  of
candidate  plans  that  correspond  to  the  intrusion  under
execution by the intruder. However, the final objective of
the intruder is perhaps not achieved yet. Next step in our
cooperation  module  is  thus  to  develop  the  intention
recognition  function.  The  purpose  of  this  function  is  to
extrapolate these candidate plans in order to anticipate the
intruder  actions.  This  function  should  provide  a  global
diagnosis of the past (what the intruder has performed up
to now),  the  present  (what  the  intruder  has  obtained  and
what is the current security state of the system targeted by
the intruder) and the future (how the intruder will go on).
The  result  of  this  function  is  to  be  used  by  the  reaction
function  to  help  the  system  administrator  to  choose  the
best  counter  measure  to  be  launched  to  prevent  the
malicious actions performed by the intruder.
As  mentioned  in  the  introduction,  we  shall  only
present  in  this  paper  our  approach  to  correlating  alerts.
The  intention  recognition  function  is  not  presented.  It  is
under development and the approach  we suggest  for this
function  is  briefly  sketched  in  the  conclusion  of  this
paper.
2.2. Alert modeling
In  our  approach,  every  alert  is  modeled  using  the
IDMEF format. A Document Type Definition (DTD) has
been  proposed  to  describe  IDMEF  data  format  through
XML  documents.  This  is  the  representation  we  shall
consider in the remainder of this paper.
However,  the  correlation  function  does  not  directly
deal with this XML representation of alerts. It is actually
automatically converted into a set of logical facts. This set
of facts is then stored in a database.
For  instance,  let  us  consider  the  following  portion  of
an alert in the IDMEF format:
IDMEF-Message  PUBLIC 
IDMEF 
v0.3//EN" 
"-//IETF//DTD
"/usr/sbin/idmef-
                 unknown
                 zp109
               snort
….
It is translated into the following logical representation
(where “,” represents conjunction):
alert(1),
ident(1,”249”),
analyzer(1,2),
analyzerid(2, “snort-0000-zp109"),
analyzer_node(2,3),
node_category(3,”dns”),
node_location(3,”unknown”),
node_name(3,”zp109”),
analyzer_process(2,4),
process_name(4,”snort”),
….
In this  representation,  ident,  analyzer,  analyzerid,  etc.
are  binary  predicates  we  use  to  represent  the  alert.
Predicates  are  also  introduced  to  describe  other  portions
of  an  alert  description  such  as  detect  time,  create  time,
source,  target,  classification,  etc.  Actually,  we  have
defined  34  predicates  to  completely  represent  all  the
possible  fields  of  an  alert  as  suggested  in  the  IDMEF
format. Numbers 1, 2, 3, 4, … that appears in the above
description  correspond  to  object  identifiers  that  are
internally created to represent all the sub-parts of an alert
description.
2.3. Attack specification in LAMBDA
Since  our  approach  to  alert  correlation  is  based  on
attacks  specified  in  the  LAMBDA  language,  we  shortly
recall the main principles of this language (see also [4] for
a more detailed presentation).
In  this  language,  an  attack  is  specified  using  five
fields:
•  Attack  Pre-condition:  A 
that
specifies the conditions to be satisfied for the attack to
succeed.
logical  condition 
•  Attack  Post-condition:  A 