result:wordwordword word
wordwordword
如果这两处粗体内容出乎你的意料，原因在于，使用多个正则表达式的preg_match
（使用pattern数组）并不会“并行”处理这些pattern，而是依次进行。
在这个例子中，第1组patterm/replacement会在subject中添加两个num，这两个
“num”会被数组中的下一个pattern匹配。然后每个'num’变成‘word”，最
终得到这个意料之外的结果。
这个例子告诉我们，如果preg_replace使用了多个patterm，一定要注意安排它们的
顺序。
下面这个例子用preg_replace_ca11back和辅助函数重写了第460页的程序。callback参
数是一个字符串，包含辅助函数的名字：
''&1t;′,
'>'=>'&gt;',
·=>'&quot;'）;
/ *
*匹配成功之后，SmatcheS[O]中保存的是需要转换为HTML的字符串，以此为接受参数，返回
*HTML字符事。因为此函数只在确保安全的情况下调用，此处不考虑意外情况
*/
function text2html_callback($matches)
global $replacement;
return $replacement[Smatches[o]];
$new_subject =preg_replace_callback('/[&]/S',
/*pattern
*/
"text2html_callback",/*callback
*/
Ssubject);
如果ssubject的值是：
AT&T”sounds like"ATNT
则snew_subject的值就是：
&quot;AT&amp;T&quot;sounds 1ike &quot;ATNT&quot;
本例中的text2html_callback是普通的PHP函数，用作preg_replace_callback中的
回调函数，它的接收参数是Smatches数组（当然，这个变量可以随意命名，不过我选择遵
循之前使用smatches的惯例）。
---
## Page 491
Preg函数罗列
465
为完整起见，下面我给出使用匿名函数的办法（使用PHP内建的create_function函数）。
这段程序产生的sreplacement变量与上面一样。函数体也相同，只是此时函数没有名字，
只能在preg_replace_callback中使用：
$new_subject = preg_replace_callback(/[&]/S′,
create_function(' $matches',
'global $replacement;
return $replacement [Smatches [0]];*),
$subject);
使用callback，还是模式修饰符e
如果处理不复杂，使用模式修饰符的程序比preg_replace_callback更容易看懂。但是，
如果效率很重要，那么请记住，如果使用模式修饰符é，每次匹配成功之后都需要检查作为
PHP代码的replacement参数。相比之下，preg_replace_callback的效率就要高许多（如
果使用回调，PHP代码只需要审查1次）。
preg_split
使用方法
preg_split(pattern, subject [, limit, [ flags ]])
参数简介
pattern分隔符包围起来的正则表达式，可能还有修饰符(444)。
subject需要分割的目标字符串。
limit非强制出现，是一个整数，表示切分之后元素的上限。
flags非强制出现，此标志位影响整个切割行为，以下三项可以随意组合：
PREG_SPLIT_NO_EMPTY
PREG_SPLIT_DELIM_CAPTURE
PREG_SPLIT_OFFSET_CAPTURE
它们的讲解从第468页开始。多个标志位使用二元运算符“或”来连接（与第456
页一样）。
返回值
返回一个字符串数组。
讲解
preg_split会把字符串的副本切分为多个片段，以数组的形式返回。非强制出现参数limit
---
## Page 492
466
第10章：PHP
设定返回数组中元素数目的上限（如果需要，最后的元素包括“其他所有字符”）。可以设
定不同的标志位来调整返回的方式和内容。
从某种意义上来说，preg_split做的是与preg_match_al1相反的事情：它找出目标字符
串中不能由正则表达式匹配的部分。或者更传统地说，preg_split返回的是，将目标字符
串中正则表达式匹配的部分删去之后的部分。preg_split大概相当于PHP中内建的简单
exp1ode函数，不过使用的是正则表达式，而且功能更强大。
来看个简单的例子，如果某家金融网站需要接收用空格分隔的股票行情。可以使用explode
拆分这些行情数据：
Stickers =explode(’'，$input);
不过，如果输人数据时不小心输人了不只一个空格，这个程序就不能处理了。更好的办法
是使用preg_split，用正则表达式‘\s+来切分：
$tickers = preg_split(/\s+/'，$input);
分隔，比如‘YHOO，MSFT，GOOG'。这些情况也很容易处理：
Stickers = preg_split(/[\s,]+/`，$input);
针对上面的数据，$tickers得到的是包含3个元素的数组：‘YHOO'、‘MSFT’和‘GOOG'。
\s*，\s*来处理：
Stags=preg_split('/\s*,\s*/'，Sinput）;
比较s*，\s*和"（\s，+很能说明问题。前者用逗号来切分（逗号必须出现），但也会删
去逗号两边的空白字符。如果输人‘123，，，456'，则能够进行3次匹配（每次匹配一个逗
号），返回4个元素：‘123'，两个空字符串，最后是“456。
另一方面，（\s，]+会使用任何逗号、连续的逗号、空白字符，或者是空白字符和逗号的结
合来切分。在“123，，，456’中，它一次就能匹配3个逗号，返回两个元素，“123’和‘456”。
limit参数
limit参数用来设定切分之后数组长度的上限。如果搜索尚未进行到字符串结尾时，切分的
片段的数目已经达到limmit，则之后的内容会全部保存到最后的元素当中。
---
## Page 493
Preg函数罗列
467
来看个例子，我们需要手工解析服务器返回的HTTPresponse。按照标准，header和body
的分隔是四字符序列‘\r\n\r\n”，不幸的是，有的服务器使用的却是‘\n\n。幸好，我
们有preg_split，很容易处理这两种情况。假设整个response保存在sresponse中：
Sparts=preg_split(/\r?\n\r?\n/x'，$response,2）;
header保存在Sparts[O]中，而body保存在Sparts[1]中（使用模式修饰符S是为了提高
效率478）。
第3个参数，即limit的值等于2，表示subject字符事最多只能切分成两个部分。如果找到
了一个匹配，匹配之前的部分（也就是header）会成为返回值的第一个元素。因为“字符
作为返回值中的第二个元素。
如果没有limit（或者limir等于-1，这两种情况是等价的），preg_split会尽可能多地切分
subject字符事，这样body可能也会被切分为许多段。设置上限并不能保证返回的数组中包
含的元素就等于这个数，而只是保证最多包含这么多元素（阅读关于PREG_SPLIT_DELIM_
CAPTURE的小节，你会发现甚至这种说法也不完全对）。
在两种情况下，应该人为设置上限。我们已经见过一种情况：希望最后的元素包含“其他
所有内容”。在前一个例子中，一旦第一段（header）被切分出来，我们就不希望再对其他
部分（body）进行切分。所以，把上限设为2会保留body。
如果用户知道自己不需要切出来所有元素，也可以设定上限，提高效率。例如，如果sdata
字符串包含以\s*，\s*分隔的许多字段（比如姓名、地址、年龄，等等），而只需要前面
两个，就可以把limir设置为3，这样preg_split在切分出前两个字段之后就不会继续工
作：
Sfields =preg_split（'/\s*，\s*/x'，$data,3）;
这样其他内容都保存在最后的第3个元素中，我们可以用array_pop来制除，或者置之不
理。
如果你希望在没有设置上限的情况下使用任何preg_split标志位（下一节讨论），则必须
提供一个占位符，将limir设置为-1，它表示“没有限制”。相反，如果limir等于1，则表
示“不需要切分”，所以它并不常用。上限等于0或者-1之外的任何负数都没有定义，所以
请不要使用它们。
---
## Page 494
468
第10章：PHP
flag参数
preg_split中可以使用的3个标志位都会影响函数的功能。它们可以单独使用，也可以用
二元运算符“or”连接（参见第456页的例子）。
OFFSET_CAPTURE-一样，这个标志位会修改结果数组，把每个元素变为包含两个元素的数组
（元素本身和它在字符串中的偏移值）。
PRBG_SPLIT_NO_EMPTY这个标志位告诉preg_Split忽略空字符串，不把它们放在返回数
组中，也不记入limir的统计。对自标字符串的起始位置、结尾位置，或是空行的匹配，都
会带来空字符串。
下面来改进前面的“Web2.0”的tag的例子（466)，如果sinput为‘party..fun'，那
么：
Stags =preg_split（/\s*，\s*/x'，$input）;
匹配之间的“空白”。
如果设置了PREG_SPLIT_NO_EMPTY标志位：
$tags =preg_split(/\s*，\s*/x'，$input，-1，PREG_SPLIT_NO_EMPTY);
结果数组只包含‘party’和‘fun'。
PRBG_SPLIT_DBLIM_CAPTURE这个标志位在结果中包含匹配的文本，以及进行此次切分的
正则表达式的捕获括号匹配的文本。来看个简单的例子，如果字符串中各个字段是以‘and
和‘or’来联系的，例如：
DLSR camera and Nikon D200 or Canon EOS 30D
如果不使用PREG_SPLIT_DELIM_CAPTURE，
Sparts=preg_split('/\s+（andlor)\s+/x'，$input);
得到的sparts是：
array('DLSRcamera'，'Nikon D200','Canon EOS 30D')
分隔符中的匹配内容被去掉了。不过，如果使用了PRE_SPLIT_DELIM_CAPTURE标志位
（并且用-1作为limit参数的占位符）：
$parts=preg_split(/\s+（and|or)\s+/x',$input,-1,
PREG_SPLIT_DELIM_CAPTURE) ;
Sparts包含了捕获型括号匹配的分隔符：
array('DLSRcamera'，'and'，'Nikon D200'，'or'，'Canon EOS30D')
---
## Page 495
Preg函数罗列
469
此时，每次切分会在结果数组中增加一个元素，因为正则表达式中只有一组捕获型括号。
然后我们就能够遍历sparts中的元素，对找到的and”和or”进行特殊处理。
请注意，如果使用了非捕获型括号（如果pattern参数为/\s+（?：andlor）\s+/”），
PREG_SPLIT_DELIM_CAPTURE标志位不会产生任何效果，因为它只对捕获型括号有效。
来看另一个例子，第466页分析股市行情的例子：
$tickers = preg_split('/[\s,]+/',$input);
如果我们添加捕获型括号，以及PREG_SPLIT_DELIM_CAPTURE
$tickerS = preg_Split(′/([\s,1+)/', $input, -1, PREG_SPLIT_DELIM_CAPTURE) ;
结果Sinput中的任何字符都没有被抛弃，它只是切分之后保存在stickers中。处理
Stickers数组时，你知道编号为奇数的元素是（[\s，]+）匹配的。这可能很有用，如果在
向用户显示错误信息时，可以对不同的部分分别进行处理，然后将它们合并起来，还原出
输入的字符串。
还有一点需要注意，通过PREG_SPLIT_DELIM_CAPTURE添加的元素不会影响切分上限。只
有在这种情况下，结果数组中的元素数目才可能超过上限（如果正则表达式中的捕获型括
号很多，则元素就要更多）。
结尾的未参与匹配的捕获型括号不会影响结果数组。也就是说，如果一组捕获型括号没有
参与最终匹配（参见450页），可能会也可能不会在结果数组中添加空字符串。如果编号更
靠后的捕获型括号参与了最终匹配，就会增加，否则就不会。请注意，如果使用了
PREG_SPLIT_NO_EMTPY标志位，结果会有变化，因为空字符串肯定会被抛弃。
preg_grep
使用方法
preg_grep( pattern, input[, flags])
参数简介
patterm分隔符包围起来的正则表达式，可能出现修饰符。
input一个数组，如果它们的值能够匹配pattermn：则其值会复制到返回的数组中。
flags非强制出现，此标志位PREG_GREP_INVERT或者是0。
---
## Page 496
470
第10章：PHP
返回值
一个数组，包含input中能够由pattern匹配的元素（如果使用了PREG_GREP_INVERT标志
位，则包括不能匹配的元素）。
讲解
preg_grep用来生成input数组的副本，其中只保留了value能够匹配（如果使用了
PREG_GREP_INVERT标志位，则不能匹配）pattern的元素。此value对应的key会保留。
来看个简单的例子
preg_grep(·/\s/',$input);
它返回sinput数组中的，由空白字符构成的元素。相反的例子是：
preg_grep('/\s/`,$input,PREG_GREP_INVERT);
它返回不包含空白字符的元素。请注意，第二个例子不同于：
preg_grep(/^\S+$/,$input);
因为后者不包括空（长度为0）值元素。
preg_quote
使用方法
preg_quote( input [,delimiter ])
参数简介
input希望以文字方式用作patterm参数的字符串（444）。
delimiter非强制出现的参数，包含1个字符的字符串，表示希望用在patterm参数中的分隔
符。
返回值
preg_quote返回一个字符串，它是input的副本，其中的正则表达式元字符进行了转义。
如果指定了分隔符，则分隔符本身也会被转义。
讲解
如果要在正则表达式中以文字方式使用某个字符串，可以用内建的preg_quote函数来转义
其中可能产生的正则表达式元字符。如果指定了创建pattern时使用的分隔符，字符串中的
分隔符也会被转义。
---
## Page 497
“缺失”的preg函数
471
preg_quote是专门应对特殊情况的函数，在许多情况下没有用，不过这里有个例子：
/*输入SMailSubjeCt，判断SMailMesSage对应主题*/
Spattern=*/^Subject:\s+(Re:\s*)*.preg_quote(SMai1Subject,*/*).*/mi′;
如果sMailSubject包含下面的字符串
*Super Deal**(Act Now!)
最后Spattern就会是
/^Subject:\s+(Re:\s*)*\*\*Super Deal\*\*\(Act Now\!\)/mi