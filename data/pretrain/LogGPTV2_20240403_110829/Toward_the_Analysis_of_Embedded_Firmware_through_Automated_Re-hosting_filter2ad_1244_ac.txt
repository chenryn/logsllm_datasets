While these models are relatively straightforward, our
Increasing Model requires multiple iterations of linear
regression modeling to ﬁnd the best ﬁt line. This is because
these incrementing values are typically conﬁgured during the
boot process, which means that their initially read values are
unlikely to be indicative of the actual rate of increase. For
example, a counter may start on boot at a certain rate, then
the ﬁrmware will conﬁgure a new rate and reset the timer,
resulting in two distinct functions represented by the same
memory value. To handle this, we iteratively remove outliers
(i.e., values that have a correct p-value greater than 0.0001)
from our regression model until we have a good-ﬁtting
function for the steady-state increase. When we are replaying
this model, we ﬁrst replay the initial outlier values verbatim,
and only switch our projection function once initial values
are exhausted and the long-term behavior is expected.
State Approximation. The remainder of locations within a
peripheral represent those locations that do not follow any
easily identiﬁable pattern. These locations can represent
external sources of input or external physical phenomena,
USENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 141reﬂect large amounts of state invisible to the CPU (e.g.,
the internals of on-chip peripherals), and be related to
the behavior of interrupts. Therefore, methods relying
on function-ﬁtting or direct recovery of a state machine
involving these memory locations simply will not sufﬁce.
As a ﬁrst step toward addressing these challenges, we in-
stead make an approximation of the device’s state, using only
the observed trace’s data and ordering, by inferring state tran-
sitions we know must exist. We observe that writes to MMIO
addresses are typically used to cause a change in state (e.g.,
the transmission of data to external hardware or a change in
the internal conﬁguration of a peripheral), and approximate
that the activity between two writes found in an MMIO record-
ing may roughly represent the same state of the overall periph-
eral. Interrupts also represent a change in state, although we
cannot know concretely what change in state they represent.
Reading data can also change the state of a peripheral, but in a
more subtle way (e.g., reading a byte from a serial port causes
it to be removed from an internal hardware buffer, and a sub-
sequent read to the same address will return a different value).
With these intuitions in mind, our State Approximation
model consists of the trace of MMIO and interrupt activity
for a given peripheral, and a state pointer consisting of where
in the trace we believe best approximates the state of both the
program and the peripheral. At the beginning of execution, the
state points to the beginning of the trace. We update this state
based on the following rules: When an MMIO address for this
peripheral is read, we look ahead in the trace to ﬁnd the next
time this location was read. If it is found, we return this value,
and update the state pointer to this location. If we encounter
a write, an interrupt, or the end of the trace before we ﬁnd
one, we instead return the most recent value for that location,
and do not update the state pointer. This encodes the behavior
that values read from MMIO may be sequential (as in the
serial port buffer mentioned earlier) and that they respect the
boundaries of state caused by writes and interrupts.
When a write to the peripheral’s MMIO occurs, or the
associated interrupt event is triggered, we look forward in
the trace for the next location where the same event occurred,
and update the state pointer. If we do not ﬁnd it before the
end of the trace, we instead seek backward through the trace.
If the value written is entirely new, we do not update the state
pointer. These rules allow our model to respond intelligently
to changes in its mode, or new commands, regardless of the
order they occur during execution, particularly when new
input causes deviation from the trace.3
Test Harness Creation. Finally, in order for this system to
be fully interactive, as we discuss in Section 2, the analyst
must decide how input is to be introduced into the emulated
environment. No standards exist for input and output in
embedded ﬁrmware and hardware; exactly where an input is
introduced is both a function of the target device’s hardware,
3For a walk-through of the state approximation model in action and the
challenges faced by it, see Appendix B.
and the analyst’s goals. For example, a serial port, in one
device, could be connected to a human-controlled terminal
(the obvious source of input), while in another, it could be
wired across the circuit board to a simple sensor with a serial
interface (a model-able device). PRETENDER, therefore,
requires the analyst to provide their own means of input, in
the form of a test harness. We leverage avatar2’s Python
scripting interface to allow any MMIO location to be easily
replaced by custom logic. As an example, for the ﬁrmware
presented in Section 4, we created a harness consisting of
feeding input data via the device’s serial port.
4 Evaluation
To demonstrate the efﬁcacy of PRETENDER, we use it to
create models of the hardware in the context of multiple
ﬁrmware images. We then use these models, together
with freshly generated inputs, to uncover code paths and
orderings not seen during recording and modeling. The newly
covered parts of the ﬁrmware include synthetic security
vulnerabilities, which the system is able to trigger and detect
within the modeled environment.
Targets. We applied our system to ﬁrmware running on three
different embedded CPUs on development hardware, the ST
Nucleo L152RE, the Maxim MAX32600MBED [18] and the
STM Nucleo F072RB [24]. The targets represent ARM-based
microcontrollers common to embedded applications; the ﬁrst
two represent Cortex-M3-based designs, while the latter is
based on a Cortex-M0. The layout of the peripherals, and the
function of each MMIO register varies widely, even between
the two targets from the same vendor. It is worth noting
that QEMU has no ofﬁcial support for any of these chips, or
any of their contained peripherals. Third-party forks contain
partial support for related chips but would have to be heavily
adapted and extended to work on these ﬁrmware samples.
Access to all devices was obtained using a commodity
CMSIS-DAP debugger. We showcase the function of our
models in-depth in the context of the STM Nucleo L152RE,
but provide results from all three.
We evaluated our technique on six example ﬁrmware: four
of these were directly obtained from the ARM mbed [25]
development suite’s library of examples. These were designed
to exercise interesting features of the hardware, and we chose
them to demonstrate the challenges PRETENDER has to
overcome for successful hardware modeling. We extended
three of these examples with additional functionality, which
we do not trigger during the recording and modeling phases.
Besides additional hardware interactions, our additions also
include synthetic security vulnerabilities, similar to the kind
that an analyst may wish to locate in a binary ﬁrmware. The
other two examples, not taken from the mbed examples, are
more complex and mimic real-world ﬁrmware found on a
door lock controller and a thermostat. All of our examples
142          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX AssociationTable 2: Approximate basic block coverage for ﬁrmware samples
with PRETENDER, as measured by QEMU
Table 3: Snippets from a capture of all memory-mapped input/output
(MMIO) accesses from an STM32 ﬁrmware.
Blocks Executed
Null
Model
SA
Fuzzing
(a) Increasing read-only (Timer 5
@ 0x40000C24)
Op. #
524
595
658
662
663
665
Operation
READ
. . .
. . .
READ
. . .
READ
READ
READ
READ
Value
3690781
3731433
3534604
5549086
6053877
7060952
(b) Read/write storage (Flash
controller conﬁguration @
0x40023C00)
Op. #
14
15
16
17
77
78
79
Operation
. . .
READ
WRITE
READ
WRITE
. . .
READ
WRITE
READ
Value
0
4
4
6
6
7
7
Firmware Name
Peripherals
Nucleo L152RE
blink_led
read_hyperterminal
i2c_master
button_interrupt
thermostat (custom)
rf_door_lock (custom)
Nucleo F072RB
blink_led
read_hyperterminal
i2c_master
button_interrupt
thermostat (custom)
rf_door_lock (custom)
MAX32600MBED
blink_led
read_hyperterminal
i2c_master
button_interrupt
thermostat (custom)
rf_door_lock (custom)
Timer, GPIO
Timer, GPIO, UART
Timer, I2C, AM3215
Timer, GPIO, Button
Timer, I2C, AM3215
Timer, GPIO, Radio,
Timer, GPIO
Timer, GPIO, UART
Timer, I2C, AM3215
Timer, GPIO, Button
Timer, I2C, AM3215
Timer, GPIO, Radio,
Timer, GPIO
Timer, GPIO, UART
Timer, I2C, AM3215
Timer, GPIO, Button
Timer, I2C, AM3215
Timer, GPIO, Radio,
Rec.
218
545
1185
344
1263
665
405
828
1572
362
1662
960
280
514
941
188
1009
692
86
85
61
68
62
87
117
102
103
103
103
102
9
8
8
8
8
8
218
545
1185
314
1261
665
405
828
1572
362
1662
960
280
514
942
188
1009
692
n/a
636
n/a
n/a
1276
758
n/a
999
n/a
n/a
1918
972
n/a
668
n/a
n/a
1066
712
were compiled using GCC 5.0, and ARM’s mbed hardware ab-
straction layer. While we had the source code available during
our analysis, it should be noted that no part of PRETENDER
leverages this information; PRETENDER operates solely on
binary ﬁrmware and the hardware itself. While this may seem
like a small number of samples in comparison to previous
approaches [3, 8], the need to obtain and instrument original
hardware necessarily limits the number of ﬁrmware samples.
We evaluated our system’s effectiveness in terms of its
achieved code coverage on each example, as measured
through execution traces from QEMU. We note that good
code coverage during our recording phase is an important fac-
tor in our modeling, as we want to explore as much of the hard-
ware’s functionality as possible. Table 2 summarizes the used
peripherals and execution behavior of each ﬁrmware. We note
that the reported block counts are approximate, particularly
for those examples with interrupts, as QEMU re-deﬁnes basic
blocks based on where an interrupt occurs and returns, leading
to imprecision. The table shows vastly different amounts of
covered basic blocks for the same ﬁrmware across different
devices, although the exact same compiler, source code, and
system library was used for all of the examples. This hints to-
ward the many subtle differences in the hardware abstraction
layer, which are required to deal with the diverse hardware
platforms. The block count in the “Rec.“ column serves for
baseline comparison and shows the coverage reached during
the initial recording phase. The “Null Model“ column repre-
sents the coverage obtained when all MMIO is replaced with
a model that simply returns a zero value for every location
(this is in contrast to not having a model at all, where all of
the ﬁrmware would cause QEMU to crash). The “SA” column
shows the coverage with complete modeling, including the