The driver allocates this memory in NonPagedPool, a memory pool that 
guarantees the data will stay in physical memory rather than being paged 
out to disk as long as the object is allocated. This is important because 
the thread into which the DLL is being injected may be running at a high 
interrupt request level, such as DISPATCH_LEVEL, in which case it shouldn’t 
access memory in the PagedPool, as this causes a fatal error that usually 
results in an IRQL_NOT_LESS_OR_EQUAL bug check (also known as the Blue 
Screen of Death).
Evading EDR (Early Access) © 2023 by Matt Hand
Image-Load and Registry Notifications   89
Next, the driver initializes the previously allocated KAPC structure using 
the undocumented nt!KeInitializeApc() API, shown in Listing 5-11.
VOID KeInitializeApc(
 PKAPC Apc,
 PETHREAD Thread,
 KAPC_ENVIRONMENT Environment,
 PKKERNEL_ROUTINE KernelRoutine,
 PKRUNDOWN_ROUTINE RundownRoutine,
 PKNORMAL_ROUTINE NormalRoutine,
 KPROCESSOR_MODE ApcMode,
 PVOID NormalContext
);
Listing 5-11: The nt!KeInitializeApc() definition
In our driver, the call to nt!KeInitializeApc() would look something like 
what is shown in Listing 5-12.
KeInitializeApc(
pKapc,
KeGetCurrentThread(),
OriginalApcEnvironment,
(PKKERNEL_ROUTINE)OurKernelRoutine,
NULL,
(PKNORMAL_ROUTINE)pfnLdrLoadDll,
UserMode,
NULL
);
Listing 5-12: The call to nt!KeInitializeApc() with the details for DLL injection
This function first takes the pointer to the KAPC structure created 
previously, along with a pointer to the thread into which the APC should 
be queued, which can be the current thread in our case. Following these 
parameters is a member of the KAPC_ENVIRONMENT enumeration, which should 
be OriginalApcEnvironment (0), to indicate that the APC will run in the 
thread’s process context.
The next three parameters, the routines, are where a bulk of the 
work happens. The KernelRoutine, named OurKernelRoutine() in our 
example code, is the function to be executed in kernel mode at APC_LEVEL 
before the APC is delivered to user mode. Most often, it simply frees the 
KAPC object and returns. The RundownRoutine function is executed if the 
target thread is terminated before the APC was delivered. This should 
free the KAPC object, but we’ve kept it empty in our example for the sake 
of simplicity. The NormalRoutine function should execute in user mode at 
PASSIVE_LEVEL when the APC is delivered. In our case, this should be the 
function pointer to ntdll!LdrLoadDll(). The last two parameters, ApcMode 
and NormalContext, are set to UserMode (1) and the parameter passed as 
NormalRoutine, respectively.
Evading EDR (Early Access) © 2023 by Matt Hand
90   Chapter 5
Queueing the APC
Lastly, the driver needs to queue this APC. The driver calls the undocu-
mented function nt!KeInsertQueueApc(), defined in Listing 5-13.
BOOL KeInsertQueueApc(
 PRKAPC Apc,
 PVOID SystemArgument1,
 PVOID SystemArgument2,
 KPRIORITY Increment
);
Listing 5-13: The nt!KeInsertQueueApc() definition
This function is quite a bit simpler than the previous one. The first 
input parameter is the APC, which will be the pointer to the KAPC we cre-
ated. Next are the arguments to be passed. These should be the path to the 
DLL to be loaded and the length of the string containing the path. Because 
these are the two members of our custom INJECTION_CTX structure, we simply 
reference the members here. Finally, since we’re not incrementing any-
thing, we can set Increment to 0.
At this point, the DLL is queued for injection into the new process 
whenever the current thread enters an alertable state, such as if it calls ker
nel32!WaitForSingleObject() or Sleep(). After the APC completes, the EDR 
will start to receive events from the DLL containing its hooks, allowing it to 
monitor the execution of key APIs inside the injected function.
Preventing KAPC Injection
Beginning in Windows build 10586, processes may prevent DLLs not signed 
by Microsoft from being loaded into them via process and thread mitiga-
tion policies. Microsoft originally implemented this functionality so that 
browsers could prevent third-party DLLs from injecting into them, which 
could impact their stability.
The mitigation strategies work as follows. When a process is created via 
the user-mode process-creation API, a pointer to a STARTUPINFOEX structure 
is expected to be passed as a parameter. Inside this structure is a pointer to 
an attribute list, PROC_THREAD_ATTRIBUTE_LIST. This attribute list, once initial-
ized, supports the attribute PROC_THREAD_ATTRIBUTE_MITIGATION_POLICY. When 
this attribute is set, the lpValue member of the attribute may be a pointer to 
a DWORD containing the PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT 
_BINARIES_ALWAYS_ON flag. If this flag is set, only DLLs signed by Microsoft will 
be permitted to load in the process. If a program tries to load a DLL not 
signed by Microsoft, a STATUS_INVALID_IMAGE_HASH error will be returned. By 
leveraging this attribute, processes can prevent EDRs from injecting their 
function-hooking DLL, allowing them to operate without fear of function 
interception.
A caveat to this technique is that the flag is only passed to processes 
being created and does not apply to the current process. Because of this, 
Evading EDR (Early Access) © 2023 by Matt Hand
Image-Load and Registry Notifications   91
it is best suited for command-and-control agents that rely on the fork&run 
architecture for post-exploitation tasks, as each time the agent queues a 
task, the sacrificial process will be created and have the mitigation policy 
applied. If a malware author would like this attribute to apply to their origi-
nal process, they could leverage the kernel32!SetProcessMitigationPolicy() 
API and its associated ProcessSignaturePolicy policy. By the time the process 
would be able to make this API call, however, the EDR’s function-hooking 
DLL would be loaded in the process and its hooks placed, rendering this 
technique nonviable.
Another challenge with using this technique is that EDR vendors 
have begun to get their DLLs attestation-signed by Microsoft, as shown 
in Figure 5-3, allowing them to be injected into processes even if the flag 
was set.
Figure 5-3: CrowdStrike Falcon’s DLL  
countersigned by Microsoft
In his post “Protecting Your Malware with blockdlls and ACG,” Adam 
Chester describes using the PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT 
_DYNAMIC_CODE_ALWAYS_ON flag, commonly referred to as Arbitrary Code Guard 
(ACG), to prevent the modification of executable regions of memory, a 
requirement of placing function hooks. While this flag prevented function 
hooks from being placed, it also prevented many off-the-shelf command-
and-control agents’ shellcode from executing during testing, as most rely on 
manually setting pages of memory to read-write-execute (RWX).
How Registry Notifications Work
Like most software, malicious tools commonly interact with the registry, 
such as by querying values and creating new keys. In order to capture these 
interactions, drivers can register notification callback routines that get 
alerted any time a process interacts with the registry, allowing the driver to 
prevent, tamper with, or simply log the event.
Some offensive techniques rely heavily on the registry. We can often 
detect these through registry events, assuming we know what we’re looking 
for. Table 5-1 shows a handful of different techniques, what registry keys 
they interact with, and their associated REG_NOTIFY_CLASS class (a value we’ll 
discuss later in this section).
Evading EDR (Early Access) © 2023 by Matt Hand
92   Chapter 5
Table 5-1: Attacker Tradecraft in the Registry and the Related REG_NOTIFY_CLASS 
Members
Technique
Registry location
REG_NOTIFY_CLASS 
members
Run-key persistence
HKLM\Software\Microsoft\
Windows\CurrentVersion\Run
RegNtCreateKey(Ex)
Security Support Provider 
(SSP) persistence
HKLM\SYSTEM\
CurrentControlSet\Control\Lsa\
Security Packages
RegNtSetValueKey
Component Object Model 
(COM) hijack
HKLM\SOFTWARE\Classes\
CLSID\\
RegNtSetValueKey
Service hijack
HKLM\SYSTEM\CurrentControlSet\
Services\
RegNtSetValueKey
Link-Local Multicast Name 
Resolution (LLMNR) poisoning
HKLM\Software\Policies\
Microsoft\Windows NT\
DNSClient
RegNtQueryValueKey
Security Account Manager 
dumping
HKLM\SAM
RegNt(Pre/Post)
SaveKey
To explore how adversaries interact with the registry, consider the 
technique of service hijacking. On Windows, services are a way of creating 
long-running processes that can be started manually or on boot, similar to 
daemons on Linux. While the service control manager manages these ser-
vices, their configurations are stored exclusively in the registry, under the 
HKEY_LOCAL_MACHINE (HKLM) hive. For the most part, services run as 
the privileged NT AUTHORITY/SYSTEM account, which gives them pretty 
much full control over the system and makes them a juicy target for attackers.
One of the ways that adversaries abuse services is by modifying the reg-
istry values that describe the configuration of a service. Inside a service’s 
configuration, there exists a value, ImagePath, that contains the path to the 
service’s executable. If an attacker can change this value to the path for a 
piece of malware they’ve placed on the system, their executable will be run 
in this privileged context when the service is restarted (most often on sys-
tem reboot).
Because this attack procedure relies on registry value modification, an 
EDR driver that is monitoring RegNtSetValueKey-type events could detect the 
adversary’s activity and respond accordingly.
Registering a Registry Notification
To register a registry callback routine, drivers must use the nt!CmRegister 
CallbackEx() function defined in Listing 5-14. The Cm prefix references the 
configuration manager, which is the component of the kernel that oversees 
the registry.
NTSTATUS CmRegisterCallbackEx(
 PEX_CALLBACK_FUNCTION Function,
 PCUNICODE_STRING Altitude,
Evading EDR (Early Access) © 2023 by Matt Hand
Image-Load and Registry Notifications   93
 PVOID 
Driver,
 PVOID 
Context,
 PLARGE_INTEGER 
Cookie,
 PVOID 
Reserved
);
Listing 5-14: The nt!CmRegisterCallbackEx() prototype
Of the callbacks covered in this book, the registry callback type has 
the most complex registration function, and its required parameters are 
slightly different from those for the other functions. First, the Function 
parameter is the pointer to the driver’s callback. It must be defined as an 
EX_CALLBACK_FUNCTION, according to Microsoft’s Code Analysis for Drivers 
and the Static Driver Verifier, and it returns an NTSTATUS. Next, as in object-
notification callbacks, the Altitude parameter defines the callback’s posi-
tion in the callback stack. The Driver is a pointer to the driver object, and 
Context is an optional value that can be passed to the callback function but 
is very rarely used. Lastly, the Cookie parameter is a LARGE_INTEGER passed to 
nt!CmUnRegisterCallback() when unloading the driver.
When a registry event occurs, the system invokes the callback function. 
Registry callback functions use the prototype in Listing 5-15.
NTSTATUS ExCallbackFunction(
 PVOID CallbackContext,
 PVOID Argument1,
 PVOID Argument2
)
Listing 5-15: The nt!ExCallbackFunction() prototype
The parameters passed to the function may be difficult to make sense 
of at first due to their vague names. The CallbackContext parameter is the 
value defined in the registration function’s Context parameter, and Argument1 
is a value from the REG_NOTIFY_CLASS enumeration that specifies the type of 
action that occurred, such as a value being read or a new key being created. 
While Microsoft lists 62 members of this enumeration, those with the mem-
ber prefixes RegNt, RegNtPre, and RegNtPost represent the same activity gen-
erating notifications at different times, so by deduplicating the list, we can 
identify 24 unique operations. These are shown in Table 5-2.
Table 5-2: Stripped REG_NOTIFY_CLASS Members and Descriptions
Registry operation
Description
DeleteKey
A registry key is being deleted.
SetValueKey
A value is being set for a key.
DeleteValueKey
A value is being deleted from a key.
SetInformationKey
Metadata is being set for a key.
RenameKey
A key is being renamed.
(continued)
Evading EDR (Early Access) © 2023 by Matt Hand
94   Chapter 5
Registry operation
Description
EnumerateKey
Subkeys of a key are being enumerated.
EnumerateValueKey
Values of a key are being enumerated.
QueryKey
A key’s metadata is being read.
QueryValueKey
A value in a key is being read.
QueryMultipleValueKey
Multiple values of a key are being queried.
CreateKey
A new key is being created.
OpenKey
A handle to a key is being opened.
KeyHandleClose
A handle to a key is being closed.
CreateKeyEx
A key is being created.
OpenKeyEx
A thread is trying to open a handle to an existing key.
FlushKey
A key is being written to disk.
LoadKey
A registry hive is being loaded from a file.
UnLoadKey
A registry hive is being unloaded.
QueryKeySecurity
A key’s security information is being queried.
SetKeySecurity
A key’s security information is being set.
RestoreKey
A key’s information is being restored.
SaveKey
A key’s information is being saved.
ReplaceKey
A key’s information is being replaced.
QueryKeyName
The full registry path of a key is being queried.
The Argument2 parameter is a pointer to a structure that contains infor-
mation relevant to the operation specified in Argument1. Each operation has 
its own associated structure. For example, RegNtPreCreateKeyEx operations use 
the REG_CREATE_KEY_INFORMATION structure. This information provides the rele-
vant context for the registry operation that occurred on the system, allowing 
the EDR to extract the data it needs to make a decision on how to proceed.
Every pre-operation member of the REG_NOTIFY_CLASS enumeration 
(those that begin with RegNtPre or simply RegNt) uses structures specific to 
the type of operation. For example, the RegNtPreQueryKey operation uses the 
REG_QUERY_KEY_INFORMATION structure. These pre-operation callbacks allow the 
driver to modify or prevent the request from completing before execution 
is handed off to the configuration manager. An example of this using the 
previous RegNtPreQueryKey member would be to modify the KeyInformation 
member of the REG_QUERY_KEY_INFORMATION structure to change the type of 
information returned to the caller.
Post-operation callbacks always use the REG_POST_OPERATION_INFORMATION 
structure, with the exception of RegNtPostCreateKey and RegNtPostOpenKey, 
which use the REG_POST_CREATE_KEY_INFORMATION and REG_POST_OPEN_KEY_
INFORMATION structures, respectively. This post-operation structure con-
sists of a few interesting members. The Object member is a pointer to the 
Table 5-2: Stripped REG_NOTIFY_CLASS Members and Descriptions (continued)
Evading EDR (Early Access) © 2023 by Matt Hand
Image-Load and Registry Notifications   95
registry-key object for which the operation was completed. The Status 
member is the NTSTATUS value that the system will return to the caller. 
The ReturnStatus member is an NTSTATUS value that, if the callback routine 
returns STATUS_CALLBACK_BYPASS, will be returned to the caller. Lastly, the 
PreInformation member contains a pointer to the structure used for the cor-
responding pre-operation callback. For example, if the operation being 
processed is RegNtPreQueryKey, the PreInformation member would be a pointer 
to a REG_QUERY_KEY_INFORMATION structure.
While these callbacks don’t allow the same level of control as pre-
operation callbacks do, they still give the driver some influence over the 
value returned to the caller. For example, the EDR could collect the return 
value and log that data.
Mitigating Performance Challenges
One of the biggest challenges that EDRs face when receiving registry 
notifications is performance. Because the driver can’t filter the events, it 
receives every registry event that occurs on the system. If one driver in the 
callback stack performs some operation on the data received that takes an 
excessive amount of time, it can cause serious system performance degrada-
tion. For example, during one test, a Windows virtual machine performed 
nearly 20,000 registry operations per minute at an idle state, as shown in 
Figure 5-4. If a driver took some action for each of these events that lasted 
an additional millisecond, it would cause a nearly 30 percent degradation 
to system performance.
Figure 5-4: A total of 19,833 registry events captured in  
one minute
To reduce the risk of adverse performance impacts, EDR drivers must 
carefully select what they monitor. The most common way that they do 
this is by monitoring only certain registry keys and selectively capturing 
event types. Listing 5-16 demonstrates how an EDR might implement this 
behavior.