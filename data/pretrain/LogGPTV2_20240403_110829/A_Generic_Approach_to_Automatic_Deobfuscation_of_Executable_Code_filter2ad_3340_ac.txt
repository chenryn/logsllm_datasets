i := 1
fact := 1
Top: if (i > n) goto Bot
fact: = fact * i
i := i + 1
goto Top
Bot: write(fact)
halt
n := read()
i := 1
fact := 1
if (i > n) goto Bot
fact := fact * i
i := i + 1
goto Top
if (i > n) goto Bot
fact := fact * i
I1
I2
I3
I4
I5
I6
I7
I8
I9
I10 i := i + 1
I11 goto Top
I12 if (i > n) goto Bot
I13 fact := fact * i
I14 i := i + 1
I15 goto Top
I16 if (i > n) goto Bot
I17 write(fact)
I18 halt
(a) Static code
(b) Unsimpliﬁed trace (input = 3).
Input-tainted instructions are shown un-
derlined.
Fig. 5. An example illustrating over-simpliﬁcation
n := read()
i := 1
fact := 1
if (i > n) goto Bot
fact := fact * i 1
i := i + 1 2
goto Top
if (i > n) goto Bot
fact := fact * i 2
I1
I2
I3
I4
I5
I6
I7
I8
I9
I10 i := i + 1 3
I11 goto Top
I12 if (i > n) goto Bot
I13 fact := fact * i 6
I14 i := i + 1 4
I15 goto Top
I16 if (i > n) goto Bot
I17 write(fact 6)
I18 halt
(c) Result of oversimpliﬁcation.
Algorithm 2: Final Control Flow Graph Construction
Input: Set of simpliﬁed execution trace T
Result: Control ﬂow graph G for T
1 Let B0 be ﬁrst basic block in T
2 tcurr := vcurr := B0
3 G := (V, E) where V = {vcurr} and E = ∅
4 EdgeStk := NULL
5 while there are unprocessed blocks in T do
6
7
8
9
10
11
let tnext be the next block after tcurr in T
if tnext is already a successor of vcurr then
else if a successor can be added to vcurr then
/* add tnext as a successor to vcurr */
Let vnext be a basic block in G that its entry
point has the same address as tnext in T
if vnext = NULL then
vnext := tnext
vnext := tnext
add vnext to V
add e ≡ ‘vcurr → vnext’ to E
push e on EdgeStk
/* backtrack using EdgeStk */
pop e ≡ ‘a → b’ from EdgeStk
tcurr := block in T corresponding to a
tnext := block in T corresponding to b
vcurr := block in G corresponding to tcurr
vnext := Duplicate(tnext)
add e ≡ ‘vcurr → vnext’ to E
push e on EdgeStk
else
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29 end
30 Output G
end
vcurr := vnext
tcurr := tnext
tion (in emulation-obfuscation), or a gadget for an operation
such as copying one register to another (in return-oriented
programming)—is implemented using a single code fragment
CI; control is then directed to CI whenever the functionality
I is needed in the program. This means that if there are k
different occurrences of I in the original program, they will
end up executing the same piece of code CI in the emulated
program k times, with k corresponding repetitions of CI in
the execution trace. A CFG constructed in a straightforward
way will then have k pairs of control ﬂow edges coming into
and out of the code region CI, which will cause the control
ﬂow behavior of the program to appear very tangled.
During deobfuscation, therefore, we try to construct the
CFG in a way that attempts to untangle some of the paths
by judiciously duplicating basic blocks. Intuitively, we want
to minimize the amount of such code duplication, while at the
same time reducing the number of “spurious” control ﬂow
paths (paths that are possible in the CFG constructed but
which are not observed in the trace(s) used to construct the
CFG). Solving this problem optimally seems combinatorially
challenging, and related problems in computational learning
theory that are known to be computationally hard: the problem
of identifying a CFG that is consistent with a given trace (i.e.,
which admits that trace but may also admit other execution
paths) can be modeled as that of constructing a DFA consistent
with a given set of strings (i.e., which accepts those strings but
may also accept other strings). Unfortunately the problem of
ﬁnding the smallest DFA (or the smallest regular expression)
that is consistent with a given regular language is NP-hard
[25], [26] and is not even efﬁciently approximable [27].
Given these results, we augment the usual CFG construction
algorithm [24] with heuristics aimed at balancing the number
of vertices and the complexity of the constructed CFG, using a
depth-ﬁrst backtracking search to explore the search space as
is shown in the Algorithm 2. We brieﬂy sketch the algorithm
here.
681681
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:09:00 UTC from IEEE Xplore.  Restrictions apply. 
The simpliﬁed trace, from which we construct the deob-
fuscated control ﬂow graph, is a sequence of instructions that
can also be considered as a sequence of basic blocks such
that if a block B is followed by a block B(cid:2) in the (simpliﬁed)
trace it corresponds to an edge B → B(cid:2) in the corresponding
control ﬂow graph. Our algorithm traverses the sequence of
basic blocks in the trace, constructing a control ﬂow graph G
using the usual CFG construction algorithm, by adding basic
blocks and/or edges to G, as long as this does not violate
any structural constraints of any vertex in G; currently, the
primary structural constraint that is enforced is the out-degree
constraint: namely, that a basic block ending with a conditional
jump can have at most two successors or if it is ending with
an indirect jump, there is no restriction on the number of its
succesors. This requirement is checked at the line 9 of the
Algorithm 2. If the algorithm encounters a situation where
adding a block and/or edge to G would violate this structural
constraint, it backtracks to the most recently added vertex that
can be duplicated without violating the out-degree constraint
(Algorithm 2 lines 18-25). This vertex is then duplicated,
together with vertices and edges that were added to G more
recently, after which the algorithm resumes in the forward
direction.
Another problem that
the simpliﬁcation might cause is
removing dynamically dead instrucitons that affects the ﬁnal
CFG in such a way that causes the CFG construction algorithm
to produce a new basic block for the code in which dynam-
ically dead instructions are missing. The ﬁnal step of deob-
fuscation is to apply semantics-preserving transformations to
simplify the control ﬂow graph. In particular, we identify and
merge basic blocks that differ solely due to dynamically dead
instructions. The following snippet of code, to compute the
factorial function, illustrates the problem:2
int factorial(int n) {
int i, p;
p = i = 1;
while (n > 0) {
p = p*i
i = i+1
n = n-1
}
return p;
}
Suppose this function is called with the argument n = 2. The
resulting execution trace for this function is:
/* 1 */
/* 2 */
/* 3 */
/* 4 */
/* 5 */
/* 6 */
/* 7 */
/* 8 */
/* 9 */
/* 10 */
i = 1
p = 1
n > 0?
p = p*i
i = i+1
n = n-1
n > 0?
p = p*i
i = i+1
n = n-1
/* n == 2 */
/* n == 1 */
2In reality we work with assembly instructions. This example uses C code
for the program, and a quasi-C syntax for the trace, for simplicity and ease
of understanding.
682682
/* 11 */
/* 12 */
n > 0?
return p
/* n == 0 */
The statement at position 9 in this trace, ‘i = i+1’,
is
dynamically dead, since the value it computes at that point in
the execution is not used later, and so it is removed during trace
simpliﬁcation. When a control ﬂow graph is constructed from
the simpliﬁed trace, however, we get two different versions of
the loop body:
p = p*i
i = i+1
n = n-1
n > 0?
and
p = p*i
n = n-1
n > 0?
The ﬁrst of these corresponds to the iterations up to the last
iteration, while the second corresponds to the last iteration.
More generally, depending on the dependence structure/dis-
tance of the loop(s) we may get multiple such loop body
fragments with some code simpliﬁed away. Such blocks are
treated as distinct by the control ﬂow graph construction
algorithm, resulting in a graph that has more vertices, and
is more cluttered, than necessary. A similar situation arises
with function calls if some call sites use the return value but
others do not.
We deal with this situation by identifying and merging basic
blocks that are identical modulo dynamically dead instructions.
Deﬁne two blocks B1 and B2 to be mergeable if the following
conditions hold:
1) B1 and B2 span the same range of addresses (except
possibly for any dynamically dead instructions at the
beginning and/or end of either block).
2) [Non-dynamically dead instructions] If an instruction
I occurs in both B1 and B2, then it is the identical
instruction in both B1 and B2. I.e., the operands should
not have changed (e.g. due to constant propagation).
3) [Dynamically dead instructions] For each instruction
I ∈ B1 that does not occur in B2, I is dead if it is added
into B2 at the appropriate position; and analogously with
instructions that are in B2 but not in B1.
To simplify the control ﬂow graph, we repeatedly ﬁnd merge-
able basic blocks and merge them to obtain the ﬁnal control
ﬂow graph.3
IV. EXPERIMENTAL EVALUATION
We have evaluated our ideas using a prototype implemen-
tation of our approach. Execution traces of the original and
obfuscated binaries were collected using a modiﬁed version of
Ether [16]. Trace simpliﬁcation was carried out on a machine
with 2× quad-core 2.66 GHz Intel Xeon processors with 96
GB of RAM running Ubuntu Linux 12.04. The results of our
experiments are discussed below. To quantify the similarity
between the original and the deobfuscated programs (and, for
completeness, the obfuscated programs as well), we use an
3From an implementation perspective, it turns out to be simpler to mod-
ify the simpliﬁed trace to reintroduce, where necessary, dynamically dead
instructions that had been simpliﬁed away, and then rebuild the control ﬂow
graph.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:09:00 UTC from IEEE Xplore.  Restrictions apply. 
is a ﬁle dropper; newstar and epo are ﬁle infectors that imple-
ment different ﬁle infection mechanisms to drop payloads into
other ﬁles; and netsky ae is a worm whose functionality we
divided into different pieces: netsky ae1 searches and elimi-
nates antivirus and monitoring software running on the system,
netsky ae2 installs the malware for surviving the system boots,
netsky ae3 infects the system with encrypted variations of the
malware and netsky ae4 recursively copies the malware into
shared folders. In addition to these malware programs, we used
two synthetic benchmarks, huffman, and matrix-multiply, to
explore how our techniques handled various combinations of
conditionals and nested loops.
Space constraints preclude showing the full control ﬂow
graph of each of our test inputs; Figure 6 gives a high-level
visual impression of the effect of emulation-based obfuscation,
together with the deobfuscated programs obtained using our
approach, for two different malware samples: Netsky ae1, Hu-
natcha, and the matrix multiply program, that have reasonably
interesting control ﬂow structure, consisting of nested loops
and conditionals; and three widely-used obfuscation tools:
Code Virtualizer, ExeCryptor, and Themida. In order to focus
the discussion on the core portion of the computation, the
graphs shown omit the program setup/takedown and I/O code.
It can be seen, from visual inspection, that the control ﬂow
graph resulting from deobfuscation is in each case very similar
to that of the original program.
The results of the similarity comparisons are shown in Table
I. Columns labeled ‘Obf.’ give the similarity of the obfuscated
programs with the original programs; those labeled ‘Deobf.’
give the similarity between the deobfuscated programs and the
original programs. Not surprisingly, the obfuscated programs
are usually very different from the original code structurally:
by and large these similarity numbers are in the 6%–8%
range, with several programs showing similarities of less that
10%, and a few (e.g. huffman, hunatcha and epo for Code
Virtualizer, and huffman for VMProtect) with similarity values
over 15%. The exceptions here are Cairuh, netsky ae2 and
netsky ae4 which because of having switch statements in their
code, they are structurally similar to the virtualized binaries
so they are in fact more similar to the obfuscated binaries
than the other programs. By contrast, the control ﬂow graphs
resulting from our deobfuscation algorithm have signiﬁcantly
higher similarities. While nearly similar on average, they are
highest for Code Virtualizer and Execryptor, ranging from
72% to 95% for Code Virtualizer and in the range of 75%
to more than 94% for EXECryptor. On average the similarity
values for Code Virtualizer and EXECryptor are 86.6% and
86.4%. The deobfuscation results are comparable for Themida
and VMProtect, ranging from 82% to 96% for Themida and
from 46% to 96% for VMProtect. However, it should be noted
that our approach still achieves signiﬁcant improvements in
similarity relative to the obfuscated code.
algorithm of Hu, Chiueh, and Shin for computing the edit
distance between two control ﬂow graphs [28]. Given two
control ﬂow graphs G1 and G2, this algorithm computes a
correspondence between the vertices of G1 and G2 using
maximum bipartite matching, then uses this correspondence to
determine the number of edits, i.e., the number of vertex and
edge insertion/deletion operations necessary to transform one
graph to the other. To facilitate comparisons between CFGs
of different sizes, we normalize the edit distance to the total
size of the graphs being compared. Let δ(G1, G2) be the edit
distance between two control ﬂow graphs G1 and G2, then
their similarity is computed as
sim(G1, G2) = 1 − δ(G1, G2)
|G1| + |G2|
where |G| is the size of the graph G and is given by the total
number of vertices and edges in G. A similarity score of 0
means that the graphs are completely dissimilar; a similarity
score of 1 means that the graphs are identical.
Our experimental samples, including source code for the test
programs and executables for the original and obfuscated pro-
grams, are available at www.cs.arizona.edu/projects/
lynx/Samples/Obfuscated/.
A. Emulation-based Obfuscation
We evaluated our deobfuscator using four commercial
emulation-obfuscation tools: Code Virtualizer [1], EXECryp-
tor [2], Themida [4], and VMProtect [3]. Code Virtualizer and
VMProtect are representative of obfuscation tools that have
been considered in previous work [5], [6]; these authors do
not discuss EXECryptor so we do not know whether they are
able to handle software obfuscated using this tool. As far as
we know, none of the existing approaches on deobfuscation
of emulation-obfuscated software are able to handle binaries
obfuscated using Themida. When obfuscating programs using
Themida, users can select various parameters, including the
complexity of the VM instructions: for our experiments used
the setting ‘mutable CISC processor’ with one VM whose
opcode type is ‘metamorphic level-2’.4
1) Single-Level Emulation: Single-level emulation refers to
obfuscation where there is just a single level of emulation,
namely, that of the emulator introduced by the obfuscation
process. This is the only kind of emulation-based obfuscation
considered thus far by other researchers on this topic.
To evaluate the quality of deobfuscation results using our