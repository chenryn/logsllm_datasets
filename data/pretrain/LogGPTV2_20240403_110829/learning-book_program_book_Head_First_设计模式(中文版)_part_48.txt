成功：他们拿到糖果了。改变状态
到“售出糖果”，然后调用机器的
调用此方法，发放糖果。
dispense(）方法。
我们正在“售出糖
public void dispense()
1
if (state == SOLD) {
果”状态：给他们
System.out.println("A gumball comes rolling out the slot");
糖果！
count=count-1;
if （count ==0）{
System.out.println("oops, out of gumballs!");
我们在这里处理
state = SOLD_OUT;
警的情况。如果这是最后一
}else{
颗糖果，我们就将机器的状态
state = NO_QUARTER;
设置到“糖果售馨”
没有25分
}else if (state == NO_QUARTER)
否则，就回到
System.out.println("You need to pay first");
钱”状态。
}else if （state == SOLD_OUT) {
System.out.println("No gumball dispensed");
这些都不应该发生，但
}else if （state == HAS_QUARTER) {
如果顾客这么做了，他
System.out.println("No gumball dispensed") ;
们得到的是错误消息，
而不是得到糖果。
//这里是像toString（）和refill（）的其他的方法
你现在的位置
391
---
## Page 428
测试糖果机
内部测试
感觉它像是使用思虑周密的方法学构造的牢不可破的设计，你不觉得吗？
在我们将它交给万能糖果公司，安装到实际的糖果机器内之前，让我们先
做一个小小的内部测试。测试程序是这样的：
总共装了5题糖果。
public class GumballMachineTestDrive {
public static void main(String[] args) {
Gumbal1Machine gumbal1Machine = new GumballMachine (5) ;
System.out.println (gumballMachine) ;
打印出机器的状态。
gumballMachine.insertQuarter () ;
投入一校25分线硬币…
gumbal1Machine.turnCrank ();
转动曲辆：我们应该拿到糖果。
System.out.println(gumballMachine) ;
再一次打印出机器的状态。
gumballMachine.insertQuarter() ;
2
gumballMachine.ejectQuarter() ;
投入一校25分钱硬币…
gumbal1Machine.turnCrank () :
要求机器退钱。
System.out.println (gumbal1Machine) ;
转动曲辆：我们应该拿不到糖果。
再一次打印出机器的状态。
gumballMachine.insertQuarter () ;
投入一校25分钱硬币…
gumballMachine.turnCrank () ;
转动曲标：我们应该拿到糖果。
gumballMachine.insertQuarter () ;
投入一校25分钱硬币
gumballMachine.turnCrank () ;
gumballMachine.ejectQuarter () ;
转动曲辆：我们应该拿到糖果。
要求机器退钱。
System.out.println(gumballMachine) ;
再一次打印出机器的状态。
gumballMachine.insertQuarter () ;
放进两校25分钱硬币
gumballMachine.insertQuarter () ;
gumballMachine.turnCrank();
转动曲柄：我们应该拿到糖果。
gumballMachine.insertQuarter () ;
gumballMachine. turnCrank() ;
现在做压力测试
gumballMachine.insertQuarter () ;
gumballMachine.turnCrank () ;
System.out.println (gumballMachine) ;
再一次打印出机器的状态。
392
第10章
---
## Page 429
状态模式
Fie Edit
java GumballMachineTestDrive
Java-enabled Standin
Gumball Model #2004
Inventory:5 gumba1ls
You inserted a quarter
A gumball comes rolling out the slot
Yout
Inventory:4gumballs
Gumball Model #2004
Machine is waiting for quarter
You inserted a quarter
You turned but there's no quarter
Quarter returned
Java-enabled Standing
Gumba11Model#2004
You inserted a quarter
You turned...
mes rolling out the slot
gumball
comes rolling out the slot
You haven't insertedaquarter
Mighty Gumball，
Java-enabled Standing
Inc.
Gumbal1Model#2004
You inserted a quarter
You
can'tinserf another quarter
You
turned..
You can't insert a quarter，the machine is sold out
s
Mighty Gumball,Inc.
Gumball Model#2004
PDI
你现在的位置
393
---
## Page 430
买糖果，玩游戏
该来的躲不掉·····变更请求！
万能糖果公司已经将你的代码放进他们的新机器中，然后让他们
的质保专家进行测试。到目前为止，在他们看来一切都很顺利。
事实上，实在是太顺利了，所以他们想要变点花样..
我们认为，将“购买糖果”变成
是一个游戏，可以大大地增加我
们的销售量。我们要在每一台机
器上面贴上这张贴纸。我们很高兴
当初决定采用Java，因为这会让一
切变得很筒单，对吧？
当个赢家！
10人有1人可
以得到免费
糖果
万能糖果公司的
当曲柄被转动
CEO。
时，有10%的机
率摔下来的是两
PDG
打烂下巴或得到
颗糖果（多送你一
糖果。
糖果机
个）。
394
第10章
---
## Page 431
状态模式
设计谜题
为万能糖果公司的机器绘制一个状态图，处理这个十次赢一次的竞
赛。在这个竞赛中，“售出糖果”状态有10%的机率会导致掉下两
颗糖果，而不是一颗。在你继续下一步之前，请将你的答案和我们
的解答做对比（在本章的最后），以确定我们的看法一致……
万能糖果公司
有糖果机的地方，
永远充满活力
使用万能糖果公司的文具来画你的状态图。
你现在的位置
395
---
## Page 432
事情变得一团乱
混乱的状态···
使用一种考虑周详的方法学写糖果机的代码，并不意味着这份代码就容易扩展。事实上，当你
回顾这些代码，并开始考虑要如何修改它时…
final static int SOLD_OUT = 0;
首先，你必须加上一个新的状态，称为“赢
final static int NO_QUARTER = 1;
家”。这还不算太麻烦…
final static int HAS_QUARTER=2;
final static int SOLD = 3;
public void insertQuarter(){
//这里加人投币代码
然后呢，你必须在每个方法中加入一个新的
public void ejectQuarter ()
条件判断来处理“鼠家”状态：这可有你忙
//这里加入退币代码
的了。
public void turnCrank()(
//这里加人转动曲柄代码
turnCrack（）尤其会变得一团乱.因为你必须加
）上代码来检查目前的肠客是否是赢家，然后再
public void dispense(){
决定是切换到赢家状态还是售出糖果状态。
//这里加人发放糖果代码
adanou
下列哪一项描述了我们实现的状态？（多选）
口A.这份代码确实没有遵守开放-关闭
口D.状态转换被埋藏在条件语句中，所以并
原则。
不明显。
B.
这份代码会让Fortran程序员感到
口E.我们还没有把会改变的那部分包装来。
骄傲。
口F未来加入的代码很有可能会导致bug。
口C.这个设计其实不符合面向对象。
396
第10章
---
## Page 433
状态模式
这样子不妙。我认为我们的第一
个版本很不错，但是随着万能糖果公司
所要求的新行为的出现，这个版本已经不再
适用了。程序中bug的机率增大可能会给我
们带来麻烦，更不用说这会让CEO把我们遥
疯。
Joe：你说的没错！我们需要重构这份代码，以便我们能容易地维护和修
改它。
Anne：我们应该试着局部化每个状态的行为，这样一来，如果我们针对
某个状态做了改变，就不会把其他的代码给搞乱了。
Joe：没错，换句话说，遵守“封装变化”原则。
Anne：正是如此。
Joe：如果我们将每个状态的行为都放在各自的类中，那么每个状态只要
实现它自己的动作就可以了。
Anne：对。或许糖果机只需要委托给代表当前状态的状态对象。
Joe：哇！你真行：这不正是“多用组合，少用继承”吗？我们应用了更
多的原则。
Anne：呵呵！我并没有百分之百确定就要这么做，但是我想我们已经有
正确的方向了。
Joe：我正在想这是否可以使添加新状态更容易呢？
Anne：我认为可以..我们还是需要改变代码，但是改变将局限在小范
围内。因为加人一个新的状态，就意味着我们要加入一个新的类还有可
能要改变一些转换。
Joe：听起来不错。让我们动手进行新的设计吧！
你现在的位置
397
---
## Page 434
新的状态设计
新的设计
我们的计划是这样的：不要维护我们现有的代码，我们重写它以便于将状态对象封装
在各自的类中，然后在动作发生时委托给当前状态。
我们在这里遵照我们的设计原则，所以最后应该得到一个容易维护的设计。我们要做
的事情是：
①
首先，我们定义一个State接口。在这个接口内，糖果机的每个动作
都有一个对应的方法。
2
然后为机器中的每个状态实现状态类。这些类将负责在对应的状态下
进行机器的行为。
3
最后，我们要摆脱旧的条件代码，取而代之的方式是，将动作委托到
状态类。
你将会看到，我们不仅遵守了设计原则，实际上我们还实现了状态模式。在重新完成
代码之后我们再来了解状态模式的正式定义
现在我们要把一个状
态的所有行为放在一个类
中。这么一来我们将行为局部化
0。
了，并使得事情更容易改变和
理解。
398
第10章
---
## Page 435
状态模式
定义状态接口和类
首先，让我们创建一个State接口，所有的状态都必须实现这个接口：
这就是所有状态的接口。这些方法直提映射到糖果
机上可能发生的动作（这些方法和之前代碍里的一
样）。
然后将设计中的每个状态都封装成一个
>
类，每个都实现State接口。
insertQuarter)
ejecfQuarter)
tumCrank)
dispense(
想要理清我们需要什公
状态，可以参考一下之
前写的代码.
SoldState
SoldOutState
NoQuarterState
sertQuarter()
insertQuarter()
insertQuarter)
HasQuarterState
ejoctQuarter
ejectQuarter()
insertQuantert)
tumCrank()
ejectQuarer)
tumCrank()
tumCrank)
ejectQuarter()
(asuedsip
tumCrank()
Oasuadsp
dispense)
(ispense)
public class GumballMachine {
然后我们将每个状态直
final static int SOLD_OUT =0;
接映射到一个类。
final static int NO_QUARTER =
final static int HAS_QUARTER
1
final static int SOLD =3;
2:
别忘了.我们也常要一个新的“赢家”状态（当然它
int state = SOLD_OUT;
也要实现State接口）。在我们完成第一个版本的糖果
int count =0;
机的重新实现之后，再回来处理这部分。
WinnerState
insertQuarter)
ejectQuarter()
dispense(
你现在的位置，：399
---
## Page 436
都有哪些状态类？
想要实现我们的状态，我们首先需要指定当每一个动作被调用时，类的行
为是哪一个。请在下面这张图上，为每个类的每个动作的行为加上注释。
我们已经先帮你填写了其中的几个。
)HasQaatterState。
NoO
arterState
告诉顾客“你还没有投入25分钱”。
insntQuarter()
S
ejectQuarter()
tumCrank)
dispense0
HasQuarterState
insetQuarterD
到SoldState
(eyengpale
tumCrank)
ispense()
告诉额客“请稍候，我们易上给你一颗糖果”
SoldState
insertQuartert)
ejectQuarter)
发放一际糖果。检查刻下糖果数日，如