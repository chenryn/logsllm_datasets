### Control Schema Objects in `_edb_replicator_sub`

The control schema objects within the `_edb_replicator_sub` schema are as follows:

```sql
edb=# SET search_path TO _edb_replicator_sub;
SET
edb=# \dt
```

**List of Relations:**

| Schema              | Name                       | Type  | Owner   |
|---------------------|----------------------------|-------|---------|
| _edb_replicator_sub | xdb_sub_database           | table | pubuser |
| _edb_replicator_sub | xdb_subscription_tables    | table | pubuser |
| _edb_replicator_sub | xdb_subscriptions          | table | pubuser |
| _edb_replicator_sub | xdb_tables                 | table | pubuser |

```sql
edb=# \ds
```

**List of Sequences:**

| Schema              | Name             | Type    | Owner   |
|---------------------|------------------|---------|---------|
| _edb_replicator_sub | rrep_common_seq  | sequence| pubuser |

```sql
edb=# SELECT nspname, funname, typname 
FROM pg_function fn, pg_namespace ns, pg_type ty
WHERE nspname = '_edb_replicator_sub'
AND ns.oid = fn.funnamespace
AND ty.oid = fn.funrettype
ORDER BY typname, funname;
```

**List of Functions:**

| Schema              | Function Name                            | Return Type |
|---------------------|------------------------------------------|-------------|
| _edb_replicator_sub | xdb_sub_database_trigger_tgfunc          | trigger     |
| _edb_replicator_sub | xdb_subscription_tables_trigger_tgfunc   | trigger     |
| _edb_replicator_sub | xdb_subscriptions_trigger_tgfunc         | trigger     |
| _edb_replicator_sub | xdb_tables_trigger_tgfunc                | trigger     |

### Control Schema Objects in `_edb_scheduler`

The control schema objects within the `_edb_scheduler` schema are as follows:

```sql
edb=# SET search_path TO _edb_scheduler;
SET
edb=# \dt
```

**List of Relations:**

| Schema              | Name                         | Type  | Owner   |
|---------------------|------------------------------|-------|---------|
| _edb_scheduler      | sch_pub_blob_triggers        | table | pubuser |
| _edb_scheduler      | sch_pub_calendars            | table | pubuser |
| _edb_scheduler      | sch_pub_cron_triggers        | table | pubuser |
| _edb_scheduler      | sch_pub_fired_triggers       | table | pubuser |
| _edb_scheduler      | sch_pub_job_details          | table | pubuser |
| _edb_scheduler      | sch_pub_job_listeners        | table | pubuser |
| _edb_scheduler      | sch_pub_locks                | table | pubuser |
| _edb_scheduler      | sch_pub_paused_trigger_grps  | table | pubuser |
| _edb_scheduler      | sch_pub_scheduler_state      | table | pubuser |
| _edb_scheduler      | sch_pub_simple_triggers      | table | pubuser |
| _edb_scheduler      | sch_pub_trigger_listeners    | table | pubuser |
| _edb_scheduler      | sch_pub_triggers             | table | pubuser |
| _edb_scheduler      | sch_sub_blob_triggers        | table | pubuser |
| _edb_scheduler      | sch_sub_calendars            | table | pubuser |
| _edb_scheduler      | sch_sub_cron_triggers        | table | pubuser |
| _edb_scheduler      | sch_sub_fired_triggers       | table | pubuser |
| _edb_scheduler      | sch_sub_job_details          | table | pubuser |
| _edb_scheduler      | sch_sub_job_listeners        | table | pubuser |
| _edb_scheduler      | sch_sub_locks                | table | pubuser |
| _edb_scheduler      | sch_sub_paused_trigger_grps  | table | pubuser |
| _edb_scheduler      | sch_sub_scheduler_state      | table | pubuser |
| _edb_scheduler      | sch_sub_simple_triggers      | table | pubuser |
| _edb_scheduler      | sch_sub_trigger_listeners    | table | pubuser |
| _edb_scheduler      | sch_sub_triggers             | table | pubuser |

```sql
edb=# SELECT nspname, funname, typname 
FROM pg_function fn, pg_namespace ns, pg_type ty
WHERE nspname = '_edb_scheduler'
AND ns.oid = fn.funnamespace
AND ty.oid = fn.funrettype
ORDER BY typname, funname;
```

**List of Functions:**

| Schema              | Function Name                             | Return Type |
|---------------------|-------------------------------------------|-------------|
| _edb_scheduler      | sch_pub_blob_triggers_trigger_tgfunc      | trigger     |
| _edb_scheduler      | sch_pub_calendars_trigger_tgfunc          | trigger     |
| _edb_scheduler      | sch_pub_cron_triggers_trigger_tgfunc      | trigger     |
| _edb_scheduler      | sch_pub_job_details_trigger_tgfunc        | trigger     |
| _edb_scheduler      | sch_pub_job_listeners_trigger_tgfunc      | trigger     |
| _edb_scheduler      | sch_pub_simple_triggers_trigger_tgfunc    | trigger     |
| _edb_scheduler      | sch_pub_trigger_listeners_trigger_tgfunc  | trigger     |
| _edb_scheduler      | sch_pub_triggers_trigger_tgfunc           | trigger     |
| _edb_scheduler      | sch_sub_blob_triggers_trigger_tgfunc      | trigger     |
| _edb_scheduler      | sch_sub_calendars_trigger_tgfunc          | trigger     |
| _edb_scheduler      | sch_sub_cron_triggers_trigger_tgfunc      | trigger     |
| _edb_scheduler      | sch_sub_job_details_trigger_tgfunc        | trigger     |
| _edb_scheduler      | sch_sub_job_listeners_trigger_tgfunc      | trigger     |
| _edb_scheduler      | sch_sub_simple_triggers_trigger_tgfunc    | trigger     |
| _edb_scheduler      | sch_sub_trigger_listeners_trigger_tgfunc  | trigger     |
| _edb_scheduler      | sch_sub_triggers_trigger_tgfunc           | trigger     |

### Triggers and Trigger Functions

If the trigger-based method of synchronization replication is used, triggers and trigger functions are created in the schema containing the publication tables.

```sql
edb=# SET search_path TO edb;
SET
edb=# \df rr*
```

**List of Functions:**

| Schema | Name                  | Result Data Type | Argument Data Types | Type   |
|--------|-----------------------|------------------|---------------------|--------|
| edb    | rrpd_edb_dept_tgfunc  | trigger          |                     | trigger|
| edb    | rrpd_edb_emp_tgfunc   | trigger          |                     | trigger|
| edb    | rrpi_edb_dept_tgfunc  | trigger          |                     | trigger|
| edb    | rrpi_edb_emp_tgfunc   | trigger          |                     | trigger|
| edb    | rrpu_edb_dept_tgfunc  | trigger          |                     | trigger|
| edb    | rrpu_edb_emp_tgfunc   | trigger          |                     | trigger|

If the log-based method of synchronization replication is used, the following triggers are created on the publication tables:

```sql
edb=# SELECT t.tgname AS "Trigger Name", c.relname AS "Table Name", f.funname AS "Trigger Function"
FROM pg_trigger t, pg_function f, pg_class c
WHERE tgname LIKE 'rrpt%'
AND t.tgfoid = f.oid
AND t.tgrelid = c.oid
ORDER BY t.tgname;
```

**Triggers:**

| Trigger Name   | Table Name | Trigger Function          |
|----------------|------------|---------------------------|
| rrpt_edb_dept  | dept       | capturetruncateevent      |
| rrpt_edb_emp   | emp        | capturetruncateevent      |

These triggers support the synchronization replication of the `TRUNCATE` command when the log-based method is used.

### Creating a Subscription

Creating your first subscription involves the following steps:

1. **Registering the Subscription Server**
2. **Adding the Subscription Database**
3. **Creating a Subscription by Choosing the Publication to Subscribe To**

Multiple subscriptions can be created in a single subscription database, and more than one subscription can be created for the same publication.

#### 5.3.1 Registering a Subscription Server

When you register a subscription server, you identify the network location, admin user name, and password of a specific, running subscription server instance that will manage all aspects of the subscriptions you create.

**Step 1: Start the Subscription Server**

- If the subscription server is not already running, start it.
- For Oracle publication or subscription databases, if the subscription server has not been restarted since copying the Oracle JDBC driver, restart it.
- For Linux: Use the `systemctl` command for CentOS 7 or RHEL 7, and the `service` command for previous versions.
- For Windows: Open Control Panel, System and Security, Administrative Tools, and then Services. Use the Start or Restart link for the service named "Subscription Service for xDB Replication Server."

**Step 2: Register the Subscription Server**

- Open the xDB Replication Console from the systemâ€™s application menu.
- Select the top-level "Replication Servers" node.
- From the File menu, choose "Subscription Server," then "Register Server."
- Alternatively, right-click on the "Replication Servers" node and choose "Register Subscription Server."
- Fill in the required fields:
  - **Host:** Network IP address of the host running the subscription server.
  - **Port:** Port number the subscription server is using.
  - **User Name:** Admin user name for the subscription server.
  - **Password:** Password of the admin user.
  - **Save login information:** Check this box if you do not want to re-register the subscription server each time you open the xDB Replication Console.

**Step 3: Verify Registration**

- Click the "Register" button after filling in the fields.
- A "Subscription Server" node should appear in the replication tree of the xDB Replication Console.

#### 5.3.2 Adding a Subscription Database

The database in which subscriptions will reside must be identified to the xDB Replication Server. This is done by creating a subscription database definition.

**Step 1: Ensure the Database Server is Running**

- Make sure the database server in which the subscription database resides is running and accepting client connections.

**Step 2: Add the Subscription Database**

- Select the "Subscription Server" node.
- From the Subscription menu, choose "Subscription Database," then "Add Database."
- Alternatively, right-click on the "Subscription Server" node and choose "Add Database."
- Fill in the required fields:
  - **Database Type:** Select the type of subscription database (Oracle, SQL Server, PostgreSQL, or Postgres Plus Advanced Server).
  - **Host:** IP address of the host on which the subscription database server is running.
  - **Port:** Port on which the subscription database server is listening for connections.
  - **User:** The subscription database user name.
  - **Password:** Password of the database user.
  - **Service ID (For Oracle):** Enter the Oracle System Identifier (SID) or net service name.
  - **Database (For Postgres or SQL Server):** Enter the database name.
  - **URL Options (For SSL connectivity):** Enter the URL options to establish SSL connectivity.

**Step 3: Test and Save**

- Click the "Test" button. If the test is successful, click "OK" and then "Save."
- A "Subscription Database" node should appear in the replication tree under the "Subscription Server" node.

#### 5.3.3 Adding a Subscription

Subordinate to a subscription database definition, you create subscriptions. A subscription assigns the publication that is to be replicated to the database identified by the subscription database definition.

**Step 1: Create the Subscription**

- Select the "Subscription Database" node.
- From the Subscription menu, choose "Create Subscription."
- Alternatively, right-click on the "Subscription Database" node and choose "Create Subscription."
- Fill in the required fields:
  - **Subscription Name:** Enter a unique name for the subscription.
  - **Host:** Network IP address of the publication server.
  - **Port:** Port used by the publication server.
  - **User Name:** Admin user name of the publication server.
  - **Password:** Password of the admin user.
  - **Publication Name:** Click the "Load" button to get a list of available publications and select the one to subscribe to.

**Step 2: Enable Filter Rules (Optional)**

- If you defined a set of available table filters for the publication, you can enable these filters on the subscription.
- Click the "Filter Rules" tab to enable one or more filter rules on the subscription. At most one filter rule may be enabled on any given subscription table.

**Step 3: Save the Subscription**

- After filling in the fields and enabling any filter rules, save the subscription.
- A "Subscription" node should appear in the replication tree under the "Subscription Database" node.

This completes the process of creating a subscription.