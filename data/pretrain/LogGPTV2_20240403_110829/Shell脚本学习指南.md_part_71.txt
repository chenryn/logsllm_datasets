file非空.
-S file
file为 socket,
-t n
文件描述代码n，指向终端。
-ufile
file设置setuid位。
-w file
file是可写入的。
-x file
file是可执行的，或是可被查找的一个目
录。
-z string
string是 null,
fileA -nt fileB
fileA比fileB新，或fileB不存在。
fileA -ot fileB
fileA比fileB旧，成fileB不存在。
fileA -ef fileB
fileA与fileB指向相同文件。
string =pattern
ksh
string相符于pattezn（可包含通配字
符）。已过时：请使用==。
string = = pattern
string相符于pattezn（可包含通配字
符）。
string 1= pattern
string不相符于pattern,
stringA  stringB
stringA在目录里的顺序在stringB之后。
exprA -eq exprB
算术表示式exprA与exprB相等。
exprA -ne exprB
算术表示式exprA与exprB不相等。
exprA -1t exprB
exprA小于exprB。
exprA -gt exprB
exprA大于exprB。
exprA -1e exprB
exprA小于或等于exprB。
exprA -ge exprB
exprA大于或等于exprB
www.TopSage.com
---
## Page 416
404
第14章
运算符可以用圆括弧框起，结合&&（AND）与11（OR）进行逻辑处理，也可使用：表
示反向。当使用/dev/fd/n形式的文件名时，它们会测试开放文件描述代码n的相对应
属性。
运算符-eq、-ne、-1t、-le、-gt，与-ge在ksh93里为已过时的用法，改用let命
令或（（..-））（1et命令或（（..-））在14.3.7节里有简短的说明）。
14.3.3扩展性样式比对
ksh88引进额外的样式比对工具让Shell的功能更强大，awk与egrep扩展正则表达式得
以并驾齐驱（正则表达式的部分，详见3.2节）。如extglob选项被启用，则bash也支
持这些运算符（它们在ksh里总是为启用状态）。这些额外工具的摘要整理，见表14-4。
表14-4：Shell与egrep/awk正则表达式运算符的比较
ksh/bash
egrep/awk
含义
* (exp)
exp*
存在0或多个exp
+ ( exp)
exp+
存在1或多个exp
? (exp)
exp?
存在0或1个exp
 (exp2 lexp21 .. - )
expI|exp2l...
exp1或exp2或..
1 (exp)
(none)
所有不相符于exp的
She目正则表达式与标准正则表达式的标记方式相当类似，不过它们所表示的意义不同，
因为Shell会将表示式如dave|fredlbob解译为命令的管道操作，所以你必须使用
@（davelfredlbob）这样的方式。
举例来说：
@（davelfredlbob)比对相符的有dave，fredbob。
*（davelfredlbob）意即存在0或多个dave、fred或bob。此表示式相符的字符
串,像null字符串,dave, davedave, fred, bobfred, bobbobdavef redbobfred
等等。
+（dave1fred|bob）相符于上述所有字符串，null字符串除外。
?（davelfredlbob)相符于null字符串，Gave，fred或bob。
I(davelfredlbob)相符于dave、fred或bob以外的任何字符申。
我们必须再次强调：Shell正则表达式里还是可以包含标准Shell通配字符。因此，Shell
通配字符？（相符于任何单一字符）等同于egrep或awk的.（点号），且Shell的字符
www.TopSage.com
---
## Page 417
Shell可移植性议题与扩展
405
集运算符[...]也与那些工具相同（注1）.举例来说，表示式+（{[：digit：]]）相符
的是数字：也就是一个或多个数字。Shell通配字符*则等同于Shell正则表达式的*（?）。
你甚至可以果状化正则表达式：+（[[idigiti】111（t[rupper：]1））表示相符于一个或
多个数字，或是非大写字母。
有两个egrep与awk正则表达式运算符在Shell中没有等同物，它们是：
行开头与行结束运算符与
单词的起始与单词的结束运算符\
本质上，与$总是在那儿，只是样式前后带有·字符时会停用此功能。我们以下面的
范例讲解达之间的差异：
$1s
列出文件
biff bob frederick shishkabob
$ shopt -8 extglob
启用扩展样式比对（Bash）
echo （davelfredlbob），只相将于dave、red或bob的文件
S echo *g(davelfred|bob)*
bob
加人通配字将
bob frederick shishkabob
更多文件福符
ksh93支持更多的样式比对运算符：但因为本节是介绍bash与ksh93之间通用的部分，
所以介绍至此为止。如果想了解更多细节，可见参考书目中的LearningfheKornShell
(O'Reilly).
14.3.4括弧展开
--~ * 1 1
括弧展开（Brace cxpansion）借自于Berkcley C Shell—csh的功能，且两种Shell
都支持它。括强展开是让输人更轻松的方法。假设你拥有下列文件：
$ 18
oraszed-ddo o'ano-ddo o'xat-ddoo'sbze-ddo
如果你想编辑这4个文件里的其中3个，只要输人vicpp-{args，lex,parse}.c,Shell
便会展开为vicpp-args.ccpp-lex.ccpp-parse.c.而且括弧替换还可以巢状化。
例如：
$ echo cpp-(args,1(e,o}x;parse}.c
cpp-args.c cpp-lex.c cpp-1ox.c cpp-parse.c
注 1:
以这点来说，乃相同于grep、sod,ed,vi等等，但是一个有名的差异是：Shell在[...1
亚使用！表示反向之意，而不同的工具则都使用。
www.TopSage.com
---
## Page 418
406
14
14.3.5进程替换
Lop
Sage.com
进程替换（Processsubstitution）可以让用户开启多个进程数据流，再将它们喂给单一
程序处理。例如：
awk *...*(sort 1 uniq > sorted_data)\
此命令使用tee：（1）传送数据至管道，以排序与存储数据：（2）传送数据至mail程
序，给用户joe：（3）将原始数据重导至文件。这部分如图14-1所示。结合tee的进
程替换，让你转义出“一个输人、一个输出”的传统UNIX管道思维模式，你可以将数
据切分为多个输出数据流，还可以将多个输人数据流接合为一个。
enerate_data
generate_more_data
b
erate_data
ort|unlg
mail-s ‘rawdata' joe
ooess erpipellne
图14-1：输入、输出数据流的进程替换
www.TopSage.com
---
## Page 419
Shell可移植性议题与扩展
407
进程替换只有在支持/dev/fd/n特殊文件的UNIX系统下可使用，为命名访间到已开启
之文件描述代码。许多现行UNIX系统，包括GNU/Linux，都支持此功能。与使用括弧
展开一般，当ksh93是从原始码编译建置面成时，则它默认为启用的，bash必启用之，
14.3.6索引式数组
ksh93与bash两者都提供索引式数组工具，虽然它很好用，但它的限制比提供类似功
能的传统程序语言还多。特别匙：索引式数组仅为一次元（也就是不能有数组中的数
组）。索引自0起始。它们可以是任何的算术表示式：Shell会自动评估表示式产生索引。
有三种方式可以将值指定给数组里的元素。第一种为直觉式：使用标准Shel变量指定
语法，将数组素引放在方括弧（[1）里，例如：
nicknames [2] =bob
n1cknames [3] =ed
将值bob与ed分别置人数组nicknames的索引2与3元素中。就像正规的Shell变量
一样：指定至数组元素里的值，都会视为字符字符申。
第二种将值指定至数组里的方式，是使用set语句的变体。语句如下：
set -A aname val1 val2 val3 ...
此语句建立数组aname（如果它原先不存在的话），然后指定vall至aname[0]、val2
至aname[1]，以此类推。如你所想，这种方式比载入一组初始值至数组量方使得多。这
也是ksh第一个以单一操作指定多个数组元素的方式，我们特别提它好让你在已存在的
脚本中认得它。
注意：bash不支持Bet-A
第三种方式（也是趣议的使用方式）是使用复合指定形式：
aname= (va22 va12va13)
取出数组中的值，语法为S（aname[])。例如：$（nicknames[2]}的值为bob。索
引i可以是算术表示式。如果你在索引处使用*或。，则值将是以空格隔开的所有元素。
省略索引l（Snicknames）是等同于标明索引0（$（nicknanes[0]））。
现在，我们从较不一样的角度审视数组。假设，我们只指定了两个值予nicknames，也
就是前面的例子。如果你输入echo*$（nicknames[*])*，会看到这样的输出：
bob ed
www.TopSage.com
---
## Page 420
408
第14章
换句话说，nickmames[0]与nicknames[1]不存在，如果你输入：
nicknames[9]=pete
nicknames [31] =zalph
bob ed pete relph
这也就是为什么先前我们说它是nicknames的索引2与3，而不说它是nicknames的第
二与第三个元素。任何未指定值的数组元素都不存在，如果你试图访问其值，会得到null
字符串。
你可以通过“S（aname[9]}”（使用双引号）保留置人数组元素内的任何空白字符，而非
以S{aname[*]）。正如你会使用“S@*，而不是s*或*s*"。
两种Shell都支持S（anameI*]}运算符，告诉你数组里定义的元素有多少个。因此
S（#nicknames[*]）的值为4。请注意：[*]是必需的，因为单独的数组名称会被解译
为第0个元素。意思就是，S（#nicknames）等同于nicknames[0]的长度。因为
nicknames[0]不存在，所以 $（#nicknames}的值为0，即null字符串的长度。
你可以将数组认为是采取一个整数输人变量的数学函数，及回传一相对应值（该数字里
的元素）.如果你如此做，则你会了解为什么数组是“数字主控”的数据结构。由于Shell
的程序设计工作多半倾向于字符字符串与文字的处理，更甚于数字，所以索引式数组工
具并未广泛被使用。
尽管如此，我们还是找到索引式数组有用的地方，像我们先前在14.3.1里所提及的清理
问题，用户可以在登录时选定终端类型（TERM环境变量）。例14-2使用select与case
语句，呈现了更人性化的程序版本。
如我们利用select架构，将用户的数字选择存储至变量REPLY里，便能消除整个case
架构。我们只需要一行代码，将所有可能的TERK存储在数组里，而且是以select选
单项目所对应的顺序加以排序。之后，我们再使用SREPLY为数组作索引，代码如下：
echo Select your terminal type:*
select,term in\
'Givalt GL35a''\
'Shande 531*\
•66LA eA.
G0
If [[ -n $term 11: then
TERM=${termoanee[REPLY1]}
www.TopSage.com
---
## Page 421
Shell可移植性议题与扩展
409
echo *TERM is STSRM*
com
break
done
此代码设置数组termnames，所以$（termnames[0]）为g135a、$（termmames[1]）为
t2000等等。TERM=S（termnames[REPLY-1]）主要是取代整个case架构，通过使用
REPLY为数组进行素引。
这两个Shell都知道如何将数组索引中的文字解译为数值表示，好像它是被包在S（（与
））之间，即该变量无须前置美元符号（$）。我们必须将REPLY的值减一，因为数组索
引自0起始，而select选单项目编号则从1开始。
14.3.7各类扩展
77
这里又是另一串长长的列表，这次的内容是bash与ksh93所支持的POSIXShell小型
扩展：