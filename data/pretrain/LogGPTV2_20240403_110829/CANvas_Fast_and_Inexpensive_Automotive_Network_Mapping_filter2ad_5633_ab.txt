access to the engine ECU proves infeasible, the attacker could
access an ECU that is less critical and potentially has access
to remote networks (e.g. telematics ECU). Using the ECU
shutdown attack as discussed in recent work [10], our attacker
can shutdown the engine ECU by gaining control of the telem-
atics ECU and reprogramming it; the attacker simply needs to
receive a message from the victim ECU to target it. To combat
this, a defender could perform a similar analysis via network
USENIX Association
28th USENIX Security Symposium    391
ADBEGenerated network mapABECDatabase map for comparisonCase 1: Missing or additional ECU(s)Case 2: Partially-functioning or mis-configured ECU(s)DVS.FilterLenient FilterFilterInstrument Panel Cluster ECU:Receives messages from engineEngine ECU: Transmits messages to instrument panelExploited Telematics ECU: Capable of interrupting any received messageMessageScenario
Malicious ECU discovery
Continuous network attestation
Lenient ﬁlter identiﬁcation
Enum.
(cid:88)
(cid:88)
(cid:88)
Src. map
(cid:88)
(cid:88)
Dest. map
(cid:88)
(cid:88)
Table 1: Mapping requirements for motivating scenarios
a receiver on the bus and all other ECUs in the network that
correctly receive a message will simultaneously send a domi-
nant bit on the network. This slot is then followed by the EOF
and the inter-frame space (IFS).
Message arbitration: To understand how ECUs commu-
nicate on the CAN bus, it is necessary to discuss the CAN
message arbitration process [13–15, 33]. CAN is designed to
support collision detection and bit-wise arbitration on mes-
sage priority to allow higher-priority messages to dominate
the network. The arbitration of these messages is performed
on the message ID ﬁeld of a data frame, where a lower ID
indicates a higher priority. This priority-based arbitration pro-
cess sets a 0-bit as dominant and a 1-bit as recessive. Since a
0-bit is dominant, a message with a lower ID will get priority
on the CAN bus and will be sent before a message with a
higher ID that is queued at the same time.
3.2 Mapping requirements
Unlike most traditional packet-switched networks, CAN mes-
sages do not have ﬁelds that identify the message’s source and
destination(s), which makes the mapping problem difﬁcult.
To develop a mapper that will aid in the motivating scenarios
of §2, we formulate three required outputs for CANvas:
ECU enumeration: The importance of enumerating ECUs
is evident in all of our provided scenarios as seen in Table 1;
enumeration highlights new or absent ECUs. Note that in
all of these scenarios, it is not necessary to know an ECU’s
type (engine, transmission, etc.) or its functionality (fan speed
control, tire pressure sensing, etc.).
Formally, let Ei denote ECU i in a given vehicle that con-
tains n total ECUs that are CAN-enabled. For each Ei in a
vehicle’s set of ECUs, E1:n, the ECU is responsible for sending
a speciﬁc set of m messages labeled with a unique arbitration
ID from the set, IEi,1:m. This set of IDs is unique to Ei and no
other ECU in the network should send the same ID. Given
a CAN trafﬁc dump from a vehicle, CANvas’ enumerator
should determine the number of ECUs, n, and differentiate
between them to determine the set of ECUs E1:n for that par-
ticular vehicle.
Message source identiﬁcation (§5): In the malicious
ECU discovery and continuous network attestation scenarios,
changes to the set of transmitted messages for each ECU can
pinpoint a potentially malicious reconﬁguration. This means
that a goal for our mapper is to map each message ID to its
source ECU.
Formally, given a CAN trafﬁc dump from which we extract
the set of uniquely-ID’d messages where l is the number
of total unique message/arbitration IDs and I1:l is the set of
Figure 4: Each CAN frame is transmitted on the bus
bit-by-bit. A single transmitter wins arbitration and will
listen to receiving ECUs during the ACK slot.
one bus for infotainment components (radio, etc.) and another
for body components (door controller, headlights, etc.). These
CAN buses are usually exposed through a vehicle’s On-Board
Diagnostics (OBD-II) port as detailed in §8.
Message broadcast bus: The CAN protocol [13–15, 32,
33] is deﬁned as a message broadcast bus, which means that
ECUs in the network communicate with each other via mes-
sages. These ECUs are connected to a shared network where
all ECUs can receive all transmissions. Due to the nature of
this broadcast bus, it is not possible to send a message to a spe-
ciﬁc ECU. In the CAN protocol, after a message is broadcast
to the network, devices that correctly receive this message
will acknowledge their reception.
Typical CAN setup: A typical CAN setup for a vehicle
will grant each ECU with a unique set of IDs and each mes-
sage will be labeled with an ID, which is then transmitted
onto the bus. An ECU will be responsible for a subset of
the message IDs seen in the network, and each message ID
will only be sent by a single ECU. Each message is queued
by a software task, process or interrupt handler on the ECU,
and each ECU will queue a message when the message’s
associated event occurs.
CAN frame format: Each CAN message from an ECU
uses its assigned message ID (interchangeably referred to
as the ID or the arbitration ID), which determines its prior-
ity on the CAN bus and may serve as an identiﬁer for the
message’s contents. These messages are transmitted and re-
ceived at the physical layer by an ECU’s CAN controller as
CAN data frames in the format depicted in Figure 4. The key
ﬁelds in the CAN data frame, as relevant to our work, are: the
start-of-frame (SOF) bit, the arbitration/message ID ﬁeld, the
acknowledgement (ACK) slot and the end-of-frame (EOF)
bits.
All ECUs in the network with a queued message simultane-
ously start to transmit their message at the same time. During
the arbitration ID ﬁeld, all but one ECU will eventually stop
transmitting based on CAN’s arbitration resolution. Once an
ECU has won arbitration on the bus, it will be the only sender
and transmit the remainder of the CAN data frame until the
ACK slot. During the ACK slot, the transmitter now becomes
392    28th USENIX Security Symposium
USENIX Association
SOFArbitration IDRTRIDEr0DLCDATACRCACKEOFIFSAs ECUs lose arbitration,a single transmitter will winSingle arbitration winner transmits its dataECUs that correctly receive this message will set the ACK bitunique IDs, we should be able to determine which ECU Ei
sent each unique message. This step is very closely related
to ECU enumeration; once we know which ECU Ei that an
arbitrary ID Ij originates from, we can produce a mapping of
the ID to its source ECU, Ij ∈ Ei. Using this mapping, we can
group the IDs with a common source ECU and complete our
enumeration.
Message destination identiﬁcation (§6): For the continu-
ous network attestation scenario, we want to look for changes
in what messages an ECU correctly receives as this could also
indicate a potentially malicious reconﬁguration. This compo-
nent plays an important role in the lenient ﬁlter identiﬁcation
scenario, where an attacker could shutdown an ECU from an
unintended message recipient.
We assume that at least one ECU in the network will cor-
rectly receive each message in the network. Formally, given
the set of l unique IDs, I1:l, from a trafﬁc dump, we should
be able to determine the set of ECUs, E1:k, that correctly re-
ceive a message labeled with an arbitrary Ij. The expected
output of this component should be a mapping of an ID to its
destination ECUs, Ij,E1:k.
3.3 Challenges in an automotive context
However, to achieve these mapping goals, we encounter two
major challenges to determining the source and destination
ECUs for CAN messages: (a) CAN lacks identifying source
information and (b) CAN implements a broadcast protocol,
which naturally implies that all nodes receive all messages.
We discuss how we approach and solve these challenges in
§5 and §6.
Lack of source information: If a message sent from ECU
Ei has no identifying information, then it is non-trivial to de-
termine that Ei sent the message. Since CAN messages are
considered to be “contents-addressed” [13–15, 33], the value
of the message ID is only related to the message’s data and
priority. In practice, the source ECU has no weight in deter-
mining the chosen arbitration ID for a particular message.
Broadcast protocol: We deﬁne destination as an ECU
that correctly receives a message at the CAN controller level.
Unfortunately, determining which ECUs correctly receive a
message is non-trivial as an ECU connected to the CAN bus
cannot detect which of its messages are received by certain
ECUs. The ACK bit itself only indicates that some ECU
has received the message, not which particular ECU(s) have
received it. As multiple ECUs will set the ACK bit when a
message is received, we cannot simply use this ACK bit to
determine the set of ECUs E1:k that receive an arbitrary Ij.
4 System Overview
In this section, we provide a high-level overview of the CAN-
vas network mapper.
Figure 5: CANvas obtains source mapping results by
step 4. Then, it will enumerate the ECUs in step 5.
CANvas then performs destination mapping and
generates the full map at step 10.
4.1 High-level idea
CANvas mapping overview: We split CANvas into two main
components: (1) a source mapper and (2) a destination mapper.
As detailed in §3, we satisfy our ECU enumeration require-
ment by simply using the output of source mapping. For (1),
we passively collect several minutes of CAN trafﬁc. After
an ofﬂine data collection, the source mapper uses the data to
produce a mapping of each unique CAN ID to its source ECU
and subsequently, by grouping IDs with a shared source, a
list of all active source ECUs on the bus. For (2), we interact
with the network directly and perform an online analysis to
determine message destination. CANvas systematically iso-
lates each ECU, which will most likely cause the vehicle to
enter a temporary error state that the user can reset.
User capabilities: We assume that the user has access to
the OBD-II port of the vehicle and can connect the CANvas
mapper directly to the CAN bus with the ability to read and
write to the bus. We also assume that the vehicle even has a
CAN bus and that the standard CAN protocol is implemented,
which most vehicles will reﬂect [11]. The user should also
be able to transition the vehicle’s ignition switch between the
LOCK, ACC and ON positions as the user will have to reset
the vehicle after each iteration to exit the error state.
Scope and evasion: We assume that the vehicle does not
implement countermeasures that will alter timing of message
transmissions, potentially to prevent intruders from identi-
fying transmitting ECUs. We also assume that the vehicle
cannot identify a maliciously-triggered error and prevent in-
truders from abusing CAN’s error-handling protocol to shut-
down an ECU. The vehicle should not employ an intrusion
detection system capable of preventing an ECU suspension.
We further discuss adversarial evasion and other scenarios for
bus conﬁgurations in §8.
4.2 CANvas workﬂow
The workﬂow of CANvas involves four major steps seen in
Figure 5:
USENIX Association
28th USENIX Security Symposium    393
Record CAN trafficSelect some message IDsUpdate source mapping resultsRun CANvas source algorithmPerform ECU enumerationIdentify atarget ECUShut down other ECUsInject message IDsand check if message correctly receivedUpdate destination mapping results123456897Once all message IDs completedIf more message IDsGenerate fullnetwork map101. Data collection: The CAN pins of the OBD-II port provide
access to the frame-level signals and the message-level
data. CANvas will read this trafﬁc for several minutes and
timestamp each received message. From this trafﬁc, we
will obtain the set of unique message IDs observed in the
network and a set of timestamped data for each ID.
2. Source mapping: With the list of all unique message IDs,
the source mapper will extract the timestamped CAN trafﬁc
for each ID and determine which IDs share the same source
as detailed in §5. To do this, we select two message IDs and
run their CAN trafﬁc through our comparison algorithm,
which will determine if the two IDs originate from the
same ECU.
3. ECU enumeration: Using the set of matching ID pairs from
source mapping, the enumerator will simply group pairs
that originate from the same ECU. The output of this step
will be a list of ECUs and associated source IDs.
4. Destination mapping: Using the ECU enumeration output,
the destination mapper will identify the ECUs that correctly
receive a given message ID. CANvas will isolate a target
ECU by performing a shutdown on all other ECUs, which
we discuss in §6. Once an ECU is isolated, we inject all
unique observed message IDs and determine which ECUs
receive the message.
5 ID Source Mapping
In this section, we describe an approach to map each CAN
message to its source.
Intuition: Due to the absence of source information in a
CAN message, we must rely on some uniquely identifying
characteristic that can be tied to a particular ECU. Following
observations from prior work [11, 29] and CAN documen-
tation [2, 14], we consider clock skew as a candidate ﬁnger-
printing mechanism. In particular, time instants for in-vehicle
ECUs rely on a quartz crystal clock [14], and we can use the
relationship between these clocks to identify a transmitting
ECU. We ﬁrst deﬁne the following terms considering two
clocks, C1 and C2:
• Clock frequency: The number of cycles per true second,
e.g. if C1 operates at 16kHz, then C1 cycles 16,000 times
every one true second.
• Relative clock offset: The difference in time reported by
C1 and C2, e.g. if C1 reports time t1 of 4.1ms and C2
reports t2 of 4.2ms, their offset OC1,C2 is 0.1 ms. Where
only one clock is denoted for relative offset, the other clock
is the clock of the receiving node.
• Relative clock skew: The difference in clock frequencies
of two clocks, or the ﬁrst derivative of offset w.r.t. true time,
e.g. if C1 operates at 16kHz and C1 operates at 16.1kHz,
their skew SC1,C2 is 100Hz. Where only one clock is de-
noted for relative skew, the other clock is the clock of the
receiving node.
Two clocks with a relative clock offset of 0 are consid-
Figure 6: CANvas aims to cluster message IDs with a
similar relative skew or offset.
ered to be synchronized, and two clocks with a nonzero rela-
tive clock skew are said to “skew apart,” or have an increas-
ing relative offset over time [2]. Since the CAN protocol
does not implement a global clock, it is considered to be
unsynchronized as each ECU relies on its own local clock.
Observation 1: The clock offset and skew of an ECU
relative to any other ECU is distinct, thus providing us with
a uniquely identifying characteristic for source mapping.
High-level idea: To map each unique ID to its transmitting
ECU, we break the module into two steps as Figure 6 il-
lustrates: (1) computing either the skew skewf (Ii) or offset
offsetf (Ii) of each ID Ii and (2) then clustering IDs with the
same skew or offset where each cluster denotes a distinct