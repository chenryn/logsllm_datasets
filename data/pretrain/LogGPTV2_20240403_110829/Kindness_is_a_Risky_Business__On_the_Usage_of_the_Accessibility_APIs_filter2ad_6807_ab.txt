data for its state (e.g., the changes in the UI) and requests
from its parent to send the event to interested parties. The
event delivery is based on the binder IPC mechanism via
IAccessibilityManager.
2. Dispatch Events: All generated accessibility events will
be sent to the centralized manager of the Android OS
– AccessibilityManagerService. After some basic
checkings (such as event types), it dispatches events
to each bound accessibility services through binder
IAccessibilityServiceClient.
USENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 263Figure 2: Android accessibility service framework.
Result. The result shows around 0.37% apps (337 / 91,605)
from Google Play use the accessibility APIs. Also, these 337
assistive apps provide 342 accessibility services3. Though the
percentage looks quite low, it does not mean these assistive
apps receive little attention. On the contrary, more than half
of them (56.7%) have over 1 million installations.
4.2 Accessibility Capabilities Usage
To Q2, accessibility services must declare the needed acces-
sibility capabilities (listed in Section §2) in advance and ask
users to conﬁrm, like Figure 1(c).
In particular, every assistive app must prepare a con-
ﬁguration ﬁle for its accessibility service, which declares
some meta information, such as needed capabilities, ex-
pected event types, and timeout. Here we take the conﬁg-
uration ﬁle of Network Master (com.lionmobi.netmaster)
as an example, as shown in Listing 1. The key-value pair
[android:canRetrieveWindowContent="true"] indicates
it needs to invoke the capability of retrieving the active win-
dow content. Note that the default capability of receiving
accessibility events will always be granted automatically.
1 
2 
4 
Figure 3: App analysis.
need to investigate the fundamental reasons of misuse
and the potential security risks.
4 Accessibility APIs Usage
As the ﬁrst step, to understanding the accessibility APIs usage
status, we carried out a large-scale study on Android apps in
the wild. In particular, we try to answer the following three
questions.
Q1: How many apps use the accessibility APIs?
Q2: What kinds of accessibility capabilities are used?
Q3: What are the purposes of using accessibility APIs?
Since we are interested in the usage status of legitimate
apps, an APK sample dataset (91,605 samples, around 1.12
TB) crawled from Google Play was used in our experiment.
These samples were collected in 2018, covering most popu-
lar apps in each category except for games. As preparation,
we used Apktool [9] to disassemble them and obtained the
corresponding manifest and resource ﬁles (the res folder).
To each question, we deployed different analysis approaches,
and Figure 3 illustrates the overall analysis process.
4.1 Accessibility APIs Usage
To Q1, we wrote a shell script to search the services pro-
tected by the BIND_ACCESSIBILITY_SERVICE permission in
manifest ﬁles.
Listing 1: Accessibility conﬁguration of Network Master.
Based on this observation, we obtain the capability usage
data by analyzing the accessibility service conﬁguration ﬁles.
3Note that, one app could provide multiple accessibility services.
AccessibilityManagerServiceAccessibilityManagerTopmost App (View)......AccessibilityServiceAssistive App1AccessibilityServiceAssistive App2Generate & Send EventsDispatch EventsReceive & Handle EventsAndroid OSSystem ServiceAccessibilityEventsViewViewRootImplIAccessibilityServiceClientIAccessibilityManagerService searching  Q1, Accessibility Service UsageConfiguration file  Q2, Accessibility Capabilities Usagestrings.xmlresAndroidManifest.xmlResource filesNLP  Q3, Accessibility PurposescrawlGoogle PlayKey searching264          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX Associationtechniques. We notice that every accessibility service must
provide a description to explain why it needs the accessibil-
ity service, as shown in Figure 1(b). If the assistive app is
legitimate (and appears on Google Play), it has no incentive
to provide a fake description in most cases. Also, since this
description should be understood by ordinary users, it is usu-
ally written in plain languages, like Listing 2 from Network
Master. Also, we give more examples in the Appendix.
1 " Turn it on will help Network Master
stop apps and extend your battery
life . Network Master uses
accessibility service to optimize your
device only . We will never use it to
collect your privacy information . If
you receive warnings about privacy ,
please ignore ."
Listing 2: Service description of Network Master.
Motivated by this observation, the purposes of accessibility
APIs invocations could be extracted through analyzing their
usage descriptions. Here we describe our four-step approach:
1. Service Description Crawling. Through analyzing the
service conﬁguration ﬁle, we could locate and extract
the service description from res/values/strings.xml
(or similar paths). If the description is not in English, we
translate it to English through the Google Translate API.
2. Part-of-Speech Tagging. Part-of-speech (PoS) tagging
is the operation of tagging a word in a text as corre-
sponding to a particular part of speech, based on both
its deﬁnition and context [17]. Since we are concerned
with the actions mentioned in the description, we need
to extract the contained action phrases, like “stop apps”.
With PoS tagging, we could obtain all verbs in a sentence
as preparatory knowledge. In the implementation, we
use spaCy [21] to complete this step, and the result is
shown in Figure 5 (based on Listing 2).
3. Semantic Relationship Extraction. In this step, we ex-
tract the [action + object] relationship from the sentences.
Our method is to build a semantic relationship tree for
each sentence based on spaCy. Then, through breadth-
ﬁrst searching from each verb, we could get the [action
+ object] relationships. As illustrated in Figure 5, we
obtain “help apps”, “stop apps”, and “extend battery life”
from the ﬁrst sentence. Note that, the negative statements
have been excluded in this step because the contained ac-
tions will not happen. Therefore, “(never) collect private
information” is not extracted from the third sentence.
4. Matching and Classiﬁcation. The last step is to build
a series of matching rules for classifying the [action +
Figure 4: Statistics of capabilities usage.
Among the collected 342 accessibility services, we did not
obtain the conﬁguration ﬁles from 8 of them. The reasons
for the failed retrieval are two-fold: (1) some apps declare
the accessibility services in manifest ﬁles but do not imple-
ment them in code; (2) the other apps deploy anti-analysis
protections (e.g., packer), and the resource ﬁles cannot be
disassembled successfully.
Result. The statistical result is plotted in Figure 4. It shows,
besides the default capability of receiving accessibility events
(C0), the capability of retrieving the active window content
(C7) is the most popular one, say 58.8%. The use cases of
the other capabilities are not common. Also, 128 accessibility
services (37.4%) only use the default capability.
Our assessment: Most assistive apps only use the accessi-
bility APIs to receive accessibility events (C0) and execute
automated clicking operations (C7). Also, the deployment
scenarios of some accessibility APIs (C1 and C5) are ex-
tremely rare, of which design may be ill-considered.
4.3 Purposes of Using Accessibility APIs
To Q3, it is indeed a non-trivial task. An intuitive solution is
to analyze the disassembled code of assistive apps. Through
building a context-sensitive call graph, we could track the
accessibility APIs invocation and related code executions.
However, the challenge is how to identify the ultimate pur-
pose of the accessibility code. For example, we could identify
the assistive app injects some clicking actions to the fore-
ground app, but the purpose of the injection operations is
not easy to identify, especially for the various nonstandard
implementations. To achieve it, we have to manually analyze
several implementation samples and build a series of models.
When facing obfuscated apps, it will become a tough process.
Therefore, static code analysis is not practical for this task.
NLP-based Analysis. As an alternative, we designed a light-
weight solution based on natural language processing (NLP)
C0C7C4C3C2C6C5C1Accessibility Capability #020406080100Percentage (%) in Accessibility Services100.0%58.8%5.6%4.4%1.8%1.5%0.6%0.3%C0: Receive AccessibilityEvents C1: Control Display Magnification C2: Perform GesturesC3: Request Enhanced Web AccessibilityC4: Request Filter KeyEventsC5: Request Fingerprint Gestures C6: Request Touch Exploration Mode C7: Retrieve Window Content USENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 265Figure 6: Statistics of purposes.
58 accessibility services (18.8%) are labeled “uncategorized”
because their descriptions do not provide useful information5.
Among the collected descriptions, only 11 apps mention
they are designed for users with disabilities, i.e., 3.2%. It
means most accessibility service invocation behaviors are
suspicious to some extent. Also, according to Android devel-
opers documents: "accessibility services should only be used
to assist users with disabilities in using Android devices and
apps [4]." Here we deﬁne that if an app uses the accessibility
APIs not for helping the disabled people, it should be treated
as a misuse behavior. Note that, even such usage is not for
malicious purposes, it also could be classiﬁed into misuse
behaviors.
Through the categorical data analysis and manual conﬁr-
mation, we identify some typical misuse implementations.
(1) Around 30.8% of assistive apps use the accessi-
bility APIs to obtain system notiﬁcations, which occu-
pies the most signiﬁcant share. Most of them belong to
the launcher, lockscreen, or status bar apps. Though An-
droid has provided the notiﬁcation reading APIs and the
BIND_NOTIFICATION_LISTENER_SERVICE permission in An-
droid 4.3, several assistive apps still keep the accessibility-
based approach to avoid compatibility issues.
(2) Another signiﬁcant category is the purpose of killing back-
ground processes, say 17.9%. The apps falling in category use
the accessibility service to click the “FORCE STOP” button
on the app info menu in the system setting. This method could
terminate a background process and prevent it from restart-
ing again. Also, the regular KILL_BACKGROUND_PROCESSES
permission cannot achieve preventing apps restart. The
FORCE_STOP_PACKAGES permission could achieve it but not
available for third-party apps. Therefore, such implementation
is popular in battery saver or system booster apps.
5For example, “Tap on the top right hand toggle to enable CM
Launcher. Attention: You may receive standard privacy warnings. There’s
no need to worry, no personal data will be collected.” from CM Launcher
(com.ksmobile.launcher).
Remarks: The other three relationship trees are omitted due to space
limitations. The deﬁnitions of grammatical relations (like csubj, aux, ccomp,
and prt) are based on the Stanford typed dependencies [31].
Figure 5: [action + object] relationship extraction.
object] relationship sets. We apply a heuristic method to
build rules4. That is, when an app is not matched by any
rule, we will check its accessibility service description
and add new rules. If an app is classiﬁed incorrectly, we
will adjust the existing rules. The formats of rules are
[v] for matching a single verb, [n] for matching a single
noun, and [v n] for matching action phrases. For example,
the rules for the usage of killing processes contain:
[v kill n app; v stop n app; v block n app; v kill n applic;
v stop n applic; v block n applic; n batteri; n cach; n
acceler; n power]
Note that, we have applied the stemming in match-
ing to avoid the interference of inﬂected words. There-
fore, in this example, “applic” could match “application”
and “applications”. Similarly, “stop” could match “stop”,
“stops”, “stopping”, and so forth.
After the ﬁrst step, we obtained 321 descriptions from 342
accessibility services. Among the failure samples, 8 of them
lacked available conﬁguration ﬁles (the reason has been given
in Section §4.2), and 13 of them did not provide the service
descriptions.
Result. Finally, we classiﬁed the descriptions into 10 cate-
gories, and the result is plotted in Figure 6. Among them,
4We did not use machine learning-based algorithms (like k-means) in this
step because they do not work well on short text due to insufﬁcient features.
helpMasterNetworkappsandextendlifeTurnwillstop.onityourbattery(Turn VERB) (it PRON) (on PART) (will VERB) (help VERB) (Network PROPN) (Master PROPN) (stop VERB) (apps NOUN) (and CCONJ) (extend VERB) (your ADJ) (battery NOUN) (life NOUN) (. PUNCT) (Network PROPN) (Master PROPN) (uses VERB) (accessibility NOUN) (service NOUN) (to PART) (optimize VERB) (your ADJ) (device NOUN) (only ADV) (. PUNCT) (We PRON) (will VERB) (never ADV) (use VERB) (it PRON) (to PART) (collect VERB) (your ADJ) (privacy NOUN) (information NOUN) (. PUNCT) (If ADP) (you PRON) (receive VERB) (warnings NOUN) (about ADP) (privacy NOUN) (, PUNCT) (please INTJ) (ignore VERB) (. PUNCT)help apps | stop apps | extend battery life | uses accessibility service | optimize your device | receive warnings | ignore warningsPart-of-Speech TaggingSemantic Relationship ExtractionObtain Notification30.8%Uncategorized18.8%Kill Processes17.9%Execute Auto-actions7.1%Auto-fill Text5.5%Detect Foreground App4.9%Read Screen Text/URLs4.5%Detect User Actions4.5%Execute Voice Feedback3.2%Install Apps2.6%Obtain NotificationUncategorizedKill ProcessesExecute Auto-actionsAuto-fill TextDetect Foreground AppRead Screen Text/URLsDetect User ActionsExecute Voice FeedbackInstall Apps266          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX Association(3) Executing auto-actions (7.1%) means accessibility ser-
vices could automatically complete a series of clicking actions
without user operations. A typical case is that input method
apps use it to send GIFs. Users with motor impairments also
could beneﬁt such usage.
(4) Auto-ﬁlling text (5.5%) is mainly implemented to automat-
ically ﬁll username and password. It has become the standard
feature in nearly all password manager apps.
(5) Around 4.9% of assistive apps use the accessibility APIs to
detect foreground apps, such as measuring game playing time.
The information about which app is running in the foreground
is sensitive because it may be abused for phishing attacks.
Therefore, Google has replaced the GET_TASKS permission
by the system-level permission REAL_GET_TASKS in Android
5.0 to block accessing from third-party apps. However, with
the accessibility service, assistive apps could still obtain the
foreground app information.
Our assessment: The accessibility APIs have been mis-
used widely. Most assistive apps utilize them to bypass
the permission restrictions of Android OS, which deviates
from the original mission.
5 Design Shortcomings
Motivated by the less optimistic results of app scanning, we
further reviewed the design of Android accessibility support-
ing architecture. Finally, we identify a series of design short-
comings lying in the Android accessibility framework, which
may bring serious security risks.
Design Shortcoming #16. The accessibility service is de-
signed for users with disabilities and, therefore, enhances the
user interactions (i.e., input and output). However, there is
no restriction on the purposes of using the accessibility APIs.
Any app can invoke the accessibility APIs even it is not de-
signed for disabled users. Naturally, in practice, how to use
these APIs depends on the developers’ understanding and
users’ demand.
Since the accessibility APIs are very powerful, the assistive
apps can know the current foreground app, displayed texts,
and user’s actions, and even operate arbitrary other apps. On
the other hand, due to the increasingly strict restriction of the
Android permission system [51], some apps need to ﬁnd a
new code implementation approach to meet the requirements
of their function designs. As a result, through combining the
accessibility APIs and programming tricks, several dangerous
permissions could be bypassed, as summarized in Table 1.
Design Shortcoming #2. The accessibility architecture of
Android is event-driven. The execution logic of accessibil-
ity services only could rely on the received accessibility