those machines reconstruct a single machine, which is an attacker against P ∼=O Q. Conversely,
an attacker against P ∼=O Q may be split into multiple machines, so that a machine computes
a computational model such that(cid:102)tP (cid:54)∼(cid:102)tQ.
the next message given by the attacker to the protocol, those machines providing in the end
Formally, we have the computational soundness of our oracle indistinguishability.
Lemma 29. Given two protocols P, Q, random tapes ρr, ρs, a cryptographic library Mf and
an oracle O, we have:
∀M ⊃ Mf . M |=O(cid:102)tP ∼(cid:102)tQ
⇔
P ∼=O Q
We ﬁnally have a result of computational soundness. We write Ax |= φ if the set of
formulas Ax and the formula ¬φ are inconsistent.
52
Theorem 6. Given P, Q two protocols, O an oracle, A a set of axioms ,Mf a cryptographic
library we assume that:
• A is O-sound w.r.t F = {M ⊃ Mf}
• A |=(cid:102)tP ∼(cid:102)tQ
Then P ∼=O Q
With Lemma 29 we have a computational model M ⊃ Mf such that M |=O (cid:102)tP (cid:54)∼ (cid:102)tQ.
Proof. Let us assume that we have a distinguisher on AO,OP ?Q and that A is O-sound.
As A is O-sound, we also have M |=O A, and this contradicts the fact that the formulas are
inconsistent.
We reduce computational indistinguishability to an inconsistency proof on the one hand
and a soundness proof of the axioms on the other hand.
12 Extension to the Model for Unbounded Replication
Recall that for unbounded replications, we used notations such as x /∈ s, for inﬁnite sequences
of names s. While the previous extension is enough to handle our composition results, we need
for our applications to key exchanges to be able to express formally those predicates. To this
end, for any name n of arity l, we give a formal interpretation to n, that intuitively models
the sequence of names n1,...,1, . . . , nr1,...,rl
of length polynomial in the security parameter.
We deﬁne the syntax and provide variations of the axioms that can be used to reason
in this context. We then provide the concrete semantics so that these axioms are sound as
technical details.
We provide a way to support inﬁnite sequences in the CCSA logic, but note that our
composition framework does not always require inﬁnite sequences. When considering basic
key exchanges, it is enough to use coﬁnite sequences. Basically, if the property
lsid = lsidR
0 then out(k) else out(xI
KE0[if xI
holds even when the attacker can simulate corrupted sessions, it is enough to derive the
security of multiple sessions. It is interesting, as this property does not rely on inﬁnite se-
quences.
0 then out(k) else out(xR
0 )]
0), if xR
lsid = lsidI
To understand this, let us brieﬂy consider a basic unsigned Diﬃe Hellman key exchange.
It must of course not verify the previous property. The exchange shares are ga0, gb0. To
break the previous property, we can give as a share to I the correct gb0, I will then produce
depending on the side k or ga0b0. If we provide R with ga0 × ga0, R does not believe to be
paired with I and it then always output as key g2a0b0. One can then easily distinguish if the
output of R is the square of the output of I.
Basically, this stems from the fact that always outputting the actual key leaks information
to the attacker when agents are not paired together.
For key exchanges with key conﬁrmation, we wish to test the real or random before we
have any authentication (as the authentication may come from the key conﬁrmation). So if
we always leak the key of the agent, the property will not be veriﬁed. However, we do need to
leak the key to enable to go from one session to multiple sessions (to give the attacker enough
information for the simulatability). The idea is then, as expressed in the previous Theorems,
53
to only leak the key when two “honest” parties are paired together. Else, we execute the
key conﬁrmation, which should fail. Here, we have an explicit need to be able to test which
sessions are honest, whether they are corrupted or not, and this for an unbounded number of
sessions. Hence the need for a test based on inﬁnite sequences.
Syntax Recall that names are deﬁned with an arity, where a name n of index arity l can
be indexed by l integers, yielding a distinct copy of the name for each indexes. Moreover, in
a protocol, the index variables occurring in names must all be bound through a parallel or a
sequential binder, and thus once we consider the term corresponding to the protocol in the
CCSA logic, all names appear without index variables.
For any name n of index arity l, the syntax of terms in the CCSA logic only contained all
for k1, . . . , kl ∈ N as symbols of arity 0 (a constants of the term algebra).
of arity 0. We also provide
the copies nk1,...,kl
For each name n, we add to the syntax of terms the symbol seqn
a function symbol ∈ using inﬁx notation, so that t ∈ seqn
is now in the syntax.
Axioms The classical α-renaming axiom still holds, but all copies of a name are renamed
at once. Thus, for any sequences of terms t, and any names n, n(cid:48) of index arity l such that n(cid:48)
does not occur in t, we have:
(1) t ∼ t{seqn (cid:55)→ seqn(cid:48)} ∪ {nk1,...,kl (cid:55)→ n(cid:48)
k1,...,kl
| k1, . . . , kl ∈ N}
Furthermore, we also provide axioms that allow to reason about the membership predicate,
deﬁned as:
(2) nk1,...,kl ∈ seqn ∼ true for any name n and all k1, . . . , kl ∈ N;
(3) n(cid:48)
Remark that as ∈ is a boolean function symbol, it is in contradiction with its negation
∈ seqn ∼ false for any name n(cid:48) distinct of n and all k1, . . . , kl ∈ N.
k1,...,kl
and we trivially have that that for any term t and name n,
t ∈ seqn ∧ t /∈ seqn ∼ false
This is actually what is used in our proofs of indistinguishability, as tagged oracles in our
applications provide messages m such that we have f (m) ∈ seqn
for some function f, and the
security property raises bad if f (m) /∈ seqn
.
should model all sequences seqn = {n1, . . . , np(η)} for any
Semantics The idea is that seqn
polynomial p. Then, if an indistinguishability holds for all such sequences for all polynomials,
it also holds when the polynomial is bigger than the running time of the distinguisher, and
the sequence then models an inﬁnite sequence. To model this, the interpretation of a term
t may now depend on some polynomial p with one indeterminate and with positive integer
coeﬃcients given to the PTTMs, and the interpretation is denoted [[t]]η,σM,p,ρs,ρr,ρO
The indistinguishability predicate ∼ is now interpreted as indistinguishability for all dis-
tinguishers and all polynomials p. Deﬁnition 20 now becomes:
Deﬁnition 30. Given a computational model M, including an oracle O, two sequences of
terms t, u, and an assignment σ of the free variables of t, u to ground terms, we have M, σ |=O
.
54
t ∼ u if, for any strictly increasing polynomial p and every polynomial time oracle Turing
machine AO,
|Pρs,ρr,ρO{AO(p,ρs,ρO)([[t]]σ,ηM,p,ρs;ρr;ρO , ρr, 1η) = 1}
−Pρs,ρr,ρO{AO(p,ρs,ρO)([[u]]σ,ηM,p,ρs;ρr;ρO , ρr, 1η) = 1}|
is negligible in η. Here, ρs, ρr, ρO are drawn according to a distribution such that every ﬁnite
preﬁx is uniformly sampled.
So, we can now assume that the interpretation of terms may depend on a polynomial p.
We previously assumed for a name ni, that the cryptographic library was providing a distinct
for each k ∈ N. However, to
Turing Machine for each copy of the name, i.e., a machine Ank
build a machine that can interpret seqn
, all the copies of the name must be extracted in a
uniform way, so that it is possible to collect all of them in polynomial time. To this end, we
now consider that a cryptographic library provides, for each name ni
of index arity l, a Turing
Machine An that takes as input the security parameter, the random tape ρS and l integers,
and returns a sequence of bitstrings of length η extracted from ρs. Then, the interpretation
of the name nk1,...,kl
, with k1, . . . , kl ∈ N is, given M, η, σ, ρs , ρO and ρr.
[[nk1,...,kl]]η,σM,p,ρs,ρr,ρO := An(1η, ρs, k1, . . . , kl)
The set of all the An should use distinct parts of the random tape ρs, and each An should
return distinct parts of the tape for each sequence of integers given as integers. This can be
done for instance if ρs is seen as a folding of random tapes ρs,n in a single tape, such that
each An only accesses bits corresponds to ρs,n through the inverse folding (this essentially
corresponding to bijective mappings from Nk to N). Then, for each sequence of integers
k1, . . . , kl, An extracts from ρs,n a unique sequence of bits by computing a bijection f from
Nl to N, and extracting the bitstrings of length η at position η × f (k1, . . . , kl).
, for any name
Using this new interpretation for names, we now deﬁne the semantics of seqn
n of index arity l, as, given M (that now contains a polynomial p), η, σ, ρs, ρO and ρr,
[[seqn]]η,σM,p,ρs,ρr,ρO := Aseqn(1η, p, ρs)
where Aseqn
is the machine that:
• contains l nested loops over the l variables c1, . . . , cl all ranging from 1 to p(η);
• at each iteration, simulate An(1η, ρs, c1, . . . , cl) and appends its result to the output
tape.
Remark that given a model M, and thus the machine An, we completely ﬁx the machine Aseqn
.
Essentially, Aseqn
will produce the sequence of bitstring corresponding to the interpretation
of n1,...,1, . . . , np(η),...,p(η).
The CCSA axioms presented previously are still sound in this semantics. Essentially, this
is because when the axiom scheme does not depend on any seqn
in
terms satisfying the guards of the scheme can be simulated by an attacker who samples p(η)
randoms.
, all the occurrences of seqn
Lemma 31. For any computational model in which the interpretation of sign is EUF-CMA,
any name sk, EUF-CMAT,sk is Osign
T,sk -sound even for terms that may depend on some seqn.
55
Proof. We have a term t, a computational model and a polynomial p such that the interpre-
tation of t where all sequences seqn
are of length p(η) contradicts the EUF-CMAT,sk axiom.
The proof is exactly the same as Proposition 27, as we can once again from t build a Turing
Machine that samples all names but sk (and may thus sample p(η) names for each sequence),
and is then able to simulate all operations of t.
This means that we can safely consider a version of EUF-CMAT,sk where for instance
and still have the soundness of the axiom. Remark that this
T (x) is of the form x ∈ seqn
proof would hold similarly for other cryptographic axioms.
We however have to prove the soundness of the axioms that are speciﬁc to seq.
Proposition 32. Axioms (1),(2) and (3) are sound in all models where the interpretation of
∈ is given by the machine A∈(1η, x1, x2) that checks if x1 is a bitstring of length η and returns
true if and only if x1 is a sub-string of x2 starting at a position which is a multiple of η.
Proof.
1. The alpha-renaming axiom is sound, unconditionally. This is similar to the classical
CCSA logic alpha-renaming axiom, which holds as all randomness for a given name
(of any arity) are completely independent and uniform. Replacing all occurrences of a
name by a another fresh one thus yields exactly the same distribution. In essence, we
replace in the interpretation of t all occurrences of An and Aseqn
by An(cid:48) and Aseqn(cid:48) .
As the machines for n(cid:48) did not occur previously in the interpretation of t, we indeed
have that the machines of n and of n(cid:48) produce the same independent distribution for
the interpretation of t.
and seqn
, we have for any polynomial p strictly increasing that for η large
enough, ki ≤ p(η) for 1 ≤ i ≤ l. Thus, for η large enough, the interpretation of seqn
contains the result of An(1η, ρs, k1, . . . , kl) (simulated by Aseqn
), and A∈ always output
true. The advantage of any attacker then becomes 0 which is negligible.
2. Given nk1,...,kl
3. The probability of collision between two sequences of bitstrings of length η is 1
is a uniform sampling of length p(η) × η, and n(cid:48)
any polynomial p, as seqn
independent uniform sampling of length η, the probability that n(cid:48)
at a position which is a multiple of η is the probability 1 − (1 − 1
answer true with only a negligible probability.
2η . For
is an
occurs in seqn
2η )p(η). Thus, A∈ will
k1,...,kl
k1,...,kl
As the interpretation A∈ given in the previous proposition corresponds to the interpreta-
tion required in the application to key exchanges (Section 6), we can indeed use those axioms
in proofs of key exchange security.
References
[1] R. Canetti, Universally Composable Security: A New Paradigm for Cryptographic
Protocols, 2000. [Online]. Available: http://eprint.iacr.org/2000/067
56
[2] R. Canetti and T. Rabin, “Universal Composition with Joint State,” in Advances in
Cryptology - CRYPTO 2003, ser. Lecture Notes in Computer Science, D. Boneh, Ed.
Springer Berlin Heidelberg, 2003, pp. 265–281.
[3] M. Backes, B. Pﬁtzmann, and M. Waidner,
“The Reactive Simulatability (RSIM)
Framework for Asynchronous Systems,” Inf. Comput., vol. 205, no. 12, pp. 1685–1720,
Dec. 2007. [Online]. Available: http://dx.doi.org/10.1016/j.ic.2007.05.002
[4] D. Hofheinz and V. Shoup, “GNUC: A New Universal Composability Framework,”
[Online]. Available:
Journal of Cryptology, vol. 28, no. 3, pp. 423–508, Jul. 2015.
https://doi.org/10.1007/s00145-013-9160-y
[5] M. Backes, M. Dürmuth, D. Hofheinz, and R. Küsters, “Conditional reactive simulatabil-
ity,” Int. J. Inf. Sec., vol. 7, no. 2, pp. 155–169, 2008.
[6] J. Camenisch, S. Krenn, R. Küsters, and D. Rausch, “iUC: Flexible Universal Compos-
ability Made Simple,” Tech. Rep., 2019.
[7] U. Maurer, “Constructive cryptography - A new paradigm for security deﬁnitions and
proofs,” in TOSCA, ser. Lecture Notes in Computer Science, vol. 6993. Springer, 2011,
pp. 33–56.
[8] C. Brzuska, M. Fischlin, N. P. Smart, B. Warinschi, and S. C. Williams, “Less is
more: relaxed yet composable security notions for key exchange,” International Journal
of Information Security, vol. 12, no. 4, pp. 267–297, Aug. 2013. [Online]. Available:
https://doi.org/10.1007/s10207-013-0192-y
[9] B. Blanchet, “Composition Theorems for CryptoVerif and Application to TLS 1.3,” in
31st IEEE Computer Security Foundations Symposium (CSF’18). Oxford, UK: IEEE
Computer Society, Jul. 2018, pp. 16–30.
[10] C. Brzuska, A. Delignat-Lavaud, C. Fournet, K. Kohbrok, and M. Kohlweiss, “State
separation for code-based game-playing proofs,” in ASIACRYPT (3), ser. Lecture Notes
in Computer Science, vol. 11274. Springer, 2018, pp. 222–249.
[11] G. Bana and H. Comon-Lundh, “A computationally complete symbolic attacker for
equivalence properties,”
in Proceedings of the 21st ACM Conference on Computer
and Communications Security (CCS’14), G.-J. Ahn, M. Yung, and N. Li, Eds.
Scottsdale, Arizona, USA: ACM Press, Nov. 2014, pp. 609–620. [Online]. Available:
http://www.lsv.ens-cachan.fr/Publis/PAPERS/PDF/BC-ccs14.pdf
[12] T. Ylonen and C. Lonvick, “The Secure Shell (SSH) Transport Layer Protocol.” [Online].
Available: https://tools.ietf.org/html/rfc4253
[13] R. Küsters and D. Rausch, “A Framework for Universally Composable Diﬃe-Hellman
IEEE
Key Exchange,” in IEEE 38th Symposium on Security and Privacy (S&P 2017).
Computer Society, 2017, pp. 881–900.
[14] G. Scerri and S.-O. Ryan,
Computational Security.”
Available: https://hal.inria.fr/hal-01417123
“Analysis of Key Wrapping APIs: Generic Policies,
IEEE Computer Society, Jun. 2016, pp. 281–295. [Online].
57
[15] H. Comon and A. Koutsos,
in Proceedings of
Protocols,”
Symposium (CSF’17), B. Köpf and S. Chong, Eds.
USA: IEEE Computer Society Press, Aug. 2017, pp. 100–114.
http://ieeexplore.ieee.org/document/8049714/
“Formal Computational Unlinkability Proofs of RFID
the 30th IEEE Computer Security Foundations
Santa Barbara, California,
[Online]. Available:
[16] G. Bana, R. Chadha, and A. K. Eeralla, “Formal Analysis of Vote Privacy Using
Computationally Complete Symbolic Attacker,” in Computer Security - 23rd European
Symposium on Research in Computer Security, ESORICS 2018, Barcelona, Spain,
September 3-7, 2018, Proceedings, Part II, 2018, pp. 350–372.
[Online]. Available:
https://doi.org/10.1007/978-3-319-98989-1_18
[17] “ISO/IEC 9798-3:2019,
3: Mechanisms using digital
//www.iso.org/standard/67115.html
IT Security techniques – Entity authentication – Part
https:
signature techniques.”
[Online]. Available:
[18] C. Brzuska, M. Fischlin, B. Warinschi, and S. C. Williams,
“Composability of
Bellare-rogaway Key Exchange Protocols,” in Proceedings of the 18th ACM Conference
on Computer and Communications Security, ser. CCS ’11. New York, NY, USA: ACM,
2011, pp. 51–62. [Online]. Available: http://doi.acm.org/10.1145/2046707.2046716
[19] M. Fischlin and F. Günther, “Multi-Stage Key Exchange and the Case of Google’s
QUIC Protocol,” in Proceedings of the 2014 ACM SIGSAC Conference on Computer
ser. CCS ’14. New York, NY, USA: ACM,
and Communications Security,
2014, pp. 1193–1204, event-place:
[Online]. Available:
http://doi.acm.org/10.1145/2660267.2660308
Scottsdale, Arizona, USA.
[20] R. Küsters and M. Tuengerthal,
in Proceedings of
Session Identiﬁers,”
and Communications Security,
2011, pp. 41–50, event-place: Chicago,
//doi.acm.org/10.1145/2046707.2046715
“Composition Theorems Without Pre-established
the 18th ACM Conference on Computer
ser. CCS ’11. New York, NY, USA: ACM,
http:
[Online]. Available:
Illinois, USA.
[21] N. Durgin, J. Mitchell, and D. Pavlovic, “A Compositional Logic for Proving Security
Properties of Protocols,” J. Comput. Secur., vol. 11, no. 4, pp. 677–721, Jul. 2003.
[Online]. Available: http://dl.acm.org/citation.cfm?id=959088.959095
[22] A. Datta, A. Derek, J. C. Mitchell, V. Shmatikov, and M. Turuani, “Probabilistic
Polynomial-Time Semantics for a Protocol Security Logic,” in Automata, Languages and
Programming, ser. Lecture Notes in Computer Science, L. Caires, G. F. Italiano, L. Mon-