           0 agents currently active
    (Empire) > listeners
    [!] No listeners currently active 
    (Empire: listeners) > uselistener http
    (Empire: listeners/http) > info
        Name: HTTP[S]
    Category: client_server
    Authors:
      @harmj0y
    Description:
      Starts a http[s] listener (PowerShell or Python) that uses a
      GET/POST approach.
    HTTP[S] Options:
      Name              Required    Value                            Description
      ----              --------    -------                          -----------      SlackToken        False                                        Your SlackBot API token to communicate with your Slack instance.
      ProxyCreds        False       default                          Proxy credentials ([domain]username:password) to use for request (default, none, or other).
      KillDate          False                                        Date for the listener to exit (MM/dd/yyyy).
      Name              True        http                             Name for the listener.
      Launcher          True        powershell -noP -sta -w 1 -enc   Launcher string.
      DefaultDelay      True        5                                Agent delay/reach back interval (in seconds).
      DefaultLostLimit  True        60                               Number of missed checkins before exiting
      WorkingHours      False                                        Hours for the agent to operate (09:00-17:00).
      SlackChannel      False       #general                         The Slack channel or DM that notifications will be sent to.
      DefaultProfile    True        /admin/get.php,/news.php,/login/ Default communication profile for the agent.
                                    process.php|Mozilla/5.0 (Windows
                                    NT 6.1; WOW64; Trident/7.0;
                                    rv:11.0) like Gecko
      Host              True        http://172.17.0.2:80             Hostname/IP for staging.
      CertPath          False                                        Certificate path for https listeners.
      DefaultJitter     True        0.0                              Jitter in agent reachback interval (0.0-1.0).
      Proxy             False       default                          Proxy to use for request (default, none, or other).
      UserAgent         False       default                          User-agent string to use for the staging request (default, none, or other).
      StagingKey        True        G:IfjvH;Z#J|]FSs9XU~},D{[)8yuR2n Staging key for initial agent negotiation.
      BindIP            True        0.0.0.0                          The IP to bind to on the control server.
      Port              True        80                               Port for the listener.
      ServerVersion     True        Microsoft-IIS/7.5                Server header for the control server.
      StagerURI         False                                        URI for the stager. Must use /download/. Example: /download/stager.php
    (Empire: listeners/http) > execute
    [*] Starting listener 'http'
    [+] Listener successfully started!
    (Empire: listeners/http) >
了解这些命令后，我们基本上就可以启动并运行目标环境了。Docker中还有一些高级功能，我们会在接下来的CobaltStrike内容中加以介绍。
## 五、CobaltStrike Docker
红方通常会使用CS（CobaltStrike）作为首选的工具/植入程序。因此我决定使用Dockerfile来构建一个基础镜像。最近CS在Docker
Hub上的许可/试用方案有了些变化，这也是我为什么不使用官方镜像的原因所在。不过不用担心，在本地构建一个Docker镜像并没有那么复杂。我已经公开了相关的Dockerfile，大家可以访问[此处](https://github.com/killswitch-GUI/CobaltStrike-ToolKit/blob/master/Dockerfile)了解具体内容。整个过程中需要注意一些关键步骤，不过最重要的是构建过程中需要将CS许可秘钥传递给Dockerfile。
首选，我们需要clone这个Dockerfile。
    git clone https://github.com/killswitch-GUI/CobaltStrike-ToolKit.git
接下来我们开始构建镜像，将`cskey`替换为我们自己的许可秘钥。这个过程中会下载一些文件，我们需要稍等片刻，放松一下。
    docker build --build-arg cskey="xxxx-xxxx-xxxx-xxxx" -t cobaltstrikecs .
像往常一样，在Dockerfile中，我将ENTRYPOINT设置为`teamserver`，接下来你可以在镜像字符串后传入所需的参数：
    docker run -d -p 192.168.2.238:50050:50050 --name "war_games"  cobaltstrikecs 192.168.2.238 password
这里我们使用了两个新的概念：
1、`-d`：守护模式，这样我们就可以后台启动这个容器。
2、`--name`：命名这个容器，这样我们可以在容器启动后使用这个名称来引用该容器。
启动容器后，我们可以查看日志，监控CS实例的运行状态，具体命令为：`docker logs -f "war_games"`。
    alexanders-MacBook-Pro:Dockerfiles alexanderrymdeko-harvey$ docker logs -f "war_games"
    [*] Generating X509 certificate and keystore (for SSL)
    [+] Team server is up on 50050
    [*] SHA256 hash of SSL cert is: 2013748909fd61ff687711688e5dc4306d0fb1c3afa8ece4f30630c31ba1557c
如果想要访问该实例，我们可以使使用`exec`命令，如下所示：
    alexanders-MacBook-Pro: Dockerfiles alexanderrymdeko-harvey$ docker exec -ti war_games bash
    root@bb7d339b3699:/opt/cobaltstrike#
如果要终止该容器，使用如下这条命令即可：
    docker kill war_games
**CS Volume**
对了，别忘了为CS实例创建一个容器，否则我们会丢失掉所有的数据：
    docker create -v /opt/cobaltstrike --name cs-data cobaltstrikecs
接下来，我们可以使用这个volume来启动该实例：
    docker run -d --volumes-from cs-data -p 192.168.2.238:50050:50050 --name "war_games"  cobaltstrikecs 192.168.2.238 password