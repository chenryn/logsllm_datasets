以下是优化后的文本，使其更加清晰、连贯和专业：

---

### 10.1 监控RabbitMQ：密切关注你的warren

#### 10.1.1 API健康检测程序

在API健康检测程序中，首要任务是设置退出代码常量并解析命令行参数。该健康检测程序接收与AMQP健康检测程序相同的参数，并对API服务器的`server`和`port`进行相应的更改（替换RabbitMQ服务器的配置）。

与AMQP健康检测程序不同的是，你需要构建一条到API服务器的HTTP连接，而不是AMQP连接。在构建好HTTP连接后，为`aliveness-test`创建请求路径，并将vhost附加在路径末尾以创建测试队列。由于可能存在名为“/”（HTTP路径分隔符）的vhost，因此需要在添加到路径之前使用`urllib.quote`对vhost进行转义。`safe=""`参数告诉`urllib.quote`方法无一例外地转义所有特殊字符（默认情况下，`urllib.quote`不会转义“/”字符）。同时，因为通过API获取信息而不修改或创建内容，所以将请求方法设定为GET。

在创建了HTTP连接和请求路径之后，编码凭证并将请求发送到API服务器。如果无法连接到API服务器，程序将返回`EXIT_CRITICAL`作为状态退出代码。由于从技术上讲，你只知道API服务器宕机而不能确定RabbitMQ服务器的状态，可以返回`warning`或`unknown`状态。但由于API是RabbitMQ的一个插件，API服务器宕机通常意味着RabbitMQ服务器也宕机。

假设你能连接到API服务器并发送请求，你会接收到一个响应对象。响应对象将HTTP状态码存储在`response.status`中，并且可以通过`response.read()`访问响应内容。主要关注HTTP状态码，如果`aliveness-test`方法调用成功，它会返回200的HTTP状态码。任何高于299的状态码要么代表错误，要么是发送给客户端的额外指令。因此，如果收到大于299的HTTP状态码，你可以返回`critical`状态（`EXIT_CRITICAL`）给Nagios，表明健康检测失败。否则，方法调用成功，服务器工作正常。成功调用返回的正文内容是简单的JSON格式字符串`{"status": "ok"}`，可以忽略或附加到响应中。

#### 示例

针对本地开发机器运行API ping健康检测：

```sh
> python api_ping_check.py localhost:55672/ guest guest
OK: Broker alive: {"status": "ok"}
> echo $?
0
```

健康检测程序正确检测出RabbitMQ服务器正常运行，并能够生产和消费消息。但如果模拟节点故障会怎样呢？

```sh
> rabbitmqctl -n rabbit@Phantome stop_app
Stopping node rabbit@Phantome ...
...done.
> python api_ping_check.py localhost:55672/ guest guest
CRITICAL: Broker not alive: 500 Internal Server Error
Internal Server Error
The server encountered an error while processing this request:
{exit, {aborted, {no_exists, [rabbit_user, >]}}, 
 [(mnesia, abort, l), 
  (rabbit_misc, dirty_read, l), 
  (rabbit_auth_backend_internal, internal_check_user_login, 2), 
  (rabbit_access_control, '-check_user_login/2-fun-0-', 4), 
  (lists, foldl, 3), 
  (rabbit_mgmt_util, is_authorized, 3), 
  (webmachine_resource, resource_call, 3), 
  (webmachine_resource, do, 3)]}
mochiweb+webmachine webserver
> echo $?
2
```

尽管Nagios只会读取退出代码（2）来判定健康检测是否失败，但它会将生成的告警内容从`CRITICAL: ...`到`...`全部发送给你。`aliveness-test`调用返回的内容以及健康检测程序逐字输出的内容都是由于API无法与RabbitMQ通信而生成的内部Erlang崩溃报告。因此，如果有人关闭了RabbitMQ节点，不仅监控系统能及时通知你，还会提供详细的Erlang崩溃报告，帮助你追踪问题原因。

现在，你不仅有能力监控RabbitMQ是否能接收连接，还能检测其是否能成功路由消息。但如何防止队列持久化属性被意外修改而导致消息丢失？编写一个监控队列（或交换器）配置的健康检测即可。

#### 10.1.4 监控配置文件修改

验证RabbitMQ健康运行只是确保消息通信架构可靠性的一部分。还需要确保消息通信结构配置没有遭受意外修改，从而避免应用消息丢失。例如，假设开发人员Rolf正在部署遛狗应用的最新版本。由于你明智地编写了应用来配置所需的队列、交换器和绑定，不必担心RabbitMQ服务器缺失消息通信结构的部分会在启动时崩溃。但今天早上自动化配置引发了问题，昨晚Rolf解决了DogWalker 10.0最后一个bug并工作到很晚，不小心删除了应用启动时创建`walking_orders`队列的代码。发现问题后，他在提交产品代码库前重新添加了队列声明，但忘记将其设置为可持久化。这会导致生产环境中供电故障时所有队列上的遛狗订单消失。然而，由于队列存在且名称正确，你不会发现任何问题，直到供电故障时为时已晚。

因此，需要创建健康检测来监控队列配置，在队列发生变化时主动收到通知。如图10.1所示。

![队列配置健康检测](image_url)

在RabbitManagement插件和API出现之前，很难监控队列（或交换器）的配置。唯一的方法是尝试用对应的参数重新声明队列，并相信RabbitMQ会在声明的配置与现存队列的配置不同时加以拒绝。这种方法的问题在于，通过声明队列的方式来检测故障会主动更改消息通信结构。幸运的是，通过使用现成的RabbitMQ API，有了更好的解决方案。

RabbitManagement API提供了一个方法允许你查看任何vhost上的任何队列：`/api/queues//`。不仅可以查看配置详情，还可以查看队列的数据统计，例如队列消耗的内存或平均消息吞吐量。以下示例使用curl查看“/” vhost（注意“/”在URL中会被编码为%2F）上样本队列`my_queue`的配置和状态。

```sh
$ curl -i -u guest:guest http://localhost:55672/api/queues/%2F/my_queue
HTTP/1.1 200 OK
Server: MochiWeb/1.1 WebMachine/1.7 (participate in the frantic)
Date: Tue, 16 Aug 2011 23:25:14 GMT
Content-Type: application/json
Content-Length: 670
Cache-Control: no-cache

{
  "memory": 8400,
  "idle_since": "2011-8-16 17:24:46",
  "exclusive_consumer_pid": "",
  "exclusive_consumer_tag": "",
  "messages_ready": 0,
  "messages_unacknowledged": 0,
  "messages": 0,
  "consumers": 0,
  "backing_queue_status": {
    "q1": 0
  },
  "name": "my_queue",
  "vhost": "/",
  "durable": true,
  "auto_delete": false
}
```

如果队列的`auto_delete`标记不正确，返回`unknown`代码。

```python
if response.status > 299:
    print("UNKNOWN: Unexpected API error: %s" % response.read())
    exit(EXIT_UNKNOWN)
```

通过这种方式，你可以确保队列配置符合预期，并在发生意外修改时及时收到通知。