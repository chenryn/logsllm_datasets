47895 ￥ 64512
15.72 b1k_2191483348
5 , 130
Java
47906 64512
10.34 b1k_2191484018
5,134
java
47799¥504
13.73 b1k_2191482039_1117768266,meta
5, 303
java
47984
1R. 30
12.50 spark=core_2.11-2,3.2..
5.383
java
47899
64512
11.27 b1_219143378
5, 773
Java
47998
￥ 64512
10.83 b1k_2191487052
[..]
This output shows a Java process encountering writes as slow as 34 milliseconds, and displays the
The *TIME(s) column reveals that these slow reads and writes were not very frequentonly a few
names of the files read and written. The direction is the “D’ column: *R" for read or *W" for write.
per second.
Synchronous reads and writes are important as processes block on them and suffer their latency
directly. The introduction to this chapter discussed how file system analysis can be more relevant
than disk I/O analysis, and this is an example case. In the next chapter, disk I/O latency will be
measured, but at that level, applications may not be directly affected by latency issues. With disk
I/O, it's easy to find phenomena that look like problems of latency but aren’t really problems at
all. However, if fileslower(8) shows a latency problem, it's probably an actual problem.
Synchronous reads and writes will block a process. It is likely—but not certain—that this also
causes application-level problems. The application could be using a background I/O thread
for write flushing and cache warming, which is performing synchronous I/O but without an
application request blocking on it.
This tool has been used to prove production latency originated from the file system, and in other
cases exonerate the file system: showing no I/O was slow as was assumed.
fileslower(8) works by tracing the synchronous read and write codepath from VFS. The current
implementation traces all VFS reads and writes and then filters on those that are synchronous, so
the overhead may be higher than expected.
19 0rigin: I frst created this for BCC on 6-Feb-2016, and the bpftrace version for this book on 31-Ja-2019.
---
## Page 344
8.3  BPF Tools
307
BCC
Command line usagec
filesloxer [options](nin_ms]
Options include:
Aquo ssaoond sug ansea :aIa d-
The min_ms argument is the minimum time in milliseconds. If o is provided, then all
synchronous reads and writes are printed out. This output may be thousands of lines per second,
depending on their rate, and unless you have a good reason to see them all, that's not likely
something you want to do. A default of 10 milliseconds is used if no argument is provided.
bpftrace
The following is the code for the bpftrace version:
+1/usr/local/bin/bpft.race
include 
BEGIN
printf(*e=8s 16s =6s T =7s 47s s^o*,rrMEns*, "cor*, *PID*,
kprobe:nev_sync_read,
kprobe:nev_sync_vrite
$file = (struct file *)arg0
if ($fi1e=>f_path.dentry->d_name.len != 0) ↑
ename[tid] = $file>f_path,dentry>d_nane,name
esize[tid] = arg2;
rsoasu - [PTa|x948
kretprobe:nev_sync_read
/[p]re=8/
$read_ns = (nsecs - @start [tid]) / 1000000;
if ($read_ns >= 1)(
printf (*=Bd 16s l=6d R §7d $7d sn*, n.secs / 1000000,
comm, pid, esize [tid] 。 $read_ns, str (8name[tid] )1 
delete (8start[tid]) : delete (8size [tid]l  delete (enane[tid]) ;
---
## Page 345
308
Chapter S File Systems
kretprobe:nev_sync_vrite
/Bstaxt [tid]/
f0000o0t / I[pT]xes8 - soesu) = su"eTang
if (xrite_ms >= 1) 
pxint (*s=Bd 416s =6d μ 4=7d s7d 4s,n*, n.secs / 1000000,
comm, pid, esize[tid] , $vrite_ms, str (8nane [tid]1 
delete (θstart[tid]) : delete (8size [tid]l  delete (ename[tid] ) ;
END
1
clear (Bstart): cIear (Bsize); clear (@nane)
This uses kprobes to trace the new_sync_read() and new_sync_write() kernel functions. As kprobes
is an unstable interface, there's no guarantee that these will work across different kernel versions,
and I've already encountered kernels where they are not available for tracing (inlined). The BCC
version employs the workaround, by tracing higher-level __vfs_read( and _vfs_write( internal
functions and then filtering for those that are synchronous.
8.3.13 filetop
filetop(8)° is BCC tool that is like top(1) for files, showing the most frequently read or written
filenames. Example output on a 36-CPU production Hadoop server:
+ filetop
Tracing... Output every 1 secs, Hit Ctzl-C to end
02:31:38 1oadavg: 39.53 36.71 32.66 26/3427 30188
7ID
113962 ava
COMX
READS
KRITES R_Kb
I_Kb
T FILE
15171
0
60684
R part=00903-37d00fed-ecf94.. 
23110java
丁
891.
R. tenp_1ocal_6ba99afa-351d-4...
25836javs
48
3072
Q
R. msp_4141.out
26890java
46
D
2944
1n0*z8sdeu 
26788
Javs
42
2688
R aap_4363,out
2678B
java
18
1152
R. map_4756,out.erged
70560
Java
130
1085
R teng_local_1bd4386bb33c4..*
70560
java
130
0
1079
R. tenp_1ocal_a3938a849f23-4...
BAeC09S0L
127
0
1053
R. teng_local_3c9f655b-0fe4-4....
26890
java
16
0
1024
R. map_11374.out,nerged
26890
javs
15
0
960
Q
R map_5262,out.merged
20 Origin: I crested this for BCC on 6-Feb-2016, inspired by top(1) by William Lefebre.
---
## Page 346
8.3 BPF Tools
309
26788java
15
960
R map_20423.out,nerged
eae88197
14
0
B96
R. map_43T1,out.nerged
26890javs
1. 4
0
896
26890java
0
R. msp_10138-out.merged
13
+7
B32
R. map_4991,out.nerged
25836javs
13
832
Q
R map_3994,out.merged
eae[ 9585Z
1.3
B32
R. map_4651,out.nerged
25836jav8
13
832
R. map_16267,out.nerged
13
0
832
0
R. map_15255-out,nerged
26788Java
2
768
：
R msp_6917,out.merged
[..-]
By default, the top twenty files are shown, sorted by the read bytes column, and the screen
redraws every second. This particular output shows that a *part-00903-37d00f8d° file (file
name truncated) had the most read bytes at around 60 Mbytes during that one-second interval,
from about 15k reads. Not shown is the average read size, but that can be calculated from those
numbers to be 4.0 Kbytes.
This tool is used for workload characterization and general file system observability. Just as you
can discover an unexpected CPU-consuming process using top(1), this may help you discover an
unexpected I/O-busy file.
filetop by default also only shows regular fles,2 The a option shows all files, including TCP sockets:
1[iletop -a
[..]
7I0
COH
READS
KRITES R_Kb
I_Kb
 FILE
32857javs
ene[c6so2t
718
0
15756
S TCP
1.2
0
12288
R. tenp_1ocal_3807d4ca-b41e-3..
32770javs
502
0
10118
S TCP
32507
java
199
0
4212
0
S TCP
88371
java
186
0
1775
R. teng_1ocal_215ae692-35a42..*
[..-]
The columns are:
peau :IL 
• COMM: Process/thread name
 READS: Number of reads during interval
• WRITES: Number of writes during interval
 R_Kb: Total read Kbytes during interval
• W_Kb: Total write Kbytes during interval
• T: Type: R == Regular file, S == Socket, O == Other
*FILE: Filename
21. *regular* refers to the file type: DT_REG in
s, DT_BUK
for block special devices, etc.
---
## Page 347
310
Chapter S File Systems
This works by using kprobes to trace the vfs_read( and vfs_write( kernel functions. The file type
is read from the inode mode, via the S_ISREG() and S_ISSOCK( macros.
The overhead of this tool, like earlier ones, can begin to be noticeable because VFS reads/writes
can be frequent. This also traces various statistics, including the filename, which makes its
overhead a little higher than for other tools.
Command line usage:
filetog[options][interral][count]]
Options include:
• C: Don’t clear the screen: rolling output
r Rous: Print this many rows (default 20)
•-p PID: Measure this process only
The C option is useful for preserving the terminal’s scroll-back buffer, so that patterns over time
can be examined.
8.3.14 writesync
writesync(8)2 is a bpftrace tool that traces VFS writes to regular files and shows which were using
a synchronous write flag (O_SYNC or O_DSYNC). For example:
vritesyne.bt
Attach.ing 2 probes...
Tracing VFs vzite sync flags... Hit Ctel-C to end.
eregular[cronolog, output_20190520_06.1og] : ]
@xegulaz[Vx Thxead, gc.1og] : 2
eregular[cronolog, catalins_20190520_06.out] : 9
@xegulaz[toncat-exec-142, toncat_access,1og] : 15
[...]
syne[d, outfile]: 100
This output shows shows a number of regular writes to files, and one hundred writes from a *dd*
process to a file called °outfile1.* The dd(1) was an artificial test using:
Gd 1f=/dev/zezo of=outfile oflag=aync count=100
Synchronous writes must wait for the storage I/O to complete (write through), unlike normal
I/O which can complete from cache (write-back). This makes synchronous I/O slow, and if the
aouewnopad asosdun Apeau8 ueo a Susaotuan Kessaatrun s eg snouorqouAs
22 Origin: I crested it for this book on 19-May-2019,
---
## Page 348
8.3  BPF Tools
311
The source to writesync(8) is:
#1/usx/local/bin/bpEtrace
#Include 
include 
BEGIN
1
printf(*Tracing Vrs vrite sync flags... Hit Ctel-C to end.n*
kprobe:vfs_vr1te,
kprobe:vfs_vritev
$file = (struct file *)arg0;
nane = $f11e=>f_path,dentry=>d_nane,nane
if (1($file=>f_inode=>i_mode >> 12) ≤ 15) == DT_REG) [
f (fi1e=>f_flags s o_DsYNC) (
Bsync[comm, ste ($nane) ] = count(1
] else |
Bregular [comn, str ($nane) ] = count() 
This checks that the file is a regular file (DT_REG), and then checks for the presence of the
O_DSYNC flag (which is also set by O_SYNC).
8.3.15 filetype
filetype(8)² is a bpftrace tool that traces VFS reads and writes along with the type of the fle and
process name. For example, on a 36-CPU system during a software build:
+filetype.bt
Attaching 4 probes...
[regular, vfs_read, expr] : 1
[character, vfs_read, bash[: 10
[..]
e[socket, vfs_vrite, sshd]: 435
[fifo, vfs_vrite, cat]: 464
23 0rigin: I created it for this book on 2-Feb-201.9.
---
## Page 349
312
Chapter S File Systems
[regular, vfs_vrite, sh]: 697
[regulax, vfs_urite, as: T85
[regular, vfs_read, objtool]: 932
e[fifo, vfs_read, nake]: 1033
[regular, vfs_read, as] : 1437
[regulax, vfs_read, gcc]: 1563
[regular, vfs_read, cat] : 2196
[regulax, vfs_read, sh] : 8391
9 [regular, vf s_read, fixdep] : 11299
e[fifo, vfs_read, sh] : 15422
[regular, vfe_read, ce1|: 16851
[regulax, vfs_read, nake]: 39600
This output shows that most of the file types were *regulara, for normal files, which were read and
written by build software (make(1), cc1(1), gcc(1), etc.). The output also includes socket writes for
sshd, which is the SSH server sending packets, and character reads from bash, which would be the
bash shell reading input from the /dev/pts/1 character device.
The output also includes FIFO?* reads and writes. Here's a short demo to illustrate their role:
vindov1s tar ef - dix1 1 gzip > diz1.tar-gz
vindox2f filetype.bt
Attaching 4 pzobes...
[.--]
[regular, vfs_vrite, gzip] : 36
e[fifo, vfs_vzite, tar]: 191
[fifo, vfs_read, gzip]: 191
[regulax, vfa_read, taz: 425
The FIFO type is for shell pipes. Here the tar(1) command is performing reads of regular files, and
then writing them to a FIFO. gzip(1) is reading from the FIFO, and writing to a regular file. This is
all visible in the output.
The source to filetype(8) is:
+1/usr/local/bin/bpftrace
include 
BEGIN
// from uapi/1inux/stat.ht
f1ex0s =[000x]d/8
rxuTT。 - [0o0x0]ad8
24 FIFO: frstin, first-out special ffe (named pipe). See the FIFO(7) man page
---
## Page 350
8.3 BPF Tools
313
Btype [0xB000] - *regular*;
ota - [0009x0]ed/8
Btype [0x4000] - *directory*;
xeqsexruo, - [0oozx0]d/8
Btype[0x1000] = *fifo";