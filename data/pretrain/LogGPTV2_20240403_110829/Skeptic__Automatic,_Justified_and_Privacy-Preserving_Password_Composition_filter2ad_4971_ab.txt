The probability D(p) is the probability that a random user selects
password p. We define the magnitude of the distribution induced
by I as the number of passwords in I. That is, mag(D) = N .
3.2 Specifying Password Composition Policies
Our methodology is not tied to any specific representation of pass-
word composition policies. Similar to Blocki et al. [4], we use a
set-theoretic notation, with p ∈ ϕ indicating that a password p is
permitted by a password composition policy ϕ. Later on in Sec-
tion 4.1, when we describe our encoding of password composition
policies in Skeptic, we will demonstrate that this affords us the
power to encode password composition policies for arbitrary soft-
ware, and scaffold code for doing so automatically.
3.2.1 Policies studied in this work. We selected and modelled a
selection of password composition policies based on those by Shay
et al. [31] and Weir et al. [36], and follow the naming convention
used by Shay et al. [31] as follows:
• basic7, basic8, basic9, basic12, basic14, basic16, basic20:
to comply with policy basicN, password must be N characters
or greater in length. No other requirements.
• digit7, digit8, digit9, digit10: to comply with policy digitN,
password must be N characters or greater in length, and
contain at least one numeric digit.
• upper7, upper8, upper9, upper10: to comply with policy
upperN, password must be N characters or greater in length,
and contain at least one uppercase letter.
• symbol7, symbol8, symbol9, symbol10: to comply with
policy symbolN, password must be N characters or greater in
length, and contain at least one non-alphanumeric character.
• 2word12, 2word16: to comply with policy MwordN, pass-
word must be N characters or greater in length and consist
of at least M strings of one or more letters separated by a
non-letter sequence.
• 2class12, 2class16, 3class12, 3class16: to comply with pol-
icy NclassM, password must be M characters or greater in
length and contain at least N of the four character classes
(uppercase letters, lowercase letters, digits and symbols).
• dictionary8: to comply with policy dictionaryN password
must be N characters or greater in length. When all non-
alphabetic characters are removed the resulting word cannot
appear in a dictionary, ignoring case (we used the Openwall
“tiny” English wordlist [28]).
• comp8: to comply with policy compN password must com-
ply with dictionaryN and additionally must contain upper-
case letters, lowercase letters, digits and symbols. Replicates
the NIST comprehensive password composition policy [7].
3.3 Modelling Password Reselection
If a potential user is forbidden from selecting their preferred pass-
word by the password composition policy, they must select a dif-
ferent, compliant password or find themselves unable to use the
service at all. In this way, a password composition policy induces a
change in the probability distribution of passwords on the system.
In this section, we consider the change induced in a probability
distribution D by imposing a password composition policy ϕ. In
what follows, we write supp(D) to denote the support of distribution
D, that is:
and we write suppϕ(D) to denote the support of D restricted to
passwords that comply with ϕ:
supp(D) = { p | D(p) ≥ 0 }
suppϕ(D) = { p | p ∈ supp(D) ∧ p ∈ ϕ }
We assume that suppϕ(D) will always be non-empty.
The change induced in D by ϕ can be seen as a redistribution
of the probabilities associated with passwords that do not comply
with the password composition policy. The sum of the probabilities
that need to be redistributed is denoted as surplus(D, ϕ) and defined
as:
surplus(D, ϕ) = 
D(p)
p∈supp(D)
p(cid:60)ϕ
Figure 1 shows a minimal example of a probability distribution
derived from a hypothetical password dataset consisting of 31 user-
chosen passwords, of which 5 are unique, labelled P1 to P5 with
frequencies following the powers of 2. That is to say, the frequency
f req(Pn) of password Pn is 25−n and the probability D(Pn) of pass-
word Pn is 1
2n .. In this section, we visualise the effect of different
reselection modes on this simple example.
Figure 1: The simple, minimal example of a password prob-
ability distribution that we use to visualise different reselec-
tion modes in this section. Probability D(Pn) of password Pn
is 1
2n .
While it would be impossible to accurately predict this rese-
lection process for each individual affected user, we can model
certain behaviours that, if exhibited by all users, would give rise
to a best, worst, or average-case security outcome. We refer to
these as macrobehaviours, and examine four of these as part of
this work (though our implementation is modular, see Section 4).
Given a specific macrobehaviour, the induced distribution obtained
from imposing a password composition policy ϕ in a password
probability distribution D is denoted as:
Reselection(D, ϕ, macrobehaviour)
P1P2P3P4P5Password0.00.20.40.60.81.0ProbabilitySkeptic: Automatic, Justified and Privacy-Preserving Password Composition Policy Selection
ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan
3.3.1 Convergent reselection. Every user that must reselect a pass-
word chooses the most common password that remains permitted
(i.e. password choice converges on the most common permitted
password). This represents a worst-case security outcome; a larger
proportion of users now have the same password, which makes the
password probability distribution less uniform and the system more
vulnerable to a password guessing attack containing this password.
Formally, we define this reselection mode as:
Reselection(D, ϕ, convergent)(p) =
D(p) + surplus(D, ϕ)
D(p)
if p = maxϕ(D)
if p (cid:44) maxϕ(D) and
p ∈ suppϕ(D)
otherwise
0
Here, maxϕ(D) denotes the password with highest probability in
D that satisfies the password composition policy ϕ. This can be
defined as:
choose({ p | p ∈ suppϕ(D) ∧
∀p
′ • p
′ ∈ suppϕ(D) → D(p) ≥ D(p
′) })
where choose is non-deterministic choice of one element from the
given set (which is non-empty).
Figure 2 shows a simple example of convergent reselection ap-
plied to the example distribution shown in Figure 1 when a pass-
word composition policy prohibiting passwords P1 and P2 is applied.
Note that the probability from these prohibited passwords is re-
distributed to the most common password P3 in the dataset that
remains permitted.
Figure 2: The redistribution of probability in convergent re-
selection mode under a policy prohibiting P1 and P2. Dotted
bar outlines show the probability of prohibited passwords,
and stacked bars show the redistribution of this probability.
3.3.2 Proportional reselection. Every user that must reselect a pass-
word chooses a password from those remaining in a way propor-
tional to their probabilities. This represents an average-case security
outcome, with the most common remaining permitted passwords
receiving the largest share of “displaced” users.
Formally, we define this reselection mode as:
Reselection(D, ϕ, proportional)(p) =
D(p)
1 − surplus(D, ϕ)
0
if p ∈ suppϕ(D)
otherwise
Figure 3: The redistribution of probability in proportional
reselection mode under a policy prohibiting P1 and P2.
Figure 3 shows a simple example of proportional reselection ap-
plied to the example distribution under a policy prohibiting P1. and
P2 Note that the probability from these prohibited passwords is re-
distributed amongst remaining permitted passwords proportionally
to their probability.
3.3.3 Extraneous reselection. Every user that must reselect a pass-
word chooses a new, unique password outside the set of remaining
passwords, as if they had suddenly switched to using a password
manager. This represents a best-case security outcome, increasing
password probability distribution uniformity to the greatest extent.
Formally, we define this reselection mode as:
Reselection(D, ϕ, extraneous)(p) =
D(p)
1
n
0
if p ∈ suppϕ(D)
if p ∈ fresh(S, ϕ, D, n)
otherwise
where n = surplus(D, ϕ) × mag(D) and fresh(S, ϕ, D, n) is a set of n
new and unique passwords built from symbols in the alphabet S
that satisfy policy ϕ. Formally, it is a set that satisfies:
|fresh(S, ϕ, D, n)| = n
and
fresh(S, ϕ, D, n) = { p | p ∈ ϕ ∧ p (cid:60) supp(D) ∧ p ∈ S
∗ }
Figure 4 shows a simple example of proportional reselection
applied to the example distribution under a policy prohibiting P1
and P2. Note that the probability from these prohibited passwords
is redistributed to new, unique passwords P6-P29.
ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan
S. Johnson, J. F. Ferreira, A. Mendes, and J. Cordry
passwords are more resilient against certain password guessing
attacks that rely on guessing common passwords first, due to a
smaller proportion of users converging on the same popular pass-
words. The notion of uniformity as a desirable property of the
distribution of user-chosen passwords on a system is not new:
• Previous work by Segreti et al. [30] proposes password com-
position policies that are adaptive—evolving over time with
the express aim of increasing password diversity.
• Blocki et al. [4] focus on maximising minimum password
entropy in order to optimise password composition policies—
analogous to increasing password distribution uniformity.
• Malone and Maher [26] highlight that user-chosen password
distributions are non-uniform, and mention that if this were
not the case, attacks that rely on attempting to guess common
passwords would become less effective.
We approach the problem of measuring the uniformity of pass-
word probability distributions by performing least-squares fitting
of power-law equation to them of the form y = a × xα . By taking α
(the “α-value” of the policy), we can compare the steepness of the
fitted curves, with a shallower curve (i.e. a curve with an α-value
closer to 0) signifying a more uniform distribution.
Figure 4: The redistribution of probability in extraneous re-
selection mode under a policy prohibiting P1 and P2.
3.3.4 Null reselection. Every user that must reselect a password
simply doesn’t, and never creates an account on the system. This
is modelled while maintaining the probability distribution by dis-
tributing password probability completely evenly amongst all re-
maining permitted passwords.
Formally, we define this reselection mode as:
Reselection(D, ϕ, null)(p) =
surplus(D, ϕ)
|suppϕ(D)|
D(p) +
0
if p ∈ suppϕ(D)
otherwise
(a) Yahoo
Figure 5: The redistribution of probability in null reselec-
tion mode under a policy prohibiting P1 and P2.
Figure 5 shows a simple example of null reselection applied to the
example distribution under a policy prohibiting P1 and P2. Note that
the probability from these prohibited passwords is redistributed
uniformly across remaining permitted passwords.
3.4 Quantifying Security
After transforming our probability distribution according to the
policies and macrobehaviours we wish to study, we are now faced
with the challenge of quantifying what it means for a distribution of
user-chosen passwords to be “secure”. To achieve this, we take ad-
vantage of the fact that more uniform distributions of user-chosen
(b) Yahoo (exp. sampled)
Figure 6: The rank-probability distribution of passwords in
the Yahoo dataset, with and without exponential sampling.
This is not completely straightforward, however. Malone and
Maher [26] point out that the tendency for breached password
Skeptic: Automatic, Justified and Privacy-Preserving Password Composition Policy Selection
ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan
databases to contain a high proportion of passwords with frequen-
cies in the low-single digits causes a least-squares regression line
fitted to a graph of password rank against frequency (and there-
fore probability) to have a slope that is too shallow (see Figure 6a).
Logarithmic binning of this data (that is, summing all frequencies
between rank 2n and 2n+1 as one data point) removes this bias, and
results in a much better fit. We reproduce this result for the Yahoo
data set [18] (which we will discuss in detail later) in Figure 6b,
but with an important difference—instead of summing the frequen-
cies in each bin, we simply take every 2nth data point and discard
those in between; that is to say, we swap logarithmic binning for
exponential sampling. This similarly corrects our regression line,
which now appears to interpolate the data well. Given the rank of
the probability of a password in the database between 1 and the
total number of unique passwords in the database, we can now
approximate its actual probability using only the fitted equation,
without requiring access to the password data itself. This allows us
to justify our choice of password composition policy while avoiding
the ethical concerns involved in propagating the password data
that informed this choice.
Figure 7: The original password probability distribution of
the Yahoo dataset, alongside those induced by the comp8 pol-
icy under each macrobehaviour. Fitted power-law curves are
also shown.
Figure 7 shows the rank-probability distribution of the Yahoo
dataset used in this study under its original policy (basic6) and its
transformations under the comp8 policy assuming each of the mac-
robehaviours described in Section 3.3. From the figure, it is readily
apparent that different assumptions about user password reselec-
tion behaviour can lead to drastically different security outcomes
for the system. While proportional, extraneous and null reselection
behaviours lead to a net increase in uniformity under the comp8 pol-
icy (and therefore presumed guessing attack resistance) convergent
behaviour leads to a drastic decrease.
4 THE SKEPTIC TOOLCHAIN
We provide an implementation of the methodology in Section 3
as a toolchain consisting of three pieces of software, designed to
be used together sequentially. We name this three-part toolchain
Skeptic, which consists of: the metaprogramming tool Authority
for encoding password composition policies from within the Coq
proof assistant; the data processing tool Pyrrho for redistributing
password probabilities in the input set according to a password
composition policy and user behaviour model; and finally Pacpal,
a DSL to assist system administrators in comparing and ranking
password composition policies based on output from these tools.
We elaborate on each of these in turn in this section.
4.1 Policy Specification: Authority
Password composition policies are enforced on different systems by
a diverse range of software, which may accept password policies in
different encodings. It is convenient to represent these encodings as
tuples containing software configuration parameters. For example,
software A may take a tuple (l ∈ N, d ∈ N) where l is minimum
password length and d is the minimum number of numeric dig-
its a password may contain; while software B might take tuples
(e ∈ Q, w ⊂ S∗) where e is the minimum Shannon entropy of the
password, and w is a set of prohibited passwords (a “dictionary
check”). If we wish to compare one of each of these tuples, we must
first obtain them in a uniform (i.e. normalised) encoding.
To achieve this, we take advantage of the fact that any password
composition policy is necessarily a predicate on passwords (i.e. a
function with type Password → B). With this in mind, we can
obtain a uniform representation of password composition policies
regardless of the software they were encoded for by devising a
function to decode them to a Boolean normal form. For software A
for example, we might devise the function in Equation 1 which will
transform a password composition policy encoded for this software
into a predicate in conjunctive normal form.
normA(l, d) = λs.lenдth(s) ≥ l ∧ diдits(s) ≥ d
(1)
Even though software B takes a different configuration tuple,
we need only specify the normalisation function in Equation 2 for
tuples of this type in order to obtain a password composition policy
predicate in the same representation.
normB(e, w) = λs.shannon(s) ≥ e ∧ s (cid:60) w
(2)
Normalisation functions specified in this way are amenable to
formal verification, not only with respect to their correctness (i.e.
their conversion of software-specific configuration tuples to predi-
cates) but also desirable properties of the predicates they generate.
For instance, we can show that a policy mandating a minimum
password length of 16 encoded for software A as configuration
tuple (16, 0) and normalised to policy predicate ϕ confers immunity
to a guessing attack consisting of passwords in an arbitrary set of
guesses G by showing the universal quantification in Equation 3
holds.
∀д ∈ G.¬ϕ(д)
ϕ = normA(16, 0)
(3)
Authority is a metaprogramming utility1 that enables the in-
teractive modelling of password composition policies for arbitrary
software, generating a Coq project. From the Coq interactive theo-
rem proving environment, it is then possible to both specify and
verify the correctness of a normalisation function for transforming
password composition policies encoded as software-specific tuples
1We make Authority available as open-source software:
https://github.com/sr-lab/skeptic-authority-template/
100101102103104105106Rank107105103101Probabilitybasic6 (original)comp8 (proportional)comp8 (convergent)comp8 (extraneous)comp8 (uniform)ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan
S. Johnson, J. F. Ferreira, A. Mendes, and J. Cordry
into predicates (see Section 3.2) as well as desirable properties of
the password composition policies themselves, such as immunity
to certain guessing attacks that malware uses to propagate (see
Section 5.5). This command-line utility asks the user a series of
questions, guiding them through this process:
(1) They are first asked to specify the name, type and description
of each member of the type of software-specific configura-
tion tuple they wish to model.
(2) Then, they may optionally specify an arbitrary number of
different password composition policies encoded as tuples
of this type by specifying policy names and tuple values.
(3) A ready-to-use Coq project is then generated according to
the user’s specifications. All that remains is for the user to
manually specify the normalisation function (see Section 3.2)
to convert the password composition policy tuples into pred-
icates.
For a more detailed overview of the operation of Authority,
see the flow diagram in Figure 8. Included in the generated Coq
project are various tools designed to streamline the process of prov-
ing desirable properties about the password composition policies
encoded using the tool, including a trie implementation for high-
performance dictionary checks, a pre-built notion of immunity and
a simple simulate tactic that can be used to prove properties about
password composition policies with respect to smaller guessing
attacks by simple simulation.
A central feature of Authority is that is can be used by Pyrrho,
the next utility in the Skeptic toolchain, to filter large sets of
real-world user password data in order to model changes in the
distribution of passwords under different password composition
policies and user macrobehaviours. Password composition policies
can therefore be modelled from within Coq, and used directly for
this filtration step. Authority achieves this by making use of the
Coq.io [9] library for writing IO-enabled programs in Coq, and com-
municating with Pyrrho (which is written in Python for optimal
performance) via its standard output stream.
4.2 Password Reselection: Pyrrho
Pyrrho lies at the core of the Skeptic toolchain, a software tool2
written in Python that handles the transformation of password
probability distributions derived from real-world datasets accord-
ing to password composition policies and assumptions about user
behaviour (i.e. the macrobehaviours discussed in Section 3.3). Fig-
ure 9 shows an overview of the Skeptic toolchain, and the position
of Pyrrho within it, with arrows indicating the direction of data