[dst_output()](https://elixir.bootlin.com/linux/v5.16.14/source/include/net/dst.h#L451)
->
[ip6_output()](https://elixir.bootlin.com/linux/v5.16.14/source/net/ipv6/ip6_output.c#L226)
->
[NF_HOOK_COND()](https://elixir.bootlin.com/linux/v5.16.14/source/include/linux/netfilter.h#L287)
->
[ip6_finish_output](https://elixir.bootlin.com/linux/v5.16.14/source/net/ipv6/ip6_output.c#L201)
->
[__ip6_finish_output](https://elixir.bootlin.com/linux/v5.16.14/source/net/ipv6/ip6_output.c#L191)
->
[ip6_finish_output2()](https://elixir.bootlin.com/linux/v5.16.14/source/net/ipv6/ip6_output.c#L126)
->
[neigh_output()](https://elixir.bootlin.com/linux/v5.16.14/source/include/net/neighbour.h#L533)
->
[neigh_hh_output()](https://elixir.bootlin.com/linux/v5.16.14/source/include/net/neighbour.h#L519)
->
[dev_queue_xmit()](https://elixir.bootlin.com/linux/v5.16.14/source/net/core/dev.c#L4262)
->
[__dev_queue_xmit()](https://elixir.bootlin.com/linux/v5.16.14/source/net/core/dev.c#L4220)
->
[validate_xmit_skb()](https://elixir.bootlin.com/linux/v5.16.14/source/net/core/dev.c#L3699)
->
[validate_xmit_xfrm()](https://elixir.bootlin.com/linux/v5.16.14/source/net/xfrm/xfrm_device.c#L160)
->
[esp6_xmit()](https://elixir.bootlin.com/linux/v5.16.14/source/net/ipv6/esp6_offload.c#L322)
->
[esp_output_head()](https://elixir.bootlin.com/linux/v5.16.14/source/net/ipv4/esp4.c#L477)
34层，太复杂了。。。
    int esp6_output_head(struct xfrm_state *x, struct sk_buff *skb, struct esp_info *esp)
    {
            ...
            struct page_frag *pfrag = &x->xfrag;          // x->xfrag->page = vul object
            int tailen = esp->tailen;
            allocsize = ALIGN(tailen, L1_CACHE_BYTES);
            spin_lock_bh(&x->lock);
            if (unlikely(!skb_page_frag_refill(allocsize, pfrag, GFP_ATOMIC))) {    // [1]
                spin_unlock_bh(&x->lock);
                goto cow;
            }
            ...
    }
    bool skb_page_frag_refill(unsigned int sz, struct page_frag *pfrag, gfp_t gfp)
    {
            if (pfrag->offset + sz size)
            return true;
        ...
        if (SKB_FRAG_PAGE_ORDER &&
            !static_branch_unlikely(&net_high_order_alloc_disable_key)) {
            pfrag->page = alloc_pages((gfp & ~__GFP_DIRECT_RECLAIM) |               // [2] 
                          __GFP_COMP | __GFP_NOWARN |
                          __GFP_NORETRY,
                          SKB_FRAG_PAGE_ORDER);
            ...
        }
        ...
        return false;
    }
### 1-2 越界写
**漏洞对象越界**
：[null_skcipher_crypt()](https://elixir.bootlin.com/linux/v5.16.14/source/crypto/crypto_null.c#L76)
函数中，内核拷贝了 N-page 数据，导致OOB。
    static int null_skcipher_crypt(struct skcipher_request *req)
    {
        struct skcipher_walk walk;
        int err;
        err = skcipher_walk_virt(&walk, req, false);
        while (walk.nbytes) {
            if (walk.src.virt.addr != walk.dst.virt.addr)
                // out-of-bounds write
                memcpy(walk.dst.virt.addr, walk.src.virt.addr,
                       walk.nbytes);
            err = skcipher_walk_done(&walk, 0);
        }
        return err;
    }
**调用栈** ：`...` ->
[esp6_xmit()](https://elixir.bootlin.com/linux/v5.16.14/source/net/ipv6/esp6_offload.c#L363)
->
[esp6_output_tail()](https://elixir.bootlin.com/linux/v5.16.14/source/net/ipv6/esp6.c#L659)
->
[crypto_aead_encrypt()](https://elixir.bootlin.com/linux/v5.16.14/source/crypto/aead.c#L94)
->
[crypto_authenc_encrypt()](https://elixir.bootlin.com/linux/v5.16.14/source/crypto/authenc.c#L210)
->
[crypto_authenc_copy_assoc()](https://elixir.bootlin.com/linux/v5.16.14/source/crypto/authenc.c#L189)
->
[crypto_skcipher_encrypt()](https://elixir.bootlin.com/linux/v5.16.14/source/crypto/skcipher.c#L630)
->
[null_skcipher_crypt()](https://elixir.bootlin.com/linux/v5.16.14/source/crypto/crypto_null.c#L85)
可以看到，`esp6_xmit()` 先调用 `esp6_output_head()` 分配漏洞对象的 8-page
内存（地址存放在`x->xfrag->page`），再调用 `esp6_output_tail()` 将该内存赋值给 `req.dst` 并最后触发OOB。
    static int esp6_xmit(struct xfrm_state *x, struct sk_buff *skb,  netdev_features_t features)
    {
        int err;
        int alen;
        struct esp_info esp;
        bool hw_offload = true;
        ... ...
        esp.tailen = esp.tfclen + esp.plen + alen;          // esp.tailen   ->   allocsize
        if (!hw_offload || !skb_is_gso(skb)) {
            esp.nfrags = esp6_output_head(x, skb, &esp);    // [1] alloc the vulnerable object, saved at x->xfrag->page
            if (esp.nfrags inplace) {
            int allocsize;
            struct page_frag *pfrag = &x->xfrag;
            ... ...
            page = pfrag->page;
            get_page(page);
            /* replace page frags in skb with new page */
            __skb_fill_page_desc(skb, 0, page, pfrag->offset, skb->data_len);
            pfrag->offset = pfrag->offset + allocsize;
            spin_unlock_bh(&x->lock);
            sg_init_table(dsg, skb_shinfo(skb)->nr_frags + 1);
            err = skb_to_sgvec(skb, dsg,
                           (unsigned char *)esph - skb->data,
                           assoclen + ivlen + esp->clen + alen);
        ... ...
        aead_request_set_crypt(req, sg, dsg, ivlen + esp->clen, iv);       // [2-1]  dsg  =  x->xfrag->page
        aead_request_set_ad(req, assoclen);
        ... ...
        err = crypto_aead_encrypt(req);        // [2-2] req->dst = dsg
        ... ...
    }
    EXPORT_SYMBOL_GPL(esp6_output_tail);
    static int null_skcipher_crypt(struct skcipher_request *req)
    {
        struct skcipher_walk walk;
        int err;
        err = skcipher_walk_virt(&walk, req, false);            // [3] walk->dst = req.dst
        while (walk.nbytes) {
            if (walk.src.virt.addr != walk.dst.virt.addr)
                memcpy(walk.dst.virt.addr, walk.src.virt.addr,  // [4]  trigger OOB
                       walk.nbytes);
            err = skcipher_walk_done(&walk, 0);
        }
        return err;
    }
**漏洞缺陷** ：作者利用时，发送 16-page 数据，可以溢出 8-page，问题是
[esp_output_fill_trailer()](https://elixir.bootlin.com/linux/v5.16.14/source/include/net/esp.h#L14)
会根据消息长度和所用协议类型，在末尾添加几个字节（对我们来说是垃圾数据）。
    static inline void esp_output_fill_trailer(u8 *tail, int tfclen, int plen, __u8 proto)
    {
        /* Fill padding... */
        if (tfclen) {
            memset(tail, 0, tfclen);
            tail += tfclen;
        }
        do {
            int i;
            for (i = 0; i < plen - 2; i++)
                tail[i] = i + 1;
        } while (0);
        tail[plen - 2] = plen - 2;
        tail[plen - 1] = proto;
    }
* * *
## 2\. Buddy system 知识