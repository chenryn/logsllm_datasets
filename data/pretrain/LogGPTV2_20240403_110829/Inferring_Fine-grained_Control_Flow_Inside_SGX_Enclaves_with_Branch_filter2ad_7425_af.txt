Security and Privacy (Oakland) (San Jose, CA, May 2016).
[20] GULLASCH, D., BANGERTER, E., AND KRENN, S. Cache
games–bringing access-based cache attacks on AES to practice. In
Proceedings of the 32nd IEEE Symposium on Security and Privacy
(Oakland) (Oakland, CA, May 2011).
[21] HÄHNEL, M., CUI, W., AND PEINADO, M. High-resolution side
channels for untrusted operating systems. In Proceedings of the
2017 USENIX Annual Technical Conference (ATC) (Santa Clara,
CA, July 2017).
[22] HAND, S. M. Self-paging in the Nemesis operating system. In
Proceedings of the 3rd USENIX Symposium on Operating Sys-
tems Design and Implementation (OSDI) (New Orleans, LA, Feb.
1999).
[23] HUND, R., WILLEMS, C., AND HOLZ, T. Practical timing side
channel attacks against kernel space ASLR. In Proceedings of the
34th IEEE Symposium on Security and Privacy (Oakland) (San
Francisco, CA, May 2013).
[24] INTEL. Intel software guard extensions programming reference
(rev2), Oct. 2014. 329298-002US.
[25] INTEL. Intel 64 and IA-32 architectures optimization reference
manual, June 2016.
[26] INTEL.
Intel 64 and ia-32 architectures software developer’s
manual combined volumes: 1, 2a, 2b, 2c, 2d, 3a, 3b, 3c and 3d,
Sept. 2016.
[27] IRAZOQUI, G., EISENBARTH, T., AND SUNAR, B. S$A: A
shared cache attack that works across cores and defies VM
sandboxing—and its application to AES. In Proceedings of the
36th IEEE Symposium on Security and Privacy (Oakland) (San
Jose, CA, May 2015).
[28] JANG, Y., LEE, S., AND KIM, T. Breaking kernel address space
layout randomization with Intel TSX. In Proceedings of the 23rd
ACM Conference on Computer and Communications Security
(CCS) (Vienna, Austria, Oct. 2016).
[29] KELSEY, J., SCHNEIER, B., WAGNER, D., AND HALL, C. Side
channel cryptanalysis of product ciphers. In Proceedings of the
5th European Symposium on Research in Computer Security (ES-
ORICS) (Belgium, Sept. 1998).
[30] KIM, H., LEE, J., LAKSHMINARAYANA, N. B., SIM, J., LIM, J.,
AND PHO, T. MacSim: A CPU-GPU heterogeneous simulation
framework.
[31] KIM, S., HAN, J., HA, J., KIM, T., AND HAN, D. Enhancing Se-
curity and Privacy of Tor’s Ecosystem by using Trusted Execution
Environments. In Proceedings of the 14th USENIX Symposium on
Networked Systems Design and Implementation (NSDI) (Boston,
MA, Mar. 2017).
[32] KLEEN, A. Advanced usage of last branch records, 2016. https:
//lwn.net/Articles/680996/.
[33] KLEEN, A. An introduction to last branch records, 2016. https:
//lwn.net/Articles/680985/.
[35] LIU, F., YAROM, Y., GE, Q., HEISER, G., AND LEE, R. B.
Last-level cache side-channel attacks are practical. In Proceedings
of the 36th IEEE Symposium on Security and Privacy (Oakland)
(San Jose, CA, May 2015).
[36] LU, K., SONG, C., KIM, T., AND LEE, W. UniSan: Proac-
tive kernel memory initialization to eliminate data leakages. In
Proceedings of the 23rd ACM Conference on Computer and Com-
munications Security (CCS) (Vienna, Austria, Oct. 2016).
[37] MCFARLING, S. Combining branch predictors. Technical Report
TN-36, Digital Western Research Laboratory (1993).
[38] NAVEED, M., KAMARA, S., AND WRIGHT, C. V. Inference at-
tacks on property-preserving encrypted databases. In Proceedings
of the 22nd ACM Conference on Computer and Communications
Security (CCS) (Denver, Colorado, Oct. 2015).
[39] OHRIMENKO, O., MANUEL COSTA, C. F., NOWOZIN, S.,
MEHTA, A., SCHUSTER, F., AND VASWANI, K. SGX-enabled
oblivious machine learning. In Proceedings of the 25th USENIX
Security Symposium (Security) (Austin, TX, Aug. 2016).
[40] PAGE, D. Theoretical use of cache memory as a cryptanalytic
side-channel. IACR Cryptology ePrint Archive (2002).
[41] PIRES, R., PASIN, M., FELBER, P., AND FETZER, C. Secure
content-based routing using Intel Software Guard Extensions. In
Proceedings of the 16th Annual Middleware Conference (Middle-
ware) (2016).
[42] POPA, R. A. Building Practical Systems That Compute on En-
crypted Data. PhD thesis, Massachusetts Institute of Technology,
2014.
[43] POULIOT, D., AND WRIGHT, C. V. The shadow nemesis: In-
ference attacks on efficiently deployable, efficiently searchable
encryption. In Proceedings of the 23rd ACM Conference on Com-
puter and Communications Security (CCS) (Vienna, Austria, Oct.
2016).
[44] RANE, A., LIN, C., AND TIWARI, M. Raccoon: Closing digital
side-channels through obfuscated execution. In Proceedings of the
24th USENIX Security Symposium (Security) (Washington, DC,
Aug. 2015).
[45] RISTENPART, T., TROMER, E., SHACHAM, H., AND SAVAGE,
S. Hey, you, get off of my cloud: Exploring information leakage
in third-party compute clouds. In Proceedings of the 16th ACM
Conference on Computer and Communications Security (CCS)
(Chicago, IL, Nov. 2009).
[46] SCHUSTER, F., COSTA, M., FOURNET, C., GKANTSIDIS, C.,
PEINADO, M., MAINAR-RUIZ, G., AND RUSSINOVICH, M.
VC3: Trustworthy data analytics in the cloud using SGX.
In
Proceedings of the 36th IEEE Symposium on Security and Privacy
(Oakland) (San Jose, CA, May 2015).
[47] SEO, J., LEE, B., KIM, S., SHIH, M.-W., SHIN, I., HAN, D.,
AND KIM, T. SGX-Shield: Enabling address space layout ran-
domization for SGX programs. In Proceedings of the 2017 Annual
Network and Distributed System Security Symposium (NDSS) (San
Diego, CA, Feb.–Mar. 2017).
[48] SHIH, M.-W., KUMAR, M., KIM, T., AND GAVRILOVSKA, A.
S-NFV: Securing NFV states by using SGX. In Proceedings of
the 1st ACM International Workshop on Security in SDN and NFV
(New Orleans, LA, Mar. 2016).
[49] SHIH, M.-W., LEE, S., KIM, T., AND PEINADO, M. T-SGX:
Eradicating controlled-channel attacks against enclave programs.
In Proceedings of the 2017 Annual Network and Distributed
System Security Symposium (NDSS) (San Diego, CA, Feb.–Mar.
2017).
[34] KOCHER, P. Timing attacks on implementations of Diffie-
In Advances in
Hellman, RSA, DSS, and other systems.
Cryptology—CRYPTO’96 (1996), Springer, pp. 104–113.
[50] SHINDE, S., CHUA, Z. L., NARAYANAN, V., AND SAXENA,
P. Preventing your faults from telling your secrets. In Proceed-
ings of the 11th ACM Symposium on Information, Computer and
USENIX Association
26th USENIX Security Symposium    571
Communications Security (ASIACCS) (Xi’an, China, May–June
2016).
[51] SHINDE, S., TIEN, D. L., TOPLE, S., AND SAXENA, P. Panoply:
Low-TCB Linux applications with SGX enclaves. In Proceedings
of the 2017 Annual Network and Distributed System Security
Symposium (NDSS) (San Diego, CA, Feb.–Mar. 2017).
[52] SINHA, R., COSTA, M., LAL, A., LOPES, N. P., RAJAMANI,
S., SESHIA, S. A., AND VASWANI, K. A design and verification
methodology for secure isolated regions. In Proceedings of the
2016 ACM SIGPLAN Conference on Programming Language
Design and Implementation (PLDI) (Santa Barbara, CA, June
2016).
[53] SINHA, R., RAJAMANI, S., SESHIA, S., AND VASWANI, K.
Moat: Verifying confidentiality of enclave program. In Proceed-
ings of the 22nd ACM Conference on Computer and Communica-
tions Security (CCS) (Denver, Colorado, Oct. 2015).
[54] SONG, C., LEE, B., LU, K., HARRIS, W. R., KIM, T., AND LEE,
W. Enforcing kernel security invariants with data flow integrity. In
Proceedings of the 23rd Annual Network and Distributed System
Security Symposium (NDSS) (San Diego, CA, Feb. 2016).
[55] STRACKX, R., AND PIESSENS, F. Ariadne: A minimal approach
to state continuity. In Proceedings of the 25th USENIX Security
Symposium (Security) (Austin, TX, Aug. 2016).
[56] TRUSTED COMPUTING GROUP. Trusted platform module
http://www.trustedcomputinggroup.
(TPM) summary.
org/trusted-platform-module-tpm-summary/.
[57] TSAI, C.-C., PORTER, D. E., AND VIJ, M. Graphene-SGX:
A practical library OS for unmodified applications on SGX. In
Proceedings of the 2017 USENIX Annual Technical Conference
(ATC) (Santa Clara, CA, July 2017).
[58] UZELAC, V., AND MILENKOVIC, A. Experiment flows and mi-
crobenchmarks for reverse engineering of branch predictor struc-
tures. In Performance Analysis of Systems and Software, 2009.
ISPASS 2009. IEEE International Symposium on (2009), IEEE,
pp. 207–217.
[59] WEICHBRODT, N., KURMUS, A., PIETZUCH, P., AND KAPITZA,
R. AsyncShock: Exploiting synchronisation bugs in Intel SGX
enclaves. In Proceedings of the 21th European Symposium on
Research in Computer Security (ESORICS) (Heraklion, Greece,
Sept. 2016).
[60] XU, Y., CUI, W., AND PEINADO, M. Controlled-channel attacks:
Deterministic side channels for untrusted operating systems. In
Proceedings of the 36th IEEE Symposium on Security and Privacy
(Oakland) (San Jose, CA, May 2015).
[61] YANG, K., HICKS, M., DONG, Q., AUSTIN, T., AND
SYLVESTER, D. A2: Analog malicious hardware. In Proceedings
of the 37th IEEE Symposium on Security and Privacy (Oakland)
(San Jose, CA, May 2016).
[62] ZHANG, F. mbedtls-SGX: A SGX-friendly TLS stack (ported
from mbedtls). https://github.com/bl4ck5un/mbedtls-
SGX.
[63] ZHANG, F., CECCHETTI, E., CROMAN, K., JUELS, A., AND SHI,
E. Town Crier: An authenticated data feed for smart contracts.
In Proceedings of the 23rd ACM Conference on Computer and
Communications Security (CCS) (Vienna, Austria, Oct. 2016).
[64] ZHANG, Y., JUELS, A., OPREA, A., AND REITER, M. K. Home-
alone: Co-residency detection in the cloud via side-channel analy-
sis. In Proceedings of the 32nd IEEE Symposium on Security and
Privacy (Oakland) (Oakland, CA, May 2011).
[65] ZHANG, Y., JUELS, A., REITER, M. K., AND RISTENPART,
T. Cross-VM side channels and their use to extract private keys.
In Proceedings of the 19th ACM Conference on Computer and
Communications Security (CCS) (Raleigh, NC, Oct. 2012).
[66] ZHENG, W., DAVE, A., BEEKMAN, J. G., POPA, R. A., GONZA-
LEZ, J. E., AND STOICA, I. Opaque: An oblivious and encrypted
distributed analytics platform. In Proceedings of the 14th USENIX
Symposium on Networked Systems Design and Implementation
(NSDI) (Boston, MA, Mar. 2017).
A Manipulating Local APIC Timer
The local APIC is a component of Intel CPUs to config-
ure and handle CPU-specific interrupts [26, §10]. An OS
can program it through memory-mapped registers (e.g.,
device configuration register) or model-specific registers
(MSRs) to adjust the frequency of the local APIC timer,
which generates high-resolution timer interrupts, and de-
liver an interrupt to a CPU core (e.g., inter-processor
interrupt (IPI) and I/O interrupt from the I/O APIC).
Figure
11
shows
Intel CPUs support three local APIC timer modes: pe-
riodic, one-shot, and timestamp counter (TSC)-deadline
modes. The periodic mode lets an OS configure the initial-
count register whose value is copied into the current-count
register the local APIC timer uses. The current-count reg-
ister’s value decreases at the rate of the bus frequency,
and when it becomes zero, a timer interrupt is generated
and the register is re-initialized by using the initial-count
register. The one-shot mode lets an OS configure the
initial-count counter value whenever a timer interrupt is
generated. The TSC-deadline mode is the most advanced
and precise timer mode allowing an OS to specify when
the next timer interrupt will occur in terms of a TSC
value. Our target Linux system (kernel version 4.4) uses
the TSC-deadline mode, so we focus on this mode.
how we modified
the
lapic_next_deadline() function specifying the next
TSC deadline and the local_apic_timer_interrupt()
function
interrupt
We made and exported two global
is fired.
to manipulate
variables
the
and
local_apic_timer_interrupt() with a kernel module:
lapic_next_deadline_delta to change
the delta;
lapic_target_cpu to specify a virtual CPU running
a victim enclave process (via a CPU affinity); and
timer_interrupt_hook to specify a function to be called
whenever a timer interrupt is generated. In our evaluation
environment having an Intel Core i7 6700K CPU (4GHz),
we were able to have 1,000 as the minimum delta value;
i.e., it fires a timer interrupt about every 1,000 cycles.
Note that, in our environment, a delta value lower than
1,000 made the entire system freeze because a timer
interrupt was generated before an old timer interrupt was
handled by the interrupt handler.
B Modifying SGX Driver
and
behaviors
called whenever
lapic_next_deadline()
a
timer
function
of
pointers
Figure 12 shows how we modified the Intel SGX driver
for Linux to manipulate the base address of an enclave.
572    26th USENIX Security Symposium
USENIX Association
u64 tsc;
tsc = rdtsc();
1 /* linux-4.4.23/arch/x86/kernel/apic/apic.c */
2 ...
3 // manipualte the delta of TSC-deadline mode
4 unsigned int lapic_next_deadline_delta = 0U;
5 EXPORT_SYMBOL_GPL(lapic_next_deadline_delta);
6
7 // specify the virtual core under attack
8 int lapic_target_cpu = -1;
9 EXPORT_SYMBOL_GPL(lapic_target_cpu);
10
11 // a hook to launch branch shadowing attack
12 void (*timer_interrupt_hook)(void*) = NULL;
13 EXPORT_SYMBOL_GPL(timer_interrupt_hook);
14 ...
15 // update the next TSC deadline
16 static int lapic_next_deadline(unsigned long delta,
struct clock_event_device *evt) {
17
18
19
20 ⋆ if (smp_processor_id() != lapic_target_cpu)
21
22
23 ⋆ else
24 ⋆
25 ⋆
26
27 }
28 ...
29 // handle a timer interrupt
30 static void local_apic_timer_interrupt(void) {
31
32
33
34 ⋆ if (cpu == lapic_target_cpu && timer_interrupt_hook)
35 ⋆
36
37 }
tsc + (((u64) delta) * TSC_DIVISOR));
wrmsrl(MSR_IA32_TSC_DEADLINE,
wrmsrl(MSR_IA32_TSC_DEADLINE,
return 0;
...
timer_interrupt_hook((void*)&cpu); // call attack code
tsc + lapic_next_deadline_delta); // custom deadline
int cpu = smp_processor_id();
struct clock_event_device *evt = &per_cpu(lapic_events, cpu);
Figure 11: Modified local APIC timer code. We changed
lapic_next_deadline() to manipulate the next TSC deadline
and local_apic_timer_interrupt() to launch attack code.
unsigned int cmd, unsigned long arg) {
...
struct isgx_create_param *createp =
(struct isgx_create_param *) arg;
1 /* isgx_ioctl.c */
2 ...
3 static long isgx_ioctl_enclave_create(struct file *filep,
4
5
6
7
8
9
10
11
12
13
14