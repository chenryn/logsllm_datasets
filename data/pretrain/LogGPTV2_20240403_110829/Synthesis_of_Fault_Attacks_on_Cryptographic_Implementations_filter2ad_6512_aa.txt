title:Synthesis of Fault Attacks on Cryptographic Implementations
author:Gilles Barthe and
François Dupressoir and
Pierre-Alain Fouque and
Benjamin Gr&apos;egoire and
Jean-Christophe Zapalowicz
Synthesis of Fault Attacks on Cryptographic
Implementations
Gilles Barthe
IMDEA Software Institute
PI:EMAIL
François Dupressoir
IMDEA Software Institute
PI:EMAIL
Pierre-Alain Fouque
Université de Rennes 1 &
Institut Universitaire de France
PI:EMAIL
Benjamin Grégoire
Jean-Christophe Zapalowicz
PI:EMAIL
PI:EMAIL
Inria
Inria
ABSTRACT
Fault attacks are attacks in which an adversary with physical
access to a cryptographic device, say a smartcard, tampers
with the execution of an algorithm to retrieve secret mate-
rial. Since the seminal Bellcore attack on modular exponen-
tiation, there has been extensive work to discover new fault
attacks against cryptographic schemes and develop counter-
measures against such attacks. Originally focused on high-
level algorithmic descriptions, these eﬀorts increasingly fo-
cus on concrete implementations. While lowering the ab-
straction level leads to new fault attacks, it also makes their
discovery signiﬁcantly more challenging.
In order to face
this trend, it is therefore desirable to develop principled,
tool-supported approaches that allow a systematic analy-
sis of the security of cryptographic implementations against
fault attacks.
We propose,
implement, and evaluate a new approach
for ﬁnding fault attacks against cryptographic implementa-
tions. Our approach is based on identifying implementation-
independent mathematical properties, or fault conditions.
We choose fault conditions so that it is possible to recover
secret data purely by computing on suﬃciently many data
points that satisfy them. Fault conditions capture the essence
of a large number of attacks from the literature, including
lattice-based attacks on RSA. Moreover, they provide a ba-
sis for discovering automatically new attacks: using fault
conditions, we specify the problem of ﬁnding faulted imple-
mentations as a program synthesis problem. Using a special-
ized form of program synthesis, we discover multiple faulted
attacks on RSA and ECDSA. Several of the attacks found
by our tool are new, and of independent interest.
Permission to make digital or hard copies of all or part of this work for personal 
or  classroom  use  is  granted  without  fee  provided  that  copies  are  not  made  or 
distributed  for  profit  or  commercial  advantage  and  that  copies  bear this  notice 
and the full citation on the first page. Copyrights for components of this work 
owned by others than the author(s) must be honored. Abstracting with credit is 
permitted. To copy otherwise, or republish, to post on servers or to redistribute to 
lists, requires prior specific permission and/or a fee. Request permissions from 
permissions@acm.org. 
CCS’14, November 3–7, 2014, Scottsdale, Arizona, USA. 
Copyright is held by the owner/author(s). Publication rights licensed to ACM. 
ACM 978-1-4503-2957-6/14/11…$15.00. 
http://dx.doi.org/10.1145/2660267.2660304
Categories and Subject Descriptors
E.3 [Data encryption]: Public key cryptosystems; F.3.1
[Logics and Meanings of Programs]: Specifying and
Verifying and Reasoning about Programs
Keywords
Fault attacks; program veriﬁcation; program synthesis; au-
tomated proofs
1.
INTRODUCTION
Embedded devices often play a central role in security ar-
chitectures for large-scale software infrastructures. For in-
stance, they are used pervasively for authentication, identity
management, or digital signatures. As a consequence, em-
bedded devices are also a prime target for attackers. There
are primarily two means to retrieve secret material from
embedded devices. The ﬁrst one is to carry non-invasive
monitoring of the device and to obtain information from
side-channels, such as timing and power consumption, elec-
tromagnetic radiations, or even noise. The second one is to
perform active attacks, injecting faults that interfere with
the normal execution of the devices, and to recover the se-
cret information through the device’s normal interface, or
through side-channels. The eﬀects of these faults vary: they
may modify the control ﬂow of the program by skipping a
conditional test [2] or induce behaviours similar to buﬀer
overﬂows [20]. In the context of cryptographic attacks, they
often allow the adversary to directly recover secret keys.
There are various ways to inject faults in devices using, for
example, power spikes, glitches on the clock signal, temper-
ature variations, or electromagnetic radiations [2, 26, 4].
The existence of eﬃcient fault attacks against crypto-
graphic schemes was ﬁrst demonstrated in [13] by Boneh,
DeMillo and Lipton. They consider an algorithm, shown in
Figure 3, for computing RSA signatures using the Chinese
Remainder Theorem (CRT) and its standard recombination
formula:
S = (Sq · p
−1 mod q) · p + (Sp · q
−1 mod p) · q mod N
where Sp and Sq are modular exponentiations of the reduc-
tions modulo p and q of the integer M that encodes the
message m. The algorithm is popular in practice, because it
achieves a signiﬁcant speedup (approximately 4 times faster)
over the direct computation of S = M d mod N . The fault
1016second attack, due to Lenstra [25], only requires knowledge
attack Boneh et al. exhibit allows them to retrieve the fac-
torization of N , i.e. p and q, with a simple gcd computation.
This attack requires knowledge of a valid signature S and
a faulted signature (cid:98)S for the same padded message M . A
of a single faulted signature (cid:98)S for a known padded message
from the identity gcd(S −(cid:98)S, N ) = q;
N from the identity gcd(M −(cid:98)Se, N ) = q.
• in the ﬁrst case, one can recover the factorization of N
• in the second case, one can recover the factorization of
M . Injecting fault during the computation modulo p,
Both attacks, often known as the Bellcore attacks, are re-
stricted to deterministic encodings. However, Boneh et al.
describe another attack that applies to probabilistic encod-
ings; unfortunately, this third attack is not as eﬃcient as the
others. In fact, it is only very recently that Fouque, Guiller-
min, Leresteux, Tibouchi and Zapalowicz [19] propose the
ﬁrst eﬃcient fault attacks against RSA-CRT signatures with
probabilistic encodings; their attacks are applicable against
PKCS#1 v2.0 (PSS) signatures. In addition to the RSA-
CRT signature considered in [13], Fouque et al. consider
another variant of RSA-CRT (Figure 4) based on Garner’s
recombination formula:
S = Sq + q · (q
−1 · (Sp − Sq) mod p)
However, the main diﬀerence between [13] and [19] lies
in their level of description of RSA-CRT: whereas Boneh et
al. [13] consider a high-level algorithmic description in which
modular exponentiation is treated abstractly, Fouque et al.
consider reasonably detailed implementations, going down
to algorithmic descriptions of modular multiplication. They
consider four diﬀerent implementations of modular expo-
nentiation, among which the Square-and-Multiply algorithm
and Montgomery’s modular exponentiation algorithm [32].
Figure 1 shows the Coarsely Integrated Operand Scanning
(CIOS) algorithm for modular multiplication, used in Mont-
gomery’s modular exponentiation algorithm (shown in Fig-
ure 2). Fouque et al. show that, by injecting faults in the im-
plementations of Montgomery modular multiplication, one
can obtain faulted signatures (cid:98)S that are close multiples of
p or q, and then use lattice-based techniques to recover the
factorization of N with about 50 faulty signatures. This
example provides strong evidence that analyzing implemen-
tations rather than algorithmic descriptions can lead to the
discovery of interesting attacks. However, it also highlights
a number of diﬃculties with this approach:
1. the number of faulted implementations grows at least
exponentially in the length of the original program, in par-
ticular if multiple faults are considered;
2. some fault attacks require to tamper with some (but
not all) loop iterations, or to add or remove some loop itera-
tions; hence, the number of faulted implementations cannot
be bounded solely based on the length of the program;
3. analyzing the eﬀects of faults becomes very involved
and error-prone, in particular for programs with loops;
4. there exist multiple implementations of basic arith-
metic operations, requiring to repeat the analysis for each;
5. there might exist numerous countermeasures against a
fault attack, requiring to repeat the analysis for each of the
protected implementations.
This current trend towards analyzing security against fault
attacks of implementations rather than high-level algorithmic
descriptions is not speciﬁc to RSA signatures. In fact, it is
also witnessed in elliptic curve cryptography. Biehl, Meyer
and M¨uller [12] were among the ﬁrst to consider fault at-
tacks against elliptic curve cryptosystems; more speciﬁcally,
they consider an elliptic curve variant of ElGamal encryp-
tion. Their attacks exploit some of the ideas from Boneh
et al. and are cast in the setting of a high-level algorithmic
description of scalar multiplication between a ﬁeld element
and a point in the curve. These attacks were generalized to
a more concrete setting by Ciet and Joye [16]. Later, Nac-
cache, Nguyen, Tunstall and Whelan [36] exhibit fault at-
tacks on implementations of DSA and its elliptic curve vari-
ant ECDSA, whose description is given in Figure 6. Their
attack introduces a fault during the generation of the nonce
k and is cast in an algorithmic setting. In contrast, more
recent works [41, 3, 9, 31] study fault attacks against im-
plementations of ECDSA, based on detailed accounts of in-
teger multiplication, scalar multiplication, and point dou-
bling. For example, the attack on integer multiplication [3]
by Barenghi et al. works by injecting faults during the inte-
ger multiplication of a known random value and the secret
key. Then, by considering the textbook multiplication im-
plementation, they show that it is possible to recover the se-
cret key. Finally, the attack of [31] shows that it is possible to
inject a fault during the conversion from projective to aﬃne
coordinates. These two attacks show that it is beneﬁcial
to consider all steps of an implementation-level description
when looking for fault attacks. Our goal in this paper is to
search for fault attacks by considering full implementation-
level descriptions of cryptographic algorithms.
a ← 0
y0 ← y mod b
for j = 0 to k − 1 do
1: function CIOS(x, y)
2:
3:
4:
5:
6:
a0 ← a mod b
uj ← (a0 + xj · y0) · q(cid:48) mod b
a ←(cid:106) a + xj · y + uj · q
(cid:107)
b
7:
8:
9:
10:
11:
12: end function
end for
if a ≥ q then a ← a − q
end if
return a
Figure 1: The Montgomery multiplication algo-
rithm. The xi’s and yi’s are the digits of x and y
in base b; q(cid:48) = −q−1 mod b is precomputed. The re-
turned value is (xy · b−k mod q). Since b = 2r, the
division is a bit shift.
Our contributions
The thesis of this work is that it is beneﬁcial to develop
and implement rigorous methodologies for discovering fault
attacks on cryptographic implementations. To support our
thesis, we propose and validate experimentally a principled,
tool-supported approach for discovering fault attacks on cryp-
tographic implementations. Our approach relies on two broad
contributions:
1. identifying fault conditions, a novel concept that cap-
tures the essence of fault attacks in a logical, implementation
independent setting;
1017if ei = 0 then
1: function ExpLadder(x, e, q, c)
¯x ← CIOS(x, R2 mod q)
2:
A ← R mod q
3:
for i = t down to 0 do
4:
5:
¯x ← CIOS(A, ¯x)
6:
A ← CIOS(A, A)
7:
else if ei = 1 then
8:
A ← CIOS(A, ¯x)
9:
¯x ← CIOS(¯x, ¯x)
10:
11:
end for
12:
A ← CIOS(A, c)
13:
14:
return A
15: end function
end if
Figure 2: Montgomery’s Ladder for computing mod-
ular exponentiations: ExpLadder(x, e, q, c) = xe · c mod
q.
e0, . . . , et are the bits of the exponent e (from
the least to the most signiﬁcant), b is the base in
which computations are carried out (gcd(b, q) = 1)
and R = bk.
1: function SignRSA–CRT(m)
2:
3:
4:
5:
6:
7: end function
M ← µ(m) ∈ ZN
p ← ExpLadder(M mod p, dp, p, q−1 mod p)
S(cid:48)
q ← ExpLadder(M mod q, dq, q, p−1 mod q)
S(cid:48)
S ← S(cid:48)
return S
p · q mod N
q · p + S(cid:48)
(cid:46) message encoding
Figure 3: RSA–CRT signature generation. p and q
are large primes and N = pq is the modulus. The
public key is denoted by (N, e) and the associated
private key by (p, q, d). The reductions dp, dq modulo
p − 1, q − 1 of the private exponent, as well as the
p−1 mod q and q−1 mod p CRT coeﬃcients, are pre-
computed.
2. applying a form of program synthesis on concrete cryp-