![](media/image39.png){width="6.0in" height="2.9625in"}
./channel-artifacts/mychannel.tx文件来源：在orderer上
![](media/image40.png){width="6.0in" height="1.2347222222222223in"}
TwoOrgsChannel 所在
![](media/image41.png){width="4.715456036745407in"
height="2.5503849518810147in"}
问题3
安装智能合约时候出错：
![](media/image42.png){width="6.0in" height="1.8388888888888888in"}
解决如下：
![](media/image43.png){width="6.0in" height="1.15625in"}
问题4：(未解决)
实例化智能合约失败：
![](media/image44.png){width="6.0in" height="2.2368055555555557in"}
将fabirc-ccenv、fabric-baseos、fabric-javaenv三个镜像提前下载好以后，实例化成功。
问题三：防火墙设置
![](media/image45.png){width="6.0in" height="1.4145833333333333in"}
## peer1.org1.example.com部署
192.168.10.233
### 准备docker配置文件
配置docker-compose-peer.yaml文件，拷贝到multipeer目录下，可以peer0.org1.example.com的为模板，将peer0改为peer1
\[root@peer1 multipeer\]# sed -i
\'1,65s/peer0.org1.example.com/peer1.org1.example.com/\'
docker-compose-peer.yaml
\[root@peer1 multipeer\]# vim docker-compose-peer.yaml
\-\-\-\-\-\-\-\-\-\-\--peer1.org1.example.com的docker-compose-peer.yaml配置内容如下\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
#docker-peer.yaml：
version: \'2\'
\- CORE_PEER_ADDRESS=peer1.org1.example.com:7051
\- CORE_PEER_CHAINCODEADDRESS=peer1.org1.example.com:7052
\- CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052
\- CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org1.example.com:7051
\- CORE_PEER_LOCALMSPID=Org1MSP
\- CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
\- CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=multipeer_default
#- CORE_LOGGING_LEVEL=ERROR
\- CORE_LOGGING_LEVEL=DEBUG
\- CORE_PEER_TLS_ENABLED=true
\- CORE_PEER_GOSSIP_USELEADERELECTION=true
\- CORE_PEER_GOSSIP_ORGLEADER=false
\- CORE_PEER_PROFILE_ENABLED=true
\- CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
#docker-peer.yaml：
version: \'2\'
\- CORE_PEER_ADDRESS=peer1.org1.example.com:7051
\- CORE_PEER_CHAINCODEADDRESS=peer1.org1.example.com:7052
\- CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052
\- CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org1.example.com:7051
\- CORE_PEER_LOCALMSPID=Org1MSP
\- CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
\- CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=multipeer_default
#- CORE_LOGGING_LEVEL=ERROR
\- CORE_LOGGING_LEVEL=DEBUG
\- CORE_PEER_TLS_ENABLED=true
\- CORE_PEER_GOSSIP_USELEADERELECTION=true
\- CORE_PEER_GOSSIP_ORGLEADER=false
\- CORE_PEER_PROFILE_ENABLED=true
\- CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
\- CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
\- CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
command: peer node start
volumes:
\- /var/run/:/host/var/run/
\-
./crypto-config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/msp:/etc/hyperledger/fabric/msp
\-
./crypto-config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls:/etc/hyperledger/fabric/tls
ports:
\- 7051:7051
\- 7052:7052
\- 7053:7053
extra_hosts:
\- \"orderer.example.com:192.168.10.231\"
cli:
container_name: cli
image: hyperledger/fabric-tools
tty: true
environment:
\- GOPATH=/opt/gopath
\- CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
\- CORE_LOGGING_LEVEL=DEBUG
\- CORE_PEER_ID=cli
\- CORE_PEER_ADDRESS=peer1.org1.example.com:7051
\- CORE_PEER_LOCALMSPID=Org1MSP
\- CORE_PEER_TLS_ENABLED=true
\-
CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/server.crt
\-
CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/server.key
\-
CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/ca.crt
\-
CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/PI:EMAIL/msp
working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
volumes:
\- /var/run/:/host/var/run/
\-
./chaincode/go/:/opt/gopath/src/github.com/hyperledger/fabric/multipeer/chaincode/go
\-
./crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/
\-
./channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts
depends_on:
\- peer1.org1.example.com
extra_hosts:
\- \"orderer.example.com:192.168.10.231\"
\- \"peer0.org1.example.com:192.168.10.232\"
\- \"peer1.org1.example.com:192.168.10.233\"
\- \"peer0.org2.example.com:192.168.10.234\"
\- \"peer1.org2.example.com:192.168.10.235\"
\-\-\-\-\-\-\-\-\-\-\-\--peer1.org1.example.com的docker-compose-peer.yaml配置结束\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
### 部署智能合约
智能合约放在：multipeer/chaincode/go/example02目录下，本案例是用源码的：examples/chaincode/go/example02
将源码的：examples/chaincode/go/example02
拷贝到multipeer/chaincode/go/example02目录下
### 启动fabric网络
\# cd \$GOPATH/src/github.com/hyperledger/fabric/multipeer
\# docker-compose -f docker-compose-peer.yaml up --d #1启动peer
\# docker exec -it cli bash #2启动进入cli容器
#### 部署mychannel.block到cli容器中
\# exit
\# docker cp
/opt/gopath/src/github.com/hyperledger/fabric/multipeer/mychannel.block
xxxxxxxx:/opt/gopath/src/github.com/hyperledger/fabric/peer/
#命令的xxxxxxxx为cli容器的ID
#### Peer加入Channel
\# docker exec -it cli bash
\# peer channel join -b mychannel.block
![](media/image46.png){width="6.0in" height="0.9645833333333333in"}
### 安装与运行智能合约
智能合约在"部署智能合约"那一步骤已经将合约放在./multipeer/chaincode/go/example02/
\# peer chaincode install -n mycc -p
github.com/hyperledger/fabric/multipeer/chaincode/go/example02/ -v 1.0
![](media/image47.png){width="6.0in" height="1.0416666666666667in"}
### 运行还有问题待解决
## Peer0.org2.example.com
\[root@peer0 multipeer\]# vim docker-compose-peer.yaml
\[root@peer0 multipeer\]# sed -i
\'1,65s/peer0.org1.example.com/peer0.org2.example.com/\'
docker-compose-peer.yaml
\[root@peer1 multipeer\]# firewall-cmd \--zone=public
\--add-port=7051/tcp \--permanent
success
\[root@peer1 multipeer\]# firewall-cmd \--zone=public
\--add-port=7052/tcp \--permanent
success
\[root@peer1 multipeer\]# firewall-cmd \--zone=public
\--add-port=7053/tcp --permanent
Success
\[root@peer1 multipeer\]# firewall-cmd \--reload
\[root@peer0 multipeer\]# mkdir -p chaincode/go/
\[root@peer0 multipeer\]# cp -r ../examples/chaincode/go/example02
chaincode/go/
\[root@peer0 multipeer\]# docker-compose -f docker-compose-peer.yaml up
-d
\[root@peer0 multipeer\]# docker exec -it cli bash
root@ac4114c82336:/opt/gopath/src/github.com/hyperledger/fabric/peer#
exit
\[root@peer0 multipeer\]# docker cp mychannel.block
ac4114c82336:/opt/gopath/src/github.com/hyperledger/fabric/peer/
root@ac4114c82336:/opt/gopath/src/github.com/hyperledger/fabric/peer#
peer channel join -b mychannel.block
root@ac4114c82336:/opt/gopath/src/github.com/hyperledger/fabric/peer#
peer chaincode install -n mycc -p
github.com/hyperledger/fabric/multipeer/chaincode/go/example02/ -v 1.0
![](media/image48.png){width="6.0in" height="1.9965277777777777in"}
## Peer1.org2.example.com
\[root@peer1 multipeer\]# cp /root/docker-compose-peer.yaml .
\[root@peer1 multipeer\]# sed -i
\'1,65s/peer0.org2.example.com/peer1.org2.example.com/\'
docker-compose-peer.yaml
\[root@peer1 multipeer\]# vim docker-compose-peer.yaml
\[root@peer1 multipeer\]# mkdir -p chaincode/go/
\[root@peer1 multipeer\]# firewall-cmd \--zone=public
\--add-port=7051/tcp \--permanent
success
\[root@peer1 multipeer\]# firewall-cmd \--zone=public
\--add-port=7052/tcp \--permanent
success
\[root@peer1 multipeer\]# firewall-cmd \--zone=public
\--add-port=7053/tcp --permanent
Success
\[root@peer1 multipeer\]# firewall-cmd \--reload
\[root@peer1 multipeer\]# docker-compose -f docker-compose-peer.yaml up
--d
\[root@peer1 multipeer\]# docker ps
CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
920d0ca31067 hyperledger/fabric-tools \"/bin/bash\" 8 seconds ago Up 6
seconds cli
44e7323804d5 hyperledger/fabric-peer \"peer node start\" 9 seconds ago
Up 7 seconds 0.0.0.0:7051-7053-\>7051-7053/tcp peer1.org2.example.com
\[root@peer1 multipeer\]# docker cp mychannel.block
920d0ca31067:/opt/gopath/src/github.com/hyperledger/fabric/peer/
\[root@peer1 multipeer\]# docker cp mychannel.block
920d0ca31067:/opt/gopath/src/github.com/hyperledger/fabric/peer/
\[root@peer1 multipeer\]# docker exec -it cli bash
root@920d0ca31067:/opt/gopath/src/github.com/hyperledger/fabric/peer#
peer channel join -b mychannel.block
root@920d0ca31067:/opt/gopath/src/github.com/hyperledger/fabric/peer#
peer chaincode install -n mycc -p
github.com/hyperledger/fabric/multipeer/chaincode/go/example02/ -v 1.0
![](media/image49.png){width="6.0in" height="3.386111111111111in"}
# Fabric环境准备
\[root@orderer files\]# pwd
/etc/ansible/files
\[root@orderer files\]# vim build.sh
#!/bin/bash
##配置hosts
cat \>\> /etc/hosts \\> /etc/profile \ /etc/docker/daemon.json \<\< EOF