The security of(cid:2)cer is not required to be aware of ob-
ject names to roll out the policy.
View connectors shield the security of(cid:2)cer from
application-speci(cid:2)c object names.
5. Prototype
Uniformity. The introduction of the access interface sup-
ports a central management of an organizationwide policy.
We have developed a prototype implementation for
access interfaces and view connectors on top of the
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
aspect-oriented application container Java Aspect Compo-
nents (JAC). First, Aspect-Oriented Software Development
(AOSD) is shortly described in Section 5.1. Subsequently,
in Section 5.2, the prototype itself is discussed.
5.1. AOSD
Aspect-orientation is based on the observation that cur-
rent paradigms, such as for example object orientation, fall
short in encapsulating so-called crosscutting concerns into
separated modules and therefore provide poor support for
the separation of concerns principle. An example of a cross-
cutting concern is application-level access control logic: it
is spread all over the application and is often entangled with
application logic [11].
The additional concept that aspect-oriented software de-
velopment offers us to improve the modularization of the
so-called aspects (concerns) is quanti(cid:2)cation [13]. Quan-
ti(cid:2)cation enables us to formulate statements which have an
impact on various points in the code. An example statement
is (cid:147)each time a method is invoked on an object, it should be
veri(cid:2)ed whether the invoker has authorization to do so(cid:148).
is obliviousness [13] of
The second characteristic of AOSD (Aspect-Oriented
Software Development)
the
application-logic developer regarding the applied aspect, re-
sulting in a better separation of concerns between applica-
tion deployer and application developer. The latter provides
the application logic and, ideally, does not have to be aware
of the security logic imposed on the application logic.
The construct with which this is realized, is called a join-
point. A joinpoint is a place in the execution where the (in
our case) access logic is superimposed on the application.
Typical joinpoints are method invocations, exception han-
dling, execution (cid:3)ows . . . . So-called pointcuts allow us to
select a set of joinpoints based on one or more of their char-
acteristics; e.g. the name of the method invoked or the target
object. Advice is the logic injected into the application at the
join point; in this case we would like to inject access con-
trol enforcement checks. For a good overview of AOSD, we
refer the reader to [9, p 29-97].
5.2. Implementation
In this section, we describe an implementation based on
aspect-oriented programming. We opted to implement the
prototype on top of Java Aspect Components (JAC), which
will be elaborated on in the next paragraph.
Java Aspect Components.
JAC [23] is in essence an ex-
tensible application container. This platform provides an
aspect-oriented middleware layer, which allows dynamic
(un)loading of aspect components. These aspect com-
ponents allow to weave (transparently to the application)
wrappers around the target (java) objects, called wrappees.
These wrappers intercept method invocations at execution
points speci(cid:2)ed by pointcuts, and can add extra function-
ality by means of role-methods. JAC, moreover, provides
support for contextual information by means of collabora-
tion (cid:3)ows, which allow to attach attributes to an execution
thread.
Architecture.
In this paragraph, a broad overview is
given of the architecture of the prototype (displayed in Fig-
ure 3). The ICP application runs on top of the aspect-
the JAC
oriented middleware layer provided by JAC, i.e.
container. The latter acts as a kind of reference monitor,
as shown in Figure 3: The wrapper (cid:2)rst intercepts the ac-
cess request at the points in the execution conforming to
the view connector con(cid:2)guration (cid:2)le, as explained in Sec-
tion 3.2. The wrapper then literally connects the view to the
application by mapping the access request onto the access
interface. Hereto, the view connector executes the follow-
ing actions:
1. Mapping:
Based on the view connector
the
application-speci(cid:2)c access request is projected onto
the access interface by:
(cid:15) retrieving the object and subject interfaces appli-
cable to respectively the subject and the callee
(cid:15) determining to which action in the object access
interface, the access request corresponds
(cid:15) retrieving the attribute values needed by the au-
thorization engine
2. Access Decision: The request is subsequently sent to
the authorization engine, which is discussed below, for
evaluation.
3. Access Enforcement: The access decision is enforced.
The Authorization Engine evaluates the access request
based on the access rules. In the above mentioned approach,
no knowledge of the internals of the speci(cid:2)c application is
required, since the access request is translated into terms
of the access interface.
In the prototype implementation,
we opted to push the attributes to the authorization engine.
The drawback is that more attributes are retrieved than may
be necessary for the access decision. The advantage is that
roundtrips are saved, if the attributes can be retrieved locally
and the access decision function is deployed on a different
node. Alternatively, a lazy evaluation strategy can be used,
in which attributes are pulled by the authorization by means
of callbacks. More experiments are needed to evaluate the
performance of the prototype.
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Figure 3. Architecture
Application
View Connector Implementation
caller
callee
Authorization
Aspect 
Component
wrapper
interception
JAC-Container
3
Access
Enforcement
1
Mapping & 
Attribute 
Retrieval
2
Access
Decision
Request
Authorization
Engine
policy
rules
object-
interface
View Connector
6. Related work
The presented work is related with several research do-
mains, which are discussed below:
Middleware infrastructures for application-level access
control. Tivoli Access Manager [16] supports consistent
and centralized management across heterogeneous systems
by introducing a hierarchical protected object namespace
to abstract resources. URL mappings specify how a dy-
namic URL should be resolved into a namespace object, and
can be regarded as (limited) view connectors. The CORBA
Resource Access Decision (RAD) service [6] abstracts re-
spectively the asset and request, by conveying a protected
resource name and access operation to the access decision
function. It remains the responsibility of the application de-
veloper to apply these abstractions consistently. Additional
attributes can be retrieved by means of DynamicAttribute-
Services. OSA [5], Object Security Attributes, are generic
representations for application-speci(cid:2)c factors.
Java Au-
thorization Contract for Containers [27] (JACC) speci(cid:2)es
contracts between the application container (e.g. J2EE) and
so-called policy providers. Policy Context Handlers allow
providers to obtain additional context, such as for example
the enterprise bean involved in the access request. These
infrastructures do not capture explicitly the requirements of
the authorization engine to enforce the access control pol-
icy, such as the necessary application-speci(cid:2)c information.
View Policy Language [8] aggregates access rights in a
type-safe manner into views, which can be assigned to a
role. To construct these views, VPL starts from the appli-
cation’s use-cases, whereby the actors are directly mapped
onto the roles. VPL aims at a better separation of concerns
so that access control is manageable. VPL focusses on the
design, speci(cid:2)cation and management of security policies
rather than on the integration and uniform enforcement of
access control.
The access interface groups methods, to which the same
policy rule apply. In J2EE [7], methods are grouped accord-
ing to the role, allowed to invoke that method.
Access control frameworks. The prototype (Figure 3)
exhibits a similar architecture as the ISO/IEC 10181-3 Ac-
cess Control Framework [14] and the XACML data(cid:3)ow
model [20]. The authorization engine is essentially the
Policy Decision Point (PDP). The view connector acts as
both Policy Enforcement Point (PEP) and Policy Informa-
tion Point (PIP).
Policy languages and authorization engines. The access
interface and view connector approach bene(cid:2)ts from and
complements the extensive research carried out in the (cid:2)eld
of policy languages, such as for example XACML [20] and
Ponder [10], and authorization engines, such as for example
the Flexible Authorization Framework (FAF) [15].
Model Driven Engineering. Our
approach relates
to Model Driven Architecture [21]
(MDA) and Se-
cureUML [2]. The difference is that MDA focusses at a
(semi-)automatic translation of a high-level model into a
platform dependent model and implementation for a spe-
ci(cid:2)c application, whereas in the access interface approach,
we aim at a uniform translation of requirements across the
various applications.
Aspect-Oriented Software Development. The access in-
terface approach is related to Multidimensional Separation
of Concerns (MDSOC) [22] as it provides a view on the
application from the viewpoint of access control. The use
of Aspect-Oriented Software Development (AOSD) tech-
niques has already been proven useful in the separation of
the access control concern [11]. Song et al.
[26] apply an
Aspect-Oriented Modeling approach to compose the access
control concern and the application in a veri(cid:2)able manner.
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
7. Conclusion
Enforcing an expressive policy is hard due to a poor sup-
port of the separation of concerns principle. An access in-
terface, makes explicit the contract between the authoriza-
tion engine and the applications, for which the policy should
be enforced. For each application, a view connector en-
sures that the contract is ful(cid:2)lled by binding the particular
application to the access interface. This approach naturally
supports a centralized management of an expressive policy,
as well as the enforcement of a single policy in diverse ap-
plications. Therefore it also enforces uniformity of access
control enforcement in the applications, deployed within the
organization. A prototype has been implemented on top of
an aspect-oriented application platform.
the Institute for
Acknowledgements. This research is funded by a Ph.D
grant of
Innova-
tion through Science and Technology in Flanders (IWT-
Vlaanderen). The authors would like to thank Professor
Konstantin Beznosov and the anonymous reviewers for their
helpful comments and suggestions.
the Promotion of
References
[1] R. J. Anderson. A security policy model for clinical infor-
mation systems. In SP ’96: Proceedings of the 1996 IEEE
Symposium on Security and Privacy, page 30, Washington,
DC, USA, 1996. IEEE Computer Society.
[2] D. Basin, J. Doser, and T. Lodderstedt. Model driven se-
curity for process-oriented systems. In SACMAT ’03: Pro-
ceedings of the eighth ACM symposium on Access control
models and technologies, pages 100(cid:150)109, New York, NY,
USA, 2003. ACM Press.
[3] K. Beznosov. Engineering Access Control for Distributed
Enterprise Applications. PhD thesis, Florida International
University, July 2000.
[4] K. Beznosov. Access Control Mechanisms in Commercial
Middleware, June 2002. tutorial at SACMAT’02.
[5] K. Beznosov.
Object Security Attributes: Enabling
Application-Speci(cid:2)c Access Control in Middleware.
In
DOA’02: 4th International Symposium on Distributed Ob-
jects & Applications, pages 693(cid:150)710, London, UK, October
2002. Springer-Verlag.
[6] K. Beznosov, Y. Deng, B. Blakley, C. Burt, and J. Barkley. A
Resource Access Decision Service for CORBA-based Dis-
tributed Systems.
In ACSAC ’99: 15th Annual Computer
Security Applications Conference, pages 310(cid:150)319, 1999.
[7] S. Bodoff, D. Green, K. Haase, E. Jendrock, M. Pawlan, and
B. Stearns. The J2EE tutorial. Addison-Wesley Longman
Publishing Co., Inc., Boston, MA, USA, 2002.
[8] G. Brose. Manageable access control for CORBA. Journal
of Computer Security, 10(4):301(cid:150)337, 2002.
[9] D. Crawford. Communications of the ACM, volume 44.
ACM Press, New York, NY, USA.
[10] N. Damianou, N. Dulay, E. Lupu, and M. Sloman. The
Ponder Policy Speci(cid:2)cation Language. LNCS, 1995:18(cid:150)28,
2001.
[11] B. De Win, W. Joosen, and F. Piessens. Developing secure
applications through aspect-oriented programming. In R. E.
Filman, T. Elrad, S. Clarke, and M. Aks‚it, editors, Aspect-
Oriented Software Development, pages 633(cid:150)650. Addison-
Wesley, Boston, 2005.
[12] D. F. Ferraiolo, R. Sandhu, S. Gavrila, D. R. Kuhn, and
R. Chandramouli. Proposed NIST standard for role-based
access control. ACM Trans. Inf. Syst. Secur., 4(3):224(cid:150)274,
2001.
[13] R. E. Filman and D. P. Friedman. Aspect-Oriented Program-
ming is Quanti(cid:2)cation and Obliviousness, October 2000.
Workshop on Advanced Separation of Concerns, OOPSLA
2000.
[14] ISO. Information technology - open systems interconnec-
tion - security framework for open systems: access control
framework. ISO/IEC 10181-3 (ITU-T X.812).
[15] S. Jajodia, P. Samarati, M. L. Sapino, and V. S. Subrahma-
nian. Flexible support for multiple access control policies.
ACM Trans. Database Syst., 26(2):214(cid:150)260, 2001.
[16] G. Karjoth. Access control with IBM Tivoli access manager.
ACM Trans. Inf. Syst. Secur., 6(2):232(cid:150)257, 2003.
[17] B. Lampson, M. Abadi, M. Burrows, and E. Wobber. Au-
theory and practice.
thentication in distributed systems:
ACM Trans. Comput. Syst., 10(4):265(cid:150)310, 1992.
[18] U. Z. Leuven. Leuvense Internet Samenwerking Artsen
(LISA). www.uzleuven.be/UZroot/content/Zorgverleners
/login/lisa/ (dutch).
and D. Reeves.
What
What
. . . ?
http://www.evidence-based-
is
[19] S. Middleton,
J. Barnett,
is an integrated care pathway?
series,
medicine.co.uk/What is series.html.
2003.
3(3),
[20] OASIS. Core Speci(cid:2)cation: eXtensible Access Control
Markup Language (XACML) Version 2.0.
[21] Object Management Group. OMG Model Driven Architec-
ture. http://www.omg.org/mda/.
[22] H. Ossher and P. Tarr. Using multidimensional separation
of concerns to (re)shape evolving software. Commun. ACM,
44(10):43(cid:150)50, 2001.
[23] R. Pawlak, L. Seinturier, L. Duchien, and G. Florin. JAC:
In Re(cid:3)ection’01,
A Flexible Framework for AOP in Java.
volume 2192 of Lecture Notes in Computer Science, pages
1(cid:150)24. Springer-Verlag, September 2001.
[24] Secretary of the Department of Health and Human Services.
Final Privacy Rule, August 2002.
[25] Secretary of the Department of Health and Human Services.
Final Security Rule, February 2002.
[26] E. Song, R. Reddy, R. France, I. Ray, G. Georg, and
R. Alexander. Veri(cid:2)able composition of access control and
application features.
In SACMAT ’05: Proceedings of the
tenth ACM symposium on Access control models and tech-
nologies, pages 120(cid:150)129, New York, NY, USA, 2005. ACM
Press.
[27] Sun Microsystems. Java Authorization Contract for Con-
tainers, (cid:2)nal release, November 2003. JSR-115.
[28] B. Van den Bosch. The design and the development of the
hospital information system of the U.Z. Leuven. PhD thesis,
Katholieke Universiteit Leuven, 1996.
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE