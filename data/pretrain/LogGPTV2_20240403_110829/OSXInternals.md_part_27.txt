Consider the trivial function shown in Figure 322, along with the corresponding annotated assembly
code.
Figure 322. Assembly listing for a C function with no arguments and an empty body
$ cat function.c
void
function(void)
{
}
$ gcc -S function.c
$ cat function.s
...
_function:
stmw r30,-8(r1) ; Prologue: save r30 and r31
stwu r1,-48(r1) ; Prologue: grow the stack 48 bytes
mr r30,r1 ; Prologue: copy stack pointer to r30
lwz r1,0(r1) ; Epilogue: pop the stack (restore frame)
lmw r30,-8(r1) ; Epilogue: restore r30 and r31
blr ; Epilogue: return to caller (through LR)
The Red Zone
Just after a function is called, the function's prologue will decrement the stack pointer
from its existing location to reserve space for the function's needs. The area above the
stack pointer, where the newly called function's stack frame would reside, is called the
Red Zone.
In the 32-bit Darwin ABI, the Red Zone has space for 19 GPRs (amounts to 19 x 4 = 76
bytes) and 18 FPRs (amounts to 18 x 8 = 144 bytes), for a total of 220 bytes. Rounded up
to the nearest 16-byte boundary, this becomes 224 bytes, which is the size of the Red
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh687B.htm 20.08.2007
Chapter 3. Inside an Apple Page 63 of 83
Zone.
Normally, the Red Zone is indeed occupied by the callee's stack frame. However, if the
callee does not call any other functionthat is, it is a leaf functionthen it does not need a
parameter area. It may also not need space for local variables on the stack if it can fit all
of them in registers. It may need space for saving the nonvolatile registers it uses (recall
that if a callee needs to save the CR and LR, it can save them in the caller's linkage area).
As long as it can fit the registers to save in the Red Zone, it does not need to allocate a
stack frame or decrement the stack pointer. Note that by definition, there is only one leaf
function active at one time.
3.4.3.1. Stack Usage Examples
Figures 323 and 324 show examples of how the compiler sets up a function's stack depending on the
number of local variables a function has, the number of parameters it has, the number of arguments it
passes to a function it calls, and so on.
Figure 323. Examples of stack usage in functions
[View full size image]
Figure 324. Examples of stack usage in functions (continued from Figure 323)
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh687B.htm 20.08.2007
Chapter 3. Inside an Apple Page 64 of 83
f1 is identical to the "null" function that we encountered in Figure 322, where we saw that the
compiler reserves 48 bytes for the function's stack. The portions shown as shaded in the stacks are
present either for alignment padding or for some current or future purpose not necessarily exposed
through the ABI. Note that GPR30 and GPR31 are always saved, GPR30 being the designated frame
pointer.
f2 uses a single 32-bit local variable. Its stack is 64 bytes.
f3 calls a function that takes no arguments. Nevertheless, this introduces a parameter area on f3's
stack. A parameter area is at least eight words (32 bytes) in size. f3's stack is 80 bytes.
f4 takes eight arguments, has no local variables, and calls no functions. Its stack area is the same size
as that of the null function because space for its arguments is reserved in the parameter area of its
caller.
f5 takes no arguments, has eight word-size local variables, and calls no functions. Its stack is 64
bytes.
3.4.3.2. Printing Stack Frames
GCC provides built-in functions that may be used by a function to retrieve information about its
callers. The current function's return address can be retrieved by calling the
__builtin_return_address() function, which takes a single argumentthe level, an integer
specifying the number of stack frames to walk. A level of 0 results in the return address of the current
function. Similarly, the __builtin_frame_address() function may be used to retrieve the frame
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh687B.htm 20.08.2007
Chapter 3. Inside an Apple Page 65 of 83
address of a function in the call stack. Both functions return a NULL pointer when the top of the stack
has been reached.[53] Figure 325 shows a program that uses these functions to display a stack trace.
The program also uses the dladdr() function in the dyld API to find the various function addresses
corresponding to return addresses in the call stack.
[53] For __builtin_frame_address() to return a NULL pointer upon reaching the top of
the stack, the first frame pointer must have been set up correctly.
Figure 325. Printing a function call stack trace[54]
// stacktrace.c
#include 
#include 
void
printframeinfo(unsigned int level, void *fp, void *ra)
{
int ret;
Dl_info info;
// Find the image containing the given address
ret = dladdr(ra, &info);
printf("#%u %s%s in %s, fp = %p, pc = %p\n",
level,
(ret) ? info.dli_sname : "?", // symbol name
(ret) ? "()" : "", // show as a function
(ret) ? info.dli_fname : "?", fp, ra); // shared object name
}
void
stacktrace()
{
unsigned int level = 0;
void *saved_ra = __builtin_return_address(0);
void **fp = (void **)__builtin_frame_address(0);
void *saved_fp = __builtin_frame_address(1);
printframeinfo(level, saved_fp, saved_ra);
level++;
fp = saved_fp;
while (fp) {
saved_fp = *fp;
fp = saved_fp;
if (*fp == NULL)
break;
saved_ra = *(fp + 2);
printframeinfo(level, saved_fp, saved_ra);
level++;
}
}
void f4() { stacktrace(); }
void f3() { f4(); }
void f2() { f3(); }
void f1() { f2(); }
int
main()
{
f1();
return 0;
}
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh687B.htm 20.08.2007
Chapter 3. Inside an Apple Page 66 of 83
$ gcc -Wall -o stacktrace stacktrace.c
$ ./stacktrace
#0 f4() in /private/tmp/./stacktrace, fp = 0xbffff850, pc = 0x2a3c
#1 f3() in /private/tmp/./stacktrace, fp = 0xbffff8a0, pc = 0x2a68
#2 f2() in /private/tmp/./stacktrace, fp = 0xbffff8f0, pc = 0x2a94
#3 f1() in /private/tmp/./stacktrace, fp = 0xbffff940, pc = 0x2ac0
#4 main() in /private/tmp/./stacktrace, fp = 0xbffff990, pc = 0x2aec
#5 tart() in /private/tmp/./stacktrace, fp = 0xbffff9e0, pc = 0x20c8
#6 tart() in /private/tmp/./stacktrace, fp = 0xbffffa40, pc = 0x1f6c
[54] Note in the program's output that the function name in frames #5 and #6 is tart. The
dladdr() function strips leading underscores from the symbols it returnseven if there is
no leading underscore (in which case it removes the first character). In this case, the
symbol's name is start.
3.4.4. Function Parameters and Return Values
We saw earlier that when a function calls another with arguments, the parameter area in the caller's
stack frame is large enough to hold all parameters passed to the called function, regardless of the
number of parameters actually passed in registers. Doing so has benefits such as the following.
The called function might want to call further functions that take arguments or might want to
use registers containing its arguments for other purposes. Having a dedicated parameter area
allows the callee to store an argument from a register to the argument's "home location" on the
stack, thus freeing up a register.
It may be useful to have all arguments in the parameter area for debugging purposes.
If a function has a variable-length parameter list, it will typically access its arguments from
memory.
3.4.4.1. Passing Parameters
Parameter-passing rules may depend on the type of programming language usedfor example,
procedural or object-oriented. Let us look at parameter-passing rules for C and C-like languages.
Even for such languages, the rules further depend on whether a function has a fixed-length or a
variable-length parameter list. The rules for fixed-length parameter lists are as follows.
The first eight parameter words (i.e., the first 32 bytes, not necessarily the first eight arguments)
are passed in GPR3 through GPR10, unless a floating-point parameter appears.
Floating-point parameters are passed in FPR1 through FPR13.
If a floating-point parameter appears, but GPRs are still available, then the parameter is placed
in an FPR, as expected. However, the next available GPRs that together sum up to the floating-
point parameter's size are skipped and not considered for allocation. Therefore, a single-
precision floating-point parameter (4 bytes) causes the next available GPR (4 bytes) to be
skipped. A double-precision floating-point parameter (8 bytes) causes the next two available
GPRs (8 bytes total) to be skipped.
If not all parameters can fit within the available registers in accordance with the skipping rules,
the caller passes the excess parameters by storing them in the parameter area of its stack frame.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh687B.htm 20.08.2007
Chapter 3. Inside an Apple Page 67 of 83
Vector parameters are passed in VR2 through VR13.
Unlike floating-point parameters, vector parameters do not cause GPRsor FPRs, for that
matterto be skipped.
Unless there are more vector parameters than can fit in available vector registers, no space is
allocated for vector parameters in the caller's stack frame. Only when the registers are
exhausted does the caller reserve any vector parameter space.
Let us look at the case of functions with variable-length parameter lists. Note that a function may
have some number of required parameters preceding a variable number of parameters.
Parameters in the variable portion of the parameter list are passed in both GPRs and FPRs.
Consequently, floating-point parameters are always shadowed in GPRs instead of causing
GPRs to be skipped.
If there are vector parameters in the fixed portion of the parameter list, 16-byte-aligned space is
reserved for such parameters in the caller's parameter area, even if there are available vector
registers.
If there are vector parameters in the variable portion of the parameter list, such parameters are
also shadowed in GPRs.
The called routine accesses arguments from the fixed portion of the parameter list similarly to
the fixed-length parameter list case.
The called routine accesses arguments from the variable portion of the parameter list by
copying GPRs to the callee's parameter area and accessing values from there.
3.4.4.2. Returning Values
Functions return values according to the following rules.
Values less than one word (32 bits) in size are returned in the least significant byte(s) of GPR3,
with the remaining byte(s) being undefined.
Values exactly one word in size are returned in GPR3.
64-bit fixed-point values are returned in GPR3 (the 4 low-order bytes) and GPR4 (the 4 high-
order bytes).
Structures up to a word in size are returned in GPR3.
Single-precision floating-point values are returned in FPR1.
Double-precision floating-point values are returned in FPR1.
A 16-byte long double value is returned in FPR1 (the 8 low-order bytes) and FPR2 (the 8 high-
order bytes).
A composite value (such as an array, a structure, or a union) that is more than one word in size
is returned via an implicit pointer that the caller must pass. Such functions require the caller to
pass a pointer to a memory location that is large enough to hold the return value. The pointer is
passed as an "invisible" argument in GPR3. Actual user-visible arguments, if any, are passed in
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh687B.htm 20.08.2007
Chapter 3. Inside an Apple Page 68 of 83
GPR4 onward.
3.5. Examples
Let us now look at several miscellaneous examples to put some of the concepts we have learned into
practice. We will discuss the following specific examples:
Assembly code corresponding to a recursive factorial function
Implementation of an atomic compare-and-store function
Rerouting function calls
Using a cycle-accurate 970FX simulator
3.5.1. A Recursive Factorial Function
In this example, we will understand how the assembly code corresponding to a simple, high-level C
function works. The function is shown in Figure 326. It recursively computes the factorial of its
integer argument.
Figure 326. A recursive function to compute factorials
// factorial.c
int
factorial(int n)
{
if (n > 0)
return n * factorial(n - 1);
else
return 1;
}
$ gcc -Wall -S factorial.c
The GCC command line shown in Figure 326 generates an assembly file named factorial.s. Figure
327 shows an annotated version of the contents of this file.
Figure 327. Annotated assembly listing for the function shown in Figure 326
; factorial.s
.section __TEXT,__text
.globl _factorial
_factorial:
; LR contains the return address, copy LR to r0.
mflr r0
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh687B.htm 20.08.2007
Chapter 3. Inside an Apple Page 69 of 83
; Store multiple words (the registers r30 and r31) to the address starting
; at [-8 + r1]. An stmw instruction is of the form "stmw rS,d(rA)" -- it
; stores n consecutive words starting at the effective address (rA|0)+d.
; The words come from the low-order 32 bits of GPRs rS through r31. In
; this case, rS is r30, so two words are stored.
stmw r30,-8(r1)
; Save LR in the "saved LR" word of the linkage area of our caller.
stw r0,8(r1)
; Grow the stack by 96 bytes:
;
; * 24 bytes for our linkage area
; * 32 bytes for 8 words' worth of arguments to functions we will call
; (we actually use only one word)
; * 8 bytes of padding
; * 16 bytes for local variables (we actually use only one word)
; * 16 bytes for saving GPRs (such as r30 and r31)
;
; An stwu instruction is of the form "stwu rS, d(rA)" -- it stores the
; contents of the low-order 32 bits of rS into the memory word addressed
; by (rA)+d. The latter (the effective address) is also placed into rA.
; In this case, the contents of r1 are stored at (r1)-96, and the address
; (r1)-96 is placed into r1. In other words, the old stack pointer is
; stored and r1 gets the new stack pointer.
stwu r1,-96(r1)
; Copy current stack pointer to r30, which will be our frame pointer --
; that is, the base register for accessing local variables, etc.
mr r30,r1
; r3 contains our first parameter
;
; Our caller contains space for the corresponding argument just below its
; linkage area, 24 bytes away from the original stack pointer (before we
; grew the stack): 96 + 24 = 120
; store the parameter word in the caller's space.
stw r3,120(r30)
; Now access n, the first parameter, from the caller's parameter area.
; Copy n into r0.
; We could also use "mr" to copy from r3 to r0.