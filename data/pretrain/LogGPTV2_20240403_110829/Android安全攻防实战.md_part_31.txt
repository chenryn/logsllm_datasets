在真实环境中使用SSL自签名证书
Androidapp的开发人员都知道：在编译/生成代码时，他们还是可以和服务器进
行通信的。有时甚至还能控制服务器。如果你遵循这里提到的验证步骤，那么你完
全可以在真实的环境中，使用自签名证书，而不会发生安全问题。这样做的好处在
于：你不会受到证书颁发机构（CA）被黑事件的波及，还能省下用来更新SSL证书
的大把银子。
HttpsUriConnection
考虑到你可能还是更喜欢使用HtpsURLConnectionAPI，尽管这并不会带来更多
安全上的好处，我们在这里还是会在它的基础上编写代码。我们采取略微不同的方
法创建一个自定义的 TrustManager类，用它来验证本地 truststore 文件。
1.创建自定义TrustManager类。
X509TrustManager [
public class LocalTrustStoreTrustManager implements
private X509TrustManager mTrustManager;
217
---
## Page 236
Android安全攻防实战
public LocalTrustStoreTrustManager (KeyStore localTrustStore){
try{
TrustManagerFactory factory = TrustManagerFactory
- getInstance (TrustManagerFactory - getDefaultAlgorithm()) 
factory.init (localTrustStore) ;
mTrustManager = findX509TrustManager (factory) =
if  (mTrustManager == null) {
throv new I1legalStateException (
"Cou1dn′t find X509TrustManager*)1
] catch (GeneralSecurityException e) f
throw nev RuntimeException (e) :
BOverride
public void checkClientTrusted (x509Certificate[] chain, String
authType)
throws CertificateException (
mTrustManager, checkClientTrusted (chain, authType) 
JI
BOverrLde
public void checkServerTrusted (X509Certificate[] chain, String
authType)
throws CertificateException {
mTrustManager , checkServerTrusted (chain, authType) /
BOverride
public X509Certificate[] getAcceptedIssuers ()(
return mTrustManager. getAcceptedIssuers () :
private X509TrustManager findX509TrustManager (TrustManagerFacto
ry tmf)(
TrustManager trustManagers[] = tmf getTrustManagers () :
for (1.nt 1 - 0; 1 < trustManagers.length; i++) (
if (trustManagers[1] instanceof X509TrustManager)(
return (X509TrustManager) trustManagers[1]:
上
return nul1;
218
---
## Page 237
第7章网络安全
我们这个LocalTrustStoreTrustManager 类使用了X509TrustManager 接口，它
的构造函数接受的唯一一个参数，就是个KeyStore对象。它就是我们在本实
验的之前步骤中创建并加载的那个。正如前面所指出的，这个KeyStore对象
被称为 truststore，因为其中存放的是我们所信任的证书。我们用 truststore 初
始化了这个TrustManagerFactory类，然后用findX509TrustManagerO方法，
又得到了X509TrustManagcr接口在系统中的实现。然后，我们记下对
X509TrustManager的引用，它会用我们的 truststore，而不是系统的 truststore，
去验证连接的证书是否可信。
2.下面是个用HttpsURLConnection和上一步中自定义的 TrustManager类，发送
HTTP GET 请求的例子。
public InputStrean uRLConnectionRequestLocalTruststore (String
targetUr1)
throws Exception (
URL ur] = new URL(targetUr1):
SSLContext sc = SSLContext-getInstance (*TLS*):
scIn.t (nu11, new TrustManager [](
new LocalTrustStoreTrustManager {
LoadKeyStore ()) 1, new SecureRandom()) :
HttpsURLConnection,setDefaultSSLSocketFactory (sc.getSocketFactory 
) ) ;
HttpsURLConnection ur1HttpsConnection =
(HttpsURLConnectlon) ur1,openConnection () :
urlHttpsConnection.setRequestMethod (*G&T") 
urlHttpsConnect.ion connect () 
return urlHttpsConnection getInputStream () 
我们用LocalTrustStoreTrustManager 类初始化了SSLContext，这样当我们调
用sc.getSocketFactoryO方法时，就得到了我们的TrustManager实现。然后我
们用 setDefaultSSLSocketFactoryO把它重新设为HttpsURLConnection的默认
SSLSocketFactory。这就是用URLConncction 成功连接我们的自签名SSL资
源时，你所要做的一切。
错误的做法一不能做的事
糟糕的是，当开发者准备使用自签名证书或者由未受信任的CA（证书颁发机构）
219
---
## Page 238
Android安全攻防实战
颁发的SSL证书时，如果他去网上搜索相关代码，会搜到一种在各大论坛和留言板
上广为流传的错误做法。
就让我们来看这个X509TrustManager接口的不安全实现吧：
public class TrustA11x509TrustManager inplements X509TrustManager [
gOverride
public void checkClientTrusted (x509Certificate [] chain, String
authType)
throws CertificateException {
// do nothing, trust al1 1 (
gOverrlde
pub1ic void checkServerTrusted (x509Certificate [] chain, String
authType)
throws CertificateException {
// do nothing, trust all :(
F
BOverride
pub1ic X509Certificate[]getAcceptedIssuers ()(
return nu11:
正如你从代码中看到的，chcckServerTrusted方法啥都没做，认为所有的服务器
都是可信的。这使得HTTPS 通信完全暴露在中间人攻击（man-in-the-middle，MITM)
的危险下，完全抹杀了使用证书的意义。
拓展阅读
·本章后面的SSLpin实验会展示了一个类似的增强SSL连接验证的方法。
·Android 培训文档中，有关 HTTPS 和 SSL 安全的页面位于htps:/developer.
android.com/training/articles/security-ssl.html.
● Bouncy Castle Java /加m API 在 http:/www.bouncycastle.org/latest_releases.html。
·Android 开发人员参考指南中HtpsURLConncction 相关内容的页面位于
https://developer.android.com/reference/javax/net/ssl/HttpsURLConnection.html。
·Android开发人员参考指南中SSLSocketFactory相关内容的页面位于
https://developer.android.com/reference/javax/net/ssl/SSLSocketFactory.html 。
220
---
## Page 239
第7章网络安全
7.3使用OnionKit库中的StrongTrustManager
在这个实验中，我们要利用Guardian的一个分支项目中出色的工作，来加强我
们app 建立 SSL 连接时的验证。具体来说，我们要使用的 StrongTrustManager。
准备工作
OnionKit是作为一个Android 库项目（library project）发布的。在我们开始这个
实验之前，要先从GitHub 的网页（https:/github.com/guardianproject/OnionKit）上下
载OnionKit 库。
然后，就像使用其他Android库项目一样，把它解压开来并添加到你的项目中去。
怎么做·.
我们开始吧！
1.在代码中整合进 StrongTustManager类是再简单不过的事了。只要替换掉你的
HttpClient实现就行了、因此，把下面的代码。
pub1ic HttpResponse sampleRequest () throws Exception {
HttpClient httpclient = new DefaultHttpClient ():
HttpGet httpget - new
HttpGet (*https: //server , com/path?apikey=123") 
HttpResponse response - httpelient,execute (httpget) ;
return responseJ
换成如下样子。
pub1ic HttpResponse strongSampleRequest () throws Exception (
StrongittpsCllent httpclient = nev StrongHttpsClient (context) :
ch.boye.httpclientandroidlib.client.methods.HttpGet httpget
nev HttpGet (
*https:/ /server, com/path7ap1key123=) ;
HttpResponse response = httpcllent ,execute ()
return responsej
在你的代码中，把 import org.apache.http.*换成 ch.boye.httpclientandroidlib.*,
OnionKit 中使用的 HTTPGET 和 HttpResponse 对象，来自另一个名为
httpclientandroidlib 的库（它也包括在 OnionKit 中）。Httpclientandroidlib 是对
①现名为NetCipher。—译者注
221
---
## Page 240
Android安全攻防实战
HTTPClient 4.2.3（for Android版）的重新打包，其中包括了Android SDK中
标准HttpClient 库的更新和 bug 修复。
2.启用通知功能。
httpclient-getStrongTrustManager () setNotifyVerificationFai1 (true)
这是一个非常有用的功能，它可以通知用户有验证问题，以及当前连接的
Intermet资源是不安全的。
3.启用对证书链的全面验证。
httpclLent ,getStrongTrustManager () , setVerifyChain (true) 
把 verifyChain 设为 true 之后,调用 TrustManager.checkServerTrustedserver(..)
方法，进行HTTPS 连接时，将会对整个证书链上的所有证书进行验证。默
认情况下，这个功能是启用的。
4.启用弱加密算法检查。
httpelient ,getStrongTrustManager () , setCheckCha.inCrypto (true) /
这将检查证书链中各个证书中有没有使用MD5算法，MD5算法被认为是有
问题，而应当避免使用的。这个功能默认也是启用的。
进一步说明
在本章中，我们使用了HtpClicntAPI，你可能想知道，为什么后来Android会
弃用HrtpClient API.这需要解释一下，谷歌弃用HtpClient版本（包括在Android SDK
中）的原因是它有一些bug。目前，谷歌建议使用URLConnection 来代替它。不过，
我们前面说过，OnionKit使用的HttpClientAPI库是个独立的、已经更新过的并且己
经修补了bug的版本，以后应该不会被弃用。
Orbot和Tor网络
Tor项目是个免费的洋葱路由的实现，它能提供网络匿名性和防止网络上传递的
数据被监听。Orbot是一个免费的Android app程序，提供了一个专供其他Android
app 使用的代理（proxy）。
OnionKit 的另一个关键特性是让你的 app能通过Orbot提供的代理连上互联网，
因此使通过它传递的网络流量匿名化
OrbotHelper类不光能帮助我们确定Orbot app是不是已经安装并运行了，同时它
还提供了用起来很方便的方法去启动和使用它。
222
---
## Page 241
第7章网络安全
PIN 码和 CACert
在与Guardian项目库中另一个叫做CAcert 的库一起使用时，StrongTrustManager
类可以通过限定可信的根证书颁发机构（CA），提供有限的证书信任限制。
我们将在下一节中更详细地讨论SSL证书信任限制，并创造我们自己的
TrustManager类，用它来限定我们的 SSL证书链中受信的证书，这些被限定受信的
证书既可以是CA，也可以是自签名的证书。
拓展阅读
●有关 AndroidOnionKit 的文章在 https:/guardianproject.info/code/onionkit/。
●Orbot:Android appTor 代 理在 https:/play.google.com/store/apps/details?id
org.torproject.android.
·OnionKit项目使用的是对AndroidHttpClient 4.2.3的重新包装(https://code
google.com/p/httpclientandroidlib/)。
●用于限制受信任的根 CAs的 CACert项目在 https://github.com/guardianproject
cacert.
7.4SSLpinning限定受信SSL的范围
证书颁发机构（CA）是用来解决正规网络客户端（如Web浏览器，IM和电邮
客户端）的密钥分配问题的。这些客户端程序需要与很多程序开发人员事先无法预
知的服务器进行通信。正如我们之前实验中已经讨论过的那样，你的 app一般是知
道要和那些后端服务或服务器进行通信的，所以对其信任的根CA予以限制是明智
的。
Android目前信任约130个CA，在不同的生产商和版本之间，这张受信列表可
能会稍有不同。这也限制了其他CA根并提高了连接的安全性。如果这些受信CA中
的某一个被黑了，攻击者就会利用被黑的CA的根证书签署和发布我们服务器域中的
新证书。这时，攻击者就可以对我们的app进行中间人（MITM）攻击。这是因为标
准HTTPS客户端验证会认为新的证书是可信的。
SSLpinning是一种限定谁是可信的方法，它通常是通过以下两种途径来实现的。
·Certificate pinning—限定可信证书。
·Public key pinning—限定可信公钥。
在本章7.2节“验证SSL自签名证书”中，我们实际上也使用了限定可信证书。
223
---
## Page 242
Android安全攻防实战
即，把可信的证书限定在本地truststore 中记录的证书集中。在使用一个CA时，你
应当把你服务器的 SSL证书，再加上签署该证书的根和所有中间证书都添加到本地
truststore中。这会使得整个证书链获得全面验证。这时，如果其中某个CA被黑，签
署了一张新证书，它还是不能通过本地truststore验证的。
限定可信公钥遵循的是同一个的思想，但实现起来略有难度一需要做一个额外
的步骤：从SSL证书中把公钥提取出来，而不是简单地将证书与app绑定在一起。
但多做的这一步是值得的，因为证书更新后，公钥证书仍会保持不变。这就意味着
SSL证书更新后不必强制用户升级app。
在这个实验中，我们将用Android.com作例子，去限定几个可信的证书公钥。本
次实验由两个不同的部分组成。第一个部分，是运行一个独立的Java实用程序从证
书链中的所有 SSL证书中获取公钥，并将其转换为hash值，嵌入或绑定在你的 apP
中。这里之所以我们嵌入公钥的 SHA1hash值，是因为它更安全。
第二部分要编写app的代码，解决如何在运行时验证限定的可信公钥的问题，以
确定某个特定的SSL连接是否可信。
怎么做·
我们开始吧！
1.我们先要创建一个名为CalcPins.java 的独立的Java 程序，然后在命令行下运
行它，获取并打印出各个证书公钥的 SHAlhash。因为我们要处理的是CA
签署的证书，所以证书链中至少会有两张证书。第一步主要是初始化，并把
获取到参数传递给fetchAndPrintPinHashs方法。
public class CalcPins {
private MessageDigest digestj
public CalcPins () throvs Exoeption {
digest = MessageDigest getInstance (*SHA1*) ;
public static void main(String[] args) [
1f ((args.length "= 1) 11(args, length == 2))(