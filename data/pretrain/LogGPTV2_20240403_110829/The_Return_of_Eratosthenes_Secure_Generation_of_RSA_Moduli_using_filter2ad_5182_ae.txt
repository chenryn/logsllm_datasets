from all parties, First, compute
𝑦 =𝛾 (𝑁−𝑝−𝑞+1)/4 mod 𝑁 and send 𝑦 to S. Then, receive 𝑦′ from
S and send 𝑦′ to all parties. Finally, if 𝑦′ ≠ ±1 then send Abort
to all parties.
(4) On receiving Consistency Check from all parties, if 𝑦′ received
during the Jacobi command was not equal to 𝑦, then send Abort
to all parties.
compute
from all
𝑏 = gcd(𝑁 , (𝑝 + 𝑞 − 1)). If 𝑏 = 1, send (𝑏, Biprime) to all
parties, otherwise send (𝑏,Non Biprime).
receiving GCD Test
parties,
(5) On
Figure 11: RSA Modulus Generation Functionality
multiplication is done over Z/(𝑀sampleZ), parties set their local
share as 𝑝( 𝑗) = 𝑝′( 𝑗) +𝑟 ( 𝑗) · 𝑀sample and use this in the CRT Input
procedure, over ℓ𝑐 CRT components, and thus ℓ𝑐 MPC engines.
Once two candidate primes 𝑝 and 𝑞 have been sampled in a secret
shared fashion as described above, the Combine phase begins. First,
the parties sum the contributions of each party into the additive
sharing, over ℓ𝑐CRT components. Then, the candidate biprime is
computed, using an actively secure multiplication over the CRT
representation of the sharings of 𝑝 and 𝑞. Lastly, the parties open the
resulting candidate biprime 𝑁 , and each party 𝑃 𝑗 locally performs
the CRT reconstruction and obtains the biprime 𝑁 in the standard
form. Each party checks that the biprime respects the bounds in
which it should lie, and that it is not coprime to the upper bound
of the sampling range.
The parties then begin the biprimality testing with the Jacobi test,
which needs to be repeated 128 times. The core of the Jacobi test we
design offers passive security; to achieve active security, should the
Jacobi test pass, we proceed with the Consistency Check phase. This
step ensures that parties cannot go undetected, if they use inconsis-
tentsharingsintheJacobitest.Torealizethis,firstweneedtoincrease
our computing space to avoid potential overflows. We do that by
means of the LevelUp command, which allows us to receive the same
sharings in a CRT representation with additional CRT components
(to accommodate the computations). Concretely, we extend from ℓ𝑐
components of the combine step, to ℓJac components, which suffice
Session 2D: Secure Multiparty Computation CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea602for the correctness of the consistency check of the Jacobi. Then, us-
ing the Rand2k command, we receive bounded shared randomness
in the CRT form with ℓJac components. Using this randomness, we
multiplicatively mask (guaranteed without overflow) the exponent
of the Jacobi test, where the parties’ shares have been contributed.
This latter product is then converted from a CRT sharing with ℓJac
components to an integer sharing by calling the ConvInt command.
The integer sharing is used to exponentiate the public value 𝛾 used
in the Jacobi test, and it is then broadcasted. The randomness used
in the masking operation is revealed, so that the parties can perform
the final exponentiation of the Jacobi value computed to the power
of the randomness in the clear. From the broadcasted values, the
parties can also reconstruct again the masked version of the Jacobi
test exponentiation. If the two latter values do not match, then some
parties have input inconsistent shares, and the protocol aborts.
The last phase of our protocol is the GCD test, aiming at detecting
(and discarding) any false positive biprimes that passed the Jacobi
the secret(cid:74)𝑝+𝑞−1(cid:75), and if their GCD equals 1, the test passes. Let
test. The GCD test is performed between the public biprime 𝑁 , and
𝑄gcd > 𝑉 · 𝑁 , where 𝑉 = 23𝜆+4𝜎. The goal is to output the product
$← [𝑁], and then perform
𝑎 · (𝑝 +𝑞 − 1) + 𝑣 · 𝑁 mod 𝑄gcd, where 𝑎
the gcd computation between 𝑁 and 𝑎·(𝑝+𝑞−1)+𝑣 · 𝑁 on public
values. In our case 𝑣 needs to statistically mask the product between
𝑎, which has 2(𝜆+𝜎) bits length, and 𝑝+𝑞−1, which has 𝜆+𝜎 bits
length. Hence, log2𝑣 =3(𝜆+𝜎)+𝜎. Next, 𝑀ℓgcd
is computed, so that
𝑣·𝑁 fits 𝑄gcd, which makes 𝑀ℓgcd
On a step by step basis, for the GCD test we use again the LevelUp
command to extend the number of CRT components in our sharings
of 𝑝 and 𝑞. For the masking, similarly to the Jacobi test, we sample
bounded randomness in CRT form with ℓgcd components, using
again the Rand2k command. Before we open and reconstruct the
final value ˆ𝑧, the gcd of which needs to be checked against the public
biprime 𝑁 , we also perform an additive masking with a bounded
random value 𝑣. This ensures that no information about the sum
of 𝑝 and 𝑞, involved in the multiplicatively masking, can be factored
out upon opening. Upon opening and reconstuction of the masked
value, the final GCD test is performed, and if the open value is not
coprime to 𝑁 the protocol outputs abort and restarts.
to be 5𝜆+6𝜎 bits long.
Theorem 4.1. The execution of the protocol ΠRSAGen UC-securely
realizes the functionality FRSAGen, in the (FABBWithErrors, FMPC,
FAgreeRandom, FBroadcast)-hybrid model with statistical security
against a static, active adversary that corrupts up to 𝑛−1 parties.
We refer the reader to Appendix A for the proof of Theorem 4.1.
5 PARAMETERS AND EFFICIENCY ANALYSIS
We generate biprimes of various bit-lengths, and hence security
levels; namely 𝜆 ={1024,1536,2048} as in the work of Chen et al. [7].
In the cases where a statistical security parameter 𝜎 needs to be
considered, such as in the Sampling Phase, Jacobi test, masking and
underlying MPC engines, we make sure to set 𝜎 =80 to have a fair
comparison with the analysis of Chen et al. [7], since they also used
𝜎 =80, when measuring their concrete costs.
Given that our protocol requires several types of MPC engines,
e.g., the ABBWithErrors, or the MPC-CRT, we use the MP-SPDZ
framework [26] to get concrete communication costs for different
adversary structures. In the case of dishonest majority, we instanti-
ate ABBWithErrors using the semi-honest version of the MASCOT
protocol [27], whereas for the malicious case, which we need for
building the MPC-CRT, we use LowGear [28], with TopGear [3] as
the underlying ZK proof. For the 16 parties case, we use the HighGear
protocol with the TopGear ZK-proof, which is also implemented in
MP-SPDZ. The reason for choosing HighGear over LowGear is that
for HighGear communication scales better in the number of parties.
We also give concrete costs for RSA-Sieve in the semi-honest,
dishonest majority model. The only difference with the malicious
case is that MPC-CRT can be instantiated with a cheaper protocol
and no zero-knowledge proofs. For this variant, we use the classical
SPDZ triple generation with no ZK proofs [6, 11], for which we
get concrete costs by running the hemi protocol in MP-SPDZ [26].
The results are given in Table 2 for the two party case, while in
Table 3 we have results for the 16 party case, where we also compare
them with the the protocol of Chen et al. [7]. As it can be inferred
from Table 2, for two parties, our protocol is a factor of 3.3-3.9 more
communication-efficient than the state-of-the-art [7] in the semi-
honest case, and by a factor of 32-37 in the malicious case (ranging
for different bit-lengths of the birprimes generated). For the 16 party
case, the protocol of Chen et al. [7] outperforms ours by a factor of ap-
proximately 2 in the semi-honest case. Then again, for the malicious
case and for 16 parties, our protocol improves the communication
cost over the state-of-the-art [7] by approximately 14-30 times.
In the following, we give an example of how we compute the cost
using 𝜆 =1024, in the dishonest majority case with malicious security.
The number of primes used in the distributed sieving is fixed to 130,
as in the work of Chen et al. [7], to achieve the same number of
Sample iterations. Note that the product of the first 130 primes is
1019 bits long. Frankel et al. [16] select 𝑟 ( 𝑗) in the sampling phase at
random from [0,2𝑛/𝑀sample] where 𝑛 was the desired bit-length of 𝑝.
For 𝜆 being the bit-length of the candidate primes, we need to
take their product in a space of double the size to avoid wrap around.
Hence, 𝑀ℓc
, the product of primes in which the biprimes live, needs
to be of length at least 2𝜆+2𝜎 bits, which results in ℓc =18 (i.e., we
need 18 CRT components of 128 bits each). Similarly, we compute
ℓJac =21 and ℓgcd =46.
(1) Sampling phase. The cost per semi-honest multiplication
per party with ABBWithErrors is (𝑛−1)(128·𝑘+𝑘2), where
𝑛 is the number of parties and 𝑘 is the field size [27]. Since
the cost is quadratic in the field size, our ABBWithErrors will
work over all the small primes composing 𝑀sample.
This brings the communication cost per triple at 17.027
kilobits with a total communication including the Beaver
openings. The Input calls to ABBWithErrors in Step 2
amount to 0.264kbits. This makes steps 2 and 3 having a cost
of 17.291 kbits.
The remaining cost here comes from the Input calls to
FMPC-CRT. This is instantiated using LowGear with TopGear
as ZK proof, where the input tuple cost is 1.35 kbits for a
128-bit prime. This makes Step 7 in the Sampling phase
amount to 48.67 kbits. One iteration of this phase has a total
cost of 65.97 kbits.
(2) Combine. The cost per multiplication triple using FMPC-CRT
amounts to 12.862 kbits per party. This brings the cost of one
Session 2D: Secure Multiparty Computation CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea603Sampling phase. All the steps below are done in parallel for 𝑝 and 𝑞.
ΠRSAGen
Combine
(4) If 𝑦 ≠±1 Abort.
Consistency Check
shared in 𝑀ℓJac
.
GCD test
𝑁 ) =1.
Jacobi test This is executed 𝜎 times (Grassi et al. fashion but carefully so that adding shares in the exponents is done over the integers).
𝑦( 𝑗) =𝛾 (−𝑝( 𝑗)−𝑞( 𝑗) )/4 mod 𝑁 and calls FBroadcast(𝑦( 𝑗)).
𝑗=1𝑦( 𝑗) .
(1) Each party 𝑃 𝑗 samples a multiplicative share ˆ𝑝( 𝑗) , such that gcd(𝑀sample, ˆ𝑝( 𝑗)) =1.
(2) Each party 𝑃 𝑗 calls FABBWithErrors.Input( ˆ𝑝( 𝑗)).
(3) The parties call FABBWithErrors.Mult(𝑝′′, ˆ𝑝(1) ,..., ˆ𝑝(𝑛)).
(4) Parties call FABBWithErrors.Share(𝑝′), such that 𝑃 𝑗 receives the residues of 𝑝′′( 𝑗) for all primes in 𝑀sample.
(5) Parties reconstruct 𝑝′( 𝑗) =CRTRec([𝑝′( 𝑗) ,3·𝛿 𝑗,0],[𝑀sample,4]) where 𝛿 𝑗,0 is the Kronecker delta.
(6) Each party 𝑃 𝑗 samples 𝑟 ( 𝑗) , and computes 𝑝( 𝑗) =𝑝′( 𝑗) +𝑟 ( 𝑗) ·4·𝑀sample, such that 𝑝( 𝑗) ∈ [2𝜆,2𝜆+𝜎 ], for 𝜎 a statistical security parameter.
(7) Each party 𝑃 𝑗 calls FMPC-CRT.Input(𝑝( 𝑗) ,ℓc).
(1) Parties call FMPC-CRT.Sum((cid:74)𝑝,ℓc(cid:75),(cid:74)𝑝(1) ,ℓc(cid:75),...,(cid:74)𝑝(𝑛) ,ℓc(cid:75)) and FMPC-CRT.Sum((cid:74)𝑞,ℓc(cid:75),(cid:74)𝑞(1) ,ℓc(cid:75),...,(cid:74)𝑞(𝑛) ,ℓc(cid:75)).
(2) Parties call FMPC-CRT.Mult((cid:74)𝑁 ,ℓc(cid:75),(cid:74)𝑝,ℓc(cid:75),(cid:74)𝑞,ℓc(cid:75)).
(3) Parties call FMPC-CRT.Open((cid:74)𝑁 ,ℓc(cid:75)).
(4) Each party locally reconstructs 𝑁 =CRTrec(𝑁 ,ℓc), checks that 𝑁 ∈ [22𝜆,22(𝜆+𝜎) ], and 𝐺𝐶𝐷(𝑀sample,𝑁) =1, abort if false.
(1) Parties call FAgreeRandom to sample a public 𝛾 ∈ Z𝑁 . Repeat until Jacobi symbol ( 𝛾
(2) Using their integer shares of 𝑝 and 𝑞, 𝑃1 computes 𝑦(1) =𝛾 (𝑁−𝑝(1)−𝑞(1)+1)/4 mod 𝑁 and calls FBroadcast(𝑦(1)), and each party 𝑃 𝑗 ,𝑗 ≠1 computes
(3) All parties compute 𝑦 =𝑛
(1) Parties call FAdvMPC−CRT.LevelUp with input (ℓJac,(cid:74)𝑝,ℓ𝑐(cid:75)) and (ℓJac,(cid:74)𝑞,ℓ𝑐(cid:75)), receive(cid:74)𝑝,ℓJac(cid:75) and(cid:74)𝑞,ℓJac(cid:75)
(2) Parties call FAdvMPC−CRT.Rand2k with input (ℓJac,𝜎) to get a CRT sharing(cid:74)𝑥,ℓJac(cid:75) of a random value 𝑥, bounded by 2𝜎 .
(3) All parties call FMPC-CRT.Mult((cid:74)𝑡,ℓJac(cid:75),(cid:74)𝑥,ℓJac(cid:75),(cid:74)((𝑁 −𝑝−𝑞+1)/4),ℓJac(cid:75)), where the multiplication result is actually bounded by 𝑀ℓc
(4) Parties call FAdvMPC−CRT.ConvInt((cid:74)𝑡,ℓJac(cid:75)) to obtain an additive sharing of 𝑡 over the integers, denoted as [𝑡]Int.
(5) Each party calls FBroadcast(𝛾𝑡 ( 𝑗)
Int ).
(7) All parties locally check that𝑛
(6) All parties call FMPC-CRT.Open((cid:74)𝑥,ℓJac(cid:75)), and compute 𝑥 =CRTrec(𝑥,ℓJac).
𝑗=1𝛾𝑡 ( 𝑗)
(1) Parties call FAdvMPC−CRT.LevelUp with input (ℓgcd,(cid:74)𝑝,ℓ𝑐(cid:75)) and (ℓgcd,(cid:74)𝑞,ℓ𝑐(cid:75)), receive(cid:74)𝑝,ℓgcd(cid:75) and(cid:74)𝑞,ℓgcd(cid:75)
(2) Parties call FAdvMPC−CRT.Rand2k with input (ℓgcd,2𝜆+2𝜎) to get a CRT sharing(cid:74)𝑎,ℓgcd(cid:75) of a random value 𝑎, bounded by 22𝜆+2𝜎 .
(3) All parties call FMPC-CRT.Mult((cid:74)𝑧,ℓgcd(cid:75),(cid:74)𝑎,ℓgcd(cid:75),(cid:74)(𝑝+𝑞−1),ℓgcd(cid:75)). Note that this is fine because open 𝑁 = 𝑝 · 𝑞 in MPC in the first steps of
(4) Parties call FAdvMPC−CRT.Rand2k with input (ℓgcd,3𝜆+4𝜎) to get a CRT sharing(cid:74)𝑣,ℓgcd(cid:75) of a random value 𝑣, bounded by 23𝜆+4𝜎 .
(5) All parties call FMPC-CRT.Add((cid:74)ˆ𝑧,ℓgcd(cid:75),(cid:74)𝑧,ℓgcd(cid:75),(cid:74)𝑣·𝑁 ,ℓgcd(cid:75)).
(6) All parties call FMPC-CRT.Open((cid:74)ˆ𝑧,ℓgcd(cid:75)), and compute ˆ𝑧 =CRTrec( ˆ𝑧,ℓgcd).
(7) Locally check whether gcd(𝑁 ,ˆ𝑧) =1. Otherwise parties output Abort and restart the protocol.
candidate generation to enforce input consistency.
Int = 𝑦𝑥 . Abort if equality fails.
and CRT
Figure 12: RSA modulus generation protocol based on distributed sieving
execution of Step 2 to 231 kbits. The opening (Step 3) takes
another 2.176 bits. One iteration of this phase has a total cost
of 233 kbits.
(3) Jacobi test. The cost of this phase is simply log2(𝑁) · 𝑛,
which is 2𝑛·𝜆 or about 4 kbits.
(4) Consistency check. This phase begins with a call to LevelUp
from ℓc to ℓJac. The LevelUp protocol is ran twice, once for
each candidate 𝑝 and 𝑞. Concretely, per run, LevelUp requires
ℓJac − ℓ𝐶 = 3 inputs per party, ℓJac multiplications and ℓJac
openings on the CRT components. The more expensive part
of LevelUp generates 𝜆+4· 𝜎 = 1344 maBits which amount
to 22 Mbits, roughly the cost of one iteration of LevelUp. The
entire cost of Step 1 in the consistency check is 44,551 kbits.
Next, parties call Rand2k, which roughly costs 𝜎 random bit
generations, concretely 2095 kbits. The multiplication cost is
simply ℓJac·12.862 =270.1 kbits. The call to ConvInt requires
a call to Rand2k and one opening, which amounts to 43,222
kbits. Finally, the parties need to broadcast an element in Z𝑁
and then open an element in all the ℓJac CRT components,
which requires communicating 4.8 kbits. One iteration of
this phase has a total cost of 90,143 kbits.
(5) GCD test. Here again we start with a call to LevelUp, which
costs 56, 558 kbits, and then a call to Rand2k for a cost of
45,477 kbits. Next is a multiplication on ℓgcd CRT components
for a total cost of 591.7 kbits. Second to last, we do a final
call to Rand2k with larger parameters, so the cost this time
is 89,307 kbits. Finally, we open ˆ𝑧 for 5.9 kbits. This phase
thus requires a total of 191,940 kbits.
Session 2D: Secure Multiparty Computation CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea604Scheme
𝜅
SH (MB)
ML (GB)
[7]
1024
139
20.81
Ours
1024
41.68
0.64
[7]
1536
416
43.42
Ours
1536
116.55