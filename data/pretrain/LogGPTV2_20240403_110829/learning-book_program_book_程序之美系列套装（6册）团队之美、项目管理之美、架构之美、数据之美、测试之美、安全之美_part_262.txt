表示。我们注意到，为了减少用户交互操作的麻烦，绝大部分的表
单都支持通配符表示。
探寻deep-web站点的问题现在可以划分为两个子问题：
选择一组合适的查询模板；
1478
---
## Page 1480
为绑定输入项选择合适的输入值，即采用实际值来初始化查询模
板。对于一个选择框，可以使用该选择框的所有选项；但是对于文
本输入框，必须预测输入值，而且我们不能假定对于需要考虑的那
些值所在的领域存在先验知识。
为了在说明上尽可能简单，我们假设初始化输入项的一组值对于绑
定输入项的所有模板都是一样的。但是，实际上有些输入可能是相
关的。例如，一个输入项（如cityName)的值可能依赖于选定的另一
个输入项（如state）的值，或者多个输人项（如salaryMax和
salaryMin)可能会约束相同的底层属性。
选择输入项组合
我们首先描述如何判断表单中的输入项和输入项组合对于探寻是有
用的。现在，我们假定表单中的每个输入项的值都是已知的，也就
是说，把文本输入项和选择菜单都统一对待。对文本输入项中的值
进行选择的问题将在第10章探讨。
正如所看到的，我们可以把探寻问题建模为选择一组合适的查询模
板。在选择一组正确的模板中，从识别我们需要追求的一些目标开
始。正如之前所述，简单地枚举所有可能的输入值的笛卡几积的策
略既浪费（给Web爬虫和表单的宿主服务器施加负载负担），又不
必要（因为有大量的URL可能不包含数据记录）。
因为我们想尽可能多地发现deep-web内容，很自然地，其处理策略
的一个目标是最大化底层数据库的覆盖率（即返回记录的所有数
量），同时限制表单提交的总数量。但是，由于我们生成的页面需
要添加到搜索引擎的索引中，因此我们也必须解决一些其他的问
题。
首先，最佳的策略可能是确定一些能够包含大量结果的表单提交。
但是，有大量结果的Web页面并不一定最适合添加到搜索引擎索引
中。举个例子，对一个二手车网站，只有一个包含所有待售的
Honda汽车的页面是没有用的；相反，如果它有多个页面，包含
Honda的每个模型或者不同价格范围则更理想。因此，我们希望生
成在每个页面中既不包含太少也不包含太多记录的URL。
其次，虽然一个搜索引擎的主索引很大，它还是远远不够存储从
DeepWeb抽取的所有页面。由于搜索引擎最重要的目标是根据用户
1479
---
## Page 1481
的查询将用户引导到相关的Web站点，我们更希望拥有来自很多站
点的丰富且重要的内容。从某种意义上说，生成的URL个数不需要
是完整的，但必须足够好以便将流量引导到底层站点。
再次，对于Wweb站点探寻来说，实际上不需要追求百分百的覆盖
率；为一个站点的那些内容丰富的页面建立Web索引就足够了。定
期执行的Web爬虫最终会抓到通过探寻得到的页面的超链接（如对
于相同的查询，链接到更多的结果，或者链接到相关查询的结
果），因此，最终该网站的覆盖率会增长。
总之，为了实现只通过在每个站点提交少量的查询就能够达到较好
的（可能是不完整的）覆盖率，我们的目标是为几百万个不同的表
单选择查询，而且通过探寻将获取的页面作为搜索引擎索引的好的
候选页面。
查询模板的质量
我们可以把以上列出的每个目标作为查询模板的标准。例如，我们
绝对不想要一个包含表现层输入项作为绑定输入项的模板。这种模
板返回的结果也可以简单地通过一个不包含表现层输入项的模板来
提交查询，从而获得返回结果，而且这种处理方式，通常可以生成
更少的URL。
包含很多维度的模板通常不是我们想要的，因为它们生成太多的
URL，这些URL中有很多无法返回结果。然而，维度越多的模板能
够保证返回越多的记录。
维度较小的模板通常是我们更想要的，因为它们生成较少的URL，
但是也有可能这些查询每个都将返回太多的结果。正如之前所述，
有太多记录的页面并不适合作为索引。此外，站点可能对在每个页
面上显示的实际记录有限制，因此减少了返回的实际记录的数量。
因此，我们期望模板1）不包含任何绑定的表现层输入项；2）不包
含维度太多或者太少的URL。从直观上说，模板的维度应该依赖于
底层的数据库大小。
现在我们定义一个测试来进一步说明之前所述的标准。在我们描述
之前，先举个例子来说明这个想法。如例9-1表单的两个模板，模板
T1只有一个绑定输人项st(State)：模板T2只有一个绑定输入项
1480
---
## Page 1482
sort(Sortby)，现在考虑这两个模板生成的表单提交集合（如表9-2
所示）。
表9-2：通过分析模板的表单提交生成的内容的相似性来确定模板是否为富信息量（informative）
查询模板
模板表单提交
（绑定输入项）
（富信息量的/非富信息量的）
T(st)
http://jobs.com/find?src=hp&kw=&st=Any&sort=salary&s=go
http:/ljobs.comfind?src=hp&kw=&st=AK&sort=salary&s=go
http://jobs.com/find?src=hp&kw=&st=AL&sort=salary&s=go
网页内容不同一模板是富信息量的
T2(sort)
http://jobs.com/find?src=hp&kw=&st=Any&sort=salary&s=go
http:/ljobs.com/find? src=hp&kw=&st=Any&sort=staridate&s=go
网页内容相同一模板是非富信息量的
我们注意到模板T1的每个提交都返回不同状态下的job列表。因
此，返回的记录不同，从而结果Web页面内容将会很不一样。我们
称这种生成的Web页面内容很不同的模板为富信息量模板。反之，
因为没有关键字，T2中的每个提交返回的记录都是相同的（所有
job我们称这种模板为非富信息量模板。从本质上讲，我们的目标
是选择富信息量模板，去除非富信息量模板。
因此，我们可以基于从表单提交生成的Web页面的内容区分度
（dstinctmness）来评价模板。我们通过基于由模板生成的Web页面内容
的相似性来对这些页面进行聚类，从而估计该模板生成的不同的
Web页面的数量。
如果和表单提交的数量相比，不同的Web页面的数量很小，很可能
是如下情况：1）该模板包含表现层输入项，因此多个页面的集合
本质上有相同的记录：2）模板维度相对于底层数据库来说太多，
因此产生大量的无记录页面，不同页面之间都很相似；3）模板
（或者表单）有问题导致出现错误结果页面，这些错误结果页面也
很相似。如果模板不存在这种情况，但是还是生成很相似的内容，
那可能是搜索引擎索引的边界值，因此不可能对搜索引擎查询有任
何影响。
富信息量测试
1481
---
## Page 1483
我们考虑对于给定模板生成的URL，并且下载这些Web页面的内
容。我们计算从每个提交得到的Web页面内容的签名，当一个模板
生成的Web页面内容计算得到的签名个数远远少于可能的提交个数
时，则认为该模板是非富信息量的。
富信息量是根据阈值t来定义的，该阈值可以通过实验确定。假设
Sd是不同签名的集合，St是所有签名的集合。那么，当ISd/St>t
时，表示T是富信息量模板。
相比之下，关于内容签名更具体的细节不是很重要，我们列举了该
函数需要的一些重要属性。首先，该签名必须对HTMIL格式是透明
的，因为表现层输入项通常只是改变Web页面的布局。其次，该签
名必须和词项的排序无关，因为结果重排是很普通的表现层操作。
再次，该签名必须能够忽略页面间的细微区别；因为区别的来源通
常是广告，尤其是商业网站，更是如此。这些广告通常在页面边缘
处展现。它们增加了页面的文本内容但是并不反映返回结果的内
容，因此必须被过滤掉。这些签名不应该包含输入项的值本身。一
个二手车搜索网站，如果在邮编为94107的区域没有红色的Honda
Civic车出售，则很可能会有这样的错误信息“在94107区域没有红色
HondaCivic汽车出售！"(Nsearchresults forRedHondaCivicin
94107！）。类似的，对于以{colormakemodelzip}为查询项的结果
页面，会有大量的"No searchresultsfor{color make model}in{zip}"的
结果页。这些页面的唯一区别是搜索词不同，不排除搜索词的签名
很可能会把这些页面当做不同的页面，因而认为相应的模板是富信
息量的。
在实践中，可能不需要分析一个模板生成的所有提交的内容；而只
是需要测试所有可能提交的一个足够大的样本集合就够了。
搜索富信息量查询模板
我们的目标是搜索表单中的富信息量查询模板。我们可以采取一个
非常简单的策略来考虑表单中所有可能的模板，并对每个模板应用
富信息量测试。但是，假设一个表单包含n个输入项，存在2"-1个
可能的模板，那么对每个可能的模板进行测试的计算代价很高而且
不必要，因此，可以采取增量式的策略而不是遍历所有模板空间，
并且只测试那些可能是富信息量的模板。
1482
---
## Page 1484
我们的策略是从单一的绑定输入项模板开始，通过自下而上的方式
搜索模板空间。这种策略的基本思路是认为模板的信息量很可能依
赖于它扩展的模板，也就是说，它有额外的绑定输入项。如果模板
T有维度k，而且其扩展的所有维度小于k（即维度为k-1）的模板都
是非富信息量，那么T不可能是富信息量模板。
我们通过所有维度为1的模板开始，测试每个候选模板的信息量。
如果有维度为1的模板被认为是富信息量模板，我们就给该模板维
度加1，也就是说，构建包含绑定输入项超集的维度为2的模板，
因此，候选模板必须至少包含一个富信息量扩展模板（但该候选模
板其本身并不一定是富信息量）。然后测试每个新的候选模板来确
定该新模板是否为富信息量。从维度为2的富信息量模板，我们继
续以相同的方式构建维度为3的候选模板，如此反复操作。如果某
个维度不包含富信息量模板，程序就终止。
注意：当增加一个模板时，考虑到所有的候选输入项。我们可以选
择更积极的策略，只考虑富信息量的输入项，即其相应的维度为1
的模板是富信息量的。但是，我们相信，在实践上，这种策略会
（错误地）忽略一些富信息量模板。也有很多表单，包含一个主要
输入项用于返回结果，而其他的输入项实际上只是作为修饰。例
如，一个包含make和color输入项的表单，如果对于make输入项选择
默认值，而只选择color这一输入项时，则无法返回结果记录。因
此，只有绑定输入项color的表单是非富信息量，而包含make和color
的则是富信息量。
一旦搜索终止，我们可以把所有富信息量模板生成的URL增加到搜
索引擎的索引中。对于搜索的调整有很多可以完善的地方。例如，
我们发现永远都不需要考虑多于三个绑定输入项的模板，或者是生
成很多提交的模板。它们不可能是富信息量模板，因此可以很容易
地删除这些模板。不需要分析由一个模板生成的所有URL；通常来
说，考虑一个足够大的样本就够了。
实验分析表明，我们的算法生成的URL远远少于其他更简单的可选
策略。特别地，我们发现生成的URL数量比不采用富信息量测试的
最佳的启发式算法少了两个数量级。我们还发现该方法可以高效地
为表单确定富信息量模板一—在分析过程中，无论测试的模板个数
还是下载的模板提交总数在数量上都很小。重要的是，我们发现生
成的URL依赖于底层数据库的大小，而不是表单中输入项的个数。
1483
---
## Page 1485