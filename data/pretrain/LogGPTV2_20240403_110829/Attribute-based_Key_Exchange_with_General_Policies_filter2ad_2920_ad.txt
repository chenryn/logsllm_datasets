(OT) to transfer the input-wire labels to the client. Given
the garbled circuit and input-wire labels, the client can eval-
uate the garbled circuit and commit the output-wire label
to the server. Now, the server can decommit to its inputs
of the OT, allowing the client to verify that the garbled cir-
cuit was constructed correctly. If so, the client can open the
commitment to its output and the server can verify that the
client indeed computed the correct output-wire label.
We adapt this protocol to realize Fabke by replacing sender-
committing OT with ASE. That is, instead of the parties
running the OT step in Jawurek et al.’s protocol, the client
sends its (randomized) ASE public key to the server, who
encrypts each input-wire label of the garbled circuit with
ASE, guaranteeing that the client is only able to decrypt
labels corresponding to its attribute vector. Next, the client
evaluates the garbled circuit and commits to the output-
wire label it computed. The server can then open all the
encrypted values, allowing the client to verify the circuit
was correctly garbled (before the client reveals anything). If
the circuit is correct, the client decommits the output-wire
label it computed, allowing the server to verify that indeed
the client satisﬁed the policy. The parties then run a secure
coin-tossing protocol to derive the shared key. See Figure 6.1
for the full protocol description.
Garbling scheme for ABKE. For us to successfully re-
duce to the collusion experiment in our ASE deﬁnition, we
need to extract the plaintext from a malicious client to feed
to the challenger in the experiment. This plaintext corre-
sponds to the input-wire labels of the garbled circuit. Thus,
we need some way to do this extraction. We do this by using
a random oracle: we can monitor the inputs to the random
oracle and use these as “potential” plaintexts which we can
feed to the challenger in the collusion experiment. Thus, we
construct a simple modiﬁed garbling scheme which allows us
to do this extraction.
ABKE garbling scheme GABKE = (GbABKE, EvABKE, VeABKE)
for a circuit C with m inputs.
GbABKE is deﬁned as follows.
1. Generate 2m random labels X b
i ∈R {0, 1}n, where X 0
i
i correspond to input wire i. The set of all
form the input-wire labels to be encrypted. Let
and X 1
X b
i := RO(i(cid:107)b(cid:107)X b
i
hb
i ), where RO is a random oracle.
2. Using any secure garbling scheme Gb, generate the gar-
bled circuit, including the 2m input-wire labels W b
i .
3. Append to the generated garbled circuit the follow-
for wire i, append
ing input-wire translation tables:
(cid:32)
(cid:33)
(W 0
i )
(W 1
i )
i
Ench0
Ench1
set {X b
Gb.
. Set the input-wire labels to be the
i } and the output-wire labels to be those set by
i
1457The protocol Πabke is between server S and client P with attribute vector χ. We assume a setup where each client Pi sends
(generate, sid, S, χi) for some set S ⊆ [m] and attribute vector χi to Fsetup, receiving (result, sid, mVK, pk, sk) in response. We
assume all messages are sent/received through the Fanon functionality; for simplicity we omit the use of this functionality in
the description below. Also for simplicity, we assume the evaluated policy C uses all m attributes (otherwise, a corresponding
Project operation can be applied to the party’s key).
1. S broadcasts policy circuit C to all parties. If C is not a valid policy then P outputs ⊥.
j }j∈[m], {Z0, Z1}) ← GbABKE(1n, C).
2. S runs (GC, {X 0
3. P computes (pk(cid:48), sk(cid:48)) ← Unlink(pk, sk) and sends pk(cid:48) to S.
4. S runs Vrfy(mVK, pk(cid:48)).
If the output is zero then S aborts; otherwise, S sets (cid:126)x = {X 0
j , X 1
Enc(pk(cid:48), (cid:126)x) and sends c and GC to P.
5. P computes (cid:126)m ← Dec(sk(cid:48), c), where (cid:126)m = (cid:98)X
if EvABKE fails.
0 , . . . , (cid:98)X
χ0
j
m and computes Z ← EvABKE(GC, {(cid:98)X
χm
j
χi
j
i }i∈[m]); P sets Z := ⊥
j , X 1
j }j∈[m], computes c ←
6. P sends (commit, sid, 1, Z) to Fcom, which sends (committed, sid, 1, |Z|) to S.
7. S sends the wire labels {X b
i } and the randomness r used in the encryption to P, who veriﬁes that the encryptions match
the wire labels and then computes VeABKE(C, GC, {X 0
i }i∈[m]). If either the wire labels did not match the encrypted
values or the output of VeABKE is reject then P outputs ⊥. Likewise, if C(χj ) = 0 then P outputs ⊥. Otherwise, P
sends (reveal, sid, 1) to Fcom, which sends (reveal, sid, 1, Z) to S.
8. S checks that Z = Z1; if not, it sends ⊥ to P and halts. Otherwise, the parties both send (toss, sid) to Fcointoss, receive
i , X 1
(tossed, sid, k), and output k.
Figure 6.1: Protocol Πabke realizing Fabke in the (Fcom, Fcointoss, Fanon)-hybrid model.
The EvABKE and VeABKE functions are deﬁned naturally
from Ev, Ve, and GbABKE.
Clearly, the scheme allows evaluation and veriﬁcation in
the same manner as the underlying garbling scheme once a
label per each wire is obtained. At the same time, any party
evaluating a garbled circuit must make a call to the random
oracle per input-wire label in order to learn the “real” un-
derlying label for the garbled circuit. Thus, the underlying
garbling scheme Gb cannot be decrypted without a random
oracle evaluation on an input-wire label of GbABKE, which is
exactly the property we need for the reduction to the collu-
sion experiment.
We prove the following in the full version [35].
Theorem 6.1. Assume that the encryption scheme used
in Πabke is a secure attribute selective encryption scheme.
Then Πabke securely computes Fabke in the (Fcom,Fcointoss,Fanon)-
hybrid model, in the random-oracle model.
7. ELH SIGNATURES
We introduce the notion of extractable linearly homomor-
phic (ELH) signatures and show an implementation using
the Boneh-Lynn-Shacham (BLS) [16] signature scheme. ELH
signatures play a central role in our ASE constructions de-
tailed in §8 and §9.
Definition 7.1. (Linearly homomorphic signatures) Let
Sig = (Sign, Vrfy) be a signature scheme over a space of
messages consisting of elements of a group G of prime or-
der q, with signatures also lying in this group. We say that
Sig is linearly homomorphic over G if for any two elements
g1, g2 ∈ G, it holds that Sign(g1g2) = Sign(g1)Sign(g2). The
scheme is called unforgeable if no probabilistic polynomial-
time algorithm given n pairs (gi, Sign(gi)) for random ele-
ments g1, . . . , gn ∈ G and an additional random indepen-
dent element g ∈ G, has non-negligible probability to output
Sign(g).
1 ··· gxn
Note that being linearly homomorphic implies that given
n signed elements g1, . . . , gn ∈ G, one can compute (without
the signing key) the signature of any linear combination (in
the exponent) of g1, . . . , gn; namely, for any x1, . . . , xn ∈ Zq
n ) = Sign(g1)x1 ··· Sign(gn)xn .
we have that Sign(gx1
We note that the requirement of the signatures lying in the
same group as the message space is not essential but it sim-
pliﬁes notation by using the same group operation for group
elements and signatures, and is a property of our implemen-
tation using BLS signatures. This notion can be seen as
a one-dimensional case of homomorphic signatures for lin-
ear spaces [14, 27, 15]. Also note that the unforgeability
property holds only with respect to random messages (i.e.,
random elements in the group).
We now deﬁne the property of extractability. It captures
the intuition behind linearly homomorphic signatures as al-
lowing limited malleability. That is, anyone can generate
signatures on a value g without possessing the signing key
as long as it knows a representation of g as a linear com-
bination (in the exponent) of previously signed elements.
Extractability formalizes this knowledge similarly to exist-
ing knowledge extractability notions. In spite of being intu-
itively appealing we are not aware of this form of homomor-
phic signatures being deﬁned in prior work.
Definition 7.2. (Extractable linearly homomorphic sig-
natures) Let G be a cyclic group of prime order q and Sig =
(Sign, Vrfy) a linearly homomorphic signature scheme over
G. Consider algorithms that on input t random elements
g1, . . . , gt in G and corresponding signatures Sign(g1), . . . ,
Sign(gt), output a pair (f, Sign(f )) for f ∈ G with non-
negligible probability (over the choice of gis and the algo-
rithm’s random coins). We say that Sig is an extractable
linearly homomorphic (ELH) signature scheme if for every
polynomial-time algorithm F as above there exists another
polynomial-time algorithm F (cid:48) for which the following prop-
erty holds, except for with negligible probability: Let {gi,
Sign(gi)}i∈[t] be an input to F on which F outputs (f, Sign(f )),
then on the same inputs (and internal random coins) F (cid:48) out-
1458puts a vector (f, Sign(f ), x1, . . . , xn) with xi ∈ Zq such that
f = gx1
1 ··· gxn
n .
Interestingly, extractability in linearly homomorphic sig-
natures implies unforgeability as shown next (the proofs ap-
pear in the full version [35]).
Lemma 7.3. Let Sig = (Sign, Vrfy) be an ELH signature
scheme over a group G where the discrete logarithm problem
is hard. Then Sig is unforgeable.
Lemma 7.4. Under the hardness of the discrete log over
group G, given g1, . . . gn, g ∈R G\{1}, it is infeasible to ﬁnd
x1, . . . , xn ∈ Zq such that g = gx1
1 ··· gxn
n . Similarly, ﬁnding
i=1gyi
two representations Πn
i = Πn
such that there exists
an i for which xi (cid:54)= yi is also infeasible.
7.1 Implementation of ELH Signatures
i=1gxi
i
We now demonstrate an implementation of an ELH sig-
nature scheme using the Boneh-Lynn-Shacham (BLS) [16]
signature scheme, which we ﬁrst recall.
Boneh-Lynn-Shacham (BLS) signature scheme. The
scheme assumes groups (G1, G2, GT ) of prime order q with
a bilinear pairing e : G1 × G2 → GT where the co-CDH
assumption holds (i.e., given g ∈ G1, h, hx ∈ G2, ﬁnding gx
is infeasible). The public/private keypair is (hx, x), where
x ∈R Zq, and h ∈R G2. A signature on message m is com-
puted as H(m)x where H is a hash function mapping mes-
sages to random elements in G1. Veriﬁcation of a signa-
ture σ on message m under public key y = hx is performed
by checking the following equality: e(σ, h) = e(H(m), y).
BLS∗ signature scheme. We deﬁne the BLS∗ scheme to
be the same as BLS but the message space is the group G1
itself and no hash function is applied to the messages (this
is suﬃcient for our application that only requires unforge-
ability on random group elements).
The following lemma shows that BLS∗
leads to an im-
plementation of ELH signatures under the t-KEA assump-
tion [11, 10]. The proof appears in the full version [35].
Lemma 7.5. Under the t-KEA assumption over group G1,
BLS∗ is an unforgeable extractable linearly homomorphic
signature scheme.
8. ASE USING IBE
We now construct an attribute selective encryption scheme
from identity based encryption (IBE) and extractable lin-
early homomorphic (ELH) signatures. The security of the
protocol is based on the security of the underlying IBE and
ELH signature schemes.
In addition, we require that the
master public key of the IBE scheme be from a group so
that it can be rerandomized and that the ELH signature
scheme works over the same group.
We note that ASE can be constructed from IBE in a
generic way if it satisﬁes these additional requirements. Both
the Boneh-Franklin [13] and Boneh-Boyen [12] IBE schemes
can be used and they yield diﬀerent eﬃciency and compu-
tational requirements from the parties. However, this pre-
sentation will not be generic but rather at points we will be
speciﬁc to the Boneh-Franklin IBE scheme.
We ﬁrst give a high level overview of how we use the IBE
scheme in our construction. Recall that in an IBE scheme a
central authority chooses a master secret key and publishes
the correlated master public key. The master public key
is used as part of the encryption key for all clients. Each
client has an identity which is known to all and in addition
each client receives a private secret key that is computed
using the master secret key and its identity. A message is
encrypted using the master public key and the identity of
the client for whom the message is intended. The client uses
its secret key to decrypt.
The ﬁrst switch that we make in our scheme is that the
“identities” are associated with the attributes. Thus, if a
client has an attribute then it receives the secret key relat-
ing to that attribute. However, that clearly is not suﬃcient
as collusions can take place. A client receiving the secret
key for attribute j1 can collude with another client who has
the secret key for j2, enabling them to decrypt an unautho-
rized set of messages. Thus, we introduce our second switch
which is that the center creates a “personalized” public mas-
ter key for each client (by choosing a diﬀerent master secret
key) and modiﬁes the secret keys of the client to relate to
the personalized public key. Now this additional change pre-
vents the clients from colluding as their secret keys relate to
diﬀerent master public keys. While this is the basic intu-
ition, there are additional details that need to be added to