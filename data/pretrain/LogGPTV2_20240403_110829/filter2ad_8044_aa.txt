翻译自：  
翻译：聂心明
# 在使用脚本引擎的时潜在的代码注入
漏洞特征：SCRIPT_ENGINE_INJECTION  
请严格的评估动态代码。应该仔细分析代码的结构。恶意代码的执行会导致数据的泄露或者执行任意系统指令。  
如果你想动态的运行代码，那么请找一个沙箱（见引用）  
有害的代码：
    public void runCustomTrigger(String script) {
        ScriptEngineManager factory = new ScriptEngineManager();
        ScriptEngine engine = factory.getEngineByName("JavaScript");
        engine.eval(script); //Bad things can happen here.
    }
解决方案：  
使用“Cloudbees Rhino Sandbox”库就能安全的评估Javascript代码
    public void runCustomTrigger(String script) {
        SandboxContextFactory contextFactory = new SandboxContextFactory();
        Context context = contextFactory.makeContext();
        contextFactory.enterContext(context);
        try {
            ScriptableObject prototype = context.initStandardObjects();
            prototype.setParentScope(null);
            Scriptable scope = context.newObject(prototype);
            scope.setPrototype(prototype);
            context.evaluateString(scope,script, null, -1, null);
        } finally {
            context.exit();
        }
    }
引用：  
[Cloudbees Rhino Sandbox: Utility to create sandbox with Rhino (block access
to all classes)](https://github.com/cloudbees/rhino-sandbox)  
[CodeUtopia.net: Sandboxing Rhino in
Java](http://codeutopia.net/blog/2009/01/02/sandboxing-rhino-in-java/)  
[Remote Code Execution .. by design](http://blog.h3xstream.com/2014/11/remote-code-execution-by-design.html)：里面有一些恶意代码的例子。这些例子能测试沙箱的规则  
[CWE-94: Improper Control of Generation of Code ('Code
Injection')](http://cwe.mitre.org/data/definitions/94.html)  
[CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)
# 使用Spring表达式时潜在的代码注入(SpEL表达式注入）
漏洞规则：SPEL_INJECTION  
Spring表达式被用来构建动态的值。源数据应该被严格的检验，以避免未过滤的时候进入到表达式的执行器中  
有漏洞的代码：
    public void parseExpressionInterface(Person personObj,String property) {
            ExpressionParser parser = new SpelExpressionParser();
            //Unsafe if the input is control by the user..
            Expression exp = parser.parseExpression(property+" == 'Albert'");
            StandardEvaluationContext testContext = new StandardEvaluationContext(personObj);
            boolean result = exp.getValue(testContext, Boolean.class);
    [...]
引用：  
[CWE-94: Improper Control of Generation of Code ('Code
Injection')](http://cwe.mitre.org/data/definitions/94.html)  
[CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
('Eval Injection')](http://cwe.mitre.org/data/definitions/95.html)  
[Spring Expression Language (SpEL) - Official
Documentation](http://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/expressions.html)  
[Minded Security: Expression Language
Injection](https://www.mindedsecurity.com/fileshare/ExpressionLanguageInjection.pdf)  
[Remote Code Execution .. by design](http://blog.h3xstream.com/2014/11/remote-code-execution-by-design.html): 里面有一些恶意代码的例子。这些例子能测试沙箱的规则.  
[Spring Data-Commons: (CVE-2018-1273)](https://gosecure.net/2018/05/15/beware-of-the-magic-spell-part-1-cve-2018-1273/)  
[Spring OAuth2: CVE-2018-1260](http://gosecure.net/2018/05/17/beware-of-the-magic-spell-part-2-cve-2018-1260/)
# 使用表达式语言时潜在的代码注入（EL）
漏洞特征：EL_INJECTION
表达式语言被用来构建动态的值。源数据应该被严格的检验，以避免未过滤的时候进入到表达式的执行器中  
有漏洞代码：
    public void evaluateExpression(String expression) {
        FacesContext context = FacesContext.getCurrentInstance();
        ExpressionFactory expressionFactory = context.getApplication().getExpressionFactory();
        ELContext elContext = context.getELContext();
        ValueExpression vex = expressionFactory.createValueExpression(elContext, expression, String.class);
        return (String) vex.getValue(elContext);
    }
引用：  
[Minded Security: Abusing EL for executing OS
commands](http://blog.mindedsecurity.com/2015/11/reliable-os-shell-with-el-expression.html)  
[The Java EE 6 Tutorial: Expression
Language](https://docs.oracle.com/javaee/6/tutorial/doc/gjddd.html)  
[CWE-94: Improper Control of Generation of Code ('Code
Injection')](http://cwe.mitre.org/data/definitions/94.html)  
[CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
('Eval Injection')](http://cwe.mitre.org/data/definitions/95.html)  
[Minded Security: Expression Language
Injection](https://www.mindedsecurity.com/fileshare/ExpressionLanguageInjection.pdf)  
[Dan Amodio's blog: Remote Code with Expression Language
Injection](http://danamodio.com/appsec/research/spring-remote-code-with-expression-language-injection/)  
[Remote Code Execution .. by design](http://blog.h3xstream.com/2014/11/remote-code-execution-by-design.html): 里面有一些恶意代码的例子。这些例子能测试沙箱的规则.
# 潜在于Seam logging call中的代码注入
漏洞特征：SEAM_LOG_INJECTION  
Seam Logging API支持表达式语言的解析，目的是引出bean的property到日志消息中去。源数据会利用表达式执行未期望的代码。  
在这个代码片段里面，表达式语言被用来构建动态的值。源数据应该被严格的检验，以避免未过滤的时候进入到表达式的执行器中  
有漏洞的代码：
    public void logUser(User user) {
        log.info("Current logged in user : " + user.getUsername());
        //...
    }
解决方案：
    public void logUser(User user) {
        log.info("Current logged in user : #0", user.getUsername());
        //...
    }
引用：  
[JBSEAM-5130: Issue documenting the
risk](https://issues.jboss.org/browse/JBSEAM-5130)  
[JBoss Seam: Logging (Official
documentation)](https://docs.jboss.org/seam/2.3.1.Final/reference/html_single/#d0e4185)  
[The Java EE 6 Tutorial: Expression
Language](https://docs.oracle.com/javaee/6/tutorial/doc/gjddd.html)  
[CWE-94: Improper Control of Generation of Code ('Code
Injection')](http://cwe.mitre.org/data/definitions/94.html)  
[CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
('Eval Injection')](http://cwe.mitre.org/data/definitions/95.html)
# 使用OGNL表达式时潜在的代码注入
漏洞规则： OGNL_INJECTION  
表达式语言被用来构建动态的值。源数据应该被严格的检验，以避免未过滤的时候进入到表达式的执行器中  
有漏洞代码：
    public void getUserProperty(String property) {
      [...]
      //The first argument is the dynamic expression.
      return ognlUtil.getValue("user."+property, ctx, root, String.class);
    }
解决方案  
一般，解析OGNL表达式的函数不应该接收用户的输入。它旨在被用于静态配置和jsp。
引用：  
[HP Enterprise: Struts 2 OGNL Expression Injections by Alvaro
MuÃ±oz](https://community.saas.hpe.com/t5/Security-Research/Struts-2-OGNL-Expression-Injections/ba-p/288881)  
[Gotham Digital Science: An Analysis Of
CVE-2017-5638](https://blog.gdssecurity.com/labs/2017/3/27/an-analysis-of-cve-2017-5638.html)  
[Apache Struts2: Vulnerability
S2-016](http://struts.apache.org/docs/s2-016.html)  
[Apache Struts 2 Documentation:
OGNL](https://struts.apache.org/docs/ognl.html)
# 潜在的http返回报文被分割
漏洞特征：HTTP_RESPONSE_SPLITTING  
当http请求包含未期望的CR 和
LF字符的时候，服务器可能会把返回的报文流解析成两个HTTP返回报文（而不是一个）。攻击者可以控制第二个报文并且发动诸如xss攻击或者缓存投毒攻击。按照OWASP的建议，实际上，这个问题现代java
EE应用服务器所修复，但还是要严格检验输入。如果你关注这个漏洞，你应该测试你算关心的那个平台，看看这个平台是否允许CR或者
LF被注入到返回报文的头部中。这个漏洞常常被报告为低危，如果你使用有漏洞的平台，请仔细检查低危告警。  
有漏洞代码：
    String author = request.getParameter(AUTHOR_PARAMETER);
    // ...
    Cookie cookie = new Cookie("author", author);
    response.addCookie(cookie);
引用:  
[OWASP: HTTP Response
Splitting](https://www.owasp.org/index.php/HTTP_Response_Splitting)  
[CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP
Response Splitting')](http://cwe.mitre.org/data/definitions/113.html)  
[CWE-93: Improper Neutralization of CRLF Sequences ('CRLF
Injection')](http://cwe.mitre.org/data/definitions/93.html)
# 在日志中潜在的CRLF注入
漏洞规则：CRLF_INJECTION_LOGS  
当未被信任的输入数据进入到日志中，并且没有正确的做过滤。那么攻击者就可以伪造日志数据或者包含恶意内容。插入恶意的实体通常被用于歪曲统计，分散管理员注意力，或者甚至暗示另一方有恶意行为。如果日志文件被一些自动化的程序自动处理，那么攻击者可以通过破坏文件格式使文件无法使用或者注入一些不被期望的特殊字符。攻击者也可能注入代码或者其他的命令到日志文件中，可能会利用日志处理程序中的漏洞（例如：命令注入或者xss）  
有漏洞的代码：
    String val = request.getParameter("user");
    String metadata = request.getParameter("metadata");
    [...]
    if(authenticated) {
        log.info("User " + val + " (" + metadata + ") was authenticated successfully");
    }
    else {
        log.info("User " + val + " (" + metadata + ") was not authenticated");
    }
恶意用户可能会发送这样的metadata数据："Firefox) was authenticated successfully\r\n[INFO] User
bbb (Internet Explorer".
解决方案：  
你要手工过滤每一个参数
    log.info("User " + val.replaceAll("[\r\n]","") + " (" + userAgent.replaceAll("[\r\n]","") + ") was not authenticated");
你要配置日志服务器，目的是替换掉所有消息中的\r\n。 OWASP Security Logging已经在Logback 和 Log4j.实现了这个功能。  
引用：  
[CWE-117: Improper Output Neutralization for
Logs](http://cwe.mitre.org/data/definitions/117.html)  
[CWE-93: Improper Neutralization of CRLF Sequences ('CRLF
Injection')](http://cwe.mitre.org/data/definitions/93.html)  
[CWE-93: Improper Neutralization of CRLF Sequences ('CRLF
Injection')](https://logback.qos.ch/manual/layouts.html#replace)  
[OWASP Security Logging](https://github.com/javabeanz/owasp-security-logging)
# 潜在的外部控制配置
漏洞特征：EXTERNAL_CONFIG_CONTROL  
允许外部控制系统设置会导致系统的中断或者导致应用行为异常，和潜在的恶意行为。攻击者通过提供不存在的catalog名称可能会导致错误，或者链接到未授权的数据库服务器。  
有漏洞的代码：
    conn.setCatalog(request.getParameter("catalog"));
引用：  
[CWE-15: External Control of System or Configuration
Setting](http://cwe.mitre.org/data/definitions/15.html)
# 坏的十六进制数据
漏洞特征： BAD_HEXA_CONVERSION  
当把十六进制字节数组转换为人类可读的字符串的时候，如果数组是被一个字节一个字节读取的话，可能会导致转换错误。下面这个例子是一个很明显的使用
Integer.toHexString() 做转换的例子，它可能会被字节码中的零字节所截断
    MessageDigest md = MessageDigest.getInstance("SHA-256");
    byte[] resultBytes = md.digest(password.getBytes("UTF-8"));
    StringBuilder stringBuilder = new StringBuilder();
    for(byte b :resultBytes) {
        stringBuilder.append( Integer.toHexString( b & 0xFF ) );
    }
    return stringBuilder.toString();
这个错误削弱了hash的计算值，因为它引入了更多的碰撞。比如，用上面的函数计算"0x0679" 和 "0x6709"都会输出679
在下面的解决方案中，使用String.format()替换toHexString()。
    stringBuilder.append( String.format( "%02X", b ) );
引用：  
[CWE-704: Incorrect Type Conversion or
Cast](http://cwe.mitre.org/data/definitions/704.html)