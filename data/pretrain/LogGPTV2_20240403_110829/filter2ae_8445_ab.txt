  * [JSAPI](https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/JSAPI_User_Guide "JSAPI")
  * [GC Rooting guide](https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/GC_Rooting_Guide "GC Rooting guide")
  * [IonMonkey JIT](https://wiki.mozilla.org/IonMonkey/Overview "IonMonkey JIT")
  * [The Performance Of Open Source Software: MemShrink](http://www.aosabook.org/en/posa/memshrink.html "The Performance Of Open Source Software: MemShrink")
### JS::Values and JSObjects
您可能首先想到的是本地 JavaScript
对象如何在内存中布局。让我们创建一个包含几种不同本地类型的脚本文件，并直接从内存中dump出来（不要忘记加载符号表）。这里有一个有用的调试技巧，将断点设置为很少被调用的函数，例如Math.atan2
。 由于您可以将任意 JavaScript 对象传递给函数，因此可以非常轻松地从调试器中检索其地址。 您也可以使用 objectAddress，虽然它只能在
shell 中访问，但有时非常有用。
    js> a = {}
    ({})
    js> objectAddress(a)
    "000002576F8801A0"
另一个非常有用的方法是 dumpObject ，但是这个方法只能从 shell 的调试版本中获得：
    js> a = {doare : 1}
    ({doare:1})
    js> dumpObject(a)
    object 20003e8e160
      global 20003e8d060 [global]
      class 7ff624d94218 Object
      lazy group
      flags:
      proto 
      properties:
        "doare": 1 (shape 20003eb1ad8 enumerate slot 0)
还有一些其他可能有趣的实用函数通过 shell 传递给 JavaScript
。如果你想枚举它们，你可以运行Object.getOwnPropertyNames（this）：
    js> Object.getOwnPropertyNames(this)
    ["undefined", "Boolean", "JSON", "Date", "Math", "Number", "String", "RegExp", "InternalError", "EvalError", "RangeError", "TypeError", "URIError", "ArrayBuffer", "Int8Array", "Uint8Array", "Int16Array", "Uint16Array", "Int32Array", "Uint32Array", "Float32Array", "Float64Array", "Uint8ClampedArray", "Proxy", "WeakMap", "Map", ..]
要在调用 Math.atan2 JavaScript 函数时中断调试器，可以在以下符号上设置断点：
    0:001> bp js!js::math_atan2
现在只需创建一个包含以下内容的 foo.js 文件：
    'use strict';
    const Address = Math.atan2;
    const A = 0x1337;
    Address(A);
    const B = 13.37;
    Address(B);
    const C = [1, 2, 3, 4, 5];
    Address(C);
此时您有两个选择：要么将上述脚本加载到 JavaScript shell 中并附加调试器，要么我建议使用 TTD
跟踪程序执行。当您尝试研究复杂的软件时，它会使事情变得如此简单。如果你从未尝试过，现在就去做，你会明白的。  
是时候加载跟踪并浏览一下：
    0:001> g
    Breakpoint 0 hit
    js!js::math_atan2:
    00007ff6`9b3fe140 56              push    rsi
    0:000> lsa .
       260: }
       261: 
       262: bool
       263: js::math_atan2(JSContext* cx, unsigned argc, Value* vp)
    >  264: {
       265:     CallArgs args = CallArgsFromVp(argc, vp);
       266: 
       267:     return math_atan2_handle(cx, args.get(0), args.get(1), args.rval());
       268: }
       269:
此时，你应该像上面那样中断调试器。 为了能够检查传递的 JavaScript 对象，我们需要了解如何将 JavaScript 参数传递给本机 C++ 函数。  
它的工作方式是：vp 是一个大小为 argc + 2 的 JS :: Value 数组的指针（一个用于返回值/调用者，一个用于 this
对象）。函数通常不直接通过 vp 访问数组。而是将它包装在一个 JS :: CallArgs 对象中，该对象抽象出需要计算的 JS :: Value
的数量，并提供其功能，如：JS :: CallArgs :: get，JS :: CallArgs :: rval等。它还抽象出与 GC
相关的操作，以使对象保持活动状态。 所以我们需 dump vp 指向的内存。
    0:000> dqs @r8 l@rdx+2
    0000028f`87ab8198  fffe028f`877a9700
    0000028f`87ab81a0  fffe028f`87780180
    0000028f`87ab81a8  fff88000`00001337
我们注意到的第一件事是每个 Value 对象好像都设置了高8位。
通常，在指针中设置一个hax的标志来编码更多的信息（比如类型，译者注：这高8位实际上是表明了数据的类型，0xfff88000 表示 0x00001337
是个整型数据），因为这部分地址空间无法从 Windows 上的用户模式寻址。  
至少我们认识到 0x1337 值是什么。 让我们继续第二次调用 Addressnow。
    0:000> g
    Breakpoint 0 hit
    js!js::math_atan2:
    00007ff6`9b3fe140 56              push    rsi
    0:000> dqs @r8 l@rdx+2
    0000028f`87ab8198  fffe028f`877a9700
    0000028f`87ab81a0  fffe028f`87780180
    0000028f`87ab81a8  402abd70`a3d70a3d
    0:000> .formats 402abd70`a3d70a3d
    Evaluate expression:
      Hex:     402abd70`a3d70a3d
      Double:  13.37
这是另一个我们认识到的常数。这次，整个 quad-word 用于表示 double 数。 最后，这里是传递给“Address”的第三次调用的 Array
对象：
    0:000> g
    Breakpoint 0 hit
    js!js::math_atan2:
    00007ff6`9b3fe140 56              push    rsi
    0:000> dqs @r8 l@rdx+2
    0000028f`87ab8198  fffe028f`877a9700
    0000028f`87ab81a0  fffe028f`87780180
    0000028f`87ab81a8  fffe028f`87790400
有趣。如果我们看一下 JS :: Value 结构，看起来 quad-word 的下半部分是指向某个对象的指针。
    0:000> dt -r2 js::value
       +0x000 asBits_          : Uint8B
       +0x000 asDouble_        : Float
       +0x000 s_               : JS::Value::
          +0x000 payload_         : JS::Value::::
             +0x000 i32_             : Int4B
             +0x000 u32_             : Uint4B
             +0x000 why_             : JSWhyMagic
通过查看 public / Value.h，我们很快就能理解上面所看到的内容。JS :: Value 的 17 个高位（在源代码中称为
JSVAL_TAG）用于编码类型信息。较低的 47 位（称为 JSVAL_TAG_SHIFT）是普通类型的值（整数，布尔值等）或指向 JSObject
的指针。 这部分称为 payload_
    union alignas(8) Value {
      private:
        uint64_t asBits_;
        double asDouble_;
        struct {
            union {
                int32_t i32_;
                uint32_t u32_;
                JSWhyMagic why_;
            } payload_;
现在让我们以 JS :: Value 0xfff8800000001337 为例。 要提取它的标记位，我们可以把它右移 47，并提取有payload_
（这里是一个整数，一个普通的类型），我们可以用 2**47 - 1 覆盖它。与上面的数组 JS :: Value相同。
    In [5]: v = 0xfff8800000001337
    In [6]: hex(v >> 47)
    Out[6]: '0x1fff1L'
    In [7]: hex(v & ((2**47) - 1))
    Out[7]: '0x1337L'
    In [8]: v = 0xfffe028f877a9700 
    In [9]: hex(v >> 47)
    Out[9]: '0x1fffcL'
    In [10]: hex(v & ((2**47) - 1))
    Out[10]: '0x28f877a9700L'
上面的 0x1fff1 常量是 JSVAL_TAG_INT32，而 0x1fffc 是 JSValueType 中定义的
JSVAL_TAG_OBJECT，这都是有依据的：
    enum JSValueType : uint8_t
    {
        JSVAL_TYPE_DOUBLE              = 0x00,
        JSVAL_TYPE_INT32               = 0x01,
        JSVAL_TYPE_BOOLEAN             = 0x02,
        JSVAL_TYPE_UNDEFINED           = 0x03,
        JSVAL_TYPE_NULL                = 0x04,
        JSVAL_TYPE_MAGIC               = 0x05,
        JSVAL_TYPE_STRING              = 0x06,
        JSVAL_TYPE_SYMBOL              = 0x07,
        JSVAL_TYPE_PRIVATE_GCTHING     = 0x08,
        JSVAL_TYPE_OBJECT              = 0x0c,
        // These never appear in a jsval; they are only provided as an out-of-band
        // value.
        JSVAL_TYPE_UNKNOWN             = 0x20,
        JSVAL_TYPE_MISSING             = 0x21
    };
    JS_ENUM_HEADER(JSValueTag, uint32_t)
    {
        JSVAL_TAG_MAX_DOUBLE           = 0x1FFF0,
        JSVAL_TAG_INT32                = JSVAL_TAG_MAX_DOUBLE | JSVAL_TYPE_INT32,
        JSVAL_TAG_UNDEFINED            = JSVAL_TAG_MAX_DOUBLE | JSVAL_TYPE_UNDEFINED,
        JSVAL_TAG_NULL                 = JSVAL_TAG_MAX_DOUBLE | JSVAL_TYPE_NULL,
        JSVAL_TAG_BOOLEAN              = JSVAL_TAG_MAX_DOUBLE | JSVAL_TYPE_BOOLEAN,
        JSVAL_TAG_MAGIC                = JSVAL_TAG_MAX_DOUBLE | JSVAL_TYPE_MAGIC,
        JSVAL_TAG_STRING               = JSVAL_TAG_MAX_DOUBLE | JSVAL_TYPE_STRING,
        JSVAL_TAG_SYMBOL               = JSVAL_TAG_MAX_DOUBLE | JSVAL_TYPE_SYMBOL,
        JSVAL_TAG_PRIVATE_GCTHING      = JSVAL_TAG_MAX_DOUBLE | JSVAL_TYPE_PRIVATE_GCTHING,
        JSVAL_TAG_OBJECT               = JSVAL_TAG_MAX_DOUBLE | JSVAL_TYPE_OBJECT
    } JS_ENUM_FOOTER(JSValueTag);
现在我们知道什么是 JS :: Value，让我们看一下 Array 在内存中的样子，因为这会在之后用到。 重新启动目标并跳过第一个双重中断。
    0:000> .restart /f
    0:008> g
    Breakpoint 0 hit
    js!js::math_atan2:
    00007ff6`9b3fe140 56              push    rsi
    0:000> g
    Breakpoint 0 hit
    js!js::math_atan2:
    00007ff6`9b3fe140 56              push    rsi
    0:000> g
    Breakpoint 0 hit
    js!js::math_atan2:
    00007ff6`9b3fe140 56              push    rsi
    0:000> dqs @r8 l@rdx+2
    0000027a`bf5b8198  fffe027a`bf2a9480
    0000027a`bf5b81a0  fffe027a`bf280140
    0000027a`bf5b81a8  fffe027a`bf2900a0
    0:000> dqs 27a`bf2900a0
    0000027a`bf2900a0  0000027a`bf27ab20
    0000027a`bf2900a8  0000027a`bf2997e8
    0000027a`bf2900b0  00000000`00000000
    0000027a`bf2900b8  0000027a`bf2900d0
    0000027a`bf2900c0  00000005`00000000
    0000027a`bf2900c8  00000005`00000006
    0000027a`bf2900d0  fff88000`00000001