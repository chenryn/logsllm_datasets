181
182
180
180
182
1795
1765
1749
946
NAT
Skew est.
Yes −58.17 ppm
−58.00 ppm
No
−58.24 ppm
No
Yes −58.21 ppm
Yes −58.19 ppm
Yes −58.22 ppm
Yes −58.13 ppm
−57.57 ppm
No
Yes −57.63 ppm
Yes
Yes
Yes
No
Yes
Yes
No
Yes
Table 3. TCP timestamps-based skew estimates of laptop running Red Hat Linux 9.0 when connected
to host1 from multiple locations and when not running ntpd. The traces were recorded at host1.
ments, host1, is a Dell Precision 340 with a 2GHz Intel
Pentium 4 processor located within the UCSD Computer
Science and Engineering department and running Debian
3.0 with a recompiled 2.4.18 Linux kernel; host1 is also
conﬁgured to synchronize its system time with true time via
NTP.
For all experiments, we establish a TCP connection be-
tween laptop and host1, and then exchange TCP pack-
ets over that connection. On host1, we record a trace of
the connection using tcpdump. We then use our tech-
niques from Section 3 to estimate the skew of laptop’s
TSopt clock. As the horizontal line in Table 3 indicates, we
divide our experiments into two sets. In the ﬁrst set, our ex-
periments last for three hours and exchange one TCP packet
every minute (we do this by performing a sleep(60) on
host1). For the second set of experiments, the connec-
tions last for 30 minutes, and a packet is exchanged at ran-
dom intervals between 0 and 2 seconds, as determined by a
usleep on host1. With few exceptions, the packets from
laptop are all ACKs with no data.
We conduct experiments when the laptop is connected
to the Internet via residential cable networks on both coasts
(Table 3). For our residential experiments, we use a 802.11b
wireless connection with 128-bit WEP encryption, a stan-
dard (unencrypted) 802.11b wireless connection, and a
standard 10Mbps 10baseT wired connection. We also con-
ducted experiments with our laptop connected to the San
Diego Supercomputer Center’s 802.11b wireless network,
from the UCSD Computer Science and Engineering wire-
less network, and from the San Diego Public Library’s wire-
less network. As the ﬁnal column in the table shows, the
skew estimates are all within a fraction of a ppm of each
other. (If we subsample the ﬁrst set of experiments to one
packet every 3 minutes, then the difference between the
skew estimates for any two measurements in the ﬁrst set
is at most 0.45 ppm.)
PLANETLAB AND TOPOLOGY QUESTIONS. Although the
above results strongly suggest that skew estimates are inde-
pendent of access technology, the above experiments do not
stress-test the topology between the ﬁngerprinter and the
ﬁngerprintee. Therefore, we conducted the following set of
experiments. We selected a set of PlanetLab nodes from
around the world that reported, via ntptrace, approx-
imately accurate system times. We chose PlanetLab ma-
chines located at the University of California at San Diego,
the University of California at Berkeley, the University of
Washington, the University of Toronto (Canada), Prince-
ton (New Jersey), the Massachusetts Institute of Technol-
ogy, the University of Cambridge (UK), ETH (Switzerland),
IIT (India), and Equinix (Singapore). These PlanetLab ma-
chines, along with host1 and (in one case) CAIDA’s test
machine with a CDMA-synchronized Dag card, served as
our ﬁngerprinters. Our ﬁngerprintees were laptop and
host1, where laptop was connected both to the SDSC
wireless and to the CAIDA wired networks.
For each of our experiments, and for each of our cho-
sen PlanetLab nodes, we created a ﬂow between the node
and the ﬁngerprintee. Over each ﬂow our ﬁngerprintee sent
one packet at random intervals between 0 and 2 seconds;
here the ﬁngerprintee executed usleep with appropriate
parameters. We then recorded the ﬂows on the PlanetLab
machines using plabdump. On host1 we recorded the
corresponding ﬂow using tcpdump. And on the machine
with the Dag card we used Coral [14] (that machine was
only reachable when laptop was connected directly to
CAIDA’s wired network). We then computed the skew us-
ing the techniques from Section 3. The results for laptop
are in Table 4. Notice that the skew estimates are in general
within a fraction of a ppm of each other, suggesting that our
skew estimates are independent of topology.
For distance measurements for Table 4, we used tracer-
oute to determine hop count, and then used mean time be-
tween when tcpdump recorded a packet on the measured
device and the time between when plabdump recorded the
packet on the measurer. This distance estimate also includes
Measurer
host1
San Diego, CA
Berkeley, CA
Seattle, WA
Toronto, Canada
Princeton, NJ
Boston, MA
Cambridge, UK
ETH, Switzerland
IIT, India
Equinix, Singapore
CAIDA test lab
Dist. from measurer
laptop, 2004-09-17, 08:00–10:00 PDT
Skew estimate
−58.23 ppm
−58.07 ppm
−58.17 ppm
−58.15 ppm
−58.31 ppm
−57.97 ppm
−57.93 ppm
−58.06 ppm
−58.38 ppm
−58.10 ppm
7 hops, 2.77 ms
7 hops, 1.21 ms
10 hops, 4.02 ms
8 hops, 14.74 ms
16 hops, 44.43 ms
13 hops, 37.59 ms
12 hops, 35.82 ms
20 hops, 84.19 ms
20 hops, 90.51 ms
18 hops, 99.50 ms
Dist. from measurer
8 hops, 1.16 ms
8 hops, 1.15 ms
12 hops, 5.06 ms
9 hops, 15.12 ms
laptop, 2004-10-08, 08:00–10:00 PDT
Skew estimate
−58.03 ppm
−58.03 ppm
−58.02 ppm
−58.01 ppm
−57.91 ppm
−58.10 ppm
−58.18 ppm
−58.40 ppm
−59.60 ppm
−58.05 ppm
−57.98 ppm
14 hops, 36.97 ms
13 hops, 41.09 ms
21 hops, 86.45 ms
21 hops, 84.07 ms
16 hops, 199.27 ms
15 hops, 93.55 ms
5 hops, 0.24 ms
Table 4. Skew estimates of laptop, running Red Hat 9.0 with ntpd, for traces taken simultaneously
at multiple locations. On 2004-09-17 the laptop was connected to the SDSC wireless network, and on
2004-10-08 the laptop was connected to the CAIDA wired network. The Toronto and India lines have
empty cells because the PlanetLab machines at those locations were down during the experiment.
The Boston machine on 2004-10-08 was a different PlanetLab machine than the one on 2004-09-17.
The empty cell for the CAIDA test lab is because the lab is only reachable from CAIDA’s wired network.
the time spent in the application layers on the machines, but
should give a rough estimate of the time it takes packets to
go from the ﬁngerprintee to the measurer.
The results of these experiments suggest that our TSopt
clock skew estimation technique is generally independent
of the topology and distance between the ﬁngerprinter and
the ﬁngerprintee. Furthermore, these results suggest that
our skew estimation technique is independent of the actual
ﬁngerprinter, assuming that the ﬁngerprinter synchronizes
its system time with NTP [19] or something better [26].
Although not shown in the ﬁgure, our experiments with
OpenBSD 3.5 on another machine suggest that the TSopt
clock and system clock on default OpenBSD 3.5 installa-
tions have the same skew (approximately 68 ppm). On the
other hand, at least with this test machine, the TSopt clock
and system clock on a default FreeBSD 5.2.1 system have
different skews (the TSopt clock skew estimate is about the
same as with OpenBSD, but the system clock skew estimate
is approximately 80 ppm). When we turn on ntpd under
FreeBSD 5.2.1, the TSopt clock skew remained unchanged.
7 Effects of operating system, NTP, and spe-
cial cases
OPERATING SYSTEMS AND NTP ON FINGERPRINTEE. In
Table 5 we show skew estimates for the same physical de-
vice, laptop, running both Red Hat 9.0 and Windows XP
SP2, and both with and without NTP-based system clock
synchronization. (For this experiment, laptop sent one
packet to the measurer, host1, at random intervals be-
tween 0 and 2 seconds; laptop was connected to the
SDSC wireless network, and was 7 hops away from host1;
host1 also sent a ICMP Timestamp Request to laptop
at random intervals between 0 and 60 seconds.) The ta-
ble shows that, for the listed operating systems, the system
clock and the TSopt clock effectively have the same clock
skew when the device’s system time is not synchronized
with NTP, and that the TSopt clock skew is independent of
whether the device’s system clock is maintained via NTP.
POWER OPTIONS FOR LAPTOPS. We also consider how
the clock skews of devices are affected by the power op-
tions of laptops. In the case of Red Hat 9.0, when laptop
is running with the power connected, if we switch to battery
power, there is a brief jump in the TSopt clock offset-set for
the device, and then the device continues to have the same
(within a fraction of a ppm) clock skew. For laptop run-
ning Windows XP SP2, if the laptop is idle from user input
but continues to maintain a TCP ﬂow that we can monitor,
then the TSopt clock skew changes after we switch to bat-
tery power. If we repeat this experiment several times, and
if we boot with only battery power, we ﬁnd that the clock
skews with battery power are in all cases similar. When
booting with outlet power, the clock skew on laptop run-
ning Windows XP initially begins with a large magnitude,
and then stabilizes to a skew like that in Table 5 until we
disconnect the power; the initially large skew may be due
to the laptop recharging its batteries. We have not sam-
pled a large enough set of laptops to determine whether the
Start time
Operating System NTP
2004-09-22, 12:00 PDT
2004-09-17, 08:00 PDT
2004-09-22, 21:00 PDT Windows XP SP2
2004-09-23, 21:00 PDT Windows XP SP2
Red Hat 9.0
Red Hat 9.0
No
Yes
No
Yes
skew estimate
(TCP tstamps)
−58.20 ppm
−58.16 ppm
−85.20 ppm
−84.54 ppm
skew estimate
(ICMP tstamps)
−58.16 ppm
−0.14 ppm
−85.42 ppm
1.69 ppm
Table 5. Experiments for the same physical device, laptop, running different operating systems and
with NTP synchronization both on and off. For all experiments, laptop was located on the SDSC
wireless network. Additionally, laptop was up for an hour before the Windows measurements.
)
s
m
(
t
e
s
f
f
o
d
e
v
r
e
s
b
o
300
200
100
0
-100
-200
-300
14700
15000
time since start of measurement (seconds)
15300
15600
Figure 4. TSopt clock offset-sets for 100
honeyd 0.8b Windows XP SP1 virtual hosts.
Start time: 2004-09-19, 23:00PDT; honeyd
running on host3. Points are connected in
this ﬁgure to highlight the correlation be-
tween the virtual hosts.
clock skews with battery power are a simple function of the
clock skews with outlet power, though the skews with bat-
tery power seem to be consistent for a single laptop.
8 Applications
We now consider some applications of our techniques,
though we emphasize that our most important results are
the foundations we introduced in the previous sections that
make the following applications possible.
VIRTUALIZATION AND VIRTUAL HONEYNETS. We cre-
ated a honeyd [24] version 0.8b virtual honeynet consist-
ing of 100 Linux 2.4.18 virtual hosts and 100 Windows XP
SP1 virtual hosts. Our server in this experiment, host3,
is identical to host1, has 1GB of RAM, and maintains its
system time via NTP. We ran honeyd with standard nmap
and xprobe2 conﬁguration ﬁles as input; honeyd used
the information in these ﬁles to mimic real Linux and Win-
dows machines. We ran nmap and xprobe2 against the
virtual hosts to verify that nmap and xprobe2 could not
distinguish the virtual hosts from real machines.
We applied our TCP timestamps- and ICMP-based skew
estimation techniques to all 200 virtual hosts. Our ﬁn-
gerprinter in this experiment was on the same local net-
work. We observed several methods for easily distinguish-
ing between honeyd virtual hosts and real machines. First,
we noticed that unlike real Linux and Windows machines,
the virtual hosts always returned ICMP Timestamp Replies
with zero in the transmit timestamp ﬁeld. Additionally, we
observed that the honeyd Windows XP virtual hosts had
TSopt clocks Ctcp with Hz[Ctcp] = 2, whereas all of the real
Windows XP machines that we tested had Hz[Ctcp] = 10.
The lesson here is that although the nmap and xprobe2
conﬁguration ﬁles provide enough information for the re-
spective programs to effectively ﬁngerprint real operating
systems, the conﬁguration ﬁles do not provide enough in-
formation for honeyd to be able to correctly mimic all as-
pects of the Linux and Windows protocol stacks.
Even if honeyd completely mimicked the network
stacks of real Linux 2.4.18 and Windows XP SP1 machines,
we could still use our remote physical device ﬁngerprint-
ing techniques to distinguish between our 200 virtual hosts
and 200 real machines. Our TSopt clock skew estimates for
all 200 virtual hosts were approximately zero and the sys-
tem clock skew estimates for all 200 virtual hosts were ap-
proximately the same positive value. Given our discussion
in Section 5 of the distribution of clock skews, this lack
of variability in clock skews between virtual hosts is not
what one would expect from real machines. Furthermore,
the TSopt and system clocks between all the virtual hosts
of the same operating system were highly correlated; e.g.,
Figure 4 shows the TSopt offset-sets for all 100 Windows
XP SP1 virtual hosts 241 minutes into our experiment. We
communicated our results to the author of honeyd and, in
response, version 1.0 of honeyd randomly assigns TSopt
clock skews to each virtual host using a Gaussian distribu-
tion around the server’s system time. This decision may
affect other components of the system, e.g., if the server
runs ntpd, changes to the server’s system time may appear
as global changes to the distribution of the virtual hosts’
clocks. Version 1.0 of honeyd still issues ICMP Times-