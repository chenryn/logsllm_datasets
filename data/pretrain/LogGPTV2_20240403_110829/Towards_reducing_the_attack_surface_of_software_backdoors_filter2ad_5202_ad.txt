### Access Bypassing the Authentication Process

**Y5: Credential Stealing 1**  
- **Description**: Validated credentials are stored and made available via a hidden command.

**Y6: Credential Stealing 2**  
- **Description**: Validated credentials are sent via DNS requests to a remote server.

**Y7: Self-Modifying Authentication**  
- **Description**: In the case of a specific process ID, the central authentication function is rewritten on startup of the application to accept arbitrary passwords.

**Y8: Malicious Authentication Module**  
- **Description**: A malicious authentication module is introduced.

### Analysis of ProFTPD with Backdoors

We analyzed a version of ProFTPD containing these backdoors on Weasel’s supported platforms: x86, x64, and MIPS-32. The high-level results were identical across all platforms, so we discuss them collectively (specific numbers apply at least to the x64 version). Our analysis demonstrates that it is possible to reliably detect or disable backdoors Y1–Y6, thereby reducing the attack surface.

However, backdoors Y7 and Y8 present challenges:
- **Y7**: Can only be detected if, during testing, a case is encountered where the authentication function is actually being overwritten (i.e., the backdoor triggers on a specific process ID).
- **Y8**: Cannot be identified as Weasel currently does not evaluate dynamically loaded modules.

### Authentication

The decision tree computed from valid and invalid password protocol runs is depicted in Figure 6. On the function level, four deciders are identified, with `auth_pass()` having 78 deciders on the basic block level, 25 handler functions for valid passwords, and the highest scoring rank. Three of the eleven backdoors are located in the `pr_auth_authenticate()` decider function, which leads to a single handler function (`do_back()`) for valid passwords. This handler function belongs to backdoor Y6 and stores credentials once they are successfully validated. The function can be automatically identified as highly suspicious due to its calls to standard functions such as `mmap()`, `shm_open()`, `socket()`, and `sendto()`.

Two of the nine cold decider basic blocks in `pr_auth_authenticate()` lead to the implementations of backdoors Y2 and Y3. Cutting cold edges in the identified deciders would effectively render these backdoors non-functional.

In the x86 version of our modified ProFTPD server, the code implementing the "happy hour" backdoor (Y2) in `pr_auth_authenticate()` uses the conditional instruction `CMOVZ` to manipulate the outcome of the function. This highlights the need to consider implicit edges when examining a function’s control flow graph (CFG), as overlooking this could result in missing the backdoor.

**Figure 6: Decision Tree of the Authentication Process in ProFTPD**

### Command Dispatching

Weasel’s protocol description of FTP was modeled according to RFC 959 [29] and contains 34 commands (e.g., HELP and MKD). The function-level decision tree consists of six deciders (with `pr_cmd_dispatch_phase()` ranking first) and 60 handlers. Out of these handlers, 43 are exclusive to a single protocol run. Manual analysis confirms that these exclusive handlers indeed implement each of the 34 commands. For most commands, there exists exactly one exclusive handler. Consequently, it is straightforward to automatically identify the backdoor in our running example (Y1): among the external functions reachable from the HELP command’s only exclusive handler `core_help()` in the static CFG are the highly suspicious functions `setegid()`, `seteuid()`, and `system()`. Therefore, the corresponding HELP command can be identified as suspicious, and further defensive measures can be applied.

Weasel automatically and correctly identifies the addresses and sizes of exactly five function pointer tables in the address space of the respective ProFTPD process: `core_cmdtab`, `xfer_cmdtab`, `auth_cmdtab`, `ls_cmdtab`, and `delay_cmdtab`. The first table, `core_cmdtab`, is the largest and contains 35 entries describing the core set of commands supported by ProFTPD. Eight entries in `core_cmdtab` contain function pointers that are not contained in any of the recorded traces. By examining the respective entries in the binary program, they can be identified as corresponding to the following commands: EPRT, EPSV, MDTM, SIZE, DOWNLOAD, UPLOAD, GSM, and RSLV. While the first four are known benign FTP commands not defined in RFC 959, the last four belong to the backdoors Y4, Y5, and Y6. The other four identified function pointer tables also partly contain pointers to functions that were not encountered during testing. These functions correspond either to known commands (e.g., `xfer_log_stor()`) or the benign FTP command PROT, which is not defined in RFC 959.

### Conclusions

In this paper, we presented an approach for the automatic detection and disabling of certain types of backdoors in server applications by carefully examining runtime traces for different protocol runs. Our implementation, called Weasel, automatically captures these traces by repeatedly invoking a server application under test according to a formal, block-based specification of the respective protocol. As Weasel only relies on gdbserver for trace recording, it is widely applicable to various platforms. We discussed several empirical analysis results demonstrating how Weasel can be used to precisely detect relevant code parts and data structures within a given binary application.

### Acknowledgments

We thank Andreas Maaß and Martin Steegmanns for implementing the discussed artificial backdoors, Moritz Contag for assisting with the development of our tool, and the anonymous reviewers for their helpful comments. This work has been supported by the German Federal Ministry of Education and Research (BMBF) under support code 16BP12302; EUREKA-Project SASER.

### References

[1] GDB Remote Serial Protocol.  
   http://sourceware.org/gdb/onlinedocs/gdb/Remote-Protocol.html

[2] ProFTPD Backdoor Unauthorized Access Vulnerability, 2010.  
   http://www.securityfocus.com/bid/45150

[3] Backdoor Found In Arcadyan-based Wi-Fi Routers, 2012.  
   http://it.slashdot.org/story/12/04/26/1411229/backdoor-found-in-arcadyan-based-wi-fi-routers

[4] RuggedCom - Backdoor Accounts in my SCADA network? You don’t say..., 2012.  
   http://seclists.org/fulldisclosure/2012/Apr/277

[5] Samsung printers contain hidden, hard-coded management account, 2012.  
   http://www.zdnet.com/samsung-printers-contain-hidden-hard-coded-management-account-7000007928/

[6] D. Agrawal, S. Baktir, D. Karakoyunlu, P. Rohatgi, and B. Sunar. Trojan Detection using IC Fingerprinting. In IEEE Symposium on Security and Privacy, 2007.

[7] D. Aitel. An Introduction to SPIKE, the Fuzzer Creation Kit. www.blackhat.com/presentations/bh-usa-02/bh-us-02-aitel-spike.ppt, 2002. Presented at Black Hat US.

[8] P. Amini and A. Portnoy. Fuzzing Sucks! Introducing Sulley Fuzzing Framework. pentest.cryptocity.net/files/fuzzing/sulley/introducing_sulley.pdf, 2007. Presented at Black Hat US.

[9] A. Bittau, P. Marchenko, M. Handley, and B. Karp. Wedge: Splitting Applications into Reduced-privilege Compartments. In USENIX Symposium on Networked Systems Design and Implementation, 2008.

[10] D. Brumley, C. Hartwig, Z. Liang, J. Newsome, D. X. Song, and H. Yin. Automatically identifying trigger-based behavior in malware. In W. Lee, C. Wang, and D. Dagon, editors, Botnet Detection, volume 36 of Advances in Information Security, pages 65–88. Springer, 2008.

[11] D. Brumley and D. Song. Privtrans: automatically partitioning programs for privilege separation. In USENIX Security Symposium, 2004.

[12] S. Dai, T. Wei, C. Zhang, T. Wang, Y. Ding, Z. Liang, and W. Zou. A framework to eliminate backdoors from response-computable authentication. In IEEE Symposium on Security and Privacy, 2012.

[13] M. Dalton, C. Kozyrakis, and N. Zeldovich. Nemesis: preventing authentication & access control vulnerabilities in web applications. In USENIX Security Symposium, 2009.

[14] L. Duflot. CPU Bugs, CPU Backdoors and Consequences on Security. In European Symposium on Research in Computer Security (ESORICS), 2008.

[15] S. Duquette. Linux/SSHDoor.A Backdoored SSH daemon that steals passwords, Jan 2013.  
   http://www.welivesecurity.com/2013/01/24/linux-sshdoor-a-backdoored-ssh-daemon-that-steals-passwords/

[16] H. Flake. Structural comparison of executable objects. In Conference on Detection of Intrusions and Malware & Vulnerability Assessment (DIMVA), 2004.

[17] D. Gao, M. K. Reiter, and D. Song. Binhunt: Automatically finding semantic differences in binary programs. In Information and Communications Security, pages 238–255. Springer, 2008.

[18] D. Geneiatakis, G. Portokalidis, V. P. Kemerlis, and A. D. Keromytis. Adaptive defenses for commodity software through virtual application partitioning. In ACM Conference on Computer and Communications Security (CCS), 2012.

[19] Y. L. Gwon, H. T. Kung, and D. Vlah. DISTROY: detecting integrated circuit Trojans with compressive measurements. In USENIX Workshop on Hot Topics in Security, 2011.

[20] J. S. Havrilla. Borland/Inprise Interbase SQL database server contains backdoor superuser account with known password, 2001.  
   http://www.kb.cert.org/vuls/id/247371

[21] M. Hicks, M. Finnicum, S. T. King, M. M. K. Martin, and J. M. Smith. Overcoming an untrusted computing base: Detecting and removing malicious hardware automatically. In IEEE Symposium on Security and Privacy, 2010.

[22] D. Kilpatrick. Privman: A library for partitioning applications. In USENIX Annual Technical Conference, FREENIX Track, 2003.

[23] J. C. King. Symbolic execution and program testing. Communications of the ACM, 19(7):385–394, 1976.

[24] S. T. King, J. Tucek, A. Cozzie, C. Grier, W. Jiang, and Y. Zhou. Designing and implementing malicious hardware. In USENIX Workshop on Large-Scale Exploits and Emergent Threats (LEET), 2008.

[25] J. Lee, T. Avgerinos, and D. Brumley. Tie: Principled reverse engineering of types in binary programs. In Symposium on Network and Distributed System Security (NDSS), 2011.

[26] C.-K. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser, G. Lowney, S. Wallace, V. J. Reddi, and K. Hazelwood. Pin: building customized program analysis tools with dynamic instrumentation. In ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), 2005.

[27] H. D. Moore. Shiny Old VxWorks Vulnerabilities, 2010.  
   https://community.rapid7.com/community/metasploit/blog/2010/08/02/shiny-old-vxworks-vulnerabilities

[28] D. G. Murray and S. Hand. Privilege separation made easy: trusting small libraries not big processes. In European Workshop on System Security (EuroSec), 2008.

[29] J. Postel and J. Reynolds. File Transfer Protocol. RFC 959 (INTERNET STANDARD), Oct. 1985. Updated by RFCs 2228, 2640, 2773, 3659, 5797.

[30] N. Provos, M. Friedl, and P. Honeyman. Preventing privilege escalation. In USENIX Security Symposium, 2003.

[31] A. Slowinska, T. Stancescu, and H. Bos. Howard: A dynamic excavator for reverse engineering data structures. In Symposium on Network and Distributed System Security (NDSS), 2011.

[32] S. Sparks, S. Embleton, and C. C. Zou. A chipset level network backdoor: bypassing host-based firewall & IDS. In ACM Symposium on Information, Computer and Communications Security (ASIACCS), 2009.

[33] C. Sturton, M. Hicks, D. Wagner, and S. T. King. Defeating UCI: Building Stealthy and Malicious Hardware. In IEEE Symposium on Security and Privacy, 2011.

[34] M. Tehranipoor and F. Koushanfar. A Survey of Hardware Trojan Taxonomy and Detection. IEEE Design & Test of Computers, 27(1), 2010.

[35] K. Thompson. Reflections on trusting trust. Commun. ACM, 27(8), Aug. 1984.

[36] A. Waksman and S. Sethumadhavan. Silencing hardware backdoors. In IEEE Symposium on Security and Privacy, 2011.

[37] C. Wysopal, C. Eng, and T. Shields. Static detection of application backdoors - detecting both malicious software behavior and malicious indicators from the static analysis of executable code. Datenschutz und Datensicherheit, 34(3):149–155, 2010.

[38] T. Ylonen and C. Lonvick. The Secure Shell (SSH) Authentication Protocol. RFC 4252 (Proposed Standard), Jan. 2006.

[39] S. Zdancewic, L. Zheng, N. Nystrom, and A. C. Myers. Secure program partitioning. ACM Trans. Comput. Syst., 20(3):283–328, Aug. 2002.

[40] A. Zeller. Isolating cause-effect chains from computer programs. In ACM SIGSOFT Symposium on Foundations of Software Engineering, 2002.

### Appendix A: A-WEASEL Algorithm

Given a set of n traces on the function level, the A-WEASEL algorithm recursively performs the following steps:

1. **Determine the set of common functions:**
   \[
   S_{\text{common,funcs}} = S_{T_0,\text{funcs}} \cap S_{T_1,\text{funcs}} \cap \ldots \cap S_{T_{n-1},\text{funcs}}
   \]

2. **Determine the set of exclusive functions:**
   \[
   S_{T_i,\text{ex,funcs}} = S_{T_i,\text{funcs}} \setminus S_{\text{common,funcs}}
   \]

3. **For each exclusive function in each set \( S_{T_i,\text{ex,funcs}} \), determine the minimum number of call stack levels needed to distinguish between all of its invocations in the call graph (CG) of \( T_i \). We denote the minimum call stack needed for distinction as the signature call stack of an invocation. A new set \( S_{T_i,\text{ex,funcs,callstack}} \) containing all invocations with different signature call stacks of all functions in \( S_{T_i,\text{ex,funcs}} \) is created:**
   \[
   S_{T_i,\text{ex,funcs,callstack}} = \delta(S_{T_i,\text{ex,funcs}})
   \]

4. **For each set \( S_{T_i,\text{ex,funcs,callstack}} \), remove those invocations of exclusive functions from the set that are dominated by other exclusive functions in the call graph of the corresponding trace \( T_i \):**
   \[
   S_{T_i,\text{ex,funcs,top}} = \phi(S_{T_i,\text{ex,funcs,callstack}})
   \]
   Thus, only top-level invocations of exclusive functions of \( T_i \) are contained in the set.

5. **Group all remaining invocations in all sets \( S_{T_i,\text{ex,funcs,top}} \) according to their signature call stacks. Invocations with compatible signature call stacks are grouped together. Two signature call stacks are compatible if both are equal or are equal up to the end of one of the two call stacks. Note that each group corresponds to one specific exclusive function and can at most contain one specific invocation from each trace.**

6. **The immediate parent function in the common call stack of a group’s exclusive function is necessarily in set \( S_{\text{common,funcs}} \) and is added as a decider to the decision tree. Several groups can share a common decider function. If a group consists of only a single invocation from a single trace, the corresponding exclusive function is added as a handler to the decision tree. Recursion ends in this case.**

7. **For each group, dynamically trace the corresponding decider function for the group’s common signature call stack for all applicable protocol runs on the basic block level. From the recorded basic block traces, the internal decision tree of the decider function for the signature call stack is generated by a similar but simpler algorithm.**

8. **For each group, recursively execute A-WEASEL. For each invocation belonging to the group, a self-contained and minimal sub-trace \( T'_i \) is cut from the original trace \( T_i \) that starts with the corresponding signature call stack. A-WEASEL is executed on the set of all such sub-traces corresponding to the group. That is, A-WEASEL is executed on the sub-CGs of the decider identified for the group for all applying traces.**

9. **If a decider function is found to be a leaf in the resulting decision tree and does not exhibit any control flow differences on the basic block level for applicable protocol runs, it is transformed into a common handler function.**