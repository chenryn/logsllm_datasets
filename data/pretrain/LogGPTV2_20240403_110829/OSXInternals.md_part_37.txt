Create backing stores for repairing damage to the portions of the screen under the window and the
pointer.
Move the window, if necessary, in the mouse event handler function.
Figure 415 shows a rudimentary implementation in Open Firmware of a window that can be dragged.[15]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 45 of 86
[15] The source code for the implementation pictured here is available on this book's
accompanying web site (www.osxbook.com).
Figure 415. A window created using Open Firmware primitives
Open Firmware provides various other types of functionality that is beyond the scope of this book. For
example, you can "talk" to IDE, SATA, and SCSI drives directly in Open Firmware, thus allowing you to
fabricate your own command packets to such devices and perform I/O.
4.9. Firmware Boot Sequence
Recall from our discussion in Section 4.1 that at power-on time, a typical computer performs low-level
initialization followed by a self-test that sanity-checks the processor and closely connected hardware. In
the case of a PowerPC-based Apple computer, Open Firmware is passed control next. As Open Firmware
begins initializing itself, it performs the following sequence of operations.
It determines the memory configuration of the machine. It then allocates and initializes memory for
its internal data structures, memory pools, the device tree, and the Forth runtime environment.
It initializes devices that are necessary for a basic Forth environment: the memory management
unit, interrupt controllers, timers, and so on.
It verifies its NVRAM. If the NVRAM's contents are invalid, it resets the NVRAM variables to
their default values.
 If the use-nvramrc? NVRAM variable contains a TRue value, Open Firmware evaluates the
nvramrc script (see Section 4.9.1).
After handling nvramrc, Open Firmware probes for plug-in devices. It evaluates the FCodes
residing on the ROMs of discovered devices. In this manner, the device tree incrementally grows as
each device is found.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 46 of 86
Next, Open Firmware installs a console[16] and prints a banner. You could also arrange for your
own banner to be printed. For example, the following command causes your email address to be
printed as the banner by Open Firmware:
[16] The console may be a plug-in device, which is why Open Firmware installs a
console after probing for devices.
0 > setenv oem-banner you@your.email.address ok
0 > setenv oem-banner? true ok
It then performs some secondary diagnostics and any platform-dependent initialization.
 If the variable auto-boot? is false, Open Firmware drops into a prompt; otherwise it looks for a
boot device, unless one was explicitly specified through boot arguments. The variable boot-device
contains the default boot device. A typical device specification includes not just the containing
device of the appropriate client programthe bootloaderbut also the client program's location on that
device. Note that whether booting continues automatically also depends on the configured firmware
security mode, as we will see in Section 4.12.
Open Firmware is capable of reliably reading files from block devices. It invokes the boot device's
load method to read the client program from that device into memory. This is done using a device-
dependent protocol. For example, in the case of a local disk, Open Firmware reads the bootloader
from disk. Alternatively, it can use TFTP for booting over the network, in which case it downloads
three files: the bootloader, the kernel, and a kernel extensions cache.
If Open Firmware fails to find a boot device, it displays a blinking folder.
If all steps were completed successfully, Open Firmware eventually executes the bootloader.
Specifying Boot Devices
A boot device could be a locally attached hard disk or optical disc, a network interface, a
ROM device, a serial line, and so on. A typical value of the boot-device variable is
hd:,\\:tbxi, which specifies the boot device to be a file of type tbxi on the device referred
to by the hd alias. This normally resolves to the Mac OS X bootloader. Note that the default
definition of the hd alias may not contain a partition specifier, for example:
0 > devalias hd /pci@f4000000/ata-6@d/disk@0 ok
0 >
In such a case, Open Firmware will attempt to boot from the first bootable partition on the
device. If you have multiple bootable partitions, boot-device can be set to be more specific.
For example, hd:3,\\:tbxi refers to the third partition on the device specified by hd.
Similarly, /ht/pci@7/k2-sata-root/k2-sata@0/disk@0:9,\\:tbxi refers to the ninth
partition on an explicitly specified device path. A file can be referred to by its full pathname
instead of file type, as in hd:3,\System\Library\CoreServices\MegaBootLoader.
Open Firmware can directly load ELF, XCOFF, and bootinfo files as client programs, although it cannot
load Mach-O binaries. BootX, which can load Mach-O binaries, is presented to Open Firmware as a file
with a bootinfo header and an XCOFF trailer.
4.9.1. The Script
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 47 of 86
The user may create a script, usually simply called the script, which is also stored in NVRAM. The
script's contents are user-defined commands that can be executed during startup, depending on the value
of the use-nvramrc? firmware variable. The script is initially empty. You can start editing the (intended)
contents of the script by calling nvedit from Open Firmware. Doing so runs the script editor, which
supports rudimentary text editing. Table 43 lists some useful key combinations available in nvedit.
Table 43. Key Combinations for nvedit Command-Line Editing
Keys Purpose
^c Exit the script editor and return to the Open Firmware prompt.
^k Delete from the current position to the end of the line. If the
cursor is at the end of the line, then join the current line with the
next linethat is, kill the newline.
^l Display the entire contents of the editing buffer.
^n Go to the next line.
^o Open another line at the current cursor position.
^p Go to the previous line.
The text you edit using nvedit is stored in a temporary buffer. Once you exit the editor, you may discard
the buffer's contents using nvquit or copy them to NVRAM using nvstore. You may also execute the
contents using nvrun.
Warning
An erroneous script can render the system unbootable and may even cause permanent damage that would
necessitate hardware repair. Use extreme caution while experimenting with this feature of Open
Firmware.
4.9.2. Snag Keys
Open Firmware supports snag keys that you can press as the computer is started to redirect the boot
sequence to various boot devices. Table 44 shows some examples of such keys.
Table 44. Boot-Time Snag Keys
Snag Keys Description
c Use the first bootable partition on the cd aliasnormally a CD-
ROM drive.
d Use the first bootable partition on the hd aliasnormally a disk
drive.
n Attempt to force boot over the network using BOOTP
[a]/TFTP on the enet aliasnormally a network device.
t Boot into target disk mode.
x Boot a Mac OS X system (as opposed to Mac OS 9) if a
bootable installation exists. This key is deprecated.
z Use the first bootable partition on the zip aliasnormally a ZIP
drive.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 48 of 86
option Interrupt Open Firmware's boot device selection and invoke
the OS Picker application, which allows the user to choose an
alternate boot device or system installation.
shift Boot in safe mode.
Boot into Open Firmware.
Zap the parameter memory.
Attempt to force boot from any device other than the one
specified by the boot-device firmware variable.
Boot in verbose mode.
[a] Bootstrap Protocol.
Target Disk Mode
Pressing the t key as an Apple computer powers on will boot it into the FireWire target disk
mode. Essentially, your machine becomes an external FireWire disk drive that can be
connected to another computer through a FireWire cable. This mode is implemented by an
Open Firmware package called firewire-disk-mode. You can also enter this mode from the
Open Firmware prompt by using the target-mode word. Beginning with Mac OS X 10.4,
the Startup Disk preference pane provides a button for restarting the computer in the target
disk mode. Clicking this button is equivalent to setting the boot-command firmware variable
(whose usual value is mac-boot) as follows. The first reboot after setting this variable will
result in the computer entering the target disk mode, after which boot-command will be reset
to mac-boot.
[View full width]
$ sudo nvram boot-command='" mac-boot" " boot-command" $setenv
target-mode'
4.10. BootX
BootX is the default bootloader on PowerPC-based Mac OS X systems.[17] As the first software that runs
during system startup, it prepares an initial execution environment for the kernel, to which it passes
control eventually.
[17] BootX is also the name of a third-party open source bootloaderunrelated to Apple's
BootXthat allows dual-booting Mac OS and Linux on Old World machines.
4.10.1. File Format
The BootX file is in the bootinfo format: It contains an XML header, various types of data (such as icons),
Forth source, FCode bytecodes, and machine code.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 49 of 86
Figure 416 shows an example of a bootinfo file. The OS-BADGE-ICONS element can contain icons to be
displayed in the Open Firmware boot selector.
Figure 416. A bootinfo file
MacRISC MacRISC3 MacRISC4
Boot Loader for Mac OS X.
1010
...
load-base
begin
...
until
( xcoff-base )
load-size over load-base - -
( xcoff-base xcoff-size )
load-base swap move
init-program go
^D
... machine code
BootX is compiled from source into a Mach-O executable, which is then converted to XCOFF format.
The XCOFF file is appended to a bootinfo header to yield the BootX file that resides
in /System/Library/CoreServices/. The /usr/standalone/ppc/ directory contains the XCOFF file
(bootx.xcoff), along with a copy of BootX in bootinfo format (bootx.bootinfo). Recall that Open
Firmware can load both the bootinfo file and the XCOFF binary.
It is possible to create your own bootloaderrather, a boot chooserby creating a bootinfo file with a Forth
script (the BOOT-SCRIPT element) that displays various booting options such as the following:
 Boot from a disk drive (specified by variations of the hd alias).
 Boot from an optical drive (specified by the cd alias).
Boot from a FireWire drive (specified by a device tree path).
 Boot over the network (using the enet alias).
 Enter the target disk mode (using the target-mode word).
 Power cycle the computer (using the reset-all word).
 Shut down the computer (using the shut-down word).
 Eject an optical disc (using the eject word).
Each of these options can be served by existing Open Firmware words. Such a bootloader could even be
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 50 of 86
graphical, where you use the framebuffer to display a menu and use the mouse to make a selection.
Pressing the option key during startup launches a similar Open Firmware application, the OS Picker.
4.10.2. Structure
BootX can be functionally divided into a client interface, a file system interface, a secondary loader, and a
utility library. These components are implemented in the ci.subproj, fs.subproj, sl.subproj, and
libclite.subproj subdirectories, respectively, in the BootX source.
BootX implements a plug-in interface for file systems that it supports. Apple's default implementation of
BootX can load kernels from the HFS, HFS Plus, UFS, and Ext2 file systems. BootX also includes a file
system abstraction for the Network file systemessentially a wrapper around a TFTP client implementation.
Besides kernel binaries in the Mach-O format, BootX can also load ELF kernels.
ELF Support
Mac OS X does not use the ELF support in BootX. Old World Macintosh computers had
various issues with the implementation of Open Firmware. This caused many booting
problems for Apple engineers and even more problems for third parties porting Linux to the
PowerPC. Having access to the firmware's source, Apple solved most of the problems either
via NVRAM patches or by integrating the required changes into BootX itself. The latter was
done in the instances where the changes could not be implemented as patches. As BootX
matured, Apple added support for Ext2 and ELF with the goal of making the platform more
amenable to PowerPC Linux.
4.10.3. Operation
Let us look at the sequence of events that occur when BootX starts executing after being handed control
by Open Firmware.
The entry point of the BootX executable is a symbol called StartTVector, which points to a
function called Start(). BootX is called with a pointer to the Open Firmware client interface.
Start() moves the stack pointer 256 bytes from the end of a 32K chunk of BootX's heap, from
where it will grow upward during use. Start() then calls Main().
const unsigned long StartTVector[2] = {(unsigned long)Start, 0};
char gStackBaseAddr[0x8000];
...
static void
Start(void *unused1, void *unused2, ClientInterfacePtr ciPtr)
{
long newSP;
// Move the Stack to a chunk of the BSS
newSP = (long)gStackBaseAddr + sizeof(gStackBaseAddr) 0x100;
__asm__ volatile("mr r1, %0" : : "r" (newSP));
Main(ciPtr);
}
 Main() calls InitEverything(), which, as its name suggests, performs a variety of initialization
steps. It initializes the Open Firmware client interface that BootX uses to talk to the firmware. It
also retrieves the firmware version.
 BootX then creates an Open Firmware pseudo-device called sl_words (sl stands for secondary
loader) and defines various Forth words in it. For example, the code for the spinning cursor seen
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 51 of 86
during booting is set up here.
 BootX uses the firmware's client interface to look up the options device, which contains various
system configuration variables that may be viewed and set using the printenv and setenv words
in Open Firmware.
0 > dev /options .properties
name options
little-endian? false
real-mode? false
auto-boot? true
diag-switch? false
...
boot-command mac-boot
...
You can also examine the properties of the options device and even browse a representation of the
device tree from Mac OS X. Tools such as IORegistryExplorer.app and ioreg can be used for
this purpose.
$ ioreg -p IODeviceTree -l 0 -w | less
...
+-o options 
...
 BootX looks up the chosen device, which contains system parameters chosen or specified at
runtime: instance handles for entities such as memory, the console input and output devices, the
MMU, the PMU, the CPU, the programmable interrupt controller (PIC), and so on. If the keyboard
cannot be initialized based on chosen's contents, BootX attempts to obtain an instance handle to the
keyboard device by explicitly trying to open the keyboard and kbd devices. It then initializes the
keymap by calling slw_init_keymap, which is one of the sl words.
0 > dev /chosen .properties
name chosen
stdin ffbc6e40
stdout ffbc6600
memory ffbdd600
mmu ...
...
 BootX checks the value of the security-mode firmware variable. If this variable is set and has a
value other than none, BootX sets the "secure" bit in its boot mode variable. It also checks whether
the verbose mode (the key combination) or single-user mode (the key combination) were
specified, enabling verbose messages to be printed during booting if either were specified. Note that
no messages are printed in the secure boot mode, regardless of the verbosity flags.
By default, BootX is compiled to display a failure screen if booting fails. Alternatively, BootX can
be compiled to go back to Open Firmware on failure.
BootX checks whether the system is booting in safe mode. If so, it sets the corresponding bit in its
boot mode variable.
BootX claims memory for various purposes. A typical memory map assumed by BootX occupies
96MB of physical memory starting at address 0x0. The beginning of this physical range contains