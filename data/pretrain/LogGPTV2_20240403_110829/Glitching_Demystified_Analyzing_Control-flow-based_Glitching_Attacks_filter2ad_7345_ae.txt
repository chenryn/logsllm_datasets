be read twice, which means that if the value were glitched
successfully during the ﬁrst load it would pass all checks.
Thus, this analysis should provide a reasonable lower-bound
for the effectiveness of these defenses in practice (i.e., their
ability to protect any code). Similarly, in both experiments,
we attempted three different attack scenarios: a single glitch
attack, where the clock cycle being glitched was varied (be-
tween 0 and 10); a long glitch attack, where the number of
clock cycles being glitched was varied (between 10 and 100 at
increments of 10); and a windowed long glitch attack, where
the number of clock cycles was ﬁxed at 10 (the best case
in our previous experiment), but the initial clock cycle was
varied (between 0 and 10 at increments of 10). All of the
experiments had a perfect trigger, as before. These attacks are
far more powerful than what an attacker would have access
to on a real system, but, again, were constructed to provide a
lower bound for the efﬁcacy of the defenses.
1) while(!a) (worst case): The while(!a) condition
was the most vulnerable against single-glitch attacks, and was
thus chosen as our worst case scenario. As in Section V, we
glitched the inﬁnite loop, attempting to break out of it with
the various defenses compiled into the code. While it should
be theoretically impossible to defeat these defenses with a
single glitch, the volatile variable leaves the possibility
of successful glitching the register value and satisfy both
conditional branches. The results from the three glitching
attacks against this code are shown in Table VI.
The defenses turned out
to be highly effective against
the single-glitch attack, with success rates plummeting to
less than 0.01%. Moreover, the detection rate is remarkably
high (over 98%) both with and without the randomization
defense enabled. This result is somewhat unsurprising, as these
defenses were speciﬁcally constructed to ensure that no single
incorrect branch would result in a compromised system [17].
However, the detection rates are especially encouraging with
respect to real-world use cases for these defenses. The results
are similarly positive against the more powerful long glitch
attacks, with all of the defenses touting detection rates above
79%. It appears that the 10 cycle, a windowed glitch is far
more effective against systems that do not have randomization
enabled, since the more targeted window produces fewer
detectable side effects. However, with randomization enabled,
this attack performs slightly worse than the longer long glitch
attack, likely due to the fact this shorter glitch window is more
likely to corrupt a branch condition in the random function,
which would be detected. On the contrary, since the long glitch
attack will affect every clock cycle after the trigger, it can also
glitch all of the detection code that it may touch.
TABLE VI: Successful glitches and detections against an
inﬁnite loop and a branch condition with GLITCHRESISTOR
defenses. Successes(%): suc.
tot. , Detections(%):
det.+suc.
det.
while(!a)
All\Delay
All
if(a==SUCCESS)
All
All\Delay
e Total
107,811
107,811
Successes 10 (0.00928%) 4 (0.00371%)
Detections 653 (98.4%) 1,032 (99.6%)
-
1 (0.000928%)
351 (100%)
95 (95.4%)
l
g
n
S
i
e
l
c
y
C
0
1
g Total
98,010
98,010
n
o
L
Successes 258 (0.263%) 262 (0.267%)
Detections 981 (79.2%)
649 (71.2%)
3 (0.00306%) 44 (0.0449%)
1,143 (99.7%) 274 (86.2%)
s Total
107,811
107,811
Successes 227 (0.211%) 1,281 (1.188%) 10 (0.00557%) 2 (0.00186)
Detections 1,858 (89.1%)
2,019 (99.7%) 1016 (99.8%)
992 (43.6%)
2) if(a == SUCCESS) (best case): In real code, inﬁnite
while loops are unlikely to guard security-critical code. Thus,
to provide a more fair evaluation of the proposed defenses, we
also attempted the three attacks against a simple if statement
that is more indicative of how programmers write code. To
ensure that all of the proposed defenses would be used, and
to use the most resilient branch condition from Section V-C,
we created an uninitialized enum variable: SUCCESS, which
was initialized to enum FAILURE. This scenario should
be the best case for the defenses (modulo the volatile
variable), as the window for the a successful glitch is now
quite narrow (i.e., 8 clock cycles). The same attacks that from
Section VII-B1 where used against this if statement; the
results are shown in Table VI.
Indeed, the real power of these software-only defenses is
exhibited in this case — only one single glitch attack was
successful, with detection rates above (95%). The effectiveness
of the long glitch attacks was similarly diminished. With all
of the defenses enabled, the best attack was only able to
achieve a 0.00557% success rate, with over 2,000 detections
(a 99.7%) detection rate. Without the randomization defense
enabled, the best attack was able to achieve a success rate of
0.0449%, with an 86.2% detection rate. While this experiment
was constructed to be the best case scenario for the defenses, it
is certainly not a corner case in real world code, demonstrating
some real promise for these types of software-only defense
against glitching in practice.
VIII. RELATED WORK
In this section, we focus on work related to glitching de-
fenses. Most of the hardware-based approaches are speciﬁc to
a fault type. They require a precise sensitivity model [28], [85],
[81], which is non-obvious for certain fault types such as those
induced by an electromagnetic pulse. Recent work by Yuce
et al. [86] shows that most of the hardware-based defenses
are ineffective in the presence of multi-fault glitches (e.g.,
voltage and EM). In this work, we focus on software-based
defenses and develop a generic instrumentation technique that
defends arbitrary software against various faults. Previous
Software-Based
Defenses
Generic Extensible Backward
Compatible
Defense Techniques
Constant
Data
Diversiﬁcation
Integrity
Control ﬂow
Hardening
Data Encoding [38], [15]
CAMFAS [18]
Loop Hardening [61]
IIR [59]
CountCompile [12]
CountC [37]
SWIFT [64]
CFCSS [56]
GLITCHRESISTOR






















































Random
Delay









TABLE VII: Comparison of GLITCHRESISTOR with existing
software-based glitching defenses. Each technique is evaluated
by checking whether the desirable properties are present ()
or absent ().
work [50], proposed and evaluated two software-only defenses
(one which replicates instructions for redundancy [51] and
the other which detects glitches [11]) for bl and ldr on
ARM systems against electromagnetic fault injection (EMFI)
glitching. These defenses are quite similar to our techniques
for redundancy, and had similar success when they were eval-
uated. However, they noted that the countermeasure needed to
be extended to a larger set of instructions and architectures,
which GLITCHRESISTOR does by leveraging LLVM. Recent
work [16] independently implemented, and evaluated branch
duplication techniques in the context of spurious bit ﬂips
due to hardware malfunctions. Similar work [37] proposed
a CFI method which implements a counter to detect if two
more C source lines have been “skipped.” However,
this
defense is especially heavyweight since it injects code after
every instruction and it does not account for the possibility
of a multi-glitch. Another work, CAMFAS [18], that uses
SIMD [29] to replicate almost all instructions to detect fault
attacks also suffers from the problem of being cumbersome
and requires special hardware.
Most of the existing techniques are either application spe-
ciﬁc (e.g., AES) or not backward compatible (i.e., require the
code of an entire program to be changed). On the other hand,
GLITCHRESISTOR is generic, can be applied to any code, is
backward compatible, and can be applied to selected program
regions (e.g., certain sensitive functions). GLITCHRESISTOR
is based on the LLVM framework and is easily extended with
other defenses. Table VII shows various software-based de-
fenses in comparison with GLITCHRESISTOR demonstrating
its holistic approach for defending against glitching.
Others have proposed a hybrid software and hardware
approach where functions can be protected by inserting an
assert function in the source, which will be updated with
an LLVM pass to confer with the hardware and verify the
“signature” of the function being executed [81]. GLITCHRE-
SISTOR is differentiated by its fully-automated instrumentation
and lack of mandatory source-code annotations.
Emulating glitching attacks has also been done previously.
For example, one system implemented a fault injection em-
ulator in the context of writing fault-tolerant code, but did
not examine malicious glitching attacks [32]. Others similarly
implemented a QEMU-based fault
injection emulator [22]
and glitch simulator [76] have been created to evaluate fault-
tolerant techniques, both of which achieved mixed results.
Nevertheless, since glitching is a physical phenomena, none
of these emulators can adequately provide the realism of our
real-world evaluation.
Previous work [83] presented comprehensive suggestions
for source code modiﬁcations to make code glitch resistant,
which our defenses are based on. Similarly, more recent
work [82] advocated that “software mitigations like execution
ﬂow control, redundancy or random delays should be imple-
mented” in embedded ﬁrmware. However, GLITCHRESISTOR
is the ﬁrst open-source framework for experimenting with
various defenses and to test these defenses against attacks on
real hardware, grounding our results and providing a more
realistic view of their practical efﬁcacy.
IX. CONCLUSION
In this work, we present GLITCHRESISTOR, an automated,
open-source software-only defense framework. Our emulated
experiments conﬁrm that bit-level corruption can “skip” con-
trol ﬂow instructions in ARM with a high likelihood in theory
(60% when ﬂipping to 0 and 30% when ﬂipping to 1).
Our real-world experiments demonstrated that glitching can
be highly effective when all of the variables are controlled
(e.g., 100% success rate), and that the values being compared
affect the glitchability of a particular branch instruction (e.g.,
while(!a) was 2× more susceptible to glitching than
while(a)). Moreover, we provide insights into how the
control ﬂow instructions are being skipped (e.g., the register
data being corrupted versus the execution being corrupted).
We also demonstrate the complexity involved with multi-
glitch attacks, whose difﬁcultly is the basis of many proposed
defenses. Finally, we show that GLITCHRESISTOR, with it’s
various software-only glitching defenses are capable of com-
pletely eliminating single-glitch attacks in practice and can
minimize the likelihood of a successful multi-glitch attack ,
while detecting failed glitching attempts at a high rate.
ACKNOWLEDGEMENTS
We would like to acknowledge Fabian Monrose for his
invaluable feedback on this work, Timothy Sherwood for his
unwavering support, and our reviewers that helped to focus
and strengthen this work through their comments. Similarly,
we would like to thank Colin O’Flynn and the various experts
at IBM Research and Riscure that we talked with for taking