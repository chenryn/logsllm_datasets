一个从ua.hpp 文件遗漏的输出功能是输出寄存器名称。在分析阶段，根据操作数使用的寻址模式，寄存器的编号被存储在操作数的reg
 或phrase
 字段中。由于许多操作数使用寄存器，因此最好有一个函数能够根据给定的寄存器编号迅速输出一个寄存器字符串。下面的函数提供了这样的基本功能：
//with the following we can do things like: OutReg(op.reg);  
void OutReg(int regnum) {  
   out_register(ph.regNames[regnum]);  //use regnum to index register names array  
}
IDA 仅在必要时调用 out
 函数，例如一个地址出现在一个 IDA 窗口，或一个反汇编行的某些部分被重新格式化时。每次 out
 被调用，它都会根据需要输出多行数据，以表示在 cmd
 全局变量中描述的指令。为此，out
 通常会一次或多次调用 MakeLine
 （或printf_line
 ）。多数情况下，输出一行（因此只需调用 MakeLine
 一次）数据就够了。
如果需要多行数据来描述一条指令，你绝不能在输出缓冲区中添加换行符，尝试一次生成几个数据行。相反，你应该多次调用 MakeLine
 ，以输出各行数据。MakeLine
 的原型如下所示：
bool MakeLine(const char *contents, int indent = -1);
indent
 值为-1 表示使用默认缩进，它是在 Options▶General对话框的 Disassembly部分指定的inf.indent
 的当前值。当反汇编代码清单中的一条指令（数据）跨越几行时，indent
 参数还有其他意义。在一条多行指令中，缩进为-1 的行表示这一行为该指令的“最重要”的行。请参考lines.hpp 文件中printf_line 函数的注释，了解在这种情况下如何使用 indent的其他信息。
到现在为止，我们一直回避讨论注释。与名称和交叉引用一样，注释也由IDA 内核处理。但是，你可以控制注释在多行指令的哪一行显示。在某种程度上，注释的显示由在lines.hpp 中声明的全局变量gl_comm
 控制。关于gl_comm
 ，需要注意的是，除非gl_comm
 被设置为1 ，否则注释根本不会显示。如果 gl_comm
 设置为0 ，即使用户输入 1 并且在OptionsGeneral设置中启用注释，注释仍然不会在你生成的输出后面显示。问题是，gl_comm
 的默认值为0 ，因此，如果你希望用户在使用你的处理器模块时看到注释，你需要在某个时候将它设置为1 。out
 函数生成多行数据时，如果你希望用户输入的注释在除第一行输出以外的行中显示，那么，你需要控制gl_comm
 。
了解了构建输出器的重点内容后，下面是示例 Python 处理器的 out 函数：
void py_out(void) {  
   char str[MAXSTR];  //MAXSTR is an IDA define from pro.h  
   init_output_buffer(str, sizeof(str));  
   OutMnem(12);       //first we output the mnemonic  
   if(cmd.Op1.type != o_void) {  //then there is an argument to print  
      out_one_operand(0);  
   }  
   term_output_buffer();  
   gl_comm = 1;      //we want comments!  
   MakeLine(str);    //output the line with default indentation  
}
这个函数以一种非常简单的方式处理一个反汇编行的各个组件。如果 Python 指令包含两个操作数，我们可以使用 out_symbol
 输出一个逗号，然后再次调用 out_one_operand
 输出第二个操作数。多数情况下，outop
 函数都比out
 函数更加复杂，因为操作数的结构通常要比指令的宏观结构更加复杂。执行 outop
 函数的常见方法是使用一个分支语句测试操作数的 type
 字段的值，并对操作数进行相应的格式化。
在Python 示例中，我们被迫使用一个非常简单的 outop
 函数，因为多数情况下，我们都缺乏将整数操作数转换成其他更易懂的数据所需的信息。outop
 函数的实现过程如下所示，我们仅仅对比较和相对跳转进行了特殊处理：
char *compare_ops[] = {  
    "", ">=",  
    "in", "not in", "is", "is not", "exception match"  
};  
bool idaapi py_outop(op_t& x) {  
   if (cmd.itype == COMPARE_OP) {  
      //For comparisons, the argument indicates the type of comparison to be  
      //performed.  Print a symbolic representation of the comparison rather  
      //than a number.  
      if (x.value  qnumber(compare_ops)) {  
         OutLine(compare_ops[x.value]);  
      }  
    else {  
      OutLine("BAD OPERAND");  
    }  
   }  
   else if (cmd.auxpref & HAS_JREL) {  
      //we don't test for x.type == o_near here because we need to distinguish  
      //between relative jumps and absolute jumps.  In our case, HAS_JREL  
      //implies o_near  
      out_name_expr(x, x.addr, x.addr);  
   }  
   else {  //otherwise just print the operand value  
      OutValue(x);  
   }  
   return true;  
}
除了经过反汇编的指令外，反汇编代码清单中通常还包括应表示为数据的字节。在输出阶段，数据显示由 LPH
 对象的 d_out
 成员处理。内核调用 d_out
 函数来显示任何不属于指令的字节，不管这些字节的数据类型是未知，还是已经被用户或模拟器格式化成数据。d_out
 的原型如下：
void idaapi d_out(ea_t ea);   //format data at the specified address
d_out
 函数应检查与 ea
 参数指定的地址有关的标志，并以所生成的汇编语言生成数据的相应表示形式。你必须为所有处理器模块指定这个函数。SDK 以intel_data
 函数的形式提供了这个函数的大致实现，但它不可能满足你的特殊要求。在 Python 示例中，其实很少需要格式化静态数据，因为我们没有办法找到这类数据的位置。举例来说，以下面这种方式应用这个函数：
void idaapi python_data(ea_t ea) {  
   char obuf[256];  
   init_output_buffer(obuf, sizeof(obuf));  
   flags_t flags = get_flags_novalue(ea);  //get the flags for address ea  
   if (isWord(flags)) {  //output a word declaration  
      out_snprintf("%s %xh", ash.a_word ? ash.a_word : "", get_word(ea));  
   }  
   else if (isDwrd(flags)) {  //output a dword declaration  
      out_snprintf("%s %xh", ash.a_dword ? ash.a_dword : "", get_long(ea));  
   }  
   else { //we default to byte declarations in all other cases  
      int val = get_byte(ea);  
      char ch = ' ';  
      if (val >= 0x20 && val = 0x7E) {  
         ch = val;  
      }  
      out_snprintf("%s %02xh   ; %c", ash.a_byte ? ash.a_byte : "", val, ch);  
   }  
   term_output_buffer();  
   gl_comm = 1;  
   MakeLine(obuf);  
}
bytes.hpp 中声明了一些函数，它们用于访问和测试与数据库中的任何地址有关的标志。在这个例子中，标志经过测试，以确定地址表示的是字还是双字，并使用当前汇编器模块中适当的数据声明关键字生成相应的输出。全局变量 ash
 是asm_t
 结构体的一个实例，该结构体描述反汇编代码清单所使用的汇编器语法的特点。如果希望生成更加复杂的数据显示，如数组，我们将需要更多信息。
19.3.6 处理器通知
在第17 章中，我们提到，插件能够使用 hook_to_notification_point
 函数“钩住”各种通知消息。通过“钩住”通知，插件能够获知数据库中发生的各种操作。处理器模块也采用通知消息的概念，但处理器通知的实现方式与插件通知的实现方式稍有不同。
所有处理器模块都应设置一个指针，指向LPH
 对象的notify
 字段中的一个通知函数。notify
 函数的原型如下所示：
int idaapi notify(idp_notify msgid, ...);  //notify processor with a given msg
notify
 函数是一个参数可变的函数，它接收一个通知代码以及一个特定于通知代码的参数列表，其中列表中的参数数量可变。请参阅 idp.hpp 文件，了解完整的处理器通知代码。通知消息既适用于简单的操作，如加载（init
 ）和卸载（term
 ）处理器，也适用于复杂的通知，如创建的代码或数据、添加或删除的函数、添加或删除的段。idp.hpp 文件中还指定了与每个通知代码有关的参数列表。在分析 notify
 函数的示例之前，我们先来看在 SDK 的一些样本处理器模块中发现的下列注释：
// A well-behaving processor module should call invoke_callbacks()  
// in its notify() function. If invoke_callbacks function returns 0,  
// then the processor module should process the notification itself.  
// Otherwise the code should be returned to the caller.
为了确保所有已经“钩住”处理器通知的模块都能够得到通知，必须调用invoke
 _ callbacks
 函数。这使得内核将给定的通知消息传播给所有注册的回调函数。Python 处理器中使用的 notify
 函数如下所示：
static int idaapi notify(processor_t::idp_notify msgid, ...) {  
   va_list va;  
   va_start(va, msgid);   //setup args list  