### 1. Introduction

In this section, we introduce the concept of "treplication security" as a formal basis for studying channel binding and related notions. We also highlight that our "functional" approach, detailed in Section 6.1, bears similarities to Shoup's model [34] and the "suitable for" notion from [8].

### 2. The UA and MA KE Models

This section provides a concise description of the Canetti-Krawczyk security model for key-exchange protocols [9, 10], which serves as the foundation for the formal security treatment in this paper. For comprehensive details, please refer to [9].

#### 2.1 Mutual Authentication (MA) KE Model

We begin by presenting the original CK model for mutual authenticated key exchange (KE), and then adapt it to the case of unilateral authentication. In this paper, we will refer to the mutual authentication model as MA and differentiate it from the unilateral authentication model, denoted as UA.

A key-exchange (KE) protocol operates in a network of interconnected parties, all modeled as probabilistic polynomial-time machines, including adversaries. Each party can be activated to run an instance of the protocol, known as a session. Within a session, a party can be activated to initiate the session or respond to incoming messages. Based on these activations and the protocol specification, the party creates and maintains a session state, generates outgoing messages, and eventually completes the session by outputting a session key `sk` and erasing the session state. If authentication fails, the session may be aborted without generating a session key (`sk = ⊥`).

A KE session is associated with its owner (the party at which the session exists), a peer (the party with which the session key is intended to be established), and a session identifier, denoted `sid`. A KE protocol defines the contents of `sid`, typically including nonces and other transcript information. Sessions are named by their owner and `sid`, and if the session peer is identified, also by the peer identity. For example, `(S, sid)` for a session at party `S` or `(S, C, sid)` if the peer to the session is identified as `C`. It is assumed (and enforced by the protocol) that any two sessions at the same (honest) party have different identifiers.

**Credentials:**
- **Public Key Setting:** Parties possess public keys of their choice, and they can verify the authentic binding between identities and public keys, either through a certification authority (CA) or other means such as out-of-band distribution.
- **Pre-Shared Key Setting:** Pairs of parties share a secret symmetric key used for authentication.

**Attacker Model:**
The attacker, denoted `A`, is an active "man-in-the-middle" adversary with full control over the communication links between parties. `A` can intercept, modify, delay, or prevent the delivery of messages, inject its own messages, and interleave messages from different sessions. `A` also schedules all session activations and message deliveries.

**Attacks:**
- **Reveal Query:** Can be performed against an individual session after completion, allowing the attacker to learn the corresponding session key `sk`.
- **Corrupt Query:** Allows the attacker to learn the long-term secret of a party. From the moment a party is corrupted, all its actions may be controlled by the attacker. Non-corrupted parties are referred to as uncorrupted or honest.

For simplicity, we do not consider the CK StateReveal query in this presentation.

**Basic Security (Mutual Authentication):**
To define security, we establish a notion of matching via session identifiers. If session `(C, S, sid)` completes at party `C`, then session `(S, C, sid)`, if it exists at `S` and completes, is said to be matching to `(C, S, sid)` (note the correspondence of peers and equality of `sid`). Only complete sessions have matching sessions.

Sessions against which any one of the attacks Reveal or Corrupt is performed (including sessions compromised via party corruption) are called exposed. A session is called fresh if it is complete and not exposed, and its matching session (if it exists) is also not exposed.

The security of session keys generated in fresh sessions is captured by the inability of the attacker `A` to distinguish the session key of a test session, chosen by `A` among all fresh sessions in the protocol, from a random value. This is captured via a Test query, which may only be asked once during the security game. It sets `K0 := sk` (or random if `sk = ⊥`) as the real session key, and `K1 ←r {0, 1}^λ`. Then, it picks `b ←r {0, 1}` and returns `Kb`. The attacker can continue with regular actions against the protocol after the Test query; at the end of its run, `A` outputs a bit `b'`, which is meant as a guess for the value of `b`.

A key-exchange protocol `π` is secure if for polynomial-time attackers `A` running against `π`, the probability that `A` wins the Test experiment, namely, it outputs a correct guess `b = b'`, is at most `1/2` plus a negligible fraction.

**Perfect Forward Secrecy (PFS):**
A key-exchange protocol achieves perfect forward secrecy (PFS) if it satisfies the above definition when relaxing the notion of fresh sessions to allow a Corrupt query against the owner of the session but only upon completion of the session.

#### 2.2 Unilateral Authentication (UA) KE Model

The model described above is intended to capture protocols where both peers authenticate to each other. Here, we specialize this model to the case of unilateral authentication (UA), where only one party authenticates to its peer (but the second party remains "anonymous"). The treatment is similar to [25].

**Unilateral Setting:**
- **Client-Server Terminology:** We denote by `C, S` the client-server parties and their identities, and refer to the authenticating party as the server.
- **Public Key Setting:** Servers have public keys. In the pre-shared key setting, the client associates the key to a server identity but not necessarily the other way around.
- **Session Notation:** Sessions at a client are denoted as triples `(C, S, sid)` as in the regular MA model, but sessions at servers do not have a named peer, hence they are denoted `(S, sid)`.

**Essential Characteristic:**
- **Test Sessions:** Only (fresh) client sessions are allowed as test sessions. Matching is defined only for client sessions, i.e., if session `(C, S, sid)` exists and completes, and session `(S, sid)` exists and completes, then `(S, sid)` is called a matching session to `(C, S, sid)`.

### 3. The SIGMAC Compiler

We present our signature-based compiler, SIGMAC, which augments a UA-secure protocol `Π1` into an MA-secure protocol `Π2`. Protocol `Π2` is obtained by adding a single message sent from client `C` to server `S` upon completion of a session in `Π1`. This message, denoted CSM (for "client sign-and-mac"), comprises a signature of `C` and a MAC (with a key derived from `Π1`'s session key). The signature is applied to a value `sid*` defined for `Π1`, while the MAC is applied to the identities of `C` and `S`. The compiler is presented in Figure 1.

**Key Components:**
- **Key Derivation Function (KDF):** Applied to session keys output by `Π1` for producing two keys `Ka` and `Ks`.
- **Signature and MAC Algorithms:** With the usual chosen message security requirements for both.
- **Value `sid*`:** Defined for each session in `Π1` and consisting of the concatenation of the session id `sid` and a subset of transcript information, called a transcript core, specifically defined for each protocol `Π1` (see Section 4).
- **Identities and Keys for Clients:** Clients are anonymous in `Π1`, but in `Π2` they have identities and signature keys whose public keys other parties can obtain and validate. Servers have the same identities and keys as in `Π1`.

**Protocol Extension:**
- **Client Completion:** When a client `C` completes a session `(C, S, sid)` in `Π1` with peer `S` and outputs a session key `K`, it performs the following operations in `Π2`:
  - Derives keys `Ka` and `Ks` from `K` using KDF.
  - Sends a message, denoted CSM, consisting of a signature on the value `sid*` and a MAC value, `MACKa(C, S)`, on the identities `C` and `S`.
  - Erases `Ka` and completes session `(C, S, sid)` in `Π2` with session key `Ks`.
- **Server Completion:** When a server `S` would establish a session `(S, sid)` with session key `K` according to `Π1`, in `Π2` it does not complete the session but computes `K` and keeps it in the session’s state. When a CSM message (allegedly) from client `C` is delivered to a session `(S, sid)`, `S` checks that a key `K` was previously computed for this session and, if so, derives keys `Ka` and `Ks` from `K` using KDF. It then checks that the incoming signature is valid (under the public key of `C`) and that it covers the appropriate value `sid*` (including the session id `sid`). Finally, it verifies that the MAC computed with key `Ka` covers the client identity `C` and its own identity `S`. If all checks succeed, `S` completes session `(S, C, sid)` with session key `Ks`.

**Security Considerations:**
- **Unique Session Identifiers:** No two sessions at a party will have the same `sid` (except for negligible probability). `sid*` includes a fresh session-specific value from `S` (needed, particularly against replay attacks).
- **Preserving the Session Key from `Π1`:** The keys `Ka, Ks` used by `Π2` are derived from the session key `K` output by `Π1`. Alternatively, `Π1` can output `Ka, Ks`, where `Ks` serves as the session key in both `Π1` and `Π2` while `Ka` is only used in `Π2` as a MAC key.
- **Differential Privacy:** To provide some deniability against a passive adversary, avoid entering the identity of `S` into the signature (i.e., into `sid*`).
- **Hashing Identities:** Identities `C` and `S` included under the MAC computation in SIGMAC can have different forms. An identity of a party `X` can be replaced by `H(X)` if `H` is a collision-resistant function. Hashing `X` with additional information is also acceptable as long as the parsing of the input to the hash function uniquely determines the identity included in the hash.

### 3.1 Rationale and Examples

The intuition behind SIGMAC is that the matching of the same client identity as the signer and under the MAC creates the needed binding between the client and the session key. Adding the server’s identity to the MAC is necessary to prevent UKS attacks, ensuring the server that the client’s view of the peer is correct. Alternatively, one can include the server’s identity under the signature, which raises some privacy issues as discussed earlier.

The actual considerations in analyzing the compiler are more subtle, particularly with respect to what needs to be covered by the signature. In some cases, even covering the whole transcript is insufficient to ensure mutual authentication via SIGMAC, while in other cases, covering part of the transcript is enough. We strive to identify the essential parts of a transcript that need to be signed, adding to the generality of the compiler and our understanding of this mechanism, and potentially achieving some level of deniability.

We illustrate some of the subtleties through examples in the following sections.