title:Adaptive Password-Strength Meters from Markov Models
author:Claude Castelluccia and
Markus D&quot;urmuth and
Daniele Perito
Adaptive Password-Strength Meters
from Markov Models
Claude Castelluccia
INRIA
PI:EMAIL
Markus D¨urmuth
Ruhr-University Bochum
PI:EMAIL
Daniele Perito
INRIA
PI:EMAIL
Abstract
Measuring the strength of passwords is crucial to ensure
the security of password-based authentication. However,
current methods to measure password strength have limited
accuracy, ﬁrst, because they use rules that are too simple to
capture the complexity of passwords, and second, because
password frequencies widely differ from one application to
another. In this paper, we present the concept of adaptive
password strength meters that estimate password strength
using Markov-models. We propose a secure implementation
that greatly improves on the accuracy of current techniques.
1
Introduction
Passwords are a traditional and widespread method of
authentication, both on the Internet and off-line. Passwords
are portable, easy to understand for laypersons, and easy to
implement for the operator. Thus, password-based authenti-
cation is likely to stay for the foreseeable future. Most sites
let users choose their password, as the usability of automati-
cally generated passwords is low [32]. However, users tend
to choose weak passwords, for instance, many users choose
passwords from a rather small set of passwords, and hence,
these passwords can easily be guessed.1
To ensure an acceptable level of security of user-chosen
passwords, sites often use mechanisms to test the strength
of a password (often called pro-active password checkers)
and then reject weak passwords. Hopefully this ensures
that passwords are reasonably strong on average and makes
guessing passwords infeasible or at least too expensive for
the adversary. Commonly used password checkers rely on
rules such as requiring a number and a special character to
be used. However, as we will show and also has been ob-
served in previous work [28], the accuracy of such password
1From leaked password lists we learn that 20% of passwords are covered
by a list of only 5,000 common passwords [27].
checkers is low, which means that often insecure passwords
are accepted and secure passwords are rejected. This ad-
versely affects both security and usability. The commonly
used rule-sets are too simple to capture the complexity of
passwords, and users confronted with them often choose the
same modiﬁcations to fulﬁl the rules (like the sadly famous
password1). Furthermore, password distributions differ
from site to site (for example due to language differences)
and no password checker is equally suitable for all sites.
We propose to use password strength meters based on
Markov-models, which estimate the true strength of a
password more accurately than rule-based strength meters.
Roughly speaking, the Markov-model estimates the strength
of a password by estimating the probability of the n-grams
that compose said password. Best results can be obtained
when the Markov-models are trained on the actual password
database. We show, in this paper, how to do so without sac-
riﬁcing the security of the password database, even when
the n-gram database is leaked. We call these Adaptive Pass-
word Strength Meters (APSMs), as they can react dynami-
cally to changes in how users choose passwords. Previous
work [6, 19] has already shown that Markov-model based
password crackers outperform existing cracking techniques,
and conjectured that they could be used to create better proac-
tive password strength meters. However, before our work it
was unclear how this could be implemented securely, and
how accurate it would be be.
In this paper, we show how to build secure adaptive pass-
word strength meters, where security should hold even when
the n-gram database leaks. This is similar to traditional pass-
word databases, where one tries to minimize the effects of a
database breach by hashing and salting the stored passwords.
This is not a trivial task. One potential problem is that, partic-
ularly strong passwords, can be leaked entirely by an n-gram
database (without noise added). This is best illustrated with
an example: If the password “!*(%$.&” is used, then from
the 5-grams “!*(%$”, “*(%$.”, and “(%$.&” one can
reconstruct the password with high probability by searching
for the overlapping segments. By adding a carefully chosen
amount of noise we can eliminate this kind of attack, and
in fact we can prove that the noisy n-gram database leaks
very limited information about the actually stored password
database. By varying the amount of noise added we can
balance our system between security and privacy, and we
show parameters that strike a reasonable balance between
the two for large password databases.
The attacker model makes the following two assumptions:
First we make the common assumption that the adversary
does not attack one speciﬁc user, but is interested in guessing
any password correctly in the system. This means that the
attacker does not use information about a speciﬁc user such
as his date of birth, children’s names, and so on.
Second, we argue that a reasonable analysis of password
strength needs to assume that the adversary knows the distri-
bution of the passwords. This is a necessary assumption, as
a number of password databases have leaked over the past
years and are available to everybody. An attacker might be
able to obtain a very accurate distribution for a given site by
correlating user statistics. Consequently, assuming that the
exact distribution is known to the attacker is the only way to
conservatively estimate his knowledge.
1.1 Contributions
This paper makes the following contributions:
• We propose the ﬁrst adaptive password strength me-
ter (APSM). Our password meter, based on n-gram
models, is both accurate in gauging password strength
and secure against the strong attacker model described
above.
• The need for adaptive password strength meters is moti-
vated in Section 3 by showing that the way users choose
passwords is greatly inﬂuenced by the type of service
(among other factors), which reduces the accuracy of
heuristic password checkers that are widely in use to-
day.
• Since our construction needs to store additional (non
hashed) information about passwords, we formally
prove the security of our scheme, by proving an up-
per bound on the information that leaks per passwords
if a data breach occurs and the actual n-gram database
is leaked. We show a bound of 1.3 (per password) bits
for reasonable parameters. This leakage only occurs if
the password database is breached.
• We evaluate the accuracy of our scheme by performing
extensive experiments. More speciﬁcally, we show
that our scheme outperforms existing schemes, such as
NIST, Microsoft, and Google schemes. We also show
that the noise added on n-grams, necessary to provide
security in case of leakage of the n-gram dataset, does
not signiﬁcantly affect performance. We discover that
traditional password meters are inaccurate, and perform
only slightly better than a scheme that would output
random values. On the contrary, our construction can
distinguish between strong and weak passwords with
high accuracy.
1.2 Related Work
We review relevant previous work on password metrics
as well as work in the closely related ﬁeld of password
guessing.
Password metrics: Estimating the strength of passwords as
a measure to defend against guessing attacks has a long his-
tory. In [18], password checking was done by attempting to
crack the hashed passwords. The ones successfully cracked
were marked as weak and the users notiﬁed.
Later, one started to estimate the strength of a pass-
word before it is accepted by a system by what are called
pro-active password checkers or password strength meters
(PSM), using certain rules-sets that aim at excluding weak
passwords [24, 11, 2, 20]. An inﬂuential PSM was proposed
by the NIST [4] (see Section 2.2 for a comparison of rule-
sets that are used in practice). Recently, the NIST rule-set
was shown [28] to be a rather weak measure for the actual
password strength (see also [12] for more results on such a
comparison). We reach a similar conclusion in Section 6,
showing a low correlation of this measure and the actual
password strength.
Schechter et al. [23] classify passwords as weak by count-
ing the number of times a certain password is present in the
password database. This password meter, however, cannot
generalize on common variations of weak passwords, e.g.,
password1. These variations have to become popular be-
fore the system can mark them as weak. Our construction,
instead, can easily meter those password by leveraging on
the capabilities of Markov-models.
Several papers study user behaviour regarding (in-)secure
passwords [22, 9, 26, 30]. Some more work on estimating
password strength or related ways to increase the security of
password-based authentication can be found in [21, 31, 13].
Password cracking: Password cracking is a problem in
many ways similar to estimating a password’s strength. [18,
5, 15]. To protect passwords they are usually stored in hashed
form, and under the common assumption that an attacker
cannot invert this hash function, his optimal strategy is to
test passwords in decreasing likelihood, i.e., most frequent
passwords ﬁrst. This means the attacker needs a method to
enumerate passwords with decreasing likelihood, in other
words, with increasing strength.
While most previous attacks use large (external) dictionar-
ies and ad-hoc mangling rules to modify these, Narayanan
and Shmatikov [19] proposed Markov-models to overcome
some of the problems of dictionary-based attacks, by train-
ing Markov-models to general rules that passwords follow.
This work also is the ﬁrst to hint that Markov-models might
yield useful password strength meters; however, they nei-
ther considered accuracy nor security of such a construction.
While [19] uses ad-hoc “templates” on password structures,
i.e., on the proportion and position of numbers and letters,
subsequent work [29] learns these structures from sets of
leaked passwords. An empirical study on the effectiveness
of different attacks including those based on Markov-models
can be found in [6]. A study also taking into account pass-
word re-use is [7].
1.3 Organization
The rest of the paper is organized as follows: We review
password strength meters in Section 2. We motivate and
deﬁne adaptive password strength meters in Section 3 and
give the construction of such a scheme in Section 4. Next,
we prove its security in Section 5, demonstrate its accuracy
in Section 6, and discuss some implementation details in
Section 7 . Finally, Section 8 concludes the paper.
2 Password Strength Meters
A password strength meter is a function f : Σ∗ → R, that
takes as input a string (or password) x over an alphabet
Σ and outputs a number s, a score, which is a measure
of the strength of string x as a password. The output is,
in general, a real number indicating the passwords strength.
The strength s provides an estimation of the effort an attacker
is required to invest to guess the password x and can be used
either to advise the users on the strength of the passwords
or to enforce mandatory password strength policies. Both
approaches have their merits and problems.
The strength of a password is the amount of work an
adversary needs to break the password. In the context of
password guessing, the adversary has a way to check if a
(guessed) password is the correct one, usually by a hash-
value representing the hash of the correct password, by an
online-login, or similar means. Consequently, the optimal
strategy for an attacker is to guess passwords in increasing
order of strength and decreasing order of probability, i.e.,
more likely passwords are tried before less likely ones. This
also motivates the deﬁnition of guessing entropy, which gives
the average number of passwords an attacker has to guess
before ﬁnding the correct one. Let X be a random variable
with ﬁnite domain D and P (X = di) = pi, ordered with
decreasing probabilities pi < pj for i < j. The guessing
entropy G(X) is deﬁned as
|D|(cid:88)
i=1
G(X) =
i · P r(X = i).
(1)
2.1 An Ideal Password-Strength Meter
Deﬁnition 1 Let us ﬁx probabilities P : Σ∗ → [0, 1] on the
space of passwords (i.e., strings over a certain alphabet).
An ideal password checker f (x) is given by the function
f (x) = − log(P (x)).
We denote this password strength meter as “ideal”, as
the order which is given by this function is the same as
the order with which passwords are guessed in an optimal
guessing attack. Consequently, the following two functions
f(cid:48)(x) = 1/P (x) and f(cid:48)(cid:48)(x) = RP (x) also constitute ideal
password checkers, where RP (x) is the rank of x according
to the distribution P , i.e., if the probabilities pi = P (xi) are
ordered with pi < pj for i < j, then RP (xi) = i.
Any password checker or password strength meter can be
seen as an approximation to this function, often clustered in
few buckets such as “insecure/secure”, or “insecure/medi-
um/high”. We will survey some commonly used approxima-
tions in the next section.
2.2 Common Approximations
The commonly used (rule-based) password checkers can
be seen as ad-hoc approximations to an ideal strength meter
as described above, where passwords with strength over a
certain threshold should be accepted, and otherwise rejected.
There is a large number of password checkers employed
today. Many web-services implement their own password
checker using a combination of educated guessing and craft.
However, as we will show, these approximations perform
poorly in the task of gauging the strength of a password. As
a consequence, both usability (by scoring strong passwords
as weak) and security (by scoring weak passwords as strong)
are affected.
We compare our work to three different password check-
ers that are widely used today: the NIST, Google and Mi-
crosoft password checkers. They were chosen because of
their popularity and because they are representative for the
techniques employed currently for password strength meters.
The NIST password meter tries to estimate the entropy of
a password mainly based on their length. Special bonuses (in
bits) are given if the password matches particular conditions,
like containing special characters or a combination of upper
case and numbers. The NIST also optionally suggests to give
a bonus for a dictionary check. We did not implement this
feature as it would have been bound to a speciﬁc dictionary,
and it affects a small number of passwords only.
The Microsoft password meter [17] (employed, e.g., in
Hotmail, Windows Live) outputs an integer in the range
[0, 4]. The strongest score 4 is given to passwords that match
all the “good” conditions: passing a dictionary test (included
in the JavaScript), minimum length of 14, using at least three
types of characters (upper, lower, number, special). The
tool is implemented as a JavaScript routine that measures
the strength of passwords entered in a text box. For our
tests we downloaded the JavaScript code and ran it inside
SpiderMonkey [25], a Perl interface to the Mozilla JavaScript
Engine. This allowed us to use the tool unchanged for our
experiments.
The Google password meter also outputs an integer be-
tween 0 and 4. We do not know the inner workings of this
meter, that is implemented on the server-side and not in
JavaScript. This design choice is probably affected by se-
curity concerns, as it “hides”, to possible attackers, how
passwords are metered. Based on our observations, however,
this password checker seems to be based on a set of ﬁxed
rules like the others. We used the server as an oracle to
measure the password strength.
3 Adaptive Password Strength Meters
A password strength meter is a ﬁxed function, and cannot
take into account site-speciﬁc aspects of the password dis-
tribution. This is why we propose using adaptive password
strength meters, which can additionally base their score on
speciﬁcs of the site. To our knowledge this has not been
deﬁned before, even though the motivation is similar to [23].
Deﬁnition 2 An adaptive password strength meter (APSM)
f (x, L) is a function f : Σ∗× (Σ∗)k → R, that takes a string
(or password) x over an alphabet Σ and a password ﬁle L
containing a number of passwords as input and outputs a
score S.
Intuitively, the password database L contains a number of
passwords sampled from the same distribution, and the task
of the password strength meter is to estimate the strength of
the password x based on his estimation of P . Alternatively,
as in our scheme, a noisy model of L is stored to preserve
the secrecy of the password database. The amount of noise
added to the model of L needs to strike a balance between
accuracy and secrecy.
We note that the adaptive password strength meter f does
not need to have a-priory knowledge of the distribution P ,
whereas a (non-adaptive) password strength meter does.
3.1 The Need for Adaptive Password Meters
The main motivation for adaptive password meters is
the observation that password distributions are different for
different sites. This is illustrated by Figure 1(b), which
shows the ten most frequent passwords from three leaked
password sets (more information about these datasets can
be found in Section 6). At a glance it can be seen that the
passwords in each service have distinctive characteristics.
For example the password rockyou is only popular in
the RockYou service. While this password and possible
variations have a very low guessing entropy on RockYou,
this is not the case on different web services. The MySpace
passwords, at some point, have been inﬂuenced by a rule-
based password checker that requires number to be included
in the passwords.
The results of a more comprehensive analysis are shown
in Figure 1(a). These graphs show the fraction of frequent
passwords that are shared by two or more password lists,
considering varying thresholds. While RockYou and PhpBB
share 50% of the most common passwords, other services
share substantially less passwords, with as few as 10% shared
between RockYou and MySpace.2
We believe these differences are caused by different lan-
guages spoken and cultural backgrounds of the users, dif-
ferent perceived importance of the password, different pass-
word checkers in place, and so on. This variety of different
inﬂuences makes it very hard for a site to estimate the actual
distribution in advance, without accessing the actual pass-
words. Furthermore, the password checkers inﬂuence the
distribution of passwords, as exempliﬁed by the MySpace
passwords. This means that no static set of rules can cap-
ture the dynamic changes in password creation habits by the
users.
3.2 Challenges
Security: While adaptive password meters have the poten-
tial for a better and more robust estimation of password
strength, computing the strength of a given password based
on the actual password database (and outputting this value
to the user) prompts a few security concerns. Our main
contribution is to devise an adaptive password meter that is
secure even when the n-gram database is leaked, while still
providing high accuracy.
Accuracy: A password strength meter needs to correctly
gauge the strength of a password as wrong estimations can
affect both the usability and guessing entropy of the pass-
words: if strong passwords are marked as weak then users
might get frustrated, reducing usability; if weak password
are marked as strong, security is decreased. For example,
users might “circumvent” rule-based password meters by
modifying weak passwords to match the required minimum
strength. For example, password is frequently “strength-
ened” by the addition of upper cases and numbers, leading
to Password1.
2Further details on the datasets are given in Section 6.
(a) Fraction of passwords that are used in common by different sites
(b) Ten most frequent passwords for different sites. Passwords underlined
are shared by at least two services. The wide difference likely depend on
background (e.g., Faithwriters) or password rules (e.g., MySpace).
Figure 1. Password Distributions for Different Sites
4 Constructing an Adaptive Password Meter
We use techniques from statistical language processing,
namely Markov-Models [14], to implement an adaptive pass-