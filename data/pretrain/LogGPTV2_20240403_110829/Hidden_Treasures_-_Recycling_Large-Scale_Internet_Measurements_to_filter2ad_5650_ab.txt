tive code. For example, unreachable ports are very common for our UDP-based
ZMap scan, however, in comparison, the TCP-based ZMap scan shows only a
small fraction of unreachable ports. This is no surprise as TCP should reply
with a RST-packet if a port is unreachable and does typically not generate
ICMP messages. In contrast, there is no such mechanism in UDP, even through
something comparable to TCP’s RST exists in QUIC. However, QUIC is imple-
mented in user-space, thus when the kernel cannot demultiplex a packet to a
socket it must resort to issuing an ICMP unreachable message. Looking at our
DNS-based scan, we still ﬁnd that more than 20% of the ICMP messages signal
unreachability through ICMP in contrast to TCP RSTs, something that, e.g.,
the default ZMap TCP-SYN scan module simply ignores in contrast to its UDP
counterpart. Since in all major operating systems TCP handles signaling closed
ports, we believe that these hosts issuing ICMP replies are actively conﬁgured
either in their own ﬁrewalls (e.g., iptables) or in a dedicated ﬁrewall to do so.
We ﬁnd only 16.49K IPs issuing all 1.13M ICMP port unreachable messages,
supporting our assumption that dedicated machines ﬁlter this traﬃc.
Looking at the other types/codes, we ﬁnd that a non-negligible share of
ICMP messages indicate that hosts are not reachable via the Internet either due
to TTLs expiring or because their host or network cannot be reached. Apart
from this, we observe that TCP port 443 is often ﬁrewalled (HostProhibited).
Takeaway. Depending on the protocol and port, we get diﬀerent feedback from
the Internet’s control plane. Our ﬁndings indicate that, e.g., ICMP port unreach-
able messages should not be ignored for TCP-based scans as is currently the case.
3.2
ICMP Echos
ICMP echo requests (Type: 8) are the typical ping to which an echo reply is
sent. RFC792 deﬁnes only a single code point, i.e., code = 0 which represents “no
code”, still we observe some non-standard code points. Some security scanners
use non-standard code points for operating system ﬁngerprinting, e.g., a stan-
dard Linux will echo the requested code point in its reply. Still, pings to our
measurement infrastructure seem quite common, for code = 0, we ﬁnd 10.57K
unique IPs out of 840 autonomous systems (ASes). It seems that our scanning
activities trigger systems to perform ping measurements towards us, yet, we do
Hidden Treasures – Recycling Large-Scale Internet Measurements
57
not know their actual purpose. We suspect that this could be caused by intrusion
detection systems (IDSs) that monitor the liveness of our hosts.
Echo Replies. Since our hosts do not perform echo requests, we were surprised
to ﬁnd echo replies in our dataset. We observe diﬀerent code points with diﬀerent
frequencies but overall we ﬁnd over a couple of thousand of these replies. To
investigate what causes these seemingly orphaned messages, we inspect their
destinations. Since our measurements are identiﬁable either by IP or additionally
by weekday, we associate messages to measurements. We ﬁnd most echo replies
are with code = 3 (except for 5 messages), all 5.75K of these echos are destined
to our DNS resolvers and originate from only 86 IP addresses in 2 Chinese ASes.
While many ICMP packets contain IP quotations, echo replies typically do not,
they usually mirror data contained in the echo request. Yet, we still ﬁnd IP
packets together with DNS query responses that are destined to our resolver.
Thus, it seems that the packets are generated on the reverse path, however, they
are not sent back to the source (DNS server) but they are forwarded to the
destination (us). Inspecting the source IP within the IP fragments, we ﬁnd IP
addresses from the same two ASes, as it turns out the 88 ICMP source IPs all
respond to DNS queries which hints at their use as a DNS server cluster. Yet,
we were unable to manually trigger these ICMP reply packets when trying to
send DNS requests to these IPs, we only observed that DNS requests were always
answered by two separate packets from the same IP, however, with diﬀerent DNS
answers. Further, the packets seem to stem from diﬀerent IP stacks (signiﬁcantly
diﬀerent TTLs, use of IP ID or not, don’t fragment bit set or not). While the
diﬀerent stack ﬁngerprints could be the result of middleboxes altering the IP
headers, the general pattern that we observe hints at DNS spooﬁng.
3.3 Source Quench
ICMP Source Quench (SQ) messages (Type: 4, Code: 0) were a precursor of
today’s ECN mechanism, used to signal congestion at end-hosts and routers. The
original idea (RFC792 [28]) was that a router should signal congestion by sending
SQ messages to the sources that cause the congestion. In turn, these hosts should
react, e.g., by reducing their packet rate. However, research [12] found that SQ is
ineﬀective in e.g., establishing fairness and IETF has deprecated SQ-generation
in 1995 [2] and SQ-processing in 2012 in general [17]. Major operating systems
ignore SQ-messages for TCP at least since 2005 to counter blind throughput-
reduction attacks [16]. Further, [13] claims that SQ is rarely used because it
consumes bandwidth in times of congestion.
In our traces, we observe 2.65K unique IPs located in 364 ASes issuing SQ
messages, despite the deprecation. Out of these IPs, 34.42% are located in only
5 ASes. Moreover, 609 IPs that generate SQ messages were directly contacted by
our measurement infrastructure, i.e., are the original destination of the request
causing this SQ message (according to the IPv4 header contained within the
ICMP message). Among the remaining SQ messages, we ﬁnd a few messages
58
J. R¨uth et al.
where the original destination and the source of the SQ messages are located
in ASes of diﬀerent operators, i.e., possible transit networks. Exemplarily, we
observe that IPs located in AS1668 (AOL Transit Data Network) and AS7018
(AT&T) issued SQ messages when IPs located in AS8452 (Telecom Egypt) were
contacted. As a ﬁnal step, we see that 53 destination IPs in our measurements
trigger the generation of SQ messages and are also contained in A-records of our
DNS data that we collect. Out of these 53 IPs, 22 IPs generated the SQ messages
themselves, i.e., no on-path intermediary caused the creation of this message.
In addition, we checked how vendors implement or handle this feature. Cisco
removed the SQ feature from their IOS system after Version 12 in the early
2000s [5]. Hewlett Packard’s cluster management system (Serviceguard) gener-
ated SQ messages due to a software bug in a read queue, which was ﬁxed by a
patch in 2010 [21]. In their router conﬁguration manual (September 2017), Nokia
also marks SQ messages as deprecated [27]. Although we cannot identify devices
and their operating system version in our measurements, we assume that some
devices are not updated to a current version or are following a conﬁguration that
enables them to generate SQ messages. This is not forbidden per se but given
that ICMP SQ creation was deprecated over 20 years ago, our ﬁndings highlight
that removing features from the Internet is a long term endeavor.
3.4 Redirect
ICMP redirect messages (Type: 5), are sent by gateways/routers to signal routes
to hosts. While [15] ﬁnds networks which require redirect messages to be archi-
tected sub-optimally in the ﬁrst place, RFC1812 [2] states that a router must not
generate redirect messages unless three properties are fulﬁlled: (i) The packet
is being forwarded out the same physical interface that it was received from,
(ii), the IP source address in the packet is on the same logical IP (sub)network
as the next-hop IP address, and (iii), the packet does not contain an IP source
route option. Similar checks [4] are used by receiving hosts to check the validity
of the message (e.g., redirected gateway and issuing router must be on the same
network).
Since none of the 18.12M redirect messages originate from our network, the
routers generating them either violate rule (ii) or some obscure address transla-
tion is in place on their networks. In our data, we even ﬁnd roughly 2.7K unique
redirects to private address space. Within our dataset, we observed 105.78K
network redirects and 18.01M host redirects. Network redirects are problematic
since no netmask is speciﬁed and it is up to the receiving router to interpret
this correctly. For this reason, RFC1812 [2] demands that routers must not send
this type. We ﬁnd that the network redirects originate from 238 diﬀerent ASes
aﬀecting nearly 19k diﬀerent destinations of which less than 20 are mapped in
any of our DNS data. Yet, all these ASes thus contain questionable router conﬁg-
urations that are outdated at least since 1995. Similarly, we ﬁnd that the much
larger fraction of host redirects originate from 2.20K ASes that aﬀected over 400k
destinations of which we ﬁnd roughly 900 mapped in our DNS data. This sug-
Hidden Treasures – Recycling Large-Scale Internet Measurements
59
gests that a substantial number of end-systems are connected via sub-optimally
architected or misconﬁgured networks.
Table 3. ICMP messages received indicating some form of unreachability with known
type and code ordered by frequency.
Type
Code
Count
Type
Code
Dest. Unreach. Port
TimeExceeded TTLExceeded
Dest. Unreach.
Host
CommProhibited
HostProhibited
Net
Protocol
256.72M
139.52M
107.15M
71.70M
23.07M
17.94M
51.04K
Dest. Unreach.
Frag.Needed
NetProhibited
TimeExceeded Frag.Reassembly
Dest. Unreach.
HostUnknown
NetTOS
NetUnknown
SourceIsolated
Count
26.66K
26.28K
7.31K
336
25
6
2
3.5 Unreachable Hosts
Reachability is a fundamental requirement to establish any means of commu-
nication. Given that Table 2 lists 476.68M destination unreachable messages
this looks troublesome at ﬁrst. Yet, not all unreachability is bad, e.g., ﬁre-
walls actively protect infrastructure from unpermitted access, i.e., when ipta-
bles rejects a packet (in contrast to simply dropping it) it generates an ICMP
response. By default, a port unreachable message (Type: 3, Code: 3) is produced
but other types can be manually speciﬁed by the network operator. Our scans
in themselves certainly trigger a certain amount of ﬁrewalls or some IDSs. In
contrast, when a path is too long and the IP TTL reaches zero, routers typically
generate an ICMP TTL exceeded message indicating that the destination is not
reachable but this time due to the network’s structure. Similarly, ICMP des-
tination unreachable messages for host unreachable (Type: 3, Code: 1) should
indicate that there is currently simply no path to a host, e.g., because it is not
connected or the link is down. Table 3 summarizes the unreachability that we
observe in our dataset.
As already indicated in Sect. 3.1, our UDP-based ZMap scans have the high-
est share of port unreachable messages putting them at the top. We inspect the
origin of the messages and the actual destination that our scans targeted to see
if the end-hosts generate the messages or an intermediate ﬁrewall. It seems that
96% of the messages are indeed generated by end-hosts or machines that can
answer on their behalf (NATs).
Host and Network. Unreachable hosts and networks codes are used to give
hints that currently no path is available and the RFCs explicitly note that this
may be due to a transient state and that such a message is not proof of unreacha-
bility. To check for transient states, we compare the unreachable hosts on Thurs-
day with those on Friday in our ZMap (both UDP 443) scan and additionally
60
J. R¨uth et al.
with the same scan (Thursday) one week later (captured separately from our
initial dataset) and investigate if hosts become reachable that were unreachable
before or vice versa.
(a) Thursday to Friday.
(b) Thursday to Thursday one week later.
Fig. 4. Diﬀerent scans (left to right of each plot) trigger diﬀerent amount of host
unreachable messages. (a) Compares the changes within one day. (b) Within one week.
Figure 4 visualizes the change between these two days (a) and within one
week (b) for host unreachable messages. We can see that within two days, the
majority of hosts remain unreachable, a small number of hosts that were pre-
viously reachable 3 become unreachable, similarly, previously unreachable hosts
become reachable. Looking at the changes within a full week, we observe that
the total amount of unreachable hosts stays the same, however, roughly the same
amount of previously reachable host become unreachable and vice versa. To dig
into these once unreachable and then reachable hosts, we inspect to which AS
they belong ﬁnding that 82% of all hosts are from the same ASes. A possible
explanation might be that while our observations seem to indicate a change, the
ICMP message generation is subject to rate-limiting [19]. Thus there might be
routers that generated unreachable messages on Thursday for a certain host,
however, this router could be subject to rate-limiting on Friday for the same
host or the week after leading to a false impression of reachability and continu-
ity, still, a substantial number of hosts remain unreachable. Another possibility
is that some hosts are only up at certain times of the day leading to diﬀerences
in the reachability.
Time Exceeded. Similar to host unreachability, Time Exceeded messages
(Type:11) indicate unreachability but due to network issues. Either the Frag-
ment Reassembly (Code: 1) time was exceeded, i.e., the time that IP datagrams
are buﬀered until they can be reassembled when IP fragmentation happens, or
the TTL runs out (Code: 0), i.e., the path length exceeds the sender-deﬁned
limit. For the former, we ﬁnd some thousand messages but they stem from only
30 ASes, since many of our scans use small packets, fragmentation is unlikely in
3 With reachable we actually mean not unreachable, i.e., we do not get ICMP unreach-
able messages, which must not mean that this host was reached by the scan.
Hidden Treasures – Recycling Large-Scale Internet Measurements
61
the ﬁrst place. Yet, for example, the UDP ZMap scans use roughly 1300 byte
per packet which is in the range of typical [7] MTUs when fragmentation could
occur. Since the default ZMap functions to create IP packets (which we use) do
not set the don’t fragment bit, only some of our measurements trigger the 26.66K
fragmentation needed and DF set ICMP messages (see Table 3). However, over
time, these ICMP messages could give valuable insights into path MTU in the
Internet.
TTL Exceeded messages have the second largest occurrence (139.52M) within
our dataset. They were produced in 18.40K diﬀerent ASes covering 35.5M diﬀer-
ent destinations that our scans tried to reach of which ∼32K are again present
in A-records of our DNS data and are thus unreachable. We inspect the TTL
ﬁeld of the quoted IP packets that triggered the ICMP messages to see if the
TTL was actually zero when the message was generated. To do so, we ﬁrst gen-
erate all unique pairs of router IP and TTL values and then count the diﬀerent
TTLs observed. Out of these, 97% of the TTLs show a value of one, followed by
∼2.4% with a zero, we expect these two, since a router should drop a TTL = 0
or, depending on the internal pipeline, also TTL = 1, when the packet is to be
forwarded. Nevertheless, we also ﬁnd larger TTLs, 2, 3, 4, 5, and 6 directly follow
in frequency, yet, we also ﬁnd some instances of over 200 or even 255. The very
large TTLs could hint at middleboxes or routers rewriting the TTL when they
generate the message to hide their actual hop count. The lower numbers could
be indicators for MPLS networks. By default, e.g., Cisco [6] and Juniper [24]
routers copy the IP TTL to the MPLS TTL on ingress and also decrement the
IP TTL within the MPLS network. It is possible to separate IP TTL and MPLS
TTL and there are heated discussions whether one should hide the MPLS net-
work from traceroutes or not which has also been subject of investigations [8].
Thus packets expiring within an MPLS network will still trigger an ICMP TTL
exceeded, however, the quoted IP packet will have the TTL value they had at the
MPLS ingress router, thus, if the IP TTL is still copied at ingress a traceroute
could still reason about an MPLS network.
Since we were surprised to see this many TTL exceeded messages across all