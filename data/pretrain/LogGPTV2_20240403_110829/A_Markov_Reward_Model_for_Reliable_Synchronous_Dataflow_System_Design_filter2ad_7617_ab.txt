0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:35:49 UTC from IEEE Xplore.  Restrictions apply. 
s
t
u
p
n
I
REGISTER FILE
O
u
t
p
u
t
s
t
c
e
l
e
s
X
U
M
Start
CONTROLLER
Enable
ADDER
MULTIPLIER
ALU
Figure 3. Typical synchronous dataflow system structure 
MUX.  While  this  is  true  in  cases  where  the  error  detection 
granularity  is  such  that  faults  cannot  be  distinguished  between 
MUXes and components, it is a simplification in general cases 
but  will  help  guide  design  decisions.  A  more  sophisticated 
model  providing  greater  accuracy  could  be  built  but  would 
require detailed interconnect models of the system. 
Assumption  1: The time-to-failure for transistors in a system is 
exponentially distributed. This distribution is commonly used in 
reliability  modeling  when  the  failure  rate  is  constant.  This 
assumption  is  valid  in  most  semiconductor  systems  unless 
second order effects, such the effect of temperature gradients on 
transistor  and  interconnect  reliabilities,  are  taken  into  account. 
(An analysis of such effects is part of ongoing work.) 
Assumption  2:  Modes  of  a  system  are  steady-state  descriptions 
of the system structure. The transition time between modes (i.e. 
the time taken for the system to reconfigure when a component 
failure occurs) is much smaller than the amount of time spent in 
each  mode.  The  system  can  then  be  represented  by  a 
continuous-time Markov process, with the modes represented as 
a  Markov  process  structure  function.  The  reconfiguration  time 
to  switch  from  one  mode  to  another  is  at  most  a  few  clock 
cycles, which is significantly smaller than the transistor failure 
rates, making this is a reasonable assumption. 
Assumption  3:  The  component  failure  rates  are  independent  of 
the  mode  of  the  system.  The  failure  rates  of  the  transistors 
making up a component remain constant between modes, since 
only the signals from the controller change between modes but 
not  the  components  themselves.  Hence  the  ‘stress’  on  the 
underlying  transistors  remains  the  same.  In  a  reliability  model 
where the ‘stress’ changes with component utilization rates and 
temperature,  etc.,  this  assumption  can  be  relaxed  since  the 
Markov model could have rates adjusted according to state. 
At design time, a separate Markov chain is built for every 
configuration to be considered. By evaluating the probability of 
occurrence of each mode within the configuration and using the 
rewards  associated  with  them  (as  described  in  Section  4),  the 
overall quality of the configuration can be quantified. Consider 
a  synchronous  dataflow  implementation  with  a  configuration 
consisting of 2 adders (A), 2 multipliers (M) and 1 flexible unit 
(H) capable of both addition and multiplication. At a minimum, 
either  an  adder  and  multiplier  pair  or  a  flexible  unit  is  needed 
for  successful  operation.  The  flexible  unit  serves  as  a  ‘cold 
spare’  in  the  initial  state  and  becomes  active  only  in  case  of  a 
failure  of one of the other components. The Markov reliability 
model for this configuration is shown in Figure 4. 
insufficient 
to  perform 
types  have  different 
The  initial  state  is  the  original  configuration  with  no 
component  failures.  At  the  other  end  of  the  model,  there  is  a 
single  absorbing  state  that  represents  all  modes  in  which  the 
available  components  are 
the 
computation.  The  labels  within  the  nodes  show  the  up 
components of the circuit when in that mode. The labels on the 
edges  connecting  the  state  nodes  represent  the  transition  rates 
between  the  modes  defined  by  the  component  failure  rate. 
Different  component 
rates 
determined  by  the  number  of  transistors  in  the  component. (cid:79)A,
(cid:79)M,  and  (cid:79)H  are  the  failure  rates  of  the  adder,  multiplier  and 
flexible  unit,  respectively.  The  solution  of  the  Markov  model 
gives the probability of each mode for this configuration of the 
system  based  on  component  reliabilities.  For  example,  the 
transient  probability  of  occurrence  of  the  mode  with  a  single 
surviving  flexible  component  is  evaluated  from  the  following 
equation,  where  s12  is  the  state  with  (1H),  s9  is  the  state  with  
(1M, 1H) and s11 is the state with (1A, 1H). 
dP
s
12
dt
tP
(
s
12
tP
(
s
11
(cid:79)
)[
A
]
tP
(
s
9
(cid:79)
)[
M
(cid:79)
)[
H
failure 
t
)(
(cid:16)(cid:32)
]
(cid:14)
]
(cid:14)
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:35:49 UTC from IEEE Xplore.  Restrictions apply. 
Figure 4. Sample Markov reliability model
4. MARKOV REWARD MODELING 
4.1 Markov Chain Reward Models for 
‘Performability’
The  Markov  chain  reliability  model  described  in  the 
previous  section  can  be  augmented  to  not  only  derive  the 
probability  of  occurrence  of  each  mode,  but  also  to  give  a 
measure of performance when in it. This is accomplished using 
‘rewards’. A reward rate function r(Xi), where r: X (cid:198) R, (R is 
the  set  of  real  numbers),  is  associated  with  every state Xi such 
that r represents the performance of the system when in state Xi.
Such a model is called a ‘Markov Reward Model’ (MRM). The 
transient or point performability is then defined as: 
(*)(
tPF
)(
Xr
)
i
(cid:32)
i(cid:166) (cid:143)
XX
tP
iX
A  steady-state  accumulated  mean  reward  can  be  obtained 
by integrating this function from start time to an absorption time 
beyond which the reward obtainable becomes time invariant. 
4.2 Markov Reward Model for Synchronous 
Dataflow Systems 
Rewards  represent  the  performance  of  the  system  in  a 
mode. The term ‘performance’ is conventionally associated with 
throughput, but the term will be used in the rest of the paper to 
include  other  measures  of  system  efficiency,  such  as  area  and 
power,  as  well.  Further,  we  will  separate  the  time-invariant 
rewards  and 
for  purposes  of 
computation  efficiency.  For  example,  all  modes  within  a 
configuration  have  the  same  area,  and  hence  area  is  a  time-
time-dependent 
rewards 
invariant reward. On the other hand, every mode implements a 
different  schedule,  making  throughput  time  variant  and  mode 
dependant.  The  relative  importance  of  each  constraint  is  set 
according to the system specifications and designer’s priorities. 
For example, if the designer decides that improving throughput 
is twice as important as saving area, throughput rewards can be 
increased  by  a  factor  of  2.  Many  tradeoffs  between  system 
metrics can be performed using such ‘weighted’ rewards in the 
MRM.
Throughput. For synchronous dataflow systems, the primary 
reward  associated  with  each  state  in  the  MRM  is  throughput. 
When a component in the system fails, the MRM transitions to a 
different  mode  with  a  modified  schedule.  The  new  schedule  is 
obtained  by  performing  a  re-scheduling  of  the  original  DFG 
with  the  available  components.  The  new  schedule  is  likely  to 
have higher latency, since there are fewer available components. 
The  throughput  thus  falls  steadily  from  the  initial  state  to  the 
absorption state. 
As described in Section 2, lower throughput modes still can 
be useful for a variety of applications, but they may stop being 
usable below a certain level. Such unusable states are therefore 
given a zero throughput reward. Thus even though these nodes 
have  a  non-zero  probability  of  occurrence, 
their  point 
performability  is  zero.  Thus,  such  a  node  is  essentially  no 
different from a total failure state. 
Area. The complexity of the area reward model depends on the 
required accuracy of the MRM. There are two parts to the area 
model: datapath and control. 
Datapath  component  areas  are  modeled  either  in  terms  of 
the  number  of  transistors  in  the  component  or  in  terms  of 
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:35:49 UTC from IEEE Xplore.  Restrictions apply. 
inverter-equivalent gates. The datapath interconnect is modeled 
in terms of MUXes. (A finer granularity for interconnect failure 
is not used since this would lead to an explosion in the number 
of  states  for  all  but  the  most  rudimentary  configurations.)  To 
simplify  the  interconnection  structure,  it  is  assumed  that  every 
component  in the system needs to be connected to every other 
component; this, too, is fixed for all modes in the configuration. 
This  saves  design  effort  and  overestimates  the  interconnect  by 
only  a  few  extra  MUXes  in  practice.  The  input  and  output 
MUXes  of  a  component  are  also  included  in  the  component 
area.  The  registers  sourcing  and  sinking  each  component  are 
also  tagged  onto  the  component  for  area  calculation.  The  total 
datapath  area 
time-invariant  reward  for  any  given 
configuration.
is  a 
Modeling  hardwired  controller  is  a  more  complex  task. 
Each  new  mode  calls  for  a  new  set  of  control  signals  to  be 
generated  and  hence  adds  complexity  to  the  controller.  When 
exploring design options, it may be determined that some modes 
provide  too  low  a  throughput  reward  to  compensate  for  the 
additional controller area they impose, in which case the system 
can  be  designed  either  to  treat  the  mode  as  a  failed  state  or  to 
move  to  a  different  mode  utilizing  a  subset  of  the  surviving 
components. (Microcoded controllers will be considered as part 
of future work.) 
In typical systems, datapath area dominates controller area 
[10]. Therefore, for a first order model, area can be considered a 
time-invariant  reward,  as  the  component  area  is  fixed  for  all 
modes within a configuration. 
Other Metric Rewards. Many other metrics, such as power, 
testability,  etc.,  may  be  assigned  rewards.  For  power,  a 
straightforward  approach  is  to  model  the  wasted  power  due  to 
low  component  utilization.  Components  that  do  not  carry  out 
useful computation in a c-step still consume power in that step, 
as  they  process  whatever  data  is  present  at  their  input  ports. 
Component utilizations can be easily derived from each mode’s 
CDFG to provide additional rewards. 
Other  constraints  can  also  be  modeled  as  rewards  using 
techniques  from  synthesis.  For  example,  the  number  of  self-
adjacent  registers  (storing  both  an  input  and  an  output  of  a 
component)  in  a  bounded  CDFG  is  a  measure  of  system 
testability.  More  detailed  modeling  of  various  design  metrics 
will be addressed as part of future work. 
5. CASE STUDY 
To  show  how  the  methodology  presented  here  could  be 
used  to  drive  the  design  of  a  synchronous  dataflow  system,  a 
case study using a high-level synthesis benchmark is presented 
in this section. Figure 5 shows the minimum c-step CDFG for a 
16-point FIR filter [7]. 
The datapath is 32-bits wide, and the available components 
are 32-bit fixed-logic adders and multipliers and 32-bit flexible 
units  based  on  the  morphable  multiplier  from  [1].  The 
morphable  multiplier  is  a  multifunction  unit  that  can  perform 
either  a  multiplication  or  an  addition.  To  achieve  a  schedule 
with  the  minimum  number  of  c-steps,  the  minimum  allocation 
using only fixed-logic components is 2 adders and 2 multipliers; 
using  both  fixed  and  flexible  components,  the  minimum 
allocation is 1 adder, 1 multiplier and 1 flexible unit. 
Table  1  shows  the  six  configurations  (i.e.  design  options) 
that  were  analyzed.  For  example,  C1  is  the  implementation 
using  only  fixed  logic  components  with  no  redundancy,  C4  is 
full  component-level  redundancy  with  a  spare  of  each  type  of 
component  in  the  system,  and  C5  is  the  configuration  with  a 
single  flexible  component  to  provide  redundancy  for  both  the 
adder  and  multiplier 
(i.e.  heterogeneous  redundancy  as 
described in [14]). The component areas in terms of number of 
transistors are as follows: adder = 1306, multiplier = 7150 and 
flexible  unit  =  7260.  Assuming  a  MTTF  of  a  transistor  =  109
time units and a mission time of 104 time units, the reliabilities 
of  the  components  based  on  their  sizes  and  exponential  fault 
distribution is as follows: adder = 0.987, multiplier = 0.931 and 
flexible  unit  =  0.930.  The  failure  rates  corresponding  to  these 
reliabilities  were  then  used  to  determine  the  transition  rates 
between states in the MRM.  
v1
v3
v6
v9
v12
v15
v18
v21
v2
v4
v7
+
(cid:13)
+
+ v10
v13
+
+ v16
v19
+
+ v22
+
(cid:13)
(cid:13)
(cid:13)
(cid:13)
(cid:13)
(cid:13)
(cid:13)
v5
v8
+
+
+v11
v14
+
+v17
v20
+
+v23
Figure 5. FIR filter 
The  Markov  availability  model  was  built  using  a 
commercial software tool [15]. The tool does not support MRMs 
and  was  therefore  used  only  to  solve  the  state  probability 
functions for the Markov availability model. The structure state 
probabilities  obtained  from  these  models  were  then  fed  into  a 
spreadsheet  program  to  calculate  the  associated  rewards.  The 
schedules for the various modes were obtained using behavioral 
synthesis algorithms from the literature [9,13]. 
The  metrics  analyzed  for  this  case  study  were  area  and 
throughput with reliability. The rewards were set up so that area 
and  throughput  had  equal  weights.  In  order  to  not  skew  the 
reward  numbers,  both  area  and  throughput  (the  system  is  not 
pipelined,  so  throughput  is  the  inverse  of  latency)  were 
normalized  to  between  0  and  1.  For  every  configuration,  the 
throughput  of  the  initial  state  was  used  to  normalize  the 
throughputs  for  the  other  states.  Using  the  combination  of  the 
Markov  modeling  tool  and  the  spreadsheet,  the  instantaneous 
expected throughput reward was obtained for each configuration 
for a given mission time. This value multiplied by the reciprocal 
of the normalized area gives the expected reward with both area 
and throughput taken into account. 
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:35:49 UTC from IEEE Xplore.  Restrictions apply. 
Table 2 shows an example expected throughput calculation 
for  configuration  C5  for  a  mission  time  of  10000  time  units. 
Column 1 shows the various modes the system may go through. 
Column 2 gives the state probabilities obtained from the Markov 
solver. The normalized throughput reward is shown in column 4 
and the product of this reward and the state probability is shown 
in  column  5.  The  accumulated  throughput  reward  for  this 
configuration is 0.99950. 
Table  3  shows  the  area-throughput  reward  calculation  for 
all  of  the  configurations  for  the  same  mission  time  of  10000 
time units. Column 2 shows the area of each configuration, and 
column 3 shows the expected throughput reward corresponding 
to each configuration calculated in the same manner as in Table 
2. Column 4 shows the overall area-throughput reward for each 
configuration.  This  reward  is  calculated  by  multiplying  the 
values  in  column  3  with  the  reciprocal  of the normalized area, 
where the normalizing quantity is 25368, the area of the largest 
configuration  C4.  Based  on 
the 
configuration  providing  the  highest  reward  is  C6,  which 