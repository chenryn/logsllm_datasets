digoal=> select hll_set_defaults(10,1,4,1);  
-- 输出1个hll的字节流信息:  
digoal=> select hll_add_agg(hll_hash_integer(t)) from generate_series(1,2) g(t);  
               hll_add_agg                  
------------------------------------------  
 \x120a438895a3f5af28cafeda0ce907e4355b60  
(1 row)  
```  
从上面这个字节流来分析头的信息 :   
1\. 第一个字节: 0x12  
```  
schema version是头4个比特=1  
data type是后4个比特 = 2, 对应的是EXPLICIT  
```  
2\. 第二个字节: 0x0a  
前3个比特是registerWidth - 1=0, 所以registerWidth=1;  
后5个比特是log2(numberOfRegisters)=10, 所以numberOfRegisters=2^10= 1024;  
3\. 第三个字节: 0x43  
展开成2进制为: 01000011  
第一个比特是为了满足8bit 对其的padding. 值是多少都忽略不计;  
第二个比特是sparseEnabled的布尔逻辑, 值为1;  
最后6个比特是integer_log2(expthresh) + 1, 这里我们设置了expthresh=4, 所以integer_log2(expthresh) + 1 = 3;  
如果6个比特位满表示127, 但是不能取这么大的值, 因为1LL  select hll_print(hll_add_agg(hll_hash_integer(t))) from generate_series(1,2) g(t);  
                              hll_print                                
---------------------------------------------------------------------  
 EXPLICIT, 2 elements, nregs=1024, nbits=1, expthresh=4, sparseon=1:+  
 0: -8604791237420463362                                            +  
 1: -2734554653617988768   
(1 row)  
```  
将以上的data 转换成16进制 :   
```  
8895A3F5AF28CAFE  
DA0CE907E4355B60  
```  
正好是hll值中对应的data bytes部分.  
## 四、data type详解 :   
1\. EMPTY, 没有data bytes的部分, 看字节流如下 :   
```  
digoal=> select hll_empty();  
 hll_empty   
-----------  
 \x110a43  
(1 row)  
digoal=> select hll_print(hll_empty());  
                      hll_print                        
-----------------------------------------------------  
 EMPTY, nregs=1024, nbits=1, expthresh=4, sparseon=1  
(1 row)  
```  
2\. EXPLICIT, 第三部分已经讲过, 这里就不再多说了. 只是要注意2点 :   
2\.1 存储是针对hll_hashval排序好了的.  
```  
digoal=> select hll_set_defaults(10,1,8192,1);  
 hll_set_defaults   
------------------  
 (10,1,4,1)  
(1 row)  
digoal=> select hll_hash_integer(t) from generate_series(1,10) g(t);  
   hll_hash_integer     
----------------------  
 -8604791237420463362  
 -2734554653617988768  
 5208657608173592891  
 2072756739463403504  
 6655367218388208063  
 -5566252076597558760  
 9162408199432052219  
 8282768600195057636  
 1779292183511753683  
 3213538865073541202  
(10 rows)  
digoal=> select hll_print(hll_add_agg(hll_hash_integer(t))) from generate_series(1,10) g(t);  
                                hll_print                                  
-------------------------------------------------------------------------  
 EXPLICIT, 10 elements, nregs=1024, nbits=1, expthresh=8192, sparseon=1:+  
 0: -8604791237420463362                                                +  
 1: -5566252076597558760                                                +  
 2: -2734554653617988768                                                +  
 3:  1779292183511753683                                                +  
 4:  2072756739463403504                                                +  
 5:  3213538865073541202                                                +  
 6:  5208657608173592891                                                +  
 7:  6655367218388208063                                                +  
 8:  8282768600195057636                                                +  
 9:  9162408199432052219   
(1 row)  
```  
2\.2 如果手动设置了expthresh, 那么使用explicit存储的最大存储空间就是3 bytes + (8bytes * expthresh); 当存储的值个数超过expthresh是会转换成SPARSE或FULL存储, 占用的空间会缩小. 具体缩小到多少可以参考以下表 :   
```  
logm2	regwidth=1	regwidth=2	regwidth=3	regwidth=4	regwidth=5	regwidth=6  
10	7.4e+02   128B	3.0e+03   256B	4.7e+04   384B	1.2e+07   512B	7.9e+11   640B	3.4e+21   768B  
11	1.5e+03   256B	5.9e+03   512B	9.5e+04   768B	2.4e+07   1.0KB	1.6e+12   1.2KB	6.8e+21   1.5KB  
12	3.0e+03   512B	1.2e+04   1.0KB	1.9e+05   1.5KB	4.8e+07   2.0KB	3.2e+12   2.5KB	1.4e+22   3KB  
13	5.9e+03   1.0KB	2.4e+04   2.0KB	3.8e+05   3KB	9.7e+07   4KB	6.3e+12   5KB	2.7e+22   6KB  
14	1.2e+04   2.0KB	4.7e+04   4KB	7.6e+05   6KB	1.9e+08   8KB	1.3e+13   10KB	5.4e+22   12KB  
15	2.4e+04   4KB	9.5e+04   8KB	1.5e+06   12KB	3.9e+08   16KB	2.5e+13   20KB	1.1e+23   24KB  
16	4.7e+04   8KB	1.9e+05   16KB	3.0e+06   24KB	7.7e+08   32KB	5.1e+13   40KB	2.2e+23   48KB  
17	9.5e+04   16KB	3.8e+05   32KB	6.0e+06   48KB	1.5e+09   64KB	1.0e+14   80KB	4.4e+23   96KB  
18	1.9e+05   32KB	7.6e+05   64KB	1.2e+07   96KB	3.1e+09   128KB	2.0e+14   160KB	8.7e+23   192KB  
19	3.8e+05   64KB	1.5e+06   128KB	2.4e+07   192KB	6.2e+09   256KB	4.1e+14   320KB	1.7e+24   384KB  
20	7.6e+05   128KB	3.0e+06   256KB	4.8e+07   384KB	1.2e+10   512KB	8.1e+14   640KB	3.5e+24   768KB  
```  
例如 :   
```  
-- logm2:10, regwidth:1对应以上表的存储空间是128 bytes, 将thresh设置成8192, 也就是说要超过8192个存储的值时才会使用sparse存储.  
digoal=> select hll_set_defaults(10,1,8192,1);  
 hll_set_defaults   
------------------  
 (10,1,8192,1)  
(1 row)  
-- 8192个值时, 由于使用explicit存储结构, 所以占用空间是3bytes + 8192*8 = 65539 bytes  
digoal=> select octet_length(hll_add_agg(hll_hash_integer(t))::text::bytea) from generate_series(1,8192) g(t);  
 octet_length   
--------------  
        65539  
(1 row)  
-- 当值增加到8193, 那么会转换成sparse存储结构, 空间降到3 bytes + 128 bytes = 131 bytes.  