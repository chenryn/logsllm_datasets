SHF_ALLOC + SHF_WRITE
comment
SHT_PROGBITS
none
.data
SHT_PROGBITS
SHF_ALLOC + SHF_WRITE
.data1
SHT_PROGBITS
SHF_ALLOC + SHF_WRITE
.debug
SHT_PROGBITS
none
SHF_ALLOC + SHF_WRITE.
dynamic
SHT_DYNAMIC
在有些系统下.dynamic段可能是尽读的，
所以没有SHF_WRITE标志位
.hash
SHT_HASH
SHF_ALLOC
line
SHT_PROGBITS
none
程序员的自我修养一—链接、装载与库
---
## Page 102
3.4ELF文件结构描述
79
续表
Name
sh_type
sh_flag
-note
SHT_NOTE
none
rodata
SHT_PROGBITS
SHF_ALLOC
-rodata1
SHT_PROGBITS
SHF_ALLOC
shstrtab
SHT_STRTAB
none
如果该ELF文件中有可装载的段须要用
-strtab
SHT_STRTAB
到该字符串表，那么该字符串表也将被装
载到进程空间，则有SHF_ALLOC标志位
symtab
SHT_SYMTAB
同字符串表
text
SHT_PROGBITS
SHF_ALLOC + SHF_EXECINSTR
段的链接信息（sh_ink、sh_info）如果段的类型是与链接相关的（不论是动态链接或
静态链接），比如重定位表、符号表等，那么sh_link和sh_info这两个成员所包含的意义如
表3-11所示。对于其他类型的段，这两个成员没有意义。
表3-11
sh_type
sh_link
sh_into
SHT_DYNAMIC
该段所使用的字科事表在段表中的下标
0
SHT_HASH
该段所使用的特号表在段表中的下标
0
SHT_REL
该段所使用的相应料号表在段表中的下标
该重定位表所作用的段
SHT_RELA
在段表中的下标
SHT_SYMTAB
操作系统相关的
操作系统相关的
SHT_DYNSYM
other
SHN_UNDEF
0
3.4.3
重定位表
我们注意到，SimpleSection.o中有一个叫做“reltext”的段，它的类型（sh_type）为
“SHT_REL"，也就是说它是一个重定位表（RelocationTable），正如我们最开始所说的，
链接器在处理目标文件时，须要对目标文件中某些部位进行重定位，即代码段和数据段中那
些对绝对地址的引用的位置。这些重定位的信息都记录在ELF文件的重定位表里面，对于
每个须要重定位的代码段或数据段，都会有一个相应的重定位表。比如 SimpleSection.o中
用，那就是对“printf”函数的调用：而“.data”段则没有对绝对地址的引用，它只包含了
一个重定位表同时也是ELF的一个段，那么这个段的类型（sh_type）就是“SHT_REL”
程序员的自我修养一链接、装载与库
---
## Page 103
80
第3章目标文件里有什么
类型的，它的”sh_link"表示符号表的下标，它的“sh_info“表示它作用于哪个段。比如r”rel.text”
，x1x，x
关于重定位表的内部结构我们在这里先不展开了，在下一章分析静态链接过程的时候，
我们还会详细地分析重定位表的结构。
3.4.4字符串表
ELF文件中用到了很多字符串，比如段名、变量名等，因为字符串的长度往往是不定的，
所以用周定的结构来表示它比较困难。一种很常见的做法是把字符串集中起来存放到一个
表，然后使用字符串在表中的偏移来引用字符串。比如表3-12这个字符串表。
表3-12
偏移
+1
+2+3+4+5+6+7+8+9
+0
0
h
0
1
+10
d
v0
a
i
+20
0
那么偏移与它们对应的字符串如表3-13所示。
表3-13
偏移
字符串
0
空字符串
helloworld
6
P(aom
12
Myvariable
通过这种方法，在ELF文件中引用字符串只须给出一个数字下标即可，不用考虑字符
“.shstrtab”。这两个字符串表分别为字符串表（StringTable）和段表字符串表（Section
HeaderStringTable）。顾名思义，字符串表用来保存普通的字符串，比如符号的名字：段
表字符串表用来保存段表中用到的字符串，最常见的就是段名（sh_name）。
接着我们再回头看这个ELF文件头中的“e_shstrmdx”的含义，我们在前面提到过，
写。我们知道段表字符串表本身也是ELF文件中的一个普通的段，知道它的名字往往叫做
在段表中的下标。前面的 SimpleSection.o中，“e_shstmdx”的值为8，我们再对照“readelf-S”
的输出结果，可以看到“shstrtab”这个段刚好位于段表中的下标为8的位置上。由此，我
程序员的自我修养一链接、装载与库
---
## Page 104
3.5链接的接口—符号
81
们可以得出结论，只有分析ELF文件头，就可以得到段表和段表字符事表的位置，从而解
析整个ELF文件。
3.5链接的接口一符号
木一样，可以拼装形成一个整体，为了使不间目标文件之间能够相互粘合，这些目标文件之
间必须有固定的规则才行，就像积木模块必须有凹凸部分才能够拼合。在链接中，目标文件
之间相互拼合实际上是目标文件之间对地址的引用，即对函数和变量的地址的引用。比如目
标文件B要用到了目标文件A中的函数“foo”，那么我们就称目标文件A定义（Define）
念也同样适用于变最。每个函数或变最都有自己独特的名字，才能避免链接过程中不同变量
和函数之间的混淆。在链接中，我们将函数和变量统称为符号（Symbol），函数名或变量名
就是符号名（Symbol Name）。
我们可以将符号看作是链接中的粘合剂，整个链接过程正是基于符号才能够正确完成。
链接过程中很关键的一部分就是符号的管理，每一个目标文件都会有一个相应的符号表
（Symbol Table），这个表里面i记录了目标文件中所用到的所有符号。每个定义的符号有一
个对应的值，叫做符号值（Symbol Value），对于变量和函数来说，符号值就是它们的地址。
除了函数和变量之外，还存在其他几种不常用到的符号。我们将符号表中所有的符号进行分
类，它们有可能是下面这些类型中的一种：
·定义在本目标文件的全局符号，可以被其他目标文件引用。比如SimpleSection.o里面
*eAupqo3,Bg _ueu。。1ouny, (0]
·在本目标文件中引用的全局符号，却没有定义在本目标文件，这-般叫做外部符号
（Extemal Symbol），也就是我们前面所讲的符号引用。比如 SimpleSection.o里面的
"printf"。
·段名，这种符号往往由编译器产生，它的值就是该段的起始地址。比如 SimpleSection.o
里面的“text”、“.data”等。
·局部符号，这类符号只在编译单元内部可见。比如 SimpleSection.o果面的“static_var”
和“static_var2”。调试器可以使用这些符号来分析程序或期溃时的核心转储文件，这些
局部符号对于链接过程没有作用，链接器往往也忽略它们。
·行号信息，即目标文件指令与源代码中代码行的对应关系，它也是可选的。
对于我们来说，最值得关注的就是全局符号，即上面分类中的第一类和第二类。因为链
接过程只关心全局符号的相互“粘合”，局部符号、段名、行号等都是次要的，它们对于其
程序员的自我修养一链接、装载与库
---
## Page 105
82
第3章目标文件里有什么
他目标文件来说是“不可见”的，在链接过程中也是无关紧要的。我们可以使用很多工其来
查看ELF 文件的符号表，比如readelf、objdump、nm 等，比如使用“nm”来查看
“SimpleSection.o”的符号结果如下：
$ nm SimpleSection.o
00000000 D globa1_init_var
00000000 r func1
0000001b T main
xusuneqo50000000
00000004 d 8tatic_var.1286
U printf
00000000 b static_var2,1287
3.5.1
ELF符号表结构
ELF文件中的符号表往往是文件中的一个段，段名一般叫“symtab"。符号表的结构很
简单，它是一个EIf32_Sym结构（32位ELF文件）的数组，每个EIf32_Sym结构对应个
符号。这个数组的第-个元素，也就是下标0的元素为无效的“未定义”符号。Elf32_Sym
的结构定文如下：
typedet struct (
E1f32_word st_name:
E1f32_Addr 8t_value;
unsigned char st_infoj
Elf32_word st_size;
E1f32_Half st_shndx:
unsigned char st_other ;
u/s"z=3(
这儿个成员的定义如表3-14所示。
表3-14
st_name
好号名，这个成员包含了该料号名在字符串表中的下标（还记得字符事表
吧？)
st_value
符号相对应的值，这个值跟符号有关，可能是一个绝对值，也可能是一个地
址等，不同的符号，它所对应的值含叉不同，见下文“符号值”
st_size
符号大小，对于包含数据的符号，这个值是该数据类型的大小，比如一个double
型的符号它占用8个字节，如果该值为0.则表示该符号大小为0或未知
st_info
符号类型和绑定信息，见下文“符号类型与绑定信息”
st_other
该成员目前为0，没用
st_shndx
符号所在的段，见下史“符号所在段”
符号类型和绑定信息（st_info）该成员低4位表示符号的类型（SymbolType），高28
位表示符号绑定信息（Symbol Binding），如表3-15、表3-16所示。
程序员的自我修养一键接、装载与库
---
## Page 106
3.5链接的接口
一符号
83
表3-15
符号绑定信息
宏定义名
值
说明
STB_LOCAL
0
局部符号，对于日标文件的外部不可见
STB_GLOBAL
1
全局符号，外部可见
STB_WEAK
2
弱引用，详见“弱符号与强符号”
表3-16
符号类型