title:Refresh When You Wake Up: Proactive Threshold Wallets with Offline
Devices
author:Yashvanth Kondi and
Bernardo Magri and
Claudio Orlandi and
Omer Shlomovits
7
6
0
0
0
.
1
2
0
2
.
1
0
0
0
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
1
2
0
2
©
0
0
.
1
3
$
/
1
2
/
5
-
4
3
9
8
-
1
8
2
7
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
1
2
0
2
2021 IEEE Symposium on Security and Privacy (SP)
Refresh When You Wake Up:
Proactive Threshold Wallets with Ofﬂine Devices
Yashvanth Kondi
Bernardo Magri
PI:EMAIL
Northeastern University
PI:EMAIL
Concordium Blockchain
Claudio Orlandi
Omer Shlomovits
PI:EMAIL
PI:EMAIL
Aarhus University
KZen Research
Research Center,
Aarhus University
Abstract—Proactive security is the notion of defending a
distributed system against an attacker who compromises different
devices through its lifetime, but no more than a threshold number
of them at any given time. The emergence of threshold wallets
for more secure cryptocurrency custody warrants an efﬁcient
proactivization protocol tailored to this setting. While many
proactivization protocols have been devised and studied in the
literature, none of them have communication patterns ideal
for threshold wallets. In particular a (t, n) threshold wallet is
designed to have t parties jointly sign a transaction (of which only
one may be honest) whereas even the best current proactivization
protocols require at least an additional t − 1 honest parties to
come online simultaneously to refresh the system.
In this work we formulate the notion of refresh with ofﬂine
devices, where any tρ parties may proactivize the system at any
time and the remaining n−tρ ofﬂine parties can non-interactively
“catch up” at their leisure. However, many subtle issues arise in
realizing this pattern. We identify that this problem is divided
into two settings: (2, n) and (t, n) where t > 2. We develop novel
techniques to address both settings as follows:
• We show that the (2, n) setting permits a tight tρ for refresh.
In particular we give a highly efﬁcient tρ = 2 protocol to
upgrade a number of standard (2, n) threshold signature
schemes to proactive security with ofﬂine refresh. This
protocol can augment existing implementations of threshold
wallets for immediate use– we show that proactivization does
not have to interfere with their native mode of operation.
This technique is compatible with Schnorr, EdDSA, and
with some effort even sophisticated ECDSA protocols. By
implementation we show that proactivizing two different
recent (2, n) ECDSA protocols incurs only 14% and 24%
computational overhead respectively, less than 200 bytes,
and no extra round of communication.
• For the general (t, n) setting we prove that it is impossible
to construct an ofﬂine refresh protocol with tρ < 2(t −
1), i.e. tolerating a dishonest majority of online parties.
Our techniques are novel in reasoning about the message
complexity of proactive security, and may be of independent
interest.
Our results are positive for small-scale decentralization (such
as 2FA with threshold wallets), and negative for large-scale
distributed systems with higher thresholds. We thus initiate
the study of proactive security with ofﬂine refresh, with a
comprehensive treatment of the dishonest majority case.
I. INTRODUCTION
Threshold Signatures as conceived by Desmedt [1] allow the
ability to sign messages under a public key to be delegated to a
group of parties instead of a single one. In particular, a subset
of these parties greater than a certain threshold must collabo-
rate in order to sign a message. This primitive ﬁnds application
in many scenarios, but more recently it has seen interest from
the blockchain community as a method to manage private keys
effectively. From multi-factor authentication to distribution of
spending authority, threshold signature schemes allow cryp-
tocurrency wallets to build resilience against compromise of
up to a threshold number of devices. This is because threshold
signature protocols never physically reconstruct the signing
key at a single location, and so an attacker who compromises
fewer devices than the signing threshold learns no useful
information to forge signatures.
A long line of works has constructed threshold versions
of common signature schemes [2], [3], [4]. Despite the non-
linearity of the ECDSA signing equation making its thresh-
oldization challenging, recent works have seen even threshold
ECDSA schemes [5], [6], [7], [8], [9] enter the realm of
practicality. This has immediate implications for users of the
many cryptocurrencies (Bitcoin, Ethereum, etc.) that have
adopted ECDSA as their canonical signature algorithm. Be-
sides ECDSA, Schnorr [10] and other Schnorr-like signature
schemes (eg. EdDSA [11]) are seeing an increase in interest
from the cryptocurrency community, of which many employ
threshold-friendly signing equations.
However threshold signature schemes by themselves do not
address a number of security concerns that arise in real-world
deployment. Indeed, all privacy/unforgeability guarantees of
such a system are completely and irreparably voided if an
adversary breaks into even one device more than the threshold
throughout the lifetime of the system. A natural question to ask
is instead of assuming that an adversary is threshold-limited to
the same devices essentially forever, whether it is meaningful
to consider a threshold-limited adversary with mobility across
devices in time. In more detail an attacker may break into
different devices in the system (possibly all of them in its
lifetime) however at any given point in time, not more than
a threshold number of them are compromised. This question
was ﬁrst considered by Ostrovsky and Yung [12] who devised
the notion of a mobile adversary, which may change which
devices are compromised at marked epochs in time. They
found that the trick to thwarting such an adversary is to have
each party proactively re-randomize its secret state between
© 2021, Yashvanth Kondi. Under license to IEEE.
DOI 10.1109/SP40001.2021.00067
608
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:17:03 UTC from IEEE Xplore.  Restrictions apply. 
epochs. This technique ensures that the views of different
parties at different epochs in time are independent, and can
not be combined to reveal any meaniningful information about
shared secrets by a mobile attacker.
A. Proactivizing Threshold Signatures
Proactive Secret Sharing (PSS) as it has come to be known,
has seen a number of realizations for different ranges of
parameters since the introduction of the mobile adversary
model [12]. In fact, even proactive signature schemes them-
selves have been studied directly [3], [13]. A naive adaptation
of any off-the-shelf PSS scheme to the threshold signature
setting would in many cases yield proactive threshold signa-
ture schemes immediately. However, heavy use of an honest
majority by most PSS schemes would already rule out many
practical applications of such an approach. Moreover all such
solutions will have communication patterns that require every
party in the system to be online at pre-deﬁned times, at the
close of every epoch, in order to keep the system proactivized
and moving forward.
To see why requiring all parties to be online simultaneously
is not reasonable especially for threshold wallets, consider
the following scenario: Alice splits her signing key between
her smartphone and laptop and has them execute a threshold
signing protocol when a message is to be signed. However if
for any number of operational reasons one of the devices (say
her smartphone) malfunctions, the secret key is lost forever
and any funds associated with the corresponding public key
are rendered inaccessible. In order to avoid this situation, Alice
stores a third share of the signing key in a secure cold storage
server. While this third share does not by itself leak the signing
key, along with the laptop it can aid in the restoration of
the smartphone’s key share when required. In this scenario
it would be quite inconvenient (and also defeat the purpose of
two-party signing) if the cold storage server has to participate
in the proactivization every time the system needs to be re-
randomized; it would be much more reasonable to have the
smartphone and laptop proactivize when required, and send
update packages to the server.
The ideal communication pattern alluded to above is the
following: in a (t, n) proactive threshold signature scheme,
any t parties are able to jointly produce all the necessary
components to refresh the system, and send the relevant
information to ofﬂine parties. When an ofﬂine party wakes
up, it processes the messages received and is able to “catch
up” to the latest sharing of the secret.
B. Challenges in Realizing this Pattern
While this communication pattern sounds ideal, a whole
host of subtle issues arise in potential realizations. For in-
stance, in the Cold Storage case, how does the server know
that
the updates it receives are “legitimate”? An attacker
controlling Alice’s smartphone could spoof an update message
and trick the server into deleting its key share and replacing
it with junk.
Due to the inherent unfairness of two-party/dishonest ma-
jority MPC protocols, an adversary can obtain the output of
the computation while depriving honest parties of it. In this
spirit, the smartphone (acting for the attacker) could work with
the laptop until it obtains the “update” message to send to the
server, but abort the computation before the laptop gets it. Now
the attacker has the ability to convince the server to delete its
old share by using this message, whereas the laptop has no
idea whether the attacker will actually do this (and therefore
doesn’t know whether to replace its own key share).
Implicit in these scenarios is the problem of unanimous
erasure:
How can we design a proactivization protocol in
which the adversary can not convince an honest
party to prematurely erase its secret key share?
In the (2, 2) case even a network adversary (who does not
control either party) can induce premature deletion by simply
dropping a message in the protocol. Moreover is it possible
to restrain such a proactivization procedure to be minimally
invasive to the threshold wallet? i.e. native to usage patterns
and protocol structures of threshold wallets.
C. Our Contributions
In this work we give a comprehensive treatment of the
notion of proactive security with ofﬂine-refresh, with our study
progressing in four phases:
1) Deﬁning Ofﬂine Refresh. We formalize the notion of
ofﬂine refresh for threshold protocols in the Universal
Composability (UC) framework [14], and justify why
our deﬁnition (unanimous erasure) is the correct one.
Our starting point is the deﬁnition of Almansa et al. [3]
which we build on to capture that all parties need not
be in agreement about which epoch they are in, and that
an adversary can change corruptions while other parties
are ofﬂine. Intuitively previous deﬁnitions have had an
inherent synchrony in the progress of the system, which
we remove in ours and show how to capture that parties