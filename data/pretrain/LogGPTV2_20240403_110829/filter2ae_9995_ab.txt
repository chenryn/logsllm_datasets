            for key, value in data_dict.iteritems():
                if (value == 'BRO_STOP'):
                    return None
                data_dict[key] = self._cast_value(value)
            return data_dict
        def _cast_value(self, value):
            ''' Internal method that makes sure any dictionary elements
                are properly cast into the correct types, instead of
                just treating everything like a string from the csv file
            '''
            # First try time
            try:
                return datetime.datetime.fromtimestamp(float(value))
            # Next try a set of primitive types
            except ValueError:
                tests = (int, float, str)
                for test in tests:
                    try:
                        return test(value)
                    except ValueError:
                        continue
                return value
    def fileRows(fileName):  #count the whole lines
        f = open(fileName,'r')
        i=0
        for ii in f.readlines():
            i=i+1
        return i
    def get_allfilename(input_dir):
        for (path,dirname,filenames) in os.walk(input_dir):
            return filenames
    if __name__ == '__main__':
        # Handle command-line arguments
        PARSER = optparse.OptionParser()
        PARSER.add_option('--logfiledir', default=None, help='Logfile to read from.  Default: %default')
        OPTIONS, ARGUMENTS = PARSER.parse_args()
        # print OPTIONS, ARGUMENTS
        for filename in get_allfilename(OPTIONS.logfiledir):
            filedir=OPTIONS.logfiledir+"/"+filename
        # Create a BRO log file reader and pull from the logfile
            BRO_LOG = BroLogReader()
            RECORDS = BRO_LOG.read_log(filedir, max_rows=fileRows(filedir))
            for row in RECORDS:
                test_mysql.mysql_con(row)
而证书分析器是我们工具的重点。  
证书信息分析器是整个检测方法的核心部分，其主要功能是根据日志记录中证书相关的字段信息来分析并判断该记录中的证书是伪造证书，还是可疑证书或非伪造证书。  
证书信息分析器的整体运行流程如下图所示。首先，证书信息分析器将提取经过日志解析器解析后的日志记录中的字段certificate.subject、certificate.issuer、certificate.not_valid_before、certificate.not_valid_after的值，分别代表了证书的主体、颁发者、有效期（包含起始时间和结束时间两个属性）。  
如果某个证书的签发机构是其本身，那么称该证书为自签名证书。一般的自签名证书都不是由受信任的根证书颁发机构颁发，系统无法验证其安全性，因此一般来说自签名证书都属于伪造证书，且多用于SSL中间人攻击中。因此，如果certificate.subject值等于certificate.issuer值，即颁发机构就是主体本身，说明该证书属于自签名证书，证书信息分析器判定其是伪造证书，若证书信息数据集中已有该证书记录，则更新出现次数字段的值，若不存在该证书记录，就将证书字段相关信息与检测结果存入证书信息数据集中。  
而如果certificate.subject值不等于certificate.issuer值，即颁发者不是主体，说明该证书不是自签名证书，且存在着一条证书链。由于本作品的流量采集环境Bro只具备记录证书的基本信息的功能，没有验证证书的能力，而且日志记录的数量庞大，若对每个证书都再进行一次证书链的验证过程，将耗费大量时间与内存。因此在这里采用这样的方法：对当前日志记录中的证书，查询证书信息数据集中同一证书不同记录（同一证书代表它们拥有相同的subject值）的证书信息，若不存在该证书的日志记录，那么判定该证书为非伪造证书，并将证书字段相关信息与检测结果存入证书信息数据集中。若存在该证书的日志记录，且与证书信息数据集中证书信息完全匹配，证书信息分析器判定该证书为非伪造证书，并更新出现次数字段的值。  
若存在一条记录的证书信息与其他记录的证书信息不相同，判定该证书为可疑证书，并将证书字段相关信息与检测结果存入证书信息数据集中，并修改其他记录的检测结果。对于这些可疑证书的日志记录，系统将进一步通过可疑证书检测器来判定它们到底是伪造证书还是非伪造证书。
之后我们则要对可以证书进行进一步的判断。
## 数据库部分
由于我们在检测ssl证书的过程中使用了数据库。所以我们在这里将数据库的搭建思路写出来。  
为了存储证书的可用信息以及检测结果、统计证书的伪造情况等，本系统中设计了证书信息表、伪造证书主体统计表、伪造证书颁发者统计表。  
其主要功能是统计证书的可用信息，包括证书的主体、证书的颁发者、证书的起始时间和结束时间，以便与后续获取到的真实证书的信息进行比对。对于证书信息完全相同的日志记录，将日志记录出现的次数存储在字段occur_time中，更便于存储和统计工作。而字段forged用于记录该日志记录的证书的检测结果。
下面放出mysql的数据库搭建sql文件内容。
    drop database if exists Cert_data;
    create database Cert_data;
    use Cert_data;
    CREATE TABLE certinfo_a(
    cert_id int(11) not null auto_increment,
    cert_subject varchar(500) not null,
    cert_issuer varchar(500) not null,
    startdate varchar(40) not null,
    expiredate varchar(40) not null,
    occur_time int(11) not null default'1',
    forged int(11),
    primary key(cert_id)
    );
    CREATE table certinfo_b like certinfo_a;
    CREATE table certinfo_c like certinfo_a;
    CREATE table certinfo_d like certinfo_a;
    CREATE table certinfo_e like certinfo_a;
    CREATE table certinfo_f like certinfo_a;
    CREATE table certinfo_g like certinfo_a;
    CREATE table certinfo_h like certinfo_a;
    CREATE table certinfo_i like certinfo_a;
    CREATE table certinfo_j like certinfo_a;
    CREATE table certinfo_k like certinfo_a;
    CREATE table certinfo_l like certinfo_a;
    CREATE table certinfo_m like certinfo_a;
    CREATE table certinfo_n like certinfo_a;
    CREATE table certinfo_o like certinfo_a;
    CREATE table certinfo_p like certinfo_a;
    CREATE TABLE  subjectrecord(
    cert_subject varchar(500) not null,
    occur_time int(11) not null,
    primary key(cert_subject)
    );
    CREATE TABLE  issuerrecord(
    cert_issuer varchar(500) not null,
    occur_time int(11) not null,
    primary key(cert_issuer)
    );
## 系统样例
当我们上传流量包后，我们进行测试得到上图的伪造证书与非伪造证书饼图。
当我们上传的流量包足够多时，我们的数据库中就会存在大量的数据样例。此时我们的系统工具则可以进行进一步的证书检测。当我们拿到新流量后，我们可以将其上传到我们的系统中并可以对其进行真伪检测。
## 测试结果
我们对我们手中的40w条流量数据进行了测试，我们得出如下内容。  
通过对本次检测结果的分析，本文对SSL中间人攻击提出一些防范措施与建议。当用户采用HTTPS通信时，首先必须要进行证书链验证这一步骤。对于一些需要安装证书的网站，尤其是那些需要进行个人信息填写、网上即时交易的网站，务必要谨慎再谨慎，一旦发现安装的证书中存在任何可疑的地方，应立刻中断与该网站的连接。或者当用户已经安装了该网站的证书，但在与该网站通信时，网站仍然要求用户安装证书，那么这个证书很有可能就是伪造的，用户应当立即中断与网站的连接并通过其它可信赖的方式验证该网站是否更改过证书。  
而对于那些浏览器出现诸如“该网站证书存在问题”或“您的连接不是私密连接”等警告字样时，也务必多加留意，检查该网站证书的主体与颁发者、该网站的域名是否与网站证书域名相一致，同时不应该在该网站上填写隐私信息或进行网上交易，因为此时用户很有可能就受到了中间人攻击。如果发现访问网站的速度比平时慢很多，有可能遭到了ARP攻击，此时应通过ARP查询来检验自己是否遭到了中间人攻击。
即便用户对网站证书有一定了解，也未必能察觉到自己正遭受SSL中间人攻击。
    由于篇幅有限，部分内容无法进行详细的交代。对于ssl证书的检测工具的编写我们提出了一种思路，也希望能帮助到对此进行研究的同行。如有需要大家可以在下方留言，我会进行答复。
  * **本稿为原创稿件，转载请标明出处。谢谢** 。