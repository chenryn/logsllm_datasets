# 一、安装 Docker
**Docker** 是一种轻型容器化技术，近年来获得了广泛的普及。它使用大量的 Linux 内核特性，如名称空间、cgroups、AppArmor 配置文件等，将进程沙箱化到可配置的虚拟环境中。
在本章中，您将学习如何在开发和生产中的各种系统上安装 Docker。对于基于 Linux 的系统，由于内核已经可用，安装就像`apt-get install`或`yum install`命令一样简单。但是，要在非 Linux 操作系统(如 OSX 和 Windows)上运行 Docker，您需要安装一个由 Docker Inc .开发的助手应用，名为**bootwocker**。这个将在 **VirtualBox** 上安装一个轻量级 Linux VM，这将通过端口 2375 使 Docker 可用，端口 2375 由**互联网** **分配** **号** **权限** ( **IANA** )。
在本章的最后，您将在您的系统上安装 Docker，无论是在开发中还是在生产中，并对其进行验证。
本章将涵盖以下几点:
*   介绍 Docker
*   安装 Docker
*   Ubuntu (14.04 和 12.04)
*   Mac OSX 和 Windows
*   OpenStack
*   初始阶段:在 Docker 中构建 Docker
*   验证安装:`Hello` `World`输出
*   介绍 Docker
Docker 是由 DotCloud Inc .(目前是 Docker Inc .)开发的，作为框架，他们将他们的**平台** **构建为** **一个** **服务** ( **PaaS** )。当他们发现开发人员对这项技术越来越感兴趣时，他们将其作为开源发布，并宣布将完全专注于 Docker 技术的开发，这是一个好消息，因为这意味着对平台的持续支持和改进。
有许多工具和技术旨在使分布式应用成为可能，甚至易于设置，但没有一个像 Docker 一样具有广泛的吸引力，这主要是因为它的跨平台特性以及对系统管理员和开发人员的友好性。可以在任何操作系统中设置 Docker，无论是 Windows、OSX 还是 Linux，Docker 容器在任何地方都以相同的方式工作。这是非常强大的，因为它支持一次写入，随处运行的工作流。Docker 容器保证以相同的方式运行，无论是在您的开发桌面、裸机服务器、虚拟机、数据中心还是云上。不再有程序在开发人员的笔记本电脑上运行而不在服务器上运行的情况。
Docker 附带的工作流的本质是，开发人员可以完全专注于构建应用并让它们在容器内运行，而系统管理员可以在部署中运行容器。角色的分离和支持它的单一底层工具的存在简化了代码管理和部署过程。
但是虚拟机不是已经提供了所有这些功能吗？
**虚拟机** ( **虚拟机** ) 完全虚拟化。这意味着它们之间共享最少的资源，并且每个虚拟机都有自己的一组资源分配给它。虽然此允许对单个虚拟机进行细粒度配置，但最少的共享也会转化为更多的资源使用、冗余的运行进程(需要运行整个操作系统！)，因此会产生性能开销。
另一方面，Docker 建立在一种容器技术的基础上，这种技术隔离了一个进程，并使它相信自己正在独立的操作系统上运行。该进程仍然与其主机运行在同一个操作系统中，共享其内核。它使用一个分层的写时复制文件系统，称为**另一个** **Unionfs** ( **AUFS** )，在容器之间共享操作系统的公共部分。当然，更大程度的共享只能意味着更少的隔离，但 Linux 进程的资源管理解决方案(如名称空间和 cgroups)的巨大改进使 Docker 能够实现类似虚拟机的进程沙箱化，同时保持非常小的资源占用。
让我们看看下面的图片:
![Unboxing Docker](img/4787_01_04.jpg)
这是一个 Docker 与 VM 的比较。容器与其他容器和进程共享主机的资源，虚拟机必须为每个实例运行整个操作系统。
# 安装 Docker
docker 可以在大多数主要 Linux 发行版的标准存储库中找到。我们将查看 Ubuntu 14.04 和 12.04 (Trusty 和 precision)、Mac OSX 和 Windows 中 Docker 的安装过程。如果您当前使用的是上面没有列出的操作系统，您可以在[https://docs.docker.com/installation/#installation](https://docs.docker.com/installation/#installation)查阅您的操作系统的说明。
## 在 Ubuntu 中安装 Docker
Docker 从 Ubuntu 12.04 开始就是 Ubuntu 支持的。记住你仍然需要一个 64 位操作系统来运行 Docker。让我们看看 Ubuntu 14.04 的安装说明。
### 在 LTS Ubuntu Trusty 14.04 安装 Docker
Docker 是 Ubuntu Trusty 发行版软件存储库中的一个软件包，名为`docker.io`:
```
$ sudo apt-get update
$ sudo apt-get -y install docker.io
```
就这样！您现在已经在系统上安装了 Docker。但是，由于该命令已被重命名为`docker.io`，您将不得不用`docker.io`而不是`docker`来运行所有 Docker 命令。
### 注
包被命名为`docker.io`，因为它与另一个名为`docker`的 KDE3/GNOME2 包冲突。如果你想以`docker`的身份运行命令，你可以创建一个到`/usr/local/bin`目录的符号链接。第二个命令向 bash 添加自动完成规则:
```
$ sudo ln -s /usr/bin/docker.io /usr/local/bin/docker
$ sudo sed -i '$acomplete -F _docker docker' \> /etc/bash_completion.d/docker.io
```
### 在乌班图精密 12.04 LTS 安装 Docker
Ubuntu 12.04 附带了一个较旧的内核(3.2)，它与 Docker 的一些依赖项不兼容。所以我们将不得不升级它:
```
$ sudo apt-get update
$ sudo apt-get -y install linux-image-generic-lts-raring linux-headers-generic-lts-raring
$ sudo reboot
```
我们刚刚安装的内核内置了 AUFS，这也是 Docker 的一个需求。
现在让我们总结一下安装过程:
```
$ curl -s https://get.docker.io/ubuntu/ | sudo sh
```
这是一个易于安装的`curl`脚本。查看该脚本的各个部分将使我们更好地理解该过程:
1.  首先，脚本检查我们的**高级**T5】包 **工具** ( **APT** )系统是否可以处理`https`URL，如果不能则安装【T1:
    ```
    # Check that HTTPS transport is available to APT
    if [ ! -e /usr/lib/apt/methods/https ]; then  apt-get update  apt-get install -y apt-transport-https
    fi
    ```
2.  Then it will add the Docker repository to our local key chain:
    ```
    $ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9
    ```
    ### 类型
    您可能会收到该包不可信的警告。回答`yes`继续安装。
3.  Finally, it adds the Docker repository to the APT sources list, and updates and installs the `lxc-docker` package:
    ```
    $ sudo sh -c "echo deb https://get.docker.io/ubuntu docker main\
    > /etc/apt/sources.list.d/docker.list"
    $ sudo apt-get update
    $ sudo apt-get install lxc-docker
    ```
    ### 注
    在 0.9 之前的 Docker 版本对 LXC (Linux 容器)有很强的依赖性，因此不能安装在 OpenVZ 上托管的虚拟机上。但是从 0.9 开始，执行驱动已经与 Docker 内核解耦，这使得我们可以使用众多隔离工具中的一种，比如 LXC、OpenVZ、systemd-nspawn、libvirt-lxc、libvirt-sandbox、qemu/kvm、BSD Jails、Solaris Zones，甚至 chroot！但是，默认情况下，它附带了 Docker 自己的容器化引擎的执行驱动程序，名为 l **ibcontainer** ，这是一个纯 Go 库，可以直接访问内核的容器 API，没有任何其他依赖关系。
    要使用任何其他容器化引擎，比如 LXC，可以使用-e 标志，比如:`$ docker -d -e lxc`。
    现在我们已经安装了 Docker，我们可以全速前进了！但是有一个问题:像 **APT** 这样的软件仓库通常都落后于时代，而且通常都有旧版本。Docker 是一个快速发展的项目，在过去的几个版本中发生了很多变化。所以总是建议安装最新版本。
## 升级 Docker
当 Docker 在 APT 存储库中更新时，您可以升级 Docker。另一种(也是更好的)方法是从源代码构建。这种方法的教程在标题为*初始:Docker 中的 Docker* 的部分。建议升级到最新的稳定版本，因为较新的版本可能包含关键的安全更新和错误修复。此外，本书中的例子假设 Docker 版本大于 1.0，而 Ubuntu 的标准存储库打包了一个旧得多的版本。
## Mac OSX 和 Windows
Docker 依赖于 Linux 内核，所以我们需要在一个 VM 中运行 Linux，并通过它安装和使用 Docker。Boot2Docker 是由 Docker Inc .构建的一个助手应用，它安装了一个包含专门为运行 Docker 容器而制作的轻量级 Linux 发行版的虚拟机。它还附带了一个客户端，提供了与 Docker 相同的**应用** **程序** **接口** ( **应用编程接口**，但与虚拟机中运行的`docker`守护程序接口，允许我们从 OSX/视窗终端运行命令。要安装 Boot2Docker，请执行以下步骤:
1.  从[http://boot2docker.io/](http://boot2docker.io/)下载最新版本的操作系统的 Boot2Docker。
2.  The installation image is shown as follows:
    ![Mac OSX and Windows](img/4787_01_01.jpg)
3.  运行安装程序，它将安装 VirtualBox 和 Boot2Docker 管理工具。
运行 Boot2docker。第一次运行将要求您提供一个**安全** **外壳** ( **SSH** )密钥密码。脚本的后续运行会将您连接到虚拟机中的 shell 会话。如果需要，后续运行将初始化一个新虚拟机并启动它。
或者，要运行 bootwocker，也可以使用终端命令`boot2docker`:
```
$ boot2docker init # First run
$ boot2docker start
$ export DOCKER_HOST=tcp://$(boot2docker ip 2>/dev/null):2375
```
你只有一次跑`boot2docker init`。它会要求您输入 SSH 密钥密码。该密码随后被`boot2docker ssh`用来验证 SSH 访问。
一旦你初始化了 Boot2Docker，你可以随后使用`boot2docker start`和`boot2docker stop`命令。
`DOCKER_HOST`是一个环境变量，设置后，向 Docker 客户端指示`docker`守护程序的位置。端口转发规则被设置为引导 2 时钟虚拟机的端口 2375(运行`docker`守护程序的地方)。您必须在您想要在 Docker 中使用的每个终端外壳中设置这个变量。
### 注
Bash 允许您通过将子命令包含在````或`$()`中来插入命令。这些将首先被评估，结果将在外部命令中被替换。
如果你是那种爱瞎逛的人，Boot2Docker 默认用户是`docker`，密码是`tcuser`。
boot2Docker 管理工具提供了几个命令:
```
$ boot2docker
Usage: boot2docker [] {help|init|up|ssh|save|down|poweroff|reset|restart|config|status|info|ip|delete|download|version} []
```
使用 boot2Docker 时，`DOCKER_HOST`环境变量必须在终端会话中可用，Docker 命令才能工作。所以，如果你得到`Post http:///var/run/docker.sock/v1.12/containers/create: dial unix /var/run/docker.sock: no such file or directory`错误，这意味着环境变量没有被赋值。当你打开一个新的终端时，很容易忘记设置这个环境变量。对于 OSX 用户来说，为了让事情变得简单，请在您的`.bashrc`或`.bash_profile`外壳中添加以下行:
```
alias setdockerhost='export DOCKER_HOST=tcp://$(boot2docker ip 2>/dev/null):2375'
```
现在，每当你打开一个新的终端或者得到上面的错误，只要运行下面的命令:
```
$ setdockerhost
```
![Mac OSX and Windows](img/4787_01_02_revised.jpg)
此图显示了当您登录到 Boot2Docker 虚拟机时终端屏幕的外观。
### 升级 boot 2 时钟