I'm not 100% sure if this is a numpy or python bug, but the behavior is quite
weird. I've narrowed it down to two simple test cases, one which works and one
which segfaults.
I can create a SharedMemory object, I can create a numpy array backed by it
and read and write to it. I can do the same with a second SharedMemory object
referring to the same space, created using the name. But I can't have a
function return this np array, or accesses will segfault.
### Reproducing code example:
    from multiprocessing import shared_memory
    import numpy as np
    def np_array_from_shm_name(name, shape=(2,)):
        shm = shared_memory.SharedMemory(name=name)
        np_array = np.ndarray(shape, buffer=shm.buf, dtype=np.int32)
        np_array[:] = (0,0)
        print(np_array)  # prints [0 0]
        return np_array
    if __name__ == "__main__":
        shm = shared_memory.SharedMemory(create=True, size=8)
        shm2 = shared_memory.SharedMemory(name=shm.name)
        np_array = np.ndarray((2,), buffer=shm.buf, dtype=np.int32)
        np_array[:] = (0, 0)
        print(np_array)  # prints [0 0]
        np_array = np.ndarray((2,), buffer=shm2.buf, dtype=np.int32)
        np_array[:] = (0, 0)
        print(np_array)  # prints [0 0]
        np_array = np_array_from_shm_name(shm.name)
        np_array[:] = (0, 0)  # segfaults
        print(np_array)
        shm.unlink()
        shm2.unlink()
### Error message:
Thread 1 "python3-dbg" received signal SIGSEGV, Segmentation fault.  
0x00007ffff692e0e9 in INT_setitem (op=0, ov=0x7ffff7491000,
vap=0x7fffd68cbd60) at numpy/core/src/multiarray/arraytypes.c.src:235  
235 numpy/core/src/multiarray/arraytypes.c.src: No such file or directory.  
(gdb) py-bt  
Traceback (most recent call first):  
File "segfault_poc_simple.py", line 66, in  
np_array[:] = (0, 0) # segfaults
### NumPy/Python version information:
1.17.4 3.8.6 (default, Sep 25 2020, 09:36:53)  
[GCC 10.2.0]