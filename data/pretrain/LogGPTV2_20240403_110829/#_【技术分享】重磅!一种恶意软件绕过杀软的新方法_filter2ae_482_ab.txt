虽然Bashware现在启用了WSL并进入开发者模式，但Linux实例仍然不包含任何的文件系统。因此，Bashware的下一步是从Microsoft的服务器下载并解压缩Linux文件系统。正常情况下，用户可以使用“Lxrun”命令行程序来下载linux文件系统（Ubuntu
16.04），并使用/install选项将文件系统安装到在Windows
PC上。Bashware利用Lxrun.exe程序从Microsoft服务器下载Linux文件系统并将其安装到Windows系统上，整个操作看似都是合法的。有趣的是，根据我们的研究发现这个安装过程在某种条件下容易受到网络攻击，这部分内容我们会在下面的内容中进行阐述。
**步骤4：Wine**
现在，Bashware已经在Windows系统上建立了一个完整的Linux环境，并且能够在两个环境中执行任何操作，下一步该怎么办？我们的最终目的是：尽管恶意软件不是跨平台的，我们也可以从Linux程序中运行恶意软件来攻击Windows系统。经过分析和研究，我们发现Winehq项目是一个完美的解决方案，该项目是一个[免费的开源](https://en.wikipedia.org/wiki/Free_and_open-source_software)[兼容层](https://en.wikipedia.org/wiki/Compatibility_layer)，可以允许Microsoft
Windows程序在类Unix[操作系统上运行](https://en.wikipedia.org/wiki/Operating_system)。对于那些不熟悉它的人来说，Wine不是一个模拟器，而是将Windows
API调用转换成POSIX(Portable Operating System
Interface)。这正是我们所需要的，因为使用Wine可以在WSL环境中静默运行Windows恶意软件。Bashware使用Winehq项目功能，并将优化后的Wine项目安装到WSL
Linux环境中。
接下来，Wine对EXE格式的文件进行转换，将其NT系统调用转换为POSIX系统调用。之后，lxcore.sys驱动程序会将这些POSIX系统调用转换到NT系统调用，并将lxcore转换为此进程的实际调用者。这样一来，在Windows操作系统上运行的文件就可以在Linux操作系统执行任何恶意软件的payloads，并绕过大多数安全产品的检测。
**  
**
**结论**
随着“Bashware”完成了上述四个步骤，它成为运行任何恶意软件，绕过最常见的防病毒安全产品、安全检测工具，调试工具等的完美工具。
基于我们的研究发现，Bashware并没有利用WSL设计中的任何逻辑或实现上的漏洞。事实上，WSL的功能设计的很好。而导致Bashware可以运行任意恶意软件的原因主要有以下两个方面：一是在Windows操作系统中这是一种相对较新的技术；二是各种安全厂商缺乏对该技术进行检测的意识。我们认为，安全厂商应该要行动起来了，在支持这项至关重要的新技术的同时也要想法设法去阻止诸如Bashware这样的网络威胁。
Microsoft已采取措施，协助安全厂商处理由WSL引入的新的安全问题，例如Microsoft提供了[Pico
API](https://blogs.msdn.microsoft.com/wsl/2016/11/01/wsl-antivirus-and-firewall-compatibility/)s，这些API接口可由AV公司调用以用来对这些类型的进程进行监控。
**  
**
**进一步分析**
在WSL的安装过程中，
LxRun.exe程序负责从Microsoft服务器上下载和解压缩Linux文件系统。之后，文件系统被命名为lxss.tar.gz，并保存在%APPDAT%目录下的隐藏文件夹中。在获取到文件系统的压缩包之后，LxRun.exe将其解压缩到同一目录中。解压后的文件夹中包含了完整的Linux文件系统，WSL和Bash.exe稍后会使用该文件系统。
虽然微软已经花了很大的努力来保护Linux文件系统本身，例如防止Linux初始化被篡改，防范常见的注入技术等安全保护，但文件系统本身的保护机制呢？
根据我们的研究和分析发现Linux文件系统在安装过程中是存在安全隐患的，如果攻击者在下载后（在提取文件系统压缩包之前）修改文件系统的压缩包，由于系统不会对文件系统的真实性进行检查。因此，它允许攻击者完全更改文件系统并加载任何Linux文件系统。
与实现此技术相关的主要问题是识别存档被解压的确切时间。幸运的是，对于我们来说，微软为下载的文件系统计算出了一个SHA256值，该值在下载过程完成之后（解压文件之前）被保存到一个文件中。但是，这个SHA256散列值除了用于识别文件系统的压缩包是何时被解压之外，并没有其他用途。
当用户希望使用WSL时，他会运行“Bash.exe”，该程序是在用户权限下执行的。在每个运行的WSL中，NTFS分区会被自动挂载到Linux环境中的/mnt中，从而被授予从WSL内读写和执行NTFS的能力，具体如下图所示：
如果一个网络攻击者利用管理员权限启动了Bash.exe程序，那么Bash.exe
以及其子进程都将以管理员的权限来执行，这样在Windows系统中，网络攻击者就可以轻易的绕过UAC，而在Linux系统端，网络攻击者可以通过提取操作以拥有超级管理员的权限，具体如下图所示：
**  
**
**参考文献**
1. Official Microsoft's Blog and GitHub on WSL:
[https://blogs.msdn.microsoft.com/wsl](https://blogs.msdn.microsoft.com/wsl)
[https://github.com/Microsoft/BashOnWindows](https://github.com/Microsoft/BashOnWindows)
2\. [Alex Ionescu's](http://www.alex-ionescu.com/) repository on GitHub:
[https://github.com/ionescu007/lxss](https://github.com/ionescu007/lxss) –
Dedicated to research, code, and various studies of the Windows Subsystem for
Linux used as great source of information and inspiration for this project.
3\. Wine project – a [free open-source](https://en.wikipedia.org/wiki/Free_and_open-source_software)[compatibility
layer](https://en.wikipedia.org/wiki/Compatibility_layer) that allows
[Microsoft Windows programs](https://en.wikipedia.org/wiki/Computer_program)
to run on [Unix-like](https://en.wikipedia.org/wiki/Unix-like) [operating
systems](https://en.wikipedia.org/wiki/Operating_system).