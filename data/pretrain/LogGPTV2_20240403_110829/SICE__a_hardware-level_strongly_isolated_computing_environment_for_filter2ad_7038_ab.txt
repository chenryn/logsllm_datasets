(around 10%) due to the time for the context switching. A
test dedicated to measure the performance of network em-
ulation shows a higher overhead. However, this overhead is
expected to decrease using an optimized implementation of
network emulation for isolated VMs.
1.4 Summary of Contributions
We make several technical contributions in this paper:
• We provide a complete and feasible solution to share
377hardware resources with an isolated execution environ-
ment that does not rely on any host software. Instead,
it relies on a TCB that is around an order of magnitude
smaller than the state-of-the-art systems.
• We provide a novel technique that allows concurrent
execution of the isolated environments with the un-
trusted host environment.
• We provide attestation to the integrity of the isolated
workloads without revealing sensitive information about
the workloads to untrusted host software.
• We implement a prototype of SICE on an AMD plat-
form. We use this prototype to evaluate the perfor-
mance overhead introduced by SICE.
The rest of this paper is organized as follows. Section 2
provides background information on SMM. Section 3 dis-
cusses our assumptions and threat model. Section 4 presents
SICE in detail. Section 5 presents our prototype implemen-
tation. Section 6 presents our experimental evaluation. Sec-
tion 7 presents related work, and Section 8 concludes this
paper with some future research directions. Finally, The
Appendix discusses SICE’s portability to Intel platforms.
2. BACKGROUND
In this section, we brieﬂy give some background informa-
tion on the System Management Mode (SMM).
Commodity x86 architecture supports the SMM as one of
its operating modes. The processor enters the SMM when
receiving an SMI. Upon an SMI, the processor saves its state
to a dedicated state save map and switches to the SMM. To
return from the SMM, the special instruction RSM restores
the saved processor state and resumes normal execution.
SMM code is stored in a designated memory called SM-
RAM. To provide protection of the SMM code and data,
both AMD and Intel provide the capability of locking the
SMRAM. When the SMRAM is locked, all accesses to it,
except from within the SMM, are prevented. All interrupts,
including non-maskable ones, are disabled upon entering the
SMM. Thus, no other code running on the system can in-
terfere with the SMI handler.
Current hardware can support up to 4 GB of SMRAM.
There are two types of SMRAM: the ASeg, which is located
at a ﬁxed low address, and the TSeg which is located at a
variable base and has a variable size. SICE uses TSeg due to
the ﬂexibility it oﬀers. Deﬁning the SMRAM location and
range diﬀers slightly between AMD and Intel architectures.
In the following, we take a closer look at AMD architecture,
on which this paper focuses.
The AMD architecture deﬁnes the TSeg memory range us-
ing two Model Speciﬁc Registers (MSRs) that are local to
each processor core. The ﬁrst is SMM_Addr, which speciﬁes
the SMRAM base address, while the second is SMM_Mask,
which speciﬁes its range. Since MSRs are local to each pro-
cessor core, all cores have to set their MSRs to provide com-
plete protection of the SMRAM.
The SMMLOCK bit in the HWCR MSR can be set to prevent
changing the TSeg range. Moreover, the AMD architecture
uses a password mechanism to protect the modiﬁcation of
the SMMLOCK bit. When the SMRAM is unlocked, writes
to the SMM_KEY MSR set the 64-bit password. When the
SMRAM is locked, writing the correct password to the same
MSR clears the SMMLOCK bit.
3. THREAT MODEL AND ASSUMPTIONS
Threat Model: SICE aims at defending against all mali-
cious activities by software running in the legacy host that
are targeted at compromising the isolation oﬀered to the iso-
lated environment (e.g., malicious activity that result from
exploiting a vulnerability in the hypervisor). Speciﬁcally,
SICE protects the isolated environment from all types of
unauthorized memory accesses or any modiﬁcation to its
execution environment. The protection starts from the mo-
ment the isolated environment is initialized by SICE. Upon
initialization, the initial image of the isolated workload, which
is loaded by the legacy host, is measured so that SICE can
further attest to its integrity.
We consider the following attacks out of the scope of this
paper: Attacks aimed at the availability of SICE (e.g., deny-
ing its network access), and those that directly exploit vul-
nerabilities of the isolated environment through legitimate
communication channels. Such attacks are not speciﬁc to
the isolation mechanism, and should be addressed by other
techniques such as keep-alive messages and patching the vul-
nerabilities. Moreover, SICE is not responsible for securing
the hardware services provided by the host. Thus, the iso-
lated workload should use other techniques to achieve this
objective (e.g., encrypting its network traﬃc).
Side-channel attacks are also out of the scope of this pa-
per. Adopting SICE prevents cache side-channels because
the hardware automatically clears the cache upon entering
and exiting from the SMM. However, these attacks in general
are not unique to our approach and require further research.
Assumptions: We assume that our platform is physically
secure (e.g., locked in a server room) so that an adversary
cannot launch any hardware attack. Moreover, we assume
that the target platform is equipped with trusted comput-
ing hardware, including the Core Root of Trust Measure-
ment (CRTM) and Trusted Platform Module (TPM) [29].
This allows the attestation to the integrity of key software
components (e.g., the SMI handler).
We assume that the SMM is properly isolated from other
software running on the system and the hardware provides
the SMRAM with proper isolation from all unauthorized
memory accesses (e.g., cache poisoning, Direct Memory Ac-
cess (DMA)). Recent incidents showed that attackers were
able to subvert the SMRAM using cache poisoning [6, 33].
Fortunately, such attacks cannot be mounted on AMD plat-
forms due to its SMRAM cache protection and can be easily
defeated on Intel platforms using proper setting of the Sys-
tem Management Range Register (SMRR) [13].
4. SICE DESIGN
In this section, we present the design of SICE. The objec-
tive is to enable hardware-level strongly isolated computing
environments that run in parallel with the legacy host on
the same hardware platform.
Implementation requirements: To implement SICE, the
SMI handler needs to be modiﬁed to include SICE’s code.
Recently, most hardware vendors use the BIOS to lock the
SMRAM to prevent potential SMM misuse. Thus, SICE
requires hardware vendors to allow adding its code to the
SMI handler before locking the SMRAM.
The legacy host (e.g., the hypervisor) is required to add
an interface that invokes an SMI to trigger SICE. Hardware
management functions provided by the legacy host (e.g.,
378Legacy 
Host
Isolated 
Workload
Security 
Manager
Isolated 
Environment
SMI 
Handler
Protected
Trusted
Protected Memory (SMRAM)
Hardware
Figure 1: SICE Architecture
hardware device drivers) should be modiﬁed to use this in-
terface to provide its services to the isolated environment.
Note that the legacy host may refuse to invoke an isolated
environment or deny it some services, thus threatening its
availability. However, these attacks are easily detectable by
SICE and its remote users (e.g., from the lack of response
of the isolated workload), and can then be thwarted by re-
placing the faulty legacy host.
SICE Architecture: Figure 1 shows the architecture of
SICE. It consists of three components: The SMI handler, the
security manager, and the isolated workload. The security
manager and the isolated workload constitute the isolated
environment. SICE enables the isolated environment and
the legacy host to share the physical platform’s resources.
The security manager is a thin software layer that con-
ﬁnes the isolated workload.
It has limited functionalities
such as handling exceptions and managing page tables. The
initial image of the security manager should be loaded to
the SMRAM, along with the SMI handler, upon the system
initialization. Thus, we assume trust in both the SMI han-
dler and the security manager based on the system’s trusted
boot, which can be attested to later using the TPM.
The isolated workload is a user-provided system that runs
in the isolated environment. It can be any software, ranging
from a single program to a complete VM. The only restric-
tions on this software are that it does not use more than
4GB of memory (due to SMRAM constraints) and that it
does not manipulate hardware peripherals directly.
When the isolated environment is not actively running,
its code and data are securely stored in the SMRAM (as
shown in Figure 1). However, the SMM is a limited ex-
ecution mode that is not suitable for running the isolated
environment. For instance, code execution inside the SMM
is slower than the protected mode [2]. Moreover, some hard-
ware functionalities (e.g., starting a hardware assisted VM)
are not supported in the SMM. Thus, SICE only uses the
SMM to prepare and enter the isolated environment. SICE
uses novel techniques to move the security manager and the
isolated workload out of the SMRAM after the isolated en-
vironment is initialized.
In the following, we discuss SICE in a time-sharing mode,
where the legacy host and the isolated environment time
share the physical platform. We then present the multi-core
mode, where the legacy host and the isolated environment
run in parallel using multi-core processors.
4.1 Time-sharing Mode
In the time-sharing mode, SICE provides two important
features: (1) fast context switch between the legacy host
and the isolated environment (in the magnitude of few tens
of microseconds), and (2) large protected memory range for
the isolated workload (up to 4GB). The fast context switch
allows the isolated workload to receive its input data and
send its output to and from the legacy host without posing
signiﬁcant overhead on the system performance. The large
protected memory range enables the isolated environment
to securely keep its state across the context switches.
4.1.1 Initializing the Isolated Environment
Both the security manager and the SMI handler are ini-
tialized when the physical platform is booted. When an iso-
lated workload is ready to be started, the legacy host ﬁrst
loads the initial image of this workload to a speciﬁc memory
range. Then, it triggers SICE using an SMI. The SMI han-
dler then measures the initial image of the isolated workload
and copies it to the protected SMRAM. Details on measur-
ing and attesting to the isolated environment are discussed
in Section 4.3.
4.1.2 Entering the Isolated Environment
Figure 2 shows the process of entering the isolated envi-
ronment. Whenever the legacy host requires the isolated
workload to run, it triggers another SMI. The SMI then
switches the processor’s execution environment to the SMM
and the execution jumps to the SMI handler. The SMI han-
dler then prepares the isolated environment by changing the
saved processor state so that the security manager, instead
of the legacy host, runs after the processor returns from the
SMM. The SMI handler also stores the processor state of
the legacy host so that it can resume execution after the
isolated environment ﬁnishes its execution.
In the time-sharing mode, SICE gives the isolated envi-
ronment full control of the physical platform as soon as it
runs. Thus, it changes the processor state (e.g., interrupt
descriptors, system call handlers) so that only the security
manager will have control after the SMI handler returns.
Unfortunately, the SMM cannot change most of the criti-
cal processor states (e.g., the interrupt descriptor table (IDT)
register and the CR3 register). To overcome this challenge,
the SMI handler relocates the code pointed to by the current
processor state through modifying the page tables. Since the
CR3 register is not writable, the SMI handler modiﬁes the
ﬁrst level page table pointed to by the CR3 so that it di-
rectly points to the security manager.
It also ﬂushes the
Translation Lookaside Buﬀer (TLB) to avoid potential race
conditions with the cached page tables.
Before the SMI handler returns, we need to ensure that
both the security manager and the isolated workload are
accessible to the processor after it returns from the SMM.
As shown in Figure 1, both the security manager and and
the isolated workload are stored in the SMRAM before the
isolated environment is entered. These two components need
to be moved out of the SMRAM so that they can run after
the processor returns from the SMM.
A straightforward solution is to copy the security man-
ager and the isolated workload out of the SMRAM to an
unprotected memory. However, this will introduce an unac-
ceptable performance overhead.
To address this problem, we use the ability of AMD pro-
cessors to resize the SMRAM during the system runtime.
This feature, discussed in Section 2, relies on a password-
protected mechanism to clear the SMM lock so that the
SMM_Addr and the SMM_Mask registers can be updated.
379SMI
Return from SMM
Isolated 
Workload
Security 
Manager
Host
SMI 
handler
Host
Isolated 
Workload
Security 
Manager
SMI 
handler
Host
SMRAM
Hardware
SMRAM
Hardware
Isolated 
Workload
Security 
Manager
Hardware
SMI 
handler
SMRAM
a) Normal execution 
environment
b) Isolated environment 
c) Isolated execution 
initialization
environment
Figure 2: Entering SICE from the legacy host (actively running components are shaded): a) An SMI triggers
SICE operations. b) The SMI handler prepares the isolated environment and the new SMRAM layout. c)
After entering the isolated environment, the security manager prevents the isolated workload from accessing
the legacy host memory.
Upon the initialization of the system, SICE generates a
64-bit random number, sets it as the password for lock-
ing/unlocking the SMRAM, and stores it inside the SM-
RAM. Before entering the isolated environment, the SMI
handler uses this password to unlock the SMRAM and mod-
ify its protection range (by modifying the SMM_Addr and the
SMM_Mask registers) to exclude both the security manager
and the isolated workload. Thus, they can be accessed by
the processor after the SMI handler returns.
As shown in Figure 2, the SMRAM protection remains
for the SMI handler while the isolated workload runs. This
guarantees that the SMI handler (including the SMRAM
password) can never be accessed by any other software run-
ning on the system, including the isolated workload.
A subtle issue needs to be clariﬁed. To guarantee full
control over the system, the isolated environment should
run in the highest privileged level after the SMI returns.
However, this requires the legacy host to trigger the SMI
from within the highest privileged level.
In other words,
the SMI cannot be triggered by a guest VM. Otherwise, the
isolated environment will return to the context of a guest
VM controlled by the legacy host.
To verify that the SMI is triggered by the highest privi-
leged level, SICE requires the legacy host to disable virtual-
ization by clearing the SVME bit in the EFER register before
triggering the SMI. The SMI handler veriﬁes that this bit is
clear. Otherwise, it will not enter the isolated environment
and keep the SMRAM protection for its memory.
4.1.3 Managing the Isolated Workload
Since the isolated workload is provided by the user, it is
not trusted by SICE. Hence, it should not be allowed to
tamper with the hardware conﬁguration or access memory
regions that belong to the security manager or legacy host.
Unfortunately, commodity hardware architecture cannot
assign more than 4GB of memory to the SMRAM. Thus,
using the SMRAM to protect the legacy host memory from
the isolated workload will not be a feasible solution due to
its restriction on the memory capacity of the legacy host.
To address this challenge, the security manager plays the
role of a hypervisor and runs the isolated workload in the
context of a guest VM. Therefore, the isolated workload’s
execution environment is restricted so that it cannot exe-
cute privileged instructions. Moreover, the security manager
crafts the page tables of the isolated workload so that it can
access a limited speciﬁc range of physical memory. Thus,
the isolated workload cannot access any memory range that
belongs to either the security manager or the legacy host.
4.1.4 Exiting the Isolated Environment
To allow the legacy host and the isolated environment to
eﬃciently share the hardware resources, SICE provides a
technique to securely and properly exit the isolated environ-
ment and return the execution back to the legacy host.
To return back to the legacy host, the isolated environ-