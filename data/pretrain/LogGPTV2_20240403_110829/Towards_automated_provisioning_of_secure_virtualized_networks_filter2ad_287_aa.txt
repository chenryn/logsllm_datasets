title:Towards automated provisioning of secure virtualized networks
author:Serdar Cabuk and
Chris I. Dalton and
HariGovind V. Ramasamy and
Matthias Schunter
Towards Automated Provisioning of Secure Virtualized
Networks
Serdar Cabuk and Chris I. Dalton
Hewlett-Packard Laboratories
Bristol, United Kingdom
{serdar.cabuk,cid}@hp.com
HariGovind Ramasamy and Matthias
Schunter
IBM Zurich Research Laboratory
Switzerland 8803
{hvr,mts}@zurich.ibm.com
ABSTRACT
We describe a secure network virtualization framework that
helps realize the abstraction of Trusted Virtual Domains
(TVDs), a security-enhanced variant of virtualized network
zones. The framework allows groups of related virtual ma-
chines running on separate physical machines to be con-
nected together as though there were on their own separate
network fabric and, at the same time, helps enforce cross-
group security requirements such as isolation, conﬁdential-
ity, security, and information ﬂow control. The framework
uses existing network virtualization technologies, such as
Ethernet encapsulation, VLAN tagging, and VPNs, and com-
bines and orchestrates them appropriately to implement
TVDs. Our framework aims at automating the instantiation
and deployment of the appropriate security mechanism and
network virtualization technologies based on an input secu-
rity model that speciﬁes the required level of isolation and
permitted network ﬂows. We have implemented a prototype
of the framework based on the Xen hypervisor. Experimen-
tal evaluation of the prototype shows that the performance
of our virtual networking extensions is comparable to that
of the standard Xen conﬁguration.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General—
security and protection (e.g., ﬁrewalls); C.2.1 [Computer-
Communication Networks]: Network Architecture and
[Computer-
Design—network
Communication Networks]: Local and Wide-Area Net-
works Operations—access schemes
topology;
C.2.5
General Terms
Security
Keywords
Network security, network virtualization, automated secu-
rity provisioning, security policies, trusted virtual domains
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’07, October 29–November 2, 2007, Alexandria, Virginia, USA.
Copyright  2007  ACM  978-1-59593-703-2/07/0010...$5.00.
1.
INTRODUCTION
Virtualization allows the real hardware conﬁguration of
a system to be abstracted away. A computer uses a layer
of software, called the Virtual Machine Monitor (VMM),
to provide the illusion of real hardware for multiple virtual
machines (VMs).
Inside each VM, the operating system
(often called the guest OS) and applications run on the VM’s
own virtual resources such as virtual CPU, virtual network
card, virtual RAM, and virtual disks. A VMM can be hosted
directly on the computer hardware (e.g., Xen [4]) or within
a host operating system (e.g., VMware).
Today’s virtual network implementations for VMMs are
usually virtual switches or bridges that connect the virtual
network cards of all VMs to the actual physical network card
of the physical machine. All VMs can potentially see all traf-
ﬁc; hence, no isolation or other security guarantees can be
given. While that level of security may be suﬃcient for in-
dividual and small enterprise purposes, it is certainly not
suﬃcient for larger-scale, security-critical operations. For
example, in a virtualized data center that hosts services be-
longing to multiple customers on the same physical infras-
tructure, accidental data leakage between VMs belonging to
diﬀerent customers is unacceptable.
Our focus in this paper is security-enhanced network vir-
tualization, which (1) allows groups of related VMs running
on separate physical machines to be connected together as
though they were on their own separate network fabric, and
(2) enforces cross-group security requirements such as isola-
tion, conﬁdentiality, integrity, and information ﬂow control.
The goal is to group related VMs (e.g., VMs belonging to
the same customer in a data center) distributed across sev-
eral physical machines into virtual enclave networks, so that
each group of VMs has the same protection as if the VMs
were hosted on a separate physical LAN. Our solution for
achieving this goal also takes advantage (whenever possible)
of the fact that some VMs in a group may be co-hosted on
the same hardware; it is not necessary to involve the physi-
cal network during information ﬂow between two such VMs.
We describe a secure network virtualization framework
that helps realize the abstraction of Trusted Virtual Do-
mains (TVDs) [6] by guaranteeing reliable isolation and ﬂow
control between domain boundaries. The framework is based
on existing and well-established network virtualization tech-
nologies such as Ethernet encapsulation, VLAN tagging, and
virtual private networks (VPNs). Our main contributions
are (1) combining these technologies to realize TVDs, which
are security-enhanced variants of virtualized network zones,
235and (2) orchestrating them through a management frame-
work that is oriented towards automation. In particular, our
solution aims at automatically instantiating and deploying
the appropriate security mechanisms and network virtualiza-
tion technologies based on an input security model, which
speciﬁes the required level of isolation and permitted net-
work ﬂows.
The remainder of the paper is organized as follows. In Sec-
tion 2, we provide a sampling of previous solutions for net-
work virtualization, at both the Ethernet and the TCP/IP
layer. In Section 3, we describe our security objectives and
present the TVD security model that we use for secure net-
work virtualization. We introduce the networking compo-
nents required for our framework in Section 4 and describe
how they can be orchestrated to enforce TVD policies. In
Section 5, we cover the dynamic aspects of TVD deployment
including TVD establishment, population, and admission
control. In Section 6, we describe a Xen-based [4] prototype
implementation of our secure virtual networking framework
and report our performance results in Section 7. Finally, we
conclude and discuss future extensions in Section 8.
2. RELATED WORK
Previous work on virtualizing physical networks can be
roughly grouped into two categories: those based on Eth-
ernet virtualization and those based on TCP/IP-level vir-
tualization. Although both categories include a substantial
amount of work (e.g., [1, 3, 5, 9, 10, 15, 19, 20, 21]), few
studies have an explicit security focus.
Ethernet Virtualization: Ethernet virtualization aims at
transporting multiple Ethernet connections over a single phys-
ical medium. There are a large number of Ethernet tunnel-
ing protocols [10]. Local transport over a “trusted” wire is
usually multiplexed using the well-established VLAN stan-
dard IEEE 802.1Q-2003. It adds virtual LAN tags to each
Ethernet segment and enables separation of multiple net-
works. An example for high-performance Inﬁniband VLANs
is given in [11]. In wide-area networks, VLAN tags are of-
ten not preserved. To overcome these restrictions, Ethernet
encapsulation has been proposed as an alternative [1, 19,
9, 10]. Ethernet packets (including tags) are wrapped into
TCP/IP packets. This enables the embedding of a virtual
Ethernet network into a wide-area network. Unfortunately,
the performance and scalability of the resulting system are
limited.
Overlay Networks and TCP/IP Virtualization: Overlay
networking provides application-level network virtualization
among participating hosts. An overlay network typically
consists of hosts (physical or virtual), routers, and tunnels
that serve as virtual links between the hosts. Several over-
lay designs have been introduced in the literature: Plan-
etNet VNET [15, 5], X-Bone [20], Resilient Overlay Net-
works [3], and the JXTA project [21]. The designs share the
common goal of creating a virtualized network layer with
a customized topology mapped onto the actual physical in-
frastructure. They diﬀer in the underlying technology that
enables the mapping, management of the technology, and
the terminology used.
Overlay networks are most useful for implementing a vir-
tual network topology on top of the physical topology. How-
ever, they are not suitable for systems with strong separa-
tion, isolation, and ﬂow control requirements. As an exam-
ple, although the PlanetLab VNET provides separation of
network packets originating from diﬀerent slices, the sepa-
ration is merely enforced using the OS network services [5].
Similarly in JXTA, peergroups are used to group network
peers and enforce certain isolation properties [21]. However,
it is the network administrator’s responsibility to enforce
ﬂow control policies across group boundaries as JXTA does
not impose any speciﬁc ﬂow control schemes for the sake of
ﬂexibility. Other shortcomings of overlay networks are com-
plex management models, binary intra-group ﬂow policies,
and lack of inter-group ﬂow control policies.
The VIOLIN project addresses a number of these deﬁcien-
cies and enhances the traditional TCP/IP overlay networks
to create mutually isolated distributed environments [12,
16]. The main idea is to provide each subsystem with a
virtual IP world having its own address space. In particu-
lar, a VIOLIN is created on top of an overlay network (such
as PlanetLab [5]) and consists of virtual hosts, switches,
and routers. Communication between these entities is en-
abled through a User-Mode Linux (UML) implementation
enhanced with UDP-tunneling for inter-host communica-
tion1. The VIOLIN model provides isolation between dif-
ferent VIOLINs, which in turn enhances mobility through
location-independent addressing. Further, the model en-
ables the customization of each VIOLIN with the desired
technology (e.g., IPv6) without requiring a global deploy-
ment. A major disadvantage of VIOLIN is that the model
completely disallows inter-VIOLIN communication rather
than adopting a policy-based ﬂow control scheme. In prac-
tice, it may be desirable for VIOLINs belonging to diﬀerent
organizations to interact with each other under certain ﬂow
control policies enforced at each VIOLIN boundary.
Previous solutions also oﬀered network virtualization
schemes that do not rely on overlay networking. Spawning
networks, employ nested programmable networks to form
a hierarchy of virtual networks that are isolated from each
other [7, 8, 13]. The main idea is to enable parent networks
to spawn child networks that utilize the parents’ resources.
The child networks then may or may not choose to inherit
certain characteristics from their parents. The advantages
are that the child networks can employ a specialized net-
working technology (e.g., a mobile-IP network) while inher-
iting basic network functionality from their parent. Further,
they can spawn child networks of their own, forming a forest
of networks.
Spawning networks utilize the Genesis network kernel [13]
that enables the life-cycle management of each spawned net-
work including the spawning capability. The Genesis kernel
is a complex virtual networking kernel that needs to be in-
stalled on every physical domain that will potentially host
spawning networks. The major downside is that this re-
quires major changes to the existing network infrastructure.
3. SECURITY OBJECTIVES AND POLICIES
We describe the security objectives of network virtualiza-
tion using a security model that enables the automatic en-
forcement of the objectives. The policies used in this model
are based on a security-enhanced variant of virtualized net-
work zones called Trusted Virtual Domains (TVDs) [6]. The
policies deﬁne integrity, conﬁdentiality, isolation, and infor-
mation ﬂow control requirements.
1A Xen-based solution has recently been introduced [17].
3.1 Trusted Virtual Domains
A TVD is represented by a set of distributed virtual pro-
cessing elements (VPE) (e.g., virtual machines) and a com-
munication medium interconnecting the VPEs, and provides
a policy and containment boundary around those VPEs.
VPEs within each TVD can usually communicate freely and
securely with each other. At the same time, they are suﬃ-
ciently isolated from outside VPEs, including those belong-
ing to other TVDs. Here, isolation loosely refers to the re-
quirement that a dishonest VPE in one TVD cannot send
messages to a dishonest VPE in another TVD, unless the
inter-TVD policies explicitly allow such an information ﬂow.
Each TVD has an associated infrastructure whose pur-
pose is to provide a uniﬁed level of security to member
VPEs, while restricting the interaction with VPEs outside
the TVD to pre-speciﬁed, well-deﬁned means only. Uniﬁed
security within a domain is obtained by deﬁning and enforc-
ing membership requirements that the VPEs have to satisfy
before being admitted to the TVD and for retaining the
membership. Each TVD deﬁnes rules regarding in-bound
and out-bound network traﬃc. Their purpose is to restrict
communication with the outside world.
3.2 Security within a TVD
Within a TVD, all VPEs can freely communicate with
each other while observing TVD-speciﬁc integrity and con-
ﬁdentiality requirements. For this purpose, intra-TVD com-
munication may take place only over an authenticated and
encrypted channel (e.g., IPsec), or alternatively, a trusted
network2. The trusted network alternative may be reason-
able in some situations, e.g., within a data center.
{c,i,s}
TVD security requirements may have multiple facets: in-
ternal protection, membership requirements, etc. Given a
set T of trusted virtual domains, one way of formalizing in-
ternal protection is to deﬁne a domain-protection function
P : T → 2
, which describes the subset of security ob-
jectives (conﬁdentiality, integrity protection, and isolation)
assigned to a particular TVD. Informally, integrity means
that a VPE cannot inject “bad” messages and pretend they
are from another VPE. Conﬁdentiality refers to the require-
ment that two honest VPEs (in the same TVD or diﬀerent
TVDs) can communicate with each other without an eaves-
dropper learning the content of the communication. Lastly,
isolation refers to the requirement that resources used by
two VPEs are logically separated and there is no unintended
direct information ﬂow3.
Admission control and membership management are im-
portant aspects of TVDs. A TVD should be able to restrict
its membership to machines that satisfy a given set of condi-
tions. For example, a TVD may require certiﬁcates stating
that the platform will satisfy certain properties [18] before
allowing the platform to join the TVD. One way of formal-
izing the membership requirements is to deﬁne a function
M : T → 2P , where (P,≤) is a lattice of security proper-
ties. A machine m with a set pm of security properties may
be permitted to join the TVD t iﬀ ∀p ∈ M (t) : ∃p(cid:2) ∈ pm
2A network is called trusted with respect to a TVD security
objective if it is trusted to enforce the given objective trans-
parently. For example, a server-internal Ethernet can often
be assumed to provide conﬁdentiality without any need for
encryption.
3Addressing covert channels that utilise indirect information
ﬂow would exceed the scope of this paper.
from/to T V Dα T V Dβ T V Dγ
Pαγ
T V Dα
T V Dβ
0
T V Dγ
1
∗
1
∗
0
Pγα
∗
0
∗
1
Pγβ
* Implemented in our Xen-based prototype (Section 6).
Figure 1: Example Flow Control Policy Matrix for
Three TVDs.
such that p(cid:2) ≥ p.
In other words, m is permitted to join
t iﬀ there is at least one property of m that satisﬁes each
security requirement of t.
Member VPEs may be required to prove their eligibility
on a continual basis either periodically or on-demand. For
example, members may be required to possess certain cre-
dentials such as certiﬁcates or may be required to prove that
they satisfy some integrity properties (property-based attes-
tation [18]). The conditions may vary for diﬀerent types of
VPEs. For example, servers and workstations may have dif-
ferent TVD membership requirements. Some VPEs may be
part of more than one TVDs, in which case they would have
to satisfy the membership requirements of all the TVDs they
are part of. For a VPE to simultaneously be a member of
multiple TVDs, the individual TVD membership require-
ments must be conﬂict-free.
3.3 Security across TVDs
Inter-TVD security objectives are independently enforced
by each of the individual TVDs involved. To facilitate such
independent enforcement, global security objectives are de-
composed into per-TVD security policies. The advantage
of such a decentralized enforcement approach is that each
TVD is shielded from security failures in other TVDs. Se-
curity objectives may take diﬀerent forms; here, we focus on
information ﬂow control among the TVDs.
An information ﬂow control matrix is a simple way of for-
malizing the system-wide ﬂow control objectives. Figure 1
shows a sample matrix for three TVDs: T V Dα, T V Dβ, and
T V Dγ . Each matrix element represents a policy specifying
both permitted inbound and outbound ﬂows between a pair
of TVDs, as enforced by one of the TVDs. The 1 elements
along the matrix diagonal convey the fact that there is free
information ﬂow within each TVD. The 0 elements in the
matrix are used to specify that there should be no infor-
mation ﬂow between two TVDs, e.g., between T V Dα and
T V Dβ.
Information ﬂow control from one TVD to another is spec-
iﬁed by two policies, with each TVD independently enforc-
ing one. For example, Pαβ, which represents the information
ﬂow policy from T V Dα to T V Dβ, would consist of two sub-
policies: (1) P in
αβ, which would be enforced by the recipient
TVD, T V Dβ, and is concerned with the integrity protec-
tion of T V Dβ, and (2) P out
αβ , which would be enforced by
the sender TVD, T V Dα, and is concerned with the conﬁ-
dentiality protection of T V Dα. The distribution of policy
enforcement to both TVDs means that the recipient TVD
does not have to rely solely on elements of the sender TVD
to enforce rules regarding its inbound traﬃc.
Care must be taken to ensure that the pair-wise TVD
policies speciﬁed in the information ﬂow control matrix do
not accidentally contradict each other or allow undesired in-
direct ﬂow. E.g., if Pαβ = 0 in Figure 1, then Pαγ and Pγβ
should not be inadvertedly 1. Otherwise, indirect informa-
tion ﬂow from T V Dα to T V Dβ would be unconstrained,
which would contradict with Pαβ.
4. SECURE VIRTUAL NETWORKS
In this section, we describe the aims of our secure net-
work virtualization framework and introduce the network-
ing components forming the framework. We then present
the composition of the components to form TVDs and to