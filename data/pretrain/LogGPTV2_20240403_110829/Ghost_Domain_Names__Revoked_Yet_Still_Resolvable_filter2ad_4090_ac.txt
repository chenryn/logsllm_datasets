a
m
o
d
i
f
o
e
p
y
t
c
i
f
i
c
e
p
s
a
 2000
 0
03/08
05/08
07/08
09/08
Days in August 2011
(a) Resolving of domain names at open DNS resolvers over time.
The dashed vertical line indicates the original TTL expiration time for
[1-2].ghostdomain.info after they are removed from domain
registry.
(b) Geographic view of open DNS resolvers that are still haunted by ghost
domain names one week later.
Figure 3. Measurement of ghost domain names at open DNS resolvers.
ber of resolvers that can resolve a revoked legitimate do-
main name (1.ghostdomain.info), however, rapidly
falls down after its TTL expires. In contrast, a ghost domain
name (2.ghostdomain.info) can be resolved by most
of DNS resolvers as time goes by, even after its TTL expira-
tion time. More than 93% of DNS resolvers still reply with a
positive response for resolving the ghost domain name after
its TTL has expired, meaning all these resolvers are vulner-
able to the ghost domain name attack. Even one week after
TTL expiration, the ghost domain names are still resolvable
by more than 70% of all DNS resolvers we collected. Fig-
ure 3b provides a geographic view of all the haunted DNS
resolvers at this time point. (We discuss later why the num-
ber of DNS resolvers that resolve a ghost domain name, i.e.
the number of haunted DNS resolvers, gradually declines as
time goes by.)
We note that after TTL expiration, a revoked legitimate
domain name can still be resolved by approximately 10%
of DNS resolvers, rather than 0% as we might expect.
This phenomenon is due to extremely loose enforcement
of cache update policy at certain resolvers that still employ
very old versions of DNS implementations. They accept
all referral sections and overwrite cached entries without
any validation. These resolvers can be haunted by a ghost
domain name even without the sophisticated attack as de-
scribed in Section 3, but simply with periodical queries of a
ghost domain name.
4.4. Cost of Maintaining Ghost Domain Names
As we have shown the vulnerability of ghost domain
in popular DNS implementations and widely deployed In-
ternet DNS resolvers, a natural question is about the cost
of launching and maintaining ghost domain names. Since
the actions required by ghost domain attacks are sending
queries to targeted resolvers, the main cost of maintaining
a ghost domain name is network bandwidth consumption.
An attacker needs to send plenty of DNS queries to refresh
the cached entries of a ghost domain name, and the amount
of such effort is proportional to the number of the targeted
resolvers. For each individual targeted resolver, the band-
width consumption of the ghost domain attack is mainly de-
termined by the refreshing interval, which is related to two
factors: the TTL value of the delegation data for the ghost
domain and the refreshing interval per TTL. The refreshing
interval relates to the TTL value because to keep the cached
data alive, at least one refreshing operation is needed before
a cached entry expires.
A na¨ıve attacker might choose a very large TTL value of
the delegation data with the hope of maintaining the ghost
domain in a resolver’s cache before refreshing it. This strat-
egy saves bandwidth, but it is not practical since most of
DNS resolvers enforce a maximum TTL limitation. We
found empirically that most of our experimental resolvers
have a maximum TTL limitation around one day (16.35%)
or one week (79.81%), which means the TTL value of the
ghost domain is limited.
For any given TTL value selected by the attacker, the
bandwidth consumption is directly related to how often at-
tackers refreshes in one TTL. Figure 4 shows the effects of
ghost domain exploitation with different TTL values and re-
freshing intervals. From the results, we observe that if the
attacker ensures that one refreshment is sent for each quarter
of TTL, additional refreshing effort can increase the effec-
 20000
 18000
 15000
 10000
l
s
r
e
v
o
s
e
r
f
o
r
e
b
m
u
N
interval = 900
interval = 450
interval = 225
 20000
 18000
 15000
 10000
l
s
r
e
v
o
s
e
r
f
o
r
e
b
m
u
N
interval = 1800
interval = 900
interval = 450
 20000
 18000
 15000
 10000
l
s
r
e
v
o
s
e
r
f
o
r
e
b
m
u
N
interval = 7200
interval = 3600
interval = 1800
 0
03/08
05/08
07/08
09/08
Days in August 2011
(a) TTL = 1800
 0
03/08
05/08
07/08
09/08
Days in August 2011
(b) TTL = 3600
 0
03/08
05/08
07/08
09/08
Days in August 2011
(c) TTL = 14400
Figure 4. Establishment of ghost domain names with different TTL values and refreshing intervals.
tiveness, but not signiﬁcantly. This is reasonable because
the attacker only needs to ensure one successful renewal
before the ghost domain expires. refreshing more often is
useful only to reduce the chance of packet losses. We also
see that the curves of T T L/2 refreshing interval declines
faster, since only one refresh within the TTL period might
occasionally fail, so a timely renewal of the ghost domain
cannot be ensured.
4.5. Other Factors that Affect The Lifetime of Ghost
Domains
To
illustrate
the
Through all our experiment results such as those shown
in Figure 4 and Figure 3a, we observe that the numbers of
exploited resolvers continuously decrease over time. Al-
though this declining trend is affected by the attackers’ ac-
tions (such as the refreshing frequency discussed above),
the types of the recursive resolvers turn out to affect the
lifetime of ghost domain as well.
impact
resolver
types, we analyze the experimental data of probing
www.google.com to study when and how frequently
a cached entry (in this case,
the CNAME record of
www.google.com as it has a large original TTL) gets
evicted. Knowing how a cache record could be evicted in a
resolver helps us to infer why a ghost domain could be lost.
By tracking the TTL variations of the objective entry, we
ﬁnd that the experimental resolvers can be sorted into four
types based on the different TTL variations of the objective
entry.
recursive
of
• Stable resolvers (Figure 5a). As expected, the TTL
value monotonically decreases to zero, then go back to
the original value.
• Resolvers that occasionally become unreachable (Fig-
ure 5b). Unreachable periods derive the gap in the mid-
dle of the line. Ghost domains could fail to be renewed
during such periods.
• Proxies (Figure 5c). The TTL values form multiple
lines, which means there are multiple cache servers in
the backend. Ghost domains are easy to be lost after
churn of backend servers.
• Resolvers that occasionally lose cached entries (Fig-
ure 5d). This may be caused by several factors: cache
replacement, cache ﬂushing, or even reset of resolvers.
These factors also could cause the loss of ghost do-
mains.
In our experiments, we ﬁnd that over 85% of resolvers
that fail to keep ghost domains belong to the last two types,
which are inherently easy to lose cached entries. Less than
10% of failed resolvers come from the set of stable re-
solvers, which means stable resolvers are less likely lose
cached entries, including ghost domains. Since over 65% of
our experimental resolvers are stable from current observa-
tion of the TTL variations, we infer that a ghost domain can
stay alive for a long time. In fact, after one week, over 70%
of experimental resolvers still keep the ghost domains we
created and the decline trend is slow. We are currently ex-
ploring methods to identify the types of resolvers and study
their individual reaction to different ghost domain exploita-
tions.
5. Discussion
In this section, we discuss a few possible solutions to
ﬁx the problem of ghost domain names. We also discuss
the current practices in some of the implementations that
are not vulnerable to this problem. Finally, we conclude
the section with a discussion of DNSSEC [2], which avoids
this problem implicitly through its strict delegation require-
ments.
5.1. Defense Approaches
The ghost domain exploitation needs to launch a query
to the target resolver. Thus a basic defense strategy is to
 800000
 600000
 800000
 600000
TTL(s)
 400000
TTL(s)
 400000
04/08
06/08
08/08
10/08
Days in August 2011
(a) Stable resolver
 200000
 0
 800000
 600000
04/08
06/08
Days in August 2011
(b) Resolver with timeout
 200000
 0
 800000
 600000
TTL(s)
 400000
TTL(s)
 400000
 200000
 0
 200000
 0
04/08
06/08
08/08
10/08
04/08
06/08
08/08
10/08
Days in August 2011
(c) Proxy
Days in August 2011
(d) Unstable resolver
Figure 5. TTL variations in different types of resolvers
have DNS administrators restrict the service range of the
DNS resolver. Also, administrators can routinely ﬂush DNS
cache to purge possible ghost domains.
These strategies however are not fundamental solutions.
The root cause of the ghost domain problem is that the cur-
rent DNS cache update policy allows authoritative servers
to continuously renew their own delegation data in re-
solvers by themselves. Then once a domain delegates a
sub-domain, there is no guarantee that the delegation can
be revoked.
Intuitively, there are several approaches for correcting
this problem, and we consider the following three:
1. Strengthening the bailiwick rule – DNS resolver im-
plementation should tighten the bailiwick rule so that
a recursive resolver only accepts a zone’s delegation
data from authoritative server of its parent zone.
2. Reﬁning the credibility rule – Another possible solu-
tion is to reﬁne credibility to disallow cache overwrit-
ing when received records have the same trust level as
cached data.
3. Allowing updates with the exception of the TTL value
– Since the ghost domain attack achieves the goal of
preserving revoked domain by refreshing the delega-
tion data with a new authoritative server name and thus
a new TTL, one possible solution is to allow the cache
update with exception of the TTL value.
The ﬁrst solution derives from the semantics of the baili-
wick rule. The purpose of bailiwick rule is to restrict au-
thoritative servers so that they can only give records in their
own range. From this point of view, an authoritative server
has no right to change delegation data of itself since the del-
egation should be dominated by its parent zone.
However, applying the strict bailiwick rule might cause
performance and management issues. One such issue is re-
silience to authority mismatches. Authority mismatch is a
type of DNS misconﬁguration in which the delegation data
is different in the parent zone than in the child zone. Al-
though the DNS speciﬁcation [20] requires that delegation
data must be consistent, previous studies [30] [27] show this
conﬁguration error is common in practice. While the cur-
rent cache update policy is resilient to such error, the strict
bailiwick rule will ignore delegation data from the child
zone, and thus might make some of authoritative servers
unusable.