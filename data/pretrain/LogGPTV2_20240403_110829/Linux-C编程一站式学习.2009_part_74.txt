echo
$? -ne 0'
$DIR
-d
 parameter
 second parame
second
$DIR_NAME l; then
一般把函数定义都写在脚本的前面，
"$DIR"
 list 
eter is.
。各目录名通过命令行参数传入，脚本逐个测试各目录是否存
 2>&1
.Creating it now..."
$2"
事实上，
就像定义变量一样，
函数就像是迷你脚本，
，函数中的位置参数相当于函数的局部
，把函数调用和其它命令写在脚本
只是给foo这个名字-
，调用函数时可以传任
一个定义
606
如
---
## Page 607
4.bash启动脚本
注意is_directory()返回0表示真返回1表示假。
done
fi
全国嵌入式人才培训基地
起始页
上一级
6.Shell脚本的调试方法
下一页
---
## Page 608
set-x和set +x分别表示启用和禁用-x参数，这样可以只对脚本中的某一段进行跟踪调试。
第三种方法是在脚本中用set命令启用或禁用参数
二是在脚本开头提供参数
使用这些选项有三种方法，
Shell提供了一些用于调试脚本的选项，如下所示:
6.Shell脚本的调试方法 请点评
5.Shell脚本语法
V
n
上一页
页
提供跟踪执行信息，将执行的每一条命令和结果依次打印出来
一边执行脚本，一边将执行过的脚本命令打印到标准错误输出
读一遍脚本中的命令但不执行，用于检查脚本中的语法错误
fi 
#! /bin/sh -x
$ sh -x ./script.sh
if 
#！
exit 1
echo
一是在命令行提供参数
6.Shell脚本的调试方法
全国嵌入式人才培训基地
全国嵌入式人才培训基地
第31章 Shell脚本
起始页
一级
第32章正则表达式
608
---
## Page 609
6. Shell脚本的调试方法
5.练习
4. awk
3. sed
2.基本语法
第 32 章 正则表达式 请点评
1.引言
目
在C语言中使用正则表达式
部分IIl.Linux系统编程
全国嵌入式人才培训基地
第32章正则表达式
全国嵌入式人才培训基地
起始页
上一级
609
---
## Page 610
查找其中包含IP地址的行：
9]{1,3.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}。
zA-z0-9_.-]+@[a-zA-z0-9_·-]+\.[a-zA-z0-9_·-]+,
一个模式，这就是正则表达式（Regular Expression）
规定一些特殊语法表示字符类、
这两个简单的例子可以看出，
如果要用grep查找—
要求y是0-9的数字，IP地址的每一部分可以有1-3个y字符。
是email地址的字符串。再比如，
这个模式的不全是合法的email地址，
号，email地址的每一部分可以有-
式的字符串（也就是email地址）
以前我们用grep在一个文件中找出包含某些字符串的行，
1.引言
L二
，数量限定符（Quantifier）：邮件地址的每一部分可以有一个或多个x字符，IP地址的每一部
·字符类（Character Class）：如上例的x和y，它们在模式中表示一个字符，但是取值范围是
关系，还有位置限定符（Anchor）的概念，将在下面介绍。
各种字符类以及普通字符之间的位置关系：例如邮件地址分三部分，
分可以有1-3个y字符
一类字符中的任意一个。
页
abcde
123.4234.045.678
1234.234.04.5678
192.168.1.1
，IP地址分四部分，
请点评
.234.04.5678
3.1.1
'[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' testfile 
一个模式，
，表示采用Extended正则表达式语法。grep的正则表达式，
用.隔开，每一部分都可以用字符类和数量限定符描述。为了表示位置
要表示一个模式至少应该包含以下信息：
如何表示这个模式，
、数量限定符和位置关系，然后用这些特殊语法和普通字符一起表示
一个或多个x字符，
 要求x字符可以是字母、数字、下划线、小数点或减
，但至少可以做一次初步筛选，
全国嵌入式人才培训基地
第 32 章 正则表达式
1.引言 
下一节介绍正则表达式的语法，我们先看看正则
这一类字符串，
 例如email地址的正则表达式可以写成[a-
比如在头文件中找出一个宏定义。其
而不是一个特定的字符串呢？从
用普通字符@和.隔
当然符合
610
下二
---
## Page 611
F，表示只搜索固定字符串而不搜索正则表达式模式，不会按正则表达式的语法解释后面的参数。
第 32章 正则表达式
是一个广泛的概念，而不是某一种工具或编程语言的特性。
也都支持正则表达式，
以说，
台的程序中做，
串
192.168.1.1符合上述模式，
被Shell解释掉。
含义（例如）
注意正则表达式参数用单引号括起来了，
程序验证一下是不是合法的email地址，这个工作可以在网页的Javascript中做，
一个重要的应用是验证用户输入是否合法，
所以不会被找出来。
目前不支持正则表达式的编程语言实在很少见。除了编程语言之外，很多UNIX命令和工具
例如PHP、Perl、Python、Ruby、Java或C,
“只有用单引号括起来才能保证这些字符原封不动地传给grep命令，而不会
，由三个.隔开的四段组成，
全国嵌入式人才培训基地
，因为正则表达式中用到的很多特殊字符在Shell中也有特殊
 例如用户通过网页表单提交自己的email地址,
起始页
上一级
 每段都是1到3个数字，
，所有这些语言都支持正则表达式，
，所以这一行被找出来
也可以在网站后
2.基本语法
这一行包
就需要
下一页
三
含
---
## Page 612
希望读者仿照上一节的例子,
种类型，而Shell脚本变量都是字符串。同样道理,
2.基本语法 请点评
符合POSIX正则表达式规范，
但各种正则表达式规范的基本概念都是相通的。本节介绍egrep(1)所使用的正则表达式，
语法并不相同，表达能力也各不相同，
我们知道C的变量和Shell脚本变量的定义和使用方法很不相同，
表 32.2.数量限定符
表32.1.字符类
{}
￥
+
字符
[[:xxx: ]]
二
字符
紧跟在它前面的单元
应精确匹配N次 
紧跟在它前面的单元
应匹配零次或多次
紧跟在它前面的单元
应匹配一次或多次
紧跟在它前面的单元
应匹配零次或一次
紧跟在它前面的单元
类
号中的字符之外的任意一
位于括号内的开头，
在括号内表示字符范围
匹配括号中的任意一
匹配任意一
义
一个字符
一边学习语法，
含
义
[1-9][0-9]{2}匹配从100到999的整数
zA-z_]+[a-zA-z_0-9]*匹配C语言的标识符
[0-9][0-9]*匹配至少一位数字，
[a-zA-Z0-9_
式中是一
[0-9]?\.[0-9]匹配0.0、2.3、
一个字符
 有的正则表达式规范引入很多扩展，
全国嵌入式人才培训基地
匹配除括
第 32 章 正则表达式
一个字符
2.基本语法 
个特殊字符，所以需要用\转义一下，取字面
，各种工具和编程语言所使用的正则表达式规范的
配x1、y1
此[~xy]1可以匹配a1、b1但不匹
[^xy]匹配除xy之外的任一字符，
字
[0-9a-fA-F]可以匹配一位十六进制数
[abc]a可以匹配ad、bd或cd 
【I:digit:]匹配一个数字
举例
，表达能力也不相同，C的变量有各
.5等，
等价于[0-9]+，[a-
举例
一个字
由于.在正则表达
能表达更复杂的模式，
因
，它大致
612
下二
贝
---
## Page 613
9]{1,3}\.[0-9]{1,3}查找IP地址，找到这两行
位置限定符可以帮助grep更准确地查找，
找没什么意义，
a*匹配0个或多个a，
查找a*这个模式的结果是三行都被找出来了
件的内容是
再次注意grep找的是包含某一模式的行，而不是完全匹配某一模式的行。再举个例子，如果文本文
^[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}$
表32.3.位置限定符
13341284104. 5678
B
\b
V
字符
aad
V
aad
{N,M}
{,M}
{N,}
ef
 egrep 
S
ON
6
匹配单词开头或结尾的位置
匹配单词结尾的位置
匹配单词开头的位置
匹配行末的位置
匹配行首的位置
多M次
应匹配至少N次，最
紧跟在它前面的单元
应匹配最多M次
紧跟在它前面的单元
应匹配至少N次
一般是把a*作为正则表达式的一部分来用。
而第三行包含0个a,
含义
 testfile
[0-9],1}相当于[0-9]?
配IP地址 
[1-9]10-9]{2,}匹配三位以上（含三位）的整数
例如上
;s匹配位于一行结尾的；号，^s匹配空行
，所以也包含了这一模式。单独用a*这样的正则表达式做查
~Content匹配位于
一节我们用[0-9]{1,3}[0-9]{1,3}\.[0-
，但不匹配ethernet、tenth
-行开头的content
举例
但不匹
1234.234.04.5678
---
## Page 614
应该遵照Basic规范来写正则表达式。
以上介绍的是grep正则表达式的Extended规范，
如果用
1.引言
-行过滤掉了。
表 32.4.其它特殊字符
()
符
字
连接两个子表达式，
定符
将正则表达式的一部分括起来组成-
符
转义字符，
，特殊字符转义为普通字符
普通字符转义为特殊字 
含义
表示或的关系
全国嵌入式人才培训基地
起始页
上一级
Basic规范也有这些语法，只是字符?+{}丨（)应解释
n(o|either)匹配no或neither 
来匹配
殊字符.写成\.以及\写成\就当作普通字符
普通字符Welcome to the world of regexp!
Hello World
abc
123
$.sed 's/bc/-&-/'
456
$,sed -n '/abc/p' testfile
$ sed '/abc/p' testfile
-4-~5~6
2
abc
123
3
sed '/abc/d' testfile
's///g' testfile
's/\([0-9])\([0-9])/-\1-~\2~/＇ testfile
—.........-
 testfile
.............
616