adds intrusion resilience to existing DBMSs without re-
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:30:32 UTC from IEEE Xplore.  Restrictions apply. 
Read intensive transactions, W=10
Read/write intensive transactions, W=10
%
,
d
a
e
h
r
e
v
O
%
,
d
a
e
h
r
e
v
O
 25
 20
 15
 10
 5
 0
 40
 35
 30
 25
 20
 15
 10
 5
 0
local connection
network connection
Oracle
Sybase
DBMS
PostgreSQL
Read intensive transactions, W=1
local connection
network connection
Oracle
Sybase
DBMS
PostgreSQL
%
,
d
a
e
h
r
e
v
O
%
,
d
a
e
h
r
e
v
O
 25
 20
 15
 10
 5
 0
 40
 35
 30
 25
 20
 15
 10
 5
 0
local connection
network connection
Oracle
Sybase
DBMS
PostgreSQL
Read/write intensive transactions, W=1
local connection
network connection
Oracle
Sybase
DBMS
PostgreSQL
Figure 4. The inter-transaction dependency tracking overhead differs depending on whether the
workload is read-intensive (left column) or read/write intensive (right column). It is also affected
by the total footprint size, which is determined by the warehouse factor W . The upper row corre-
sponds to the large footprint case (W = 10 and low database cache hit ratio) and the lower row cor-
responds to the small footprint case (W = 1 and high database cache hit ratio).
quiring any modiﬁcations to their internals, and a demon-
stration of this framework’s portability to three different
DBMSs, Oracle, Sybase, and PostgreSQL. Moreover, we
also show the performance overhead of this portable ap-
proach to intrusion-resilient DBMS is quite reasonable, be-
tween 6% to 13% for a typical on-line transaction process-
ing environment. We believe this framework is one of the
ﬁrst, if not the ﬁrst portable intrusion resilience implemen-
tation framework that is also efﬁcient and fully operational.
There are several directions we are pursuing currently.
First, we plan to build a full-scale interactive database dam-
age repair tool that allows a DBA to interact with the trans-
action dependency graph through a GUI, and explore the
damage perimeter by conducting “what if” analysis. This
tool will make the database damage repair process more
ﬂexible, accurate and convenient to use. Second, we are
planning to build a transaction dependency tracking ap-
pliance that can be put in front of a DBMS server, and
performs SQL query interception and re-writing without
any additional conﬁguration. Such an appliance minimizes
the disruption to existing IT infrastructure, and thus of-
fers a smoother migration path. Third, the current query
re-writing algorithms can be further optimized to reduce
the tracking overhead. For example, a single trans dep ta-
ble may become a bottleneck when the DBMS server runs
on a multiprocessor machine; the tr id attribute probably
should be put in the middle of each row, rather than at the
left or right end, to minimize the additional logging penalty;
keeping a tr id attribute per attribute rather than per row
is required to minimize false sharing and to support sup-
pression of false dependency, and how to implement it efﬁ-
ciently deserves more investigation. Finally, the current pro-
totype does not support intrusion detection. We plan to de-
velop a DBMS-speciﬁc intrusion detection tool and inte-
grate it with the proposed intrusion resilience mechanism to
form an end-to-end database security solution.
Acknowledgement
This research is supported by NSF awards ACI-0083497,
CCF-0342556, ACI-0234281, SCI-0401777, USENIX stu-
dent research grants, as well as fundings from Reuters In-
formation Technology Inc., Computer Associates Inc., Na-
tional Institute of Standards and Technologies, Siemens,
and Rether Networks Inc.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:30:32 UTC from IEEE Xplore.  Restrictions apply. 
 400
 350
 300
 250
 200
 150
 100
 50
 0
 0
 100
 200
 300
s
n
o
i
t
c
a
s
n
a
r
t
k
c
a
b
d
e
l
l
o
r
f
o
r
e
b
m
u
N
s
n
o
i
t
c
a
s
n
a
r
t
k
c
a
b
d
e
l
l
o
r
f
o
r
e
b
m
u
N
 160
 140
 120
 100
 80
 60
 40
 20
 0
 0
W=2
tracking all dependencies
discarding false dependencies
 500
 600
 700
 400
T_detect
W=5
tracking all dependencies
discarding false dependencies
s
n
o
i
t
c
a
s
n
a
r
t
d
e
v
a
s
f
o
e
g
a
t
n
e
c
r
e
P
s
n
o
i
t
c
a
s
n
a
r
t
d
e
v
a
s
f
o
e
g
a
r
n
e
c
r
e
P
 100
 80
 60
 40
 20
 0
 0
 100
 80
 60
 40
 20
 0
 0
 100
 200
 300
W=2
tracking all dependencies
discarding false dependencies
 500
 600
 700
 400
T_detect
W=5
tracking all dependencies
discarding false dependencies
 100
 200
 300
 400
T_detect
 500
 600
 700
 100
 200
 300
 400
T_detect
 500
 600
 700
Figure 5. Number of transactions that need to be rolled back during the repair process (left column)
and percentage of saved benign transactions (right column) versus Tdetect under different W values.
References
[1] Dhruv Pilania, Tzi-cker Chiueh, “Design, Implementation,
and Evaluation of an Intrusion-Resilient Database System”,
Technical Report TR-123, ECSL, Department of Computer
Science, SUNY at Stony Brook.
[2] Ningning Zhu, Tzi-cker Chiueh, “Design, Implementation,
and Evaluation of Repairable File Service”, in Proc. of DSN
2003, June 2003.
[3] Jay Wylie, Michael Bigrigg, John Strunk, Gregory Ganger,
Han Kiliccote, Pradeep Khosla, “Survivable Information
Storage Systems”, IEEE Computer, 2(1), August 2000, pp.
61–68.
[4] J. Strunk, G. Goodson, M. Scheinholtz, Craig Soules, Gre-
gory Ganger, “Self-Securing Storage: Protecting Data in
Compromised Systems”, in Proc. of OSDI 2000, October
2000.
[5] Tripwire Open Source Project, http://www.tripwire.org.
[6] P. Ammann, S. Jajodia, P. Liu, “Recovery from Malicious
Transactions”, IEEE Transactions on Knowledge and Data
Engineering, Vol. 15, No. 5, 2002, pp. 1167–1185.
[7] P. Liu, “Architectures for Intrusion Tolerant Database Sys-
tems”, in Proc. of 18th Annual Computer Security Applica-
tions Conference, December 2002, pp. 311-320.
[8] P. Liu, “ITDB: An Attack Self-Healing Database System
Prototype”, in Proc. of DISCEX 2003, Volume 2, April 2003,
pp. 131–133.
[9] M. Kifer, P. Lewis, A. Bernstein, Database and Transaction
Processing: An Application Oriented Approach, Addison-
Wesley, 2002.
[10] P. A. Bernstein, V. Hadzilacos, and N. Goodman, Concur-
rency Control and Recovery in Database Systems, Addison-
Wesley, 1987.
[11] Tzi-cker Chiueh, Ningning Zhu, and Dhruv Pilania, “How to
Repair a Compromised Information System Quickly”, Tech-
nical Report TR-135, ECSL, Department of Computer Sci-
ence, SUNY at Stony Brook, January 2003.
[12] TPC-C benchmark, http://www.tpc.org/tpcc/default.asp.
[13] GraphViz — an open source graph drawing software,
http://www.research.att.com/sw/tools/graphviz/.
[14] Oracle9i LogMiner http://otn.oracle.com/products/oracle9i/
daily/oct25.html.
[15] PostgreSQL http://www.postgresql.org.
[16] Sybase
Adaptive
Server
Enterprise
http://www.sybase.com/products/databaseservers/ase.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:30:32 UTC from IEEE Xplore.  Restrictions apply.