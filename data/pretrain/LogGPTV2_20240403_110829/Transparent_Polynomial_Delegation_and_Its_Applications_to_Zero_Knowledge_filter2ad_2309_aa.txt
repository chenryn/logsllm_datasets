title:Transparent Polynomial Delegation and Its Applications to Zero Knowledge
Proof
author:Jiaheng Zhang and
Tiancheng Xie and
Yupeng Zhang and
Dawn Song
2020 IEEE Symposium on Security and Privacy
Transparent Polynomial Delegation and Its
Applications to Zero Knowledge Proof
Jiaheng Zhang∗, Tiancheng Xie∗, Yupeng Zhang† and Dawn Song∗
University of California, Berkeley,
Emails: {jiaheng zhang, tianc.x, dawnsong}@berkeley.edu, PI:EMAIL
∗
†
Texas A&M University
Abstract
if the circuit
We present a new succinct zero knowledge argument
scheme for layered arithmetic circuits without
trusted
setup. The prover time is O(C + n log n) and the proof
size is O(D log C + log2 n) for a D-depth circuit with n
inputs and C gates. The veriﬁcation time is also succinct,
O(D log C + log2 n),
is structured. Our
scheme only uses lightweight cryptographic primitives
such as collision-resistant hash functions and is plausibly
post-quantum secure. We implement a zero knowledge
argument system, Virgo, based on our new scheme and
compare its performance to existing schemes. Experiments
show that it only takes 53 seconds to generate a proof
for a circuit computing a Merkle tree with 256 leaves, at
least an order of magnitude faster than all other succinct
zero knowledge argument schemes. The veriﬁcation time
is 50ms, and the proof size is 253KB, both competitive to
existing systems.
Underlying Virgo is a new transparent zero knowledge
veriﬁable polynomial delegation scheme with logarithmic
proof size and veriﬁcation time. The scheme is in the
interactive oracle proof model and may be of independent
interest.
I. INTRODUCTION
Zero knowledge proof (ZKP) allows a powerful prover to
convince a weak veriﬁer that a statement is true, without
leaking any extra information about the statement beyond its
validity. In recent years, signiﬁcant progress has been made to
bring ZKP protocols from purely theoretical interest to prac-
tical implementations, leading to its numerous applications in
delegation of computations, anonymous credentials, privacy-
preserving cryptocurrencies and smart contracts.
Despite of these great success, there are still some limi-
tations of existing ZKP systems. In SNARK [60], the most
commonly adopted ZKP protocol
though the
proof sizes are of just hundreds of bytes and the veriﬁcation
times are of several milliseconds regardless of the size of
the statements, it requires a trusted setup phase to generate
structured reference string (SRS) and the security will be
broken if the trapdoor is leaked.
in practice,
To address this problem, many ZKP protocols based on
different techniques have been proposed recently to remove
the trusted setup, which are referred as transparent ZKP
protocols. Among these techniques, ZKP schemes based on
the doubly efﬁcient interactive proof proposed by Goldwasser
et al. in [42] (referred as GKR protocol in this paper) are
particularly interesting due to their efﬁcient prover time and
sublinear veriﬁcation time for statements represented as struc-
tured arithmetic circuits, making it promising to scale to
large statements. Unfortunately, as of today we are yet to
construct an efﬁcient transparent ZKP system based on the
GKR protocol with succinct1 proof size and veriﬁcation time.
The transparent scheme in [69] has square-root proof size and
veriﬁcation time, while the succinct scheme in [70] requires a
one-time trusted setup. See Section I-B for more details.
Our contributions. In this paper, we advance this line of
research by proposing a transparent ZKP protocol based on
GKR with succinct proof size and veriﬁcation time, when the
arithmetic circuit representing the statement is structured. The
prover time of our scheme is particularly efﬁcient, at least an
order of magnitude faster than existing ZKP systems, and the
veriﬁcation time is merely tens of milliseconds. Our concrete
contributions are:
• Transparent zero knowledge veriﬁable polynomial dele-
gation. We propose a new zero knowledge veriﬁable poly-
nomial delegation (zkVPD) scheme without trusted setup.
Compared to existing pairing-based zkVPD schemes [59],
[72], [73], our new scheme does not require a trapdoor and
linear-size public keys, and eliminates heavy cryptographic
operations such as modular exponentiation and bilinear
pairing. Our scheme may be of independent interest, as
polynomial delegation/commitment has various applications
in areas such as veriﬁable secret sharing [6], proof of
retrievability [71] and other constructions of ZKP [55].
• Transparent zero knowledge argument. Following the
framework proposed in [73], we combine our new zkVPD
protocol with the GKR protocol efﬁciently to get a trans-
parent ZKP scheme. Our scheme only uses light-weight
cryptographic primitives such as collision-resistant hash
functions and is plausibly post-quantum secure.
• Implementation and evaluation. We implement a ZKP
system, Virgo, based on our new scheme. We develop
optimizations such that our system can take arithmetic
circuits on the ﬁeld generated by Mersenne primes, the
operations on which can be implemented efﬁciently using
integer additions, multiplications and bit operations in C++.
We plan to open source our system.
1“succinct” denotes poly-logarithmic in the size of the statement C.
© 2020, Tiancheng Xie. Under license to IEEE.
DOI 10.1109/SP40000.2020.00052
859
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:59:28 UTC from IEEE Xplore.  Restrictions apply. 
A. Our Techniques
Our main technical contribution in this paper is a new
transparent zkVPD scheme with O(N log N ) prover time,
O(log2 N ) proof size and veriﬁcation time, where N is the
size of the polynomial. We summarize the key ideas behind
our construction. We ﬁrst model the polynomial evaluation
as the inner product between two vectors of size N: one
deﬁned by the coefﬁcients of the polynomial and the other
deﬁned by the evaluation point computed on each monomial
of the polynomial. The former is committed by the prover
(or delegated to the prover after preprocessing in the case of
delegation of computation), and the later is publicly known to
both the veriﬁer and the prover. We then develop a protocol
that allows the prover to convince the veriﬁer the correctness
of the inner product between a committed vector and a public
vector with proof size O(log2 N ), based on the univariate
sumcheck protocol recently proposed by Ben-Sasson et al.
in [14] (See Section II-D). To ensure security, the veriﬁer needs
to access the two vectors at some locations randomly chosen
by the veriﬁer during the protocol. For the ﬁrst vector, the
prover opens it at these locations using standard commitment
schemes such as Merkle hash tree. For the second vector,
however,
takes O(N ) time for the veriﬁer to compute
its values at
these locations locally. In order to improve
the veriﬁcation time, we observe that the second vector is
deﬁned by the evaluation point of size only (cid:2) for a (cid:2)-variate
polynomial, which is O(log N ) if the polynomial is dense.
Therefore, this computation can be viewed as a function that
takes (cid:2) inputs, expands them to a vector of N monomials
and outputs some locations of the vector. It
is a perfect
case for the veriﬁer to use the GKR protocol to delegate the
computation to the prover and validate the output, instead of
computing locally. With proper design of the GKR protocol,
the veriﬁcation time is reduced to O(log2 N ) and the total
prover time is O(N log N ). We then turn the basic protocol
into zero knowledge using similar techniques proposed in [5],
[14]. The detailed protocols are presented in Section III.
it
B. Related Work
Zero knowledge proof. Zero knowledge proof was introduced
by Goldwasser et al. in [43] and generic constructions based
on probabilistically checkable proofs (PCPs) were proposed in
the seminal work of Kilian [51] and Micali [58] in the early
days. In recent years there has been signiﬁcant progress in
efﬁcient ZKP protocols and systems. Following earlier work
of Ishai [48], Groth [45] and Lipmaa [53], Gennaro et al. [40]
introduced quadratic arithmetic programs (QAPs), which leads
to efﬁcient
implementations of SNARKs [12], [17], [24],
[35], [38], [60], [68]. The proof size and veriﬁcation time
of SNARK are constant, which is particularly useful for real-
world applications such as cryptocurrencies [11] and smart
contract [23], [52]. However, SNARKs require a per-statement
trusted setup, and incurs a high overhead in the prover running
time and memory consumption, making it hard to scale to
large statements. There has been great research for generating
the SRS through multi-parity secure computations [13] and
making the SRS universal and updatable [46], [55].
√
Many recent works attempt to remove the trusted setup
and construct transparent ZKP schemes. Based on “(MPC)-
in-the-head” introduced in [31], [41], [49], Ames et al. [5]
proposed a ZKP scheme called Ligero. It only uses symmetric
key operations and the prover time is fast in practice, but the
proof size is O(
C) and the veriﬁcation time is quasi-linear
to the size of the circuit. Later, it is categorized as interactive
oracle proofs (IOPs), and in the same model Ben-Sasson
et al. built Stark [9], transparent ZKP in the RAM model
of computation. Their veriﬁcation time is only linear to the
description of the RAM program, and succinct (logarithmic)
in the time required for program execution. Recently, Ben-
Sasson et al. [14] proposed Aurora, a new ZKP system in the
IOP model with the proof size of O(log2 C). Our new zkVPD
and ZKP schemes fall in the IOP model.
In the seminal work of [42], Goldwasser et al. proposed an
efﬁcient interactive proof for layered arithmetic circuits, which
was extended to an arugment system by Zhang et al. in [74]
using a protocol for veriﬁable polynomial delegation. Later,
Zhang et al. [75], Wahby et al. [69] and Xie et al. [70] made
the argument system zero knowledge by Cramer and Damgard
transformation [36] and random masking polynomials [32].
The scheme of [69], Hyrax, is transparent, yet the proof size
and veriﬁcation time are O(
n) where n is the input size of
the circuit; the schemes of [72] and [70] are succinct for struc-
tured circuits, but require one-time trusted setup. The prover
time of the GKR protocol is substantially improved in [34],
[64], [67], [69], [75], and recently Xie et al. [70] proposed a
variant with O(C) prover time for arbitrary circuits.
√
Other transparent ZKP schemes based on different tech-
niques include discrete-log-based schemes [8], [21], [28], [44],
hash-based schemes [22] and lattice-based schemes [7]. See
Section V-C for detailed asymptotic complexity and practical
performance of state-of-the-art systems with implementations.
Veriﬁable polynomial delegation. Veriﬁable polynomial del-
egation (VPD) allows a veriﬁer to delegate the computation
of polynomial evaluations to a powerful prover, and validates
the result in time that is constant or logarithmic to the size
of the polynomial. Earlier works in the literature include [18],
[39], [50]. Based on [50], Papamanthou et al. [59] propose
a protocol for multivariate polynomials. Later in [73], Zhang
et al. extend the scheme to an argument of knowledge using
powers of exponent assumptions, allowing a prover to commit
to a multivariate polynomial, and open to evaluations at points
queried by the veriﬁer. In [72], Zhang et al. further make the
scheme zero knowledge. These schemes are based on bilinear
maps and require a trusted setup phase that generates linear-
size public keys with a trapdoor.
In a concurrent work, B¨unz et al. [26] propose another
transparent polynomial commitment scheme without trusted
setup. The scheme utilizes groups of unknown order and the
techniques are different from our construction. The prover and
veriﬁer time are O(N ) and O(log N ) modulo exponentiation
in the group and the proof size is O(log N ) group elements.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:59:28 UTC from IEEE Xplore.  Restrictions apply. 
860
Concretely, the proof size is 10-20KB for a circuit with 220
gates when compiled to different ZKP systems [26, Section 6],
and the prover time and the veriﬁcation time are not reported.
Comparing to our scheme, we expect the prover and veriﬁer
time in our scheme are faster, while our proof size is larger,
which gives an interesting trade-off.
II. PRELIMINARIES
We use λ to denote the security parameter, and negl(λ)
to denote the negligible function in λ. “PPT” stands for
probabilistic polynomial time. For a multivariate polynomial f,
its ”variable-degree” is the maximum degree of f in any of its
variables. We often rely on polynomial arithmetic, which can
be efﬁciently performed via fast Fourier tranforms and their
inverses. In particular, polynomial evaluation and interpolation
over a multiplicative coset of size n of a ﬁnite ﬁeld can be
performed in O(n log n) ﬁeld operations via the standard FFT
protocol, which is based on the divide-and-conquer algorthim.
A. Interactive Proofs and Zero-knowledge Arguments
Interactive proofs. An interactive proof allows a prover P to
convince a veriﬁer V the validity of some statement through
several rounds of interaction. We say that an interactive proof
is public coin if V’s challenge in each round is independent
of P’s messages in previous rounds. The proof system is
interesting when the running time of V is less than the time
of directly computing the function f. We formalize interactive
proofs in the following:
Deﬁnition 1. Let f be a Boolean function. A pair of interactive
machines (cid:3)P,V(cid:4) is an interactive proof for f with soundness
 if the following holds:
• Completeness. For every x such that f (x) = 1 it holds that
Pr[(cid:3)P,V(cid:4)(x) = 1] = 1.
• -Soundness. For any x with f (x) (cid:5)= 1 and any P∗
that Pr[(cid:3)P∗
,V(cid:4) = 1] ≤ 
Zero-knowledge arguments. An argument system for an
NP relationship R is a protocol between a computationally-
bounded prover P and a veriﬁer V. At the end of the protocol,
V is convinced by P that there exists a witness w such that
(x; w) ∈ R for some input x. We focus on arguments of
knowledge which have the stronger property that if the prover
convinces the veriﬁer of the statement validity, then the prover
must know w. We use G to represent the generation phase
of the public parameters pp. Formally, consider the deﬁnition
below, where we assume R is known to P and V.
Deﬁnition 2. Let R be an NP relation. A tuple of algorithm
(G,P,V) is a zero-knowledge argument of knowledge for R
if the following holds.
• Correctness. For every pp output by G(1λ) and (x, w) ∈ R,
it holds
(cid:3)P(pp, w),V(pp)(cid:4)(x) = 1
• Soundness. For any PPT prover P, there exists a PPT
extractor ε such that for every pp output by G(1λ) and any
x, the following probability is negl(λ):
Pr[(cid:3)P(pp),V(pp)(cid:4)(x) = 1 ∧ (x, w) /∈ R|w ← ε(pp, x)]
• Zero knowledge. There exists a PPT simulator S such that
for any PPT algorithm V∗
, auxiliary input z ∈ {0, 1}∗
,
(x; w) ∈ R, pp output by G(1λ), it holds that
(z, pp)(cid:4)(x)) ≈ SV∗
View((cid:3)P(pp, w),V∗
(x, z)