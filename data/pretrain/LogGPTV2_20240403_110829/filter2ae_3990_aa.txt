### 说明
Nuxeo-RCE的分析是来源于Orange的这篇文章[How I Chained 4 Bugs(Features?) into RCE on Amazon
Collaboration System](http://blog.orange.tw/2018/08/how-i-chained-4-bugs-features-into-rce-on-amazon.html)，中文版见[围观orange大佬在Amazon内部协作系统上实现RCE](https://www.anquanke.com/post/id/156078)。在Orange的这篇文章虽然对整个漏洞进行了说明，但是如果没有实际调试过整个漏洞，看了文章之后始终还是难以理解，体会不深。由于Nuxeo已经将源码托管在Github上面，就决定自行搭建一个Nuxeo系统复现整个漏洞。
### 环境搭建
整个环节最麻烦就是环境搭建部分。由于对整个系统不熟，踩了很多的坑。
#### 源码搭建
由于Github上面有系统的源码，考虑直接下载Nuxeo的源码搭建环境。当Nuxeo导入到IDEA中，发现有10多个模块，导入完毕之后也没有找到程序的入口点。折腾了半天，也没有运行起来。
考虑到之后整个系统中还涉及到了`Nuxeo`、`JBoss-Seam`、`Tomcat`，那么我就必须手动地解决这三者之间的部署问题。但在网络上也没有找到这三者之间的共同运行的方式。对整个三个组件的使用也不熟，搭建源码的方式也只能夭折了。
#### Docker远程调试
之后同学私信了orange调试方法之后，得知是直接使用的`docker+Eclipse Remote
Debug`远程调试的方式。因为我们直接从Docker下载的Nuxeo系统是可以直接运行的，所以利用远程调试的方式是可以解决环境这个问题。漏洞的版本是在Nuxeo的分支8上面。整个搭建步骤如下：
  1. 拉取分支。从Docker上面拉取8的分支版本，`docker pull nuxeo:8`。
  2. 开启调试。修改`/opt/nuxeo/server/bin/nuxeo.conf`文件，关闭`#JAVA_OPTS=$JAVA_OPTS -Xdebug -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=n`这行注释，开始远程调试。
  3. 安装模块。进入到`/opt/nuxeo/server`目录下运行`./bin/nuxeoctl mp-install nuxeo-jsf-ui`(这个组件和我们之后的漏洞利用有关)
  4. 导出源代码。由于需要远程调试，所以需要将Docker中的源代码导出来。从Docker中到处源代码到宿主机中也简单。
    1. 进入到Docker容器中，将`/opt/nuxeo/server`下的文件全部打包
    2. 从Docker中导出上一步打包的文件到宿主机中。
  5. 以`Daemon`的方式运行Docker环境。
  6. 用IDEA直接导入`server/nxserver/nuxeo.war`程序，这个war包程序就是一个完整的系统了，之后导入系统需要的jar包。jar来源包括`server/bin`、`server/lib`、`server/nxserver/bundles`、`server/nxserver/lib`。如果导入的war程序没有报错没有显示缺少jar包那就说明我们导入成功了。
  7. 开启IDEA对Docker的远程调试。进入到`Run/Edit Configurations/`配置如下：  
  8. 导入程序源码。由于我们需要对`nuxeo`、`jboss-seam`相关的包进行调试，就需要导入jar包的源代码。相对应的我们需要导入的jar包包括：`apache-tomcat-7.0.69-src`、`nuxeo-8.10-SNAPSHOT`、`jboss-seam-2-3-1`的源代码。
至此，我们的整个漏洞环境搭建完毕。
### 漏洞调试
#### 路径规范化错误导致ACL绕过
ACL是Access Control
List的缩写，中文意味访问控制列表。nuxeo中存在`NuxeoAuthenticationFilter`对访问的页面进行权限校验，这也是目前常见的开发方式。这个漏洞的本质原理是在于由于在nuxeo中会对不规范的路径进行规范化，这样会导致绕过nuxeo的权限校验。
正如orange所说，Nuxeo使用自定义的身份验证过滤器`NuxeoAuthenticationFilter并映射/*`。在`WEB-INF/web.xml`中存在对`NuxeoAuthenticationFilter`的配置。部分如下：
    ...
        NuxeoAuthenticationFilter
        /oauthGrant.jsp
        REQUEST
        FORWARD
        NuxeoAuthenticationFilter
        /oauth/*
        REQUEST
        FORWARD
    ...
但是我们发现`login.jsp`并没有使用`NuxeoAuthenticationFilter`过滤器(想想这也是情理之中，登录页面一般都不需要要权限校验)。而这个也是我们后面的漏洞的入口点。
分析`org.nuxeo.ecm.platform.ui.web.auth.NuxeoAuthenticationFilter::bypassAuth()`中的对权限的校验。
    protected boolean bypassAuth(HttpServletRequest httpRequest) {
    ...
        try {
            unAuthenticatedURLPrefixLock.readLock().lock();
            String requestPage = getRequestedPage(httpRequest);
            for (String prefix : unAuthenticatedURLPrefix) {
                if (requestPage.startsWith(prefix)) {
                    return true;
                }
            }
        }
    ....
解读如orange所说：
> 从上面可以看出来，bypassAuth检索当前请求的页面，与unAuthenticatedURLPrefix进行比较。
> 但bypassAuth如何检索当前请求的页面？
> Nuxeo编写了一个从HttpServletRequest.RequestURI中提取请求页面的方法，第一个问题出现在这里！
追踪进入到`getRequestedPage()`
    protected static String getRequestedPage(HttpServletRequest httpRequest) {
        String requestURI = httpRequest.getRequestURI();
        String context = httpRequest.getContextPath() + '/';
        String requestedPage = requestURI.substring(context.length());
        int i = requestedPage.indexOf(';');
        return i == -1 ? requestedPage : requestedPage.substring(0, i);
    }
`getRequestedPage()`对路径的处理很简单。如果路径中含有`;`,会去掉`;`后面所有的字符。以上都直指Nuxeo对于路径的处理，但是Nuxeo后面还有Web服务器，而不同的Web服务器对于路径的处理可能也不相同。正如Orange所说
> 每个Web服务器都有自己的实现。 Nuxeo的方式在WildFly，JBoss和WebLogic等容器中可能是安全的。 但它在Tomcat下就不行了！
> 因此getRequestedPage方法和Servlet容器之间的区别会导致安全问题！  
>  根据截断方式，我们可以伪造一个与ACL中的白名单匹配但是到达Servlet中未授权区域的请求！
借用Orange的PPT中的一张图来进行说明：  
我们进行如下的测试：
  1. 访问一个需要进行权限认证的URL，`oauth2Grant.jsp`最终的结果是出现了302  
  2. 我们访问需要畸形URL，`http://172.17.0.2:8080/nuxeo/login.jsp;/..;/oauth2Grant.jsp`,结果出现了500  
出现了500的原因是在于进入到tomcat之后，因为servlet逻辑无法获得有效的用户信息，因此它会抛出Java
NullPointerException,但是`http://172.17.0.2:8080/nuxeo/login.jsp;/..;/oauth2Grant.jsp`已经绕过ACL了。
#### Tomcat的路径的规范化的处理
这一步其实如果我们知道了tomcat对于路径的处理就可以了，这一步不必分析。但是既然出现了这个漏洞，就顺势分析一波tomcat的源码。
根据网络上的对于tomcat的解析URL的源码分析，[解析Tomcat内部结构和请求过程](https://www.cnblogs.com/zhouyuqin/p/5143121.html)和[Servlet容器Tomcat中web.xml中url-pattern的配置详解[附带源码分析]](https://www.cnblogs.com/fangjian0423/p/servletContainer-tomcat-urlPattern.html)。tomcat对路径的URL的处理的过程是：
tomcat中存在Connecter和Container，Connector最重要的功能就是接收连接请求然后分配线程让Container来处理这个请求。四个自容器组件构成，分别是Engine、Host、Context、Wrapper。这四个组件是负责关系，存在包含关系。会以此向下解析，也就是说。如果tomcat收到一个请求，交由`Container`去设置`Host`和`Context`以及`wrapper`。这几个组件的作用如下：
我们首先分析`org.apache.catalina.connector.CoyoteAdapter::postParseRequest()`中对URL的处理，
  1. 经过了`postParseRequest()`中的`convertURI(decodedURI, request);`之后，会在`req`对象中增加`decodedUriMB`字段，值为`/nuxeo/oauth2Grant.jsp`。  
  2. 解析完`decodedUriMB`之后，`connector`对相关的属性进行设置：
        connector.getMapper().map(serverName, decodedURI, version,request.getMappingData());
     request.setContext((Context) request.getMappingData().context);
     request.setWrapper((Wrapper) request.getMappingData().wrapper);
  3. 之后进入到`org.apache.tomcat.util.http.mapper.Mapper`中的`internalMapWrapper()`函数中选择对应的mapper(mapper就对应着处理的serlvet)。在这个`internalMapWrapper()`中会对`mappingData`中所有的属性进行设置，其中也包括`wrapperPath`。而`wrapperPath`就是用于之后获得`getServletPath()`的地址。  
  4. 最后进入到`org.apache.jasper.servlet.JspServlet::service()`处理URL。整个函数的代码如下：
        public void service (HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
         ...
         jspUri = request.getServletPath();
         String pathInfo = request.getPathInfo();
         if (pathInfo != null) {
             jspUri += pathInfo;
         }
         try {
             boolean precompile = preCompile(request);
             serviceJspFile(request, response, jspUri, precompile);
         } catch (RuntimeException e) {
             throw e;
         } catch (ServletException e) {
             throw e;
         }
         ...
     }
在函数内部通过`jspUri =
request.getServletPath();`来获得URL。最终通过层层调用的分析，是在`org.apache.catalina.connector.Request::getServletPath()`中的获得的。
        public String getServletPath() {
         return (mappingData.wrapperPath.toString());
     }
得到的结果就是`/oauth2Grant.jsp`.  
最后程序运行`serviceJspFile(request, response, jspUri,
precompile);`，运行`oauth2Grant.jsp`对应的servlet。由于没有进过权限认证，直接访问了`oauth2Grant.jsp`,导致`servlet`无法获取用户的认证信息，结果报错了。  