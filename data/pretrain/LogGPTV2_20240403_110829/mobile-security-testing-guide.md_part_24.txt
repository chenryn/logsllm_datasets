SecretKey secretKey = keyGenerator.generateKey();
The KeyGenParameterSpec indicates that the key can be used for encryption and decryption, but not for other
purposes, such as signing or verifying. It further specifies the block mode (CBC), padding (PKCS #7), and explicitly
specifies that randomized encryption is required (this is the default.) "AndroidKeyStore" is the name of the
cryptographic service provider used in this example. This will automatically ensure that the keys are stored in the
AndroidKeyStore which is beneficiary for the protection of the key.
178
Android Cryptographic APIs
GCM is another AES block mode that provides additional security benefits over other, older modes. In addition to
being cryptographically more secure, it also provides authentication. When using CBC (and other modes),
authentication would need to be performed separately, using HMACs (see the Reverse Engineering chapter). Note
that GCM is the only mode of AES that does not support paddings.
Attempting to use the generated key in violation of the above spec would result in a security exception.
Here's an example of using that key to encrypt:
String AES_MODE = KeyProperties.KEY_ALGORITHM_AES
+ "/" + KeyProperties.BLOCK_MODE_CBC
+ "/" + KeyProperties.ENCRYPTION_PADDING_PKCS7;
KeyStore AndroidKeyStore = AndroidKeyStore.getInstance("AndroidKeyStore");
// byte[] input
Key key = AndroidKeyStore.getKey(keyAlias, null);
Cipher cipher = Cipher.getInstance(AES_MODE);
cipher.init(Cipher.ENCRYPT_MODE, key);
byte[] encryptedBytes = cipher.doFinal(input);
byte[] iv = cipher.getIV();
// save both the IV and the encryptedBytes
Both the IV (initialization vector) and the encrypted bytes need to be stored; otherwise decryption is not possible.
Here's how that cipher text would be decrypted. The input is the encrypted byte array and iv is the initialization
vector from the encryption step:
// byte[] input
// byte[] iv
Key key = AndroidKeyStore.getKey(AES_KEY_ALIAS, null);
Cipher cipher = Cipher.getInstance(AES_MODE);
IvParameterSpec params = new IvParameterSpec(iv);
cipher.init(Cipher.DECRYPT_MODE, key, params);
byte[] result = cipher.doFinal(input);
Since the IV is randomly generated each time, it should be saved along with the cipher text ( encryptedBytes ) in order
to decrypt it later.
Prior to Android 6.0, AES key generation was not supported. As a result, many implementations chose to use RSA
and generated a public-private key pair for asymmetric encryption using KeyPairGeneratorSpec or used SecureRandom
to generate AES keys.
Here's an example of KeyPairGenerator and KeyPairGeneratorSpec used to create the RSA key pair:
Date startDate = Calendar.getInstance().getTime();
Calendar endCalendar = Calendar.getInstance();
endCalendar.add(Calendar.YEAR, 1);
Date endDate = endCalendar.getTime();
KeyPairGeneratorSpec keyPairGeneratorSpec = new KeyPairGeneratorSpec.Builder(context)
.setAlias(RSA_KEY_ALIAS)
.setKeySize(4096)
.setSubject(new X500Principal("CN=" + RSA_KEY_ALIAS))
.setSerialNumber(BigInteger.ONE)
.setStartDate(startDate)
.setEndDate(endDate)
.build();
KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA",
179
Android Cryptographic APIs
"AndroidKeyStore");
keyPairGenerator.initialize(keyPairGeneratorSpec);
KeyPair keyPair = keyPairGenerator.generateKeyPair();
This sample creates the RSA key pair with a key size of 4096-bit (i.e. modulus size).
Note: there is a widespread false believe that the NDK should be used to hide cryptographic operations and
hardcoded keys. However, using this mechanisms is not effective. Attackers can still use tools to find the mechanism
used and make dumps of the key in memory. Next, the control flow can be analyzed with IDA(pro). From Android
Nougat onward, it is not allowed to use private APIs, instead: public APIs need to be called, which further impacts the
effectiveness of hiding it away as described in the Android Developers Blog
Static Analysis
Locate uses of the cryptographic primitives in code. Some of the most frequently used classes and interfaces:
Cipher
Mac
MessageDigest
Signature
Key , PrivateKey , PublicKey , SecretKey
And a few others in the java.security.* and javax.crypto.* packages.
Ensure that the best practices outlined in the "Cryptography for Mobile Apps" chapter are followed. Verify that the
configuration of cryptographic algorithms used are aligned with best practices from NIST and BSI and are considered
as strong. Make sure that SHA1PRNG is no longer used as it is not cryptographically secure. Lastly, make sure that
keys are not hardcoded in native code and that no insecure mechanisms are used at this level.
Testing Random Number Generation (MSTG-CRYPTO-6)
Overview
Cryptography requires secure pseudo random number generation (PRNG). Standard Java classes do not provide
sufficient randomness and in fact may make it possible for an attacker to guess the next value that will be generated,
and use this guess to impersonate another user or access sensitive information.
In general, SecureRandom should be used. However, if the Android versions below KitKat are supported, additional
care needs to be taken in order to work around the bug in Jelly Bean (Android 4.1-4.3) versions that failed to properly
initialize the PRNG.
Most developers should instantiate SecureRandom via the default constructor without any arguments. Other
constructors are for more advanced uses and, if used incorrectly, can lead to decreased randomness and security.
The PRNG provider backing SecureRandom uses the /dev/urandom device file as the source of randomness by default
[#nelenkov].
Static Analysis
Identify all the instances of random number generators and look for either custom or known insecure
java.util.Random class. This class produces an identical sequence of numbers for each given seed value;
consequently, the sequence of numbers is predictable.
The following sample source code shows weak random number generation:
import java.util.Random;
180
Android Cryptographic APIs
// ...
Random number = new Random(123L);
//...
for (int i = 0; i < 20; i++) {
// Generate another random integer in the range [0, 20]
int n = number.nextInt(21);
System.out.println(n);
}
Instead a well-vetted algorithm should be used that is currently considered to be strong by experts in the field, and
select well-tested implementations with adequate length seeds.
Identify all instances of SecureRandom that are not created using the default constructor. Specifying the seed value
may reduce randomness. Prefer the no-argument constructor of SecureRandom that uses the system-specified seed
value to generate a 128-byte-long random number.
In general, if a PRNG is not advertised as being cryptographically secure (e.g. java.util.Random ), then it is probably
a statistical PRNG and should not be used in security-sensitive contexts. Pseudo-random number generators can
produce predictable numbers if the generator is known and the seed can be guessed. A 128-bit seed is a good
starting point for producing a "random enough" number.
The following sample source code shows the generation of a secure random number:
import java.security.SecureRandom;
import java.security.NoSuchAlgorithmException;
// ...
public static void main (String args[]) {
SecureRandom number = new SecureRandom();
// Generate 20 integers 0..20
for (int i = 0; i < 20; i++) {
System.out.println(number.nextInt(21));
}
}
Dynamic Analysis
Once an attacker is knowing what type of weak pseudo-random number generator (PRNG) is used, it can be trivial to
write proof-of-concept to generate the next random value based on previously observed ones, as it was done for Java
Random. In case of very weak custom random generators it may be possible to observe the pattern statistically.
Although the recommended approach would anyway be to decompile the APK and inspect the algorithm (see Static
Analysis).
If you want to test for randomness, you can try to capture a large set of numbers and check with the Burp's sequencer
to see how good the quality of the randomness is.
Testing Key Management (MSTG-STORAGE-1, MSTG-CRYPTO-1 and MSTG-
CRYPTO-5)
Overview
In this section we will discuss different ways to store cryptographic keys and how to test for them. We discuss the
most secure way, down to the less secure way of generating and storing key material.
The most secure way of handling key material, is simply never storing it on the device. This means that the user
should be prompted to input a passphrase every time the application needs to perform a cryptographic operation.
Although this is not the ideal implementation from a user experience point of view, it is however the most secure way
181
Android Cryptographic APIs
of handling key material. The reason is because key material will only be available in an array in memory while it is
being used. Once the key is not needed anymore, the array can be zeroed out. This minimizes the attack window as
good as possible. No key material touches the filesystem and no passphrase is stored. However, note that some
ciphers do not properly clean up their byte-arrays. For instance, the AES Cipher in BouncyCastle does not always
clean up its latest working key. Next, BigInteger based keys (e.g. private keys) cannot be removed from the heap nor
zeroed out just like that. Last, take care when trying to zero out the key. See section "Testing Data Storage for
Android" on how to make sure that the key its contents indeed are zeroed out.
A symmetric encryption key can be generated from the passphrase by using the Password Based Key Derivation
Function version 2 (PBKDF2). This cryptographic protocol is designed to generate secure and non brute-forceable
keys. The code listing below illustrates how to generate a strong encryption key based on a password.
public static SecretKey generateStrongAESKey(char[] password, int keyLength)
{
//Initiliaze objects and variables for later use
int iterationCount = 10000;
int saltLength = keyLength / 8;
SecureRandom random = new SecureRandom();
//Generate the salt
byte[] salt = new byte[saltLength];
random.nextBytes(salt);
KeySpec keySpec = new PBEKeySpec(password.toCharArray(), salt, iterationCount, keyLength);
SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
byte[] keyBytes = keyFactory.generateSecret(keySpec).getEncoded();
return new SecretKeySpec(keyBytes, "AES");
}
The above method requires a character array containing the password and the needed key length in bits, for instance
a 128 or 256-bit AES key. We define an iteration count of 10000 rounds which will be used by the PBKDF2 algorithm.
This significantly increases the workload for a brute-force attack. We define the salt size equal to the key length, we
divide by 8 to take care of the bit to byte conversion. We use the SecureRandom class to randomly generate a salt.
Obviously, the salt is something you want to keep constant to ensure the same encryption key is generated time after
time for the same supplied password. Note that you can store the salt privately in SharedPreferences . It is
recommended to exclude the salt from the Android backup mechanism to prevent synchronization in case of higher
risk data. See "testing android storage" for more details. Note that if you take a rooted device, or unpatched device, or
a patched (e.g. repackaged) application into account as a threat to the data, it might be better to encrypt the salt with
a key in the AndroidKeystore . Afterwards the Password-based Encryption (PBE) key is generated using the
recommended PBKDF2WithHmacSHA1 algorithm till API version 26. From there on it is best to use PBKDF2withHmacSHA256 ,
which will end up with a different key size.
Now, it is clear that regularly prompting the user for its passphrase is not something that works for every application.
In that case make sure you use the Android KeyStore API. This API has been specifically developed to provide a
secure storage for key material. Only your application has access to the keys that it generates. Starting from Android
6.0 it is also enforced that the AndroidKeyStore is hardware-backed in case a fingerprint sensor is present. This
means a dedicated cryptography chip or trusted platform module (TPM) is being used to secure the key material.
However, be aware that the AndroidKeyStore API has been changed significantly throughout various versions of
Android. In earlier versions the AndroidKeyStore API only supported storing public/private key pairs (e.g., RSA).
Symmetric key support has only been added since API level 23. As a result, a developer needs to take care when he
wants to securely store symmetric keys on different Android API levels. In order to securely store symmetric keys, on
devices running on Android API level 22 or lower, we need to generate a public/private key pair. We encrypt the
symmetric key using the public key and store the private key in the AndroidKeyStore . The encrypted symmetric key
can now be safely stored in the SharedPreferences . Whenever we need the symmetric key, the application retrieves
the private key from the AndroidKeyStore and decrypts the symmetric key. When keys are generated and used within
182
Android Cryptographic APIs
the AndroidKeyStore and the KeyInfo.isinsideSecureHardware returns true, then we know that you cannot just dump
the keys nor monitor its cryptographic operations. It becomes debatable what will be eventually more safe: using
PBKDF2withHmacSHA256 to generate a key that is still in reachable dumpable memory, or using the AndroidKeyStore for
which the keys might never get into memory. With Android Pie we see that additional security enhancements have
been implemented in order to separate the TEE from the AndroidKeyStore which make it favorable over using
PBKDF2withHmacSHA256 . However, more testing & investigating will take place on that subject in the near future.
Secure Key Import into Keystore
Android Pie adds the ability to import keys securely into the AndroidKeystore . First AndroidKeystore generates a key
pair using PURPOSE_WRAP_KEY which should also be protected with an attestation certificate, this pair aims to protect the
Keys being imported to AndroidKeystore . The encrypted keys are generated as ASN.1-encoded message in the
SecureKeyWrapper format which also contains a description of the ways the imported key is allowed to be used. The
keys are then decrypted inside the AndroidKeystore hardware belonging to the specific device that generated the
wrapping key so they never appear as plaintext in the device's host memory.
KeyDescription ::= SEQUENCE {
keyFormat INTEGER,
authorizationList AuthorizationList
}
SecureKeyWrapper ::= SEQUENCE {
wrapperFormatVersion INTEGER,
encryptedTransportKey OCTET_STRING,
initializationVector OCTET_STRING,
keyDescription KeyDescription,
secureKey OCTET_STRING,
183
Android Cryptographic APIs
tag OCTET_STRING
}
The code above present the different parameters to be set when generating the encrypted keys in the
SecureKeyWrapper format. Check the Android documentation on WrappedKeyEntry for more details.
When defining the KeyDescription AuthorizationList, the following parameters will affect the encrypted keys security:
The algorithm parameter Specifies the cryptographic algorithm with which the key is used
The keySize parameter Specifies the size, in bits, of the key, measuring in the normal way for the key's
algorithm
The digest parameter Specifies the digest algorithms that may be used with the key to perform signing and
verification operations
Key Attestation
For the applications which heavily rely on Android Keystore for business-critical operations such as multi-factor
authentication through cryptographic primitives, secure storage of sensitive data at the client-side, etc. Android
provides the feature of Key Attestation which helps to analyze the security of cryptographic material managed through
Android Keystore. From Android 8.0, the key attestation was made mandatory for all new(Android 7.0 or higher)
devices that need to have device certification for Google suite of apps, such devices use attestation keys signed by
the Google hardware attestation root certificate and the same can be verified while key attestation process.
During key attestation, we can specify the alias of a key pair and in return, get a certificate chain, which we can use to
verify the properties of that key pair. If the root certificate of the chain is Google Hardware Attestation Root certificate
and the checks related to key pair storage in hardware are made it gives an assurance that the device supports
hardware-level key attestation and the key is in hardware-backed keystore that Google believes to be secure.
Alternatively, if the attestation chain has any other root certificate, then Google does not make any claims about the
security of the hardware.
Although the key attestation process can be implemented within the application directly but it is recommended that it
should be implemented at the server-side for security reasons. The following are the high-level guidelines for the
secure implementation of Key Attestation:
The server should initiate the key attestation process by creating a random number securely using
CSPRNG(Cryptographically Secure Random Number Generator) and the same should be sent to the user as a
challenge.
The client should call the setAttestationChallenge API with the challenge received from the server and should
then retrieve the attestation certificate chain using the KeyStore.getCertificateChain method.
The attestation response should be sent to the server for the verification and following checks should be
performed for the verification of the key attestation response:
Verify the certificate chain, up to the root and perform certificate sanity checks such as validity, integrity and
trustworthiness.
Check if the root certificate is signed with the Google attestation root key which makes the attestation
process trustworthy.
Extract the attestation certificate extension data, which appears within the first element of the certificate chain
and perform the following checks:
Verify that the attestation challenge is having the same value which was generated at the server while
initiating the attestation process.
Verify the signature in the key attestation response.
184
Android Cryptographic APIs
Now check the security level of the Keymaster to determine if the device has secure key storage
mechanism. Keymaster is a piece of software that runs in the security context and provides all the
secure keystore operations. The security level will be one of Software , TrustedEnvironment or
StrongBox .
Additionally, you can check the attestation security level which will be one of Software,
TrustedEnvironment or StrongBox to check how the attestation certificate was generated. Also, some
other checks pertaining to keys can be made such as purpose, access time, authentication requirement,
etc. to verify the key attributes.
The typical example of Android Keystore attestation response looks like this:
{
"fmt": "android-key",
"authData": "9569088f1ecee3232954035dbd10d7cae391305a2751b559bb8fd7cbb229bdd4450000000028f37d2b92b841c4b02a
860cef7cc034004101552f0265f6e35bcc29877b64176690d59a61c3588684990898c544699139be88e32810515987ea4f4833071b64678
0438bf858c36984e46e7708dee61eedcbd0a50102032620012158203849a20fde26c34b0088391a5827783dff93880b1654088aadfaf57a
259549a1225820743c4b5245cf2685cf91054367cd4fafb9484e70593651011fc0dcce7621c68f",
"attStmt": {
"alg": -7,
"sig": "304402202ca7a8cfb6299c4a073e7e022c57082a46c657e9e53b28a6e454659ad024499602201f9cae7ff95a3f2372e
0f952e9ef191e3b39ee2cedc46893a8eec6f75b1d9560",
"x5c": [
"308202ca30820270a003020102020101300a06082a8648ce3d040302308188310b30090603550406130255533113301106
035504080c0a43616c69666f726e696131153013060355040a0c0c476f6f676c652c20496e632e3110300e060355040b0c07416e64726f6
964313b303906035504030c32416e64726f6964204b657973746f726520536f667477617265204174746573746174696f6e20496e746572
6d656469617465301e170d3138313230323039313032355a170d3238313230323039313032355a301f311d301b06035504030c14416e647