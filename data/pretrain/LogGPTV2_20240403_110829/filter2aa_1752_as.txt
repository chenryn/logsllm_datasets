### 7.1.1 判断文件是否位于物理设备

`is_on_physical_device` 函数返回一个整数，表示文件描述符 `fd` 是否位于物理设备上。具体来说：
- 返回正整数：如果 `fd` 位于物理设备上。
- 返回 0：如果文件位于非物理或虚拟设备（例如 NFS 挂载）上。
- 返回 -1：发生错误时。

```c
int is_on_physical_device(int fd) {
    struct stat sb;
    int ret;

    ret = fstat(fd, &sb);
    if (ret) {
        perror("fstat");
        return -1;
    }

    return gnu_dev_major(sb.st_dev);
}
```

### 7.1.2 文件权限设置

使用 `chmod` 和 `fchmod` 函数可以设置文件的权限。这两个函数分别通过路径和文件描述符来设置文件权限。

#### 函数原型
```c
#include <sys/stat.h>
#include <unistd.h>

int chmod(const char *path, mode_t mode);
int fchmod(int fd, mode_t mode);
```

- `chmod` 设置指定路径 `path` 的文件权限。
- `fchmod` 设置指定文件描述符 `fd` 的文件权限。

`mode` 参数是文件权限模式，可以通过位操作组合不同的权限标志。例如，`(S_IRUSR | S_IWUSR)` 表示文件所有者具有读写权限。

#### 示例
```c
int ret;

// 将当前目录下的 map.png 文件设置为所有者可读写
ret = chmod("./map.png", S_IRUSR | S_IWUSR);
if (ret) {
    perror("chmod");
}

// 将文件描述符 fd 对应的文件设置为所有者可读写
ret = fchmod(fd, S_IRUSR | S_IWUSR);
if (ret) {
    perror("fchmod");
}
```

#### 错误处理
- `EACCESS`：调用进程没有足够的权限。
- `EBADF`：无效的文件描述符。
- `EFAULT`：无效的路径。
- `EIO`：文件 I/O 错误。
- `ELOOP`：路径中包含过多的符号链接。
- `ENAMETOOLONG`：路径名太长。
- `ENOENT`：路径不存在。
- `ENOMEM`：内存不足。
- `ENOTDIR`：路径不是目录。
- `EPERM`：调用进程没有适当的权限。
- `EROFS`：文件系统是只读的。

### 7.1.3 文件所有权设置

使用 `chown`、`lchown` 和 `fchown` 函数可以设置文件的所有者和组。这些函数分别通过路径和文件描述符来设置文件的所有权。

#### 函数原型
```c
#include <sys/stat.h>
#include <unistd.h>

int chown(const char *path, uid_t owner, gid_t group);
int lchown(const char *path, uid_t owner, gid_t group);
int fchown(int fd, uid_t owner, gid_t group);
```

- `chown` 设置指定路径 `path` 的文件所有者和组。
- `lchown` 类似于 `chown`，但不会跟随符号链接。
- `fchown` 设置指定文件描述符 `fd` 的文件所有者和组。

`owner` 和 `group` 参数分别是新的用户 ID 和组 ID。如果设置为 -1，则表示不更改相应的所有者或组。

#### 示例
```c
struct group *gr;
int ret;

// 获取组 officers 的信息
gr = getgrnam("officers");
if (!gr) {
    perror("getgrnam");
    return 1;
}

// 将 manifest.txt 文件的组设置为 officers
ret = chown("manifest.txt", -1, gr->gr_gid);
if (ret) {
    perror("chown");
}

// 将文件描述符 fd 对应的文件所有者和组设置为 root
ret = fchown(fd, 0, 0);
if (ret) {
    perror("fchown");
}
```

#### 错误处理
- `EACCESS`：调用进程没有足够的权限。
- `EBADF`：无效的文件描述符。
- `EFAULT`：无效的路径。
- `EIO`：文件 I/O 错误。
- `ELOOP`：路径中包含过多的符号链接。
- `ENAMETOOLONG`：路径名太长。
- `ENOENT`：路径不存在。
- `ENOMEM`：内存不足。
- `ENOTDIR`：路径不是目录。
- `EPERM`：调用进程没有适当的权限。
- `EROFS`：文件系统是只读的。

### 7.1.4 扩展属性

扩展属性（也称为 xattrs）提供了额外的元数据存储功能，可以附加到文件或目录上。扩展属性由键值对组成，键是一个 UTF-8 字符串，值是一个二进制数据块。

#### 7.1.4.1 键与值

扩展属性的键以 `namespace.attribute` 的形式命名。常见的命名空间包括 `user`、`system` 和 `security`。`user` 命名空间允许普通用户读写扩展属性，而 `system` 和 `security` 命名空间通常需要特权访问。

#### 7.1.4.2 扩展属性命名空间

- `user`：用户命名空间，允许普通用户读写扩展属性。
- `system`：系统命名空间，用于存储系统级别的元数据，如 ACLs。
- `security`：安全命名空间，用于 SELinux 等安全模块。

#### 7.1.4.3 扩展属性操作

POSIX 提供了多个函数来操作扩展属性：

- `getxattr`、`lgetxattr`、`fgetxattr`：获取扩展属性的值。
- `setxattr`、`lsetxattr`、`fsetxattr`：设置扩展属性的值。
- `listxattr`、`llistxattr`、`flistxattr`：列出文件的所有扩展属性。

#### 函数原型
```c
#include <sys/xattr.h>

ssize_t getxattr(const char *path, const char *name, void *value, size_t size);
ssize_t lgetxattr(const char *path, const char *name, void *value, size_t size);
ssize_t fgetxattr(int fd, const char *name, void *value, size_t size);

int setxattr(const char *path, const char *name, const void *value, size_t size, int flags);
int lsetxattr(const char *path, const char *name, const void *value, size_t size, int flags);
int fsetxattr(int fd, const char *name, const void *value, size_t size, int flags);

ssize_t listxattr(const char *path, char *list, size_t size);
ssize_t llistxattr(const char *path, char *list, size_t size);
ssize_t flistxattr(int fd, char *list, size_t size);
```

#### 示例
```c
char value[1024];
ssize_t size;

// 获取扩展属性的值
size = getxattr("file.txt", "user.mime_type", value, sizeof(value));
if (size == -1) {
    perror("getxattr");
}

// 设置扩展属性的值
const char *new_value = "text/plain";
size = setxattr("file.txt", "user.mime_type", new_value, strlen(new_value), 0);
if (size == -1) {
    perror("setxattr");
}

// 列出所有扩展属性
char list[1024];
size = listxattr("file.txt", list, sizeof(list));
if (size == -1) {
    perror("listxattr");
} else {
    for (char *p = list; p < list + size; p += strlen(p) + 1) {
        printf("%s\n", p);
    }
}
```

#### 错误处理
- `EACCESS`：调用进程没有足够的权限。
- `EBADF`：无效的文件描述符。
- `EFAULT`：无效的路径、键或值。
- `ELOOP`：路径中包含过多的符号链接。
- `ENAMETOOLONG`：路径名太长。
- `ENOATTR`：扩展属性不存在。
- `ENOENT`：路径不存在。
- `ENOMEM`：内存不足。
- `ENOTDIR`：路径不是目录。
- `ENOTSUP`：文件系统不支持扩展属性。
- `ERANGE`：提供的缓冲区大小不足。

通过这些函数，可以方便地管理和操作文件的扩展属性，从而实现更细粒度的文件管理。