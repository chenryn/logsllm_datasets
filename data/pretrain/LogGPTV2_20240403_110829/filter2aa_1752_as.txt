* is_on_physical_device – returns a positive
* integer if ’fd’ resides on a physical device,
* 0 if the file resides on a nonphysical or
* virtual device (e.g., on an NFS mount), and
* -1 on error.
*/
– 210 –
 7 
文件理
int is_on_physical_device (int fd)
{
struct stat sb;
int ret;
ret = fstat (fd, &sb);
if (ret) {
perror (”fstat”);
return -1;
}
return gnu_dev_major (sb.st_dev);
}
7.1.2 权限
调 stat 给文件的调设
#include 
#include 
int chmod (const char *path, mode_t mode);
int fchmod (int fd, mode_t mode);
chmod()  fchmod() 设文件 mode。 chmod() path 
的文件的相对或绝对。对 fchmod()文件文件 fd 给
。
 mode t() 示的 mode  stat 段 st mode
的。然单们对 Unix 实的
同的。以 POSIX 的集 ( 2 新文件的
)。能进或 mode 。 (S IRUSR |
S IRGRP) 同时设文件属的读。
文件的调 chmod() 或 fchmod() 的进程效 ID 文件
或进程 CAP FOWNER 能。
时 0。时 -1设 errno
– 211 –
 7 
文件理
EACCESS
调的进程对 path 的
（ chmod()。
EBADF
效的文件 fd（ fchmod()。
EFAULT
效的 path （ chmod()。
EIO
文件内 I/O 。的的
的或文件。
ELOOP
内 path 时（ chmod()。
ENAMETOOLONG path （ chmod()。
ENOENT
path 存（ chmod()。
ENOMEM
内存。
ENOTDIR
path （ chmod()。
EPERM
调的进程效 ID 文件进程
CAP FOWNER 能。
EROFS
文件读文件上。
段将文件 map.png 设读写
int ret;
/*
* Set ’map.png’ in the current directory to
* owner-readable and -writable. This is the
* same as ’chmod 600 ./map.png’.
*/
ret = chmod (”./map.png”, S_IRUSR | S_IWUSR);
if (ret)
perror (”chmod”);
段上段能 fd 的文件 map.png
int ret;
/*
* Set the file behind ’fd’ to owner-readable
* and -writable.
*/
– 212 –
 7 
文件理
ret = fchmod (fd, S_IRUSR | S_IWUSR);
if (ret)
perror (”fchmod”);
chmod()  fchmod() 对 Unix 。 POSIX 
。
7.1.3 所有权
 stat 段 st uid  st gid 提文件的属。以
调
#include 
#include 
int chown (const char *path, uid_t owner, gid_t
group);
int lchown (const char *path, uid_t owner, gid_t
group);
int fchown (int fd, uid_t owner, gid_t group);
chown()  lchown() 设 path 的文件的。们作
文件
的 lchown() 文件的
。 fchown() 设文件 fd 的文件。
时调设文件 owner设文件属
group 0。段 owner 或 group  -1设。
CAP CHOWN 能的进程（ root 进程能文件的。文件
以将文件属设何属 CAP CHOWN 能的进程
能文件属何。
时调 -1设 errno
EACCESS
调的进程对 path 的（
 chown()  lchown()。
EBADF
效的 fd（ fchown()。
EFAULT
效的 path（ chown()  lchown()。
– 213 –
 7 
文件理
EIO
内 I/O  ()。
ELOOP
内 path 时（ chown()
 lchown()。
ENAMETOOLONG path （ chown()  lchown())。
ENOENT
文件存。
ENOMEM
内存。
ENOTDIR
  path  的       （    chown() 
lchown()。
EPERM
调的进程的或
属。
EROFS
读的文件。
段工作文件 manifest.txt 的属 officers。
操作调的备 CAP CHOWN 能或 kidd 
officers 
struct group *gr;
int ret;
/*
* getgrnam( ) returns information on a group
* given its name.
*/
gr = getgrnam (”officers”);
if (!gr) {
/* likely an invalid group */
perror (”getgrnam”);
return 1;
}
/* set manifest.txt’s group to ’officers’ */
ret = chown (”manifest.txt”, -1, gr->gr_gid);
if (ret)
perror (”chown”);
操作文件属 crew
– 214 –
 7 
文件理
$ ls –l
-rw-r--r-- 1 kidd crew 13274 May 23 09:20 manifest.txt
操作 officers 以
$ ls –l
-rw-r--r-- 1 kidd officers 13274 May 23 09:20 manifest.txt
文件的 kidd  -1 给 uid。以将
fd 的文件的设 root
/*
* make_root_owner - changes the owner and group
of the file
* given by ’fd’ to root. Returns 0 on success and
-1 on
* failure.
*/
int make_root_owner (int fd)
{
int ret;
/* 0 is both the gid and the uid for root */
ret = fchown (fd, 0, 0);
if (ret)
perror (”fchown”);
return ret;
}
调的进程 CAP CHOWN 能。进程 CAP CHOWN 
的能进程 root 。
7.1.4 扩展属性
扩展属性 (作 xattrs) 提文件 / 对相的
。我们文件的 / 的文件的
– 215 –
 7 
文件理
小时间。扩展属性文件设
实的新性出的的。扩展属性的
性空间能读写 / 。
扩展属性文件的程操作们
对文件。程扩展属性时文
件的文件或文件何内存。扩展属性的实
文件相的。同的文件以同的方式存扩展属性内
们扩展属性出。
 ext3 文件文件 inode 的空空间存扩展属性。∗性
读文件属性。何时程文件 inode 的文件
读内存扩展属性自读内存时
的。
文件 FAT  minixfs扩展属性。对上的文
件调扩展属性时文件 ENOTSUP。
7.1.4.1 键与值
扩展属性对的 (key)。的 UTF-8 。
们 namespace.attribute 的式。
效的空间。效的的子
user.mime type的空间 user属性 mime type。
能或。能空或
空。的间的。我
们的的（空
的。
相的空能的。
以’\0’  C 存时以’\0’ 
理。然以’\0’ 对扩展属性的操作的。读
属性时内提写属性时提属性。
∗然 inode 空间 ext3 的文件存扩展属性。更的 ext3
”inode 内” 的扩展属性性。
– 216 –
 7 
文件理
存 MIME 的更方式
GUI 文件理 GNOME’s Nautilus对同的文件同处理
同的同、同的操作。实文
件理文件的式。文件式 Windows 文件
单文件的扩展。出的原 Unix 
文件。进程作 MIME （MIME type
sniffing。
文件理时理存
。存的自的。文件理文件
文件理的同步。的方自
的扩展属性存的更单
更何程。
Linux 对的的的小或文件相的
的空间小上何。文件上实的。
给文件相的的上。
 ext3对给文件的扩展属性文件 inode 的空间
的文件小。（更的 ext3 文件
 inode 内存。文件的小相
文件实 1KB  8KB。 XFS 实。
的文 ext3 。文
件扩展属性存的
7.1.4.2 扩展属性命名空间
扩展属性相的空间的工。空间内
同。
Linux 扩展属性空间能将更。
system
  空 间 system     扩 展 属 性 实  内   性   
   （ACLs。     空 间 扩 展 属 性 的  子  sys-
tem.posix acl access。读或写属性相
的。的（ root能读
– 217 –
 7 
文件理
属性。
security 空间 security 实 SELinux。空间程
属性相的。进程能
读属性 CAP SYS ADMIN 能的进程能写们。
trusted
空间 trusted 存空间的。 CAP SYS ADMIN
能的进程能读写属性。
user
空间 user 进程的空间。内文件
空间。存的读进程给
文件的读。新或的写进程
给文件的写。能对文件空间扩展属性
或设备文件以。设能扩展属性的空间
程时的空间。
7.1.4.3 扩展属性操作
POSIX 程对给文件扩展属性的操作
• 给文件相的。
• 给文件对。
• 给文件文件的扩展属性的。
• 给文件文件扩展属性。
对操作 POSIX 提调
• 操作给的调的文件
操作（。
• 操作给的调操
作（以”l” 的调。
• 操作文件的调（以”f” 的调。
我们将 12 。
扩展属性。单的操作文件扩展属性给的
#include 
#include 
ssize_t getxattr (const char *path, const char
*key, void *value, size_t size);
– 218 –
 7 
文件理
ssize_t lgetxattr (const char *path, const char
*key, void *value, size_t size);
ssize_t fgetxattr (int fd, const char *key, void
*value, size_t size);
getxattr() 调将 path 的文件 key 的扩展属性
存 value 的 size 。的实
小。
  size  0调      的  小  将  存     value。
0以程存的的。
小程或调。
lgetxattr()  getxattr() 。时的
文件的扩展属性。的我们
空间的属性能上。调。
fgetxattr() 操作文件 fd方 getxattr() 。
时调 -1设 errno
EACCESS
调的进程对 path 的（
 getxattr()  lgetxattr()。
EBADF
效的 fd（ fgetxattr()。
EFAULT
效的 path, key 或 value 。
ELOOP
 path （ getxattr()  lgetx-
attr())。
ENAMETOOLONG  path （ getxattr()  lgetxattr()。
ENOATTR
属性 key 存或进程属性的。
ENOENT
 path 的存（ getxattr()  lgetx-
attr()。
ENOMEM
内存。
ENOTDIR
 path 的（ getxattr() 
lgetxattr()。
ENOTSUP
path 或 fd 的文件扩展属性。
ERANGE
size 小存。的调
能将 size 设 0将的存小对
– 219 –
 7 
文件理
value 调。
设扩展属性。调设给的扩展属性
#include 
#include 
int setxattr (const char *path, const char *key,
const void *value, size_t size, int flags);
int lsetxattr (const char *path, const char *key,
const void *value, size_t size, int flags);
int fsetxattr (int fd, const char *key, const
void *value, size_t size, int flags);
etxattr() 设文件 path 的扩展属性 key  value value 的 size 
。段 flags 调的。 flags  XATTR CREATE扩展属性
存时调将。 flags  XATTR REPLACE扩展属性存时调
将。的 flags  0 时同时。 flags 
的 key 对。
lsetxattr()  setxattr()  path 设
文件的扩展属性。的我们
空间的属性能上。调。
fsetxattr() 操作文件 fd方 setxattr() 。
时调 0时调 -1设
 errno
EACCESS
调的进程对 path 的（
 setxattr()  lsetxattr()。
EBADF
效的 fd（ fsetxattr()。
EDQUOT
操作空间。
EEXIST
flags 设 XATTR CREATE给文件的 key 存
。
EFAULT
效的 path, key 或 value 。
EINVAL
效的 flags。
ELOOP
 path （ setxattr()  lsetx-
attr()。
– 220 –
 7 
文件理
ENAMETOOLONG  path （ setxattr()  lsetxattr()。
ENOATTR
flags 设 XATTR REPLACE给的文件存
key。
ENOENT
 path 的存（ setxattr()  lsetx-
attr()。
ENOMEM
内存。
ENOSPC
文件空间存扩展属性。
ENOTDIR
 path （ setxattr()  lsetx-
attr()。
ENOTSUP
path 或 fd 的文件扩展属性。
出文件的扩展属性。调出给文件扩展属性集
#include 
#include 
ssize_t listxattr (const char *path, char *list,
size_t size);
ssize_t llistxattr (const char *path, char *list,
size_t size);
ssize_t flistxattr (int fd, char *list, size_t
size);
调 listxattr(),  path 的文件相的扩展属性
。存 list 的 size 的。调的
实小。
list 的扩展属性以’\0’ 的能
”user.md5_sum\0user.mime_type\0system.posix_acl_default\0”
然的、以’\0’ 的 C 
的（能调的。
的小设 size  0 调的将
的实。调 getxattr() 程能能
或调。
– 221 –
 7 