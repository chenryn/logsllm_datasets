destinations for DMA input and output channels. Those with
Flash as the destinations are invalid because DMA is only
meant for transferring data to memory, including RAM and
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:26:20 UTC from IEEE Xplore.  Restrictions apply. 
1942
Source
Peripheral
Peripheral
Peripheral
RAM
RAM
RAM
Flash
Flash
Flash
Destination
RAM
Peripheral
Flash
Peripheral
RAM
Flash
RAM
Peripheral
Flash
Valid
Yes
Yes
No
Yes
Yes
No
Yes
Yes
No
Type
DMA input channel
DMA output channel
N/A
DMA output channel
DMA input channel
N/A
DMA input channel
DMA output channel
N/A
TABLE II: Possible combinations of sources and destinations for DMA input
and output channels
Fig. 4: Life-cycle of a DMA transfer
memory-mapped peripheral regions. Among the valid com-
binations, we focus on those with RAM as the destination
because they are DMA input channels that can directly inﬂu-
ence the execution and analysis of ﬁrmware. DICE does not
handle DMA output channels which do not directly inﬂuence
ﬁrmware execution. Unless otherwise noted, we refer to DMA
transfers that go through DMA input channels simply as DMA
transfers.
Each DMA transfer takes three steps. First, ﬁrmware estab-
lishes the DMA input channel by sending a transfer descriptor
to the DMA controller as part of the transfer conﬁguration
( 1(cid:13) in Fig. 4). The transfer descriptor speciﬁes, among other
things, which physical DMA stream inside the DMA controller
should be used for transferring the data, along with the source
and destination addresses as well as the transfer size. The
source address points to the to-be-transferred data stored in
peripheral registers, Flash, or RAM. The destination points to
the memory buffer where the ﬁrmware expects the input data
to be transferred. We refer to a source or destination address
as a transfer pointer. Second, when the input data becomes
available at the source, as indicated by an interrupt, the DMA
controller copies the data from the source to the destination.
Note that the actual data transfer and direct memory access
are performed by the DMA controller on behalf of peripherals
( 2(cid:13) in Fig. 4). Third, after ﬁnishing the data transfer, the DMA
controller signals the ﬁrmware and closes the DMA stream.
It tears down the current DMA input channel and leaves the
input data in the memory buffer for the ﬁrmware to use ( 3(cid:13)
in Fig. 4).
A transfer descriptor is valid only for one DMA transfer,
which goes through the DMA input channel identiﬁed by
the transfer descriptor. Firmware may sometimes use the
auto-reload feature of DMA controllers, whereby a transfer
descriptor is valid for multiple consecutive DMA transfers
until reconﬁgured.
The lifespan of a DMA input channel starts when DMA
controller receives the transfer descriptor and the DMA stream
is conﬁgured. It terminates when the data transfer ﬁnishes.
A channel’s exit end is attached to a dynamically allocated
memory buffer (i.e., the destination). This per-transfer and
highly dynamic nature of DMA input channels makes it
challenging to detect and monitor them. For the same reason,
previously proposed techniques for detecting DMA input using
static heuristics are inaccurate and incomplete.
B. Capturing Stream Conﬁgurations
DICE dynamically captures DMA stream conﬁguration
events to extract the information needed for identifying DMA
input channels, such as destinations and sizes. However,
stream conﬁgurations are not directly visible by ﬁrmware
emulators or analyzers due to the semantic gap—such a
conﬁguration (i.e., ﬁrmware writing a transfer descriptor to
memory-mapped registers), in the eyes of an emulator, looks
the same as a regular memory write by ﬁrmware.
We observed a fairly distinct pattern followed by DMA
stream conﬁgurations: writing some values within a spe-
ciﬁc range to a ﬁxed region in memory. This pattern
echos the essential operation performed in each stream
conﬁguration—writing the source and destination transfer
pointers to the DMA controller
registers. These periph-
eral
registers are always mapped in the MMIO region
(0x40000000–0x5fffffff). DMA transfers through DMA input
channels move data from peripheral/Flash/RAM to RAM.
Therefore, the value of source transfer pointers must be in
the range of 0x40000000–0x5fffffff (for peripheral MMIO),
0x20000000-0x20004fff (for RAM), or 0x8000000-0x801ffff
(for Flash) 1. Similarly, destination pointers must point to the
RAM region. These regions are not very big in size (2kB
to 512kB), which means the value range of transfer pointers
is not very wide. DICE uses this pattern (i.e., two writes of
pointer values to consecutive locations in the MMIO region)
to detect DMA stream conﬁgurations.
We also observed that a DMA controller can support
multiple DMA streams (Figure 3). The source and destination
1The RAM and Flash address ranges are taken from the STM32F103 MCU
as an example. Different MCU may use slightly different ranges for RAM
and Flash, which are speciﬁed in their data-sheets. When data-sheets are not
available, DICE uses the largest ranges allowed by the architecture (a 512MB
region) as the RAM/Flash region.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:26:20 UTC from IEEE Xplore.  Restrictions apply. 
1943
CPU domainOptionalMandatoryTransferConﬁgHardware TriggerSoftware TriggerDataTransferInterrupt/EventAutoStartReloadConﬁgYesFinishInvalidateConﬁgNoBufferaccessDMA CTRL domain132transfer pointers of a particular stream are recorded in two
consecutive MMIO registers in the DMA controller. The write
operations to these registers are 32-bit in width and 4-byte
aligned in address. This pattern allows DICE to identify
multiple stream conﬁgurations on the same DMA controller,
and more importantly, ﬁlter out pointer-like values that are
written to the MMIO region yet not transfer pointers (i.e., the
write operations are sparse, unaligned or in a different data
width).
Based on our tests on real ﬁrmware and devices of various
kinds (§VII-A), this pattern reliably indicates stream conﬁg-
urations and is never seen in other types of memory write
operations. It means that, empirically, ﬁrmware writes two
pointer/address values to two consecutive MMIO registers only
for the purpose of DMA stream conﬁguration.
DICE looks for the stream conﬁguration pattern while it
monitors memory writes by ﬁrmware during execution. When
one is observed, DICE captures the DMA stream conﬁguration
and extracts from it the transfer pointers. Then DICE needs
to identify the direction of the DMA transfer, because when
DICE identiﬁes two transfer pointers that point to, for exam-
ple, peripheral and RAM regions, it does not know whether
the DMA transfer is from peripheral to RAM, or the opposite.
DICE determines the transfer direction by monitoring mem-
ory accesses made by the ﬁrmware through the transfer point-
ers. If the ﬁrmware reads from the RAM address referenced
by the transfer pointer, the DMA transfer is from peripheral
to RAM (a DMA input channel that we are interested in).
If the ﬁrmware writes to the RAM address referenced by the
transfer pointer, the DMA transfer is from RAM to peripheral.
This is determination of transfer direction is intuitive. For
incoming DMA data, ﬁrmware needs to read the data after it
is transferred into RAM from a peripheral. For outgoing data,
ﬁrmware needs to write it into RAM before DMA transfers it
to a peripheral.
DICE captures a DMA stream conﬁguration transferring
data to RAM, and ﬁnds its destination address (i.e.,
the
beginning of the memory buffer for receiving the current
DMA transfer). A newly captured DMA stream conﬁguration
marks the establishment of a DMA input channel for an
upcoming DMA transfer. Its destination address locates the
memory buffer that the ﬁrmware will read the DMA input
from. DICE keeps track of all active DMA input channels
and their destination addresses.
Pattern variations: We encountered one variant of the stream
conﬁguration pattern described above, namely, multiple desti-
nation addresses are speciﬁed in one conﬁguration. This occurs
when a DMA transfer operates in the circular mode [40].
Although slightly different from normal stream conﬁgurations,
this variation still obeys the pattern that DICE uses to capture
stream conﬁgurations. It simply uses one (or more) extra
destination transfer pointer (e.g., three pointers written to three
consecutive MMIO peripheral registers).
Pattern limitation: We identiﬁed two limitations of the
pattern for capturing DMA stream conﬁguration. First, the
pattern assumes that ﬁrmware always writes transfer descrip-
tors, including the transfer pointers, to the memory-mapped
peripheral region that corresponds to DMA controller registers.
Although this is true for most ﬁrmware and MCU devices, we
are aware of some rare cases where ﬁrmware writes transfer
descriptors to RAM, rather than DMA controller registers.
This type of stream conﬁguration is used only in some high-
end SoCs, which resembles the desktop architectures. In this
case, DMA controllers fetch transfer descriptors from RAM
in ways unique to the individual DMA controllers. We did not
encounter such cases in our experiments. DICE cannot capture
the stream conﬁgurations performed this way.
Second, some DMA controller models (e.g., NRF52832
easyDMA [1]) require only the destination address, not the
source-destination pair, when ﬁrmware conﬁgures a DMA
stream (using an implicit source address). As DICE needs
to observe both the source and destination transfer pointers
in order to identify a DMA stream conﬁguration, DICE can-
not identify destination-only stream conﬁgurations. However,
based on our evaluation, only 2 DMA controller models
support this type of conﬁguration. DICE missed only 7 out
of 52 DMA stream conﬁgurations due to this limitation. We
discuss the details in §VII.
C. Responding to DMA Data Read
After DICE captures a DMA stream conﬁguration and
ﬁnds the destination address, it places an access hook on
the destination address, which allows DICE to identify and
respond to ﬁrmware’s read from the corresponding DMA
memory buffer. However, this DMA read identiﬁcation and
response process is not as straightforward as it may sound,
due to two technical challenges: the unknown buffer size, and
the dynamic termination of DMA input channels.
Unknown buffer size: Although DICE can reliably capture
every DMA stream conﬁguration and extract the destination
address, it cannot accurately ﬁnd the transfer size or the buffer
size from a captured conﬁguration event. This is because
transfer sizes may take a wide range of values, unlike destina-
tion addresses, whose values are bounded by the valid DMA
memory regions and therefore fairly distinguishable.
DICE needs to know where each DMA buffer ends in
order to determine if a memory read falls in such a buffer.
An intuitive solution is to extract buffer size from the debug
symbols generated by compiler. At DMA stream conﬁguration,
debug symbols are looked up to ﬁgure out which buffer is
allocated at the destination address and what the buffer size
is. However, debug symbols are absent in MCU ﬁrmware,
which are stripped binary blobs containing only code and
data. Moreover,
identify the size of
dynamically allocated buffers that are widely used in DMA
transfers.
this approach cannot
Instead, DICE adopts an approach supporting dynamically
created DMA buffers without using debug symbols. It dy-
namically infers the bounds of DMA buffers by observ-
ing ﬁrmware’s access. The inference leverages the fact that
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:26:20 UTC from IEEE Xplore.  Restrictions apply. 
1944
ﬁrmware typically reads a DMA buffer consecutively in space
(from the beginning to the end, but not necessarily consecutive
in time). Although in theory ﬁrmware may not start reading
DMA buffers from the beginning, we did not observe such
a case in our experiments on real ﬁrmware. When input data
comes from a peripheral that uses a different endianness than
the MCU’s, ﬁrmware may start reading the buffer several bytes
after the beginning. DICE considers and handles such cases.
For each ﬁrmware access to a detected DMA buffer, DICE
calculates a span (i.e., the possible extent to which this DMA
buffer may extend beyond the currently known boundary).
The span size is set
to twice of the data width of the
memory read operation (LOAD). For instance, the span for
a buffer accessed via a 32-bit LOAD will have the size of 64
bits (8 bytes). Having a span for each buffer access allows
DICE to incrementally infer the buffer size and recognize
the endianness conversion that the ﬁrmware may perform. For
example, after multiple two-byte inputs are transferred from
big-endian peripherals by DMA, ﬁrmware running on a little-
endian CPU will read the DMA buffer in 1-byte data width
to convert the endianness. As byte 1 is read before byte 0,
having a span twice of the data width allows DICE to catch
this behavior. DICE monitors memory read operations while
the DMA input channel is in use. When a memory read falls in
the span, DICE expands the detected DMA buffer to include
the read address. This process is described in Algorithm 1. The
dynamic and incremental expansion of detected DMA buffers
allows DICE to identify and handle ﬁrmware’s DMA read
while continuously inferring the true buffer size, especially
for dynamically allocated DMA buffers.
Algorithm 1 DMA buffer size inference
P erceivedSize ← 0
while DMA input channel is valid do
if memory is read then
Span.Size ← 2 ∗ Read.DataW idth
Span.Base ← (Buf f er.Base + P erceivedSize)
if Read falls in Span then
P erceivedSize ← (Read.addr − Buf f er.Base) +
Read.DataW idth
end if
end if
end while
Dynamic channel terminations: DMA input channels are per
DMA transfers and not permanent. A channel is created when
the underlying DMA stream is conﬁgured and terminated
when the stream is invalidated or used for a different transfer.
DICE tracks the life cycles of DMA input channels and detects
dynamic channel terminations. This is necessary because stale
channels, if not recognized, can cause DICE and the ﬁrmware
analysis to mistakenly treat regular memory access as DMA
input events and thus corrupt ﬁrmware execution. It is worth
noting that the static technique used by the previous works for
identifying DMA buffers suffer from this issue.
DICE watches for two types of signals that indicate channel
terminations. First, if a newly captured DMA stream con-
ﬁguration references the same DMA stream as a previously
captured one did, the stream is now reconﬁgured to support
a different DMA transfer, and therefore, the previous DMA
input channel is now terminated. Second, if ﬁrmware writes
to a memory buffer that corresponds to a DMA input channel,
the channel is implicitly terminated and the buffer is no longer
used for receiving DMA input. When a channel termination is
detected, DICE removes the access hook on the buffer. As a
result, DICE no longer treats it as a DMA buffer or supplies
input to it. The previously generated input data still remains
in the buffer, which ﬁrmware may continue using.
VI. IMPLEMENTATION
We implemented two prototypes of DICE as drop-in com-
ponents on top of the P2IM framework (for ARM Cortex-M
architecture) and a PIC32 emulator (for MIPS M4K/M-Class
architecture) [36].
DICE leverages the tracing and hooking capabilities of