0
if Ui = U1 then R
i ··= f(vUi)G
0
else R
eR ··= R1 +Pn
if Tsig(eX,eR, m) = ⊥ then
Tsig(eX,eR, m) ··= c
i
(III)
else abort game and return false
send (R1, π1)
receive ((R2, π2), . . . , (Rn, πn))
for i = 2 . . . n do
if Π.Ver(crs, (Ui, V, Ri), πi) = 0 then
return ⊥
if Ui = U1 ∧ Ri 6= R1 then
abort game and return false
if Ui 6= U1 ∧ Ri 6= f(vUi)G then
abort game and return false
Q ··= Qk(X, m)
return s1
Fig. 7. Games Game8 and Game9 used in the proof of Theorem 1. The main procedure and oracles ROagg,
ROsig, and ROnon are as in Game7. Changes from Game7 to Game8 and from Game8 to Game9 are highlighted.
35
Game10
(p, G, G) ← GrGen(1λ)
(q, E, P, f) ← GrGen0(p)
(crs, τ) ← Π.SimSetup(1λ)
par ··= (p, G, G, q, E, P, f, crs)
x1 ←$ Fp ; u1 ←$ Zq ; k ←${0, 1}λ
X1 ··= x1G ; U1 ··= u1P
Q ··= ( ) ; AggKeys ··= ( )
Tagg, Tsig, Tnon ··= ( ) // tables for simulating ROs
non, Tρ ··= ( )
Trand, T0
(X, m, σ) ← ASign,
return X1 ∈ X ∧ (X, m) /∈ Q ∧ MS.Ver(par, X, m, σ) = 1
−→RO(par, X1, U1)
Oracle ROagg(X, X)
if Tagg(X, X) = ⊥ then
// X, X1 ∈ X by assumption
0 ∈ X \ {X1} do Tagg(X, X
0) ←$ Fp
for X
Tagg(X, X1) ←$ Fp
{X1, . . . , Xn} ··= X
i=1
ROagg(X, Xi)Xi
abort game and return false
eX ··=Pn
if eX ∈ AggKeys ∨ ∃(eR, m) : Tsig(eX,eR, m) 6= ⊥ then
AggKeys ··= AggKeyskeX
Oracle ROsig(eX,eR, m)
if Tsig(eX,eR, m) = ⊥ then
Tsig(eX,eR, m) ←$ Fp
return Tsig(eX,eR, m)
return Tagg(X, X)
(IV)
Oracle ROnon(K, m)
if Tnon(K, m) = ⊥ then
non(K, m) ←$ Zq
T0
Tnon(K, m) ··= T0
return Tnon(K, m)
non(K, m)P
Oracle Sign(K, m)
if (X1, U1) /∈ K then return ⊥
{(X1, U1), . . . , (Xn, Un)} ··= K
X ··= {X1, . . . , Xn}
µ1 ··= ROagg(X, X1)
eX ··=Pn
ROagg(X, Xi)Xi
i=1
non(K, m)
V ··= ROnon(K, m)
v ··= T0
if Trand(K, m) = ⊥ then
Trand(K, m) ←$ (Fp)2
(c, s1) ··= Trand(K, m)
R1 ··= s1G − cµ1X1
if Tρ(K, m) = ⊥ then
Tρ(K, m) ←${0, 1}λ
ρ ··= Tρ(K, m)
π1 ··= Π.SimPrv(crs, τ, (U1, V, R1); ρ)
if π1 = ⊥ then return ⊥
for i = 2 . . . n do
i ··= R1
0
if Ui = U1 then R
i ··= f(vUi)G
0
else R
eR ··= R1 +Pn
if Tsig(eX,eR, m) = ⊥ then
Tsig(eX,eR, m) ··= c
i=2 R0
i
else abort game and return false
send (R1, π1)
receive ((R2, π2), . . . , (Rn, πn))
for i = 2 . . . n do
if Π.Ver(crs, (Ui, V, Ri), πi) = 0 then
return ⊥
if Ui = U1 ∧ Ri 6= R1 then
abort game and return false
if Ui 6= U1 ∧ Ri 6= f(vUi)G then
abort game and return false
Q ··= Qk(X, m)
return s1
Fig. 8. Game Game10 used in the proof of Theorem 1. Changes from Game9 to Game10 are highlighted.
36
C Proof for the Reduction to DL
The construction of Bdl relies on a generalization of the Forking Lemma [PS00] due to Bellare
and Neven [BN06] that we recall below. Here we state a variant which is slightly adapted to
our setting: it allows for an arbitrary set S as range of the random oracle (instead of a set of
ﬁxed-length bitstrings).
Lemma 3 (Generalized Forking Lemma [BN06]). Fix an integer q. Let V be a random-
ized algorithm which takes as input some main input inp and elements h1, . . . , hq in some ﬁnite
set S and returns either a distinguished failure symbol ⊥ or a pair (i, out), where i ∈ {1, . . . , q}
and out is some side output. The accepting probability of V, denoted acc(V), is deﬁned as the
probability, over the random draw of inp (according to some well-understood distribution),
h1, . . . , hq ←$ S, and the random coins of V, that V returns a non-⊥ output. Consider algorithm
ForkV, taking as input inp, described on Fig. 9. Let frk be the probability (over the draw of inp
and the random coins of ForkV) that ForkV returns a non-⊥ output. Then
(cid:19)
.
− 1
|S|
(cid:18)acc(V)
q
frk ≥ acc(V)
Let q ··= qh + qs + 1. In order to construct Bdl we deﬁne two wrapper algorithms V and W
to which we will successively apply the forking lemma.
Algorithm V. The ﬁrst algorithm V is deﬁned in Fig. 10. It takes as input a main input inpV =
(p, G, G, X∗, hagg,1, . . . , hagg,q) and hsig,1, . . . , hsig,q, where (p, G, G) is a group description, X∗ ∈
G is a uniformly random group element, and hagg,1, . . . , hagg,q as well as hsig,1, . . . , hsig,q are
uniformly random elements of S = Fp and simply runs GameA
10 (cf. Fig. 8), except it sets
X1 ··= X∗ and uses hagg,j for the j-th assignment in Tagg for inputs of the form (X, X1) and
let (X, m, eR, s) be the output of A in the game, and let {X1, . . . , Xn} ··= X, µi ··= Tagg(X, Xi)
hsig,j for the j-th assignment in Tsig. If the game returns false then V returns ⊥. Otherwise,
for 1 ≤ i ≤ n, µ ··= (µ1, . . . , µn), and eX ··=Pn
that assignments Tagg(X, X1) ··= hagg,ˆa and Tsig(eX, eR, m) ··= hsig,ˆs occurred. Note that the
i=1 µiXi. Let also ˆa and ˆs be the indexes such
execution of MS.Ver at the end of the game ensures that µ, ˆa, and ˆs are well-deﬁned. Then
Algorithm ForkV(inp)
pick random coins ρV for V
h1, . . . , hq ←$ S
α ··= V(inp, h1, . . . , hq; ρV)
if α = ⊥ then return ⊥ else (i, out) ··= α
0
h
i, . . . , h
0 ··= V(inp, h1, . . . , hi−1, h
α
if α
if i = i
0
0
q; ρV)
i, . . . , h
, out0) ··= α
0 = ⊥ then return ⊥ else (i
0
q ←$ S
0
0
0 ∧ hi 6= h
i then return (out, out0) else return ⊥
0
Fig. 9. The “forking” algorithm ForkV built from V.
37
non, Tρ ··= ( )
Algorithm V(p, G, G, X∗, hagg,1, . . . , hagg,q, hsig,1, . . . , hsig,q)
(q, E, P, f) ← GrGen0(p, G, G) ; (crs, τ) ← Π.SimSetup(1λ)
par ··= (p, G, G, q, E, P, f, crs)
X1 ··= X∗ ; u1 ←$ Zq ; U1 ··= u1P
Q ··= ( ) ; AggKeys ··= ( )
Tagg, Tsig, Tnon, Trand, T0
ja ··= 0 ; js ··= 0 // counters for assignments in Tagg and Tsig
Indagg ··= ( ) ; Indsig ··= ( ) // tables for storing indexes
(X, m, (eR, s)) ← ASign,
if X1 ∈ X ∧ (X, m) /∈ Q ∧ MS.Ver(par, X, m, (eR, s)) = 1 then
µ ··= (µ1, . . . , µn) ; eX ··=Pn
ˆa ··= Indagg(X, X1) ; ˆs ··= Indsig(eX,eR, m)
out ··= (hsig,ˆs , ˆa, X, µ,eR, s)
{X1, . . . , Xn} ··= X
for i = 1 . . . n do µi ··= Tagg(X, Xi)
i=1 µiXi
−→RO(par, X1, U1)
return (ˆs, out)
else return ⊥
// X, X1 ∈ X by assumption
i=1
ROagg(X, Xi)Xi
return Tagg(X, X)
abort algorithm and return ⊥
eX ··=Pn
if eX ∈ AggKeys ∨ ∃(eR, m) : Tsig(eX,eR, m) 6= ⊥ then
AggKeys ··= AggKeyskeX
Oracle ROsig(eX,eR, m)
if Tsig(eX,eR, m) = ⊥ then
Tsig(eX,eR, m) ··= hsig,js
Indsig(eX,eR, m) ··= js
return Tsig(eX,eR, m)
non(K, m) ←$ Zq
T0
Tnon(K, m) ··= T0
return Tnon(K, m)
Oracle ROnon(K, m)
if Tnon(K, m) = ⊥ then
js ··= js + 1
non(K, m)P
0 ∈ X \ {X1} do Tagg(X, X
0) ←$ Fp
Oracle ROagg(X, X)
if Tagg(X, X) = ⊥ then
for X
ja ··= ja + 1
Tagg(X, X1) ··= hagg,ja
Indagg(X, X1) ··= ja
{X1, . . . , Xn} ··= X
Oracle Sign(K, m)
if (X1, U1) /∈ K then return ⊥
{(X1, U1), . . . , (Xn, Un)} ··= K
X ··= {X1, . . . , Xn}
µ1 ··= ROagg(X, X1)
eX ··=Pn
ROagg(X, Xi)Xi
i=1
V ··= ROnon(K, m)
v ··= T0
if Trand(K, m) = ⊥ then
non(K, m)
js ··= js + 1
c ··= hsig,js ; s1 ←$ Fp
Trand(K, m) ··= (c, s1)
(c, s1) ··= Trand(K, m)
R1 ··= s1G − cµ1X1
π1 ··= Π.SimPrv(crs, τ, (U1, V, R1); ρ)
if π1 = ⊥ then return ⊥