### Connection Establishment and Evaluation

Connections are established via HTTPS. A user can initiate a renegotiation by pressing a button on the website, which triggers the server to start the process. The server configuration supports all three TLS protocol versions and eight different ciphersuites, with a random selection of both for each connection. Approximately 30,000 traces were recorded from around 350 different client stacks (6,230 unique user agent identifiers).

Approximately 27% of these attempts resulted in connection establishment failures. Our implementation is strict and does not allow, for example, duplicated advertised ciphersuites. Additionally, several accesses came from automated tools that evaluate the quality of a TLS server by testing each defined ciphersuite separately.

### Analysis of Failed Connections

- **Ciphersuite Mismatch**: Around 50% of the failed connections did not share a ciphersuite with nqsb-TLS.
- **Uninterpretable Data**: Another 20% of the failed connections started with bytes that nqsb-TLS could not interpret.
- **Secure Renegotiation Extension**: 12% of the failed connections did not include the secure renegotiation extension, which our server requires.
- **Early Change Cipher Spec**: 5% of the failed traces were attempts to send an early change cipher spec.
- **SSL Version 3**: 4% of the failed connections tried to negotiate SSL version 3.
- **Null Ciphersuite (iOS6)**: 2.5% of the failed connections contained a ciphersuite with null (iOS6).

### Certificate Parsing

We successfully parsed more than 99% of the ZMap’s HTTPS (20150615) and IMAP (20150604) certificate repositories. The remaining failures were due to RSASSA-PSS signatures requiring an explicit NULL as a parameter and unknown or outdated algorithm identifiers.

### Interoperability and Specification Mismatches

This four-fold evaluation demonstrates that our TLS implementation is broadly interoperable with a large number of other TLS implementations, indicating that we are capturing the de facto standard reasonably well.

#### Specification Mismatches

During the evaluation of nqsb-TLS, we discovered several inconsistencies between the RFC and other TLS implementations:

- **Apple’s SecureTransport and Microsoft’s SChannel**: These deny application data records during renegotiation, while the RFC allows interleaving.
- **OpenSSL (1.0.1i)**: Accepts any X.509v3 certificate containing either digitalSignature or keyEncipherment in keyUsage, whereas the RFC mandates digitalSignature for DHE and keyEncipherment for RSA.
- **Unknown TLS Implementation**: Starts padding data with a 16-bit length, contrary to the RFC requirement of 0.
- **TLS 1.1 Stack**: Sends an unregistered alert 0x80.

### Security Assessment

We assess the security of nqsb-TLS through various methods, including the discussion of root causes of classic vulnerabilities, mitigation of specific issues, state machine testing, random testing with the Frankencert fuzzing tool, a public integrated system protecting a Bitcoin reward, and analysis of the Trusted Computing Base (TCB) size.

#### Avoidance of Classic Vulnerabilities

In Sections 3 and 4, we described how the nqsb-TLS structure and development process exclude the root causes of many vulnerabilities found in previous TLS implementations.

#### Additional Mitigations

- **Sub-protocols Interleaving**: Allowed only between change of cipher spec and finished.
- **Random IV Initialization**: Each TLS 1.0 application data is prepended by an empty fragment to randomize the IV (BEAST).
- **Secure Renegotiation**: Required.
- **SCSV Extension**: Supported.
- **Best Practices for CBC Mode**: Followed, though no mitigation for Lucky13 [19].
- **No Export Restricted Ciphersuites**: Prevents downgrade to weak RSA keys and small DH groups (FREAK and Logjam).
- **Extended Master Secret**: Required to resume a session.

#### State Machine Fuzzing

Researchers fuzzed nqsb-TLS and found a minor issue: alerts sent were not encrypted. This was fixed within a day of discovery and is unlikely to have been security-relevant.

#### Frankencert Fuzzing

Frankencert is a fuzzing tool that generates syntactically valid X.509 certificate chains by randomly mixing valid certificates and random data. We generated 10,000 X.509 certificate chains and compared the verification results of OpenSSL (1.0.1i) and nqsb-TLS. nqsb-TLS accepted 120 certificates, a strict subset of the 192 accepted by OpenSSL.

- **Rejected Certificates**: 72 certificates accepted by OpenSSL but not by nqsb-TLS, 57 of which contained arbitrary data in X.509v3 extensions where our implementation allows only restricted values.
- **Critical Extensions**: 12 certificate chains included an X.509v3 extension marked critical but not supported by nqsb-TLS.
- **Certificate Authority Certificates**: Two server certificates were CA certificates, which best practices recommend rejecting.
- **DHE-RSA Validity**: One certificate was valid for DHE but not for RSA, and our experimental setup used RSA, so nqsb-TLS appropriately denied it.

#### Exposure to New Vulnerabilities

Building nqsb-TLS in a managed language potentially opens up new vulnerabilities not present in C-based stacks. Algorithmic complexity attacks are a low-bandwidth class of denial-of-service attacks that exploit deficiencies in common data structures. The modular structure of nqsb-TLS makes it easy to audit the implementations used within each component. The French computer security governmental office assessed the security of the OCaml runtime in 2013, leading to several improvements.

#### The Bitcoin Piñata

To demonstrate the use of nqsb-TLS in an integrated system based on MirageOS and to encourage external code review and penetration testing, we set up a public bounty, the Bitcoin Piñata. This standalone MirageOS unikernel contains the secret key to a Bitcoin address, which it transmits upon establishing a successfully authenticated TLS connection. The service exposes both TLS client and server on different ports, allowing traffic bridging and observation of a successful handshake and encrypted exchange of the secret.

The attack surface includes the entire system, from the underlying operating system and its TCP/IP stack to TLS and the cryptographic level. The system only accepts connections authenticated by a custom certificate authority. As of June 2015, there were 230,000 accesses from over 50,000 unique IP addresses, with more than 9,600 failed and 12,000 successful TLS connections from 1,000 unique IPs. No outgoing transactions were registered in the blockchain, and 42 certificates were collected that failed authentication.

#### Trusted Computing Base (TCB)

The TCB size quantifies the attack surface of a system. We compare the TCB of our Piñata to a similar traditional system using Linux and OpenSSL. Both systems run on the same hardware and Xen hypervisor. The TCB sizes are shown in Table 2 (using cloc).

| Component | Linux/OpenSSL | Unikernel/nqsb-TLS |
|-----------|----------------|--------------------|
| Kernel    | 1600 kloc      | 48 kloc            |
| Runtime   | 689 kloc       | 25 kloc            |
| Crypto    | 230 kloc       | 23 kloc            |
| TLS       | 41 kloc        | 6 kloc             |
| Total     | 2560 kloc      | 102 kloc           |

The traditional system's TCB is 25 times larger than ours, yet both provide the same service and are indistinguishable to external observers.

### Performance Evaluation

We evaluated the performance of nqsb-TLS, comparing it to OpenSSL 1.0.2c and PolarSSL 1.3.11. The test machine has an Intel i7-5600 Broadwell CPU and runs Linux 4.0.5 and glibc 2.21. Throughput is measured by transferring 100 MB of data from the client to the server, repeated for various transmission block sizes. Handshakes are measured by running 20 parallel processes in a continuous connecting loop and measuring the maximum number of successful connections within one second.

Throughput rates are summarized in Figure 4. With 16-byte blocks, processing is dominated by protocol overhead, and nqsb-TLS runs at about 78% of OpenSSL’s speed. At 8,196 bytes, performance is dominated by cryptographic processing, with all three implementations using AES-NI, giving them roughly comparable speed. OpenSSL’s lead is likely due to its extensive use of assembly and pipeline saturation techniques. PolarSSL’s performance drop is attributed to its different implementation approach.

### Conclusion

Our approach to building nqsb-TLS emphasizes immutability and explicit data-passing, facilitating code review and reasoning at all levels. While Joe-E focuses on style changes for security reviews, our fully declarative style aims to clarify the specification and ensure the implementation is accessible and understandable.