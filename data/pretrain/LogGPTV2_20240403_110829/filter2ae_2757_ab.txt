                }
            }
            if ($node instanceof NodeScalarString_) {
                if ($this->mode === 0) {
                    $name = $node->value;
                    if (!isset($this->_strings[$name]) && strlen($name) > 1) {
                        $this->_strings[$name] = 1;
                    }
                } else if ($this->mode === 1) {
                    $name = $node->value;
                    if (isset($this->_strings[$name])) {
                        return new ExprArrayDimFetch(
                            new ExprVariable($this->_variableName),
                            NodeScalarLNumber::fromString($this->_strings[$name])
                        );
                    }
                }
            }
            return $node;
        }
        private function getFunctionNames(string $code)
        {
            $traverser = new NodeTraverser();
            $this->_ast = $this->_parser->parse('addVisitor(new NameResolver());
            $traverser->addVisitor($this);
            $traverser->traverse($this->_ast);
            return $this->_strings;
        }
        private function shuffleStringKeys()
        {
            $this->_stringShuffledKeys = array_keys($this->_strings);
            shuffle($this->_stringShuffledKeys);
            foreach ($this->_stringShuffledKeys as $key => $value) {
                $this->_strings[$value] = $key;
            }
        }
        private function getObfuscatedAST($ast)
        {
            $this->mode = 1;
            $traverser = new NodeTraverser();
            $traverser->addVisitor(new NameResolver());
            $traverser->addVisitor($this);
            $this->_ast = $traverser->traverse($ast);
        }
    }
    $a = ObfuscateCode::initialize();
    echo $a->obfuscate('var_dump(base64_encode("123456"));echo "test";');
至于破解，反向操作即可。分享一个52pojie上的破解教程和一键破解脚本：
`yakpro-po`的特征是大量的goto混淆，如图所示。
这种混淆器的特点如下：
  1. 正常语句，将被混淆成`labelxxx: one_line; goto nextlabel;`。直接将这三条语句视为一个混淆节点即可。
  2. if / if else / if elseif else，处理差别不大，直接还原即可。
  3. 嵌套型 if 相对比较麻烦，因为没有嵌套 if 的概念，一切 if 均在最外层。简单的处理方案是，如果跳到的节点有 if 语法，重新递归解析这个节点。
关于该混淆器网络上没有开源的解混淆方案，因此笔者也贴不出链接。只是笔者认为对于混淆类加密，万变不离其宗，基本上只需要通过简单的AST操作即可还原其原始代码（变量名可能被破坏）。不过出于防君子不防小人的目的，这一类加密已经足够日常使用。
## 无扩展虚拟机加密
目前市面上无扩展的虚拟机加密只有两款，且收费均不菲：
  1. Discuz应用中心开发的魔方加密：
  2. Z-Blog团队开发的Z5加密：
这两款加密的共同特点是：它们都实现了一个PHP语言的编译器，将PHP转换为它们的内部代码；用户将收到一个解释器，解释器的作用是根据内部代码来执行对应的指令。这就像写C语言一样，编译器负责把C语言写的代码转换为机器码，这种机器码CPU可以直接执行。
这种加密方式，在Windows /
Linux上已经很成熟了，代表作品是VMProtect。这种运行方式已经在理论上证明了反编译出源码是不可能的，相对来说也是无扩展加密中最安全的。安全的同时也需要付出一定的代价，它们的运行效率也是最低的。
尽管如此，它们也不是百分百安全。虽然不能反编译出源码，但是可以根据它们的执行逻辑转写出功能类似的代码。魔方加密仅有一层虚拟机，缺少调试对抗策略，导致现在已经有了比较成熟的一键反编译方案：
魔方一代加密破解：
魔方二代加密破解：
Z5加密的作者似乎在这之上改进了不少，笔者登陆其官网，发现其有如下功能：
  1. 增加垃圾代码、扁平化控制流、指令膨胀。
  2. 明文字符串加密、常量池。
  3. 虚拟机共享、反调试。
Z5加密的破解极为麻烦，笔者对PHP引擎进行了大量修改，包括`zend_compile_string`、`zend_execute`、`microtime`、`php_sapi_name`等一系列函数，花了几天时间才勉强读懂这款加密的执行逻辑。其官网声称让“破解的成本要远高于购买您的程序的成本”，笔者还是比较认同的。
## 近似加密
这其实不属于加密，而是利用PHP自身功能来达到类似加密的效果。PHP在5.5之后自带OPcache，而5.5之前有Zend
Optimizer。而已经停止开发的`Zend Guard`、老版本`ionCube`和部分配置下的`Swoole
Compiler`，即是基于这一些系统功能进行加密。
PHP通常在Zend引擎上运行，Zend引擎会先将PHP编译为OPcode，OPcache的原理就是缓存了这些OPcode避免下一次运行时仍然产生编译开销。当然，OPcache也是人类不可直接读的。按照PHP官网所说：
> OPcache 通过将 PHP 脚本预编译的字节码存储到共享内存中来提升 PHP 的性能， 存储预编译字节码的好处就是 省去了每次加载和解析 PHP
> 脚本的开销。
>
> PHP 5.5.0 及后续版本中已经绑定了 OPcache 扩展。 对于 PHP 5.2，5.3 和 5.4 版本可以使用 [»
> PECL](https://pecl.php.net/package/ZendOpcache) 扩展中的 OPcache 库。
Zend Guard和部分情况下的Swoole Compiler的原理与之相同，即直接将OPcode塞入Zend引擎。
Zend Guard已经被Dezend等工具解密，开源解密工具见：
对于PHP
5.5+的OPcache的读取和解析，可以参考这一篇文章的后半部分：[https://blog.zsxsoft.com/post/36。他使用VLD扩展来解析OPcache。](https://blog.zsxsoft.com/post/36)
## 扩展加密
笔者这里所说的扩展不是`php-beast`、`php_screw`这一类扩展，前文已经指出，它们根本不配被称之为“加密”。笔者认为，`Swoole
Compiler`、`SG11`、高版本`ionCube`这一类扩展才配被称之为加密。
Swoole Compiler团队的郭新华曾经分享了Swoole
Compile的加密过程，可以搜索得到他们的PPT：。截至目前，似乎没有公开的Swoole
Compiler的破解网站。笔者没有Swoole Compiler的样本，如果他们真的如PPT所述实现，那么可以说这是最强的有扩展加密。
根据PPT所述，他们的加密过程包括：
  1. 剔除注释、混淆局部变量。
  2. 编译优化、内联函数和指令、花指令。
  3. 增加垃圾代码、扁平化控制流。
  4. 明文字符串加密。
  5. 基于LLVM编译成LLVM Bytecode。
分发给用户的扩展还包括：
  1. 内置函数名替换（参考zhaoyuanma的破解：）。
  2. OPCode混淆，仅保留Handler。
  3. 反调试、防篡改、加壳。
SG11目前没有公开资料，解密的市场价大约200-300元/文件，笔者目前也没有SG11加密过的样本，只能简单分析SG11
Loader。笔者猜测可以从`zend_execute`内直接拿出所有的Bytecode来跳过OPCode解密流程。
之后找到每个OPCode执行的Handler，在这个Handler里应该包括二次解密的流程，再往下笔者就不再探究了。
## 文末
就目前而言，这些加密拥有足够的强度，值得推荐：
[php-obfusactor](https://github.com/naneau/php-obfuscator)
：开源免费，混淆型免扩展加密，较类似Android上的ProGuard。
[yakpro-po](https://github.com/pk-fr/yakpro-po)：开源免费，混淆型免扩展加密，打乱了程序的运行流程。
[Z5加密](https://z5encrypt.com)：商业，虚拟机型免扩展加密，Z-Blog团队出品。
[Swoole Compiler](https://www.swoole-cloud.com/compiler.html)：商业，有扩展加密，Swoole官方出品。