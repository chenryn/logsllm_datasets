client that we subjected to analysis. Below we summarize
the three classes of such code that we trimmed. Aside from
these three types of code, we also trimmed mouse input-
handling code, since all game activities can be performed
equivalently using the keyboard.
First, several types of user inputs impact only the graph-
ical display of the game but have no effect on the game’s
permissible behaviors as seen by the server. For example,
one type of key press adjusts the display of game-play statis-
tics on the user’s console. As such, we excised these inputs
from the client software for the purposes of our analysis.
Second, there are certain “reliable” messages the server
sends the client (using the custom reliable-delivery protocol
built over UDP). Reliable trafﬁc is vital to the set-up and
tear-down of games and game connections, but once play
has begun, reliable messages are irrelevant for game play.
Types of messages the server sends reliably are in-game
chat messages (both among players and from the server it-
self), information about new players that have joined, and
score updates, all of which are relatively infrequent and
purely informational, in the sense that their delivery does
not alter the permissible client behaviors. As such, we ig-
nored them for the purpose of our analysis.
Third, KLEE is built upon LLVM and requires the input
executable to be compiled into the LLVM intermediate rep-
resentation (IR). Like all software, XPilot does not execute
in isolation and makes use of external libraries; not all of
these were compiled into LLVM IR. Speciﬁcally, the graph-
ics library was not symbolically executed by KLEE, and in-
stead any return values from graphics calls that XPilot later
needed were simply declared symbolic.
5.3 Veriﬁcation with Lazy Round Constraints
In this section we measure the performance of veriﬁca-
tion using lazy round constraints. As discussed in §4, lazy
round constraints are generated once the client-to-server
and server-to-client messages are known. Thus, the only
unknown inputs to the game client when generating lazy
round constraints are the user inputs and time readings (and
random coin ﬂips, but these do not affect server-visible be-
havior in XPilot).
In generating lazy round constraints, we departed
slightly from the description of our approach in §4, in
that we inserted multiple breakpoints in the client event
loop, rather than only a single breakpoint. Each break-
point provides an opportunity to prune accumulated con-
straints and, in particular, to delete multiple copies of the
same accumulated constraint. This is accomplished using
a variant of the algorithm in Figure 2, using constraints de-
rived from preﬁxes of the loop leading to the breakpoint, in
place of full round constraints. Some of these extra break-
points correspond to the (multiple) send locations in XPi-
lot’s loop. Aside from this modiﬁcation, we implemented
our approach as described in §4.
We ran our lazy client veriﬁer on a 2,000-round XPi-
lot game log (about a minute of game-play time) using a
machine with a 2.67GHz processor. Figure 3(a) describes
the per-round validation cost (in seconds) using a box-and-
whiskers plot per 125 rounds: the box illustrates the 25th,
50th, and 75th percentiles; the whiskers cover points within
1.5 times the interquartile range; and circles denote out-
liers. The per-round veriﬁcation times averaged 14.7s with
a standard deviation of 3.8s. As an aside, in every round,
there was exactly one remaining satisﬁable accumulated
0
500
1000
1500
2000
Round
(a) Cost per round (lazy)
)
s
d
n
o
c
e
s
(
t
s
o
C
n
o
i
t
a
c
i
f
i
r
e
V
)
s
d
n
o
c
e
s
(
t
s
o
C
n
o
i
t
a
c
i
f
i
r
e
V
0
2
0
1
5
0
1
1
1
.
0
1
0
.
0
0
500
1000
1500
2000
Round
(b) Cost per round (lazy) with XPilot-speciﬁc op-
timizations
Figure 3. Veriﬁcation cost per round us(cid:173)
ing lazy round constraints, while checking a
2,000(cid:173)round XPilot game log
constraint, indicating that, without client state, there is lit-
tle ambiguity at the veriﬁer about exactly what is happening
inside the client program, even from across the network.
By employing an XPilot-speciﬁc optimization, we were
able to signiﬁcantly improve veriﬁcation performance. Af-
ter the trimming described in §5.2, the user input paths that
we included within our symbolic execution of the client
each caused another client-to-server message to be sent, and
so the number of such sends in a round indicates to the ver-
iﬁer an upper bound on the number of user inputs in that
round. As such, we could tune the veriﬁer’s symbolic ex-
ecution to explore only paths through the client where the
number of invocations of the input-handling function equals
the number of client messages for this round in the log.
This optimization yields the graph in Figure 3(b). Notice
that there are three distinct bands in the graph, correspond-
ing to how many times the input-handling function within
the game client was called. The ﬁrst band contains rounds
which called the input handler zero times and represents the
majority (90.1%) of the total rounds. These rounds were
the quickest to process, with a mean cost of 26.1ms and a
standard deviation of 10.0ms. The next-largest band (5.1%)
contains rounds which called the input handler only once.
These rounds took longer to process, with a mean of 3.38s
and a standard deviation of 650ms. The ﬁnal band repre-
sents rounds with more than one call to the input-handling
function. This band took the longest to process (14.9s, on
average), but it was also the smallest, representing only
4.1% of all rounds.
5.4 Veriﬁcation with Eager Round Constraints
In this section we discuss veriﬁcation of XPilot using
eager constraint generation. Recall that eager round con-
straints are precomputed from the sanctioned client soft-
ware without knowledge of the messages the client will pro-
cess in any given loop iteration. However, we found this ap-
proach to require substantial manual tuning to be practical,
as we describe below.
5.4.1 Manual Tuning
A direct application of our method for generating eager
round constraints for the XPilot client loop would replace
the user key press with symbolic input and any incoming
server message with a symbolic buffer, and subject the re-
sulting client program to KLEE. Such a direct application,
however, encountered several difﬁculties. In this section we
describe the main difﬁculties we encountered in this direct
approach and the primary adaptations that we made in order
to apply it to the XPilot client. These adaptations highlight
an important lesson: the eager technique, while largely au-
tomatic, can require some manual tuning to be practical.
Because our technique is targeted toward game developers,
we believe that allowing for such manual tuning is appro-
priate.
In XPilot, messages from the server
Frame processing
to the client describing the current game state are called
frames. Each frame is formed of a chain of game pack-
ets (not to be confused with network packets). The ﬁrst
and last packets in a frame are always special start-of-frame
and end-of-frame packets, called PKT START and PKT END.
Figure 4 shows an XPilot frame, containing a packet of
type PKT FUEL and potentially others (indicated by “. . .”).
Packet headers are a single byte, followed by packet data
that can carry anything from a single byte to an arbitrary-
length, NULL-terminated string, depending on the packet
type. Frames may contain multiple packet types and multi-
ple instances of the same packet type.
Consider the client’s frame-processing algorithm. Given
PKT START header
PKT START data
...
PKT FUEL header
PKT FUEL data
...
. . .
PKT END header
PKT END data
...
Figure 4. XPilot frame layout
a frame, it reads the packet header (i.e., the ﬁrst byte), then
calls the handler for that packet, which processes the packet
and advances the frame pointer so that the new “ﬁrst byte”
is the packet header of the next packet in the frame. This
continues until the packet handler for PKT END is called,
the return of which signiﬁes the end of the frame handling.
Therefore, given a completely symbolic buffer representing
the frame, our symbolic execution would need to walk the
client code for each possible sequence of packets in a frame,
up to the maximum frame size. But XPilot has dozens of
packet types, some of which include a very small amount
data. As evidence of the infeasibility of such an approach,
consider the following (very conservative) lower bound on
the number of packet sequences: There are at least 10 types
of packets that we considered whose total size is at most
5 bytes. The maximum size for a server-to-client frame in
XPilot is 4,096 bytes, which means there is room for over
800 of these packets. That gives at least 10800 possible
packet sequences that symbolic execution would traverse to
generate constraints, which is obviously infeasible.
To make eager constraint generation feasible, then, we
adapt our approach to generate round constraints by start-
ing and stopping symbolic execution at multiple points
within the loop, as opposed to just the beginning and end
of the loop.
In particular, we apply symbolic execution
to the frame processing and user input processing por-
tions of the loop separately, to obtain user-input constraints
and frame-processing constraints, which in turn the ver-
iﬁer pieces together during veriﬁcation to construct the
round constraints. Moreover, the veriﬁer can construct the
frame-processing constraints on the basis of the particu-
lar frame the server sent to the client. It does so dynam-
ically from packet-processing constraints that characterize
how the client should process each packet in the partic-
ular frame. For example, if the only packet types were
PKT START, PKT FUEL, PKT TIME LEFT, and PKT END, the
packet-processing constraints representing the processing
of a single packet would be
(p = PKT START) ∧ (constraints for(PKT START))
(p = PKT FUEL) ∧ (constraints for(PKT FUEL))
(p = PKT TIME LEFT) ∧ (constraints for(PKT TIME LEFT))
(p = PKT END) ∧ (constraints for(PKT END))
a variable
for
represents
the packet
the
type
and
where p is
constraints for(PKT START)
additional
constraints that would result from symbolic execution of
the packet handler for PKT START. With this new model of
packet processing, the veriﬁer can build a frame-processing
constraint to represent any given frame from the logs. In
this way, when the veriﬁer checks the behavior of a given
client, it does so armed with the frames the server sent to
the client, the messages the server received from the client,
and the frame-processing constraints that characterize
the client’s processing of each frame, which the veriﬁer
constructs from the packet-processing constraints.
Packet processing Certain individual packet types present
their own tractability challenges as well. For example, the
payload for a certain packet begins with a 32-bit mask fol-
lowed by one byte for each bit in the mask that is equal to 1.
The client then stores these remaining bytes in a 32-byte ar-
ray at the offsets determined by the mask (setting any bytes
not included in the message to 0). In the packet handler,
the XPilot client code must sample the value of each bit in
the mask in turn. Since the payload (and thus the mask)
is symbolic, each of these conditionals results in a fork of
two separate paths (for the two possible values of the bit in
question). Our symbolic execution of this packet handler,
then, would produce over 4 billion round constraints, which
is again infeasible. We could have changed the XPilot net-
work protocol to avoid the using mask, sending 32 bytes
each time, but doing so would increase network bandwidth
needlessly. Instead, we note that the result of this packet
handler is that the destination array is set according to the
mask and the rules of the protocol. We thus added a sim-
ple rule to the veriﬁer that, when processing a packet of this
type, generates a constraint deﬁning the value of the des-
tination array directly, exactly as the packet handler would
have. Then, when symbolically executing the packet han-
dlers, prior to veriﬁcation, we can simply skip this packet.
To avoid similar modiﬁcations to the extent possible, we
pruned the packets the veriﬁer considers during veriﬁcation
to only those that are necessary. That is, there are several
packet types that will not alter the permissible behaviors of
the client as could be witnessed by the server, and so we
ignored them when applying our technique. Most of these
packet types represent purely graphical information. For
example, a packet of type PKT ITEM simply reports to the
client that a game item of a given type (e.g., a power-up or
a new weapon) is ﬂoating nearby at the given coordinates.
These instructions allow the client to draw the item on the
screen, but they do not affect the valid client behaviors as
observable by the veriﬁer.1
User input The ﬁrst part of the client input loop checks
for and handles input from the player. Gathering user-input
constraints is fairly straightforward, with the exception that
XPilot allows players to do an extensive amount of keyboard
mapping, including conﬁgurations in which multiple keys
are bound to the same function, for example. We simpliﬁed
the generation of constraints by focusing on the user actions
themselves rather than the physical key presses that caused
them. That is, while generating constraints within the user-
input portion of XPilot, we begin symbolic execution af-
ter the client code looks up the in-game action bound to
the speciﬁc physical key pressed, but before the client code
processes that action. For example, if a user has bound the
action KEY FIRE SHOT to the key ‘a’, our analysis would
focus on the effects of the action KEY FIRE SHOT, ignoring
the actual key to which it is bound. However, as with other
client conﬁguration options, the keyboard mapping could
easily be sent to the server as a requirement of joining the
game, invoking a small, one-time bandwidth cost that would
allow the veriﬁer to check the physical key conﬁguration.
5.4.2 Eager Veriﬁcation Performance
We ran our eager client veriﬁer on the same 2,000-round
XPilot game log and on the same computer as the test
in §5.3. Figure 5 describes the per-round validation cost
(in seconds) using a box-and-whiskers plot. As in Fig-
ure 3(b), we employed here an XPilot-speciﬁc optimization
by observing that the number of client messages in a round
bounds the number of user inputs in that round. As such,
in piecing together round constraints, the veriﬁer includes
a number of copies of user-input constraints (see §5.4.1)
equal to the client sends in that round. Figure 5 exhibits
three bands (the third comprising a few large values), cor-
responding to different numbers of copies. The large per-
centage of rounds contained no user inputs and were the
quickest to process, with a mean cost of 1.64s and a stan-
dard deviation of 0.232s. A second band of rounds — those
with a single user input — took longer to process, with a
mean of 11.3s and a standard deviation of 1.68s. Remaining
rounds contained multiple user inputs and took the longest
to process (34.2s, on average), but they were by far the least
frequent.
Comparing Figures 5 and 3(b), the times for the eager
approach are substantially slower than those for the lazy
approach, when applied to XPilot. This performance loss
1In particular, whether the client processes this packet is irrelevant to
determining whether the client can pick up the game item described in the
packet. Whether the client obtains the item is unilaterally determined by
the server based on it computing the client’s location using the low-level
client events it receives — an example of how nearly all control is stripped
from clients in today’s games, owing to how they cannot be trusted.
)
s
d
n
o
c
e
s
(
t
s
o
C
n
o
i
t
a
c
i
f
i
r
e
V
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
0