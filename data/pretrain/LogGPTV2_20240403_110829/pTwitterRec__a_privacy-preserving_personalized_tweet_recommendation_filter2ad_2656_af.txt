### 8.2 Ciphertext Size and Computational Overhead

The size of the ciphertext is approximately equal to the sum of (all word indexes + one AES block + initialization vector + the ciphertext of the secret AES key \( k_r \) encrypted using RSA). With a 2048-bit RSA key, the total size is about 0.7 KB. The computational overhead for encrypting word indexes is primarily due to the encryption of \( k_r \) using RSA. Given that both RSA and Pohlig-Hellman encryption/decryption have similar computational costs (as shown in Figure 4), the primary computational task is one modular exponentiation. Therefore, the computational overhead for a user to submit \( n \) tweets is approximately \( 0.1n \) seconds, and the communication overhead is approximately \( 0.7n \) KB.

### 8.3 Model Learning

Once the Service Provider (SP) has received all training samples from users, it only interacts with the Web Server (WS) during the model learning stage. Thus, there is no overhead on the user side. Compared to the original recommendation algorithm [10], we split the model learning task between the SP and the WS. Assuming the communication overhead between the SP and the WS is negligible, the only overhead incurred by pTwitterRec is the cost for the WS to decrypt and obtain the indexes for words contained in tweets, allowing the WS to update the corresponding latent factors of these words.

### 8.4 Tweet Publishing, Receiving, and Ranking

When publishing a tweet, the publisher performs one probabilistic encryption \( E_{ws} \) to encrypt the indexes of all words in the tweet, as described in Section 8.2, and attaches the result to the tweet before publishing it. The computational overhead for the publisher is approximately 91.1 ms, and the communication overhead is approximately 0.7 KB on average. On the server side, the WS needs to perform one decryption to obtain the word indexes for each tweet. As described in Section 5.5, the SP attaches the results of \( \sum_{w \in T_k} q_w \) and \( \sum_{j \in F_u} d_p(j) \) to the tweet before forwarding it to the followers. Therefore, the communication overhead for the followers to receive a tweet is approximately the size of two floating-point numbers, which is eight bytes. We do not consider the overhead incurred by decrypting tweets using the publisher’s secret key shared only among the publisher’s followers, as it is out of the scope of our work.

For tweet ranking, upon receiving a tweet from the SP, the user only needs to compute the explicit features and then predict the rating for the tweet using Equation 4. The overhead incurred by tweet ranking on the user side is negligible, and there is no communication overhead.

### 8.5 Overall Overhead

Users may run the client application on a smartphone with limited computation power and memory. To illustrate the feasibility of pTwitterRec, we analyze the overall overhead incurred on the user side, summarized in Table 2.

- **Model Learning**: Assuming each user submits \( n \) tweets to the SP for training, the computational overhead for a user is approximately \( 2.7n \) seconds, and the communication overhead is approximately \( 7.5n \) KB. Note that a user only needs to submit training samples once, and the tweet recommendation model can be learned offline between the SP and the WS. There are no strict real-time requirements for submitting training samples, and it can take place when the user’s phone is not busy and connected to Wi-Fi.
- **Tweet Publishing**: The computational overhead for the publisher is 91.1 ms, and the communication overhead is 0.7 KB. The publisher can choose not to participate in tweet recommendations by publishing tweets without attaching the encrypted word indexes. However, the publisher’s followers may overlook her tweets as they cannot predict the ratings and rank them. For every received tweet, there is no computational cost for the receiver, and the communication overhead is eight bytes per tweet.
- **Tweet Ranking**: The computational overhead for the user is negligible, and there is no communication overhead.

### Summary

The user-side overhead incurred by pTwitterRec for tweet recommendation model learning is reasonable, and the model learning between the SP and the WS can take place offline. The overhead for publishing and receiving tweets is small, and the overhead for ranking tweets is negligible.

### 9. Conclusions

In this paper, we present pTwitterRec, the first privacy-preserving personalized tweet recommendation framework that provides users with the benefits of tweet recommendations while keeping the content of tweets and users’ interests hidden from unauthorized entities, including the provider. We introduce a semi-trusted third server (WS) to compute the tweet recommendation model in cooperation with users and the SP. The implementation and evaluation show that pTwitterRec is practical and introduces only reasonable overhead. Our future work includes implementing the complete framework of pTwitterRec and evaluating its performance in the real world.

### 10. Acknowledgments

We thank the anonymous reviewers for their helpful comments. This work is supported by a Google Focused Research Award, the Ontario Research Fund, and the Natural Sciences and Engineering Research Council of Canada.

### 11. References

[1] Aïmeur, E., Brassard, G., Fernandez, J.M., and Mani Onana, F.S. Alambic: a privacy-preserving recommender system for electronic commerce. International Journal of Information Security, 7(5), 307–334 (2008).

[2] Bay, S.D. and Schwabacher, M. Mining distance-based outliers in near linear time with randomization and a simple pruning rule. Proceedings of the 9th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (2003), 29–38.

[3] Beato, F., Kohlweiss, M., and Wouters, K. Scramble! your social network data. Proceedings of the 11th International Conference on Privacy Enhancing Technologies (2011), 211–225.

[4] Billsus, D. and Pazzani, M.J. Learning collaborative information filters. Proceedings of the 15th International Conference on Machine Learning (1998), 46–54.

[5] Blei, D.M., Ng, A.Y., and Jordan, M.I. Latent Dirichlet allocation. Journal of Machine Learning Research, 3, 993–1022 (2003).

[6] Breese, J.S., Heckerman, D., and Kadie, C. Empirical analysis of predictive algorithms for collaborative filtering. Proceedings of the 14th conference on Uncertainty in Artificial Intelligence (San Francisco, CA, USA, 1998), 43–52.

[7] Canny, J. Collaborative filtering with privacy. Proceedings of 2002 IEEE Symposium on Security and Privacy (2002), 45–57.

[8] Canny, J. Collaborative filtering with privacy via factor analysis. Proceedings of the 25th Annual International ACM SIGIR Conference on Research and Development in Information Retrieval (New York, NY, USA, 2002), 238–245.

[9] Chen, J., Nairn, R., Nelson, L., Bernstein, M., and Chi, E. Short and tweet: experiments on recommending content from information streams. Proceedings of the SIGCHI Conference on Human Factors in Computing Systems (2010), 1185–1194.

[10] Chen, K., Chen, T., Zheng, G., Jin, O., Yao, E., and Yu, Y. Collaborative personalized tweet recommendation. Proceedings of the 35th International ACM SIGIR Conference on Research and Development in Information Retrieval (2012), 661–670.

[11] Conti, M., Hasani, A., and Crispo, B. Virtual private social networks. Proceedings of the 1st ACM Conference on Data and Application Security and Privacy (2011), 39–50.

[12] De Cristofaro, E., Soriente, C., Tsudik, G., and Williams, A. Hummingbird: privacy at the time of Twitter. Proceedings of 2012 IEEE Symposium on Security and Privacy (SP) (May 2012), 285–299.

[13] Diaz-Aviles, E., Drumond, L., Schmidt-Thieme, L., and Nejdl, W. Real-time top-n recommendation in social streams. Proceedings of the 6th ACM Conference on Recommender Systems (2012), 59–66.

[14] Duan, Y., Jiang, L., Qin, T., Zhou, M., and Shum, H.-Y. An empirical study on learning to rank of tweets. Proceedings of the 23rd International Conference on Computational Linguistics (2010), 295–303.

[15] Feldman, A.J., Blankstein, A., Freedman, M.J., and Felten, E.W. Social networking with Frientegrity: privacy and integrity with an untrusted provider. Proceedings of the 21st USENIX Conference on Security Symposium (Berkeley, CA, USA, 2012), 31–31.

[16] Guha, S., Tang, K., and Francis, P. NOYB: Privacy in online social networks. Proceedings of the 1st Workshop on Online Social Networks (2008), 49–54.

[17] Hannon, J., Bennett, M., and Smyth, B. Recommending Twitter users to follow using content and collaborative filtering approaches. Proceedings of the 4th ACM Conference on Recommender Systems (2010), 199–206.

[18] Hong, L., Bekkerman, R., Adler, J., and Davison, B.D. Learning to rank social update streams. Proceedings of the 35th International ACM SIGIR Conference on Research and Development in Information Retrieval (2012), 651–660.

[19] Joachims, T. Optimizing search engines using clickthrough data. Proceedings of the 8th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (2002), 133–142.

[20] Koren, Y., Bell, R., and Volinsky, C. Matrix factorization techniques for recommender systems. Computer, 42(8), 30–37 (2009).

[21] Kunegis, N.N.T.G.J. and Alhadi, A.C. Bad news travel fast: a content-based analysis of interestingness on Twitter. Proceedings of ACM Web Science Conference (2011).

[22] Lucas, M.M. and Borisov, N. Flybynight: mitigating the privacy risks of social networking. Proceedings of the 7th ACM Workshop on Privacy in the Electronic Society (2008), 1–8.

[23] Luo, W., Xie, Q., and Hengartner, U. Facecloak: an architecture for user privacy on social networking sites. Proceedings of International Conference on Computational Science and Engineering (2009), 26–33.

[24] Pohlig, S. and Hellman, M. An improved algorithm for computing logarithms over GF(p) and its cryptographic significance. Information Theory, IEEE Transactions on, 24(1), 106–110 (1978).

[25] Polat, H. and Du, W. Achieving private recommendations using randomized response techniques. Advances in Knowledge Discovery and Data Mining, 637–646 (2006).

[26] Polat, H. and Du, W. Privacy-preserving collaborative filtering. International Journal of Electronic Commerce, 9(4), 9–35 (2003).

[27] Polat, H. and Du, W. Privacy-preserving collaborative filtering using randomized perturbation techniques. Proceedings of the 3rd IEEE International Conference on Data Mining (Washington, DC, USA, 2003), 625–628.

[28] Polat, H. and Du, W. SVD-based collaborative filtering with privacy. Proceedings of the 2005 ACM symposium on Applied Computing (New York, NY, USA, 2005), 791–795.

[29] Qu, Z. and Liu, Y. Interactive group suggesting for Twitter. Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics: Human Language Technologies (Short Papers) (2011), 519–523.

[30] Rainie, L., Kiesler, S., Kang, R., and Madden, M. 20130905. Anonymity, privacy, and security online. Pew Internet & American Life Project. http://www.pewinternet.org/PPF/r/213/report_display.asp

[31] Ramage, D., Dumais, S.T., and Liebling, D.J. Characterizing microblogs with topic models. Proceedings of the 4th International AAAI Conference on Weblogs and Social Media (2010).

[32] Reeves, S. Internet is double-edged sword in Arab revolts. http://middle-east-online.com/english/?id=46109

[33] Rennie, J.D. and Srebro, N. Fast maximum margin matrix factorization for collaborative prediction. Proceedings of the 22nd International Conference on Machine Learning (2005), 713–719.

[34] Singh, I., Butkiewicz, M., Madhyastha, H.V., Krishnamurthy, S.V., and Addepalli, S. Twitsper: tweeting privately. IEEE Security Privacy, 11(3), 46–50 (2013).

[35] Yang, S.-H., Long, B., Smola, A., Sadagopan, N., Zheng, Z., and Zha, H. Like like alike: joint friendship and interest propagation in social networks. Proceedings of the 20th International Conference on World Wide Web (2011), 537–546.

[36] RT this: OUP Dictionary team monitors Twitterer’s tweets. http://blog.oup.com/2009/06/oxford-twitter/

[37] SVDFeature toolkit. http://svdfeature.apexlab.org/wiki/Main_Page

[38] Twitter statistics. http://www.statisticbrain.com/twitter-statistics/

### Appendix

#### A.1 Latent Factor Model

Collaborative recommendation techniques based on latent factor models have been proven effective in improving recommendation accuracy [20, 33]. In a basic latent factor model, users and items are mapped to a joint low-dimensional latent factor space \( \mathbb{R}^d \). Let \( p_u \) be the low-dimensional representation of user \( u \) in the latent feature space \( \mathbb{R}^d \) and \( q_i \) be the low-dimensional representation of item \( i \) in \( \mathbb{R}^d \). The predicted rating of user \( u \) for item \( i \) is computed as the affinity between user \( u \) and item \( i \) in the latent feature space, i.e., the inner product of \( p_u \) and \( q_i \) in \( \mathbb{R}^d \).

For tweet recommendations, directly applying the basic latent factor model faces the problem of data sparsity due to the lack of retweet data. Chen et al. [9] propose decomposing the latent factor of a tweet (i.e., an item in the basic latent model) into a combination of the latent factors of words contained in the tweet. Therefore, for a given tweet \( k \), \( \sum_{w \in T_k} q_w \) captures the impact of the words contained in tweet \( k \) on user \( u \)'s rating of the tweet, where \( T_k \) is the word set contained in tweet \( k \) and \( q_w \) represents the low-dimensional representation of word \( w \) in the latent feature space \( \mathbb{R}^d \). Furthermore, Chen et al. propose representing the publisher of tweet \( k \) as a latent factor (denoted as \( d_p(k) \)) in \( \mathbb{R}^d \) and measuring the possibility of user \( u \) retweeting tweet \( k \) by considering the affinity of user \( u \) and the publisher of tweet \( k \) in the latent feature space. Therefore, \( \sum_{j \in F_u} d_p(j) \) captures the impact of the social relation between user \( u \) and the publisher of tweet \( k \) on user \( u \)'s rating of the tweet. The values of \( p_u \), \( q_w \), and \( d_p(k) \) are learned through the training as described in Section 5.4.

#### A.2 Pohlig-Hellman Encryption

The Pohlig-Hellman encryption scheme [24] is similar to RSA, with different keys used for encryption and decryption. However, it is not a public-key scheme because the keys are easily derivable from each other; both the encryption and decryption keys must be kept secret.

Given a large prime \( p \) with no small factors of \( p - 1 \), each party chooses a random \( (e, d) \) pair such that \( e \times d = 1 \mod (p - 1) \), where the encryption key is \( e \) and the decryption key is \( d \). For a given message \( M \), the encryption of \( M \) is \( M^e \mod p \), and for a given ciphertext \( C \), the decryption of \( C \) is \( C^d \mod p \). It is straightforward to prove that the Pohlig-Hellman encryption scheme is both deterministic and commutative.

Pohlig-Hellman leaks information about whether the plaintext message \( M \) is a quadratic residue (mod \( p \)) or not. In our framework, the SP computes the index of each word by encrypting the word using Pohlig-Hellman. Because the SP is honest but curious in the threat model, the SP would not manipulate the distribution of word indexes at the risk of being caught. Although we use Pohlig-Hellman encryption for examples in this paper, any encryption scheme that is both deterministic and commutative can be used in our protocol.