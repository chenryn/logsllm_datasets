The size of the ciphertext is approximately equal to the size of (all 
word  indexes  +  one  AES  block  +  initialization  vector  +  the  ci-
phertext of the secret AES key kr encrypted using RSA), which is 
about 0.7 KB in total with a 2048-bit RSA key. The computation-
al overhead for encrypting word indexes is dominated by encrypt-
ing kr using RSA. With the same key size, the computational cost 
for  RSA  encryption/decryption  is  the  same  as  Pohlig-Hellman 
encryption/decryption  (see  Figure  4)  because  the  compute-
intensive  part  for  both  encryption  schemes  is  one  modular  expo-
nentiation. Therefore, the computational overhead at this stage for 
the user to submit n tweets is approximately 0.1n seconds and the 
communication overhead is approximately 0.7n KB for a user. 
8.3  Model Learning 
Once the SP has received all training samples from users, the SP 
only interacts with the WS at the model learning stage. Therefore, 
there is no overhead on the user side. Compared with the original 
recommendation algorithm [10], we split the model learning task 
between the SP and the WS. As we assume  that  the  communica-
tion overhead between the SP and the WS is negligible, the only 
overhead  incurred  by  pTwitterRec  is  the  cost  for  the  WS  to  de-
crypt and obtain the indexes for words contained in tweets, so that 
the WS can update the corresponding latent factors of these words. 
8.4  Tweet Publishing, Receiving and Ranking 
When publishing a tweet, the publisher carries out one probabilis-
tic encryption Ews to encrypt the indexes of all words contained in 
the tweet in the same manner as described in Section  8.2  and  at-
taches  the  result  to  the  tweet  before  publishing  it.  Therefore,  to 
publish  a  tweet,  the  computational  overhead  for  the  publisher  is 
approximately  91.1  ms  and  the  communication  overhead  is  ap-
proximately  0.7  KB  on  average.  The  overhead  incurred  on  the 
server  side  is  that  the  WS  needs  to  perform  one  decryption  to 
obtain  the  word  indexes  for  each  tweet.  As  described  in  Section 
∑  to  the 
5.5,  the  SP  attaches  the  results  of 
and 
jb r∑
j
q
w
,u k
1
k
Z
∈
w T
k
tweet  before  forwarding  it  to  the  followers.  Therefore,  the  com-
munication  overhead  for  the  followers  to  receive  a  tweet  is  ap-
proximately the size of two floating point number, which is eight 
bytes. We do not consider here the overhead incurred by decrypt-
ing  tweets  using  the  publisher’s  secret  key  that  is  shared  only 
among the publisher’s followers, which is out of the scope of our 
work. 
For  tweet  ranking,  upon  receiving  a  tweet  from  the  SP,  the  user 
only needs to  compute  the  explicit  features  and  then  predicts  the 
rating  for  the  tweet  using  equation  4.  Therefore,  the  overhead 
incurred by tweet ranking on the user side is negligible and there 
is no communication overhead. 
8.5  Overall Overhead 
Users may run the client application on a smartphone with limited 
computation power and memory. Therefore, we illustrate the fea-
sibility of pTwitterRec by analyzing the overall overhead incurred 
on the user side. We summarize the results in Table 2. 
For  model  learning,  assuming  that  each  user  submits  n  tweets  to 
the  SP  for  training,  the  computational  overhead  for  a  user  is  ap-
proximately  2.7n  seconds  and  the  communication  overhead  is 
approximately 7.5n KB in total assuming that the user requests the 
index  of  every  single  word  contained  in  the  tweets.  Note  that  a 
user  only  needs  to  submit  training  samples  once  and  the  tweet 
recommendation model can be learned offline between the SP and 
the WS. Therefore, there are no strict real-time requirements for a 
user  to  submit  training  samples  and  it  can  take  place  when  the 
user’s  phone  is  not  busy  and  when  it  has  a  Wi-Fi  connection  to 
the Internet. 
To publish a tweet, the computational overhead for the publisher 
is 91.1 ms and the communication overhead is 0.7 KB. The pub-
lisher can choose to not participate in tweet recommendations by 
just  publishing  tweets  without  attaching  the  encrypted  word  in-
dexes.  However,  the  publisher’s  followers  may  overlook  her 
tweets  as  the  followers  cannot  predict  the  ratings  for  her  tweets 
and rank her tweets. For every received tweet, there is no compu-
tational cost for the receiver and the communication overhead for 
the receiver is eight bytes per tweet. 
For  tweet  ranking,  the  computational  overhead  for  the  user  is 
negligible and there is no communication overhead.  
Summary.  The  user  side  overhead  incurred  by  pTwitterRec  for 
tweet recommendation model learning is reasonable and the mod-
el learning between the SP and the WS can take place offline. The 
overhead  for  publishing  and  receiving  tweets  incurred  by  pTwit-
terRec is small and the overhead for ranking tweets is negligible. 
9.  CONCLUSIONS 
In this paper, we present pTwitterRec, the first privacy-preserving 
personalized  tweet  recommendation  framework  that  provides 
374users  with  the  benefits  of  tweet  recommendations  while  keeping 
the content of tweets and users’ interests hidden from other unau-
thorized  entities  including  the  provider.  We  introduce  a  semi-
trusted  third  server  (WS)  to  compute  the  tweet  recommendation 
model, in cooperation with users and the SP. The implementation 
and evaluation show that pTwitterRec is practical and only intro-
duces reasonable overhead. Our future work includes implement-
ing  the  complete  framework  of  pTwitterRec  and  evaluating  the 
performance in the real world.  
10.  ACKNOWLEDGMENTS 
We  thank  the  anonymous  reviewers  for  their  helpful  comments. 
This work is supported by a Google Focused Research Award, the 
Ontario Research Fund, and the Natural Sciences and Engineering 
Research Council of Canada. 
11.  REFERENCES 
[1]  Aïmeur, E., Brassard, G., Fernandez, J.M. and Mani Onana, 
F.S. Alambic: a privacy-preserving recommender system for 
electronic  commerce.  International  Journal  of  Information 
Security. 7, 5 (2008), 307–334. 
[2]  Bay, S.D. and Schwabacher, M. Mining distance-based out-
liers  in  near  linear  time  with  randomization  and  a  simple 
pruning rule. Proceedings of the 9th ACM SIGKDD Interna-
tional  Conference  on  Knowledge  Discovery  and  Data  Min-
ing (2003), 29–38. 
[3]  Beato,  F.,  Kohlweiss,  M.  and  Wouters,  K.  Scramble!  your 
social  network  data.  Proceedings  of  the  11th  International 
Conference  on  Privacy  Enhancing  Technologies  (2011), 
211–225. 
[4]  Billsus,  D.  and  Pazzani,  M.J.  Learning  collaborative  infor-
mation filters. Proceedings of the 15th International Confe-
rence on Machine Learning (1998), 46–54. 
[5]  Blei, D.M., Ng, A.Y. and Jordan, M.I. Latent dirichlet allo-
cation.  Journal  of  Machine  Learning  research.  3,  (2003), 
993–1022. 
[6]  Breese, J.S., Heckerman, D. and Kadie, C. Empirical analy-
sis  of  predictive  algorithms  for  collaborative  filtering.  Pro-
ceedings of the 14th conference on Uncertainty in Artificial 
Intelligence (San Francisco, CA, USA, 1998), 43–52. 
[7]  Canny,  J.  Collaborative  filtering  with  privacy.  Proceedings 
of  2002  IEEE  Symposium  on  Security  and  Privacy  (2002), 
45–57. 
[8]  Canny,  J.  Collaborative  filtering  with  privacy  via  factor 
analysis. Proceedings of the 25th Annual International ACM 
SIGIR  Conference  on  Research  and  Development  in  Infor-
mation Retrieval (New York, NY, USA, 2002), 238–245. 
[9]  Chen,  J.,  Nairn,  R.,  Nelson,  L.,  Bernstein,  M.  and  Chi,  E. 
2010.  Short  and  tweet:  experiments  on  recommending  con-
tent  from  information  streams.  Proceedings  of  the  SIGCHI 
Conference  on  Human  Factors  in  Computing  Systems 
(2010), 1185–1194. 
[10]  Chen, K., Chen, T., Zheng, G.,  Jin,  O.,  Yao,  E.  and  Yu,  Y. 
Collaborative personalized tweet recommendation. Proceed-
ings  of  the  35th  International  ACM  SIGIR  Conference  on 
Research and Development in Information Retrieval (2012), 
661–670. 
[11]  Conti,  M.,  Hasani,  A.  and  Crispo,  B.  Virtual  private  social 
networks. Proceedings of the 1st ACM Conference  on  Data 
and Application Security and Privacy (2011), 39–50. 
[12]  De Cristofaro, E., Soriente, C., Tsudik, G. and Williams, A. 
Hummingbird: privacy at the time of Twitter. Proceedings of 
2012  IEEE  Symposium  on  Security  and  Privacy  (SP)  (May 
2012), 285 –299. 
[13]  Diaz-Aviles,  E.,  Drumond,  L.,  Schmidt-Thieme,  L.  and 
Nejdl, W. Real-time top-n recommendation in social streams. 
Proceedings  of  the  6th  ACM  Conference  on  Recommender 
Systems (2012), 59–66. 
[14]  Duan, Y., Jiang, L., Qin, T., Zhou, M. and Shum, H.-Y. An 
empirical study on learning to rank of tweets. Proceedings of 
the  23rd  International  Conference  on  Computational  Lin-
guistics (2010), 295–303. 
[15]  Feldman,  A.J.,  Blankstein,  A.,  Freedman,  M.J.  and  Felten, 
E.W. Social  networking  with  Frientegrity:  privacy  and  inte-
grity  with  an  untrusted  provider.  Proceedings  of  the  21st 
USENIX Conference on Security Symposium (Berkeley, CA, 
USA, 2012), 31–31. 
[16]  Guha, S., Tang, K. and Francis, P. NOYB: Privacy in online 
social networks. Proceedings of the 1st Workshop on Online 
Social Networks (2008), 49–54. 
[17]  Hannon, J., Bennett, M. and Smyth, B. Recommending twit-
ter  users  to  follow  using  content  and  collaborative  filtering 
approaches. Proceedings of the 4th ACM Conference on Re-
commender Systems (2010), 199–206. 
[18]  Hong,  L.,  Bekkerman,  R.,  Adler,  J.  and  Davison,  B.D. 
Learning  to  rank  social  update  streams.  Proceedings  of  the 
35th International ACM SIGIR Conference on Research and 
Development in Information Retrieval (2012), 651–660. 
[19]  Joachims,  T.  Optimizing  search  engines  using  clickthrough 
data.  Proceedings  of  the  8th  ACM  SIGKDD  International 
Conference  on  Knowledge  Discovery  and  Data  Mining 
(2002), 133–142. 
[20]  Koren,  Y.,  Bell,  R.  and  Volinsky,  C.  Matrix  factorization 
techniques  for  recommender  systems.  Computer.  42,  8 
(2009), 30–37. 
[21]  Kunegis, N.N.T.G.J. and Alhadi, A.C. Bad news travel fast: 
a  content-based  analysis  of  interestingness  on  twitter.  Pro-
ceedings of ACM Web Science Conference (2011). 
[22]  Lucas,  M.M.  and  Borisov,  N.  Flybynight:  mitigating  the 
privacy  risks  of  social  networking.  Proceedings  of  the  7th 
ACM Workshop on Privacy in the Electronic Society (2008), 
1–8. 
[23]  Luo, W., Xie, Q. and Hengartner, U. Facecloak: an architec-
ture for user privacy on social networking sites. Proceedings 
of  International  Conference  on  Computational  Science  and 
Engineering (2009), 26–33. 
[24]  Pohlig,  S.  and  Hellman,  M.  An  improved  algorithm  for 
computing logarithms over GF (p) and its cryptographic sig-
nificance. Information Theory, IEEE Transactions on. 24, 1 
(1978), 106–110. 
[25]  Polat,  H.  and  Du,  W.  Achieving  private  recommendations 
using  randomized  response  techniques.  Advances  in  Know-
ledge Discovery and Data Mining. (2006), 637–646. 
[26]  Polat, H. and Du, W. Privacy-preserving collaborative filter-
ing.  International  Journal  of  Electronic  Commerce.  9,  4 
(2003), 9–35. 
[27]  Polat, H. and Du, W. Privacy-preserving collaborative filter-
ing  using  randomized  perturbation  techniques.  Proceedings 
of  the  3rd  IEEE  International  Conference  on  Data  Mining 
(Washington, DC, USA, 2003), 625–628. 
[28]  Polat, H. and Du, W. SVD-based collaborative filtering with 
privacy.  Proceedings  of  the  2005  ACM  symposium  on  Ap-
plied Computing (New York, NY, USA, 2005), 791–795. 
[29]  Qu, Z. and Liu, Y. Interactive group suggesting for Twitter. 
Proceedings  of  the  49th  Annual  Meeting  of  the  Association 
375for Computational Linguistics: Human Language Technolo-
gies (Short Papers) (2011), 519–523. 
[30]  Rainie, L., Kiesler, S., Kang, R. and Madden, M. 20130905. 
Anonymity,  privacy,  and  security  online.  Pew  Internet  & 
American Life Project. 
http://www.pewinternet.org/PPF/r/213/report_display.asp,  
[31]  Ramage, D., Dumais, S.T. and Liebling, D.J. Characterizing 
microblogs with topic models. Proceedings of the 4th Inter-
national  AAAI  Conference  on  Weblogs  and  Social  Media 
(2010). 
[32]  Reeves, S. Internet is double-edged sword in Arab revolts. 
http://middle-east-online.com/english/?id=46109 
[33]  Rennie,  J.D.  and  Srebro,  N.  Fast  maximum  margin  matrix 
factorization for collaborative prediction. Proceedings of the 
22nd International Conference on Machine Learning (2005), 
713–719. 
[34] Singh, I., Butkiewicz, M., Madhyastha, H.V., Krishnamurthy, 
S.V.  and  Addepalli,  S.  Twitsper:  tweeting  privately.  IEEE 
Security Privacy. 11, 3 (2013), 46–50. 
[35]  Yang, S.-H., Long, B., Smola, A., Sadagopan, N., Zheng, Z. 
and  Zha,  H.  Like  like  alike:  joint  friendship  and  interest 
propagation in social networks. Proceedings  of  the  20th  In-
ternational  Conference  on  World  Wide  Web  (2011),  537–
546. 
[36]  RT  this:  OUP  Dictionary  team  monitors  Twitterer’s  tweets. 
http://blog.oup.com/2009/06/oxford-twitter/ 
[37]  SVDFeature toolkit. 
http://svdfeature.apexlab.org/wiki/Main_Page 
[38]  Twitter statistics.  
http://www.statisticbrain.com/twitter-statistics/ 
A: Appendix 
A.1 Latent Factor Model 
Collaborative  recommendation  techniques  based  on  latent  factor 
models have been proved to be effective in improving recommen-
dation accuracy [20, 33]. In a basic latent factor model, users and 
items are mapped to a joint low-dimensional latent factor space Rd. 
Let pu be the low dimensional representation of user u in the latent 
feature  space  Rd  and  qi  be  the  low  dimensional  representation  of 
item i in Rd. The predicted rating of user u for item i is computed 
as the affinity between user u and item i in the latent feature space, 
i.e., the inner product of pu and qi in Rd. 
For  tweet  recommendations,  directly  applying  the  basic  latent 
factor model faces the problem of data sparsity due to the lack of 
retweet data. Chen et al. [9] propose decomposing the latent factor 
of a tweet (i.e., an item in the basic latent model) into a combina-
tion  of  the  latent  factors  of  words  contained  in  the  tweet.  There-
∑ captures  the  impact  of  the 
fore,  for  a  given  tweet  k, 
T
p
u
q
w
∈
w T
k
words contained in tweet k on user u’s rating of the tweet, where 
Tk is the word set contained in tweet k and qw represents the  low 
dimensional  representation  of  word  w  in  the  latent  feature  space 
Rd. Furthermore, Chen et al. propose representing the publisher of 
tweet k as a latent factor (denoted as dp(k)) in Rd as well and mea-
suring the possibility of user u retweeting tweet k by considering 
the affinity of user i and the publisher of tweet k in the latent fea-
ture  space.  Therefore, 
captures  the  impact  of  the  social 
p d
T
u
p k
(
)
relation  between  user  u  and  the  publisher  of  tweet  k  on  user  u’s 
rating  of  the  tweet.  The  values  of  pu,  qw  and  dp(k)  are  learned 
through the training as described in Section 5.4. 
A.2 Pohlig-Hellman Encryption 
The  Pohlig-Hellman  encryption  scheme  [24]  is  similar  to  RSA. 
Different keys are used for encryption and decryption. However, it 
is not a public-key scheme, because the keys are  easily  derivable 
from each other; both the encryption and decryption keys must be 
kept secret.  
Given  a  large  prime  p  with  no  small  factors  of  p  -  1,  each  party 
chooses  a  random  (e,  d)  pair  such  that  e  ×  d  =  1  (mod  p  –  1) 
where  the  encryption  key  is  e  and  the  decryption  key  is  d.  For  a 
given  message  M,  the  encryption  of  M  is  Me  (mod  p)  and  for  a 
given  ciphertext  C,  the  decryption  of  C  is  Cd  (mod  p).  It  is 
straightforward  to  prove  that  the  Pohlig-Hellman  encryption 
scheme is both deterministic and commutative.  
Pohlig-Hellman  leaks  the  information  whether  the  plaintext  mes-
sage M is quadratic residue (mod p) or not. In our framework, the 
SP computes the index of each word by encrypting the word using 
Pohlig-Hellman.  Because  the  SP  is  honest  but  curious  in  the 
threat  model,  the  SP  would  not  manipulate  the  distribution  of 
word indexes at the risk of being caught. Although we use Pohlig-
Hellman  encryption  for  examples  in  this  paper,  any  encryption 
scheme that is both deterministic and commutative can be used in 
our protocol. 
376