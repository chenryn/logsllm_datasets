>>> import imapclient
>>> imapObj = imapclient.IMAPClient('imap.gmail.com', ssl=True)
>>> imapObj.login('PI:EMAIL', 'MY_SECRET_PASSWORD')
'PI:EMAIL Jane Doe authenticated (Success)'
>>> imapObj.select_folder('INBOX', readonly=True)
>>> UIDs = imapObj.search(['SINCE 05-Jul-2014'])
>>> UIDs
[40032, 40033, 40034, 40035, 40036, 40037, 40038, 40039, 40040, 40041]
>>> rawMessages = imapObj.fetch([40041], ['BODY[]', 'FLAGS'])
>>> import pyzmail
>>> message = pyzmail.PyzMessage.factory(rawMessages[40041]['BODY[]'])
>>> message.get_subject()
'Hello!'
>>> message.get_addresses('from')
[('Edward Snowden', 'PI:EMAIL')]
>>> message.get_addresses('to')
[(Jane Doe', 'PI:EMAIL')]
>>> message.get_addresses('cc')
[]
>>> message.get_addresses('bcc')
[]
>>> message.text_part != None
True
>>> message.text_part.get_payload().decode(message.text_part.charset)
'Follow the money.\r\n\r\n-Ed\r\n'
>>> message.html_part != None
True
>>> message.html_part.get_payload().decode(message.html_part.charset)
'So long, and thanks for all the fish!-
Al\r\n'
>>> imapObj.logout()
你不必记住这些步骤。在详细介绍每一步之后，你可以回来看这个概述，加强记忆。
16.4.1 连接到IMAP 服务器
就像你需要一个SMTP对象连接到SMTP服务器并发送电子邮件一样，你需要
一个 IMAPClient 对象，连接到 IMAP 服务器并接收电子邮件。首先，你需要电子
邮件服务提供商的 IMAP 服务器域名。这和 SMTP 服务器的域名不同。表 16-2 列
出了几个流行的电子邮件服务提供商的IMAP服务器。
表16-2 电子邮件提供商及其IMAP服务器
提供商 IMAP服务器域名
Gmail imap.gmail.com
Outlook.com/Hotmail.com imap-mail.outlook.com
Yahoo Mail imap.mail.yahoo.com
AT&T imap.mail.att.net
Comcast imap.comcast.net
Verizon incoming.verizon.net
得到IMAP服务器域名后，调用imapclient.IMAPClient()函数，创建一个IMAPClient
Python编程快速上手——让繁琐工作自动化
对象。大多数电子邮件提供商要求SSL加密，传入SSL= TRUE关键字参数。在交
互式环境中输入以下代码（使用你的提供商的域名）：
>>> import imapclient
>>> imapObj = imapclient.IMAPClient('imap.gmail.com', ssl=True)
在接下来的小节里所有交互式环境的例子中，imapObj变量将包含imapclient.IMAPClient()
函数返回的IMAPClient对象。在这里，客户端是连接到服务器的对象。
16.4.2 登录到IMAP 服务器
取得 IMAPClient 对象后，调用它的 login()方法，传入用户名（这通常是你的
电子邮件地址）和密码字符串。
>>> imapObj.login('PI:EMAIL', 'MY_SECRET_PASSWORD')
'PI:EMAIL Jane Doe authenticated (Success)'
要记住，永远不要直接在代码中写入密码！应该让程序从input()接受输入的密码。
如果IMAP服务器拒绝用户名/密码的组合，Python会抛出imaplib.error异常。
对于Gmail账户，你可能需要使用应用程序专用的密码。详细信息请参阅16.2.5节
中的“Gmail应用程序专用密码”。
16.4.3 搜索电子邮件
登录后，实际获取你感兴趣的电子邮件分为两步。首先，必须选择要搜索的文件
夹。然后，必须调用IMAPClient对象的search()方法，传入IMAP搜索关键词字符串。
16.4.4 选择文件夹
几乎每个账户默认都有一个INBOX文件夹，但也可以调用IMAPClient对象的
list_folders()方法，获取文件夹列表。这将返回一个元组的列表。每个元组包含一个
文件夹的信息。输入以下代码，继续交互式环境的例子：
>>> import pprint
>>> pprint.pprint(imapObj.list_folders())
[(('\\HasNoChildren',), '/', 'Drafts'),
(('\\HasNoChildren',), '/', 'Filler'),
(('\\HasNoChildren',), '/', 'INBOX'),
(('\\HasNoChildren',), '/', 'Sent'),
--snip--
(('\\HasNoChildren', '\\Flagged'), '/', '[Gmail]/Starred'),
(('\\HasNoChildren', '\\Trash'), '/', '[Gmail]/Trash')]
如果你有一个Gmail 账户，这就是输出可能的样子（Gmail 将文件夹称为label，
但它们的工作方式与文件夹相同）。每个元组的三个值，例如 (('\\HasNoChildren',), '/',
'INBOX')，解释如下：
 该文件夹的标志的元组（这些标志代表到底是什么超出了本书的讨论范围，你
第16章 发送电子邮件和短信
可以放心地忽略该字段）。
 名称字符串中用于分隔父文件夹和子文件夹的分隔符。
 该文件夹的全名。
要选择一个文件夹进行搜索，就调用IMAPClient对象的select_folder()方法，传入
该文件夹的名称字符串。
>>> imapObj.select_folder('INBOX', readonly=True)
可以忽略 select_folder()的返回值。如果所选文件夹不存在，Python 会抛出
imaplib.error异常。
readonly=True关键字参数可以防止你在随后的方法调用中，不小心更改或删除
该文件夹中的任何电子邮件。除非你想删除的电子邮件，否则将 readonly 设置为True
总是个好主意。
16.4.5 执行搜索
文件夹选中后，就可以用IMAPClient对象的search()方法搜索电子邮件。search()
的参数是一个字符串列表，每一个格式化为IMAP搜索键。表16-3介绍了各种搜索键。
表16-3 IMAP搜索键
搜索键 含义
'ALL' 返回该文件夹中的所有邮件。如果你请求一个大文件夹中的所有消息，可能会遇到
imaplib的大小限制。参见16.4.6小节“大小限制”
'BEFORE date', 这三个搜索键分别返回给定date之前、当天和之后IMAP服务器接收的消息。日期的
'ON date', 格式必须像05-Jul-2015。此外，虽然'SINCE 05-Jul-2015'将匹配7月5日当天和之后的
'SINCE date' 消息，但'BEFORE 05-Jul-2015'仅匹配7月5日之前的消息，不包括7月5日当天
'SUBJECT string', 分别返回string出现在主题、正文、主题或正文中的消息。如果string中有空格，就
'BODY string', 使用双引号：'TEXT "search with spaces"'
'TEXT string'
'FROM string', 返回所有消息，其中string分别出现在“from”邮件地址，“to”邮件地址，“cc”（抄
'TO string', 送）地址，或“bcc”（密件抄送）地址中。 如果string中有多个电子邮件地址，就
'CC string', 用空格将它们分开，并使用双引号： 'CC "PI:EMAIL
'BCC string' PI:EMAIL"'
'SEEN', 分别返回包含和不包含\ Seen标记的所有信息。如果电子邮件已经被fetch()方法调用
'UNSEEN' 访问（稍后描述），或者你曾在电子邮件程序或网络浏览器中点击过它，就会有\ Seen
标记。比较常用的说法是电子邮件“已读”，而不是“已看”，但它们的意思一样。
'ANSWERED', 分别返回包含和不包含\ Answered标记的所有消息。如果消息已答复，就会有\
'UNANSWERED' Answered标记
'DELETED', 分别返回包含和不包含\Deleted标记的所有信息。用delete_messages()方法删除的邮件就会
'UNDELETED' 有\Deleted标记，直到调用expunge()方法才会永久删除（请参阅16.4.10节“删除电子邮件”）。
请注意，一些电子邮件提供商，例如Gmail，会自动清除邮件
'DRAFT', 分别返回包含和不包含\ Draft标记的所有消息。草稿邮件通常保存在单独的草稿文
'UNDRAFT' 件夹中，而不是在收件箱中
Python编程快速上手——让繁琐工作自动化
续表
搜索键 含义
'FLAGGED', 分别返回包含和不包含\Flagged标记的所有消息。这个标记通常用来标记电子邮件
'UNFLAGGED' 为“重要”或“紧急”
'LARGER N', 分别返回大于或小于N个字节的所有消息
'SMALLER N'
'NOT search-key' 返回搜索键不会返回的那些消息
'OR search-key1 返回符合第一个或第二个搜索键的消息
search-key2'
请注意，在处理标志和搜索键方面，某些IMAP服务器的实现可能稍有不同。
可能需要在交互式环境中试验一下，看看它们实际的行为如何。
在传入 search()方法的列表参数中，可以有多个 IMAP 搜索键字符串。返回的
消息将匹配所有的搜索键。如果想匹配任何一个搜索键，使用OR搜索键。对于NOT
和OR搜索键，它们后边分别跟着一个和两个完整的搜索键。
下面是search()方法调用的一些例子，以及它们的含义：
imapObj.search(['ALL']) 返回当前选定的文件夹中的每一个消息。
imapObj.search(['ON 05-Jul-2015'])返回在2015年7月5日发送的每个消息。
imapObj.search(['SINCE 01-Jan-2015', 'BEFORE 01-Feb-2015', 'UNSEEN'])
返回2015年1月发送的所有未读消息（注意，这意味着从1月1日直到2月1日，
但不包括2月1日）。
imapObj.search(['SINCE 01-Jan-2015', 'FROM PI:EMAIL'])返回自
2015年开始以来，发自PI:EMAIL的消息。
imapObj.search(['SINCE 01-Jan-2015', 'NOT FROM PI:EMAIL'])返
回自2015年开始以来，除PI:EMAIL外，其他所有人发来的消息。
imapObj.search(['OR FROM PI:EMAIL FROM PI:EMAIL'])
返回发自PI:EMAIL或PI:EMAIL的所有信息。
imapObj.search(['FROM PI:EMAIL', 'FROM PI:EMAIL'])
恶作剧例子！该搜索不会返回任何消息，因为消息必须匹配所有搜索关键词。因为
只能有一个“from”地址，所以一条消息不可能既来自PI:EMAIL，又来自
PI:EMAIL。
search()方法不返回电子邮件本身，而是返回邮件的唯一整数ID（UID）。然后，
可以将这些UID传入fetch()方法，获得邮件内容。
输入以下代码，继续交互式环境的例子：
>>> UIDs = imapObj.search(['SINCE 05-Jul-2015'])
>>> UIDs
[40032, 40033, 40034, 40035, 40036, 40037, 40038, 40039, 40040, 40041]
这里，search()返回的消息ID列表（针对7月5日以来接收的消息）保存在UIDs
第16章 发送电子邮件和短信
中。计算机上返回的 UIDs 列表与这里显示的不同，它们对于特定的电子邮件账户
是唯一的。如果你稍后将 UID 传递给其他函数调用，请用你收到的 UID 值，而不
是本书例子中打印的。
16.4.6 大小限制
如果你的搜索匹配大量的电子邮件，Python 可能抛出异常 imaplib.error: got
more than 10000 bytes。如果发生这种情况，必须断开并重连IMAP服务器，然后再试。
这个限制是防止Python程序消耗太多内存。遗憾的是，默认大小限制往往太小。
可以执行下面的代码，将限制从10000字节改为10000000字节：
>>> import imaplib
>>> imaplib._MAXLINE = 10000000
这应该能避免该错误消息再次出现。也许要在你写的每一个IMAP程序中加上
这两行。
16.4.7 取邮件并标记为已读
得到 UID 的列表后，可以调用 IMAPClient 对象的 fetch()方法，获得实际的电
子邮件内容。
UID列表是fetch()的第一个参数。第二个参数应该是['BODY[]']，它告诉fetch()
下载UID列表中指定电子邮件的所有正文内容。
使用IMAPClient的gmail_search()方法
如果登录到imap.gmail.com服务器来访问Gmail账户，IMAPClient对象提供了
一个额外的搜索函数，模拟Gmail网页顶部的搜索栏，如图16-1中高亮的部分所示。
图16-1 在Gmail网页顶部的搜索栏
Python编程快速上手——让繁琐工作自动化
除了用IMAP搜索键搜索，可以使用Gmail更先进的搜索引擎。Gmail在匹
配密切相关的单词方面做得很好（例如，搜索driving也会匹配drive和drove），
并按照匹配的程度对搜索结果排序。也可以使用Gmail的高级搜索操作符（更多
信息请参见 http://nostarch.com/automatestuff/）。如果登录到 Gmail 账户，向
gmail_search()方法传入搜索条件，而不是search()方法，就像下面交互式环境的例子：
>>> UIDs = imapObj.gmail_search('meaning of life')
>>> UIDs
[42]
啊，是的，那封电子邮件包含了生命的意义！我一直在期待。
让我们继续交互式环境的例子。
>>> rawMessages = imapObj.fetch(UIDs, ['BODY[]'])
>>> import pprint
>>> pprint.pprint(rawMessages)
{40040: {'BODY[]': 'Delivered-To: PI:EMAIL\r\n'
'Received: by 10.76.71.167 with SMTP id '
--snip--
'\r\n'
'------=_Part_6000970_707736290.1404819487066--\r\n',
'SEQ': 5430}}
导入 pprint，将 fetch()的返回值（保存在变量 rawMessages 中）传入 pprint.pprint()，
“漂亮打印”它。你会看到，这个返回值是消息的嵌套字典，其中以 UID 作为键。
每条消息都保存为一个字典，包含两个键：'BODY[]'和'SEQ'。'BODY[]'键映射到电子
邮件的实际正文。'SEQ'键是序列号，它与UID的作用类似。你可以放心地忽略它。
正如你所看到的，在'BODY[]'键中的消息内容是相当难理解的。这种格式称为
RFC822，是专为IMAP服务器读取而设计的。但你并不需要理解RFC 822格式，本章
稍后的pyzmail模块将替你来理解它。
如果你选择一个文件夹进行搜索，就用 readonly=True 关键字参数来调用 select_
folder()。这样做可以防止意外删除电子邮件，但这也意味着你用fetch()方法获取邮
件时，它们不会标记为已读。如果确实希望在获取邮件时将它们标记已读，就需要