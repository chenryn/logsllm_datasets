the honest parties. The simulation of init is identical to that of init in Fmult and so is not repeated
here. We describe now the simulator for check. S sends (check, i, U, V, di) to FcheckDH for every
i ∈ I, using the same di as in the init subprotocol. S receives back accept or reject.
1. S invokes A and simulates F RRE
com-zk sending Pi the message (ProofReceipt, sid, j) for every i ∈ I
and j ∈ J.
2. S receives the messages (ComProve, sid, i, (U, V, Ui, Vi), (αi, ρi)) that A sends to F RRE
com-zk for every
i ∈ I.
3. If S received accept from FcheckDH, then it chooses a random γ ∈ Zq and sets U(cid:48) = γ · G
and V (cid:48) = γ · P (and so (G,P, U(cid:48), V (cid:48)) is a random Diﬃe-Hellman tuple). Let j∗ ∈ J. Then,
for every j ∈ J \ {j∗}, simulator S computes Uj, Vj like an honest Pj. Then, S∗ computes
Uj∗ = U(cid:48) −(cid:80)
j ∈ J (and sets U(cid:48) =(cid:80)n
(cid:96)(cid:54)=j∗ U(cid:96) and Vj∗ = V (cid:48) −(cid:80)
(cid:96) and V (cid:48) =(cid:80)n
(cid:96)=1 U(cid:48)
(cid:96)(cid:54)=j∗ V(cid:96).
(cid:96)=1 V (cid:48)
(cid:96) ).
4. If S received reject from FcheckDH, then S chooses independent random U(cid:48)
j, V (cid:48)
j ∈ G for every
zk
5. S simulates F RRE
6. S receives the message (DecomProof, sid, i) that A sends to F RRE
sending Pi the message (DecomProof, sid, j, (U, V, Uj, Vj), 1) for every j ∈ J.
com-zk for every i ∈ I. If (Ui, Vi) (cid:54)=
(αi · U + ρi · G, αi · V + ρi · P) for some i ∈ I, then S simulates the honest parties aborting in
the real world, sends abort to FcheckDH and halts.
for each j ∈ J under the constraint that (cid:80)n
7. S receives the messages (DecomProof, sid) from A for each corrupted party. Then, if S received
j ∈ G
(cid:96) = V (cid:48). In contrast, if S received reject from
(cid:96), then S outputs
j ∈ G for every j ∈ J. If V (cid:48) =(cid:80)n
accept from FcheckDH, it computes U(cid:48)
FcheckDH, then S just chooses random U(cid:48)
fail and halts.
i = di · G for every i ∈ I, and chooses random U(cid:48)
(cid:96)=1 U(cid:48)
(cid:96)=1 U(cid:48)
8. S simulates F RDH
zk
handing A the messages (proof, sid, j, (G, U(cid:48),Pj, U(cid:48)
j), 1) for every j ∈ J.
33
9. S receives the messages (proof, sid, i, (G, U(cid:48),Pi, U(cid:48)
for every i ∈ I.
Simulator S checks that sid is correct, U(cid:48) and Pi are correct and that Pi = di· G and U(cid:48)
i = di· U(cid:48)
for every i ∈ I. If not, it simulates the honest parties aborting in the protocol, sends abort to
FcheckDH, and aborts.
i ), di) that A sends to F RDH
zk
10. If no abort took place (or fail), then S sends (continue, j) to FcheckDH for every j ∈ J (for the
(cid:96)=1 U(cid:48)
(cid:96)∈[n]\{j} U(cid:48)
honest parties to receive output).
The proof below relies on the fact that if (G,P, U, V ) is a Diﬃe-Hellman tuple, then (G,P, U(cid:48), V (cid:48))
is a random Diﬃe-Hellman tuple, and if (G,P, U, V ) is not a Diﬃe-Hellman tuple then U(cid:48), V (cid:48) are in-
dependent random group elements. This is guaranteed in the protocol in the F RRE
com-zk-hybrid model,
since the adversary is (perfectly) committed to its Ui, Vi before seeing the honest parties’ Uj, Vj
values. We consider two cases:
Case 1 – the output from FcheckDH is accept: This means that V = (cid:80)n
(cid:80)n
(cid:96)=1(d(cid:96) · U(cid:48)) = (cid:80)n
j = V (cid:48) −(cid:80)
(cid:96)=1(d(cid:96) · U ) and so V (cid:48) =
(cid:96). Observe that if there are t = n − 1 corrupted parties and exactly
one honest party Pj, the simulation is perfect. This follows from the fact that S can compute
(cid:96)s of the corrupted parties and (G,P, U(cid:48), V (cid:48))
U(cid:48)
is a random Diﬃe-Hellman tuple, exactly like in a real execution. Thus, we focus only on the
case where there are at least two honest parties. In this case, we need to show that the output
distributions from the real and simulated executions are indistinguishable.
We prove this by reducing it to the DDH assumption. Let D be a distinguisher who receives
(G, G, q) and a series of |J| − 1 tuples (G, ˆU , ˆPj, ˆUj) for j ∈ J \ {j∗}, where all tuples are either
random, or are Diﬃe-Hellman tuples (with ˆU ∈ G is random and the same in all tuples). We denote
by j∗ the index of one of the honest parties. The distinguisher D works as follows:
1. D works exactly like S in the init phase, setting Pi = di · G for every i ∈ I. However, for
j ∈ J \{j∗}, D sets Pj = ˆPj instead of choosing it at random. In addition, D sets (U, V ) to be a
(cid:96)(cid:54)=j∗ P(cid:96).
2. D invokes A on input (check, i, U, V ) and runs the simulator instructions, withe following
random Diﬃe-Hellman tuple. Finally, D chooses a random d ∈ Zq and sets Pj∗ = d·G−(cid:80)
(cid:96) as it knows in advance all U(cid:48)
changes:
(a) Instead of choosing a random Diﬃe-Hellman tuple (U(cid:48), V (cid:48)) in Step 3 of the simulation, D
deﬁnes U(cid:48) = ˆU and V (cid:48) = d · U(cid:48). Then, it chooses the Uj, Vj values of the honest parties as
described in the simulation.
(b) When deﬁning U(cid:48)
j for j ∈ J in Step 8 of the simulation, D sets U(cid:48)
j∗ like in the simulation (i.e, when choosing the U(cid:48)
j = ˆUj for every j ∈ J\{j∗}
j under the constraint, all U(cid:48)
j
and sets U(cid:48)
for j (cid:54)= j∗ are set to ˆUj, and U(cid:48)
j∗ is chosen to fulﬁll the constraint).
Observe that if the tuples D received are not Diﬃe-Hellman tuples, then the distribution generated
j for j ∈ J \ {j∗} are random, exactly like for
is exactly that of the simulator. This is because all U(cid:48)
S, and this is the only diﬀerence. (Note that U(cid:48), V (cid:48) generated by D are exactly like S because they
are a random Diﬃe-Hellman tuple, computing using a random d. Likewise, all Pi have the same
distribution.)
In contrast, if the tuples D received are Diﬃe-Hellman tuples, then the distribution is exactly
like a real execution for case that the output is accept. This is due to the fact that all values are
Diﬃe-Hellman tuples, just like honest parties produce.
34
Case 2: the output from FcheckDH is reject: This case diﬀers from the previous one in that the
simulator chooses U(cid:48), V (cid:48) to be random elements (and not a random Diﬃe-Hellman tuple). As
j values for j ∈ J which are
above, the distribution is identical to a real execution, except for the U(cid:48)
randomly chosen by S. The reduction to DDH here is very similar to above. The only diﬀerence in
this case can occur when the bad event happens, in which case the parties accept in a real execution
but reject in the ideal world, indicated by S outputting fail. As we have noted above, this happens
with probability only 1/q which is negligible.
This concludes the proof.
Acknowledgements
We thank Valery Osheter from Unbound Tech Ltd. for the implementation of the ECDSA protocol
and for running the experiments, and Rosario Gennaro and Steven Goldfeder for helpful discussions.
References
[1] O. Blazy, C. Chevalier, D. Pointcheval and D. Vergnaud. Analysis and Improvement of
Lindell’s UC-Secure Commitment Schemes. In ACNS 2013, Springer (LNCS 7954), pages
534–551, 2013.
[2] F. Boudot. Eﬃcient Proofs That a Committed Number Lies in an Interval. In EUROCRYPT
2000, Springer (LNCS 1807), pages 431–444, 2000.
[3] C. Boyd. Digital Multisignatures. In Cryptography and Coding, pages 241–246, 1986.
[4] D. Boneh, R. Gennaro and S. Goldfeder. Using Level-1 Homomorphic Encryption To Im-
prove Threshold DSA Signatures For Bitcoin Wallet Security In Latincrypt 2017.
[5] R. Canetti. Security and Composition of Multiparty Cryptographic Protocols. Journal of
Cryptology, 13(1):143–202, 2000.
[6] R. Canetti.
graphic Protocols.
http://eprint.iacr.org/2000/067.
Universally Composable Security:
A New Paradigm for Crypto-
In 42nd FOCS, pages 136–145, 2001. Full version available at
[7] A. Chan, Y. Frankel and Y. Tsiounis. Easy Come - Easy Go Divisible Cash. Updated version
with corrections, GTE Tech. Rep. (1998).
[8] T. Chou and C. Orlandi. The Simplest Protocol for Oblivious Transfer. In LATINCRYPT
2015.
[9] R.A. Croft and S.P. Harris. Public-Key Cryptography and Reusable Shared Secrets. In
Cryptography and Coding, pages 189–201, 1989.
[10] I. Damg˚ard and M. Jurik. A Generalisation, a Simpliﬁcation and Some Applications of
Paillier’s Probabilistic Public-Key System. In PKC 2001, Springer (LNCS 1992), pages
119–136, 2001.
35
[11] Y. Desmedt. Society and Group Oriented Cryptography: A New Concept. In CRYPTO’87,
Springer (LNCS 293), pages 120–127, 1988.
[12] Y. Desmedt and Y. Frankel. Threshold Cryptosystems. In CRYPTO’89, Springer (LNCS
435), pages 307–315, 1990.
[13] J. Doerner, Y. Kondi, E. Lee and a. shelat. Secure Two-party Threshold ECDSA from
ECDSA Assumptions In the 39th IEEE Symposium on Security and Privacy, 2018.
[14] A. Fiat and A. Shamir: How to Prove Yourself: Practical Solutions to Identiﬁcation and
Signature Problems. In CRYPTO 1986, Springer (LNCS 263), pages 186–194, 1986.
[15] T. Frederiksen, Y. Lindell, V. Osheter and B. Pinkas. Fast Distributed RSA Key Generation
for Semi-Honest and Malicious Adversaries. To appear at CRYPTO 2018.
[16] E. Fujisaki. Improving Practical UC-Secure Commitments Based on the DDH Assumption.
In SCN 2016, Springer (LNCS 9841), pages 257–272, 2016.
[17] R. Gennaro, S. Jarecki, H. Krawczyk and T. Rabin. Robust Threshold DSS Signatures. In
EUROCRYPT’96, Springer (LNCS 1070), pages 354–371, 1996.
[18] R. Gennaro, S. Goldfeder and A. Narayanan: Threshold-Optimal DSA/ECDSA Signatures
and an Application to Bitcoin Wallet Security. In ACNS 2016, pages 156–174, 2016.
[19] R. Gennaro and S. Goldfeder. Fast Multiparty Threshold ECDSA with Fast Trustless Setup.
In ACM CCS 2018.
[20] N. Gilboa. Two Party RSA Key Generation. In CRYPTO 1999, Springer (LNCS 1666),
pages 116–129, 1999
[21] S. Goldberg, L. Reyzin, O. Sagga and F. Baldimtsi. Certifying RSA Public Keys with an
Eﬃcient NIZK. Cryptology ePrint Archive: Report 2018/057, 2018.
[22] S. Goldfeder. Personal communication, April 2018.
[23] O. Goldreich. Foundations of Cryptography: Volume 2 – Basic Applications. Cambridge
University Press, 2004.
[24] S. Goldwasser and Y. Lindell. Secure Computation Without Agreement. Journal of Cryp-
tology, 18(3):247–287, 2005.
[25] C. Hazay and Y. Lindell. Eﬃcient Secure Two-Party Protocols: Techniques and Construc-
tions. Springer, November 2010.
[26] M. Keller, E. Orsini, and P. Scholl. Actively Secure OT Extension With Optimal Overhead.
In CRYPTO 2015, Springer (LNCS 9215), 724–741, 2015.
[27] Y. Lindell. Highly-Eﬃcient Universally-Composable Commitments Based on the DDH As-
sumption. In EUROCRYPT 2011, Springer (LNCS 6632), pages 446–466, 2011.
[28] Y. Lindell. Fast Secure Two-Party ECDSA Signing. In CRYPTO 2017, Springer (LNCS
10402), pages 613–644, 2017.
36
[29] P.D. MacKenzie and M.K. Reiter. Two-party generation of DSA signatures. International
Journal of Information Security, 2(3-4):218–239, 2004. An extended abstract appeared at
CRYPTO 2001.
[30] S. Micali, R. Pass and A. Rosen. Input-Indistinguishable Computation. In the 47th FOCS,
pages 367–378, 2006.
[31] P. Paillier. Cryptosystems Based on Composite Degree Residuosity Classes. In EURO-
CRYPT99, Springer (LNCS 1592), pages 223–238, 1999.
[32] C.P. Schnorr. Eﬃcient Identiﬁcation and Signatures for Smart Cards. In CRYPTO 1989,
Springer (LNCS 435), pages 239–252, 1990.
[33] V. Shoup. Practical Threshold Signatures. In EUROCRYPT 2000, Springer (LNCS 1807),
pages 207–220, 2000.
[34] V. Shoup and R. Gennaro. Securing Threshold Cryptosystems against Chosen Ciphertext
Attack. In EUROCRYPT 1998, Springer (LNCS 1403), pages 1–16, 1998.
[35] Porticor, www.porticor.com.
[36] Unbound Tech, www.unboundtech.com.
[37] Sepior, www.sepior.com.
A Zero-Knowledge Proofs
In this section, we present Sigma protocols for the non-standard proofs that we need for our protocol.
These Sigma protocols can be transformed into interactive zero-knowledge proofs of knowledge using