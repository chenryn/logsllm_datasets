low we give a detailed analysis of the type errors and
discuss techniques in coping with false positives.
4.1 Type Error Categorization
We categorize the unique type errors into three groups
that we examine below.
Figure 6 shows the graphic representation of the lattice.
Function f should expect the parameter to be of type
checkedForC1C2.
Figure 7 gives an example of a controlled operation re-
quiring multiple authorizations identiﬁed by the runtime
analysis tool [6]. Three security checks are necessary
for the controlled operation unlink() on a directory
inode, namely, permission to traverse the inode, permis-
sion to write the inode, and permission to unlink ﬁle
4.1.1 Category 1: Inconsistent Checking and Usage
of Controlled Object Variables
In this category, the variable that is checked is not the
variable that is used subsequently. There is, however,
some sort of mapping between the checked variable and
the used variable (e.g.
the used variable is a ﬁeld of
the checked variable). Therefore, it is easy to obtain
the checked variable from the passed variable and vice
versa.
/* inserted by our tool */
struct inode *
$checkedForExecWriteDirunlink Cdir;
/* code from include/linux/fs.h */
struct inode_operations {
...
int (*unlink) (struct inode *
$checkedForExecWriteDirunlink,
struct dentry *);
...
}
/* code from fs/namei.c */
int vfs_unlink(struct inode *dir,
struct dentry *dentry)
{
}
...
/* check for EXEC and WRITE */
may_delete(dir, dentry, 0);
...
/* check for UNLINK */
security_ops->inode_ops
->unlink(dir, dentry);
...
/* controlled operation */
dir->i_op->unlink(Cdir, dentry);
...
Figure 7: An example of controlled operation requiring
multiple authorizations. Note that error checking code is
removed to make the code easier to follow.
These type errors are subject to TOCTTOU [2] attacks,
because the mapping between the checked variable and
the used variable might change during the course of exe-
cution. Whether the vulnerability is exploitable depends
on whether the user can manipulate the mapping without
special privilege. At least one of the type errors that we
found is exploitable, as we demonstrate below.
Figure 8 shows the code path that contains the type er-
ror. The code sequence shows Linux implementation
of ﬁle locking via the fcntl system call.
In func-
tion sys_fcntl(), the variable filp, which is a
pointer to the file structure and is retrieved via the
ﬁle descriptor fd, is checked by the security_ops-
>file_ops->fcntl(filp,...)
hook. However,
after the check, the ﬁle descriptor fd, instead of the
checked variable filp, is passed to the intermediate
function do_fcntl(fd,...)
and eventually to the
worker function fcntl_getlk(fd,...)
, where the
filp is retrieved again with the given fd.
This double retrieval of the file pointer creates a
race condition and can be exploited as follows. A
user can have the security_ops->file_ops-
>fcntl(filp) authorization performed on a differ-
ent ﬁle to the one that is eventually locked. Figure 9
shows the exploit.
Note that although step (7) is written as a whole system
call, there is actually only one line of C (an assignment)
in step (7) that needs to come between (6) and (8). Since
step (6) does a get_user, the attacker can cause their
own program to page fault which enables step (7) to be
performed before (8).
Also note that non-LSM Linux is not vulnerable since
the validation in fcntl_setlk is done after the sec-
ond lookup. LSM is vulnerable because the only autho-
rization that protects the operation is performed before
the second lookup.
As an example of how dangerous this can be, login
and su (PAM’d versions) both try to lock the ﬁle
/var/run/utmp (world readable). insmod locks
any modules it loads.
A patch that ﬁxes this problem was posted to the LSM
mailing list [5].
The remaining type errors in this category involve kernel
data structures that cannot be easily modiﬁed by users
via system calls. As a result, it is unclear whether these
type errors can lead to exploits. However, it certainly
complicates the code unnecessarily and increases the
/* from fs/fcntl.c */
long sys_fcntl(unsigned int fd,
unsigned int cmd,
unsigned long arg)
{
struct file * filp;
...
filp = fget(fd);
...
err = security ops->file ops
->fcntl(filp, cmd, arg);
...
err = do fcntl(fd, cmd, arg, filp);
...
}
static long
do_fcntl(unsigned int fd,
unsigned int cmd,
unsigned long arg,
struct file * filp) {
...
switch(cmd){
...
case F_SETLK:
err = fcntl setlk(fd, ...);
...
}
...
}
/* from fs/locks.c */
fcntl_getlk(fd, ...) {
struct file * filp;
...
filp = fget(fd);
/* operate on filp */
...
}
Figure 8: Code path from Linux 2.4.9 containing an ex-
ploitable type error.
THREAD-A:
(1) fd1 = open("myfile", O_RDWR);
(2) fd2 = open("target_file", O_RDONLY);
(3) fcntl(fd1, F_SETLK, F_WRLOCK);
KERNEL-A (do_fcntl):
(4) filp = fget(fd1);
(5) security_ops->file_ops
->fcntl (fd1);
(6) fcntl_setlk(fd1,cmd)
THREAD-B:
/* this closes fd1, dups fd2,
* and assigns it to fd1.
*/
(7) dup2( fd2, fd1 );
KERNEL-A (fcntl_setlk)
/* this filp is for the target
* file due to (7).
*/
(8) filp = fget (fd1)
(9) lock file
Figure 9: An example exploit.
chance of race conditions when the data structures are
not properly synchronized, which may result in poten-
tial exploits.
Here we present a type error of this kind. Many se-
curity checks that intend to protect the inode structure
are performed on the dentry data structure. For exam-
ple, the following code does the permission check on the
dentry structure, but does the “set attribute” operation
on the inode structure.
/* from fs/attr.c */
...
security_ops->inode_ops
->setattr(dentry, attr);
...
inode = dentry->d_inode;
inode_setattr(inode, attr);
...
It is also quite common in Linux to check on the file
data structure and operate on the inode data structure.
/* from mm/filemap.c */
struct page * filemap_nopage(
struct vm_area_struct * area, ...)
{
}
struct file * $unchecked file
= area->vm_file;
...
page_cache_read(file, ...);
...
static inline int page_cache_read(
struct file * file, ...)
{
}
struct inode * $unchecked inode =
file->f_dentry->d_inode;
struct address_space *mapping =
inode->i_mapping;
...
mapping->a_ops->readpage(file, page);
...
Figure 10: An example of unauthorized access.
4.1.2 Category 2: Controlled Objects Modiﬁed
Without Security Checks
This category includes functions that modify controlled
objects without any security checks. The code seg-
ment in Figure 10 shows an example of such cases.
The function filemap_nopage() is called when a
page fault occurs within an m’mapped region. Since
there is no check on the file object within the func-
tion, its type is unchecked.
It is then passed to
function page_cache_read(), which in turn calls
mapping->a_ops->readpage(), which expects a
checked file object. This code path shows that once a
ﬁle is mapped into a process address space, the process
can access the ﬁle even after security attributes of the ﬁle
have changed.
Since there is an LSM authorization hook to verify read
access to a ﬁle on each read call, this is inconsistent
with the current hooks. A discussion with the LSM
community revealed that enforcement on each read
is optional and will only be used for ﬁles that are not
m’mapped. This hooks, as well as the one for checking
access on write have been documented to clarify this
inconsistency.
In other cases, for example function iput(), it seems
that checks are not necessary, as the function is used for
reference counting. In other cases, such as initialization
function clean_inode() for the inode data struc-
ture, there is no need for security protection, as modiﬁ-
cation of the data structure is restricted to zeroing and
initialization of the contents. We call these functions
“safe” functions and consider type errors induced by
these functions as false positives.
4.1.3 Category 3: Kernel-Initiated Operations By-
passing Security Checks
This category includes operations that are initiated in-
side the kernel, instead of going through system call in-
terfaces. As such, they do not go through the normal se-
curity checks that system calls go through. As the kernel
developers have added some limitations on the kernel’s
use of these commands, it is clear that they are security-
sensitive.
One example is the do_coredump() function, which
creates a core ﬁle containing in-memory image of the
running process, when certain signals are caught that end
the process. A check is done when the core ﬁle is cre-
ated, however, subsequent seeks and writes to the ﬁle are
performed without security checks. This deviates from
the user case, where every lseek() or write() sys-
tem call requires a check.
Another example is the kswap daemon. The kswapd
daemon calls prune_icache(), which tries to sync
the inodes that are to be released. The inodes are reached
via a global variable super_blocks, which contains
heads for various inode lists.
4.2 Type Error Rates
CQUAL type errors can be examined in two ways:
source type errors and path type errors. A source type
error is a variable that is used in such a way that a type
error is generated. That is, the variable is used in an
unchecked state in at least one function that expects
the variable to be checked. A path type error is a
unique call path that leads to a type error. Figure 11
shows an example path type error. Note that for each
source type error there may be multiple path type errors.
Table 1 shows both the source and path type error counts
for Linux kernel subsystems. For source type errors, we
also display the source type error rate, deﬁned to be the
percentage of controlled variables that are involved in
type errors.
Subsystems
File System
Memory Management
Networking
IPC
Path Type Error Counts
Source Type Error Counts
Source Type Error Rate (%)
73
18
431
2
57
17
308
2
10%
9%
22%
3%
Table 1: Path and source type errors.
Table 1 shows two interesting facts: (1) over 500 path
type errors are present in the kernel and (2) most of the
type errors occur on one path. Fortunately for the LSM
community, most the type errors identiﬁed by the anal-
ysis are false positives. However, examining this many
type errors to ﬁnd a few exploitable errors is not practi-
cal. Therefore, we need secondary analyses to remove
obvious false positives. Second, since most types errors
associate one source with one error path, so it may be
that some of the sinks of the analysis (i.e., the functions
with controlled operations) may not really require autho-
rization.
4.3 Reducing False Positives
Given that the tools generated about 500 type errors, one
may conclude that the false positive rate is unmanage-
able, but we do not ﬁnd this to be the case. A signiﬁ-
cant number of the errors are in functions in which it is
easy to verify that no security compromises are present,
such as those caused by “safe” functions described in
Section 4.1.2. “Safe” functions are falsely marked as
controlling functions because they modify ﬁeld mem-
bers of controlled data structures. However, since the
modiﬁcation is for the purpose of reference counting or
initialization, the modiﬁcation does not require security
authorizations.
To identify what these functions are, we (slightly) mod-
iﬁed CQUAL to print the inferencing path that leads to
a type error. Figure 11 shows an example error path in-
volving a “safe” function iput(). iput() decreases
the usage count for the given inode and releases it if the
usage count hits zero.
We then report the list of controlling functions that are
the sinks of the error paths. Because hot controlling
functions often contribute to multiple type errors, the
number of controlling functions are much smaller than
the number of type errors. We then manually go through
the list and identify “safe” functions, which are removed
inode.ii:8383 $unchecked <= inode_p
inode.ii:8387 inode_p
inode.ii:8831 iput_arg0
<= iput_arg0
<= $checked
Figure 11: An example error path ending in function
iput. Each line represents an inference according to the
CQUAL rules, e.g. the ﬁrst line means that inode p is a super
class of the unchecked qualiﬁer type. The ﬁrst column shows
the source ﬁle and line number where the inference occurs.
from the list of controlling functions. Appendix A lists
the “safe” functions we identiﬁed. The CQUAL analysis
process is then restarted.