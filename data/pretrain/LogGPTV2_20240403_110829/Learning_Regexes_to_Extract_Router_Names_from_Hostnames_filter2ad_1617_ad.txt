when the extracted name does not cluster the interface with any
other interface belonging to a training router. A single negative (SN)
occurs when the regex does not extract a name from the hostname.
ae-0-11.bar1.toronto1.level3.net   ae-1-9.bar1.toronto1.level3.netae-13-13.bar1.toronto1.level3.netae6-1038.bar1.toronto1.level3.netxe-8-3-2.bar1.toronto1.level3.netﬁber-tech.bar1.toronto1.level3.netnobel-ltd.bar1.toronto1.level3.netae-1-51.ear2.miami1.level3.netae-2-52.ear2.miami1.level3.nettrinity-com.ear2.miami1.level3.nettrinity-com.ear2.miami1.level3.nettrinity-com.ear2.miami1.level3.nettrinity-com.ear2.miami1.level3.net1234561a1b1c1d1e4a4b5a5b6a6bbar1.toronto11a 1b 1c 1d 1e^(?:ae|xe)-[^\.]+\.([a-z]+\d+\.[a-z]+\d+)\.level3.net$^vlan\d+\.([a-z]+\d+\.[a-z]+\d+)\.level3.net$ear2.miami14a 4b2a3aae-14-51.car4.miami1.level3.netae-24-52.car4.miami1.level3.netvlan600.car4.miami1.level3.net77a7b7ccar4.miami17a 7b 7cae-5-5.car1.houston1.level3.netvlan434.car1.houston1.level3.net88a8bcar1.houston18a 8bTP: 12, FNU: 4, SN: 3FNU: 5a, 5b, 6a, 6b. SN: 2a, 3a, 9a.^([a-z\d]+)-[^\.]+\.([a-z]+\d+\.[a-z]+\d+)\.level3.net$ae|bar1.toronto1ae6|bar1.toronto1xe|bar1.toronto11a 1b 1c1d1eﬁber|bar1.toronto1nobel|bar1.toronto1trinity|ear2.miami15a 5b 6a 6bae|car4.miami17a 7bae|car1.houston18a2a3aae|ear2.miami14a 4bTP: 7, FP: 4, FIP: 1, FNE: 2, FNU: 2, SP: 3FNU: 7c, 8bNC #2:NC #1:4-35-237-150.edge1.washington1.level3.net9a94|edge1.washington19aLearning Regexes to Extract Router Names from Hostnames
IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
Figure 5: Method for inferring naming conventions across eight phases, and an illustration of progress through these phases
for two suffixes. Not all phases may contribute to the final naming convention, but all phases are required to overcome het-
erogeneity in operator naming conventions. Each symbol identifies an evolving regex as our method refines it.
4.3 Ranking Regexes
Our metric for ranking regexes, which we call Absolute True Posi-
tives (ATP), is the number of true positives (TP) minus false positives
(FP), false negative extractions (FNE), and false IP extractions (FIP).
We do not include false negative unmatched (FNU) in our metric, as
some interfaces could never be correctly clustered using their host-
name. For example, when an operator names an address assigned
to a neighbor for interconnection (e.g., hostnames on routers 5 and
6 in figure 4) they are not naming the neighbor’s router. Neither
do we include either single negatives (SN) or single positives (SP)
in our metric, for the same reason. In addition, extracting router
names for routers with a single interface in a suffix at best would
not cluster them with any other interface; at worst, they could be
incorrectly clustered with interfaces on other routers.
We considered two other approaches to ranking regexes. First,
we considered using the Positive Predictive Value (PPV) – TP /
(TP + FP), which is the primary statistic reported by prior work
evaluating packet-probing alias resolution techniques, including
MIDAR [12], Speedtrap [16], and PSTS [24]. However, a PPV rank-
ing would prefer conventions that congruently cluster a small set of
interfaces within a suffix over conventions that cluster a larger set
of interfaces with a small number of errors. Second, we considered
using the Rand Index [23], which is a pairwise measure of clustering
accuracy [18] – (TP + TN) / (TP + FP + FN + TN). However, in large
training sets this metric is dominated by true negatives – whether
or not two hostnames matched by a convention belong to different
routers, such that a convention with pervasive false positives can
have a high Rand Index.
4.4 Refinement Conditions
Figure 5 provides a roadmap of our method, showing the evolu-
tion of regexes and candidate naming conventions for two suffixes,
which we discuss in detail in §5. The first five phases build extractor
regexes that obtain extracted names from the hostnames. The first
phase (§5.1) builds base regexes which consist solely of compo-
nents that do not contain the punctuation character specified in
the component. The next three phases add specificity. The second
and third phases (§5.2, §5.3) embed literal strings in these regexes,
and the fourth phase (§5.4) embeds specific character classes. The
fifth phase (§5.5) builds regexes that could be paired with existing
regexes in the set to increase coverage, and the sixth phase (§5.6)
builds sets of regexes that increase coverage using the set of regexes
built in the first five phases. The seventh phase (§5.7) builds filter
regexes to filter out hostnames that extractor regexes should not
match because they assign interfaces to wrong routers, or extract a
portion of an IP address embedded in the hostname, and add these
filter regexes to applicable sets. A naming convention is therefore a
set of filter and extractor regexes; the eighth phase (§5.8) selects
the best naming convention among the conventions for each suffix.
We define two refinement conditions that a new regex building
on an existing regex must meet, in order for the new regex to be
included in the working set. First, the PPV of the new regex must
not be more than 0.5% worse than the PPV of the existing regex; a
more specific regex matching fewer hostnames with a lower PPV
is worse than the existing regex. Second, the regex must infer TPs
for at least three training routers for us to have confidence that the
regex is capturing a component of the naming scheme.
Generate Base RegexesReﬁne True PositivesReﬁne False Negative ExtractionsEmbed Character ClassesReﬁne False Negative UnmatchedBuild Regex SetsBuild Filter RegexesSelect Best Conventionhe.netcomcast.net^(?:\d+ge\d+|ge\d+)-[^\.]+\.(core[^\.]+\.[^\.]+)\.he\.net$^[^\.]+\.(core\d+\.[a-z]+\d+)\.he\.net$Stage^(?:\d+ge\d+|ge\d+)-\d+\.(core\d+\.[a-z]+\d+)\.he\.net$([^-]+)\.comcast\.net$§5.1§5.2§5.3§5.4§5.5§5.6§5.7§5.8^([^-]+)-[^\.]+\.([^\.]+\.[^\.]+)\.he\.net$^[^\.]+\.([^\.]+\.[^\.]+)\.he\.net$^([^-]+)-[^\.]+\.(core[^\.]+\.[^\.]+)\.he\.net$^[^\.]+\.(core[^\.]+\.[^\.]+)\.he\.net$^v\d+\.(core\d+\.[a-z]+\d+)\.he\.net$^(?:\d+ge\d+|ge\d+)-\d+\.(core\d+\.[a-z]+\d+)\.he\.net$^v\d+\.(core\d+\.[a-z]+\d+)\.he\.net$^[^\.]+\.(core\d+\.[a-z]+\d+)\.he\.net$^[^\.]+\.(core\d+\.[a-z]+\d+)\.he\.net$^c-\d+-\d+-\d+-\d+\.hsd1\.[a-z]+\.comcast\.net$  ^as\d+-\d+-c\.[a-z]+\.[a-z]+\.ibone\.comcast\.net$  ([^-]+)\.comcast\.net$^c-\d+-\d+-\d+-\d+\.hsd1\.[a-z]+\.comcast\.net$  ^as\d+-\d+-c\.[a-z]+\.[a-z]+\.ibone\.comcast\.net$  ([^-]+)\.comcast\.net$IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
Matthew Luckie, Bradley Huffaker, and k claffy
Figure 6: Example he.net routers we use to explain stages §5.1-§5.6, with the base regexes (§5.1) built for interfaces 1a and 1b.
4.5 Removing Redundant Regexes
At the end of each phase 1-5, we remove regexes to reduce unpro-
ductive exploration. We first remove regexes that do not correctly
cluster hostnames for at least one training router. We then rank
regexes in descending ATP (§4.3), and remove regexes whose TPs
are contained in a higher-ranked regex with no additional FPs. If
two regexes have the same ATP, we choose the regex with fewer
extraction components, or higher specificity, and remove the other.
5 METHOD
Our method uses three data sources: router aliases inferred with
MIDAR and Mercator, hostnames of those interfaces, and a list of
public DNS suffixes. CAIDA’s ITDK (§2.5) provides the first two,
and Mozilla’s public suffix list [20] provides the third. Each ITDK
contains all IP addresses that available Ark vantage points observed
using traceroute over a ≈2 week period. Because alias resolution
techniques are only feasible for a subset of the addresses (§3) our
training set consists only of ITDK routers with multiple aliases;
these routers are training routers. The application set consists of the
remaining ITDK routers with no inferred aliases.
5.1 Build Base Regexes
For each training router, we build regexes that extract candidate
names, based on common substrings (CSs) between hostname pairs.
We use punctuation (non-alphanumeric) characters to build struc-
ture in regexes, in line with how operators use punctuation in prac-
tice. For each hostname pair on each training router, we identify
CSs in the hostnames using a variation of the dynamic program-
ming solution to the longest common substring (LCS) problem.
The conventional LCS solution extracts a single substring, but a
router name can be assembled from multiple substrings within a
hostname, as is the case for savvis.net in figure 1, so we greedily
select non-overlapping substrings to identify CSs. Because not all
substrings may be needed to uniquely identify a router (the middle
digit in savvis.net routers 1-3 in figure 1 is not part of the name)
we build regexes that extract all combinations of substrings.
Figure 6 shows the base regexes our method builds for a sin-
gle he.net router that extract 100ge4|core3.fmt2 and core3.fmt2
when processing the hostname pair (1a, 1b); our method also builds
regexes that extract 100ge4, but we do not show these regexes for
brevity. Using the CSs, we divide a hostname into portions that we
do and do not extract, and recursively build regexes using all com-
binations of regex components that match hostname components
delimited by punctuation. This phase builds regexes using only
regex components that exclude specific punctuation (e.g., [^-]+),
or match anything (.+) at most once per regex (table 2). We do not
include literals or character classes in this phase, as a full expansion
using all combinations of regex components is intractable. Finally,
we remove redundant regexes using the method in §4.5.
5.2 Refine True Positives
This phase refines the set of regexes by identifying common literals
in correctly clustered hostnames, i.e., those that were true positives,
and then refines regexes to embed those literals in the regexes.
Because these literals are in common across matched hostnames,
they are found in the candidate names. We illustrate this phase
using routers 1-3 in figure 6, where ^[^\.]+\.([^\.]+\.[^\.]+)\.he\.net$
extracts core3.fmt2, core1.atl1, and core1.ash1 as candidate names.
We recursively extract CSs from pairs of extractions, breaking on
changes in character class: alphabet, digits, and punctuation – i.e.,
core1 from core1.atl1 and core1.ash1, and core from core3.fmt2
and core1.ash1. We then build new extraction components for the
regexes, embedding the CSs, and then replace the extraction compo-
nent in a copy of the base regex. We evaluate the new regexes using
the method in §4.2, and add each new regex to our working set pro-
vided the two refinement conditions in §4.4 hold. At the end of this
phase, we have built ^[^\.]+\.(core[^\.]+\.[^\.]+)\.he\.net$ and ^([^-
]+)-[^\.]+\.(core[^\.]+\.[^\.]+)\.he\.net$. Finally, we remove redun-
dant regexes; because the base regex ^[^\.]+\.([^\.]+\.[^\.]+)\.he\.net$
is less specific than ^[^\.]+\.(core[^\.]+\.[^\.]+)\.he\.net$, but per-
forms the same clustering, we remove the base regex from our
working set, using the method in §4.5.
100ge4-1.core3.fmt2.he.net100ge4-2.core3.fmt2.he.netv1119.core3.fmt2.he.netv1832.core3.fmt2.he.net10ge16-5.core1.ash1.he.net10ge16-6.core1.ash1.he.net100ge5-1.core1.ash1.he.netfastserv.core1.ash1.he.netesnet.10gigabitethernet5-15.core1.ash1.he.net1a1b1c1d2a2b3a3b3c4a5a100ge4-1.core3.fmt2.he.net100ge4-2.core3.fmt2.he.net^([^-]+)-[^-]+\.([^\.]+\.[^\.]+)\.he\.net$^([^-]+)-[^\.]+\.([^\.]+\.[^\.]+)\.he\.net$^([^-]+)-.+\.([^\.]+\.[^\.]+)\.he\.net$100ge4-1.core3.fmt2.he.net100ge4-2.core3.fmt2.he.net^(.+)-[^-]+\.([^\.]+\.[^\.]+)\.he\.net$^([^-]+)-[^-]+\.(.+)\.he\.net$^(.+)-[^\.]+\.([^\.]+\.[^\.]+)\.he\.net$^([^-]+)-[^\.]+\.(.+)\.he\.net$^([^-]+)-[^-]+\.([^\.]+\..+)\.he\.net$^([^-]+)-[^\.]+\.(.+\.[^\.]+)\.he\.net$^([^-]+)-[^\.]+\.([^\.]+\..+)\.he\.net$^([^-]+)-[^-]+\.(.+\.[^\.]+)\.he\.net$^[^-]+-[^-]+\.([^\.]+\.[^\.]+)\.he\.net$^[^-]+-[^\.]+\.([^\.]+\.[^\.]+)\.he\.net$^[^-]+-.+\.([^\.]+\.[^\.]+)\.he\.net$^.+-[^-]+\.([^\.]+\.[^\.]+)\.he\.net$^[^-]+-[^-]+\.(.+)\.he\.net$^.+-[^\.]+\.([^\.]+\.[^\.]+)\.he\.net$^[^-]+-[^\.]+\.(.+)\.he\.net$^[^-]+-[^-]+\.([^\.]+\..+)\.he\.net$^[^-]+-[^\.]+\.(.+\.[^\.]+)\.he\.net$^[^-]+-[^\.]+\.([^\.]+\..+)\.he\.net$^[^-]+-[^-]+\.(.+\.[^\.]+)\.he\.net$^[^\.]+\.([^\.]+\.[^\.]+)\.he\.net$([^\.]+\.[^\.]+)\.he\.net$kept after removingredundant regexesRouter #3: core1.ash1Router #4: unnamedRouter #5: unnamedRouter #2: core1.atl1Router #1: core3.fmt2ge2-9.core1.atl1.he.netge6-7.core1.atl1.he.netLearning Regexes to Extract Router Names from Hostnames
IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
then iteratively add other regexes from the intermediate set to the
working set. In each iteration, we choose the regex that increases
the ATP the most, provided the two refinement conditions in §4.4
hold. Finally, we condense the patterns into a logical-or statement
– (?:\d+ge\d+|ge\d+) – and embed the statement in the extraction
component that separated the hostnames in the original regex.
5.4 Embed Character Classes
This phase identifies character class sequences in common across
correctly clustered hostnames, and replaces less specific regex com-
ponents with components that specify character classes. Figure 7c
shows that of the three [^\.]+ components in ^(?:\d+ge\d+|ge\d+)-
[^\.]+\.(core[^\.]+\.[^\.]+)\.he\.net$, the first two obtain digits from
the hostname, and the third obtains alphanumeric characters. For
the first two components, we substitute \d+. For the third, we build
[a-z\d]+ to match alphanumeric characters, and the more specific
[a-z]+\d+ to match the sequence of alphabet characters followed by
digits as observed in individual hostnames. We add these derived
regexes to the working set provided the two refinement conditions
in §4.4 hold, and then remove redundant regexes with less specific
patterns using the method in §4.5 to arrive at ^(?:\d+ge\d+|ge\d+)-
\d+\.(core\d+\.[a-z]+\d+)\.he\.net$.
5.5 Refine False Negative Unmatched
This phase identifies hostnames that an existing regex did not match,
but that contain the same string as the extracted name from the
same training router, and then builds additional regexes that match
these unmatched hostnames to extract the candidate name. These
hostnames were assigned FNU during evaluation (§4.2). Figure 7d
shows that the regex has two FNU assignments, for interfaces 1c
and 1d in figure 6. We assemble the literals from each hostname that
were not part of the regex extraction (v1119 in 1c, and v1832 in 1d)
and recursively extract CSs from these literals, breaking on changes
in character class: alphabet, digits, punctuation, and replacing digits
in the CSs with regex components that match digits – ^v\d+. We
build additional regexes, embedding the CSs in the non-extraction
portion of the regex – ^v\d+\.(core\d+\.[a-z]+\d+)\.he\.net$. We eval-
uate these regexes alongside the existing regex, and include these
additional regexes in the working set provided the two refinement
conditions in §4.4 hold.
5.6 Build Regex Sets
This phase increases coverage of suffixes where the operator has
multiple conventions. We rank regexes by ATP (descending), and
then evaluate the outcome of pairing a regex with each of the
regexes below it in the rank order. We include an expanded regex in
our working set provided that the two conditions in §4.4 hold, and
that the ATP of the expanded regex is at least 4% more than the regex
we began with. This final condition is to avoid building a naming
convention that has overfitted to the training data by including
many regexes, each of which apply to a small fraction of hostnames,
including those with errors following a pattern, as discussed in §4.1.
We execute this phase in rounds, considering additional pairings
until we find no expansion that is better. Figure 7e shows that we
built a set of two regexes that cluster more interfaces than the
individual regexes alone.
Figure 7: Refinement of he.net regexes: §5.3 – §5.6.
5.3 Refine False Negative Extractions
This phase identifies literals in the hostnames that are in common
in pairs of matched hostnames, but do not form part of the router
name. Regexes that extract more than the router name can sepa-
rate interfaces of a training router into different clusters (FNE). For
router #2 in figure 6, ^([^-]+)-[^\.]+\.(core[^\.]+\.[^\.]+)\.he\.net$
clusters interfaces 2a and 2b into ge2|core1.atl1 and ge6|core1.atl1,
as shown in figure 7a. We therefore find the extraction component
that is separating the hostnames, ([^-]+) in this case, and assemble
all the literals obtained by that extraction component. We recur-
sively extract CSs from these extractions, breaking on changes in
character class: alphabet, digits, and punctuation as before, but