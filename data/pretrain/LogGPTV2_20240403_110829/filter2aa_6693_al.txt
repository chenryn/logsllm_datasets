如果 既没有 指定
.B \-fpcc\-struct\-return ,
也没有 指定
.BR \-freg\-struct\-return ,
GNU CC 默认使用 目标机 的 标准约定. 如果 没有 标准约定, GNU CC 默认采用
.BR \-fpcc\-struct\-return .
.TP
.B \-fshort\-enums
给 \c
.B enum\c
\& 类型 只分配 它 声明的 值域范围 的 字节数. 就是说, \c
.B enum\c
\& 类型 等于 大小足够 的 最小整数类型.
.TP
.B \-fshort\-double
使
.B double
类型 的 大小 和
.B float
\& 一样.
.TP
.B \-fshared\-data
要求 编译结果 的 数据 和 非 \c
.B const\c
\& 变量 是 共享数据, 而不是 私有数据.
这种差别 仅在 某些 操作系统 上面 有意义, 那里的 共享数据 在 同一个
程序 的 若干 进程 间 共享, 而 私有数据 在 每个 进程 内 都有 副件.
.TP
.B \-fno\-common
即使 未初始化 的 全局变量 也 分配在 目标文件 的 bss 段, 而不是 把 它们
当做 普通块 (common block) 建立. 这样的 结果 是, 如果 在 两个 不同 的 
编译结果 中 声明了 同一个 变量 (没使用 \c
.B extern \c
\&), 连接 它们 时 会 产生 错误. 这个选项 可能 有用 的 唯一情况 是,
你 希望 确认 程序 能 在 其他系统 上 运行, 而 其他系统 总是 这么 做.
.TP
.B \-fno\-ident
忽略 `\|\c
.B #ident\c
\&\|' 指令.
.TP
.B \-fno\-gnu\-linker
不要 把 全局初始化部件 (如 C++ 的 构造子 和 解构子) 输出为 GNU 连接器
使用 的 格式 (在 GNU 连接器 是 标准方法 的 系统 上).
当你 打算 使用 非 GNU 连接器 的 时候 可以用 这个选项, 非GNU连接器 也需要
.B collect2\c
\& 程序 确保 系统连接器 放入 构造子 (constructor) 和 解构子 (destructor).
(GNU CC 的 发布包 中 包含有 \c
.B collect2\c
\& 程序.) 对于 \c
.I 必须 \c
\& 使用 \c
.B collect2\c
\& 的 系统, 编译器驱动程序 \c
.B gcc\c
\& 自动 配置为 这么做.
.TP
.B \-finhibit-size-directive
不要 输出 \c
.B .size\c
\& 汇编指令, 或其他 类似指令, 当 某个函数 一分为二, 两部分 在 内存 中
距离 很远 时 会 引起 问题. 当 编译 `\|\c
.B crtstuff.c\c
\&\|' 时 需要 这个选项; 其他情况下 都不应该 使用.
.TP
.B \-fverbose-asm
输出 汇编代码 时 放些 额外的 注释信息. 这个选项 仅用于 确实 需要
阅读 汇编输出 的 时候 (可能 调试 编译器 自己 的 时候).
.TP
.B \-fvolatile
使 编译器 认为 所有 通过 指针 访问 的 内存 是 易变内存 (volatile).
.TP
.B \-fvolatile\-global
使 编译器 认为 所有的 外部和全局变量 是 易变内存.
.TP
.B \-fpic
如果 支持 这种 目标机, 编译器 就生成 位置无关目标码.
适用于 共享库 (shared library).
.TP
.B \-fPIC
如果 支持 这种 目标机, 编译器 就输出 位置无关目标码.
适用于 动态连接 (dynamic linking), 即使 分支 需要 大范围 转移.
.TP
.BI "\-ffixed\-" "reg"
把 名为 \c
.I reg\c
\& 的 寄存器 按 固定寄存器 看待 (fixed register); 生成的 目标码
不应该 引用 它 (除了 或许 用作 栈指针, 帧指针, 或其他 固定的角色).
.Sp
.I reg\c
\& 必须是 寄存器 的 名字. 寄存器 名字 取决于 机器, 用 机器描述宏文件 的 \c
.B REGISTER_NAMES
宏 定义.
.Sp
这个选项 没有 否定格式, 因为 它 列出 三路选择.
.TP
.BI "\-fcall\-used\-" "reg"
把 名为 \c
.I reg\c
\& 的 寄存器 按 可分配寄存器 看待, 不能 在 函数调用 间 使用.
可以 临时使用 或 当做 变量 使用, 生存期 不超过 一个 函数.
这样编译的 函数 无需 保存 和 恢复 \c
.I reg\c
\& 寄存器.
.Sp
如果 在 可执行模块 中, 把 这个选项 说明的 寄存器 用作 固定角色 将会
产生 灾难性结果, 如 栈指针 或 帧指针.
.Sp
这个选项 没有 否定格式, 因为 它 列出 三路选择.
.TP
.BI "\-fcall\-saved\-" "reg"
把 名为 \c
.I reg\c
\& 的 寄存器 按 函数 保护 的 可分配寄存器 看待. 可以 临时使用 或 当做 变量
使用, 它 甚至能 在 函数 间 生存. 这样编译的 函数 会 保存 和 恢复 使用中 的 \c
.I reg\c
\& 寄存器.
.Sp
如果 在 可执行模块 中, 把 这个选项 说明的 寄存器 用作 固定角色 将会
产生 灾难性结果, 如 栈指针 或 帧指针.
.Sp
另一种 灾难 是 用 这个选项 说明的 寄存器 返回 函数值.
.Sp
这个选项 没有 否定格式, 因为 它 列出 三路选择.
.SH PRAGMAS
GNU C++ 支持 两条 `\|\c
.B #pragma\c
\&\|' 指令 使 同一个 头文件 有 两个用途: 对象类 的 接口定义, 对象类 完整的
内容定义.
.TP
.B #pragma interface
(仅对 C++) 在 定义 对象类 的 头文件 中, 使用 这个指令 可以 节省 大部分
采用 该类 的 目标文件 的 大小. 
一般说来, 某些信息 (内嵌成员函数 的 备份副件, 调试信息, 实现 虚函数 的 
内部表格等) 的 本地副件 必须 保存在 包含 类定义 的 各个 目标文件 中.
使用 这个 pragma 指令 能够 避免 这样的 复制.
当 编译 中 引用 包含 `\|\c
.B #pragma interface\c
\&\|' 指令 的 头文件 时, 就 不会 产生 这些 辅助信息
(除非 输入的 主文件 使用了 `\|\c
.B #pragma implementation\c
\&\|'指令). 作为替代, 目标文件 将包含 可被 连接时 解析的 引用 (reference).
.TP
.B #pragma implementation
.TP
\fB#pragma implementation "\fP\fIobjects\fP\fB.h"\fP
(仅对 C++) 如果 要求 从 头文件 产生 完整的 输出 (并且 全局可见),
你 应该 在 主输入文件 中 使用 这条 pragma. 头文件 中 应该 依次 使用 `\|\c
.B #pragma interface\c
\&\|' 指令. 在 implementation 文件 中 将 产生 全部 内嵌成员函数 的 备份,
调试信息, 实现 虚函数 的 内部表格等.
.Sp
如果 `\|\c
.B #pragma implementation\c
\&\|' 不带 参数, 它 指的是 和 源文件 有 相同基本名 的 包含文件; 例如, `\|\c
.B allclass.cc\c
\&\|' 中, `\|\c
.B #pragma implementation\c
\&\|' 等于 `\|\c
.B #pragma implementation "allclass.h"\c
\&\|'. 如果 某个 implementation 文件 需要 从 多个 头文件 引入 代码,
就应该 使用 这个 字符串参数.
.Sp
不可能 把 一个头文件 里面 的 内容 分割到 多个 implementation 文件 中.
.SH "文件 (FILE)"
.nf
.ta \w'LIBDIR/g++\-include 'u
file.c	C 源文件
file.h	C 头文件 (预处理文件)
file.i	预处理后 的 C 源文件
file.C	C++ 源文件
file.cc	C++ 源文件
file.cxx	C++ 源文件
file.m	Objective-C 源文件
file.s	汇编语言文件
file.o	目标文件
a.out	连接的输出文件
\fITMPDIR\fR/cc\(**	临时文件
\fILIBDIR\fR/cpp	预处理器
\fILIBDIR\fR/cc1	C 编译器
\fILIBDIR\fR/cc1plus	C++ 编译器
\fILIBDIR\fR/collect	某些机器需要的连接器前端(front end)程序
\fILIBDIR\fR/libgcc.a	GCC 子例程 (subroutine) 库
/lib/crt[01n].o	启动例程 (start-up)
\fILIBDIR\fR/ccrt0	C++ 的附加启动例程
/lib/libc.a	标准 C 库, 另见 intro (3)
/usr/include	\fB#include\fP 文件的标准目录
\fILIBDIR\fR/include	\fB#include\fP 文件的标准 gcc 目录
\fILIBDIR\fR/g++\-include	\fB#include\fP 文件的附加 g++ 目录
.Sp
.fi
.I LIBDIR
通常为
.B /usr/local/lib/\c
.IR machine / version .
.br
.I TMPDIR
来自 环境变量
.B TMPDIR
(如果 存在, 缺省为
.B /usr/tmp ,
否则为
.B /tmp\c
\&).
.SH "另见 (SEE ALSO)"
cpp(1), as(1), ld(1), gdb(1), adb(1), dbx(1), sdb(1).
.br
.B info\c
\&中
.RB "`\|" gcc "\|', `\|" cpp \|',
.RB "`\|" as "\|', `\|" ld \|',
和
.RB `\| gdb \|'
的 条目.
.br
.I
Using and Porting GNU CC (for version 2.0)\c
, Richard M. Stallman;
.I
The C Preprocessor\c
, Richard M. Stallman;
.I
Debugging with GDB: the GNU Source-Level Debugger\c
, Richard M. Stallman 和 Roland H. Pesch;
.I
Using as: the GNU Assembler\c
, Dean Elsner, Jay Fenlason & friends;
.I
ld: the GNU linker\c
, Steve Chamberlain 和 Roland Pesch.
.SH BUGS
关于 报告 差错 的 指导 请 查阅 GCC 手册.
.SH "版权 (COPYING)"
Copyright
.if t \(co
1991, 1992, 1993 Free Software Foundation, Inc.
.PP
Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.
.PP
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.
.PP
Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be included in
translations approved by the Free Software Foundation instead of in
the original English.
.SH "作者 (AUTHORS)"
关于 GNU CC 的 奉献者 请 查阅 GUN CC 手册.
.SH "[中文版维护人]"
.B 徐明 
.SH "[中文版最新更新]"
.BR 2003/05/13
第一版
.SH "《中国Linux论坛man手册页翻译计划》"
.BI http://cmpp.linuxforum.net
.\".SH "字典"
.\"archive file: 归档库文件, 库文件
.\".br
.\"assemble: 汇编
.\".br
.\"assembler: 汇编器
.\".br
.\"assembly language: 汇编语言
.\".br
.\"compile: 编译
.\".br
.\"compiler: 编译器
.\".br
.\"context: 执行环境
.\".br
.\"data flow information: 数据流信息 (-Wuninitialized)
.\".br
.\"extern reference: 外部引用 (-mhalf-pic)
.\".br
.\"in-line code sequence: 嵌入代码 (-min-line-mul)
.\".br
.\"link: 连接
.\".br
.\"linker: 连接器
.\".br
.\"memory reference: 内存访问 (-mserialize-volatile)
.\".br
.\"object file: 目标文件
.\".br
.\"operand: 操作数
.\".br
.\"preprocessing: 预处理
.\".br
.\"preprocessor: 预处理器
.\".br
.\"scratch space: 活动空间 (-mfull-fp-blocks)
.\".br
.\"sequential consistency: 结果一致 (-mserialize-volatile)
.\".br
.\"