# 字符流导致乱码的CTF题

## 问题简介
在周末刷题时，我在JarvisOJ网站上遇到了一道名为FindPass的题目。尽管很多人已经解出了这道题，但存在一个普遍被忽略的问题。本文将对该问题进行详细分析。

## 问题由来
该题目是JarvisOJ网站re栏目下的FindPass题目。通过使用jadx_gui反编译apk，我发现其流程相对简单：从res目录中获取一段字符串，从assets目录下读取图片，加载1024个字节，并执行一些简单的算法，最后判断结果是否相等。

### 初始尝试
我直接编写了一个Python脚本来生成flag：
```python
key = 'Tr43Fla92Ch4n93'
with open('src.jpg', 'rb') as f:
    image_data = f.read()
flag = ""
for i in range(len(key)):
    if i % 2 == 1:
        flag += chr(ord(key[i]) + temp)
    else:
        flag += chr(ord(key[i]) - temp)
print(flag)
```
然而，输入到apk中的结果却是错误的。我猜测可能是Java中的char类型是有符号单字节数据，而Python中是无符号的单字节数据，导致flag不匹配。经过调整和模128运算后，最终得到了正确的flag（Qv49AmZB2Df4jB-）。但这只是巧合。

### 调试过程
为了进一步调试，我使用Android Studio进行了以下设置：
1. 安装了与apk版本对应的SDK。
2. 连接了一台开启了USB调试选项的手机。
3. 确保上述三个条件都满足，以避免各种报错。

载入so文件后，开始调试。由于AS只能调试smali文件，结合jadx_gui反编译出来的Java代码会更容易理解。调试过程中，重点关注变量窗口。

在调试到`getkey`函数时，发现`cha`变量存储了一个1024字节的字符数组。读入jpg文件时，实际上是二进制内容。通过010editor查看jpg头部，发现当一个字节的第一个bit位为1时，`InputStreamReader`函数会将其转换为0xFFFD（即65533）。

因此，所有大于127的数据在读入后都会变成65533。在计算flag的过程中，这些数据模10后等于3，再根据奇偶位加一或减一。回到题目，F(70)-3确实等于C(67)，而不是因为有符号数据需要转换成无符号数据。

### 深入分析
#### 字节流与字符流的概念
- **字节流**处理单位是1个字节，操作字节和字节数组。
- **字符流**处理单位是2个字节的Unicode字符，操作字符、字符数组或字符串。

`InputStreamReader`是从字节流到字符流的桥梁，它读取字节并使用特定字符集解码成字符。字符集可以指定或默认使用平台的字符集。

`InputStreamReader`每次读取两个字节进行解码，解码过程中涉及字符集之间的转换。例如，从其他字符集向Unicode编码转换时，如果二进制数在该字符集中没有标识任何字符，则结果是0xfffd。

#### 具体分析
- `InputStreamReader`每次读取两个字节。
- 解码时，所有读入的数据会在Unicode和本地字符集之间转换。
- 当读取jpg文件时，使用默认字符集（系统字符集），某些二进制数不在字符集范围内，会被转换为0xfffd。

### 测试验证
我还编写了一些Java和C语言代码进行测试，验证了字节流和字符流的区别。附件中包含了带有debug属性的apk，大家可以自行调试。

## 参考链接
- [Java编码与乱码问题](https://www.cnblogs.com/slwenyi/p/6393881.html)
- [字节流与字符流的区别及相互转换](https://www.cnblogs.com/xiaohouzai/p/7684695.html)
- [Java FileReader InputStreamReader类源码解析](https://blog.csdn.net/weixin_34050005/article/details/89654956)