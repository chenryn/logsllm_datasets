3.2.4 Transformations of the Payload Options. Pay-
load  options  in  the  rule  option  part  are  used  to  match 
1727
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:56:02 UTC from IEEE Xplore.  Restrictions apply. 
patterns  in  the  payload  of  datagrams.  This  allows  for 
matching application layer specific byte string manifes-
tations of attacks. Depending on the rule header the rule 
will match the specified patterns to the payload of sin-
gle IP datagrams or to re-assembled TCP streams. We 
present  the  payload  options  and  suitable  transforma-
tions in the following. 
Content  option:  This  option  matches  a  specified 
byte string in the payload. It is frequently used to detect 
protocol messages or control commands of application 
layer protocols, which exploit a vulnerability or control 
bots. As an example, the content option may be used to 
detect buffer overflow attacks. 
Transformation: Content options may be abstracted 
by  three  transformations:  (1)  The  content  keyword  is 
complemented  with  the  nocase  option,  such  that  the 
rule  also  matches  the byte  string  with varying  case of 
characters.  (2)  The  byte  string  is  split  into  sub-strings 
that  are  delimited  by  freely  specified  separation  sym-
bols  introducing  a  separate  content  option  for  each  of 
the sub-strings. The abstracted rule thus detects the sub-
strings  independently  of  the  separation  symbols  and 
with arbitrary characters in between. This is handy for 
detecting  variants  of  an  exploit,  where  arbitrary  func-
tionally neutral symbols have been introduced in order 
to thwart overly specific rules. (3) The content option is 
discarded.  
Pre-conditions:  In  rules  containing  several  payload 
options, the options may refer to each other. A content 
option must not be removed if it is referred to by other 
payload  options.  Referral  to  other  payload  options  is 
expressed  using  the  relative  options  distance  and 
within. The respective informal semantics and suitable 
transformations are described in the following.  
Distance  x  specifies  the  initial  search  position  for 
matching a subsequent content option. Suppose that for 
two  given  content  options  for  the  second  one  there  is 
defined a distance of x, then it will only be tried to be 
matched after the first x bytes following the first con-
tent  option.  Within  x  refines  content  options  with  a 
bounded search depth. Suppose that for two given con-
tent options for the second one there is defined a within 
of x, then it will only be tried to be matched within the 
first x bytes following the first content option. It is also 
possible to restrict the matching of a content option by 
referring the beginning of a packet. Therefore the rela-
tive  options  offset  and  depth  can  be  used  in  the  same 
manner  like  distance  and  within,  respectively,  except 
they are relative to the beginning of the packet. 
Rules  containing  refined  content  options  are  ab-
stracted by removing the refining options. A more fine-
grained  abstraction  would  step-wise  decrease  the  dis-
tance  and  offset  values  and  increase  the  within  and 
depth values, respectively.  
Transformation  hints:  If  the  referring  options  have 
been  removed  the  signature  engineer  should  check 
whether the remaining payload options still search for a 
similar  phenomenon.  In  that  case,  the  signature  engi-
neer  should  look  for  further  constraints  restricting  the 
search  space  and  search  depth  using  the  distance, 
within,  depth  or  offset  options  thus  reducing  false 
alarms and improving the run-time efficiency of Snort. 
If  a  content  option  has  been  split,  the  original  search 
string  can  be  re-used  when  replacing  certain  blank 
characters by other blank characters. If a content option 
has been removed entirely, the signature engineer might 
check, whether the manifestations contain substrings of 
the original content option that could be used, instead. 
Uricontent  option:  This  option  matches  a  normal-
ized  URI  string  in  the  payload,  where  normalized 
means  that  also  semantically  equivalent  variants  are 
matched,  if  they  syntactically  differ  only  in  semanti-
cally  equivalent  symbols  or  codes.  Additionally,  URI 
directory paths are rewritten into a reduced form before 
matching, e.g. /../../ becomes ../. 
Transformation: The option is discarded in order to 
abstract  the  rule.  More  fine-grained  transformation  is 
possible using selective removal of sub-directories.   
Transformation  hints:  If  the  uricontent  option  has 
been  modified  the  signature  engineer  should  check, 
whether the new string conforms to the actual configu-
ration of the service, e.g. the web content and module 
directories of Apache. 
Isdataat option:  This option  tests  whether  the  pay-
load  contains  data  at  the  specified  position,  which  is 
basically used to check packet lengths and for detecting 
buffer overflow attacks. 
Transformation: The option is discarded in order to 
abstract  the  rule.  Stepwise  decrementing  the  position 
parameter allows for more fine-grained transformation. 
Transformation hints: If the isdataat option has been 
modified  the  signature  engineer  can  determine  the  ac-
tual position in the given manifestations. 
Pcre option: Similarly to the content option the pcre 
option can be used to match byte strings or patterns in 
the payload. The pcre option, however, allows a more 
expressive  specification  of  the  pattern  to  be  matched 
using Perl  compatible  regular  expressions  (see  Fig. 6a 
for the syntax of the option). At first, we introduce the 
most important switches i, A, E, and R of the pcre op-
tion before we describe suitable transformations. 
Switch  i  allows  for  case  insensitive  matching. 
Switch A limits matches to the starting position of the 
payload.  Switch  E  modifies  the  behavior  of  the  `$´ 
symbol, such that it matches the end of the payload in-
stead of any end-of-line symbol. Switch R works just as 
the relative option. The search for the pattern then starts 
relative  to  the  last  match  identified  by  the  content  or 
pcre option. Further switches are s, m, x, G, U, and B. 
1828
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:56:02 UTC from IEEE Xplore.  Restrictions apply. 
We  omit  the  description  of  these  infrequently  used 
switches for the sake of briefness. 
Transformation:  A  given  pcre  option  may  be  ab-
stracted by modifying or entirely removing the option. 
The option may be modified in two ways: (a) the option 
switches may be modified in order to widen the search 
focus. We give three examples: setting the i switch will 
ignore the case during matching, effectively accepting a 
wider  range  of  byte  strings. Removing  the A  or  the  E 
switch will remove the restriction to matching the start-
ing  position  or  end  of  any  line,  respectively,  allowing 
for a potentially larger number of matches. (b) The re-
gular expression is suitably modified. We provide sev-
eral examples. Line break symbols, such as `\r\n´, `\n\r´, 
`\r´  and  `\n´,  may  be  replaced  with `\R´,  such  that  the 
search is not restricted to a fixed line break symbol, but 
it accepts diverse variants of line break symbols. Remo-
ving trailing `$´ symbols allow matching the expression 
over the whole payload instead of merely at end of lines 
or  the  payload.  The  respective  rationale  applies  to  the 
`^´ symbol as well, which restricts matches to the start-
ing position of lines or the payload. The replacement of 
`\s´ by `\s+´ allows an arbitrary number of blank sym-
bols  between  sub-strings,  instead  of  merely  one  blank 
symbol. As for the content option we can also split the 
regular expression into sub-expressions that are delim-
ited  by  arbitrary  separation  symbols  and  accordingly 
use as many pcre options. Each option then matches the 
respective sub-strings in the payload, allowing for addi-
tional strings between the sub-strings and for an arbitra-
ry order of the sub-strings in the payload. 
Pre-conditions:  In  rules  containing  several  payload 
options,  other  options  may  refer  to  a  pcre  option  (see 
relative  matching  for  content  options).  A  pcre  option 
must not be removed if it is referred to by payload op-
tions. 
Transformation  hints:  If  the  referring  options  have 
been  removed  the  signature  engineer  should  check, 
whether the remaining payload options still search for a 
similar  phenomenon.  In  that  case,  the  signature  engi-
neer can look for further constraints reducing the search 
space and search depth using the distance, within, depth 
or offset options, thereby reducing false alarms and im-
proving the run-time efficiency of Snort. If a pcre op-
tion has been split the original search string can be used 
when  replacing  certain  blank  characters  with  other 
blank characters. If a pcre option has been removed en-
tirely  the  signature  engineer  can  check,  whether  the 
manifestations contain substrings of the original content 
option  that  can  be  used,  instead.  If  `\s`  has  been  re-
placed with ´\s+` the signature engineer can determine 
the actual number of blank characters in the manifesta-
tions. If the `\R` switch has been inserted the signature 
engineer might determine the actual line break coding. 
Byte_test option: This option extracts a given num-
ber  of bytes from a specified position  
of the payload, interprets them as a number given in a 
specified  format  and  compares  that  number  against  a 
specified number  using a specified comparison 
operator (see Fig. 6b for the syntax of the byte_test op-
tion). The switch relative interprets  relatively 
to the last match.  
Transformation: We assume that testing for a given 
 is highly specific for the given attack, such that 
a  general  fine-grained  abstraction  strategy  cannot  be 
provided. The rule can still be abstracted by removing 
the entire option. 
Pre-conditions:  A  byte_test  option  must  not  be  re-
moved if it is referred to by content, pcre, byte_test or 
byte_jump options. 
Transformation  hints:  Since    is  highly  spe-
cific for the given attack, general advice concerning the 
option value cannot be provided, if the byte_test option 
has been removed. 
Byte_jump  option:  This  option  extracts  a  given 
number  of bytes from a specified position  of the payload, and after multiplying the composite 
number with  interprets it as a position in the 
payload prior to using a byte_test, pcre, or content op-
tion  (see  Fig.  6c  for  the  syntax  of  the  byte_jump  op-
tion).  The  option  relative  works  as  described  for 
byte_test. 
a)  pcre: " [/{i|s|m|x|A|E|G|R|U|B}]"; 
b)  byte_test:"",(|=|^|&),""," 
c)  byte_jump:"","",multiplier" 
"[",relative"] 
"[",relative"]; 
Fig. 6 a,b,c: Syntax of the payload options 
Transformation:  We  assume  that  a  given  tuple 
 is highly specific for the given at-
tack, such that a general fine-grained abstraction strat-
egy cannot be provided. The rule can still be abstracted 
by removing the entire option. 
Pre-conditions: A byte_jump option must not be re-
moved, if it is referred to by a byte_test option. 
Transformation  hints:  Since  the  byte_jump  option 
values are highly specific for the given attack, general 
advice  concerning  these  values  cannot  be  provided,  if 
the byte_jump option has been removed. 
4  Evaluation Method 
A  rigorous  evaluation  of  the  suitability  of  the  pro-
posed  approach  requires  cross-testing  of  several  Snort 
rule engineering cycles of several experienced signature 
engineers  with  and  without  the  proposed  process,  and 
comparing relevant process parameters such as the time 
for engineering new rules and the usefulness of the ru-
1929
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:56:02 UTC from IEEE Xplore.  Restrictions apply. 
les.  Note  that  assessing  the  usefulness  of  a  given  rule 
implies  the  evaluation  of false  negatives  and  positives 
generated by the rule. Such a personnel intensive eva-
luation has been out of the scope of this project. In or-
der  to  get  an  impression  of  the  suitability  of  the  ap-
proach, we implemented the process for Snort rules and 
applied  it  to  selected  examples.  The  prototype  auto-
mates  the  process  beginning  with  abstracting  signa-
tures, testing signatures using Snort on the given attack 
trace,  and  selecting  signatures  for  consideration  of  re-
use or adaptation. Due to the promising results we are 
confident that further investigation is justified. 
For  our  experiments  we  used  the  7544  Snort-VRT 
Certified Rules dating back to May 15, 2007. The eva-
luation of the approach is divided into four phases. (1) 
An arbitrary rule is picked out randomly and removed 
from  the  rule  base.  (2)  The  attack  manifestations  are 
manually  inferred  and  synthesized  from  the  rule.  (3) 
Our prototype generates all abstracted signatures from 
the rule base and tests each abstracted signature against 
the synthetic manifestations. (4) The tool selects the ab-
stracted  signatures  that  match  the  manifestations  and 
ranks them by their degree of abstraction.  
For  a  number  of  transformations  described  in  Sec-
tion  3.2,  more  fine-grained  alternatives  exist. Whether 
these  refinements  allow  better  re-usable  signatures  or 
just result in the creation of additional abstractions pri-
marily depends on the used signature base. Further al-
ternative  transformations  are  feasible.  The  transforma-
tions defined above provide a starting point that is itera-
tively  improved  with  each  deployment  cycle  of  the 
process.  In  the  following  we  present  an  approach  for 
tailoring the metric δ and the granularity of transforma-
tions to the given signature base. 
Determining  Weights  and  Granularity.  For  any 
new attack for which we deploy the re-usage approach, 
we save the x proposed signatures that were ranked best 
and  the  transformations  applied  in  order  to  match  the 
new  attack.  The  quality  of  each  proposed  signature  is 
manually marked with values of the interval [0,1] (real 
numbers,  0  best  to  1  worst  suitable  for  re-use).  Thus, 
each deployment cycle of the re-usage approach results 
in x tuples , where S represents the proposed 
signature, T specifies the set of applied transformations 
and Q describes the quality of S with respect to its re-
use for the given attack. 
Based on these experiences (set of tupels E) we op-
timize δ in order to associate well re-usable signatures 
with  a  low  abstraction  degree.  To  this  end  δ  is  opti-
mized for each transformation such that the respective 
abstraction  degree  (cumulated  δ(t)  for  all  t  in  T, 
δ∑ ) of as much as possible tuples in E correlates 
t T
∈
with quality Q of the proposed signature. This is a typi-
(t)
(t)
cal optimization problem, where the objective function 
given  by  the  distance  between  abstraction  degree 
δ∑  and quality Q is minimized for all tuples in E. 
t T