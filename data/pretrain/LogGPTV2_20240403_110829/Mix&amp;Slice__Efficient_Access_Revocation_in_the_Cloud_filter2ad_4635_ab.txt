reconstruction of all the other blocks. For instance, with
reference to our example, absence of [0]1 will prevent recon-
struction of the ﬁrst block (mini-blocks [0]0, . . . , [3]0) but
will not prevent reconstruction of the other three blocks
(mini-blocks [4]0, . . . , [15]0). Protection at the block level
is clearly not suﬃcient in our context, where we expect to
manage resources of arbitrarily large size and would like to
provide the guarantee that the lack of any individual mini-
block would imply the impossibly (apart from performing
a brute-force attack) of reconstructing any other mini-block
of the resource. The concept of macro-block, and accurate
extension of block ciphering to operate across blocks, allows
us to provide mixing on an arbitrarily long sequence of bits
(going much above the size of the block).
The idea is to extend mixing to the whole macro-block
by the iterative application of block encryption on, at each
round, blocks composed of mini-blocks that are represen-
tative (i.e., belong to the result) of diﬀerent encryptions
in the previous round. Before giving the general deﬁni-
tion of our approach,
let us discuss the simple example
of two rounds illustrated in Figure 1, where [0]1, . . . , [15]1
are the mini-blocks resulting from the ﬁrst round. The
second round would apply again block encryption, con-
sidering diﬀerent blocks each composed of a representa-
tive of a diﬀerent computation in the ﬁrst round. To
Mix(M)
1: for i := 1, . . . , x do
2:
span := mi
distance := mi−1
for j := 0, . . . , b − 1 do
3:
4:
5:
6:
7:
8:
/* at each round i */
/* number of mini-blocks in a mixing */
/* leg of mini-blocks input to an encryption */
/* each j is an encryption */
/* identify the input to the j-th encryption picking, */
/* within each span, mini-blocks at leg distance */
let block be the concatenation of all mini-blocks [l]
s.t. (l mod distance) = j and
(j · m) div span = l div span
[[j]]i := E(k, block) /* write the result as the j-th block in output */
Figure 2: Mixing within a macro-block M
guarantee such a composition, we deﬁne the blocks input
to the four encryption operations as composed of mini-
blocks that are at distance 4 (=m) in the sequence, which
corresponds to say that they resulted from diﬀerent en-
cryption operations in the previous round. The blocks
considered for encryption would then be h[0]1[4]1[8]1[12]1i,
h[1]1[5]1[9]1[13]1i,h[2]1[6]1[10]1[14]1i,h[3]1[7]1[11]1[15]1i. The
result would be a sequence of 16 mini-blocks, each of which
is dependent on each of the 16 original mini-blocks, that is,
the result provides mixing among all 16 mini-blocks, as vis-
ible from the pattern-coding in the ﬁgure. With 16 mini-
blocks, two rounds of encryption suﬃce for guaranteeing
mixing among all of them. Providing mixing for larger se-
quences clearly requires more rounds. This brings us to the
general formulation of our approach operating at the level
of macro-block of arbitrarily large size (the example just il-
lustrated being a macro-block of 16 mini-blocks).
To ensure the possibility of mixing, at each round, blocks
composed of mini-blocks resulting from diﬀerent encryption
operations of the previous round, we assume a macro-block
composed of a number of mini-blocks, which is the power of
the number (m) of mini-blocks in a block. For instance, with
reference to our running example where blocks are composed
of 4 mini-blocks (i.e., m=4), macro-blocks can be composed
of 4x mini-blocks, with an arbitrary x (x=2 in the example
of Figure 1). The assumption can be equivalently stated in
terms of blocks, where the number of blocks b will be 4x−1.
Any classical padding solution can be employed to guarantee
such a requirement, if not already satisﬁed by the original
bit sequence in input.
Providing mixing of a macro-block composed of b blocks
with b=mx−1 requires x rounds of encryption each composed
of b encryptions. Each round allows mixing among a num-
ber span of mini-blocks that multiplies by m at every round.
At round i, each encryption j takes as input m mini-blocks
that are within the same span (i.e., the same group of m i
mini-blocks to be mixed) and at a distance (m i−1). Figure 2
illustrates the mixing procedure. To illustrate, consider the
example in Figure 1, where blocks are composed of 4 mini-
blocks (m=4) and we have a macro-block of 16 mini-blocks,
that is, 4 blocks (b=4). Mixing requires x = 2 rounds of
encryption (16 = 42), each composed of 4 (b) encryptions
operating on 4 (m) mini-blocks. At round 1, the span is 4
(i.e., mixing operates on chunks of 4 mini-blocks) and mini-
blocks input to an encryption are taken at distance 1 within
each span. At round 2, the span is 16 (all mini-blocks are
mixed) and mini-blocks input to an encryption are taken
at distance 4 within each span. Let us consider, as an an-
other example, a macro-block composed of 64 mini-blocks
(i.e., 16 blocks). Mixing requires 3 rounds. The ﬁrst two
rounds would work as before, with the second round pro-
219[0][1][2][3]
E
[0]
[4]
[8]
[12]
[60]
[61]
[62]
[63]
[51]
[55]
[59]
[63]
E
E
E
[0]
[15][16]
[31][32]
[47][48]
[63]
E
E
round 1
span: 4
distance: 1
round 2
span: 16
distance: 4
round 3
span: 64
distance: 16
Figure 3: Propagation of the content of mini-blocks [0] and [63] in the mix process
ducing mixing within chunks of 16 mini-blocks. The third
round would then consider a span of all the 64 mini-blocks
and mini-blocks input to an encryption would be the ones
at distance 16.
At each round i, mini-blocks are mixed among chunks of
m i mini-blocks, hence ensuring at round x, mixing of the
whole macro-block composed of m x mini-blocks.
Figure 3 captures this concept by showing the mixing of
the content of the ﬁrst ([0]) and last ([63]) mini-blocks of
the macro-block at the diﬀerent rounds, given by the en-
cryption to which they (and those mini-blocks mixed with
them in previous rounds) are input, showing also how the
two meet at the step that completes the mixing. While for
simplicity the ﬁgure pictures only propagation of the con-
tent of two mini-blocks, note that at any step they (just like
other mini-blocks) actually carry along the content of all
the mini-blocks with which they mixed in previous rounds.
Given a macro-block M with mx mini-blocks (corresponding
to b blocks), the following two properties hold: 1) a generic
pair of mini-blocks [i] and [j] mix at round r with i div mr =
j div mr; and 2) x rounds bring complete mixing. In other
words, the number of encryption rounds needed to mix a
macro-block with m · b mini-blocks is logm (m · b).
An important feature of the mixing is that the number of
bits that are passed from each block in a round to each block
in the next round is equal to the size of the mini-block. This
guarantees that the uncertainty introduced by the absence
of a mini-block at the ﬁrst round (2msize ) maps to the same
level of uncertainty for each of the blocks involved in the
second round, and iteratively to the next rounds, thanks to
the use of AES at each iteration. This implies that a com-
plete mixing of the macro-block requires at least logm (m · b)
rounds, that is, the rounds requested by our technique.
Another crucial aspect is that the representation after
each round has to be of the same size as the original macro-
block. In fact, if the transformation produced a more com-
pact representation, there would be a possibility for a user
to store this compact representation and maintain access
to the resource even after revocation (this is a weakness of
other solutions discussed in Section 6). Since, in our ap-
proach, each round produces a representation that has the
same macro-block size, the user has no beneﬁt in aiming to
attack one round compared to another (see Section 4).
We note that an interpretation of the proposed mixing is
that it extends the ability of protecting the correspondence
between input and output of a block cipher to blocks of ar-
bitrary size. An alternative approach that we considered to
obtain this result was based on the use of a Feistel archi-
tecture [14], which is known to be an eﬀective technique for
the construction of block ciphers. The approach uses, as the
round function of the Feistel architecture, a block cipher.
The approach can be applied iteratively, doubling the block
size at every iteration. The analysis we performed showed
that this approach would lead to less eﬃciency compared to
the solution proposed in this paper, with a number of invo-
cations of the basic block cipher equal to 2 · logm (m · b). The
Feistel-based approach can be adopted when the mini-block
size desired for security goes beyond the block size of the
available block cipher. Similarly, symmetric cryptosystems
operating on large blocks can support larger mini-blocks and
also reduce the number of rounds of our approach. For in-
stance, AESQ [3, 4] shuﬄes 4 AES blocks and could be used
as a 512-block cipher in our structure.
When resources are extremely large (or when access to a
resource involves only a portion of it) considering a whole
resource as a single macro-block may be not desirable. Even
if only with a logarithmic dependence, the larger the macro-
block the more the encryption (and therefore decryption to
retrieve the plaintext) rounds required. Also, encrypting the
whole resource as a single macro-block implies its complete
download at every access, when this might actually not be
needed for service.
Accounting for this, we do not assume a resource to cor-
respond to an individual macro-block, but assume instead
that any resource can be partitioned into M macro-blocks,
which can then be mixed independently. The choice of the
size of macro-blocks should take into consideration the per-
formance requirements of both the data owner (for encryp-
tion) and of clients (for decryption), and the possible need to
serve ﬁne-grained retrieval of content. This requirement can
be then eﬃciently accommodated independently encrypting
(i.e., mixing) diﬀerent portions of the resource, which can
be downloaded and processed independently (we will dis-
cuss this in Section 5.2).
Encryption of a resource would then entail a preliminary
step cutting the resource in diﬀerent, equally sized, macro-
blocks on which mixing operates. To ensure the mixed
220• • •
M 1
.
IV
1
IV
0
M 1
resource
cutting
M 0
XOR-ing
M 0
mixing
• • •
• • •
• • •
• • •
M M-1
M M-1
IVM-1
[0]
x
[m -1]
M M-1
Encrypt
1: cut R in M macro-blocks M0, . . . , MM −1
2: apply padding to the last macro-block MM −1
3: IV := randomly choose an initialization vector
4: for i = 0, . . . , M − 1 do
5: Mi[[1]] := Mi[[1]] ⊕ IV
6: Mix(Mi)
7:
IV := IV + 1
for j = 0, . . . , m x − 1 do
/* encrypt macro-blocks */
/* xor the first block with the IV */
/* encrypt the macro-block */
8:
9:
M 1
M 0
F0
Fm -1
x
/* initialization vector for the next macro-block */
/* slicing */
Fj[i] := Mi[j]
Figure 5: Algorithm for encrypting a resource R
(a)
(b)
Figure 4: From resource to fragments
versions of macro-blocks be all diﬀerent, even if with the
same original content, the ﬁrst block of every macro-block is
xored with an initialization vector (IV ) before starting the
mixing process. Since mixing guarantees that every block in
a macro-block inﬂuences every other block, the adoption of
a diﬀerent initialization vector for each macro-block guar-
antees indistinguishability among their encrypted content.
The diﬀerent initialization vectors for the diﬀerent blocks
can be obtained by randomly generating a vector for the
ﬁrst macro-block and then incrementing it by 1 for each of
the subsequent macro-blocks in the resource, in a way similar
to the CTR mode [9]. Figure 4(a) illustrates such process.
2.3 Slicing
The starting point for introducing mixing is to ensure that
each single bit in the encrypted version of a macro-block de-
pends on every other bit of its plaintext representation, and
therefore that removing any one of the bits of the encrypted
macro-block would make it impossible (apart from brute-
force attacks) to reconstruct any portion of the plaintext
macro-block. Such a property operates at the level of macro-
block. Hence, if a resource (because of size or need of eﬃ-
cient ﬁne-grained access) has been partitioned into diﬀerent
macro-blocks, removal of a mini-block would only guarantee
protection of the macro-block to which it belongs, while not
preventing reconstruction of the other macro-blocks (and
therefore partial reconstructions of the resource). Resource
protection can be achieved if, for each macro-block of which
the resource is composed, a mini-block is removed. This
observation brings to the second concept giving the name
to our approach, which is slicing. Slicing the encrypted re-
source consists in deﬁning diﬀerent fragments such that a
fragment contains a mini-block for each macro-block of the
resource, no two fragments contain the same mini-block, and
for every mini-block there is a fragment that contains it.
To ensure all this, as well as to simplify management, we
slice the resource simply putting in the same fragment the
mini-blocks that occur at the same position in the diﬀerent
macro-blocks. Slicing and fragments are deﬁned as follows.
Definition 2.1
(Slicing and fragments). Let R be
a resource and M0, . . . , MM −1 be its (individually mixed)
macro-blocks, each composed of (m · b) mini-blocks. Slicing
produces (m·b) fragments for R where Fi = hM0[i], . . . , MM −1[i]i,
with i = 1, . . . , (m · b).
Figure 4(b) illustrates the slicing process and Figure 5 il-
lustrates the procedure for encrypting a resource R. R is
ﬁrst cut into M macro-blocks and an initialization vector
is randomly chosen. The ﬁrst block of each macro-block
is then xor-ed with the initialization vector, which is in-
cremented by 1 for each macro-block. The macro-block is
then encrypted with a mixing process (Figure 2). Encrypted
macro-blocks are ﬁnally sliced into fragments.
3. ACCESS MANAGEMENT
Accessing a resource (or a macro-block in the resource,
resp.)
requires availability of all its fragments (its mini-
blocks in all the fragments, resp.), and of the key used for
encryption. Policy changes corresponding to granting access
to new users can be simply enforced, as usual, by giving
them the encryption key. In principle, policy changes cor-
responding to revocation of access would instead normally
entail downloading the resource, re-encrypting it with a new
key, re-uploading the resource, and distributing the new en-
cryption key to all the users who still hold authorizations.
Our approach permits to enforce revocation of access to a
resource by simply making any of its fragments unavailable
to the users from whom the access is revoked. Since lack of
a fragment implies lack of a mini-block for each macro-block
of a resource, and lack of a mini-block prevents reconstruc-
tion of the whole macro-block, lack of a fragment equates to
complete inability, for the revoked users, to reconstruct the
plaintext resource or any portion of it. In other words, it
equates to revocation.
Access revocations are then enforced by the data owner by
randomly picking a fragment, which is then downloaded, re-
encrypted with a new key (which will be made known only to
users still authorized for the access), and re-uploaded at the
server overwriting its previous version. While still requesting
some download/re-upload, operating on a fragment clearly
brings large advantages (in terms of throughput) with re-
spect to operating on the whole resource (see Section 5).
Revocation can be enforced on any randomly picked frag-
ment (even if already re-written in a previous revocation)
and a fresh new key is employed at every revoke operation.
Figure 6 illustrates an example of fragments evolution due
to the enforcement of a sequence of revoke operations. Fig-
ure 6(a) is the starting situation with the original fragments
computed as illustrated in Section 2. Figure 6(b-d) is the se-
quence of rewriting to enforce revocations, which involve, re-
spectively, fragment F10, re-encrypted with key k1, fragment
F4, re-encrypted with key k2, and fragment F10 again, now
re-encrypted with key k3. In the following, we use notation
Fj
i to denote a version of fragment Fi encrypted with key kj,
being F0