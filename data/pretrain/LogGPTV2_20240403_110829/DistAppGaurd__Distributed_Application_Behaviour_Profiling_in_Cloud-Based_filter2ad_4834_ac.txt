microservice (second layer) then by using those representations we
represent the behaviour of the whole application (code). Similarly,
the reconstruction process follows the same idea. This procedure
gives the model more information regarding the application which
leads to a better profiling. This design also reduces the number of
parameters that need to be tuned during the training phase which
makes the training faster [5]. We study the effectiveness of this
design in Section 5.
Figure 5: Using Autoencoders for Graph Anomaly Detection
3.4.2 Microservice-aware Autoencoder. Autoencoders are fully con-
nected neural network by default which means each neuron (node)
in one layer is connected to all neurons of the next layer. However,
Wan et al. [31] showed that randomly removing (i.e., dropping)
some edges from neural networks during the training phase can
reduce overfitting which in turn leads to increase in performance
of the model. Overfitting occurs when the model fits too closely
to a certain set of data that it fails to fit more data or correctly
predict future observations. This technique is widely used in the
recent literature. Recently, Rong et al. [29] introduced DropEdge in
which they apply the same technique on graph neural networks. In-
spired by them, in this paper we introduce the microservice-aware
Autoencoders in which specific edges are dropped based on our mi-
croservice role identification algorithm to improve the performance
of the anomaly detection.
We adopt an Autoencoder with five layers (see Fig. 6). In the first
and fifth layer which are the input and output layer, respectively,
each neuron represents the weight of an edge of the MSDEG graph.
In the second layer, there are a fixed number of neurons (e.g., 8 in
Fig. 6) for each microservice role. These neurons are only connected
to the neurons from the first layer which are representing the edges
Figure 6: An example of microservice-aware Autoencoders
4 ATTACK SCENARIOS
In this section, we describe the attack scenarios that we study
for the feasibility of our framework on. We tested the SGW IP
Modification (SGWIPM) attack (Fig. 1, see motivating example),
and two other stealthy attack scenarios, namely False Downlink
Data Notification (FDDN) [28] and Purging Subscribers’ Context
from MME (PSCMME) [28]. The reason behind choosing these
attacks is that they are not detectable by monitoring any single
container. They are only detectable if we combine the activity of
multiple containers (see Section 6 for detailed discussions).
The threat model for FDDN and PSCMME attacks includes a
cloud service provider hosting several LTE network operators. Dur-
ing the system registration process, a malicious tenant takes advan-
tage of a Virtual Network Function (VNF) selection query determin-
ing the best available VNFs. By replacing the victim tenant’s SGW
IP address with one of its own, the malicious tenant is then able
to hijack the response to that query. The malicious SGW avoids
  RMSENormalAttack≤ Threshold> ThresholdeNBHSSMMEUEEncoderDecoder113244  Input LayerSecond LayerCodeFour LayerOutput Layer............................Input LayerSecond LayerCodeFourth LayerOutput Layer˟#Edges˟8˟8˟8˟8˟8˟8˟8˟8....˟#Edges˟16Microservice Role ID 4Microservice Role ID 3Microservice Role ID 2Microservice Role ID 1842DistAppGaurd: Distributed Application Behaviour Profiling in Cloud-Based Environment
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
getting detected by the cloud intrusion detection system by associ-
ating itself with the victim tenant network and strictly following
LTE standard operations.
4.1 SGW IP Modification
This experiment emulates a complex attack that starts from breach-
ing the CI/CD process by the attacker by injecting a benign piece of
code (with a backdoor) to the application source code. Then, later
in the production environment, the backdoor will be activated. In
our implementation, we modified the eNB main process’ source
code (C language), called lte-softmodem, to inject a backdoor to the
source code. Then, we compile it and replace it with the original
binary of lte-softmodem on the eNB docker image. To simulate the
backdoor triggering, we consider that the attacker can activate the
exploit when a specific temporary file is created in the /tmp folder
and it will redirect the user traffic for all IMSIs3 listed inside the
temporary file. In this attack scenario, to cover the case that the
attacker has access to the vRAN we consider a more challenging
setup in which we only collect system calls from the core network
(the eNB system calls are not collected). This scenario could happen
in two cases: i) if the core network and the radio access network
(RAN) are managed by two different operators, or ii) if the opera-
tor has no intrusion detection system installed in the RAN due to
available resource constraints.
4.2 False Downlink Data Notification
In this attack (see Fig. 7), the malicious SGW sends a false down-
link data notification message to MME, which in turn reserves the
memory for every device addressed in the downlink data notifi-
cation message. Subsequently, the paging procedure is initiated
through eNB. Broadcast paging messages are directed to multiple
devices which initially establish a radio connection between the
subscriber devices and eNB after receiving the paging message, and
shift into a connected state. Service Request messages are sent to
MME in order to inaugurate their data channel and be authenti-
cated. The MME positions their bearer resources for data packet
uplink/downlink transfer. Since invalid downlink data notifications
from malicious SGW launched these Service Request messages, data
activity from/to devices is nonexistent. Once the device inactivity
timer expires (usually around 11-12 seconds) the MME releases the
devices’ connections and clears the memory.
This exposure allows the malicious SGW to keep MME mem-
ory engaged by sending false downlink data notification messages
every 12 seconds; therefore, the attacker can slow down message
processing at victim VNF and produce control-plane latencies. Since
the power consumption in the device connected state is 3-4 times
higher than in its idle state, this vulnerability silently drains the
battery of victim devices.
4.3 Purging Subscribers’ Context from MME
Sending a fake "PGW Restart Notification" message allows the ma-
licious SGW to remove all subscribers’ context from MME (see Fig.
8). The PGW is directly connected to SGW, with its connection to
MME passing through SGW. The SGW sends a failure notification
signaling message to MME when it identifies the PGW has failed,
3International mobile subscriber identity
Figure 7: Memory pressure on the MME through sending
false downlink data notification messages from a malicious
SGW
leading to the MME clearing all subscriber records served by failed
PGW. The Implicit Detach Request message is then sent to all of
these subscriber devices by MME. When devices receive an Implied
Detach Order, they first unregister from the LTE network locally
before restarting the registration process (i.e., Attach Request pro-
cedure). This weakness introduces incast micro-burst (signaling
spikes) because new registration requests from these subscriber
devices arrive at core network at roughly the same time.
Figure 8: Purging subscribers’ context from MME by sending
a PGW restart notification from a malicious SGW
5 EXPERIMENTAL RESULTS
In this section, we present the experiments carried out to evaluate
the performance and accuracy of our approach in various attack
scenarios.
5.1 Testbed
The attacks have been implemented in an environment with 6
different VMs (Ubuntu 18.04, Linux Kernel v4.15.0-136, 8 virtual
cores, and 16G RAM) running on an enterprise research cloud. On
each VM, Docker (v19.03.6) is installed as the container manage-
ment tool, as well as SystemTap4 (v3.1) for system call collection.
We containerized OpenAirInterface implementation of LTE. After
building the docker images, we installed them on all VMs so that
we can respawn the containers in different locations during our
experiments.
4https://sourceware.org/systemtap/
Soft UE 1 eNB 1HSSSGWMMESoft UE 500 …eNB 10…PagingDownlink Data NotificationAttach and Service RequestPagingPGWSoft UE 1 eNB 1HSSSGWMMESoft UE 500 …eNB 10…PGWImplicit DetachPGW RestartNotificationReattachSGW 10…843ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Ghorbani et al.
Table 1: Gaussian distribution parameters for LTE simulation procedures
procedure
µ
σ
attach
5
3
detach
5
3
failed attach TAU DDN PGW restart GW HB service request
paging U data D data
10
5
10
5
30
10
30
10
3
3
5
2
10
3
2
1
2
1
To represent the normal behaviour of users in our LTE envi-
ronment, we simulate their behaviour by randomly performing
different Telecom operations and procedures in an LTE environ-
ment for 24 hours. The user simulation behaviour is generated
using a random number generation following a Guassian distribu-
tion designating different procedures in our LTE network with an
interval of one seconds (see Table 1 for details). The procedures are
attach, detach, failed attach, tracking area update (TAU), downlink
data notification (DDN), PGW restart, gateways heartbeat (GW HB),
service request, paging, uplink data (U data), and downlink data (D
data).
5.2 Model Setup
Since we are using parameterized method in our framework, the per-
formance of the model must be defined by the optimal parameters.
The training procedure does not include anomalous data, therefore,
the cross-validation task cannot be conducted in the optimization
of hyperparameters [9]. For our microservice-aware Autoencoder
model, we consider 8 neurons for each microservice and 16 neurons
for the Code layer. The dimensions in the layers were set through
trial and error. For the weight initialization method, we use Xavier
method [15]. Sigomoid is used as the activation function based on
a study done in [30] with mean square error loss function. The
network is trained with the backpropagation algorithm using Sto-
chastic Gradient Descent optimization. The neural networks used
in this work are implemented with scikit-learn library [26].
We use 80% of the data collected from the application’s normal
behaviour to train (training dataset) our machine learning models.
We use the remaining 20% of the normal behaviour (normal test
dataset) in addition to data collected during the attack scenarios
(attack test dataset) for evaluation. Table 2 shows the overview of
the reproduced attack scenarios in terms of Time Window (T.W.),
Normal Event (N.E.), and Abnormal Event (A.E.).
Table 2: Overview of the reproduced attack scenarios
Attack
SGWIPM 1s
FDDN
1s
1s
PSCMME
T.W.
5s
5s
5s
30s
30s
30s
#(N.E.)
9890
10280
11920
#(A.E.)
540
1283
1025
5.3 Detection Performance and Analysis
Using the t-Distributed Stochastic Neighbor Embedding (t-SNE)
method, Fig. 9 visualizes the data obtained from each attack scenario
during normal and under attack behaviour. We use the code layer
(i.e, third layer) of our Autoencoder neural network which is a lower
dimensional representation of the input in the latent space as the
input to the t-SNE algorithm.
The training dataset, normal test dataset, and attack dataset’s
data points are represented by the blue, green, and red colors, re-
spectively. The creation of normal (blue and green) and abnormal
(red) clustered data points shows that the Autoencoder we chose
in our experiments captures deviation from the normal behaviour
during the attacks.
(a) SGW IP Modification Attack
(b) FDDN Attack
(c) PSCM Attack
Figure 9: t-SNE visualization of normal and abnormal be-
haviour cluster formation
To quantify the performance of our framework, we applied both
microservice-aware Autoencoder (DistAppGaurd-MS-AE) and fully
connected Autoencoder without edge dropping (DistAppGaurd-AE)
on the collected data. We also compare our results with Malchain [14]
and other state-of-the-art techniques of using system calls for anom-
aly detection, namely bag of system calls (BoSC) used in [25] and
bag of n-grams used in [21]. To compare our results with [25] and
[21], as these applications are implemented for only one process,
and do not deal with distributed aspects, we combine the system
calls produced by all the processes of an application together in
order to be able to compare our approach with the approaches. For
comparison with Malchain, we assume that all the containers are
running on the same machine.
We use false alarm rate (FAR) and detection rate metrics to as-
sess the models’ performance. The false alarm rate is defined as
the number of negative events calculated as positive over the total
number of negative events, and the detection rate is the number of
positive events detected over the total number of positive events,
where an event is identified as the status of the network in a pe-
riod of time; it can either be negative if the network is in normal
behaviour or positive if the network is under an attack. The aim of
60402002040402002040TrainTestAttack604020020406040200204060TrainTestAttack4020020406040200204060TrainTestAttack844DistAppGaurd: Distributed Application Behaviour Profiling in Cloud-Based Environment
ACSAC ’21, December 6–10, 2021, Virtual Event, USA