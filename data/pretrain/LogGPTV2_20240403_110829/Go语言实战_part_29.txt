LstdFlags = Ldate | Ltime
)
代码清单8-5是从log包里直接摘抄的源代码。这些标志被声明为常量，这个代码块中的第
一个常量叫作Ldate，使用了特殊的语法来声明，如代码清单8-6所示。
代码清单8-6 声明Ldate常量
// 日期: 2009/01/23
Ldate = 1 << iota
关键字iota在常量声明区里有特殊的作用。这个关键字让编译器为每个常量复制相同的表
达式，直到声明区结束，或者遇到一个新的赋值语句。关键字iota的另一个功能是，iota的
初始值为 0，之后 iota 的值在每次处理为常量后，都会自增 1。让我们更仔细地看一下这个关
键字，如代码清单8-7所示。
代码清单8-7 使用关键字iota
const (
Ldate = 1 << iota // 1 << 0 = 000000001 = 1
Ltime // 1 << 1 = 000000010 = 2
Lmicroseconds // 1 << 2 = 000000100 = 4
Llongfile // 1 << 3 = 000001000 = 8
Lshortfile // 1 << 4 = 000010000 = 16
...
)
代码清单 8-7 展示了常量声明背后的处理方法。操作符<<对左边的操作数执行按位左移操
作。在每个常量声明时，都将1按位左移iota个位置。最终的效果使为每个常量赋予一个独立
位置的位，这正好是标志希望的工作方式。
常量LstdFlags展示了如何使用这些标志，如代码清单8-8所示。
代码清单8-8 声明LstdFlags常量
const (
...
LstdFlags = Ldate(1) | Ltime(2) = 00000011 = 3
)
在代码清单 8-8 中看到，因为使用了复制操作符，LstdFlags 打破了 iota 常数链。由于
有|运算符用于执行或操作，常量 LstdFlags 被赋值为 3。对位进行或操作等同于将每个位置
的位组合在一起，作为最终的值。如果对位1和2进行或操作，最终的结果就是3。
让我们看一下我们要如何设置日志标志，如代码清单8-9所示。
代码清单8-9 listing03.go：第08行到第11行
08 func init() {
09 ...
10 log.SetFlags(log.Ldate | log.Lmicroseconds | log.Llongfile)
11 }
这里我们将Ldate、Lmicroseconds和Llongfile标志组合在一起，将该操作的值传入
SetFlags函数。这些标志值组合在一起后，最终的值是13，代表第1、3和4位为1（00001101）。
由于每个常量表示单独一个位，这些标志经过或操作组合后的值，可以表示每个需要的日志参数。
之后log包会按位检查这个传入的整数值，按照需求设置日志项记录的信息。
初始完log包后，可以看一下main()函数，看它是是如何写消息的，如代码清单8-10所示。
代码清单8-10 listing03.go：第13行到第22行
13 func main() {
14 // Println写到标准日志记录器
15 log.Println("message")
16
17 // Fatalln在调用Println()之后会接着调用os.Exit(1)
18 log.Fatalln("fatal message")
19
20 // Panicln在调用Println()之后会接着调用panic()
21 log.Panicln("panic message")
22 }
代码清单8-10展示了如何使用3个函数Println、Fatalln和Panicln来写日志消息。
这些函数也有可以格式化消息的版本，只需要用f替换结尾的ln。Fatal系列函数用来写日志
消息，然后使用os.Exit(1)终止程序。Panic系列函数用来写日志消息，然后触发一个panic。
除非程序执行recover函数，否则会导致程序打印调用栈后终止。Print系列函数是写日志消
息的标准方法。
log 包有一个很方便的地方就是，这些日志记录器是多 goroutine 安全的。这意味着在多个
goroutine可以同时调用来自同一个日志记录器的这些函数，而不会有彼此间的写冲突。标准日志
记录器具有这一性质，用户定制的日志记录器也应该满足这一性质。
现在知道了如何使用和配置 log 包，让我们看一下如何创建一个定制的日志记录器，以便
可以让不同等级的日志写到不同的目的地。
8.2.2 定制的日志记录器
要想创建一个定制的日志记录器，需要创建一个Logger类型值。可以给每个日志记录器配
置一个单独的目的地，并独立设置其前缀和标志。让我们来看一个示例程序，这个示例程序展示
了如何创建不同的Logger类型的指针变量来支持不同的日志等级，如代码清单8-11所示。
代码清单8-11 listing11.go
01 // 这个示例程序展示如何创建定制的日志记录器
02 package main
03
04 import (
05 "io"
06 "io/ioutil"
07 "log"
08 "os"
09 )
10
11 var (
12 Trace *log.Logger // 记录所有日志
13 Info *log.Logger // 重要的信息
14 Warning *log.Logger // 需要注意的信息
15 Error *log.Logger // 非常严重的问题
16 )
17
18 func init() {
19 file, err := os.OpenFile("errors.txt",
20 os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666)
21 if err != nil {
22 log.Fatalln("Failed to open error log file:", err)
23 }
24
25 Trace = log.New(ioutil.Discard,
26 "TRACE: ",
27 log.Ldate|log.Ltime|log.Lshortfile)
28
29 Info = log.New(os.Stdout,
30 "INFO: ",
31 log.Ldate|log.Ltime|log.Lshortfile)
32
33 Warning = log.New(os.Stdout,
34 "WARNING: ",
35 log.Ldate|log.Ltime|log.Lshortfile)
36
37 Error = log.New(io.MultiWriter(file, os.Stderr),
38 "ERROR: ",
39 log.Ldate|log.Ltime|log.Lshortfile)
40 }
41
42 func main() {
43 Trace.Println("I have something standard to say")
44 Info.Println("Special Information")
45 Warning.Println("There is something you need to know about")
46 Error.Println("Something has failed")
47 }
代码清单8-11 展示了一段完整的程序，这段程序创建了4 种不同的Logger 类型的指针变
量，分别命名为 Trace、Info、Warning 和 Error。每个变量使用不同的配置，用来表示不
同的重要程度。让我们来分析一下这段代码是如何工作的。
在第11行到第16行，我们为4个日志等级声明了4个Logger类型的指针变量，如代码清
单8-12所示。
代码清单8-12 listing11.go：第11行到第16行
11 var (
12 Trace *log.Logger // 记录所有日志
13 Info *log.Logger // 重要的信息
14 Warning *log.Logger // 需要注意的信息
15 Error *log.Logger // 非常严重的问题
16 )
在代码清单8-12中可以看到对Logger类型的指针变量的声明。我们使用的变量名很简短，
但是含义明确。接下来，让我们看一下init()函数的代码是如何创建每个Logger类型的值并
将其地址赋给每个变量的，如代码清单8-13所示。
代码清单8-13 listing11.go：第25行到第39行
25 Trace = log.New(ioutil.Discard,
26 "TRACE: ",
27 log.Ldate|log.Ltime|log.Lshortfile)
28
29 Info = log.New(os.Stdout,
30 "INFO: ",
31 log.Ldate|log.Ltime|log.Lshortfile)
32
33 Warning = log.New(os.Stdout,
34 "WARNING: ",
35 log.Ldate|log.Ltime|log.Lshortfile)
36
37 Error = log.New(io.MultiWriter(file, os.Stderr),
38 "ERROR: ",
39 log.Ldate|log.Ltime|log.Lshortfile)
为了创建每个日志记录器，我们使用了 log 包的 New 函数，它创建并正确初始化一个
Logger 类型的值。函数New 会返回新创建的值的地址。在New 函数创建对应值的时候，我们
需要给它传入一些参数，如代码清单8-14所示。
代码清单8-14 golang.org/src/log/log.go
// New创建一个新的Logger。out参数设置日志数据将被写入的目的地
// 参数prefix会在生成的每行日志的最开始出现
// 参数flag定义日志记录包含哪些属性
func New(out io.Writer, prefix string, flag int) *Logger {
return &Logger{out: out, prefix: prefix, flag: flag}
}
代码清单8-14 展示了来自 log 包的源代码里的New 函数的声明。第一个参数out 指定了
日志要写到的目的地。这个参数传入的值必须实现了io.Writer接口。第二个参数prefix是
之前看到的前缀，而日志的标志则是最后一个参数。
在这个程序里，Trace日志记录器使用了ioutil包里的Discard变量作为写到的目的地，
如代码清单8-15所示。
代码清单8-15 listing11.go：第25行到第27行
25 Trace = log.New(ioutil.Discard,
26 "TRACE: ",
27 log.Ldate|log.Ltime|log.Lshortfile)
变量Discard有一些有意思的属性，如代码清单8-16所示。
代码清单8-16 golang.org/src/io/ioutil/ioutil.go
// devNull是一个用int作为基础类型的类型
type devNull int
// Discard是一个io.Writer，所有的Write调用都不会有动作，但是会成功返回
var Discard io.Writer = devNull(0)
// io.Writer接口的实现
func (devNull) Write(p []byte) (int, error) {
return len(p), nil
}
代码清单8-16展示了Discard变量的声明以及相关的实现。Discard变量的类型被声明
为 io.Writer 接口类型，并被给定了一个 devNull 类型的值 0。基于 devNull 类型实现的
Write方法，会忽略所有写入这一变量的数据。当某个等级的日志不重要时，使用Discard变
量可以禁用这个等级的日志。
日志记录器Info和Warning都使用stdout作为日志输出，如代码清单8-17所示。
代码清单8-17 listing11.go：第29行到第35行
29 Info = log.New(os.Stdout,
30 "INFO: ",
31 log.Ldate|log.Ltime|log.Lshortfile)
32
33 Warning = log.New(os.Stdout,
34 "WARNING: ",
35 log.Ldate|log.Ltime|log.Lshortfile)
变量Stdout的声明也有一些有意思的地方，如代码清单8-18所示。
代码清单8-18 golang.org/src/os/file.go
// Stdin、Stdout和Stderr是已经打开的文件，分别指向标准输入、标准输出和
// 标准错误的文件描述符
var (
Stdin = NewFile(uintptr(syscall.Stdin), "/dev/stdin")
Stdout = NewFile(uintptr(syscall.Stdout), "/dev/stdout")
Stderr = NewFile(uintptr(syscall.Stderr), "/dev/stderr")
)
os/file_unix.go
// NewFile用给出的文件描述符和名字返回一个新File
func NewFile(fd uintptr, name string) *File {
在代码清单 8-18 中可以看到 3 个变量的声明，分别表示所有操作系统里都有的 3 个标准输
入/输出，即Stdin、Stdout和Stderr。这3个变量都被声明为File类型的指针，这个类型
实现了io.Writer接口。有了这个知识，我们来看一下最后的日志记录器Error，如代码清单
8-19所示。
代码清单8-19 listing11.go：第37行到第39行
37 Error = log.New(io.MultiWriter(file, os.Stderr),
38 "ERROR: ",
39 log.Ldate|log.Ltime|log.Lshortfile)
在代码清单8-19中可以看到New函数的第一个参数来自一个特殊的函数。这个特殊的函数
就是io包里的MultiWriter函数，如代码清单8-20所示。
代码清单8-20 包io里的MultiWriter函数的声明
io.MultiWriter(file, os.Stderr)
代码清单8-20单独展示了MultiWriter函数的调用。这个函数调用会返回一个io.Writer
接口类型值，这个值包含之前打开的文件file，以及stderr。MultiWriter函数是一个变参函
数，可以接受任意个实现了io.Writer接口的值。这个函数会返回一个io.Writer值，这个值会
把所有传入的 io.Writer 的值绑在一起。当对这个返回值进行写入时，会向所有绑在一起的
io.Writer值做写入。这让类似log.New这样的函数可以同时向多个Writer做输出。现在，当
我们使用Error记录器记录日志时，输出会同时写到文件和stderr。
现在知道了该如何创建定制的记录器了，让我们看一下如何使用这些记录器来写日志消息，
如代码清单8-21所示。
代码清单8-21 listing11.go：第42行到第47行
42 func main() {
43 Trace.Println("I have something standard to say")
44 Info.Println("Special Information")
45 Warning.Println("There is something you need to know about")
46 Error.Println("Something has failed")
47 }
代码清单8-21展示了代码清单8-11中的main()函数。在第43行到第46行，我们用自己
创建的每个记录器写一条消息。每个记录器变量都包含一组方法，这组方法与 log 包里实现的
那组函数完全一致，如代码清单8-22所示。
代码清单8-22展示了为Logger类型实现的所有方法。
代码清单8-22 不同的日志方法的声明
func (l *Logger) Fatal(v ...interface{})
func (l *Logger) Fatalf(format string, v ...interface{})
func (l *Logger) Fatalln(v ...interface{})
func (l *Logger) Flags() int
func (l *Logger) Output(calldepth int, s string) error
func (l *Logger) Panic(v ...interface{})
func (l *Logger) Panicf(format string, v ...interface{})