title:Code injection attacks on harvard-architecture devices
author:Aur&apos;elien Francillon and
Claude Castelluccia
Code Injection Attacks on Harvard-Architecture Devices
Aurélien Francillon
INRIA Rhône-Alpes
655 avenue de l’Europe, Montbonnot
38334 Saint Ismier Cedex, France
PI:EMAIL
Claude Castelluccia
INRIA Rhône-Alpes
655 avenue de l’Europe, Montbonnot
38334 Saint Ismier Cedex, France
PI:EMAIL
ABSTRACT
Harvard architecture CPU design is common in the embed-
ded world. Examples of Harvard-based architecture devices
are the Mica family of wireless sensors. Mica motes have
limited memory and can process only very small packets.
Stack-based buﬀer overﬂow techniques that inject code into
the stack and then execute it are therefore not applicable. It
has been a common belief that code injection is impossible
on Harvard architectures. This paper presents a remote code
injection attack for Mica sensors. We show how to exploit
program vulnerabilities to permanently inject any piece of
code into the program memory of an Atmel AVR-based sen-
sor. To our knowledge, this is the ﬁrst result that presents
a code injection technique for such devices. Previous work
only succeeded in injecting data or performing transient at-
tacks. Injecting permanent code is more powerful since the
attacker can gain full control of the target sensor. We also
show that this attack can be used to inject a worm that can
propagate through the wireless sensor network and possibly
create a sensor botnet. Our attack combines diﬀerent tech-
niques such as return oriented programming and fake stack
injection. We present implementation details and suggest
some counter-measures.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection
General Terms
Experimentation, Security
Keywords
Harvard Architecture, Embedded Devices, Wireless Sensor
Networks, Code Injection Attacks, Gadgets, Return Ori-
ented Programming, Buﬀer Overﬂow, Computer Worms
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’08, October 27–31, 2008, Alexandria, Virginia, USA.
Copyright 2008 ACM 978-1-59593-810-7/08/10 ...$5.00.
1.
INTRODUCTION
Worm attacks exploiting memory-related vulnerabilities
are very common on the Internet. They are often used to
create botnets, by compromising and gaining control of a
large number of hosts.
It is widely believed that these types of attacks are diﬃ-
cult, if not impossible, to perform on Wireless Sensor Net-
works (WSN) that use Mica motes [21, 11]. For example,
Mica sensors use a Harvard architecture, that physically
separates data and program memories. Standard memory-
related attacks [1] that execute code injected in the stack
are therefore impossible.
As opposed to sensor network defense (code attestation,
detection of malware infections, intrusion detection [22, 4])
that has been a very active area of research, there has been
very little research on node-compromising techniques. The
only previous work in this area either focused on Von Neu-
mann architecture-based sensors [10] or only succeeded to
perform transient attacks that can only execute sequences
of instructions already present in the sensor program mem-
ory [12]. Permanent code injection attacks are much more
powerful: an attacker can inject malicious code in order to
take full control of a node, change and/or disclose its security
parameters. As a result, an attacker can hijack a network
or monitor it. As such, they create a real threat, especially
if the attacked WSN is connected to the Internet [20].
This paper presents the design of the ﬁrst worm for Har-
vard architecture-based WSNs. We show how to inject arbi-
trary malware into a sensor. This malware can be converted
into a worm by including a self-propagating module. Our
attack combines several techniques. Several special packets
are sent to inject a fake stack in the victim’s data memory.
This fake stack is injected using sequences of instructions,
called gadgets [23], already present in the sensor’s program
memory. Once the fake stack is injected another specially-
crafted packet is sent to execute the ﬁnal gadget chain. This
gadget uses the fake stack and copies the malware (contained
in the fake stack) from data memory to program memory.
Finally, the malware is executed. The malware is injected in
program memory. It is therefore persistent, i.e., it remains
even if the node is reset.
Our attack was implemented and tested on Micaz sen-
sors. We present implementation details and explain how
this type of attacks can be prevented.
The paper is structured as follows: Section 2 introduces
the platform hardware and software. The major diﬃculties
to overcome are detailed in Section 3. Section 4 presents
the related work. Section 5 gives an overview of the attack,
whose details are provided in Section 6. Protection measures
are introduced in Section 7. Finally, Section 8 concludes the
paper and presents some future work.
2. ATMEL AVR-BASED SENSOR
ARCHITECTURE OVERVIEW
The platform targeted in this attack is the Micaz motes [7].
It is one of the most common platform for WSNs. Micaz is
based on an Atmel AVR Atmega 128 8-bit microcontroller [3]
clocked at a frequency of 8MHz and an IEEE 802.15.4 [15]
compatible radio.
2.1 The AVR architecture
The Atmel Atmega 128 [3] is a Harvard architecture mi-
crocontroller. In such microcontrollers, program and data
memories are physically separated. The CPU can load in-
structions only from program memory and can only write
in data memory. Furthermore, the program counter can
only access program memory. As a result, data memory can
not be executed. A true Harvard architecture completely
prevents remote modiﬁcation of program memory. Modiﬁ-
cation requires physical access to the memory. As this is
impractical, true Harvard-based microcontrollers are rarely
used in practice. Most of Harvard-based microcontrollers
are actually using a modiﬁed Harvard architecture. In such
architecture, the program can be modiﬁed under some par-
ticular circumstances.
For example, the AVR assembly language has dedicated
instructions ( “Load from Program Memory” (LPM) and
“Store to Program Memory” (SPM) ) to copy bytes from/to
program memory to/from data memory. These instructions
are only operational from the bootloader code section (see
Section 2.3). They are used to load initialisation values from
program memory to data section, and to store large static ar-
rays (such as key material or precomputed table) in program
memory, without wasting precious SRAM memory. Further-
more, as shown in Section 2.3, the SPM instruction is used to
remotely conﬁgure the Micaz node with a new application.
2.2 The memories
As shown on Figure 1(a), the Atmega 128 microcontroller
has three internal memories, one external memory, and a
ﬂash chip, on the Micaz board.
• The internal ﬂash (or program memory), is where pro-
gram instructions are stored. The microprocessor can
only execute code from this area. As most instruc-
tions are two bytes or four bytes long, program mem-
ory is addressed as two-byte words, i.e., 128 KBytes of
program memory are addressable. The internal ﬂash
memory is usually split into two main sections: ap-
plication and bootloader sections. This ﬂash memory
can be programmed either by a physical connection
to the microcontroller or by self-reprogramming. Self-
reprogramming is only possible from the bootloader
section. Further details on the bootloader and self-
reprogramming can be found in Section 2.3.
• Data memory address space is addressable with regu-
lar instructions. It is used for diﬀerent purposes. As
illustrated in Figure 1(b), it contains the registers, the
Input Output area, where peripherals and control reg-
isters are mapped, and 4 KBytes of physical SRAM.
Since the microcontroller does not use any Memory
Management Unit (MMU), no address veriﬁcation is
performed before a memory access. As a result, the
whole data address space (including registers and I/O)
are directly addressable.
• The EEPROM memory is mapped to its own address
space and can be accessed via the dedicated IO regis-
ters. It therefore can not be used as a regular memory.
Since this memory area is not erased during repro-
gramming or power cycling of the CPU, it is mostly
used for permanent conﬁguration data.
• The Micaz platform has an external ﬂash memory which
Atmega 128
Program
Address Space
Flash
instruction bus
CPU
data bus
802.15.4
radio
external
ﬂash
512KB
external
periph-
erals...
EEPROM
Registers
I/O
Data
Address Space
SRAM
Micaz Node
(a) Micaz memory architecture putting in evidence the phys-
ical separation of memory areas, on top of the ﬁgure we can
see the ﬂash memory which contains the program instruc-
tions.
Program Address Space
Data Address Space
16bit width memory
8bit width memory
interrupt vectors
Application Code
Unused Space
0x0000
0x0046
Registers
IO Space
.data Section
.BSS Section
BL interrupt vectors
Bootloader
0xF800
0xF846
unused
Stack
0x0000
0x0020
0x0100
0x0200
0x0300
SP
0xFFFF
0x1100
(b) Typical memory organisation on an Atmel Atmega 128.
Program memory addresses are addressed either as 16bit
words or as bytes depending on the context.
Figure 1: Memory organisation on a Micaz.
is used for persistent data storage. This memory is ac-
cessed as an external device from a serial bus. It is not
accessible as a regular memory and is typically used to
store sensed data or program images.
2.3 The bootloader
A sensor node is typically conﬁgured with a monolithic
piece of code before deployment. This code implements the
actions that the sensor is required to perform (for example,
collecting and aggregating data). However, there are many
situations where this code needs to be updated or changed
after deployment. For example, a node can have several
modes of operation and switch from one to another. The size
of program memory being limited, it is often impossible to
store all program images in program memory. Furthermore,
if a software bug or vulnerability is found, a code update is
required. If a node cannot be reprogrammed, it becomes un-
usable. Since it is highly impractical (and often impossible)
to collect all deployed nodes and physically reprogram them,
a code update mechanism is provided by most applications.
We argue that such a mechanism is a strong requirement
for the reliably and survivability of a large WSN. On an
Atmega128 node, the reprogramming task is performed by
the bootloader, which is a piece of code that, upon a remote
request, can change the program image being ran on a node.
External ﬂash memory is often used to store several pro-
gram images. When the application is solicited to reprogram
a node with a given image, it conﬁgures the EEPROM with
the image identiﬁer and reboots the sensor. The bootloader
then copies the requested image from external ﬂash mem-
ory to program memory. The node then boots on the new
program image.
On a Micaz node, the bootloader copies the selected im-
age from external ﬂash memory to the RAM memory in 256-
byte pages. It then copies these pages to program memory
using the dedicated SPM instruction. Note that only the
bootloader can use the SPM instruction to copy pages to
program memory. Diﬀerent images can be conﬁgured stat-
ically, i.e., before deployment, to store several program im-
ages. Alternatively, these images can be uploaded remotely
using a code update protocol such as TinyOS’s Deluge [14].
In the rest of this paper, we assume that each node is
conﬁgured with a bootloader. We argue that this is a very
realistic assumption since, as discussed previously, a wireless
sensor network without self-reprogramming capability would
have limited value. We do not require the presence of any
remote code update protocols, such as Deluge. However,
if such a protocol is available, we assume that it is secure,
i.e., the updated images are authenticated [9, 17, 18, 19].
Otherwise, the code update mechanism could be trivially
exploited by an attacker to perform code injection.
3. ON THE DIFFICULTY OF EXPLOITING
A SENSOR NODE
Traditional buﬀer overﬂow attacks usually rely on the fact
that the attacker is able to inject a piece of code into the
stack and execute it. This exploit can, for example, result
from a program vulnerability.
In the Von Neumann architecture, a program can access
both code (TEXT) and data sections (data, BSS or Stack).
Furthermore, instructions injected into data memory (such
as stack) can be executed. As a result, an attacker can
exploit buﬀer overﬂow to execute malicious code injected by
a specially-crafted packet.
In Mica-family sensors, code and data memories are phys-
ically separated. The program counter cannot point to an
address in the data memory. The previously presented in-
jection attacks are therefore impossible to perform on this
type of sensor [21, 11].
Furthermore, sensors have other characteristics that limit
the capabilities of an attacker. For example, packets pro-
cessed by a sensor are usually very small. For example
TinyOS limits the size of packet’s payload to 28 bytes. It
is therefore diﬃcult to inject a useful piece of code with a
single packet. Finally, a sensor has very limited memory.
The application code is therefore often size-optimized and
has limited functionality. Functions are very often inlined.
This makes “return-into-libc” attacks [25] very diﬃcult to
perform.
Because of all these characteristics, remote exploitation of
sensors is very challenging.
4. RELATED WORK
4.1 From “return-into-libc” attack to gadgets
In order to prevent buﬀer overﬂow exploitation in general
purpose computers, memory protection mechanisms, known
as the no-execute bit (NX-Bit) or Write-Xor-Execute(W ⊗
E) [2, 8, 27, 21] have been proposed. These techniques en-
force memory to be either writable or executable. Trying
to execute instructions in a page marked as non executable
generates a segmentation fault. The main goal of these tech-
niques is to prevent execution of code in the stack or more
generally in data memory. The resulting protection is simi-
lar to what is provided by Harvard architectures.
Several techniques have been developed to bypass these
protection mechanisms. The ﬁrst published technique was
the “return-into-libc” attack [25] where the attacker does
not inject code to the stack anymore but instead executes a
function of the libc. The “return-into-libc” attack has been
extended into diﬀerent variants.
[23] generalizes this tech-
nique and shows that it is possible to attack systems which
are running under W ⊗ E like environments by executing se-
quences of instructions terminated by a “ret”. These groups
of instructions are called Gadgets. Gadgets are performing
actions useful to the attacker (i.e., pop a value in stack to a
register) and possibly returning to another gadget.
4.2 Exploitation of sensor nodes
Stack execution on Von Neumann architecture sensors.
[10, 11] show how to overcome the packet size limitation.
The author describes how to abuse string format vulnerabil-
ities or buﬀer overﬂows on the MSP430 based Telosb motes
in order to execute malicious code uploaded into data mem-
ory. He demonstrates that it is possible to inject malicious
code byte-by-byte in order to load arbitrary long bytecode.
As Telosb motes are based on the MSP430 microcontroller
(a Von Neumann architecture), it is possible to execute ma-
licious data injected into memory. However, as discussed in
Section 2.1, this attack is impossible on Harvard architec-
ture motes, such as the Micaz. Countermeasures proposed
in [11] include hardware modiﬁcations to the MSP430 micro-
controller and using Harvard architecture microcontrollers.
The hardware modiﬁcation would provide the ability to con-
ﬁgure memory regions as non executable. In our work, we
show by a practical example that, although this solution
complicates the attack, it does not make it impossible.
Mal-Packets.
[12] shows how to modify the execution ﬂow of a TinyOS
application running on a Mica2 sensor (a Micaz with a diﬀer-
ent radio device) to perform a transient attack. This attack
exploits buﬀer overﬂow in order to execute gadgets, i.e., in-
structions that are present on the sensor. These instructions
perform some actions (such as possibly modifying some of
the sensor data) and then propagate the injected packet to
the node’s neighbors.
While this attack is interesting, it has several limitations.
First, it is limited to one packet. Since packets are very
small, the possible set of actions is very limited. Second,
actions are limited to sequences of instructions present in
the sensor memory. Third, the attack is transient. Once the
packet is processed, the attack terminates. Furthermore, the
action of the attack disappears if the node is reset.
In contrast, our attack allows injection of any malicious
code. It is therefore much more ﬂexible and powerful. Note
that our scheme also makes use of gadgets. However, gadgets
are used to implement the function that copies injected code
from data memory to program memory. It is not used, as
in the Mal-Packets scheme, to execute the actual malicious