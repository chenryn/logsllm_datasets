# 八、编排和托管平台
这一章，我们将涵盖以下食谱:
*   使用 Docker 编写运行应用
*   使用 Docker Swarm 设置集群
*   与 DockerSwarm 一起使用秘密
*   设置 Kubernetes 集群
*   在 Kubernetes 集群中向上和向下扩展
*   和 Kubernetes 一起使用秘密
*   用 Kubernetes 集群设置 WordPress
# 介绍
在单个主机上运行 Docker 可能对开发环境有好处，但是真正的价值来自于我们跨越多个主机。然而，这不是一项微不足道的任务。你必须安排好这些容器。因此，在本章中，我们将介绍一些编排工具和托管平台。
Docker Inc .宣布了两个这样的工具:
*   docker Compose([https://docs.docker.com/compose](https://docs.docker.com/compose))，创建由多个容器组成的应用。
*   Docker Swarm([https://docs.docker.com/engine/swarm/](https://docs.docker.com/engine/swarm/))，用于群集多个 Docker 主机。Docker Compose 以前叫做 Fig(T2)。
谷歌启动了 Kubernetes([http://kubernetes.io/](http://kubernetes.io/))Docker 编排。Kubernetes 提供了应用部署、调度、更新、维护和扩展的机制。
就连微软也宣布([http://azure . Microsoft . com/blog/2015/04/08/Microsoft-揭幕-新-容器-技术-面向下一代云/](http://azure.microsoft.com/blog/2015/04/08/microsoft-unveils-new-container-technologies-for-the-next-generation-cloud/) )为 Docker 推出了专门的操作系统。
跨整个数据中心和云环境提供资源管理和调度的 Apache Mesos([http://mesos.apache.org](http://mesos.apache.org))也增加了对 Docker 的支持([http://Mesos . Apache . org/documents/latest/Docker-container/](http://mesos.apache.org/documentation/latest/docker-containerizer/))。
VMware 还推出了一款名为 VMware Photon([http://vmware.github.io/photon/](http://vmware.github.io/photon/))的容器专用主机。
前面所有的工具和平台都需要单独的章节。但是在这一章中，我们将探索作曲、Swarm 和 Kubernetes。
# 使用 Docker 编写运行应用
Docker Compose([http://docs.docker.com/compose/](http://docs.docker.com/compose/))是运行组成应用的相互依赖的容器的本地 Docker 工具。我们在单个文件中定义了一个多容器应用，并将其提供给 Docker Compose，Docker Compose 将设置该应用。在本食谱中，我们将再次使用 WordPress 作为运行的示例应用。
# 准备好
要安装 Docker Compose，请运行以下命令:
```
$ sudo pip install docker-compose
```
# 怎么做
请遵循以下步骤:
1.  为应用创建一个目录，并在其中创建`docker-compose.yml`来定义应用:
```
$ cd wordpress_compose/
$ cat docker-compose.yml
version: '3.1'
services:
  wordpress:
    image: wordpress
    restart: always
    ports:
      - 8080:80
    environment:
      WORDPRESS_DB_PASSWORD: example
  mysql:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: example
```
2.  我们从 Docker Hub([https://registry.hub.docker.com/_/wordpress/](https://registry.hub.docker.com/_/wordpress/))上的官方 WordPress Docker 存储库中获取了前面的示例。
3.  在应用目录中，运行以下命令来构建和启动应用:
```
$ docker-compose up
```
4.  构建完成后，从`http://localhost:8080`或`http://:8080`进入 WordPress 安装页面。
# 它是如何工作的...
Docker Compose 下载 MySQL 和 WordPress 的映像，如果不能从正式的 Docker 注册表本地获得的话。首先，它从 MySQL 映像启动数据库容器；然后，它启动 WordPress 容器。
# 还有更多...
我们甚至可以在合成过程中从 Dockerfile 构建映像，然后将其用于应用。例如，为了构建 WordPress 映像，我们可以使用相应的 Dockerfile，并将其放在应用编写目录中:
```
$ cat Dockerfile
FROM wordpress:latest
# extend the base wordpress image with anything custom
# you might need for local dev.
ENV CUSTOM_ENV env-value
```
然后我们需要更新`docker-compose.yml`文件，这样我们就可以从上面引用 Dockerfile 了。这将允许我们更改 WordPress 映像，并进行官方映像中没有的自定义更改:
```
$ cat docker-compose.yml
version: "3.1"
services:
 wordpress:
 build: .
 restart: always
 ports:
 - 8080:80
 environment:
 WORDPRESS_DB_PASSWORD: example
    mysql:
        image: mysql:5.7
        restart: always
        environment:
            MYSQL_ROOT_PASSWORD: example
```
*   一旦进行了这些更改，就可以像以前一样启动栈:
```
    $ docker-compose up
```
*   要在启动栈后将其放下，请执行以下操作:
```
 $ docker-compose down
```
*   在栈中构建容器:
```
 $ docker-compose build
```
*   进入运行中的 WordPress 容器:
```
 $ docker-compose exec wordpress bash
```
*   列出栈中正在运行的容器:
```
 $ docker-compose ps
```
# 请参见
您也可以查看以下参考资料:
*   Docker 合成 YAML 文件参考于:https://docs . docker . com/compose/compose-file/。
*   在 https://docs.docker.com/compose/reference/overview/编写命令行引用。
*   Docker 合成 GitHub 存储库 at:https://github . com/docker/compose。
# 使用 Docker Swarm 设置集群
Docker Swarm([https://docs.docker.com/engine/swarm/](https://docs.docker.com/engine/swarm/))是 Docker 内置的本地集群。它将多个 Docker 主机分组到一个池中，您可以在其中启动容器。为了简单起见，这里我们将使用 VirtualBox 作为后端来配置主机。
Swarm 有两个版本。在本食谱中，我们将使用两种模式中较新的一种，称为 Docker Swarm 模式，它基于 Swarm kit([https://github.com/docker/swarmkit](https://github.com/docker/swarmkit))。较新的版本使其更容易启动和运行，并删除了许多以前需要的步骤。集群模式内置于 Docker 守护程序中，因此使用它不需要额外的软件。
Docker Swarm 模式支持两种类型的节点；一个经理和一个工人。管理器节点为 Swarm 执行编排和集群管理功能。他们把称为任务的工作单位分派给工人。管理节点使用 Raft 共识算法([http://thesecretlivesofdata.com/raft/](http://thesecretlivesofdata.com/raft/))来管理全局集群状态。工作节点接收并执行管理人员分派的任务。
为了让 Raft 正常工作，您需要奇数个经理才能让领导人选举正常工作。这意味着，如果您想要一个容错的 Swarm 集群，您应该有三个或五个管理器。如果您有三个管理器，则可以处理一个管理器节点故障，如果有五个管理器节点，则可以在 Raft 共识丢失之前处理多达两个节点故障。选择最适合您工作负荷的集群大小。
# 准备好
请遵循以下步骤:
1.  在您的系统上安装 VirtualBox([https://www.virtualbox.org/](https://www.virtualbox.org/))。配置 VirtualBox 的说明不在本书的讨论范围内。
2.  使用 VirtualBox，创建三个名为`dockerhost-1`、`dockerhost-2`和`dockerhost-3`的虚拟机，并在其上安装最新版本的 Docker。
3.  确保在`dockerhost-1`、`dockerhost-2`和`dockerhost-3`之间没有防火墙阻止访问。
# 怎么做
请遵循以下步骤:
1.  登录`dockerhost-1`并初始化蜂群。`--advertise-addr`参数是您将监听群流量的主机的 IP 地址:
```
$ docker swarm init --advertise-addr 
Swarm initialized: current node (4daiatuoef7eh0ne6kawtflml) is now a manager.
To add a worker to this swarm, run the following command:
docker swarm join --token SWMTKN-1-2nyaeu0l2rw7fv6wpgco4o1spos0elazjxob3nitlnfy9bv15y-bdch9bt28qsviddpmc38r5hv1 10.10.0.6:2377
To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.
```
The Swarm token that is returned by the Swarm `init` command will be different for everyone. Make sure you use the one that you get when you start your Swarm.
2.  登录`dockerhost-2`和`dockerhost-3`，作为工作人员加入群:
```
$ docker swarm join --token SWMTKN-1-2nyaeu0l2rw7fv6wpgco4o1spos0elazjxob3nitlnfy9bv15y-bdch9bt28qsviddpmc38r5hv1 10.10.0.6:2377
```
3.  在`host1`上，列出 Swarm 集群中的节点，如下图所示:
```
$ docker node ls
```
![](img/8bf2e91d-9b60-4a1b-9348-01ee18286fdd.png)
如您所见，集群中有三个节点:一个管理人员和两个工作人员。现在你有了一个群，你可以在群上安排任务。
4.  在群集上启动服务:
```
 $ docker service create --name demo --publish 80:80 nginx
```
5.  通过参考下面的屏幕截图来查看服务的状态:
```
 $ docker service ls
 $ docker service ps demo
```
![](img/729e8269-a66b-4674-ae6d-2af9bf6e1c9b.png)
6.  将服务扩展到 3:
```
 $ docker service scale demo=3
```
7.  检查以确保服务已经扩展到`3`。缩放事件可能需要几分钟才能完成:
![](img/1e294b37-57ad-42c1-bf98-5876bc66ba12.png)
# 它是如何工作的…
使用初始化群时从管理节点获得的唯一令牌，我们将工作节点添加到集群中。然后我们创建了一个简单的`nginx`服务，并将其扩展到`3`；这为 Swarm 中的每个节点启动了一个容器。
# 还有更多...
如果要向集群添加管理器，您需要执行以下操作:
*   在现有管理器上，运行以下命令:
```
 $ docker swarm join-token manager
 To add a manager to this swarm, run the following command:
 docker swarm join --token SWMTKN-1-0trltcq6gwhz9w40j3wpuqedjwviwdgksuz8zulaz6qon118s4-2ui4f15uu7ceow6k2gc9xutb5 10.10.0.6:2377
```
*   登录到潜在的新 manager 主机，并从上面运行命令:
```
 $ docker swarm join --token SWMTKN-1-0trltcq6gwhz9w40j3wpuqedjwviwdgksuz8zulaz6qon118s4-2ui4f15uu7ceow6k2gc9xutb5 10.10.0.6:2377
 This node joined a swarm as a manager.
```
# 请参见
您可以在 Docker 网站[https://docs.docker.com/engine/swarm/](https://docs.docker.com/engine/swarm/)查看 Swarm 文档，了解更多信息。
# 与 DockerSwarm 一起使用秘密
当您使用容器时，您需要做的一件常见的事情是连接到一些外部资源，如数据库、缓存或 web 服务。这些资源通常需要凭据。将这些凭证传递给容器的一种流行方式是使它们成为在容器启动时填充的环境变量。这允许您在不同的开发环境中使用相同的 Docker 映像，并且不需要在映像中存储密码。这是由 Heroku([https://www.heroku.com](https://www.heroku.com))推出的十二因素应用([https://12factor.net](https://12factor.net))的一个共同特点。