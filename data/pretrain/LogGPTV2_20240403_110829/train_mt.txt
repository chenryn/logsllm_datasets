.pp
.in +4n
.ex
va_list aq;
va_copy(aq, ap);
\&...
va_end(aq);
.ee
.in
.pp
each invocation of
.br va_copy ()
must be matched by a corresponding invocation of
.br va_end ()
in the same function.
some systems that do not supply
.br va_copy ()
have
.b __va_copy
instead, since that was the name used in the draft proposal.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br va_start (),
.br va_end (),
.br va_copy ()
t}	thread safety	mt-safe
t{
.br va_arg ()
t}	thread safety	mt-safe race:ap
.te
.hy
.ad
.sp 1
.sh conforming to
the
.br va_start (),
.br va_arg (),
and
.br va_end ()
macros conform to c89.
c99 defines the
.br va_copy ()
macro.
.sh bugs
unlike the historical
.b varargs
macros, the
.b stdarg
macros do not permit programmers to code a function with no fixed
arguments.
this problem generates work mainly when converting
.b varargs
code to
.b stdarg
code, but it also creates difficulties for variadic functions that wish to
pass all of their arguments on to a function that takes a
.i va_list
argument, such as
.br vfprintf (3).
.sh examples
the function
.i foo
takes a string of format characters and prints out the argument associated
with each format character based on the type.
.pp
.ex
#include 
#include 
void
foo(char *fmt, ...)   /* \(aq...\(aq is c syntax for a variadic function */
{
    va_list ap;
    int d;
    char c;
    char *s;
    va_start(ap, fmt);
    while (*fmt)
        switch (*fmt++) {
        case \(aqs\(aq:              /* string */
            s = va_arg(ap, char *);
            printf("string %s\en", s);
            break;
        case \(aqd\(aq:              /* int */
            d = va_arg(ap, int);
            printf("int %d\en", d);
            break;
        case \(aqc\(aq:              /* char */
            /* need a cast here since va_arg only
               takes fully promoted types */
            c = (char) va_arg(ap, int);
            printf("char %c\en", c);
            break;
        }
    va_end(ap);
}
.ee
.sh see also
.br vprintf (3),
.br vscanf (3),
.br vsyslog (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright 1993 david metcalfe (PI:EMAIL)
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" references consulted:
.\"     linux libc source code
.\"     lewine's _posix programmer's guide_ (o'reilly & associates, 1991)
.\"     386bsd man pages
.\" modified sat jul 24 19:26:03 1993 by rik faith (PI:EMAIL)
.th getprotoent 3  2021-03-22 "gnu" "linux programmer's manual"
.sh name
getprotoent, getprotobyname, getprotobynumber, setprotoent,
endprotoent \- get protocol entry
.sh synopsis
.nf
.b #include 
.pp
.b struct protoent *getprotoent(void);
.pp
.bi "struct protoent *getprotobyname(const char *" name );
.bi "struct protoent *getprotobynumber(int " proto );
.pp
.bi "void setprotoent(int " stayopen );
.b void endprotoent(void);
.fi
.sh description
the
.br getprotoent ()
function reads the next entry from the protocols database (see
.br protocols (5))
and returns a
.i protoent
structure
containing the broken-out fields from the entry.
a connection is opened to the database if necessary.
.pp
the
.br getprotobyname ()
function returns a
.i protoent
structure
for the entry from the database
that matches the protocol name
.ir name .
a connection is opened to the database if necessary.
.pp
the
.br getprotobynumber ()
function returns a
.i protoent
structure
for the entry from the database
that matches the protocol number
.ir number .
a connection is opened to the database if necessary.
.pp
the
.br setprotoent ()
function opens a connection to the database,
and sets the next entry to the first entry.
if
.i stayopen
is nonzero,
then the connection to the database
will not be closed between calls to one of the
.br getproto* ()
functions.
.pp
the
.br endprotoent ()
function closes the connection to the database.
.pp
the
.i protoent
structure is defined in
.i 
as follows:
.pp
.in +4n
.ex
struct protoent {
    char  *p_name;       /* official protocol name */
    char **p_aliases;    /* alias list */
    int    p_proto;      /* protocol number */
}
.ee
.in
.pp
the members of the
.i protoent
structure are:
.tp
.i p_name
the official name of the protocol.
.tp
.i p_aliases
a null-terminated list of alternative names for the protocol.
.tp
.i p_proto
the protocol number.
.sh return value
the
.br getprotoent (),
.br getprotobyname (),
and
.br getprotobynumber ()
functions return a pointer to a
statically allocated
.i protoent
structure, or a null pointer if an
error occurs or the end of the file is reached.
.sh files
.pd 0
.tp
.i /etc/protocols
protocol database file
.pd
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lb lb lbx
l l l.
interface	attribute	value
t{
.br getprotoent ()
t}	thread safety	t{
mt-unsafe race:protoent
race:protoentbuf locale
t}
t{
.br getprotobyname ()
t}	thread safety	t{
mt-unsafe race:protobyname
locale
t}
t{
.br getprotobynumber ()
t}	thread safety	t{
mt-unsafe race:protobynumber
locale
t}
t{
.br setprotoent (),
.br endprotoent ()
t}	thread safety	t{
mt-unsafe race:protoent
locale
t}
.te
.hy
.ad
.sp 1
in the above table,
.i protoent
in
.i race:protoent
signifies that if any of the functions
.br setprotoent (),
.br getprotoent (),
or
.br endprotoent ()
are used in parallel in different threads of a program,
then data races could occur.
.sh conforming to
posix.1-2001, posix.1-2008, 4.3bsd.
.sh see also
.br getnetent (3),
.br getprotoent_r (3),
.br getservent (3),
.br protocols (5)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/resolver.3
.so man3/getpwent.3
.so man3/fmin.3
.\" copyright (c) 2007 michael kerrisk 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" 2007-10-23 mtk: moved the _syscalln specific material to the
.\"     new _syscall(2) page, and substantially enhanced and rewrote
.\"     the remaining material on this page.
.\"
.th intro 2 2021-08-27 "linux" "linux programmer's manual"
.sh name
intro \- introduction to system calls
.sh description
section 2 of the manual describes the linux system calls.
a system call is an entry point into the linux kernel.
usually, system calls are not invoked directly:
instead, most system calls have corresponding c library
wrapper functions which perform the steps required
(e.g., trapping to kernel mode) in order to invoke
the system call.
thus, making a system call looks the same as invoking a normal
library function.
.pp
in many cases, the c library wrapper function does nothing more than:
.ip * 3
copying arguments and the unique system call number to the
registers where the kernel expects them;
.ip *
trapping to kernel mode,
at which point the kernel does the real work of the system call;
.ip *
setting
.i errno
if the system call returns an error number when the kernel returns the
cpu to user mode.
.pp
however, in a few cases, a wrapper function may do rather more than this,
for example, performing some preprocessing
of the arguments before trapping to kernel mode,
or postprocessing of values returned by the system call.
where this is the case, the manual pages in section 2 generally
try to note the details of both the (usually gnu) c library api
interface and the raw system call.
most commonly, the main description will focus on the c library interface,
and differences for the system call are covered in the notes section.
.pp
for a list of the linux system calls, see
.br syscalls (2).
.sh return value
on error, most system calls return a negative error number
(i.e., the negated value of one of the constants described in
.br errno (3)).
the c library wrapper hides this detail from the caller: when a
system call returns a negative value, the wrapper copies the
absolute value into the
.i errno
variable, and returns \-1 as the return value of the wrapper.
.pp
the value returned by a successful system call depends on the call.
many system calls return 0 on success, but some can return nonzero
values from a successful call.
the details are described in the individual manual pages.
.pp
in some cases,
the programmer must define a feature test macro in order to obtain
the declaration of a system call from the header file specified
in the man page synopsis section.
(where required, these feature test macros must be defined before including
.i any
header files.)
in such cases, the required macro is described in the man page.
for further information on feature test macros, see
.br feature_test_macros (7).
.sh conforming to
certain terms and abbreviations are used to indicate unix variants
and standards to which calls in this section conform.
see
.br standards (7).
.sh notes
.ss calling directly
in most cases, it is unnecessary to invoke a system call directly,
but there are times when the standard c library does not implement
a nice wrapper function for you.
in this case, the programmer must manually invoke the system call using
.br syscall (2).
historically, this was also possible using one of the _syscall macros
described in
.br _syscall (2).
.ss authors and copyright conditions
look at the header of the manual page source for the author(s) and copyright
conditions.
note that these can be different from page to page!
.sh see also
.ad l
.nh
.br _syscall (2),
.br syscall (2),
.br syscalls (2),
.br errno (3),
.br intro (3),
.br capabilities (7),
.br credentials (7),
.br feature_test_macros (7),
.br mq_overview (7),
.br path_resolution (7),
.br pipe (7),
.br pty (7),
.br sem_overview (7),
.br shm_overview (7),
.br signal (7),
.br socket (7),
.br standards (7),
.br symlink (7),
.br system_data_types (7),
.br sysvipc (7),
.br time (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man7/system_data_types.7
.\" copyright (c) 2001 andries brouwer .
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th stdio_ext 3 2021-03-22 "" "linux programmer's manual"
.sh name
__fbufsize, __flbf, __fpending, __fpurge, __freadable,
__freading, __fsetlocking, __fwritable, __fwriting, _flushlbf \-
interfaces to stdio file structure
.sh synopsis
.nf
.b #include 
.b #include 
.pp
.bi "size_t __fbufsize(file *" stream );
.bi "size_t __fpending(file *" stream );
.bi "int __flbf(file *" stream );
.bi "int __freadable(file *" stream );
.bi "int __fwritable(file *" stream );
.bi "int __freading(file *" stream );
.bi "int __fwriting(file *" stream );
.bi "int __fsetlocking(file *" stream ", int " type );
.b "void _flushlbf(void);"
.bi "void __fpurge(file *" stream );
.fi
.sh description
solaris introduced routines to allow portable access to the
internals of the
.i file
structure, and glibc also implemented these.
.pp
the
.br __fbufsize ()
function returns the size of the buffer currently used
by the given stream.
.pp
the
.br __fpending ()
function returns the number of bytes in the output buffer.
for wide-oriented streams the unit is wide characters.
this function is undefined on buffers in reading mode,
or opened read-only.
.pp
the
.br __flbf ()
function returns a nonzero value if the stream is line-buffered,
and zero otherwise.
.pp
the
.br __freadable ()
function returns a nonzero value if the stream allows reading,
and zero otherwise.
.pp
the
.br __fwritable ()
function returns a nonzero value if the stream allows writing,