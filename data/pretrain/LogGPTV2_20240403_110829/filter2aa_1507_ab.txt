### Lovense Hush: Hardware and Firmware Overview

#### Hardware Specifications
- **Microcontroller**: NRF52832, based on the Cortex M4 architecture.
- **Memory**:
  - Flash: 512KB
  - RAM: 64KB
- **Features**:
  - Enhanced version of the NRF58122.
  - SWD (Serial Wire Debug) test points for firmware dumping and debugging.
  - Power management, motor control, and antenna for BLE communication.
  - Charging port.

#### Firmware Analysis
- **Initial Findings**:
  - The firmware does not include a JSON parser.
  - Only "simple" commands are supported, but there are many of them.
  - Searching for "DFU" reveals two key components:
    - A "DFU;" command handler.
    - A "DfuTarg" string in the bootloader region, suggesting it is used for BLE DFU mode.

- **Firmware Dumping**:
  - The presence of SWD test points allows for easy firmware dumping via SWD.

- **DFU Process**:
  - It is possible to modify the `main.bin` file, recalculate its CRC16, and flash it using the Nordic DFU app.

#### Security Vulnerabilities

##### Lovense Remote: Incoming Message Handling
- **Message Processing**:
  - The `on("data")` function processes incoming data and passes it to `processData`.
  - `processData` attempts to parse the data as JSON. If parsing fails, it logs the error.
  - Both functions call `a()` for logging, which inserts the message into the DOM as HTML, leading to potential XSS (Cross-Site Scripting) vulnerabilities.

- **XSS Exploit**:
  - Arbitrary HTML can be injected into the Electron app from the dongle, but only 32 characters at a time.
  - To execute JavaScript, a more complex payload is required, involving array population and evaluation.

- **Payload Example**:
  - A 30-character payload can be used to demonstrate the injection.
  - Larger payloads require serialization and careful execution to ensure the correct order of operations.

- **Challenges**:
  - Payloads are limited to 10 characters of JavaScript at a time.
  - No strong guarantee of execution order due to reliance on `onerror`.
  - Solution: Use an array to store and join the payload, then evaluate it.

##### Compromising the App from the Hush
- **Dongle Role**:
  - The dongle primarily packages and forwards toy messages.
  - It receives 20-byte messages, which are insufficient for direct XSS attacks.
  - A bug exists where no null-terminator check is performed, allowing uninitialized data to be appended to messages.

- **Code Snippet**:
  ```c
  void ble_gattc_on_hvx(ble_evt_t *event, remote_toy_t *remote_toy) {
      char local_buf[20];
      if (remote_toy) {
          uint16_t len = event->len;
          zeroset(local_buf, 20);
          if (len >= 20) len = 20;
          memcpy(local_buf, event->p_data, len);
          sendHostMessage_(
              "{\"type\":\"toy\",\"func\":\"toyData\",\"data\":{\"id\":"
              "\"%02X%02X%02X%02X%02X%02X\",\"data\":\"%s\"}}\n",
              remote_toy->mac[0], remote_toy->mac[1], remote_toy->mac[2],
              remote_toy->mac[3], remote_toy->mac[4], remote_toy->mac[5],
              local_buf);
      }
  }
  ```

##### Compromising the Dongle over BLE
- **Flash Regions**:
  - Application: Custom code built by Lovense.
  - Bootloader: Handles DFU.
  - SoftDevice: Closed-source driver by Nordic Semiconductor, including the BLE stack.

- **Vulnerability in SoftDevice**:
  - GATT Read By Type Response packets can be manipulated.
  - The packet handler assumes a fixed length for handle/data pairs, which can be exploited.

- **Code Snippet**:
  ```c
  void ble_gattc_packet_handler_(uint32_t input_len, uint8_t *input_buf,
                                 uint8_t *gattc_event, int conn_handle, uint8_t* status) {
      switch(input_buf[0] & 0x3F) {
          case 0x09: // GATT Read By Type Response
              if (!(*status & 0x10) || input_len < 2)
                  return NRF_ERROR_INVALID_PARAM;
              num_attributes = 0;
              attribute_data_length = input_buf[1];
              attribute_data = attribute_array;
              input_buf_cursor = &input_buf[2];
              input_remaining_len = input_len - 2;
              while (attribute_data_length <= input_remaining_len) {
                  attribute_data->handle = *(u16*)input_buf_cursor;
                  attribute_data->value_ptr = &input_buf_cursor[2];
                  input_buf_cursor += attribute_data_length;
                  input_remaining_len -= attribute_data_length;
                  num_attributes++;
                  attribute_data++;
              }
              *status = 0;
              break;
      }
  }
  ```

- **Exploitation**:
  - By manipulating the handle/data pair length, an attacker can cause the handler to read beyond the buffer, leading to potential memory corruption or other security issues.

### Conclusion
The Lovense Hush and its associated software have several security vulnerabilities, particularly in the handling of incoming messages and the BLE stack. These vulnerabilities can be exploited to inject arbitrary HTML and JavaScript, leading to potential cross-site scripting attacks. Additionally, the lack of proper input validation in the SoftDevice can be leveraged to cause buffer overflows and other memory-related issues.