同的表现方式，但基本原理是相同的，因为它们均处在基于Web的环境中。
识别出应用程序接收的所有数据后，需要修改这些数据并分析服务器对它们的响应。有时
响应中会直接包含来自数据库的SQL错误，这时所有工作都将变得非常简单。有时要不断集
中精力以便检测响应中细微的差别。
1.识别数据输入
Web环境是一种客户端/服务器架构。浏览器（作为客户端）向服务器发送请求并等待响应。
服务器接收请求，产生响应，将其发送回客户端。很明显，双方必须存在某种方式的约定。否
则，客户端请求某些内容，服务器将不知道怎样回复。双方必须使用一种协议作为双方的约定，
这种协议就是HTTP。
我们的首要任务是识别远程Web应用所接收的所有数据输入。HTTP定义了很多客户端可
以发送给服务器的操作，但我们只关注与寻找SQL注入相关的两种方法：GET和POST。
GET请求
GET是一种请求服务器的HTTP方法。使用该方法时，信息包含在URL中。点击一个链
接时，一般会使用该方法。通常，Web浏览器创建GET请求，发送给Web服务器，然后在浏
览器中呈现结果。GET请求对用户是透明的，但发送给Web服务器的GET请求却是：
GET /search.aspx?text=1cd%20monitors6cat=16num=20 HrTP/1.1
Host : www,victin,com
User-Agent: Mozi11a/5.0 (X11; U; Linux x86_64; en-US;
rv:1.8.1.19) Gecko/20081216 Ubuntu/8.04 (hardy) Firefox/2.0.0.19
Accept: text/xml, application/xml, application/xhtml+xm1,
text/htm1; q=0 . 9, text/p1ain;q=0 .8, Lmage/png, */*;q=0 . 5
Accept-Language: en-gb, en;q=0 .5
Accept-Encoding: gzip, deflate
Accept-Charset: Is088591, utf8;q=0 .7, *;q=0 . 7
Keep-A1ive: 300
Proxy-Connection: keep-alive
该请求在URL中发送参数，格式如下所示：
7parameterl=valuel6parameter2=value26parameter3=value3.. 
22
---
## Page 37
第2章SQL注入测试
上述示例中包含三个参数：text、cat和num。远程应用将检索这些参数的值，将它们用于
事先设计好的目的。对于GET请求来说，只需在测览器的导航栏中稍作修改即可操纵这些参
数，此外，还可以使用代理工其，稍后将进行介绍。
POST请求
POST是一种用于向Web服务器发送信息的HTTP方法。服务器执行的操作则取决于目标
URL。在浏览器中填写表单并单击Submit按钮时通常使用该方法。浏览器会透明地完成所有
工作，下面的例子给出了浏览器发送给远程Web服务器的内容：
POST /contact/index.asp HTTP/1.1
Host: www.v1ct1m.com
User-Agent: Mozi11a/5.0 (X11; U; Linux x86_64; en-US; rv:1.8.1.19)
Gecko/20081216 Ubuntu/8.04 (hardy) Firefox/2.0.0.19
Accept : text/xm1, app1ication/xm1, app1ication/xhtm1+xm1,
text/html=q=0. 9, text/p1ain;q=0 .8, image/png, */*;q=0.5
Accept-Language: en-gb, en;q=0 . 5
Accept-Encoding: gzip, deflate
Accept=Charset: IS08859-1, utf8; q=0. 7, *;q=0.7
Keep-A1ive: 300
Referer: http://www,victim.com/contact/index.asp
Content-Type: app1ication/x-www-form-urlencoded
Content-Length: 129
first=John61ast=Doe6emai1=johnedoe.com6phone=5551234566title=Mr&country
US6comments=I$20wou1d%201ike20to%20request$20information
这里发送给Web服务器的值与GET请求的格式相同，不过现在这些值位于请求的底部。
注意：
请记住，数据如何在浏览器中呈现并不重要，有些值可能是表单中的隐藏字段，也可能是
带一组选项的下拉字段；有些值则可能有大小限制或者包含禁用的字段。
请记住，这些都只是客户端功能，我们可以完全控制发送给服务器的内容，不要将客户端
接口机制看作安全功能，
读者可能会问：如果浏览器禁止我修改数据怎么办？有两种解决办法：
·浏览器修改扩展
·代理服务器
浏览器修改扩展是运行于浏览器之上的插件，它能够实现一些附加功能。例如，针对Mozilla
Firefox 浏览器的Web Developer 插件(https://addons.mozilla.org/en-US/firefox/addon/60)和针对
Google Chrome B) Web Developer 插iff(https://chrome.google.com/webstore/detail/ bfbameneiokkg-
bdmiekhjnmfkcnldhhm）可以实现显示隐藏字段、清除大小限制、将所选HTML字段转换成输入
字段等任务。当试图操纵发送给服务器的字段时该插件非常有用。
Tamper Data(https:/addons.mozilla.org/en-US/firefox/addon/966)是另—款用于 Firefox 的有
趣插件。可以使用TamperData查看并修改HTTP和HTTPS请求中的头和POST参数。还有一
款是 SQL Inject Me(https://addons.mozilla.org/en-US/firefox/addon/7597),该工具借助在 HTML
页面中找到的表单字段来发送数据库转义字符串。
23
---
## Page 38
SQL注入攻击与防御（第2版）
第二种解决方案是使用本地代理。本地代理是一些介于测览器和服务器之间的软件，如图
2-1所示。这些软件运行在本地计算机上。图2-1中给出的是本地代理所处位置的逻辑表示方式。
远程服务
图2-1代理拦截发给Web服务器的请求
图2-1展示了如何使用代理服务器避开客户端的限制。代理负责拦截发给Web服务器的请
求，用户可随意修改请求的内容。要实现该目标，需要完成如下两件事情：
·在自己的计算机上安装代理服务器
·配置浏览器以使用代理服务器
安装用于SQL注入攻击的代理时，存在很多可选软件。其中最有名的是ParosProxy、
WebScarab和BurpSuite，它们都可以拦截流量并修改发送给服务器的数据。这几款软件间也
存在一些差异，可以根据个人喜好来具体选择一款。
安装并运行代理软件之后，您需要检查代理正在侦听的端口。设置浏览器以使用代理，这
时准备工作已基本完成。根据所选浏览器的不同，设置选项会位于不同的菜单中。例如在
Mozilla Firefox 中,单击 Edit(Preferences|Advanced|Network|Settings。
诸如 FoxyProxy(https://addons.mozilla.org/en-US/firefox/addon/2464)等 Firefox 插件许他在
预设的代理设置之间进行切换。该功能非常有用，可为您节省不少时间。
在 Intemet Explorer 中, 可J 单击 Tools|Internet Options|Connections|Lan Settings|Proxy Server
来访问代理设置。
运行代理软件并将浏览器指向它之后，就可以开始测试目标Web站点并操纵发送给远程
应用的参数了，如图2-2所示。
brp site prefesonal vi1.4.01
[K
ferwarddroprercapt ison
resarmshesesher
图2-2Burp Suite 拦截POST 请求
24
---
## Page 39
第2章SQL注入测试
图2-2展示了BurpSuite拦截POST请求并修改字段的过程。该请求已被代理拦截，用户
可任意修改其内容。修改完之后，用户应单击forward按钮，这样一来，修改后的请求将发送
给服务器。
在后面的2.3节“确认SQL注入”中，我们将讨论可以将哪些类型的内容注入参数中以便
触发 SQL注入漏润。
其他注入型数据
大多数应用都从GET或POST参数中检索数据，但HTTP请求的其他内容也可能会触发
SQL注入漏润。
cookie就是个很好的例子。cookie被发送给用户端的浏览器，并在每个请求中都会自动回
发给服务器。cookie一般被用于验证、会话控制和保存用户特定的信息（比如在Web站点中的
喜好）。前面介绍过，我们可以完全控制发送给服务器的内容，所以应考虑将cookie作为一种
有效的用户数据输入方式和易受注入影响的对象。
在其他HTTP请求内容中，易受注入攻击的应用示例还包括主机头、引用站点头和用户
代理头。主机头字段指定请求资源的Intermet 主机和端口号。引用站点头字段指定获取当前
请求的资源。用户代理头字段确定用户使用的Web浏览器。显然这些情况并不多见，但有些
网络监视程序和Web趋势分析程序会使用主机头、引用站点头和用户代理头的值来创建图
形，并将它们存储在数据库中。对于这些情况，我们有必要对这些头进行测试以获取潜在的
注入蒲润。
可以借助代理软件并使用本章前面介绍的方法来修改cookie和HTTP头。
2.操纵参数
我们先通过介绍一个非常简单的例子米帮助您熟悉SQL注入漏洞。
假定您正在访问Victim 公司的Web站点（这是一个电子商务站点，可以在上面购买各种商
品）。您可以在线查找商品，根据价格对商品进行分类以及显示特定类型的商品等。当测览不
同种类的商品时，其URL如下所示：
http: //www. victim.com/showproducts -php?category=bikes
http: //www.victim.com/showproducts.php?category=cars
http://www,victim,com/showproducts .php?category=boats
showproducts.php 页面收到一个名为category的参数。我们不必输入任何内容，因为上述
连接就显示在Web站点上，只需点击它们即可。服务器端应用期望获取已知的值并将属于特
定类型的商品显示出来。
即便未开始测试操作，我们也应该大概了解了该应用的工作过程。可以断定该应用不是静
态的。该应用似乎是将category参数的值作为查询条件，并根据后台数据库的查询结果来显示
不同的商品。
此时，考虑在服务器端正在执行的是哪一种数据库操作也是非常重要的，如果不小心，那
么我们尝试的注入攻击可能会产生一些副作用。在数据库层，有4种主要的数据库操作，这4
种操作如下所示：
·SELECT：根据搜索条件从数据库中读取数据
·INSERT：将新数据插入到数据库中
25
---
## Page 40
SQL注入攻击与防御（第2版）
·UPDATE：根据指定的条件更新数据中已有的数据
·DELETE：根据指定的条件删除数据库中已有的数据
在本例中，我们将假定远端的应用程序正在执行一个SELECT查询，它根据category参数
的值显示数据库中与之匹配的记录。
现在开始手动修改category参数的值，将其改为应用未预料到的值。按照下列方式进行首
次尝试：
http:/ /www, victim. com/showproducts -php?category=attacker
上述例子使用不存在的类型名向服务器发出请求。服务器返回下列响应：
tnsax 0sw pttea e qou sT 1uaunbxe pattddns :()oosseqoagbsAw :butu1en
resource 1n /var/www/victim.com/showproducts.php on 1ine 34
该警告是当用户尝试从空结果集中读取记录时，数据库返回的一个MySQL数据库错误。
该错误表明远程应用未能正确处理意外的数据。
继续进行推理操作，现在为之前发送的值添加一个单引号（)，发送下列请求：
http:/ /www, victim, com/showproducts .php?category=attacker*
图2-3展示了服务器的响应。
G-
You have am eror ion your SQL syatax;check Be masal thatl ce
FoxyPoe
图 2-3MySQL 服务器错误
服务器返回下列错误：
You have an error in your SQL syntax; check the manual that corresponds
"attacker"' at 1ine 1
不难发现，有些应用在处理用户数据时会返回意想不到的结果。Web站点检测到的异常并
26
---
## Page 41
第2章SQL注入测试
我们将逐步认识到单引号字符在检测中的重要性，并将学会如何通过向服务器发送合适的请求
来判断能进行何种类型的注入。
还可以通过进行另外一个有趣的测试来识别Oracle和PostgreSQL中的漏洞。向Web服务
器发送下面两个请求：
http:/ /www, victim.com/showproducts .php?category=bikes
http:/ /w, victim.com/showproducts -php?category=bi* I1 *kes
在Microsoft SQLServer中与之等价的请求为：
http://wnr, victim.com/showproducts -php?category=bikes
http:/ /www, victim.com/showproducts .php?category=bi'+*kes
在MySQL中与之等价的请求为（请注意两个单引号之间的空格）：
http://wwr, victim.com/showproducts php7category=bikes
http:/ /www, victim.com/showproducts -php?category=bi'' kes
如果两个请求的结果相同，那么很可能存在SQL注入漏润。
现在读者可能对单引号和字符编码有些困惑，阅读完本章后，您将会清楚这些内容。本节
的目标是展示哪些操作会触发Web服务器响应而产生异常。在2.3节“确认SQL注入”中，
我们将对用于寻找SQL注入漏洞的字符申进行扩展。
工具与陷阱.
用户数据验证
有两个原因会引发SQL注入漏洞：
·缺少用户输入验证
·数据和控制结构混合在同一传输通道中
到目前为止，在计算机历史上，这两个问题一直是产生某些非常重要漏洞（如堆和
堆栈溢出、格式字符事问题）的原因：缺少用户输入验证，将导致攻击者可以从数据部
分（例如，使用单引号引起来的字符事或数字）跳到注入控制命令（例如，SELECT、
UNION、AND、OR)
为防止出现这种漏润，首要措施是执行严格的用户输入验证和（或）输出编码，例如，
可采用白名单方法，即如果希望将数字作为参数值，可对Web应用进行配置以拒绝所
有由用户提供的非数字输入字符，如果希望是字符串，那么只接受之前确定的不具危险
性的字符。如果这些都不可行，就必须保证所有输入在用于防止SQL注入之前已被正
确引用或编码。
下面将介绍信息到达数据库服务器的流程和产生上述错误的原因。
3.信息工作流
前面介绍了一些操纵参数时显示的SQL注入错误。读者可能会间：修改参数时，为什么
Web服务器会显示数据库错误？虽然错误显示在Web服务器的响应中，但SQL注入发生在数
27
---
## Page 42