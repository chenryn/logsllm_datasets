#!/bin/sh  
JAVA_EXECUTABLE_PATH="/usr/bin/java"  
JAVA_MINIMUM_VERSION=1.7  
JAVA_BITNESS_REQUIRED=64  
JAVA_HEAP_SIZE="-Xms4096m -Xmx16384m"  
PUBPORT=9051  
SUBPORT=9052  
```  
2、配置pub, sub server配置文件（可选）  
/opt/PostgreSQL/EnterpriseDB-xDBReplicationServer/etc/xdb_pubserver.conf  
/opt/PostgreSQL/EnterpriseDB-xDBReplicationServer/etc/xdb_subserver.conf  
## 数据链路  
数据同步访问链路如下：  
1、xDB pub server 访问 pub database   
2、xDB pub server  xDB sub server  
3、xDB sub server 访问 sub database   
4、xDB console 访问 pub, sub, (源、目标)database  
## 使用xDB replication console图形界面配置  
为了方便控制，建议初学者开始先使用图形界面console  
[《Linux vnc server, vnc viewer(远程图形桌面)使用》](../201902/20190203_02.md)    
以下进入Linux vnc桌面操作  
1、启动xDB replication console  
```  
java -jar /opt/PostgreSQL/EnterpriseDB-xDBReplicationServer/bin/edb-repconsole.jar  
```  
![pic](20190203_01_pic_002.jpg)   
2、注册pub server  
![pic](20190203_01_pic_003.jpg)   
输入pub server的连接地址，用户，密码  
![pic](20190203_01_pic_004.jpg)   
3、往pub server，添加用于发布的源数据库  
![pic](20190203_01_pic_005.jpg)   
选择数据库类型  
![pic](20190203_01_pic_006.jpg)   
输入源数据库的连接地址，端口，用户（超级用户），密码，数据库名（db1）  
![pic](20190203_01_pic_007.jpg)   
4、配置pub tables group  
勾选table，一个pub group，一个slot，最多用一个核。  
![pic](20190203_01_pic_008.jpg)   
可以创建多个pub group，例如一张表一个。但是每个pub group会耗费一个slot, 一个replication worker，源库如下参数：  
```  
postgres=# show max_wal_senders ;  
 max_wal_senders   
-----------------  
 32  
(1 row)  
postgres=# show max_replication_slots ;  
 max_replication_slots   
-----------------------  
 32  
(1 row)  
```  
如果你需要复制表的部分数据，可以配置table filter，但是要求表的REPLICA IDENTITY配置为full。  
```  
alter table tbl set REPLICA IDENTITY full;  
```  
![pic](20190203_01_pic_009.jpg)   
5、注册sub server  
![pic](20190203_01_pic_010.jpg)   
输入sub server的连接地址，用户，密码。  
![pic](20190203_01_pic_011.jpg)   
6、配置订阅目标库  
![pic](20190203_01_pic_012.jpg)   
![pic](20190203_01_pic_013.jpg)   
7、创建订阅  
![pic](20190203_01_pic_014.jpg)   
配置pub server的连接串，点load，选中pub tables group  
![pic](20190203_01_pic_015.jpg)   
注意，如果目标库已经存在同名表名，则会报错  
![pic](20190203_01_pic_016.jpg)   
需要先DROP目标表，重新配置。  
![pic](20190203_01_pic_017.jpg)   
8、全量同步  
![pic](20190203_01_pic_018.jpg)   
![pic](20190203_01_pic_019.jpg)   
![pic](20190203_01_pic_020.jpg)   
9、配置增量同步计划  
当pub server无增量数据后，间隔多久再重试。  
![pic](20190203_01_pic_021.jpg)   
![pic](20190203_01_pic_022.jpg)   
![pic](20190203_01_pic_023.jpg)   
![pic](20190203_01_pic_024.jpg)   
10、原有pub tables group，增加新表  
```  
digoal@pg11-test-> psql  
psql (11.1)  
Type "help" for help.  
postgres=# \c db1  
You are now connected to database "db1" as user "postgres".  
db1=# create table test (id int primary key, info text, crt_time timestamp);  
CREATE TABLE  
db1=# alter table test replica identity full;  
ALTER TABLE  
```  
![pic](20190203_01_pic_025.jpg)   
![pic](20190203_01_pic_026.jpg)   
sub server 对应pub p1 自动获取到新增的表  
![pic](20190203_01_pic_027.jpg)   
压测  
```  
digoal@pg11-test-> vi test.sql  
\set id random(1,100000000)  
insert into test values (:id, md5(random()::text), now()) on conflict (id) do update set info=excluded.info,crt_time=excluded.crt_time;  
pgbench -M prepared -n -r -P 1 -f ./test.sql -c 4 -j 4 -T 120 db1  
progress: 1.0 s, 83118.1 tps, lat 0.048 ms stddev 0.023  
progress: 2.0 s, 84590.4 tps, lat 0.047 ms stddev 0.022  
progress: 3.0 s, 87808.6 tps, lat 0.046 ms stddev 0.021  
progress: 4.0 s, 84952.9 tps, lat 0.047 ms stddev 0.023  
progress: 5.0 s, 91500.0 tps, lat 0.044 ms stddev 0.023  
```  
目标库查看数据正常同步  
```  
psql -h 127.0.0.1 -p 8000 db2  
db2=# select count(*) from test;  
 count    
--------  
 150389  
(1 row)  
....  
db2=# select count(*) from test;  
 count    
--------  
 393261  
(1 row)  
```  
11、修改表结构  
![pic](20190203_01_pic_028.jpg)   
注意ddl中，必须写全schema，否则会报没有对应的TABLE。  
指定schema  
```  
alter table public.test add column c1 int default 10;  
```  
![pic](20190203_01_pic_029.jpg)   
建议先执行同步，因为会执行隐式同步，堵塞  
![pic](20190203_01_pic_030.jpg)   
修改完后，结构一致  
```  
源库  
db1=# \d+ test  
                                               Table "public.test"  
  Column  |            Type             | Collation | Nullable | Default | Storage  | Stats target | Description   
----------+-----------------------------+-----------+----------+---------+----------+--------------+-------------  
 id       | integer                     |           | not null |         | plain    |              |   
 info     | text                        |           |          |         | extended |              |   
 crt_time | timestamp without time zone |           |          |         | plain    |              |   
 c1       | integer                     |           |          | 10      | plain    |              |   
Indexes:  
    "test_pkey" PRIMARY KEY, btree (id)  
Triggers:  
    rrpt_public_test AFTER TRUNCATE ON test FOR EACH STATEMENT EXECUTE PROCEDURE _edb_replicator_pub.capturetruncateevent()  
Replica Identity: FULL  
目标库  
db2=# \d+ test  
                                               Table "public.test"  
  Column  |            Type             | Collation | Nullable | Default | Storage  | Stats target | Description   
----------+-----------------------------+-----------+----------+---------+----------+--------------+-------------  
 id       | integer                     |           | not null |         | plain    |              |   
 info     | text                        |           |          |         | extended |              |   
 crt_time | timestamp without time zone |           |          |         | plain    |              |   
 c1       | integer                     |           |          | 10      | plain    |              |   
Indexes:  
    "test_pkey" PRIMARY KEY, btree (id)  
```  
12、增加过滤器  
要增加table filter，使得目标端仅订阅复合条件的记录，需要表上设置Replica Identity: FULL  
test表 Replica Identity: FULL  
类似如下：  