## (新零售)商户网格化(基于位置GIS)运营 - 阿里云RDS PostgreSQL、HybridDB for PostgreSQL最佳实践    
### 作者                          
digoal                         
### 日期                           
2017-08-02                     
### 标签                    
PostgreSQL , PostGIS , 地理位置 , KNN , 近邻检索 , 网格检索 , polygon中心点 , 半径搜索        
----                    
## 背景          
伟大的马老师说：    
“纯电商时代很快会结束，未来的十年、二十年，没有电子商务这一说，只有新零售这一说，也就是说线上线下和物流必须结合在一起，才能诞生真正的新零售”    
线上是指云平台，线下是指销售门店或生产商，新物流消灭库存，减少囤货量。    
电子商务平台消失是指，现有的电商平台分散，每个人都有自己的电商平台，不再入驻天猫、京东、亚马逊大型电子商务平台。举例：每个人在电商平台都有自己的店铺，集中在平台下进行销售，只能在一块水池里生活，这是很局限性的。    
要打通线上线下、消灭库存，需要发挥数据的价值，比如通过数据预测销量。同时线上线下对接，也对数据运营产生了新的挑战，比如基于地理位置的网格化运营由来而生。    
![pic](20170802_02_pic_001.jpg)    
## 一、需求    
1、支持基于地理位置（GIS）的快速数据检索。    
2、支持海量销售数据的分析、挖掘。    
## 二、架构设计    
![pic](20170802_02_pic_002.jpg)    
1、海量的销量数据通过OSS并行进入到阿里云HybridDB for PostgreSQL数据库。    
2、RDS PostgreSQL负责在线事务处理，网格化运营的任意多边形圈选商户。    
3、ETL程序，负责数据调度。    
4、BI应用对接HDB for PG和PG，驱动和语法与PostgreSQL兼容。    
5、HybridDB for PostgreSQL提供高可用、备份的基本功能，同时提供了一键扩容的功能。用户不需要担心未来数据增长的性能压力。    
6、HDB PG和RDS PG可以通过OSS_EXT外部表插件，透明访问（读写）OSS的数据。OSS提供海量共享存储，RDS PG和HDB PG之间通过OSS可共享数据，同时OSS还可以作为外部海量数据来源并行导入到HDB PG的高速通道。OSS还可以作为RDS PG和HDB PG的冷数据存储。    
## 三、DEMO与性能    
### 1 商户网格搜索    
#### 1 内置几何类型 商户网格搜索 测试  
用到内置的polygon, box, circle, point类型，GiST空间索引，近邻排序操作符，@>操作符。    
1、构造1亿商户地理位置数据    
```    
postgres=# create table pos(id int, pos point);    
CREATE TABLE    
postgres=# insert into pos select generate_series(1,100000000), point(5000-random()*10000, 5000-random()*10000);    
INSERT 0 10000000    
postgres=# select * from pos limit 10;    
 id |                  pos                      
----+---------------------------------------    
  1 | (603.396683000028,3740.25050085038)    
  2 | (4177.6926163584,4295.85348349065)    
  3 | (-2897.50102907419,4393.90230923891)    
  4 | (-2756.50105439126,2930.08491862565)    
  5 | (-1679.21951506287,-2329.10942286253)    
  6 | (2323.99420812726,-4727.32939757407)    
  7 | (-1572.33712729067,-3614.81220461428)    
  8 | (-1383.57343617827,312.93470878154)    
  9 | (-2942.08695180714,4876.54477357864)    
 10 | (-2387.8013016656,-141.320424154401)    
(10 rows)    
```    
2、创建空间索引    
```    
postgres=# create index idx_pos on pos using gist(pos);    
```    
3、创建查询优化函数    
输入任意多边形，返回落在多边形中的商户。    
```    
select * from pos where polygon('((10,2),(-10,-100),(0,10))') @> pos;    
```    
如果需要带其他条件的空间查询，可以使用空间复合分区索引（PARTIAL INDEX），例如    
```    
create index idx_pos on pos using gist(pos) where 分区条件1;    
...    
create index idx_pos on pos using gist(pos) where 分区条件n;    
```    
详见    
[《分区索引的应用和实践 - 阿里云RDS PostgreSQL最佳实践》](../201707/20170721_01.md)      
4、空间索引性能验证，一亿数据网格查询约 0.8 毫秒。     
```    
postgres=# explain (analyze,verbose,timing,costs,buffers)     
select * from pos where polygon('((10,2),(-10,-100),(0,10))') @> pos;    
                                                            QUERY PLAN                                                                 
-----------------------------------------------------------------------------------------------------------------------------------    
 Index Scan using idx_pos on postgres.pos  (cost=0.42..123470.72 rows=100000 width=20) (actual time=0.099..0.737 rows=618 loops=1)    
   Output: id, pos    
   Index Cond: ('((10,2),(-10,-100),(0,10))'::polygon @> pos.pos)    
   Buffers: shared hit=660    
 Planning time: 0.031 ms    
 Execution time: 0.778 ms    
(6 rows)    
postgres=# select * from pos where polygon('((10,2),(-10,-100),(0,10))') @> pos;    
    id    |                   pos                        
----------+------------------------------------------    
 14028137 | (-9.47874505072832,-94.8515953496099)    
 43891480 | (-9.1992225497961,-92.9797394201159)    
  1247175 | (-0.888188369572163,-28.0744722113013)    
  4631961 | (-0.548232346773148,-31.1226723715663)    
  5458615 | (-1.67813152074814,-29.4832326471806)    
  6057261 | (-0.965241342782974,-24.8730508610606)    
  ......    
 72818882 | (-0.214213505387306,-38.5544309392571)    
 84374336 | (-0.350810587406158,-38.3379962295294)    
 93014418 | (1.69238075613976,-38.5063700377941)    
 94375565 | (-0.0325776636600494,-43.1329058483243)    
(618 rows)    
```    
#### 2 PostGIS空间数据库 商户网格搜索 测试  
实际生产上存储的是经纬度，用得更多的是PostGIS空间数据库。前面使用内置几何类型是为了测试方便。  
我们需要用到PostGIS的 商户网格搜索 的函数有两个  
http://postgis.net/docs/manual-2.3/ST_Within.html  
1、ST_within  
ST_Within — Returns true if the geometry A is completely inside geometry B  
boolean ST_Within(geometry A, geometry B);  
Returns TRUE if geometry A is completely inside geometry B. For this function to make sense, the source geometries must both be of the same coordinate projection, having the same SRID. It is a given that if ST_Within(A,B) is true and ST_Within(B,A) is true, then the two geometries are considered spatially equal.  
This function call will automatically include a bounding box comparison that will make use of any indexes that are available on the geometries. To avoid index use, use the function _ST_Within.  
```  
-- a circle within a circle  
SELECT ST_Within(smallc,smallc) As smallinsmall,  
	ST_Within(smallc, bigc) As smallinbig,  
	ST_Within(bigc,smallc) As biginsmall,  
	ST_Within(ST_Union(smallc, bigc), bigc) as unioninbig,  
	ST_Within(bigc, ST_Union(smallc, bigc)) as biginunion,  
	ST_Equals(bigc, ST_Union(smallc, bigc)) as bigisunion  
FROM  
(  
SELECT ST_Buffer(ST_GeomFromText('POINT(50 50)'), 20) As smallc,  
	ST_Buffer(ST_GeomFromText('POINT(50 50)'), 40) As bigc) As foo;  
-- Result  
 smallinsmall | smallinbig | biginsmall | unioninbig | biginunion | bigisunion  
--------------+------------+------------+------------+------------+------------  
 t            | t          | f          | t          | t          | t  
(1 row)  
```  
2、ST_Contains  
ST_Contains — Returns true if and only if no points of B lie in the exterior of A, and at least one point of the interior of B lies in the interior of A.  
boolean ST_Contains(geometry geomA, geometry geomB);  
Returns TRUE if geometry B is completely inside geometry A. For this function to make sense, the source geometries must both be of the same coordinate projection, having the same SRID. ST_Contains is the inverse of ST_Within. So ST_Contains(A,B) implies ST_Within(B,A) except in the case of invalid geometries where the result is always false regardless or not defined.  
This function call will automatically include a bounding box comparison that will make use of any indexes that are available on the geometries. To avoid index use, use the function _ST_Contains.  
```  
-- A circle within a circle  
SELECT ST_Contains(smallc, bigc) As smallcontainsbig,  
	   ST_Contains(bigc,smallc) As bigcontainssmall,  
	   ST_Contains(bigc, ST_Union(smallc, bigc)) as bigcontainsunion,  
	   ST_Equals(bigc, ST_Union(smallc, bigc)) as bigisunion,  
	   ST_Covers(bigc, ST_ExteriorRing(bigc)) As bigcoversexterior,  
	   ST_Contains(bigc, ST_ExteriorRing(bigc)) As bigcontainsexterior  
FROM (SELECT ST_Buffer(ST_GeomFromText('POINT(1 2)'), 10) As smallc,  
			 ST_Buffer(ST_GeomFromText('POINT(1 2)'), 20) As bigc) As foo;  
-- Result  
  smallcontainsbig | bigcontainssmall | bigcontainsunion | bigisunion | bigcoversexterior | bigcontainsexterior  
------------------+------------------+------------------+------------+-------------------+---------------------  