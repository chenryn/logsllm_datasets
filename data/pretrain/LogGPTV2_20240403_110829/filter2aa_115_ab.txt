void speak(Animal a) {
a.talk();
}
19
Indirect Branch Prediction
// Cat
Cat kitten = new Cat();
speak(kitten);
//Dog
Dog puppy = new Dog();
speak(puppy);
void speak(Animal a) {
a.talk();
}
“woof” 🐶
19
Indirect Branch Prediction
// Cat
Cat kitten = new Cat();
speak(kitten);
//Dog
Dog puppy = new Dog();
speak(puppy);
void speak(Animal a) {
a.talk();
}
“woof” 🐶
One single function call?? 
BPU
🧐⁉
19
Indirect Branch Prediction
// Cat
Cat kitten = new Cat();
speak(kitten);
//Dog
Dog puppy = new Dog();
speak(puppy);
void speak(Animal a) {
a.talk();
}
“woof” 🐶
One single function call?? 
Prediction depends on the context
BPU
🧐⁉
19
Indirect Branch Prediction
// Cat
Cat kitten = new Cat();
speak(kitten);
//Dog
Dog puppy = new Dog();
speak(puppy);
void speak(Animal a) {
a.talk();
}
BPU
20
Indirect Branch Prediction
// Cat
Cat kitten = new Cat();
speak(kitten);
//Dog
Dog puppy = new Dog();
speak(puppy);
void speak(Animal a) {
a.talk();
}
BPU
20
Indirect Branch Prediction
// Cat
Cat kitten = new Cat();
speak(kitten);
//Dog
Dog puppy = new Dog();
speak(puppy);
void speak(Animal a) {
a.talk();
}
BPU
breed_cats()
└► new_cat()
└► new Cat()
kitten_first_words()
└► speak()
20
Indirect Branch Prediction
// Cat
Cat kitten = new Cat();
speak(kitten);
//Dog
Dog puppy = new Dog();
speak(puppy);
void speak(Animal a) {
a.talk();
}
BPU
breed_cats()
└► new_cat()
└► new Cat()
kitten_first_words()
└► speak()
context
20
Indirect Branch Prediction
// Cat
Cat kitten = new Cat();
speak(kitten);
//Dog
Dog puppy = new Dog();
speak(puppy);
void speak(Animal a) {
a.talk();
}
BPU
breed_cats()
└► new_cat()
└► new Cat()
kitten_first_words()
└► speak()
context
TAG
TARGET
TAGcat
“meow” 🐱
...
...
TAGdog
“woof” 🐶
BTB
20
Indirect Branch Prediction
// Cat
Cat kitten = new Cat();
speak(kitten);
//Dog
Dog puppy = new Dog();
speak(puppy);
void speak(Animal a) {
a.talk();
}
BPU
breed_cats()
└► new_cat()
└► new Cat()
kitten_first_words()
└► speak()
context
TAG
TARGET
TAGcat
“meow” 🐱
...
...
TAGdog
“woof” 🐶
BTB
20
Indirect Branch Prediction
// Cat
Cat kitten = new Cat();
speak(kitten);
//Dog
Dog puppy = new Dog();
speak(puppy);
void speak(Animal a) {
a.talk();
}
BPU
breed_cats()
└► new_cat()
└► new Cat()
kitten_first_words()
└► speak()
context
TAG
TARGET
TAGcat
“meow” 🐱
...
...
TAGdog
“woof” 🐶
BTB
20
Indirect Branch Prediction
// Cat
Cat kitten = new Cat();
speak(kitten);
//Dog
Dog puppy = new Dog();
speak(puppy);
void speak(Animal a) {
a.talk();
}
BPU
“meow” 🐱
TAG
TARGET
TAGcat
“meow” 🐱
...
...
TAGdog
“woof” 🐶
BTB
20
Indirect Branch Prediction
// Cat
Cat kitten = new Cat();
speak(kitten);
//Dog
Dog puppy = new Dog();
speak(puppy);
void speak(Animal a) {
a.talk();
}
“meow” 🐱
BPU
“meow” 🐱
TAG
TARGET
TAGcat
“meow” 🐱
...
...
TAGdog
“woof” 🐶
BTB
20
Context-based prediction
TAG
TARGET
TAGcat
“meow” 🐱
...
...
TAGdog
“woof” 🐶
BTB
breed_cats()
└► new_cat()
└► new Cat()
kitten_first_words()
└► speak()
21
0x1337: void speak(Animal a) {
0x1338:    a.talk();
}
Context-based prediction
TAG
TARGET
TAGcat
“meow” 🐱
...
...
TAGdog
“woof” 🐶
BTB
breed_cats()
└► new_cat()
└► new Cat()
kitten_first_words()
└► speak()
21
Shift Register
0x1337: void speak(Animal a) {
0x1338:    a.talk();
}
F1
BHB
Context-based prediction
TAG
TARGET
TAGcat
“meow” 🐱
...
...
TAGdog
“woof” 🐶
BTB
breed_cats()
└► new_cat()
└► new Cat()
kitten_first_words()
└► speak()
21
Shift Register
0x1337: void speak(Animal a) {
0x1338:    a.talk();
}
F1
BHB
F2
Context-based prediction
TAG
TARGET
TAGcat
“meow” 🐱
...
...
TAGdog
“woof” 🐶
BTB
breed_cats()
└► new_cat()
└► new Cat()
kitten_first_words()
└► speak()
21
Shift Register
0x1337: void speak(Animal a) {
0x1338:    a.talk();
}
F1
BHB
F2
=?
TAGcat
“meow” 🐱
Bypassing Spectre Hardware Defenses
Intuition: user history is necessary for accurate kernel prediction
22
TAG
PRIV
TARGET
Bypassing Spectre Hardware Defenses
Intuition: user history is necessary for accurate kernel prediction
22
printf(‘Hello’)
└► syscall(write, stdout, ‘Hello’, 5)
User space
sys_call_table[NR_write](regs)
└► sys_write
Kernel space
BTB
TAG
PRIV
TARGET
TAG
PRIV
TARGET
TAGwrite
kernel
sys_write
Bypassing Spectre Hardware Defenses
Intuition: user history is necessary for accurate kernel prediction
22
printf(‘Hello’)
└► syscall(write, stdout, ‘Hello’, 5)
User space
sys_call_table[NR_write](regs)
└► sys_write
Kernel space
BTB
TAG
PRIV
TARGET
TAGwrite
kernel
sys_write
Bypassing Spectre Hardware Defenses
Intuition: user history is necessary for accurate kernel prediction
23
getc(stdin)
└► syscall(read, stdin, &c, 1)
User space
sys_call_table[NR_read](regs)
└► sys_read
Kernel space
BTB
TAG
PRIV
TARGET
TAGwrite
kernel
sys_write
TAG
PRIV
TARGET
TAGwrite
kernel
sys_write
TAGread
kernel
sys_read
Bypassing Spectre Hardware Defenses
Intuition: user history is necessary for accurate kernel prediction
23
getc(stdin)
└► syscall(read, stdin, &c, 1)
User space
sys_call_table[NR_read](regs)
└► sys_read
Kernel space
BTB
TAG
PRIV
TARGET
TAGwrite
kernel
sys_write
TAG
PRIV
TARGET
TAGwrite
kernel
sys_write
TAGread
kernel
sys_read
Bypassing Spectre Hardware Defenses
Intuition: user history is necessary for accurate kernel prediction
24
printf(‘VUSec’)
└► syscall(write, stdout, ‘VUSec’, 5)
User space
sys_call_table[???](regs)
└► ???
Kernel space
BTB
TAG
PRIV
TARGET
TAGwrite
kernel
sys_write
TAG
PRIV
TARGET
TAGwrite
kernel
sys_write
TAGread
kernel
sys_read
Bypassing Spectre Hardware Defenses
Intuition: user history is necessary for accurate kernel prediction
24
printf(‘VUSec’)
└► syscall(write, stdout, ‘VUSec’, 5)
User space
sys_call_table[???](regs)
└► ???
Kernel space
BTB
BPU
I’ve already seen this user history!
Speculate on sys_write
Bypassing Spectre Hardware Defenses
Can we control kernel branch prediction with user-space history?
25
TAG
PRIV
TARGET
Bypassing Spectre Hardware Defenses
Can we control kernel branch prediction with user-space history?
25
context_A_1()
└► ...
└► context_A_64()
└► syscall(sys_a)
sys_call_table[NR_sys_a](regs)
└► sys_a()
BTB
User space
Kernel space
TAG
PRIV
TARGET
TAG
PRIV
TARGET
TAGA
kernel
sys_a
Bypassing Spectre Hardware Defenses
Can we control kernel branch prediction with user-space history?
25
context_A_1()
└► ...
└► context_A_64()
└► syscall(sys_a)
sys_call_table[NR_sys_a](regs)
└► sys_a()
BTB
User space
Kernel space
TAG
PRIV
TARGET
TAGA
kernel
sys_a
Bypassing Spectre Hardware Defenses
Can we control kernel branch prediction with user-space history?
26
context_B_1()
└► ...
└► context_B_64()
└► syscall(sys_b)
sys_call_table[NR_sys_b](regs)
└► sys_b()
BTB
User space
Kernel space
TAG
PRIV
TARGET
TAGA
kernel
sys_a
TAG
PRIV
TARGET
TAGA
kernel
sys_a
TAGB
kernel
sys_b
Bypassing Spectre Hardware Defenses
Can we control kernel branch prediction with user-space history?
26
context_B_1()
└► ...
└► context_B_64()
└► syscall(sys_b)
sys_call_table[NR_sys_b](regs)
└► sys_b()
BTB
User space
Kernel space
TAG
PRIV
TARGET
TAGA
kernel
sys_a
TAGB
kernel
sys_b
Bypassing Spectre Hardware Defenses
Can we control kernel branch prediction with user-space history?
27
context_A_1()
└► ...
└► context_A_64()
└► syscall(sys_b)
sys_call_table[???](regs)
└► ???
BTB
User space
Kernel space
TAG
PRIV
TARGET
TAGA
kernel
sys_a
TAGB
kernel
sys_b
Bypassing Spectre Hardware Defenses
Can we control kernel branch prediction with user-space history?
27
context_A_1()
└► ...
└► context_A_64()
└► syscall(sys_b)
sys_call_table[???](regs)
└► ???
BTB
User space
Kernel space
BPU
I’ve already seen this user history!
Speculate on sys_a
TAG
PRIV
TARGET
TAGA
kernel
sys_a
TAGB
kernel
sys_b
Bypassing Spectre Hardware Defenses
Can we control kernel branch prediction with user-space history?
27
context_A_1()
└► ...
└► context_A_64()
└► syscall(sys_b)
sys_call_table[???](regs)
└► ???
BTB
User space
Kernel space
BPU
I’ve already seen this user history!
Speculate on sys_a
Bypassing Spectre Hardware Defenses
Experiment results:
•
Intel
○
eIBRS: perfect mispredicQon! ✔
•
Arm
○
CSV2: perfect mispredicQon! ✔
•
AMD
○
retpoline: no mispredicQon! ❌
28
User context can be used to 
mistrain kernel 
indirect branches
(Even with HW defenses)
Branch History Injection (BHI)
29
Branch History Injection
30
For exploitation we need to understand:
Branch History Injection
30
For exploitation we need to understand:
•
Which targets we can speculatively execute 
br_a: jmp rax
target_a
target_b
Branch History Injection
30
For exploitaOon we need to understand:
•
Which targets we can speculaOvely execute 
br_a: jmp rax
target_a
target_b
🧐⁉
Branch History Injection
30
For exploitation we need to understand:
•
Which targets we can speculatively execute 
•
Which branches we can mispredict
br_a: jmp rax
br_b: jmp rax
target_a
target_b
🧐⁉
Branch History Injection
30
For exploitation we need to understand:
•
Which targets we can speculatively execute 
•
Which branches we can mispredict
br_a: jmp rax
br_b: jmp rax
target_a
target_b
🧐⁉
BPU Internals
31
Patents
BPU Internals
31
Patents
Rev. Eng.
BPU Internals
31
Patents
Rev. Eng.
BPU Internals
31
Patents
Rev. Eng.
Brute Force
BPU Internals
32
•
Just by controlling the BHB, what BTB tags can we generate?
TAG
TARGET
TAGcat
“meow” 🐱
...
...
TAGdog
“woof” 🐶
BTB
breed_cats()
└► new_cat()
└► new Cat()
kitten_first_words()
└► speak()
Shift Register
0x1337: void speak(Animal a) {
0x1338:    a.talk();
}
F1
BHB
F2
=?
TAGxxx
“meow” 🐱
BPU Reverse Engineering – Brute Force
33
BPU Reverse Engineering – Brute Force
33
BPU Reverse Engineering – Brute Force
33
✔ Always correct predic5on! The BPU is able to dis5nguish HA from HB
BPU Reverse Engineering – Brute Force
33
✔ Always correct predic5on! The BPU is able to dis5nguish HA from HB
BPU Reverse Engineering – Brute Force
33
❌ Always misprediction! The BPU is unable to distinguish HA from HB
BPU Reverse Engineering – Brute Force
How long is this brute-force?
•
Intel 10th gen: 14 bits entropy
•
Intel 11th gen: 17 bits entropy
•
Cortex-X1: 9 bits entropy
34
Entropy is small enough to 
make brute force feasible
BHI Capabilities
35
ind. branch
User
space
Kernel
space
BHI Capabilities
35
PRIV
TAG
TARGET
kernel
TAG_A
kern_func_a
user
TAG_B
user_func
kernel
TAG_C
kern_func_b
PRIV
TAG
TARGET
kernel
TAG_A
valid_target_a
user
TAG_B
user_func
kernel
TAG_C
valid_target_b
kernel
TAG_D
other_target_1
kernel
TAG_E
other_target_2