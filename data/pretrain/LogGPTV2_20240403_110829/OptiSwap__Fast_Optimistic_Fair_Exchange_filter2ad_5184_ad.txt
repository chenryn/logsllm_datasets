when dening the price for the digital good. But recall, that the optimistic case can end
in two ways; either the Buyer conrms that he received x and triggers the payout, or the
Seller has to request it after the Buyer did neither conrm nor complain. Fee security for
the Seller can be achieved by letting the Buyer lock a small security deposit in the second
round. The Seller will receive this deposit on top of the payment unless the Buyer correctly
conrms the exchange in round 4; in which case he gets this deposit back.
Pessimistic case execution On top of the four rounds of the honest execution, the parties
execute the interactive dispute procedure. This includes at most aÏ† challenge-response rep-
etitions. We used the basic challenge-response strategy resulting in aÏ† = ((Î´ âˆ’ 1) âˆ— (cid:96) + 1) =
((21 âˆ’ 1) âˆ— 2 + 1) = 41. This also means that the costs for the pessimistic case execution
grow signicantly due to the higher transaction load (cf. Table 2). Contrary, the interac-
tive dispute procedure is not required in FairSwap, since all the data is already transferred
in the rst protocol message. Therefore, FairSwap requires only one transaction from the
Buyer providing the PoM costing at most 194 068 gas. Comparing to FairSwap, the number
of rounds and the costs of the dispute resolution can be considered as a downside of Op-
tiSwap. However, we like to stress that an honest party always gets compensated at the
end of the protocol. This also implies a deterrent eect on malicious parties.
Within the challenge-response procedure, the Buyer will send a relatively small challenge
query but forces the Seller to respond with a potentially large transaction. For our imple-
mentation of the le sale application, a challenge transaction costs at most 70 057 gas and
a response costs at most 645 331 gas. While the maximum number of rounds is xed, it will
be hard in most cases to precisely predict the costs for the transactions. It would be easy
for the Buyer to grieve the Seller  force him (at a low cost) to pay a lot of transaction fees
to show his correct behavior. The transaction fees are many times higher than the honest
execution and could even outweigh the price p. A rational Seller could be forced this way to
waive the payment in order to save transaction fees.
To prevent grieving attacks, we present a simple security fee mechanism that should
guarantee that an honest party does not carry the costs for the dispute. In particular,
the Seller should be compensated if the Buyer cannot prove misbehavior and the Buyer
should be compensated if the Seller cheated. To ensure this, both parties need to add some
additional coins to each transaction executed in the challenge-response procedure. All coins
will be collected in the contract and paid out together with the payment. This ensures
that the honest party will receive its deposit back and gets the malicious party's deposit as
compensation.
Since the response transactions of the Seller are more expensive and the Buyer might
need to compensate for them, his deposit fB will be higher than the one of the Seller fS . The
parameters depend on the circuit and are contained in the auxiliary information aux. The
value must be large enough to compensate for the worst case transaction size. As a result,
it might happen that one or both parties deposit much higher fees than the actual costs
for the blockchain transactions. However, since the honest party gets his complete money
back, this aspect just increases the temporal deposit costs. In addition, it provides a highly
deterrent eect for malicious party and disincentives cheating. We give concrete values for
fB and fS for an exemplary le sale application in the Appendix F.
We note that the Buyer can still grieve the Seller by forcing him to pay the deployment
fees in the rst round. The Seller pays the deployment fees with the risk that the Buyer
aborts and does not send his message in the second round. At this point there is no way to
force the Buyer to compensate the Seller for the invested fees.
6 Without loss of generality the deployment costs could also be carried by the Buyer in the second
round, if he gets the auxiliary information from the Seller rst.
16
5 Security Analysis
We formally prove the security of OptiSwap in the Universal Composability (UC) frame-
work (cf. Appendix A for an introduction to the UC model and Appendix E for the full
proof). We start by informally arguing about the security properties to give the reader a
intuition about the achieved security of the OptiSwap protocol. Then we dene the ideal
behavior of OptiSwap by the ideal functionality FL
icfe which captures the overall security of
our construction. Afterwards we present a short sketch of our security proof.
5.1
Informal Security Discussion
In this section we will informally argue why OptiSwap achieves all security and eciency
properties. In every step of the OptiSwap protocol the parties only have a limited time to
send an expected transaction. On one hand this limits the maximal round time while on
the other hand it identies if a party aborted. If one of the parties aborts, the other party
calls a timeout-function in the contract. This triggers the judge to verify that the timeout
indeed expired and it will terminate after it sent all remaining coins to the opponent. It is
important for the security of honest parties that this timeout is chosen large enough, such
that honest transactions will be included in the blockchain in time.
Security against malicious Buyers (S1). This property guarantees to the honest Seller that he
will get paid if the Buyer learns the witness x. In particular it means that (a) the Buyer learns
nothing about x before k is revealed and (b) he cannot forge a proof of misbehavior if the
Seller behaves honestly. (a) holds because of the CPA-secure encryption, which guarantees
that the ciphertext z does not leak information about the plaintext x and the hiding property
of the commitment which hides k from the Buyer. This makes it impossible for the Buyer
to learn x without breaking any of the two schemes. (b) is guaranteed because the honest
Seller will not cheat with the computation of Ï†(x) which makes it impossible for the Buyer
to claim this (since he cannot nd collisions for hash values in the Merkle tree commitment
of z). Additionally, E3 ensures that the Buyer cannot delay the payout forever.
Security against malicious Sellers (S2). This property protects the Buyer and his funds. It
guarantees that  no matter what the Seller does  the Buyer will either receive the correct
witness x or get his money back. If the Seller aborts or reveals a wrong key the contract will
automatically reimburse the Buyer. This follows from the fact that it is cryptographically
hard to break the binding of the commitment c. If the Seller reveals the correct key and the
witness is correct, property S2 is also satised. So the most interesting case for the analysis
(cid:54)= x s.t. Ï†(x(cid:48)) = 0. In
is the situation when the Buyer received an incorrect witness x(cid:48)
this case the interactive dispute procedure guarantees that the Buyer will be able to nd a
statement (PoM) which will make the judge refund the payment to him. Unless the Seller
aborts, this statement will either prove that Ï†(x(cid:48)) = 0, that the Seller lied about the result
of some gate Ï†i âˆˆ Ï† or that he used a witness x (cid:54)= Dec(k, z). This guarantee follows from
the fact that the Buyer has enough rounds in the dispute resolution to challenge the gates
required for creating a PoM and that Seller is forced by the judge to respond to all queries.
Security against grieving (S3). This property protects both parties. As seen in Section 4.2,
OptiSwap protects against grieving attacks by using transaction deposits for every step in
the interactive dispute phase. These deposits will be paid out to the Buyer if he nds a PoM
and to the Seller if no PoM can be provided. From properties S1 and S2 we know that the
honest party will always receive the coins. This guarantees to honest parties that all paid
dispute fees (and more) will be reimbursed after the dispute has nished.
17
Communication complexity (E1). The communication complexity in the optimistic case of
OptiSwap is mainly determined by the rst message of the protocol. All following contract
transactions have a xed size that are independent of the witness x and the circuit Ï†. The
rst message has a size of |z| which is identical to |x| since it is its encryption. Therefore, the
overall communication complexity is O(x) which satises property (E1). This is in contrast
to FairSwap [14] where the rst message depends on both, the witness and the circuit. In the
pessimistic case the message complexity is depended on Ï†. A challenge consists of a single
integer while a response contains the output value of a gate along with a Merkle tree proof.
|x|
n . Hence, the size of
The size of a gate output value is at most the size of a witness chunk
|x|
n + (1 + log(m)). The number of challenges is limited by aÏ† resulting
a response is at most
|x|
in an overall complexity of aÏ† integers for the Buyer and aÏ† Ã— (
n + (1 + log(m))) values for
the Seller in the worst case. Note that in this case (S3) guarantees that any honest party
forced to engage in this procedure, will get compensated.
Round complexity (E2+E3). In the optimistic case the protocol runs either 4 or 5 rounds
(in case the Buyer doesn't conrm that he received the witness). This satises (E2). In the
pessimistic case (E3) the challenge-response procedure is started in the fourth round, and
will take at most aÏ† repetitions and nish with an additional PoM transaction of the Buyer.
In case the Buyer does not send this last message, the Seller has to request his payment in
the next round, leading to 5 + 2aÏ† rounds in the worst case.
Ideal Functionality FL
icfe
5.2
The functionality FL
icfe represents a fair exchange of digital goods within a blockchain-based
setting. It describes an exchange of a digital good x between a Seller S and a Buyer B.
While Seller oers the digital good, Buyer must pay for it. The correctness of the witness
x is dened by a circuit Ï† which either outputs 1 for the correct witness or 0 otherwise. It
extends the functionality FL
cfe for coin aided fair exchange [14] and also utilizes an idealized
ledger functionality L for the on-chain handling of coins. We do not specify the ledger ideal
functionality L here but refer the reader to Appendix B. The major change in comparison to
FL
cfe is the modeling of an interactive challenge-response procedure in case of dispute. This
includes modeling security fees incorporated in our construction.
Ideal Functionality FL
icfe
The ideal functionality FL
icfe (in session id) for interactive coin aided fair exchange
interacts with Seller S and Buyer B. Moreover, it has access to the global ledger
functionality L and interacts with the ideal adversary Sim.
Initialization
(Round 1) Upon receiving (sell, id, x, Ï†, p, fS , fB) with p, fS , fB âˆˆ N and Ï†(x) = 1
from S, store witness x, circuit Ï† with challenge limit property aÏ†, price p, and
fee parameters fS , fB and leak (sell, id, Ï†, p, fS , fB,S) to Sim.
Upon receiving (sell-f ake, id, x, Ï†, p, fS , fB) with p, fS , fB âˆˆ N from corrupted Seller
Sâˆ—, store witness x, circuit Ï† with challenge limit property aÏ†, price p, and fee
parameters fS , fB.
(Round 2) Upon receiving (abort, id) from Seller S, leak (abort, id,S) to Sim, send
(aborted, id) to B, and terminate.
Upon receiving (buy, id, Ï†) from Buyer B, send (f reeze, id,B, p) to L. If L responds
with (f rozen, id,B, p), leak (buy, id,B) to Sim and go to Revealing phase.
If no message is received during round 2, terminate.
18
Revealing
(Round 3) Upon receiving (abort, id) from Buyer B, leak (abort, id,B) to Sim, send
in round 3,
(unf reeze, id,B) to L, (aborted, id) to S, and terminate.
from corrupted Seller Sâˆ—
(unf reeze, id,B) to L in the next round and terminate.
Upon receiving (abort, id)
send
If no message is received in round 3, send (revealed, id, x) to B, set s = challenge,
wait one round, and go to Interaction phase.
Interaction
Upon receiving (f reeze, id,B, ar) with aÏ† â‰¥ ar from Sim when s = challenge, send
(f reeze, id,B, ar âˆ— fB) to L. If L responds with (f rozen, id,B, ar âˆ— fB), store ar,
set aÏ† = aÏ† âˆ’ ar, s = response, and wait one round.
Upon receiving (f reeze, id,S, as) with as = ar from Sim when s = response,
send (f reeze, id,S, as âˆ— fS ) to L. If L responds with (f rozen, id,S, as âˆ— fS ), set
s = challenge and wait one round.
Upon receiving (abort, id, âˆ†) from corrupted Buyer Bâˆ—, where âˆ† âˆˆ {0, 1}, when
s = challenge, wait âˆ† rounds. Then send (unf reeze, id,S) to L and (sold, id) to
S and terminate.
Upon receiving (abort, id, âˆ†) from corrupted Seller Sâˆ—, where âˆ† âˆˆ {0, 1}, when s =
response, wait âˆ† rounds. Then send (unf reeze, id,B) to L and (not bought, id, x)
to B and terminate.
If no message is received, execute Payout phase.
Payout
If Ï†(x) = 1, send messages (unf reeze, id,S) to L, (sold, id) to S, and (bought, id, x)
to B. Otherwise, if Ï†(x) (cid:54)= 1, send messages (unf reeze, id,B) to L, (not sold, id)
to S, and (not bought, id, x) to B. Terminate the execution after the payout.
We describe the ideal functionality in the following. We rst assume two honest parties
and describe additional opportunities for malicious parties afterwards.
The ideal functionality FL
icfe starts in the initialization phase during which both parties
provide their initial input. In the rst round, Seller starts the execution by sending the
witness x, the verication circuit Ï†, a price p, and fee parameters fS , fB to FL
icfe. For an
honest Seller it must hold that Ï†(x) = 1 in the initialization. In the second round, Seller
may abort the execution or he waits for Buyer to accept the oer. By accepting the oer,
the ideal functionality instructs the ledger functionality to lock p coins from Buyer B. If
locking p coins from B is not successful due to insucient funds, the functionality ends the
interactive fair exchange protocol.
In the revealing phase in round 3, Buyer may abort the protocol execution and receives
his coins back or he waits to learn the witness x. After the witness is revealed, the interaction
phase is started. Assuming both parties are honest, Seller sent the correct witness and Buyer
has no intention to challenge Seller. Therefore, the payout phase is executed during which
Seller gets the money and the fair exchange is completed.
19
Next, considering the case that Seller is malicious. He can send an incorrect witness
x such that Ï†(x) (cid:54)= 1 to FL
icfe in the initialization phase. Since a malicious Seller has not
to follow the protocol, he may abort in round 3 by not sending the required message. If
he aborts in round 3 before the witness is revealed to Buyer FL
icfe instructs the ledger
functionality L to unfreeze the locked money in Buyer's favor. In case Seller does not abort,
FL
icfe reveals the incorrect witness to honest Buyer. Since an honest Buyer is not willing to
pay for an incorrect witness, he starts the dispute resolution sub-protocol by challenging
Seller. This challenge-response interaction is simulated by the ideal adversary Sim within
the interaction phase. Each challenge or response message costs some fees which are locked
by FL
icfe by instructing L to freeze these fees. At each round during the interaction phase in
which Seller must provide a response to a challenge query a malicious Seller may abort. In
this case, Buyer gets all the money that is locked by the ledger functionality. After several
interactions, which is limited by the challenge limit property aÏ† of the circuit Ï†, Buyer is
able to generate a valid proof of misbehavior within the protocol. The ideal functionality
executes the payout phase and sends all the money to B, since malicious Seller oered an
incorrect witness at the start of the execution.
In addition to the already explained actions, a malicious Buyer may challenge Seller even
tough he provided the correct witness during the initialization phase. These challenges are
simulated by the ideal adversary in the interaction phase. Again, the number of possible
challenges is limited by the challenge limit property aÏ† of the circuit Ï†. As explained above,
a malicious Seller may abort within the interaction phase and a malicious Buyer may do this
as well. In this case, all the locked money gets unfrozen by the ledger functionality in favor
of the Seller. If Seller has sent the correct witness in the initialization phase, a malicious
Buyer will not be able to generate a valid proof of misbehavior and Seller is able to respond
to every challenge posed by Buyer. This ends in the execution of the payout phase during
which the ideal functionality FL
In order to consider delayed messages during a protocol execution, the ideal adversary
Sim is able to delay the execution of FL
icfe. Whenever Sim obtains the instruction from
the environment to delay the message of any corrupted party by Î´ rounds, the simulator
instructs the ideal functionality to delay the execution by Î´ rounds. For sake of clarity, this
description is omitted in the denition.
icfe instructs L to unfreeze all the money in favor of S.
5.3 Proof Sketch
Here, we only provide a sketch of the security proof and refer the reader to the Appendix E
for a formal proof. We follow the model of FairSwap [14] and assume synchronous communi-
cation and static corruption. As we work in the generalized universal composability (GUC)
framework [11] (cf. Appendix B for denition of ledger L and random oracle H) the formal
security statement is as follows:
Theorem 1. The OptiSwap protocol Î  stated in Section 3.4 GUC-realizes the ideal func-
tionality FL
,L,H)-hybrid world, where L denotes a
ledger functionality and H is modeled as a global random programmable oracle.
icfe within the judge smart contract (GL,H
jc
To prove this theorem, we need to show that for any possible corruption case, the envi-
ronment cannot distinguish the ideal world execution from the execution of the OptiSwap
protocol. In particular, the outputs of honest parties and all changes in the global function-
alities (L, H) must be identical. This must also hold for all messages sent to the corrupted
parties. We prove this by constructing a simulator Sim which simulates the execution of
OptiSwap in the real world, by interacting with the ideal world functionality and corrupted
parties in the ideal world. In the following we highlight the role of the simulator in all four
corruption cases.
Two honest parties. In case of two honest parties, we need to assume a secure channel
between the Seller and the Buyer that is used for transferring the rst protocol message. In
20
this secure channel, the adversary only learns that information is transferred but he gains no
knowledge about the content of the message. Without such a secure channel, the simulator
would have to create an encrypted witness zâˆ— without ever learning the correct witness x.
Since both parties are honest, the execution of the protocol only starts if the witness is
correct, i.e., Ï†(x) = 1. This is ensured by the honest Seller in the hybrid world execution
and by the ideal functionality FL
icfe in the ideal world execution. Therefore, the environment
obtains the correct witness x back after the execution in both worlds and cannot use the
input in order to distinguish between the two executions. The commitments created by the
honest Seller in the rst protocol message depend on a randomly chosen encryption key.
Based on the randomly selected keys and the hiding property of the commitment scheme,
the environment cannot distinguish between the values computed by the honest Seller and
the one created by the simulator.
Finally, a simulation of abort is possible in a straightforward way and the simulator
ensures that money is locked and unlocked in the same round as in the real world execution.