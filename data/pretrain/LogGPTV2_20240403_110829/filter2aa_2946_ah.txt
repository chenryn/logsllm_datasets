# 滴水逆向课程笔记 - Win32 文件系统

## 1. 文件系统概述
文件系统是操作系统用于管理磁盘上文件的方法和数据结构，即在磁盘上组织文件的方式。Windows 支持的文件系统主要包括 NTFS 和 FAT32。可以通过查看本地磁盘属性来确定当前使用的文件系统类型。

## 2. 卷相关 API
卷可以理解为逻辑驱动器，例如硬盘分区。以下是与卷相关的几个重要 API 函数：

### 2.1 获取所有逻辑驱动器
**函数名**: `GetLogicalDrives`  
**功能**: 获取计算机上的所有逻辑驱动器。  
**语法**:
```c
DWORD GetLogicalDrives(void);
```
- **返回值**: 返回一个 DWORD 值，其中每一位表示一个驱动器的存在状态（例如，0x0000000D 表示 A、C 和 D 驱动器存在）。

### 2.2 获取所有逻辑驱动器的字符串
**函数名**: `GetLogicalDriveStrings`  
**功能**: 获取所有逻辑驱动器的字符串表示形式。  
**语法**:
```c
DWORD GetLogicalDriveStrings(
  DWORD nBufferLength,  // 缓冲区大小
  LPTSTR lpBuffer       // 存储驱动器字符串的缓冲区
);
```

### 2.3 获取逻辑驱动器的类型
**函数名**: `GetDriveType`  
**功能**: 获取指定路径下的驱动器类型。  
**语法**:
```c
UINT GetDriveType(
  LPCTSTR lpRootPathName  // 根目录路径
);
```
- **返回值**: 可能的值包括 `DRIVE_UNKNOWN`, `DRIVE_NO_ROOT_DIR`, `DRIVE_REMOVABLE`, `DRIVE_FIXED`, `DRIVE_REMOTE`, `DRIVE_CDROM`, `DRIVE_RAMDISK` 等。

### 2.4 获取卷的信息
**函数名**: `GetVolumeInformation`  
**功能**: 获取卷的信息，如卷名称、序列号、文件系统标志等。  
**语法**:
```c
BOOL GetVolumeInformation(
  LPCTSTR lpRootPathName,           // 根目录路径
  LPTSTR lpVolumeNameBuffer,        // 卷名缓冲区
  DWORD nVolumeNameSize,            // 卷名缓冲区大小
  LPDWORD lpVolumeSerialNumber,     // 卷序列号
  LPDWORD lpMaximumComponentLength, // 最大文件名长度
  LPDWORD lpFileSystemFlags,        // 文件系统标志
  LPTSTR lpFileSystemNameBuffer,    // 文件系统名称缓冲区
  DWORD nFileSystemNameSize         // 文件系统名称缓冲区大小
);
```

## 3. 目录相关 API
以下是一些常用的目录操作 API：

### 3.1 创建目录
**函数名**: `CreateDirectory`  
**功能**: 创建一个新的目录。  
**语法**:
```c
BOOL CreateDirectory(
  LPCTSTR lpPathName,                         // 目录路径
  LPSECURITY_ATTRIBUTES lpSecurityAttributes  // 安全属性
);
```

### 3.2 删除目录
**函数名**: `RemoveDirectory`  
**功能**: 删除一个空目录。  
**语法**:
```c
BOOL RemoveDirectory(
  LPCTSTR lpPathName  // 目录路径
);
```

### 3.3 修改目录名称或移动目录
**函数名**: `MoveFile`  
**功能**: 修改目录名称或将目录移动到新位置。  
**语法**:
```c
BOOL MoveFile(
  LPCTSTR lpExistingFileName, // 当前目录路径
  LPCTSTR lpNewFileName       // 新目录路径
);
```

### 3.4 获取当前工作目录
**函数名**: `GetCurrentDirectory`  
**功能**: 获取当前进程的工作目录。  
**语法**:
```c
DWORD GetCurrentDirectory(
  DWORD nBufferLength,  // 缓冲区大小
  LPTSTR lpBuffer       // 存储当前目录的缓冲区
);
```

### 3.5 设置当前工作目录
**函数名**: `SetCurrentDirectory`  
**功能**: 设置当前进程的工作目录。  
**语法**:
```c
BOOL SetCurrentDirectory(
  LPCTSTR lpPathName  // 新的工作目录路径
);
```

## 4. 文件相关 API
以下是一些常用的文件操作 API：

### 4.1 创建文件
**函数名**: `CreateFile`  
**功能**: 创建或打开一个文件。  
**语法**:
```c
HANDLE CreateFile(
  LPCTSTR lpFileName,                         // 文件名
  DWORD dwDesiredAccess,                      // 访问模式
  DWORD dwShareMode,                          // 共享模式
  LPSECURITY_ATTRIBUTES lpSecurityAttributes, // 安全属性
  DWORD dwCreationDisposition,                // 创建方式
  DWORD dwFlagsAndAttributes,                 // 文件属性
  HANDLE hTemplateFile                        // 模板文件句柄
);
```

### 4.2 关闭文件
**函数名**: `CloseHandle`  
**功能**: 关闭一个打开的文件句柄。  
**语法**:
```c
BOOL CloseHandle(
  HANDLE hObject  // 文件句柄
);
```

### 4.3 获取文件大小
**函数名**: `GetFileSize`  
**功能**: 获取文件的大小。  
**语法**:
```c
DWORD GetFileSize(
  HANDLE hFile,           // 文件句柄
  LPDWORD lpFileSizeHigh  // 高 32 位的文件大小
);
```

### 4.4 获取文件属性
**函数名**: `GetFileAttributes`  
**功能**: 获取文件的属性。  
**语法**:
```c
DWORD GetFileAttributes(
  LPCTSTR lpFileName  // 文件名
);
```

### 4.5 获取文件信息
**函数名**: `GetFileAttributesEx`  
**功能**: 获取文件的详细信息。  
**语法**:
```c
BOOL GetFileAttributesEx(
  LPCTSTR lpFileName,                   // 文件名
  GET_FILEEX_INFO_LEVELS fInfoLevelId,  // 信息级别
  LPVOID lpFileInformation              // 信息存储结构
);
```

### 4.6 读/写/拷贝/删除文件
#### 读取文件
**函数名**: `ReadFile`  
**语法**:
```c
BOOL ReadFile(
  HANDLE hFile,                // 文件句柄
  LPVOID lpBuffer,             // 数据缓冲区
  DWORD nNumberOfBytesToRead,  // 要读取的字节数
  LPDWORD lpNumberOfBytesRead, // 实际读取的字节数
  LPOVERLAPPED lpOverlapped    // 重叠结构
);
```

#### 写入文件
**函数名**: `WriteFile`  
**语法**:
```c
BOOL WriteFile(
  HANDLE hFile,                    // 文件句柄
  LPCVOID lpBuffer,                // 数据缓冲区
  DWORD nNumberOfBytesToWrite,     // 要写入的字节数
  LPDWORD lpNumberOfBytesWritten,  // 实际写入的字节数
  LPOVERLAPPED lpOverlapped        // 重叠结构
);
```

#### 拷贝文件
**函数名**: `CopyFile`  
**语法**:
```c
BOOL CopyFile(
  LPCTSTR lpExistingFileName, // 源文件路径
  LPCTSTR lpNewFileName,      // 目标文件路径
  BOOL bFailIfExists          // 如果目标文件存在是否失败
);
```

#### 删除文件
**函数名**: `DeleteFile`  
**语法**:
```c
BOOL DeleteFile(
  LPCTSTR lpFileName  // 文件路径
);
```

希望这些优化后的说明能够帮助你更好地理解和使用 Win32 文件系统相关的 API 函数。