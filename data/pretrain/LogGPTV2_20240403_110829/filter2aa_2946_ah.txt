23
滴水逆向课程笔记  –  Win32
文件系统  –  98
22 文件系统
文件系统是操作系统用于管理磁盘上文件的方法和数据结构；简单点说就是在磁盘上如何组织文件的方法。
在Windows下有NTFS、FAT32这两种文件系统，我们可以通过查看本地磁盘的属性查看：
22.1 卷相关API
卷可以理解为就是我们的本地磁盘（逻辑驱动器），我们可以把一块2GB的内存条分为两个卷，卷里头的就是
文件和目录。
22.1.1 获取卷（逻辑驱动器）
函数GetLogicalDrives用于获取当前计算机所有逻辑驱动器，语法格式为：
DWORD GetLogicalDrives(VOID); // 返回值是一个DOWRD，没有参数
1
滴水逆向课程笔记  –  Win32
文件系统  –  99
如下图所示代码，我们最终获取到的就是一个十六进制的d，在MSDN Library中明确说明了这个返回值表示的
结果：
二进制位标志着存在哪些驱动器，位0为1则表示存在驱动器A，位1为1则表示存在驱动器B，以此类推，这里
我们获取的0xd二进制是1101，位1为1、位2为0、位3为1、位4为1，那么就表示我们存在驱动器A、C、D。
22.1.2 获取所有逻辑驱动器的字符串
函数GetLogicalDriveStrings用于获取所有逻辑驱动器的字符串，语法格式为：
// 获取卷（逻辑驱动器）
1
DWORD gLd = GetLogicalDrives();
2
printf("GetLogicalDrives: %x", gLd);
3
滴水逆向课程笔记  –  Win32
文件系统  –  100
如下图所示我可以获取所有逻辑驱动器的字符串，那么很清晰的可以看见逻辑驱动器的字符串就是盘符加上冒
号和反斜杠：
22.1.3 获取卷（逻辑驱动器）的类型
函数GetLogicalDriveStrings用于获取卷的类型，语法格式为：
DWORD GetLogicalDriveStrings(
1
  DWORD nBufferLength,  // size of buffer 输入类型，要获取字符串的大小
2
  LPTSTR lpBuffer       // drive strings buffer 输出类型，将获取的字符串放到该参数中
3
);
4
// 获取一个逻辑驱动器的字符串
1
DWORD nBufferLength = 100;
2
char szOutBuffer[100];
3
GetLogicalDriveStrings(nBufferLength, szOutBuffer);
4
滴水逆向课程笔记  –  Win32
文件系统  –  101
如下图所示，我获取了逻辑驱动器C的类型：
22.1.4 获取卷的信息
函数GetVolumeInformation用于获取卷的信息，语法格式为：
UINT GetDriveType(
1
  LPCTSTR lpRootPathName   // root directory 根目录，这里我们可以使用驱动器字符串
2
);
3
// 获取卷的类型
1
UINT type;
2
type = GetDriveType(TEXT("C:\\"));
3
4
if (type == DRIVE_UNKNOWN) {
5
    printf("无法确定驱动器的类型 \n");
6
} else if (type == DRIVE_NO_ROOT_DIR) {
7
    printf("根路径是无效的，例如: 在该路径上没有安装任何卷 \n");
8
} else if (type == DRIVE_REMOVABLE) {
9
    printf("磁盘可以从驱动器中取出 \n");
10
} else if (type == DRIVE_FIXED) {
11
    printf("磁盘不能从驱动器中取出 \n");
12
} else if (type == DRIVE_REMOTE) {
13
    printf("该驱动器是一个远程（网络）驱动器 \n");
14
} else if (type == DRIVE_CDROM) {
15
    printf("该驱动器是一个CD-ROM驱动器 \n");
16
} else if (type == DRIVE_RAMDISK) {
17
    printf("该驱动器是一个RAM磁盘 \n");
18
}
19
滴水逆向课程笔记  –  Win32
文件系统  –  102
如下图所示，我获取了逻辑驱动器C的相关信息：
BOOL GetVolumeInformation(
1
  LPCTSTR lpRootPathName,           // root directory 输入类型，驱动器字符串
2
  LPTSTR lpVolumeNameBuffer,        // volume name buffer 输出类型，返回卷名
3
  DWORD nVolumeNameSize,            // length of name buffer 输入类型，卷名长度
4
  LPDWORD lpVolumeSerialNumber,     // volume serial number 输出类型，卷宗序列号
5
  LPDWORD lpMaximumComponentLength, // maximum file name length 输出类型，指定文件系统支持的文件名组件的
最大长度
6
  LPDWORD lpFileSystemFlags,        // file system options 输出类型，与指定文件系统相关的标志
7
  LPTSTR lpFileSystemNameBuffer,    // file system name buffer 输出类型，文件系统（如FAT或NTFS）名称
8
  DWORD nFileSystemNameSize         // length of file system name buffer 输入类型，文件系统名称的长度
9
);
10
// 获取卷的信息
1
TCHAR szVolumeName[260];
2
DWORD dwVolumeSerialNumber;
3
DWORD dwMaximumComponentLength;
4
DWORD dwFileSystemFlags;
5
TCHAR szFileSystemNameBuffer[260];
6
GetVolumeInformation("C:\\", szVolumeName, 260, &dwVolumeSerialNumber, &dwMaximumComponentLength, 
&dwFileSystemFlags, szFileSystemNameBuffer, 260);
7
滴水逆向课程笔记  –  Win32
文件系统  –  103
22.2 目录相关API
22.2.1 创建目录
函数CreateDirectory用于创建目录，其语法格式如下：
在C盘下创建test目录：
22.2.2 删除目录
函数RemoveDirectory用于删除目录，其语法格式如下：
BOOL CreateDirectory(
1
  LPCTSTR lpPathName,                         // directory name 目录名称，需要指定完整路径包含盘符的
2
  LPSECURITY_ATTRIBUTES lpSecurityAttributes  // SD 安全属性，包含安全描述符
3
);
4
// 创建目录，如果不指定绝对路径，则默认会在程序当前目录下
1
CreateDirectory(TEXT("C:\\test"), NULL);
2
滴水逆向课程笔记  –  Win32
文件系统  –  104
删除C盘下的test目录：
22.2.3 修改目录名称（移动）
函数MoveFile用于修改目录名称（移动），其语法格式如下：
将C盘下的test文件夹重命名为test1，也可以理解为以新的名称移动到新的目录下：
BOOL RemoveDirectory(
1
  LPCTSTR lpPathName   // directory name 目录名称，需要指定完整路径包含盘符的
2
);
3
// 删除目录
1
RemoveDirectory(TEXT("C:\\test"));
2
BOOL MoveFile(
1
  LPCTSTR lpExistingFileName, // file name 目录名
2
  LPCTSTR lpNewFileName       // new file name 新目录名
3
);
4
// 修改目录名称（移动）
1
MoveFile(TEXT("C:\\test"), TEXT("C:\\test1"));
2
滴水逆向课程笔记  –  Win32
文件系统  –  105
22.2.4 获取程序当前目录
函数GetCurrentDirectory用于获取程序当前目录，其语法格式如下：
滴水逆向课程笔记  –  Win32
文件系统  –  106
示例代码：
22.2.5 设置程序当前目录
函数SetCurrentDirectory用于设置程序当前目录，其语法格式如下：
示例代码：
DWORD GetCurrentDirectory(
1
  DWORD nBufferLength,  // size of directory buffer 输入类型，获取当前目录名的大小
2
  LPTSTR lpBuffer       // directory buffer 输出类型，当前目录名称
3
);
4
// 获取程序当前目录
1
TCHAR dwOutDirectory[200];
2
GetCurrentDirectory(200, dwOutDirectory);
3
BOOL SetCurrentDirectory(
1
  LPCTSTR lpPathName   // new directory name 新的目录名称
2
);
3
// 设置程序当前目录
1
SetCurrentDirectory(TEXT("C:\\test"));
2
滴水逆向课程笔记  –  Win32
文件系统  –  107
22.3 文件相关API
22.3.1 创建文件
函数CreateFile用于创建文件，其语法格式如下：
以可读可写方式不管有没有，有就覆盖没有就新建的方式创建一个隐藏文件：
HANDLE CreateFile(
1
  LPCTSTR lpFileName,                         // file name 文件名
2
  DWORD dwDesiredAccess,                      // access mode 访问模式
3
  DWORD dwShareMode,                          // share mode 共享模式，如果为0则是排他性，就是目前在使用时
其他人是无法使用的
4
  LPSECURITY_ATTRIBUTES lpSecurityAttributes, // SD 安全属性，包含安全描述符
5
  DWORD dwCreationDisposition,                // how to create 如何创建，可以打开一个已经存在的文件
6
  DWORD dwFlagsAndAttributes,                 // file attributes 文件属性，可以创建隐藏文件
7
  HANDLE hTemplateFile                        // handle to template file 
8
);
9
// 创建文件
1
CreateFile(TEXT("C:\\A.txt"), GENERIC_READ|GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, 
FILE_ATTRIBUTE_HIDDEN, NULL);
2
滴水逆向课程笔记  –  Win32
文件系统  –  108
22.3.2 关闭文件
函数CloseHandle用于关闭文件，其语法格式如下：
22.3.3 获取文件大小
函数GetFileSize用于获取文件大小，其语法格式如下：
BOOL CloseHandle(
1
  HANDLE hObject   // handle to object 文件句柄
2
);
3
滴水逆向课程笔记  –  Win32
文件系统  –  109
示例代码如下：
22.3.4 获取文件的属性和信息
函数GetFileAttributes、GetFileAttributesEx用于获取文件的属性和信息，其语法格式如下：
示例代码如下：
DWORD GetFileSize(
1
  HANDLE hFile,           // handle to file 输入类型，文件句柄
2
  LPDWORD lpFileSizeHigh  // high-order word of file size，输出类型，高32位的文件大小，这个没有用，长度一
般在低32位中，也就是当前函数的返回值
3
);
4
// 创建文件
1
HANDLE hFile = CreateFile(TEXT("C:\\A.txt"), GENERIC_READ, 0, NULL, OPEN_EXISTING, 
FILE_ATTRIBUTE_NORMAL, NULL);
2
// 获取文件大小，单位是字节
3
DWORD lpFileSizeHigh;
4
DWORD dwLow = GetFileSize(hFile, &lpFileSizeHigh);
5
// 关闭文件
6
CloseHandle(hFile);
7
DWORD GetFileAttributes( // 这个仅能获取属性
1
  LPCTSTR lpFileName   // name of file or directory 文件或目录的名称
2
);
3
4
BOOL GetFileAttributesEx( // 这个可以获取属性、信息
5
  LPCTSTR lpFileName,                   // file or directory name 输入类型，文件或目录的名称
6
  GET_FILEEX_INFO_LEVELS fInfoLevelId,  // attribute class 输入类型，这个只有GetFileExInfoStandard一
个值
7
  LPVOID lpFileInformation              // attribute information 输出类型，文件属性和信息的结果
8
);
9
滴水逆向课程笔记  –  Win32
文件系统  –  110
22.3.5 读/写/拷贝/删除文件
函数ReadFile、WriteFile、CopyFile、DeleteFile用于读/写/拷贝/删除文件，其语法格式如下：
WIN32_FILE_ATTRIBUTE_DATA data; // 定义一个结构体
1
2
GetFileAttributesEx(TEXT("C:\\A.txt"), GetFileExInfoStandard, &data); // 传递结构体指针
3
滴水逆向课程笔记  –  Win32
文件系统  –  111
示例代码如下（举一反三）：
BOOL ReadFile( // 读取文件
1
  HANDLE hFile,                // handle to file 文件句柄
2
  LPVOID lpBuffer,             // data buffer 输出类型，数据放哪
3
  DWORD nNumberOfBytesToRead,  // number of bytes to read 要读多少字节
4
  LPDWORD lpNumberOfBytesRead, // number of bytes read 真正读多少字节
5
  LPOVERLAPPED lpOverlapped    // overlapped buffer
6
);
7
8
BOOL WriteFile( // 写入文件
9
  HANDLE hFile,                    // handle to file 文件句柄
10
  LPCVOID lpBuffer,                // data buffer 要写入的数据在哪
11
  DWORD nNumberOfBytesToWrite,     // number of bytes to write 要写多少字节
12
  LPDWORD lpNumberOfBytesWritten,  // number of bytes written 真正写多少字节
13
  LPOVERLAPPED lpOverlapped        // overlapped buffer
14
);
15
16
BOOL CopyFile( // 拷贝文件
17
  LPCTSTR lpExistingFileName, // name of an existing file 已经存在的文件
18
  LPCTSTR lpNewFileName,      // name of new file 复制的文件
19
  BOOL bFailIfExists          // operation if file exists FALSE则复制位置的文件已经存在就覆盖，TRUE反之
20
);
21
22
BOOL DeleteFile( // 删除文件
23
  LPCTSTR lpFileName   // file name 文件名
24
);
25
#include 
1
#include 
2
3
int main(int argc, char* argv[])
4
{
5
    HANDLE hFile = CreateFile(TEXT("C:\\A.txt"), GENERIC_READ, 0, NULL, OPEN_EXISTING, 
FILE_ATTRIBUTE_NORMAL, NULL);
6
    // 读取文件
7
    // 1. 分配空间
8
    DWORD lpFileSizeHigh;
9
    DWORD fileSize = GetFileSize(hFile, &lpFileSizeHigh);
10
    LPSTR pszBuffer = (LPSTR)malloc(fileSize);
11
    ZeroMemory(pszBuffer, fileSize);
12
    // 2. 设置当前读取的位置
13
    // 文件句柄、第几个开始读、高32位、从文件最开始的位置
14
    SetFilePointer(hFile, 0, NULL, FILE_BEGIN);
15