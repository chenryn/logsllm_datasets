 printf(") for %s\n", string);
 #endif
 ...
PostgreSQL trace和debug
 消息可以输出到哪些地方
 日志文件
 log_destination = 'csvlog' # Valid values are combinations of
 # stderr, csvlog, syslog, and eventlog,
 # depending on platform. csvlog
 # requires logging_collector to be on.
 log_directory = '/mnt/csvlog' # directory where log files are written,
 # can be absolute or relative to PGDATA
 #log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log' # log file name pattern,
 # can include strftime() escapes
 客户端
PostgreSQL trace和debug
 日志文件以及客户端消息过滤级别
 #client_min_messages = notice # values in order of decreasing detail: 客户端消息过滤级别
 # debug5
 # debug4
 # debug3
 # debug2
 # debug1
 # log
 # notice
 # warning
 # error
 #log_min_messages = warning # values in order of decreasing detail: 日志文件消息过滤级别
 # debug5
 # debug4
 # debug3
 # debug2
 # debug1
 # info
 # notice
 # warning
PostgreSQL trace和debug
 # error
 # log
 # fatal
 # panic
 #log_min_error_statement = error # values in order of decreasing detail: // 针对引起错误的日志, 是否记录引起错误的SQL语句的过滤级别.
 # debug5
 # debug4
 # debug3
 # debug2
 # debug1
 # info
 # notice
 # warning
 # error
 # log
 # fatal
 # panic (effectively off)
PostgreSQL trace和debug
 log_min_error_statement测试 :
 digoal=# show log_min_error_statement;
 log_min_error_statement
 -------------------------
 error
 (1 row)
 digoal=# show log_min_error_statements;
 ERROR: unrecognized configuration parameter "log_min_error_statements"
 查看日志文件postgresql-2014-04-01_000000.csv, 记录了SQL
 2014-04-01 18:39:35.758 CST,"postgres","digoal",16752,"[local]",533a975b.4170,3,"SHOW",2014-04-01 18:39:23
CST,1/207,0,ERROR,42704,"unrecognized configuration parameter ""log_min_error_statements""",,,,,,"show
log_min_error_statements;",,"GetConfigOptionByName, guc.c:6946","psql"
PostgreSQL trace和debug
 log_min_error_statement测试 :
 改成fatal
 digoal=# set log_min_error_statement=fatal;
 SET
 digoal=# show log_min_error_statements;
 ERROR: unrecognized configuration parameter "log_min_error_statements"
 查看csvlog, 该错误消息, 不记录SQL.
 2014-04-01 18:40:20.440 CST,"postgres","digoal",16752,"[local]",533a975b.4170,4,"SHOW",2014-04-01 18:39:23
CST,1/210,0,ERROR,42704,"unrecognized configuration parameter
""log_min_error_statements""",,,,,,,,"GetConfigOptionByName, guc.c:6946","psql"
PostgreSQL trace和debug
 把客户端的日志打印级别改为error, 那么notice级别的消息将不会被打印.
 digoal=# set client_min_messages=error;
 SET
 digoal=# do language plpgsql $$
 digoal$# declare
 digoal$# begin
 digoal$# raise notice 'this is a test.';
 digoal$# end;
 digoal$# $$;
 DO
PostgreSQL trace和debug
 把客户端的日志打印级别改为notice, 那么这个例子的notice级别的消息会被打印出来.
 digoal=# set client_min_messages=notice;
 SET
 digoal=# do language plpgsql $$
 declare
 begin
 raise notice 'this is a test.';
 end;
 $$;
 NOTICE: this is a test.
 DO
 因此要输出最详细的全局信息, 把log_min_messages设置为debug5,
 如果要得到当前会话的最详细的信息, 把client_min_messages设置为debug5即可.
PostgreSQL trace和debug
 其他配置
 日志中包含代码信息
 log_error_verbosity = verbose # terse, default, or verbose messages
 客户端消息包含代码信息
 \set VERBOSITY verbose
 例如 :
 digoal=# \set VERBOSITY verbose
 digoal=# show log_min_error_statements;
 ERROR: 42704: unrecognized configuration parameter "log_min_error_statements"
 LOCATION: GetConfigOptionByName, guc.c:6946 -- 输出以上信息的代码位置
PostgreSQL trace和debug
 不需要开启某些宏的trace 和 debug举例
 1. 跟踪排序
 digoal=# set client_min_messages=log;
 digoal=# set trace_sort=on;
 digoal=# \set VERBOSITY verbose
 digoal=# select count(*) from (select * from pg_class order by relpages) t;
 LOG: 00000: begin tuple sort: nkeys = 1, workMem = 1024, randomAccess = f
 LOCATION: tuplesort_begin_heap, tuplesort.c:617
 LOG: 00000: performsort starting: CPU 0.00s/0.00u sec elapsed 0.00 sec
 LOCATION: tuplesort_performsort, tuplesort.c:1319
 LOG: 00000: performsort done: CPU 0.00s/0.00u sec elapsed 0.00 sec
 LOCATION: tuplesort_performsort, tuplesort.c:1394
 LOG: 00000: internal sort ended, 105 KB used: CPU 0.00s/0.00u sec elapsed 0.00 sec
 LOCATION: tuplesort_end, tuplesort.c:932
 count
 -------
 296
 (1 row)
PostgreSQL trace和debug
 2. 跟踪执行计划
 digoal=# set client_min_messages=log;
 digoal=# set debug_pretty_print = on;
 digoal=# \set VERBOSITY verbose
 digoal=# set debug_print_parse=on;
 digoal=# select count(*) from (select * from pg_class order by relpages) t;
 LOG: parse tree:
 DETAIL: {QUERY
 ... 略
 digoal=# set debug_print_rewritten = on;
 LOG: rewritten parse tree:
 DETAIL: (
 {QUERY
 ... 略
 digoal=# set debug_print_plan = on;
 digoal=# select count(*) from (select * from pg_class order by relpages) t;
 LOG: plan:
 DETAIL: {PLANNEDSTMT
 :commandType 1
 ... 略
PostgreSQL trace和debug
 3. 跟踪死锁
 SESSION A :
 digoal=# create table t(id int, info text);
 digoal=# insert into t values (1,'test'),(2,'test');
 INSERT 0 2
 digoal=# begin;
 BEGIN
 digoal=# update t set info='new' where id=1;
 UPDATE 1
 SESSOIN B :
 digoal=# begin;
 BEGIN
 digoal=# update t set info='new' where id=2;
 UPDATE 1
 digoal=# update t set info='new' where id=1;
 SESSION A :
 digoal=# update t set info='new' where id=2;
 ERROR: deadlock detected
 DETAIL: Process 6173 waits for ShareLock on transaction 3268512748; blocked by process 6214.
 Process 6214 waits for ShareLock on transaction 3268512747; blocked by process 6173.
 HINT: See server log for query details.
PostgreSQL trace和debug
 4. 跟踪锁超时SQL
 log_lock_waits = on
 deadlock_timeout = 1s
 SESSION A :
 digoal=# begin;
 BEGIN
 digoal=# update t set info='new' where id=1;
 UPDATE 1
 SESSION B :
 digoal=# set client_min_messages=log;
 SET
 digoal=# begin;
 BEGIN
 digoal=# update t set info='new' where id=1;
 LOG: statement: update t set info='new' where id=1;
 LOG: process 6499 still waiting for ShareLock on transaction 3268512749 after 1000.177 ms
PostgreSQL trace和debug
 5. 跟踪超时SQL
 log_min_duration_statement = 100ms # 记录执行时间超过100毫秒的SQL
 6. 跟踪检查点,连接和断开连接信息
 log_checkpoints = on
 log_connections = on
 log_disconnections = on
PostgreSQL trace和debug
 通过宏开关, 开启某些信息的输出.
 [root@db-172-16-3-150 postgresql-9.3.3]# vi src/Makefile.custom
 CFLAGS+=-DLOCK_DEBUG
 CFLAGS+=-DBTREE_BUILD_STATS
 CFLAGS+=-DWAL_DEBUG
 CFLAGS+=-DOPTIMIZER_DEBUG
 CFLAGS+=-DGEQO_DEBUG
 CFLAGS+=-DCOPY_PARSE_PLAN_TREES
 CFLAGS+=-DTRACE_SYNCSCAN
 重新配置编译安装, 使用已有的配置选项($PGSRC/config.log)
 configure
 make && make install
 确认已使用定义的宏.
 pg_config
 CFLAGS = -O2 -Wall -Wmissing-prototypes -Wpointer-arith -Wdeclaration-after-statement -Wendif-labels -Wmissing-format-attribute -Wformat-
security -fno-strict-aliasing -fwrapv -g -DLOCK_DEBUG -DBTREE_BUILD_STATS -DWAL_DEBUG -DOPTIMIZER_DEBUG -
DGEQO_DEBUG -DCOPY_PARSE_PLAN_TREES -DTRACE_SYNCSCAN
PostgreSQL trace和debug
 1. 跟踪btree索引建立时的资源开销信息
 digoal=# create table test(id int, info text);
 digoal=# set client_min_messages=log;
 digoal=# insert into test select generate_series(1,100000),'test';
 LOG: statement: insert into test select generate_series(1,100000),'test';
 INSERT 0 100000
 digoal=# set log_btree_build_stats =on; -- 在当前会话打开隐含参数.
 SET
 digoal=# \set VERBOSITY verbose
 digoal=# create index idx_test_1 on test(id);
 LOG: 00000: statement: create index idx_test_1 on test(id);
 LOCATION: exec_simple_query, postgres.c:890