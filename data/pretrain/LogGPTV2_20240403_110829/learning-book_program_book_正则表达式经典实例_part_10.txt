用，那么也可以在一个字符类中不对其使用转义，而把它们作为字面字符来使用。例
如，用[][^-]就可以，唯一例外的情形是你所使用的正好是严格遵循标准的JavaScript
实现。但是，我们还是推荐你总是对这些元字符进行转义，因此前面的正则表达式应
该总是使用-]的形式。在使用中总是对元学符进行转义会使你的正则表达式更加
容易让人理解。
字母数字字符则不能使用反斜杠来转义。如果这样做的话，要么会出现一个错误，要
么会创建一个正则表达式记号（也就是在正则表达式中含有特殊含义的语法符号）。在
类之内使用。所有这些记号都由反斜杠和一个字母组成，有时候后面还会跟一堆其他
字符。因此，rin]>会匹配一个回车符（r）或者换行符（in)。
如果紧跟着左括号后面是一个脱字符（~）的话，那么就会对整个字符类取否。也就是
说它会匹配不属于该字符类列表中的任意字符。一个否定字符类会匹配换行符号，除
非把换行符也加入到否定字符类中。
连字符（-）被放到两个字符之间的时候就会创建一个范围（range）。该范围所组成的
字符类包含连字符之前的字符、连字符之后的字符，以及按照字母表顺序位于这两个
字符之间的所有字符。要想知道一个范围中到底包含了哪些字符，需要查看ASCII或
者Unicode字符表。[A-z]包含在ASCⅡI表中在大写A到小写z之间的所有字符。注
30第2章
www.TopSage.com
---
## Page 47
相同的学符集合。我们推荐你所创建的范围只位于两个数字，或者两个同是大写或者
小写的字母之间。反向的范围，例如[z-a]>，是不允许的。
变体
简写
[a-fA-F\d]
正则选项：无
正则流派：.NET、Java、PCRE、Perl、Python、Ruby
由反斜杠和一个字母组成的6个正则表达式记号会构成简写（shorthand）字符类。你
可以在字符类之内或者之外使用这些记号。都会匹配单个数字。每个小写的
简写字符都拥有一个相关联的大写简写字符，其含义正好相反。因此会匹配不是
数字的任意字符，所以同[d]>是等价的。
则会匹配不属于上述字符集合的任意字符。
在Java、JavaScript、PCRE和Ruby中，（lw>总是与的含义完全相同。而
在.NET和Perl中，它包含来自所有其他字母表（西里尔语、泰语等）的字母和数字。
在Python中，只有当你在创建正则表达式时传递了相关选项时，才会包含其他字母表
的字符。在上述这些流派中，（\d遵循相同的规则。在.NET和Perl中，其他字母表中
包含它们。
s>匹配任意的空白字符（whitespacecharacter）。其中包括了空格、制表符和换行符。
在.NET、Perl和JavaScript中，（\s>也会匹配根据Unicode标准被定义为空白符号的字
符。需要注意的是JavaScript对于使用Unicode，而对于和则使用ASCII
标准。八S>会匹配s不能匹配的任意字符。
当我们还要考虑\b>的时候，就会遇到更多的不一致性。\b>不是一个简写字符类，而
是一个字符边界。虽然你可以会期望当支持ASCII的时候，\b>也应该是只使用ASCⅡI，然而事实上却
不总是如此。在实例2.6中的“单词字符”小节中会介绍更多的细节。
区分大小写
(?i) [A-F0-9]
正则选项：无
正则流派：.NET、Java、PCRE、Perl、Python、Ruby
正则表达式的基本技巧
31
www.TopSage.com
---
## Page 48
(?i)[^A-F0-9]
正则选项：无
正则流派：.NET、Java、PCRE、Perl、Python、Ruby
区分大小写也会影响字符类，它可以使用一个外部选项来设置（参见实例3.4），也可
以在正则表达式内采用模式修饰符来设置（参见实例2.1）。上面给出的这两个正则表
达式与最初的解答是等价的。
JavaScript也采用类相同的规则，但是它并不支持。
当采用了Unicode的属性、区块和字母表时，字符类差（subtraction）会尤为有用。举
例来说，p{IsThai}>会匹配在Thai语区块中的任意字符。P{N}>则匹配不拥有Number
属性的任意字符。把二者使用字符类差组合起来，p{lsThai}-P{N]]>就可以匹配任
意的10个泰语数字字符。
Java字符类并、差和交集
[a-f[A-F][0-9]]
[a-f[A-F[0-9]]]
Java支持把一个字符类嵌套在另外一个类中。如果嵌套类是直接包含的，则结果是两
个字符类的并（union)。你可以嵌套任意多的类。上面给出的两个正则表达式与最初所
给的不含多余方括号的正则表达式拥有完全相同的效果。
[\w&& [a-fA-FO-9\s]]
如果举办一个正则表达式猜谜大赛，那么上面这个式子很可能会得奖。这里的基本字
符类可以匹配任意单词字符。嵌套类则会匹配任意十六进制数字与任意空白字符。最
后所得到的类则是这两个类的交集（intersection），只会匹配十六进制的数字。因为基
类并不匹配空白字符，而嵌套类不能匹配会匹配在Thai语区块中的任意字符，而则会匹配不拥有Number属
性的任意字符。那么，p{InThai&&[P{N}]就可以匹配任意的10个泰语数字字符。
如果你想了解在正则记号中可能会存在的细微差别，请参考实例2.7中的讲解。
参见
实例2.1、2.2和2.7。
2.4匹配任意字符
问题描述
匹配一个被单引号包住的字符。先给出一种解决方案允许在引号之间出现除了换行符
之外的任意单个字符。再给出另外一种解决方案真正允许出现任意字符，包括换行符
在内。
解决方案
除了换行符之外的任意字符
正则选项：无（“点号匹配换行符”选项必须关闭）
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
包含换行符在内的任意字符
正则选项：点号匹配换行符
正则流派：.NET、Java、PCRE、Perl、Python、Ruby
[\s\S]'
正则选项：无
正则流派：JavaScript
讨论
除了换行符之外的任意字符
点号是最古老也是最简单的正则表达式特性之一。它的含义永远是匹配任意单个字符。
然而，对于任意字符到底意味着什么则存在一些混淆。用来处理正则表达式的最古老
正则表达式的基本技巧
33
www.TopSage.com
---
## Page 50
的工具在处理文件时是逐行处理的，因此，从来不可能在目标文本中出现包含换行符
的情形。在本书中讨论的编程语言则会把目标文本当作一个整体来处理，而不去管其
中到底会包含多少个换行符。如果想要使用真正的逐行处理，那么你就必须编写一些
代码来把目标文本分割成包含单个文本行的数组，然后把正则表达式应用到该数组中
的每行之上。下一章中的实例3.21会讲解这样做的方法。
Perl语言的开发者LarryWall希望Perl能够保留基于文本行的工具的传统行为，也就是
点号拥有不会匹配换行符（n)。本书中讨论的所有其他流派也都采取了相同的策略。
因此，（>会匹配除了换行字符之外的任意单个字符。
包含换行符在内的任意字符
行符”的选项。这个选项可能会存于不同的名称之下。Per1以及许多其他流派会把它称
作“单行（singleline）”模式，这听起来有些让人摸不着头脑：而在Java中则把它称为
"dotall”模式。下一章中的实例3.4会介绍所有的细节。不管在你所喜爱的编程语言中
这个选项所用的名称是什么，都可以把它当作是“点号匹配换行符”模式。因为这就
是该选项的确切含义。
而对于JavaScript来说，就需要使用另外一种解决方案，因为在其中并不包含“点号匹
配换行符”的选项。按照在实例2.3中的讲解，（s>会匹配任意空白字符，S而则会
匹配不能匹配的任意字符。把这二者组合起来构成和{w\W]>也会产生同
样的效果。
点号的滥用
点号是最经常被滥用的正则表达式特性。例如，dd.dd.dd并不是用来匹配日期的好
方法。它的确会匹配到05/16/08，但是它同时也会匹配99/99/99。更为甚者，它还会匹
配12345678。
如何使用一个正则表达式来只匹配合法的日期会在后面的章节中讲解。然而显然把点
号替换成一个更合适的字符类是非常容易的。<\d\d[/-Jdd[/-Jd\d允许使用正向斜杠、
点号或者连字符来作为日期分隔符。这个正则表达式还是会匹配99/99/99，但是至少不
会再匹配12345678。
虽然在前面的例子中，字符类之内包含了一个点号，但这只是一个巧合。
式中之所以会包含点号，是因为在一些国家（例如德国），点号会被用来
作为日期分隔符。
34第2章
www.TopSage.com
---
## Page 51
最好只有当你确实想要允许出现任意字符时，才使用点号。而在任何其他场合，都应
当使用一个字符类或者是否定字符类来实现。
变体
(?s) '.
正则选项：无
正则流派：.NET、Java、PCRE、Perl、Python
正则选项：无
正则流派：Ruby
如果在正则表达式之外打开了“点号匹配换行符”模式，那么你可以在正则表达式的
开始处放-个模式修饰符。在实例2.1中的“不区分大小写的匹配”小节中，我们已经
介绍了模式修饰符的概念，并且也知道了JavaScript并不会对此提供支持。
在.NET、Java、PCRE、Perl和Python中，（?s)是用于“点号匹配换行符”模式的模
式修饰符。这里的s代表的是“singleline（单行）”模式，也就是在Perl中给“点号匹
配换行符”所起的令人很容易混淆的名字。
这个术语看起来实在很容易让人感到混淆，并因此造成了Ruby的正则引擎开发者在复
制它的时候搞错了。Ruby中使用?m)来打开“点号匹配换行符”模式。除了使用的
字母不同之外，功能是完全一样的。即使在Ruby1.9的新引擎中，依然还在继续使用
参见
实例2.3、3.4和3.21。
2.5匹配文本行起始和/或文本行结尾
问题描述
分别创建4个正则表达式。匹配单词alpha，但是只有当它出现在目标文本最开始的时候。
匹配单词omega，但是只有当它出现在目标文本结尾处的时候。匹配单词begin，但是只有
当它出现在文本行开始处的时候。匹配单词end，但是只有当它出现在文本行结尾的时候。
解决方案
目标文本的开始
^alpha
正则选项：无（“^和$匹配换行处”选项必须关掉）
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python
正则表达式的基本技巧
35
www.TopSage.com
---
## Page 52
\Aalpha
正则选项：无
正则流派：.NET、Java、PCRE、Perl、Python、Ruby
目标文本的结尾
omega$
正则选项：无（“和$匹配换行处”选项必须关摔）
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python
omega\z
正则选项：无
正则流派：.NET、Java、PCRE、Perl、Python、Ruby
一行开始
^begin
正则选项：和$匹配换行处
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
一行结尾
end$
正则选项：^和S匹配换行处
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby