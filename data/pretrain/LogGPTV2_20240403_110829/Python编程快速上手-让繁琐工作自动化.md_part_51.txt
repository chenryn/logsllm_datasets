的程序可以打印“Press Ctrl-C to cancel”，然后用try和except语句处理所有
KeyboardInterrupt异常。
 对于长期的倒计时，可以用timedelta对象来测量直到未来某个时间点（生日？
周年纪念？）的天、时、分和秒数。
15.10 小结
对于许多编程语言，包括 Python，Unix 纪元（1970年 1 月 1日午夜，UTC）
是一个标准的参考时间。虽然 time.time()函数模块返回一个Unix纪元时间戳（也
就是自Unix纪元以来的秒数的浮点值），但datetime模块更适合执行日期计算、格
第15章 保持时间、计划任务和启动程序
式化和解析日期信息的字符串。
time.sleep()函数将阻塞（即不返回）若干秒。它可以用于在程序中暂停。但如
果想安排程序在特定时间启动，http://nostarch.com/automatestuff/上的指南可以告
诉你如何使用操作系统已经提供的调度程序。
threading 模块用于创建多个线程，如果需要下载多个文件或同时执行其他任务，
这非常有用。但是要确保线程只读写局部变量，否则可能会遇到并发问题。
最后，Python程序可以用subprocess.Popen()函数，启动其他应用程序。命令行
参数可以传递给Popen()调用，用该应用程序打开特定的文档。另外，也可以用Popen()
启动start、open或see程序，利用计算机的文件关联，自动弄清楚用来打开文件的
应用程序。通过利用计算机上的其他应用程序，Python程序可以利用它们的能力，
满足你的自动化需求。
15.11 习题
1．什么是Unix纪元？
2．什么函数返回自Unix纪元以来的秒数？
3．如何让程序刚好暂停5秒？
4．round()函数返回什么？
5．datetime对象和timedelta对象之间的区别是什么？
6．假设你有一个函数名为 spam()。如何在一个独立的线程中调用该函数并运
行其中的代码？
7．为了避免多线程的并发问题，应该怎样做？
8．如何让Python程序运行C:\ Windows\System32文件夹中的calc.exe程序？
15.12 实践项目
作为实践，编程完成下列任务。
15.12.1 美化的秒表
扩展本章的秒表项目，让它利用 rjust()和ljust()字符串方法来“美化”的输出。
（这些方法在第6章中介绍过）。输出不是像这样：
Lap #1: 3.56 (3.56)
Lap #2: 8.63 (5.07)
Lap #3: 17.68 (9.05)
Lap #4: 19.11 (1.43)
…而是像这样：
Python编程快速上手——让繁琐工作自动化
Lap # 1: 3.56 ( 3.56)
Lap # 2: 8.63 ( 5.07)
Lap # 3: 17.68 ( 9.05)
Lap # 4: 19.11 ( 1.43)
请注意，对于lapNum、lapTime和totalTime等整型和浮点型变量，你需要字符
串版本，以便对它们调用字符串方法。接下来，利用第6章中介绍的pyperclip模块，
将文本输出复制到剪贴板，以便用户可以将输出快速粘贴到一个文本文件或电子邮
件中。
15.12.2 计划的Web 漫画下载
编写一个程序，检查几个Web漫画的网站，如果自该程序上次访问以来，漫画
有更新，就自动下载。操作系统的调度程序（Windows上的Task Scheduler，OS X上
的launchd，以及Linux上的cron）可以每天运行你的Python程序一次。Python程
序本身可以下载漫画，然后将它复制到桌面上，这样很容易找到。你就不必自己查
看网站是否有更新（在http://nostarch.com/automatestuff/上有一份Web漫画的列表）。
第15章 保持时间、计划任务和启动程序
16
第 章
发送电子邮件和短信
检查和答复电子邮件会占用大量的时间。当然，你不能只
写一个程序来处理所有电子邮件，因为每个消息都需要有自己
的回应。但是，一旦知道怎么编写收发电子邮件的程序，就可
以自动化大量与电子邮件相关的任务。
例如，也许你有一个电子表格，包含许多客户记录，希望
根据他们的年龄和位置信息，向每个客户发送不同格式的邮
件。商业软件可能无法做这一点。好在，可以编写自己的程序
来发送这些电子邮件，节省了大量复制和粘贴电子邮件的时间。
也可以编程发送电子邮件和短信，即使你远离计算机时，也能通知你。如果要
自动化的任务需要执行几个小时，你不希望每过几分钟就回到计算机旁边，检查程
序的状态。相反，程序可以在完成时向手机发短信，让你在离开计算机时，能专注
于更重要的事情。
16.1 SMTP
正如HTTP是计算机用来通过因特网发送网页的协议，简单邮件传输协议（SMTP）
是用于发送电子邮件的协议。SMTP 规定电子邮件应该如何格式化、加密、在邮件服
务器之间传递，以及在你点击发送后，计算机要处理的所有其他细节。但是，你并不
需要知道这些技术细节，因为Python的smtplib模块将它们简化成几个函数。
SMTP 只负责向别人发送电子邮件。另一个协议，名为 IMAP，负责取回发送
给你的电子邮件，在16.3节“IMAP”中介绍。
16.2 发送电子邮件
你可能对发送电子邮件很熟悉，通过Outlook、Thunderbird或某个网站，如Gmail
或雅虎邮箱。遗憾的是，Python没有像这些服务一样提供一个漂亮的图形用户界
面。作为替代，你调用函数来执行 SMTP 的每个重要步骤，就像下面的交互式环
境的例子。
注意 不要在IDLE中输入这个例子，因为smtp.example.com、PI:EMAIL、MY_
SECRET_PASSWORD 和 PI:EMAIL 只是占位符。这段代码仅仅勾勒出
Python发送电子邮件的过程。
>>> import smtplib
>>> smtpObj = smtplib.SMTP('smtp.example.com', 587)
>>> smtpObj.ehlo()
(250, b'mx.example.com at your service, [216.172.148.131]\nSIZE 35882577\
n8BITMIME\nSTARTTLS\nENHANCEDSTATUSCODES\nCHUNKING')
>>> smtpObj.starttls()
(220, b'2.0.0 Ready to start TLS')
>>> smtpObj.login('PI:EMAIL', 'MY_SECRET_PASSWORD')
(235, b'2.7.0 Accepted')
>>> smtpObj.sendmail('PI:EMAIL', 'PI:EMAIL', 'Subject: So
long.\nDear Alice, so long and thanks for all the fish. Sincerely, Bob')
{}
>>> smtpObj.quit()
(221, b'2.0.0 closing connection ko10sm23097611pbd.52 - gsmtp')
在下面的小节中，我们将探讨每一步，用你的信息替换占位符，连接并登录到
SMTP服务器，发送电子邮件，并从服务器断开连接。
16.2.1 连接到 SMTP 服务器
如果你曾设置了Thunderbird、Outlook或其他程序，连接到你的电子邮件账户，
你可能熟悉配置SMTP服务器和端口。这些设置因电子邮件提供商而不同，但在网
上搜索“ SMTP设置”，应该能找到相应的服务器和端口。
SMTP 服务器的域名通常是电子邮件提供商的域名，前面加上 SMTP。例如，
Gmail的 SMTP 服务器是 smtp.gmail.com。表 16-1 列出了一些常见的电子邮件提
供商及其 SMTP 服务器（端口是一个整数值，几乎总是 587，该端口由命令加密
标准 TLS使用）。
Python编程快速上手——让繁琐工作自动化
表16-1 电子邮件提供商及其SMTP服务器
提供商 SMTP服务器域名
Gmail smtp.gmail.com
Outlook.com/Hotmail.com smtp-mail.outlook.com
Yahoo Mail smtp.mail.yahoo.com
AT&T smpt.mail.att.net (port 465)
Comcast smtp.comcast.net
Verizon smtp.verizon.net (port 465)
得到电子邮件提供商的域名和端口信息后，调用smtplib.SMTP()创建一个SMTP
对象，传入域名作为一个字符串参数，传入端口作为整数参数。SMTP 对象表示与
SMTP 邮件服务器的连接，它有一些发送电子邮件的方法。例如，下面的调用创建
了一个SMTP对象，连接到Gmail：
>>> smtpObj = smtplib.SMTP('smtp.gmail.com', 587)
>>> type(smtpObj)
输入type(smtpObj)表明，smtpObj中保存了一个SMTP对象。你需要这个SMTP
对象，以便调用它的方法，登录并发送电子邮件。如果 smtplib.SMTP()调用不成
功，你的 SMTP 服务器可能不支持 TLS 端口 587。在这种情况下，你需要利用
smtplib.SMTP_SSL()和465端口，来创建SMTP对象。
>>> smtpObj = smtplib.SMTP_SSL('smtp.gmail.com', 465)
注意 如果没有连接到因特网，Python将抛出socket.gaierror: [Errno 11004] getaddrinfo
failed或类似的异常。
对于你的程序，TLS和SSL之间的区别并不重要。只需要知道你的SMTP服务
器使用哪种加密标准，这样就知道如何连接它。在接下来的所有交互式环境示例中，
smtpObj变量将包含smtplib.SMTP()或smtplib.SMTP_SSL()函数返回的SMTP对象。
16.2.2 发送 SMTP 的“Hello”消息
得到SMTP对象后，调用它的名字古怪的EHLO()方法，向SMTP电子邮件服
务器“打招呼”。这种问候是 SMTP 中的第一步，对于建立到服务器的连接是很重
要的。你不需要知道这些协议的细节。只要确保得到SMTP对象后，第一件事就是
调用ehlo()方法，否则以后的方法调用会导致错误。下面是一个ehlo()调用和返回值
的例子：
>>> smtpObj.ehlo()
(250, b'mx.google.com at your service, [216.172.148.131]\nSIZE 35882577\
n8BITMIME\nSTARTTLS\nENHANCEDSTATUSCODES\nCHUNKING')
第16章 发送电子邮件和短信
如果在返回的元组中，第一项是整数250（SMTP中“成功”的代码），则问候
成功了。
16.2.3 开始TLS加密
如果要连接到SMTP服务器的587端口（即使用TLS加密），接下来需要调用
starttls()方法。这是为连接实现加密必须的步骤。如果要连接到465端口（使用SSL），
加密已经设置好了，你应该跳过这一步。
下面是starttls()方法调用的例子：
>>> smtpObj.starttls()
(220, b'2.0.0 Ready to start TLS')
starttls()让SMTP连接处于TLS模式。返回值220告诉你，该服务器已准备就绪。
16.2.4 登录到 SMTP 服务器
到SMTP服务器的加密连接建立后，可以调用login()方法，用你的用户名（通
常是你的电子邮件地址）和电子邮件密码登录。
>>> smtpObj.login('PI:EMAIL', 'MY_SECRET_PASSWORD')
(235, b'2.7.0 Accepted')
传入电子邮件地址字符串作为第一个参数，密码字符串作为第二个参数。返回值235
表示认证成功。如果密码不正确，Python会抛出smtplib. SMTPAuthenticationError异常。
将密码放在源代码中要当心。如果有人复制了你的程序，他们就能访问你的电
子邮件账户！调用input()，让用户输入密码是一个好主意。每次运行程序时输入密
码可能不方便，但这种方法不会在未加密的文件中留下你的密码，黑客或笔记本电
脑窃贼不会轻易地得到它。
16.2.5 发送电子邮件
登录到电子邮件提供商的 SMTP 服务器后，可以调用的 sendmail()方法来发送
电子邮件。sendmail()方法调用看起来像这样：
>>> smtpObj.sendmail('PI:EMAIL', 'PI:EMAIL',
'Subject: So long.\nDear Alice, so long and thanks for all the fish. Sincerely,
Bob')
{}
sendmail()方法需要三个参数。
 你的电子邮件地址字符串（电子邮件的“from”地址）。
 收件人的电子邮件地址字符串，或多个收件人的字符串列表（作为“to”地址）。
 电子邮件正文字符串。
电子邮件正文字符串必须以'Subject: \n'开头，作为电子邮件的主题行。'\n'换行
Python编程快速上手——让繁琐工作自动化
符将主题行与电子邮件的正文分开。
sendmail()的返回值是一个字典。对于电子邮件传送失败的每个收件人，该字典
中会有一个键值对。空的字典意味着对所有收件人已成功发送电子邮件。
Gmail应用程序专用密码
Gmail有针对谷歌账户的附加安全功能，称为应用程序专用密码。如果当
你的程序试图登录时，收到“需要应用程序专用密码”的错误信息，就必须在
Python脚本设置这样一个密码。具体如何设置谷歌账户的应用程序专用密码，参
见http://nostarch.com/automatestuff/。
16.2.6 从 SMTP 服务器断开
确保在完成发送电子邮件时，调用quit()方法。这让程序从SMTP服务器断开。
>>> smtpObj.quit()
(221, b'2.0.0 closing connection ko10sm23097611pbd.52 - gsmtp')
返回值221表示会话结束。
要复习连接和登录服务器、发送电子邮件和断开的所有步骤，请参阅 16.2节“发
送电子邮件”。
16.3 IMAP
正如SMTP是用于发送电子邮件的协议，因特网消息访问协议（IMAP）规定了如
何与电子邮件服务提供商的服务器通信，取回发送到你的电子邮件地址的电子邮件。
Python带有一个imaplib模块，但实际上第三方的imapclient模块更易用。本章介绍了
如何使用IMAPClient，完整的文档在http://imapclient.readthedocs.org/。
imapclient 模块从 IMAP 服务器下载电子邮件，格式相当复杂。你很可能希望
将它们从这种格式转换成简单的字符串。pyzmail 模块替你完成解析这些邮件的辛
苦工作。在http://www.magiksys.net/pyzmail/可以找到PyzMail的完整文档。
从终端窗口安装 imapclient 和 pyzmail。附录 A 包含了如何安装第三方模块
的步骤。
16.4 用 IMAP 获取和删除电子邮件
在 Python 中，查找和获取电子邮件是一个多步骤的过程，需要第三方模块
imapclient和pyzmail。作为概述，这里有一个完整的例子，包括登录到IMAP服务
器，搜索电子邮件，获取它们，然后从中提取电子邮件的文本。
第16章 发送电子邮件和短信