title:A closer look at keyboard acoustic emanations: random passwords, typing
styles and decoding techniques
author:Tzipora Halevi and
Nitesh Saxena
A Closer Look at Keyboard Acoustic Emanations: Random
Passwords, Typing Styles and Decoding Techniques
ABSTRACT
We take a closer look at keyboard acoustic emanations speciﬁcally
for the purpose of eavesdropping over random passwords. In this
scenario, dictionary and HMM language models are not applicable;
the attacker can only utilize the raw acoustic information which
has been recorded. We investigate several existing signal process-
ing techniques for our purpose, and introduce a novel technique
– time-frequency decoding – that improves the detection accuracy
compared to previous techniques. We also carefully examine the
effect of typing style – a crucial variable largely ignored by prior
research – on the detection accuracy. Our results show that using
the same typing style (hunt and peck) for both training and decod-
ing the data, the best case success rate for detecting correctly the
typed key is 64% per character. The results also show that changing
the typing style, to touch typing, during the decoding stage reduces
the success rate, but using the time-frequency technique, we can
still achieve a success rate of around 40% per character.
Our work takes the keyboard acoustic attack one step further,
bringing it closer to a full-ﬂedged vulnerability under realistic sce-
narios (different typing styles and random passwords). Our results
suggest that while the performance of these attacks degrades un-
der such conditions, it is still possible, utilizing the time-frequency
technique, to considerably reduce the exhaustive search complexity
of retrieving a random password.
Keywords: Keyboard acoustic emanations; random passwords;
signal processing
1.
INTRODUCTION
The attacks based on acoustic emanations produced by electronic
devices have been a known source of concern and present a threat
to user privacy. Speciﬁcally, a few studies demonstrated that the
seemingly conspicuous sounds resulting from keyboard typing can
be used to learn information about the input data. Asonov and
Agrawal [1] were the ﬁrst to extract frequency features from the
sound emanations of different keyboard clicks so as to identify the
different keys used. Their work concluded that the physical plate
beneath the keys causes each key to produce a different sound de-
pending on its location on the plate (similar to hitting a drum at dif-
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
Copyright 20XX ACM X-XXXXX-XX-X/XX/XX ...$10.00.
ferent locations). This makes keyboard typing vulnerable to eaves-
dropping attacks, in which similarities between clicks of the same
key can be used to extract information about the keys pressed and
the resulting data typed by the user.
Zhuang et al. [21, 22] improved upon the attack of [1] by obvi-
ating the need for a labeled training recording. Instead, HMM En-
glish language-based model [9] was used on a 10-minute typed En-
glish text for unsupervised training and labeling of the data (using
neural networks and Mel Frequency Cepstrum Coefﬁcients (MFCC)).
Berger et al. [4] further utilized dictionary attacks to decode 8 let-
ter or longer English words utilizing correlation calculations. Their
work showed that keys which are in close physical proximity on the
keyboard typically have higher cross-correlation than farther ones.
In this paper, we take a fresh look at keyboard acoustic attacks
and aim to address some important aspects that prior work did not
cover or fully explore. First, we systematically investigate the pos-
sibility of eavesdropping over “random” textual passwords via key-
board acoustic emanations. Textual passwords are by far the most
dominant means of user authentication deployed today. Users are
often instructed, and at times forced, to use random passwords [8,
18]. These passwords possess relatively high bit entropy. and em-
ploy random selection of characters. Therefore, in the realm of
eavesdropping over a random password via keyboard acoustic em-
anations, a dictionary attack or an HMM language model is not
useful and prior research is not applicable.1
In addition, we examine the effect of typing style on key detec-
tion and eavesdropping ability. Our hypothesis is that the typing
style has a signiﬁcant effect on the sound produced and can reduce
the sound differences among clicks of different keys (and similar-
ities between separate clicks of the same key). To our knowledge,
ours is the ﬁrst work that speciﬁes the typing style employed in
the experiments and analyzes/quantiﬁes the impact of different typ-
ing styles. Reportedly, previous work has only used the “hunt and
peck” or “search and peck” technique [14, 19]. In this technique,
the typist presses each key individually [16]. However, in real-life
scenarios, many people employ “touch typing” [16].
The remainder of this paper is organized as follows. We start by
deﬁning our threat model in Section 2. We continue in Section 3 by
describing the different techniques used to detect pressed key and
the performance of these techniques. We then describe, in Section
4, our experiments for testing the effect of different typing styles
for eavesdropping over random passwords, followed by the perfor-
mance of our password detection techniques in Section 5. Next, we
discuss and interpret our results in Section 6. Finally, in Section
7, we review some other work related to acoustic emanations and
password attacks.
1HMM model can still be useful for creating the training data, but
not for the actual password guessing/decoding.
Detecting Key Press Regions: We record our signals with a sam-
pling frequency of 44.1 kHz. To detect the beginning of each press,
we calculate (utilizing the Matlab “specgram” command) the Fast
Fourier Transform (FFT) coefﬁcients of the signal using a window
size of 440 samples. We then sum-up the FFT coefﬁcients in the
range of 0.4-22 kHz and use a threshold to detect the beginning of
each keypress (Figure 4 and Figure 5) of the appendix. For detect-
ing the key release (which is quieter), we repeat the process using
a smaller window of 88 samples.
3.2 Existing Techniques
Dynamic Time Warping: Dynamic Time Warping (DTW) is an
algorithm which measures similarities between sequences. We used
the simple distance measure between each two elements in the sig-
nal vectors to calculate the difference between each two recordings.
We implemented the DTW function using C source code for a Mat-
lab executable (MEX)
We experimented using signal normalization based on ampli-
tude, mutual joint distribution [13], and no normalization. We
found that energy-based normalization produced the best results.
We tried using only the push, release or mean of both and found
that the latter provided the best results.
Letter Data Set We created a dataset for each letter. Each Letter
Data Set is made up of n samples that are typed for the cor-
responding alphabet letter.
The DTW technique produces a distance measure between each
two signals. To match each test sample with an alphabet key, we
calculate the average distance between the test character and the
Letter Data Set of each alphabet key and pick as the best match the
one with the smallest value.
Cross-Correlation: We performed the cross-correlation (denoted
X-Corr) between the recorded signals as done in [4]. The signals
were normalized according to their energy, the X-Corr was calcu-
lated for the press and release regions and the mean value of both
was used. For each alphabet key, we took its Letter Data Set and
calculated the average of their cross-correlation measurement with
the test sample, receiving one similarity measurement for each key.
The matching alphabet letter was chosen as the one with the highest
similarity.
Frequency-based Distance Measure: We perform Frequency-domain
Features-based Distance Measure (denoted Freq-Dist) similar to
the one described in [4]. We compute the frequency-based distance
between each two signals by calculating the Euclidean difference
between the features for the press and release parts and average
them to get a distance measure. We calculate the distance between
each test sample and each alphabet Letter Data Set and chose the
letter with the smallest distance.
Frequency Features and Neural Networks: We implemented the
frequency-domain features based technique, using MFCC features
as input to neural networks, as described in [22]. We used 10 ms
windows and an 2.5 window step size , computing 13 MFCC per
window, and examined a total of 40 ms of each press. As per the
original implementation, we utilized Matlab’s newpnn() function
for creating the neural network.
3.3 Performance
The aforementioned techniques were evaluated on the initial dataset,
which was taken with the hunt and peck style (Section 4.1). For
each sample in the initial dataset, the rest of the samples in the
dataset (excluding the test sample) were used as training data. Due
to the relatively high computation requirements for the DTW algo-
rithm, we used only four instances per alphabet letter for training.
Figure 1: Acoustic Signal of a Single Key
2. THREAT MODEL
Our attack model is very similar to the one considered by prior
research on keyboard acoustic emanations [1, 21, 22, 4]. Basically,
we assume that the adversary has installed a hidden audio listening
device very close to the keyboard (or host computer) being used for
user data input. In our experiments, we consider random passwords
consisting of lower-case English alphabets.
Our attack examines in-depth the advantage which an adversary
can obtain by comparing previously taken recordings of known data
to new samples of data. We emulate this scenario by using both
training and testing data typed with the same typing style (this is
done in two typing styles, as discussed in section 4).
Another possibility is that the attacker itself gains access to the
keyboard for a limited amount of time, and uses the hunt and peck
style to capture samples with the natural audio sounds of the key-
board, minimizing the effect of the individual typing style of the
user. For this scenario, our training data is captured in a “mechani-
cal” style (discussed in Section 4.1).
We emphasize that since an HMM language-based model or dic-
tionary can not be used for the attack, and since passwords may be
as short as 6 characters, producing some form of training data is
necessary to eavesdrop over random passwords. Using the training
data, audio information can be extracted about the keyboard and
used later in the password guessing step.
Finally, we assume that the attacker has access to the device or a
service that needs authentication for a limited amount of time. The
attacker is usually allowed to make a certain number of password
trials. We suggest a method of password exhaustive search that
reduces signiﬁcantly the overall search space while increasing the
probability of correct password detection.
Attack Set-Up and Tools: Throughout our experiments, we used a
standard Lenovo keyboard (model JME7053 English) for our typ-
ing, a Logitech USB PC microphone, the Recordpad (V.3.0.3) and
Matlab software. The random password characters were generated
using the Matlab script “char(‘a’ + ceil( rand(1,6) * 26) - 1).”
3. DETECTION TECHNIQUES
To develop our attack algorithms, we started by exploring tech-
niques for the detection of individual keys/characters pressed on
the keyboard.
3.1 Determining Key Press Signal
Keyboard acoustic signals have two distinct regions: push (also
referred to as press) and release (Figure 1), as demonstrated in
[1]. Our experiments showed that depending on the force sustained
while pressing the key, both the push and the release have between
1 to 3 distinct peaks. We tried using different regions sizes for de-
tecting the correlation between same key presses and found that the
best results were obtained for regions of 50 ms.
Table 1: Single Character Detection
Detection Rate
46:15%
73:08%
63:46%
56:73%
82:69%
Method
DTW
Cross-Corr
Freq-Distance
MFCC-Neural Networks
Time-Frequency
We tested the key detection rate (out of 26 alphabet letters) using
each technique.
We found that the cross-correlation technique gave the best re-
sults, with a single key detection rate of 73%. The detection results
can be found in Table 1. All the techniques in the table signiﬁcantly
raise the decoding rates over random guess (which is less then 4%).
The DTW technique gives lower detection results compared to
the correlation algorithm, indicating that the signals do not vary
much in time, and attempting to wrap the signals reduces the dif-
ferences between clicks of different keys.
3.4 New Technique: Time-Frequency Classi-
ﬁcation
In the time-frequency classiﬁcation method (denoted Time-Frq),
we combine both the correlation calculation and the frequency-
based calculations to choose the best-matching letter for each train-
ing letter. We ﬁrst calculate the frequency distance measure F for
each instance, (section 3.2) and X-Corr similarity measurement C.
To combine both elements, we ﬁrst deﬁne the correlation-based
distance DC = 1 − C (so both F and DC are ascending).
We examined a few methods of combining both matrices. We
tried picking the minimum of each value (min(DC; F )) and the
average of the two values (DC; F ). We also looked at (F , DC) as
a point on a 2-D space and calculate the Euclidean distance from
zero. We found that the best results were achieved using the last
method. We therefore use the Euclidean distance as our distance
measure for classifying each key (denoted as T F ), We further de-
ﬁne the time-frequency similarity measure as ST F = 1 − T F and
chose the alphabet letter with the highest similarity to each test
sample.
Using the time-frequency classiﬁcation technique, we get an in-
creased probability of 83% for the training data. We therefore con-
clude that both the frequency and the time data can be used together
to produce better results.
4. EFFECT OF TYPING STYLES
4.1 Datasets
To examine the effect of typing style on detection of pressed
keys, we create three datasets.
Straw Man Approach: Our ﬁrst scenario involves typing each
letter multiple times (continuously) always using the same ﬁnger
before moving to the next letter. A few seconds are allowed before
typing the next letter (similar to the technique used in [1]). This
causes the ﬁnger to hit the key from a vertical position in each case.