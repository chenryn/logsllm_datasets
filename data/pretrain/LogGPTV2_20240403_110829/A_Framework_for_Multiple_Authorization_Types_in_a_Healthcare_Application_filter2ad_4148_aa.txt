title:A Framework for Multiple Authorization Types in a Healthcare Application
System
author:Ramaswamy Chandramouli
A Framework for Multiple Authorization Types  
in a Healthcare Application System 
Ramaswamy Chandramouli 
Computer Security Division, ITL 
NIST, Gaithersburg, MD 20899 
(PI:EMAIL) 
standards.  An  authorization  framework  that  can  provide 
this  critical  functionality  is  proposed  in  this  paper.  The 
framework  is  based  on  a  combination  of  Role-based 
Access  Control  (RBAC)  and  Domain  Type  Enforcement 
(DTE)  access  control  models  augmented  with  a  logic-
driven  authorization  engine.  We  have  used  the  acronym 
DAFMAT 
for 
Multiple Authorization Types) to refer to this framework. 
The  application  of  DAFMAT  to  derive  various  types  of 
authorizations  for  an 
important  class  of  healthcare 
application  system  called  the  Admissions,  Discharge  and 
Transfer System (ADT) is also illustrated in this paper.  
(Dynamic  Authorization  Framework 
The organization of the rest of the paper is as follows: 
We  start  off  by  giving  an  overview  of  the  DAFMAT 
framework by outlining its salient features in section 2. A 
comparison of the approach adopted in this paper to some 
related approaches in the area of authorization frameworks 
is  discussed  in  section  3.  A  detailed  description  of  the 
development of DAFMAT framework is given in section 
4.  The  application  of  the  DAFMAT  framework  for  the 
ADT  system  is  described  in  section  5.  The  assurance 
measures needed for DAFMAT administration are given in 
section  6.  Section  7  presents  conclusions  and  scope  for 
future work. 
2. Underlying Concepts in DAFMAT 
Framework 
The DAFMAT authorization framework consists of 
the following components: 
(a)  An Hybrid Access Control Model and 
(b)   A logic-driven authorization engine.  
The Access Control Model in DAFMAT is a combination 
of RBAC and DTE while the logic-driven authorization 
engine is first order predicate logic-based.  The 
justifications for using a combined RBAC-DTE access        
control model and an augmenting logical inference engine 
are given in the following sections. 
RBAC is a higher-level access control model that uses 
the abstraction concept of roles to reduce the complexity of 
an  authorization  management  scheme  [3].    The  most 
Abstract 
Emergency 
Authorizations, 
In  most  of  the  current  authorization  frameworks  in 
application systems, the authorization for a user operation 
is determined using a static database like ACL entries or 
system  tables.  These  frameworks  cannot  provide  the 
foundation for supporting multiple types of authorizations 
like 
Context-based 
Authorizations  etc,  which  are  required  in  many  vertical 
market systems like healthcare application systems. In this 
paper  we  describe  a  dynamic  authorization  framework 
which  supports  multiple  authorization  types.  We  use  the 
acronym  DAFMAT  (Dynamic  Authorization  Framework 
for  Multiple  Authorization  Types) 
this 
framework. The DAFMAT framework uses a combination 
of Role-based Access Control (RBAC) and Dynamic Type 
Enforcement  (DTE)  augmented  with  a 
logic-driven 
authorization  engine.  The  application  of  DAFMAT  for 
evaluating and determining various types of authorization 
requests  for  the  Admissions,  Discharge  and  Transfer 
System (ADT) in a healthcare enterprise is described. 
to  refer 
to 
1.  Introduction 
The  need 
to  support  sophisticated  authorization 
policies has grown tremendously in the last few years for 
many vertical market applications. For example, healthcare 
application  systems  dealing  with  patient-identifiable 
information  will  shortly  be  required  to  comply  with 
requirements in the HIPAA Security Standards [9]. These 
standards  stipulate  that  healthcare  application  systems 
should  have  features  for  user-based,  role-based  and 
context-based  authorizations  as  well  as  capabilities  for 
making emergency authorizations.  
In  most  of  the  current  authorization  frameworks  in 
application systems, the authorization for a user operation 
is determined using a static database like ACL entries or 
system  tables.  These  frameworks  cannot  provide  the 
foundation for supporting multiple types of authorizations 
like 
Context-based 
Authorizations  etc,  as  required  by  HIPAA  security 
Authorizations, 
Emergency 
important constructs are users, roles and permissions and 
the relations involving these constructs. In RBAC users are 
assigned  to  roles  and  permissions  are  assigned  to  roles. 
Users  derive  all  their  permissions  by  virtue  of  their  role 
memberships.  A  single  user  can  be  assigned  to  multiple 
roles and a single role can be assigned to multiple users. In 
addition we can also define structures for organizing roles 
found within an enterprise (e.g., a hierarchical structure).  
RBAC being a high-level model requires intermediate 
structures to implement its abstraction concepts on lower 
level  access  control  mechanisms  on  a  platform  (e.g., 
permission bits in Unix). A candidate for such a structure 
is a lower level mandatory access control mechanism that 
predates  RBAC  and  is  called  the  Domain  and  Type 
Enforcement  (DTE)  model  [2].  In  DTE  subjects  (or 
transaction  programs)  are  assigned  “Domain”  labels  and 
objects are assigned “Type” labels.  Associated with each 
Domain-Type pair is a set of allowable access modes. The 
data structure that gives the access modes for all Domain-
Type pairs is called the Domain-Type Access Matrix. The 
operations  available  to  a  subject  are  thus  constrained  by 
the domain to which it is assigned.  
Combining DTE with RBAC lends a structure to the 
universe of permissions on a platform by providing ways 
of organizing subjects, objects and operations that are its 
constituent components. More specifically the definition of 
a  domain  in  a  DTE  model  reflects  the  semantics  of 
processes  that  are  relevant  to  the  platform.  Hence  in  the 
DTE model for a Unix operating system the daemons, file 
systems  and  administration  utilities  form  domains.  For 
application systems, a domain can be defined to represent 
a  specific  business  process.  Since  the  role  in  an  RBAC 
model  represents  an  organizational  job  function,  one  or 
more  roles  can  be  assigned  to  a  domain  based  on  policy 
concepts  that  have  gone  into  the  definition  of  the  role. 
Now the business processes are carried out using chunks of 
executable code called transactions.  These transactions are 
embedded  within  programs  called  subjects  that  can  be 
invoked by a user. Hence it follows that the right to invoke 
a  subject  could  be  provided  to  multiple  RBAC  roles 
although the semantics of execution of transactions within 
a subject depends upon the role that operates the subject. 
In other words, the behavior of a subject depends upon the 
role  from  which  it  is  invoked.  Typical  examples  of  such 
subjects  are  Oracle  Stored  Procedures  and  Oracle 
Dictionary Access Routines.  
From  the  above  discussions  it  should  be  clear  that 
since  both  the  execution  logic  for  the  subjects  and  the 
domain  assignment  are  tied  to  the  semantics  of  the  role, 
these  twin  relationships  constrain  the  assignment  of 
subjects to domains. It is these tightly coupled constraints 
that help in the realization of policy concepts which have 
gone into the role definition by helping prevent arbitrary 
assignments  of  subjects  to  roles  which  could  potentially 
defeat the purpose of defining the role in the first place. An 
implementation  of  RBAC  on  a  type-enforced  operating 
system  called  LOCK6  has  been  well  described  by 
Hoffman [5].   
So  far  we  have  discussed  only  the  hybrid  access 
control  model  of  the  DAFMAT  framework.  The  second 
component,  the  logical-driven  authorization  engine,  has 
the following two functions: 
(a)  From  the  user  action  (e.g.,  choosing  a  menu  option 
from  an  application),  formulate  the  authorization 
request 
session-related 
functions. Based on the value of the priority code and 
the  context  variable  in  the  authorization  request 
predicate, the request is designated as one of the three 
types  of  authorization  (Normal,  Emergency  and 
Context-based). 
predicate 
(b)  Using the validation conditions for each authorization 
type,  determine  whether  the  current  authorization 
request is valid. 
engine, 
authorization 
logical-driven 
If the current request has been determined to be valid by 
the 
the 
appropriate  domain  corresponding  to  the  invoked  subject 
(as given in the subject-domain mapping table) is assigned 
to the user session. Based on the activated domain in the 
user  session,  the  actual  object-level  permissions  are  read 
off from the Domain-Type Access Matrix. 
3. Comparison with Related Work 
then 
using 
some 
Combining  RBAC  with  DTE  was  first  illustrated  by 
Hoffman [5]. Making use of the fact that RBAC provides 
good  higher-level  abstraction  mechanisms  for  expressing 
different  types  of  policies  ([8],  [1])  like  the  Principle  of  
Least  Privilege  and  Conflict  of  Interest  etc,  this  work 
illustrated a way of implementing those policies using the 
control mechanisms of DTE on a secure operating system. 
However  Hoffman’s  implementation  is  based  on  static 
associations  between  users,  roles,  subjects  and  domains 
and  did  not  provide  a  mechanism  for  incorporating 
transient  information  since  it  is  not  relevant  from  an 
operating  system  perspective.    Tidswell  and  Potter  [10] 
illustrated  a  method  of  dynamically  changing 
the 
configuration of a DTE Model. They came up with a set of 
Prolog rules for making changes to Domain-Type Access 
Matrix  (adding  or  deleting  new  domains  and  types  or 
changing permission sets for a domain-type pair) in such a 
way that those changes maintain the security level of the 
current  configuration.    Just  like  Hoffman,  Tidswell  and 
Potter’s work is also in the context of an operating system 
(specifically a Unix OS) and hence there was no necessity 
to  incorporate  any  context-based  information  within  the 
Prolog  rules  so  as  to  affect  the  user  permissions  during 
run-time.  Even  in  instances  of  DTE  deployment  for 
application  systems  ([4],  [7])  there  was  no  attempt  to 
incorporate  any  context-based  information.  Hence  in  all 
(d)  DOMAIN and  
(e)  OBJECT-TYPE.  
Roles    in  DAFMAT  framework  represent  job  positions. 
Subjects represent the programs or executables that contain 
transactions  for  carrying  out  business  process  functions 
that a job position demands. Domains represent the higher-
level enterprise functional area within which roles should 
perform.  For  example,  doctor  roles  and  nurse  roles 
perform  within  the  domain  of  patient  care.  The  roles  of 
Lab  Technicians  and  Radiologists  fall  within  the  domain 
of clinical testing. An Object-Type represents a grouping 
of objects carrying related information with reference to an 
application system or a healthcare function. For example a 
Patient-Registration  Type  may  consist  of  a  collection  of 
objects  or  records  pertaining  to  patient  demographic, 
insurance  and  allergies  information.  A  Patient-Clinical 
Type  may  consist  of  a  collection  of  objects  or  records 
pertaining to various clinical tests performed on a patient 
like X-rays, MRIs, EKG, blood tests etc.   
4.2  Relationships among Authorization Entities 
The  relationships  in  DAFMAT  are  mappings  from  a 
set of source authorization entities to target authorization 
entities. There are two types of mappings that are used in 
DAFMAT.  If  several  (two  or  more)  instances  of  source 
entities  map  to  a  single  instance  of  target  entity,  such  a 
mapping  is  designated  as  a  many-to-one  (denoted  by  the 
symbol  N:1)  mapping  and  the  mapping  function  is 
represented  by  the  symbol:  >>_>.    On  the  other  hand,  if 
several  instances  of  source  entities  map  to  several 
instances of target entities, such a mapping is designated as 
a  many-to-many  (denoted  by  the  symbol  M:N)  mapping 
and  the  mapping  function  is  represented  by  the  symbol: 
>>_>>.  In  the  logic  database  (which  is  used  by  the 
authorization  engine)  both 
types  of  mapping  are 
represented as predicates. The predicate corresponding to 
each  of  the  mapping  functions  in  DAFMAT  is  given  in 
parenthesis  in  italicized  font  following  the  mapping 
function representation. 
4.2.1  User-Role Mapping 
In DAFMAT every user is assigned a unique role and 
each role may be assigned several users since a role is a 
semantic construct for a job position within the healthcare 
enterprise.  Hence the user to role mapping is a many-to-
one mapping represented as: 
The  main  authorization  entities 
in  DAFMAT 
UserRole(user) >>-> role                        
(User_Role(user,role))       
     (4.2.1) 
In the above mapping function representation, “UserRole” 
is the name of the mapping function, the parameter “user” 
stands for the source entity USER, the symbol >>-> 
DTE  implementations  that  do  not  incorporate  contextual 
information,  authorizations  are  based  on  entries  in  the 
Domain-Type  Access  Matrix  and 
the  question  of 
classifying  an  individual  authorization  request  does  not 
arise. 
The  authorization  framework  described  in  this  paper 
differs  from  the  approaches  described  in  the  previous 
paragraph in two ways: First, the focus of the authorization 
framework described in this paper is in the context of an 
application  system  and  not  an  operating  system.  The 
second  difference  is  that  with  the  inclusion  of  contextual 