对应服务器的打印信息如图2.21所示。
98
第2章 基础运维
图2.21 服务端运行结果
至此，一个FTP服务器已经搭建完成，大家可以修改ftpserver.py来满足自己的需求。
在此附上用户权限的代码及说明，参见表2-7和表2-8。
表2-7 读权限
代码 说明
e 改变文件目录
l 列出文件
r 从服务器接收文件
表2-8 写权限
代码 说明
a 文件上传
d 删除文件
f 文件重命名
m 创建文件
w 写权限
M 文件传输模式（通过FTP设置文件权限 ）
2.6.2 编写 FTP 客户端程序
在实际应用中可能经常访问FTP服务器来上传或下载文件，Python也可以替我们做这些。
【示例2-28】下面请看一个例子（ftpclient）。
1 # -*- coding: utf-8 -*-
2 # !/usr/local/bin/python
3 # Time: 2018/6/18 22:23:14
4 # Description:
5 # File Name: ftpclients.py
6
7 from ftplib import FTP
8 #登录FTP
9 ftp = FTP(host='localhost',user='user',passwd='12345')
10 #设置编码方式，由于在windows系统，设置编码为gbk
11 ftp.encoding = 'gbk'
12 # 切换目录
13 ftp.cwd('test')
14 #列出文件夹的内容
15 ftp.retrlines('LIST') # ftp.dir()
16 #下载文件 note.txt
99
Python自动化运维快速入门
17 ftp.retrbinary('RETR note.txt', open('note.txt', 'wb').write)
18 #上传文件 ftpserver.py
19 ftp.storbinary('STOR ftpserver.py', open('ftpserver.py', 'rb'))
20 #查看目录下的文件详情
21 for f in ftp.mlsd(path='/test'):
22 print(f)
运行结果如图2.22所示。
图2.22 运行结果
FTP客户端程序的编写还可以参照官方文档，以满足个性化的需求。
2.7
邮件提醒
邮件是互联网上应用非常广泛的服务，几乎所有的编程语言都支持发送和接收电子邮件，
使用 Python 发送邮件和接收邮件也是非常简单易学的。现在几乎每个人的手机上都自带邮件
客户端，多数邮箱都支持短信提醒，因此，在运维场景中将程序报错的信息发送到相应人员的
邮箱可以及时感知程序的报错，尽早处理从而避免更多的损失。当然，使用程序发送邮件还有
许多应用场景，如网站的密码重置等，在此不再一一列举。
2.7.1 发送邮件
关于如何写代码发送邮件，我们应首先想到发送邮件使用什么协议。目前发送邮件的协议
是SMTP（Simple Mail Transfer Protocol，简单邮件传输协议），是一组用于由源地址到目的
地址传送邮件的规则，由它来控制信件的中转方式。我们编写代码，实际上就是将待发送的消
息使用SMTP协议的格式进行封装，再提交SMTP服务器进行发送的过程。
Python 内置的 smtplib 提供了一种很方便的途径发送电子邮件，可以发送纯文本邮件、
HTML邮件及带附件的邮件。Python对SMTP支持有smtplib和email两个模块，email负责构
造邮件，smtplib负责发送邮件。
我们来看一下如何创建SMTP对象。Python创建SMTP对象语法如下：
import smtplib
smtpObj = smtplib.SMTP( [host [, port [, local_hostname]]] )
参数说明：
 host：SMTP 服务器主机，可以指定主机的IP地址或域名，是可选参数。
100
第2章 基础运维
 port：如果提供了host参数，就需要指定SMTP服务使用的端口号，一般情况下SMTP
端口号为25。
 local_hostname：如果SMTP在你的本机上，那么只需要指定服务器地址为localhost 即可。
Python SMTP对象使用sendmail方法发送邮件，其语法如下：
SMTP.sendmail(from_addr, to_addrs, msg[, mail_options, rcpt_options])
参数说明：
 from_addr：邮件发送者地址。
 to_addrs：字符串列表，邮件发送地址。
 msg：发送消息。
第三个参数 msg 是字符串，表示邮件。我们知道邮件一般由标题、发信人、收件人、邮
件内容、附件等组成，发送邮件时，要注意msg的格式。这个格式就是SMTP 协议中定义的
格式。
【示例2-29】构造简单的文本邮件。
from email.mime.text import MIMEText
message = MIMEText('Python 邮件发送测试...', 'plain', 'utf-8')
注意构造MIMEText对象时，第一个参数就是邮件正文，第二个参数是MIME的subtype，
传入plain，最终的MIME就是'text/plain'，最后一定要用UTF-8编码保证多语言兼容性。
在使用 SMTP 发送邮件之前，请确保所用邮箱的 SMTP 服务已开启，例如 163 邮箱，如
图2.23所示。
图2.23 SMTP设置方法
101
Python自动化运维快速入门
【示例2-30】下面使用Python发送第一封简单的邮件（sendmail1.py）。
1 # -*- coding: UTF-8 -*-
2
3 import smtplib
4 from email.mime.text import MIMEText
5
6 # 第三方 SMTP 服务
7 mail_host = "smtp.163.com" # 设置服务器
8 mail_user = "你的邮箱用户名" # 用户名
9 mail_pass = "你的邮箱密码" # 口令
10
11
12 sender = "PI:EMAIL"
13 receivers = ["PI:EMAIL", "PI:EMAIL"] # 接收邮件，可设置为QQ邮箱或其他
邮箱
14
15 message = MIMEText("这是正文：邮件正文......", "plain", "utf-8") # 构造正文
16 message["From"] = sender # 发件人，必须构造，也可以使用Header构造
17 message["To"] = ";".join(receivers) # 收件人列表，不是必须的
18 message["Subject"] = "这是主题：SMTP 邮件测试"
19
20 try:
21 smtpObj = smtplib.SMTP()
22 smtpObj.connect(mail_host, 25) # 25 为 SMTP 端口号
23 smtpObj.login(mail_user, mail_pass)
24 smtpObj.sendmail(sender, receivers, message.as_string())
25 print("发送成功")
26 except smtplib.SMTPException as e:
27 print(f"发送失败,错误原因：{e}")
28
执行以上程序，屏幕上显示“发送成功”的信息后，即可看到收件箱里的邮件，如图2.24
所示。
图2.24 运行结果
读者可能会问，可以发送HTML格式的邮件吗？当然可以，构造正文部分修改如下：
message = MIMEText(
'这是正文标题\
正文内容 超链接...\
',
"html",
"utf-8",
102
第2章 基础运维
) # 构造正文
执行后邮件内容如图2.25所示。
图2.25 运行结果
到这里读者可能会问，如何添加附件呢？请看下面的代码：
1 # -*- coding: utf-8 -*-
2
3 import smtplib
4 from email.mime.text import MIMEText
5 from email.mime.multipart import MIMEMultipart
6 from email.mime.image import MIMEImage
7 from email.header import Header
8
9 # 第三方 SMTP 服务
10 mail_host = "mail.wjrcb.com" # 设置服务器
11 mail_user = "zhengzheng" # 用户名
12 mail_pass = "WQZZ2123" # 口令
13
14
15 sender = "PI:EMAIL"
16 receivers = ["PI:EMAIL", "PI:EMAIL"] # 接收邮件，可设置为QQ邮箱或
其他邮箱
17 message = MIMEMultipart()
18
19
20 message["From"] = sender # 构造发件人，也可以使用Header构造
21 message["To"] = ";".join(receivers) # 收件人列表不是必需的
22 message["Subject"] = "这是主题：SMTP 邮件测试"
23
24 # 邮件正文内容
25
26
103
Python自动化运维快速入门
27
28 message.attach(MIMEText('这是正文：图片及附件发送测试图片演示：
', 'html', 'utf-8'))
29
30 # 指定图片为当前目录
31 fp = open("1.jpg", "rb")
32 msgImage = MIMEImage(fp.read())
33 fp.close()
34
35 # 定义图片 ID，在 HTML 文本中引用
36 msgImage.add_header("Content-ID", "")
37 message.attach(msgImage)
38
39
40 #添加附件1，传送当前目录下的 test.txt 文件
41 att1 = MIMEText(open("test.txt", "rb").read(), "base64", "utf-8")
42 att1["Content-Type"] = "application/octet-stream"
43 # 这里的filename可以任意写，写什么名字，邮件中显示什么名字
44 att1["Content-Disposition"] = 'attachment; filename="test.txt"'
45 message.attach(att1)
46
47 # 添加附件2，传送当前目录下的测试.txt 文件
48 att2 = MIMEText(open("测试.txt", "rb").read(), "base64", "utf-8")
49 att2["Content-Type"] = "application/octet-stream"
50 # 这里的filename可以任意写，写什么名字，邮件中显示什么名字
51 att2.add_header("Content-Disposition", "attachment", filename=("gbk", "", "
测试.txt"))
52 message.attach(att2)
53
54
55 try:
56 smtpObj = smtplib.SMTP()
57 smtpObj.connect(mail_host, 25) # 25 为 SMTP 端口号
58 smtpObj.login(mail_user, mail_pass)
59 smtpObj.sendmail(sender, receivers, message.as_string())
60 print("发送成功")
61 except smtplib.SMTPException as e:
62 print(f"发送失败,错误原因：{e}")
执行以上代码后，验证邮箱如图2.26所示。
104
第2章 基础运维
图2.26 运行结果
2.7.2 接收邮件
接收邮件的协议有POP（3 Post Office Protocol）和IMAP（Internet Message Access Protocol），
Python内置poplib模块实现了POP3协议，可以直接用来接收邮件。
与SMTP协议类似，POP3协议收取的不是一个已经可以阅读的邮件本身，而是邮件的原
始文本，要把POP3收取的文本变成可以阅读的邮件，还需要用email模块提供的各种类来解
析原始文本，变成可阅读的邮件对象。收取邮件分以下两步。
第一步：用poplib模块把邮件的原始文本下载到本地。
第二步：用email模块解析原始文本，还原为邮件对象。
【示例2-31】编写get_mail.py来演示如何使用poplib模块接收邮件。代码如下：
1 # -*- encoding:utf-8 -*-
2 import poplib
3 from email.parser import Parser
4 from email.header import decode_header
5 from email.utils import parseaddr
6
7 # 输入邮件地址、 口令和POP3服务器地址
8 email = "PI:EMAIL"
9 password = "******"
105
Python自动化运维快速入门
10 pop3_server = "pop.qq.com"
11
12
13 # 连接到POP3服务器,如果开启ssl，就使用poplib.POP3_SSL
14 server = poplib.POP3_SSL(pop3_server)
15 # 可以打开或关闭调试信息
16 # server.set_debuglevel（1）
17 # 可选:打印POP3服务器的欢迎文字
18 print(server.getwelcome().decode("utf-8"))
19
20 # 身份认证:
21 server.user(email)
22 server.pass_(password)
23
24 # stat()返回邮件数量和占用空间:
25 print("邮件数量: %s个. 大小: %.2fMB" % (server.stat()[0], server.stat()[1] / 1024
/ 1024))
26
27
28 # list()返回所有邮件的编号:
29 resp, mails, octets = server.list()
30 # 可以查看返回的列表，类似[b'1 82923', b'2 2184', ...]
31
32
33 # 获取最新一封邮件, 注意索引号从1开始,最新的邮件索引即为邮件的总个数
34 index = len(mails)
35 resp, lines, octets = server.retr(index)
36
37 # lines存储了邮件的原始文本的每一行可以获得整个邮件的原始文本
38 msg_content = b"\r\n".join(lines).decode("utf-8")
39 # 稍后解析出邮件