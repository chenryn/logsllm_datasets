# Weblogic t3 协议利用与防御
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
作者：Hu3sky@360CERT
# 0x00 前置知识
`weblogic t3`协议指的是`weblogic`的`rmi`使用的`t3`协议，在`java
rmi`中，默认`rmi`使用的是`jrmp`协议，`weblogic`包含了高度优化的`RMI`实现
在一般的基于`jrmp`的`rmi`，通信由4个部分组成
    客户端对象
    服务端对象
    客户端代理对象（stub）
    服务端代理对象（skeleton）
`webLogic`支持动态生成客户端`Stub`和服务器端`skeleton`，从而无需为`RMI`对象生成客户端`Stub`和服务器端`skeleton`，将对象部署到`RMI
注册中心`或`JNDI`时，`webLogic`将自动生成必要的代理
`RMI`注册中心会随着`weblogic`服务的启动自动运行。
# 0x01 实现正常t3类的调用
接下来我们看一个例子来了解weblogic rmi 首先创建一个`interface`
    package com.hu3sky.t3;
    public interface Hello extends java.rmi.Remote{
        public void sayHello() throws java.rmi.RemoteException;;
    }
实现类
    package com.hu3sky.t3;
    import java.rmi.RemoteException;
    public class HelloImpl implements Hello {
        @Override
        public void sayHello() throws RemoteException {
            System.out.println("hello");
        }
    }
`WebLogic`不需要`rmi`对象的实现类扩展
`UnicastRemoteObject`。在一般的`rmi`对象中是必须要继承`UnicastRemoteObject`的
Server端
    package com.hu3sky.t3;
    import javax.naming.*;
    import java.util.Hashtable;
    public class Server {
        // The factory to use when creating our initial context
        public final static String JNDI_FACTORY="weblogic.jndi.WLInitialContextFactory";
        /**
         * Create an instance of the Implementation class
         * and bind it in the registry.
         */
        public static void main(String[] args) {
            try {
                Context ctx = getInitialContext("t3://127.0.0.1:7001");
                ctx.bind("HelloServer", new HelloImpl());
                System.out.println("HelloImpl created and bound to the JNDI");
            }
            catch (Exception e) {
                System.out.println("HelloImpl.main: an exception occurred!");
                e.printStackTrace(System.out);
            }
        }
        /* Creates the Initial JNDI Context */
        private static InitialContext getInitialContext(String url) throws NamingException {
            Hashtable env = new Hashtable();
            env.put(Context.INITIAL_CONTEXT_FACTORY, JNDI_FACTORY);
            env.put(Context.PROVIDER_URL, url);
            return new InitialContext(env);
        }
    }
Client端
    package com.hu3sky.t3;
    import java.util.Hashtable;
    import javax.naming.Context;
    import javax.naming.InitialContext;
    import javax.naming.NamingException;
    public class Client {
        // Defines the JNDI context factory.
        public final static String JNDI_FACTORY = "weblogic.jndi.WLInitialContextFactory";
        public Client() {
        }
        public static void main(String[] args) throws Exception {
            try {
                InitialContext ic = getInitialContext("t3://127.0.0.1:7001");
                Hello obj = (Hello) ic.lookup("HelloServer");
                System.out.println("Successfully connected to HelloServer , call sayHello() : "+obj.sayHello());
            } catch (Exception ex) {
                System.err.println("An exception occurred: " + ex.getMessage());
                throw ex;
            }
        }
        private static InitialContext getInitialContext(String url)
                throws NamingException {
            Hashtable env = new Hashtable();
            env.put(Context.INITIAL_CONTEXT_FACTORY, JNDI_FACTORY);
            env.put(Context.PROVIDER_URL, url);
            return new InitialContext(env);
        }
    }
然而，此时还无法直接运行，需要使用WebLogic启动类注册RMI对象
步骤如下：
  1. 修改项目pom，打包为jar
    "
             xmlns:xsi=""
             xsi:schemaLocation=" ">
        4.0.0
        com.hu3sky
        t3
        1.0-SNAPSHOT
                    org.apache.maven.plugins
                    maven-compiler-plugin
                        1.8
                        1.8
                    org.apache.maven.plugins
                    maven-jar-plugin
                                true
                                false
                                lib/
                                com.hu3sky.t3.Server
  2. 将jar包复制到域的/lib文件下，重启weblogic即可
成功后查看jndi树，会发现HelloServer成功被加载 接着我们再运行一下Client 成功调用`Server`上的`sayHello`方法
## 1.1 分析流量
这是`7001`端口上的数据包，红色是客户端向服务器请求数据，蓝色的是服务器返回数据
可以看到发送的第一个数据包为T3协议头，其中第一行为`t3`加`weblogic`客户端的版本号,weblogic服务器的返回数据的第一行为`HELO:`加`weblogic`服务器的版本号。`weblogic`客户端与服务器发送的数据均以`\n\n`结尾。
最后返回`Hello World` 我们再看下hex，不难发现其中的 `ac ed 00 05` 序列化魔术头，而且不止一处
通过观察请求数据包，我们可以发现请求的数据包可以分为多个部分，我这里分离出了九个部分
第一部分的前四个字节为整个数据包的长度，第二至九部分均为JAVA序列化数据
其中第二到九部分序列化的类是
    weblogic.rjvm.ClassTableEntry
    weblogic.rjvm.ClassTableEntry
    weblogic.rjvm.ClassTableEntry
    weblogic.rjvm.JVMID
    weblogic.rjvm.JVMID  
    weblogic.rjvm.ClassTableEntry
    weblogic.rjvm.ImmutableServiceContext
    weblogic.rjvm.ImmutableServiceContext
从这里的红框部分开始，为第一个部分，后面的都是以 `ac ed 00 05` 开头的魔术头的反序列化部分 中间其他部分就省略了
## 1.2 利用t3协议进行恶意序列化
在编写利用的过程中，需要发送两部分的数据
  * 请求包头，也就是
        t3 12.2.1\nAS:255\nHL:19\nMS:10000000\nPU:t3://localhost:7001\nLP:DOMAIN\n\n
以`\n`结束
  * 序列化数据部分，序列化部分的构成方式有两种：
    * 第一种生成方式为，将前文所述的weblogic发送的JAVA序列化数据的第二到九部分的JAVA序列化数据的任意一个替换为恶意的序列化数据。
    * 第二种生成方式为，将前文所述的weblogic发送的JAVA序列化数据的第一部分与恶意的序列化数据进行拼接
必须先发送`T3`协议头数据包，再发送`JAVA`序列化数据包，才能使`weblogic`进行`JAVA`反序列化，进而触发漏洞。如果只发送`JAVA`序列化数据包，不先发送`T3`协议头数据包，无法触发漏洞
## 1.3 脚本编写
这里我采取第二种方法进行脚本的编写，思路是：
  1. 建立socket请求
  2. 发送t3请求数据头
  3. 读取恶意序列化数据，将其拼接至第一部分序列化数据之后
  4. 将前四个字节的长度进行替换
  5. 发送恶意数据