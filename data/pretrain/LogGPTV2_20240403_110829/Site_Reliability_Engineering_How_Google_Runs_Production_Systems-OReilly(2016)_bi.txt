While ultimately a success, Viceroy was not without difficulties, and many of those arose due to the cross-site nature of the project.
434  |  Chapter 31: Communication and Collaboration in SREOnce the extended Viceroy team was established, initial coordination among remote team members proved difficult. When meeting people for the first time, subtle cues in writing and speaking can be misinterpreted, because communication styles vary substantially from person to person. At the start of the project, team members who weren’t located in Mountain View also missed out on the impromptu water cooler discussions that often happened shortly before and after meetings (although commu‐nication has since improved considerably).While the core Viceroy team remained fairly consistent, the extended team of con‐tributors was fairly dynamic. Contributors had other responsibilities that changed over time, and therefore many were able to dedicate between one and three months to the project. Thus, the developer contributor pool, which was inherently larger than the core Viceroy team, was characterized by a significant amount of churn.Adding new people to the project required training each contributor on the overall design and structure of the system, which took some time. On the other hand, when an SRE contributed to the core functionality of Viceroy and later returned to their own team, they were a local expert on the system. That unanticipated dissemination of local Viceroy experts drove more usage and adoption.As people joined and left the team, we found that casual contributions were both use‐ful and costly. The primary cost was the dilution of ownership: once features were delivered and the person left, the features became unsupported over time, and were generally dropped.Furthermore, the scope of the Viceroy project grew over time. It had ambitious goals at launch but the initial scope was limited. As the scope grew, however, we struggled to deliver core features on time, and had to improve project management and set clearer direction to ensure the project stayed on track.Finally, the Viceroy team found it difficult to completely own a component that had significant (determining) contributions from distributed sites. Even with the best will in the world, people generally default to the path of least resistance and discuss issues or make decisions locally without involving the remote owners, which can lead to conflict.
RecommendationsYou should only develop projects cross-site when you have to, but often there are good reasons to have to. The cost of working across sites is higher latency for actions and more communication being required; the benefit is—if you get the mechanics right—much higher throughput. The single site project can also fall foul of no one outside of that site knowing what you’re doing, so there are costs to both approaches.Motivated contributors are valuable, but not all contributions are equally valuable. Make sure project contributors are actually committed, and aren’t just joining with
Case Study of Collaboration in SRE: Viceroy  |  435
some nebulous self-actualization goal (wanting to earn a notch on their belt attaching their name to a shiny project; wanting to code on a new exciting project without committing to maintaining that project). Contributors with a specific goal to achieve will generally be better motivated and will better maintain their contributions.As projects develop, they usually grow, and you’re not always in the lucky position of having people in your local team to contribute to the project. Therefore, think care‐fully about the project structure. The project leaders are important: they provide long-term vision for the project and make sure all work aligns with that vision and is prioritized correctly. You also need to have an agreed way of making decisions, and should specifically optimize for making more decisions locally if there is a high level of agreement and trust.The standard “divide and conquer” strategy applies to cross-site projects; you reduce communication costs primarily by splitting the project into as many reasonably sized components as possible, and trying to make sure that each component can be assigned to a small group, preferably within one site. Divide these components among the project subteams, and establish clear deliverables and deadlines. (Try not to let Conway’s law distort the natural shape of the software too deeply.)4A goal for a project team works best when it’s oriented toward providing some func‐tionality or solving some problem. This approach ensures that the individuals work‐ing on a component know what is expected of them, and that their work is only complete once that component is fully integrated and used within the main project.Obviously, the usual engineering best practices apply to collaborative projects: each component should have design documents and reviews with the team. In this way, everyone in the team is given the opportunity to stay abreast of changes, in addition to the chance to influence and improve designs. Writing things down is one of the major techniques you have to offset physical and/or logical distance—use it.Standards are important. Coding style guidelines are a good start, but they’re usually quite tactical and therefore only a starting point for establishing team norms. Every time there is a debate around which choice to make on an issue, argue it out fully with the team but with a strict time limit. Then pick a solution, document it, and move on. If you can’t agree, you need to pick some arbitrator that everyone respects, and again just move forward. Over time you’ll build up a collection of these best practices, which will help new people come up to speed.Ultimately, there’s no substitute for in-person interaction, although some portion of face-to-face interaction can be deferred by good use of VC and good written commu‐nication. If you can, have the leaders of the project meet the rest of the team in per‐
4 That is, software has the same structure as the communications structure of the organization that produces 	the software—see .436  |  Chapter 31: Communication and Collaboration in SRE
son. If time and budget allows, organize a team summit so that all members of the team can interact in person. A summit also provides a great opportunity to hash out designs and goals. For situations where neutrality is important, it’s advantageous to hold team summits at a neutral location so that no individual site has the “home advantage.”Finally, use the project management style that suits the project in its current state. Even projects with ambitious goals will start out small, so the overhead should be correspondingly low. As the project grows, it’s appropriate to adapt and change how the project is managed. Given sufficient growth, full project management will be necessary.
Collaboration Outside SREAs we suggested, and Chapter 32 discusses, collaboration between the product devel‐opment organization and SRE is really at its best when it occurs early on in the design phase, ideally before any line of code has been committed. SREs are best placed to make recommendations about architecture and software behavior that can be quite difficult (if not impossible) to retrofit. Having that voice present in the room when a new system is being designed goes better for everyone. Broadly speaking, we use the Objectives & Key Results (OKR) process [Kla12] to track such work. For some service teams, such collaboration is the mainstay of what they do—tracking new designs, making recommendations, helping to implement them, and seeing those through to production.Case Study: Migrating DFP to F1Large migration projects of existing services are quite common at Google. Typical examples include porting service components to a new technology or updating com‐ponents to support a new data format. With the recent introduction of database tech‐nologies that can scale to a global level such as Spanner [Cor12] and F1 [Shu13], Google has undertaken a number of large-scale migration projects involving databa‐ses. One such project was the migration of the main database of DoubleClick for Pub‐lishers (DFP)5 from MySQL to F1. In particular, some of this chapter’s authors were in charge of a portion of the serving system (shown in Figure 31-1) that continually extracts and processes data from the database, in order to generate a set of indexed files that are then loaded and served around the world. This system was distributed over several datacenters and used about 1,000 CPUs and 8 TB of RAM to index 100 TB of data every day.5 DoubleClick for Publishers is a tool for publishers to manage ads served on their websites and in their apps.
Collaboration Outside SRE  |  437
Figure 31-1. A generic ads serving systemThe migration was nontrivial: in addition to migrating to a new technology, the data‐base schema was significantly refactored and simplified thanks to the ability of F1 to store and index protocol buffer data in table columns. The goal was to migrate the processing system so that it could produce an output perfectly identical to the exist‐ing system. This allowed us to leave the serving system untouched and to perform, from the user’s perspective, a seamless migration. As an added restriction, the prod‐uct required that we complete a live migration without any disruption of the service to our users at any time. In order to achieve this, the product development team and the SRE team started working closely, from the very beginning, to develop the new indexing service.As its main developers, product development teams are typically more familiar with the Business Logic (BL) of the software, and are also in closer contact with the Prod‐uct Managers and the actual “business need” component of products. On the other hand, SRE teams usually have more expertise pertaining to the infrastructure compo‐nents of the software (e.g., libraries to talk to distributed storage systems or databa‐ses), because SREs often reuse the same building blocks across different services, learning the many caveats and nuances that allow the software to run scalably and reliably over time.From the start of the migration project, product development and SRE knew they would have to collaborate even more closely, conducting weekly meetings to sync on the project’s progress. In this particular case the BL changes were partially dependent upon infrastructure changes. For this reason the project started with the design of the new infrastructure; the SREs, who had extensive knowledge about the domain of438  |  Chapter 31: Communication and Collaboration in SREextracting and processing data at scale, drove the design of the infrastructure changes. This involved designing how to extract the various tables from F1, how to filter and join the data, how to extract only the data that changed (as opposed to the entire database), how to sustain the loss of some of the machines without impacting the service, how to ensure that the resource usage grows linearly with the amount of extracted data, the capacity planning, and many other similar aspects. The new pro‐posed infrastructure was similar to other services that were already extracting and processing data from F1. Therefore, we could be sure of the soundness of the solution and reuse parts of the monitoring and tooling.Before proceeding with the development of this new infrastructure, two SREs pro‐duced a detailed design document. Then, both the product development and SRE teams thoroughly reviewed the document, tweaking the solution to handle some edge cases, and eventually agreed on a design plan. Such a plan clearly identified what kind of changes the new infrastructure would bring to the BL. For example, we designed the new infrastructure to extract only changed data, instead of repeatedly extracting the entire database; the BL had to take into account this new approach. Early on, we defined the new interfaces between infrastructure and BL, and doing so allowed the product development team to work independently on the BL changes. Similarly, the product development team kept SRE informed of BL changes. Where they interacted (e.g., BL changes dependent on infrastructure), this coordination structure allowed us to know changes were happening, and to handle them quickly and correctly.In later phases of the project, SREs began deploying the new service in a testing envi‐ronment that resembled the project’s eventual finished production environment. This step was essential to measure the expected behavior of the service—in particular, per‐formance and resource utilization—while the development of BL was still underway. The product development team used this testing environment to perform validation of the new service: the index of the ads produced by the old service (running in pro‐duction) had to match perfectly the index produced by the new service (running in the testing environment). As suspected, the validation process highlighted discrepan‐cies between the old and new services (due to some edge cases in the new data for‐mat), which the product development team was able to resolve iteratively: for each ad they debugged the cause of the difference and fixed the BL that produced the bad out‐put. In the meantime, the SRE team began preparing the production environment: allocating the necessary resources in a different datacenter, setting up processes and monitoring rules, and training the engineers designated to be on-call for the service. The SRE team also set up a basic release process that included validation, a task usu‐ally completed by the product development team or by Release Engineers but in this specific case was completed by SREs to speed up the migration.When the service was ready the SREs prepared a rollout plan in collaboration with the product development team and launched the new service. The launch was very successful and proceeded smoothly, without any visible user impact.
Case Study: Migrating DFP to F1  |  439
ConclusionConclusion
Given the globally distributed nature of SRE teams, effective communication has always been a high priority in SRE. This chapter has discussed the tools and techni‐ques that SRE teams use to maintain effective relationships among their team and with their various partner teams.
Collaboration between SRE teams has its challenges, but potentially great rewards, including common approaches to platforms for solving problems, letting us focus on solving more difficult problems.440  |  Chapter 31: Communication and Collaboration in SRE
CHAPTER 32
The Evolving SRE Engagement Model
Written by Acacio Cruz and Ashish Bhambhani Edited by Betsy Beyer and Tim Harvey
SRE Engagement: What, How, and WhyWe’ve discussed in most of the rest of this book what happens when SRE is already in charge of a service. Few services begin their lifecycle enjoying SRE support, so there needs to be a process for evaluating a service, making sure that it merits SRE support, negotiating how to improve any deficits that bar SRE support, and actually instituting SRE support. We call this process onboarding. If you are in an environment where you are surrounded by a lot of existing services in varying states of perfection, your SRE team will probably be running through a prioritized queue of onboardings for quite a while until the team has finished taking on the highest-value targets.Although this is very common, and a completely reasonable way of dealing with a fait accompli environment, there are actually at least two better ways of bringing the wis‐dom of production, and SRE support, to services old and new alike.In the first case, just as in software engineering—where the earlier the bug is found, the cheaper it is to fix—the earlier an SRE team consultation happens, the better the service will be and the quicker it will feel the benefit. When SRE is engaged during the earliest stages of design, the time to onboard is lowered and the service is more reliable “out of the gate,” usually because we don’t have to spend the time unwinding suboptimal design or implementation.Another way, perhaps the best, is to short-circuit the process by which specially cre‐ated systems with lots of individual variations end up “arriving” at SRE’s door. Pro‐vide product development with a platform of SRE-validated infrastructure, upon which they can build their systems. This platform will have the double benefit of being both reliable and scalable. This avoids certain classes of cognitive load prob‐441
lems entirely, and by addressing common infrastructure practices, allows product development teams to focus on innovation at the application layer, where it mostly belongs.
In the following sections, we’ll spend some time looking at each of these models in turn, beginning with the “classic” one, the PRR-driven model.
The PRR ModelThe most typical initial step of SRE engagement is the Production Readiness Review (PRR), a process that identifies the reliability needs of a service based on its specific details. Through a PRR, SREs seek to apply what they’ve learned and experienced to ensure the reliability of a service operating in production. A PRR is considered a pre‐requisite for an SRE team to accept responsibility for managing the production aspects of a service.Figure 32-1 illustrates the lifecycle of a typical service. The Production Readiness Review can be started at any point of the service lifecycle, but the stages at which SRE engagement is applied have expanded over time. This chapter describes the Simple PRR Model, then discusses how its modification into the Extended Engagement Model and the Frameworks and SRE Platform structure allowed SRE to scale their engagement process and impact.Figure 32-1. A typical service lifecycle
442  |  Chapter 32: The Evolving SRE Engagement Model
The SRE Engagement Model
SRE seeks production responsibility for important services for which it can make concrete contributions to reliability. SRE is concerned with several aspects of a ser‐vice, which are collectively referred to as production. These aspects include the following:• System architecture and interservice dependencies
• Instrumentation, metrics, and monitoring
• Emergency response
• Capacity planning
• Change management
• Performance: availability, latency, and efficiency
When SREs engage with a service, we aim to improve it along all of these axes, which makes managing production for the service easier.
Alternative SupportAlternative Support
Not all Google services receive close SRE engagement. A couple of factors are at play here:
• Many services don’t need high reliability and availability, so support can be pro‐	vided by other means.
• By design, the number of development teams that request SRE support exceeds 	the available bandwidth of SRE teams (see Chapter 1).When SRE can’t provide full-fledged support, it provides other options for making improvements to production, such as documentation and consultation.
Documentation
Development guides are available for internal technologies and clients of widely used systems. Google’s Production Guide documents production best practices for serv‐ices, as determined by the experiences of SRE and development teams alike. Develop‐ers can implement the solutions and recommendations in such documentation to improve their services.The SRE Engagement Model  |  443
Consultation
Developers may also seek SRE consulting to discuss specific services or problem areas. The Launch Coordination Engineering (LCE) team (see Chapter 27) spends a majority of its time consulting with development teams. SRE teams that aren’t specifi‐cally dedicated to launch consultations also engage in consultation with development teams.When a new service or a new feature has been implemented, developers usually con‐sult with SRE for advice about preparing for the Launch phase. Launch consultation usually involves one or two SREs spending a few hours studying the design and implementation at a high level. The SRE consultants then meet with the development team to provide advice on risky areas that need attention and to discuss well-known patterns or solutions that can be incorporated to improve the service in production. Some of this advice may come from the Production Guide mentioned earlier.Consultation sessions are necessarily broad in scope because it’s not possible to gain a deep understanding of a given system in the limited time available. For some devel‐opment teams, consultation is not sufficient:
• Services that have grown by orders of magnitude since they launched, which now require more time to understand than is feasible through documentation and consultation.• Services upon which many other services have subsequently come to rely upon, 	which now host significantly more traffic from many different clients.
These types of services may have grown to the point at which they begin to encounter significant difficulties in production while simultaneously becoming important to users. In such cases, long-term SRE engagement becomes necessary to ensure that they are properly maintained in production as they grow.Production Readiness Reviews: Simple PRR Model
When a development team requests that SRE take over production management of a service, SRE gauges both the importance of the service and the availability of SRE teams. If the service merits SRE support, and the SRE team and development organi‐zation agree on staffing levels to facilitate this support, SRE initiates a Production Readiness Review with the development team.The objectives of the Production Readiness Review are as follows:
• Verify that a service meets accepted standards of production setup and opera‐tional readiness, and that service owners are prepared to work with SRE and take advantage of SRE expertise.
444  |  Chapter 32: The Evolving SRE Engagement Model• Improve the reliability of the service in production, and minimize the number and severity of incidents that might be expected. A PRR targets all aspects of pro‐duction that SRE cares about.
After sufficient improvements are made and the service is deemed ready for SRE sup‐port, an SRE team assumes its production responsibilities.This brings us to the Production Readiness Review process itself. There are three dif‐ferent but related engagement models (Simple PRR Model, Early Engagement Model, and Frameworks and SRE Platform), which will be discussed in turn.
We will first describe the Simple PRR Model, which is usually targeted at a service that is already launched and will be taken over by an SRE team. A PRR follows several phases, much like a development lifecycle, although it may proceed independently in parallel with the development lifecycle.Engagement
SRE leadership first decides which SRE team is a good fit for taking over the service. Usually one to three SREs are selected or self-nominated to conduct the PRR process. This small group then initiates discussion with the development team. The discussion covers matters such as:
• Establishing an SLO/SLA for the service
• Planning for potentially disruptive design changes required to improve reliability• Planning and training schedules
The goal is to arrive at a common agreement about the process, end goals, and out‐comes that are necessary for the SRE team to engage with the development team and their service.
AnalysisAnalysis is the first large segment of work. During this phase, the SRE reviewers learn about the service and begin analyzing it for production shortcomings. They aim to gauge the maturity of the service along the various axes of concern to SRE. They also examine the service’s design and implementation to check if it follows production best practices. Usually, the SRE team establishes and maintains a PRR checklist explicitly for the Analysis phase. The checklist is specific to the service and is gener‐ally based on domain expertise, experience with related or similar systems, and best practices from the Production Guide. The SRE team may also consult other teams that have more experience with certain components or dependencies of the service.Production Readiness Reviews: Simple PRR Model  |  445
A few examples of checklist items include:
• Do updates to the service impact an unreasonably large percentage of the system 	at once?
• Does the service connect to the appropriate serving instance of its dependencies? For example, end-user requests to a service should not depend on a system that is designed for a batch-processing use case.• Does the service request a sufficiently high network quality-of-service when talk‐	ing to a critical remote service?
• Does the service report errors to central logging systems for analysis? Does it report all exceptional conditions that result in degraded responses or failures to the end users?
• Are all user-visible request failures well instrumented and monitored, with suit‐	able alerting configured?The checklist may also include operational standards and best practices followed by a specific SRE team. For example, a perfectly functional service configuration that doesn’t follow an SRE team’s “gold standard” might be refactored to work better with SRE tools for scalably managing configurations. SREs also look at recent incidents and postmortems for the service, as well as follow-up tasks for the incidents. This evaluation gauges the demands of emergency response for the service and the availa‐bility of well-established operational controls.Improvements and Refactoring
The Analysis phase leads to the identification of recommended improvements for the service. This next phase proceeds as follows:
1. Improvements are prioritized based upon importance for service reliability.
2. The priorities are discussed and negotiated with the development team, and a 	plan of execution is agreed upon.3. Both SRE and product development teams participate and assist each other in 	refactoring parts of the service or implementing additional features.
This phase typically varies the most in duration and amount of effort. How much time and effort this phase will involve depends upon the availability of engineering time for refactoring, the maturity and complexity of the service at the start of the review, and myriad other factors.446  |  Chapter 32: The Evolving SRE Engagement Model
Training
Responsibility for managing a service in production is generally assumed by an entire SRE team. To ensure that the team is prepared, the SRE reviewers who led the PRR take ownership of training the team, which includes the documentation necessary to support the service. Typically with the help and participation of the development team, these engineers organize a series of training sessions and exercises. Instruction can include:• Design overviews
• Deep dives on various request flows in the system
• A description of the production setup
• Hands-on exercises for various aspects of system operations
When the training is concluded, the SRE team should be prepared to manage the ser‐vice.
OnboardingThe Training phase unblocks onboarding of the service by the SRE team. It involves a progressive transfer of responsibilities and ownership of various production aspects of the service, including parts of operations, the change management process, access rights, and so forth. The SRE team continues to focus on the various areas of produc‐tion mentioned earlier. To complete the transition, the development team must be available to back up and advise the SRE team for a period of time as it settles in man‐aging production for the service. This relationship becomes the basis for the ongoing work between the teams.Continuous ImprovementActive services continuously change in response to new demands and conditions, including user requests for new features, evolving system dependencies, and technol‐ogy upgrades, in addition to other factors. The SRE team must maintain service relia‐bility standards in the face of these changes by driving continuous improvement. The responsible SRE team naturally learns more about the service in the course of operat‐ing the service, reviewing new changes, responding to incidents, and especially when conducting postmortems/root cause analyses. This expertise is shared with the devel‐opment team as suggestions and proposals for changes to the service whenever new features, components, and dependencies may be added to the service. Lessons from managing the service are also contributed to best practices, which are documented in the Production Guide and elsewhere.Production Readiness Reviews: Simple PRR Model  |  447
Engaging with ShakespeareInitially, the developers of the Shakespeare service were responsible for the product, including carrying the pager for emergency response. However, with growing use of the service and the growth of the revenue coming from the service, SRE support became desirable. The product has already been launched, so SRE conducted a Pro‐duction Readiness Review. One of the things they found was that the dashboards were not completely covering some of the metrics defined in the SLO, so that needed to be fixed. After all the issues that had been filed had been fixed, SRE took over the pager for the service, though two developers were in the on-call rotation as well. The devel‐opers are participating in the weekly on-call meeting discussing last week’s problems and how to handle upcoming large-scale maintenance or cluster turndowns. Also future plans for the service are now discussed with the SREs to make sure that new launches will go flawlessly (though Murphy’s law is always looking for opportunities to spoil that).Evolving the Simple PRR Model: Early Engagement
Thus far, we’ve discussed the Production Readiness Review as it’s used in the Simple PRR Model, which is limited to services that have already entered the Launch phase.
There are several limitations and costs associated with this model. For example:
• Additional communication between teams can increase some process overhead 	for the development team, and cognitive burden for the SRE reviewers.• The right SRE reviewers must be available, and capable of managing their time 	and priorities with regards to their existing engagements.
• Work done by SREs must be highly visible and sufficiently reviewed by the devel‐opment team to ensure effective knowledge sharing. SREs should essentially work as a part of the development team, rather than an external unit.However, the main limitations of the PRR Model stem from the fact that the service is launched and serving at scale, and the SRE engagement starts very late in the devel‐opment lifecycle. If the PRR occurred earlier in the service lifecycle, SRE’s opportu‐nity to remedy potential issues in the service would be markedly increased. As a result, the success of the SRE engagement and the future success of the service itself would likely improve. The resulting drawbacks can pose a significant challenge to the success of the SRE engagement and the future success of the service itself.448  |  Chapter 32: The Evolving SRE Engagement Model
Candidates for Early Engagement
The Early Engagement Model introduces SRE earlier in the development lifecycle in order to achieve significant additional advantages. Applying the Early Engagement Model requires identifying the importance and/or business value of a service early in the development lifecycle, and determining if the service will have sufficient scale or complexity to benefit from SRE expertise. Applicable services often have the follow‐ing characteristics:• The service implements significant new functionality and will be part of an exist‐	ing system already managed by SRE.
• The service is a significant rewrite or alternative to an existing system, targeting 	the same use cases.
• The development team sought SRE advice or approached SRE for takeover upon 	launch.The Early Engagement Model essentially immerses SREs in the development process. SRE’s focus remains the same, though the means to achieve a better production ser‐vice are different. SRE participates in Design and later phases, eventually taking over the service any time during or after the Build phase. This model is based on active collaboration between the development and SRE teams.Benefits of the Early Engagement Model
While the Early Engagement Model does entail certain risks and challenges discussed previously, additional SRE expertise and collaboration during the entire lifecycle of the product creates significant benefits compared to an engagement initiated later in the service lifecycle.
Design phaseDesign phase
SRE collaboration during the Design phase can prevent a variety of problems or inci‐dents from occurring later in production. While design decisions can be reversed or rectified later in the development lifecycle, such changes come at a high cost in terms of effort and complexity. The best production incidents are those that never happen!Occasionally, difficult trade-offs lead to the selection of a less-than-ideal design. Par‐ticipation in the Design phase means that SREs are aware up front of the trade-offs and are part of the decision to pick a less-than-ideal option. Early SRE involvement aims to minimize future disputes over design choices once the service is in produc‐tion.