# SMS Fuzzing â€“ SIM Toolkit Attack
## Bogdan Alecu  
**Contact:** PI:EMAIL  
**Website:** [www.m-sec.net](http://www.m-sec.net)

### Abstract
This paper demonstrates a method to make a mobile phone send an SMS message without the user's consent and to prevent the phone from receiving any messages. The technique is effective on any type of phone, whether it is a smartphone or not, and works on any GSM/UMTS network. This method leverages specially crafted SIM Toolkit command messages. The paper also discusses the results and their implications for user and mobile network security.

### Introduction
SMS, or Short Message Service, is a communication protocol that allows text-based exchanges between mobile phones and fixed lines. It is a widely used and efficient form of communication, as messages are typically delivered almost instantly. Modern SMS services originated from radio telegraphy in radio memo pagers and were standardized as part of the Global System for Mobile Communications (GSM) in 1985, initially allowing messages of up to 160 characters. Since then, SMS has evolved to support various applications, including MMS (Multimedia Messaging Service), Over-The-Air (OTA) phone configuration, voicemail notifications, email, fax, and micropayments.

However, the widespread use of SMS has also led to several security vulnerabilities. These issues arise because the implementation of SMS features is often not thoroughly tested, and every phone receives SMS messages, making it a potential attack vector. Security researchers have discovered various vulnerabilities, such as remote Denial of Service (DoS) attacks on Nokia S60 phones, phone crashes, reboots, remote execution of EXE files, and hijacking of mobile data connections.

The current security issue presented in this paper was discovered accidentally during experiments with binary message sending and SIM Application Toolkit messages. The experiments led to the phone sending messages autonomously and later refusing to receive any messages. This paper will detail how to achieve this behavior, explain why it occurs, and discuss the security implications and protective measures.

### SMS Overview
#### Point-to-Point Short Message Service (SMS)
SMS provides a means of sending limited-size messages to and from GSM mobiles using a Service Centre (SC) that acts as a store-and-forward center. Two types of point-to-point services are defined: mobile-originated and mobile-terminated. Mobile-originated messages are sent from a mobile station (MS) to the SC, while mobile-terminated messages are sent from the SC to the MS. Text messages can contain up to 140 octets.

An active MS can receive a short message TPDU (SMS-DELIVER) at any time, and a report is always returned to the SC. Similarly, an active MS can submit a short message TPDU (SMS-SUBMIT) at any time, and a report is always returned to the MS.

#### SMS-SUBMIT Details
The basic elements of the SMS-SUBMIT type include:
- **Provision:** Mandatory (M) or Optional (O)
- **Representation:** Integer (I), bit (b), 2 bits (2b), Octet (o), 7 octets (7o), 2-12 octets (2-12o)
- **Dependent on the TP-DCS**

**Example of SMS-SUBMIT:**
- **Octet 00:** Information about SMSC (length 0, indicating the use of the stored SMSC).
- **Octet 01:** First octet of the SMS-SUBMIT message, indicating no reply path, User Data Header, Status Report Request, Validity Period, Reject Duplicates, and message type.
- **Octet 00:** TP-Message-Reference, set by the phone.
- **Octet 0B:** Address-Length (11).
- **Octet 91:** Type-of-Address (international format).
- **Octet 4421436587F9:** Phone number in semi-octets (44123456789).
- **Octet 00:** TP-PID, none specified.
- **Octet 00:** TP-DCS, none specified.
- **Octet 0B:** TP-User-Data-Length (11).
- **Octet E8329BFD06DDDF723619:** TP-User-Data (message "hello world").

To send this message via AT commands through a GSM modem:
1. Set the modem in PDU mode: `AT+CMGF=0`
2. Check if the modem can process SMS: `AT+CSMS=0`
3. Send the message: `AT+CMGS=23 > 0001000B914421436587F900000BE8329BFD06DDDF723619`

#### SMS-DELIVER Details
The basic elements of the SMS-DELIVER type include:
- **Provision:** Mandatory (M) or Optional (O)
- **Representation:** Integer (I), bit (b), 2 bits (2b), Octet (o), 7 octets (7o), 2-12 octets (2-12o)
- **Dependent on the TP-DCS**

#### User Data Header (UDH)
The UDH adds value-added services to the user data part, enabling smart messaging. It can be used for:
- Ringtone
- WAP Push
- Operator logo
- VCARD
- Concatenation of messages
- SIM Toolkit Security headers

**SIM Toolkit Security Headers:**
- **Command Packet:** A secured packet transmitted by the sending entity to the receiving entity, containing a secured application message.
- **Response Packet:** A secured packet transmitted by the receiving entity to the sending entity, containing a secured response and possibly application data.

### About Mobile Phones
There are two main types of mobile phones: feature phones and smartphones. Feature phones run the GSM stack and other applications on proprietary firmware with a single baseband processor and a USB port for AT command input. Smartphones have two processors: a baseband processor and an application processor, each with its own memory allocation.

### Test Case
The security issue was discovered accidentally during experiments with binary messages. To facilitate these experiments, several tools were used, and live networks were utilized due to the lack of available hardware. A pay-as-you-go plan with unlimited texting in the same network was chosen to minimize costs.

#### Tools Used
- **PDUspy:** For understanding incoming messages and building custom messages.
- **Nokia 3310 with F-BUS USB cable:** For capturing GSM Um and SIM-ME interfaces.
- **dct3tap utility:** For capturing and forwarding GSMTAP to Wireshark.
- **Wireshark development release 1.6.0.rc2:** Compiled and patched with GSMTAP and SIMCARD.
- **NowSMS Gateway:** For easy message sending and connection to an SMS provider.
- **Gemalto GemPC Twin reader:** For accessing the SIM.
- **SIMinfo Python script:** For reading SIM files.

#### The Attack
The exact binary message is not provided, but the key requirements for the attack are:
- The SIM must have the "data download via SMS Point-to-Point" service allocated and active.
- The SIM must have a SIM Toolkit Application.

The following table shows the results from reading the SIM files with the SIMinfo script:

| File Read | Result |
|-----------|--------|
| Card Reader | Gemplus GemPC Twin 00 00 |
| Card ATR | 3B 9F 95 80 1F C3 80 31 A0 73 BE 21 |

This paper will further explore the details of the attack, its causes, and the necessary security measures to protect against it.