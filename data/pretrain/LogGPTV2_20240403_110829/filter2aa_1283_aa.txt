1
SMS Fuzzing – SIM Toolkit Attack
Bogdan Alecu 
PI:EMAIL
www.m-sec.net
Abstract
In this paper I will show how to make a phone send an SMS message 
without the user’s consent and how to make the phone not to 
receive any message. The method used works on any phone, no 
matter if it’s a smartphone or not and also on any GSM/UMTS 
network. I will present how you can take advantage of sending a 
special crafted SIM Toolkit command message in order to achieve all 
that. Finally, I will present the results and their impact on the user 
and mobile networks security.
1
Introduction
SMS stands for Short Message Service and represents a way of communication via text
between mobile phones and/or fixed lines, using a standardized protocol. It is an effective 
way of communication as the user just writes some text and it’s almost instantly delivered to 
the destination. 
SMS as used on modern handsets was originated from radio telegraphy in radio memo 
pagers using standardized phone protocols and later defined as part of the Global System for 
Mobile Communications (GSM) series of standards in 1985 as a means of sending messages 
of up to 160 characters, to and from GSM mobile handsets.1 Since then a lot of things have 
changed regarding this service and now it can be used for multiple purposes: MMS –
Multimedia Messaging Service, OTA – Over The Air – phone configuration, notification for 
1 http://en.wikipedia.org/wiki/SMS
2
voice mail, email, fax, micropayments – paying a very small sum of money for different 
services.
All these ways of using SMS can lead to security issues as their implementation isn’t 
fully tested and more important because SMS is like an opened firewall: every phone has it 
implemented and the phone always receives the message. There have been discovered
different errors, security issues related to the SMS: remote DoS for Nokia S60 phones2, 
phone crashing, rebooting, remote executing EXE files, hijacking mobile data connections3, 
etc. 
Until now most of the SMS related security issues have been found by accident. This is 
also the case for the current security issue presented in the paper. I was experimenting with 
the binary message sending – multipart messages: sending the second part but the message 
had only one part, sending the 10000’s part message, etc. and trying to configure the SMSC 
number stored by sending SIM Application Toolkit messages – when suddenly I’ve noticed 
that my phone started to send a message by itself. Later on, after playing more with the 
message that caused this behavior, my phone was not receiving any other messages. I tried 
putting the SIM on another phone, resetting the SMSC number but nothing helped. 
In this paper I will show how you can achieve the above behavior, why it happens, what 
are the security implications and how you can protect.
But first, a little bit of theory…
2
SMS
The Point-to-Point Short Message Service (SMS) provides a means of sending messages 
of limited size to and from GSM mobiles. The provision of SMS makes use of a Service 
Centre, which acts as a store and forward centre for short messages.
Two different point-to-point services have been defined: mobile originated and mobile
terminated. Mobile originated messages will be transported from an MS to a Service Centre
(SC). These may be destined for other mobile users, or for subscribers on a fixed network. 
Mobile terminated messages will be transported from a Service Centre to an MS. These may 
be input to the Service Centre by other mobile users (via a mobile originated short message) 
or by a variety of other sources, e.g. speech, telex, or facsimile. The text messages to be 
transferred contain up to 140 octets.
“An active MS shall be able to receive a short message TPDU - Transfer protocol data 
unit - (SMS-DELIVER) at any time, independently of whether or not there is a speech or data 
call in progress. A report will always be returned to the SC; either confirming that the MS has 
2 http://berlin.ccc.de/~tobias/cos/s60-curse-of-silence-advisory.txt
3 http://www.mseclab.com
3
received the short message, or informing the SC that it was impossible to deliver the short 
message TPDU to the MS, including the reason why.”4
“An active MS shall be able to submit a short message TPDU (SMS-SUBMIT) at any 
time, independently of whether or not there is a speech or data call in progress. A report will 
always be returned to the MS; either confirming that the SC has received the short message 
TPDU, or informing the MS that it was impossible to deliver the short message TPDU to the 
SC, including the reason why.”5
2.1 SMS-SUBMITdetails
Here are the basic elements for SMS-SUBMIT type:
4 ETSI TS 100 901 V7.5.0 (2001-12), page 13
5 ETSI TS 100 901 V7.5.0 (2001-12), page 13
4
Table 1 - Basic elements of the SMS-SUBMIT type 6
1) Provision; Mandatory (M) or Optional (O).
2) Representation; Integer (I), bit (b), 2 bits (2b), Octet (o), 7 octets (7o), 2-12 octets (2-12o)
3) Dependent on the TP-DCS
2.1.1
ExampleofSMS-SUBMIT
Octet(s)
Description
00 
Info about SMSC – here the length is 0, which means that the 
SMSC stored in the phone should be used.
6 ETSI TS 100 901 V7.5.0 (2001-12), page 42
5
01 
First octet of the SMS-SUBMIT message. It indicates that there 
is no reply path, User Data Header, Status Report Request, 
Validity Period, Reject Duplicates. The message type is SMS-
SUBMIT.
00 
TP-Message-Reference. The "00" value here lets the phone set 
the message reference number itself. 
0B 
Address-Length. Length of phone number (11) 
91 
Type-of-Address. Here it is the international format of the 
phone number. 
4421436587F9
The phone number in semi octets – 44123456789
00 
TP-PID, none specified
00 
TP-DCS, none specified
0B
TP-User-Data-Length. Length of message = length of septets = 
11
E8329BFD06DDDF723619 TP-User-Data. These octets represent the message "hello 
world".
Table 2 – Details of how SMS-SUBMIT is composed
In order to send this message trough AT commands via a GSM modem, the following 
steps should be performed:
a) Set the modem in PDU mode: AT+CMGF=0
b) Check if modem is able to process SMS: AT+CSMS=0
c) Send the message: AT+CMGS=23 > 0001000B914421436587F900000B
E8329BFD06DDDF723619
In order to better understand, see below some screenshots from WireShark used for 
capturing the debug mode of a Nokia 3310.
6
Figure 1 – Capture from dct3tap software 7
Figure 2 – Capture from Wireshark compiled with GSMTAP showing an outgoing SMS
7 http://bb.osmocom.org/trac/wiki/dct3-gsmtap
7
Figure 3 – Capture from Wireshark compiled with GSMTAP showing the SMS-SUBMIT packet
2.2 SMS-DELIVERdetails
Here are the basic elements for SMS-DELIVER type:
8
Table 3 - Basic elements of the SMS-DELIVER type 8
1) Provision; Mandatory (M) or Optional (O)
2) Representation; Integer (I), bit (b), 2 bits (2b), Octet (o), 7 octets (7o), 2-12 octets (2-12o)
3) Dependent on the TP-DCS
In order to better understand how the previous message was received by the phone, I will 
attach some screenshots from WireShark used for capturing the debug mode of a Nokia 3310.
8 ETSI TS 100 901 V7.5.0 (2001-12), page 38
9
Figure 4 – Capture Wireshark compiled with GSMTAP showing an incoming message
Figure 5 – Capture Wireshark compiled with GSMTAP showing details of SMS-DELIVER packet
2.3 UserDataHeader(UDH)
The User Data Header contains octets that are added to the beginning of the user data 
part. UDH provides value added services, creating a smart messaging.
Field
Length
Length of User Data Header
1 octet
10
Information-Element-Identifier "A" (IEI)
1 octet
Length of Information-Element "A" (IEDL)
1 octet
Information-Element "A" Data (IED)
n octets, based on IEDL
UDH can be used for:
Ringtone
WAP Push
Operator logo
VCARD
Concatenation of messages
SIM Toolkit Security headers
2.3.1
SIMToolkitSecurityheaders
There are two types of secure commands in the user data:
-
Command Packet - a secured packet transmitted by sending entity to the 
receiving entity, containing secured application message
-
Response Packet - secured packet transmitted by receiving entity to the 
sending entity, containing secured response and possibly application data
Figure 6 – Structure of the command packet according to GSM 03.48 9
Command Packet Length (CPL) - shall indicate the number of octets from and 
including the Command Header Identifier to the end of the Secured Data, including any 
padding octets required for ciphering.
Command Header Length (CHL) - the number of octets from and including the SPI to 
the end of the RC/CC/DS
9 http://adywicaksono.wordpress.com/2008/05/21/
11
Security Parameter Indicator (SPI) - defines the security level applied to the input and 
output message
Ciphering Key Identifier (KIc) - Key and algorithm Identifier for ciphering
Key Identifier (KID) - Key and algorithm Identifier for Redundancy Check (RC) / 
Cryptographic Checksum (CC) / Digital Signature (DS)
Toolkit Application Reference (TAR) - is part of the 23.048 header that identifies and 
triggers the Over The Air (OTA) feature, which is an application on the SIM
Counter (CNTR) - Replay detection and Sequence Integrity counter
Padding counter (PCNTR) - indicates the number of padding octets used for ciphering 
at the end of the secured data
3
Aboutmobilephone
Currently there are two types of phones: feature phones and smartphones. Feature phones 
run the GSM stack and other applications on a proprietary firmware, with no operating 
system, by using a single processor – baseband processor. They also have a USB port which 
is used for connecting to a computer, thus acting as a terminal adapter from which the user 
sends AT commands. Smartphones have two processors: one is the baseband and the other is 
the application processor for the applications and the user interface. Each processor has its 
own memory allocation, no matter if there is a separate memory for each or a shared one.
4
Testcase
Like I specified before, this security issue has been discovered by a mistake, when 
playing with different binary messages. In order to make it easy for me to compose these 
binary messages, a few tools have been used. Also since I didn’t have any hardware available 
for using the OpenBSC or OpenBTS, I just used the live networks. Since I wanted to keep the 
spending to minimum, I just chose a pay as you go plan for 5 EUR which has unlimited 
texting in the same network.
4.1 Toolsused
Here is the software and hardware that I used:
-
PDUspy – for better understating the incoming message and building my own crafted 
message (available at http://www.nobbi.com/pduspy.html)
12
Figure 7 – Overview of PDUSpy
-
Nokia 3310 with F-BUS USB cable – I bought the cable on E-Bay
Figure 8 – Nokia 3310 with F-BUS cable attached
-
dct3tap command line utility (Linux) to capture the GSM Um and SIM-ME interfaces
from a Nokia DCT3 phone (eg. 3310) and forward via GSMTAP to the Wireshark
protocol analyzer. This tool has been created by Duncan Salerno and is available on 
http://bb.osmocom.org/trac/wiki/dct3-gsmtap
13
-
Wireshark development release 1.6.0.rc2 compiled and patched with GSMTAP and 
SIMCARD in order to decode GSM traffic and SIM access. Instructions on how to 
patch it can be found at http://bb.osmocom.org/trac/wiki/dct3-gsmtap
-
NowSMS Gateway for an easy way of sending messages and connection to an SMS 
provider by SMPP - http://www.nowsms.com/download-free-trial
Figure 9 – Image from NowSMS showing the available connection types
-
Gemalto GemPC Twin reader for accessing the SIM
-
SIMinfo Python script for reading the SIM files (available at 
https://gsm.tsaitgaist.info/doku.php?id=siminfo) 
4.2 Theattack
I will not give the exact binary message that was sent, but describe why the issue is
possible.
First of all, it is important that the SIM to have the service “data download via SMS 
Point-to-Point allocated and active. Also the SIM must have a SIM Toolkit Application on it 
14
in order to work. Below you will find a table with the results from reading the SIM files with 
SIMinfo script.
File readed
result
card reader 
Gemplus GemPC Twin 00 00
card ATR 
3B 9F 95 80 1F C3 80 31 A0 73 BE 21 