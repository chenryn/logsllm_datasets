        end
        -- Navigation
        map('n', ']c', function()
          if vim.wo.diff then return ']c' end
          vim.schedule(function() gs.next_hunk() end)
          return ''
        end, {expr=true})
        map('n', '[c', function()
          if vim.wo.diff then return '[c' end
          vim.schedule(function() gs.prev_hunk() end)
          return ''
        end, {expr=true})
        -- Actions
        map('n', 'gs', gs.stage_hunk)
        map('n', 'gr', gs.reset_hunk)
        map('v', 'gs', function() gs.stage_hunk {vim.fn.line('.'), vim.fn.line('v')} end)
        map('v', 'gr', function() gs.reset_hunk {vim.fn.line('.'), vim.fn.line('v')} end)
        map('n', 'gS', gs.stage_buffer)
        map('n', 'gu', gs.undo_stage_hunk)
        map('n', 'gR', gs.reset_buffer)
        map('n', 'gp', gs.preview_hunk)
        map('n', 'gb', function() gs.blame_line{full=true} end)
        map('n', 'gb', gs.toggle_current_line_blame)
        map('n', 'gd', gs.diffthis)
        map('n', 'gD', function() gs.diffthis('~') end)
        map('n', 'ge', gs.toggle_deleted)
        -- Text object
        map({'o', 'x'}, 'ih', ':Gitsigns select_hunk')
      end
    })
    ```
    Usage:
    Some interesting bindings:
    - `]c`: Go to next diff chunk
    - `[c`: Go to previous diff chunk
    - `gs`: Stage chunk, it works both in normal and visual mode
    - `gr`: Restore chunk from index, it works both in normal and visual mode
    - `gp`: Preview diff, you can use it with `]c` and `[c` to see all the chunk diffs
    - `gb`: Show the git blame of the line as a shadowed comment
### [Diffview](diffview.md)
* New: Introduce DiffView.
    [Diffview](https://github.com/sindrets/diffview.nvim) is a single tabpage interface for easily cycling through diffs for all modified files for any git rev.
    Installation:
    If you're using it with NeoGit and Packer use:
    ```lua
      use {
        'NeogitOrg/neogit',
        requires = {
          'nvim-lua/plenary.nvim',
          'sindrets/diffview.nvim',
          'nvim-tree/nvim-web-devicons'
        }
      }
    ```
    Usage:
    Calling `:DiffviewOpen` with no args opens a new `Diffview` that compares against the current index. You can also provide any valid git rev to view only changes for that rev.
    Examples:
    - `:DiffviewOpen`
    - `:DiffviewOpen HEAD~2`
    - `:DiffviewOpen HEAD~4..HEAD~2`
    - `:DiffviewOpen d4a7b0d`
    - `:DiffviewOpen d4a7b0d^!`
    - `:DiffviewOpen d4a7b0d..519b30e`
    - `:DiffviewOpen origin/main...HEAD`
    You can also provide additional paths to narrow down what files are shown `:DiffviewOpen HEAD~2 -- lua/diffview plugin`.
    Additional commands for convenience:
    - `:DiffviewClose`: Close the current diffview. You can also use `:tabclose`.
    - `:DiffviewToggleFiles`: Toggle the file panel.
    - `:DiffviewFocusFiles`: Bring focus to the file panel.
    - `:DiffviewRefresh`: Update stats and entries in the file list of the current Diffview.
    With a Diffview open and the default key bindings, you can:
    - Cycle through changed files with `` and ``
    - You can stage changes with `-`
    - Restore a file with `X`
    - Refresh the diffs with `R`
    - Go to the file panel with `e`
* New: [Use the same binding to open and close the diffview windows.](diffview.md#use-the-same-binding-to-open-and-close-the-diffview-windows)
    ```lua
    vim.keymap.set('n', 'dv', function()
      if next(require('diffview.lib').views) == nil then
        vim.cmd('DiffviewOpen')
      else
        vim.cmd('DiffviewClose')
      end
    end)
    ```
### [Beets](tridactyl.md)
* New: Introduce tridactyl.
    [Tridactyl](https://github.com/tridactyl/tridactyl) is a Vim-like interface for Firefox, inspired by Vimperator/Pentadactyl.
    In the article you'll also find:
    * [How to select text on the page](tridactyl.md#select-text-from-the-page)
* New: Guide on how to start using it.
    You’ll want to set a few basic options before you start using beets. The [configuration](https://beets.readthedocs.io/en/stable/reference/config.html) is stored in a text file. You can show its location by running `beet config -p`, though it may not exist yet. Run `beet config -e` to edit the configuration in your favorite text editor. The file will start out empty, but here’s good place to start:
    ```yaml
    directory: ~/music
    library: ~/data/musiclibrary.db
    ```
    The default configuration assumes you want to start a new organized music folder (that directory above) and that you’ll copy cleaned-up music into that empty folder using beets’ `import` command. But you can configure beets to behave many other ways:
    - Start with a new empty directory, but move new music in instead of copying it (saving disk space). Put this in your config file:
        ```yaml
        import:
            move: yes
        ```
    - Keep your current directory structure; importing should never move or copy files but instead just correct the tags on music. Put the line `copy: no` under the `import:` heading in your config file to disable any copying or renaming. Make sure to point `directory` at the place where your music is currently stored.
    - Keep your current directory structure and do not correct files’ tags: leave files completely unmodified on your disk. (Corrected tags will still be stored in beets’ database, and you can use them to do renaming or tag changes later.) Put this in your config file:
        ```yaml
        import:
            copy: no
            write: no
        ```
        to disable renaming and tag-writing.
* New: [Importing your library.](beets.md#importing-your-library)
    The next step is to import your music files into the beets library database. Because this can involve modifying files and moving them around, data loss is always a possibility, so now would be a good time to make sure you have a recent backup of all your music. We’ll wait.
    There are two good ways to bring your existing library into beets. You can either: (a) quickly bring all your files with all their current metadata into beets’ database, or (b) use beets’ highly-refined autotagger to find canonical metadata for every album you import. Option (a) is really fast, but option (b) makes sure all your songs’ tags are exactly right from the get-go. The point about speed bears repeating: using the autotagger on a large library can take a very long time, and it’s an interactive process. So set aside a good chunk of time if you’re going to go that route.
    If you’ve got time and want to tag all your music right once and for all, do this:
    ```bash
    beet import /path/to/my/music
    ```
    (Note that by default, this command will copy music into the directory you specified above. If you want to use your current directory structure, set the import.copy config option.) To take the fast, un-autotagged path, just say:
    ```bash
    beet import -A /my/huge/mp3/library
    ```
    Note that you just need to add `-A` for “don’t autotag”.
### [Gancio](gancio.md)
* New: Introduce Gancio.
    [Gancio](https://gancio.org/) is a shared agenda for local communities.
    - [Docs](https://gancio.org/)
    - [Source](https://framagit.org/les/gancio)
    - [Home](https://gancio.org/)
    - [Telegram bridge](https://framagit.org/bcn.convocala/gancio-plugin-telegram-bridge)
* New: [Add radar squat.](gancio.md#references)
    https://radar.squat.net
### [google chrome](google_chrome.md)
* Correction: Update the installation steps.
    * Import the GPG key, and use the following command.
      ```bash
      sudo wget -O- https://dl.google.com/linux/linux_signing_key.pub | gpg --dearmor > /usr/share/keyrings/google-chrome.gpg
      ```
    * Once the GPG import is complete, you will need to import the Google Chrome repository.
      ```bash
      echo 'deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome.gpg] http://dl.google.com/linux/chrome/deb/ stable main' | sudo tee /etc/apt/sources.list.d/google-chrome.list
      ```
    * Install the program:
      ```bash
      apt-get update
      apt-get install google-chrome-stable
      ```
### [Gotify](gotify.md)
* New: Introduce gotify.
    [Gotify](https://github.com/gotify/server) is a simple server for sending and receiving messages in real-time per WebSocket.
    Not there yet:
    - [Reactions on the notifications](https://github.com/gotify/server/issues/494)
### [Hard drive health](hard_drive_health.md)
* New: [Check the disk health with smartctl.](hard_drive_health.md#check-the-health-of-a-disk-with-smartctl)
    Start with a long self test with `smartctl`. Assuming the disk to test is
    `/dev/sdd`:
    ```bash
    smartctl -t long /dev/sdd
    ```
    The command will respond with an estimate of how long it thinks the test will
    take to complete.
    To check progress use:
    ```bash
    smartctl -A /dev/sdd | grep remaining
    smartctl -c /dev/sdd | grep remaining
    ```
    Don't check too often because it can abort the test with some drives. If you
    receive an empty output, examine the reported status with:
    ```bash
    smartctl -l selftest /dev/sdd
    ```
    If errors are shown, check the `dmesg` as there are usually useful traces of the error.
* New: [Check the health of a disk with badblocks.](hard_drive_health.md#check-the-health-of-a-disk-with-badblocks)
    The `badblocks` command will write and read the disk with different patterns, thus overwriting the whole disk, so you will loose all the data in the disk.
    This test is good for rotational disks as there is no disk degradation on massive writes, do not use it on SSD though.
    WARNING: be sure that you specify the correct disk!!
    ```bash
    badblocks -wsv -b 4096 /dev/sde | tee disk_analysis_log.txt
    ```
    If errors are shown is that all of the spare sectors of the disk are used, so you must not use this disk anymore. Again, check `dmesg` for traces of disk errors.
### [i3wm](i3wm.md)
* New: [Move the focus to a container.](i3wm.md#move-the-focus-to-a-container)
    Get the container identifier with `xprop` and then:
    ```bash
    i3-msg '[title="khime"]' focus
    i3-msg '[class="Firefox"]' focus
    ```
* New: [Interact with Python.](i3wm.md#interact-with-python)
    Install the `i3ipc` library:
    ```bash
    pip install i3ipc
    ```
    Create the connection object:
    ```python
    from i3ipc import Connection, Event
    i3 = Connection()
    ```
    Interact with i3:
    ```python
    focused = i3.get_tree().find_focused()
    print('Focused window %s is on workspace %s' %
          (focused.name, focused.workspace().name))
    outputs = i3.get_outputs()
    print('Active outputs:')
    for output in filter(lambda o: o.active, outputs):
        print(output.name)
    i3.command('focus left')
    for container in i3.get_tree().find_fullscreen():
        container.command('fullscreen')
    root = i3.get_tree()
    print(root.name)
    for con in root:
        print(con.name)
    def on_workspace_focus(self, e):
        # The first parameter is the connection to the ipc and the second is an object
        # with the data of the event sent from i3.
        if e.current:
            print('Windows on this workspace:')
            for w in e.current.leaves():
                print(w.name)
    def on_window_focus(i3, e):
        focused = i3.get_tree().find_focused()
        ws_name = "%s:%s" % (focused.workspace().num, focused.window_class)
        i3.command('rename workspace to "%s"' % ws_name)
    i3.on(Event.WORKSPACE_FOCUS, on_workspace_focus)
    i3.on(Event.WINDOW_FOCUS, on_window_focus)
    i3.main()
    ```
### [Jellyfin](jellyfin.md)
* New: [Fix Corrupt: SQLitePCL.pretty.SQLiteException: database disk image is malformed.](jellyfin.md#corrupt:-sqlitepcl.pretty.sqliteexception:-database-disk-image-is-malformed)
    If your server log file shows SQLite errors like the following example your jellyfin.db file needs attention.
    ```
    'SQLitePCL.pretty.SQLiteException'
    ```
    Typical causes of this are sudden and abrupt terminations of the Emby server process, such as a power loss, operating system crash, force killing the server process, etc.
    To solve it there are many steps:
    * [Remove Database Locks](jellyfin.md#remove-database-locks)
    * [Check Database Integrity and Recover Database](jellyfin.md#check-database-integrity-and-recover-database)
    * [Reset Library Database & Load Fresh](jellyfin.md#reset-library-database-&-load-fresh)