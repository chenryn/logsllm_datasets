### 4.1 Disjoint Parent and Child NS Sets

For our experiment, we configured the test domain (marigliano.xyz) to have disjoint NS sets at the parent and child levels, as illustrated in Fig. 2. Specifically, the parent authoritative servers (ns1.marigliano.xyz and ns3.marigliano.xyz) were set to [ns1, ns3].marigliano.xyz, while the child authoritative servers (ns2.marigliano.xyz and ns4.marigliano.xyz) were set to [ns2, ns4].marigliano.xyz.

**Figure 2.** Disjoint NS Set Experiment for marigliano.xyz

To conduct this experiment, we configured the zone files of [ns1–ns4] to respond with [ns2, ns4] when explicitly queried, mirroring the records pointed to by the child authoritative servers. This setup allows us to identify resolvers that are parent-centric, as they will only contact [ns1, ns3].

We used approximately 9,000 Atlas probes as vantage points, configuring them to send A queries through each of their resolvers for $probeid-$timestamp.marigliano.xyz. This unique identifier prevents interference between multiple probes. The TTL value for the record was set to 30 seconds, and we probed every 600 seconds to ensure resolver caches were empty for each round of measurements.

To determine which NS records were used to answer the queries, we configured [ns1, ns3] to respond with the IP 42.42.42.42 and [ns2, ns4] with the IP 43.43.43.43. This approach simplifies parsing and avoids duplicated detection.

**Figure 3a.** Results for Normal Responses

In the initial round of measurements, most resolvers used the NS set provided by the parent, although 253 unique resolver IPs contacted the child name servers. This could be due to explicit NS queries or shared upstream caches. In subsequent rounds, more traffic shifted to the child name servers [ns2, ns4] as resolvers learned about the child delegation from the "authority section" in the response to the A query. However, not all traffic went to the child NS set, as some resolvers do not trust data from the "authority section" due to mitigations against the Kaminsky attack. This experiment highlights that domain owners should update both the parent and child NS sets to ensure effective changes.

**Figure 3b.** Results with Minimal Responses

In a second experiment, we configured [ns1–ns4] to provide minimal responses, excluding extra records in the authority and additional sections. As expected, almost all resolvers sent queries to the parent NS set, with only about 40 vantage points receiving data from the child NS set. This indicates that resolvers likely performed explicit NS queries. With the increasing prevalence of minimal responses, it is crucial to keep parent and child NS sets synchronized.

**Real-World Case: .in**

On 2019-10-30, we notified India’s .in domain, which had ns[1–6].neustar.in as NS records at the parent and [ns1-ns6].registry.in at the child. Although both sets pointed to the same A/AAAA records, we recommended synchronization. The issue was resolved on 2019-11-02. Additionally, 15 other internationalized ccTLDs run by India had the same issue and were also fixed.

### 4.2 Parent NS Set Is a Subset of Child

As shown in Table 1, 69–73% of cases where parent and child NS sets differ involve the child NS set containing additional NS records. This is often done to spread load over more name servers, but it can lead to misconfigurations.

To investigate the impact, we set up an experiment with [ns1, ns3] at the parent and [ns1, ns2, ns3, ns4] at the child. We configured [ns1, ns3] to give different responses to A queries than [ns2, ns4], allowing us to track queries answered by the extra NS records.

**Figure 4a.** Results for Normal Responses

Most resolvers used the NS records provided by the parent, with the extra name servers receiving only ~24% of the queries. When we configured the name servers to return minimal responses, virtually no resolvers contacted the extra name servers in the child NS set (Fig. 4b). This underscores the importance of updating both the parent and child NS sets for even load distribution.

**Real-World Case: att.com**

We discovered that AT&T's main domain, att.com, had a parent NS set containing [ns1...ns3].attdns.com, while the child had [ns1...ns4].attdns.com. We notified AT&T, and the issue was resolved on 2019-10-24 by adding the fourth name server (ns4.attdns.com) to the parent.

### 4.3 Parent NS Set Is a Superset of Child

Approximately 14–18% of domain names with differing NS sets at the parent and child have extra NS records at the parent (P ⊃ C in Table 1). This can occur if operators forget to remove unused name servers or add new ones at the parent but not the child.

To study the consequences, we conducted experiments using Atlas VPs, setting four NS records at the parent ([ns1, ns2, ns3, ns4]) and two at the child ([ns2, ns4]). Our goal was to determine the ratio of queries answered by the extra NS records at the parent.

**Figure 5a.** Results for Normal Responses

The servers listed in both the parent and child ([ns2, ns4]) answered, on average, 68% of the queries. When minimal responses were configured (Fig. 5b), queries were distributed evenly among the NS records in the parent. This suggests that including an authority section in the A query response causes some resolvers to prefer the child NS set over the parent. For example, Atlas VP (21448, 129.13.64.5) distributed queries more evenly.

**Figure 5b.** Results with Minimal Responses

This experiment highlights the need for consistent NS set configurations to ensure proper query distribution and avoid potential issues.