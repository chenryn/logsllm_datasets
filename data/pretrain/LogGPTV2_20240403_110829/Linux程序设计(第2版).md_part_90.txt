---
## Page 475
第15章工具命令语言Tcl
457
1.if命令
if exprl 7then7 body1
ifexpr1 7then?body1 olseif expr2 pthen7 body2 7alseif?...7else7?bocyv
if命令对表达式expr1进行求值的办法与expr命令是一样的。如果结果是一个布尔真值（true，
即一个非负的数字，或者一个值为true或yes的字符串），就执行body1并返问它的值。否则，对
下一个elseif子句重复同样的处理（如果有的话，可以没有）。如果所有elseif子句中的表达式没
有一个求值为一个布尔真值，就将执行eise子句（如果有的话）并返回其结果。如果一个子句也
没有被执行，if命令将返回一个空字符串。布尔假值（false）是用数值零或者值为false或no的字
符串表示的。
body部分只能是一个事物：即一个“单词”或一个用方括号括起来的命令。注意关键字then
和else并不是必不可少的，但它们能让程序更容易阅读。编写这一结构的推荐办法是使用下面这
样的形式：
if (expr1)(
1else{
body1
body2
花括号这种奇怪的布局，特别是把else和花括号写在同一行上的做法，是为了让解释器明白
后面还有东西。如果不这样做，Tcl会认为前面已经是一个完整的if语句并正常地执行了它，然
后认为下一个语句是以else命令起头的，从而给出一个语法错误。
2.switch命令
Tcl语言中的switch命令直接模仿UNIX的shell里的case语句和C语言中的switch（它只能在整
数值上I.作）。参数string将依次与各个palterm进行比较（请参考后面内容里对匹配问题的介绍）。
配一切”，它能够匹配所有其他模版不能匹配一切字符串。
options参数控制着将要使用的匹配动作。如表15-3所示：
表15-3
switch命令的选项
说明
*exact
字符串和模版完全匹配
-g1ob
使用全局（即sbell风格的）匹配（就象UNIX里的文件名匹配）
-regexp
使用规则表达式进行比较，就象UNIX操作系统的egrep工具程序
用来标记选项结束，之所以使用了两个短划线是为了避免与只使用了一个短划线的发生冲突
要想对switch命令的参数做更细致的控制，我们可以通过两种办法来安排匹配模版和程序体。
把匹配模版和程序体放在花括号里有两个效果：一是防止被替换，二是不必在语句末尾加上反
斜线就能够让匹配模版和程序体延续好几行。
加入jaVa编程群：524621833
---
## Page 476
458
Linux程序设计
请看下面这个程序，我们在后面的内容里还会见到它，这个程序将展示switch在处理程序的
参数方面的用途：
foreach arg Sargv {
switch -glob  Sarg(
-
{set FileToRead (string range Sarg 2end]}
(set VerbosePlag true)
default (orror *bad argument:$arg\n$Uoage′: exit 1)
-h
(puts stderr SUsage; exit 1)
3.for命令
for start test next body
Tcl中的for语句与C语言中的for语句非常相似。它的start、next和body参数都必须是Tel语言
的命令字符串，而test必须构成一个布尔表达式。for命令会先执行start字符串，然后对test表达
式反复求值。如果它得出的是一个布尔真值（true）.就执行body字符串。如果在程序体里遇到
一个break命令，循环将立刻终止。程序体中的continue命令会使for循环重新开始。每执行完一
次循环，就对next表达式进行一次求值。请看下面的例子：
$ set n 5
set result 1
for（sot$n）（$i）（1ncx1-1）（
120
e sat result
大家应该能够看出来这段程序的作用是求n的阶乘。我们稍后将看到如何创建一个Tel过程来
完成这一功能。
4.while命令
while test body
while命令的操作情况与C语言中的while语句差不多。它的作用是反复对test字符串进行求值
并执行Tel命令body，直到test产生一个布尔假值（false）为止。类似于for命令中的情况，程序
体中的break或continue命令将分别终止或继续循环的执行。请看下面这个例子，它模仿UNIX的
cat命令对文件foo进行了处理。文件处理方面的内容请参看后面介绍输入输出的有关小节。
[，00y.udo}g
file3
while（（gets $fd 1ino]1=-1）（
puts *$line"
close $td
15.1.7错误处理
当Tcl解释器遇到一个错误的时候，它的常见做法是打印一条错误消息然后停止执行。但我
加入jaVa编程群：524621833
---
## Page 477
第15章工具命令语言Tcl
459
们有时候并不想在程序里这么做，Tcl也为此准备了一个引发和捕提错误并对之进行修补恢复的
功能。
1.error命令
error message ?info? ?code?
error命令的作用是产生一个错误，如果这个错误没有被捕捉或陷落，就会终止命令的执行。
消息messagc的作用就象是应用程序的一个指示灯，告诉我们什么东西出了问题。如果来取的是
解释器缺省的错误处理动作，这条消息就会显示给用户。
如果还给出了info参数，它就会被添加到全局变量errorInfo里去。这个命令里累记着错误发
生时的命令嵌套信息。随着每一条Tcl命令的执行，它会被添加到errorlnfo变量里，从而形成一
个堆栈跟踪记录。类似地，code参数的作用是把机器可读的信息添加到全局变量errorCode里去。
详细情况请参考Tcl的有关文档。
2.catch命令
cateh script 7varname?
catch会令对给定的script进行求值，陷落任何可能发生的错误。如果还给出了变量名
varname，它就会被设置为该段脚本的返回值或者任何返回的错误信息。
下面这个例子取自我们后面将要看到的Tcl程序concord：
it[catch (set Input [open $PileToRead r ]}res ]{
puts stderr *$res
即使试图打开输人文件的操作失败了，concord程序也会继续执行，不会因这个错误面停
下来，这在某些情况下是非常有用的。如果不象这样陷落有关的错误，许多程序就不可能运行
成功。
15.1.8字符串操作
Tcl从本质上来说就是一个基于字符串的语言解释器，所以它有众多对字符串和字符串值进
行操作处理的命令也就没什么奇怪的了。
对字符串进行处理的主要命令是string。根据将要执行的操作，它会用到一个选项和几个
参数。
1. string命令
string option arg 7arg? . ..
string命令的选项（及其相关参数）分别介绍如下。在用到或返回字符串下标时，它永远是
以零为起点计算的，也就是说，第一个字符的下标是0，第二个字符的下标是1，依次类推。
（1)first、last、compare选项
string flrst atringl string2
string compare stringl string2
string last stringl string2
first和last的作用是在string2里搜索string1的出现情况，如果找到匹配，就返回string2中的起
始下标：如果string1没有出现在string2里，就返回“-1"。如下所示：
加入jaVa编程群：524621833
---
## Page 478
460
Linux程序设计
string first"o"*foobar*
string 1ast“o"*foobar
compare的作用是进行字符对字符的比较。当string1小于、等于、大于string2的时候分别返
回“-1”、“0”或“1"，与C语言中的strcmp命令是一样的。如下所示；
(2)index选项
string index string num
index从string里返回一个字符。被返回的是下标位置为num处的那个字符，注意第一个字符
的下标是0，如下所示：
string index *ABC* 1
(3)length选项
string length string
length返回的是字符串string的长度。如下所示：
string length *ABC"
y
(4)maitch选项
string match pattern string
如果string匹配pattern，match返回“1”；否则返回“0"。这里进行的匹配在做法上与UNIX
的shell所使用的文件名通配符扩展匹配很相似。如下所示：
string match **B***ABC*
string match **g** "zzz"
(5)range选项
string range string first last
range返回的是string从下标位置first（从o开始）到last之间的那个子字符串，last可以使用关
键字end表示字符串的尾。如下所示：
p Caoav. due1 5u# 
DEF
(6)tolower和toupper选项
tring tolower string
string toupper string
这两个参数的作用是把string中的字符转换为相应的大小写形式后返回一个新的字符串。如
下所示：
wtring tolower "ABc*
abc
加入jaVa编程群：524621833
---
## Page 479
第15章工具命令语言Tcl
461
string toupper "abc
ABC
(7) trim、trimleft、trimright选项
string trim string ?chars?
string trimleft string ?chars?
string trimright string 7chars?
这些参数返回的都是string的子字符串，但其中去掉了chars集合中的特定字符。trim卡掉首
尾处的字符，而trimleft和trimright分别去掉首字符和尾字符。如果没有给出chars，被去掉的就
是空白字符。如下所示：
.. 
string trimleft *foobar"*for*
.
bar
fooba
(8)wordstart和wordend选项
string wordstart string index
string wordend string index
wordstart返回的是一个string中的下标值，它是包含着位置index的那个单词的第-一个字符的
下标。wordend返回的也是一个string中的下标值，它是包含着位置index的那个单词后面那个字
符位置的下标。如下所示：
string wordstart*Tcl is Cool*5
string wordend *Tcl is Cool 5
2.Glob扩展匹配
在“stringmatch”和“switch-glob”命令里要用到模版匹配的一种格式。这涉及到通配符，
如果你曾经使用过UNIX的shell，对通配符就应该有所了解。这里所说的通配符与shell的case语
句和文件名匹配操作所使用的是同样一些字符。
如果说一个字符串匹配了一个模版，就等于说除了模版中可能出现的特殊序列以外，它们
必须是--模-样的如表15-4所示。
表15-4
匹配任何字符序列
？
匹配任何一个字符
[...]
匹配集合中的任何一个字符
\
匹配特殊字符本身，比如“将匹配一个“”字符
3.regexp和regsub匹配
在这些命令里，字符串的匹配要使用模版来进行。这些模版里可以有由规则表达式给出的复杂
的匹配，如果读者使用过egrep工具或/ed/vi/emacs编辑器，就应该比较熟悉这些内容。
加入jaVa编程群：524621833
---
## Page 480
462
Linux程序设计
如果说一个字符串匹配了一个规则表达式，就等于说除了模版字符串里可能出现的特殊序
列以外，它们必须是一模一样的。这些特殊序列见表15-5：
表15-5
匹配任何一个字符
表示匹配前一项目的零次或多次出现
表示匹配前一项目的一次或多次出现
表示匹配两个表达式之-
[...]
匹配集合中的任何一个字符
匹配字符串的开始
$
匹配字符串的末尾
\
匹配特辣字符本身，比如“”将匹配一个“”学符
在规则长达式里还可以定义子匹配，方法是给它们加上一对圆括号“0)"。它们可以用来从
匹配中提取出子匹配，或者用在regsub的替换操作中。
4.append命令
apend varname ?value value ...?
append命令把value参数追加到变量varname当前值的未尾。如果参数的值比较长，这样做要
比-一个等价的赋值语句更有效率一如果你能给原来的字符串追加内容，为什么还要拷贝并丢乡
它呢？
给定如下所示的命令：
met a*This ia:*
set b *a long string
This is:
a long string
则下面两条Tcl命令是等价的（都可以得到“This is:along string"），但第二种做法更有效率，
ppend a $b
set a SaSb
5.regexp命令
regexp 7options? expression string 7match? 7submstch submatch ..,?