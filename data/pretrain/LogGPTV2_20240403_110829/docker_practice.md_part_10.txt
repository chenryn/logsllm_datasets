### 使用Docker Hub自动创建页面跟踪构建状态
在Docker Hub的自动创建页面中，您可以跟踪每次构建的状态。

### 私有仓库
有时候使用Docker Hub这样的公共仓库可能不太方便。在这种情况下，用户可以创建一个本地仓库供私人使用。本节将介绍如何设置和使用本地仓库。

#### 使用docker-registry构建私有镜像仓库
`docker-registry` 是官方提供的工具，用于构建私有的镜像仓库。以下是安装和运行该容器的步骤：

**通过Docker镜像运行**
1. 安装Docker后，可以通过获取官方的registry镜像来启动私有仓库：
   ```bash
   $ sudo docker run -d -p 5000:5000 registry
   ```
   这条命令会使用官方的registry镜像启动一个本地的私有仓库。用户还可以指定额外参数来配置私有仓库的位置，例如配置存储到Amazon S3服务：
   ```bash
   $ sudo docker run \
   -e SETTINGS_FLAVOR=s3 \
   -e AWS_BUCKET=acme-docker \
   -e STORAGE_PATH=/registry \
   -e AWS_KEY=AKIAHSHB43HS3J92MXZ \
   -e AWS_SECRET=xdDowwlK7TJajV1Y7EoOZrmuPEJlHYcNP2k4j49T \
   -e SEARCH_BACKEND=sqlalchemy \
   -p 5000:5000 \
   registry
   ```

2. 如果您想使用本地路径下的配置文件（如 `/home/user/registry-conf`），可以这样操作：
   ```bash
   $ sudo docker run -d -p 5000:5000 -v /home/user/registry-conf:/registry-conf -e DOCKER_REGISTRY_CONFIG=/registry-conf/config.yml registry
   ```

默认情况下，仓库会被创建在容器内的 `/tmp/registry` 目录下。如果您希望将镜像文件存放在主机上的特定位置，比如 `/opt/data/registry`，则可以执行以下命令：
```bash
$ sudo docker run -d -p 5000:5000 -v /opt/data/registry:/tmp/registry registry
```

**本地安装**
对于Ubuntu或CentOS等Linux发行版，可以直接从软件源安装`docker-registry`。
- **Ubuntu**
  ```bash
  $ sudo apt-get install -y build-essential python-dev libevent-dev python-pip liblzma-dev
  $ sudo pip install docker-registry
  ```
- **CentOS**
  ```bash
  $ sudo yum install -y python-devel libevent-devel python-pip gcc xz-devel
  $ sudo python-pip install docker-registry
  ```

或者，您也可以直接从GitHub克隆`docker-registry`项目并进行安装：
```bash
$ sudo apt-get install build-essential python-dev libevent-dev python-pip libssl-dev liblzma-dev libffi-dev
$ git clone https://github.com/docker/docker-registry.git
$ cd docker-registry
$ sudo python setup.py install
```
然后修改配置文件 `config/config_sample.yml` 中的 `dev` 模板段的 `storage_path` 到您希望使用的本地路径，并启动Web服务：
```bash
$ cp config/config_sample.yml config/config.yml
$ sudo gunicorn -c contrib/gunicorn.py docker_registry.wsgi:application
# 或者
$ sudo gunicorn --access-logfile - --error-logfile - -k gevent -b 0.0.0.0:5000 -w 4 --max-requests 100 docker_registry.wsgi:application
```

#### 在私有仓库上传、下载及搜索镜像
当您的私有仓库搭建完毕后，就可以开始使用它了。首先，利用`docker tag`标记一个镜像，再将其推送到仓库。例如，假设您的私有仓库地址为 `192.168.7.26:5000`。

1. 查看本地已有镜像：
   ```bash
   $ sudo docker images
   REPOSITORY TAG IMAGE ID CREATED VIRTUAL SIZE
   ubuntu latest ba5877dc9bec 6 weeks ago 192.7 MB
   ubuntu 14.04 ba5877dc9bec 6 weeks ago 192.7 MB
   ```

2. 标记并推送镜像至私有仓库：
   ```bash
   $ sudo docker tag ba5877dc9bec 192.168.7.26:5000/test
   $ sudo docker push 192.168.7.26:5000/test
   ```

3. 从另一台机器拉取此镜像：
   ```bash
   $ sudo docker pull 192.168.7.26:5000/test
   ```

为了批量上传多个镜像，您可以使用脚本 `push_images.sh`，它默认指向本地注册服务器 `127.0.0.1:5000`：
```bash
$ wget https://github.com/yeasy/docker_practice/raw/master/_local/push_images.sh; sudo chmod a+x push_images.sh
$ ./push_images.sh ubuntu:latest centos:centos7
```

#### 仓库配置文件
Docker Registry 提供了一些预定义的配置模板，用户可以根据需求选择适合的模板进行开发或生产部署。这些模板可以在 `config_sample.yml` 文件中找到，包括但不限于 `common`, `local`, `s3`, `dev`, `test`, `prod` 等。用户还可以自定义新的模板段。

**示例配置**
```yaml
common:
  loglevel: info
  search_backend: "_env:SEARCH_BACKEND:"
  sqlalchemy_index_database: "_env:SQLALCHEMY_INDEX_DATABASE:sqlite:////tmp/docker-registry.db"

prod:
  loglevel: warn
  storage: s3
  s3_access_key: _env:AWS_S3_ACCESS_KEY
  s3_secret_key: _env:AWS_S3_SECRET_KEY
  s3_bucket: _env:AWS_S3_BUCKET
  boto_bucket: _env:AWS_S3_BUCKET
  storage_path: /srv/docker
  smtp_host: localhost
  from_addr: PI:EMAIL
  to_addr: PI:EMAIL

dev:
  loglevel: debug
  storage: local
  storage_path: /home/myself/docker
```

#### Docker 数据管理
本章将讨论如何在Docker内部以及容器之间管理数据。主要涉及两种方式：数据卷 (Data volumes) 和数据卷容器 (Data volume containers)。

##### 数据卷
- **特性**
  - 可以被多个容器共享和重复使用
  - 对数据卷所做的更改会立即生效
  - 更新数据卷不会影响镜像本身
  - 即使删除了关联的容器，数据卷也会持续存在

- **创建数据卷**
  在运行容器时，通过 `-v` 参数创建并挂载一个数据卷：
  ```bash
  $ sudo docker run -d -P --name web -v /webapp training/webapp python app.py
  ```
  同样地，在Dockerfile中也能通过 `VOLUME` 指令添加新卷。

- **删除数据卷**
  若要在移除容器的同时一并清除其数据卷，可使用 `docker rm -v` 命令。

- **挂载主机目录作为数据卷**
  用户亦能指定将主机上的某个目录映射为容器内的数据卷：
  ```bash
  $ sudo docker run -d -P --name web -v /src/webapp:/opt/webapp training/webapp python app.py
  ```
  默认权限为读写，但可以通过追加 `:ro` 参数来设置只读权限。