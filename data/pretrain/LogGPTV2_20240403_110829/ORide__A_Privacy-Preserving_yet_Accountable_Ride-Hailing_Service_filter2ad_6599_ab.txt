d
dt
rdt
z
sigX{m}
BsigSP(m)
sigR−D{m}
Description
Ephemeral private key
Ephemeral public key
Public-key certiﬁcate of X
Planar coordinates of X, locX = (xX ,yX )
Number of available drivers
Degree of the polynomial
Deposit token
A random number to create a deposit token
A geographical zone
Message m and signature of X on m
Blind signature of the SP on message m
sigD{sigR{m}}
Table 1: Table of notations
4.1 Somewhat-Homomorphic Encryption
Somewhat-Homomorphic Encryption (SHE) is a special
kind of malleable encryption that allows a certain num-
ber of operations (additions and multiplications) over ci-
phertexts, without the need to decrypt them ﬁrst. All
SHE cryptosystems present semantic security, i.e., it is
not (computationally) possible to know if two different
encryptions conceal the same plaintext. Therefore, it is
possible for a party without the private key (in our case,
the SP), to operate on the ciphertexts produced by riders
and drivers, without obtaining any information about the
plaintext values. Additionally, we choose one of the most
recent and efﬁcient SHE schemes based on ideal lattices,
the FV scheme [16]. This scheme relies on the hardness
of the Ring Learning with Errors (RLWE) problem [29].
Note that whenever working with cryptosystems based
on ﬁnite rings, we usually work with integer numbers,
hence, from here on, we will assume that all inputs are
adequately quantized as integers. Here, we brieﬂy de-
scribe the main functions of the FV scheme.
For plaintext elements in a polynomial quotient ring
m ∈ Rt = Zt [X]/(X d + 1) and ciphertext elements in
Rq = Zq[X]/(X d +1), where q and t are positive integers
q > t deﬁning the upperbound of the ciphertext and plain-
text coefﬁcients, respectively. Let ∆ = (cid:98)q/t(cid:99) and χk, χn
be two short noise random distributions in Rq, the FV en-
cryption of a message m ∈ Rt with secret key ks = s ∼ χk
and public key kkkp = [p0, p1] = [(−a· s + e),a] ∈ R2
q, with
e drawn from χn and a randomly chosen in Rq, generated
by FV.GenKeys, results in a vector expressed as
ccc = FV.Enc(kkkp,m) = [p0·u+e1 +∆·m, p1·u+e2], (1)
where u is drawn from χk, and e1,e2 are short random
polynomials from the error distribution χn. All opera-
tions are in Rq.
Decryption of a ciphertext ccc = [c0,c1] works as
m = FV.Dec(ks,ccc) = ((cid:98)t · [c0 + c1 · s mod q]/q(cid:101)) mod t.
The scheme enables us to seamlessly add (FV.Add),
subtract (FV.Sub) and multiply (FV.Mul) two encryp-
Figure 1: Our optimized ride-matching approach enables
the SP to send to the rider a single ciphertext containing all
the squared distances (dist2
Di) between the rider and avail-
able drivers as opposed to one ciphertext per driver (naive ap-
proach).
0 + (c0 · c(cid:48)
1 + c1 · c(cid:48)
1 · v2 → [c(cid:48)(cid:48)
tions to obtain the encryption of the added, subtracted,
and multiplied plaintexts respectively; multiplications
consider the encryptions as polynomials in v: [c0,c1] →
co + c1 · v, such that the product between ccc and ccc(cid:48) is eval-
uated as: [c0,c1]· [c(cid:48)
1] → c0 · c(cid:48)
0,c(cid:48)
0)v +
c1 · c(cid:48)
1,c(cid:48)(cid:48)
0,c(cid:48)(cid:48)
2], which results in a ciphertext in
R3
q, with one extra polynomial. It is possible to recover a
fresh-like encryption with two polynomials by employ-
ing a relinearization primitive, which requires the usage
of a matrix (relinearization key) composed of encrypted
pieces of the secret key (we refer the reader to [16] for
further details).
4.2 Naive Approach
SHE can be applied to the ride-matching problem in
RHSs as follows. When a rider wants to make a ride
request, she generates an ephemeral FV public/private
key-pair together with a relinearization key. She uses the
public key to encrypt her planar coordinates and obtains
their encrypted forms. She then informs the SP about the
zone of her pick-up location, the public and relineariza-
tion keys and her encrypted planar coordinates. When
this information arrives at the SP, the SP broadcasts the
public key to all drivers available in that zone. Each
driver uses the public key to encrypt their planar coordi-
nates and sends them to the SP. The SP computes, based
on their encrypted coordinates, the encrypted distances
between the rider and the drivers, and it returns the en-
crypted distances to the rider, from which the rider can
decrypt and select the best match, e.g., the driver who is
the closest to her pick-up location.
However, due to the high ciphertext expansion, a naive
use of SHE would incur impractical computational and
bandwidth costs for the riders and the SP. Furthermore,
for each ride request, the SP would need to separately
compute the encrypted distances between the rider and
each of the drivers: For n drivers, this would mean n
distance calculations between encrypted polynomials of
1238    26th USENIX Security Symposium
USENIX Association
⋮							Naive		(n	ciphertexts)	Optimized																			#$%&'()			+				0			,+			0				,)+⋯+		0					,./0						#$%&'1)			+				0			,+			0				,)+⋯+		0					,./0													#$%&'231)	+				0			,+			0				,)+⋯+		0					,./0						#$%&'()			+		#$%&'1)				,+⋯+	#$%&'231)	,4/0+			0				,4+⋯+		0					,./0								d coefﬁcients each, and n ciphertext distances returned
to the rider. This would incur an unfeasible overhead
in terms of computations for the SP, consequently de-
laying the ride-matching for the rider and a considerable
bandwidth overhead at the rider-SP link, e.g., hundreds
of MBs if the system has several thousand drivers (see
Section 9.3).
4.3 Optimized Approach
We propose two optimizations: ciphertext packing and
transform processing, to enable the SP to operate on d
elements of Zt packed as a polynomial in Rt in a single
ciphertext, such that each encrypted operation affects all
the coefﬁcients in parallel (see Fig. 1). When the rider
decrypts this ciphertext, she can recover these d values
by looking at all the coefﬁcients. From here on, we as-
sume that d ≥ n, which will usually be the case due to
the security bounds on d (see Section 8); in other cases,
(cid:100)n/d(cid:101) encryptions can be used to pack the whole set of
distances analogously.
First, ciphertext packing enables the SP to pack n ci-
phertext distances into one ciphertext, hence reducing
the bandwidth overhead,
but this is not enough for
our goal. As we show in Section 5.4, we use all the
n packed encrypted planar coordinates from the drivers
independently of each other to calculate all the dis-
tances homomorphically in the same encrypted opera-
tion, so we need coefﬁcient-wise homomorphic opera-
tions. While polynomial additions and subtractions are
naturally coefﬁcient-wise, polynomial multiplication in
Rt (and its homomorphic counterpart in Rq) is a convolu-
tion product of the coefﬁcients. A well-known method
for transforming convolution products into coefﬁcient-
wise products (and vice-versa) in polynomial rings is
the Number-Theoretic Transform (NTT) [38], a Fourier
transform specialized for ﬁnite ﬁelds. This transform
is commonly used in the ciphertext space to speed up
polynomial multiplications that are then implemented as
coefﬁcient-wise products. More details about NTT can
be found in Appendix A.3.
In our case, for the second optimization,
in order
that products in the encrypted domain be translated into
coefﬁcient-wise products in the plaintext domain, we ap-
ply an inverse-NTT to plaintexts before encryption and
an NTT after decryption. The NTT does not affect addi-
tions and subtractions because it is linear. We note that
the NTT exists only for certain values of d and t, in par-
ticular when t is a prime and d divides t − 1. To make
operations in Zt simulate operations in N on our values,
we choose d = 2l as a power of two and t as a sufﬁ-
ciently large Proth prime (of the form k2l + 1, see [38])
such that all squared-Euclidean distances are less than t.
As a result, we improve on both the bandwidth and the
computation overhead.
Moreover, due to the low degree of the evaluated op-
erations (squared Euclidean distances), we avoid the use
of re-linearizations at the SP, which (a) reduces the need
to generate and to send the relinearization key from the
rider to the SP, (b) reduces the noise inside the encryp-
tions, and (c) enables more efﬁcient operations at the SP,
at the cost of one extra polynomial to represent the en-
crypted distance returned to the rider.
5 ORide
In this section, we present our solution, called ORide
(Oblivious Ride). We begin with an overview of the sys-
tem and then detail ORide operations.
5.1 ORide Overview
ORide provides strong location privacy and anonymity
for riders and drivers while still guaranteeing service ac-
countability, secure payment and reputation rating op-
erations. For this purpose, the riders and the drivers
must possess ride prerequisites (Section 5.2), including
anonymous credentials (ACs), deposit tokens, and digi-
tal certiﬁcates issued by the SP. To participate in the sys-
tem, both riders and drivers create anonymous sessions
by logging in to the service (Section 5.3) with their re-
spective ACs. Drivers periodically report to the SP the
geographical zones where they are located. These zones
are deﬁned by the SP to balance the network load in the
system and the size of the anonymity set of the zones
(Section 9.4). Note that, in contrast to PrivateRide, ex-
panding the size of a zone in ORide does not affect the
performance of the ride-matching and fare-calculation
operations (Section 5.4).
When a rider initiates a ride request, the SP, the rider
and drivers are involved in a ride set-up procedure (Sec-
tion 5.4) that matches the rider to a driver. In addition,
as in current RHSs, the rider and the driver agree on the
fare based on the estimated distance and duration of the
ride [34,41]. Some random time after the fare agreement,
they terminate their anonymous sessions. When the ride
is completed, the driver creates a new anonymous session
and notiﬁes the SP that she is available again. Note that
drop-off times and locations are not reported to the SP.
Moreover, some time after the ride ﬁnishes, i.e., at the
end of the day, the rider and driver perform ride-payment
and reputation-rating operations (Section 5.5).
5.2 Ride Prerequisites
Digital certiﬁcates. We assume each rider and driver
has a digital certiﬁcate denoted as certR or certD, issued
by the SP at registration time. Each certiﬁcate contains a
public key and a randomly generated ID. The SP can use
this random ID to ﬁnd the real identity of the certiﬁcate
holder. Note that the digital certiﬁcates are not used by
the riders and drivers to log in to the service, and they are
USENIX Association
26th USENIX Security Symposium    1239
not revealed to the SP during a ride. They are used by the
riders and drivers to identify each other during the ride as
part of ORide’s accountability mechanism (Section 6).
Anonymous credentials. ORide relies on Anonymous
Credentials Light (ACL) [9], a linkable anonymous cre-
dential system, i.e., a user should use an AC only once
to avoid her transactions from being linkable. To use the
service anonymously, each user (rider or driver) requests
ACs in advance from the SP, using their digital certiﬁ-
cate. Hereafter, we denote the anonymous credential for
a user X as ACX, where X is R for riders or D for drivers.
Each ACX contains the average reputation score repX, an
expiration date expX, and the secret key skX associated
with the public key pubX in the digital certiﬁcate of the
AC holder. To differentiate between riders and drivers
in the system, an AC also contains a role attribute roleX,
i.e., roleX = 1 if X = D, and roleX = 0 if X = R.
Note that to prevent the SP from de-anonymizing
users by correlating the time an AC is issued with the
time it is used, or by relying on the AC’s expiration date,
the user’s app could automatically request ACs from the
SP at a certain time (e.g., at midnight), and the expira-
tion date is coarse-grained, e.g., all ACs issued in a day
expire at the end of that day. The reputation scores can-
not be used by the SP to de-anonymize the users, as they
are never shown to the SP during the rides. Furthermore,
to prevent users from abusing the system, the SP deﬁnes
a threshold on the number of ACs a rider or driver can
acquire per day.
Deposit token. Each rider is required to possess a de-
posit token and give it to the SP at the beginning of a
ride. In case of misbehavior, the token is not returned to
the rider. A deposit token, denoted as dt, is worth a ﬁxed
amount of money deﬁned by the SP. It is a random num-
ber generated by the rider, blindly signed by the SP (by
using blind-signature schemes e.g.,
[13]) such that the
SP is not able to link a token it issued and a token spent
by a rider. A rider deposits a token to the SP in the begin-
ning of the ride, and she is issued a new token by the SP
after the ride payment is successfully completed. Note
that the driver is not required to make a deposit because,
during the ride set-up operation, the rider and driver ex-
change their digital certiﬁcates with each other. Conse-
quently, if the driver misbehaves, the SP can identify the
driver by collaborating with the rider. We discuss this in
more detail in Section 5.6.
5.3 Log in to the Service
To use the service, the rider and the driver need to create
anonymous sessions to the SP: to do so, they use their
anonymous credentials ACR and ACD, respectively.
Rider. The rider sends to the SP the rider-role roleR and
the expiry date expR stated in her ACR. In addition, she
proves to the SP that the claimed values are correct and
that, in a zero-knowledge fashion, she knows the secret
key skR tied to the ACR.
Driver. Similarly to the rider, by using her ACD, the
driver follows the same aforementioned procedure to
anonymously log in to the service.
The SP assigns a one-time session ID to each anony-
mous session, to keep track of that session for coordina-
tion. For the sake of simple exposition, hereafter, we ex-
clude this one-time session ID from messages exchanged
between the rider/driver and the SP.
5.4 Ride Set-up
When a rider requests a ride, the operations performed
by the rider, the drivers and the SP are as follows (see
Fig. 2).
1. The rider generates an ephemeral FV public/private
key pair, denoted as (kkkp,ks). She ﬁrst computes the
polynomial representations of the coordinates pxR =
i=0 xRX i and pyR = ∑d−1
∑d−1
i=0 yRX i. She then applies the
inverse-NTT on the polynomials and uses kkkp to encrypt
these values: cccxR = FV.Enc(kkkp, NTT−1(pxR )) and sim-
ilarly for cccyR. She then sends the zone of her pick-up
location (denoted as z), deposit token dt, kkkp, cccxR and
cccyR to the SP.
2. The SP checks the validity of the deposit token, i.e., it
has not been used before. If the token is valid, the SP
adds it to the list of used tokens. It then sends to each
driver in zone z a different randomly permuted index
0 ≤ i < n and the public key kkkp.
xD = xDiX i and qi
yD = yDiX i.
3. The i-th driver encodes her coordinates in the i-th
coefﬁcient: qi
Simi-
larly to the rider, she applies the inverse-NTT, en-