location /a.html {ast
> rewrite /a.html /b.html break; #直接结束匹配,不再读其他语句,结束请求
}
location /b.html {
> rewrite /b.html /c.html;
}
访问a,返回b,
> rewrite /a.html /b.html redirect; 临时重定向
>
> rewrite /a.html /b.html permament; 永久重定向
临时重定向\\永久重定向
蜘蛛,耙网站(百度,搜狗,google,360等搜索引擎)
# NSD Operation DAY03
案例1：Nginx反向代理(第七层代理)
案例2：Nginx的TCP/UDP调度器(第四层代理)
案例3：Nginx常见问题处理
# 1 案例1：Nginx反向代理(七层)
./configure时候不用安装额外的模块
反向代理（Reverse
Proxy）方式是指以代理服务器来接受Internet上的连接请求，然后将请求转发给内部网络上的服务器；并将从服务器上得到的结果返回给Internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。
通常的代理服务器，只用于代理内部网络对Internet的连接请求，客户机必须指定代理服务器,并将本来要直接发送到Web服务器上的http请求发送到代理服务器中。当一个代理服务器能够代理外部网络上的主机，访问内部网络时，这种代理服务的方式称为反向代理服务。
七层代理(应用层)
物理层 数据链路层 网络层 传输层 会话层 表示层 应用层
使用Nginx实现Web反向代理功能，实现如下功能：
-   后端Web服务器两台，可以使用httpd实现
-   Nginx采用轮询的方式调用后端Web服务器
-   两台Web服务器的权重要求设置为不同的值
-   最大失败次数为1，失败超时时间为30秒
1.2 方案
使用4台RHEL7虚拟机，其中一台作为Nginx代理服务器，该服务器需要配置两块网卡，IP地址分别为192.168.4.5和192.168.2.5，两台Web服务器IP地址分别为192.168.2.100和192.168.2.200。客户端测试主机IP地址为192.168.4.10。如图-1所示。
![image001 (1)](media/image16.png){width="5.924305555555556in"
height="1.5506944444444444in"}
1.3 步骤
实现此案例需要按照如下步骤进行。
## 步骤一：部署实施后端Web服务器
### 1）部署后端Web1服务器
后端Web服务器可以简单使用yum方式安装httpd实现Web服务，为了可以看出后端服务器的不同，可以将两台后端服务器的首页文档内容设置为不同的内容。
\[root@web1 \~\]# yum -y install httpd
\[root@web1 \~\]# echo \"192.168.2.100\" \> /var/www/html/index.html
\[root@web1 \~\]# systemctl restart httpd
\[root@web1 \~\]# firewall-cmd \--set-default-zone=trusted
\[root@web1 \~\]# setenforce 0
### 2）部署后端Web2服务器
\[root@web2 \~\]# yum -y install httpd
\[root@web2 \~\]# echo \"192.168.2.200\" \> /var/www/html/index.html
\[root@web2 \~\]# systemctl restart httpd
\[root@web2 \~\]# firewall-cmd \--set-default-zone=trusted
\[root@web2 \~\]# setenforce 0
## 步骤二：配置Nginx服务器，添加服务器池，实现反向代理功能
### 1）修改/usr/local/nginx/conf/nginx.conf配置文件
\[root@proxy \~\]# vim /usr/local/nginx/conf/nginx.conf
\...
http{
\...
upstream webserver { #增加名为"server"的集群,在http内加
server 192.168.2.100:80;
server 192.168.2.200:80;
}
server {
listen 80;
server_name www.a.com;
if (\$http_user_agent \~\* firefox) {
rewrite /(.\*) /firefox/\$1;
location / {
proxy_pass http://webserver; #调用函数
root html; #可有可无,无任何作用
index index.html index.htm; #可有可无,无任何作用
}
}
### 2）重启nginx服务
\[root@proxy \~\]# nginx -s reload
\[root@proxy \~\]# curl http://192.168.4.5
web11
\[root@proxy \~\]# curl http://192.168.4.5
web2222
### 3）客户端使用浏览器访问代理服务器测试轮询效果
upstream webserver {
server 192.168.2.100:80 weight=2; #添加权重属性
server 192.168.2.200:80;
}
\[root@proxy \~\]# nginx -s reload
\[root@proxy \~\]# curl http://192.168.4.5
web11
\[root@proxy \~\]# curl http://192.168.4.5
web11
\[root@proxy \~\]# curl http://192.168.4.5
web11
\[root@proxy \~\]# curl http://192.168.4.5
web2222
## 步骤三：配置upstream服务器集群池属性
### 1）设置失败次数，超时时间，权重
weight可以设置后台服务器的权重，max_fails可以设置后台服务器的失败次数，fail_timeout可以设置后台服务器的失败超时时间。
#weight设置服务器权重值，默认值为1
#max_fails=2 设置最大失败次数,尝试2次不成功,换下个server
#fail_timeout=30设置失败超时时间，单位为秒,请求无反应,30s内不在询问
#down标记服务器已关机，不参与集群调度
在定义上新增:
\[root@proxy \~\]# vim /usr/local/nginx/conf/nginx.conf
.. ..
http {
.. ..
upstream webserver {
server 192.168.2.100 weight=1 max_fails=1 fail_timeout=30;
server 192.168.2.200 weight=2 max_fails=2 fail_timeout=30;
server 192.168.2.101 down;
}
server {
listen 80;
server_name localhost;
location / {
proxy_pass http://webserver;
}
}
### 2）重启nginx服务
\[root@proxy \~\]# /usr/local/nginx/sbin/nginx -s reload
#请先确保nginx是启动状态，否则运行该命令会报错,报错信息如下：
#\[error\] open() \"/usr/local/nginx/logs/nginx.pid\" failed (2: No such
file or directory)
### 3）关闭一台后端服务器（如web1）
\[root@web1 \~\]# systemctl stop httpd
### 4）客户端使用浏览器访问代理服务器测试轮询效果
\[root@client \~\]# curl http://192.168.4.5 //使用该命令多次访问查看效果
### 5）再次启动后端服务器的httpd（如web1）
\[root@web1 \~\]# systemctl start httpd
### 6）客户端再次使用浏览器访问代理服务器测试轮询效果
\[root@client \~\]# curl http://192.168.4.5 //使用该命令多次访问查看效果
## 步骤四：配置upstream服务器集群的调度算法
### 设置相同客户端访问相同Web服务器
\[root@proxy \~\]# vim /usr/local/nginx/conf/nginx.conf
.. ..
http {
.. ..
#通过ip_hash设置调度规则为：相同客户端访问相同服务器
在定义上增加:
upstream webserver {
ip_hash;
server 192.168.2.100:80 max_fails=2 fail_timeout=10;
server 192.168.2.200:80;
}
.. ..
server {
listen 80;
server_name www.tarena.com;
location / {
proxy_pass http://webserver;
}
}
### 2）重启nginx服务
\[root@proxy \~\]# /usr/local/nginx/sbin/nginx -s reload
#请先确保nginx是启动状态，否则运行该命令会报错,报错信息如下：
#\[error\] open() \"/usr/local/nginx/logs/nginx.pid\" failed (2: No such
file or directory)
### 3）客户端使用浏览器访问代理服务器测试轮询效果
\[root@client \~\]# curl http://192.168.4.5 //使用该命令多次访问查看效果
### 4) ip_hash原理
1/生成 哈希值加密16进制数,
\[root@proxy \~\]# echo \"192.168.4.10\" \|md5sum
95e033fe68643fd1e4c11190191baead -
2/将16进制数%2取余,(集群中有2台server)
取余之后要么是0要么是1,,,比如是0,再将0定位给第一个server.
每次来访问都将这个IP换算哈希值,再取余来判断值.最后定位分配server
7层代理,调度(HTTP)
4层代理,调度(tcp/udp)
# 4层与7层代理的区别
所谓四层就是基于IP+端口的负载均衡；七层就是基于URL等应用层信息的负载均衡；同理，还有基于MAC地址的二层负载均衡和基于IP地址的三层负载均衡。
换句换说，二层负载均衡会通过一个虚拟MAC地址接收请求，然后再分配到真实的MAC地址；三层负载均衡会通过一个虚拟IP地址接收请求，然后再分配到真实的IP地址；四层通过虚拟IP+端口接收请求，然后再分配到真实的服务器；七层通过虚拟的URL或主机名接收请求，然后再分配到真实的服务器。
4层是TCP层，使用IP+端口的方式。类似路由器，只是修改下IP地址，然后转发给后端服务器，TCP三次握手是直接和后端连接的。只不过在后端机器上看到的都是与代理机的IP的established而已。
7层代理则必须要先和代理机三次握手后，才能得到7层（HTT层）的具体内容，然后再转发,能写更多的转发规则
七层应用负载的好处，是使得整个网络更智能化。
将对图片类的请求转发到特定的图片服务器并可以使用缓存技术；
将对文字类的请求可以转发到特定的文字服务器并可以使用压缩技术。
这种方式可以对客户端的请求和服务器的响应进行任意意义上的修改，极大的提升了应用系统在网络层的灵活性。很多在后台，例如Nginx或者Apache上部署的功能可以前移到负载均衡设备上，例如客户请求中的Header重写，服务器响应中的关键字过滤或者内容插入等功能。
另外一个功能就是安全性。网络中最常见的SYN
Flood攻击，即黑客控制众多源客户端，使用虚假IP地址对同一目标发送SYN攻击，通常这种攻击会大量发送SYN报文，耗尽服务器上的相关资源，以达到Denial
of
Service(DoS)的目的。从技术原理上也可以看出，四层模式下这些SYN攻击都会被转发到后端的服务器上；而七层模式下这些SYN攻击自然在负载均衡设备上就截止，不会影响后台服务器的正常运营。另外负载均衡设备可以在七层层面设定多种策略，过滤特定报文，例如SQL
Injection等应用层面的特定攻击手段，从应用层面进一步提高系统整体安全。
7层负载均衡，主要还是着重于应用HTTP协议，所以其应用范围主要是众多的网站或者内部信息平台等基于B/S开发的系统。
4层负载均衡则对应其他TCP应用，例如基于C/S开发的ERP等系统。
# 2 案例2：Nginx的TCP/UDP调度器(四层代理)
2.1 问题
> 四层代理 \-\--实现ssh远程连接
>
> 使用Nginx实现TCP/UDP调度器功能，实现如下功能：
-   后端SSH服务器两台
-   Nginx编译安装时需要使用\--with-stream开启ngx_stream_core_module模块
-   Nginx采用轮询的方式调用后端SSH服务器
结果:用client ssh 192.168.4.5,直接轮询192.168.2.100与192.168.2.200
并不是做网站,做第4层代理
nginx从1.9版本才开始支持该功能,
## 步骤一：部署支持4层TCP/UDP代理的Nginx服务器
### 1）部署nginx服务器
编译安装必须要使用\--with-stream参数开启4层代理模块。\[root@proxy \~\]#
nginx -s stop #停止nginx
\[root@proxy \~\]# cp -r /usr/local/nginx /root/nginx #备份原nginx
\[root@proxy \~\]# rm -rf /usr/local/nginx
#源码安装卸载直接删除安装的目录即可
\[root@proxy \~\]# cd nginx-1.12.2/ #进入 新版neginx目录
\[root@proxy nginx-1.12.2\]# ./configure \\ #配置
\> \--prefix=/usr/local/nginx \\
\> \--user=nginx \\
\> \--group=nginx \\
\> \--with-http_ssl_module \\
\> \--with-stream #配置添加模块
\[root@proxy nginx-1.12.2\]# make && make install #编译和安装
\[root@proxy nginx-1.12.2\]# nginx
#启动,因为之前做了软连接,否则使用目录启动
## 步骤二：配置Nginx服务器，添加服务器池，实现TCP/UDP反向代理功能
### 1）修改/usr/local/nginx/conf/nginx.conf配置文件
\[root@proxy nginx-1.12.2\]# vim /usr/local/nginx/conf/ #编辑配置文件
stream {
upstream backend {
server 192.168.2.100:22; #ssh端口为22
server 192.168.2.200:22;
}
server {
listen 12345; #启用12345端口为nginx监听端口
proxy_connect_timeout 1s; #连接超时
proxy_timeout 3s; #访问超时
proxy_pass backend; #调用集群
}
}
http { #!!!一定要在http之外添加以上内容
include mime.types;
default_type application/octet-stream;
\...
}
### 2）重启nginx服务