### 4.2 案例分析：移动安全应用

#### 4.2.1 初步剖析
在初步剖析阶段，你需要收集目标应用的一些基本信息，以对所要分析的对象有一个大致的了解。这包括了解应用的目标、开发者、开发历史或用户评论等。例如，如果同一开发者开发的其他应用存在许多已知的安全漏洞，那么这款应用也很可能存在类似问题。

图4-3展示了Google Play商店中一款名为“Soble Reecue”的移动设备恢复与防窃应用的基本信息：

**描述**
```
Soble Reecue
保护您的手机安全和隐私

关于此应用
通过Mobile Rescut，您可以：
- 锁定丢失或被盗的手机
- 即使SIM卡被更换，也能锁定手机
- 发送远程音频警报
- 远程擦除数据
- 如果手机丢失或被盗，使用Mobile Rescue锁定它
- 更换SIM卡后自动锁屏
- 联系Virgin Media客服

关键词: Virgin Mobile, 手机定位, 防盗保护, 移动安全, 反病毒
```

当你仔细审查这一条目时，你会发现这款应用请求了许多权限。这些权限包括直接拨打电话、发送短信、访问摄像头、获取位置信息等。具体权限列表如图4-4所示：

**权限**
- **服务费用**
  - 直接拨打号码
  - 发送短信
- **硬件控制**
  - 拍照和录像
- **位置信息**
  - 精确位置 (GPS 和网络)
  - 大致位置 (网络)
- **消息**
  - 接收短信

基于应用的描述和所列出的权限，可以得出一些结论。例如，描述中提及了远程加锁、擦除和音频报警等功能，结合`READ_SMS`权限，可以推测该应用可能使用SMS作为带外通信。这一点需要特别注意，因为这意味着你可能需要检查接收短信的代码。

#### 4.2.2 静态分析
静态分析阶段涉及在不直接运行应用的情况下，分析应用及其支持组件中的代码和数据。首先，可以识别应用中的一些有趣字符串，如硬编码URI、认证凭据或密钥。接着，可以尝试进行其他一些分析以构建调用图、确定应用逻辑和程序流程，以及发现潜在的安全问题。

尽管Android SDK提供了一些有用的工具（如`dexdump`）来反汇编`classes.dex`文件，但你还可以从APK的其他文件中找到一些有用的信息。这些文件格式多样（如二进制XML文件），难以用常见的工具（如`grep`）读取。你可以使用`apktool`工具（可从[https://code.google.com/p/android-apktool/](https://code.google.com/p/android-apktool/) 获取）将这些资源转换为明文，并将Dalvik可执行字节码反汇编为一种称为`smali`的中间格式。

运行以下命令解码APK的内容：
```sh
$ apktool d ygib-1.apk
I: Baksmaling...
I: Loading resource table...
I: Decoding values */* xMLe...
I: Done.
I: Copying assets and libs...
```

现在你可以使用`grep`在应用中查找诸如URL之类的有趣字符串，这可以帮助你理解应用和Web服务之间的通信。例如：
```sh
grep -r "http" ygib-1
```

此外，还可以使用Androguard这样的Python逆向工程和分析框架。Androguard提供了多个实用工具，本章主要关注其交互模式下的`androlyze`工具，它提供了一个IPython shell。以下是基本用法示例：
```python
In [1]: a, d, dx = AnalyzeAPK("/home/ahh/ygib-1.apk", decompiler="dad")
```

接下来，收集应用的其他一些粗略信息，确认你在初步剖析环节看到的内容。其中包括了解应用使用了哪些权限，用户最经常交互的Activity，应用运行的Service，以及是否有其他Intent接收组件。首先调用`permissions`命令来检查权限：
```python
In [2]: a.permissions
Out[2]:
['android.permission.CAMERA',
 'android.permission.PROCESS_OUTGOING_CALLS',
 'android.permission.CALL_PHONE',
 'android.permission.RECEIVE_SMS',
 'android.permission.ACCESS_GPS',
 'android.permission.SEND_SMS',
 'android.permission.READ_SMS',
 'android.permission.WRITE_SMS']
```

这些权限和你在Google Play商店上查看这一应用时所看到的应该是一致的。你可以进一步使用Androguard，找出这个应用的哪些类和方法实际使用了这些权限，这可能会帮你将分析范围缩小到一些有问题的组件上：
```python
In [3]: show_Permissions(dx)
Out[3]:
Lcom/yougetitback/androidapplication/PingService; => deviceOnline () : ACCESS_NETWORK_STATS
Lcom/yougetitback/androidapplication/PingService; => wifiAvailable () : ACCESS_NETWORK_STATS
Lcom/yougetitback/androidapplication/ActivateScreen; => sendActivationRequestMessage () : SEND_SMS
Lcom/yougetitback/androidapplication/ActivationAcknowledgeService; => doPost () : INTERNET
Lcom/yougetitback/androidapplication/ConfirmPinScreen; => doPost () : INTERNET
```

尽管输出结果较长，但经过修剪的代码片段显示了一些有趣的方法，如`ConfirmPinScreen`类中的`doPost`方法，这一方法使用了`android.permission.INTERNET`权限。