APPLICATION 
Virtual Addressing 
Physical Addressing 
Free block 
A 
Free block 
 Creating a double mapping: write B’s data to heap segment 3 
Primary mapping 
Heap segment 1 
Second mapping 
Heap segment 2 
Heap segment 1 
Heap segment 3 
Heap segment 2 
FCRAM 
app 
0x20000000$
0x27C00000$
APPLICATION 
Virtual Addressing 
Physical Addressing 
Free block 
 Creating a double mapping: allocate second mapping 
Free block 
A’’ 
ldr:ro race condition 
$$...$
$
$$u32$segment_table_offset$=$*(u32*)&cro_buf[0xC8];$
$$if$($segment_table_offset$)$
$${$
$$$$void*$segment_table_ptr$=$&cro_buf[segment_table_offset];$
$
$$$$if$($is_in_cro_bounds(segment_table_ptr)$)$
$$$${$
$$$$$$*(u32*)&cro_buf[0xC8]$=$(u32)segment_table_ptr;$
$$$$}$else$goto$fail;$
$$}$
$
$$...$
$
$$u32$num_segments$=$*(u32*)&cro_buf[0xCC];$
$
$$for(int$i$=$0;$i$id)$
{$
$$case$2:$//$CRO_SEGMENT_DATA$
$$$$if$($!cur_segment->size$)$continue;$
$$$$if$($cur_segment->size$>$data_size$)$throw_error(0xE0E12C1F);$
$$$$cur_segment->offset$=$data_adr;$
$$$$break;$
$$case$3:$//$CRO_SEGMENT_BSS$
$$$$if$($!cur_segment->size$)$continue;$
$$$$if$($cur_segment->size$>$bss_size$)$throw_error(0xE0E12C1F);$
$$$$cur_segment->offset$=$bss_adr;$
$$$$break;$
$$default:$
$$$$if(everything_ok$&&$cur_segment->offset)$
$$$${$
$$$$$$u32$cur_segment_target$=$cro_buf$+$cur_segment->offset;$
$$$$$$cur_segment->offset$=$cur_segment_target;$
$$$$$$if(cro_buf$>$cur_segment_target$
$$$$$$$$||$cro_buf_end$next$:$NULL,$freelist_head));$
$
$$return$ret;$
}$
Reads(the(head(of(the(free(list(
(with(synchronization)(
Pops(the(head(of(the(free(list(
(with(synchronization)(
No(further(checks(or(exception(throws(–(
alloc_kobj$returns(NULL(when(list(is(empty(
alloc_kobj uses 
0xFFF0701C:$
$$v11$=$alloc_kobj(freelist_1);$
$$if$($v11$)$
$${$
$$$$...$
$$}else{$
$$$$throw_error(0xC8601808);$
$$}$
0xFFF086AC:$
$$v13$=$alloc_kobj(freelist_2);$
$$if$($v13$)$
$${$
$$$$...$
$$}else{$
$$$$throw_error(0xD8601402);$
$$}$
0xFFF22794:$
$$KLinkedListNode*$node$=$alloc_kobj(freelist_listnodes);$
$$if$($node$)$
$${$
$$$$node->next$=$0;$
$$$$node->prev$=$0;$
$$$$node->element$=$0;$
$$}$
""node->element"="...;"
svcWaitSynchronizationN 
•  Unprivileged(system(call(
•  Takes(in(a(list(of(kernel(objects(and(waits(on(them(
•  Kernel(objects(to(wait(on:(port,(mutex,(semaphore,(event,(thread…(
•  Calling(Thread(goes(to(sleep(until(one(of(the(objects(signals(
•  Can(wait(on(up(to(256(objects(at(a(time(
•  How(does(it(keep(track(of(objects(it’s(waiting(on?(!(gabe(this(emoji(is(for(you"
(
-(
svcWaitSynchronizationN 
svcWaitSynchronizationN:$
...$
$
for$($int$i$=$0;$i$next$=$0;$
$$$$node->prev$=$0;$
$$$$node->element$=$0;$
$$}$
$
$$node->element$=$obj;$
$$thread->wait_object_list->insert(node);$
}$
$
...$
1.  Create(thread(
2.  Have(thread(wait(on(256(objects(
3.  Have(we(dereferenced(NULL(yet?(
No?(Go(to(1.(
Yes?(We’re(done.(
How to trigger a NULL deref 
ARM11 Kernel 
Home Menu 
loader 
fs 
GSP 
HID 
System calls 
APPLICATION memory region 
SYSTEM memory region 
BASE memory region 
app 
Problem 1 solution: use ns:s service to kill every process we can except our own 
Note:(we(can’t(actually(kill(every(single(process(out(there(but(we(can(kill(like(90%(and(that’s(enough(
Problem 2 solution 
•  We’d(like(to(stop(NULL(allocations(as(soon(as(one(happens(
•  We(can(detect(when(a(NULL(allocation(happens(
•  Have(CPU(core(1(perform(slab(heap(exhaustion(
•  Have(CPU(core(0(monitor(the(NULL(page(for(changes(
•  We’ll(detect(this(assignment:(
•  We(can’t(stop(new(node(allocations(from(happening…(
•  …but(maybe(we(can(stop(them(from(being(NULL!(
•  Have(CPU(core(0(free(some(nodes(as(soon(as(it(detects(the(NULL(allocation(
•  We(can(do(this(by(signaling(an(object(that(another(thread(was(waiting(on(
$node->element$=$obj;(
Slab heap was just exhausted 
Object(7(
Object(9(
Object(10(
Object(6(
Object(2(
Object(3(
Object(4(
Object(5(
Object(1(
Object(8(
Object(list(head(1(
Object(list(head(2(
NULL(
•  Core(1(just(exhausted(the(linked(list(
node(slab(heap(
•  Core(0(sees(a(change(on(the(NULL(page(
(
Just-in-time node freeing 
nextptr$$prevptr$$objptr$$$00000000$
just(became(
00000000$00000000$00000000$00000000$
Slab heap was just exhausted 
Object(7(
Object(9(
Object(10(
Object(6(
Object(8(
Object(list(head(1(
Object(list(head(2(
NULL(
•  Core(1(just(exhausted(the(linked(list(
node(slab(heap(
•  Core(0(sees(a(change(on(the(NULL(page(
•  Core(0(calls(svcSignalEvent(to(free(a(
bunch(of(linked(list(nodes(
(
Just-in-time node freeing 
nextptr$$prevptr$$objptr$$$00000000$
just(became(
00000000$00000000$00000000$00000000$
Free(object(
Free(object(
Free(object(
Free(object(
Free(object(
Free(list(head(
Slab heap was just exhausted 
Object(7(
Object(9(
Object(10(
Object(6(