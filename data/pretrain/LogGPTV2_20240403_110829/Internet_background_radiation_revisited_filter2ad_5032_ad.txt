0.1
0.1
86.0
1.1.1.0
1.4.0.0
1.0.0.0
1.2.3.0
1.1.168.0
1.10.10.0
1.1.0.0
1.0.168.0
1.0.1.0
1.2.168.0
total
44.0
16.7
10.6
2.0
0.6
0.3
0.2
0.2
0.1
0.1
74.8
Table 8: Top 10 /24 destinations in 1.0.0.0/8
block due to a speciﬁc model of a DSL modem. Figure 9
shows this source OS distribution.
5. POLLUTION
In the previous section we discussed that many of the large
scale diﬀerences observed between announced blocks and our
reference unused block were clustered in a small portion of
destination or source address space. We call this signiﬁcant
nonuniform behavior address space pollution. Unlike previ-
ous observations of diﬀerences between unused blocks [21]
we show that increasingly these diﬀerences are the result
of environmental factors (e.g., misconﬁguration, location),
rather than algorithmic factors.
For example, in analyzing the signiﬁcant diﬀerence be-
tween A-1 and A-2 we ﬁnd that the top 10 /24 destina-
tions receive 75% of the total packets. Table 8 shows the 10
/24 destination subnets that received the most packets in
1.0.0.0/8. These blocks observe signiﬁcant non uniform traf-
ﬁc that is primarily the result of misconﬁguration. Example
classes of these misconﬁgurations include: network proto-
col vulnerabilities, misconﬁgured network servers, services,
and devices, misconﬁgured attack tools, misconﬁgured peer-
to-peer network software, and various other software pro-
gramming bugs. In the following sections we explore these
interesting sources of pollution in more depth.
5.1 UDP SIP Trafﬁc to 1.1.1.1
In analyzing the destination IP addresses of traﬃc to 1/8,
we discovered a relatively high amount of hot-spots, com-
pared to other /8s we analyzed during roughly the same
time. We found that packets with a destination address in
the 1.1.1.0/24 subnet made up 44.0% of packets and 58.7%
of bytes in the 1.0.0.0/8 traﬃc over the entire week analyzed.
Further analysis of this traﬃc showed that the vast major-
ity of this traﬃc was UDP packets to 1.1.1.1, port 15206.
This highly speciﬁc subset of traﬃc made up 34.2% of pack-
ets and 49.3% of bytes to the entire 1.0.0.0/8 subnet. We
found that 71.0% of packets (75.8% of bytes) of traﬃc to
UDP 1.1.1.1:15206 started with a payload of 0x8000. An
additional 17.5% of packets (18.6% of bytes) started with
0x8008, and 7.4% of packets (2.8% of bytes) started with
0x8004. Previous analysis by RIPE suggested that this traf-
ﬁc was a trojan, however a couple of SIP blogs [28] [29] re-
vealed that this traﬃc was likely RTP streams resulting from
malicious SIP INVITE packets sent to vulnerable servers.
These INVITE packets request that the server dial a tele-
phone number, and send the resulting audio stream back to
an IP address and port speciﬁed in the INVITE packet. In
2-byte preﬁx
0x8000
0x8008
0x8004
0x8012
0x8080
0x8088
0x8003
0xa012
packets(M)
17093
4213
1791
605
334
5
2
0.5
bytes(M) % pkts %bytes
75.8
18.6
2.8
1.0
1.4
0.0
0.0
0.0
3658152
901639
138671
51917
71540
1283
232
28
71.0
17.5
7.4
2.5
1.3
0.0
0.0
0.0
Table 9: Top 8 RTP Payloads
dport
33368
514
33527
3072
33493
721
17055
33437
570
58689
packets(M)
6511
2114
1582
803
588
50
18
7
4
3
bytes(M) %pkts %bytes
55.8
17.9
13.5
6.9
5.0
0.4
0.1
0.0
0.0
0.0
515323
165388
124775
63827
46752
3974
1418
517
303
232
55.7
18.0
13.5
6.8
5.0
0.4
0.1
0.0
0.0
0.0
Table 10: Top 10 destination ports for UDP traﬃc
to 1.4.0.0
this case, the packets were created to have the stream sent
to 1.1.1.1:15206. Since these RTP streams are done over
connectionless UDP, no response from 1.1.1.1 was necessary
for us to receive these RTP streams in our capture.
We were able to isolate a handful of these streams, and
using Wireshark, extract the unencrypted audio encoded in
these streams. The audio ﬁle consists of a series of reorder
tones (fast busy), followed by an automated voice stating:
“The number you have dialed is not in service. Please check
the number and try again.” Each RTP stream contributes
about 40-50 packets per second (80kbit/s), with an average
of more than 5000 streams sending to 1.1.1.1:15206 simulta-
neously at any time.
Analysis of the TTL values for this traﬃc reveals 4 sepa-
rate default TTL values that appear to be the original TTL
for the packet. Due to the nature of TTL values decreasing
at every hop on its way from the source to our darknet, we
expect the received TTL value to be approximately 10-20
less than the starting value. From this, we infer 4 distinct
starting values, of 32, 64, 128 and 255. As diﬀerent operat-
ing systems choose diﬀerent default TTL values, we can con-
clude that this traﬃc is likely coming from a cross-platform
software application.
5.2 DNS Trafﬁc to 1.4.0.0
The second highest hot-spot in 1.0.0.0/8 is 1.4.0.0/24, re-
ceiving 16.6% of packets and 9.4% of bytes over the week-
long capture. We observed that almost all of this traﬃc was
UDP packets to 1.4.0.0, on a handful of destination ports.
Inspection of these packets reveals them to be validly con-
structed DNS queries. Over the week-long capture, 6,536,254
unique source IPs contributed to this traﬃc, mostly from a
handful of ASNs. Using nmap, we were able to determine
that most of these hosts were in fact ASUS DSL modems.
We suspect that these modems have either a hardware or
software misconﬁguration that causes them to use 1.4.0.0
on certain non-standard ports as a DNS server. We are un-
71Domains
hotelnikkohimeji.co.jp
x.myspacecdn.com
wirelessdigest.typepad.com
th411.photobucket.com
www.google.com
Table 11: Example A record lookups to 1.4.0.0
sure why these modems would send DNS queries on such
non-standard, yet concentrated few ports. Analysis of the
domains that are being looked up to 1.4.0.0 shows a mix of
domains that users are not likely to look up directly — for
example, content distribution network domains from popu-
lar sites like myspace or youtube. This suggests that 1.4.0.0
is not the sole DNS server for the misconﬁgured box, as these
CDN domains are looked up upon retrieval of the main site
— which requires a successful DNS resolution in the ﬁrst
place.
5.3 Iperf Trafﬁc to 1.2.3.4
Roughly 1.8% of all packets measured to the 1.0.0.0/8
network were UDP packets with a destination port of 5001.
This port is the default port commonly used by the network
testing application iperf. These packets were all sent to the
1.2.3.4 destination IP address. This pollution by itself ac-
counted for roughly 10Mbps of traﬃc and was observed to
be originating from fewer than 100 unique sources.
5.4 IP Address Byte-Order Misconﬁguration
Though not singly a high contributor of packets, there
are three seemingly out-of-place /24s in the top 10 desti-
nation subnets for traﬃc captured to 1.0.0.0/8. These are
1.1.168.0/24, 1.0.168.0/24 and 1.2.168.0/24. Further anal-
ysis of packets with 168 in the third octet reveals almost
all of these packets to be to 1.x.168.192. Interestingly, this
is the popular RFC1918-space gateway address 192.168.x.1
in host-byte order for little-endian machines. Furthermore,
these packets are UDP to destination port 80, and contain
the same data. The UDP length ﬁeld speciﬁes 1 byte of
payload data (9 bytes - 8 byte UDP header), and the data
that follows the UDP packet is always 0x31. While we do
not know of a speciﬁc device or program that would produce
such packets, it is possible a program is sending raw packets,
and not doing a proper htonl() on its destination IP. Another
explanation is an embedded device (or other platform) using
a big-endian architecture is running an incorrectly ported
network application from a little-endian system, and could
still be performing the byte-ordering switch. We also see the
same UDP packets (destination port 80, same payload data)
sent to 1.1.0.10, and 1.0.0.10, which are 10.0.1.1 and 10.0.0.1
(other popular RFC1918 gateway addresses) in little endian.
5.5 Syslog to 50.153.199.194
In dataset B-1 (50/8), an interesting hotspot on UDP des-
tination port 514 caught our attention. Subsequent analysis
revealed that the hotspot destination /24 is 50.153.199.0/24,
receiving 3.8% of packets, and 6.7% of bytes for the entire
1 week capture. Almost all of these were to a single IP,
50.153.199.194, UDP port 514. Closer examination revealed
that these packets are all syslog messages originating mainly
from IPs in the .de (Germany) TLD. Many of these mes-
Mar 11 23:59:57 Muck-TS.CheckUserDir -
check snapshot in
\\muck-ts\david\archive\user\
10088000\todo
Mar 11 23:59:59 srv-tobit Creating
Watchdog (C:\Programme\COSYNUS\
BlackBerry4Dv\TXEngine4BB.
watchdog.txt)
Mar 12 00:02:01 vm-eco_cosynus
archive \\eco-online-serv\david\
archive\system\cosynus\bb4dv\bcc\
archive.dat is empty
Table 12: Three example syslog messages re-
ceived on 50.153.199.194 UDP/514. The PRI part
() corresponds to security/authorization mes-
sages with a debug (lowest) level severity.
sages contain combinations of the strings “david”, “tobit”