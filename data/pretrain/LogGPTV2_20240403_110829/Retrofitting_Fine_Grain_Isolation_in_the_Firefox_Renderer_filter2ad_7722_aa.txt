title:Retrofitting Fine Grain Isolation in the Firefox Renderer
author:Shravan Narayan and
Craig Disselkoen and
Tal Garfinkel and
Nathan Froyd and
Eric Rahm and
Sorin Lerner and
Hovav Shacham and
Deian Stefan
Retrofitting Fine Grain Isolation in the 
Firefox Renderer
Shravan Narayan and Craig Disselkoen, UC San Diego; Tal Garfinkel, 
Stanford University; Nathan Froyd and Eric Rahm, Mozilla; Sorin Lerner, 
UC San Diego; Hovav Shacham, UT Austin; Deian Stefan, UC San Diego
https://www.usenix.org/conference/usenixsecurity20/presentation/narayan
This paper is included in the Proceedings of the 29th USENIX Security Symposium.August 12–14, 2020978-1-939133-17-5Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.Retroﬁtting Fine Grain Isolation in the Firefox Renderer
Shravan Narayan† Craig Disselkoen†
Tal Garﬁnkel∗ Nathan Froyd(cid:5)
Eric Rahm(cid:5)
Sorin Lerner† Hovav Shacham(cid:63),† Deian Stefan†
∗Stanford
(cid:5)Mozilla
(cid:63)UT Austin
†UC San Diego
Abstract
Firefox and other major browsers rely on dozens of
third-party libraries to render audio, video, images, and other
content. These libraries are a frequent source of vulnerabil-
ities. To mitigate this threat, we are migrating Firefox to an
architecture that isolates these libraries in lightweight sand-
boxes, dramatically reducing the impact of a compromise.
Retroﬁtting isolation can be labor-intensive, very prone to
security bugs, and requires critical attention to performance.
To help, we developed RLBox, a framework that minimizes
the burden of converting Firefox to securely and efﬁciently
use untrusted code. To enable this, RLBox employs static
information ﬂow enforcement, and lightweight dynamic
checks, expressed directly in the C++ type system.
RLBox supports efﬁcient sandboxing through either
software-based-fault isolation or multi-core process isolation.
Performance overheads are modest and transient, and have
only minor impact on page latency. We demonstrate this by
sandboxing performance-sensitive image decoding libraries
(libjpeg and libpng), video decoding libraries (libtheora and
libvpx), the libvorbis audio decoding library, and the zlib
decompression library.
RLBox, using a WebAssembly sandbox, has been inte-
grated into production Firefox to sandbox the libGraphite font
shaping library.
1 Introduction
All major browsers today employ coarse grain privilege
separation to limit the impact of vulnerabilities. To wit,
they run renderers—the portion of the browser that handles
untrusted user content from HTML parsing, to JavaScript
execution, to image decoding and rendering—in separate
sandboxed processes [3, 33, 40]. This stops web attackers
that manage to compromise the renderer from abusing local
OS resources to, say, install malware.
Unfortunately, this is no longer enough: nearly every-
thing we care about today is done through a website. By
compromising the renderer, an attacker gets total control of
the current site and, often, any other sites the browser has
credentials for [14]. With services like Dropbox and Google
Drive, privilege separation is insufﬁcient even to protect local
ﬁles that sync with the cloud [24].
Browser vendors spend a huge amount of engineering
effort trying to ﬁnd renderer vulnerabilities in their own
code [28]. Unfortunately, many remain—frequently in the
dozens of third-party libraries used by the renderer to decode
audio, images, fonts, and other content. For example, an
out-of-bounds write in libvorbis was used to exploit Firefox at
Pwn2Own 2018 [7]. Both Chrome and Firefox were vulner-
able to an integer-overﬂow bug in the libvpx video decoding
library [10]. Both also rely on the Skia graphics library, which
had four remote code execution bugs until recently [12, 37].
To appreciate the impact of these vulnerabilities and the
difﬁculty of mitigating them, consider a typical web user,
Alice, that uses Gmail to read email in her browser. Suppose
an intruder, Trudy, sends Alice an email that contains a link
to her malicious site, hosted on sites.google.com. If Alice
clicks on the link, her browser will navigate her to Trudy’s
site, which can embed an .ogg audio track or .webm video to
exploit vulnerabilities in libvorbis and libvpx and compromise
the renderer of Alice’s browser. Trudy now has total control
of Alice’s Gmail account. Trudy can read and send emails
as Alice, for example, to respond to password reset requests
from other sites Alice belongs to. In most cases, Trudy can
also attack cross site [14], i.e., she can access any other site
that Alice is logged into (e.g., Alice’s amazon.com account).
Recent version of Chrome (and upcoming versions of Fire-
fox) support Site Isolation [41], which isolates different sites
from each other (e.g., *.google.com from *.amazon.com)
to prevent such cross-site attacks. Unfortunately, Trudy might
still be able to access {drive,pay,cloud}.google.com,
which manage Alice’s ﬁles, online payments, and cloud
infrastructure—since the renderer that loads the malicious
.ogg and .webm content might still be running in the same
process as those origins.
For many sites, Trudy might not even need to up-
load malicious content
to the (trusted) victim origin
(sites.google.com in our example). Most web applications
load content, including images, fonts, and video, from
different origins. Of the Alexa top 500 websites, for example,
over 93% of the sites load at least one such cross-origin
resource (§7.1). And the libraries handling such content
are not isolated from the embedding origin, even with Site
Isolation [41].
To mitigate these vulnerabilities, we need to harden the
renderer itself. To this end, we extend the Firefox renderer to
isolate third party libraries in ﬁne grain sandboxes. Using this,
we can prevent a compromised library from gaining control
of the current origin or any other origin in the browser.
Making this practical poses three signiﬁcant challenges
USENIX Association
29th USENIX Security Symposium    699
across three dimensions. First, engineering effort—we need to
minimize the upfront work required to change the renderer to
use sandboxing, especially as this is multiplied across dozens
of libraries; minimizing changes to libraries is also important
as this can signiﬁcantly increase the burden of tracking up-
stream changes. Second, security—the renderer was not built
to protect itself from libraries; thus, we have to sanitize all data
and regulate control ﬂow between the library and renderer
to prevent libraries from breaking out of the sandbox. In our
experience, bugs at the library-renderer boundary are not only
easy to overlook, but can nullify any sandboxing effort—and
other developers, not just us, must be able to securely sandbox
new libraries. Finally, efﬁciency—the renderer is performance
critical, so adding user-visible latency is not acceptable.
To help us address these challenges, we develop a
framework called RLBox that makes data- and control-ﬂow
at the library-renderer interface explicit, using types. Unlike
prior approaches to sandbox automation that rely on extensive
custom analysis frameworks (§8), RLBox is simply a library1
that leverages the C++ type system and is easy to incorporate
into Firefox’s predominantly C++ codebase.
Using type information, RLBox can identify where security
checks are needed, automatically insert dynamic checks when
possible, and force compiler errors for any security checks
that require additional user intervention. Our type-driven
approach enables a systematic way to migrate Firefox’s
renderer to use sandboxed libraries and allows RLBox to
support secure and efﬁcient sharing of data structures between
the renderer and library (e.g., by making shared memory
operations safe and by lazily copying data out of the sandbox).
To enable efﬁcient sandboxing, we adapt and evaluate two
isolation mechanisms for library sandboxing: software-based
fault isolation (SFI) leveraging Google’s Native Client
(NaCl) [49, 65] and a multi-core process-based approach. We
also explore applying sandboxing at different granularities
(e.g., per-origin and per-library sandboxing) to ﬁnd the ap-
propriate balance between security and sandboxing overhead.
To evaluate RLBox, we sandbox several libraries in Firefox:
the libjpeg and libpng image decoding libraries, the libvpx and
libtheora video decoding libraries, the libvorbis audio decod-
ing library, and the zlib decompression library. Browsing a
representative sample of both popular and unpopular websites
(§7), we ﬁnd the end-to-end memory overhead of RLBox to
be modest—25% with SFI, 18% with process isolation—and
transient, appearing only at content load time. The impact
on page latency is small: 3% and 13% with SFI and process
isolation, respectively. Our sandboxing does not noticeably
impact the video frame rates nor audio decoding bitrate.
Our evaluation shows that retroﬁtting ﬁne grain isolation,
especially using SFI, is practical—and we’ve been integrating
1 Our only external tooling is a ~100LOC Clang plugin, described in
Section 6.1, that makes up for C++’s currently limited support for reﬂection
on structs.
RLBox into production Firefox [51].2 Since NaCl has been
deprecated [17] in favor of WebAssembly (Wasm) [20], our
production sandbox also uses Wasm. We used RLBox with
this Wasm-based sandbox to isolate the libGraphite font
shaping library and are in the process of migrating several
others [15, 51]. We describe this effort in Section 9.
Though we developed RLBox to sandbox libraries in Fire-
fox, RLBox is a general library-sandboxing framework that
can be used outside Firefox. To demonstrate this, we use RL-
Box to sandbox libraries in two different contexts: the Apache
web server and Node.js runtime. For Apache, we sandbox
the libmarkdown library that is used in the mod_markdown
module [31]; we ﬁnd that RLBox with the SFI sandbox
increases the tail latency of the Apache server by 10% (4ms)
and decreases the throughput by 27% (256 requests/second).
For Node.js, we sandbox the C bcrypt library that is used by
the JavaScript bcrypt module [38]; we measure RLBox with
SFI to impose an overhead of 27% on hashing throughput.
Contributions. We present the case for sandboxing third
party libraries in the browser renderer, and potential archi-
tectural trade-offs, including our approach (§2). We offer a
taxonomy of security pitfalls encountered while migrating
the Firefox code base to this architecture that were largely
overlooked by previous work (§3), and RLBox, a framework
we developed to prevent these pitfalls that leverages the
C++ type system to enforce safe data and control ﬂow (§4),
and enables an incremental compiler-driven approach to
migrating code to a sandboxed architecture (§5). We describe
our implementation, including our software fault isolation
and multi-core process-based isolation mechanisms (§6), and
evaluate the performance of RLBox (§7). We close with a
discussion of related work (§8) and our effort upstreaming
RLBox into production Firefox (§9).
Availability. All work presented in this paper, including our
modiﬁed Firefox builds, the RLBox library, and benchmarks
are available and open source.3
2 Fine grain sandboxing: how and why
Renderers rely on dozens of third-party libraries to support
media decoding and other tasks (e.g., decompression,
which sites use to optimize page load times and bandwidth
consumption). These are written almost exclusively in C
and tasked with parsing a wide range of complex inputs.
Unsurprisingly, exploitable vulnerabilities in this code are
relatively frequent, even after years of scrutiny.
These libraries are a compelling place to employ sandbox-
ing inside the renderer for several reasons. First, media content
such as images and video are rich attack vectors, as web
applications allow them to be shared pervasively. Over 93%
of the Alexa Top 500 websites load such content cross-origin
(§7.1). And nearly all forms of social media and peer-to-peer
2The Tor team is integrating our patches into the Tor Browser [16].
3 Available at: https://usenix2020-aec.rlbox.dev.
700    29th USENIX Security Symposium
USENIX Association
messaging platforms enable the sharing of images and video.
Next, content libraries can be effectively sandboxed, as
they require little privilege to operate, i.e., once these libraries
are memory isolated, the harm they can inﬂict is minimal. For
example, an attacker that compromises an image decoding
library could at worst change how images display. In contrast,
sandboxing a highly privileged component like the JavaScript
engine is largely ineffectual. An attacker with control over
the JavaScript engine can run arbitrary JavaScript code and
thus already has complete control of the web application.
Finally, the existing library-renderer interface provides
a natural place to partition code. Compared to coarse grain
techniques like privilege separation or Site Isolation, which
spin up entire new renderer processes, spinning up a sandbox
for a library is very cheap (§7). Moreover, because library
sandboxes are only needed during content decoding, their
memory overhead is transient.
Isolation strategies. A key question remains: what grain
of isolation should be employed? In particular, different
architectures have different implications for performance
and security. Prior to RLBox, Firefox was largely exploring a
coarse grain approach to library sandboxing, placing certain
media libraries into a single sandboxed media process [33].
This approach has some beneﬁts for performance as there
is only one sandbox, but trades off security.
First, the assurance of the sandbox is reduced to that of
the weakest library. This is less than ideal, especially when
we consider the long tail of infrequently used media libraries
required to preserve web compatibility (e.g., Theora) which
often contain bugs. Next, the attacker gains the power of the
most capable library. Some libraries handle active content—
zlib, for example, is used to decompress HTTP requests that
could contain HTML or JavaScript—as opposed to passive
content such as images or fonts. Thus compromising a passive
library like libvorbis, could still enable powerful attacks—e.g.,
modify the JavaScript decompressed by zlib. When multiple
renderers share a common library sandbox, an intruder can
attack across tabs, browsing proﬁles, or sites. Finally, coarse
grain sandboxing does not scale to highly performance-
critical libraries, such as libjpeg and libpng (§7.5.2).
RLBox lets us employ more granular sandboxing policies
that can address these shortcomings. Its ﬂexibility lets us
explore the performance implications of various sandboxing
architectures with different isolation mechanisms (§7.4).
In this paper, we largely employ a unique sandbox per
.
This mitigates many of the problems noted above, while still
offering modest memory overheads. Per-renderer sandboxing
prevents attacks across tabs and browsing proﬁles. Per-library
ensures that a weakness in one library does not impact
any other library. Per-content-origin sandboxing prevents
cross origin (and thus cross site) attacks on content. For
example, a compromise on sites.google.com as discussed
in our example in Section 1, should not impact content from
pay.google.com. Per-content-type sandboxing addresses
the problem of passive content inﬂuencing active content.
Both ﬁner and coarser grain policies are practically useful,
though. In production Firefox, for example, we create a fresh
sandbox for each Graphite font instance (§9). But, we also
foresee libraries where, say, same-origin is sufﬁcient.
Attacker model. We assume a web attacker that serves
malicious (but passive) content—from an origin they control
or by uploading the content to a trusted origin—which leads
to code execution (e.g., via a memory safety vulnerability)
in a RLBox sandbox. RLBox ensures that such an attacker
can only affect (corrupt the rendering of and potentially leak)
content of the same type, from the same origin. Per-object
(or per-instance) sandboxing can further reduce the damage
of such attacks. We, however, only use this policy when
sandboxing audio, videos, and font shaping—we found the
overheads of doing this for images to be prohibitive.
We consider side channels out-of-scope, orthogonal chal-
lenges. With side channels, an attacker doesn’t need to exploit
renderer vulnerabilities to learn cross-origin information,
as browsers like Firefox largely do not prevent cross-origin