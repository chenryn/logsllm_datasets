      - child: image
        parent: image
```
本示例获取子图表中`image`块下的每个值，并将其导入父图表中的`image`块下。
重要提示:
使用`import-values`字段导入的值不能在父图表中被覆盖。如果您需要覆盖子图表中的值，您不应该使用`import-values`字段，而应该通过在每个子图表前面加上子图表的名称来覆盖所需的值。
在本节中，我们介绍了如何在`Chart.yaml`文件中管理依赖关系。现在，让我们了解如何在 Helm c hart 中定义生命周期管理钩子。
# 生命周期管理
Helm 图表及其相关版本的主要优势之一是能够在 Kubernetes 上管理复杂的应用。一个版本在其生命周期中经历多个阶段。为了围绕发布的生命周期提供额外的管理能力，Helm 采用了`hooks`机制，以便在发布周期内的不同时间点采取行动。在这一节中，我们将探讨发布生命周期的不同阶段，并介绍如何使用`hooks`来提供不仅与发布交互，而且与整个 Kubernetes 环境交互的功能。
在 [*第 3 章*](03.html#_idTextAnchor147)*安装您的第一个头盔图表*中，我们遇到了几个阶段，涵盖了头盔版本的整个生命周期，包括其安装、升级、移除和回滚。考虑到 Helm 图表可能很复杂，因为它们管理一个或多个将要部署到 Kubernetes 的应用，所以除了仅仅部署资源之外，通常还需要执行额外的操作。这些可能包括以下内容:
*   完成应用所需的先决条件，如管理证书和机密
*   数据库管理是执行备份或恢复的图表升级的一部分
*   移除图表前清理资产
潜在选项的列表可能很长，首先了解 Helm hooks 的基础知识以及它们何时可以执行非常重要，我们将在下一步中描述。
## 舵钩的基本原理
钩子作为在释放的生命周期中的指定时间点执行一次性动作。与 Helm 中的大多数特性一样，钩子是作为另一个 Kubernetes 资源实现的，更具体地说，是在容器中实现的。虽然 Kubernetes 中的大多数工作负载都是为长时间运行的流程设计的，例如服务于应用编程接口请求的应用，但工作负载也可以由单个任务或一组任务组成，这些任务使用脚本执行，一旦完成，脚本会指示成功或失败。
在 Kubernetes 环境中创建短期任务时通常使用的两个选项是使用裸露的**Pod **或**作业**。裸 pod 是一个运行到完成然后终止的 pod，但是如果底层节点出现故障，它将不会被重新调度。因此，最好将生命周期挂钩作为作业运行，如果节点出现故障或变得不可用，将重新计划挂钩。
由于钩子被简单地定义为 Kubernetes 资源，它们也被放在`templates/`文件夹中，并用 helm.sh/hook 注释进行注释。此注释的指定确保了它们不会与标准处理期间应用于 Kubernetes 环境的其余资源一起呈现。相反，它们是基于在 helm.sh/hook 注释中指定的值来呈现和应用的，该值决定了何时应该在 Kubernetes 中作为 Helm 发布生命周期的一部分来执行它。
下面是一个如何将钩子定义为作业的例子:
```
apiVersion: batch/v1
kind: Job
metadata:
  name: helm-auditing
  annotations:
    'helm.sh/hook': pre-install,post-install
spec:
  template:
    metadata:
      name: helm-auditing
    spec:
      restartPolicy: Never
      containers:
      - name: helm-auditing
        command: ["/bin/sh", "-c", "echo Hook Executed at $(date)"]
        image: alpine
```
这个简单的例子在休眠 10 秒之前打印出容器中的当前日期和时间。Helm 在安装图表之前和之后执行这个钩子，如“helm.sh/hook”注释的值所示。这种挂钩的一个用例是连接到一个审计系统，该系统跟踪应用到 Kubernetes 环境的安装。安装完成后，可以添加一个类似的钩子来跟踪完成图表安装过程所花费的总时间。
既然我们已经解释了 Helm 钩子的基本知识，让我们讨论如何在 Helm 图中定义钩子。
## 挂钩执行
正如你在上一节的`job`勾中看到的，`helm.sh/hook`标注的值是`pre-install`。`pre-install`是 Helm 图表生命周期中可以执行钩子的点之一。
下表表示`helm.sh/hook`注释的可用选项，指示何时执行钩子。每个钩子的描述参考了官方的 Helm 文档，可以在 https://Helm . sh/docs/topics/charts _ hooks/#可用的钩子:
![](img/041.jpg)
`helm.sh/hook`注释可以包含多个值，指示同一资源在图表发布周期内的不同时间点执行。例如，对于要在图表安装前后执行的挂钩，可以在 pod 或作业上定义以下注释:
```
annotations:
  'helm.sh/hook': pre-install,post-install
```
为了确定图表生命周期中需要选择的阶段，了解如何以及何时执行钩子是很有用的。如前例所述，当一个钩子被标记为在执行`helm install`命令的`pre-install`和`post-install`部分运行时，会发生以下动作:
1.  用户安装一个 Helm 图表(通过运行，例如，`helm install bitnami/wordpress --version 8.1.0`)。
2.  Helm 应用编程接口被调用。
3.  `crds/`文件夹中的 CRD 被加载到 Kubernetes 环境中。
4.  执行图表模板的验证并呈现资源。
5.  `pre-install`钩子按重量排序，然后渲染并加载到 Kubernetes。
6.  Helm 一直等到钩子准备好。
7.  模板资源被呈现并应用于 Kubernetes 环境。
8.  执行`post-install`挂钩。
9.  掌舵人一直等到`post-install`钩子完成。
10.  返回`helm install`命令的结果。
了解了 Helm hook 执行的基础知识后，让我们讨论一些关于 Helm hook 的更高级的主题。
## 高级钩子概念
虽然将一个标准的 Helm 模板资源转换成一个钩子只需要很少的努力，但是还有其他的选项可以帮助图表的执行和资源的移除。
在一个 Helm 图表的生命周期中，可以执行的钩子的数量没有限制，并且可能存在为同一个生命周期阶段配置多个钩子的情况。当出现这种情况时，默认情况下，钩子按名称的字母顺序排列。但是，您可以通过使用`helm.sh/weight`注释指定每个钩子的重量来定义顺序。权重按升序排序，但如果多个挂钩包含相同的权重值，则使用按名称字母顺序排序的默认逻辑。
虽然钩子为生命周期管理提供了一种有用的机制，但是您应该记住，钩子不同于常规模板资源，在调用`helm uninstall`命令期间不会随图表的其余部分一起被移除，因为它们没有被 Helm 跟踪或管理。相反，在发布的生命周期中，可以使用一些策略来移除钩子，例如配置删除策略和设置作业的 TTL。
首先，可以在与钩子相关联的 Pod 或作业上指定`helm.sh/hook-delete-policy`注释。这个注释决定了 Helm 应该何时从 Kubernetes 中移除资源。以下选项可用(描述参考 Helm 文档，可在 https://Helm . sh/docs/topics/charts _ hooks/# hook-delete-policy 找到):
![](img/10.jpg)
此外，Kubernetes 为提供了定义**生存时间** ( **TTL** )机制的选项，以 使用作业的`ttlSecondsAfterFinished`属性限制资源在完成后保留的时间，如图所示:
```
apiVersion: batch/v1
kind: Job
metadata:
  name: ttl-job
  annotations:
    'helm.sh/hook': post-install
spec:
  ttlSecondsAfterFinished: 60
```
在本例中，资源在完成或失败后的 60 秒内被移除。
版本生命周期的最后阶段是删除，虽然标准图表模板在调用`helm uninstall`命令时被删除，但您可能希望保留某些资源，这样 Helm 就不会对它们采取行动。这种情况的一个常见用例是，通过`PersistentVolumeClaim`命令在发行版生命周期的开始创建一个新的持久卷，但不应该在结束时与其他资源一起删除，以便保留该卷的数据。通过使用`helm.sh/resource-policy`注释启用该选项，如图所示:
```
'helm.sh/resource-policy': keep
```
Helm 将不再考虑在执行`helm uninstall`命令时移除该资源。需要注意的是，当资源不再被管理时，一旦剩余的资源被移除，它就会变成孤立的。如果使用`helm install`命令，这可能会导致挑战，因为它可能会导致与先前未删除的现有资源的资源命名冲突。使用`kubectl delete`命令可以手动删除孤立的资源。
本节讨论了如何编写钩子和自动化来管理图表的生命周期。在下一节中，我们将讨论如何正确记录 Helm 图表，以确保其用户拥有流畅的体验。
# 记录舵角图
与用户交互的任何其他软件一样，Helm 图表应该被适当地记录下来，以便用户知道如何与之交互。Helm 图表结构支持用于记录使用情况的`README.md`文件、用于覆盖使用和分发权限的`LICENSE`文件以及用于在图表安装期间生成使用说明的`templates/NOTES.txt`文件 n
自述文件
**README** 是软件开发中常用的描述产品安装、使用等细节的文件。Helm 图表的自述文件通常包含以下详细信息:
*   **先决条件**:先决条件的一个常见示例是在安装图表之前为 Kubernetes 集群创建一个`secret`或一组机密。以便安装到 Kubernetes 部署中。用户可以通过参考自述文件了解这一要求。
*   **值**:图表通常由许多不同的值组成，每个值都应该在`README`文件的表格中描述。该表应指定值的名称、描述或函数及其默认值。您可能还会发现，指明在安装或升级过程中是否需要提供该值很有帮助。
*   **应用特定信息**:一旦使用 Helm 图表安装了应用，您可能需要关于应用本身的附加信息，例如如何访问它或应用如何运行。这些细节也可以在`README`文件中提供。
头盔显示器是使用**标记**格式语言编写的。Markdown 通常用于 GitHub 项目和开源软件，是一种轻松编码文本的方式，可以以优雅的格式显示。可以在**降价指南**网站上进一步探索降价，网址为 https://www . markdownguide.org/.
## 许可文件
除了包含在`README`文件中的技术说明，图表维护者可能会发现有必要包含一个许可证，表明用户对图表使用和分发的权限。这些细节可以在图表目录下一个名为`LICENSE`的文件中合成。
`LICENSE`文件是包含软件许可证的明文文件。许可证可以是定制的，也可以是开源软件中常用许可证的副本，如 Apache 许可证 2.0 或麻省理工学院许可证。了解许可证之间的差异以及使用和分发软件的合法性超出了本书的范围，但是您可以在**选择许可证** [网站(https://Choose Ali](https://choosealicense.com/)cense . com/)开始探索这些细节，这将帮助您为您的 He lm 图表选择合适的许可证。
## 模板/NOTES.txt 文件
与`README.md`文件类似，`templates/NOTES.txt`文件用于在使用 Helm 安装后为应用提供使用说明。区别在于`README.md`文件是静态的，而`NOTES.txt`文件可以使用 Go 模板动态生成。
假设一个 Helm 图表在其`values.yaml`文件中配置了以下值:
```
## serviceType can be set to NodePort or LoadBalancer
serviceType: NodePort
```
根据设置的服务类型，访问应用的指令会有所不同。如果服务是`NodePort`服务，将通过使用在每个 Kubernetes 节点上设置的特定端口号来获得访问权限。如果服务设置为`LoadBalancer`，将使用创建服务时自动提供的负载平衡器的网址来访问应用。对于经验较少的 Kubernetes 用户来说，理解如何基于所使用的服务类型来访问应用可能很困难，因此该图表的维护者应该在`templates/`目录下提供一个`NOTES.txt`文件，该文件提供了如何访问应用的说明。
以下示例说明了如何将`templates/NOTES.txt`文件用于此目的:
```
Follow these instructions to access your application.
{{- if eq .Values.serviceType 'NodePort' }}
export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath='{.spec.ports[0].nodePort}' services {{.Release.Name }})
export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath='{.items[0].status.addresses[0].address}')
echo "URL: http://$NODE_IP:$NODE_PORT"
{{- else }}
export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Name }} wordpress --template '{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}')
echo "URL: http://$SERVICE_IP"
{{- end }}
```
该文件将在应用的安装、升级和回滚阶段生成和显示，并可通过运行`helm get notes`命令调用。通过提供该文件，用户将更好地理解如何使用该应用。
到目前为止，我们已经在本章中描述了组成 Helm 图表的大部分资产，除了实际的打包，它允许图表易于分发。这个概念将在下一节中描述。
# 包装舵角图
虽然 Helm 图表遵循一个共同的文件结构，但它们应该打包以便于分发。图表打包在`tgz`档案中。虽然可以使用`tar` bash 实用程序或归档管理器手动创建此归档，但 Helm 提供了`helm package`命令来简化此任务。`helm package`命令的语法如下所示:
```
$ helm package [CHART_NAME] [...] [flags]
```
`helm package`命令针对本地图表目录运行。如果该命令成功，它将生成具有以下文件格式的`tgz`档案:
```
$CHART_NAME-$CHART_VERSION.tgz
```
然后可以通过推送至图表存储库来分发档案，这是一项在 [*第 5 章*](05.html#_idTextAnchor265)*构建您的第一张 Helm 图表*中进一步探讨的任务。
`helm package`命令包括图表目录下的每个文件。虽然这通常是首选行为，但如果目录包含对 Helm 来说不重要的文件，则可能并不总是需要这样做。这种情况经常发生的目录的一个例子是`.git/`目录，它存在于由 **Git SCM** 管理的项目中。如果这个文件被打包到图表的`tgz`档案中，它将没有任何用途，只会增加档案的大小。Helm 支持一个名为`.helmignore`的文件，可以用来从 Helm 档案中省略某些文件和文件夹。下面描述一个例子`.helmignore`文件:
```
# Ignore git directories and files
.git/
.gitignore
```
前面的文件表明，如果`.git/`目录或`.gitignore`文件出现在图表目录中，它们将被`helm package`命令忽略，这意味着它们不会出现在最终的`tgz`档案中。该文件中以井号(`#`)开头的行用作注释。如果您的图表目录包含对图表的整体功能 n 不必要的文件和文件夹，请确保在您的 Helm 图表中包含一个`.helmignore`文件。
# 总结
Helm 图表是一组文件，主要以 YAML 格式编写，遵循特定的文件结构。`Chart.yaml`文件用于设置图表元数据和声明依赖关系。`templates/`目录用于包含 Go 模板化的 Kubernetes YAML 资源，允许它们动态生成。在`templates/`目录下定义的 Kubernetes 资源也可以包含某些钩子来配置应用生命周期中的阶段。为了向用户提供文档，图表可以包含`README.md`和`templates/NOTES.txt`文件，也可以包含`LICENSE`文件来声明图表的使用和分发权限。最后，图表可以包含一个`.helmignore`文件，用于从最终打包的产品中省略声明的文件。
在本章中，您学习了 Helm 图表的结构以及如何配置关键图表组件。有了本章的知识，你现在已经了解了如何从头开始写你的第一张 Helm 图表的基本概念，我们将在 [*第 5 章*](05.html#_idTextAnchor265)*构建你的第一张 Helm 图表*中进行。
# 进一步阅读
要了解更多关于创建 Helm 图表背后的基础知识，请参考 https://helm.sh/docs/chartHelm d[文档中的图表模板指南页面。https://helm.sh/doc](https://helm.sh/docs/chart_template_guide/)的 Ch [艺术部分/主题/图表/也描述了本章讨论的许多主题，包括图表文件结构、依赖关系和`Chart.yaml`文件。](https://helm.sh/docs/topics/charts/a)
# 问题
1.  在 Kubernetes 和 Helm 中最常用的文件格式是什么？
2.  `Chart.yaml`文件中有哪三个必填字段？
3.  如何引用或覆盖图表依赖关系中的值？
4.  假设您想要对使用 Helm 部署的数据库进行数据快照。在将数据库升级到更新版本之前，您可以做些什么来确保获取一个数据`snapshot`？
5.  作为图表开发人员，您可以创建哪些文件来为最终用户提供文档并简化图表安装过程？
6.  您可以利用什么样的 Helm 模板构造来生成重复的 YAML 部分？
7.  `Chart.yaml`文件和`Chart.lock`文件有什么不同？
8.  将资源定义为钩子的注释的名称是什么？
9.  图表模板中函数和管道的用途是什么？可以使用的常用功能有哪些？