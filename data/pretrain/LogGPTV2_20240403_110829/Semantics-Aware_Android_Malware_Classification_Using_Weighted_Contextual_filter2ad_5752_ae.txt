On the other hand, in theory, it is possible for adversaries to
launch mimicry attacks and embed malicious code into seemingly
benign graphs to evade our detection mechanism. This, by itself,
is an interesting research topic and deserves serious consideration.
Nevertheless, we note that it is non-trivial to evade detections based
upon high-level program semantics, and automating such evasion
attacks does not appear to be an easy task.
In contrast, existing
low-level transformation attacks can be easily automated to gener-
ate many malware variants to bypass the AV scanners. DroidSIFT
certainly defeats such evasion attempts.
7. RELATED WORK
In this section, we discuss the previous work related to Android
malware classiﬁcation, Android malware detection, and graph-based
program analysis.
0	
  200	
  400	
  600	
  800	
  1000	
  1200	
  Detec%on	
  Run%me	
  (s) App	
  ID Graph	
  Genera/on	
  Anomaly	
  Detec/on	
  Signature	
  Detec/on	
  0 0.2 0.4 0.6 0.8 1 0 50 100 150 200 250 Similarity Score Graph Pair ID Standard Bipartite Weighted Graph Similarity 0 0.2 0.4 0.6 0.8 1 0 50 100 150 200 250 Similarity Score Graph Pair ID Standard Bipartite Weighted Graph Similarity Android Malware Classiﬁcation.
Many prior efforts have been made to automatically classify An-
droid malware via machine learning. H. Peng et al. [27] proposed
a permission-based classiﬁcation approach and introduced proba-
bilistic generative models for ranking risks for Android apps. Jux-
tapp [19] performed feature hashing on the opcode sequence to de-
tect malicious code reuse. DroidAPIMiner [5] extracted Android
malware features at the API level and provided light-weight clas-
siﬁers to defend against malware installations. DREBIN [6] took
a hybrid approach and considered both Android permissions and
sensitive APIs as malware features. To this end, it performed broad
static analysis to extract feature sets from both manifest ﬁles and
bytecode programs. It further embedded all feature sets into a joint
vector space. As a result, the features contributing to malware de-
tection can be analyzed geometrically and used to explain the de-
tection results. Despite the effectiveness and computational efﬁ-
ciency, these machine learning based approaches extract features
from solely external symptoms and do not seek an accurate and
complete interpretation of app behaviors. In contrast, we produce
weighted contextual API dependency graphs as more robust fea-
tures to reﬂect essential behaviors.
Android Malware Detection & Program Analysis.
Previous studies were focused on large-scale and light-weight
detection of malicious or dangerous Android apps. DroidRanger [37]
proposed permission-based footprinting and heuristics-based schemes
to detect new samples of known malware families and identify cer-
tain behaviors of unknown malicious families, respectively. Risk-
Ranker [18] developed an automated system to uncover dangerous
app behaviors, such as root exploits, and assess potential security
risks. Kirin [15] proposed a security service to certify apps based
upon predeﬁned security speciﬁcations. WHYPER [26] leveraged
Natural Language Processing and automated risk assessment of
mobile apps by revealing discrepancies between application de-
scriptions and their true functionalities. Efforts were also made
to pursue in-depth analysis of malware and application behaviors.
TaintDroid [13], DroidScope [32] and VetDroid [35] conducted dy-
namic taint analysis to detect suspicious behaviors during runtime.
Ded [14], CHEX [23], AppSealer [33], Capper [34], PEG [10], and
FlowDroid [7] exercised static dataﬂow analysis to identify danger-
ous code in Android apps. The effectiveness of these approaches
depends upon the quality of human crafted detection patterns spe-
ciﬁc to certain dangerous or vulnerable behaviors.
Graph-based Code Analysis.
Graph-based code analysis has been well-studied for traditional
client-server programs. Hu et al. [20] proposed two-level malware
indexing to address the scalability of querying malware function-
call graphs in databases. Kolbitsch et al. [21] performed dynamic
analysis to extract program slices responsible for malicious infor-
mation ﬂow between system calls, and then conducted model check-
ing by matching the generated slices against unknown programs.
Fredrikson et al. [16] presented an automated technique for extract-
ing optimally discriminative speciﬁcations which uniquely iden-
tify a class of program, such as a malware family. Yamaguchi et
al. [31] introduced a novel representation of source code, called
a “code property graph”, that merges concepts of classic program
analysis (abstract syntax trees, control ﬂow graphs, and program
dependence graphs) into a joint data structure. Such a graph rep-
resentation enables elegant modeling of common vulnerabilities.
HI-CFG [9] inferred a hybrid information and control-ﬂow graph
from a binary instruction trace, and based on the graph, enabled
attack polymorphism. Compared to these approaches, the novelty
of our work lies in the fact that our dependency graph generation
needs to cope with Android programming paradigms. Gascon et
al. [17] also extended graph-based malware analysis to the Android
environment. However, their malware detection was based upon
the structural similarity of callgraphs, while DroidSIFT relies upon
more robust, high-level (API) program semantics.
8. CONCLUSION
In this paper, we propose a novel, semantic-based approach that
classiﬁes Android malware via dependency graphs. To battle trans-
formation attacks, we extract a weighted contextual API depen-
dency graph as program semantics to construct feature sets. To
ﬁght against malware variants and zero-day malware, we introduce
graph similarity metrics to uncover homogeneous application be-
haviors while tolerating minor implementation differences. We im-
plement a prototype system, DroidSIFT, in 23 thousand lines of
Java code. We evaluate our system using 2200 malware samples
and 13500 benign samples. Experiments show that our signature
detection can correctly label 93% malware instances; our anomaly
detector is capable of detecting zero-day malware with relatively
low false negative rate (2%) and false positive rate (5.15%).
9. ACKNOWLEDGMENT
We would like to thank anonymous reviewers for their com-
ments. This research was supported in part by NSF Grant #1018217,
NSF Grant #1054605 and McAfee Inc. Any opinions, ﬁndings, and
conclusions made in this material are those of the authors and do
not necessarily reﬂect the views of the funding agencies.
10. REFERENCES
[1] Android Malware Genome Project.
http://www.malgenomeproject.org/.
[2] Soot: a Java Optimization Framework.
http://www.sable.mcgill.ca/soot/.
[3] McAfee Labs Threats report Fourth Quarter 2013.
http://www.mcafee.com/us/resources/
reports/rp-quarterly-threat-q4-2013.pdf,
2013.
[4] Number of Android Applications.
http://www.appbrain.com/stats/number-of-
android-apps, 2014.
[5] Y. Aafer, W. Du, and H. Yin. DroidAPIMiner: Mining
API-Level Features for Robust Malware Detection in
Android. In Proceedings of the 9th International Conference
on Security and Privacy in Communication Networks
(SecureComm’13), September 2013.
[6] D. Arp, M. Spreitzenbarth, M. Hübner, H. Gascon, and
K. Rieck. Drebin: Efﬁcient and Explainable Detection of
Android Malware in Your Pocket. In Proceedings of the 21th
Annual Network and Distributed System Security Symposium
(NDSS’14), February 2014.
[7] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein,
Y. le Traon, D. Octeau, and P. McDaniel. FlowDroid: Precise
Context, Flow, Field, Object-sensitive and Lifecycle-aware
Taint Analysis for Android Apps. In Proceedings of the 35th
ACM SIGPLAN Conference on Programming Language
Design and Implementation (PLDI ’14), June 2014.
[8] K. W. Y. Au, Y. F. Zhou, Z. Huang, and D. Lie. PScout:
Analyzing the Android Permission Speciﬁcation. In
Proceedings of the 2012 ACM Conference on Computer and
Communications Security (CCS’12), October 2012.
[9] D. Caselden, A. Bazhanyuk, M. Payer, S. McCamant, and
D. Song. HI-CFG: Construction by Binary Analysis, and
Application to Attack Polymorphism. In Proceedings of 18th
European Symposium on Research in Computer Security
(ESORICS’13), September 2013.
[10] K. Z. Chen, N. Johnson, V. D’Silva, S. Dai, K. MacNamara,
T. Magrino, E. X. Wu, M. Rinard, and D. Song. Contextual
Policy Enforcement in Android Applications with
Permission Event Graphs. In Proceedings of the 20th Annual
Network and Distributed System Security Symposium
(NDSS’13), February 2013.
[11] M. Christodorescu, S. Jha, S. A. Seshia, D. Song, and R. E.
Bryant. Semantics-Aware Malware Detection. In
Proceedings of the 2005 IEEE Symposium on Security and
Privacy (Oakland’05), May 2005.
[12] H. Dharmdasani. Android.HeHe: Malware Now Disconnects
Phone Calls. http://www.fireeye.com/blog/
technical/2014/01/android-hehe-malware-
now-disconnects-phone-calls.html, 2014.
[13] W. Enck, P. Gilbert, B.-G. Chun, L. P. Cox, J. Jung,
P. McDaniel, and A. N. Sheth. TaintDroid: An
Information-Flow Tracking System for Realtime Privacy
Monitoring on Smartphones. In Proceedings of the 9th
USENIX Symposium on Operating Systems Design and
Implementation (OSDI’10), October 2010.
[14] W. Enck, D. Octeau, P. McDaniel, and S. Chaudhuri. A
Study of Android Application Security. In Proceedings of
the 20th Usenix Security Symposium, August 2011.
[15] W. Enck, M. Ongtang, and P. McDaniel. On Lightweight
Mobile Phone Application Certiﬁcation. In Proceedings of
the 16th ACM Conference on Computer and
Communications Security (CCS’09), November 2009.
[16] M. Fredrikson, S. Jha, M. Christodorescu, R. Sailer, and
X. Yan. Synthesizing Near-Optimal Malware Speciﬁcations
from Suspicious Behaviors. In Proceedings of the 2010 IEEE
Symposium on Security and Privacy (Oakland’10), May
2010.
[17] H. Gascon, F. Yamaguchi, D. Arp, and K. Rieck. Structural
Detection of Android Malware Using Embedded Call
Graphs. In Proceedings of the 2013 ACM Workshop on
Artiﬁcial Intelligence and Security (AISec’13), November
2013.
[18] M. Grace, Y. Zhou, Q. Zhang, S. Zou, and X. Jiang.
RiskRanker: Scalable and Accurate Zero-day Android
Malware Detection. In Proceedings of the 10th International
Conference on Mobile Systems, Applications and Services
(MobiSys’12), June 2012.
[19] S. Hanna, L. Huang, E. Wu, S. Li, C. Chen, and D. Song.
Juxtapp: A Scalable System for Detecting Code Reuse
Among Android Applications. In Proceedings of the 9th
International Conference on Detection of Intrusions and
Malware, and Vulnerability Assessment (DIMVA’12), July
2012.
[20] X. Hu, T.-c. Chiueh, and K. G. Shin. Large-scale Malware
Indexing Using Function-call Graphs. In Proceedings of the
16th ACM Conference on Computer and Communications
Security (CCS’09), November 2009.
[21] C. Kolbitsch, P. M. Comparetti, C. Kruegel, E. Kirda,
X. Zhou, and X. Wang. Effective and Efﬁcient Malware
Detection at the End Host. In Proceedings of the 18th
Conference on USENIX Security Symposium, August 2009.
[22] H. Lockheimer. Android and Security.
http://googlemobile.blogspot.com/2012/
02/android-and-security.html, 2012.
[23] L. Lu, Z. Li, Z. Wu, W. Lee, and G. Jiang. CHEX: Statically
Vetting Android Apps for Component Hijacking
Vulnerabilities. In Proceedings of the 2012 ACM Conference
on Computer and Communications Security (CCS’12),
October 2012.
[24] J. Oberheide and C. Miller. Dissecting the Android Bouncer.
SummerCon, 2012.
[25] D. Octeau, P. McDaniel, S. Jha, A. Bartel, E. Bodden,
J. Klein, and Y. L. Traon. Effective Inter-Component
Communication Mapping in Android with Epicc: An
Essential Step Towards Holistic Security Analysis. In
Proceedings of the 22nd USENIX Security Symposium,
August 2013.
[26] R. Pandita, X. Xiao, W. Yang, W. Enck, and T. Xie.
WHYPER: Towards Automating Risk Assessment of Mobile
Applications. In Proceedings of the 22nd USENIX
Conference on Security, August 2013.
[27] H. Peng, C. Gates, B. Sarma, N. Li, Y. Qi, R. Potharaju,
C. Nita-Rotaru, and I. Molloy. Using Probabilistic
Generative Models for Ranking Risks of Android Apps. In
Proceedings of the 2012 ACM Conference on Computer and
Communications Security (CCS’12), October 2012.
[28] V. Rastogi, Y. Chen, and X. Jiang. DroidChameleon:
Evaluating Android Anti-malware against Transformation
Attacks. In Proceedings of the 8th ACM Symposium on
InformAtion, Computer and Communications Security
(ASIACCS’13), May 2013.
[29] K. Riesen, S. Emmenegger, and H. Bunke. A Novel Software
Toolkit for Graph Edit Distance Computation. In
Proceedings of the 9th International Workshop on Graph
Based Representations in Pattern Recognition, May 2013.
[30] S. J. Russell and P. Norvig. Artiﬁcial Intelligence: A Modern
Approach. 2003.
[31] F. Yamaguchi, N. Golde, D. Arp, and K. Rieck. Modeling
and Discovering Vulnerabilities with Code Property Graphs.
In Proceedings of the 35th IEEE Symposium on Security and
Privacy (Oakland’14), May 2014.
[32] L.-K. Yan and H. Yin. DroidScope: Seamlessly
Reconstructing OS and Dalvik Semantic Views for Dynamic
Android Malware Analysis. In Proceedings of the 21st
USENIX Security Symposium, August 2012.
[33] M. Zhang and H. Yin. AppSealer: Automatic Generation of
Vulnerability-Speciﬁc Patches for Preventing Component
Hijacking Attacks in Android Applications. In Proceedings
of the 21th Annual Network and Distributed System Security
Symposium (NDSS’14), San Diego, CA, February 2014.
[34] M. Zhang and H. Yin. Efﬁcient, Context-aware Privacy
Leakage Conﬁnement for Android Applications Without
Firmware Modding. In Proceedings of the 9th ACM
Symposium on Information, Computer and Communications
Security (ASIACCS’14), 2014.
[35] Y. Zhang, M. Yang, B. Xu, Z. Yang, G. Gu, P. Ning, X. S.
Wang, and B. Zang. Vetting Undesirable Behaviors in
Android Apps with Permission Use Analysis. In Proceedings
of the 20th ACM Conference on Computer and
Communications Security (CCS’13), November 2013.
[36] Y. Zhou and X. Jiang. Dissecting Android Malware:
Characterization and Evolution. In Proceedings of the 33rd
IEEE Symposium on Security and Privacy (Oakland’12),
May 2012.
[37] Y. Zhou, Z. Wang, W. Zhou, and X. Jiang. Hey, You, Get Off
of My Market: Detecting Malicious Apps in Ofﬁcial and
Alternative Android Markets. In Proceedings of 19th Annual
Network and Distributed System Security Symposium
(NDSS’12), February 2012.