is to look for coding errors based on a compiled list of
common security-related errors or known unsafe function
calls (e.g., function strcpy() in C/C++ is vulnerable to
buffer overﬂow).
In [29], static analysis for Java is pre-
sented together with a tool for the same purpose, whereas
[28] presents a tool for C/C++ code.
In security testing, techniques of property-based testing
[4] are mostly used. Attention is focussed on proving that
the software under test satisﬁes a certain property extracted
from the speciﬁcations. This property could, for instance,
be that users should be authenticated before they are al-
lowed to do any action.
In this case, the software entity
responsible for authentication is tested. However, research
in security testing also investigates other techniques such as
in [27], where fault injection and stress testing are consid-
ered. It is important to note here that also formal veriﬁcation
methods can be used for the veriﬁcation of security proper-
ties (e.g., using model checking), many examples exist for
security protocols.
Several standard methodologies exist that aim to provide
guidelines for IT systems security evaluators. The idea is to
propose a number of security mechanisms the system can
implement, and a number of checks the system has to go
through to provide a certain level of assurance that the se-
curity mechanisms were correctly implemented. The most
prominent is the Common Criteria (CC) methodology [2]
that was selected as an ISO standard (ISO 15408).
It is
meant to be a replacement for some other methods that pre-
ceded it; namely, the Trusted Computer System Evaluation
Criteria (TCSEC), and the Information Technology Security
Evaluation Criteria (ITSEC).
• Our Methodology The methodology used to do the vul-
nerability analysis is depicted in Figure 2 and consists of the
following ﬁve phases:
• Phase 1: Study of platform components.
• Phase 2: Reverse engineering.
• Phase 3: Static code analysis.
• Phase 4: Security testing.
• Phase 5: Risk analysis.
We explain hereafter the details of each phase of this
methodology.
Phase 1 aims to identify the major system software
components. We consider those component APIs that are
recommended as mandatory in the latest revision of the
Java Technology for the Wireless Industry (JTWI) i.e., JSR
185. Besides KVM, the mandatory components are CLDC,
MIDP and Wireless Messaging API (WMA). Available
speciﬁcation documents from the Java Community Process
(JCP) and related publications are studied.
Phase 2 aims to reverse engineer the platform. The ana-
lyzed source code is that of Sun’s reference implementation
(RI) for KVM, CLDC, MIDP, and WMA. The languages
used in the RI are C (for KVM and CLDC), and Java (for
CLDC, MIDP and WMA). In order to achieve a better un-
derstanding of the code, we resort to reverse engineering
tools (e.g., Understand for C++, Understand for Java, and
Rational Rose). Using these tools, we are able to compute
abstractions and recover the underlying architecture and de-
sign of the platform.
Phase 3 aims to carry out a security analysis of the code
for the purpose of discovering vulnerabilities. To this end,
we use two techniques: Security code inspection and auto-
matic security analysis. Security code inspection is carried
out according to the “checklist approach” listed in [3]. For
this purpose, we compile two lists of common security er-
rors; one for Java, and the other for C, to be used as a guide
in the inspection process. The automatic code security anal-
ysis is carried out by tools such as FlawFinder and ITS4
[28] for C, and Jlint [29] for Java. Tools are applied to all
the source ﬁles. The result of this phase is a list of probable
security ﬂaws. This list is used to feed the next phase.
Phase 4 aims to discover more vulnerabilities by means
of security testing. To this end, we design test cases in the
form of security attacks. The design of these attack scenar-
ios is based on: (1) The list of probable weaknesses that
we compiled during code inspection, (2) the known types
of vulnerabilities that are presented in several papers such
as [10] and (3) the security properties that are extracted
from the speciﬁcation documents according to property-
based testing principles [4]. These test cases are run on:
• Sun’s reference implementation.
• Phone emulators: Sun’s Wireless Tool Kit (WTK),
Siemens, Motorola and Nokia.
• Actual phones: Motorola V600 and Nokia 3600.
To be more focused, each test case is designed to attack a
certain functional component of the system. These compo-
nents are: The virtual machine, the networking components,
the threading system, the storage system (for user data, and
JAR ﬁles), and the display.
Phase 5 aims to structure the discovered vulnerabili-
ties and assess the underlying risks according to a well-
established and standard framework. The MEHARI method
[13] is used to achieve this objective. The criteria of
MEHARI are used to structure the discovered vulnerabili-
ties into an appropriate classiﬁcation. Afterwards, the se-
riousness of each vulnerability is assessed based on the
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
System Components Study(cid:13)
(JTWI Mandatory APIs)(cid:13)
Study of Specification Documents(cid:13)
Study of Related Publications(cid:13)
Code Reading for Comprehension(cid:13)
Reverse Engineering(cid:13)
Use of Reverse Engineering Tools(cid:13)
Imagix, Understand for C++/Java,(cid:13)
Rational Rose, etc.(cid:13)
Static Code Analysis(cid:13)
Security Code Inspection(cid:13)
Compiled List of Security(cid:13)
Vulnerabilities Patterns(cid:13)
Code Security Analysis Tools(cid:13)
FlawFinder, ITS4, Jlint(cid:13)
Security Testing(cid:13)
Test Case Generation based on:(cid:13)
List of Flaws, Specifications,(cid:13)
Common Types of Vulnerabilities.(cid:13)
Risk Analysis(cid:13)
Methodology to Classify(cid:13)
Vulnerabilities and Assess their(cid:13)
Risks (MEHARI)(cid:13)
Figure 2. Methodology to Discover Vulnerabilities
guidelines of the MEHARI risk analysis methodology. As a
downstream result of this phase, a reasonable and efﬁcient
set of security requirements is elaborated in order to harden
the security of J2ME CLDC platform implementations.
The results presented in the following sections are the
ones we obtained from phases 1 to 4.
3.3 Networking Vulnerabilities
3.3.1 MIDP SSL Vulnerability
In order to establish a secure connection with remote sites
(HTTPS), the reference implementation of MIDP uses SSL
v3.0 protocol. The implementation is based on KSSL [7]
from Sun Labs. During the SSL handshake, the protocol
has to generate random values to be used to compute the
master secret. The master secret is then used to generate the
set of symmetric keys for encryption. Hence, generating
random values that are unpredictable is an important secu-
rity aspect of SSL. It is well known that the challenge in
producing good random values is how to update the seed.
The seed is an initial value on which you apply a certain
algorithm in order to generate random values. Generating a
set of random values occurs in the following way: the cur-
rent seed value is used to generate a random value, then, the
seed is updated and a second random value can be generated
and so on. By inspecting the Reference Implementation
of SSL, we noticed that the seed update depends only on
the system time (System.currentTimeMillis).
In
order to obtain a concrete proof of this insight, we ﬁxed
the system time value in the updateSeed method. Then,
by executing the SSL handshake, we noticed that the ﬁrst
random value generated is always the same. Similarly, the
next random values are perfectly predictable. Hence, in or-
der to obtain the random value generated by the client, all
what the attacker has to do is to guess the precise system
time (in milliseconds) at the moment of the random value
computation. To this end, popular Ethernet snifﬁng tools
can be used. These tools (e.g.
tcpdump) record the pre-
cise time they see each packet. This allows the attacker to
guess a very close interval of the correct system time. At
that moment, it remains to try all possible values in that in-
terval. For example, the attack that was carried out against
the Netscape browser implementation of SSL in 1996 [6]
used snifﬁng tools to determine the seconds variable of the
system time. Then, to ﬁnd the microseconds variable, every
possible value of the 1 million possibilities is tried.
3.3.2 Unauthorized SMS Sending Vulnerability
As every security-sensitive API, Wireless Message API (W-
MA), allowing the exchange of SMS messages, requires ap-
propriate permissions to be used. This is due to charges that
may result in the connection. Usually, user permission is
obtained through an on-screen dialog. That is, when a pro-
gram needs to send an SMS message, the device displays a
dialog asking the user whether he accepts to send the SMS
message and hence to assume charges. Consequently, send-
ing an SMS message without the authorization of the user is
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
considered as a security ﬂaw. As mentioned earlier, the Phe-
noelit hackers group [19] has discovered that the Siemens
S55 phone has a vulnerability that makes the device send
SMS messages without the authorization of the user. The
idea was to ﬁll the screen with different items when the de-
vice is asking the user for SMS permission. In this way,
the user unwittingly will approve sending SMS messages
because he thinks that he is answering a different question.
In order to prove this vulnerability, we developed a MI-
Dlet that tries to take advantage of this ﬂaw. The MIDlet
uses two threads. The ﬁrst sends an SMS message and the
second ﬁlls the screen with other items but without chang-
ing the buttons of the screen. The key point in this attack
is that only the screen is overwritten. The buttons (soft but-
tons) behavior is not changed and it is still about the SMS
message permission. We run the MIDlet on Siemens S55
emulator using Sun One Studio 4. The result was as we
expected: the SMS authorization dialog was obscured by a
different item. This makes the user think that he is answer-
ing an invitation to play a game! Since its publication and
in the few documents where it is published, this ﬂaw was al-
ways bound to Siemens S55 phones. However, nothing was
said about its applicability on other phones. We run the pre-
vious MIDlet on other Siemens phones emulators, namely,
2128, CF62, and MC60. We found that all these phones
are vulnerable to SMS authorization attack. By checking
the APIs of all these phones, we found that the SMS APIs
are almost the same, which explains our ﬁndings. Unlike
Siemens phones, Sun RI of MIDP is not vulnerable to this
attack. The reason is that it blocks any modiﬁcations to the
screen before an answer is received from the user. Similarly,
Motorola V600 phone is not vulnerable to this attack.
3.4 Storage System Vulnerabilities
3.4.1 Managing the Available Free Persistent Storage
Vulnerability
When a MIDlet needs storing information in the persistent
storage, it can create new records. Since the persistent stor-
age is shared by all Midlets installed on the device, restric-
tions must be made on the amount of storage attributed to
each MIDlet. This is motivated by the fact that embed-
ded devices have limited memory resources. As we can see
from the MIDP speciﬁcation, there is no restriction on the
size of storage granted to a given MIDlet.
If no restrictions are made on the persistent storage
granted to one MIDlet, we can not prevent any MIDlet from
getting all the available free space on the persistent storage
for its record stores. By allowing this, all other MIDlets will
be prevented from getting additional persistent storage (that
can be vital for their life cycle).
The previous vulnerability was discovered in the MIDP
RI as well as the Wireless Toolkits. However, it was not
present in the real phones we tested (Motorola V600 and
Nokia 3360).
High level(cid:13)
MIDP API(cid:13)
Class(cid:13)  RecordStore(cid:13)
Security(cid:13)
checks(cid:13)
Low level API(cid:13)
Class(cid:13)  RecordStoreFile(cid:13)
Direct(cid:13)
Access(cid:13)
Java and Native(cid:13)
code(cid:13)
e.g. read(), write, ...(cid:13)
Bypass security checks(cid:13)
Device(cid:13)
Hardware(cid:13)
Developer(cid:13)
Figure 3. Storage System Vulnerabilities: By-
passing Internal APIs protection.
3.4.2 Unprotected Internal APIs Vulnerability
MIDP APIs were designed in several levels of abstraction
(Figure 3). The highest level contains all what a developer