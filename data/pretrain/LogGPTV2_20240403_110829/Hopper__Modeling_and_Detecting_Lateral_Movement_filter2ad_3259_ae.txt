ing steps did not ﬁlter out). Finally imprecision in Hopper’s
causality engine contributed to 19% of Hopper’s CLEAR path
false positives and over 49% of Hopper’s UNCLEAR-causality
false positives. Many of these false positives are paths, ini-
tiated by one system administrator, that purportedly make
a login that switches to another system administrator’s cre-
dentials. These alerts often involve a handful of “gateway”
machines that sysadmins use to access important internal
servers (e.g., Domain Controllers). Hopper generates these
false alerts when multiple sysadmins have recently logged
into a gateway machine, and one sysadmin launches a lo-
gin from the gateway machine to a rarely-accessed or niche
server. Because these paths involve only administrator cre-
dentials, Hopper could reduce its false positives by ﬁltering
them out; any credential switch between two administrators
likely provides limited additional access.
7.4 Comparison with Prior State-of-the-Art
We compared Hopper’s performance against the best per-
forming prior work, the Structurally Anomalous Login (SAL)
detector proposed by Siadati and Memon [44]. SAL detects
lateral movement by generating a set of logins that traverse a
rare edge in the login graph (based on a user-speciﬁed thresh-
old). Next, SAL learns and uses a set of “benign login patterns”
to identify which rare edges to alert on. Each login pattern
corresponds to a triplet of (source machine attributes, desti-
nation machine attributes, and user attributes). For example,
given the login (src = Machine A, dest = Machine B, user =
Alice), (src = New York, dest = San Francisco, user = Engi-
neering) would be one login pattern, if Machine A resides
within New York, Machine B resides within San Francisco,
and Alice works on the Engineering team. SAL learns a set of
benign patterns by using a historical set of logins to identify
patterns where a sufﬁciently large fraction of source machines,
destination machines, and/or users have at least one historical
login that matches a pattern. SAL then produces an alert for
every rare-edge login that does not match a benign pattern.
Based on the data available to us, we use the following set
of login attributes from the SAL paper: each user has two
attributes: (the user’s team, and the user’s type: system admin-
istrator, regular user, or service account) and each machine
has two attributes: (the machine’s type: client or server, and
the machine’s geographic location). We applied SAL with
a rolling two-month training window on all of the ﬁltered
logins in our evaluation window (i.e., the same data used for
Hopper’s evaluation; we also applied both the data ﬁltering
and benign scenario pruning outlined in § 3.1 and § 6). SAL
takes two user-provided thresholds for training and classiﬁca-
tion, respectively.6 Table 5 reports the results for SAL using
the parameters that produced the minimum volume of FP’s to
detect (1) the same number of attacks as Hopper and (2) (ap-
proximately) half as many attacks as Hopper. We report the
number of FP’s SAL produces after de-duplicating the alerts
to only include one edge (source, destination, and target user)
per day, and we considered SAL successful if it produced an
alert for any malicious login in an attack.
SAL produces nearly 8× as many false positives as Hopper
to detect the same number of attacks. Whereas Hopper selec-
tively chooses when to apply anomaly detection (to resolve
uncertainty in paths that might have the two key attack proper-
ties), SAL follows a traditional machine learning approach by
simply applying anomaly detection to every login, resulting
in signiﬁcantly more false positives.
7.5 Attack Case Studies
Below, we describe two attacks created by our synthesis
framework, and examine how Hopper and traditional anomaly
detection approaches, such as SAL, handle them.
Example Attack 1: Targeted Compromise: One attack sim-
ulated an adversary who began their lateral movement from
an engineer’s laptop and then attempted to access one of
several high-value machines within an organization (e.g., a
Domain Controller). After three logins, the attacker arrived
on a machine where a system administrator, Bob, had recently
logged into the machine via ssh. Simulating an attacker com-
promising and using Bob’s ssh credentials (e.g., by abusing a
forwarded SSH agent), our framework created a fourth attack
6Our extended technical report shows SAL’s performance under the range
of parameters we explored [22].
USENIX Association
30th USENIX Security Symposium    3105
login that leveraged Bob’s credentials to access a server that
manages user permissions and SSH keys.
The last two logins involved in this attack path rarely occur,
enabling SAL to detect this attack with a low volume of false
positives. Similarly, Hopper successfully detects this attack,
even though it involves an attack path with unclear causality
(since the sysadmin had an active ssh session that could have
launched the ﬁnal login into the ssh management server);
the rareness of the attack path’s edges led Hopper to rank it
among the top 10 most suspicious paths that month.
Example Attack 2: Stealthy, Short Paths: For each user,
our framework also simulated attacks that modeled a stealthy
adversary who only accesses machines via previously tra-
versed graph edges. In one such attack, starting from a com-
promised user (Alice)’s machine, our framework ﬁrst syn-
thesized a login to a server (Y ) that Alice had previously
accessed (4 out of the past 60 days). After moving to Server
Y , the attacker observed that Server Y still had the credentials
of a sysadmin, Bob, cached from a login during the past week,
enabling the attacker to acquire them. The attacker (our frame-
work) also observed that Bob had previously logged into a
powerful remote management machine from Server Y (3 out
of the past 60 days). Accordingly, our framework synthesized
a ﬁnal, second attack login using Bob’s credentials to access
this high-value server. Although seemingly simple, this attack
reﬂects a realistic path for a stealthy attacker, since shorter
paths provide fewer opportunities for detection.
Hopper detected this attack with its CLEAR path detector:
the second login switched to a new target username, but over
24 hours elapsed since Bob accessed Server Y . Even if Bob
had logged into Server Y more recently, Hopper would still
have caught this attack under its anomaly scoring detector
(which ranks the attack path among the top 20 most suspi-
cious in the past month). In contrast, because this attack only
traverses edges with prior history, SAL would produce at least
14,000 alerts across our 13-month evaluation data to detect it.
8 Discussion
Hopper achieves good results on the real-world data set we
used. However, a number of interesting future directions re-
main, including overcoming potential evasion strategies, un-
derstanding how Hopper generalizes across different enter-
prise network architectures, and extending Hopper’s detection
approach to achieve better performance.
8.1 Evasion and Limitations
An attacker might evade detection if they can access their tar-
get machines by piggybacking on a series of logins made by
legitimate users [35], or if the attacker ﬁnds a frequently trav-
eled login path that provides access to their target. Our eval-
uation explicitly generated attacks that pursued this stealthy
strategy, and Hopper could detect many of these attacks. The
attacks that Hopper failed to detect had UNCLEAR causality,
followed paths with frequently traveled edges, and occurred
on days with other UNCLEAR paths whose edges occurred
more infrequently. However, we note that attackers might
not always be able to make such stealthy movement: when
synthesizing attacks across our sample of 50 random starting
users, 37 users could not stealthily access a high-value server;
i.e., attackers who compromised these users’ machines had
no path to our set of sensitive machines, or would need to
make at least one rare-edge login to access them.
Although our threat model focuses on interactive attackers
who manually perform their movement, attackers could evade
detection by installing stealthy malware on a shared server
that lies on the path to their ﬁnal target machine. Such mal-
ware could wait until the maximum session duration (time
threshold for causally linking two logins together) has elapsed.
Once this time has elapsed, the malware could then oppor-
tunistically launch the subsequent logins in its attack path
whenever a legitimate user (e.g., Bob) performs an inbound
login into the shared server. This strategy will cause Hopper
to causally link the second half of the attack path, that abuses
Bob’s credentials, to Bob’s earlier legitimate logins, creating
a BENIGN path that appears to consistently use one set of
credentials. Because this approach increases attacker dwell
time and their host footprint, complimentary techniques such
as binary allow-listing, anti-virus, and additional detection
signals (§ 8.3) can help increase the chance of detection.
Missing or inaccurate logging information can also create
false negatives, a problem common to any detection strategy.
Future work can explore ways to alleviate this challenge by
using multiple sources of information to determine the correct
attributes of login data. Additionally, organizations can deploy
commercial log-hygiene solutions to continuously monitor
and collate their logging data.
8.2 Generalizability
Although we evaluate Hopper on a large real-world data set,
Hopper’s performance could change at enterprises with sig-
niﬁcantly different network architectures and security poli-
cies. For example, Dropbox makes a dedicated effort to scope
employee access based on the least privileges principle; at or-
ganizations where many users have highly privileged access,
an attacker may not need to acquire additional credentials to
achieve their desired goal. As a result, lateral movement at-
tack paths might not exhibit a switch in credentials, allowing
adversaries to evade detection. For such organizations, imple-
menting better permissions hygiene will likely yield greater
security beneﬁts than any detection strategy. We view Hop-
per as a promising direction for securing enterprises against
attacks that could succeed in spite of the adoption of such
security best practices.
3106    30th USENIX Security Symposium
USENIX Association
outbound logins from the common servers to other machines.
If this behavior occurs multiple times along a path, it risks an
exponential increase in the number of paths that Hopper will
infer. This path explosion might lead not only to unsuitable
run-time performance (e.g., consuming too much memory),
but could also lead to a large number of false positives. If
many of these incorrectly inferred movement paths have a
suspicious set of features, then Hopper may generate a sub-
stantial number of false alerts related to these paths. Two
factors mitigated the problem of path explosion in our data
set: a relatively ﬂat network topology and the natural cluster-
ing of user access patterns to a few work-related machines.
Flat networks arise because most (non-sysadmin) user ac-
tivity consists of direct logins from their client machines to
the server that hosts their desired functionality or data. More-
over, because many servers provide a limited UI and set of
functionality, they often do not provide an easy way to launch
outbound logins. This property means that even when a server
has many inbound logins from users, it often does not risk
path explosion because subsequent outbound logins do not
occur. We expect that even as the number of users and servers
increases, these natural habits will keep access patterns rel-
atively ﬂat; this behavior will increase the number of short
login paths, but continue to limit the number of long paths.
At Dropbox, we did observe processes that generated long
paths, such as when users need to access a server by tunneling
through a gateway (bastion) machine, automated activity (e.g.,
domain controllers iteratively synchronizing data amongst
each other), and system administrator activity. However, most
of the paths from these activities either do not contain both
attack properties (e.g., no switch in credentials or no new ac-
cess for the path’s potential causal users), or they get removed
by Hopper’s ﬁltering procedure since they do not pose a large
risk for lateral movement (§ 3.1).
Second, users tend to access machines for a speciﬁc job
function, creating a sparse graph where different subsets of
logins naturally cluster around a small group of machines (e.g.,
at Dropbox over 90% of machines have an in-degree ≤ 10 and
an out-degree ≤ 10). Implementing least privileges, where
users have access to only a small set of machines relevant
to their work, also reinforces this common behavior. As a
result, most machines only get accessed by a limited set of
users, which reduces path explosion and the number of paths
with unclear causality. Furthermore, because users accessing a
shared server typically work on the same team or have similar
job roles, their credentials often have similar privileges and
they tend to access the same broader set of machines. Thus,
even when Hopper produces paths with unclear causality,
these paths often do not provide access to an unauthorized
machine for their causal user (the second attack property),
and get marked as benign. Since this property arises from
common user behavior and security policies, and has been
observed at different organizations [44], we expect many other
networks exhibit similar partitioning.
Figure 7: The in-degree and out-degree distribution across hosts at
Dropbox. The in-degree for a host equals the number of machines
that it has received logins from; the out-degree counts how many
unique machines each source machine makes at least 1 login into.
With respect to the impact of a network’s architecture on
Hopper’s performance, we observe that two properties con-
tribute to Hopper ’s success: a relatively ﬂat network topology
and consistent workﬂows across most users that only access
a small subset of machines. Below, we characterize the graph
topology at Dropbox, and explain why we believe many or-
ganizations will also exhibit these two properties, allowing
Hopper to generalize to other networks.
Network Topology of Dropbox: If we aggregate all of the
logins across our dataset, the uniﬁed graph has a diameter of
length 7 and an average shortest path length of 2.12 hops. The
graph contains 10,434 unique edges, where each edge con-
sists of a (source machine, destination machine) tuple; when
edges also include the username involved in a login, the graph
contains 27,718 unique edges. Figure 7 shows the in-degree
and out-degree distribution for all machines in our data: i.e.,
the number of distinct machines that a node receives logins
from and makes logins to. The servers with in-degrees of
over 100 inbound machines correspond to common enterprise
services, such as Windows Domain Controllers that handle
Kerberos-based authentication, printers, telemetry and log-
ging machines, and servers involved in provisioning new ma-
chines. Clients (e.g., laptops) represent 65% of the machines
in our data, resulting in many machines with an in-degree of 0.
Machines with high out-degrees (logins to over 100 different
destinations) correspond to system administrator machines,
as well as internal scanning and monitoring servers.
Impact of Different Network Conﬁgurations: One of the
biggest challenges that Hopper faces is the risk of path explo-
sion and an overwhelming number of suspicious paths with
unclear causality. This situation can occur if many servers
have large numbers of users that access them, who then launch
USENIX Association
30th USENIX Security Symposium    3107
01101001000In-Degree and Out-Degree of Machines0.00.20.40.60.81.0Cumulative Fraction of MachinesIn-DegreeOut-DegreeHopper’s Causality Time Threshold: Hopper uses a time-
based threshold, equal to the maximum remote session du-
ration at an organization, to help infer when logins form a
movement path (§ 5). We discussed this session duration with
the security teams of multiple companies, and all of them im-
plement a similar length policy for remote login sessions (e.g.,
ssh and RDP), based on commonly-adopted, best-practice
recommendations [14], and in some cases compliance and
cyber-insurance guidelines [7,21,26]. Additionally, even if we
doubled the 24-hour threshold that Hopper used in our evalu-
ation, Hopper achieves an 89.9% detection (true positive) rate
while generating an average of 9 false alarms / day.
8.3 Extending Hopper
To further improve Hopper’s performance, future work could
explore prioritizing paths that involve particularly sensitive
credentials or machines. For example, Hopper could assign a
higher anomaly score to any path that accesses a sensitive ma-
chine (speciﬁed by an organization). Similarly, Hopper could
prioritize paths where the causal user elevates themselves to
an administrator account over the course of the path’s logins.
Complementary work uses system logs to detect suspicious
host activity that aligns with attacker behavior enumerated in
the MITRE ATT&CK framework [18, 24, 25, 38]. Organiza-
tions could combine these approaches with Hopper to gain
insight into both malicious host activity as well as suspicious
(lateral) movement between hosts.
Finally, Hopper would generate fewer false positives if it
more precisely inferred causally-linked logins. Future work
could explore how drawing upon additional data sets, such as
network trafﬁc or host logs, could enable more accurate causal
inference. For example, to determine which inbound login
caused an outbound login, Hopper could analyze the inbound
versus outbound network ﬂows across the candidate logins to
pinpoint pairs with overlapping timing and ﬂow sizes.
9 Conclusion
This paper presented Hopper, a system that develops a graphi-
cal model of enterprise logins to detect lateral movement. On
a 15-month enterprise data set, Hopper detected 94.5% of re-