### 记录当前XLOG位点
等待drop schema结束，并记录当前XLOG位点（很长一段时间后稳定（autovacuum）结束）  
```
db0=# select pg_current_xlog_location();
-[ RECORD 1 ]------------+-----------
pg_current_xlog_location | 1/168E6EA8
```
### 监控延迟
在主库执行  
```
\x
select 
pg_size_pretty(pg_xlog_location_diff(pg_current_xlog_location(),sent_location)),
pg_size_pretty(pg_xlog_location_diff(pg_current_xlog_location(),write_location)),
pg_size_pretty(pg_xlog_location_diff(pg_current_xlog_location(),flush_location)),
pg_size_pretty(pg_xlog_location_diff(pg_current_xlog_location(),replay_location)), 
* from pg_stat_replication ;
\watch 1
```
发现备库apply卡在一个REDO REC上很久，如果接下来主库又产生了大量的REDO，那么备库的apply就会延迟严重。  
主机REDO发送是没有延迟的，也就是说REDO已经在备机那里了，但是还没有被apply。  
```
-[ RECORD 1 ]----+------------------------------
pg_size_pretty   | 0 bytes
pg_size_pretty   | 0 bytes
pg_size_pretty   | 0 bytes
pg_size_pretty   | 56 MB  -- 出现apply延迟
pid              | 27375
usesysid         | 10
usename          | postgres
application_name | walreceiver
client_addr      | 127.0.0.1
client_hostname  | 
client_port      | 53164
backend_start    | 2016-10-12 10:17:16.414473+08
backend_xmin     | 2030
state            | streaming
sent_location    | 1/168E6EA8
write_location   | 1/168E6EA8
flush_location   | 1/168E6EA8
replay_location  | 1/13151E28  -- 卡住
sync_priority    | 0
sync_state       | async
```
备机apply延迟严重的话，另外一个问题就是备机的xlog会占用较大的空间。  
### 延迟分析
使用pg_xlogdump分析  "堵塞"  apply的redo rec       
```
pg_xlogdump -b 000000010000000100000013 000000010000000100000014 2>&1 |less
```
搜索1/13151E28  
```
rmgr: Transaction len (rec/tot): 17680828/17680860, tx:       2029, lsn: 1/13151E28, prev 1/13151930, bkp: 0000, desc: commit: 2016-10-12 17:04:39.615288 CST; rels: 
大量的文件位置  
base/400932/199021 base/400932/199422 base/400932/199019 base/400932/199420 base/400932/199017 base/400932/199418 base/400932/199015 base/400932/199416 base/400932/199013 
base/400932/199414 base/400932/199011 base/400932/199412 base/400932/199009 base/400932/199410 
base/400932/199007 base/400932/199408 base/400932/199005 base/400932/199406 base/400932/199003 base/400932/199404 base/400932/199001 base/400932/199402 base/400932/198999
........
........
lcache 400523 snapshot 2608 relcache 400523 snapshot 2608 snapshot 2608 relcache 400730 relcache 400523 snapshot 2608 relcache 400523 snapshot 2608 relcache 400523 snapshot 2608 snapshot 2608 relcache 400728 relcache 400523 snapshot 2608
 relcache 400523 snapshot 2608 relcache 400523 snapshot 2608 snapshot 2608 relcache 400726 relcache 400523 snapshot 2608 snapshot 2608 snapshot 2608
rmgr: Standby     len (rec/tot):     24/    56, tx:          0, lsn: 1/1423B310, prev 1/13151E28, bkp: 0000, desc: running xacts: nextXid 2030 latestCompletedXid 2029 oldestRunningXid 2030
```
这笔redo很大，十几MB    
```
db0=# select pg_xlog_location_diff('1/1423B310', '1/13151E28');
-[ RECORD 1 ]---------+---------
pg_xlog_location_diff | 17732840
```
备库apply卡住的地方，跟踪备库startup进程(用于recovery的进程)在干什么  
```
strace -p $pid  
一堆的unlink
unlink("base/400932/307422")            = 0
unlink("base/400932/307422.1")          = -1 ENOENT (No such file or directory)
unlink("base/400932/307422_fsm")        = -1 ENOENT (No such file or directory)
unlink("base/400932/307422_vm")         = -1 ENOENT (No such file or directory)
unlink("base/400932/307422_init")       = -1 ENOENT (No such file or directory)
unlink("base/400932/307420")            = 0
unlink("base/400932/307420.1")          = -1 ENOENT (No such file or directory)
unlink("base/400932/307420_fsm")        = -1 ENOENT (No such file or directory)
unlink("base/400932/307420_vm")         = -1 ENOENT (No such file or directory)
unlink("base/400932/307420_init")       = -1 ENOENT (No such file or directory)
unlink("base/400932/307418")            = 0
unlink("base/400932/307418.1")          = -1 ENOENT (No such file or directory)
unlink("base/400932/307418_fsm")        = -1 ENOENT (No such file or directory)
unlink("base/400932/307418_vm")         = -1 ENOENT (No such file or directory)
unlink("base/400932/307418_init")       = -1 ENOENT (No such file or directory)
unlink("base/400932/307416")            = 0
unlink("base/400932/307416.1")          = -1 ENOENT (No such file or directory)
unlink("base/400932/307416_fsm")        = -1 ENOENT (No such file or directory)
unlink("base/400932/307416_vm")         = -1 ENOENT (No such file or directory)
unlink("base/400932/307416_init")       = -1 ENOENT (No such file or directory)
....
还有很多
```
unlink返回ENOENT表示文件不存在，也就是说没有必要对这个文件调用unlink?   
```
man 2 unlink
       ENOENT A component in pathname does not exist or is a dangling symbolic link, or pathname is empty.
```
在主库跟踪主库执行drop schema cascade的PID, strace -p PID  
```
open("base/13269/174717", O_RDWR)       = 17
ftruncate(17, 0)                        = 0
close(17)                               = 0
unlink("base/13269/174717.1")           = -1 ENOENT (No such file or directory)
unlink("base/13269/174717_fsm")         = -1 ENOENT (No such file or directory)
unlink("base/13269/174717_vm")          = -1 ENOENT (No such file or directory)
unlink("base/13269/174717_init")        = -1 ENOENT (No such file or directory)
......
与备库有些许不同，这里执行了open, ftruncate, close，然后再执行的unlink，是否这样速度会更快？
```
查看一下template1下面有多少个文件，（200多个是系统自带的一些元表的数据文件）有50954多个文件。   
unlink这些文件至少也要耗费10几分钟。  
### perf top分析
```
LIBS=-lpthread CFLAGS="-O0 -g -ggdb -fno-omit-frame-pointer" ./configure --prefix=/home/digoal/pgsql10 --enable-cassert
LIBS=-lpthread CFLAGS="-O0 -g -ggdb -fno-omit-frame-pointer" make world -j 64
LIBS=-lpthread CFLAGS="-O0 -g -ggdb -fno-omit-frame-pointer" make install-world
perf record -ag
perf report -g -v --stdio
    24.30%         postgres  /home/digoal/pgsql10/bin/postgres                                                                 0x403db2         B [.] DropRelFileNodesAllBuffers
                   |
                   --- DropRelFileNodesAllBuffers
                       smgrdounlink
                       xact_redo_abort
                       xact_redo
                       StartupXLOG
                       StartupProcessMain
                       AuxiliaryProcessMain
                       StartChildProcess
                       PostmasterMain
                       startup_hacks
                       __libc_start_main
```
主库执行drop schema后，数据库需要花费大量的时间查找依赖对象，观察到如下function耗时很多  
```
查找依赖
                           findDependentObjects                           /home/digoal/pgsql9.6/bin/postgres
处理stats entity.
             3745.00 11.3% get_tabstat_entry                              /home/digoal/pgsql9.6/bin/postgres
```
删除对象  
```
             5862.00 17.7% DropRelFileNodesAllBuffers                     /home/digoal/pgsql9.6/bin/postgres                                
             4058.00 12.2% smgrclose                                      /home/digoal/pgsql9.6/bin/postgres 
```
备库在apply时，观察到删除对象花费了更多的时间O(n^2)  
```
standby apply
            12464.00 92.5% DropRelFileNodesAllBuffers                     /home/digoal/pgsql9.6/bin/postgres          
               56.00  0.6% DropRelFileNodeBuffers                         /home/digoal/pgsql9.6/bin/postgres                                
```
```
src/backend/storage/buffer/bufmgr.c
/* ---------------------------------------------------------------------
 *              DropRelFileNodesAllBuffers
 *
 *              This function removes from the buffer pool all the pages of all
 *              forks of the specified relations.  It's equivalent to calling
 *              DropRelFileNodeBuffers once per fork per relation with
 *              firstDelBlock = 0.
 * --------------------------------------------------------------------
 */
void
DropRelFileNodesAllBuffers(RelFileNodeBackend *rnodes, int nnodes)
{
...............
        /*
         * For low number of relations to drop just use a simple walk through, to
         * save the bsearch overhead. The threshold to use is rather a guess than
         * an exactly determined value, as it depends on many factors (CPU and RAM
         * speeds, amount of shared buffers etc.).
         */
        use_bsearch = n > DROP_RELS_BSEARCH_THRESHOLD;
        /* sort the list of rnodes if necessary */
        if (use_bsearch)
                pg_qsort(nodes, n, sizeof(RelFileNode), rnode_comparator);
        for (i = 0; i > compiled with -fno-omit-frame-pointer doesn't yield much more info:
> 
> You'd need to do perf record -ga instead of perf record -a to see
> additional information.
> 
Ah! That's right.
Here's how that looks:
Samples: 473K of event 'cpu-clock', Event count (approx.): 473738
+  68.42%          init  [kernel.kallsyms]                         [k] native_safe_halt
+  26.07%      postgres  postgres                                  [.] StandbyReleaseLocks
+   2.82%       swapper  [kernel.kallsyms]                         [k] native_safe_halt
+   0.19%           ssh  libcrypto.so.1.0.1e                       [.] md5_block_asm_data_order
+   0.19%      postgres  postgres                                  [.] RecordIsValid
+   0.16%           ssh  libcrypto.so.1.0.1e                       [.] RC4
+   0.10%      postgres  postgres                                  [.] hash_search_with_hash_value
+   0.06%      postgres  [kernel.kallsyms]                         [k] _spin_unlock_irqrestore
+   0.05%          init  [vmxnet3]                                 [k] vmxnet3_poll_rx_only
+   0.04%      postgres  [kernel.kallsyms]                         [k] copy_user_generic_unrolled
+   0.04%          init  [kernel.kallsyms]                         [k] finish_task_switch
+   0.04%          init  [kernel.kallsyms]                         [k] __do_softirq
+   0.04%           ssh  [kernel.kallsyms]                         [k] _spin_unlock_irqrestore
+   0.04%           ssh  [vmxnet3]                                 [k] vmxnet3_xmit_frame
+   0.03%      postgres  postgres                                  [.] PinBuffer
+   0.03%          init  [vmxnet3]                                 [k] vmxnet3_xmit_frame
+   0.03%           ssh  [kernel.kallsyms]                         [k] copy_user_generic_unrolled
+   0.03%      postgres  postgres                                  [.] XLogReadBufferExtended
+   0.03%           ssh  ssh                                       [.] 0x000000000002aa07
+   0.03%          init  [kernel.kallsyms]                         [k] _spin_unlock_irqrestore
+   0.03%           ssh  [vmxnet3]                                 [k] vmxnet3_poll_rx_only
+   0.02%           ssh  [kernel.kallsyms]                         [k] __do_softirq
+   0.02%      postgres  libc-2.12.so                              [.] _wordcopy_bwd_dest_aligned
+   0.02%      postgres  postgres                                  [.] mdnblocks
+   0.02%           ssh  libcrypto.so.1.0.1e                       [.] 0x00000000000e25a1
+   0.02%           scp  [kernel.kallsyms]                         [k] copy_user_generic_unrolled
+   0.02%           ssh  libc-2.12.so                              [.] memcpy
+   0.02%      postgres  libc-2.12.so                              [.] memcpy
> Ah ... that's more like a number I can believe something would have
> trouble coping with.  Did you see a noticeable slowdown with this?
> Now that we've seen that number, of course it's possible there was an
> even higher peak occurring when you saw the trouble.
> 
> Perhaps there's an O(N^2) behavior in StandbyReleaseLocks, or maybe
> it just takes awhile to handle that many locks.
I don't think there's a O(n^2) in StandbyReleaseLocks() itself, but in
combination with StandbyReleaseLockTree() it looks possibly bad. The
latter will call StandbyReleaseLocks() for every xid/subxid, and each of
the StandbyReleaseLocks() will then trawl the entire RecoveryLockList...
It'd probably be better to implement ReleaseLocksTree() by sorting the
subxid list and bsearch that while iterating RecoveryLockList.
Greetings,
Andres Freund
```
https://www.postgresql.org/message-id/flat/1b0753d6.1bcc.157da888833.Coremail.digoal%40126.com#PI:EMAIL  
### 小结
1\. drop schema 产生了多少redo    
本例的测试用例，约17MB的REDO。    
2\. 为什么drop schema会导致standby apply的延迟严重    
大量的文件操作，导致了apply的延迟。    
使用drop table也一样，问题依旧  
```
for ((i=1;i<=4000;i++)) ; do psql template1 -c "drop table test$i" & done
```
## 测试基于database的DaaS
### 记录当前XLOG位点
```
postgres=# select pg_current_xlog_location();
 pg_current_xlog_location 
--------------------------
 1/168EE5F8
(1 row)