v_resp := UTL_HTTP.GET_RESPONSE(v_req);
UTL_HTTP.GET_HEADER_BY_NAME(v_resp, v_name, v_value);
DBMS_OUTPUT.PUT_LINE(v_name || ': ' || v_value);
UTL_HTTP.END_RESPONSE(v_resp);
END;
Content-Type: text/html; charset=utf-8
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 295
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.21.11 GET_HEADER_COUNT
The GET_HEADER_COUNT function returns the number of HTTP response headers. The
signature is:
GET_HEADER_COUNT(r IN OUT UTL_HTTP.RESP) RETURN INTEGER
This function returns an INTEGER value.
Parameters
r
r is the HTTP response record.
3.21.12 GET_RESPONSE
The GET_RESPONSE function sends the network request and returns any HTTP response.
The signature is:
GET_RESPONSE(r IN OUT UTL_HTTP.REQ) RETURN UTL_HTTP.RESP
This function returns a UTL_HTTP.RESP record.
Parameters
r
r is the HTTP request record.
3.21.13 GET_RESPONSE_ERROR_CHECK
The GET_RESPONSE_ERROR_CHECK procedure returns whether or not response error
check is set. The signature is:
GET_RESPONSE_ERROR_CHECK(enable OUT BOOLEAN)
Parameters
enable
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 296
Database Compatibility for Oracle® Developers
Built-in Package Guide
enable returns TRUE if response error check is set, otherwise it returns FALSE.
3.21.14 GET_TRANSFER_TIMEOUT
The GET_TRANSFER_TIMEOUT procedure returns the current, default transfer timeout
setting for HTTP requests. The signature is:
GET_TRANSFER_TIMEOUT(timeout OUT INTEGER)
Parameters
timeout
timeout is the transfer timeout setting in seconds.
3.21.15 READ_LINE
The READ_LINE procedure returns the data from the HTTP response body in text form
until the end of line is reached. A CR character, a LF character, a CR LF sequence, or the
end of the response body constitutes the end of line. The signature is:
READ_LINE(r IN OUT UTL_HTTP.RESP, data OUT VARCHAR2,
remove_crlf BOOLEAN DEFAULT FALSE)
Parameters
r
r is the HTTP response record.
data
data is the response body in text form.
remove_crlf
Set remove_crlf to TRUE to remove new line characters, otherwise set to
FALSE. The default is FALSE.
Examples
The following example retrieves and displays the body of the specified website.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 297
Database Compatibility for Oracle® Developers
Built-in Package Guide
DECLARE
v_req UTL_HTTP.REQ;
v_resp UTL_HTTP.RESP;
v_value VARCHAR2(1024);
BEGIN
v_req := UTL_HTTP.BEGIN_REQUEST('http://www.enterprisedb.com');
v_resp := UTL_HTTP.GET_RESPONSE(v_req);
LOOP
UTL_HTTP.READ_LINE(v_resp, v_value, TRUE);
DBMS_OUTPUT.PUT_LINE(v_value);
END LOOP;
EXCEPTION
WHEN OTHERS THEN
UTL_HTTP.END_RESPONSE(v_resp);
END;
The following is the output.
EnterpriseDB | The Postgres Database Company
<html xmlns="http://www.w3.org/1999/
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 300
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.21.18 REQUEST
The REQUEST function returns the first 2000 bytes retrieved from a user-specified URL.
The signature is:
REQUEST(url IN VARCHAR2) RETURN VARCHAR2
If the data found at the given URL is longer than 2000 bytes, the remainder will be
discarded. If the data found at the given URL is shorter than 2000 bytes, the result will
be shorter than 2000 bytes.
Parameters
url
url is the Uniform Resource Locator from which UTL_HTTP will return content.
Example
The following command returns the first 2000 bytes retrieved from the EnterpriseDB
website:
SELECT UTL_HTTP.REQUEST('http://www.enterprisedb.com/') FROM DUAL;
3.21.19 REQUEST_PIECES
The REQUEST_PIECES function returns a table of 2000-byte segments retrieved from an
URL. The signature is:
REQUEST_PIECES(url IN VARCHAR2, max_pieces NUMBER IN
DEFAULT 32767) RETURN UTL_HTTP.HTML_PIECES
Parameters
url
url is the Uniform Resource Locator from which UTL_HTTP will return content.
max_pieces
max_pieces specifies the maximum number of 2000-byte segments that the
REQUEST_PIECES function will return. If max_pieces specifies more units
than are available at the specified url, the final unit will contain fewer bytes.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 301
Database Compatibility for Oracle® Developers
Built-in Package Guide
Example
The following example returns the first four 2000 byte segments retrieved from the
EnterpriseDB website:
DECLARE
result UTL_HTTP.HTML_PIECES;
BEGIN
result := UTL_HTTP.REQUEST_PIECES('http://www.enterprisedb.com/', 4);
END;
3.21.20 SET_BODY_CHARSET
The SET_BODY_CHARSET procedure sets the default character set of the body of future
HTTP requests. The signature is:
SET_BODY_CHARSET(charset VARCHAR2 DEFAULT NULL)
Parameters
charset
charset is the character set of the body of future requests. The default is null in
which case the database character set is assumed.
3.21.21 SET_FOLLOW_REDIRECT
The SET_FOLLOW_REDIRECT procedure sets the maximum number of times the HTTP
redirect instruction is to be followed in the response to this request or future requests.
This procedures has two signatures:
SET_FOLLOW_REDIRECT(max_redirects IN INTEGER DEFAULT 3)
and
SET_FOLLOW_REDIRECT(r IN OUT UTL_HTTP.REQ, max_redirects IN
INTEGER DEFAULT 3)
Use the second form to change the maximum number of redirections for an individual
request that a request inherits from the session default settings.
Parameters
r
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 302
Database Compatibility for Oracle® Developers
Built-in Package Guide
r is the HTTP request record.
max_redirects
max_redirects is maximum number of redirections allowed. Set to 0 to disable
redirections. The default is 3.
3.21.22 SET_HEADER
The SET_HEADER procedure sets the HTTP request header. The signature is:
SET_HEADER(r IN OUT UTL_HTTP.REQ, name IN VARCHAR2, value
IN VARCHAR2 DEFAULT NULL)
Parameters
r
r is the HTTP request record.
name
name is the name of the request header.
value
value is the value of the request header. The default is null.
3.21.23 SET_RESPONSE_ERROR_CHECK
The SET_RESPONSE_ERROR_CHECK procedure determines whether or not HTTP 4xx
and 5xx status codes returned by the GET_RESPONSE function should be interpreted as
errors. The signature is:
SET_RESPONSE_ERROR_CHECK(enable IN BOOLEAN DEFAULT FALSE)
Parameters
enable
Set enable to TRUE if HTTP 4xx and 5xx status codes are to be treated as errors,
otherwise set to FALSE. The default is FALSE.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 303
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.21.24 SET_TRANSFER_TIMEOUT
The SET_TRANSFER_TIMEOUT procedure sets the default, transfer timeout setting for
waiting for a response from an HTTP request. This procedure has two signatures:
SET_TRANSFER_TIMEOUT(timeout IN INTEGER DEFAULT 60)
and
SET_TRANSFER_TIMEOUT(r IN OUT UTL_HTTP.REQ, timeout IN
INTEGER DEFAULT 60)
Use the second form to change the transfer timeout setting for an individual request that a
request inherits from the session default settings.
Parameters
r
r is the HTTP request record.
timeout
timeout is the transfer timeout setting in seconds for HTTP requests. The default
is 60 seconds.
3.21.25 WRITE_LINE
The WRITE_LINE procedure writes data to the HTTP request body in text form; the text
is terminated with a CRLF character pair. The signature is:
WRITE_LINE(r IN OUT UTL_HTTP.REQ, data IN VARCHAR2)
Parameters
r
r is the HTTP request record.
data
data is the request body in TEXT form.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 304
Database Compatibility for Oracle® Developers
Built-in Package Guide
Example
The following example writes data (Account balance $500.00) in text form to the
request body to be sent using the HTTP POST method. The data is sent to a hypothetical
web application (post.php) that accepts and processes data.
DECLARE
v_req UTL_HTTP.REQ;
v_resp UTL_HTTP.RESP;
BEGIN
v_req := UTL_HTTP.BEGIN_REQUEST('http://www.example.com/post.php',
'POST');
UTL_HTTP.SET_HEADER(v_req, 'Content-Length', '23');
UTL_HTTP.WRITE_LINE(v_req, 'Account balance $500.00');
v_resp := UTL_HTTP.GET_RESPONSE(v_req);
DBMS_OUTPUT.PUT_LINE('Status Code: ' || v_resp.status_code);
DBMS_OUTPUT.PUT_LINE('Reason Phrase: ' || v_resp.reason_phrase);
UTL_HTTP.END_RESPONSE(v_resp);
END;
Assuming the web application successfully processed the POST method, the following
output would be displayed:
Status Code: 200
Reason Phrase: OK
3.21.26 WRITE_RAW
The WRITE_RAW procedure writes data to the HTTP request body in binary form. The
signature is:
WRITE_RAW(r IN OUT UTL_HTTP.REQ, data IN RAW)
Parameters
r
r is the HTTP request record.
data
data is the request body in binary form.
Example
The following example writes data in binary form to the request body to be sent using the
HTTP POST method to a hypothetical web application that accepts and processes such
data.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 305
Database Compatibility for Oracle® Developers
Built-in Package Guide
DECLARE
v_req UTL_HTTP.REQ;
v_resp UTL_HTTP.RESP;
BEGIN
v_req := UTL_HTTP.BEGIN_REQUEST('http://www.example.com/post.php',
'POST');
UTL_HTTP.SET_HEADER(v_req, 'Content-Length', '23');
UTL_HTTP.WRITE_RAW(v_req, HEXTORAW
('54657374696e6720504f5354206d6574686f6420696e20485454502072657175657374'));
v_resp := UTL_HTTP.GET_RESPONSE(v_req);
DBMS_OUTPUT.PUT_LINE('Status Code: ' || v_resp.status_code);
DBMS_OUTPUT.PUT_LINE('Reason Phrase: ' || v_resp.reason_phrase);
UTL_HTTP.END_RESPONSE(v_resp);
END;
The text string shown in the HEXTORAW function is the hexadecimal translation of the text
Testing POST method in HTTP request.
Assuming the web application successfully processed the POST method, the following
output would be displayed:
Status Code: 200
Reason Phrase: OK
3.21.27 WRITE_TEXT
The WRITE_TEXT procedure writes data to the HTTP request body in text form. The
signature is:
WRITE_TEXT(r IN OUT UTL_HTTP.REQ, data IN VARCHAR2)
Parameters
r
r is the HTTP request record.
data
data is the request body in text form.
Example
The following example writes data (Account balance $500.00) in text form to the
request body to be sent using the HTTP POST method. The data is sent to a hypothetical
web application (post.php) that accepts and processes data.
DECLARE
v_req UTL_HTTP.REQ;
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 306
Database Compatibility for Oracle® Developers
Built-in Package Guide
v_resp UTL_HTTP.RESP;
BEGIN
v_req := UTL_HTTP.BEGIN_REQUEST('http://www.example.com/post.php',
'POST');
UTL_HTTP.SET_HEADER(v_req, 'Content-Length', '23');
UTL_HTTP.WRITE_TEXT(v_req, 'Account balance $500.00');
v_resp := UTL_HTTP.GET_RESPONSE(v_req);
DBMS_OUTPUT.PUT_LINE('Status Code: ' || v_resp.status_code);
DBMS_OUTPUT.PUT_LINE('Reason Phrase: ' || v_resp.reason_phrase);
UTL_HTTP.END_RESPONSE(v_resp);
END;
Assuming the web application successfully processed the POST method, the following
output would be displayed:
Status Code: 200
Reason Phrase: OK
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 307
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.22 UTL_MAIL
The UTL_MAIL package provides the capability to manage e-mail. Advanced Server
supports the following procedures:
Function/Procedure Return Description
Type
SEND(sender, recipients, cc, bcc, n/a Packages and sends an e-mail to an SMTP server.
subject, message [, mime_type [,
priority ]])
SEND_ATTACH_RAW(sender, n/a Same as the SEND procedure, but with BYTEA or
recipients, cc, bcc, subject,
large object attachments.
message, mime_type, priority,
attachment [, att_inline [,
att_mime_type [, att_filename