### UTL_HTTP Package Guide

#### 3.21.11 GET_HEADER_COUNT
The `GET_HEADER_COUNT` function returns the number of HTTP response headers. The signature is:
```plsql
FUNCTION GET_HEADER_COUNT(r IN OUT UTL_HTTP.RESP) RETURN INTEGER;
```
- **Return Type**: `INTEGER`
- **Parameters**:
  - `r`: The HTTP response record.

#### 3.21.12 GET_RESPONSE
The `GET_RESPONSE` function sends the network request and returns the HTTP response. The signature is:
```plsql
FUNCTION GET_RESPONSE(r IN OUT UTL_HTTP.REQ) RETURN UTL_HTTP.RESP;
```
- **Return Type**: `UTL_HTTP.RESP`
- **Parameters**:
  - `r`: The HTTP request record.

#### 3.21.13 GET_RESPONSE_ERROR_CHECK
The `GET_RESPONSE_ERROR_CHECK` procedure checks whether the response error check is enabled. The signature is:
```plsql
PROCEDURE GET_RESPONSE_ERROR_CHECK(enable OUT BOOLEAN);
```
- **Parameters**:
  - `enable`: Returns `TRUE` if the response error check is enabled, otherwise `FALSE`.

#### 3.21.14 GET_TRANSFER_TIMEOUT
The `GET_TRANSFER_TIMEOUT` procedure retrieves the current transfer timeout setting for HTTP requests. The signature is:
```plsql
PROCEDURE GET_TRANSFER_TIMEOUT(timeout OUT INTEGER);
```
- **Parameters**:
  - `timeout`: The transfer timeout setting in seconds.

#### 3.21.15 READ_LINE
The `READ_LINE` procedure reads data from the HTTP response body until the end of the line. A CR, LF, CR LF sequence, or the end of the response body constitutes the end of the line. The signature is:
```plsql
PROCEDURE READ_LINE(r IN OUT UTL_HTTP.RESP, data OUT VARCHAR2, remove_crlf BOOLEAN DEFAULT FALSE);
```
- **Parameters**:
  - `r`: The HTTP response record.
  - `data`: The response body in text form.
  - `remove_crlf`: Set to `TRUE` to remove new line characters, otherwise `FALSE`. The default is `FALSE`.

**Example**:
```plsql
DECLARE
    v_req UTL_HTTP.REQ;
    v_resp UTL_HTTP.RESP;
    v_value VARCHAR2(1024);
BEGIN
    v_req := UTL_HTTP.BEGIN_REQUEST('http://www.enterprisedb.com');
    v_resp := UTL_HTTP.GET_RESPONSE(v_req);
    LOOP
        UTL_HTTP.READ_LINE(v_resp, v_value, TRUE);
        DBMS_OUTPUT.PUT_LINE(v_value);
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        UTL_HTTP.END_RESPONSE(v_resp);
END;
```

#### 3.21.18 REQUEST
The `REQUEST` function retrieves the first 2000 bytes from a specified URL. The signature is:
```plsql
FUNCTION REQUEST(url IN VARCHAR2) RETURN VARCHAR2;
```
- **Return Type**: `VARCHAR2`
- **Parameters**:
  - `url`: The Uniform Resource Locator (URL) from which content will be retrieved.

**Example**:
```sql
SELECT UTL_HTTP.REQUEST('http://www.enterprisedb.com/') FROM DUAL;
```

#### 3.21.19 REQUEST_PIECES
The `REQUEST_PIECES` function returns a table of 2000-byte segments from a specified URL. The signature is:
```plsql
FUNCTION REQUEST_PIECES(url IN VARCHAR2, max_pieces NUMBER DEFAULT 32767) RETURN UTL_HTTP.HTML_PIECES;
```
- **Return Type**: `UTL_HTTP.HTML_PIECES`
- **Parameters**:
  - `url`: The Uniform Resource Locator (URL) from which content will be retrieved.
  - `max_pieces`: The maximum number of 2000-byte segments to return. The default is 32767.

**Example**:
```plsql
DECLARE
    result UTL_HTTP.HTML_PIECES;
BEGIN
    result := UTL_HTTP.REQUEST_PIECES('http://www.enterprisedb.com/', 4);
END;
```

#### 3.21.20 SET_BODY_CHARSET
The `SET_BODY_CHARSET` procedure sets the default character set for the body of future HTTP requests. The signature is:
```plsql
PROCEDURE SET_BODY_CHARSET(charset VARCHAR2 DEFAULT NULL);
```
- **Parameters**:
  - `charset`: The character set for the body of future requests. The default is `NULL`, in which case the database character set is used.

#### 3.21.21 SET_FOLLOW_REDIRECT
The `SET_FOLLOW_REDIRECT` procedure sets the maximum number of HTTP redirects to follow. The signatures are:
```plsql
PROCEDURE SET_FOLLOW_REDIRECT(max_redirects IN INTEGER DEFAULT 3);
PROCEDURE SET_FOLLOW_REDIRECT(r IN OUT UTL_HTTP.REQ, max_redirects IN INTEGER DEFAULT 3);
```
- **Parameters**:
  - `r`: The HTTP request record.
  - `max_redirects`: The maximum number of redirects allowed. Set to `0` to disable redirects. The default is `3`.

#### 3.21.22 SET_HEADER
The `SET_HEADER` procedure sets an HTTP request header. The signature is:
```plsql
PROCEDURE SET_HEADER(r IN OUT UTL_HTTP.REQ, name IN VARCHAR2, value IN VARCHAR2 DEFAULT NULL);
```
- **Parameters**:
  - `r`: The HTTP request record.
  - `name`: The name of the request header.
  - `value`: The value of the request header. The default is `NULL`.

#### 3.21.23 SET_RESPONSE_ERROR_CHECK
The `SET_RESPONSE_ERROR_CHECK` procedure determines whether HTTP 4xx and 5xx status codes should be treated as errors. The signature is:
```plsql
PROCEDURE SET_RESPONSE_ERROR_CHECK(enable IN BOOLEAN DEFAULT FALSE);
```
- **Parameters**:
  - `enable`: Set to `TRUE` to treat HTTP 4xx and 5xx status codes as errors, otherwise `FALSE`. The default is `FALSE`.

#### 3.21.24 SET_TRANSFER_TIMEOUT
The `SET_TRANSFER_TIMEOUT` procedure sets the default transfer timeout for HTTP requests. The signatures are:
```plsql
PROCEDURE SET_TRANSFER_TIMEOUT(timeout IN INTEGER DEFAULT 60);
PROCEDURE SET_TRANSFER_TIMEOUT(r IN OUT UTL_HTTP.REQ, timeout IN INTEGER DEFAULT 60);
```
- **Parameters**:
  - `r`: The HTTP request record.
  - `timeout`: The transfer timeout setting in seconds. The default is `60` seconds.

#### 3.21.25 WRITE_LINE
The `WRITE_LINE` procedure writes data to the HTTP request body in text form, terminated with a CRLF character pair. The signature is:
```plsql
PROCEDURE WRITE_LINE(r IN OUT UTL_HTTP.REQ, data IN VARCHAR2);
```
- **Parameters**:
  - `r`: The HTTP request record.
  - `data`: The request body in text form.

**Example**:
```plsql
DECLARE
    v_req UTL_HTTP.REQ;
    v_resp UTL_HTTP.RESP;
BEGIN
    v_req := UTL_HTTP.BEGIN_REQUEST('http://www.example.com/post.php', 'POST');
    UTL_HTTP.SET_HEADER(v_req, 'Content-Length', '23');
    UTL_HTTP.WRITE_LINE(v_req, 'Account balance $500.00');
    v_resp := UTL_HTTP.GET_RESPONSE(v_req);
    DBMS_OUTPUT.PUT_LINE('Status Code: ' || v_resp.status_code);
    DBMS_OUTPUT.PUT_LINE('Reason Phrase: ' || v_resp.reason_phrase);
    UTL_HTTP.END_RESPONSE(v_resp);
END;
```

#### 3.21.26 WRITE_RAW
The `WRITE_RAW` procedure writes data to the HTTP request body in binary form. The signature is:
```plsql
PROCEDURE WRITE_RAW(r IN OUT UTL_HTTP.REQ, data IN RAW);
```
- **Parameters**:
  - `r`: The HTTP request record.
  - `data`: The request body in binary form.

**Example**:
```plsql
DECLARE
    v_req UTL_HTTP.REQ;
    v_resp UTL_HTTP.RESP;
BEGIN
    v_req := UTL_HTTP.BEGIN_REQUEST('http://www.example.com/post.php', 'POST');
    UTL_HTTP.SET_HEADER(v_req, 'Content-Length', '23');
    UTL_HTTP.WRITE_RAW(v_req, HEXTORAW('54657374696e6720504f5354206d6574686f6420696e20485454502072657175657374'));
    v_resp := UTL_HTTP.GET_RESPONSE(v_req);
    DBMS_OUTPUT.PUT_LINE('Status Code: ' || v_resp.status_code);
    DBMS_OUTPUT.PUT_LINE('Reason Phrase: ' || v_resp.reason_phrase);
    UTL_HTTP.END_RESPONSE(v_resp);
END;
```

#### 3.21.27 WRITE_TEXT
The `WRITE_TEXT` procedure writes data to the HTTP request body in text form. The signature is:
```plsql
PROCEDURE WRITE_TEXT(r IN OUT UTL_HTTP.REQ, data IN VARCHAR2);
```
- **Parameters**:
  - `r`: The HTTP request record.
  - `data`: The request body in text form.

**Example**:
```plsql
DECLARE
    v_req UTL_HTTP.REQ;
    v_resp UTL_HTTP.RESP;
BEGIN
    v_req := UTL_HTTP.BEGIN_REQUEST('http://www.example.com/post.php', 'POST');
    UTL_HTTP.SET_HEADER(v_req, 'Content-Length', '23');
    UTL_HTTP.WRITE_TEXT(v_req, 'Account balance $500.00');
    v_resp := UTL_HTTP.GET_RESPONSE(v_req);
    DBMS_OUTPUT.PUT_LINE('Status Code: ' || v_resp.status_code);
    DBMS_OUTPUT.PUT_LINE('Reason Phrase: ' || v_resp.reason_phrase);
    UTL_HTTP.END_RESPONSE(v_resp);
END;
```

---

### UTL_MAIL Package

The `UTL_MAIL` package provides the capability to manage email. Advanced Server supports the following procedures:

- **SEND**
  - **Description**: Packages and sends an email to an SMTP server.
  - **Signature**:
    ```plsql
    PROCEDURE SEND(sender IN VARCHAR2, recipients IN VARCHAR2, cc IN VARCHAR2, bcc IN VARCHAR2, subject IN VARCHAR2, message IN VARCHAR2, mime_type IN VARCHAR2 DEFAULT 'text/plain', priority IN PLS_INTEGER DEFAULT 3);
    ```

- **SEND_ATTACH_RAW**
  - **Description**: Same as the `SEND` procedure, but with BYTEA or large object attachments.
  - **Signature**:
    ```plsql
    PROCEDURE SEND_ATTACH_RAW(sender IN VARCHAR2, recipients IN VARCHAR2, cc IN VARCHAR2, bcc IN VARCHAR2, subject IN VARCHAR2, message IN VARCHAR2, mime_type IN VARCHAR2 DEFAULT 'text/plain', priority IN PLS_INTEGER DEFAULT 3, attachment IN BLOB, att_inline IN BOOLEAN DEFAULT FALSE, att_mime_type IN VARCHAR2 DEFAULT 'application/octet-stream', att_filename IN VARCHAR2 DEFAULT 'attachment.bin');
    ```

These procedures allow you to send emails with or without attachments, and provide options to customize the MIME type, priority, and other attributes.