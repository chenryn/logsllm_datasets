2i
1. 3  2 to finish the game, because that would be an
Or, we can move 3 -> 7， 4 -> 8, 5 -> 9 to finish the game.
Output: [2,3]
Input: [6,5,4,3,10]
we can move 4 -> 8 for one move to finish the game.
Explanation:
Output: [1,2]
Input: [7,4,9]
：1= n 的边界点，肯定再
stones[right]-stones [left]= n {
left++
if right == n-1 && stones[right]-stones[left]  0 && stack[len(stack)-1] != s {
stack = append(stack, s) 
stack = stack[:len(stack)-1]
 The result of this move is 
---
## Page 999
解题思路
如果×!=y，那么重量为×的石头将会完全粉碎，而重量为y的石头新重量为 y-x。
如果×==y，那么两块石头都会被完全粉碎；
假设石头的重量分别为×和y，且×= stones[i]; j-- { 
if stones[O]  maxCustomer1 {
customerl += customers[right]
for right-left+l > X { 
 maxcustomerl = customerl
if grumpy[left] == 1 { 
left++
 customerl -= customers[left]
在
---
## Page 1004
 Example 1: 
 and it is guaranteed an answer exists.
Rearrange the barcodes so that no two adjacent barcodes are equal. You may return any answer,
In a warehouse, there is a row of barcodes, where the i-th barcode is barcodes [i]]
题目
1054. Distant Barcodes
func sumsatisfied(customers []int, grumpy []int, start, end int) int {
func maxsatisfiedl(customers []int, grumpy []int, X int) int {
/／解法二滑动窗口暴力版 
return sum
for i := O;i end { 
if right+l < len(customers) && right-left < X-1 {
}else {
} else{
if grumpy[i] == O {
 right++
sum += customers[i]
left++
if right-left+l == X { 
res = max(res, sumsatisfied(customers, grumpy, left, right))
-1.
o
---
## Page 1005
代码
解题思路
个相邻的条形码不能相等。你可以返回任何满足该要求的答案，此题保证存在答案。
题目大意
Note:
 Example 2: 
在
·这一题和第 767题原理是完全一样的。第 767题是Go0gle 的面试题。
一个仓库里，有一排条形码，
2. 1 <= barcodes[i] <= 10000
1. 1 <= barcodes.length <= 10000
Output: [1,3,1,3,2,1,2,1]
import "sort"
package leetcode
Input: [1,1,1,1,2,2,3,3]
Output: [2,1,2,1,2,1]
func rearrangeBarcodes(barcodes []int) []int {
Input: [1,1,1,2,2,2]
if len(bfs) == 0 { 
 bfs := barcodesFrequencysort(barcodes) 
return res
for i := 0; i <= (len(bfs)-1)/2; i++ 
res := []int{}
后，分别从第0号位和中间的位置开始往后取数，取完以后即为最终解。
解题思路比较简单，先按照每个数字的频次从高到低进行排序，注意会有频次相同的数字。排序以