先看看我在写作本文时使用的文本编辑器。50年前，一边编辑和调
整文本的形式，一边能够完成初稿，这种想法是作家梦以求的
[L5]，现在这种情况已经非常普遍了，在发达国家，很难想象学校
里的孩子们还有什么其他书写方式了。甚至和类似于普及识字这种
真正带来变革的工具相比，计算机文本编辑工具也并始变成是一个
小改进了。
想让一个既不会读、也不会写的团队保持合作，能做得到吗？
但是，如果某个人提出并主张下列的内容，看看你们的团队会是什
么样的反应：
246
---
## Page 248
我知道一个让你们生产率提高很多倍的方法。按照我说的做，你们
小组的协作能力会增加到超出你最乐观的预测。计划如下：首先，
每个人都要学习这套符号集，叫做字母表。每个符号都称为一个字
母，字母多多少少地映射到某种语言中的发音中，这种语言对于某
些人是母语，对于另外一些人不是母语。你在学习了字母的基本发
音后，我将告诉你如果把它们组成一组，形成书面单词。在你记住
5000～10000个单词之后，你将能够表达任意的句子，你的生产率
也将得到极大的提升。
识字是一个典型的高投入、高回报的工具的例子。每个人都花费大
量的时间训练，但是等他们过了那个阶段之后，随后的多年都会持
续得到回报。
通常，让人感到最激动的是低投入、高产成的工具。但是如果只考
虑这类工具就错了：毕竞，识字到了最后是得到回报的。在需要的
时候一个专门的团队可以进行重大的工具投资，特别是当某些人一
起承担工作时，能够通过一起学习新工具来强化他的集体感。一个
能够克服障碍、做出新东西来的工具将会使投资成为非常值得的。
对于在一个技术项目上一起工作的人们，没有几件事情像他们使用
的工具那样对日常经验有着直接的影响。你对他们的经验了解得越
多，能够选择的工具就越好。
[1]"开源软件”（open source software）和以前使用的术语“自由软
件”（free software）是同义词。限于篇幅，这里不解释为什么同一
个事物会有两个术语。如果想了解这方面更多的信息，请参见
http://producingoss.com/en/introduction.html#free-vs-open-source。
[2].你可能会感到奇怪，开源的意思是任何人都有权利修改代码，
那为什么还要有一个“核心小组"呢？是不是谁都可以成为维护人员
呢？不完全是。在开源中，任何人都可以自由复制代码并在代码副
本上做他想做的任何事情。但是如果一组人走到一起并同意集体维
护某个特定版本时，他们显然可以控制谁可以进入这个小组，谁不
能进入。类似地，《圣经》是在公共领域的，谁都可以去翻译，但
是没有人能够强制一组译者一起工作，如果两个小组的人不在一起
工作，结果就会产生两个独立的翻译版本。在并源软件中，这种情
况称为分岔（fork），就是我们平时所说的“道路岔口"中的分岔的
意思：两个独立副本中，修改的分歧越来越多，随着时间的推移，
差别越来越大。但实际上，分岔的情况很少出现：更常见的情况
247
---
## Page 249
是，为了集中投入力量，程序员们会围绕着一个特定版本一起工
作。
[3].Subversion是一个开源的版本控制系统，参见
http://subversion.tigris.org/
[4]补丁是代码贡献，例如修复缺陷，以一种被称为"补丁形式"的特
殊形式发送。这种形式的细节对这里讲述的内容并不重要，只要把
补丁看做是对软件做的修改建议就可以了，它以一种极为详细的形
式提交一—说明修改了代码的哪一行，是如何修改的。
[5]提交的意思是直接把代码变更发送到项目的存储库中，存储库
是项目代码所在的核心副本（更多的信息，请参见
http://en.wikipedia.org/wiki/Revision_Control）。一般来说，只有核
心维护人员才能将变更引入到存储库中。有关“提交访问”的概念的
更多内容，请参见
http://producingoss.com/en/committers.html#ftn.id304827。
[6]有关这种实践的更多信息，请参见
http://producingoss.com/en/vc.html#commit-emails和
http://producingoss.com/en/setting-tone.html#code-review。
[Z].GNUEmacs是一个很多程序员都喜欢使用的文本编辑工具，也是
一个最老的、还在持续维护自由软件程序。更多信息请参见
[8]_CVS(http:/www.nongnu.org/cvs/）。
[回1有些人使用单词变更集来表达我在这里所说的内容：也许是多
个文件被修改了，但是修改的都是一个逻辑组的一部分。我们可以
把这个整体的组叫做“变更"或“变更集”，在这里，两个单词的含义
是一样的。
[L0]可以理解为：“采取了一种极为不科学的观察方式。”
[ll]如果你对照主要来源来检查这些数字时，注意在数Emacs的提
交时，不应当把只影响ChangeLog文件的提交计算在内，因为（由
于Emacs项目使用它的版本控制系统的方式有点奇怪）它们与其他
提交内容是重复的。
248
---
## Page 250
[12]Producing Open Source Software(O'Reilly;
http://producingoss.com/)
[13]这段文字引用的是本文作者所说的《ProducingOpenSource
Software》一书中文版中的翻译。
141实际上，在我编写本章的时候，他们已经完成了译文的第一
桐。
[15]但是否能够产生更好的文字，这还是一个问题。
第22章研究团队
MichaelCollins访谈录
我们对MichaelCollins的工作领域产生兴趣是因为两个原因。第一
个原因，Michael职业生涯的很大一部分时间都在与具有学术背景的
团队一起从事研究工作。而第二个原因，那些研究工作的目的是为
政府内外部的重要客户解决具体、实际的安全方面的问题，他的工
作横跨了学术和商业两个领域。我们想听听他是怎么看待这个问题
的。
Andrew：你参加过一个检测网络入侵的研究项目。
Michael：我们大多数时候想要实现的是模型常态。而我所做的大部
分工作属于异常检测的领域，异常检测文属于入侵检测领域的一部
分。大多数异常检测都是尝试构建一个正常行为的模型，这样如果
你突然发现自已落到了正常行为区域之外，就会感到好奇，想知道
为什么会发生这种情况。
举个信用卡的例子，你有自已正常的消费习惯。但是如果突然间你
跑到加德满都去消费了，信用卡公司就会打电话问你：“你现在在
加德满都吗？"这就是异常检测，是信用卡的异常检测。在网络流
量上做的也是同样的事情。
Andrew：这么说，你们的目标是查看路由器数据，通过查看路由器
日志中的海量数据，可以检测出那些成功或不成功的入侵？
Michael：这是我们一直追求但又很难实现的目标。但是首选方法为
正在进行的事情建模。但在建模的时候，对于要处理的问题又不是
249
---
## Page 251
很清楚。这是研究工作中最重要的一个特征：你不是很清楚自已需
要做些什么。常常地，在整个过程中需要不断地构建和重新构建工
具。
比如说客户现在每隔大约5个小时可以执行一次查询。他们每天执
行查询的方式就是这样的。他们会发布图形，说“今天发现的就是
这些”。我们在一台双处理器的奔腾机上（2001年）把查询时间从
五六个小时缩短为大约10分钟。我们把初始报告拿给他们，客户不
数据并将查询过程规范化。客户的回答是：“我们需要这套东西。”
Andrew：突然间你就得到一个软件项目。
Michael：是的。
Andrew：你需要一个团队来构建这个软件。
Michael：是的。我们小组最初是4个人。其中两个人做编码，但这
两个人都不会被认为是“程序员”。特别是，有一次我说自已是程序
员，我的老板Suresh冲着我大声叫哦了5分钟：“你可以干木工的
活，但你不是未匠。你是一名研究人员。你写代码是为了回答问
题，你不是并发人员。”
让我在这里表明儿个看法。我们实际上已经准备好对付艰苦的工作
环境了，我之所以说是“艰苦”，是因为我想不到有什么更好的表达
方式。比如说我们的文件类型头文件，已经有一个内置的版本系统
了。我们一直在准备看向前和向后的兼容。
我们在工程环境方面已经有了足够的经验，知道在原型和产品之间
的差别有时候就是简单地更改一下上面的标签，因此知道构建原型
是一种奢侈的东西。所以，我们没有想到会得到那样的反应，但是
我们从一开始就将系统并发看作是一个严肃的问题。
Andrew：在做研究项目并与做研究项目的人交谈时，我看到的一件
事情和你的老板Suresh说的一样，研究人员不是程序员。对于某个
开始做博士研究或在大学环境中开始做研究项目的人，他们应当如
何把你获得的经验用到他们自己的项目中？你做的那些工作和幼稚
的研究团队所做的有什么不一样的地方？
250
---
## Page 252
Michael：很重要的一件事情（同时也是一件真实存在的情况，特别
是对研究生而言）是他们有一种倾向，事先不做必要的思考就匆匆
忙忙随意地弄出很多东西来。
我们所做的一件重要的事情是将工作分解为一些具体的、小的、定
义清晰的“小项目”。这样做的一个主要原因是确保小项目中的代码
健壮。如果看一下SiLKL-的架构（SiLK是我们构建的一个系统的
名称），会发现有一个有点类似核心库的东西，管理着文件读取、
IO及很多类似的东西。到自前为止我们一共写了大约40个应用程
序。
研究项目的失败率很高。所以，理想的情况是尽可能在这些小项目
上的开发上多投入一些时间，然后可以测试一下，看看它们是否有
用，看看它们是否解决了问题，如果不能解决，就抛弃掉。我们知
道需要花费时间，但是通过这种方式，我们至少不会花费大量时
间。真正有用的东西会添加到核心SiLK库中。最关键的一点是，因
为我们花了很多时间来考虑版本控制并确保核心库是健壮的，所以
我认为我们避免了很多在研发项目中常见的让人头疼的事，在那些
项目中，最后得到的是一个不断膨胀的软件。因为在做研究的时
候，你会随意添加大量的东西。你产生一个想法后就会试试那个想
法，希望那个想法有用。实际上，我们会毫不留情地砍掉无法使用
的东西并承认自己的失败。我们也花了很多时间重新构建，保持核
心系统小巧、健壮。
Andrew：听起来像是站在架构的角度来看待问题的，基本上是让它
不要超出范围，承认有些东西是无法使用的。然后在无法使用的时
候把它扔掉，把它从解决方案中去掉，这样，你就不会得到很多越
来越难维护的低劣代码了。
Michael：是的。研究与功能蔓延的差别真是非常非常细微。
随着时间的推移，我们还要做的一件事情是：比如说工具X做的是
某件事，但是后来工具Y做了X做的事情，而且做得更好。那我们
就试图要取代并废弃工具X。但是发现系统还在使用中，客户那里
的一些人还要继续使用工具X。但是对我们来说，这不再是高优先
级的并发任务了。因为人们仍旧在使用那个系统，这种情况附带的
一些重要的东西是，有很多与之相关的文档：有培训、手册、会
议。而且他们在某种程度上会变成培训课程、培训手册，定义了如
251
---
## Page 253
何使用系统。当我们取代那个工具后，我们会把它从培训的主要部
分中移除掉，放到后备部分中。
Andrew：这么说，有工具、架构，还有一个你们在构建软件时试图
优化的领域。你们改变了工作方式，为的是让软件有更好的可维护