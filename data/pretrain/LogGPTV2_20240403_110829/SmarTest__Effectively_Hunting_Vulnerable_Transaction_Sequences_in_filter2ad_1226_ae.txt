≥ 4
Total
0
1
2
3
≥ 4
#V
#G
4
0
3
1
0
0
2
0
2
0
0
0
6
0
6
0
0
0
#V
460
5
354
100
1
0
73
0
59
14
0
0
25
0
17
7
1
0
#G
594
8
442
143
1
0
74
0
60
14
0
0
32
0
23
8
1
0
SMARTEST MYTHRIL MANTICORE
#G
2110
144
890
782
287
7
219
0
180
38
1
0
80
0
45
31
4
0
683
0
28
621
32
2
#V
1982
118
862
731
264
7
203
0
171
31
1
0
77
0
44
30
3
0
654
0
28
592
32
2
2
0
1
1
0
0
1
0
1
0
0
0
3
0
3
0
0
0
N/A
N/A
transaction sequences. For example, for integer over/under-
ﬂow vulnerabilities, SMARTEST found 1,982 validated vul-
nerable transaction sequences. By contrast, MYTHRIL and
MANTICORE found 594 and 4 at most, respectively. We ob-
serve that SMARTEST is particularly more effective in ﬁnding
lengthy vulnerable transaction sequences (e.g. depth 3).
To evaluate the tools in a more security relevant aspect, we
also compared three tools in terms of ﬁnding known CVE
vulnerabilities related to integer over/underﬂows. We ran-
domly sampled 300 out of 443 contracts and manually la-
belled vulnerable locations described in each CVE report.
We found that 58 CVE reports are not valid (e.g., vulnerable
functions reported in CVE cannot be invoked in designated
main contracts, vulnerable functions reported do not exist in
source code, determined to be incorrect [36]), or have inte-
ger overﬂow vulnerability patterns appeared in other CVE
reports but the reports themselves are not directly related
to overﬂows or the other types of vulnerabilities targeted in
our experiment (e.g., CVE-2018-12078). Table 2 shows that
SMARTEST outperforms MYTHRIL and MANTICORE in this
aspect as well. SMARTEST found 93.0% (225/242) of the
known vulnerabilities in total; using our concrete validator,
we checked that SMARTEST successfully generated validated
Table 2: Evaluation on labelled 242 CVE reports out of ran-
domly sampled 300 CVE reports. #G: the number of found
CVE vulnerabilities (possibly spanning multiple lines per vul-
nerability). #V: the number of CVE vulnerabilities conﬁrmed
by the validator.
Sampled
Labelled
CVE
300
CVE
242
SMARTEST MYTHRIL MANTICORE
#G
225
#V
219
#V
85
#G
0
#G
90
#V
0
vulnerable sequences for 90.5% (219/242). On the other hand,
MYTHRIL and MANTICORE found 37.2% (90/242) and 0 of
the known vulnerabilities in total, respectively. We note that
the ﬁndings of SMARTEST in Table 2 strictly include those of
MYTHRIL and MANTICORE. We also note that MYTHRIL and
MANTICORE produced analysis failures on 3 and 274 con-
tracts, respectively.
On the leaking and suicidal contracts, SMARTEST found
more vulnerabilities compared to the ﬁve tools (Table 3). For a
fair comparison as possible, we compare the six tools in three
levels (contract, function, and lines), because we observed
MAIAN and TEETHER immediately terminate once they
found one vulnerability in each contract (i.e., they do not try
to exhaustively ﬁnd all vulnerable locations) and ILF reports
vulnerable function names without line-level information. At
contract level, SMARTEST detected 90.0% (81/90) and 96.2%
(51/53) of leaking and suicidal contracts with validated trans-
action sequences, whereas ILF (the best among the ﬁve tools)
detected 83.3% (75/90) and 94.3% (50/53). SMARTEST is
consistently more effective than the ﬁve tools in both function-
and line-levels. We observed that existing tools were less ef-
fective in ﬁnding leaking vulnerabilities, because it typically
requires longer transactions than ﬁnding suicidal vulnerabili-
ties, requiring steps for designating malicious Ether-receivers.
We also observed interesting false negative cases for ILF.
While ILF was effective in most cases, it failed to detect vul-
nerabilities when relatively tricky arguments are necessary
for passing by guard statements. For example, ILF failed to
detect the suicidal vulnerability in the following code snippet:
1
2
3
where we injected a vulnerability by removing the onlyOwner
modiﬁer (i.e., anyone can kill the contract). In the snip-
pet, the developer’s intention at line 2 was to prevent ac-
cidental invocation of this function. Two symbolic executors
SMARTEST and MAIAN found this vulnerability. We also
note that SMARTEST reported four warnings not in our ground
truths, which are false positives (virtually safe though prede-
ﬁned safety conditions can be violated, excluded in Table 3)
due to current imprecise modeling of leaking vulnerabilities.
For MAIAN, we excluded one ﬁnding from Table 3, where it
did not properly report a vulnerable function (e.g., the hash
of the reported function did not match with any functions in
the contract).
require ( code == 1234567890) ;
selfdestruct( owner ) ;} // suicidal vulnerability
function kill (uint code ) public /* onlyOwner */ {
1372    30th USENIX Security Symposium
USENIX Association
Table 3: Results on 104 contracts (90 with leaking and 53 with suicidal vulnerabilities). #G: the number of vulnerable transaction
sequences. #V: the number of validated vulnerable transaction sequences; MAIAN provides its own validated results in concrete
execution and we report them, and we deem #G = #V for ILF because ILF performs dynamic analyses. #Fail: the number of
contracts on which each tool produced some failures without any partial results. #TO: the number of contracts on which each tool
encountered timeout; we considered partial results when available (MANTICORE). n/a: relevant information is not available from
results obtained by each tool, or tools immediately terminate once one vulnerability is found in a contract.
Leaking (Total: 90 contracts)
Suicidal (Total: 53 contracts)
Tools
SMARTEST
ILF
MAIAN
TEETHER
MYTHRIL
MANTICORE
Contract
#V
#G
82
81
75
75
58
65
n/a
37
n/a
7
9
n/a
Function
#V
#G
112
111
101
101
n/a
n/a
n/a
n/a
n/a
8
9
n/a
Line
#G
115
n/a
n/a
n/a
8
9
#V
111
n/a
n/a
n/a
n/a
n/a
#Fail
#TO
0
4
7
7
0
65
0
-
0
29
0
9
Contract
#V
#G
51
51
50
50
43
43
n/a
n/a
n/a
19
3
n/a
Function
#V
#G
51
51
50
50
n/a
n/a
n/a
n/a