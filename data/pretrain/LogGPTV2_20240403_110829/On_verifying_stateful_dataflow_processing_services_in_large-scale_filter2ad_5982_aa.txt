**Title: Verifying Stateful Dataflow Processing Services in Large-Scale Cloud Systems**

**Authors: Juan Du, Xiaohui Gu, and Ting Yu**

**Affiliation: Department of Computer Science, North Carolina State University, Raleigh, North Carolina, USA**

**Contact: {gu, yu}@csc.ncsu.edu**

**Abstract:**
Cloud computing must provide integrity assurance to support security-sensitive applications such as critical dataflow processing. This paper introduces a novel RObust Service Integrity Attestation (ROSIA) framework that efficiently verifies the integrity of stateful dataflow processing services and identifies malicious service providers in large-scale cloud systems. ROSIA achieves robustness by supporting stateful dataflow services like windowed stream operators and performing integrated consistency checks to detect colluding attacks. We implemented ROSIA on the IBM System S dataflow processing system and tested it in the NCSU virtual computing lab. Our experimental results demonstrate that ROSIA is both feasible and efficient for large-scale cloud systems.

**Categories and Subject Descriptors:**
- H.4 [Information Systems Applications]: General

**General Terms:**
- Security, Management, Verification

**1. Introduction**
The rapid adoption of Software as a Service (SaaS) and Service-Oriented Architecture (SOA) has made cloud infrastructures a promising platform for service provisioning. These infrastructures allow multiple users, or tenants, to lease computing resources from the cloud to run their applications, enabling service providers to offer their software in a cost-effective manner. Our work focuses on dataflow processing services, which often require high-performance continuous processing over data streams. These services have numerous real-world applications, including security surveillance, scientific research, and business intelligence.

However, in open cloud systems, where service providers come from different security domains, we cannot assume that all service components are trustworthy. For example, service components may contain security vulnerabilities that can be exploited by attackers. Attackers can also impersonate legitimate service providers to compromise service delivery. Ensuring the result integrity of dataflow processing services is particularly challenging. Unlike confidentiality and privacy concerns, which have been addressed in previous research, result integrity must be ensured regardless of whether public or private data are processed. Although prior work has provided various integrity attestation solutions, these techniques often require trusted hardware or secure kernels, which are difficult to implement in cloud systems where service providers control their environments and run proprietary software. Therefore, our goal is to develop practical service integrity attestation techniques that do not require application modifications or assume trusted entities on the third-party service provider site.

Performing service integrity attestation for dataflow applications in cloud systems is challenging. First, dataflow applications require continuous runtime integrity attestation. Traditional Byzantine fault detection schemes rely on full-time majority voting on a set of service replicas over all input data, which is not scalable for cloud infrastructures. In our previous work, we proposed RunTest, a replay-based randomized attestation scheme that randomly selects a subset of input data to replay and performs result consistency checks to detect malicious service providers. RunTest examines each service function individually and identifies nodes that fall outside the maximum consistency clique as malicious. However, real-world dataflow applications often include stateful service functions such as windowed stream operators. Unlike stateless functions, whose output depends only on the input, the output of a stateful function depends on both the input data and the state of the service component (e.g., previously received data in sliding-window stream operators). Simply replaying the input will yield inaccurate integrity checking results. Second, multiple malicious service providers may launch strategic colluding attacks. They can always give consistent wrong results and form a majority clique in a specific service function, tricking the algorithm into labeling benign service providers as malicious. Thus, it is insufficient to examine consistency relationships in individual service functions separately.

In this paper, we present a novel RObust Service Integrity Attestation (ROSIA) framework that can efficiently verify the integrity of stateful dataflow processing services and identify malicious service providers within a large-scale cloud infrastructure. ROSIA achieves robustness in two major aspects: it supports replay-based consistency checks for stateful data processing services and can pinpoint malicious service providers even under strategic colluding attacks. Specifically, this paper makes the following contributions:
1. We provide two safe consistency check schemes for stateful services that do not require direct service state reset, which may alert malicious service providers about the integrity attestation and is impractical for implementation-specific state changes.
2. ROSIA performs comprehensive integrity attestation by examining both consistency and inconsistency relationships, achieving higher attack detection accuracy and limiting the scope of damage caused by colluding attackers.
3. We have implemented the ROSIA system on top of the IBM System S stream processing system and tested it in the NCSU virtual computing lab. Our experimental results show that ROSIA can efficiently verify the integrity of stateful dataflow applications while imposing low overhead on the cloud system.

**2. System Model and Assumptions**
We introduce the multi-tenant cloud system, illustrated in Figure 1. Each service provider \( p_i \) can lease a set of virtual machines (VMs) from the cloud system to provide one or more service components. A service component \( s_i \) is a self-contained software unit providing a certain service function \( f_i \). Users can access the services by making a request through a portal node, which composes composite services from different service components according to the user's function specification. The portal node accepts input data tuples \( d_i \) from the user, forwards them to different service components for processing, and delivers the final results to the user. A service function may be provided by different service providers.

Our work focuses on detecting service integrity attacks in dataflow processing applications where a malicious service component may produce untruthful data processing results. We assume that the total number of malicious service components is less than the number of benign ones in the entire cloud system. However, we do not assume that benign service components must be the majority for each specific service function. Attackers can sporadically collude, meaning an attacker can collude with an arbitrary subset of its colluders at any time. Attackers can also selectively cheat, misbehaving on selective input data and/or on a selective subset of service functions. These characteristics require that the detection scheme must be robust and scalable to capture unpredictable and occasional misbehavior.

**3. Design and Algorithms**
Our algorithm identifies malicious service providers based on the consistency and inconsistency relationships between service providers. It consists of three parts:
1. A runtime attestation scheme, called replay-based consistency check, to derive the consistency and inconsistency relationships between functionally equivalent service providers.
2. Consistency graph and inconsistency graph models to aggregate attestation results.
3. A pinpointing algorithm that takes the attestation graphs as input and outputs the malicious service providers.

**Replay-based Consistency Check:**
The basic idea is to feed the same input data into functionally equivalent service components and compare the output results to determine consistency or inconsistency relationships between service providers. Two service providers have a consistency relationship if they always produce consistent output results for all input data, or an inconsistency relationship if they produce inconsistent outputs for at least one input data. Result consistency is defined as either result equality or the distance between the results according to some distance function falling within a threshold. Note that we perform integrity attestation by replaying a subset of the original input data at a later time, so malicious attackers cannot avoid the risk of being detected when they produce false results on the original data.

For stateless functions, given the same input data, two benign service providers should always produce consistent results.