[lindexSargv]来接收的，
例如I set file [lindex Sargv 0]
除了基本的位置参数外，Expect也支持其他的特殊参数，例如：Sargc表示传参的
个数，Sargv0表示脚本的名字。
范例18-8：针对Expect脚本传参的个数及脚本名参数的实践。
[rooteo1dboy ~]#cat 18_8_1.exp
set file (1index $argv 0]
#1/usr/bin/expect
set host (1index Sargv 1]
[bs xp]p 2s
puts *sfile\tshost\tsdir*
puts Sargc
 d
执行结果如下：
[root8o1dboy-]expect 18_8_1.exp oldgix.txt 10.0.0.3/opt
oldgir.txt
10.0.0.3
/opt
<=这是脚本后面的三个参数。
<这是参数的总个数（Sargc的结果）。
18_8_1.exp
<=这是期本的名字（Sargv0的结果）。
18.6
Expect程序中的if条件语句
Expect程序中if条件语句的基本语法为：
if（条件表达式）（
指令
或
1f（条件表达式]（
指令
}else(
指令
---
## Page 346
328跟老男孩学Linux运堆：Shell编程实战
说明：if关键字后面要有空格，else关键字前后都要有空格，（条件表达式）大括
号里面靠近大括号处可以没有空格，将指令括起来的起始大括号“{”前要
有空格。
范例18-9：使用if语句判断脚本传参的个数，如果不符则给予提示。
[root9o1dboy -]cat 18_9_1.exp
1/usr/bin/expect
if（Sargc1=3）（
<=Sargc为传参的个数，相当于she11至的S#。
send_user“usage：expect Sargvo file host dir\n*#<==给予提示，$argvo 代表
脚本的名字。
exit
<==退出脚本。
#define var
set file [lindex Sargv 0]
set host [1index Sargv 1]
set dir [1index Sargv 2]
puts*sfile\tshost\tsdir*
执行结果如下：
[root8o1dboy-]expect 18_9_1.exp
[root8o1dboy -]expect 18_9_1.expo1dboy.1og 192.168.33.130/home/o1dboy
u8age: expect 18_9_1.exp file host dir<==18_9_1.exp 就是 Sargv0 喻出的结果
<==传三个参数。
o1dboy.1og
192.168.33.130/home/oldboy<==这是脚本后面的三个参数。
范例18-10：使用if语句判断脚本传参的个数，不管是否符合都给予提示。
[root8o1dboy ~]cat 18_10_1.exp
oadxa/utq/xs/1
if (Sargc 1-26)(
puts*bad.·
}else{
puts*good.
执行结果如下：
[rootθo1dboy ~]expect 18_10_1.exp
[root9o1dboy -]expect 18_10_1.exp （a..z)
bad,
'poos
本章的目的并不是带领读者彻底精通Expect语言，而是指导读者解决运维管理中
的交互问题，实现自动化运维，因此，请读者不要过多地纠结于Expect语言，面应多关
注前文讲解的自动化交互的知识。
---
## Page 347
第18章Expect自动化交互式程序应用实践329
18.7Expect中的关键字
Expect中的特殊关键字用于匹配过程，代表某些特殊的含义或状态，一般只用于
Expect命令中面不能在Expect命令外面单独使用。
18.7.1eof关键字
cof（end-of-file）关键字用于匹配结束符，前面已经使用过eof这个关键字了，本节
不再过多重复。例如：
[root9oldboy-]cat18_1_1.exp
#1/usr/bin/expect
spawn 88h PI:EMAIL uptime
expect **password*（send*123456\n*)
[root8o1dboy -]#cat 18_2_1.exp
1/usr/bin/expect
spam 88h roote192.168.33.130 uptime
）oedxa
.ou/sar.
(x\9sczt.puosdxo）.pxomssed..
(nutuoodxafxsapusdx）
18.7.2timeout关键字
timeout是Expect中的一个控制时间的关键字变量，它是一个全局性的时间控制开
关，可以通过为这个变量赋值来规定整个Expect操作的时间，注意这个变量是服务于
Expect全局的，而不是某一条命令，即使命令没有任何错误，到了时间仍然会激活这个变
量，此外，到时间后还会激活一个处理及提示信息开关，下面来看看它的实际使用方法。
范例18-11：timeout超时功能实践。
[rooteoldboy-]cat 18_11_1.exp
1/usr/bin/expect
8pawm 88h root9192.168.33.130 uptime
<==设置30秒超时。
expect *yes/no*
oeu2edx
(puts*Request tineout by oldboy.*;return)
<==多则达30秒后就超时，打印指定输出后遗出。
执行结果如下：
[root@o1dboy-]#expect 18_11_1.exp
spawm ssh root9192.168.33.130uptine
root9192.168.33.130's pa8sword:Request timeout by oldboy.
上面的处理中，首先将timeout变量设置为30秒，此时Expect脚本的执行只要超
---
## Page 348
330跟老男孩学Linux运维：Shell编程实战
过了30秒，就会直接执行结尾的timeout动作，打印一个信息，停止运行脚本，读者还
可以做更多的其他事情。
在expect{}的用法中，还可以使用下面的timeout语法：
[rooteo1dboy~]cat 18_11_2.exp
#1/usr/bin/expect
spawn ssh root9192.168.33.130 uptime
expect{
-timeout 3
"yes/no*
timeout
(puts *Request timeout by oldboy.*:return)
执行结果如下：
[root@o1dboy~]#expect 18_11_2.exp
spawm ssh root9192.168.33.130 uptine
root9192.168.33.130's password:Request timeout by oldboy.
timeout变量设置为0，表示立即超时，为-1则表示永不超时。
18.8
企业生产场景下的Expect案例
环境准备：首先准备3台虚拟机或真实服务器，IP和主机名列表见表18-3。
表18-3IP和主机名
IP地址
主机名