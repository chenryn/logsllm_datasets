### 18.5 使用位置参数和特殊参数

在Expect脚本中，可以使用位置参数来接收传递给脚本的参数。例如：
```expect
set file [lindex $argv 0]
```

除了基本的位置参数外，Expect还支持一些特殊参数：
- `argc`：表示传入参数的数量。
- `argv0`：表示脚本的名字。

#### 示例 18-8：处理Expect脚本中的参数数量及脚本名

```bash
[root@oldboy ~]# cat 18_8_1.exp
#!/usr/bin/expect

set file [lindex $argv 0]
set host [lindex $argv 1]
set dir [lindex $argv 2]

puts "file: $file\thost: $host\tdir: $dir"
puts "argc: $argc"
puts "argv0: $argv0"
```

执行结果如下：
```bash
[root@oldboy ~]# expect 18_8_1.exp oldgix.txt 10.0.0.3 /opt
file: oldgix.txt    host: 10.0.0.3    dir: /opt
argc: 4
argv0: 18_8_1.exp
```

### 18.6 Expect程序中的if条件语句

在Expect程序中，if条件语句的基本语法如下：
```expect
if (条件表达式) {
    指令
} elseif (条件表达式) {
    指令
} else {
    指令
}
```

注意：
- `if` 关键字后面要有空格。
- `else` 关键字前后都要有空格。
- 大括号 `{}` 内部靠近大括号处可以没有空格。
- 将指令括起来的起始大括号 `{` 前要有空格。

#### 示例 18-9：使用if语句判断脚本传参的个数

```bash
[root@oldboy ~]# cat 18_9_1.exp
#!/usr/bin/expect

if ($argc != 3) {
    send_user "usage: expect $argv0 file host dir\n"
    exit
}

set file [lindex $argv 0]
set host [lindex $argv 1]
set dir [lindex $argv 2]

puts "file: $file\thost: $host\tdir: $dir"
```

执行结果如下：
```bash
[root@oldboy ~]# expect 18_9_1.exp
usage: expect 18_9_1.exp file host dir

[root@oldboy ~]# expect 18_9_1.exp oldboy.log 192.168.33.130 /home/oldboy
file: oldboy.log    host: 192.168.33.130    dir: /home/oldboy
```

#### 示例 18-10：使用if语句判断脚本传参的个数并给予提示

```bash
[root@oldboy ~]# cat 18_10_1.exp
#!/usr/bin/expect

if ($argc < 2) {
    puts "bad."
} else {
    puts "good."
}
```

执行结果如下：
```bash
[root@oldboy ~]# expect 18_10_1.exp
bad.

[root@oldboy ~]# expect 18_10_1.exp a..z
good.
```

### 18.7 Expect中的关键字

Expect中有一些特殊的关键字，用于匹配过程或表示某些特殊的含义或状态。这些关键字通常只能在Expect命令中使用，而不能单独使用。

#### 18.7.1 eof关键字

`eof`（end-of-file）关键字用于匹配结束符。例如：
```bash
[root@oldboy ~]# cat 18_1_1.exp
#!/usr/bin/expect

spawn ssh PI:EMAIL uptime
expect "*password*" {send "123456\n"}
```

#### 18.7.2 timeout关键字

`timeout` 是Expect中的一个全局时间控制变量，可以通过为这个变量赋值来规定整个Expect操作的时间。即使命令没有任何错误，到了时间仍然会激活这个变量，并打印指定的输出后退出。

#### 示例 18-11：timeout超时功能实践

```bash
[root@oldboy ~]# cat 18_11_1.exp
#!/usr/bin/expect

set timeout 30
spawn ssh root@192.168.33.130 uptime

expect {
    -timeout 3
    "yes/no*" {send "yes\r"}
    timeout {puts "Request timeout by oldboy."; return}
}
```

执行结果如下：
```bash
[root@oldboy ~]# expect 18_11_1.exp
spawn ssh root@192.168.33.130 uptime
root@192.168.33.130's password: Request timeout by oldboy.
```

### 18.8 企业生产场景下的Expect案例

环境准备：首先准备3台虚拟机或真实服务器，IP和主机名列表见下表：

| IP地址          | 主机名   |
|-----------------|----------|
| 192.168.33.130  | server1  |
| 192.168.33.131  | server2  |
| 192.168.33.132  | server3  |

通过以上示例和说明，读者可以更好地理解和应用Expect脚本，实现自动化运维。