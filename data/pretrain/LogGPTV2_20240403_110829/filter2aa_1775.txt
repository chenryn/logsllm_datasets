# WAVESTONE Presentation: Mainframe Security and Exploitation

## Presenter: Ayoub ELAASSAL
- **Email:** PI:EMAIL
- **Contact:** @ayoul3__
- **GitHub:** [github.com/ayoul3](https://github.com/ayoul3)
- **Tumblr:** [mainframesproject.tumblr.com](https://mainframesproject.tumblr.com)

## About Me
- **Role:** Penetration Tester at Wavestone, specializing in Windows and Unix systems.
- **Mainframe Experience:** First encountered mainframes in 2014; passionate about them ever since.
- **Interests:** Metal music and wine.

## Overview of the Talk
1. **Why We Should Care About Mainframes**
2. **Quick Recap on Executing Code on z/OS**
3. **Playing with z/OS Memory Layout**

## The Reality of IBM zEC13 Technical Specs
- **Memory:** 10 TB of RAM
- **Processors:** 141 processors, 5 GHz
- **Dedicated Processors:** For Java, XML, and UNIX
- **Security Features:** Cryptographic chips

### Common Misconceptions
- "Who uses mainframes anymore?" Despite the skepticism, mainframes are still widely used in critical industries.

## Quick Recap: Executing Code on z/OS
- **Credential Sniffing**
- **Bruteforce Attacks**
- **Middleware Exploitation**
- **Other Methods:** FTP, NJE, etc.
- **References:** Phil & Chad’s talks

## TN3270 Protocol
- **Description:** TN3270 is a rebranded Telnet protocol, commonly used to interact with mainframes.
- **Characteristics:** By default, it transmits data in clear text.
- **Emulator:** X3270 for those without access to the real thing.

### EBCDIC Encoding
- **Challenge:** Dealing with EBCDIC encoding, which can be cumbersome.
- **Tool:** Ettercap dissector by @Mainframed767

## Time Sharing Option (TSO)
- **Functionality:** TSO is the equivalent of /bin/bash on z/OS, providing a user-friendly interface.
- **Security Concerns:** Too friendly, potentially exposing vulnerabilities.

### Bruteforce Attacks
- **Effectiveness:** Surprisingly effective, especially with passwords derived from logins.
- **Statistics:** 
  - Windows: 5%
  - Mainframe: 27%

## Interactive Applications and CICS
- **CICS:** A middleware that combines features similar to Drupal and Apache Tomcat, first introduced around 1968.
- **Current Version:** CICS TS 5.4
- **Usage:** Most interactive applications on z/OS rely on CICS.
- **Vulnerabilities:** If an attacker can "exit" the application, they can execute default admin programs like CECI and CEMT, which are often not well-secured.

### CICS API Functions
- **CECI:** Allows execution of CICS API functions, including SPOOLOPEN.
- **INTRDR:** Internal Reader, equivalent to /bin/bash, executes any received input.

## Reverse Shell in JCL & REXX
- **Steps:**
  1. Allocate a new file (dataset).
  2. Write a reverse shell script in REXX.
  3. Execute the file.

### Demo: CICSPWN

## Security Attributes on RACF
- **Attributes:**
  - **Special:** Access to any system resource.
  - **Operations:** Access to all datasets regardless of RACF rules.
  - **Audit:** Access to audit trails and management of logging classes.
- **RACF:** The most widespread security product on z/OS, handling authentication and access control.

## Z Architecture
- **CPU:** Proprietary, CISC, Big Endian.
- **Addressing Modes:** 23, 31, and 64 bits.
- **Instructions:** Many variants, including memory-memory, memory-register, register-register, and register-immediate.
- **Registers:**
  - 16 general-purpose registers (0 – 0xF).
  - 49 other registers.
  - PSW register: Holds control flags and the address of the next instruction.

## Security Context in Memory
- **Control Blocks:** Data structures describing the current state of the system.
- **ACEE Control Block:** Stores the current user’s privileges.
- **Patching ACEE:** Modifying byte 38 to gain special privileges.

### Program State Word (PSW)
- **ABEND S0C4, code 4:** Protection exception.

## Memory Protection
- **Concept:** Similar to virtual memory and paging in Intel architecture.
- **Storage Keys:** 4-bit keys + Fetch Protection bit at the CPU level.
- **Key Values:**
  - 0 – 7: System and middleware.
  - 8: Mostly for users.
  - 9 – 15: Programs requiring virtual = real memory.

### Problem State vs. Supervisor State
- **Supervisor State Instructions:**
  - Cross memory operations.
  - Direct Storage Access.
  - Changing storage keys.
  - Exit routines.
  - System event handling.

## APF Libraries
- **Purpose:** Extensions of the z/OS kernel.
- **Privileges:** Any program in an APF library can request supervisor mode.
- **Protection:** APF libraries are highly protected.

### APF Hunting on OMVS (Unix)
- **Embedded Unix:** Every z/OS has an embedded POSIX-compliant Unix for FTP, HTTP, etc.
- **APF Files:**
  - Extended attributes: `ls -E`
  - Find APF files: `find / -ext a`
  - Add APF authorization: `extattr +a file`

### APF Hunting on z/OS
- **APF Libraries:** Similar to directories, do not lose their APF attribute if programs are added.
- **Enumeration:** Requires diving into memory and using control blocks.

### Attack Flow
1. Write an ASM program to patch the current security context.
2. Locate the ACEE structure in memory.
3. Patch the privilege bits in memory.
4. Compile and link the program with Authorized state.
5. Copy it to an APF library with ALTER access.
6. Run it and enjoy SPECIAL privileges.

### Supervisor Call (SVC)
- **Description:** APIs to hand over control to Supervisor mode.
- **Table:** 255 SVCs, 0 to 200 reserved by IBM, 201 – 255 user-defined.
- **Authorized SVCs:** Some admins/products register SVCs that switch to Kernel mode.

### Magic SVC Code
- **Demo:** ELV.SVF

### Excerpts from the Logica Attack
- **Reference:** [Logica attack on GitHub](https://github.com/mainframed/logica/blob/master/Tfy.source.backdoor)

### Challenges
- **RACF Rules:** Modifying user attributes can alter RACF rules, requiring careful handling.
- **Access Control:** Being "special" does not automatically grant access to all applications; specific class/resource access must be configured.

### Impersonating Users
- **ACEE Structure:**
  - User ID
  - Group Name
  - User Flags
  - Privileged Flag
  - Terminal Information
  - Terminal ID
  - List of Groups

### Address Spaces
- **Virtual Address Space:**
  - Shared areas
  - Private areas
  - Common regions
- **ASID:** 2-byte number identifying each address space.

### Listing Address Spaces
- **Demo:** EVL.SELF

### Virtual Address Space Layout
- **Regions:**
  - Shared Area
  - Low User Private
  - Extended Private
  - Extended Common
  - Common Region
  - User Region
  - System Region

### Cross Memory Operations
- **Service Request Block (SRB):** Schedules routines to run on foreign virtual address spaces.
- **Cross Memory Mode:** Allows read/write access in remote address spaces.
- **Access Register Mode:** Dedicated registers map remote address spaces.

### Demos
- **ELV.APF LIST**
- **ELV.SELF**
- **ELV.SELF (Cross Memory Operations)**

## Contact Information
- **GitHub:** [github.com/ayoul3](https://github.com/ayoul3)
- **Twitter:** @ayoul3__

---

This presentation aims to provide a comprehensive overview of mainframe security and exploitation techniques, emphasizing the importance of understanding and securing these critical systems.