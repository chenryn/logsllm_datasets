© WAVESTONE
1
Ayoub ELAASSAL
PI:EMAIL
@ayoul3__
Dealing the perfect hand
Shuffling memory blocks on z/OS
© WAVESTONE
2
What people think of when I talk about 
mainframes
© WAVESTONE
3
The reality: IBM zEC 13 technical specs:
• 10 TB of RAM
• 141 processors,5 GHz
• Dedicated processors for JAVA, XML and 
UNIX
• Cryptographic chips…
Badass Badass Badass !!
So what…who uses those anymore ?
© WAVESTONE
https://mainframesproject.tumblr.com 6
© WAVESTONE
7
About me
Pentester at Wavestone, mainly hacking Windows and Unix stuff
First got my hands on a mainframe in 2014…Hooked ever since
When not hacking stuff: Metal and wine
•
github.com/ayoul3
•
ayoul3__
© WAVESTONE
8
This talk
Why we should care about mainframes
Quick recap on how to execute code on z/OS
Playing with z/OS memory layout
© WAVESTONE
9
Quick recap on how to execute code on z/OS
Sniffing credentials
Good ol’ bruteforce
Go through the middleware
And many more (FTP, NJE, etc.)
Check out Phil & Chad’s talks !
© WAVESTONE
10
The wonders of TN3270
The main protocole to interact with a Mainframe is
called TN3270
TN3270 is simply a rebranded Telnet
…Clear text by default
X3270 emulator if 
you don’t have the 
real thing
© WAVESTONE
11
The wonders of TN3270
© WAVESTONE
12
Damn EBCDIC
© WAVESTONE
13
Ettercap dissector by @Mainframed767
[DEMO ETTERCAP]
© WAVESTONE
14
Quick recap on how to execute code on z/OS
Sniffing credentials
Good ol’ bruteforce
Go through the middleware
And many more (FTP, NJE, etc.)
Check out Phil & Chad’s talks !
© WAVESTONE
15
Time Sharing Option (TSO)
Tsk tsk tsk… too friendly!
TSO is the /bin/bash on z/OS
© WAVESTONE
16
Bruteforce
Nmap script by @Mainframed767
© WAVESTONE
17
Bruteforce is still surprisingly effective
Passwords derived from login
Windows : 5%
Mainframe : 27%
© WAVESTONE
18
Quick recap on how to execute code on z/OS
Sniffing credentials
Good ol’ bruteforce
Go through the middleware
And many more (FTP, NJE, etc.)
Check out Phil & Chad’s talks !
© WAVESTONE
19
© WAVESTONE
20
© WAVESTONE
21
© WAVESTONE
22
Interactive applications
CICS is a combination Drupal and Apache Tomcat…before it
was cool (around 1968)
Current version is CICS TS 5.4
Most interactive applications on z/OS rely on a middleware 
called CICS
© WAVESTONE
23
If we manage to “exit” the application, we can instruct CICS to 
execute default admin programs (CECI, CEMT, etc.) => rarely 
secured
CICS: a middleware full of secrets
@ayoul3__
As usual, some API functions are particularly interesting! 
CECI offers to execute CICS API functions
© WAVESTONE
24
[DEMO SPOOLOPEN
© WAVESTONE
25
INTRDR = Internal Reader, is the equivalent of 
/bin/bash. It executes anything it receives
© WAVESTONE
26
The theory
@ayoul3__
© WAVESTONE
27
The theory
@ayoul3__
© WAVESTONE
28
The theory
@ayoul3__
© WAVESTONE
29
Reverse shell in JCL & REXX
We allocate a new file (dataset)
Reverse shell in REXX – python-like 
a scripting language
Execution of the file
© WAVESTONE
30
[DEMO CICSPWN]
© WAVESTONE
31
Quick recap on how to execute code on z/OS
Sniffing credentials
Good ol’ bruteforce
Go through the middleware
And many more (FTP, NJE, etc.)
Check out Phil & Chad’s talks !
© WAVESTONE
32
LISTUSER command
© WAVESTONE
33
Shell on z/OS, now what ?
There are three main security attributes on RACF :
•
Special : access any system resource
•
Operations : access all dataset regardless of RACF rules
•
Audit : access audit trails and manage logging classes
The most widespread security product on z/OS is RACF. It 
performs authentication, access control, etc.
© WAVESTONE
34
This talk
Why we should care about mainframes
Quick recap on how to execute code on z/OS
Playing with z/OS memory layout
© WAVESTONE
35
Z architecture
Proprietary CPU (CISC – Big Endian)
Three addressing modes: 23, 31 & 64 bits.
Each instruction has many variants: memory-memory, 
memory-register, register-register, register-immediate, etc.
16 general purpose registers (0 – 0xF) (+ 49 other registers)
The PSW register holds control flags and the address of the 
next instruction
© WAVESTONE
36
Security context in memory
z/OS memory is full of control blocks: data structures 
describing the current state of the system
RACF stores the current user’s privileges in the ACEE control 
block…We just need to find it!
© WAVESTONE
37
Security context in memory
PSA
ASCB
PSAAOLD
0
548
Address Space
Control Block
Always 
starts at 
virtu. addr
0
ASCBASXB
108
ACEE
USER FLAGS
1... .... SPECIAL
..1. .... OPERATIONS
…1 .... AUDITOR
ASXB
Address Space
Extension Block
ASXBSENV
200
38
If we patch byte 38 we’re good to go! 
© WAVESTONE
38
Program State Word (PSW)
ABEND S0C4, code 4: Protection exception.
© WAVESTONE
39
Memory protection
Same concept of virtual memory and paging as in Intel (sorta)
Each page frame (4k) is allocated a 4-bit Storage key + Fetch 
Protection bit at the CPU level
16 possible Storage key values
0 – 7 : system and middleware. 0 is the master key
8 : mostly for users
9 – 15 : used by programs that require virtual = real memory
© WAVESTONE
40
Program State Word (PSW)
8 - 11 bit : current protection key, 8 in this case
Next instruction
Control flags
© WAVESTONE
41
Memory protection
Storage keys match
Storage don't match
& Fetch bit ON
Storage don't match
& Fetch bit OFF
PSW key is zero
Full
Full
Full
PSW key is not zero
Full
None
Read
© WAVESTONE
42
Problem state Vs Supervisor state
Some instructions are only available in Supervisor state (kernel 
mode) :
•
Cross memory operations
•
Direct Storage Access
•
Changing storage keys
•
Exit routines
•
Listening/editing/filtering system events
•
Etc.
© WAVESTONE
43
Program State Word (PSW)
Problem mode ~ User mode
Supervisor mode ~ Kernel mode
15 - 16 bit : Problem mode is ON in this case (D =1101) 
Next instruction
Control flags
© WAVESTONE
44
How do we get into Supervisor state
APF libraires are extensions of the zOS kernel
Any program present in an APF library can request 
supervisor mode
Obviously…these libraries are very well protected ! (irony)
© WAVESTONE
45
APF hunting on OMVS (Unix)
Every z/OS has an embedded POSIX compliant UNIX running (for 
FTP, HTTP, etc.)
APF files have extended attributes on OMVS (Unix)
List extended attributes : ls -E 
Find APF files : Find / -ext a 
Add APF authorization : extattr +a file
As for setuid bit, if you alter an APF file it loses its extended attribute
© WAVESTONE
46
APF hunting on OMVS (Unix)
[DEMO APF UNIX]
© WAVESTONE
47
APF hunting on z/OS
APF libraries on z/OS are akin to directories. They do not lose their
APF attribute if we drop programs inside
They are a tad more complicated to enumerate. We need to dive 
into memory
Control block to the rescue! 
© WAVESTONE
48
Hunting APF on z/OS... Diving into virtual memory
PSA
CVT
ECVT
CSVT
APFA
APF
FLCCVT
0
16
EAECVT
Extended CVT
References
all major 
structures
Always 
starts at 
virtu. addr
0
140
ECVTCSVT
Content 
Supervisor
Table
APFA
228
12
8
12
FIRST
LAST
APF
APF
APF
© WAVESTONE
49
Demo ELV.APF LIST
[DEMO ELV.APF]
© WAVESTONE
50
Patching ACEE
© WAVESTONE
51
The attack flow
Write an ASM program to patch the curent security context
•
Locate the ACEE structure in memory
•
Patch the privilege bits in memory
Compile and link the program with the Authorized state
Copy it to an APF library with ALTER access
Run it and enjoy SPECIAL privileges
© WAVESTONE
52
APF
@ayoul3__
© WAVESTONE
53
[DEMO 2 ELV.APF]
© WAVESTONE
54
The theory behind this feat is not new
Mark Wilson @ich408i discussed a similar abuse of privilege using
SVC
Some legitimate products/Mainframe admins use a variation of this 
technique too!
Stu Henderson alluded to critical risks of having APF with ALTER 
access
© WAVESTONE
55
Supervisor Call
Supervisor Call ~ Syscalls on Linux: APIs to hand over control to 
Supervisor mode
Table of 255 SVC. 0 to 200 are IBM reserved. 201 – 255 are user 
defined
Some admins/products register an authorized SVC that switches 
the AUTH bit and goes into Kernel mode
© WAVESTONE
56
« Magic » SVC code
© WAVESTONE
57
Call SVC to get into Supervisor mode
We do not need to launch 
this program from an APF 
library anymore
© WAVESTONE
58
Looking for « magic » SVC
We browse the SVC table 
looking for these 
instructions (and other 
possible variations)
© WAVESTONE
59
Supervisor Call
[DEMO ELV.SVF]
© WAVESTONE
60
Excerpts from the Logica attack
https://github.com/mainframed/logica/blob/master/Tfy.source.backdoor
© WAVESTONE
61
A few problems though
The user’s attribute are modified => RACF rules are altered
You can be special, that does not mean you can access any app!
=> Need to figure out the right class/resource to add 
RACF rules (not easy)
© WAVESTONE
62
Impersonating users
© WAVESTONE
63
ACEE
UserID
Group Name
User Flags
Privileged flag
Terminal information
Terminal ID
@ List of groups
….
….
Interesting stuff in the ACEE
Duplicate fields
To our user’s ACEE
© WAVESTONE
64
Each program or JOB is allocated a virtual address space (same as 
in Windows/Linux)
Private areas can only be addressed from within the address space
All addresses spaces share some common regions that contain 
system data & code: PSA, CVT, etc.
Each address space is identified by a 2-byte number : ASID (~ PID 
on Linux)
Not so fast…
© WAVESTONE
65
Listing address spaces
PSA
CVT
ASVT
FLCCVT
0
16
CVTASVT
References
all major 
structures
Always 
starts at 
virtu. addr
0
556
ASVTMAXU
516
1st ASCB
528
1st ASCB
2nt ASCB
Last ASCB
...
+16
© WAVESTONE
66
EVL.SELF
List address spaces demo
[DEMO ELV.SELF]
© WAVESTONE
67
Virtual address space layout
Shared Area
Low User Private
Extended Private
Extended Common
Common region
User region
System region
PSA
Private
8K
Virtual Address Space
16 MB
2 G
2 T
512 T
16 EB
ACEE
Private region
24K
© WAVESTONE
68
Service Request Block: schedules a routine to run on a foreign 
Virtual Address Space
Cross memory mode: allows read/write access in remote @ space 
using special instructions
Access Register mode: 16-set of dedicated registers that can map 
each a remote @ space
Cross memory operations
© WAVESTONE
69
Cross memory operations
© WAVESTONE
70
Cross memory operations
© WAVESTONE
71
Cross memory operations
[DEMO 2 ELV.SELF]
© WAVESTONE
72
• github.com/ayoul3
• ayoul3__