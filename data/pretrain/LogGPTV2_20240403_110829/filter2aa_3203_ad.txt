### Technology in the TCP/IP Protocol Suite

The TCP/IP protocol suite encompasses a wide range of technologies, with various working groups dedicated to advancing specific standards. For instance, the IPv6 Working Group focuses on refining and standardizing IPv6 protocols. After a period of review and consensus, the Internet Engineering Task Force (IETF) publishes the final version of an Internet draft as a Request for Comments (RFC) and assigns it an RFC number.

RFCs are categorized into five requirement levels, as detailed in Table 1-1.

#### Table 1-1: Requirement Levels of RFCs
| Requirement Level | Description |
|-------------------|-------------|
| **Required** | Must be implemented on all TCP/IP-based hosts and gateways. |
| **Recommended** | Encouraged for implementation by all TCP/IP-based hosts and gateways. Recommended RFCs are typically implemented. |
| **Elective** | Implementation is optional. These applications have been agreed upon but are not widely used. |
| **Limited Use** | Not intended for general use. |
| **Not Recommended** | Not recommended for implementation. |

### Maturity Levels of Internet Standards

When an RFC is considered for standardization, it undergoes stages of development, testing, and acceptance. These stages are formally known as maturity levels. The IETF defines three maturity levels for Internet standards, as outlined in Table 1-2. Maturity levels are determined by the IETF working group and are independent of the requirement levels.

#### Table 1-2: Maturity Levels of Internet Standards
| Maturity Level | Description |
|---------------|-------------|
| **Proposed Standard** | A stable specification that has resolved known design choices, is well understood, and has received significant community review. It is believed to be valuable and enjoys community interest. |
| **Draft Standard** | A well-understood and stable specification, both in its semantics and as a basis for implementation. |
| **Internet Standard** | A highly mature specification that provides significant benefit to the Internet community. It may simply be referred to as a Standard. |

### Updates to RFCs

If an RFC-based standard needs to be updated, the IETF publishes a new Internet draft, which, after a review period, becomes a new RFC with a new number. The original RFC is never updated. Therefore, it is crucial to verify that you have the most recent RFC on a particular topic or standard. For example, this book references several RFCs throughout its chapters. If you decide to look up the technical details of an Internet standard in its RFC, ensure you have the latest version.

You can obtain RFCs from the IETF's official website: [http://www.ietf.org/rfc.html](http://www.ietf.org/rfc.html).

### TCP/IP Terminology

Internet standards use a specific set of terms when referring to network elements and concepts related to TCP/IP networking. These terms provide a foundation for subsequent chapters. Figure 1-1 illustrates the components of an IP network.

#### Common Terms and Concepts in TCP/IP
- **Node**: Any device, including routers and hosts, that runs an implementation of IP.
- **Router**: A node that can forward IP packets not explicitly addressed to itself. On an IPv6 network, a router also typically advertises its presence and host configuration information.
- **Host**: A node that cannot forward IP packets not explicitly addressed to itself (a non-router). A host is typically the source and destination of IP traffic and discards traffic not explicitly addressed to itself.
- **Upper-Layer Protocol**: A protocol above IP that uses IP as its transport. Examples include ICMP, TCP, and UDP. Application layer protocols that use TCP and UDP as their transports (e.g., FTP and DNS) are not considered upper-layer protocols.
- **LAN Segment**: A portion of a subnet consisting of a single medium, bounded by bridges or Layer 2 switches.
- **Subnet**: One or more LAN segments bounded by routers and using the same IP address prefix. Other terms for subnet include network segment and link.
- **Network**: Two or more subnets connected by routers. Another term for network is internetwork.
- **Neighbor**: A node connected to the same subnet as another node.
- **Interface**: The representation of a physical or logical attachment of a node to a subnet. Examples include a network adapter (physical interface) and a tunnel interface (logical interface).
- **Address**: An identifier assigned at the Internet layer to an interface or set of interfaces, used as the source or destination of IP packets.
- **Packet**: The protocol data unit (PDU) at the Internet layer, comprising an IP header and payload.

### TCP/IP Components in Windows

Table 1-3 lists the advantages of the TCP/IP protocol suite and the inclusion of TCP/IP components in Windows.

#### Table 1-3: Advantages of the TCP/IP Protocol Suite and TCP/IP Components in Windows
| Advantages of the TCP/IP Protocol Suite | Advantages of TCP/IP Components in Windows |
|----------------------------------------|--------------------------------------------|
| A standard, routable enterprise networking protocol that is the most complete and accepted protocol available. All modern operating systems support TCP/IP, and most large private networks rely on TCP/IP for much of their traffic. | TCP/IP components in Windows enable enterprise networking and connectivity for both Windows and non-Windows-based computers. |
| A technology for connecting dissimilar systems. Many TCP/IP application protocols, such as HTTP, FTP, and Telnet, are designed to access and transfer data between different systems. | TCP/IP components in Windows allow standards-based connectivity to other operating system platforms. |
| A robust, scalable, cross-platform client/server framework. | TCP/IP components in Windows support the Windows Sockets application programming interface, which developers use to create client/server applications. |
| A method of gaining access to the Internet. | Windows-based computers are Internet-ready. |

Windows includes both IPv4-based and IPv6-based TCP/IP components.

### Configuring the IPv4-Based TCP/IP Component in Windows

The IPv4-based TCP/IP component in Windows Server 2008 and Windows Vista is installed by default and appears as the "Internet Protocol Version 4 (TCP/IPv4)" component in the Network Connections folder. Unlike Windows XP and Windows Server 2003, you can uninstall the IPv4-based TCP/IP component using the `netsh interface ipv4 uninstall` command.

In Windows Server 2003 and Windows XP, the IPv4-based TCP/IP component is installed by default and appears as the "Internet Protocol (TCP/IP)" component in the Network Connections folder. You cannot uninstall this component, but you can restore its default configuration using the `netsh interface ip reset` command.

The IPv4-based TCP/IP component can be configured to obtain its settings automatically or from manually specified settings. By default, it is configured to obtain an address configuration automatically. Figure 1-2 shows the General tab of the Internet Protocol Version 4 (TCP/IPv4) Properties dialog box.

#### Automatic Configuration

If you specify automatic configuration, the IPv4-based TCP/IP component attempts to locate a DHCP server and obtain a configuration when Windows starts. Many TCP/IP networks use DHCP servers to allocate TCP/IP configuration information to clients. For more information about DHCP, see Chapter 6, "Dynamic Host Configuration Protocol."

If the IPv4-based TCP/IP component fails to locate a DHCP server, it checks the settings on the Alternate Configuration tab. Figure 1-3 shows this tab.

This tab contains two options:
- **Automatic Private IP Address (APIPA)**: If selected, APIPA is used. TCP/IP in Windows automatically chooses an IPv4 address from the range 169.254.0.1 to 169.254.255.254, using the subnet mask 255.255.0.0. The DHCP client ensures that the chosen IPv4 address is not already in use. If the address is in use, TCP/IP in Windows chooses another IPv4 address and repeats the process for up to 10 addresses. Once a unique address is found, TCP/IP in Windows configures the interface with this address. APIPA allows users on single-subnet SOHO networks to use TCP/IP without manual configuration or a DHCP server. However, APIPA does not configure a default gateway, so only local subnet traffic is possible.
- **User Configured**: If selected, TCP/IP in Windows uses the configuration you specify. This option is useful for computers used on multiple networks, where not all networks have a DHCP server, and an APIPA configuration is not desired. For example, a laptop might use a DHCP configuration at the office and an alternate manual configuration at home, providing easy access to home network devices and the Internet without requiring manual reconfiguration.

If you specify an APIPA or alternate manual configuration, TCP/IP in Windows continues to check for a DHCP server every 5 minutes. If a DHCP server is found, it stops using the APIPA or alternate manual configuration and uses the IPv4 address configuration offered by the DHCP server.

#### Manual Configuration

To manually configure the IPv4-based TCP/IP component, you must assign the following at a minimum:
- **IP Address**: A 32-bit logical address used to identify the interface of an IPv4-based TCP/IP node. Each IPv4 address has two parts: the subnet prefix and the host ID. The subnet prefix identifies all hosts on the same physical network, and the host ID identifies a specific host on the network. Each interface on an IPv4-based TCP/IP network requires a unique IPv4 address, such as 131.107.2.200.
- **Subnet Mask**: A subnet mask allows the IPv4-based TCP/IP component to distinguish the subnet prefix from the host ID. An example of a subnet mask is 255.255.255.0.

For more information about IPv4 addresses and subnet masks, see Chapter 3, "IP Addressing," and Chapter 4, "Subnetting."

You must configure these parameters for each network adapter in the node that uses the IPv4-based TCP/IP component. If you want to connect to nodes beyond the local subnet, you must also assign the IPv4 address of a default gateway, which is a router on the local subnet to which the node is attached. The IPv4-based TCP/IP component sends packets destined for remote networks to the default gateway if no other routes are configured on the local host.

You can also manually configure the IPv4 addresses of primary and alternate DNS servers. The IPv4-based TCP/IP component uses DNS servers to resolve names, such as www.example.com, to IPv4 or IPv6 addresses. Figure 1-4 shows an example of a manual configuration for the IPv4-based TCP/IP component.

You can also manually configure the IPv4-based TCP/IP component using `netsh interface ipv4` commands and the IPv4-based TCP/IP component using `netsh interface ip` commands at a command prompt.

### Installing and Configuring the IPv6-Based TCP/IP Component in Windows

The procedure for installing and manually configuring the IPv6-based TCP/IP component in Windows depends on the version of Windows. All versions of IPv6 in Windows support IPv6 address autoconfiguration. All IPv6 nodes automatically create unique IPv6 addresses for use between neighboring nodes on a subnet. To reach remote locations, each IPv6 host upon startup sends a Router Solicitation message to discover local routers on the subnet. An IPv6 router on the subnet responds with a Router Advertisement message, which the IPv6 host uses to automatically configure IPv6 addresses, the default router, and other IPv6 settings.

#### Windows Vista and Windows Server 2008

In Windows Vista and Windows Server 2008, the IPv6-based TCP/IP component is installed by default and cannot be uninstalled. You do not need to manually configure a typical IPv6 host. However, you can manually configure the IPv6-based TCP/IP component through the Windows graphical user interface or with `netsh interface ipv6` commands.

To manually configure IPv6 settings through the Windows graphical user interface:
1. From the Network Connections folder, right-click the connection or adapter on which you want to manually configure IPv6, and then click Properties.
2. On the Networking tab for the properties of the connection or adapter, double-click "Internet Protocol Version 6 (TCP/IPv6)" in the list under "This connection uses the following items."

Figure 1-5 shows an example of the Internet Protocol Version 6 (TCP/IPv6) Properties dialog box.

For a manually configured address, you must specify an IPv6 address and subnet prefix length (almost always 64). You can also specify the IPv6 addresses of a default gateway and primary and secondary DNS servers.

Alternatively, you can use `netsh interface ipv6` commands to add addresses or routes and configure other settings. For more information, see "Configuring IPv6 with Windows Vista."

#### Windows XP and Windows Server 2003

Windows XP with Service Pack 1 (SP1) and Windows Server 2003 were the first versions of Windows to support IPv6 for production use. You install IPv6 as a component in Network Connections; the component is named "Microsoft TCP/IP Version 6" in Windows Server 2003 and "Microsoft IPv6 Developer Edition" in Windows XP with SP1.

Unlike the IPv4-based TCP/IP component, the IPv6 component is not installed by default and can be uninstalled. You can install the IPv6 component in the following ways:
- Using the Network Connections folder.
- Using the `netsh interface ipv6 install` command.

To install the IPv6 component in Windows Server 2003 using the Network Connections folder:
1. From the Network Connections folder, right-click any local area connection, and then click Properties.
2. Click Install.
3. In the Select Network Component Type dialog box, click Protocol, and then click Add.
4. In the Select Network Protocol dialog box, click Microsoft TCP/IP Version 6, and then click OK.
5. Click Close to save changes.

The IPv6 component in Windows XP and Windows Server 2003 has no properties dialog box for configuring IPv6 addresses and settings. Configuration should be automatic for IPv6 hosts and manual for IPv6 routers.

If a host requires manual configuration, use `netsh interface ipv6` commands to add addresses or routes and configure other settings. If you are configuring a computer running Windows XP with SP1 or later or Windows Server 2003 to be an IPv6 router, you must use `netsh interface ipv6` commands to manually configure the IPv6 component with address prefixes.

For more information about configuring an IPv6 router, see Chapter 5, "IP Routing."

### Name Resolution Files in Windows

The IPv4 and IPv6 components in Windows support the use of name resolution files to resolve the names of destinations, networks, protocols, and services. Table 1-4 lists these name resolution files, which are stored in the `Systemroot\System32\Drivers\Etc` folder.

#### Table 1-4: Name Resolution Files
| File Name | Description |
|-----------|-------------|
| **Hosts** | Resolves host names to IPv4 or IPv6 addresses. For more information, see Chapter 7, "Host Name Resolution." |
| **Lmhosts** | Resolves NetBIOS names to IPv4 or IPv6 addresses. For more information, see Chapter 7, "NetBIOS Name Resolution." |