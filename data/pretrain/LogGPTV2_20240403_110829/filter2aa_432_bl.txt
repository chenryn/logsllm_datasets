{   
lport - -;
socktemp = rresvport (&lport);
listen (socktemp,1)
/* 将含有端口号的 ASCII 串发往服务器*/
sprintf (num, “%d”,lport);
write (sockfd1,num,strlen (num) +1);
FD_ZERO (&readfds)
FD_SET (sockfd1,&readfds);
FD_SET (socktemp,&readfds);
Select (32,&readfds, (fd_set *) 0,(fd_set *)0,
(struct timeval *)0;
FD_ISSET( socktemp.&readfds) ;
/* 服务器在第二套接字上与客户连接 */
len=sizeof (serv2_addr);
sockfd2 =accept (socktemp,& serv2_addr,&len);
close (socktemp);
fd2ptr = sockfd2;           / 返回给调用者 */
serv2_addr.sin_port =ntohs ( (u_short) serv2_addr.sin_port);
)
- 230 -
Linux网络编程
write (sockfd1,cliuname,   strlen(cliuname) +1 );
write (sockfd1,servuname,  strlen(servuname) +1 );
write ( sockfd1,cmd ,      strlen(cdm) +1 ) ;
read ( sockfd1,&c,1);
if (c ! = 0)
/* 未收到应答()，表明服务器出错，从服务器读出错误信息并送往标准出错*/
while ( read (sockfd1,&c,1) = = 1)
{
write (2,&c,1) ;
if ( c= = ‘\n’);
break;
}
}
/* end of rcmd*/
进程控制是由服务器进程 rshd 加以实施的，下面我们先给出 rshd 源程序的大体框架，
然后再讨论。这里滤去了若干变量说明和出错处理。
int one =1;
/* main 函数*/
main ( )
{
struct sockaddr_in  cli_addr;
struct linger         linger;
openlog (“rsh,LOG_PID|LOG_ODELAY,LOG_DAEMON);
addrlen = sizeof (cli_addr);
getpeername (0,(struct sockaddr *)&cli_addr,&addrlen) ;
setsockpt (0,SOL_SOCKET,SO_KEEPALIVE,( char *)*one,
sizeof ( one ) );
linger.1_onoff = 1;
linger.1_linger = 60;
setsockopt (0,SOL_SOCKET,SO_LINGER,(chat *)&linger,
sizeof( linger) );
Do (&cli_addr);   /* Do 函数不返回*/
}
/* do 函数：*/
do (cli_addrp)
Struct sockaddr_in * cli _addrp;   /* client‘s internet address*/
{
signal (SIGINT ,SIG_DFL):
signal (SIGQUIT,SLG_DFL);
signal (SIGTERM,SIG_DFL);
第十章 远程命令执行
- 231 -
if ( cli_addrp ->sin_family ! =AF_INET)
exit (1);
cli_addrp ->sin_port = ntohs ( (u)short )cli_addrp ->sin_port};
if 
( 
cli_addrp 
->sin_port 
>=IPPORT_RESERVED 
|| 
cli_addrp 
->sin_port=IPPORT_RESERVED)
exit(1);
oursecport = IPPCRT_RESERVED – 1;
if ( ( sockfd2=rresvport (&oursecport) )sin_port=htons ( u_short)clisecport};
if ( connect (sockfd2,( struct sockaddr *)cli_addrp, sizeof (* cli_addrp) ) sin_addr,sizeof (struct in_addr),
cli_addrp->sin_family);
setpwent( );
if (chdir(pwd->pw_dir) pw_passwd !=NULL& *pwd->pw_passwd !=‘\0’ &&
ruserok (hostname,pwd ->pa_uid= =0,cliuname,servuname)pw_iud !=0&&access(“/etc/nologin”,F_OK) = =0 )
exit (1);
/* 向用户回写空字节，表明成功*/
    if (write (2,“ ”,1) !=1)
exit (1);
- 232 -
Linux网络编程
if (clisecport )
      {
if ( pipe (pipefd)sockfd2)
maxfdpl=pipefd[ 0 ];
else
maxfdpl = sockfd2;
maxfdpl ++;
if (childpid !=0)
    {      
close (0);
close (1);
close (2);
close (pipefd[1]);
FD_ZERO(&readfrom);
FD_SET(sockfd2,&readfrom);
FD_SET(pipefd[0],&readfrom);
ioctl( pipefd[0],FIONBIO,(char *)&one);
        do {
Ready=readfrom;
if (select (maxfdpl,&ready,(fd_set *)0, (fd_set *)0,(struct timeval *)0)pw_shell = =‘\0’)
pwd ->pw_shell =“/bin/sh”;
setgid ( ( gid_t)pwd->pwd_gid);
initgroups ( pwd ->pw_name,pwd->pw_gid);
setuid ( (uid_t)pwd ->pw_uid);
ebviron =env_prts;
strncat (env_home,pwd->pw_dir,sizeof (env_home) – 6 );
strncat (env_shell,pwd ->pw_shell,sizeof(env_shell) – 7);
strncat (env_user ,pwd->name,sizeof(env_user) – 6 );
if ( ( cp = rindex)pwd->pw_shell, ‘/’ ) )!=NULL )
cp ++;
else cp =pwd ->pw_shell;
execl (pwd->pw_shell,cp, “-c”,cmdbuf , (char *)0 );
exit (1);
}
注意，如果 chdir 失败，对指定服务器用户名的主目录的修改会返回一个错误。此外成
为控制进程的循环使用的是 killpg 系统调用给一个指定进程组发信号，这是因为 4.3 BSD
不支持 kill 系统调用给进程组发信号的选择。
当 rcmd 连接 rshd 服务器的时候，4.3 BSD 系统上的 inetd 超级服务器在该端口上侦听
连接请求，通过 fork 和 exec 激活 rshd 服务器，并由 rshd 进程执行外壳程序，然后它又复
制并执行用户命令，这是在远程系统上两次 fork 和三次 exec 的最小情况，是不可避免的。
在 rshd 源代码口应该注意：
子进程建立自身，作为一进程组的头，也即它执行的 shell 和 shell 的任何子程序
均属于同一进程组。这主要是为了满足信号处理的需要。控制进程（rshd 父进程）执行 killpg
系统调用将接收的来自客户的任何信号发给整个进程组，而不仅是启动的 shell 进程。
子进程为由它激活的 shell 建立一个环境表，这与 login 程序调用用户的 shell 前所
做的工作类似，至少在激活用户的 shell 时，应该设置 HOME、USER、和 PATH变量。
本地系统上的客户进程无法得到远程系统上的 shell 的 exit  状态。
10.3  rexec 函数和 rexecd 服务器
rexec 函数和 rcmd 函数类似，但有一个大的区别，那就是调用 rexec 的进程不需要超
级用户权限，因为不需要一个保留端口。在 roxec 和其服务器 roxecd 之间使用的确认方案
是从客户传递到服务器的用户的文本口令，在服务器加密后与服务器系统中的口令文件中
的加密文件进行比较。
但这样一来就使得用户的口令明文在网络上传输，而且为了将口令明文传送给 roxec
函数，调用者必须将口令放在源文件中，这是安全问题中的一大漏洞，因此基本上不实用。
roxec 的调用参数和 rcmd 相似：
int rexec (char * * ahost , int remport ,char * servuname,
- 234 -
Linux网络编程
char * password , char * cmd , int * sockfd2 );
ahost remport , servuname ,cmd ,和 sockfd2 参数与 rcmd 函数的参数意义相同，口令及服
务器用户名用于在服务器系统上确认调用者。
rexec 函数 与 rexecd 服务器的源代码与前面的 rcmd 和 rshd 的源代码相似，它们的控
制进程相同，唯一的区别与远程主机上的用户确认相关，因此这里不再给出它们的源代码
了。
第十一章 远程注册
- 235 -
第十一章  远程注册
11.1  简介
用户在使用计算机的时候，往往需要在一台计算机上登录进入另外一台计算机中，以
使用另外一台计算机的资源。在一个计算机上注册登录进入另外一台计算机，称为远程登
录，它是网络应用很重要的一个部分。4.3 BSD 提供了两个远程注册实用程序，一个是
rlogin，该程序假设远程服务器也是一个 Linux 系统，另外一个 实用程序是 Telnet，它是 TCP
/IP 支持的标准的 INTERNET 的一个实用程序，与主机操作系统无关，本书将主要讨论
rlogin。
远程登录与多用户、多终端系统有一定的相似之处，因此用户和容易将它们混淆起来。
远程登录的实质是杂本地仿真一个终端，调用远程系统上的 shell 进程处理本地命令。我们
将在以后的文章中进行讨论其具体的过程。
伪终端是远程登录中非常重要的一个部分，它对于本地用户来说就相当于一个终端，
用户对其操作就相当于在远程系统上进行操作。伪终端涉及到许多的东西，比较复杂，应
对其有充分的了解。伪终端仿真程序只是远程登录程序的有个部分，一个有机的组成，只
负责仿真远程终端，而远程登录的控制部分由远程登录的客户程序和服务器程序完成，这
个我们应该充分认识到。
远程登录程序由客户程序和服务器程序组成，它们分别负责本地系统及远程系统中网
络通信，将请求及应答在两个系统之间传送。
11.2  终端行律和伪终端
终端是一个全双工的设备，具有单独的输入路径和输出路径。终端行律（terminal line
discipline ）在内核中处于用户进程和设备驱动程序之间，它能够完成下面所例举的几个功
能：
回显键入的字符。
把键入的字符组成行，以便进程能够整行的从终端读入。
编辑输入的行。Linux 允许擦除以前键入的字符，也允许擦除一个整行，从新的
一行开始输入。
当某些终端控制键被按下的时候产生信号，比如：SIGINT 和 SIGQUIT。
处理流控制字符，如按下 Ctr—S 键，屏幕输出暂停，按下 Ctr—Q 键后又重新开
始输出。
允许键入文件结束字符。
进行字符转换。例如，当一个进程写入一个新行开始符，行律都把它转换成为一
个回车符和一个换行符。又如，如果终端不处理 tab 键，则将 tab 字符转换成若干字符。