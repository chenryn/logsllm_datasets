      }
      catch (Exception ex)
      {
        WriteLine(ex.Message);
      }
    }
要在代码示例中使用这个方法，需要更改Listener方法来调用方法
CommunicateWithClientUsing-ReadersAndWriters，而不是方法
CommunicateWithClientUsingSocketAsync。
  注意： 流、读取器和写入器参见第23章。
25.7.4 使用套接字实现接收器
接收方应用程序SocketClient也实现为一个控制台应用程序（包）。通过命令行参
数，需要传递服务器的主机名和端口号。成功解析命令行后，调用方法SendAndReceive与
服务器通信（代码文件SocketClient / Program.cs）：
    static void Main(string[] args)
    {
      if (args.Length ! = 2)
      {
        ShowUsage();
        return;
      }
      string hostName = args[0];
      int port;
      if (! int.TryParse(args[1], out port))
      {
        ShowUsage();
        return;
      }
      WriteLine("press return when the server is started");
      ReadLine();
      SendAndReceive(hostName, port).Wait();
      ReadLine();
    }
    private static void ShowUsage()
    {
      WriteLine("Usage: SocketClient server port");
    }
SendAndReceive方法使用DNS名称解析，从主机名中获得IPHostEntry。这个
IPHostEntry用来得到主机的IPv4地址。创建Socket实例后（其方式与为服务器创建代码相
同）, 
Connect方法使用该地址连接到服务器。连接完成后，调用Sender和Receiver方法，
创建不同的任务，这允许同时运行这些方法。接收方客户端可以同时读写服务器：
    public static async Task SendAndReceive(string hostName, int port)
    {
      try
      {
        IPHostEntry ipHost = await Dns.GetHostEntryAsync(hostName);
        IPAddress ipAddress = ipHost.AddressList.Where(
        address => address.AddressFamily == AddressFamily.InterNetwork).First();
        if (ipAddress == null)
        {
        WriteLine("no IPv4 address");
        return;
        }
        using (var client = new Socket(AddressFamily.InterNetwork,
        SocketType.Stream, ProtocolType.Tcp))
        {
        client.Connect(ipAddress, port);
        WriteLine("client successfully connected");
        var stream = new NetworkStream(client);
        var cts = new CancellationTokenSource();
        Task tSender = Sender(stream, cts);
        Task tReceiver = Receiver(stream, cts.Token);
        await Task.WhenAll(tSender, tReceiver);
        }
      }
      catch (SocketException ex)
      {
        WriteLine(ex.Message);
      }
    }
  注意： 如果改变地址列表的过滤方式，得到一个IPv6地址，而不是IPv4地
址，则还需要改变Socket调用，为IPv6地址系列创建一个套接字。
Sender方法要求用户输入数据，并使用WriteAsync方法将这些数据发送到网络流。
Receiver方法用ReadAsync方法接收流中的数据。当用户进入终止字符串时，通过
CancellationToken从Sender任务中发送取消信息：
    public static async Task Sender(NetworkStream stream,
      CancellationTokenSource cts)
    {
      WriteLine("Sender task");
      while (true)
      {
        WriteLine("enter a string to send, shutdown to exit");
        string line = ReadLine();
        byte[] buffer = Encoding.UTF8.GetBytes($"{line}\r\n");
        await stream.WriteAsync(buffer, 0, buffer.Length);
        await stream.FlushAsync();
        if (string.Compare(line, "shutdown", ignoreCase: true) == 0)
        {
        cts.Cancel();
        WriteLine("sender task closes");
        break;
        }
      }
    }
    private const int ReadBufferSize = 1024;
    public static async Task Receiver(NetworkStream stream,
      CancellationToken token)
    {
      try
      {
        stream.ReadTimeout = 5000;
        WriteLine("Receiver task");
        byte[] readBuffer = new byte[ReadBufferSize];
        while (true)
        {
        Array.Clear(readBuffer, 0, ReadBufferSize);
        int read = await stream.ReadAsync(readBuffer, 0, ReadBufferSize, token);
        string receivedLine = Encoding.UTF8.GetString(readBuffer, 0, read);
        WriteLine($"received {receivedLine}");
        }
      }
      catch (OperationCanceledException ex)
      {
        WriteLine(ex.Message);
      }
    }
运行客户端和服务器，可以看到通过TCP的通信。
  注意： 示例代码实现了一个TCP客户机和服务器。TCP需要一个连接，才能
发送和接收数据；为此要调用Connect方法。对于UDP，也可以调用Connect连接方法，
但它不建立连接。使用UDP时，不是调用Connect方法，而可以使用SendTo和
ReceiveFrom方法代替。这些方法需要一个EndPoint参数，在发送和接收时定义端点。
  注意： 取消标记参见第21章。
25.8 小结
本章回顾了System.Net名称空间中用于网络通信的.NET 
Framework类。从中可了解
到，某些.NET基类可处理在网络和Internet上打开的客户端连接，如何给服务器发送请求
和从服务器接收响应
作为经验规则，在使用System.Net名称空间中的类编程时，应尽可能一直使用最通用
的类。例如，使用TCPClient类代替Socket类，可以把代码与许多低级套接字细节分离开
来。更进一步，HttpClient类是利用HTTP协议的一种简单方式。
本书更多地讨论网络，而不是本章提到的核心网络功能。第42章将介绍ASP.NET
Web API，它使用HTTP协议提供服务。第43章探讨WebHooks和SignalR，这两个技术提供
了事件驱动的通信。第44章给出了WCF（Windows Communication Foundation）的信息，
这个通信技术使用旧风格的Web服务方法，也提供了二进制通信。
下一章讨论Composition 
Framework，以前称为Managed 
Extensiblity 
Framework
（MEF）。
第26章
Composition
本章要点
● Composition Framework的体系结构
● 使用特性的Composition
● 基于约定的注册
● 协定
● 部件的导出和导入
● 宿主应用程序使用的容器
● 部件的惰性加载
本章源代码下载地址（wrox.com）：
打开网页http://www.wrox.com/go/professionalcsharp6，单击Download Code选项卡即可
下载本章源代码。本章代码分为以下几个主要的示例文件：
● 基于特性的示例
● 基于约定的示例
● UI计算器（WPF和UWP）
26.1 概述
Microsoft Composition框架在部件和容器之间创建独立性。部件可以在容器中使用，
不需要容器知道实现或其他细节。容器只需要一个协定，例如，一个使用部件的接口。
Microsoft Composition可以用于不同的场景，比如依赖注入容器，甚至可以用它在应
用程序发布后，将插件动态加载到应用程序中，给应用程序添加功能。为了学习这些场
景，需要一个基础。
为了简化应用程序的开发，最好实践关注点的分离（Separation of Concerns, SoC）。
SoC是一个设计原则，它将程序分解为不同的部分，每个部分都有自己的责任。有了不同
的部分，就可以彼此独立地重用和更新这些部分。
这些部分或组件之间是紧密耦合的，很难彼此独立地重用和更新这些组件。使用接口
进行低级耦合，有助于达到独立的目标。
使用接口进行耦合，并允许独立地开发任何具体的实现代码，称为依赖注入设计模
式。依赖注入实现了控制的反转，即逆转对使用什么实现代码的控制。使用接口的组件通
过属性接收实现代码（属性注入），或通过构造函数接收实现代码（构造函数注入）。通
过接口使用组件时，没有必要了解实现代码。不同的实现代码可用于不同的场景，例如，
单元测试，可以使用不同的实现代码提供测试数据。
依赖注入可以通过依赖注入容器来实现。使用依赖注入容器时，容器定义了接口应使
用的实现方式。Microsoft Composition可以利用容器的功能。这是该技术的一个用例。
  注意： 依赖注入参见第31章。第31章介绍了如何使用依赖注入容器Microsoft.
Framework.DependencyInjection。
插件可以给现有的应用程序添加功能。我们可以创建一个宿主应用程序，它随着时间
的推移会获得越来越多的功能——这些功能可能是开发人员团队编写的，不同的供应商也
可以创建插件来扩展自己的应用程序。
目前，插件用于许多不同的应用程序，如Internet Explorer和Visual Studio。Internet
Explorer是一个宿主应用程序，它提供了一个插件框架，给许多公司提供浏览网页时的扩
展。Shockwave Flash Object允许浏览包含Flash内容的网页。Google工具栏提供了可以从
Internet Explorer上快速访问的特定Google功能。Visual Studio也有一个插件模型，它允许
用不同级别的扩展程序来扩展Visual 
Studio。Visual 
Studio插件使用了Managed
Extensibility Framework（MEF），即Microsoft Composition的第一个版本。
对于自定义应用程序，总是可以创建一个插件模型来动态加载和使用程序集中的功
能。但需要解决查找和使用插件的问题。这个任务可以使用Microsoft Composition自动完
成。为了创建边界，MEF有助于删除部件和使用这些部件的客户端或调用者之间的依赖
性。
 注意： 
Microsoft 
Composition以前的版本称为Microsoft 
Extensibility
Framework 
（MEF）。MEF 
1.x仍然可用于完整的.NET 
Framework，在
System.ComponentModel. Composition名称空间中。Microsoft Composition的新名称空间
是System.Composition。Microsoft Composition可通过NuGet包使用。
MEF 1.x提供不同的类别，例如，AssemblyCatalog或DirectoryCatalog——在程序集
或在目录中查找类型。Microsoft Composition的新版本没有提供这个特性。然而，可以
自己构建这个部分。第16章展示了如何使用.NET 4.6和.NET Core 5动态地加载程序集。
可以使用这些信息来建立自己的目录类别。
  注意： MEF（或Composition）自.NET 4.0以来，一直可用于通过.NET创建插
件。.NET 4.5 Framework提供了另一个技术以编写动态加载插件的灵活的应用程序，即
Managed Add-in Framework（MAF）。MAF自从.NET 3.5以来就有，它使用一个管道在
插件和宿主应用程序之间通信，使开发过程比较复杂，但通过应用程序域或不同的进
程使插件彼此分开。在这方面，MEF是两种技术中比较简单的。MAF和MEF可以合并
起来，发挥各自的长处（而且完成了两倍的工作）。MAF没有移植到.NET Core中，只
能用于完整的框架。
本章介绍的主要名称空间是System. Composition。
26.2 Composition库的体系结构
Microsoft 
Composition通过部件和容器来构建，如图26-1所示。容器查找出口的部
件，把入口连接到出口上，因此使部件可用于宿主应用程序。
图26-1
下面是部件加载的完整过程。前面提及，部件通过出口来查找。出口可以使用特性定
义，或在C#代码中使用流利API定义。多个出口提供程序可以连接成链，以定制出口，例
如，使自定义出口提供程序只允许部件用于特定的用户或角色。容器使用出口提供程序把
入口连接到出口上，该容器自己就是一个出口提供程序。
Microsoft 
Composition包含的NuGet包如图26-2所示。该图还显示了库之间的依赖关
系。
图26-2
表26-1解释了这些NuGet包的内容。
表26-1
NuGet包
说明
System.Composition.AttributedModel
这个NuGet包包含Export和Import特性。这个包允
许使用特性导出和导入部件
System.Composition.Convention
这个NuGet包可以使用普通的旧CLR对象（Plain
Old CLR Object, POCO）作为部件。可以用编程
方式应用规则，定义出口
System.Composition.Runtime
这个NuGet包包含运行库，因此宿主应用程序需
要它。类CompositionContext包含在这个包中。
CompositionContext是一个抽象类，它允许获得
出口的上下文
System.Composition.Hosting
NuGet包包含CompositionHost。CompositionHost
派生自基类Composition Context，从而给出了一
个具体的类，来检索出口
System.Composition.TypedParts
这个NuGet包定义了类ContainerConfiguration。有
了ContainerConfiguration，就可以定义应该用于
出口的程序集和部件。类
CompositionContextExtensions为
CompositionContext定义了扩展方法
SatisfyImports，便于匹配进口与出口
26.2.1 使用特性的Composition
下面用一个简单的例子来说明Composition体系结构。宿主应用程序可以加载插件。
通过Microsoft Composition，把插件表示为部件。部件定义为出口，并加载到一个导入部
件的容器中。
AttributeBasedSample的样例代码定义了如下引用和名称空间：
CalculatorContract （类库）
名称空间
    System.Collections.Generic
SimpleCalculator （类库）
引用
    CalculatorContract
    System.Composition.AttributedModel
名称空间：
    System
    System.Collections.Generic
    System.Composition
AdvancedCalculator （类库）
引用
    CalculatorContract
    System.Composition.AttributedModel
名称空间
    System
    System.Collections.Generic
    System.Composition
SimpleHost （控制台应用程序）
引用
    CalculatorContract
    SimpleCalculator
    System.Composition.AttributedModel
    System.Composition.Hosting
    System.Composition.Runtime
    System.Composition.TypedParts
名称空间
    System