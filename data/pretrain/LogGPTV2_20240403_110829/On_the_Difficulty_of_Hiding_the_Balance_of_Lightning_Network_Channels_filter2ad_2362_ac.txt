8da4d6b708eabbedaeb978e88fb8a5331c6e164c64cf9e561ba165dbdd200e71
608922733705166848 with
been closed with the
following close
total
capac-
transaction
Channel
Id
Session 8: Blockchain SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand606will not see the actual balance, but provide a lower bound for that
balance that will be MAX_PAYMENT_ALLOWED. In these cases, the ex-
act balance of the channel can be obtained only depending on the
actual balance of the channel, and the direction in which the attack
is performed.
Figure 3: Percentage of deanonymizable channels, per num-
ber of channels attacked, sorted by increasing capacity.
Figure 3 shows that the number of channels in the Mainnet
for which the exact balance may not be recovered is very low.
The plot shows the cumulative distribution of the channels by
its capacity, that is, for a given capacity, it shows the percentage
of channels with lower or equal such capacity. We can see that
there are 89.10% of channels in Mainnet with lower capacity than
MAX_PAYMENT_ALLOWED, which means that their balances can be
exactly disclosed.
Another interesting measure performed in Mainnet is the cost
for an adversary to compute the balances of all the channels in
the network. As mentioned in Section 3.3, if an adversary wants
to perform the attack, the cost can be minimized by choosing as
victims of the attack (i.e., node A in Figure 2) nodes that are highly
connected. A single channel creation is required to get the balance
of all the channels connected to such a node. A good strategy is
to select the nodes by their number of channels and perform the
attack until all the channels are processed.
Figure 4 shows the percentage of channels that can be deanonymi-
zed by attacking a given number of nodes, assuming that the nodes
are sorted by their number of channels. We can see that we can
deanonymize 50% of the channels by just attacking 18 nodes, 80%
with 78 nodes, and 90% with 141 nodes. Moreover, we can easily
estimate the minimum vertex cover of the Lightning Network using
the local-ratio algorithm [5], which yields a set of 624 nodes. In
other words, with less than 624 attacks to specific nodes, one could
cover all the channels in the network. Note that, by the local-ratio
algorithm, the vertex cover is guaranteed to be at most twice the
minimum vertex cover. The actual size of the minimum cover set
will range between 312 and 624 nodes. Then, to disclose the balance
for all the network, there is a trade-off between the entrance barrier
cost and the time needed to perform the attack. The attack can
be parallelized by opening channels with each of the nodes at the
same time. In the worst case, this implies an entrance barrier cost of
624 × 640.05 = 339, 391.2 USD. If time is not a constrain, channels
can be open sequentially, hence lowering the entrance barrier cost
to 640.05 USD. From Figure 4, we can observe that by attacking only
78 nodes, an adversary can disclose the balance of 80% of the chan-
nels. Therefore, by performing a parallel attack with these settings,
the entrance barrier cost gets reduced to 78 × 640.05 = 49, 923.9
USD. With regard to the economic cost of the attack, and since the
transactions fees are charged per channel, the parallel or sequential
strategy does not affect the total cost. The total cost is low even in
the worst case scenario, i.e., attacking the 624 nodes, in which it
reaches 624 × 0.0763 = 47.61 USD.
Besides the economical cost of the attack, we can also consider a
time cost estimation. Algorithm 1 looks for the balance in the same
form as a binary search algorithm looks for a number in a sorted
list. Therefore, each iteration of the algorithm reduces the range by
half. The initial range would normally be always set by maxFlow =
channel_capacity and minFlow = 0. Given the above-mentioned
limitation, the current execution of the algorithm sets maxFlow =
min{channel_capacity, MAX_PAY MENT _ALLOW ED}, i.e., in the
worst-case scenario, the algorithm iterates 23 times, considering
an accuracy_threshold of 1. In the general case, the number of
iterations is:
(cid:32)(cid:24)
(cid:25)(cid:33)
maxFlow − minFlow
accuracy_threshold
loд2
(1)
which means that there are three ways of reducing the number of
iterations (and thus the running time to perform the attack on a
given channel):
• reduce maxFlow − minFlow by using historic information
from previous iterations of the attack,
• reduce maxFlow by choosing a channel with small capacity,
• increase accuracy_threshold and allow more coarse-grained
results.
Regardless of the current MAX_FUNDING_ALLOWED and specially
MAX_PAYMENT_ALLOWED limit, it is easy to predict the number of
iterations for each of the channels capacity. Figure 5 shows the
number of iterations for all existing channels, if there was no
Figure 4: Percentage of deanonymizable channels per at-
tacked node.
 0 10 20 30 40 50 60 70 80 90 100 0 2x106 4x106 6x106 8x106 1x107 1.2x107 1.4x107 1.6x107Percentage of ChannelsChannels (sorted by increasing capacity)MAX-PAYMENT-ALLOWEDChannel NumberSession 8: Blockchain SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand607Out of the 710 channels that behaved normally, and each of
the iterations of the attacks on each on them, we extracted the
average time, median time, and minimum time per iteration of Al-
gorithm 1. These values are 2, 562, 2, 603 and 1, 106 milliseconds,
respectively. Figure 6 shows the time (both in seconds and in num-
ber of iterations) that it would take to perform the attack, depending
on the capacity of a channel, and the desired range (i.e., the accu-
racy_threshold parameter in Algorithm 1) in satoshis.
Notice that by detecting a balance with an accuracy of 0.0391
USD on a channel of capacity MAX_PAYMENT_ALLOWED takes about
33.3 seconds, according to the average; 33.84 seconds, according to
median; and 14.4 seconds, following the minimum time. Detecting
a balance with an accuracy of 1 USD takes about 20 seconds in both
average and median; and less than 10 seconds in the minimum case.
Detecting the balance with an accuracy of 10 USD can be conducted
in 10.25, 10.4 and 4.4 seconds, respectively.
Figure 6: Time to perform the attack (in seconds left and in
number of iterations right) per desired accuracy range (in
satoshis bottom and in USD top).
Figure 7 shows the time it would take to perform the attack on
all of the channels of a single node, by assuming that the adversary
only controls one channel, and ignoring the MAX_PAYMENT_ALLO-
WED limitation. The adversary could perform the attack in parallel
by opening multiple channels and probing different channels at the
same time. We see that 1, 432 nodes can be attacked in a minute;
or less in the sequential attack, with an accuracy of 10 USD; 1, 369
with an accuracy of 2.5 USD; 1, 249 with 0.63 USD and 608 with
3.815 × 10−5 USD; or 1 satoshi, out of 1, 682 nodes with visible
channels by the adversary.
Besides the strict attack of finding the balances of the channels,
information about the balance can be used to measure the state of
the Lightning Network. For the Lightning Network to maximize
its utility, it is important for channels to be balanced or leveled.
For this reason, we include the notion of level percentage. Given
a channel between two nodes A and B, with capacity CAB, and
balance of each of the nodes balanceAB for the balance of A and
balanceBA for that of B, then we refer to the level percentage lpAB
Figure 5: Expected time to perform attack on each channel,
sorted by increasing capacity.
MAX_PAYMENT_ALLOWED limit, depending on the accuracy threshold.
All currently existing channels have less capacity than MAX_FUNDI-
NG_ALLOWED, for which 24 iterations are enough to find out the
balance within a range of 1 satoshi. In general, with n iterations,
one can perform the attack of channels of capacity 2n. Given that
the running time between iterations can be considered constant,
we can estimate the time required to perform an attack given the
number of iterations. This time is also shown in Figure 5 in the
right y axis. The actual time is taken as the average from the tests
performed in the Bitcoin Testnet (see Section 4.2).
4.2 Bitcoin Testnet Evaluation
In order to provide a proof-of-concept of our attack, we have de-
veloped and performed a real attack on the Lightning Network
running over Testnet. To perform the attack, we first identified 11
nodes with the largest amount of Lightning Channels in Testnet, as
seen by a local deployment of lnd [32]. These 11 nodes have 2, 518
open channels, more than 50% of the total number of channels in
Testnet. Then, we performed the attack described in Algorithm 2 by
sequentially connecting to each of the nodes and opening a channel,
in order to retrieve the exact balance of the 2, 518 channels they
had previously open with other nodes of the network.
Contrarily to traditional Bitcoin payments, the Lightning Net-
work requires both users, and also intermediary hops, to be online
for the payment to take place. Whereas the adversary (our node)
and intermediary nodes (the 11 nodes we open channels with) were
online and responsive throughout the whole attack, the destination
payment nodes (i.e., each of the targets in each iteration of Algo-
rithm 1) were in most cases not online. This is likely due to nodes
that were created in the Testnet for occasional testing and that may
even not be used anymore. At the time of writing, Lightning Net-
work client implementations do not have a mechanism to filter out
unused channels, or unresponsive nodes. Out of the 2, 518 target
nodes that our attack contacted, only 710 replied. The remaining
1808 requests failed due to long delays, or simply because of their
unresponsive behavior.
 0 5 10 15 20 25 0 1000 2000 3000 4000 5000 6000 0 10 20 30 40 50 60Number of IterationsExpected Time (seconds)Channels (sorted by increasing capacity)1 satoshi (0.00003 USD)16,384 satoshis (0.63 USD)65,536 satoshis (2.5 USD)262,144 satoshis (10 USD) 0 10 20 30 40 50 1 32 1024 32768 1.04858x106 0 5 10 15 200.0009770.0312501.00000032.000000Time (seconds)Number of IterationsRange (satoshis)Range (USD)Time per range (using average)Time per range (using median)Time per range (using minimum)Session 8: Blockchain SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand608Figure 7: Expected time to perform attack on all channels of
each node. Left y axis as per number of iterations, right y
axis as per time in seconds.
Figure 8: Level percentage of each channel.
lpAB = CAB − (0.01 × CAB + balanceAB )
× 100
(2)
CAB
as:
And analogously to lpBA as:
CAB
× 100
lpBA = CAB − (0.01 × CAB + balanceBA)
(3)
Intuitively, if lpAB is closer to zero, then A holds most of the capacity
of the channel, and can thus perform payments to B, but not receive
payments from B. Similarly, the closer lpAB gets to 100, the less
balance A holds in the channel, and the more payments it can receive
from B. Ideally, without further knowledge on the characteristics
of each channel, all the channels should always be equally leveled
to ensure a good functioning of the network. Figure 8 shows the
level percentage of the 272 channels of which we could find out
the exact balance, even with the testing limit of MAX_PAYMENT_A-
LLOWED. Figure 8 shows that, for the channels whose balances we
could find out, the level percentages are destituted: either nodes
can only make payments, or nodes can only receive payments. A
better payment network should provide more channels close to a
level percentage of 50%.
5 DISCUSSION
Several countermeasures can be developed to mitigate the attack
described in this paper. A first solution relies on denying access to
the debugging messages, e.g., by silently dropping the information
provided by the failure message referred to in Section 3.2, Algo-
rithm 1. Other possibilities include selectively or randomly denying
given payment requests, or even allowing dynamically rechargeable
payment channels to fully mask and randomize existing balances
of two Lightning Network channel points. Additional details about
the aforementioned solutions follow.
5.1 Payment Requests Denial
A first approach is for a node to randomly deny a given percentage
of payment requests, e.g., by setting a dropping rate parameter in
the node. The requesting node does not know the reason of the re-
jection (by using the failure message with no debugging information
described in Section 3). This can make the attack unfeasible since
the adversary might assume that the route has failed because there
are not enough funds to carry the requested payment. The solution
can be seen as a typical approach for masking information based
on introducing noise. In this case, the adversary receives wrong
information that makes the attack probabilistic or simply unfeasible.
There is clearly the typical trade-off between privacy and usability
tied to the dropping rate parameter. Several improvements can be
developed in order to improve such trade-off.
Instead of setting the dropping rate at random, a node could
define a more selective approach. We can identify some indications
revealing that a balance disclosure attack (or other type of attack)
is being carried on. For example, consider that node A receives a
payment request from node B. Then node A can use the following
information to decide its dropping rate:
– 1. Consider the number of channels and rate of payment re-
quests of node B. If node A receives lots of payment requests from
node B, and node B has just one channel (other than the AB chan-
nel). Node A can consider this as an abnormal situation, potentially
an evidence of an adversary perpetrating the balance disclosure
attack, hence increasing the dropping rate of the node in real time.
– 2. Consecutive payment requests with a suspicious amount
pattern. If node A receives from node B (independently of its number
of channels) payment requests that follow the pattern described in
Algorithm 1, the node A considers again the situation as an anomaly,
and increases the dropping rate of the node.
These are just two examples of simple heuristics that can be used
to detect an abnormal behavior. In the general case, we can model
the behavior of a node and provide anomaly detection measures to
dynamically tune the dropping rate for specific nodes or situations.
In the end, the node administrator can set the dropping rate and
decide the privacy degree willing to accept. This privacy comes
with the cost of not routing some payments that might be legitimate.
We believe, however that a good trade-off can be achieved with
relatively simple measures, like the ones outlined above.
 16 32 64 128 256 512 1024 2048 4096 8192 0 200 400 600 800 1000 1200 1400 1600 1800 32 64 128 256 512 1024 2048 4096 8192 16384Number of IterationsExpected Time (seconds)Nodes (sorted by increasing sum of capacity of their channels)1 satoshi (0.00003 USD)16,384 satoshis (0.63 USD)65,536 satoshis (2.5 USD)262,144 satoshis (10 USD) 0 20 40 60 80 100 50 100 150 200 250Level PercentageChannels (sorted by increasing level percentage)Session 8: Blockchain SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand6095.2 Dynamic Absorption of Negative Balances
Another way to address the general attack uncovered in this pa-
per could be the extension of the current implementations of the
Lightning Network, by including additional masking functionali-
ties capable of absorbing negative balances. This would be similar
to energy-driven techniques discussed in [4], where adversaries
trying to estimate metering consumption and billing functionality
by adversarial collection of metering metadata get concealed by
privacy-preserving mechanisms. The addition of synthetic comput-
ing and storage functionality, relying on charging channels, can be
put in place as well between Lightning Network channel points,
hence avoiding fine-grained collection of nodes’ information to
mitigate the deanonymisation attack presented in Section 3.1. In
addition, the masking solution can be randomized as in [3, 35], in
such a way that the adversarial monitoring of balances between
payment channels gets transformed from fine-grained processing
into coarse-grained collection, hence guaranteeing that more pow-
erful adversaries will fail at properly retrying accurate balances
between two payment channels points of the Lightning Network.
The absorption of negative balances will act as a networking
countermeasure to handle periodic (adversarial) probing to identify
balance capacity flows, i.e., to hide and avoid accurate collection
of channel node balance capacities. This shall lead to anonymity
provable protection (i.e., protection with anonymity guarantees that
can be proven in a formal way) like the one in [4], and whose goal
is to mask transactional information flows in payment streams. The
underlying techniques can rely on rechargeable swapping channels
between Lightning Network nodes, used to mask channels’ balance
by adding or subtracting resource capacities (e.g., by increasing or
decreasing the real bandwidth of each payment channel). The goal is
to establish strong anonymity guarantees in the sense of differential
privacy [13]. To achieve such anonymity guarantees in realistic
settings, further work must be conducted, e.g., to establish the
influence of, and the interplay between, capacity and throughput
bounds that real payment channels of Lightning Network nodes
must face.
The overall solution shall provide integrated methods based on
cascading noise, allowing for payment channel on-the-fly recharg-