its internal function, in special cases. Before reaching
stable stage, the OS is in unstable stage, in which they
may temporarily change the above parameters multiple
times. Typically, one OS takes very little time (5 sec-
onds in most cases, or no more than 20 seconds in all
of our experiments) to reach the stable stage. More im-
portantly, most of the time we ﬁngerprint the OS, it is
already in stable stage. Therefore, including the OS pa-
rameters collected at the unstable stage in the signature
would create a lot of negative noises. This might make
our ﬁngerprinting result less accurate, because UFO can
make mistake by using unstable parameters of other OS
when considering all the matching results.
For this reason, we separate the signature into two
parts:
one includes only parameters of stable stage,
and the other includes the parameters of unstable stage.
When matching the OS parameters against the signature,
we report both results of matching stable and unstable
parameters. The users can decide what is the good re-
sult, because they might know which stage the OS is in
at that time. (For example, all the virtual machine man-
agement tools let administrator know how long their VM
already run).
We distinguish the parameters of stable and unstable
stage thanks to the time recorded with all the parameters,
as presented above. We simply deﬁne that parameters
recorded after 60 seconds from when we start proﬁling
the OS are stable, and all the parameters happened be-
fore that are of unstable stage. The time of 60 seconds is
chosen based on our experiments, which makes sure that
all the OS-es when proﬁling are already in stable mode
at that time. This number does not really matter, as long
as no stable parameters are missed during proﬁling.
The signature is presented in a JSON-like format [2],
so it is human-friendly, easy to understand and modify.
The database includes all the signatures in text format.
Figure 1 in the appendix shows a signature of the 32-bit
Linux kernel, version 2.6.31.x.
To prove that UFO is independent of hypervisors, we
implemented it for two hypervisors: Xen and Hyper-V.
The only difference between these two implementations
is the way to retrieve the OS parameters from guest VM.
Both Xen and Hyper-V provide interface to retrieve the
OS parameters ([11], [13]). UFO runs inside the host
VM, and retrieves the OS parameters from the targeted
VM via an appropriate hypervisor interface. It matches
these parameters against signatures using the matching
algorithm proposed in the section 3.3 above. A special
case is the feature parameters: UFO extracts the features
from the MSR-EFER register of the VM.
5
Evaluation
Evaluation against various OS-es available shows that
UFO is extremely fast: it takes around only 20 millisec-
onds to ﬁngerprint the VM, regardless of OS. The time
spent includes the time to retrieve the OS parameter val-
ues from the VM, parsing the signature database, loading
them into the memory to prepare for matching step, and
match the OS parameters against all the signatures avail-
able in the memory.
So far, the signature database of contains 23 OS vari-
ants, ranging from popular OS such as Windows, Linux,
*BSD, Solaris, Plan9, Haiku,... to hobby and research
OS-es such as Syllabale, Aros, Minix, ReactOS, Plan9,
etc... A lot of versions of these OS-es are supported, too.
Totally, UFO succesfully recognizes around 50 OS ver-
sions.
In our experiments, UFO identiﬁes the OS variant with
100% accuracy. If it cannot give out the exact OS ver-
6
sion, UFO can report a range of versions for the answer.
For example, because Linux kernels from version 2.6.22
to 2.6.29 are similar in their signatures, this range of ver-
sions will be reported.
In the case UFO cannot identify the OS due to the
missing signature, it can still give out the best match OS-
es, which has the highest score. In all of our experiments,
the answer is always the closest OS versions. For ex-
ample, UFO reports Windows Vista as an OS that best
matches with Windows XP-SP3. This is because Vista
matches 11 out of 12 parameters of Windows XP-SP3
signature, thus it is 91.66% similar to Windows XP-SP3.
6
Discussion
This paper handles the security threat as in cloud enviro-
ment: we assume that the hypervisor is secure, and can-
not be breached from inside the guest VM. Meanwhile,
the attacker might completely controls the guest, and can
employ some tricks to defeat UFO to make the ﬁnger-
printing result incorrect. For example, even if the OS
does not support NX feature, he can dynamically manip-
ulate the kernel to enable the ﬂag in MSR EFER to fool
UFO. Ultimately, for the OS with source code available,
he can modify the code, recompiles then replace the ker-
nel to completely change all the OS parameters.
For the small modiﬁcations to the OS, UFO can still
give a hint about the OS thanks to its fuzzy detection,
which is close in many cases. However, it can be com-
pletely fooled on large scale modiﬁcation.
Unfortu-
nately, this problem is hard to ﬁx due to the constraint
that we can only rely on the limited information collected
from outside, with available interface.
The other problem is that UFO is not always able to
give out the exact version of the OS: this happens be-
cause many OS versions do not change their parameters,
like in the Linux case above. We can ﬁx this problem
by combining it with memory introspection method. In
principle, we can use UFO in preliminary phase to recog-
nize the OS variant, then conﬁrm the exact version with
memory introspection. The later phase requires knowl-
edge about the OS internals, obviously.
7
Conclusions
UFO is a novel method of ﬁngerprinting OS running in-
side VM. Being designed speciﬁcally for VM environ-
ment, UFO can quickly identify the OS variants and
OS versions with excellent accuracy. The approach is
hypervisor-independent, and the OS signatures of UFO
can be reused for all kind of hypervisors.
References
[1] Ext2 installable ﬁle system for windows. http:
//www.fs-driver.org.
[2] JSON scheme format.
http://www.json.
org.
[3] F. Bellard.
Qemu, a fast and portable dynamic
translator. In Proc. USENIX Annual Technical Con-
ference, FREENIX Track, 2005.
[4] M. Christodorescu,
R. Sailer,
D. L. Schales,
D. Sgandurra, and D. Zamboni. Cloud security is
not (just) virtualization security. In ACM workshop
on cloud computing security (CCSW), 2009.
[5] Fyodor. nmap - free security scanner for network
exploration and security audits. http://nmap.
org.
[6] T. Garﬁnkel and M. Rosenblum. A virtual machine
introspection based architecture for intrusion detec-
tion. In Proc. Network and Distributed Systems Se-
curity Symposium, February 2003.
[7] R.
W.
Jones.
Explore
the
windows
reg-
istry
with
libguestfs.
http://rwmj.
wordpress.com/2009/06/08/
explore-the-windows-registry-with-libguestfs.
[8] R.
W.
Jones.
virt-inspector.
http:
//libguestfs.org/virt-inspector.
1.html.
[9] Microsoft Corp.
Windows server 2008 r2:
Virtualization with hyper-v.
http://www.
microsoft.com/windowsserver2008/
en/us/hyperv-main.aspx.
[10] Microsoft
Support.
Virus
alert
about
win32/conﬁcker worm.
http://support.
microsoft.com/kb/962007.
[11] MSDN.
Windows
driver
kit:
Hyper-
visor
hypervisor
c-language
functions.
http://msdn.microsoft.com/en-us/
library/bb969818.aspx.
[12] G. Prigent, F. Vichot, , and F. Harrouet. Ipmorph
: Fingerprinting spooﬁng uniﬁcation.
In Proc.
SSTIC, June 2009.
[13] Xen project. Xen interface. http://www.xen.
org/files/xen_interface.pdf.
[14] Xen project. Xen virtual machine monitor. http:
//www.xen.org.
7
[15] F. Yarochkin, O. Arkin, M. Kydyraliev, S.-Y. Dai,
Y. Huang, and S.-Y. Kuo. Xprobe2++: Low vol-
ume remote network information gathering tool.
In Proc. International Conference on Dependable
Systems and Networks, July 2009.
8
Appendix
An OS signature is put inside a pair of opening and closing parentheses. The numbers are in hexadecimal mode, and
each line denotes an OS parameter. All the text on the same line, after the sharp mark (#) is comment, and will be
ignored. Each parameter might have multiple values, all is put inside a pair of square brackets. For those parameters
having more than one attribute (like segment parameters, or TR), all the attributes of a value are also put inside another
pair of square brackets. The attributes of segment parameters are in the order of selector, base and limit. The attributes
of TR parameters are in the order of selector and limit. The postﬁx of segment attributes is represented with a ’*’
letter: in below example, segment GS in ring 3 (gs3 parameter) has the base of modulo 16, represented by the postﬁx
*0.
{
# Begin a signature with ’{’
name: Linux,
# OS name
version: 2.6.31.x,
# OS version
stable: {
# Begin of stable parameters
idt:
[7ff],
gdt:
[ff],
tr:
[[80, 206b]],
cs0:
[[60, 0, ffffffff]],
cs3:
[[73, 0, ffffffff]],
ds0:
[[0, 0, ffffffff]],
ds3:
[[7b, 0, ffffffff]],
es0:
[[0, 0, ffffffff]],
es3:
[[7b, 0, ffffffff]],
fs0:
[[d8, *, ffffffff], [0, 0, 0]],
gs3:
[[33, *0, ffffffff]],
ss0:
[[68, 0, ffffffff]],
ss3:
[[7b, 0, ffffffff]],
features: [nx, fast-syscall]
},
# End of stable parameters
unstable: {
# Begin of unstable parameters
idt:
[0, 3ff],
gdt:
[30, 27, 1f],
cs0:
[[10, 0, ffffffff]],
ss0:
[[18, 0, ffffffff], [0, 0, ffffffff]]
}
# End of unstable parameters
}
# End a signature with ’}’
Figure 1: The signature of 32-bit Linux kernel, version 2.6.31.x
9