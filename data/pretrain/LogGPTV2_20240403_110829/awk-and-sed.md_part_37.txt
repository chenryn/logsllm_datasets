，从你不理解的那部分程序代码开始进行删除。然后
，我们能够将 pagenums.idx 程序的输出结果捕获到
一个好的建议就是将你的核心程序用“防
- 277 -
“%#，
第十章 
，来临时注释掉这些行。
看它们是否真的有问
“底部抽屉”
），那么
大括号
路
。
---
## Page 260
找的项，则打印这个记录，也就是一段。这个方法可用来查询用空行作为段的
列。思路是将文档作为一系列多行记录来读取，如果记录中的字段包含了要
Dale认为他应编写一个查询程序，用于在一段中查询一个单词或一个单词序
超过这些约束将使脚本产生无法预测的问题。在编写本书的第一版的例子中，
定
对于数值型数据项，awk 使用双精度型，浮点型数据的长度限制由机器的结构
注意：和表10-1中的数据不同的是，经验表明大多数awk允许打开的管道数
打开的管道数
字面字符串中的字符个数
每个printf 字符串的字符个数
每个字段的字符个数
每个输出记录的字符个数
每个输入记录的字符个数
表10-1：约束
实现工具的约束，但对大多数系统都是一个好的参考值。
在任何 awk 实现中都有固定的约束。惟一的麻烦是它们的文档很少介绍它们。
打
字
项目
约束
处理它。
则
如何完成程序之前先考虑它将被用来做什么以及用户将会遇到什么问题。否
员则必须按客户的要求来编写。简单地说，
的。一方面，防御程序是很耗费时间和乏味的。另一方面，作为业余的编程人
它们具有专业的质量是没有必要的。因此，
而不是解决许多不同用户遇到的一系列问题。因为这些程序的这种特点，要求
每
员
开的文件数
符类中的字符个数
个记录中字段的个数
川，了解脚本工作的实际情况（即使是很小的设置环境）就足够了而且有时间
，我们可以自由地按我们希望的实现方式编写程序；作为一个专业的编程人
决
大
于1。
QQ群：
50192241
- 278 -
约束
如果你是为别人编写程序，在考)
，编写100%的用户层程序是没有必要
3000
100
第十章
“底部抽屉”
查
虑
---
## Page 261
而下面的这个脚本能工作：
注6:
这个讨论是由 4.2BSD 用户发现下面 shelI脚本的执行失败而引起的：
几年以前
你可以写
是将下面一行作为shelI脚本的第一行（注6）：
UNIX 系统中，但在老的 System V系统中没有发现。运用这个语法的最好方法
shell脚本的命令行中指定 awk 的参数和文件名。
“#!”语法是从 shell脚本中调用 awk 的可选的语法。
使用#!语法调用 awk
本的 sed 对替换（s）命令数的限制是99或100。）
和命令行中记录的最大长度，作为避开默认限制的应急办法。
BellLabs awk 的当前版本有两个选项：-mfN 和-mrN，
范围，当然记录可以比3000个字符长。这些版本允许打开更多的文件和管道。
段（实际上，
时，程序产生了中断，
分界的邮件文件。这个程序对小的测试文件起作用。但是，在处理大的文件
文
注
“#!”
（sed实现也有它的限制，这些没有在文档中说明。实践表明，大多数UNIX版
比
件中一样被执行。
意
，将没有特殊的出错信息来提示你当前记录的长度问题。
#!/bin/awk
#!/bin/awk -f
#!/bin/awk 
 print $1
脚本周围不必使用引号。在第一行后面的所有行都能够像在单独的脚本
print $1
后面跟的是所用的 awk 所在的路径名，然后是-f选项。在这一行之后，
前
注意所使用的路径名依赖于系统。
，文件中包含一个内置的邮件信息，其中空行以“>”为前缀）。
QQ群：
因为程序遇到了一个超过输入记录最大值 3000个字符的
50192241
要确保记录的长度没有超过 3000个字符。
- 279 -
“#!”语法可以用在现代
第十章 
它的优点是你可以在
用于设置字段的最大数
“底部抽屉”
另
因
---
## Page 262
第十二章将要介绍的 masterindex,就是使用“#!”语法来调用 awk。如果你的
这使我们省去了必须将“$1”作为一个 shelI变量，并在 shel脚本中将它作
可以按下面所示方式调用这个程序：
假设我们有一个测试文件，
话说，
注意：
它将和输入下面的语句一样来执行：
然后输入下面的命令：
如果将程序改为添加-f选项，如下所示：
的名字是“myscript”，那么第一个脚本将按下面语句执行：
例如，
没有给出脚本，所以 awk 产生一个语法出错信息。换句话说，如果 shelI脚本
（C 中的 argv[1]）传递，而 awk 将它作为输入文件而不是脚本文件解释。因为
绍他们的解释。
我们看到的这两个情况是由 Chris Torek 和 Guy Harris 发现的，
“#!”
$ myscript n=4 myfile 
/bin/awk -f myscript myfile
$ myscript myfile 
#!/bin/awk 
 /bin/awk myscript
/bin/awk 
#!/bin/sh 
 print $1*n ]
 print $1 }
我们通过改变 awk 样本脚本来传递参数n:
你可以通过调用 shell脚本的命令行来给awk 传递参数。
语法允许你创建 shell脚本,
shell处理，因此不能包含任意shell构件。
在“#!”行只能有一个参数。这行将由UNIX 内核来处理，而不是由
QQ群：
’【print $1 }′
第一个脚本执行失败是因为它将脚本的文件名作为第一个参数
-f
50192241
在它的第一个域中包含一个可以被n乘的数，我们
：来将命令行参数透明地传递给 awk。换句
第十章 
“底部抽屉”
我们将概括介
---
## Page 263
补充例子。
第十三章“脚本的汇总”给出了许多用户提供的程序，提供了如何编写程序的
别。第十二章介绍两个大而复杂的应用程序：文档拼写检查程序和索引程序。
我们已经涵盖了awk程序设计语言的所有功能。
介绍了调试awk脚本的一些笨拙的技术。
好的，
单引号，并用“$*”
规
的
范，
接口，
偶尔提了一些 awk实用工具。
我们已经清楚了底部抽屉。
调用其他实
QQ群：
实用工具，
”来结束脚本，
，可以将脚本中的“#!”删除，
50192241
打开和关闭文件，
本章的许多内容关系到 awk 与 UNIX操作系统
这样就扩展到 she命令行的所有参数。
281
在下一章将介绍不同的 awk 版本之间的区
我们集中介绍了awk 的 POSIX
以及使用管道。而且，我们也
，在整个脚本两端添加一对
第十章 
“底部抽屉”
---
## Page 264
定的。对于不能使用变量作为正则表达式这一问题，可以通过将一个
不能将一个变量的值作为布尔模式。
将变量值作为布尔模式
版本的 awk 中出现。你必须求助于普通的 if-else 语句。
在C语言中，
C语言的条件表达式
在老版本的 awk 中没有求幂（使用^、^=、**和**=操作符）计算。
在
求幂
数UNIX销售商添加了“\b”，
转义序列
么功能。
的描述。几年来，UNIX销售商们已经增强了我们的原始的 awk 版本，
在
你
在下面的每节中，
原始的 awk
最后，我们来讨论 awk 的3个商业版。
的这些已经扩展为 POSIX标准。先从讨论3个版本的共同特点开始。
我们还将介绍3个版本，这些版本的源代码是可以免费使用的。所有
以及介绍过的功能，
首
版
原始的awk 中很难动态使用模式，因为当解释脚本时它们必须是国
伪动态正则表达式
而必须用一个比较表
flag I print"...
在原始的V7，
只需要编写一个小的测试程序来检测老的 awk 有什么功能或没有什
先，
本章内容
本，
?
可免费使用的 awk
原始的 awk
我们将讨论 awk 原始的 V7版本。awk 原始版本中缺少很多我们
即它们具有或不具有哪些功能，以及如何得到它们。
后
商业版 awk
记
、三元条件表达式“expr1？expr2：expr3”没有在老
 awk 中只有“\t”，
QQ群：
，我们将对原始 awk 与 POSIX awk 之间的区别做简单
，因此这一届主要介绍它没有的哪些功能。其次，
表达式来代替。
50192241
本章中，
讨论了 POSIX awk,
?
“\r”
“\n”
，我们将重点讨论可用的不同 awk
“””
awk 的系列产品
偶尔介绍了一些可能
第十一章
，和“!”。
第十一章
awk 的系列产品
，大多
固
---
## Page 265
在原始的 awk 中没有提供从数组中删除一个元素的方法。你所能做的
除非你不能使用正则表达式。
字段的分隔在老版本的 awk 中和现代的 awk 中其工作方式是一样的，
字段的分隔
另外，如果有 BEGIN和 END 过程，则必须分别出现在程序的开始处和
出 awk。
令行中给出/dev/null作为一个数据文件参数，或使用exit 来强制退
BEGIN过程，然后继续处理输入，即使没有模式处理语句。可以在命
表达式语法，
表达式“$[search:-.*}”告诉 shell如果 search 有定义则使用
此，awk 看不到 shell变量并将它作为字符常量来处理。
以识别awk 变量，我们先用单引号，
这个脚本的第一行在调用 awk 之前定义了一个变量。
shell变量输入到 awk 程序中来解决。ShelI 变量的值将被 awk 解释 
数组
末
过程，awk将在执行完该过程后退出。
在 POSIX
控制流
没有给出参数，
search 的值；如果没有定义，
参
能
下
注
为
能，我们可以很容易地为变量指定默认值，如果用户没有给出命令行
数。
面是使用 Bourne shell变量替换功能的另一个示例。使用这一功
1:
一个常量。
#给awk search变量赋给shell的$1
m
#l/bin/sh
联。这种技巧在第六章已经使用过了。
及更多的单引号引住的文本，来产生更大的引用文本的级
awk 中，
实际上,
用于指定任意字符组成的字符串；因此，如果在命令行
下面一个例子：
QQ群:
，将打印所有的记录。因为整个模式都包含在双引号
，如果一个程序只有一个BEGIN过程，并没有其他的
，这是单引号引住的文本和双引号引住的文本，
50192241
就用“.*”的值。这里，
- 283 -
，原始的 awk 则不同，
。
第
十-
为了使shel|可
章
“.*”是正则
它将执行
awk 的系列产品
以
---
## Page 266
表 11-2：原始的 awk 中的内置算术函数
表 11-2概括了这些算术函数。
一个数值型值。
有些内置函数被归为算术函数。它们大多输入一个数值型参数并返回
substr (s, p, n)
expr)
sprintf（“fmt"
sep)
split (a, S,
length (s)
index (s,t)
awk 函数
表11-1：原始的awk中的内置字符串函数
原始的 awk中只有有限的几个内置字符串函数（参见表11-1），
见下面的内容）。getline 的其他形式都是不可用的。
在原始的 V7 awk 中没有 getline 函数。
getline函数
函数
同样，在原始的 awk 中 in不是一个操作符，你不能用if（item in
序代码以忽略数组中值为空的元素。
最好的工作就是将一个空字符串，赋给不需要的数组元素，并修改程
的
不
输入流中读取下一个记录，并设置$O、NF和NR（这里没有FNR，参
能使用 getline。某些销售商有 getline 的最简单形式，它从普通
二
(item
break
process array[item]
QQ群：
searchkey)
50192241
度
返回字符串 s 中从位置p 开始最大
为 expr 使用 printf 格式规范
为数组a的元素，返回元素的个数。
使用字段分隔符 sep 将字符串 s 分解
符串时返回$O 的长度
返回字符串 s 的长度，
描述
回