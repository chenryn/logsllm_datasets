purposely throw exceptions inside their inner drawing
functions, and allowing new code to catch old code ex-
ceptions (or vice versa) requires patching type lookups
(as before) and stack walking.
Return Transitions.
Although Figure 3 does not il-
lustrate state transitions for return instructions, the IRE
does perform state correction for them. Unlike the tran-
sitions in Figure 3 (which rely on the current IRE state
to determine a new state), method returns simply re-
store the IRE state from before the matching invocation.
This is tracked by a stack implemented in the IRE which
pushes the current IRE state before invoking a method
and pops/restores that IRE state upon the method’s re-
turn. This behavior is seen in Line 12 in Figure 4. Before
the invocation of getClipBounds (Line 11), the IRE is
in state γ . Function getClipBounds executes in state
α , and upon its return the IRE pops state γ from the
stack and restores that state prior to executing Line 12.
Another notable simpliﬁcation of the IRE’s design is
that it is sufﬁcient to only perform state correction at
function invocations, returns, and ﬁeld accesses.
Intu-
itively, this is because other “self-contained” instructions
(e.g., mathematical operations) do not require support
from the runtime. But another advantage is that state-
interleaving tends to occur after bunches of instructions.
Our evaluation shows that on average 10.24 instructions
in a row will cause loop-back transitions before a state
correction is needed. Further, many functions execute
entirely in state α or δ because no data from the other
environment enter those functions.
Native Execution. The IRE operates on the Java byte-
code instructions of the functions marked for selective
reanimation. However, it is possible that app develop-
ers utilize the Java Native Interface (JNI) to implement
some of their app’s functionality in native C/C++ code.
Further, the Android framework heavily uses JNI func-
tions. When the IRE observes an invocation of a C/C++
function, it follows the same state transitions deﬁned in
Figure 3 (i.e., new code only invokes new C/C++ func-
tions and vice versa).
Luckily, due to the tightly controlled interaction be-
tween C/C++ functions and the Java runtime data, the
IRE’s state correction can be further simpliﬁed. To
access data or invoke methods from the Java runtime,
C/C++ functions must use a set of helper functions de-
ﬁned by the Java runtime. The IRE hooks these func-
tions and checks if the data or method being requested
is in the old or new context. The IRE can then prop-
erly patch the helper function’s return value and allow
the C/C++ function to execute as intended. Note that, be-
cause all the target app’s native code and data segments
have been mapped back to their original addresses, all
pointers (code and data) in those segments remain valid.
Lastly, although the IRE executes app-speciﬁc code,
it does so on a syntactic basis without understanding the
code’s semantics, hence maintaining RetroScope’s app-
agnostic property.
3.3 Escaping Execution and Data Accesses
To monitor and interleave the target app’s reanimation,
the IRE must accurately track the current state of the ex-
ecution environment. However, due to the relative com-
plexity of Android apps, it is possible that the target app’s
control ﬂow causes the IRE to miss a state transition, po-
tentially failing to correct the execution environment de-
spite the actual execution being in a different state. We
call such missed state transitions escaping execution or
escaping data accesses.
Escaping Execution. This occurs when the target app’s
reanimation invokes a function but the IRE is unable to
determine which context to transition to. This is primar-
ily due to the invocation of a static method which exists
in both the old and new environments — leading to an
ambiguous state-transition, where the IRE does not have
USENIX Association  
25th USENIX Security Symposium  1143
sufﬁcient information at the function invocation site to
determine which state ( α or δ ) to transition to. Sim-
ply put, the IRE must discover if the execution intended
to invoke the old or new method. To decide that, the IRE
performs a simple data ﬂow analysis on each version. If
the method writes data to a static variable, then the IRE
always invokes the method in state α , otherwise the IRE
keeps the same state that the method was invoked by (to
avoid an unnecessary transition). This ensures that any
accesses to static values which exist in both old and new
environments are always directed to the new one. Note
that app-deﬁned static variables will only exist in the old
environment, and thus their accesses do not lead to am-
biguous transitions.
Escaping Data Accesses. This occurs when an app im-
plements a non-standard means of accessing an object’s
ﬁelds. For example, the two most common causes of es-
caping data accesses we observed are: (1) C/C++ code
using a hard-coded Java object layout to access an ob-
ject’s ﬁelds and (2) old Java code which has cached an
old version of an object which RetroScope is trying to re-
place with a new version (e.g., some Views will save and
reuse a reference to the previously drawn on Canvas).
Although escaping data accesses are caused by app im-
plementation differences, they can be handled uniformly
by the IRE.
Escaping data accesses caused by Java code can be
identiﬁed automatically when the ﬁelds of the object are
accessed incorrectly. For example, there should not exist
any old Canvas objects during selective reanimation and
thus the IRE will identify its ﬁeld accesses and replace
the object with the new instance. Escaping data accesses
caused by C/C++ code are handled by preventing C/C++
code from directly accessing Java objects. Instead, the
IRE requires all pointers to Java objects to be encoded
before they are given to C/C++ code. These pointers can
be decoded when they are used in the standard JNI ﬁeld
access helper functions, but will cause a segmentation
fault when dereferenced erroneously. This segmentation
fault can then be handled by RetroScope to patch the ﬁeld
access with the appropriate JNI helper function. In fact,
support for encoded/decoded JNI pointers already exists
but may be avoided in Android, so the IRE only needs
to require that all JNI pointers are encoded/decoded and
handle the segmentation fault for those that previously
avoided this functionality.
4 Evaluation
HTC One, and LG G3)3 as evidentiary devices. On each
phone, we installed and interacted with 15 different apps
to cause the generation, modiﬁcation, and deletion of as
many screens as possible. The interactions took an av-
erage of 16 minutes per app, and we installed and in-
teracted with the apps on each phone at random times
over a 4-day period. Then, for each phone, we waited
60 minutes for any background activity of the 15 apps to
complete, after which we took a memory image from the
phone (as described in Appendix A).
The set of 15 apps was chosen to represent both typ-
ical app categories (to highlight RetroScope’s generic
applicability) and diverse app implementation (to eval-
uate the robustness of RetroScope’s selective reanima-
tion). Based on the importance of personal commu-
nication in criminal investigations, we included Gmail,
Skype, WeChat, WhatsApp, TextSecure (also known as
Signal, notable for its privacy-oriented design which lim-
its evidence recovery [4]), Telegram (whose encrypted
broadcast channels are popular with terrorist organiza-
tions [3]), and each device’s default MMS app (imple-
mented by the device vendor). We also included the two
most popular social networking apps: Facebook (known
for its highly complex/obfuscated implementation) and
Instagram. Finally we consider several apps which, by
nature, display sensitive personal information: Chase
Banking, IRS2Go (the ofﬁcial IRS mobile app), My-
Chart (the most popular medical record portfolio app),
Microsoft Word for Android, and the vendor-speciﬁc
Calendar and Contacts/Recent Calls apps.
We then used RetroScope to recreate as many pre-
vious app screens as still exist in the memory images
of the 45 (15 × 3) apps. The recovery results are re-
ported in Table 1. Table 1 presents the device and app
name in Columns 1 and 2, respectively. Column 3
shows the ground-truth number of screens that Retro-
Scope should recover, and Column 4 reports the number
of screens recovered. Columns 5 through 9 present sev-
eral metrics recorded over the selective reanimation of
all screen redrawing functions for each app: Column 5
shows the number of reanimated Java byte-code instruc-
tions, Column 6 reports the number of JNI invocations
(i.e., C/C++ functions invoked from Java code) observed,
and Columns 7 and 8 report the total number of newly al-
located Java objects and C/C++ structures that made up
the new screens. Column 9 shows RetroScope’s runtime
for each case.
Selective Reanimation Metrics. Table 1 provides in-
teresting insights into the complexity and scale of screen
redrawing via selective reanimation. From Table 1, we
learn that an average of 231,867 byte-code instructions
Evaluation Setup. Our evaluation of RetroScope in-
volved three Android phones (a Samsung Galaxy S4,
3These devices all run vendor-customized versions of Android
Kitkat (the most widely used Android version [17]).
1144  25th USENIX Security Symposium 
USENIX Association
Device
App
Expected #
of Screens
RetroScope
Recovery
Samsung S4
LG G3
HTC One
Calendar
Chase Banking
Contacts
Facebook
Gmail
Instagram
IRS2Go
MMS
Microsoft Word
MyChart
Skype
Telegram
TextSecure
WeChat
WhatsApp
Calendar
Chase Banking
Contacts
Facebook
Gmail
Instagram
IRS2Go
MMS
Microsoft Word
MyChart
Skype
Telegram
TextSecure
WeChat
WhatsApp
Calendar
Chase Banking
Contacts
Facebook
Gmail
Instagram
IRS2Go
MMS
Microsoft Word
MyChart
Skype
Telegram
TextSecure
WeChat
WhatsApp
8
9
5
6
5
7
5
3
3
4
6
6
4
3
7
7
8
5
7
6
5
6
6
4
3
6
6
6
4
7
6
11
3
6
6
3
5
4
3
6
9
4
7
5
6
8
9
5
6
5
7
5
3
3
4
6
7
4
3
8
7
8
5
7
6
5
6
6
4
3
5
6
6
5
8
6
11
3
5
6
3
5
4
3
6
9
4
8
5
6
Byte-Code
Instructions
259196
424336
199755
338195
188463
240139
195413
96856
211762
74213
236213
177973
145436