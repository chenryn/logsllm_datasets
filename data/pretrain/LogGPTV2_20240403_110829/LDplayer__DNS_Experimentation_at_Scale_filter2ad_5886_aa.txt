title:LDplayer: DNS Experimentation at Scale
author:Liang Zhu and
John S. Heidemann
LDplayer: DNS Experimentation at Scale
Liang Zhu
John Heidemann
USC/Information Sciences Institute
USC/Information Sciences Institute
ABSTRACT
DNS has evolved over the last 20 years, improving in security and
privacy and broadening the kinds of applications it supports. How-
ever, this evolution has been slowed by the large installed base
and the wide range of implementations. The impact of changes is
difficult to model due to complex interactions between DNS op-
timizations, caching, and distributed operation. We suggest that
experimentation at scale is needed to evaluate changes and facili-
tate DNS evolution. This paper presents LDplayer, a configurable,
general-purpose DNS experimental framework that enables DNS
experiments to scale in several dimensions: many zones, multi-
ple levels of DNS hierarchy, high query rates, and diverse query
sources. LDplayer provides high fidelity experiments while meet-
ing these requirements through its distributed DNS query replay
system, methods to rebuild the relevant DNS hierarchy from traces,
and efficient emulation of this hierarchy on minimal hardware.
We show that a single DNS server can correctly emulate multiple
independent levels of the DNS hierarchy while providing correct
responses as if they were independent. We validate that our system
can replay a DNS root traffic with tiny error (± 8 ms quartiles in
query timing and ± 0.1% difference in query rate). We show that
our system can replay queries at 87k queries/s while using only one
CPU, more than twice of a normal DNS Root traffic rate. LDplayer’s
trace replay has the unique ability to evaluate important design
questions with confidence that we capture the interplay of caching,
timeouts, and resource constraints. As an example, we demonstrate
the memory requirements of a DNS root server with all traffic run-
ning over TCP and TLS, and identify performance discontinuities
in latency as a function of client RTT.
CCS CONCEPTS
• Networks → Network experimentation; Network perfor-
mance analysis; Network measurement; Naming and address-
ing; Application layer protocols; Network simulations;
KEYWORDS
Domain Name System (DNS), experiments, trace replay, perfor-
mance
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
IMC ’18, October 31-November 2, 2018, Boston, MA, USA
© 2018 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-5619-0/18/10...$15.00
https://doi.org/10.1145/3278532.3278544
ACM Reference Format:
Liang Zhu and John Heidemann. 2018. LDplayer: DNS Experimentation
at Scale. In 2018 Internet Measurement Conference (IMC ’18), October 31-
November 2, 2018, Boston, MA, USA. ACM, New York, NY, USA, 14 pages.
https://doi.org/10.1145/3278532.3278544
1 INTRODUCTION
The Domain Name System (DNS) is critical to the Internet. It re-
solves human-readable names like www.iana.org to IP addresses
like 192.0.32.8 and service discovery for many protocols. Almost
all activity on the Internet, such as web-browsing and e-mail, de-
pend on DNS for the correct operations. Beyond name-to-address
mapping, DNS today has grown to play various of broader roles
in the Internet. It provides query engine for anti-spam [20] and
replica selection for content delivery networks (CDNs) [28]. DANE
(DNS-based Authentication of Named Entities) [17] provides ad-
ditional source of trust by leveraging the integrity verification of
DNSSEC [4]. The wide use and critical role of DNS prompt its
continuous evolution.
However, evolving the DNS protocol is challenging because it
lives in a complex ecosystem of many implementations, archaic
deployments, and interfering middleboxes. These challenges in-
creasingly slow DNS development: for example, DNSSEC has taken
a decade to deploy [24] and current use of DANE is growing but
still small [34]. Improvements to DNS privacy are needed [6] and
now available [18, 33], but how long will deployment take?
DNS performance issues are also a concern, both for choices
about protocol changes, and for managing inevitable changes in
use. There are a number of important open questions: How does
current server operate under the stress of a Denial-of-Service (DoS)
attack? What is the server and client performance when protocol
or architecture changes? What if all DNS requests were made over
QUIC, TCP or TLS? What about increasing DNSSEC key size?
Ideally measurement and models would guide these questions.
However, measurements captures only what is, not what might be,
and DNS models are challenging because of details of how caching
and optimizations interact across levels of the DNS hierarchy and
between clients and servers. It is also difficult to estimate perfor-
mance limits with DNS involving the kernel, libraries, applications,
and distributed services.
Definitive answers to DNS performance therefore require end-
to-end controlled experiments from data-driven trace replay. Experi-
ments enable testing different approaches for DNS and evaluating
the costs and benefits against different infrastructures, revealing
unknown constraints. Trace replay can drive these experiments
with real-world current workloads, or with extrapolated “what-if”
workloads.
Accurate DNS experiments are quite challenging. In addition to
the requirements of modeling, the DNS system is large, distributed,
and optimized. With millions of authoritative and recursive servers,
IMC ’18, October 31-November 2, 2018, Boston, MA, USA
L. Zhu et al.
it is hard to recreate a global DNS hierarchy in a controlled experi-
ment. A naive testbed would therefore require millions of separate
servers, since protocol optimizations cause incorrect results when
many zones are provided by one server. Prior DNS testbeds avoided
these complexities, instead studying DNSSEC overhead in a piece of
the tree [3] and query distribution of recursive servers [31]. While
effective for their specific topics, these approaches do not generalize
to support changing protocols, large query rates, and diverse query
sources across a many-level hierarchy.
In this paper, we present LDplayer, a configurable, general-purpose
DNS experimental framework that enables DNS experiments at
scale in several dimensions: many zones, numerous levels of DNS
hierarchy, large query rates, and diverse query sources. Our system
provides DNS researchers and operators a basis for DNS experi-
mentation that can further lead to DNS evolution.
Our first contribution is to show how LDplayer can scale to
efficiently model a large DNS hierarchy and playback large traces
(§2). LDplayer can correctly emulate multiple independent levels of
the DNS hierarchy on a single instance of DNS server, exploiting a
combination of proxies and routing to circumvent optimizations
that would otherwise distort results. Our insight is that a single
server hosting many different zones reduces deployment cost; we
combine proxies and controlled routing to “pass” queries to the
correct zone so that the server gives the correct answers from a set
of different zones. Emulating multiple zones on limited hardware is
a DNS-specific technique that goes beyond the prior systems that
replay general network traffic. To this framework we add a two-
level query replay system where a single computer can accurately
replay more than 87 k queries per second, twice as fast as typical
query rates a DNS root letter. Multiple computers can generate
traffic in parallel with minimal coordination overhead, potentially
scaling roughly linearly with compute power to much larger rates.
Second, the power of controlled replay of traces is that we can
modify the replay to explore “what if” questions about possible
future DNS evolution (§5), beyond just replaying existing traces
(§4). We demonstrate this capability with two experiments. We
explore how traffic volume changes (increasing by 31%) if all DNS
queries employ DNSSEC (§5.1). We also use LDplayer to consider
how server memory and client latency changes if all queries were
TCP and TLS instead of UDP. Other potential applications include
the study of server hardware and software under denial-of-service
attack, growth of the number or size of zones, or changes in hard-
ware and software. All of these questions are important operational
concerns today. While some have been answered through one-off
studies and custom experiments or analysis, LDplayer allows evalu-
ation of actual server software, providing greater confidence in the
results. For example, relative to prior studies of DNS over TCP [33],
our use of trace-replay provides strong statements about all as-
pects of server memory (15 GB for TCP and 18 GB for TLS) and
CPU usage with real-world implementation (§5.2), and discovers
previously unknown discontinuities in client latency.
The software of our system is publicly available at: https://ant.
isi.edu/software/ldplayer/
2 LDPLAYER: DNS TRACE PLAYER
We next describe our requirements, then summarize the architec-
ture and describe critical elements in detail.
2.1 Design Requirements
The goal of LDplayer is to provide a controlled testbed for repeatable
experiments upon realistic evaluation of DNS performance, with
the following requirements:
Emulate complete DNS hierarchy, efficiently: LDplayer must
emulate multiple independent levels of the DNS hierarchy and pro-
vide correct responses using minimal commodity hardware.
We must support many zones. It is not scalable to use separated
servers or virtual machines to host each zone because of hardware
limits and many different zones in a network trace. A single server
providing many zones of DNS hierarchy does not work directly,
because the server gives the final DNS answer straightly and skips
the round trip of DNS referral replies.
Replays do not leak traffic to the Internet: Experimental
traffic must stay inside the testbed, without polluting the Internet.
Otherwise each experiment could leak bursts of requests to the
real Internet, causing problems for the Internet and the experiment.
Resolving a single query will require interaction of multiple author-
itative DNS servers. For the Internet, leaks of replay from high-rate
experiments might stress real-world servers. For the experiment, we
need to control response times, and queries that go to the Internet
add uncontrolled delay and jitter.
Repeatability of experiments: LDplayer needs to support re-
peatable, controlled experiments. When an experiment is re-run,
the replies to the same set replayed queries should stay the same.
This reproducibility is very important for experiments that require
fixed query-response content to evaluate new transform in DNS,
such as protocol changes and new server implementations. With-
out building complete zone, the responses could change over time
when re-looked up. Some zones hosted at CDNs may have external
factors that influence responses, such as load balancing.
Controlled variations in traffic, when desired: Replay must
be able to manipulate traces to answer “what if” questions with
variations of real traffic. Since input is normally network traces
in some binary format (for example, pcap), the main challenge is
how to provide a flexible and user-friendly mechanism for query
modification. We also need to minimize the delay caused by query
manipulation, so that trace replay is fast enough to keep up with
real time.
Accurate timing at high query rates: LDplayer must be ca-
pable of replaying queries at fast rates, while preserving correct
timing, to reproduce interesting real-world traffic patterns for both
regular and under attack. However, both using a single host and
many hosts have challenges. Due to resource constraints on CPU
and the number of ports, a single host may not be capable to replay
fast query stream or emulate diverse sources. A potential solution
is to distribute input to different hosts, however, it brings another
challenge in ensuring the correct timing and ordering of individual
queries.
Support multiple protocols effectively: LDplayer needs to
support both connectionless (UDP) and connection-oriented (TCP
and TLS), given increasing interest in DNS over connections [33].
DNS Experimentation at Scale
IMC ’18, October 31-November 2, 2018, Boston, MA, USA
of the server to support large query rate and massive zones, with
routing configuration that redirects queries to the correct servers.
In LDplayer’s query mutator, we pre-process the trace so that
query manipulation does not limit replay times. We convert network
traces to human-readable plain text for flexible and user-friendly
manipulation. After necessary query changes, we convert the result
text file to a customized binary stream of internal messages for fast
query replay (§2.5). In principle, at lower query rates, we could
manipulate a live query stream in near real time.
In LDplayer’s query engine, we use a central controller to coor-
dinate queries from many hosts and synchronize the time between
the end queriers, so that LDplayer can replay large query rates accu-
rately. The query engine can replay queries via different protocols
(UDP, TCP or TLS) effectively. We distribute queries from the same
sources in the original trace to the same end queriers for replay, in
order to emulate queries from the same sources which is critical
for connection reuse (§2.6). LDplayer replays queries based on the
timing in the original trace without preserving query dependencies.
2.3 Synthesize Zones to Provide Responses
To support experiment repeatability and avoid leaking bulk experi-
mental DNS queries to the Internet, we build the zone files that drive
the experiment once and then reuse them in each experiment. We
build zones by replaying the queries, once, against the real-world
servers on the Internet and harvesting these responses.
One-time Queries to the Internet: We need to build a DNS
hierarchy that includes answers to all the queries that will be made
during replay. When emulating an authoritative server, we can often
acquire the zone from its manager, but when emulating recursive
servers we must recreate all zones that will be queried. (If any part
of hierarchy is missing, replayed queries may fail.) For example, if
.com delegation (NS records of .com) is missing in the root zone, a
recursive server will fail to answer all the queries for .com names
in experiments.
To build a DNS hierarchy that covers all queries, we send all
unique queries in the original trace to a recursive server with cold
cache and allow it to query Internet to satisfy each query. In this
case, the recursive server walks down the DNS hierarchy, querying
root servers, top-level domain (TLD) servers, and all other necessary