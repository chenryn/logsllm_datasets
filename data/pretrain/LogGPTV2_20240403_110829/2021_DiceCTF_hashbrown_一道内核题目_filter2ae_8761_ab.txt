                    temp->size = temp_entry->size;
                    temp->value = temp_entry->value;
                    resize_add(new_idx, temp, new_buckets);
                }
            }
        }
        if (!duplicate)
        {
            new_idx = get_hash_idx(request.key, new_size);
            temp = kzalloc(sizeof(hash_entry), GFP_KERNEL);
            if (!temp)
            {
                kfree(new_buckets);
                return INVALID;
            }
            temp_data = kzalloc(request.size, GFP_KERNEL);
            if (!temp_data)
            {
                kfree(temp);
                kfree(new_buckets);
                return INVALID;
            }
            if (copy_from_user(temp_data, request.src, request.size))
            {
                kfree(temp_data);
                kfree(temp);
                kfree(new_buckets);
                return INVALID;
            }
            temp->size = request.size;
            temp->value = temp_data;
            temp->key = request.key;
            temp->next = NULL;
            resize_add(new_idx, temp, new_buckets);
            hashmap.entry_count++;
        }
        resize_clean_old();
        hashmap.size = new_size;
        hashmap.threshold = new_threshold;
        hashmap.buckets = new_buckets;
        return (duplicate)?EXISTS:0;
    }
    static long add_key(uint32_t idx, uint32_t key, uint32_t size, char *src)
    {
        hash_entry *temp_entry, *temp;
        char *temp_data;
        if (size  MAX_VALUE_SIZE)
        {
            return INVALID;
        }
        temp_entry = kzalloc(sizeof(hash_entry), GFP_KERNEL);
        temp_data = kzalloc(size, GFP_KERNEL);
        if (!temp_entry || !temp_data)
        {
            return INVALID;
        }
        if (copy_from_user(temp_data, src, size))//将用户的数据拷贝到内核heap
        {
            return INVALID;
        }
        temp_entry->key = key;
        temp_entry->size = size;
        temp_entry->value = temp_data;
        temp_entry->next = NULL;
        if (!hashmap.buckets[idx])//这个可以说是一个全局chunk_pool
        {
            hashmap.buckets[idx] = temp_entry;
            hashmap.entry_count++;
            return 0;
        }
        else //如果对应的idx存在数据就加在它的后面 , 但是这样不是hashmap.buckets没有存chunk吗？
        {
            for (temp = hashmap.buckets[idx]; temp->next != NULL; temp = temp->next)
            {
                if (temp->key == key)
                {
                    kfree(temp_data);
                    kfree(temp_entry);
                    return EXISTS;
                }
            }
            if (temp->key == key)
            {
                kfree(temp_data);
                kfree(temp_entry);
                return EXISTS;
            }
            temp->next = temp_entry;
            hashmap.entry_count++;
            return 0;
        }
    }
    static long delete_key(uint32_t idx, uint32_t key)
    {
        hash_entry *temp, *prev;
        if (!hashmap.buckets[idx])//检测ptr
        {
            return NOT_EXISTS;
        }
        if (hashmap.buckets[idx]->key == key)//检测key
        {
            temp = hashmap.buckets[idx]->next;
            if (hashmap.buckets[idx]->value)
            {
                kfree(hashmap.buckets[idx]->value);
            }
            kfree(hashmap.buckets[idx]);
            hashmap.buckets[idx] = temp;
            hashmap.entry_count--;
            return 0;
        }
        temp = hashmap.buckets[idx];
        while (temp != NULL && temp->key != key)
        {
            prev = temp;
            temp = temp->next;
        }
        if (temp == NULL)
        {
            return NOT_EXISTS;
        }
        prev->next = temp->next;
        if (temp->value)
        {
            kfree(temp->value);
        }
        kfree(temp);
        hashmap.entry_count--;
        return 0;
    }
    static long update_value(uint32_t idx, uint32_t key, uint32_t size, char *src)
    {
        hash_entry *temp;
        char *temp_data;
        if (size  MAX_VALUE_SIZE)
        {
            return INVALID;
        }
        if (!hashmap.buckets[idx])//检测ptr
        {
            return NOT_EXISTS;
        }
        for (temp = hashmap.buckets[idx]; temp != NULL; temp = temp->next)
        {
            if (temp->key == key)
            {
                if (temp->size != size)//检测key 大小不相等才行
                {
                    if (temp->value)
                    {
                        kfree(temp->value);
                    }
                    temp->value = NULL;
                    temp->size = 0;
                    temp_data = kzalloc(size, GFP_KERNEL);
                    if (!temp_data || copy_from_user(temp_data, src, size))
                    {
                        return INVALID;
                    }
                    temp->size = size;
                    temp->value = temp_data;
                }
                else
                {
                    if (copy_from_user(temp->value, src, size))//大小相等直接更新
                    {
                        return INVALID;
                    }
                }
                return 0;
            }
        }
        return NOT_EXISTS;
    }
    static long delete_value(uint32_t idx, uint32_t key)
    {
        hash_entry *temp;
        if (!hashmap.buckets[idx])//ptr
        {
            return NOT_EXISTS;
        }
        for (temp = hashmap.buckets[idx]; temp != NULL; temp = temp->next)
        {
            if (temp->key == key)//key
            {
                if (!temp->value || !temp->size)//value  size 存在
                {
                    return NOT_EXISTS;
                }
                kfree(temp->value);
                temp->value = NULL;
                temp->size = 0;
                return 0;
            }
        }
        return NOT_EXISTS;
    }
    static long get_value(uint32_t idx, uint32_t key, uint32_t size, char *dest)
    {
        hash_entry *temp;
        if (!hashmap.buckets[idx])//ptr
        {
            return NOT_EXISTS;
        }
        for (temp = hashmap.buckets[idx]; temp != NULL; temp = temp->next)
        {
            if (temp->key == key)//key  
            {
                if (!temp->value || !temp->size)
                {
                    return NOT_EXISTS;
                }
                if (size > temp->size)//最多是相等
                {  
                    return INVALID;
                }
                if (copy_to_user(dest, temp->value, size))
                {
                    return INVALID;
                }
                return 0;
            }
        }
        return NOT_EXISTS;
    }
    #pragma GCC pop_options
    static int __init init_hashbrown(void)
    {
        major = register_chrdev(0, DEVICE_NAME, &hashbrown_fops);
        if (major < 0)
        {
            return -1;
        }
        hashbrown_class = class_create(THIS_MODULE, CLASS_NAME);
        if (IS_ERR(hashbrown_class))
        {
            unregister_chrdev(major, DEVICE_NAME);
            return -1;
        }
        hashbrown_device = device_create(hashbrown_class, 0, MKDEV(major, 0), 0, DEVICE_NAME);
        if (IS_ERR(hashbrown_device))
        {
            class_destroy(hashbrown_class);
            unregister_chrdev(major, DEVICE_NAME);
            return -1;
        }
        mutex_init(&operations_lock);
        mutex_init(&resize_lock);
        hashmap.size = SIZE_ARR_START;
        hashmap.entry_count = 0;
        hashmap.threshold = GET_THRESHOLD(hashmap.size);
        hashmap.buckets = kzalloc(sizeof(hash_entry *) * hashmap.size, GFP_KERNEL);
        printk(KERN_INFO "HashBrown Loaded! Who doesn't love Hashbrowns!\n");
        return 0;
    }
    static void __exit exit_hashbrown(void)
    {
        device_destroy(hashbrown_class, MKDEV(major, 0));
        class_unregister(hashbrown_class);
        class_destroy(hashbrown_class);
        unregister_chrdev(major, DEVICE_NAME);
        mutex_destroy(&operations_lock);
        mutex_destroy(&resize_lock);
        printk(KERN_INFO "HashBrown Unloaded\n");
    }
    module_init(init_hashbrown);
    module_exit(exit_hashbrown);
跳过一些无关的部分主要分析关键位置
下面是源码中定义的一些常量，后面就是菜单功能
    #define ADD_KEY 0x1337
    #define DELETE_KEY 0x1338
    #define UPDATE_VALUE 0x1339
    #define DELETE_VALUE 0x133a
    #define GET_VALUE 0x133b
定义了三个数据结构
    typedef struct 
    {
        uint32_t key;
        uint32_t size;
        char *src;
        char *dest;
    }request_t;
    struct hash_entry
    {
        uint32_t key;
        uint32_t size;
        char *value;
        struct hash_entry *next;
    };
    typedef struct hash_entry hash_entry;
    typedef struct
    {
        uint32_t size;
        uint32_t threshold;
        uint32_t entry_count;
        hash_entry **buckets;
    }hashmap_t;
    hashmap_t hashmap;
结构request_t用于与内核交互，后面的各种系统调用传递的参数都是这个
hash_entry是本设备维护的基本数据结构，就是每个kzalloc分配的基本结构
hashmap_t结构后面声明了一个全局变量，里面的buckets用来存放申请的内存cache
下面开始分析具体函数
######  init函数
    static int __init init_hashbrown(void)
    {
        major = register_chrdev(0, DEVICE_NAME, &hashbrown_fops);
        if (major < 0)
        {
            return -1;
        }
        hashbrown_class = class_create(THIS_MODULE, CLASS_NAME);
        if (IS_ERR(hashbrown_class))
        {
            unregister_chrdev(major, DEVICE_NAME);
            return -1;
        }
        hashbrown_device = device_create(hashbrown_class, 0, MKDEV(major, 0), 0, DEVICE_NAME);
        if (IS_ERR(hashbrown_device))
        {
            class_destroy(hashbrown_class);
            unregister_chrdev(major, DEVICE_NAME);
            return -1;
        }