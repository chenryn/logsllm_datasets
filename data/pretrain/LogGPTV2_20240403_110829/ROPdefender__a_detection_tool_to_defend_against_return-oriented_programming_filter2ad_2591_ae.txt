during program execution. In addition, we showed how to
handle various exceptional cases that can occur during pro-
gram execution in practice.
ROPdefender induces a performance overhead by a factor
of 2x which cannot be expected by time-critical applications.
Further, we need also protection against return address at-
tacks targeting the operating system that ROPdefender re-
lies on. However, we still need to have measures against
ROP without returns. Currently, we are working on coun-
termeasures against ROP attacks without returns and on a
countermeasure against ROP for embedded systems.
8. ACKNOWLEDGMENTS
We thank Hovav Shacham and Stephen Checkoway for the
fruitful discussions on return-oriented programming attacks
based on indirect jumps. The ﬁrst author was supported by
EU FP7 project CACE.
9. REFERENCES
[1] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti.
Control-ﬂow integrity: Principles, implementations,
and applications. In CCS ’05: Proceedings of the 12th
ACM Conference on Computer and Communications
Security, pages 340–353. ACM, 2005.
[2] M. Abadi, M. Budiu, U. Erlingsson, G. C. Necula, and
M. Vrable. XFI: software guards for system address
spaces. In OSDI ’06: Proceedings of the 7th symposium
on Operating systems design and implementation,
pages 75–88. USENIX Association, 2006.
[3] Adobe Systems. Security Advisory for Flash Player,
Adobe Reader and Acrobat: CVE-2010-1297.
http://www.adobe.com/support/security/
advisories/apsa10-01.html, 2010.
[4] Aleph One. Smashing the stack for fun and proﬁt.
Phrack Magazine, 49(14), 1996.
[5] Anonymous. Once upon a free(). Phrack Magazine,
57(9), 2001.
[6] blexim. Basic integer overﬂows. Phrack Magazine,
60(10), 2002.
[7] D. L. Bruening. Eﬃcient, transparent, and
comprehensive runtime code manipulation.
http://groups.csail.mit.edu/cag/rio/
derek-phd-thesis.pdf, 2004. PhD thesis, M.I.T.
[8] E. Buchanan, R. Roemer, H. Shacham, and S. Savage.
When good instructions go bad: Generalizing
return-oriented programming to RISC. In CCS ’08:
Proceedings of the 15th ACM Conference on Computer
and Communications Security, pages 27–38. ACM,
2008.
[9] B. Buck and J. K. Hollingsworth. An API for runtime
code patching. Int. J. High Perform. Comput. Appl.,
14(4):317–329, 2000.
[10] B. M. Cantrill, M. W. Shapiro, and A. H. Leventhal.
Dynamic instrumentation of production systems. In
Proceedings of USENIX 2004 Annual Technical
Conference, pages 15–28. USENIX Association, 2004.
[11] S. Checkoway, L. Davi, A. Dmitrienko, A.-R. Sadeghi,
H. Shacham, and M. Winandy. Return-oriented
programming without returns. In CCS ’10:
Proceedings of the 17th ACM Conference on Computer
and Communications Security, pages 559–572. ACM,
2010.
[12] S. Checkoway, A. J. Feldman, B. Kantor, J. A.
Halderman, E. W. Felten, and H. Shacham. Can
DREs provide long-lasting security? The case of
return-oriented programming and the AVC advantage.
In Proceedings of EVT/WOTE 2009, 2009.
[13] P. Chen, H. Xiao, X. Shen, X. Yin, B. Mao, and
L. Xie. DROP: Detecting return-oriented
programming malicious code. In A. Prakash and
I. Gupta, editors, Fifth International Conference on
Information Systems Security (ICISS 2010), volume
5905 of Lecture Notes in Computer Science, pages
163–177. Springer, 2009.
Q. Zhang. StackGuard: automatic adaptive detection
and prevention of buﬀer-overﬂow attacks. In SSYM’98:
Proceedings of the 7th conference on USENIX Security
Symposium, pages 63–78. USENIX Association, 1998.
[20] D. Dai Zovi. Practical return-oriented programming.
SOURCE Boston 2010, Apr. 2010. Presentation.
Slides: http://trailofbits.files.wordpress.com/
2010/04/practical-rop.pdf.
[21] L. Davi, A.-R. Sadeghi, and M. Winandy. Dynamic
integrity measurement and attestation: Towards
defense against return-oriented programming attacks.
In Proceedings of the 4th ACM Workshop on Scalable
Trusted Computing (STC’09), pages 49–54. ACM,
2009.
[22] T. Dullien, T. Kornau, and R.-P. Weinmann. A
framework for automated architecture-independent
gadget search. In Proceedings of the 4th USENIX
Workshop on Oﬀensive Technologies (WOOT), 2010.
[23] A. Edwards, A. Srivastava, and H. Vo. Vulcan binary
transformation in a distributed environment.
Technical Report MSR-TR-2001-50, Microsoft
Research, April 2001.
[24] A. Francillon and C. Castelluccia. Code injection
attacks on harvard-architecture devices. In CCS ’08:
Proceedings of the 15th ACM Conference on Computer
and Communications Security, pages 15–26. ACM,
2008.
[25] A. Francillon, D. Perito, and C. Castelluccia.
Defending embedded systems against control ﬂow
attacks. In Proceedings of the 1st Workshop on Secure
Execution of Untrusted Code (SecuCode’09), pages
19–26. ACM, 2009.
[26] M. Frantzen and M. Shuey. StackGhost: Hardware
facilitated stack protection. In SSYM’01: Proceedings
of the 10th conference on USENIX Security
Symposium, pages 55–66. USENIX Association, 2001.
[27] gera. Advances in format string exploitation. Phrack
[14] P. Chen, X. Xing, H. Han, B. Mao, and L. Xie.
Magazine, 59(12), 2002.
Eﬃcient detection of the return-oriented programming
malicious code. In Sixth International Conference on
Information Systems Security (ICISS 2010), volume
6503 of Lecture Notes in Computer Science, pages
140–155. Springer, 2010.
[15] T. Chiueh and F.-H. Hsu. RAD: A compile-time
solution to buﬀer overﬂow attacks. In International
Conference on Distributed Computing Systems, pages
409–417. IEEE Computer Society, 2001.
[16] T. Chiueh and M. Prasad. A binary rewriting defense
against stack based overﬂow attacks. In Proceedings of
the USENIX Annual Technical Conference, pages
211–224. USENIX Association, 2003.
[17] J. Clause, W. Li, and A. Orso. Dytan: A generic
dynamic taint analysis framework. In Proceedings of
the 2007 International Symposium on Software
Testing, pages 196–206, 2007.
[18] C. Cowan, S. Beattie, J. Johansen, and P. Wagle.
Pointguard TM: protecting pointers from buﬀer
overﬂow vulnerabilities. In SSYM’03: Proceedings of
the 12th conference on USENIX Security Symposium,
pages 91–104. USENIX Association, 2003.
[19] C. Cowan, C. Pu, D. Maier, H. Hintony, J. Walpole,
P. Bakke, S. Beattie, A. Grier, P. Wagle, and
[28] D. Goodin. Apple quicktime backdoor creates
code-execution peril. http://www.theregister.co.
uk/2010/08/30/apple_quicktime_critical_vuln/,
2010.
[29] S. Gupta, P. Pratap, H. Saran, and S. Arun-Kumar.
Dynamic code instrumentation to detect and recover
from return address corruption. In WODA ’06:
Proceedings of the 2006 international workshop on
Dynamic systems analysis, pages 65–72. ACM, 2006.
[30] J. Halliday. Jailbreakme released for apple devices.
http:
//www.guardian.co.uk/technology/blog/2010/aug/
02/jailbreakme-released-apple-devices-legal,
Aug. 2010.
[31] M. Howard and M. Thomlinson. Windows vista isv
security. http://msdn.microsoft.com/en-us/
library/bb430720.aspx, Apr. 2007.
[32] R. Hund, T. Holz, and F. C. Freiling. Return-oriented
rootkits: Bypassing kernel code integrity protection
mechanisms. In Proceedings of the 18th USENIX
Security Symposium. USENIX Association, 2009.
[33] Intel Corporation. Intel 64 and ia-32 architectures
software developer’s manuals. http:
//www.intel.com/products/processor/manuals/.
[34] Intel Parallel Studio. http://software.intel.com/
[48] K. Onarlioglu, L. Bilge, A. Lanzi, D. Balzarotti, and
en-us/intel-parallel-studio-home/.
[35] V. Iozzo and R.-P. Weinmann. Ralf-Philipp
Weinmann & Vincenzo Iozzo own the iPhone at
PWN2OWN. http://blog.zynamics.com/2010/03/
24/ralf-philipp-weinmann-vincenzo-iozzo-own-
the-iphone-at-pwn2own/, Mar 2010.
[36] jduck. The latest adobe exploit and session upgrading.
http://blog.metasploit.com/2010/03/
latest-adobe-exploit-and-session.html, 2010.
[37] V. Kiriansky, D. Bruening, and S. P. Amarasinghe.
Secure execution via program shepherding. In
Proceedings of the 11th USENIX Security Symposium,
pages 191–206. USENIX Association, 2002.
[38] T. Kornau. Return oriented programming for the
ARM architecture. http://zynamics.com/downloads/
kornau-tim--diplomarbeit--rop.pdf, 2009. Master
thesis, Ruhr-University Bochum, Germany.
[39] L. Le. Payload already inside: data re-use for ROP
exploits. In Black Hat USA, July 2010.
[40] J. Li, Z. Wang, X. Jiang, M. Grace, and S. Bahram.
Defeating return-oriented rootkits with ”return-less”
kernels. In Proceedings of the 5th European conference
on Computer systems, EuroSys ’10, pages 195–208.
ACM, 2010.
[41] F. Lindner. Developments in Cisco IOS forensics.
CONFidence 2.0. http://www.recurity-labs.com/
content/pub/FX_Router_Exploitation.pdf, Nov.
2009.
[42] C.-K. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser,
G. Lowney, S. Wallace, V. J. Reddi, and
K. Hazelwood. Pin: Building customized program
analysis tools with dynamic instrumentation. In PLDI
’05: Proceedings of the 2005 ACM SIGPLAN
conference on Programming language design and
implementation, pages 190–200. ACM, June 2005.
[43] Microsoft. Data Execution Prevention (DEP).
http://support.microsoft.com/kb/875352/EN-US/,
2006.
[44] Nergal. The advanced return-into-lib(c) exploits: PaX
case study. Phrack Magazine, 58(4), 2001.
[45] N. Nethercote. Dynamic binary analysis and
instrumentation.
http://valgrind.org/docs/phd2004.pdf, 2004. PhD
thesis, University of Cambridge.
[46] N. Nethercote and J. Seward. Valgrind: a framework
for heavyweight dynamic binary instrumentation.
SIGPLAN Not., 42(6):89–100, 2007.
[47] J. Newsome and D. Song. Dynamic taint analysis for
automatic detection, analysis, and signature
generation of exploits on commodity software. In
Proceedings of the Network and Distributed Security
Symposium, 2005.
E. Kirda. G-Free: defeating return-oriented
programming through gadget-less binaries. In
ACSAC’10, Annual Computer Security Applications
Conference, Dec. 2010.
[49] PaX Team. http://pax.grsecurity.net/.
[50] S. Ragan. Adobe conﬁrms zero-day - rop used to
bypass windows defenses. http://www.
thetechherald.com/article.php/201036/6128/,
2010.
[51] G. F. Roglia, L. Martignoni, R. Paleari, and
D. Bruschi. Surgically returning to randomized lib(c).
In Proceedings of the 25th Annual Computer Security
Applications Conference (ACSAC 2009). IEEE, 2009.
[52] H. Security. Pwn2Own 2009: Safari, IE 8 and Firefox
exploited. http://www.h-online.com/security/
news/item/Pwn2Own-2009-Safari-IE-8-and-Firefox
-exploited-740663.html, 2010.
[53] H. Shacham. The geometry of innocent ﬂesh on the
bone: Return-into-libc without function calls (on the
x86). In CCS ’07: Proceedings of the 14th ACM
Conference on Computer and Communications
Security, pages 552–561. ACM, 2007.
[54] H. Shacham, E. jin Goh, N. Modadugu, B. Pfaﬀ, and
D. Boneh. On the eﬀectiveness of address-space
randomization. In CCS ’04: Proceedings of the 11th
ACM Conference on Computer and Communications
Security, pages 298–307. ACM, 2004.
[55] S. Sinnadurai, Q. Zhao, and W. fai Wong. Transparent
runtime shadow stack: Protection against malicious
return address modiﬁcations. http://citeseerx.ist.
psu.edu/viewdoc/summary?doi=10.1.1.120.5702,
2008.
[56] Solar Designer. ”return-to-libc” attack. Bugtraq, 1997.
[57] A. Sotirov and M. Dowd. Bypassing browser memory
protections in Windows Vista.
http://www.phreedom.org/research/
bypassing-browser-memory-protections/, Aug.
2008. Presented at Black Hat 2008.
[58] SPEC Standard Performance Evaluation Corporation.
http://www.spec.org.
[59] Vendicator. Stack Shield: A ”stack smashing”
technique protection tool for Linux.
http://www.angelfire.com/sk/stackshield.
[60] P. Vreugdenhil. Pwn2Own 2010 Windows 7 Internet
Explorer 8 exploit. http://vreugdenhilresearch.nl/
Pwn2Own-2010-Windows7-InternetExplorer8.pdf,
2010.
[61] T. Wang, T. Wei, G. Gu, and W. Zou. TaintScope: A
checksum-aware directed fuzzing tool for automatic
software vulnerability detection. In Proceedings of the
31st IEEE Symposium on Security & Privacy
(Oakland’10). IEEE Computer Society, 2010.