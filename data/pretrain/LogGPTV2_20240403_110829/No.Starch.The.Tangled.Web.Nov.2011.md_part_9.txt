Content-Disposition—can be found on a page maintained by Julian Reschke:
http://greenbytes.de/tech/tc2231/.
Header Character Set and Encoding Schemes
Like the documents that laid the groundwork for URL handling, all subse-
quent HTTP specs have largely avoided the topic of dealing with non-US-
ASCII characters inside header values. There are several plausible scenarios
where non-English text may legitimately appear in this context (for example,
the filename in Content-Disposition), but when it comes to this, the expected
browser behavior is essentially undefined.
Hypertext Transfer Protocol 49
Originally, RFC 1945 permitted the TEXT token (a primitive broadly
used to define the syntax of other fields) to contain 8-bit characters, provid-
ing the following definition:
OCTET = 
CTL = 
TEXT = 
The RFC followed up with cryptic advice: When non-US-ASCII charac-
ters are encountered in a TEXT field, clients and servers may interpret them
as ISO-8859-1, the standard Western European code page, but they don’t
have to. Later, RFC 2616 copied and pasted the same specification of TEXT
tokens but added a note that non-ISO-8859-1 strings must be encoded using
a format outlined in RFC 2047,8 originally created for email communications.
Fair enough; in this simple scheme, the encoded string opens with a “=?” pre-
fix, followed by a character-set name, a “?q?” or “?b?” encoding-type indicator
(quoted-printable* or base64,† respectively), and lastly the encoded string itself.
The sequence ends with a “?=” terminator. An example of this may be:
Content-Disposition: attachment; filename="=?utf-8?q?Hi=21.txt?="
NOTE The RFC should also have stated that any spurious “=?...?=” patterns must never be
allowed as is in the relevant headers, in order to avoid unintended decoding of values
that were not really encoded to begin with.
Sadly, the support for this RFC 2047 encoding is spotty. It is recognized
in some headers by Firefox and Chrome, but other browsers are less cooper-
ative. Internet Explorer chooses to recognize URL-style percent encoding in
the Content-Disposition field instead (a habit also picked up by Chrome) and
defaults to UTF-8 in this case. Firefox and Opera, on the other hand, prefer
supporting a peculiar percent-encoded syntax proposed in RFC 2231,9 a
striking deviation from how HTTP syntax is supposed to look:
Content-Disposition: attachment; filename*=utf-8'en-us'Hi%21.txt
Astute readers may notice that there is no single encoding scheme sup-
ported by all browsers at once. This situation prompts some web application
developers to resort to using raw high-bit values in the HTTP headers, typi-
cally interpreted as UTF-8, but doing so is somewhat unsafe. In Firefox, for
example, a long-standing glitch causes UTF-8 text to be mangled when put
* Quoted-printable is a simple encoding scheme that replaces any nonprintable or otherwise illegal
characters with the equal sign (=) followed by a 2-digit hexadecimal representation of the 8-bit
character value to be encoded. Any stray equal signs in the input text must be replaced with
“=3D” as well.
† Base64 is a non-human-readable encoding that encodes arbitrary 8-bit input using a 6-bit alpha-
bet of case-sensitive alphanumerics, “+”, and “/”. Every 3 bytes of input map to 4 bytes of output.
If the input does not end at a 3-byte boundary, this is indicated by appending one or two equal
signs at the end of the output string.
50 Chapter 3
inthe Cookie header, permitting attacker-injected cookie delimiters to mate-
rialize in unexpected places.10 In other words, there are no easy and robust
solutions to this mess.
When discussing character encodings, the problem of handling of the
NUL character (0x00) probably deserves a mention. This character, used as a
string terminator in many programming languages, is technically prohibited
from appearing in HTTP headers (except for the aforementioned, dysfunc-
tional quoted-pair syntax), but as you may recall, parsers are encouraged to be
tolerant. When this character is allowed to go through, it is likely to have
unexpected side effects. For example, Content-Disposition headers are trun-
cated at NUL by Internet Explorer, Firefox, and Chrome but not by Opera
or Safari.
Referer Header Behavior
As mentioned earlier in this chapter, HTTP requests may include a Referer
header. This header contains the URL of a document that triggered the cur-
rent navigation in some way. It is meant to help with certain troubleshooting
tasks and to promote the growth of the Web by emphasizing cross-references
between related web pages.
Unfortunately, the header may also reveal some information about user
browsing habits to certain unfriendly parties, and it may leak sensitive infor-
mation that is encoded in the URL query parameters on the referring page.
Due to these concerns, and the subsequent poor advice on how to mitigate
them, the header is often misused for security or policy enforcement pur-
poses, but it is not up to the task. The main problem is that there is no way
todifferentiate between a client that is not providing the header because of
user privacy preferences, one that is not providing it because of the type of
navigation taking place, and one that is deliberately tricked into hiding this
information by a malicious referring site.
Normally, this header is included in most HTTP requests (and preserved
across HTTP-level redirects), except in the following scenarios:
 After organically entering a new URL into the address bar or opening a
bookmarked page.
 When the navigation originates from a pseudo-URL document, such as
data: or javascript:.
 When the request is a result of redirection controlled by the Refresh
header (but not a Location-based one).
 Whenever the referring site is encrypted but the requested page isn’t.
According to RFC 2616 section 15.1.2, this is done for privacy reasons, but
it does not make a lot of sense. The Referer string is still disclosed to third
parties when one navigates from one encrypted domain to an unrelated
encrypted one, and rest assured, the use of encryption is not synonymous
with trustworthiness.
 If the user decides to block or spoof the header by tweaking browser set-
tings or installing a privacy-oriented plug-in.
Hypertext Transfer Protocol 51
As should be apparent, four out of five of these conditions can be pur-
posefully induced by any rogue site.
HTTP Request Types
The original HTTP/0.9 draft provided a single method (or “verb”) for
requesting a document: GET. The subsequent proposals experimented
withan increasingly bizarre set of methods to permit interactions other
thanretrieving a document or running a script, including such curiosities
asSHOWMETHOD, CHECKOUT, or—why not—SPACEJUMP.11
Most of these thought experiments have been abandoned in HTTP/1.1,
which settles on a more manageable set of eight methods. Only the first two
request types—GET and POST—are of any significance to most of the mod-
ern Web.
GET
The GET method is meant to signify information retrieval. In practice, it
isused for almost all client-server interactions in the course of a normal
browsing session. Regular GET requests carry no browser-supplied payloads,
although they are not strictly prohibited from doing so.
The expectation is that GET requests should not have, to quote the RFC,
“significance of taking an action other than retrieval” (that is, they should
make no persistent changes to the state of the application). This requirement
is increasingly meaningless in modern web applications, where the applica-
tion state is often not even managed entirely on the server side; consequently,
the advice is widely ignored by application developers.*
NOTE In HTTP/1.1, clients may ask the server for any set of possibly noncontiguous or over-
lapping fragments of the target document by specifying the Range header on GET
(and, less commonly, on some other types of requests). The server is not obliged to comply,
but where the mechanism is available, browsers may use it to resume aborted downloads.
POST
The POST method is meant for submitting information (chiefly HTML
forms) to the server for processing. Because POST actions may have persis-
tent side effects, many browsers ask the user to confirm before reloading any
content retrieved with POST, but for the most part, GET and POST are used
in a quasi-interchangeable manner.
POST requests are commonly accompanied by a payload, the length of
which is indicated by the Content-Length header. In the case of plain HTML,
the payload may consist of URL-encoded or MIME-encoded form data (a for-
mat detailed in Chapter 4), although again, the syntax is not constrained at
the HTTP level in any special way.
* There is an anecdotal (and perhaps even true) tale of an unfortunate webmaster by the name
of John Breckman. According to the story, John’s website has been accidentally deleted by a
search engine–indexing robot. The robot simply unwittingly discovered an unauthenticated,
GET-based administrative interface that John had built for his site . . . and happily followed every
“delete” link it could find.
52 Chapter 3
HEAD
HEAD is a rarely used request type that is essentially identical to GET but
that returns only the HTTP headers, and not the actual payload, for the
requested content. Browsers generally do not issue HEAD requests on their
own, but the method is sometimes employed by search engine bots and other
automated tools, for example, to probe for the existence of a file or to check
its modification time.
OPTIONS
OPTIONS is a metarequest that returns the set of supported methods for a
particular URL (or “*”, meaning the server in general) in a response header.
The OPTIONS method is almost never used in practice, except for server
fingerprinting; because of its limited value, the returned information may
not be very accurate.
NOTE For the sake of completeness, we need to note that OPTIONS requests are also a corner-
stone of a proposed cross-domain request authorization scheme, and as such, they may
gain some prominence soon. We will revisit this scheme, and explore many other upcom-
ing browser security features, in Chapter 16.
PUT
A PUT request is meant to allow files to be uploaded to the server at the
specified target URL. Because browsers do not support PUT, intentional file-
upload capabilities are almost always implemented through POST to a server-
side script, rather than with this theoretically more elegant approach.
That said, some nonweb HTTP clients and servers may use PUT for their
own purposes. Just as interestingly, some web servers may be misconfigured
to process PUT requests indiscriminately, creating an obvious security risk.
DELETE
DELETE is a self-explanatory method that complements PUT (and that is
equally uncommon in practice).
TRACE
TRACE is a form of “ping” request that returns information about all the
proxy hops involved in processing a request and echoes the original request
as well. TRACE requests are not issued by web browsers and are seldom used
for legitimate purposes. TRACE’s primary use is for security testing, where it
may reveal interesting details about the internal architecture of HTTP serv-
ers in a remote network. Precisely for this reason, the method is often dis-
abled by server administrators.
Hypertext Transfer Protocol 53
CONNECT
The CONNECT method is reserved for establishing non-HTTP connections
through HTTP proxies. It is not meant to be issued directly to servers. If the
support for CONNECT request is enabled accidentally on a particular server,
it may pose a security risk by offering an attacker a way to tunnel TCP traffic
into an otherwise protected network.
Other HTTP Methods
A number of other request methods may be employed by other nonbrowser
applications or browser extensions; the most popular set of HTTP extensions
may be WebDAV, an authoring and version-control protocol described in
RFC 4918.12
Further, the XMLHttpRequest API nominally allows client-side JavaScript
to make requests with almost arbitrary methods to the originating server—
although this last functionality is heavily restricted in certain browsers (we
will look into this in Chapter 9).
Server Response Codes
Section 10 of RFC 2616 lists nearly 50 status codes that a server may choose
from when constructing a response. About 15 of these are used in real life,
and the rest are used to indicate increasingly bizarre or unlikely states, such
as “402 Payment Required” or “415 Unsupported Media Type.” Most of the
RFC-listed states do not map cleanly to the behavior of modern web applica-
tions; the only reason for their existence is that somebody hoped they even-
tually would.
A few codes are worth memorizing because they are common or carry
special meaning, as discussed below.
200–299: Success
This range of status codes is used to indicate a successful completion of a
request:
200 OK This is a normal response to a successful GET or POST. The
browser will display the subsequently returned payload to the user or
willprocess it in some other context-specific way.
204 No Content This code is sometimes used to indicate a successful
request to which no verbose response is expected. A 204 response aborts
navigation to the URL that triggered it and keeps the user on the origi-
nating page.
206 Partial Content This code is like 200, except that it is returned by
servers in response to range requests. The browser must already have a
portion of the document (or it would not have issued a range request)
and will normally inspect the Content-Range response header to reassem-
ble the document before further processing it.
54 Chapter 3
300–399: Redirection and Other Status Messages
These codes are used to communicate a variety of states that do not indicate
an error but that require special handling on the browser end:
301 Moved Permanently, 302 Found, 303 See Other This response
instructs the browser to retry the request at a new location, specified in
the Location response header. Despite the distinctions made in the RFC,
when encountering any of these response codes, all modern browsers
replace POST with GET, remove the payload, and then resubmit the
request automatically.
NOTE Redirect messages may contain a payload, but if they do, this message will
not be shown to the user unless the redirection is not possible (for example,
because of a missing or unsupported Location value). In fact, in some
browsers, display of the message may besuppressed even in that scenario.
304 Not Modified This nonredirect response instructs the client that
the requested document hasn’t been modified in relation to the copy the
client already has. This response is seen after conditional requests with
headers such as If-Modified-Since, which are issued to revalidate the browser
document cache. The response body is not shown to the user. (If the
server responds this way to an unconditional request, the result will be
browser-specific and may be hilarious; for example, Opera will pop up
anonfunctional download prompt.)
307 Temporary Redirect Similar to 302, but unlike with other modes
ofredirection, browsers will not downgrade POST to GET when follow-
ing a 307 redirect. This code is not commonly used in web applications,
and some browsers do not behave very consistently when handling it.
400–499: Client-Side Error
This range of codes is used to indicate error conditions caused by the behav-
ior of the client:
400 Bad Request (and related messages) The server is unable or unwill-
ing to process the request for some unspecified reason. The response pay-
load will usually explain the problem to some extent and will be typically
handled by the browser just like a 200 response.
More specific variants, such as “411 Length Required,” “405 Method
Not Allowed,” or “414 Request-URI Too Long,” also exist. It’s anyone’s
guess as to why not specifying Content-Length when required has a dedi-
cated 411 response code but not specifying Host deserves only a generic
400 one.
401 Unauthorized This code means that the user needs to provide
protocol-level HTTP authentication credentials in order to access the
resource. The browser will usually prompt the user for login information
next, and it will present a response body only if the authentication pro-
cess is unsuccessful. This mechanism will be explained in more detail
shortly, in “HTTP Authentication” on page62.
Hypertext Transfer Protocol 55
403 Forbidden The requested URL exists but can’t be accessed for
reasons other than incorrect HTTP authentication. Reasons may involve
insufficient filesystem permissions, a configuration rule that prevents
this request from being processed, or insufficient credentials of some
sort (e.g., invalid cookies or an unrecognized source IP address). The
response will usually be shown to the user.
404 Not Found The requested URL does not exist. The response body
is typically shown to the user.
500–599: Server-Side Error
This is a class of error messages returned in response to server-side problems:
500 Internal Server Error, 503 Service Unavailable, and so on The server
is experiencing a problem that prevents it from fulfilling the request. This
may be a transient condition, a result of misconfiguration, or simply the
effect of requesting an unexpected location. The response is normally
shown to the user.
Consistency of HTTP Code Signaling
Because there is no immediately observable difference between returning
most 2xx, 4xx, and 5xx codes, these values are not selected with any special
zeal. In particular, web applications are notorious for returning “200 OK”
even when an application error has occurred and is communicated on the
resulting page. (This is one of the many factors that make automated testing
of web applications much harder than it needs to be.)
On rare occasions, new and not necessarily appropriate HTTP codes are
invented for specific uses. Some of these are standardized, such as a couple
of messages introduced in the WebDAV RFC.13 Others, such as Microsoft’s
Microsoft Exchange “449 Retry With” status, are not.
Keepalive Sessions
Originally, HTTP sessions were meant to happen in one shot: Make one
request for each TCP connection, rinse, and repeat. The overhead of repeat-
edly completing a three-step TCP handshake (and forking off a new process
in the traditional Unix server design model) soon proved to be a bottleneck,
so HTTP/1.1 standardized the idea of keepalive sessions instead.
The existing protocol already gave the server an understanding of where