# 羊城杯逆向Writeup
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## BabySmc
自解码，解密后代码虽然很多但从移位、密文及下面这个结构可以看出是base64编码：
细看一下他的加密过程，正常bases64的移位，但码表换了和最后多了一个异或。
所以解密的话就是先异或再提取出index，最后按照移位还原一下：
    a = [0xE4, 0xC4, 0xE7, 0xC7, 0xE6, 0xC6, 0xE1, 0xC1, 0xE0, 0xC0, 0xE3, 0xC3, 0xE2, 0xC2, 0xED, 0xCD, 0xEC, 0xCC, 0xEF, 0xCF, 0xEE, 0xCE, 0xE9, 0xC9, 0xE8, 0xC8, 0xEB, 0xCB, 0xEA, 0xCA, 0xF5, 0xD5, 0xF4, 0xD4, 0xF7, 0xD7, 0xF6, 0xD6, 0xF1, 0xD1, 0xF0, 0xD0, 0xF3, 0xD3, 0xF2, 0xD2, 0xFD, 0xDD, 0xFC, 0xDC, 0xFF, 0xDF, 0x95, 0x9C, 0x9D, 0x92, 0x93, 0x90, 0x91, 0x96, 0x97, 0x94, 0x8A, 0x8E]
    enc = "H>oQn6aqLr{DH6odhdm0dMe`MBo?lRglHtGPOdobDlknejmGI|ghDb6}'.format(bin(i)[2:]) for i in ans])
    flag = ''
    for i in range(len(ans)//8):
        flag += chr(int(ans[8*i:8*(i+1)], 2))
    print(flag)
## Babyvm
开始简单调试了跟了一下，发现前面都是异或加密但后面有一部分加密有点复杂，跟起来会麻烦。
所以提取出vm部分代码，然后在编译器中修改编译一下这部分代码。
一是让程序直接打印出前面单字节异或加密对应的明文，二是打印出后面一部分的加密逻辑：
    #include 
    int dword_804B080[] = {0x7B, 0x2F, 0x37, 0x0E8};
    char s[] = "********************************************";
    int dword_804B060 = 0x0CF1304DC;
    int dword_804B064 = 0x283B8E84;
    char flag[100];
    int cnt, count;
    unsigned int sub_80487A8(unsigned int *a1)
    {
      unsigned char *v2; // [esp+18h] [ebp-20h]
      //printf("%x\n", *(unsigned char *)a1[8] == 0xa1);
      //return 0;
      while ( 1 )
      {
        if ( *(unsigned char *)a1[8] == 113 )
        {
        printf("*******************\n");    
          a1[6] -= 4;
          *(unsigned int *)a1[6] = *(unsigned int *)(a1[8] + 1);
          a1[8] += 5;
        }
        if ( *(unsigned char *)a1[8] == 65 )
        {
            printf("%x += %x\n", a1[1], a1[2]);
          a1[1] += a1[2];
          ++a1[8];
        }
        if ( *(unsigned char *)a1[8] == 66 )
        {
            printf("%x -= %x\n", a1[1], a1[4]);
          a1[1] -= a1[4];
          ++a1[8];
        }
        if ( *(unsigned char *)a1[8] == 67 )
        {
            printf("%x *= %x\n", a1[1], a1[3]);
          a1[1] *= a1[3];
          ++a1[8];
        }
        if ( *(unsigned char *)a1[8] == 55 )
        {
            printf("a1[1] = %x\n", a1[5]);
          a1[1] = a1[5];
          ++a1[8];
        }
        if ( *(unsigned char *)a1[8] == 56 )
        {
            printf("a1[1]_%x ^= %x\n", a1[1], a1[4]);
          a1[1] ^= a1[4];
          ++a1[8];
        }
        if ( *(unsigned char *)a1[8] == 57 )
        {
            printf("a1[1]_%x ^= %x\n", a1[1], a1[5]);
          a1[1] ^= a1[5];
          ++a1[8];
        }
        if ( *(unsigned char *)a1[8] == 53 )
        {
            printf("a1[5] = %x\n", a1[1]);
          a1[5] = a1[1];
          ++a1[8];
        }
        if ( *(unsigned char *)a1[8] == 0xF7 )
        {
            printf("a1[9]_%x += %x\n", a1[9], a1[1]);
          a1[9] += a1[1];
          ++a1[8];
        }
        if ( *(unsigned char *)a1[8] == 68 )
        {
            printf("a1[1]_%x /= %x\n", a1[1], a1[5]);
          a1[1] /= a1[5];
          ++a1[8];
        }
        if ( *(unsigned char *)a1[8] == 0x80 )
        {
          a1[*(unsigned char *)(a1[8]+1)] = *(unsigned int *)(a1[8] + 2);
          a1[8] += 6;
          printf("%x\n", *(unsigned char *)(a1[8]));
        }
        if ( *(unsigned char *)a1[8] == 119 )
        {
            printf("a1[1]_%x ^= %x\n", a1[1], a1[9]);
          a1[1] ^= a1[9];
          ++a1[8];
        }
        if ( *(unsigned char *)a1[8] == 83 )
        {
          putchar(*(unsigned char *)a1[3]);
          a1[8] += 2;
        }
        if ( *(unsigned char *)a1[8] == 34 )
        {
            printf("a1[1]_%x >>= %x\n", a1[1], a1[2]);
          a1[1] >>= a1[2];
          ++a1[8];
        }
        if ( *(unsigned char *)a1[8] == 35 )
        {
            printf("a1[1]_%x <= %x\n", a1[1], a1[2]);
          a1[1] <<= a1[2];
          ++a1[8];
        }
        if ( *(unsigned char *)a1[8] == 0x99 )
          break;
        if ( *(unsigned char *)a1[8] == 118 )
        {
            printf("??????????????????\n");
          a1[3] = *(unsigned int *)a1[6];
          *(unsigned int *)a1[6] = 0;
          a1[6] += 4;
          a1[8] += 5;
        }
        if ( *(unsigned char *)a1[8] == 84 )
        {
            printf("getchar()\n ------------------");
          v2 = (unsigned char *)a1[3];
          *v2 = getchar();
          a1[8] += 2;
        }
        if ( *(unsigned char *)a1[8] == 48 )
        {
        printf("?????????????????????????????????????????????????\n");    
          a1[1] |= a1[2];
          ++a1[8];
        }
        if ( *(unsigned char *)a1[8] == 49 )
        {
            printf("a1[1]_%x &= %x\n", a1[1], a1[2]);    
          a1[1] &= a1[2];
          ++a1[8];
        }
        if ( *(unsigned char *)a1[8] == 50 )
        {
          a1[3] = *(unsigned __int8 *)(a1[8] + 1);
          printf("a1[3] = %x\n", a1[3]);
          a1[8] += 2;
        }
        if ( *(unsigned char *)a1[8] == 9 )
        {
            printf("a1[1]_%x = 1877735783\n",  a1[1]);
          a1[1] = 1877735783;
          ++a1[8];
        }
        if ( *(unsigned char *)a1[8] == 16 )
        {
            printf("a1[9]_%x = %x\n", a1[9], a1[1]);
          a1[9] = a1[1];
          ++a1[8];
        }
        if ( *(unsigned char *)a1[8] == 51 )
        {
            printf("a1[4]_%x = %x\n", a1[4], a1[1]);
          a1[4] = a1[1];
          ++a1[8];
        }
        if ( *(unsigned char *)a1[8] == 52 )
        {
          a1[2] = *(unsigned char *)(a1[8] + 1);
          printf("a1[2] = %x\n", a1[2]);
          a1[8] += 2;
        }
        if ( *(unsigned char *)a1[8] == 0xFE )