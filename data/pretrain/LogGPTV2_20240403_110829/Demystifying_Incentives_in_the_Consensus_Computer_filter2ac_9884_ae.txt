This example computes the exact GCD of two large num-
bers, each of size n bits. The usual way to solve to the great-
est common divisor problem on a classical computer goes via
the Euclidean algorithm which takes work proportional to
O[log3(n)]. We show that by encoding the veriﬁcation func-
tion diﬀerently, one can verify the result in quadratic time
O[log2(n)]. More interestingly, this example requires only a
single solution transaction — that is, guarantees exactness
Problems
GCD
Dot Product
Matrix Multiplication (Fig. 4)
Matrix Multiplication (Fig. 5)
Matrix Multiplication (Section 6.1)
Matrix Multiplication
Sorting
k-coloring





Exact Approx # TXs Wtx
O(1)
O(1)
O(n3)
O(n)
O(1)
O(1)
O(1)
O(1)
O(1)
O(n)
O(1)
O(n2)
O(n3)
O(n)
O(1)
O(1)



#. Rounds
1
O(log n)
N/A
N/A
N/A
O(log n)
N/A
N/A
Table 1: Case studies for outsourced computation in our ε-consensus computer model. Wtx represents the amount of work required in
each transaction. #. Rounds is the number of rounds required to have a solution veriﬁed if the transactions have to send in order (N/A
means there is no such order).
with no additional latency. Speciﬁcally, the algorithm is as
below.
3. For each i, V accepts P’s solution iﬀ s1,i = a2ib2i +
a2i+1b2i+1.
1. G posts two integers m and n.
2. P posts ﬁve integers a, b, x, y, and z.
3. V checks that:
(a) ax = m, bx = n,
(b) |y|  0 and let k denote the number of sample
used by our protocol. The work required in the protocol
3 In Figure 5, we showed how to compute the exact product
of two matrices using n2 transactions, each requiring O(n)
veriﬁcation work. By applying the above mutli-transaction
dot product contract n2 times, one could also compute a
matrix product via transactions each requiring only O(1)
work.
below will be directly proportional to k. The protocol be-
low guarantees that if the output is correctly sorted then it
is accepted with high probability and if the output is not
δ-approximately sorted then it is rejected with high proba-
bility. Thus we get the guarantee that if an output is ac-
cepted then it must be δ-approximately sorted with high
conﬁdence. The conﬁdence can be made arbitrarily close to
1 at the cost of increasing the sample size.
on {1, . . . , n}.
1. G posts an array A of n elements.
2. P posts an array B of n elements and f , a permutation
3. V chooses k random indices p1, . . . , pk ≤ |A| and k ran-
dom pairs of indices (q1, r1), . . . , (qk, rk) and checks:
(a) if: for all i ≤ k, A[pi] = B[f (pi)], and
(b) if: for all i ≤ k, if qi ≤ ri then B[qi] ≤ B[ri].
(c) If both the checks (a) and (b) succeed then V
accepts P’s solution. Otherwise V rejects.
The veriﬁcation requires k equality checks and k sorting
comparisons.
Soundness of the protocol: Let us ﬁrst assume that P’s solu-
tion (B, f ) is a correct solution to sorting A, i.e., B has no
errors in the bijection f and no pairs are out of order. In this
case, check (a) and (b) will not fail as there are no errors.
Thus the protocol will accept every correct solution.
Proof of approximate correctness: On the other hand if the
array B diﬀers from A in more than δ|A| places, then with
probability at least δ, V will detect this error in (a). Simi-
larly, if at least δ|A|2 pairs of elements in B are out of order,
then with probability at least δ, the veriﬁer V will detect
this error in (b). The probability that (a) is satisﬁed for
all i is less than (1 − δ)k, and similarly the probability that
(b) is satisﬁed for all i is less than (1− δ)k. Thus the proba-
bility that both of the checks succeed is at most the product
(1 − δ)2k. The veriﬁer V fails to detect an error only when
both checks (a) and (b) succeed. If we choose k large enough
such that (1 − δ)2k < λ then we the protocol will reject any
solution that is not δ-approximately sorted with probability
greater than 1 − λ.
6.2.2 Approximate Matrix Multiplication
We want to guarantee that if our veriﬁcation function f
accepts C then at least 1 − δ fraction of the entries of C
match with A × B with high probability. The idea is to
randomly pick a small number of entries of C and verify that
they are computed correctly. For this check one may use the
protocol for the Dot Product described in Section 6.1.2. By
a calculation similar to the one for Approximate Sorting
in Section 6.2.1, log λ/log(1 − δ) samples suﬃce to ensure
(δ, λ)-approximate veriﬁability.
6.2.3 Approximate 2-Coloring
A 2-coloring of a graph is an assignment of one of two
speciﬁed colors to each of its nodes. An edge is colored prop-
erly if the two endpoints of the edge are assigned diﬀerent
colors. Recall that a graph is 2-colorable, or bipartite if there
a 2-coloring of its nodes such that every edge is properly col-
ored. A 2-coloring is δ-approximate if at most δ fraction of
the edges are not colored properly.
Using the sampling method, we design a protocol for the
following decision problem: does a given graph A have a
δ-approximate 2-coloring? Our protocol is inspired by the
property testing algorithm for 2-coloring and its correctness
relies on Szemeredi’s Regularity Lemma [31, 32].
1. G posts a graph A.
2. P posts either posts:
(a) “yes” and a 2-coloring of A, or
(b) “no” and an array of
k(δ) =
34 ln4(1/δ) ln ln(1/δ)
δ
nodes from A.
3. V checks:
(a) If P answered “yes,” then V chooses k(δ)-random
nodes v1, . . . , vk(δ) from A.
i. V accepts P’s solution if the subgraph induced
on v1, . . . , vk(δ) is 2-colorable, and
ii. V rejects otherwise.
(b) If P answered “no,” then
i. V accepts P’s solution if
A. P’s solution is an odd cycle, and
B. all the edges of the odd cycle are present
in A.
ii. V rejects if either of the above conditions fails.
Soundness of the protocol: With probability greater than 1/2,
a graph is not δ-approximate 2-colorable if and only if a ran-
dom subset of k(δ) nodes contains an odd cycle [33]. Thus
if the graph is not δ-approximate 2-colorable then we will
detect this with probability at least 1 − λ by repeating the
above protocol (cid:100)log2(1/λ)(cid:101) times. On the other hand, if the
graph is 2-colorable then no subset of k(δ) nodes will contain
an odd cycle. Hence our protocol will correctly accept the
solution. Thus our protocol computes correctly with high
probability both when the answer is “yes” or “no.”
Complexity of veriﬁcation: Note that if the graph is not δ-
approximate 2-colorable then indeed we have a constant size
witness for this. Hence the “no” answer from the prover has
a light-weight veriﬁcation. It remains to show that the “yes”
answer from the prover also has an easy veriﬁcation. This
can be achieved by a sampling method similar to the one
used for sorting. If more than δ fraction of the edges are not
properly colored by P’s 2-coloring, then we will catch a vio-
lated edge with high probability using s = k(δ)·(cid:100)log2(1/λ)(cid:101)
samples.
In the “yes” instance, V does s basic operations to choose
the random nodes and s2 comparisons to check that the
subgraph inherits a 2-coloring. In the “no” instance, s basic
operations are used to check whether P gave an odd cycle,
and s basic operations to check it’s presence in A for a total
of 2s basic operations.
Finally, we remark without proof that our protocol can in
fact be modiﬁed to verify approximate c-coloring as well for
any constant c using [33]; see also [32].
7. RELATED WORK
Consensus protocol. Since the Nakamoto consensus pro-
tocol ﬁrst appeared [1], numerous works have investigated
alternative consensus algorithms [34, 35, 36, 37]. The prob-
lem we look at in this work is independent of the underlying
consensus algorithm used in the network as the veriﬁer’s
dilemma arises in any cryptocurrency that has high block’s
veriﬁcation cost.
Incentive compatibility in cryptocurrency. Apart from
verifying blocks and transactions, mining new blocks is one
major activity in cryptocurrencies. Block mining requires a
huge computational resource, thus miners often join hands
to mine together in a pool. Several previous works also study
the incentive compatibility of Bitcoin mining [38, 39, 40, 41].
For example, in [38, 40], the authors prove that pooled min-
ing protocol is not incentive compatible by showing that
miners and pools are susceptible to a block withholding at-
tack. Our work also studies the incentive compatibility in
cryptocurrency, but via the lens of the veriﬁcation activity.
We show that in a network which allows Turing complete
scripts, miners are vulnerable to a new class of attacks.
Security analysis of Bitcoin protocol. A recent paper
by Gary et al. models and analyses security of the Bitcoin
protocol [42]. Gary et al. prove that Bitcoin can achieve all
ideal properties, e.g., common preﬁx, chain quality, only if
f is negligible, where f is the number of proof-of-work so-
lutions that miners can generate while a block is broadcast.
We ﬁnd that our ﬁnding follows closely to their result. In
fact, the parameter f in [42] typically depends on the pa-
rameter ε in our paper. The present work showed that when
ε is suﬃciently large, the veriﬁer’s dilemma exists. Our so-
lution is to keep ε small, which is equivalent to keeping f
close to 0.
Veriﬁable computation. Our proposed outsourced com-
putation scheme on an ε-consensus computer is the ﬁrst sys-
tem to achieve all the ideal properties mentioned in Sec-
tion 5. A popular line of work uses classical computers for
veriﬁcation that involves prior trust establishment to guar-
antee that G does not deviate after knowing the solution [8,