## PostgreSQL 14 preview - TOAST 支持 lz4 压缩算法 - --with-lz4 , 新增GUC default_toast_compression  
### 作者  
digoal  
### 日期  
2021-03-20   
### 标签  
PostgreSQL , default_toast_compression , lz4 , 压缩 , toast    
----  
## 背景  
PostgreSQL Heap table 支持列压缩(指某行的可变长度列, 最大1GB), 当存储在某行的可变长度列的空间占用超过TOAST_TUPLE_THRESHOLD时, 可变列的内容将压缩后存储在这个表对应的toast表中.     
压缩方法默认为pglz, PostgreSQL 14支持lz4算法, 要支持lz4必须在编译postgresql时选择 --with-lz4.     
pglz压缩比lz4省cpu, 而lz4比pglz压缩比高.    
create table, alter table可以指定表的压缩算法, 也能设置GUC参数default_toast_compression指定默认压缩算法.    
pg_column_compression(column) 可以查询当前行的指定列使用了什么压缩算法.     
```PSQL \d+ 表名``` 可以查询表的压缩算法    
GUC参数default_toast_compression查询当前默认压缩算法    
注意:    
为了提高效率, 在使用alter table修改压缩算法后, 已压缩的内容不会改变, 例如 CREATE TABLE AS or INSERT .. SELECT , 原有记录的压缩算法保持不变, 新增的记录才会使用新压缩算法.    
而VACUUM FULL or CLUSTER 操作会使用新压缩算法对所有记录重算.     
更多toast相关内容参考:    
[《PostgreSQL 14 preview - vacuum PROCESS_TOAST 开关 (是否vacuum 相关 toast)》](../202102/20210209_02.md)      
[《PostgreSQL 14 preview - psql客户端增强, 支持desc toast表和索引》](../202101/20210107_02.md)      
[《PostgreSQL 11 preview - TOAST切片阈值表级可配置》](../201805/20180519_06.md)      
[《HOW to Change PostgreSQL's TOAST_TUPLE_THRESHOLD》](../201301/20130110_01.md)      
[《how difference when update a table's column which it in TOAST or BASETABLE(in-line)》](../201202/20120216_01.md)      
[《TOAST table with pgfincore》](../201201/20120105_01.md)      
[《TOAST,The Oversized-Attribute Storage Technique - 暨存储格式main, extended, external, plain介绍》](../201103/20110329_01.md)      
https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=bbe0a81db69bd10bd166907c3701492a29aca294    
```    
Allow configurable LZ4 TOAST compression.    
author	Robert Haas 	    
Fri, 19 Mar 2021 19:10:38 +0000 (15:10 -0400)    
committer	Robert Haas 	    
Fri, 19 Mar 2021 19:10:38 +0000 (15:10 -0400)    
commit	bbe0a81db69bd10bd166907c3701492a29aca294    
tree	13d4a0dd3309af4f7970a1edbb61da0d974a2448	tree    
parent	e589c4890b05044a04207c2797e7c8af6693ea5f	commit | diff    
Allow configurable LZ4 TOAST compression.    
There is now a per-column COMPRESSION option which can be set to pglz    
(the default, and the only option in up until now) or lz4. Or, if you    
like, you can set the new default_toast_compression GUC to lz4, and    
then that will be the default for new table columns for which no value    
is specified. We don't have lz4 support in the PostgreSQL code, so    
to use lz4 compression, PostgreSQL must be built --with-lz4.    
In general, TOAST compression means compression of individual column    
values, not the whole tuple, and those values can either be compressed    
inline within the tuple or compressed and then stored externally in    
the TOAST table, so those properties also apply to this feature.    
Prior to this commit, a TOAST pointer has two unused bits as part of    
the va_extsize field, and a compessed datum has two unused bits as    
part of the va_rawsize field. These bits are unused because the length    
of a varlena is limited to 1GB; we now use them to indicate the    
compression type that was used. This means we only have bit space for    
2 more built-in compresison types, but we could work around that    
problem, if necessary, by introducing a new vartag_external value for    
any further types we end up wanting to add. Hopefully, it won't be    
too important to offer a wide selection of algorithms here, since    
each one we add not only takes more coding but also adds a build    
dependency for every packager. Nevertheless, it seems worth doing    
at least this much, because LZ4 gets better compression than PGLZ    
with less CPU usage.    
It's possible for LZ4-compressed datums to leak into composite type    
values stored on disk, just as it is for PGLZ. It's also possible for    
LZ4-compressed attributes to be copied into a different table via SQL    
commands such as CREATE TABLE AS or INSERT .. SELECT.  It would be    
expensive to force such values to be decompressed, so PostgreSQL has    
never done so. For the same reasons, we also don't force recompression    
of already-compressed values even if the target table prefers a    
different compression method than was used for the source data.  These    
architectural decisions are perhaps arguable but revisiting them is    
well beyond the scope of what seemed possible to do as part of this    
project.  However, it's relatively cheap to recompress as part of    
VACUUM FULL or CLUSTER, so this commit adjusts those commands to do    
so, if the configured compression method of the table happens not to    
match what was used for some column value stored therein.    
Dilip Kumar. The original patches on which this work was based were    
written by Ildus Kurbangaliev, and those were patches were based on    
even earlier work by Nikita Glukhov, but the design has since changed    
very substantially, since allow a potentially large number of    
compression methods that could be added and dropped on a running    
system proved too problematic given some of the architectural issues    
mentioned above; the choice of which specific compression method to    
add first is now different; and a lot of the code has been heavily    
refactored.  More recently, Justin Przyby helped quite a bit with    
testing and reviewing and this version also includes some code    
contributions from him. Other design input and review from Tomas    
Vondra, Álvaro Herrera, Andres Freund, Oleg Bartunov, Alexander    
Korotkov, and me.    
Discussion: http://postgr.es/m/20170907194236.4cefce96%40wp.localdomain    
Discussion: http://postgr.es/m/CAFiTN-uUpX3ck%3DK0mLEk-G_kUQY%3DSNOTeqdaNRR9FMdQrHKebw%40mail.gmail.com    
```    
```    
\set HIDE_TOAST_COMPRESSION false    
   2 -- test creating table with compression method    
   3 CREATE TABLE cmdata(f1 text COMPRESSION pglz);    
   4 CREATE INDEX idx ON cmdata(f1);    
   5 INSERT INTO cmdata VALUES(repeat('1234567890', 1000));    
   6 \d+ cmdata    
   7                                         Table "public.cmdata"    
   8  Column | Type | Collation | Nullable | Default | Storage  | Compression | Stats target | Description     
   9 --------+------+-----------+----------+---------+----------+-------------+--------------+-------------    
  10  f1     | text |           |          |         | extended | pglz        |              |     
  11 Indexes:    
  12     "idx" btree (f1)    
  13     
  14 CREATE TABLE cmdata1(f1 TEXT COMPRESSION lz4);    
  15 INSERT INTO cmdata1 VALUES(repeat('1234567890', 1004));    
  16 \d+ cmdata1    
  17                                         Table "public.cmdata1"    
  18  Column | Type | Collation | Nullable | Default | Storage  | Compression | Stats target | Description     
  19 --------+------+-----------+----------+---------+----------+-------------+--------------+-------------    
  20  f1     | text |           |          |         | extended | lz4         |              |     
  21     
  22 -- verify stored compression method in the data    
  23 SELECT pg_column_compression(f1) FROM cmdata;    
  24  pg_column_compression     
  25 -----------------------    
  26  pglz    
  27 (1 row)    
  28     
  29 SELECT pg_column_compression(f1) FROM cmdata1;    
  30  pg_column_compression     
  31 -----------------------    
  32  lz4    
  33 (1 row)    
  34     
  35 -- decompress data slice    
  36 SELECT SUBSTR(f1, 200, 5) FROM cmdata;    
  37  substr     
  38 --------    
  39  01234    
  40 (1 row)    
  41     
  42 SELECT SUBSTR(f1, 2000, 50) FROM cmdata1;    
  43                        substr                           
  44 ----------------------------------------------------    
  45  01234567890123456789012345678901234567890123456789    
  46 (1 row)    
  47     
  48 -- copy with table creation    
  49 SELECT * INTO cmmove1 FROM cmdata;    
  50 \d+ cmmove1    
  51                                         Table "public.cmmove1"    
  52  Column | Type | Collation | Nullable | Default | Storage  | Compression | Stats target | Description     
  53 --------+------+-----------+----------+---------+----------+-------------+--------------+-------------    
  54  f1     | text |           |          |         | extended | pglz        |              |     
  55     
  56 SELECT pg_column_compression(f1) FROM cmmove1;    
  57  pg_column_compression     
  58 -----------------------    
  59  pglz    
  60 (1 row)    
  61     
  62 -- copy to existing table    
  63 CREATE TABLE cmmove3(f1 text COMPRESSION pglz);    
  64 INSERT INTO cmmove3 SELECT * FROM cmdata;    
  65 INSERT INTO cmmove3 SELECT * FROM cmdata1;    
  66 SELECT pg_column_compression(f1) FROM cmmove3;    
  67  pg_column_compression     
  68 -----------------------    
  69  pglz    
  70  lz4    
  71 (2 rows)    
  72     
  73 -- test LIKE INCLUDING COMPRESSION    
  74 CREATE TABLE cmdata2 (LIKE cmdata1 INCLUDING COMPRESSION);    
  75 \d+ cmdata2    
  76                                         Table "public.cmdata2"    
  77  Column | Type | Collation | Nullable | Default | Storage  | Compression | Stats target | Description     
  78 --------+------+-----------+----------+---------+----------+-------------+--------------+-------------    
  79  f1     | text |           |          |         | extended | lz4         |              |     
  80     
  81 DROP TABLE cmdata2;    
  82 -- try setting compression for incompressible data type    
  83 CREATE TABLE cmdata2 (f1 int COMPRESSION pglz);    
  84 ERROR:  column data type integer does not support compression    
  85 -- update using datum from different table    
  86 CREATE TABLE cmmove2(f1 text COMPRESSION pglz);    
  87 INSERT INTO cmmove2 VALUES (repeat('1234567890', 1004));    
  88 SELECT pg_column_compression(f1) FROM cmmove2;    
  89  pg_column_compression     
  90 -----------------------    
  91  pglz    
  92 (1 row)    
  93     
  94 UPDATE cmmove2 SET f1 = cmdata1.f1 FROM cmdata1;    
  95 SELECT pg_column_compression(f1) FROM cmmove2;    
  96  pg_column_compression     
  97 -----------------------    
  98  lz4    
  99 (1 row)    
 100     
 101 -- test externally stored compressed data    
 102 CREATE OR REPLACE FUNCTION large_val() RETURNS TEXT LANGUAGE SQL AS    
 103 'select array_agg(md5(g::text))::text from generate_series(1, 256) g';    
 104 CREATE TABLE cmdata2 (f1 text COMPRESSION pglz);    
 105 INSERT INTO cmdata2 SELECT large_val() || repeat('a', 4000);    
 106 SELECT pg_column_compression(f1) FROM cmdata2;    
 107  pg_column_compression     
 108 -----------------------    
 109  pglz    
 110 (1 row)    
 111     
 112 INSERT INTO cmdata1 SELECT large_val() || repeat('a', 4000);    
 113 SELECT pg_column_compression(f1) FROM cmdata1;    
 114  pg_column_compression     
 115 -----------------------    
 116  lz4    
 117  lz4    
 118 (2 rows)    
 119     
 120 SELECT SUBSTR(f1, 200, 5) FROM cmdata1;    
 121  substr     
 122 --------    
 123  01234    
 124  8f14e    
 125 (2 rows)    
 126     