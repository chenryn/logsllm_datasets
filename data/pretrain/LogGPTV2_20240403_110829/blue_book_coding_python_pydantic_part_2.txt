class Model(BaseModel):
    uid: UUID = Field(default_factory=uuid4)
    updated: datetime = Field(default_factory=datetime.utcnow)
m1 = Model()
m2 = Model()
print(f"{m1.uid} != {m2.uid}")
# > 3b187763-a19c-4ed8-9588-387e224e04f1 != 0c58f97b-c8a7-4fe8-8550-e9b2b8026574
print(f"{m1.updated} != {m2.updated}")
# > 2020-07-15 20:01:48.451066 != 2020-07-15 20:01:48.451083
```
!!! warning The `default_factory` expects the field type to be set. Moreover if
you want to validate default values with `validate_all`, *pydantic* will need to
call the `default_factory`, which could lead to side effects!
## [Field customization](https://pydantic-docs.helpmanual.io/usage/schema/#field-customisation)
Optionally, the `Field` function can be used to provide extra information about
the field and validations. It has the following arguments:
- `default`: (a positional argument) the default value of the field. Since the
  `Field` replaces the field's default, this first argument can be used to set
  the default. Use ellipsis (`...`) to indicate the field is required.
- `default_factory`: a zero-argument callable that will be called when a default
  value is needed for this field. Among other purposes, this can be used to set
  dynamic default values. It is forbidden to set both `default` and
  `default_factory`.
- `alias`: the public name of the field.
- `title`: if omitted, `field_name.title()` is used.
- `description`: if omitted and the annotation is a sub-model, the docstring of
  the sub-model will be used.
- `const`: this argument must be the same as the field's default value if
  present.
- `gt`: for numeric values (`int`, `float`, `Decimal`), adds a validation of
  "greater than" and an annotation of `exclusiveMinimum` to the JSON Schema.
- `ge`: for numeric values, this adds a validation of "greater than or equal"
  and an annotation of minimum to the JSON Schema.
- `lt`: for numeric values, this adds a validation of "less than" and an
  annotation of `exclusiveMaximum` to the JSON Schema.
- `le`: for numeric values, this adds a validation of "less than or equal" and
  an annotation of maximum to the JSON Schema.
- `multiple_of`: for numeric values, this adds a validation of "a multiple of"
  and an annotation of `multipleOf` to the JSON Schema.
- `min_items`: for list values, this adds a corresponding validation and an
  annotation of `minItems` to the JSON Schema.
- `max_items`: for list values, this adds a corresponding validation and an
  annotation of `maxItems` to the JSON Schema.
- `min_length`: for string values, this adds a corresponding validation and an
  annotation of `minLength` to the JSON Schema.
- `max_length`: for string values, this adds a corresponding validation and an
  annotation of `maxLength` to the JSON Schema.
- `allow_mutation`: a boolean which defaults to `True`. When `False`, the field
  raises a `TypeError` if the field is assigned on an instance. The model config
  must set `validate_assignment` to `True` for this check to be performed.
- `regex`: for string values, this adds a Regular Expression validation
  generated from the passed string and an annotation of pattern to the JSON
  Schema.
- `**`: any other keyword arguments (e.g. `examples`) will be added verbatim to
  the field's schema.
!!! note pydantic validates strings using `re.match`, which treats regular
expressions as implicitly anchored at the beginning. On the contrary, JSON
Schema validators treat the pattern keyword as implicitly unanchored, more like
what `re.search` does.
Instead of using `Field`, the `fields` property of the `Config` class can be
used to set all of the arguments above except default.
## [Parsing data into a specified type](https://pydantic-docs.helpmanual.io/usage/models/#parsing-data-into-a-specified-type)
Pydantic includes a standalone utility function `parse_obj_as` that can be used
to apply the parsing logic used to populate pydantic models in a more ad-hoc
way. This function behaves similarly to `BaseModel.parse_obj`, but works with
arbitrary pydantic-compatible types.
This is especially useful when you want to parse results into a type that is not
a direct subclass of `BaseModel`. For example:
```python
from typing import List
from pydantic import BaseModel, parse_obj_as
class Item(BaseModel):
    id: int
    name: str
# `item_data` could come from an API call, eg., via something like:
# item_data = requests.get('https://my-api.com/items').json()
item_data = [{"id": 1, "name": "My Item"}]
items = parse_obj_as(List[Item], item_data)
print(items)
# > [Item(id=1, name='My Item')]
```
This function is capable of parsing data into any of the types pydantic can
handle as fields of a `BaseModel`.
Pydantic also includes a similar standalone function called `parse_file_as`,
which is analogous to `BaseModel.parse_file`.
## [Data Conversion](https://pydantic-docs.helpmanual.io/usage/models/#data-conversion)
*pydantic* may cast input data to force it to conform to model field types, and
in some cases this may result in a loss of information. For example:
```python
from pydantic import BaseModel
class Model(BaseModel):
    a: int
    b: float
    c: str
print(Model(a=3.1415, b=" 2.72 ", c=123).dict())
# > {'a': 3, 'b': 2.72, 'c': '123'}
```
This is a deliberate decision of *pydantic*, and in general it's the most useful
approach. See [here](https://github.com/samuelcolvin/pydantic/issues/578) for a
longer discussion on the subject.
## Initialize attributes at object creation
`pydantic` recommends [using root validators](#using-root-validators), but it's difficult to undestand how to do it and to debug the errors. You also don't have easy access to the default values of the model. I'd rather use the [overwriting the `__init__` method](#overwriting-the-__init__-method).
### [Overwriting the `__init__` method](https://stackoverflow.com/questions/76286148/how-do-custom-init-functions-work-in-pydantic-with-inheritance)
```python
class fish(BaseModel):
    name: str
    color: str
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        print("Fish initialization successful!")
        self.color=complex_function()
```
If you want to create part of the attributes you can use the next snippet
```python
class Sqlite(BaseModel):
    model_config = ConfigDict(arbitrary_types_allowed=True)
    path: Path
    db: sqlite3.Cursor
    def __init__(self, **kwargs):
        conn = sqlite3.connect(kwargs['path'])
        kwargs['db'] = conn.cursor()
        super().__init__(**kwargs)
```
### [Using root validators](https://stackoverflow.com/questions/60695759/creating-objects-with-id-and-populating-other-fields)
If you want to initialize attributes of the object automatically at object
creation, similar of what you'd do with the `__init__` method of the class, you
need to use
[`root_validators`](https://pydantic-docs.helpmanual.io/usage/validators/#root-validators).
```python
from pydantic import root_validator
class PypikaRepository(BaseModel):
    """Implement the repository pattern using the Pypika query builder."""
    connection: sqlite3.Connection
    cursor: sqlite3.Cursor
    class Config:
        """Configure the pydantic model."""
        arbitrary_types_allowed = True
    @root_validator(pre=True)
    @classmethod
    def set_connection(cls, values: Dict[str, Any]) -> Dict[str, Any]:
        """Set the connection to the database.
        Raises:
            ConnectionError: If there is no database file.
        """
        database_file = values["database_url"].replace("sqlite:///", "")
        if not os.path.isfile(database_file):
            raise ConnectionError(f"There is no database file: {database_file}")
        connection = sqlite3.connect(database_file)
        values["connection"] = connection
        values["cursor"] = connection.cursor()
        return values
```
I had to set the `arbitrary_types_allowed` because the sqlite3 objects are not
between the pydantic object types.
## [Set private attributes](https://pydantic-docs.helpmanual.io/usage/models/#private-model-attributes)
If you want to define some attributes that are not part of the model use
`PrivateAttr`:
```python
from datetime import datetime
from random import randint
from pydantic import BaseModel, PrivateAttr
class TimeAwareModel(BaseModel):
    _processed_at: datetime = PrivateAttr(default_factory=datetime.now)
    _secret_value: str = PrivateAttr()
    def __init__(self, **data: Any) -> None:
        super().__init__(**data)
        # this could also be done with default_factory
        self._secret_value = randint(1, 5)
m = TimeAwareModel()
print(m._processed_at)
# > 2021-03-03 17:30:04.030758
print(m._secret_value)
# > 5
```
### Define fields to exclude from exporting at config level
This won't be necessary once they release the version 1.9 because you can
[define the fields to exclude in the `Config` of the model](https://github.com/samuelcolvin/pydantic/issues/660)
using something like:
```python
class User(BaseModel):
    id: int
    username: str
    password: str
class Transaction(BaseModel):
    id: str
    user: User
    value: int
    class Config:
        fields = {
            "value": {
                "alias": "Amount",
                "exclude": ...,
            },
            "user": {"exclude": {"username", "password"}},
            "id": {"dump_alias": "external_id"},
        }
```
The release it's taking its time because
[the developer's gremlin and salaried work are sucking his time off](https://github.com/samuelcolvin/pydantic/discussions/3228).
## [Update entity attributes with a dictionary](https://pydantic-docs.helpmanual.io/usage/exporting_models/#modelcopy)
To update a model with the data of a dictionary you can create a new object with
the new data using the `update` argument of the `copy` method.
```python
class FooBarModel(BaseModel):
    banana: float
    foo: str
m = FooBarModel(banana=3.14, foo="hello")
m.copy(update={"banana": 0})
```
## Lazy loading attributes
[Currently](https://github.com/samuelcolvin/pydantic/issues/935) there is no
official support for [lazy loading](lazy_loading.md) model attributes.
You can define your own properties but when you export the schema they won't
appear there.
[dgasmith has a workaround](https://github.com/samuelcolvin/pydantic/issues/1035)
though.
## [Load a pydantic model from json](https://docs.pydantic.dev/latest/concepts/json/#json-parsing)
You can use the [`model_validate_json`](https://docs.pydantic.dev/latest/api/base_model/#pydantic.main.BaseModel.model_validate_json) method that will validate and return an object with the loaded data.
```python
from datetime import date
from pydantic import BaseModel, ConfigDict, ValidationError
class Event(BaseModel):
    model_config = ConfigDict(strict=True)
    when: date
    where: tuple[int, int]
json_data = '{"when": "1987-01-28", "where": [51, -1]}'
print(Event.model_validate_json(json_data))  
#> when=datetime.date(1987, 1, 28) where=(51, -1)
try:
    Event.model_validate({'when': '1987-01-28', 'where': [51, -1]})  
except ValidationError as e:
    print(e)
    """
    2 validation errors for Event
    when
      Input should be a valid date [type=date_type, input_value='1987-01-28', input_type=str]
    where
      Input should be a valid tuple [type=tuple_type, input_value=[51, -1], input_type=list]
    """
```
# Troubleshooting
## [Ignore a field when representing an object](https://stackoverflow.com/questions/68768017/how-to-ignore-field-repr-in-pydantic)
Use `repr=False`. This is useful for properties that don't return a value
quickly, for example if you save an `sh` background process.
```python
class Temp(BaseModel):
    foo: typing.Any
    boo: typing.Any = Field(..., repr=False)
```
## [Copy produces copy that modifies the original](https://github.com/samuelcolvin/pydantic/issues/1383)
When copying a model, changing the value of an attribute on the copy updates the
value of the attribute on the original. This only happens if `deep != True`. To
fix it use: `model.copy(deep=True)`.
## [E0611: No name 'BaseModel' in module 'pydantic'](https://github.com/samuelcolvin/pydantic/issues/1961)
Add to your pyproject.toml the following lines:
```toml
# --------- Pylint -------------
[tool.pylint.'MESSAGES CONTROL']
extension-pkg-whitelist = "pydantic"
```
Or if it fails, add to the line `# pylint: extension-pkg-whitelist`.
# To investigate
- [Integration of pydantic with pandas](https://pandera.readthedocs.io/en/stable/pydantic_integration.html)
# References
- [Docs](https://pydantic-docs.helpmanual.io/)
- [Git](https://github.com/samuelcolvin/pydantic/)