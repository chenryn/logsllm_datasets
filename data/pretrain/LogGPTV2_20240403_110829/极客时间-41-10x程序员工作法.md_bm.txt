## 额外收获

在这个模块的最后，我针对大家在学习过程中遇到的一些问题进行了回答，帮助你更好地理解和掌握所学内容。以下是一些关键点：

- **持续集成**：确保系统各部分能够顺利集成。
- **持续交付**：保证软件可以随时部署上线。
- **持续验证**：通过测试验证产品想法的有效性。
- **A/B 测试**：利用软件的不同版本来验证不同的假设。
- **Selenium**：用于自动化浏览器操作。
- **熟练使用快捷键**：提高开发效率。

更多详细内容请参阅 [答疑解惑 | 持续集成、持续交付，然后呢？](http://time.geekbang.org/column/article/89050)。

## 精选留言

### 关于“懒惰”与程序员的价值
[jxin] 同学提到：
> 有价值的工作不仅在于任务本身。自动化和编写代码都很重要，但根据实际情况判断是否需要进行这些工作也同样重要。合理分解任务并做出权衡是一项艺术，也十分吸引人。

### 对持续交付的理解
[Jxin] 同学分享了他对于持续交付的看法：
> 分而治之是解决复杂问题的有效方法。持续交付类似于重构中的小步快走策略，每一步微调后都进行测试以确保项目稳步前进。此外，由于每次改动范围较小，灵活性得以增强，因此结合最小可行产品的理念，可以以较低成本进行测试，并根据收集到的数据调整发展方向。

### 软件设计的重要性
[毅] 同学分享了他的见解：
> 我们常说，在开始编码前应先从设计入手。然而，在实际工作中，即使经过充分思考后再动手，最终结果仍可能偏离预期。主要原因有二：一是缺乏全局视角，导致上下文局限和反馈延迟；二是没有形成领域概念或未将其付诸实践。这往往导致面向对象工具被用来写出面向过程的代码，使得面向对象的设计原则无从发挥其作用。

### 分层架构与 REST 和 DDD 的关系
[desmond] 同学指出：
> 学习 REST 和 DDD 时发现两者存在一些共同之处：两者均围绕数据（资源或领域对象）展开，并设定了相应的标准操作规范（如 HTTP 动词）。核心在于业务建模。

### 微服务的理解
[风翱] 同学认为：
> 真正意义上的敏捷开发不仅仅包括采用某些方法，还需要遵循其价值观和原则。同样地，微服务不仅仅是将服务拆分部署，或者简单地使用流行的微服务框架就能实现。

### 项目自动化的理想状态
[西西弗与卡夫卡] 同学设想了一个理想的自动化场景：
> 新入职的程序员可以在当天午饭前完成从机器配置到代码提交及线上发布的整个流程。这要求构建和集成完全自动化，并且所有前期准备工作都已就绪，以便程序员只需专注于编程质量。

### 自动化验收测试的学习体会
[shniu] 同学表达了他对 BDD 的看法：
> 自动化验收测试有助于减少重复劳动，尤其是在回归测试中。BDD 的初衷是促进跨部门间的深入沟通，确保各方对需求理解一致。成功实施 BDD 需要不断尝试和总结经验。

### “5 万块做淘宝”的讨论
[enjoylearning] 同学提出了他的观点：
> 创建类似淘宝的平台时，必须与客户充分沟通确定技术选型。有些情况下，现有系统已经足够满足业务需求，无需为了追求技术复杂度而强行拆分。

### 运维知识补充
[hua168] 同学推荐了几篇关于 DevOps 的文章：
> 目前运维领域流行 DevOps，更高级别则是 AI。推荐阅读《DevOps 详解》以及《DevOps 知识体系与标准化的构建》等资料。

感谢各位同学的精彩留言！在接下来的模块中，我将进一步探讨如何将之前介绍的“思考框架”和“四个原则”应用于具体情境中。

---

# 加餐 | 你真的了解重构吗？

今天（3 月 15 日），Martin Fowler 的《重构》第二版中文版正式发布。前不久，人民邮电出版社的杨海灵老师邀请我为这本书撰写推荐语，我欣然接受了这个机会。虽然我在专栏里曾提及 TDD 中的重构概念，但尚未对其进行专门讲解。因此，我想借此机会向读者详细介绍重构这一几乎每个程序员都会接触到的主题。

### 每个程序员都要做的事
作为程序员，我们都渴望写出完美的代码。然而，没有任何代码是完美无缺的，因为只要代码仍在使用，就会不断出现新的需求。面对这种情况，许多人会选择在原有结构上继续扩展，但这会导致代码逐渐变得混乱不堪——即所谓的“熵增”。对抗这种趋势的方法之一就是引入负熵，使系统更加有序，这就是重构的意义所在。

### 重构是一种微操作
真正的重构并不等于重写整个系统，而是通过一系列微小步骤来改善代码质量。例如，将一个通用方法从特定业务类移动到通用类的过程可以被细分为以下几个步骤：
- 创建新类；
- 在原类中添加指向新类的引用；
- 将方法迁移到新类中。

借助现代 IDE 工具的支持，上述步骤中的最后一步可以通过简单的键盘操作轻松完成。这样的细分不仅提高了工作效率，还降低了出错的风险。

### 重构地图
为了帮助大家更好地理解重构及其相关概念，我绘制了一张知识地图，其中包括了重构的定义、目标以及与其他软件工程实践之间的联系。希望这张地图能够成为你学习重构过程中的有力助手。

再次感谢大家的关注和支持！如果你觉得这篇文章对你有所帮助，请不要吝啬分享给你的朋友们。