    DexClassLoader InjectCall 
    application/vnd.android 
    ==
在恶意软件样本上进行字符串过滤之后，我发现了一些硬编码的IP，系统二进制文件（例如用于设备root检查的su）的路径，Dalvik代码注入调用，通常用于安装.apks的字符串，以及指向另一个名为
300010.apk的URL。
当反病毒软件供应商或研究人员发现链接到恶意软件的URL时，它们通常马上向相应的ISP发送禁用通知。此后，ISP将与托管恶意软件的服务器的所有者进行联系，或直接阻止这些服务器。所以我必须在300010.apk被删除之前得到它，只有这样才能进行进一步的分析。
由于这个.apk使用了APK
Protect进行保护，所以要想知道该应用程序正在做什么，必须对动态加载的代码进行解密。为此，我们可以求助于Android的脱壳工具。
在这个.dex文件中，我还发现了一些base64编码的字符串，好在可以通过设置RABIN2_DEBASE64环境变量或在每个字符串上使用命令rax2
-D来自动解码。事实证明，一些base64编码字符串包含了二进制数据，其他则指向二进制文件内的一些有趣的位置，如loadLibrary()。
    $ RABIN2_DEBASE64=1 rabin2 -qzz classes.dex
**  
**
**对方法进行过滤**
Radare2的visual模式还支持交互式heads-up显示，能够从.dex文件中过滤所有的字符串、方法和类名。为了进入visual模式，请使用“V_”命令，并在visual模式下键入“_”。接下来，键入要突出显示的文本。当您按时，UI将跳转到反汇编器中的相应位置，以便您可以在上下文中查看相应文本。
您可能想要搜索的一些相关文字包括：
    onReceive 
    Init 
    Password
    Install
    Dex
    SMS
大多数时候，恶意软件都会利用ProGuard或其他模糊工具进行保护，这会使类/方法/字段名完全无用。在这种情况下，您需要深入分解或执行动态分析以恢复原始字符串，并了解每个方法的用途。
**  
**
**进行反汇编**
Radare2提供了一个visual模式（V命令）和Web用户界面（通过= H命令），从而允许您使用鼠标，同时与静态提示相比，具有更好的交互性。
为了进行相应的分析，您可能需要将Radare2的输出与其他工具如Android SDK中dexdump
-d的输出进行比较。在对付.dex二进制文件方面，Radare2是一个非常可靠的工具，所以当反编译和转码器无法使用是，它就是我们的不二之选。
    $ r2pm -i dex2jar
    $ r2pm -r dex2jar classes.dex
一旦把.dex文件转换为Java类，我们就可以使用Radare2来反汇编JAR的内容了。通常来说，为相同代码建立多个视图以及阅读汇编代码未必是理解程序某些部分的最快方式，所以，您可能需要使用像jd-gui这样的反编译程序，这个程序是免费的，并且可以将所有的类同时加载到JAR文件。
令人遗憾是，把Dalvik转换为Java字节码或反编译Java方法并不总是可行。许多工具都可能在自动拆卸时出现故障。因此，分析人员需要了解每个工具在反汇编方面的风险和弱点，并能够手动解决这些问题。
例如，如果我们试图用dexdump反汇编300010.apk，我们将得到一个奇怪的分段错误（这个问题已经在Android 7 SDK中得到修复）：
     $ dexdump -d classes.dex  > /dev/null
     GLITCH: zero-width instruction at idx=0x0000
     GLITCH: zero-width instruction at idx=0x0000
     GLITCH: zero-width instruction at idx=0x0000
     Segmentation fault: 11
对Java的转译会部分失败：
     $ r2pm -r dex2jar classes.dex 2>&1 |grep Error | wc -l
           40
    Androguard将在异常后停止分析： 
     $ androgui.py -i classes.dex
     Traceback (most recent call last):
       File "/Library/Python/2.7/site-packages/androguard/core/bytecodes/dvm.py", line 7014, in get_raw_string
         off = self.__manage_item[ "TYPE_STRING_ID_ITEM" ][idx].get_string_data_off()
     IndexError: list index out of range
有一次，在尝试利用IDA Pro打开.apk时候竟然导致了9,382个错误消息。在这样的情况下，像Radare2这样的低级反汇编程序可以帮上大忙。
**程序库**
本机库通常使用JNI符号与Java进行交互，JNI符号在.apk的lib
/子目录中的共享库中。这些库通常根据目标架构（例如，ARM，x86，ARM64，MIPS等）分为不同的子目录。
在本例中，我们只有ARM二进制文件，它们通常是在Thumb2模式下编译的。Radare2能够很好地加载这些二进制文件，但你的兴可能在ARM和Thumb模式之间上面：
     > e asm.bits=16  # set thumb2 mode
     > e asm.bits=32  # set ARM mode
还有其他一些变量，如asm.cpu，在某些情况下对于正确进行反汇编非常有用，但这对大多数情况来说已经足够了。
在visual模式中，我们还可以使用HUD模式（使用如前所述的'_'键）从二进制文件中收集信息，例如符号（isq），导入表（iiq）或字符串（izq）。
运行这些命令后，您可以对程序库的用途进行有根据的猜测：
     lib/armeabi/libbspatch.so     # bzip2 + binary patch API, used by umeng API to update stuff
     lib//armeabi/libcore.so       # upay cryptography (Java_com_lem_sdk_util_CoreEnct_decrypt
     lib//armeabi/libmagic.so      # java code injection by using reflection methods
至少，它们看起来没有一个与下载YouTube视频有关。
为了进行反汇编并理解代码正在做什么，你将需要模拟和分析代码。你也可以用Radare2做这些事情。Radare2的模拟功能是在ESIL（Evaluable
Strings Intermediate
Language）的基础上实现的，这是一个真正安全的虚拟机，与Dalvik或真正的硬件无关，所以你可以认为它就像静态分析一样安全。
之所以利用模拟方法来反汇编ARM二进制文件，是因为一些指针是由多条指令计算得到的。这需要跟踪状态的变化并解析正确的字符串和方法引用。
     > e asm.describe = true   # show description of each ARM instruction
     > e asm.pseudo = true     # show pseudo instruction instead of assembly
     > e asm.emu = true        # emulate code using ESIL
     > e asm.emustr = true     # show string and method referenced in the emu comments
     > e anal.hasnext=true     # assume a new function is found after the last one
下面给出一些对恶意软件分析比较有帮助的命令，包括：
     > aa  - 分析所有公共符号（使用aaa或aaaa等！） 
     > afr  - 递归式的分析函数 
     > aae  - 分析使用ESIL模拟计算的得到的所有代码引用 
     > aac  - 分析所有函数调用的目的地
如果您对该代码的更高级的版本感兴趣，可以使用Radare2中的Retargetable
Decompiler软件包，来充分利用[www.retdec.com](http://www.retdec.com)上提供的在线反编译服务。
完整的classes.dex引用径向图
**资源文件**
.apk文件包含了应用程序在运行时加载的几个配套文件。一些资源文件是图像，另一些是描述用户界面的XML文件。在恶意软件分析期间，您可能会发现可疑的配套文件，您想要仔细看看。
您可以使用Radare2中的pm命令或文件工具，通过每个文件的魔法头部信息（the magic header information）来猜测文件的类型：
     $ find . -type f -exec r2 -qnci~^file -cpm ‘{}’ ‘;’
     $ file assets/*
之所以使用Radare2而不是GNU的内部魔法实现，主要是因为已知libmagic文件的某些漏洞可用于运行代码或使分析无效。RedHat在今年夏天修补了这个问题，但是其他一些发行版和Docker镜像仍然存在这个漏洞。Radare2的libmagic的实现来自OpenBSD，已经经过了fuzzed处理，同时得到了相应的加固处理。根据我的经验，Radare2更可靠，并且更容易修改——如果需要的话。
除了pm命令，我们还可以使用/m命令，它将在每个偏移量上运行pm，以在原始文件上找到已知的魔法签名。这对于从内存转储、内核镜像等中切割文件很有用。
当我考察包含在这个恶意软件样本中的文件的时候，我发现一些带有.png扩展名的文件似乎含有加密的数据。
**结论：Android木马Triada的功能**
在使用Google搜索其他研究人员发布的关于Tirada Android木马后，我开始了解这个恶意软件所带来的真正风险，以及它是如何危害用户的了：
获取设备Root权限并更改Zygote
恢复出厂设置无法删除该恶意软件
似乎是针对KitKat之前的版本，但实际上会影响所有版本
可以通过一些模块化漏洞利用代码来提高权限
到目前为止，我已经解释了如何针对某些目标进行非常基本的静态分析。作为分析工作的一部分，我已经可以肯定这是一个模块化病毒，能够在运行时下载更多的二进制文件和应用程序。但是，我们对这个恶意软件的了解还远远不够，在加密组件、运行时加载的代码、其他应用程序的安装、网络通信等方面，仍有待我们进一步深入分析研究。