Let 𝑆 be the subset of nodes with |𝑆|≤ 𝑡, let view𝑆 be the internal
state of nodes in 𝑆 and messages sent and received by nodes in 𝑆.
Then, the next theorem ensures formally states the secrecy property
of the VSS.
Theorem D.4 (Theorem 4.4 of [44]). For all adversary A, for
any subset 𝑆 ⊂ [𝑛] of size 𝑡 and view𝑆 , for all 𝑠 ∈ Z𝑞
Pr[A has secret | view𝑆] = Pr[A has secret]
𝒓 = {𝜙(1), 𝜙(2), . . . , 𝜙(𝑛)}.
(3) Let 𝑣𝑘 = commit(𝑎𝑘, 𝑏𝑘) for 𝑘 = 1, 2, ..., 𝑡,
(4) Let 𝒗 = {𝑣0, 𝑣1, . . . , 𝑣𝑡}, 𝒔 = {𝑝(1), 𝑝(2), . . . , 𝑝(𝑛)}, and let
(5) return {𝒗, 𝒔, 𝒓}
PedEvalVerify(𝑔0, 𝑔1, 𝒗, 𝑖, 𝑠𝑖, 𝑟𝑖) → 0/1:
(1) If
commit(𝑠𝑖, 𝑟𝑖) = 𝑔𝑠𝑖0 𝑔𝑟𝑖1 =
𝑣𝑖 𝑗
𝑗
𝑡(cid:89)
𝑗=0
return 1 otherwise return 0.
Given PedPolyCommit and PedEvalVerify be the polyno-
mial commitment and evaluation scheme, respectively. The
VSS scheme is defined as below.
VSS.Share(𝑠, 𝑔0, 𝑔1, 𝑛, 𝑡) :
(1) Let {𝒗, 𝒔, 𝒓} := PedPolyCommit(𝑔0, 𝑔1, 𝑠)
(2) Broadcast 𝒗 to all nodes and send 𝒔[𝑖], 𝒓[𝑖] to node 𝑖
VSS.Verify(𝑔0, 𝑔1, 𝒗, 𝑠𝑖, 𝑟𝑖) → 0/1:
(1) Output PedEvalVerify(𝑔0, 𝑔1, 𝒗, 𝑖, 𝑠𝑖, 𝑟𝑖).
Let 𝑇 be the set of valid shares 𝑠𝑘 where |𝑇 |= 𝑡 + 1, then
VSS.Recon({𝑠𝑘}𝑘∈𝑇 ) → 𝑠 :
(1) Output
(cid:88)
where 𝜇𝑘 =(cid:81)𝑗̸=𝑘
𝑠𝑘 · 𝜇𝑘 = 𝑝(0) = 𝑠
(3)
𝑘∈𝑇
𝑗−𝑘 for 𝑘 ∈ 𝑇 are Lagrange coefficients.
𝑗
Figure 4: Pedersen’s VSS scheme [44]
VSS.Share step terminated correctly, any set of 𝑡 + 1 nodes can
combine their shares to recover the secret. Theorem D.3 states that
any subset of 𝑡 + 1 nodes will reconstruct the same secret.
Lemma D.1 (Lemma 4.2 of [44]). Let 𝑆 ⊂ {1, 2, . . . , 𝑛} be a set of
𝑡 + 1 nodes such that the verification was successful for these 𝑡 + 1
nodes. Then these 𝑡 +1 nodes can find a pair (𝑠′, 𝑡′) such that 𝑣 = 𝑔𝑠′
0 𝑔𝑡′
1 .
Definition D.2 (Uniqueness). For all subsets 𝑆1 and 𝑆2 of {1, 2, . . . , 𝑛}
of size 𝑘 such that all nodes in 𝑆1 and 𝑆2 accepted their shares in the
verification protocol described above. Let 𝑠𝑖 be the secret computed
by the participants in 𝑆𝑖, then 𝑠1 = 𝑠2.
Theorem D.3 (Theorem 4.2 of [44]). Under the assumption that
the dealer can not find log𝑔0 𝑔1 except with negligible probability in
|𝑞|, the verification protocol satisfies uniqueness.
E ZERO KNOWLEDGE PROOF OF EQUALITY
OF DISCRETE LOGARITHM
0 and 𝑦 = 𝑔𝛼
1 .
Our dual-threshold ACSS protocol has a step that requires nodes
to produce zero-knowledge proofs about the equality of discrete
logarithms for a tuple of publicly known values. In particular, given
a group G of prime order 𝑞, two uniformly random generators
𝑔0, 𝑔1 ← G and a tuple (𝑔0, 𝑥, 𝑔1, 𝑦), a prover P wants to prove to a
probabilistic polynomial time (PPT) verifier V, in zero-knowledge,
the knowledge of a witness 𝛼 such that 𝑥 = 𝑔𝛼
We will use the Chaum-Pedersen "Σ-protocols" [21], which as-
sumes the hardness of the Decisional Diffie-Hellman (DDH) prob-
lem, and can be made non-interactive using the Fiat-Shamir heuris-
tic [26].
Decisional Diffie–Hellman assumption. Given a group G with
generator 𝑔 ∈ G and uniformly random samples 𝑎, 𝑏, 𝑐 ← Z𝑞, the
Decisional Diffie–Hellman (DDH) hardness assumes that the follow-
ing two distributions 𝐷0, 𝐷1 are computationally indistinguishable:
𝐷0 = (𝑔, 𝑔𝑎, 𝑔𝑏, 𝑔𝑎𝑏) and 𝐷1 = (𝑔, 𝑔𝑎, 𝑔𝑏, 𝑔𝑐).
Protocol for equality of discrete logarithm. For any given tuple
(𝑔0, 𝑥, 𝑔1, 𝑦), the Chaum-Pedersen protocol proceeds as follows.
(1) P samples a random element 𝛽 ← Z𝑞 and sends (𝑎1, 𝑎2) to
V where 𝑎1 = 𝑔𝛽
0 and 𝑎2 = 𝑔𝛽
1 .
(2) V sends a challenge 𝑒 ← Z𝑞.
(3) P sends a response 𝑧 = 𝛽 − 𝛼𝑒 to V.
(4) V checks whether 𝑎1 = 𝑔𝑧
and only if both the equality holds.
0𝑥𝑒 and 𝑎2 = 𝑔𝑧
1𝑦𝑒 and accepts if
As mentioned, this protocol can be made non-interactive in the
Random Oracle model using the Fiat-Shamir heuristic [26, 45]. This
protocol guarantees completeness, knowledge soundness, and zero-
knowledge. The knowledge soundness implies that if P convinces
the V with non-negligible probability, there exists an efficient
(polynomial time) extractor that can extract 𝛼 from the prover with
non-negligible probability.
In our dual-threshold ACSS, we use the non-interactive variant
of the protocol described above. In particular, for any given tuple
1, 𝜋 ← dleq.Prove(𝑠, 𝑔0, 𝑥, 𝑔1, 𝑦)
(𝑔0, 𝑥, 𝑔1, 𝑦) where 𝑥 = 𝑔𝑠
generates the non-interactive zero proof 𝜋. The proof 𝜋 is 𝑂(𝜅) bits
long. Given the proof 𝜋 and (𝑔0, 𝑥, 𝑔1, 𝑦), dleq.Verify(𝜋, 𝑔0, 𝑥, 𝑔1, 𝑦)
verifies the proof.
0 and 𝑦 = 𝑔𝑠
F PUBLICLY VERIFIABLE SECRET SHARING
We restate this section from [23]. Our (𝑛, ℓ) dual-threshold ACSS
scheme for 𝑛 ≥ 3𝑡 + 1 and 𝑡 < ℓ ≤ 𝑛 − 𝑡 crucially rely on on a (𝑛, ℓ)
publicly verifiable secret sharing (PVSS). In particular, we use the
PVSS scheme from Scrape [19], which is an improvement over the
Session 10C: Foundations CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2720secret 𝑠 using a degree ℓ polynomial among 𝑛 nodes is equivalent
to encoding the message (𝑠, 𝑎1, 𝑎2, · · · , 𝑎𝑡) using a [𝑛, ℓ + 1, 𝑛 − ℓ]
Reed Solomon code [46].
Let 𝐶 be a [𝑛, 𝑘, 𝑑] linear error correcting code over Z𝑞 of length
𝑛 and minimum distance 𝑑. Also, let 𝐶⊥ be the dual code of 𝐶 i.e.,
𝐶⊥ consists vectors 𝒚⊥ ∈ Z𝑛
𝑞 such that for all 𝒙 ∈ 𝐶, ⟨𝒙, 𝒚⊥⟩ = 0.
Here, ⟨·, ·⟩ is the inner product operation. Scrape’s PVSS.Verify uses
the following basic fact (Lemma F.1) of linear error correcting code.
We refer readers to [19, Lemma 1] for its proof.
Lemma F.1. If 𝒙 ∈ Z𝑛
𝑞 \ 𝐶, and 𝒚⊥ is chosen uniformly at random
from 𝐶⊥, then the probability that ⟨𝒙, 𝒚⊥⟩ = 1 is exactly 1/𝑞.
The PVSS scheme of Scrape guarantees the IND1-Secrecy prop-
erty as defined in Definition F.2. Intuitively, for any (𝑛, ℓ) PVSS
scheme, IND1-secrecy ensures that prior to the reconstruction
phase, the public information together with the secret keys 𝑠𝑘𝑖
of any set of at most ℓ players gives no information about the secret.
Formally this is stated as in the following indistinguishability based
definition adapted from [31, 47]:
Definition F.2. (IND1-Secrecy) A (𝑛, ℓ) PVSS is said to be IND1-
secret if for any probabilistic polynomial time adversary A corrupt-
ing at most ℓ parties, A has negligible advantage in the following
game played against an challenger.
(1) The challenger runs the Setup phase of the PVSS as the dealer
and sends all public information to A. Moreover, it creates
secret and public keys for all honest nodes, and sends the
corresponding public keys to A.
(2) A creates secret keys for the corrupted nodes and sends the
corresponding public keys to the challenger.
(3) The challenger chooses values 𝑠0 and 𝑠1 at random in the
space of secrets. Furthermore it chooses 𝑏 ← {0, 1} uni-
formly at random. It runs the phase of the protocol with 𝑠0
as secret. It sends A all public information generated in that
phase, together with 𝑠𝑏.
The advantage of A is defined as |Pr[𝑏 = 𝑏′] − 1/2|.
Theorem F.3. (IND1-Secrecy [19, Theorem 1]) Under the Deci-
sional Diffie-Hellman assumption, the PVSS protocol in [19] guar-
antees IND1-secrecy against a static probabilistic polynomial time
adversary that can collude with up to ℓ nodes.
Let 𝑠 be the secret a node (the dealer) with public-private
key pair (𝑠𝑘, 𝑝𝑘) wants to share with set of nodes with public
keys {𝑝𝑘 𝑗} 𝑗 for 𝑗 = 1, 2, . . . , 𝑛. Let 𝑔0, 𝑔1 be two randomly
chosen generators of group G.
PVSS.Share(𝑠, 𝑔0, 𝑛, ℓ, {𝑝𝑘} 𝑗,𝑗=1,2,...,𝑛) → (𝒗, 𝒄, 𝝅):
(1) Sample uniform random 𝑎𝑖 ∈ Z for 𝑖 = 1, 2, . . . , ℓ and let
𝑝(𝑥) = 𝑠 + 𝑎1𝑥 + . . . + 𝑎ℓ𝑥 ℓ;
; and 𝑐 𝑗 := 𝑝𝑘𝑝(𝑗)
(2) Let 𝑣 𝑗 := 𝑔𝑝(𝑗)
(3) Let 𝜋 𝑗 := dleq.Prove(𝑝(𝑗), 𝑔0, 𝑣 𝑗 , 𝑝𝑘 𝑗 , 𝑐 𝑗)
(4) Output 𝒗 = {𝑣1, 𝑣2, . . . , 𝑣𝑛}; 𝒄 = {𝑐1, 𝑐2, . . . , 𝑐𝑛}, and 𝝅 =
, for 𝑗 = 1, . . . , 𝑛.
0
𝑗
{𝜋1, 𝜋2, . . . , 𝜋𝑛}.
PVSS.Verify(𝑔0, 𝑔1, 𝑛, ℓ, {𝑝𝑘} 𝑗,𝑗=1,2,...,𝑛, 𝒗, 𝒄, 𝝅) → 0/1:
(1) Sample a random codeword 𝒚⊥ ∈ 𝐶⊥ where 𝒚⊥ =
[𝑦⊥
1 , 𝑦⊥
2 , . . . , 𝑦⊥
𝑛 ] and check whether
𝑦⊥
𝑘
𝑘
𝑣
= 1G
(4)
𝑛(cid:89)
𝑘=1
where 1G is the identity element of G.
(2) Check whether dleq.Verify(𝜋 𝑗 , 𝑔0, 𝑣 𝑗 , 𝑝𝑘 𝑗 , 𝑐 𝑗) = 1 for all 𝑗.
(3) Output 1 if both checks pass, output 0 otherwise.
Let 𝑇 be the set of valid tuples of the form (˜𝑠𝑖, ˜𝜋𝑖) where
˜𝜋𝑖 = dleq.Prove(𝑠𝑘𝑖, 𝑔1, 𝑝𝑘𝑖, ˜𝑠𝑖, 𝑐𝑖) and |𝑇 |= ℓ + 1, then
PVSS.Recon(𝑔1, {˜𝑠𝑖}𝑖∈𝑇 ) → 𝑔𝑠
1 :
(1) Output (cid:89)
where 𝜇𝑖 =(cid:81)𝑗̸=𝑖
𝑖∈𝑇
(˜𝑠𝑖)𝜇𝑖 =(cid:89)
𝑖∈𝑇
𝑔𝜇𝑖 ·𝑝(𝑖)
1
= 𝑔𝑝(0)
1
(5)
𝑗
𝑗−𝑖 for 𝑖 ∈ 𝑇 are Lagrange coefficients.
Figure 5: Scrape’s PVSS scheme.
Schoenmakers scheme [48]. The scheme allows a node (dealer) to
share a secret 𝑠 ∈ Z𝑞 among 𝑛 nodes, such that any subset of at
least ℓ nodes can reconstruct 𝑔𝑠
1. Here, 𝑔1 is a random generator
of G. Additionally, any subset of ℓ or less nodes, can not learn any
information about the secret 𝑠.
The reconstruction threshold ℓ is chosen in a way such that valid
contribution from at least ℓ nodes are required to recover 𝑔𝑠
1.
A key property of a PVSS scheme is that, not only the recipients
but any third party (with access to recipients’ public keys) can
verify, even before the reconstruction phase begins, that the dealer
has generated the shares correctly without having plaintext access
to the shares.
The PVSS scheme of Scrape [19] is non-interactive in the Random
Oracle model and has three procedures: PVSS.Share, PVSS.Verify,
and PVSS.Recon. A node (dealer) with public-private key pair 𝑝𝑘, 𝑠𝑘,
uses PVSS.Share to share a secret 𝑠, other nodes or external users
use PVSS.Verify to validate the shares, and PVSS.Recon is used to
recover 𝑔𝑠
1. We describe them in detail in Figure 5.
The verification procedure of Scrape’s PVSS uses properties of
error correcting code, specifically the Reed Solomon code [46]. They
use the observation by McEliece and Sarwate [39] that sharing a
Session 10C: Foundations CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2721