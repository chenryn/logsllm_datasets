# 配置 Bash 历史
# 用制表符扩展目录环境变量，并设置 histappend
shopt -s direxpand histappend
# ignoreboth 等同于 ignorespace 和 ignoredup
HISTCONTROL='ignoreboth'
# 控制 `history` 输出中的时间格式
HISTTIMEFORMAT="[%F %T] "
# 无限历史记录
# NB：在新版 Bash 中，任何  
> `ignoredup` 可以让历史不记录重复条目（如果你反复执行同一条命令）。`ignorespace` 会忽略前面有空白的条目，当你在设置一个包含敏感信息的环境变量或者执行一条不想被记录进磁盘的命令时，这就很有用。`ignoreboth`相当于这两条选项的结合体。
> 
> 
> **Dusty Mabe – Redhat首席软件工程师，2020.6.19**
> 
> 
> 
对于命令行重度用户，Bash 有一个 `CDPATH` 环境变量。如果 `CDPATH` 包含一系列供 `cd` 命令搜索的目录，且提供一个相对路径作为第一个参数，那么它会按顺序检查所有列出的目录，寻找匹配的子目录并切换到第一个匹配结果目录。
```
# .bash_profile
# 设置 CDPATH
CDPATH="/var/home/username/favdir1:/var/home/username/favdir2:/var/home/username/favdir3"
# 也可以写成这样
CDPATH="/:~:/var:~/favdir1:~/favdir2:~/favdir3"
export CDPATH
```
`CDPATH` 通常像 `PATH` 一样的方式进行更新 —— 通过在赋值右侧引用自身来保留原来的值。
```
# .bash_profile
# 设置 CDPATH
CDPATH="/var/home/username/favdir1:/var/home/username/favdir2:/var/home/username/favdir3"
# 或者写成这样
CDPATH="/:~:/var:~/favdir1:~/favdir2:~/favdir3"
CDPATH="$CDPATH:~/favdir4:~/favdir5"
export CDPATH
```
`PATH` 是另一个极其重要的变量。它是系统上的命令的搜索路径。注意，有些应用要求将它们自己的目录加入 `PATH` 变量，这样才能正常使用。跟 `CDPATH` 一样，通过在赋值右侧引用原值来追加新值到 `PATH` 变量。如果你希望将新值前置，只需要把原来的值（`$PATH`）放到列表末尾即可。还有注意的是在 Fedora，这一列值通过冒号分隔（`:`）。
```
# .bash_profile
# 添加 PATH 值到 PAHT 环境变量
PATH="$PATH:~/bin:~:/usr/bin:/bin:~/jdk-13.0.2:~/apache-maven-3.6.3"
export PATH
```
命令提示符是另一个流行的自定义选项。它有七个可定制的参数：
> 
> * `PROMPT_COMMAND`：如果设置了，会在每一个主提示符（`$PS1`）出现之前执行该值。
> * `PROMPT_DIRTRIM`：如果设置成大于零的数，则该值用作展开 `\w` 和 `\W` 提示符字符串转义符时保留的尾随目录组件数量。删除的字符将替换为省略号。
> * `PS0`：这个参数的值像 `PS1` 一样展开，在交互式 shell 读取命令之后、执行命令之前展示。
> * `PS1`：主提示符字符串。默认值是 `\s-\v\$` 。
> * `PS2`：次提示符字符串。默认是 `>` 。在显示之前，`PS2` 像 `PS1` 那样展开。
> * `PS3`：这个参数的值用作 `select` 命令的提示符。如果这个变量没有设置，`select` 命令会用 `#?`  作为提示符。
> * `PS4`：这个参数的值像 `PS1` 那样展开，如果设置了 `-x` 选项，这个展开值会在命令行被回显之前作为提示符显示。展开后的值的第一个字符在必要时会复制数次，指示间接层数。默认值是 `+` 。
> 
> 
> **Bash 参考文档** **第五版，Bash 版本 5.0** **2019 年 5 月**
> 
> 
> 
Bash 的这一个方面就可以用整篇文章来讨论。你可以找到许许多多信息和例子。在本文末尾链接的存储库中提供了一些点文件范例，包括提示符重新配置。你可以随意使用该存储库中的例子进行学习和体验。
### 总结
既然你已经掌握了一些 Bash 的工作原理，那就可以轻松修改你的 Bash 点文件，满足你自己的需求和习惯。美化你的提示符，制作一些别名，这样你的电脑才真的属于你。查看 `/etc/profile`、`/etc/bashrc` 和 `/etc/profile.d/` 这些文件的内容，获得一些启发。
你也可以在这里写一些关于终端模拟器的评论。有很多办法可以将你最喜欢的终端，完全配置成你想要的样子。你或许早就想到了，但是通常可以通过……嗯……用户家目录的点文件实现这个目的。终端模拟器也可以作为登录会话启动，有些人总喜欢用登录环境。你使用终端和电脑的姿势，取决于你如何修改（或不修改）你的点文件。
如果你很好奇自己的命令行处于什么会话状态，使用下面这个脚本来判断一下。
```
#!/bin/bash
case "$-" in
   (*i*) echo This shell is interactive ;;
   (*) echo This shell is not interactive ;;
esac
```
把这几行放到一个文件里，加上可执行权限，然后运行，就能看到你当前处于何种类型的 shell。`$-` 在 Bash 中是一个变量，如果是交互式 shell，它会包含字母 `i`。此外，你可以直接输出 `$-` 变量然后检查它的输出中是否含有 `i` 标记。
```
$ echo $-
```
### 参考信息
可以参考以下资料以获取更多信息和示例。Bash 手册也是一个很好的信息来源。请注意，确保你的本地手册页记录了你当前运行的 Bash 版本的特性，因为在网上找到的信息有时可能太老（过时了）或太新（你的系统还没有安装）。
* 
* （在该网站中，你必须要输入一个有效的电子邮箱地址，或者注册，才能下载。）
* 
对本文有各种形式（点文件示例、提示，以及脚本文件）贡献的社区成员：
* Micah Abbott – 首席质量工程师
* John Lebon – 首席软件工程师
* Dusty Mabe – 首席软件工程师
* Colin Walters – 高级首席软件工程师
示例点文件和脚本可以在这个存储库中找到：
* 
请仔细检查上面所提供的存储库中的信息。有些可能已经过时了。里面还包含很多开发中的自定义脚本和 宠物容器   pet container 配置例子，那些不是点文件。我推荐从 John Lebon 的点文件开始学习，从头到尾都含有完善的解说，它们是我见过的最详细的，并且包含了非常好的描述。祝你学得开心！
---
via: 
作者：[Stephen Snow](https://fedoramagazine.org/author/jakfrost/) 选题：[lujun9972](https://github.com/lujun9972) 译者：[nophDog](https://github.com/nophDog) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出