# Memory Performance Tests

| Operations | Unmonitored (MB/sec) | Present % | Absent % |
|------------|-----------------------|-----------|----------|
| Allocate Small Block | 2322.3 | 14.22 | 2704.1 |
| Write | 1967.0 | 1.83 | 1942.9 |

## Table 4: Memory Performance Tests
Results of memory performance tests for unmonitored execution and for Pyrenée’s monitoring with and without parasitic behaviors present. Higher absolute measurements indicate better performance. Percentages indicate performance loss.

### Network Operations Performance

- **Page Loading (sec)**: 3.82 (Unmonitored), 4.95 (Pyrenée, +30%)
- **Network File Copy (sec)**: 39.00 (Unmonitored), 2.63 (Pyrenée, -93%)

**Table 5**: Results of network performance tests for unmonitored execution and for Pyrenée’s monitoring without parasitic behaviors present. Smaller measurements are better. Percentages indicate performance loss.

### Driver Isolation Strategy

We measured the cost of our driver isolation strategy by isolating a heavily-used driver in the UPT, forcing a high volume of page faults handled by our hypervisor-level code. We isolated the networking driver `tcpip.sys` and repeated our previous CPU, memory, and network performance measurements in the new setting without active parasitic behaviors.

#### CPU Operations

| Operations | Unmonitored (MOps/sec) | Pyrenée % |
|------------|-------------------------|-----------|
| Integer Math | 122.0 | 3.55 |
| Floating Point Math | 434.8 | 7.17 |
| Compression | 1467.5 | 2.23 |
| Encryption | 4.11 | 2.38 |
| String Sorting | 1060.8 | 3.85 |

**Table 6**: Effect of isolating the `tcpip.sys` driver on CPU operations for unmonitored execution and for Pyrenée’s monitoring without parasitic behaviors present. Higher measurements are better. Percentages indicate performance loss.

#### Memory Performance

| Operations | Unmonitored (MB/sec) | Pyrenée % |
|------------|-----------------------|-----------|
| Allocate Small Block | 2649.8 | 2.12 |
| Write | 1922.0 | 2.29 |

**Table 7**: Effect of isolating the `tcpip.sys` driver on memory performance for unmonitored execution and for Pyrenée’s monitoring without parasitic behaviors present. Higher measurements are better. Percentages indicate performance loss.

#### Network Performance

| Operations | Unmonitored (sec) | Pyrenée % |
|------------|--------------------|-----------|
| Network File Copy | 38.00 | 51.00 (34.21%) |

**Table 8**: Effect of isolating the `tcpip.sys` driver on network performance for unmonitored execution and for Pyrenée’s monitoring without parasitic behaviors present. Smaller measurements are better. Percentages indicate performance loss.

### False Positive Analysis

Pyrenée identifies malicious code on an infected system when it receives an alert from a NIDS. False positives can occur if Pyrenée misidentifies benign processes or drivers as malicious. There are two main reasons for this:

1. **NIDS False Positives**: The NIDS may mischaracterize benign traffic as malicious, leading to false alerts.
2. **Sensor Errors**: The network or host attribution sensors may collect incorrect information, leading to false positives.

### Conclusions

We demonstrated the usefulness of identifying malicious code during attacks using Pyrenée, a prototype system for automatic discovery of unknown malicious code. Pyrenée correlates network-level events with host-level activities using multiple sensors and a correlation engine. Our performance analysis showed that Pyrenée is suitable for real-world deployment.

### Acknowledgments

We thank our shepherd, Davide Balzarotti, and our anonymous reviewers for their helpful comments. This work was supported by the National Science Foundation under contract number CNS-0845309. Any opinions, findings, and conclusions expressed in this material are those of the authors and do not reflect the views of the NSF or the U.S. Government.

### References

[References listed here as per the original text]