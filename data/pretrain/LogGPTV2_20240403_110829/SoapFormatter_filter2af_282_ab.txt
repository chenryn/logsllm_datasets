        {
            public static void Main(string[] args)
            {
                System.Configuration.ConfigurationManager.AppSettings.Set("microsoft:WorkflowComponentModel:DisableActivitySurrogateSelectorTypeCheck", "true");
                SoapFormatter fmt = new SoapFormatter();
                MemoryStream stm = new MemoryStream();
                var ss = new SurrogateSelector();
                ss.AddSurrogate(typeof(Person), new StreamingContext(StreamingContextStates.All), new PersonSerializeSurrogate());
                fmt.SurrogateSelector = ss;
                fmt.Serialize(stm, new Person("jack"));
                stm.Position = 0;
                Console.WriteLine(fmt.Deserialize(stm));
                stm.Position = 0;
                var fmt2 = new SoapFormatter();
                Console.WriteLine(fmt2.Deserialize(stm));
                Console.ReadKey();
            }
        }
    }
自定义了一个PersonSerializeSurrogate代理器用于给Person类进行序列化和反序列化，即使Person没有标注Serializable可序列化，但是仍然可以被序列化。
虽然输出了jack，但是我们另一个formatter即fmt2不能正确反序列化jack对象，因为fmt2没有设置代理选择器。而在审计的实际过程中，目标的formatter根本不会指定我们自实现的代理选择器，他都不知道我们自己实现的代理选择器是什么样的。
再来看这条链，牛就牛在发现了[ActivitiySurrogateSelector](https://msdn.microsoft.com/en-us/library/system.workflow.componentmodel.serialization.activitysurrogateselector\(v=vs.110).aspx)这个类中的ObjectSurrogate，通过这个内部类我们可以反序列化任何对象。看一下这个类的使用
    using System;
    using System.IO;
    using System.Runtime.Serialization;
    using System.Runtime.Serialization.Formatters.Soap;
    namespace SoapDeserialization
    {
        class NonSerializable
        {
            private string _text;
            public NonSerializable(string text)
            {
                _text = text;
            }
            public override string ToString()
            {
                return _text;
            }
        }
        // Custom serialization surrogate
        class MySurrogateSelector : SurrogateSelector
        {
            public override ISerializationSurrogate GetSurrogate(Type type, StreamingContext context, out ISurrogateSelector selector)
            {
                selector = this;
                if (!type.IsSerializable)
                {
                    Type t = Type.GetType("System.Workflow.ComponentModel.Serialization.ActivitySurrogateSelector+ObjectSurrogate, System.Workflow.ComponentModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");
                    return (ISerializationSurrogate)Activator.CreateInstance(t);
                }
                return base.GetSurrogate(type, context, out selector);
            }
        }
        class Program
        {
            public static void Main(string[] args)
            {
                System.Configuration.ConfigurationManager.AppSettings.Set("microsoft:WorkflowComponentModel:DisableActivitySurrogateSelectorTypeCheck", "true");
                SoapFormatter fmt = new SoapFormatter();
                MemoryStream stm = new MemoryStream();
                fmt.SurrogateSelector = new MySurrogateSelector();
                fmt.Serialize(stm, new NonSerializable("Hello World!"));
                stm.Position = 0;
                var fmt2 = new SoapFormatter();
                Console.WriteLine(fmt2.Deserialize(stm));
                Console.ReadKey();
            }
        }
    }
NonSerializable仍然没有标记Serializable，但是在获取代理器的时候返回了一个ActivitySurrogateSelector+ObjectSurrogate的实例，使得NonSerializable类仍旧可以被序列化。并且fmt2并没有指定代理选择器的前提下，仍然可以正常反序列化对象，这样就解决了上文的限制。
使用dnspy跟进序列化的过程:
在System.Runtime.Serialization.Formatters.Soap.WriteObjectInfo.InitSerialize()获取到ActivitySurrogateSelector+ObjectSurrogate代理器，用代理器进行序列化和反序列化。查看[微软开源的代码](https://github.com/Microsoft/referencesource/blob/4fe4349175f4c5091d972a7e56ea12012f1e7170/System.Workflow.ComponentModel/AuthoringOM/Serializer/ActivitySurrogateSelector.cs#L135)可见：
同样实现GetObjectData和SetObjectData，在GetObjectData调用SetType设置类型为其子类ObjectSerializedRef
该子类可以序列化，也就是说，上文中ObjectSurrogate.GetObjectData()将原本不可被序列化的对象存储到ObjectSerializedRef这个可以被序列化的类实例中，由此实现序列化原本不可序列化的类。
那么到现在我们的视线就不必局限于可序列化的类了，原作者的眼光就转向了LINQ。LINQ是C#中的语言集成查询语法，像这样：
    public static void Main(string[] args)
    {
        var word = "hello from linq.";
        var words = word.Split(' ');
        var q1 = from s in words
            where s.ToLower().Contains('o')
            select s;
        Console.WriteLine(q1);
        foreach (var item in q1)
        {
            Console.WriteLine(item);
        }
        Console.ReadKey();
    }
输出
    System.Linq.Enumerable+WhereArrayIterator`1[System.String]
    hello
    from