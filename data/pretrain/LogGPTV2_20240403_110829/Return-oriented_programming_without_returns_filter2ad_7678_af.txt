sequences are rare but a single one used as a trampoline sufﬁces to
chain together other instruction sequences that each end in an indi-
rect jump, which makes it possible to construct a Turing-complete
13http://code.google.com/p/androidterm/
14In particular, Tan and Croft [44] identiﬁed various vulnerabilities
in native code of the JDK (Java Development Kit).
ULB Addresssystem()blx r3spUpdate−Load−Branch (ULB)Sequence 1adds r0,r4,#0blx r3Sequence 2ldr r5,[r6,#124]adds r6,#4blx r5Sequence 3am startTermldr r3,[sp,#0]570gadget set without return instructions given large Linux (x86) or
Android (ARM) platform libraries.
Because it does not make use of return instructions, our new at-
tack has negative implications for recently proposed classes of de-
fense against return-oriented programming that detect too-frequent
use of returns in the instruction stream, that detect violations of the
LIFO invariant normally maintained for the return-address stack,
or that rewrite binaries to avoid use of the return instruction.
The major open problem suggested by our work is whether it is
possible to ﬁnd some property that all return-oriented attacks prov-
ably must share, but that is more speciﬁc (and therefore more ef-
ﬁciently checked) than CFI, which would rule out all control-ﬂow
attacks. The use of return instructions to chain sequences appeared
to be such a property, but we have shown that it is not. Such a prop-
erty could be used as part of a defense against return-oriented pro-
gramming, assuming that it can be efﬁciently tested. In the absence
of such a narrowly tailored property, it is not clear that effective
defenses against return-oriented programming can be deployed at
lower overhead than full CFI.
8. ACKNOWLEDGMENTS
We thank Thorsten Holz, Tim Kornau, Benny Pinkas, Stefan
Savage and Geoff Voelker for helpful discussions. This material
is based upon work supported by the National Science Foundation
under Grant No. 0831532. Any opinions, ﬁndings, and conclu-
sions or recommendations expressed in this material are those of
the authors and do not necessarily reﬂect the views of the National
Science Foundation. The second author was supported by EU FP7
project CACE and the third author by the Erasmus Mundus Exter-
nal Co-operation Window Programme of the European Union.
9. REFERENCES
[1] M. Abadi, M. Budiu, Ú. Erlingsson, and J. Ligatti.
Control-ﬂow integrity: Principles, implementations, and
applications. In V. Atluri, C. Meadows, and A. Juels, editors,
Proceedings of CCS 2005, pages 340–53. ACM Press, Nov.
2005.
[2] ARM Limited. Procedure call standard for the ARM
architecture.
http://infocenter.arm.com/help/topic/
com.arm.doc.ihi0042d/IHI0042D_aapcs.pdf,
2009.
[3] E. Buchanan, R. Roemer, H. Shacham, and S. Savage. When
good instructions go bad: Generalizing return-oriented
programming to RISC. In P. Syverson and S. Jha, editors,
Proceedings of CCS 2008, pages 27–38. ACM Press, Oct.
2008.
[4] S. Checkoway, A. J. Feldman, B. Kantor, J. A. Halderman,
E. W. Felten, and H. Shacham. Can DREs provide
long-lasting security? The case of return-oriented
programming and the AVC Advantage. In D. Jefferson, J. L.
Hall, and T. Moran, editors, Proceedings of EVT/WOTE
2009. USENIX/ACCURATE/IAVoSS, Aug. 2009.
[5] S. Checkoway and H. Shacham. Escape from return-oriented
programming: Return-oriented programming without returns
(on the x86). Technical Report CS2010-0954, UC San
Diego, Feb. 2010.
[6] P. Chen, H. Xiao, X. Shen, X. Yin, B. Mao, and L. Xie.
DROP: Detecting return-oriented programming malicious
code. In A. Prakash and I. Sengupta, editors, Proceedings of
ICISS 2009, volume 5905 of LNCS, pages 163–77.
Springer-Verlag, Dec. 2009.
[7] T. Chiueh and F.-H. Hsu. RAD: A compile-time solution to
buffer overﬂow attacks. In P. Dasgupta and W. Zhao, editors,
Proceedings of ICDCS 2001, pages 409–17. IEEE Computer
Society, Apr. 2001.
[8] J. R. Crandall, S. F. Wu, and F. T. Chong. Experiences using
Minos as a tool for capturing and analyzing novel worms for
unknown vulnerabilities. In K. Julisch and C. Krügel,
editors, Proceedings of DIMVA 2005, volume 3548 of LNCS,
pages 32–50. Springer-Verlag, July 2005.
[9] D. Dai Zovi. Practical return-oriented programming.
SOURCE Boston 2010, Apr. 2010. Presentation. Slides:
http://trailofbits.files.wordpress.com/
2010/04/practical-rop.pdf.
[10] dark spyrit. Win32 buffer overﬂows (location, exploitation
and prevention). Phrack Magazine, 55(15), Sept. 1999.
http://www.phrack.org/archives/55/p55_
0x0f_Win32%20Buffer%20Overflows..._by_
dark%20spyrit.txt.
[11] L. Davi, A. Dmitrienko, A.-R. Sadeghi, and M. Winandy.
Return-oriented programming without returns on ARM.
Technical Report HGI-TR-2010-002, Ruhr-University
Bochum, July 2010. Online: http://www.trust.rub.
de/home/_publications/DaDmSaWi2010/.
[12] L. Davi, A.-R. Sadeghi, and M. Winandy. Dynamic integrity
measurement and attestation: Towards defense against
return-oriented programming attacks. In N. Asokan,
C. Nita-Rotaru, and J.-P. Seifert, editors, Proceedings of STC
2009, pages 49–54. ACM Press, Nov. 2009.
[13] L. Davi, A.-R. Sadeghi, and M. Winandy. ROPdefender: A
detection tool to defend against return-oriented programming
attacks. Technical Report HGI-TR-2010-001,
Ruhr-University Bochum, Mar. 2010. Online:
http://www.trust.rub.de/home/
_publications/LuSaWi10/.
[14] Ú. Erlingsson, M. Abadi, M. Vrable, M. Budiu, and
G. Necula. XFI: Software guards for system address spaces.
In B. Bershad and J. Mogul, editors, Proceedings of OSDI
2006, pages 75–88. USENIX, Nov. 2006.
[15] A. Francillon and C. Castelluccia. Code injection attacks on
Harvard-architecture devices. In P. Syverson and S. Jha,
editors, Proceedings of CCS 2008, pages 15–26. ACM Press,
Oct. 2008.
[16] A. Francillon, D. Perito, and C. Castelluccia. Defending
embedded systems against control ﬂow attacks. In
S. Lachmund and C. Schaefer, editors, Proceedings of
SecuCode 2009, pages 19–26. ACM Press, Nov. 2009.
[17] M. Frantzen and M. Shuey. StackGhost: Hardware facilitated
stack protection. In D. Wallach, editor, Proceedings of
USENIX Security 2001, pages 55–66. USENIX, Aug. 2001.
[18] S. Gupta, P. Pratap, H. Saran, and S. Arun-Kumar. Dynamic
code instrumentation to detect and recover from return
address corruption. In N. Gupta and A. Podgurski, editors,
Proceedings of WODA 2006, pages 65–72. ACM Press, May
2006.
[19] R. Hund. Listing of gadgets constructed on ten evaluation
machines. Online: http://pi1.informatik.uni-
mannheim.de/filepool/projects/return-
oriented-rootkit/measurements-ro.tgz, May
2009.
[20] R. Hund, T. Holz, and F. Freiling. Return-oriented rootkits:
Bypassing kernel code integrity protection mechanisms. In
571F. Monrose, editor, Proceedings of USENIX Security 2009,
pages 383–98. USENIX, Aug. 2009.
[21] Intel Corporation. IA-32 Intel Architecture Software
Developer’s Manual, Volume 3: System Programming Guide,
2001.
[22] V. Iozzo and C. Miller. Fun and games with Mac OS X and
iPhone payloads. Black Hat Europe 2009, Apr. 2009.
Presentation. Slides:
http://www.blackhat.com/presentations/
bh-europe-09/Miller_Iozzo/BlackHat-
Europe-2009-Miller-Iozzo-OSX-IPhone-
Payloads-whitepaper.pdf.
[23] T. Kornau. Return oriented programming for the ARM
architecture. Master’s thesis, Ruhr-Universität Bochum, Jan.
2010. Online:
http://zynamics.com/downloads/kornau-
tim--diplomarbeit--rop.pdf.
[24] S. Krahmer. x86-64 buffer overﬂow exploits and the
borrowed code chunks exploitation technique, Sept. 2005.
http://www.suse.de/~krahmer/no-nx.pdf.
[25] J. Li, Z. Wang, X. Jiang, M. Grace, and S. Bahram.
Defeating return-oriented rootkits with “return-less” kernels.
In G. Muller, editor, Proceedings of EuroSys 2010, pages
195–208. ACM Press, Apr. 2010.
[26] F. Lidner. Developments in Cisco IOS forensics.
CONFidence 2.0, Nov. 2009. Presentation. Slides:
http://www.recurity-labs.com/content/
pub/FX_Router_Exploitation.pdf.
[27] D. Litchﬁeld. Defeating the stack based buffer overﬂow
prevention mechanism of Microsoft Windows 2003 Server,
Sept. 2003. Online:
http://www.ngssoftware.com/papers/
defeating-w2k3-stack-protection.pdf.
[28] C.-K. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser,
G. Lowney, S. Wallace, V. J. Reddi, and K. Hazelwood. Pin:
Building customized program analysis tools with dynamic
instrumentation. In V. Sarkar and M. W. Hall, editors,
Proceedings of PLDI 2005, pages 190–200. ACM Press,
June 2005.
[29] J. McDonald. Defeating Solaris/SPARC non-executable
stack protection. Bugtraq, Mar. 1999. Online:
http://seclists.org/bugtraq/1999/Mar/4.
[30] R. Naraine. Pwn2Own 2010: iPhone hacked, SMS database
hijacked. Online:
http://blogs.zdnet.com/security/?p=5836,
Mar. 2010.
[31] Nergal. The advanced return-into-lib(c) exploits: PaX case
study. Phrack Magazine, 58(4), Dec. 2001.
http://www.phrack.org/archives/58/p58_
0x04_Advanced%20return-into-
lib(c)%20exploits%20(PaX%20case%20study)
_by_nergal.txt.
[32] N. Nethercote and J. Seward. Valgrind: A framework for
heavyweight dynamic binary instrumentation. In J. Ferrante
and K. S. McKinley, editors, Proceedings of PLDI 2007,
pages 89–100. ACM Press, June 2007.
[33] T. Newsham. Re: Smashing the stack: prevention? Bugtraq,
Apr. 1997. Online:
http://seclists.org/bugtraq/1997/Apr/129.
[34] PaX Team. What the future holds for PaX, Mar. 2003.
Online: http://pax.grsecurity.net/docs/pax-
future.txt.
[35] M. Prasad and T. Chiueh. A binary rewriting defense against
stack based overﬂow attacks. In B. Noble, editor,
Proceedings of USENIX Technical 2003, pages 211–24.
USENIX, June 2003.
[36] G. Richarte. Re: Future of buffer overﬂows? Bugtraq, Oct.
2000. Online: http:
//seclists.org/bugtraq/2000/Nov/32 and
http://seclists.org/bugtraq/2000/Nov/26.
[37] G. Richarte. Insecure programming by example: Esoteric #2.
Online: http://community.corest.com/~gera/
InsecureProgramming/e2.html, July 2001.
[38] R. Roemer. Finding the bad in good code: Automated
return-oriented programming exploit discovery. Master’s
thesis, UC San Diego, Mar. 2009. Online: https://
cseweb.ucsd.edu/~rroemer/doc/thesis.pdf.
[39] R. Roemer, E. Buchanan, H. Shacham, and S. Savage.
Return-oriented programming: Systems, languages, and
applications. Manuscript, 2009. Online:
https://cseweb.ucsd.edu/~hovav/papers/
rbss09.html.
[40] D. Sehr, R. Muth, C. Bifﬂe, V. Khimenko, E. Pasko,
K. Schimpf, B. Yee, and B. Chen. Adapting software fault
isolation to contemporary CPU architectures. In I. Goldberg,
editor, Proceedings of USENIX Security 2010, pages 1–11.
USENIX, Aug. 2010.
[41] H. Shacham. The geometry of innocent ﬂesh on the bone:
Return-into-libc without function calls (on the x86). In
S. De Capitani di Vimercati and P. Syverson, editors,
Proceedings of CCS 2007, pages 552–61. ACM Press, Oct.
2007.
[42] S. Sinnadurai, Q. Zhao, and W. fai Wong. Transparent
runtime shadow stack: Protection against malicious return
address modiﬁcations. http://citeseerx.ist.psu.
edu/viewdoc/summary?doi=10.1.1.120.5702,
2008.
[43] A. Sotirov and M. Dowd. Bypassing browser memory
protections in Windows Vista. Online:
http://www.phreedom.org/research/
bypassing-browser-memory-protections/,
Aug. 2008. Presented at Black Hat 2008.
[44] G. Tan and J. Croft. An empirical security study of the native
code in the JDK. In P. Van Oorschot, editor, Proceedings of
USENIX Security 2008, pages 365–77. USENIX, July 2008.
[45] Vendicator. Stack Shield: A "stack smashing" technique
protection tool for Linux.
http://www.angelfire.com/sk/stackshield.
[46] P. Vreugdenhil. Pwn2Own 2010 Windows 7 Internet
Explorer 8 exploit. Online:
vreugdenhilresearch.nl/Pwn2Own-2010-
Windows7-InternetExplorer8.pdf, Mar. 2010.
[47] B.-J. S. Wever. ALPHA2: Zero tolerance, Unicode-proof
uppercase alphanumeric shellcode encoding. Online:
http://skypher.com/wiki/index.php/ALPHA2,
2004.
[48] B. Yee, D. Sehr, G. Dardyk, J. B. Chen, R. Muth,
T. Ormandy, S. Okasaka, N. Narula, and N. Fullagar. Native
Client: A sandbox for portable, untrusted x86 native code. In
A. Myers and D. Evans, editors, Proceedings of IEEE
Security and Privacy (“Oakland”) 2009, pages 79–93. IEEE
Computer Society, May 2009.
572