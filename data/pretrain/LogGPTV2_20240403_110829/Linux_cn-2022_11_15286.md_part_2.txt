有一些 [基于命令行的](https://itsfoss.com/command-line-text-editors-linux/) 文本编辑器可以达到这个目的。Ubuntu 预装了 Nano 编辑器，它比 Vim、Emacs 等更容易使用。
**如果你好奇它们有什么不同**，请阅读我们的 [Nano vs. Vim 对比](https://itsfoss.com/vim-vs-nano/) 文章。
更容易使用并不意味着和基于 GUI 的文本编辑器一样舒适。你将不得不使用键盘快捷键来移动、修改、保存和退出文件。
要用 `nano` 打开一个新的、未命名的文件，请使用：
```
nano
```
要在 nano 中编辑一个现有的文件，请使用：
```
nano filename
```
在这两种情况下，你都应该看到一个类似这样的界面。
![nano 命令示例](/data/attachment/album/202211/24/184930yadncah3czi3p3i2.png)
要保存（或放弃修改）并退出编辑器界面，请使用 `Ctrl+x` 键。
请参考我之前创建的 [nano 初学者指南](https://itsfoss.com/nano-editor-guide/) 来适应它。
#### 11、clear 命令：清除终端屏幕
Nano 感觉很复杂，对吗？让我来分享一个简单的命令。
`clear` 命令可以清除终端。就是这样。
```
clear
```
你为什么需要这样做呢？嗯，如果你的终端屏幕充斥着随机的东西，而你想做一些新的事情。清理终端就像清理黑板或在你的笔记本上打开一个新页。
#### 12、ps 命令：检查和管理进程
`ps` 命令是用来管理你系统上运行的进程的。每个进程都有一个相关的 ID，称为 PID，它可以用于各种目的，例如 [终止一个进程](https://itsfoss.com/how-to-find-the-process-id-of-a-program-and-kill-it-quick-tip/)。
```
~$ ps
    pid tty time cmd
  15358 ?        00:00:00 bash
  15404 ? 00:00:00 ps
```
这里，
* `PID`：进程 ID
* `TTY`：与进程相关的控制终端（现在已经不那么重要了）
* `TIME`：总的 CPU 使用时间
* `CMD`：运行该进程的命令名称
但一个系统不可能只运行两到三个进程，不是吗？要查看所有用户运行的所有进程，请使用：
```
ps aux
```
这将给出一个庞大的进程列表和关于它们的更多细节。如果你运行这个命令，现在将是使用 `clear` 命令的绝佳时机。
![进程列表](/data/attachment/album/202211/24/185014jzb18h8l6hhbhnhj.jpg)
推荐阅读：
> 
> **[ps 命令示例](https://linuxhandbook.com/ps-command/)**
> 
> 
> 
#### 13、top 命令：系统监控
`ps` 命令给你提供了所有正在运行的进程，而 `top` 命令给你提供了进程和系统资源消耗的实时视图。
```
top
```
把它看作是 Linux 中任务管理器的终端版本。通过 `top` 命令，你会看到很多有趣的细节。
我主要使用 `top` 命令来检查哪个进程占用了太多的 CPU 或内存。如果你有兴趣做实验，还有 [更好的 top 替代品](https://itsfoss.com/linux-system-monitoring-tools/)。
![top 命令](/data/attachment/album/202211/24/184930vaiepi1rvipfz0kp.png)
要 [停止运行的 top 命令](https://itsfoss.com/stop-program-linux-terminal/)，请使用 `Ctrl+C` 键盘快捷键。
推荐阅读：
> 
> **[有效使用 top 命令作为任务管理器](https://linuxhandbook.com/top-command/)**
> 
> 
> 
#### 14、lsblk 命令： 列出磁盘和分区
`lsblk` 命令列出了你系统中所有的块设备。用非常简单（技术上不完全准确）的术语来说，它显示的是磁盘和分区。
```
~# lsblk
NAME    MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTS
loop0     7:0    0 79.9M  1 loop /snap/lxd/22923
loop1     7:1    0  103M  1 loop /snap/lxd/23541
loop2     7:2    0 63.2M  1 loop /snap/core20/1623
loop3     7:3    0   48M  1 loop /snap/snapd/17336
loop4     7:4    0   48M  1 loop /snap/snapd/17029
loop6     7:6    0 63.2M  1 loop /snap/core20/1634
vda     252:0    0   25G  0 disk 
├─vda1  252:1    0 24.9G  0 part /
├─vda14 252:14   0    4M  0 part 
└─vda15 252:15   0  106M  0 part /boot/efi
vdb     252:16   0  466K  1 disk 
~#
```
#### 15、fdisk 命令：列出并管理磁盘和分区
另一个类似但更好的命令是 `fdisk` 命令。它可以让你操作磁盘的分区。这意味着你可以用这个命令创建新的分区，删除和调整现有分区的大小。
你还可以用它来列出系统中所有的块设备，包括 [回环设备](https://itsfoss.com/loop-device-linux/)。
```
sudo fdisk -l
```
如果你有许多分区、磁盘和回环设备（由 Snap 应用程序创建），输出结果可能是巨大的。我在这里展示的是输出的相关部分：
```
Disk /dev/vda: 25 GiB, 26843545600 bytes, 52428800 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: gpt
Disk identifier: 0B7C796D-51CD-4DD4-962A-7D94B31690E2
Device      Start      End  Sectors  Size Type
/dev/vda1  227328 52428766 52201439 24.9G Linux filesystem
/dev/vda14   2048    10239     8192    4M BIOS boot
/dev/vda15  10240   227327   217088  106M EFI System
```
#### 16、find 命令：搜索文件
即使作为一个桌面用户，你也会遇到在 Linux 命令行中搜索文件的情况。
`find` 命令是一个用于此目的的广泛而通用的命令。它有 50 多个选项，而你可能永远不会需要所有的选项。
下面是一个 `find` 命令的例子，它将给你提供当前目录中所有以 `.txt` 扩展名结尾的文件。
```
find . -type f -name "*.txt"
```
其他常见的例子包括按大小、修改时间等查找文件。你可以 [将 find 与 exec](https://linuxhandbook.com/find-exec-command/) 或 [xargs](https://linuxhandbook.com/xargs-command/) 结合起来，对 `find` 命令的结果采取行动。例如，你可以寻找所有的 `.txt` 文件并选择删除它们。
推荐阅读：
> 
> **[find 命令示例](https://linuxhandbook.com/find-command-examples/)**
> 
> 
> 
#### 17、grep 命令：在文件内容中搜索
`find` 命令根据文件的名称和类型来搜索文件。如果你想根据文件的内容进行搜索，你可以使用 `grep`命令。
因此，与其寻找所有以 `.txt` 结尾的文件，不如用 `grep` 寻找所有包含文本 `foss` 的文件。
```
grep -ri search_term
```
![grep 命令示例](/data/attachment/album/202211/24/184930zn3l5clzc59andxw.png)
想学习更多吗？这里有一些更多的 [grep 命令示例](https://linuxhandbook.com/grep-command-examples/)。方便的 [grep 速查表](https://linuxhandbook.com/grep-command-cheatsheet/) 应该可以帮助你。
#### 18、kill 命令：终止进程
暴力不是答案......它是解决方案。
开个玩笑！
如果你有一个行为不端的进程，占用了太多的系统资源，你可以 [找到它，然后终止](https://itsfoss.com/how-to-find-the-process-id-of-a-program-and-kill-it-quick-tip/) 它，[使用 kill 命令](https://linuxhandbook.com/kill-process/) 就行。
```
sudo kill -9 process_ID_or_Name
```
正如你在上面的命令中看到的，你需要知道进程 ID（PID）或进程名称来终止它。你可以使用 `ps` 或 `top` 命令来获得 PID或确切的进程名称。
```
ps aux | grep -i “name of your desired program”
```
你注意到 `grep` 命令的使用了吗？你已经在利用这个列表中提到的命令了。
![find kill process](/data/attachment/album/202211/24/184930xtti493m9tapdiit.png)
我不知道你怎么想的，但是当我寻找流氓进程来终止时，我觉得自己就像 [《飓风营救》中的连姆·尼森](https://www.imdb.com/title/tt0936501/?ref_=tt_urv)。
![Taken meme find you kill you](/data/attachment/album/202211/24/184931y4brb4dwwardpmjs.jpg)
#### 19、history 命令：回头看看你过去运行了哪些命令
比如，你在几天前使用了一个特定的 Linux 命令。现在你需要再次运行它，但你不能正确地想起它。
你可以按上下方向键。
这对许多 Linux 用户来说是一个熟悉的场景：这就是 `history` 命令的作用。
在 Ubuntu 中，你的 Shell 会保存你所运行的命令的历史。在终端输入 `history`，你会看到你过去运行的命令的历史。
![history 命令](/data/attachment/album/202211/24/184931gze06705t3uoq6h3.png)
你可以选择从历史记录中运行一个条目，使用其编号，像这样。
```
!number
```
但即使是历史记录也可能是巨大的，所以（再次）使用 `grep` 命令来过滤你的搜索词。
```
~$ history | grep aux
 1915  ps aux
 1952  ps aux | grep -i spotify
 1955  ps -aux | grep -i calculator
 1957  ps -aux | grep -i calculator
 1959  ps -aux | grep -i calculator
 1970  history | grep aux
```
还有一种方法可以进入命令历史并进行搜索。按 `Ctrl+R`，然后输入搜索词。
推荐阅读：
> 
> **[history 命令示例](https://linuxhandbook.com/history-command/)**
> 
> 
> 
#### 20、chmod 命令：改变文件权限
我强烈建议在这个阶段阅读有关 [Linux 文件权限](https://linuxhandbook.com/linux-file-permissions/)。这将有助于你更好地理解，而不是盲目地运行 [chmod 命令](https://linuxhandbook.com/chmod-command/)。
`chmod`（“ 改变模式   change mode ”）命令是用来改变文件的权限的。
这个命令最常见的用途是当你想让一个文件可执行时。有一个Shell脚本？像这样让它可执行：
```
chmod u+x file-executable
```
还有更多的使用情况，使 `chmod`成为 Ubuntu 用户必须知道的命令。
**有趣的事实**：`chmod 777` 命令为所有用户提供了所有的权限。这代表了我们的座右铭是 “让每个人都能获得知识”。
#### 21、lshw 命令：获取硬件细节
在 Linux 中，有大量的命令行 [工具可以用来获取硬件细节](https://itsfoss.com/hardinfo/) 和其他系统信息。
可能预装在 Ubuntu 上的是 `lshw`（“ 列出硬件   list hardware ”的缩写）。