### Connections and TLB Poisoning
The adversary exploits the window of opportunity between two connections to poison the TLB (Translation Lookaside Buffer) entries of the `testcrypto` buffer. This allows the attacker to manipulate the TLB entries, potentially leading to security vulnerabilities.

### Pattern Matching Evaluation
We evaluated the performance of pattern matching by repeating the attack steps 100 times and performing on-the-fly pattern matching each time. In 98 out of the 100 trials, the adversary successfully recognized the pattern and located the gPA (guest Physical Address). The average time to locate the pattern was 0.10137 seconds, with a standard deviation of 0.02460 seconds.

### End-to-End Attack Success Rate
Next, we assessed the success rate of end-to-end attacks. The adversary conducted these attacks in the victim VM, using an incorrect password for SSH connections. The attacks were repeated 20 times, and in 17 out of the 20 attempts, the adversary was able to log in with the incorrect password. The three failed cases can be attributed to two possible reasons: 
1. The reserved TLB entries might have been evicted before use.
2. There were false positives in the pattern matching process.
However, the adversary can always retry the attack the next time a legitimate user logs in.

## Discussion and Countermeasures

### TLB Poisoning on SEV-SNP
Although we have not tested TLB Poisoning Attacks on SEV-SNP processors, feedback from the AMD team indicates that SEV-SNP has addressed the TLB misuse problem. The latest AMD architecture programmer’s manual [2] introduces new fields in the VMSA (Virtual Machine Save Area): TLB_ID (offset 3d0h) and PCPU_ID (offset 3d8h). However, it is unclear from public documents how these fields enforce additional TLB flushes. We hypothesize that the hardware uses TLB_ID and PCPU_ID as parts of TLB tags to identify vCPU and TLB entry ownership. Our inspection of the source code of SNP software support (branch: sev-snp-devel) [4] did not reveal any software functions that control these two VMCB fields, suggesting that they are managed solely by the hardware. The hypervisor can still use the TLB_CONTROL field to enforce TLB flushes but cannot deliberately skip them.

### Comparison with Known Attacks
Previous works have compromised the confidentiality and/or integrity of SEV by:
- Replacing unprotected I/O traffic [22]
- Manipulating NPT (Nested Page Table) mapping [27, 28]
- Exploiting unauthenticated encryption [7, 9, 32]

These vulnerabilities can be mitigated by SEV-SNP through the Reversed Map table (RMP), which establishes a unique mapping between each system physical address and either a guest physical address or a hypervisor physical address. The RMP also records the ownership of each system physical address (e.g., a hypervisor page, a hardware page, or an SEV-SNP VM's page) along with the ASID. For SEV-SNP VMs, the RMP checks the correctness and ownership after a nested page table walk. Only if the ownership is correct will the mapping between the guest virtual address and the system physical address be cached in the TLB. This ownership check prevents the hypervisor from remapping the guest physical address to another system physical address, thereby mitigating attacks that rely on NPT manipulation. Additionally, the RMP restricts the hypervisor's ability to write to the guest VM's memory pages, thus mitigating attacks based on unauthenticated encryption and unprotected I/O operations.

In contrast, this work is the first to demystify how TLB isolation is performed in SEV and the first to demonstrate the security risks caused by hypervisor-controlled TLB flushes. TLB Poisoning Attacks do not rely on known vulnerabilities such as the lack of authenticated memory encryption, NPT protection, or I/O protection, and RMP alone does not prevent TLB Poisoning Attacks.

### Countermeasures
TLB Poisoning Attacks affect all SEV and SEV-ES servers, including all first and second-generation EPYC server CPUs (i.e., Zen 1 and Zen 2 architecture). Older processors may use a microcode patch to enforce a TLB flush during VMRUN for all SEV/SEV-ES vCPUs. From the software side, to mitigate TLB Poisoning Attacks, we recommend that all network-related applications (e.g., HTTPS, FTP, and SSH servers) use `exec()` to ensure a completely new address space for each new connection.

## Related Work

Since its debut in 2016, several design flaws in AMD SEV have been reported, including:
- Unencrypted VMCB [29, 30]
- Unprotected I/O interface [22]
- Unprotected memory mapping [12, 27, 28]
- Unauthenticated memory encryption [7, 9, 32]
- Unauthenticated ASID [21]

### Unencrypted VMCB
The unencrypted VMCB vulnerability applies only to SEV and was the key reason for AMD's release of SEV-ES. With SEV, unencrypted VMCB leads to numerous attacks (e.g., [30]). AMD released SEV-ES in February 2017.

### Lack of Memory Integrity
Most of the remaining attacks can work on SEV-ES. Li et al. [22] studied unencrypted I/O operations on SEV and SEV-ES. On SEV, peripheral devices (e.g., disk, network interface card) are not supported to directly read/write guest VMs' memory with the corresponding Kvek. Thus, an additional buffer area is reserved and maintained by the guest VM, providing an interface for the hypervisor to generate encryption/decryption oracles during I/O transmission. Hetzelt et al. [12] first studied memory mapping problems caused by hypervisor-controlled nested page tables on SEV. These types of attacks have been further explored by others [27, 28].

### Lack of Memory Confidentiality
SEV (including SEV-ES and SEV-SNP) leaves read access to the hypervisor for performance reasons, which gives attackers the chance to steal secrets by monitoring ciphertext changes. Li et al. [20] studied an unexplored ciphertext side channel against all SEV, SEV-ES, and SEV-SNP. Attackers can intercept ciphertext changes inside the VMSA area and infer the VM's internal register states. The authors presented the CIPHERLEAKS attack, showing that attackers can steal RSA's private key and ECDSA signature's nonce in the latest cryptography library by monitoring registers' ciphertext changes. CIPHERLEAKS is believed to be the first attack against SEV-SNP.

### Unauthenticated ASID
Crossline attacks [21] studied ASID misuse and the "Security-by-Crash" principle of AMD SEV and SEV-ES. ASID is used as tags in TLB entries and cache lines, and as the identifier of memory encryption keys in AMD-SP. However, the hypervisor manages the ASID. AMD relies on the "Security-by-Crash" principle to prevent ASID misuses, expecting that an incorrect ASID will crash the VM immediately. The authors showed that by assigning the ASID of a victim VM to a helper VM, the adversary could extract the victim VM's arbitrary memory block with the PTE format. Crossline attacks are stealthy but still require NPT page remapping.

### Page-Fault Side Channels
Page-fault side channels are widely used in many prior SEV attacks [12, 21, 22, 27, 28, 30]. The guest VM maintains its own guest page table, which transfers guest virtual addresses to guest physical addresses and is encrypted and protected by SEV [1]. The lower nested page table is transparent to and maintained by an untrusted hypervisor. The hypervisor can easily track the victim VM's execution paths by clearing the Present bit in the lower NPT pages. Moreover, NPFs (Not Present Faults) reveal valuable information to the hypervisor (e.g., write/read access and user/privileged access). This information can be actively gathered by the hypervisor and used to locate both the time point and the physical address of sensitive data. Controlled-channel methods should still work on SEV-SNP.

## Conclusion
In this paper, we present the first work to demystify AMD SEV's insecure TLB management mechanisms and demonstrate end-to-end TLB Poisoning Attacks that exploit underlying design flaws. Our study not only reveals another vulnerability in the design of SEV but also highlights the challenges of securely isolating TLBs with untrusted privileged software.

## References
[1] AMD. 2008. AMD-V Nested Paging. http://developer.amd.com/wordpress/media/2012/10/NPT-WP-1%201-final-TM.pdf.
[2] AMD. 2019. AMD64 architecture programmer’s manual volume 2: System programming.
[3] AMD. 2020. AMD SEV-SNP: Strengthening VM Isolation with Integrity Protection and More. White paper (2020).
[4] AMD. 2020. AMDSEV/SEV-ES Branch. https://github.com/AMDESE/AMDSEV/tree/sev-es.
[5] AMD. 2021. AMD Virtualization (AMD-V). https://www.amd.com/en/technologies/virtualization-solutions.
[6] Antonio Barresi, Kaveh Razavi, Mathias Payer, and Thomas R Gross. 2015. CAI N: Silently Breaking ASLR in the Cloud. In 9th USENIX Workshop on Offensive Technologies.
[7] Robert Buhren, Shay Gueron, Jan Nordholz, Jean-Pierre Seifert, and Julian Vetter. 2017. Fault Attacks on Encrypted General Purpose Compute Platforms. In 7th ACM on Conference on Data and Application Security and Privacy. ACM.
[8] Victor Costan and Srinivas Devadas. 2016. Intel SGX Explained. IACR Cryptol. ePrint Arch. 2016, 86 (2016), 1–118.
[9] Zhao-Hui Du, Zhiwei Ying, Zhenke Ma, Yufei Mai, Phoebe Wang, Jesse Liu, and Jesse Fang. 2017. Secure Encrypted Virtualization is Unsecure. arXiv preprint arXiv:1712.05090 (2017).
[10] Google. 2020. Introducing Google Cloud Confidential Computing with Confidential VMs. https://cloud.google.com/blog/products/identity-security/introducing-google-cloud-confidential-computing-with-confidential-vms.
[11] Ben Gras, Kaveh Razavi, Erik Bosman, Herbert Bos, and Cristiano Giuffrida. 2017. ASLR on the Line: Practical Cache Attacks on the MMU. In NDSS, Vol. 17. 26.
[12] Felicitas Hetzelt and Robert Buhren. 2017. Security analysis of encrypted virtual machines. In ACM SIGPLAN Notices. ACM.
[13] Ralf Hund, Carsten Willems, and Thorsten Holz. 2013. Practical timing side channel attacks against kernel space ASLR. In 2013 IEEE Symposium on Security and Privacy. IEEE, 191–205.
[14] Yeongjin Jang, Sangho Lee, and Taesoo Kim. 2016. Breaking kernel address space layout randomization with intel tsx. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security. 380–392.
[15] Matt Johnston. 2021. Dropbear SSH. https://github.com/mkj/dropbear.
[16] David Kaplan. 2017. Protecting VM register state with SEV-ES. White paper (2017).
[17] David Kaplan, Jeremy Powell, and Tom Woller. 2016. AMD memory encryption. White paper (2016).
[18] Jakob Koschel, Cristiano Giuffrida, Herbert Bos, and Kaveh Razavi. 2020. Tag-Bleed: Breaking KASLR on the Isolated Kernel Address Space using Tagged TLBs. In 2020 IEEE European Symposium on Security and Privacy. IEEE, 309–321.
[19] Byoungyoung Lee, Long Lu, Tielei Wang, Taesoo Kim, and Wenke Lee. 2014. From zygote to morula: Fortifying weakened ASLR on Android. In 2014 IEEE Symposium on Security and Privacy. IEEE, 424–439.
[20] Mengyuan Li, Yinqian Zhang, and Yueqiang Cheng. 2021. CIPHERLEAKS: Breaking Constant-time Cryptography on AMD SEV via the Ciphertext Side Channel. In 30th USENIX Security Symposium. 717–732.
[21] Mengyuan Li, Yinqian Zhang, and Zhiqiang Lin. 2020. CROSSLINE: Breaking "Security-by-Crash" Based Memory Isolation in AMD SEV. arXiv preprint arXiv:2008.00146 (2020).
[22] Mengyuan Li, Yinqian Zhang, Zhiqiang Lin, and Yan Solihin. 2019. Exploiting Unprotected I/O Operations in AMD’s Secure Encrypted Virtualization. In 28th USENIX Security Symposium. 1257–1272.