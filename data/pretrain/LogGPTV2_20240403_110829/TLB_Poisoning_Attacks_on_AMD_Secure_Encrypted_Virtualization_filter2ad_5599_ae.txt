connections, which gives the adversary the chance to poison the
TLB entries of the testcrypto buffer between two connections.
Pattern matching. We evaluated the performance of pattern match-
ing. Specifically, we repeated the above attack steps 100 times and
performed pattern matching on-the-fly each time. In 98 out of the
100 trials, the adversary is able to correctly recognize the pattern
and locate the gPA. The average time used to locate the pattern is
0.10137 second with a standard deviation of 0.02460 second.
End-to-end attacks. We then evaluated the success rate of end-
to-end attacks. The adversary conducted end-to-end attacks in the
victim VM. An incorrect password is used by the adversary for his
SSH connections. The adversary repeated the attacks 20 times. In
17 out of the 20 connections, the adversary is able to log in with
the incorrect password. There are two reasons that might count for
the 3 failed cases. The first reason is that the reserved TLB entries
might be evicted before use. The second reason is that there are
false positives in pattern matching. However, the adversary can
always repeat the attacks the next time a legitimate user logs in.
7 DISCUSSION AND COUNTERMEASURE
In this section, we discuss applications of TLB Poisoning Attacks on
SEV-SNP, their differences compared to known attacks, and their
countermeasures.
0204060Connection #01234Distinct VAs0204060Connection #01234Distinct VAs617ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Mengyuan Li, Yinqian Zhang, Huibo Wang, Kang Li, and Yueqiang Cheng
7.1 TLB Poisoning on SEV-SNP
Although we have not tested TLB Poisoning Attacks on SEV-SNP
processors, according to the feedback from the AMD team, SEV-SNP
has fixed the TLB misuse problem. The latest AMD architecture
programmer’s manual [2] also shows some newly added fields
in the VMSA: TLB_ID (offset 3d0h) and PCPU_ID (offset 3d8h).
However, from the public documents, it is unclear how exactly
these two fields enforce additional TLB flushes. We conjecture that
the hardware use TLB_ID and PCPU_ID as parts of TLB tags to
identify vCPU and TLB entry’s ownership. We inspected the source
code of software supports of SNP (branch: sev-snp-devel)2 [4], and
failed to locate any software function that controls these two VMCB
fields. Therefore, we conjecture these two fields are managed solely
by the hardware. The hypervisor can still use TLB_CONTROL field
to enforce TLB flushes but has lost the capability to deliberately
skipping TLB flushes.
7.2 Comparison with Known Attacks
Previous works break the confidentiality and/or the integrity of
SEV by replacing unprotected I/O traffic [22], manipulating NPT
mapping [27, 28] and unauthenticated encryption [7, 9, 32]. All of
these previous works can be mitigated by SEV-SNP via the Reversed
Map table (RMP), which establishes a unique mapping between
each system physical address with either a guest physical address
or a hypervisor physical address. The RMP also records the own-
ership of each system physical address (e.g., a hypervisor page, a
hardware page, or a SEV-SNP VM’s page) as well as the ASID. For
SEV-SNP VM, the RMP checks the correctness and the ownership
after a nested page table walk. Only if the ownership is correct,
will the mapping between the guest virtual address and the system
physical address be cached in the TLB. This ownership check pre-
vents the hypervisor from remapping the guest physical address
to another system physical address and thus prevents attacks that
require manipulation of the NPT. Meanwhile, the RMP restricts
the hypervisor’s ability to write to the guest VM’s memory page,
which mitigates attacks relying on unauthenticated encryption and
unprotected I/O operations.
In contrast, this work is the first to demystify how TLB isolation
is performed in SEV and the first to demonstrate the security risks
caused by the hypervisor-controlled TLB flushes. TLB Poisoning
Attacks by themselves do not rely on the known vulnerabilities of
SEV and SEV-ES, such as the lack of authenticated memory encryp-
tion, the lack of NPT protection, and the lack of I/O protection, and
RMP alone does not prevent TLB Poisoning Attacks.
7.3 Countermeasures
TLB Poisoning Attacks affect all SEV and SEV-ES servers, including
all first and second generation EPYC server CPUs (i.e., Zen 1 and
Zen 2 architecture). Older processors may use a microcode patch
to enforce a TLB flush during VMRUN for all SEV/SEV-ES vCPUs.
From the software side, to mitigate TLB Poisoning Attacks, we
recommend all network-related applications (e.g., HTTPS, FTP, and
SSH server) to use exec() to ensure a completely new address
space for a new connection.
2Commit: 0965d085cd2453a3512c98924dac70e5cdf17402.
8 RELATED WORK
There have been several reported design flaws of AMD SEV since
its debut in 2016, including unencrypted VMCB [29, 30], unpro-
tected I/O interface [22], unprotected memory mapping [12, 27, 28],
unauthenticated memory encryption [7, 9, 32], and most recently
unauthenticated ASID [21].
Unencrypted VMCB. The unencrypted VMCB vulnerability only
applies to SEV and is the key reason for AMD’s release of SEV-
ES. The VM’s states (e.g., registers) are saved in plaintext during
a traditional world switch in AMD hardware-based Virtualization
(AMD-V) [5] under the assumption that the hypervisor is trusted.
However, with SEV, unencrypted VMCB leads to numerous attacks
(e.g., [30]). AMD released SEV-ES in February 2017.
Lack of memory integrity. Most of the rest attacks can work on
SEV-ES. Among those attacks, Li et al. [22] studied unencrypted
I/O operations on SEV and SEV-ES. On SEV, peripheral devices (e.g.,
disk, the network interface card) are not supported to directly read-
/write guest VMs’ memory with the corresponding Kvek. Thus, an
additional buffer area is reserved and maintained by the guest VM,
which provides an interface for the hypervisor to generate encryp-
tion/decryption oracles during I/O transmission. Hetzelt et al. [12]
first studied memory mapping problems caused by hypervisor-
controlled nested page tables on SEV. These types of attacks are
further explored by others [27, 28].
Lack of memory confidentiality. SEV (including SEV-ES and
SEV-SNP) leaves the read access ability to the hypervisor for the
performance concern, which, on the other hand, gives attackers
the chance to steal secrets by monitoring ciphertext changes. Li
et al. [20] studied an unexplored ciphertext side channel against
all SEV, SEV-ES, and SEV-SNP. Attackers can intercept cipher-
text changes inside the VMSA area and infer VM’s internal regis-
ter states. The authors then presented CIPHERLEAKs attack and
showed that attackers can steal RSA’s private key and ECDSA sig-
nature’s nonce in the latest cryptography library by monitoring
registers’ ciphertext changes. CIPHERLEAKs attack is believed to
be the first attack against SEV-SNP.
Unauthenticated ASID. Crossline attacks [21] studied the ASID
misuse and the “Security-by-Crash" principle of AMD SEV and SEV-
ES. ASID is used as tags in TLB entries and cache lines, and also
the identifier of memory encryption keys in AMD-SP. However,
the hypervisor is in charge of the ASID management. AMD relies
on a “Security-by-Crash" principle to prevent ASID misuses; it is
expected that an incorrect ASID will crash the VM immediately.
However, the authors showed that by assigning the ASID of a victim
VM to a helper VM, the adversary could extract the victim VM’s
arbitrary memory block with the PTE format. Crossline attacks are
stealthy, but NPT page remapping is still required.
Page-fault side channels. Page-fault side channels are widely
used in many prior SEV attacks [12, 21, 22, 27, 28, 30]. The guest
VM maintains its own guest page table, which transfers guest virtual
address to guest physical address and is encrypted and protected
by SEV [1]. The lower nested page table is transparent to and main-
tained by an untrusted hypervisor. The hypervisor can easily track
the victim VM’s execution paths by clearing the Present bit in the
618TLB Poisoning Attacks on AMD Secure Encrypted Virtualization
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
[23] Moritz Lipp, Vedad Hadžić, Michael Schwarz, Arthur Perais, Clémentine Maurice,
and Daniel Gruss. 2020. Take A Way: Exploring the Security Implications of
AMD’s Cache Way Predictors. In 15th ACM ASIA Conference on Computer and
Communications Security (ACM ASIACCS 2020).
[24] Clémentine Maurice, Christoph Neumann, Olivier Heen, and Aurélien Fran-
cillon. 2015. C5: cross-cores cache covert channel. In International Conference
on Detection of Intrusions and Malware, and Vulnerability Assessment. Springer,
46–64.
[25] Clémentine Maurice, Manuel Weber, Michael Schwarz, Lukas Giner, Daniel Gruss,
Carlo Alberto Boano, Stefan Mangard, and Kay Römer. 2017. Hello from the
Other Side: SSH over Robust Cache Covert Channels in the Cloud.. In Proceedings
of the Network and Distributed System Security Symposium, Vol. 17. 8–11.
[26] Microsoft. 2021. Azure and AMD announce landmark in confidential computing
evolution. https://azure.microsoft.com/en-us/blog/azure-and-amd-enable-lift-
and-shift-confidential-computing/.
[27] Mathias Morbitzer, Manuel Huber, and Julian Horsch. 2019. Extracting Secrets
from Encrypted Virtual Machines. In 9th ACM Conference on Data and Application
Security and Privacy. ACM.
[28] Mathias Morbitzer, Manuel Huber, Julian Horsch, and Sascha Wessel. 2018. SEV-
ered: Subverting AMD’s Virtual Machine Encryption. In 11th European Workshop
on Systems Security. ACM.
[29] Hovav Shacham. 2007. The Geometry of Innocent Flesh on the Bone: Return-into-
libc Without Function Calls (on the x86). In 14th ACM Conference on Computer
and Communications Security. ACM.
[30] Jan Werner, Joshua Mason, Manos Antonakakis, Michalis Polychronakis, and
Fabian Monrose. 2019. The SEVerESt Of Them All: Inference Attacks Against Se-
cure Virtual Enclaves. In ACM Asia Conference on Computer and Communications
Security. ACM, 73–85.
[31] David Weston and Matt Miller. 2016. Windows 10 mitigation improvements.
Black Hat USA (2016).
[32] Luca Wilke, Jan Wichelmann, Mathias Morbitzer, and Thomas Eisenbarth. 2020.
SEVurity: No Security Without Integrity: Breaking Integrity-Free Memory En-
cryption with Minimal Assumptions. In 2020 IEEE Symposium on Security and
Privacy. IEEE, 1483–1496.
lower NPT pages. Moreover, NPFs also reveal valuable information
to the hypervisor (e.g., write/read access and user/privileged access).
That information can be actively gathered by the hypervisor and
used to locate both the time point and the physical address of some
sensitive data. The controlled-channel methods in theory should
still work on SEV-SNP.
9 CONCLUSION
In this paper, we present the first work to demystify AMD SEV’s
insecure TLB management mechanisms and demonstrate end-to-
end TLB Poisoning Attacks that exploit the underlying design flaws.
Our study not only presents another vulnerability in the design
of SEV, but reveals the difficulty of securely isolating TLBs with
untrusted privileged software.
gramming.
REFERENCES
[1] AMD. 2008. AMD-V Nested Paging. http://developer.amd.com/wordpress/media/
2012/10/NPT-WP-1%201-final-TM.pdf.
[2] AMD. 2019. AMD64 architecture programmer’s manual volume 2: System pro-
[3] AMD. 2020. AMD SEV-SNP: Strengthening VM Isolation with Integrity Protection
and More. White paper (2020).
[4] AMD. 2020. AMDSEV/SEV-ES Branch. https://github.com/AMDESE/AMDSEV/
tree/sev-es.
[5] AMD. 2021.
AMD Virtualization (AMD-V).
https://www.amd.com/en/
technologies/virtualization-solutions.
[6] Antonio Barresi, Kaveh Razavi, Mathias Payer, and Thomas R Gross. 2015. CAI N :
Silently Breaking ASLR in the Cloud. In 9th U SEN I X Workshop on Offensive
Technologies.
[7] Robert Buhren, Shay Gueron, Jan Nordholz, Jean-Pierre Seifert, and Julian Vetter.
2017. Fault Attacks on Encrypted General Purpose Compute Platforms. In 7th
ACM on Conference on Data and Application Security and Privacy. ACM.
[8] Victor Costan and Srinivas Devadas. 2016. Intel SGX Explained. IACR Cryptol.
ePrint Arch. 2016, 86 (2016), 1–118.
[9] Zhao-Hui Du, Zhiwei Ying, Zhenke Ma, Yufei Mai, Phoebe Wang, Jesse Liu, and
Jesse Fang. 2017. Secure Encrypted Virtualization is Unsecure. arXiv preprint
arXiv:1712.05090 (2017).
[10] Google. 2020. Introducing Google Cloud Confidential Computing with Confiden-
tial VMs. https://cloud.google.com/blog/products/identity-security/introducing-
google-cloud-confidential-computing-with-confidential-vms.
[11] Ben Gras, Kaveh Razavi, Erik Bosman, Herbert Bos, and Cristiano Giuffrida. 2017.
ASLR on the Line: Practical Cache Attacks on the MMU.. In NDSS, Vol. 17. 26.
[12] Felicitas Hetzelt and Robert Buhren. 2017. Security analysis of encrypted virtual
machines. In ACM SIGPLAN Notices. ACM.
[13] Ralf Hund, Carsten Willems, and Thorsten Holz. 2013. Practical timing side
channel attacks against kernel space ASLR. In 2013 IEEE Symposium on Security
and Privacy. IEEE, 191–205.
[14] Yeongjin Jang, Sangho Lee, and Taesoo Kim. 2016. Breaking kernel address space
layout randomization with intel tsx. In Proceedings of the 2016 ACM SIGSAC
Conference on Computer and Communications Security. 380–392.
[15] Matt Johnston. 2021. Dropbear SSH. https://github.com/mkj/dropbear.
[16] David Kaplan. 2017. Protecting VM register state with SEV-ES. White paper
(2017).
White paper (2016).
[17] David Kaplan, Jeremy Powell, and Tom Woller. 2016. AMD memory encryption.
[18] Jakob Koschel, Cristiano Giuffrida, Herbert Bos, and Kaveh Razavi. 2020. Tag-
Bleed: Breaking KASLR on the Isolated Kernel Address Space using Tagged TLBs.
In 2020 IEEE European Symposium on Security and Privacy. IEEE, 309–321.
[19] Byoungyoung Lee, Long Lu, Tielei Wang, Taesoo Kim, and Wenke Lee. 2014. From
zygote to morula: Fortifying weakened aslr on android. In 2014 IEEE Symposium
on Security and Privacy. IEEE, 424–439.
[20] Mengyuan Li, Yinqian Zhang, and Yueqiang Cheng. 2021. CIPHERLEAKS: Break-
ing Constant-time Cryptography on AMD SEV via the Ciphertext Side Channel.
In 30th USENIX Security Symposium. 717–732.
[21] Mengyuan Li, Yinqian Zhang, and Zhiqiang Lin. 2020.
CROSSLINE:
Breaking”Security-by-Crash”based Memory Isolation in AMD SEV. arXiv preprint
arXiv:2008.00146 (2020).
[22] Mengyuan Li, Yinqian Zhang, Zhiqiang Lin, and Yan Solihin. 2019. Exploiting
Unprotected I/O Operations in AMD’s Secure Encrypted Virtualization. In 28th
USENIX Security Symposium. 1257–1272.
619