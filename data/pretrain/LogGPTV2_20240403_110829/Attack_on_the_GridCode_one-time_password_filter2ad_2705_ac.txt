4.1.3 Decoy Digits to Brute Force
Decoy digits increase the work required to recover the
shared key by increasing the number of preimages; this de-
creases the work required to perform replay and random
guessing (brute force) attacks.
Lemma 5. Decoy digits decrease the number of random
password attempts before successfully impersonating a user
to
.
− log 2
log(1−(r+ℓ
r )m(cid:0)r)
While the intention of decoy digits is to make recovering
the password from challenge-response pairs more diﬃcult, it
facilitates a brute force attack, as illustrated above by the
creation of a skeleton OTP. In practical implementations,
however, the number of decoy digits is restricted to ℓ.
2For the correct corner, a decoy will have n
not (1 + n−1
m ).
m preimages, and
311
(11)
(12)
t =
Figure 3:
Impact of decoy digits on challenge-
response pairs required to recover the user’s pass-
word. Solid line for the correct key and dashed line
for the incorrect keys.
Proof. Given an r digit password, the adversary may
r+ℓ
submit an r + ℓ digit password, from which there are
subsequences that are evaluated. Thus we now have
r
(
)
)(
)
)
t
r
= 1 −
1
2
r + ℓ
r
1
m
(
(
log 1 −(
1 −
)
− log 2
r+ℓ
r
.
m−r
When allowing one decoy digit (ℓ = 1), this reduces the
number of queries to 220.3, and two decoy digits to 218 before
a random guess will be successful. After two successful pairs
we expect 70,037 preimages for ℓ = 1 resulting in a total
attack of 221.3, and for ℓ = 2 we expect 1,062 candidate
preimages after three successful pairs resulting in a total
attack of 219.6. This decreases the security of all but the
weakest user selected passwords.
Lemma 6. The optimal number of decoy digits to mitigate
a brute key attack on key recovery is zero.
Proof. From the above we can see that selecting ℓ repre-
sents a tradeoﬀ between increasing the number of challenge-
response pairs to uniquely identify the password and the
number of random guesses before an adversary can authenti-
cate. Equation 13 gives the number of random guesses an ad-
versary needs given ℓ decoy digits to forge a response, while
Equation 12 gives the number pairs required to uniquely
identify the user’s password. Their product is the total num-
ber of random guesses the adversary now needs, and solving
for ℓ we can select an appropriate number of decoy digits to
maximize the adversary’s work.
4.2 Discovering K
(
The additional secret K is assumed to be selected uni-
form randomly, helping to further obfuscate the true pass-
word in the event of a known challenge-response pair. Given
a single challenge-response pair (S, Ψ), e.g., from a random
guessing, phishing, eavesdropping, etc., there is still a large
r, around 228.2—of candi-
number—
date shared secrets, making replay attacks infeasible. This
analysis assumes K is unknown, however it is clear this is
not true, and K adds less than log k bits of entropy. We
r +(k−1)
1 + n−1
)
(
)
n
m
m
0246810Number of DecoyDigits ‘02468101214Number of Challenge-Response PairsPercentage H(K) (bits)
k m n
26
4
4
36
62
4
94
4
62
4
62
8
8
94
94
8
16
94
10
10
10
10
26
10
10
26
26
70.10
70.39
70.39
70.37
94.53
54.15
54.32
88.83
81.10
Percentage
r
7
8
9
10
11
12
13
14
k = 4
61.23
65.46
67.60
69.59
71.48
74.14
75.62
79.46
k = 8
43.83
47.86
50.36
53.20
55.74
58.22
61.26
63.80
1.22
1.22
1.22
1.22
0.33
1.95
2.06
0.60
0.29
H(K) (bits)
k = 8
k = 4
2.27
1.46
2.16
1.35
2.07
1.29
1.22
1.97
1.86
1.17
1.79
1.10
1.68
1.05
0.92
1.58
Table 3: Accuracy using the number of valid pass-
words to determine the correct corner. Passwords
range from 7{14 characters. When varying r, n = 62
and m = 10.
ﬁnd the additional secret K can be predicted with signiﬁ-
cantly better than random guessing accuracy after a single
challenge-response pair.
The observant reader will realize that Equation 3 is slightly
misleading. It assumes each of the k keys are equally likely
and calculates the expected total number of candidate pass-
words. This is the set of all passwords that produce the
same response code, however the derivation itself indicates
each of these sets of passwords are not equally likely.
m preim-
ages (each σ ∈ Σ is equally likely), while for each character
for the correct key, there is one preimage that is correct
(has probability 1), while the remaining n − 1 characters
are equally likely, yielding 1 + n−1
m preimages per character.
When n = 94, m = 10, and r = 8, we expect the correct
corner to have 2.08 times more preimages.
For each character and incorrect key there are n
An adversary can leverage this fact to predict which key is
correct given a single challenge-response pair: the largest set
of candidate passwords indicates the most likely key K, and
the smallest the least likely. We experimentally evaluate this
by calculating the number of candidate passwords for a given
OTP, key, and challenge state. The results from a variety
of parameters n, m, k are given in Table 3, including an
estimate of the amount of entropy in K when ordered by the
number of preimages. Succinctly, for parameters in common
use, the correct key k has the most preimages more than
65–70% of the time, and k has around 1.22 bits of entropy.
When the length of the password r or password space m are
increased, the entropy drops to 0.3 or fewer bits. When K
can be discovered in this manner, the number of candidate
shared secrets is decreased from 228.2 to 226.9.
4.3 Leveraging Failures
The previous attacks only require a small amount of space
(krn bits) and computation time (O (krn)) to update the
set of candidate passwords. When the adversary learns a
312
challenge-response pair from random guessing, a large num-
ber of invalid responses are learnt. An adversary can lever-
age this information and trade oﬀ an increase in time and
space complexity for a reduction in the number of queries
and random guessing.
Figure 4: Both correct and incorrect password at-
tempts reduce the possible password space.
(
Lemma 7. After t failed and 1 successful query, a fraction
⌋
1 − m
t of the password space has been rejected. After
(cid:0)r )
(cid:0)t log(1(cid:0)m
)
−r
of
)⌊
(
(
)
r
log 2
−tnr
−r
n
1 + n−1
m
t queries, there are 2
candidate passwords.
Assume an adversary is attempting to discover a user’s
password via random guessing. After t failed OTP attempts
the t + 1st attempt succeeds. The adversary still has a large
number (Equation 3) of possible passwords. How many of
these passwords can already be discarded using the previous
t failed login attempts? We calculate the expected size of
the set of invalid passwords and the set diﬀerence between
the candidate and invalid passwords.
While each successful password produces
r pos-
sible candidate passwords, each failed login attempt identi-
r incorrect passwords. That is, these are passwords
ﬁes
we can remove from the existing set of candidates. How
large is the union of t failed password attempts?
1 + n−1
(
)
(
n
m
m
n
m
Proof. From [1], we know that given t random samples
r drawn from a space of nr, the expected number
of size
of unique passwords (the union of the sets) is nr(1 − (1 −
nr(cid:0)1
mr )t). A single correct password attempt yields (1+ n−1
m )r
candidate passwords of the total password space of size nr.
Assuming the incorrect passwords are independent, we have
)
(
)
)
)t
1 − m
passwords that remain to be checked, a fraction of
of the password space. The valid authentication yields
(
)
t
−r
(
(
1 −
nr − nr
(
mr
1 − nr−1
)
r
1 +
n − 1
m
(
1 +
candidate passwords that may be correct. The expected size
of the intersection is(
1 − 1
mr
)
t
)
r
n − 1
m
(13)
ABxCTotal Password SpaceUser's PasswordIncorrect PasswordsPossible PasswordsRemaining Possible Passwords (A∩B)\C Likely Password SpaceGeneralizing using Equation 2 and the analysis from Lemma 3
we have
−tnr
2
(
(
−r
n
1 +
n − 1
m
)
r
)⌊
⌋
(cid:0)t log(1(cid:0)m
(cid:0)r )
log 2
(14)
candidate passwords after t random queries.
The adversary must maintain the list of previously re-
jected passwords (t sets of knr bits) and test the candidate
passwords against the t lists. When n = 94, m = 10, and
r = 8, this reduces the number of challenge-response pairs
to 1.977, i.e., two are required for a total attack of 227. Be-
cause the size of the set of candidate passwords is only 2.63
when t = 2, a less costly attack for an adversary is to ex-
haustively test this set of passwords instead of enumerating
through the set of prior rejected passwords.
4.4 Exploiting Non-Random User Passwords
An interesting observation from previous studies and at-
tacks on user selected text-based passwords is there is an
upper bound of around 30 bits of entropy. How many of the
1 + n−1
m )r passwords, taken from a set of nr,
are likely user selected passwords? We expect only n30
nr of
the passwords are likely, reducing the number of candidate
from 228.25 valid candidate preimage passwords to around
25.82 likely candidate passwords. That is around 57 total
passwords. However, the preimage passwords are not uni-
form random, and share common preﬁx or suﬃxes, and the
above is a strictly lower bound. For example, if “password1”
is a candidate, “password2” may also be a candidate.
r + (k− 1)( n
(
)
m
We evaluate how eﬀectively an adversary can reduce the
number of likely passwords by only considering the most
likely user selected passwords from the set of valid candi-
date passwords. We use a ﬁrst-order Markov chain to es-
timate the probability of a password as described in [20].