::: itemizedlist
**其它资源**
-   `buildah-mount`{.literal} man page
-   `buildah-commit`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#assembly_building-container-images-with-buildah_building-running-and-managing-containers.html#proc_modifying-a-container-using-buildah-copy-and-buildah-config_assembly_building-container-images-with-buildah}使用 buildah copy 和 buildah 配置修改容器 {.title}
:::
使用 `buildah copy`{.literal}
命令在不挂载的情况下将文件复制到容器中。然后，您可以使用
`buildah config 命令配置`{.literal} 容器，以运行默认创建的脚本。
::: itemizedlist
**先决条件**
-   使用 Containerfile 中的说明构建的镜像。详情请参阅 [使用 Buildah 从
    Containerfile
    构建镜像](#assembly_building-container-images-with-buildah_building-running-and-managing-containers.html#proc_building-an-image-from-a-containerfile-with-buildah_assembly_building-container-images-with-buildah "使用 Buildah 从 Containerfile 构建镜像"){.link}
    一节。
:::
::: orderedlist
**流程**
1.  创建名为 `newecho`{.literal} 的脚本并使其可执行：
    ``` literallayout
    # cat newecho
    echo "I changed this container"
    # chmod 755 newecho
    ```
2.  创建新的可正常工作的容器：
    ``` literallayout
    # buildah from myecho:latest
    myecho-working-container-2
    ```
3.  将 newecho 脚本复制到容器内的 `/usr/local/bin`{.literal} 目录中：
    ``` literallayout
    # buildah copy myecho-working-container-2 newecho /usr/local/bin
    ```
4.  更改配置以使用 `newecho`{.literal} 脚本作为新入口点：
    ``` literallayout
    # buildah config --entrypoint "/bin/sh -c /usr/local/bin/newecho" myecho-working-container-2
    ```
5.  可选。运行 `myecho-working-container-2`{.literal} 容器 whixh 会触发
    `newecho`{.literal} 脚本的执行：
    ``` literallayout
    # buildah run myecho-working-container-2 -- sh -c '/usr/local/bin/newecho'
    I changed this container
    ```
6.  将 `myecho-working-container-2`{.literal} 容器提交至名为
    `mynewecho`{.literal} 的新镜像：
    ``` literallayout
    # buildah commit myecho-working-container-2 containers-storage:mynewecho
    ```
:::
::: itemizedlist
**验证**
-   列出本地存储中的所有镜像：
    ``` literallayout
    # buildah images
    REPOSITORY                                  TAG      IMAGE ID       CREATED         SIZE
    docker.io/library/mynewecho                 latest   fa2091a7d8b6   8 seconds ago   234 MB
    ```
:::
::: itemizedlist
**其它资源**
-   `buildah-copy`{.literal} man page
-   `buildah-config`{.literal} man page
-   `buildah-commit`{.literal} man page
-   `buildah-run`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#assembly_building-container-images-with-buildah_building-running-and-managing-containers.html#proc_creating-images-from-scratch-with-buildah_assembly_building-container-images-with-buildah}使用 Buildah 从头开始创建镜像 {.title}
:::
您可以创建一个仅包含最小容器元数据的新容器，而不是从基础镜像开始。
从头容器创建镜像时，请考虑：\*
您可以复制没有依赖项的可执行文件到涂销镜像中，然后进行一些配置设置以使最小容器正常工作。\*
您必须初始化 RPM 数据库并在容器中添加发行软件包，以使用 `yum`{.literal}
或 `rpm 等工具`{.literal}。\* 如果您添加了大量软件包，请考虑使用标准 UBI
或最小 UBI 镜像而不是全新镜像。
::: title
**流程**
:::
此流程将 Web 服务 httpd 添加到容器中，并将其配置为运行。
::: orderedlist
1.  创建一个空容器：
    ``` literallayout
    # buildah from scratch
    working-container
    ```
2.  挂载 `working-container`{.literal} 容器，并保存
    `scratchmnt`{.literal} 变量的挂载点路径：
    ``` literallayout
    # scratchmnt=$(buildah mount working-container)
    # echo $scratchmnt
    /var/lib/containers/storage/overlay/be2eaecf9f74b6acfe4d0017dd5534fde06b2fa8de9ed875691f6ccc791c1836/merged
    ```
3.  在涂销镜像中初始化 RPM 数据库，并添加 `redhat-release`{.literal}
    软件包：
    ``` literallayout
    # yum install -y --releasever=8 --installroot=$scratchmnt redhat-release
    ```
4.  将 `httpd`{.literal} 服务安装到 `涂销`{.literal} 目录中：
    ``` literallayout
    # yum install -y --setopt=reposdir=/etc/yum.repos.d \
          --installroot=$scratchmnt \
          --setopt=cachedir=/var/cache/dnf httpd
    ```
5.  创建 `$scratchmnt/var/www/html/index.html`{.literal} 文件：
    ``` literallayout
    # mkdir -p $scratchmnt/var/www/html
    # echo "Your httpd container from scratch works!" > $scratchmnt/var/www/html/index.html
    ```
6.  配置 `working-container`{.literal} 以直接从容器运行
    `httpd`{.literal} 守护进程：
    ``` literallayout
    # buildah config --cmd "/usr/sbin/httpd -DFOREGROUND" working-container
    # buildah config --port 80/tcp working-container
    # buildah commit working-container localhost/myhttpd:latest
    ```
:::
::: orderedlist
**验证**
1.  列出本地存储中的所有镜像：
    ``` literallayout
    # podman images
    REPOSITORY                                 TAG     IMAGE ID      CREATED         SIZE
    localhost/myhttpd                          latest  08da72792f60  2 minutes ago   121 MB
    ```
2.  运行 `localhost/myhttpd`{.literal}
    镜像并配置容器和主机系统之间的端口映射：
    ``` literallayout
    # podman run -p 8080:80 -d --name myhttpd 08da72792f60
    ```
3.  测试 Web 服务器：
    ``` literallayout
    # curl localhost:8080
    Your httpd container from scratch works!
    ```
:::
::: itemizedlist
**其它资源**
-   `buildah-config`{.literal} man page
-   `buildah-commit`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#assembly_building-container-images-with-buildah_building-running-and-managing-containers.html#proc_pushing-containers-to-a-private-registry_assembly_building-container-images-with-buildah}将容器推送到私有 registry {.title}
:::
使用 `buildah push`{.literal}
命令将镜像从本地存储推送到公共或私有存储库。
::: itemizedlist
**先决条件**
-   镜像是使用 Containerfile 中的说明构建的。详情请参阅 [使用 Buildah 从
    Containerfile
    构建镜像](#assembly_building-container-images-with-buildah_building-running-and-managing-containers.html#proc_building-an-image-from-a-containerfile-with-buildah_assembly_building-container-images-with-buildah "使用 Buildah 从 Containerfile 构建镜像"){.link}
    一节。
:::
::: orderedlist
**流程**
1.  在机器上创建本地 registry：
    ``` literallayout
    # podman run -d -p 5000:5000 registry:2
    ```
2.  将 `myecho:latest`{.literal} 镜像推送到 `localhost`{.literal}
    registry:
    ``` literallayout
    #  buildah push --tls-verify=false myecho:latest localhost:5000/myecho:latest
    Getting image source signatures
    Copying blob sha256:e4efd0...
    ...
    Writing manifest to image destination
    Storing signatures
    ```
:::
::: orderedlist
**验证**
1.  列出 `localhost`{.literal} 存储库中的所有镜像：
    ``` literallayout
    # curl http://localhost:5000/v2/_catalog
    {"repositories":["myecho2]}
    # curl http://localhost:5000/v2/myecho2/tags/list
    {"name":"myecho","tags":["latest"]}
    ```
2.  检查 `docker://localhost:5000/myecho:latest`{.literal} 镜像：
    ``` literallayout
    # skopeo inspect --tls-verify=false docker://localhost:5000/myecho:latest | less
    {
        "Name": "localhost:5000/myecho",
        "Digest": "sha256:8999ff6050...",
        "RepoTags": [
            "latest"
        ],
        "Created": "2021-06-28T14:44:05.919583964Z",
        "DockerVersion": "",
        "Labels": {
            "architecture": "x86_64",
            "authoritative-source-url": "registry.redhat.io",
        ...
    }
    ```
3.  拉取 `localhost:5000/myecho`{.literal} 镜像：
    ``` literallayout
    # podman pull --tls-verify=false localhost:5000/myecho2
    # podman run localhost:5000/myecho2
    This container works!
    ```
:::
::: itemizedlist
**其它资源**
-   `buildah-push`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#assembly_building-container-images-with-buildah_building-running-and-managing-containers.html#proc_pushing-containers-to-the-docker-hub_assembly_building-container-images-with-buildah}将容器推送到 Docker Hub {.title}
:::
使用 Docker Hub 凭证通过 `buildah`{.literal} 命令从 Docker Hub
推送和拉取镜像。
::: itemizedlist
**先决条件**
-   使用 Containerfile 中的说明构建的镜像。详情请参阅 [使用 Buildah 从
    Containerfile
    构建镜像](#assembly_building-container-images-with-buildah_building-running-and-managing-containers.html#proc_building-an-image-from-a-containerfile-with-buildah_assembly_building-container-images-with-buildah "使用 Buildah 从 Containerfile 构建镜像"){.link}
    一节。
:::
::: orderedlist
**流程**
1.  将 `docker.io/library/myecho:latest`{.literal} 推送到 Docker Hub。将
    `用户名和密码`{.literal} ``{.literal} 替换为您的 Docker Hub 凭证：
    ``` literallayout
    # buildah push --creds username:password \
              docker.io/library/myecho:latest docker://testaccountXX/myecho:latest
    ```
:::
::: itemizedlist
**验证**
-   获取并运行 `docker.io/testaccountXX/myecho:latest`{.literal} 镜像：
    ::: itemizedlist
    -   使用 Podman 工具：
        ``` literallayout
        # podman run docker.io/testaccountXX/myecho:latest
        This container works!
        ```
    -   使用 Buildah 和 Podman 工具：
        ``` literallayout
        # buildah from docker.io/testaccountXX/myecho:latest
        myecho2-working-container-2
        # podman run myecho-working-container-2
        ```
    :::
:::
::: itemizedlist
**其它资源**
-   `buildah-push`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#assembly_building-container-images-with-buildah_building-running-and-managing-containers.html#proc_removing-images-with-buildah_assembly_building-container-images-with-buildah}使用 Buildah 删除镜像 {.title}
:::
使用 `buildah rmi`{.literal} 命令移除本地存储的容器镜像。您可以通过其 ID
或名称来删除镜像。
::: orderedlist
**流程**
1.  列出本地系统中的所有镜像：
    ``` literallayout
    # buildah images
    REPOSITORY                                  TAG      IMAGE ID       CREATED          SIZE
    localhost/johndoe/webserver                 latest   dc5fcc610313   46 minutes ago   263 MB
    docker.io/library/mynewecho                 latest   fa2091a7d8b6   17 hours ago     234 MB
    docker.io/library/myecho2                   latest   4547d2c3e436   6 days ago       234 MB
    localhost/myecho                            latest   b28cd00741b3   6 days ago       234 MB
    localhost/ubi-micro-httpd                   latest   c6a7678c4139   12 days ago      152 MB
    registry.access.redhat.com/ubi8/ubi         latest   272209ff0ae5   3 weeks ago      234 MB
    ```
2.  删除 `localhost/myecho`{.literal} 镜像：
    ``` literallayout
    # buildah rmi localhost/myecho
    ```
    ::: itemizedlist
    -   删除多个镜像：
        ``` literallayout
        # buildah rmi docker.io/library/mynewecho  docker.io/library/myecho2
        ```
    -   从您的系统中删除所有镜像：
        ``` literallayout
        # buildah rmi -a
        ```
    -   要删除与它们关联的多个名称（标签）的镜像，请添加 `-f`{.literal}