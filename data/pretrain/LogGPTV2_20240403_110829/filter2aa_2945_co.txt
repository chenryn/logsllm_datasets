You specify WithCancellation only once in a query. Cancellation applies
to all sources in the query. If the CancellationTokenSource object used to
generate the CancellationToken is canceled, the query stops with an
OperationCanceledException exception.
Synchronizing concurrent access to data
PLINQ is not always the most appropriate technology to use for an
application. If you create your own tasks manually, you need to ensure that
these tasks coordinate their activities correctly. The .NET Framework class
library provides methods with which you can wait for tasks to complete, and
you can use these methods to coordinate tasks at a very coarse level. But
consider what happens if two tasks attempt to access and modify the same
data. If both tasks run at the same time, their overlapping operations might
corrupt the data. This situation can lead to bugs that are difficult to correct,
primarily because of their unpredictability.
The Task class provides a powerful framework with which you can design
and build applications that take advantage of multiple CPU cores to perform
tasks in parallel. However, you need to be careful when building solutions
that perform concurrent operations, especially if those operations share access
to data. You have little control over how parallel operations are scheduled or
even the degree of parallelism that the operating system might provide to an
application constructed by using tasks. These decisions are left as run-time
considerations and depend on the workload and hardware capabilities of the
computer running your application. This level of abstraction was a deliberate
design decision on the part of the Microsoft development team, and it
removes the need for you to understand the low-level threading and
scheduling details when you build applications that require concurrent tasks.
But this abstraction comes at a cost. Although it all appears to work
magically, you must make some effort to understand how your code runs;
otherwise, you can end up with applications that exhibit unpredictable (and
erroneous) behavior, as shown in the following example (this sample is
available in the ParallelTest project in the folder containing the code for
Chapter 24):
Click here to view code image
Download from finelybook PI:EMAIL
857
using System;
using System.Threading;
class Program
{
    private const int NUMELEMENTS = 10;
    static void Main(string[] args)
    {
        SerialTest();
    }
    static void SerialTest()
    {
        int[] data = new int[NUMELEMENTS];
        int j = 0;
        for (int i = 0; i 
    {
        j = i;
        doAdditionalProcessing();
        data[i] = j;
        doMoreAdditionalProcessing();
    });
    for (int i = 0; i  This is a general-purpose class for holding an
unordered collection of items. It includes methods to insert (Add),
remove (TryTake), and examine (TryPeek) items in the collection.
These methods are thread safe. The collection is also enumerable, so
you can iterate over its contents by using a foreach statement.
ConcurrentDictionary This class implements a
thread-safe version of the generic Dictionary
collection class described in Chapter 18, “Using collections.” It
provides the methods TryAdd, ContainsKey, TryGetValue,
TryRemove, and TryUpdate, which you can use to add, query, remove,
and modify items in the dictionary.
ConcurrentQueue This class provides a thread-safe version of the
Download from finelybook PI:EMAIL
866
generic Queue class described in Chapter 18. It includes the
methods Enqueue, TryDequeue, and TryPeek, which you can use to
add, remove, and query items in the queue.
ConcurrentStack This is a thread-safe implementation of the
generic Stack class, also described in Chapter 18. It provides
methods such as Push, TryPop, and TryPeek, which you can use to
push, pop, and query items on the stack.
Note Adding thread safety to the methods in a collection class imposes
additional run-time overhead, so these classes are not as fast as the
regular collection classes. You need to keep this fact in mind when
deciding whether to parallelize a set of operations that require access to
a shared collection.
Using a concurrent collection and a lock to implement
thread-safe data access
In the following set of exercises, you will implement an application that
calculates pi by using a geometric approximation. Initially, you will perform
the calculation in a single-threaded manner, and then you will change the
code to perform the calculation by using parallel tasks. In the process, you
will uncover some data synchronization issues that you need to address and
that you will solve by using a concurrent collection class and a lock to ensure
that the tasks coordinate their activities correctly.
The algorithm that you will implement calculates pi based on some simple
mathematics and statistical sampling. If you draw a circle of radius r and
draw a square with sides that touch the circle, the sides of the square are 2 * r
in length, as shown in the following image:
Download from finelybook PI:EMAIL
867
You can calculate the area of the square, S, like this
S = (2 * r) * (2 * r)
or
S = 4 * r * r
The area of the circle, C, is calculated as follows:
C = pi * r * r
Rearranging these formulas, you can see that
r * r = C / pi
and
r * r = S / 4
Combining these equations, you get:
S / 4 = C / pi
And therefore:
Download from finelybook PI:EMAIL
868
pi = 4 * C / S
The trick is to determine the value of the ratio of the area of the circle, C,
with respect to the area of the square, S. This is where the statistical sampling
comes in. You can generate a set of random points that lie within the square
and count how many of these points also fall within the circle. If you generate
a sufficiently large and random sample, the ratio of points that lie within the
circle to the points that lie within the square (and also in the circle)
approximates the ratio of the areas of the two shapes, C / S. All you have to
do is count them.
How do you determine whether a point lies within the circle? To help
visualize the solution, draw the square on a piece of graph paper with the