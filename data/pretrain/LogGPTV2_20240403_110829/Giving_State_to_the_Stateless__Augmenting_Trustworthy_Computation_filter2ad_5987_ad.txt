(pk , sk ) ← PKKeyGen(1λ)
Si+1 = (PUBLISH, sk ,·,·)
(Pubi+1, Oi+1) ← (ε, pk )
Parse ﬁlename ← Ii
CTauditor ← PKEnc(pk auditor, ﬁlename)
Si+1 ← (DECRYPT, sk , CT, Ii)
(Pubi+1, Oi+1) ← (CT, post)
Parse C ← Ii
(ﬁlename
if ﬁlename = ﬁlename
else // Decrypt a given file
, M ) ← PKDec(sk , C)
(cid:48) then
Si+1 = (PUBLISH, sk ,·,·)
(Pubi+1(cid:107)Oi+1) = (ε(cid:107)M )
Abort and output ⊥.
output (Si+1, Pubi+1, Oi+1)
else
(cid:48)
immutable network location [25]. A popular approach to
solving this problem in cryptographic access control systems,
leveraged by systems like Hadoop [25], is to assign a unique
decryption key to each ﬁle and to require that clients individu-
ally request each key from an online server, which in turn logs
each request. This approach requires a trusted online server
that holds decryption keys and cannot be implemented using
a public ledger.
In place of a trusted server, we propose to use ELI to imple-
ment mandatory logging for protected ﬁles. In this application,
a local enclave is initialized (in the ﬁrst step of a program)
and stores (or generates) a master key for some collection of
ﬁles, e.g., a set of ﬁles stored on a device.11 The enclave then
employs the public output ﬁeld of the ELI scheme to ensure
that prior to each ﬁle access the user must post a statement
signaling that the ﬁle is to be accessed.12 The logging program
is presented as Algorithm 4 and consists of three phases. When
the program is launched, the enclave generates a keypair for
a public-key encryption scheme (PKKeyGen, PKEnc, PKDec)
and outputs the public key.13 Next the user provides a ﬁlename
they wish to decrypt, and the program encrypts this ﬁlename
using a hard-coded public key for an auditor. When the user
posts this key to the ledger, the program decrypts the given
ﬁle.
C. Limited-attempt Password Guessing
Device manufacturers have widely deployed end-to-end
ﬁle encryption for devices such as mobile phones and cloud
backup data [12], [11]. These systems require users to manage
their own secrets rather than trusting them to the manufacturer.
Encryption requires high-entropy cryptographic keys,
but users are prone to lose or forget high-entropy pass-
words. To address this dilemma, manufacturers are turn-
ing to trusted hardware, including on-device cryptographic
co-processors [12].
trusted enclaves [14], and cloud-based
HSMs [41], [40] for backup data. A user authenticates with a
relatively weak passcode such as a PIN and the hardware will
release a strong encryption key. To prevent brute force attacks,
this stateful hardware must throttle or limit the number of login
attempts.14
Enclave-Ledger Interaction provides an alternative mech-
anism for
limiting the number of guessing attempts on
password-based encryption systems. A manufacturer can em-
ploy an inexpensive stateless hardware token to host a simple
enclave, with an internal (possible hard-wired) secret key K.
In the initial step, the enclave takes in a password uses the
random coins to produce a master encryption key kenc that
it outputs to the user. The Enclave is constructed to release
kenc only when it is given the proper passcode and the step
11If the Enclave is implemented using cryptographic techniques such as
FWE, a unique Enclave can be shipped along with the ﬁles themselves. If the
user employs a hardware token, the necessary key material can be delivered
to the user’s Enclave when the ﬁles are created or provisioned onto the user’s
device.
12To provide conﬁdentiality of ﬁle accesses, the enclave may encrypt the
13Here we require the encryption scheme to be CCA-secure.
14This approach led to the famous showdown between Apple and the FBI
in the Spring of 2016. The device in question used a 4-character PIN, and
was defeated in a laboratory using a state rewinding attack, and in practice
using an estimated $1 million software vulnerability[49], [63].
9This can be accomplished using a broadcast encryption scheme or peer-
log entry under the public key of some auditing party.
Several cryptographic access control systems require par-
ticipants to actively log ﬁle access patterns to a remote and
to-peer key sharing mechanism.
10We assume that the ledger is authenticated using signatures. Systems such
as Hyperledger propose to use TEE enclaves to construct the ledger as well as
execute contracts; in these systems the ledger blocks are authenticated using
digital signatures that can be publicly veriﬁed.
9
counter is below some limit. Note that if the host restarts
the execution, this simply re-runs the setup step which will
generate a new key unrelated to the original. Rate limiting
can be accomplished if the ledger has some approximation
of a clock, like number of blocks between login attempts in
Bitcoin. In practice the decryption process in such a system
can be fairly time consuming if the ledger has signiﬁcant lag.
This system may be useful for low frequency applications
such as recovering encrypted backups or emergency password
recovery.
D. Paid Decryption and Ransomware
ELI can also be used to condition program execution
on payments made on an appropriate payment ledger such
as Bitcoin or Ethereum. Because in these systems payment
transactions are essentially just transactions written to a public
ledger, the program P can take as input a public payment
transaction and condition program execution on existence of
this transaction. This feature enables pay-per-use software
with no central payment server. Not all of the applications
Algorithm 5: Ransomware Pransomware
Data: Input: Ii , Si; Randomness ri;
Parse (K, R, pk ) ← Si
if Si = ε then // Generate Key, Set Ransom
Parse (R, pk ) ← Ii
K ← KDF(ri)
output Si+1 ← (K, R, pk )
Parse (t, σ) ← Ii
if (BlockchainVerify(t, σ) = 1) then
else // Release Key on Payment
if (t.amount > R and t.target = pk ) then
output Oi = K
output Oi = ⊥
of this primitive are constructive. The ability to condition
software execution on payments may enable new types of
destructive application such as ransomware [64]. In current
ransomware, the centralized system that deliver keys represent
a weak point in the ransomware ecosystem. Those systems
exposes ransomware operators to tracing [59]. As a result,
some operators have ﬂed without delivering key material, as
in the famous WannaCry outbreak [36].
In the remainder of this section we consider a potential
destructive application of the ELI paradigm: the development
of autonomous ransomware that guarantees decryption without
the need for online C&C. We refer to this malware as au-
tonomous because once an infection has occurred it requires no
further interaction with the malware operators, who can simply
collect payments issued to a Bitcoin (or other cryptocurrency)
address.
In this application, the malware portion of the ransomware
samples an encryption key K ∈ {0, 1}(cid:96) and installs this value
along with the attackers public address within a Enclave. The
Enclave will only release this encryption key if it is fed a
validating blockchain fragment containing a transaction paying
sufﬁcient currency to the attacker’s address. Algorithm 5
presents a simple example of the functionality.
10
We note that the Enclave may be implemented using trusted
execution technology that is becoming available in commercial
devices, e.g., an Intel SGX enclave, or an ARM TrustZone
trustlet. Thus, autonomous ransomware should be considered
a threat
today – and should be considered in the threat
modeling of trusted execution systems. Even if the methods
employed for securing these trusted execution technologies are
robust, autonomous ransomware can be realized with software-
only cryptographic obfuscation techniques, if such technology
becomes practical[42].
This application can be extended by allowing a ransomware
instance to prove to a skeptical victim that it contains the true
decryption key without allowing the victim to regain all their
ﬁles. The victim and the ransomware can together select a
random ﬁle on the disk to decrypt, showing the proper key
is embedded. Additionally, the number of such ﬁles that can
be decrypted can be limited using similar methodology as in
§IV-B.
V. REALIZING THE ENCLAVE AND LEDGER
A. Realizing the Enclave
Trusted cryptographic co-processors. The simplest approach
to implement
the enclave is using a secure hardware or
trusted execution environment such as Intel’s SGX[5], ARM
Trustzone [14], or AMD SEV [8]. When implemented using
these platforms, our techniques can be used immediately for
applications such as logging, fair encryption and ransomware.
some degree of
hardware-supported immutable statekeeping, this support is
surprisingly limited. For example, Intel SGX-enabled proces-
sors provide approximately 200 monotonic counters to be
shared across all enclaves. On shared systems these counters
could be maliciously reserved by enclaves such that they are
no longer available to new software. Finally, these counters do
not operate across enclaves operating on different machines,
as in the smart contract setting.
While these environments provide
Many simpler computing devices such as smart cards
lack any secure means of keeping state. In our model, even
extremely lightweight ASICs and FPGAs could be used to
implement the enclave for stateful applications using our ELI
constructions. Along these lines, Nayak et al. [48] recently
showed how to build trusted non-interactive Turing Machines
from minimal stateless trusted hardware. Such techniques open
the way for the construction of arbitrary enclave functionalities
on relatively inexpensive hardware.
Remark. Several recent attacks against trusted co-processors,
particularly Intel SGX [62] highlight the possibility that an
enclave breach could reveal the key K. These attacks would
have catastrophic implications for our protocol. We note that
there are several potential mitigations for these attacks. For
example, we recommend that an enclave should not directly
expose the key K to a given program, but should instead
derive a separate key for each program P in case the program
contains a vulnerability. Similarly, we emphasize that even
in the event of key leakage, industrial systems may be able
to renew security through e.g., a microcode update, which
will allow the system to derive a new key K from some
well-protected internal secret (as Intel did in response to the
Foreshadow attack on SGX). Finally, to ensure that a processor
is using the most recent microcode, the microcode maintainer
can list the most recent microcode hash on the ledger and an
ELI “bootloader” could use ELI to enforce that the current
microcode is up to date. We leave exploration of these ideas
to future work.
Software-Only Options. A natural software-only equivalent
of the enclave is to use pure-software techniques such as vir-
tualization, or cryptographic program obfuscation [16]. While
software techniques may be capable of hiding secrets from
an adversarial user during execution,
interactive multi-step
obfuscated functionalities are implicitly vulnerable to being run
on old state. Unfortunately, there are many negative results in
the area of program obfuscation [16], and current primitives
are not yet practical enough for real-world use [42]. However,
for speciﬁc functionalities this option may be feasible: for
example, Choudhuri et al. [22] and Jager et al. [43] describe
protocols based on the related Witness Encryption primitive.
B. Realizing the Ledger
There are many different systems that may be used to
instantiate the ledger. In principle, any stateful centralized
server capable of producing SUF-CMA signatures can be used
for this purpose. There are a number properties we require
of our ledgers: (1) the unforgeability of the authentication
tags, (2) public veriﬁability of authenticators, and (3) in our
more efﬁcient instantiations, the ability to compute and return
transaction hashes.
Certiﬁcate Transparency. A number of browsers have begun
to mandate Certiﬁcate Transparency (CT) proofs for TLS
certiﬁcates [3]. In these systems, every CA-issued certiﬁcate
is included in a public log, which is published and maintained
by a central authority such as Google. Every certiﬁcate in the
log is included as a leaf in a Merkle tree, and the signed root
and associated membership proofs are distributed by the log
maintainer.
Provided that the log maintainer is trustworthy, this system
forms a public append-only ledger with strong cryptographic
security. The inclusion of a certiﬁcate can be veriﬁed by any
party who has the maintainer’s public key, while the tree
location can be viewed as a unique identiﬁer of the posted
certiﬁcate. Because many certiﬁcate authorities support CT, the
ability to programmatically submit certiﬁcate signing requests,
using services like LetsEncrypt, allows us to use CT as a log
for any arbitrary data that can be incorporated into an X.509
certiﬁcate. In our presentation we implicitly assume that the
Enclave can verify CT inclusion proofs from a speciﬁc log i.e.,
that it has been provisioned with a copy of the log maintainer’s
public veriﬁcation key.
A limitation of the CT realization is that, to implement our
Ledger functionality of §II-B, we require a way to ensure that
the PrevHash ﬁeld of each record truly does identify the pre-
vious entry in the log. Unfortunately, the current instantiation
of CT does not guarantee this; instead, the enclave must read
the entire certiﬁcate log to verify that no interceding entries
exist. This makes CT less bandwidth-efﬁcient than the other
realizations.
Bitcoin and Proof-of-work Blockchains. Public blockchains,
embodied most prominently by Bitcoin, are designed to fa-
cilitate distributed consensus as to the contents of a ledger.
In these systems, new blocks of transactions are added to the
ledger each time a participant solves a costly proof of work
(PoW), which typically involves solving a hash puzzle over the
block contents. These PoW solutions are publicly veriﬁable,
and can be used as a form of “economic” authentication tag
over the block contents: that is, while these tags can be forged,
the ﬁnancial cost of doing so is extremely high. Moreover,
because blocks are computed in sequence, a sub-chain of n
blocks (which we refer to as a “fragment”) will include n
chained proofs-of-work, resulting in a linear increase in the
cost of forging the ﬁrst block in the fragment.
The remaining properties of our ledger are provided as
follows: in Bitcoin, transactions are already uniquely identiﬁed
by their hash, and each transaction (by consensus rules) must
identify a previous transaction hashes as an input. Similarly,
due to double spending protections in the consensus rules,
there cannot be two transactions that share a previous input.
Finally, we can encode arbitrary data into the transaction using
the OP_RETURN script [2].
Analyzing the cost of forging blockchain fragments. Proof-
of-work blockchains do not provide a cryptographic guarantee
of unforgeability. To provide some understanding of the cost
of forging in these systems, we can examine the economics of
real proof-of-work blockchains. We propose argue that the cost
of forging an authenticator can can be determined based on
from block reward offered by a proof-of-work cryptocurrency,
assuming that the market is liquid and reasonably efﬁcient.
In currencies such as Bitcoin, the reward for producing a
valid proof-of-work block is denominated in the blockchain
currency, which has a ﬂoating value with respect to currencies
such as the dollar. Critically, because each instance of a PoW
puzzle in the real blockchain is based on the preceding block,
an adversarial miner must choose at mining time if they want
to mine on the blockchain or attempt to forge a block for use
in the ELI scheme; their work cannot do double duty. Thus we
can calculate the opportunity cost of forgoing normal mining
in order to attack an ELI system: the real cost of forging a
block is at least the value of a block reward. Similarly, the
cost of forging a blockchain fragments of length n is at least
n times the block reward. At present, the cost of forging a
fragment of length 7 would be 87.5 BTC.
Remark. This simple analysis ignores that a single blockchain
fragment may be used by multiple instances of a given enclave.
This admits the possibility that an attacker with signiﬁcant
capital might amortize this cost by spreading it across many
instances. Indeed, if amortized over a sufﬁcient number of
forged ledger posts, this ﬁxed cost could be reduced. For