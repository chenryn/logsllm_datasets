title:PDM: A New Strong Password-Based Protocol
author:Charlie Kaufman and
Radia J. Perlman
USENIX Association
Proceedings of the
10th USENIX Security
Symposium
Washington, D.C., USA
August 13–17, 2001
© 2001 by The USENIX Association
Phone: 1 510 528 8649
FAX: 1 510 548 5738
THE ADVANCED COMPUTING SYSTEMS ASSOCIATION
All Rights Reserved
Email: PI:EMAIL
For more information about the USENIX Association:
WWW: http://www.usenix.org
Rights to individual papers remain with the author or the author's employer.
 Permission is granted for noncommercial reproduction of the work for educational or research purposes.
This copyright notice must be included in the reproduced paper. USENIX acknowledges all trademarks herein.
PDM: A New Strong Password-Based Protocol
Charlie Kaufman
Iris Associates
PI:EMAIL
Radia Perlman
Sun Microsystems Laboratories
PI:EMAIL
Abstract
In this paper we present PDM (Password Derived Mod-
uli), a new approach to strong password-based protocols
usable either for mutual authentication or for download-
ing security information such as the user’s private key.
We describe how the properties desirable for strong
password mutual authentication differ from the proper-
ties desirable for credentials download. In particular, a
protocol used solely for credentials download can be
simpler and less expensive than one used for mutual
authentication since some properties (such as authenti-
cation of the server) are not necessary for credentials
download. The features necessary for mutual authenti-
cation can be easily added to a credentials download
protocol, but many of the protocols designed for mutual
authentication are not as desirable for use in credentials
download as protocols like PDM and basic EKE and
SPEKE because they are unnecessarily expensive when
used for that purpose. PDM’s performance is vastly
more expensive at the client than any of the protocols in
the literature, but it is more efﬁcient at the server. We
claim that performance at the server, since a server must
handle a large and potentially unpredictable number of
clients, is more important than performance at the client,
assuming that client performance is “good enough”. We
describe PDM for credentials download, and then show
how to enhance it to have the properties desirable for
mutual authentication. In particular, the enhancement
we advocate for allowing PDM to avoid storing a pass-
word-equivalent at the server is less expensive than
existing schemes, and our approach can be used as a
more efﬁcient (at the server) variant of augmented EKE
and SPEKE than the currently published schemes. PDM
is important because it is a very different approach to the
problem than any in the literature, we believe it to be
unencumbered by patents, and because it can be a lot
less expensive at the server than existing schemes.
1  Introduction
This paper presents a new mechanism for allowing a
user, armed only with a name and password, to connect
to a network from a “generic” client machine, one
loaded with software, but not with any user-speciﬁc con-
ﬁguration information (such as a private key or the pub-
lic key of a trusted CA). The most secure solution to the
problem of a human attaching via a generic workstation
is a smart card. But until smart cards and readers
become ubiquitous, and to handle the case when the user
has left his smart card at home, there will still be a need
for authentication based solely on something humans
can remember and type, i.e., a password. Unfortunately,
passwords are subject
to dictionary attacks because
most people are not willing to type and remember a suf-
ﬁciently long and hard-to-guess password. So it
is
important to design a protocol in which even though
passwords are used as keys, an eavesdropper or some-
one impersonating either the client or the server will not
obtain information with which to do a dictionary attack.
There are several protocols in the literature for solving
this problem. EKE [BM92] uses a Difﬁe-Hellman
exchange encrypted with the user’s password. SPEKE
[Jab96] uses a function of the user’s password as the
base in a Difﬁe-Hellman exchange. Later, enhancements
to both EKE and SPEKE were added to avoid storing a
password-equivalent at the server [BM94], [Jab97]. SRP
[Wu98], has the same properties as the augmented EKE
and SPEKE, but better performance. AMP [Kwon01] is
similar to SRP, with similar properties. [GL00] presents
a protocol with similar properties using linear polyno-
mials over GF(2n), with a proof that the result is as
secure as factorization. [BMP00] presents a 3-message
variant of augmented EKE and proves it as secure as the
Decision Difﬁe-Hellman (DDH) in the random oracle
model. Similarly, [MS99] presents a protocol based on
RSA, and proves the security of it based on the random
oracle model. There is an unpublished protocol called
S.N.A.K.E. by Peter Gunn that does Difﬁe-Hellman
based not on a single strong prime, but a set of strong
primes selected from a known set (of perhaps 2000),
with the subset chosen being based on the password.
[RCW98] presents a protocol (called S3P-RSA) in
which an exponent is generated deterministically from a
user’s password, and used to transmit a strong secret.
But this protocol has been shown to be broken, since
many passwords can be tested simultaneously in an on-
line attack.
[FK00] presents an additional interesting property that a
strong password scheme might have, along with an
algorithm for accomplishing that property. This property
is the ability to break a user’s strong secret into multiple
pieces, such that theft of multiple servers’ databases are
required in order to do a dictionary attack. The disad-
vantage of this approach is that it requires multiple serv-
ers to be available or else the user will not be able to
obtain his credentials, and it has lower performance
because the user must do a protocol with multiple serv-
ers. Our protocol (PDM) does not have this property,
and instead requires interaction with only a single
server, which in many situations would be more desir-
able.
PDM (password derived moduli) does Difﬁe-Hellman
based on a safe prime p (“safe” means a prime for which
(p-1)/2 is also prime), where p is deterministically gen-
erated from the user’s password, salted with information
such as the user’s name. A new approach, even if it gave
no new functionality over old approaches, is still poten-
tially important. Sometimes an approach will be found
to have ﬂaws, so alternatives are useful. Sometimes two
approaches that seem to provide identical functionality
are later found to have different properties in subtle
ways. For example, although EKE and SPEKE seemed
to provide identical functionality, [PK99] demonstrated
that a 2-message protocol with salt was possible with
SPEKE (with a composite modulus), and was not possi-
ble with EKE.
But PDM’s performance properties make it a potentially
important approach. PDM is vastly more computation
intensive for the client than previous approaches, but
since a client machine only needs to do the computation
intensive operation once (per user, assuming the user
has typed her password correctly), what is important is
whether the performance is “good enough”, which we
claim it is. Although lower performance at the client is
obviously a disadvantage, it has the beneﬁcial side-
effect of making on-line password guessing much
slower.
Computation at the server is far more important, since a
server might have to simultaneously deal with multiple
clients. An attacker impersonating a client forces the
server to do as much computation as legitimate clients.
PDM can be vastly more efﬁcient at the server since,
with secret moduli, Difﬁe-Hellman must be broken per
password guess. In most protocols, a single p is used for
all users, so it is worth considerable effort to break Dif-
ﬁe-Hellman for that p. For most uses a Difﬁe-Hellman
prime of less than 1000 bits would not be considered
secure, but for PDM, a 500-bit prime might be sufﬁ-
ciently secure since breaking 500-bit Difﬁe-Hellman is
estimated to require 8000 MIP-years - a high price to
pay to test a single password guess for a single user. If
PDM is sufﬁciently secure with a prime half as big, it
will require 1/4 as much computation at the server as the
best of any of the other schemes.
One natural worry is low-performance clients, such as
hand-held devices. But those devices are carried by the
user, and owned by the user, and therefore can be con-
ﬁgured with a user-speciﬁc high-quality secret. There-
fore such devices do not need schemes such as the one
in this paper, which are naturally suited to the environ-
ment where there is an adequately powered workstation
that has no conﬁgured information for the user.
In this paper we ﬁrst describe how the desirable proper-
ties for a credentials download protocol differ from
those for a mutual authentication protocol. Then we
present the simplest PDM scheme, the one suitable for
credentials download, or a mutual authentication proto-
col with the properties of EKE or SPEKE. As described
in [Pat97] and [BM92],
is tricky to design such
schemes so that an eavesdropper gains no information.
We give an example of a potential vulnerability of EKE
in section 3.2. In this paper we analyze our scheme for
such vulnerabilities and design the protocol so that it
does not leak information which would enable an eaves-
dropper to eliminate passwords.
it
Then we show how to enhance PDM to create a mutual
authentication protocol that has higher performance at
the server than existing password-based mutual authen-
tication protocols (although it will still be more expen-
sive at the client). This involves a method of avoiding
storing a password-equivalent at the server. The scheme
presented in this paper for accomplishing this is more
efﬁcient (for the server) than any previous scheme, even
without the savings of using a smaller Difﬁe-Hellman
modulus. Another enhancement is to prevent two serv-
ers from impersonating each other to a client that uses
the same password on each of them. This enhancement
works for any of the protocols, and has been proposed in
the protocols in [BPR00], [MS99] and [GL00].
2  Properties of Credentials Download vs.
Mutual Authentication Schemes
In general, desirable properties of a strong password
scheme include:
•
•
•
•
•
•
User Alice need only know her name and password.
The workstation need not be conﬁgured with any
user-speciﬁc security information (such as the pub-
lic key of the server to which Alice will authenti-
cate or download her credentials).
An eavesdropper on an authentication exchange
between user Alice and server Bob cannot learn
Alice’s password or be able to capture any informa-
tion that could be used in an off-line password-
guessing attack.
Someone impersonating Alice to Bob, or Bob to
Alice, will not be able to gain any information with
which to do an off-line password-guessing attack,
though one of them will be able to verify a single
on-line guess.
Bob’s database should be salted, so that a dictio-
nary attack against a stolen copy of the database
would have to be launched separately per user,
rather than computing hashes of all passwords in
the dictionary, and comparing it against all users’
information.
Additional properties desirable for a mutual authentica-
tion protocol, that are not necessary for a credentials
download protocol are:
•
•
•
•
Alice authenticates Bob. This is not necessary in
credentials download because all Alice cares about
is whether she’s getting authentic credentials, not
whether she’s getting it from an authentic source.
Bob authenticates Alice. This is not necessary in
credentials download if the credential is encrypted
with a high quality secret such that the requester
cannot do a dictionary attack.
An attacker will not be able to authenticate using
replayed messages. This is not an issue in creden-
tials download since all an attacker can do by
replaying Alice’s message is to get Bob to replay
what he previously transmitted.
Someone that steals Bob’s database will not be able
to directly use the information to impersonate Alice
to Bob or any other server (there is no password-
equivalent stored at Bob), though they will be able
to use it to do an off-line password-guessing attack.
(In credentials download, this is not important
because if someone has stolen Bob’s database he
already has Alice’s encrypted credential, which was
also in the database, so being able to do Alice’s
piece of the protocol is not an advantage).
If Alice uses the same password on multiple serv-
ers, say Bob and Ted, the information Bob stores
cannot be used to impersonate Ted to Alice. (Again,
in credentials download, it does not matter who
gives the credential to Alice).
As a result of not needing these properties, a credentials
download protocol can be simpler. It can be stateless for
the server, have better performance, and require fewer
messages (e.g.,
two). Once credentials are securely
downloaded, the client can engage in any authentication
protocol that assumes strong secrets and/or conﬁgured
CA public keys (e.g. SSL, IPSec, Kerberos, SSH, etc.).
3  PDM: Password Derived Moduli
The key to our protocol, just as with EKE, SPEKE, and
many descendents of these protocols, is to modify a Dif-
ﬁe-Hellman exchange with a function of the user’s pass-
word. For example, EKE encrypts the Difﬁe-Hellman
public number with a function of the user’s password.
SPEKE uses the user’s password to calculate a base for
the Difﬁe-Hellman exchange. We calculate a prime p
that is a function of the user’s password. This is done by
using the user’s password as a seed for a pseudo-random