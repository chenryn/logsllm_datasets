}
在该版本中，s 和 t 的自增运算放到了循环的测试部分中。表达式*t++的值是执行自增 运算之前 t 所指向的字符。后缀运算符++表示在读取该字符之后才改变 t 的值。同样的道理， 在 s 执行自增运算之前，字符就被存储到了指针 s 指向的旧位置。该字符值同时也用来和空 字符'\0'进行比较运算，以控制循环的执行。最后的结果是依次将 t 指向的字符复制到 s 指 向的位置，直到遇到结束符'\0'为止(同时也复制该结束符)，
为了更进一步地精炼程序，我们注意到，表达式同'\0'的比较是多余的，因为只需要判 断表达式的值是否为 0 即可。因此，该函数可进一步写成下列形式:
/* strcpy:              copy t to s; pointer version 3 */ void strcpy(char *s, char *t)
{
while (*s++ = *t++)
;
}
该函数初看起来不太容易理解，但这种表示方法是很有好处的，我们应该掌握这种方法，C 语 言程序中经常会采用这种写法。
标准库()中提供的函数  strcpy 把目标字符串作为函数值返回。 我们研究的第二个函数是字符串比较函数 strcmp(s, t)。该函数比较字符串 s 和 t，
并且根据 s 按照字典顺序小于、等于或大于 t 的结果分别返回负整数、0 或正整数。该返回值
是 s 和 t 由前向后逐字符比较时遇到的第一个不相等字符处的字符的差值。
/* strcmp:              return 0 if s>t */ int strcmp(char *s, char *t)
{
int i;
for (i = 0; s[i] == t[i]; i++)
if (s[i] == '\0') return 0;
return s[i] • t[i];
}
下面用是指针方式实现的 strcmp 函数:
/* strcmp:              return 0 if s>t */ int strcmp(char *s, char *t)
{
for ( ; *s == *t; s++, t++) if (*s == '\0')
return 0; return *s • *t;
}
由于++和••既可以作为前缀运算符，也可以作为后缀运算符，所以还可以将运算符*与 运算符++和••按照其它方式组合使用，但这些用法并不多见。例如，下列表达式
*••p
在读取指针 p 指向的字符之前先对 p 执行自减运算。事实上，下面的两个表达式:
*p++ = val;              /* 将 val 压入校 */
val = *••p;              /* 将校顶元素弹出到 val 中 */
是进校和出校的标准用法。更详细的信息，请参见 4.3 节。 头文件中包含本节提到的函数的声明，另外还包括标准库中其它一些字符
串处理函数的声明。
练习 5•3             用指针方式实现第 2 章中的函数 strcat。函数 strcat(s, t)将 t 指向 的字符串复制到 s 指向的字符串的尾部。
练习 5•4             编写函数 strend(s, t)。如果字符串 t 出现在字符串 s 的尾部，该函数 返回 1;否则返回 0。
练习 5•5             实现库函数 strncpy、strncat 和 strncmp，它们最多对参数字符串中
的前 n 个字符进行操作。例如，函数 strncpy(s, t, n)将 t 中最多前 n 个字符复制到 中。更详细的说明请参见附录 B。
练习 5•6 采用指针而非数组索引方式改写前面章节和练习中的某些程序，例如 getline(第 1、4 章)，atoi、itoa 以及它们的变体形式(第 2、3、4 章)，reverse(第 3 章)，strindex、getop(第 4 章)等等。
5.6 指针数组以及指向指针的指针
由于指针本身也是变量，所以它们也可以像其它变量一样存储在数组中。下面通过编写 UNIX 程序 sort 的一个简化版本说明这一点。该程序按字母顺序对由文本行组成的集合进行排 序。
我们在第 3 章中曾描述过一个用于对整型数组中的元素进行排序的 shell 排序函数，并在 第 4 章中用快速排序算法对它进行了改进。这些排序算法在此仍然是有效的，但是，现在处 理的是长度不一的文本行。并且与整数不同的是，它们不能在单个运算中完成比较或移动操 作。我们需要一个能够高效、方便地处理可变长度文本行的数据表示方法。
我们引入指针数组处理这种问题。如果待排序的文本行首尾相连地存储在一个长字符数 组中，那么每个文本行可通过指向它的第一个字符的指针来访问。这些指针本身可以存储在 一个数组中。这样，将指向两个文本行的指针传递给函数 strcmp 就可实现对这两个文本行 的比较。当交换次序颠倒的两个文本行时，实际上交换的是指针数组中与这两个文本行相对 应的指针，而不是这两个文本行本身(参见图   5•8)。
图 5•8
这种实现方法消除了因移动文本行本身所带来的复杂的存储管理和巨大的开销这两个孪 生问题。
排序过程包括下列 3 个步骤:
读取所有输入行 对文本行进行排序 按次序打印文本行
通常情况下，最好将程序划分成若干个与问题的自然划分相一致的函数，并通过主函数控制 其它函数的执行。关于对文本行排序这一步，我们稍后再做说明，现在主要考虑数据结构以 及输入和输出函数。
输入函数必须收集和保存每个文本行中的字符，并建立一个指向这些文本行的指针的数 组。它同时还必须统计输入的行数，因为在排序和打印时要用到这一信息。由于输入函数只 能处理有限数目的输入行，所以在输入行数过多而超过限定的最大行数时，该函数返回某个 用于表示非法行数的数值，例如•1。
输出函数只需要按照指针数组中的次序依次打印这些文本行即可。
#include 
#include 
#define MAXLINES 5000              /* max #lines to be sorted */ char *lineptr[MAXLINES];              /* pointers to text lines */ int readlines(char *lineptr[], int nlines);
void writelines(char *lineptr[], int nlines); void qsort(char *lineptr[], int left, int right);
/* sort input lines */ main()
{
int nlines;              /* number of input lines read */
if ((nlines = readlines(lineptr, MAXLINES)) >= 0) { qsort(lineptr, 0, nlines•1); writelines(lineptr, nlines);
return 0;
} else {
printf("error: input too big to sort\n"); return 1;
}
}
#define MAXLEN 1000              /* max length of any input line */ int getline(char *, int);
char *alloc(int);
/* readlines:              read input lines */
int readlines(char *lineptr[], int maxlines)
{
int len, nlines;
char *p, line[MAXLEN];
nlines = 0;
while ((len = getline(line, MAXLEN)) > 0)
if (nlines >= maxlines || p = alloc(len) == NULL) return •1;
else {
line[len•1] = '\0';              /* delete newline */ strcpy(p, line);
lineptr[nlines++] = p;
}
return nlines;
}
/* writelines:              write output lines */
void writelines(char *lineptr[], int nlines)
{
int i;
for (i = 0; i  0) printf("%s\n", *lineptr++);
}
(注意这里的数组变量 lineptr 可以改变值)
循环开始执行时，*lineptr 指向第一行，每执行一次自增运算都使得 lineptr 指向下 一行，同时对 nlines 进行自减运算。
在明确了输入和输出函数的实现方法之后，下面便可以着手考虑文本行的排序问题了。 在这里需要对第 4 章的快速排序函数做一些小改动:首先，需要修改该函数的声明部分;其 次，需要调用 strcmp 函数完成文本行的比较运算。但排序算法在这里仍然有效，不需要做 任何改动。
/* qsort:              sort v[left]...v[right] into increasing order */ void qsort(char *v[], int left, int right)
{
int i, last;
void swap(char *v[], int i, int j);
if (left >= right)              /* do nothing if array contains */ return;              /* fewer than two elements */
swap(v, left, (left + right)/2); last = left;
for (i = left+1; i  daytab[leap][i]; i++)