# 技术分享：劫持数字签名与PowerShell自动化过程

## 译文声明
本文为翻译文章，原文来源：pentestlab.blog
原文地址：[链接]
译文仅供参考，具体内容及含义请以原文为准。

**译者**：牧野之鹰
**预估稿费**：260 RMB
**投稿方式**：发送邮件至 linwei#360.cn 或通过网页版在线投稿

## 前言
开发人员通常会对其代码进行数字签名，以确保用户相信其软件的可信度和未被恶意篡改。数字签名是一种验证文件真实性和完整性的方法。安全人员和蓝队通常会检查二进制文件的数字签名，以执行初步的安全检查，并确定是否应将其视为可疑文件。例如，Microsoft的AppLocker和Device Guard等防护技术允许仅运行来自受信任发布者的已签名可执行文件和PowerShell脚本。这种验证通过使用证书来实现。

你可以通过PowerShell中的`Get-AuthenticodeSignature`命令或Sysinternals工具包中的`SigCheck`程序来验证数字签名。马特·格雷伯在DerbyCon 2017的主题演讲中描述了如何通过执行签名验证攻击来绕过设备保护策略并执行未签名代码。

## 数字证书
在现代Windows操作系统中，代码签名技术用于帮助用户识别来自可信源的二进制文件。这些二进制文件通过使用包含发布者信息、私钥和公钥的数字证书进行签名。Authenticode签名可用于区分已签名和未签名的PowerShell脚本及二进制文件。然而，通过复制已签名PowerShell脚本的签名块并将其应用于未签名的脚本，可以轻松劫持PowerShell脚本的证书。

注册表中的`CryptSIPDllGetSignedDataMsg`项包含了处理默认PowerShell SIP（pwrshsip.dll）和本地PowerShell脚本数字签名的注册表项：
```
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography\OIDEncodingType 0\CryptSIPDllGetSignedDataMsg\{603BCC1F-4B59-4E08-B724-D2C6297EF351}
```

我们需要用自定义的SIP和`GetLegitMSSignature`函数替换该密钥的DLL键和FuncName键的值。马特·格雷伯创建了一个自定义的SIP（Subject Interface Package），可以编译后用于使未签名的PowerShell脚本获得合法的Microsoft签名。这个DLL的编译版本可以在GitHub上找到。

替换后的值如下：
```
DLL - C:\Users\User\MySIP.dll
FuncName - GetLegitMSSignature
```

替换后，合法的数字签名将应用于脚本。我们可以通过再次调用`Get-AuthenticodeSignature`模块来验证签名。虽然签名存在，但数字签名验证将失败，因为authenticode哈希不匹配。

此外，还可以使用各种工具（如SigThief和SigPirate）来劫持可信二进制文件的证书，并将其用于非法二进制文件。例如：
```
SigThief:
python sigthief.py -i consent.exe -t mimikatz.exe -o signed-mimikatz.exe

SigPirate:
SigPirate.exe -s consent.exe -d mimikatz.exe -o katz.exe -a
```

尽管经过操作，二进制文件已经具有Microsoft的数字签名，但数字签名验证仍将失败，因为authenticode哈希不匹配。

## 绕过签名验证
Authenticode是一种Microsoft代码签名技术，蓝队可以使用它通过数字证书来识别发布者的身份，并验证二进制文件未被篡改。即使可信证书被盗用于恶意二进制文件，由于authenticode哈希不匹配，数字签名验证将无法通过。无效的authenticode哈希表明该二进制文件不合法。如果从PowerShell控制台执行`Get-AuthenticodeSignature`进行验证，将产生“HashMismatch”错误。

这是因为可执行代码由数字证书的私钥签名，而公钥嵌入在证书本身中。由于私钥未知，攻击者无法为非法二进制文件生成正确的哈希值，因此验证过程总是会失败。

为了削弱数字签名验证机制，我们需要修改注册表。马特·格雷伯发现了散列验证过程在注册表中的位置及其执行方式。`CryptSIPDllVerifyIndirectData`组件用于处理PowerShell脚本和PE文件的数字签名验证。数字签名的哈希验证通过以下注册表键值执行：
```
{603BCC1F-4B59-4E08-B724-D2C6297EF351} // PowerShell Scripts
{C689AAB8-8E78-11D0-8C47-00C04FC295EE} // Portable Executables
```

这些键值存在于以下注册表位置中：
```
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography\OIDEncodingType 0\CryptSIPDllVerifyIndirectData\{603BCC1F-4B59-4E08-B724-D2C6297EF351}
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography\OIDEncodingType 0\CryptSIPDllVerifyIndirectData\{C689AAB8-8E78-11D0-8C47-00C04FC295EE}
```

要达到削弱签名验证机制的目的，我们需要使用另一个合法的DLL文件替换原来的键值表示的DLL，并使用名为`DbgUiContinue`的函数替换原来的函数。修改后的键值如下：
```
DLL - C:\Windows\System32\ntdll.dll
FuncName - DbgUiContinue
```

重启新的PowerShell进程即可绕过哈希验证。恶意二进制文件将显示签名并具有有效的Microsoft签名。马特·格雷伯在其文章《Subverting Trust in Windows》中详细解释了这一绕过方法，并发布了一个PowerShell脚本来自动化签名验证攻击。

运行以下命令将开始绕过：
```
powershell.exe -noexit -file C:\Python34\SignatureVerificationAttack.ps1
```

执行`Get-AuthenticodeSignature` PowerShell模块将产生有效的数字签名哈希。

## 元数据
一些杀毒软件公司依赖数字签名和元数据来识别恶意文件。因此，使用来自可信实体的有效证书和元数据的非合法二进制文件的病毒检测率将会降低。`MetaTwin`是一个基于PowerShell的脚本，可以将文件中的元数据自动复制到另一个二进制文件中。
```
PS C:\metatwin> Import-Module .\metatwin.ps1
PS C:\metatwin> Invoke-MetaTwin -Source C:\Windows\System32\netcfgx.dll -Target .\mimikatz.exe -Sign
```

最重要的是，它可以利用SigThief从Microsoft文件中窃取数字签名。最终的可执行文件将包含元数据细节和Microsoft的数字签名。我们可以通过检查文件属性中的详细信息选项卡来验证。

如果系统已经通过注册表修改绕过了数字签名的哈希验证，那么恶意二进制文件将看起来像是被Microsoft这样的可信实体签名的。

## 结论
劫持合法的数字签名并绕过Windows的哈希验证机制可以被红队用于将恶意二进制文件和PowerShell脚本与本机操作系统文件混合，以逃避检测并绕过设备防护。总结如下：

1. 管理员访问权限是执行此攻击所必需的。
2. 数字签名的可执行文件不会出现在Autoruns默认视图中。
3. 数字签名代码的病毒检测率较低。

蓝队可以执行以下步骤来快速确定系统上是否发生数字签名劫持攻击：

1. 使用`Get-AuthenticodeSignature`验证数字签名哈希的有效性。
2. 查看以下注册表项和值：
   ```
   HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography\OIDEncodingType 0\CryptSIPDllGetSignedDataMsg\{603BCC1F-4B59-4E08-B724-D2C6297EF351}
   DLL - C:\Windows\System32\WindowsPowerShell\v1.0\pwrshsip.dll
   FuncName - PsGetSignature

   HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography\OIDEncodingType 0\CryptSIPDllGetSignedDataMsg\{C689AAB8-8E78-11D0-8C47-00C04FC295EE}
   DLL - C:\Windows\System32\ntdll.dll
   FuncName - CryptSIPGetSignedDataMsg

   HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography\OIDEncodingType 0\CryptSIPDllVerifyIndirectData\{603BCC1F-4B59-4E08-B724-D2C6297EF351}
   DLL - C:\Windows\System32\WindowsPowerShell\v1.0\pwrshsip.dll
   FuncName - PsVerifyHash
   ```