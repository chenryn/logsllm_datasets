### 优化后的文本

#### 方法接收者的声明与接口调用
```go
func (m *defaultMatcher) Search(feed *Feed, searchTerm string)
```
- **声明一个`defaultMatcher`类型的值**:
  ```go
  var dm defaultMatcher
  ```
- **编译器会自动生成指针引用`dm`值，使用指针调用方法**:
  ```go
  dm.Search(feed, "test")
  ```

在Go语言中，将方法的接收者声明为指针是一种常见的做法，尤其是当方法需要修改接收者的状态时。然而，对于`defaultMatcher`类型，由于其不需要维护状态，因此可以将其接收者声明为值。

- **通过接口类型的值调用方法**:
  - 如果方法的接收者是值类型，则该方法可以通过接口类型的值或指针来调用。
  - 如果方法的接收者是指针类型，则该方法只能通过接口类型的指针来调用。

**示例代码**:
```go
// 方法声明为使用指向defaultMatcher类型值的指针作为接收者
func (m *defaultMatcher) Search(feed *Feed, searchTerm string)

// 通过interface类型的值来调用方法
var dm defaultMatcher
var matcher Matcher = &dm // 将指针赋值给接口类型
matcher.Search(feed, "test") // 使用指针来调用接口方法
```

**编译错误**:
```sh
> go build
cannot use dm (type defaultMatcher) as type Matcher in assignment
```

**修正后的代码**:
```go
// 方法声明为使用defaultMatcher类型的值作为接收者
func (m defaultMatcher) Search(feed *Feed, searchTerm string)

// 通过interface类型的值来调用方法
var dm defaultMatcher
var matcher Matcher = dm // 将值赋值给接口类型
matcher.Search(feed, "test") // 使用值来调用接口方法
```

**编译成功**:
```sh
> go build
Build Successful
```

#### `Match`函数的实现
让我们看看`match.go`文件中的`Match`函数实现，如代码清单2-39所示。这个函数在`search.go`文件的第39行由`Run`函数调用。

**代码清单2-39 search/match.go：第19行到第33行**
```go
// Match函数，为每个数据源单独启动goroutine来执行这个函数
// 并发地执行搜索
func Match(matcher Matcher, feed *Feed, searchTerm string, results chan News) {
    // 实现细节
}
```

#### RSS匹配器的实现
RSS匹配器会下载RSS文档，并使用搜索项来搜索标题和描述域，然后将结果发送给`results`通道。我们先来看看`rss.go`文件的前12行代码，如代码清单2-48所示。

**代码清单2-48 matchers/rss.go：第01行到第12行**
```go
package matchers

import (
    "encoding/xml"
    "errors"
    "fmt"
    "log"
    "net/http"
    "regexp"

    "github.com/goinaction/code/chapter2/sample/search"
)
```

- **包名**：定义了包名为`matchers`。
- **导入库**：从标准库中导入了6个库，还导入了`search`包。

为了处理RSS文档的数据，我们需要定义4个结构体类型，如代码清单2-49所示。

**代码清单2-49 matchers/rss.go：第14行到第58行**
```go
type (
    item struct {
        XMLName         xml.Name `xml:"item"`
        PubDate         string   `xml:"pubDate"`
        Title           string   `xml:"title"`
        Description     string   `xml:"description"`
        Link            string   `xml:"link"`
        GUID            string   `xml:"guid"`
        GeoRssPoint     string   `xml:"georss:point"`
    }

    image struct {
        XMLName xml.Name `xml:"image"`
        URL     string   `xml:"url"`
        Title   string   `xml:"title"`
        Link    string   `xml:"link"`
    }

    channel struct {
        XMLName          xml.Name `xml:"channel"`
        Title            string   `xml:"title"`
        Description      string   `xml:"description"`
        Link             string   `xml:"link"`
        PubDate          string   `xml:"pubDate"`
        LastBuildDate    string   `xml:"lastBuildDate"`
        TTL              string   `xml:"ttl"`
        Language         string   `xml:"language"`
        ManagingEditor   string   `xml:"managingEditor"`
        WebMaster        string   `xml:"webMaster"`
        Image            image    `xml:"image"`
        Item             []item   `xml:"item"`
    }

    rssDocument struct {
        XMLName  xml.Name `xml:"rss"`
        Channel  channel  `xml:"channel"`
    }
)
```

这些结构体定义了与RSS文档字段的对应关系。接下来，我们来看看`rssMatcher`类型的声明，如代码清单2-50所示。

**代码清单2-50 matchers/rss.go：第60行到第61行**
```go
// rssMatcher 实现了Matcher接口
type rssMatcher struct{}
```

- **说明**：这个声明与`defaultMatcher`类型的声明类似，因为`rssMatcher`也不需要维护任何状态。

通过这种方式，我们可以确保`defaultMatcher`和`rssMatcher`类型的值和指针都可以满足`Matcher`接口的要求，并且可以在需要的地方使用。