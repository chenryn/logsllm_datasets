### Figure 4: Standard Dovecot Processes and User Authentication
This figure illustrates the processes involved in standard Dovecot and their interactions for user authentication. Solid arrows represent message exchanges, while dashed arrows indicate process actions. Message exchanges across system boundaries use network sockets, whereas those within the same system use UNIX sockets.

### Figure 5: Message Exchanges Between Ported netAuth Dovecot and MVA
The figure shows the message exchanges between the ported netAuth Dovecot and the Mail Viewer Agent (MVA). The login and proxy processes have been simplified by incorporating a small amount of code from them.

### Proxy Binding and Connection Handling
- **Proxy Binding**: The proxy binds to the privileged IMAP port and waits for connection requests.
- **Connection Handling**:
  - **Initialization**: Initializes a socket to listen for new connections, binds to the privileged port, listens, sets the accept mode to `acceptByUser`, and blocks on `pre_accept` waiting for a connection from a new user.
  - **New User Connection**: When a new user connects, the process returns from `pre_accept` with the new user's information. It then forks a child process to handle the user and returns to waiting for new users.
  - **Child Process**: The child process changes the user by executing `setnetuser` with the user information from the `pre_accept` call. The child process runs as the new user and can now accept and process MVA’s requests. The user is authenticated as part of the network stack's connection acceptance. Only authenticated users' connections are accepted; failed authentications result in a RST being sent back.

### Client-Side Modifications
To test the server-side modifications, a netAuth-enabled MVA was created. Instead of porting an existing MVA like Thunderbird, a netAuth proxy was built. This approach offers several advantages, including portability to systems that do not allow kernel modifications and support for a wide variety of MVAs without multiple ports. The proxy presents the least invasive solution.

- **Proxy Binding**: The proxy binds to the IMAP (or POP) port on the localhost.
- **Connection Setup**:
  - **Authentication**: When a new connection request comes in from the MVA, the proxy authenticates the MVA. Once authenticated, the proxy initiates communication with the Dovecot server using the `connect_by_user` system call.
  - **Message Forwarding**: Once connected, the proxy forwards messages to and from the MVA.

### Multiple Dovecot Servers
It is common for a user to have multiple mailboxes on different servers. In this case, the proxy maintains a system-wide mapping from non-routable local IP addresses (in the range 127.0.0.0/8) to the well-known routable IP addresses of the remote hosts running Dovecot. All MVAs on the client are configured to use these IP addresses to refer to their respective hosts.

- **Proxy Listening**: The proxy binds and listens for connection requests on all published local interfaces (i.e., all 127.0.0.0/8 IP addresses configured for the proxy).
- **Request Handling**: A request on a given IP address corresponds to a particular remote host (known to the proxy). The proxy then follows the scheme outlined above to authenticate the user and establish the connection.

### Security Achieved
- **Private Key Access**: Users never have access to their private keys and need permission to authenticate using them. This mechanism can be expanded to allow different private keys for different uses.
- **Authorization**: Only specified users can connect to the service, as they must be authorized. This authorization is independent of the service, ensuring that the service cannot evade these mechanisms.
- **Process Security**: The process avoids setting the user ID, but pairs user authentication with the connection, ensuring it can only be used by the process that accepts the connection and requires authentication before reading or writing to the connection.

### Conclusion
UBNS (User-Based Network Security) requires mechanisms for user authentication over the network and allowing server processes to change the user on whose behalf they execute. Implementing cryptographic mechanisms for user authentication in applications is complex and error-prone. Moving these mechanisms outside the application makes the application independent of them and simplifies the design process. NetAuth is a simple mechanism to invoke network authentication and process change-of-ownership, encouraging UBNS design. It builds on Kerberos, SSH, and Plan9, providing better information assurance.

- **Code Simplification**: Requires only four lines of code for authenticated and cryptographically protected communications.
- **Process Partitioning**: Enables early partitioning of the application into processes.
- **Security Enhancements**: Removes the need for privileged processes to receive external input, guarding against attacks like buffer overflows.
- **Independent Authorization**: Externalizes authorization, making it independent of application failures.

NetAuth integrates public key and fast re-authentication mechanisms for high-performance authentications with strong security properties. Reusing processes for the same user saves system overhead, simplifying the structure of such applications and making it easier to build UBNS. This easy-to-use mechanism encourages programmers to integrate security from the start, leading to more secure applications.

### Acknowledgements
The authors would like to thank Jorge Hernandez-Herrero and the anonymous referees for their valuable feedback. This work was supported in part by the National Science Foundation under Grants No. 0627586 and 0551660. Any opinions, findings, and conclusions or recommendations expressed in this paper are those of the author and do not necessarily reflect the views of the National Science Foundation.

### Notes
1. [http://www.securityfocus.com/infocus/1876](http://www.securityfocus.com/infocus/1876)
2. [http://www.dovecot.org/security.html](http://www.dovecot.org/security.html)

### References
[1] IEEE/ANSI Draft Std. 1003.1e. Draft Standard for Information Technology–POSIX Part 1: System API: Protection, Audit and Control Interface, 1997.
[2] Anurag Acharya and Mandar Raje. MAPbox: Using parameterized behavior classes to confine untrusted applications. In Proceedings of the 9th USENIX Security Symposium, Denver, Colorado, August 2000. USENIX.
...
[42] Tatu Ylonen. SSH—secure login connections over the internet. In Proc. of the USENIX Security Symposium, pages 37–42, San Jose, California, 1996.