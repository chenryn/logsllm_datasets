Uk
Figure 4: The processes that comprise standard dovecot and their interaction to authenticate a user. Solid arrows
indicate message exchange while dashed ones represent process actions. Message exchange across system boundaries
use a network socket while those within the same system use UNIX sockets.
USENIX Association  
17th USENIX Security Symposium 
237
Mail
Viewer
Agent
1a: SYN
imap
dovecot
1c: OK Dovecot Ready.
2:access mailbox
1b:fork,
setnetuser
imap
U1
imap
Uk
Figure 5: The message exchanges between the ported netAuth dovecot and the MVA.
and login processes are eliminated after taking a small
amount code from them.
• proxy binds to the privileged IMAP port and waits
blocking for connection request.
The resulting imap code performs the following
steps:
• initializes a socket to listen for new connections. It
performs a bind on the privileged port, a listen,
sets the accept mode to acceptByUser and blocks on
pre accept waiting for a connection from a user
for which there is no imap process.
• when a connection from a new user arrives, the pro-
cess returns from pre accept with the new user’s
information. The process forks a child process to
handle the user and returns to waiting for a new user.
• the child process changes the user by executing
set net user with the user information from the
pre accept call. The child process runs as the
new user. This process can now accept the connec-
tions (for that user) and process the MVA’s requests.
The user is authenticated as part of the processing
in the network stack to accept a connection Hence,
pre accept returns only for authenticated users. Con-
nection requests of users that fail to successfully authen-
tication are dropped (with a RST sent back).
6.2 Client side modiﬁcations
To test out the server-side modiﬁcations it was necessary
to produce a netAuth-enabled MVA. Rather than port an
existing MVA, such as Thunderbird, we instead built a
netAuth proxy. This has several advantages, including
portability to systems which do not allow kernel modi-
ﬁcations and ability to support a wide variety of MVAs
without doing multiple ports. The proxy presented the
least invasive approach.
The proxy binds to the IMAP (or POP) port on the
localhost. The events to setup a new connection:
• when a new connection request comes in from the
MVA, the proxy authenticates the MVA. Once authen-
ticated, the proxy initiates communication with the
dovecot server using the connect by user sys-
tem call.
• Once connected, the proxy just forwards messages
to and from the MVA.
Multiple dovecot servers
It is not unusual for a user
to have multiple mailboxes maintained at more than one
server. In this case, the proxy maintains a system-wide
mapping (common to all users) from non-routable local
IP addresses in the range 127.0.0.0/8 to the well-known
routable IP address of the remote host running the dove-
cot server. All the MVA’s on the client are then conﬁgured
to use IP addresses in this range (published by the proxy)
to refer their respective hosts.
The proxy binds and listens for connection requests on
all the published local interfaces (i.e., all the 127.0.0.0/8
IP addresses conﬁgured for the proxy). A request on a
given IP address corresponds to a particular remote host
(known to the proxy). The proxy can then follow the
scheme outlined above to authenticate the user and es-
tablish the connection.
7 Security achieved
The user never has access to his private keys, and in fact
needs permission to authenticate using the private keys.
This mechanism can be expanded to allow different pri-
vate keys for different uses, although we do not yet sup-
port that. One use of such a facility is to allow the user to
perform personal chores, such as banking with one key
and to perform business functions with another key.
Only the speciﬁed users can connect to the service,
since they must be authorized. This authorization is in-
238 
17th USENIX Security Symposium 
USENIX Association
dependent of a service; if the service is designated as
an authenticated and authorized service, there is nothing
the service can do (either deliberately or accidentally) to
evade this mechanisms. The process may avoid actually
setting the user ID, but the mechanism pairs user authen-
tication with the connection, so that it can only be used
by the process which accepts that connection and it is
necessary to authenticate before reading or writing to the
connection.
Because the authorization and authentication of user
services are totally declarative, it is possible to automat-
ically analyze them. (In contrast, this is not possible in
general, due to decidability problems, when these func-
tions are performed by application code.) We are plan-
ning on extending our previous work in DAC and MAC
access controls to automatically analyze authorization
properties across computer systems [36, 35, 37].
8 Conclusion
UBNS requires a mechanism for (1) authentication of
users over the network and (2) allowing server processes
to change the user on whose behalf they execute. Imple-
menting the cryptographic mechanisms for user authen-
tication as part of the application is complex and error
prone, and as we showed, requires a substantial amount
of code. Moving the authentication and cryptographic
mechanisms outside the application makes the applica-
tion independent of these mechanism, and application
programmers are usually not skilled in this area. More-
over, the OS mechanisms for change of process owner-
ship are also dangerous as such privileges are among the
strongest in a computer system, since changing a user
typically allows the privileges of any user to be appropri-
ated.
And hence, programmers typically defer such consid-
erations, ignoring them during initial design. But UBNS
affects the very structure of programs and when its con-
sideration is delayed, it becomes increasingly expensive
to retroﬁt. Thus many applications will not be structured
as UBNS and the design will not satisfy the property of
least privilege.
NetAuth is a simple mechanism to invoke network au-
thentication and process change-of-ownership, thus en-
couraging the design of UBNS. It builds on the work of
Kerberos, SSH, and Plan9 but seeks to do so with the
style of mandatory access controls and to provide better
information assurance. It
• Requires only four lines of code for authenticated
and cryptographically protected communications
vs. a (concurrent) service which neither authenti-
cates nor encrypts trafﬁc.
• Enables the application developer to focus on the
key task of partitioning the application into pro-
cesses early in the design process.
• Remove the need for privileged processes to receive
external input, and thus guards against a range of
attacks including buffer overﬂow.
• Makes application code independent of the authen-
tication method, thus enabling changes in the au-
thentication methods without affecting either source
or binary code.
• Externalizes authorization, making it independent
of application failures.
While the authentication mechanism and APIs described
here can be used with any authorization model, we have
also built an authorization model (to be described else-
where) which has a highly analyzable conﬁguration in
which strong properties can be understood independently
of the application code.
NetAuth integrates public key and a fast
re-
authentication mechanism to achieve high performance
authentications with the strongest possible properties.
Further increases in performance are enabled by the re-
use of processes for the same user, saving system over-
head. This simpliﬁes the structure of such applications,
and makes it much easier to build UBNS. Such an easy-
to-use mechanism will encourage programmers to inte-
grate security from the start, and thus construct more se-
cure applications.
Not only do these mechanisms enable the construction
of more secure services but also provide signiﬁcant ad-
vantages for system administration. These mechanisms
enable strong controls to be imposed on services without
resorting to application speciﬁc conﬁguration and with-
out analyzing application code.
Acknowledgements
The authors would like to thank Jorge Hernandez-
Herrero and the anonymous referees for their valuable
feedback.
This work was supported in part by the National
Science Foundation under Grants No.
0627586 and
0551660. Any opinions, ﬁndings and conclusions or rec-
ommendations expressed in this paper are those of the
author and do not necessarily reﬂect the views of the Na-
tional Science Foundation.
Notes
1http://www.securityfocus.com/infocus/1876
2http://www.dovecot.org/security.html
USENIX Association  
17th USENIX Security Symposium 
239
3Alternatively, SSH allows a remote executable to be invoked, but
that remote executable is not connected to as a network service.
4hg-login http://www.selenic.com/mercurial/wiki/
index.cgi/SharedSSH, as used in Mercurial, performs remote
authentication using SSH, but execs a new program rather than con-
nect to a running network service.
5We are using a simpliﬁed, and easily customized, certiﬁcate rather
than the complex X.509 certiﬁcates.
6The application code forks the new process pj. This explicit struc-
ture allows also non-privilege-separated iterative and concurrent ser-
vice, although these exist largely for legacy applications.
7Source
benchmarks-amd64.html,
processor
http://www.cryptopp.com/
for an AMD Opeteron 2.4 GHz
8The server has an nVidia 570 chipset and the client an nVidia 430
chipset. They both run the open source forcedeth driver.
9The webpage at http://www.dovecot.org/security.html displays a
list of security holes found in dovecot since the announcement of the
award. The dovecot developer (maintainer of the webpage) claims that
these holes cannot be exploited under reasonable circumstance stated
as a set of rules on the same page.
10Dovecot also supports POP, which we ignore for this comparison.
11Code from the directories: auth, imap-login, login-common, lib-
auth and master (except the conﬁguration code).
References
[1] IEEE/ANSI Draft Std. 1003.1e. Draft Standard for Information
Technology–POSIX Part 1: System API: Protection, Audit and
Control Interface, 1997.
[2] Anurag Acharya and Mandar Raje. MAPbox: Using parameter-
ized behavior classes to conﬁne untrusted applications. In Pro-
ceedings of the 9th USENIX Security Symposium, Denver, Col-
orado, August 2000. USENIX.
[3] Jeffrey L. Berger, Jeffrey Picciotto, John P. L. Woodward, and
Paul T. Cummings. Compartmented mode workstation: Proto-
type highlights.
IEEE Transactions on Software Engineering,
16(6):608–618, 1990. Special Section on Security and Privacy.
[4] Daniel J. Bernstein. Some thoughts on security after ten years
of qmail 1.0. In First Computer Security Architecture Workshop,
page 1. ACM, 2007. Invited paper.
[5] M. Blaze, J. Feigenbaum, J. Ioannidis, and A. Keromytis.
RFC 2704: The KeyNote Trust-Management System Version 2,
September 1999.
[6] David Brumley and Dawn Xiaodong Song. Privtrans: Automat-
ically partitioning programs for privilege separation. In USENIX
Security Symposium, pages 57–72, 2004.
[7] Martin Casado, Michael J. Freedman, Justin Pettit, Jianying Luo,
Nick McKeown, and Scott Shenker. Ethane: taking control of
the enterprise. In Jun Murai and Kenjiro Cho, editors, Proceed-
ings of the ACM SIGCOMM 2007 Conference on Applications,
Technologies, Architectures, and Protocols for Computer Com-
munications, pages 1–12. ACM, August 2007.
[8] Martin Casado, Tal Garﬁnkel, Aditya Akella, Michael Freedman,
Dan Boneh, Nick McKeown, and Scott Shenker. Sane: A pro-
tection architecture for enterprise networks. In Usenix Security,
October 2006.
[9] Crispin Cowan, Steve Beattie, Greg Kroah-Hartman, Calton Pu,
Perry Wagle, and Virgil Gligor. Subdomain: Parsimonious se-
curity server. In 14th Systems Administration Conference (LISA
2000), pages 355–367, New Orleans, LA, 2000.
[10] Russ Cox, Eric Grosse, Rob Pike, Dave Presotto, and Sean Quin-
lan. Security in Plan 9. In Proc. of the USENIX Security Sympo-
sium, pages 3–16, 2002.
[11] Petros Efstathopoulos, Maxwell Krohn, Steve VanDeBogart,
Cliff Frey, David Ziegler, Eddie Kohler, David Mazi`eres, Frans
Kaashoek, and Robert Morris. Labels and event processes in the
asbestos operating system. SIGOPS Oper. Syst. Rev., 39(5):17–
30, 2005.
[12] Alan O. Freier, Philip Karlton, and Paul C. Kocher. The SSL
protocol — version 3.0. Internet Draft, Transport Layer Security
Working Group, November 1996.
[13] Vinod Ganapathy, Trent Jaeger, and Somesh Jha. Retroﬁtting
legacy code for authorization policy enforcement. In IEEE Sym-
posium on Security and Privacy, pages 214–229, 2006.
[14] Tal Garﬁnkel, Ben Pfaff, and Mendel Rosenblum. Ostia: A del-
egating architecture for secure system call interposition. In Proc.
Network and Distributed Systems Security Symposium, February
2004.
[15] Ian Goldberg, David Wagner, Randi Thomas, and Eric A. Brewer.
A secure environment for untrusted helper applications (conﬁn-
ing the wily hacker). In Proc. of the USENIX Security Sympo-
sium, San Jose, Ca., 1996.
[16] Sotiris Ioannidis, Steven M. Bellovin, John Ioannidis, Angelos D.
Keromytis, and Jonathan M. Smith. Virtual private services: Co-
ordinated policy enforcement for distributed applications. IJNS,
4(1), January 2007. http://www1.cs.columbia.edu/
˜angelos/Papers/2006/ijns.pdf.
[17] Trent Jaeger, Kevin Butler, David H. King, Serge Hallyn, Joy
Latten, and Xiaolan Zhang. Leveraging IPsec for mandatory ac-
cess control across systems. In Proceedings of the Second Inter-
national Conference on Security and Privacy in Communication
Networks, August 2006.
[18] C. Kaufman. RFC 4306: Internet key exchange (ikev2) protocol,
December 2005.
[19] S. Kent and K. Seo. RFC 4301: Security architecture for the
internet protocol, December 2005.
[20] Douglas Kilpatrick. Privman: A library for partitioning appli-
In USENIX Annual Technical Conference, FREENIX
cations.
Track, pages 273–284. USENIX, 2003.
[21] Maxwell N. Krohn. Building secure high-performance web ser-
In USENIX Annual Technical Conference,
vices with OKWS.
General Track, pages 185–198, 2004.
[22] Aleksey Kurchuk and Angelos D. Keromytis. Recursive sand-
In SEC,
boxes: Extending systrace to empower applications.
pages 473–488, 2004.
[23] Leslie Lamport. Password authentiﬁcation with insecure commu-
nication. Commun. ACM, 24(11):770–772, 1981.
[24] John Linn. Generic interface to security services. Computer Com-
munications, 17(7):476–482, July 1994.
[25] Jonathan M. McCune, Trent Jaeger, Stefan Berger, Ram´on
C´aceres, and Reiner Sailer. Shamon: A system for distributed
mandatory access control. In ACSAC, pages 23–32. IEEE Com-
puter Society, 2006.
[26] Larry McVoy and Carl Staelin.
lmbench: Portable tools
In USENIX, editor, Proceedings
for performance analysis.
of the USENIX 1996 annual technical conference:
January
22–26, 1996, San Diego, California, USA, USENIX Confer-
ence Proceedings 1996, pages 279–294, pub-USENIX:adr, 1996.
USENIX.
[27] Stefan Miltchev, Vassilis Prevelakis, Sotiris Ioannidis, John Ioan-
nidis, Angelos D. Keromytis, and Jonathan M. Smith. Secure and
ﬂexible global ﬁle sharing. In USENIX Annual Technical Confer-
ence, FREENIX Track, pages 165–178. USENIX, 2003.
[28] Niels Provos. Improving host security with system call policies.
Technical report, CITI, University of Michigan, 2002.
240 
17th USENIX Security Symposium 
USENIX Association
[29] Niels Provos, Markus Friedl, and Peter Honeyman. Preventing
privilege escalation. In Proceedings of the 12th USENIX Security
Symposium, pages 231–242. USENIX, August 2003.
[30] Manigandan Radhakrishnan and Jon A. Solworth. Application
security support in the operating system kernel.
In ACM Sym-
posium on InformAtion, Computer and Communications Security
(AsiaCCS’06), pages 201–211, Taipei, Taiwan, March 2006.
[31] Ronald Rivest, Adi Shamir, and L. Adleman. On digital signa-
tures and public key cryptosystems. Communications of the ACM
(CACM), 21:120–126, 1978.
[32] J. H. Saltzer and M. D. Schroeder. The protection of information
in computer system. Proceedings of the IEEE, 63(9):1278–1308,
1975.
[33] Vipin Samar. Uniﬁed login with Pluggable Authentication Mod-
ules (PAM). In Clifford Neuman, editor, Proc. ACM Conference
on Computer and Communications Security (CCS), pages 1–10.
ACM Press, 1996.
[34] Stephen Smalley, Chris Vance, and Wayne Salamon. Implement-
ing SELinux as a Linux security module. Report #01-043, NAI
Labs, December 2001. Revised April 2002.
[35] Jon A. Solworth and Robert H. Sloan.
Decidable ad-
ministrative controls based on security properties, 2004.
Available at http://www.rites.uic.edu/˜solworth/
kernelSec.html.
[36] Jon A. Solworth and Robert H. Sloan. A layered design of discre-
tionary access controls with decidable properties. In Proc. IEEE
Symp. Security and Privacy, pages 56–67, 2004.
[37] Jon A. Solworth and Robert H. Sloan. Security property-based
administrative controls.
In Proc. European Symp. Research in
Computer Security (ESORICS), volume 3139 of Lecture Notes in
Computer Science, pages 244–259. Springer, 2004.
[38] Jennifer G. Steiner, B. Clifford Neuman, and J. I. Schiller. Ker-
beros: An authentication service for open network systems. In
Winter 1988 USENIX Conference, pages 191–201, Dallas, TX,
1988.
[39] W. Richard Stevens. Advanced Programming in the UNIX Envi-
ronment. Addison-Wesley, 1992.
[40] B. Swander, A. Huttunen, V. Volpe, and L. DiBurro. RFC 3948:
UDP encapsulation of IPsec ESP packets, January 2005.
[41] Chris Wright, Crispin Cowan, Stephen Smalley, James Morris,
and Greg Kroah-Hartman. Linux Security Modules: General se-
curity support for the Linux Kernel. In Proc. of the USENIX Se-
curity Symposium, San Francisco, Ca., 2002.
[42] Tatu Ylonen. SSH—secure login connections over the internet.
In Proc. of the USENIX Security Symposium, pages 37–42, San
Jose, California, 1996.
USENIX Association  
17th USENIX Security Symposium 
241