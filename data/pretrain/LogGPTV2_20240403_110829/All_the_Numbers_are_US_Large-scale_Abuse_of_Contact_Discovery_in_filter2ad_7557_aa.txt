title:All the Numbers are US: Large-scale Abuse of Contact Discovery in
Mobile Messengers
author:Christoph Hagen and
Christian Weinert and
Christoph Sendner and
Alexandra Dmitrienko and
Thomas Schneider
All the Numbers are US: Large-scale Abuse of
Contact Discovery in Mobile Messengers
Christoph Hagen†, Christian Weinert‡, Christoph Sendner†, Alexandra Dmitrienko†, Thomas Schneider‡
†University of W¨urzburg, Germany, {christoph.hagen,christoph.sendner,alexandra.dmitrienko}@uni-wuerzburg.de
‡Technical University of Darmstadt, Germany, {weinert,schneider}@encrypto.cs.tu-darmstadt.de
Abstract— Contact discovery allows users of mobile messen-
gers to conveniently connect with people in their address book.
In this work, we demonstrate that severe privacy issues exist in
currently deployed contact discovery methods.
Our study of three popular mobile messengers (WhatsApp,
Signal, and Telegram) shows that, contrary to expectations, large-
scale crawling attacks are (still) possible. Using an accurate
database of mobile phone number preﬁxes and very few resources,
we have queried 10 % of US mobile phone numbers for WhatsApp
and 100 % for Signal. For Telegram we ﬁnd that its API exposes
a wide range of sensitive information, even about numbers
not registered with the service. We present interesting (cross-
messenger) usage statistics, which also reveal that very few users
change the default privacy settings. Regarding mitigations, we
propose novel techniques to signiﬁcantly limit the feasibility of our
crawling attacks, especially a new incremental contact discovery
scheme that strictly improves over Signal’s current approach.
Furthermore, we show that currently deployed hashing-based
contact discovery protocols are severely broken by comparing
three methods for efﬁcient hash reversal of mobile phone numbers.
For this, we also propose a signiﬁcantly improved rainbow
table construction for non-uniformly distributed inputs that is
of independent interest.
I.
INTRODUCTION
Contact discovery is a procedure run by mobile messaging
applications to determine which of the contacts in the user’s
address book are registered with the messaging service. Newly
registered users can thus conveniently and instantly start
messaging existing contacts based on their phone number
without the need to exchange additional information like user
names, email addresses, or other identiﬁers1.
Centralized messaging platforms can generally learn the
social graphs of their users by observing messages exchanged
between them. Current approaches to protect against this type
of trafﬁc analysis are inefﬁcient [80], with Signal attempting to
improve their service in that regard [46]. While only active users
are exposed to such analyses, the contact discovery process
potentially reveals all contacts of users to the service provider,
since they must in some way be matched with the server’s
database. This is one of the reasons why messengers like Whats-
App might not be compliant with the European GDPR in a
business context [21], [77].
1Some  mobile  applications  of  social  networks  perform  contact  discovery 
also  using  email  addresses  stored  in  the  address  book.
Network  and  Distributed  Systems  Security  (NDSS)  Symposium  2021
21-25  February  2021, Virtual
ISBN  1-891562-66-5
https://dx.doi.org/10.14722/ndss.2021.23159
www.ndss-symposium.org
Cryptographic protocols for private set intersection (PSI)
can perform this matching securely. Unfortunately, they are
currently not efﬁcient enough for mobile applications with
billions of users [37]. Furthermore, even when deploying PSI
protocols, this does not resolve all privacy issues related to
contact discovery as they cannot prevent enumeration attacks,
where an attacker attempts to discover which phone numbers
are registered with the service.
Leaking Social Graphs. Worryingly, recent work [37] has
shown that many mobile messengers (including WhatsApp)
facilitate contact discovery by simply uploading all contacts
from the user’s address book2 to the service provider and
even store them on the server if no match is found [2]. The
server can then notify the user about newly registered users,
but can also construct the full social graph of each user. These
graphs can be enriched with additional information linked to
the phone numbers from other sources [12], [29], [30]. The
main privacy issue here is that sensitive contact relationships
can become known and could be used to scam, discriminate, or
blackmail users, harm their reputation, or make them the target
of an investigation. The server could also be compromised,
resulting in the exposure of such sensitive information even if
the provider is honest.
To alleviate these concerns, some mobile messaging appli-
cations (including Signal) implement a hashing-based contact
discovery protocol, where phone numbers are transmitted to
the server in hashed form [37]. Unfortunately, the low entropy
of phone numbers indicates that it is most likely feasible for
service providers to reverse the received hash values [50] and
therefore, albeit all good intentions, there is no gain in privacy.
Crawling. Unfortunately, curious or compromised service
providers are not the only threat. Malicious users or external
parties might also be interested in extracting information about
others. Since there are usually no noteworthy restrictions for
signing up with such services, any third party can create a large
number of user accounts to crawl this database for information
by requesting data for (randomly) chosen phone numbers.
Such enumeration attacks cannot be fully prevented, since
legitimate users must be able to query the database for contacts.
In practice, rate-limiting is a well-established measure to
effectively mitigate such attacks at a large scale, and one would
assume that service providers apply reasonable limits to protect
their platforms. As we show in § IV, this is not the case.
The simple information whether a speciﬁc phone number is
registered with a certain messaging service can be sensitive in
2Assuming that users give the app permission to access contacts, which is
very likely since otherwise they must manually enter their messenger contacts.
many ways, especially when it can be linked to a person. For
example, in areas where some services are strictly forbidden,
disobeying citizens can be identiﬁed and persecuted.
Comprehensive databases of phone numbers registered
with a particular service can also allow attackers to perform
exploitation at a larger scale. Since registering a phone number
usually implies that the phone is active, such databases can be
used as a reliable basis for automated sales or phishing calls.
Such “robocalls” are already a massive problem in the US [79]
and recent studies show that telephone scams are unexpectedly
successful [78]. Two recent WhatsApp vulnerabilities, where
spyware could be injected via voice calls [73] or where remote
code execution was possible through specially crafted MP4
ﬁles [26], could have been used together with such a database
to quickly compromise a signiﬁcant number of mobile devices.
Which information can be collected with enumeration
attacks depends on the service provider and the privacy
settings (both in terms of which settings are chosen by the user
and which are available). Examples for personal (meta) data that
can commonly be extracted from a user’s account include proﬁle
picture(s), nickname, status message, and the last time the user
was online. In order to obtain such information, one can simply
discover speciﬁc numbers, or randomly search for users [71].
By tracking such data over time, it is possible to build accurate
behavior models [8], [72], [87]. Matching such information with
other social networks and publicly available data sources allows
third parties to build even more detailed proﬁles [12], [29], [30].
From a commercial perspective, such knowledge can be utilized
for targeted advertisement or scams; from a personal perspective
for discrimination, blackmailing, or planning a crime; and
from a nation state perspective to closely monitor or persecute
citizens [14]. A feature of Telegram, the possibility to determine
phone numbers associated with nicknames appearing in group
chats, lead to the identiﬁcation of “Comrade Major” [85] and
potentially endangered many Hong Kong protesters [14].
Our Contributions. We illustrate severe privacy issues
that exist in currently deployed contact discovery methods by
performing practical attacks both from the perspective of a
curious service provider as well as malicious users.
a) Hash Reversal Attacks: Curious service providers
can exploit currently deployed hashing-based contact discovery
methods, which are known to be vulnerable [20], [48], [50].
We quantify the practical efforts for service providers (or
an attacker who gains access to the server) for efﬁciently
reversing hash values received from users by evaluating three
approaches: (i) generating large-scale key-value stores of phone
numbers and corresponding hash values for instantaneous
dictionary lookups, (ii) hybrid brute-force attacks based on
hashcat [74], and (iii) a novel rainbow table construction.
In particular, we compile an accurate database of world-
wide mobile phone preﬁxes (cf. § II) and demonstrate in § III
that their hashes can be reversed in just 0.1 ms amortized
time per hash using a lookup database or 57 ms when brute-
forcing. Our rainbow table construction incorporates the non-
uniform structure of all possible phone numbers and is of
independent interest. We show that one can achieve a hit
rate of over 99.99 % with an amortized lookup time of 52 ms
while only requiring 24 GB storage space, which improves over
classical rainbow tables by more than factor 9,400x in storage.
b) Crawling Attacks: For malicious registered users and
outside attackers, we demonstrate that crawling the global
databases of the major mobile messaging services WhatsApp,
Signal, and Telegram is feasible. Within a few weeks time,
we were able to query 10 % of all US mobile phone numbers
for WhatsApp and 100 % for Signal. Our attack uses very few
resources: the free Hushed [1] application for registering clients
with new phone numbers, a VPN subscription for rotating IP
addresses, and a single laptop running multiple Android
emulators. We report the rate limits and countermeasures
experienced during the process, as well as other interesting
ﬁndings and statistics. We also ﬁnd that Telegram’s API reveals
sensitive personal (meta) data, most notably how many users
include non-registered numbers in their contacts.
c) Mitigations: We propose a novel incremental contact
discovery scheme that does not require server-side storage
of client contacts (cf. § V). Our evaluation reveals that our
approach enables deploying much stricter rate limits without de-
grading usability or privacy. In particular, the currently deployed
rate-limiting by Signal can be improved by a factor of 31.6x
at the cost of negligible overhead (assuming the database
of registered users changes 0.1 % per day). Furthermore, we
provide a comprehensive discussion on potential mitigation
techniques against both hash reversal and enumeration attacks
in § VI, ranging from database partitioning and selective contact
permissions to limiting contact discovery to mutual contacts.
Overall, our work provides a comprehensive study of privacy
issues in mobile contact discovery and the methods deployed by
three popular applications with billions of users. We investigate
three attack strategies for hash reversal, explore enumeration
attacks at a much larger scale than previous works [30], [71],
and discuss a wide range of mitigation strategies, including our
novel incremental contact discovery that has the potential of
real-world impact through deployment by Signal.
Outline. We ﬁrst describe our approach to compile an
accurate database of mobile phone numbers (§ II), which
we use to demonstrate efﬁcient reversal of phone number
hashes (§ III). We also use this information to crawl WhatsApp,
Signal, and Telegram, and present insights and statistics (§ IV).
Regarding mitigations, we present our incremental contact dis-
covery scheme (§ V) and discuss further techniques (§ VI). We
then provide an overview of related work (§ VII) and conclude
with a report on our responsible disclosure process (§ VIII).
II. MOBILE PHONE NUMBER PREFIX DATABASE
In the following sections, we demonstrate privacy issues
in currently deployed contact discovery methods by showing
how alarmingly fast hashes of mobile phone numbers can be
reversed (cf. § III) and that the database crawling of popular
mobile messaging services is feasible (cf. § IV). Both attacks
can be performed more efﬁciently with an accurate database
of all possible mobile phone number preﬁxes3. Hence, we ﬁrst
show how such a database can be built.
A. Phone Number Structure
International phone numbers conform to a speciﬁc structure
to be globally unique: Each number starts with a country
3Some messengers like WhatsApp and Signal also allow to register with
landline phone numbers. We assume that very few users make use of this
option, and also argue that gathering landline phone numbers is less attractive
for attackers (e.g., when the goal is to infect smartphones with malware).
2
code (deﬁned by the ITU-T standards E.123 and E.164, e.g., +1
for the US), followed by a country-speciﬁc preﬁx and a
subscriber number. Valid preﬁxes for a country are usually
determined by a government body and assigned to one or more
telecommunication companies. These preﬁxes have blocks of
subscriber numbers assigned to them, from which numbers can
be chosen by the provider to be handed out to customers. The
length of the subscriber numbers is speciﬁc for each preﬁx and
can be ﬁxed or in a speciﬁed range.
In the following, we describe how an accurate list of (mo-
bile) phone number preﬁxes can be compiled, including the
possible length of the subscriber number. A numbering plan
database is maintained by the International Telecommunication
Union (ITU) [36] and further national numbering plans are
linked therein. This database comprises more than 250 coun-
tries (including autonomous cities, city states, oversea territories,
and remote island groups) and more than 9,000 providers
in total. In our experiments in § IV, we focus on the US,
where there are 3,794 providers (including local branches).
Considering the speciﬁed minimum and maximum length of
phone numbers, the preﬁx database allows for ≈52 trillion
possible phone numbers (≈1.6 billion in the US). However,
when limiting the selection to mobile numbers only, the search
space is reduced to ≈758 billion (≈0.5 billion in the US).
B. Database Preprocessing
As it turned out in our experiments, some of the numbers
that are supposed to be valid according to the ITU still cannot be
registered with the examined messaging applications. Therefore,
we perform two additional preprocessing steps.
Google’s libphonenumber library [27] can validate
phone numbers against a rule-based representation of inter-
national numbering plans and is commonly used in Android
applications to ﬁlter user inputs. By ﬁltering out
invalid
numbers, the amount of possible mobile phone numbers can
be reduced to ≈353 billion.
Furthermore, WhatsApp performs an online validation of
the numbers before registration to check, for example, whether
the respective number was banned before. This allows us to
check all remaining preﬁxes against the WhatsApp registra-
tion/login API by requesting the registration of one number for
each preﬁx and each possible length of the subscriber number.
Several more preﬁxes are rejected by WhatsApp for reasons
like “too long” or “too short”. Our ﬁnal database for our further
experiments thus contains up to ≈118 billion mobile phone
numbers (≈0.5 billion in the US4). In § A we detail interesting
relative differences in the amount of registrable mobile phone
numbers between countries.
III. MOBILE PHONE NUMBER HASH REVERSAL
Although the possibility of reversing phone number hashes
has been acknowledged before [20], [48], [50], the severity of
the problem has not been quantiﬁed. The amount of possible
mobile phone numbers that we determined in § II indicates
the feasibility of determining numbers based on their hash
values. In the following, we show that real-time hash reversal
is practical not only for service providers and adversaries with
powerful resources, but even at a large scale using commodity
hardware only.
4libphonenumber and WhatsApp reject no US mobile preﬁxes.
Threat Model. Here we consider the scenario where users
provide hashed mobile phone numbers of their address book
entries to the service provider of a mobile messaging application
during contact discovery. The adversary’s goal is to learn
the numbers from their hashed representation. For this, we
assume the adversary has full access to the hashes received
by the service provider. The adversary therefore might be
the service provider itself (being “curious”), an insider (e.g.,
an administrator of the service provider), a third party who
compromised the service provider’s infrastructure, or a law
enforcement or intelligence agency who forces the service
provider to hand out information. Importantly, we assume the
adversary has no control over the users and does not tamper
with the contact discovery protocol.
We compare three different approaches to reverse hashes
of mobile phone numbers, each suitable for different purposes
and available resources. In order to ensure comparability and
uniqueness, phone numbers are processed as strings without
spaces or dashes, and including their country code. Some
applications add the “+”-sign as a preﬁx to conform to the E.164
format. In our experiments, numbers only consist of digits,
but all approaches work similarly for other formats. We
choose SHA-1 as our exemplary hash function, which is also
used by Signal for contact discovery5.
A. Hash Database
The limited amount of possible mobile phone numbers
combined with the rapid increase in affordable storage capacity
makes it feasible to create key-value databases of phone
numbers indexed by their hashes and then to perform constant-
time lookups for each given hash value. We demonstrate
this by using a high-performance cluster to create an in-
memory database of all 118 billion possible mobile phone
numbers from § II-B (i.e., mobile phone numbers allowed
by Google’s libphonenumber and the WhatsApp registra-
tion API) paired with their SHA-1 hashes.
Benchmarks. We use one node in our cluster, consisting
of 48 Intel Skylake cores at 2.3 GHz, 630 GB of RAM,
and 1 TB of disk storage. We choose a Redis database due to