> aws cloudformation deploy --template-file stack.yml \
 --stack-name todobackend --parameter-overrides $(cat dev.cfg) \
 --capabilities CAPABILITY_NAMED_IAM
Enter MFA code for arn:aws:iam::385605022855:mfa/justin.menga:
Waiting for changeset to be created..
Waiting for stack create/update to complete
Successfully created/updated stack - todobackend
> aws cloudformation describe-stack-resource --stack-name todobackend \
    --logical-resource-id ApplicationDatabase
{
    "StackResourceDetail": {
        "StackName": "todobackend",
        "StackId": "arn:aws:cloudformation:us-east-1:385605022855:stack/todobackend/297933f0-37fe-11e8-82e0-503f23fb55fe",
        "LogicalResourceId": "ApplicationDatabase",
 "PhysicalResourceId": "ta10udhxgd7s4gf",
        "ResourceType": "AWS::RDS::DBInstance",
        "LastUpdatedTimestamp": "2018-04-04T12:12:13.265Z",
        "ResourceStatus": "CREATE_COMPLETE",
        "Metadata": "{}"
    }
}
> aws rds describe-db-instances --db-instance-identifier ta10udhxgd7s4gf
{
    "DBInstances": [
        {
            "DBInstanceIdentifier": "ta10udhxgd7s4gf",
            "DBInstanceClass": "db.t2.micro",
            "Engine": "mysql",
            "DBInstanceStatus": "available",
            "MasterUsername": "todobackend",
            "DBName": "todobackend",
            "Endpoint": {
                "Address": "ta10udhxgd7s4gf.cz8cu8hmqtu1.us-east-1.rds.amazonaws.com",
                "Port": 3306,
                "HostedZoneId": "Z2R2ITUGPM61AM"
            }
...
...
```
Updating a CloudFormation stack with RDS resources
部署将需要一些时间(通常为 15-20 分钟)才能完成，一旦部署完成，请注意，您可以使用`aws cloudformation describe-stack-resource`命令获取关于`ApplicationDatabase`资源的更多信息，包括指定 RDS 实例标识符的`PhysicalResourceId`属性。
# 配置应用负载平衡器
我们已经建立了一个 ECS 集群，并创建了一个应用数据库来存储应用数据，接下来我们需要创建前端基础架构，为从外部世界到我们的 Docker 应用的连接提供服务。
AWS 中提供此类基础架构的一种流行方法是利用弹性负载平衡服务，该服务为应用的负载平衡连接提供了许多不同的选项:
*   **经典弹性负载平衡器**:支持第 4 层(TCP)负载平衡的原 AWS 负载平衡器。通常，您应该使用较新的应用负载平衡器或网络负载平衡器，它们共同提供了经典负载平衡器的所有现有功能以及更多功能。
*   **应用负载平衡器**:一个 HTTP 感知负载平衡器，专门针对基于 web 的应用和 API。
*   **网络负载平衡器**:一种高性能的第 4 层(TCP)负载平衡服务，通常用于基于非 HTTP TCP 的应用，或者需要非常高性能的应用。
出于我们的目的，我们将利用应用负载平衡器(ALB)，这是一个现代的第 7 层负载平衡器，可以根据 HTTP 协议信息执行高级操作，例如主机头和基于路径的路由。例如，ALB 可以将对给定 HTTP 主机头的请求路由到给定的一组目标，还可以将对 some.domain/foo 路径的请求路由到一组目标，并将对 some.domain/bar 路径的请求路由到不同的一组目标。
AWS ALB 与弹性容器服务集成，支持许多关键的集成特性:
*   **滚动更新** : ECS 服务可以以滚动的方式部署，ECS 利用负载均衡器连接引流，让应用的旧版本优雅地退出服务，终止每个应用容器并用新版本替换，然后将新容器添加到负载均衡器，确保执行更新时不会造成最终用户中断或影响。
*   **动态端口映射**:此功能允许您将容器端口映射到 ECS 容器实例上的动态端口，ECS 负责确保动态端口映射在应用负载平衡器中正确注册。动态端口映射的主要好处是，它允许同一应用容器的多个实例在单个 ECS 容器实例上运行，从而在确定 ECS 集群的规模和扩展方面提供了更大的灵活性。
*   **运行状况检查** : ECS 使用应用负载平衡器运行状况检查来确定您的 Docker 应用的运行状况，自动终止并替换任何可能变得不健康且负载平衡器运行状况检查失败的容器。
# 应用负载平衡器架构
如果您熟悉较旧的经典弹性负载平衡器，您会发现，考虑到 ALBs 支持的高级第 7 层/HTTP 功能的性质，较新的应用负载平衡器的体系结构更加复杂。
下图显示了组成应用负载平衡器的各种组件:
![](img/7797ed7f-45ba-49b0-aca7-5116fd62bb32.png)
Application Load Balancer components
下面描述了上图中所示的每个组件:
*   **应用负载均衡器**:应用负载均衡器是定义负载均衡器物理特性的物理资源，例如负载均衡器应该运行的子网以及允许或拒绝进出负载均衡器的网络流量的安全组。
*   **监听器**:监听器定义终端用户和设备连接的网络端口。您可以将侦听器视为负载平衡器的前端组件，为最终将被路由到承载您的应用的目标组的传入连接提供服务。每个应用负载平衡器都可以包括多个侦听器，一个常见的例子可能是同时服务于端口`80`和端口`443`网络流量的侦听器配置。
*   **侦听器规则**:侦听器规则根据接收到的主机头和/或请求路径的值，选择性地将侦听器接收到的 HTTP 流量路由到不同的目标组。例如，如上图所示，您可以将发送到`/foo/*`请求路径的所有流量路由到一个目标组，而发送到`/bar/*`的所有流量可能会路由到另一个目标组。请注意，每个侦听器都必须定义一个默认目标组，没有路由侦听器规则的所有流量都将被路由到该目标组。
*   **目标组**:目标组定义了一个或多个传入连接应该路由到的目标。您可以将目标组视为负载平衡器的后端组件，负责负载平衡接收到的到目标组内成员的连接。将应用负载平衡器与 ECS 集成时，目标组链接到一个 ECS 服务，ECS 服务的每个实例(即容器)都被视为一个目标。
# 配置应用负载平衡器
现在您已经理解了应用负载平衡器的基本体系结构，让我们在您的云信息模板中定义各种应用负载平衡器组件，并继续将新资源部署到您的云信息栈中。
# 创建应用负载平衡器
以下示例演示如何添加名为`ApplicationLoadBalancer`的资源，顾名思义，该资源配置基础应用负载平衡器资源:
```
...
...
Resources:
 ApplicationLoadBalancer:
 Type: AWS::ElasticLoadBalancingV2::LoadBalancer
 Properties:
 Scheme: internet-facing
 Subnets: !Ref ApplicationSubnets
 SecurityGroups:
 - !Ref ApplicationLoadBalancerSecurityGroup
 LoadBalancerAttributes:
 - Key: idle_timeout.timeout_seconds
 Value : 30
 Tags:
 - Key: Name
 Value: !Sub ${AWS::StackName}-alb
  ApplicationDatabase:
    Type: AWS::RDS::DBInstance
...
...
```
Creating an Application Load Balancer
在前面的示例中，为应用负载平衡器资源配置了以下属性:
*   `Scheme`:定义负载均衡器是有公共 IP 寻址(由值`internet-facing`指定)还是只有私有 IP 寻址(由值`internal`指定)
*   `Subnets`:定义应用负载平衡器端点将部署到的子网。在前面的示例中，您引用了`ApplicationSubnets`输入参数，该参数之前用于 EC2 自动缩放组和 RDS 数据库实例资源。
*   `SecurityGroups`:指定应用于负载平衡器的安全组列表，负载平衡器限制入口和出口网络流量。您引用了一个名为`ApplicationLoadBalancerSecurityGroup`的安全组，您将很快创建它。
*   `LoadBalancerAttributes`:以键/值格式配置应用负载平衡器的各种属性。您可以在[https://docs . AWS . Amazon . com/elastic cload balancing/latest/application/application-load-balancers . html # load-balancer-attributes](https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html#load-balancer-attributes)找到支持的属性列表，在前面的示例中，您配置了一个属性，将空闲连接超时从默认值`60`秒减少到`30`秒。
CloudFormation 的一个特性是能够定义您自己的*输出*，它可以用来提供关于您的栈中的资源的信息。您可以为栈配置的一个有用的输出是应用负载平衡器端点的公共 DNS 名称的值，因为负载平衡器所服务的任何应用都将在这里发布:
```
...
...
Resources:
  ...
  ...
Outputs:
 PublicURL:
 Description: Public DNS name of Application Load Balancer
 Value: !Sub ${ApplicationLoadBalancer.DNSName}
```
Configuring a CloudFormation Output
在前面的例子中，注意`ApplicationLoadBalancer`资源输出一个名为`DNSName`的属性，该属性返回`ApplicationLoadBalancer`资源的公共域名。
# 配置应用负载平衡器安全组
在前面的示例中，您引用了一个名为`ApplicationLoadBalancerSecurityGroup`的资源，它定义了进出应用负载平衡器的入口和出口网络访问。
除了这个资源之外，您还需要以类似于前面示例的方式创建`AWS::EC2::SecurityGroupIngress`和`AWS::EC2::SecurityGroupEgress`资源，这确保应用负载平衡器可以与您的 ECS 服务应用实例通信:
```
...
...
Resources:
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets: !Ref ApplicationSubnets
      SecurityGroups:
        - !Ref ApplicationLoadBalancerSecurityGroup
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value : 30
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-alb
  ApplicationLoadBalancerSecurityGroup:
 Type: AWS::EC2::SecurityGroup
 Properties:
 GroupDescription: Application Load Balancer Security Group
 VpcId: !Ref VpcId
 SecurityGroupIngress:
 - IpProtocol: tcp
 FromPort: 80
 ToPort: 80
 CidrIp: 0.0.0.0/0
 Tags:
 - Key: Name
 Value: 
 Fn::Sub: ${AWS::StackName}-alb-sg  ApplicationLoadBalancerToApplicationIngress:
 Type: AWS::EC2::SecurityGroupIngress
 Properties:
 IpProtocol: tcp
 FromPort: 32768
 ToPort: 60999
 GroupId: !Ref ApplicationAutoscalingSecurityGroup
 SourceSecurityGroupId: !Ref ApplicationLoadBalancerSecurityGroup
 ApplicationLoadBalancerToApplicationEgress:
 Type: AWS::EC2::SecurityGroupEgress
 Properties:
 IpProtocol: tcp
 FromPort: 32768
 ToPort: 60999
 GroupId: !Ref ApplicationLoadBalancerSecurityGroup
 DestinationSecurityGroupId: !Ref ApplicationAutoscalingSecurityGroup
  ApplicationDatabase:
    Type: AWS::RDS::DBInstance
...
...
```
Configuring Application Load Balancer security group resources
在前面的例子中，首先创建`ApplicationLoadBalancerSecurityGroup`资源，允许从互联网进入端口 80。`ApplicationLoadBalancerToApplicationIngress`和`ApplicationLoadBalancerToApplicationEgress`资源将安全规则添加到`ApplicationLoadBalancerSecurityGroup`和`ApplicationAutoscalingSecurityGroup`资源中，而不创建循环依赖关系(回头参考前面的图表和相关描述)，请注意，这些规则引用了应用自动缩放组中`32768`到`60999`的短暂端口范围，因为我们将为您的 ECS 服务配置动态端口映射。
# 创建侦听器
现在，您已经建立了基本的应用负载平衡器和相关的安全组资源，您可以为应用负载平衡器配置一个侦听器。出于本书的目的，您只需要配置一个服务于 HTTP 连接的侦听器，但是在任何实际的生产用例中，您通常会配置一个具有相关证书的 HTTPS 侦听器，尤其是对于任何面向互联网的服务。
以下示例演示了如何配置单个侦听器，该侦听器支持使用端口`80` (HTTP)访问应用负载平衡器:
```
...
...
Resources:
  ApplicationLoadBalancerHttpListener:
 Type: AWS::ElasticLoadBalancingV2::Listener
 Properties: