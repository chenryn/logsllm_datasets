      *p = '\0';
      return p - result;
    }
#### TCP 初始窗口大小 ( `W`, `W1`– `W6`)
TCP.Windows
#### 响应度 ( `R`)
记录目标是否响应给定的探测。可能的值为`Y`和`N`。如果没有回复，则省略测试的其余字段。
有返回包为Y，否则为N
#### IP 不分片位 ( `DF`)
#define IP_DF 0x4000 /* don't fragment flag */
IP.Flag && IP_DF
#### 不要分段 (ICMP) ( `DFI`)
两个ICMP请求中计算 IP.Flag && IP_DF
  * 都为真则为Y
  * 一真一假则为S
  * 都为假为N
  * 否则为0
#### IP 初始生存时间 ( `T`)
IP.TTL
#### IP 初始生存时间猜测 ( TG)
根据ttl算tg
    int get_initial_ttl_guess(u8 ttl) {
      if (ttl th_flags & TH_ECE) && (tcp->th_flags & TH_CWR))
        /* echo back */
        test.setAVal("CC", "S");
      else if (tcp->th_flags & TH_ECE)
        /* support */
        test.setAVal("CC", "Y");
      else if (!(tcp->th_flags & TH_CWR))
        /* not support */
        test.setAVal("CC", "N");
      else
        test.setAVal("CC", "O");
#### TCP 杂项怪癖 ( `Q`)
一些tcp怪癖 (俺也不知道现在还有用没)
    /* TCP miscellaneous quirks test */
      p = quirks_buf;
      if (tcp->th_x2) {
        /* Reserved field of TCP is not zero */
        assert(p + 1 th_flags & TH_URG) && tcp->th_urp) {
        /* URG pointer value when urg flag not set */
        assert(p + 1 target->FPR->cp_dup(quirks_buf, p - quirks_buf));
#### TCP 序列号 ( `S`)
测试返回包中tcp.seq和发送时tcp.ack的关系
    /* Seq test values:
         Z   = zero
         A   = same as ack
         A+  = ack + 1
         O   = other
      */
      if (ntohl(tcp->th_seq) == 0)
        test.setAVal("S", "Z");
      else if (ntohl(tcp->th_seq) == tcpAck)
        test.setAVal("S", "A");
      else if (ntohl(tcp->th_seq) == tcpAck + 1)
        test.setAVal("S", "A+");
      else
        test.setAVal("S", "O");
#### TCP 确认号 ( `A`)
    /* ACK test values:
         Z   = zero
         S   = same as syn
         S+  = syn + 1
         O   = other
      */
      if (ntohl(tcp->th_ack) == 0)
        test.setAVal("A", "Z");
      else if (ntohl(tcp->th_ack) == tcpSeqBase)
        test.setAVal("A", "S");
      else if (ntohl(tcp->th_ack) == tcpSeqBase + 1)
        test.setAVal("A", "S+");
      else
        test.setAVal("A", "O");
#### TCP 标志 ( `F`)
    /* Flags. They must be in this order:
         E = ECN Echo
         U = Urgent
         A = Acknowledgement
         P = Push
         R = Reset
         S = Synchronize
         F = Final
      */
      struct {
        u8 flag;
        char c;
      } flag_defs[] = {
        { TH_ECE, 'E' },
        { TH_URG, 'U' },
        { TH_ACK, 'A' },
        { TH_PUSH, 'P' },
        { TH_RST, 'R' },
        { TH_SYN, 'S' },
        { TH_FIN, 'F' },
      };
      assert(sizeof(flag_defs) / sizeof(flag_defs[0]) th_flags & flag_defs[i].flag)
          *p++ = flag_defs[i].c;
      }
      *p = '\0';
      test.setAVal("F", hss->target->FPR->cp_dup(flags_buf, p - flags_buf));
#### TCP RST 数据校验和 ( `RD`)
    /* Rst Data CRC32 */
      length = (int) ntohs(ip->ip_len) - 4 * ip->ip_hl -4 * tcp->th_off;
      if ((tcp->th_flags & TH_RST) && length>0) {
        test.setAVal("RD", hss->target->FPR->cp_hex(nbase_crc32(((u8 *)tcp) + 4 * tcp->th_off, length)));
      } else {
        test.setAVal("RD", "0");
      }
#### IP总长( `IPL`)
ip.length
#### 未使用的端口不可达字段非零 ( `UN`)
IP字段中 ID和SEQ字段整体的 uin32位数值
#### 返回的探测 IP 总长度值 ( `RIPL`)
UDP测试中，对icmp返回包中ip结构的长度校验，返回长度的十六进制
    /* OK, lets check the returned IP length, some systems @$@ this
         up */
      if (ntohs(ip2->ip_len) == 328)
        test.setAVal("RIPL", "G");
      else
        test.setAVal("RIPL", hss->target->FPR->cp_hex(ntohs(ip2->ip_len)));
#### 返回的探针 IP ID 值 ( `RID`)
UDP测试中，对icmp返回包中ip结构的id校验
    /* Now lets see how they treated the ID we sent ... */
      if (ntohs(ip2->ip_id) == hss->upi.ipid)
        test.setAVal("RID", "G"); /* The good "expected" value */
      else
        test.setAVal("RID", hss->target->FPR->cp_hex(ntohs(ip2->ip_id)));
#### 返回的探测 IP 校验和值的完整性 ( `RIPCK`)
UDP测试中，对icmp返回包中ip完整性校验
    /* Let us see if the IP checksum we got back computes */
      /* Thanks to some machines not having struct ip member ip_sum we
         have to go with this BS */
      checksumptr = (unsigned short *)   ((char *) ip2 + 10);
      checksum = *checksumptr;
      if (checksum == 0) {
        test.setAVal("RIPCK", "Z");
      } else {
        *checksumptr = 0;
        if (in_cksum((unsigned short *)ip2, 20) == checksum) {
          test.setAVal("RIPCK", "G"); /* The "expected" good value */
        } else {
          test.setAVal("RIPCK", "I"); /* They modified it */
        }
        *checksumptr = checksum;
      }
#### 返回的探测 UDP 校验和的完整性 ( `RUCK`)
    /* UDP checksum */
      if (udp->uh_sum == hss->upi.udpck)
        test.setAVal("RUCK", "G"); /* The "expected" good value */
      else
        test.setAVal("RUCK", hss->target->FPR->cp_hex(ntohs(udp->uh_sum)));
#### 返回的 UDP 数据的完整性 ( `RUD`)
    /* Finally we ensure the data is OK */
      datastart = ((unsigned char *)udp) + 8;
      dataend = (unsigned char *)  ip + ntohs(ip->ip_len);
      while (datastart upi.patternbyte)
          break;
        datastart++;
      }
      if (datastart < dataend)
        test.setAVal("RUD", "I"); /* They modified it */
      else
        test.setAVal("RUD", "G");
#### ICMP 响应代码 ( `CD`)
    /* ICMP Code value. Test values:
       * [Value]. Both set Code to the same value [Value];
       * S. Both use the Code that the sender uses;
       * O. Other.
       */