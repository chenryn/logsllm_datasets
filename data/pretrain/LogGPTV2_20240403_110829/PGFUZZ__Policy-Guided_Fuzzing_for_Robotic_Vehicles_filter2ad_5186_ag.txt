normal operations, it is unsafe during, for instance, the ALT_HOLD
flight mode. To detect this kind of violations, PGFUZZ uses MTL
policies to capture temporal and causal relations among states of
RVs. This allows PGFUZZ to identify a larger range of bugs.
[41], as detailed in Section VII-B,
In addition, there exist approaches designed to find bugs
specifically in RVs [23], [24], [36], [40], [41]. Specifically,
RVFuzzer
fuzzes the
configuration parameters and some environment factors (e.g., wind)
to find input validation bugs. MAYDAY [40] localizes bugs in the
source code which lead to unstable attitude/crash. AR-SI [36] uses
autoregressive system identification to detect control instability
bugs. Choi et al. [24] extracts a control invariant model representing
the robotic vehicle’s dynamics and control algorithm. The model
takes the RV’s states and predicts the next states related to attitude
control (i.e., roll, pitch, and yaw angles). If a substantial state
difference is measured between an RV and the model, it assumes
that an undesired state change has occurred. These approaches
detect bugs that cause either unstable attitudes or flight path
changes. For this reason, they are unable to find other types of
bugs, outside of these two categories, such as the bug explained
in Section VII-C4. On the contrary, PGFUZZ can discover a larger
variety of bugs affecting RVs, since it can detect violations of any
property that can be expressed with an appropriate MTL formula.
Choi et al. [23] also proposed a technique to find bugs in
15
safety checks of drones. This approach mutates environment
conditions (e.g., wind and mass of physical objects) to verify
whether code snippets perform sanity checks for detecting a set
of safety-critical cases. They mainly use the model derived in
their previous work [24] as a bug oracle. In contrast, PGFUZZ
tests the whole control software by allowing users to define any
functional requirements in the form of MTL formulas. This enables
PGFUZZ to discover additional types of bugs such as the lack of
checking for safety conditions (when, for instance, a drone opens
the parachute, as explained in Section VII-C1), drone physical
crashes due to parameters’ incorrect ranges (Section VII-C2), and
incorrect altitude calculation (Section VII-C3).
Formal methods are also used to discover bugs in RVs [30],
[31]. However, their models often suffer from state explosion
problems, which limits them from porting to complex systems such
as RVs. There have also been efforts to build formal verification
to detect safety issues via machine learning techniques [2], [3].
However, they focus on malicious sensor/actuator faults and
spoofing attacks instead of RV software bugs.
IX. LIMITATIONS AND DISCUSSION
Imperfection of RV Simulators. We use Software-in-the-Loop
(SITL) as our testing environment. Imperfect simulations could
cause two issues. First, if simulators incorrectly simulate the
vehicle’s states and/or hardware, PGFUZZ will identify false-
positive policy violations. However, we confirmed that all policy
violations found by PGFUZZ could be reproduced on a real
vehicle. We used a 3DR IRIS + UAV platform equipped with
the Pixhawk 1 flight management unit board in our experiments.
Second, if the simulators do not support specific hardware
(e.g., RFD 900 radio modem [14]), PGFUZZ cannot find bugs
in those hardware modules. To address this, PGFUZZ can be
integrated into Hardware-in-the-loop (HIL) simulation [11], [55] or
Simulation-In-Hardware (SIH) [54] where firmware is run on real
flight controller hardware. Yet, the HIL and SIH require numerous
hardware devices to vet all hardware configurations.
Monitoring Real-time Properties of Temporal Logic. Since
PGFUZZ checks policies at run-time during a simulation, at time
point t, only the data traces for 1,...,t are available to check the
policies. Therefore, MTL policies with unbounded future operators
cannot be checked at run-time. Following the online monitoring
systems [16], [27], we define the policies with a subclass of MTL
that considers unbounded past and bounded future. To illustrate,
consider a policy that states the altitude of a vehicle must eventually
exceed 10 meters, defined as (cid:3)(ALT>10). This policy cannot be
checked at time t since it depends on the drone’s future states not
yet available to PGFUZZ. However, when this policy is restricted
with a bounded future such as (cid:3)[0,5](ALT>10) (the altitude must
eventually exceed 10 meters within 5 seconds), the policy can be
checked at time t+5.
Porting PGFUZZ to other RVs. Users can port PGFUZZ to
other types of RV software by following six steps. These steps are
required for policy identification, finding the maximum number
of bugs, and minimizing the fuzzing time: (1) create MTL (or LTL)
policies for the RV, (2) identify new states that are not included
in the states list defined by PGFUZZ, (3) update the synonym table
(See Figure 5), (4) map MTL formula terms to variables in the
source code (See Figure 4), (5) verify and update policy violation
predicates according to the new MTL formulas (See Figure 13),
and (6) exclude self-sabotaging inputs leading to false-positive
policy violations (See Appendix C). The porting effort depends on
how similar the two platforms are. We believe that such a workload
is not a significant burden for developers or knowledgeable users.
For example, when porting PGFUZZ from ArduPilot to PX4, the
total porting effort took 6.3 hours. This includes modifying 54 LoC
in the Pre-Processing and 94 LoC in the mutation engine to adapt
to differences in MAVLink protocol. The required time for the
manual porting effort is detailed in Appendix D.
X. CONCLUSIONS
We introduce PGFUZZ, a policy-guided fuzzing framework,
which leverages policies represented by temporal logic with
timing constraints to find bugs in robotic vehicle control software.
PGFUZZ addresses the unique challenges in fuzzing RVs by (1)
reducing the large input space through static and dynamic analysis,
and (2) mutating fuzzing inputs to minimize a distance metric that
measures “how close” the RV’s current state is to a policy violation.
We evaluated PGFUZZ on three popular flight control software
packages, ArduPilot, PX4, and Paparazzi. PGFUZZ discovered 156
previously unknown bugs, and 128 of the bugs can only be discov-
ered with PGFUZZ. We reported the bugs to the software developers
of flight control software, and they acknowledged 106 of these bugs.
Future work will expand our analysis to support more safety-critical
systems and study the safety and security requirements engineering
process to discover more complex policies.
ACKNOWLEDGMENT
This work was supported in part by ONR under Grants
N00014-20-1-2128 and N00014-17-1-2045. Any opinions,
findings, and conclusions in this paper are those of the authors and
do not necessarily reflect the views of the ONR.
REFERENCES
[1] H. Abbas, B. Hoxha, G. Fainekos, and K. Ueda, “Robustness-guided
temporal logic testing and verification for stochastic cyber-physical systems,”
in IEEE International Conference on Cyber Technology in Automation,
Control and Intelligent, 2014.
[2] A. Abbaspour, P. Aboutalebi, K. K. Yen, and A. Sargolzaei, “Neural adaptive
observer-based sensor and actuator fault detection in nonlinear systems:
Application in uav,” ISA transactions, 2017.
[3] A. Abbaspour, K. K. Yen, S. Noei, and A. Sargolzaei, “Detection of fault data
injection attack on uav using adaptive neural network,” Procedia computer
science, 2016.
[4] M. Abrams and J. Weiss, “Malicious control system cyber security attack
case study–maroochy water services, australia,” McLean, VA: The MITRE
Corporation, 2008.
“Afl,” http://lcamtuf.coredump.cx/afl, 2020.
[5]
[6] C. M. Ahmed, M. Ochoa, J. Zhou, A. P. Mathur, R. Qadeer, C. Murguia,
and J. Ruths, “Noiseprint: Attack detection using sensor and process noise
fingerprint in cyber physical systems,” in Asia Conference on Computer and
Communications Security, 2018.
“Amazon prime air,” https://tinyurl.com/hlb4e22, 2020.
[7]
[8] L. O. Andersen, “Program analysis and specialization for the c programming
language,” Ph.D. dissertation, University of Cophenhagen, 1994.
“Apm sitl,” https://tinyurl.com/yxespupu, 2020.
“Ardupilot,” https://ardupilot.org/, 2020.
“Ardupilot hardware in the loop,” https://tinyurl.com/yxemuknb, 2020.
“Ardupilot parameter list,” https://tinyurl.com/y3g6gvgx, 2020.
“Ardupilot parachute,” https://tinyurl.com/yxgf23yj, 2020.
“Ardupilot rfd900 radio modem,” https://tinyurl.com/y4rbjun6, 2020.
“Ardupilot source code,” https://github.com/ArduPilot/ardupilot, 2020.
[9]
[10]
[11]
[12]
[13]
[14]
[15]
[17]
[16] D. Basin, B. N. Bhatt, and D. Traytel, “Almost event-rate independent
monitoring of metric temporal logic,” in International Conference on Tools
and Algorithms for the Construction and Analysis of Systems, 2017.
“Boeing 737 max crash: Anti-stall system reportedly activated in ethiopian
airlines tragedy,” https://tinyurl.com/y476slxf, 2019.
J. build team, “Jsbsim,” https://github.com/JSBSim-Team/jsbsim, 2020.
[18]
[19] Z. B. Celik, P. McDaniel, and G. Tan, “Soteria: Automated IoT safety and
security analysis,” in USENIX Annual Technical Conference (USENIX ATC),
2018.
[20] P. Chen, M. Dean, D. Ojoko-Adams, H. Osman, and L. Lopez, “Systems
quality requirements engineering (square) methodology: Case study on asset
management system,” CMU Software Engineering institute, Tech. Rep., 2004.
[21] Y. Chen, C. M. Poskitt, and J. Sun, “Learning from mutants: Using code
mutation to learn and monitor invariants of a cyber-physical system,” in IEEE
Symposium on Security and Privacy (SP), 2018.
[22] Y. Chen, C. M. Poskitt, J. Sun, S. Adepu, and F. Zhang, “Learning-guided
network fuzzing for testing cyber-physical system defences,” in IEEE/ACM
International Conference on Automated Software Engineering (ASE), 2019.
[23] H. Choi, S. Kate, Y. Aafer, X. Zhang, , and D. Xu, “Cyber-physical
inconsistency vulnerability identification for safety checks in robotic vehicles,”
in ACM SIGSAC Conference on Computer and Communications Security
(CCS), 2020.
[24] H. Choi, W.-C. Lee, Y. Aafer, F. Fei, Z. Tu, X. Zhang, D. Xu, and X. Deng,
“Detecting attacks against robotic vehicles: A control invariant approach,”
in ACM SIGSAC Conference on Computer and Communications Security
(CCS), 2018.
[25] D. R. Clark, C. Meffert, I. Baggili, and F. Breitinger, “Drop (drone open
source parser) your drone: Forensic analysis of the dji phantom iii,” Digital
Investigation, vol. 22, 2017.
[26] E. M. Clarke and E. A. Emerson, “Design and synthesis of synchronization
skeletons using branching time temporal logic,” in Workshop on Logic of
Programs, 1981.
[27] A. Dokhanchi, B. Hoxha, and G. Fainekos, “On-line monitoring for temporal
logic robustness,” in International Conference on Runtime Verification, 2014.
“Exec shield,” https://tinyurl.com/y5nk9egy, 2005.
[28]
[29] G. Fainekos, B. Hoxha, and S. Sankaranarayanan, “Robustness of
specifications and its applications to falsification, parameter mining, and
runtime monitoring with s-taliro,” in International Conference on Runtime
Verification, 2019.
[30] C. Fan, B. Qi, S. Mitra, and M. Viswanathan, “Dryvr: data-driven verification
and compositional reasoning for automotive systems,” in International
Conference on Computer Aided Verification, 2017.
[31] C. Fan, B. Qi, S. Mitra, M. Viswanathan, and P. S. Duggirala, “Automatic
reachability analysis for nonlinear hybrid models with c2e2,” in International
Conference on Computer Aided Verification, 2016.
[32] B. Gati, “Open source autopilot for academic research-the paparazzi system,”
in American Control Conference, 2013.
“Gazebo,” http://gazebosim.org, 2020.
[33]
[34] A. Ginter, “The top 20 cyberattacks on industrial control systems,”
https://tinyurl.com/y3honz7s, 2020.
“Google x-wing,” https://x.company/projects/wing, 2020.
[35]
[36] Z. He, Y. Chen, E. Huang, Q. Wang, Y. Pei, and H. Yuan, “A system
identification based oracle for control-cps software fault localization,” in
IEEE/ACM International Conference on Software Engineering, 2019.
[37] K. Jansen, M. Schäfer, D. Moser, V. Lenders, C. Pöpper, and J. Schmitt,
“Crowd-gps-sec: Leveraging crowdsourcing to detect and localize gps
spoofing attacks,” in IEEE Symposium on Security and Privacy (SP), 2018.
[38] M. Jo, J. Park, Y. Baek, R. Ivanov, J. Weimer, S. H. Son, and I. Lee, “Adaptive
transient fault model for sensor attack detection,” in IEEE International
Conference on Cyber-Physical Systems, Networks, and Applications
(CPSNA), 2016.
[39] C. H. Kim, T. Kim, H. Choi, Z. Gu, B. Lee, X. Zhang, and D. Xu, “Securing
real-time microcontroller systems through customized memory view
switching.” in NDSS, 2018.
[40] T. Kim, C. H. Kim, A. Ozen, F. Fei, Z. Tu, X. Zhang, X. Deng, D. J. Tian,
and D. Xu, “From control model to program: Investigating robotic aerial
vehicle accidents with mayday,” in USENIX Security, 2020.
16
[41] T. Kim, C. H. Kim, J. Rhee, F. Fei, Z. Tu, G. Walkup, X. Zhang, X. Deng,
and D. Xu, “Rvfuzzer: finding input validation bugs in robotic vehicles
through control-guided testing,” in USENIX Security, 2019.
[42] R. Koymans, “Specifying real-time properties with metric temporal logic,”
Real-time systems, vol. 2, no. 4, 1990.
[43] Y.-M. Kwon, J. Yu, B.-M. Cho, Y. Eun, and K.-J. Park, “Empirical analysis
of mavlink protocol vulnerability for attacking unmanned aerial vehicles,”
IEEE Access, 2018.
“libfuzzer,” https://llvm.org/docs/LibFuzzer.html, 2020.
“Llvm,” https://tinyurl.com/y5hejsra, 2020.
“Log analyzer,” https://tinyurl.com/y29ncej9, 2020.
“Mavlink,” https://mavlink.io/en, 2020.
“Oss-fuzz,” https://google.github.io/oss-fuzz/, 2020.
“Paparazzi dev team nps,” https://wiki.paparazziuav.org/wiki/NPS, 2020.
[44]
[45]
[46]
[47]
[48]
[49]
[50] A. Pnueli, “The temporal logic of programs,” in Annual Symposium on
Foundations of Computer Science, 1977.
“Pprzlink,” https://github.com/paparazzi/pprzlink, 2020.
“Px4 open source drone,” https://px4.io/, 2020.
“Px4 parameter list,” https://tinyurl.com/y2tng477, 2020.
“Px4 simulation-in-hardware,” https://tinyurl.com/y5rv7cpd, 2020.
“Px4 hardware in the loop,” https://tinyurl.com/y5gfwosw, 2020.
“Pymavlink,” https://github.com/ArduPilot/pymavlink, 2020.
“Pyparsing,” https://github.com/pyparsing/pyparsing, 2020.
[51]
[52]
[53]
[54]
[55]
[56]
[57]
[58] N. M. Rodday, R. d. O. Schmidt, and A. Pras, “Exploring security
vulnerabilities of unmanned aerial vehicles,” in IEEE/IFIP Network
Operations and Management Symposium, 2016.
[59] B. K. Rosen, M. N. Wegman, and F. K. Zadeck, “Global value numbers
and redundant computations,” in ACM SIGPLAN-SIGACT symposium on
Principles of programming languages, 1988.
“Smart traffic signals,” https://tinyurl.com/yxvyntpb, 2020.
[60]
[61] Y. Son, H. Shin, D. Kim, Y. Park, J. Noh, K. Choi, J. Choi, and Y. Kim,
“Rocking drones with intentional sound noise on gyroscopic sensors,” in
USENIX Security, 2015.
[62] Y. Sui and J. Xue, “Svf: interprocedural static value-flow analysis in llvm,”
in International conference on compiler construction, 2016.
“Tesla crash,” https://tinyurl.com/y3sws2wr, 2016.
[63]
[64] H. Yang, G. Fainekos, H. Sarjoughian, and A. Shrivastava, “Dynamic
programming algorithm for computing temporal logic robustness,” Ph.D.
dissertation, Arizona State University, 2013.
[65] K. C. Zeng, S. Liu, Y. Shu, D. Wang, H. Li, Y. Dou, G. Wang, and Y. Yang,
“All your gps are belong to us: Towards stealthy manipulation of road
navigation systems,” in USENIX Security, 2018.
[66] L. Zhang, W. He, J. Martinez, N. Brackenbury, S. Lu, and B. Ur, “Autotap:
synthesizing and repairing trigger-action programs using ltl properties,” in
IEEE/ACM International Conference on Software Engineering, 2019.
A. List of Terms
APPENDIX
Table XI shows the physical states extracted from policies
presented in Table XII. We also include a list of InputP and
InputE in the list of terms.
B. Automated Predicate Generation
Users who desire to port PGFUZZ in other RV software
need to conduct six steps to find the maximum number of bugs
and minimize the fuzzing time as explained Section IX (Porting
PGFUZZ to other RVs).
To reduce users’ manual effort, we automate the fifth step
(i.e., creating code snippets to calculate propositional and global
distances). We call this step predicate generator. The predicate
generator first parses and verifies MTL formulas based on the
BNF definition in Section V-A1. We implemented the analyzer
17
Type
ID
Position
S1
S2 Attitude
S3 Operation
S4 RC inputs
S5
System
S6
Sensor
State
roll,
latitude, longitude, altitude
roll, pitch, yaw, roll speed,