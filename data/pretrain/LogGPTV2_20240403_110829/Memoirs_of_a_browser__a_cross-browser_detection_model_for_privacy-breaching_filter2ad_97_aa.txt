title:Memoirs of a browser: a cross-browser detection model for privacy-breaching
extensions
author:Cristiano Giuffrida and
Stefano Ortolani and
Bruno Crispo
Memoirs of a Browser: A Cross-browser Detection Model
for Privacy-breaching Extensions
Cristiano Giuffrida
Stefano Ortolani
Vrije Universiteit Amsterdam
De Boelelaan 1081, Amsterdam, The Netherlands
{giuﬀrida,ortolani}@cs.vu.nl
Bruno Crispo
University of Trento
Via Sommarive 15, Trento, Italy
PI:EMAIL
Abstract
Web browsers are becoming an increasingly important part
of our everyday life. Many users spend most of their time
surﬁng the web, and browser-only operating systems are
gaining growing attention. To enhance the user experience,
many new browser extensions (or add-ons) are continuously
released to the public. Unfortunately, with their constant
access to a large pool of private information, extensions
are also an increasingly important attack vector. Existing
approaches that detect privacy-breaching browser extensions
fail to provide a generic cross-browser mechanism that can
effectively keep up with the ever-growing number of browser
implementations and versions available nowadays.
In this paper, we present a novel cross-browser detec-
tion model solely based on supervised learning of browser
memory proﬁles. We show how to carefully select rele-
vant features for the model, which are derived directly from
the memory activity of the browser in response to privacy-
sensitive events. Next, we use support vector machines to
automatically detect privacy-breaching extensions that react
to these events. To verify the effectiveness of our model, we
consider its application to extensions exhibiting keylogging
behavior and discuss an end-to-end implementation of our
detection technique. Finally, we evaluate our prototype with
the 3 most popular web browsers (Firefox, Chrome, and IE)
and against real-world browser extensions. Our experiments
conﬁrm that our approach achieves good accuracy and can
seamlessly support a variety of browsers with little effort.
Categories and Subject Descriptors D.4.6 [Operating Sys-
tems]: Security and Protection—Invasive software (e.g.,
viruses, worms, Trojan horses), Information ﬂow controls
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute
to lists, requires prior speciﬁc permission and/or a fee.
ASIACCS ’12, May 2–4, 2012, Seoul, Korea.
Copyright c(cid:13) 2012 ACM 978-1-4503-1303-2/12/05. . . $10.00
Introduction
General Terms Security
Keywords Browser Security, Privacy, Memory Proﬁling,
Keylogger
1.
Web browsers are undoubtedly one of the most popular user
applications. This is even more evident in recent times, with
Google introducing a platform (Chromebook [13]) where the
browser is the only application provided to the user. With
their modular and extensible architecture, modern browsers
are also an appealing platforms for third-party software de-
velopers, who can easily publish new extensions to extend
any standard web browser functionality.
Extendability is a crucial feature that makes web browsers
a very attractive service platform. From a security perspec-
tive, however, extensions opened up new opportunities for
attacks. Most extensions do not require any special privi-
lege to be installed, despite their ability to access all the user
private data. Delegating the decision about extension’s secu-
rity to trusted parties is not a conclusive solution, given that
privacy-breaching behavior has been found even in store-
approved extensions [6]. Furthermore, extensions are be-
coming the perfect drop for trojans that deploy a malicious
extension as part of their infecting procedure [3].
Recent solutions speciﬁcally designed to detect privacy-
breaching extensions [9, 31] require signiﬁcant changes to
the browser and are typically speciﬁc to a particular browser
implementation and release. Besides requiring access to
the source-code, porting these solutions to all the major
browsers requires a signiﬁcant effort. In addition, main-
taining such infrastructures over time is likely to be ill-
affordable, given the increasing number of new browser
versions released every year, as Figure 1 demonstrates.
To deal with these challenges effectively, we advocate the
need for more general, cross-browser (i.e., version- and
implementation-independent) approaches to detect different
classes of privacy-breaching extensions.
In this paper, we present a novel cross-browser detec-
tion model for extensions that eavesdrop privacy-sensitive
events, and consider, without loss of generality, its appli-
designed to completely ignore the browser internals. To ful-
ﬁll this requirement, our model analyzes only the memory
activity of the browser to discriminate between legitimate
and privacy-breaching extension behavior. An SVM (sup-
port vector machine) classiﬁer is used to learn the proper-
ties of a number of available memory proﬁles and automati-
cally identify new privacy-breaching proﬁles obtained from
unclassiﬁed extensions. Second, we discuss a ﬁne-grained
memory proﬁling infrastructure able to faithfully monitor
the behavior of modern browsers and derive accurate mem-
ory proﬁles for our model. Our infrastructure can be en-
abled and disabled on demand, thus allowing convenient
user- or policy-initiated detection runs. Finally, we have im-
plemented our detection technique in a production-ready
solution and evaluated it with the latest versions of the 3
most popular web browsers: Firefox, Chrome, and IE (as of
September 2011 [36]). To test the effectiveness of our so-
lution, we have selected all the extensions with keylogging
behavior from a dataset of 30 malicious samples, and con-
sidered the most common legitimate extensions for all the
browsers analyzed. Our experimental analysis reported no
false negatives and a very limited number of false positives.
2. Our Approach
Browsers are becoming increasingly complicated objects
that accomplish several different tasks. Despite their imple-
mentation complexity, the basic model adopted is still fairly
simple, given their event-driven nature. Browser events are
typically triggered by user or network input. In response to
a particular event, the browser performs well-deﬁned activ-
ities that distinctly characterize its reaction. If we consider
all the possible components that deﬁne the browser behavior
(e.g., processes, libraries, functions), we expect independent
components to react very differently to the given event.
Browser extensions follow the same event-driven model
of the browser. When an extension registers an handler for
a particular event, the browser will still react to the event as
usual, but will, in addition, give control to the extension to
perform additional activities. Since the presence of the ex-
tension triggers a different end-to-end reaction to the event,
we expect new behavioral patterns to emerge in the activities
performed by all the possible components of the browser.
Our approach builds on the intuition that the differences
in the reaction to a particular event can reveal fundamen-
tal properties of the extension behavior, even with no prior
knowledge (e.g., variables used or API functions called) of
the exact operations performed in response to the event.
More importantly, if we can model the behavior of how
particular extensions react to certain events, we can then
also identify different classes of extensions automatically.
Our detection strategy leverages this idea to discriminate be-
tween legitimate and privacy-breaching extension behavior.
Similarly to prior approaches [16, 28], we artiﬁcially in-
ject bogus events into the system to trigger the reaction of the
Figure 1. Rate of stable (major and minor) releases [12, 23,
26].
cation to extensions with keylogging behavior. Extensions
in this category intercept all the user-issued keystrokes and
leak them to third parties. Keylogging extensions are partic-
ularly dangerous because they can be easily used in large-
scale attacks (i.e., they do not depend on the DOM of the
visited page), with the ability to capture all the user sensi-
tive data, including passwords and credit card numbers. For
their ease of implementation, they are generally hard to de-
tect and no countermeasure exists for all the browser imple-
mentations available. Their simplicity also makes them the
ideal privacy-breaching candidate for code injection attacks
in vulnerable legitimate extensions. Figure 2 shows how to
use a simple and compact payload to inject a full-ﬂedged
keylogger in Feed Sidebar version  Apparently Legitimate Website 
http :// www . legitimate . com 
Legitimate encoded image follows : & lt ; iframe src =& q
uot ; data : text / html ; base64 , PHNjcmlwdD5kb2N1bWVudC5hZ
GRFdmVudExpc3RlbmVyKCJrZXlwcmVzcyIsZnVuY3Rpb24oZSl7
dmFyIHg9bmV3IFhNTEh0dHBSZXF1ZXN0KCk7eC5vcGVuKCJHRVQ
iLCJodHRwOi8vbm90LmxlZ2l0aW1hdGUuY29tLz9rPSIrZS53aG
ljaCxmYWxzZSk7eC5zZW5kKG51bGwpO30sZmFsc2UpOzwvc2Nya
XB0Pg ==& quot ;& gt ;& lt ;/ iframe & gt ;
RSS item with a malicious Base64 encoded payload.
Decoded payload.
Figure 2. Deploying a keylogger via Feed Sidebar exploit.
The contributions of this paper are threefold. First, to the
best of our knowledge, we are the ﬁrst to introduce a cross-
browser detection model for privacy-breaching extensions
 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20Q4'08Q1'09Q2'09Q3'09Q4'09Q1'10Q2'10Q3'10Q4'10Q1'11Q2'11Q3'11Number of Stable Releases Google Chrome - stable channelMozilla Firefox - stable channelMicrosoft Internet Explorer 8browser to a particular event of interest. Concurrent to the in-
jection phase, the monitoring phase records all the activities
performed by the different components of the browser in re-
sponse to the events injected. The reaction of the browser is
measured in terms of the memory activities performed when
processing each individual event. Our analysis is completely
quantitative, resulting in a black-box model: we only con-
sider the memory access distribution, not the individual data
being processed in memory. The reason for using a mon-
itoring infrastructure at this level of abstraction is to ignore
browser and extension internals allowing for a cross-browser
detection strategy. At the same time, memory proﬁling al-
lows us to build a very ﬁne-grained behavioral model and
achieve better detection accuracy. Furthermore, we can turn
on the detection process only when needed, thus limiting the
performance impact to short and predictable periods of time.
To model and detect privacy-breaching behavior, our in-
jection phase simulates a number of user-generated events.
This is possible by using common automated testing frame-
works that simulate the user input. Unlike prior approaches
that artiﬁcially injected bogus events in the background [16,
28, 29], we need to simulate foreground user activity to trig-
ger the reaction of the browser. In addition, we cannot as-
sume every browser reaction correlated with the input to be
a strong indication of privacy-breaching behavior. Browsers
normally react to foreground events even if no extension is
installed. To address this challenge, our detection model is
based on supervised learning.
The idea is to allow for an initial training phase and learn
the memory behavior of the browser and of a set of repre-
sentative extensions in response to the injected events. The
training set contains both legitimate and privacy-breaching
extensions. The memory proﬁles gathered in the training
phase serve as a basis for our detection technique, which
aims to automatically identify previously unseen privacy-
breaching extensions. The next sections introduce our mem-
ory proﬁling infrastructure and our detection model, high-
lighting the role of memory proﬁles in our detection strategy.
3. Browser Memory Proﬁling
To gather memory proﬁles that describe the browser behav-
ior, we need the ability to monitor any memory activity as
we artiﬁcially inject events into the browser. Naturally, we
favor a non-intrusive monitoring infrastructure with minimal
impact on the user experience. If slowdowns may be accept-
able for a short period of time, it is undesirable to lower the
quality of the entire browsing experience. For this reason,
we advocate the need for an online solution, with no run-
time overhead during normal use and the ability to initiate
and terminate memory proﬁling on demand, without chang-
ing the browser or requiring the user to restart it.
To overcome these challenges, our solution comprises an
in-kernel driver able to proﬁle all the memory accesses by
forcefully protecting the address space of the proﬁled appli-
cation. This strategy generates memory access violations—
i.e., page faults (PFs)—for each memory operation, allowing
a custom PF handler in a kernel driver to intercept and record
the event. The driver uses shadow page tables to temporar-
ily grant access to the target memory regions and allow the
program to resume execution. When the memory operation
completes, the driver restores the protection for the target
regions to intercept subsequent accesses.
Our proﬁling strategy is explicitly tuned to address pro-
grams as sophisticated as modern browsers, which are well
known for their intense memory activity. Instead of inter-
cepting every memory access, we use write protection to
intercept and record only memory write operations, while
avoiding unnecessary PFs in the other cases. In addition, we
introduce a number of optimizations to eliminate other irrel-
evant PFs (for example on transient stack regions). Filtering
out unnecessary PFs is crucial to eliminate potential sources
of noise from our browser analysis. Note that intercepting
memory writes is sufﬁcient for our purposes, since we are
only interested in privacy-breaching extensions that actually
harvest (and potentially leak at a later time) sensitive data.
In addition, our kernel driver collects ﬁne-grained statis-
tics on each memory write performed. We record details on
the execution context (i.e., the process) that performed the
memory write, the program instruction executed, and the
memory region accessed. Rather than keeping a journal de-
tailing every single memory operation, we introduce a num-
ber of memory performance counters (MPCs from now on)
to gather global statistics suitable for our quantitative analy-
sis. Each MPC reﬂects the total number of bytes written by
a particular process’ component in a particular memory re-
gion in the monitoring window. This is intended to quantify
the intensity of the memory activity of a particular process
executing a speciﬁc code path to write data to a particular
memory region. Our driver maintains a single MPC for each
available combination of process, code region, code range,
and data region. To characterize the memory activity in a
ﬁne-grained manner and identify individual code paths more
accurately, we break down every code region into a number
of independent code ranges of predeﬁned size.
While other approaches have focused on memory proﬁl-
ing at the granularity of individual code regions [29], our ex-
periments revealed this was insufﬁcient to accurately model
the behavior of modern browsers. To achieve greater dis-
crimination power, our strategy is to identify key code paths
at the level of individual functions being executed. While it
is not possible to automatically identify functions in the gen-
eral case (symbols may not be available), we approximate
this strategy by maintaining r different code ranges for each
code region.
4. The Model
In this section, we introduce our model and discuss the de-
sign choices we made to maximize the detection accuracy.
Our analysis starts by formalizing the injection and monitor-
ing phase of our detection technique.
Deﬁnition 1. An injection vector is a vector e = [e1, . . . , en]
where each element ei represents the number of events in-
jected at the time instant ti, 1 ≤ i ≤ n, and n is the number
of time intervals considered.
The injection phase is responsible to feed the target pro-
gram with the event distribution given by the vector e for a
total of n×t seconds, t being the duration of the time interval
considered. In response to every event injected, we expect a
well-deﬁned reaction from the browser in terms of memory
activity. To quantify this reaction, the monitoring phase sam-
ples all the predeﬁned MPCs at the end of each time interval.
All the data collected is then stored in a memory snapshot for
further analysis.