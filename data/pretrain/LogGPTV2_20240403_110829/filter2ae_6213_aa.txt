# 0x01：前言
这里记录了hgame 第一周的re与 pwn 题解，希望能给大家带来帮助！
# 0x02:advance
首先将它拖入ida，  
于是 我们可以通过 ida 中的 F12 功能键 去搜索 字符串，然后通过关键字符串去定位到main函数，从而 继续后面的分析
我们搜索到以下关键字符串(红框框住部分)  
通过它们便可以定位到 main函数所在位置：  
程序流程 为：
我们输入的字符串然后经过sub_140001EB0函数处理，处理后得到的字符串再与  
“0g371wvVy9qPztz7xQ+PxNuKxQv74B/5n/zwuPfX” 做比较，相等的话就说明我们已经拿到 flag了！
我们进去 sub_140001EB0函数：
    signed __int64 __fastcall sub_140001EB0(_BYTE *a1, __int64 a2, int a3)
    {
      int v3; // er10
      __int64 v4; // rax
      __int64 v5; // rbx
      _BYTE *v6; // rdi
      _BYTE *v7; // r9
      signed __int64 v8; // r11
      unsigned __int64 v9; // rdx
      unsigned __int64 v10; // rax
      char v11; // cl
      v3 = 0;
      v4 = a3 - 2;
      v5 = a2;
      v6 = a1;
      v7 = a1;
      if ( v4 > 0 )
      {
        v8 = a2 + 1;
        v9 = ((unsigned __int64)((unsigned __int64)(v4 - 1) * (unsigned __int128)0xAAAAAAAAAAAAAAABui64 >> 64) >> 1) + 1;
        v3 = 3 * v9;
        do
        {
          v10 = *(unsigned __int8 *)(v8 - 1);
          v8 += 3i64;
          *v7 = aAbcdefghijklmn[v10 >> 2];
          v7[1] = aAbcdefghijklmn[((unsigned __int64)*(unsigned __int8 *)(v8 - 3) >> 4) | 16i64 * (*(_BYTE *)(v8 - 4) & 3)];
          v7[2] = aAbcdefghijklmn[4i64 * (*(_BYTE *)(v8 - 3) & 0xF) | ((unsigned __int64)*(unsigned __int8 *)(v8 - 2) >> 6)];
          v7[3] = aAbcdefghijklmn[*(_BYTE *)(v8 - 2) & 0x3F];
          v7 += 4;
          --v9;
        }
        while ( v9 );
      }
      if ( v3 > 2];
        if ( v3 == a3 - 1 )
        {
          v11 = 61;
          v7[1] = aAbcdefghijklmn[16 * (*(_BYTE *)(v3 + v5) & 3)];
        }
        else
        {
          v7[1] = aAbcdefghijklmn[((unsigned __int64)*(unsigned __int8 *)(v5 + v3 + 1) >> 4) | 16i64
                                                                                             * (*(_BYTE *)(v3 + v5) & 3)];
          v11 = aAbcdefghijklmn[4 * (*(_BYTE *)(v5 + v3 + 1) & 0xF)];
        }
        v7[2] = v11;
        v7[3] = 61;
        v7 += 4;
      }
      *v7 = 0;
      return v7 - v6 + 1;
    }
输 通过阅读代码很明显的 base64编码，将3个8位的字节（3 _8）转化成4个6位的字节(4_ 6),  
之后在6位的前面补两个0，形成8位一个字节的形式。 当然具体的base64编码实现可以在网上具体学习下
当然这里 并不是纯粹的base64 加密，正宗的base64 的加密table为”
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/” 这题将table给换成了
“abcdefghijklmnopqrstuvwxyz0123456789+/ABCDEFGHIJKLMNOPQRSTUVWXYZ”
所以这题的 flag 可由 对 “0g371wvVy9qPztz7xQ+PxNuKxQv74B/5n/zwuPfX” 进行 魔改后的base64
进行解密。（在网上可找个 base 64 解密代码 将其 将其table给换了，即可。  
）  
flag为：
    hgame{b45e6a_i5_50_eazy_6VVSQ}
# 0x03:maze
这题 其实是 re中经典的 迷宫类 题目，拖入ida：详细见注释中的分析
    void __fastcall __noreturn main(__int64 a1, char **a2, char **a3)
    {
      signed int v3; // eax
      __int64 v4; // [rsp+0h] [rbp-80h]
      char *v5; // [rsp+8h] [rbp-78h]
      char s[48]; // [rsp+10h] [rbp-70h]
      char v7; // [rsp+40h] [rbp-40h]
      unsigned __int64 v8; // [rsp+78h] [rbp-8h]
      v8 = __readfsqword(0x28u);
      sub_4006A6(a1, a2, a3);
      __isoc99_scanf("%40s", s);
      HIDWORD(v4) = strlen(s);
      LODWORD(v4) = 0;
      v5 = (char *)&unk_6020C4;         //这里是我们要开始走的位置   char* 类型
      while ( (signed int)v4  'd' )
        {
          if ( v3 == 's' )          
          {
            v5 += 64;       //+64   相当于   64/4=16 行  把地图看着 二维数组，即    s代表 着  下移
          }     //一般 像迷宫题，都是 正方形式 的 即  x*x 的方阵，在后面其实发现这题 仍然是。即 16*16 的方阵
          else
          {
            if ( v3 != 'w' )            //同理的话   w 代表着 上移
            {
    LABEL_12:
              puts("Illegal input!");
              exit(0);
            }
            v5 -= 64;
          }
        }
        else
        {
          if ( v3 != 'a' )                       //同理的话   a 代表着 上移
            goto LABEL_12;
          v5 -= 4;
        }
        if ( v5  (char *)&unk_60247C || *(_DWORD *)v5 & 1 )
          goto LABEL_22;     //这里我们可以确定整个地图是 以unk_602080处开始的，但我们是在unk_6020C4开始行走的
        LODWORD(v4) = v4 + 1;
      }
      if ( v5 == (char *)&unk_60243C )                   //地图结束地址
      {
        sprintf(&v7, "hgame{%s}", s, v4);
        puts("You win!");
        printf("Flag is: ");
        puts(&v7);
        exit(0);
      }
    LABEL_22:
      puts("You died");
      exit(0);
    }
即 首先我们将 地图 通过 IDC 脚本 跑出来：  
关于 idc 脚本语言可以在网上看下这篇链接
以下是跑出来的结果
    0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x0,0x1,0x1,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x0
通过可以通过 python脚本将它们 排好 16*16，
    #coding:utf8