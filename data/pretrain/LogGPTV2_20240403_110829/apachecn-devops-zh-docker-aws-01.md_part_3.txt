Ubuntu distribution for Windows
下载完成后，点击**启动**按钮，运行 Ubuntu 安装程序，将 Ubuntu 安装到 Linux 的 Windows 子系统上。系统会提示您输入用户名和密码，假设您正在使用 Ubuntu 发行版，您可以运行`lsb_release -a`命令来显示已安装的 Ubuntu 的特定版本:
![](img/5dd13091-46c1-4919-8881-e44af32e2e8b.png)
Installing the Ubuntu distribution for Windows The information that has been provided is for recent versions of Windows 10.  For older versions of Windows 10, you may need to follow the instructions at [https://docs.microsoft.com/en-us/windows/wsl/install-win10#for-anniversary-update-and-creators-update-install-using-lxrun](https://docs.microsoft.com/en-us/windows/wsl/install-win10#for-anniversary-update-and-creators-update-install-using-lxrun).
请注意，Windows 文件系统是在`/mnt/c`下安装到 Windows 的 Linux 子系统中的(其中`c`对应于 Windows C: drive)，因此，为了使用安装在 Windows 上的文本编辑器来修改您可以在 Linux 子系统中访问的文件，您可能需要将您的主目录更改为`/mnt/c/Users/`下的 Windows 主文件夹，如下所示:
```
> exec sudo usermod -d /mnt/c/Users/jmenga jmenga
[sudo] password for jmenga:
```
请注意，在输入前面的命令后，Linux 子系统将立即退出。如果你再次打开 Linux 子系统(点击**开始**按钮并输入 **Ubuntu** ，你的主目录现在应该是你的 Windows 主目录:
```
> pwd
/mnt/c/Users/jmenga
> echo $HOME
/mnt/c/Users/jmenga
```
# 在 Linux 的视窗子系统中安装 Docker
现在您已经安装了用于 Linux 的 Windows 子系统，您需要在您的发行版中安装 Docker 客户端、Docker Compose 和其他支持工具。在本节中，我将假设您使用的是 Ubuntu Xenial (16.04)发行版。
要安装 Docker，请按照 https://docs . docker . com/install/Linux/docker-ce/Ubuntu/# install-docker-ce 上的说明安装 Docker:
```
> sudo apt-get update Get:1 http://security.ubuntu.com/ubuntu xenial-security InRelease [107 kB]
Hit:2 http://archive.ubuntu.com/ubuntu xenial InRelease
Get:3 http://archive.ubuntu.com/ubuntu xenial-updates InRelease [109 kB]
...
...
> sudo apt-get install \
 apt-transport-https \
 ca-certificates \
 curl \
 software-properties-common
...
...
> curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - OK> sudo add-apt-repository \
 "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
 $(lsb_release -cs) stable" > sudo apt-get update
...
...
> sudo apt-get install docker-ce
...
...
> docker --version
Docker version 18.06.0-ce, build 0ffa825
> docker info
Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?
```
在前面的示例中，您必须按照各种说明将 Docker CE 存储库添加到 Ubuntu 中。安装完成后，必须执行`docker --version`命令检查安装的版本，然后执行`docker info`命令连接 Docker Engine。请注意，这将失败，因为 Linux 的 Windows 子系统是一个用户空间组件，不包括运行 Docker Engine 所需的必要内核组件。
The Windows subsystem for Linux is not a virtual machine technology and instead relies on kernel emulation features provided by the Windows kernel that makes the underlying Windows kernel appear like a Linux kernel.  This kernel emulation mode of operation does not support the various system calls that support containers, and hence cannot run the Docker Engine.  
要使 Linux 的 Windows 子系统能够连接到 Windows Docker 安装的 Docker 引擎，您需要将`DOCKER_HOST`环境变量设置为`localhost:2375`，这将配置 Docker 客户端连接到 TCP 端口`2375`，而不是尝试连接到默认的`/var/run/docker.sock`套接字文件:
```
> export DOCKER_HOST=localhost:2375
> docker info
Containers: 0
 Running: 0
 Paused: 0
 Stopped: 0
Images: 0
Server Version: 18.06.0-ce
Storage Driver: overlay2
 Backing Filesystem: extfs
 Supports d_type: true
 Native Overlay Diff: true
...
...
> echo "export DOCKER_HOST=localhost:2375" >> ~/.bash_profile
```
因为您在早期安装 Docker 和 Windows 时启用了【tcp://localhost:2375 上的 T2】 Expose 守护程序而没有 TLS 选项，以向 Linux 的 Windows 子系统公开本地端口，Docker 客户端现在可以与 Docker 引擎通信，该引擎运行在 Docker 为 Windows 安装的独立 Hyper-V 虚拟机中。您还可以将`export DOCKER_HOST`命令添加到用户主目录中的`.bash_profile`文件中，每次生成新 shell 时都会执行该命令。这确保了您的 Docker 客户端将始终尝试连接到正确的 Docker 引擎。
# 在 Linux 的 Windows 子系统中安装其他工具
此时，您需要在适用于 Linux 的 Windows 子系统中安装以下支持工具，我们将在本书中使用这些工具:
*   计算机编程语言
*   pip 包管理器
*   复合 Docker
*   饭桶
*   GNU 制造
*   japan quarterly 日本季刊
*   构建要素和 Python 开发库(构建示例应用的依赖项所需)
您只需要遵循正常的 Linux 发行程序来安装上述每个组件。用于 Linux 发行版的 Ubuntu 16.04 Windows 子系统已经包含 Python 3，因此您可以运行以下命令来安装 pip 包管理器，并且还可以设置您的环境来定位 Python 包，您可以使用`--user`标志将其作为用户包安装:
```
> curl -O https://bootstrap.pypa.io/get-pip.py > python3 get-pip.py --user
Collecting pip
...
...
Installing collected packages: pip, setuptools, wheel
Successfully installed pip-10.0.1 setuptools-39.2.0 wheel-0.31.1
> rm get-pip.py
> python3 -m site --user-base /mnt/c/Users/jmenga/.local > echo 'export PATH=/mnt/c/Users/jmenga/.local/bin:$PATH' >> ~/.bash_profile
> source ~/.bash_profile 
```
现在，您可以使用`pip install docker-compose --user`命令安装 Docker Compose:
```
> pip install docker-compose --user
Collecting docker-compose
...
...
Successfully installed cached-property-1.4.3 docker-3.4.1 docker-compose-1.22.0 docker-pycreds-0.3.0 dockerpty-0.4.1 docopt-0.6.2 jsonschema-2.6.0 texttable-0.9.1 websocket-client-0.48.0
> docker-compose --version
docker-compose version 1.22.0, build f46880f
```
最后，您可以使用`apt-get install`命令安装 Git、GNU Make、jq、tree、build essentials 和 Python3 开发库:
```
> sudo apt-get install git make jq tree build-essential python3-dev
Reading package lists... Done
Building dependency tree
...
...
Setting up jq (1.5+dfsg-1) ...
Setting up make (4.1-6) ...
Processing triggers for libc-bin (2.23-0ubuntu10) ...
> git --version
git version 2.7.4
> make --version
GNU Make 4.1
Built for x86_64-pc-linux-gnu
Copyright (C) 1988-2014 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later 
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
> jq --version
jq-1.5-1-a5b5cbe
```
# 设置一个 Linux 环境
Linux 上本机支持 Docker，这意味着您可以在本地操作系统中安装和运行 Docker Engine，而无需设置虚拟机。Docker 正式支持以下 Linux 发行版([https://docs.docker.com/install/](https://docs.docker.com/install/))用于安装和运行 Docker CE:
*   CentOS:参见 https://docs . docker . com/install/Linux/docker-ce/centos/
*   Debian:参见[https://docs . docker . com/install/Linux/docker-ce/debian/](https://docs.docker.com/install/linux/docker-ce/debian/)
*   Fedora:见 https://docs . docker . com/install/Linux/docker-ce/fedora/
*   Ubuntu:参见[https://docs . docker . com/install/Linux/docker-ce/Ubuntu/](https://docs.docker.com/install/linux/docker-ce/ubuntu/)
安装 Docker 后，您可以安装完成本书所需的各种工具，如下所示:
*   **Docker 作曲**:参见[https://docs.docker.com/compose/install/](https://docs.docker.com/compose/install/)的 Linux 标签。或者，当您需要 Python 安装 AWS CLI 工具时，您可以使用`pip` Python 包管理器通过运行`pip install docker-compose`来安装 Docker Compose，如前面针对 Mac 和 Windows 所演示的那样。
*   **Python** 、 **pip** 、 **Git** 、 **GNU Make、** **jq、tree、build essentials 和 Python3 开发库**:使用你的 Linux 发行版的包管理器(例如`yum`或`apt`)来安装这些工具。使用 Ubuntu Xenial 时，请参见前面的示例来演示这一点。
# 安装示例应用
现在，您已经设置了本地环境来支持 Docker 和完成本书所需的各种工具，是时候安装本课程的示例应用了。
示例应用是一个简单的 Todo 项目网络服务，名为**Todo back and**，它提供了一个 REST API，允许您创建、读取、更新和删除 Todo 项目(例如，*洗车*或*遛狗*)。这个应用是基于 Django 的 Python 应用，Django 是创建 web 应用的流行框架。你可以在[https://www.djangoproject.com/](https://www.djangoproject.com/)了解更多。如果您不熟悉 Python，请不要担心——示例应用已经为您创建了，当您通读本书时，您需要做的就是构建和测试应用，将应用打包并发布为 Docker 映像，然后使用本书中讨论的各种容器管理平台部署您的应用。
# 使用示例应用