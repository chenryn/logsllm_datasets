---
author: Fatima
category: 观点
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 2570
date: '2023-04-06 00:07:00'
editorchoice: false
excerpt: 开始一份新工作对任何人来说都让人害怕。下面是如何在你的第一份技术工作的早期阶段找到方向。
fromurl: https://opensource.com/article/23/2/your-first-tech-job
id: 15696
islctt: true
largepic: /data/attachment/album/202304/06/000732j1ipb1whhhlwgpen.jpg
permalink: /article-15696-1.html
pic: /data/attachment/album/202304/06/000732j1ipb1whhhlwgpen.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lkxed
summary: 开始一份新工作对任何人来说都让人害怕。下面是如何在你的第一份技术工作的早期阶段找到方向。
tags:
- 技术工作
thumb: false
title: 技术领域小白必不可少的工作技巧和诀窍
titlepic: true
translator: XiaotingHuang22
updated: '2023-04-06 00:07:00'
---
![](/data/attachment/album/202304/06/000732j1ipb1whhhlwgpen.jpg)
> 
> 开始一份新工作对任何人来说都让人害怕。下面是如何在你的第一份技术工作的早期阶段找到方向。
> 
> 
> 
刚刚入职那几天确实令人害怕。 我现在依然可以清晰举出很多例子，例如在第一天上班前的晚上无法入睡，因为不知道第二天将要发生什么而内心崩溃。对于大多数人来说，开始一份新工作就像踏入未知领域。即使你已是行业的资深人士，不可否认的是，你内心可能还是会对即将发生的事情感到有点害怕。
可以理解的是，刚入职的时候你的事情很多。你要认识新的人，有新的项目和技术要了解，有文档要阅读，有教程要看完，还有没完没了的人事培训和要填的文件。这可能让你感觉压力山大，再加上你还面临着相当大程度的不确定性和未知数，以上种种能引起焦虑。
促使我写这篇文章有两个原因，首先是在我还是学生的时候，大部分讨论都围绕着如何找一份技术工作，却没有人谈论接下来发生的事情。如何在新角色中脱颖而出？现在回过头来看，我想我当时认为最困难的事情是得到一份工作，之后发生什么的一切我都可以自己弄清楚。
同样的，在我开始在这个行业工作之后，我发现大部分我看到的与职业相关的内容都是讨论如何从一个高级职位升到另一个高级职位。没有人真正谈论在此中间我们要做什么。实习生和初级工程师呢？他们在早期职业生涯中如何找到方向？
在拥有了三年全职软件工程师的经验（以及之前的几次实习）之后，我将这段时间的经历进行了复盘，并整理出一份我自己在适应新技术职位时使用过的技巧和诀窍清单。我想不只局限于前面的几个月，而是优先考虑如何让这段经历帮助你实现长期的成功。
### 反思现有的流程和文档
大多数新员工一开始要么拥有一大堆文档，要么根本没有。你可以将这视为一个机会，而不是被这两种可能性中的任何一种所淹没。
从现有文档中找到缺口，并想想你可以怎样为下一位入职的工程师做出这方面的改进。这不仅能显示你工作的主动性，还表明你致力于改进团队中的现有流程。
上述两种极端情况我都遇到过。我在没有任何文档的团队中工作过，也在一些更新文档方面很勤快的团队中工作过。对于前者，你的路径非常简单直接，你可以致力于创建那些缺失的文档。对于后者，你总是可以想办法改进已有的东西。有时，过多的书面文件也会让人感到害怕，尤其是对新员工而言。有些事情可能通过其他媒介进行更好地解释，比如视频教程或截屏。
### 勤问问题
我会建议你在开始一份新工作时研究一下公司是否会为你分配搭档。这在公司中是相当普遍的做法。工作搭档的主要作用是在你入职时为你提供帮助。我发现这非常有用，因为这个人能够针对你所有的问题给出指导，你就不必为了寻找合适的人或部门而四处奔波。
虽然我鼓励提问，但在提问之前也有必要做功课，包括：
* 做好调查。这包括进行网络搜索、查看论坛和阅读现有文档。使用所有可用的工具。然而，给自己设定时间规划是很重要的。你必须平衡好尽职调查与牢记手头项目截止日期和可交付成果。
* 说出来。作为母语不是英语的人，我建议你在提问之前大声把想法说出来。根据我的经验，我经常发现自己会用一种语言（通常是我的母语）思考但不得不用另一种语言来解释，而当我在一些困难的问题中挣扎时这一现象尤为突出。有时这颇有挑战性，因为经过翻译后的想法可能没那么容易理解。
* 组织思绪。当你在为某件事而苦苦挣扎时，可能同时有很多不同的想法在你的脑海中翻来覆去。这些想法可能对你来说都挺有道理的，但对于别人来说却不一定说得通。对此，我建议你坐下来，收集你的想法，写下来，然后大声说出来。这一做法可确保当你在解释自己的思维过程时，你能按照预期进行流畅地表达出来，听众也可以紧跟你的思路。
这种方法称为橡皮鸭调试法，是开发人员在调试时的常见做法。背后的概念是，有时向第三方解释你的问题非常有助于你找到解决方案，同时也证明了你出色的沟通技巧。
尊重别人的时间。即使你在向你的搭档求助时，也要意识到他们也有自己的日常任务要完成。 我尝试过的一些事情包括：
* 写下我的问题，然后留出一些时间与我的导师交流，以便与他们交谈。
* 整理问题而不是反复寻求帮助，这样导师可以在他们有空的时候着手解决。
* 安排 15-20 分钟的快速视频聊天，特别是如果你想共享屏幕，这一方法可以很好地展示你的发现。
我认为这些方法是更好的选择，因为这么做你能得到对方全部的关注，而不是在他们忙着其他事情的时候每隔几分钟打扰他们一下。
### 深入研究你的项目
即使在拥有出色文档的团队中，开始你的技术项目也可能非常艰巨，因为一个项目涉及多个部分。不过，随着时间的推移，你将了解团队是如何做事的。但是，通过记下一张实用清单，这包括基本项目设置、测试要求、审查和部署流程、任务跟踪和文档，你将迅速搞清楚一切，节省了你的时间和潜在的麻烦。
如果你开始的项目没有文档（我就遇到过这种情况），请看看你能不能找到当前或以前的项目所有者并了解基本的项目结构，这包括设置、部署等。
* 确定你的团队在 IDE（集成开发环境）中的偏好。你可以自由使用你喜欢的 IDE，但使用和团队相同的 IDE 会比较好，尤其是在调试的时候，因为 IDE 的选择会影响调试。不同的 IDE 提供不同程度的调试支持。
* 了解如何进行调试。我的意思不仅仅是使用打印语句（不是说这种方法有什么问题）。充分利用团队的经验！
* 了解测试要求。这可能取决于项目的范围和团队的一般惯例，越早弄清楚要求，你在后期推送自己的修改请求时就会越有信心。
* 可视化部署过程。这个过程可能因团队、公司等而异。无论这个过程是非正式或正式，请确保你了解自己提交的新代码是如何被部署至新环境中、部署流水线是什么样的、如何安全地部署代码更改、在构建失败后可以怎么做，如何回滚错误的更改，以及如何在生产环境中测试你的更改。
* 了解工单流程。了解如何记录工单以及要求的详细程度。你会由此发现每个公司各不相同。有的公司希望我们每天提交工单以显示我们的进度。有的公司可能不需要如此详细。