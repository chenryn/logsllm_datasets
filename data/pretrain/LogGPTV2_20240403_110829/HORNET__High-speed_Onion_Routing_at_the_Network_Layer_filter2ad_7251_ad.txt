Output: s, R, AHDR(cid:48)
{FS(cid:107) γ (cid:107) β} ← AHDR
{s(cid:107) R(cid:107) EXP} ← FS_OPEN(SV,FS)
check γ = MAC(hMAC(s);FS(cid:107) β)
check tcurr < EXP
AHDR(cid:48) ← {β (cid:107) 0c}⊕PRG2(hPRG2(s))
2:
3:
4:
5:
6:
7: end procedure
Algorithm 4 Anonymous header construction.
1: procedure CREATE_AHDR
Input: {si}, {F Si}
Output: (FS0, γ0, β0)
2:
3:
4:
5:
6:
7:
8:
9:
(cid:111)
φ0 ← ε
for i ← 0, . . . , l− 2 do
φi+1 ← (φi (cid:107) 0c)
⊕(cid:110)PRG2(hPRG2(si))[(r−1−i)c..end]
end for
βl−1 ← RAND ((r− l)c)(cid:107) φl−1
(cid:111)
γl−1 ← MAC(hMAC(sl−1);FSl−1 (cid:107) βl−1)
for i ← (l− 2), . . . , 0 do
FSi+1 (cid:107) γi+1 (cid:107) βi+1[0..(r−2)c−1]
⊕PRG2(hPRG2(si))[0..(r−1)c−1]
βi ←(cid:110)
γi ← MAC(hMAC(si);FSi (cid:107) βi)
10:
11:
12: end procedure
end for
Functions. The life cycle of AHDRs consists of two functions:
the header construction (CREATE_AHDR) and the header process-
ing (PROC_AHDR). We begin with the description of PROC_AHDR
since it is simpler, and its helps understand the construction of
CREATE_AHDR.PROC_AHDR allows each intermediate node to ver-
ify the integrity of an incoming AHDR, and to check that the cor-
responding session has not expired. PROC_AHDR also retrieves
the key s shared with the source, as well as the routing informa-
tion R, from the FS of the node invoking the function. Finally,
PROC_AHDR also returns the processed header AHDR(cid:48), which will
be used by the next hop. The details of this function can be seen in
Algorithm 3.
Our AHDR construction resembles the Sphinx packet header
construction [22].
For each path (forward and backward),
CREATE_AHDR enables S to create an AHDR given the keys {si}
shared with each node on that path, and given the forwarding seg-
ments {F Si} of those nodes. All these keys and FSes are obtained
during the setup phase (see Section 4.3). The details are shown
in Algorithm 4. In essence, CREATE_AHDR is equivalent to a se-
ries of PROC_AHDR iterations performed in reverse. Initially, the
paddings φ are computed, each of which is the leftmost part of
an AHDR that results from the successive encryptions of the zero-
paddings added in PROC_AHDR (φ0 is the empty string since no
padding has been added yet). Once the last padding is computed
(the one for the AHDR received by the last hop, φl−1), the op-
erations in PROC_AHDR are reversed, obtaining at each step the
AHDRs as will be received by the nodes, from the last to the ﬁrst.
This also allows the computation of the per-hop MACs.
R08Shared Key16EXPForwarding Segment (FS)0FSAnonymous Header48 * rBlinded FSesOnion EncryptedMAC4832Encrypted14474.4.2 Onion Payload
HORNET data payloads are protected by onion encryption. To
send a data payload to the destination, the source adds a sequence
of encryption layers on top of the data payload, one for each node
on the forward path (including the destination). As the packet is
forwarded, each node removes one layer of encryption, until the
destination removes the last layer and obtains the original plaintext.
To send a data payload back to the source, the destination adds
only one layer of encryption with its symmetric key shared with
the source. As the packet is forwarded, each node on the backward
path re-encrypts the payload until it reaches the source. With all
the symmetric keys shared with nodes on the backward path, the
source is capable of removing all encryption layers, thus obtaining
the original data payload sent by the destination.
Functions. Processing onion payloads requires the following two
functions: ADD_LAYER and REMOVE_LAYER.
ADD_LAYER. The function’s full form is:
(cid:48)
{O
, IV
(cid:48)} = ADD_LAYER(s, IV, O)
(13)
Given a symmetric key s, an initial vector IV , and an input onion
payload O, ADD_LAYER performs two tasks. First, ADD_LAYER
encrypts O with s and IV :
(cid:48)
O
= ENC(hENC(s); IV ; O)
(14)
Then, to avoid making the IV an identiﬁer across different links,
ADD_LAYER mutates the IV for the next node:
= PRP(hPRP(s); IV )
(15)
IV
(cid:48)
REMOVE_LAYER. The function is the inverse of ADD_LAYER,
decrypting the onion payload at each step, and mutating the IV
using the inverse permutation PRP−1 keyed with hPRP(s). Its full
form is the following:
(cid:48)
{O
, IV
(cid:48)} = REMOVE_LAYER(s, IV, O)
(16)
4.4.3 Initializing Data Transmission
To start the data transmission session, S generates AHDRf and
AHDRb as follows:
AHDRf = CREATE_AHDR({sf
AHDRb = CREATE_AHDR({sb
i })
i },{FSf
i})
i},{FSb
(17)
(18)
S then sends AHDRb to D as payload of the ﬁrst data packet (which
uses AHDRf ), as speciﬁed in the following section.
4.4.4 Data Transmission Protocol Description
Source processing. With AHDRf , S can send a data payload P
with the following steps:
1. S ensures that the session is not expired by checking that the
2. S creates an initial IV . With the shared keys {sf
i }, S onion
encrypts the data payload M by setting Olf = M and IVlf =
IV and computing the following for i ← (lf − 1)..0:
{Oi, IVi} = ADD_LAYER(sD, IVi+1, Oi+1)
current time tcurr < EXP.
(19)
3. S places IV0 in the common header CHDR.
4. S sends out the resulting data packet {CHDR, AHDRf , O0}.
Processing by intermediate nodes. Each intermediate node nf
i
on the forward path processes a received data packet of the form
{CHDR, AHDRf , O} with its local secret key SV f
i as follows:
i shared with S and the routing informa-
1. nf
i retrieves the key sf
tion Rf
i from AHDRf :
{sf
i , Rf
i , AHDRf (cid:48)} = PROC_AHDR(SV f
i , AHDRf )
(20)
PROC_AHDR also veriﬁes the integrity of AHDR, and checks that
the session has not expired.
i obtains IV from CHDR and removes one layer of encryption
from the data payload:
2. nf
3. nf
4. nf
(cid:48)
, IV
{O
(cid:48)} = REMOVE_LAYER(sf
i updates the IV ﬁeld in CHDR with IV (cid:48).
i sends the resulting packet {CHDR(cid:48), AHDRf (cid:48)
node according to Rf
i .
The above procedures show that the intermediate node process-
, O(cid:48)} to the next
i , IV, O)
(21)
ing requires only symmetric-cryptography operations.
Destination processing. D processes incoming data packets as
the intermediate nodes. Removing the last encryption layer from
the onion payload D obtains the original data payload M sent by
S. Additionally, for the ﬁrst data packet D retrieves AHDRb from
the payload, and stores the {sD, Rb
0, AHDRb} locally so that D can
retrieve AHDRb when it wishes to send packets back to S.
Processing for the backward path. Sending and processing a
HORNET packet along the backward path is the same as that for the
forward path, with the exception of processing involving the data
payload. Because D does not possess the symmetric keys that each
node on the backward path shares with S, D cannot onion-encrypt
its payload. Therefore, instead of REMOVE_LAYER, D and the in-
termediate nodes use ADD_LAYER to process the data payload, and
the source node recovers the data with REMOVE_LAYER.
5. SECURITY ANALYSIS
This section describes how HORNET defends against well-
known de-anonymization attacks and meets the design goals of
Section 2.3. We also present defenses against denial of service at-
tacks. A taxonomy of attacks against low-latency anonymity sys-
tems, as well as formal proofs showing that HORNET satisﬁes the
correctness, security, and integrity properties deﬁned by Camenisch
and Lysyanskaya [17] are detailed in the full version [19].
5.1 Passive De-anonymization
Session linkage. Each session is established independently from
every other session, based on fresh, randomly generated keys. Ses-
sions are in particular not related to any long term secret or identi-
ﬁer of the host that creates them. Thus, two sessions from the same
host are unlinkable, i.e., they are cryptographically indistinguish-
able from sessions of two different hosts.
Forward/backward ﬂow correlation. The forward and backward
headers are derived from distinct cryptographic keys and therefore
cannot be linked. Only the destination is able to correlate forward
and backward trafﬁc, and could exploit this to discover the round-
trip time (RTT) between the source and itself, which is common to
all low-latency anonymity systems. Sources willing to thwart such
RTT-based attacks from malicious destinations could introduce a
response delay for additional protection.
Packet correlation. HORNET obfuscates packets at each hop.
This prevents an adversary who observes packet bit patterns at two
points on a path from linking packets between those two points.
In addition to onion encryption, we also enforce this obfuscation
1448by padding the header and the payload to a ﬁxed length, thwart-
ing packet-size-based correlation.5 While this does not prevent
the adversary from discovering that the same ﬂow is passing his
observation points using trafﬁc analysis, it makes this process non-
trivial, and allows upper-layer protocols to take additional measures
to hide trafﬁc patterns. The hop-by-hop encryption of the payload
also hides the contents of the communication in transit, protect-
ing against information leaked by upper layer protocols that can be
used to correlate packets.
Path length and node position leakage. HORNET protects against
the leakage of a path’s length and of the nodes’ positions on the
path (i.e., the relative distance, in hops, to the source and the desti-
nation). In the setup phase, this protection is guaranteed by Sphinx,
so only the common header and FS Payload are subject to leakage
(see Section 3.3 for the exact structure of the packets). It is straight-
forward to see that the common header does not contain path or
position information. The FS Payload length is padded to the max-
imum size, and remains constant at each hop (see Algorithm 1).
After adding its FS to the front of the FS Payload, each node re-
encrypts the FS payload, making it infeasible for the next nodes to
see how many FSes have previously been inserted.
During data transmission, neither the common header nor the
data payload contain information about path length or node posi-
tion, so only the AHDR (anonymous header) needs to be analyzed.
The AHDR is padded to a maximum length with random bytes, and
its length remains constant as it traverses the network (see Algo-
rithm 3). The FSes contained in the AHDR are onion encrypted, as
is the padding added at each hop. Thus, it is not possible to dis-
tinguish the initial random padding from the encrypted FSes, and
neither of these from encrypted padding added by the nodes.
Timing for position identiﬁcation. A malicious node could try
to learn its position on the path of a session by measuring timing
delays between itself and the source (or the destination) of that ses-
sion. HORNET offers two possible countermeasures. In the ﬁrst,
we assume that the malicious node wishes to measure the network
delay between itself and the source. To perform such a measure-
ment, the node must observe a packet directed to the source (i.e.,
on the backward path) and then observe a response packet from the
source (on the forward path). However, HORNET can use asym-
metric paths [31], making this attack impossible if the single node
is not on both forward and backward paths.
The second countermeasure is that, even if the node is on both
paths, it is still non-trivial to discover that a speciﬁc forward ﬂow
corresponds to a certain backward ﬂow, since the forwarding seg-
ments for the two paths are independent. To link the forward and
backward ﬂows together the node would need to rely on the trafﬁc
patterns induced by the upper-layer protocols that are running on
top of HORNET in that session.
5.2 Active De-anonymization
Session state modiﬁcation. The state of each node is included in
an encrypted FS. During the session setup, the FSes are inserted
into the FS payload, which allows the source to check the integrity
of these FSes during the setup phase. During data transmission,
FSes are integrity-protected as well through per-hop MACs com-
puted by the source. In this case, each MAC protecting an FS is
computed using a key contained in that FS. This construction is se-
cure because every FS is encrypted using a PRP keyed with a secret
value known only to the node that created the FS: if the FS is modi-
ﬁed, the authentication key that the node obtains after decryption is
5A bandwidth-optimized alternative would be to allow two or three
different payload sizes, at the cost of decreased anonymity.
a new pseudo-random key that the adversary cannot control. Thus,
the probability of the adversary being able to forge a valid MAC is
still negligible.
Path modiﬁcation. The two HORNET data structures that hold
paths (i.e., FS payloads in the setup phase and AHDRs), use chained
per-hop MACs to protect path integrity and thwart attacks like in-
serting new nodes, changing the order of nodes, or splicing two
paths. The source can check such chained per-hop MACs to de-
tect the modiﬁcations in the FS payload before using the modiﬁed
FS payload to construct AHDRs, and similarly intermediate nodes
can detect modiﬁcations to AHDRs and drop the altered packets.
These protections guarantee path information integrity as stated in
Section 2.3.
Replay attacks. Replaying packets can facilitate some types of
conﬁrmation attacks [42]. For example, an adversary can replay
packets with a pre-selected pattern and have a colluding node iden-
tify those packets downstream. HORNET offers replay protection
through session expiration; replayed packets whose sessions have
expired are immediately dropped. Replay of packets whose ses-