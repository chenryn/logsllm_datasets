the standard) and that the patched version changes it back.
What makes this even more interesting is that — as noted
above — even a Q value for which the attacker knows
the discrete log should not lead to a passive decryption
vulnerability because the output is supposed to be ﬁltered
through the ANSI X9.31 PRNG. This obviously raises
serious questions about the accuracy of Juniper’s 2013
description of their system, speciﬁcally:
1. Why does a change in Q result in a passive VPN
decryption vulnerability?
2. Why doesn’t Juniper’s use of X9.31 protect their
system against compromise of Q?
3. What is the history of the PRNG code in ScreenOS?
4. How was Juniper’s Q value generated?
5. Is the version of ScreenOS with Juniper’s authorized
Q vulnerable to attack?
We explore the answers to these questions in the fol-
lowing sections.
4 The ScreenOS Random Number Genera-
tor
In this section, we describe the results of our analysis of
the ScreenOS 6.2 PRNG cascade subroutines.6
6ScreenOS 6.3 is identical.
3
Listing 1: The core ScreenOS 6.2 PRNG subroutines.
void prng_reseed(void) {
blocks_generated_since_reseed = 0;
if (dualec_generate(prng_temporary, 32) != 32)
error_handler("FIPS ERROR: PRNG failure, unable to reseed\n", 11);
memcpy(prng_seed, prng_temporary, 8);
prng_output_index = 8;
memcpy(prng_key, &prng_temporary[prng_output_index], 24);
prng_output_index = 32;
}
void prng_generate(void) {
int time[2];
time[0] = 0;
time[1] = get_cycles();
prng_output_index = 0;
++blocks_generated_since_reseed;
if (!one_stage_rng())
prng_reseed();
for (; prng_output_index <= 0x1F; prng_output_index += 8) {
// FIPS checks removed for clarity
x9_31_generate_block(time, prng_seed, prng_key, prng_block);
// FIPS checks removed for clarity
memcpy(&prng_temporary[prng_output_index], prng_block, 8);
}
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
Listing 1 shows the decompiled source code for the
ScreenOS PRNG version 6.2.0r1. Note that identiﬁers
such function and variable names are not present in the
binary; we assigned these names based on analysis of
the apparent function of each symbol. Similarly, speciﬁc
control ﬂow constructs are not preserved by the compi-
lation/decompilation process. For instance, the for loop
on line 19 may in fact be a while loop or some other con-
struct in the actual Juniper source. Decompilation does,
however, preserve the functionality of the original code.
For clarity, we have omitted FIPS checks that ensure that
the ANSI X9.31 generator [1, Appendix A.2.4] has not
generated duplicate output.
Superﬁcially,
the ScreenOS implementation ap-
pears consistent with Juniper’s description: When
prng_generate() is called,
it ﬁrst potentially re-
seeds the X9.31 PRNG state (lines 16 − 18) via
prng_reseed(). When prng_reseed() is called, it
invokes the Dual EC DBRG to ﬁll the 32-byte buffer
prng_temporary. From this buffer, it extracts a seed
and cipher key for the ANSI X9.31 generator. Once the
X9.31 PRNG state is seeded, the implementation then gen-
erates 8 bytes of X9.31 PRNG output at a time (line 21)
into prng_temporary, looping until it has generated
32 bytes of output (lines 19–24), using the global variable
prng_seed to store the ANSI X9.31 seed state, updating
it with every invocation of prng_generate_block().
the behavior
However, upon closer
inspection,
of the generator is subtly different.
This is due
to two coupled issues: First, prng_reseed() and
prng_generate_blocks() share the static buffer
prng_temporary; secondly, when prng_reseed() is
invoked,
it ﬁlls prng_temporary (line 3) and then
sets the static variable prng_output_index to 32
(the size of the Dual EC output).7 Unfortunately,
prng_output_index is also the control variable for
the loop that
invokes the ANSI X9.31 PRNG in
prng_generate() at line 19. The consequence is that
whenever the PRNG is reseeded, prng_output_index
is 32 at the start of the loop and therefore no calls to the
ANSI X9.31 PRNG are executed. Thus, Dual EC output
is emitted directly from the prng_generate() function.
Another oddity is that in the default conﬁguration,
one_stage_rng() always returns true so X9.31 is
reseeded on every call. There is an undocumented
ScreenOS command, set key one-stage-rng, which
is described by a string in the command-parsing data-
structure as “Reduce PRNG to single stage.” Invoking
this command effectively disables reseeding until this
setting is changed.
Ironically, when combined with the cascade bug de-
scribed above, disabling reseeding introduces a different
security vulnerability: because the ﬁrst block emitted af-
7The global variable reuse was ﬁrst publicly noted by Willem
Pinckaers on Twitter https://twitter.com/_dvorak_/status/
679109591708205056, retrieved February 18, 2016.
4
ter reseed is the same as the data used for future blocks of
the ANSI X9.31 PRNG, an attacker who is lucky enough
to observe an immediate post-seed output can predict the
rest of the PRNG stream until the next reseed even without
knowing logP Q.8
Interaction with IKE
Interestingly, had prng_output_index not been used
in prng_reseed, the reuse of prng_temporary would
be safe. As described in section 8, the index variable used
in the for loop in prng_generate changed from a local
variable to the prng_output_index global variable be-
tween the ﬁnal version of ScreenOS 6.1.0 and the ﬁrst
version of 6.2.0.
5
As suggested by the exploit description, the primary con-
cern with a Dual EC implementation is that an attacker
may be able to use public information emitted by the
PRNG to extract the Dual EC internal state, and use this
to predict future secret values. Because ScreenOS is not
only a ﬁrewall but also a VPN device, the natural target
is IKE (Internet Key Exchange) [15, 20], the key estab-
lishment protocol used for IPsec [24]. Surprisingly, the
existence of a Dual EC generator does not by itself imply
that Juniper’s IKE implementation is itself exploitable,
even in conditions where the attacker knows the Dual EC
discrete log. There are a number of parameters that affect
both the feasibility and cost of such an attack.
5.1 Overview of IKE
IKE (and its successor IKEv2) is a traditional DH-based
handshake protocol in which two endpoints (dubbed the
initiator and the responder) establish a Security Associ-
ation (SA) consisting of parameters and a set of trafﬁc
keys which can be used for encrypting trafﬁc. Somewhat
unusually, IKE consists of two phases:
• Phase 1 (IKEv1)/Initial Exchange (IKEv2): Used to
establish an “IKE SA” which is tied to the endpoints
but not to any particular class of non-IKE network
trafﬁc.
• Phase 2 (IKEv1)/CREATE_CHILD_SA (IKEv2):
Used to establish SAs which protect non-IKE trafﬁc
(typically IPsec). The IKE messages for this phase
are protected with keys established in the ﬁrst phase.
This phase may be run multiple times with the same
phase 1 SA in order to establish multiple SAs (e.g.,
for different IP host/port pairs), but as a practical
8There are technical obstacles to overcome. X9.31 uses the current
time (parameter DT in the speciﬁcation; implemented as the processor
cycle counter in ScreenOS) as an input to the PRNG. As long as the time
value can be guessed (or brute forced), the X9.31 generator’s output can
be predicted. As one-stage-rng is off by default and this command
that enables is is undocumented, we did not study this vulnerability in
depth.
5
matter many VPN connections compute only one
child SA and use it for all trafﬁc.
For simplicity, we will use the IKEv1 terminology of
phase 1/phase 2 in the rest of this document.
IKE messages are composed of a series of “payloads”
such as KE (key exchange), Ni (initiator nonce), Nr (re-
sponder nonce), etc.
The ﬁrst IKE phase consists of a Difﬁe–Hellman ex-
change in which both sides exchange DH shares and a
nonce, which are combined to form the derived keys. The
endpoints may be authenticated in a variety of ways in-
cluding a signing key and a statically conﬁgured shared
secret. The second IKE phase may involve a DH exchange
but may also just consist of an exchange of nonces, in
which case the child SA keys are derived from the shared
secret established in the ﬁrst phase.
At this point, we have a conceptual overview of how
to attack IKE: Using the nonce in the ﬁrst phase, reverse
Dual EC to compute the PRNG state; predict the DH
private key and use that to compute the DH shared secret
for the IKE SA; using the keys derived from the IKE
SA, decrypt the second phase trafﬁc to recover the peer’s
nonce and public key (in the best case, the local nonce
and public key can be predicted); use those to compute
the shared secret for the second phase SA and thereby the
trafﬁc keys. Use those keys to decrypt the VPN trafﬁc.
However, while this is straightforward in principle,
there are a number of practical complexities and potential
implementation decisions which could make this attack
easier or more difﬁcult (or even impractical) as described
below.
5.2 Nonce Size
The ﬁrst question we must examine is whether the at-
tacker ever gets a complete Dual EC block. As Check-
oway et al. [7] describe in detail, it is only practical to
exploit Dual EC if provided with nearly a complete point
output. As speciﬁed, Dual EC emits only 30 bytes of
the 32-byte point, which requires the attacker to try ap-
proximately half of the remaining 216 values to ﬁnd the
state, and the work factor goes up exponentially with the
number of missing bytes, so exploitation rapidly becomes
impractical the less of the point the attacker has.
Many reasonable implementation strategies could re-
sult in an attacker obtaining only small fractions of a
point. For example, unlike TLS, IKE has a variable-length
nonce, which is required to be between 8 and 256 bytes in
length [15, Section 5]. If a nonce length below 30 bytes
were used, it could signiﬁcantly increase the amount of
work required to recover the Dual EC state
However, as of version 6.2 ScreenOS uses a 32-byte
nonce made from two successive invocations of Dual EC,
with the ﬁrst supplying 30 bytes and the second supplying
2 bytes. As described above, this is nearly ideal from the
perspective of the attacker because it can use the ﬁrst 30
bytes (the majority of the point) to determine possible
states, and then narrow the results by checking which
states produce the correct value for the remaining two
bytes. In practice, this usually results in 1 to 3 possible
states.
5.3 Nonces and DH Keys
Although the IKE messages contain both a nonce and a
DH share our analysis of Juniper’s IKE implementation
indicates that the KE payload containing the DH share is
encoded before the NONCE payload. If (as is natural),
the keys and nonces are generated in the same order as
they are encoded, then it will not be possible to use the
NONCE from one connection to attack that same con-
nection. This is because Dual EC state recovery only
allows you to predict future values, not recover past val-
ues. While not necessarily fatal to the attacker, because
nonces generated in one connection might be used to pre-
dict the DH private keys generated in some subsequent
connection; this would not be ideal from the attacker’s
perspective, especially if connection establishment is in-
frequent.
Conveniently for the attacker, however, ScreenOS also
contains a pre-generation feature that maintains a pool of
nonces and DH keys which can then be used in new IKE
connections rather than generating them in the critical
path (i.e., during the handshake). The pooling mechanism
is quite intricate and appears to be designed to ensure
that enough keys are always available while avoiding
consuming too much run time on the device.
Summarized brieﬂy, independent FIFO queues are
maintained for nonces, each ﬁnite ﬁeld DH group (MODP
768, MODP 1024, MODP 1536, and MODP 2048), and
(in version 6.3) each elliptic curve group (ECP 256 and
ECP 384). The sizes of these queues depend on the num-
ber of VPN conﬁgurations which have been enabled for
any given group. For instance, if a single conﬁguration
is enabled for a group then that group will have queue
size of 2 and disabled groups have a queue size of 0. The
size of the nonce queue is set to be twice the aggregate
size of all of the DH queues. So, for instance, if only the
MODP 1024 group is conﬁgured, then the initial queue
size will be (MODP 1024=2, nonce=4). Or, if two VPN
conﬁgurations are set to use MODP 1024 and one conﬁg-