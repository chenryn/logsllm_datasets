ilarly, within 20 consecutive data points, if all values are
‘0’s, we consider the event has ﬁnished. In practice, these
functions may sometimes take longer to ﬁnish so that two
consecutive SYN_REPORT events cannot be separated. To ad-
dress this problem, we ﬁrst estimated the average interval
between every two consecutive SYN_REPORT events between a
pair of BTN_TOUCH_DOWN and BTN_TOUCH_UP events. An aver-
age value of 11.659ms was calculated from 500 pairs of con-
secutive SYN_REPORT events. Therefore we used such a value
as the threshold in our detection: If the same SYN_REPORT
event does not ﬁnish after 11.659ms, we artiﬁcially add an-
other event at this point.
Results. We ﬁrst show that our Flush-Reload-based event
detection can be correlated with both SYN_REPORT events
and counter increments in /proc/interrupts. To do so,
we collected three sequences of events simultaneously while
touching the touchscreen: SYN_REPORT events (through the
getevent command in Android Debug Bridge), counter in-
crements of /proc/interrupts (on Samsung Galaxy S6, the
fts touch device), and our aggregated return-oriented Flush-
Reload detection (described in the above paragraph). These
values are synchronized using timestamps, and reported in
Fig. 5. It is clear the three events can be correlated with
one another (with occasional mismatches). Therefore the
Flush-Reload side channel can replace the procfs side
channels.
7
https://www.uber.com/
865report
Figure 5:
Correlations be-
tween events, from top to bot-
tom: SYN_REPORT events, Flush-
Reload, /proc/interrupts.
Unlike procfs side
channels, however, cache
side channels are sub-
ject to noise and may
have both false pos-
itives and false neg-
atives.
We manu-
ally generated 10294
SYN_REPORT events and
here
our de-
tection accuracy in Table 4.
Each column represents
the maximal allowed la-
tency:
only detection
within the allowed la-
tency (detection should happen after the SYN_REPORT event)
is counted as accurate detection. As such, a false positive
(FP) is deﬁned as an event detection reported without an
corresponding SYN_REPORT event proceeding it; and a false
negative (FN) is counted as one SYN_REPORT event that is not
detected within the allowed latency. We see from the table
when the allowed latency is small (e.g., 400µs), the accuracy
is low. This is because the interrupt dispatcher functions are
called by the driver later than the actual events. But if the
allowed latency is larger (e.g., 1 or 2ms), the FP and FN
rates are much lower. For attacks in [21], latency of 1 or
2ms can be tolerated because the maximum frequency of
touchscreen IRQs is only 135Hz, which means touch events
will be dispatched every 7ms at most; the level of inaccu-
racy (less than 10%) should still permit the unlock pattern
inference attack in [21].
Latency
(ms)
FP(%)
FN(%)
0.4
0.6
0.8
1.0
1.2 1.4 1.6 1.8 2.0
52.8 25.6
3.3
59.2 32.0 16.0 11.0 9.7
9.6
4.5
3.0
9.4
2.7
9.1
2.5
8.9
2.5
8.9
Table 4: Detection accuracy.
5.1.2 Credit Card Scanning
Some Android apps, such as Uber and PayPal, use card.io
libraries developed by PayPal8 to scan credit card informa-
tion from their apps. Although card.io is a 32-bit third-party
library, we can still perform Flush-Reload side-channel at-
tacks on gadgets collected from it. We demonstrate that a
malicious app can accurately detect when the user scans her
credit card from the Uber app using Flush-Reload chan-
nels. Such capabilities, though not dangerous by itself, may
take the places of various procfs side channels [19, 31] and
facilitate other security attacks, such as taking pictures from
the background [19] at the right moment and taking screen-
shots when sensitive information is displayed [31]. Gad-
gets were collected from setScanCardNumberResult, setDe-
tectedCardImage, and scanner_add_frame_with_expiry in
libcardioRecognizer.so. By Flush-Reload these three
gadgets together, we could reliably detect when the user
scans her credit card using the app.
5.2 Tracing Software Execution Paths
It has been shown x86 Flush-Reload attacks can be used
to trace software execution paths [53] in clouds, here we
8
https://www.card.io
demonstrate our return-oriented Flush-Reload side chan-
nels have similar power in mobile devices. Specially, we illus-
trate an interesting attack against SurfaceFlinger, dubbed
the UI tracing attacks. SurfaceFlinger is an important An-
droid component that accepts graphic buﬀers from multiple
sources, composes the buﬀers together to resolve inconsis-
tency, and then, upon receiving a vsync signal, sends the
composed graphic buﬀer to the display (by calling Surface-
Flinger::postFramebuffer()) if there is an update in the
buﬀer. We show by conducting a Flush-Reload attack on
this function, the malicious app can (1) detect when a no-
tiﬁcation appears and disappears in the status bar, and (2)
infer the number of characters that the user has typed in a
password ﬁeld.
Detecting push notiﬁcations. An Android push notiﬁ-
cation will be shown on the status bar temporarily once it
is received. Detecting the occurrence of push notiﬁcations
may reveal the user’s private action on the smartphone. By
Flush-Reloading the postFramebuffer function, one can
accurately pinpoint the time period that the notiﬁcation is
listed on the status bar. This capability is shown in Fig. 6a.
In this ﬁgure, and also the other two ﬁgures in Fig. 6, the X-
axis shows real-time Flush-Reload events (roughly 250K
points per second), and the Y-axis shows the raw values of
Reloads: values higher than 240ns are considered 240ns.
All data points are connected with lines. Therefore a verti-
cal “bar” is actually several data points connected with lines.
From the ﬁgure, we can see that the notiﬁcation showed up
at around 1s, and disappeared at 4s, which is consistent with
the ground truth.
Detecting display updates. Updates to the display can
be reﬂected by Flush-Reloading the postFramebuffer func-
tion. For instance, On a Discover banking app we down-
loaded from the Google Play Store, a password ﬁeld in the
user login activity, when focused, will show a blinking cursor
at the frequency of 500ms [1]. As seen in Fig. 6b, The blink-
ing cursor can be detected with a sequence of fast Reloads
(i.e., about 170ns) of the postFramebuffer gadget every
500ms. Moreover, whenever the user types a password, the
display needs to be updated accordingly. Fig. 6c shows ﬁve
abnormal display update activities, corresponding to the ﬁve
characters typed in the password ﬁeld. This capability can
leak inter-keystroke information that may lead to password
cracking.
6. COUNTERMEASURES
Disallow user-space cache ﬂushes. By disabling the
system interfaces to ﬂush the instruction caches, the Flush-
Reload side channels can be removed entirely from ARM-
based devices. However, because ARM does not maintain
cache coherence between data caches and instruction caches,
disallowing user-space cache ﬂushes entirely also disables
self-modifying code. That means features like just-in-time
compilation (e.g., heavily used in Dalvik VM) will not work
on Android. An alternative solution is to only disable ex-
plicit cache ﬂush system calls, e.g., clearcache, but allow
implicit cache ﬂushes after mprotect. The feasibility and
security of such a design requires further investigation.
Restrict ﬁne-grained time measurements. Removing
clock_gettime system call and other ﬁne-grained timers
from Android will mitigate all timing side channels. How-
050100Time [ms]SYN_REPORTFlush-ReloadInterrupt600650700866(a) Notiﬁcation detection.
(b) Cursor blinking.
Figure 6: UI tracing attacks.
(c) Five characters entered.
ever, doing so will make many apps that rely on accurate
time measurement unusable. Moveover, we also note re-
moving these ﬁne-grained timers alone does not guaran-
tee elimination of timing channels. It has been argued by
Wray [48] that reference clocks can be established using
other approaches, such as I/O or memory subsystems.
Prevent physical memory sharing. The return-oriented
Flush-Reload attack on ARM will be completely elimi-
nated if no memory sharing is allowed between apps. How-
ever, the expansion of the memory footprint because of this
method will stress the availability of the physical memory.
The copy-on-access mechanism proposed by Zhou et al. [55]
appears to be the only eﬀective and eﬃcient countermeasure
against Flush-Reload attacks. The method keeps a state
machine to track the sharing of each physical page between
security domains (e.g., containers). Accessing shared page
by any security domain will trigger a page copy thus pre-
venting Flush-Reload based attacks entirely. Given the
low performance overhead of the method, it is probable for
future Android OS or even mainstream Linux kernels to im-
plement such defense methods.
7. RELATED WORK
Cache side-channel attacks. Most prior studies on cache
side-channel attacks focused on caches in x86 architectures,
including data caches (and also per-core L2 uniﬁed caches) [23,
24, 35, 37, 38, 46], instruction caches [12, 13, 52], and inclusive
LLCs [16, 22, 25, 26, 28, 33, 36, 49, 50, 53]. ARM-based cache
side-channel attacks have also been studied, but most of
them were in the context of time-driven attacks [43, 45, 47]
(see Sec. 2). Access-driven cache side-channel attacks on
ARM have only been explored by two recent studies [32,44].
Particularly, the attacks presented by Spreitzer et al. [44]
required root privilege and kernel modules to facilitate the
attacks, which have been considered impractical. Most rel-
evant to our work is due to Lipp et al. [32], who explored
Evict-Reload and Prime-Probe attacks on ARM. The
major advantage of the Flush-Reload attacks presented
in our paper is that we do not require knowledge of virtual-
to-physical address translation, which is a necessity in [32].
On Android, such knowledge can only be learned by reading
/proc//pagemaps, which is considered a vulnerability
and has already been restricted from mainstream Linux ker-
nels [9] and Android OS [11]9.
Side channels on Android. Other types of side channels
have also been studied previously. These research are gener-
ally divided into two categories: procfs-based side chan-
nels [19, 21, 30, 31, 39, 51, 54] and sensor-based side chan-
nels [15,17,34]. Our Flush-Reload attacks, as a third type,
can enhance, or be enhanced by, these side-channel attacks.
For instance, Chen et al. [19] studied the use of procfs to de-
tect Android activity transition, which can facilitate our UI
tracing attacks (Sec. 5.2). Moreover, our attack can replace
many procfs-based side channels, if access to this pseudo
ﬁle system is restricted, and even achieve ﬁner-grained ob-
servation than existing techniques, for instance, via tracing
software execution paths.
8. CONCLUSION
In this paper, we successfully demonstrated the feasibility
of conducting Flush-Reload side-channel attacks on ARM
last-level caches. Our contributions are at least three-fold:
First, we showed that Flush can be implemented on ARM
by leveraging the clearcache system call that are avail-
able on all ARM-based operating systems (e.g., Android)
for maintaining coherence between the data and instruction
caches. Second, we designed a novel return-oriented Reload
mechanism so that code segments in shared libraries can be
loaded into the instruction caches in units of gadgets, rather
than functions. Third, we studied how these side channels
can be exploited on Android-based mobile devices. We took
into consideration practical issues such as CPU frequency
scaling, thread scheduling, multi-CPU architecture, power
consumption, etc., and demonstrated two categories of at-
tacks on Android: detecting hardware events and tracing
software execution paths.
Acknowledgements
We would like to thank the National Science Foundation for
supporting our research through grant 1566444.
9. REFERENCES
[1] Android source code. https://android.googlesource.
com/platform/frameworks/base/+/master/core/java/
android/widget/Editor.java. Retrieved in May 2016.
[2] ARM architecture reference manual.
http://infocenter.arm.com/. ARMv8, for ARMv8-A
architecture proﬁle, beta.
9
We noticed that [32] vaguely discussed a Flush-Reload attack ex-
ploiting an inadvertently unlocked ﬂush instruction on Galaxy S6 only
a few days before the deadline for the ﬁnal version. We weren’t able
to conﬁrm their result in our study.
012345Time (s)100120140160180200220240Flush-Reload Output (ns)012345Time (s)100120140160180200220240Flush-Reload Output (ns)012345Time (s)100120140160180200220240Flush-Reload Output (ns)867[3] ARM architecture reference manual.
http://infocenter.arm.com/. ARMv7, for ARMv7-A
architecture proﬁle.
[4] ARM CoreLink CCI-400 Cache Coherent Interconnect
Technical Reference Manual.
http://infocenter.arm.com/. Revision: r1p5.
[5] ARM Cortex-A15 MPCore Processor.
http://infocenter.arm.com/. Revision: r4p0.
[6] ARM Cortex-A57 MPCore Processor.
http://infocenter.arm.com/. Revision: r1p3.
[7] Event codes. https://www.kernel.org/doc/
Documentation/input/event-codes.txt. event codes -
The Linux Kernel Archives.
[8] GDB documentation.
http://www.gnu.org/software/gdb/documentation/.
[9] pagemap: do not leak physical addresses to
non-privileged userspace.
https://lwn.net/Articles/642074/. Retrieved in May
2016.
[10] Programmer’s Guide for ARMv8-A.
http://infocenter.arm.com/. Version 1.0.
[11] Upstream: pagemap: do not leak physical addresses to
non-privileged userspace. https:
//android-review.googlesource.com/#/c/182766/.
Retrieved in Aug. 2016.
[12] O. Acii¸cmez. Yet another microarchitectural attack:
exploiting I-Cache. In 2007 ACM workshop on
Computer security architecture, 2007.
[13] O. Acii¸cmez, B. B. Brumley, and P. Grabher. New
results on instruction cache attacks. In 12th
international conference on Cryptographic hardware
and embedded systems, 2010.
[14] V. Afonso, A. Bianchi, Y. Fratantonio, A. Doupe,
M. Polino, P. de Geus, C. Kruegel, and G. Vigna.
Going native: Using a large-scale analysis of android
apps to create a practical native-code sandboxing
policy. In 2016 ISOC Network and Distributed System
Security Symposium, 2016.
[15] A. J. Aviv, B. Sapp, M. Blaze, and J. M. Smith.
Practicality of accelerometer side channels on
smartphones. In 28th Annual Computer Security
Applications Conference, 2012.
[16] N. Benger, J. van de Pol, N. P. Smart, and Y. Yarom.
”Ooh Aah... Just a Little Bit”: A small amount of side
channel can go a long way. In 16th International
Workshop on Cryptographic Hardware and Embedded
Systems, 2014.
[17] L. Cai and H. Chen. Touchlogger: Inferring keystrokes
on touch screen from smartphone motion. In 6th
USENIX Conference on Hot Topics in Security, 2011.
[18] S. Checkoway, L. Davi, A. Dmitrienko, A.-R. Sadeghi,
H. Shacham, and M. Winandy. Return-oriented
programming without returns. In 17th ACM
Conference on Computer and Communications
Security, 2010.
[19] Q. A. Chen, Z. Qian, and Z. M. Mao. Peeking into
your app without actually seeing it: UI state inference
and novel Android attacks. In 23th USENIX Security
Symposium, 2014.