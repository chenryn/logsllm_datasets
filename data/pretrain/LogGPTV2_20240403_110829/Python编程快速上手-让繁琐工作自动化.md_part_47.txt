'country': 'United States of America',
'id': '5391959',
'name': 'San Francisco',
'population': 0},
'cnt': 3,
'cod': '200',
'list': [{'clouds': 0,
'deg': 233,
'dt': 1402344000,
'humidity': 58,
'pressure': 1012.23,
'speed': 1.96,
第14章 处理CSV文件和JSON数据 275
'temp': {'day': 302.29,
'eve': 296.46,
'max': 302.29,
'min': 289.77,
'morn': 294.59,
'night': 289.77},
'weather': [{'description': 'sky is clear',
'icon': '01d',
--snip--
可以将 weatherData 传入 pprint.pprint，查看这个数据。你可能要查找 http://
openweathermap.org/，找到关于这些字段含义的文档。例如，在线文档会告诉你，'day'
后面的302.29是白天的开尔文温度，而不是摄氏或华氏温度。
你想要的天气描述在'main'和'description'之后。为了整齐地打印出来，在
quickWeather.py中添加以下代码。
#! python3
# quickWeather.py - Prints the weather for a location from the command line.
--snip--
# Load JSON data into a Python variable.
weatherData = json.loads(response.text)
# Print weather descriptions.
 w = weatherData['list']
print('Current weather in %s:' % (location))
print(w[0]['weather'][0]['main'], '-', w[0]['weather'][0]['description'])
print()
print('Tomorrow:')
print(w[1]['weather'][0]['main'], '-', w[1]['weather'][0]['description'])
print()
print('Day after tomorrow:')
print(w[2]['weather'][0]['main'], '-', w[2]['weather'][0]['description'])
请注意，代码将weatherData['list']保存在变量w中，这将节省一些打字时间。
可以用 w[0]、w[1]和 w[2]来取得今天、明天和后天天气的字典。这些字典都有
'weather'键，其中包含一个列表值。你感兴趣的是第一个列表项（一个嵌套的字典，
包含几个键），下标是 0。这里，我们打印出保存在'main'和'description'键中的值，用连
字符隔开。
如果用命令行参数quickWeather.py San Francisco, CA运行这个程序，输出看起
来是这样的：
Current weather in San Francisco, CA:
Clear - sky is clear
Tomorrow:
Clouds - few clouds
Day after tomorrow:
Clear - sky is clear
（天气是我喜欢住在旧金山的原因之一！）
276 Python编程快速上手——让繁琐工作自动化
第4步：类似程序的想法
访问气象数据可以成为多种类型程序的基础。你可以创建类似程序，完成以下任务：
• 收集几个露营地点或远足路线的天气预报，看看哪一个天气最好。
• 如果需要将植物移到室内，安排一个程序定期检查天气并发送霜冻警报（第
15章介绍了定时调度，第16章介绍了如何发送电子邮件）。
• 从多个站点获得气象数据，同时显示，或计算并显示多个天气预报的平均值。
14.6 小结
CSV和JSON是常见的纯文本格式，用于保存数据。它们很容易被程序解析，
同时仍然让人可读，所以它们经常被用作简单的电子表格或网络应用程序的数据。
csv和json模块大大简化了读取和写入CSV和JSON文件的过程。
前面几章教你如何利用Python从各种各样的文件格式的解析信息。一个常见的
任务是接受多种格式的数据，解析它，并获得需要的特定信息。这些任务往往非常
特别，商业软件并不是最有帮助的。通过编写自己的脚本，可以让计算机处理大量
以这些格式呈现的数据。
在第 15 章，你将从数据格式中挣脱，学习如何让程序与你通信，发送电子邮
件和文本消息。
14.7 习题
1．哪些功能是Excel电子表格有，而CSV电子表格没有？
2．向csv.reader()和csv.writer()传入什么，来创建Reader和Writer对象？
3．对于Reader和Writer对象，File对象需要以什么模式打开？
4．什么方法接受一个列表参数，并将其写入CSV文件？
5．delimiter和lineterminator关键字参数有什么用？
6．什么函数接受一个JSON数据的字符串，并返回一个Python数据结构？
7．什么函数接受一个Python数据结构，并返回一个JSON数据的字符串？
14.8 实践项目
作为实践，编程完成下列任务。
Excel 到CSV 的转换程序
Excel可以将电子表格保存为CSV文件，只要点几下鼠标，但如果有几百个Excel
第14章 处理CSV文件和JSON数据 277
文件要转换为CSV，就需要点击几小时。利用第12章的openpyxl模块，编程读取当
前工作目录中的所有Excel文件，并输出为CSV文件。
一个Excel文件可能包含多个工作表，必须为每个表创建一个CSV文件。CSV
文件的文件名应该是_.csv，其中是没有扩
展名的 Excel 文件名（例如'spam_data'，而不是'spam_data.xlsx'），是
Worksheet对象的title变量中的字符串。
该程序将包含许多嵌套的for循环。该程序的框架看起来像这样：
for excelFile in os.listdir('.'):
# Skip non-xlsx files, load the workbook object.
for sheetName in wb.get_sheet_names():
# Loop through every sheet in the workbook.
sheet = wb.get_sheet_by_name(sheetName)
# Create the CSV filename from the Excel filename and sheet title.
# Create the csv.writer object for this CSV file.
# Loop through every row in the sheet.
for rowNum in range(1, sheet.get_highest_row() + 1):
rowData = [] # append each cell to this list
# Loop through each cell in the row.
for colNum in range(1, sheet.get_highest_column() + 1):
# Append each cell's data to rowData.
# Write the rowData list to the CSV file.
csvFile.close()
从http://nostarch.com/automatestuff/下载ZIP文件excelSpreadsheets.zip，将这些
电子表格解压缩到程序所在的目录中。可以使用这些文件来测试程序。
278 Python编程快速上手——让繁琐工作自动化
15
第 章
保持时间、计划任务和启动程序
坐在电脑前运行程序是不错的，但在你没有直接监督时运
行程序，也是有用的。计算机的时钟可以调度程序，在特定的
时间和日期运行，或定期运行。例如，程序可以每小时抓取一
个网站，检查变更，或在凌晨 4 点你睡觉时，执行 CPU 密集
型任务。Python的time和datetime模块提供了这些函数。
利用subprocess和threading模块，你也可以编程按时启动
其他程序。通常，编程最快的方法是利用其他人已经写好的应
用程序。
15.1 time 模块
计算机的系统时钟设置为特定的日期、时间和时区。内置的time模块让Python
程序能读取系统时钟的当前时间。在 time 模块中，time.time()和 time.sleep()函数是
最有用的模块。
15.1.1 time.time()函数
Unix 纪元是编程中经常参考的时间：1970 年 1 月 1 日 0 点，即协调世界时
（UTC）。time.time()函数返回自那一刻以来的秒数，是一个浮点值（回想一下，浮
点值只是一个带小数点的数）。这个数字称为 UNIX 纪元时间戳。例如，在交互式
环境中输入以下代码：
>>> import time
>>> time.time()
1425063955.068649
这里，我在2015年2月27日，太平洋标准时间11:05（或7:05 PM UTC），调用
time.time()。返回值是Unix纪元的那一刻与time.time()被调用的那一刻之间的秒数。
注意 交互式环境的例子得到的日期和时间，是我在2015年2月写这一章的时间。除
非你是时间旅行者，否则得到的日期和时间会不同。
纪元时间戳可以用于剖析代码，也就是测量一段代码的运行时间。如果在代码块开
始时调用 time.time()，并在结束时再次调用，就可以用第二个时间戳减去第一个，得到
这两次调用之间经过的时间。例如，打开一个新的文件编辑器窗口，然后输入以下程序：
import time
 def calcProd():
# Calculate the product of the first 100,000 numbers.
product = 1
for i in range(1, 100000):
product = product * i
return product
 startTime = time.time()
prod = calcProd()
 endTime = time.time()
 print('The result is %s digits long.' % (len(str(prod))))
 p rint('Took %s seconds to calculate.' % (endTime - startTime))
在行，我们定义了函数calcProd()，循环遍历1至99999的整数，返回它们的
乘积。在行，我们调用 time.time()，将结果保存在 startTime 中。调用 calcProd()
后，我们再次调用time.time()，将结果保存endTime中。最后我们打印calcProd()
返回的乘积的长度，以及运行calcProd()的时间。
将该程序保存为calcProd.py，并运行它。输出看起来像这样：
The result is 456569 digits long.
Took 2.844162940979004 seconds to calculate.
注意 另一种剖析代码的方法是利用 cProfile.run()函数。与简单的 time.time()技术
相比，它提供了详细的信息。cProfile.run()函数在 https://docs.python.org/3/library/
profile.html有解释。
15.1.2 time.sleep()函数
如果需要让程序暂停一下，就调用time.sleep()函数，并传入希望程序暂停的秒
Python编程快速上手——让繁琐工作自动化
数。在交互式环境中输入以下代码：
>>> import time
>>> for i in range(3):
 print('Tick')
 time.sleep(1)
 print('Tock')
 time.sleep(1)
Tick
Tock
Tick
Tock
Tick
Tock
 > >> time.sleep(5)
for循环将打印Tick，暂停一秒钟，打印Tock，暂停一秒钟，打印Tick，
暂停，如此继续，直到Tick和Tock分别被打印3次。
time.sleep()函数将阻塞（也就是说，它不会返回或让程序执行其他代码），直到
传递给time.sleep()的秒数流逝。例如，如果输入time.sleep(5) ，会在5秒后才看
到下一个提示符（>>>）。
请注意，在IDLE中按Ctrl-C不会中断time.sleep()调用。IDLE会等待到暂停结
束，再抛出KeyboardInterrupt异常。要绕过这个问题，不要用一次time.sleep(30)调
用来暂停30秒，而是使用for循环执行30次time.sleep(1)调用。
>>> for i in range(30):
time.sleep(1)
如果在这30秒内的某个时候按Ctrl-C，应该马上看到抛出KeyboardInterrupt异常。
15.2 数字四舍五入
在处理时间时，你会经常遇到小数点后有许多数字的浮点值。为了让这些值更
易于处理，可以用 Python 内置的 round()函数将它们缩短，该函数按照指定的精度
四舍五入到一个浮点数。只要传入要舍入的数字，再加上可选的第二个参数，指明
需要传入到小数点后多少位。如果省略第二个参数，round()将数字四舍五入到最接
近的整数。在交互式环境中输入以下代码：
>>> import time
>>> now = time.time()
>>> now
1425064108.017826
>>> round(now, 2)
1425064108.02
>>> round(now, 4)
1425064108.0178
>>> round(now)
1425064108
第15章 保持时间、计划任务和启动程序
导入time，将time.time()保存在now中之后，我们调用round(now, 2)，将now舍
入到小数点后两位数字，round(now, 4)舍入到小数点后四位数字，round(now)舍入到