requests. For example, during forced execution, CrawlPhish
could mutate the conﬁgurations of browser proﬁles before
the JavaScript code sends an XMLHttpRequest to check
for potential divergent responses. Hence, the corresponding
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:32:33 UTC from IEEE Xplore.  Restrictions apply. 
1121
screenshots after mutation and forced execution would be
different if cloaking techniques were dependent on AJAX, and
CrawlPhish could subsequently identify the existence of such
evasion.
X. RELATED WORK
Studies on phishing and cloaking techniques: Oest et al.
analyzed server-side cloaking techniques within a dataset of
2,313 phishing kits and proposed a taxonomy of ﬁve different
types of cloaking [44]. These authors also showed that cloak-
ing techniques, including basic JavaScript cloaking, can effec-
tively bypass detection by anti-phishing blacklists [43]. Based
on an end-to-end analysis of large-scale phishing attacks, Oest
et al. discovered that phishing websites with sophisticated
evasion techniques are prevalent in the wild but the anti-
phishing ecosystem has not effectively mitigated them [46].
In this work, we have presented the ﬁrst in-depth analysis
of client-side cloaking techniques in the context of phishing
based on a dataset of 112,005 live phishing websites.
Invernizzi et al. studied server-side web cloaking techniques
against search engines, and proposed mechanisms to identify
and bypass such cloaking [30]. CrawlPhish leverages these
methods to overcome server-side cloaking during crawling.
The authors rooted their study in black markets and built a
classiﬁer to detect cloaking techniques implemented on the
server side that returned different content to distinct browsing
clients. This work mainly focused on the mutation of browser
proﬁles to bypass server-side cloaking techniques to discover
divergent web content. The authors found that 11.7% of
search results were cloaked. The authors considered cloaking
techniques used for Search Engine Optimization (SEO), adver-
tisements, and drive-by download attacks. However, they did
not investigate client-side cloaking techniques implemented
in JavaScript (i.e., that execute in the browser). In contrast,
we discovered diverse client-side cloaking techniques and
analyzed them from the perspective of phishing attacks.
JavaScript analysis techniques: Although a number of static
analysis [18, 32, 65] and dynamic analysis [34, 36] approaches
have been proposed to analyze malicious JavaScript code,
there has been no attempt to automatically extract JavaScript
code semantics for identifying and classifying cloaking tech-
niques. Arrow and Zozzle are static analysis methods to
classify JavaScript malware based on previously discovered
malicious scripts [18, 65]. Revolver tried to detect evasive
JavaScript code through similarity checks against known mali-
cious matters [32]. Rozzle is a multi-execution virtual machine
to explore multiple execution paths in parallel for enhancing
the efﬁciency of dynamic analysis so that it can be used
in large-scale experiments [36]. J-Force enhanced dynamic
analysis methods to ﬁnd hidden malicious behaviors by force-
executing JavaScript code, regardless of the conditions, to
explore all possible execution paths in an automated way [34].
Hence, J-Force lends itself well to revealing content hidden
behind JavaScript cloaking code.
Analysis of program semantics similar to ours has been
performed within other contexts. To deal with virtualization-
based obfuscation, Coogan et al. proposed a de-obfuscation
approach that identiﬁes behaviors of malicious programs based
on the ﬂow of values to system calls [15]. BEAGLE assigns
semantics to malware by dynamically monitoring system and
API calls that malware uses to compare versions of malicious
code and quantify their differences—to observe the evolution
of a series of malware [39]. Zhang et al. introduced a semantic-
based static analysis approach to reveal malicious Android
applications’ behaviors regardless of minor implementation
differences [66]. The authors leveraged an API dependency
graph to determine the semantics of the program to classify
malware and identify malware variants.
XI. CONCLUSION
Through the ﬁrst
in-depth analysis of
the client-side
JavaScript code used by phishing websites, we have uncovered
a wide gamut of sophisticated evasion techniques used by
attackers. In addition to categorizing such evasion techniques
based on their semantics, our approach enabled us to measure
the prevalence of each technique in the wild. In doing so,
we observed that client-side evasion is becoming increasingly
common.
Client-side JavaScript enables website developers to imple-
ment complex interactions between their websites and visitors.
Thus, evasion techniques implemented in this manner pose a
particular threat to the ecosystem: websites that use them can
effectively discriminate between automated crawler visits and
potential human victims. Unfortunately, client-side evasion
techniques are difﬁcult to analyze due to the dynamic nature
of JavaScript code. CrawlPhish addresses this difﬁculty in
a scalable manner. In addition to being able to detect and
categorize client-side evasion with high accuracy, our approach
can also track the origin of different implementations.
Given the rise of sophisticated phishing websites in the
wild, we believe that automated analysis systems such as
CrawlPhish are essential to maintaining an understanding of
phishers’ evolving tactics. Methodology such as ours can be
incorporated by the ecosystem to more expeditiously and more
reliably detect sophisticated phishing, which, in turn, can help
prevent users from falling victim to these attacks through the
continuous enhancement of the appropriate mitigations.
ACKNOWLEDGMENTS
We would like to thank our shepherd, Giancarlo Pellegrino,
and the anonymous reviewers for their valuable feedback.
This material is based upon work supported partially by the
National Science Foundation (NSF) under Grant No. CNS-
1703644 and CNS-1703375, the Defense Advanced Research
Projects Agency (DARPA) under Grant No. HR001118C0060
and FA875019C0003, the Institute for Information & commu-
nications Technology Promotion (IITP) grant funded by the
Korean government (MSIT) (No. 2017-0-00168, Automatic
Deep Malware Analysis Technology for Cyber Threat Intelli-
gence), the NSF Center for Accelerated Real Time Analytics
- NCSU, and a grant from the Center for Cybersecurity and
Digital Forensics (CDF) at Arizona State University.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:32:33 UTC from IEEE Xplore.  Restrictions apply. 
1122
REFERENCES
[1] “000webhost: Free web
hosting,”
https://www.000webhost.com/
migrate?static=true.
[2] “Amazon mechanical turk,” https://www.mturk.com/.
[3] “Event
Events.
reference,”
https://developer.mozilla.org/en-US/docs/Web/
[4] “Jsinspect: Detect copy-pasted and structurally similar code,” https://
github.com/danielstjules/jsinspect.
[5] “Katalon studio,” https://www.katalon.com/katalon-studio/.
[6] “OpenPhish,” https://openphish.com.
[7] E. Alowaisheq, P. Wang, S. Alrwais, X. Liao, X. Wang, T. Alowaisheq,
X. Mi, S. Tang, and B. Liu, “Cracking the wall of conﬁnement: Under-
standing and analyzing malicious domain take-downs,” in Proceedings
of the Network and Distributed System Security Symposium (NDSS),
2019.
[8] B. Anderson, “Best automation testing tools for 2018 (top 10 reviews),”
https://medium.com/@briananderson2209/best-automation-
2017,
testing-tools-for-2018-top-10-reviews-8a4a19f664d2.
[9] APWG, “Phishing Activity Trends Report 3rd Quarter 2019,” 2019,
https://docs.apwg.org/reports/apwg trends report q3 2019.pdf.
[10] L. Bilge, E. Kirda, C. Kruegel, and M. Balduzzi, “Exposure: Finding
malicious domains using passive dns analysis.” in Ndss, 2011, pp. 1–17.
[11] S. Bin, W. Qiaoyan, and L. Xiaoying, “A dns based anti-phishing ap-
proach,” in 2010 Second International Conference on Networks Security,
Wireless Communications and Trusted Computing, vol. 2.
IEEE, 2010,
pp. 262–265.
[12] A. Blum, B. Wardman, T. Solorio, and G. Warner, “Lexical feature based
phishing url detection using online learning,” in Proceedings of the 3rd
ACM Workshop on Artiﬁcial Intelligence and Security. ACM, 2010,
pp. 54–60.
[13] D. Canali, D. Balzarotti, and A. Francillon, “The role of web hosting
providers in detecting compromised websites,” in Proceedings of the
22nd international conference on World Wide Web. ACM, 2013, pp.
177–188.
[14] T. W. Club, “Web browser automatically adds www to url,” 2016, https:
//www.thewindowsclub.com/browser-automatically-adds-www-to-url.
[15] K. Coogan, G. Lu, and S. Debray, “Deobfuscation of virtualization-
obfuscated software: a semantics-based approach,” in Proceedings of
the 18th ACM conference on Computer and communications security,
2011, pp. 275–284.
[16] M. Cova, C. Kruegel, and G. Vigna, “There is no free phish: An analysis
of ”free” and live phishing kits.” WOOT, vol. 8, pp. 1–8, 2008.
[17] ——, “Detection and analysis of drive-by-download attacks and mali-
cious javascript code,” in Proceedings of the 19th international confer-
ence on World wide web, 2010, pp. 281–290.
[18] C. Curtsinger, B. Livshits, B. G. Zorn, and C. Seifert, “Zozzle: Fast and
precise in-browser javascript malware detection.” in USENIX Security
Symposium. San Francisco, 2011, pp. 33–48.
[19] R. Dhamija, J. D. Tygar, and M. Hearst, “Why phishing works,” in
Proceedings of the SIGCHI conference on Human Factors in computing
systems. ACM, 2006, pp. 581–590.
[20] M. W. Docs, “Mozilla web apis,” https://developer.mozilla.org/en-US/
docs/Web/API.
[21] R. Fielding, J. Gettys, J. Mogul, H. Frystyk, L. Masinter, P. Leach, and
T. Berners-Lee, “Rfc2616: Hypertext transfer protocol–http/1.1,” 1999.
https://
[22] Google,
transparency
“Google
report,”
2019,
transparencyreport.google.com/safe-browsing/overview?hl=en.
[23] ——, “Manual actions
report,” 2020, https://support.google.com/
webmasters/answer/9044175?hl=en&ref topic=4596795.
[24] C. Guarnieri, “The Year of the Phish,” 2019, https://nex.sx/blog/212/15/
the-year-of-the-phish.html.
[25] Z. Guo, “World-wide cloaking phishing websites detection,” 2017.
[26] R. W. Hamming, “Error detecting and error correcting codes,” The Bell
system technical journal, vol. 29, no. 2, pp. 147–160, 1950.
[27] G. Ho, A. Cidon, L. Gavish, M. Schweighauser, V. Paxson, S. Savage,
G. M. Voelker, and D. Wagner, “Detecting and characterizing lateral
phishing at scale,” in 28th USENIX Security Symposium, 2019, pp. 1273–
1290.
[28] A. Holmes and M. Kellogg, “Automating functional tests using sele-
nium,” in AGILE 2006 (AGILE’06).
IEEE, 2006, pp. 6–pp.
[29] H. Huang, L. Qian, and Y. Wang, “A svm-based technique to detect
phishing urls,” Information Technology Journal, vol. 11, no. 7, pp. 921–
925, 2012.
[30] L. Invernizzi, K. Thomas, A. Kapravelos, O. Comanescu, J.-M. Picod,
and E. Bursztein, “Cloak of visibility: Detecting when machines browse
a different web,” in 2016 IEEE Symposium on Security and Privacy
(SP).
IEEE, 2016, pp. 743–758.
[31] T. Kachalov and zamotkin, “Javascript obfuscator,” https://github.com/
javascript-obfuscator/javascript-obfuscator.
[32] A. Kapravelos, Y. Shoshitaishvili, M. Cova, C. Kruegel, and G. Vigna,
“Revolver: An automated approach to the detection of evasive web-based
malware,” in Presented as part of the 22nd USENIX Security Symposium,
2013, pp. 637–652.
[33] M. Khonji, A. Jones, and Y. Iraqi, “A novel phishing classiﬁcation based
on url features,” in 2011 IEEE GCC conference and exhibition (GCC).
IEEE, 2011, pp. 221–224.
[34] K. Kim, I. L. Kim, C. H. Kim, Y. Kwon, Y. Zheng, X. Zhang, and
D. Xu, “J-force: Forced execution on javascript,” in Proceedings of the
26th international conference on World Wide Web.
International World
Wide Web Conferences Steering Committee, 2017, pp. 897–906.
[35] J. C. King, “Symbolic execution and program testing,” Communications
of the ACM, vol. 19, no. 7, pp. 385–394, 1976.
[36] C. Kolbitsch, B. Livshits, B. Zorn, and C. Seifert, “Rozzle: De-cloaking
internet malware,” in 2012 IEEE Symposium on Security and Privacy.
IEEE, 2012, pp. 443–457.
[37] N. Leontiadis, T. Moore, and N. Christin, “Measuring and analyzing
search-redirection attacks in the illicit online prescription drug trade.”
in USENIX Security Symposium, vol. 11, 2011.
[38] B. Liang, M. Su, W. You, W. Shi, and G. Yang, “Cracking classiﬁers
for evasion: a case study on the google’s phishing pages ﬁlter,” in
Proceedings of the 25th International Conference on World Wide Web,
2016, pp. 345–356.
[39] M. Lindorfer, A. Di Federico, F. Maggi, P. M. Comparetti, and S. Zanero,
“Lines of malicious code: insights into the malicious software industry,”
in Proceedings of
the 28th Annual Computer Security Applications
Conference, 2012, pp. 349–358.
[40] “Windows
defender
smartscreen,”
2019,
https://github.com/
MicrosoftDocs/windows-itpro-docs/blob/public/windows/security/
threat-protection/windows-defender-smartscreen/windows-defender-
smartscreen-overview.md.
[41] A. Modi, Z. Sun, A. Panwar, T. Khairnar, Z. Zhao, A. Doup´e, G.-J.
Ahn, and P. Black, “Towards automated threat intelligence fusion,” in
2016 IEEE 2nd International Conference on Collaboration and Internet
Computing (CIC).
IEEE, 2016, pp. 408–416.
[42] X.-m. Niu and Y.-h. Jiao, “An overview of perceptual hashing,” Acta
Electronica Sinica, vol. 36, no. 7, pp. 1405–1411, 2008.
[43] A. Oest, Y. Safaei, A. Doup´e, G.-J. Ahn, B. Wardman, and K. Tyers,
“Phishfarm: A scalable framework for measuring the effectiveness of
evasion techniques against browser phishing blacklists,” in Proceedings
of
the 40th IEEE Symposium on Security and Privacy (Oakland),
Oakland, CA, May 2019, pp. 764–781.
[44] A. Oest, Y. Safaei, A. Doup´e, G.-J. Ahn, B. Wardman, and G. Warner,
“Inside a phisher’s mind: Understanding the anti-phishing ecosystem
through phishing kit analysis,” in 2018 APWG Symposium on Electronic
Crime Research (eCrime).
IEEE, 2018, pp. 1–12.
[45] A. Oest, Y. Safaei, P. Zhang, B. Wardman, K. Tyers, Y. Shoshitaishvili,
A. Doup´e, and G.-J. Ahn, “PhishTime: Continuous longitudinal mea-
surement of the effectiveness of anti-phishing blacklists,” in Proceedings
of the 29th USENIX Security Symposium, 2020.
[46] A. Oest, P. Zhang, B. Wardman, E. Nunes, J. Burgis, A. Zand,
K. Thomas, A. Doup´e, and G.-J. Ahn, “Sunrise to sunset: Analyzing
the end-to-end life cycle and effectiveness of phishing attacks at scale,”
in Proceedings of the 29th USENIX Security Symposium, 2020.
[47] I. C. Paya and T. Chow, “Combining a browser cache and cookies to
improve the security of token-based authentication protocols,” Jul. 3
2007, US Patent 7,240,192.
[48] “PhishStats,” https://phishstats.info/.
[49] “PhishTank,” https://phishtank.com.
[50] T. Rotolo, “Mouse movement patterns and user frustration,” 2016,
https://www.trymyui.com/blog/2016/10/28/mouse-movement-patterns-
and-user-frustration/.
[51] F. Shiver, “Apwg and the ecrime exchange: A member network providing
collaborative threat data sharing,” 2016, https://www.ﬁrst.org/resources/
papers/valencia2017/shiver-foy slides.pdf.
[52] V. E. Solutions, “Data breach investigations report (dbir),” 2019.
[53] Z. Sun, C. E. Rubio-Medrano, Z. Zhao, T. Bao, A. Doup´e, and G.-J.
Ahn, “Understanding and predicting private interactions in underground
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:32:33 UTC from IEEE Xplore.  Restrictions apply. 
1123
forums,” in Proceedings of the Ninth ACM Conference on Data and
Application Security and Privacy (CODASPY). ACM, 2019.
[54] K. Thomas, F. Li, A. Zand, J. Barrett, J. Ranieri, L. Invernizzi,
Y. Markov, O. Comanescu, V. Eranti, A. Moscicki et al., “Data breaches,
phishing, or malware?: Understanding the risks of stolen credentials,”
in Proceedings of the 2017 ACM SIGSAC conference on computer and
communications security. ACM, 2017, pp. 1421–1434.
[55] A. Van Der Heijden and L. Allodi, “Cognitive triaging of phishing
attacks,” in 28th USENIX Security Symposium, 2019, pp. 1309–1326.
[56] L. Von Ahn, B. Maurer, C. McMillen, D. Abraham, and M. Blum, “re-
captcha: Human-based character recognition via web security measures,”
Science, vol. 321, no. 5895, pp. 1465–1468, 2008.
[57] W3C,
“Http
archive
(har)
format,”
https://w3c.github.io/web-
performance/specs/HAR/Overview.html.
[58] ——, “Web notiﬁcations,” 2015, https://www.w3.org/TR/notiﬁcations/.
[59] D. Y. Wang, S. Savage, and G. M. Voelker, “Cloak and dagger: dynamics
of web search cloaking,” in Proceedings of the 18th ACM Conference
on Computer and Communications Security (CCS). ACM, 2011, pp.
477–490.
[60] Y.-M. Wang and M. Ma, “Detecting stealth web pages that use click-
through cloaking,” in Microsoft Research Technical Report, MSR-TR,
2006.
[61] C. Whittaker, B. Ryner, and M. Nazif, “Large-scale automatic classi-
ﬁcation of phishing pages,” in Proceedings of the 28th Network and
Distributed System Security Symposium (NDSS), 2010.
[62] M. Wu, R. C. Miller, and G. Little, “Web wallet: preventing phishing
attacks by revealing user intentions,” in Proceedings of
the second
symposium on Usable privacy and security. ACM, 2006, pp. 102–
113.
[63] G. Xiang, J. Hong, C. P. Rose, and L. Cranor, “Cantina+: A feature-rich
machine learning framework for detecting phishing web sites,” ACM
Transactions on Information and System Security (TISSEC), vol. 14,
no. 2, p. 21, 2011.
[64] H. Zhang, G. Liu, T. W. Chow, and W. Liu, “Textual and visual content-
based anti-phishing: a bayesian approach,” IEEE Transactions on Neural
Networks, vol. 22, no. 10, pp. 1532–1546, 2011.
[65] J. Zhang, C. Seifert, J. W. Stokes, and W. Lee, “Arrow: Generating
signatures to detect drive-by downloads,” in Proceedings of the 20th
international conference on World wide web. ACM, 2011, pp. 187–
196.
[66] M. Zhang, Y. Duan, H. Yin, and Z. Zhao, “Semantics-aware android mal-
ware classiﬁcation using weighted contextual api dependency graphs,”
in Proceedings of the 2014 ACM SIGSAC conference on computer and
communications security, 2014, pp. 1105–1116.
[67] Y. Zhang, J. I. Hong, and L. F. Cranor, “Cantina: a content-based
approach to detecting phishing web sites,” in Proceedings of the 16th
international conference on World Wide Web. ACM, 2007, pp. 639–648.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:32:33 UTC from IEEE Xplore.  Restrictions apply. 
1124