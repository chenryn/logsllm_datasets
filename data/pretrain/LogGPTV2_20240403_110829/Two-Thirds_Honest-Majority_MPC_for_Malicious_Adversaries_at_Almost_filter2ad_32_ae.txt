1. Upon receiving the shares in [x]t and [y]t from the honest parties, the ideal
mult computes x and y, and computes the corrupted parties’
2. F add
3. Upon receiving d and {αi}i∈I from S, functionality F add
functionality F add
shares in [x]t and [y]t.
mult hands the ideal-model adversary S the corrupted parties’ shares in [x]t
and [y]t.
mult deﬁnes z = x · y + d
and generates a random (valid degree-t) sharing [z]t of z, under the constraint
that for every i ∈ I, Pi’s share in [z]t is αi.
mult hands the honest parties their shares in [z]t.
4. F add
We have the following (stated for t  2t (and so Pi is not one of the “ﬁrst” 2t parties), then it sends key ˜kj
i
to party Pj for j = 1, . . . , 2t. If 1 ≤ i ≤ 2t (and so Pi is one of the ﬁrst 2t
parties), then it sends the keys to P1, . . . , P2t+1 except for to itself.
2. Step 1 of the setup – sharing a random ui associated with unique id: Each
i , . . . , kt
party Pi chooses a random ui and computes shares of t parties using k1
i
and ˜k1
i , by applying the pseudorandom function with the appropri-
ate key to id. Then, it interpolates with point (0, ui) to obtain polynomials
deﬁning [ui]t and [ui]2t. Finally, for the degree-t sharing, it sends each of the
n− t− 1 = 2t other parties their share, and for the degree-2t sharing it com-
putes the (2t + 1)th share. If i > 2t then it sends the share to P2t+1, whereas
if 1 ≤ i ≤ 2t then it deﬁnes this as its own share. Likewise, each party with
a pseudorandom function key deﬁnes its own share via local computation.
3. Step 2 of the setup: All n parties compute [r1]t, . . . , [rn−t]t via the Vander-
monde multiplication, whereas only parties P1, . . . , P2t+1 compute [r1]2t, . . . ,
[rn−t]2t (because only they have degree-2t shares).
The rest of the protocol remains the same. As in basic DN multiplication, we
stress that the 2t + 1 parties involved in reconstruction of [x· y − r]2t is diﬀerent
for each batch of n − t shares generated. This provides load balancing of the
work. By a straightforward reduction to the pseudorandom function, we have:
Lemma 5.2. If the function used in the optimized version of Protocol 5.1 is a
pseudorandom function, then this variant of Protocol 5.1 securely computes F add
mult
in the presence of a (polynomial-time) adversary corrupting any t < n/3 parties,
with computational security.
Complexity. The setup procedure now involves each party sending only n −
t − 1 = 2t ﬁeld elements to other parties for the degree-t sharing, and either
0 or 1 ﬁeld element for the degree-2t sharing. Thus, in the setup phase the
overall communication is 2tn. Then, the cost in the multiplication phase is the
same as previously, meaning that for n − t multiplication gates the parties send
(2t + n) · (n − t) ﬁeld elements overall. The total number of elements therefore
sent in both the setup and multiplication phases is 2tn + (2t + n)· (n− t) for n− t
multiplications, yielding an average overall cost per multiplication of 2tn
n−t +2t+n.
n + 1 elements per
Averaging this over the n parties, we have a cost of
party per multiplication. Thus, when taking t = n/3 we have n − t = 2n/3, and
the average cost per multiplication per party is 1 + 2/3 + 1 = 2 2
n−t + 2t
2t
3 elements.
22
6 The Protocol
We are now ready to present the protocol for securely computing any function-
ality, via an arithmetic circuit representation of the function (over a ﬁeld that
is larger than the number of parties). The idea behind the protocol is simple:
the parties ﬁrst share their inputs, and then they compute shares of the output
by locally computing addition gates and using πmult to compute multiplication
gates. After all of this computation has concluded, the parties run the veriﬁca-
tion method of Protocol 4.2 to ensure that all multiplications are valid. Recall
that this check assumes that all shares are of degree-t. For the shares generated
on the wires coming out of multiplication gates, this is guaranteed by the degree
veriﬁcation of [r1]t, . . . , [rN ]t incorporated into πmult (this ensures that all shares
output from multiplications are also of degree-t).
PROTOCOL 6.1 (Computing Any Arithmetic Circuit)
Inputs: Each party Pj (j ∈ {1, . . . , n}) holds an input xj ∈ Fℓ.
Auxiliary Input: a description of a ﬁnite ﬁeld F and an arithmetic circuit C over
F that computes f ; let N be the overall number of gates in C.
The protocol (throughout, if any party receives ⊥ as output from a call to a
sub-functionality, then it sends ⊥ to all other parties, outputs ⊥ and halts):
1. Secret sharing the inputs:
(a) For each input vi held by Pj, party Pj runs share as the dealer with vi.
(b) The parties run Protocol 4.1 on all shares received in the previous step.
The parties proceed if and only if they output accept from the protocol.
(c) Each party Pj records its vector of shares (vj
1, . . . , vj
M ) of all inputs.
2. Circuit emulation: Let G1, ..., GN be a predetermined topological ordering of
the gates of the circuit. For k = 1, ..., N the parties work as follows:
– Gk is an addition gate: Given shares [x] and [y] on the input wires, the
parties locally compute [x + y] = [x] + [y].
– Gk is a multiplication-by-constant gate: Given share [x] on the input wire
– Gk is a multiplication gate: Given shares [x] and [y] on the input wires:
and the constant a ∈ F, the parties locally compute [a · x] = a · [x].
(a) The parties run πmult on [x] and [y] to receive the share [z] on the
output wire.
3. Multiplication veriﬁcation: The parties run Protocol 4.2 with the set of inputs
being the shares {[wℓ]t} on the input wires, and the degree-t shares {[rk]t}
generated for all multiplication gates in πmult. If a party outputs accept from
Protocol 4.2, then it proceeds to the next step. Else, it outputs ⊥ and halts.
4. Output reconstruction: For each output wire of the circuit, the parties run
(reconstruct[v]t, j), where [v]t is the sharing of the value on the output wire,
and Pj is the party who receives this output.
If a party received ⊥ as output from any call, then it sends ⊥ to the other
parties, outputs ⊥ and halts.
then it outputs
the values
it
Output:
received on its output wires.
If a party has not output ⊥,
23
For the input wires, we run an additional invocation of Protocol 4.1 to en-
sure that everything is indeed of degree-t. This enables us to use straightforward
(semi-honest secure) input-sharing and not far more expensive VSS or the like.
In practice, this veriﬁcation can be carried out in the same invocation of Proto-
col 4.1 as in πmult, and so there is no additional cost. At the end of the protocol,
if the veriﬁcation passes, then the parties open the shares on the output wires
and conclude. See Protocol 6.1 for a full description.
The intuition as to why the protocol is secure follows from the privacy of the
underlying multiplication protocol (as stated in Section 5.1) and the validity of
the veriﬁcation method (proven in Sections 4.1 and 4.2). Speciﬁcally, if all shares
on all wires are of degree-t, and all multiplications are correct, then the output is
certainly correct. In addition, the security of the secret sharing scheme and the
DN-multiplication protocol means that nothing beyond the output is revealed.
Since πmult as presented is secure under additive attacks, we prove the protocol
secure for any multiplication protocol that is secure up to additive attacks.
Theorem 6.1. Let n be the number of parties, t < n/3 be the maximum number
of corrupted parties, let f be an n-party functionality, and let πmult be a multi-
plication protocol that is secure up to additive attacks. Assume that F used in
Protocol 4.1 and 4.2 is a pseudorandom function for non-uniform distinguishers.
Then, Protocol 6.1 t-securely computes f with statistical security in the presence
of malicious adversaries. If the version of πmult of Section 5.2 is used, then Pro-
tocol 6.1 t-securely computes f with computational security in the presence of
malicious adversaries.
Proof: The intuition is provided above and so we proceed directly with the
proof. We prove the protocol secure in the F add
mult-hybrid model (recall that this
is the multiplication functionality with security up to additive attacks).
Let A be an adversary controlling the subset of parties indexed by I ⊂ [n];
we construct a simulator S as follows:
1. S invokes A on the corrupted parties’ inputs (that it has in the ideal model).
2. Simulation of secret-sharing stage: S plays the role of the honest parties in
this phase, using 0-values for all honest-party inputs. If in the veriﬁcation
step, the honest parties would abort, then S simulates the honest parties
messages in Protocol 4.1 and sends abort to the trusted party computing
the functionality (we stress that S can simulate the honest parties’ messages
since it receives all of the incorrect shares sent by the adversary). Else, it
sends the values deﬁned by the shares dealt by A for the corrupted par-
ties. It can obtain these values since it obtains all of the shares sent by the
corrupted parties. (If any of these sharings are invalid and don’t deﬁne a
single degree-t polynomial and yet the honest parties did not abort in the
simulated execution, then S outputs bad and halts.)
3. Simulation of circuit-emulation stage: S emulates the trusted party running
F add
mult in each multiplication execution. Observe that F add
mult does not provide