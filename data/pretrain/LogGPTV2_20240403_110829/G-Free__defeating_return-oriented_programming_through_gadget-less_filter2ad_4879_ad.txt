# Functions with RAP and JCP

| Number of Functions with RAP | Number of Functions with JCP |
| --- | --- |
| 6602 | 410 |
| 369 | 181 |
| 86 | 712 |
| 1342 | 2817 |
| 122 | 174 |
| 95 | 68 |
| 271 | 669 |
| 827 | 10 |
| 20 | 8 |
| 3 | 20 |
| 28 | - |

**Table 2: Statistics on Binaries Compiled with G-Free (RAP = Return Address Protection, JCP = Indirect Jump/Call Protection)**

| Program Name | Test Case | Execution Time (seconds) | Original Version | G-Free Version (Overhead) |
| --- | --- | --- | --- | --- |
| gzip | Compress a 2GB file | 68.4 (2.9%) | 82.9 (2.0%) | 82.9 (2.0%) |
| grep | Search in a 2GB file | 88.9 (2.6%) | 82.9 (0.6%) | 82.9 (0.6%) |
| dd | Create a 2GB zero-filled file | 53.6 (4.6%) | 122.0 (5.6%) | 122.0 (5.6%) |
| md5sum | Compute hash of a 2GB file | 66.5 | 81.3 | 81.3 |
| ssh-keygen | Generate 100 2048-bit RSA keys | 86.6 | 82.5 | 82.5 |
| lame | Encode a 10 min long wav file | 51.2 | 115.5 | 115.5 |

**Table 3: Performance Comparisons When the Application and All Linked Libraries Are Compiled with G-Free**

## 6.2 Performance Measurements

To effectively defend against Return-Oriented Programming (ROP), it is necessary to compile the entire application and all linked libraries using our technique. To demonstrate the applicability of our tool in this more general scenario, we included several common Linux applications in our evaluation.

### Table 2: Binary Compilation Statistics

Table 2 provides statistics on binaries compiled with G-Free. Our tool successfully removed all unintended instructions and protected the aligned ones, resulting in an average size increase of 25.9% (more than half of which was due to redundant NOP instructions). The last two columns show that most functions can be protected by our efficient return address encryption technique, while very few require the more complex indirect jump/call protection block. This is because programs rarely use `jmp*` or `call*` instructions, as observed in our experiments.

### Table 3: Performance Overheads

Table 3 shows the performance overheads measured when running different applications compiled with our prototype, including the gadget-free versions of the programs and all their linked libraries. For each application, we designed a set of program-specific test cases, summarized in Column 2 of the table. The average performance overhead was 3.1%, which is comparable to the overhead caused by well-known stack protection systems such as StackShield [35] and StackGuard [11].

Since libraries cannot be run as standalone programs, we evaluated the performance overhead of our gadget-free version of glibc using a set of well-known benchmarks. We used the Phoronix Test Suite [1], which provides one of the most comprehensive benchmark sets for the Linux platform. Table 4 lists a sample of these benchmarks, representing various application categories such as games, mathematical and physical simulations, 3D rendering, disk and file system activities, compression, and well-known server applications. The results indicate that the performance overhead of an application using our gadget-free version of glibc is, on average, 1.09%.

### Table 4: Performance Comparison of Original and G-Free glibc Using Benchmarks from the Phoronix Test Suite

| Benchmark | Orig. Libc | G-Free (Overhead) |
| --- | --- | --- |
| FS-Mark (Files/s) | 14.9 (1.3%) | 15.1 |
| IOzone-write (MB/s) | 22.6 (0.4%) | 22.8 |
| IOzone-read (MB/s) | 22.7 (1.4%) | 23.0 |
| Dbench (MB/s) | 82.0 (2.0%) | 83.7 |
| Minion (s) | 250.7 (0.2%) | 250.2 |
| Sudokut (s) | 100.4 (3.5%) | 97.1 |
| TSCP (Nodes/s) | 224385.0 (0.1%) | 224642.0 |
| GMPbench (Score) | 2954.5 (0.03%) | 2955.5 |
| BYTE (Lines/s) | 6948792.8 (4.6%) | 7288371.3 |
| PyBench (s) | 6959.0 (2.5%) | 6791.0 |
| PHP Comp (s) | 107.3 (4.3%) | 102.9 |
| 7-Zip (MIPS) | 2802 (0.7%) | 2822.0 |
| Unpack Linux Kernel (s) | 31.01 (2.3%) | 30.30 |
| LZMA (s) | 291.86 (0.01%) | 291.67 |
| BZIP2 (s) | 65.84 (0.3%) | 65.63 |
| FLAC Audio Encoding (s) | 13.09 (1.0%) | 12.96 |
| Ogg Encoding (s) | 27.20 (0.2%) | 27.14 |
| Himeno (MFLOPS) | 151.44 (0.4%) | 152 |
| dcraw (s) | 52.99 (0.6%) | 52.68 |
| Bullet Physics Engine (s) | 39.74 (0.4%) | 39.58 |
| Timed MAFFT (s) | 52.55 (0.1%) | 52.48 |
| PostgreSQL (Trans/s) | 156.66 (0.9%) | 155.24 |
| SQLite (s) | 191.78 (1.4%) | 189.09 |
| Apache (Requests/s) | 6836.24 (4.1%) | 7129.05 |
| x2642009 (Frames/s) | 13.62 (0.7%) | 13.72 |
| GtkPerf (s) | 20.49 (1.9%) | 20.89 |
| x11perf (Operations/s) | 912000 (0.0%) | 912000 |
| Urban Terror (Frames/s) | 34.05 (0.9%) | 34.20 |
| OpenArena (Frames/s) | 46.67 (0.6%) | 46.93 |
| C-Ray (s) | 554.0 (0.05%) | 553.7 |
| FFmpeg (s) | 25.02 (0.4%) | 24.93 |
| GraphicsMagick (Iter/min) | 44 (2.2%) | 45 |
| OpenSSL (Signs/s) | 25.28 (0.0%) | 25.28 |
| Gcrypt Library (micros) | 6983 (0.3%) | 6963 |
| John The Ripper (Real C/S) | 1857333 (0.1%) | 1854667 |
| GnuPG (s) | 20.67 (1.0%) | 20.46 |
| Timed HMMer Search (s) | 89.31 (0.4%) | 88.93 |
| Bwﬁrt (s) | 285.3 (0.2%) | 284.9 |

**Average:** 1.09%  
**Standard Deviation:** 1.27%

## 7. Conclusions

Return-oriented programming (ROP) is an attack technique that has recently attracted significant attention from the scientific community. Despite extensive research, no comprehensive defense mechanism has been proposed to date. In this paper, we propose a novel, comprehensive solution to defend against ROP by removing all gadgets from a program binary at compile-time. Our approach targets all possible free-branch instructions, making it independent of the techniques used to link the gadgets together. We implemented our solution in a prototype called G-Free, a preprocessor for the GNU Assembler. Our experiments show that G-Free can remove all gadgets with a very low performance overhead and an acceptable increase in file size.

## 8. Acknowledgments

The research leading to these results was partially funded by the European Union Seventh Framework Programme (FP7/2007-2013) under grant agreement number 257007. This work has also been supported in part by the European Commission through project IST-216026-WOMBAT, funded under the 7th framework program. This publication reflects the views only of the authors, and the Commission cannot be held responsible for any use that may be made of the information contained herein. We would also like to thank Secure Business Austria for their support in this research.

## 9. References

[1] Phoronix Test Suite. http://www.phoronix-test-suite.com/.

[2] ROP Attack Against Data Execution Prevention Technology, 2009. http://www.h-online.com/security/news/item/Exploit-s-new-technology-trick-dodges-memory-protection-959253.html.

[3] Symantec: Internet Security Threat Report. http://www4.symantec.com/Vrt/wl?tu_id=jLac123913792490340803, 2009.

[4] Intel 64 and IA-32 Architectures Software Developer’s Manuals. http://www.intel.com/products/processor/manuals/, 2010.

[5] Aleph One. Smashing the Stack for Fun and Profit. In Phrack Magazine n.49, 1996.

[6] E. Buchanan, R. Roemer, H. Shacham, and S. Savage. When Good Instructions Go Bad: Generalizing Return-Oriented Programming to RISC. In Proceedings of the 15th ACM Conference on Computer and Communications Security (CCS), 2008.

[7] S. Checkoway, A. J. Feldman, B. Kantor, J. A. Halderman, E. W. Felten, and H. Shacham. Can DREs Provide Long-Lasting Security? The Case of Return-Oriented Programming and the AVC Advantage. In Proceedings of EVT/WOTE 2009. USENIX/ACCURATE/IAVoSS, 2009.

[8] S. Checkoway and H. Shacham. Escape from Return-Oriented Programming: Return-Oriented Programming Without Returns (on the x86). Technical report, 2010.

[9] P. Chen, H. Xiao, X. Shen, X. Yin, B. Mao, and L. Xie. DROP: Detecting Return-Oriented Programming Malicious Code. In Lecture Notes in Computer Science, 2009.

[10] C. Cowan, S. Beattie, J. Johansen, and P. Wagle. PointGuard: Protecting Pointers from Buffer Overflow Vulnerabilities. In Proceedings of the 12th Usenix Security Symposium, 2003.

[11] C. Cowan, C. Pu, D. Maier, J. Walpole, P. Bakke, S. Beattie, A. Grier, P. Wagle, Q. Zhang, and H. Hinton. StackGuard: Automatic Adaptive Detection and Prevention of Buffer-Overflow Attacks. In Proceedings of the 7th USENIX Security Symposium, USA, 1998.

[12] C. Cowan, P. Wagle, C. Pu, S. Beattie, and J. Walpole. Buffer Overflows: Attacks and Defenses for the Vulnerability of the Decade. In Proceedings of the DARPA Information Survivability Conference and Exposition, 2000.

[13] L. Davi, A. R. Sadeghi, and M. Winandy. Dynamic Integrity Measurement and Attestation: Towards Defense Against Return-Oriented Programming Attacks. In Proceedings of the ACM Workshop on Scalable Trusted Computing, 2009.

[14] Felix Lidner. Confidence 2.0: Developments in Cisco IOS Forensics.

[15] A. Francillon and C. Castelluccia. Code Injection Attacks on Harvard-Architecture Devices. In Proceedings of CCS, 2008.

[16] A. Francillon, D. Perito, and C. Castelluccia. Defending Embedded Systems Against Control Flow Attacks. In Proceedings of the First ACM Workshop on Secure Execution of Untrusted Code, 2008.

[17] M. Frantsen and M. Shuey. StackGhost: Hardware Facilitated Stack Protection. In Proceedings of USENIX Security, 2001.

[18] Hiroaki Etoh. GCC Extension for Protecting Applications from Stack-Smashing Attacks (ProPolice). http://www.trl.ibm.com/projects/security/ssp/, 2003.

[19] R. Hund, T. Holz, and F. Freiling. Return-Oriented Rootkits: Bypassing Kernel Code Integrity Protection Mechanisms. In Proceedings of the 18th USENIX Security Symposium, USA, 2009.

[20] V. Kiriansky, D. Bruening, and S. P. Amarasinghe. Secure Execution via Program Shepherding. In Proceedings of the 11th USENIX Security Symposium, pages 191–206, Berkeley, CA, USA, 2002. USENIX Association.

[21] J. Li, Z. Wang, X. Jiang, M. Grace, and S. Bahram. Defeating Return-Oriented Rootkits with Return-Less Kernels. In Proceedings of the 5th ACM SIGOPS EuroSys Conference, 2010.

[22] M. W. Lucas Davi, Ahmad-Reza Sadeghi. ROPDefender: A Detection Tool to Defend Against Return-Oriented Programming Attacks. Technical report, Technical Report HGI-TR-2010-001.

[23] Nergal. The Advanced Return-Into-Lib(c) Exploits. In Phrack Magazine n.58, 2001.

[24] R. Riley, X. Jiang, and D. Xu. Guest-Transparent Prevention of Kernel Rootkits with VMM-Based Memory Shadowing. In RAID '08: Proceedings of the 11th International Symposium on Recent Advances in Intrusion Detection, pages 1–20, Berlin, Heidelberg, 2008. Springer-Verlag.

[25] G. F. Roglia, L. Martignoni, R. Paleari, and D. Bruschi. Surgically Returning to Randomized Lib(c). In Proceedings of the 25th Annual Computer Security Applications Conference (ACSAC), Honolulu, Hawaii, USA, pages 60–69. IEEE Computer Society, Dec. 2009.

[26] Scut, Team Teso. Exploiting Format String Vulnerabilities, 2001.

[27] Sebastian Krahmer. x86-64 Buffer Overflow Exploits and the Borrowed Code Chunks Exploitation Technique, 2005. http://www.suse.de/~krahmer/no-nx.pdf.

[28] A. Seshadri, M. Luk, N. Qu, and A. Perrig. SecVisor: A Tiny Hypervisor to Provide Lifetime Kernel Code Integrity for Commodity OSes. In Proceedings of Operating System Symposium SOSP, 2007.

[29] H. Shacham. The Geometry of Innocent Flesh on the Bone: Return-Into-Libc Without Function Calls (on the x86). In Proceedings of the 14th ACM Conference on Computer and Communications Security (CCS), 2007.

[30] H. Shacham, M. Page, B. Pfaff, E.-J. Goh, N. Modadugu, and D. Boneh. On the Effectiveness of Address-Space Randomization. In Proceedings of the 11th ACM Conference on Computer and Communications Security (CSS), 2004.

[31] Solar Designer. Return-to-libc Attack. Technical report, bugtraq, 1997.

[32] The PaX Team. Pax Address Space Layout Randomization. Technical report, http://pax.grsecurity.net/docs/aslr.txt.

[33] The PaX Team. Pax Non-Executable Pages. Technical report, http://pax.grsecurity.net/docs/noexec.txt.

[34] Tim Kornau. Return Oriented Programming for the ARM Architecture. Technical report, Master’s thesis, Ruhr-Universität Bochum, 2010.

[35] Vendicator. StackShield: A "Stack Smashing" Technique Protection Tool for Linux. Technical report, http://www.angelfire.com/sk/stackshield/.

[36] Z. Wang, X. Jiang, W. Cui, and P. Ning. Countering Kernel Rootkits with Lightweight Hook Protection. In Proceedings of the 16th ACM Conference on Computer and Communications Security, CCS, 2009.