# 自删除技术详解
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 基础知识
这里首先说一下程序自删除实现的思路：程序创建一个批处理文件，并创建进程执行，然后程序结束进程；批处理所做的功能便是延时5秒后，删除指定程序然后再自删除。这样，程序自删除功能便实现了。
自删除的实现主要可以使用两种方法，一种是利用批处理技术，另外一种则是调用windows提供的api进行实现
首先说一下批处理技术。 **批处理(Batch)**
，也称为批处理[脚本](https://baike.baidu.com/item/%E8%84%9A%E6%9C%AC)。顾名思义，批处理就是对某对象进行批量的处理，通常被认为是一种简化的[脚本语言](https://baike.baidu.com/item/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80/1379708)，它应用于[DOS](https://baike.baidu.com/item/DOS)和[Windows](https://baike.baidu.com/item/Windows)系统中。[批处理文件](https://baike.baidu.com/item/%E6%89%B9%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6/5363369)的扩展名为[bat](https://baike.baidu.com/item/bat/365230)
。比较常见的批处理包含两类：[DOS](https://baike.baidu.com/item/DOS)批处理和PS批处理。PS批处理是基于微软的强大的PowerShell的，用来[批量处理](https://baike.baidu.com/item/%E6%89%B9%E9%87%8F%E5%A4%84%E7%90%86/4973973)一些任务的[脚本](https://baike.baidu.com/item/%E8%84%9A%E6%9C%AC/399)；而DOS批处理则是基于DOS命令的，用来自动地[批量](https://baike.baidu.com/item/%E6%89%B9%E9%87%8F)地执行DOS命令以实现特定操作的脚本。更复杂的情况，需要使用if、for、goto等命令控制程式的运行过程，如同[C](https://baike.baidu.com/item/C)、[Basic](https://baike.baidu.com/item/Basic)等高级语言一样。如果需要实现更复杂的应用，利用外部程式是必要的，这包括系统本身提供的外部命令和第三方提供的工具或者软件。[批处理程序](https://baike.baidu.com/item/%E6%89%B9%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F/2192936)虽然是在命令行环境中运行，但不仅仅能使用命令行软件，任何当前系统下可运行的程序都可以放在批处理文件中运行。
有些人认为批处理语言的含义要比上面的描述更广泛，还包括许多软件自带的批处理语言，如 [Microsoft
Office](https://baike.baidu.com/item/Microsoft%20Office)、[Visual
Studio](https://baike.baidu.com/item/Visual%20Studio)、[Adobe
Photoshop](https://baike.baidu.com/item/Adobe%20Photoshop)
所内置的批处理语言的功能，用户可通过它们让相应的软件执行自动化操作（例如调整某个资料夹所有 PSD 图档的解析度）。
而这类批处理语言也大多提供把一系列操作录制为批处理文件的功能，这样用户不必写程式就能得到批处理程序。
在这个地方其实批处理也是一种特殊的语言，比如说我们要在cmd里面执行一些命令，就可以把他写成一个bat文件。这里能够使用批处理实现自删除有一个前提就是，批处理提供了自己删除自己的命令，如下所示
    del %0
在批处理文件执行这个命令之后会直接对文件进行删除，而不是放入回收站，那么我们就可以先执行我们想要执行的程序，然后在sleep过后使用`del
%0`删除自身即可。
## 实现过程
###  批处理方式
这里有一个注意的点，一种是使用 choice 命令进行延迟，另一种则使用 ping 命令进行延迟。要注意的是，choice 这个命令是从 Windows
2003开始才有这个命令。也就是说，Windows 2003版本或者以上版本才支持这个命令，对于低于Windows 2003的版本是不支持的。Windows
XP 版本比Windows 2003版本低，所以不支持 choice 命令。
那么我们首先进行choice命令的实现，bat的代码如下
    @echo off
    choice /t 10 /d y /n >nul
    del *.exe
    del %0
我们整理下思路，要想实现自删除首先需要知道程序所在的目录，然后生成批处理文件并生成进程来执行批处理文件，主要用到的是`GetModuleFileName`这个api
**GetModuleFileName**
检索包含指定模块的文件的完全限定路径。
    DWORD GetModuleFileNameA(
      [in, optional] HMODULE hModule,
      [out]          LPSTR   lpFilename,
      [in]           DWORD   nSize
    );
那么我们首先要写一个函数进行批处理文件的自动生成，这里直接用`wsprintf`写入即可
    ::wsprintf(szBat, "@echo off\nchoice /t %d /d y /n >nul\ndel *.exe\ndel %%0\n", time);
然后使用`fopen_s`、`fwrite`生成批处理文件
    FILE *fp = NULL;
    fopen_s(&fp, pszBatName, "w+");
    fwrite(szBat, (1 + ::lstrlen(szBat)), 1, fp);
完整代码如下
    BOOL CreateBat(char *pszBatFileName)
    {
        int time = 5;
        char szBat[MAX_PATH] = { 0 };
        ::wsprintf(szBat, "@echo off\nchoice /t %d /d y /n >nul\ndel *.exe\ndel %%0\n", time);
        FILE *fp = NULL;
        fopen_s(&fp, pszBatFileName, "w+");
        if (NULL == fp)
        {
            return FALSE;
        }
        fwrite(szBat, (1 + ::lstrlen(szBat)), 1, fp);
        fclose(fp);
        return TRUE;
    }
然后我们首先获取程序所在的目录
    ::GetModuleFileName(NULL, szPath, MAX_PATH);
然后把批处理文件跟程序放到同一目录下
    ::wsprintf(szBat, "%s\\test.bat", szPath);
然后调用cmd命令行
    ::wsprintf(szCmd, "cmd /c call \"%s\"", szBat);
再调用之前编写的`CreateBat`创建批处理文件
    bRet = CreateBat(szBat);
最后就是使用`CreateProcess`创建进程，但是这里有一个比较特殊的地方，就是我们需要隐蔽执行，那么我们就可以使用不显示执行程序窗口的模式，这个参数在`CreateProcess`的第九个参数，首先看一下`CreateProcess`的结构
    BOOL CreateProcessA(
      [in, optional]      LPCSTR                lpApplicationName,
      [in, out, optional] LPSTR                 lpCommandLine,
      [in, optional]      LPSECURITY_ATTRIBUTES lpProcessAttributes,
      [in, optional]      LPSECURITY_ATTRIBUTES lpThreadAttributes,
      [in]                BOOL                  bInheritHandles,
      [in]                DWORD                 dwCreationFlags,
      [in, optional]      LPVOID                lpEnvironment,
      [in, optional]      LPCSTR                lpCurrentDirectory,
      [in]                LPSTARTUPINFOA        lpStartupInfo,
      [out]               LPPROCESS_INFORMATION lpProcessInformation
    );
就是`LPSTARTUPINFOA`这个参数，这个参数决定了新进程的主窗体如何显示的STARTUPINFO结构体，我们继续跟到STARTUPINFO结构体里面
    typedef struct _STARTUPINFOA {
      DWORD  cb;
      LPSTR  lpReserved;
      LPSTR  lpDesktop;
      LPSTR  lpTitle;
      DWORD  dwX;
      DWORD  dwY;
      DWORD  dwXSize;
      DWORD  dwYSize;
      DWORD  dwXCountChars;
      DWORD  dwYCountChars;
      DWORD  dwFillAttribute;
      DWORD  dwFlags;
      WORD   wShowWindow;
      WORD   cbReserved2;
      LPBYTE lpReserved2;
      HANDLE hStdInput;