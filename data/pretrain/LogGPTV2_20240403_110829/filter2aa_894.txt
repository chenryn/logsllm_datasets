Honey Onions: Exposing Snooping
Tor HSDir Relays
Guevara Noubir, Amirali Sanatinia
College of Computer and Information Science
Northeastern University, Boston, USA
{noubir,amirali}@ccs.neu.edu
Abstract—Tor is a widely used anonymity network that
protects users’ privacy and identity from corporations, agencies
and governments. However, Tor remains a practical system with
a variety of limitations which can be subverted [1]. In particular,
Tor’s security relies on the fact that a substantial number of its
nodes do not misbehave.
Previous work showed the existence of malicious participating
Tor relays. For example, there are some Exit nodes that actively
interfere with users’ trafﬁc and carry out man-in-the-middle
attacks. In this work we expose another category of misbehaving
Tor relays (HSDirs), that are integral to the functioning of the
hidden services and the dark web. The HSDirs act as the DNS
directory for the dark web. Because of their nature, detecting
their malicious intent and behavior is much harder. We introduce,
the concept of honey onions (honions), a framework to detect
misbehaving Tor relays with HSDir capability. By setting up and
deploying a large scale honion over Tor for more than 72 days, we
are able to obtain lower bounds on misbehavior among HSDirs.
We propose algorithms to both estimate the number of
snooping HSDirs and identify them, using optimization and
feasibility techniques. Our experimental results indicate that
during the period of our work at least 110 such nodes were
snooping information about hidden services they host. We reveal
that more than half of them were hosted on cloud infrastructure
and delayed the use of the learned information to prevent easy
traceback. Furthermore, we provide the most likely geolocation
map of the identiﬁed snooping Tor HSDirs.
I.
HONION GENERATION & DETECTION
In this work, we introduce the concept of honey onions
(honions), a framework to expose when a Tor relay with
HSDir capability has been modiﬁed to snoop into the hidden
services that it currently hosts. We developed several tools,
to automate the process of generating and deploying honions
in a way that they cover a signiﬁcant fraction of HSDirs. A
key constraint in this process was to minimize the number of
deployed honions. This derives primarily from our desire to
not impact the Tor statistics about hidden services; specially
given the recent surge anomaly (Figure 1). By considering
the number of HSDirs (approximately 3000), we could infer
that to cover all HSDirs with 0.95 probability, we need to
generate around 1500 honions. We decided on three schedules
to allow us to detect different snooping behaviors. Namely,
daily, weekly and monthly. The daily schedule allows us to
detect malicious HSDirs who visit honions shortly after hosting
them. The weekly and monthly schedules enables us to detect
more sophisticated snoopers who delay their visits to avoid
identiﬁcation.
Fig. 1: Recent unexplained surge in the number of Hidden
Services.
HOnion back end servers: Each honion corresponds to a
process that is running locally. The server behind hidden
services, should not be running on a public IP address, to avoid
de-anonymization. We also log all the requests that are made to
the server programs and the time of each visit. Recording the
content of the requests allows us to investigate the snoopers’
behavior and intent.
HOnions generation and deployment schedule: To keep the
total number of honions small, we decided on three schedules
for their generation and placement, daily, weekly, and monthly.
The three schedules allow us to detect the malicious HSDirs
who visit the honions shortly (less than 24 hours) after
hosting them. Since the HSDirs for hidden services change
periodically, more sophisticated snoopers may wait for a longer
duration of time, so they can evade detection and frame other
HSDirs.
Identifying snooping HSDirs: Based on the visited hidden
service, the time of the visit, and the HSDir that have been
hosting the speciﬁc onion address prior to the visit, we can
mark the potential malicious and misbehaving HSDirs. Then,
we add the candidates to a bipartite graph, which consists of
edges between HSDirs and the visited honions. The analysis
of this graph allows us to infer a lower bound on the number
of malicious HSDirs as well as speciﬁc snoopers. Figure 2
depicts the architecture of the system.
HOnion Visit Graph Formation: In the following we ﬁrst
introduce a formal model and notation for the Honey Onions
1. Generate honions
ho i
ho
j
2. Place honions on HSDirs
3. Build bipartite graph
On visit, mark potential HSDirs
ho
j
di
di+2
di+1
di
di+1
di+2
On visit, add to bipartite graph
Fig. 2: Flow diagram of the honion system.
system. First, HO denotes the set of honey onions generated
by the system that were visited, and HSD the set of Tor
relays with the HSDir ﬂag (so far referred to as HSDir relays).
The visits of honions allow us to build a graph G = (V, E)
whose vertices are the union of HO and HSD and edges
connect a honion hoj and HSDir di iff hoj was placed on
di and subsequently experienced a visit. G is by construction
a bipartite graph. We also note that each honion periodically
changes descriptors and therefore HSDirs (approximately once
a day). However, a HSDir currently a honion ho cannot explain
visits during past days. Therefore, each time a honion changes
HSDirs we clone its vertex ho to ho0 and only add edges
between ho0 and the HSDirs who know about its existence
when the visit happened.
Estimation & Set Cover: Since each honion is simultaneously
placed on multiple HSDirs, the problem of identifying which
ones are malicious is not trivial. We ﬁrst formulate the problem
of deriving a lower-bound on their number by ﬁnding the
smallest subset S of HSD that can explain all the visits. The
size s of the minimal set tells us that there cannot be less than
s malicious HSDirs who would explain the visits.
HSD
=
{di : Tor relays with HSDir ﬂag}
HO
=
{hoj : Honey Onion that was visited}
V
=
HSD [ HO
E
=
{(hoj, di) 2 HO ⇥ HSD|hoj was placed on di
and subsequently visited}
argmin
S✓HSD
|S : 8(hoj, di) 2 E9d0
i 2 S ^ (hoj, d0
i) 2 E|
(1)
Finding the smallest set S as deﬁned by Equation 1, is not
trivial as one can easily see that it is equivalent to the hitting set
problem, which is well known to be NP-Complete. However,
it can also be formulated as an Integer Linear Program. Let
x1j|HSD| be binary variables taking values 0 or 1. Solving
Equation 1, consists of ﬁnding integer assignments to the xj
such that:
(a) Daily Visits
(b) All Visits
Fig. 3: Plot of the visits to the honions.
min(x1,...,xHSD)
P|HSD|
j=1
xj
subject to 8hoi 2 HO
P
8j:(hoi,dj)2E xj ≥ 1
II.
RESULTS & DISCUSSION
We started the daily honions on Feb 12, 2016; the weekly
and monthly experiments on February 21, 2016, which lasted
until April 24, 2016. During this period there were three spikes
in the number of hidden services, with one spike more than
tripling the average number of hidden services (Figure 1).
There are some theories suggesting that this was due to
botnets, ransomware, or the success of the anonymous chat
service, called Ricochet. However, none of these explanations
can deﬁnitely justify the current number of hidden services.
Our daily honions spotted snooping behavior before the spike
in the hidden services, this gives us a level of conﬁdence
that the snoopings are not only a result of the anomaly
(Figure 3). Rather, there are entities that actively investigate
hidden services.
Snooping HSDirs Nature and Location: In total we detected
at least 110 malicious HSDir using the ILP algorithm, and
more than 40000 visits. More than 70% of these HSDirs are
hosted on Cloud infrastructure. Around 25% are exit nodes as
compared to the average, 15% of all relays in 2016, that have
both the HSDir and the Exit ﬂags. This can be interesting
for further investigation, since it is known that some Exit
nodes are malicious and actively interfere with users’ trafﬁc
and perform active MITM attacks [2]. Furthermore, 20% of
the misbehaving HSDirs are, both exit nodes and are hosted
Fig. 4: The global map of detected misbehaving HSDirs and their most likely geographic origin.
on Cloud systems, with data centers in Europe and Northern
America. The top 5 countries are, USA, Germany, France, UK,
and Netherlands. Figure 4 depicts the spread and the most
likely geolocation of the malicious HSDirs.
HSDirs Behavior and Intensity of the Visits: Most of the
visits were just querying the root path of the server and were
automated. However, we identiﬁed less than 20 possible man-
ual probing, because of a query for favicon.ico, the little icon
that is shown in the browser, which the Tor browser requests.
Some snoopers kept probing for more information even when
we returned an empty page. For example, we had queries
for description.json, which is a proposal to all HTTP
servers inside Tor network to allow hidden services search
engines such as Ahmia, to index websites. One of the snooping
HSDirs (5.*.*.*:9011) was actively querying the server every
1 hour asking for a server-status page of Apache. It is part
of the functionality provided by mod status in Apache, which
provides information on server activity and performance. Ad-
ditionally, we detected other attack vectors, such as SQL in-
jection, targeting the information_schema.tables,
username enumeration in Drupal, cross-site scripting (XSS),
path traversal (looking for boot.ini and /etc/passwd),
targeting Ruby on Rails framework (rails/info/properties), and
PHP Easter Eggs (?=PHP*-*-*-*-*).
III.
CONCLUSION & FUTURE WORK
In this work, we introduced honey onions (HOnions), a
framework for methodically estimating and identifying Tor
HSDir nodes that are snooping on hidden services they are
hosting. We propose algorithms to both estimate the number of
snooping HSDirs and identify them. Our experimental results
indicate that during the period of the study (72 days) at least
110 such nodes were snooping information about hidden ser-
vices they host. Furthermore, we observer that not all snooping
HSDirs operate with the same level of sophistication and
intensity. For example the less sophisticated snoopers visit the
honions shortly after hosting them (less than 24 hours), while
the more sophisticated snooping HSDirs delay their visits to
avoid detection and frame their neighboring relays. We believe
that behavior of the snoopers can be modeled and studied in
more detail using a game theoretic framework. Additionally,
we reveal that more than half of them were hosted on cloud
infrastructure making it difﬁcult to detect malicious Tor nodes.
Specially some cloud providers such as Vultr, even accepts
payments in the form of bitcoins, which prevents the traceback
and identiﬁcation of misbehaving entities. It is noteworthy that
the current proposals [3] for the next generation of hidden
services would improve their privacy and security.
REFERENCES
[1]
A. Sanatinia and G. Noubir, “Onionbots: Subverting privacy infras-
tructure for cyber attacks,” in The Annual IEEE/IFIP International
Conference on Dependable Systems and Networks (DSN), 2015.
[2]
P. Winter, R. K¨ower, M. Mulazzani, M. Huber, S. Schrittwieser, S. Lind-
skog, and E. Weippl, “Spoiled onions: Exposing malicious tor exit re-
lays,” in Privacy Enhancing Technologies: 14th International Symposium
(PETS), Proceedings, 2014.
[3]
N. Mathewson, “Next-generation hidden services in tor,” https://gitweb.
torproject.org/torspec.git/tree/proposals/224-rend-spec-ng.txt.