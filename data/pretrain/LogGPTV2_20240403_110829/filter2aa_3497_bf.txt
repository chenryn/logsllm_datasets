CFLAGS environment variable, 243
change cipher spec (TLS), 176
char types, 212
character encoding
ASCII, 43
Unicode, 44–45
character mapping, 44–45
chat_server.csx script, 187
ChatClient.exe (SuperFunkyChat), 80–81, 200
ChatProgram namespace (.NET), 190
ChatServer.exe (SuperFunkyChat), 80
checksum, 93–94, 107
Chinese characters, 44
chosen plaintext attack, 162
CIL (common intermediate language), 137–138
Cipher and Hash algorithm, 202
cipher block chaining (CBC), 153–155
cipher feedback mode, 159
cipher text, 146
ciphers, 146
block, 150–159
Technet24
||||||||||||||||||||
||||||||||||||||||||
stream, 158–159
substitution, 147
CJK character sets, 44
CLANG C compiler, 243–244
C language, 112, 123, 132, 210, 212
Class files, 141
Class.forName() method (Java), 194
client certificate (TLS), 175
client random (TLS), 173
C library, 268
CLR (common language runtime), 137
CMD command, 255
CMP instruction, 115, 119
code
error, 262
executable. See executable codes
message authentication. See message authentication codes (MACs)
pages (ASCII), 44
point, 44
section, 120
collision attacks, 166–168
collision resistance (hashing algorithm), 165
command injection, 228
common intermediate language (CIL), 137–138
common language runtime (CLR), 137
Common Object Request Broker Architecture (CORBA), 22
compiled languages, 113
compilers, 113, 132, 243
compression, 20, 108, 217
conditional branches, 118–119
CONNECT HTTP method, 30
Connect() method, 185, 192–193
CONNECT proxy, 32
connect system call, 15
content layer, 8–10
content parsers, 4
||||||||||||||||||||
||||||||||||||||||||
Content-Type values, 57
control characters (ASCII), 43
control flow, 118
control registers, 117
Conversations window (Wireshark), 84–85
cookies, 212, 273–276
CORBA (Common Object Request Broker Architecture), 22
counter mode, 159
CPU, 39
8086, 114
assembly language and, 113
exhaustion attacks, 224–226
instruction set architecture, 114–116
registers, 116–118
signed integers, 39
x86 architecture, 114–119, 125
crashes
debugging, 238–240
example, 240–243
finding root cause of, 243–245
CreateInstance() method (.NET), 191
cron jobs, 254
cross-site scripting (XSS), 58
Crypt32.dll, 132
CryptoAllPermissionCollection.class, 142
cryptanalysis, 146
cryptography
asymmetric key, 159–164
configurable, 226
hashing algorithms, 164–165
libraries, 132
symmetric key, 149–159
CS register, 116, 118
ctypes library (Python), 195
curl command line utility, 31
Technet24
||||||||||||||||||||
||||||||||||||||||||
D
Dante, 27
data
controlling flow of, 2
encapsulation, 4–7
endianness of, 41
formatting and encoding, 2
implicit-length, 48–49
inbound, 92
integrity, 164
numeric, 38–41
padded, 49
terminated, 47–48
transmission, 2, 6–7
variable-length, 56
Data Encryption Standard (DES), 150–151
data execution prevention (DEP), 267–268
data expansion attack, 217
DataFrame, 108
datagram, 5
datagram socket, 122
Datagram Transport Layer Security (DTLS), 172
data section, 120
dates, 49–50, 55
.ddl extension, 137–138
debuggers, 111, 134–137, 236–240, 243–245, 258–259
debugging, 236–243
analyzing crash in, 238–240
applications, 236
default or hardcoded credentials, 218
shell code, 258–259
starting, 236–237
debugging symbols package (dSYM), 131
DEC instruction, 115
decimal numbers, 55
decompilation, 113
||||||||||||||||||||
||||||||||||||||||||
decryption. See also encryption
asymmetric, 160
block cipher, 150
breakpoints, 137
cipher block chaining, 155, 157–158
dealing with obfuscation, 143–144
padding, 155–157
RSA, 161, 165
TLS, 200–202
Triple DES, 151
default credentials, 218
default gateway, 8, 66
defined memory pools, 252–253
delimited text, 56
denial-of-service, 208
DEP (data execution prevention), 267–268
DER (Distinguished Encoding Rules), 53
DES (Data Encryption Standard), 150–151
DES cracker, 151
destination address, 5
destination network address translation (DNAT), 24, 68–71
DHCP. See Dynamic Host Configuration Protocol (DHCP)
Diffie, Whitfield, 162
Diffie–Hellman Key Exchange (DH), 162–164
Digital Signature Algorithm (DSA), 165
disassembly, 113
discover (DHCP packet), 71
dissector() function, 99
dissector.lua file, 98
dissectors
creating, 97
Lua, 99
message packet parsing, 100–103
Wireshark, 95–103
Distinguished Encoding Rules (DER), 53
DLL extension, 80, 120, 189
Technet24
||||||||||||||||||||
||||||||||||||||||||
DNAT (destination network address translation), 24, 68–71
DNSMasq, 287
dnsspoof, 34
Domain Name System (DNS) protocol, 3
Dotfuscator, 143–144
dotnet binary, 81
downgrade attack, 176
DSA (Digital Signature Algorithm), 165
DS register, 116, 118
dSYM (debugging symbols package), 131
Dtrace, 16–18
Dynamic Host Configuration Protocol (DHCP), 63, 66
packets, 71–72
spoofing, 71–74
dynamic libraries, 130, 195–196
dynamic linking, 113–114, 121
dynamic reverse engineering
breakpoints, 135, 137
defined, 134
general purpose registers, 136
E
EAX register, 116, 123, 242, 258, 270
EBP register, 116–117, 124
EBX register, 116, 124
ECDH (Elliptic Curve Diffie–Hellman), 202
ECX register, 116, 124
EDI register, 116–117, 124
EDX register, 116, 123–124
EFAULT, 262
EFLAGS register, 117, 119, 136
EIP register, 116–117, 135
Electronic Frontier Foundation, 151
elements (XML), 58
ELF (Executable Linking Format), 120, 131, 144
||||||||||||||||||||
||||||||||||||||||||
Elliptic Curve Diffie–Hellman (ECDH), 202
elliptic curves, 160
encoding
Base64, 60–61
binary data, 59–61
hex, 59–60
percent, 60
encoding layer, 8–10
encryption, 20, 30. See also decryption
AES, 133, 150, 152
asymmetric, 160
block cipher, 150
breakpoints, 137
cipher block chaining, 153–155
DES, 150–151
Electronic Code Book, 153
HTTP connection to, 108
key, 146
libraries, 132
magic constants, 133
one-time pad, 148
padding, 155
public key. See asymmetric key cryptography
RSA, 155, 161
substitution ciphers, 147
TLS, 175–176, 200–206
Triple DES, 151
XOR, 108–109, 148–149, 153–154
encryption libraries, 132
endianness, 41–42
errno, 262
errors
codes, 262
detecting and correcting, 2
off-by-one, 213
verbose, 221–222
ES register, 116, 118
Technet24
||||||||||||||||||||
||||||||||||||||||||
ESI register, 116, 124
ESP register, 116–117, 124, 136, 270
eth0, 180
Ethernet, 3
ARP poisoning, 74–75
frame, 6, 8
MAC addresses, 6, 74
network routing, 7–8
passive network capture, 12–13
simple network, 6
Ettercap, 72–75, 287–288
executable codes
address space layout randomization, 272
file formats, 119–120
function calls in, 123
memory corruption and, 210, 246
partial overwrites, 272
repurposing, 188–199
in .NET applications, 189–193
in Java applications, 193–195
ROP gadgets, 269
system calls, 259
unmanaged, 195–199
executable file formats, 119–120, 137
Executable Linking Format (ELF), 120, 131, 144
.exe extension, 120, 137–138, 189
exit system call, 260–261
Extensible Markup Language (XML), 58
Extensible Messaging and Presence Protocol (XMPP), 58
F
false, 55
fd argument, 261
Federal Information Processing Standard (FIPS), 151
Feistel network, 151
File Transfer Protocol (FTP), 24, 28
||||||||||||||||||||
||||||||||||||||||||
FILETIME (Windows), 50
Financial Information Exchange (FIX) protocol, 56
finished packet, 176
fixed-length buffer overflows, 211–213
floating-point data, 40–41
Follow Stream button (Wireshark), 85
Follow TCP Stream view (Wireshark), 88–89
footers, 4–5
format string vulnerability, 227
forward slash (/), 81, 220
forwarding HTTP proxy. See also reverse HTTP proxy
advantages and disadvantages of, 31
redirecting traffic to, 30–31
simple implementation of, 30–31
fragmentation, 51–52
FreeBSD, 16
FreeCAP, 27
free-list, 251
frequency analysis, 147
FS register, 116, 118
FTP (File Transfer Protocol), 24, 28
function monitors, 111
fuzz testing
defined, 234
mutation fuzzer, 235
simplest, 234
test cases, 235–236
tools
American Fuzzy Lop, 285–286
Kali Linux, 286
Metasploit, 286
Scapy, 287
Sulley, 287
G
Galois Counter Mode (GCM), 155
Technet24
||||||||||||||||||||