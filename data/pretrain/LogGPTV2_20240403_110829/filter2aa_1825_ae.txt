In user mode programming, C++ has been used for many years, and it works well when combined with
user-mode Windows APIs. With kernel code, Microsoft started officially supporting C++ with Visual
Studio 2012 and WDK 8. C++ is not mandatory, of course, but it has some important benefits related
to resource cleanup, with a C++ idiom called Resource Acquisition Is Initialization (RAII). We’ll use this
RAII idiom quite a bit to make sure we don’t leak resources.
C++ as a language is almost fully supported for kernel code. But there is no C++ runtime in the kernel,
and so some C++ features just cannot be used:
• The new and delete operators are not supported and will fail to compile. This is because their
normal operation is to allocate from a user-mode heap, which is irrelevant within the kernel. The
kernel API has “replacement” functions that are more closely modeled after the C functions malloc
and free. We’ll discuss these functions later in this chapter. It is possible, however, to overload the
new and delete operators similarly as is sometimes done in user-mode, and invoke the kernel
allocation and free functions in the implementation. We’ll see how to do that later in this chapter
as well.
• Global variables that have non-default constructors will not be called - there is no C/C++ runtime
to call these constructors. These situations must be avoided, but there are some workarounds:
– Avoid any code in the constructor and instead create some Init function to be called explicitly
from driver code (e.g. from DriverEntry).
Chapter 3: Kernel Programming Basics
36
– Allocate a pointer only as a global (or static) variable, and create the actual instance
dynamically. The compiler will generate the correct code to invoke the constructor. This works
assuming the new and delete operators have been overloaded, as described later in this
chapter.
• The C++ exception handling keywords (try, catch, throw) do not compile. This is because
the C++ exception handling mechanism requires its own runtime, which is not present in the
kernel. Exception handling can only be done using Structured Exception Handling (SEH) - a kernel
mechanism to handle exceptions. We’ll take a detailed look at SEH in chapter 6.
• The standard C++ libraries are not available in the kernel. Although most are template-based, these
do not compile, because they may depend on user-mode libraries and semantics. That said, C++
templates as a language feature work just fine. One good usage of templates is to create alternatives
for a kernel-mode library types, based on similar types from the user-mode standard C++ library,
such as std::vector<>, std::wstring, etc.
The code examples in this book make some use of C++. The features mostly used in the code examples
are:
• The nullptr keyword, representing a true NULL pointer.
• The auto keyword that allows type inference when declaring and initializing variables. This is
useful to reduce clutter, save some typing, and focus on the important pieces.
• Templates will be used where they make sense.
• Overloading of the new and delete operators.
• Constructors and destructors, especially for building RAII types.
Any C++ standard can be used for kernel development. The Visual Studio setting for new projects is to
use C++ 14. However, you can change the C++ compiler standard to any other setting, including C++ 20
(the latest standard as of this writing). Some features we’ll use later will depend on C++ 17 at least.
Strictly speaking, kernel drivers can be written in pure C without any issues. If you prefer to go that route,
use files with a C extension rather than CPP. This will automatically invoke the C compiler for these files.
Testing and Debugging
With user-mode code, testing is generally done on the developer’s machine (if all required dependencies
can be satisfied). Debugging is typically done by attaching the debugger (Visual Studio in most cases) to
the running process or launching an executable and attaching to the process.
With kernel code, testing is typically done on another machine, usually a virtual machine hosted on
the developer’s machine. This ensures that if a BSOD occurs, the developer’s machine is unaffected.
Debugging kernel code must be done with another machine, where the actual driver is executing. This
is because hitting a breakpoint in kernel-mode freezes the entire machine, not just a particular process.
The developer’s machine hosts the debugger itself, while the second machine (again, usually a virtual
machine) executes the driver code. These two machines must be connected through some mechanism
so data can flow between the host (where the debugger is running) and the target. We’ll look at kernel
debugging in more detail in chapter 5.
Chapter 3: Kernel Programming Basics
37
Debug vs. Release Builds
Just like with user-mode projects, building kernel drivers can be done in Debug or Release mode. The
differences are similar to their user-mode counterparts - Debug builds use no compiler optimizations by
default, but are easier to debug. Release builds utilize full compiler optimizations by default to produce
the fastest and smallest code possible. There are a few differences, however.
The terms in kernel terminology are Checked (Debug) and Free (Release). Although Visual Studio kernel
projects continue to use the Debug/Release terms, older documentation uses the Checked/Free terms. From
a compilation perspective, kernel Debug builds define the symbol DBG and set its value to 1 (compared to
the _DEBUG symbol defined in user mode). This means you can use the DBG symbol to distinguish between
Debug and Release builds with conditional compilation. This is, for example, what the KdPrint macro
does: in Debug builds, it compiles to calling DbgPrint, while in Release builds it compiles to nothing,
resulting in KdPrint calls having no effect in Release builds. This is usually what you want because these
calls are relatively expensive. We’ll discuss other ways of logging information in chapter 5.
The Kernel API
Kernel drivers use exported functions from kernel components. These functions will be referred to as the
Kernel API. Most functions are implemented within the kernel module itself (NtOskrnl.exe), but some may
be implemented by other kernel modules, such the HAL (hal.dll).
The Kernel API is a large set of C functions. Most of these start with a prefix suggesting the component
implementing that function. Table 3-2 shows some of the common prefixes and their meaning:
Table 3-2: Common kernel API prefixes
Prefix
Meaning
Example
Ex
General executive functions
ExAllocatePoolWithTag
Ke
General kernel functions
KeAcquireSpinLock
Mm
Memory manager
MmProbeAndLockPages
Rtl
General runtime library
RtlInitUnicodeString
FsRtl
file system runtime library
FsRtlGetFileSize
Flt
file system mini-filter library
FltCreateFile
Ob
Object manager
ObReferenceObject
Io
I/O manager
IoCompleteRequest
Se
Security
SeAccessCheck
Ps
Process manager
PsLookupProcessByProcessId
Po
Power manager
PoSetSystemState
Wmi
Windows management instrumentation
WmiTraceMessage
Zw
Native API wrappers
ZwCreateFile
Chapter 3: Kernel Programming Basics
38
Table 3-2: Common kernel API prefixes
Prefix
Meaning
Example
Hal
Hardware abstraction layer
HalExamineMBR
Cm
Configuration manager (registry)
CmRegisterCallbackEx
If you take a look at the exported functions list from NtOsKrnl.exe, you’ll find many functions that are
not documented in the Windows Driver Kit; this is just a fact of a kernel developer’s life - not everything
is documented.
One set of functions bears discussion at this point - the Zw prefixed functions. These functions mirror
native APIs available as gateways from NtDll.Dll with the actual implementation provided by the
Executive. When an Nt function is called from user mode, such as NtCreateFile, it reaches the Executive
at the actual NtCreateFile implementation. At this point, NtCreateFile might do various checks
based on the fact that the original caller is from user mode. This caller information is stored on a thread-
by-thread basis, in the undocumented PreviousMode member in the KTHREAD structure for each thread.
You can query the previous processor mode by calling the documented ExGetPreviousMode API.
On the other hand, if a kernel driver needs to call a system service, it should not be subjected to the
same checks and constraints imposed on user-mode callers. This is where the Zw functions come into
play. Calling a Zw function sets the previous caller mode to KernelMode (0) and then invokes the
native function. For example, calling ZwCreateFile sets the previous caller to KernelMode and then
calls NtCreateFile, causing NtCreateFile to bypass some security and buffer checks that would
otherwise be performed. The bottom line is that kernel drivers should call the Zw functions unless there
is a compelling reason to do otherwise.
Functions and Error Codes
Most kernel API functions return a status indicating success or failure of an operation. This is typed as
NTSTATUS, a signed 32-bit integer. The value STATUS_SUCCESS (0) indicates success. A negative value
indicates some kind of error. You can find all the defined NTSTATUS values in the file .
Most code paths don’t care about the exact nature of the error, and so testing the most significant bit is
enough to find out whether an error occurred. This can be done with the NT_SUCCESS macro. Here is an
example that tests for failure and logs an error if that is the case:
Chapter 3: Kernel Programming Basics
39
NTSTATUS DoWork() {
NTSTATUS status = CallSomeKernelFunction();
if(!NT_SUCCESS(Statue)) {
KdPirnt((L"Error occurred: 0x%08X\n", status));
return status;
}
// continue with more operations
return STATUS_SUCCESS;
}
In some cases, NTSTATUS values are returned from functions that eventually bubble up to user mode. In
these cases, the STATUS_xxx value is translated to some ERROR_yyy value that is available to user-mode
through the GetLastError function. Note that these are not the same numbers; for one, error codes in
user-mode have positive values (zero is still success). Second, the mapping is not one-to-one. In any case,
this is not generally a concern for a kernel driver.
Internal kernel driver functions also typically return NTSTATUS to indicate their success/failure status.
This is usually convenient, as these functions make calls to kernel APIs and so can propagate any error
by simply returning the same status they got back from the particular API. This also implies that the
“real” return values from driver functions is typically returned through pointers or references provided as
arguments to the function.
Return NTSTATUS from your own functions. It will make it easier and consistent to report
errors.
Strings
The kernel API uses strings in many scenarios as needed. In some cases, these strings are simple Unicode
pointers (wchar_t* or one of their typedefs such as WCHAR*), but most functions dealing with strings
expect a structure of type UNICODE_STRING.
The term Unicode as used in this book is roughly equivalent to UTF-16, which means 2 bytes per character.
This is how strings are stored internally within kernel components. Unicode in general is a set of standards
related to character encoding. You can find more information at https://unicode.org.
The UNICODE_STRING structure represents a string with its length and maximum length known. Here is
a simplified definition of the structure:
Chapter 3: Kernel Programming Basics
40
typedef struct _UNICODE_STRING {
USHORT Length;
USHORT MaximumLength;
PWCH
Buffer;
} UNICODE_STRING;
typedef UNICODE_STRING *PUNICODE_STRING;
typedef const UNICODE_STRING *PCUNICODE_STRING;
The Length member is in bytes (not characters) and does not include a Unicode-NULL terminator, if one
exists (a NULL terminator is not mandatory). The MaximumLength member is the number of bytes the
string can grow to without requiring a memory reallocation.
Manipulating UNICODE_STRING structures is typically done with a set of Rtl functions that deal
specifically with strings. Table 3-3 lists some of the common functions for string manipulation provided
by the Rtl functions.
Table 3-3: Common UNICODE_STRING functions
Function
Description
RtlInitUnicodeString
Initializes a UNICODE_STRING based on an existing C-string
pointer. It sets Buffer, then calculates the Length and sets
MaximumLength to the same value. Note that this function does
not allocate any memory - it just initializes the internal members.
RtlCopyUnicodeString
Copies one UNICODE_STRING to another. The destination string
pointer (Buffer) must be allocated before the copy and
MaximumLength set appropriately.
RtlCompareUnicodeString
Compares two UNICODE_STRINGs (equal, less, greater), specifying
whether to do a case sensitive or insensitive comparison.
RtlEqualUnicodeString
Compares two UNICODE_STRINGs for equality, with case
sensitivity specification.
RtlAppendUnicodeStringToString
Appends one UNICODE_STRING to another.
RtlAppendUnicodeToString
Appends UNICODE_STRING to a C-style string.
In addition to the above functions, there are functions that work on C-string pointers. Moreover, some of
the well-known string functions from the C Runtime Library are implemented within the kernel as well
for convenience: wcscpy_s, wcscat_s, wcslen, wcscpy_s, wcschr, strcpy, strcpy_s and others.
The wcs prefix works with C Unicode strings, while the str prefix works with C Ansi strings. The
suffix _s in some functions indicates a safe function, where an additional argument indicating
the maximum length of the string must be provided so the function would not transfer more
data than that size.
Never use the non-safe functions. You can include  to get errors for deprecated
functions if you do use these in code.
Chapter 3: Kernel Programming Basics
41
Dynamic Memory Allocation
Drivers often need to allocate memory dynamically. As discussed in chapter 1, kernel thread stack size is
rather small, so any large chunk of memory should be allocated dynamically.
The kernel provides two general memory pools for drivers to use (the kernel itself uses them as well).
• Paged pool - memory pool that can be paged out if required.
• Non-Paged Pool - memory pool that is never paged out and is guaranteed to remain in RAM.
Clearly, the non-paged pool is a “better” memory pool as it can never incur a page fault. We’ll see
later in this book that some cases require allocating from non-paged pool. Drivers should use this pool
sparingly, only when necessary. In all other cases, drivers should use the paged pool. The POOL_TYPE
enumeration represents the pool types. This enumeration includes many “types” of pools, but only three
should be used by drivers: PagedPool, NonPagedPool, NonPagedPoolNx (non-page pool without
execute permissions).
Table 3-4 summarizes the most common functions used for working with the kernel memory pools.
Table 3-4: Functions for kernel memory pool allocation
Function
Description
ExAllocatePool
Allocate memory from one of the pools with a default tag. This function is
considered obsolete. The next function in this table should be used instead
ExAllocatePoolWithTag
Allocate memory from one of the pools with the specified tag
ExAllocatePoolZero
Same as ExAllocatePoolWithTag, but zeroes out the memory block
ExAllocatePoolWithQuotaTag
Allocate memory from one of the pools with the specified tag and charge
the current process quota for the allocation
ExFreePool
Free an allocation. The function knows from which pool the allocation
was made
ExAllocatePool calls ExAllocatePoolWithTag using the tag enoN (the word “none” in
reverse). Older Windows versions used ‘ mdW (WDM in reverse). You should avoid
this function and use ExAllocatePoolWithTag‘ instead.
ExAllocatePoolZero
is
implemented
inline
in
wdm.h
by
calling
ExAllocatePoolWithTag and adding the POOL_ZERO_ALLOCATION (=1024) flag to
the pool type.
Other memory management functions are covered in chapter 8, “Advanced Programming Techniques”.
Chapter 3: Kernel Programming Basics
42
The tag argument allows “tagging” an allocation with a 4-byte value. Typically this value is comprised
of up to 4 ASCII characters logically identifying the driver, or some part of the driver. These tags can be
used to help identify memory leaks - if any allocations tagged with the driver’s tag remain after the driver
is unloaded. These pool allocations (with their tags) can be viewed with the Poolmon WDK tool, or my
own PoolMonXv2 tool (downloadable from http://www.github.com/zodiacon/AllTools). Figure 3-1 shows
a screenshot of PoolMonXv2.
Figure 3-1: PoolMonXv2
You must use tags comprised of printable ASCII characters. Otherwise, running the driver
under the control of the Driver Verifier (described in chapter 11) would lead to Driver Verifier
complaining.
The following code example shows memory allocation and string copying to save the registry path passed
to DriverEntry, and freeing that string in the Unload routine:
Chapter 3: Kernel Programming Basics
43
// define a tag (because of little endianness, viewed as 'abcd')
#define DRIVER_TAG 'dcba'
UNICODE_STRING g_RegistryPath;
extern "C" NTSTATUS
DriverEntry(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath) {
UNREFERENCED_PARAMETER(DriverObject);
DriverObject->DriverUnload = SampleUnload;
g_RegistryPath.Buffer = (WCHAR*)ExAllocatePoolWithTag(PagedPool,
RegistryPath->Length, DRIVER_TAG);
if (g_RegistryPath.Buffer == nullptr) {
KdPrint(("Failed to allocate memory\n"));
return STATUS_INSUFFICIENT_RESOURCES;
}
g_RegistryPath.MaximumLength = RegistryPath->Length;
RtlCopyUnicodeString(&g_RegistryPath,
(PCUNICODE_STRING)RegistryPath);
// %wZ is for UNICODE_STRING objects
KdPrint(("Original registry path: %wZ\n", RegistryPath));
KdPrint(("Copied registry path: %wZ\n", &g_RegistryPath));