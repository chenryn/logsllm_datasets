1
· д
⃗R3 .
Here we implicitly set H (δ ) = t1. B simulates Game1
A.
• If T ∈ Gp1p2p3, then
k,1 for
t1⃗k (α, ⃗h,⃗r )
⃗rk = д
1
· д
t2⃗k (α, ⃗h,⃗r )
2
· д
⃗R3 .
Here we implicitly set H (δ ) mod p1 = t1, H (δ ) mod p2 = t2.
By the Chinese Remainder Theorem, ⃗h mod p1 (rsep. α mod
p1 and ⃗r mod p1) and ⃗h mod p2 (rsep. α mod p2 and ⃗r mod
p2) are independent and uniformly distributed. Hence, the
generated by B is semi-
re-encryption key rkΠ0 .Xj→Πi .Yj
functional type-2, and B simulates Game1
k,2 for A.
Claim A.4.
1 ≤ k ≤ q1.
|G1
k,2AdvA (1λ ) - G1
k,3AdvA (1λ )| ≤ AdvSD2
B1
□
(1λ ),
Session 16: Applied Crypto 2ASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea670Proof. This proof is nearly the same as the proof of CLAIM A.3
except the way that B used to answer the k-th key query in Phase
1. While in this proof, B works as follows:
Phase 1: Case 2: j = k. B runs (⃗k; m2) ← Enc1(Π0.X , N ), picks
and com-
$← ZN , ⃗R
$← Z
$← MΠi
, τ1, τ2
, U
m2
N
m1
N
⃗r , ⃗r′ $← Z
putes
τ1⃗k (α, ⃗h,⃗r )
⃗rk = д
1
Πi . ⃗C ← Πi .Enc(Πi .PK, Πi .Y , U ).
· (W2W3)τ2⃗k ( ˆα, ⃗h,⃗r ) · T
⃗k (0, ⃗h,⃗r′) · д
⃗R3
Then B properly simulated Game1
if T = д
3 .
t3
t1
1 д
k,2 if T = д
t1
1 д
t2
2 д
3 or Game1
t3
k,3
Claim A.5.
1 ≤ k ≤ q1.
|G1
k,3AdvA (1λ ) - Gk AdvA (1λ )| ≤ qAdvCPAB1 (1λ ),
Proof. This proof is nearly the same as the security proof for
k,1, except
, B generates a semi-functional
$← MPKE,
the indistinguishability between Gamek−1 and Game1
that for the k-th key query to O0
type-3 re-encryption key for A, which works as follows.
K
N , δ0, δ1
Run (⃗k; m2) ← Enc1(Π0.Xk , N ), pick ⃗r , ⃗r′ $← Z n
computes
· д
R3
3 ,
⃗k (α,⃗r, ⃗h)
= д
1
· д
⃗k ( ˆα,⃗0,⃗0)
2
⃗k (0,⃗r′, ⃗h)
⃗rk = (Π0.SKXk · д
Π0.SKXk
1
Then B makes a challenge ciphertext query about (δ0, δ1, Πi .Y ) to
its challenger, gets the challenge ciphertext Πi . ⃗C, returns rkΠ0 .Xk→Πi .Y
= ( ⃗rk, Πi . ⃗C) to A.
□
)H (δ0) .
In Condition 2:
Corollary A.6.
|Gk−1AdvA (1λ ) - Gk AdvA (1λ )| ≤ AdvCMHB3
(1λ )+
(1λ ), 1 ≤ k ≤ q1.
2AdvSD2
B2
Game2
k,1 : For all key queries and re-encryption key queries to
O0
about Π0.Xj made by A, challenger C answers the j-th
K
query by generating the secret key as follows.
ˆαj ← ZN ,
Π0.SKXj ←
 SFKeyGen(Π0.Xj , Π0.MSK, Π0.PK, д2, 3, ˆαj ,⃗0)
j  k
Game2
k,2 : For all key queries and re-encryption key queries to
O0
about Π0.Xj made by A, C answers the j-th query by
K
generating the secret key as follows.
ˆαj ← ZN ,
Π0.SKXj ←
 SFKeyGen(Π0.Xj , Π0.MSK, Π0.PK, д2, 3, ˆαj ,⃗0)
SFKeyGen(Π0.Xj , Π0.MSK, Π0.PK, д2, 2, ˆαj ,
KeyGen(Π0.Xj , Π0.MSK, Π0.PK)
ˆ
⃗h)
ˆ
⃗h)
Claim A.7.
1 ≤ k ≤ q1.
|Gk−1AdvA (1λ ) - G2
k,1AdvA (1λ )| ≤ AdvSD2
B2
j  k
(1λ ),
□
□
Proof. This proof is nearly the same as the proof of CLAIM A.3
except the way that B used to answer the k-th key query in Phase
1. In this proof, B works as follows:
Phase 1: Case 2: j = k. B runs (⃗k; m2) ← Enc1(Π0.Xk , N ), picks
ˆ
⃗r
$← Z
⃗r ,
, ⃗R
m2
N
$← Z
m1
N
and computes
· T
⃗k (0, ⃗h,
ˆ
⃗r ) · д
⃗R3 .
Π0.SKXk
⃗k (α, ⃗h,⃗r )
= д
1
If A′s k-th query to O0
is about a re-encryption key, B runs
K
SFRE-KeyGen (Π0.PK, Π0.SKXk
, Πi .Y, Πi .PK), and returns
result to A. Notably, in Condition 2, Π0.SKXk
cannot de-
crypt the challenge ciphertext. Hence, B can always generate
Π0.SKXk
$← Gp1p3 or Gp1p2p3, we denote it as T = д
As T
3 . Then if T = д
t3
t2
t1
д
1 д
2 д
otherwise, B has properly simulated Game2
3 or T =
t3
3 , B has properly simulated Gamek−1;
□
t1
1 д
t1
1 д
t3
.
k,1.
Claim A.8.
1 ≤ k ≤ q1.
|G2
k,1AdvA (1λ ) - G2
k,2AdvA (1λ )| ≤ AdvCMHB1
(1λ ),
N
, α
$← Z n
д3, e (д1, д1)α , д
⃗h1 ), and sends it to A.
Proof. Let B be an adversary for the co-selective security of
the underlying encoding P. B is given (д1, д2, д3) as in co-selective
game and works as follows:
Setup phase: B picks ⃗h
$← ZN , computes Π0.PK = (д1,
Phase 1: For all OSetup(Πi ) made by A in this phase, B generates
the corresponding target scheme Πi via algorithm Πi .Setup(1λ )
→ (Πi .PK, Πi .MSK) (i ∈ [q]). Furthermore, B can also an-
swer those queries for oracles OK , and Ocor for scheme
Πi.
When A makes the j-th query to O0
, B works as follows.
• Case 1: j  k. B responds with a normal key for Π0.Xj
or rkΠ0 .Xj→Πi .Yj ← RE-KeyGen(Π0.PK, Π0.SKXj
, Πi .Y,
Πi .PK).
Challenge phase: A outputs messages M0, M1 ∈ GT along with a
challenge attributes Π0.Y∗. B then makes a query for Π0.Y∗
. B runs
to its challenger and receives back ⃗Tc = д⃗c (ˆs,
2
$← {0, 1}, ⃗s = (s, s1, s2,
(⃗c; w2) ← Enc2(Π0.Y∗, N ) , picks b
. . . , sw2) $← Z
, and computes the challenge ciphertext
ˆ
⃗h)
w2+1
N
Session 16: Applied Crypto 2ASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea671Π0.CT∗ = (C0, ⃗C1) as follows:
O0
K
keys.
C0 = e (д1, д1)αs · Mb
C1 = д⃗c (⃗s, ⃗h)
1
· ⃗Tc .
Phase 2: B does the same as in Phase 1, except that for all query to
, responds with normal secret keys or normal re-encryption
Guess phase: A outputs a guess b
′
′. If b
= b, then A wins.
Claim A.9.
1 ≤ k ≤ q1.
|G2
k,2AdvA (1λ ) - Gk AdvA (1λ )| ≤ AdvSD2
B2
□
(1λ ),
m1
N
Proof. This proof is nearly the same as the proof of the indistin-
k,1, except that for the
, B generates a semi-functional type-3 key.
,
m2
N
guishability between Gamek−1 and Game2
k-th query of A to O0
K
To do this , B runs (⃗k; m2) ← Enc1(Π0.Xk , N ) , picks ⃗r ,
$← Z
⃗R
and computes
$← Z
ˆ
⃗r
⃗k (0, ⃗h,
Π0.SKXk
⃗k ( ˆα,⃗0,⃗0) · T
· (W2W3)
⃗k (α, ⃗h,⃗r )
= д
1
If A′s k-th key query to O0
is a secret query about Π0.Xk, then
to A directly. Otherwise, runs rkΠ0 .Xk→Πi .Y ←
K
returns Π0.SKXk
SFRE-KeyGen(Π0.PK, Π0.SKXk
, Πi .Y, Πi .PK), and returns the re-
3 , B simulated Gk
encryption key rkΠ0 .Xj→Πi .Y to A. If T = д
and otherwise B simulated G2
□
ˆ
⃗r ) · д
⃗R3 .
t1
1 д
t3
k,2.
□
Session 16: Applied Crypto 2ASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea672