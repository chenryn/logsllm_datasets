# RCTF writeup#复旦六星战队
|
##### 译文声明
本文是翻译文章，文章来源：复旦六星战队@360安全播报
译文仅供参考，具体内容表达以及含义原文为准。
**author：复旦六星战队**
**sign in (MISC 100)  
**
源代码里面搜 key,找到个串,在键盘上划一划完事
**welpwn (PWN 200)  
**
读入明显过长,copy 会溢出,但是会被 截断,而写 ROP 的话,64 位避免不了有 。  
同时想要覆盖,输入前 16 位不能有 ,然后我们就覆盖到返回地址处,改为一个 pop4ret,这样跳过读入前面一部分不可控区域。  
然后就是个裸 ROP 了,不过由于没有 libc,故需要用下 dynELF 蛋疼下。
**Analysis nginx‘s log (MISC 50)  
**
这道题记录了 sqlmap 的注入过程,稍微 urldecode 几句大概就知道什么时候开始爆破了。  
找到开始爆破内容的地方,然后发现 sqlmap 对每一位最后都有一个 != 来结束,然后人工抓了一下数据,拼凑 flag。
**tank (REVERSE 200)  
**
修改地图,让敌方坦克不能动,然后就随便虐,然后玩通关即可。
**decode the file (CRYPTO 100)  
**
文件是 base64 编码过的,解码完搜索一下发现跟 github 上 的一个脚本一模一样。  
但是仔细研究一下可以发现,解码后再编码出来某几位有差别。  
想起来以前跟着一位交大大神打过一场俄罗斯人办的 olympic ctf 的比赛,当时也是一个base64编码的很长的文件,末位有所差别。
于是上gitub搜了一下writeup,找到一份 [http://delimitry.blogspot.com/2014/02/olympic-ctf-2014-find-da-key-writeup.html,](http://delimitry.blogspot.com/2014/02/olympic-ctf-2014-find-da-key-writeup.html%EF%BC%8C)  
直接拿博主的脚本跑了一下,结果就出来了……
**Flag system (MOBILE 100)  
**
首先 file 发现是 android backup 文件,在 Github 找到 [android-backup-extractor](https://github.com/nelenkov/android-backup-extractor)。
然后由于 android-backup-extractor 只支持到 android backup v3,所以要么改改源码,要么把Android
Backup文件的version bit改成3,都可以。  
然后要把源本 backup 文件里的 Compressed 的那个 bit 改成 1。
解出来后,发现 com.example.mybackup 的 apk,大概看一下发现是用来操作一个 sqlite 数据库的,然后是 sqlcipher
加密的。
改 smali 来读取数据的话感觉有点麻烦,要改好多,然后又不会写 android,于是乎还是搞到 key 自己解密数据库。
首先发现 key 是 apk 签名加密,于是算算即可。
然后读 db 的时候坑了,先是 brew install sqlcipher 了一个,然后解密失败,搞得还怀疑算错密钥了,又重新折腾半天。
后来又用 pip install 了一个,写了个 python 去读,发现成功了。
于是目测就是版本问题了,感觉甚是无语。
**crack me (REVERSE 300)  
**
一个基本的 crack me 程序,使用 ollydbg 动态调试,可以看到程序动态修改了自己的代码,然后跳到这段代码中。  
同时内存里会出现一个可疑字符串
22722272222227272222727a2222222222272222272222222222cfdceeeebb9fdbcdbbedfdede7ce9bebe0bb1e2ceab9e2bbbdecf9d8,我们的输入经过处理后与这段字符串进行比较。
这段动态修改后的代码大意如下:
1、首先将输入hex化
2、将参数传入某个函数,经过动态跟踪发现该函数求了一个kmp算法里面会产生的数字数组,然后将该其加上0x19后与传入的字符串异或
3、再将上一次的输出hex化
4、执行了某个比较复杂的置换,这一步的置换经尝试与我们的输入无关,所以在od中动态将输入字符串改为 x00x01x02…xnn 之后可以得到置换方式
所以只要将上述步骤逆着来一下就可以,1,3,4 都比较好逆,2 的关键代码如下:
    for ch in z:
        if ans!='':
            t=chr(ord(ch)^(cur+1+0x19))
            if ans[cur+1]!=t:
                cur=-1
            else:
                cur=cur+1
        t=chr(ord(ch)^(cur+0x19))
        ans+=t
但是发现这样得到的flag长得有点奇怪,虽然能过 crack me 但交上去不对,然后发现竟然是有多解的!!!
最后照着字符串修了一下得到正确 flag: *&*_U_g3t_the_CrackM3_f1@9!
**nobug (PWN 300)  
**
首先NX并没有打开。
先看了一遍 ida 反编译的 c,程序就是个 base64 解码输出,并没有发现什么问题。
然后 0x804a8a0 这个全局变量存的就是解码之后的串,可以用来存 shellcode。
然后队友告诉我这里有个坑:
    .text:08048BC0  push    offset sub_8048BD1
    .text:08048BC5  push    offset sub_8048B32
    .text:08048BCA  push    0
    .text:08048BCC  lea esp, [esp+4]
    .text:08048BD0  retn
其中 sub_8048BD1 只是用来修复栈的貌似。
然后 sub_8048B32 中又进行了一次base64解码,然后跟着个格式化字符串的漏洞。
栈里的信息可以泄漏,但是并不能泄漏任意地址。
于是使用栈里存的ebp。
    ------------------------------    returnadress    0x0804xxxx
    ebp2        ebp3
    ebp2+4      xxxx
    ........    ....
    ebp1-4      xxxx
    ebp1        ebp2
    ------------------------------
这是个栈,
我们的目的是修改 *return adress 为 0x804a8a0。
于是我们要有个指向 return adress 的指针。
现在我们要把 *ebp2 改为 return adress,我们又知道 *ebp1 == ebp2,
于是先修改 *ebp2,在修改 *return adress,就好啦。
**x xor md5 (CRYPTO 100)  
**
首先查看拿到的文件,发现最后面几行都差不多。  
根据题目名知道用异或,于是将那一行拿过来与每一行异或,得到了一个被很多 x00 隔开的字符串.  
尝试后发现将整个字符串再与 0x20 异或可以得到一个大部分正确的值。  
看了下不太正常的字符发现它们相差 0x10 位,于是猜测那一行里有一个字符不对,试验后得到
RCTF{We1l_d0n3_6ut_wh4t_i5_*key*}。
交上去发现不对,根据题目名知道这里异或的值是个md5值,破解一下得到原文 that,带入到上面的 *key* 中后就是正确的 flag。
顺便弱弱的问下出题人,为啥我们在开始那个字符弄错的情况下,拿到的错的 md5 竟然能正确解出 that,你们到底做了什么!!!
****
**weeeeeb3 (WEB 150)**
[Github](https://github.com/garzon/CTF-Writeups/tree/master/RCTF2015#weeeeeb3-web-150)
**asm (CRYPTO 200)  
**
拿到一个汇编代码和一段密文,汇编编译失败所以就直接看了下。  
首先有个 init 填满 128 个,然后encode看作 8 * 16 的方阵将其按从小到大与左边和上面(如果有的话)的元素异或,最后按 dfs
中序输出。
看懂之后直接逆着来一下,python shell过程如下,大概有不少冗余吧
    >>> c1
    '473c1e38740b4b0714640c4652333461546e7c7c544657452a030c220536103243336e0b53782d666374681e0b017d6917131d6b1243784d0b5c39754c7e7a727a763e300b1005062d1e6350107f5c705d200727606f494f397700715578333647153c3a0d3e7a1a305c1544246d4213712c7049490c384a3b61447b4a326046'
    >>> c2=c1.decode('hex')
    >>> c2
    'G0x0bx10x05x06-x1ecPx10x7f\p] x07'`oIO9wx00qUx36Gx15zx1a0\x15D$mBx13q,pIIx0c8J;aD{J2`F'
    >>> c3=''
    >>> for i in range(128):
        j=127-i
        t=j%8
        ch=ord(c2[j])
        if t!=0:
            ch=ch^ord(c2[j-1])
        if j>=8:
            ch=ch^ord(c2[j-8])
        c3=chr(ch)+c3
    >>> c3
    'G{"&Lx7f@LSLvr`jLR@^x1eFz!%s~GsRsuqgisQG]x1dEy $r}FrQrtpfhrPF\x1cDx'+q|EqPq{weoqWECx03Kx7f&*pcDpWpzvdnpVDBx02J~%)wbKwVwyukmwUKAx01I}$(vaJvUvxtjl'
    >>> for i in range(128):
        if i==0:
            continue
        if ord(c3[0])^i+1==ord(c3[i]^i):
            if 2*i", line 4, in 