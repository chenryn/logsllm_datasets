Accessing Storage and Logging
Applications that hold sensitive information are often of keen interest to an attacker. Gaining access to files
stored by applications or sometimes their logging information could reveal all kinds of jewels that may be useful
to an attacker.
File and Folder Permissions
As discussed extensively in Chapter 6, Android at its core is Linux. The “sandbox” provided for the segregation of
application data is largely based on file and folder ownership and permissions. Exploring the filesystem of a
device from an unprivileged application (like drozer) reveals that any installed application has fair visibility of
files and folders on the filesystem. Gathering basic information about the system it is running on and installed
packages is possible from purely looking at files on the filesystem.
To help you gain a better understanding of how applications can expose their files and folders through file
ownership and permissions, this section presents a few examples. Chapter 6 touched on this topic briefly, but
more thorough information is presented here.
Each file and folder belongs to an owner and a group. For example, take a look at a file that was explained in
Chapter 6, which resides at /data/system/packages.list:
root@android:/data/system # ls -l packages.list
-rw-rw---- system package_info 6317 2014-05-30 11:40 packages.list
The owner of this file is the system user and the group that it belongs to is package_info. You can change the
owner and group of this file using a tool named chown as the root user.
shell@android:/$ chown
Usage: chown [:GROUP]  [FILE2] ...
The permissions of a file can be tricky to understand at first, but are logical after you get the hang of them. Let
us look at an example of a newly created file:
u0_a259@android:/data/data/com.mwr.dz $ ls -l
-rwxrwxrwx u0_a259 u0_a259 4 2014-10-19 21:47 test
Each permission section of the output of the ls -l command has 10 characters:
The first is the special permission flag. This can be used to specify whether this entity is a directory
(indicated by d) or a symbolic link (indicated by l). A dash indicates that it is a regular file and other special
flags are not explored.
The next three characters indicate the read, write, and execute flags for the file’s owner. In the case of the
example given earlier on packages .list, these three characters show that the user system can read this file
and write to it.
The next three characters indicate the read, write, and execute flags for the file’s group. A number of users
can belong to a single group and these characters specify in what way this group of users can interact with
this file.
The next three characters indicate the read, write, and execute flags for all other users. These characters are
what is commonly referred to as world readable, world writable, and world executable attributes of the file.
A file that is world readable can be read by absolutely any context that the device has to offer, essentially
making it “public” to all applications. Similarly, world writable and executable files can be written to or
executed by all user contexts.
Protecting a file or folder on the filesystem requires careful setting of these values. Setting the permissions
incorrectly could inadvertently expose a file or folder. You can set permissions using a tool named chmod. This
tool accepts various formats but the most rudimentary format that you can provide for a file’s permissions is
comprised of three decimal numbers. Each decimal number represents the permissions for the file (or folder’s)
user, group, and other. This decimal value is calculated by adding the following values for each attribute:
4 = Read
2 = Write
1 = Execute
This means that you could set the packages.list file permissions given in the preceding example by using the
following command:
root@android:/data/system # chmod 660 packages.list
Different versions of Android assign different default file permissions to new files and folders written to disk by
an application. These file permissions depend on the umask of the system. The umask is a mask that is boolean
ANDed with file permissions 777 to get a default value; for example, if the umask is set to 0077 and this is
boolean ANDed with 0777, then the default value is 0700.
From Android 4.0 and higher, the following line in com.android.internal .os.ZygoteInit ensures that
applications have a default umask of 0077:
// set umask to 0077 so new files and directories will default to
owner-only permissions.
FileUtils.setUMask(FileUtils.S_IRWXG | FileUtils.S_IRWXO);
You can perform a simple test using the drozer shell to confirm this setting. The following was performed on an
Android 4.4 emulator:
u0_a59@generic:/data/data/com.mwr.dz $ echo test > test
u0_a59@generic:/data/data/com.mwr.dz $ ls -l test
-rw------- u0_a59 u0_a59 5 2014-05-31 06:13 test
Note that a file was created with the file permissions 600. On an Android 2.3 device, the same test was
performed with the following results:
$ echo test > test
$ ls -l test
-rw-rw-rw- app_109 app_109 5 2000-01-01 00:15 test
This shows the difference in the default umask between Android versions. This also shows that files written by
an application to its private data directory without your explicitly setting file permissions could expose these
files to other applications when they run on older devices.
When you assess an application, access the private data directory using a privileged shell and check all file and
folder permissions. In addition to this, review the code that handles this file write in order to understand
whether differences will exist in the file permissions between Android versions.
An interesting thing to note about world readable files is that their accessibility to other applications depends on
the permissions of the folder they reside in as well. They will be accessible to other non-privileged applications
only if the folder they reside in is world executable. To let you observe this in action, in the following example
we slightly modify the database.db file inside the Sieve application directory to make it world readable:
root@generic:/data/data/com.mwr.example.sieve/databases # chmod 777
database.db
root@generic:/data/data/com.mwr.example.sieve/databases # ls -l
-rwxrwxrwx u0_a53 u0_a53 24576 2014-07-23 16:40 database.db
-rw------- u0_a53 u0_a53 12824 2014-07-23 16:40 database.db-journal
These permissions make this file accessible from drozer:
u0_a65@generic:/data/data/com.mwr.dz $ ls -l /data/data/com.mwr.example.
sieve/databases/database.db
-rwxrwxrwx u0_a53 u0_a53 24576 2014-07-23 16:40 database.db
This is accessible because the databases folder is world executable:
root@generic:/data/data/com.mwr.example.sieve # ls -l
drwxrwx--x u0_a53 u0_a53 2014-07-23 16:38 cache
drwxrwx--x u0_a53 u0_a53 2014-07-23 16:38 databases
lrwxrwxrwx install install 2014-07-31 18:00 lib -> /data/
app-lib/com.mwr.example.sieve-1
If we remove this attribute using chmod 770 databases and attempt to access this file from drozer again, it is not
possible even though the file itself is world readable:
u0_a65@generic:/data/data/com.mwr.dz $ ls -l /data/data/com.mwr.example.
sieve/databases/database.db
/data/data/com.mwr.example.sieve/databases/database.db: Permission
denied
This is because a directory can only be entered if it is executable for the caller that is attempting to enter it. If
you are unsure, one of the easiest ways to test whether a file is actually exposed from another application is to
try to cat it from a shell in drozer.
REAL-WORLD EXAMPLE: DROIDWALL WORLD WRITABLE SCRIPT EXECUTED AS
ROOT
DroidWall is an application that uses iptables to control which applications can access the Internet. This
kind of control requires root access, which the application requests in a standard manner using su. A
vulnerability was discovered in the file permissions of the script that is executed to update iptables rules.
On June 8, 2012, Tyrone Erasmus disclosed this issue on the DroidWall issue tracker (see
https://code.google.com/p/droidwall/issues/detail?id=260). At the time of writing, which was more
than two years later, this vulnerability has still not been fixed and was present in the latest Play Store
version (1.5.7) of the application. This shows a lack of interest from the author and so it serves as an
example and an advisory of this issue.
In the ScriptRunner class in the application code, the following was found to be the root cause of the world
writable script:
Runtime.getRuntime().exec(new StringBuilder("chmod 777 ")
.append(abspath).toString()).waitFor();
The script was located at /data/data/com.googlecode.droidwall.free/app_bin/droidwall.sh, and the
permissive file permissions on this file are confirmed here:
u0_a65@maguro:/data/data/com.mwr.dz $ ls -l /data/data/com.googlecode
.droidwall.free/app_bin/droidwall.sh
-rwxrwxrwx u0_a69 u0_a69 2952 2014-07-26 22:55 droidwall.sh
To exploit this issue, a malicious application could write commands to this file multiple times per second
waiting for this script to get executed by DroidWall as root. When DroidWall executes the script as root, it
causes a prompt to appear from the root manager application requesting whether it should be allowed to
run. Figure 7.12 shows an example of SuperSU doing this.
Figure 7.12 SuperSU prompt requesting permission to run droidwall.sh as root
In the time that it takes for the user to grant access to DroidWall, the malicious application could
overwrite the newly generated droidwall.sh file with malicious commands. Here is a proof of concept
where this issue is exploited to run an nc listener that binds to sh and effectively provides a root shell on
port TCP/9999:
u0_a65@maguro:/data/data/com.mwr.dz $ echo "/data/data/com.mwr.dz/bin/
busybox nc -l -l -p 9999 -e sh -i" > /data/data/com.googlecode.droidwall
.free/app_bin/droidwall.sh
If the preceding command is executed in the time period where the root manager is asking to grant access,
then an nc listener is successfully spawned as root. The following shows that connecting to this port from
drozer yields a root shell:
u0_a65@maguro:/data/data/com.mwr.dz $ busybox nc 127.0.0.1 9999
sh: can't find tty fd: No such device or address
sh: warning: won't have full job control
root@maguro:/ # id
uid=0(root) gid=0(root) context=u:r:init:s0
The malicious application can then make use of this root shell to perform its evil deeds, whatever they
may be. This example shows that misconfigured file permissions can be especially dangerous in
applications that make use of root access.
File Encryption Practices
Developers who want to ensure a defense-in-depth approach to security will often encrypt any files that they
store on disk. Even though files placed in an application’s private data directory should not be accessible to
other applications or users, other vulnerabilities may expose them. Previous sections in this chapter have shown
many ways that an application developer may inadvertently expose files stored in their private data directory.
Encrypting these files is the solution to this problem and ensures that even if an attacker can get to these files
that he cannot decrypt them. However, you must consider some practical issues with encrypting files, such as
where do you store the key? Application developers can be inclined to hard-code the encryption key in source
code. However, this is never an acceptable solution as you have seen how easily an attacker could decompile an
application and read the source code in search of the key. A popular way that developers encrypt their
application’s SQLite databases is using SQLCipher (see http://sqlcipher.net/). The key can normally be
observed in the openOrCreateDatabase() function in the source. The example from the project’s website is as
follows:
SQLiteDatabase database = SQLiteDatabase.openOrCreateDatabase(
databaseFile, "test123", null);
Finding this function might lead you directly to the database password or you may have to trace where the input
of the password is coming from.
This is why examining the source code that involves writing a file to disk and then tracing it back to what classes
call that functionality is important. This function tracing exercise will lead you to finding how the data is
handled and encrypted. An anonymous user placed an amusing bash shell one-liner on Pastebin that can be
used to try to crack a database that uses SQLCipher. It is a completely blunt approach that could work if an
application is storing the password as a string inside the application. It is given here:
$ for pass in 'strings classes.dex'; do echo -n "[*] '$pass' ...";
C='sqlcipher encrypted.db "PRAGMA key='$pass';select * from
sqlite_master;"'; echo $C; done
This one-liner goes through all the strings discovered in the application’s classes.dex file and attempts to open
encrypted.db by using the string as a password for the database. This is a cheeky little trick that just may work.
On a rooted device you may also be able to simply hook the encryption key as it is used at runtime using a Cydia
Substrate tweak, which is discussed later in this chapter. However, a practical example on how to do this appears
on the MDSec blog (http://blog.mdsec.co.uk/2014/02/hooking-sqlcipher-crypto-keys-with.html).
Chapter 9 provides more information on recommended ways to encrypt files.
SD Card Storage
Android devices can handle built-in SD card storage as well as external ones that can be inserted into devices.
The permissions pertaining to the reading and writing to these SD cards was originally implemented
asymmetrically. Specifically, applications required the android.permission.WRITE_EXTERNAL_STORAGE permission
in order to write to the SD cards but no permission whatsoever to read from them. This is because typically SD
cards are formatted FAT32 for cross-compatibility with different operating systems, and FAT32 is not a UID-
aware filesystem.
Applications may write all kinds of information to the SD card that may be of interest to an attacker. Some
applications that generate large databases have been found to split them and make backups to the SD card.
You find the internal SD card mounted in the /sdcard/ directory, and if an external SD card is present it may
exist in one of a few places. This location is unfortunately not controlled by the Android project but rather the
device manufacturer. Two common locations of the external SD card are:
/sdcard/external_sd
/sdcard/ext_sd
Android 4.1 introduced a new permission for reading from the SD card defined as
android.permission.READ_EXTERNAL_STORAGE. This was set as optional in the initial Android 4.1 release of this
feature. However, this permission was enforced in Android 4.4, meaning that any application not explicitly
requesting this permission would not be able to read the SD card. This means that any application that writes
files to the SD card is exposing these files on all devices running Android 4.3 and earlier.
As an example of this, Sieve has a menu option to save the database onto the SD card. It is labelled as “Backup to
SD card.” When the user selects this option, a file is written to the SD card under
/sdcard/Android/data/com.mwr.example .sieve/files, which is shown here:
shell@android:/sdcard/Android/data/com.mwr.example.sieve/files $ ls -l
-rw-rw-r-- root sdcard_rw 173 2014-05-27 18:16 Backup (2014-05-
27 18-16-14.874).xml
Note this file’s permissions—in particular, the world readable attribute. This means that the possibility exists
for an unprivileged application like drozer to read this file:
u0_a65@android:/data/data/com.mwr.dz $ cat /sdcard/Android/data/com.mwr
.example.sieve/files/Backup*
Gmai
ltyroneGmailpass
word123
Attempting to read this same file on an Android 4.4 device results in a permission denial error because the
drozer agent that requested it did not hold the android.permission.READ_EXTERNAL_STORAGE permission.
REAL-WORLD EXAMPLE: WHATSAPP DATABASE STORAGE
On March 11, 2014, Bas Bosschert publicly blogged about a WhatsApp vulnerability that had been known
about for quite some time (see http://bas.bosschert .nl/steal-whatsapp-database/). The WhatsApp
application stored its database on the SD card at /sdcard/WhatsApp/Databases. This meant that any
application that had access to the SD card on a device was able to retrieve the WhatsApp databases. As
explained, on older versions of Android all applications have access to any file on the SD card. However, a
malicious application could have simply requested the android.permission.READ_EXTERNAL_STORAGE
permission to ensure that the exploit worked on more recent versions of Android as well.
The WhatsApp databases were encrypted with AES; however, a static key was used. A member of XDA
Developers developed the WhatsApp Xtract tool to make use of this static AES key to decrypt a provided
WhatsApp database. This tool is provided at http://forum.xda-developers.com/showthread.php?
t=1583021. Using the combination of how WhatsApp stored its files and because its databases were
encrypted with a static key, essentially the contents of WhatsApp messages were accessible to any
application on a device where it was installed.
Logging
Developers need logging functionality that they can use during development for debugging purposes. Android
provides a class named Log that can be used from within an application to place values in a central log. These
logs are accessible from ADB using the following command:
$ adb logcat
Applications with the READ_LOGS permission also have access to these logs. On versions of Android prior to 4.1,
an application could request this permission and have access to log entries from all applications. Examining a
set of Play Store applications quickly yields applications that log sensitive information; for example, credentials
typed into a login form when registering the application.
Since Android 4.1, the protection level on READ_LOGS was changed to signature|system|development. This is so
that no third-party application can obtain this permission and some system applications can access this
permission. The development protection level means that an application can request this permission and it will
be denied upon installation. However, you can enable it from ADB using the following command:
root@generic:/ # pm grant com.logging.app android.permission.READ_LOGS
Sieve contains logging vulnerabilities because it writes the entered database password and PIN to the log when
they are entered by the user. You can see the following two entries in logcat when the user enters the password
and pin, respectively:
D/m_MainLogin(10351): String entered: Thisismylongpassword123
...
D/m_ShortLogin( 4729): user has entered a pin: 1234
A malicious application that has the READ_LOGS permission, on a version of Android where this is possible, can
catch these entries.
Applications may use other means of logging instead of the Log class, such as writing to a file. In this case, you
would need to review the custom logging mechanism in source code and understand the exposure of this file.
Understanding where the log file is being stored and its file permissions is important in assessing its exposure
to other applications. Storing log files on the SD card in cleartext would almost certainly be a bad idea.
Misusing Insecure Communications
The power and functionality of most applications come from sending and receiving information from services
on the Internet. Installed applications provide users with rich native user interfaces that outperform the use of
web browsers on devices. Developers often design their applications to make use of HTTP/HTTPS in order to
easily integrate into existing infrastructure. However, the way that they implement this inside applications is
often less secure than web browsers and can contain typical mistakes. In some cases an application may also
make use of other communication protocols. This section explores commonly discovered flaws in
communication mechanisms.
Web Traffic Inspection
The best way to assess which web servers an application is communicating with on the Internet is to set up an
intercepting proxy. An intercepting proxy allows you to see the entire contents of web traffic passing between
the application and the Internet and also allows the modification of requests and responses.
NOTE
The modification of web traffic going to the web server is out of the scope of this chapter. Assessment
techniques for web services and web applications are another whole topic of security entirely and have
been the subject of many excellent publications. Note that this is an important part of assessing any