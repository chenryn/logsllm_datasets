the association information about the entities. Association
facts, in the form of Fi j
assoc(associ), propagates the association
information from rule at layer i to the rule at layer j. Also
note that there can be multiple role terms at any layer. Each
rule at the top layer has an association containing its role
term. With the association fact Fi j
assoc(associ) passed from a
parent rule i, the rule at layer j produces its association set
assoc j = associ ∪ RT j, where RT j is the set of role terms at
layer j, and pass it to the rule at the next layer k using the
association fact F jk
assoc(assoc j).
As persistent facts, association facts can instantiate un-
bounded number of instances of role terms at the next layer.
As shown in Figure 1, the top rule can be instantiated un-
bounded number of times producing unbounded instances of
ISVs. For each of the ISV instances, the association fact can
be passed down to the second rule to generate unbounded
number of enclave-binary instances. As a result, the second
rule observes a collection of enclave-binary instances under
each ISV instance forming an unbounded networks of entity
association. A similar procedure from second rule to the third
rule manifests into unbounded 3-layer networks.
The association network structure is crucial to the model-
ing of enclave thread, scope of variables, and owner-policies,
which will be detailed soon.
4.2 Enclave Threads
An enclave-process can be conﬁgured to support a single
enclave-thread or multiple concurrent enclave-threads. We in-
troduce a speciﬁc fact, ecall fact, in the form of Fecall(assocp)
where assocp is the association set of the enclave-process
layer rule that initiates this thread. An ecall fact can be ei-
ther linear (for single threaded execution) or persistent (for
multiple threaded execution).
Each enclave-thread is modeled as another sequence of
rules. The ﬁrst rule of the sequence takes in an ecall fact to
initiate the enclave-thread execution. Distinct facts, named as
thread facts, of linear type are designated between each pair
of consecutive thread rules. A thread fact from thread rule i
thread(assocp ∪{t},state)
to thread rule j is in the form of Fi j
578    30th USENIX Security Symposium
USENIX Association
Fr(isv)Fr(e)Fr(p)isv1e1p1p2e2pxpx+1isv2ISVLevel 1Enclave BinaryLevel 2Enclave ProcessLevel 3MSR RulesAssociation NetworkF12assocF23assocFigure 2: Example Tamarin code of two ecall E1 and E2. The dark and dashed arrow denote thread facts; the latter is used for
branched rules. The dotted arrow represent communication between rules A and B of E1 to a monotonic counter rule M.
where t is the enclave-thread role term created using Fr fact
at the very ﬁrst enclave-thread rule, and state records the state
of the enclave-thread during the thread execution. We omit
the enclave-thread role term for single threaded enclave for
model efﬁciency and keep only assocp as the association set.
As linear facts, thread facts enforce a single instance of
each thread rule forming a sequence, whose order is deﬁned
by the order of the thread facts that are passed from one rule
to another. Each thread fact between a consecutive pair of
thread rules is assigned a unique name to enforce a sequential
fact dependency (§2.2.5), resulting in a sequential execution
of thread rules.
We use sample enclave ecalls E1 and E2, as shown in
Figure 2, throughout this section to illustrate many primitives.
Particularly, E1 is modeled as a 3-layer association network,
with the top layer representing an ISV; the second layer
representing user, enclave-binary and the platform; and the
third layer representing the enclave-process. Similarly, E2 is
modeled as another only one layer association network with
role term p_id for enclave-process.
The sequences of rules A→B and P→Q_if→R/P→Q_else
model ecall E1 (single-threaded) and E2 (multiple-threaded),
respectively. The rules Q_if/Q_else are used for branching
(§4.8). As the very ﬁrst rule of both threads, the ecall
fact ECall at A1 and at P1, provides necessary association
information and thread data to start the thread. Further, the
thread fact Thread_AB (at A6, B1) in ecall E1, and the thread
facts Thread_PQ (at P7, Q_if1), Thread_QR (at Q_if7, R3,
Q_else1), and Thread_RS (at R7), in ecall E2, carry the
association information and thread data throughout the thread
rules.
For an enclave-thread conﬁgured to run as a single-thread,
it should also be allowed to start again once the single thread
ﬁnishes its execution. To restart the thread, the ecall fact will
be instantiated again in the end rule of the sequence. For
example, in Figure 2, the ecall fact at A1 in ecall E1 is pro-
duced again in the end rule B to allow unbounded sequential
threaded runs. On the other hand, multi-threading is supported
by default when the ecall fact is persistent.
4.3 Scope of Variables
In SGX processes, roughly, each variable has one of the two
types of scopes: local (exclusive to one thread) or global
(shared between enclave threads). In this section we describe
how we utilize the association network and enclave-thread
construction to model the scope of variables.
One way to model a local variable is to keep it in the term
state of the thread facts. It is local because a linear thread fact
can be instantiated only once and can be consumed only in
the following thread rule instance. For example, thread facts
Thread_PQ, Thread_QR and Thread_RS in the example ecall
E2 carry local_a and local_b as the local thread data.
A more generic way to model local and global vari-
ables is induced by pattern matching (§2.2.4) over associ-
ation set of thread facts. Speciﬁcally, we model local and
global variables in the forms of Flocal(assocp ∪{t},varl) and
Fglobal(assocp,varp), respectively. Here assocp is the associa-
tion set of an enclave-process while varl and varp are the local
and the global variables for an enclave-thread with role term t.
For illustration, consider two facts F1(assocp ∪{ti},varti)
produced at a thread rule with a thread instance ti, and
F2(assocpi,varpi) produced at the enclave-process layer rule
with enclave-process instance pi. If all the facts received at the
USENIX Association
30th USENIX Security Symposium    579
5. !CSME(owner, mcid, ~ptr_new,            valMC + ‘1’)6. MC_ret(owner, mcid, valMC + ‘1’, session)...3. Geq(valG, local_a)4. Read(..., ptrG)4. Unlock(~ptrL,  p_id)5. Free(..., ptrG)5. Verify tag6. Read(..., ptrG)4. Verify Sign4. Free(..., ptr)3. GenCert(platform, data)1. Thread_PQ(p_id, ~t_id, local_a, local_b)2. !GlobalVar(p_id, ptrG, valG)3. Fr(~ptrL)7. Thread_QR(p_id, ~t_id, local_a, local_b, ~ptrL)1. Thread_AB(pk_ISV, platform, mrenclave,           p_id, sk_user, pk_user, mcid, data)2. MC_ret(, mcid, valMC_rcvd,          ~session)5. Inc_MC_req(, mcid,              ~session)6. Thread_AB(pk_ISV, platform, mrenclave,          p_id, sk_user, pk_user, mcid, data)4. Ecall(pk_ISV, platform, mrenclave, p_id)1. Thread_PQ(p_id, ~t_id, local_a,                           local_b)2. !GlobalVar(p_id, ptrG, valG)7. Thread_PQ(p_id, ~t_id, local_a, local_b)1. Ecall(pk_ISV, platform,                  mrenclave, p_id)2. Fr(~session)3. In()1. Inc_MC_req(owner, mcid, session) 2. !CSME(owner, mcid, ptr, valMC ) 3. Fr(~ptr_new)AMBseal_key = h()1. !Ecall(p_id)2. Fr(~t_id)3. !GlobalVar(p_id, ptrG, valG)4. In()P4. Lock(~ptrL, p_id)5. Less(valG, local_a)6. Read(..., ptrG)Q_ifQ_else1. !GlobalVar(p_id, ptrG, valG)2. Fr(~ptrG_new) 3. Thread_QR(p_id, ~t_id, local_a, local_b,                                     ~ptrL)6. !GlobalVar(p_id, ~ptrG_new, local_a)7. Thread_RS(p_id, ~t_id, local_a, local_b)Recall E1ecall E2thread rule are modeled to pattern match with the variables
of the thread facts, the fact F1 can only be consumed in the
thread instances ti but not in any other thread with instances,
t j, due to the violation of pattern match constraint, i.e., the
inequality of thread identity instances ti (cid:54)= t j. Thus, the facts
F1 and F2 maintain local and global data, respectively.
When using global facts of linear type to model global vari-
able, a rule modeling a read or write operation on the global
variable requires the same global fact to be in both its premise
and its conclusion. If it is not produced in the conclusion, the
global fact will be consumed and removed from the system
state, resulting in the loss of the global variable.
However, having a global fact in both the premise and
conclusion is quite inefﬁcient as it creates a cyclic fact de-
pendency leading to increased veriﬁcation time. A more ef-
ﬁcient way of modeling global variables is through point-
ers. Pointer version of global facts is in the form of
Fglobal(assocp, ptr,varp). A pointer version of the global vari-
able partially avoids the dependency by requiring the global
fact to appear only in the premise for a read operation. Partic-
ularly, pointer version global fact is modeled as a persistent
fact is associated with a unique random value acting as a
pointer ptr to each declared or updated value of the variable.
Note that the persistent facts of the global variable with old
values persist in the system state and can be read even after
a persistent fact of the global variable with a new value is
produced later. To handle this, the following two restriction
axioms, 1 and 2, are introduced to preserve the consistent
read-write behavior of the global variable.
Restriction 1:
All Read ( owner , ptr , ...) @t1 & Free ( owner , ptr , ...) @t2
== > # t1  # t1 = # t2
The owner variable in Read and Free action-labels is
introduced for access control, i.e., which entities can access
the global variable. The owner variable is declared with a
tuple of identities as described in §4.5 and §4.6. Each ptr
variable instance points to one update of the global variable.
The restriction axiom 1 prohibits reading (action-label Read)
of old values after an update (action-label Free) while the
restriction axiom 2 ensures consistent updates of the same
global value. In summary, the restriction axioms enforce that
after the global variable fact is updated with a new pointer
and value, the facts with old pointers and values can neither
be read nor be updated.
4.4 SGX Keys Derivations
An enclave can use the EGETKEY instruction to derive secret
keys from the hardware, including sealing key for encrypting
sealed data, report keys for local attestation, and provisioning
key for remote attestation. ISVs may choose to enable key
sharing between enclave threads with the same MRSIGNER (an
ISV) or the same MRENCLAVE (enclave-binary).
To model the accessibility of the derived keys, the related
association set is used during the key derivation. Since the
association set is accessible only to the associated entities
(fact properties §2.2.2), it can also be used as secrets for
deriving secret keys. Hence, entities that are allowed to have
shared keys will have the same association set for deriving
the same keys.
Derived keys shared between enclave threads with the same
MRSIGNER on a platform can be modeled using the identities
from the association set, e.g., {plat f orm,isv}. Consider three
enclave thread instances, t1, t2, t3, under the same MRSIGNER,
i.e., the same ISV instance isvi and the same platform instance,
plat f ormi. The descendant threads will inherit the same asso-
ciation set and thus can derive the same keys. Within these en-
claves, the derivative values h()
and h() can be treated as shared re-
port key and sealing key, respectively, among enclave threads
t1, t2, t3. Central to the conﬁdentiality of the derived key is
to keep at least one of the identities (platform in this case)
secret in the derivation throughout the model.
The built-in hash operation h(.) is pure collision and pre-
image resistant. These properties ensure that the derive keys
are unique and cannot be interchanged across derived uses.
The variable scope principle described in §4.3 ensures that
the seal key with isvi cannot be accessed by other enclaves
with a different isv j.
4.5 Monotonic Counters
Intel provides monotonic counters (MC) to enclaves (through
PSE) to prevent rollback attacks. Once created, the values of
the MCs will only get increased monotonically. An MC can
be created, read, and incremented. Therefore, we model MC
by creating one rule for each operation. The enclave-thread
and MC communicate using a linear fact to establish a private
channel. To ensure one-to-one mapping of the request and
response MC counter we include a fresh variable session in
the communication fact.
The MC memory is abstracted with a dedicated fact in the
form of !FCSME (owner,mcid, ptr,counter_val) where owner
represents the owner policy deﬁned for MC, mcid is the
unique identity of the counter, the pointer ptr and the variable
counter_val hold the reference and value of the counter, re-
spectively. This fact is used only in the MC rules. In the MC
creation request, enclave-thread use identities from associa-
tion set to initiate !FCSME with desired owner policy. Across
the three MC rules, the same owner binding also ensures that
only one copy of CSME memory fact, !FCSME, is used to hold
consistent values of MC. The MC create rule returns a unique
fresh mcid for enclave thread to keep and use later for read
and increment requests.
580    30th USENIX Security Symposium
USENIX Association
We utilize the operator ‘+’ (multiset union) over symbols
from Tamarin’s built-in multiset package to model addition
operation over counters. The operator ‘+’ along with restric-
tion axiom logic, allows comparison (greater, less, equal) of
any two symbols. The increment operations on counters can
be modeled by rules that consumes a !FCSME with a counter
value x in its premise and produces another counter fact with
value x+‘1’ in its conclusion. The restriction action-labels
Read and Free, as described in §4.3, are used to enforce
counter to increase monotonically and maintain a consistent
counter value for read and increment operation.
For example, the rule M of ecall E1 (Figure 2) acts as Incre-
ment MC rule. The fact CSME(owner, mcid, ptr, valMC)
(at M2, M5) models the CSME memory. The owner-policy
term, owner, received in the private channel fact Inc_MC_req
(at M2) as  (at A5) binds the CSME
memory with the same signing key policy—one MC for all
enclave-threads with the same signing identity (pk_ISV) for
a given platform (platform).
4.6 Sealed Storage
With a sealing key, an enclave can store and retrieve the en-
crypted sealed data to and from untrusted storage via public
channel modeled by Out(.) and In(.) facts, respectively.
This allows the adversary to perform potential rollback attacks
if applicable. In ecall E1 of Figure 2, the received sealed data
is encrypted with the sealing key derived from the platform se-
cret and enclave-binary identities; this means the MREENCLAVE
sealing owner policy is used. To use MRSIGNER sealing policy,
the secret key can be derived with platform and ISV identities
as described in §4.4.
4.7 Locks
Following Kremer and Künnemann [37], we model locks
using restriction axioms. It introduces two action-labels,
Lock(pointer, association) and Unlock(pointer,
association) to the rules acquiring and releasing locks.
The ﬁrst variable in the action-label is a random pointer vari-
able which establishes a unique pairing of the lock and unlock
action-labels. The pointer is passed on with thread facts all
the way through ecall sequences of rules from lock-acquire
to lock-release actions. All instructions covered in these rules
are locked per owner instance. The second variable associates
the lock with entities that use the lock (e.g., a single enclave-
process layer lock among multiple threads).
The restriction axiom shown below utilizes time points,
random pointer variables, and entity identities to enforce the
correct lock behaviors. For the case when #t1 < #t2, the vari-
able ptr_1, ptr_2 represent pointers and owner represent the
owner entity identity. The constraint at line 3 prohibits over-
lapping of two different lock-unlock pairs. The constraint at
line 4 prohibits creating two lock-unlock pairs with the same
SGX Threat model
Thread and process instantiation
Permute or reorder ecalls
Pause enclave execution at instruc-
tion level
Read access to ecall returns; Read-
/Modify access to ecall or ocall ar-
guments and returns
Replay, modify of sealing, ecall or
arguments and returns
Realized by
Using a thread policy based on the
ecall facts (Fecall) in the ﬁrst en-
clave thread rule and binding ecall
sequences of rules using thread
facts (Fthread) (§4.2)
Modeling the ﬁrst enclave thread