**作者：[jweny](https://github.com/jweny)  
项目地址：**
[pocassist](https://github.com/jweny/pocassist) 是一个 Go (Golang)
编写的全新的开源漏洞测试框架，实现对poc的在线编辑、管理、测试。
如果你不想撸代码，又想实现poc的逻辑，又想在线对靶机快速测试，那就使用pocassist吧。
## 0x01 特性
### 规则体系
  * pocassist借鉴了xray优秀的规则体系。通过基于CEL表达式定义poc规则。
  * 完全兼容xray现有规则。
  * 不仅仅是xray。pocassist除了支持定义目录级漏洞poc，还支持服务器级漏洞、参数级漏洞、url级漏洞以及对页面内容检测，如果以上还不满足你的需求，还支持加载自定义脚本。
### 性能
高并发：支持批量运行poc，通过使用 `ants`实例化协程池，复用 goroutine ，节省资源，提升性能。
### 资源
小内存占用：使用内存复用机制。每个poc / 请求 / 响应 均使用`sync.Pool` 来缓存对象，减轻GC消耗。
### 易用
pocassist 为单二进制文件，无依赖，也无需安装，下载后直接使用。
## 0x02 Demo
![
](https://images.seebug.org/content/images/2021/05/44ba5899-080d-45e4-a6d5-8520e0b6008c.jpg-w331s)
### poc管理
poc在线编辑
![
](https://images.seebug.org/content/images/2021/05/b8ad425a-75a3-41d4-a782-f95331f95787.jpg-w331s)
poc在线运行
![
](https://images.seebug.org/content/images/2021/05/244beb36-c430-44e9-b6af-f5a9f8ca14d2.jpg-w331s)
### 漏洞管理
每个poc可以关联配套的漏洞描述。
![
](https://images.seebug.org/content/images/2021/05/cefb24c9-fa71-4711-93ab-8910cdc0ee1e.jpg-w331s)
## 0x03 快速开始
### 下载
直接下载相应系统构建的二进制文件即可，下载时选择最新的版本。
下载地址：
### 运行
pocassist分为两种模式：
  * web：提供web页面进行在线poc编辑和测试
  * cli：提供批量扫描功能
如使用默认配置，可直接运行二进制文件。这里以pocassist_darwin_amd64为例：
`./pocassist_darwin_amd64 -h`
#### 全局参数
pocassist 的全局参数是启动的基础参数，webserver 和 cli 都将继承全局参数。
    -h, --help            显示此帮助消息并退出
    -b, --database              选择后端的数据库类型，目前支持sqlite和mysql，默认sqlite
    -d, --debug           是否启用debug模式，debug模式将输出程序运行过程中的更多细节，默认false
    -v, --version         显示版本并退出
#### web端
pocassist的server模块是整个项目的核心，通过web实现在线poc编辑。
    -h, --help            显示此帮助消息并退出
    -p, --port                      server的启动端口，默认1231
运行web端，默认1231端口。：
`./pocassist_darwin_amd64 server`
自定义端口，如8888：
`./pocassist_darwin_amd64 server -p 8888`
默认账号密码：`admin/admin2`
#### cli
pocassist的cli模块主要是实现批量扫描功能：提供批量加载目标、批量加载poc进行检测。
`/pocassist_darwin_amd64 cli -h`
    -h, --help            显示此帮助消息并退出
    # 加载目标
    -u, --url                           单个url (e.g. -u https://github.com)
    -f, --urlFile               选择一个目标列表文件,每个url必须用行来区分 (e.g. -f "/home/user/list.txt")
    -r, --urlRaw                    从一个请求报文文件中加载单个测试目标
    # 加载poc
    -l, --loadPoc               poc插件加载模式
    -o, --condition             poc插件加载条件
注意：
poc插件有以下四种加载模式（`loadPoc`的值）：
  * single：加载单个插件
  * multi：加载多个插件，多个插件用逗号隔开
  * all：加载所有插件
  * affects：加载某一类插件。
`condition`是与`loadPoc`配套使用的，关系如下：
  * 加载模式为`single`时：`condition`为poc_id，如 `poc-db-001`
  * 加载模式为`multi`时：`condition`为多个poc_id，用逗号隔开。如 `poc-db-001,poc-db-002`
  * 加载模式为`all`时：无需指定condition`。
  * 加载模式为`affects`时：`condition`为数据库中plugins表的affects字段的值，也就是前端的`规则类型`。如只加载目录级漏洞的poc可指定为"directory"。目前有以下值：
directory / text / url / server / script / appendparam / replaceparam
## 0x04 个性化配置
下载的release中，会包含一个`config.yaml`文件。该文件中的配置项将直接运行pocassist在运行时的状态。
注意：
  * 在修改某项配置时，请务必理解该项的含义后再修改，否则可能会导致非预期的情况发生。
  * 当前pocassist正在快速迭代，不保证配置文件向后兼容。请保证使用相同版本release中pocassist二进制和配置文件。
### server运行配置
pocassist的webserver使用gin开发。在配置文件中可以使用以下配置修改gin的启动模式：
    serverConfig:
        # 配置jwt秘钥
      jwt_secret: "pocassist"
      # gin的运行模式 "release" 或者 "debug"
      run_mode: "release"                               
      # 运行日志的文件名，日志将保存在二进制所在目录
      log_name : "debug.log"                            
### HTTP配置
对于 web 扫描来说，http 协议的交互是整个过程检测过程的核心。
因此这里的配置将影响到pocassist在poc运行时进行 http 发包时的行为。
    httpConfig:
      # 扫描时使用的代理：格式为 IP:PORT，example: 如 burpsuite，可填写 127.0.0.1:8080
      proxy: ""
      # 读取 http 响应超时时间，不建议设置太小，否则可能影响到盲注的判断
      http_timeout: 10
      # 建立 tcp 连接的超时时间
      dail_timeout: 5
      # udp 超时时间
      udp_timeout: 5
      # 每秒最大请求数
      max_qps: 100
      # 单个请求最大允许的跳转次数
      max_redirect: 5
      headers:
        # 默认 UA
        user_agent: "Mozilla/5.0 (Windows NT 10.0; rv:78.0) Gecko/20100101 Firefox/78.0"
注意：
  * 使用代理：配置该项后漏洞扫描发送请求时将使用代理发送。目前pocassist仅支持http代理，因此配置代理时仅提供`IP:PORT`即可。
  * 每秒最大请求数：默认100，这里限制发包速度。通常是为了防止被ban才会将该值调的小一些。
### 数据库配置
pocassist支持sqlite和mysql两种数据库类型。
    dbConfig:
      # sqlite配置：sqlite数据库文件的路径
      sqlite : "pocassist.db"
      # mysql配置