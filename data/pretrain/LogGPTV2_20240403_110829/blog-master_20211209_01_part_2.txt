5. Start the PG cluster.  
6. As a superuser, run  
   CREATE EXTENSION pg_rewrite;  
Currently the extension only contains one function, partition_table(). It  
turns a non-partitioned table into partitioned one.  
partition_table()  
=================  
Usage  
-----  
Assuming you have a table defined like this  
    CREATE TABLE measurement (  
        id              serial,  
        city_id         int not null,  
        logdate         date not null,  
        peaktemp        int,  
        unitsales       int,  
        PRIMARY KEY(id, logdate)  
    );  
you need to create a partitioned table having the same columns and data types:  
    CREATE TABLE measurement_aux (  
        id              serial,  
        city_id         int not null,  
        logdate         date not null,  
        peaktemp        int,  
        unitsales       int,  
        PRIMARY KEY(id, logdate)  
    ) PARTITION BY RANGE (logdate);  
Then create partitions for all the rows currently present in the "measurement"  
table, and also for the data that might be inserted during processing:  
    CREATE TABLE measurement_y2006m02 PARTITION OF measurement_aux  
        FOR VALUES FROM ('2006-02-01') TO ('2006-03-01');  
    CREATE TABLE measurement_y2006m03 PARTITION OF measurement_aux  
        FOR VALUES FROM ('2006-03-01') TO ('2006-04-01');  
    ...  
Note that it's essential that both the source ("measurement") and destination  
("measurement_aux") table have an identity index - the easiest way to ensure  
this is to create PRIMARY KEY or UNIQUE constraint. Also note that the key  
(i.e. column list) of the identity index of the source and destination table  
must be identical. The identity is needed to process data changes that  
applications make while data is being copied from the source to the  
destination table.  
Also, unless you've set rewrite.check_constraints to false, make sure that  
the destination table has all the constraints that the source table has.  
Then, in order to copy the data into the destination table, run the  
partition_table() function and pass it both the source and destination table,  
as well as a new table name for the source table. For example:  
    SELECT partition_table('measurement', 'measurement_aux', 'measurement_old');  
The call will copy data from "measurement" to "measurement_aux", then it will  
lock "measurement" exclusively and rename 1) "measurement" to  
"measurement_old", 2) "measurement_aux" to "measurement". Thus "measurement"  
ends up to be the partitioned table, while "measurement_old" is the original,  
non-partitioned table.  
Limitations  
-----------  
Please consider the following before you try to use the function:  
    * Foreign table partitions are not supported.  
    * It's not expected that the table that you try to partition is referenced  
      by any foreign key. The problem is that the destination table is  
      initially empty, so you won't be able to create the foreign keys that  
      reference it.  
Configuration  
=============  
Following is description of the configuration variables that affect behavior  
of the functions of this extension.  
* rewrite.check_constraints  
Before copying of the data starts, it's checked whether the destination table  
has the same constraints as the source table, and throws an ERROR if a  
difference is found. The point is that due to (accidentally) missing  
constraint on the destination table, data that violate constraints on the  
source table would be allowed to appear in the destination table as soon as  
the processing is finished. Even an extra constraint on the destination table  
is a problem because the extension only assumes that all the data it copies do  
satisfy constraints on the source table, however it does not validate them  
against the additional constraints on the destination table.  
By setting rewrite.check_constraints to false, the user can turn off the  
constraint checks. Please be very cautions before you do so.  
The default value is true.  
* rewrite.max_xlock_time  
Although the table being processed is available for both read and write  
operations by other transactions most of the time, an exclusive lock is needed  
to finalize the processing (i.e. to process the remaining concurrent changes  
and to rename the tables). If the extension function seems to block access to  
tables too much, consider setting "rewrite.max_xlock_time" GUC parameter. For  
example  
	SET rewrite.max_xlock_time TO 100;  
tells that the exclusive lock shouldn't be held for more than 0.1 second (100  
milliseconds). If more time is needed for the final stage, the particular  
function releases the exclusive lock, processes the changes committed by the  
other transactions in between and tries the final stage again. Error is  
reported if the lock duration is exceeded a few more times. If that happens,  
you should either increase the setting or try to process the problematic table  
later, when the write activity is lower.  
The default value is 0, meaning that the final stage can take as much time as  
it needs.  
Notes on Concurrency  
====================  
1. The extension does not prevent other transactions from altering table at  
certain stages of the processing. If a "disruptive command" (i.e. ALTER TABLE)  
manages to commit before the processing could finish, the table processing  
aborts and all changes done are rolled back.  
2. The functions of this extension allow for MVCC-unsafe behavior described in  
the first paragraph of [1].  
Locking  
=======  
Since the table renaming requires an exclusive lock, applications won't be  
able to access the table that you try to process for very short time. However,  
if a significant amount of changes took place in the source table while the  
extension was waiting for the lock, the outage will take proportionally longer  
time. The point is that those changes need to be propagated to the destination  
table before the exclusive lock can be released.  
References  
==========  
[1] https://www.postgresql.org/docs/13/static/mvcc-caveats.html  
Authors  
=======  
The extension was developed by CYBERTEC PostgreSQL International GmbH  
(https://www.cybertec-postgresql.com). Please use this page to report issues:  
https://github.com/cybertec-postgresql/pg_rewrite/issues  
如果你想100%成功, 可以修改一下这个部分, 例如sleep后再重试, 或者terminate lock再重试.  
```  
	/*  
	 * Try a few times to perform the stage that requires exclusive lock on  
	 * the source relation.  
	 *  
	 * XXX Not sure the number of attempts should be configurable. If it fails  
	 * several times, admin should either increase partition_max_xlock_time or  
	 * disable it.  
	 */  
	source_finalized = false;  
	for (i = 0; i < 4; i++)  
	{  
		if (perform_final_merge(estate, mtstate, proute,  
								relid_src, indexes_src, nindexes,  
								rel_dst, ident_key, ident_key_nentries,  
								cat_state, ctx, partitions, conv_map))  
		{  
			source_finalized = true;  
			break;  
		}  
		else  
			elog(DEBUG1,  
				 "pg_rewrite exclusive lock on table %u had to be released.",  
				 relid_src);  
	}  
	if (!source_finalized)  
		ereport(ERROR,  
				(errcode(ERRCODE_OBJECT_IN_USE),  
				 errmsg("pg_rewrite: \"max_xlock_time\" prevented partitioning from completion")));  
```  
#### [期望 PostgreSQL 增加什么功能?](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
#### [类似Oracle RAC架构的PostgreSQL已开源: 阿里云PolarDB for PostgreSQL云原生分布式开源数据库!](https://github.com/ApsaraDB/PolarDB-for-PostgreSQL "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")