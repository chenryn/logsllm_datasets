位是计算机内部数据储存的最小单位,是一个二进制位。
**字节 (byte)**
字节来自英文 Byte, 音译为 "拜特", 习惯上用大写的 "B" 表示.
字节是计算机中数据处理的基本单位.
计算机中以字节为单位存储和解释信息, 规定一个字节由八个二进制位构成, 即 1 个字节等于 8 个比特 (1Byte=8bit) .
用字节处理数据时，如果数字小于存储数据的字节数，那么高位用 0 填补，高位和数学中的表示一样，左侧表示高位，右侧表示低位。例如 100111 只有 6 位，高位需要用 0 填充，填充后是 00100111，占一个字节，如果用 16 位表示就是 0000 0000 0010 0111 占两个字节
一般称 32 位和 64 位计算机指的就是处理位数，32 位一次可以表示 4 个字节，64 位一次可以表示 8 个字节的二进制数。
**字**
计算机进行数据处理时, 一次存取、加工和传送的数据长度称为字 (word) . 一个字通常由一个或多个 (一般是字节的整数位) 字节构成. 例如 286 微机的字由 2 个字节组成, 它的字长为 16;486 微机的字由 4 个字节组成, 它的字长为 32 位机.
- WORD 字 16BIT 2字节
- DWORD 双字 32BIT 4字节
---
### 存储单元
存储器被划分成了若干个存储单元，一个存储单元可以存储一个字节，也就是 8 个二进制位，每个存储单元是从 0 开始顺序编号。
对于一个有 128 个存储单元的存储器
- 容量为 128 字节
- 编号为 0~127
每个单元由两部分构成
- 一个是单存储元的内容,用十六进制表示
- 一个是存储单元的地址,用十六进制表示
---
### 总线
CPU 对存储器的读写通过 3 种总线完成.
- 地址总线
- 数据总线
- 控制总线
![](../../../assets/img/Develop/计算机基础/计算机组成/2.png)
CPU从编号为2的地址中读取内容，通过控制总线发出读写命令，地址总线确认地址为3，找到后，数据总线传输内容为 12
![](../../../assets/img/Develop/计算机基础/计算机组成/3.png)
**地址总线**
地址总线的宽度决定了 CPU 的寻址能力
一个 CPU 有 N 根地址线，则可以说这个 CPU 的地址总线的宽度为 N。这样的 CPU 最多可以寻找 2 的 N 次方个内存单元 (字节)
例如: Intel 8086 是 20根，则寻址能力为 2^20 次方个内存单元(字节) 即 1048576=1M
**数据总线**
数据总线的宽度决定了 CPU 与其他器件进行传送时一次数据传输的容量
一根数据总线可以传输一个 0 或 1, 即 1bit
例如: Intel 8086 是 16根，则一次可以传输的数据为 2B
**控制总线**
控制总线的宽度决定了 CPU 对系统种其他器件的控制能力
---
### 磁盘缓存
每次内存都需要从磁盘中读取数据，必然会读到相同的内容，所以一定会由一个角色负责存储常用的内容，这种称为缓存技术，磁盘缓存指把从磁盘中读出的数据存储到内存的方式，这样一来，当接下来需要读取相同的内容时，就不会再通过实际的磁盘，而是通过磁盘缓存读取。
windows操作系统提供了磁盘缓存技术，但对大多数用户来讲是感受不到磁盘缓存的，并随着技术演进，磁盘缓存实际的使用也越来越少。
---
### 文件系统
**ext4**
ext4 是目前 Debian/Ubuntu/Mint 的默认文件系统，比较常见，它其实是第 4 代扩展文件系统 (Fourth extended filesystem), 是 ext3 的延续。
- ext4 对大文件有着比较好的支持，最大支持 1 EiB 的卷，标准 4Kib 块大小下支持单文件最大 16 TiB
- Extents
- ext4 兼容 ext3, ext2
- ext4 允许对一些文件预留空间 (Persistent pre-allocation)
- Delayed allocation
- 无限制的子目录，Linux 4.12 及以后 largedir 功能使用 3 级 HTree，允许在单目录下拥有大约 6 百万条目
- ext4 使用日志校验和来提高稳定性
- ext4 使用纳秒来管理 timestamp
- Linux kernel 4.1 后加入了透明加密
- ext4 支持默认写屏障，确保了即使写时断电，文件的元信息可以正确写入磁盘
**ZFS**
ZFS 是由 Sun Microsystems 设计的组合文件系统和逻辑卷管理器。ZFS 具有良好的扩展性，可以有效防止数据损坏，对高容量有着良好支持，可以有效压缩数据，有快照功能，有 copy-on-write 特性，支持完整性检查，支持 RAID-Z。ZFS 最初是 Sun 作为 Solaris 内部开发的闭源软件，2005 年跟随着 Solaris 开源。2010 年，Sun 被 Oracle 收购，ZFS 成为 Oracle 的注册商标，Oracle 停止为新的 OpenSolaris 和 ZFS 开发发布更新的源代码，从而有效地将 Oracle 的 ZFS 恢复为封闭源代码。作为回应开源社区建立了 illumos 项目，维护 Solaris 开发，并在 2013 年成立 OpenZFS 继续开源版本的 ZFS 开发。OpenZFS 被广泛用于类 Unix 系统中。
- ZFS 为数据长期存储和扩容而设计
- ZFS 支持存储池，可以建立跨越磁盘的存储池
- copy-on-write, ZFS 文件系统中，新信息会被写入到不同的 block 中，写完成后元数据将更新指向为新信息，这个机制可以保证写过程中即使系统崩溃，旧数据也会保留，这意味着系统崩溃后无需执行 fsck.
- 数据和元数据分开存储，用以校验整个文件系统，在文件发生损坏时及时修复
- 在某些情况下，如果发生错误或不一致，将自动回滚文件系统和数据的最新更改。
- ZFS 有自己的 RAID，RAID-Z 实现
- ZFS 文件系统能够提供最大 16 EiB 文件大小，最大 256 万亿 ZiB 存储
**btrfs**
btrfs 是 b-tree 文件系统的缩写，最初是 Oracle 为 Linux 而设计，遵循着 copy-on-write 原则。btrfs 旨在解决 Linux 文件系统中缺乏 pooling，快照，校验和和完整的多设备跨接的问题。
**XFS**
XFS 是一个高性能 64 bit 日志文件系统， 1993 年由 Silicon Graphics, Inc (SGI) 公司创建，原来是作为该公司 IRIX 操作系统 5.3 版本后的默认文件系统，后在 2001 年被移植到 Linux Kernel，XFS 被大多数的 Linux 发行版支持，XFS 适合用来处理大文件。
---
### 磁盘物理结构
磁盘通过将物理表面划分为多个空间来使用，划分的方式有两种：可变长方式和扇区方式。
可变长方式将物理结构划分成长度可变的空间，扇区方式将磁盘结构划分成固定长度的空间。
一般 windows 都是使用扇区方式，扇区中，把磁盘表面分成若干个同心圆的空间就是磁道，把磁道按照固定大小的存储空间划分就是扇区。
![](../../../assets/img/Develop/计算机基础/计算机组成/26.png)
扇区是对磁盘进行物理读写的最小单位，windows 中的磁盘一般是一个扇区 512 个字节，但在逻辑方面对磁盘进行读写的单位是扇区整数倍簇，根据容量的不同，1 簇可以是 512 字节 (1 簇 = 1 扇区)、1KB(1 簇 = 2 扇区)、2KB、4KB、32KB(1 簇 = 64 扇区) 等，簇和扇区的大小是相等的。
不管是硬盘还是软盘，不同的文件是不能存储在同一簇中的，否则会导致只有一方的文件不能删除，所以不论多小的文件，都会占用 1 簇的空间，所以的文件都会占用 1 簇的整数倍的空间。