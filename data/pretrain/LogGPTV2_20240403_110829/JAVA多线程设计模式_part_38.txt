(8-8 sT)  1pm @20 pziuoypuhs (7)
即使是在范例程序也有问题-
{4）使用Thread.sfeep 来代替wait 时(Lisr 3-10)
如果是范例程序这样的程序是没有问题，如果是一般程序的话就不行了。
(3）将try.catch 写在 whife 之外时(List 3-9)
使用这个类会降低安全性，
耐且，原本queue 字段的 LinkedList 类就不是ThreadSafe。
●调用出rcmoveFirst
·条件的测试
这时，下列的处理会跑出 synchronized 段之外。
就范例程序的情况而言是没有问题，但是一般的程序就不是如此了。
-定要重新再确实检查Guarded 条件才行。
removeF xs:的调用
条件的测试
线程1
图A3-2两个线程的处理交错
removeFirst 的调用
条件的测试
线程
练习问题的解答
，要继续进行处
369
---
## Page 384
对方的两只鹦鹉你瞪我、我瞪你一样，
介绍的死锁相互比较。
A3-3这样（另有其他解决方弘）
就得到这个请求。
问题3-5的解答
环”的情况之一。
情况，我们就称之为livelock。
件而己，处理无法有所进展。像这样，虽然在运行，但是实际上只是在原地踏步的
睡下去。线程就·直重复“醒来→测试→再睡下去”，而在此当中直想执行
100 毫秒醒来一次来对Guard条件做测试：但是Guard 条件为假，所以线程会再沉
顺便-一提，Alice与Bobby 在陷入死锁时，
-次Guard条件的线程并不会停止处理。不过，也由于只是不断定期测试 Guard 条
这样的话，两个线程之间传递的数据中，Hello之后会跟上很多个惊叹号，像图
解决方法之··如List A3-2所示。List A3-2中，
本例也可说是练习问题I2-1中出现的“在 synchronized 方法中不断进行无穷循
public class Main f
因此，使用这个类就会发生生存性不佳的问题。在本例中，约100毫秒就测试
这样一来，Alice与Bobby两个就卡在一起而动弹不了（死锁）。这就好像模仿
List A3-2
之所以不动了，是因为Alice; Bobby 的两个线程发生死锁的缘故。
Alice 任 getRequest 中等待Bobby 的 Request 而 wait，
public statie void main(string[l args) ↑
RequestQueue requestQueuel = riew RequestQueue();
new TalkThread {requestQueue2, requestQueuel, "Bobby") .start ();
new TalkThread(requestQueuel, requestQueue2, "Alice") .start ();
requestQueuel,putRequest (new Reguest("Hello"));
()anenoisanbay meu - Zenanorsanbat ananoisanbay
一开始就将“种"加进去以解决它(Main.java)
为正在 wait，并非在释放锁定之故。请与练习问题1-6中
2人都没有requestQueuel或
·开始先在 rcquestQueuel将名
---
## Page 385
调用时，没有顾虑到异常InteruptedException 的缘故。
问题3-6的解答
就跳出 for 语创之外。
Lst A3-3
调用出 intcrrupl 方法后，线程还是不停下来，是因为 sleep 方泓与 wait方法在
plblic class RequescQueue
Bobby:END
Bosby pt=s
此外，修改 ClientThread 类与 ServerThread 类，在 InterruptedException 被抛出
Alice:ENL
Alire puts
Alice gets
（中间部分省略)
A_ia0
Alii:e
Bobby
Bohhy gets
Bobny:BEGIN
Al:ce pllts l
Alite gel.s
ALice:BEGIK
import java.util.Lirkedlist;
pLblic synchronized void putRegreat(Rcqucst request) {
pubic sy:nchrorized Reqrest getRequest () throws IrterruptedException ↑
private final Linkedlisl queue = new LinkedList();
ge:ta
put3
pLts
notifyAil();
qleue.addLast(request);
relurn (Rcquest)queue.removerirst();
l Reguest Hellc!!!!!!!!!!
weil();
[ Reuest He!o!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
(RequestQueue.java)
没有顾虑到异常 InterruptedException 的 RequestQueue类
Reguest
Request
-sorbun
Reques.
Relest
Rcqlest.
Hello!!!
He_lo!!
Hello!!
Hellc!
 Hellc!
Hr.二1
图A3-3执行结果
一再加上一个惊叹号再返回（共3个)
—Alice接爱它
←再加上一个惊叹号再返回[共2个)
←Bobb接受它
·加上一个惊叹号再返回
一一开始Alice就取了“种"
练习问题的解答
3
---
## Page 386
public class Serverlhread extenis Thrcad
inport java.util.Rardom;
getName() + " requests " + reguest);
Ls1 A3-5
1 (peas fuo
public class ClientThresd extends Threai ↑
impcrt java.u.il.Rardem;
tist A3-4
pubiic void run()
private
private
pubiic vcid run()
ptblic ClientThread(Reques-Qucue
private RequestQueue requestQreue;
private Randor: random;
this.random = new Random(seed):
this.requestQueue = requestQuece;
super(name);
try
this,randon - new Random(seed);
this.requestQreue
super(rame);
carch (inlerruptedexceptior e) {
for （int i = 0; i < 10000; i++) 
 RequestQueue requestQueue;
Ra:don ranaom;
(ServerThread.java)
没有顾虑到异常 InterruptedException 的 ServerThread 类
for (int i = 0: i < 100co; ++) {
没有顾虑到异常 IntemuptedException 的 ClientThread 类(ClientThread.java)
 System.cut.printlr: (Threaa,currenzThread().
Request. request - requescQueue.getRcquesl();
Thread.sieep(rardon.nexcInt(100o));
regles'Quece.put.Request(request);
Reqresr request - rew Request("No." + i);
requestoreue;
 requestQueue, String name,
---
## Page 387
问题4-1的解答
补充一点：如果忘了修改RequestQueue 类会怎么样呢？
第4章
模式已介绍。
无法正常结束。
也就是说：这个程序每执行几次就会有一次（可能几十次或几百次才发生一次
在wait，程序就不会结束，这是因为没有顾虑到InterruptedException的缘故。
线程正在 sleep．程序就可以正常地结束，但是，如果 interupt被调用时线程正
关于如何确实地，优雅地让线程结束，我们在第10章的Two-PhaseTermination
×（2）将 synchronized 全部删除，将changed字段改成valatil，还是可以执行
X（1）具有 SaveThread 能调用出 save 方泓。
假设我们没有修改 RequestQueue类这样的话，如果 interrupt 方法被调用时
让我们来想想如果忘了修改RequestQueue 类会怎么样？
getName() + " handles " + request);
SaveThread 与 ChangerThrcad 都可以调用出 save 方法;
相间的操作。
Bobby
Alice
Behby
Alice
Boiby
Alice
Bobby
Aiice
前略】
Catch (TaterruptedExceplion e){
cailirg interrupt
hardles i Request No.17
requests 
/handies
rardles [ Reguest Nc.15
hardles i Request No.l4 ]
rcqucsta l Reguest. No.l4 ]
reguesls
requests
Thread.sleep(random.nextIrt(iooc));
[ Reqlest No.l
:Request No.16
“Request. No.15
图A3-4执行范例
一程序在此结束
练习问题的解答
373
---
## Page 388
+
问题4-2的解答
(1）附加上调试输出(Debug Print)
savc 方法当中 return 的部分是在halk，因此我们将调试输出置丁balk 之前。
将修改过（1）与（2）的Data类分别显示在List A4-1与List A4-2。
pubulc class Data
import
List A4-1
import
mport
0
×（3） changc 方法的话，一定要先指定到 content 字段，再将 changed 设为 true。
！！如果数据属性变动过，就保存到文件中
private Strirg filename;
doSave方法不会同时被两个线程所调用，
save方法是 sychronized，private 的 doSave 方法只会被 save 方法调川。因此，
（5）doSave方法：不会同时被两个线程所调用。
但是，出丁 doSave 方法只能从 synchronized方法来调用，因此来到 doSavc
publie synchronized void change(string newContert) !
方法的线程--定有this 的 lock。
（4）doSave方法不是 syhchronized方法，
详情请参考附录B“Java 的内有模式”，
所以不会变战相同操作。即使设为volatile，也不会进行线程的共享互斥，
privale string cortent;
change 万法、save 方法都不会变成 Single Thread Execution 模式(第1章)，
/！改写数据属性
public Data(string fiiename,
private boolean changed
changed = true;
content = newcontent;
this.changed - true;
this.content = content;
this.filename = fiiename;
java.io.Writer;
java.io.loexceprion;
加上调试输出的 Data 类(Data.java)
String content) (
/！如果变动属性没有被保存就是tre
！
数据属性
保存的文件名称
---
## Page 389
calls dosave, cortert -
private void dosave() throws IoException
！！数据的属性实例保存到文件中
System.out ,prin.ln(Thread.clrrentThread() .getName ()
writer.clese();
writer.wrice(content);
Writer writer - mew FileWriter(filename);
changed - false;
dosavefl;
if
（以下省略，按CTRL+C结束）
ChangerThread baiks
SaverThread calls doSave, content =
ChargerThread calls dosave, content. = No.81
SaverThread balks
ChangerThread balks
SaverThread calls doSave,
ChangerThread calls doSavc, content - No.79
ChangerThread balks
ChangerThread balks
E5
（中略）
Sa
ch..
ChargerThread b
ChargerThread
(hangerlhread balks
SaverThread calis dcsave.
ChangerThread calls
ChangerThread calls
ChanqerThread balks
System.oLt .print ln (Thread.currertlhread ) getName(1 + " baiks");
{!chalged) {
verThread calls doSave:
angerThread ca-ls
resurn,
verThread calls doSave,
calls
ba_ks
图A4-1执行范例
+ ccntent);
'aAesop 
dosave,
ioszve,
 aoSave,
content - No.80
content = No.78
cont.enr. = No.5
cortert =
 content - No.5
content - No.4
conzent - No.2
content = No.l
No.82
No.3
zuouous cu //
练习问题的解答
+
5
---
## Page 390
synchronized
pubiic class Data
import
import java.io.loException;
List A4-2
这样的话，就会如执行范例（图A4-2）般被重复写入：
删除 synchronized，在将changed 标识设为false之前，先 sleep 约100 毫秒。
" balks");
irmport.
 public synchronized void save () throws IoException ( // not
！！数据一旦更改就要保存起来
public syrchronized void change(String newContent) {
//改写数据属性
public Data(String filename,
private
private String fiiename:
content - newGontent;
this.filename = filename;
java.io.Writer;
1f
java.io.Filewrirer;
doSaveI):
changed = true; 
this.changed -
try{
:his.content 
Icatch (InterruptedException e)
(!changed)
 returr!
 System.cut.priritln(Thread.currentThread() .getName ()
Thread.sleep.sleep(l00);
 boolear chaniged;
加上侦错打印，将 synchronized 删除的 Data 类(Data.java)
 trué;
 content;
//如果更改的属性没有被保存的话就是=rue
数据的属性
！保存文件的名称
String content) (
---
## Page 391
问题4-3的解答
如图A4-3所示。在此,我们将changed字段变成true的范围以灰底显示。Changed
（以下省略。按CTRL+C结束）
SaverThread cails dosave,
ChangerThread balks
Saverlhread calls doSave,
Changerlhread calls dosave,
ChargerThread calls dcSave,
SaverThread calls doSave,
ChangerThread balks