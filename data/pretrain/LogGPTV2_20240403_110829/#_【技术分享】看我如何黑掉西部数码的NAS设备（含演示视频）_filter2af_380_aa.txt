# 【技术分享】看我如何黑掉西部数码的NAS设备（含演示视频）
|
##### 译文声明
本文是翻译文章，文章来源：exploitee.rs
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
翻译：[兴趣使然的小胃](http://bobao.360.cn/member/contribute?uid=2819002922)
预估稿费：200RMB
投稿方式：发送邮件至[linwei#360.cn](mailto:PI:EMAIL)，或登陆[网页版](http://bobao.360.cn/contribute/index)在线投稿
**传送门**
[**【技术分享】动手教你来挖西部数据NAS的漏洞**](http://bobao.360.cn/learning/detail/3611.html)
**  
**
**一、前言**
在我们的安全研究工作中，有时候是我们主动去找设备安全漏洞，有时候是设备自动找上我们。今天我们要谈的是后一种情况：关于我们在西部数据NAS（网络附加存储，Networked
Attached Storage）设备方面的安全研究工作。
去年年中时，我（Zenofex）需要为我的Plex媒体播放器寻找一款支持硬件解码的NAS设备。经过一番研究，我最终订购了西部数据的一款NAS：MyCloud
PR4100。这款设备满足我的一切需求，同时也得到了一个朋友的强烈推荐。在将NAS添加到我的网络环境中、首次访问设备的管理页面后，我对在缺乏安全审计下将新设备添加到网络这一过程感到越来越厌烦。因此我打开NAS的SSH接口，研究一下其内部的Web服务器的工作机制。
**二、登录认证绕过漏洞**
我找到的第一个漏洞是登录认证绕过漏洞，这个漏洞存在于一段通过cookie或PHP
session变量实现用户登录检查的代码中。使用cookie进行验证并不一定是不好的，但在西数MyCloud登陆界面上这种方法实现上存在漏洞。仔细阅读以下代码：
代码文件：/lib/login_checker.php
    function login_check()
    {
            $ret = 0;
            if (isset($_SESSION['username']))
            {
                    if (isset($_SESSION['username']) && $_SESSION['username'] != "")
                    $ret = 2; //login, normal user
                    if ($_SESSION['isAdmin'] == 1)
                            $ret = 1; //login, admin
            }
            else if (isset($_COOKIE['username']))
            {
                    if (isset($_COOKIE['username']) && $_COOKIE['username'] != "")
                    $ret = 2; //login, normal user
                    if ($_COOKIE['isAdmin'] == 1)
                            $ret = 1; //login, admin
            }
            return $ret;
    }
上述代码中包含一个login_check函数，为所有的后端PHP脚本提供服务，用来对用户进行预认证检查。上述代码存在两个路径，一个用来检查“username”及“isAdmin”会话值，另一个尝试使用cookie值完成同样工作。由于cookie是由用户提供的，因此攻击者可利用cookie尝试攻击。上述代码的工作流程可以归结为：
1、若“username”变量存在且值不为空，则用户以普通权限登录。
2、若“isAdmin”变量设置为1，则用户以管理员权限登陆。
这意味着只要登录检查过程涉及到PHP脚本，攻击者就可以使用2个精心构造的cookie值绕过登录检查。
在我写这篇文章的过程中，西数发布了一个新的固件，修复了上述漏洞。然而这个补丁同样存在登录验证绕过漏洞。以下为打过补丁的代码片段：
文件：/var/www/web/lib/login_checker.php
     20 function login_check()
     21 {
     22         $ret = 0;
     23 
     24         if (isset($_SESSION['username']))
     25         {
     26                 if (isset($_SESSION['username']) && $_SESSION['username'] != "")
     27                 $ret = 2; //login, normal user
     28 
     29                 if ($_SESSION['isAdmin'] == 1)
     30                         $ret = 1; //login, admin
     31         }
     32         else if (isset($_COOKIE['username']))
     33         {
     34                 if (isset($_COOKIE['username']) && $_COOKIE['username'] != "")
     35                 $ret = 2; //login, normal user
     36 
     37                 if ($_COOKIE['isAdmin'] == 1)
     38                         $ret = 1; //login, admin
     39 
     40                 if (wto_check($_COOKIE['username']) === 0) //wto check fail
     41                         $ret = 0;
     42         }
     43 
     44         return $ret;
     45 }
     46 ?>
在新的代码中，调用了一个新的方法“wto_check()”（第40行）。该方法运行了设备上的一个程序，以用户提供的用户名及用户IP作为参数。如果用户当前处于已登录未超时状态，则函数返回1，否则返回0（代表用户未登录）。“wto_check()”方法具体代码如下：
文件：/var/www/web/lib/login_checker.php
     3 /*
      4   return value: 1: Login, 0: No login
      5 */
      6 function wto_check($username)
      7 {
      8         if (empty($username))
      9                 return 0;
     10 
     11         exec(sprintf("wto -n "%s" -i '%s' -c", escapeshellcmd($username), $_SERVER["REMOTE_ADDR"]), $login_status);
     12         if ($login_status[0] === "WTO CHECK OK")
     13                 return 1;
     14         else
     15                 return 0;
     16 }