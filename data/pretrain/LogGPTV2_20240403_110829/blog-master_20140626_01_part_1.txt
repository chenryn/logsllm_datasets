## ZFS (sync, async) R/W IOPS / throughput performance tuning  
### 作者                                                                                                                                                                                     
digoal                                                                                                                                                                                       
### 日期                                                                                                                                                                                                      
2014-06-26                                                                                                                                                                             
### 标签                                                                                                                                                                                   
PostgreSQL , Linux , ZFS                                                                                                                                                                                 
----                                                                                                                                                                                             
## 背景                    
本文讨论一下zfs读写IOPS或吞吐量的优化技巧, (读写操作分同步和异步两种情况).  
影响性能的因素  
1\. 底层设备的性能直接影响同步读写 iops, throughput. 异步读写和cache(arc, l2arc) 设备或配置有关.  
2\. vdev 的冗余选择影响iops, through.  
因为ZPOOL的IO是均分到各vdevs的, 所以vdev越多, IO和吞吐能力越好.  
vdev本身的话, 写性能 mirror > raidz1 > raidz2 > raidz3 ,   
读性能看实际存储的盘数量决定. (raidz1(3) = raidz2(4) = raidz3(5) > mirror(n))  
3\. 底层设备的IO对齐影响IOPS.   
在创建zpool 时需指定ashift, 而且以后都无法更改.   
建议同一个vdev底层设备的sector一致, 如果不一致的话, 建议取最大的扇区作为ashift. 或者将不一致的块设备分到不同的vdev里面.  
例如sda sdb的sector=512, sdc sdd的sector=4K  
```  
zpool create -o ashift=9 zp1 mirror sda sdb  
zpool add -o ashift=12 zp1 mirror sdc sdd  
       ashift  
           Pool  sector  size exponent, to the power of 2 (internally referred to as "ashift"). I/O operations will be  
           aligned to the specified size boundaries. Additionally, the minimum (disk) write size will be  set  to  the  
           specified  size,  so  this  represents a space vs. performance trade-off. The typical case for setting this  
           property is when performance is important and the underlying disks use 4KiB sectors but report 512B sectors  
           to the OS (for compatibility reasons); in that case, set ashift=12 (which is 1= zfs_sync_pass_dont_compress)  
zio.c:module_param(zfs_sync_pass_dont_compress, int, 0644);  
zio.c:MODULE_PARM_DESC(zfs_sync_pass_dont_compress,  
static int  
zio_write_bp_init(zio_t *zio)  
{  
                if (pass >= zfs_sync_pass_dont_compress)  
                        compress = ZIO_COMPRESS_OFF;  
arc.c  
int l2arc_nocompress = B_FALSE;                 /* don't compress bufs */  
```  
5\.3   
文件的拷贝份数, 一般不建议设置, 除非你的vdev以及底层块设备都没有使用任何冗余措施. 同样影响文件写的IOPS.  
```  
       copies=1 | 2 | 3  
           Controls  the  number of copies of data stored for this dataset. These copies are in addition to any redun-  
           dancy provided by the pool, for example, mirroring or RAID-Z. The copies are stored on different disks,  if  
           possible.  The  space  used  by multiple copies is charged to the associated file and dataset, changing the  
           used property and counting against quotas and reservations.  
           Changing this property only affects newly-written data. Therefore, set this property at  file  system  cre-  
           ation time by using the -o copies=N option.  
```  
5\.4   
数据块校验,  对IOPS有一定的影响, 但是非常不建议关闭.   
```  
       checksum=on | off | fletcher2,| fletcher4 | sha256  
           Controls the checksum used to verify data integrity. The default value is on, which  automatically  selects  
           an appropriate algorithm (currently, fletcher4, but this may change in future releases). The value off dis-  
           ables integrity checking on user data. Disabling checksums is NOT a recommended practice.  
           Changing this property affects only newly-written data.  
```  
5\.5 是否更新文件的访问时间戳, 一般建议关闭. 除非应用程序需要用到文件的访问时间戳.  