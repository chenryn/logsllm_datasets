# Pwn2Own-Netgear-R6700-UPnP漏洞分析
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
6月15日，`ZDI`发布了有关`NETGEAR` `R6700`型号路由器的10个`0
day`的安全公告，其中有2个关于`UPnP`的漏洞：[认证绕过](https://www.zerodayinitiative.com/advisories/ZDI-20-703/)和[缓冲区溢出](https://www.zerodayinitiative.com/advisories/ZDI-20-704/)。通过组合这2个漏洞，在`Pwn2Own
Tokyo 2019`比赛中，来自`Team Flashback`的安全研究员`Pedro Ribeiro`和`Radek
Domanski`成功在`R6700v3`设备上实现代码执行。
6月17日，`NETGEAR`官方发布了[安全公告](https://kb.netgear.com/000061982/Security-Advisory-for-Multiple-Vulnerabilities-on-Some-Routers-Mobile-Routers-Modems-Gateways-and-Extenders)，并针对`R6400v2`和`R6700v3`这2个型号的设备发布了补丁。由于此时还没有这2个漏洞的具体细节，于是打算通过补丁比对的方式对漏洞进行定位和分析。
## 补丁比对
选取`R6400v2`型号作为目标设备，根据`NETGEAR`官方的安全公告，选取`R6400v2-V1.0.4.82`和`R6400v2-V1.0.4.92`两个版本进行比对分析。
>
> 当时`R6400v2-V1.0.4.92`为最新的补丁版本，后来`NETGEAR`官方对安全公告进行了更新，目前最新的补丁版本为`R6400v2-V1.0.4.94`。
由于漏洞与`UPnP`服务有关，于是对`upnpd`程序进行分析，`Bindiff`比对的结果如下。
由图可知，存在差异的重要函数共7个。逐个对函数进行比对和分析，最终定位到`sub_00024D80()`函数中(补丁版本)。
可以看到，在`V1.0.4.92`补丁版本中，在调用`memcpy()`之前增加了一个长度校验，很有可能这里就是漏洞修复点。两个函数对应的伪代码如下，在补丁版本中，除了增加对`memcpy()`长度参数的校验外，`sscanf()`的格式化参数也发生了变化，可能在调用`sscanf()`时就会出现溢出。另外，结合该函数中的字符串`sa_setBlockName`，与`ZDI`漏洞公告中的描述相符，因此猜测这里就是栈溢出漏洞点。
> 为了便于阅读，已对部分函数进行了重命名。
另外，通过补丁比对的方式，暂时未定位到认证绕过漏洞。
## 漏洞利用限制
`upnpd`程序启用的缓解措施如下：仅启用了`NX`机制，同时程序的加载基址为`0x8000`。此外，设备上的`ALSR`等级为1，且`upnpd`程序崩溃后并不会重启。
    $ checksec --file ./usr/sbin/upnpd 
        Arch:     arm-32-little
        RELRO:    No RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      No PIE (0x8000)
根据上述信息，在无信息泄露的前提下，要想利用漏洞实现任意代码执行，最大的难题是`NULL`字符截断的问题。由于`upnpd`程序中`.text`段地址的最高字节均为`'x00'`，在覆盖返回地址后，后面的payload无法传入，因此只有一次覆盖返回地址的机会。想过尝试利用单次覆盖的机会泄露地址信息，但由于`upnpd`程序崩溃后不会重启，似乎也不可行。在尝试常规思路无果后，于是求助于`Pedro
Ribeiro`，`Pedro Ribeiro`表示不便提前透露，但近期会公布漏洞细节。
> 在其他设备中也遇到过`NULL`字符截断的问题，故对这个漏洞如何利用更感兴趣，暂时未对调用路径进行详细分析。
## 漏洞分析
6月25日，`Pedro
Ribeiro`在`GitHub`上公布了[漏洞细节](https://github.com/pedrib/PoC/blob/da317bbb22abc2c88c8fcad0668cdb94b2ba0a6f/advisories/Pwn2Own/Tokyo_2019/tokyo_drift/tokyo_drift.md)，并告知了我
( 非常感谢:) )。结合`Pedro Ribeiro`的`write up`，加上有了可调试的真实设备，对这两个漏洞的细节有了更进一步的了解。
> 感兴趣的可以去看一下`Pedro Ribeiro`的`write up`，很详细。
###  `SOAP`消息
`upnpd`程序会监听`5000/tcp`端口，其主要通过`SOAP`协议来进行数据传输，这两个漏洞存在于对应的`POST`请求中。`SOAP`是一个基于`XML`的协议，一条`SOAP`消息就是一个普通的`XML`文档，其包含`Envelope`、`Header`(可选)、`Body`和`Fault`(可选)等元素。针对该设备，一个`POST`请求示例如下。
    // 省略部分内容
    POST soap/server_sa/ HTTP/1.1
    SOAPAction: urn:NETGEAR-ROUTER:service:DeviceConfig:1#SOAPLogin
    SetNetgearDeviceName
    123456
###  缓冲区溢出
栈溢出漏洞存在于`sa_setBlockName()`函数内的`sscanf()`处，漏洞本身比较简单，但还需要对调用路径进行分析看如何触发。在`V1.0.4.82`版本中，函数`sa_setBlockName()`的调用路径如下。
**`sa_parseRcvCmd()`函数**
在函数`sa_parseRcvCmd()`内，需要使得`(3)`处的条件成立，即`v7=0xFF37`。`(2)`处循环及其后面的代码主要是查找标签并返回其索引(类型?)，同时解析标签中的内容，而在`(1)`处`v4`指向对应的标签名称表，其部分内容如下。因此，请求数据中需要包含``标签。
    int __fastcall sa_parseRcvCmd(char *a1, signed int a2)
    {
      v2 = 0; haystack = a1; v76 = a2; v3 = strstr(haystack, ":Body>");
      memcpy(&v82, haystack, 0x31u);
      v83 = 0;
      if ( !v3 )
        return 702;
      v4 = dword_7DA44;  // (1) 指向标签名称及索引表
      memset(dword_D96CC, 0, 0x5F0u);
      v5 = off_7DA48; v72 = dword_7DA4C;
      if ( off_7DA48 == "END_OF_FILE" )
        return v2;
      v73 = v3 + 6; whence = 0; v6 = 0; v71 = 0; v75 = 0; buf = 0;
      while ( 1 )  // (2) 查找标签,并获取其中的内容
      {
        // ...
        v7 = *v4;
        // ...
        snprintf((char *)&s, 0x32u, "", v5);
        v8 = strstr(v73, (const char *)&s);
        if ( !v8 )
          goto LABEL_25;
        v9 = strchr(v8, '>'); v10 = v7 == 0xFF3A || v7 == 0xFF13;
        src = v9 + 1;
        if ( v10 )
          break;
        v6 = strstr(src, (const char *)&v84);
        if ( v6 )
          goto LABEL_12;
        wrap_vprintf(2, "%d, could not found %sn", 0x4C6, &v84);
    LABEL_25:
        if ( v4 != &dword_7E368 && v71 <= 19 )
        {
          v5 = (char *)v4[4]; v17 = v4[5]; v4 += 3; v72 = v17;
          if ( v5 != "END_OF_FILE" )
            continue;
        }
        return 0;
      }
      // ...
      if ( v7 == 0xFF13 )
      {
        // ...
        }
    LABEL_20:
        if ( v7 == 0xFF37 )  // (3) 对应标签NewBlockSiteName
        {
          if ( buf )
          {
            dword_D96CC[19 * v71] = 0xFF37;
            return sa_setBlockName(src, (int)buf);
          // ...
    ; 标签名称和索引(类型?)表
    .data:0007DA44 dword_7DA44     DCD 0xFF00                                                 
    .data:0007DA48 off_7DA48       DCD aNewenable          ; "NewEnable"
    .data:0007DA4C dword_7DA4C     DCD 1                              
    ; ...
    .data:0007DCE4                 DCD 0xFF37
    .data:0007DCE8                 DCD aNewblocksitena     ; "NewBlockSiteName"
    .data:0007DCEC                 DCD 0x3E8
**`sa_processResponse()`函数**
在`sa_processResponse()`函数内，在`(1)`处根据`soap_action`的类型进入不同的处理分支，在`case
0`中有多处(`SetDeviceNameIconByMAC`，`SetDeviceInfoByMAC`，`SetNetgearDeviceName`)会跳到分支`LABEL_184`，满足一定条件后在`(2)`处会调用`sa_parseRcvCmd()`，同样`case
1`中也有多处会跳到`LABEL_184`分支，之后会调用`sa_parseRcvCmd()`。
    unsigned int sa_processResponse(int a1, char *a2, int a3, signed int a4, char *a5)
    {
      v5 = (void *)a1; v6 = a2;
      switch ( (unsigned int)v5 )  // (1) soap action type
      {
        case 0u:  // 对应service：DeviceInfo
          if ( sa_findKeyword((int)v6, 0) == 1 ) // GetInfo
            goto LABEL_241;
          if ( sa_findKeyword((int)v6, 0xB1) == 1 ) // SetDeviceNameIconByMAC
          { v12 = 177; goto LABEL_184; }
          if ( sa_findKeyword((int)v6, 0xB9) == 1 ) // SetDeviceInfoByMAC
          { v12 = 185; goto LABEL_184; }
          if ( sa_findKeyword((int)v6, 0xBA) == 1 ) // SetNetgearDeviceName
          { v12 = 186; goto LABEL_184; }
          // ...
        case 1u:  // 对应service：DeviceConfig
          if ( sa_findKeyword((int)v6, 0xB8) == 1 ) // SOAPLogin