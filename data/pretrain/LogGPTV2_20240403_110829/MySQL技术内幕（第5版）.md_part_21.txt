里设置系统变量 sql_mode。在这个命令行里，可以使用类似下面这样的设置：
或者指定一个空串，用以清除该值。
方式。下面列出了几种可能的SQL模式设置值。
下，更改服务器对待它自己的行为。
接的那个）服务器的会话产生影响。这意味着，任何客户端都可以在不影响其他客户端的前提
对所有客户端产生影响；也可以让每个客户端自己更改这个模式，从而只对其自己与（它所连
2.1
参考MySQL参考手册（MySQL Reference Manual）。
SQL模式会影响一些行为，比如，如何处理数据录入过程中的无效值，以及标识符的引号
为sql_mode的系统变量，你可以用它来配置这个模式。可以全局性地设置这个变量，让它
在3.3节将讨论一些SQL模式值，它们会影响到对“数据录入期间出现的值错误或缺失等
如果想知道当前会话或全局的SQL模式值，则可以使用如下语句：
设置全局变量需要具备 SUPER 管理权限。新设置的全局变量值将成为此后连入客户端的默
如果想在运行时更改 SQL 模式，那么可以使用一条 SET 语句来设置 sql_mode系统变量。
如果想在启动服务器时设置 SQL 模式，那么可以在 mysqld 命令行，或者在某个选项文件
SELECT @@GLOBAL.Sql_mode;
SELECT@@SESSION.Sql_mode;
SET GLOBAL Sql_mode=TRADITIONAL';
如果想设置全局性的SQL模式，则需要加上GLOBAL关键字：
SET Sql_mOde='TRADITIONAL*;
--Sql-mode="ANSI_QUOTES,PIPES_AS_CONCAT"
--Sql-mode="TRADITIONAL"
在设置SQL模式时，需要指定一个由单个模式值或多个模式值（用逗号分隔）构成的值
STRICT_ALL_TABLES和STRICT_TRANS_TABLES将启用“严格”模式。在严格模式下，
口
口
口
服务器的SQL模式
个模式值，其结果是让MySQL服务器的行为比它的默认运行状态更接近于标准SQL。
ANSI 也是一个组合模式。它会同时启用ANSI_QUOTES、PIPES_AS_CONCAT和其他的几
会把它当成是OR 运算符的同义词。
PIPES_AS_CONCAT会让服务器把
ANSI_QUOTES会告
可以让MySQL服务器在处理坏数据时，其行为更接近于那些传统的SQL服务器。
模式会引人更多的附加限制条件，从而实现更加严格的数据检查。TRADITIONAL 模式
TRADITIONAL是一个组合模式。它类似于严格模式，但它还会启用几种其他模式，这些
些坏数据值转换为最为接近的有效值，而是会拒绝接受它们。
MySQL服务器将会更加严格地对待接受到的坏（bad）数据。
告诉MySQL服务器，把双引号识别为一个标识符引用字符。
模式值不区分大小写。
“1”
当成一个标准的SQL字符串连接运算符，而不
2.1服务器的 SQL 模式
（具体来讲，它不会把这
65
---
## Page 86
么内容。如果想要引用数据库，那么只需直接指定其名字即可：
启
标识符引起来 (也可以使用反引号)。
号或双引号。
或者包含空格或其他特殊字符，那么应该用标识符引号把它引起来。列的别名还可以使用单引
参考11.2.6节。
如果想在一个加上引号的标识符里使用标识符的引号字符，那么只需把重复一下即可。
识符加上引号，可以让它完全由数字字符构成；这一点对不加引号的标识符来说是不允许的。
U+10000及以上）以外的任何字符：
如何解释呢？它表示的是同一件事，还是一个用科学计数法表示的数字呢？
开头的做法，在各类数据库系统中并不常见。如果想要使用这样的标识符，那么必须特别留
许完全由数字字符构成，因为那样会使它难以与数字区分开来。MySQL支持标识符以数字字符
一个字符可以是标识符所允许的任何一种字符，其中包括数字。不过，不加引号的标识符不允
美元符号、下划线，以及范围在U+0080 到U+FFFF 之间的Unicode扩展字符构成。标识符的第
符必须遵从以下几条规则。
如表、视图、列、索引、存储例程、触发器或事件。在引用数据库的各个元素时，相应的标识
达
2.2
66
启用了SQL的IGNORE_SPACE 模式，那么函数名就会变成保留字。这时，如果想要把它们当作
（2）服务器的SQL模式。如果启用了SQL的ANSI_QUOTES 模式，那么可以使用双引号将
列名和表名的别名没什么限制。如果要使用的别名是SQL保留字，或者完全由数字构成，
对于数据库名和表名这样的标识符，操作系统可能会有其他的一些限制。更多相关信息请
标识符可以用反引号“”引起来，它支持使用除NUL字节和Unicode补充字符（范围在
是否还包含了一个“E”或“e”字符，因为这种组合很容易导致表达式出现歧义。例如，
（1）标识符里的字符要合法。不加引号的标识符可以由大小写形式的字母a-z、数字0-9、
口表标识符自己可以引用默认（当前）数据库里的表。如果 sampdb 是默认数据库，那么
（4）标识符限定符。根据具体的上下文，标识符可能需要加以限定，以明确它所引用的是什
内建函数的名字通常都不是保留字，因此可以不加引号直接将其用作标识符。不过，如果
那么服务器会将这个值解释为标识符，而不会把它当作一个字符串。
启用ANSI_QUOTES会有副作用，即字符串文字量必须使用单引号引起来。如果使用了双引
CREATE TABLE "my table"("my-int-column" INT）;
如果标识符是SQL保留字，或者包含有空格或其他特殊字符，那么引号就会很有用。为标
几乎所有的SQL语句都会以某种方式使用到标识符，
口使用一个完全限定的表名，即用数据库标识符和表标识符共同指定：
如果想要引用表，则有两种选择。
SHOW TABLESFROM db_name;
USE db_name;
(3）标识符的长度。大部分标识符的最大长度是64个字符。别名的最大长度是256个字符。
关于SQL模式设置的指导请参考2.1节。
CREATE TABLEmy table（my-int-columnINT）;
SHOW cOLUMNS FROM db_name.tbl_name;
MySQL的标识符语法和命名规则
第2章使用SQL管理数据
SELECT
，用以引用某个数据库或其构成元素，
￥
意
---
## Page 87
区分库名和表名的大小写。而运行于Unix主机上的MySQL服务器，通常需要区分库名和表
名方面的规定。Windows系统的文件名不区分大小写，所以运行在它上面的MySQL服务器也不
文件来表示数据库和表。因此，库名和表名的默认大小写取决于服务器主机上的操作系统在文件
大小写组合。下面这些语句都是等价的：
的内容和MySQL服务器主机所运行的操作系统。
2.3
句号限定符后面时，则不能这样做，因为这时的上下文已说明这个保留字其实就是一个标识符。
请不要把这种名字当作一个整体用引号引起来。下面这条语句是不正确的：
引号。例如：
一个表标识符来限定这个列标识符，以明确到底要使用哪一个列。
类似地，如果某条查询语句使用了多个表，并引用了某个在多个表里存在的列名，那么必须用
式来引用那些不属于默认数据库的表。这样才能让MySQL知道是哪个数据库包含了该个表。
的标识符。例如，有一条语句涉及多个数据库里的表，那么必须以db_name.tbl_name语法形
名里。如果在某条SELECT语句里只引用了一个表，那么该个表则会隐含在该条语句所包含白
因为还不知道这个表到底属于哪个数据库。
（1）SQL关键字和函数名。SQL的那些关键字和函数名不区分大小写。它们可以为任意的
SQL语句中的大小写规则因语句各个组成元素的不同而有所差异，同时还取决于你正引用
如果在引用一个完全限定名时使用了引号，那么需要给该名字里的每一个标识符分别加上
一个列名里。只有在无法根据上下文确定出是哪一个表或哪一个数据库时，才必须使用完
个数据库，那么该数据库就会成为默认数据库，并隐含在你此后所引用的每一个不完整的表
SELECT NOW(）;
如果需要把某个保留字用作标识符，那么必须给它加上引号。不过当这个保留字紧跟在一个
SELECT *FROMsampdb.memberWHEREsampdb.member.member_id> 100;
如果没有选择数据库，那么在没有给出数据库限定符的情况下引用某个表，就会出现错误；
（2）数据库名、表名和视图名。MySQL使用了服务器主机上的底层文件系统所包含的目录和
sElEcT nOw(）;
通常情况下，尽管提供完全限定名总是合法的，但没有必要那样做。如果用USE语句选择
对于表列的引用，有如下3种选择。
select
SQL语句的大小写规则
口
口
SELECT last_name,
应该选择哪个表里的列：
只简单地写一个无限定名来引用具体环境上下文所确定的那个表：col_name。下面两条
对于默认数据库中命名表里的某一个列，可以使用部分限定名：tbl_name.col_name。
使用完全限定的列名：db_name.tbl_name.col_name。
SELECT last_name,first_name FROM president;
查询语句都使用了相同的列名，但每条语句的FROM子句所提供的上下文会指出，实际
SELECT*FROMmember;
下面两条语句是等效的：
now()
first_name
FROM member;
2.3SQL语句的大小写规则
整
的
9
---
## Page 88
排序规则、二进制串和非二进制串，以及“如何定义和使用基于字符的表列”等内容。
也可以将数据从一种字符集转换为另一种。
想包含一个支持希伯来语（Hebrew）的列和一个支持希腊语（Greek）的列，这都是允许的。
量等不同层次单独指定字符集。例如，你想让某个表的列默认使用latin1 字符集，但同时还
2.4
允许在查询命令里使用不同的大小写风格来引用它们。
相同的大小写来引用它们。对于SQL关键字、函数名、列名和索引名，则不必如此，因为MySQL
多相关信息请参考11.2.6节。
也想要这样的效果，那么可以通过设置lower_case_table_name系统变量来配置服务器。更
表的话，因为InnoDB引擎在其内部都是以小写字母方式来存储数据库名和表名的。
上时，名字的大小写问题就不存在了。个人建议统一使用小写字母，尤其是，如果你要使用InnoDB
一直按照该方案去创建数据库和表。这样一来，等你日后想把某个数据库迁移到不同的服务器
器时，也同样会遇到麻烦。
大小写，所以abc和ABC无差别。当你把表从一台Unix主服务器复制到一台Windows从服务
Unix服务器上创建了两个名字分别为 abc和ABC的表，此时，这两个名字会被认为是不同的。
问题，如“它们以后是否有可能会迁移到一台不区分文件名大小写的机器上”。
对于非二进制串，还取决于字符集的排序规则（collation）。对于文字串和字符串类型列的内容，
么表的别名将不区分大小写。
区分大小写，这一点与标准 SQL的行为有所不同。
是个例外，它们不区分大小写。
名的大小写，因为Unix文件系统区分大小写。对于Mac OSX平台，其扩展文件系统中的名字
本节提供了与MySQL 的字符集支持有关的基本背景知识。第3章将会具体讨论字符集、
不管你的系统是否会区分数据库名和表名的大小写，在给定的查询语句里都必须使用与之
你想把这两个表迁移到一台Windows机器上时，就会出现问题。因为那台新的机器并不区分
一点也同样成立。更多相关信息请参考3.1.2节。
（6）字符串值。字符串值是否区分大小写，具体取决于它是二进制还是非二进制串，并且
必须让它们保持同样的大小写组合。如果1ower_case_table_names系统变量为非零值，那
MySQL支持多种字符集（character set），而且允许在服务器、数据库、表、列和字符串常
如果想统一使用小写字母来创建数据库名和表名，即使在CREATE 语句里没有特意指定，
MySQL提供了以下这些字符集特性。
想要避免大小写问题演变成一个棘手难题，可行的办法是：先选定一种大小写方案，然后
当你在一台文件名区分大小写的机器上创建数据库和表时，应该要认真考虑一下大小写的
，小写或大小写混用）来指定一个别名，但如果需要在同一条语句里多次用到同一个别名，
口MySQL服务器允许同时使用多种字符集。
(4）列名和索引名。在MySQL里，列名和索引名都不区分大小写。下面这些语句都是等价的：
（3）存储程序的名字。存储函数、存储过程和事件的名字都不区分大小写。触发器的名字要
MySQL会使用一个文件来表示一个视图，所以刚才与表有关的讨论也同样适用于视图。
（5）别名的名字。默认情况下，表的别名要区分大小写。可以使用任意的大小写组合（大
SELECT nAmE FROM
SEL
SELECT name FROM
字符集支持
第2章使用SQL管理数据
Istudent;
student
student
，假设你在一台
---
## Page 89
的开头部分所确定的那个字符集。这些规则适用于几个层次。
子句，则表示使用默认排序规则。如果只给出了COLLATE子句，则使用由给定排序规则的名字
同时使用它们两时，必须保证排序规则的名字与字符集相兼容。如果只给出了CHARACTER SET
而 collation是该字符集的某种排序规则的名字。这两个子句可同时使用，也可分开使用。在
排序规则，即：
但与字符集latin1不兼容。
字作为开头，那么它们就是兼容的。例如，排序规则utf8_danish_ci与字符集utf8 相兼容，
果指定了排序规则，那么它必须与字符集兼容。如果某种排序规则的名字是以某个字符集的名
考12.6.2节）。如果只是指定字符集，那么其默认排序规则将会成为服务器的默认排序规则。如
通过设置系统变量character-set-server和collation-server来改写它们（相关信息请参
字符串所使用的字符集）进行设定。
2.4.1
集。
在用于创建数据库和表的 SQL语句里，有两个子句可用于指定数据库、表和列的字符集和
①也常被称为零号平面（Plane 0），它是Unicode中的一个编码区段，编码范围包括U+0000 到U+FFFF。
服务器的默认字符集和排序规则是在编译时构建好的。但你可以在服务器启动或运行时，
其中，CHARACTER SET可用CHARSET来代替。charset是服务器支持的某个字符集的名字，
字符集和排序规则可以在多个层次（从MySQL服务器所使用的默认字符集，一直到单个
不过，可以使用Unicode字符集（可以用一种编码表示多种语言的字符）来实现多语言支持。
COLLATEcollation
口当更改某个索引过的字符列时，MySQL服务器会自动对索引进行重新排序。
口还有几个函数和运算符可用来将一些单独的值从一种字符集转换成另一种。CHARSET（）
口
口支持Unicode 的字符集有：utf8和ucs2 字符集，它们包括基本多文种平面（Basic
口一个给定的字符集可以有一种或多种排序规则。你可以为自己的应用挑选一种最适用
1指定字符集
的排序规则。
CREATE DATABASE db_name CHARACTER SET charSet COLLATE collation;
相关的信息。
规则，而COLLATE（）函数能返回某个给定字符串的排序规则。
■字符串常量的字符集既可以通过上下文来确定，也可以显式指定。
■CREATE TABLE 和 ALTER TABLE 有专门的子句，用于设定表和列的字符集。
■可以使用 CREATE DATABASE 语句来设置数据库的字符集，使用 ALTER DATABASE 语
■MySQL服务器有一个默认字符集。
你可以分别在服务器、数据库、表、列和字符串常量等这些层次上指定字符集。
BMP字符和补充字符。MySQL5.6.1增加了utf16le。该字符集与utf16很像，主要差
Multilingual Plane，BMP?）字符；以及utf16、utf32和utf8mb4 字符集，它们包括
译者注
句来更改它。
数可返回某个给定值的字符集。类似地，COLLATE运算符可更改某个字符串的排序
2.4字符集支持
9
---
## Page 90
且其中有一种即为它的默认排序规则。
集以及utf8字符集所提供的那些排序规则：
名字可以与某个给定的模式相匹配。例如，下面这面这些语句可以分别列出基于拉丁语的字符
2.4.2
（Spanish）的排序规则对它排序，这时可以像下面这样做：