title:Practical Recommendations for Stronger, More Usable Passwords Combining
Minimum-strength, Minimum-length, and Blocklist Requirements
author:Joshua Tan and
Lujo Bauer and
Nicolas Christin and
Lorrie Faith Cranor
Practical Recommendations for Stronger, More Usable
Passwords Combining Minimum-strength, Minimum-length,
and Blocklist Requirements
Joshua Tan, Lujo Bauer, Nicolas Christin, and Lorrie Faith Cranor
Carnegie Mellon University
{jstan,lbauer,nicolasc,lorrie}@cmu.edu
ABSTRACT
Multiple mechanisms exist to encourage users to create stronger
passwords, including minimum-length and character-class require-
ments, prohibiting blocklisted passwords, and giving feedback on
the strength of candidate passwords. Despite much research, there
is little definitive, scientific guidance on how these mechanisms
should be combined and configured to best effect. Through two
online experiments, we evaluated combinations of minimum-length
and character-class requirements, blocklists, and a minimum-strength
requirement that requires passwords to exceed a strength threshold
according to neural-network-driven password-strength estimates.
Our results lead to concrete recommendations for policy config-
urations that produce a good balance of security and usability. In
particular, for high-value user accounts we recommend policies that
combine minimum-strength and minimum-length requirements.
While we offer recommendations for organizations required to use
blocklists, using blocklists does not provide further gains. Inter-
estingly, we also find that against expert attackers, character-class
requirements, traditionally associated with producing stronger pass-
words, in practice may provide very little improvement and may
even reduce effective security.
CCS CONCEPTS
• Security and privacy → Authentication; Usability in secu-
rity and privacy.
KEYWORDS
password policies; neural networks; blocklists
ACM Reference Format:
Joshua Tan, Lujo Bauer, Nicolas Christin, and Lorrie Faith Cranor. 2020.
Practical Recommendations for Stronger, More Usable Passwords Combin-
ing Minimum-strength, Minimum-length, and Blocklist Requirements. In
Proceedings of the 2020 ACM SIGSAC Conference on Computer and Commu-
nications Security (CCS ’20), November 9–13, 2020, Virtual Event, USA. ACM,
New York, NY, USA, 20 pages. https://doi.org/10.1145/3372297.3417882
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
CCS ’20, November 9–13, 2020, Virtual Event, USA
© 2020 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-7089-9/20/11.
https://doi.org/10.1145/3372297.3417882
1 INTRODUCTION
To help users create stronger passwords, system administrators
often require passwords to exceed a certain length, contain at least
a specific number of character classes, or not appear on a block-
list [19]. Users are also often nudged to create stronger passwords
by password meters that give feedback on the strength of candidate
passwords and suggestions about how to improve them.
Early guidance for how to deploy these approaches relied mostly
on common sense and experts’ opinions [17, 18]. Over the past
decade, a scientific basis has emerged for what requirements are
most effective at encouraging users to create passwords that are
strong but still memorable. For example, research has shown that
increasing minimum length may increase password strength more
than relying just on character class requirements [26]; that pass-
word meters can very effectively nudge users to create stronger
passwords [28]; and that carefully configured blocklists can help
prevent users from picking easily guessed passwords [8].
These early efforts shed light on which password requirements
were more or less effective, but stopped short of providing em-
pirically evaluated, definitive guidance for how to combine re-
quirements. In this paper, we seek to address this. Building on
previous findings, we empirically examine combinations of length,
character-class, blocklist, and password meter requirements—all of
which were previously individually studied—as well as minimum-
strength requirements, which have been less studied. We consider
practical implementions of minimum-strength requirements, us-
ing estimates from a neural network trained on leaked password
data. Our research questions examine and compare the security
and usability properties of differently configured blocklists and
minimum-strength requirements, with careful attention to how
the choice of underlying composition requirements affect these
properties.
Our results, derived through two successive experiments that
investigated a wide range of potential interactions between require-
ments, allow us to provide concrete, practical recommendations
for how to combine and configure these mechanisms. We find that
how users pick passwords has changed over time, and that this,
in combination with advances in password guessing, implies that
requiring passwords to have multiple character classes brings at
best minor benefit to password strength. Although some blocklist
configurations are more effective than others at eliminating weak
passwords, policies that require passwords to have at least eight
characters and that simultaneously prohibit passwords that can be
guessed within 106 guesses perform better—in terms of encourag-
ing password strength—than the best-performing blocklist policies
we examine. Properly configured minimum-strength policies not
only match our top tested blocklist policies in usability, but can
also provide better security, especially against offline attacks that
make up to 1014 guesses. For organizations that nevertheless require
blocklists, we recommend blocklist policies that impose a minimum
of eight characters and perform a fuzzy blocklist-matching check
against either a subset of the most popular passwords found in pass-
word leaks, or that perform a fullstring-matching check against a
very large database of publicly-leaked passwords.
A primary contribution of our work is to design, evaluate, and
recommend configurations for minimum-strength requirements.
These requirements build on the large body of password research
conducted over the past 15 years. Conceptually, minimum-strength
requirements represent the goal of other types of password-creation
requirements that have been proposed and tested: to reject weak,
easily-guessed passwords while permitting strong, hard-to-guess
passwords. In this study, we present a concrete (neural-network-
driven) implementation of minimum-strength requirements that
both faithfully achieves password-strength goals and achieves com-
parable usability to the best competing blocklist-based policies we
tested. Neural-network-driven minimum-strength requirements
are easy to deploy, flexibly configurable, and can be easily retrained
to reflect changing patterns in passwords over time.
2 BACKGROUND AND RELATED WORK
Here we discuss related work on password composition policies
and blocklists, and on measuring password strength, including to
implement data-driven minimum-strength requirements.
2.1 Composition policies
Password composition policies aim to help users create more unique,
less predictable passwords. Composition policies can be used at
password-creation time to enforce a minimum number of character
classes—uppercase letters, lowercase letters, symbols, and digits—
and a minimum-length requirement.
Early work on composition policies focused on character-class re-
quirements to increase password strength [18]. In general, policies
that require more character classes have been found to produce over-
all stronger passwords [11, 13]. Later work explored policies that
emphasized length over character-class composition. Researchers
exploring length requirements have found that reducing the number
of required character classes while increasing the minimum-length
requirement could strengthen passwords without decreasing their
memorability or making them more difficult to create [11, 13, 25, 26].
Although researchers and, more recently, NIST advise to avoid
composition policies requiring a minimum number of character
classes, this type of policy is still often used in practice [4, 14]. We
include such policies in our studies to provide concrete recommen-
dations to organizations that may continue to rely on them.
2.2 Blocklists
Even if password requirements are generally effective at improving
strength, some users will fulfill them predictably. Thus, character-
class and minimum-length rules are insufficient to prevent very
weak passwords [25]. For example, 4class8 and 1class16 policies
allow extremely predictable passwords such as “Password1!” and
“passwordpassword.” A common mitigation is to combine composi-
tion requirements with a blocklist check. For instance, NIST 800-63B
recommends that passwords not be in a list of commonly-used, ex-
pected, or compromised values [19]. Properly configured blocklist
checks can reject predictable, or easy-to-guess passwords.
A blocklist requirement uses a wordlist and a matching algorithm
that checks whether a given password is prevented by that wordlist.
Wordlists can contain common sequences of characters, as well
as previously-leaked passwords. Matching algorithms range from
exact match (a candidate password should not be in the wordlist),
to more complicated rules—e.g., stripping symbols and digits from
the password, making it case-insensitive, and checking that the
resulting string does not match any wordlist entry.
Prior work found that blocklists used by major online service
providers vary in architecture, including client-side, server-side,
and hybrid approaches [4]. Blocklists differed in their wordlists
and matching algorithms, e.g., whether and how symbols or digits
were removed from passwords before matching. They also differed
in whether they forbid, warned, or decreased a password-strength
score if a blocklist check returned positive.
Initial password research focused on blocklists that forbid dictio-
nary words in passwords. For example, many studies have exam-
ined policies that perform blocklist checks against the OpenWall
wordlist [12]. These studies found that blocklist checks caused
more annoyance compared to policies without them. More recently,
blocklists based on ad-hoc cracking dictionaries were found to
produce weaker passwords than when relying on larger wordlists
gleaned from password leaks, such as the Xato password corpus [5].
Blocklists based on Xato were found to produce reasonably strong
passwords [8, 28]; we will use this wordlist here.
By analyzing large leaked sets of passwords, Weir et al. found
that larger blocklists strengthened passwords [33]. Kelley et al.
tested three blocklists varying in size and similarly found that larger
blocklists produced stronger passwords [11]. While blocklists might
be effective against online attacks, Florêncio et al. questioned their
practicality against offline attacks due to the required wordlist size
or potential negative usability impact [7].
Despite these studies, our understanding of blocklist usability
and security effects is incomplete, particularly for large blocklists
or string-matching algorithms that remove non-alphanumeric char-
acters. Prior work that uses retrospective policy analyses has lim-
itations, e.g., subsetting policy-allowed passwords retroactively
overestimates the impact of password policies on strength [14] and
cannot account for users who replace blocklisted passwords with
even weaker, but non-blocklisted ones. Retrospective studies also
cannot analyze many usability-related aspects of password policies.
Prior findings may also not apply to modern contexts. Conclu-
sions on blocklist usability derived from studies that lack real-time
feedback [11, 13] may lead to overly pessimistic usability results.
For example, the largest cause of policy compliance failure in prior
work was the dictionary check, which real-time feedback could
alleviate [25]. Additionally, blocklists may differently impact pass-
word strength and usability depending on interactions between
the wordlist, matching algorithm, and composition policy they
augment. For instance, prior work has examined digit-and-symbol-
stripping matching algorithms with 3class8 and 4class8 policies,
and wordlists based on the OpenWall dictionary, which was found
to be relatively ineffective [12, 13].
2.3 Quantifying password strength
The strength of passwords produced under a particular password-
creation policy can be quantified using guess numbers. Guess num-
bers can be computed by enumerating the passwords predicted by
a particular guessing model, in decreasing probability, or according
to the order that a commonly-configured password-cracking tool
would output guesses. A password’s guess number estimates the
number of guesses an attacker need make before guessing that
particular password. Guess numbers are parameterized by the par-
ticular tool used, as different tools and models guess passwords in
different orders. Prior work recommends taking the minimum guess
number across multiple automated guessing methods as a conser-
vative proxy for an expert attacker’s guessing capabilities [30].
The Password Guessability Service (PGS) [21] is a state-of-the-
art tool for estimating password strength. PGS supports the popular
password-cracking tools Hashcat and John the Ripper, as well as
tools based on password-modeling approaches such as Probabilis-
tic Context-Free Grammars (PCFG) and artificial neural networks.
PGS also provides min-auto guess numbers, computed as the lowest
guess number among the set of supported password-guessing meth-
ods. For probabilistic models, Monte Carlo sampling methods allow
for estimation of guess numbers for low-probability passwords [5].
Probability-to-guess-number mappings can be precomputed, en-
abling client-side, real-time guess number estimates. We apply this
method in our study, using a meter based on prior work [28].
Guess numbers do not paint a complete picture. The number and
frequency of guesses an attacker can make depend on many factors,
including whether it is an online or offline attack, the extent to
which rate limiting is applied, and whether defenses such as iterated
hashing are deployed. Florêncio et al. discuss the “online-offline
chasm” between password-strength thresholds that may be relevant
in practice [7]. They argue that offline attacks may not always be a
threat, e.g., for service providers that reversibly encrypt passwords
or store passwords in plaintext. When offline attacks are applicable,
they argue that the user effort to create passwords that resist such
attacks is usually wasted unless passwords can withstand attacks
that make up to 1014 guesses.
2.4 Minimum-strength requirements
Minimum-strength password requirements have been explored
less than other types of policy requirements. Accurate strength
estimates for individual passwords are indeed difficult to perform
in real-time. Password-strength heuristics can roughly estimate
password strength, but the accuracy of these estimates may be
insufficient. Prior work evaluating password meters has found that
strength estimates from heuristic-based meters are often incon-
sistent [4] and contradict guess number estimations [16]. One of
the more accurate password-strength estimators, zxcvbn [34], uses
advanced heuristics to output quite reliable password strength es-
timates at low guess numbers typical of online attacks. Although
zxcvbn can be configured to meet minimum password-strength
thresholds, this has not been evaluated through user studies.
Recently, Melicher et al. designed a client-side recurrent neural
network for modeling password strength [16]. This development
has enabled minimum-strength requirements based on password-
strength estimates that are both accurate and data driven, rather
than heuristic driven. In our study, we explore minimum-strength
requirements expressed as a minimum guess number estimated by a
neural network. This is the first time we are aware of that this type
of requirement has been incorporated into a password-creation
policy and evaluated in a user study.
3 METHODOLOGY
Here we present our experimental factors and conditions; the de-
sign of the user studies we used to collect data; and the statistical
methods we applied to analyze that data. To limit the number of
interactions between policies that we would have to simultaneously
explore, we conducted two experiments (Experiment 1 and Exper-
iment 2), each involving independent data collection. Both were
identical in terms of methodology and implementation—only the
experimental conditions differed.
3.1 Experimental factors
Each of our user studies presented participants with password-
creation policies that differed based on assigned treatment. The
experimental factors consisted of three types of requirements that
can be enforced by a password-creation policy: composition, block-
list, and minimum-strength requirements.
We performed retrospective analyses on randomly-selected sub-
sets of leaked 000webhost passwords to help identify the parameters
to explore in our user study for each type of experimental factor.
This involved retroactively applying a password policy to a set of
leaked passwords and observing the proportions and strengths of
passwords that were allowed or rejected by that policy. Retrospec-
tive analyses and analyses relying on leaked data have inherent lim-
itations discussed in Section 2.2. The overall findings we present are
based on data collected from experimentally designed user studies,
which avoids these limitations. In addition, results from Experiment
1 informed the parameters explored in Experiment 2.
Composition requirements. All policies required passwords to be
at least eight characters long. In addition, some policies required
longer password lengths or required passwords to contain a min-
imum number of character classes. We abbreviate composition
requirements using a notation that lists the required number of
character classes followed by the minimum length, e.g., 3c12 cor-
responds to requirements that passwords contain at least three
character classes and at least twelve characters. In Experiment 1,
we tested 1c8, 1c16, 3c8, 3c12, and 4c8, each of which has been ex-
plored in prior work [11, 13, 15, 18, 26, 27]. In Experiment 2, we
explored additional longer-length one-class policies (1c10 and 1c12).
Blocklist requirements. We tested policies incorporating a block-
list requirement, which rejected any password that matched an
entry on a list of prohibited strings. We explored several wordlists
and matching algorithms. The majority of our blocklist configura-
tions followed previous work [8, 28, 34] in using the Xato wordlist,
consisting of 96,480 passwords that appeared four or more times in
the leaked Xato corpus of 10 million passwords [3]. We also used
a wordlist of 555 million unique passwords previously leaked in
data breaches that are accessed using the freely available Pwned
Passwords API [10].1 Last, we tested the wordlist (and matching
algorithm) used at Carnegie Mellon University (CMU), which con-
sisted of 630,034 English dictionary words [1, 20].
We tested four matching algorithms: case-insensitive full-string
(cifs); case-sensitive full-string (fs); stripping digits and symbols and
then performing a case-insensitive full-string comparison (strip-
cifs); and checking whether any length-5 substring of any wordlist
entry was a case-insensitive substring of the candidate password
(ciss). Each of these has been used in deployed password-creation
policies [4]. The ciss algorithm has been explored by prior work [25],
albeit with a much smaller wordlist than we considered.2
Minimum-strength requirements. In addition to composition and
blocklist requirements, we tested policies incorporating a minimum-
strength requirement, expressed as the minimum number of guesses
that passwords should withstand in a guessing attack. We used
password-strength estimates computed by a client-side, JavaScript-
based neural network, implemented and trained following the
approach of Melicher et al. [16] (see Appendix A). We defined
minimum-strength requirements in terms of a log-10 guess number
threshold. For example, NN6 required passwords to have password-
strength estimates no weaker than 106 guesses.
We tested four minimum-strength thresholds, ranging from 106
to 1012 guesses. In Experiment 1 we tested policies that included
NN6 and NN12 requirements. Results suggested that NN6 require-
ments may be too lenient for protecting high-value accounts and
that NN12 requirements can make password-creation annoying or
difficult for some users. Hence, we tested NN8 and NN10 in Ex-
periment 2 to explore minimum-strength thresholds that might
produce a better balance of both security and usability.
3.2 Research questions
We designed our experimental conditions to answer specific re-
search questions. Some research questions explored the security
and usability impacts of policies differing in a single experimental
factor (e.g., blocklist configuration). We also investigated whether
certain policy components impact password strength or usability
differently depending on the configuration of other policy compo-
nents (e.g., the same blocklist configuration used alongside different
composition policies). Table 1 lists our research questions and the
experimental conditions and comparisons used to answer them.