(cid:29)
(cid:27)
(cid:26)
(cid:11)
(cid:3)
(cid:28)
(cid:6)(cid:4)(cid:1)
(cid:43)(cid:40)(cid:39)
(cid:8)(cid:7)(cid:1)
(cid:6)(cid:3)(cid:1)
(cid:43)(cid:39)(cid:39)
(cid:8)(cid:1)(cid:1)
(cid:6)(cid:2)(cid:1)
(cid:42)(cid:40)(cid:39)
(cid:2)(cid:7)(cid:1)
(cid:6)(cid:1)(cid:1)
(cid:42)(cid:39)(cid:39)
(cid:2)(cid:1)(cid:1)
(cid:5)(cid:1)
(cid:41)(cid:40)(cid:39)
(cid:6)(cid:7)(cid:1)
(cid:4)(cid:1)
(cid:41)(cid:39)(cid:39)
(cid:6)(cid:1)(cid:1)
(cid:3)(cid:1)
(cid:40)(cid:39)
(cid:7)(cid:1)
(cid:2)(cid:1)
(cid:39)
(cid:1)
(cid:1)
(cid:6)(cid:7)
(cid:6)(cid:7)
(cid:6)(cid:7)
(cid:1)(cid:2)(cid:2)(cid:3)(cid:4)(cid:5)
(cid:1)(cid:2)(cid:2)(cid:3)(cid:4)(cid:5)
(cid:1)(cid:2)(cid:2)(cid:3)(cid:4)(cid:5)
(cid:8)(cid:9)(cid:10)(cid:5)
(cid:8)(cid:9)(cid:10)(cid:5)
(cid:8)(cid:9)(cid:10)(cid:5)
(cid:6)(cid:11)(cid:12)
(cid:6)(cid:11)(cid:12)
(cid:6)(cid:11)(cid:12)
(cid:8)(cid:18)(cid:9)(cid:19)(cid:20)(cid:3)(cid:4)(cid:14)(cid:12)(cid:13)(cid:3)(cid:21)(cid:1)(cid:18)
(cid:8)(cid:18)(cid:9)(cid:19)(cid:20)(cid:3)(cid:4)(cid:14)(cid:12)(cid:13)(cid:3)(cid:21)(cid:1)(cid:18)
(cid:8)(cid:18)(cid:9)(cid:19)(cid:20)(cid:3)(cid:4)(cid:14)(cid:12)(cid:13)(cid:3)(cid:21)(cid:1)(cid:18)
(cid:23)(cid:24)(cid:13)(cid:3)(cid:1)(cid:14)(cid:12)(cid:13)(cid:3)(cid:21)(cid:1)(cid:18)
(cid:23)(cid:24)(cid:13)(cid:3)(cid:1)(cid:14)(cid:12)(cid:13)(cid:3)(cid:21)(cid:1)(cid:18)
(cid:23)(cid:24)(cid:13)(cid:3)(cid:1)(cid:14)(cid:12)(cid:13)(cid:3)(cid:21)(cid:1)(cid:18)
(cid:7)(cid:5)(cid:13)(cid:3)(cid:9)(cid:14)(cid:15)(cid:16)(cid:9)(cid:17)(cid:5)(cid:18)
(cid:7)(cid:5)(cid:13)(cid:3)(cid:9)(cid:14)(cid:15)(cid:16)(cid:9)(cid:17)(cid:5)(cid:18)
(cid:7)(cid:5)(cid:13)(cid:3)(cid:9)(cid:14)(cid:15)(cid:16)(cid:9)(cid:17)(cid:5)(cid:18)
(cid:22)(cid:3)(cid:13)(cid:5)(cid:1)(cid:14)(cid:12)(cid:13)(cid:3)(cid:21)(cid:1)(cid:18)
(cid:22)(cid:3)(cid:13)(cid:5)(cid:1)(cid:14)(cid:12)(cid:13)(cid:3)(cid:21)(cid:1)(cid:18)
(cid:22)(cid:3)(cid:13)(cid:5)(cid:1)(cid:14)(cid:12)(cid:13)(cid:3)(cid:21)(cid:1)(cid:18)
(cid:25)(cid:9)(cid:16)(cid:4)(cid:16)(cid:24)(cid:16)(cid:9)(cid:21)(cid:1)(cid:18)
(cid:25)(cid:9)(cid:16)(cid:4)(cid:16)(cid:24)(cid:16)(cid:9)(cid:21)(cid:1)(cid:18)
(cid:25)(cid:9)(cid:16)(cid:4)(cid:16)(cid:24)(cid:16)(cid:9)(cid:21)(cid:1)(cid:18)
(d) Network Throughput only.
Figure 10: TROGUARD Overhead on System Resources
conﬁrms that the application is benign and could run outside of the
SE-Linux sandbox.
5.4 Application Classiﬁcation Performance
During the application type learning phase, TROGUARD saved the
collected data for the 100 applications in human readable plain text
ﬁles (totaling 40.5 GB). TROGUARD built 5 models using the meta
classiﬁer Ensembles of Nested Dichotomies (END) in the Weka
machine learning suite [12], based on the C4.5 decision tree classi-
ﬁcation algorithm [12]. The algorithm can handle both continuous
(numeric) and discrete (nominal) attributes. TROGUARD builds the
decision tree with 2 as the minimum number of instances per leaf.
Additionally, TROGUARD uses 1 fold for reduced-error pruning,
and 2 extra folds for growing the tree. Table 2 shows the perfor-
mance results for the application classiﬁcation engine. As shown
the total 81 attributes were distributed among the four attribute sets.
The second row shows how long it takes for TROGUARD to com-
plete the supervised learning and training phases using all of the
application data logs. The ﬁrst four columns show the time re-
quirement for classiﬁcation using a subset of attributes, and the last
column reports the overall time required for creating trained mod-
els using all of the attributes. As shown, the training phase using
the all the attributes takes less than 1 second to complete that is an
acceptable duration for real-world deployment of the TROGUARD
framework.
5.5 Performance Overhead
We studied the performance overhead of data collection tool LTTng
kernel tracer. The LTTng kernel tracer is a highly efﬁcient tracing
tool that typically used by system developer to track down perfor-
mance issues and debug problems in multi-process system. The
reported impact of LTTng on kernel operations in terms of percent-
age of CPU cycles against vanilla kernel is less then 5% in [2].
We measured the impact of TROGUARD syscall interception en-
gine on various aspects of the system performance, namely kernel
CPU utilization, memory utilization, disk throughput, and network
throughput. In addition, we benchmarked the network throughput
over loopback. Figure 10 shows the results. In our experiments, the
maximum CPU overhead TROGUARD’s kernel tracer introduced is
20% for the calculator. The maximum memory overhead is 15%
for running video editor. The measured performance overhead for
disk throughput ranges from 45% to 87%. The fairly high disk op-
eration overhead of TROGUARD is due to its logging activities to
the system’s disk in parallel. The network performance degradation
ranges from 55% to 60%. It is noteworthy that these overheads are
not permanent and go away once TROGUARD comes to a conclu-
sion on whether the running application is a trojan.
5.6 Behavioral Mimicry Attacks
One of the main challenges that behavioral-based detection solu-
tions face generally is their vulnerability against behavioral mimicry
attacks. We evaluated how TROGUARD performs in terminating
such attacks that try to pretend delivering a legitimate functional-
ity while conducting a malicious activity in the background. First,
we describe a concrete case study to show step by step how TRO-
GUARD detects a sample trojan Freesweep game application that
is downloaded from a legitimate-looking malicious website. Next,
we will present our results on 50 other mimicry attack samples.
We obtained the Freesweep game application trojan payload us-
ing the Metasploit suite [20] as a Ubuntu deb game package. The
trojan package included the original game, the exploit payload, and
a post-installation script that executed the exploitation script. Upon
execution, the malicious payload opened a socket connection se-
cretly and created a reverse shell to connect back to an adversarial
remote site.
We masqueraded a Softpedia web page as shown in Figure 11
to hold the malicious trojan game package. Consequently, the vic-
tim user was convinced to download, install and run the game on
her desktop computer. Once the victim clicked to download the
package, TROGUARD’s extension component noticed the down-
load action request in the browser. TROGUARD analyzed the down-
load website and correctly estimated the functionality class, i.e.,
game. The determined functionality class was shown to the user
through a browser popup (similar to Figure 4) with the default
option set to game. After the user’s conﬁrmation, TROGUARD
switched to the monitoring mode to trace and capture the appli-
cation’s execution footprint. Analysis of the logged data sets using
the 100-application trained model resulted in classiﬁcation of most
of the downloaded application’s data points as calculator. Figure 12
shows the calculated probability values for each functionality class,
i.e., the probability that the downloaded application is of a particu-
lar functionality class. The mismatch between the conﬁrmed func-
(cid:26)(cid:22)
(cid:26)(cid:23)
extension using terms that the (potentially non-technical) user usu-
ally sees on popular download websites and is familiar with. In
the simplest form, the user only has to conﬁrm that the applica-
tion class diplayed by the browser extension matches the class he
expected based on what he saw and read on the download page.
We believe that such design points has made TROGUARD usable
by a vast range of users. Of course, this belief has to be validated
through an actual usability study, and we intend to pursue such a
study in our future work, pending IRB approval.
Is TROGUARD useful even if it is not absolutely accu-
rate? Semi-automated detection of social engineering attacks us-
ing mostly system-level information has remained to be a very chal-
lenging problem that is also indicated by their recent increasing
popularity among attackers. TROGUARD introduces a new solution
against web-based socially engineered trojan attacks through cate-
gorization of applications’ functionality classes rather individual
applications (developed by possibly unknown third-parties). Ad-
ditionally, as our implementation is not yet optimized, both the
website analysis and application classiﬁcation accuracies can be
improved through parameter tuning as well as usage of more com-
plete techniques such as static executable analysis techniques to
estimate the application’s functionality class.
8 Conclusions
We presented TROGUARD, an effective system solution to protect
the client systems against web-based trojan attacks that make use
of social engineering techniques to convince victim users to will-
ingly download and execute a legitimate-looking malicious soft-
ware. Our results over a large set of applications show that TRO-
GUARD can effectively bridge the gap between the high-level user
perceptions and low system-level execution traces in order to block
trojan intrusions efﬁciently under real-world adversarial situations.
Acknowledgements
We appreciate the anonymous reviewers and thank our sponsor, the
Ofﬁce of Naval Research (Grant N000141210462).
9 References
[1] Trojanhunter; available at www.trojanhunter.com, 2013.
[2] R. G. Anjoy and S. K. Chakraborty. Efﬁciency of lttng as a
kernel and userspace tracer on multicore environment.
Technical report, 2010.
[3] S. Arlot and M. Lerasle. V-fold cross-validation and v-fold
penalization in least-squares density estimation. 2012.
[4] U. Bayer, P. M. Comparetti, C. Hlauschek, C. Krügel, and
E. Kirda. Scalable, behavior-based malware clustering. In
NDSS. The Internet Society, 2009.
[5] U. Bayer, I. Habibi, D. Balzarotti, E. Kirda, and C. Kruegel.
A view on current malware behaviors. In Proceedings of the
2nd USENIX conference on Large-scale exploits and
emergent threats: botnets, spyware, worms, and more,
LEET’09, pages 8–8, Berkeley, CA, USA, 2009. USENIX
Association.
[6] N. Carlini, A. P. Felt, and D. Wagner. An evaluation of the
google chrome extension security architecture. In
Proceedings of the 21st USENIX conference on Security
symposium, Security’12, pages 7–7, Berkeley, CA, USA,
2012. USENIX Association.
[7] M. Christodorescu, S. Jha, and C. Kruegel. Mining
speciﬁcations of malicious behavior. In 6th joint meeting of
the European Software Engineering Conference and the
ACM SIGSOFT International Symposium on Foundations of
Software Engineering, pages 5–14, 2007.
[8] S.-Y. Dai, Y. Fyodor, M.-W. Wu, Y. Huang, and S.-Y. Kuo.
Holography: a behavior-based proﬁler for malware analysis.
Software: Practice and Experience, 42(9):1107–1136, 2012.
[9] P. J. Denning and R. D. Riehle. The profession of it is
software engineering engineering? Communications of the
ACM, 52(3):24–26, 2009.
[10] M. Desnoyers and M. Dagenais. The lttng tracer: A low
impact performance and behavior monitor for gnu/linux. In
Proceedings of the 27th Annual ACM Symposium on Applied
Computing, pages 354–359. ACM, 2012.
[11] L. Garber. Security, privacy, and policy roundup. IEEE
Security & Privacy, pages 15–17, 2012.
[12] M. Hall, E. Frank, G. Holmes, B. Pfahringer, P. Reutemann,
and I. H. Witten. The weka data mining software: an update.
ACM SIGKDD Explorations Newsletter, 11(1):10–18, 2009.
[13] E. Kirda, C. Kruegel, G. Banks, G. Vigna, and R. A.
Kemmerer. Behavior-based spyware detection. In
Proceedings of the 15th conference on USENIX Security
Symposium - Volume 15, USENIX-SS’06, Berkeley, CA,
USA, 2006. USENIX Association.
[14] C. Kuo, F. Schneider, C. Jackson, D. Mountain, and
T. Winograd. Google safe browsing. project at google. Inc.,
June–August, 2005.
[15] A. Lanzi, D. Balzarotti, C. Kruegel, M. Christodorescu, and
E. Kirda. Accessminer: using system-centric models for
malware protection. In Proceedings of the 17th ACM
conference on Computer and communications security, CCS
’10, pages 399–412, New York, NY, USA, 2010. ACM.
[16] T. LEE, J. J. MODY, Y. L. LIN, A. M. MARINESCU, and
A. A. POLYAKOV. Application behavioral classiﬁcation, 06
2007.
[17] D. Lo, H. Cheng, J. Han, S.-C. Khoo, and C. Sun.
Classiﬁcation of software behaviors for failure detection: a
discriminative pattern mining approach. In Proceedings of
the 15th ACM SIGKDD international conference on
Knowledge discovery and data mining, KDD ’09, pages
557–566, New York, NY, USA, 2009. ACM.
[18] L. Lu, V. Yegneswaran, P. Porras, and W. Lee. Blade: an
attack-agnostic approach for preventing drive-by malware
infections. In Proceedings of the 17th ACM conference on
Computer and communications security, CCS ’10, pages
440–450, New York, NY, USA, 2010. ACM.
[19] T. . malicious programs for Mac OS X. Mcafee antivirus
solution; available at http://www.securelist.com, 2012.
[20] D. Maynor. Metasploit Toolkit for Penetration Testing,
Exploit Development, and Vulnerability Research. Syngress,
2007.
[21] McAfee. Mcafee antivirus solution; available at
http://www.mcafee.com, 2013.
[22] A. Moser, C. Kruegel, and E. Kirda. Exploring multiple
execution paths for malware analysis. In Proceedings of the
2007 IEEE Symposium on Security and Privacy, SP ’07,
pages 231–245, Washington, DC, USA, 2007. IEEE
Computer Society.
[23] R. Naraine. Adobe: Beware of fake ﬂash downloads;
available at http://www.zdnet.com, 2008.
[24] Y. Okazaki, I. Sato, and S. Goto. A new intrusion detection
method based on process proﬁling. In Applications and the
Internet, 2002. (SAINT 2002). Proceedings. 2002 Symposium
on, pages 82 –90, 2002.
[25] K. Rieck, T. Holz, C. Willems, P. Düssel, and P. Laskov.
Learning and classiﬁcation of malware behavior. In
Proceedings of the 5th international conference on Detection
of Intrusions and Malware, and Vulnerability Assessment,
DIMVA ’08, pages 108–125, Berlin, Heidelberg, 2008.
Springer-Verlag.
[26] K. Rieck, P. Trinius, C. Willems, and T. Holz. Automatic
analysis of malware behavior using machine learning. J.
Comput. Secur., 19(4):639–668, dec 2011.
[27] J. H. Saltzer and F. Kaashoek. Principles of computer system
design: an introduction. Morgan Kaufmann Pub, 2009.
[28] R. Smith. An overview of the tesseract ocr engine. In Proc.
Ninth Int. Conference on Document Analysis and
Recognition (ICDAR), pages 629–633, 2007.
[29] D. Toupin. Using tracing to diagnose or monitor systems.
Software, IEEE, 28(1):87–91, 2011.
[30] Wikipedia. Computer keyboard — Wikipedia, the free
encyclopedia, 2013.
[31] J. Zhang and R. J. Figueiredo. Application classiﬁcation
through monitoring and learning of resource consumption
patterns. In Proceedings of the 20th international conference
on Parallel and distributed processing, IPDPS’06, pages
144–144, Washington, DC, USA, 2006. IEEE Computer
Society.
[32] E. Zini. A cute introduction to debtags. In Proceedings of the
5th annual Debian Conference, pages 59–74, 2005.
(cid:26)(cid:24)