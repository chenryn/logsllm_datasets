title:EPIC: Every Packet Is Checked in the Data Plane of a Path-Aware
Internet
author:Markus Legner and
Tobias Klenze and
Marc Wyss and
Christoph Sprenger and
Adrian Perrig
EPIC: Every Packet Is Checked in the Data Plane 
of a Path-Aware Internet
Markus Legner, Tobias Klenze, Marc Wyss, Christoph Sprenger, and 
Adrian Perrig, ETH Zurich
https://www.usenix.org/conference/usenixsecurity20/presentation/legner
This paper is included in the Proceedings of the 29th USENIX Security Symposium.August 12–14, 2020978-1-939133-17-5Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.EPIC: Every Packet Is Checked in the Data Plane of a Path-Aware Internet
Markus Legner, Tobias Klenze, Marc Wyss, Christoph Sprenger, and Adrian Perrig
Department of Computer Science, ETH Zurich, Switzerland
{markus.legner, tobias.klenze, marc.wyss, sprenger, adrian.perrig}@inf.ethz.ch
Abstract
An exciting insight of recent networking research has been
that path-aware networking architectures are able to funda-
mentally solve many of the security issues of today’s Internet,
while increasing overall efﬁciency and giving control over
path selection to end hosts. In this paper, we consider three
important issues related to this new networking paradigm:
First, network operators still need to be able to impose their
own policies to rule out uneconomical paths and to enforce
these decisions on the data plane. Second, end hosts should
be able to verify that their forwarding decisions are actually
followed by the network. Finally, both intermediate routers
and recipients should be able to authenticate the source of
packets. These properties have been considered by previous
work, but there is no existing system that achieves both strong
security guarantees and high efﬁciency.
We propose EPIC, a family of data-plane protocols that
provide increasingly strong security properties, addressing
all three described requirements. The EPIC protocols have
signiﬁcantly lower communication overhead than comparable
systems: for realistic path lengths, the overhead is 3–5 times
smaller compared to the state-of-the-art systems OPT and
ICING. Our prototype implementation is able to saturate a
40 Gbps link even on commodity hardware due to the use of
only few highly efﬁcient symmetric cryptographic operations
in the forwarding process. Thus, by ensuring that every packet
is checked at every hop, we make an important step towards
an efﬁcient and secure future Internet.
1 Introduction
In the current Internet, end hosts lack control over the paths
that their packets take. While they can sometimes select the
ﬁrst hop (using multi-homing) [16], the path beyond it is com-
pletely determined by the network. This leads to inefﬁcien-
cies: The network has to choose paths that balance sometimes
conﬂicting properties such as low latency and high bandwidth.
All packets traverse these chosen paths instead of following
the routes that best fulﬁll a particular ﬂow’s requirements. The
lack of path control also leads to many other problems, such
as compliance, when data is not allowed to leave a particular
jurisdiction; privacy leaks, when BGP hijacking attacks are
used to de-anonymize users [43]; or re-routing attacks being
used to obtain fake certiﬁcates [10]. Another shortcoming of
the current Internet is that there is no way for an end user to
verify the actual path a packet took on its way to the recipi-
ent. While applications such as traceroute enable network
probing, the obtained information cannot be trusted due to
the lack of authentication [2, 4].
Over the past 15 years, different architectures for a new
path-aware Internet have been proposed, attempting to give
transparency and choices to end hosts [3, 9, 22, 37–39, 46, 47].
Like most modern networking protocols, they are composed
of two parts: (i) the low-bandwidth control plane, in which
neighboring nodes exchange topology and path information,
and (ii) the high-bandwidth data plane, in which data packets
are forwarded across the network along the paths discovered
in the control plane. In path-aware networking, paths are
exposed to hosts, allowing them to embed a path of their
choice in the header of their packets (packet-carried forward-
ing state). The data plane then ensures that packets traverse
the network along their source-selected paths. However, to
balance control with autonomous systems (ASes), such as
Internet service and transit providers, end hosts cannot use
arbitrary paths but need to choose from a set of preselected
paths created by the ASes. This restriction, which we call path
authorization, serves both the economic interests of ASes and
network availability, for instance by ruling out forwarding
loops. It can be enforced either by storing allowed paths on
each border router [22, 46], or by cryptographically secur-
ing the publicly distributed path information and verifying
it during forwarding [3, 9, 36–39]. Stateful solutions scale
poorly to the inter-domain context, can suffer from inconsis-
tencies across distributed nodes, and are less efﬁcient than
cryptographic solutions [28]. We thus focus on systems that
use cryptographic authenticators for each (AS-level) hop in
the header of packets. In existing systems, ﬁxing the length
of these authenticators poses a dilemma: sufﬁciently long
authenticators cause an unacceptably high communication
USENIX Association
29th USENIX Security Symposium    541
overhead, but short and efﬁcient authenticators are insecure:
An attacker can conduct an online brute-force attack, i.e., send
packets with fabricated authenticators between two hosts un-
der his control until a packet is successfully forwarded. So
far, there is no solution that is both efﬁcient and secure.
Parallel to the development of next-generation Internet ar-
chitectures, recognition grew that end hosts and routers need
to authenticate the source and contents of packets (source and
packet authentication), and that the source and destination
need to be able to reconstruct and validate a packet’s actual
path (path validation) [11–13, 15, 28, 36, 45]. A prime appli-
cation of source authentication is defending against denial-of-
service (DoS) attacks, in which network links or end hosts
are ﬂooded with excessive amounts of trafﬁc. These attacks
are often enabled by the attacker’s ability to spoof its own
address; source authentication at network routers protects
both the network and the destination by ﬁltering unauthentic
packets early and before they reach any bottleneck links. In
addition, more sophisticated DoS-defense mechanisms such
as bandwidth-reservation systems fundamentally depend on
an efﬁcient source-authentication mechanism [6]. On the
other hand, path validation protects the path choices made by
the source of packets; if messages need to follow a speciﬁc
path due to, e.g., compliance reasons, it is crucial that end
hosts can check whether their path directive is actually obeyed
by on-path routers. Also, in a path-aware Internet, end hosts
may be able to choose between several paths of different prop-
erties and costs; if using a more expensive path (e.g., through
a satellite network), end hosts have a legitimate interest in
obtaining proof that this path was actually traversed.
While solutions exist that provide source authentication
and path validation, they come with signiﬁcant communica-
tion and computation overhead: ICING [36] and OPT [28,37]
have an overhead of hundreds of bytes per packet for realis-
tic path lengths. A recent proposal, PPV [45], reduces the
overhead and reaches practically feasible efﬁciency, but only
veriﬁes individual links on the path probabilistically and only
enables source authentication for the destination. However, as
described above, this is insufﬁcient for effectively defending
against DoS attacks; for this application it is necessary that
every packet be checked at every hop.
In this paper, we propose EPIC, a family of cryptographic
data-plane protocols with increasingly strong security proper-
ties, including path authorization, source authentication, and
path validation. The key insight of our protocols is how they
escape the dilemma between low communication overhead
and security: On the one hand, we use relatively short per-hop
authentication ﬁelds to limit communication overhead. On
the other hand, we ensure that even strong attackers, with
the ability to forge a single one of these ﬁelds by sending a
large number of packets, cannot cause signiﬁcant damage. We
achieve this in two ways: First, by binding an authenticator
to a speciﬁc packet, EPIC ensures that a forged authenticator
does not allow an attacker to send additional packets and thus
prevents volumetric DoS attacks. Second, EPIC uses a longer
authentication ﬁeld for the destination which is unforgeable
for even strong attackers, such that the very few packets that
were able to deceive intermediate routers are detectable at
the destination. As a result of short per-hop authenticators,
EPIC has substantially lower communication overhead, which
scales better with the path length than state-of-the-art proto-
cols like ICING [36] and OPT [28].
Our main contributions are the following:
• We propose EPIC, a series of protocols that use unique
authenticators for each packet to resolve the security–
efﬁciency dilemma in the data plane of path-aware Inter-
net architectures.
• We propose a new attacker model that combines a local-
ized Dolev–Yao [17] adversary with a cryptographic or-
acle. This allows us to express EPIC’s resilience against
even powerful attackers. EPIC achieves all desirable
security goals in this stronger attacker model.
• We show that EPIC has a communication overhead that
is 3–5 times smaller compared to the state-of-the-art
solutions OPT and ICING for realistic path lengths.
• We implement EPIC with Intel’s Data Plane Develop-
ment Kit (DPDK) [18] and show that our router imple-
mentation running on commodity hardware can saturate
a 40 Gbps link while using only four processing cores.
2 Problem Deﬁnition
We target the problem of securing the inter-domain data-plane
of path-aware Internet architectures. The Internet is a network
of networks, which are commonly called autonomous sys-
tems (ASes). Each AS has centralized control within its own
network, which simpliﬁes managing and securing the com-
munication, e.g., through software-deﬁned networking [8].
By contrast, networking between ASes requires coordina-
tion between separate entities without central control. Our
work focuses on securing this inter-AS communication. We
exclude the equally important, but orthogonal problem of
securing intra-AS networking. Thus, in line with previous
work [35], we abstract from the internal networks of ASes
and consider all security properties at the level of ASes (or
the end hosts that connect to them); in particular, throughout
the remainder of this paper, “hop” stands for “AS-level hop”.
We also only focus on securing the data plane. We assume
that the control plane is secure and constructs paths according
to the ASes’ policies and the participants of our data-plane
protocols obtain the required symmetric keys and path infor-
mation via secure control-plane channels. While securing key
distribution and other control-plane functionality is itself a
challenging task, it is orthogonal to the challenges for the data
plane: as we argue below, in the control plane, asymmetric
cryptography can be used to provide strong security guaran-
tees, whereas in the data plane only symmetric cryptography
is sufﬁciently efﬁcient. In practice, Internet architectures im-
plement a public-key infrastructure to secure control-plane
542    29th USENIX Security Symposium
USENIX Association
operations, such as the Resource Public Key Infrastructure
(RPKI) of today’s Internet [30].
In our security analysis (§5), we analyze our protocols with
respect to a localized variant of the Dolev–Yao attacker that
fully controls some ASes. EPIC protects the interests of both
end hosts and ASes against such attackers; speciﬁcally the
properties that we present in this section.
2.1 Security Requirements for End Hosts
Based on the motivation provided in the introduction, we
consider two fundamental security properties for end hosts:
path validation and packet authentication.
While path control—provided by the underlying path-
aware Internet architecture—allows sources to select a for-
warding path, it is by itself insufﬁcient to protect the security
and privacy interests of end hosts as it does not provide any
guarantees that the directives are actually obeyed. We aim to
additionally achieve path validation, i.e., enabling the desti-
nation of a packet to verify that the actually traversed path
of the packet matches the path intended by the sender and
allowing the source to also verify this proof.
Packet authentication provides proof of a packet’s origin
and content to the destination, preventing source-spooﬁng or
packet modiﬁcation that are possible in today’s Internet.
The authentication and path-validation properties for end
hosts presented in this work require source and destina-
tion hosts to trust both of their ASes due to the key-
distribution mechanisms—a trust assumption also found in
similar schemes [28, 37]. Due to this additional trust assump-
tion, network-level authentication does not replace the secu-
rity offered by higher-layer protocols such as TLS. At the
same time, higher-level authentication is not a replacement
for network-layer authentication: network-layer schemes can
be used for packet ﬁltering that sets in prior to stateful TCP
and TLS handshakes, and is thus highly efﬁcient.
2.2 Security Requirements for ASes
For ASes, we consider two important security properties: path
authorization and source authentication.
Each AS is driven by its own economic interests, which
gives rise to path policies that collectively deﬁne a set of
authorized paths. The control plane is responsible for authen-
tically and efﬁciently discovering and distributing these paths
(see §3.1) and ensuring that they do not contain loops and
fulﬁll the policies of ASes. However, a secure control plane
cannot substitute a secure data plane: the data plane needs
to provide path authorization, i.e., enforce the decisions that
ASes make in the control plane for data trafﬁc. Path authoriza-
tion ensures that malicious end hosts cannot create packets
that will be forwarded along unauthorized paths.
In many DoS attacks on the current Internet, the attacker
spoofs the origin of attack trafﬁc. Source authentication en-
sures that routers can validate the origin of each packet, thus
ruling out source-spooﬁng attacks. While some protocols
(e.g., IPSec) enable source authentication, they typically only
ﬁlter trafﬁc at the destination. Dropping malicious trafﬁc
early is not only more efﬁcient than destination ﬁltering, it
also protects against DoS attacks that target the networking
infrastructure itself [26,42], rather than an end host: source au-
thentication by routers ensures that trafﬁc is ﬁltered before any
bottleneck links are reached. Furthermore, sophisticated DoS-
defense schemes such as bandwidth-reservation systems [6]
rely on source authentication to prevent adversaries from us-
ing up reserved bandwidth of honest sources.
2.3 Efﬁciency Requirements
The need to keep ever-growing forwarding tables on routers of
the current Internet requires expensive and energy-intensive
hardware and fundamentally limits its scalability. It is there-
fore essential that a future Internet minimizes router state.
The data plane must also have low communication and
computation overhead and minimize additional latency dur-
ing setup and processing. A simple calculation underscores
this: Consider 400 Gbps links, which are currently being de-
ployed in the Internet, and 500 B packets. To saturate the
link, a router needs to process one packet every 10 ns. Even
taking into account pipelining and parallelism, this shows
that packet processing in the data plane must proceed within
hundreds of nanoseconds—ruling out any asymmetric cryp-
tography, which requires several microseconds for a single
operation [19]. In contrast, block ciphers with hardware accel-
eration such as AES can be computed within tens of nanosec-
onds and are suitable to use in the data plane [14, 23].
3 Background and Deﬁnitions
To provide the necessary context for constructing our data-
plane protocols, we sketch out an abstract path-aware con-
trol plane, in particular the path-exploration and -registration
mechanisms. This description is based on SCION’s control
plane [37] but abstracts from many low-level details. We
postpone the discussion of how EPIC can be integrated into
real architectures to §7. Table 1 on the next page summarizes
the notation and acronyms.
3.1 Path Exploration and Registration
While we consider paths at an AS-level granularity, we do
include the ingress and egress interface IDs of each (AS-level)
hop. Each AS is free to assign these identiﬁers to its exter-
nal connections without coordination with other ASes. The
interface IDs are recorded in the control plane and later used
for packet forwarding in the data plane. To discover paths
between any pair of ASes, each AS periodically initiates path
exploration by sending beacons to their neighboring ASes.
An AS can decide which paths to authorize by forwarding the
authenticated beacons to neighbors and registering them at
public path servers.
A beacon is initialized with an absolute timestamp TSpath.
An AS disseminating it adds its own hop information (HI),
USENIX Association
29th USENIX Security Symposium    543
which is used in the data plane as a forwarding directive; a
cryptographic token σ called the hop authenticator, which
allows the data-plane routers to verify the correctness of the
hop information; and a signature, which protects the beacon’s
authenticity in the control plane and is removed when beacons
are turned into data-plane paths by end hosts. HI consists of
an expiration time tsexp relative to the beacon’s timestamp;
the ingress interface, through which the beacon was received;
and the egress interface, through which it is forwarded.
A crucial observation is that ASes can make decisions dur-
ing path exploration about which paths to authorize based on
their own economic interests. To that end, ASes can inspect
the complete upstream path and only forward beacons that do
not contain loops and are consistent with their path policies
to their customers. Path authorization for some AS A, which
we achieve with our data-plane protocols, builds on the hop
authenticator σA: this cryptographic tag is calculated using
a symmetric secret key KA (which is shared only among net-
working entities within A) and can include the upstream path
in addition to A’s own hop information.
3.2 Path Construction and Forwarding
To simplify the presentation, we assume that packets are
always forwarded in opposite direction of beaconing. To
create a forwarding path, an end host HS queries its local
path server (located in the same AS) for beacons from the
intended destination AS A(cid:96) to his own AS A1. HS selects a
beacon from those offered by the path server, and veriﬁes its
signatures. By removing the signatures from the beacon, the
beacon is turned into a path that can be directly embedded
into the packet. A data-plane packet thus contains the entire
forwarding state. For a path from A1 to A(cid:96) it has the format
PACKET := (PATH || VALHD || P) ,
PATH :=(cid:0)TSpath || SRC || DEST || HI1 || ··· || HI(cid:96)
VALHD :=(cid:0)tspkt || S1 || V1 || ··· || S(cid:96) || V(cid:96) || VSD
(cid:1),
(cid:1), (1b)
(1a)
(1c)
where P denotes the packet’s payload, SRC := (A1:HS) de-
notes the source, and DEST := (A(cid:96):HD) denotes the desti-
nation. VALHD contains ﬁelds necessary for verifying the
packet: The timestamp tspkt indicates the time at which the
packet is sent relative to TSpath and is used to provide fresh-
ness. The segment identiﬁer Si is a cryptographic code based
on the hop authenticator σi used for path authorization. It
can be created from σi and uniquely identiﬁes the portion of