## 前言
Ghidra提供了创建Processor的功能，这篇文章以强网杯2020年初赛的[QWBLogin](https://github.com/Ma3k4H3d/2020-QWB-PWN/blob/master/QWBlogin.zip)为例，介绍如何创建一个Processor，将二进制代码翻译为汇编
## 准备
### 安装Eclipse
为了创建一个Processor，首先需要安装[Eclipse](https://www.eclipse.org/downloads/)，这里安装的过程就不多说了
### 安装GhidraDev插件
插件的路径在Ghidra的安装目录下 Extensions/Eclipse/GhidraDev/GhidraDev-2.1.1.zip
具体安装的步骤
  * Click Help → Install New Software...
  * Click Add...
  * Click Archive...
  * Select GhidraDev zip file from /Extensions/Eclipse/GhidraDev/
  * Click OK (name field can be blank)
  * Check Ghidra category (or GhidraDev entry)
  * Click Next
  * Click Next
  * Accept the terms of the license agreement
  * Click Finish
  * Click Install anyway
  * Click Restart Now
### 创建项目
选择File->New->Project，然后再选择Ghidra Module Project
起一个项目名字
下一个，只选择Processor
然后选择Ghidra安装的目录
data/languages目录下有Processor相关的示例文件
这里建议将文件名修改一下，将skel修改为qwbvm（File->Rename)
## Processor定义
因为这是一个Ghidra教程而不是QWBLogin这道题的writeup，因此这里跳过逆向过程，直接给出Processor各种指令的定义
### 指令结构
以下是指令的格式，x1和x2不一定有，而且长度也不定
    +-----------------------+-------------+-----------+-----------+-----------+
    |opcode                 | inst_switch |  length   |   x1      |    x2     |
    +-----------------------+-------------+-----------+-----------+-----------+
    +-----------------------+-------------+-----------+-----------+-----------+
    |1byte                  |  4bit       |   4bit    |  ?        |    ?      |
    +-----------------------+-------------+-----------+-----------+-----------+
### 指令表
指令 | opcode | inst_switch | length | x1 | x2  
---|---|---|---|---|---  
halt | 0 | 0 |  |  |  
mov x1, x2 | 1 | 0 | [1-4] | reg | reg  
mov x1, bss[x2] | 1 | 1 | [1-4] | reg | imm64  
mov bss[x1], x2 | 1 | 2 | [1-4] | imm64 | reg  
mov x1, stack[x2] | 1 | 3 | [1-4] | reg | imm64  
mov stack[x1], x2 | 1 | 4 | [1-4] | imm64 | reg  
mov x1, x2 | 1 | 5 | [1-4] | reg | imm  
mov bss[x1],x2 | 1 | 0xb | [1-4] | reg | reg  
mov x1, bss[x2] | 1 | 0xc | [1-4] | reg | reg  
mov stack[x1],x2 | 1 | 0xd | [1-4] | reg | reg  
mov x1, stack[x2] | 1 | 0xe | [1-4] | reg | reg  
add x1, x2 | 2 | 0 | [1-4] | reg | reg  
add x1, x2 | 2 | 5 | [1-4] | reg | imm  
dec x1, x2 | 3 | 0 | [1-4] | reg | reg  
dec x1, x2 | 3 | 5 | [1-4] | reg | imm  
mul x1, x2 | 4 | 0 | [1-4] | reg | reg  
mul x1, x2 | 4 | 5 | [1-4] | reg | imm  
div x1, x2 | 5 | 0 | [1-4] | reg | reg  
div x1, x2 | 5 | 5 | [1-4] | reg | imm  
mod x1, x2 | 6 | 0 | [1-4] | reg | reg  
mod x1, x2 | 6 | 5 | [1-4] | reg | imm  
xor x1, x2 | 7 | 0 | [1-4] | reg | reg  
xor x1, x2 | 7 | 5 | [1-4] | reg | imm  
or x1, x2 | 8 | 0 | [1-4] | reg | reg  
or x1, x2 | 8 | 5 | [1-4] | reg | imm  
and x1, x2 | 9 | 0 | [1-4] | reg | reg  
and x1, x2 | 9 | 5 | [1-4] | reg | imm  
shl x1, x2 | 10 | 0 | [1-4] | reg | reg  
shl x1, x2 | 10 | 5 | [1-4] | reg | imm  
shr x1, x2 | 11 | 0 | [1-4] | reg | reg  
shr x1, x2 | 11 | 5 | [1-4] | reg | imm  
not x1 | 12 | 6 | [1-4] | reg |  
pop x1 | 13 | 6 | [1-4] | reg |  
push x1 | 14 | 6 | [1-4] | reg |  
call x1 | 16 | 6 |  | reg |  
call x1 | 16 | 7 |  | reladdr |  
ret | 17 |  |  |  |  
cmp x1, x2 | 18 | 0 | [1-4] | reg | reg  
cmp x1, x2 | 18 | 5 | [1-4] | reg | imm  
jmp x1 | 19 | 6 |  | reg |  
jmp x1 | 19 | 7 |  | reladdr |  
jmp bss[x1] | 19 | 8 |  | imm64 |  
syscall | 32 |  |  |  
表中省略了一部分指令，为je/jne/jle/jg/jl/jge/jbe/ja/jnb/jb，和jmp基本一样，除了opcode，opcode的值从20到29
### 寄存器
寄存器 | 定义  
---|---  
r0-r15 | 普通寄存器  
sp | 栈寄存器  
pc | 程序计数寄存器  
## 创建Processor
可以看到目录下面有7个文件，每个文件的作用都不太一样
  * qwbvm.cspec 编译器定义，例如调用约定的设置，栈寄存器是哪个
  * qwbvm.ldefs 语言的定义，例如大小端，位宽
  * qwbvm.opinion 定义可以使用的加载器，例如ELF、PE加载器
  * qwbvm.pspec 处理器定义，定义寄存器，各种变量
  * qwbvm.sinc, qwbvm.slaspec 定义寄存器，指令等，大部分时间都花在这两个文件上
接下来一个个修改文件吧
### qwbvm.pspec
首先来定义寄存器，定义了pc和r0-r15寄存器
### qwbvm.cspec
这里定义调用约定，函数的前3个参数通过r0, r1, r2传递，返回值通过r0传递
### qwbvm.ldefs
修改processor的名字，位宽为64位，sla文件为qwbvm.sla，processor文件为qwbvm.pspec，compiler文件为qwbvm.cspec
        QWB VM Language Module
### qwbvm.opinion
这个是加载器的定义文件，但是因为我们加载的是纯二进制文件，这个文件不用改
### qwbvm.slaspec
首先定义几个内存空间, 分别为ram，bss，register，size都为8
    define space ram     type=ram_space      size=8  default;
    define space bss     type=ram_space      size=8;
    define space register type=register_space size=8;
然后定义普通寄存器和特殊寄存器，contextreg是上下文寄存器，后面定义指令的时候会用到，辅助解析指令
    define register offset=0x00 size=8 [r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15];
    define register offset=0x100 size=8 [sp pc];
    define register offset=0x200 size=8 contextreg;
最后把qwbvm.sinc include进来
    @include "qwbvm.sinc"
完整的内容如下
    define endian=little;
    define alignment=1;
    define space ram     type=ram_space      size=2  default;
    define space bss     type=ram_space      size=2;
    define space register type=register_space size=8;
    define register offset=0x00 size=8 [r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15];
    define register offset=0x100 size=8 [sp pc];
    define register offset=0x200 size=8 contextreg;
    # Include contents of qwbvm.sinc file
    @include "qwbvm.sinc"
### qwbvm.sinc
前面定义完寄存器相关的内容，这里主要定义指令的格式
首先介绍一下token
#### token
token是组成instruction的元素，也就是说，首先需要将二进制指令解析为一个个token，然后由token组成instruction