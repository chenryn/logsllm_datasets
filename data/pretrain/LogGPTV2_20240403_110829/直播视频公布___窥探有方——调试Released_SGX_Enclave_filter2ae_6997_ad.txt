    /* Enclave Flags Bit Masks */
    #define SGX_FLAGS_INITTED 0x0000000000000001ULL /* If set, then the enclave is initialized */
    #define SGX_FLAGS_DEBUG 0x0000000000000002ULL /* If set, then the enclave is debug */
    #define SGX_FLAGS_MODE64BIT 0x0000000000000004ULL /* If set, then the enclave is 64 bit */
    #define SGX_FLAGS_PROVISION_KEY 0x0000000000000010ULL /* If set, then the enclave has access to provision key */
    #define SGX_FLAGS_EINITTOKEN_KEY 0x0000000000000020ULL /* If set, then the enclave has access to EINITTOKEN key */
    #define SGX_FLAGS_RESERVED       (~(SGX_FLAGS_INITTED | SGX_FLAGS_DEBUG | SGX_FLAGS_MODE64BIT | SGX_FLAGS_PROVISION_KEY | SGX_FLAGS_EINITTOKEN_KEY))
表9 enclave_css_t数据结构
    typedef struct _enclave_css_t {        /* 1808 bytes */
        css_header_t    header;             /* (0) */
        css_key_t       key;                /* (128) */
        css_body_t      body;               /* (900) */
        css_buffer_t    buffer;             /* (1028) */
    } enclave_css_t;
    typedef struct _css_buffer_t {         /* 780 bytes */
        uint8_t  reserved[12];         /* (1028) Must be 0 */
        uint8_t  q1[SE_KEY_SIZE];     /* (1040) Q1 value for RSA Signature Verification */
        uint8_t  q2[SE_KEY_SIZE];    /* (1424) Q2 value for RSA Signature Verification */
    } css_buffer_t;
    其中，q1 = floor(Signature^2 / Modulus);
    q2 = floor((Signature^3 - q1 * Signature * Modulus) / Modulus);
表9 enclave_css_t数据结构（续）
    typedef struct _css_header_t {        /* 128 bytes */
        uint8_t  header[12];       /* (0) must be (06000000E100000000000100H) */
        uint32_t type;            /* (12) bit 31: 0 = prod, 1 = debug; Bit 30-0: Must be zero */
        uint32_t module_vendor;             /* (16) Intel=0x8086, ISV=0x0000 */
        uint32_t date;                      /* (20) build date as yyyymmdd */
        uint8_t  header2[16];   /* (24) must be (01010000600000006000000001000000H) */
        uint32_t hw_version;  /* (40) For Launch Enclaves: HWVERSION != 0. Others, HWVERSION = 0 */
        uint8_t  reserved[84];              /* (44) Must be 0 */
    } css_header_t;
    typedef struct _css_key_t {           /* 772 bytes */
        uint8_t modulus[SE_KEY_SIZE];    /* (128) Module Public Key (keylength=3072 bits) */
        uint8_t exponent[SE_EXPONENT_SIZE]; /* (512) RSA Exponent = 3 */
        uint8_t signature[SE_KEY_SIZE];     /* (516) Signature over Header and Body */
    } css_key_t;
    typedef struct _css_body_t {            /* 128 bytes */
        sgx_misc_select_t   misc_select;    /* (900) The MISCSELECT that must be set */
        sgx_misc_select_t   misc_mask;      /* (904) Mask of MISCSELECT to enforce */
        uint8_t             reserved[20];   /* (908) Reserved. Must be 0. */
        sgx_attributes_t    attributes;     /* (928) Enclave Attributes that must be set */
        sgx_attributes_t    attribute_mask; /* (944) Mask of Attributes to Enforce */
        sgx_measurement_t   enclave_hash;   /* (960) MRENCLAVE - (32 bytes) */
        uint8_t             reserved2[32];  /* (992) Must be 0 */
        uint16_t            isv_prod_id;    /* (1024) ISV assigned Product ID */
        uint16_t            isv_svn;        /* (1026) ISV assigned SVN */
    } css_body_t;
enclave_css域代表的是Enclave Signature
Structure，其代码形式的数据结构enclave_css_t如表9所示。该数据结构中必须修改body域中的attributes及对应的attribute_mask，将attributes的flags置上SGX_FLAGS_DEBUG，将attribute_mask的flags的
SGX_FLAGS_DEBUG清零；同时需要修改header域的type，将其第31位置1，代表需要debug；再将header域的module_vendor置成0，伪装成非Intel发布。因为修改header和body影响了key域的signature签名，所以须对Enclave
Signature Structure进行重签名，操作时将key域的modulus置换成Enclave debug
私钥对应的公钥，再使用私钥对Enclave Signature
Structure的header和body域进行签名。因为key域的改变，buffer域的q1和q2也需要根据公式
q1 = floor(Signature^2 / Modulus);
q2 = floor((Signature^3 – q1 * Signature * Modulus) / Modulus);
进行修正 。
至此，将Released
Enclave转换成debug版本已经呼之欲出，我们通过编写一个sgx_repack_tool工具将上述的修改操作自动化完成，将enclave_release.signed.so的metadata的相应位域修改后生成enclave_debug.signed.so，这样通过SGX
SDK发布的sgx-gdb工具可以对enclave_debug.signed.so进行调试。如图11所示，将随同 SGX
SDK一起发布Samplecode的Enclave_private.pem和enclave_release.signed.so文件做为输入，经过sgx_repack_tool
工具转换后生成可debug的enclave_debug.signed.so。
图11 sgx_repack_tool
静态转换法所需的修改点，总结如表11所示。
表11 需要修改的metadata数据域
序号 | 数据域  
---|---  
1 | Metadata.version  
2 | Metadata.attributes.flags  
3 | SIGSTRUCT.TYPE  
4 | SIGSTRUCT.VENDOR  
5 | SIGSTRUCT. ATTRIBUTES  
6 | SIGSTRUCT.ATTRIBUTEMASK  
7 | SIGSTRUCT. MODULUS  
8 | SIGSTRUCT.SIGNATURE  
9 | SIGSTRUCT.Q1  
10 | SIGSTRUCT.Q2  
## 5 Released Enclave to Debug动态转换法
静态转换法需要事先拿到enclave_release.sign.so后转换，当运行Enclave的时候还需要在Ring0程序创建Enclave的API
sgx_create_enclave将Debug_Flag 参数置1，实现上可通过HOOK
Ring0的Application的sgx_create_enclave
，将其Debug_Flag参数置1。但这样使用起来存在一定的局限性，本节探究一种更高级的方法，不需要HOOK
Ring0的Application,也不需要修改enclave_release.sign.so，就在用户正常使用SGX
Application的时候动态修改，实现debug无感知。我们称这种方法为Released Enclave to Debug动态转换法。
动态转换法的关键是修改Enclave的SECS.ATTRIBUTES.DEBUG,但SECS对Enclave外所有程序不可见。因此从SECS的创建入手，即Enclave的ECREATE和EINIT。ECREATE负责创建SECS的EPC页，在其参数secs上直接修改两处：
  1. secs.attributes |= SGX_FLAGS_DEBUG
  2. secs.mrsigner 替换成我们自己的debug模式的公钥的sha256
即可。比较复杂的是EINIT，上文分析EINIT过程可见，EINIT所需的参数SIGSTRUCT、EINITTOKEN这两个数据结构对普通应用程序可见，SECS的初始化依赖SIGSTRUCT，如若成功在SIGSTRUCT、EINITTOKEN里修改了DEBUG属性，那么SECS.ATTRIBUTES.DEBUG也将成功被置位，这样Enclave就变得可被debug。SIGSTRUCT的修改轻而易举，修改后仅需注意使用debug
密钥重新生成新的签名即可，关键问题在于EINITTOKEN。EINITTOKEN由LE生成，生成后虽然对普通程序可见，但是其内容经过LE
key签名，我们无法获取LE
key,意味着修改EINITTOKEN后而没有重签名，在EINIT时对EINITTOKEN的校验将会失败。那么，能不能在EINITTOKEN生成的过程下手，将其内容篡改呢？答案是肯定的。下面分析EINITTOKEN的生成过程。
EINITTOKEN的生成逻辑如图12所示，在Linux版本的SGX中，LE 属于Architectural
Enclave，随SDK一起分发，运行时受aesm（Architectural Enclave Service
Manager）守护进程管理。需EINITTOKEN时，应用程序将Enclave的MRENCLAVE、MRSIGNER、ATTRIBUTES等以protobuf形式封包，通过socket方式向aesm发起请求，aesm调用LE生成EINITTOKEN，再以protobuf封装EINITTOKEN
图12 EINITTOKEN生成逻辑
通过socket方式返回给应用程序。如若在此过程中，将MRSIGNER改成我们自己debug密钥对中公钥的SHA-256，同时将ATTRIBUTES的DEBUG置位，那么将可得到具备debug功能的EINITTOKEN。另外，跟静态转换法一样，用同样的debug密钥修改SIGSTRUCT的ATTRIBUTES和相关域。动态转换法可简单的概述为：保持enclave_release.signed.so不变，在其Enclave创建的过程修改debug属性，并用自己可控的debug版本的密钥替换掉原有的released密钥信息来完成ECREATE和EINIT。实测发现，经此修改后仍出现问题，原因在于应用程序使用SGX
SDK中的libsgx_urts.so做加载Enclave的初始化相关工作，如sgx_create_enclave/sgx_create_enclave_ex
，欲加载的Enclave是否采用debug模式运行以debug参数的形式传入sgx_create_enclave/sgx_create_enclave_ex
API，而后借助get_misc_attr函数对欲加载的Enclave的attribute进行校验，若Enclave的metadata信息标明该Enclave为release版本，此刻的EINITTOKEN却要使能attribute的debug位，将导致校验失败，从而退出Enclave的初始化加载。因此，还要设法绕过此检测，方法也比较简单，因为函数里仅能检测debug位是否匹配，无法检测EINITTOKEN的签名信息是否正确，所以操作上仅需将生成的带debug功能的EINITTOKEN的debug位清零后供get_misc_attr函数进行校验即可。
图13 ECREATE 篡改流程
图14 EINIT 篡改流程
综上，动态转换法实现时采取HOOK SGX Driver，同时在Ring3运行SGX Debug
Helper的应用程序，SGX应用程序本身不做任何修改。其中HOOK SGX Driver负责捕获请求EINITTOKEN时的报文和转发到SGX Debug
Helper,同时HOOK Enclave ECREATE 和 EINIT，修改其指令参数；SGX Debug
Helper负责管理签名密钥和篡改来自HOOK SGX Driver的protobuf的报文。ECREATE的流程如图13所示，在SGX
Driver中HOOK ECREATE的函数，当SGX应用程序通过ioctl调用ECREATE函数时，向SGX Debug Helper程序请求debug
公钥的MRSIGNER，获取到MRSIGNER后篡改ECREATE参数secs.mrsigner和secs.attributes
。EINIT的流程如图14所示，SGX Driver HOOK socket，当SGX应用程序通过SGX
SDK中的GetLauchTokenRequest函数发出请求EINITTOKEN时，将其protobuf报文转发到SGX Debug
Helper,由SGX Debug Helper修改报文里的attribute和mrsigner并重新生成新的protobuf报文给SGX HOOK
Driver,之后SGX HOOK Driver将新生成的protobuf报文转给aesm，aesm调用LE获取到EINITTOKEN后通过SGX
SDK函数GetLaunchTokenResponse将EINITTOKEN以protobuf形式返回，同样此响应的socket被SGX HOOK
Driver拦获并转发给SGX Debuge Helper, 由SGX Debuge Helper篡改响应报文——生成real
EINITTOKEN和fake EINITTOKEN（针对real EINITTOKEN修改其attribute为not
debug）,并将这两个token一并发送给SGX HOOK Driver,SGX HOOK Driver自己留住real EINITTOKEN,将fake
EINITTOKEN 以protobuf形式发送给SGX 应用程序，此后SGX应用程序采用fake EINITTOKEN
通过get_misc_attr函数进行校验并成功，最后借助ioctl系统调用执行EINIT指令，此时SGX HOOK
Drvier对EINIT参数EINITTOKEN修正为real EINITTOKEN,再篡改SIGSTRUCT参数，EINIT 成功执行，大功告成。
动态转换法的主要思想是在SGX SDK中libsgx_uae_service.so 的 oal_get_launch_token函数通过socket
以protobuf封装参数信息，向aesm请求产生EINITTOKEN前，将protobuf的信息进行篡改以产生支持debug的EINITTOKEN；同时在SGX
驱动中将ECREATE和EINIT的参数SECS和SIGSTRUCT进行修改。
请求生成EINITTOKEN的修改点：
  1. signature.key.modules 将其改成我们自己的debug模式的公钥；
  2. sgx_attributes_t.flags |= SGX_FLAGS_DEBUG.
ECREATE的修改：
将ECREATE所需参数secs进行如下修改
  1. secs.attributes |= SGX_FLAGS_DEBUG;
  2. secs.mrsigner 替换成我们自己的debug模式的公钥的sha256.
EINIT的修改：
将EINIT所需的SIGSTRUCT参数进行修改，如表12所示
表12 动态转换时SIGSTRUCT的修改处
序号 | 数据域  
---|---  
1 | SIGSTRUCT.header.header1[1] |=0x1ULL 