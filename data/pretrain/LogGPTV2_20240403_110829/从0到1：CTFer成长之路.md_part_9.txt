图1-3-5
1.3.3.4Babylntranet I(SCTF2018)
【题目简介】本题采用了Rails框架进行开发，存在RubyOnRails远程代码执行漏洞（CVE-2016-
），可以被任意读取文件（该漏洞其实质是动态文件渲染）。
0752
通过读取源码发现，该应用程序使用了Rails的Cookie-Serialize模块，通过读取应用的密钥，构造恶
意反序列化数据，进而执行恶意代码。
【题目难度】中等
【知识点】RubyOnRails框架任意文件读取漏洞：Rails cookies反序列化
【解题思路】对应用进行指纹探测，通过指纹信息发现是通过Rails框架开发的应用，接着可以在
源码中发现链接/layouts/c3JjX21w，对软链接后面的部分进行Base64解码，发现内容是src
HTML
.查阅Rails有关漏洞发现动态模板渲染漏洞（CVE-2016-0752），将///-/.//etc/passwd编
码成Base64故在layouts后，成功返回/etc/passwd文件的内容。
尝试道染日志文件（./log/development.log）直接进行代码执行失败，发现没权限谊染这个文
件，接着读取所有可读的代码或配置文件，发现使用了cookies_serializer模块。尝试读取当前用户环
境变量发现没权限，于是尝试渎取/proc/self/environ，获取到密钥后，使用metasploit中相应的
反序列化攻击模块直接攻击。
Ruby
【总结】通过RubyOnRails远程代码执行漏洞（CVE-2016-0752）进行任意文件读取（出题人对
漏洞代码进行了一定程度的修改，使用了Base64编码），见图1-3-6
5454MCXApL
图1-3-6
②服务器禁止了Log日志的读取权限，因此不能直接通过谊染日志完成getshell。通过读取源码，我
们可以发现应用中使用了Rails的Cookie-Serialize模块。整个模块的处理机制是将真正的session
序列化后通过AES-CBC模式动加密，再用Base64编码2次，处理流程见图1-3-7
data
Encrypted Data
④) Base64
④ Base64
③ AES-CBC
② Padding
 Cookie Seria
④ Base64
https:/weread.qq.com/web/reader/77d32500721a485577d8eeek65132ca01b6512bd43d90e3
ZZ.
---
## Page 53
2021/1/16
从0到1：CTFer成长之路-Nu1L战队-微信读书
Session Data
IV
图1-3-7
从服务器返回的Set-Cookie也能印证这一点，见图1-3-8.
图1-3-8
我们可以通过任意文件读取漏洞获取/proc/self/environ的环境变量，找到AES加密所使用的secret
key，接着借助secretkey伪造序列化数据。这样，当服务端反序列化时，就会触发漏洞执行恶意代
码，见图1-3-9
(1etest)S8L/L=1XIG_S8AT=sest08oME=/sms/hehyLABouAGE*es
图1-3-9
1.3.3.5 SimpleVN(BCTF2018)
【题目简介】题目的功能主要分为如下两点
（1）用户可以设置一个模板用来被渲染，但是这个模板设置有一定的限制，只能使用“和字母、
数字。另外。道染模板的功能只允许127.0.0.1（本地）请求
6 = D] = (
ne /l-a-a-9, 1-1.1n)g 8 1
（2）题目中存在一个代理请求的服务，用户输入URL并提交，后端会启动Chrome浏览器去请求这个
URL，并把清求页面截图，反馈给用户。当然，用户提交的URL也有一定限制，必须是本地配置的
（127.0.0.1）。这里存在一个问题，就是我们传入File协议的URL中的HOST部分是空的，所以也
HOST
可以绕过这个检查。
【题目难度】中等。
【知识点】浏览器协议支持及view-source的利用：Node模板注入；HTTPRequest Header：
Range
https:/weread.qq.com/web/reader/77d32500721a485577d8eeek65132ca01b6512bd43d90e3
13728
---
## Page 54
2021/1/16
从0到1：CTFer成长之路-Nu1L战队-微信读书
【解题思路】通过审计源码，发现模板注入漏洞和服务端浏览器请求规则，同时找到了解题方向：获
取flag的路径，并读取flag的内容。
通过模板注入process.env.FLAGFILENAME获取flag文件名，获取整个Node应用所在目录process.
.PWD，使用view-source：输出被解析成HTML标签的结果，见图1-3-10
env
图1-3-10
使用file://+绝对路径读取config.js中的FLAG_PATH，见图1-3-11。
读取flag内容，使用HTTP请求头的Range来控制输出的开始字节和结束字节。题目中的flag文件内容
很多，直接请求无法输出真正flag的部分，需要从中间截断开始输出，见图1-3-12.
图1-3-11
图1-3-12
【总结】题目中的任意文件读取其实与Node并无太大关系，实质上是利用浏览器支持的协议，属
于比较新颖的题目
②读取文件的原则是按需读取而不盲目读取，盲目读取文件内容会浪费时间。
③同样使用浏览器特性有关的题目还有同场比赛的SEAFARING2，通过SSRF漏洞攻击selenium
，控制浏览器请求file:///读取本地文件。读者如果感兴趣可以搜寻这道题
server
1.3.3.6Translate(GoogleCTF2018)
【题目简介】根据题目返回的《userQuery)}），我们容易想到试一下模板注入，使用数学表达式3*
3进行测试。
通过((this.$parent.$parent.window.angular.module ('demo') ._invokeQueue[3][2][1])}读
取部分代码，发现使用了i18n.template渲染模板，通过i18n.template（./flag.txt）读取flag。
【题目难度】中等
htps://weread.qq.com/web/reader/77d32500721a485577d8eeek65132ca01b6512bd43d90e3
14/22
---
## Page 55
2021/1/16
从0到1：CTFer成长之路-Nu1L战队-微信读书
【知识点】Node模板注入;i18n.template读flag。
【解题思路】先发现模板注入，利用模板注入搜集信息，在已有信息的基础上，利用模板注入，调用
可读文件的函数进行文件读取。
【总结】涉及Node模板注入的知识，需要参赛者对其机制有所了解：模板注入转换成文件读取漏
洞
1.3.3.7右番就能拿Flag（PWNHUB）
【题目简介】扫描子域名，发现有一个站点记录了题目搭建过程（blog.lolinetwork），
发现Nginx配置文件如下：
 //to/,tea
构造目录穿越后，在上级目录发现了Aria2的配置文件，见图1-3-12。
Index of /bangumi.
图1-3-12
同时发现在题目的6800端口开放了Aria2服务。
【题目难度】中等。
【知识点】Nginx错误配置导致目录穿越；Aria2任意文件写入漏洞
【解题思路】先进行必要的信息搜集，包括目录、子域名等。在测试的过程中发现Nginx配置错误
（依据前面的信息搜集到Nginx配置文件，也可以进行黑盒测试。黑盒测试很重要的就是对Nginx的
特性及可能存在的漏洞很了解。这也可以节省我们信息搜集所需要的时间，直接切入第二个漏洞
点）。利用Ngnix目录穿越获取Aria2配置文件，拿到rpc-secret，再借助Aria2任意文件写入漏洞，
2的API需要token也就是rpc-secret才可以调用，前面获取的rpc-secret便能起作用了。
Aria
调用api配置allowoverwrite为true：
然后调用API下载远程文件，覆盖本地任意文件（这里直接覆盖SSH公钥），SSH登录获取flag。
https:/weread.qq.com/web/reader77d32500721a485577d8eeek65132ca01b6512bd43d90e3
1572e
---
## Page 56
2021/1/16
从0到1：CTFer成长之路-Nu1L战队-微信读书
1.3.3.82013那年（PWNHUB）
【题目简介】（1）发现存在.DS_Store文件，见图1-3-13.
图1-3-13
（2）.DS_Store文件泄露当前目录结构，通过分析.DS_Store文件发现存在upload、pwnhub等目
录
（3）pwnhub目录在Nginx文件里被配置成禁止访问（比赛中前期无法拿到Nginx配置文件，只能通
过HTTPcode403来判断），配置内容如下：
（4）pwnhub存在隐藏的同级目录，其下的index.php文件可以上传TAR压缩包，且调用了Python
脚本自动解压上传的压缩包，同时返回压缩包中文件后缀名为.cfg的文件内容。
(mtt-8')
elsd'1:
elpae - trick
lapert usid
apeat os
def untar(Fileraee):
(-/e**ed/des/-)pxp'se
ttarfilepefte
for I in t.getrases():
retars'erroa
try:
ercegt Dxce
on,e:
b/')
else:
cfgfase = str[uuld.udi
tsresase[1, efgftame]
a(3) + *.cfg*
retses efgaa
fnt teste
me  sys.ar]
(,0uu,)4xa
（5）通过分析Linux的crontab定时任务，发现存在一个定时任务：
https:/weread.qq.com/web/reader/77d32500721a485577d8eeek65132ca01b6512bd43d90e3
---
## Page 57
2021/1/16
从0到1：CTFer成长之路-Nu1L战队-微信读书
（6）cron_run.sh所执行的是发送邮件的Python脚本，其中泄露了邮箱账号、密码。
（7）通过泄漏的邮箱信息登录，在邮箱中继续发现泄露的VPN账号密码，见图1-3-14.
（8）通过VPN登录内网，发现内网存在一个以Nginx为容器并且可读flag的应用，但是访问该应用会
发现只显示OhHacked，而没有其他输出。同一IP下其他端口存在一个以Apache为容器的Discuz！
X3.4应用。
护送|电送
请妥善保管意的VPN信息
原加附件（最大20M）
833642F9
图1-3-14
【题目难度】中等。
缩包，上传压缩包读取文件：Discuz！X3.4任意文件删除漏洞。
【解题思路】扫描目录发现.DS_Store（MacOS下默认会自动生成的文件，主要作用为记录目录下的
文件摆放位置，所以里面会存有文件名等信息），解析.DS_Store文件发现当前目录下的所有目录和
文件。
 ,   
it
发现upload目录名最后多了一个空格，想到可利用Nginx解析漏洞（CVE-2013-4547）绕过
目录的权限限制。原理是通过Nginx解析漏洞，让Nginx配置文件中的正则表达式/pwnhub匹配失
败，见图1-3-15
图1-3-15
https:/weread.qq.com/web/reader77d32500721a485577d8eeek65132ca01b6512bd43d90e3
1/128
---
## Page 58
2021/1/16
从0到1：CTFer成长之路-Nu1L战队-微信读书
在/pwnhub目录下存在一个同级目录，其中存在PHP文件。请求该PHP文件，发现存在一个上传表
单，见图1-3-16
4.223.177.1525
上
图1-3-16
通过该PHP文件上传TAR格式的压缩包文件，发现应用会将上传的压缩包自动解压（tarfile.open），
于是可以先在本地通过命令ln-s构造好软链接文件，修改文件名为xxxcfg，再利用tar命令压缩。上
传该TAR压缩包后会将链接指向文件内容进行输出，见图1-3-17。
选择文件未选择任何文件
上传
注意：只支持tar!!
更新配置成功，内容如下
c:4:65534:sync:/bin:/bin/s
yne
we:09:gxcs
es:/usr/game
manx:6:12:man/var/cache/ma
px:77p://sol/ss
n:/usr/sbininologin
图1-3-17
读取/etc/crontab发现，在crontab中启动了一个奇怪的定时任务：
192/cren.rum.st
读取crontab中调用的sh脚本，发现内部运行了一个Python脚本：接着读取该Python脚本获得泄露
的邮箱账号和密码，登录这个邮箱，获取泄露的VPN账号和密码，见图1-3-18。
成功连接VPN后，对VPN所属内网进行扫描，发现部署的Discuz！X3.4应用和读flag的应用。依据
题目简介中所叙述的内容进行猜测，需要删除safe.php才能读到flag，于是利用Discuz！X3.4任意文
件型除漏洞型除safe.php，见图1-3-19。
【总结】①题目流程较长，参赛人员应有清晰的思路。
②除了Nginx因配置内容设置不当导致的目录穿越，其自身也存在历史漏洞可以进行信息泄露。
位置：自动
日