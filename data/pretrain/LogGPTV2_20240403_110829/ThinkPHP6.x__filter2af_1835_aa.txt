# ThinkPHP6.x 漏洞复现
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 任意文件创建漏洞
###  漏洞环境
>   * 将 `tp/app/controller/Index.php` 内容修改为
>
     :)  ThinkPHP V' . \think\facade\App::version() . '14载初心不改 - 你值得信赖的PHP框架[ V6.0 版本由 亿速云 独家赞助发布 ]';
        }
        public function hello($name = 'ThinkPHP6')
        {
            return 'hello,' . $name;
        }
    }
>   * 将 `tp/app/middleware.php` 内容修改为
>
       * 查看版本的更新日志发现修正了 sessionid 检查的一处隐患，[相关内容](https://github.com/top-> think/framework/commit/1bbe75019ce6c8e0101a6ef73706217e406439f2)，修复代码中主要多了
> `ctype_alnum($id)`，只允许 `$id` 由字母和数字构成
>
>   * 跟进修复文件 `src/think/session/Store.php`，发现其和文件存储 session 相关
>   * 跟进 `src/think/session/Store.php` 中的 `setId()` 方法，查找其用法，继续跟进到
> `src/think/middleware/SessionInit.php` 中的 `handle()` 方法
>
>   * 发现变量 `$sessionId` 是可控的，可以通过 `$cookieName` 变量来设置变量 `$sessionId` 的值，继续跟进
> `getName()` 方法，跟进到 `src/think/session/Store.php` 发现变量 `$this->name` 的固定值是
> `PHPSESSID`，所以通过控制修改 Cookie 中的 PHPSESSID 的值来进而触发到后面的利用
>
>   * 继续分析 `src/think/session/Store.php` 中的 `setId()` 方法，这里如果 PHPSESSID
> 对应值长度等于 32，则无任何过滤直接赋值
>
>   * 继续跟进，先返回 `$response` 的值，进而步进到 `src/think/middleware/SessionInit.php` 中的
> `end()` 方法调用 `src/think/session/Store.php` 的 `save()` 方法
>
>   * 调用 `write()` 方法进而进入到 `src/think/session/driver/File.php` 调用 `write()`
> 方法进入到 `writeFile()`方法来进行文件内容的写入
>
###  漏洞利用
###  漏洞利用链
## 反序列化漏洞
###  漏洞环境
>   * 将 `tp/app/controller/Index.php` 内容修改为
>
     :)  ThinkPHP V' . \think\facade\App::version() . '14载初心不改 - 你值得信赖的PHP框架[ V6.0 版本由 亿速云 独家赞助发布 ]';
        }
    }
###  利用条件
>   1. 有一个内容完全可控的反序列化点，例如： unserialize (可控变量)
>   2. 存在文件上传、文件名完全可控、使用了文件操作函数，例如：file_exists (‘phar://恶意文件’)
>
###  POP链-1
**漏洞分析**
>   * 先找一个反序列化的触发入口，全局搜索 `__destruct()` 方法
>
>   * 跟进 `src/Model.php` 中的 `__destruct()` 方法，由于变量 `lazySave` 是可控的，当其值为 True
> 时会进入 if 函数，进而调用 `save()` 方法
>
>   * 跟进 `save()` 方法，继续跟进其调用的 `updateData()` 方法，在 `updateData()`
> 方法中发现其调用了一个字段检查的 `checkAllowFields()` 方法
>
>   * 跟进 `checkAllowFields()` 方法，继续跟进 `db()` 方法，发现 `$this->table` 和
> `$this->suffix` 均是可控的，故可以利用该字符串拼接来触发 `__toString()` 方法进而来调用后续链子
>
>   * 思路有了，继续看看要如何才能不出错的走到 `checkAllowFields()` 方法
>
>   1. 满足 `src/Model.php` 中 `__destruct` 方法里的 `$this->lazySave` 为 True 从而进入
> `save()` 方法
>   2. 满足 `src/Model.php` 里 `save()` 方法的第一个 if 函数为 False 从而绕过 return，即需要满足
> `$this->isEmpty()==false &&
> $this->trigger('BeforeWrite')==true`；接着走到三目运算符进行判断，满足 `$this->exists` 值为
> True 从而进入 `updateData()` 方法
>   3. 满足 `src/Model.php` 里 `updateData()` 方法的
> `true===$this->trigger('BeforeUpdate')` 从而绕过第一个 if 判断，接着需要满足 `$data!=null`
> 来绕过第二个 if 的判断进而进入 `checkAllowFields()` 方法
>   4. 满足 `src/Model.php` 里 `checkAllowFields()` 方法的 `$this->field=null &&
> $this->schema=null` 从而进入 `db()` 方法
>   5. 满足 `src/Model.php` 里 `db()` 方法的 `$this->table=null` 从而来满足字符串的拼接进而触发
> `__toString()` 方法
>
>   * 接着看看如何寻找 `__toString()` 的触发点，全局搜索
>
>   * 跟进 `src/model/concern/Conversion.php` 中的 `toJson()` 方法，继续跟进 `toJson()`
> 方法发现在返回值中进一步调用了 `toArray()` 方法
>
>   * 跟进 `toArray()` 方法中的 `getAttr()` 方法
>
>   * 跟进 `getAttr()` 方法，发现在 try-catch 结构中会进一步调用 `getData()` 方法
>
>   * 跟进 `getData()` 方法后绕过第一个 if 判断后进一步调用 `getRealFieldName()` 方法
>
>   * 跟进 `getRealFieldName()` 方法，当 `$this->strict` 为 True 时会直接返回 `$name` 的值
>
>   * 现在返回值可以得到了，继续回到之前的 `getData()` 方法，变量 `$fieldName` 得到返回值后进入
> `array_key_exists()` 方法进行判断从而返回 `$this->data[$fieldName]`，继续回溯到 `getAttr()`
> 方法，变量 `$value` 接收到返回值继而执行到 return 部分调用 `getValue()` 方法，进入该方法，一个值得注意的地方
> `$value = $closure($value, $this->data)`，在这里 `$closure` 作为想要执行的函数名，`$value`
> 和 `$this->data` 为参数即可实现任意函数执行
>
>   * 至此整个利用链的过程基本明显了，接着看看怎么才能执行到 `$value = $closure($value, $this->data)`
>
>   1. 首先看看 `$this->getRealFieldName($name)`，使 `$this->strict==true`，这样不影响
> `$name`
>   2. 接着进入 if 判断 `$this->withAttr[$fieldName]` 是否有定义，因此必须外加 `$this->withAttr`
>   3. 接下去对 `$relation` 的 if 判断不用管，关注最后的 if 判断，由于目标是要执行带 else 的代码，因此只需
> `is_array($this->withAttr[$fieldName])==false`，那么让
> `$this->withAttr[$fieldName]=null` 就可以
>   4. 最后一个赋值语句，可以通过 `$this->withAttr[$fieldName]`
> 控制想要执行的函数的名称，从而就可以来实现任意函数执行的目的
>
**exp**
>   * 由于 `Model` 是一个抽象类，需要找一个它的继承类来，这里选择 `Pivot` 类
>
    table = $obj;
            $this->force = true;
            $this->exists = true;
            $this->lazySave = true;
            $this->data = ["H3rmesk1t" => "calc.exe"];
        }
    }
    namespace think\model\concern;
    trait ModelEvent{
        protected $withEvent = true;
        protected $visible = ["H3rmesk1t" => "1"];
    }
    trait Attribute{