17974
Indonesia
45899 Vietnam
7738
8708
24560
9050
9737
Brazil
Romania
India
Romania
Thailand
Table 4: Comparison of the top 10 ASes observed in three different botnets:
the Conﬁcker botnet as surveyed by [55], the Mega-D botnet as reported
by [4, 55], and the Sality (sipscan) botnet. We observe a trend toward East-
ern European countries which have not featured as prominently in previous
botnets.
although the scale of the leading ASes may resemble other botnets,
the networks featured in the top 10 are quite different (Table 4).
Only four of the ASes in the top 10 of the sipscan appear in the
top 10 of either Conﬁcker [55] or Mega-D [55]. Notably, TTNet in
Turkey, which [55] lists in 10th place, represents the largest AS by
more than a factor of two in the sipscan botnet.
Both the Conﬁcker and Mega-D AS distributions indicate a move
toward larger representation of bots in Asian and South Ameri-
can countries, corroborating the results of [55]. However, we see
a considerable rise in bots in Eastern European countries, which
becomes even more apparent on a per-country level (Table 5).
Simply aggregating bots by their ASN can be misleading be-
Mega-D [4]
% Country
Russian Federation
Turkey
Poland
Thailand
Brazil
14.82 USA
11.74
6.33
6.32
5.32
4.11
3.89 Germany
3.23 United Kingdom
2.53
2.25
India
Spain
Sipscan
% Country
Turkey
India
Brazil
Egypt
Indonesia
Romania
Russian Federation
12.55
12.54
8.64
7.23
5.77
5.59
5.58
5.36 Vietnam
5.10
Thailand
3.01 Ukraine
Rank
1
2
3
4
5
6
7
8
9
10
Table 5: Top 10 Countries of bots used in the sipscan compared to the Mega-
D botnet. Geolocation data for sipscan sources was obtained using the Max-
Mind GeoLite database [41]. Aggregating bots by country rather than AS
helps identify regions that are heavily compromised by bots but have many
small ASes, such as the Russian Federation, which is not in the list of top
10 ASes.
cause many large organizations/providers have multiple ASNs. To
complement our AS ﬁndings, we geolocate the bot’s IP address us-
ing a MaxMind GeoLite database [41] snapshot from March 1 2011
(again, proximate to the scan episode). Table 5 presents the top 10
countries for bots in both the sipscan and the Mega-D botnets [4].
Once we aggregate bots to a country granularity, the distribution of
locations changes appreciably, with the Russian Federation making
an appearance in the top 10 lists of both Mega-D and sipscan2.
Contrary to similarly large botnets [4,48,55,61], the sipscan bots
do not have a dominant presence in China. China has been recorded
in the top ten lists of these other botnets, but in the sipscan, China is
in 27th place (0.57%) - close to U.S.’s 29th place position (0.44%).
Heatmaps of overall Sality bot locations [23] also indicate a cor-
responding lack of Sality bot presence in China. We believe this
under-representation of China, when compared to previous botnets,
may be considered a limitation of the Sality botnet rather than a spe-
ciﬁc design choice by the botmaster. Although the data presented
in [23] is largely in aggregated graphical form, it does appear to
corroborate our ﬁndings in terms of geographical distribution. As
noted earlier however, we are able to identify a much larger bot
population.
In addition to analyzing the networks that host the bots, we also
investigated the bots themselves. Output of the p0f passive OS ﬁn-
gerprinting tool [63] reported that more than 97% of bots were run-
ning operating systems of the Microsoft Windows family. The dis-
tribution of UDP source port values shown in Figure 7 also shows
that the majority of packets fall into the 1025-5000 range of ports,
which was used by Microsoft Windows until Vista and Server 2003.
There are, however, a non-negligible number of bots that p0f iden-
tiﬁed as running the Linux operating system. We believe these ma-
chines are likely not bots but rather NAT gateways proxying pack-
ets from infected hosts.
5. BINARY ANALYSIS
We had the opportunity to analyze the binary code responsible
for this scanning. The binary is a separate executable that Sality-
infected computers download via a URL as directed by the peer-to-
peer botnet infrastructure [22, 23]. Although our work focuses on
the Internet measurement aspect of the event, we partially reverse
engineered this code to validate some of our inferences. This sec-
tion summarizes the most relevant ﬁndings.
We found that each bot contacts a hard-coded IP address (the
C&C channel) in order to receive a probing command from the
botmaster. The command followed by the bots we observed is one
of three different command types that the binary supports. Through
this command, the botmaster sends the target IP to the bot in the
form of an ASCII string (dotted quad decimal format). By ana-
lyzing the code, we veriﬁed that this address is the actual address
probed by the bot. In particular, the bot properly manages the endi-
anness of the target IP addresses, e.g., when converting the ASCII
string into binary and then when contacting the target.
Each bot reports through the C&C channel the results of both the
TCP and UDP probes immediately after receiving a response from
the victim. It then selects and probes a new target by incrementing
the most signiﬁcant byte of the target address received by the bot-
master. This increment is repeated 15 times, for a total of 16 targets
probed, each one from a different /8 network. The bot then sleeps
for a ﬁxed amount of time before contacting the botmaster again to
receive a new target IP.
These ﬁndings, along with the progression of the target IP ad-
dresses observed through the UCSD Network Telescope, indicate
2 [55] only provides Conﬁcker results at an AS level.
10that both the botmaster and each bot incremented the target IPs
in reverse-byte order, and that the sequence followed by the scan
reﬂected the original orders of the botmaster (who was sending
addresses as quad decimal dot-separated ASCII strings). In other
words, the reverse byte order probing was most likely not due to a
bug or error in managing the endianness of the target IP addresses.
Inspecting the binary also revealed that several interesting prop-
erties of the scan would have not been visible by relying solely on
the reverse-engineering the bot binary. For example, the code run-
ning on a single bot shows only the selection of 16 target addresses
(whose increments to the most signiﬁcant byte could have been at-
tributed to a coding mistake, without the knowledge of the overall
pattern). But analysis of trafﬁc from the UCSD Network Telescope
revealed a heavily coordinated behavior of many bots around the
world, allowing inference of the mechanisms adopted by the bot-
master in orchestrating the scan.
6. DISCUSSION
Botnets commonly scan large segments of the Internet’s address
space for various purposes, such as infecting or compromising hosts,
recruiting hosts into a botnet, or collating a list of future targets.
Awareness of evolving botnet characteristics and spreading tech-
niques can improve our ability to navigate and mitigate their im-
pacts. As mentioned in Section 2, although many aspects of botnet
behavior have been documented, we are not aware of any published
investigation of a million node botnet covertly scanning the entire
IPv4 space. Most of the available literature are studies of older
generation (pre-2007) botnets, which are substantially smaller in
size, scope, and capability from newer-generation botnets. Stud-
ies of newer generation bots have focused on aspects other than
the scanning behavior, such as the command and control, peer-to-
peer infrastructure, or the domain of abuse, e.g., spam campaigns
inﬂicted by the botnet. We present a new angle on the study of
new-generation botnets: their scanning activity as observable in
large darknets, most aspects of which cannot be inferred by reverse-
engineering the bot malware.
This work offers contributions in two areas: documenting and
visualizing behavioral aspects of a current generation botnet, and
thoroughly analyzing the multiple synergistic characteristics of its
extraordinarily well-coordinated scanning.
The scan that we analyzed in this study was new, or at least not
previously documented, in four ways. It was sourced by a current-
generation (2011), widely-deployed, peer-to-peer botnet (Sality [23]).
Although earlier-generation version of Sality were ﬁrst reported in
June 2003, it was not until February 2011 that Sality operators
deployed a new module designed to locate and compromise SIP
servers in a distributed, heavily coordinated manner. The popula-
tion of bots participating in the scan is several orders of magni-
tude larger than any previously documented botmaster-orchestrated
scanning. Previous Internet-wide scanning behavior perpetrated by
botnets was due to worm-spreading modules inside the bot, e.g,
in Conﬁcker, rather than botmaster-coordinated scanning. Not only
was this sipscan coordinated, but it was impressively well-engineered
to maximize coverage, minimize redundancy and overlap among
target IP addresses by scanning bots, and evade detection by even
state-of-the-art intrusion detection capabilities.
We used the detailed packet traces captured by the darknet to
richly analyze many properties of the botnet, including several in-
teracting properties of the botnet’s heavily coordinated scanning.
The size of the botnet, the fact that it was a /0 scan, i.e., of the
entire IPv4 address space, and the reverse-byte ordering sequence
of IP addresses targets were unprecedented and impressive enough
characteristics, the last of which we only discovered using animated
visualization techniques. This animation also revealed that the scan
operated in distinct phases, with observable phase transitions. We
presume the botmaster triggered these phase changes using con-
ﬁguration parameters in the malware, in order to trade off address
coverage vs. redundancy in scanning. Time-series analysis of the
active IP addresses operating as bots revealed an unusually rapid
turnover rate and associated low re-use rate of the bot population,
all heavily coordinated by the botmaster to scan in a extremely reg-
ular, stealth pattern.
We did have the opportunity to dissect the binary, which we used
to validate our inferences. But most of these aspects of the scan-
ning behavior would not be revealed by reverse-engineering of the
bot binary; they require inference by measurement and analysis of
actual bot-generated trafﬁc (e.g, the mechanism that selects the IP
addresses to be scanned is not entirely encoded in the bot binary,
rather the intelligence lies in the botmaster and C&C).
We also developed several animation and visualization techniques
to facilitate our own exploration of the phenomena. For example,
using the Hilbert-curve map clearly revealed the strictly ordered
reverse-byte incrementing behavior of the progression of the en-
tire scan; without this visualization technique it is not clear that
we would have veriﬁed this sequence (for all the three observable
changing bytes) at all. Animations of the scan over time [13] also
exposed the three different phases of the scanning, and juxtapos-
ing the Hilbert maps with a geographic map of bot activity as well
as a trafﬁc time-series allowed us to visualize multiple dimensions
of the scanning simultaneously. We anticipate this technique will
be useful by us and others for analysis of other large-scale Internet
probing behavior.
As the world’s voice communications completes its transition to
an all-IP network, the vulnerability of VoIP infrastructure, and the
emerging capabilities of botnets to illegitimately commandeer its
resources, present a daunting challenge for Internet architects, en-
gineers, and policymakers. Analysis of this scan provides an illus-
trative if ominous indicator of the more sophisticated capabilities
to surreptitiously survey and exploit critical infrastructure vulnera-
bilities on a planetary scale. Our darknet packet capture allowed a
detailed analysis of a botnet’s comprehensive and covert scanning
behavior, and in the process we developed generalizable methods
to correlate, visualize, and extrapolate botnet behavior across the
global Internet.
A dataset with detailed information (e.g., timestamp and source
IP geolocation) for each sipscan UDP probing packet we captured
is available at [13].
Acknowledgements
We would like to thank: Joe Stewart of SecureWorks for helping
us to identify the sipscan binary; Ken Chiang at Sandia National
Labs for helping reverse engineering the binary; Saverio Niccolini
at NEC for brainstorming on the SIP header of the sipscan; and