    /* 处理连接。*/ 
    client_sent_quit_message = server (client_socket_fd); 
    /* 关闭服务器端连接到客户端的套接字。*/ 
    close (client_socket_fd); 
  } 
  while (!client_sent_quit_message); 
  /* 删除套接字文件。*/ 
  close (socket_fd); 
  unlink (socket_name); 
  return 0; 
} 
列表 5.11 中的客户端程序将连接到一个本地套接字并发送一条文本消息。本地套接字
的路径和要发送的消息由命令行参数指定。 
代码列表 5.11 （socket-client.c）本地命名空间套接字客户端 
#include  
#include  
#include  
#include  
#include  
/* 将 TEXT 的内容通过 SOCKET_FD 代表的套接字发送。*/ 
void write_text (int socket_fd, const char* text) 
{ 
  /* 输出字符串（包含结尾的 NUL 字符）的长度。*/ 
  int length = strlen (text) + 1; 
  write (socket_fd, &length, sizeof (length)); 
  /* 输出字符串。*/ 
  write (socket_fd, text, length); 
} 
int main (int argc, char* const argv[]) 
www.AdvancedLinuxProgramming.com 
103
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
{ 
  const char* const socket_name = argv[1]; 
  const char* const message = argv[2]; 
  int socket_fd; 
  struct sockaddr_un name; 
  /* 创建套接字。*/ 
  socket_fd = socket (PF_LOCAL, SOCK_STREAM, 0); 
  /* 将服务器地址写入套接字地址结构中。*/ 
  name.sun_family = AF_LOCAL; 
  strcpy (name.sun_path, socket_name); 
  /* 连接套接字。*/ 
  connect (socket_fd, &name, SUN_LEN (&name)); 
  /* 将由命令行指定的文本信息写入套接字。*/ 
  write_text (socket_fd, message); 
  close (socket_fd); 
  return 0; 
} 
在客户端发送文本信息之前，客户端先通过发送整型变量 length 的方式将消息的长度
通知服务端。类似的，服务端在读取消息之前先从套接字读取一个整型变量以获取消息的长
度。这提供给服务器一个在接收信息之前分配合适大小的缓冲区保存信息的方法。 
要尝试这个例子，应在一个窗口中运行服务端程序。指定一个套接字文件的路径——例
如 /tmp/socket 作为参数： 
% ./socket-server /tmp/socket 
在另一个窗口中指明同一个套接字和消息，并多次运行客户端程序。 
% ./socket-client /tmp/socket “Hello, world.” 
% ./socket-client /tmp/socket “This is a test.” 
服务端将接收并输出这些消息。要关闭服务端程序，从客户端发送“quit”即可： 
% ./socket-client /tmp/socket “quit” 
这样服务端程序就会退出。 
5.5.6 Internet 域套接字 
UNIX 域套接字只能用于同主机上的两个进程之间通信。Internet 域套接字则可以用来
连接网络中不同主机上的进程。 
用于在 Internet 范围连接不同进程的套接字属于 Internet 命名空间，使用 PF_INET 表示。
最常用的协议是 TCP/IP。Internet 协议（Internet Protocol，IP）是一个低层次的协议，负责
包在 Internet 中的传递，并在需要的时候负责分片和重组数据包。它只保证“尽量”地发送，
因此包可能在传输过程中丢失，或者前后顺序被打乱。参与传输的每台主机都由一个独一无
www.AdvancedLinuxProgramming.com 
104
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
二的 IP 数字标识。传输控制协议（Transmission Control Protocol，TCP）架构于 IP 协议之
上，提供了可靠的面向连接的传输。它允许主机之间建立类似电话的连接且保证数据传输的
可靠性和有序性。 
Internet 套接字的地址包含两个部分：主机和端口号。这些信息保存在 sockaddr_in
结构中。将 sin_family 字段设置为 AF_INET 以表示这是一个 Internet 命名空间地址。目
标主机的 Internet 地址作为一个 32 位整数保存在 sin_addr 字段中。端口号用于区分同一台
主机上的不同套接字。因为不同主机可能将多字节的值按照不同的字节序存储，应将 htons
将端口号转换为网络字节序。参看 ip 的手册页以获取更多信息。 
可以通过调用 gethostbyname 函数将一个可读的主机名——包括标准的以点分割的
IP 地址（如 10.0.0.1）或 DNS 名（如 www.codesourcery.com）——转换为 32 位 IP 数
字。这个函数返回一个指向 struct hostent 结构的指针；其中的 h_addr 字段包含了主
机的 IP 数字。参考列表 5.12 中的示例程序。 
列表 5.12 展示了 Internet 域套接字的使用。这个程序会获取由命令行指定的网页服务器
的首页。 
代码列表 5.12 （socket-inet.c）从 WWW 服务器读取信息 
#include  
#include  
#include  
#include  
#include  
#include  
#include  
/* 从服务器套接字中读取主页内容。返回成功的标记。*/ 
void get_home_page (int socket_fd) 
{ 
  char buffer[10000]; 
  ssize_t number_characters_read; 
  /* 发送 HTTP GET 请求获取主页内容。*/ 
  sprintf (buffer, “GET /\n”); 
  write (socket_fd, buffer, strlen (buffer)); 
  /* 从套接字中读取信息。调用 read 一次可能不会返回全部信息，所以我们必须不
断尝试读取直到真正结束。*/ 
  while (1) { 
    number_characters_read = read (socket_fd, buffer, 10000); 
    if (number_characters_read == 0) 
      return; 
    /* 将数据输出到标准输出流。*/ 
    fwrite (buffer, sizeof (char), number_characters_read, stdout); 
  } 
} 
www.AdvancedLinuxProgramming.com 
105
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
int main (int argc, char* const argv[]) 
{ 
  int socket_fd; 
  struct sockaddr_in name; 
  struct hostent* hostinfo; 
  /* 创建套接字。*/ 
  socket_fd = socket (PF_INET, SOCK_STREAM, 0); 
  /* 将服务器地址保存在套接字地址中。*/ 
  name.sin_family = AF_INET; 
  /* 将包含主机名的字符串转换为数字。*/ 
  hostinfo = gethostbyname (argv[1]); 
  if (hostinfo == NULL) 
    return 1; 
  else 
    name.sin_addr = *((struct in_addr *) hostinfo->h_addr); 
  /* 网页服务器使用 80 端口。*/ 
  name.sin_port = htons (80); 
  /* 连接到网页服务器。*/ 
  if (connect (socket_fd, &name, sizeof (struct sockaddr_in)) == -1) 
{ 
    perror (“connect”); 
    return 1; 
  } 
  /* 读取主页内容。*/ 
  get_home_page (socket_fd); 
  return 0; 
} 
这个程序从命令行读取服务器的主机名（不是 URL——也就是说，地址中不包括
“http://”部分）。它通过调用 gethostbyname 将主机名转换为 IP 地址，然后与主机的
80 端口建立一个流式（TCP 协议的）套接字。网页服务器通过超文本传输协议（HyperText 
Transport Protocol，HTTP），因此程序发送 HTTP GET 命令给服务器，而服务器传回主页
内容作为响应。 
例如，可以这样运行程序从 www.codesourcery.com 获取主页： 
% ./socket-inet www.codesourcery.com 
... 
www.AdvancedLinuxProgramming.com 
106
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
标准端口号 
根据习惯，网页服务器在 80 端口监听客户端连接。多数 Internet 网络服务都被分配
了标准端口号。例如，使用 SSL 的安全网页服务器的在 443 端口监听连接，而邮件服务
器（利用 SMTP 协议通信）使用端口 25。 
在 GNU/Linux 系统中，协议——服务名关系列表被保存在了/etc/services。
该文件的第一栏是协议或服务名，第二栏列举了对应的端口号和连接类型：tcp 代表
了面向连接的协议，而 udp 代表数据报类型的。 
如果你用 Internet 域套接字实现了一个自己的协议，应使用高于 1024 的端口号进
行监听。 
5.5.7 套接字对 
如前所示，pipe 函数创建了两个文件描述符，分别代表管道的两端。管道有所限制因
为文件描述符只能被相关进程使用且经由管道进行的通信是单向的。而 socketpair 函数
为一台主机上的一对相连接的的套接字创建两个文件描述符。这对文件描述符允许相关进程
之间进行双向通信。 
它的前三个参数与 socket 系统调用相同：分别指明了域、通信类型（译者著：原文为 
connection style 连接类型，与前文不符，特此修改）和协议。最后一个参数是一个包
含两个元素的整型数组，用于保存创建的两个套接字的文件描述符，与 pipe 的参数类似。
当调用 socketpair 的时候，必须指定 PF_LOCAL 作为域。 
www.AdvancedLinuxProgramming.com 
107