side in. Subjects can freely access code and data in their
own address spaces without interposition from the hyper-
visor. However, inter-address-space activities such as data
writing and control transfer must be mediated and con-
trolled by the VMM.
Multi-HAP Construction. The isolation component is
built upon our enhanced memory virtualization mechanism
named multi-HAP. Multi-HAP enables extensions and the
kernel to share the same virtual-to-physical mapping of the
entire kernel space, while it also enables the hypervisor to
set different object access rights for different subject cate-
gories. In this scheme, the hypervisor maintains separate
sets of HAP tables for each protection state (refer to Fig-
ure 1) in the system.2 Figure 3 illustrates the architecture of
the multi-HAP mechanism. For simplicity, only two sets
of HAP tables are shown here, corresponding to the OS
kernel state and the untrusted extension state, respectively.
There is a HAP base pointer which points to the root level
of a HAP table. During a protection state switch, HUKO
changes the value of the HAP base pointer to another HAP
table root, which represents another set of access rights. The
access rights in HAP table entries are determined by the ob-
ject label of the entry as well as the access control policy,
and are updated when any object label changes.
To intercept control transfer events between different
subject categories, for each protection state, HUKO manip-
ulates the execution bit of its HAP table entries so that all
the pages that do not belong to the subject category (cor-
responding to the protection state) are not executable. At-
tempts to execute content on these pages would cause HAP
violations and are handled by the hypervisor. Section 4.5
describes this procedure in detail.
important
difference
Synchronization. An
between
multi-HAP and user-level page tables managed by the
kernel is that, each HAP table in multi-HAP must maintain
the entire mapping of the whole kernel space, rather than
the address space associated with the protection state. This
is because HUKO should allow the OS kernel and exten-
sions to read each other’s address space freely without any
interposition. Therefore, the isolation component should
always synchronize the entire kernel address mappings
among HAP tables. We modify the hypervisor code so
that changes to one HAP table (including allocating a new
entry, changing an entry and removing an entry) always
propagate to other HAP tables.
Optimize TLB Flushes. Considering the enormous func-
tion calls and returns between the OS kernel and extensions,
the protection state transition rate in HUKO is very high
(see Section 5.3). If the hypervisor ﬂushes TLB on every
page table switch during a state transition, the performance
degradation due to the TLB misses caused by ﬂushing is
substantial. To mitigate this problem, HUKO takes advan-
tage of Intel’s Virtual-processor identiﬁers (VPIDs) tech-
nology, which enables a logical processor of the hypervi-
sor to manage cache information for multiple linear-address
spaces.
In HUKO’s VMM, we associate each protection
state with a 16-bit VPID so that mappings and access rights
are tagged according to the VPID in the address translating
cache. During the state transition time, the EPT table switch
2It can be extended to support separate HAP tables for each subject, if
needed.
HAP
Base
Pointer
Protection
State
HAP
Table
Protection State
Switch
OS Kernel
R 1
W 1
X 1
Untrusted Extensions
R 1
W 0
X 0
R 1
W 1
X 1
R 1
W 1
X 0
R 1
W 0
X 0
R 1
W 1
X 1
Machine
Physical
Memory
Label:
kernel code
(superpage)
Label:
kernel data
Label:
extension data
Figure 3. The multiple HAP tables for achiev-
ing isolation and mediation.
does not cause ﬂush of the entire translating cache - it only
ﬂushes entries with speciﬁc VPIDs, which signiﬁcantly re-
duces the TLB misses and improves the performance.
Preserving Architectural State. Sometimes malicious or
compromised extensions could subvert certain invariants of
the architectural state to fulﬁl their attacks. For example,
a malicious extension could change the GS segment selec-
tor to point to its own version of processor data area (pda),
which provides the kernel with incorrect information about
the kernel stack, MMU state and IRQ processing. There-
fore, HUKO must enforcing the integrity of system environ-
ment by preserving these invariants of architectural state.
Our approach takes advantage of the fact that, during a
privilege transition, the architectural state is saved in the vir-
tual machine descriptor (i.e., VMCS for Intel VT) and a vir-
tual CPU struct (i.e., vcpu for Xen) of the VMM for future
reloading. Hence we could straightforwardly integrate the
architectural state protection with our subject-aware protec-
tion state design. In speciﬁc, at the time when the kernel
enters untrusted extension protection state, HUKO saves
the architectural state from the VMCS and vcpu to its own
memory space. When the kernel is switching from un-
trusted extension state back to the OS kernel state, HUKO
restores all the architectural state invariants by writing the
saved values to the virtual machine descriptor and the vir-
tual CPU struct.
4.4 Kernel Stack Integrity
Besides code, static and heap data, there is another im-
portant avenue which malicious extensions could exploit to
subvert OS kernel integrity: the kernel stack. In speciﬁc,
adversaries could perform the following actions to compro-
mise the property of stack integrity stated in Section 2: (1)
state_frame_base
older frames
Stack Reference: Guest Linear Address
state_current_limit
parameters
return addr.
Guest Page Table
Machine
Physical
Address
OS HAP 
Table
Guest Physical Address
Protection 
State Switch
Untrusted 
Extension
HAP Table
Machine
Physical 
Address
Synchronization
Kernel Stack: OS Kernel 
Protection State
Private Stack: Untrusted 
Extension Protection State
older frames
parameters
return addr.
old EBP
local variables
dynamic area
return addr.
state_frame_base
EBP
ESP
state_current_limit
Figure 4. The transparent separated stack design supported by multi-HAP. The ﬁgure illustrates the
two stacks at the time of protection state transfer in case an untrusted extension is making a call
to the OS kernel. The shaded indicates the active stack frames (owned by the untrusted extension)
which are going to propagate to the OS kernel stack.
injecting malicious code into the stack; (2) manipulating
control data (i.e., function pointers, return addresses) in its
own stack frames to subvert control ﬂow integrity of the
OS kernel. For instance, return-oriented and jump-oriented
attacks belong to this category; (3) corrupting non-control
and control data (i.e., saved registers, parameters and vari-
ables) in stack frames owned by OS kernel or other exten-
sions. For example, a malicious extension could change the
local variables and function parameters on the stack frame
to let a certain kernel function return a false data value, or it
may manipulate kernel IRQ and exception stack frames to
change the behavior that OS kernel handles interrupts and
exceptions.
For case (1), by setting the NX bit of corresponding HAP
entries of kernel stack frames, HUKO ensures that code
on kernel stack frames could never be executed. Regard-
ing case (2), HUKO mediates the protection state transfers
and maintains a dedicated return address stack to guarantee
the control ﬂow integrity, which we will describe in Section
4.5. To defend against attacks in category (3), HUKO grants
untrusted extensions read permission to the entire kernel
stack, but only gives them write permission to its own stack
frames.
To efﬁciently manage kernel stack permissions in an un-
modiﬁed commodity OS (e.g, Linux) is a non-trivial job,
because of the following reasons: ﬁrst, in such system, there
is only one kernel stack for all kernel control paths associ-
ated with each user thread. Moreover, the stack frames are
not page-aligned, making it difﬁcult to set permissions for
individual stack frames using current architecture. On the
other hand, in terms of performance, it is not affordable to
validate each stack modiﬁcation made by untrusted exten-
sions because stack modiﬁcations are too frequent.
The stack protection design of HUKO overcomes the
above limitations. In order to preserves single kernel stack
semantic and support unmodiﬁed commodity OSes, during
the protection state of untrusted extensions, HUKO creates
and maintains a private copy of the current kernel stack at
the VMM layer, which is transparent and not observable
from the guest OS. By manipulating GPA to MPA map-
pings in the Multi-HAP table, HUKO casts the same lin-
ear address range of the kernel stack to different machine
frames for OS kernel and untrusted extensions. In this way,
an untrusted extension is given a “faked” view that it shares
the same kernel stack with other code entities in the ker-
nel, however, its stack operations are automatically redi-
rected to the private kernel stack copy placed on shadow
machine frames reserved by HUKO. On the other hand, to
protect stack integrity in an efﬁcient manner, HUKO adopts
a “lazy synchronization” design: instead of checking per-
missions each time the stack is accessed, HUKO only per-
forms stack synchronization when current protection state
is switching between untrusted extensions and the OS ker-
nel. During synchronization, HUKO propagates stack mod-
iﬁcations from the private stack to the real kernel stack with
the following rule enforced: only changes made to its own
stack frames are propagated to the real kernel stack, while
updates outside its own stack frames are discarded.
In the following we use Linux as an example to illus-
trate the private stack design achieved by multi-HAP ta-
bles, which is shown in Figure 4.
In Linux, each user
process is associated with a two-page sized kernel stack.
The scope of the current kernel stack can be determined by
the ESP register and the per-CPU data structure pointed by
the GS segment selector. HUKO maintains two data val-
ues for each protection state: state frame base and
state current limit, respectively. These two values
designate the active stack frames associated with each pro-
tection state, and only in these stack frames modiﬁcations
are propagated to the other stack. During each protection
state transfer, HUKO updates state frame base and
state current limit based on the values of EBP and
ESP registers at that time point.
4.5 Mediation and Enforcement
The goal of the mediation and enforcement component
is to audit all the write ﬂow and control transfer events be-
tween untrusted extensions and the kernel. Also it is respon-
sible for validating these events to enforce integrity protec-
tion according to mandatory access control policies.
EPT Violation Handling. HUKO relies on the EPT vio-
lation mechanism to achieve mediation and protection en-
forcement. Figure 5 depicts the work ﬂow of how HUKO
handles various kinds of EPT violations. When an EPT vi-
olation occurs, HUKO ﬁrst checks if the physical frame is
labeled as a valid kernel object.
If yes, then it checks if
the violation is caused by our protection mechanism or by
emulated MMIO and log-dirty events. An EPT violation
caused by HUKO’s protection mechanism indicates a sen-
sitive control transfer event or a sensitive data access. To
properly handle it, HUKO ﬁrst examines the following in-
formation: (1) the qualiﬁcation bits which reveal the actual
type of the violation, (2) the current state, and (3) the label
of the faulting frame. Then it determines whether to allow
the operation or to trigger a protection alarm based on in-
formation collected and the access control policies.
As we stated in Section 3.2, subjects in HUKO can
freely read and write their own code and data. Also, inter-
subject read accesses are always allowed in our default pol-
icy. These allowed events do not cause any EPT violation
so that they cannot be logged by the hypervisor. However,
for forensics purposes, the system administrator may want
to audit some types of crucial events yet still allow these
events to happen. Hence, HUKO adds another action named
audit allow to enable logging of these speciﬁc data accesses.
To implement the audit allow mechanism, HUKO sets the
access rights in the corresponding EPT entries so that audit-
allowed events would cause EPT violations and be audited
by the hypervisor. Then HUKO emulates the offending in-
structions without changing the previously set access rights.
In this way, the audit allow operation is completed and the
EPT entries can still be used to trap further events of the
same kind.
Protecting Control Flow Integrity. As previously stated,
HUKO sets the execution bits of multi-HAP entries so that
only untrusted extension code can be executed in the un-
trusted extension protection state. When an execution vi-
olation indicating a control transfer from an untrusted ex-
tension to the OS kernel occurs, HUKO enforces the con-
trol ﬂow integrity rules under the following conditions: (1)
the untrusted extension is calling the kernel via call and
jmp instructions.
In this case, HUKO allows the opera-
tion only when the violating address belongs to a trusted
entry point. This prevents untrusted extensions from ac-
cessing unauthorized kernel functions or jumping to arbi-
trary positions in the kernel. (2) The kernel preempts the
untrusted extension for higher priority interrupts.
In this
case, HUKO ensures that the violating address belongs to
an interrupt handler routine in the IDT table. (3) The exten-
sion returns to the kernel from a previous call. This could
be leveraged by return-oriented rootkits to divert the con-
trol ﬂow to a sequence of return-oriented instructions in the
kernel. To tackle this problem, HUKO maintains a sepa-
rate return address stack to keep track of the call/return se-
quences between the OS kernel and untrusted extensions.
In this way, we guarantee the return address to the kernel
must correspond to the address of the kernel code that made
the call. Also, the sequence of return addresses must sat-
isfy the last-in-ﬁrst-out property. Considering the fact that
most return-oriented attacks need an initial return to the ﬁrst
return-oriented instruction sequence, our approach provides
an effective counter method.
Handling DMA writes. Besides memory writes per-
formed by CPU instructions, DMA is another way for ex-
tensions to write data into the kernel memory. Previous
proposals [32] have limited capability of handling DMA
because the data transfer is not controlled by the proces-
sor or memory controller. Fortunately, the introduction of
hardware IOMMUs (Intel’s VT-d and AMD’s IOMMU)
brings the possibility to efﬁciently mediate and control
DMA memory access. When used in virtualization, the
IOMMU can enable pass-through device models which sup-
port independent address translations using IOMMU page
tables for DMA activities.
In HUKO prototype, we leverage the DMA remapping
mechanism provided by Intel’s VT-d technology [5] to pro-
tect the kernel integrity from DMA writes. Currently we ex-
plicitly set the IOMMU page tables so that pages labeled as
OS kernel and trusted extensions cannot be used in DMA.
On the other hand, HUKO allows DMA activities on the
pages that are labeled as untrusted extensions. Our ongo-
ing work employs multiple IOMMU page tables and switch
facilities for different protection states, which is very sim-
ilar to the multi-HAP mechanism. This scheme introduces
new DMA object labels shown in Table 1 and allows the
kernel and all extensions to do DMA in a protected man-
ner. Another more ﬂexible optimization is to integrate the
No (User Pages)
No (MMIO or 
logdirty case)
check
valid label
Yes
caused
by HUKO
Yes
check violation 
qualification
execution
write
other
check state and 
label for code 
execution
No (illegal execution
of data)
make authorization 
decisions  
according to state 
and label 
Xen’s default EPT
violation handling 
routine
Yes
(code execution)
No
check for 
trusted entry 
point or valid 
return address
Yes
allow
audit