i
l
i
b
a
b
o
r
p
g
n
k
c
o
B
l
i
Figure 4: Blocking probability for legitimate trafﬁc as a func-
tion of attack trafﬁc load.
As an illustrative example, we consider a simple case where we
have only two classes of customers, one corresponding to the DoS
attacks and the other to legitimate trafﬁc.5 We assume that an in-
dividual call in each class uses up the same amount of bandwidth
(motivated by the idea that the compromised clients come from the
same population as the legitimate users). For a DoS attack to be
successful, the load level ((cid:26)j) for the class of attack trafﬁc has to
be signiﬁcantly higher than that of legitimate trafﬁc. We construct
a test scenario where the target node has 20 units of resource avail-
able, both the attack and legitimate trafﬁc utilize one unit of re-
source and (cid:26) = (cid:21)=(cid:22) for the legitimate trafﬁc is 1. In Figure 4, we
plot the probability that a legitimate connection is denied service as
a function of (cid:26) of of attack trafﬁc.
As we can observe, under our test scenario, where (cid:26) = 200 for
the attack trafﬁc will cause 90% of the legitimate trafﬁc to be de-
nied service. Under a massive attack, if the attack load rises to 104,
5In a more accurate or generalized model, we can classify the var-
ious clients according to their bandwidth capabilities, more specif-
ically their network access types like DSL, Cable, T1, Dialup, etc.
This would not change the nature of the results we present.
104
103
102
101
100
100
Bandwidth increase factor
101
(a) Increasing the capacity of the attacked node.
1012
1010
108
106
104
102
100
100
101
Size of the overlay
102
i
n
a
G
n
o
i
t
a
z
m
o
d
n
a
R
i
(b) Increasing the anonymity of the attacked node.
Figure 5: Performance gains with SOS.
Next, we study the effects of anonymizing the attacked node.
If the attacker does not know the identity of the secret servlet for
a particular target, the attacks will be launched randomly onto the
overlay. Only a fraction of those attacks will reach the target servlet.
Thus, the effective arrival rate of the attacks becomes (cid:21)af, where
f is the fraction of the secret servlets in the SOS for a particular
70node. We again compute the ratio of the old probability with the
new blocking probability and denote it as the Randomization Gain
(RG) of the system. In Figure 5(b) we plot the RG of the system as
a function of the number of nodes in the overlay (as the number of
nodes in the overlay increases from left to right, a correspondingly
smaller fraction of the trafﬁc reaches the target node). Placing the
target node randomly in a group of 30 brings down the probability
of attack by 4 orders of magnitude.
5.
IMPLEMENTATION OF SOS
One particularly attractive feature of the SOS architecture is that
it can be implemented using existing software and standardized
protocols, making its adoption and eventual use easier.
Filtering: all high and medium-range (both in terms of perfor-
mance and price) routers, as well as most desktop and server oper-
ating systems, offer some high-speed packet classiﬁcation scheme
that can be used to implement the target perimeter ﬁltering. A
simpliﬁed version of [12] can be used by the target to inform its
perimeter routers of changes in the set of allowed secret servlets.
Authentication and authorization of sources: practically all
commercial and free operating systems include an implementation
of IPsec[15].
IPsec is a set of protocols that can be used to es-
tablish cryptographic keys and other relevant parameters between a
pair of hosts, and then protect (encrypt and authenticate) the trafﬁc
between them. As described in [4], the conditions under which ac-
cess to the overlay is allowed can be efﬁciently encoded in KeyNote
credentials[3], which resemble public-key certiﬁcates with autho-
rization information embedded. Thus, it is possible to provision
and manage access control for a large SOS infrastructure with min-
imal overhead in terms of performance, storage, and synchroniza-
tion requirements, using the techniques presented in [16].
More speciﬁcally, each authorized source is given a certiﬁcate
by a target authorizing that source to use the SOS infrastructure
to send trafﬁc to the target. In the process of authenticating to an
access point (via the IPsec key-exchange protocol, named IKE [9]),
the source provides this certiﬁcate to the access point. The access
point can both authenticate the source (by verifying a cryptographic
signature) and conﬁrm that the source is allowed to send trafﬁc to
the target (by examining the authorization information embedded in
the credentials). Notice that access points need not store any access
control policies. The certiﬁcates are used to “remind” access points
of the relevant access control policies; once a communication is
torn down, the access point can “forget” the relevant policy and
certiﬁcates.
Tunneling: once trafﬁc has entered the overlay network, it needs
to be forwarded to other SOS nodes toward the beacon, and from
there to the secret servlets. Standard trafﬁc tunneling techniques[11,
1] and protocols can be used to this end: IP-in-IP encapsulation[19],
GRE encapsulation[8], or IPsec in “tunnel mode”. Furthermore,
trafﬁc inside the overlay network can take advantage of trafﬁc pri-
oritization schemes such as MPLS or DiffServ[2], if they are made
available by the infrastructure providers. The routing decisions in-
side the overlay network are based on a Chord-like mechanism[26].
We envision the overlay nodes to be a mix of routers and high-
speed end systems. In particular, since IP tunneling is a lightweight
operation, it is conceivable that SOS functionality can be offered by
service providers without adversely affecting the performance of
their networks. The access points to the overlay network can be a
mix of routers and high-speed end systems (with appropriate cryp-
tographic acceleration hardware to boost performance). The access
points and secret servlets can also act as “charging” points, if SOS-
like functionality is offered on a commercial basis. Finally, since
overlay nodes are only called upon to do encapsulated-packet for-
warding, cross-provider collaboration6 is a straightforward propo-
sition, compared to controlled exposure of the ﬁltering mechanism
among different providers.
6. DISCUSSION
Our study of SOS is admittedly in its early stages. There are
several issues that need to be addressed for the service to have a
viable impact within the Internet. In this section, we discuss current
limitations and suggest directions for future research.
Attacks from inside the overlay: We have assumed that no ma-
licious user can successfully bypass our protection perimeter. How-
ever, in practice, security management oversights or development
bugs could lead to situations where breaches occur. An evaluation
of the potential damages that can be done from the inside, and ap-
proaches to limit these damages warrants further investigation.
A shared overlay: We have presented SOS as a means to permit
communication from a single conﬁrmed source point to a single
target. The architecture should easily scale to handle numerous
conﬁrmed source points transmitting to multiple targets. Users of
the infrastructure should treat it as an untrusted network in terms
of privacy or integrity (i.e., if their communications are of a sensi-
tive nature, they should be appropriately encrypted) — SOS only
attempts to address the DoS problem; as such, it should be treated
as a virtual WAN.
We note that in its current form, state for each target must be
maintained at the secret servlets and beacons that support those tar-
gets as well as at access points (to conﬁrm a source point’s right to
contact the target). Scalability is improved by limiting the set of ac-
cess points, secret servlets and beacons that offer support to a given
target. However, this makes the service more prone to DoS attacks.
The overlay becomes more efﬁcient at protecting users from DoS
attacks as it grows. Hence, it would be of interest for multiple orga-
nizations to utilize a shared overlay. Naturally, this would increase
the likelihood of the overlay being compromised from the inside.
We intend to investigate some form of sandboxing that could be
constructed within the shared overlay such that a breach in one or-
ganization’s security system would not lead to breaches in other
networks.
Timely delivery: To achieve security, SOS forces trafﬁc through
a series of overlay points that perform different tasks. We suspect
that the latency across the path is far from minimal. Preliminary
simulations have shown the latency to be in the order of 10 times
larger than in the direct communications case (in the absense of
an attack). While this is a large overhead, it may be acceptable
in mission-critical systems. It would be of interest to see if there
are any “shortcuts” through the overlay that do not compromise
security, or to extend the architecture such that it contains a “knob”
that allows users to trade levels of security with timely delivery.
Analysis: The analysis presented here is preliminary. More so-
phisticated means of analyzing SOS, either via a more detailed
mathematical model or through prototype and experimentation, are
needed to better understand its operation.
7. CONCLUSION
In this paper, we addressed the problem of securing a communi-
cation service on top of the existing IP infrastructure from DoS at-
tacks. It is envisioned that such a service would be offered, among
others, to emergency teams in the aftermath of a disaster, to facil-
itate communication between the teams and various agencies and
6While it is not strictly necessary that different service providers
connect their overlay networks, doing so would allow them to ex-
ploit the beneﬁts of scale described in Section 4.
71organizations over the Internet.
We attack the problem with a proactive mechanism, which is
composed of aggressive packet ﬁltering in a site’s network periph-
ery, an overlay network that can self-heal during (and after) a DoS
attack, and a scalable access control mechanism that allows legit-
imate users to use the overlay network. We call this architecture
Secure Overlay Services, or SOS.
Through simple analytical models we show that DoS attacks di-
rected against any part of the SOS infrastructure have negligible
probability of disrupting the communication between two parties:
for instance, when only ten nodes act as beacons, ten nodes act as
secret servlets, and ten nodes act as access points, for an attack to
be successful in one out of ten thousand attempts, approximately
forty percent of the nodes in the overlay must be attacked simul-
taneously. Furthermore, the resistance of a SOS network against
DoS attacks increases greatly with the number of nodes that partic-
ipate in the overlay. Implementing an SOS infrastructure is fairly
straightforward and can be done using almost exclusively off-the-
shelf protocols and software.
We believe that our approach is a novel and powerful way of
countering DoS attacks, especially in service-critical environments.
While there remain several issues to be solved, our work should en-
courage researchers to investigate proactive approaches in address-
ing the DoS problem.
8. ACKNOWLEDGEMENTS
The authors wish to thank the anonymous reviewers for their
valuable comments and suggestions.
9. REFERENCES
[1] D. Andersen, H. Balakrishnan, F. Kaashoek, and R. Morris.
Resilient Overlay Networks. In Proceedings of the 18th
Symposium on Operating Systems Principles (SOSP),
October 2001.
[2] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang, and
W. Weiss. An Architecture for Differentiated Services.
Technical report, IETF RFC 2475, December 1998.
[3] M. Blaze, J. Feigenbaum, J. Ioannidis, and A. D. Keromytis.
The KeyNote Trust Management System Version 2. Internet
RFC 2704, September 1999.
[4] M. Blaze, J. Ioannidis, and A. Keromytis. Trust Managent
for IPsec. In Proceedings of Network and Distributed System
Security Symposium (NDSS), pages 139–151, February 2001.
[5] D. D. Clark. The Design Philosophy of the DARPA Internet
Protocols. In Proceedings of ACM SIGCOMM, pages
106–114, 1988.
[6] F. Dabek, M. F. Kaashoek, R. Morris, D. Karger, and
I. Stoica. Wide-Area Cooperative Storage with CFS. In
Proceedings of ACM SOSP, 2001.
[7] D. Dean, M. Franklin, and A. Stubbleﬁeld. An Algebraic
Approach to IP Traceback. In Proceedings of the Network
and Dsitributed System Security Symposium (NDSS), pages
3–12, February 2001.
[8] D. Farinacci, T. Li, S. Hanks, D. Meyer, and P. Traina.
Generic routing encapsulation (GRE). Request for
Comments 2784, Internet Engineering Task Force, Mar.
2000.
[9] D. Harkins and D. Carrel. The Internet Key Exchange (IKE).
Request for Comments (Proposed Standard) 2409, Internet
Engineering Task Force, Nov. 1998.
[10] L. Heberlein and M. Bishop. Attack Class: Address
Spooﬁng. In Proceedings of the 19th National Information
Systems Security Conference, pages 371–377, October 1996.
[11] J. Ioannidis. Protocols for Mobile Networking. PhD thesis,
Columbia University, New York, 1993.
[12] J. Ioannidis and S. M. Bellovin. Implementing Pushback:
Router-Based Defense Against DDoS Attacks. In
Proceedings of the Network and Distributed System Security
Symposium (NDSS), February 2002.
[13] S. Ioannidis, A. Keromytis, S. Bellovin, and J. Smith.
Implementing a Distributed Firewall. In Proceedings of
Computer and Communications Security (CCS), pages
190–199, November 2000.
[14] D. Karger, E. Lehman, F. Leighton, R. Panigrahy, M. Levine,
and D. Lewin. Consistent Hashing and Random Trees:
Distributed Caching Protocols for Relievig Hot Spots on the
World Wide Web. In Proceedings of ACM Symposium on
Theory of Computing (STOC), pages 654–663, May 1997.
[15] S. Kent and R. Atkinson. Security Architecture for the
Internet Protocol. Request for Comments (Proposed
Standard) 2401, Internet Engineering Task Force, Nov. 1998.
[16] A. D. Keromytis. STRONGMAN: A Scalable Solution To
Trust Management In Networks. PhD thesis, University of
Pennsylvania, Philadelphia, 2001.
[17] L. Kleinrock. Queueing Systems, Volume I: Theory.
Wiley-Interscience, 1975.
[18] D. Moore, G. Voelker, and S. Savage. Inferring Internet
Denial-of-Service Activity. In Proceedings of the 10th
USENIX Security Symposium, pages 9–22, August 2001.
[19] C. Perkins. IP encapsulation within IP. Request for
Comments 2003, Internet Engineering Task Force, Oct.
1996.
[20] M. G. Reed, P. F. Syverson, and D. M. Goldschlag.
Anonymous connections and onion routing. IEEE Journal on
Special Areas in Communications, 16(4):482–494, 1998.
[21] K. W. Ross. Multiservice Loss Models for Broadband
Telecommunication Networks. Springer-Verlag, 1995.
[22] J. H. Saltzer, D. P. Reed, and D. D. Clark. End-to-end
arguments in System Design. ACM Transactions on
Computer Systems, 2(4):277–288, November 1984.
[23] S. Savage, N. Cardwell, D. Wetherall, and T. Anderson. TCP
Congestion Control with a Misbehaving Receiver. ACM
Computer Communications Review, 29(5):71–78, October
1999.
[24] S. Savage, D. Wetherall, A. Karlin, and T. Anderson.
Network Support for IP Traceback. ACM/IEEE Transactions
on Networking, 9(3):226–237, June 2001.
[25] C. Schuba, I. Krsul, M. Kuhn, E. Spafford, A. Sundaram, and
D. Zamboni. Analysis of a Denial of Service Attack on TCP.
In Proceedings of IEEE Security and Privacy, pages
208–223, May 1997.
[26] I. Stoica, R. Morris, D. Karger, M. F. Kaashoek, and
H. Balakrishnan. Chord: A Scalable Peer-To-Peer Lookup
Service for Internet Applications. In Proceedings of ACM
SIGCOMM, 2001.
72