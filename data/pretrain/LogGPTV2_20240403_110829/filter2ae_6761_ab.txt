### 3.3 测试
向网站发送攻击语句，被拦截返回403，配置成功
    http://ip/?id=
日志已记录攻击语句
## 四、过程分析
### 4.1 静态分析
[ngx_lua_waf](https://github.com/loveshell/ngx_lua_waf)源文件由四大块组成：
  * 配置文件：`config.lua`
  * 初始化文件：`init.lua`
  * 规则库文件：`wafconf`
  * 执行文件：`waf.lua`
    .
    ├── README.md
    ├── config.lua
    ├── init.lua
    ├── install.sh
    ├── waf.lua
    └── wafconf
        ├── args
        ├── cookie
        ├── post
        ├── url
        ├── user-agent
        └── whiteurl
在nginx配置文件中使用`lua_ngx_module`模块提供的`init_by_lua_file`指令和`access_by_lua_file`指令添加项目，nginx在读取配置阶段会导入`init.lua`配置、访问控制阶段会执行`waf.lua`流程处理http请求包
    http {
        ...
        # lua_waf
        lua_package_path "/etc/nginx/conf.d/waf/?.lua";
        lua_shared_dict limit 10m;
        init_by_lua_file /etc/nginx/conf.d/waf/init.lua;
        access_by_lua_file /etc/nginx/conf.d/waf/waf.lua;
        ...
    }
通过配置文件知道核心文件是`waf.lua`，嵌入在nginx处理http请求11个阶段的`access`阶段，此时刚与客户端建立tcp连接传输完http报文待nginx处理，lua代码可以调用api对请求包过滤实现访问控制，拒绝不符合规则的请求
#### 01 配置文件
**config.lua**
配置具体检查项及拦截后的页面，如：`CookieMatch`开启后会进入cookie检查流程、请求不符合规则则返回`html`
    RulePath = "/usr/local/nginx/conf/waf/wafconf/"
    attacklog = "on"
    logdir = "/usr/local/nginx/logs/hack/"
    UrlDeny="on"
    Redirect="on"
    CookieMatch="on"
    postMatch="on" 
    whiteModule="on" 
    black_fileExt={"php","jsp"}
    ipWhitelist={"127.0.0.1"}
    ipBlocklist={"1.0.0.1"}
    CCDeny="off"
    CCrate="100/60"
    html=[[ 403 ]]
#### 02 初始化文件
**init.lua**
  * 日志记录，格式为：客户端ip + 请求时间 + 拦截模块 + 服务器名 + url + '-' + ua + 拦截规则 
    function log(method,url,data,ruletag)
        if attacklog then
            local realIp = getClientIp()
            local ua = ngx.var.http_user_agent
            local servername=ngx.var.server_name
            local time=ngx.localtime()
            if ua  then
                line = realIp.." ["..time.."] \""..method.." "..servername..url.."\" \""..data.."\"  \""..ua.."\" \""..ruletag.."\"\n"
            else
                line = realIp.." ["..time.."] \""..method.." "..servername..url.."\" \""..data.."\" - \""..ruletag.."\"\n"
            end
            local filename = logpath..'/'..servername.."_"..ngx.today().."_sec.log"
            write(filename,line)
        end
    end
  * 定义函数检查内容，如：`args()`函数，调用`lua_ngx_module`模块提供的`ngx.req.get_uri_args()`api获取args，再与规则库`argsrules`做正则匹配，匹配成功则日志记录相关信息，最后`say_html()`返回拦截后的页面
    function args()
        for _,rule in pairs(argsrules) do
            local args = ngx.req.get_uri_args()
            for key, val in pairs(args) do
                if type(val)=='table' then
                    if val ~= false then
                        data=table.concat(val, " ")
                    end
                else
                    data=val
                end
                if data and type(data) ~= "boolean" and rule ~="" and ngxmatch(unescape(data),rule,"isjo") then
                    log('GET',ngx.var.request_uri,"-",rule)
                    say_html()
                    return true
                end
            end
        end
        return false
    end
#### 03 规则库文件
匹配恶意字符串的具体规则，如：`args`中有注入、包含、ssrf等常见敏感字符
    \.\./
    \:\$
    \$\{
    select.+(from|limit)
    (?:(union(.*?)select))
    having|rongjitest
    sleep\((\s*)(\d*)(\s*)\)
    benchmark\((.*)\,(.*)\)
    base64_decode\(
    (?:from\W+information_schema\W)
    (?:(?:current_)user|database|schema|connection_id)\s*\(
    (?:etc\/\W*passwd)
    into(\s+)+(?:dump|out)file\s*
    group\s+by.+\(
    xwork.MethodAccessor
    (?:define|eval|file_get_contents|include|require|require_once|shell_exec|phpinfo|system|passthru|preg_\w+|execute|echo|print|print_r|var_dump|(fp)open|alert|showmodaldialog)\(
    xwork\.MethodAccessor
    (gopher|doc|php|glob|file|phar|zlib|ftp|ldap|dict|ogg|data)\:\/
    java\.lang
    \$_(GET|post|cookie|files|session|env|phplib|GLOBALS|SERVER)\[
    \ CCcount then  -- 判断是否大于100
                     ngx.exit(503)  -- 返回503
                    return true
                else  -- 存在token，但是没有达到100个数量
                     limit:incr(token,1)  -- 请求数增加1
                end
            else  -- 匹配失败，共享空间新增一个token，计数1，60秒过期时间
                limit:set(token,1,CCseconds)
            end
        end
        return false
    end
  * url白名单
    --[[
        ngx.var.uri api获取的uri与规则库提取的whiteurl做白名单匹配
    ]]
    function whiteurl()
        if WhiteCheck then
            if wturlrules ~=nil then
                for _,rule in pairs(wturlrules) do
                    if ngxmatch(ngx.var.uri,rule,"isjo") then
                        return true 
                     end
                end
            end
        end
        return false
    end
  * ua检查
    --[[
        ngx.var.http_user_agent api获取的ua值与规则库提取的uarules做黑名单匹配
        匹配成功时调用log()函数记录日志，并返回403页面
    ]]
    function ua()
        local ua = ngx.var.http_user_agent
        if ua ~= nil then