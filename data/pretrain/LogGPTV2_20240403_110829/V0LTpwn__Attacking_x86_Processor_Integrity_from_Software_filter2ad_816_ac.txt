exit;
}
}
1
2
3
4
5
6
_loop :
push % r10 ;
vpsllq % xmm3 , % xmm4 , % xmm6
vpsllq % xmm3 , % xmm5 , % xmm7
pop % r10 ;
jmp _loop ;
Listing 2: Code of our most eﬀective stressor.
candidate programs while the system core increasingly
undervolts and collects information about possible fault
occurrences. Moreover, our setup establishes tempera-
ture diﬀerences between the cores. The idle cores have
the lowest temperature. As the victim core is constantly
executing code, it has the highest temperature. Addi-
tionally, we use stressors on the logical partner core to
further increase the temperature. The temperature of
the attack core is lower than the victim core; since we
want to keep it as low as possible, the logical partner of
the attack core is kept idle.
Test Programs We developed a set of test programs,
which are based on the concept in Listing 1. The idea
is to have conditional checks on deterministic results
which stop execution when a deviation has been detected.
First, we deterministically compute a reference result
on Line 2. This step is conducted at normal operation
voltage. Next, we execute the same computation but in
a loop and using an undervolting setup. In each iteration
we compare the reference output with the output of the
previous iteration. Since the input is ﬁxed and the target
instructions perform deterministic operations on that
input, any diﬀerences from the reference results indicates
that a fault has corrupted the result.
In order to stress the undervolted compo-
Stressors
nents of the CPU, we looked for instruction sequences to
execute on the logical partner of the target core. While
the faults still happen frequently without stressors and
even with hyperthreading disabled, we ﬁnd that a good
stressor improves the likelihood of faults. The best-
Figure 4: Processor behavior when exposed to reduced
voltage. The voltage levels are only for illustrative pur-
poses, since they vary according to processor model and
P-state.
// logical vector operation
vpxor % xmm1 , % xmm2 , % xmm3
// data transfer to memory
vmovdqu % xmm3 , (% rsp )
1
2
3
4
Listing 3: An instance of the vulnerable pattern VP1.
performing stressor we found is in Listing 2. This stressor
was deployed and running in all of our experiments.
Fault Detection In addition to the test programs, we
relied on two more sources that indicated to us, when a
fault occurred. First, the Machine Check Architecture
(MCA), which delivers meta information about corrected
and uncorrected faults in MSR. During our testing
we monitored the respective MSR with existing tools
like mcelog. For information about uncorrected errors,
we were required to edit the MCE handler, either by
dynamically instrumenting it or by compiling our own
kernel.
Second, we monitor the operating system for processor
exceptions like Invalid Opcode or General Protection.
These exceptions might for instance be raised if the
induced fault tampers with instruction decoding and
therefore leads to the processor executing instructions
that are not part of the correct code.
4.3 Bit ﬂips in SIMD Memory Transfer
In Figure 4, we depict the observed behavior of the
processor while it undergoes undervolting. As the volt-
age decreases, the processor starts to experience some
errors that the MCA is able to correct (Corrected Er-
rors). At a lower voltage, the system becomes unstable;
the processor starts encountering hardware exceptions
in interrupt handlers. However, between these two re-
USENIX Association
29th USENIX Security Symposium    1451
800760770780790Core Voltage (mV)Exploit WindowNominalCorrected ErrorsSystem InstabilityUncorrected Bit Flipsgions we encounter an exploit window, i.e., a voltage
level where the processor experiences uncorrected bit
ﬂips that the MCA does not detect, but the system
is still stable enough. In order to explore the exploit
window, we implemented the concept in Listing 1 with
common encryption algorithms like AES and Twoﬁsh.
The programs continuously encrypt the same buﬀer and
do not lead to faults under nominal voltage conditions.
In our test setup, we executed the programs at diﬀerent
P-states while undervolting the core domain. We found
some of the programs to be susceptible to faults when
reaching speciﬁc voltage levels. This means that the
comparison on Line 7 of Listing 1 revealed a diﬀerence
in the computed results due to ﬂipped bits in the output
buﬀer. As depicted in Figure 4, the exploitable voltage
level is located approximately 5 mV above the point,
where the system starts to become unstable (e.g., due
to exceptions in the kernel).
By manually analyzing the programs, we found the
fault to aﬀect two particular code patterns of SSE/AVX
instructions:
VP1 a parallel logic (e.g., xor) operation, followed by a
move instruction from a vector register to memory,
and
VP2 a parallel add operation, followed by a move in-
struction from a vector register to memory.
An instance of the pattern VP1 is presented in Listing 3.
On Line 2 of Listing 3, the exclusive OR (XOR) of regis-
ters xmm1 and xmm2 is computed and the result is stored
in register xmm3. On Line 4 the value of this register
is moved to memory, which in this case is indirectly
addressed by a pointer in the register rsp.
5 Attacking SGX Enclaves
In the following we describe two diﬀerent attack scenarios:
ﬁrst, our initial proof-of-concept attack that exploits bit
ﬂips induced through undervolting in an enclave. Second,
we present an attack against a real-world SGX crypto
library developed by Intel.
5.1 From Bitﬂips to Attacks in SGX
We will now discuss how we leveraged the bit ﬂips we
discussed in Section 4.3 for the V0LTpwn attack. To
illustrate the impact of bit ﬂips on an SGX enclave, we
start by considering some simple example code which
ﬁrst processes some input in memory and then branches
execution based on the result. We provide a stripped
down version of the relevant parts of the code in Listing 4,
highlighting the most important parts in the form of
inline assembly for clarity. In our example, the variables
a, b, and r represent 128-bit vectors encoding a particular
unsigned long r [2];
__asm__ __volatile__ (
unsigned long a [2]={ ULLONG_MAX , ULLONG_MAX };
unsigned long b [2]={ ULLONG_MAX , ULLONG_MAX };
" vmovdqu %1 , %% xmm10 ;"
" vmovdqu %2 , %% xmm11 ;"
" vpand %% xmm10 , %% xmm11 , %% xmm12 ;"
" vmovdqu %% xmm12 , %0; "
:: "m" (* r) , "m" (* a), "m" (* b)
: "% xmm10 " ,"% xmm11 " ,"% xmm12 " , " memory " );
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
Listing 4: The enclave code used in our control-ﬂow
deviation PoC.
if(r [0] == ULLONG_MAX && r [1] == ULLONG_MAX ){
do_normal_operation ();
} else {
do_recovery ();
}
program value (in this case ULLONG_MAX which causes
every bit to be set to 1).
First, the enclave loads the two values a and b from
memory into registers xmm10 and xmm11 respectively. The
enclave then performs a logical AND of the values a and
b through the instruction on Line 9. It copies the result
back to memory (i.e., variable r) on Line 10. Next, en-
clave execution checks the result against the ULLONG_MAX
value on Line 14. In theory, this means that control ﬂow
should never reach Line 17 in this particular example.
We would like to reiterate that this example code does
not suﬀer from any software bugs and under normal
circumstances enclave execution will always take the if
branch on Line 15. However, using our fault injection
attack we were able to force enclave execution into tak-
ing the else branch on Line 17 instead. We were able
to perform this attack with up to 99% success rate: we
provide detailed evaluation results about fault-inducing
parameters and reliability of this particular exploit sce-
nario in Section 6.3. Next, we are going to demonstrate
how bit ﬂips can be exploited in real-world SGX code.
5.2 Attacking Real-World SGX Code
Implementation of multiple cryptographic ciphers are
prone to our fault injection attacks, including OpenSSL
and the crypto API of the Linux kernel. Hence, we
demonstrate the feasibility of real-world V0LTpwn at-
tacks by targeting an enclave running Intel’s OpenSSL
SGX library, which represents real-world crypto code
that is speciﬁcally designed and intended to run inside an
SGX enclave. We linked its latest Linux library version1
against an enclave that validates a hash-based message
1Branch lin_2.5_1.1.1c of the repository at https://github.
com/intel/intel-sgx-ssl.
1452    29th USENIX Security Symposium
USENIX Association
Processor Core Target core start
temperature (°C)
i7-7700K
i7-8700K
0
1
2
3
0
1
2
3
4
5
Voltage
(V)
0.705
0.700
0.710
0.710
0.760
0.765
0.755
0.765
0.760
0.765
Oﬀset
(mV)
-245
-250
-240
-240
-245
-275
-285
-270
-275
-245
32B payload
24.8
(σ=24.4)
1795.6 (σ=1096.5)
821.2 (σ=321.0)
283.6 (σ=119.9)
9621.6 (σ=146.7)
35.2
(σ=15.9)
2675.6 (σ=195.1)
(σ=0.0)
1496.8 (σ=148.1)
57.4 (σ=114.3)
0.0
0.0
1KB payload
(σ=0.0)
1983.8 (σ=364.2)
745.2 (σ=148.8)
235.2 (σ=51.6)
9548.7 (σ=314.4)
1320.2 (σ=243.3)
119.4 (σ=28.2)
(σ=9.2)
1552.8 (σ=189.5)
(σ=0.0)
4.6
0.0
40
40
40
40
47
47
47
47
47
47
Table 1: Success rates of our attack to the OpenSSL HMAC implementation. We ran every test 5 times and report
the average number of successes per 10 000 tries and the related standard deviation (σ), for every core and payload
size. In addition to absolute voltage levels, we present the oﬀsets applied to MSR 0x150. We found that required
voltage oﬀsets can vary slightly, as base voltage depends on a number of factors, such as active C-states, workload, as
well as temperature.
and the related standard deviation. For every core we
conducted ﬁve independent test runs with two diﬀerent
message sizes (32B and 1KB). The adversary can reliably
induce faults during hash computation on at least one
physical core for each processor (namely core 1 for the
7700K and core 0 for the 8700K). An attacker utilizing
these cores is able to induce faults in up to 34% of the
HMAC validations on the 7700K and up to 99% on the
8700K. The other cores on the 7700K are unable to
function at the same low voltage as core 1, while faults