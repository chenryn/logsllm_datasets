case  
16-bits 
case 
The Activity Bit Percentage (ABPF)  
analysis in the Register File 
The (ABPF) distribution  
in the register file 
The probability of the  
most significant 16-bits and  
8-bits  to be continuous zeros 
(a) 
(b) 
(c) 
Fig. 4. Register ﬁle statistics results gathered throughout all 16 benchmarks
show the NBTI stress analysis (a and b) and the probability of the most
signiﬁcant 16-bits and 8-bits of a written value to be contiguous zeros (c)
inside the one register, to closely understand the NBTI problem
in the register ﬁle. Then, we exploit this study to raise key
observations which form the foundation of our technique.
Key Experimental Observations: In order to analyze the
NBTI stress on a register ﬁle of a typical RISC architec-
ture [21], we examine the 32-bit MIPS architecture.1To take
into account various possible stress scenarios on the register
ﬁle, a wide range of applications from the Mibench and
Mediabench benchmark suites [22], [23], compiled for the
MIPS architecture, have been investigated (for further details
see Section VII). All applications are analyzed individually,
i.e. without interruptions from other tasks or an operating
system. This was necessary in order to be able to achieve an
unfalsiﬁed analysis for each application.
Other works such [19] and [20] only focus on the relation
between the mean stress in SRAM-based registers and NBTI
degradation. However, when examining registers, the mean
duty cycle λ alone is no longer able to quantify the NBTI-
induced stress. The distribution of λ among the register bits
must also be considered, since disregarding it can result in
if an 8-
a wrong estimation in some cases. For instance,
bit register contains the constant value “11110000”, then the
average duty cycle for the total 8 bits will be 50%, giving the
impression that this register is under optimally balanced stress,
whereas instead this particular register will quickly age and
may even fail after some time due to NBTI because half of its
PMOS transistors are under continuous stress for the register’s
entire lifetime. For this we augment the duty cycle with the
new metric, the Activity Bit Probability (ABP) of register r
is deﬁned as: ABPr = {(cid:2)λ(cid:3)r, σλ,r} where (cid:2)λ(cid:3) is the mean
duty cycle, and σλ its standard deviation inside the register.
Extending this concept to the entire register ﬁle ABPF , we
(cid:5)
deﬁne
(cid:2)
(cid:3)(cid:4)
ABPF =
(cid:2)ABPr(cid:3)F ,
r(σ2
r + (cid:2)λ(cid:3)2
r)
|F|
− (cid:2)ABPr(cid:3)2
F
1Our technique can easily be adapted to other architectures (further details
in Section VI-D).
where |F| is the size of the register ﬁle, i.e. the number of
registers.
Fig 4(a) shows the (cid:2)ABPr(cid:3)F of the entire register ﬁle for
different (in this case 16) applications. Indeed, (cid:2)ABPr(cid:3)F is
within a critical level (around 80%) in all applications which
indicates high NBTI effects on the register ﬁle, because the
NBTI inﬂuence becomes higher when (cid:2)ABPr(cid:3)F value is far
from 50% (either toward 100% or 0%) (see Fig 2). To obtain
a closer view of the register ﬁle, we study the NBTI stress
inside the bits of each register to recognize which bits are
more susceptible to NBTI. Fig 4(a) also shows the ABPF
limited to the upper half of a register, deﬁned as the half of
the register where the most signiﬁcant bits are stored, as well
as the lower half. As noticed, the upper half is under higher
NBTI stress and therefore the NBTI effects between the two
halves are not well balanced.
Toward further analysis, we analyze the ABPr in the indi-
vidual registers to study their sensitivity with respect to NBTI.
Our experiments in this direction raised a key observation: that
registers which contain the same value for prolonged intervals
during execution time are largely responsible for worsening
the overall NBTI stress in the entire register ﬁle. The main
reason behind this fact is that not updating the stored value
in the SRAM cells of a register over long time intervals
results in unbalanced stress on the PMOS transistors. In other
words, some PMOS transistors will be in the stress phase
for a very long time and only in the recovery phase for a
short time, as motivated earlier. Indeed, this observation leads
to a categorization of the registers of a register ﬁle into two
main groups: infrequent and frequent. The infrequent category
contains the registers that are infrequently written during
execution time2 and the other group contains the registers
which are frequently written and hence the stored value there
is repeatedly changed. The ABPr in both the infrequent and
frequent categories is presented in Fig 4(b). As shown, the
ABPr in the infrequent category is higher than the frequent
category due to seldom updating of the stored values, leading
to higher sensitivity to NBTI.
Additionally, the zero register presents a special case in
our analysis. In hardware, this register cannot be written to. It
is often implemented using “hard-wired” SRAM cells through
tied-to-gnd or tied-to-Vdd standard cells. Because of that, we
also do not apply any NBTI mitigation technique to the zero
register, and it is not affected by NBTI across all experiments.
In summary, we observe through our analysis that not all
registers are equally sensitive to NBTI (i.e. some registers
suffer from more NBTI stress than others) and the NBTI stress
across the register bits itself is not equally balanced. Moreover,
the overall ABPF reﬂects the high and unbalanced voltage
stress on the register ﬁle such that mitigating NBTI-induced
stress effects is a desirable goal.
2We consider a register to be infrequent, throughout our targeted bench-
marks, if it is rarely accessed by read/write operations. Particularly, when the
percentage of write/read operations occurring in that register is less than 0.1%
of the total write/read operations in the whole register ﬁle.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:40:27 UTC from IEEE Xplore.  Restrictions apply. 
V. OUR APPROACH: REGISTER-INTERNAL STRESS
BALANCING
us to identify infrequent registers. Then, toggling them can be
done either in software or hardware.
Based on the key observations obtained from our experi-
ments (see Section IV), we propose to separately address the
NBTI impact on frequent and infrequent registers. Firstly, we
explain how our technique balances the NBTI stress in an
entire frequent register along with showing the required mech-
anism to achieve that. Later, we discuss possible techniques
to also address the NBTI problem in the infrequent registers.
Fig 5 shows the ﬂow diagram of our approach detailed in the
rest of this section.
Frequent Registers: as seen in Fig 4(a), the upper half
of a register often suffers more from NBTI stress than the
lower half. We also found in our study that this observation
becomes more highlighted in the frequent registers. For that,
we propose to relax these bits by ﬁnding a way to reduce the
imbalance of the λ of the individual bits of the register, and
thereby minimize the NBTI effects.
To understand why the NBTI stress in the upper half is
higher and in order to analyze which bits therein should be
relaxed, we investigate the probability for the case that the most
signiﬁcant bits in the upper half are contiguous zeros/ones.
Based on our statistics, we found that the probability of the
upper half to be continues zeros plays the most important role.
The presented results in Fig 4(c) illustrate that, when the 32-
bit MIPS architecture is studied, the most signiﬁcant 8 bits
are contiguous zeros in 84% of the values written into the
register ﬁle. Similarly, the most signiﬁcant 16 bits are also
contiguous zeros in 66% of all written values, on average
across all benchmarks.
We propose a two step technique for balancing the ABPr
of frequent registers of a register ﬁle. It is applied every time
the register is written to.
•
•
Relaxing: resulting from the observation that the most
signiﬁcant bits often contain the same value with little
entropy, e.g. contiguous leading zeros, it is possible
to reduce the number of information bits and instead
write values into the upper bits of the register that
balance the voltage stress on the PMOS transistors.
Since the leading bits are generally zeros, this typi-
cally implies writing ‘1’ into the upper bits and storing
the information that the bits have been replaced in
binary ﬂags (as clariﬁed later in the implementation
section).
Swapping: while relaxing allows for balancing of
NBTI-induced stress in the upper bits of a register, it
is not suited to balance the stress spatially among all
bits of the register. To facilitate this, we periodically
swap the values stored in the upper and lower halves
to balance the stress between them and to balance the
NBTI effects distribution among all the entire bits of
a frequent register.
Infrequent Registers: in order to achieve a better balancing
and to further mitigating the NBTI effects, we propose to
periodically toggle the infrequent registers, as they are largely
responsible for the deviation of the ABPF of the register
ﬁle from the well-balanced case where the impact of NBTI
is minimal. Proﬁling information of an application can guide
Benchmark 
Binary 
Instruction Set 
Simulator (MIPS) 
input1 
inputn 
profiling  
ABPF 
Register Permutation 
modified  
binary 
Register 
Classification 
frequent register 
infrequent register 
^ r 
^ w 
Δt 
ABPF 
XOR 
Status Reg 
leading  
zeros? 
)
W
S
(
i
e
m
T
n
g
s
e
D
i
)
W
H
(
e
m
i
t
n
u
R
Technology 
node 
Time 
ABPF 
Vdd 
NBTI Model 
Our NBTI 
Simulator 
SRAM 
Circuit Model 
i
l
s
s
y
a
n
A
y
t
i
l
i
b
a
i
l
e
R
i
l
s
s
y
a
n
A
e
n
i
l
f
f
O
write 
r  w 
[R/W details: see Fig. 6] 
Reliability 
Estimation 
Fig. 5. Flow diagram of our proposed technique along with our framework
to estimate the NBTI-induced reliability degradation
VI.
IMPLEMENTATION
In this section, we separately discuss the different imple-
mentations of our technique to tackle the NBTI degradation
in the frequent and infrequent registers. It is worthy to note
that NBTI stress in the frequent registers is always tackled in
the hardware. Whereas in the infrequent registers, it can be
mitigated in either hard- or software.
A. Frequent Registers
Fig 6 explains how our technique works in detail during
read and write operations. Three extra ﬂag bits (S-bit, M-bit
and R-bit) are associated with each frequent register. The ﬁrst
ﬂag, the S-bit, is used to distinguish between the swapping
case and non-swapping case. The second ﬂag bit (M-bit), is
needed to indicate if the written value is being manipulated
by applying our technique or not. Where it is considered
manipulated when the most signiﬁcant 16 or 8 bits of the
written value are contiguous zeros. Finally, and only in the
case of a manipulated value, the third ﬂag bit (R-bit), is used
to tell which subpart in the upper half has being relaxed (i.e.
inverted to ones). When R-bit is ‘1’, it indicates to that the
full upper half has been relaxed. Otherwise, when it is ‘0’,
it indicates that only the most signiﬁcant 8 bits have been
relaxed. These ﬂag bits are later on used to correctly read the
stored value of that register whenever an instruction performs
a read operation. Initially, we clear all ﬂag bits to indicate the
absence of any relaxing or swapping. The swapping between
the two halves is done only in the case where the S-bit is
cleared (i.e. no swapping was done in the last write operation
for that particular register). We then swap between the two
halves and set the S-bit to ‘1’ indicating the swapping case.
B. Infrequent Registers
In the following we differentiate between hardware and
software implementations of our technique for infrequent
registers category and describe separately each one.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:40:27 UTC from IEEE Xplore.  Restrictions apply. 
IF (the most significant 16 bits are zeros) 
  M-bit = 1; R-bit = 1; value[31..16] =  ones  
ELSIF (the most significant 8 bits are zeros) 
  M-bit = 1; R-bit = 0; value[31.. 24] =  ones 
ELSE 
   M-bit = 0; R-bit = 0; // No manipulation 
IF(S-bit is zero) 
  S-bit = 1; // Swap between the two halves 
  Reg[15..0]   =  value[31..16] 
  Reg[31..16] =  value[15..0]  
ELSE 
   S-bit = 0; // Do not swap 
   Reg[31..0]   = value[31..0] 
i
g
n
x
a
e
R
l
i
g
n
p
p
a
w
S
IF (M-bit is zero) 
       value[31..0] = Reg[31...0] 
ELSIF (R-bit is one) 
       value[31..16] =  zeros 
       value[15..0]   =  Reg[15..0]  
ELSE 
       value[31.. 24] =  zeros 
       value[23..0]    =  Reg[23..0] 
IF(S-bit is zero) 
       output[31..0]   =  value[31..0] 
ELSE 
       output[15..0]   =  value[31..16] 
       output[31..16] =  value[15..0] 
Register File 
32 
Infrequent 