through standardized APIs. For instance, one standard-
ized API is query() that accepts one parameter URI to pin-
point which table to query and other parameters to spec-
ify query conditions (e.g., the conditions used in the where
clause). Another API is insert() which handles requests
to insert new content into local databases. Consequently,
these Android APIs become the actual entry points of con-
tent providers to other apps. We call them start functions.
Figure 3 shows the implementation of a content provider
named ExampleProvider. It implements the query() (line
17), insert() (line 29) and openFile() (line 37) inter-
faces which can be invoked by other apps to operate on
the internal SQLite database and internal ﬁles. Hence these
three functions are start functions.
In order to manipu-
late the data maintained by the internal SQLite database, it
leverages the methods provided by SQLiteDatabase class
to perform SQL query (line 25) or insert data (line 33) into
database. Hence these two methods are terminal functions.
Similarly, the function used to open internal ﬁles (line 41)
is classed as a terminal function.
A passive content leak vulnerability exhibits if certain
inputs can trigger an execution path from a start function
to a terminal function. Accordingly, we generate a func-
tion call graph of a given app to help determine reachabil-
ity from the public content provider interfaces (i.e., start
functions) to the low-level database-operating routines (i.e.,
terminal functions). More speciﬁcally, we ﬁrst generate
the whole program function call graph for the app and ﬁnd
all the functions containing terminal functions. Then for
each start function, we identify all potential paths from
it to corresponding terminal functions. Although the con-
struction of whole program function call graph is a well-
studied topic, there are certain aspects unique to Android.
One example is the resolution of object references, which is
the Android counterpart to traditional points-to analysis in
binary analysis, as the exact type of a class object needs to
be determined before we can actually obtain the list of func-
tions it may invoke. The second one is the call graph dis-
continuity introduced by the event-driven nature of Android
apps (e.g., with extensive use of callbacks or event registra-
tions). As an app may register various callback functions
1  public class ExampleProvider extends ContentProvider {
2 
3     private static class DatabaseHelper extends SQLiteOpenHelper {
4         public void onCreate(SQLiteDatabase db) {
5             db.execSQL("CREATE TABLE example_table ...");
6             db.execSQL("CREATE TABLE private_table ...");
7         }
8     }
9 
10    private static final UriMatcher sUriMatcher;
11    static {
12        sUriMatcher.addURI("com.example.app.provider", "example_table", 1);
13    }
14
15    private DatabaseHelper dbHelper;
16
17    public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {
18        if (sUriMatcher.match(uri) != 1) 
19            throw new IllegalArgumentException("Unknown URI " + uri);
20        return internalQuery(uri, projection, selection, selectionArgs, sortOrder);
21    }
22      
23    private Cursor internalQuery(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {
24        SQLiteDatabase db = dbHelper.getReadableDatabase();
25        Cursor c = db.query("example_table", projection, selection, selectionArgs, null, null, sortOrder);
26        return c;
27    }
28
29    public Uri insert(Uri uri, ContentValues initialValues) {
30        if (sUriMatcher.match(uri) != 1) 
31            throw new IllegalArgumentException("Unknown URI " + uri);
32        SQLiteDatabase db = dbHelper.getWritableDatabase();
33        long rowId = db.insert("example_table", null, initialValues);
34        ...
35    }
36
37    public ParcelFileDescriptor openFile(Uri uri, String mode) {
38        try { 
39            String newPath = uri.getPath();
40            File newFile = new File(newPath);
41            return ParcelFileDescriptor.open(newFile,ParcelFileDescriptor.MODE_READ_ONLY);                    
42        } 
43        ...
44    }
45 }
Figure 3. The source code of a content provider implementation
that can be executed at certain events by the Android run-
time, these registered callbacks may not show up in the gen-
erated function call graph. To solve these problems, we take
a conservative approach by annotating these callback reg-
istration routines and reconnecting callback routines back
to the generated call graph. For example we annotate the
methods in class Thread and Handler and reconnect the
function Thread.run() to Thread.start() and the function
Handler.sendMessage() to Handler.handleMessage(). In
Figure 3, we show the possible execution paths from start
functions to terminal functions as dotted lines.
After identifying possible paths from start functions to
various terminal functions, we then need to generate cor-
responding inputs as evidence to show the feasibility of one
particular execution path. To this end, we ﬁrst generate a
control ﬂow graph (CFG) for each function along the path,
then leverage data-ﬂow analysis to obtain necessary con-
straints that may guide the execution path for a speciﬁc in-
put. The collected constraints will be fed into a constraint
solver to generate the appropriate inputs that satisfy these
constraints. Our approach to generate corresponding in-
puts is summarized in Algorithm 1. Unfortunately, there
also exists certain Android-speciﬁc aspects that make this
process challenging. First of all, content providers heav-
ily use Android-speciﬁc APIs to process inputs. For ex-
ample, an uri input of both query() and insert() func-
tions is processed by UriMatcher to return an integer value,
which indicates a mapping between the uri and the re-
turn value. Without the knowledge of this mapping, a con-
straint solver will not be able to resolve this constraint. For
example, the mapping between uri and the return value
is “content://com.example.app.provider/example table” to
1 for the content provided shown in Figure 3. Secondly,
certain string-related operations in content provider can
also introduce problems to derive the associated constraints.
Speciﬁcally, without understanding the semantics of these
string operations, it is hard to generate the constraints for
the values involved in these operations. To address that,
we choose to model or summarize the operations in Java
String class and directly take them into account for con-
straint extraction. Thirdly, in certain cases, we may not
be able to model the internals of speciﬁc functions. To
accommodate them, we conservatively explore all paths if
the return values of these functions are used as constraint
variables. For the code shown in Figure 3, the generated
input for parameter uri which can trigger the execution
from start function ContentProvider.query() (line 17)
to terminal function SQLiteDatabase.query() (line 25) is
Algorithm 1: Generating inputs for start functions
Input: set of start functions, set of terminal
functions, function call graph
Output: generated inputs for start functions
paths = []
starts = [start function]
terminals = [terminal function]
callGraph = [path in function call graph]
foreach s ∈ starts do
foreach t ∈ terminals do
if (s, t) ∈ callGraph then
paths.add(s, t);
constraints = []
foreach path ∈ paths do
constraints.add(genConstraint(s, t));
inputs = []
foreach constraint ∈ constraints do
inputs.add(genInput(constraint));
return inputs
“content://com.example.app.provider/example table”.
Our static analysis approach is conservative and will
likely introduce false positives when generating inputs to
an execution path. To address that, we further have a dy-
namic execution module to conﬁrm the calculated inputs.
The dynamic execution module is based on a test app that
runs in a real Android phone and takes these generated in-
puts to invoke the exposed content provider interfaces. The
test app then records and analyzes the return values to deter-
mine the existence of the vulnerabilities. For example if the
invocation of ContentProvider.query() returns a concrete
Cursor object, then we can conﬁrm that the content provider
interface (or the app) is vulnerable to passive content leaks.
Similarly, if the invocation of ContentProvider.insert()
returns a concrete URI object, then the app is susceptible to
content pollution.
3.3 Leaked/Polluted Content Break(cid:173)down
After identifying the set of vulnerable apps, we want to
assess the level of threats by classifying the types of leaked
content as well as possible side effects caused by the pol-
luted content. For this purpose, we leverage again the earlier
function call graph and CFG. More speciﬁcally, in order to
identify the types of content leaked by an exposed content
provider interface, we need to know the types of content
that have been saved in the content provider before. Cor-
respondingly, if there is a possible execution path between
an Android API that returns certain type of private informa-
tion (such as contacts) and another API that is used to insert
private information into the content provider, then we can
know the type of content stored in the content provider. As
a result if this app is vulnerable to a passive content leak,
we can infer the speciﬁc type of private information may be
leaked. Similarly, we apply this approach to infer possible
sides effects caused by the polluted content.
In particular, for a given vulnerable app, if there is an ex-
ecution path from a contact-retrieving API to an API that
inserts data into the content provider, we can infer that
the type of data stored in content provider could be con-
tacts. Consequently, the type of private content that may
be leaked is also contacts. Similarly, if there is an execu-
tion path from the query() function (of a content provider)
to an Android API that blocks incoming SMS messages
(abortBroadcast()), we may consider this app could block
certain SMS messages according to the content or ﬁltering
rules injected by attackers.
We stress that the above method will introduce false pos-
itives (as the presence of an execution path in the call graph
does not guarantee it is actually executed at runtime). As a
result, there is still a need to manually verify the ﬁndings.
Fortunately, the reported execution paths signiﬁcantly speed
up the analysis. Moreover, our prototyping experience also
shows that the context information of apps is helpful to un-
derstand the semantics or types of information that may be
organized in local databases. For example, an instant mes-
senger (IM) app might use the content provider interface
to maintain its accounts, buddy list, and conversation logs.
In this case, we do not have well-deﬁned Android APIs to
infer the relationship between the app and the type of pri-
vate information saved on the vulnerable content provider.
Fortunately we can leverage context information to classify
different types of private information.
4
Implementation
We have implemented a ContentScope prototype as a
mix of Python scripts and Java code. The ﬁrst two steps in
our system, i.e., candidate app selection and vulnerable app
determination, were developed using Python with 3, 813
source lines of code (SLOC). The last step, i.e., vulner-
able apps classiﬁcation, was developed using Java, which
extends the open source baksmali disassembler tool (1.2.6)
and introduces additional 2, 800 SLOCs.
To detect the passive content leak vulnerability, our
prototype focuses on two different types of start functions
in content provider that could leak private data: one is
standard ContentProvider.query() that supports struc-
tured data maintained in internal SQLite databases and the
other is ContentProvider.openFile() that returns a ﬁle
descriptor to access a ﬁle in the app’s private data directory.
These two entry points, if not protected, can be exploited
by malicious apps to retrieve either arbitrary data stored di-
rectly in local SQLite database or any ﬁle accessible to the
vulnerable app, including those in its private data directory
(such as the local SQLite database ﬁle itself). For each of
them, we then choose the corresponding terminal func-
tions that either query the data from internal database or
open a ﬁle on the phone. The terminal functions supported
in our current prototype for ContentProvider.query() and
ContentProvider.openFile() are SQLiteQueryBuilder.
query(),
SQLiteDatabase.
rawQuery() (which are used to submit the SQL query
into internal database) and ParcelFileDescriptor.open()
(which is used to read a ﬁle object directly and return the
corresponding ﬁle descriptor).
SQLiteDatabase.query(),
After determining the start and terminal functions,
our prototype builds the function call graph (with intra-
method control ﬂow graph), extracts the execution paths
from start to terminal functions, derives necessary con-
straints along those paths and eventually generates corre-
sponding inputs that satisfy these constraints. As an exam-
ple, the method signature of one start function for pas-
sive content leak detection is ContentProvider.query (Uri
uri, String[] projection, String selection, String[]
selectionArgs, String sortOrder). The parameter uri is
used to determine which type of information needs to be re-
turned or which table in the database needs to be queried.
Hence, by enumerating different uri values that satisfy the
constraints, we can explore different code paths between
the ContentProvider.query() (start function) and other
terminal functions to retrieve private data maintained in
different tables.
Our experience shows that exhaustively exploring all
code paths between the ContentProvider.query() func-
tions and terminal functions may be limited to only query
the tables speciﬁed in the content provider, not others. In
other words, if there exist other tables that are not speci-
ﬁed in this content provider, their data may not be queried.
To address that, we extend our system to launch SQL
injection attacks [8] in an attempt to obtain accesses to
those tables. Speciﬁcally, SQLiteDatabase.query() lever-
ages SQLiteQueryBuilder.buildQueryString() to con-
struct the ﬁnal SQL strings by concatenating several param-
eters together. For example, for the query function in line
25 of Figure 3, the ﬁnal query string constructed is “select
projection from example table where selection = selec-
tionArgs order by sortOrder;”. As a result the attackers
can pass the special projection parameter with “∗ from
private table;” to query() function so that the ﬁnal query
string will become “select ∗ from private table; from ex-
ample table where selection = selectionArgs order by sor-
tOrder;”. In Android platform, all the SQL statements af-
ter the ﬁrst special character “;” will not be executed, so
the effective SQL statement executed is “select ∗ from pri-
vate table;”, which essentially returns all the data in table
named private table. Note that the SQL injection attack
will not work when the content provider explicitly checks
the column names in parameters [8] before issuing SQL
queries. However, the use of SQL injection extends the
reach to other (private) data that may be otherwise missed.
In fact, we have identiﬁed such apps where private data can
only be leaked through SQL injection (Section 5).
Similarly,
to detect content pollution vulnerabil-
ity, we use start functions (e.g., ContentProvider.
insert(), ContentProvider.update()) with correspond-
ing terminal functions (e.g., SQLiteDatabase.insert(),
SQLiteDatabase.insertOrThrow(),
SQLiteDatabase.
insertWithOnConflict(), SQLiteDatabase.update(), and
SQLiteDatabase.updateWithOnConflict()).
Different
from the passive content leak case, one additional challenge
here is that we need to generate appropriate data that will
be injected into the content provider, which requires prior
knowledge of the table scheme. In our prototype, we obtain
it by inferring the SQL statements used to create table in
method SQLiteOpenHelper.onCreate().
In many cases,
the SQL statements are constant strings or concatenated
with constant strings. For example, the SQL statements
used to create tables for the content provider in Figure 3
are shown in line 5 and 6. If not, we will then run the apps
in an Android emulator with a customized framework with
hooks in class SQLiteOpenHelper to record the detailed
SQL strings used to create the table. Another related
challenge is how to choose the right value for each column
in the table. The insertion will fail if the chosen value
happens to be in conﬂict with existing ones for the primary
key column.
In our prototype, we make ten different
attempts with each attempt having different random values
to minimize the chance of a conﬂict.
To conﬁrm the detected vulnerabilities, we developed a
test app that runs on a real phone. For automation, this app
accepts inputs in a conﬁguration ﬁle and uses them to in-
voke each individual content provider interface in the vul-
nerable app. If the related ContentProvider.query() in-
vocation returns a valid Cursor object for database access
or the ContentProvider.openFile() invocation returns a
valid ParcelFileDescriptor, we will consider this app is
indeed vulnerable to passive content leaks. Similarly, if
the invocation of ContentProvider.insert() returns a new
URI object, we will mark the app as vulnerable to content
pollution. To help the automation of this process, we also
develop a shell script to install each potentially vulnerable
app, execute our test app (with app-speciﬁc conﬁguration
ﬁle), and retrieve the test results.
Finally, to classify the conﬁrmed vulnerable apps, our
current prototype automatically generates the suspect exe-
cution paths and aims to classify the type of information
saved in local database. Meanwhile, there is a need to
Total
Apps
Candidate
Vul. Apps
Vulnerable Apps
#
62
,
519
3
,
018
Passive Content Leak
Content Pollution
1
,
279
871