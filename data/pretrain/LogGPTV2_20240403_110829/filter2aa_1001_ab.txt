在⼤概简单了解上⾯的流程后，接下来我们来具体看⼀下实现。如果这部分你有基础，只关注攻击⾏为的话，请从
第三章开始看。
1. 服务注册
① 远程对象创建
⾸先我们创建了⼀个远程对象： RemoteInterface remoteObject = new RemoteObject(); ，这个对象继承了
UnicastRemoteObject，这个类⽤于使⽤ JRMP 协议 export 远程对象，并获取与远程对象进⾏通信的 Stub。具体
是什么意思呢？我们看⼀下流程。
在初始化时，会创建⼀个 UnicastServerRef 对象，并调⽤其 exportObject  ⽅法来 export RemoteObject 这个
远程对象。
这其中使⽤ sun.rmi.server.Util#createProxy()  ⽅法使⽤ RemoteObjectInvocationHandler 来为我们测试
写的 RemoteObject 实现的 RemoteInterface 接⼝创建动态代理。
if (System.getSecurityManager() == null) {
    System.setSecurityManager(new RMISecurityManager());
}
grant {
    permission java.security.AllPermission;
};
然后创建 sun.rmi.transport.Target  对象，使⽤这个 Target 对象封装了我们远程执⾏⽅法和⽣成的动态代理
类（Stub）。
并调⽤ LiveRef#exportObject  接着调⽤ sun.rmi.transport.tcp.TCPEndpoint#exportObject  监听本地
端⼝。
然后调⽤ TCPTransport 的 exportObject ⽅法将 Target 实例注册到 ObjectTable 中。ObjectTable ⽤来管理所有
发布的服务实例 Target，ObjectTable 提供了根据 ObjectEndpoint 和 Remote 实例两种⽅式查找 Target 的⽅法
（不同参数的 getTarget ⽅法）。
上述流程总结成⼀张图，如下：
⾸先来看⼀下 RemoteObjectInvocationHandler 这个动态代理，继承 RemoteObject 实现 InvocationHandler，
因此这是⼀个可序列化的、可使⽤ RMI 远程传输的动态代理类。既然是动态代理类，⾃然重点关注 invoke ⽅法，
可以看到如果是 Object 的⽅法会调⽤ invokeObjectMethod  ⽅法，其他的则调⽤ invokeRemoteMethod  ⽅
法。
⽽在 invokeRemoteMethod  中实际是委托 RemoteRef 的⼦类 UnicastRef 的 invoke ⽅法执⾏调⽤。
UnicastRef 的 invoke ⽅法是⼀个建⽴连接，执⾏调⽤，并读取结果并反序列化的过程。这⾥，UnicastRef 包含属
性 LiveRef ，LiveRef 类中的 Endpoint、Channel 封装了与⽹络通信相关的⽅法。
反序列化⽅法在 unmarshalValue  中。
② 注册中⼼创建
在代码中，我们通常使⽤ LocateRegistry.createRegistry(1099);  来创建注册中⼼，那么这个过程⼜发⽣了
什么呢？继续跟代码。
⾸先是可以看到 createRegistry ⽅法实际 new 了⼀个 RegistryImpl 对象。
RegistryImpl 的构造⽅法中创建 LiveRef 对象，然后创建 UnicastServerRef 对象，最后调⽤ setup  进⾏配置。
在 setup  ⽅法中，依旧是使⽤ UnicastServerRef 的 exportObject ⽅法 export 对象，只不过这次 export 的是
RegistryImpl 这个对象。
在 exportObject ⽅法中，重要的⼀步就是使⽤ Util.createProxy()  来创建动态代理，之前提到对远程对象使
⽤ RemoteObjectInvocationHandler 来创建，但是之前有⼀个 stubClassExists 的判断。
如果需要创建代理的类在本地有 _Stub  的类，则直接使⽤ createStub ⽅法反射调⽤ stub 类的构造⽅法创建类实
例。
这⾥由于是 RegistryImpl 这个类，系统会找到 RegistryImpl_Stub 这个类并进⾏实例化，RegistryImpl_Stub 继承
了 RemoteStub ，实现了 Registry。这个类实现了 bind/list/lookup/rebind/unbind 等 Registry 定义的⽅法，全
部是通过序列化和反序列化来实现的。
创建完代理类之后，会调⽤ setSkeleton ⽅法调⽤ Util.createSkeleton()  ⽅法创建 skeleton。
其实就是反射实例化 RegistryImpl_Skel 这个类并引⽤在 UnicastServerRef 的 this.skel  中。
RegistryImpl_Skel 类提供了 dispatch ⽅法来分发具体的操作。
后续的 export 流程相同。
注册中⼼与远程服务对象注册的⼤部分流程相同，差异在：
远程服务对象使⽤动态代理，invoke ⽅法最终调⽤ UnicastRef 的 invoke ⽅法，注册中⼼使⽤
RegistryImpl_Stub，同时还创建了 RegistryImpl_Skel
远程对象默认随机端⼝，注册中⼼默认是 1099（当然也可以指定）
③ 服务注册
注册说⽩了就是 bind 的过程，通常情况下，如果 Server 端和 Registry 在同⼀端，我们可以直接调⽤Registry 的
bind ⽅法进⾏绑定，具体实现在 RegistryImpl 的 bind ⽅法，就是将 Remote 对象和名称 String 放在成员变量
bindings 中，这是⼀个 Hashtable 对象。
如果 Server 端和 Registry 端不在⼀起，那我们需要先获取 Registry 对象，⽆论是使⽤ Naming 或者
LocateRegistry 都是调⽤ LocateRegistry.getRegistry()  ⽅法来创建 Registry，这部分的创建过程与注册中
⼼注册时的过程是⼀致的。⼀些具体的逻辑放在下⾯服务发现来⼀起说。
2. 服务发现
服务发现，就是获取注册中⼼并对其进⾏操作的过程，这⾥⾯包含 Server 端和 Client 端两种。
如果 Server 端和 Registry 在同⼀端，那可以直接使⽤在创建 Registry 时使⽤的 RegistryImpl， 直接调⽤其相关⽅
法，这没什么好说的。
如果 Server 端和 Registry 不同端，则在 Server 端或 Client 端使⽤ LocateRegistry.getRegistry()  ⽅法获取
注册中⼼时都是⼀样的流程：
⾸先在本地创建了⼀个包含了具体通信地址、端⼝的 RegistryImpl_Stub 对象
通过调⽤这个本地的 RegistryImpl_Stub 对象的 bind/list... 等⽅法，来与 Registry 端进⾏通信
⽽ RegistryImpl_Stub 的每个⽅法，都实际上调⽤了 RemoteRef 的 invoke ⽅法，进⾏了⼀次远程调⽤链接
这个过程使⽤ java 原⽣序列化及反序列化来实现
获取了注册中⼼后，如果是 Server 端，我们希望在注册中⼼上绑定（bind）我们的服务，如果是 Client 端，我们
希望在注册中⼼遍历（list）、查找（lookup）和调⽤服务，查找的逻辑我们放在下⼀部分服务调⽤来说，这⾥主
要关注绑定的过程。
对于 Server 端向注册中⼼上绑定（bind）来说，⽆论是 Registry 还是 Naming 的 bind  ⽅法，实际上都是调⽤
Server 端⽣成的本地 RegistryImpl_Stub 的 bind  ⽅法。这个⽅法⽐较简单粗暴，建⽴连接然后向流⾥
writeObject 。
实际通过调⽤ UnicastRef 的 invoke ⽅法来进⾏⽹络传输。这⾥有个关键的操作时 marshalCustomCallData  ⽅
法。
使⽤ sun.rmi.server.MarshalOutputStream  封装后会使⽤动态代理类来替换原始类。
以上就 Server 端执⾏ bind ⽅法后进⾏的操作，⼀句话总结就是，根据 Registry 的 host/port 等信息创建本地
RegistryImpl_Stub，然后调⽤其 bind ⽅法向 Registry 端使⽤ writeObject 写⼊ name 和⽣成的动态代理类。
那在 Registry 端都做了什么呢？
在 Registry 端，由 sun.rmi.transport.tcp.TCPTransport#handleMessages  来处理请求，调⽤
serviceCall  ⽅法处理。
serviceCall  ⽅法中从 ObjectTable 中获取封装的 Target 对象，并获取其中的封装的 UnicastServerRef 以及
RegistryImpl 对象。然后调⽤ UnicastServerRef 的 dispatch  ⽅法
UnicastServerRef 的 dispatch  ⽅法调⽤ oldDispatch  ⽅法，这⾥判断了 this.skel  是否为空，⽤来区别⾃
⼰是 Registry 还是 Server。
oldDispatch  ⽅法调⽤ this.skel  也就是 RegistryImpl_Skel 类的 dispatch  ⽅法。
RegistryImpl_Skel 的 dispatch  ⽅法根据流中写⼊的不同的操作类型分发给不同的⽅法处理，例如 0 代表着 bind
⽅法，则从流中读取对应的内容，反序列化，然后调⽤ RegistryImpl 的 bind ⽅法进⾏绑定。
以上就是 Server 端向 Registry 端注册服务的整个流程。
3. 服务调⽤
之后就是 Client 端向 Registry 端查询和请求的过程了。客户端获取 Registry 的流程与上⾯分析的服务端⼀致，这
⾥不再重复。还是通过调⽤本地创建的 RegistryImpl_Stub 对象。
在调⽤其 lookup ⽅法时，会向 Registry 端传递序列化的 name ，然后将 Registry 端回传的结果反序列化，很好
理解。
这⾥还是关注 Registry 端的做法，依旧是 RegistryImpl_Skel 的 dispatch  ⽅法，lookup ⽅法对应的值是 2 ，调
⽤ RegistryImpl 的 lookup ⽅法，然后将查询到的结果 writeObject 到流中。
Client 拿到 Registry 端返回的动态代理对象并且反序列化后，对其进⾏调⽤，这看起来是本地进⾏调⽤，但实际上
是动态代理的 RemoteObjectInvocationHandler 委托 RemoteRef 的 invoke ⽅法进⾏远程通信，由于这个动态代
理类中保存了真正 Server 端对此项服务监听的端⼝，因此 Client 端直接与 Server 端进⾏通信。
Server 端由 UnicastServerRef 的 dispatch ⽅法来处理客户端的请求，会在 this.hashToMethod_Map  中寻找
Client 端对应执⾏ Method 的 hash 值，如果找到了，则会反序列化 Client 端传来的参数，并且通过反射调⽤。
调⽤后将结果序列化给 Client 端，Client 端拿到结果反序列化，完成整个调⽤的过程。
三、总结
上⼀章描述的有些乱，那么这⾥我们总结⼀下，进⾏⼀个完整的服务注册、发现、调⽤流程，都经历了哪些步骤？
现在能明⽩其他⽂章说的那些稀奇古怪的“存根和⻣架”什么的花⾥胡哨的通信模式都代表什么了吧。
这部分流程在 Javasec ⾥说的也很清楚，如果你觉得上⾯我总结的过程过于复杂，可以看下⾯这部分，我这⾥直接
引⽤：
RMI 底层通讯采⽤了Stub (运⾏在客户端) 和 Skeleton (运⾏在服务端) 机制，RMI 调⽤远程⽅法的⼤致如下：
1. RMI 客户端在调⽤远程⽅法时会先创建 Stub ( sun.rmi.registry.RegistryImpl_Stub  )。
2. Stub 会将 Remote 对象传递给远程引⽤层 ( java.rmi.server.RemoteRef  ) 并创建
java.rmi.server.RemoteCall ( 远程调⽤ )对象。
3. RemoteCall 序列化 RMI 服务名称、Remote 对象。
4. RMI 客户端的远程引⽤层传输 RemoteCall 序列化后的请求信息通过 Socket 连接的⽅式传输到 RMI 服务端的
远程引⽤层。
5. RMI服务端的远程引⽤层( sun.rmi.server.UnicastServerRef  )收到请求会请求传递给 Skeleton (