ing reference. Once a risk is found, HareGuard alarms the user,
explaining potential security hazards to her and urging her to make
sure that the app indeed comes from a reliable source or simply re-
move it. To assist the user in this process, the scanner can compare
the signature of the app with the one belonging to the authorized
party, whenever it exists in the database.
We implemented HareGuard in our research, using a database
that documents the ﬁndings made by Harehunter when scanning
the factory images for popular mobile devices.
Evaluation. Our implementation of HareGuard was found to be
effective at detecting all the attack apps we built. We further eval-
uated its performance, whose impacts on its host system are mini-
mum: the scanner was found to utilize only 4.29 MB memory and
consume 0.29% CPU when scanning an app’s manifest. To pro-
tect the Android users from the serious security risks brought in by
Hares, we plan to release the app in the near future, as soon as the
code has been thoroughly evaluated.
5. DISCUSSION
Hares are not just a few isolated, random bugs introduced by im-
plementation lapses. The presence of such ﬂaws implies the weak-
nesses in Android’s design philosophy and its ecosystem. Funda-
mentally, Android is a complex system, whose components and
apps are meant to work together, which leads to highly complicated
interdependent relations among them. In the meantime, the An-
droid ecosystem is known to be highly diverse and de-centralized:
each OS version is customized and re-customized by various par-
ties almost independently and utilized by anyone who can build
an app for the version; so far little guidance has been provided to
help regulate the customizations and app development, making sure
that they respect the existing complicated relations among system
components and apps introduced by themselves and other parties
(AOSP, manufacturers, carriers, app developers, etc).
In the absence of such guidance and a proper enforcement mech-
anism, hanging references become inevitable. As evidenced by
our research (the ﬁrst one on this new category of problems), in-
deed Hares are pervasive, existing on every single device we in-
spected, and also indeed they are security-critical, endangering sen-
sitive user data (e.g., voice memo) and even the proper execution of
system apps (e.g., activity injection in Google Email). Even though
not every problem reported by Harehunter is exploitable, which de-
pends on the conditions for running vulnerable code, the pervasive-
ness of such unprotected code is alarming: without deep inspection
of individual cases, no one knows whether they can be exploited
under certain conditions, leading to unexpected consequences.
Moving forward, we believe that systematic effort needs to be
made to eliminate these ﬂaws, and also lessons need to be learnt
to avoid the similar pitfall when building other open computing
systems. Following are a few thoughts.
Elimination of Hares. To completely eliminate the Hare risks, it
is important to have such interdependent relations well documented
and make them open to the parties involved in OS customizations
and app development. Also, there should be a policy in place that
1257requires that anyone who modiﬁes the OS or builds an app should
not create a hanging relation such as referring to a nonexisting at-
tribute, and a mechanism for the policy compliance check. The
policy enforcement here can leverage the existing Android com-
patibility program, which currently still cannot do security check.
The challenging part is the collection of the interdependent rela-
tions for all known Android versions. Such information is not there
yet. Actually, our study shows that the manufacturer seems un-
aware of the relations on its own device, often breaking them and
causing Hares when customizing an Android version to different
models. A systematic tool, like Harehunter, is needed to identify
such information.
In the meantime, effort should be made to secure each attribute
reference. Most importantly here is explicit authentication before
a reference. All too often we have seen that references are only
protected implicitly: e.g., the reference to a system app is secured
by the presence of the app on a device, which excludes any other
app using the same package name. Such protection is fragile, com-
pletely falling apart once the app is removed when the OS is cus-
tomized for a new device model.
On the other hand, a security check can be more complicated
than it appears to be. More speciﬁcally, even though references
to package names can be directly guarded with a signature check.
Other attributes like content providers, actions, etc. can be directly
used and their presence on a speciﬁc device is often veriﬁed by
checking the current device model and other features. The correct-
ness of such a check, again, hinges on the knowledge about the
components/apps relations across different versions, models, etc.,
which need to be recovered by Harehunter and other similar tools.
Protection of legacy systems. Before we can even think about how
to eliminate Hares in developing future systems and apps, an issue
we ﬁrst need to address is how to secure existing devices, which,
as shown in our research, are riddled with different kinds of Hare
ﬂaws. The techniques we developed, Harehunter and HareGuard,
made a ﬁrst step toward identiﬁcation and protection of these vul-
nerabilities. Particularly, as mentioned earlier, Harehunter can also
play a critical role in gathering the interdependent relations to help
secure new systems and apps. With its great potentials, our cur-
rent implementation is still preliminary: it introduced about 14%
of false positives and missed 19% of truly vulnerable cases in our
study (Section 4.1). Most problems are caused by Flowdroid, the
static analysis tool that supports our system. It is conceivable that
Harehunter will become more effective once a more capable ana-
lyzer is used. Also, for device manufacturers who have the source
code for all the services and system apps, a tool similar to Hare-
hunter, but working on source code, could be more accurate in
detecting the Hare ﬂaws. We expect that these directions will be
explored by both the academia and the industry in the near future.
6. RELATED WORK
In this section, we review related prior research and compare our
work with those studies.
Security risks in Android customizations. The security risks in-
troduced by the fragmented Android ecosystem has been studied
before. Prior research analyzes the pre-installed apps on 10 factory
images and reports the presence of a few known problems such as
over-privilege, permission re-delegation, etc [13] and [12]. Unlike
this prior study, here we focus on a type of vulnerabilities never
reported before, hanging attribute references, which is also speciﬁc
to the customization process. Our research demonstrates the seri-
ous consequences of the new ﬂaws and identiﬁes their fundamental
causes. This has never been done before.
Another related study is the security conﬁgurations of Android’s
Linux device drivers [26]. The research ﬁnds that many of these
devices have not been properly protected, causing their exposures
to the parties that should not access them: e.g., an app can directly
command an exposed camera driver to take picture, even when it
does not have the camera permission. This research also involves
a measurement study that reports the pervasiveness of the prob-
lem across over 2,000 factory images. By comparison, our study
on Hares happens on pre-installed apps, which requires more com-
plicated code analysis than a simple check of Linux drivers’ secu-
rity conﬁgurations, as does the prior work [26]. Also importantly,
pre-installed apps are known to be the main target of a customiza-
tion [24] and their customization-speciﬁc ﬂaws have never been
investigated before, up to our knowledge.
Activity and Service Hijacking on Android. Earlier research
work [10] has studied unauthorized intent receipt where an attacker
can hijack activities and services in case of implicit intents. The
work does not directly touch the Hare ﬂaws as it does not require
the absence of the legitimate activity/service being referred. Rather,
it discusses the cases where multiple recipients are present on the
device. In our work, we discuss that even an explicit intent can be
hijacked when the legitimate recipient is not in place. We further
evaluate the security consequences of hijacking other components
such as content providers and permissions.
Vulnerability detection on Android. Security vulnerabilities on
Android have been extensively studied. Prominent examples in-
clude the re-delegation problem [13], content provider leaks [15],
security issues in push-cloud messaging [19] and others [16]. How-
ever, up to our knowledge, never before has anyone investigated the
security risks of hanging references: i.e., the parties to be invoked
do not exist and can therefore be impersonated by a malicious app.
Most related to our work is the recent study on security risks in
Android upgrades [25]. What has been found is that a malicious
app installed on a lower version Android can claim the capabilities
(e.g., permissions, shared UID, etc.) only show up on a higher ver-
sion, and then automatically acquire such capabilities during an OS
upgrade. This problem (called Pileup [25]) is caused by the logic
ﬂaws within the Android upgrade mechanism, which tends to avoid
substituting a new app for the existing one with the same attributes
such as package names. In a Pileup exploit, new attributes not in
use are preempted by a malicious app before an upgrade, while in a
Hare attack, the adversary takes advantage of the attributes that do
not exist but are still used on a device.
Static analysis on Android. The Hare ﬂaws can be detected by
statically analyzing Android apps. Techniques serving this pur-
pose has been extensively studied [11, 14, 27, 23]. Particularly,
FlowDroid [7] has been widely used for taint analysis on Android
apps. With its popularity, the tool suffers from a few limitations.
For example, it does not handle ICC (inter-component communi-
cation) well, which later has been improved by systems such as
Epicc [21], Didfail [17] and IccTA [18]. This problem could make
guard detection more difﬁcult: e.g., when a reference to a package
has been separated by an ICC call from the program location where
its signature is veriﬁed. In practice, however, this is found to rarely
happen: a vast majority of security checks occur right before the
reference. Therefore, this weakness has never become a big issue
in our study. What does cause a problem is Flowdroid’s limited ca-
pability to identify all the entry points within an app, missing a lot
of callback functions such as onHandleIntent. As a result, we
may not be able to precisely analyze some references that can only
be found through such missing entries. Again, the problem can be
1258addressed by a more capable static analysis tool, which will further
enhance the accuracy of our approach.
Dangling pointer protection. Remotely related to our work is
the prior research on dangling pointers, a memory vulnerability in
which a pointer in a program does not point to a valid object [9].
The problem has been studied for decades and can be detected by
various tools such as Valgrind [20]. Given the conceptual similarity
between this old problem and Hare, the new security risk actually
comes from the interconnections among different apps and system
components, whose detection and mitigation need to be done across
the whole operating system. This poses a new challenge to the sys-
tem security research.
7. CONCLUSION
In this paper, we report our research on a serious Android secu-
rity ﬂaws that have never been studied before. The problem, called
Hare, has been caused by the conﬂict in the decentralized, unregu-
lated Android customization process and the complicated interde-
pendencies among different Android apps and components. Once
an Android version is modiﬁed without fully considering such de-
pendency relations, references to some attributes can easily become
hanging, which can be taken advantage by the adversary to steal
sensitive user information or compromise the integrity of her data.
Our research brings to light the signiﬁcance of this security risks,
revealing the damages that can be done on various Android de-
vices, such as stealing voice memos, controlling the screen un-
lock process, replacing Google’s Email account settings activity,
etc. We further built the ﬁrst tool for automatically detecting Hares
and utilized it to analyze the factory images for 97 popular An-
droid devices. This study shows that almost every single device
contains a large number of Hare ﬂaws and manufacturers have yet
realized the signiﬁcance of this security hazard. To provide An-
droid users immediate protection, we developed an app for auto-
matically identifying the attempts to exploit the vulnerabilities on
various devices. Also our study highlights the importance for reg-
ulating the fragmented Android ecosystem, and offering guidance
and enforcement mechanisms to improve the security assurance for
the system customization and app development.
8. ACKNOWLEDGEMENTS
We thank anonymous reviewers for their comments. This project
was supported in part by the NSF grants CNS-1117106, 1223477,
1223495, 1318814 and 1527141. Kai Chen was supported in part
by NSFC 61100226. Yousra Aafer thanks Samsung Research Amer-
ica for supporting this project during her internship at Samsung.
9. REFERENCES
[1] Android
compatibility.
compatibility/.
http://source.android.com/
[2] Android revolution mobile device technologies.
http://android-
revolution-hd.blogspot.com/p/android-revolution-hd-
mirror-site-var.html. Last Accessed: May 13, 2015.
[3] Samsung updates: Latest news and ﬁrmware for your samsung devices! http:
//samsung-updates.com/. Accessed: 05/02/2013.
[4] Soot: A framework for analyzing and transforming java and android applica-
tions. http://sable.github.io/soot/. Last Accessed: May 13, 2015.
https://developer.android.com/about/
[5] Dashboards.
dashboards/index.html, 2015. Accessed May 13, 2015.
https://sites.google.com/site/
[6] Hare
hunting.
androidharehunting/, May 2015.
[7] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein, Y. Le Traon,
D. Octeau, and P. McDaniel. Flowdroid: Precise context, ﬂow, ﬁeld, object-
In Proceedings
sensitive and lifecycle-aware taint analysis for android apps.
of the 35th ACM SIGPLAN Conference on Programming Language Design and
Implementation, PLDI ’14, New York, NY, USA, 2014.
[8] P. Brodley and leviathan Security Group.
Zero Permission Android Ap-
https://www.leviathansecurity.com/blog/zero-
plications.
permission-android-applications/. Accessed: 10/02/2013.
[9] J. Caballero, G. Grieco, M. Marron, and A. Nappa. Undangle: Early detection of
dangling pointers in use-after-free and double-free vulnerabilities. In Proceed-
ings of the 2012 International Symposium on Software Testing and Analysis,
ISSTA 2012. ACM, 2012.
[10] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner. Analyzing inter-application
communication in android. In Proceedings of the 9th International Conference
on Mobile Systems, Applications, and Services, MobiSys ’11, New York, NY,
USA, 2011. ACM.
[11] M. Egele, D. Brumley, Y. Fratantonio, and C. Kruegel. An empirical study of
cryptographic misuse in android applications. In Proceedings of the 2013 ACM
SIGSAC conference on Computer & communications security. ACM, 2013.
[12] A. P. Felt, E. Chin, S. Hanna, D. Song, and D. Wagner. Android permissions
demystiﬁed. In Proceedings of the 18th ACM conference on Computer and com-
munications security, CCS ’11, New York, NY, USA, 2011. ACM.
[13] A. P. Felt, H. J. Wang, A. Moshchuk, S. Hanna, and E. Chin. Permission re-
delegation: Attacks and defenses. In Proceedings of the 20th USENIX Security
Symposium, pages 22–37, 2011.
[14] C. Gibler, J. Crussell, J. Erickson, and H. Chen. AndroidLeaks: automati-
cally detecting potential privacy leaks in android applications on a large scale.
Springer, 2012.
[15] M. Grace, Y. Zhou, Z. Wang, and X. Jiang. Systematic detection of capability
leaks in stock Android smartphones. In Proceedings of the 19th Network and
Distributed System Security Symposium (NDSS), Feb. 2012.
[16] X. Jin, X. Hu, K. Ying, W. Du, H. Yin, and G. N. Peri. Code injection at-
tacks on html5-based mobile apps: Characterization, detection and mitigation.
In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Com-
munications Security, CCS ’14, New York, NY, USA. ACM.
[17] W. Klieber, L. Flynn, A. Bhosale, L. Jia, and L. Bauer. Android taint ﬂow anal-
ysis for app sets. In Proceedings of the 3rd ACM SIGPLAN International Work-
shop on the State of the Art in Java Program Analysis. ACM, 2014.
[18] L. Li, A. Bartel, J. Klein, Y. L. Traon, S. Arzt, S. Rasthofer, E. Bodden,
I know what leaked in your pocket: uncover-
D. Octeau, and P. McDaniel.
ing privacy leaks on android apps with static taint analysis. arXiv preprint
arXiv:1404.7431, 2014.
[19] T. Li, X. Zhou, L. Xing, Y. Lee, M. Naveed, X. Wang, and X. Han. Mayhem in
the push clouds: Understanding and mitigating security hazards in mobile push-
messaging services. In Proceedings of the 2014 ACM SIGSAC Conference on
Computer and Communications Security, CCS ’14, New York, NY, USA, 2014.
ACM.
[20] N. Nethercote and J. Seward. Valgrind: a framework for heavyweight dynamic
binary instrumentation. In PLDI, 2007.
[21] D. Octeau, P. McDaniel, S. Jha, A. Bartel, E. Bodden, J. Klein, and Y. Le Traon.
Effective inter-component communication mapping in android with epicc: An
In Proceedings of the 22Nd
essential step towards holistic security analysis.
USENIX Conference on Security, SEC’13, pages 543–558, Berkeley, CA, USA,
2013. USENIX Association.
[22] P. Ratazzi, Y. Aafer, A. Ahlawat, H. Hao, Y. Wang, and W. Du. A systematic
security evaluation of Android’s multi-user framework. In Mobile Security Tech-
nologies (MoST) 2014, MoST’14, San Jose, CA, USA, May 17 2014.
[23] F. Wei, S. Roy, X. Ou, and Robby. Amandroid: A precise and general inter-
component data ﬂow analysis framework for security vetting of android apps. In
Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communi-
cations Security, CCS ’14, New York, NY, USA, 2014. ACM.
[24] L. Wu, M. Grace, Y. Zhou, C. Wu, and X. Jiang. The impact of vendor cus-
tomizations on android security. In Proceedings of the 2013 ACM SIGSAC con-
ference on Computer communications security, CCS ’13, pages 623–634, New
York, NY, USA, 2013. ACM.
[25] L. Xing, X. Pan, R. Wang, K. Yuan, and X. Wang. Upgrading your android,
elevating my malware: Privilege escalation through mobile os updating. In Pro-
ceedings of the 2014 IEEE Symposium on Security and Privacy, SP ’14, pages
393–408, Washington, DC, USA, 2014. IEEE Computer Society.
[26] X. Zhou, Y. Lee, N. Zhang, M. Naveed, and X. Wang. The peril of fragmen-
tation: Security hazards in android device driver customizations. In 2014 IEEE
Symposium on Security and Privacy, SP 2014, Berkeley, CA, USA.
[27] Y. Zhou, Z. Wang, W. Zhou, and X. Jiang. Hey, you, get off of my market:
In Pro-
Detecting malicious apps in ofﬁcial and alternative Android markets.
ceedings of the 19th Annual Network & Distributed System Security Symposium,
Feb. 2012.
1259