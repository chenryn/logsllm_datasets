### HareGuard: Security and Implementation

**Functionality and User Alerts:**
When a security risk is detected, HareGuard alerts the user, providing detailed information about potential security hazards. It advises the user to verify that the app originates from a reliable source or to remove it. To assist in this process, the scanner compares the app's signature with those in the database, confirming its authenticity if the authorized party's signature is available.

**Implementation:**
HareGuard was implemented using a database that documents findings from Harehunter, which scans factory images of popular mobile devices.

**Evaluation:**
Our implementation of HareGuard effectively detected all the attack apps we created. Performance testing showed minimal impact on the host system, with the scanner utilizing only 4.29 MB of memory and consuming 0.29% CPU during the scanning of an app's manifest. To protect Android users from these serious security risks, we plan to release the app in the near future after thorough code evaluation.

### Discussion

**Nature of Hares:**
Hares are not isolated bugs but rather systemic issues stemming from weaknesses in Android's design philosophy and ecosystem. Android's complexity, with interdependent components and apps, coupled with its decentralized and diverse ecosystem, leads to highly complicated interdependencies. The lack of guidance and enforcement mechanisms for customizations and app development exacerbates these issues, making hanging references inevitable.

**Pervasiveness and Criticality:**
Our research, the first to address this category of problems, found Hares to be pervasive, existing on every device we inspected. These vulnerabilities can endanger sensitive user data (e.g., voice memos) and disrupt the proper execution of system apps (e.g., activity injection in Google Email). While not all reported issues are exploitable, the widespread presence of such unprotected code is alarming.

**Moving Forward:**
Systematic efforts are needed to eliminate these flaws and learn from them to avoid similar pitfalls in other open computing systems. Here are some key steps:

1. **Documentation and Policy:**
   - Document interdependent relations and make them accessible to parties involved in OS customizations and app development.
   - Implement a policy requiring modifications to the OS or app development to avoid creating hanging references.
   - Leverage the existing Android compatibility program to enforce this policy, though it currently lacks security checks.

2. **Secure Attribute References:**
   - Explicitly authenticate attribute references before use.
   - Current protections, such as securing references by the presence of an app, are fragile and can fail when the app is removed during customization.

3. **Complex Security Checks:**
   - While package name references can be protected with signature checks, other attributes like content providers and actions require more sophisticated verification.
   - Tools like Harehunter are essential for recovering the necessary interdependent relations across different versions and models.

**Protection of Legacy Systems:**
Before addressing future systems, securing existing devices is crucial. Our tools, Harehunter and HareGuard, are a first step towards identifying and protecting these vulnerabilities. However, our current implementation has limitations, including false positives and missed cases, primarily due to the static analysis tool Flowdroid. Improvements in the analyzer will enhance Harehunter's effectiveness. For manufacturers with access to source code, a source-code-based version of Harehunter could be more accurate.

### Related Work

**Security Risks in Android Customizations:**
Previous studies have analyzed pre-installed apps on factory images, reporting known issues like over-privilege and permission re-delegation. Unlike these, our research focuses on a new type of vulnerability: hanging attribute references specific to the customization process. We demonstrate the serious consequences and identify their fundamental causes.

**Activity and Service Hijacking:**
Earlier research on unauthorized intent receipt and hijacking activities and services did not cover Hare flaws, which involve the absence of legitimate activities or services. Our work shows that even explicit intents can be hijacked when the legitimate recipient is missing, and evaluates the security consequences of hijacking other components.

**Vulnerability Detection:**
Extensive research on Android security vulnerabilities includes re-delegation, content provider leaks, and push-cloud messaging issues. However, no prior study has investigated the security risks of hanging references. A related study on Pileup exploits in Android upgrades highlights the importance of secure attribute management.

**Static Analysis:**
Tools like FlowDroid, Epicc, Didfail, and IccTA have been used for taint analysis and inter-component communication mapping. While FlowDroid is widely used, its limitations in handling entry points and inter-component communication can affect the accuracy of Hare detection. More capable static analysis tools will improve the effectiveness of our approach.

**Dangling Pointer Protection:**
Research on dangling pointers, a memory vulnerability, shares conceptual similarities with Hare. However, Hare involves interconnections among different apps and system components, requiring system-wide detection and mitigation, posing new challenges for system security.

### Conclusion

This paper reports on a previously unexplored Android security flaw, Hare, caused by the decentralized and unregulated customization process and complex interdependencies. Our research highlights the significance of these risks, revealing potential damages such as stealing voice memos and compromising data integrity. We developed Harehunter for automatic detection and HareGuard for immediate protection. Our study underscores the need for regulating the fragmented Android ecosystem and providing guidance and enforcement mechanisms to improve security assurance.

### Acknowledgements

We thank anonymous reviewers for their comments. This project was supported in part by NSF grants CNS-1117106, 1223477, 1223495, 1318814, and 1527141. Kai Chen was supported in part by NSFC 61100226. Yousra Aafer thanks Samsung Research America for supporting this project during her internship at Samsung.

### References

[References listed here]