"activationCommands": {
  "atom-workspace": "sourcefetch:toggle"
},
```
更新一下这个条目设置，让 `fetch` 成为一个启用命令。
```
"activationCommands": {
  "atom-workspace": "sourcefetch:fetch"
},
```
有一些软件包需要在 Atom 启动的时候被加载，例如那些改变 Atom 外观的软件包。在那样的情况下，`activationCommands` 会被完全忽略。
### “触发”命令
#### 菜单项
`menus` 目录下的 JSON 文件指定了哪些菜单项是为我们的软件包而建的。让我们看看 `menus/sourcefetch.json`：
```
"context-menu": {
  "atom-text-editor": [
    {
      "label": "Toggle sourcefetch",
      "command": "sourcefetch:toggle"
    }
  ]
},
```
这个 `context-menu` 对象可以让我们定义右击菜单的一些新条目。每一个条目都是通过一个显示在菜单的 `label` 属性和一个点击后执行的命令的 `command` 属性来定义的。
```
"context-menu": {
  "atom-text-editor": [
    {
      "label": "Fetch code",
      "command": "sourcefetch:fetch"
    }
  ]
},
```
同一个文件中的这个 `menu` 对象用来定义插件的自定义应用菜单。我们如下重命名它的条目：
```
"menu": [
  {
    "label": "Packages",
    "submenu": [
      {
        "label": "sourcefetch",
        "submenu": [
          {
            "label": "Fetch code",
            "command": "sourcefetch:fetch"
          }
        ]
      }
    ]
  }
]
```
#### 键盘快捷键
命令还可以通过键盘快捷键来触发。快捷键通过 `keymaps` 目录的 JSON 文件来定义：
```
{
  "atom-workspace": {
    "ctrl-alt-o": "sourcefetch:toggle"
  }
}
```
以上代码可以让用户通过 `Ctrl+Alt+O`（Windows/Linux） 或 `Cmd+Alt+O`（MacOS） 来触发 `toggle` 命令。
重命名引用的命令为 `fetch`：
```
"ctrl-alt-o": "sourcefetch:fetch"
```
通过执行 `Window: Reload` 命令来重启 Atom。你应该会看到 Atom 的右击菜单更新了，并且逆转文本的功能应该还可以像之前一样使用。
在 [sourcefetch 教程仓库](https://github.com/NickTikhonov/sourcefetch-tutorial/commit/aa3ec5585b0aa049393351a30be14590df09c29a) 查看这一步所有的代码更改。
### 使用 NodeJS 模块
现在我们已经完成了第一次代码更改并且了解了 Atom 软件包的结构，让我们介绍一下 [Node 包管理器（npm）](https://www.npmjs.com/) 中的第一个依赖项模块。我们将使用 **request** 模块发起 HTTP 请求来下载网站的 HTML 文件。稍后将会用到这个功能来扒 StackOverflow 的页面。
#### 安装依赖
打开你的命令行工具，切换到你的软件包的根目录并运行：
```
npm install --save request@2.73.0
apm install
```
这两条命令将 `request` 模块添加到我们软件包的依赖列表并将模块安装到 `node_modules` 目录。你应该会在 `package.json` 看到一个新条目。`@` 符号的作用是让 npm 安装我们这篇教程需要用到的特定版本的模块。运行 `apm install` 是为了让 Atom 知道使用我们新安装的模块。
```
"dependencies": {
  "request": "^2.73.0"
}
```
#### 下载 HTML 并将记录打印在开发者控制台
通过在 `lib/sourcefetch.js` 的顶部添加一条引用语句引入 `request` 模块到我们的主文件：
```
import { CompositeDisposable } from 'atom'
import request from 'request'
```
现在，在 `fetch` 函数下面添加一个新函数 `download` 作为模块的导出项：
```
export default {  
  /* subscriptions, activate(), deactivate() */
  fetch() {
    ...
  },
  download(url) {
    request(url, (error, response, body) => {
      if (!error && response.statusCode == 200) {
        console.log(body)
      }
    })
  }
}
```
这个函数用 `request` 模块来下载一个页面的内容并将记录输出到控制台。当 HTTP 请求完成之后，我们的[回调函数](http://recurial.com/programming/understanding-callback-functions-in-javascript/)会将响应体作为参数来被调用。
最后一步是更新 `fetch` 函数以调用 `download` 函数：
```
fetch() {
  let editor
  if (editor = atom.workspace.getActiveTextEditor()) {
    let selection = editor.getSelectedText()
    this.download(selection)
  }
},
```
`fetch` 函数现在的功能是将 selection 当作一个 URL 传递给 `download` 函数，而不再是逆转选中的文本了。让我们来看看这次的更改：
* 通过执行 `Window: Reload` 命令来重新加载 Atom。
* 打开开发者工具。为此，导航到菜单中的 `View > Developer > Toggle Developer Tools`。
* 新建一个文件，导航到 `File > New`。
* 输入一个 URL 并选中它，例如：`http://www.atom.io`。
* 用上述的任意一种方法执行我们软件包的命令：
![](/data/attachment/album/201610/15/155404zh46j6658z46lz2u.gif)
> 
> **开发者工具**让 Atom 软件包的调试更轻松。每个 `console.log` 语句都可以将信息打印到交互控制台，你还可以使用 `Elements` 选项卡来浏览整个应用的可视化结构——即 HTML 的[文本对象模型（DOM）](https://www.wikipedia.com/en/Document_Object_Model)。
> 
> 
> 
在 [sourcefetch 教程仓库](https://github.com/NickTikhonov/sourcefetch-tutorial/commit/85992043e57c802ca71ff6e8a4f9c477fbfd13db) 查看这一步所有的代码更改。
### 用 Promises 来将下载好的 HTML 插入到编辑器中
理想情况下，我们希望 `download` 函数可以将 HTML 作为一个字符串来返回，而不仅仅是将页面的内容打印到控制台。然而，返回文本内容是无法实现的，因为我们要在回调函数里面访问内容而不是在 `download` 函数那里。
我们会通过返回一个 [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) 来解决这个问题，而不再是返回一个值。让我们改动 `download` 函数来返回一个 Promise：
```
download(url) {
  return new Promise((resolve, reject) => {
    request(url, (error, response, body) => {
      if (!error && response.statusCode == 200) {
        resolve(body)
      } else {
        reject({
          reason: 'Unable to download page'
        })
      }
    })
  })
}
```
Promises 允许我们通过将异步逻辑封装在一个提供两个回调方法的函数里来返回获得的值（`resolve` 用来处理请求成功的返回值，`reject` 用来向使用者报错）。如果请求返回了错误我们就调用 `reject`，否则就用 `resolve` 来处理 HTML。
让我们更改 `fetch` 函数来使用 `download` 返回的 Promise：
```
fetch() {
  let editor
  if (editor = atom.workspace.getActiveTextEditor()) {
    let selection = editor.getSelectedText()
    this.download(selection).then((html) => {
      editor.insertText(html)
    }).catch((error) => {
      atom.notifications.addWarning(error.reason)
    })
  }
},
```
在我们新版的 `fetch` 函数里，我们通过在 `download` 返回的 Promise 调用 `then` 方法来对 HTML 进行操作。这会将 HTML 插入到编辑器中。我们同样会通过调用 `catch` 方法来接收并处理所有的错误。我们通过用 [Atom Notification API](https://atom.io/docs/api/v1.11.1/NotificationManager) 来显示警告的形式来处理错误。
看看发生了什么变化。重新加载 Atom 并在一个选中的 URL 上执行软件包命令：
![](/data/attachment/album/201610/15/155458yaag3og5h9eoz96h.gif)
如果这个 URL 是无效的，一个警告通知将会弹出来：
![](/data/attachment/album/201610/15/160402qqfffspoxrcgdorw.gif)
在 [sourcefetch 教程仓库](https://github.com/NickTikhonov/sourcefetch-tutorial/commit/896d160dca711f4a53ff5b182018b39cf78d2774) 查看这一步所有的代码更改。
#### 编写一个爬虫来提取 StackOverflow 页面的代码片段
下一步涉及用我们前面扒到的 StackOverflow 的页面的 HTML 来提取代码片段。我们尤其关注那些来自采纳答案（提问者选择的一个正确答案）的代码。我们可以在假设这类答案都是相关且正确的前提下大大简化我们这个软件包的实现。
#### 使用 jQuery 和 Chrome 开发者工具来构建查询
这一部分假设你使用的是 [Chrome](https://www.google.com/chrome/) 浏览器。你接下来可以使用其它浏览器，但是提示可能会不一样。
让我们先看看一张典型的包含采纳答案和代码片段的 StackOverflow 页面。我们将会使用 Chrome 开发者工具来浏览 HTML：
* 打开 Chrome 并跳到任意一个带有采纳答案和代码的 StackOverflow 页面，比如像这个用 Python 写的 [hello world](http://stackoverflow.com/questions/1077347/hello-world-in-python) 的例子或者这个关于 [用 `C` 来读取文本内容的问题](http://stackoverflow.com/questions/3463426/in-c-how-should-i-read-a-text-file-and-print-all-strings)。
* 滚动窗口到采纳答案的位置并选中一部分代码。
* 右击选中文本并选择 `检查`。
* 使用元素侦察器来检查代码片段在 HTML 中的位置。
注意文本结构应该是这样的：
```
  ...
    ...
          ...snippet elements...
    ...
  ...
```
* 采纳的答案通过一个 class 为 `accepted-answer` 的 `div` 来表示
* 代码块位于 `pre` 元素的内部
* 呈现代码片段的元素就是里面那一对 `code` 标签