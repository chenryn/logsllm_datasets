Definition 3.3 (Greedy contracts). A contract C at blockchain state
σ(C) with a non-zero balance is called k-greedy if execution of any
trace with invocation depth k for C and sent by any account, does
not result in transfer of Ether from C (to any account).
Interestingly, the definition of a greedy contract is dual to the
notion of a prodigal, that is, the contract will not release its Ether
regardless of the sender of the transactions. To detect greedy con-
tracts we show that executions of all traces with up to k invocations
do not reach the instructions that transfer Ether such as CALL.
4 THE ALGORITHM AND THE TOOL
Maian is a symbolic analyzer for smart contract execution traces,
for the properties defined in Section 3. It takes as input a contract in
its bytecode form and contract’s state at concrete block value from
the Ethereum blockchain, flagging contracts with bugs outlined in
Section 2.2. Depending on the category of bugs, Maian either tries
to build or shows an absence of particular type of traces according to
conditions from Section 3. To reason about traces, the tool executes
them symbolically. For the sake of tractability of the analysis, it does
not keep track of the entire blockchain context σ (including the state
of other contracts), treating only the contract’s transaction inputs
and certain block parameters as symbolic. To reduce the number
of false positives and confirm concrete exploits for vulnerabilities,
Maian calls its concrete validation routine, which we outline in
Section 4.2.
4.1 Symbolic Analysis
Our work concerns finding properties of traces that involve multi-
ple invocations of a contract. We leverage static symbolic analysis
to perform this step in a way that allows reasoning across contract
calls and across multiple blocks. We start our analysis given a con-
tract bytecode and a starting concrete context capturing values of
the blockchain. Maian reasons about values read from input trans-
action fields and block parameters4 in a symbolic way—specifically,
it denotes the set of all concrete values that the input variable can
take as a symbolic variable. It then symbolically interprets the rela-
tionship of other variables computed in the contract as a symbolic
expression over symbolic variables. For instance, the code y := x
+ 4 results in a symbolic value for y if x is a symbolic expression;
otherwise it is executed as concrete value. Conceptually, one can
4Those being CALLVALUE, CALLER, NUMBER, TIMESTAMP, BLOCKHASH, BALANCE, ADDRESS,
and ORIGIN.
657ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Nikoli´c et al.
imagine the analysis as maintaining two memories mapping vari-
ables to values: one is a symbolic memory mapping variables to
their symbolic expressions, the other mapping variables to their
concrete values.
Execution Path Search. The symbolic interpretation searches the
space of all execution paths in a trace with a depth-first search. The
search is a best effort to increase coverage and find property violat-
ing traces. Our goal is neither to be sound, i.e., search all possible
paths at the expense of false positives, nor to be provably complete,
i.e., have only true positives at the expense of coverage [16]. From a
practical perspective, we make design choices that strike a balance
between these two goals.
The symbolic execution starts from the entry point of the con-
tract, and considers all functions which can be invoked externally
as an entry point. More precisely, the symbolic execution starts at
the first instruction in the bytecode, proceeding sequentially until
the execution path ends in terminating instruction. Such instruc-
tion can be valid (e.g., STOP, RETURN), in which case it assumes to
have reached the end of the contract invocations, and thus restart
the symbolic execution again from the first bytecode instruction to
simulate the next invocation. On the other hand, the terminating
instruction can be invalid (e.g., non-existing instruction code or
invalid jump destination), in which case it terminates the search
down this path and backtracks in the depth-first search procedure
to try another path. When execution reaches a branch, Maian con-
cretely evaluates the branch condition if all the variables used in the
conditional expression are concrete. This uniquely determines the
direction for continuing the symbolic execution. If the condition
involves a symbolic expression, Maian queries an external SMT
solver to check for the satisfiability of the symbolic conditional
expression as well as its negation. Here, if the symbolic conditional
expression as well as its negation are satisfiable, both branches
are visited in the depth-first search; otherwise, only the satisfi-
able branch is explored in the depth first search. On occasions, the
satisfiability of the expression cannot be decided in a pre-defined
timeout used by our tool; in such case, we terminate the search
down this path and backtrack in the depth-first search procedure
to try another path. We maintain a symbolic path constraint which
captures the conditions necessary to execute the path being ana-
lyzed in a standard way. Maian implements support for 121 out of
the 133 bytecode instructions in Ethereum’s stack-based low-level
language. More precisely, it supports all but the instructions that
cannot be realized with the symbolic execution engine (for instance,
the CREATE instruction, which deploys a new contract). When the
tool encounters an unsupported instruction, it proceeds on a best
effort basis by stopping exploration of that branch but continues to
explore other contract branches via backtracking.
At a call instruction, control follows transfer to the target. If the
target of the transfer is a symbolic expression, Maian backtracks
in its depth-first search. Calls outside a contract, however, are not
simulated and returns are marked symbolic. Therefore, Maian
depth-first search is inter-procedural, but not inter-contract.
Handling data accesses. The memory mappings, both symbolic
and concrete, record all the contract memory as well blockchain
storage. During the symbolic interpretation, when a global or blockchain
storage is accessed for the first time on a path, its concrete value is
read from the main Ethereum blockchain into local mappings. This
ensures that subsequent reads or writes are kept local to the path
being presently explored.
The EVM machine supports a flat byte-addressable memory, and
each address has a bit-width of 256 bits. The accesses are in 32-byte
sized words which Maian encodes as bit-vector constraints to the
SMT solver. Due to unavailability of source code, Maian does not
have any prior information about higher-level datatypes in the
memory. All types default to 256-bit integers in the encoding used
by Maian. Furthermore, Maian attempts to recover more advanced
types such as dynamic arrays by using the following heuristic: if a
symbolic variable, say x, is used in constant arithmetic to create an
expression (say x + 4) that loads from memory (as an argument to
the CALLDATALOAD instruction), then it detects such an access as a
dynamic memory array access. Here, Maian uses the SMT solver
to generate k concrete values for the symbolic expression, making
the optimistic assumption that the size of the array to be an integer
in the range [0, k]. The parameter k is configurable, and defaults to
2. Apart from this case, whenever accesses in the memory involve
a symbolic address, Maian does not do alias analysis and simply
terminates the explored path, backtracking in its depth-first search.
Handling non-deterministic inputs. Contracts have several sources
of non-deterministic inputs such as the block timestamp, etc. While
these are treated as symbolic, they are not exactly under the control
of the external users. Maian does not use their concrete values
because it still needs to reason about invocations of the contract
across multiple invocations, i.e., at different blocks.
Flagging Violations. When the depth-first search in the space
of the contract execution reaches a state where the desired safety
property is violated, it flags the contract as a buggy candidate.
The symbolic path constraint, along with the necessary property
conditions, are asserted for satisfiability to the SMT solver. We
use Z3 [9] as our solver, which provides concrete values so satisfy
an input formula. We use these values as the concrete data for
symbolic inputs, including the symbolic transaction data.
Bounding the path search space. Maian takes the following
steps to bound the search in the (potentially infinite) path space.
First, the call depth is limited to the constant called max_call_depth,
which defaults to 3 but can be configured for empirical tests. Second,
we limit the total number of jumps or control transfers on one path
explored to a configurable constant max_cfg_nodes, default set to
60. This is necessary to avoid being stuck in loops, for instance.
Third, we set a timeout of 10 seconds per call to our SMT solver.
Lastly, the total time spent on a contract is limited to configurable
constant max_analysis_time, default set to 300 seconds.
Pruning. To speed up the state search, we implement pruning with
memorization. Whenever the search encounters that the particular
configuration (i.e., contract storage, memory, and stack) has been
seen before, it does not further explore that part of the path space.
4.2 Concrete Validation
In the concrete validation step, Maian creates a private fork of
the original Ethereum blockchain with the last block as the input
context. It then runs the contract with the concrete values of the
transactions generated by the symbolic analysis to check if the
property holds in the concrete execution. If the concrete execu-
tion fails to exhibit a violation of the trace property, we mark the
658Finding The Greedy, Prodigal, and Suicidal Contracts at Scale
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
contract as a false positive; otherwise, the contract is marked as a
true positive. To implement the validating framework, we added a
new functionality to the official go-ethereum package [15] which
allows us to fork the Ethereum main chain at a block height of our
choice. Once we fork the main chain, we mine on that fork without
connecting to any peers on the Ethereum network, and thus we are
able to mine our own transactions without committing them to the
main chain.
Prodigal Contracts. The validation framework checks if a contract
indeed leaks Ether by sending to it the transactions with inputs
provided by the symbolic analysis engine. The transactions are sent
by one of our accounts created previously. Once the transactions are
executed, the validation framework checks whether the contract
has sent Ether to our account. If a verifying contract does not have
Ether, our framework first sends Ether to the contract and only
then runs the exploit.
Suicidal Contracts. In a similar fashion, the framework checks if
a contract can be killed after executing the transactions provided
by the symbolic analysis engine on the forked chain. Note, once a
contract is killed, its bytecode is reset to ’0x’. Our framework uses
precisely this test to confirm the correctness of the exploit.
Greedy Contracts. A strategy similar to the above two cannot be
used to validate the exploits on contracts that lock Ether. However,
during the bug finding process, our symbolic execution engine
checks firsthand whether a contract accepts Ether. The validation
framework can, thus, check if a contract is true positive by con-
firming that it accepts Ether and does not have CALL, CALLCODE,
DELEGATECALL, or SUICIDE opcodes in its bytecode. In Section 5
we give examples of such contracts.
5 EVALUATION
We analyzed 970, 898 smart contracts, obtained by downloading
the Ethereum blockchain from the first block until block number
4, 800, 000. Ethereum blockchain has only contract bytecodes. To
obtain the original (Solidity) source codes, we refer to the Etherscan
service [13] and obtain source for 9, 825 contracts. Only around 1%
of the contracts have source code, highlighting the utility of Maian
as a bytecode analyzer.
Recall that our concrete validation component can analyze a
contract from a particular block height where the contract is alive
(i.e., initialized, but not killed). To simplify the validation process
for a large number of contracts flagged by the symbolic analysis
component, we perform our concrete validation at block height
of 4, 499, 451, further denoted as BH. At this block height, we find
that most of the flagged contracts are alive, including the Parity
library contract [1] that our tool successfully finds. This contract
was killed at a block height of 4, 501, 969. All contracts existing
on blockchain at a block height of 4, 499, 451 are tested, but only
contracts that are alive at BH are concretely validated.5
Experimental Setup and Performance. Maian supports parallel
analysis of contracts, and scales linearly in the number of available
cores. We run it on a Linux box, with 64-bit Ubuntu 16.04.3 LTS,
64GB RAM and 40 CPUs Intel(R) Xeon(R) E5-2680 v2@2.80GHz. In
most of our experiments we run the tool on 32 cores. On average,
Maian requires around 10.0 seconds to analyze a contract for the
Category
Prodigal
Suicidal
Greedy
Total
#Candidates
flagged
(distinct)
1504 (438)
1495 (403)
31,201 (1524)
34, 200 (2, 365)
Candidates
without
source
1487
1487
31,045
34, 019
#Validated
1253
1423
1083
3, 759
% of
true pos-
itives
97
99
69
89
Table 1: Results for invocation depth 3 at block height BH.
Column 1 reports number of flagged contracts, and the dis-
tinct ones among these. Column 2 shows the number of
flagged without source code. Column 3 is the subset we sam-
pled for concrete validation. Column 4 reports true positive
rates; the total here is the average TP rate weighted by the
number of validated contracts.
three aforementioned bugs: 5.5 seconds to check if a contract is
prodigal, 3.2 seconds for suicidal, and 1.3 seconds for greedy.
5.1 Results
Table 1 summarizes the contracts flagged by Maian. Given the
large number of flagged contracts, we select a random subset for
concrete validation, and report on the true positive rates obtained.
We report the number of distinct contracts, calculated by comparing
the hash of the bytecode; however, all percentages are calculated
on the original number of contracts (with duplicates).
Prodigal contracts. Our tool has flagged 1, 504 candidates con-
tracts (438 distinct) which may leak Ether to an arbitrary Ethereum
address, with a true positive rate of around 97%. At block height
BH, 46 of these contracts hold some Ether. The concrete validation
described in Section 4.2 succeeds for exploits for 37 out of 46 —
these are true positives, whereas 7 are false positives. The remain-
ing 2 contracts leak Ether to an address different from the caller’s
address. Note that all of the 37 true positive contracts are alive as
of this writing. For ethical reasons, no exploits were done on the
main blockchain.
Of the remaining 1, 458 contracts which presently do not have
Ether on the public Ethereum blockchain, 24 have been killed and
42 have not been published (as of block height BH). To validate
the remaining alive contracts (in total 1392) on a private fork, first
we send them Ether from our mining account, and find that 1, 183
contracts can receive Ether.6 We then concretely validate whether
these contract leak Ether to an arbitrary address. A total of 1, 156
out of 1, 183 (97.72%) contracts are confirmed to be true positives;
27 (2.28%) are false positives.
For each of the 24 contracts killed by the block height BH, the
concrete validation proceeds as follows. We create a private test
fork of the blockchain, starting from a snapshot at a block height
where the contract is alive. We send Ether to the contract from one
of our addresses address, and check if the contract leaks Ether to