even if m ∈ Q, provided σ was not output by the MAC oracle for m. The schemes we present were
expressly designed not to provide this type of security, to allow tags to be re-randomized (or blinded)
and thus allow for more eﬃcient zero-knowledge proofs of possession of a MAC.
5
3.1 MACGGM
Our ﬁrst MAC is a generalization of a scheme due to Dodis et al. [17]. The original MAC works in a
cyclic group G of prime order p, and the secret key is a pair (x0, x1) ∈ F2
p. To compute the MAC of
a message m ∈ Fp, choose u ∈R G, and compute (u, umx1+x0) as the tag. To verify a tag (u, u(cid:48)) for a
message m, check whether umx1+x0 = u(cid:48).
We extend the scheme to support n attributes, where the secret key becomes (x0, x1, . . . , xn)
and tags are computed as (u, ux1m1+...+xnmn+x0). Note that m1, . . . , mn are n messages, each in Fp,
rather than the binary decomposition of a single message m. We refer to this scheme as MACGGM
(the single message and binary message schemes were respectively called MAChwPRF and MACWhwPRF
in [17]). KeyGen has an optional step that is required only when MACGGM is used for keyed-veriﬁcation
credentials.
In what follows (including for MACDDH), we use (cid:126)m = (m1, . . . , mn) to mean a list of n messages
in Fp, and use Hx( (cid:126)m) := x0 +(cid:80)n
i ximi.
KeyGen(params): Choose a secret key sk := (cid:126)x ∈R Fn+1
p
. Optionally, compute (X1 := hx1, . . . , Xn :=
hxn), and publish the issuer parameters, denoted iparams := (X1, . . . , Xn).
MAC(sk , (cid:126)m): Choose u ∈R G \ {1} and compute the tag σ = (u, u(cid:48)), where u(cid:48) := uHx( (cid:126)m).
Verify(sk , (cid:126)m, σ): Parse σ = (u, u(cid:48)) ∈ G2. Accept if u (cid:54)= 1 and u(cid:48) = uHx( (cid:126)m).
Dodis et al. [17] prove that under the DDH assumption, MACGGM is suf-cma secure when n = 1. In
this deﬁnition, security is called selective unforgeability, because the attacker must select the message
he will use in a forgery before seeing any tags, and is not allowed veriﬁcation queries. For our credential
system, however, we require uf-cmva security. (Selective unforgeability gives only limited protection
against misbehaving adversaries, and veriﬁcation queries are inherent in anonymous credentials as the
adversary is always able to present credentials and observe the veriﬁer’s reaction.)
We stress that Dodis et al. give no evidence that MACGGM is not in fact uf-cmva secure. Rather,
it appears that their proof technique does not extend to also prove security under the stronger deﬁni-
tion. A simple (but ineﬃcient) reduction exists between uf-cma and suf-cma. A uf-cma adversary is
transformed into an suf-cma adversary by an algorithm which guesses the message to be forged by the
uf-cma adversary. The success probability of the new adversary is /|M| where M is the message space
of the scheme, and  is the success probability of the uf-cma adversary. If the size of M is constrained,
the loss in security may be acceptable (i.e., it may be acceptable to use an suf-cma-secure scheme).
This may be of use in our application, in the very limited setting where credentials contain a small
number of attributes from a small set, known to the issuer, and where during presentation the user is
required to prove that all the attributes in his credential are within this set.
To ensure security in the more realistic case of unconstrained messages (attributes), and when
veriﬁcation queries are allowed (as in a credential system), we prove that MACGGM is uf-cmva secure
in the generic group model. Additionally, we include iparams in our analysis. A proof of the following
theorem is given in Appendix A.1.
√
Theorem 2. In the generic group model, a uf-cmva adversary attacking the MACGGM scheme, suc-
ceeding with non-negligible probability, performs Ω(
p) group operations.
3.2 MACDDH
In this section, we describe another MAC construction, called MACDDH. Recall that params are
created by Setup(1k) and are assumed to be available to all algorithms, that (cid:126)m = (m1, . . . , mn) is a
6
list of n messages in Fp, and that the optional step in KeyGen is required only when MACDDH is used
for keyed-veriﬁcation credentials.
KeyGen(params): Pick z, x0, y0 . . . , xn, yn
hxi and Yi := hyi for each i ∈ {1, . . . n}, and publish iparams := ( (cid:126)X, (cid:126)Y ).
$←− Fp. Output sk := ((cid:126)x, (cid:126)y, z). Optionally, compute Xi :=
MAC(sk , (cid:126)m): Pick r $←− Fp and set σw := gr, σx := grHx( (cid:126)m), σy := grHy( (cid:126)m), and σz := gzr. Output
(σw, σx, σy, σz).
Verify(sk , (cid:126)m, σ): Parse σ = (σw, σx, σy, σz) ∈ G4. Check that σw (cid:54)= 1, σx = σHx( (cid:126)m)
w
σz = σz
w. Accept if these checks pass and reject otherwise.
, σy = σHy( (cid:126)m)
w
, and
Theorem 3. If the DDH assumption holds in G, then MACDDH is uf-cmva secure.
A proof of this theorem is given in Appendix A.2. Our proof takes inspiration both from the
dual system technique introduced by Waters [32], and from the twin Diﬃe-Hellman techniques of
Cash, Kiltz, and Shoup[12]. Roughly, we use the twin DH approach to argue that we can switch to a
veriﬁcation procedure which does not require the full discrete logarithms (cid:126)x, (cid:126)y, z. As in [12] this allows
us to reduce to DDH even in the presence of this veriﬁcation oracle. Then we use the dual system
approach to gradually add noise into the MACs, while still ensuring that our reduction can verify that
the adversary’s forgery is correctly formed. Finally we arrive at a game where part of the secret key
is statistically hidden, so we can guarantee that the adversary can produce a correctly formed forgery
only with negligible probability.
4 Keyed-Veriﬁcation Credentials
In this section we ﬁrst describe the set of algorithms that form a keyed-veriﬁcation credential scheme.
We then informally describe the desired security and privacy properties (formal deﬁnitions are in
Appendix B), present constructions of keyed-veriﬁcation credentials based on MACGGM and MACDDH,
and prove our MACDDH-based construction secure. The proof of security for our MACGGM-based
construction is a trivial simpliﬁcation of the MACDDH-based proof, so we omit it.
A keyed-veriﬁcation credential system consists of the following algorithms:
Setup(1k) deﬁnes the system parameters params. We will assume that params is available to all
algorithms, and that all parties have assurance it was created correctly.
CredKeygen(params) is run by the issuer on input params to generate a secret key sk and (public)
issuer parameters iparams.
BlindIssue(sk , S) ↔ BlindObtain(iparams, (m1, . . . , mn)) is a potentially interactive protocol where a
user can obtain a credential on attributes (m1, . . . , mn) from an issuer who is only given some
subset S of those attributes.
Show(iparams, cred , (m1, . . . , mn), φ) ↔ ShowVerify(sk , φ) is an interactive protocol between a user
and a veriﬁer. Show is run by a user to generate a proof of possession of a credential cred
certifying some set of attributes (m1, . . . , mn) satisfying a set of statements φ under the key
corresponding to iparams, and ShowVerify is run by the veriﬁer in possession of sk to verify that
the user has a credential for attributes satisfying the statements φ.
7
While we deﬁned our presentation protocol in terms of a single credential, we could generalize our
deﬁnitions and constructions to allow the user to prove relationships between attributes across multiple
credentials that he owns. We chose the above variant because it allows for fairly simple deﬁnitions,
yet still allows us to consider properties of a credential scheme as it would be used.
Note that the standard approach of requiring that the Show protocol be a proof of knowledge of a
credential cannot be directly applied here because the veriﬁer must know the issuer secret key in order
to verify the credential. This is somewhat similar to a designated veriﬁer proof [23], but it has the
additional complication that the statement (validity of the credential) depends on the veriﬁer’s secret
key.
4.1 Security properties
A keyed-veriﬁcation credential system should have the following security properties (deﬁned formally
in Appendix B). Informally, correctness requires that every credential generated by Issue for attribute
set {m1, . . . , mn} can be used to generate a proof for any statement satisﬁed by that attribute set.
Unforgeability requires that an adversary cannot produce an accepting proof for a statement φ that is
not satisﬁed by any of the attribute sets for which it has received credentials. Anonymity requires that
the proofs produced by Show reveal nothing more than the statement being proved. Blind issuance
requires that BlindIssue, BlindObtain deﬁne a secure two-party protocol for generating credentials on the
user’s attributes. Finally, key-parameter consistency requires that the probability that an adversary
can ﬁnd two secret keys that correspond to the same set of issuer parameters is negligible; this
guarantees that the issuer cannot use diﬀerent secret keys with diﬀerent users and thus compromise
their anonymity.
4.2 Keyed-veriﬁcation credentials from MACGGM
We now give a construction of a keyed-veriﬁcation credential system from MACGGM = (SetupGGM,
KeyGenGGM, MACGGM, VerifyGGM). We deﬁne the following setup algorithms for the credential system.
Setup(1k): Output (G, p, g, h) $←− SetupGGM(1k).
CredKeygen(params): Parse params as (G, p, g, h). Compute the MAC keys as ( (cid:126)X, (cid:126)x) $←− KeyGenGGM(params).
$←− Fp and forming commitment Cx0 = gx0h˜x0. Out-
Next, commit to the secret x0 by picking ˜x0
put iparams = (Cx0, (cid:126)X) and sk = ((cid:126)x, ˜x0)
Issuance. To issue a credential with the n attributes (m1, . . . , mn) ∈ Fn
p all of which are known to
the issuer, the issuer computes (u, u(cid:48)) ← MACGGM(sk , (m1, . . . , mn)) and returns (u, u(cid:48)) and π to the
user, where
n(cid:89)
π := PK{(x0, x1, . . . , xn, ˜x0) : u(cid:48) = ux0
(umi)xi ∧ Cx0 = gx0h˜x0
i=1
∧ Xi = hxi ∀i ∈ {1, . . . , n}}
The proof π proves that (u, u(cid:48)) is a valid MAC with respect to the system and issuer parameters. If
this proof veriﬁes, the user accepts and outputs (u, u(cid:48)). Otherwise it rejects with output ⊥.
To alternatively keep some subset H ⊆ {1, . . . , n} of the attributes hidden from the issuer, we can
proceed as follows: The user generates an ElGamal keypair (d, γ := gd), then creates an encryption of
gmi for each hidden attribute mi as Ei = (gri, gmiγri) for all i ∈ H, using ri ∈R Fp. The user sends
8
encryption Eu(cid:48) of u(cid:48) = gbx0(cid:81)n
these ciphertexts to the issuer, along with a proof of knowledge of {ri, mi}i∈H. The issuer chooses
b ∈R Fp. It then computes u = gb, and uses the homomorphic properties of ElGamal to generate an
u(cid:48) (by multiplying
with an encryption of 0 using randomness r(cid:48) ∈R Fp). It sends u, E(cid:48)
u(cid:48) to the user and gives a proof that
these values have been generated correctly with respect to (Cx0,{Xi}n
1 ) (i.e. a proof of knowledge of
the appropriate {xi}n
0 , ˜x0, b, and randomizing factor r(cid:48)). If the proof does not verify, the user outputs
⊥. Otherwise, the user decrypts E(cid:48)
1 (gmi)bxi, and to randomize this encryption to obtain E(cid:48)
u(cid:48) to get u(cid:48), and outputs (u, u(cid:48)).
In addition to proving that the ciphertexts Ei are well formed, the user
Credential translation.
can include proofs about the attributes the ciphertexts encrypt. For example, the user may prove that
some of the attributes mi are the same as in another credential, such as one that is more expensive
to use (e.g., an Idemix credential), or one that cannot be presented multiple times unlinkably (e.g., a
U-Prove credential).
Credential presentation. Here we present a construction for Show and ShowVerify. The details of
(one possible way of) instantiating the proof of knowledge are given in Appendix E.
We focus on how to show that the credential certiﬁes attributes matching those in a given set
of commitments. Once commitments have been established, the user can prove a large variety of
statements about the committed values, using e.g. the techniques in [7]. If some of the attributes
are being revealed to the veriﬁer, the protocol can be simpliﬁed in a straightforward way, with the
user sending mi in place of Cmi and the veriﬁer computing uximi directly. The proof of knowledge
involving Cmi is also omitted. This reduces the computational costs for the user.
Roughly, the protocol proceeds as follows: The prover forms Pedersen commitments to the MAC
and the messages, and proves that these were computed correctly. Using the homomorphic property
of the commitments, the veriﬁer is able to recompute the MAC and compare it to the committed
value. However, because of the randomness in the commitments, there will be some additional terms
in the MAC the veriﬁer computes; the user will use (cid:126)X from iparams to compute exactly those values
necessary to cancel these terms, and again prove that these values are correctly computed.
More formally we have the following algorithms:
Show(params, iparams, φ, cred ,{mi}n
(u, u(cid:48)). It then computes {Cmi := umihzi}n
and a proof of knowledge π, which it computes as
i ): The prover chooses r, z1, . . . , zn ∈R Fp and parses cred =
i , Cu(cid:48))
i=1 and Cu(cid:48) := u(cid:48)gr and sends σ = (u,{Cmi}n
n(cid:89)
π = PK{( (cid:126)m,(cid:126)z,−r) : φ(m1, . . . , mn) = 1 ∧ Cmi = umihzi ∀i ∈ {1, . . . , n} ∧ V = g−r
zi}.
Xi
i=1
ShowVerify(params, iparams, φ,{xi}n
i , z, σ, π): The veriﬁer parses σ = (u,{Cmi}n
i , Cu(cid:48)), computes V
as
V =
ux0(cid:81)n
xi
i=1 Cmi
Cu(cid:48)
and veriﬁes the proof π using V . If the proof is valid, it outputs (Cm1, . . . , Cmn), and otherwise
it outputs ⊥.
Security. To see that the MACGGM protocol works when n = 1 and both parties are honest, note
that the veriﬁer computes
V =
Cm1
x1ux0
Cu(cid:48)
=
um1x1hx1z1ux0
um1x1+x0gr = hx1z1g−r = X z1
1 g−r,
9
which matches the statement in the proof π. The security of the credential scheme is obtained as a
special case of the MACDDH-based construction (as this is a strictly simpler construction).
4.3 Keyed-veriﬁcation credentials from MACDDH
We now give a construction of a keyed-veriﬁcation credential system from MACDDH = (SetupDDH,
KeyGenDDH, MACDDH, VerifyDDH). We deﬁne the following setup algorithms for the credential system.
Setup(1k): Output (G, p, g, h) $←− SetupDDH(1k).
CredKeygen(params): Compute (( (cid:126)X, (cid:126)Y ), ((cid:126)x, (cid:126)y, z))
$←− KeyGenDDH(params). Pick ˜x, ˜y, ˜z ∈R Fp and
form commitments Cx0 := gx0h˜x, Cy0 := gy0h˜y, and Cz := gzh˜z. Output iparams = ( (cid:126)X, (cid:126)Y , Cx0,
Cy0, Cz) and sk = ((cid:126)x, (cid:126)y, z, ˜x, ˜y, ˜z).
Issuance. To issue a credential with the attributes (m1, . . . , mn) ∈ Fn
q all of which are known to the
issuer, the issuer chooses σ = (σw, σx, σy, σz) $←− MACDDH(sk , (m1, . . . , mn)), and returns σ to the user
with a proof π, where
π := PK{((cid:126)x, (cid:126)y, z, ˜x, ˜y, ˜z) : σx = σx0
w
mi)xi ∧ σy = σy0
w
(σw
w )yi ∧ σz = σw
(σmi
z
n(cid:89)
1
n(cid:89)
1
∧ Cx0 = gx0h˜x ∧ Cy0 = gy0h˜y ∧ Cz = gzh˜z
∧ Xi = hxi ∧ Yi = hyi ∀i ∈ {1, . . . , n}}.
to generate an encryption Ex of σx = gbx0(cid:81)n
The proof π proves that the credential is a valid MAC with respect to the system and issuer parameters.
If this proof veriﬁes, the user outputs σ; otherwise it outputs ⊥.
If some of the attributes must be hidden, we can ﬁrst proceed as we did with MACGGM, to the point
where the user sends the ciphertexts Ei and proofs of knowledge of {ri, mi}i∈H to the issuer. The issuer
now chooses b ∈R Fp, computes σw = gb, σz = σz
w, and uses the homomorphic properties of ElGamal