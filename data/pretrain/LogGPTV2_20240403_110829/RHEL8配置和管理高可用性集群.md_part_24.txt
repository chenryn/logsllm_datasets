:::
如果您的配置需要创建一组在一起并启动的资源，您可以配置包含这些资源的资源组。然而，在有些情况下，配置需要作为资源组共存的资源是不合适的：
::: itemizedlist
-   您可能需要托管一组资源，但这些资源不一定要按顺序启动。
-   您可能有一个资源 C，它必须和资源 A 或 B 在一起，但 A 和 B
    之间没有关系。
-   您可能有资源 C 和 D 必须和资源 A 和 B 在一起，但 A 和 B
    之间没有关系，C 和 D 之间没有关系。
:::
在这些情况下，您可以使用
`pcs constraint colocation set 命令在一组或一组资源中创建 colocation 约束。`{.literal}
您可以使用 `pcs constraint colocation set`{.literal}
命令为一组资源设置以下选项。
::: itemizedlist
-   `sequential`{.literal}，它可以设为 `true`{.literal} 或
    `false`{.literal}，以指示集合成员是否必须相互共处。
    将 `sequential`{.literal} 设为 `false`{.literal}
    ，允许此集合的成员与约束后面列出的另一个集合共处，而无论此集合中哪些成员处于活动状态。因此，只有在约束里列出另一个集合之后，这个选项才有意义，否则约束无效。
-   `role`{.literal}，它可以设为
    `Stopped`{.literal}、`Started`{.literal}、`master`{.literal} 或
    `Slave`{.literal}。
:::
您可以按照 `pcs constraint colocation set 命令的 setoptions`{.literal}
参数为一组资源设置``{=html} 以下约束选项。
::: itemizedlist
-   `ID`{.literal}，为您定义的约束提供名称：
-   `score`{.literal} 表示此约束的首选程度。有关这个选项的详情请参考
    [配置位置约束](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_high_availability_clusters/assembly_determining-which-node-a-resource-runs-on-configuring-and-managing-high-availability-clusters#proc_configuring-location-constraints-determining-which-node-a-resource-runs-on){.link}中的
    \"Location Constraint Options\" 表
:::
当列出集合的成员时，每个成员都与其前一个成员共处。例如：\"set A B\" 表示
\"B 与 A
共存\"。但是，当列出多个集合时，每个集合都与后面的组在一起。例如：\"set
C D sequential=false set A B\" 表示 \"set C D（其中 C 和 D
间没有关系）与 set A B 在一起（其中 B 与 A 在一起）\"。
以下命令在一组或一组资源上创建了 colocation 约束。
``` literallayout
pcs constraint colocation set resource1 resource2 [resourceN]... [options] [set resourceX resourceY ... [options]] [setoptions [constraint_options]]
```
使用以下命令删除使用 [*source_resource*]{.emphasis} 的 colocation 约束。
``` literallayout
pcs constraint colocation remove source_resource target_resource
```
:::
:::
[]{#proc_displaying-resource-constraints.adoc-configuring-and-managing-high-availability-clusters.html}
::: chapter
::: titlepage
# []{#proc_displaying-resource-constraints.adoc-configuring-and-managing-high-availability-clusters.html#proc_displaying-resource-constraints.adoc-configuring-and-managing-high-availability-clusters}第 14 章 显示资源限制和资源依赖项 {.title}
:::
您可以使用一些命令来显示已经配置的约束。您可以显示所有配置的资源限制，或者您可以将资源限制的显示限制限制为特定类型的资源限制。另外，您可以显示配置的资源依赖项。
::: title
**显示所有配置的限制**
:::
以下命令列出所有当前位置、顺序和 colocation 约束。如果指定了
`--full`{.literal} 选项，则显示内部约束 ID。
``` literallayout
pcs constraint [list|show] [--full]
```
从 RHEL 8.2
开始，列出资源约束不再默认显示过期的限制。要在列表中包含已过期的
constaints，请使用 `pcs constraint`{.literal} 命令的 `--all`{.literal}
选项。这将列出已过期的限制，注意显示中的限制和 `相关规则（`{.literal}
扩展）。
::: title
**显示位置限制**
:::
以下命令列出所有当前位置限制。
::: itemizedlist
-   如果指定了
    `resources`{.literal}，则会按资源显示位置约束。这是默认的行为。
-   如果指定了 `nodes`{.literal}，则按节点显示位置约束。
-   如果指定了特定资源或节点，则只显示那些资源或节点的信息。
:::
``` literallayout
pcs constraint location [show [resources [resource...]] | [nodes [node...]]] [--full]
```
::: title
**显示排序限制**
:::
以下命令列出所有当前排序限制。
``` literallayout
pcs constraint order [show]
```
::: title
**显示 colocation 约束**
:::
以下命令列出所有当前的 colocation 约束。
``` literallayout
pcs constraint colocation [show]
```
::: title
**显示特定于资源的约束**
:::
以下命令列出引用特定资源的约束。
``` literallayout
pcs constraint ref resource ...
```
::: title
**显示资源依赖项（Red Hat Enterprise Linux 8.2 及更新的版本）**
:::
以下命令显示树结构中集群资源间的关系。
``` literallayout
pcs resource relations resource [--full]
```
如果使用 `--full`{.literal} 选项，命令会显示附加信息，包括约束 ID
和资源类型。
在以下示例中,有 3 个配置的资源： C、D 和 E。
``` literallayout
# pcs constraint order start C then start D
Adding C D (kind: Mandatory) (Options: first-action=start then-action=start)
# pcs constraint order start D then start E
Adding D E (kind: Mandatory) (Options: first-action=start then-action=start)
# pcs resource relations C
C
`- order
   |  start C then start D
   `- D
      `- order
         |  start D then start E
         `- E
# pcs resource relations D
D
|- order
|  |  start C then start D
|  `- C
`- order
   |  start D then start E
   `- E
# pcs resource relations E
E
`- order
   |  start D then start E
   `- D
      `- order
         |  start C then start D
         `- C
```
在以下示例中，有两个配置的资源：A 和 B。资源 A 和 B 是资源组 G
的一部分。
``` literallayout
# pcs resource relations A
A
`- outer resource
   `- G
      `- inner resource(s)
         |  members: A B
         `- B
# pcs resource relations B
B
`- outer resource
   `- G
      `- inner resource(s)
         |  members: A B
         `- A
# pcs resource relations G
G
`- inner resource(s)
   |  members: A B
   |- A
   `- B
```
:::
[]{#assembly_determining-resource-location-with-rules-configuring-and-managing-high-availability-clusters.html}
::: chapter
::: titlepage
# []{#assembly_determining-resource-location-with-rules-configuring-and-managing-high-availability-clusters.html#assembly_determining-resource-location-with-rules-configuring-and-managing-high-availability-clusters}第 15 章 使用规则决定资源位置 {.title}
:::
对于更复杂的位置限制，您可以使用 Pacemaker 规则来确定资源的位置。
::: section
::: titlepage
# []{#assembly_determining-resource-location-with-rules-configuring-and-managing-high-availability-clusters.html#ref_pacemaker-rules.adoc-determining-resource-location-with-rules}Pacemaker 规则 {.title}
:::
Pacemaker
规则可用于使您的配置更加动态。规则的一个用法可能是根据时间将机器分配给不同的处理组（使用
node 属性），然后在创建位置约束时使用该属性。
每个规则都可以包含多个表达式、日期表达式甚至其它规则。表达式的结果根据规则的
`boolean-op`{.literal} 字段合并，以确定规则最终评估为 `true`{.literal}
或 `false`{.literal}。接下来的操作要看规则使用的上下文而定。
::: table
[]{#assembly_determining-resource-location-with-rules-configuring-and-managing-high-availability-clusters.html#tb-rule-props-HAAR}
**表 15.1. 规则的属性**
::: table-contents
  项                            描述
  ----------------------------- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  `role`{.literal}              只有在资源位于该角色时才会应用该规则。允许的值：`started`{.literal}、`Slave`{.literal} 和 `Master`{.literal}。注意：带有 `role="Master"`{.literal} 的规则无法确定克隆实例的初始位置。它只会影响哪些活跃的实例将会被提升。
  `分数`{.literal}              规则评估为 `true`{.literal} 时要应用的 score 。仅限于作为位置约束一部分的规则使用。
  `score-attribute`{.literal}   如果规则评估为 `true`{.literal}，则要查找并用作 score 的 node 属性。仅限于作为位置约束一部分的规则使用。
  `boolean-op`{.literal}        如何组合多个表达式对象的结果。允许的值： `and`{.literal} 和 `or`{.literal}。默认值为 `and`{.literal}。
:::
:::
::: section
::: titlepage
## []{#assembly_determining-resource-location-with-rules-configuring-and-managing-high-availability-clusters.html#_node_attribute_expressions}节点属性表达式 {.title}
:::
节点属性表达式用于根据节点或节点定义的属性控制资源。
::: table
[]{#assembly_determining-resource-location-with-rules-configuring-and-managing-high-availability-clusters.html#tb-expressions-props-HAAR}
**表 15.2. 表达式的属性**
::: table-contents
+-----------------------+---------------------------------------------+
| 项                    | 描述                                        |
+:======================+:============================================+
| `attribute`{.literal} | 要测试的节点属性                            |
+-----------------------+---------------------------------------------+
| `type`{.literal}      | 决定值应该如何进行测试。允许的值：          |
|                       | `字符串`{.literal                           |
|                       | }、`整数`{.literal}、`数字`{.literal}（RHEL |
|                       | 8.4 及更新版本） `版本`{.literal}。默认值为 |
|                       | `string`{.literal}。                        |
+-----------------------+---------------------------------------------+
| `操作`{.literal}      | 执行的对比。允许的值：                      |
|                       |                                             |
|                       | \* `lt`{.literal} - 如果节点属性的值比      |
|                       | `value`{.literal} 小，则为 True             |
|                       |                                             |
|                       | \* `gt`{.literal} - 如果节点属性的值比      |
|                       | `value`{.literal} 大，则为 True             |
|                       |                                             |
|                       | \* `lte`{.literal} -                        |
|                       | 如果节点属性的值小于或等于                  |
|                       | `value`{.literal}，则为 True                |
|                       |                                             |
|                       | \* `gte`{.literal} -                        |
|                       | 如果节点属性的值大于或等于                  |
|                       | `value`{.literal}，则为 True                |
|                       |                                             |
|                       | \* `eq`{.literal} - 如果节点属性的值等于    |
|                       | `value`{.literal}，则为 True                |
|                       |                                             |
|                       | \* `ne`{.literal} - 如果节点属性的值不等于  |
|                       | `value`{.literal}，则为 True                |
|                       |                                             |
|                       | \* `defined`{.literal} -                    |
|                       | 如果节点具有命名属性，则为 True             |
|                       |                                             |
|                       | \* `not_defined`{.literal} -                |
|                       | 如果节点没有命名属性，则为 True             |
+-----------------------+---------------------------------------------+
| `值`{.literal}        | 用户提供用于比较的值（除非                  |
|                       | `定义了 或未定义`{.literal}                 |
|                       | `操作`{.literal} ``{=html} ）        |
+-----------------------+---------------------------------------------+
:::
:::