using a small tamper-resistant module with that prop-
erty,  connected  to  a  larger  general  purpose  memory.
This scheme could be used to make our ephemerizers
out of cheaper components, but is otherwise orthogonal
to what we are presenting in this paper.
3. Our Design
We  will  present  three  different  types  of  assured
delete (time-based, custom keys, and on-demand).
3.1  Concepts Used by all Variants
First  we  present  concepts  used  by  all  the  variants,
and then we discuss, for each type of assured delete,
how to structure the file system to use it.
Classes
Two of our designs (time-based expiration, and cus-
tom classes) group data into classes. A class is a set of
files that will be deleted simultaneously. For instance,
with time-based expiration, files with the same expira-
tion date will be in the same class. 
Overall File System Secret G
We assume there is a secret G associated with the file
system.  G  is  accessible  to  the  system  administrators,
and is necessary to unlock the entire file system.
G might be in the form of a passphrase, kept in the
head of multiple system administrators. Or for a more
secure  approach,  G  could  be  a  high  quality  secret.  It
could  be  broken  into  n  shares  for  a  quorum  scheme
[25]  where  any  k  shares  can  recover  G.  Each  system
administrator is given a smart card, each with its own
independent high quality secret. Each of the n shares of
G is encrypted with one of the system administrator’s
secrets,  and  the  encrypted  shares  can  be  stored  on
(cid:127)
backup media and replicated for robustness. Any quo-
rum  of  k  system  administrators  can  insert  their  acti-
vated smart cards to recover G, where “activating” the
smart  card  might  involve  inputting  a  passphrase  or  a
biometric.
Knowledge of G, together with backups of the state
of the file system, enable restoration of the state of the
file  system  (other 
than  files  which  have  been
expunged).
Ephemerizers
An  ephemerizer  is  a  service  that  creates,  certifies,
and publishes ephemeral keys, decrypts using a speci-
fied  key  when  requested,  and  discards  keys  at  the
appropriate  time.  An  ephemerizer  might  be  managed
by the same organization that manages the file system,
or it could be a public service.
An ephemerizer has a permanent public key, which
the  file  system  is  either  securely  configured  with,  or
which  the  file  system  can  find  through  a  PKI.  An
ephemerizer uses its permanent public key to certify its
ephemeral public keys, or to authenticate, in the case of
certain operations that require authentication, such as
management of custom keys.
2.
An ephemerizer does not need to be highly trusted,
because the keys it knows will not allow it to decrypt
data. It might, however, fail in one of two ways:
1.
forget  keys  prematurely,  or  be  unavailable  when
decryption is needed, or 
fail to forget keys when it should.
Both these failure modes can be handled with a quo-
rum scheme. However, even in a 1 out of n scheme, to
gain access to data, a malicious ephemerizer would not
only need the retained ephemeral key, but also would
need access to the encrypted backup media, and G. 
Blind Decryption Protocol
The protocol that we will use, for having the file sys-
tem request a decryption from the key manager, we call
“blind  decryption”.  Blind  decryption  was  introduced,
and is described more fully in [21]. Blind decryption is
conceptually  very  similar  to  Chaum’s  blinded  signa-
tures [6]. The idea for blind decryption is to come up
with  blinding  functions  (B,U)  for  “blind”  and
“unblind” which commute with the (encrypt, decrypt)
functions of the ephemerizer’s key. If the file system
has  Ei(M),  (a  quantity  M  that  is  encrypted  with  the
ephemerizer’s public key ID i), the file system does the
following:
To  request 
that 
the  ephemerizer  decrypt 
the
encrypted quantity Ei(M):
(cid:127) The file system creates an ephemeral blinding pair of
functions (B, U) that commute with the ephemer-
izer’s E (encrypt) and D (decrypt) functions.
(cid:127) The file system performs the blind function B on the
encrypted M to obtain B(Ei(M)).
(cid:127) The  file  system  sends  BEi(M))  to  the  ephemerizer,
together with i, to tell the ephemerizer which decryp-
tion key to use.
(cid:127) The key manager then operates on B(Ei(M)) with its
private key i, getting Di(B(Ei(M))), but since D and
E are inverses, and B and E commute, the result is
B(M), which the key manager returns.
(cid:127) The file system applies U to read M, and then dis-
cards B and U.
Any  blind  signature  function  will  work,  with
straightforward  modification,  as  a  blind  decryption
scheme. However one could  use more  types  of  func-
tions for blindable decryption, since there is no neces-
sity to have a public key with which signatures could
be  verified.  The  ephemerizer’s  keys  could  even  be
blindable  secret  keys,  in  which  case  the  file  system
would have to perform a blinded encryption request in
order to encrypt M.
We present three examples of blind decryption proto-
cols in section 7.
Our blind decryption protocol is extremely efficient.
Performing a decryption request requires the ephemer-
izer to perform only a single private key operation, and
is  just  a  single  message  request/response.  The  key
manager does not need to keep any state; just return a
single response to a single request. The message only
needs  to  contain  a  set  of  bits  as  big  as  a  public  key
block (say, 4000 bits for RSA), and a key ID (perhaps 4
bytes).  This  easily  fits  into  a  single  IP  packet,  and
therefore there is no need to even create a TCP connec-
tion. Perhaps in practice, however, to get through fire-
walls,  the  protocol  would  have  to  be  layered  over
HTTP.
Because the interaction is blinded, there is no need
for  authentication  in  either  direction,  so  there  is  no
need to establish a security association. (Certain opera-
tions,  like  request  to  create  or  delete  a  custom  key,
would  require  authentication,  but  the  security  of
decryption,  even  with  custom  keys,  does  not  require
authentication of the party requesting the decryption.)
In contrast, the more traditional approach to having
something like an external key manager decrypt E(M)
would  be  to  establish  an  SSL  connection  to  the  key
manager, ask it to decrypt E(M), and have it return M.
To contrast that with our protocol:
this  would  involve  at  least  two  private  key  opera-
(cid:127)
tions for the key manager (one to establish the SSL
channel, and one to do the decryption),
(cid:127) would not be as secure (since the key manager, with-
out blind decryption, would directly see M which
would enable it to directly decrypt some files on the
backups),
and would involve many packets, for establishing the
TCP connection and the SSL handshake.
3.2  Our Time-Based Scheme
The basic idea is that files, when created, will have
an expiration date. One or more ephemerizers will be
used,  which  advertise  public  keys  with  expiration
dates.  Data  with  a  particular  expiration  date  will  be
encrypted  with  the  ephemerizer  public  key  with  that
expiration date.
Approach 1: Interaction per file
The straightforward approach would be to have each
file  encrypted  with  its  own  key  K,  and  to  store  K,
encrypted  with  the  corresponding  ephemerizer’s  key,
in the metadata of the file. However, this would require
the file system to interact with the key manager when-
ever each file was opened. It would also require a lot of
storage in each file’s metadata, since although K would
be  a  secret  key,  of  perhaps  128  bits,  once  K  is
encrypted with a public key, it will be much larger (say
4000 bits if it is an RSA key). And to be decryptable by
k out of n ephemerizers, would require n times as much
storage.
This is the approach that would be taken if this sys-
tem were used for ephemerizing messages end-to-end,
say if Alice creates a file that will expire at some point,
that Bob is authorized to read. However, for a file sys-
tem, we can do much better than this, with the follow-
ing optimizations.
Optimization 1: Single interaction per expiration
date upon boot
With  this  optimization,  as  we  will  see,  instead  of
having the file system interact with the ephemerizer(s)
every time a file is opened, the file system will need to
interact with the ephemerizers, upon reboot, to build a
table of (symmetric) master keys, one for each possible
expiration date, which the file system will keep in vola-
tile storage. Once the reboot process completes, the file
system  can  act  autonomously  from  the  ephemerizers,
and there is no further overhead from the ephemeriza-
tion.
The  file  system  generates  a  secret  key  Si,  for  each
expiration time i, and all files with the same expiration
time will be encrypted with the same Si. (See figure 1).
There is no loss of security in using the same Si for
all files with the expiration time, because at this layer
the file system is trusted to read all files (except those
that have expired), and to enforce access control. If the
file system is not trusted by a user, the user can employ
an additional level of encryption layered over the file
system, and use the file system encryption only for the
assured delete property.
Ephemerizer P advertises public keys Pi, Pi+1, ... Pi+10000
Ephemerizer Q advertises public keys Qi, Qi+1, ... Qi+10000
File system’s nonvolatile storage
{Si}Pi, {Si}Qi, exp date i
{Si+1}Pi+1, {Si+1}Qi+1, exp date i+1
{Si+2}Pi+2, {Si+2}Qi+2, exp date i+2
{Si+3}Pi+3, {Si+3}Qi+3, exp date i+3
{Si+4}Pi+4, {Si+4}Qi+4, exp date i+4
Encrypted File
exp date = i+3
encrypted with
Si+3
The encrypted S-Table, further
encrypted with G
Figure 1. The encrypted S-Table, using 1 out of 2 
scheme, with ephemerizers P and Q
There  is  a  one-to-one  correspondence  between  file
system secret master keys and ephemeral public keys
kept by the ephemerizers. In other words, if there is an
expiration  time  of  November  8,  2010,  then  each
ephemerizer used by the file system will have a public
key that expires on November 8, 2010, and the file sys-
tem will have a secret key S that expires on November
8, 2010.
The metadata for a file will contain an indication of
which S the file has been encrypted with. For instance,
the metadata might contain the expiration time of the
file.
the  “S-table”,  which  contains 
The file system contains, in volatile storage, a table
we  will  call 
the
encrypted S’s. If the S’s are time-based, with granular-
ity of a day, and 30 years’ worth, there will be 10,000
S’s.
The file system might lose the S-table after a crash,
or certainly after a disaster such as the building burning
(cid:127)
down. So the S-table must be backed up, but in a way
that will not interfere with assured delete. 
This is accomplished by doing the backup of the S-
table as follows. The file system encrypts each S in the
S-table  with  the  corresponding  public  key  of  the
ephemerizer(s), encrypts once more with G, and writes
the result onto nonvolatile storage.
In a 1 out of 3 scheme, for example, with ephemeriz-
ers P, Q, and R, with public keys for that date repre-
sented as Pi, Qi, and Ri, respectively, the file system’s
nonvolatile  (and  backed  up  storage)  will  contain
10,000 entries, one for each expiration date, that each
look like:
(cid:127) {Si}Pi, {Si}Qi, {Si}Ri
The encrypted S’s will be further encrypted with G,
the overall file system secret.
When the file system is rebooted, a system adminis-
trator obtains G. Then G is given to the file system. The
file system retrieves the doubly encrypted S-table from
stable storage, and decrypts it with G.
Now  the  file  system  has  (in  volatile  storage)  the