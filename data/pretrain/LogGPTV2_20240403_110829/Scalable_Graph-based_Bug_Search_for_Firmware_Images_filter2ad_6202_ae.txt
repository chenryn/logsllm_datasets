ﬁrmware images demands the capability to handle binary code in a
cross-architecture setting.
For example, the tracelet-based approach [20] captures execution
04812161822020%40%60%80%100%Time in secondsPercentage of functions00.511.52x 1040306090120150# of Basic BlocksTime in second10^310^410^510^610^710^810^−810^−610^−410^−2110^2The scale of codebase (# of functions)Search time in seconds489sequences as features for code similarity checking, which can de-
feat the CFG changes. However, the opcode and register names are
different across architectures, so it is not suitable for ﬁnding bugs
in ﬁrmware images cross architectures. Myles et al. [41] uses k-
grams on opcodes as a software birthmark technique. TEDEM [46]
captures semantics using the expression tree of a basic block. The
opcode difference on different architectures will easily defeat these
two approaches. Rendezvous [34] ﬁrst explored the code search
in binary code. However, it has two limitations.
It relies on n-
gram features to improve the search accuracy. Secondly, it decom-
poses the whole CFG of a function into subgraphs. Our evaluation
demonstrates that two CFGs as a whole by graph matching is much
more accurate than comparing their subgraphs since one edge addi-
tion will introduce great difference on the number of subgraphs for
two equal CFGs. Therefore, subgraph decomposition will reduce
the search accuracy. Finally, as with the other approaches described
thus far, it is designed for a single architecture.
Control ﬂow graph (CFG)-based bug searching is a prevalent ap-
proach for ﬁnding bugs in ﬁrmware images. However, most exist-
ing works focus on how to improve the matching accuracy by se-
lecting different features or matching algorithms. Flake et al. [25]
proposed to match CFGs of a function to defeat some compiler op-
timizations such as instruction reordering and changes in register
allocation. However, the approach relies upon exact graph match-
ing which is too expensive to be applied for large scale bug search.
Pewny et al. [45] use I/O pairs to capture semantics at the basic-
block level for code similarity computation. It is still expensive for
feature extraction and graph matching. DiscovRe [23] utilizes the
pre-ﬁltering to facilitate CFG based matching, but our evaluation
demonstrates that the pre-ﬁltering is unreliable and outputs tremen-
dous false negatives. Zynamics BinDiff [21] and BinSlayer [13]
use a similarity metric based on the isomorphism between control
ﬂow graphs to check similarity of two binaries. They are not de-
signed for bug search, especially for ﬁnding bug doublets across
different binaries where the CFGs of two binaries are totally dif-
ferent. Besides, BinHunt [26] and iBinHunt [39] utilize symbolic
execution and a theorem prover to check semantic equivalence be-
tween basic blocks. These two approaches are expensive and can-
not be applied for large scale ﬁrmware bug search since they need
to conduct binary analysis to extract the equations and conduct the
equivalence checking.
The ﬁeld of automatic large-scale ﬁrmware analysis has also
made a breakthrough. Costin et al. [19] carried out an analysis
of over 30,000 ﬁrmware samples, but it does not perform in-depth
analysis. Instead, it extracts each ﬁrmware sample and investigates
it for artifacts such as private encryption keys. Therefore, this ap-
proach is not suitable for ﬁnding more general vulnerabilities with-
out these obvious artifacts.
Dynamic analysis based bug search in ﬁrmware images. Blanket-
execution [22] uses the dynamic run-time environment of the pro-
gram as features to conduct the code search. This approach can
defeat the CFG changes, but it is only evaluated in a single archi-
tecture. Besides, dynamic analysis to support ﬁrmware images is at
the initial stage [17, 61], and still has not been demonstrated its ef-
fectiveness with respect to the run-time environments of programs
for large scale ﬁrmware images.
8. CONCLUSIONS
In this paper, inspired by the image retrieval approaches, we
proposed a numeric-feature based search technique to address the
scalability issues in existing in-depth IoT bug search approaches.
We proposed methods to learn higher-level features from the raw
features (control ﬂow graphs), and performed search based upon
the learned feature vector rather than directly performing pair-wise
matching. We have implemented a bug search system (Genius),
and compared Genius with the state-of-the-art bug search ap-
proaches. The extensive experimental results show that Genius
can achieve even better accuracy than the state-of-the-art methods,
and is orders of magnitude faster than most of the existing meth-
ods. To further demonstrate the scalability, Genius was evaluated
on 8,126 devices of 420 million functions across three architectures
and 26 vendors. The experiments show that Genius can ﬁnish a
query less than 1 second on average.
Acknowledgment
We would like to thank anonymous reviewers for their feedback.
This research was supported in part by National Science Founda-
tion Grant #1054605, Air Force Research Lab Grant #FA8750-15-
2-0106, and DARPA CGC Grant #FA8750-14-C-0118. Any opin-
ions, ﬁndings, and conclusions in this paper are those of the authors
and do not necessarily reﬂect the views of the funding agencies.
9. REFERENCES
[1] Cybersecurity and the Internet of Things.
http://www.ey.com/Publication/vwLUAssets/
EY-cybersecurity-and-the-internet-of-things.pdf.
[2] DDWRT ftp. http://download1.dd-wrt.com/dd-wrtv2/
downloads/others/eko/BrainSlayer-V24-preSP2/.
[3] Industrial Utilities and Devices Where the Cyber Threat
Lurks. http://www.cyactive.com/
industrial-utilities-devices-cyber-threat-lurks/.
[4] Iot when cyberattacks have physical effects. http:
//www.federaltimes.com/story/government/solutions-ideas/
2016/04/08/internet-things-when-cyberattacks-have\
discretionary{-}{}{}physical-effects/82787430/.
[5] mongodb. https://www.mongodb.com.
[6] Nearpy. https://pypi.python.org/pypi/NearPy.
[7] DD-WRT Firmware Image r21676.
ftp://ftp.dd-wrt.com/others/eko/BrainSlayer-V24-preSP2/
2013/05-27-2013-r21676/senao-eoc5610/linux.bin, 2013.
[8] ReadyNAS Firmware Image v6.1.6.
http://www.downloads.netgear.com/ﬁles/GDC/
READYNAS-100/ReadyNASOS-6.1.6-arm.zip, 2013.
[9] A. Andoni and P. Indyk. Near-optimal hashing algorithms for
approximate nearest neighbor in high dimensions.
Communications of the ACM Commun., 51, 2008.
[10] R. Arandjelovic and A. Zisserman. All about vlad. In
Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, pages 1578–1585, 2013.
[11] T. Avgerinos, S. K. Cha, A. Rebert, E. J. Schwartz, M. Woo,
and D. Brumley. Automatic exploit generation.
Communications of the ACM, 57(2):74–84, 2014.
[12] M.-F. Balcan, A. Blum, and A. Gupta. Approximate
clustering without the approximation. In Proceedings of the
twentieth Annual ACM-SIAM Symposium on Discrete
Algorithms, pages 1068–1077, 2009.
[13] M. Bourquin, A. King, and E. Robbins. Binslayer: accurate
comparison of binary executables. In Proceedings of the 2nd
ACM SIGPLAN Program Protection and Reverse
Engineering Workshop, 2013.
[14] H. Bunke and K. Shearer. A graph distance metric based on
the maximal common subgraph. Pattern recognition letters,
19(3):255–259, 1998.
[15] S. K. Cha, M. Woo, and D. Brumley. Program-adaptive
mutational fuzzing. In Oakland, 2015.
[16] K. Chatﬁeld, V. S. Lempitsky, A. Vedaldi, and A. Zisserman.
The devil is in the details: an evaluation of recent feature
encoding methods. In BMVC, volume 2, page 8, 2011.
[17] D. D. Chen, M. Egele, M. Woo, and D. Brumley. Towards
automated dynamic analysis for linux-based embedded
ﬁrmware. In NDSS, 2016.
490[18] K. Chen, P. Wang, Y. Lee, X. Wang, N. Zhang, H. Huang,
W. Zou, and P. Liu. Finding unknown malice in 10 seconds:
Mass vetting for new threats at the google-play scale. In
USENIX Security, 2015.
[19] A. Costin, J. Zaddach, A. Francillon, and D. Balzarotti. A
large-scale analysis of the security of embedded ﬁrmwares.
In USENIX Security, 2014.
[20] Y. David and E. Yahav. Tracelet-based code search in
executables. In Proceedings of the 35th ACM SIGPLAN
Conference on Programming Language Design and
Implementation, 2014.
[21] T. Dullien and R. Rolles. Graph-based comparison of
executable objects (english version). SSTIC, 5:1–3, 2005.
[22] M. Egele, M. Woo, P. Chapman, and D. Brumley. Blanket
execution: Dynamic similarity testing for program binaries
and components. In USENIX Security, 2014.
[23] S. Eschweiler, K. Yakdan, and E. Gerhards-Padilla. discovre:
Efﬁcient cross-architecture identiﬁcation of bugs in binary
code. In NDSS, 2016.
[24] Q. Feng, A. Prakash, M. Wang, C. Carmony, and H. Yin.
Origen: Automatic extraction of offset-revealing instructions
for cross-version memory analysis. In ASIACCS, 2016.
[25] H. Flake. Structural comparison of executable objects. In
DIMVA, volume 46, 2004.
[37] McCabe. More Complex = Less Secure. Miss a Test Path and
You Could Get Hacked.
http://www.mccabe.com/sqe/books.htm, 2012.
[38] A. McCallum, K. Nigam, et al. A comparison of event
models for naive bayes text classiﬁcation. In the workshop
on learning for text categorization, 1998.
[39] J. Ming, M. Pan, and D. Gao. ibinhunt: binary hunting with
inter-procedural control ﬂow. In Information Security and
Cryptology, pages 92–109. Springer, 2012.
[40] F. Murtagh. A survey of recent advances in hierarchical
clustering algorithms. The Computer Journal,
26(4):354–359, 1983.
[41] G. Myles and C. Collberg. K-gram based software
birthmarks. In Proceedings of the 2005 ACM symposium on
Applied computing, 2005.
[26] D. Gao, M. K. Reiter, and D. Song. Binhunt: Automatically
ﬁnding semantic differences in binary programs. In
Information and Communications Security. 2008.
[27] J. Holcombe. Soho network equipment (technical report).
https://securityevaluators.com/knowledge/case_studies/
routers/soho_techreport.pdf.
[28] The IDA Pro Disassembler and Debugger.
http://www.datarescue.com/idabase/.
[29] J. Jang, A. Agrawal, and D. Brumley. Redebug: ﬁnding
unpatched code clones in entire os distributions. In Oakland,
2012.
[30] L. Jiang, T. Mitamura, S.-I. Yu, and A. G. Hauptmann.
Zero-example event search using multimodal pseudo
relevance feedback. In ICMR, 2014.
[31] L. Jiang, W. Tong, and A. G. Meng, Deyu andHauptmann.
Towards efﬁcient learning of optimal spatial bag-of-words
representations. In ICMR, 2014.
[32] L. Jiang, S.-I. Yu, D. Meng, T. Mitamura, and A. G.
Hauptmann. Bridging the ultimate semantic gap: A semantic
search engine for internet videos. In ICMR, 2015.
[33] T. Kamiya, S. Kusumoto, and K. Inoue. Ccﬁnder: a
multilinguistic token-based code clone detection system for
large scale source code. IEEE Transactions on Software
Engineering, 28(7):654–670, 2002.
[34] W. M. Khoo, A. Mycroft, and R. Anderson. Rendezvous: A
search engine for binary code. In Proceedings of the 10th
Working Conference on Mining Software Repositories, 2013.
[35] Z. Li, S. Lu, S. Myagmar, and Y. Zhou. Cp-miner: A tool for
ﬁnding copy-paste and related bugs in operating system
code. In OSDI, volume 4, pages 289–302, 2004.
[36] W. Liu, J. Wang, S. Kumar, and S.-F. Chang. Hashing with
graphs. In ICML, 2011.
[42] M. Newman. Networks: an introduction. 2010.
[43] A. Y. Ng, M. I. Jordan, Y. Weiss, et al. On spectral
clustering: Analysis and an algorithm. Advances in neural
information processing systems, 2:849–856, 2002.
[44] H. Perl, S. Dechand, M. Smith, D. Arp, F. Yamaguchi,
K. Rieck, S. Fahl, and Y. Acar. Vccﬁnder: Finding potential
vulnerabilities in open-source projects to assist code audits.
In CCS, 2015.
[45] J. Pewny, B. Garmany, R. Gawlik, C. Rossow, and T. Holz.
Cross-architecture bug search in binary executables. In
Oakland, 2015.
[46] J. Pewny, F. Schuster, L. Bernhard, T. Holz, and C. Rossow.
Leveraging semantic signatures for bug search in binary
programs. In ACSAC, 2014.
[47] G. Qian, S. Sural, Y. Gu, and S. Pramanik. Similarity
between euclidean and cosine angle distance for nearest
neighbor queries. In Proceedings of the symposium on
Applied computing, pages 1232–1237, 2004.
[48] A. Rebert, S. K. Cha, T. Avgerinos, J. Foote, D. Warren,
G. Grieco, and D. Brumley. Optimizing seed selection for
fuzzing. In USENIX Security, 2014.
[49] K. Riesen and H. Bunke. Approximate graph edit distance
computation by means of bipartite graph matching. Image
and vision computing, 27(7):950–959, 2009.
[50] M. Shahrokh Esfahani. Effect of separate sampling on
classiﬁcation accuracy. Bioinformatics, 30:242–250, 2014.
[51] E. C. R. Shin, D. Song, and R. Moazzezi. Recognizing
functions in binaries with neural networks. In USENIX
Security, 2015.
[52] Y. Shoshitaishvili, R. Wang, C. Hauser, C. Kruegel, and
G. Vigna. Firmalice-automatic detection of authentication
bypass vulnerabilities in binary ﬁrmware. In NDSS, 2015.
[53] J. Sivic and A. Zisserman. Video google: A text retrieval
approach to object matching in videos. In IEEE International
Conference on Computer Vision, 2003.
[54] M. Slaney and M. Casey. Locality-sensitive hashing for
ﬁnding nearest neighbors. Signal Processing Magazine,
IEEE, 25(2):128–131, 2008.
[55] N. Stephens, J. Grosen, C. Salls, A. Dutcher, and R. Wang.
Driller: Augmenting fuzzing through selective symbolic
execution. In NDSS, 2016.
[56] M. Wall. Galib: A c++ library of genetic algorithm
components. Mechanical Engineering Department,
Massachusetts Institute of Technology, 87:54, 1996.
[57] R. Weber, H.-J. Schek, and S. Blott. A quantitative analysis
and performance study for similarity-search methods in
high-dimensional spaces. In VLDB, volume 98, pages
194–205, 1998.
[58] F. Yamaguchi, A. Maier, H. Gascon, and K. Rieck.
Automatic inference of search patterns for taint-style
vulnerabilities. In Oakland, 2015.
[59] J. Yang, Y.-G. Jiang, A. G. Hauptmann, and C.-W. Ngo.
Evaluating bag-of-visual-words representations in scene
classiﬁcation. In International workshop on Workshop on
multimedia information retrieval, 2007.
[60] S.-I. Yu, L. Jiang, Z. Xu, Y. Yang, and A. G. Hauptmann.
Content-based video search over 1 million videos with 1 core
in 1 second. In ICMR, 2015.
[61] J. Zaddach, L. Bruno, A. Francillon, and D. Balzarotti.
Avatar: A framework to support dynamic security analysis of
embedded systems’ ﬁrmwares. In NDSS, 2014.
[62] M. Zhang, Y. Duan, Q. Feng, and H. Yin. Towards automatic
generation of security-centric descriptions for android apps.
In CCS, 2015.
[63] M. Zhang, Y. Duan, H. Yin, and Z. Zhao. Semantics-Aware
Android Malware Classiﬁcation Using Weighted Contextual
API Dependency Graphs. In CCS, 2014.
491