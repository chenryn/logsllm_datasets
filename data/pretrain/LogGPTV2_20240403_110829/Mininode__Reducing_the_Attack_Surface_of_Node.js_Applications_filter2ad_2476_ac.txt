### Unit Testing and Code Reduction

To run unit tests on the final results, we attempted to use Mininode. However, this approach failed because during the reduction step, Mininode removed all code responsible for unit tests. To address this issue, we leveraged Node.js's dependency resolution mechanism, which searches for dependencies in the `node_modules` directory relative to the file requesting the dependency. We installed both the full and production versions of the package and created a symbolic link from the main file (entry point) of the full version to the main file of the production version. This allowed us to run the package’s unit tests using the full version while testing its production version.

During the testing of the production version, we observed that some packages required developer-only dependencies that were not installed. These cases often occur in packages implemented as plugins for other developer-only packages, such as `eslint-plugin-jest` for `eslint`. Another challenge was configuring Babel, a popular JavaScript transpiler, for projects located in different folders or symlinked [14]. After eliminating packages that failed during the test of their production version using the symbolic link, we were left with 45,045 packages in our validation dataset.

### Validation Experiment

The final steps in the validation experiment, before result analysis, involved package reduction and unit tests validation of the reduced version of the packages (Figure 2). In 6,579 out of 45,045 packages, Mininode detected dynamic imports that could not be resolved with the current implementation (§6.3). Additionally, 2.7% of the packages experienced runtime errors, such as heap out of memory. The final dataset included 37,242 packages that we tested for correctness and effectiveness.

### Results

For the final dataset of 37,242 packages, we performed both coarse-grain and fine-grain reduction and ran unit tests to verify that Mininode did not break the original functionality of the reduced packages. The results of both reduction modes are shown in Table 1.

| Passed Test | Removed fs Module | Removed net Module | Removed http Module | Removed https Module | Total Removed Files | Total Removed LLOC | Total Removed Exports | Failed Test | TOTAL |
|-------------|--------------------|---------------------|----------------------|-----------------------|---------------------|----------------------|------------------------|-------------|-------|
| Coarse-grained | 35,762 | 28,144 | 33,262 | 32,878 | 33,137 | 86.9% | 85.4% | 86.7% | 1,480 | 37,242 |
| Fine-grained | 35,531 | 28,196 | 34,180 | 32,795 | 33,044 | 87.3% | 92.2% | 89.0% | 1,711 | 37,242 |

**Table 1: Coarse and Fine-Grain Reduction Results on Validation Set**

As expected, the coarse-grain reduction (96.0%) had a higher success rate than the fine-grain reduction (95.4%). This is due to the fine-grain reduction attempting to reduce individual modules at the function level, which can lead to over-reduction and breaking the original behavior of the package. Despite the higher failure rate, the fine-grain reduction was more effective in reducing unused code parts, removing almost 8% more Logical Lines of Code (LLOC) compared to the coarse-grain reduction. Fine-grain reduction also showed better results in other reduction categories, such as file and exported functionalities.

Mininode restricted access to built-in modules in at least 28,144 (78.7%) of packages during the coarse-grain reduction and in 28,196 (79.4%) of packages during the fine-grain reduction. To validate these high reduction rates, we manually verified three packages with more than 99% reduction. For example, `mfdc-router` and `middleware-chain-js` shipped bundled versions along with their source code, and Mininode removed almost all of their dependencies and unnecessary source files. In the case of `cpr`, after installation, 35,911 out of 35,982 JavaScript files were removed by Mininode.

### Test Coverage

We calculated the test coverage for the successfully reduced packages in both reduction modes. As shown in Table 2, more than one-third of the packages had 100% test coverage, and almost one-fourth had coverage between 90-99.9% for both coarse and fine-grain reductions. This indicates that Mininode can effectively reduce packages without breaking their intended behavior.

| Coverage | 100% | Between 90-99.9% | Between 50-90% | Unknown or Below 50% | Total |
|----------|------|-------------------|-----------------|-----------------------|-------|
| Coarse-grained | 13,561 | 8,413 | 6,915 | 6,873 | 35,762 |
| Fine-grained | 13,548 | 8,290 | 6,797 | 6,896 | 35,531 |

**Table 2: Coverage Statistics of Successfully Passed Test Samples**

### Attack Surface Reduction in NPM

#### Experiment Setup

The setup and stages of the measurement experiment are shown in Figure 3. First, we collected all package names from NPM. Second, we attempted to install the production version of all packages and run the reduction logic on successfully installed ones. Finally, we analyzed the results and measured the vulnerabilities and their reduction.

We gathered all package names from NPM using the open-source package `all-the-package-names` [12], which contains a list of all package names sorted by dependent count. The list contained 1,055,131 package names as of September 19, 2019.

After gathering the package names, we tried to install and reduce packages using the coarse-grain reduction method. Table 3 shows that only 672,242 out of 1,055,131 packages were successfully installed and reduced. The most common reasons for failure include:

1. Installed packages are not Node.js applications (e.g., theme CSS files).
2. Packages cannot be reduced due to non-resolvable dynamic imports.
3. Entry points are not CommonJS (e.g., ES6, TypeScript, JSON).

**Table 3: NPM Measurement Experiment Overall Status**

| Job Statuses and Reasons | Succeeded Packages | Failed Packages | Package Does Not Have Main Entry Point | Non-Resolvable Dynamic Import Detected | Failed to Install | Package’s Main Entry Point is Not CommonJS | Others | TOTAL |
|--------------------------|--------------------|-----------------|-----------------------------------------|-----------------------------------------|------------------|--------------------------------------------|--------|-------|
| Packages                 | 672,242            | 382,889         | 188,630                                 | 128,533                                 | 26,875           | 20,977                                     | 5,013  | 1,055,131 |

In the fourth step, we gathered a vulnerability database from snyk.io [16] and mapped vulnerabilities with packages by calculating if a specific vulnerable dependency is part of the dependency chain inside the package. We considered a specific vulnerable dependency removed if Mininode removed all source files from it. Otherwise, the package still depends on the vulnerable dependency.

#### Results

The NPM measurement experiment reduction results are shown in Table 4. Mininode restricted access to the `fs` built-in module in 81.7% of packages and to network-related built-in modules such as `net`, `http`, and `https` in 92.8%, 90.3%, and 91.3% of packages, respectively.

**Table 4: NPM Measurement Experiment Results**

| Removed fs Built-in Module | Removed net Built-in Module | Removed http Built-in Module | Removed https Built-in Module | Percentage of Removed JavaScript Files | Percentage of Removed LLOC | Percentage of Removed Exports | TOTAL | Number |
|----------------------------|------------------------------|-------------------------------|--------------------------------|----------------------------------------|----------------------------|--------------------------------|-------|--------|
| 549,254                     | 623,646                      | 606,981                       | 614,030                        | 79.1%                                  | 90.5%                      | 90.4%                         | 672,242 |

On average, successfully analyzed packages declared 1.9 dependencies but installed 27.3 dependencies, indicating that NPM installed 14 times more dependencies than declared. This behavior is due to the transitive dependency installation process discussed in Section 2.2. Developers may choose packages with lower declared but higher installed dependencies, leading to bloated code.

To provide a detailed insight into the bloatedness of NPM packages, we calculated the ratio between third-party and original code base’s logical lines of code. On average, only 6.8% of the code base was original, while 93.2% was external code from third-party dependencies. After coarse-grain reduction by Mininode, only 9.5% of LLOC remained. This result highlights the need for reduction techniques.

We also measured the effectiveness of Mininode in reducing unused vulnerable dependencies. Table 5 shows the top ten most common vulnerability categories sorted by the number of unique packages that have a dependency from a specific category. On average, Mininode was able to partially remove vulnerabilities in 13.8% of cases and fully remove them in 13.65% of cases.

**Table 5: Vulnerability Reduction Analysis in NPM Packages**

| Category Names | Prototype Pollution | Regex Denial of Service | Denial of Service | Uninitialized Memory Exposure | Arbitrary Code Execution | Cross-Site Scripting |
|----------------|---------------------|-------------------------|-------------------|--------------------------------|--------------------------|----------------------|

### Related Work

#### Attack Surface Reduction

Howard et al. [30] introduced the concept of the attack surface, a measure of system security. Manadhata [35] generalized Howard’s approach, introducing a step-by-step mechanism to calculate the attack surface. Theisen et al. [48] developed an attack surface approximation technique based on stack traces. Several works have focused on reducing and measuring the attack surface of different systems, such as operating systems, websites, and mobile applications [28, 40, 41, 51]. Our work concentrates on reducing the attack surface of Node.js applications.

Azad et al. [21] demonstrated that debloating web applications improves security by recording code coverage from client-side interactions. We use static analysis to create a dependency graph, covering all use-cases accessible from the application’s entry point.

#### Node.js and NPM Security

Previous research on Node.js security has focused on injection attacks [17, 37, 42] and event poisoning attacks [23–25]. Ojamaa et al. [38] assessed the security of Node.js and concluded that denial of service is the main threat. We focus on reducing the overall attack surface rather than specific attacks or vulnerabilities.

NodeSentry [26] is a permission-based security architecture that integrates third-party Node.js modules with least-privilege. While NodeSentry reduces the attack surface by restricting functionality, Mininode removes unused functionality from third-party dependencies.

Researchers have also explored why developers use trivial packages [19] and the security implications of depending on NPM packages [52]. Zimmermann et al. [52] found that depending on too many third-party packages significantly increases the attack surface.

#### JavaScript Application Analysis

Researchers have developed static [33, 34, 37] and dynamic [6, 36, 37] techniques for analyzing JavaScript applications. Madsen et al. [33] used traditional pointer analysis and use analysis for static analysis. Madsen et al. [34] introduced an event-based call graph representation for Node.js applications, useful for detecting event-related bugs. Sun et al. [6] introduced NodeProf, a dynamic analysis framework for profiling and detecting data races in Node.js applications. Mezzetti et al. [36] introduced type regression testing to determine if NPM package updates affect public interface types. Mininode differs by focusing on building dependency graphs to reduce the attack surface.

#### JavaScript Bundlers

Traditionally, bundlers combine source code files into a single file to reduce network requests. Mininode, however, focuses on server-side reduction and security.

---

This revised text aims to be more clear, coherent, and professional, with improved structure and readability.