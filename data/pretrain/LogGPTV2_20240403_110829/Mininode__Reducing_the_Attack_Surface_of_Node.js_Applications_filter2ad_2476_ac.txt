and run the unit tests on the ﬁnal results. However, this ap-
proach failed, because during the reduction step Mininode
removed all code responsible for unit tests. To resolve this
issue, we leveraged the way Node.js looks for a correct de-
pendency by traversing the node_modules directory in the
same location where the ﬁle requesting the dependency is
located. We installed both the full and production versions
of the package and created a symbolic link from the main
ﬁle (i.e. entry point) of the full version to the main ﬁle of the
production version. In this way, we could run the package’s
unit tests in the full version but test its production version.
During the test of packages’ production version, we noticed
that some packages in production version require developer-
only dependencies that are not installed (§2.2). Usually, these
cases of counter-intuitive dependencies are used in the pack-
ages that are implemented as a plugin to other developer-only
packages, e.g. eslint-plugin-jest is a plugin for eslint. Another
challenge we faced was that babel [1], a popular package
to transpile JavaScript, needed a special conﬁguration for
projects located in a different folder or symlinked [14]. After
eliminating packages that failed during the test of their pro-
duction version using a symbolic link from the full version,
we were left with 45,045 packages in our validation dataset.
The ﬁnal steps in the validation experiment, before result
analysis, were package reduction and unit tests validation of
the reduced version of the packages (Figure 2). In 6579 out
of 45,045 packages Mininode detected dynamic import that
could not be resolved with the current implementation (§6.3)
and for 2.7% of packages Mininode threw runtime errors,
such as heap out of memory. The ﬁnal dataset has 37,242
packages that we tested for correctness and effectiveness.
Results. For the ﬁnal dataset of 37,242 packages, we per-
formed both coarse-grain and ﬁne-grain reduction and ran
unit tests to verify that Mininode did not break the original
functionality of the reduced packages. The results of both
modes of reduction are shown in Table 1. As it may be ex-
Passed test
Removed fs module
Removed net module
Removed http module
Removed https module
Total removed ﬁles
Total removed LLOC
Total removed exports
Failed test
TOTAL
Coarse-grained
35,762
28,144
33,262
32,878
33,137
86.9%
85.4%
86.7%
1,480
37,242
Fine-grained
35,531
28,196
34,180
32,795
33,044
87.3%
92.2%
89.0%
1,711
37,242
Table 1: Coarse and ﬁne grain reduction results on validation
set
pected, the coarse-grain reduction (96.0%) has a higher suc-
cess rate than the ﬁne-grain reduction (95.4%). This is due
to the behavior of the ﬁne-grain reduction trying to reduce
the individual modules on function-level, compared to coarse-
grain reduction, which only performs reduction on ﬁle-level.
Reducing in the ﬁne-grain mode may cause over-reduction
of the used functions, which leads to breaking the original
behavior of the package and, thus, failing the unit tests. How-
ever, despite the higher failure rate, the ﬁne-grain reduction
performed better in terms of reducing unused code parts. Fine-
grain reduction removed almost 8% more LLOC compared
to coarse-grain reduction. Also, in other reduction categories
such as reduction of the ﬁles and the exported functionalities,
ﬁne-grain shows better results. As shown in Table 1 Minin-
ode was able to restrict the access to the built-in modules
at least in 28,144 (78.7%) of packages during the coarse-
grain reduction, and in 28,196 (79.4%) of packages during
the ﬁne-grain reduction. The high results of reduction may
be counter-intuitive, especially in case of reducing a lot of
ﬁles and LLOC from the package. That is why we randomly
selected three packages that have a more than 99% reduction
rate and manually veriﬁed the results. Both of the packages
mfdc-router and middleware-chain-js were shipping a bun-
dled version along with their source code. In these cases,
Mininode removed almost all of their dependencies from the
node_modules folder and unnecessary source code ﬁles. In
the last case, after installation, cpr had 35,911 test ﬁles out of
all 35,982 JavaScript ﬁles, which were removed by Mininode.
Coverage
100%
Between 90-99.9%
Between 50-90%
Unknown or below 50%
Total
Coarse-grained
13,561
8,413
6,915
6,873
35,762
Fine-grained
13,548
8,290
6,797
6,896
35,531
Table 2: Coverage statistics of successfully passed test sam-
ples
In addition, we calculated the test coverage of the success-
128    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
Figure 3: NPM measurement experiment setup
Job statuses and reasons
Succeeded packages
Failed packages
Package does not have main entry point
Non-resolvable dynamic import detected
Failed to install
Package’s main entry point is not CommonJS
Others
TOTAL
Packages
672,242
382,889
188,630
128,533
26,875
20,977
5,013
1,055,131
Table 3: NPM measurement experiment overall status
fully reduced packages for both reduction modes. From all
packages that successfully passed the validation test after
reduction, more than third has 100% test coverage and al-
most forth have coverage between 90-99.9% for both coarse
and ﬁne-grain reductions, as shown in Table 2. This shows
that Mininode can successfully reduce the packages without
breaking the intentional behavior.
7.2 Attack Surface Reduction in NPM
Experiment Setup. The setup and stages of the measure-
ment experiment are shown in Figure 3. First, we collected
all package names from NPM. Second, we tried to install the
production version of all packages and to run reduction logic
on successfully installed ones. Finally, we analyzed the results
and measured the vulnerabilities and their reduction.
We gathered all package names from NPM using the open-
source package all-the-package-names [12] that contains the
list of all package names sorted by dependent count. The
list contained 1,055,131 package names from NPM as of 19th
September 2019.
After gathering all the package names, we tried to install
and reduce packages using the coarse-grain reduction method.
Table 3 shows that only 672,242 out of 1,055,131 were suc-
cessfully installed and reduced. Table 3 lists the most common
reasons why not all of the packages were analyzed. Top two
most common reasons are: (1) installed packages are not
Node.js application, which means they are not intended to
run on the server-side, e.g. theme’s CSS ﬁles; (2) packages
that can not be reduced with Mininode, due to non-resolvable
dynamic import. One interesting failed category is packages’
for which entry point is not CommonJS, e.g. ES6, or even not
JavaScript ﬁle, e.g. TypeScript, JSON and so on.
In the fourth step, as shown in Figure 3, we gathered a
Removed fs built-in module
Removed net built-in module
Removed http built-in module
Removed https built-in module
Percentage of removed JavaScript ﬁles
Percentage of removed LLOC
Percentage of removed exports
TOTAL
Number
549,254
623,646
606,981
614,030
79.1%
90.5%
90.4%
672,242
Table 4: NPM measurement experiment results
vulnerability database from snyk.io [16] and mapped vulnera-
bilities with packages by calculating if speciﬁc vulnerable de-
pendency is part of the dependency chain inside the package.
In addition to mapping vulnerability, we calculate if Minin-
ode removed the particular vulnerability during the reduction
process. We consider that a speciﬁc vulnerable dependency
is removed if Mininode removes all source ﬁles from it. Oth-
erwise, we say that the package still depends on vulnerable
dependency. Note that this is a conservative approach and
gives us a lower bound reduction number because certainly
Mininode may have removed a vulnerable ﬁle from vulnerable
dependency, and left only safe ﬁles.
Results. The NPM measurement experiment reduction re-
sults are shown in Table 3. As discussed earlier, only 672,242
out of 1,055,131 were successfully installed and reduced.
From all successfully installed and reduced packages, Minin-
ode restricted access to fs built-in module in 81.7% pack-
ages, and it also restricted access to network-related built-in
modules such as net, http, https in 92.8%, 90.3%, 91.3%
packages, respectively. We discussed how Mininode restricts
access to built-in modules in Section 6.1.
One question we tried to answer during the NPM measure-
ment experiment was how signiﬁcant is the severity of bloated-
code in NPM packages. To answer this question, we calculated
the relationship between declared and installed dependencies
of the packages. On average, successfully analyzed packages
declared 1.9 dependencies but installed 27.3 dependencies,
which means NPM installed x14 times more dependencies than
declared. This behavior is the result of the transitive depen-
dency installation process discussed in Section 2.2. On NPM
public registry, the package’s detailed information shows the
number of declared, i.e. direct dependencies, but not the num-
ber of actually installed dependencies. As a consequence,
developers may choose packages with lower declared, but
higher installed dependencies instead of packages with higher
declared, but lower installed dependencies.
To give a more detailed insight of the bloatedness of NPM
packages, we calculated the ratio between third-party and
original code base’s logical lines of code. On average, from
all code-base, only 6.8% was original code, while 93.2% was
external code from third-party dependencies, and from all
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    129
2. Installation and ReductionProduction VersionReduced Version1. List All Packages3. Vulnerability Database4. Analyze The ResultsLLOC, only 9.5% were left after coarse-grain reduction by
Mininode. This result clearly shows that more and more ap-
plications are developed as a mash-up of third-party packages
and the need for reduction techniques.
We also measured the effectiveness of Mininode in reduc-
ing unused vulnerable dependencies from packages. These
vulnerabilities are present in the application’s code, but are
not reachable. In order to get exploited, the attacker needs
to chain vulnerabilities together (§ 3), something that might
not be always possible. The results of vulnerability reduction
analysis in NPM packages are given in Table 5. We used the
vulnerability database from snyk.io, which contains 1,660
vulnerable packages grouped by categories. In total, we found
that 119,433 of packages have at least one active vulnera-
ble dependency by the time of writing. This corresponds to
17.8% of all successfully analyzed and reduced 672,242 pack-
ages. Table 5 shows the top ten most common vulnerability
categories sorted by the number of unique packages that have
a dependency from a speciﬁc vulnerability category. For ex-
ample, 91,184 packages have at least one dependency vulner-
able to Prototype Pollution. Partially removed column of the
Table 5 shows the number of unique packages from which
Mininode removed at least one vulnerability of a speciﬁc cat-
egory. For example, if the package @chrismlee/reactcards
had two vulnerable dependencies from the Arbitrary Code In-
jection category and Mininode was able to remove one of the
vulnerable dependencies, then we count the package as par-
tially removed. On the other hand, the fully removed column
shows the number of unique packages where all vulnerabili-
ties of the speciﬁc category were removed. Also, in Table 5,
one can see the percentage of partially and fully removed
packages from the total number of vulnerable packages. On
average, Mininode was able to partially remove vulnerabil-
ities from across all categories in 13.8% cases, and remove
all vulnerabilities in 13.65% cases. In conclusion, Mininode
was able to remove at least one vulnerability from 10,618 and
remove all vulnerabilities from 2861 unique packages from
all 119,433 vulnerable packages.
8 Related Work
Attack Surface Reduction. Howard et al. [30] introduced
the notion of the attack surface, a way to measure the secu-
rity of the system. Manadhata [35] generalized Howard’s
approach and introduced a step by step mechanism to calcu-
late the attack surface of the system. Theisen et al. [48] came
up with an attack surface approximation technique based on
stack traces. There are several attempts both to reduce and to
measure the attack surface of the different systems, such as
OSes, websites, mobile applications [28, 40, 41, 51]. While
all of the above works are related to attack surface reduction,
we concentrate on the attack surface reduction of the Node.js
applications. Azad et al. [21] showed that debloating the web
application improves its security. They debloated the PHP
application by recording the web application’s code coverage
from client-side interaction, which may break the website if
rarely used functionality was not triggered during recording
step. On the other hand, we use static analysis to create the de-
pendency graph of the application, which covers all use-cases
accessible from the application’s entry point.
Node.js and NPM Security. Previous researchers on the
security of Node.js concentrate more on injection attacks [17,
37, 42] and event poisoning attacks [23–25]. Ojamaa et al.
was the ﬁrst to assess the security of Node.js [38]. They
conclude that denial of service is the main threat for Node.js.
On the other hand, we concentrate on reducing the overall
attack surface of Node.js rather than on speciﬁc attack or
vulnerability.
NodeSentry [26] is a permission-based security architec-
ture that integrates third-party Node.js modules with least-
privilege. While NodeSentry also reduces the attack surface
by using least-privilege modes for Node.js modules, we ap-
proached the problem from a different angle. Mininode re-
moves unused functionality from third-party dependencies
instead of restricting their functionality as NodeSentry does.
On the NPM side, researchers try to answer why devel-
opers use trivial packages [19] and the security implications
of depending on NPM packages [52]. Zimmermann and et
al.’s results supplement our results that depending on too
many third-party packages signiﬁcantly increase the attack
surface [52].
JavaScript Application Analysis. In the past, researchers
tried to come up with static [33,34,37] and dynamic [6,36,37]
techniques that help developers with analysis of the applica-
tion written in JavaScript. Madsen et al. [33] focuses on static
analysis of JavaScript applications using traditional pointer
analysis and use analysis. The key insight of the paper is
the idea of observing the uses of library functionality within
the application code to better understand the structure of the
library code. Madsen et al. [34] introduced an event-based
call graph representation of Node.js application that is useful
to detect various event-related bugs. The advantage of the
event-based call graph is that it contains information about
listener registration and event emission that can be used to
detect dead events and emits. Sun et al. [6] introduced a dy-
namic analysis framework called NodeProf that can be used
for proﬁling, for locating bad coding practices, and for de-
tecting data-race in Node.js applications. Mezzetti et al. [36]
introduced a technique called type regression testing, which
automatically determines if NPM package’s update affects the
types of its public interface, which eventually will introduce
breaking changes for clients. While there exists many other
JavaScript static analysis tools, Mininode differs because it
mostly concentrates on building dependency graphs to reduce
the attack surface.
JavaScript bundlers. Traditionally bundlers are used on
the client-side to combine all the source code ﬁles into a sin-
gle ﬁle to reduce network requests back to the server. One
130    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
Category names
Prototype Pollution
Regex Denial of Service
Denial of Service
Uninitialized Memory Exposure
Arbitrary Code Execution
Cross-Site Scripting