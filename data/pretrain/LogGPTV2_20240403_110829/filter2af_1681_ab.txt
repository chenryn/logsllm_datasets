![
](https://images.seebug.org/content/images/2018/09/73f05643-347c-4063-812e-53dafaf3894a.png-w331s)
#### 6\. Bypass CFG
这个样本在32位下通过覆盖jit栈的方式来绕过CFG，攻击者首先定义了两个相似的类`class_26`和`class_27`。两者都定义了一个方法叫做`method_87`。不同之处在于`class_26.method_87`只接受两个参数，而`class_27.method_87`接受256个参数，并会将传入的参数全部保存并返回给调用者。
![
](https://images.seebug.org/content/images/2018/09/941379f3-75d3-4375-9ffd-763f5153fcd5.png-w331s)
![
](https://images.seebug.org/content/images/2018/09/5aedcf01-0e4f-4773-a0d7-c1bb480bf799.png-w331s)
##### 6.1 jit地址替换
攻击者首先初始化了一个`class_26`对象cls26和一个`class_27`对象cls27。然后借助任意地址读写能力将`cls26.method_87`的jit地址替换为cls26.method_87的jit地址，
![
](https://images.seebug.org/content/images/2018/09/b6443631-5b95-4940-9e43-e48df32807f9.png-w331s)
然后第二次调用`cls26.method_87`，此时实际上调用的是`cls27.method_87`，由于`cls26.method_87`自身只会传入2个参数，导致泄漏了大量jit栈上的数据，攻击者随后利用泄漏的数据找到一个jit参数栈的地址，并第二次调用`cls27.method_87`，用以覆盖jit栈的一个返回地址，从而在对应的函数返回时控制eip。
![
](https://images.seebug.org/content/images/2018/09/928511e2-d58b-4789-a9aa-f53300b739c1.png-w331s)
在windbg中观察一下上述过程：
![
](https://images.seebug.org/content/images/2018/09/1eb28e64-b71d-49e1-b93a-e9f1e6654afd.png-w331s)
![
](https://images.seebug.org/content/images/2018/09/707eac28-05ac-41ff-b3fd-5049e7f0a38e.png-w331s)
![
](https://images.seebug.org/content/images/2018/09/460235ce-1413-48a8-9c65-0081ecaec619.png-w331s)
##### 6.2 jit地址替换原理
根据[这篇文章](https://www.coresecurity.com/blog/exploiting-cve-2015-0311-part-ii-bypassing-control-flow-guard-on-windows-8-1-update-3
"这篇文章")，我们可以知道cls26对象的+0x08处是一个vTable对象指针，而vTable对象的+0x48处是一个MethodEnv对象指针，MethodEnv对象内又包含自身的`_implGPR`函数指针和一个MethodInfo对象指针，MethodInfo对象内也包含一份`_implGPR`函数指针，这些结构体间在内存中的寻址关系如下所示：
![
](https://images.seebug.org/content/images/2018/09/59fbb960-4ee5-457b-90cc-c6ab8c24e54d.png-w331s)
所以`replace_jit_addr`函数本质上是用`cls27.method_87`的jit地址替换了`cls26.method_87`的jit地址。但`cls26.method_87`的jit地址在好几个地方都有存储(如上图就有`MethodEnv._implGPR`和`MethodEnv.MethodInfo._implGPR`两个地方存储着`cls26.method_87`的地址)，我们如何确定要覆盖的是哪一个地方？
这得从class_21$/executeShellcodeWithCfg32函数的jit汇编代码中寻找答案。如下是executeShellcodeWithCfg32的部分汇编代码。代码中红框圈出的两句代码清楚地指明了`cls26.method_27`函数第二次调用时的函数指针寻址过程，很明显，这里用的是`MethodEnv._implGPR`。
![
](https://images.seebug.org/content/images/2018/09/86fcbdab-b23a-4ead-9a8e-0857c61acc3c.png-w331s)
至于cls27.method_27的地址，任意找一个存储其jit地址的地方读取即可(这里也可以采用HackingTeam的代码中读取jit函数指针的方法，如下)。所以一共可以有三种方式。Exp代码中的两种，加上HackingTeam中的一种。但写入地址是唯一的。通过上述做法，成功实现了对jit地址的偷天换日。
![
](https://images.seebug.org/content/images/2018/09/4d6ff52b-1a67-4003-a872-9f39b8f5e679.png-w331s)
在2016年的一篇总结Flash利用的[文献](https://www.blackhat.com/docs/us-16/materials/us-16-Oh-The-Art-of-Reverse-Engineering-Flash-Exploits.pdf
"文献")中，作者曾介绍过用覆写`MethodInfo._implGPR`的方式来劫持eip。两种方式十分类似，但并不完全相同。
##### 6.3 覆写jit栈上的返回地址
在第二次调用cls27.method_87时，攻击者传入的参数如下，其中的retn为上面寻找到的gadget03(addr_of_ret)。其余重要参数均在注释中进行说明。由于ba2_array的前12个字节分别为：第一阶段的shellcode地址(ba_array)，0x1000，0。这些恰好对应NtProtectVirtualMemory所需的前3个参数。
![
](https://images.seebug.org/content/images/2018/09/7be44a2d-2ba6-4772-9ca8-2a9bd6e7ccd6.png-w331s)
我们具体看一下`cls27.method_87`内部的逻辑。可以看到若第一参数为0x85868788，则递归调用自身20次，这是为了布局jit栈，方便后面覆盖eip：
![
](https://images.seebug.org/content/images/2018/09/0d9cee32-7c21-421a-92bc-9601306f5695.png-w331s)
在最后一次调用中，`cls27.method_87`会借助前面泄漏的jit栈地址来找到将要覆盖的eip所在的栈地址pRetAddr，并保存原始返回地址。
![
](https://images.seebug.org/content/images/2018/09/6e5c5897-2658-48db-a3d3-b3d0e3301198.png-w331s)
随后，为了在触发漏洞后不造成crash，攻击者又传入原始返回地址第二次修改1st
shellcode，将最后两个pattern处填写为正确的值，保证shellcode执行完后可以正常返回：
![
](https://images.seebug.org/content/images/2018/09/20da8402-d6a2-4721-a886-b09be6bfd0b1.png-w331s)
通过覆盖栈上的eip劫持控制流，成功避开了CFG的检测，从而Bypass CFG。
调试发现被覆盖的eip为jit栈上cls27.method_87递归调用自身20次中某次的返回地址
![
](https://images.seebug.org/content/images/2018/09/b5969c78-2544-4458-b05d-cdb85602ac2e.png-w331s)
最后，在递归调用某次返回的过程中，eip被成功劫持至第一阶段的ROP，随后的整个过程在windbg中观察如下：
![
](https://images.seebug.org/content/images/2018/09/e7b347d9-b354-4199-a0f1-7fb212145642.png-w331s)
![
](https://images.seebug.org/content/images/2018/09/92a95f09-9821-4612-90e7-b586cab240e7.png-w331s)
![
](https://images.seebug.org/content/images/2018/09/36e6515c-28f3-4c65-8314-1aec205dfe24.png-w331s)
2nd
shellcode执行完毕后，会继续从`class_27.method`的递归调用中返回。然后返回到flash的正常逻辑，此过程中不会造成crash和卡顿，整个利用方式非常稳定。
![
](https://images.seebug.org/content/images/2018/09/af3767b9-57dd-460c-85bf-e258d759c1f5.png-w331s)
#### 7\. 64位下的利用分析
原利用代码也支持64位环境。64位下的漏洞触发代码和32位下并没有什么不同，只在Bypass CFG部分有所差异。原利用代码中出现了两种Bypass
CFG的方法，下面分别介绍。
![
](https://images.seebug.org/content/images/2018/09/1432ed9f-0a16-4f6e-81eb-6e4b0d524975.png-w331s)
##### 7.1 分支1
如果当前64位环境下的ntdll.dll中可以找到如下gadget，则走分支1。从注释的汇编代码中可以清楚地看到这部分gadget的作用：弹出栈顶部的4个值给x64调用约定下作为前4个参数的寄存器并返回。
![
](https://images.seebug.org/content/images/2018/09/c7fa0a4b-1f81-4d31-a435-88e106e48191.png-w331s)
随后找到kerner32!VirtualProtect函数地址，并和传入的shellcode一起传入下图所示的函数，在curruptJitStack函数借助jit地址覆盖去替换返回地址(此过程和32位下非常相似)，并在jit函数返回时利用rop将shellcode所在地址设置为可执行。随后调用replaceJitApply64去调用执行shellcode。replaceJitApply64函数内借助了HackingTeam之前泄漏的方法去Bypass
CFG，即覆盖FunctionObject.Apply()方法的虚表地址。其中replaceJitApply64方法会在分支2中分析。
![
](https://images.seebug.org/content/images/2018/09/6fd2dc71-5d09-44c5-9223-5dea6c5eeca9.png-w331s)
##### 7.2 分支2
假如在当前进程的ntdll.dll没有找到分支1所需的gadget，则进入分支2，分支2采用了覆盖FunctionObject.Apply()方法的虚表地址的方法。
![
](https://images.seebug.org/content/images/2018/09/fab20631-c553-4768-b66b-2e12ffbb0020.png-w331s)
我们来详细看一下replaceJitApply64，如果熟悉之前HackingTeam的利用代码，则很容易理解下述代码：
![
](https://images.seebug.org/content/images/2018/09/4510aa65-efea-4a02-b25c-672c4cbe070a.png-w331s)
分支2会两次调用replaceJitApply64函数，第一次的目的是调用kernel32!VirtualProtect函数去设置shellcode的执行权限。函数内首先定义一个ByteArray对象ba，然后将shellcode放置在ba.array的首部。
随后将找到ExecMgr对象的虚表，将其虚表前的8个字节及虚表的前0xE4/8个虚函数地址拷贝到ba.array的len(shellcode)起始处(伪造虚表)。
![
](https://images.seebug.org/content/images/2018/09/3a3efca6-737d-4b1a-a6f7-456d03c441b4.png-w331s)
随后覆盖伪造的ExecMgr虚表+0x30处的8个字节，这正是apply方法对应的虚函数地址。随后覆写ExecMgr首部的虚表指针，设置相关寄存器的值和相关对象偏移处的值，以构造VirtualProtect函数所需的4个参数，随后调用apply方法以调用VirtualProtect，调用完将之前覆盖的值都恢复原来的值，从而不造成crash。对这部分细节的详细描述可以参考这篇博客。下图的注释也写得比较清楚。
调用完后返回到上级函数，随后再次调用replaceJitApply64方法，用shellcode+0x8的地址去替换apply方法对应的虚函数地址。从而执行shellcode。执行完shellcode后回到Flash代码，整个过程也不会造成crash。
### 总结
CVE-2018-5002是一个位于avm2解释器内的非常严重的漏洞，漏洞质量高，影响范围极为广泛。从原始flash的编译日志可以观察到，整套利用框架早在2018.2.7日就已经完成编译。该套利用代码通用性强，稳定性好，整体水平较高。
### References
* * *