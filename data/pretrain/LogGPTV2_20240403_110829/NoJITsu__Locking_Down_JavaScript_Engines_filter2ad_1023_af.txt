process. This approach was later adopted in Microsoft’s Chakra
engine [42]. However, Microsoft recently announced shifting
their focus and replacing Chakra with V8 as part of their Edge
browser [10]. NOJITSU does not require a re-design of the
JavaScript engine but separates different components inside the
same process to enforce ﬁne-grained page-based permissions.
With several code-injection and code-reuse mitigations
being adopted for JIT compilers, attackers turned their eyes
to data-only attacks. Theori et al. presented a data-only attack
that overwrites intermediate code structures in Chakra [62],
whereas Frassetto et al. presented a similar attack on Spider-
Monkey [27]. The proposed defense moved the JIT compiler
to an Intel SGX enclave, thus protecting its data structures
from corruption attacks. All of the above defenses focus on
mitigating attacks against
this
means they cannot prevent our attack which corrupts the
bytecode interpreter (see Section II). For certain architectures,
the JIT compiler. Crucially,
interpreter-based attacks were known to represent a fruitful
target of attacks for some time: Cama et al. [17] presented
an attack on the PS Vita that corrupted the virtual call table
of a JavaScript object in Webkit’s interpreter environment.
While their attack targets similar components to ours, these two
attacks are conceptually different. The PS Vita attack is based
on a well-known COOP-style attack which overwrites object’s
virtual function table (vtable) pointer with a pointer to a fake
vtable [51], and thus this attack would be prevented by existing
defenses against vtable corruption or vtable reuse attacks [14],
[24], [67]. In contrast, our attack deliberately overwrites the
internal data of a JavaScript object (not the vtable pointers of
any objects with virtual methods) to invoke a chosen function;
in fact, this manipulates how the bytecode interpreter interprets
the corrupted JavaScript object. In the technical aspects, their
attack targets Webkit/JavaScriptCore for the PS Vita (ARMv7)
and the context of the object being modiﬁed (via this) is
saved and restored using setjmp/longjmp to be able to
safely return to the JS environment. Our exploit is for Spi-
derMonkey (x86) and leverages the fact that the ﬁrst 32-byte
can be overwritten safely without restoring them. However,
there are many more components inside a modern JavaScript
engine that an attacker could exploit. As our evaluation shows,
NOJITSU is able to mitigate a vast number of different
memory-corruption attacks against each of the JIT engine’s
major components offering ﬁne-grained memory protection.
There are previous works to provide secure isolation inter-
faces using MPK. Libmpk [47] provides a secure software ab-
straction to improve security and resolve technical challenges
in using MPK. ERIM [63] utilizes MPK to isolate trusted
and untrusted memory regions so it can be used to imple-
ment memory isolation mechanisms, such as the safe store
in Code-Pointer Integrity (CPI) [34]. These approaches are
orthogonal to our approach and some of their techniques could
be combined with NOJITSU to further enhance performance
and security. Instead of using glibc’s MPK APIs to implement
our defense, using libmpk could further improve security and
performance of MPK operations. Also, ERIM’s technique to
detect PKRU-modiﬁcation patterns and to remove them via
binary rewriting could be integrated into our work to further
improve security.
VIII. CONCLUSION
JavaScript engines are essential for performance and secu-
rity of modern systems software, such as web browsers. Many
existing works demonstrate attacks against JavaScript engines
and also propose defenses to mitigate some of these attacks. In
this paper, we show that previously proposed mitigations are
unfortunately not sufﬁcient to protect JavaScript interpreters
against sophisticated adversaries. First, we demonstrate a new
attack that
leverages the interpreter, which was previously
assumed secure by design, to execute arbitrary shell com-
mands. Our attack works in the presence of all existing
defenses that we’re aware of. Second, we propose a novel
defense design, dubbed NOJITSU, to bring hardware-backed,
ﬁne-grained memory access protection to complex, real-world
JavaScript engines. As part of our security analysis we show
that this allows us to provide protection against a wide range
of possible attacks, including code-injection, code-reuse, and
data-only attacks. As we are able to demonstrate NOJITSU
successfully thwarts real-world attacks by minimizing memory
15
access permissions between different components towards the
strictly required minimum. Our prototype leverages automated
dynamic analysis to instrument and scale to complex code
bases such as SpiderMonkey, offering a moderate overhead
of only 5%.
ACKNOWLEDGMENT
This material is based upon work partially supported by the
Defense Advanced Research Projects Agency (DARPA) under
contracts FA8750-15-C-0124 and FA8750-15-C-0085, by the
United States Ofﬁce of Naval Research (ONR) under contract
N00014-17-1-2782, and by the National Science Foundation
under awards CNS-1619211 and CNS-1513837. Any opinions,
ﬁndings, and conclusions or recommendations expressed in
this material are those of the authors and do not necessarily
reﬂect the views of the Defense Advanced Research Projects
Agency (DARPA) or its Contracting Agents, the Ofﬁce of
Naval Research or its Contracting Agents, the National Science
Foundation, or any other agency of the U.S. Government.
The authors also gratefully acknowledge a gift from Oracle
Corporation.
REFERENCES
[1]
[2]
“CVE-2016-4622.” Jul.21 2016. [Online]. Available: https://nvd.nist.
gov/vuln/detail/CVE-2016-4622
“CVE-2019-5755.” Feb.19 2019. [Online]. Available: https://nvd.nist.
gov/vuln/detail/CVE-2019-5755
[3] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti, “Control-ﬂow
integrity,” in ACM Conference on Computer and Communications
Security (CCS), 2005.
[4] Apple, “Webkit,” https://webkit.org.
[5] ——,
“Longspider,”
PerformanceTests/LongSpider, 2015.
https://github.com/WebKit/webkit/tree/master/
[6] ARM, “Arm memory domains,” http://infocenter.arm.com/help/index.
jsp?topic=/com.arm.doc.ddi0211k/Babjdffh.html, 2015.
[7] M. Athanasakis, E. Athanasopoulos, M. Polychronakis, G. Portokalidis,
and S. Ioannidis, “The devil is in the constants: Bypassing defenses in
browser JIT engines,” in NDSS, 2015.
[8] M. Backes, T. Holz, B. Kollenda, P. Koppe, S. N¨urnberger, and
J. Pewny, “You can run but you can’t read: Preventing disclosure
exploits in executable code,” in ACM Conference on Computer and
Communications Security (CCS), 2014.
[9] M. Backes and S. N¨urnberger, “Oxymoron: Making ﬁne-grained mem-
ory randomization practical by allowing code sharing,” in USENIX
Security Symposium, 2014.
J. Belﬁore, “Microsoft edge: Making the web better through more open
source collaboration,” https://blogs.windows.com/windowsexperience/
2018/12/06/microsoft-edge-making-the-web-better-through-more-
open-source-collaboration/, 2018.
[10]
[11] S. Bhatkar and R. Sekar, “Data space randomization,” in Conference
on Detection of Intrusions and Malware & Vulnerability Assessment
(DIMVA), 2008.
bi0s, “Writeup for CVE-2019-11707,” https://blog.bi0s.in/2019/08/18/
Pwn/Browser-Exploitation/cve-2019-11707-writeup/, 2019.
[12]
[13] D. Blazakis, “Interpreter exploitation: Pointer inference and JIT spray-
ing,” BlackHat DC, 2010.
[14] D. Bounov, R. G. Kici, and S. Lerner, “Protecting c++ dynamic dispatch
through vtable interleaving.” in NDSS, 2016.
[15] K. Braden, L. Davi, C. Liebchen, A.-R. Sadeghi, S. Crane, M. Franz,
and P. Larsen, “Leakage-resilient
layout randomization for mobile
devices.” in Symposium on Network and Distributed System Security
(NDSS), 2016.
[16] C. Cadar, P. Akritidis, M. Costa, J.-P. Martin, and M. Castro, “Data ran-
domization,” Technical Report MSR-TR-2008-120, Microsoft Research,
Tech. Rep., 2008.
16
[17] A. Cama, “Ps vita level 1: Webkitties,” http://acez.re/ps-vita-level-1-
webkitties-3/, 2014.
[18] P. Chen, Y. Fang, B. Mao, and L. Xie, “JITDefender: A defense
against JIT spraying attacks,” in IFIP International Information Security
Conference (SEC), 2011.
[19] P. Chen, R. Wu, and B. Mao, “JITSafe: A framework against just-
in-time spraying attacks,” IET Information Security, vol. 7, no. 4, pp.
283–292, 2013.
[20] Y. Chen, S. Reymondjohnson, Z. Sun, and L. Lu, “Shreds: Fine-grained
execution units with private memory,” in 2016 IEEE Symposium on
Security and Privacy (SP).
IEEE, 2016, pp. 56–71.
[21] Y. Chen, D. Zhang, R. Wang, R. Qiao, A. M. Azab, L. Lu, H. Vi-
jayakumar, and W. Shen, “Norax: Enabling execute-only memory for
cots binaries on aarch64,” in IEEE Symposium on Security and Privacy
(S&P), 2017.
J. Corbet, “Intel memory protection keys,” https://lwn.net/Articles/
643797/, 2015.
[22]
[23] S. Crane, C. Liebchen, A. Homescu, L. Davi, P. Larsen, A.-R. Sadeghi,
S. Brunthaler, and M. Franz, “Readactor: Practical code randomization
resilient to memory disclosure,” in IEEE Symposium on Security and
Privacy (S&P), 2015.
[24] S. Crane, S. Volckaert, F. Schuster, C. Liebchen, P. Larsen, L. Davi,
A.-R. Sadeghi, T. Holz, B. D. Sutter, and M. Franz, “It’s a TRaP: Table
randomization and protection against function reuse attacks,” in ACM
Conference on Computer and Communications Security (CCS), 2015.
[25] L. Davi, D. Gens, C. Liebchen, and A.-R. Sadeghi, “Pt-rand: Practical
mitigation of data-only attacks against page tables.” in NDSS, 2017.
[26] W. De Groef, N. Nikiforakis, Y. Younan, and F. Piessens, “Jitsec: Just-
in-time security for code injection attacks,” in Benelux Workshop on
Information and System Security (WISSEC), 2010.
[27] T. Frassetto, D. Gens, C. Liebchen, and A.-R. Sadeghi, “JITGuard:
Hardening just-in-time compilers with sgx,” in ACM Conference on
Computer and Communications Security (CCS), 2017.
[28] R. Gawlik, P. Koppe, B. Kollenda, A. Pawlowski, B. Garmany, and
T. Holz, “Detile: Fine-grained information leak detection in script
engines,” in Conference on Detection of Intrusions and Malware &
Vulnerability Assessment (DIMVA), 2016.
J. Gionta, W. Enck, and P. Ning, “HideM: Protecting the contents of
userspace memory in the face of disclosure vulnerabilities,” in ACM
Conference on Data and Application Security and Privacy (CODASPY),
2015.
[29]
[30] Google, “V8,” https://v8.dev.
[31] D. Gruss, C. Maurice, and S. Mangard, “Rowhammer.js: A remote
software-induced fault attack in javascript,” in Conference on Detection
of Intrusions and Malware & Vulnerability Assessment (DIMVA), 2016.
[32] A. Homescu, S. Brunthaler, P. Larsen, and M. Franz, “Librando:
transparent code randomization for just-in-time compilers,” in ACM
Conference on Computer and Communications Security (CCS), 2013.
[33] P. Kocher, D. Genkin, D. Gruss, W. Haas, M. Hamburg, M. Lipp,
S. Mangard, T. Prescher, M. Schwarz, and Y. Yarom, “Spectre attacks:
Exploiting speculative execution,” in IEEE Symposium on Security and
Privacy (S&P), 2019.
[34] V. Kuznetsov, L. Szekeres, M. Payer, G. Candea, R. Sekar, and D. Song,
“Code-pointer integrity,” in USENIX Security Symposium, 2014.
[35] C. Lattner and V. Adve, “LLVM: A compilation framework for lifelong
program analysis & transformation,” in International Symposium on
Code Generation and Optimization (CGO), 2004.
[36] C. Lattner, A. Lenharth, and V. Adve, “Making context-sensitive points-
to analysis with heap cloning practical for the real world,” in ACM
SIGPLAN Conference on Programming Language Design and Imple-
mentation (PLDI), 2007.
[37] W. Lian, H. Shacham, and S. Savage, “Too lejit to quit: Extending jit
spraying to arm.” in Symposium on Network and Distributed System
Security (NDSS). Citeseer, 2015.
[38] M. Lipp, M. Schwarz, D. Gruss, T. Prescher, W. Haas, A. Fogh,
J. Horn, S. Mangard, P. Kocher, D. Genkin, Y. Yarom, and M. Hamburg,
“Meltdown: Reading kernel memory from user space,” in USENIX
Security Symposium, 2018.
[64]
J. Werner, G. Baltas, R. Dallara, N. Otterness, K. Z. Snow, F. Mon-
rose, and M. Polychronakis, “No-execute-after-read: Preventing code
disclosure in commodity software,” in ACM Symposium on Information,
Computer and Communications Security (ASIACCS), 2016.
[65] T. Zagallo, “A new bytecode format for javascriptcore,” https://webkit.
org/blog/9329/a-new-bytecode-format-for-javascriptcore/, 2019.
[66] P. Zero, “Virtually unlimited memory: Escaping the chrome sandbox,”
https://googleprojectzero.blogspot.com/2019/04/virtually-unlimited-
memory-escaping.htmll, 2019.
[67] C. Zhang, D. Song, S. A. Carr, M. Payer, T. Li, Y. Ding, and C. Song,
“Vtrust: Regaining trust on virtual calls.” in NDSS, 2016.
[39] G. Maisuradze, M. Backes, and C. Rossow, “What cannot be read,
cannot be leveraged? revisiting assumptions of JIT-ROP defenses,” in
USENIX Security Symposium, 2016.
[40] ——, “Dachshund: digging for and securing against (non-) blinded
constants in jit code,” in Symposium on Network and Distributed System
Security (NDSS), 2017.
[41] Microsoft, “Data execution prevention (DEP),” http://support.microsoft.
com/kb/875352/EN-US, 2006.
[42] Microsoft, “Out-of-process jit support,” https://github.com/Microsoft/
ChakraCore/pull/1561, 2016.
[43] D. l. Mingwei Zhang, Ravi Sahita, “eXecutable-Only-Memory-Switch
(XOM-Switch),” in Black Hat Asia Brieﬁngs (Black Hat Asia), 2018.
[44] Mozilla, “W xor x JIT-code enabled in ﬁrefox,” https://jandemooij.nl/
blog/2015/12/29/wx-jit-code-enabled-in-ﬁrefox, 2015.
[45] ——,
“Spidermonkey,”
prereleases/60/pre3, 2018.
https://ftp.mozilla.org/pub/spidermonkey/
[46] B. Niu and G. Tan, “RockJIT: Securing just-in-time compilation using
modular control-ﬂow integrity,” in ACM Conference on Computer and
Communications Security (CCS), 2014.
[47] S. Park, S. Lee, W. Xu, H. Moon, and T. Kim, “libmpk: Software
abstraction for intel memory protection keys,” in USENIX Annual
Technical Conference, 2019.
[48] PaX Team, “Address space layout randomization (aslr),” https://pax.
grsecurity.net/docs/aslr.txt, 2001.
saelo, “Exploiting logic bugs in javascript jit engines,” http://phrack.
org/papers/jit exploitation.html, 2019.
[49]
[50] P. D. Schubert, B. Hermann, and E. Bodden, “Phasar: An inter-
procedural static analysis framework for c/c++,” in International Con-
ference on Tools and Algorithms for the Construction and Analysis of
Systems (TACAS), 2019.
[51] F. Schuster, T. Tendyck, C. Liebchen, L. Davi, A.-R. Sadeghi, and
T. Holz, “Counterfeit object-oriented programming: On the difﬁculty of
preventing code reuse attacks in C++ applications,” in IEEE Symposium
on Security and Privacy (S&P), 2015.
[52] M. Seaborn and T. Dullien, “Exploiting the dram rowhammer bug to
gain kernel privileges,” in BlackHat USA, 2015.
[53] SecuriTeam,
“Cve-2018-12387,”
https://github.com/tunz/js-vuln-
db/blob/master/spidermonkey/CVE-2018-12387.md, 2018.
[54] H. Shacham, “The geometry of innocent ﬂesh on the bone: Return-
into-libc without function calls (on the x86),” in ACM Conference on
Computer and Communications Security (CCS), 2007.
[55] A. Sintsov, “Writing JIT-spray shellcode for fun and proﬁt,” 2010.
[56] K. Z. Snow, F. Monrose, L. Davi, A. Dmitrienko, C. Liebchen, and
A. Sadeghi, “Just-in-time code reuse: On the effectiveness of ﬁne-
grained address space layout randomization,” in IEEE Symposium on
Security and Privacy (S&P), 2013.
[57] K. Z. Snow, R. Rogowski, J. Werner, H. Koo, F. Monrose, and M. Poly-
chronakis, “Return to the zombie gadgets: Undermining destructive
code reads via code inference attacks,” in IEEE Symposium on Security
and Privacy (S&P), 2016.
[58] C. Song, C. Zhang, T. Wang, W. Lee, and D. Melski, “Exploiting and
protecting dynamic code generation,” in Symposium on Network and
Distributed System Security (NDSS), 2015.
[59] A.
Souchet,
“Introduction
exploitation,”
https://doar-e.github.io/blog/2018/11/19/introduction-to-spidermonkey-
exploitation/#force-the-jit-of-arbitrary-gadgets-bring-your-own-
gadgets, 2018.
spidermonkey
to
[60] Y. Sui and J. Xue, “Svf: interprocedural static value-ﬂow analysis in
llvm,” in International Conference on Compiler Construction (CC).
ACM, 2016.
[61] A. Tang, S. Sethumadhavan, and S. Stolfo, “Heisenbyte: Thwarting
memory disclosure attacks using destructive code reads,” in ACM
Conference on Computer and Communications Security (CCS), 2015.
[62] Theori, “Chakra JIT CFG bypass,” http://theori.io/research/chakra-jit-
cfg-bypass, 2016.
[63] A. Vahldiek-Oberwagner, E. Elnikety, N. O. Duarte, P. Druschel, and
D. Garg, “Erim: Secure, efﬁcient in-process isolation with memory
protection keys,” in USENIX Security Symposium, 2019.
17