title:Emerging Image Game CAPTCHAs for Resisting Automated and Human-Solver
Relay Attacks
author:Song Gao and
Manar Mohamed and
Nitesh Saxena and
Chengcui Zhang
Emerging Image Game CAPTCHAs for Resisting
Automated and Human-Solver Relay Attacks
Song Gao
Google
PI:EMAIL
Nitesh Saxena
University of Alabama at
Birmingham
PI:EMAIL
Manar Mohamed
University of Alabama at
Birmingham
PI:EMAIL
Chengcui Zhang
University of Alabama at
Birmingham
PI:EMAIL
ABSTRACT
CAPTCHAs represent an important pillar in the web security do-
main. Yet, current CAPTCHAs do not fully meet the web security
requirements. Many existing CAPTCHAs can be broken using au-
tomated attacks based on image processing and machine learning
techniques. Moreover, most existing CAPTCHAs are completely
vulnerable to human-solver relay attacks, whereby CAPTCHA
challenges are simply outsourced to a remote human solver.
In this paper, we introduce a new class of CAPTCHAs that can
not only resist automated attacks but can also make relay attacks
hard and detectable. These CAPTCHAs are carefully built on the
notions of dynamic cognitive games (DCG) and emerging images
(EI), present in the literature. While existing CAPTCHAs based on
the DCG notion alone (e.g., an object matching game embedded in
a clear background) are prone to automated attacks and those based
on the EI notion alone (e.g., moving text embedded in emerging
images) are prone to relay attacks, we show that a careful amalga-
mation of the two notions can resist both forms of attacks. Speciﬁ-
cally, we formalize, design and implement a concrete instantiation
of EI-DCG CAPTCHAs, and demonstrate its security with respect
to image processing and object tracking techniques as well as their
resistance to and detectability of relay attacks.
1.
INTRODUCTION
Almost every online service relies upon CAPTCHAs [4, 16] to
thwart various forms of online attacks and resource abuse. Un-
fortunately, many existing CAPTCHAs can be broken using au-
tomated attacks based on image processing and machine learning
techniques (see, e.g., [7, 9, 10, 13, 19, 20]). Moreover, most are vul-
nerable to human-solver relay attacks, whereby CAPTCHA chal-
lenges are simply outsourced to a remote human solver. These
attacks do not merely exist in theory – a myriad of CAPTCHA
solving services have already emerged in practice [14].
Our research is driven by the question: can a CAPTCHA scheme
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC ’15, December 07-11, 2015, Los Angeles, CA, USA
c(cid:2) 2015 ACM. ISBN 978-1-4503-3682-6/15/12. . . $15.00
DOI: http://dx.doi.org/10.1145/2818000.2818006
11
be designed that resists both automated attacks and relay attacks?
To answer this question, we turn to two categories of CAPTCHAs
from the current literature – Emerging Image (EI) CAPTCHAs
[17, 18] (known to be resistant to automated attacks) and Dynamic
Cognitive Game (DCG) CAPTCHAs [12,13] (known to be resistant
to relay attacks). However, no current scheme is known to be simul-
taneously resistant to both attacks. We aim to achieve this property
via a careful combination of the two categories of CAPTCHAs.
In the work of [11], the authors proposed emerging images of 3D
objects and explained the emergence as “the phenomenon by which
we perceive objects in an image not by recognizing the object parts,
but as a whole, all at once”. The authors indicate [11]: “humans
cannot instantaneously detect the object in such images, and can
probably recognize it only after several iterations that take into
account numerous relationships between hypothetical objects and
their context. The computational complexity of this human pro-
cessing is believed to be extremely high [15], leading us to hypoth-
esize that emergence images are hard for automatic algorithms to
segment, identify, and recognize”. They further go on to argue that:
“Taking into account the complexity of the task, and the lack of a
clear understanding of how humans solve the problem, it is highly
unlikely, if not impossible, that these types of tasks could be car-
ried out by bots in the near future”. A concrete instantiation of an
EI CAPTCHA developed in [17, 18] inherits the above-mentioned
characteristics, and is demonstrated to be secure against automated
attacks. However, such video-based EI CAPTCHAs are completely
vulnerable to relay attacks whereby the static video challenge can
be simply forwarded to the remote human-solver.
DCG CAPTCHA [12] is a CAPTCHA that challenges the user to
perform a game-like cognitive task interacting with a series of dy-
namic objects in a static scene. A simple form of DCG CAPTCHAs
requires the user to identify the answer object(s) from a set of mov-
ing objects, and drag-drop them to the corresponding target ob-
ject(s). Recently, a startup company, named “are you a human”, re-
leased a series of such DCG CAPTCHAs [1]. A DCG CAPTCHA
exhibits certain interesting properties. First, it is based on a cog-
nitive puzzle, which is easy for humans to understand, but may be
difﬁcult for a bot without enough clues. Second, the game-based
nature enhances the usability of CAPTCHA solving. Third, due to
the dynamic and interactive nature of the underlying game, relay-
ing the game to a remote solver might be challenging. As shown
in [12], however, DCG CAPTCHAs based on static background are
vulnerable to automated attacks. On the positive side, they were
shown to offer resistance to relay attacks [12, 13].
Our Contributions: We introduce a new class of CAPTCHAs
(called EI-DCG), carefully combining the EI and DCG notions, that
can not only resist automated attacks but also make relay attacks
hard and detectable. Our speciﬁc contributions are three-fold:
1. Design of an EI-DCG CAPTCHA (Section 3): We design and
implement a concrete instantiation of EI-DCG CAPTCHA
combining an EI CAPTCHA [17, 18] and a DCG CAPTCHA
[12]. Our design further incorporates various countermeasures,
including pseudo 3D object rotation, incomplete object con-
tour and tiling background, to reduce the information exposure
through the superimposition of consecutive frames, and a fast
frame rate to resist the relay attack based on streaming.
2. Resistance to Automated Attacks (Section 4): To evaluate the
robustness of EI-DCG against automated attacks, we design
an attack framework that guesses the centroids of moving ob-
jects based on local density variance, for example, by select-
ing density peaks and valleys as the object centroids, in the
binary mask of a frame, in the accumulation of three consec-
utive frames, and in the frequency map of the accumulation.
We demonstrate that EI-DCG can effectively resist this sophis-
ticated attack framework.
3. Usability and Resistance to Relay Attacks (Section 5):
We
conduct a usability study with Amazon Mechanical Turk
workers to evaluate the performance of legitimate users in
solving EI-DCG challenges. The results show that legitimate
users were able to solve the EI-DCG challenges with relatively
high accuracies suggesting an acceptable level of usability.
Then, we study EI-DCG streaming-based relay attack [13] with
human-solvers located in a foreign country (India) connected
via a low-speed high-latency channel, and with human-solvers
located in close proximity of the attacker (US) connected via
a high-speed low-latency channel. The study shows that the
solvers in India could only solve less than 1% of EI-DCG
challenges successfully, while the solvers in the US could
solve only around 13% of EI-DCG challenges.
Going further, we design a streaming-based relay attack detec-
tion mechanism, which utilizes the game-solving statistics and
machine learning classiﬁers in order to differentiate legitimate
users from human-solvers. The results show that it is possi-
ble to detect the streaming-based relay attack with around 65%
accuracy, making the overall detection rate to be around 95%.
2. BACKGROUND
A fundamental design objective of EI-DCG CAPTCHA is the
same as that of any CAPTCHA: a bot (automated computer pro-
gram) must only be able to solve CAPTCHA challenges with no
better than a negligible probability, and users should be able to
solve the challenges with high accuracy. Further, we add that EI-
DCG CAPTCHA should offer resilience to relay attacks. In order
to achieve these design objectives, we carefully integrate the DCG
CAPTCHA proposed in [12,13], which offers resilience to relay at-
tacks, with the EI CAPTCHA proposed in [17,18] (which we refer
to as EI-Nu, since it is a variant of the NuCaptcha [2] based on the
EI notion), which offers security against automated attacks. The
threat model for EI-DCG CAPTCHA therefore also naturally com-
bines the threat models of EI CAPTCHAs and DCG CAPTCHAs.
DCG CAPTCHA is a simple interactive CAPTCHA that consists
of several objects that moves randomly within a frame and some
static target objects (Figure 1b). DCG CAPTCHA challenges the
user to drag a subset of the moving objects (answer objects) to their
corresponding target objects. The authors in [12, 13] showed that
the dynamic nature of DCG as well as the requirement for mul-
(a)
(b)
Figure 1: A snapshot of EI-Nu CAPTCHA and DCG CAPTCHA utilized in our work:
(a) EI-Nu challenge codeword “7FX”. (b) DCG Shape game – blue region contains
the stationary target objects, the white region contains the moving possible answer
objects. Our resulting EI-DCG construction is a character matching game rendered on
top of emerging images (Figure 2(h) depicts a sample EI-DCG frame)
tiple interactions between the user and the CAPTCHA facilitate
resilience to relay attacks. To support their claims, the authors for-
malized two types of relay attacks:
1. Static Relay Attack: The attacker asynchronously sends static
snapshots of the game to the human solver. The human solver
has to identify the target objects and then recognize their cor-
responding answer objects in the subsequent frames as quickly
as possible given that the answer objects are moving. The bot
then clicks on the position speciﬁed by the human-solver as an
answer object, drags it and drops it to the pre-speciﬁed target
object.
2. Stream Relay Attack: The attacker utilizes a streaming soft-
ware, such as VNC, to stream the game frames from the at-
tacker to the human solver, and the game interactions from the
human-solver to the attacker.
The authors of [12,13] argued that the user performance in legit-
imate setting and in relay attack settings differs. While a legitimate
user plays a ﬂash-based game rendered locally by the client ma-
chine, a remote solver has to play a streamed game which may be
of degraded quality due to the latency of the communication chan-
nel between the attacker and the solver. This difference in the qual-
ity of the game, resulting in different game playing patterns, was
then utilized to detect the relay attack with high accuracy based on
machine learning techniques [13] .
EI-Nu CAPTCHA proposed in [17, 18] (Figure 1a) is based
on the emerging images notion presented in [11]. EI-Nu is a
video based CAPTCHA that contains several characters, collec-
tively called a codeword. It is designed such that a single snapshot
of the challenges does not provide enough clues about the code-
word in the challenge. However, the user can recognize the code-
word by watching multiple frames. The authors in [17, 18] argued
that EI-Nu is secure against automated attacks based on existing
computer vision and object tracking techniques.
3. DESIGN & IMPLEMENTATION
3.1 Design Overview
Our EI-DCG CAPTCHA has following unique features that dif-
ferentiate it from EI-based Nu CAPTCHA (EI-Nu) [18] and the
original EI-based videos [11].
1. Instead of using 2D objects as in EI-Nu CAPTCHA or real 3D
objects with shading as in EI videos, EI-DCG CAPTCHA uses
a pseudo 3D object (i.e., projecting a 2D object into 3D space,
applying necessary transformations, and projecting it back to
2D) to provide a simulated 3D view, and more importantly
to lower the possibility of recovering object contours through
accumulation of information from consecutive frames, i.e., to
protect against auto-decoding.
2. Hiding information in a single frame is more challenging in
EI-DCG CAPTCHA since there are usually more foreground
objects (e.g., ≥ 5) than there are in EI-Nu or EI videos. Most
EI-based videos in [11] contain one single object, making it rel-
12
each frame are rendered.
The purpose of using a higher frame rate (e.g., 40 fps) than usual
(e.g., 30 fps) is to increase the robustness against the relay attack.
The higher the frame rate, the less information about foreground
objects is revealed in one single frame, thus requiring more frames
to be read at a time in order to recognize the object. In case of
a relay attack, the communication delay between the bot and the
human solver’s machine could cause loss of synchronization and
thus lead to the failure to keep up with the required frame rate,
resulting in jittery motion in video play. Since human eyes rely on
continuous motion to recognize EI objects, this design choice will
make it even harder for remote human-solver to identify the object
and play the game effectively.
3.2 Creation of EI-based Foreground Mask
The use of hollow objects may be more secure than solid objects
in dynamic CAPTCHAs (e.g., EI-Nu and EI-DCG) because less
shape information of a hollow object could be revealed by superim-
position of consecutive frames than that for a solid object. Given an
input image with both solid moving objects and target objects, we
ﬁrst generate the foreground edge mask, and the normalized fore-
ground weight mask by computing the norm of derivatives. Both
masks are dilated with a ﬂat, disk-shaped structuring element in
order to enhance the low geometric details that could be later con-
verted into an emerging image. The edge mask (If g_e) indicates the
location of edge pixels, while the weight mask (If g_w) indicates
the relative importance of each edge pixel. We largely followed
the instructions of EI-Nu CAPTCHA [18] to create an EI-based
foreground mask, with additional countermeasures implemented to
deter potential computer-vision based attacks, as discussed below:
1. We generate a noise image Ibg with each pixel following a Gaus-
sian distribution. The median ﬁlter is used to blur the noise
image such that each pixel value is similar to its nearby pixels
(Figure 3(a)).
2. We manipulate the pixel values in both the foreground edge
mask If g_e and the noise image Ibg to preserve the temporal
continuity between two consecutive frames, without revealing
too much information about objects.
In the edge mask, a small portion (e.g., 10%) of the edge of
each object is intentionally hidden in the current frame (Figure
3(e)). A different hidden edge segment is selected in the next
frame. In this way, in one frame, no complete object contour
will be exposed, further lowering the possibility of reconstruct-
ing the contour through superimposition of consecutive frames.
Meanwhile, according to the law of closure in Gestalt theory [8],
humans can perceive objects as being whole even if they are not
complete. Speciﬁcally, when parts of a whole picture are miss-
ing, human perception ﬁlls in the visual gap. The weight values
in the weight mask If g_w corresponding to the hidden edge seg-
ment will also be hidden (Figure 3(b)).
We denote common pixels as the edge pixels shared between the
edge masks of two consecutive frames (previous and current),
and discrepant pixels as the edge pixels that only exist in the
current frame. The temporal continuity is preserved through al-
lowing a certain percentage of common pixels to be displayed
again in the current frame. Common pixels with non-negative
Ibg values and discrepant pixels with negative Ibg values ex-
change their values. Discrepant pixels are exchanged in the as-
cending order of their Ibg values until the largest negative pixel
is reached. A percentage parameter ρ (e.g., 0.7) is used to con-
trol the exchange percentage of common pixels so as to control
Figure 2: Generating an EI-DCG CAPTCHA frame (this and the other ﬁgures are best
viewed in color)
atively easy for a human viewer to focus on the object. Mean-
while, having very few moving objects also leaves adequate
room for making each object sufﬁciently large for easy recog-
nition by human eyes. However, it will be too risky for a DCG
CAPTCHA to use less than 5 objects (keeping in mind the ran-
dom guessing attacks). According to [13], if the locations of
moving objects are exposed (e.g., through multi-frame accumu-
lation), a random guess can achieve ∼13% success rate given
5 moving objects, 3 target objects, allowing ≤2 drag-and-drop
attempts per object. In an EI-DCG CAPTCHA frame, we cam-
ouﬂage moving objects in both a single frame and in the accu-
mulation of consecutive frames by tiling the background with
deformed and incomplete edge segments from foreground ob-
jects in a way similar to that of the EI videos [11].
3. Both EI-Nu and EI videos play a ﬁxed video clip repeatedly,
leading to a constant-time requirement for rendering. How-
ever, an EI-DCG CAPTCHA challenge demands real-time user
interaction with foreground objects, requiring each frame to be
generated on the ﬂy and incurring higher computation. We ap-
ply a divide-and-conquer strategy to prepare the information
needed for generating a frame in advance, and repeatedly use it
to efﬁciently create more new frames.
Creating an EI-DCG frame requires creating both the foreground
object mask as well as the background mask. For an input image
with both foreground objects and the target objects (Figure 2(a)),
the edge mask and the weight mask are computed (Figure 2(b)),
which are used to generate the EI visual effect (Figure 2(c)). Large