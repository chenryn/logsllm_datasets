in this receiver contain roughly 1600 lines of code, mostly
implementing signal processing operations.
Intercepting Patient Data. Analysis of our captures via
the reverse engineering process described in Section III-A
revealed several things. First, we were able to ﬁnd cleartext
representations of a wide range of what would have been
patient data in captured transmissions. (We experimented with
artiﬁcial patient data that we stored on the ICD; we did not
experiment with real patient data.) Even without knowledge
of the semantics of the packet format, these data are easily
extractable.
From this we conclude that this model of ICD programmer
and this model of ICD do not protect their transmissions cryp-
134
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:12:46 UTC from IEEE Xplore.  Restrictions apply. 
100200300400500600700800900−4−2024Phase of signal100200300400500600700800900−0.500.5Change in phase0510152000.51Decoded bitSample index of programmer symbol (2−FSK)100200300400500600700800900−4−2024Phase of signal100200300400500600700800900−4−2024Change in phase05010015000.51Decoded bitSample index of ICD signal (DBPSK)MagneticﬁeldintroducedACK...Auto-IDModel,Serial #InterrogatePatientdata...CommandResponseICDICDProgrammerTelemetry...tographically against disclosure when communicating with
each other. The personal data transmitted in cleartext include
the patient’s name, date of birth, medical ID number2, and
patient history. Equally easy to ﬁnd are the name and phone
number of the treating physician, the dates of ICD and lead
implantation (which may differ), the model, and the serial
number of the ICD and leads. This list is not exhaustive;
we observed other items of personally identifying data being
transmitted in cleartext. All this information is sent either in
the clear or in inverted form from the ICD to the programmer
during interrogation. Furthermore, for the ﬁelds we manipu-
lated via reprogramming attempts, these ﬁelds are sent in the
clear from the programmer to the ICD.
Intercepting Telemetry. Our ICD begins to broadcast teleme-
try data in cleartext as soon as a magnetic ﬁeld of sufﬁcient
strength is introduced. We activated telemetry with a magnet
we measured at 700 gauss by placing it within 5 cm of the
ICD. Telemetry transmissions, sent over the 175 kHz FM
band at a rate of 32 packets per second in our experiments,
contain representations of a patient’s electrocardiogram (EKG)
readings; these readings convey heart rate and other potentially
private information about the patient’s cardiac activity in real
time. We determined this information leak with a known-
plaintext attack on ICD telemetry in which we attached a
function generator to one of the ICD’s sensing ports with the
voltage set larger than that generated by a real heart. Feeding
the device a predictable signal (in place of a heartbeat), we
were then able to observe the same period in the payloads
of the ICD telemetry packets. Varying the period of the input
resulted in a change of the output frequency to match, and
in the absence of our input the telemetry data appeared as
aperiodic binary noise (values from 0x00 to 0x03).
C. Limitations
Because our goal was to assess disclosure of private data,
we did not fully reverse-engineer the communication protocol;
rather, we inspected captured trafﬁc and learned where to look
for certain cribs. In particular, we were not always able to
predict the value of a certain ﬁeld which we believed to be
a checksum. Another ﬁeld appeared to be a sequence number
that increased according to a rule we did not fully investigate.
As evidenced by the ICD programmer’s many (more than
10 screens) informational displays and data graphs, the ICD
transmits a large amount of information to the programmer.
We looked for cribs that we expected to see encoded under
fairly predictable schemes (e.g., ASCII). We did not attempt
to map all of the ﬁelds shown in the programmer’s menus to
their counterparts in the radio transmissions.
We do not provide an estimate of the upper bound on
communication distance, as this distance is sensitive to many
factors that are beyond the scope of this paper. Without an
ampliﬁer or any other specialized hardware, we were able to
2A medical ID number need not be globally unique; it is assigned according
to the policy of the hospital and may, in some cases, serve as an index into
a database of patient records.
eavesdrop on both the ICD and the ICD programmer from a
distance of several centimeters.
D. Auxiliary Information
This section provides supplementary information about our
equipment, our reverse engineering of the physical layer, and
our programming of software radios. The reader can view this
section as the appendix to Section III. Skipping this section
should not affect one’s understanding of the core contents of
this paper.
1) Equipment: Capturing RF packets requires equipment
capable of operation at the relevant frequency bands — in
our case, an antenna tuned to 175 kHz. We achieved our best
results with an antenna that we removed from an explanted
pacemaker and an antenna that we removed from a Medtronic
Carelink device (model 2490C). We also performed successful
eavesdropping experiments using a homemade, hand-wound,
ferrite core antenna and even a simple closed loop made by
joining the grabbers of an oscilloscope probe. We used the
same antennas for our replay attacks, sometimes in combi-
nation with an ampliﬁer; once again, we achieved our best
results with the antennas removed from the pacemaker and
the Carelink device.
The oscilloscope eavesdropping setup is trivial:
the os-
cilloscope samples the voltage on an attached eavesdrop-
ping antenna at regular time intervals, and we store these
hTime, Voltagei pairs to disk for later ofﬂine processing. The
oscilloscope proved very useful in our research; however, its
limited memory meant that we could record only about eight
seconds of RF communication at a time, which was insufﬁcient
for recording an entire conversation between our ICD and
programmer.
Because of the oscilloscope’s limited memory depth, we
also used a Universal Software Radio Peripheral (USRP) [5] in
our analysis. The USRP is a single board containing an FPGA
for fast signal processing and swappable radio interface cards
called daughterboards. We used a BasicRX daughterboard,
suitable for low-frequency communication, to interface with
our eavesdropping antenna. The USRP records signals as
complex I/Q samples, which are interconvertible with the
data format used by the oscilloscope. The daughterboards and
FPGA perform RF conversion in hardware and stream the
results to the PC. The USRP can sample at a rate of up to
8 MHz (32 MB/s) over a time range limited only by hard
drive capacity; we performed the majority of our experiments
using this setup with a sampling rate of 500 kHz.
2) Reverse-Engineering the Physical Layer: Two key pro-
cesses are used in transmission of data over RF: encoding
and modulation. Encoding is the process used to convert data
bits into radio symbols, and modulation determines how the
hardware varies the carrier radio wave to transmit those sym-
bols. In order to receive data, a receiver must ﬁrst demodulate
and then decode using the respective schemes. In RF systems
with asymmetric hardware constraints, such as with ICDs
and programmers, it is not uncommon for transmissions from
different devices to use different modulations and encodings.
135
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:12:46 UTC from IEEE Xplore.  Restrictions apply. 
We found that this is indeed the case for the programmer and
the ICD.
To collect RF data, we connected one of our antennas to
a recording device (oscilloscope or USRP), then placed the
antenna in close proximity to the ICD and programmer as they
communicated wirelessly. We determined that the modulation
scheme used by the programmer is binary frequency shift
keying (2-FSK). In 2-FSK, the programmer encodes symbols
by transmitting at a different frequency for each symbol state.
In this case, 150 kHz and 200 kHz respectively represent the
two possible states.
The ICD uses a different modulation scheme, differential
binary phase shift keying (DBPSK), in which the two possible
symbols are represented by transmission at the same frequency
but opposite phase. DBPSK is a common modulation scheme
for resource-constrained devices because it remains robust
when the transmitting oscillator is inaccurate. Such oscillator
variability is often observed in low-power devices that save
energy by partially or fully disabling RF circuitry when it
is not needed. One technique a device like an ICD may
employ is to turn off the synchronization circuitry that keeps
the RF carrier frequency accurate between transmissions. We
observed some evidence of this method in the ICD we studied.
Fig. 5 shows the symbols we obtained by demodulating
part of a packet from a programmer transmission in which
the programmer issues commands to the ICD to change the
stored patient name to AA AAAA. As can be seen in row (a),
different patterns of symbols can be used to express the same
pattern of bits. For example, 111111011 and 000000100
can both correspond to ASCII ‘A’. In determining the encoding
scheme, we experimented with several common binary line
code schemes (e.g., Manchester). By searching for the known
plaintext crib of the patient name, we ultimately determined
that both programmer and ICD transmissions are encoded in
NRZI (Non-Return-to-Zero Inverted) form with bit stufﬁng.
In NRZI encoding, zero bits are represented by no change in
symbol over one symbol period, and one bits are represented
by a change of symbol state. Bit stufﬁng is a common
technique (used in the USB standard, for example) in which
data containing the end-of-frame delimiter (EFD) is broken
up by the insertion of an extra bit to allow their transmission
without prematurely ending the frame.
3) Programming the Software Radio: Fig. 6 gives the block
diagram of our eavesdropper for ICD programmer transmis-
sions. Complex samples are streamed from the USRP with
BasicRX daughterboard to the PC via USB, then output by the
gr.usrp_source_c block. The frequency demodulation
block gr.blks.fm_demod_cf computes the frequency
shift of the incoming signal and ﬁnds the correct sampling in-
terval for each signal. These symbols, in the form of frequency
shifts, are mapped to bits by gr.binary_slicer_fb, and
the bits are NRZI-decoded using gr.diff_decode_bb.
This functionality is implemented entirely with existing blocks
built into the GNU Radio library. Finally, the resultant bits are
framed as packets by our imd.sink_175 block, which we
adapted from code in the GNU Radio library.
For active attacks, as for passive attacks, we employ sev-
eral of GNU Radio’s standard signal processing blocks. A
gr.file_source block streams complex samples from a
ﬁle on disk. These are processed by an imd_clean_fmmod
block of our own design (80 lines of C++) which separates
programmer transmissions from background noise and ICD
transmissions, then generates a clean FM-modulated signal
carrying the exact same data. The clean signal is ampliﬁed
in software and then streamed into usrp.sink_c, which
passes the signal to the USRP for transmission over the air.
IV. ACTIVE ATTACKS WITH A COMMODITY SOFTWARE
RADIO
We implemented several active attacks using the USRP and
a BasicTX daughterboard to transmit on the 175 kHz band.
Because the BasicTX card lacks built-in ampliﬁcation, we
also interposed a simple RF ampliﬁer circuit for many of our
replay attempts. With ampliﬁcation, we were able to mount
active attacks across an air gap of several centimeters; we did
not attempt further ampliﬁcation or longer distances. Without
ampliﬁcation, we successfully mounted selected replay attacks
with the antenna from a Carelink device within one cm of the
ICD. Additionally, during the course of our experiments, the
ICD entered its elective replacement indicator (ERI) mode,
which normally indicates to physicians that ICD replacement
should be scheduled. We successfully mounted all of our
replay attacks before and after the ICD entered this mode.
All of our active attacks fall into the category of replay
attacks: only simple waveform manipulation and repetition
— not packet analysis or reassembly — were necessary.
Creating a software radio programmer capable of emulating
all the functions of a commercial programmer would require
additional reverse engineering; we chose instead to focus on
attacks that are both signiﬁcant and illuminating (in particular,
those that violate conﬁdentiality, integrity, or availability) and
that pose minimal complexity to adversaries.
A. Replay Attacks
For simplicity, our replay attack technique is transmit-only:
we did not attempt to synchronize replayed programmer pack-
ets with the ICD’s response packets. The penalty we paid as a
result was that each successful replay attack was preceded by
zero or more unsuccessful attempts. It was generally sufﬁcient
to set the ICD to a known state, replay the desired transmission
in a loop for several minutes, and then re-evaluate the resulting
state of the ICD. This process allowed us to determine whether
one or more replays were successful but did not reveal the
precise number of successes. The transmissions we replayed
varied in length from one second to 37.7 seconds. We did not
attempt to optimize our attacks by removing silent periods
from the replayed traces. Each of our replay attacks targeted
only the ICD against which we recorded the original trace.
In order to rule out the possibility that proximity of the
magnet in the programming head is necessary for the ICD to
accept programming commands, we tested each replay attack
with and without a magnet near the ICD. In all cases, both
136
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:12:46 UTC from IEEE Xplore.  Restrictions apply. 
(a)
(b)
(c)
101010100000001|...|000000100|111111011|000000100|111111011|...|1111111
_11111110000001|...|100000x10|100000x10|100000x10|100000x10|...|1000000
--EFD--
------SFD------
A
A
A
A
Fig. 5. Part of a sample programmer transmission containing the crib text AAAA. Row (a) represents the demodulated bits, (b) are the NRZI-decoded bits,
and (c) are the bits rendered as ASCII. The Start-of-Frame and End-of-Frame Delimiters pictured mark the beginning and end of each packet.
Fig. 6. Architecture of a GNU Radio-based eavesdropper. The purpose and Python class name of each signal processing block is included, as well as the
format of the data it processes. All blocks but the last are from GNU Radio’s built-in block library. We adapted the last block, our imd.sink_175 packet
framer, from built-in GNU Radio blocks.
scenarios were successful. We conducted all of our active
attacks with our commercial programmer turned off.
Triggering ICD identiﬁcation. We performed several exper-
iments in which we replayed a 1.5-second auto-identiﬁcation
trace we had recorded from the programmer. Each of these
transmissions resulted in an identical response from the ICD,
disclosing the ICD’s presence and several details about the
device such as its model and serial number. As the auto-
identiﬁcation command is the ﬁrst set of packets sent by a
programmer in a normal session, our experiments suggest that
no prior synchronization is required for a successful exchange
as long as the programmer transmits during ICD radio silence.
Disclosing patient data. After the auto-identiﬁcation step, the
programmer asks the ICD for the rest of the information stored
on it, including patient data. We used GNU Radio to replay
a 26-second capture containing both an auto-identiﬁcation
command and the interrogation command that elicits the more
detailed data. Using the demodulation and framing code de-
scribed in Section III-A, we conﬁrmed that the ICD responded
to our interrogation command with the same response it gave
to the ICD programmer’s original command. This response
includes personal information such as patient name, diagnosis,
and many other details.
Disclosing cardiac data. We observed that certain conditions
cause the ICD to send periodic telemetry transmissions at a
rate of 32 packets per second. If a sufﬁciently strong magnet
is near the ICD, the ICD appears to transmit telemetry indef-
initely. When the strong magnet is taken away (as when the
programming head is removed from the patient’s skin), these
transmissions stop after 10 seconds. However, introducing a
magnet is not the only way to elicit telemetry transmissions
from the ICD. We observed that replaying certain sections
of recorded conversations, in particular the beginning of the
interrogation command sequence, caused the ICD to emit
packets for several seconds after the end of the replay. We
hypothesize that an attacker could replay these commands in
a tight loop to elicit continual telemetry from the ICD.
Changing patient name. Medical personnel can learn a
patient’s name by interrogating an ICD. We used GNU Radio