database EDB from the server, and outputs the search result
R matching q; Update takes the secret key K, the state σ,
an input in and the associated operation op from the client, as
well as the database EDB from the server, where op is either
addition add or deletion del and in consists of a document
identiﬁer ind and a set of keywords w. Then it inserts in to
or removes in from EDB, depending on op. Notice that in
this work, we only consider search queries containing a single
keyword w (i.e., q = w).
A DSSE scheme Σ = (Setup, Search, Update) is correct
if the Search protocol returns correct results for every query.
For a formal deﬁnition, we refer the readers to [12].
SECURITY. The security of DSSE is parameterized by a state-
ful leakage function L = (LStp,LSrch,LUpdt) that captures the
revealed information to an adversary A during the execution of
the real scheme. In particular, LStp,LSrch and LUpdt correspond
to the information leaked during Setup, Search and Update,
respectively. Informally, the security ensures that A cannot
learn more information beyond what can be referred from L.
A formal security as deﬁned in [12], [9] is captured
by a real experiment REALΣA(λ) and an ideal experiment
IDEALΣA,S,L(λ):
REALΣA(λ): A chooses a database DB. The experiment runs
Setup(1λ, DB) and returns EDB. Then A adaptively queries
search (resp. update) on q (resp., (op,
in)). In response,
the experiment runs Search(q) (resp., Update(op, in)) and
returns the transcript of each operation. At last, A outputs a
bit b.
IDEALΣA,S,L(λ): A chooses a DB. The experiment returns
EDB simulated by S(LStp(DB)). Then A adaptively queries
search (resp., update) on q (resp., (op, in)), and receives the
transcript simulated by S(LSrch(q)) (resp., S(LUpdt(op, in))).
Finally, A outputs a bit b.
Now we continue to recall forward and backward privacy
of DSSE, initially formalized in [7], [9]. Informally, forward
privacy ensures that each update leaks no information about
the keyword contained in the keyword/document pair to be
updated, while backward privacy means that when a key-
word/document pair (w, ind) is added to and then deleted
from the database, subsequent search on w does not reveal
ind. As noted in [9], ind must be revealed if a search on w
is performed after inserting (w, ind) but before removing it,
so we only consider the case that no search happens between
the addition and the deletion of the same keyword/document
pairs. Ideally, a backward-private SSE should leak nothing
about the deletions, and at least not reveal (the identiﬁers
of) the deleted documents [51]. In terms of different levels
of leakage, three types of backward privacy from Type-I to
Type-III were introduced in [9]. They are deﬁned through the
above experiments by further imposing certain constraints on
L. Before proceeding, we ﬁrst revisit the relevant functions
needed for the formal deﬁnition of backward privacy. We
follow the notation of [9] with minor modiﬁcations.
The leakage function L records a list of queries issued
so far, i.e., Q = {(u, w) or (u, op, in)}. Among the queries,
(u, w) is a search query performed on timestamp u, which
starts at 0 and increases with the coming query, and (u, op, in)
is an update query where op ∈ {add, del} and in is in the form
of (w, ind) for single-keyword search. With query list Q, the
relevant functions are deﬁned as follows.
sp(w) is the search pattern over keyword w and consists
of timestamps of all search queries on w. It describes which
search queries are on the same keyword, formally deﬁned as
sp(w) = {u : (u, w) ∈ Q}.
TimeDB(w) is the extended access pattern 1, which con-
sists of both the non-deleted documents matching w and the
timestamps of inserting them to the database. Formally, it is
TimeDB(w) =(cid:8)(u, ind) :(cid:0)u, add, (w, ind)(cid:1) ∈ Q
and ∀u(cid:48),(cid:0)u(cid:48), del, (w, ind)(cid:1) /∈ Q(cid:9) .
UpHist(w) is the history of updates on keyword w and
consists of all update queries on w. Formally, it is deﬁned as
UpHist(w) = {(u, op, ind) : (u, op, (w, ind) ∈ Q}.
Updates(w) is the list of timestamp and operation pairs
of updates on keyword w. Formally, it is deﬁned as
Updates(w) = {(u, op) : (u, op, (w, ind) ∈ Q}.
We remark that the “Updates(w)” here is slightly different
from [9]. Here, it additionally contains the operation type op
rather than only the corresponding timestamps. Actually, the
“UpTime(w)” deﬁned below is the “Updates(w)” in [9].
UpTime(w) is the update pattern over keyword w and
consists of the timestamps of updates on w. Formally, it is
UpTime(w) = {u : (u, add, (w, ind))
or (u, del, (w, ind)) ∈ Q} .
documents (matching w) that were deleted later. Formally,
DelTime(w) is the list of timestamps of the inserted
DelTime(w) =(cid:8)u : ∃u(cid:48), ind s.t.(cid:0)u(cid:48), del, (w, ind)(cid:1) ∈ Q
and(cid:0)u, add, (w, ind)(cid:1) ∈ Q(cid:9) .
Note that this is a new function we introduce, which is part
of the “Updates(w)” deﬁned above and will be used for the
security analysis of our scheme.
DelHist(w) is the deletion history of w and consists of both
the timestamp of each deletion operation and the timestamp of
the inserted entry it removes. Formally, it is deﬁned as
DelHist(w) =(cid:8)(uadd, udel) : ∃ ind s.t.(cid:0)udel, del,
(w, ind)(cid:1) ∈ Q and(cid:0)uadd, add, (w, ind)(cid:1) ∈ Q(cid:9) .
In contrast
which deletion removes which addition.
to DelTime(w), DelHist(w) additionally leaks
With these functions, now we are ready to formally deﬁne
the notions of forward and backward privacy. We follow the
deﬁnitions of [9], [15], [52], except that the search pattern
sp(w) (a common leakage in most existing SSE schemes, e.g.,
[43], [13], [9], [52]) is also included in the leakage function
1The regular access/result pattern [13] DB(w) can be computed as
DB(w) = {ind : ∃u s.t. (u, ind) ∈ TimeDB(w)}.
5
LSrch in our deﬁnitions. Notice that, although sp(w) is not
considered in the security notions of [9], [15], [52], it is in
fact necessary for showing the security of their schemes.
Deﬁnition 3 (Forward Privacy [7], [9]). A DSSE scheme Σ =
(Setup, Search, Update) is L-adaptively forward-private if
for leakage function L = (LStp,LSrch,LUpdt) and all efﬁcient
A making at most q(λ) queries, there exists a PPT algorithm
S such that
(cid:12)(cid:12) Pr[REALΣA(λ) = 1] − Pr[IDEALΣA,S,L(λ) = 1](cid:12)(cid:12) ≤ ν(λ),
and the update leakage function LUpdt can be written as
LUpdt(op, (w, ind)) = L(cid:48)(op, ind),
where ν(λ) is negligible in λ and L(cid:48) is stateless.
Deﬁnition 4 (Backward Privacy [9]). A DSSE scheme
Σ = (Setup, Search, Update) is L-adaptively Type-I/II/III
-backward-private if for leakage function L = (LStp,LSrch,
LUpdt) and all PPT adversary A making at most q(λ) queries,
there exists a PPT algorithm S such that
(cid:12)(cid:12) Pr[REALΣA(λ) = 1] − Pr[IDEALΣA,S,L(λ) = 1](cid:12)(cid:12) ≤ ν(λ),
and the search and update leakage functions LSrch and LUpdt
can be written as the following types, respectively:
Type-I : LUpdt(op, (w, ind)) = L(cid:48)(op) and
LSrch(w) = L(cid:48)(cid:48)(sp(w), TimeDB(w), uw),
Type-II : LUpdt(op, (w, ind)) = L(cid:48)(op, w) and
LSrch(w) = L(cid:48)(cid:48)(sp(w), TimeDB(w), UpTime(w)),
Type-III : LUpdt(op, (w, ind)) = L(cid:48)(op, w) and
LSrch(w) = L(cid:48)(cid:48)(sp(w), TimeDB(w), DelHist(w)),
where uw is the total number of updates on w, ν(λ) is
negligible and L(cid:48), L(cid:48)(cid:48) are stateless.
It can be seen that the three types of backward privacy
from Type-I to Type-III are ordered from the most to the least
secure. In this work, we are concerned with Type-II-backward
privacy. According to the deﬁnition, a Type-II-backward-
private SSE scheme may leak sp(w), TimeDB(w), and
Updates(w) that can be derived from op and UpTime(w).
Actually, our Type-II-backward-private SSE scheme only
leaks sp(w), TimeDB(w), and DelTime(w) which is part of
Updates(w). In contrast, the Type-III-backward-private SSE
scheme additionally leaks DelHist(w) that captures which
deletion cancels which addition.
III. SYMMETRIC REVOCABLE ENCRYPTION
In this section, we introduce a new cryptographic primitive,
named Symmetric Revocable Encryption (SRE). Roughly, it
resembles (a variant of) Symmetric Puncturable Encryption
(SPE) [52], but in fact they are distinct in several aspects.
More details about their similarities and differences will be
discussed later. Next we will ﬁrst formalize the syntax and
security of SRE, and then propose a generic construction with
a desirable feature for our application.
A. Syntax of SRE
An SRE scheme SRE = (SRE.KGen, SRE.Enc,
SRE.KRev, SRE.Dec) with key space MSK, message space
M and tag space T includes four polynomial-time algorithms:
SRE.KGen(1λ): It takes a security parameter λ as input
and outputs a system secret key msk ∈ MSK.
SRE.Enc(msk, m, T ): It takes as input a system secret
key msk and a message m ∈ M with a list of tags T ⊆ T ,
and outputs a ciphertext ct for m under tags T .
SRE.KRev(msk, R): It takes as input a system secret key
msk and a revocation list R ⊆ T , and outputs a revoked secret
key skR, which can be used to decrypt only the ciphertext that
has no tag belonging to R.
SRE.Dec(skR, ct, T ): It takes as input a revoked secret key
skR and a ciphertext ct encrypted under tags T , and outputs
the message m or a failure symbol ⊥.
Deﬁnition 5 (Correctness). For all security parameter λ ∈ N,
message m ∈ M, tag list T ⊆ T and revocation list R ⊆ T
s.t. R ∩ T = ∅, the probability
SRE.Dec(skR, ct, T ) = m :
Pr
msk ← SRE.KGen(1λ)
ct ← SRE.Enc(msk, m, T )
skR ← SRE.KRev(msk, R)
is at least 1 − ν(λ). That is, the correctness error is upper-
bounded by a possibly non-negligible function ν(·).
Notice that, the regular deﬁnition of correctness requires
that a ciphertext under tag list T can be decrypted (with
an overwhelming probability) by a revoked secret key on
revocation list R only if R ∩ T = ∅. Here, we deﬁne it in
a relaxed manner, allowing for a non-negligible correctness
error, which is sufﬁcient for our applications.
B. Security of SRE
SRE,A
The semantic security of SRE is deﬁned via an IND-REV-
CPA experiment, denoted by ExpIND-REV-CPA
(λ). In the
experiment, the adversary A is given access to an Encryption
oracle, by which A can get the ciphertext of any message under
a list of tags, and a Key Revocation oracle, by which A can
obtain a revoked secret key for any revocation list chosen by
herself. In particular, the experiment is described as follows:
the experiment runs
Setup: On input a parameter λ,
msk ← SRE.KGen(1λ) and initializes an empty set Q.
Phase 1: A can adaptively issue the following queries
•
Encryption(m, T ): On input a message m and a
list T of attached tags, the experiment runs ct ←
SRE.Enc(msk, m, T ) and returns the ciphertext ct.
• Key Revocation(R): On input a revocation list R, the
experiment runs skR ← SRE.KRev(msk, R). It then
returns skR and adds R to Q.
Challenge: On input messages m0, m1 ∈ M along with
tag list T ∗ ⊆ T , the experiment rejects the query if there
exists R ∈ Q such that T ∗ ∩ R = ∅. Otherwise, it chooses
γ $←− {0, 1} and returns ct∗ ← SRE.Enc(msk, mγ, T ∗).
Phase 2: This is identical to Phase 1 except A is disallowed
to ask for any key revocation query R s.t. R ∩ T ∗ = ∅.
Guess: A outputs γ(cid:48) and the experiment returns 1 if γ(cid:48) = γ.
6
Deﬁnition 6 (Adaptive Security). An SRE scheme is IND-
REV-CPA secure if for all λ ∈ N and PPT adversary A, the
advantage of A winning in the experiment
AdvIND-REV-CPA
(λ) = 1] − 1/2|
is at most ν(λ), where the probability is taken over the coins
of the experiment and ν(λ) is negligible.
(λ) = | Pr[ExpIND-REV-CPA
SRE,A
SRE,A
SRE,A
Similarly, we can deﬁne selective security of SRE by an
experiment ExpIND-sREV-CPA
(λ), which is identical to above
experiment except T ∗ is submitted before the Setup phase.
Deﬁnition 7 (Selective Security). An SRE scheme is IND-
sREV-CPA secure if for all λ ∈ N and PPT adversary A, the
advantage of A winning in the experiment
AdvIND-sREV-CPA
(λ) = 1]−1/2|
is at most ν(λ), where the probability is taken over the coins
of the experiment and ν(λ) is negligible.
(λ) = | Pr[ExpIND-sREV-CPA
SRE,A
SRE,A
Now we complete the description of the syntax and security
of SRE. Before going ahead, we ﬁrst clarify the similarities
and differences between SRE and SPE [52]. In general, SPE
focuses on achieving forward security by updating the secret
key gradually, while SRE emphasizes the functionality of
revoking the decryption capability of the master secret key.
Although both of them can be used to revoke a list of tags,
SRE is more relaxed than SPE and provides a different type
of security. In particular, a set of tags are revoked separately
in SPE, by repeatedly running the puncture algorithm of SPE
(i.e., SKi ← Pun(SKi−1, ti) 2 where SK0 = msk, following
the notation of [52]), while they may be revoked in an arbitrary
manner in SRE. Therefore, SPE can be thought of as a speciﬁc
case of SRE from the perspective of functionality.
At the ﬁrst glance, it seems that an SRE scheme can be
constructed in a trivial and black-box way from any SPE
scheme by repeatedly invoking the puncture algorithm of SPE,
as indicated above. That is, the algorithm SRE.KRev(msk, R)
generates a revoked secret key skR as: Given a master secret
key msk and a list of tags, say R = {t1, t2, . . . , tτ},
it
recursively calls SKi ← Pun(SKi−1, ti) from i = 1 to τ, and
ﬁnally sets skR = SKτ . As demonstrated below, however, this
does not hold as the security of SPE cannot imply that of SRE.
In particular, we present a counter-example that is derived from
a secure SPE but cannot satisfy the security of SRE.
Let SPE = (SPE.Setup, SPE.Enc, SPE.Pun, SPE.Dec)
be a semantically secure SPE scheme supporting one tag
per message, as shown in [52]. Then we construct a new
SPE scheme SPE(cid:48) = (SPE(cid:48).Setup, SPE(cid:48).Enc, SPE(cid:48).Pun,
SPE(cid:48).Dec) that supports two tags per message, and show
that SPE(cid:48) is secure but the SRE scheme derived from SPE(cid:48)
by following the above way is not. Speciﬁcally, the SPE(cid:48) is
constructed as follows: