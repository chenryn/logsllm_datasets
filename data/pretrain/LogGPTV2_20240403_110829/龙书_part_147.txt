### 并行性和局部性优化

#### 代码修改示例
```c
for (i = 0; i < 3; i++) {
    for (j = 0; j < 6; j += 2) {
        // 预取数据的代码
    }
}
```
将每个循环拆分为两个循环，可以提高多维数组的访问效率。这种技术被称为条状挖掘，类似于分块技术，但只分解部分嵌套循环。通过这种方式，程序的局部性得到增强，使得处理单个块时所需的数据都存储在高速缓存中。

#### 分块技术
分块技术将每个嵌套循环分割为两个循环。其优点在于，可以在多维数组的小段（块）上进行计算，每次处理一个块。这有助于提高程序的局部性，使数据保持在高速缓存中。

#### 时间分划约束
为了流水线化并行程序，需要求解时间分划约束。Farkas 引理提供了一种有效的求解方法，能够找出带有数组访问的时间分划映射。如果两个数组访问涉及同一元素，则第一个访问必须分配到不晚于第二个访问的流水线阶段。

#### 流水线化
流水线化是一种并行化技术，允许处理器共享数据。通过在循环之间插入同步操作，可以使各个循环单独并行化，从而实现更多的并行性。例如，在相邻的循环嵌套结构之间可能存在数据依赖关系，但通过同步操作，可以独立并行化这些循环。

#### 基本代码转换
用于并行化具有仿射数组访问的程序的转换是七个基本转换的组合，包括：融合、裂变、重新索引（给循环下标加上常量）、比例变换（将循环下标乘以常量）、反置（倒转循环顺序）、交换（改变循环顺序）和倾斜（改写循环迭代方向）。

#### 空间分划约束
为了并行化循环嵌套结构，需要将循环的迭代映射到处理器空间。该空间可能具有一个或多个维度。空间分划约束要求，如果不同迭代中的两个访问之间存在数据依赖关系，它们必须被映射到同一个处理器上。只有当从迭代到处理器的映射是仿射的情况下，才能使用矩阵-向量形式表示这个问题。

#### 数据依赖关系与丢番图方程
确定两个数组访问是否存在数据依赖关系，需要求解丢番图方程。关键技术是计算各变量系数的最大公约数（GCD）。只有当最大公约数能整除常量项时，方程才可能有整数解。此外，还需要考虑每个访问是否跳过某些元素，以确保它们确实访问了公共元素。

#### 局部性与高速缓存利用率
描述数组访问的矩阵可以给出关于该访问的重要信息。如果矩阵的秩达到最大值（即矩阵的行数和列数的最小值），则说明该访问具有良好的局部性，即单个高速缓存线中的元素几乎同时被访问。

---

### 第11章参考文献
- [1] Motzkin 消除算法［7］和 Shostak 的算法［25］。
- [2] Maydan、Hennessy、Lam[18］和 Pugh 及 Wonnacott［23］的工作。这些分析技术使用了 Fourier 形式，并证明这个问题在实践中可以精确高效地求解。
- [3] 数据依赖关系分析基于 Maydan、Hennessy 和 Lam［18］的整数线性规划测试。
- [4] Porterfield 提出了第一个预取数据的编译器算法。Mowry、Lam 和 Gupta[20］应用复用分析来使预取数据的开销降到最小，并在整体上提高了性能。
- [5] Lamport[13］首先把循环建模为选代空间，并使用混合规划技术（仿射转换的一个特殊情况）。
- [6] McKellar 和 Coffman[19］最先讨论了使用分块技术来提高数据局部性的理论。

更多详细内容，请参阅 Hennessy 和 Patlerson 的教科书[9]。

---

### 第12章 过程间分析

#### 调用图
调用图是一个节点和边的集合，描述了哪个过程调用了哪个过程。具体定义如下：
1. 对程序中的每个过程都有一个结点。
2. 对于每个调用点（call site）都有一个结点。所谓调用点就是程序中调用某个过程的位置。
3. 如果调用点 c 调用了过程 p，就存在一条从 c 的结点到 p 的结点的边。

#### 上下文相关分析
上下文相关分析不仅考虑当前的程序点，还考虑当前栈中的活动记录序列。这对于区分程序中的不同“位置”非常有用。

#### 过程内联
过程内联是一种相对简单但有用的技术，即将一个过程调用替换为被调用过程的过程体。但在替换时需要考虑参数传递和返回值，因此需要进行适当修改。只有当我们知道这个过程调用的目标后才可以应用这个方法。

#### 指针别名分析
指针别名分析是所有过程间分析的关键之处。我们描述了一个用于指针别名分析的算法，并说明如何使用二分决策图（Binary Decision Diagram, BDD）来高效地实现这个算法。我们首先给出了 Datalog 的描述，以隐藏高效指针分析技术的复杂性。

#### 过程间分析的重要性
大部分编译器优化技术都是每次在一个过程中执行的，称为过程内分析。然而，有些优化问题无法仅通过过程内分析解决，需要进行过程间分析。过程间分析处理整个程序，将信息从调用者传送到被调用者，或者反向传送。

---

### 示例
函数 `f` 在不同上下文中分别返回常量 1 和 244。因此，在各个上下文中函数 `f` 的实际参数都是常量，但具体值要根据上下文而定。