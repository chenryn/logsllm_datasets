3.2 Watermark composition
Figure 1: Generating a paragraph permutation using AES
{ρx1!
(θ1)K (mod(x1!)),1
(θ1)K (mod(x1!)),x1
, . . . , ρx1!
{ρx2!
(θ2)K (mod(x2!)),1
xy !
(θy )K (mod(xy!)),1
{ρ
, . . . , ρx2!
(θ2)K (mod(x2!)),x2
xy!
(θy )K (mod(xy !)),xy
, . . . , ρ
Table 2: New sequence of sentences that will be used to embed the watermark
}, . . ., = {t(2,1), t(2,2), . . . , t(2,x2)}, . . . ,
{t(1,1), t(1,2), . . . , t(1,x1)},
{t(y,1), t(y,2), . . . , t(y,xy)}
},
}
Table 3: Comparison of empirical results with theoretical values
Number of elements
Keys searched
Empirical result Theoretical Value
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
1.88
4.44
7.33
16.16
64.27
145.22
516.55
1140.77
3381.77
6240.94
15307.72
37694.88
108803.61
433622.72
1097114.16
2004049
6203832.22
16376576.78
2
4.5
10.6667
26.04171
64.8
163.401
416.102
1067.63
2755.73
7147.66
18613.9
48638.8
127463
334865
881658
2330000
6150000
16300000
0
Let the codeword for the user for which the document is
being watermarked be Wu = {w1, w2, . . . , wLd(n−1)}. Boneh-
code enables us to identify colluding parties of at most c =
n/2 users with a probability of 1 − . For further details
about these collusion-secure codes, please refer to [3].
Now the watermark SP rp(Wp||SP ru (Wu)) satisﬁes all three
requirements mentioned at the beginning of the section and
can be embedded.
3.3 Watermark embedding step
Before proceeding to the watermark embedding algorithm,
we describe how watermark bits will be physically carried in
the document. Let the number of words in a sentence si be
di and the binary representation of di be di,1, di,2, . . . , di,z
such that di,1 is the LSB. We utilize di,1 and d1,2 to carry
the watermark. If we want to embed two bits w1 and w2 in
a sentence si, then
1. Set di,1 = w1, di,2 = w2. Let the new value of d be d.
2. Transform the sentence such that it contains d number
of words using one or more of the following (and other)
transformations -
(a) Change of voice from active to passive and vice
versa. Example, “The cops rewarded Anjali” ↔
“Anjali was rewarded by the cops”.
(b) Addition/deletion of an adjunct to/from the sen-
tence. Example, “The company praised Gunjan”
↔ “It was the company which praised Gunjan”.
(c) Addition/Removal of optional articles. Example,
“Maya was cutting up the trees for Christmas” ↔
“Maya was cutting up trees for Christmas”.
(d) Grouping of multiple subjects. Example, “Ravi
married Tina” ↔ “Ravi and Tina got married”.
(e) Addition/removal of coordinate conjunctions. Ex-
ample, “Mohit started to sing and Gaurav be-
gan playing the guitar” ↔ “Mohit started to sing,
Gaurav began playing the guitar”.
(f) Introducing, or eliminating “then” from the if ...
then pair of correlative conjunctions. Example
“If this is what you want, then this is what you’ll
get” ↔ “If this is what you want, this is what
you’ll get”.
Given the information on how we are going to store wa-
termarking bits in the document, the watermark embedding
algorithm is given below -
1. All the sentences and sentences are marked as “un-
used”.
2. Choose the paragraphs corresponding to the next τ
“unused” indices from the new paragraph sequence.
(Go to start of sequence if end of sequence reached).
3. Take the ﬁrst available “unused” sentences (using new
sentence sequence) from the τ paragraphs and embed
the ﬁrst γ bits in them using Algorithm 2, where each
watermark bit is inserted µ = τ β
γ times. The water-
mark bit is physically embedded using English lan-
guage transformations (discussed in [1]). For exam-
ple, for a sentence “This is not so diﬃcult to un-
derstand” having word count of 7 (0111) if we need
Figure 2: Keys required to get a valid permutation
using AES-128: Experimental results are in accor-
dance with theoretical values
It is crucial to construct the watermark such that
1. Watermark can identify the publisher and user suc-
cessfully.
2. Publisher cannot frame an innocent user.
3. Watermark can withstand collusion attacks.
To satisfy the ﬁrst requirement, the watermark simply
needs to have two components - a publisher component and
a user component. But by this method, the publisher can
generate any desired watermark and thus frame an innocent
user. Hence we adopt the following protocol -
1. The publisher sends user a watermark Wu carrying the
user identity.
2. User signs Wu with his private key P ru and sends pub-
lisher the “signed user component” SP ru (Wu).
3. Publisher veriﬁes the correctness by verifying the signed
user component with the user’s public key P uu. He
then appends the document speciﬁc publisher compo-
nent Wp to the signed user component and signs it
with his private key P rp.
4. Final watermark Wi is SP rp(Wp||SP ru (Wu)).
The court can verify the watermark with the public keys
of publisher and user. Neither the publisher, nor the user
can tamper with the watermark without the knowledge of
the other person’s private key. A small problem with this
scheme is that since the “user components” of various users
will diﬀer, hence multiple users can collude and destroy the
watermark. Hence the physical Wu should be chosen such
that colluding users can successfully be identiﬁed.
For this purpose, we use the logarithmic length c-secure
codes proposed in [3]. These codes can successfully identify
at least one of the c colluding users from a group of n users.
Given integers N and c, and an error tolerance metric  > 0,
set n = 2c, L = 2c log(2N/), and D = 2n2 log(4nL/). The
code Γ(L, N, n, d) (details in [3]) is c − secure with -error.

to reduce one word from it to embed the watermark
bits (10) in the 2 LSBs of its word count, preserving
its meaning, we can change the sentence to “Under-
standing this is not so diﬃcult” which has a word
count of 6 (0110).
4. Delete the γ watermark bits embedded in the ﬁrst step
from the watermark.
5. Mark the sentences chosen in step 2 as “used” and if
all the sentences of a paragraph are marked as “used”,
mark the paragraph as “used”.
6. Repeat steps 2-5 till the entire watermark is embedded.
The pseudo-code for the above procedure is provided in
Algorithm 2.
counter = 1;
for l = 1; l < y; l + + do
ql = {st(l,1) , st(l,2) , . . . , st(l,xl)};
end
Q = {q1, q2, . . . , qy};
for i = 1; i ≤ m; i+ = β do
for j = 1, j ≤ τ ; j + + do
= st(temp,1) ;
temp = (j + counter)(%y);
stj
bj = |stj|;
qtemp = qtemp − st(temp,1) ;
if qtemp = φ then
Q = Q − qtemp;
y = y − 1;
end
end
for j=1;j ≤ τ
2 ;j++ do
for l=1;l ≤ β;l = l + 1 do
bjl = w((j+l−1)%γ)+((counter−1)×γ);
b(j+ τ
2 )(β−l+1) = bjl;
end
transform sentences according to new d by
applying English language transformations;
end
counter = (counter + τ )(%y);
end
Algorithm 2: Watermark embedding
3.4 Watermark Extracting and Veriﬁcation
The watermark bits are extracted in the same permuted
sequence used while embedding (Algorithm 1). The embed-
ding process is similar to embedding process except that in
this case we set the watermark bits to the LSBs of the word
counts. Finally, majority-voting is applied on the multiple
instances of each watermark bit. Table 4 illustrates how
majority voting works.
The extracted watermark We is compared to the inserted
watermark Wi and if the Hamming Distance is less then a
maximum tolerance value Ω, the watermark is acceptable,
otherwise it is rejected (in which case collusion detection is
performed using algorithm suggested in [3].
4. ANALYSIS

4.1 Attacks
We discuss the various attacks possible on the water-
marked document and degree of resilience oﬀered by our
scheme:
1. Reformatting/Reproducing attacks: The water-
mark is carried in the structure of the sentences and
not the formatting information (such as interword/ in-
terline spacing, font characteristics, indentation, etc).
Hence, changing these attributes does not alter the
watermark.
2. Sentence addition/ deletion: Addition/ deletion of
a sentence (say si) results in the sentence sequence be-
ing distorted for the paragraph (say pj) containing si.
But each watermark bit carried in sentences of pj is
embedding in µ− 1 sentences in other paragraphs and
can be correctly extracted using majority voting (ex-
plained in 3.4). Hence, the watermark can withstand
In the worst case, if the attacker adds/
this attack.
deletes µ
2 sentences carrying the same watermark bits,
the watermark might be destroyed. Thus, the water-
mark can survive at least µ
2 − 1 additions/deletions
(lower bound).
3. Text swapping: Text swapping refers to selecting
two sentences si ∈ pj and si ∈ pj from a document
and swapping them. The sentence sequence is not
disturbed in this case and only watermark bits corre-
sponding to the swapped sentences are aﬀected. Like
in sentence addition/ deletion, the other µ−1 instances
of the watermark bits result in correct watermark re-
trieval. Here also, the watermark can withstand at
least µ
2 − 1 swaps.
4. Paragraph shuﬄing: In 3.1, we ﬁrst sort the para-
graph sequence according to cardinality before carry-
ing out the permutation operation. Hence, even if the
paragraphs are shuﬄed by the attacker, the original
permutation will be restored when extracting the wa-
termark. Hence, the scheme is totally secure against
paragraphs being shuﬄed.
5. Collusion attack: Boneh-code is inserted as the user
component Wu. If an illegal copy is discovered, then
the algorithm described in [3] is executed which out-
puts the member(s) of the collusion with high proba-
bility.
6. Cryptographic attacks: AES lies at the core of our
scheme as it is used to generate permutations. First
the attacker needs O(2k) time to perform an exhaus-
tive search on K. For each potential K, however, the
attacker would need to generate potential index sets,
which requires O(2k) time. Hence the time complexity
of an exhaustive search attack is O(22k). More impor-
tantly, a key K  diﬀerent to key used to embed the
watermark (K) can still, with high probability, gener-
ate a valid permutation. This permutation is diﬀerent
to permutation generated while watermark embedding
and this introduces an “uncertainty eﬀect” where the
attacker cannot be sure of the correctness of a permu-
tation generated by a random key.
Table 4: Illustration of majority voting
Copy
Watermark bits
w3
1
0
0
0
1
w2
1
1
0
1