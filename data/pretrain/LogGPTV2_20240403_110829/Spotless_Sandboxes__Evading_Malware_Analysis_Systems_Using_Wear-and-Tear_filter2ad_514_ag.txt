# Wear and Tear Artifacts in Malware Sandboxes: Analysis and Countermeasures

## Abstract
This paper investigates the use of wear-and-tear artifacts to detect and evade malware sandboxes. We demonstrate that these artifacts, which are indicative of a system's age and usage, can be used by malware to differentiate between real user systems and analysis environments. Our research provides statistical models to predict a system's age based on these artifacts, and we propose strategies for sandbox operators to create more realistic environments.

## 1. Introduction
Malware authors increasingly use advanced techniques to detect and evade analysis environments. One such technique involves leveraging wear-and-tear artifacts, which are digital traces left by normal system usage over time. These artifacts can reveal the true age and usage patterns of a system, allowing malware to distinguish between real user systems and sandboxes. This paper aims to systematically assess this threat and propose countermeasures.

## 2. Methodology
### 2.1 Data Collection
We collected data from both real user systems and sandboxes, focusing on various types of wear-and-tear artifacts. These include:

- **Disk Artifacts**: Temporary files, DNS cache entries.
- **Event Log Artifacts**: Application event logs, system event logs.
- **Registry Artifacts**: Registry size, installed applications, total applications.
- **Browser Artifacts**: Number of installed browsers.

### 2.2 Correlation Analysis
Figure 6 shows the correlation between the reported age of user systems and each of the artifacts. The results indicate a strong correlation between certain artifacts and the system's age.

### 2.3 Lasso Regression
To explore whether a more sophisticated regression model would improve prediction accuracy, we applied Lasso regression. Lasso regression penalizes the absolute size of the regression coefficients and sets the coefficients of unnecessary features to zero, reducing the complexity of the model. Table VIII lists the selected features and their corresponding coefficients.

| Feature | Coefficient |
|---------|-------------|
| netartifacts:dnscacheEntries | 0.1383 |
| diskartifacts:tempFilesCount | 0.0883 |
| evtartifacts:appevt | 0.1345 |
| evtartifacts:sysevt | 0.1097 |
| regartifacts:regSize | 0.1160 |
| regartifacts:InstalledApps | 0.6432 |
| regartifacts:totalApps | 0.0559 |
| browser:num | -0.0138 |

The only artifact with a negative coefficient is the number of browsers installed, suggesting that older systems may have fewer browsers.

### 2.4 Model Evaluation
We split the dataset into training, evaluation, and testing sets. The Mean Squared Error (MSE) for the Lasso model on real user systems (Dreal) is 0.749, which is better than that of linear regression. For the sandbox dataset, the MSE is 4.45, indicating that the wear and tear of sandboxes does not match their claimed age. Figure 7 compares the residual errors of the Lasso and linear regression models.

## 3. Discussion
### 3.1 Ethical Considerations and Coordinated Disclosure
Our research highlights the problem of environment-aware malware. By demonstrating the effectiveness of this evasion technique, we aim to bring attention to this issue and encourage the development of effective countermeasures. We have coordinated with affected vendors to help them fine-tune their sandboxes.

### 3.2 Probing Stealthiness
The stealthiness of probing depends on the type of artifact. Some artifacts can be retrieved through simple operations, while others require more complex parsing and querying. An alternative defense strategy could focus on detecting the probing activity itself.

### 3.3 OS Dependability
Our study focuses on the Windows environment, but many identified artifacts are OS-specific. However, artifacts related to browser usage, the file system, and network caches are likely to be present in other operating systems as well.

### 3.4 Defenses
We propose two strategies to introduce wear-and-tear artifacts into sandboxes:

1. **Cloning Real User Systems**: Cloning a real user system to use as a basis for a sandbox. This approach has privacy and outdating concerns.
2. **Artificial Aging**: Starting with a freshly installed OS image and simulating user actions to artificially age the system. This approach avoids privacy issues but may not produce entirely realistic artifacts.

## 4. Conclusion and Future Work
In this paper, we have demonstrated the effectiveness of using wear-and-tear artifacts to detect and evade malware sandboxes. We have provided statistical models to predict a system's age and proposed strategies for sandbox operators to create more realistic environments. Future work will focus on implementing and comparing the two proposed approaches and evaluating the effectiveness of sandbox evasion in other environments.

## Acknowledgments
We thank our shepherd, Tudor Dumitras, and the anonymous reviewers for their valuable feedback. This work was supported in part by the Office of Naval Research (ONR) under grant N00014-16-1-2264, and by the National Science Foundation (NSF) under grants CNS-1617902 and CNS-1617593, with additional support by Qualcomm.

## References
[1] C. Willems, T. Holz, and F. Freiling, “Toward automated dynamic malware analysis using CWSandbox,” Security Privacy, IEEE, vol. 5, no. 2, pp. 32–39, March 2007.
...
[54] M. Cova, “Evasive JScript,” 2016, http://labs.lastline.com/evasive-jscript.