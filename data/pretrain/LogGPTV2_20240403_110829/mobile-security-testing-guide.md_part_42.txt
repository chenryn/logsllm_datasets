309
Android Anti-Reversing Defenses
return false;
}
else {
return true;
}
}
Messing with JDWP-Related Data Structures
In Dalvik, the global virtual machine state is accessible via the DvmGlobals structure. The global variable gDvm holds
a pointer to this structure. DvmGlobals contains various variables and pointers that are important for JDWP debugging
and can be tampered with.
struct DvmGlobals {
/*
* Some options that could be worth tampering with :)
*/
bool jdwpAllowed; // debugging allowed for this process?
bool jdwpConfigured; // has debugging info been provided?
JdwpTransportType jdwpTransport;
bool jdwpServer;
char* jdwpHost;
int jdwpPort;
bool jdwpSuspend;
Thread* threadList;
bool nativeDebuggerActive;
bool debuggerConnected; /* debugger or DDMS is connected */
bool debuggerActive; /* debugger is making requests */
JdwpState* jdwpState;
};
For example, setting the gDvm.methDalvikDdmcServer_dispatch function pointer to NULL crashes the JDWP thread:
JNIEXPORT jboolean JNICALL Java_poc_c_crashOnInit ( JNIEnv* env , jobject ) {
gDvm.methDalvikDdmcServer_dispatch = NULL;
}
You can disable debugging by using similar techniques in ART even though the gDvm variable is not available. The
ART runtime exports some of the vtables of JDWP-related classes as global symbols (in C++, vtables are tables that
hold pointers to class methods). This includes the vtables of the classes JdwpSocketState and JdwpAdbState , which
handle JDWP connections via network sockets and ADB, respectively. You can manipulate the behavior of the
debugging runtime by overwriting the method pointers in the associated vtables.
One way to overwrite the method pointers is to overwrite the address of the function jdwpAdbState::ProcessIncoming
with the address of JdwpAdbState::Shutdown . This will cause the debugger to disconnect immediately.
#include 
#include 
#include 
#include 
#include 
#include 
#define log(FMT, ...) __android_log_print(ANDROID_LOG_VERBOSE, "JDWPFun", FMT, ##__VA_ARGS__)
// Vtable structure. Just to make messing around with it more intuitive
struct VT_JdwpAdbState {
310
Android Anti-Reversing Defenses
unsigned long x;
unsigned long y;
void * JdwpSocketState_destructor;
void * _JdwpSocketState_destructor;
void * Accept;
void * showmanyc;
void * ShutDown;
void * ProcessIncoming;
};
extern "C"
JNIEXPORT void JNICALL Java_sg_vantagepoint_jdwptest_MainActivity_JDWPfun(
JNIEnv *env,
jobject /* this */) {
void* lib = dlopen("libart.so", RTLD_NOW);
if (lib == NULL) {
log("Error loading libart.so");
dlerror();
}else{
struct VT_JdwpAdbState *vtable = ( struct VT_JdwpAdbState *)dlsym(lib, "_ZTVN3art4JDWP12JdwpAdbStateE")
;
if (vtable == 0) {
log("Couldn't resolve symbol '_ZTVN3art4JDWP12JdwpAdbStateE'.\n");
}else {
log("Vtable for JdwpAdbState at: %08x\n", vtable);
// Let the fun begin!
unsigned long pagesize = sysconf(_SC_PAGE_SIZE);
unsigned long page = (unsigned long)vtable & ~(pagesize-1);
mprotect((void *)page, pagesize, PROT_READ | PROT_WRITE);
vtable->ProcessIncoming = vtable->ShutDown;
// Reset permissions & flush cache
mprotect((void *)page, pagesize, PROT_READ);
}
}
}
Anti-Native-Debugging Examples
Most Anti-JDWP tricks (which may be safe for timer-based checks) won't catch classical, ptrace-based debuggers, so
other defenses are necessary. Many "traditional" Linux anti-debugging tricks are used in this situation.
Checking TracerPid
When the ptrace system call is used to attach to a process, the "TracerPid" field in the status file of the debugged
process shows the PID of the attaching process. The default value of "TracerPid" is 0 (no process attached).
Consequently, finding anything other than 0 in that field is a sign of debugging or other ptrace shenanigans.
The following implementation is from Tim Strazzere's Anti-Emulator project:
public static boolean hasTracerPid() throws IOException {
BufferedReader reader = null;
try {
reader = new BufferedReader(new InputStreamReader(new FileInputStream("/proc/self/status")), 1000);
311
Android Anti-Reversing Defenses
String line;
while ((line = reader.readLine()) != null) {
if (line.length() > tracerpid.length()) {
if (line.substring(0, tracerpid.length()).equalsIgnoreCase(tracerpid)) {
if (Integer.decode(line.substring(tracerpid.length() + 1).trim()) > 0) {
return true;
}
break;
}
}
}
} catch (Exception exception) {
exception.printStackTrace();
} finally {
reader.close();
}
return false;
}
Ptrace variations*
On Linux, the ptrace system call is used to observe and control the execution of a process (the "tracee") and to
examine and change that process' memory and registers. ptrace is the primary way to implement breakpoint
debugging and system call tracing. Many anti-debugging tricks include ptrace , often exploiting the fact that only one
debugger at a time can attach to a process.
You can prevent debugging of a process by forking a child process and attaching it to the parent as a debugger via
code similar to the following simple example code:
void fork_and_attach()
{
int pid = fork();
if (pid == 0)
{
int ppid = getppid();
if (ptrace(PTRACE_ATTACH, ppid, NULL, NULL) == 0)
{
waitpid(ppid, NULL, 0);
/* Continue the parent process */
ptrace(PTRACE_CONT, NULL, NULL);
}
}
}
With the child attached, further attempts to attach to the parent will fail. We can verify this by compiling the code into a
JNI function and packing it into an app we run on the device.
root@android:/ # ps | grep -i anti
u0_a151 18190 201 1535844 54908 ffffffff b6e0f124 S sg.vantagepoint.antidebug
u0_a151 18224 18190 1495180 35824 c019a3ac b6e0ee5c S sg.vantagepoint.antidebug
Attempting to attach to the parent process with gdbserver fails with an error:
root@android:/ # ./gdbserver --attach localhost:12345 18190
warning: process 18190 is already traced by process 18224
Cannot attach to lwp 18190: Operation not permitted (1)
Exiting
312
Android Anti-Reversing Defenses
You can easily bypass this failure, however, by killing the child and "freeing" the parent from being traced. You'll
therefore usually find more elaborate schemes, involving multiple processes and threads as well as some form of
monitoring to impede tampering. Common methods include
forking multiple processes that trace one another,
keeping track of running processes to make sure the children stay alive,
monitoring values in the /proc filesystem, such as TracerPID in /proc/pid/status .
Let's look at a simple improvement for the method above. After the initial fork , we launch in the parent an extra
thread that continually monitors the child's status. Depending on whether the app has been built in debug or release
mode (which is indicated by the android:debuggable flag in the manifest), the child process should do one of the
following things:
In release mode: The call to ptrace fails and the child crashes immediately with a segmentation fault (exit code
11).
In debug mode: The call to ptrace works and the child should run indefinitely. Consequently, a call to
waitpid(child_pid) should never return. If it does, something is fishy and we would kill the whole process group.
The following is the complete code for implementing this improvement with a JNI function:
#include 
#include 
#include 
#include 
#include 
static int child_pid;
void *monitor_pid() {
int status;
waitpid(child_pid, &status, 0);
/* Child status should never change. */
_exit(0); // Commit seppuku
}
void anti_debug() {
child_pid = fork();
if (child_pid == 0)
{
int ppid = getppid();
int status;
if (ptrace(PTRACE_ATTACH, ppid, NULL, NULL) == 0)
{
waitpid(ppid, &status, 0);
ptrace(PTRACE_CONT, ppid, NULL, NULL);
while (waitpid(ppid, &status, 0)) {
if (WIFSTOPPED(status)) {
ptrace(PTRACE_CONT, ppid, NULL, NULL);
} else {
// Process has exited
_exit(0);
}
}
313
Android Anti-Reversing Defenses
}
} else {
pthread_t t;
/* Start the monitoring thread */
pthread_create(&t, NULL, monitor_pid, (void *)NULL);
}
}
JNIEXPORT void JNICALL
Java_sg_vantagepoint_antidebug_MainActivity_antidebug(JNIEnv *env, jobject instance) {
anti_debug();
}
Again, we pack this into an Android app to see if it works. Just as before, two processes show up when we run the
app's debug build.
root@android:/ # ps | grep -I anti-debug
u0_a152 20267 201 1552508 56796 ffffffff b6e0f124 S sg.vantagepoint.anti-debug
u0_a152 20301 20267 1495192 33980 c019a3ac b6e0ee5c S sg.vantagepoint.anti-debug
However, if we terminate the child process at this point, the parent exits as well:
root@android:/ # kill -9 20301
130|root@hammerhead:/ # cd /data/local/tmp
root@android:/ # ./gdbserver --attach localhost:12345 20267
gdbserver: unable to open /proc file '/proc/20267/status'
Cannot attach to lwp 20267: No such file or directory (2)
Exiting
To bypass this, we must modify the app's behavior slightly (the easiest ways to do so are patching the call to _exit
with NOPs and hooking the function _exit in libc.so ). At this point, we have entered the proverbial "arms race":
implementing more intricate forms of this defense as well as bypassing it are always possible.
Bypassing Debugger Detection
There's no generic way to bypass anti-debugging: the best method depends on the particular mechanism(s) used to
prevent or detect debugging and the other defenses in the overall protection scheme. For example, if there are no
integrity checks or you've already deactivated them, patching the app might be the easiest method. In other cases, a
hooking framework or kernel modules might be preferable. The following methods describe different approaches to
bypass debugger detection:
Patching the anti-debugging functionality: Disable the unwanted behavior by simply overwriting it with NOP
instructions. Note that more complex patches may be required if the anti-debugging mechanism is well designed.
Using Frida or Xposed to hook APIs on the Java and native layers: manipulate the return values of functions such
as isDebuggable and isDebuggerConnected to hide the debugger.
Changing the environment: Android is an open environment. If nothing else works, you can modify the operating
system to subvert the assumptions the developers made when designing the anti-debugging tricks.
Bypassing Example: UnCrackable App for Android Level 2
When dealing with obfuscated apps, you'll often find that developers purposely "hide away" data and functionality in
native libraries. You'll find an example of this in level 2 of the "UnCrackable App for Android".
At first glance, the code looks like the prior challenge. A class called CodeCheck is responsible for verifying the code
entered by the user. The actual check appears to occur in the bar method, which is declared as a native method.
314
Android Anti-Reversing Defenses
package sg.vantagepoint.uncrackable2;
public class CodeCheck {
public CodeCheck() {
super();
}
public boolean a(String arg2) {
return this.bar(arg2.getBytes());
}
private native boolean bar(byte[] arg1) {
}
}
static {
System.loadLibrary("foo");
}
Please see different proposed solutions for the Android Crackme Level 2 in GitHub.
Effectiveness Assessment
Check for anti-debugging mechanisms, including the following criteria:
Attaching JDB and ptrace-based debuggers fails or causes the app to terminate or malfunction.
Multiple detection methods are scattered throughout the app's source code (as opposed to their all being in a
single method or function).
The anti-debugging defenses operate on multiple API layers (Java, native library functions, assembler/system
calls).
The mechanisms are somehow original (as opposed to being copied and pasted from StackOverflow or other
sources).
Work on bypassing the anti-debugging defenses and answer the following questions:
Can the mechanisms be bypassed trivially (e.g., by hooking a single API function)?
How difficult is identifying the anti-debugging code via static and dynamic analysis?
Did you need to write custom code to disable the defenses? How much time did you need?
What is your subjective assessment of the difficulty of bypassing the mechanisms?
If anti-debugging mechanisms are missing or too easily bypassed, make suggestions in line with the effectiveness
criteria above. These suggestions may include adding more detection mechanisms and better integration of existing
mechanisms with other defenses.
Testing File Integrity Checks (MSTG-RESILIENCE-3)
Overview
There are two topics related to file integrity:
1. Code integrity checks: In the "Tampering and Reverse Engineering" chapter, we discussed Android's APK code
signature check. We also saw that determined reverse engineers can easily bypass this check by re-packaging
and re-signing an app. To make this bypassing process more involved, a protection scheme can be augmented
with CRC checks on the app byte-code, native libraries, and important data files. These checks can be
implemented on both the Java and the native layer. The idea is to have additional controls in place so that the
app only runs correctly in its unmodified state, even if the code signature is valid.
2. The file storage integrity checks: The integrity of files that the application stores on the SD card or public storage
and the integrity of key-value pairs that are stored in SharedPreferences should be protected.
315
Android Anti-Reversing Defenses