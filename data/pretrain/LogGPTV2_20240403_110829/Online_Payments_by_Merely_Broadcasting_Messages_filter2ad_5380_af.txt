### Directed Acyclic Graph (DAG) in Novel Payment Systems

Directed Acyclic Graphs (DAGs) have been utilized in various innovative payment systems [23, 44, 47, 69]. However, Astro stands out due to its unique approach: it completely bypasses the need for consensus. Unlike other solutions, even those based on DAGs, Astro does not employ a consensus algorithm to order payments.

### Broadcast Protocols

Broadcast Reliable Broadcast (BRB) protocols have a rich history, beginning with the algorithms introduced by Bracha and Toueg [15, 16]. Subsequent research has refined and enhanced the performance and properties of these algorithms [19, 55, 57, 65]. Asynchronous verifiable information dispersal algorithms [20] are closely related to BRB protocols, and both are essential components in modern asynchronous consensus protocols [32, 60].

### Scalability of Broadcast Protocols

Several methods can enhance the scalability of broadcast protocols. Sharding, which we have adopted in Astro II, is an effective approach to scalability. It allows each shard to maintain the same deterministic properties as a non-sharded system. Other approaches, such as clustering [39, 66], probabilistic quorum-based [58], or sample-based [41] methods, typically provide probabilistic guarantees but may not offer the same level of determinism.

### Conclusions

Astro is a decentralized payment system capable of processing 20,000 transactions per second with 200 replicas, while maintaining sub-second latency. This is achieved without relying on a consensus layer, thus minimizing the impact of network asynchrony and compromised replicas. While Astro is highly effective for payments, it does not address the broader abstraction of state machine replication, which might be necessary for smart contracts. Determining the exact set of problems, beyond payments, that can be solved using Astro's broadcast layer remains an open question.

We have identified several areas for potential improvement in Astro:
1. **Flexible Representation Scheme:** Implement a more flexible scheme instead of the fixed dependency between a client and its representative replica.
2. **Advanced Cryptographic Primitives:** Utilize more advanced cryptographic techniques, such as threshold signatures and key revocation schemes.
3. **Fine-Grained State Transfer Protocol:** Develop a protocol for fine-grained state transfer during reconfiguration.
4. **Hybrid System:** Create a hybrid system that integrates asynchronous payments and consensus-based smart contracts.

### References

[23] CHURYUMOV, A. Byteball: A decentralized system for storage and transfer of value. https://byteball.org/Byteball.pdf (2016).

[24] CLACK, C. D., BAKSHI, V. A., AND BRAINE, L. Smart Contract Templates: foundations, design landscape and research directions. CoRR abs/1608.00771 (2016).

[25] CLARK, D. D. The Design Philosophy of the DARPA Internet Protocols. ACM SIGCOMM Computer Communication Review 18, 4 (1988), 106–114.

[26] CLEMENT, A., WONG, E. L., ALVISI, L., DAHLIN, M., AND MARCHETTI, M. Making Byzantine Fault Tolerant Systems Tolerate Byzantine Faults. In NSDI (2009).

[27] COLLINS, D., GUERRAOUI, R., KOMATOVIC, J., MONTI, M., XYGKIS, A., PAVLOVIC, M., KUZNETSOV, P., PIGNOLET, Y.-A., SEREDINSCHI, D.-A., AND TONKIKH, A. Online payments by merely broadcasting messages (extended version). arXiv 2004.13184 (2020).

[28] CORREIA, M., NEVES, N. F., LUNG, L. C., AND VER´ISSIMO, P. Low complexity byzantine-resilient consensus. Distributed Computing 17, 3 (2005), 237–249.

[29] CRAIN, T., GRAMOLI, V., LARREA, M., AND RAYNAL, M. Dbft: Efficient leaderless byzantine consensus and its application to blockchains. In 2018 IEEE 17th International Symposium on Network Computing and Applications (NCA) (2018), IEEE, pp. 1–8.

[30] DANEZIS, G., AND MEIKLEJOHN, S. Centrally banked cryptocurrencies. In NDSS (2016).

[31] DINH, T. T. A., WANG, J., CHEN, G., LIU, R., OOI, B. C., AND TAN, K.-L. BLOCKBENCH: A Framework for Analyzing Private Blockchains. In SIGMOD (New York, NY, USA, 2017), ACM, pp. 1085–1100.

[32] DUAN, S., REITER, M. K., AND ZHANG, H. BEAT: Asynchronous BFT Made Practical. In CCS (2018).

[33] EXPERT PANEL (FORBES TECHNOLOGY COUNCIL). 10 Tech Industry Experts Predict The Next 'Blockchain Wave', Feb 13 2019.

[34] FISCHER, M. J., LYNCH, N. A., AND PATERSON, M. S. Impossibility of distributed consensus with one faulty process. J. ACM 32, 2 (Apr. 1985), 374–382.

[35] GILAD, Y., HEMO, R., MICALI, S., VLACHOS, G., AND ZELDOVICH, N. Algorand: Scaling byzantine agreements for cryptocurrencies. In SOSP (2017).

[36] GLENDENNING, L., BESCHASTNIKH, I., KRISHNAMURTHY, A., AND ANDERSON, T. Scalable Consistency in Scatter. In SOSP (2011).

[37] GOLAN-GUETA, G., ABRAHAM, I., GROSSMAN, S., MALKHI, D., PINKAS, B., REITER, M. K., SEREDINSCHI, D., TAMIR, O., AND TOMESCU, A. SBFT: a scalable decentralized trust infrastructure for blockchains. In DSN (2019).

[38] GUERRAOUI, R., HAMZA, J., SEREDINSCHI, D.-A., AND VUKOLIC, M. Can 100 Machines Agree? arXiv:1911.07966 (2019). https://arxiv.org/abs/1911.07966.

[39] GUERRAOUI, R., KERMARREC, A.-M., PAVLOVIC, M., AND SEREDINSCHI, D.-A. Atum: Scalable group communication using volatile groups. In Proceedings of the 17th International Middleware Conference (New York, NY, USA, 2016), Middleware '16, ACM, pp. 19:1–19:14.

[40] GUERRAOUI, R., KUZNETSOV, P., MONTI, M., PAVLOVIC, M., AND SEREDINSCHI, D.-A. AT2: Asynchronous Trustworthy Transfers. arXiv/cs.DC 1812.10844 (2018). http://arxiv.org/abs/1812.10844.

[41] GUERRAOUI, R., KUZNETSOV, P., MONTI, M., PAVLOVIC, M., AND SEREDINSCHI, D.-A. Scalable Byzantine Reliable Broadcast. In DISC (2019).

[42] GUERRAOUI, R., KUZNETSOV, P., MONTI, M., PAVLOVIC, M., AND SEREDINSCHI, D.-A. The Consensus Number of a Cryptocurrency. In PODC (2019).

[43] GUPTA, S. A Non-Consensus Based Decentralized Financial Transaction Processing Model with Support for Efficient Auditing. Master’s thesis, Arizona State University, USA, 2016.

[44] HEARN, M. Corda: A distributed ledger. Corda Technical White Paper (2016).

---

**Authorized licensed use limited to: Tsinghua University. Downloaded on March 19, 2021 at 11:24:09 UTC from IEEE Xplore. Restrictions apply.**