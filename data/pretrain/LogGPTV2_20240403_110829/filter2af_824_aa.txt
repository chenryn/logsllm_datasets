## 前言
上一篇文件分析了`DA14531`从收包中断开始一直到`L2CAP`层的数据包处理过程，最近又抽了一点时间将L2CAP层和`ATT`层收包的过程梳理了一遍，本文将结合BLE的协议规范和代码介绍`ATT`层的报文解析流程，并介绍一下分析过程中发现的一些漏洞。
## 回顾
从上文可知 `hci_acl_data_rx_handler` 用于处理L2CAP的报文，该函数首先会调用 `l2cc_pdu_unpack`
对L2CAP的头部字段进行简单的检查，其实就是检查`Length`和`Channel ID`是否合法
然后将`L2CAP`的报文拷贝到新分配的内存，最后根据数据包的类型通过消息机制将数据交给`sub_7F135F6` 或者
`l2cc_pdu_recv_ind_handler`处理，其中`sub_7F135F6`用于处理`ATT`报文。
## ATT层报文解析
首先我们看一下BLE协议规范中对 `ATT` 层的报文格式的定义，下图是一个`L2CAP`的蓝牙包的示意图
蓝牙协议的数据包分了好几个部分，其中 `ATT` 层的报文就位于图中的Information
payload部分，sub_7F135F6就是在解析Information payload。
我们看看函数定义
    int  sub_7F135F6(int id, l2cc_pdu_recv_ind *l2cc_pdu_recv, unsigned int dest_task)
其中l2cc_pdu_recv_ind是一个比较复杂的结构体，其使用了`union`来统一表示 L2CAP 里面的各种不同类型的Payload.
    struct l2cc_pdu_recv_ind
    {
        uint8_t status;
        // 表示数据的大小
        uint16_t rem_len;
        /// Offset
        uint16_t offset;
        /// 指向具体的数据
        struct l2cc_pdu pdu;
    };
l2cc_pdu 用于表示L2CAP层的报文格式
    struct l2cc_pdu
    {
        /// L2Cap Payload Length
        uint16_t payld_len;
        /// L2Cap Channel ID
        uint16_t chan_id;
        /// Data PDU definition
        union l2cc_pdu_data
        {
            /// L2Cap packet code.
            uint8_t code;
            struct l2cc_lecb_send_data_req send_lecb_data_req;
            struct l2cc_reject           reject;
            struct l2cc_update_param_req update_req;
            .............................
            .............................
        }
    }
可以看到和L2CAP的报文格式完全匹配，开头4字节是 Length 和 Channel ID，其中 Length
在`hci_acl_data_rx_handler`函数中经过检查，表示后面Information payload部分的长度。
`Information payload`采用联合体的方式定义，根据不同的code来选择不同的结构体定义进行表示。
ATT PDU格式如下
由图可知，ATT PDU由 **一个字节的`opcode`和变长的数据**组成。
下面以 l2cc_att_err_rsp 为例
    /// Error response
    struct l2cc_att_err_rsp
    {
        /// Error Response - 0x01
        uint8_t     code;
        /// The request that generated this error response
        uint8_t     op_code;
        /// The attribute handle that generated this error response
        uint16_t    handle;
        ///The reason why the request has generated an error response
        uint8_t     reason;
    };
可以看到Error response 的 ATT PDU的组成为
  1. 1字节的code
  2. 1字节的op_code
  3. 2字节的handle
  4. 1字节的reason
然后去翻看BLE规范中的定义发现完全符合
经过简单的浏览发现SDK中对于每种PDU的格式定义要比BLE规范中的更详细。
下面从代码角度开始分析，关键代码如下
    int sub_7F135F6(int id, l2cc_pdu_recv_ind *l2cc_pdu_recv, unsigned int dest_task)
    {
        ret = atts_l2cc_pdu_recv_handler(dest_task >> 8, l2cc_pdu_recv);
        if ( ret == 255 )
        {
            ret = attc_l2cc_pdu_recv_handler(dest_task >> 8, l2cc_pdu_recv);
函数主要逻辑就是首先调用`atts_l2cc_pdu_recv_handler`尝试对数据进行解析，如果函数返回值为`255`就尝试调用`attc_l2cc_pdu_recv_handler`进行解析。
atts_l2cc_pdu_recv_handler 和 attc_l2cc_pdu_recv_handler 实际就是根据ATT PDU 的 opcode
字段在atts_handlers 和 attc_handlers两个结构体数组中搜索到opcode对应的回调函数，其结构体定义如下
    struct att_handler_item
    {
      unsigned __int8 code; // 表示 ATT PDU 的 opcode
      unsigned __int8 d[3];
      dummy_func func;  // 函数指针
    };
其中func的第二个参数就指向了 `ATT PDU` 的开头，搜索 `opcode` 对应处理函数的代码如下
    for ( i = 0; i pdu.data);
atts_handlers 和 attc_handlers的定义如下
我们以`attc_handlers`的第一项为例介绍分析`ATT PDU`解析代码的流程，可以看的第一项的定义为
    att_handler_item 
即这里处理的code为3，回调函数为sub_7F0FC0C，去BLE手册中查找发现code为3表示的是Exchange MTU
Response类型的PDU，其定义如下
然后可以去SDK中找到该PDU的结构体定义
    /// Exchange MTU Response
    struct l2cc_att_mtu_rsp
    {
        /// Exchange MTU Response - 0x03
        uint8_t     code;
        /// Server Rx MTU size
        uint16_t    mtu_size;
    };
然后我们去看 `sub_7F0FC0C` 的实现
    int sub_7F0FC0C(int dest_id, l2cc_att_mtu_rsp *payload)
    {
      mtu_size = gattm_get_max_mtu();
      if ( mtu_size >= payload->mtu_size )
      {
        mtu_size = payload->mtu_size;
      }
      gattc_set_mtu(dest_id, mtu_size);
      if ( gattc_get_operation(dest_id, 1) == 1 )
      {
        v5 = 0;
      }
      else
      {
        v5 = 65;
      }
      gattc_send_complete_evt(dest_id, 1, v5);
      return 0;
    }
可以看的主要就是从`payload`里面取出`mtu_size`，然后和当前的`mtu`进行比较，最后会设置新的`mtu`。我们可以采用这种方式去分析其他ATT
PDU的处理逻辑。
## 漏洞挖掘
梳理清楚ATT PDU的处理流程后，我们就可以逐个地分析固件中对每个ATT
PDU的代码实现，然后从中发现漏洞，为了效率我们可以去分析每种PDU的定义，然后可以优先去查看结构体定义中带有变长成员、以及Length、offset这类敏感词的PDU处理逻辑，因为漏洞主要就处在处理变长数据的地方，比如