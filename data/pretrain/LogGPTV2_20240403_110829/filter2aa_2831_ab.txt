ATL - The Choice for Servers
246
Basic Templates
247
A Simple Template Example
248
Template Classes
250
Native Compiler Directives
253
The #IMPORT Directive
253
Namespace Declarations
254
Smart Interface Pointers
255
Smart Pointer Classes
256
Watch Out for Destructors
257
Smart Pointer Error Handling
258
How the IMPORT Directive Works
260
Raw and Wrapper Methods
260
Summary
261
xii    Contents
SIXTEEN Other Topics
263
Errors
263
Information Code
265
Facility Code
265
Customer Code Flag and Reserved bits
266
Severity Code
266
Looking Up HRESULTS
266
SCODES
267
Displaying Error Messages
267
Using FormatMessage
268
Aggregation and Containment
269
Building a COM Object with MFC
271
Adding Code for the Nested Classes
273
Accessing the Nested Class
275
APPENDIX COM Error Handling
277
Sources of Information
278
Common Error Messages
279
DCOM Errors
285
Get It Working Locally
285
Be Sure You Can Connect
286
Try Using a TCP/IP Address
287
Use TRACERT
287
Windows 95/98 Systems Will Not Launch Servers
288
Security is Tough
288
Using the OLE/COM Object Viewer
289
Index   291
PREFACE
Preface
The goal of this book is to make COM and DCOM comprehend-
ible to a normal person. If you have tried to learn COM and
found its complexity to be totally unbelievable, or if you have
ever tried to work with COM code and felt like you needed a
Ph.D. in quantum physics just to get by, then you know exactly
what this goal means. This book makes COM simple and accessi-
ble to the normal developer.
To meet the goal, this book does many things in a way that
is much different from other books. Here are three of the most
important differences:
1. This book is designed to clarify rather than to obfuscate.
The basic principles of COM are straightforward, so this
book starts at the beginning and presents them in a straight-
forward manner.
2. This book uses the simplest possible examples and presents
them one concept at a time. Rather than trying to cram 116
concepts into a single 50 page example program, we have
purposefully presented just one concept in each chapter.
For example, chapter 2 shows you that you can create a
complete, working, fully functional COM client with 10 lines
of code. And when you look at it, it will actually make
sense! 
3. This book is not 1,200 pages long. You can actually make
your way through this entire book and all of its examples in
a handful of days. Once you have done that you will know
and understand all of the vocabulary and all of the concepts
needed to use COM on a daily basis.
xiv    Preface
Think of this book as the ideal starting point. Once you
have read this book, all of the COM articles in the MSDN CD and
all of the information on the Web will be understandable to you.
You will be able to expand your knowledge rapidly. You will
have the perfect mental framework to allow you to make sense
of all the details.
Each chapter in this book explains an important COM topic
in a way that will allow you to understand it. Here is a quick tour
of what you will learn:
• Chapter 1: This chapter introduces you to the COM
vocabulary and concepts that you need in order to get
started. 
• Chapter 2: This chapter presents a simple, working COM
client. The example is only about 10 lines long. You will
be amazed at how easy it is to connect to a COM server!
• Chapter 3: This chapter shows that you can create a com-
plete COM server with the ATL wizard and about 6 lines
of code. You can then connect client to server. 
• Chapter 4: The previous two chapters will stun you. They
will demonstrate that you can create complete and work-
ing COM systems with just 15 or 20 lines of code. And
you will actually be able to understand it! This chapter
recaps so that you can catch your breath, and shows you
some extra error-handling code to make problem diagno-
sis easier.
• Chapter 5: This chapter delves into the code produced by
the ATL wizard so that it makes sense.
• Chapter 6: This chapter gives you additional detail on the
interactions between client and server so that you have a
better understanding of things like singleton classes and
method calls.
• Chapter 7: This chapter introduces you to MIDL and the
IDL language. 
• Chapter 8: This chapter shows you how to use MIDL to
pass all different types of parameters.
• Chapter 9: This chapter shows you how to access your
COM servers from VB and other languages. 
Preface
xv
• Chapter 10: This chapter clarifies the COM threading
models. If you have ever wondered about “apartment
threads”, this chapter will make threading incredibly easy!
• Chapter 11: This chapter uncovers the link between COM
and the registry so you can see what is going on.
• Chapter 12: This chapter demystifies COM callbacks so
you can implement bi-directional communication in your
COM applications.
• Chapter 13: This chapter explains connection points, a
more advanced form of bi-directional communication.
• Chapter 14: This chapter shows how to use your COM
objects on the network and delves into a number of secu-
rity topics that often get in the way.
• Chapter 15: This chapter further clarifies ATL, smart point-
ers, import libraries and such.
• Chapter 16: This chapter offers a collection of information
on things like COM error codes and MFC support for
COM.
• Error Appendix: Possibly the most valuable section of the
book, this appendix offers guidelines and strategies for
debugging COM applications that don’t work. COM uses
a number of interacting components, so bugs can be hard
to pin down. This chapter shows you how!
Read this book twice. The first time through you can load your
brain with the individual concepts and techniques. The second
time through you can link it all together into an integrated
whole. Once you have done that, you will be startled at how
much you understand about COM, and how easy it is to use
COM on a daily basis!
For additional information, please see our web site at:
http://www.iftech.com/dcom
It contains an extensive resource center that will further acceler-
ate your learning process. 
xvi    Preface
O
N
E
1
The Basics of 
COM 
Understanding how COM works can be intimidating at first. One
reason for this intimidation is the fact that COM uses its own
vocabulary. A second reason is that COM contains a number of
new concepts. One of the easiest ways to master the vocabulary
and concepts is to compare COM objects to normal C++ objects
to identify the similarities and differences. You can also map
unfamiliar concepts from COM into the standard C++ model that
you already understand. This will give you a comfortable starting
point, from which we'll look at COM's fundamental concepts.
Once we have done this, the examples presented in the follow-
ing sections will be extremely easy to understand.
Classes and Objects
Imagine that you have created a simple class in C++ called xxx.
It has several member functions, named MethodA, MethodB and
MethodC. Each member function accepts parameters and returns
a result. The class declaration is shown here:
2    Chapter 1 •
The Basics of COM 
class xxx {
public:
int MethodA(int a);
int MethodB(float b);
float MethodC(float c);
};
The class declaration itself describes the class. When you
need to use the class, you must create an instance of the object.
Instantiations are the actual objects; classes are just the defini-
tions. Each object is created either as a variable (local or global)
or it is created dynamically using the new statement. The new
statement dynamically creates the variable on the heap and
returns a pointer to it. When you call member functions, you do
so by dereferencing the pointer. For example:
xxx *px;            // pointer to xxx class
px = new xxx;       // create object on heap
px->MethodA(1);     // call method
delete px;          // free object
It is important for you to understand and recognize that
COM follows this same objected oriented model. COM has
classes, member functions and instantiations just like C++ objects
do. Although you never call new on a COM object, you must still
create it in memory. You access COM objects with pointers, and
you must de-allocate them when you are finished.
When we write COM code, we won't be using new and
delete. Although we're going to use C++ as our language, we'll
have a whole new syntax. COM is implemented by calls to the
COM API, which provides functions that create and destroy COM
objects. Here's an example COM program written in pseudo-
COM code.
ixx *pi                     // pointer to COM interface
CoCreateInstance(,,,,&pi)   // create interface
pi->MethodA();              // call method
pi->Release();              // free interface
How COM Is Different
3
Additonal Information and Updates: http://www.iftech.com/dcom
In this example, we'll call class ixx an "interface". The vari-
able pi is a pointer to the interface. The method CoCreateIn-
stance creates an instance of type ixx. This interface pointer is
used to make method calls. Release deletes the interface.
I've purposely omitted the parameters to CoCreateInstance.
I did this so as not to obscure the basic simplicity of the pro-
gram. CoCreateInstance takes a number of arguments, all of
which need some more detailed coverage. None of that matters
at this moment, however. The point to notice is that the basic
steps in calling a COM object are identical to the steps taken in
C++. The syntax is simply a little different.
Now let's take a step back and look at some of the bigger
differences between COM and C++.
How COM Is Different
COM is not C++, and for good reason. COM objects are some-
what more complicated then their C++ brethren. Most of this
complication is necessary because of network considerations.
There are four basic factors dictating the design of COM:
• C++ objects always run in the same process space. COM
objects can run across processes or across computers. 
• COM methods can be called across a network. 
• C++ method names must be unique in a given process
space. COM object names must be unique throughout the
world. 
• COM servers may be written in a variety of different lan-
guages and on entirely different operating systems, while
C++ objects are always written in C++. 
Let's look at what these differences between COM and C++
mean to you as a programmer.
COM can Run Across Processes
In COM, you as the programmer are allowed to create objects in
other processes, or on any machine on the network. That does
not mean that you will always do it (in many cases you won't).
4    Chapter 1 •
The Basics of COM 
However, the possibility means that you can't create a COM
object using the normal C++ new statement, and calling its meth-
ods with local procedure calls won't suffice.
To create a COM object, some executing entity (an EXE or a
Service) will have to perform remote memory allocation and
object creation. This is a very complex task. By remote, we mean
in another process or on another machine. This problem is
solved by creating a concept called a COM server. This server
will have to maintain tight communication with the client.
COM Methods Can Be Called Across a Network
If you have access to a machine on the network, and if a COM
server for the object you want to use has been installed on that
machine, then you can create the COM object on that computer.
Of course, you must the proper privileges, and everything has to
be set-up correctly on both the server and client computer. But if
everything is configured properly and a network connection
exists, activating a COM server on one machine from another
machine is easy.
Since your COM object will not necessarily be on the local
machine, you need a good way to "point to" it, even though its
memory is somewhere else. Technically, there is no way to do
this. In practice, it can be simulated by introducing a whole new
level of objects. One of the ways COM does this is with a con-
cept called a proxy/stub. We'll discuss proxy/stubs in some detail
later.
Another important issue is passing data between the COM
client and its COM server. When data is passed between pro-
cesses, threads, or over a network, it is called "marshaling".
Again, the proxy/stub takes care of the marshaling for you. COM
can also marshal data for certain types of interface using Type
Libraries and the Automation marshaller. The Automation mar-
shaller does not need to be specifically built for each COM
server - it is a general tool.
COM Vocabulary
5
Additonal Information and Updates: http://www.iftech.com/dcom
COM Objects Must Be Unique Throughout the World
OM objects must be unique throughout the world. This may
seem like an exaggeration at first, but consider the Internet to be
a worldwide network. Even if you're working on a single com-
puter, COM must handle the possibility. Uniqueness is the issue.
In C++ all classes are handled unequivocally by the compiler.
The compiler can see the class definition for every class used in
a program and can match up all references to it to make sure
they conform to the class exactly. The compiler can also guaran-
tee that there is only one class of a given name. In COM there
must be a good way to get a similarly unequivocal match. COM
must guarantee that there will only be one object of a given
name even though the total number of objects available on a
worldwide network is huge. This problem is solved by creating a
concept called a GUID.
COM is Language Indpendent
COM servers may be written with a different language and an
entirely different operating system. COM objects have the capa-
bility of being remotely accessible. That means they may be in a
different thread, process, or even on a different computer. The
other computer may even be running under a different operating
system. There needs to be a good way to transmit parameters
over the network to objects on other machines. This problem is
solved by creating a new way to carefully specify the interface
between the client and server. There is also a new compiler
called MIDL (Microsoft Interface Definition Language). This com-
piler makes it possible to generically specify the interface
between the server and client. MIDL defines COM objects, inter-
faces, methods and parameters.
COM Vocabulary
One of the problems we're going to have is keeping track of two
sets of terminology. You're probably already familiar with C++
6    Chapter 1 •
The Basics of COM 
and some Object Oriented terminology. This table provides a
rough equivalency between COM and conventional terminology.
You'll notice the concepts of Interface and marshaling don't
translate well into the C++ model. The closest thing to an inter-
face in C++ is the export definitions of a DLL. DLL's do many of
the same things that COM does when dealing with a tightly cou-
pled (in-process) COM server. Marshaling in C++ is almost
entirely manual. If you're trying to copy data between processes
and computers, you'll have to write the code using some sort of
inter-process communication. You have several choices, includ-
ing sockets, the clipboard, and mailslots. In COM marshaling is
generally handled automatically by MIDL.
Concept
Conventional 
(C++/OOP)
COM
Client
A program that requests ser-
vices from a server.
A program that calls COM 
methods on a COM object 
running on a COM server.
Server
A program that "serves" other 
programs.
A program that makes COM 
objects available to a COM cli-
ent.
Interface
None.
A pointer to a group of func-
tions that are called through 
COM.
Class
A data type. Defines a group 
of methods and data that are 
used together.
The definition of an object 
that implements one or more 
COM interfaces. Also, 
"coclass".
Object
An instance of a class.
The instance of a coclass.
Marshaling
None.
Moving data (parameters) 
between client and server.
Table 1.1
A comparison of conventional C++ terminology with COM ter-
minology
The Interface
7
Additonal Information and Updates: http://www.iftech.com/dcom
The Interface
Thus far, we've been using the word "interface" pretty loosely.
My dictionary (1947 American College Dictionary) defines an
interface as follows:
"Interface, n. a surface regarded as the common boundary
of two bodies or surfaces"
That's actually a useful general description. In COM "inter-
face" has a very specific meaning and COM interfaces are a com-
pletely new concept, not available in C++. The concept of an
interface is initially hard to understand for many people because
an interface is a ghostlike entity that never has a concrete exist-
ence. It's sort of like an abstract class but not exactly.
At its simplest, an interface is nothing but a named collec-
tion of functions. In C++, a class (using this terminology) is