there is a violation that performs the same sensitive op-
eration via function B without invoking the check func-
tion ﬁrst, then we will not be able to detect the viola-
tion unless we use the data structure accesses to rep-
resent the sensitive operation in the rule. For exam-
ple, security file permission() is used to protect
read, write, etc., in Linux 2.6.11, but the check is
missed when the sensitive operation is called through
readv (shown in Figure 2(b)), writev, aio read, or
aio write. Therefore, AutoISES would have missed
all of these violations if it had not used the actual data
structure accesses to represent the sensitive operation.
The tradeoffs between considering access orders or not
are as follows. While preserving access orders is more
precise, it has two major disadvantages. First, the order
does not matter for certain rules, and preserving the order
can cause one to miss the rule. For example, an directory
removal operation involves setting the inode’s size to 0
and decrement the number of links to it by one. The order
in which the two accesses are performed is irrelevant.
Second, it is more expensive to consider access orders,
which can affect the scalability of our tool. On the other
hand, the downside of not considering orders is that we
can potentially have a higher number of false positives
due to over-generalization. However, we did not ﬁnd any
false positives caused by this reason in this study.
Therefore, we use a set of unordered data structure ac-
cesses, AccessSet = {Access1, ..., Accessm}, to repre-
sent sensitive operation Op, where each data structure
access is deﬁned as shown in Figure 4.
Accessi := READ AST | W RIT E AST | ACCESS AST
AST := type name(−>f ield) ∗ | global variable
Figure 4:
Deﬁnition of one data structure access.
ACCESS AST means an access to AST (Abstract Syntax
Tree), either READ or WRITE.
Security Rules Replacing the security sensitive opera-
tion Opi with AccessSet as deﬁned above, we have the
following deﬁnition of security rules:
Rulei = (Checki, AccessSeti), where Checki ∈ CheckSet
=> AccessSeti  Inf erredRulei = (Checki, AccessSeti),
where Checki ∈ CheckSet.
Violations Using such inferred rules, we want to detect
security violations. An instance of a security sensitive
operation, InstanceOf (AccessSeti)u is a violation to
Inf erredRulei if it is not protected by any instance of
the security check function. In other words,
Given Inf erredRulei = (Checki, AccessSeti),
∀ InstanceOf (Checki)v,
InstanceOf (AccessSeti)u  InstanceOf (AccessSeti)u ∈ V iolationi.
In this paper, we use rules and inferred rules inter-
changeably.
3.3 Exploring Rule Granularity
We explore 4 different levels of granularity based on two
metrics, whether to distinguish read and write access
types, and whether to distinguish structure ﬁelds. The
four different levels of granularity are as shown in Ta-
ble 1. For example, the access READ inode->i size is
represented as READ inode for Granularity(F −, A+),
ACCESS inode->i size for Granularity(F +, A−),
and ACCESS inode for Granularity(F −, A−).
Distinguishing Structure Fields
Yes
No
Granularity(F −, A+)
READ inode
Disting- Yes Granularity(F +, A+)
READ inode->i size
uishing
Granularity(F +, A−)
Access No
Types
ACCESS inode->i size
Granularity(F −, A−)
ACCESS inode
Table 1: Four Levels of Rule Granularity with Examples.
4 Detailed Design of AutoISES
4.1 A Naive Approach
We ﬁrst describe a naive approach and show why it
does not work, which motivated us to explore alterna-
tives. A naive approach is to start the analysis from
the direct caller functions of a security check function,
and consider all data structure accesses performed af-
ter the security check function as the protected sensi-
tive operation. This approach does not work because
it introduces obvious imprecision.
For example, as
shown in Figure 5, security inode permission()
function permission().
is called at
If we start from function permission(),
then no
data structures are accessed after
security check
function security inode permission() in function
permission(), indicating that no data structure ac-
cess is protected by security inode permission(),
which is clearly not true. This naive approach fails be-
cause permission() is not a function that actually uses
the check to protect security sensitive operations.
In-
stead, it is a wrapper function of the security check func-
tion. The function that actually uses the security check
function for a permission check is vfs link() shown in
the leftmost box of Figure 5.
the end of
To automatically infer security rules, we need to auto-
matically discover the functions (e.g., vfs link()) that
actually use security checks for authorization checking.
4.2 Security Speciﬁcation Extraction
The goal of AutoISES is to discover the security sensi-
tive operation, represented by a group of data structure
accesses, that is protected by a security check function.
Why we use data structure accesses to represent a se-
curity sensitive operation has already been discussed in
Section 1.2, and the two major advantages of this repre-
sentation have been described in Section 3.2. To achieve
this goal, we need to address four major challenges: (1)
how to automatically discover functions that actually use
security checks for authorization checking; (2) how to
deﬁne “protected” at the code level; (3) what informa-
tion to extract; (4) how do we turn such information into
security rules.
4.2.1 How to ﬁnd functions that actually use secu-
rity checks for authorization checking?
To better understand the impact of the rule gran-
ularity on rule inference and violation detection, and
to gain insight on how well our default granular-
ity (Granularity(F +, A+)) performs, we quantitatively
evaluate the 4 different levels of granularity on the Linux
kernel and Xen. This exploration is orthogonal to our
rule inference and violation detection, and can be applied
to previous rule inference techniques [9, 11, 20, 22, 30].
As shown above, simply starting the analysis from the
direct callers of a security check function does not work.
To automatically detect security rules, we need to auto-
matically ﬁnd the functions that actually use the check
function to protect sensitive operations. However, what
functions actually use the check function for authoriza-
tion checking depends on the semantics of the software,
and thus are extremely difﬁcult to extract automatically.
386 
17th USENIX Security Symposium 
USENIX Association
linux/fs/namei.c:
linux/fs/namei.c:
linux/fs/namei.c:
int permission(struct inode *inode, ...) { ...
return security_inode_permission(inode, ...);
No code after
security_inode_permission()
in function permission().
int vfs_link(...) {
...
error = may_create(dir, ...);
// data structure accesses
...
}
static int may_create(struct inode *dir,...)
{
…
error = permission(dir,...);
}
}
Figure 5: Demonstrating the naive approach does not work.
Instead, we try to automatically extract a good approx-
imation of these functions. Speciﬁcally, we (1) automati-
cally break the program into modules (e.g., each ﬁle sys-
tem is a module) based on the compilation conﬁgurations
that come with any software (e.g. in Makeﬁle), and (2)
consider the root functions of each module as functions
that actually use security check functions for authoriza-
tion check, where root functions are functions that are
not called by any other functions in the module. These
root functions can be automatically extracted by ana-
lyzing the call graphs of each module.
this
ﬁnds
Using
approach, AutoISES
that
sys link() is a root
function for the ext2 ﬁle
system module. Although vfs link() is the direct user
of the check, this approximation is good because the
root function sys link() is the caller of vfs link(),
therefore the root function contains all the data structure
accesses vfs link() performs. While it can also con-
tain accesses that are not in vfs link(), which may not
be related to the security sensitive operation, it does not
affect the violation detection accuracy much in practice
mainly for two reasons. First, since only accesses that
are protected by many instances of the same check
function is considered as part of a sensitive operation,
many unrelated accesses can be automatically elimi-
nated during the rule generation stage (Section 4.2.4).
Additionally, during the violation detection stage, we
can set the threshold for accessV iolationCount lower
to tolerate a few unrelated data structure accesses. Note
that these root functions are usually a super set of
our untrusted space interface functions, as many root
functions can only be called by other kernel modules,
which are considered trusted. Therefore, our untrusted-
space exposability study is necessary for reducing false
positives.
An alternative solution is to ask developers or tool
users to provide the functions that actually use the check
functions. Although it is easier to provide such functions
than writing the speciﬁcations directly, it is not desirable,
because (1) it is not automatic; (2) one would need to
manually identify such functions each time new code is
added; and (3) manually identiﬁed these functions can be
error-prone.
4.2.2 What does “protected” mean at the code level?
An instance of a sensitive operation Opi is considered
protected by an instance of a security check function
Checki, if the operation is allowed only if it is autho-
rized as indicated by the return value of the check func-
tion. To implement this exact semantic, we need to know
the semantics of return values of all the security check
functions, which requires signiﬁcant manual work and
does not scale; this is not desirable. Therefore, we use
a source code level approximation of this semantic: a
security check function protects all data structure ac-
cesses that appear “after” the security check function in
an execution trace. Although this approximation can in-
clude some unrelated accesses, it is reasonably accurate
and effective at helping detecting violations for the same
two reasons discussed in Section 4.2.1. Additionally, the
approximation makes our approach more automatic and
general, because we do not require developers to provide
the semantics of the return values of the security check
functions.Similar to previous static analysis techniques,
our static analysis does not employ any dynamic execu-
tion information. Instead, the execution trace we use is a
static approximation of the dynamic execution trace.
4.2.3 What information to extract?
We want to extract data structure accesses that are fre-
quently protected by a security check function. Since a
typical program accesses a large number of data struc-
tures, many of which are irrelevant to the security sensi-
tive operation, we need to collect the most relevant ac-
cesses and exclude noise. For example, a loop iterator
is not interesting for our rule extraction, so we want to
exclude it. Although all data structure accesses theoreti-
cally can be protected by a security check function, struc-
ture ﬁeld accesses and global variable accesses are more
commonly protected than short-lived local scalar vari-
ables. Therefore, we extract all structure ﬁeld accesses
and global variable accesses. In addition, a security sen-
sitive operation, being an aggregate representation of its
speciﬁc instances, is naturally represented by accesses to
the types of data structures, and not by accesses to spe-
ciﬁc data objects. Thus, our rule inference engine con-
siders structure types as opposed to actual objects.
USENIX Association  
17th USENIX Security Symposium 
387
4.2.4 How to infer rules?
Starting from the automatically identiﬁed root functions,
we can extract the data structure access set for each in-
stance of a security check function. To obtain the data
structure access set protected by the security check func-
tion, we simply compute the intersection of all of these
access sets. Since our static analysis can miss some data
structure accesses for some root functions due to analysis
imprecision, we do not require accesses to be protected
by all instances. Instead, if intersecting an access set re-
sults in an empty set, we drop this access set because it
is likely to be an incomplete set. As long as there are
enough security check instances protecting the accesses,
we are conﬁdent the accesses are security sensitive and
the inferred rule is valid.
However, different from inferring general program
rules, many security check functions are called only once
or twice, which makes it difﬁcult for the intersection
strategy to be effective. We observed that many such
functions are only called once or twice because Linux
uses a centralized place to invoke such checks for dif-
ferent implementations. For example, check function
security inode rmdir() is only called once in the
virtual ﬁle system level, but it actually protects the sen-
sitive rmdir operation of many different ﬁle systems.
Therefore, semantically the check function is invoked
once for each ﬁle system. Thus, we can intersect the
rmdir operations of different ﬁle systems to obtain the es-
sential protected sensitive accesses. This strategy makes
it possible for AutoISES to automatically generate rules
of reasonably small sizes with high conﬁdence even for
check functions that are called only a few times. This
is realized by performing a function alias analysis and
generating a separate static trace for each function alias,
essentially treating each function alias as if it was a sep-
arate function call.
4.3 Our Static Analysis
We use inter-procedural and ﬂow-insensitive static pro-
gram analysis to infer security rules and detect viola-
tions.
It is important to use inter-procedural analysis,
because many sensitive data structure accesses related to
the same sensitive operation are performed in different
functions. In fact, these accesses can be many (e.g., 18)
levels apart in the call chain, meaning the caller of one
access can be the 18th ancestor caller of another access.
An intra-procedural analysis would not adequately cap-
ture the security rules or be effective at detecting viola-
tions. In fact, without our inter-procedural analysis, we
would not be able to detect almost any of the violations.
For higher accuracy, we perform full inter-procedural
analysis, which means that we allow our analysis tool
to zoom into functions as deep as it can, i.e., until it has
analyzed all reachable functions whose source code is
available. We chose to use ﬂow-insensitive analysis over
ﬂow-sensitive analysis because it is less expensive and
scales better for large software.
As function pointers are widely used in Linux and
Xen, we perform simple function pointer analysis by
resolving a function pointer to functions with the same
type. Our analysis is conservative in the absence of type
cast.
5 Methodology and Results
We evaluated our tool on the latest versions, at the time
of writing, of two large open source software, Linux and
Xen. Table 2 lists their size information.
Software
Linux
Xen
Lines of Code
5.0M
0.3M
Total # of Check Functions
96
67
Table 2: Evaluated software. We excluded constructor and de-
structor type of security check functions from the list, because
they are not authorization checks.
Table 3 shows our overall analysis and detection re-
sults. AutoISES automatically generated 84 code-level
security rules, which served as the concrete security
speciﬁcations of the two software we studied. These
speciﬁcations are critical for verifying software correct-
ness and security. Additionally they can help developers
better understand the code and ease the task of software
maintenance. We did not generate one rule for each secu-
rity check mainly because some parts of the source code
were not compiled for the default Linux kernel or Xen
conﬁguration, and were therefore not analyzed.
Based on our untrusted-space exposability study re-
sults, AutoISES reports violations that can be exposed
to untrusted space as errors, and the others as warnings
since they are less likely to be true security violations.
Using the 84 automatically generated rules, AutoISES
reported 8 error reports and 293 warning reports. A total
of 8 true violations were found, 6 of which were from the
error reports, and 2 were from the warnings reports (only
the top warnings were examined). Among the 8 true vi-
olations, 7 of them have been conﬁrmed by the corre-
sponding developers. All of the automatically inferred
rules were used by the AutoISES checker directly with-
out being examined by us or the developers. If higher de-
tection accuracy is desired, developers or tool users can
examine rules before using them for violation detection.
These results demonstrate that AutoISES is effective
at automatically inferring security rules and detecting vi-
olations to these rules, which closes an important gap