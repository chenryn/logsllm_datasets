口前仍有许多种UNIX类型的操作系统在使用中，有些是商业化的，比如美国Sun公司适用
于SPARC芯片和Intel芯片的Solaris操作系统：还有一些是自由免费的，比如FreeBSD和Linux操
作系统等。完全符合X/Open技术规范要求的系统目前还不是很多，而只有完全符合该技术规范
的要求才能挂上“UNIX98”标签。在过去，虽然POSIX在这一方面也起了相当大的作用、可不
同UNIX系统之间的兼容性间题一直是个老大难。在推出X/Open技术规范之后，UNIX和其他
UNIX类型的系统就有希望融为一体。
1.2什么是Linux操作系统
正如你已经知道的那样，Linux是一个自由传播的UNIX类型内核的具体实现、而内核指的
一
是操作系统底层的核心程序代码。因为Linux本身脱胎于UNIX系统，所以Linux程序与UNIX程
序是十分相似的。事实上，儿乎所有为UNIX编写的程序都可以在Linux下通过编译和运行。此
外，许多为离业化UNIX操作系统版本而销售的商业化应用软件其二进制形式也几乎可以在不加
加入jaVa编程群：524621833
---
## Page 21
2Linux程序设计
任何修改的情况下直接在Linux系统上运行.Linux是由LinusTovalds在赫尔辛基大学开发出来的，
他通过因特网得到来自UNIX程序员的大力协助。它最初只不过是一个脱胎于AndyTanenhaum的
Minix操作系统（一个小的UNIX系统）的个人爱好，但逐步发展成为一个独立完整的UNIX系统。
Linux内核没有使用任何来自AT&T或其他专利源代码的代码。
1.3发行版本
我们在前面已经提到过，Linux事实上只是一个操作系统内核。你可以设法获得该内核的源
代码，编译并安装它们；然后再通过获取和编译其他自由传播的软件程序面构成一个完整的
UNIX风格的系统。尽管这类安装的完整组成通常并不仅限于这个操作系统内核，但它们一般都
被称为Linux系统。其中的大多数软件工其和命令程序都来源于自由软件基金会（FreeSoftware
Foundation）的GNU项目（GNU Project）。
我想你可能会赞同这个现点，即从源代码开始建立一个Linux系统是一个不小的工程。幸运
的是已经有许多人开始构造“发行版本”，通常是在CD-ROM盘片上，它不仅包含了我们刚才提
到的操作系统内核，还包含着许多程序设计工具和命令程序。其中通常会实现有一个X窗门系
统，而X窗口系统是UNIX系统上最常见的图形化环境。发行版本一般都有一个安装程序和一些
额外的文档（通常都放在那张CD盘片上），它们可以帮助你安装好你自己的Linux系统。比较们
名的发行版本有Slackware、SuSE、Debian、RedHat和TurboLinux等，但还有许许多多不那么
有名的。
1.4GNU项目和自由软件基金会
Linux之所以能够存在并发展到今天是无数人团结合作的结果。操作系统内核本身只是一个
能够实际应用的开发系统中一个很小的组成部分。商业化的UNIX系统传统上都包含着许多应用
程序，是它们提供了系统服务和软件工具。对Linux系统来说，这些传统性的程序都是由不同程
序员编写出来并自由传播的。
Linux社团（以及一些其他的软件开发组织）支持自由软件的概念，即软件本身不应该受到
什么限制，它们应该是自由的，它们通常都遵守GNU一般公众许可证（GNUGeneralPublic
License）。虽然在获取这份软件的过程中可能会有一定的费用，但除那以外可以自由使用，并且
它们通常都是以源代码的形式传播的。
自由软件基金会（Free Software Foundation）是由Richard Stallman创建的，他是UNIX和其
他开创了GNU项目（GNUProject），这个项目的宗旨是创建一个与UNIX兼容的操作系统和开发
环境。最终的结果可能是它在最底层与UNIX有极大的区别，但它将支持UNIX操作系统中的应
用程序。GNU这个名字代表的意思是GNU'sNotUnix（GNU不是UNIX）。
GNU项目已经向软件行业提供了大量的应用程序，它们与那些我们在UNIX系统里看到的东
西惟妙惟肖。这些程序被称为GNU软件，它们都是在GNU公众许可证（GNUPublicLicense，
简称GPL）条款下发行传播的。本书的附录B就是一份该许可证的拷贝。这份许可证体现了版权
公开（“copyleft"，英文“copyright”（版权所有）的反话）的概念。“版权公开”的目的是阻止
加入jaVa编程群：524621833
---
## Page 22
第1章入门知识3
其他人在自由软件的使用方面强加上某些人为的限制。
在GPL许可证条款下发行传播的GNU项目软件主要有：
·GCC
一个C语言编泽器。
++·
一个C++编译器。
·GDB
一个源代码级的调试器（debuggcr）。
·GNU make
UNIX系统中make命令的一个白由版本。
• Bison
一个与UNIX系统中的yacc兼容的词法分析器。
• Bash
一个命令解释器（shell）。
·GNU Emacs
一个文本编辑器和环境，
还有许多其他的软件包也已经在接受自由软件准则和GPL条款的前提下被人们开发出来了。
其中包括图形图像处理工具、电子表格、源代码控制工具、编译器和解释器、因特网工具程序等，
同时还有了一个完整的面向对象的环境：GNOME。我们将在后面的某个章节遇到GNOME，
在http://www.gnu.org网址处你可以找到更多与自由软件有关的内容。
1.5为Linux系统设计程序
许多人认为UNIX程序设计就意味着使用C语言。确实，UNIX操作系统最初就是用C语言编
写出来的，大部分的UNIX应用程序也是用C语言编写的：但C语言并不是UNIX程序员惟一-的选
择。在本书的学习过程中，我们将向读者介绍一些其他的手段，它们在某些情况下可以为程序
设计难题提供一个更简洁的解决方案。
事实上，最初的第一个UNIX版本是于1969年用PDP7机器的汇编语言编写出来的，
差不多也在那个时候，Dennis Ritchie发明了C语言；到了1973年，他和Ken Thompson
主要使用C语言重新编写了整个的UNIX操作系统内核。这在系统软件还是由汇编语言
当家的那个时代是相当了不起的壮举。
对UNIX系统来说有各种各样的程序设计语育可供选用，其中有许多是免费的，它们的获取
途径可以是CD-ROM光盘，也可以从因特网上的FTP档案站点下载。书后的附录C里就有一个包
含着各种有用资源的清单。下面这个表格只是UNIX程序员可以使用的部分程序设计语言。
Ada
C
++
Eiffel
Forth
Fortran
Icon
Java
JavaScript
Lisp
Modula 2
Moduia3
Oberon
Objective C
Pascal
Perl
PostScript
Proiog
Python
Scheme
Smailtalk
SQL
1/
UNIX Bourne Shell(sh)
加入jaVa编程群：524621833
---
## Page 23
Linux程序设计
在这本书里，我们将把注意力集中在很少的几种程序设计语言上：我们将在下一章里看到
如何通过UNIX系统的shelI来开发小到中规模的应用程序，其重点是从C语言程序员的角度去深
入探讨UNIX程序接口的设计问题，在接下来的各个章节里，我们将对使用C语进行底层程序
设计的其他方面进行研究，特别是在因特网（HTML、Perl、Java等）和X窗口系统（Tcl/Tk
GNOME等）环境中进行的程序设计。
1.6UNIX程序
UNIX下的应用程序主要由两种特殊类型的文件米代表：可执行文件和脚本程序。可执行文
件是能够被计算机直接执行的程序，相当下DOS中的.exe文件。即本程序则是组指令，这些指
令将由另外一个程序（比如说是解释器）来执行，它相当于DOS中的.bat文件或者解释型BASIC
程序。
UNIX不要求可执行文件或脚本程序具备某种特定的文件名或者某种特定的扩展名。某个文
件是否是一个可以被执行的程序将由第2章里介绍的文件的系统属性来决定。我们可以把UNIX
系统中的脚本程序替换为经过编译的程序（反过来也行）而不影响其他程序，调用它们的人也
不会感到有什么差异。事实上，从用户的角度看，这两者其实是没有什么区别的。
当你登录进人到某个UNIX系统中去的时候，和你打交道的是-个shell（命令解释器）程序
（通常就是sh），由它负责为你调用执行其他的程序，它的工作原理和DOS中的COMMAND
COM是一样的。它在一组给定的子目录集合里按照你给出的文件名查找到与之同名的那个文件
并把它当作你打算执行的程序。将搜索的那些子月录都被保存在一个名为PATH的shelI变里，
和DOS下的情况差不多。搜索路径（你可以对这个路径进行增减）是由你的系统管理员预先配
置好了的，它通常包含着用来保存系统程序的几个标准场所，其中包括：
·/bin
二进制文件子目录，一般用来保存引导系统用的程序。
• /usr/bin
用户级二进制文件子目录，用来保存可供一般用户使用的标准程序。
·usr/local/bin本地二进制文件子目录，般用来保存某种安装情况下的程序。
系统管理员（比如root用户）的登录可以使用个特殊的PATH变量，它包括几个存放有系
统管理员专用程序的子目录，比如/sbin和/usr/sbin等。
可选装的操作系统组件和第三方应用软件可以安装在/opt子日录中的某个下级子目录里，而
安装程序可能会通过用户安装脚本在PATH变量里添加一些东西。
尽量不要删除PATH变量里出现的子目录，除非你确实知道自己这样做会产生什么样的
后果。
请注意：UNIX使用胃号“：”来分隔PATH变量里的各个数据项，而DOS使用的则是分号“：”
（UNIX选用“：在先，因此应该问为什么MS-DOS另起炉灶而不应该问为什么UNIX与之不同！）
下面就是-个PATH变量的示例：
/uss /1oca1 /bin: /bin: /usr/bin:. 1, home 'rei1/bin/ugr ^x1186/b1n
上面的PATH变量里包括保存程序的标准场所：当前子目录（.）、某个用户的登录子月录和
X窗口系统的程序子目录。
加入jaVa编程群：524621833
---
## Page 24
第1章入门知识
5
C语言编译器
个UNIX程序。它大概是所有程序里最存名的了-我们来看看“HelloWorld”程序。
动手试试：我们第一个UNIX的C语言程序
1）下面是文件hello.c中的源代码
otpss> apntour#
int main()
exit(0) ;
2）输人这个程序需要使用-·个编辑器。在一个典型的Linux系统上有许许多多的编辑器可供
选用。有不少用户喜欢vi编辑器。两位作者喜欢用的是emacs，这是一个功能强大的编辑器，我
们建议读者花点儿时间学习一些它的使用方法，学习emacs的办法很简单，启动它以后按下
"Ctrl-H”组合键，然后按下表示教学的字母“t”（英文tutorial的第--个字母）。emacs的使用于
册完全是在线式的。按下“Crrl-H”组合键后再按下“i”可以查看它的子命令信息。Emacs的某
些版本可能会有菜单，你可以通过那些莱单来查阅手册和教程。
3）在POSIX兼容的系统上，C语言编译器的名字是c89；面C语言编译器的传统名字是简单的
cC。在那么多年的时间里，不同的供应商销售不同的UNIX系统，里面的C语言编译器也具有不
同的功能和编译选项，但它们一般郡叫做cc。
等到准备起草POSIX标准的时候，已经不可能定义出--个全体供应商都能够与之兼容的标
准化cc命令了。因此，该委员会决定为C语言编译器创建一个新的标准化命令，这就是c89。只
要使用的是这个命令，那么不管是在什么样的机器上，它的编译选项就永远是一致的。
在Linux系统上，你会发现任何或全部的c89、cc和gcc命令都指向系统的C语言编译器，它
通常是GNU的C语言编译器。在UNIX系统上，C语言编译器儿乎总是被称为cC。
在这本书里，我们将使用GNU的C语言编译器，因为它是和Linux发行版本一起提供的，
同时还调为它支持C语言的ANSI标准语法。如果读者使用的UNIX系统不带GNU的C语言编译
器，我们建议你设法获取这个编译器并安装上它。你可以沿着http://www.gnu.org网址上的链
接找到它、在书中我们使用命令cc的地方，把它替换为你系统里相应的C语言编译器命令就可
以了。
4）对我们的程序进行编译、链接和运行。如下所示：
$cc~0 hallo hello.c
$./ballo
Hello World
操作注释：
我们调用系统的C语言编译器把我们的C语言源代码转换为一个名为hello的可执行文件.我
加入jaVa编程群：524621833
---
## Page 25
6
Linux程序设计
运行这个文件，它显示出欢迎辞，这只是一个最简单的例子，但如果你在自已的系统上可以
做所这一点、那就应该能够编译和运行书中其余的程序示例。如果无法完成上述操作，请检卉
Development”的安装选项，你应该选上这一项。
因为这是我们运行的第一个程序，所以有些问题最好现在就指出来。hello程序很可能就保
存在你的登录子目录里。如果PATH变量没有包含指向你登录子目录的路径数据项，shell就没有
办法找到hello。而且，如果PATH变量里的某个子日录中还有另外-一个也叫做hello的程序，就会
执行那个程序。如果在PATH变量里一个这样的子目录出现在你登录子目录的前面，也会出现这
样的情况
为了避免出现这种潜在的意外，你可以在程序名的前面加t一个“”前缀（也就是./hello1
它特别指示shell去执行在当前子目录里找到的给定名称的程序。
"-0name”选项的作用是告诉编译器把可执行代码放到哪个文件里去，如果你忘了使用这个
选项，编译器会把程序放到一个名为a.ou（意思是汇编器输出）的文件里去。如果你认为自己
刚刚编译了一个程序但又找不到它，别忘了看看有没有一个a.out文件！在UNIX的早期，想在系
统上玩游戏的人们经常把游戏做为a.out来运行，就是为了避免被系统管理员提到；而许多大型
的UNIX系统安装会在每天夜里定期删除所有名为a.out的文件。
1.7获得帮助
从系统程序设计接口和标准软件的角度看，所有的UNIX系统都准备有充足的文档。这是因
为早期的UNIX系统是鼓励程序员为他们编写的程序准备一份使用手册页的。这些使用手册页总
是能够在线查阅到的，其中一些会以印刷材料的形式提供给大家。
man命令提供了访问在线使用手册页的办法。使用手册页在质量和细节上千差万别。有些只
是简单地让读者去参考另外一份更详尽的文档，另一些则会给出一份该软件工具所支持的选项
和命令的完整清单。不管是那种情况，使用手册页总是一个不错的出发点。
GNU套装软件和其他一些自由软件使用一种叫做“info”的在线文档系统。你可以使用一个
特殊的程序info或者通过emacs编辑器的info命令来在线查看全部文档。info系统的好处是你可以
通过链接和交叉引用来浏览文档并直接跳到相关的章节去。对文档的作者来说，info系统的好处
是它的文件可以从同一份源文件开始自动生成为排好版的打印文稿。
动手试试：使用手册页和info系统
1)我们来看看GNU的C语言编译器的文档。先看看使用手册页。
< man gco
GC′ ( ↓)
GNU Too1s
GCC (1)
NVMK
gcc. g** - GNU projeet C and C++ Ceap1ler (eges-1.1.2)
SYNOPSIS
g++ I option  filename ]-.
gcc ∣option |filename ]...
加入jaVa编程群：524621833
---
## Page 26
第1章入门知识
WARNTNG
ful1 docunentation of the GNU C conpiler.and is limited
The
infornation in this man _page is an extract from the
to the meaning of the options.
This man page  is not kept up to date except when volun-
between the man page and the software,please check the
teers want. to maintain it.
Ifyou findadiscrepancy