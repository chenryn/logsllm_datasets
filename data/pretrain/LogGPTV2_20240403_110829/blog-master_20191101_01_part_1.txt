## PostgreSQL HAProxy ha & load balance 代理   
### 作者                                            
digoal                                                                                     
### 日期                                                                                     
2019-11-01                                                                                  
### 标签                                                                                     
PostgreSQL , haproxy , master listen , slave(s) listen , ha , stream replication , session loadbalance , xinetd    
----                                                                                     
## 背景         
HAProxy是一个非常流行的4层、7层（http）负载均衡与会话路由软件，效率也非常高。  
虽然他没有办法直接实现pg的读写分离，但是可以实现比较简单的几类PG接入点（监听点）以及会话failover管理：  
1、一个或多个主实例。（多个主实例通常是指如下架构：pg-xl的coordinator, citus的coordinator。或者完全对等的multi-master节点。）  
![pic](20191101_01_pic_001.jpg)  
当会话对应的后端数据库检测到不符合预期状态时，主动断开会话，重联。（failover 会话）   
rw点切换后，主动断开这个节点的会话，迁移到新的rw节点  
![pic](20191101_01_pic_002.jpg)  
2、一个或多个只读实例。(例如一主多从多结构)  
当后端有多个ro节点时，可以load balance（会话级）  
![pic](20191101_01_pic_003.jpg)  
切换后，主动断开这个节点的会话，迁移到新的ro节点  
![pic](20191101_01_pic_004.jpg)  
## 实现例子  
参考 https://www.percona.com/blog/2019/10/31/postgresql-application-connection-failover-using-haproxy-with-xinetd/  
环境： CentOS 7, PostgreSQL , 主从 多台 (主从切换不需要haproxy管，haproxy只负责根据后端数据库的状态切换会话)  
准备几个东西  
- A simple shell script to check the status of the PostgreSQL instance running on the local machine.  
- A xinetd service daemonizer.  
- HAProxy: Which maintains the routing mechanism.  
### 数据库服务器部署：check 后端数据库的脚本  
这个脚本配置在数据库服务器上，用来获取数据库的三种状态：  
1、恢复中（从库），返回206  
2、主库，返回200  
3、无法确认（数据库连接不上或其他问题），返回503  
脚本如下，不同状态返回不同的内容：  
```  
#!/bin/bash  
# This script checks if a postgres server is healthy running on localhost. It will return:  
# "HTTP/1.x 200 OK\r" (if postgres is running smoothly)  
# - OR -  
# "HTTP/1.x 500 Internal Server Error\r" (else)  
# The purpose of this script is make haproxy capable of monitoring postgres properly  
# It is recommended that a low-privileged postgres  user is created to be used by this script.  
# For eg. create  user healthchkusr login password 'hc321';  
PGBIN=/usr/pgsql-10/bin  
PGSQL_HOST="localhost"  
PGSQL_PORT="5432"  
PGSQL_DATABASE="postgres"  
PGSQL_USERNAME="postgres"  
export PGPASSWORD="passwd"  
TMP_FILE="/tmp/pgsqlchk.out"  
ERR_FILE="/tmp/pgsqlchk.err"  
# We perform a simple query that should return a few results  
# 调用如下脚本，看返回结果pg_is_in_recovery看是不是在恢复中，t表示从库。f表示主库。  
VALUE=`/opt/bigsql/pg96/bin/psql -t -h localhost -U postgres -p 5432 -c "select pg_is_in_recovery()" 2> /dev/null`  
# Check the output. If it is not empty then everything is fine and we return something. Else, we just do not return anything.  
if [ $VALUE == "t" ]  
then  
    /bin/echo -e "HTTP/1.1 206 OK\r\n"  
    /bin/echo -e "Content-Type: Content-Type: text/plain\r\n"  
    /bin/echo -e "\r\n"  
    /bin/echo "Standby"  
    /bin/echo -e "\r\n"  
elif [ $VALUE == "f" ]  
then  
    /bin/echo -e "HTTP/1.1 200 OK\r\n"  
    /bin/echo -e "Content-Type: Content-Type: text/plain\r\n"  
    /bin/echo -e "\r\n"  
    /bin/echo "Primary"  
    /bin/echo -e "\r\n"  
else  
    /bin/echo -e "HTTP/1.1 503 Service Unavailable\r\n"  
    /bin/echo -e "Content-Type: Content-Type: text/plain\r\n"  
    /bin/echo -e "\r\n"  
    /bin/echo "DB Down"  
    /bin/echo -e "\r\n"  
fi  
```  
脚本位置/opt/pgsqlchk  
```  
sudo chmod 755 /opt/pgsqlchk  
```  
### 数据库服务器部署：配置 xinetd 服务（check后端）  
将/opt/pgsqlchk 检查脚本配置为xinetd服务，通过某个监听端口调用（本例为23267）  
```  
yum install -y xinetd telnet  
vi /etc/xinetd.d/pgsqlchk  
service pgsqlchk  
{  
        flags           = REUSE  
        socket_type     = stream  
        port            = 23267  
        wait            = no  
        user            = nobody  
        server          = /opt/pgsqlchk  
        log_on_failure  += USERID  
        disable         = no  
        only_from       = 0.0.0.0/0  
        per_source      = UNLIMITED  
}  
```  
添加xinetd服务  
```  
bash -c 'echo "pgsqlchk 23267/tcp # pgsqlchk" >> /etc/services'  
```  
启动xinetd服务  
```  
systemctl start xinetd  
```  
### HAproxy节点部署  
假设以上有两台数据库服务器pg0, pg1 (hostname, or dns配置).   
另一台服务器，用于部署haproxy，如下。  
```  
yum install -y haproxy  
```  
配置haproxy.cfg  
监听两个端口，5000对应check返回200状态的数据库节点(pg_is_in_recovery=f)，为rw节点  
5001对应check返回206状态的数据库节点(pg_is_in_recovery=t)，为ro节点  
```  
vi /etc/haproxy/haproxy.cfg  
global  
    maxconn 100  
defaults  
    log global  
    mode tcp  
    retries 2  
    timeout client 30m  
    timeout connect 4s  
    timeout server 30m  
    timeout check 5s  
listen stats  
    mode http  
    bind *:7000  
    stats enable  
    stats uri /  
listen ReadWrite  
    bind *:5000  
    option httpchk  
    http-check expect status 200  
    default-server inter 3s fall 3 rise 2 on-marked-down shutdown-sessions  
    server pg0 pg0:5432 maxconn 100 check port 23267  
    server pg1 pg1:5432 maxconn 100 check port 23267  
listen ReadOnly  
    bind *:5001  
    option httpchk  
    http-check expect status 206  
    default-server inter 3s fall 3 rise 2 on-marked-down shutdown-sessions  
    server pg0 pg0:5432 maxconn 100 check port 23267  
    server pg1 pg1:5432 maxconn 100 check port 23267  
```  
配置解读  
- HAProxy is configured to use TCP mode  
- HAProxy service will start listening to port 5000 and 5001   
- Port 5000 is for Read-Write connections and 5001 is for Read-Only connections  
- Status check is done using http-check feature on port 23267  
- Both server pg0 and pg1 are candidates for both Read-write and Read-only connections  
- Based on the http-check and the status returned, it decides the current role  
如果只读节点有多台，配置到server里面即可。  
启动 haproxy服务   
```  
systemctl start haproxy  
```  
### 测试  