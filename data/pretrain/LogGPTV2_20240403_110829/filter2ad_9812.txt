**Author:[HACHp1@Knownsec 404
Team](https://hachp1.github.io/posts/Web%E5%AE%89%E5%85%A8/20190809-kde45ce.html
"HACHp1@Knownsec 404 Team")**  
**Date: August 09, 2019**  
**Chinese Version:**
## Introduction
KDE Frameworks is a collection of libraries and software frameworks by KDE
readily available to any Qt-based software stacks or applications on multiple
operating systems.They offer a wide variety of commonly needed functionality
solutions like hardware integration, file format support, additional graphical
control elements, plotting functions, spell checking and more and serve as
technological foundation for KDE Plasma 5 and KDE Applications distributed
under the GNU Lesser General Public License (LGPL). The KDE framework is
currently used by several Linux distributions, including Kubuntu,
OpenMandriva, openSUSE, and OpenMandriva.
On July 28, 2019, Dominik Penner (@zer0pwn) found that there was a command
execution vulnerability when the KDE framework version was 
### Causes
KDE's desktop configuration refers to the XDG, but it includes some functions
from KDE and its implementation is also different from the XDG official. These
are the causes of the vulnerability.
It's written in KDE
docs:():
    Shell Expansion
    So called Shell Expansion can be used to provide more dynamic default values. With shell expansion the value of a configuration key can be constructed from the value of an environment variable.
    To enable shell expansion for a configuration entry, the key must be followed by [$e]. Normally the expanded form is written into the users configuration file after first use. To prevent that, it is recommend to lock the configuration entry down by using [$ie].
    Example: Dynamic Entries
    The value for the "Email" entry is determined by filling in the values of the $USER and $HOST environment variables. When joe is logged in on joes_host this will result in a value equal to "joe@joes_host". The setting is not locked down.
    [Mail Settings]
    Email[$e]=${USER}@${HOST}
To make the setting more flexible , KDE implements and supports dynamic
configuration. It is worth noticing that the `${USER}` is taken from the
environment variable. It's definitely related to command execution.
Every time the KDE desktop system needs to read an icon, the `readEntry`
function is called. We can see the process of code tracking in Penner's
reports. The implementation process of the entire vulnerability is as follows:  
Firstly, create the malicious file as follows:
    payload.desktop
    [Desktop Entry]
    Icon[$e]=$(echo hello>~/POC.txt)
Enter the file manager, and the system will parse the `.desktop` file. Enter
the process of parsing Icon, according to the instructions in the document,
the shell dynamic parsing will be called when the parameter has a `[$e]`:
kdesktopfile.cpp:
    QString KDesktopFile::readIcon() const
    {
        Q_D(const KDesktopFile);
        return d->desktopGroup.readEntry("Icon", QString()); 
    }
And the`KConfigPrivate::expandString(aValue)` is called:  
kconfiggroup.cpp:
    QString KConfigGroup::readEntry(const char *key, const QString &aDefault) const
    {
        Q_ASSERT_X(isValid(), "KConfigGroup::readEntry", "accessing an invalid group");
        bool expand = false;
        // read value from the entry map
        QString aValue = config()->d_func()->lookupData(d->fullName(), key, KEntryMap::SearchLocalized,
                         &expand);
        if (aValue.isNull()) {
            aValue = aDefault;
        }
        if (expand) {
            return KConfigPrivate::expandString(aValue);
        }
        return aValue;
    }
Then according to the official documentation of KDE, this is the process of
parsing dynamic commands. The program will get the string between the first
`$(` and the first `)` as a command, and then call `popen`:  
kconfig.cpp
    QString KConfigPrivate::expandString(const QString &value)
    {
        QString aValue = value;
        // check for environment variables and make necessary translations
        int nDollarPos = aValue.indexOf(QLatin1Char('$'));
        while (nDollarPos != -1 && nDollarPos + 1   
2.  
3.  
4.  
5.
# About Knownsec & 404 Team
Beijing Knownsec Information Technology Co., Ltd. was established by a group
of high-profile international security experts. It has over a hundred frontier
security talents nationwide as the core security research team to provide
long-term internationally advanced network security solutions for the
government and enterprises.
Knownsec's specialties include network attack and defense integrated
technologies and product R&D under new situations. It provides visualization
solutions that meet the world-class security technology standards and enhances
the security monitoring, alarm and defense abilities of customer networks with
its industry-leading capabilities in cloud computing and big data processing.
The company's technical strength is strongly recognized by the State Ministry
of Public Security, the Central Government Procurement Center, the Ministry of
Industry and Information Technology (MIIT), China National Vulnerability
Database of Information Security (CNNVD), the Central Bank, the Hong Kong
Jockey Club, Microsoft, Zhejiang Satellite TV and other well-known clients.
404 Team, the core security team of Knownsec, is dedicated to the research of
security vulnerability and offensive and defensive technology in the fields of
Web, IoT, industrial control, blockchain, etc. 404 team has submitted
vulnerability research to many well-known vendors such as Microsoft, Apple,
Adobe, Tencent, Alibaba, Baidu, etc. And has received a high reputation in the
industry.
The most well-known sharing of Knownsec 404 Team includes: [KCon Hacking
Conference](http://kcon.knownsec.com/#/ "KCon Hacking Conference"), [Seebug
Vulnerability Database](https://www.seebug.org/ "Seebug Vulnerability
Database") and [ZoomEye Cyberspace Search Engine](https://www.zoomeye.org/
"ZoomEye Cyberspace Search Engine").
* * *