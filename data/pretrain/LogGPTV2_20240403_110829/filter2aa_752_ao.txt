我们可以用 sem_wait 对一个信号量执行等待操作，用 sem_post 对一个信号量执行投递
操作。同时 GNU/Linux 还提供了一个非阻塞版本的信号量等待函数 sem_trywait。这个函数
类似 pthread_mutex_trylock——如果当时的情况应该导致阻塞，这个函数会立即返回错误
代码 EAGAIN 而不是造成线程阻塞。 
GNU/Linux 同时提供了一个用于获取信号量当前值的函数 sem_getvalue。这个函数将信
号量的值保存在第二个参数（指向一个 int 类型变量的指针）所指向的变量中。不过，你不
应使用从这个函数得到的值作为判断应该执行等待还是投递操作的依据。因为这样做可能导
致竞争状态的出现：其它线程可能在 sem_getvalue 和随后的其它信号量函数之间开始执行
并修改信号量的值。应使用属于原子操作的等待和投递代替这种做法。 
回到我们的任务队列例子中。我们可以使用一个信号量来计算在队列中等待处理的任务
数量。代码列表 4.12 使用一个信号量控制队列。函数 enqueue_job 负责向队列中添加一个
任务。 
代码列表 4.12 (job-queue3.c) 用信号量控制的任务队列 
#include  
#include  
#include  
struct job { 
  /* 维护链表结构用的成员。*/ 
  struct job* next; 
  /* 其它成员，用于描述任务。*/ 
}; 
/* 等待执行的任务队列。*/ 
www.AdvancedLinuxProgramming.com 
70
struct job* job_queue; 
2 非 0 值表示的是可以在进程之间共享的信号量。GNU/Linux 系统中的这种信号量不支持在进程之间共
享。 
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
/* 用于保护 job_queue 的互斥体。*/ 
pthread_mutex_t job_queue_mutex = PTHREAD_MUTEX_INITIALIZER; 
/* 用于计数队列中任务数量的信号量。*/ 
sem_t job_queue_count; 
/* 对任务队列进行唯一的一次初始化。*/ 
void initialize_job_queue () 
{ 
  /* 队列在初始状态为空。*/ 
  job_queue = NULL; 
  /* 初始化用于计数队列中任务数量的信号量。它的初始值应为 0。*/ 
  sem_init (&job_queue_count, 0, 0); 
} 
/* 处理队列中的任务，直到队列为空。*/ 
void* thread_function (void* arg) 
{ 
  while (1) { 
    struct job* next_job; 
    /* 等待任务队列信号量。如果值为正，则说明队列中有任务，应将信号量值减一。 
       如果队列为空，阻塞等待直到新的任务加入队列。*/ 
    sem_wait (&job_queue_count); 
    /* 锁定队列上的互斥体。*/ 
    pthread_mutex_lock (&job_queue_mutex); 
    /* 因为检测了信号量，我们确信队列不是空的。获取下一个任务。*/ 
    next_job = job_queue; 
    /* 将这个任务从队列中移除。*/ 
    job_queue = job_queue->next; 
    /* 解除队列互斥体的锁定因为我们已经不再需要操作队列。*/ 
    pthread_mutex_unlock (&job_queue_mutex); 
    /* 处理任务。*/ 
    process_job (next_job); 
    /* 清理资源。*/ 
    free (next_job); 
  } 
  return NULL; 
} 
www.AdvancedLinuxProgramming.com 
71
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
/* 向任务队列添加新的任务。*/ 
void enqueue_job (/* 在这里传递特定于任务的数据…… */) 
{ 
  struct job* new_job; 
  /* 分配一个新任务对象。*/ 
  new_job = (struct job*) malloc (sizeof (struct job)); 
  /* 在这里设置任务中的其它字段……*/ 
  /* 在访问任务队列之前锁定列表。*/ 
  pthread-mutex_lock (&job_queue_mutex); 
  /* 将新任务加入队列的开端。*/ 
  new_job->next = job_queue; 
  job_queue = new_job; 
/* 投递到信号量通知有新任务到达。如果有线程被阻塞等待信号量，一个线程就会恢复执行并处
理这个任务。*/ 
  sem_post (&job_queue_count); 
  /* 将任务队列解锁。*/ 
  pthread_mutex_unlock (&job_queue_mutex); 
} 
在从队列前端取走任务之前，每个线程都会等待信号量。如果信号量的值是 0，则说明
任务队列为空，线程会阻塞，直到信号量的值恢复正值（表示有新任务到达）为止。 
函数 enqueue_job 将一个任务添加到队列中。就如同 thread_function 函数，它需要在
修改队列之前锁定它。在将任务添加到队列之后，它将信号量的值加一以表示有新任务到达。
在列表 4.12 中的版本中，工作线程永远不会退出；当没有任务的时候所有线程都会在
sem_wait 中阻塞。 
4.4.6 条件变量 
我们已经展示了如何在两个线程同时访问一个变量的时候利用互斥体进行保护，以及如
何使用信号量实现共享的计数器。条件变量是 GNU/Linux 提供的第三种同步工具；利用它
你可以在多线程环境下实现更复杂的条件控制。 
假设你要写一个永久循环的线程，每次循环的时候执行一些任务。不过这个线程循环需
要被一个标志控制：只有当标志被设置的时候才运行，标志被清除的时候线程暂停。 
代码列表 4.13 显示了你可以通过在不断自旋（重复循环）以实现这一点。每次循环的
时候，线程都检查这个标志是否被设置。因为有多个线程都要访问这个标志，我们使用一个
互斥体保护它。这种实现虽然可能是正确的，但是效率不尽人意。当标志没有被设置的时候，
线程会不断循环检测这个标志，同时会不断锁定、解锁互斥体，浪费 CPU 时间。你真正需
要的是这样一种方法：当标志没有设置的时候让线程进入休眠状态；而当某种特定条件出现
www.AdvancedLinuxProgramming.com 
72
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
时，标志位被设置，线程被唤醒。 
代码列表 4.13 (spin-condvar.c) 一个简单的条件变量实现 
#include  
int thread_flag; 
pthread_mutex_t thread_flag_mutex; 
void initialize_flag() 
{ 
  pthread_mutex_init (&thread_flag_mutex, NULL); 
  thread_flag = 0; 
} 
/* 当标志被设置的时候反复调用 do_work，否则自旋等待。*/ 
void* thread_function (void* thread_arg) 
{ 
  while (1) { 
    int flag_is_set; 
    /* 用一个互斥体保护标志。*/ 
    pthread-mutex_lock (&thread_flag_mutex); 
    flag_is_set = thread_flag; 
    pthread_mutex_unlock (&thread_flag_mutex); 
    if (flag_is_set) 
      do_work (); 
    /* 否则什么也不做，直接进入下一次循环。*/ 
  } 
  return NULL; 
} 
/* 将线程标志的值设置为 flag_value。*/ 
void set_thread_flag (int flag_value) 
{ 
  /* 用一个互斥体保护线程标志。*/ 
  pthread_mutex_lock (&thread_flag_mutex); 
  thread_flag = flag_value; 
  pthread_mutex_unlock (&thread-flag_mutex); 
} 
条件变量将允许你实现这样的目的：在一种情况下令线程继续运行，而相反情况下令线
www.AdvancedLinuxProgramming.com 
73
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
程阻塞。只要每个可能涉及到改变状态的线程正确使用条件变量，Linux 将保证当条件改变
的时候由于一个条件变量的状态被阻塞的线程均能够被激活。 
如同信号量，线程可以对一个条件变量执行等待操作。如果线程 A 正在等待一个条件
变量，它会被阻塞直到另外一个线程，设为线程 B，向同一个条件变量发送信号以改变其
状态。不同于信号量，条件变量没有计数值，也不占据内存空间；线程 A 必须在 B 发送信
号之前开始等待。如果 B 在 A 执行等待操作之前发送了信号，这个信号就丢失了，同时 A
会一直阻塞直到其它线程再次发送信号到这个条件变量。 
你可以这样使用条件变量以使前面那个例子运行得更有效率： 
· thread_function 中的循环检查标志。如果标志没有被设置则线程开始等待条件变量。 
· set_thread_flag 函数在改变了标志的值之后向条件变量发送信号。这样，如果 
thread_function 处于等待条件变量的状态，则它会恢复运行并重新检查标志。 
这里有一个问题：检查状态的操作与对条件变量进行的等待或发送信号操作之间可能形
成竞争状态。假设 thread_function 检查了标志，发现标志没有被设置。这时候，Linux 调
度器暂停了这条线程而返回运行主线程。很偶然的，主线程正处于 set_thraed_flag 中。它
设置了标志，然后向条件变量发送了信号。因为这个时候没有线程在等待这个条件变量的信
号（别忘了，thread_function 在开始等待信号量上的事件之前就被暂停了执行），这个信号
就此丢失了。现在，Linux 重新调度并回到原先的线程，这个线程开始等待信号并很可能会
永远等待下去。 
要解决这个问题，我们需要用一个互斥体将标志变量和条件变量绑定在一起。幸运的是，
GNU/Linux 刚好提供了这个机制。每个条件变量都必须与一个互斥体共同使用，以防止这
种竞争状态的发生。这种设计下，线程函数应遵循以下步骤： 
1. 
thread_function 中的循环首先锁定互斥体并且读取标志变量的值。 
2. 
如果标志变量已经被设定，该线程将互斥体解锁然后执行工作函数 
3. 
如果标志没有被设置，该线程自动锁定互斥体并开始等待条件变量的信号 
这里最关键的特点就在第三条。这里，GNU/Linux 系统允许你用一个原子操作完成解
除互斥体锁定和等待条件变量信号的过程而不会被其它线程在中途插入执行。这就避免了在
thread_function 中检测标志和等待条件变量的过程中其它线程修改标志变量并对条件变量
发送信号的可能性。 
条件变量用 pthread_cond_t 类型表示。别忘了每个条件变量都必须与一个互斥体伴生。
这里是可以用于操作条件变量的函数。 
· 通过调用 pthread_cond_init 初始化一个条件变量。第一个参数是一个指向
pthread_cond_t 变量的指针。第二个参数是一个指向条件变量属性对象的指针；这
个参数在 GNU/Linux 系统中是被忽略的。 
互斥体对象必须单独被初始化。具体请参考 4.4.2 节“互斥体” 
· 调用 pthread_cond_signal 向一个条件变量发送信号。在该条件变量上阻塞的线程
将被恢复运行。如果没有线程正在等待这个信号，则这个信号会被忽略。该函数的
参数是一个指向 pthread_cond_t 类型变量的指针。 
相似的，pthread_cond_broadcast 函数会将所有等待该条件变量的线程解锁而不是
仅仅解锁一个线程。 
· 调用 pthred_cond_wait 会让调用线程阻塞直到条件变量收到信号。该函数的第一
个参数是指向一个 pthread_cond_t 类型变量的指针，第二个参数是指向一个
pthread_mutex_t 类型变量的指针。 
当调用 pthread_cond_wait 的时候，互斥体对象必须已经被调用线程锁定。这个函
www.AdvancedLinuxProgramming.com 
74
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
数以一个原子操作解锁互斥体并锁定条件变量等待信号。当信号到达且调用线程被