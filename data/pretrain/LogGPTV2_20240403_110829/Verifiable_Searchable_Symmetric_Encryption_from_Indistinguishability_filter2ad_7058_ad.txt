### Publicly Verifiable Searchable Symmetric Encryption (SSE)

#### 1. Setup and Key Generation
- **Key Generation:**
  - For \( j = 1, \ldots, |W| \times |ID| \):
    - Choose \( r_{Xj} \) and \( r_{Yj} \) randomly from the range of \( \pi \).
    - Set \( X_j = g^{r_{Xj}} \).
    - Run \( (sk_Y, pk_Y) \leftarrow \Gamma_Y.\text{Gen}(1^\lambda) \).
    - Set \( Y_j = (r_{Yj}, \Gamma_Y.\text{Sign}(sk_Y, r_{Yj})) \).

- **Public Parameters:**
  - \( g \) is a generator of a cyclic group \( G \) of prime order \( p \).
  - \( pk_Y \) is the public key for the signature scheme.
  - \( \pi \) is a pseudorandom permutation.
  - \( F \) is a pseudorandom function.

#### 2. Adversary Interaction
- **Query Construction:**
  - The adversary \( A \) repeatedly chooses a query \( (s, x_1, x_2, \ldots, x_m) \).

- **Simulator Response:**
  - On input \( (1-9) \), the simulator \( S \) acts as follows:
    - If the term \( s \) has not appeared before (leakage 4):
      - Construct \( stag \) using the simulator of TSet on input \( (1, 4, 5) \).
      - Construct \( vtag \) using the simulator of TSet on input \( (3, 4, 5) \).
    - If the term \( s \) has been repeated in previous queries:
      - Recall the values of \( r_{Yj} \) and \( vk_Y \) from the previous repetition of \( s \).
      - Construct \( t \) using the simulator of TSet on input \( (2, 5, 6, 7, 8) \).

- **Token Construction:**
  - For each \( i = 1, \ldots, \#x \) and \( c = 1, \ldots, |DB(s)| \):
    - If the pair \( (x_i, id_{sc}) \) has not been repeated yet (leakage 7):
      - Randomly choose \( j \in \{1, \ldots, |W| \times |ID|\} \) that has not already been selected.
      - Set \( xtoken[i, c] = g^{r_{Xj}} \).
      - Choose \( xtag0[i, c] \) and \( xtag1[i, c] \) randomly from \( Z_p \).
      - If \( b[i, c] = 1 \):
        - Set \( vk0[i, c] = g^{c \cdot xtag0[i, c]} \).
        - Set \( vk1[i, c] = g^{c \cdot xtag1[i, c]} \).
      - If \( b[i, c] = 0 \):
        - Set \( vk0[i, c] = g^{c \cdot xtag0[i, c]} \).
        - Set \( vk1[i, c] = g^{c \cdot xtag1[i, c]} \).
    - If the pair \( (x_i, id_{sc}) \) has been repeated in previous queries:
      - Assign \( j \) its value from the previous repetition of the corresponding pair.
      - Set \( xtoken[i, c] = g^{r_{Xj}} \).
      - Construct new \( xtag0[i, c] \), \( xtag1[i, c] \), \( vk0[i, c] \), and \( vk1[i, c] \) according to the steps 1-3.

#### 3. Security Analysis
- **Adaptive Security:**
  - The construction PV-SSE2 is L-adaptively secure because:
    - (Enc, Dec) is a CPA-secure symmetric encryption scheme.
    - \( F_I^p \), \( F_Z^p \) are secure pseudorandom functions.
    - \( TSet \) is LT-adaptively secure, so \( TSet \), \( stag \), and \( t \) are computationally indistinguishable.
    - \( \pi \) is a pseudorandom permutation, and \( F \) is a pseudorandom function, making \( vtag_Y \) and \( Y \) computationally indistinguishable.
    - \( F_I^p \), \( F_X^p \), and \( F_Z^p \) are pseudorandom functions, and the DDH assumption holds in \( G \), ensuring \( X \) and \( xtoken[i, c] \) are computationally indistinguishable.
    - \( F_I^p \), \( F_X^p \), and \( F_Z^p \) are pseudorandom functions, and the DDH assumption holds in \( G \), ensuring \( vk0[i, c]^* \), \( vk1[i, c]^* \), \( xtag0[i, c]^* \), and \( xtag1[i, c]^* \) are computationally indistinguishable from their counterparts.

- **Public Soundness:**
  - **Theorem 8:** If \( F_I^p \), \( F_X^p \), and \( F_Z^p \) are secure pseudorandom functions, \( g \) is a one-way function, the DDH assumption holds in group \( G \), and conditions from Theorem 4 hold, then the PV-SSE2 construction is publicly sound.
  - **Proof:**
    - Consider the query \( q = (w_1, w_2, \ldots, w_m) \).
    - Define the events:
      - \( A \): The adversary changes the list \( R \).
      - \( B \): The adversary does not completely process the list \( R \).
      - \( C \): For some pairs \( (i, c) \), the adversary changes the value \( b[i, c] \).
    - We have:
      \[
      \Pr[\text{Sound}_\Sigma^A(\lambda) = 1] \leq \Pr[A] + \Pr[B] + \Pr[C].
      \]
    - By Theorem 4:
      \[
      \Pr[A] \leq \text{negl}_1(\lambda) \quad \text{and} \quad \Pr[B] \leq \text{negl}_2(\lambda).
      \]
    - To compute \( \Pr[C] \):
      \[
      C = \text{the adversary can produce } g^{(F_X^p(K_X, w_i).xind_{1-b||wi})^{-1}.r_{ic}^{1-b}}.
      \]
    - Define the events:
      - \( B_1 \): \( A(TSet, X) \rightarrow g^{F_X^p(K_X, w_i).xind_{1-b||wi}} \) or \( g^{F_X^p(K_X, w_i).z_{1-b||wi}} \).
      - \( B_2 \): \( A(\text{all } vk_{1-b}[i, c] \text{ received so far}) \rightarrow g^{F_X^p(K_X, w_i).xind_{1-b||wi}} \).
      - \( B_3 \): \( A(\text{all } xtag_{1-b}[i, c] \text{ received so far}) \rightarrow F_X^p(K_X, w_i).xind_{1-b||wi} \).
    - Clearly:
      \[
      \Pr[C] \leq \Pr[B_1] + \Pr[B_2] + \Pr[B_3].
      \]
    - From the DDH assumption and security of PRFs \( F_X^p \) and \( F_Z^p \):
      \[
      \Pr[B_1] \leq \text{negl}_3(\lambda) \quad \text{and} \quad \Pr[B_2] \leq \text{negl}_4(\lambda).
      \]
    - In event \( B_3 \), to get \( F_X^p(K_X, w_i) \), the server must create a system of equations through the values \( xtag_{1-b}[i, c] \). For various queries, the values \( r_{ic} \) are random, ensuring the indistinguishability.