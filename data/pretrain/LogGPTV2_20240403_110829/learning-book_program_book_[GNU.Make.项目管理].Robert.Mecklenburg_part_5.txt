从Texinfo源代码来创建GNUinfo文件
check
执行与应用程序相关的任何测试
---
## Page 35
规则
25
工作目标TAGS实际上不是一个假想工作目标，因为ctags和etags程序的输出就是
名为TAGS的文件。此处之所以提到它，是因为就我们所知，它是绝无仅有的、标准的
非假想工作目标（nonphonytarget）。
空工作目标
空工作目标（emptytarget）如同假想工作目标一样，可用来发挥make的潜在能力。假
想工作目标总是尚未更新，所以它们总是会被执行，并且总是会使得它们的“依存对象”
（工作目标所关联到的必要条件）被重建。但假设我们有若干命令，它们不会输出任何
文件，只是偶尔需要被执行一下，而且我们并不想让我们的依存对象（dependent）被更
新，该这么办？此时，我们可以建立一个规则，它的工作目标是一个空文件（有时称为
cookie):
prog:sizeprog.o
$（CC）$（LDFLAGS）-O$@$^
size:prog.o
size$^
touch size
请注意，size规则在执行完之后，会使用touch创建一个名为size的空文件。这个空
文件可作为它的时间戳，因此make只在prog.o被更新之后才会执行size规则。此外，
prog的必要条件size将不会导致prog的更新，除非它的目标文件的时间戳也在工作目
标（的时间戳）之后。
不过事先了解一下这个变量应该不会有什么问题。对每个规则的命令脚本部分来说，
后。例如，下面这个规则将会输出自从上次执行makeprint之后，变更过的所有文件：
print:*.[hc]
lpr $?
touch s@
通常，空文件可用来标明最近发生了一个特殊的事件。
变量
现在让我们来查看曾在范例中出现的若干变量。其中最简单的变量具有如下的语法：
$(variable-name)
---
## Page 36
26
第二章
这代表我们想要扩展（expand）名为variable-name的变量。任何文字都可以包含在变
量之中，而且大多数字符（包括标点符号）都可以用在变量名称上。例如，内含C编译
命令的变量可以取名为COMPILE.C。一般来说，你必须以S（）或S（）将变量名称括住，
这样make才会认得。有一个例外：变量名称若是单一字符则不需要为它加上圆括号。
通常makefile文件中都会定义许多变量，不过其中有许多特殊变量是make自动定义的。
这些变量中的若干变量可供用户用来控制make的行为，其余变量则是供make用来跟用
户的makefile文件沟通。
自动变量
当规则相符时，make会设定自动变量（automaticvariable）。通过它们，你可以取用工
作目标以及必要条件中的元素，所以你不必指明任何文件名称。要避免重复，自动变量
就相当有用，它们也是定义较一般的模式规则时不可少的项目（稍后会讨论到）。
下面是7个“核心”的自动变量：
$@工作目标的文件名。
S档案文件成员（archivemember）结构中的文件名元素。（译注2）
$S-06
lexer.c:lexer.1
flex-t$<>$θ
以VPATH和vpath来查找文件
到目前为止我们所举的例子都相当简单：makefile与所有的源文件都存放在同一个目录
下。真实世界的程序比较复杂（请问，你上一次开发只有一个目录的项目是在什么时
候？）。现在让我们重构（refactor）先前的范例，进行较实际的文件布局。我们可以通
过将main重构成一个名为counter的函数来修改我们的单词计数程序。
#include
#include 
void counter（int counts[4])
{
while（yylex()）
counts[o]=fee_count:
counts[1]=fie_count;
counts[2]=foe_count;
counts[3]=fum_count;
---
## Page 38
28
第二章
一个可重复使用的程序库函数（libraryfunction），在头文件（headerfile）中应该要有
一个声明（declaration），所以让我们创建counter.h头文件来包含此声明：
#ifndef COUNTER_H_
#define COUNTER_H_
extern void
counter（intcounts[4]);
#endif
我们还可以把lexer.i的声明放在lexer.h头文件中：
#ifndef LEXER_H_
#define LEXER_H
extern int fee_count,fie_count，foe_count,fum_count;
extern intyylex(void）;
#endif
按源代码树（sourcetree）的布局惯例，头文件会被放在include目录中，而源文件会被
放在src目录里。我们也会这样做，并把makefile放在它们的上层目录（parentdirectory）。
现在范例程序的布局如图2-1所示。
makefile
include
counter.h
lexer.h
count_words.c
counter.c
lexer.l
图2-1：范例源代码树的布局
既然现在我们的源文件中包含了头文件，这些新产生的依存关系就应该记录在我们的
makefile文件中，这样，当我们的头文件有所变动时，才会更新相应的目标文件。
count_words:count_words.ocounter.o lexer.o-1f1
eS0-$
---
## Page 39
规则
29
count_words.o:count_words.c include/counter.h
gcc-c$$-6
lexer.c:lexer.1
flex-t $<>$@
现在运行make将会看到如下的结果：
S make
make:***No rule to make targetcount_words.c'，needed bycount_words.o'.Stop.
咦，发生了什么事？makefile想要更新count_words.c，不过那是一个源文件！让我们来
“扮演make的角色”。我们的第一个必要条件是count_words.o。我们并未看到这个文
件，所以我们会去查找一个规则以便创建此文件。用来创建count_words.o的具体规则
（explicitrule）指向count_words.c，但为何make找不到这个源文件？因为这个源文件
并非位于当前目录中，而是被放在src目录里。除非你告诉make，否则它只会在当前目
录中找寻工作目标以及必要条件。我们要怎么做才有能让make到src目录找寻到源文
件？也就是说，要如何告诉make我们的源代码放在哪里？
你可以使用VPATH和vpath来告诉make到不同的目录去查找源文件。要解决我们眼
前的问题，可以在makefile文件中对VPATH进行如下的赋值动作：
VPATH =SrC
这表示，如果make所需要的文件并未放在当前目录中，就应该到src目录去找。为了
让make的输出更为明确，makefile本身也做了调整（黑体字部分），此时makefile会像
下面这样：
VPATH = SrC
count_words:count_words.o counter.olexer.o-1f1
gcc$-oS@
count_words.o:count_words.cinclude/counter.h
$0->S-6
counter.o:counter.cinclude/counter.h include/lexer.h
gCC-C$S-5
lexer.c:lexer.1
flex-t$<>$
现在运行make将会看到如下的结果：
---
## Page 40
30
第二章
S make
gcc-c src/count_words.c-o count_words.o
src/count_words.c:2:21:counter.h:No such file or directory
make:***[count_words.o] Error1
请注意，现在make可以编译第一个文件了，因为它会为该文件正确填入相对路径。使
用自动变量的另一个理由是：如果你写出具体的文件名，make将无法为该文件填上正
确的路径。可惜并未编译成功，因为gcc无法找到引l人文件（includefile）。我们只要
rule）就可以解决这个问题了：
CPPFLAGS=-I include
请注意，由于头文件被放在include目录中，所以还必须调整VPATH（黑体字部分）：
VPATH=SrC include
现在我们可以顺利完成编译的工作了：
Smake
gcc-I include-c src/count_words.c-o count_words.o
gcc-Iinclude-csrc/counter.c-ocounter.o
flex-tsrc/lexer.1>1exer.c
gcc-Iinclude-clexer.c-olexer.o
gcccount_words.ocounter.olexer.o/1ib/libfl.a-ocount_words
VPATH变量的内容是一份目录列表，可供make搜索其所需要的文件。这份目录列表可
用来搜索工作目标以及必要条件，但不包括脚本中所提及的文件。这份目录列表的分隔
符在Unix上可以是空格或冒号，在Windows上可以是空格或分号。我喜欢使用空格，
因为它可以在任何系统上都通行无阻，这样我们就可以避开冒号与分号的纠结，此外，
以空格为分隔符将会使得目录较容易阅读。
虽然VPATH变量可以解决以上的搜索问题，但是也有限制。make将会为它所需要的任
何文件搜索VPATH列表中的每个目录，如果在多个目录中出现同名的文件，则make只
会撰取第一个被找到的文件。有时这可能会造成问题。
此时可以使用vpath指令（directive）。这个指令的语法如下所示：
vpath pattern directory-list
所以，之前所使用的VPATH变量可以改写成：
vpath 8.1 .c src
vpath.h include
现在，我们告诉了make应该在src目录中搜索.c文件，我们还告诉它，应该在include
---
## Page 41
规则
31
目录中搜索h文件（所以我们可以从头文件必要条件中移除include/字样）。在较复杂
的应用程序中，这项控制功能可省去许多头痛和调试的时间。
件放在源代码树（sourcetree）而目标文件放在二进制代码树（binarytree）时，要如
何编译应用程序”的问题，虽然相关但却是不相同的。尽管适当地使用vpath也可以解
决这个新问题，不过整个工作很快就会复杂到单靠vpath无法处理的地步。我们将会在
稍后详细探讨这个问题。
模式规则
我们现在所看到的makefile范例已经有点长了。如果这是一个仅包含十几个或更少文件
的小型程序，我们可能并不担心；但是如果这是一个包含成百上千个文件的大型程序，
手动指定每个工作目标、必要条件以及命令脚本将会变得不切实际。此外，在我们的
makefile中，这些命令脚本代表着重复的程序代码。如果这些命令脚本包含了一个缺陷
或曾经被修改过，那么我们必须更新所有相关的规则。这将会给维护带来困难，而且会
成为各种缺陷的源头。
许多程序在读取文件以及输出文件时都会依照惯例。例如，所有C编译器都会假设，文
件若是以.c为扩展名，其所包含的就是C源代码，把扩展名从.c替换成.o（对Windows
上的某些编译器来说是.obj）就可以得到目标文件的文件名。在前一章中，我们可以看
到flex的输人文件使用了.1这个扩展名，它的输出使用了.c这个扩展名。
这些惯例让make可以通过文件名模式的匹配来简化规则的建立，以及提供内置规则来
处理它们。举例来说，通过这些内置的规则，我们可以把之前的这17行（含空白行）的
makefile缩减成7行：
VPATH=srcinclude
CPPFLAGS=-Iinclude
count_words:counter.olexer.o-1f1
count_words.o:counter.h
counter.o:counter.h 1exer.h