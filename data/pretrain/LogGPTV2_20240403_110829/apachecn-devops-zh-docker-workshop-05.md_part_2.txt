    ```
    mkdir init
    cd init
    ```
3.  Create a Bash script file with the following content and save it as `prepare.sh`:
    ```
    #!/usr/bin/env sh
    rm /data/index.html
    echo "Welcome from Docker Compose!" >> /data/index.html
    echo "" >> /data/index.html
    ```
    该脚本使用`echo`命令生成一个示例 HTML 页面。
4.  Create a `Dockerfile` with the name `Dockerfile` and the following content:
    ```
    FROM busybox
    ADD prepare.sh /usr/bin/prepare.sh
    RUN chmod +x /usr/bin/prepare.sh
    ENTRYPOINT ["sh", "/usr/bin/prepare.sh"] 
    ```
    这个`Dockerfile`基于`busybox`，这是一个用于节省空间的容器的小型操作系统，它将`prepare.sh`脚本添加到文件系统中。此外，它使文件可执行，并将其设置为`ENTRYPOINT`命令。`ENTRYPOINT`命令，在我们的例子中，`prepare.sh`脚本是用 Docker 容器的开始初始化的。
5.  Change the directory to the parent folder with the `cd ..` command and create a `docker-compose.yaml` file with the following content:
    ```
    version: "3"
    services:
      init:
        build:
          context: ./init
        volumes:
          - static:/data
      server:
        image: nginx
        volumes:
          - static:/usr/share/nginx/html  
        ports:
          - "8080:80"
    volumes:
      static:
    ```
    这个`docker-compose`文件创建了一个名为`static`的卷和两个名为`init`和`server`的服务。该卷安装在两个容器上。此外，服务器还发布了端口`8080`，连接容器端口`80`。
6.  Start the application with the following command in `detach` mode to continue using the Terminal:
    ```
    docker-compose up --detach 
    ```
    下图显示了执行上述命令时发生的情况:
    ![Figure 5.7: Starting the application ](img/B15021_05_07.jpg)
    图 5.7:启动应用
    上述命令在`detached`模式下创建并启动容器。它从创建`server-with-compose_default`网络和`server-with-compose_static`卷开始。然后，它从*步骤 4* 使用`Dockerfile`构建`init`容器，为服务器下载`nginx` Docker 映像，并启动容器。最后，它打印容器的名称，并使它们在后台运行。
    注意
    您可以忽略关于 Swarm 模式的警告，因为我们希望将所有容器部署到同一个节点。
7.  Check the status of the application with the `docker-compose ps` command:
    ![Figure 5.8: Application status ](img/B15021_05_08.jpg)
    图 5.8:应用状态
    该输出列出了两个容器。`init`容器成功退出，代码为`0`，而`server`容器为`Up`，其港口可用。这是预期的输出，因为`init`容器被设计为准备`index.html`文件并完成其操作，而`server`容器应该总是启动并运行。
8.  Open `http://localhost:8080` in the browser. The following figure shows the output:
    ![Figure 5.9: Server output ](img/B15021_05_09.jpg)
    图 5.9:服务器输出
    *图 5.9* 显示了`init`容器创建的`index.html`页面。换句话说，这表明`docker-compose`创建了该卷，将其安装到容器上，并成功启动它们。
9.  Stop and remove all the resources with the following command if you do not need the application up and running:
    ```
    docker-compose down
    ```
    该命令将返回如下输出:
    ![Figure 5.10: Stopping the application  ](img/B15021_05_10.jpg)
图 5.10:停止应用
在本练习中，多容器应用由`docker-compose`创建和配置。网络和卷选项存储在`docker-compose.yaml`文件中。此外，CLI 命令还显示了创建应用、检查状态和删除应用的操作。
在下一节中，将介绍 Docker Compose 环境中应用的配置选项。
# 服务的配置
云原生应用应该将其配置存储在环境变量中。环境变量很容易在不同的平台之间改变，而无需改变源代码。环境变量是存储在基于 Linux 的系统中并由应用使用的动态值。换句话说，变量可以通过改变它们的值来配置应用。
例如，假设您的应用使用一个`LOG_LEVEL`环境变量来配置记录的内容。如果您将`LOG_LEVEL`环境变量从`INFO`更改为`DEBUG`并重新启动应用，您将看到更多的日志，并且能够更轻松地排除问题。此外，您可以将具有不同环境变量集的同一应用部署到试运行、测试和生产中。同样，在 Docker Compose 中配置服务的方法是为容器设置环境变量。
在 Docker Compose 中有三种定义环境变量的方法，优先级如下:
1.  使用合成文件
2.  使用外壳环境变量
3.  使用环境文件
如果环境变量变化不是很频繁，但是容器需要，最好将它们存储在`docker-compose.yaml`文件中。如果有敏感的环境变量，比如密码，建议在调用`docker-compose` CLI 之前通过 shell 环境变量传递。但是，如果变量的数量很大，并且在测试、试运行或生产系统之间存在差异，则更容易将它们收集到`.env`文件中，并将其传递到`docker-compose.yaml`文件中。
在`docker-compose.yaml`文件的`services`部分，可以为每个服务定义环境变量。例如，`server`服务的`LOG_LEVEL`和`METRICS_PORT`环境变量在 Docker Compose 文件中设置如下:
```
server:
  environment:
    - LOG_LEVEL=DEBUG
    - METRICS_PORT=8444
```
当`docker-compose.yaml`文件中没有为环境变量设置值时，可以通过运行`docker-compose`命令从外壳中获取值。例如，`server`服务的`HOSTNAME`环境变量将直接从 shell 中设置:
```
server:
  environment:
    - HOSTNAME
```
当运行`docker-compose`命令的外壳没有`HOSTNAME`环境变量的值时，容器将以一个空的环境变量开始。
此外，还可以将环境变量存储在`.env`文件中，并在`docker-compose.yaml`文件中进行配置。一个示例`database.env`文件可以用如下键值列表来构造:
```
DATABASE_ADDRESS=mysql://mysql:3535
DATABASE_NAME=db
```
在`docker-compose.yaml`文件中，环境变量文件字段在相应的服务下配置如下:
```
server:
  env_file:
    - database.env
```
当 Docker Compose 创建`server`服务时，它会将`database.env`文件中列出的所有环境变量设置到容器中。
在下面的练习中，您将使用 Docker Compose 中的所有三种配置方法来配置应用。
## 练习 5.02:使用 Docker 编写配置服务
Docker Compose 中的服务由环境变量配置。在本练习中，您将创建一个 Docker Compose 应用，该应用通过设置变量的不同方法进行配置。在名为`print.env`的文件中，您将定义两个环境变量。此外，您将在`docker-compose.yaml`文件中创建和配置一个环境变量，并从终端动态传递一个环境变量。您将看到来自不同来源的四个环境变量如何在您的容器中聚集在一起。
要完成练习，请执行以下步骤:
1.  创建一个名为`server-with-configuration`的文件夹，并使用`cd`命令导航到该文件夹:
    ```
    mkdir server-with-configuration
    cd server-with-configuration
    ```
2.  Create an `.env` file with the name `print.env` and the following content:
    ```
    ENV_FROM_ENV_FILE_1=HELLO
    ENV_FROM_ENV_FILE_2=WORLD
    ```
    在这个文件中，两个环境变量`ENV_FROM_ENV_FILE_1`和`ENV_FROM_ENV_FILE_2`是用它们的值定义的。
3.  Create a file with the name `docker-compose.yaml` and the following content:
    ```
    version: "3"
    services:
      print:
        image: busybox
        command: sh -c 'sleep 5 && env'
        env_file:
        - print.env
        environment:
        - ENV_FROM_COMPOSE_FILE=HELLO
        - ENV_FROM_SHELL
    ```
    在这个文件中，定义了一个单容器应用，容器运行`env`命令打印环境变量。它还使用名为`print.env`的环境文件，以及另外两个环境变量`ENV_FROM_COMPOSE_FILE`和`ENV_FROM_SHELL`。
4.  使用以下命令将`ENV_FROM_SHELL`导出到外壳:
    ```
    export ENV_FROM_SHELL=WORLD
    ```