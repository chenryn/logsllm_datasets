applies in these cases. INGRES, however, uses a slight variation of nested iteration in both (c) and (d).
EMP is scanned and sorted into a temporary before it is nest iterated with DEPT. Sorting only the inner
relation ontheinnerjoin attribute alleviates havingtoscantheentireinnerjoin relation oneveryiteration
because the scan halts after a value greater than the current outer join attribute has been reached. In cer-
tain cases, this can be helpful; however, in these cases, there is really no advantage because only asingle
tuple results after scanning EMP. In fact, these INGRES and POSTGRES plans are equivalent in cost
because the cost of the extra sort step in the INGRES trees is zero, and in both cases, EMP and DEPT
onlyneedtobescannedonce.
POSTGRES’s plan (e) is similar to INGRES’s except INGRES takes advantage of an ISAM’s par-
tial sort and thus uses a slight variation of a merge-sort join with EMP and DEPTINDEX. Again, only
one tuple qualifies after scanning EMP, resulting in a sort cost of zero. Ignoring the sort step, the two
plansareactuallyequivalent.
Plan (f) is an example where INGRES’streatment ofanaccessmethod’s partial orderingis helpful.
In this particular case, INGRES takes advantage of the feature to join EMPINDEX with DEPT. The
result of this join is then sorted on the tidp field so EMP can be scanned in page order. According to
POSTGREScost estimates, the INGRESplan is better by about afactoroffourto five. It is significantly
better than thePOSTGRESplanpartlybecauseofINGRES’streatment ofsecondaryindices,butmoreso
duetoINGRESaccountingforanISAM’spartial sort. Therefore,thefactthat INGRESwassignificantly
betterinthiscaseismisleadingforthereasonsdiscussedintheprevioussubsection.
50
The last plan pair (g) illustrates the one case where different indices are selected by POSTGRES
and INGRES. INGRES chooses to use the index defined on ‘‘floor,’’ while POSTGRES chooses the
index defined on ‘‘dept.’’ POSTGRES chose the plan it did because according to its cost estimates the
selected plan was a mere 0.27% better than aplan equivalent to that chosenby INGRES. Thus, although
thetwooptimizerschosedifferentplans,thedifferenceisveryminor.
The set of tests just described indicate that differences between selected INGRES and POSTGRES
plansarerathersubtle,resulting inminorvariations,exceptinonecasewherethedifferenceisminimized
by other circumstances. Additional strategies employed by INGRES resulted in greaterdifferenceswhen
thefollowingthree-wayjoin:
retrieve(EMP.name,DEPT.floor,WATER.cid)where
EMP.dept=DEPT.dnameand
DEPT.floor=WATER.floor
wasrunonseveraldifferentrelationconfigurations. Theresultsareshownintable5.2.
Plans (1),(2),and(4)intable5.2illustrate anotherstrategyemployedbyINGRESthat POSTGRES
doesnot consider. Inthese plans, INGRESfirst sortsDEPT on ‘‘dname’’andthen nest iterates theresult
with WATER. Since a join preserves the sort order of its outer join relation, the join result is still sorted
in ‘‘dname’’ order and thus can be used in a merge with EMP. This is advantageous because it may be
cheaper to sort DEPT prior to its join with WATER, since more tuples may have to be sorted after the
join. Other differences were already discussed in reference to the previous set of tests and will not be
repeated.
To assessthe magnitude ofdifferencesin POSTGRESandINGRESplans forthefourcasesshown,
the costs of all INGRES plans were calculated using POSTGRES cost estimation formulas. These com-
puted costs were compared with the costs of corresponding POSTGRES plans, and the percentage differ-
ences are shown in table 5.2. The results show that INGRES was better than POSTGRES in all four
cases. However, INGRES was only significantly better in one case, and this was a result of INGRES
accounting for a partial ISAM ordering. In all other cases, the additional strategies considered by
51
hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
storage
%
POSTGRES INGRES
structure diff.
MS-dept Join-dept
sortdname sortdept Join-floor sortdept
(1)
no
MS-floor scanEMP sort sort scan
13.8
indices dname floor EMP
sort sort
scan scan
floor floor
DEPT WATER
scan scan
WATER DEPT
MS-floor Join-dept
sortdname sortdept Join-floor sort
(2)
dept
primary
sort sort
index scanDEPT
scan
dname floor
on NL
EMP
12.5
DEPT
floor scan indexscan scan
WATER DEPT WATER
(floor)
indexscan
DEPT
(floor)
Table5.2
Resultsofexecutingathree-wayjoinonvariousstoragestructures
hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
52
hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
storage
%
POSTGRES INGRES
structure diff.
MS-dept Join-dname
sortfloor
(3) sortdname sortdept sort
floor
secondary
Join-tid
index MS-floor scanEMP
487
on
scan sort scan
EMP WATER tidp EMP
sort sort
dept
floor floor
Join-dname
scan scan
indexscan sortdname
WATER DEPT
EMPINDEX
(dept)
scanDEPT
Join-dname
MS-floor
(4)
primary
indexscan Join-floor
index sortfloor sortfloor
EMPINDEX
on
(dept)
DEPT
sort sort
floor scanWATER
dname floor
NL
and 3.4
indexscan scan
secondary scan indexscan
DEPT WATER
DEPT EMP
index (floor)
(dept)
on
EMP
dept
Table5.2
(continued)
hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
INGRESresultedinnomorethana13.8%difference.
53
To summarize, in spite of differences between the POSTGRES and INGRES optimizers, we were
able to draw two promising conclusions from our performance tests. For the most part, both systems
selected similar strategies for queries involving a single join. Assuming that the INGRES optimizer is
correct,these results indicate that POSTGRESselects true optimal plans. ForqueriesforwhichINGRES
was able to capitalize on a broader range of strategies, INGRES did not perform considerably better.
Thus, not having considered all these other processing strategies, which would have added further com-
plexitytoourimplementationeffort,didnotdramatically affecttheoverallperformanceofouroptimizer.
6. CONCLUSION
It will be interesting to run further tests on the optimizer once it has been fully integrated with the
restofPOSTGRES. Amongtheissuesofinterestare:
g whetherwritingtheoptimizerinLISPisaperformanceconcern
g whethertheoptimizeractuallyselectstrueoptimal plans
g whethertheoptimizerreallyworkswithalluser-definedtypes,operators,andaccessmethods
g whetherthecurrentalgorithmforoptimizing nested-attributequeriesis‘‘goodenough.’’
Clearly, further validation of the POSTGRES optimizer is necessary to examine the more subtle
issuesraisedbythesequestions. However,thepreliminary workdescribedinthisreporthasatleastillus-
trated the feasibility of many important ideas. Most significant of these are the concepts introduced to
supportoptimizationofextendibileobjectsinadatabasesystem.
54
ACKNOWLEDGEMENTS
First and foremost, I would like to thank my research advisor, Professor Michael Stonebraker, for
his guidance and support throughout this project. I am also grateful to Professor Larry Rowe and
members of the POSTGRES project for contributing ideas that improved the optimizer, particularly Chin
Heng Hong for his careful scrutiny of optimizer-generated query plans. Finally, I would like to thank
ProfessorEugeneWongforreadingthisreport.
55
REFERENCES
[ASTR76] Astrahan, M., et.al., ‘‘System R: A Relational Approach to Database Management,’’
ACMTransactionsonDatabaseSystems,Vol.1,No.3,September1976.
[CHAM76] Chamberlin, D., et. al., ‘‘SEQUEL2: A Unified Approach to Data Definition, Manipu-
lation, and Control,’’ IBM Journal of Research and Development, Vol. 20, No. 6,
November1976.
[DEWI84] DeWitt, D., et. al., ‘‘Implementation Techniques for Main Memory Database Sys-
tems,’’ Proceedings of the 1984 ACM-SIGMOD Conference on Management of Data,
Boston,MA,June1984.
[FOGG82] Fogg, D., Implementation of Domain Abstraction in the Relational Database System
INGRES, Masters Report, Department of Electrical Engineering and Computer Sci-
ence,UniversityofCalifornia,Berkeley,CA,September1982.
[FRAN85] Franz,Inc.,FranzLISPReferenceManual,Opus42,Berkeley,CA,September1985.
[GUTT84] Guttman, A., ‘‘R-trees: A Dynamic Index Structure for Spatial Searching,’’ Proceed-
ings of the 1984 ACM-SIGMOD Conference on Management of Data, Boston, MA,
June1984.
[HASK82] Haskings, M. and R. Lorie, ‘‘On Extending the Functions of a Relational Database
System,’’ Proceedings of the 1982 ACM-SIGMOD Conference on Management of
Data,Orlando,FLA,June1982.
[HELD75a] Held, G., and M. Stonebraker, ‘‘Access Methods in the Relational Data Base Manage-
ment System INGRES,’’ Proceedings of the ACM-Pacific-75, San Francisco, CA,
April1975.
[HELD75b] Held,G.,et.al.,‘‘INGRES:ARelational DataBaseSystem,’’Proceedingsofthe1975
AFIPSNationalComputerConference,Vol.44,Anaheim,CA,May1975.
[KENT79] Kent, W., ‘‘Limitations of Record-Based Information Models,’’ ACM Transactions on
DatabaseSystems,Vol.4,No.1,March1979.
[KOOI82] Kooi, R. and D. Frankforth, ‘‘Query Optimization in INGRES,’’ IEEE Database
Engineering Newsletter: Special Issue on Query Optimization, Vol. 5, No. 1, Sep-
tember1982.
[KUNG84] Kung, R., et. al., ‘‘Heuristic Search in Data Base Systems,’’ Proceedings of the 1st
InternationalWorkshoponExpertDataBaseSystems,KiowahIsl.,SC,October1984.
[ONG82] Ong, J., The Design and Implementation of Data Abstraction in the Relational Data-
baseSystemINGRES,MastersReport,DepartmentofElectricalEngineeringandCom-
puterScience,UniversityofCalifornia,Berkeley,CA,September1982.
[ROBI81] Robinson, J., ‘‘The K-D-B Tree: A Search Structure for Large Multidimensional
Indexes,’’ Proceedings of the 1981 ACM-SIGMOD Conference on Management of
Data,AnnArbor,MI,May1981.
[ROWE86] Rowe, L. A. and M. Stonebraker, ‘‘The Commercial INGRES Epilogue,’’ The
INGRES Papers: Anatomy of a Relational Database System, (M. Stonebraker, editor),
AddisonWesley,1986.
[SELI79] Selinger, P., et. al., ‘‘Access Path Selection in a Relational Data Base System,’’
Proceedings of the 1979 ACM-SIGMODConference on Management of Data, Boston,
MA,June1979.
56
[SELL85] Sellis, T. and L. Shapiro, ‘‘Optimization of Extended Database Query Languages,’’
Proceedings of the 1985 ACM-SIGMODConference on Management of Data, Austin,
TX,May1985.
[SELL86] Sellis, T., ‘‘Global Query Optimization,’’ Proceedings of the 1986 ACM-SIGMOD
ConferenceonManagementofData,WashingtionD.C.,May1986.
[STEE84] Steele,G.,CommonLISP,DigitalPress,1984.
[STON75] Stonebraker, M., ‘‘Implementation of Integrity Constraints and Views by Query
Modification,’’ Proceedings of the 1975 ACM-SIGMOD Conference on Management
ofData,SanJose,CA,May1975.
[STON76] Stonebraker, M., et. al., ‘‘The Design and Implementation of INGRES,’’ ACM Tran-
sactionsonDatabaseSystems,Vol.1,No.3,September1976.
[STON84] Stonebraker, M., et. al., ‘‘QUEL as a Data Type,’’ Proceedings of the 1984 ACM-
SIGMODConferenceonManagementofData,Boston,MA,June1984.
[STON85a] Stonebraker, M., ‘‘Triggers and Inference in Data Base Systems,’’ Proceedings of the
IslamooraConferenceonExpertDataBases,Islamoora,FLA,February1985.
[STON85b] Stonebraker,M.,et.al.,‘‘ExtendingaDataBaseSystemWithProcedures,’’(submitted
forpublication).
[STON86a] Stonebraker, M., ‘‘Inclusion of NewTypesin Relational DataBaseSystems, Proceed-
ings of the Second International Conference on Database Engineering, Los Angeles,
CA,February1986.
[STON86b] Stonebraker, M. and L. A. Rowe, ‘‘The Design of POSTGRES,’’ Proceedings of the
1986 ACM-SIGMOD Conference on Management of Data, Washington D.C., May
1986.
[STON86c] Stonebraker, M., ‘‘Object Management in POSTGRES Using Procedures,’’ Interna-
tional Workshopon Object-Oriented DatabaseSystems, Pacific Grove,CA,September
1986.
[STON86d] Stonebraker, M., et. al., ‘‘The Design of the POSTGRES Rules System,’’ (in prepara-
tion).
[WONG76] Wong, E. and K. Youssefi, ‘‘Decomposition: A Strategy for Query Processing,’’ ACM
TransactionsonDatabaseSystems,Vol.1,No.3. September1976.
[ZANI83] Zaniolo, C., ‘‘The Database Language GEM,’’ Proceedings of the 1983 ACM-
SIGMODConferenceonManagementofData,SanJose,CA,May1983.