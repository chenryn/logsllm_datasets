Server operation is to read code or resource files from the server and then transfer the
code files to the interpreter or CGI program for execution, and then feedback the
execution results and resource files to the client user. The files that exist in it Many
file operations are likely to be intervened by attackers, resulting in an unintended
reading of files and incorrect use of code files as resource files.
1.3.1Common TriggerPoints for File Read Vulnerabilities
1.3.1.1 Web Application Languages
Different web languages have different trigger points for file reading vulnerabilities.
This section takes different web file reading vulnerabilities as examples to introduce
the specific vulnerability scenarios.
1. PHP
The part about file reading in the PHP standard functions will not be introduced in
detail. These functions include but may not be limited to: file_get_ contentsO, file(,
fopen() functions (and file pointer manipulation functions freadO, fgetsO, etc. ),
functions related to file inclusion (include, require(), include_once), require_once
O, etc.), and execute system commands for reading files through PHP (systemO),
 Suunp os suodde dHd u uooo Aa ae suooun asou (a ooxa
entire PHP code audit process, these functions will be focused on by auditors
---
## Page 56
1 Introduction to the Web
public static function registerConposerLoader($composerPath)
if (is_file($composerPath .*autoload_nanespaces.php*))(
$map = require ScomposerPath .*autoload_nanespaces.php′;
foreach ($map as $namespace m> Spath) (
self::addPsre(Snamespace, Spath);
if (is_file($composerPath .*autoload_psr4.php*)){
$nap = require $composerPath .*autoload_psr4.php′;
foreach ($map as $namespace => Spath)(
self::addPsr4($namespace, Spath);
if （is_file($composerPath.“autoload_classmap-php′)）{
$classMap = require ScomposerPath .*autoload_classmap.php′;
if($classMap){
self::addClassMap($classMap);
Fig, 1.63 Code example
Some readers here may have questions. Since these functions are so dangerous,
mou asneoog (suoouered se wa on Aeoureup eep ndu ssed siadoaaop op um
PHP development technology is more and more inclined to single entry, multi-level,
multi-channel mode, which involves intensive and frequent calls between PHP files.
In order to write file functions with high reusability, the developer needs to pass in
some dynamic information (such as the dynamic part of the file name) to those
functions (see Fig. 1.63). If branch statements such as switch are not used to control
the dynamically input data at the program entry, it is easy for an attacker to inject
malicious paths, thereby achieving arbitrary file reading or even arbitrary file
inclusion.
In addition to the standard library functions mentioned above, many common
PHP extensions also provide functions that can read files. For example, the php-curl
extension, PHP modules that involve file access operations(database-related exten-
sions, image-related extensions), XML module which could lead XXE, etc. There
are not many CTF challenges that use extermal library functions to read arbitrary
files. The subsequent chapters will analyze the challenges involved with examples.
---
## Page 57
1.3 Arbitrary File Read Vulnerability
41
Fig, 1.64 Filters
ListofAvailableFilters
TableofContents
•String Filters
·Conversion Filters
·Compression Filters
·Encryption Filters
Unlike other languages, PHP lets users specify that the open file is not a simple
path but a file stream. We can understand it as a set of protocols provided by PHP.
For example, after entering http://host:port/xxx in the browser, you can request the
corresponding file on the remote server through HTTP. In PHP, there are many
protocols with different functions but similar fomms, collectively called Wrapper.
The most typical protocol is the php:/ protocol. More interesting is that PHP
provides an interface
for
developerstowrite custom wrappers
(stream_wrapper_register).
In addition to Wrapper, another unique mechanism in PHP is Filter, whose
function is to perform specific processing on the current Wrapper (such as changing
the contents of the current file stream to uppercase).
For custom wrappers, Filter requires developers to register through
stream_filter_register. Moreover, some built-in wrappers in PHP will come with
filters, such as the php:// protocol. There are filters of the type shown in Fig. 1.64.
PHP's Filter feature provides us with many conveniences for reading arbitrary
files. Assuming that the path parameter of the include function on the server-side is
controllable, it will parse the target file as a PHP file under normal circumstances. If
there are PHP-related tags such as °>> os path.join (*/a*,*/b*)
/b'
Many developers detemine that the path passed by the user does not contain *
to ensure that the user does not traverse the directory when reading resources and
then substitute the user’s input into the second parameter of the os.path.join, but if
the user passes Enter “/, you can still traverse to the root directory, which will cause
any file to be read.
In addition to the python framework being prone to such problems, many
applications involving file operations are also likely to cause arbitrary file reading
due to abuse of the open function and improper rendering of templates. For example,
some data entered by the user is stored in the server as part of the file name
(commonly used in authentication services or log services), and the processed user
input data is also used as an index to find related files in the part of fetching the
content of the file. This gives the attacker a way to perform directory traversal.
For example, in the CTF online competition, Python developers call an unsafe
decompression module to decompress compressed files, which leads to directory
traversal after the files are decompressed. Of course, the danger of directory traversal
when decompressing files is to overwrite existing files on the server.
Another situation is that the afttacker constructs a soft link and puts it into the
compressed package. The decompressed content will directly point to the
corresponding file on the server. When the attacker accesses the decompressed
---
## Page 59
1.3 Arbitrary File Read Vulnerability
43
link file, the link will retum to the corresponding content of the file. This will be
analyzed in detail in the following chapters. Similar to PHP, some modules of
Python may read files with XXE.
In addition, Python’s template injection, deserialization, and other vulnerabilities
can cause arbitrary file reading to a certain extent. Of course, the most significant
harm is still causing arbitrary command execution.
3. Java
In addition to the file reading caused by the function FilelnputStream or XXE results,
some Java modules also support the *file:/° protocol, which is the place where any
file is read the most in Java applications, such as Spring Cloud Config Server Path
traversal and arbitrary file reading vulnerability (CVE-2019-3799), Jenkins arbitrary
file reading vulnerability (CVE-2018-1999002), etc.
4. Ruby
Ruby's arbitrary file read vulnerability is commonly associated with the Rails
framework in the CTF online competition. So far, the generic vulnerabilities
known to us are Ruby On Rails Remote Code Execution (CVE-2016-0752), Ruby
On Rails Path Traversal, and Arbitrary File Read (CVE-2018-3760), Ruby On Rails
Path Traversal, and Arbitrary File Read (CVE-2019-5418). I have encountered the
Ruby On Rails Remote Code Execution Vulnerability (CVE-2016-0752) in the CTF
competition.
5. Node
At present, it is known that the express module of Node.js has an arbitrary file
reading vulnerability (CVE-2017-14849), but the author has not encountered rele-
vant CTF challenges. File reading vulnerabilities of Node in CTF are usually the
template injection, code injection, etc.
1.3.1.2  Middleware/Server Related
Different middleware/servers may also have file reading vulnerabilities. This section
uses file reading vulnerabilities on different middleware/servers as examples to
introduce.
1) Nginx Error Configuration
File read vulnerabilities caused by Nginx misconfigurations are frequently found in
CTF online competitions, especially when used with Python-Web applications. This
is because Nginx is generally considered to be the best implementation of the
Python-Web reverse proxy. However, its configuration file can easily cause serious
problems if it is misconfigured. For example.
---
## Page 60
44
1 Introduction to the Web
location /static {
alias /home/myapp/static/ ;
If the configuration file contains the above config option, maintenance or devel-
opers likely want the user to access the static directory (usually a static resource
directory). However, if the web path requested by the user is /static./, splicing it into
alias becomes /home/myapp/static/.J, which will result in directory traversal, a
directory traversal vulnerability is created and traverses to the myapp directory. At
this point, an attacker can download Python source code and bytecode files at
will. Note: The vulnerability is caused by the absence of the */" restriction at the
end of the location, allowing Nginx to match the path static and then splice the rest
into an alias. /static.., Nginx does not consider it a cross-directory but instead treats
it as a complete directory name.
2) Database
Many databases can perform file reading operations, so let us take MySQL as an
example.
MySQL's load_file() function can read a file, but reading a file with the load_file()
function first requires a database configuration with FILE permissions (which the
database root user usually has), and second requires that the MySQL user/group
executing the load_file( function has readable permissions to the target file (many of
them). The configuration files are readable by all groups/users), and mainstream
Linux systems also require Apparmor to configure a directory whitelist (by default,
the whitelist is restricted to MySQL-related directories), which is a “lot of work".
Even with such strict exploit conditions, we often encounter file reading challenges
in CTF online competitions.
There is another way to read a file, but unlike the load_file file read function, this
requires executing the complete SQL statement, i.e., load data infile. Again, this
requires FILE privileges but is rare because, except in the particular case of SSRF
attacks on MySQL, there are very few cases where the entire non-basic SQL
statement can be executed directly.
3) soft links
The bash command In -s creates a soft link file to the specified file and then uploads
the soft link file to the server, and when we request access to the linked file again, we
request the file it points to on the server.
4) FFmpeg
In June 2017, an arbitrary file read vulnerability was discovered in FFmpeg. A CTF
online challenge was shown in the CISCN competition (see htps://www cnblogs.
com/iamstudy/articles/2017_quanguo_ctf_web_writeup.html  for the writeups),
which exploited this vulnerability.
---
## Page 61
1.3 Arbitrary File Read Vulnerability
5) Docker-API
Docker-API can control the behavior of Docker, generally communicating over
UNIX sockets but also communicating directly over HTTP. When we encounter
an SSRF vulnerability, especially if we can communicate with UNIX sockets via
SSRF vulnerability, we can manipulate Docker-API to load local files into a new
Docker container for reading (using Docker's ADD and COPY operations).
1.3.1.3 Client Related
There are also file read vulnerabilities on the client-side, primarily based on XSS
vulnerabilities to read local files.
1) Browser/Flash XSS
Generally speaking, many browsers disable JavaScript operations related to reading
local files, such as requesting a remote website, if their JavaScript code uses the File
protocol to read a client's local files, which can fail due to the same origin strategy.
However, operations in the browser development process can bypass these mea-
sures, such as a client-side local file read vulnerability in Safari, discovered in
August 2017.
2) MarkDown Syntax Parser XSS
Similar to XSS, Markdown parsers also have some ability to parse JavaScripL.
However, most of these parsers do not restrict operations to local file reads as
browsers do and rarely have similar safeguards as the same origin strategy.
1.3.2CommonReadPathsforFileReadVulnerabilities
1.3.2.1Linux
1. flag name (relative path)
During the CTF competitions, sometimes we need to guess or fuzz the real flag file
name. Please note the following file names and suffixes, and make your own
decisions according to the challenge information and challenge environment.
.. /.. /.. /.. /.. /.. /-- /.. /.- /.. / .- /.. /.- /.. /fag(.txt| -phpl-
(-- Ad· |od· |dud | x) 5eg/ (-.·Ad· |o人d
(-- Ad- |od- |dud· |ax·) Be
(--- Ad· |oAd- [dqd- |axs/6e/ [xouxnoxp]
... /.. /.. /.. /.. /.- /.. /.. /.- /.. /.- /.. /.- /.. /ete/fag(-txt-
--- Ad- |od· |dud· |x) beg/oo/(Ad |od·|dud
.../.. /../.- /-- /.. /.. /.. /.. /.. /../.- /.. /.. /.. /.. /.. /tmp/fag
(.txt| ,phpl -pye| -py ..-)
---
## Page 62
46
1 Introduction to the Web
.. . /flag ( -txt| -php| -pyc| ·py - - -1
... /.. / .. /.. /-- /.. /.. /-- /.. /.. /.. /.. /-- /root/flag(.txt| -phpl -
pye| ·py ---1
... /.. /.. / -- / -- /-- / .- / .  / . . /.. /.. /home/fag(.txt| -phpl -pycl -py)
/home/flag ( - txt | -php| -pye| -pY - - )
.. . / .. / .. / .. /.. / .. / .. /. - / -- / .. / -- /home/ [usez_you_knou /home/
[usex_you_know] /flag [ -txt | -php| -pyc | -py -- -1
2. server information (absolute path)
The following is a list of common parts of the CTF online competitions that you need
to know. It is recommended that the reader go through these files after reading this
book and leam about the common files not listed.
(1) /etc directory
The /etc directory mainly contains various application or system configuration files,
so its files are the primary targets for file reading.
(2) /etc/passwd
The /etc/passwd file is a Linux system file that stores user information and their
working directory, is readable by all users/groups, and is generally used as a baseline
for determining the existence of file read vulnerabilities in a Linux system. Reading
this file tells us which users exist on the system, what groups they belong to, and
their working directory.
(3) /etc/shadow
/etc/shadow is a Linux system file that stores user information and (possibly)
could read it except the root/shadow user, so it is generally not readable in CTF
passwords (hash). Only the root user/group could write to this file, and no user
competitions.
(4) /etc/apache2/*
/etc/apache2/* are the Apache configuration files that allow you to get information
about web directories, service ports, etc. Some CTF challenges require you to leak
the web path.
(5) /etc/nginx/*
/etc/nginx/* is Nginx configuration files (for systems such as Ubuntu) that allow you
to get information about web directories, service ports, and so on.
(6) /etc/apparmor(.d)/*
e 1o8 o posn oq ueo e aty uogenyuoo souddy ou s! x/(p)oueddea/
allowlist or blocklist of system calls for each application. For example, you can read
the configuration file to see if system calls are disabled by MySQL and thus
determine if you can use UDF (User Defined Functions) to execute system
commands.
---
## Page 63
1.3 Arbitrary File Read Vulnerability
47
(7) /etc/(cron.d/*lcrontab)
/etc/(cron.d/*lcrontab) are cron files. Some CTF challenges will setup cron services,
and reading these configuration files will reveal hidden directories or other files.
(8) /etc/environment
/etc/environment is one of the environment variable configuration files. The envi-
ronment variables may have many directory information leaked, and even a secret
key may be leaked.
(9) /etc/hostname
/etc/hostname represents the hostname.
(10) /etc/hosts
/etc/hosts is a static table of hostname lookups that contains information about pairs
of IP addresses for a given domain. With this file, CTF players could get network
information and intranet IPs/domains.
(11) /etc/issue
/etc/issue specifies the system version.
(12) /etc/mysql/*
/etc/mysql/* are the MySQL configuration files.
(13) /etc/php/*
/etc/php/* are the PHP configuration files.
(14) /proc directory
The /proc directory usually stores various information about the dynamic running of
the process and is essentially a virtual directory. Note: If you view the information of
the non-curent process, then PID can be brute-forced. If you want to view the
current process, you only need to replace /proc/[pid]/ with /proc/self/.
The cmdline file in the corresponding directory can read more sensitive informa-
tion, e.g., logging into MySQL using mysql -uxxx -pxxxx will display the plaintext
password in the cmdline file.
/proc/ [pid] /cndline
(points to the terminal command
corresponding to the process)
Sometimes, we cannot get the current application's directory to jump directly to
the current directory with the cwd command.
/proc/ (pid) /cvd/
(points to the running directory of the
process)
---
## Page 64
1 Introduction to the Web
from the environ.
There may be a secret_key in the environment variable, which can also be read
/proc/ [pid] /environ
[environment variables that points to the
process zuntime)
(15) Other Catalogs
There may be other paths to the Nginx configuration file.
/usx/local/nginx/conf /+
(source code installation or some other
system)
Log files.
/var/1og/ *
 (Web applications that often have Apache 2 can read /
var/1og/apache2/access. 1og)
(thus analyzing the logs and stealing other
players' solution steps) .
Apache Default Web Root.
/var/www/html/
PHP session directory.
/vaz/1ib/php (5) /sessions/
(disclosure of user session)
User directory.
[user_diz_you_know] /.bash_history
(Disclosure of History command)
oxqseq / [aounoAxpxosm]
[usez_dix_you_know] / ssh/id_rsa [ -pub) (ssh login pzivate key/pub1ic
(Partial environmental variables)
[user_diz_you_know] / .viminfo
key)
(p.xoosx obesn ufA)
Sometimes we want to read the executable file of the current application for
analysis, but in practice there may be some security measures that prevent us from
reading the executable file, in which case we can try to read /proc/self/exe.
/proc/ [pid] /fd/ (1|2.. -)
 (read stdout or stderrror or vhatever
/proc/ (pid) /maps
([pid] memory nap to the process)
that [pid] points to the process)