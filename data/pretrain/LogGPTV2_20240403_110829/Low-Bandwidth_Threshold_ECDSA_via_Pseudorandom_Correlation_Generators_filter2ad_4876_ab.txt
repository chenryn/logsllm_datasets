The remaining terms are the shares of y · sk and (xi ·
αj)i,j∈[n]. Since sk and αj are ﬁxed for each tuple, these can
be distributed by applying sparse vector compression on the
pairs of products ui · αj, vi · skj, each of which is a t-sparse
vector. Note that this last technique is essentially a multi-party
application of vector-OLE from LPN [BCGI18], [BCG+19b].
However, since we are combining this with the ring-LPN based
compression for x · y, here we also need to rely on the ring-
LPN assumption.
Overall, the PCG for ECDSA tuples requires compressing
O(n2) sets of sparse vectors, where to achieve λ-bit computa-
tional security against the best known attacks on ring-LPN, the
sparsity is up to O(λ2). This gives a seed size of O(nλ3 log N )
bits per party, for compressing N ECDSA tuples. When N is
large enough, this is a signiﬁcant saving on the naive storage
cost of O(λN ) bits. Importantly, since the product [x · y] in
an ECDSA tuple does not need to be authenticated, we avoid
having to use 3-party DPFs to compress the sparse vectors, as
is needed when compressing fully authenticated multiplication
√
triples between > 2 parties [BCG+20], [AS21]; 3-party DPFs
N instead of log N, so this is
have a seed size scaling with
a signiﬁcant saving in practice.
4) Open Problems: In some applications of threshold cryp-
tography the honest-majority setting is more appealing than
the full-threshold setting of this paper. In the full-threshold
case if a share is lost, there is no way of recovering the secret
key which might have serious repercussions on availability
of the system. Our approach could be generalised to the
honest-majority setting with small number of parties (e.g., 3
parties tolerating 1 corruption) using replicated secret-sharing.
However, doing so for large number of parties appears to be
an interesting and challenging open problem.
C. Related Work
The ﬁrst threshold ECDSA protocol in the dishonest major-
ity setting was presented by Mackenzie and Reiter [MR01],
but for the 2-party case only. Their protocol was later im-
proved in [GGN16] and [Lin17]. A different approach to
the 2-party case was taken by [DKLs18], which presented
a less computationally expensive protocol at the expense of
increasing the bandwidth and round complexity. The ﬁrst
attempt to generalise these solutions to any number of parties
was taken by [GGN16]. However,
this protocol relied on
distributed Paillier key generation, which is not known to be
practical for more than 2 parties. The ﬁrst multiparty ECDSA
protocols with both practical signing and key generation were
introduced independently by Lindell and Nof [LN18], Gennaro
and Goldfeder [GG18] and Doerner et al. [DKLs19]. These
were followed by [CCL+20] and [CGG+20], which provide
signiﬁcant
improvements to the communication and round
complexity. Moreover, Canetti et al. [CGG+20] also showed
how to extend their protocol
to identiﬁable abort. Smart
and Talibi [ST19] and Dalskov et al. [DOK+20] developed
frameworks for threshold ECDSA based on any MPC protocol
over the ﬁeld Fq. For further related work, we refer to the
survey of [AHS20].
In Table I, we present a comparison with all recent threshold
ECDSA constructions tolerating any number of parties n and
any dishonest majority: for each protocol, the table reports
the estimate of the communication complexity amortised be-
tween each pair of parties and per signature. We believe
the amortised setting is valuable in practice, for instance, in
cryptocurrency custody applications where several powerful,
independently located servers may be used to perform thresh-
old signing for a large number of clients (when the clients
cannot run full MPC nodes themselves). This is indeed the
setting in which several companies working with threshold
signatures operate.
For all protocols other than ours, we use the estimates
from [CGG+20]. Consistent with them, we assume all group
elements are represented using 256 bits and we ignore the
communication complexity for key-generation, that in some
cases also includes other one-time setup costs. The commu-
nication for our protocol considers also the amortised cost
for the generation of one ECDSA tuple, when produced in
batches of N = 940192 units. Note that in our construction,
the communication between each pair of parties scales linearly
with the total number of players. However, as it can be seen
by the table, our solution greatly outperforms existing work
for any reasonable value of n.
II. PRELIMINARIES
A. Notation
Let G be a group of prime order q, and let Fq be the ﬁnite
ﬁeld with q elements. We use additive notation for G.
We consider n parties P0, P1, . . . , Pn−1. Let C denote
the set of (indices of) corrupted parties, and H denote the
complement set of honest parties.
We write [m] to mean the set {0, 1, . . . , m− 1}. Vectors are
represented using bold letters and we indicate the j-th entry
of v either as a subscript, e.g. vj, or between square brackets,
e.g. v[j]. For two vectors u and v, we write (cid:104)u, v(cid:105) to mean
the inner product, and denote the outer product and outer sum
by u ⊗ v and u (cid:1) v respectively. Recall that if u and v have
dimensions m and l, the outer product and outer sum are the
ml-dimensional vectors whose (im + j)-th entry is ui · vj and
2We chose this batch size since it divides p−1, where p is the secp256k1
group order, which is necessary for FFT algorithms.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:08 UTC from IEEE Xplore.  Restrictions apply. 
32556
Gennaro and Goldfeder [GG18]
Lindell et al. [LN18] (Paillier)
Lindell et al. [LN18] (OT)
Doerner et al. [DKLs19]
Castagnos et al. [CCL+20]
Canetti et al. [CGG+20]
This work
Assumptions
Strong RSA, DCR, DDH
DCR, DDH
DDH
DH
Strong Root, Low Order, HSM, DDH
Strong RSA, DCR, DDH
Ring-LPN
TABLE I
Communication
7 KiB
7.5 KiB
190 KiB
90 KiB
4.5 KiB
15 KiB
0.017n+0.18 KiB
COMPARISON TO PREVIOUS WORKS: HARDNESS ASSUMPTIONS AND COMMUNICATION COMPLEXITY OF THE PROTOCOL, AMORTISED BOTH OVER THE
NUMBER OF SIGNATURES AND THE NUMBER OF PARTIES n. SEE THE TEXT FOR MORE DETAILS.
ui + vj respectively. We use P to denote a probability measure
and λ for the security parameter.
B. The ECDSA Signing Algorithm
Let (G, G, q) be a tuple of an Elliptic curve group, generator
and the group order. Assume that q is prime. Each element a ∈
G is represented by a pair (ax, ay) where ax is the projection
of a on the x-axis and ay is the projection of a on the y-axis.
Let π : G → Fq be the function that maps a point a ∈ G into
ax mod q, moreover, let H : {0, 1}∗ → Fq be a hash function.
The ECDSA scheme consists of the following algorithms:
• KeyGen(G, G, q): choose a random sk ∈ Fq and set
PK ← sk · G. Output is (sk, PK).
• Signsk(m): set m(cid:48) ← H(m) and choose a random x ∈ Fq.
Then, compute r ← π(x· G) and s ← x−1 · (m(cid:48) + r · sk).
Output (r, s).
(cid:0)m, (r, s)(cid:1): set m(cid:48) ← H(m), output 1 if r =
π(cid:0)(m(cid:48) · G + r · PK) · s−1(cid:1), 0 otherwise.
• VerifyPK
Observe that if (r, s) is a valid ECDSA signature for the
message m, also the pair (r, q − s) is a valid signature for m.
That implies that the ECDSA version above is not strongly
unforgeable, i.e. given a valid signature for a message m, the
adversary is able to generate another valid signature for m
without knowing the secret key. Interestingly, [FKP16] proves
that this is the only malleability attack against ECDSA and
it is therefore possible to make ECDSA strongly unforgeable
by only generating signatures (r, s) with s < q/2. Clearly,
the veriﬁcation algorithm needs to be modiﬁed accordingly,
so that (r, s) is rejected whenever s ≥ q/2. Our protocol is
agnostic of whether we use the strongly unforgeable version
of ECDSA or not, as discussed in the next subsection.
a) Elliptic Curves with Small Cofactor: In our security
proof, we need to efﬁciently sample a point R ∈ (cid:104)G(cid:105) such that
π(R) = r, when given only the r value of a valid signature
(r, s). When the cofactor of (cid:104)G(cid:105) in G is small (polynomial in
λ), this is always possible. Indeed, since q is prime and q2 (cid:45) |G|
(otherwise, the cofactor would not be polynomial), it is easy
to check whether a point R belongs to (cid:104)G(cid:105) by verifying that
qR = ∞. Moreover, by Hasse’s theorem, |G| ≤ 2p, where
Fp is the prime ﬁeld on which the curve is deﬁned. As a
consequence, p/q is dominated by a polynomial, so there are
only a polynomial number of values x ∈ Fp for which x mod
q = r. Since the signature (r, s) is valid, we know that one of
these values is the x-coordinate of a point in (cid:104)G(cid:105). Computing
an elliptic curve point of a given x-coordinate can always be
done efﬁciently.
In ECDSA instantiations, the cofactor of (cid:104)G(cid:105) is almost
always small. This is in particular true for the Bitcoin curve
secp256k1 (the cofactor is 1).
C. Threshold ECDSA - Security Deﬁnition
We deﬁne security similarly to [LN18]. In Figure 1 we
present the functionality FECDSA. The functionality is deﬁned
with three commands: key generation, pre-signing and signing.
Key generation is called once, and then any number of signing
operations can be carried out with the generated key. The
signing process is split into pre-signing (which computes and
reveals a nonce r) and the actual signing (that computes s).
Our protocol achieves security with abort, reﬂected in the func-
tionality by letting the ideal-world adversary choose whether
to send the output to the honest parties or not. We stress that
FECDSA is deﬁned in a generic way that can be used with
both versions of ECDSA, with or without the the strongly-
unforgeable property. Therefore the functionality allows the
ideal adversary to see the generated signature but then force
the honest parties to output another signature (r, s(cid:48)) as long as
it veriﬁes w.r.t. the message m. Clearly, when combining our
functionality with the strongly-unforgeable version of ECDSA
the adversary cannot come up with a different signature for
m.
D. Module-LPN with Static Leakage
Our protocol is based on the Module-LPN assumption with
static leakage, which was deﬁned and analysed for the ﬁrst
time by Boyle et al. in [BCG+20]. This is a variant of the LPN
assumption over polynomial rings (analogously to how ring-
LWE extends LWE), with the addition of some leakage. The
leakage (which arises in the protocols from [BCG+20]) allows
the adversary to try to guess error coordinates, but aborts if
any guess is incorrect; this only reveals an average of one bit
on the module-LPN secret overall.
the ring Rλ := Fq[X]/(cid:0)F (X)(cid:1), where q is a prime and
independently samples t noise positions(cid:0)ω[i](cid:1)
Deﬁnition 1 (Module-LPN with static leakage): Consider
F (X) is a polynomial of degree N. Let tλ and cλ ≥ 2 be
two positive integers and deﬁne the distribution HW t that
i∈[t] uniformly
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:08 UTC from IEEE Xplore.  Restrictions apply. 
42557
The Ideal Functionality FECDSA
FECDSA works with parties P0, . . . , Pn−1 and an ideal world adversary A, controlling a subset C (cid:40) [n] of parties.
KeyGen. Upon receiving KeyGen from all parties P0, . . . , Pn−1.
1) Generate an ECDSA key pair (PK, sk) by choosing a random sk ∈ Fq and let PK ← sk · G.
2) Send PK to all parties.
3) Ignore future calls to KeyGen.
PreSign. Upon receiving Presign(sid) from all parties, if KeyGen was already called and sid has not been previously
used:
Sign. Upon receiving Sign(sid, m) from all P0, . . . , Pn−1, if (sid, r, x) is stored and has not been previously used:
(cid:0)m, (r, s(cid:48))(cid:1) = 1, output (r, s(cid:48)) to all honest parties.
1) Choose a random x ∈ Fq, compute r ← π(x · G) and send r to A.
2) Upon receiving (continue, sid) from A, store (sid, r, x).
1) Compute s ← x−1 · (H(m) + r · sk).
2) Send s to A and wait for a pair (r, s(cid:48)) as a reply. If VerifyPK
Otherwise abort.
Fig. 1. The ECDSA ideal functionality FECDSA
in [N ] and t payloads(cid:0)β[i](cid:1)
i∈[t] uniformly in Fq, outputting
(cid:88)
the ring element
β[i] · X ω[i]
e(X) :=
i∈[t]
Consider the game GModule-LPN
described in Figure 2. We say
that the Rc-LPNt problem with static leakage is hard if, for
every PPT adversary A, the advantage
R,t,c,A
(cid:12)(cid:12)(cid:12)(cid:12)P(cid:16)GModule-LPN
(cid:17) − 1
2
(cid:12)(cid:12)(cid:12)(cid:12)
AdvModule-LPN
R,t,c,A (λ) :=
R,t,c,A (λ) = 1
is easy to see that
the bigger c and t become,
is negligible in the security parameter λ.
the
It
harder it
is for the adversary to win the game. Observe
that when F (X) splits into N distinct linear factors over
Fq corresponding to N distinct roots ξ0, ξ1, . . . , ξN−1, the
ring R is isomorphic to FN
by the Chinese Remainder
Theorem3. The isomorphism map φ sends a polynomial
q . Observe
p(X) ∈ R to (cid:0)p(ξ0), p(ξ1), . . . , p(ξN−1)(cid:1) ∈ FN
that the map is well deﬁned as the ideal (cid:0)F (X)(cid:1) vanishes
q
over ξ0, ξ1, . . . , ξN−1. If we additionally assume that F (X) is
a cyclotomic polynomial, the isomorphism can be efﬁciently
computed using the Fast Fourier Transform (FFT) [BCG+20].
The security analysis of [BCG+20] argues that this does not
introduce any signiﬁcant vulnerability, so our protocol will
take advantage of cyclotomic polynomials.
E. Pseudorandom Correlation Generators
To achieve low-bandwidth in the preprocessing phase,
we use Pseudorandom Correlation Generators
(PCGs)
[BCG+19a], [BCG+19b], [BCG+20]. Informally speaking, a
PCG is a distributed form of pseudorandom generator (PRG),
where each party has a different seed that can be expanded
into a long stream of bits. Now, while a PRG produces a
stream of uniformly random bits, a PCG lets each party
3FN
q is a ring with relation to pointwise addition and multiplication.
expand their seed into different streams that satisfy some joint
correlation. In more detail, a PCG is a pair of algorithms
(PCG.Gen, PCG.Eval), the ﬁrst one of which generates n short
correlated seeds, one for each player. The evaluation algorithm
is used to expand each seed into a large amount of correlated
randomness without any interaction. Furthermore, the security
of the construction guarantees that corrupted parties learn
nothing about the outputs of the honest parties as long as their
seeds remain secret.
This framework has a double advantage. First of all, in order
to generate large amounts of correlated material, we can just
focus our attention on designing secure setup protocols for the
generation and distributions of the small seeds. The second
and most important advantage is that, due to their small size,
it possible to generate the seeds using setup protocols with
very low communication complexity compared to the size of
the expanded seeds.
To formalise this, we ﬁrst recall the notion of a reverse
samplable correlation generator [BCG+19b], which captures
the class of correlations that PCGs may support.
Deﬁnition 2 (Reverse Samplable Correlation Generator):
An n-party correlation generator is a PPT algorithm CorGen
taking as input the security parameter 1λ and outputting n
correlated outputs R0, R1, . . . , Rn−1, one for each party.
We say that CorGen is reverse samplable if there exists a
PPT algorithm RSample such that, for every set of corrupted
parties C (cid:40) [n] the following distribution
(R(cid:48)
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
i)i∈[n]
(R0, R1, . . . , Rn−1) $← CorGen(1λ)
∀i ∈ C : R(cid:48)
(R(cid:48)
i)i∈H $← RSample(cid:0)1λ,C, (R(cid:48)
i)i∈C(cid:1)
i ← Ri
is computationally indistinguishable from CorGen(1λ).
The deﬁnition says that given a subset of outputs of the
correlation generator CorGen, we are able to simulate the re-
maining outputs. In general, there exist correlation generators
that are not reverse samplable. However, ﬁnding meaningful
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:08 UTC from IEEE Xplore.  Restrictions apply. 
52558
The Game GModule-LPN
R,t,c,A
(λ)
Initialisation. The challenger activates the adversary A with 1λ and samples a random bit b $← {0, 1}. Then, it samples
c elements of the ring e0, e1, . . . , ec−1
Query. The adversary is allowed to adaptively issue queries of the form (i, j, I) where i ∈ [c], j ∈ [t] and I ⊆ [N ]. If
ωi[j] ∈ I, the challenger answers with Success, otherwise, it sends Abort and halts.
Challenge. For every i ∈ [c − 1], the challenger samples ai
ai · ei =
$← HW t. Let the j-th noise positions of ei be ωi[j].
$← R and sets ac−1 ← 1. Then, it computes
u1 ← c−1(cid:88)
ai · ei + ec−1.
c−2(cid:88)
Moreover, it samples u0
output of the game is 1 if and only if b = b(cid:48).
$← R. Finally, it gives (a0, a1, . . . , ac−2, ub) to A. The adversary replies with a bit b(cid:48). The ﬁnal
i=0
i=0
Fig. 2. The Module-LPN game.
deﬁnitions for PCG becomes hard in such cases [BCG+19b].
Moreover, since the type of correlation used in this paper is
reverse samplable, we do not need to worry about this issue.
We now ﬁnally formalise the deﬁnition of PCG.
Deﬁnition 3 (Pseudorandom Correlation Generator): Let
CorGen be an n-party reverse samplable correlation gen-
erator. A PCG for CorGen is a pair of PPT algorithms
(PCG.Gen, PCG.Eval) with the following syntax.
• PCG.Gen takes as input the security parameter 1λ and