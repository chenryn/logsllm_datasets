takes place, which has signiﬁcant security repercussions, as
we ﬁrst explain below.
2.2 Vulnerabilities
Slow Load Balancing
2.2.1
Here, we explain the slow load-balancing problem. DNS’
Time-To-Live (TTL) value deﬁnes how frequently a client
should query DNS system to get current IP addresses of a
hostname. On the one hand, in DNS-driven systems, large
TTL can lead to slow response to changes of network or
server conditions [27]. On the other hand, small TTL may
put unnecessarily high load on the DNS system. The ques-
tion then becomes which TTL Akamai sets for their stream-
ing service. While we answer this question in the next sec-
tion, our key hypothesis is that if the redirections at time
scales of several tens of seconds are applied, as used in the
case of web [27], that might generate severe vulnerabilities
in the case of live streaming.
Indeed, while DNS redirections at such time scales are ca-
pable of eﬃciently distributing the load in the case of web
traﬃc, this is not the case for streaming for the following
two reasons. First, once an edge server becomes overloaded
in the web case, either due to a ﬂash crowd or a DoS at-
tack, even a slightly delayed DNS redirection can help eﬀec-
tively reduce the load from the troubled edge server. This
is because web ﬂows are relatively short-lived, and thus the
overload quickly ’goes away’ after the redirection. This is
not the case with streaming. While a redirection can help
new streaming clients to experience better service, the high
overload on the original edge server will not disappear in-
stantly (unless a subset of clients disconnect from the trou-
bled server), precisely because streaming ﬂows are longer
lived.
Second, redirection time-scales at the order of tens of sec-
onds leave a long window size to potential attackers, which
can easily overload either network or server resources during
such relatively long intervals. Finally, clients are much more
tolerable to minor delays in the web performance, which is
not a ’live’ medium. For example, a slightly delayed image
appearance at a web page is not a catastrophic event. On
the contrary, this does not hold for streaming where even
a slight degradation can aﬀect clients’ perception and moti-
vate users to seek content from elsewhere [13].
We explore the redirection timescales applied by the Aka-
mai streaming network in Section 3.2.1, and we experimen-
tally explore the slow load balancing problem in Section
4.2.1.
2.2.2 No Isolation
The idea of deploying a number of servers at the edge is to
bring the clients to their closest servers in order to get bet-
ter services. However, for a limited number of edge servers
located at the same region, it is simply impossible to assign
dedicated servers to diﬀerent services. The situation aggra-
vates in streaming services because each streaming connec-
tion can occupy signiﬁcant server and network resource for
a long period of time, and therefore impact the performance
of other services co-located at the same region. For exam-
ple, overlapping between media implies that traﬃc from one
media can aﬀect quality of others. Moreover, by artiﬁcially
increasing traﬃc load at one media (e.g., VoD), one can af-
fect service to other medias (e.g., live streaming).
This is a critical problem because it provides the way
for an attacker to relatively easily collect a large amount
of unique active VoD streams. Thus, before a live streaming
event, the attackers can get prepared with enough amount
of ”bullets” to launch the attacks. We explore the level of
isolation among diﬀerent channels, customers, and medias in
Section 3.3, and we experimentally explore the repercussions
of the isolation problem in Section 4.2.2.
Suboptimal Migration
2.2.3
In a DNS-driven streaming service, when an edge region
is overloaded, new clients might get redirected to distant re-
gions, e.g., to diﬀerent continents. Contrary to the web case,
where such redirections are not problematic, this might not
be the case for streaming. Longer inter-continental paths
might oﬀer smaller bandwidth and poorer viewing experi-
ences, hence turn away clients from accessing such services.
We experimentally explore this problem in more depth in
Section 4.2.3.
2.2.4 Ampliﬁcation Attacks
DNS-driven streaming services adopt a multicast tree struc-
ture in order to optimize network resources (Figure 1). Data
streams ﬁrst travel to a regional reﬂector and then dupli-
cate to edge servers.
It is important to realize that each
unique stream request from edge servers consumes resources
from their shared reﬂector. Hence, if an attacker is capable
of reverse-engineering the system to understand which edge
servers map to given reﬂectors, then such an attacker might
become capable of exciting a bottleneck at the reﬂector level
by exploiting the appropriate edge servers in a given region
as proxies.
This is a particularly dangerous vulnerability for the fol-
lowing reasons. First, because the edge servers are not di-
rectly attacked, it is hard to detect the attack at edges.
Second, because such attacks can aﬀect the service in an
entire geographic region served by a given reﬂector (i.e., all
edge servers served by a given reﬂector), they are very dan-
gerous. Below, in Section 3.1, we ﬁrst reveal the method
used for mapping between edge servers and reﬂectors. Next,
in Section 3.4, we explore the characteristics of edge server
clusters that are susceptible to become proxies in such at-
tacks. Finally, in Section 4.3, we experimentally evaluate
this issue in the Internet.
3. SCANNING AKAMAI
It is well known that before performing any attacks, one
must ﬁrst scan the system to understand its potentially vul-
nerable points. While our goal is not to attack the system,
but rather to prevent anyone from ever becoming capable
of conducting such misbehaviors (Section 5), we necessarily
ﬁrst attempt to collect information about the system.
In
particular, below we ﬁrst analyze Akamai’s streaming URLs
which apparently feed a lot of internal system information.
Then, we perform large-scale measurements to verify our
vulnerability hypotheses explained above.
3.1 Understanding ARLs
Akamai encodes the information about each unique stream
in speciﬁc URLs called Akamai Resource Locators (ARLs) [12].
In many cases, ARLs are embedded in the web pages by con-
tent providers (e.g., MTV), and retrieved by clients. An exam-
ple ARL for a (Microsoft Media Server) live stream is: mms:
//a1897.l3072828839.c30728.g.lm.akamaistream.net/D/
1897/30728/v0001/reflector:28839. In other cases, ARLs
are not coded into the web pages but embedded in media
players (e.g., Flash player) launched by web browsers. For
this group, packet sniﬃng and analysis software (e.g., URL
Snooper [8]) can be used to discover ARLs.
From clients to edge servers. Once a client receives
this ARL, it sends a request to its DNS server in an at-
tempt to resolve the IP address of the hostname a1897.
l3072828839.c30728.g.lm.akamaistream.net. The request
further gets redirected to the Akamai’s DNS system. Based
on the client’s location and the current network conditions
and the load at Akamai’s edge servers, the client is redi-
rected to the edge server that should provide the optimal
performance.
The example streaming ARL can be ’decoded’ as follows:
a1897 is the portset (or channel) number; as explained above,
multiple streams can share the same portset; c30728 repre-
sents the customer number — National Basketball Associa-
tion (NBA, nba.com) in this particular case; lm indicates live
media service; l3072828839 combines two names: 30728 is
again the customer number and 28839 is the stream’s unique
identiﬁcation number [1, 2].
From edge servers to reﬂectors. Once an edge server
receives a request from the client for the given stream, it
proceeds as follows. If the stream is already ’active’ at the
given edge cluster,5 it is simply forwarded to the client. If
this is not the case, the edge server must determine the ap-
propriate reﬂector to fetch the stream from.6 At this point,
it enters the similar procedure as when a client queries the
Akamai’s DNS system to reach the appropriate edge server.
In particular, the edge server in a given region queries the
5An edge cluster is a set of co-located edge servers.
6According to [11], this is not the case for the video-on-
demand service, in which case the stream is fetched directly
from origin servers. We discuss this issue later in the paper.
Type
Live Video
Live Video
Live Video
Live Video
Live Video
Live Video
ID
NASA
CNN
ABC
NBA1
NBA2
NBA3
Blockbuster1 VoD
Blockbuster2 VoD
Blockbuster3 VoD
FM94.5
FM92.1
FM106.7
Live Audio
Live Audio
Live Audio
Chan. Cust.ID Str.ID
a167
a466
a151
a785
a644
a1020
a1247
a1042
a1081
a1367
a1819
a774
44670
51364
43249
28857
29417
28846
e33220
e33210
b10069
43805
45129
44599
c18569
c37606
c10588
c30728
c30728
c30728
c26419
c26419
c26419
c20064
c21650
c19810
Table 1: Measured streams
DNS system by looking up the name that contains a given
portset and the region [22]. This approach opens the doors to
ampliﬁcation attacks explained above. Indeed, this means
that streams from a given edge region that use the same
channel map to the same reﬂector. We discuss this issue in
more depth later in Sections 3.4 and 4.3.
DNS is eﬀectively used for load balancing and reducing ex-
cessive load from reﬂectors. If traﬃc on particular portsets
is low, then the DNS names for those portsets can resolve
to the same reﬂector. As traﬃc grows, then the DNS names
can be changed to resolve to diﬀerent set reﬂectors for diﬀer-
ent portsets. This allows DNS-driven streaming systems to
scale up or down the reﬂector network based on customer de-
mand, rather than having to size based on peak demand [22].
Indeed, the ﬂexibility of DNS system has proven invaluable
for Akamai’s streaming network. Still, we show below that
there are downsides as well. In particular, the time-scales
both for redirecting clients to edge servers and for redirect-
ing edge servers to reﬂectors might not be successful enough
in reducing the load from overloaded servers, as this is the
case with the web traﬃc.
3.2 Measurements and Implications
Here, we perform a large-scale measurement study that
reveals the most vulnerable mechanisms and points in the
Akamai’s streaming architecture. In particular, we evaluate
the vulnerability hypotheses from Section 2.2 above and ex-
plore (i) the redirection time-scales used for load balancing,
(ii) the level of isolation among clients, channels, and ser-
vices, and (iii) the size and location of streaming edge-server
clusters. Throughout the section, we discuss important secu-
rity implications of the revealed Akamai’s mechanisms and
policies.
Table 1 shows the streams that we use in the experi-
ments in this section. In particular, we select a sample of
streams from diﬀerent media types, customers, and chan-
nels: Live streaming that belongs to diﬀerent customers
(NASA, CNN, and ABC), as well as to the same customer
(NBA); Video on Demand (VoD) streams that belong to
the same customer (Blockbuster) but operate on diﬀerent
channels (a1247, a1042, and 1081), featuring previews for
diﬀerent movies (e33220 - ’3:10 to Yuma,’ e33210 - ’The
Big Bad Swim,’ and b10069 - ’Pirates of the Caribbean: At
World’s End’); ﬁnally, we select three diﬀerent audio streams
(FM94.5, FM92.1, and FM106.7). While this is a relatively
small number of streams, it is representative in the sense
that it can help reveal internal Akamai’s mechanisms and
policies, as we show below.
To eﬀectively probe the globally-deployed Akamai’s stream-
ing network, we use a set of 1,000 publicly accessible recur-
sive DNS servers scattered all around the world. Neces-
sarily, we do not fetch any streams, but rather query Aka-
mai’s DNS infrastructure from these 1,000 servers to resolve
edge servers for given streams. For example, for the NASA’s
stream, we query a DNS server for the appropriate CNAME:
a167.l1856944670.c18569.g.lm.akamaistream.net. The
experiment lasts for four days. This enables us to reveal
redirection timescales, overlap among diﬀerent medias, cus-
tomers, and channels, as well as the size and location of
streaming edge server clusters.