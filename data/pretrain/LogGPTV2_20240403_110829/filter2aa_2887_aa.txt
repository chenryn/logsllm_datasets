Mobile privacy: Tor on the iPhone and other
unusual devices
Marco Bonetti
May 2, 2010
Abstract
Tor is a software project that helps you defend against traﬃc analy-
sis, a form of network surveillance that threatens personal freedom and
privacy, conﬁdential business activities and relationships, and state se-
curity. Tor protects you by bouncing your communications around a
distributed network of relays run by volunteers all around the world:
it prevents somebody watching your Internet connection from learning
what sites you visit, and it prevents the sites you visit from learning
your physical location.
Unfortunately, with the new features of HTML5 and browser built-
in geolocation being pushed into the Web2.0 world and on mobile
phones and browser, it’s becoming harder and harder to keep the users’
privacy safe. This paper will describe the problems which are arising
around the use of these new technologies and how they can be (ab)used
to attack Tor users. It will also describe where the development is
going to protect mobile phone users privacy and let them survive their
own devices.
i
1
Introduction
Tor is becoming more and more popular, it’s no surprise that TorProject.org
launched this year the ”Help us reach 5000 relay in 2010!” drive [1] [2]. Unfor-
tunately, such growth is not always followed by adoption of secure browsing
behavior and new privacy exploit techniques are always in the development.
If this is not enough, with the rapid growth and diﬀusion of mobile devices,
it’s becoming really diﬃcult for the end user to protect his very own privacy.
Section 2 will describe the current scenario about secure communication
available for mobile phones. Section 3 will talk about the current availability
of Tor clients for mobile phones and the following chapters will go into details:
Section 4 will describe the working port for the Chumby One multimedia
alarm clock, Section 5 will talk about the Nokia N900 port, Section 6 will
introduce the Android port and, ﬁnally, Section 7 will describe my work
in porting Tor for the iPhone platform, how it can improve mobile privacy
communications and which problems arise when using it on such platform.
Finally, Section 8 will talk about what can be done next.
2
Mobile Phones (In)Security
The topic of mobile phones security saw its born in 2008 with the ﬁrst con-
ferences on the subject and literally exploded in 2009. The reasons behind
this massive growth rely on ﬁve factors: phones are considered as something
personal, we bring them everywhere we go. Phones are critical devices: they
collect phone call logs, email and SMS; the addressbook is a precious source
of information, they’re used to store and carry around documents and of-
ten used as access unit to corporate networks. Phones operate in an higly
trusted enviroment, pheraps too much trusted: users trust their phones, they
trust their operator and operators trust themselves both for convenience and
compatibility. Phones communications protocol and networks are closed and
etherogeneus and, ﬁnally, the hardware landscapes and software platforms of
phones are fragmented, preventing a common breeding ground for security
development.
These issues have been explored in depth both on the communication side
by the works of Paget and Nohl [3] and on the architectural one by those
of Pietrosanti [4]. Architectural issues are quite interesting: chatting and
texting are predominant operations in the world of a phone, so mobile key-
boards adapted their layout to ease the insertion of common spoken words.
This will generally degrades the strength of a password generated using such
keyboards as numbers and non alphabetical symbols are quite diﬃcult to type
1
into. Screen dimensions also play an important role in such an enviroment:
mobile phones browsers narrow url bar greatly improves phishing attacks,
while checking invalid SSL certiﬁcates could be either a really diﬃcult task
or nearly impossible.
When it comes to mobile phones operating system security we can see
too many diﬀerent implementation strategies, all of them with strengths
and weaknesses. Application permissions are generally conﬁgurable, unfor-
tunately, the most common solution is an ”all or nothing” approach, while a
granular permissions ﬁne tuning would be much more safe and interesting.
Finally, on the communication side, there’re still too many unsafe protocol
in use. As we’ve just seen, GSM encryption has been cracked but it’s not the
only protocol who’s suﬀering: SMS is still being used a lot and, yet, heavily
vulnerable; from sender spooﬁng to rogue provisioning the Short Messaging
System is not to be considered a secure protocol at all.
When we focus our attention on the privacy side, mobile phones still
shows their young age: we’ve seen how rapid their growth has been, nowadays
phones are full ﬂedged computers, carrying lots of personal data. Only some
of the available operating systems are capable of oﬀering some form of data
encryption [5] [6], for the rest the only choice is to store data in clear.
3
Tor On Mobile Phones And Other Strange
Devices
This year, Tor was ported to a great number of mobile phones and some
strange device also. Everything started in December 2009 with Tor being
run as a bridge on a Chumby One [7], with an oﬃcial announcement on the
Tor Project blog just some months later, around mid February [8].
Even if it’s an amusing device, the Chumby One is not a mobile phone
at all.
The ﬁrst announcend working port on such devices has been the
Nokia N900 [9] [10] which received a Tor port for the Maemo platform in late
February.
Next, at the beginning of March, came Tor for Android devices [11] [12].
This one has been a real breakthrough: Android is an operating system for
mobile phones with a growing market share, porting the program on such a
platform will surely help Tor diﬀusion and adoptance.
Implementing the Tor program on mobile phones is not an easy task at
all: the etherogenity of platforms is the ﬁrst problem to take into account. If
the new hosting platform is following the UNIX standards, then the porting
process will be much more easier than rewriting the code from scratch to
2
adapt the program to the new enviroment. Next problem is the processor
power, even if modern phones can sustain an heavy load of work, keeping the
CPU up with cryptographic functions is a performance and battery killer.
Last, but not least, problem resides in the user interface: as we’ve seen before
in Section 2, the user interface is often narrow and crippled, that’s why such
port of Tor have to adapt their layout in order to ﬁt in small enviroment and
yet be powerful.
4
Tor On The Chumby One
As introduced in Section 3, the Chumby One was the ﬁrst exotic device to
receive a working port of Tor. Chumby multimedia hubs are hackable Linux
devices, powered by an ARM cpu and 64MB of RAM: they’re an ideal device
for running low-powered and low-bandwidth Tor nodes.
The port has been hacked up by bunnie from bunnie:studios and Jacob
Appelbaum from TorProject. It was announced on 30th December 2009 from
bunnie’s blog [7] but it has only been oﬃcially accepted into the Tor source
tree some months later, the 21st February 2010 [8].
This port is very interesting for many aspects: ﬁrst, it’s quite easy to
install. After installing the Chumby ARM cross toolchain, it’s just a mat-
ter of downloading torproject.org Chumby sources [13] and issuing a ”make”
command inside the source folder. This will produce a zipped build, unpack-
ing it in the root of an USB key and rebooting the Chumby One with such
key inserted will ﬁnally install Tor on the device. If a user doesn’t want to
ﬁddle with the command line and the cross compilers, unpacking one of the
oﬃcially provided builds will just be enough to get Tor on the device.
Second, this port is a real working examples on how to port Tor on
hardware with limited resources: the Chumby One has a good processor for
embedded devices and the minimum required amount of RAM to run a Tor
node. Nevertheless, it’s currently able to act as a bridge and providing all
the multimedia entertainment it was designed to without suﬀering any issues
or slowdown.
There’re also some drawbacks but I’m ﬁnding them useful to understand
how such devices can handle a working port of Tor. First one, the installer
will create a swap ﬁle for the Chumby One if not already present: this is
needed in case the node will start routing a lot of traﬃc in order to prevent
the underlying operating system to crash because of the consumption of all
the available RAM.
Second, the Chumby One operating system does not provide an easy to
use updating mechanism for unsupported third party software: Tor upgrades
3
have to rely on the user will to keep the installed program up to date.
Third, the default conﬁguration will set up the node to act as bridge,
listening on port 443. This is an important choice since it will both increase
the number of nodes for helping people stuck inside Tor-hostile networks and
it will prevent the program to eat too many resources too.
Currently the Chumby Tor port is being actively developed and main-
tained, one of the next interesting features has yet been unveiled by bun-
nie:studios: it turns out that an easter egg present in the oﬃcial ﬁrmware
can activate unoﬃcial support for 3G dongles [14], allowing a Chumby device
to route Tor traﬃc even over the cellular data networks.
5
Tor On Maemo And The Nokia N900
As stated in Section 3, the N900 was the ﬁrst mobile phone to get a working
port of Tor with a graphical controller application.
The Maemo platform is already providing support for Tor users as a third
party community site [15], the N900 is the choosen platform for developing
a graphical controller application for such operating system.
Installing the Maemo and N900 port is quite easy for this platform too:
the user has just to add the already present, but disabled, Extras-devel repos-
itory to the software manager, looking for Tor in the newly added packages
and reboot the phone. Unfortunately, such repository is marked as ”danger-
ous” even from the Maemo Cummunity site [16], which means the user has
the choice to keep this repo enabled, at the risk of having a non functional
operating system if an upgrade will go wrong, or enabling it just for installing
Tor and subsequent updates which, then, will have to be tracked by hand.
Once installed, the controller application is available from the status
menu: selecting the ”The Onion Router” icon will bring up the conﬁguration
menu where the user can enable or disable the client.
This port is being actively developed but still quite young as the only op-
tion, for now, is the choice of wheter or not activating the client functionality
for the Tor network.
6
Orbot: Tor On Android
Orbot is the latest oﬃcial TorProject port of Tor for a mobile platform. This
port targets mobile phones shipping with Android ﬁrmwares, both for version
1.x and 2.x.
Orbot is not yet available in the Android Market, however its installation
4
is one of the easier seen so far: just by scanning the QR code from the project
page, the user can install the program on his phone [12].
This port is one of the most complete: it ships a copy of Tor, libevent
and privoxy, providing HTTP and SOCKS 4a/5 access to the network. The
controller application can also set lot of diﬀerent properties, behaving much
like Vidalia [17].
To successfully use the Tor network, Android 1.x users have to download
and install from Android Market the ProxySurf web browser and the Beem
instant messaging applications, while Android 2.x ones can rely on general