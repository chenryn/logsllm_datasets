**I'm submitting a ...** (check one with "x")
    [ ] bug report => search github for a similar issue or PR before submitting
    [x] feature request
    [ ] support request => Please do not submit support request here, instead see https://github.com/angular/angular/blob/master/CONTRIBUTING.md#question
**Current behavior**  
Currently you can only inject services into your constructor, ie.
    export class Simple {
        constructor(element:ElementRef, http:Http, custom:CustomService1) { ... }
    }
So to extend this class i would have to get all of the dependencies again and
pass them to the super. eg.
    export class Complex extends Simple  {
        constructor(element:ElementRef, http:Http, custom:CustomService1, custom2:CustomService2) {
              super(element, http, custom);
              this.custom2 = custom2;
        }
    }
This get tedious when you need to add or change a dependency.
**Expected behavior**
Lets use an optional Class Property Annotation so that we can leave all DI out
of the constuctor if we want. eg:
    export class Simple {
        @Inject() element:ElementRef;
        @Inject() http:Http;
        @Inject() custom:CustomService1;
        constructor() {}
    }
    export class Complex extends Simple  {
        @Inject() custom2:CustomService;
    }