Around 2006, Microsoft acknowledged that the existing approach to frame navigation in Internet Explorer was unsustainable and developed a more secure policy for Internet Explorer 7. This new policy restricts navigation of non-same-origin frames to cases where the party requesting the navigation shares an origin with one of the ancestors of the targeted view. Figure 11-2 illustrates a permissible navigation scenario under this updated policy.

**Figure 11-2: A complex but permissible navigation between non-same-origin frames.**
- **Bunny Browser 2000: http://bunnyoutlet.com**
  - **Frame: bunnyoutlet.com**
    - **Nested Frame: fuzzybunnies.com (navigation possible)**
      - **Frame "private": fuzzybunnies.com**

This navigation attempt succeeds because the originating frame has the same origin as one of the ancestors of the targeted document—in this case, the top-level page itself.

While this security improvement was significant, Microsoft did not backport it to the still-popular Internet Explorer 6. Consequently, many users continued to use the older, increasingly insecure version of the browser. However, by 2009, three security researchers—Adam Barth, Collin Jackson, and John C. Mitchell—convinced Mozilla, Opera, and WebKit to implement a similar policy, thereby closing the loophole for a majority of internet users.

Despite these improvements, the new policy is not without its flaws. As shown in Figure 11-2, a malicious site like `http://bunnyoutlet.com/` can interfere with a private frame created by `http://fuzzybunnies.com/`. At first glance, this might seem harmless, as the attacker's domain is visible in the address bar, and the user should not be deceived into interacting with the subverted UI. However, some web applications use frames for programmatic message relaying between origins, especially in environments where `postMessage(...)` is unavailable, such as in Internet Explorer 6 and 7. In such cases, techniques like those illustrated in Figure 11-3 are common.

**Figure 11-3: A potential cross-domain communication scheme.**
- **Bunny Browser 2000: http://www.fuzzybunnies.com**
  - **Step 1: Send message to login.fuzzybunnies.com**
    - `frames["send_to_child"].src = "http://login.fuzzybunnies.com/login_handler#" + message_to_send;`
    - **Frame "send_to_child": login.fuzzybunnies.com/login_handler#**
  - **Step 2: Read message sent in step 1.**
    - `response_text = process_message_from_parent(location.hash);`
  - **Step 3: Send response to www.fuzzybunnies.com.**
    - `frames["send_to_parent"].location = "http://www.fuzzybunnies.com/blank#" + response_text;`
    - **Frame "send_to_parent": www.fuzzybunnies.com/blank#**
  - **Step 4: Read back data from login.fuzzybunnies.com.**
    - `process_message_from_child(frames["send_to_parent"].location.hash);`

If an application using this method is embedded on a malicious site, the top-level document controlled by the attacker can inject messages into the communication stream, compromising the integrity of the communication. Even the use of `postMessage(...)` can be at risk if the sender does not specify a destination origin or if the recipient does not verify the origin.

### Unsolicited Framing

The discussion of cross-frame navigation highlights a significant weakness in the browser security model. Any malicious page can embed a third-party application without the user's knowledge or consent, potentially overlaying other visual elements to disguise the frame. This can lead to users being tricked into performing unintended actions, such as changing settings or deleting data.

One way to enhance this attack is by using CSS2's `opacity` property to make the targeted frame invisible, while still allowing clicks to be delivered to the hidden UI controls. By combining this with JavaScript, the attacker can make the frame follow the mouse pointer, increasing the likelihood of a successful attack.

Researchers have been aware of such attacks since the early 2000s, but a convincing demonstration was not published until 2008 by Robert Hansen and Jeremiah Grossman. Their report popularized the term "clickjacking."

Vendors responded to the high-profile nature of the report, but the solution they implemented, the `X-Frame-Options` HTTP header, is limited. This header allows sites to opt out of being framed altogether (`X-Frame-Options: deny`) or to allow framing only within the same origin (`X-Frame-Options: same-origin`). However, the opt-in nature of this defense means that most websites do not adopt it, and it is ineffective for applications that need to be embedded on third-party sites while maintaining UI integrity.

### Beyond the Threat of a Single Click

Clickjacking primarily targets simple, single-click UI actions, but the problem extends to more complex interactions. For example, Paul Stone proposed methods for disguising text selection, dragging, and dropping, which can be used to interact with legitimate UI controls or to drag preselected text out of a sensitive document and drop it into an attacker-controlled frame.

Another challenge is keystroke redirection. It is possible to selectively redirect keystrokes across domains by examining the key code using the `onkeydown` event in JavaScript. If the pressed key matches what the attacker wants, the focus can be changed to a hidden element, ensuring the keystrokes are delivered to the targeted application. This can be used to synthesize complex text, such as inviting the attacker as an administrator of the victim's blog.

Browser vendors addressed this issue by disallowing focus changes during a keypress, but the problem persists in scenarios where the attacker can predict the next key press, such as in action games or typing tests.

### Cross-Domain Content Inclusion

Framing and navigation are significant sources of trouble, but HTML also supports other ways to interact with non-same-origin data. The design pattern for these features is to retrieve and parse a constrained data format without directly showing it to the origin. Examples include `<script>`, `<link>`, and `<img>` tags.

However, these mechanisms can introduce security risks. For instance, in many browsers, it was possible to read arbitrary, cookie-authenticated text by registering an `onerror` handler on cross-domain `<script>` loads. Chris Evans discovered a particularly interesting flaw in 2009, where the fault tolerance of CSS parsers could be exploited to leak sensitive information.

Consider the following HTML document:
```html
Page not found: ');} gotcha { background-image: url('/
...
You are logged in as: John Doe
...
Page not found: ');} gotcha { background-image: url('/
...
```
If an attacker lures the victim to a page that loads this document as a stylesheet, the browser will request the document using the victim's cookies, ignore the `Content-Type` header, and hand the content to the CSS parser. The parser will ignore syntax errors and process the `url('...` pseudo-function, consuming the secret user name. When the faux stylesheet is applied to an element on the attacker's website, the browser will attempt to load the resulting URL, leaking the secret value to the attacker's server.

Chris Evans pushed for fixes in mainstream browsers, and most now reject cross-domain stylesheets that don't begin with a valid CSS rule or are served with an incompatible `Content-Type` header. Microsoft initially resisted but eventually agreed to address the problem in Internet Explorer 8 and backport the fix to versions 6 and 7 after a proof-of-concept attack against Twitter.

### A Note on Cross-Origin Subresources

Loading subresources from other origins can have significant consequences, even if not actively subverted by a third-party site. For example, loading a script or stylesheet from another origin can compromise the security of the document, especially if the loaded resource is over HTTP on an HTTPS page. Similarly, loading a script from a provider with vulnerable infrastructure can be as problematic as having insecure servers.

Other types of content, such as remote fonts, plugins with access to the embedding page, and images, can also lead to serious issues. Browsers attempt to detect mixed content, but their approaches are inconsistent. Internet Explorer is the only browser that blocks most types of mixed content by default, while others provide subtle warnings or cryptic dialogs.

### Privacy-Related Side Channels

Gaps in the same-origin policy also enable the collection of information about a user's interactions, leading to privacy concerns.