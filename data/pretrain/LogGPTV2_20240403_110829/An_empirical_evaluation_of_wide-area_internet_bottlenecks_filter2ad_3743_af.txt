### End-to-End Effects of Internet Path Selection
In *Proceedings of the SIGCOMM '99 Symposium on Communications Architectures and Protocols*, pages 289–299, 1999.

[33] L. Subramanian, S. Agarwal, J. Rexford, and R. H. Katz. Characterizing the Internet Hierarchy from Multiple Vantage Points. In *Proceedings of IEEE INFOCOM*, June 2002.

[34] Traceroute.org. <http://www.traceroute.org>.

[35] Y. Zhang, L. Breslau, V. Paxson, and S. Shenker. On the Characteristics and Origins of Internet Flow Rates. In *Proceedings of ACM SIGCOMM*, Pittsburgh, PA, August 2002.

[36] Y. Zhang, N. Duffield, V. Paxson, and S. Shenker. On the Constancy of Internet Path Properties. In *Proceedings of ACM SIGCOMM Internet Measurement Workshop (IMW)*, November 2001.

[37] Y. Zhang, V. Paxson, and S. Shenker. The Stationarity of Internet Path Properties: Routing, Loss, and Throughput. Technical Report, ICSI Center for Internet Research, May 2000.

## Appendix B: Validation: Simulation Results

In Section 2.3.3, we presented a small set of results from wide-area experiments comparing the performance of BFind against similar tools. Our results showed that BFind's output is consistent with other tools on the paths probed.

In this section, we extend the validation results with simulation experiments in NS-2 [22] to address the following issues about BFind:

1. **Accuracy and Speed of Bottleneck Detection**: How accurately and quickly can BFind estimate the location of bottlenecks? Does the capacity of the bottleneck links or their location on the path impact the speed or accuracy? How does the presence of multiple bottlenecks affect the detection?

2. **Bandwidth Probing Behavior**: How does the bandwidth probing behavior of BFind compare with that of a TCP flow across the bottleneck link? Is BFind more or less aggressive than TCP?

3. **Interaction with Long-Lived TCP Traffic**: How does BFind compete with long-lived TCP cross traffic while probing for available bandwidth at a bottleneck link (given that the bottleneck faced by the competing TCP flows is different from that faced by BFind)?

Our simulations in this section aim to validate the soundness of the methodology used by BFind and show that it does not yield incorrect results. However, this is not a substitute for additional wide-area experimental validation.

To address these issues, we ported BFind to NS-2 and set up the path topologies shown in Figure 8(a) and (b). In either figure, the path contains 10 hops, with delays based on traceroutes from a machine at CMU to www.amazon.com. The hop-by-hop delays are computed as mentioned in Section 2.3.1. The capacity of non-bottleneck links is 100 Mbps.

**Figure 8(a)**: This topology has exactly one bottleneck in the path. We vary the location of this bottleneck ("close," "middle," and "far") and its raw capacity (22 Mbps and 45 Mbps). The six different experiments are summarized as follows:
- **Location "Close"**: Hop 2 is the bottleneck.
- **Location "Middle"**: Hop 5 is the bottleneck.
- **Location "Far"**: Hop 9 is the bottleneck.

**Figure 8(b)**: This topology has two similar bottleneck links. In "Setting 1," both links have a capacity of 22 Mbps; in "Setting 2," they have a capacity of 45 Mbps. The locations of the bottlenecks are:
- **Location "Close"**: Hops 2 and 3.
- **Location "Middle"**: Hops 2 and 5.
- **Location "Far"**: Hops 2 and 9.

In both topologies, there is cross traffic between neighboring routers, consisting of 25 HTTP sessions and 25 constant-rate UDP flows, with similar cross traffic on the reverse path.

**Table 5**: Performance of BFind on the topology in Figure 8(a). For each of the six experiments, we show if BFind correctly identifies the appropriate bottleneck, the time taken until detection, the available bandwidth reported by BFind, and the average throughput of a TCP connection whose endpoints are routers at either end of the bottleneck link.

**Table 6**: Performance of BFind in the presence of two similar bottlenecks. The table shows the hops identified by BFind as being the bottleneck in each of the six configurations in Figure 8(b), and the time taken to reach the conclusion.

**Table 7**: Performance of BFind in the presence of two slightly different bottlenecks. The table shows the hops identified by BFind as being the bottleneck in each of the six configurations in Figure 8(b) when the bandwidth of one of the hops on the path is chosen to be slightly higher than that of the other.

**Figure 9**: Interaction of BFind with competing long-lived TCP traffic. The figure plots the available bandwidth reported by BFind for the topology in Settings 1 and 2, when competing long-lived TCP flows on the bottleneck hops are constrained to at most 10 Mbps.

The results show that:
1. **Bottleneck Detection**: BFind accurately determines bottleneck links for both capacity values. The time taken by BFind is not necessarily worse when the capacity of the bottleneck link is higher.
2. **Bandwidth Probing**: The throughput probed by BFind is roughly similar to that achieved by the TCP connection. When the capacity of the bottleneck link is low, BFind probes somewhat more aggressively than TCP; however, when the capacity is higher, BFind does not probe as aggressively.
3. **Multiple Bottlenecks**: BFind identifies one of the two links as being a bottleneck, but the output is non-deterministic. When the second bottleneck link has a slightly higher capacity, BFind correctly identifies the first bottleneck link, and the time taken for detection is not necessarily worse.
4. **TCP Interaction**: BFind does not have undesirable interactions with competing TCP traffic. In "Setting 1," the bandwidth from BFind is almost exactly 12 Mbps as long as N ≥ 5, reinforcing the fact that BFind competes fairly with long-lived TCP traffic (though in the RTT-proportional fairness sense, BFind is unfair).

These results demonstrate that BFind is effective in detecting and probing bottlenecks in various network conditions.