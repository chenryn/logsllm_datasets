CSQW130I +ssid 'CHINIT' TRACE STARTED, ASSIGNED TRACE NUMBER 01
b.To stop the trace, issue the following command:
+ssid STOP TRACE(CHINIT) TNO(01)
c.You can then enter another START TRACE command with a DISPLAY CHSTATUS SAVED
command to gather more line trace data to CSQSNAP.
Related tasks
“Collecting troubleshooting information for IBM Support” on page 302
When you open a case with IBM, you can include additional IBM MQ troubleshooting information
(MustGather data) that you have collected to help with investigating the problem. In addition to the
402 Troubleshooting and Support for IBM MQ
information described in this section, IBM Support might request further information on a case by case
basis.
Other types of trace on z/OS
There are other trace facilities available for problem determination. Use this topic to investigate CICS
adapter trace, SSL trace, and z/OS trace.
It can be helpful to use the following trace facilities with IBM MQ.
• The CICS adapter trace
• System SSL trace
• z/OS traces
The CICS adapter trace
The CICS adapter writes entries to the CICS trace if your trace number is set to a value in the range 0
through 199 (decimal), and if either:
• CICS user tracing is enabled, or
• CICS internal/auxiliary trace is enabled
You can enable CICS tracing in one of two ways:
• Dynamically, using the CICS-supplied transaction CETR
• By ensuring that the USERTR parameter in the CICS system initialization table (SIT) is set to YES
The CICS trace entry originating from the CICS adapter has a value AP0 000, where 000 is the
hexadecimal equivalent of the decimal value of the CICS adapter trace number you specified.
The trace entries are shown in “CICS adapter trace entries” on page 403.
System SSL trace
You can collect System SSL trace using the SSL Started Task. The details of how to set up this task are
in the System Secure Sockets Layer Programming documentation, SC24-5901. A trace file is generated for
each SSLTASK running in the CHINIT address space.
z/OS traces
z/OS traces, which are common to all products operating as formal subsystems of z/OS, are available
for use with IBM MQ. For information about using and interpreting this trace facility, see the z/OS MVS
Diagnosis: Tools and Service Aids manual.
CICS adapter trace entries
Use this topic as a reference for CICS adapter trace entries.
The CICS trace entry for these values is AP0 xxx (where xxx is the hexadecimal equivalent of the
trace number you specified when the CICS adapter was enabled). These trace entries are all issued by
CSQCTRUE, except CSQCTEST, which is issued by CSQCRST and CSQCDSP.
IBM MQ troubleshooting and support 403
Table 29. CICS adapter trace entries
Name Description Trace sequence Trace data
CSQCABNT Abnormal Before issuing END_THREAD Unit of work information. You can
termination ABNORMAL to IBM MQ. This is use this information when finding
due to the end of the task and out about the status of work.
therefore an implicit backout could (For example, it can be verified
be performed by the application. A against the output produced by the
ROLLBACK request is included in DISPLAY THREAD command, or the
the END_THREAD call in this case. log print utility.)
CSQCAUID Bridge security Before validating bridge user User ID.
password or PassTicket.
CSQCBACK Syncpoint Before issuing BACKOUT to Unit of work information.
backout IBM MQ. This is due to an
explicit backout request from the
application.
CSQCCONX MQCONNX Before issuing MQCONNX to IBM MQ. Connection tag.
CSQCCCRC Completion code After unsuccessful return from API Completion code and reason code.
and reason code call.
CSQCCOMM Syncpoint Before issuing COMMIT to IBM MQ. Unit of work information.
commit This can be due to a single-phase
commit request or the second
phase of a two-phase commit
request. The request is due to a
explicit syncpoint request from the
application.
CSQCDCFF IBM use only
CSQCDCIN IBM use only
CSQCDCOT IBM use only
CSQCEXER Execute resolve Before issuing EXECUTE_RESOLVE The unit of work information of
to IBM MQ. the unit of work issuing the
EXECUTE_RESOLVE. This is the
last in-doubt unit of work in the
resynchronization process.
CSQCGETW GET wait Before issuing CICS wait. Address of the ECB to be waited on.
CSQCGMGD GET message After successful return from MQGET. Up to 40 bytes of the message data.
data
CSQCGMGH GET message Before issuing MQGET to IBM MQ. Object handle.
handle
CSQCGMGI Get message ID After successful return from MQGET. Message ID and correlation ID of
the message.
CSQCHCER Hconn error Before issuing any MQ verb. Connection handle.
CSQCINDL In-doubt list After successful return from the The in-doubt units of work list.
second INQUIRE_INDOUBT.
CSQCINDO IBM use only
404 Troubleshooting and Support for IBM MQ
Table 29. CICS adapter trace entries (continued)
Name Description Trace sequence Trace data
CSQCINDS In-doubt list size After successful return from the Length of the list; divided by 64
first INQUIRE_INDOUBT and the gives the number of in-doubt units
in-doubt list is not empty. of work.
CSQCINDW Syncpoint in During syncpoint processing, CICS Unit of work information.
doubt is in doubt as to the disposition of
the unit of work.
CSQCINQH INQ handle Before issuing MQINQ to IBM MQ. Object handle.
CSQCLOSH CLOSE handle Before issuing MQCLOSE to IBM MQ. Object handle.
CSQCLOST Disposition lost During the resynchronization Unit of work ID known to CICS
process, CICS informs the adapter for the unit of work being
that it has been cold started resynchronized.
so no disposition information
regarding the unit of work being
resynchronized is available.
CSQCNIND Disposition not During the resynchronization Unit of work ID known to CICS
in doubt process, CICS informs the adapter for the unit of work being
that the unit of work being resynchronized.
resynchronized should not have
been in doubt (that is, perhaps it is
still running).
CSQCNORT Normal Before issuing END_THREAD Unit of work information.
termination NORMAL to IBM MQ. This is due to
the end of the task and therefore
an implicit syncpoint commit might
be performed by the application. A
COMMIT request is included in the
END_THREAD call in this case.
CSQCOPNH OPEN handle After successful return from Object handle.
MQOPEN.
CSQCOPNO OPEN object Before issuing MQOPEN to IBM MQ. Object name.
CSQCPMGD PUT message Before issuing MQPUT to IBM MQ. Up to 40 bytes of the message data.
data
CSQCPMGH PUT message Before issuing MQPUT to IBM MQ. Object handle.
handle
CSQCPMGI PUT message ID After successful MQPUT from IBM Message ID and correlation ID of
MQ. the message.
CSQCPREP Syncpoint Before issuing PREPARE to IBM Unit of work information.
prepare MQ in the first phase of two-phase
commit processing. This call can
also be issued from the distributed
queuing component as an API call.
CSQCP1MD PUTONE Before issuing MQPUT1 to IBM MQ. Up to 40 bytes of data of the
message data message.
CSQCP1MI PUTONE After successful return from Message ID and correlation ID of
message ID MQPUT1. the message.
IBM MQ troubleshooting and support 405
Table 29. CICS adapter trace entries (continued)
Name Description Trace sequence Trace data
CSQCP1ON PUTONE object Before issuing MQPUT1 to IBM MQ. Object name.
name
CSQCRBAK Resolved Before issuing Unit of work information.
backout RESOLVE_ROLLBACK to IBM MQ.
CSQCRCMT Resolved Before issuing RESOLVE_COMMIT Unit of work information.
commit to IBM MQ.
CSQCRMIR RMI response Before returning to the CICS RMI Architected RMI response value. Its
(resource manager interface) from meaning depends of the type of the
a specific invocation. invocation. To determine the type
of invocation, look at previous trace
entries produced by the CICS RMI
component.
CSQCRSYN Resync Before the resynchronization Unit of work ID known to CICS
process starts for the task. for the unit of work being
resynchronized.
CSQCSETH SET handle Before issuing MQSET to IBM MQ. Object handle.
CSQCTASE IBM use only
CSQCTEST Trace test Used in EXEC CICS ENTER TRACE No data.
call to verify the trace number
supplied by the user or the trace
status of the connection.
Enabling internal trace for the AMSM address space
Trace for the AMSM address space can be enabled using the _AMS_MSG_LEVEL variable, which is passed
into the AMSM address space through the ENVARS DD card.
A sample data set for the ENVARS DD card is in thlqual.SCSQPROC(CSQ40ENV).
Trace is written to the SYSOUT of the AMSM address space.
The _AMS_MSG_LEVEL variable specifies the subcomponent and message level that is to be logged. An
asterisk indicates all subcomponents to be logged; currently there is only one subcomponent.
The severity levels are:
• S - severe messages only
• E - error and severe messages only
• W - warning, error, and severe messages only
• I - informational, warning, error, and severe messages. This is the default value
• D - debug mode, all messages with additional debug diagnostics
• V - verbose mode, all of the preceding, plus buffer dumps
Attention: You should only enable debug or verbose mode on the advice of an IBM service
representative.
For example, to enable the default for _AMS_MSG_LEVEL, issue the following:
_AMS_MSG_LEVEL=*.I
To enable verbose mode, issue the following:
406 Troubleshooting and Support for IBM MQ
_AMS_MSG_LEVEL=*.V
You can also start the internal trace for the AMS address space using the z/OS MODIFY (F) command.
For example, to start debug level trace, issue the following command:
/F xxxxAMSM LOG=*.D.
To stop debug level trace, and revert to the default information level trace, issue the following command:
/F xxxxAMSM LOG=*.I.
Related tasks
“Troubleshooting AMS problems” on page 67
Troubleshooting information to help you identify and resolve problems relating to Advanced Message
Security (AMS).
Using GSKit trace for problems related to certificates and keys
when using AMS on z/OS
Use this topic to understand how to turn on and turn off GSKit tracing when using AMS on z/OS.
Introduction
In the JCL for the AMS (ssidAMSM) address space, and in sample JCL hlq.SCSQPROC(CSQ40CFG) that
runs program CSQ0UTIL, there is an ENVARS DD card that can be used to set environment variables. A
sample AMS environment variables file called hlq.SCSQPROC(CSQ40ENV) is provided which includes
details of how to turn on and turn off GSKit trace.
If you set GSK trace environment variables in the ENVARS DD card in the JCL for the AMS address space,
variables are set from the point that the AMS address space is started (that is, as part of queue manager
start-up if AMS has been configured). Variables either turn on, or turn off, tracing of all gsk_* calls issued
by the AMS address space.
If you set GSK trace environment variables in the ENVARS DD card in sample JCL
hlq.SCSQPROC(CSQ40CFG), variables are set for the duration of the CSQ40CFG job. Variables either
turn on, or turn off, tracing of all gsk_* calls issued during the processing of AMS commands that, for
example, define and display AMS policies.
Turning on GSKit trace
Turn on GSKit trace for the AMS address space
To turn on GSKit trace for the AMS address space, carry out the following procedure:
1.Create JCL job hlq.SCSQPROC(CSQ40ENV) with:
GSK_TRACE_FILE=/u//AMStrace/gsktrace/gskssl.%.trc
GSK_TRACE=0xff
2.Specify member hlq.SCSQPROC(CSQ40ENV) on the ENVARS DD card in the ssidAMSM JCL for the
AMS address space. For example:
//ENVARS DD DSN=hlq.SCSQPROC(CSQ40ENV),DISP=SHR
3.Start the queue manager (ssidMSTR) and channel initiator (ssidCHIN) address spaces. Remember
that the AMS (ssidAMSM) address space is started as part of starting the queue manager.
You can see the environment variable settings in the job log for the AMS address space. For example:
-4.09.18 STC13921 CSQ06091 !MQ07 CSQ0DSRV IBM MQ AMS for z/OS starting V9.2.3, level GA
-4.09.18 STC13921 CSQ06191 !MQ07 CSQ0DSRV AMSPROD=ADVANCEDVUE, recording product usage for MQ z/OS Adv
IBM MQ troubleshooting and support 407
VUE product id 5555AV9
-4.09.18 STC13921 CSQ06331 !MQ07 CSQ0DSRV AMS environment variables values:
-4.09.18 STC13921 CSQ06341 !MQ07 CSQ0DSRV _CEE_ENVFILE_S=DD:ENVVARS
-4.09.18 STC13921 CSQ06341 !MQ07 CSQ0DSRV _AMS_MSG_LEVEL=*.V
-4.09.18 STC13921 CSQ06341 !MQ07 CSQ0DSRV _AMS_MSG_FOLDING=NO
-4.09.18 STC13921 CSQ06341 !MQ07 CSQ0DSRV _AMS_INIT_THREADS=20
-4.09.18 STC13921 CSQ06341 !MQ07 CSQ0DSRV _AMS_MAX_THREADS=100
-4.09.18 STC13921 CSQ06341 !MQ07 CSQ0DSRV TZ=ESTESDT
-4.09.18 STC13921 CSQ06341 !MQ07 CSQ0DSRV GSK_TRACE_FILE=/u//AMStrace/gsktrace/gskssl.%.trc
-4.09.18 STC13921 CSQ06341 !MQ07 CSQ0DSRV GSK_TRACE=0xff
-4.09.21 STC13921 CSQ06531 !MQ07 CSQ0DLCL CRL checking disabled
-4.09.21 STC13921 CSQ06021 !MQ07 CSQ0DCNS AMS initialization complete
The gsk_* calls issued by the AMS address space to protect or unprotect IBM MQ messages at put
and get time respectively, are traced. A trace file is created when the AMS address space is started,
to trace all gsk_* calls subsequently performed by the address space. The use of the % character in
the name of the trace file ensures that trace files are named by Unix Systems Services (USS) process
identifiers.
4.Issue the following command to list the trace files produced:
/u//AMStrace/gsktrace:>ls
For example, you see files like:
gskssl.84017302.trc
5.To format and view the trace file, issue the following command in USS:
/u//AMStrace/gsktrace:>gsktrace gskssl.84017302.trc
which produces output similar to the following:
07/01/2022-10:36:41 Thd-0 INFO gsk_svc_init(): System SSL Version 4, Release 4, Service level OA60573
07/01/2022-10:36:41 Thd-0 INFO gsk_svc_init(): LE runtime level 0x42040000, 31-bit addressing mode
07/01/2022-10:36:41 Thd-0 INFO gsk_svc_init(): STDOUT handle=-1, STDERR handle=-1, TRACE handle=0
07/01/2022-10:36:41 Thd-0 INFO gsk_dll_init_once(): Using variant character table for code set IBM-1047
07/01/2022-10:36:41 Thd-0 INFO gsk_dll_init_once(): Using local code page IBM-1047
07/01/2022-10:36:41 Thd-0 INFO gsk_dll_init_once(): Using ISO8859-1 for TELETEX string
07/01/2022-10:36:41 Thd-0 INFO gsk_dll_init_once(): 64-bit encryption enabled
07/01/2022-10:36:41 Thd-0 INFO gsk_dll_init_once(): 128-bit encryption enabled
07/01/2022-10:36:41 Thd-0 INFO gsk_dll_init_once(): 168-bit encryption enabled
07/01/2022-10:36:41 Thd-0 INFO gsk_dll_init_once(): 256-bit encryption enabled
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): Crypto assist supports strong encryption
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): FIPS mode level 1101
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): SHA-1 crypto assist is available
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): SHA-224 crypto assist is available
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): SHA-256 crypto assist is available
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): SHA-384 crypto assist is available
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): SHA-512 crypto assist is available
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): DES crypto assist is available
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): DES3 crypto assist is available
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): AES 128-bit crypto assist is available
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): AES 256-bit crypto assist is available
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): AES-GCM crypto assist is available
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): Cryptographic accelerator is not available
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): Cryptographic coprocessor is available
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): Public key hardware support is available
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): Max RSA key sizes in hardware - signature 4096, encryption
4096, verification 4096
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): Maximum RSA token size 3500
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): ECC clear key support is available
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): ECC secure key support is available. Maximum key size 521
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): TKDS is available for the storage of persistent PKCS #11
objects
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): ICSF Secure key PKCS #11 support is not available
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): ICSF FIPS compatibility mode
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): ICSF FMID is HCR77D1
07/01/2022-10:36:41 Thd-0 INFO gsk_dll_init_once(): Job name CSQ40CFG, Process 05020096
07/01/2022-10:36:41 Thd-0 INFO gsk_dll_init_once(): GSKSRVR communication area at 00000000
07/01/2022-10:36:41 Thd-0 ENTRY gsk_dn_to_name(): ---> DN: CN=USER,O=IBM,C=UK
07/01/2022-10:36:41 Thd-0 EXIT gsk_dn_to_name():  DN: CN=USER1,O=IBM,C=UK
07/01/2022-10:36:46 Thd-0 EXIT gsk_dn_to_name():  DN: CN=USER,O=IBM,C=UK
07/01/2022-10:36:46 Thd-0 EXIT gsk_dn_to_name(): <--- Exit status 0x00000000 (0)
Turn on GSKit trace for JCL hlq.SCSQPROC(CSQ40CFG)