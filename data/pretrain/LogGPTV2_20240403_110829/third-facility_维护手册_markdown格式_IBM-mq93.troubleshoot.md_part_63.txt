### IBM MQ Troubleshooting and Support

#### Starting and Stopping Traces

1. **Starting a Trace:**
   - To start a trace for the `CHINIT` subsystem, use the following command:
     ```plaintext
     +ssid 'CHINIT' TRACE STARTED, ASSIGNED TRACE NUMBER 01
     ```
   - The system will assign a unique trace number (e.g., 01).

2. **Stopping a Trace:**
   - To stop the trace, issue the following command:
     ```plaintext
     +ssid STOP TRACE(CHINIT) TNO(01)
     ```

3. **Gathering Additional Line Trace Data:**
   - After stopping the trace, you can gather more line trace data by issuing another `START TRACE` command followed by a `DISPLAY CHSTATUS SAVED` command to capture the data in `CSQSNAP`.

#### Related Tasks
- **Collecting Troubleshooting Information for IBM Support:**
  - When opening a case with IBM, include additional IBM MQ troubleshooting information (MustGather data) to help investigate the problem. IBM Support may request further information on a case-by-case basis.
  - Refer to "Collecting troubleshooting information for IBM Support" on page 302 for more details.

### Other Types of Trace on z/OS

There are other trace facilities available for problem determination. These include:

- **CICS Adapter Trace:**
  - The CICS adapter writes entries to the CICS trace if your trace number is set to a value between 0 and 199 (decimal).
  - CICS tracing can be enabled dynamically using the CICS-supplied transaction CETR or by setting the `USERTR` parameter in the CICS system initialization table (SIT) to `YES`.
  - CICS trace entries from the CICS adapter have a value `AP0 000`, where `000` is the hexadecimal equivalent of the decimal value of the CICS adapter trace number.

- **System SSL Trace:**
  - System SSL trace can be collected using the SSL Started Task. Details on setting up this task are available in the System Secure Sockets Layer Programming documentation (SC24-5901).
  - A trace file is generated for each `SSLTASK` running in the `CHINIT` address space.

- **z/OS Traces:**
  - z/OS traces, common to all products operating as formal subsystems of z/OS, are available for use with IBM MQ.
  - For information on using and interpreting these traces, refer to the z/OS MVS Diagnosis: Tools and Service Aids manual.

### CICS Adapter Trace Entries

The following table lists the CICS adapter trace entries and their descriptions:

| Name | Description | Trace Sequence | Trace Data |
|------|-------------|----------------|------------|
| CSQCABNT | Abnormal termination due to the end of the task. An implicit backout could be performed. | Before issuing `END_THREAD ABNORMAL` to IBM MQ. | Unit of work information. |
| CSQCAUID | Bridge security before validating bridge user password or PassTicket. | Before validation. | User ID. |
| CSQCBACK | Syncpoint backout due to an explicit backout request from the application. | Before issuing `BACKOUT` to IBM MQ. | Unit of work information. |
| CSQCCONX | Before issuing `MQCONNX` to IBM MQ. | Before `MQCONNX`. | Connection tag. |
| CSQCCCRC | Completion code and reason code after an unsuccessful return from an API call. | After unsuccessful return. | Completion code and reason code. |
| CSQCCOMM | Syncpoint commit due to a single-phase or second phase of a two-phase commit request. | Before issuing `COMMIT` to IBM MQ. | Unit of work information. |
| CSQCDCFF | IBM use only. | N/A | N/A |
| CSQCDCIN | IBM use only. | N/A | N/A |
| CSQCDCOT | IBM use only. | N/A | N/A |
| CSQCEXER | Execute resolve before issuing `EXECUTE_RESOLVE` to IBM MQ. | Before `EXECUTE_RESOLVE`. | Unit of work information. |
| CSQCGETW | GET wait before issuing CICS wait. | Before CICS wait. | Address of the ECB to be waited on. |
| CSQCGMGD | GET message data after a successful return from `MQGET`. | After `MQGET`. | Up to 40 bytes of the message data. |
| CSQCGMGH | GET message handle before issuing `MQGET` to IBM MQ. | Before `MQGET`. | Object handle. |
| CSQCGMGI | Get message ID after a successful return from `MQGET`. | After `MQGET`. | Message ID and correlation ID. |
| CSQCHCER | Hconn error before issuing any MQ verb. | Before any MQ verb. | Connection handle. |
| CSQCINDL | In-doubt list after a successful return from the second `INQUIRE_INDOUBT`. | After `INQUIRE_INDOUBT`. | In-doubt units of work list. |
| CSQCINDO | IBM use only. | N/A | N/A |
| CSQCINDS | In-doubt list size after a successful return from the first `INQUIRE_INDOUBT` and the in-doubt list is not empty. | After `INQUIRE_INDOUBT`. | Length of the list; divided by 64 gives the number of in-doubt units of work. |
| CSQCINDW | Syncpoint in doubt during syncpoint processing. | During syncpoint processing. | Unit of work information. |
| CSQCINQH | INQ handle before issuing `MQINQ` to IBM MQ. | Before `MQINQ`. | Object handle. |
| CSQCLOSH | CLOSE handle before issuing `MQCLOSE` to IBM MQ. | Before `MQCLOSE`. | Object handle. |
| CSQCLOST | Disposition lost during the resynchronization process. | During resynchronization. | Unit of work ID known to CICS. |
| CSQCNIND | Disposition not in doubt during the resynchronization process. | During resynchronization. | Unit of work ID known to CICS. |
| CSQCNORT | Normal termination due to the end of the task. An implicit syncpoint commit might be performed. | Before issuing `END_THREAD NORMAL` to IBM MQ. | Unit of work information. |
| CSQCOPNH | OPEN handle after a successful return from `MQOPEN`. | After `MQOPEN`. | Object handle. |
| CSQCOPNO | OPEN object before issuing `MQOPEN` to IBM MQ. | Before `MQOPEN`. | Object name. |
| CSQCPMGD | PUT message data before issuing `MQPUT` to IBM MQ. | Before `MQPUT`. | Up to 40 bytes of the message data. |
| CSQCPMGH | PUT message handle before issuing `MQPUT` to IBM MQ. | Before `MQPUT`. | Object handle. |
| CSQCPMGI | PUT message ID after a successful `MQPUT` from IBM MQ. | After `MQPUT`. | Message ID and correlation ID. |
| CSQCPREP | Syncpoint prepare before issuing `PREPARE` to IBM MQ in the first phase of two-phase commit processing. | Before `PREPARE`. | Unit of work information. |
| CSQCP1MD | PUTONE message data before issuing `MQPUT1` to IBM MQ. | Before `MQPUT1`. | Up to 40 bytes of the message data. |
| CSQCP1MI | PUTONE message ID after a successful return from `MQPUT1`. | After `MQPUT1`. | Message ID and correlation ID. |
| CSQCP1ON | PUTONE object name before issuing `MQPUT1` to IBM MQ. | Before `MQPUT1`. | Object name. |
| CSQCRBAK | Resolved backout before issuing `RESOLVE_ROLLBACK` to IBM MQ. | Before `RESOLVE_ROLLBACK`. | Unit of work information. |
| CSQCRCMT | Resolved commit before issuing `RESOLVE_COMMIT` to IBM MQ. | Before `RESOLVE_COMMIT`. | Unit of work information. |
| CSQCRMIR | RMI response before returning to the CICS RMI (resource manager interface) from a specific invocation. | Before returning to CICS RMI. | Architected RMI response value. |
| CSQCRSYN | Resync before the resynchronization process starts for the task. | Before resynchronization. | Unit of work ID known to CICS. |
| CSQCSETH | SET handle before issuing `MQSET` to IBM MQ. | Before `MQSET`. | Object handle. |
| CSQCTASE | IBM use only. | N/A | N/A |
| CSQCTEST | Trace test used in `EXEC CICS ENTER TRACE` call to verify the trace number supplied by the user or the trace status of the connection. | No data. | N/A |

### Enabling Internal Trace for the AMSM Address Space

Trace for the AMSM address space can be enabled using the `_AMS_MSG_LEVEL` variable, which is passed into the AMSM address space through the `ENVARS DD` card.

- **Sample Data Set for the ENVARS DD Card:**
  - The sample data set is located in `thlqual.SCSQPROC(CSQ40ENV)`.

- **Severity Levels:**
  - `S`: Severe messages only.
  - `E`: Error and severe messages only.
  - `W`: Warning, error, and severe messages only.
  - `I`: Informational, warning, error, and severe messages (default).
  - `D`: Debug mode, all messages with additional debug diagnostics.
  - `V`: Verbose mode, all preceding plus buffer dumps.

- **Example Commands:**
  - To enable the default for `_AMS_MSG_LEVEL`:
    ```plaintext
    _AMS_MSG_LEVEL=*.I
    ```
  - To enable verbose mode:
    ```plaintext
    _AMS_MSG_LEVEL=*.V
    ```

- **Using z/OS MODIFY (F) Command:**
  - To start debug level trace:
    ```plaintext
    /F xxxxAMSM LOG=*.D
    ```
  - To stop debug level trace and revert to the default information level trace:
    ```plaintext
    /F xxxxAMSM LOG=*.I
    ```

### Using GSKit Trace for Problems Related to Certificates and Keys

Use GSKit trace to troubleshoot issues related to certificates and keys when using Advanced Message Security (AMS) on z/OS.

#### Introduction

- **JCL for the AMS (ssidAMSM) Address Space:**
  - The `ENVARS DD` card in the JCL for the AMS address space can be used to set environment variables.
  - A sample AMS environment variables file `hlq.SCSQPROC(CSQ40ENV)` is provided, which includes details on how to turn on and off GSKit trace.

- **Setting GSK Trace Environment Variables:**
  - If set in the `ENVARS DD` card in the JCL for the AMS address space, variables are set from the point that the AMS address space is started.
  - If set in the `ENVARS DD` card in sample JCL `hlq.SCSQPROC(CSQ40CFG)`, variables are set for the duration of the `CSQ40CFG` job.

#### Turning On GSKit Trace

1. **For the AMS Address Space:**
   - Create JCL job `hlq.SCSQPROC(CSQ40ENV)` with:
     ```plaintext
     GSK_TRACE_FILE=/u//AMStrace/gsktrace/gskssl.%.trc
     GSK_TRACE=0xff
     ```
   - Specify member `hlq.SCSQPROC(CSQ40ENV)` on the `ENVARS DD` card in the `ssidAMSM` JCL.
   - Start the queue manager (`ssidMSTR`) and channel initiator (`ssidCHIN`) address spaces.
   - Verify the environment variable settings in the job log for the AMS address space.

2. **Listing and Viewing Trace Files:**
   - List the trace files produced:
     ```plaintext
     /u//AMStrace/gsktrace:>ls
     ```
   - Format and view the trace file:
     ```plaintext
     /u//AMStrace/gsktrace:>gsktrace gskssl.84017302.trc
     ```

#### Example Output

```plaintext
07/01/2022-10:36:41 Thd-0 INFO gsk_svc_init(): System SSL Version 4, Release 4, Service level OA60573
07/01/2022-10:36:41 Thd-0 INFO gsk_svc_init(): LE runtime level 0x42040000, 31-bit addressing mode
07/01/2022-10:36:41 Thd-0 INFO gsk_svc_init(): STDOUT handle=-1, STDERR handle=-1, TRACE handle=0
07/01/2022-10:36:41 Thd-0 INFO gsk_dll_init_once(): Using variant character table for code set IBM-1047
07/01/2022-10:36:41 Thd-0 INFO gsk_dll_init_once(): Using local code page IBM-1047
07/01/2022-10:36:41 Thd-0 INFO gsk_dll_init_once(): Using ISO8859-1 for TELETEX string
07/01/2022-10:36:41 Thd-0 INFO gsk_dll_init_once(): 64-bit encryption enabled
07/01/2022-10:36:41 Thd-0 INFO gsk_dll_init_once(): 128-bit encryption enabled
07/01/2022-10:36:41 Thd-0 INFO gsk_dll_init_once(): 168-bit encryption enabled
07/01/2022-10:36:41 Thd-0 INFO gsk_dll_init_once(): 256-bit encryption enabled
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): Crypto assist supports strong encryption
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): FIPS mode level 1101
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): SHA-1 crypto assist is available
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): SHA-224 crypto assist is available
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): SHA-256 crypto assist is available
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): SHA-384 crypto assist is available
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): SHA-512 crypto assist is available
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): DES crypto assist is available
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): DES3 crypto assist is available
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): AES 128-bit crypto assist is available
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): AES 256-bit crypto assist is available
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): AES-GCM crypto assist is available
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): Cryptographic accelerator is not available
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): Cryptographic coprocessor is available
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): Public key hardware support is available
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): Max RSA key sizes in hardware - signature 4096, encryption 4096, verification 4096
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): Maximum RSA token size 3500
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): ECC clear key support is available
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): ECC secure key support is available. Maximum key size 521
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): TKDS is available for the storage of persistent PKCS #11 objects
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): ICSF Secure key PKCS #11 support is not available
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): ICSF FIPS compatibility mode
07/01/2022-10:36:41 Thd-0 INFO crypto_init(): ICSF FMID is HCR77D1
07/01/2022-10:36:41 Thd-0 INFO gsk_dll_init_once(): Job name CSQ40CFG, Process 05020096
07/01/2022-10:36:41 Thd-0 INFO gsk_dll_init_once(): GSKSRVR communication area at 00000000
07/01/2022-10:36:41 Thd-0 ENTRY gsk_dn_to_name(): ---> DN: CN=USER,O=IBM,C=UK
07/01/2022-10:36:41 Thd-0 EXIT gsk_dn_to_name():  DN: CN=USER1,O=IBM,C=UK
07/01/2022-10:36:46 Thd-0 EXIT gsk_dn_to_name():  DN: CN=USER,O=IBM,C=UK
07/01/2022-10:36:46 Thd-0 EXIT gsk_dn_to_name(): <--- Exit status 0x00000000 (0)
```

This guide provides a comprehensive overview of starting and stopping traces, using different types of traces, and enabling and using GSKit trace for troubleshooting IBM MQ on z/OS.