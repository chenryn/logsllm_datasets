---
author: José M. Pérez
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 5351
date: '2017-12-13 23:27:00'
editorchoice: false
excerpt: 在这篇文章中我们将涉及如下的主题：不同的占位符类型的概述；基于 SVG 的占位符（边缘、形状和轮廓）；自动化处理。
fromurl: https://medium.freecodecamp.org/using-svg-as-placeholders-more-image-loading-techniques-bed1b810ab2c
id: 9142
islctt: true
largepic: /data/attachment/album/201712/13/232720zg4qcuccgx7xcncm.jpg
permalink: /article-9142-1.html
pic: /data/attachment/album/201712/13/232720zg4qcuccgx7xcncm.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 在这篇文章中我们将涉及如下的主题：不同的占位符类型的概述；基于 SVG 的占位符（边缘、形状和轮廓）；自动化处理。
tags:
- 图像
- SVG
- 占位符
thumb: false
title: 怎么使用 SVG 作为一个图像占位符
titlepic: true
translator: qhwdw
updated: '2017-12-13 23:27:00'
---
![](/data/attachment/album/201712/13/232720zg4qcuccgx7xcncm.jpg)
*从图像中生成的 SVG 可以用作占位符。请继续阅读！*
我对怎么去让 web 性能更优化和图像加载的更快充满了热情。在这些感兴趣的领域中的其中一项研究就是占位符：当图像还没有被加载的时候应该去展示些什么？
在前些天，我偶然发现了使用 SVG 的一些加载技术，我将在这篇文章中谈论它。
在这篇文章中我们将涉及如下的主题：
* 不同的占位符类型的概述
* 基于 SVG 的占位符（边缘、形状和轮廓）
* 自动化处理
### 不同的占位符类型的概述
之前 [我写过一篇关于图像占位符和 延迟加载   lazy-loading ](https://medium.com/@jmperezperez/lazy-loading-images-on-the-web-to-improve-loading-time-and-saving-bandwidth-ec988b710290) 的文章以及 [关于它的讨论](https://www.youtube.com/watch?v=szmVNOnkwoU)。当进行一个图像的延迟加载时，一个很好的办法是提供一个东西作为占位符，因为它可能会很大程度上影响用户的感知体验。之前我提供了几个选择：
![](/data/attachment/album/201712/13/232721vsyanhvsybjnujon.png)
在图像被加载之前，有几种办法去填充图像区域：
* 在图像区域保持空白：在一个响应式设计的环境中，这种方式防止了内容的跳跃。从用户体验的角度来看，那些布局的改变是非常差的作法。但是，它是为了性能的考虑，否则，每次为了获取图像尺寸，浏览器就要被迫进行布局重新计算，以便为它留下空间。
* 占位符：在图像那里显示一个用户配置的图像。我们可以在背景上显示一个轮廓。它一直显示直到实际的图像被加载完成，它也被用于当请求失败或者当用户根本没有设置头像图像的情况下。这些图像一般都是矢量图，并且由于尺寸非常小，可以作为内联图片。
* 单一颜色：从图像中获取颜色，并将其作为占位符的背景颜色。这可能是图像的主要颜色、最具活力的颜色 … 这个想法是基于你正在加载的图像，并且它将有助于在没有图像和图像加载完成之间进行平滑过渡。
* 模糊的图像：也被称为模糊技术。你提供一个极小版本的图像，然后再去过渡到完整的图像。最初显示的图像的像素和尺寸是极小的。为去除 细节   artifacts ，该图像会被放大并模糊化。我在前面写的 [Medium 是怎么做的渐进加载图像](https://medium.com/@jmperezperez/how-medium-does-progressive-image-loading-fd1e4dc1ee3d)、[使用 WebP 去创建极小的预览图像](https://medium.com/@jmperezperez/using-webp-to-create-tiny-preview-images-3e9b924f28d6)、和[渐进加载图像的更多示例](https://medium.com/@jmperezperez/more-examples-of-progressive-image-loading-f258be9f440b) 中讨论过这方面的内容。
此外还有其它的更多的变种，许多聪明的人也开发了其它的创建占位符的技术。
其中一个就是用梯度图代替单一的颜色。梯度图可以创建一个更精确的最终图像的预览，它整体上非常小（提升了有效载荷）。
![](/data/attachment/album/201712/13/232722yncfox1n1c9zr191.jpg)
*使用梯度图作为背景。这是来自 Gradify 的截屏，它现在已经不在线了，代码 [在 GitHub](https://github.com/fraser-hemp/gradify)。*
另外一种技术是使用基于 SVG 的技术，它在最近的实验和研究中取得到了一些进展。
### 基于 SVG 的占位符
我们知道 SVG 是完美的矢量图像。而在大多数情况下我们是希望加载一个位图，所以，问题是怎么去矢量化一个图像。其中一些方法是使用边缘、形状和轮廓。
#### 边缘
在 [前面的文章中](https://medium.com/@jmperezperez/drawing-images-using-edge-detection-and-svg-animation-16a1a3676d3)，我解释了怎么去找出一个图像的边缘并创建一个动画。我最初的目标是去尝试绘制区域，矢量化该图像，但是我并不知道该怎么去做到。我意识到使用边缘也可能是一种创新，我决定去让它们动起来，创建一个 “绘制” 的效果。
* [范例](https://codepen.io/jmperez/embed/oogqdp?default-tabs=html%2Cresult&embed-version=2&height=600&host=https%3A%2F%2Fcodepen.io&referrer=https%3A%2F%2Fmedium.freecodecamp.org%2Fmedia%2F8c5c44a4adf82b09692a34eb4daa3e2e%3FpostId%3Dbed1b810ab2c&slug-hash=oogqdp#result-box)
> 
> [使用边缘检测绘制图像和 SVG 动画](https://medium.com/@jmperezperez/drawing-images-using-edge-detection-and-svg-animation-16a1a3676d3)
> 
> 
> 在以前，很少使用和支持 SVG。一段时间以后，我们开始用它去作为一个某些图标的传统位图的替代品……
> 
> 
> 
#### 形状
SVG 也可以用于根据图像绘制区域而不是边缘/边界。用这种方法，我们可以矢量化一个位图来创建一个占位符。
在以前，我尝试去用三角形做类似的事情。你可以在 [CSSConf](https://jmperezperez.com/cssconfau16/#/45) 和 [Render Conf](https://jmperezperez.com/renderconf17/#/46) 上我的演讲中看到它。
* [范例](https://codepen.io/jmperez/embed/BmaWmQ?default-tabs=html%2Cresult&embed-version=2&height=600&host=https%3A%2F%2Fcodepen.io&referrer=https%3A%2F%2Fmedium.freecodecamp.org%2Fmedia%2F05d1ee44f0537f8257258124d7b94613%3FpostId%3Dbed1b810ab2c&slug-hash=BmaWmQ#result-box)
上面的 codepen 是一个由 245 个三角形组成的基于 SVG 占位符的概念验证。生成的三角形是基于 [Delaunay triangulation](https://en.wikipedia.org/wiki/Delaunay_triangulation) 的，使用了 [Possan’s polyserver](https://github.com/possan/polyserver)。正如预期的那样，使用更多的三角形，文件尺寸就更大。
#### Primitive 和 SQIP，一个基于 SVG 的 LQIP 技术
Tobias Baldauf 正在致力于另一个使用 SVG 的低质量图像占位符技术，它被称为 [SQIP](https://github.com/technopagan/sqip)。在深入研究 SQIP 之前，我先简单介绍一下 [Primitive](https://github.com/fogleman/primitive)，它是基于 SQIP 的一个库。
Primitive 是非常吸引人的，我强烈建议你去了解一下。它讲解了一个位图怎么变成由重叠形状组成的 SVG。它尺寸比较小，适合于直接内联放置到页面中。当步骤较少时，在初始的 HTML 载荷中作为占位符是非常有意义的。
Primitive 基于三角形、长方形、和圆形等形状生成一个图像。在每一步中它增加一个新形状。很多步之后，图像的结果看起来非常接近原始图像。如果你输出的是 SVG，它意味着输出代码的尺寸将很大。