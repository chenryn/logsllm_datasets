0 
35 
30 
25 
20 
15 
10 
5 
0 
0 
50 
100 
150 
200 
250 
300 
350 
Total Size of All Packages (MB) 
Uncached 
Cached 
(b)
Figure 7: Time required to generate a complete sys-
tem ﬁngerprint as a function of the number of pack-
ages installed on the device (a) and the total size of
those packages (b). Both ﬁgures show the average
time when all of the package hashes have been stored
(cached) and when none of the package hashes are
stored (uncached). Figure (a) also includes the num-
ber of bytes sent and received when communicating
the ﬁngerprint to the ThinAV server.
generated in 1.09 seconds for the same 110 apps when the
ﬁngerprint has been cached.
Data usage grows linearly with the number of packages on
the device. The data consumption ranges from 3.64 KB for
110 apps, down to 261 bytes for 5 apps. The majority of this
transmission is in the form of the uploaded ﬁngerprint, as
the response from ThinAV only downloads 70 bytes from the
server when the ﬁngerprint contains no hashes corresponding
to malicious apps.
The current implementation of the ThinAV client is sched-
uled to run the killswitch service every 15 minutes. Table 8
shows how much data would be consumed by ThinAV (un-
der the current conﬁguration) over diﬀerent lengths of time
Interval Data Consump-
1 Day
1 Week
1 Month
tion (5 Apps)
24.47 KB
171.28 KB
5.19 MB
Data Consump-
tion (110 Apps)
349.41 KB
2.39 MB
74.04 MB
Table 8: Data consumption of ThinAV killswitch
over diﬀerent time periods, for 5 and 110 apps in-
stalled on the device, assuming the killswitch is
scheduled to run every 15 minutes.
216
Scenario
Time (seconds)
110 apps / ideal 3G / no hashes cached
110 apps / typical 3G / no hashes cached
110 apps / ideal WiFi / no hashes cached
110 apps / typical WiFi / no hashes cached
110 apps / ideal 3G / all hashes cached
110 apps / typical 3G / all hashes cached
110 apps / ideal WiFi / all hashes cached
110 apps / typical WiFi / all hashes cached
26 apps / ideal 3G / no hashes cached
26 apps / typical 3G / no hashes cached
26 apps / ideal WiFi / no hashes cached
26 apps / typical WiFi / no hashes cached
26 apps / ideal 3G / all hashes cached
26 apps / typical 3G / all hashes cached
26 apps / ideal WiFi / all hashes cached
26 apps / typical WiFi / all hashes cached
26.206
26.430
26.204
26.223
3.424
3.478
3.423
3.428
1.034
1.258
1.032
1.051
0.285
0.339
0.285
0.290
Table 9: Time required to complete the ﬁngerprint-
ing operation for diﬀerent numbers of applications,
network performance, and caching scenarios.
and with two sets of installed apps (5 and 110).
Using the same network measurements from Section 4.5,
the measured ﬁngerprint generation times, and data trans-
mission totals, it is possible to compute a variety of poten-
tial running times for the entire ﬁngerprinting operation of
ThinAV killswitch using Equation 1. These values are sum-
marized in Table 9.
Scenario
Small Apps
Medium Apps
Large Apps
Total Data Uploaded (MB)
10 Apps
7.643
17.775
35.570
25 Apps
19.108
44.438
88.925
50 Apps
38.216
88.875
177.850
Table 10: Total upload sizes used for calculations of
manual scanning performance.
For calculating the cost of manually uploading missing
packages, we use the package size averages from Section 4.5
and use three sets of apps (10, 25, and 50 apps). Table
10 summarizes the total amount of data that would be up-
loaded for diﬀerent numbers of apps of diﬀerent sizes. The
upload times for the diﬀerent numbers and sizes of apps are
summarized in Table 11. Using the size and quantity of each
app, the scanning time could then be computed using the
equations in Tables 3 and 4. These results are summarized
in Table 12. Finally, referring to Equation 2, it is possible to
compute the time required to upload and scan missing apps
under diﬀerent scenarios.
The best case scenario is when ten small apps are uploaded
and scanned over an ideal WiFi connection. This takes 289.2
seconds, or just under ﬁve minutes. The worst case scenario
is where 50 large apps are uploaded and scanned over a typ-
ical 3G connection. This operation takes 17351.2 seconds,
or nearly ﬁve hours. However, if the same operation is per-
formed over a typical WiFi connection, the time required to
complete this one-time operation drops by more than half,
to 1.95 hours.
Ideal 3G
Scenario
Small Apps
Medium Apps
Large Apps
Small Apps
Typical 3G
Medium Apps
Large Apps
Small Apps
Ideal WiFi
Medium Apps
Large Apps
Small Apps
Typical WiFi
Medium Apps
Large Apps
Upload Time (Seconds)
10 Apps
4.367
10.157
20.326
485.360
1128.781
2258.833
0.102
0.237
0.474
41.111
95.609
191.326
25 Apps
10.919
25.393
50.814
1213.400
2821.953
5647.082
0.255
0.593
1.186
102.777
239.023
478.315
50 Apps
21.837
50.786
101.629
2426.801
5643.907
11294.164
0.510
1.185
2.371
205.553
478.046
956.630
Table 11: Upload times for the values in Table 10,
for four diﬀerent network conﬁgurations.
Scanning Time (Seconds)
Scenario
Small Apps / Kaspersky
Medium Apps / VirusChief
Large Apps / VirusChief
Small Apps / ComDroid
Medium Apps / ComDroid
Large Apps / ComDroid
10 Apps
161.021
634.032
1104.893
107.224
120.919
144.972
25 Apps
402.552
1585.080
2762.232
252.563
266.259
290.312
50 Apps
805.104
3170.159
5524.465
494.796
508.491
532.544
Table 12: Scan times for diﬀerent numbers of apps
with small, medium and large sizes, using conven-
tional scanning engines (Kaspersky and VirusChief )
as well as the Android-speciﬁc scanner, ComDroid.
Discussion.
During long-term use of ThinAV, ﬁngerprinting installed
apps is the only operation that would likely take place fre-
quently.
In the best case, the killswitch requires about 1
second of computation followed by less than 4 KB of data
transmission for a set of 110 installed apps. This operation
would be unnoticeable to a user, especially on a physical
Android device, which is typically more powerful than the
Android emulator.
In terms of data consumption, the 74 MB per month for
uploading the ﬁngerprint of 110 apps is non-trivial, particu-
larly for users with pay-as-you-go type data plans. We note,
however, that data consumption can be lowered by reducing
the frequency with which the killswitch is run. Compressing
the data for ﬁngerprint submission and response retrieval is
possible and would likely also reduce data consumption.
5. LIMITATIONS
We have shown that despite being in an early prototype
form, ThinAV could be realistically deployed on actual de-
vices as a free and lightweight anti-malware system. We
now discuss some of the limitations of the prototype and
the system overall.
OS modiﬁcation. Because the Package Installer is part of
the core Android OS, ThinAV cannot be installed on any
Android device as an application. Instead, the underlying
OS must be replaced with a ThinAV-enabled version. Al-
ternatively, Google and other phone manufacturers could
incorporate ThinAV directly into their own builds.
Test environment. All tests in our experiment were per-
formed on the Android emulator. While we believe the em-
217
ulator provides accurate technical feasibility metrics, it also
provides a lower bound on speed measurements. Physical
devices are generally more powerful, but also have battery
consumption concerns. Future work will evaluate battery
consumption by ThinAV.
Third-party scanning services. ThinAV relies on the con-
tinual existence of third-party scanning services in a pro-
duction capacity. The terms of service of these services may
change, and services may also cease to exist. The decision on
whether or not to support HTTPS connections is also out of
ThinAV’s control, as are denial-of-service attacks (which are
possible for any cloud-based anti-malware). Fortunately, the
modular design of ThinAV should help transparently replace
scanning modules without updating clients.
6. CONCLUSIONS
Keeping malware in check for Android is a diﬃcult prob-
lem; Android has a chaotic multi-market app environment
and the ability for users to side-load apps of unknown prove-
nance. We address this problem not by imposing a massive
anti-malware regime, but by just the opposite. Our Thi-
nAV system combines a lightweight footprint on an Android
device, consisting of a safe installer and killswitch, with
the ability to leverage multiple free, already-existing anti-
malware services on the Internet. As only apps are scanned
and requests are proxied through a ThinAV server, no per-
sonal or IP address data is leaked to outside services. Our
experiments with performance and data consumption have
shown that small is practical, especially if ThinAV is fully
integrated into the Android app ecosystem and is already
primed with scan results for popular apps.
Acknowledgment. This work has been supported in part
by the Natural Sciences and Engineering Council of Canada
via ISSNet, the Internetworked Systems Security Network.
7. REFERENCES
[1] D. Barrera, W. Enck, and P. C. van Oorschot. Meteor:
Seeding a Security-Enhancing Infrastructure for
Multi-market Application Ecosystems. In IEEE
Mobile Security Technologies, 2012.
[2] J. Cheng, S. H. Wong, H. Yang, and S. Lu.
Smartsiren: virus detection and alert for smartphones.
In 5th International Conference on Mobile Systems,
Applications and Services, pages 258–271, 2007.
[3] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner.
Analyzing inter-application communication in
Android. In 9th International Conference on Mobile
Systems, Applications, and Services, pages 239–252,
2011.
[4] M. Chiriac. Tales from cloud nine. In 19th Virus
Bulletin International Conference, pages 83–88, 2009.
[5] B.-G. Chun and P. Maniatis. Augmented smartphone
applications through clone cloud execution. In 12th
Workshop on Hot Topics in Operating Systems, 2009.
[6] E. Cuervo, A. Balasubramanian, D.-k. Cho,
A. Wolman, S. Saroiu, R. Chandra, and P. Bahl.
MAUI: making smartphones last longer with code
oﬄoad. In 8th International Conference on Mobile
Systems, Applications, and Services, pages 49–62,
2010.
[7] B. Dixon and S. Mishra. On rootkit and malware
detection in smartphones. In 2010 International
Conference on Dependable Systems and Networks
Workshops (DSN-W), pages 162–163, 2010.
[8] W. Enck, M. Ongtang, and P. McDaniel. On
lightweight mobile phone application certiﬁcation. In
16th ACM Conference on Computer and
Communications Security, pages 235–245, 2009.
[9] A. P. Felt, M. Finifter, E. Chin, S. Hanna, and
D. Wagner. A survey of mobile malware in the wild.
In 1st ACM Workshop on Security and Privacy in
Smartphones and Mobile Devices, pages 3–14, 2011.
[10] R. Gass and C. Diot. An experimental performance
comparison of 3G and Wi-Fi. In Passive and Active
Measurement, volume 6032 of LNCS, pages 71–80,
2010.
[11] IEEE Computer Society. Wireless LAN medium
access control (MAC) and physical layer speciﬁcations
enhancements for higher throughput, Oct. 2009. IEEE
Std 802.11n-2009.
[12] M. Jakobsson and K.-A. Johansson. Retroactive
detection of malware with applications to mobile
platforms. In USENIX HotSec, 2010.
[13] M. Jakobsson and A. Juels. Server-side detection of
malware infection. In 2009 New Security Paradigms
Workshop, pages 11–22, 2009.
[14] C. Jarabek. Towards cloud-based anti-malware
protection for desktop and mobile platforms. Master’s
thesis, University of Calgary, 2012.
[15] L. Liu, G. Yan, X. Zhang, and S. Chen. VirusMeter:
Preventing your cellphone from spies. In Recent
Advances in Intrusion Detection, volume 5758 of
LNCS, pages 244–264, 2009.
[16] H. Lockheimer. Android and security.
http://googlemobile.blogspot.com/2012/02/
android-and-security.html, Feb. 2012.
[17] L. Martignoni, R. Paleari, and D. Bruschi. A
framework for behavior-based malware analysis in the
cloud. In Information Systems Security, volume 5905
of LNCS, pages 178–192, 2009.
[18] C. Nachenberg, Z. Ramzan, and V. Seshadri.
Reputation: A new chapter in malware protection. In
19th Virus Bulletin International Conference, pages
185–191, 2009.
[19] J. Oberheide, E. Cooke, and F. Jahanian. Rethinking
antivirus: executable analysis in the network cloud. In
USENIX HotSec, 2007.
[20] J. Oberheide, E. Cooke, and F. Jahanian. CloudAV:
N-version antivirus in the network cloud. In 17th
USENIX Security Symposium, pages 91–106, 2008.
[21] J. Oberheide, K. Veeraraghavan, E. Cooke, J. Flinn,
and F. Jahanian. Virtualized in-cloud security services
for mobile devices. In 1st Workshop on Virtualization
in Mobile Computing, pages 31–35, 2008.
[22] G. Portokalidis, P. Homburg, K. Anagnostakis, and
H. Bos. Paranoid Android: versatile protection for
smartphones. In 26th Annual Computer Security
Applications Conference, pages 347–356, 2010.
[23] D. Rowinski. More than 50% of Android devices still
running Froyo. ReadWrite Mobile, 6 September 2011.
http://www.readwriteweb.com/mobile/2011/09/
more-than-50-of-android-device.php.
218