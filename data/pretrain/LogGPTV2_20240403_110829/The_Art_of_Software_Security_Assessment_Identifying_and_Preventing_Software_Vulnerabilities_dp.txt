Kill 
Terminate 
10 
SIGBUS* 
Data bus error 
Core dump 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
799 
Table 13-2. Signals and Their Default Actions 
Signal 
Number 
Signal 
Name 
Meaning 
Default Action 
11 
SIGSEGV 
Segmentation fault 
Core dump 
12 
SIGSYS* 
Invalid system call parameter 
Core dump 
13 
SIGPIPE 
Write to a pipe when there's no 
process to read from it 
Terminate 
14 
SIGALRM 
Alarm 
Terminate 
15 
SIGTERM 
Terminate 
Terminate 
16 
SIGURG 
Urgent data on I/O channel 
Ignore 
17 
SIGSTOP 
Stop process 
Stop 
18 
SIGTSTP 
Interactive stop 
Stop 
19 
SIGCONT 
Continue 
Continue a stopped 
process 
20 
SIGCHLD 
Child exited 
Ignored 
21 
SIGTTIN 
Background read attempt from 
terminal 
Stop 
22 
SIGTTOU 
Background write attempt from 
terminal 
Stop 
23 
SIGIO 
I/O available or completed 
Terminate 
24 
SIGXCPU 
CPU time limit exceeded 
Core dump 
25 
SIGXFSZ 
File size limit exceeded 
Core dump 
26 
SIGVTALRM 
Virtual time alarm 
Terminate 
27 
SIGPROF 
Profiling time alarm 
Terminate 
28 
SIGWINCH 
Window size change 
Ignored 
29 
SIGINFO 
Information request 
Terminate 
30 
SIGUSR1 
User-defined signal 
Ignored 
31 
SIGUSR2 
User-defined signal 
Ignored 
Note that the numbers assigned to signals might vary among operating systems and 
architectures, and not all signals are available on all architectures. For example, 
SIGBUS isn't defined for machines with an Intel architecture, but is defined for 
machines with a Sun SPARC architecture. If a signal isn't defined for a specific 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
800 
architecture, it might be ignored instead of performing the default action listed in 
Table 13-2. 
Each process has a signal mask, which is a bitmask describing which signals should 
be blocked by a process and which signals should be delivered. A process can block a 
signal by altering this signal mask, as you see shortly in "Handling Signals." 
Signal handling is an important part of many UNIX applications. Although signals are 
a fairly simple mechanism, there are some subtleties to dealing with them correctly 
when implementing software. So before you move on to signal-related problems, the 
following sections briefly describe the signal API. 
Sending Signals 
The kill() system call is used to send a signal to a process. You can test whether 
processes are present by killing them with signal zero or by trying an invalid signal 
and looking for a permission denied message. 
To send a signal to a process in Linux and Solaris, the sender must be the superuser 
or have a real or effective user ID equal to the receiver's real or saved set user ID. 
However, a sender can always send SIGCONT to a process in its session. 
To send a signal to a process in the BSD OSs, the sender must be the superuser, or 
the real or effective user IDs must match the receiver's real or effective user IDs. 
Note that this means a daemon that temporarily assumes the role of an unprivileged 
user with seteuid() opens itself to signals being delivered from that user. 
Earlier versions of Linux had the same behavior as BSD. For example, if the Network 
File System (NFS) userland daemon temporarily set its effective user ID to that of a 
normal user, that normal user could send signals to the daemon and potentially kill it. 
This is what precipitated the introduction of file system user IDs (FSUIDs) in Linux. 
They are now largely redundant in Linux because temporarily assuming an effective 
user ID no longer exposes a daemon to signals. 
FTP daemons are another good example of a situation in which a daemon running as 
root assumes the effective user permissions of a nonprivileged user. If a normal user 
logs in to an FTP daemon, the daemon uses that user's effective user ID so that it can 
perform file system interaction safely. On a BSD system, therefore, if that same user 
is logged in to a shell, he or she can send signals to the daemon and kill it. In previous 
versions, this had more significant consequences, as a core dump often contained 
password information from the system authentication database. 
OpenBSD has a unique restriction: A nonroot user can send only the following signals 
to a setuid or setgid process: SIGKILL, SIGINT, SIGTERM, SIGSTOP, SIGTTIN, SIGTTOU, 
SIGTSTP, SIGHUP, SIGUSR1, SIGUSR2, and SIGCONT. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
801 
Handling Signals 
There are a number of ways to instruct a process how to respond to a signal. First, the 
signal() function is used to set a routine for installing a handler to deal with the 
specified signal. The semantics from the man page are shown in the following 
prototype: 
#include  
typedef void (*sighandler_t)(int); 
sighandler_t signal(int signum, sighandler_t handler); 
The signum parameter indicates what signal to handle, and the handler argument 
indicates the routine that should be called for this signal. The signal() function 
returns the old handler for the specified signal. Instead of specifying a new 
signal-handling routine, the developer can elect to specify one of two constants for 
the handler parameter: SIG_IGN if the signal should be ignored and SIG_DFL if the 
default action should be taken when a signal is received. 
Note 
The default action varies depending on what signal is received. For example, the 
default action for SIGSEGV is to create a core image and terminate the process. The 
default action for SIGSTOP is to place the current process in the background. The 
default actions for each signal were presented earlier in Table 13-2. 
Developers can also set handlers via the sigaction() interface, which has the 
following prototype: 
#include  
int sigaction(int sig, const struct sigaction *act, 
              struct sigaction *oact); 
This interface enables you to set and retrieve slightly more detailed attributes for 
each signal an application handles. These attributes are supplied in the form of the 
sigaction structure, which is roughly defined like this: 
struct sigaction { 
     void      (*sa_handler)(int); 
     void      (*sa_sigaction)(int, siginfo_t *, void *); 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
802 
     sigset_t  sa_mask; 
     int       sa_flags; 
} 
The exact structure definition varies slightly between implementations. Basically, 
there are two function pointers: one to a signal handler (sa_handler) and one to a 
signal catcher (sa_sigaction). Developers set one or the other to be called upon 
receipt of the specified signal. 
Note 
Which handler is called from the sigaction structurethe handler (sa_handler) or the 
catcher (sa_sigaction)? It depends on the sa_flags member in the structure. If the 
SA_SIGINFO flag is set, sa_sigaction is called. Otherwise, sa_handler is called. In 
reality, because you are supposed to specify only one and can't define both, often 
these two structure members are coded as a union, so defining one overrides a 
previous definition of the other. 
The sa_mask field describes a set of signals that should be blocked while the signal 
handler is running, and the sa_flags member describes some additional behavioral 
characteristics for how to handle the signal, which are mentioned in "Signal 
Vulnerabilities" later in this chapter. 
The following function is used to change the process signal mask so that previously 
blocked signals can be delivered or to block the delivery of certain signals: 
int sigprocmask(int how, const sigset_t *set, sigset_t *oset) 
The how argument specifies how the set parameter should be interpreted and can take 
one of three values: 
SIG_BLOCK Indicates that the set parameter contains a set of signals to be 
added to the process signal mask 
SIG_UNBLOCK Indicates that the set parameter contains a set of signals to be 
unblocked from the current signal mask 
SIG_SETMASK Indicates that the set parameter should replace the current signal 
mask 
The oset parameter is filled in with the previous signal mask of the process. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
803 
In addition to these functions, you can make a multitude of other signal-related 
library calls. Only the ones to declare signal handlers and set actions are described in 
the following sections. 
Jump Locations 
On UNIX systems, you can return to a point in a program from any other point in a 
program contingent on a certain condition. To do this, you use setjmp(), longjmp(), 
sigsetjmp(), and siglongjmp(). Although these functions aren't part of the signal API, 
they are quite relevant, as they are often used in signal-handling routines to return to 
a certain location in the program in order to continue processing after a signal has 
been caught. 
The setjmp() function is used to designate a point in the program to which execution 
control is returned when the longjmp() function is called: 
int setjmp(jmp_buf env) 
void longjmp(jmp_buf env, int val) 
The context the program is in when setjmp() is called is restored when returned to via 
longjmp()that is, the register contents are reset to the state they were in when 
setjmp() was originally called, including the program counter and stack pointer, so 
that execution can continue at that point. A return value of 0 indicates a direct call of 
setjmp(), and a value of nonzero indicates that execution has returned to this point 
from a longjmp(). The val parameter supplied to longjmp() indicates what setjmp() 
returns when longjmp() is called. Because longjmp() hands execution off to a different 
part of the program, it doesn't return. Here's an example of these two functions in 
action: 
jmp_buf env; 
int process_message(int sock) 
{ 
    struct pkt_header header; 
    for(;;) 
    { 
        if(setjmp(env) != 0) 
            log("Invalid request received, ignoring message"); 
        if(read_packet_header(sock, &header)) < 0) 
            return -1; 
        switch(header.type) 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
804 
        { 
            case USER: 
                parse_username_request(sock); 
                break; 
            case PASS: 
                parse_password_request(sock); 
                break; 
            case OPEN: 
                parse_openfile_request(sock); 
                break; 
            case QUIT 
                parse_quit_request(sock); 
                break; 
            default: 
                log("invalid message"); 
                break; 
        } 
    } 
} 
Say you had a function such as the one in this example, and then several functions 
deep from the parse_openfile_request(), you had the following function for opening 
a file on the system: 
int open_file_internal(unsigned char *filename) 
{ 
    if(strstr(filename, "../")) 
        longjmp(env, 1); 
    ... open file ... 
} 
In this case, the longjmp() call causes the program to restart execution at the location 
of the corresponding setjmp() function, in process_message(). The setjmp() function 
will return a nonzero valuein this case, 1 because 1 was specified as the second 
parameter to longjmp(). 
There are also two other very similar functions sigsetjmp() and siglongjmp() that are 
used to achieve a similar effect except that they take process signal masks into 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
805 
consideration as well. This is achieved through the savesigs parameter passed to 
sigsetjmp(): 
int sigsetjmp(sigjmp_buf env, int savesigs) 
int siglongjmp(sigjmp_buf env, int val) 
If the savesigs value is nonzero, the signal mask of the process at the time sigsetjmp() 
is called is also saved so that when siglongjmp() is called, it can be restored. In the 
next section, you see why mixing these functions with signal handlers is a dangerous 
practice. 
Signal Vulnerabilities 
A signal-handling routine can be called at any point during program execution, from 
the moment the handler's installed until the point it's removed. Therefore, any 
actions that take place between those two points in time can be interrupted. 
Depending on what the signal handler does, this interruption could turn out to be a 
security vulnerability. To understand the text in this section, you must be familiar 
with the term asynchronous-safe (sometimes referred to as async-safe, or 
signal-safe). An asynchronous-safe function is a function that can safely and correctly 
run even if it is interrupted by an asynchronous event, such as a signal handler or 
interrupting thread. An asynchronous-safe function is by definition reentrant, but has 
the additional property of correctly dealing with signal interruptions. Generally 
speaking, all signal handlers need to be asynchronous-safe; the reasons why will 
become clear throughout this section. 
Basic Interruption 
The first problem with handling signals occurs when the handler relies on some sort of 
global program state, such as the assumption that global variables are initialized 
when in fact they aren't. Listing 13-1 presents a short example. 
Listing 13-1.  
char *user; 
int cleanup(int sig) 
{ 
    printf("caught signal! Cleaning up..\n"); 
    free(user); 
    exit(1); 
} 
int main(int argc, char **argv) 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
806 
{ 
    signal(SIGTERM, cleanup); 
    signal(SIGINT, cleanup); 
    ... do stuff ... 
    process_file(fd); 