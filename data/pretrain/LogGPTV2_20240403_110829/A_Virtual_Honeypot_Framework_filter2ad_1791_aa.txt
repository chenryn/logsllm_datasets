title:A Virtual Honeypot Framework
author:Niels Provos
USENIX Association
Proceedings of the
13th USENIX Security Symposium
San Diego, CA, USA
August 9–13, 2004
© 2004 by The USENIX Association
Phone: 1 510 528 8649
All Rights Reserved
FAX: 1 510 548 5738
Rights to individual papers remain with the author or the author's employer.
Email: PI:EMAIL
For more information about the USENIX Association:
WWW: http://www.usenix.org
 Permission is granted for noncommercial reproduction of the work for educational or research purposes.
This copyright notice must be included in the reproduced paper. USENIX acknowledges all trademarks herein.
A Virtual Honeypot Framework
Niels Provos∗
Google, Inc.
PI:EMAIL
Abstract
A honeypot is a closely monitored network decoy
serving several purposes: it can distract adversaries
from more valuable machines on a network, pro-
vide early warning about new attack and exploita-
tion trends, or allow in-depth examination of ad-
versaries during and after exploitation of a honey-
pot. Deploying a physical honeypot is often time in-
tensive and expensive as diﬀerent operating systems
require specialized hardware and every honeypot re-
quires its own physical system. This paper presents
Honeyd, a framework for virtual honeypots that sim-
ulates virtual computer systems at the network level.
The simulated computer systems appear to run on
unallocated network addresses. To deceive network
ﬁngerprinting tools, Honeyd simulates the network-
ing stack of diﬀerent operating systems and can pro-
vide arbitrary routing topologies and services for an
arbitrary number of virtual systems. This paper dis-
cusses Honeyd’s design and shows how the Honeyd
framework helps in many areas of system security,
e.g. detecting and disabling worms, distracting ad-
versaries, or preventing the spread of spam email.
1 Introduction
Internet security is increasing in importance as
more and more business is conducted there. Yet,
despite decades of research and experience, we are
still unable to make secure computer systems or even
measure their security.
As a result, exploitation of newly discovered vul-
nerabilities often catches us by surprise. Exploit au-
tomation and massive global scanning for vulnerabil-
ities enable adversaries to compromise computer sys-
tems shortly after vulnerabilities become known [25].
∗This research was conducted by the author while at the
Center for Information Technology Integration of the Univer-
sity of Michigan.
One way to get early warnings of new vulnerabil-
ities is to install and monitor computer systems on
a network that we expect to be broken into. Every
attempt to contact these systems via the network is
suspect. We call such a system a honeypot. If a hon-
eypot is compromised, we study the vulnerability
that was used to compromise it. A honeypot may
run any operating system and any number of ser-
vices. The conﬁgured services determine the vectors
an adversary may choose to compromise the system.
A physical honeypot is a real machine with its
own IP address. A virtual honeypot is a simulated
machine with modeled behaviors, one of which is the
ability to respond to network traﬃc. Multiple vir-
tual honeypots can be simulated on a single system.
Virtual honeypots are attractive because they re-
quirer fewer computer systems, which reduces main-
tenance costs. Using virtual honeypots, it is possible
to populate a network with hosts running numerous
operating systems. To convince adversaries that a
virtual honeypot is running a given operating sys-
tem, we need to simulate the TCP/IP stack of the
target operating system carefully, in order to deceive
TCP/IP stack ﬁngerprinting tools like Xprobe [1] or
Nmap [9].
This paper describes the design and implemen-
tation of Honeyd, a framework for virtual honey-
pots that simulates computer systems at the network
level. Honeyd supports the IP protocol suites [26]
and responds to network requests for its virtual hon-
eypots according to the services that are conﬁgured
for each virtual honeypot. When sending a response
packet, Honeyd’s personality engine makes it match
the network behavior of the conﬁgured operating
system personality.
To simulate real networks, Honeyd creates virtual
networks that consist of arbitrary routing topologies
with conﬁgurable link characteristics such as latency
and packet loss. When networking mapping tools
like traceroute are used to probe the virtual network,
they discover only the topologies simulated by Hon-
eyd.
Our performance evaluation of Honeyd shows
that a 1.1 GHz Pentium III can support 30 MBit/s
aggregate bandwidth and that it can sustain over
two thousand TCP transactions per second. The
experimental evaluation of Honeyd veriﬁes that ﬁn-
gerprinting tools are deceived by the simulated sys-
tems and shows that our virtual network topologies
seem realistic to network mapping tools.
To demonstrate the power of the Honeyd frame-
work, we show how it can be used in many areas
of system security. For example, Honeyd can help
with detecting and disabling worms, distracting ad-
versaries, or preventing the spread of spam email.
The rest of this paper is organized as follows. Sec-
tion 2 presents background information on honey-
pots. In Section 3, we discuss the design and imple-
mentation of Honeyd. Section 4 presents an evalua-
tion of the Honeyd framework in which we analyze
the performance of Honeyd and verify that ﬁnger-
printing and network mapping tools are deceived to
report the speciﬁed system conﬁgurations. We de-
scribe how Honeyd can help to improve system se-
curity in Section 5 and present related work in Sec-
tion 6. We summarize and conclude in Section 7.
2 Honeypots
This section presents background information on
honeypots and our terminology. We provide moti-
vation for their use by comparing honeypots to net-
work intrusion detection systems (NIDS) [19]. The
amount of useful information provided by NIDS is
decreasing in the face of ever more sophisticated eva-
sion techniques [21, 28] and an increasing number of
protocols that employ encryption to protect network
traﬃc from eavesdroppers. NIDS also suﬀer from
high false positive rates that decrease their useful-
ness even further. Honeypots can help with some of
these problems.
A honeypot is a closely monitored computing re-
source that we intend to be probed, attacked, or
compromised. The value of a honeypot is deter-
mined by the information that we can obtain from it.
Monitoring the data that enters and leaves a honey-
pot lets us gather information that is not available
to NIDS. For example, we can log the key strokes
of an interactive session even if encryption is used
to protect the network traﬃc. To detect malicious
behavior, NIDS require signatures of known attacks
and often fail to detect compromises that were un-
known at the time it was deployed. On the other
hand, honeypots can detect vulnerabilities that are
not yet understood. For example, we can detect
compromise by observing network traﬃc leaving the
honeypot even if the means of the exploit has never
been seen before.
Because a honeypot has no production value, any
attempt to contact it is suspicious. Consequently,
forensic analysis of data collected from honeypots is
less likely to lead to false positives than data col-
lected by NIDS.
Honeypots can run any operating system and any
number of services. The conﬁgured services deter-
mine the vectors available to an adversary for com-
promising or probing the system. A high-interaction
honeypot simulates all aspects of an operating sys-
tem. A low-interaction honeypots simulates only
some parts, for example the network stack [24]. A
high-interaction honeypot can be compromised com-
pletely, allowing an adversary to gain full access to
the system and use it to launch further network at-
tacks.
In contrast, low-interaction honeypots sim-
ulate only services that cannot be exploited to get
complete access to the honeypot. Low-interaction
honeypots are more limited, but they are useful to
gather information at a higher level, e.g., learn about
network probes or worm activity. They can also be
used to analyze spammers or for active countermea-
sures against worms; see Section 5.
We also diﬀerentiate between physical and virtual
honeypots. A physical honeypot is a real machine on
the network with its own IP address. A virtual hon-
eypot is simulated by another machine that responds
to network traﬃc sent to the virtual honeypot.
When gathering information about network at-
tacks or probes, the number of deployed honeypots
inﬂuences the amount and accuracy of the collected
data. A good example is measuring the activity
of HTTP based worms [23]. We can identify these
worms only after they complete a TCP handshake
and send their payload. However, most of their con-
nection requests will go unanswered because they
contact randomly chosen IP addresses. A honeypot
can capture the worm payload by conﬁguring it to
function as a web server. The more honeypots we
deploy the more likely one of them is contacted by
a worm.
Physical honeypots are often high-interaction, so
allowing the system to be compromised completely,
they are expensive to install and maintain. For large
address spaces, it is impractical or impossible to de-
ploy a physical honeypot for each IP address.
In
that case, we need to deploy virtual honeypots.
Figure 1 shows a conceptual overview of the
framework’s operation. A central machine intercepts
network traﬃc sent to the IP addresses of conﬁgured
honeypots and simulates their responses. Before we
describe Honeyd’s architecture, we explain how net-
work packets for virtual honeypots reach the Honeyd
host.
3.1 Receiving Network Data
Honeyd is designed to reply to network packets
whose destination IP address belongs to one of the
simulated honeypots. For Honeyd, to receive the
correct packets, the network needs to be conﬁgured
appropriately. There are several ways to do this,
e.g., we can create special routes for the virtual IP
addresses that point to the Honeyd host, or we can
use Proxy ARP [3], or we can use network tunnels.
Let A be the IP address of our router and B the
IP address of the Honeyd host. In the simplest case,
the IP addresses of virtual honeypots lie within our
local network. We denote them V1, . . . , Vn. When an
adversary sends a packet from the Internet to hon-
eypot Vi, router A receives and attempts to forward
the packet. The router queries its routing table to
ﬁnd the forwarding address for Vi. There are three
possible outcomes: the router drops the packet be-
cause there is no route to Vi, router A forwards the
packet to another router, or Vi lies in local network
range of the router and thus is directly reachable by
A.
To direct traﬃc for Vi to B, we can use the fol-
lowing two methods. The easiest way is to conﬁgure
routing entries for Vi with 1 ≤ i ≤ n that point to B.
In that case, the router forwards packets for our vir-
tual honeypots directly to the Honeyd host. On the
other hand, if no special route has been conﬁgured,
the router ARPs to determine the MAC address of
the virtual honeypot. As there is no corresponding
physical machine, the ARP requests go unanswered
and the router drops the packet after a few retries.
We conﬁgure the Honeyd host to reply to ARP re-
quests for Vi with its own MAC addresses. This
is called Proxy ARP and allows the router to send
packets for Vi to B’s MAC address.
In more complex environments, it is possible to
tunnel network address space to a Honeyd host. We
use the generic routing encapsulation (GRE) [11, 12]
tunneling protocol described in detail in Section 3.4.
Figure 1: Honeyd receives traﬃc for its virtual honey-
pots via a router or Proxy ARP. For each honeypot,
Honeyd can simulate the network stack behavior of a
diﬀerent operating system.
3 Design and Implementation
In this section, we present Honeyd, a lightweight
framework for creating virtual honeypots. The
framework allows us to instrument thousands of IP
addresses with virtual machines and corresponding
network services. We start by discussing our design
considerations, then describe Honeyd’s architecture
and implementation.
We limit adversaries to interacting with our hon-
eypots only at the network level. Instead of simulat-
ing every aspect of an operating system, we choose
to simulate only its network stack. The main draw-
back of this approach is that an adversary never
gains access to a complete system even if he compro-
mises a simulated service. On the other hand, we are
still able to capture connection and compromise at-
tempts. However, we can mitigate these drawbacks
by combining Honeyd with a virtual machine like
Vmware [27]. This is discussed in the related work
section. For that reason, Honeyd is a low-interaction
virtual honeypot that simulates TCP and UDP ser-
vices. It also understands and responds correctly to
ICMP messages.
Honeyd must be able to handle virtual honeypots
on multiple IP addresses simultaneously, in order to
populate the network with numerous virtual hon-
eypots simulating diﬀerent operating systems and
services. To increase the realism of our simulation,
the framework must be able to simulate arbitrary
network topologies. To simulate address spaces that
are topologically dispersed and for load sharing, the
framework also needs to support network tunneling.
connections to arbitrary services. Services are ex-
ternal applications that receive data on stdin and
send their output to stdout. The behavior of a ser-
vice depends entirely on the external application.
When a connection request is received, the frame-
work checks if the packet is part of an established
connection.
In that case, any new data is sent to
the already started service application. If the packet
contains a connection request, a new process is cre-
ated to run the appropriate service. Instead of cre-
ating a new process for each connection, the frame-
work supports subsystems and internal services. A
subsystem is an application that runs in the name
space of the virtual honeypot. The subsystem spe-
ciﬁc application is started when the corresponding
virtual honeypot is instantiated. A subsystem can
bind to ports, accept connections, and initiate net-