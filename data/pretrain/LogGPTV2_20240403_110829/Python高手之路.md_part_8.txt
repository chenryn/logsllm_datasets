---
## Page 58
熊猫爱中国www.xiongmaoi.com
应用程序中某个模块的特定函数。
是一个入口点，能够用来帮助 setuptols 安装一个很小的程序到系统目录中，并通过它调用
装。但使用这样的脚本有一些主要的问题。
行的 Python 脚本。这个程序需要被安装在某个包含在系统路径中的目录里。
4.7.2
有用，这些将在下面几节介绍。
入口点的 Python 库之上。入口点有许多不同的用处，如对控制台脚本和动态代码发现都很
setuptols 有一个功能可以帮助我们解决这些问题，即 console_scripts。console_scripts
·如何以可移植的方式进行安装并不明确（如是Unix还是Windows）。
●很难确定安装在哪里。
·安装的二进制代码不能被其他软件或单元测试导入。
●没办法知道Python解释器的位置和版本。
这实际上是一个理想情况下的场景：许多项目在系统路径中会有一个非常长的脚本安
mysoftware.Someclass(sys.argv).run()
#!/usr/bin/python
开发 Python 应用程序时，通常要提供一个可启动的程序，也就是最终用户实际可以运
这里所用的工具只是很薄的一层，它建立在更复杂的能够发现任何 Python 库或程序的
import mysoftware
import sys
+----
使用控制台脚本
Error
+------
1Field
Path
 Distribution I coverage 3.4
Member
Module
 1 /usr/lib/python2.7/dist-packages
1Value
main
I coverage
本电子书仅限学习交流使用，请勿用于商业用途
1
4.7扩展点
---
## Page 59
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
例子的目的来说，只需要在它们成功启动之后能输出消息即可。
模块一
52
当运行 python setup·py install时，setuptools 会创建示例4.7 所示的脚本。
使用格式 package.subpackage:function 可以定义自己的入口点。
setup(
From setuptools import setup
setup.py
接下来可以在根目录中添加下面的 setup·py 文件。
当然，这个程序做不了什么一—客户端和服务器端甚至不能彼此通信。但对于我们这个
def main():
foobar/server.py
def main():
foobar/client.py
—foobar.client 和 foobar.server。
第4章分发
print("server started")
print("Client started")
packages=["foobar"],
author_email="PI:EMAIL",
author="Julien Danjou",
description="Foo!",
version="1",
name="foobar"
"console scripts":[
"foobar = foobar.client:main",
"foobard = foobar.server:main",
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 60
熊猫爱中国www.xiongmaoi.com
熊猫
应该是一个返回 number_of_seconds 和 callable 的对象。
组中即可允许任何 Python 程序注册一个每隔几秒钟运行一次的命令。该入口点指向的属性
脚本所使用的是同一个包。）
序中发现和加载入口点文件。（你可能已经注意到，这与示例 4.7中 setuptools 创建的控制台
4.7.3
点列表。
单（因此也更快），因为它会调用写在入口点中的函数而无需在运行时动态扫描入口
如果在 setuptools之上使用pbr，那么生成的脚本会比通过 setuptools默认创建的要简
从而定位并运行相应的函数。
示例 4.7setuptools 生成的控制台脚本
提示
inport pkg_resources
在本节中，我们将创建一个cron 风格的守护进程，它通过注册一个入口点到 pytimed
pytimed.py
通过入口点可以很容易得发现和动态加载其他包部署的代码。可以使用
使用这一技术能够保证代码在Python包内，
From pkg_resources import load_entry_point
import sys
# EASY-INSTALL-ENTRY-SCRIPT: 'foobar==1','console_scripts','foobar'
requires
#!/usr/bin/python
使用插件和驱动程序
sys.exit(
load_entry_point('foobar==1',
='foobar==1'
本电子书仅限学习交流使用，请勿用于商业用途
并能够被其他应用程序导入(或测试)。
4.7扩展点
53
---
## Page 61
熊猫爱中国www.xiongmaoi.com
54
def print_hello():
hello.py
from setuptools import setup
setup.py
这是一个非常简单而朴素的实现，但对我们的例子来说足够了。现在可以写另一个
setup(
使用合适的入口点注册这个函数。
import time
return 2, print _hello
def say_hello():
print ("Hello, world!")
def main():
第4章分发
entry_points=f
packages=["hello"],
version="1",
name="hello",
 seconds_passed += 1
time.sleep(1)
while True:
 seconds_passed = 0
"pytimed":[
else:
 for entry_point in pkg_resources.iter_entry_points('pytimed'):
except:
try:
"hello=hello:say_hello",
if seconds_passed % seconds == 0: 
pass
# Ignore failure
callable()
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 62
熊猫爱中国www.xiongmaoi.com
做简化。
供了对动态插件的支持。在这个例子中我们的用例并不复杂，但是仍然可以用 stevedore 稍
扩展。在每一个程序中手动实现这一机制是非常繁琐的，不过幸运的是，已经有 Python 库
示例4.8
如示例4.8示例。
from stevedore.extension import ExtensionManager import time
pytimed_stevedore.py
stevedore（https://pypi.python.org/pypi/stevedore）基于我们在前面例子中展示的机制提
这一机制提供了巨大的可能性：它可以用来构建驱动系统、钩子系统以及简单而通用的
Hello,world!
python3
现在如果运行 pytimed脚本，将会看到在屏幕上每两秒钟打印一次“Hello,world!"”,
defmain():
Hello, world!
Hello, world!
>>> pytimed.main ()
>>>importpytimed
Type "help", "copyright", "credits" or "license" for more information.
[GCC 4.8.1]on 1inux
Python 3.3.2+(default,Aug 4 2013,15:50:24)
whileTrue:
seconds_passed = 0
运行 pytimed 
else:
except:
seconds,
try:
if seconds_passed % seconds == 0:
pass
#Ignore failure
callable= extension.obj
本电子书仅限学习交流使用，请勿用于商业用途
4.7扩展点
---
## Page 63
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
有很多用来处理不同场景的子类，例如基于名字或者函数运行结果加载特定的扩展。
我们的例子仍然非常简单，但是如果看了 stevedore 文档就会发现，ExtensionManager
第4章分发
 seconds_passed += 1
callable()
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 64
熊猫爱中国www.xiongmaoi.com
熊猫爱中这会发生在应用部署的时候，或者稍后运行的时候。而通过系统管理器升级已安装的
它们是后续安装其他 Python包所必需的。
作为它的参数传入即可。
后使用这个目录—而不是系统安装的那个目录—
Python库则很可能在毫无征兆的情况下导致你的应用程序无法运行。
失败，例如：
赖的问题，做起来实际上很麻烦。有许多原因会导致在你的操作系统上部署或运行应用程序
第5章一
可以通过对 activate 执行 source 命令来激活这个虚拟环境
运行后，virtualenv会创建lib/pythonx.Y目录并利用它安装 setuptools 和 pip,
工具virtualenv 可以自动为你处理这些目录。安装之后，只需在运行时将目标目录
这一问题的解决方案是针对每个应用程序使用独立的库目录，同时包含自己的依赖。然
$source myvenv/bin/activate
Installing Pip...............................done.
$ virtualenv myvenv
●系统中没有需要的库；
Installing Setuptools........................done.
Also creating executable in myvenv/bin/python
New python executable in myvenv/bin/python3
Using base prefix '/usr'
在处理Python 应用程序时，经常需要部署、使用和测试你的应用程序。但由于外部依
·系统中没有需要的库的正确版本；
®
虚拟环境
本电子书仅限学习交流使用，请勿用于商业用途
一加载所需的Python 模块。
---
## Page 65
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
脚本来自动安装虚拟环境，如示例5.1所示。
程序，而不会对当前系统产生任何影响。那么，接下来很自然就会想到要基于依赖的列表写
pip 命令，它可以将包安装在正确的位置而不会对现有系统做任何修改：
示例5.1自动化的虚拟环境创建
可用的任何模块。这没问题，但我们可能需要安装它们。要做到这一点，只需使用标准的
拟环境中的 python二进制文件也可以正常工作：
拟环境目录作为首选组件。
行被复制到虚拟环境中的 Python。可以通过读取 sys·path 环境变量来验证，它将会把虚
 $ myvenv/bin/python
到目前为止，尽管已经进入激活的虚拟环境中，但还不能访问系统中安装以及在系统中
deactivate
pip install -r requirements.txt
source myappvenv/bin/activate
virtualenv myappvenv
好了，我们能够在这个虚拟环境中安装所有需要的库，然后从虚拟环境运行我们的应用
Cleaning up...
s source myvenv/bin/activate
如果只想使用在虚拟环境中安装的Python一次的话，不用运行acivate。直接调用虚
Successfully installed six
Installing collected packages: six
就这么简单。
$ deactivate
可以通过调用 deactivate 命令随时停止并退出虚拟环境：
一旦这么做，shell 的提示符会加上虚拟环境的名字作为前缀。此时调用 python 会执
Downloading/unpacking six
(myvenv) $ pip install six
 Running setup.py install for six
Running setup.py egg_info for package six
Downloading six-1.4.1.tar.gz
第5章虚拟环境
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 66
熊猫爱中国www.xiongmaoi.com