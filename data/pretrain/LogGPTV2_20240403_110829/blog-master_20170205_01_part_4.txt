```    
3\. 使用btree_gin插件，可以对任意标量数据类型创建GIN索引，前面已有例子。           
4\. gin对多值类型（如数组、文本、全文检索）的支持就不多说了，那是GIN的发源地，支持非常棒。        
注意，目前gin还不支持sort，所以如果你有大数据量的ORDER BY limit 小数据输出需求，建议还是使用b-tree。          
```    
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from t4 where c2=1 order by c2 limit 1;    
                                                                 QUERY PLAN                                                                      
---------------------------------------------------------------------------------------------------------------------------------------------    
 Limit  (cost=81163.88..81163.90 rows=1 width=8) (actual time=754.234..754.235 rows=1 loops=1)    
   Output: c1, c2    
   Buffers: shared hit=1307    
   ->  Bitmap Heap Scan on public.t4  (cost=81163.88..250411.70 rows=9999985 width=8) (actual time=754.234..754.234 rows=1 loops=1)    
         Output: c1, c2    
         Recheck Cond: (t4.c2 = 1)    
         Heap Blocks: exact=1    
         Buffers: shared hit=1307    
         ->  Bitmap Index Scan on gin_t4_c2  (cost=0.00..78663.89 rows=9999985 width=0) (actual time=745.651..745.651 rows=10000000 loops=1)     
             // gin还不适合limit输出，但是可以通过修改内核来改进    
               Index Cond: (t4.c2 = 1)    
               Buffers: shared hit=1306    
 Planning time: 0.091 ms    
 Execution time: 754.261 ms    
(13 rows)    
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from t4 order by c2 limit 1;    
                                                               QUERY PLAN                                                                    
-----------------------------------------------------------------------------------------------------------------------------------------    
 Limit  (cost=0.43..0.46 rows=1 width=8) (actual time=0.031..0.031 rows=1 loops=1)    
   Output: c1, c2    
   Buffers: shared hit=1 read=3    
   ->  Index Scan using btree_t4_c2 on public.t4  (cost=0.43..221670.43 rows=10000000 width=8) (actual time=0.030..0.030 rows=1 loops=1)    
         Output: c1, c2    
         Buffers: shared hit=1 read=3    
 Planning time: 0.141 ms    
 Execution time: 0.048 ms    
(8 rows)    
postgres=# drop index btree_t4_c2;    
// 不限制c2任何条件的话，不能使用gin，order by也不能使用gin    
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from t4 order by c2 limit 1;    
                                                                    QUERY PLAN                                                                        
--------------------------------------------------------------------------------------------------------------------------------------------------    
 Limit  (cost=10000194247.77..10000194247.78 rows=1 width=8) (actual time=1719.522..1719.523 rows=1 loops=1)    
   Output: c1, c2    
   Buffers: shared hit=44248    
   ->  Sort  (cost=10000194247.77..10000219247.74 rows=9999985 width=8) (actual time=1719.520..1719.520 rows=1 loops=1)    
         Output: c1, c2    
         Sort Key: t4.c2    
         Sort Method: top-N heapsort  Memory: 25kB    
         Buffers: shared hit=44248    
         ->  Seq Scan on public.t4  (cost=10000000000.00..10000144247.85 rows=9999985 width=8) (actual time=0.009..754.991 rows=10000000 loops=1)    
               Output: c1, c2    
               Buffers: shared hit=44248    
 Planning time: 0.084 ms    
 Execution time: 1719.543 ms    
(13 rows)    
// 限制c2任何条件的话，可以使用gin，但是order by依旧不能使用gin    
postgres=# set enable_sort=off;    
SET    
Time: 0.112 ms    
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from t4 where c2>0 order by c2 limit 1;    
                                                                     QUERY PLAN                                                                         
----------------------------------------------------------------------------------------------------------------------------------------------------    
 Limit  (cost=10000301719.00..10000301719.00 rows=1 width=8) (actual time=2801.874..2801.875 rows=1 loops=1)    
   Output: c1, c2    
   Buffers: shared hit=45554    
   ->  Sort  (cost=10000301719.00..10000326719.00 rows=10000000 width=8) (actual time=2801.873..2801.873 rows=1 loops=1)    
         Output: c1, c2    
         Sort Key: t4.c2    
         Sort Method: top-N heapsort  Memory: 25kB    
         Buffers: shared hit=45554    
         ->  Bitmap Heap Scan on public.t4  (cost=82471.00..251719.00 rows=10000000 width=8) (actual time=817.773..1905.348 rows=10000000 loops=1)    
               Output: c1, c2    
               Recheck Cond: (t4.c2 > 0)    
               Heap Blocks: exact=44248    
               Buffers: shared hit=45554    
               ->  Bitmap Index Scan on gin_t4_c2  (cost=0.00..79971.00 rows=10000000 width=0) (actual time=809.234..809.234 rows=10000000 loops=1)    
                     Index Cond: (t4.c2 > 0)    
                     Buffers: shared hit=1306    
 Planning time: 0.103 ms    
 Execution time: 2801.909 ms    
(18 rows)    
```    
5\. btree_gin目前的查询输入必须和类型完全匹配，例如int4与int8不能匹配，timestamp与date不能匹配。而btree暂时没有这个问题。     
原因与btree_gin插件创建的operator class有关         
```  
Apparently you're using contrib/btree_gin, because in the core system  
that would just fail.  btree_gin lacks any support for cross-type  
operators, so it can't index "timestamp > date" comparisons.  
```  
contrib/btree_gin/btree_gin--1.0.sql    
```  
CREATE OPERATOR CLASS int4_ops  
DEFAULT FOR TYPE int4 USING gin  
AS  
    OPERATOR        1       =,  
    OPERATOR        5       >,  
    FUNCTION        1       btint4cmp(int4,int4),  
    FUNCTION        2       gin_extract_value_int4(int4, internal),  
    FUNCTION        3       gin_extract_query_int4(int4, internal, int2, internal, internal),  
    FUNCTION        4       gin_btree_consistent(internal, int2, anyelement, int4, internal, internal),  
    FUNCTION        5       gin_compare_prefix_int4(int4,int4,int2, internal),  
STORAGE         int4;  
postgres=# \df *.*cmp*  
                                                       List of functions  
   Schema   |           Name            | Result data type |                   Argument data types                    |  Type    
------------+---------------------------+------------------+----------------------------------------------------------+--------  
...  
 pg_catalog | btint24cmp                | integer          | smallint, integer                                        | normal  
 pg_catalog | btint28cmp                | integer          | smallint, bigint                                         | normal  
 pg_catalog | btint2cmp                 | integer          | smallint, smallint                                       | normal  
 pg_catalog | btint42cmp                | integer          | integer, smallint                                        | normal  
 pg_catalog | btint48cmp                | integer          | integer, bigint                                          | normal  
 pg_catalog | btint4cmp                 | integer          | integer, integer                                         | normal  
 pg_catalog | btint82cmp                | integer          | bigint, smallint                                         | normal  
 pg_catalog | btint84cmp                | integer          | bigint, integer                                          | normal  
 pg_catalog | btint8cmp                 | integer          | bigint, bigint                                           | normal  
...  
```  
例子    
```  
postgres=# create table t1(id int, info text, crt_time timestamp);  
CREATE TABLE  
postgres=# create table t2(id int8, info text, crt_time timestamp);  
CREATE TABLE  
postgres=# create table t3(id int8, info text, crt_time timestamp);  
CREATE TABLE  
postgres=# create index idx_t1_id on t1(id);  
CREATE INDEX  
postgres=# create index idx_t1_crt_time on t1(crt_time);  
CREATE INDEX  
postgres=# create index idx_t2_id on t2(id);  
CREATE INDEX  
postgres=# create index idx_t3 on t3 using gin (id,info,crt_time);  
CREATE INDEX  
```  
```  
postgres=# set enable_seqscan=off;  
SET  
btree索引，可以使用隐式类型转换，不需要显示转换  
int与int2,int8的隐式转换,  timestamp与date的隐式转换  
postgres=# explain select * from t1 where id=1::int8;  
                               QUERY PLAN                                 
------------------------------------------------------------------------  
 Bitmap Heap Scan on t1  (cost=1.50..7.01 rows=6 width=44)  
   Recheck Cond: (id = '1'::bigint)  
   ->  Bitmap Index Scan on idx_t1_id  (cost=0.00..1.50 rows=6 width=0)  
         Index Cond: (id = '1'::bigint)  
(4 rows)  
postgres=# explain select * from t1 where id=1::int2;  
                               QUERY PLAN                                 
------------------------------------------------------------------------  
 Bitmap Heap Scan on t1  (cost=1.50..7.01 rows=6 width=44)  
   Recheck Cond: (id = '1'::smallint)  
   ->  Bitmap Index Scan on idx_t1_id  (cost=0.00..1.50 rows=6 width=0)  
         Index Cond: (id = '1'::smallint)  
(4 rows)  
postgres=# explain select * from t1 where crt_time=now();  
                                  QUERY PLAN                                    
------------------------------------------------------------------------------  
 Bitmap Heap Scan on t1  (cost=1.50..7.03 rows=6 width=44)  
   Recheck Cond: (crt_time = now())  
   ->  Bitmap Index Scan on idx_t1_crt_time  (cost=0.00..1.50 rows=6 width=0)  
         Index Cond: (crt_time = now())  
(4 rows)  
postgres=# explain select * from t1 where crt_time=current_date;  
                                  QUERY PLAN                                    
------------------------------------------------------------------------------  
 Bitmap Heap Scan on t1  (cost=1.50..7.05 rows=6 width=44)  
   Recheck Cond: (crt_time = ('now'::cstring)::date)  
   ->  Bitmap Index Scan on idx_t1_crt_time  (cost=0.00..1.50 rows=6 width=0)  
         Index Cond: (crt_time = ('now'::cstring)::date)  
(4 rows)  
插件 btree_gin 索引，暂时不支持跨类型的COMPARE，必须显示      
postgres=# explain select * from t3 where crt_time=current_date;  
                              QUERY PLAN                                 
-----------------------------------------------------------------------  
 Seq Scan on t3  (cost=10000000000.00..10000000028.73 rows=5 width=48)  
   Filter: (crt_time = ('now'::cstring)::date)  
(2 rows)  
postgres=# explain select * from t3 where crt_time=current_date::timestamp;  
                                       QUERY PLAN                                         
----------------------------------------------------------------------------------------  
 Bitmap Heap Scan on t3  (cost=2.65..7.19 rows=5 width=48)  
   Recheck Cond: (crt_time = (('now'::cstring)::date)::timestamp without time zone)  
   ->  Bitmap Index Scan on idx_t3  (cost=0.00..2.65 rows=5 width=0)  
         Index Cond: (crt_time = (('now'::cstring)::date)::timestamp without time zone)  
(4 rows)  
postgres=# explain select * from t3 where crt_time=current_date::timestamptz;  
                                QUERY PLAN                                   
---------------------------------------------------------------------------  
 Seq Scan on t3  (cost=10000000000.00..10000000031.40 rows=5 width=48)  
   Filter: (crt_time = (('now'::cstring)::date)::timestamp with time zone)  
(2 rows)  
postgres=# explain select * from t3 where id=1;  
                              QUERY PLAN                                 
-----------------------------------------------------------------------  
 Seq Scan on t3  (cost=10000000000.00..10000000023.38 rows=5 width=48)  
   Filter: (id = 1)  
(2 rows)  
postgres=# explain select * from t3 where id=1::int8;  
                             QUERY PLAN                                
---------------------------------------------------------------------  
 Bitmap Heap Scan on t3  (cost=2.64..7.14 rows=5 width=48)  
   Recheck Cond: (id = '1'::bigint)  
   ->  Bitmap Index Scan on idx_t3  (cost=0.00..2.64 rows=5 width=0)  
         Index Cond: (id = '1'::bigint)  
(4 rows)  
JOIN也是如此  
btree 支持自动隐式转换  
postgres=# explain select * from t1,t2 where t1.id=t2.id ;  
                                     QUERY PLAN                                        
-------------------------------------------------------------------------------------  
 Merge Join  (cost=0.30..155.27 rows=6046 width=92)  
   Merge Cond: (t2.id = t1.id)  
   ->  Index Scan using idx_t2_id on t2  (cost=0.15..30.50 rows=1070 width=48)  
   ->  Materialize  (cost=0.15..34.23 rows=1130 width=44)  
         ->  Index Scan using idx_t1_id on t1  (cost=0.15..31.40 rows=1130 width=44)  
(5 rows)  
插件 btree_gin 暂时不支持跨类型join  
postgres=# explain select * from t1,t3 where t1.id=t3.id;  
                                      QUERY PLAN                                        
--------------------------------------------------------------------------------------  
 Merge Join  (cost=10000000074.69..10000000199.46 rows=6046 width=92)  
   Merge Cond: (t1.id = t3.id)  
   ->  Index Scan using idx_t1_id on t1  (cost=0.15..31.40 rows=1130 width=44)  
   ->  Sort  (cost=10000000074.54..10000000077.21 rows=1070 width=48)  
         Sort Key: t3.id  
         ->  Seq Scan on t3  (cost=10000000000.00..10000000020.70 rows=1070 width=48)  
(6 rows)  
postgres=# explain select * from t2,t3 where t2.id=t3.id;  
                                  QUERY PLAN                                     
-------------------------------------------------------------------------------  
 Nested Loop  (cost=0.21..1599.15 rows=5724 width=96)  
   ->  Index Scan using idx_t2_id on t2  (cost=0.15..30.50 rows=1070 width=48)  
   ->  Bitmap Heap Scan on t3  (cost=0.05..1.42 rows=5 width=48)  
         Recheck Cond: (id = t2.id)  
         ->  Bitmap Index Scan on idx_t3  (cost=0.00..0.05 rows=5 width=0)  
               Index Cond: (id = t2.id)  
(6 rows)  
postgres=# explain select * from t1,t3 where (t1.id)::int8=t3.id;  
                                   QUERY PLAN                                     
--------------------------------------------------------------------------------  
 Nested Loop  (cost=10000000000.06..10000001694.13 rows=6046 width=92)  
   ->  Seq Scan on t1  (cost=10000000000.00..10000000021.30 rows=1130 width=44)  