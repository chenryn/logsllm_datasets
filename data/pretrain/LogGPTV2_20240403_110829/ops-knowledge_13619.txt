User: How to use Ansible for server configuration management and provide a sample Ansible Playbook.
Assistant: Ansible is a very popular server configuration management tool that uses a simple YAML syntax to describe the tasks and configuration items that need to be performed. Here are some best practices for using Ansible for server configuration management: 1. Install Ansible: First, you need to install Ansible on the host running Ansible. You can install it using your operating system's package manager, or download the binary installation file from the official Ansible website. 2. Write the Inventory file: Ansible uses an Inventory file to define the hosts to be managed, including information such as the host name or IP address, SSH port, user name, and password. Inventory files can be written manually or managed using external tools. 3. Write Playbook: Ansible tasks and configuration items are organized in the form of Playbook, in which the tasks to be executed, hosts, variables, and execution order are defined. Playbook uses YAML format, which is highly readable and easy to write and maintain. The following is a sample Ansible Playbook, including 3 tasks: ``` - name: configure web server hosts: web-server become: yes vars: http_port: 80 app_path: "/var/www/sampleapp" tasks: - name: Install Apache server apt: name=apache2 state=present - name: Start Apache server service: name=apache2 state=started - name: Configure application directory file: path="{{app_path}}" state=directory owner=www- data group=www-data mode=0664 - name: configure database server hosts: db-server become: yes vars: db_user: "root" db_pass: "password" tasks: - name: install MySQL server apt: name=mysql-server state=present - name: change root password mysql_user: name=root password={{db_pass}} priv=*.*:ALL state=present - name: configure Nginx load balancer hosts: lb-server become: yes vars: lb_servers : - 10.0.0.10 - 10.0.0.11 - 10.0.0.12 tasks: - name: install Nginx server apt: name=nginx state=present - name: configure upstream template: src=nginx.conf dest=/etc/nginx/conf. d/upstream.conf notify: - restart nginx handlers: - name: restart Nginx server service: name=nginx state=restarted ``` The above Playbook defines 3 tasks: configure web server, configure database server and configure Nginx load balancer . Each task includes hosts, variables, and a task list. The task list contains the Ansible modules to be executed and their related parameters. After each task, you can also define handlers, which will be used as notification functions to be activated when one or more state changes of a specific task. Note: This example is an example and cannot be copied and used directly. Please modify the host, variables and task list according to the actual situation, and make sure to test it before executing it. In addition, Ansible has many other modules to choose from, and different modules and parameters can be used according to specific needs.