如果要编译上面的C文件，则需要安装Avro C。首先可以从网站http：//www.apache.org/dyn/closer.cgi/avro/选择镜像下载avro-c-1.6.3.tar.gz文件，使用命令tar-zxvf avro-c-1.6.3.tar.gz解压后进入其目录，并使用命令./configure和make、make install进行编译安装。注意，需要在root的权限下进行安装。安装成功后，在编译C语言前需要将libavro加入动态链接库中，使用命令：
export LD_LIBRARY_PATH=/usr/local/lib：$LD_LIBRARY_PATH
然后对程序进行编译：
gcc-o student-lavro student.c
运行生成的执行文件可得到如图16-5所示的结果。运行时在当前目录下生成student.db对象容器文件，可以使用命令cat查看文件中的内容—先存储学生的模式，然后存储学生的记录信息，具体内容可参见16.1.4节“对象容器文件”和图16-3。
图 16-5 运行结果
下面介绍Avro的C++应用程序接口。虽然Avro并不需要使用代码生成器，但是使用代码生成工具可以更简单地使用Avro C++库。代码生成器既可以读取模式并输出模式数据的C++对象，也可以产生代码来序列化或反序列化对象等所有复杂的译码工作。即使使用C++核心库来编写序列化器或者解析器，产生的代码也可以说明如何使用这些库。下面举一个使用模式的简单例子，此例用来表示一个虚数：
{
"type"："record"，
"name"："complex"，
"fields"：[
{"name"："real"，"type"："double"}，
{"name"："imaginary"，"type"："double"}
]
}
假设JSON可用来表示存储在名为imaginary文件中的模式，那么产生代码分成两步：
第一步：
precompile＜imaginary＞imaginary.flat
预编译会将模式转化为代码生成器所使用的中间格式，中间文件是模式的文本形式，它是通过对模式类型树深度优先遍历得到的。
第二步：
python scripts/gen-cppcode.py--input=example.flat--output=example.hh--namespace=Math
上面的命令告诉代码生成器去读取模式作为输入，并且在example.hh中生成C++头文件。可选参数将指定对象放置的命名空间，如果没有指定命名空间，仍可得到默认的命名空间。下面是所产生代码的开始部分：
namespace Math{
struct complex{
complex（）：
real（），
imaginary（）
{}
double real；
double imaginary；
}；
以上代码是用C++表示的模式，它创建记录、默认构造函数并为记录的每个字段建立成员。下面是序列化数据的例子：
void serializeMyData（）
{
Math：complex c；
c.real=10.0；
c.imaginary=20.0；
//writer是实际I/O和缓冲结果的对象
avro：Writer writer；
//在对象上调用writer
avro：serialize（writer, c）；
//这时，writer将序列化后的数据存储在缓冲区中
InputBuffer buffer=writer.buffer（）；
}
使用生成的代码，调用对象的avro：serialize（）函数可以序列化数据，通过调用avro：InputBuffer对象可以获取数据，通过网络可以发送文件。下面读取序列化的数据到对象中：
void parseMyData（const avro：InputBuffer＆myData）
{
Math：complex c；
//reader为实际I/O读取的对象
avro：Reader reader（myData）；
//在对象上调用reader
avro：parse（reader, c）；
//此时，C中存放的是反序列化后的数据
}
在下面的代码中avro：serialize（）函数和avro：parse（）函数可用于处理用户数据类型，具体实现如下：
template＜typename Serializer＞
inline void serialize（Serializer＆s, const complex＆val, const boost：true_type＆）
{
s.writeRecord（）；
serialize（s, val.real）；
serialize（s, val.imaginary）；
s.writeRecordEnd（）；
}
template＜typename Parser＞
inline void parse（Parser＆p, complex＆val, const boost：true_type＆）{
p.readRecord（）；
parse（p, val.real）；
parse（p, val.imaginary）；
p.readRecordEnd（）；
}
以下内容也可加入avro命名空间中：
template＜＞struct is_serializable＜Math：complex＞：public boost：true_type{}；
这样为复杂结构建立类型特征，告诉Avro对象的序列化和解析功能可用。
除了上面介绍的使用Avro C++代码生成器来读写对象外，Avro C++也可以读入JSON模式。库函数提供了一些工具来读取存储在JSON文件或字符串中的模式，如下所示：
void readSchema（）
{
//My schema is stored in a file called"example"
std：ifstream in（"example"）；
avro：ValidSchema mySchema；
avro：compileJsonSchema（in, mySchema）；
}
上面代码读取文件并将JSON模式解析成avro：ValidSchema类型的对象。如果模式是无效的，将无法建立有效模式（ValidSchema）对象并抛出异常，那么如何从JSON存储的模式中建立有效模式对象呢？
有效模式（ValidSchema）可以保证开发者实际写入的类型匹配模式所期望的类型。现在重写序列化函数并需要检查模式：
void serializeMyData（const ValidSchema＆mySchema）
{
Math：complex c；
c.real=10.0；
c.imaginary=20.0；
//ValidatingWriter保证序列化写入正确类型的数据
avro：ValidatingWriter writer（mySchema）；
try{
avro：serialize（writer, c）；
//这时，ostringstream"os"存储序列化后的数据
}
catch（avro：Exception＆e）{
std：cerr＜＜"ValidatingWriter encountered an error："＜＜e.what（）；
}
}
这段代码和前面的区别就是用ValidatingWriter代替了Writer object。如果序列化函数错误地写入不匹配模式的类型，那么ValidatingWriter将抛出异常。ValidatingWriter会在写入数据的时候增加很多处理过程。对于产生的代码则没有必要进行验证，因为自动生成的代码是匹配模式的。然而，在写入和测试自己序列化的代码时加上安全验证还是必要的。解析数据时也可以使用有效模式，它不仅可以确保解析器读取的类型匹配模式有效，还提供了接口，通过该接口可以查询下一个期望的类型和记录成员字段的名称。下面的例子介绍了如何使用API：
void parseMyData（const avro：InputBuffer＆myData, const avro：ValidSchema＆mySchema）
{
//手动解析数据，解析对象将数据绑定到模式上
avro：Parser＜ValidatingReader＞parser（mySchema, myData）；
assert（nextType（parser）==avro：AVRO_RECORD）；
//开始解析
parser.readRecord（）；
Math：complex c；
std：string recordName；
assert（currentRecordName（parser, recordName）==true）；
assert（recordName=="complex"）；
std：string fieldName；
for（int i=0；i＜2；++i）{
assert（nextType（parser）==avro：AVRO_DOUBLE）；
assert（nextFieldName（parser, fieldName）==true）；
if（fieldName=="real"）{
c.real=parser.readDouble（）；
}
else if（fieldName=="imaginary"）{
c.imaginary=parser.readDouble（）；
}
else{
std：cout＜＜"I did not expect that！\n"；
}
}
parser.readRecordEnd（）；
}
上面的代码表明，如果编译时不知道模式，也可以通过写出解析数据的代码在运行时读取模式，并且查询ValidatingReader来了解序列化数据的内容。
在自己的代码中使用对象来建立模式是允许的，每个原始类型和复合类型都有模式对象，并且它们拥有共同的Schema基类。下面是一个为复数记录数组建立模式的例子：
void createMySchema（）
{
//首先建立复数类型
avro：RecordSchema myRecord（"complex"）；
//在记录中加入字段（每个字段又是一个模式）
myRecord.addField（"real"，avro：DoubleSchema（））；
myRecord.addField（"imaginary"，avro：DoubleSchema（））；
//这个复数记录和之前使用的一样，下面为这些记录的数组建立模式
avro：ArraySchema complexArray（myRecord）；
//如果模式是无效的将抛出
avro：ValidSchema validComplexArray（complexArray）；
//这样建立好了模式
//输出到屏幕上
validComplexArray.toJson（std：cout）；
}
以上代码建立的模式可能是无效的，因此，为了使用模式，需要将它转化为ValidSchma对象。执行上述代码可以得到：