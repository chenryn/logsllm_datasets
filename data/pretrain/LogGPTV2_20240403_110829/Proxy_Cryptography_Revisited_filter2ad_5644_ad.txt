(U, F) can attack the scheme. For simplicity, the deﬁni-
tion presented in table 4 uses the CCA2 level of security.
For technical reasons, we assume that there exists an efﬁ-
cient algorithm that evaluates the relation R(cid:25)(e; e0) to true
or false, where e = BiEnc(m) is the original chiphertext
and e0 = (cid:5)(e) is the modiﬁed ciphertext computed by the
proxy P. The output of the algorithm is true, it must be the
case that DecEKU(e) = DecEKF(e0). Having such an algo-
rithm, we allow the proxy P has oracle access to BiDecF
because it can simulate oracle access to BiDecU by itself.
In addition, we restrict its access to the BiDecF by not let-
ting the proxy P to submit to the oracle a ciphertext e0 such
that R(cid:25)(e; e0) = true.
6.1 Bidirectional Generic Encryption Scheme
In this section, we present a generic implementation of
a bidirectional encryption scheme based on standard en-
cryption schemes. Let’s assume that we have an encryp-
tion scheme E = (Enc-Gen; Enc; Dec). We transform
E into a bidirectional encryption scheme E 0 = (BiGen,
BiEnc, BiDec, (cid:5)) by following the next steps. For every
user U, the generation algorithm BiGen executes the orig-
inal generation algorithm Enc-Gen to generate three pairs
of keys (k1; k2; k3), where each ki = (EKi; DKi). The
users U, P, and F receive each two pairs of keys such that
any two entities have only one pair of keys in common.
For example, the keys of user U are EKU = (EK1; EK2),
DKU = (DK1; DK2), the keys of proxy P are EKP =
(EK2; EK3), DKP = (DK2; DK3), and the keys of user F
are EKF = (EK1; EK3), DKF = (DK1; DK3). In the con-
text of bidirectional encryption, we say that both users U
and F have private keys, while the proxy P has the bidirec-
tional key (cid:25). The encryption algorithm BiEnc performs
double encryption e = BiEncU(m) = Enc1(Enc2(m)).
Similarly, the decryption algorithm (cid:5) is deﬁned as double
decryption m = BiDecU(e) = Dec2(Dec1(e)). The proxy
function (cid:5) transforms the ciphertext encrypted with the
user U’s key into ciphertext encrypted with the user F’s key.
The ﬁrst step is to decrypt the ciphertext e = BiEncU(m) =
Enc1(Enc2(m)) by executing e0 = Dec1(e). Then, it en-
crypts e0 with the other half of the key e00 = Enc3(e0). The
result is e00 = BiEncF(m).
The generic bidirectional encryption scheme described
above is secure if no adversary (proxy P, user F, userU)
is able to break it. Let’s assume that the initial encryption
scheme is CCA2 secure. We will show that in this case, the
bidirectional encryption is also CCA2 secure. The proofs
are in Appendix C.1.
Theorem 7 Let’s consider a standard encryption scheme
E = (Enc-Gen; Enc; Dec). Based on E, we build an uni-
directional encryption scheme E 0 = (UniGen, UniEnc,
If E is CCA2 secure, than E 0 is
UniDec, PDec, FDec).
also CCA2 secure against (1) the proxy P, (2) the user F,
and (3) any user U.
6.2 Bidirectional El Gamal Encryption Scheme
Let’s assume we have the El Gamal encryption scheme
E = (Enc-Gen; Enc; Dec). The key generation algorithm
of the original El Gamal encryption scheme outputs the
public key EK = (g; p; q; y) and the secret key DK = x,
and the public key is y = gx mod p. The encryption al-
gorithm is deﬁned as e = EncEK(m) = (gr mod p; mgxr
mod p), where r is chosen at random from Zq. The decryp-
tion algorithm computes the message m from e by dividing
mgxr to (gr)x mod p.
Based on E, we will build the bidirectional El Gamal
encryption scheme E 0 = (BiGen, BiEnc, BiDec, (cid:5)) by fol-
lowing the next steps. The generation algorithm BiGen
generates the keys for all users U and F by executing
Enc-Gen twice. Let’s assume that the generated keys
are (DKU = x1; EKU = gx1), (DKF = x2; EKF =
gx2). After this, it computes one proxy key (cid:25) for ev-
ery user U: (cid:25) = x2 (cid:0) x1. The encryption algorithm
Deﬁnition 6 Let E = (BiGen, BiEnc, BiDec, (cid:5)) be a bidirectional encryption scheme.
1. E is CCA2 secure against the proxy P if jSuccP;E (1k) (cid:0) 1=2j is negligible, SuccP;E is deﬁned as below, and
BiEnc(mb) is never submitted to the decryption oracle BiDec.
SuccP;E
i
2. E is CCA2 secure against the user F if jSuccF;E (1k) (cid:0) 1=2j is negligible, SuccF;E is deﬁned as below, and
b   f0; 1g; ~b   PBiDec(EKU; EKF; (cid:25); BiEnc(mb))
def= Pr h b = ~b (cid:12)(cid:12)(cid:12)
(EKU; DKU; EKF; DKF; (cid:25))   BiGen(1k); (m0; m1)   PBiDec(EKU; EKF; (cid:25));
BiEnc(mb) was never submitted to the P oracle.
SuccF;E
i
3. E is CCA2 secure against any user U if jSuccU;E (1k) (cid:0) 1=2j is negligible, for any PPT adversary A, we deﬁne
b   f0; 1g; ~b   F(cid:5)(EKU; EKF; DKF; BiEnc(mb))
def= Pr h b = ~b (cid:12)(cid:12)(cid:12)
(EKU; DKU; EKF; DKF; (cid:25))   BiGen(1k); (m0; m1)   F(cid:5)(EKU; EKF; DKF);
SuccU;E as below, and BiEnc(mb) was never submitted to the decryption oracle BiDec.
SuccA;E
def= Pr h b = ~b (cid:12)(cid:12)(cid:12)
(EKU; DKU; EKF; DKF; (cid:25))   BiGen(1k); (m0; m1)   ABiDec(EKU; EKF);
b   f0; 1g; ~b   ABiDec(EKU; EKF; BiEnc(mb))
i
Table 4. Bidirectional encryption deﬁnitions.
BiEnc encrypts messages m 2 M by executing Enc:
e = BiEnc(m) = Enc(m). The decryption algorithm
BiDec uses Dec to decrypt the ciphertext e: BiDec(e) =
Dec(e). The proxy function (cid:5) transforms messages en-
crypted with the secret key of the user U (DKU) into mes-
sage encrypted with the secret key of the user F (DKF).
We deﬁne (cid:5) to be (cid:5)(BiEncx1(m); (cid:25)) = (gr; grxm(gr)(cid:25)).
The function is correct because (cid:5)(BiEncx1 (m); (cid:25)) =
(gr; grxmgr(x2(cid:0)x1)) = (gr; grx2m) = BiEncx2(m).
The proxy function described above is secure if neither
the proxy P nor the user F can distinguish between encryp-
tions of two messages even if provided with the proxy key.
In addition, it should retain the same level of security as the
original El Gamal scheme against all other users U. The
proofs are described in Appendix C.2.
Theorem 8 Let E = (BiGen, BiEnc, BiDec, (cid:5)) be an bidi-
rectional El Gamal encryption scheme. E is CPA secure
against (1) the proxy P, (2) the user F, and (3) any user U.
7 Bidirectional Signature Primitives
Deﬁnition 7 A bidirectional signature scheme consists of
four algorithms: S = (BiGen, BiSig, BiVer, (cid:5)).
The key generation algorithm BiGen(1k), where k is
the security parameter, generates keys for all users, includ-
ing the user F. For example, the user U gets the keys
(SKU; VKU) and the user F gets (SKF; VKF). The gener-
ation algorithm is also computing one bidirectional key (cid:25)
for every user and gives it to proxy P. The signature al-
gorithm BiSig signs a message m 2 M (e.g. f1; 0gk),
s = BiSigSK(m) using a secret key SK. The signature
is formed by the tuple (m; s). The signature (m; s) is
veriﬁed by the veriﬁcation algorithm BiVer. The veriﬁca-
tion algorithm outputs succeed if the signature is correct
and fail otherwise. The correctness property requires that
BiVer(BiSig(m)) = succeed. The proxy function (cid:5) uses
the bidirectional key (cid:25) to transform a signature generated
with a secret key into a signature generated with another
secret key.
A bidirectional encryption scheme deﬁned as above is
considered to be safe if it can not be successfully attacked
by any user (U, F) or by the third party (P). The formal
deﬁnitions are presented in table 5. We assume that partial
signature contains the message.
Next, we present a few bidirectional signature schemes
that respect the above deﬁnition of security.
Deﬁnition 8 Let S = (BiGen, BiSig, BiVer, (cid:5)) be an bidirectional signature scheme.
1. S is UF against the proxy P if jSuccP;S (1k)j is negligible, where SuccP;Sj is deﬁned as below and P is not
allowed to ask the signature oracle for BiSig(m).
SuccP;S
def= Pr h BiVer(m; s) = succeed(cid:12)(cid:12)(cid:12)
(SKU; VKU; SKF; VKF; (cid:25))   BiGen(1k)
(m; s)   PBiSigF(VKU; VKF; (cid:25))
i
2. S is UF against the user F if jSuccF;S(1k)j is negligible, SuccF;Sj is deﬁned as below and F is not allowed to
ask P for (cid:5)(m).
SuccF;S
def= Pr h BiVer(m; s) = succeed(cid:12)(cid:12)(cid:12)
(SKU; VKU; SKF; VKF; (cid:25))   BiGen(1k)
(m; s)   F(cid:5)(VKU; VKF; SKF)
i
3. S is UF against any user U for any PPT adversary U, if jSuccU;S(1k)j is negligible, where SuccU;S is deﬁned
as below, and U is not allowed to ask the signature oracle for BiSig(m).
SuccA;S
def
= Pr h BiVer(m; s) = succeed(cid:12)(cid:12)(cid:12)
(SKU; VKU; SKF; VKF; (cid:25))   BiGen(1k)
(m; s)   ABiSigU (VKU; VKF)
i
Table 5. Bidirectional signature deﬁnitions.
7.1 Bidirectional Generic Signature Scheme
First, let’s consider a standard signature scheme S =
(Sig-Gen; Sig; Ver). The next paragraph explains how
to build an bidirectional generic signature scheme S 0 =
(BiGen, BiSig, BiVer, (cid:5)) from the original scheme S.
The key generation algorithm BiGen uses the original
key generation algorithm Sig-Gen to generate three keys
(k1; k2; k3), where ki = (SKi; VKi), and gives them to
the users U, F, and P, such that they have in common
only one key. For example, the user U gets VKU =
(VK1; VK2), SKU = (SK1; SK2), the user F gets VKF =
(VK1; VK3), SKF = (SK1; SK3), and the proxy P gets
VKP = (VK2; VK3), SKU = (SK2; SK3). The signature al-
gorithm BiSig computes the signature of a message m 2 M
by applying the standard signature algorithm twice, once
for each key. For example, the user U signs a message m as
(s1; s2) = Sig1(m)Sig2(m). BiVer veriﬁes if a signature
generated with BiSig is correct, by executing the standard
veriﬁcation algorithm twice Ver1(s1) and Ver2(s2). The
proxy function (cid:5) transforms a valid signature generated by
BiSig for a pair of keys into a valid signature generated with
another pair of keys: (cid:5)(BiSigU(m)) = BiSigF(m).
The generic bidirectional signature scheme is secure if
the next theorem is true. The proofs are in Appendix D.1.
Theorem 9 Let’s consider a standard signature scheme
S = (Sig-Gen; Sig; Ver). Based on S, we build an bidi-
rectional signature scheme S 0 = (BiGen, BiSig, BiVer, (cid:5)).
If S is UF than S 0 is UF against (1) the proxy P, (2) the
user F, and (3) all users U.
8 Unidirectional and Bidirectional Private
Key Primitives
Unidirectional and bidirectional private key schemes
for encrypting and signing messages (MAC) can be eas-
ily build on top of pseudo-random functions (PRF).Thus,
it sufﬁces to build unidirectional and bidirectional PRF
functions. The encryption can be deﬁned as Enc(m) =
hr; f (r) (cid:8) mi, where r is chosen at random, and f is a
PRF. The signature is deﬁned as Sig(m) = f (m), which in
fact is message authetication code (MAC).
8.1 Unidirectional PRF Functions
Informally, a unidirectional PRF function allows two
users P and F to compute its value in any given point x,
even if none of them knows the entire description of the
function.
Deﬁnition 9 A PRF function f is a unidirectional PRF
function if there exist f1 and f2 two PRF functions such
that the value f (x) can be computed as f1(f2(x)).
Based on the above deﬁnition, we construct the follow-
ing unidirectional PRF. Let’s consider F = fs a family of
pseudo random function with seed s. We deﬁne UniPRF
such that the value of the unidirectional PRF in a given
point x is deﬁned as UniPRF(x) = gs1 (x) (cid:8) gs2 (x), where
g 2 F . The proxy P and the user F are both given one
of the two seeds. For example, the proxy P receives s1 and
the user F gets s2. In this way, they can cooperate and com-
pute UniPRF(x) by ﬁrst computing gs1(x) and gs2(x) and
applying the XOR operation.
Theorem 10 The unidirectional PRF function deﬁned as
UniPRF(x) = f1(x) (cid:8) f2(x), where f1 and f2 are two
PRF functions, is a PRF function.
8.2 Bidirectional PRF Functions
In a similar way, we can informally deﬁne a bidirec-
tional PRF function as a PRF function that can be trans-
formed into a new PRF function. This means that one can
compute the value f2(x), given an initial value f1(x) and a
simple transformation (cid:5).
Deﬁnition 10 A PRF function f1 is a bidirectional PRF
function if for any PRF function f2, there exists a trans-
formation (cid:5) such that the value f2(x) can be computed as
(cid:5)(f1(x)).
Let’s consider F = fs a family of PRF functions
with seed s. We construct a PRF function BiPRF1(x) =
gs1(x) (cid:8) gs2(x), where g 2 F is a PRF function.
The function BiPRF is bidirectional because from any
value BiPRF1(x), one can easily obtain the value of
BiPRF2(x) = gs1 (x)(cid:8)gs3 (x) by computing BiPRF1(x)(cid:8)
(gs2 (x) (cid:8) gs3(x)). The transformation function is deﬁned