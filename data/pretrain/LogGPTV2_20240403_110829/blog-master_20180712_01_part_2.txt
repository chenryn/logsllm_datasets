```  
2、如果c1,c2是等值查询的话，可以用以下索引，那么效率是最高的。  
```  
postgres=# create index idx_tbl_3 on tbl(c1,c2,id);  
CREATE INDEX  
postgres=# explain ( analyze,verbose,timing,costs,buffers) select * from tbl where c1=200 and c2 =200 order by id limit 10;  
                                                              QUERY PLAN                                                                 
---------------------------------------------------------------------------------------------------------------------------------------  
 Limit  (cost=0.56..6.93 rows=10 width=20) (actual time=0.102..0.106 rows=10 loops=1)  
   Output: id, c1, c2, c3, c4  
   Buffers: shared hit=1 read=4  
   I/O Timings: read=0.047  
   ->  Index Scan using idx_tbl_3 on public.tbl  (cost=0.56..64086.79 rows=100533 width=20) (actual time=0.101..0.103 rows=10 loops=1)  
         Output: id, c1, c2, c3, c4  
         Index Cond: ((tbl.c1 = 200) AND (tbl.c2 = 200))  
         Buffers: shared hit=1 read=4  
         I/O Timings: read=0.047  
 Planning time: 0.142 ms  
 Execution time: 0.131 ms  
(11 rows)  
```  
3、建议方法:  
注意方法2 不适合非等值查询，  
```  
postgres=# explain ( analyze,verbose,timing,costs,buffers) select * from tbl where c1=200 and c2 between 100 and 300 order by id limit 10;  
                                                                  QUERY PLAN                                                                    
----------------------------------------------------------------------------------------------------------------------------------------------  
 Limit  (cost=0.43..35.32 rows=10 width=20) (actual time=1371.094..1371.099 rows=10 loops=1)  
   Output: id, c1, c2, c3, c4  
   Buffers: shared hit=91020  
   ->  Index Scan using idx_tbl_1 on public.tbl  (cost=0.43..350743.84 rows=100533 width=20) (actual time=1371.092..1371.095 rows=10 loops=1)  
         Output: id, c1, c2, c3, c4  
         Filter: ((tbl.c2 >= 100) AND (tbl.c2   Index Scan using idx_tbl_4 on public.tbl  (cost=0.43..100877.50 rows=100533 width=20) (actual time=0.104..0.107 rows=10 loops=1)  
         Output: id, c1, c2, c3, c4  
         Index Cond: (tbl.c1 = 200)  
         Filter: ((tbl.c2 >= 100) AND (tbl.c2  create table tbl(id int, c1 int, c2 int, c3 int, c4 int);
Table created.
SQL> insert into tbl select rownum,trunc(dbms_random.value(0, 100)),trunc(dbms_random.value(0, 100)),trunc(dbms_random.value(0, 100)),trunc(dbms_random.value(0, 100)) from dual connect by level  commit;
Commit complete.
SQL> insert into tbl select rownum+10000000, 200,200,200,200 from dual connect by level  commit;
Commit complete.
SQL> create index idx_tbl_1 on tbl(id);
Index created.
SQL> create index idx_tbl_2 on tbl(c1,c2,c3,c4);
Index created.
SQL> set linesize 512
SQL> set pagesize 50000
SQL> set autotrace on;
SQL> exec DBMS_STATS.GATHER_TABLE_STATS('JIUDU','TBL'); 
PL/SQL procedure successfully completed.
SQL> select * from (select * from tbl where c1=200 and c2=200 order by id) t where rownum select * from (select * from tbl where c1=1 and c2=1 order by id) t where rownum create index idx_tbl_3 on tbl(c1,c2,id);
Index created.
SQL> select * from (select * from tbl where c1=200 and c2 between 100 and 300 order by id) t where rownum =100 AND "C2"<=300)
Statistics
----------------------------------------------------------
          1  recursive calls
          0  db block gets
      34868  consistent gets
          0  physical reads