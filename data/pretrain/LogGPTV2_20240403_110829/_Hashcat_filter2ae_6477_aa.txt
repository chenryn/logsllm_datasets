# 【技术分享】使用Hashcat破解汉语、韩语、以及俄语等非英语密码
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
作者：[WisFree](http://bobao.360.cn/member/contribute?uid=2606963099)
稿费：500RMB（不服你也来投稿啊！）
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**写在前面的话**
近期闲来无事，在网上看安全新闻的时候突然看到了密码破解神器Hashcat发布了v3.10版本。于是我便点进去看看Hashcat又添加了什么新的功能，让我惊讶的是，Hashcat现在已经支持Mac
OS X平台了。一翻更新日志才发现，原来Hashcat在v3.0.0版本时就已经新增了对OS
X平台的支持，而我自从苦逼地凑钱买了一台rmbp之后，就基本上没有再碰过Hashcat了。
**  
**
**直奔主题**
现在很多网站都会将用户密码的md5值直接存储在数据库中，而目前几乎所有的字典文件都是基于拉丁字符生成的，例如A-Z、a-z、0-9、以及各种特殊字符等等。而根据调查发现，有很多的用户已经开始使用各种非英语字符的密码了。这也就意味着，此前很多基于字典规则的攻击方式已经不再适用了。
在这篇文章中，我将给大家演示如何使用Hashcat来破解非英文字符的密码。由于时间有限，我在这里只能给大家演示如何爆破一些常见的非拉丁字符密码，但是我相信整个流程还是可以给大家提供一个可行的思路。本人水平有限，如果有写的不对的地方，欢迎各位大牛指正，希望可以跟大家共同进步！那么话不多说，我们赶紧进入正题。
**  
**
**让Hashcat在Mac上跑起来**
假设你的电脑已经安装好git了，那么现在请你打开你的terminal，切换到你想要放置Hashcat项目文件的目录（我直接克隆到了用户根目录下），然后输入下列代码：
    git clone https://github.com/hashcat/hashcat.git
此时你的终端界面应该是这样的：
别忘了，想要让Hashcat在Mac上成功跑起来，我们还要安装最新版的OpenCL环境。先在Hashcat目录下创建一个名为“env”的目录（environment），然后继续用git命令将OpenCL克隆到“env”目录下：
    mkdir -p hashcat/env
    git clone https://github.com/KhronosGroup/OpenCL-Headers.git hashcat/env/OpenCL
命令运行结果如下图所示：
这一系列操作没问题的话，此时你应该可以在磁盘目录下看到Hashcat的项目文件了。别着急，我们还要build一下源码。切换到“hashcat”目录下，然后输入下列命令：
    sudo make
请注意，如果你此前没有运行过Xcode的话，系统会提示你要同意Xcode的许可证，同意之后系统会自动Makefile。Build成功后的界面如下图所示：
此时，切换到Hashcat目录下，输入命令
    ./hashcat --help
如果安装成功，终端将会显示Hashcat的帮助信息：
现在，我们已经成功地让Hashcat在Mac OS X上运行起来了。
**  
**
**关于字符的那些事儿**
如果你生活在以英语为主要语言的国家中，那么你肯定会非常熟悉ASCII码了，因为这是一套基于拉丁字母的编码系统。ASCII码使用一个字节编码来表示拉丁字符，即0000
0000-1111
1111，ASCII码用这总共256种组合方式来表示所有的拉丁字符。而在此之后，一种新的字符编码方式诞生了，它就是UTF-8。透露一下，我们今天的密码破解也是基于UTF-8编码来实现的。
目前，绝大多数的Web应用和网页都会采用UTF-8来进行字符编码。UTF-8字符编码可以使用1-4个字节来编码，即0000 0000-0000 0000
0000 0000 0000 0000 0000
0000，其中也包含了ASCII码的单字节区间，因此我们在Hashcat中进行密码爆破的时候，应当考虑到这一因素。
关于字符编码的问题我在这里就不多说了，反正你总有一天会被编码问题弄疯掉的…我们现在只关心在这篇文章中会接触到的汉语、韩语、以及俄语的常用字符编码。
**  
**
**打好基础，稳步前进**
首先，我们以俄文（西里尔）字母来进行讲解。为什么呢？难道我们不应该以中文开始吗？别着急，咱们慢慢来。请各位先看下面这张UTF-8编码表：
请注意第三列，西里尔（cyrillic）字母的大写字母“A”可以用十六进制的“d0
90”来表示，这也就说明西里尔字母的“A”可以用两个字节的十六进制码来表示，写成二进制的形式即为“1101 0000 1001
0000”。此时你就会发现，在ASCII码中的“A”为“41”（0100 0001），而UTF-8编码下的西里尔字母“A”为“d0 90”（ 1101
0000 1001
0000）。仔细观察之后你应该会发现，西里尔字母“A”的十六进制编码由两部分组成，前半部分为“d0”，即我们所谓的基础码；后半部分为“90”，即字符码。
我们可以从这张西里尔字母的UTF-8编码表［[传送门](http://www.utf8-chartable.de/unicode-utf8-table.pl?start=1024&number=512)］中看到，西里尔字母的基础码范围在d0-d4之间，即d0、d1、d2、d3、d4，而可能的字符码范围在80-bf之间。请注意！这一点非常的重要，因为它将成为我们通过UTF-8编码来破解其他语言密码的基石。
**  
**
**Hashcat能为我们做什么？**
Hashcat提供了一个参数“–hex-charset”,这个参数可以允许用户将待破解的数据以十六进制数值的形式输入给Hashcat。这是一个非常有用的参数，当你在命令中使用了这个参数之后，Hashcat会将你自定义的字符集合当作十六进制数值来处理，而不会将你的输入数据当作普通的英语字符。