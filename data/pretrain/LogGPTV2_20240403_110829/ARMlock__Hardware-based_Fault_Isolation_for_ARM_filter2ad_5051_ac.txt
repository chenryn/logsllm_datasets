Figure 3: ARMlock external function dispatch
vides an eﬀective location to control the exported functions. For
example, the host application can create a list of functions callable
by a sandbox, and check that only these functions are called by the
sandbox at the entry gate. On the other hand, there is no need to
perform access control at the return gate because the return address
is always saved on the caller domain’s own stack and thus cannot
be changed by other domains.
Signal/Exception Handling
3.1.1
Untrusted modules in ARMlock may cause exceptions such as
the divided-by-zero fault and the illegal-instruction fault. Unlike
many SFI systems, ARMlock allows exceptions (or synchronous
signals) to be delivered to the sandbox. Each domain can assign its
own set of signal handlers. When ARMlock changes domains, it
also switches the signal handlers. To this end, ARMlock maintains
a bitmap of interested signals for each domain. During domain
switch, ARMlock restores their handlers to those of the next do-
main. Considering the fact that a signal is a relatively rare event
for most applications, it could reduce the domain-switch latency
if signal handlers are lazily updated, say, right before the signal is
handled. However, this method is more intrusive and requires non-
trivial modiﬁcations to the main kernel, an approach avoided by
ARMlock in favor of easier deployment. In ARMlock, only syn-
chronous signals can be delivered to the sandbox. Asynchronous
signals are handled by the host itself. Nevertheless, an asynchronous
signal might happen when the CPU is executing in the sandbox. To
address that, ARMlock registers a signal handler for those events
on behalf of the sandbox. The handler simply forwards the signal
to the host by calling the host’s handler.
The way a signal is handled in ARMlock is also worth mention-
ing. To deliver the signal to a thread, the kernel allocates a sig-
nal frame (struct sigframe) on the thread’s user stack. Signal
frame consists of the user registers (struct pt_regs, used to re-
sume the thread upon signal return) and a piece of the executable
retcode. Retcode is responsible for cleaning up the signal frame
and resuming the interrupted thread through a sigreturn system
call (arch/arm/kernel/signal.c). Because signal handling is
highly kernel-speciﬁc, the thread does not know how to clean up
the signal frame by itself and should instead rely on retcode for
this purpose. Retcode is usually synthesized by the kernel, either
on the user stack or in the memory shared by the kernel and the
user-space such as VDSO [42]. In either case, we need to make
sure the synthesized code is executable by the sandbox.
In our
prototype, the Linux kernel actually does not use retcode on the
Code:call PI:EMAIL:...GOT[n]: printf@armlock:IMC callprepare IMC callARMlock:Dynamic LinkingPLT:PLT[0]:...PLT[n]:jmp  *GOT[n]prepare resolverjmp  PLT[0]ARMlockcall resolver123Figure 4: ARMlock inter-module call
stack because the stack is non-executable (but retcode is created
nevertheless).
Instead, it uses a copy of retcode in the kernel
(KERN_SIGRETURN_CODE). The kernel’s memory has a domain ID
of 0 with the access right of Client, thus its access right is de-
termined by the page table. ARMlock sets the page table to make
retcode executed by both the host and the sandbox. Finally, the
kernel dispatches the signal by manipulating the saved user regis-
ters so that execution will continue at the signal handler and “re-
turn” to the correct retcode when the handler returns, similar to
the way ARMlock switches domains.
System Call Interposition
3.1.2
An untrusted module in ARMlock can make its own system calls
for convenience and performance. However, the kernel’s system
call interface is dangerously wide, and less-exercised system calls
are often a source of kernel exploits. It is thus necessary to inter-
cept and regulate system calls by the untrusted module. Our proto-
type relies on the Seccomp-BPF framework [32] in the Linux ker-
nel for system call interposition. Seccomp-BPF is an extension to
Seccomp [31] that was designed to securely run third-party appli-
cations by disallowing all system calls except for read and write of
already-open ﬁles. Seccomp-BPF generalizes Seccomp by accept-
ing a BPF program [22] to ﬁlter system calls and their parameters.
In ARMlock, the host can assign a Seccomp program for the sand-
box. By default, it disallows all system calls except those for the
ARMlock kernel module. However, the host can permit other sys-
tem calls when necessary. ARMlock delegates the host to conﬁgure
system call interposition for the sandbox. The host should exercise
discretion in this task. Particularly, it should not permit any unnec-
essary system calls and pay close attention to the memory-related
system calls such as mprotect, mmap, and brk. Currently, ARM-
lock does not support fork, exec and other related system calls
inside a sandbox. A process can be forked by the host, followed by
re-initialization of the sandbox. This limitation can be lifted should
more intrusive changes to the base kernel were allowed.
At run-time, the kernel needs to change the Seccomp program
during domain switch. In Linux, each task (struct task_struct
in sched.h) has its own program container (struct seccomp_
filter). The container is organized into a tree structure. Speciﬁ-
cally, there is a prev pointer in seccomp_filter that points to the
parent process’s program. When a system call needs to be ﬁltered,
the kernel executes all the programs along this reverse linked list.
In other words, a parent’s program is inherited by the child pro-
cesses. To interpose the sandbox’s system calls, ARMlock creates
a new seccomp_filter structure for the sandbox (it also inherits
the parent’s program). When switching domains, ARMlock only
needs to overwrite the task’s program container with the pointer
to this new container (current->seccomp.filter). Switching
domains will not aﬀect the program of the host’s children because
they inherit the host’s program, not the sandbox’s.
3.2 ARMlock Fault Domain
ARMlock has a kernel module and a user library. The kernel
module is responsible for creating domains and facilitating inter-
module calls, while the user library provides an easy-to-use pro-
gramming interface for applications. In this rest of this section, we
present details of the fault domain, particularly the user library.
In ARMlock, the untrusted module needs to be compiled as a
position-independent shared library (e.g., ELF dynamic shared ob-
ject (DSO) in Linux [7]) so that it can be loaded at a proper location
(1MB aligned). Each module maintains a list of imported and ex-
ported functions. This deﬁnes the interface between domains and
only functions in this list can be called by other domains using
inter-module calls. For each imported function, ARMlock synthe-
sizes a stub to facilitate the inter-module call. ARMlock leverages
the structure of position-independent shared libraries to seamlessly
integrate those stubs into a domain. Speciﬁcally, the compiler cre-
ates a structure called PLT/GOT [26] for each external function
(e.g., printf) whose address has to be resolved at run-time by the
loader and linker. As shown in Figure 3, PLT is a short sequence
of code that represents printf in the DSO. Calls to printf will
be directed to this PLT entry, which contains an indirect jump to
the instruction address in its associated GOT entry. Initially, the GOT
entry points back to the PLT to prepare and call the dynamic re-
solver. The ﬁrst call to printf therefore will resolve the address
of printf and update the GOT entry (line 1, 2, and dotted lines
in Figure 3). Subsequent calls will be directly dispatched to the
actual function. ARMlock leverages PLT/GOT by eagerly calling
the resolver to locate the external function, and replacing the GOT
entry with the address of its stub (e.g., printf@armlock, line 3).
Consequently, calls to external functions will be conveniently re-
placed by inter-module calls. In addition, if a call-back function is
passed to a domain (e.g., a compar function to qsort, the quick
sort function), a stub needs to be created in that domain to invoke
the call-back function with inter-module call.
Figure 4 shows the sequence of an inter-module call. ARMlock
creates an entry gate and a return gate for each domain, and syn-
thesizes a stub for every imported function. Calls to an imported
function will be dispatched to its stub (line 1 in Figure 4). The stub
handles the low-level details of inter-module call. It saves the state
of the current domain onto the stack and loads the parameters into
the registers. Particularly, it stores the target function address into
one of the registers (r12 in our prototype). It then makes a system
call to the ARMlock kernel module (line 2). The kernel changes
the active domain by updating the thread states such as DACR,
saved registers, and signal handlers (Section 3.1). It then sets the
saved instruction pointer (r15) to the entry gate of the target do-
main. Therefore, execution will resume in the target domain when
the system call returns (line 3). The entry gate ﬁrst validates that the
target function (in r12) is exported to the calling domain and calls
it if the check is passed (line 4). Memory-based parameters need
KernelDomain ADomain Bcodecall printf...stubsave registersload parametersmake the syscallreturn gaterestore registersreturnswitch stack etc.set PC to entry gatesyscall returnsswitch stack etc.set PC to return gatesyscall returnsprintf...returnarrange parametersvalidate & call *r12make the syscallentry gate18273645to be copied over with the help of the kernel, if not shared. When
the function returns (line 5), the entry gate makes another system
call to the kernel (line 6) which “returns” to the return gate of the
calling domain (line 7). The return gate subsequently restores the
saved program states and returns to the original call site (line 8).
Therefore, each inter-module call requires two system calls. As
shown in our experiment, these system calls are very light-weight
and close to a null system call (e.g., getpid).
ARMlock’s user library encapsulates and hides the complicity of
inter-module calls. The programmer only needs to provide a list of
imported functions, from which the library will automatically gen-
erate the corresponding stubs. Even though we rely on PLT/GOT
to place those stubs, there is no need to customize the compiler
because it already supports PLT/GOT, a required structure for dy-
namic shared libraries. In our current prototype, the programmer
needs to manually call some library functions to marshal/unmarshal
memory-based parameters. This can be easily automated with the
tools for remote procedure call [28].
In Section 2.4, we re-introduced the coroutine programming para-
digm to support sandboxes. Coroutines can be straight-forwardly
implemented in ARMlock using return gates: yield and resume
save the registers of the current domain on the stack, and then issue
an ARMlock_RET system call to jump to the target domain’s return
gate. The return gate restores the registers of the target domain and
resumes its execution. For example, in Figure 2, consumer ﬁrst
calls producer to initialize it (line 2). After initialization (line 9),
producer calls resume to save its states to the stack and return to
consumer (line 10). When consumer later yields to producer ask-
ing for more data (line 3), the return gate of producer will restore
previously saved registers and resume execution at line 11.
Compiler optimization may also complicate the implementation
(and debugging) of sandboxes. Particularly, modern compilers sup-
port intrinsic functions, also called builtins, that are implemented
by the compiler and available for use (implicitly) by the user pro-
gram. Note that some intrinsic functions are not inlined in the code,
and could be located in diﬀerent domains from the code that in-
vokes them. For example, gcc provides built-in functions for di-
vision on the ARM platform if the processor does not have native
division instructions. The compiler may also silently replace some
instruction sequences with a built-in function during optimization
(e.g., the memset intrinsic). However, only a single copy of built-in
functions will be loaded and linked into a process. When an intrin-
sic function is called in a sandbox, it will lead to a domain fault
because the function lies in the host domain. To address that, we
need to load and link to a copy of built-in functions in each domain
or provide our own equivalent implementation.
4. EVALUATION
In this section, we ﬁrst systematically analyze the security guar-
antee provided by ARMlock to demonstrate its eﬀectiveness, and
then evaluate the performance overhead incurred by ARMlock.
4.1 Security Analysis
Similar to other SFI systems, we assume a threat model where
the kernel, including the ARMlock kernel module, is trusted and
the host application is benign but may contain exploitable vulnera-
bilities. The host needs to safely execute some untrusted modules
such as benign code that handles untrusted inputs or code of a ques-
tionable origin. Therefore, the code in the sandbox could have been
compromised and is potentially malicious. The goal of ARMlock
is to securely and eﬃciently isolate the untrusted module from the
host. Figure 5 shows the interaction between the components of a
Figure 5: Threat model of ARMlock
protected application. We will use this ﬁgure to illustrate the at-
tacks against ARMlock and the defenses built into our system.
Direct memory access: since the sandbox is a part of the host’s
address space, an attacker may try to directly access the host mem-
ory (#1 in Figure 5). This attempt will be intercepted by the CPU
as a domain fault because ARMlock sets the host’s memory inac-
cessible when running inside the sandbox. The kernel delivers the
exception to the handler of the sandbox. ARMlock registers a han-
dler for the sandbox that forwards domain fault and other selected
signals to the host. This might be disrupted by the untrusted module
since we assume it can compromise everything inside the sandbox
(it is feasible to secure the handler using techniques similar to the
Chrome sandbox for Linux [12]. We choose to have a simpler at-
tack model.) Even so, the attempt to access the host memory will
be foiled. Some kernel memory may also be accessible to the un-
trusted module such as VDSO [42] used by Linux to speed up some
system calls. This will not pose a new threat to the kernel because
the kernel always assumes applications are untrusted and protects
itself from them.
Inter-domain communication: the attacker may also target the
inter-domain communication, including inter-module calls, cross-
domain memory copy, and shared memory (#2 in Figure 5). First,
the attacker may try to call a dangerous function in the host (e.g.,
system() in libc) or pass malicious parameters to an exported
function. ARMlock maintains a list of the exported functions that
is checked against by the entry gate. As such, only these func-
tions may be called by the untrusted code. They should always
treat parameters from the sandbox as malicious and carefully sani-
tize them. The host risks being compromised should some security
checks be neglected. To mitigate this threat, the programmer could
reﬁne the exported functions for a narrower attack surface, and pro-
vide defense-in-depth by interposing the host’s syscalls [32] or us-
ing a capability-based system [45]. The return gate in the host can-
not be misused by the attacker to manipulate control ﬂows because
the return address is saved on the host’s stack and thus cannot be
changed by other domains. The return value, if used, should also
be sanitized.
Cross-domain memory copy requires the assistance of the ARM-
lock kernel module. The host passes an unforgeable token [11] to
the kernel and only then the sandbox can issue a memory copy
command. Therefore, the source domain has full control over the
cross-domain memory copy. During memory copy, there is a short
window of time in which both the host and the sandbox are ac-
cessible. However, there is no race condition that would allow the
attacker to access the host memory: DACR (domain access con-
trol register) is saved and restored during the context switch in the
thread control blocks. If another thread is scheduled to interrupt
KernelARMlockStubEntryRetRetEntrySyscall InterpositionExceptionsUser1234Fault DomainThe HostItem
CPU
Memory
OS
Kernel
LMbench
nbench
Conﬁguration
ARM1176JZF-S 700 MHz
512MB
Raspbian (based on Debian)
Linux 3.6.11
version 2
version 2.2.3
Table 2: Conﬁguration of the experiments
the memory copy, DACR will be restored to its value, rendering
the host memory inaccessible. Moreover, each CPU core has its