### Major Issues and Comments

- **Scroll Bar and Widgets Missing**: Two widgets are missing, and the scroll bar is not present.
- **Page Loading Issues**: The page did not load properly on multiple occasions.
- **Missing Page Banners and Video Pop-ups**: Multiple page banners and a video pop-up are missing.
- **Navigation Bar and Images Missing**: The navigation bar and images are absent.

### Blocking Mixed Scripts

When TrackerSift classifies a mixed script with different tracking and functional methods, we can remove the tracking methods to generate a surrogate script. This surrogate script can then be used to shim the mixed script at runtime. Existing content blockers like NoScript, uBlock Origin, AdGuard, and Firefox SmartBlock use surrogate scripts to block tracking by mixed scripts while avoiding functionality breakage [3, 10, 13, 38]. However, these surrogate scripts are currently manually designed [11]. TrackerSift can help scale up the process of generating surrogate scripts by automatically detecting and removing tracking methods in mixed scripts.

**Challenges and Solutions:**

- **Functionality Breakage**: Removing tracking methods is tricky because it risks breaking functionality due to potential coverage issues in dynamic analysis. To mitigate this, we plan to explore a more conservative approach using a guard—a predicate that blocks tracking execution but allows functional execution. Such a predicate has a similar structure to an assertion.
- **Invariant Generation**: We envision using classic invariant inference techniques [25, 43] on a tracking method’s calling context, scope, and arguments to generate a program invariant that holds across all tracking invocations. If an online invocation satisfies the invariant, the guard will block the execution.
- **Context Information Collection**: A key challenge is collecting context information, such as program scope, method arguments, and stack trace, for each request initiated by the mixed method at runtime. We plan to address these challenges in leveraging TrackerSift for generating safe surrogate scripts in our future work.

### Blocking Mixed Methods

Our analysis shows that TrackerSift’s separation factor is 91% even at the finest granularity, leaving 5.6K mixed methods that cannot be safely blocked. One possible direction is to apply TrackerSift in the context of a mixed method initiating a request. We can define context as calling context, program scope, or parameters to the mixed method. In the case of calling context, we can perform a call stack analysis that takes a snapshot of a mixed method’s stack trace when the method initiates a tracking or functional request. We hope to see distinct stack traces from tracking and functional requests by a mixed method. By consolidating the stack traces of a mixed method, we can locate the point of divergence, i.e., a method in the stack trace that only participates in tracking requests. We hypothesize that removing such a method will break the chain of methods needed to invoke a tracking behavior, thus removing the tracking behavior.

### Figure 5: Call Stack Analysis

Figure 5 illustrates our proposed call stack analysis. It shows the snapshot of stack traces of requests `nonads-2` and `ads-2`. These requests are initiated by a mixed method `m2()` on the webpage. The two stack traces are merged to form a call graph where each node represents a unique script and method, and an edge represents a caller-callee relationship. The yellow color indicates that a node participates in invoking both tracking and functional requests. `t` in `track.js` is the point of divergence since it only participates in the tracking trace. Therefore, `t` is most likely to originate a tracking behavior, making it a good candidate for removal.

### Limitations

- **Dynamic Analysis Coverage**: Our web crawls do not provide full coverage of events triggered by user interactions (e.g., scroll, click). This is a general limitation of dynamic analysis and can be mitigated by using a forced execution framework to execute other possible paths [33].
- **Anonymous Functions**: Our method-level analysis does not distinguish between different anonymous functions in a script and treats them as part of the same method. This limitation can be addressed by using the line and column number information available for each method invocation in the call stack.
- **Landing Pages Only**: Our web crawls are limited to the landing pages, and the results might vary for internal pages [18]. As part of our future work, we plan to deploy TrackerSift on internal pages as well.

### Related Work

We summarize closely related work documenting anecdotal evidence of circumvention by mixing tracking and functional resources. Notably, Alrizah et al. [17] and Chen et al. [20] showed how first-party hosting and script inlining or bundling is being used by trackers to circumvent filter lists used by content blockers. Alrizah et al. [17] documented various attacks on content blocking tools, including counter-blocking and circumvention attacks. They showed that some websites circumvent filter lists by mixing tracking and functional resources through techniques such as script inlining. These websites essentially have a “self-defacement” strategy, where content blockers risk breaking legitimate functionality if they act and risk missing privacy-invasive advertising and tracking if they do not.

Chen et al. [20] leveraged their JavaScript signature approach to document about 500 false negative cases where tracking scripts were inlined or bundled for successful circumvention. Relatedly, trackers have started to exploit techniques such as CDN proxies (i.e., serving functional and tracking resources from the same CDN server) [36] and CNAME cloaking (i.e., masquerading third-party tracking resources as first-party using minor changes in DNS records) [22, 23] to assist with implementing these circumvention techniques.

### Conclusion

We presented TrackerSift, a hierarchical approach to progressively untangle mixed resources at increasing levels of finer granularity, from network-level (e.g., domain and hostname) to code-level (e.g., script and method). We deployed TrackerSift on 100K websites to study the prevalence of mixed web resources across different granularities. TrackerSift classified more than 17% domains, 48% hostnames, 6% scripts, and 9% methods as mixed. Overall, TrackerSift was able to attribute 98% of all requests to tracking or functional resources by the finest level of granularity. Our results highlighted opportunities for finer-grained content blocking to remove mixed resources without breaking legitimate site functionality. TrackerSift can be used to automatically generate surrogate scripts to shim mixed web resources.

### Acknowledgements

This work is supported in part by the National Science Foundation under grant numbers 2051592, 2102347, 2103038, 2103439, and 2106420. We would like to thank our shepherd, Paul Barford, and the anonymous IMC reviewers for their constructive feedback. We also thank Haris Amjad for his valuable input to improve the quality of visualizations in the paper.

### References

[References listed here, formatted according to the appropriate citation style]

---

This version of the text is more structured, coherent, and professional. It clearly outlines the issues, solutions, and related work, making it easier to understand and follow.