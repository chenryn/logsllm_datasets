None
Major
Major
Comment
scroll bar and two
widgets missing
page did not load
multiple page ban-
ners missing
video pop missing
page did not load
page did not load
navigation
scroll bar missing
no visible function-
ality breakage
navigation
scroll bar missing
navigation bar and
images missing
and
and
Blocking mixed scripts. When TrackerSift classifies a mixed
script with different tracking and functional methods, we can sim-
ply remove tracking methods to generate a surrogate script that can
then be used to shim the mixed script at runtime. Existing content
blockers such as NoScript, uBlock Origin, AdGuard, and Firefox
SmartBlock use surrogate scripts to block tracking by mixed scripts
while avoiding breakage [3, 10, 13, 38]. However, these surrogate
scripts are currently manually designed [11]. TrackerSift can help
scale up the process of generating surrogate scripts by automati-
cally detecting and removing tracking methods in mixed scripts.
Note that removing tracking methods is tricky because simply re-
moving them risks functionality breakage due to potential coverage
issues of dynamic analysis. To mitigate this concern, we plan to ex-
plore a more conservative approach using a guard—a predicate that
blocks tracking execution but allows functional execution. Such
a predicate has a similar structure to that of an assertion. We
envision using classic invariant inference techniques [25, 43] on a
tracking method’s calling context, scope, and arguments to gener-
ate a program invariant that holds across all tracking invocations. If
an online invocation satisfies the invariant, the guard will block the
execution. A key challenge in this approach is collecting the con-
text information, e.g., program scope, method arguments, and stack
trace, for each request initiated by the mixed method at runtime.
We plan to address these challenges in leveraging TrackerSift for
generating safe surrogate scripts in our future work.
Blocking mixed methods. Our analysis shows that Tracker-
Sift’s separation factor is 91% even at the finest granularity. This
leaves 5.6K mixed methods that cannot be safely blocked. One pos-
sible direction is to apply TrackerSift in the context of a mixed
method initiating a request. We can define context as calling context,
program scope, or parameters to the mixed method. In the case of
calling context, we can perform a call stack analysis that takes a
snapshot of a mixed method’s stack trace when the method initi-
ates a tracking or functional request. We hope to see distinct stack
traces from tracking and functional requests by a mixed method.
We can consolidate the stack traces of a mixed method and locate
the point of divergence, i.e., a method in the stack trace that only
participates in tracking requests. We hypothesize that removing
such a method will break the chain of methods needed to invoke a
tracking behavior, thus removing the tracking behavior.
IMC ’21, November 2–4, 2021, Virtual Event, USA
Amjad et al.
Figure 5: Call stack analysis for the requests ads-2 and nonads-2 that can not be separated at method level i.e. m2. Call stack is analyzed to
identify the first point of divergence i.e track.js t and it could be removed to block the tracking request.
Figure 5 illustrates our proposed call stack analysis. It shows the
snapshot of stack traces of requests nonads-2 and ads-2. These
requests are initiated by a mixed method m2() on the webpage. The
two stack traces are merged to form a call graph where each node
represents a unique script and method, and an edge represents a
caller-callee relationship. The yellow color indicates that a node
participates in invoking both tracking and functional requests. t in
track.js is the point of divergence since it only participates in the
tracking trace. Therefore, t is most likely to originate a tracking
behavior which makes it a good candidate for removal.
Limitations. We briefly acknowledge a few limitations our mea-
surement and analysis. First, our web crawls do not provide full
coverage of the events triggered by user interactions (e.g., scroll,
click). This is a general limitation of dynamic analysis and can
be mitigated by using a forced execution framework to execute
other possible paths [33]. Second, our method-level analysis does
not distinguish between different anonymous functions in a script
and treats them as part of the same method. This limitation can
be addressed by using the line and column number information
available for each method invocation in the call stack. Finally, our
web crawls are limited to the landing pages and the results might
vary for internal pages [18]. As part of our future work, we plan to
deploy TrackerSift on internal pages as well.
6 RELATED WORK
We summarize closely related work documenting anecdotal evi-
dence of circumvention by mixing up tracking and functional re-
sources. Most notably, Alrizah et al. [17] and Chen et al. [20] showed
how first-party hosting and script inlining or bundling is being used
by trackers to circumvent filter lists used by content blockers. Al-
rizah et al. [17] documented a variety of attacks on content blocking
tools, including both counter-blocking and circumvention attacks.
Among other things, they showed that some websites circumvent
filter lists by mixing tracking and functional resources through
techniques such as script inlining. These websites essentially have
a “self-defacement” strategy, where content blockers risk breaking
legitimate functionality as collateral damage if they act and risk
missing privacy-invasive advertising and tracking if they do not.
Chen et al. [20] leveraged their JavaScript signature approach to
document about 500 false negative cases where tracking scripts
were inlined or bundled for successful circumvention. Relatedly,
trackers have started to exploit techniques such as CDN proxies
(i.e., serve functional and tracking resources from the same CDN
server) [36] and CNAME cloaking (i.e., masquerade third-party
tracking resources from first-party using a minor change in DNS
records) [22, 23] to assist with implementing these circumvention
techniques.
The problem of localizing tracking-inducing code shares similar-
ities with prior research on fault-inducing code localization. For ex-
ample, spectra-based fault localization (SBFL) [16, 24, 31, 32, 45, 50]
collect statement coverage profiles of each test, passing or fail-
ing, to localize the lines of code that are most likely to induce a
test failure. Bela et al. [51] and Laghari et al. [34] presented a call
frequency-based SBFL technique. Instead of coverage information,
they use the frequency of method occurrence in the call stack of
failing test cases. A method that appears more in the failing call
stack of failing test cases is more likely to be faulty. In Tracker-
Sift, methods responsible for more frequently initiating tracking
requests than functional requests is classified as tracking. Abreu et
al. [15] studied how accurate these SBFL techniques are, and their
accuracy is independent of the quality of test design. Jiang et al.
[30] used call stack to localize the null pointer exception, and Gong
et al. [27] generated call stack traces to successfully identify 65%
of the root cause of the crashing faults. One common limitation
across most fault-localization approaches is that they require an
extensive test suite capable of exercising faulty behavior, along
with an instrumented runtime to collect statement-level coverage.
TrackerSift overcomes these limitations by using filter lists as
test oracle during page load time and uses an instrumented browser
to capture fine-grained coverage.
7 CONCLUSION
We presented TrackerSift, a hierarchical approach to progres-
sively untangle mixed resources at increasing levels of finer gran-
ularity from network-level (e.g., domain and hostname) to code-
level (e.g., script and method). We deployed TrackerSift on 100K
websites to study the prevalence of mixed web resources across
different granularities. TrackerSift classified more than 17% do-
mains, 48% hostnames, 6% scripts, and 9% methods as mixed. Overall,
TrackerSift was able to attribute 98% of all requests to tracking or
functional resources by the finest level of granularity. Our results
highlighted opportunities for finer-grained content blocking to
remove mixed resources without breaking legitimate site function-
ality. TrackerSift can be used to automatically generate surrogate
scripts to shim mixed web resources.
574
Call Stack Analysiscdn.google.com/ads-2type : scriptcall stack:test.com/clone.js m2ads.com/track.js tcdn.google.com/nonads-2type : scriptcall stack:test.com/clone.js m2test.com/user.js ktest.com/get.js aads.com./track.jsttest.com/clone.jsm2test.com/get.jsatest.com/user.jsktest.com/clone.jsm2ads.com./track.jsttest.com/clone.jsm2test.com/get.jsatest.com/user.jskCall GraphFunctionalTrackingTrackerSift: Untangling Mixed Tracking and Functional Web Resources
IMC ’21, November 2–4, 2021, Virtual Event, USA
ACKNOWLEDGEMENTS
This work is supported in part by the National Science Founda-
tion under grant numbers 2051592, 2102347, 2103038, 2103439, and
2106420. We would like to thank our shepherd, Paul Barford, and
the anonymous IMC reviewers, for their constructive feedback. We
would also like to thank Haris Amjad for his valuable input to help
improve the quality of visualizations in the paper.
REFERENCES
[1] 2020. gorhill/uBlock: uBlock Origin - An efficient blocker for Chromium and
Firefox. Fast and lean. https://github.com/gorhill/uBlock.
[2] 2021. Adblock Plus. https://adblockplus.org/.
[3] 2021.
AdGuard Scriptlets and Redirect resources.
AdguardTeam/Scriptlets.
https://github.com/
[4] 2021. Brave Browser. https://brave.com/.
[5] 2021. Browserify. https://browserify.org/
[6] 2021. EasyList. https://easylist.to/easylist/easylist.txt.
[7] 2021. EasyPrivacy. https://easylist.to/easylist/easyprivacy.txt.
[8] 2021. Extending DevTools. https://developer.chrome.com/docs/extensions/mv3/
devtools/
[9] 2021. Facebook Pixel: Implementation. https://developers.facebook.com/docs/
facebook-pixel/implementation/
https://blog.
[10] 2021. Firefox 87 introduces SmartBlock for Private Browsing.
mozilla.org/security/2021/03/23/introducing-smartblock/
[11] 2021. Security/TrackingProtectionBreakage. https://wiki.mozilla.org/Security/
TrackingProtectionBreakage#Trivial_shim_needed_to_avoid_breakage.3B_no_
yellowlisting_required
[12] 2021. Selenium. http://docs.seleniumhq.org/. http://docs.seleniumhq.org/
[13] 2021. uBO-Scriptlets: A custom arsenal of scriptlets to be used for injecting
userscripts via uBlock Origin. https://github.com/uBlock-user/uBO-Scriptlets,.
[14] 2021. webpack. https://webpack.js.org/.
[15] Rui Abreu, Peter Zoeteweij, and Arjan J.C. van Gemund. 2007. On the Accuracy of
Spectrum-based Fault Localization. In Testing: Academic and Industrial Conference
Practice and Research Techniques - MUTATION (TAICPART-MUTATION 2007).
[16] Pragya Agarwal and Arun Prakash Agrawal. 2014. Fault-Localization Techniques
for Software Systems: A Literature Review. SIGSOFT Softw. Eng. Notes (2014).
[17] Mshabab Alrizah, Sencun Zhu, Xinyu Xing, and Gang Wang. 2019. Errors,
Misunderstandings, and Attacks: Analyzing the Crowdsourcing Process of Ad-
blocking Systems. In ACM Internet Measurement Conference (IMC).
[18] Waqar Aqeel, Balakrishnan Chandrasekaran, Anja Feldmann, and Bruce M.
Maggs. 2020. On Landing and Internal Web Pages: The Strange Case of Jekyll
and Hyde in Web Performance Measurement. In Proceedings of the ACM Internet
Measurement Conference.
[19] Muhammad Ahmad Bashir, Sajjad Arshad, Engin Kirda, William Robertson, and
Christo Wilson. 2018. How Tracking Companies Circumvented Ad Blockers
Using WebSockets. In Proceedings of the Internet Measurement Conference (IMC).
[20] Quan Chen, Peter Snyder, Ben Livshits, and Alexandros Kapravelos. 2021. Detect-
ing Filter List Evasion With Event-Loop-Turn Granularity JavaScript Signatures.
In IEEE Symposium on Security and Privacy.
[21] Yuyu Chen. 2016. Tough sell: Why publisher ’turn-off-your-ad-blocker’ messages
are so polite - Digiday. https://digiday.com/media/tough-sell-publisher-turn-off-
ad-blocker-messages-polite/.
[22] Romain Cointepas. 2019. CNAME Cloaking, the dangerous disguise of third-party
trackers. https://medium.com/nextdns/cname-cloaking-the-dangerous-disguise-
of-third-party-trackers-195205dc522a.
[23] Ha Dao, Johan Mazel, and Kensuke Fukuda. 2020. Characterizing CNAME
Cloaking-Based Tracking on the Web. IEEE/IFIP TMA’20 (2020), 1–9.
[24] Marwa El-Wahab, Amal Aboutabl, and Wessam El-Behaidy. 2018. Graph Mining
for Software Fault Localization: An Edge Ranking based Approach. Journal of
Communications Software and Systems 13 (01 2018), 178–188. https://doi.org/10.
24138/jcomss.v13i4.402
[25] Michael D. Ernst, Jake Cockrell, William G. Griswold, and David Notkin. 1999.
Dynamically Discovering Likely Program Invariants to Support Program Evolu-
tion. In Proceedings of the 21st International Conference on Software Engineering
(Los Angeles, California, USA) (ICSE ’99). Association for Computing Machinery,
New York, NY, USA, 213–224. https://doi.org/10.1145/302405.302467
[26] Kiran Garimella, Orestis Kostakis, and Michael Mathioudakis. 2017. Ad-Blocking:
A Study on Performance, Privacy and Counter-Measures. In Proceedings of the
2017 ACM on Web Science Conference.
[27] Liang Gong, Hongyu Zhang, Hyunmin Seo, and Sunghun Kim. 2014. Locating
Crashing Faults based on Crash Stack Traces. In arXiv:1404.4100.
[28] Umar Iqbal, Zubair Shafiq, and Zhiyun Qian. 2017. The Ad Wars: Retrospective
Measurement and Analysis of Anti-Adblock Filter Lists. In IMC.
[29] Umar Iqbal, Peter Snyder, Shitong Zhu, Benjamin Livshits, Zhiyun Qian, and
Zubair Shafiq. 2020. AdGraph: A Graph-Based Approach to Ad and Tracker
Blocking. In Proceedings of the IEEE Symposium on Security & Privacy.
[30] Shujuan Jiang, Wei Li, Haiyang Li, Yanmei Zhang, Hongchang Zhang, and Yingqi
Liu. 2012. Fault Localization for Null Pointer Exception Based on Stack Trace
and Program Slicing. In 2012 12th International Conference on Quality Software.
[31] James A. Jones and Mary Jean Harrold. 2005. Empirical Evaluation of the Taran-
tula Automatic Fault-Localization Technique. In Proceedings of the 20th IEEE/ACM
International Conference on Automated Software Engineering (Long Beach, CA,
USA) (ASE ’05). Association for Computing Machinery, New York, NY, USA,
273–282. https://doi.org/10.1145/1101908.1101949
[32] James A. Jones, Mary Jean Harrold, and John Stasko. 2002. Visualization of Test
Information to Assist Fault Localization. In Proceedings of the 24th International
Conference on Software Engineering (Orlando, Florida) (ICSE ’02). Association for
Computing Machinery, New York, NY, USA, 467–477. https://doi.org/10.1145/
581339.581397
[33] Kyungtae Kim, I Luk Kim, Chung Hwan Kim, Yonghwi Kwon, Yunhui Zheng,
Xiangyu Zhang, and Dongyan Xu. 2017. J-force: Forced execution on javascript.
In Proceedings of the 26th international conference on World Wide Web. 897–906.
[34] Gulsher Laghari, Alessandro Murgia, and Serge Demeyer. 2015. Localising Faults
in Test Execution Traces. In Proceedings of the 14th International Workshop on
Principles of Software Evolution (Bergamo, Italy) (IWPSE 2015). Association for
Computing Machinery, New York, NY, USA, 1–8. https://doi.org/10.1145/2804360.
2804361
[35] Tobias Lauinger, Abdelberi Chaabane, Sajjad Arshad, William Robertson, Christo
Wilson, and Engin Kirda. 2017. Thou Shalt Not Depend on Me: Analysing the
Use of Outdated JavaScript Libraries on the Web. In Network and Distributed
System Security Symposium (NDSS).
[36] Hieu Le, Athina Markopoulou, and Zubair Shafiq. 2021. CV-Inspector: Towards
Automating Detection of Adblock Circumvention. In Network and Distributed
System Security Symposium (NDSS).
[37] Matthew Malloy, Mark McNamara, Aaron Cahn, and Paul Barford. 2016. Ad
Blockers: Global Prevalence and Impact. In ACM Internet Measurement Conference
(IMC).
[38] Giorgio Maone. [n.d.]. Surrogate Scripts vs Google Analytics. https://hackademix.
net/2009/01/25/surrogate-scripts-vs-google-analytics/.
[39] Georg Merzdovnik, Markus Huber, Damjan Buhov, Nick Nikiforakis, Sebastian
Neuner, Martin Schmiedecker, and Edgar R. Weippl. 2017. Block Me If You Can:
A Large-Scale Study of Tracker-Blocking Tools. In IEEE European Symposium on
Security and Privacy.
[40] Muhammad Haris Mughees, Zhiyun Qian, and Zubair Shafiq. 2017. Detecting
Anti Ad-blockers in the Wild . In Privacy Enhancing Technologies Symposium
(PETS).
[41] Nick Nikiforakis, Luca Invernizzi, Alexandros Kapravelos, Steven Van Acker,
Wouter Joosen, Christopher Kruegel, Frank Piessens, and Giovanni Vigna. 2012.
You Are What You Include: Large-scale Evaluation of Remote JavaScript Inclu-
sions. In ACM Conference on Computer and Communications Security (CCS).
[42] Rishab Nithyanand, Sheharbano Khattak, Mobin Javed, Narseo Vallina-Rodriguez,
Marjan Falahrastegar, Julia E. Powles, Emiliano De Cristofaro, Hamed Haddadi,
and Steven J. Murdoch. 2016. Adblocking and Counter-Blocking: A Slice of
the Arms Race. In USENIX Workshop on Free and Open Communications on the
Internet.
[43] Saswat Padhi, Rahul Sharma, and Todd Millstein. 2016. Data-Driven Precondition
Inference with Learned Features. SIGPLAN Not. 51, 6 (June 2016), 42–56. https:
//doi.org/10.1145/2980983.2908099
[44] Page Fair. 2017. The State of the Blocked Web. https://pagefair.com/downloads/
2017/01/PageFair-2017-Adblock-Report.pdf.
[45] Spencer Pearson, José Campos, René Just, Gordon Fraser, Rui Abreu, Michael D.
Ernst, Deric Pang, and Benjamin Keller. 2017. Evaluating and Improving Fault
Localization. In 2017 IEEE/ACM 39th International Conference on Software Engi-
neering (ICSE). 609–620. https://doi.org/10.1109/ICSE.2017.62
[46] Victor Le Pochat, Tom Van Goethem, Samaneh Tajalizadehkhoob, Maciej Kor-
czyński, and Wouter Joosen. 2018. Tranco: A research-oriented top sites ranking
hardened against manipulation. arXiv preprint arXiv:1806.01156 (2018).
[47] Kaleigh Rogers. 2018. Why Doesn’t My Ad Blocker Block ‘Please Turn Off Your Ad
Blocker’ Popups? - VICE. https://www.vice.com/en_us/article/j5zk8y/why-your-
ad-blocker-doesnt-block-those-please-turn-off-your-ad-blocker-popups.
[48] Sandra Siby, Umar Iqbal, Steven Englehardt, Zubair Shafiq, and Carmela Troncoso.
2021. WebGraph: Capturing Advertising and Tracking Information Flows for
Robust Blocking. arXiv preprint arXiv:2107.11309 (2021).
[49] Alexander Sjosten, Peter Snyder, Antonio Pastor, Panagiotis Papadopoulos, and
Benjamin Livshits. 2020. Filter List Generation for Underserved Regions. In The
Web Conference.
[50] H. A. D. Souza, M. L. Chaim, and Fabio Kon. 2016. Spectrum-based Software
Fault Localization: A Survey of Techniques, Advances, and Challenges. ArXiv
abs/1607.04347 (2016).
[51] Béla Vancsics, Ferenc Horváth, Attila Szatmári, and Arpád Beszédes. [n.d.]. Call
Frequency-Based Fault Localization. ([n. d.]).
575
IMC ’21, November 2–4, 2021, Virtual Event, USA
Amjad et al.
[52] Antoine Vastel, Peter Snyder, and Benjamin Livshits. 2020. Who Filters the
Filters: Understanding the Growth, Usefulness and Efficiency of Crowdsourced
AdBlocking. In ACM SIGMETRICS/Performance.
576