  * extract_des(pdata, data_left, &pattern, &dtd, SDP_TYPE_UUID); 解析service search pattern（对应SDP协议数据结构图）
  * max = get_be16(pdata); 获得Maximu Attribute Byte
  * scanned = extract_des(pdata, data_left, &seq, &dtd, SDP_TYPE_ATTRID);解析Attribute ID list
  * if (sdp_cstate_get(pdata, data_left, &cstate) data_size - cstate->cStateValue.maxBytesSent);  
    pResponse = pCache->data;  
    memcpy(buf->data, pResponse + cstate->cStateValue.maxBytesSent, sent);      
    buf->data_size += sent;  
    cstate->cStateValue.maxBytesSent += sent;  
    if (cstate->cStateValue.maxBytesSent == pCache->data_size)  
    cstate_size = sdp_set_cstate_pdu(buf, NULL);  
    else
    cstate_size = sdp_set_cstate_pdu(buf, cstate);  
sdp_get_cached_rsp函数其实是对cstate的timestamp值的检验，如何过这个检验之后再说。当代码走到第五行处的memcpy时，由于cstate->maxBytesSent就是由数据包里的数据所控制，而且没有做任何检验，所以这里可以为任意的uint16_t值。那么很明显，这里就出现了一个对pResponse的越界读的操作。而越界读的数据还会通过SDP
RESPONSE发送给攻击方，那么一个信息泄露就发生了。
#### CVE-2017-0785
这个漏洞也是SDP的信息泄露漏洞，不过是BlueDroid的。与BlueZ的那个是有些类似的。我们也从对SDP数据包的处理函数说起。
SDP数据包会通过sdp_data_ind函数送给sdp_server_handle_client_req。与BlueZ一样，这个函数也会根据包中的pud_id来确定具体的处理函数。这个漏洞发生在对SDP_PDU_SERVICE_SEARCH_REQ命令的处理，对包内数据的解析与上文BlueZ中的大同小异，不过注意在BlueDroid中，cstate结构与BlueZ中有些不同：
    typedefstruct {  
    uint16_t​ cont_offset;  
    } sdp_cont_state_t;  
关注漏洞处的代码：
Ⅰ，Ⅱ中代码可以看出，变量num_rsp_handles的值，一定程度上可以由包中的Maximu Attribute Byte字段控制。
Ⅲ中代码是对带cstate的包的处理，第一步是对大小的检查，第二步是获得cont_offset，然后对cont_offset进行检查，第三步就到了
rem_handles = num_rsp_handles – cont_offset
可以思考一种情况，如果num_rsp_handles cont_offset
+=
cur_handles;,cur_handles是一个固定的值，如果这个下溢的过程，发生很多次，p_ccb->cont_offset就会变得很大，那么在５处，就会有一个对rsp_handles数组的越界读的产生。
下面的操作可以让这个越界读发生：
  * 发送一个不带cstate的包， 而且Maximu Attribute Byte字段设置的比较大。那么结果就是rem_handles = num_rsp_handles，而由于max_replies比较大，所以num_rsp_handles会成为一个比较大的值。只要在Ⅳ中保证rem_handles > cur_handles，那么p_ccb->cont_offset就会成为一个非０值cur_handles。这一步是为了使得p_ccb->cont_offset成为一个非０值。
  * 接收服务端的回应包，这个回应包里的cstate字段将会含有刚刚的p_ccb->cont_offset值，我们取得这个值。
  * 发送一个带cstate的包，cont_offset指定为刚刚提取的值，而且设置Maximu Attribute Byte字段为０。那么服务端收到这个包后，就会走到rem_handles = num_rsp_handles – cont_offset 从而发生整数下溢，同时p_ccb->cont_offset又递增一个cur_handles大小。
  * 重复２和３的过程，那么p_ccb->cont_offset将越来越大，从而在⑤出发生越界读，我们提取服务端返回的数据，就可以获得泄露的信息的内容。
#### CVE-2017-0781
BlueDroid中BNEP服务对于接受到的数据包的处理也不复杂：
  * 解析得到BNEP_TYPE，得到extension位。
  * 检查连接状态，如果已经连接则后续可以处理非BNEP_FRAME_CONTROL的包，如果没有建立连接，则后续只处理BNEP_FRAME_CONTROL的包。
  * 去BNEP_TYPE对应的处理函数进行处理。
  * 对于BNEP_TYPE不是BNEP_FRAME_CONTROL而且有extension位的，还需要对extension的数据进行处理。
  * 调用pan层的回调函数。
值得注意的是，BNEP连接真正建立起来，需要先处理一个合法的BNEP_FRAME_CONTROL数据包。CVE-2017-0781正是连接还没建立起来，在处理BNEP_FRAME_CONTROL时所发生的问题：
    caseBNEP_FRAME_CONTROL:  
    ctrl_type = *p;  
    p = bnep_process_control_packet (p_bcb, p, &rem_len, FALSE);  
    if (ctrl_type == BNEP_SETUP_CONNECTION_REQUEST_MSG &&  
    p_bcb->con_state != BNEP_STATE_CONNECTED &&  
    extension_present && p && rem_len)  
    {  
    p_bcb->p_pending_data = (BT_HDR *)osi_malloc(rem_len);  
    memcpy((UINT8 *)(p_bcb->p_pending_data + 1), p, rem_len);  
    p_bcb->p_pending_data->len    = rem_len;  
    p_bcb->p_pending_data->offset = 0;  
    }  
上述代码中，malloc了一个rem_len的大小，这个是和收到的数据包的长度相关的。可是memcpy的时候，却是从p_bcb->p_pending_data＋１开始拷贝数据，那么这里会直接溢出一个sizeof(*(p_bcb->p_pending_data))大小的内容。这个大小是8.所以只要代码走到这，就会有一个8字节大小的堆溢出。而要走到这，只需要过那个if的判断条件，而这个if其实是对BNEP_SETUP_CONNECTION_REQUEST_MSG命令处理失败后的错误处理函数。那么只要发送一个错误的BNEP_SETUP_CONNECTION_REQUEST_MSG命令包，就可以进入到这段代码了触发堆溢出了。
#### CVE-2017-0782
这个也是由于BNEP协议引起的漏洞，首先它是个整数溢出，整数溢出导致的后果是堆溢出。
问题出在BNEP对extension字段的处理上：
上述代码中，ext_len =
*p++的ext_len从数据包中获得，没有长度的检查，可为任意值。而当control_type为一个非法值的时候，会走到*rem_len -=
(ext_len –
1),那么这里就很有说法了，我们如果设置ext_len比较大，那么这里就会发生一个整数下溢。从而使得rem_len变成一个很大的uint16_t的值。这个值将会影响后续的处理：
上面的代码中，bnep_process_control_packet()处将发生整数下溢出，使得rem_len成为一个很大的值（比如0xfffd），p_buf->len=rem_len处会将这个值赋值给p_buf->len。If()中，是回调函数处理这个p_buf，在BlueDroid中这个函数是pan_data_buf_ind_cb，这个函数会有一条路径调到bta_pan_data_buf_ind_cback，而在这个函数中：
memcpy用到了我们传进来的p_buf，而p_buf->len是刚刚下溢之后的很大的值，所以主要保证sizeof(tBTA_PAN_DATA_PARAMS)
> p_buf->offset，这里就会发生一次很大字节的堆溢出。
CVE-2017-0781和CVE-2017-0782导致了堆溢出，一般会使得com.android.bluetooth崩溃，但是这个进程崩溃系统不会有提醒，需要去logcat来找崩溃的日志。这是两个很有价值的堆溢出漏洞，结合前面的信息泄露漏洞，是完全可以进行远程代码执行的。
### 总结
现在关于这五个漏洞的PoC，github有很多，安装上pybluez和pwntools，嗅探到蓝牙地址，便可进行攻击，简单的演示如下：
我们使用的智能机，平板电脑，可穿戴设备大多都支持蓝牙功能。这些设备均受前面提到的几个漏洞的影响。当手机打开蓝牙时，无需任何操作，攻击者便可在我们毫无察觉的状态下，完全控制手机。Wifi芯片可能被黑，wpa2协议进行加密会被监听，现在蓝牙也不安全。普通用户，最主要的还是提高安全意识，及时更新设备的安全补丁。
## 总结
电脑CPU不安全，手机WIFI芯片有问题，无线上网有可能被窃听，用蓝牙也可能被攻击。用户需要警惕但也不必过度恐慌，这些都属于高级攻击方法，利用技术门槛比较高，不容易造成广泛性攻击事件。
平台安全中核心的两个问题：
  * 固件安全
硬件对固件进行支持，固件对操作系统提供服务。这个“承上启下“的位置说明了他的重要性。固件中运行专有和复杂的代码库，不安全的固件会削弱设备的整体安全性，引入危及整个系统的漏洞。
  * 规范的制定以及实现
规范，包括但不限于协议，格式，处理模型。这方面例如WPA2
KRACK密钥重载攻击是协议制定时，没有处理好重传帧的情况；又例如BlueBorne蓝牙漏洞是在各个平台中，规范实现时的出现的问题。
文中所讲的问题，仅仅影响到信息的安全。IoT，IoE，人工智能……一场又一场革命将我们带入智能时代。智能家居和自动驾驶这些科技产物已经融入了我们生活，如果不注意这方面的平台安全，危及的可是用户的生命和财产。所以，这些新兴科技的平台安全问题，将是我们之后关注的重点。
## 参考链接
[https://git.archlinux.org/svntogit/packages.git/commit/trunk?h=packages/wpa_supplicant&id=9c1bda00a846ff3b60e7c4b4f60b28ff4a8f7768](https://git.archlinux.org/svntogit/packages.git/commit/trunk?h=packages/wpa_supplicant&id=9c1bda00a846ff3b60e7c4b4f60b28ff4a8f7768)
[https://git.archlinux.org/svntogit/community.git/commit/trunk?h=packages/hostapd&id=d31735a09b4c25eaa69fb13b1031910ca3c29ee5](https://git.archlinux.org/svntogit/community.git/commit/trunk?h=packages/hostapd&id=d31735a09b4c25eaa69fb13b1031910ca3c29ee5)