that has 400K (7% for port 8333) of Tor Exit capacity would
cost about 2500 USD.
VIII. COUNTERMEASURES
These attacks are very effective due to a feature of Bitcoin
which allows an easy ban of Tor Exit nodes from arbitrary
Bitcoin peers and due to easy user ﬁngerprinting with the
“address cookies”. One possible countermeasure against Tor-
ban could be to relax the reputation-based DoS protection.
For example each Bitcoin peer could have a random variable,
which would decide whether to turn ON or OFF the DoS
protection mechanism with probability 1/2. As a result the
attacker might be able to DoS at most half of the network,
but on the other hand he will not be able to ban any relays or
VPNs from all the Bitcoin peers.
An obvious countermeasure would be to encrypt and
authenticate Bitcoin trafﬁc. This would prevent even oppor-
tunistic man-in-the-middle attacks (i.e. even if the user is
unlucky to choose a malicious Exit relay). Another possible
countermeasure is to run a set of “Tor-aware” Bitcoin peers
which would regularly download Tor consensus and make sure
that Bitcoin DoS countermeasures are not applied to servers
from the Tor consensus. K. Atlas [1] implemented a similar
countermeasure (which maintains historical record of Tor exit
nodes used to connect to the Bitcoin network.)
Finally, Bitcoin developers can maintain and distribute a
safe and stable list of onion addresses. Users which would
like to stay anonymous should choose at least one address
from this list. There currently exists a short and not up-to-date
list of Bitcoin fallback onion addresses [12]. Another advice
for a user would be to run two Bitcoin nodes, one over Tor and
one without, and compare their blockchains and unconﬁrmed
transactions. This would prevent from creation of virtual reality
for Tor-only users.
With regards to the ﬁngerprinting attack several coun-
termeasures are possible. First, Bitcoin peers can request
performing proof-of-work computation for each sent GETADDR
message, so that it becomes computationally expensive for an
attacker to query each client. Second, according to the Bitcoin
core source, the only time when a client sends a GETADDR
message is when he establishes an outbound connection. Thus
ignoring GETTADDR requests on outbound connections will not
change the usual operation of Bitcoin networking protocol
and will prevent the attacker from requesting the ﬁngerprint24.
Finally an immediate countermeasure would be to remove the
cached address database ﬁle before each session and to use
only trusted hidden-services.
REFERENCES
[1] K. Atlas, “Historical record of Tor exit nodes used to connect to the
Bitcoin,” http://www.openbitcoinprivacyproject.org/torban/www/, 2014.
[2] A. Biryukov, D. Khovratovich, and I. Pustogarov, “Deanonymisation of
clients in Bitcoin P2P network,” CoRR, vol. abs/1405.7418, 2014.
[3] A. Biryukov, I. Pustogarov, and R.-P. Weinmann, “Trawling for tor
hidden services: Detection, measurement, deanonymization,” in Pro-
ceedings of IEEE Symposium on Security and Privacy (SP’13).
IEEE
Computer Society, 2013.
[4] Bitcoin Wiki, https://en.bitcoin.it/wiki/, 2014.
of
[5] BitcoinJ
implementation
https://github.com/bitcoinj/bitcoinj, 2014.
Java
–
a
the Bitcoin
protocol,
[6] Bitnodes, https://getaddr.bitnodes.io/, 2014.
[7] D. Bradbury, “Could eroding net neutrality hurt bitcoin?” CoinDesk,
2014, http://www.coindesk.com/eroding-net-neutrality-hurt-bitcoin/.
[8] A. Cuthbertson, “Bitcoin now accepted by 100,000 merchants
worldwide,”
2014,
http://www.ibtimes.co.uk/bitcoin-now-accepted-by-100000-merchants-
worldwide-1486613.
International
(IBTimes),
Business
Times
[9] Double-spending, https://en.bitcoin.it/wiki/Double-spending, 2014.
[10] Download Bitcoin Core, https://bitcoin.org/en/download, 2014.
[11] Electrum Bitcoin client, https://electrum.org/, 2011.
[12] Fallback Nodes, https://en.bitcoin.it/wiki/Fallback Nodes, 2014.
[13] M. Hearn, “Exiting only port 8333: Motivation for Bitcoinj+Tor
https://lists.torproject.org/pipermail/tor-relays/2014-
client,”
March/004145.html, 2014.
[14] D. Kaminsky, “Black ops of TCP/IP,” Black Hat USA, 2011,
http://www.slideshare.net/dakami/black-ops-of-tcpip-2011-black-hat-
usa-2011.
[15] P. Koshy, D. Koshy, and P. McDaniel, “An analysis of anonymity
in bitcoin using P2P network trafﬁc,” in Proceedings of Financial
Cryptography and Data Security (FC’14). Springer, 2014.
[16] P. Manils, C. Abdelberi, S. L. Blond, M. A. Kˆaafar, C. Castelluccia,
A. Legout, and W. Dabbous, “Compromising Tor anonymity exploiting
P2P information leakage,” CoRR, vol. abs/1004.1461, 2010.
[17] S. Meiklejohn, M. Pomarole, G. Jordan, K. Levchenko, D. McCoy,
G. M. Voelker, and S. Savage, “A ﬁstful of Bitcoins: Characterizing
payments among men with no names,” in Proceedings of the 2013
Conference on Internet Measurement Conference (IMC’13). ACM,
2013.
[18] S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash system,” 2009,
http://www. bitcoin.org/bitcoin.pdf.
[19] OnionCat:
An
https://www.onioncat.org/about-onioncat/, 2014.
Anonymous
VPN-Adapter,
[20] D. Ron and A. Shamir, “Quantitative analysis of the full Bitcoin
transaction graph,” in Proceedings of Financial Cryptography and Data
Security (FC’13). Springer, 2013.
[21] Terremark vCloud Express, http://vcloudexpress.terremark.com/pricing.aspx,
2014.
[22] F. Thill,
“Hidden Service Tracking Detection and Bandwidth
Cheating in Tor Anonymity Network. Master Thesis,” 2014,
https://www.cryptolux.org/images/b/bc/.
[23] Tor FAQ, https://www.torproject.org/docs/faq.html.en#TBBFlash, 2014.
[24] Tor
security advisory: “relay early” trafﬁc conﬁrmation attack,
https://blog.torproject.org/blog/tor-security-advisory-relay-early-trafﬁc-
conﬁrmation-attack, 2014.
[25] Torsocks:
use
socks-friendly
applications
with
Tor,
https://code.google.com/p/torsocks/, 2014.
24We implemented this countermeasure and submitted the corresponding
patch.
132132
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:08:31 UTC from IEEE Xplore.  Restrictions apply. 
APPENDIX A
LIST OF REACHABLE BITCOIN ONIONS
These techniques are known to the bitcoin community and
described in e.g. [9].
In this Appendix we list 39 Bitcoin onion addresses which
we found to be reachable in August 2014 and 46 onion
addresses reachable in November 2014. In order to get this
list we queried reachable for the time of the experiments
Bitcoin peers by sending four GETADDR messages to each
peer. A Bitcoin peer can reply to such message by sending
back 23% of its addresses database but not more than 2500
addresses. A peer can store 20,480 addresses at most which
means that sending 4 GETADDR messages is not enough to
extract the complete peer’s database. However we expect that
there is a big overlap between the databases of different peers.
Some of the discovered reachable onion addresses begin or end
with meaningful text like: BTCNET, BITCOIN and belong to
Bitcoin developers, pools or services.
2fvnnvj2hiljjwck.onion:8333
2zdgmicx7obtivug.onion:8333
3crtkleibhn6qak4.onion:14135
3lxko7l4245bxhex.onion:8333
4crhf372poejlc44.onion:8333
5ghqw4wj6hpgfvdg.onion:8333
5k4vwyy5stro33fb.onion:8333
6fp3i7f2pbie7w7t.onion:8333
7iyfdkr72hgtdjoh.onion:8333
b6fr7dlbu2kpiysf.onion:8333
bitcoin625tzsusi.onion:8333
bitcoinostk4e4re.onion:8333
btcdatxubbzaw4tj.onion:8333
btcnet3utgzyz2bf.onion:8333
czsbwh4pq4mh3izl.onion:8333
dqretelgl3kjtzei.onion:8333
e3tn727fywnioxrc.onion:8333
evolynhit7shzeet.onion:8333
gb5ypqt63du3wfhn.onion:8333
hkxy4jpeniuwouiv.onion:8333
it2pj4f7657g3rhi.onion:8333
jq57qrkvvyi4a3o2.onion:8333
kjy2eqzk4zwi5zd3.onion:8333
mtzcz5knzjmuclnx.onion:8333
nns4r54x3lfbrkq5.onion:8333
nzsicg2ksmsrxwyz.onion:8333
pqosrh6wfaucet32.onion:8333
pt2awtcs2ulm75ig.onion:8333
pxl7ytsd2aiydadi.onion:8333
qsxhkpvbmt6akrov.onion:8333
syix2554lvyjluzw.onion:8333
t2vapymuu6z55s4d.onion:8333
td7tgof3imei3fm6.onion:8333
tfu4kqfhsw5slqp2.onion:8333
thfsmmn2jbitcoin.onion:8333
xdnigz4qn5dbbw2t.onion:8333
xij5qyrbosw2pzjm.onion:8333
zqq6yxxxb7or36br.onion:8333
zy3kdqowmrb7xm7h.onion:8333
TABLE III.
BITCOIN ONIONS, ONLINE IN AUGUST 2014
2xylerfjgat6kf3s.onion:8333
2zdgmicx7obtivug.onion:8333
3ffk7iumtx3cegbi.onion:8333
3lxko7l4245bxhex.onion:8333
4crhf372poejlc44.onion:8333
5k4vwyy5stro33fb.onion:8333
6fizop6wctokuxyk.onion:8333
6fp3i7f2pbie7w7t.onion:8333
7g7j54btiaxhtsiy.onion:8333
7pkm6urc5hlgwlyc.onion:8333
b2ykuvob44fn36wo.onion:8333
b6fr7dlbu2kpiysf.onion:8333
bitcoinostk4e4re.onion:8333
bk5ejfe56xakvtkk.onion:8333
btc4xysqsf3mmab4.onion:8333
btcnet3utgzyz2bf.onion:8333
by4ec3pkia7s7wy2.onion:8333
dioq2yg3l5ptgpge.onion:8333
dqretelgl3kjtzei.onion:8333
drp4pvejybx2ejdr.onion:8333
e3tn727fywnioxrc.onion:8333
evolynhit7shzeet.onion:8333
gb5ypqt63du3wfhn.onion:8333
h2vlpudzphzqxutd.onion:8333
hkxy4jpeniuwouiv.onion:8333
iksneq25weneygcj.onion:8333
k22qrck6cetfj655.onion:8333
kjy2eqzk4zwi5zd3.onion:8333
lazsruhzupsgpvwm.onion:8333
lfmwsd65ltykrp74.onion:8333
luruc27g24y7ewwi.onion:8333
pqosrh6wfaucet32.onion:8333
pt2awtcs2ulm75ig.onion:8333
pxl7ytsd2aiydadi.onion:8333
qsntokcdbwzmb2i5.onion:8333
sbow7bnje2f4gcvt.onion:8333
td7tgof3imei3fm6.onion:8333
tfu4kqfhsw5slqp2.onion:8333
thfsmmn2jbitcoin.onion:8333
ukronionufi6qhtl.onion:8333
vqpye2k5rcqvj5mq.onion:8333
wc5nztpe26jrjmoo.onion:8333
xudkoztdfrsuyyou.onion:8333
z3isvv4llrmv57lh.onion:8333
zc6fabqhrjwdle3b.onion:8333
zy3kdqowmrb7xm7h.onion:8333
TABLE IV.
BITCOIN ONIONS, ONLINE IN NOVEMBER 2014
APPENDIX B
DOUBLE-SPENDING
In this section we describe three techniques which an
attacker can use to try to carry out a double spend attack.
A. Race attack (0-conﬁrmation attack)
The ﬁrst method assumes that a merchant accepts a pay-
ment immediately upon receipt of the corresponding transac-
tion (i.e. he does not wait until this transactions is included
into a block) and gives away the product to the client. In such
case a malicious client can communicate one transaction (with
the payment) to the merchant and a different transaction which
spends the same inputs to the rest of the network. This will
result in that only the second transaction will be included by
miners into the new block, and thus accepted by the network
while the ﬁrst transaction (i.e. the one which the merchant
received) will ﬁnally be rejected by the network.
The attack is successful only if the attacker manages
to deliver the second transaction to miners before the ﬁrst
transaction is broadcasted to the network by the merchant.
In case the attacker controls merchant’s connections to the
network (as in Bitcoin over Tor attack described in this paper),
it is much easier for the attacker to succeed. The common
use-case for this attack would be when it is unlikely that a
client would wait for 10-minutes conﬁrmation before taking
his purchase and go.
B. 1-block conﬁrmation attack25
The target of the second attack is a service which allows
one to make a deposit (in Bitcoins) by sending it
in the
corresponding transaction and withdraw the deposited Bitcoins
back as soon as the transaction is included into a block. The
service should use different coins for the withdrawal than the
ones that were just received for the deposit.
An attacker creates a transaction which makes a large
deposit (e.g. 50 BTC) to the service and adds it to a block
that she is currently mining. The transaction is kept private.
When the attacker ﬁnds a valid block she does not broadcast
it immediately, but instead waits until someone else mines an-
other block. Once it happens, the attacker sends his block to the
service. If the attacker’s block arrives ﬁrst, the service accepts
the deposit transaction which will have one conﬁrmation. At
the same time the rest of the network accepts the other block 26.
The attacker immediately request a withdrawal, and the service
generates a transaction sending the large amount of coins to
the attacker. Since the rest of the network is working on a
different blockchain fork, the attacker’s deposit will soon be
invalidated while the withdrawal will be considered valid.
The attack only succeeds if the attacker manages to deliver
his block to the service ﬁrst while the rest of the network (or
more speciﬁcally the majority of miners) accepts a different
block. The success is much more likely if the attacker controls
the service’s network connections.
25This attack was described by user Vector76 in a Bitcoin forum post.
26The attacker also double-spends the inputs from the deposit transaction.
The network (since it did not receive the attacker’s block) will accept it as
valid and work to include it in the next block.
133133
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:08:31 UTC from IEEE Xplore.  Restrictions apply. 
C. Finney attack (block withholding)
The third attack similarly to the Race attack assumes that
a merchant accept a payment upon receipt of the unconﬁrmed
transaction. A malicious miner generates a transaction in which
he sends bitcoins to himself and includes it to the block he is
working on. The transaction is kept private.
When the block is found, the miner spends the same coins
somewhere else and immediately after that releases the block.
As the result, the network accepts the block and considers the
transaction to the merchant as invalid.
134134
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:08:31 UTC from IEEE Xplore.  Restrictions apply.