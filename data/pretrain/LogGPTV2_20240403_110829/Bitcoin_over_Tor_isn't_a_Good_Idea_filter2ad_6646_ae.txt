### VIII. COUNTERMEasures

These attacks are highly effective due to a feature in Bitcoin that allows for the easy banning of Tor Exit nodes by arbitrary Bitcoin peers, and due to the ease of user fingerprinting via "address cookies." Here are some potential countermeasures:

1. **Relax Reputation-Based DoS Protection:**
   Each Bitcoin peer could implement a random variable that decides whether to enable or disable the DoS protection mechanism with a 50% probability. This would limit the attacker's ability to perform a DoS attack on more than half of the network, while also preventing the complete ban of any relays or VPNs from all Bitcoin peers.

2. **Encrypt and Authenticate Bitcoin Traffic:**
   Encrypting and authenticating Bitcoin traffic would prevent even opportunistic man-in-the-middle (MITM) attacks. This is particularly important if a user inadvertently connects through a malicious Exit relay.

3. **Run "Tor-Aware" Bitcoin Peers:**
   A set of "Tor-aware" Bitcoin peers could be maintained, which regularly download the Tor consensus and ensure that DoS countermeasures are not applied to servers listed in the Tor consensus. K. Atlas [1] implemented a similar countermeasure, which maintains a historical record of Tor exit nodes used to connect to the Bitcoin network.

4. **Maintain and Distribute a Safe List of Onion Addresses:**
   Bitcoin developers can maintain and distribute a safe and stable list of onion addresses. Users who wish to remain anonymous should choose at least one address from this list. Currently, there is a short and outdated list of Bitcoin fallback onion addresses [12]. Another recommendation is for users to run two Bitcoin nodes—one over Tor and one without—and compare their blockchains and unconfirmed transactions to prevent the creation of a virtual reality for Tor-only users.

### Countermeasures Against Fingerprinting Attacks

Several countermeasures can be employed to mitigate fingerprinting attacks:

1. **Proof-of-Work for GETADDR Messages:**
   Bitcoin peers can request proof-of-work computation for each sent GETADDR message, making it computationally expensive for an attacker to query each client.

2. **Ignore GETADDR Requests on Outbound Connections:**
   According to the Bitcoin core source code, clients send GETADDR messages only when establishing outbound connections. Ignoring these requests on outbound connections will not change the usual operation of the Bitcoin networking protocol but will prevent attackers from requesting fingerprints.

3. **Remove Cached Address Database:**
   An immediate countermeasure would be to remove the cached address database file before each session and use only trusted hidden services.

### References

[1] K. Atlas, “Historical record of Tor exit nodes used to connect to the Bitcoin,” http://www.openbitcoinprivacyproject.org/torban/www/, 2014.
[2] A. Biryukov, D. Khovratovich, and I. Pustogarov, “Deanonymisation of clients in Bitcoin P2P network,” CoRR, vol. abs/1405.7418, 2014.
[3] A. Biryukov, I. Pustogarov, and R.-P. Weinmann, “Trawling for tor hidden services: Detection, measurement, deanonymization,” in Proceedings of IEEE Symposium on Security and Privacy (SP’13). IEEE Computer Society, 2013.
[4] Bitcoin Wiki, https://en.bitcoin.it/wiki/, 2014.
[5] BitcoinJ implementation – a Java implementation of the Bitcoin protocol, https://github.com/bitcoinj/bitcoinj, 2014.
[6] Bitnodes, https://getaddr.bitnodes.io/, 2014.
[7] D. Bradbury, “Could eroding net neutrality hurt bitcoin?” CoinDesk, 2014, http://www.coindesk.com/eroding-net-neutrality-hurt-bitcoin/.
[8] A. Cuthbertson, “Bitcoin now accepted by 100,000 merchants worldwide,” International Business Times (IBTimes), 2014, http://www.ibtimes.co.uk/bitcoin-now-accepted-by-100000-merchants-worldwide-1486613.
[9] Double-spending, https://en.bitcoin.it/wiki/Double-spending, 2014.
[10] Download Bitcoin Core, https://bitcoin.org/en/download, 2014.
[11] Electrum Bitcoin client, https://electrum.org/, 2011.
[12] Fallback Nodes, https://en.bitcoin.it/wiki/Fallback_Nodes, 2014.
[13] M. Hearn, “Exiting only port 8333: Motivation for Bitcoinj+Tor client,” https://lists.torproject.org/pipermail/tor-relays/2014-March/004145.html, 2014.
[14] D. Kaminsky, “Black ops of TCP/IP,” Black Hat USA, 2011, http://www.slideshare.net/dakami/black-ops-of-tcpip-2011-black-hat-usa-2011.
[15] P. Koshy, D. Koshy, and P. McDaniel, “An analysis of anonymity in bitcoin using P2P network traffic,” in Proceedings of Financial Cryptography and Data Security (FC’14). Springer, 2014.
[16] P. Manils, C. Abdelberi, S. L. Blond, M. A. Kˆaafar, C. Castelluccia, A. Legout, and W. Dabbous, “Compromising Tor anonymity exploiting P2P information leakage,” CoRR, vol. abs/1004.1461, 2010.
[17] S. Meiklejohn, M. Pomarole, G. Jordan, K. Levchenko, D. McCoy, G. M. Voelker, and S. Savage, “A fistful of Bitcoins: Characterizing payments among men with no names,” in Proceedings of the 2013 Conference on Internet Measurement Conference (IMC’13). ACM, 2013.
[18] S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash system,” 2009, http://www.bitcoin.org/bitcoin.pdf.
[19] OnionCat: An Anonymous VPN-Adapter, https://www.onioncat.org/about-onioncat/, 2014.
[20] D. Ron and A. Shamir, “Quantitative analysis of the full Bitcoin transaction graph,” in Proceedings of Financial Cryptography and Data Security (FC’13). Springer, 2013.
[21] Terremark vCloud Express, http://vcloudexpress.terremark.com/pricing.aspx, 2014.
[22] F. Thill, “Hidden Service Tracking Detection and Bandwidth Cheating in Tor Anonymity Network. Master Thesis,” 2014, https://www.cryptolux.org/images/b/bc/.
[23] Tor FAQ, https://www.torproject.org/docs/faq.html.en#TBBFlash, 2014.
[24] Tor security advisory: “relay early” traffic confirmation attack, https://blog.torproject.org/blog/tor-security-advisory-relay-early-traffic-confirmation-attack, 2014.
[25] Torsocks: Use socks-friendly applications with Tor, https://code.google.com/p/torsocks/, 2014.

### Appendix A: List of Reachable Bitcoin Onions

In this appendix, we list 39 Bitcoin onion addresses that were reachable in August 2014 and 46 onion addresses that were reachable in November 2014. To compile this list, we queried reachable Bitcoin peers by sending four GETADDR messages to each peer. A Bitcoin peer can reply to such a message by sending back 23% of its address database, but not more than 2500 addresses. A peer can store up to 20,480 addresses, meaning that sending four GETADDR messages is not enough to extract the complete peer’s database. However, we expect a significant overlap between the databases of different peers. Some of the discovered reachable onion addresses begin or end with meaningful text like: BTCNET, BITCOIN, and belong to Bitcoin developers, pools, or services.

**Table III: Bitcoin Onions, Online in August 2014**

- 2fvnnvj2hiljjwck.onion:8333
- 2zdgmicx7obtivug.onion:8333
- 3crtkleibhn6qak4.onion:14135
- 3lxko7l4245bxhex.onion:8333
- 4crhf372poejlc44.onion:8333
- 5ghqw4wj6hpgfvdg.onion:8333
- 5k4vwyy5stro33fb.onion:8333
- 6fp3i7f2pbie7w7t.onion:8333
- 7iyfdkr72hgtdjoh.onion:8333
- b6fr7dlbu2kpiysf.onion:8333
- bitcoin625tzsusi.onion:8333
- bitcoinostk4e4re.onion:8333
- btcdatxubbzaw4tj.onion:8333
- btcnet3utgzyz2bf.onion:8333
- czsbwh4pq4mh3izl.onion:8333
- dqretelgl3kjtzei.onion:8333
- e3tn727fywnioxrc.onion:8333
- evolynhit7shzeet.onion:8333
- gb5ypqt63du3wfhn.onion:8333
- hkxy4jpeniuwouiv.onion:8333
- it2pj4f7657g3rhi.onion:8333
- jq57qrkvvyi4a3o2.onion:8333
- kjy2eqzk4zwi5zd3.onion:8333
- mtzcz5knzjmuclnx.onion:8333
- nns4r54x3lfbrkq5.onion:8333
- nzsicg2ksmsrxwyz.onion:8333
- pqosrh6wfaucet32.onion:8333
- pt2awtcs2ulm75ig.onion:8333
- pxl7ytsd2aiydadi.onion:8333
- qsxhkpvbmt6akrov.onion:8333
- syix2554lvyjluzw.onion:8333
- t2vapymuu6z55s4d.onion:8333
- td7tgof3imei3fm6.onion:8333
- tfu4kqfhsw5slqp2.onion:8333
- thfsmmn2jbitcoin.onion:8333
- xdnigz4qn5dbbw2t.onion:8333
- xij5qyrbosw2pzjm.onion:8333
- zqq6yxxxb7or36br.onion:8333
- zy3kdqowmrb7xm7h.onion:8333

**Table IV: Bitcoin Onions, Online in November 2014**

- 2xylerfjgat6kf3s.onion:8333
- 2zdgmicx7obtivug.onion:8333
- 3ffk7iumtx3cegbi.onion:8333
- 3lxko7l4245bxhex.onion:8333
- 4crhf372poejlc44.onion:8333
- 5k4vwyy5stro33fb.onion:8333
- 6fizop6wctokuxyk.onion:8333
- 6fp3i7f2pbie7w7t.onion:8333
- 7g7j54btiaxhtsiy.onion:8333
- 7pkm6urc5hlgwlyc.onion:8333
- b2ykuvob44fn36wo.onion:8333
- b6fr7dlbu2kpiysf.onion:8333
- bitcoinostk4e4re.onion:8333
- bk5ejfe56xakvtkk.onion:8333
- btc4xysqsf3mmab4.onion:8333
- btcnet3utgzyz2bf.onion:8333
- by4ec3pkia7s7wy2.onion:8333
- dioq2yg3l5ptgpge.onion:8333
- dqretelgl3kjtzei.onion:8333
- drp4pvejybx2ejdr.onion:8333
- e3tn727fywnioxrc.onion:8333
- evolynhit7shzeet.onion:8333
- gb5ypqt63du3wfhn.onion:8333
- h2vlpudzphzqxutd.onion:8333
- hkxy4jpeniuwouiv.onion:8333
- iksneq25weneygcj.onion:8333
- k22qrck6cetfj655.onion:8333
- kjy2eqzk4zwi5zd3.onion:8333
- lazsruhzupsgpvwm.onion:8333
- lfmwsd65ltykrp74.onion:8333
- luruc27g24y7ewwi.onion:8333
- pqosrh6wfaucet32.onion:8333
- pt2awtcs2ulm75ig.onion:8333
- pxl7ytsd2aiydadi.onion:8333
- qsntokcdbwzmb2i5.onion:8333
- sbow7bnje2f4gcvt.onion:8333
- td7tgof3imei3fm6.onion:8333
- tfu4kqfhsw5slqp2.onion:8333
- thfsmmn2jbitcoin.onion:8333
- ukronionufi6qhtl.onion:8333
- vqpye2k5rcqvj5mq.onion:8333
- wc5nztpe26jrjmoo.onion:8333
- xudkoztdfrsuyyou.onion:8333
- z3isvv4llrmv57lh.onion:8333
- zc6fabqhrjwdle3b.onion:8333
- zy3kdqowmrb7xm7h.onion:8333

### Appendix B: Double-Spending Techniques

In this section, we describe three techniques that an attacker can use to carry out a double-spend attack.

#### A. Race Attack (0-Confirmation Attack)

The first method assumes that a merchant accepts a payment immediately upon receipt of the corresponding transaction (i.e., without waiting for it to be included in a block) and gives away the product to the client. In such a case, a malicious client can communicate one transaction (with the payment) to the merchant and a different transaction that spends the same inputs to the rest of the network. As a result, only the second transaction will be included by miners into the new block and thus accepted by the network, while the first transaction (received by the merchant) will be rejected.

The attack is successful only if the attacker manages to deliver the second transaction to miners before the first transaction is broadcasted to the network by the merchant. If the attacker controls the merchant’s connections to the network (as in the Bitcoin over Tor attack described in this paper), it is much easier for the attacker to succeed. This attack is common in scenarios where it is unlikely that a client would wait for a 10-minute confirmation before taking their purchase and leaving.

#### B. 1-Block Confirmation Attack

The target of the second attack is a service that allows one to make a deposit (in Bitcoins) by sending it in a corresponding transaction and withdraw the deposited Bitcoins as soon as the transaction is included in a block. The service should use different coins for the withdrawal than the ones received for the deposit.

An attacker creates a transaction that makes a large deposit (e.g., 50 BTC) to the service and adds it to a block they are currently mining. The transaction is kept private. When the attacker finds a valid block, they do not broadcast it immediately but instead wait until someone else mines another block. Once that happens, the attacker sends their block to the service. If the attacker’s block arrives first, the service accepts the deposit transaction, which will have one confirmation. At the same time, the rest of the network accepts the other block. The attacker immediately requests a withdrawal, and the service generates a transaction sending the large amount of coins to the attacker. Since the rest of the network is working on a different blockchain fork, the attacker’s deposit will soon be invalidated, while the withdrawal will be considered valid.

The attack only succeeds if the attacker manages to deliver their block to the service first while the rest of the network (or more specifically, the majority of miners) accepts a different block. The success is much more likely if the attacker controls the service’s network connections.

#### C. Finney Attack (Block Withholding)

The third attack, similar to the Race attack, assumes that a merchant accepts a payment upon receipt of an unconfirmed transaction. A malicious miner generates a transaction in which they send bitcoins to themselves and includes it in the block they are working on. The transaction is kept private.

When the block is found, the miner spends the same coins somewhere else and immediately releases the block. As a result, the network accepts the block and considers the transaction to the merchant as invalid.