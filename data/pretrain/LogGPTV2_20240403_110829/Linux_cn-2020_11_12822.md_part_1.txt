---
author: Seth Kenlon
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 1
  likes: 0
  sharetimes: 0
  viewnum: 5075
date: '2020-11-14 10:48:00'
editorchoice: false
excerpt: 阅读本文并下载我们的免费备忘单，去使用开源的数据库吧。
fromurl: https://opensource.com/article/20/10/mariadb-mysql-cheat-sheet
id: 12822
islctt: false
largepic: /data/attachment/album/202011/14/065421hq1qocmk3rf4npq1.jpg
permalink: /article-12822-1.html
pic: /data/attachment/album/202011/14/065421hq1qocmk3rf4npq1.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 阅读本文并下载我们的免费备忘单，去使用开源的数据库吧。
tags:
- MariaDB
- MySQL
thumb: false
title: 备忘单：提升你的 MariaDB 和 MySQL 数据库技能
titlepic: true
translator: lxbwolf
updated: '2020-11-14 10:48:00'
---
> 
> 阅读本文并下载我们的免费备忘单，去使用开源的数据库吧。
> 
> 
> 
![](/data/attachment/album/202011/14/065421hq1qocmk3rf4npq1.jpg)
当你写一个程序或配置一个服务时，你最终都要持久化存储信息。有时候，你只需要一个 INI 或者 [YAML](https://www.redhat.com/sysadmin/yaml-tips) 配置文件就够了。而有时候，一个自定义格式的 XML 或者 JSON 或其他类似的文件会更好。
但也有时候你需要校验输入、快速查询信息、关联数据、通常还要熟练地处理你的用户的请求。这就是设计数据库的目的，而 [MariaDB](https://mariadb.org/)（由 [MySQL](https://www.mysql.com/) 的原始开发人员开发的一个分支） 是一个极佳的选项。在本文中我使用的是 MariaDB，但这些信息同样适用于 MySQL。
通过编程语言与数据库进行交互是很普遍的。正因如此，出现了大量 Java、Python、Lua、PHP、Ruby、C++ 和其他语言的 [SQL](https://en.wikipedia.org/wiki/SQL) 库。然而，在使用这些库之前，理解数据库引擎做了什么以及为什么选择数据库是重要的对我们会很有帮助。本文介绍 MariaDB 和 `mysql` 命令来帮助你熟悉数据库处理数据的基本原理。
如果你还没有安装 MariaDB，请查阅我的文章 [在 Linux 上安装 MariaDB](https://opensource.com/article/20/10/install-mariadb-and-mysql-linux)。如果你没有使用 Linux，请参照 MariaDB [下载页面](https://mariadb.org/download)提供的指导方法。
### 与 MariaDB 交互
你可以使用 `mysql` 命令与 MariaDB 进行交互。首先使用子命令 `ping` 确认你的服务是运行着的，在提示后输入密码：
```
$ mysqladmin -u root -p ping
Enter password:
mysqld is alive
```
为了易于读者理解，打开一个交互式的 MariaDB 会话：
```
$ mysql -u root -p
Enter password:
Welcome to the MariaDB monitor.
Commands end with ; or \g.
[...]
Type 'help;' or '\h' for help.
Type '\c' to clear the current input statement.
MariaDB [(none)]>
```
你现在是在一个 MariaDB 子 shell 中，提示符是 MariaDB 提示符。普通的 Bash 命令在这里不能使用，只能用 MariaDB 命令。输入 `help` （或 `?`）查看命令列表。这些是你的 MariaDB shell 的管理命令，使用它们可以定制你的 shell，但它们不属于 SQL 语言。
### 学习 SQL 基本知识
[结构化查询语言](https://publications.opengroup.org/c449)是基于它们的能力定义的：一种通过有规则且一致的语法来查询数据库中的内容以得到有用的结果的方法。SQL 看起来像是普通的英文语句，有一点点生硬。例如，如果你登入数据库服务器，想查看有哪些库，输入 `SHOW DATABASES;` 并回车就能看到结果。
SQL 命令以分号作为结尾。如果你忘记输入分号，MariaDB 会认为你是想在下一行继续输入你的查询命令，在下一行你可以继续输入命令也可以输入分号结束命令。
```
MariaDB [(NONE)]> SHOW DATABASES;
+--------------------+
| DATABASE           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| test               |
+--------------------+
4 ROWS IN SET (0.000 sec)
```
上面的例子显示当前有四个数据库：`information_schema`、`mysql`、`performance_schema` 和 `test`。你必须指定 MariaDB 使用哪个库，才能对该库使用查询语句。指定数据库的命令是 `use`。当你选择了一个库后，MariaDB 提示框会切换为选择的库。
```
MariaDB [(NONE)]> USE test;
MariaDB [(test)]>
```
#### 显示数据库的表
数据库里有*表*，与电子表格类似：有一系列的行（在数据库中称为*记录*）和列。一个行和一个列唯一确定一个*字段*。
查看一个数据库中可用的表（可以理解为多表单电子表格中的一页），使用 SQL 关键字 `SHOW`：
```
MariaDB [(test)]> SHOW TABLES;
empty SET
```
`test` 数据库是空的，所以使用 `use` 命令切换到 `mysql` 数据库：
```
MariaDB [(test)]> USE mysql;
MariaDB [(mysql)]> SHOW TABLES;
+---------------------------+
| Tables_in_mysql           |
+---------------------------+
| column_stats              |
| columns_priv              |
| db                        |
[...]
| time_zone_transition_type |
| transaction_registry      |
| USER                      |
+---------------------------+
31 ROWS IN SET (0.000 sec)
```
这个数据库中有很多表！`mysql` 数据库是这个 MariaDB 实例的系统管理数据库。它里面包含重要数据，比如用来管理数据库权限的用户结构。这个数据库很重要，你不需要经常直接与它交互，但是使用 SQL 脚本来操作它却很常见。当你学习 MariaDB 时理解 `mysql` 数据库很有用，因为它有助于说明一些基本的 SQL 命令。
#### 检查一个表
这个实例的 `mysql` 数据库的最后一个表名为 `USER`。这个表包含了可以访问这个数据库的用户。当前里面只有一个 root 用户，但是你可以添加不同权限的用户，赋予它们查看、更新或创建数据的权限。你可以查看一个表的列首来了解一个 MariaDB 用户的所有属性：
```
> SHOW COLUMNS IN USER;
MariaDB [mysql]> SHOW COLUMNS IN USER;
+-------------+---------------+------+-----+----------+
| FIELD       | TYPE          | NULL | KEY | DEFAULT  |
+-------------+---------------+------+-----+----------+
| Host        | CHAR(60)      | NO   | PRI |          |
| USER        | CHAR(80)      | NO   | PRI |          |
| Password    | CHAR(41)      | NO   |     |          |
| Select_priv | enum('N','Y') | NO   |     | N        |
| Insert_priv | enum('N','Y') | NO   |     | N        |
| Update_priv | enum('N','Y') | NO   |     | N        |
| Delete_priv | enum('N','Y') | NO   |     | N        |
| Create_priv | enum('N','Y') | NO   |     | N        |
| Drop_priv   | enum('N','Y') | NO   |     | N        |
[...]
47 ROWS IN SET (0.001 sec)
```
#### 创建一个新的用户
不论你是否需要一个普通的账号来管理数据库或者为计算机配置数据库（例如安装 WordPress、Drupal 或 Joomla时），在 MariaDB 中多建一个用户账号是很普遍的。你可以通过向 `mysql` 数据库的 `USER` 表中添加一个用户或使用 SQL 关键字 `CREATE` 来提示 MariaDB 创建一个 MariaDB 用户。使用 `CREATE` 来创建新用户会默认执行一些有用的方法，因此你不需要手动生成所有的信息：
```
> CREATE USER 'tux'@'localhost' IDENTIFIED BY 'really_secure_password';
```
#### 查看表的字段
你可以使用 `SELECT` 关键字来查看数据库表的字段和值。这本例中，你创建了一个名为 `tux` 的用户，因此查询 `USER` 表中的列：
```
> SELECT USER,host FROM USER;
+------+------------+
| USER | host       |
+------+------------+
| root | localhost  |
[...]
| tux  | localhost  |
+------+------------+
7 ROWS IN SET (0.000 sec)
```
#### 为一个用户赋予权限
通过查看 `USER` 表列出的信息，你可以看到用户的状态。例如，新用户 `tux` 对这个数据库没有任何权限。使用 `WHERE` 语句你可以只查 `tux` 那一条记录。
```
> SELECT USER,select_priv,insert_priv,update_priv FROM USER WHERE USER='tux';
+------+-------------+-------------+-------------+
| USER | select_priv | insert_priv | update_priv |
+------+-------------+-------------+-------------+
| tux  | N           | N           | N           |
+------+-------------+-------------+-------------+
```