10:
11:
12: end for
13: if (the lifespans of any two log ﬁles in L overlap) then
14:
15: end if
16: return AUDIT_PASS
return AUDIT_FAIL
Figure 4: Pseudo-code for GlobalSanityCheck
of all indexes, database pages, and the transaction log, using the
ordinary integrity-checking utilities included with a commercial
DBMS. This includes checking the slot pointers on each page, tuples
sort order across the pages, tuple threading order, and other stored
metadata (the magic number on the page, tuple count on the page,
etc.). The auditor must also check that all indexes are set up properly
and point to the appropriate tuples; otherwise, a tuple can be hidden
from queries by suitable manipulations of the indexes.
3.4 Handling untamper attacks
In TLOW, we provide two techniques for handling untamper
attacks. First, we use the hash-page-on-read technique introduced
in [16]. For guaranteed detection of untamper attacks, the auditor
must take additional steps when processing a hash-page-on-read or
page split record on the log. She reconstructs the content that should
have been on that page at that point (e.g., each tuple’s timestamp
or transaction ID, tuple values that are subsequently overwritten or
aborted), and computes its hash. We can use the same auditor code
for this purpose as LDA does [16], so we do not repeat it here.
Unfortunately, hash-page-on-read is expensive: it adds roughly
10% to TPC-C run time, and requires an additional day of audit time
per year. The second technique is probabilistic detection: if audits
can be made signiﬁcantly faster, then it is feasible for companies
to run frequent audits. Note that the probabilistic aspect is simply
how often audits are run; it is not about an audit’s ability to detect
tampering (each audit will always detect any tampering at the time
of audit). For this, we propose a fast new audit technique in Section
5. The key idea is that any untamper attack in progress at audit
time will be detected by a tuple completeness check, without hash-
page-on-read. Frequent audits, e.g., a part of a nightly backup, will
detect most untamper attacks, as most of them needs to persist for a
signiﬁcant amount of time to be effective.
Untampering attacks are unlikely in some records retention appli-
cations. For example, consider birth records, which in the US are
maintained by low-level clerks in each county. When an underage
athlete wants to compete in the Olympics, or an overage athlete
wants to compete in a youth tournament, the clerk may be bribed to
change the records. It is unlikely that the records will be untampered
SanityCheck (L, DBold, DBnew)
1: for all (L ∈ L) do
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
if (L has two COMMIT records for the same transaction)
then
return AUDIT_FAIL
end if
if (L has a COMMIT timestamp before the create time or
after the last write time of L) then
return AUDIT_FAIL
end if
if (COMMIT timestamps in L do not appear chronologically)
then
return AUDIT_FAIL
end if
if (lastM odif icationT ime(L) > r/2+createT ime(L))
then
return AUDIT_FAIL
end if
if (Any COMMIT record timestamp in L is more than r/2
time units earlier than the create time of L, or more than r/2
time units later than the last write time of L) then
return AUDIT_FAIL
15:
end if
16:
17: end for
18: if ((The signature on DBold is not from the correct auditor) OR
(The signature on DBold does not match its contents) ) then
return AUDIT_FAIL
19:
20: end if
{Check if the DB ﬁnal state is clean, by using DBMS’s native
integrity checker. Verify integrity of data page, indexes and
other metadata, and if crash recovery has been run properly.}
21: if (the native DBMS integrity check on the database fails) then
22:
23: end if
24: return AUDIT_PASS
return AUDIT_FAIL
Figure 5: Pseudo-code for SanityCheck
before the next audit, as reporters may subsequently check the ath-
lete’s age. For applications like these, the cost of perfect detection
of untampering is probably not worth its societal beneﬁts.
4. TLOW CORRECTNESS
Intuitively, two transaction-time databases are equivalent if they
contain the same tuple versions, up to shufﬂing of timestamps. We
must formalize this notion of “shufﬂing”.
Deﬁnition The timestamp normal form of a transaction-time DB
is created by replacing all occurrences of the smallest timestamp in
the entire DB by 0, the next smallest by 1, etc.
The order of timestamps created during normalization gives the
serialization order of the transactions that originally created the DB.
Deﬁnition Two transaction-time DBs are equivalent if after times-
tamp normalization, they contain the same tuples.
There can be several different serial orders of a set of transactions
that all result in the same ﬁnal state. However, for our purposes it
sufﬁces to consider a single serial order.
Deﬁnition Suppose that a database is created by running a set of
transactions that commit in the order T1, . . . , Tn. The resulting
database instance is correct if and only if it is equivalent to one
obtained by running transactions T1, . . . , Tn in serial order on an
initially empty database.
243
actions}
HashTransactionLog (L)
1: {Initialize list of current, committed, and previously seen trans-
2: T xn ← {}; Seen ← {}; Committed ← {}
3: log_hash ← 0
4: for all (L ∈ L) do
5:
6:
7:
8:
9:
txnID ← get_txn_ID(record)
if ((txnID ∈ Committed) OR
get_timeStamp(record) < last_audit_time))
then
{For each log ﬁle, scan records sequentially}
for all (record ∈ L) do
if (the record lists a tuple to be inserted) then
end if
if (txnID /∈ Seen) then
Seen ← Seen ∪ txnID
T xn[txnID] ← new T XN_ST RU CT ()
T xn[txnID].add(record)
end if
if (record is a COMMIT record) then
Committed ← Committed ∪ txnID
txnHash ← Hash_T XN (T xn[txnID])
log_hash ← ADD_HASH(log_hash, txnHash)
continue
end if
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24: end for
25: return log_hash
end if
end for
Figure 6: Pseudo-code for HashTransactionLog
THEOREM 4.1. If an audit succeeds and no untampering has
occurred since the previous audit, then the current database state
is equivalent to a correct ﬁnal state.
The proof of this theorem is quite complex, due to the many subtle
potential attacks.
PROOF. First, we prove the theorem for the case where no previ-
ous audits have taken place. The goal is to show that, if:
1. no untamper attacks have happened,
2. the organization provides transaction integrity,
3. auditor knows when each DBMS crash and shutdown oc-
curred, and when normal transaction processing started or
resumed, and the audit succeeds;
then the ﬁnal DB state is equivalent to a correct ﬁnal state. We prove
this in two steps.
A. The auditor extracts the serialization order correctly. First,
we show that the no-crash version of the logs produced in line 3
of the Audit routine could have produced the ﬁnal DB state. Since
the audit succeeded, all the auditor’s log sanity checks must have
succeeded. The trusted information about crash / shutdown and start
/ restart times allows her to distinguish between L and R ﬁles, and
discard any L ﬁles that Mala may have created before the DBMS
restarted. The auditor’s sanity checks have eliminated the possibility
that any pair of L or R ﬁles have overlapping life spans, or that any
L ﬁles were written to after a DBMS crash/shutdown occurred and
before the subsequent recovery and restart were completed. The
checks also ensure Mala cannot have appended any records to L
ﬁles after a crash or shutdown. Because of transaction integrity, we
conclude that regardless of any crashes/shutdowns, the L ﬁles do
correctly show committed transactions and corresponding tuples.
Further, the DBMS’s log paradigm will have ensured that all
tuples inserted by committed transactions were already on the log
before the transaction committed, and before any subsequent crash
or shutdown. Thus L ﬁles produced by a run with crashes or shut-
downs are indistinguishable from those produced by a run where all
active uncommitted transactions aborted at the time of each crash or
shutdown, with one exception: the run with crashes or shutdowns
may have started new L ﬁles more frequently than one without them.
As that difference does not affect our arguments, in the remainder
of the proof, we do not consider crashes or shutdowns.
The auditor’s sanity checks ensure that each transaction has at
most one COMMIT record, and the timestamps of such records ap-
pear in strictly increasing order in L. So the serial order T1, . . . , Tn
must be the one used to construct the correct ﬁnal state.
B. Hash over new tuples in L is equal to the hash over tuples
inserted by T1, . . . , Tn. The audit has succeeded, so the auditor’s
hash of the new tuples in L produces the same value as a hash of the
current DB state. We must prove that the auditor’s hash of the new
tuples in L produces the same value as a hash of the tuples obtained
by running T1, . . . , Tn serially on an initially empty database. If
these two hashes are the same, then by the properties of the hash
function, the current DB state is equivalent to a correct ﬁnal state.
Suppose that the two hashes disagree. Then there must be one
tuple in the correct ﬁnal state that is not included in the auditor’s
hash over new tuples in L, or vice versa. Let t be the ﬁrst such tuple,
which was written by transaction Ti, and no transaction Tj, where
j < i in the serialization order, wrote such a tuple. The tuple t may
or may not be in the correct ﬁnal state. We prove by contradiction
that neither is possible; hence the two hashes must be the same.
B.1. Troublesome tuple t is in the correct ﬁnal state. First we
consider the case where the extra tuple t is in the correct ﬁnal state,
but is not included in the auditor’s hash over new tuples in L. Con-
sider what happens when t’s transaction Ti (which we will call T
for simplicity) runs.
B.1.1. Why T must have read and written correct values, in-
cluding t. We trust the TLOW DBMS to carry out its functions
in its usual manner, including concurrency control. Since T is the
ﬁrst transaction in serialization order to exhibit behavior that differs
from that needed to obtain the correct ﬁnal state, and no untamper
attacks occur, all the transactions that committed before T must
have written the correct ﬁnal values for the tuples that they inserted.
Otherwise the audit would have failed, due to a mismatch between
the tampered ﬁnal state and the new tuples in L.
Further, because the DBMS uses its concurrency control func-
tions correctly, it would have aborted T if T had read any dirty
values written by aborted transactions. Since T was not aborted,
this problem did not occur. Also, if T had read any tampered values,
then the audit would have failed, because those values were not
untampered before the audit began. Thus T must have read correct
values when it ran. More precisely, T must have read the same
values as if T1, . . . , Ti = T were run one by one against an initially
empty database, with no attacks at all. Since T reads the same
values in both cases, it will write the same ﬁnal values in both cases.
(We assume that T does not involve calls to the outside environment,
e.g., to read time, other than to obtain the COMMIT timestamp.)