 一般被用于控制列或者值的被查询安全
 查询列
 条件筛选行
 加密列
 防范视图攻击
 http://blog.163.com/digoal@126/blog/static/163877040201361031431669/
安全标签
 结合SELinux使用
 http://www.postgresql.org/docs/9.3/static/sepgsql.html
 http://www.postgresql.org/docs/9.3/static/sql-security-label.html
防范SQL注入
 http://blog.163.com/digoal@126/blog/static/163877040201342184212205/
 http://blog.163.com/digoal@126/blog/static/1638770402012910234402/
 程序端控制
 1. 不要使用simple协议, 因为simple协议允许一次提交多SQL.
 例如 :
 statement = "SELECT * FROM users WHERE name = '" + userName + "';"
 这个SQL, 可以在userName这里注入攻击.
 a';DROP TABLE users; SELECT * FROM userinfo WHERE 't' = 't
 那么整条sql就变成 :
 SELECT * FROM users WHERE name = 'a'; DROP TABLE users; SELECT * FROM userinfo WHERE 't' = 't';
 使用绑定变量避免以上问题
 2. 程序端控制, 例如检测变量类型, 以及过滤. 以下攻击只要检查变量类型, 拒绝请求就不会有问题.
 statement := "SELECT * FROM userinfo WHERE id = " + a_variable + ";"
 如果a_variable 不做任何判断, 传入 1;DROP TABLE users
 那么SQL变成 :
 SELECT * FROM userinfo WHERE id=1;DROP TABLE users;
给数据库打补丁
 方法1, 下载对应版本的小版本更新, 同时根据版本release note升级软件.
 http://www.postgresql.org/ftp/source/
 如果还安装了第三方插件, 第三方插件重新安装一下.
 升级完后使用新版本的软件重启数据库.
 方法2, 对于未释放小版本的情况, 想更新GIT提交的补丁的话.
 去git找到对应的大版本
 例如
 http://git.postgresql.org/gitweb/?p=postgresql.git;a=shortlog;h=refs/heads/REL9_3_STABLE
 下载对应的snapshot重新安装
 如果还安装了第三方插件, 第三方插件重新安装一下.
 升级完后使用新版本的软件重启数据库.
 方法3, 下载commit fest中已经程提交状态的补丁, 使用diff匹配到当前已经安装的源码中.
 重新安装.
 注意先备份一下原来安装的源码目录.
 http://blog.163.com/digoal@126/blog/static/163877040201252884053930/
练习
 PostgreSQL安全简介, 认证, 基于角色的权限管理, 事件触发器
 审计日志
 对象触发器: 权限限制, 数据追踪审计
 约束
 视图
 物化视图
 安全标签, se-postgres
 如何防范SQL注入
高可用,负载均衡
 了解高可用架构, PostgreSQL高可用的实现方法, 挑选几种演示讲解
 了解负载均衡的应用场景, PG的实现方法, 挑选几种演示讲解
高可用解决方案介绍
 共享存储, 依赖存储本身的高可用
 块设备复制(开源的drbd, 或者商业存储复制的解决方案)
 数据库流复制
共享存储
 共享存储(数据文件以及表空间的文件必须共享存储).
 同一时间点只能有1个主机启动数据库, 其他主机可以挂载文件系统(仅限于集群文件系统).
 浮动IP跟随起数据库的主机一起.
 通过检测心跳判断异常, fence掉老的活动主机, 在候选机器上启动数据库.
 主要的弊端:
 受制于存储可用性 APP APP
浮动IP
FailOver
FailBack
DB-Host1 DB-Hostn
PostgreSQL
$PGDATA
pg_tblspc
块设备复制
 mirroring a whole block device via an assigned network. DRBD can be understood as network based raid-1.
数据库流复制+心跳+自动切换
 利用数据库流复制建立HA, 为了防止脑分裂, 需要仲裁和FENCE设备. FENCE设备即IPMI管理的设备
 注意
 某些不写WAL的数据切换后数据将丢失(例如UNLOGGED TABLE(这个就算不切换也会丢失), HASH index(重建即可))
APP APP
浮动IP
WALsender WALreceiver
同步或异步
DB-Host1 DB-Hostn
FailOver
FailBack
PostgreSQL PostgreSQL
$PGDATA $PGDATA
pg_tblspc pg_tblspc
仲裁
数据库流复制+心跳+自动切换
 心跳+切换的流程
 判断主库是否健康 -> 不健康则退出
 判断本机是否为STANDBY角色 -> 不是STANDBY角色则退出
 连接到主库执行一次更新, 5秒后到本地STANBY节点检查这次更新是否已经生效, 用于判断standby是否正常. -> 不正常则退出
 循环
 执行心跳检测函数
 (更新检测时间点, 检查各个表空间读写是否正常)
 心跳检测函数超时或者异常则判断仲裁节点是否正常, 仲裁节点不正常则跳出循环
 仲裁节点正常的情况下从仲裁节点连到主库执行心跳函数, 正常则跳出循环
 如果返回结果也不正常的话, 判断STANDBY延迟是否在允许范围内.
 开始计数
 计数超过10则发生切换(fence主库, 激活备库, 切换VIP)
 详见
 https://raw.github.com/digoal/sky_postgresql_cluster/master/sky_pg_clusterd.sh
数据库流复制+心跳+自动切换
 心跳检查函数
 CREATE OR REPLACE FUNCTION sky_pg_cluster.cluster_keepalive_test()
 RETURNS void
 LANGUAGE plpgsql
 STRICT
 AS $function$
 declare
 v_spcname text;
 v_spcoid oid;
 v_nspname name := 'sky_pg_cluster';
 begin
 if ( pg_is_in_recovery() ) then
 raise notice 'this is standby node.';
 return;
 end if;
 update cluster_status set last_alive=now();
数据库流复制+心跳+自动切换
 FOR v_spcname,v_spcoid IN
 select spcname,oid from pg_tablespace where
 oid <> (select dattablespace from pg_database where datname=current_database())
 and spcname <> 'pg_global'
 LOOP
 perform 1 from pg_class where
 reltablespace=v_spcoid
 and relname='t_'||v_spcname
 and relkind='r'
 and relnamespace=(select oid from pg_namespace where nspname=v_nspname)
 limit 1;
 if not found then
 execute 'create table '||v_nspname||'.t_'||v_spcname||' (crt_time timestamp) tablespace '||v_spcname;
 execute 'insert into '||v_nspname||'.t_'||v_spcname||' values ('''||now()||''')';
 else
 execute 'update '||v_nspname||'.t_'||v_spcname||' set crt_time='||''''||now()||'''';
 end if;
 perform pg_stat_file(pg_relation_filepath(v_nspname||'.t_'||v_spcname));
数据库流复制+心跳+自动切换
 END LOOP;
 select spcname into v_spcname from pg_tablespace where
 oid = (select dattablespace from pg_database where datname=current_database());
 perform 1 from pg_class where
 reltablespace=0
 and relname='t_'||v_spcname
 and relkind='r'
 and relnamespace=(select oid from pg_namespace where nspname=v_nspname)
 limit 1;
 if not found then
 execute 'create table '||v_nspname||'.t_'||v_spcname||' (crt_time timestamp) tablespace '||v_spcname;
 execute 'insert into '||v_nspname||'.t_'||v_spcname||' values ('''||now()||''')';
 else
 execute 'update '||v_nspname||'.t_'||v_spcname||' set crt_time='||''''||now()||'''';
 end if;
 perform pg_stat_file(pg_relation_filepath(v_nspname||'.t_'||v_spcname));
 end;
 $function$
数据库流复制集群搭建演示
 fence设备配置,
 DELL 172.16.3.39 fence: 172.16.3.191 cluster/Cluster321
 HP 172.16.3.33 fence: 172.16.3.193 cluster/Cluster321
 虚拟IP : 172.16.3.38
 仲裁 : 172.16.3.150:11921
 详细步骤参考
 https://github.com/digoal/sky_postgresql_cluster/blob/master/INSTALL.txt
PostgreSQL 负载均衡
 pgpool-II
 pgpool-II作为连接池和中间件应用, 后端接流复制环境可以实现对应用透明的读写分离的负载均衡
 pl/proxy
 首先pl/proxy是个比较小巧的插件, 利用函数封装代替直接执行SQL语句.
 pl/proxy后端接流复制环境同样可以实现对应用透明的读写分离的负载均衡
 写函数(RUN ON 0;)
 读函数(RUN ON ANY;) 或者 (RUN ON int4; int4为一个返回1-N随机值的函数).
 演示
练习
 了解高可用架构, PostgreSQL高可用的实现方法, 挑选几种演示讲解
 了解负载均衡的应用场景, PG的实现方法, 挑选几种演示讲解
数据库规划
 根据业务形态, 合理规划PostgreSQL数据库硬件和操作系统.
 如何建模以及压力测试.
数据库规划
 基本原则
 逻辑划分规则
 数据完全没有交集的业务建议放在不同的数据库中.
 有数据交集的业务建议放在同数据库, 使用不同的schema区分.
 存储划分规则
 建议使用独立的块设备的目录
 $PGDATA, pg_xlog, stats_temp_directory, pg_log, 表空间, 归档, 备份
 定时任务的规则
 数据库服务端的定时任如pgagent或crontab, 需要有执行步骤的输出, 有监控.
 监控的规划
 实时的监控用以迅速发现数据库运行中的问题
 历史数据的快照存储可以用于输出趋势报告或选取时间段的报告
 BenchMark
 对数据量的预估, 初步决定存储容量需求, 以及建模测试数据量需求.
 对可能成为数据库瓶颈的SQL的预估(从请求量和运算量两个角度来评估)
 SQL审核(数据库侧的优化, 对于需要修改SQL或建议优化业务逻辑的情况反馈给开发人员)
 建模和压力测试, 输出benchmark.
数据库规划
 规划输出(数据库生命周期管理) :
 硬件配置(例如CPU, 内存, 存储, 网卡等)
 操作系统配置(如内核参数, 防火墙, 服务开关等)
 存储划分, 文件系统初始化
 PostgreSQL编译配置安装, 第三方插件安装.
 数据库postgresql.conf, pg_hba.conf的配置
 表空间以及其他数据库目录对应的OS目录
 定时任务
 备份和归档
 集群的配置
 监控部署
 数据库巡检文档
 SQL提交(包括建用户, 建库, 表空间, 表, 索引的DDL; 表,索引表空间指定; 表级别的存储参数; 初始化数据等等)
 BenchMark
数据库规划
 分布式环境数据库系统的规划的基本原则
 扩展性和收缩性
 分布列的选择
 减少跨库的交互, 例如全局小表多库同步
 一致性备份的需求
建模和压力测试举例
 建模和优化案例
 http://blog.163.com/digoal@126/blog/static/163877040201221382150858/
 http://blog.163.com/digoal@126/blog/static/163877040201221333411196/
 pgbench工具的使用
 http://www.postgresql.org/docs/9.3/static/pgbench.html
练习
 根据业务形态, 合理规划PostgreSQL数据库硬件和操作系统
 如何建模以及压力测试.