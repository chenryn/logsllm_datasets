             set_foot (remainder, remainder_size);
             check_malloced_chunk (av, victim, nb);
             void *p = chunk2mem (victim);
             alloc_perturb (p, bytes);
             return p;
          }
          /* remove from unsorted list */
          unsorted_chunks (av)->bk = bck;
          bck->fd = unsorted_chunks (av);
          /* Take now instead of binning if exact fit */
          if (size == nb)
          {
              set_inuse_bit_at_offset (victim, size);
              if (av != &main_arena)
                 set_non_main_arena (victim);
              check_malloced_chunk (av, victim, nb);
              void *p = chunk2mem (victim);
              alloc_perturb (p, bytes);
              return p;
           }
           /* place chunk in bin */
           if (in_smallbin_range (size))
           {
               victim_index = smallbin_index (size);
               bck = bin_at (av, victim_index);
               fwd = bck->fd;
           }
           else
           {
               victim_index = largebin_index (size);
               bck = bin_at (av, victim_index);
               fwd = bck->fd;
               /* maintain large bins in sorted order */
               if (fwd != bck)
               {
                   /* Or with inuse bit to speed comparisons */
                   size |= PREV_INUSE;
                   /* if smaller than smallest, bypass loop below */
                   assert (chunk_main_arena (bck->bk));
                   if ((unsigned long) (size)
                  bk))
                   {
                       fwd = bck;
                       bck = bck->bk;
                       victim->fd_nextsize = fwd->fd;
                       victim->bk_nextsize = fwd->fd->bk_nextsize;
                       fwd->fd->bk_nextsize = victim->bk_nextsize->fd_nextsize = victim;
                   }
                   else
                   {
                       assert (chunk_main_arena (fwd));
                       while ((unsigned long) size fd_nextsize;
                   assert (chunk_main_arena (fwd));
                       }
                       if ((unsigned long) size
                    == (unsigned long) chunksize_nomask (fwd))
                           /* Always insert in the second position.  */
                           fwd = fwd->fd;
                       else
                       {
                           victim->fd_nextsize = fwd;
                           victim->bk_nextsize = fwd->bk_nextsize;
                           fwd->bk_nextsize = victim;
                           victim->bk_nextsize->fd_nextsize = victim;
                       }
                       bck = fwd->bk;
                    }
                }
                else
                    victim->fd_nextsize = victim->bk_nextsize = victim;
           }
           mark_bin (av, victim_index);
           victim->bk = bck;
           victim->fd = fwd;
           fwd->bk = victim;
           bck->fd = victim;
    #define MAX_ITERS       10000
           if (++iters >= MAX_ITERS)
              break;
    }
分配器会循环迭代`unsorted
bin`，如果第一个块满足一下几个条件，这个块将会被分成一个请求大小的块，和一个剩余块。剩余块将会重新被插入到`unsorted bin`当中。
  1. 请求大小在small 范围内
  2. 这是`unsorted bin`当中唯一的一块
  3. 这个块同事也是`last remainder`块
  4. 切开之后的剩余大小足够大
如果`unsorted`块的大小正好为请求大小，直接返回这个块，否则，`unsorted bin`上的迭代将会继续检查`unsorted`块的状态：
  1. 如果`unsorted`块为small范围，该块会被插入到相应的`small bin`，之后在下一个`unsorted`块中重复以上过程
  2. 否则，如果`unsorted`块是large范围，且相应的`large bin`为空(bck == fwd)，`unsorted`块将会被直接插入到相应的`large bin`中，之后在下一个块中重复以上过程
  3. 否则，如果`unsorted`块是large范围，且相应的`large bin`为非空，该块将按照大小降序插入到`large bin`当中
在所有的`unsorted`块都无法正好被当做返回值范围的时候，例如没有`unsorted`块，或者`small`块来提供请求的块时，分配器将会继续到下一步。
##### Large bin
    /*
         If a large request, scan through the chunks of current bin in
         sorted order to find smallest that fits.  Use the skip list for this.
    */
    if (!in_smallbin_range (nb))
    {
       bin = bin_at (av, idx);
       /* skip scan if empty or largest chunk is too small */
       if ((victim = first (bin)) != bin
            && (unsigned long) chunksize_nomask (victim)>= (unsigned long) (nb))
       {
            victim = victim->bk_nextsize;
            while (((unsigned long) (size = chunksize (victim)) bk_nextsize;
            /* Avoid removing the first entry for a size so that the skip
                 list does not have to be rerouted.  */
            if (victim != last (bin)
                  && chunksize_nomask (victim)== chunksize_nomask (victim->fd))
               victim = victim->fd;
             remainder_size = size - nb;
             unlink (av, victim, bck, fwd);
                  /* Exhaust */
             if (remainder_size fd;
              if (__glibc_unlikely (fwd->bk != bck))
                  {
                        errstr = "malloc(): corrupted unsorted chunks";
                        goto errout;
                  }
                  remainder->bk = bck;
                  remainder->fd = fwd;
                  bck->fd = remainder;
                  fwd->bk = remainder;
                  if (!in_smallbin_range (remainder_size))
                  {
                       remainder->fd_nextsize = NULL;
                       remainder->bk_nextsize = NULL;
                  }
                  set_head (victim, nb | PREV_INUSE |
                           (av != &main_arena ? NON_MAIN_ARENA : 0));
                  set_head (remainder, remainder_size | PREV_INUSE);
                  set_foot (remainder, remainder_size);
             }
             check_malloced_chunk (av, victim, nb);
             void *p = chunk2mem (victim);
             alloc_perturb (p, bytes);
             return p;
       }
    }
如果在`large bin`中没有`large`块或者第一个`large
bin`中`large`块的大小比请求大小要小，分配器会跳到下一步，否则分配器会尝试在当前`large bin`中找到一个块。
`large`块的搜索过程主要根据“最好适应”的原则，也就是找到最小的大小大于请求大小的块。在找到`large`块之后，将他从`large
bin`中移除，然后计算切分后的剩余大小，如果剩余大小比`MIN_SIZE`小，直接将整块作为返回值，否则将当前块气氛，并且把剩余块插入到`unsorted
bin`中。
##### top chunk 切分
    use_top:
    /*
        If large enough, split off the chunk bordering the end of memory
        (held in av->top). Note that this is in accord with the best-fit
        search rule.  In effect, av->top is treated as larger (and thus
        less well fitting) than any other available chunk since it can
        be extended to be as large as necessary (up to system
        limitations).
        We require that av->top always exists (i.e., has size >=
        MINSIZE) after initialization, so if it would otherwise be
        exhausted by current request, it is replenished. (The main
        reason for ensuring it exists is that we may need MINSIZE space
        to put in fenceposts in sysmalloc.)
    */
    victim = av->top;
    size = chunksize (victim);
    if ((unsigned long) (size) >= (unsigned long) (nb + MINSIZE))
    {
         remainder_size = size - nb;
         remainder = chunk_at_offset (victim, nb);
         av->top = remainder;
         set_head (victim, nb | PREV_INUSE |
                   (av != &main_arena ? NON_MAIN_ARENA : 0));
         set_head (remainder, remainder_size | PREV_INUSE);
         check_malloced_chunk (av, victim, nb);
         void *p = chunk2mem (victim);
         alloc_perturb (p, bytes);
         return p;
    }
如果top chunk足够大，并且以上所有过程都没办法返回一个合适的块，`top chunk`会被切分成请求大小，之后将剩余大小重置为`top
chunk`。
#### 总结
首先我们总结一下`malloc`里常用的宏：
| x86 | x86-64  
---|---|---  
SIZE_SZ | 4 | 8  
MIN_CHUNK_SIZE | 16 | 32  
MALLOC_ALIGNMENT | 8 | 16  
MALLOC_ALIGN_MASK | 7 | 15  
NBINS | 128 | 128  
NFASTBINS | 10 | 10  
NSMALLBINS | 64 | 64  
SMALLBIN_WIDTH | 8 | 16  
DEFAULT_MXFAST | 64 | 128  
MAX_FAST_SIZE | 80 | 160  
MIN_LARGE_SIZE | 512 | 1024  
在以上对于`ptmalloc`内部原理的讨论之后，我们给出一个`ptmalloc`中不同类型的`bins`是和组织和管理的总结。我们也会给出一些示例来展示一下这些`bins`的内存布局。
##### fast bin
  1. fast bin中的块由单链表管理
  2. fast bin中的块大小小于0x40
  3. 当前块下一邻接块的`P`位不会被清除
  4. 在从`fastbin`中取出块时，分配器遵循先进后出原则
    #include
    #include
    int main()
    {
        char *p1, *p2, *p3, *p4;
        p1 = malloc(0x20);
        p2 = malloc(0x20);
        p3 = malloc(0x20);
        p4 = malloc(0x20);
        free(p1);
        free(p2);
        free(p3);
        return 0;
    }