chosen DNS resolver, instead of the default resolver from
/etc/resolv.conf. We used this attack to verify the vulnera-
bility remotely without causing damage to the tested eduroam
network.
• Attack #2 in Table 3. Make dig use any ﬁle on the
radsecproxy-system as a “batch-ﬁle” (option -f), thereby
querying all lines in this ﬁle as DNS queries. Attackers
which are located on-path to the DNS resolver can apply the
second attack to read arbitrary ﬁles from the system.
Vulnerable usage of printf: The (double) use of printf
in naptr-eduroam.sh allows the attacker to inject arbitrary
strings into the dynamically generated conﬁguration ﬁle via
a format-string attack. The reason is that printf removes the
escaping done by dig over the user input, which is given
in format speciﬁer argument. This allows the attacker to
access radsecproxy’s conﬁguration parser and subsequent
confserver_cb function, which can be used to make the pro-
cess read any ﬁle on the ﬁleystem using include /path/file.
• Attack #3 in Table 3. We evaluated a ‘resource star-
vation’ attack using /dev/zero as an input, and caused an
inﬁnite 100% CPU usage loop in the conﬁguration ﬁle parser.
• Attack #4 in Table 3. In this attack we demonstrate
how the attacker can manipulate the generated dynamic con-
ﬁguration ﬁle, specifying a TLS certiﬁcate CommonName
(CN) regular expression. This expression ispassed to the libc’s
regcomp() function, which on many implementations of libc
(e.g., glibc) has known, unﬁxed vulnerabilities2 which can be
used, e.g., to crash radsecproxy via stack consumption.
• Attack #5 in Table 3. When the attacker provides a func-
tional server conﬁguration it can also override parameters of
the dynamically generated server entry, most importantly the
2E.g., [25] can still be exploited on current Ubuntu and used in attack #4.
Figure 4: Radius Dynamic Peer discovery.
for servers which do not support these features themselves.
Radsecproxy uses a shell-script-based method for dynami-
cally updating the conﬁguration to support the DNS lookups
needed for Dynamic Peer discovery. The script is invoked
with the domain component of the user’s network access iden-
tiﬁer (i.e., example.com in Figure 4) as its ﬁrst argument by the
radsecproxy server and outputs a new dynamic radsecproxy
conﬁguration for the user’s realm. Example output of this
script (called naptr-eduroam.sh) when invoked from shell is
below:
$ ./naptr-eduroam.sh example.com
server dynamic_radsec.example.com {
host radius1.example.com:2083
host radius2.example.com:2083
type TLS
}
3.3.1 Radius Dynamic Peer Discovery
In this section we provide a detailed explanation of the
radius dynamic peer discovery process illustrated in Figure 4,
as well as how an adversary can abuse the mechanism to
trigger queries. First, a client (alice) connects to a wireless
access point at the campus of somewhere.in (the domain of
that university), providing authentication material including
her network access identiﬁer (NAI) alice@example.com. The
access point then forwards the authentication request to the
roaming authentication server at somewhere.in. From alice’s
NAI this server defers that alice’s authentication request needs
to be routed to the home authentication server of example.com.
To ﬁnd the home authentication server, it issues DNS queries
for example.com IN NAPTR? followed by an SRV query of the
domains listed in the NAPTR record. Finally, the roaming au-
thentication server forwards the authentication request to the
home authentication server at radius.example.com, which
answers the request. The attacker sets up his own domain
attacker.com and conﬁgures his nameserver to answer with
one of the attack payloads from Table 3. The attacker pro-
vides a username PI:EMAIL when connecting. This
leads the roaming authentication server to send DNS requests
via its resolver to the attacker’s nameserver. Depending on
the payload, a corresponding attack is launched against the
roaming authentication server.
USENIX Association
30th USENIX Security Symposium    3171
Variable
in script
$HOST
$HOST
$SRVHOST SRV
Record
type
NAPTR \@6.6.6.6.
NAPTR -f/some/file.
Malicious record data (dig-escaped)
$SRVHOST SRV
$SRVHOST SRV
asd\\n\\tinclude\\t/dev/zero\\n.
as.d\\n\\tmatchcertificateattribute\\t
CN:/\(.*+++++++++++++++++++\(\\\\w+\)\)
/im\\n\\ttype\\ttls\\n}\\n%%p.
6.6.6.6\\n\\ttype\\tTCP\\n
\\tsecret\\tsomething\\n}\\n%%p.
#
1
2
3
4
5
Induced behaviour
change dig DNS resolver
pass /some/file as dig batch-ﬁle
read /dev/zero as conﬁg ﬁle
Outcome
veriﬁcation of vulnerability
disclose contents of /some/file
100% CPU utilisation
provide malicious regex to regcomp()
radsecproxy crash
provide own RADIUS server
and disable TLS-authentication
unauthorised network access
Table 3: Radsecproxy exploits. The exploits were successfully veriﬁed in the lab and against large operators of Eduroam.
type parameter. When changing the type parameter to TCP
and providing a known secret, the attacker can make rad-
secproxy connect to his own radius server despite not having
a trusted TLS certiﬁcate from the eduroam-PKI. Attack #5
can be used to allow or deny access or log any authentication
attempt for users using the attacker’s domain as a realm. This
enables the attacker to use any eduroam network effectively
unauthenticated. In our evaluations we exploited this attack to
even successfully inject malicious authentication server of the
attacker for third-party domains, which enables the attacker
to log usernames and/or hashed credentials when the wire-
less clients fail to verify the TLS-certiﬁcate provided in the
protected-EAP tunnel to the attacker’s RADIUS server.
3.3.3 Evaluation of the Attacks
All listed exploits and outcomes were veriﬁed in the lab
using the latest version of radsecproxy. We also validated
real-world applicability of the attacks on different eduroam
networks (of two research institutions and university) by ex-
ploiting the vulnerabilities listed in this section. We launched
exploit #1 against large operators of eduroam infrastructure.
This exploit causes no harm but demonstrates that the infras-
tructure is vulnerable and uses the naptr-eduroam.sh script.
3.4 LDAP Peer Discovery
To locate the appropriate LDAP server dynamically, an
LDAP client supporting dynamic peer discovery extracts
the domain components, re-creates the domain name (e.g.,
example.com) and queries the DNS SRV-record for _ldap.
_tcp.example.com. This query is triggered either at applica-
tion startup or when a user tries to connect to the LDAP-using
service. In addition to SRV lookups, LDAP also supports the
URL-based description of search operations [26]. For exam-
ple, a URL for a search operation for john’s user account en-
try may look like ldap://ldap.example.com:389/uid=john,
gid=users,dc=example,dc=com. This instructs the LDAP
client to connect to the LDAP server at ldap.example.com,
port 389 and look for an entry with Distinguished Names (DN)
uid=john,gid=users,dc=example,dc=com. The attacker trig-
gers queries by attempting to connect to the LDAP-using
service.
3.4.1 LDAP Injection Attacks
When the SRV lookup is used in combination with LDAP
URLs, it opens an attack vector which is caused by the SRV
Function ConnectURL(ldapurl: URL) is
if ldapurl.host == None then
domain = extractDC(ldapurl.path)
hostname,port = lookupSRV(domain)
ldapurl = new URL("ldap://" + hostname + ":" + port + "/" +
ldapurl.path)
ConnectURL(ldapurl)
else
end
end
ip = lookupA(ldapurl.host)
// Proceed with connection ...
Algorithm 1: LDAP SRV lookup.
lookup handling of LDAP client implementations: the LDAP
URL is checked for a hostname, and if it is not present, the
hostname is looked up using SRV requests and pasted into the
existing LDAP URL. An attacker controlling the SRV record
can inject arbitrary characters into the URL, changing the
URL path component and thereby the requested resource’s
DN or ﬁlter expression.
Algorithm 1 shows the LDAP peer discovery process as im-
plemented by OpenJDK. The function ConnectURL is called
with an LDAP URL like ldap:///uid=john,gid=users,dc=
example,dc=com and parsed into a URL. The URL is then
tested whether it includes a hostname, and if not the domain
component (dc=) parts of the LDAP distinguished name (DN)
are used to construct the the query domain for dynamic peer
discovery. In our case this is the domain example.com, so
the process continues by requesting that domains LDAP SRV
record at _ldap._tcp.example.com. The hostname and port
included in this SRV record are now used to construct a new
LDAP URL by concatenating the hostname and port with
the part of the path of the old LDAP URL. Finally, the new
URL is used to call ConnectURL again, this time taking the
other path and connection to the LDAP server at the speciﬁed
hostname.
We show how the user input concatenated to an LDAP
query can change the meaning of the query by injecting con-
trol characters like braces, similar to SQL injections. Our
LDAP injection uses the contents of the SRV record for dy-
namic peer discovery (instead of direct user input) and leads
to information disclosure, or authentication as a different user.
• Attack #1: Privileges escalation. When executing Al-
gorithm 1 with the following URL ldap:///uid=john,gid=
users,dc=example,dc=com and the SRV record set to
_ldap._tcp.example.com IN SRV ldap.example.com/
uid=admin,gid=users,dc=example,dc=com????.
3172    30th USENIX Security Symposium
USENIX Association
the resulting URL becomes ldap://ldap.example.com/uid=
admin,gid=users,dc=example,dc=com????./uid=john,gid=
users,dc=example,dc=com, which means the client will
search for user admin instead of john, enabling john to
execute actions with admin privileges. This attack enables
to circumvent security mechanisms like LDAP over TLS
(ldaps://) because it changes the information in the URL
before it is transmitted over the TLS secured channel.
• Attack #2: Denial-of-Service via malformed records.
The LDAP SRV lookup function calls itself recursively after
looking-up an SRV record, see Algorithm 1. We manipulate
an SRV record so that the resulting URL does not contain
a hostname-component, which then causes an inﬁnite recur-
sion and crashes the ‘LDAP-using’ application with a stack
overﬂow.
3.4.2 Evaluation of the Attacks
We tested attack #1 against two LDAP library implemen-
tations (ldapsearch and opejdk’s javax.naming). We ﬁnd that
both applications use a potentially vulnerable LDAP peer
discovery algorithm, which just concatenates the SRV record
with the rest of the URL and do not check the contents of
the SRV record for sanity. However, in both implementa-
tions, the DN (e.g., uid=john,gid=users) from the LDAP
URL is actually ignored and must be given in an additional
function call or parameter in order to allow execution of mul-
tiple search queries after the connection to the server has
been established. We veriﬁed attack #2 experimentally using
the record we constructed, and evaluated it against openjdk’s
11.0.6 javax.naming API:
_ldap._tcp.attacker.com. IN SRV /dc=attacker,dc=com.
Triggering a query. A query for the LDAP SRV record is
triggered when a new connection to the LDAP server is cre-
ated, i.e., when a user triggers an action which requires an
LDAP-lookup such as logging into a web application which
uses LDAP for user management. However, to execute the
attack, the attacker must either be able to (1) control the full
LDAP DN or (2) modify the SRV record on the network via
a MitM position. In our evaluation we tested the implemen-
tation of LDAP middleware/libraries, which do not restrict
how the LDAP DN is set. However, typical applications will
restrict control over the LDAP DN to the components rele-
vant for the user3, such that control over the necessary dc=
components is not available to the attacker.
3.5 Domain-Based Anti-Spam Validation
Sender Policy Framework (SPF) [27] is a domain-based
mechanism to prevent forgery of SMTP envelope headers.
To trigger an SPF DNS query, the attacker needs to send an
Email to an SPF-supporting Email server.
We provide a detailed explanation of the Email SPF vali-
dation process shown in Figure 5 in the case where an in-
3https://docs.spring.io/spring-ldap/docs/current/
reference/
Figure 5: SPF resolution example.
coming Email is rejected: ﬁrst, an non-authorised Email trans-
fer agent at mail.spam.com (Spammer MTA) connects to the
mail server at the receiver domain (mail.receiver.com) and
tries to send a Mail coming from PI:EMAIL to a
mailbox at receiver.com using SMTP. To check if the Spam-
mer MTA is authorised to send mail from sender.com, the
Receiver MTA will query the DNS for the SPF records for
sender.com. In this case the record indicates that no one is
authorised to send mail from that domain (option -all) and
that a detailed explanation why the mail is rejected is stored
at exp.sender.com. After the receiver MTA has received this
record it will decide to reject the Email and fetch the expla-
nation from exp.sender.com via DNS to include it together
with the rejection message. Finally, is parses the rejection
message, replaces any included macros and sends it back to
the spammer MTA notifying it that the mail was rejected and
why.
3.5.1 Attacks Against Checks of SPF Records
• Attack #1: Injection against policyd-spf. The default
implementation, e.g., Ubuntu [28] used by postﬁx, for check-
ing SPF records is based on a separately running daemon
called policyd-spf. This daemon is listening at a unix socket
for responses to determine whether an Email should be re-
jected or not according to the SPF records [29]. The interface
to this daemon is line based, the client (postﬁx) provides
properties of the received Email line-by-line and submits the
request with an empty line, as shown below. In this example
policyd-spf session, the client’s request lines are marked with
‘>‘, deamon response lines with ‘ request=smtpd_access_policy
> protocol_state=RCPT
> client_address=192.168.234.20
> sender=PI:EMAIL
> recipient=vagrant@postfix
...
> policy_context=
The server (policyd-spf) will answer with a single line
providing information on how to proceed. We construct a
malformed SPF record using the SPF exp= parameter. This
parameter allows to include an explanation why an Email was
rejected. We inject control characters into this client-server
interface by including them in the rejection message, speciﬁed
as a separate DNS record. The attacker can further include
USENIX Association
30th USENIX Security Symposium    3173
attacker.com TXT "v=spf1 exp=exp.attacker.com"
exp.attacker.com TXT "AAAAAA..." ; (510 times)
Figure 6: libsfp2 exploit with malicious SPF record payload.
newline characters ("\n") to create additional output lines in
the line-based connection to policyd-spf. This is interpreted as
the responses to requests asked in the future thereby changing
the SPF result for the next Email.
• Attack #2: Stack buffer overﬂow in libspf2. Libspf2 is
a library for checking SPF records for incoming Email mes-
sages for Mail Transfer Agents. Libspf2 is used by some ver-
sions of the command line utility spfquery and also directly
from SMTP server source code. Because of the complexity
of the library we used fuzz-testing with afl-fuzz against a
custom-built application calling libspf2 functions. This al-
lowed us to provide the SPF record as a ﬁle rather than via
the network to test libspf2 against potential vulnerabilities ex-
ploitable via malformed SPF records. The evaluations showed
that libspf2 is vulnerable to the malformed records attack, see
malicious SPF record payload in Figure 6. We performed at-
tacks against the spfquery command line utility using the vul-
nerable record set which resulted in ‘stack-smashing detected’
error and crashes, further allowing remote-code-execution.
This attack exploits a stack-buffer overﬂow while parsing the
SPF explanation macro.
3.5.2 Evaluation of the Attacks
We evaluated attack #1 against postﬁx using policyd-spf-
perl, and were able to inject additional lines of output to the
unix socket, showing that policyd-spf-perl does not verify
the contents of the SPF explanation record. In contrast to
other attacks in this work, attack #2 cannot be prevented by
validating the DNS records since the malicious SPF record
presents a theoretically valid SPF explanation message.
3.6 Administrative Tools
In the attacks that we presented until now, the applications
implemented the DNS lookup themselves, not by using an
API like gethostbyname(), where the behaviour is standard-
ised and data validation is performed by the systems’ stub
resolvers. In this section we present vulnearbilities in applica-
tions which do not implement DNS lookups themselves but
use the system stub resolver to do so. First, we analyse differ-
ent stub resolver implementations in Section 3.6.1 and then
show vulnerabilities in applications using these stub-resolvers
in Section 3.6.2.
3.6.1 DNS Record Processing in stub resolvers.
Libc is the C standard library for C programming language,
speciﬁed in ANSI C and is a subset of C library POSIX speci-
ﬁcation. There are different implementations of the standard
C system library. We experimentally tested, as well as anal-
ysed the source code of, all the major implementations of the
C system library and except two found them to be vulnera-
ble, see Table 5. We explain our analysis of the DNS record
processing on two implementations: glibc4 and on uClibc5.
We selected those implementations as examples because they
represent two distinct methodologies that we observed in
processing DNS records. The other tested implementations
are similar to uClibc. We demonstrate the processing on the
gethostbyname() library function as an example; the same
applies to other calls.
After a DNS response has been received by glibc (resp
uClibc) library, it is ﬁrst checked against the length ﬁeld,
DNS transaction identiﬁer and the return code (e.g., OK, NX-
DOMAIN). The libraries then go through the resource record
sets in the answer section and process each record. For each
domain name in a DNS record the following steps are done,
as shown with our example domain name 036123...6d00 in
Figure 7: (1) domain name compression is removed; (2) do-