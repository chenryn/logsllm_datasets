### 3. Fault Tolerant Planning

In this section, we explore how to tolerate design and implementation faults in planner models and heuristics, particularly in hierarchical autonomous systems with a centralized planner at the decisional layer.

#### 3.1. Principles

In addition to testing, diversity is the only known approach to enhance trust in the behavior of critical systems concerning development faults. This principle is applied in software components of the Airbus A320 and hardware components of the Boeing B777. The general idea is to execute diversified variants of the planner sequentially or concurrently, similar to recovery blocks [22] and distributed recovery blocks [13]. Diversity is achieved by using different algorithms, variable domains, and parameters in the models and heuristics of the planner variants.

##### 3.1.1. Detection

Implementing error detection for decisional mechanisms, especially planners, is challenging due to the variety of valid plans that can be quite dissimilar. Therefore, comparing redundantly produced plans for error detection is not feasible. Instead, we propose four complementary error detection mechanisms: a watchdog timer, a plan analyzer, a plan failure detector, and an online goal checker.

- **Watchdog Timer**: Detects when the search process is too slow or when a critical failure such as a deadlock occurs. Timing errors can result from faults in the planner model, its search engine, or the ineffectiveness of the search heuristics.
- **Plan Analyzer**: An acceptance test (i.e., an online oracle) that verifies the produced plan satisfies a set of constraints and properties. These constraints and properties are derived from the system specification and domain expertise but must be diverse from the planner model. This mechanism detects errors due to faults in the planner model, heuristics, or the planner itself.
- **Plan Failure Detector**: A classical mechanism used in robotics for execution control. It detects failures of actions within the plan, which may be due to unresolvable adverse environmental situations or errors in the plan due to faults in knowledge or the search engine. When an action fails, the search engine attempts to repair the plan; if unsuccessful, it raises a plan failure.
- **Online Goal Checker**: Verifies whether goals are reached during plan execution. Goals are declared failed only after all actions in the plan have been executed. This requires maintaining an internal representation of the system state and the goals reached.

##### 3.1.2. Recovery

We propose two recovery mechanisms, both using different planners based on diverse knowledge.

- **Sequential Execution**: Planners are executed one after another. Each time an error is detected, the system switches to another planner until all goals are reached or all planners fail consecutively. Once all planners have been used and there are still unsatisfied goals, the system returns to the initial set of planners. This algorithm uses the four detection mechanisms: watchdog timer, plan analyzer, plan failure detector, and online goal checker.
  
  - **Rationale**: Reusing previously failed planners makes sense because (a) a perfectly correct plan can fail during execution due to adverse environmental conditions, and (b) some planners, even faulty, can still be effective for certain settings if the fault-inducing situation has disappeared.
  - **Planner Selection**: The choice and order of planners are arbitrary in this example. However, application-specific knowledge about the most appropriate planner for the current situation or recently observed failure rates can guide the selection.

- **Concurrent Execution**: Planners are executed simultaneously. Key differences from the sequential approach include:
  - The plan request message is sent to every planning candidate.
  - When a correct plan is found, other planners are requested to stop.
  - A watchdog timeout indicates that all planners have failed.
  
  - **Planner Order**: The first planner to obtain a plan is chosen, but this could lead to repeated selection of a faulty but fast planner. Additional mechanisms, such as excluding the previously selected planner, can mitigate this issue.

##### 3.1.3. Coordination

From a dependability perspective, fault-tolerance mechanisms should be as independent as possible from the decisional layer, i.e., the planners. We propose a middleware-level component called FTplan (Fault-Tolerant Planner Coordinator) to handle detection and recovery mechanisms and the necessary services for their implementation.

- **FTplan's Role**: Integrates fault tolerance mechanisms into the robot architecture, ensuring communication, synchronization, and coordination between error detection mechanisms and redundant planners.
- **Error Propagation Prevention**: FTplan avoids relying on information from potentially faulty planners. For example, the watchdog timer is implemented using operating system timing primitives, and action failure detection is performed at the execution control layer.
- **Online Goal Checker**: Maintains its own system state representation based on information gathered from lower layers, checking it against the set of goals for the current mission.
- **Planner Management**: FTplan communicates with planners for plan requests, updates their goals and system state representations, and controls their lifecycle, starting new instances or stopping them if they take too long to produce a plan.
- **Simplicity and Verification**: FTplan is simpler than the planners it coordinates, allowing for reliable verification and testing to ensure it is fault-free.

#### 3.2. Implementation

We present the implementation of the proposed mechanisms, introducing the target architecture and providing details about the FTplan component.

##### 3.2.1. LAAS Architecture

The LAAS architecture, presented in [1] with recent modifications in [14], has been successfully applied to several projects. This architecture provides a robust framework for integrating the fault-tolerant planning mechanisms discussed.

- **Target Architecture**: The LAAS architecture is designed to support the integration of fault-tolerant planning mechanisms, ensuring reliable and efficient operation in various scenarios.
- **Implementation Details**: Specific details about the FTplan component, including its integration into the LAAS architecture, will be provided in the following sections.

This structured approach ensures that the text is clear, coherent, and professional, making it easier to understand and follow.