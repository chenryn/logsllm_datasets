6:
7:
8:
9:
10:
11: end for
12: return OAM, OSM
end if
end if
Figure 10: Object Clustering algorithm.
The Group Mapping and Object Clustering phases do
not ﬁnd disjoint sets of misconﬁgurations. For exam-
ple, both the above misconﬁgurations were also ﬂagged
by Group Mapping. We intend to use Object Clustering
as a fallback in situations where there do not exist suit-
able reference groups to ﬂag misconﬁguration candidates
through Group Mapping.
6.2 Algorithm
We now describe the Object Clustering algorithm in de-
tail. We ﬁrst look for pairs of summary statements with
the following template:
U1 → O1 and U2 → O2 such that |U1−U2|
|U1| < 0.5,
|U2−U1|
|U1| < 0.5, and |O2|
|O1| < 0.5
Now, our deﬁnition of an object misconﬁguration is as
follows: For the two summary statements, U1 → O1 and
U2 → O2 that match the template, say |U1 − U2|/|U1|
and |U2 − U1|/|U1| are both smaller than 0.5 (a majority
of users in U1 are in U2 and vice-versa), and |O2|/|O1| is
smaller than 0.5 (O2 is less than half the size of O1). We
characterize a security misconﬁguration candidate as:
U2 − U1 MAY NOT need access to O2.
and an accessibility misconﬁguration candidate is
given as:
U1 − U2 MAY need access to O2.
Complexity: Given that there are l summary statements,
n users, and m objects, the Object Clustering algorithm
runs in O(l2(n + m)) time.
6.3 Misconﬁguration Prioritization
In the report, as in the case of Group Mapping, the Baaz
server prioritizes these misconﬁgurations using the intu-
ition that the more similar the user-sets U1 and U2, and
the smaller the size of O2, the higher the probability that
the candidate is a genuine misconﬁguration. The metric
we use is the harmonic mean:
P(misconf ig) = 0.5 ∗ (cid:16)(1 − |∆U|
|U1| ) + (1 − |O2|
|O1| )(cid:17)
Here ∆U corresponds to U2 − U1 or U1 − U2 depend-
ing on whether it is a security or an accessibility miscon-
ﬁguration.
7 System Experiences
In this section, we describe issues that impact the quality
of the misconﬁguration reports produced by Baaz, based
on our experiences in implementing and evaluating the
Baaz server and stubs for our prototype, and discuss how
we address them in our system design.
7.1 Server Design Issues
Here, we discuss our choice of reference dataset in our
deployment and how an administrator can tune report
time.
Choosing reference datasets: An administrator
needs to use domain knowledge to choose the right ref-
erence dataset for a given subject dataset. We observe
that the output reports vary depending on how rich or
rigid the reference groups are. Some reference datasets,
such as organizational group-membership relations, are
rigid and structured, and contain few reference groups,
potentially generating many misconﬁguration candidates
in the Group Mapping step, several of which may be in-
valid. This is because fewer groups will yield more ap-
proximate covers.
On the other hand, if a reference dataset contains a
large number of reference groups, such as a set of email
distribution lists, the report will contain fewer candidates
because the chances of ﬁnding exact covers increases. As
a result, the algorithm may not detect some valid mis-
conﬁgurations. An administrator can decide which refer-
ence dataset to use, based on the sensitivity of the subject
dataset, trading manual effort of validation for caution.
For example, if a subject dataset folder is marked conﬁ-
dential, the administrator may choose to compare it with
the organizational hierarchy, whereas email lists may be
a better choice for less sensitive information.
In our evaluation described in Section 8, we choose
email distribution lists as a reference dataset for two
datasets and organizational hierarchy as a reference for
one dataset, and our results verify our observations
above.
Tuning report time: Since change events trigger
Baaz’s misconﬁguration detection algorithms, the server
may generate reports even in transient states while ad-
ministrators manually change permissions. To avoid
such spurious reports, each pair of subject and refer-
ence datasets has an associated report time (Tr): Baaz
includes a candidate in its report only if it has existed for
at least Tr time. The administrator can conﬁgure Tr to be
short for subjects that store highly sensitive data, while it
can be high for less important subjects. In our deployed
prototype, we found that we could generate a report as
fast as one second after a stub reports a change, or delay
its reporting using Tr, as required.
7.2 Stub Design Issues
We identify two design issues that directly play a role in
the quality of generated reports:
Modeling access control: The system’s misconﬁgu-
ration detection can only be as good as the data the stub
provides. Access control mechanisms can be compli-
cated [20], which sometimes makes capturing complete
semantics in a stub quite hard. In our stub implemen-
tations, we have used a conservative approach towards
modeling access control: if there is ambiguity of whether
an individual or group has access to an object, we assume
that they do indeed have access. This approach catches
more security candidates albeit at the risk of increasing
the number of false alarms. Previously proposed security
monitoring systems have tackled this problem [6] using
a similar strategy.
Stub customization: Access mechanisms of different
kinds of resources will require custom stub implemen-
tations that can speciﬁcally understand the underlying
access controls. Similarly, stubs may need to be cus-
tomized to different data layouts containing group mem-
bership data. However, some stubs can be reused across
resources. For example, in our prototype, we have imple-
mented a stub that can run on any SMB-based Windows
ﬁle share. We have also implemented customized stubs
to capture organizational hierarchy and email lists within
our enterprise, both of which reside on an Active Direc-
tory server [1] (an implementation of the Lightweight Di-
rectory Access Protocol, LDAP).
Access control permissions are not necessarily binary.
For example, in a ﬁle share, “read-only” access or “full
access” are only two of a number of different access
types possible. Consequently, our stub implementations
support various modes of operation. An administrator
can choose what a “1” in the binary relation matrix cap-
tures: full access, read-only access, any kind of access,
etc.
8 Evaluation
In this section, we ﬁrst describe the implementation of
Baaz system components (Section 8.1). Next, we de-
scribe the results we achieve through our prototype de-
ployment (Section 8.2), followed by a description of the
collection, analysis, and validation of misconﬁguration
reports from two other datasets (Section 8.3). Finally,
we present performance evaluation microbenchmarks for
demonstrating the scalability (Section 8.4) of the miscon-
ﬁguration detection algorithms.
8.1 Implementation
We have implemented the Baaz server in C# using 2707
lines of code. We have also implemented Baaz stubs for
an SMB-based Windows ﬁle server, for organizational
groups in Active Directory [1], and for email distribu-
tion lists also stored in Active Directory. The Windows
ﬁle server stub is entirely event-based: it traps changes in
access control through the FileSystemWatcher [8] library
and reports these changes immediately to the server. Cur-
rently, we only trap changes to access control for direc-
tories, but we can easily extend this to capture changes
for individual ﬁles. The Active Directory stubs, on the
other hand, poll the database every 8 minutes since we
do not have the right permissions or mechanisms to build
an event-based stub for Active Directory. The ﬁle server
stub used 830 lines of C# code and the Active Directory
stub, which used a common code base for both the orga-
nizational groups and email lists, was 1327 lines of C#
code.
8.2 Evaluation Through Deployment
We have deployed Baaz within our organization, with
stubs continuously monitoring two resources within our
organization since August 19th, 2009. The stubs mon-
itor read access permissions for directories on a Win-
dows SMB ﬁle server that the employees use to share
conﬁdential data, and an Active Directory server storing
email distribution lists relevant to the organization. Var-
ious groups within the organization actively use the ﬁle
server to share documents, hence we found signiﬁcant
usage of access control capabilities on it.
The objective of our deployment was to see whether
Baaz could help ﬁnd valid access control misconﬁgura-
tions on this ﬁle server. We therefore registered the ﬁle
server as the subject dataset and the email distribution list
as the reference dataset with the server. We decided to
use email distribution lists as opposed to organizational
hierarchy since our administrator observed that only or-
ganizational groups might not capture the various user
sets that actively use the ﬁle server.
We show our results in three steps: ﬁrst, we show
how Baaz’s ﬁrst report in the deployment was effective
in ﬁnding misconﬁgurations. Second, we show the util-
ity of continuously monitoring changes in access con-
trol to ﬁnd misconﬁgurations. Third, we compare our
results with the ground-truth we established by manually
inspecting directory permissions on the ﬁle server, to de-
tect how many actual misconﬁgurations Baaz was able to
ﬂag.
First-time report: Row 1 in Table 2 provides details
on this dataset, and row 1 in Table 3 gives the classiﬁca-
Dataset
Subject
Reference
Users
Objects
Ref Groups
Summ Stmts
1
2
3
File Server
Shared Web Pages
Email Lists
Email Lists
Email Lists
Org Grps
119
1794
115
105682
1917
243
237
3385
11
39
307
205
Table 2: Datasets used to evaluate Baaz.
Set
1
2
3
Security
Accessibility
Group Mapping
Object Clustering
Group Mapping
Object Clustering
Tot.
Val.
Exc.
Inv.
Tot.
Val.
Exc.
Inv.
Tot.
Val.
Exc.
Inv.
Tot.
Val.
Exc.
Inv.
11
7
18
10
3
6
0
0
5
1
4
7
11
0
0
7
0
0
1
0
0
3
0
0
8
9
33
8
4
6
0
1
0
0
4
27
9
0
0
0
0
0
0
0
0
9
0
0
Table 3: Misconﬁguration analysis for each report generated by Baaz.
tion of the ﬁrst-time report that Baaz generated using the
relation matrices that the stubs sent to the Baaz server
initially. The total number of users in the organization
is 149, the number of objects (directories) in the subject
data set’s relation matrix is 105682, and the total num-
ber of reference groups (or unique distribution lists) is
237. The matrix reduction phase on the subject dataset
produced 39 summary statements.
Baaz ﬂagged a total of 39 misconﬁguration candidates.
To validate these, we involved the system administrator
and the respective resource owners of the directories in
question.
Security: Of the 11 security candidates that Baaz
found through Group Mapping, 10 were valid secu-
rity issues which the administrator considered important
enough to ﬁx immediately. Object Clustering found 7 of
these 10 security misconﬁgurations, showing that Baaz
would have been helpful in ﬂagging security issues even
if reference groups were not available to it. However
it is clear that Group Mapping works more effectively
than Object Clustering when a suitable reference dataset
is available.
Accessibility: Baaz found 8 accessibility candidates
through Group Mapping, all of which were valid. All 9
accessibility issues that Object Clustering ﬂagged were
invalid, showing that, with this dataset, while Group
Mapping worked well in bringing out both security and
accessibility issues, Object Clustering did well only with
the security misconﬁgurations. Object Clustering was
not effective in ﬂagging valid accessibility issues since
the difference between the summary statements were un-
expectedly large.
Baaz found a total of 18 valid misconﬁgurations.
There were 10 security misconﬁgurations involving 7
users which, when corrected, ﬁxed access permissions on
1639 out of 105682 directories on the ﬁle server. There
were 8 accessibility misconﬁgurations that affected 6
users and 163 directories.
Our deployment also helped us understand some of the
reasons for why misconﬁgurations occur in access con-
trol lists, which we summarize below.
• In most cases, the misconﬁgurations arise because
of employees changing their roles or, as in some ac-
cessibility issues, from new employees joining the
organization.
• One of the security misconﬁgurations was caused
by a policy change within the organization, which
had only been partially implemented. Certain older
employees had greater degree of access than newer
employees since the administrator had inadvertently
applied the policy change only to employees who
had joined after the change was announced.
• A resource owner misspelt the name of one of the
users they wanted to provide access to, inadver-
tently providing access to a completely unrelated
employee.
Real-time report: In our deployment, the stubs and
the server are running continuously, monitoring access
control and group membership changes and subsequently
running the misconﬁguration detection algorithm. On
September 20th, 2009, an employee within the organi-
zation adopted a new role, which was reﬂected by his ad-
dition to certain email distribution lists. The Baaz stub
reported these changes to the server, following which
the server reported one new accessibility misconﬁgu-
ration candidate within one second. The administrator
considered this accessibility misconﬁguration important
enough to rectify promptly. This emphasizes the value of
Baaz’s continuous monitoring approach since it enables
administrators to detect misconﬁgurations in a nearly
real-time fashion, just after they occur.
Comparison to Ground-Truth: To understand how
close Baaz was to ﬁnding all misconﬁgurations for this
ﬁle server, we manually examined access permissions of
all directories on the ﬁle server from the root down to
three levels. Beyond the third level, we only examined
directories whose access permissions differed from their
parent directories. We examined a total of 276 directo-
ries.
For each directory, we asked the directory owner two
questions: If any user permissions to the directory should
be revoked (security misconﬁguration), and if anyone
else should be provided access (accessibility misconﬁg-
uration). This procedure took two days to complete be-
cause of the manual effort involved. While we cannot
claim that even this procedure would ﬁnd all possible
misconﬁgurations, we felt this exercise formed a good
base-line to compare against Baaz.
We found that Baaz missed 4 security misconﬁgura-
tions and 1 accessibility misconﬁguration. Two secu-
rity issues went undetected because an email list rele-
vant to these issues was marked as private by the owner,
and hence our Active Directory stub could not read the
members. If we had the permission to run the stub with
administrator privileges, Baaz would have ﬂagged these
issues. The other 3 issues (2 security and 1 accessibility)
were genuinely missed by Baaz since there were no ref-
erence groups that matched the user-set, and the number
of users involved in the misconﬁguration (2) were more
than half the size of the user-set (3).
Hence, while Baaz genuinely missed 3 misconﬁgura-
tions, it did ﬂag 18 valid misconﬁgurations which the ad-
ministrator found very useful.
8.3 Snapshot Evaluation
We evaluated Baaz on two other subject and reference
data pairs. We wrote stubs to gather snapshots of ac-
cess control and group memberships from these datasets
and generated a one-time report. Rows 2 and 3 of Ta-
ble 2 describe the datasets and Table 3 summarize our
ﬁndings. Dataset 2’s subject is a server hosting shared
internal web pages for projects and groups across an or-
ganization. The stub for this subject reads access per-
missions stored in an XML ﬁle in a custom format. The
reference was, again, a set of email distribution lists cre-
ated for this organization. This subject dataset comprised
1794 users and 1917 objects. For this dataset alone, the
administrator decided to concentrate on misconﬁguration
candidates with priority more than 0.8.