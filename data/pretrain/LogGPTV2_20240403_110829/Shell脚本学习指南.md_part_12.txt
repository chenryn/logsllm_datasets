---
## Page 74
62
第3章
3.2.6在文本文件里进行替换
很多Shel1脚本的工作都从通过grep或egrep取出所需的文本开始。正则表达式查找的
最初结果，往往就成了要拿来作进一步处理的“原始数据（rawdata）”。通常、文本替
换（text substitution）至少需要做一件事，就是将一些字以另一些字取代，或者是删除
匹配行的某个部分。
一般来说，执行文本替换的正确程序应该是sed：-流编辑器（StreamEditor）。sed
的设计就是用来以批处理的方式而不是交互的方式来编辑文件。当你知道要做好几个变
更—不管是对一个还是数个文件时，比较简单的方式是将这些变更部分写到一个编
辑中的脚本里，再将此脚本应用到所有必须修改的文件。Sed存在的目的就在这里（届
然你他可以使用ed或ex编辑脚本，但用它们来处理会比较麻烦，而且用户通常不会记
得要存储原先的文件）。
我们发现，在Shell脚本里，Sed主要用于一些简单的文本替换，所以我们先从它开始。
接下来我们还会提供其他的后台数据，并说明sed的功能，特意不在这里提到太多细节，
是因为sed所有的功能金都写在《sed&awk》（O'Reilly）这本书里了，该书已列人参
考书目，
GNUsed可从ftp://ftp-gnu.org/gnw/sed/获取，这个版本拥有相当多有趣的扩展，：且已
配备使用手册，还附带软件。GNU的sed使用手册里有一些好玩的例子，还包括与众
不同的程序测试工具组。可能最令人感到不可思议的是：UNIXdc任意精确度计算程
序（arbitrary-precision calculator）竞是以sed所写成的！
当然绝佳的sed来源就是hrtp:/sed.sowrceforgenet/了.这里有连接到两个sedFAQ
文件的链接。第一个是http://www.dreamwvr.com/sed-info/sed-faq.html，第二个比较旧
的 FAQ 是ftp://rtfm.mit.edu/pub/faqs/editor-faq/sed。
3.2.7基本用法
你可能会常在管道（pipeline）中间使用sed，以执行替换操作。做法是使用s命
令一一要求正则表达式寻找，用替代文本（replacement text）替换匹配的文本，以及
可选用的标惠：
sed *s/ : , */ / ' /etc/passwd 1
涵除第一个冒号之后的所有东西
sort -u
排序列表并副除重复部分
www.TopSage.com
---
## Page 75
查找与替换
sed
语法
[y ] .[u]
sed[-n ]-e'editing command'...[file ...]
sed [ -n ] -f script-file ...[ file ... 1
用途
为了编辑它的输入流，普结果生成到标准输出，而非以交互式端辑器的方式
来编辑文件。虽然sed的命令很多，能做很复杂的工作，但它最常用的还是
处理输入流的文本替换，通常是作为管道的一部分。
主委选项
-e‘editing command'
将editingcomand使用在输入数据上。当有多个命令需应用时、就必
须使用-e了。
-f script-file
自script-file中读取编辑命令。当有多个命令需要执行时：此选项相
当有用。
-n
不是每个最后已修改结果行都正常打印，而是显示以D指定（处理过的）
的行。
行为模式
读取每个输入文件的每一行，假如没有文件的话，则是标准输入。以每一行
来说，sed会执行每一个应用到输入行的editinigcommand，结果会写到标
准输出（殿认状态下，或是显示地使用D命令及-n选项）。若无-e或-f选
项，则日ed会把第一个参数看作是委使用的editingcommand
在这里，/字符扮演定界符（delimiter）的角色，-从而分隔正则表达式与替代文本
（replacement text）。在本例中，替代文本是空的（空字符串null string），实际上会有
效地副除匹配的文本，虽然/是最常用的定界符，但任何可显示的字符都能作为定界符。
在处理文件名称时，通需都会以标点符号字符作为定界符（例如分号、显号或逗点）：
find /home/tolstoy -type d -print1
寻找所有目录
sed *s:/home/tolstoy/:/home/1t/:* 1-
修改名称：注意：这里使用分号作为定界符
./xTpxu//e.pes
sh =x
1
以5hel1跟踪模式执行
独人nkdir 命令
上述脚本是将/home/tolstoy目录结构建立一份副本在/home/lt下（可能是为备份而
www.TopSage.com
---
## Page 76
64
第3享双
微的准备）。（find命令在第10章将会介绍，在本例中它的输出是/home/tolgtoy底Im1
下的目录名称列表：一行一个目录。）这个脚本使用了产生命令（generatingcommands）
的手法，使命令内容成为Shell的输人。这是一个功能很强且常见的技巧，但却很少人
这么用（注7）
3.2.7.1替换细节
先前已经提过，除斜杠外还可以使用其他任意字符作为定界符：在正则表达式或替代文
本里，也能转义定界符，不过这么做可能会让命令变得很难看懂：
- ",
在前面的3.2.2节里，我们讲到POSIX的BRE时，已说明后向引I用在正则表达式里的用
法。8ed了解后向引用，而且它们还能用于替代文本中，以表示“从这里开始替换成匹
配第n个圆括号里子表达式的文本”：：：
$ echo/home/tolstoy/ 1 sed*s;\(/home\)/tolatoy/:\1/1t/;
/home/1t/
sed将\1替代为匹配于正则表达式的/home部分：在这里的例子中，所有的字符都表示
它自己，不过，任何正则表达式都可括在\（与\）之间，且后向引用最多可以用到9个。
有些其他字符在替代文本里也有特殊含义，我们已经提过需要使用反斜杠转义定界符的
情况。当然，反斜杠字符本身也可能需要转义。最后要说明的是：&在替代文本里表示
的意思是“从此点开始替代成匹配于正则表达式的整个文本”。举例来说，假设处理
AtlantaChamberofCommerce这串文本，想要在广告册中修改所有对该城市的描述：
mv at1ga.xml at1ga.xml,o1d
sed *s/Atlanita/&, the capital of the South/· atIga.xm1
（作为一个跟得上时代的人，我们在所有的地方都尽可能使用XML，而不是昂贵的专用
字处理程序）.这个脚本会存储一份原始广告小册的备份，做这类操作绝对有必要
特别是还在学习如何处理正则表达式与替换（substitutions）.的时候，然后再使用sed
如果要在替代文本里使用&字符的字面意义，请使用反斜杠转义它。例如，下面的小脚
本便可以转换DocBook/XML文件重字面上的反瓣杠，将其转换为DocBook里对应的
&bsol:
sed's/\\/\sbsol:/g'
注7;
这个脚本有小照，它无法处理目录名称含有空格的情况，这个问题是可以解决的，只
是要有点小技巧，这部分我们将在第10章介绍。
www.TopSage.com
---
## Page 77
查找与替换
65
在s命令里以g结尾表示的是：全局性（global），意即以“替代文本取代正则表达式中
每一个匹配的”。如果没有设置g，sed只会取代第一个匹配的。这里来比较看看有没有
设置g所产生的结果：
Secbo Toletoy reads well.rolstoy writes well.>exanple.txt
xdxo>./a/o#to/#.pee5
输人样本
Camus reads well. Tolstoy writes well.
投有设置
设置了“g”
Carus reads well. Camus writes well.
鲜为人知的是（可以用来吓吓朋友）：你可以在结尾指定数字，指示第n个匹配出现才要
被取代：
Ssed‘s/Tolstoy/Camue/2' myfi1e2.xml
不过，如果你有很多要编辑的项目，这种形式就很忌饰了。所以有时，将编辑命令全放
进一个脚本里，再使用sed搭配-f选项会更好：
S cat fixup.sed
s/foo/ber/α
 - .* 2. . *
8/draft anjnal/horse/g
s/chicken/com/g -
$ sed - f±xup.sed myf1le.xml > myf1le2.xm1
你也可以构建一个结合-e与-f选项的脚本：脚本为连续的所有编辑命令，依次提供所
有选项。此外，POSIX也允许使用分号将同一行里的不同命令隔开：
sed 's/foo/bar/g : s/chicken/cow/g* myfile.xml > myEile2.xml: -
不过，许多商用sed版本还不支持此功能，所以如果你很在意可移植性的问题，请避免
使用此法。
ed与其先驱ex与vi一样，Sed会记得在脚本里遇到的最后一个正则表达式--不
管它在哪，通过使用空的正则表达式，同一个正则表达式可再使用：
s/foo/bar/3
s/ /quux/
现在更换第一个
你可以考虑一个htm12xhtml.sed的简单脚本，它将HTML转换为XHTML。该脚本会
将标签转换成小写，然后更改标签为自我结束形式：
www.TopSage.com
---
## Page 78
66
第3章
s///g
s///g
斜杠为定界符
s//7g
8///g
5///s
s///g
8111g
冒号为定界符，因数提内容里已有新杠
s111g
81:1g
s:::g
s:::g
8111g
B1<>
::g
51118
像这样的脚本就可以自动执行大量的HTML转XHTML了，XHTML为标准化的、以XML
为主的HTML版本。
3.2.8sed的运作
sed的工作方式相当直接。命令行上的每个文件名会依次打开与读取。如果没有文件，
则使用标准输人，文件名“-”（单个破折号）可用于表示标准输人。
sed读取每个文件，一次读一行，将读取的行放到内存的一个区域一一称之为模式空
间（patternspace)。这就像程序语言里的变量一样：内存的一个区域在编辑命令的指示
下可以修改，所有编辑上的操作都会应用到模式空间的内容。当所有操作完成后，sed
会将模式空间的最后内容打印到标准输出，再回到开始处，读取另一个输人行。
这一工作过程如图3-2所示，脚本使用两条命令，将TheUNIXSysten替代为TheUNIX
Operating System,
3.2.8.1打印与否
-n选项修改了sed的默认行为。当提供此选项时，sed将不会在操作完成后打印模式
空间的最后内容，反之，若在脚本里使用p，则会明白地将此行显示出来，举例来说，我
们可以这样模拟grep：
[uq'..d//. u- pas
仅星示这行
虽然这个例子很简单，但这个功能在复杂的脚本里非常好用。如果你使用一个脚本文件，
可通过特殊的首行来打开此功能：
美闭自动打印
//p
仅打印含的行
www.TopSage.com
---
## Page 79
查找与替换
The Uitix System
om
输入
模式空间
周本
s/UNIX Systen/UNIX Operating System/
s/Unix/UNIX/
The Unix System
The UNIX System
The UNIX OperatingSysten
The UNX Operating Syste
图3-2：在sed脚本中的命令改变了模式空间
在Shell中，与很多其他UNIX脚本式语言一样：#是注释的意思。sed注释必须出现在
单独的行里，因为它们是语法型命令，意思是：它们是什么事也不做的命令。虽然POSIX
指出，注释可以放在脚本里的任何位置，但很多旧版sed仅允许出现在首行，GNUsed
则无此限制。
3.2.9
匹配特定行
如前所述，sed默认地会将每一个编辑命令（editingcommand）应用到每个输入行。而
现在我们要告诉你的是：还可以限制一条命令要应用到哪些行，只要在命令前置一个地
址（address）即可.因此，sed命令的完整形式就是：
address command
以下为不同种类的地址：
正则表达式
将一模式放置到一条命令之前，可限制命令应用于匹配模式的行。可与s命令搭配
使用：
/oldfunc/ s/S/ xx: migrate to newfune/
注释部分源代码
s命令里的空模式指的是“使用前一个正则表达式”：
www.TopSage.com
---
## Page 80
68
第3章
/rolistoy/ s//& and Camus/g
提及两位作者
最终行
符号s（就像在ed与ex里一样）指“最后一行”。下面的脚本指的是快适打印文
件的最后一行：
sed -n'$p**$1*
引1号里为指定显示的数据
对sed而言，“最后一行”指的是输入数据的最后一行。即便是处理多个文件，sed