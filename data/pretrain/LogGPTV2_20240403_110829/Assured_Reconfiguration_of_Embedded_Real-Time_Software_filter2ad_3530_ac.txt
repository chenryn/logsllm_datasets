Each module function either: always leaves its data in a consistent state; or when interrupted, calls the module halt
function to leave the state consistent with the module postcondition.
If a function is interrupted, its caller is interrupted with no intervening calls to any function other than halt.
There is a method to meet the transition condition for each specification level.
Each function always meets its timing constraint.
The invariant for normal operation is stricter than the generic reconfiguration invariant, which is stricter than the 
specific reconfiguration invariant: Invi
Û Invix
Û Invij
Table 1: Module Properties
• A facility to activate the reconfiguration mechanism.   
When a reconfiguration signal has been propagated to the
monitoring  layer,  the  monitoring  layer  must  be  able  to
cause the reconfiguration mechanism to begin operation.
mechanism  that  will  use  the  application  properties  to  meet
the conditions set out in Section 4. Required elements of the
reconfiguration mechanism are:
• An implementation of Choose().   The 
result  will  be
• A state variable config representing the current opera-
stored in config.
tional specification.   This  is  the  only  place  information
on the exact member of S is stored. It contains the result
of the calculation in Choose().
• The capability to cause operation under the current spec-
ification.   The  monitoring  layer  is  capable  of  initiating
subactions of App so that App can take advantage of con-
figuration to call appropriate module service levels.
• Maximum time train_time that training of data might take 
for each member of S.   This  will  be  clearly  an  estimate,
but because training is considered to be part of the transi-
tion, it is necessary to state the worst case time.
The properties of the application that must be shown using
these capabilities are outlined in Table 2.
6.3 Reconfiguration Mechanism Capabilities
Now that we have established the structure of the applica-
tion, we are able to create a structure for the reconfiguration
• A mechanism through which each module is ordered to 
meet its precondition for the new service level.   This
mechanism  will  call  functions  in  all  individual  modules
with  preconditions  on  internal  state,  ordering  them  to
execute  the  version  of  that  function  appropriate  to  the
current service level.
The properties of the reconfiguration mechanism that must
be shown using these capabilities are outlined in Table 3.
7. Reconfiguration Assurance Argument
The properties of events and actions that will occur in a
reconfiguration in our architecture are a refinement of high-
level reconfiguration properties laid out in Section 4. In this
section, we use the design-level properties stated in Section
6 to show that, in a system using our architecture and satis-
fying  the  architectural  properties,  the  high-level  properties
hold.
App1
App2
App3
App4
App5
App6
App7
App8
App9
If App is not reconfiguring, it will function in accordance with the specification represented by config’s value.
Every operation is called from some sequence of functions initiated by the monitoring layer.
The postcondition is the conjunction of module postconditions.
The transition condition is the conjunction of module transition conditions.
An interrupt of the monitoring layer will cause an immediate transfer of control to reconfig, which is the functional 
equivalent of the action RM: @(↓Halt, a) = @(↑RM, b)
config’s value is invariant outside of RM:
config = x  Û config = x 
There are no circular dependencies among module reinitialization functions.
If the transition precondition holds at the time the transition is completed, Prej will be met within train_time(j) time 
units: Pretransj  Û @(↓Trainj, b) ã @(↑Trainj, b) + train_time(j)
The transition takes no real time: @(↑Trans, b) = @(↓Trans, b)
This property is true of the structure rather than a particular application, and can be stated as an axiom.
Table 2: Application Properties
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:36:41 UTC from IEEE Xplore.  Restrictions apply. 
P1. @(↑R, b) = @(↓Si, a)
(R begins at the same time the system is no longer oper-
ating under Si)
P1  is  definitional  only,  and  does  not  impose  specific
requirements.
P2. @(↓R, b) = @(↑Sj, c)
(R ends at the same time the system becomes compliant
with Sj)
This property is definitional and so by itself requires no
proof.  It  implies  that  the  system  must  at  some  point
transition  to  Sj,  but  in  our  model  this  property  is  sub-
sumed by P6 since Prej can in general be satisfied only
after a functional reconfiguration takes place.
P3. ∃  t:  time  s.t.  @(↑R,  b)  ã  t  ã  @(↓R,  b)  ∧
(Choose(Si, Env(t)) = Sj)
(Sj  is  the  proper  choice  for  the  target  specification  at
some point during R)
We  present  the  full  proof  of  P3  to  give  the  reader  an
example  of  their  construction,  and  then  outline  subsequent
proofs so that the reader can construct the full chain of rea-
soning for himself.
For  brevity,  we  write  (Choose(Si,  Env(t))  =  Sj)  as
the predicate  validj(t). We first establish that validj(t) is true
for the time Choose ends: validj(@(↓Choose, b)). RM1 says
that 
choose ≡ Choose
Û (by the relationship we have assigned functional
and sequence properties)
choose.post 
Û (RM2)
(Choose(Si,  Env(t))  =  S(config))  
App6  and  RM3  tell  us  that  (config  =  j)    since  Sconfig  will  be  the  new  operational
specification  and  config  will  remain  constant  until  ↑Sj.
Together with the above statement we see
validj(@(↓Choose, b)).
Intuitively, it is obvious that @(↑R, b) ã @(↓Choose, b) ã
@(↓R, b). More rigorously:
∃ t: time s.t. @(↓Choose, b) = t ∧ validj(t)
Û (axiomatic basis of time in RTL)
∃  t:  time  s.t.  @(↑Choose,  b)  ã  t  ã  @(↓Choose,  b)  ∧
validj(t)
Ü (RM1 and RM5)
∃ t: time s.t. @(↑RM, b) ã t ã @(↑Trans, b) ∧ validj(t)
Ü (App5 and RM8)
∃ t: time s.t. @(↓Halt, a) ã t ã @(↑Trainj, c) ∧ validj(t)
Û (axiomatic basis of time in RTL)
∃ t: time s.t. @(↑Halt, a) ã t ã @(↓Trainj, c) ∧ validj(t)
Û (definitions of Halt and Train)
∃ t: time s.t. @(↓Si, a) ã t ã @(↑Sj, c) ∧ validj(t)
Û (P1 and P2, substituting for validj(t))
∃  t:  time  s.t.  @(↑R,  b)  ã  t  ã  @(↓R,  b)  ∧
(Choose(Si, Env(t)) = Sj)
P4. @(↓R, b) - @(↑R, b) ã Tij
(R takes less than or equal to Tij time units)
This  property  can  be  shown  using  P1,  P2,  the  defini-
tions of Halt and Train, App5, RM8, and RM6.
P5. Invij 
(The transition invariant holds during R)
RM1
RM2
RM3
RM4
RM5
RM6
RM7
RM8
choose will be executed immediately when RM is called. choose is equivalent to the action Choose. This means 
that @(↑RM, b) = @(↑Choose, b).
If the postcondition of choose is met, the new operational specification is the correct one and is stored in config.
If config’s value is invariant outside of RM, then config’s value is invariant outside of Choose:
App6 Û ( config = x  Û config = x  )
App7 Û RM calls all the prep functions of the modules in an order in which no dependencies are violated.
Exactly the prep functions are called between choose and transition to the monitoring layer; this implies: 
@(↓Choose, b) = @(↑Prepj, c) ã @(↓Prepj, c) = @(↑Trans, b) and
(Post Ù RM4 Ù App4) Û Pretransj 
If each function meets its timing constraint, then App can halt, RM can execute, and App can train within the allotted 
time: M6 Û @(↓Halt, a) - @(↑Halt, a) + @(↓RM, b) - @(↑RM, b) + @(↓Trainj, c) - @(↑Trainj, c) ãTij
The invariants that must hold during transition hold at the appropriate times:
Invi  Ù Invix  Ù Invij 
RM begins before transition and ends at the time of transition; training begins at the time of transition:
@(↑RM, b) ã @(↑Trans, b) = @(↓RM, b) = @(↑Trainj, b)
Table 3: Reconfiguration Mechanism Properties
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:36:41 UTC from IEEE Xplore.  Restrictions apply. 
This  property  can  be  shown  using  P1,  P2,  M7,  and
RM7.
P6. Prej 
(The precondition for Sj is true at the time R ends)
The  proof  of  P6  is  more  complex  because  it  requires
that  a  series  of  predicates  be  satisfied.  The  proof  is
aided by using the following lemmas:
L6.1. An interruption will cause the application to meet
its postcondition: ∃ t: time s.t. @(↓Si, a) = t Û ∃ t:
time s.t. Post 
This  lemma  can  be  shown  through  induction
using App2, App3, M1, M2, M3, and M4.
L6.2. An 
interruption  will  cause  control 
to  be
transferred back to the monitoring layer: ∃ t: time
s.t. @(↓Si, a) = t Û ∃ t: time s.t. t = @(↓Halt, a).
This  lemma  can  be  shown  through  induction
using App2 and M4.
Together  with  a  second  application  of  M1,  these  lem-
mas imply that an interruption will cause control to be
transferred to the monitoring layer at the same time the
postcondition is met. This being true,
L6.3. Post 
which follows from App5, RM1, RM5, and M1. Using
RM5 again, then App9 and App8, we see that at some
time  t  between  @(↓Trans,  b)  and  @(↓Trans,  b)  +
train_time, Prej is satisfied. Because RM2 and RM3 tell
us  that  config  holds  the  correct  value,  and  RM5  and
App9 tell us that at ↓Trans control is passed back to the
monitoring  layer,  and  using  App1  this  means  that  the
system  is  in  functional  compliance  with  Sj,  we  know
that  App  is  operating  according  to  Sj,  so  t  =  ↑Sj;  and
using P2, P6 is shown.
P7. @(↓Sj, c-1) < @(↑R, b) Û @(↑Sj, c) = @(↓R, b)
(The lifetime of R is bounded by any two occurrences of
the same specification)
P7  is  definitional  only,  and  does  not  impose  specific
requirements.
Some  of  these  properties  can  also  be  considered  to  be
conditional. For instance, the timing constraints apply only
when functional and data constraints have been met. Timing
constraints, then, can be calculated with the assumption that
preconditions and postconditions are true.
8. Example
8.1 The RIPS System and the RSM
As  an  example  of  how  the  module,  application,  and
reconfiguration  properties  can  be  shown  of  a  system,  we
look  at  NASA’s  Runway  Incursion  Prevention  System
(RIPS). RIPS is an avionics application designed to run on
an  aircraft  during  takeoff  or  landing.  It  is  intended  to  help
pilots  with  situational  awareness  of  runway  traffic  to  pre-
vent collisions with objects or aircraft on the runway. Spe-
cifically,  we  examine  the  Runway  Safety  Monitor  (RSM)
algorithm  for  RIPS  [4],  which  takes  input  data  on  runway
traffic and determines whether that data indicates the risk of
a collision. Even the RSM component of RIPS is a complex
system, however, and discussing all aspects of our approach
to its design and assurance is beyond the scope of this paper.
To  illustrate  the  concepts  behind  the  approach  to  assured
reconfiguration  that  we  have  defined,  we  describe  certain
parts  of  the  RSM  and  outline  example  fragments  of  the
assurance argument.
While  the  RIPS  system  does  not  control  the  aircraft
directly, it does give critical advice to pilots during takeoff
and landing, the most accident-prone stages of flight. A fail-
ure can have a serious impact on safety if the system does
not alert pilots to its failure; the pilots will expect to be noti-
fied of possible collisions, and might not be as alert as they
would be did they know they were making safety decisions
without  the  system's  advice.  The  functions  in  the  RSM
involve  some  relatively  complex  geometric  calculations,
and also the data sent to the system is not always reliable, so
it might be the case that the system cannot always operate as
desired. We therefore have constructed our model of the sys-
tem to have a set of service modes that provide varying lev-
els of functionality.
We  have  built  a  model  of  the  RSM  algorithm  that  con-
tains  four  major  operational  specifications.  The  first,  S1,
monitors not only the runway itself, but also a defined area
surrounding the runway when detecting potential collisions.
The geometry of the structure of the surrounding area is rel-
atively complex when compared to the simple rectangle of
the runway. If the software can no longer achieve this func-
tion due to, for instance, loss of computing power or a soft-
ware fault, then the application can reconfigure to S2, which
monitors  only  the  runway  proper.  If  for  some  reason  even
this cannot be achieved, then the system chooses one of two
options: either it halts and merely alerts the pilot (S3) or it
gives  the  aircraft  a  command  to  climb  and  alerts  the  pilot,
readying  the  aircraft  for  the  pilot  to  execute  a  missed
approach if he needs time to adjust to the loss of situational