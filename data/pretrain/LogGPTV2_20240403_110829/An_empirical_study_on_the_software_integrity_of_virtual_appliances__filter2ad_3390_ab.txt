### File Criticality and Software Package Integrity

The criticality of a file is determined by the extent to which the expected software behavior can be affected if the file is modified, replaced, or deleted. For example, a vendor might consider executables and source files as critical, while compressed files and data files as non-critical. This guideline is used in the design of our prototype (see Section 4.1.3).

### 3.1 Configuration Resolver

The Configuration Resolver communicates with software vendors or third-party RIMs aggregators (e.g., NSRL or Bit9) to maintain an up-to-date database of RIMs (the whitelist). It also tracks the history of RIMs, as not every VA will have the latest versions of software. Additionally, it maintains a list of expired or revoked RIMs. Potential providers of Configuration Resolver services include existing security companies (e.g., anti-virus companies). The VMCVT, managed by the Resolver, is detailed next.

### 3.2 VM Configuration Verification Tool (VMCVT)

The VMCVT verifies the integrity of a VA by computing hashes for all its files and comparing them with trusted hashes. When a VA is created from a trusted base image, the tool mounts the file systems of both the VA and the base VM, hashes all files, and compares their absolute paths and hashes. This process compiles a list of unchanged, added, modified, or deleted files. Unchanged files are marked as "verified."

#### 3.2.1 Verification Report

Based on the verification results, the VMCVT generates a digitally signed "verification report" that includes:
- A list of installed software (and updates) with version information.
- A list of verified, unverified, and missing files for each installed software, categorized by file type (executable, source file, web page, configuration file, image file, compressed file, or data file).
- A list of changed configuration files for each installed software, along with content differences.
- An "integrity score" (explained in Section 3.2.2) for each installed software.
- A list of unverified files not part of any installed software.
- The hash of the entire VA image.

This report provides consumers with a detailed list of differences between the VA and the trusted software, facilitating inspection of changed files and configurations. For modified configuration files, the report includes the differences between the VA file and a trusted configuration file. Unverified files not part of any installed software are grouped by file type, and a summary of the number of unverified files for each type is provided. The final element is the hash of the entire VA image, allowing consumers to check the VA's integrity before launching it.

#### 3.2.2 Software Integrity Score and Expected Behavior

The VMCVT assigns an integrity score on a scale of 1 to 3 to each piece of software installed in a VA, based on the following criteria:
- **Integrity Score 3**: No unverified or missing files, except for configuration files.
- **Integrity Score 2**: No unverified or missing critical files, but may have unverified or missing non-critical files.
- **Integrity Score 1**: Unverified or missing critical files.

Software with an integrity score of 3 is considered fully verified and integrity-protected, indicating a clean or high-integrity installation. Software with a score of 2 has only non-critical files missing or unverified, resulting in limited impact on expected behavior. Software with a score of 1 has critical files missing or unverified, likely leading to unexpected behavior.

### 4. Analysis of Real-World Virtual Appliances

In this section, we analyze the integrity of software packages in real-world VAs using the framework described above. We generated verification reports for 151 randomly selected Amazon VAs and analyzed them.

#### 4.1 Methodology and Assumptions

##### 4.1.1 Sampling Method

We sampled publicly available Amazon Machine Images (AMIs) by randomly selecting images and instantiating them to obtain their disk content. Our prototype uses the Red Hat package manager (rpm database) to validate image content, focusing on rpm-based distributions, which represent a significant portion of Linux images in the market.

Our random sample consists of 151 images from an estimated pool of 2,300 valid rpm-based AMIs available in the Amazon US-east zone. We filtered out Windows and dpkg-based Linux images, leaving 4,513 AMIs. After randomly selecting 300 images and attempting to instantiate them, we were left with 151 successfully instantiated VAs.

##### 44.1.2 Representativeness of the Samples

To ensure our sample size is sufficiently large, we evaluated whether the randomly shuffled subgroups (partial sets) of the samples represent the entire sample pool. We randomly shuffled the 151 VAs and divided them into three subgroups, repeating this process 30 times and computing the average values. The results show no significant difference among the three groups, supporting the representativeness of our sample.

##### 4.1.3 The VMCVT Prototype

Using a combination of shell and Python scripts, we implemented a prototype of the VMCVT. Given a base image and a derived VA, the prototype generates checksums by hashing all files in both images, compares the hash values, and creates a list of added, modified, and deleted files. The `rpm verify` command is then used to check the integrity of these files against the rpm database. The VMCVT keeps track of files that fail the `rpm verify` check, including deleted files that should not have been deleted (missing files).

The VMCVT then checks the remaining added, modified, and deleted files against a manually constructed whitelist. To determine if a software package was completely uninstalled, we inspected the differences in file directories between the two images. Deleted files that were part of a removed directory were ignored and did not affect the software integrity scores.

Finally, the VMCVT classifies the unverified/missing files into file types and computes the integrity score of the installed software using the rules described in Section 3.2.2. The prototype generates a verification report as the final step.

##### 4.1.4 Constructing the Whitelist

A software whitelist was manually constructed based on the list of added, modified, and deleted files that `rpm verify` did not know about. By examining the absolute paths and file contents, we identified the exact software versions installed on each VA and downloaded the corresponding source code and binary packages from vendor websites. We then created MD5 checksums (RIMs) for each file in the packages and added them to the whitelist, assuming the downloaded packages were from trusted sources.

#### 4.2 VA Classification Based on the Percentage of Unverified/Missing Files

##### 4.2.1 Classification Method

Figure 3 shows the cumulative frequency of unverified/missing file percentages. 90% of the VAs have less than 4.5% of unverified or missing files. We found a correlation between the number of unverified/missing files and the percentage (Figure 4, Pearsonâ€™s: 0.84). Using this correlation, we classified the VAs into the following three "Integrity Level Groups" (ILG):

- **ILG A**: 44 VAs with less than 0.1% of unverified/missing files.
- **ILG B**: 59 VAs with 0.1-1% of unverified/missing files.
- **ILG C**: 48 VAs with more than 1% of unverified/missing files.