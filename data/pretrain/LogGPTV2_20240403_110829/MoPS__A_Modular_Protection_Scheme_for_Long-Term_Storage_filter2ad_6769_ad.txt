Merkle tree root r(cid:48)
n is computed like in the initialization pro-
cedure of the data structure MTS using hash function Hn =
Hn−1. Second, an is computed as an = Attest(Hn||Hn(Hn(
dn)||an−1||vn−1), tn), where dn = r(cid:48)
n, vn−1 is the veriﬁca-
tion data needed to verify an−1, and tn the time when an is
issued. In case the security of hash function Hn−1 is about
to fade out, the Merkle tree root r(cid:48)
n is computed with a new
hash function Hn. Then, the same hash function is used to
compute the Merkle tree root rk from all data contained in
the sequence as described for MDS. Finally, the new attesta-
tion an is computed as an = Attest(Hn||Hn(Hn(dn)||rk), tn),
where dn = r(cid:48)
n. To be able to recreate the Merkle tree roots
eﬃciently during veriﬁcation, the authentication paths are
stored with the documents. The same way Merkle trees can
be combined with the data structures SLS and NAW.
The veriﬁcation of a document requires to ﬁrst recom-
pute the Merkle tree root using the authentication path.
Then, the correctness of the attestation for the root is veri-
ﬁed by running the veriﬁcation procedure of the data struc-
ture MDS, SLS, or NAW, respectively.
5. MIGRATION
In general, there are two reasons why it is necessary to
switch from one data structure to another. The ﬁrst one
is that the requirements for the storage or archiving sys-
tem changed. Assume, for instance, the authenticity and
integrity of a medical record is protected using MDS or SLS.
Then, when the patient passed away, no new data will be
added to the record, which is why the folder should be mi-
grated to a simple data structure, such as AS or NAW. The
second reason is that documents are transferred to another
storage or archiving system which runs a diﬀerent protection
scheme.
How the migration procedure works depends on the tar-
get system conﬁguration. We ﬁrst describe the migration
procedure when the target system supports sequences, i.e.
AS, MTS, MDS, or SLS. Then, we suggest a construction
for migrating to NAW.
5.1 Migration to Sequence-Based Data Struc-
tures
Moving from an arbitrary scheme to a sequence-based
data structure, i.e. AS, MTS, MDS, or SLS, requires mi-
grating the proof of existence generated with the old data
structure. More precisely, assume a proof of existence has
been generated and the latest attestation is an. Then, we
distinguish whether this is a proof protecting a single docu-
ment, i.e. with AS or NAW, or a set of documents, i.e. with
MTS, MDS, or SLS. In the ﬁrst case the proof is migrated
by simply calling the renewal procedure of the target data
structure for an. This process automatically transfers the
proof of existence in the new format and provides a time
reference for the migration. If the data structure protects
multiple documents, ﬁrst a Merkle tree is generated where
each leaf contains one document and its proof of existence.
Then, the root of the Merkle tree is added to the new data
structure. Note that in both cases, when the hash renewal
procedure of the new data structure is called, also the mi-
grated data is rehashed.
If the target data structure allows to add documents, e.g.
MDS or SLS, the migrated data can also be added to an
existing proof of existence. This allows to merge folders or
subsequently add older documents to existing folders.
In
this case, signed documents and their proof of existence are
hashed and added as new data to a proof of existence main-
tained by the target system.
The veriﬁcation of a migrated document is performed in
two steps. First, the old proof of existence for the docu-
ment is veriﬁed by running the veriﬁcation procedure of the
data structure used before the migration. Then, the veriﬁ-
cation procedure of the target data structure is performed
to verify that the data has been correctly protected after the
migration.
4435.2 Migration to NAW
When migrating from a sequence-based data structure to
NAW, all documents together with their proofs of existence
are sent to an NA. The NA veriﬁes the received data as
speciﬁed by the target system and migrates the data. De-
pending on the use case, it either returns a single notarial
attestation for each document of the old data structure or it
generates a Merkle tree with the documents as leaves and re-
turns a single notarial attestation for the root of the tree (see
Section 4.2). The new attestation(s) prove(s) the authentic-
ity and integrity of the signed document(s). However, note
that the proof(s) of existence generated before the migra-
tion is/are deleted after veriﬁcation. Furthermore, the time
t0 contained in the notarial attestation does not refer to the
time the data has been migrated, but to the date when the
ﬁrst attestation for the corresponding document or the set
of documents was created.
6.
IMPLEMENTATION
In this section, we provide details regarding our imple-
mentation of MoPS. It consists of a web application which
provides the main user interface for a web service-based ar-
chitecture and two additional desktop applications for creat-
ing signatures and verifying stored documents, respectively.
The section is organized as follows: First we describe the
features supported by our implementation in Section 6.1.
In the following sections we present the three applications
which together form MoPS: the signing application in Sec-
tion 6.2.1, the web application in Section 6.2.2, and the ver-
iﬁcation application in Section 6.2.3. In Section 6.3, the ser-
vice architecture and the individual web services behind the
web application are explained. Finally, a short performance
evaluation in Section 6.4 reports the computation time and
the storage space consumption when using our implementa-
tion to protect documents.
6.1 Features
Our current implementation covers the following attesta-
tion techniques, data structures, combinations, and migra-
tions:
Regarding attestation techniques, we support signature-
based timestamps and notarial attestations. WVM-based
timestamps are not provided, because, ﬁrst, to the best of
our knowledge, there is currently no provider oﬀering WVM-
based timestamping services free of charge. Second, we do
not have access to WVM and therefore cannot create a re-
alistic prototype service. Notarial attestations in our im-
plementation attest during initialization that the received
certiﬁcate is valid and the employed hash function is secure.
When renewing an attestation, they attest that its signa-
ture is still valid and the employed hash function(s) is/are
secure, just as described in Section 3.2.6. The supported
cryptographic primitives for generating the attestations are
the SHA-2 family of hash functions (SHA-256, SHA-384,
SHA-512) and the RSA signature scheme where the length
of the signature key depends on the chosen hash function
(see Table 4 in Appendix A.1 for details).
Regarding data structures, our implementation supports
AS, MTS, MDS, SLS, and NAW. Furthermore, we imple-
mented the unbalanced hash tree used by the archiving
scheme CIS for testing purposes. We support the combina-
tion of MDS and SLS with Merkle trees exactly as described
Figure 1: The diﬀerent components in the MoPS
system architecture grouped into front-end, back-
end, and third-party services. Interactions between
diﬀerent components are indicated by arrows.
in Section 4.2. The combination of multiple attestation re-
quests using MTS is left for future work.
Regarding migration, both of the migration procedures
presented in Section 5 are supported. However, when mi-
grating to NAW, always a single notarial attestation is re-
turned for each protected document. The reason for this
restriction is that, as explained previously, our notarial at-
testations attest the validity of single certiﬁcates and there-
fore cannot be used to attest an unsigned Merkle tree root.
Besides these basic MoPS features, our implementation
also provides import and export functionalities which al-
low transferring protected documents between diﬀerent in-
stances of the system without losing protection.
6.2 MoPS Apps
The MoPS implementation consists of the following ap-
plications: First, we provide a platform-independent graph-
ical desktop application called Signing App which enables
non-expert users to create signatures. This application is
available for all major desktop operating systems. Second,
we provide a web application called Web App to which users
can upload signed documents. The Web App supports non-
expert users when creating protection schemes and perform-
ing updates by employing wizard-based guidance. It also al-
lows exporting protected documents for veriﬁcation or trans-
ferring them to other Web App instances. Accessing the
actual protection system via a user interface in form of a
web front-end results in platform independence, i.e. the im-
plementation can be used on any device providing a web
browser. The third application is a platform-independent
graphical desktop application called Veriﬁcation App which
allows external retrievers to verify exported documents. As
the Signing App, the Veriﬁcation App is available for all ma-
jor desktop operating systems. An overview of the MoPS
components is illustrated in Figure 1.
Signing App
6.2.1
The Signing App is a graphical desktop application which
enables non-expert users to create signatures on documents.
To support a wide range of operating systems, the applica-
tion was implemented in Java 8 using Java Swing. When
launching the Signing App, the interface invites the users to
select a PKCS#12 key store containing their public-private
MoPSFront-EndMoPSBack-EndThird-Party ServicesProtectionSystemWeb AppCore ServiceStorage ServiceTSANACAInformation ServiceDatabaseSigning AppVerification App444In case the expert users prefer a modular scheme, they can
manually select the preferred data structure and attestation
technique. However, impossible combinations are blocked,
e.g. running NAW with signature-based timestamps.
In order to import signed documents, the users need to
select a) the MoPS ZIP ﬁles they want to import, b) the
hash function which should be used for hashing the uploaded
documents, and c) the remote address of the service issuing
the type of attestation they want to use. After starting the
import, ﬁrst, the selected MoPS ZIP ﬁles are uploaded to
the Web App. Then, a proof of existence for the documents
is generated by adding them to the selected data structure
and creating an attestation with the help of the speciﬁed
third-party service. Finally, the proof of existence is stored
in an XML ﬁle called evidence record.
When exporting one or more protected documents, i.e.
folders of documents, a download of the data in form of a
MoPS ZIP ﬁle is oﬀered. Such a MoPS ZIP ﬁle contains all
selected documents and their corresponding XML signature
ﬁles.
In addition, for each folder containing one or more
documents, there is an XML ﬁle with the extension “.er.xml”
containing the corresponding proof of existence.
The import dialog can also be used to import protected
documents which were exported from an arbitrary Web App
instance. In this case, the existing proofs of existence are
migrated and updated instead of creating new ones.
The update/migration dialog allows users to update the
proof of existence for protected documents. To do so, they
need to decide whether they want to use a new data struc-
ture and/or attestation technique and/or hash function and/
or attestation service and if so, which one they want to se-
lect.
6.2.3 Veriﬁcation App
The Veriﬁcation App is a graphical desktop application
which allows non-expert users to verify protected documents.
This application is necessary to provide external retrievers
(i.e. users without access to the Web App) the possibility to
verify proofs of existence created by the Web App. When
launching the Veriﬁcation App, the interface prompts the
user to open a MoPS ZIP ﬁle via drag & drop. Also, the
user needs to connect to an information service (see Section
6.3.1 for details). This can be done by selecting either the
remote address of an online service or the database shipped
with the Veriﬁcation App which provides recommendations
according to Lenstra [7]. If issues occur during veriﬁcation,
a modal window gives a tabular overview stating why veri-
ﬁcation failed for which document.
6.3 Web Services
The MoPS implementation incorporates many web ser-
vices for performing tasks which require no user interface.
They are RESTful web services implemented in Java 8 us-
ing Apache CXF7, a framework providing a compliant im-
plementation of the JAX-RS8 standard. These web services
can be categorized into two groups: third-party services and
back-end services. Third-party services are needed to pro-
vide timestamps, notarial attestations, information about
the lifetime of cryptographic primitives and parameters, cer-
tiﬁcates, and revocation information. The back-end services
provide the functionality oﬀered by the Web App to its users:
Figure 2: A screenshot of the Web App inter-
face showing all currently maintained protection
schemes. The side menu allows to manage these
protection schemes.
signature key pair and to add the documents to be signed via
drag & drop. After starting the signing process, a signature
is created for each document.
For creating signatures,
the Signing App relies on
XAdES4j 5, a Java implementation of XAdES [3] which also
allows creating basic XML signatures containing only an
identiﬁer for the employed signature method, the hash value
of the signed document, the signing time, the signer’s cer-
tiﬁcate, and the value of the signature on the previously
mentioned properties.
The Signing App creates a new MoPS ZIP ﬁle for each
signed ﬁle. The MoPS ZIP format is the ﬁle format used
for transferring signed and protected documents between
the Signing App, the Web App, and the Veriﬁcation App.
Files in this format are ordinary ZIP ﬁles with the extension
“.mops.zip”. The MoPS ZIP ﬁle created by the Signing App
contains the signed document and its signature. The reason
for combining a document and its signature into a single ﬁle
with a custom extension is to facilitate accepting only legit
document-signature pairs for the Web App.
6.2.2 Web App
The Web App is the main front-end component of the
MoPS implementation. It is a wizard-based web interface
for the modular protection system. It allows one to create
protection schemes as well as importing, exporting, updat-
ing, migrating, and verifying documents. The implementa-
tion was done using Apache Wicket6, a server-side frame-
work for developing interactive web applications using Java
8 and HTML 5. Figure 2 shows a screenshot of the Web
App interface.
The protection scheme creation wizard allows non-expert
users to create protection schemes with conﬁgurations which
best suit their needs. Users can choose between a simple
mode and an expert mode. Using the simple mode, the users
are asked to select the expected access pattern for the doc-
uments and the trust assumptions they are willing to make.
Depending on the submitted choices, the system selects the
most suitable attestation technique and data structure (or
combination of data structures). The expert mode gives ex-
pert users the possibility to choose a default conﬁguration for
one of the existing schemes surveyed in Section 3. Note that
due to the lack of support for WVM-based timestamps, the
scheme CIS is conﬁgured to use signature-based timestamps.
5https://github.com/luisgoncalves/xades4j
6https://wicket.apache.org/
7https://cxf.apache.org/
8https://jsr311.java.net/
445A so-called core service is responsible for performing opera-
tions on evidence records. Furthermore, a dedicated storage
service manages data objects and, ﬁnally, a protection sys-
tem maintains information about protection schemes and
protected documents in a database.
6.3.1 Third-Party Services
The MoPS implementation includes implementations of
all required third-party services as there are no existing im-
plementations available (in case of the NA and the infor-
mation service) or available services are commercial or have
limitations regarding free usage (in case of the CA and the
TSA service). In the following we explain only the services
for which currently no other implementations exist, i.e. the
NA and the information service. Details regarding the CA
and TSA service can be found in Appendix A.
Information Service.