a system preﬁx (e.g., browser permissions).
V. CUSPER
System permissions are deﬁned by the platform—a privi-
leged principal—whereas custom permissions are deﬁned by
apps—less privileged principals. The former kind typically
protects system resources while the latter is utilized to protect
inter-component communication between apps. The fact that
the system treats them the same, results in severe security
vulnerabilities as the ones we discovered (Section IV). Note
that other vulnerabilities might also exist or might manifest
in the future because of this non-separation between the two
classes of permissions. Ideally, we need a new design which
will allow us to achieve a clean separation of trust between
the system and custom permissions. This way, the system
will have to handle the two cases differently avoiding logic
errors and at the same time, any potential vulnerabilities in
third party app custom permissions will not allow privilege
escalation, which can enable exploits of system permissions
and platform resources. However, such a new design needs
to be carefully constructed to be practical. In fact, it needs
to be as simple as possible to be adopted in practice, and
backward compatible. A complete redesign of the Android
permission model would require non-trivial modiﬁcations to
the Android framework while thousands of apps relying on
custom permission would be immediately affected. Instead,
in our work, we introduce two main design principles which
can easily be incorporated into the current design of Android
permissions, require no changes to the existing apps, and
can guarantee a separation of trust eliminating the threat
of privilege escalation in permissions, without breaking the
operation of system and third-party components that rely on
permissions. These design principles are: (a) decoupling of
system and custom permissions; (b) new naming scheme for
custom permissions. We implement these in our system that
we call Cusper.
A. Isolating System from Custom Permissions
Currently, Android does not maintain distinct representa-
tions for system and custom permissions, that is, the system
does not track whether a permission originated from the system
or from a third-party app. Due to this reason, both types of
permissions are also granted and enforced in the same fashion.
As we have shown in Section IV, this is problematic as it
allows apps to use custom permissions to gain unauthorized
access to system permissions. For example, a malicious app
can declare a custom permission and assign it to a system
6
permission group. This behavior is allowed by Android since it
does not differentiate between the two permission types. Thus,
when the custom permission is granted, the app automatically
gains access to the system permissions in the same group,
essentially elevating its privileges from a permission deﬁned
by a low trust principal to permissions deﬁned by the platform.
In our system, we never allow custom permissions to share
groups with system permissions. Additionally, the fact that
Android internally treats all permissions the same way is an
important limitation with security repercussions: platform de-
velopers tend to overlook the existence of custom permissions
when handling permissions. The custom permission upgrade
attack is an example of that. To overcome this, in our system,
system and custom permissions have distinct representations
in the platform. By doing this, we can differentiate between
the two types of permissions during granting as well as
enforcement and apply different strategies depending on the
type of permissions.
Implementation. In order to decouple the two permission
kinds, one could create separate object representations and
data structures. This would require a complete redesign of
the Android permission implementation throughout the An-
droid framework which we think is impractical. Alternatively
one could use existing ﬁelds in the current permission rep-
resentation in Android which can give us information on
the source of a permission. BasePermission class has a
sourcePackage ﬁeld that indicates the originating pack-
age of a permission. For system permissions deﬁned in the
platform manifest, this ﬁeld is set to android, for system
permissions deﬁned in system packages, it usually starts with
com.android, and for custom permissions it is the package
name of the deﬁning third-party app. However, the package
name itself cannot be used to identify whether a package
is system or third-party, as there are already system apps
with package names not starting with com.android (e.g.,
browser) and even third-party apps can have package names
starting with the system preﬁxes (com.android etc.). Hence,
sourcePackage is not a reliable identiﬁer of whether a
permission is custom or system.
Instead, a both practical and robust approach, would be
to extend the object representation of a permission with
an additional member variable, indicating whether this per-
mission is a custom permission.
In Cusper, we imple-
ment this by augmenting the BasePermission and the
PackageParser.Permission classes. The value of the
new variable is assigned when an app’s manifest is parsed
(PackageParser.java) during installation or upgrade. If
the app under investigation is untrusted (as indicated by its
non-platform signature), we mark its permissions as custom.
When parsing an untrusted app’s manifest, we further check
whether the app developer assigned a custom permission
to a system permission group. In this case, we ignore the
assignment, which results in the permission having no group.
Moreover, if the app declares a custom permission group,
we ensure it does not use a system permission group preﬁx
(android.permission-group). In essence, we thwart
the vulnerability while ensuring that even if future vulnerabili-
ties manifest, there will be no escalation to system permissions.
After doing this, we can now track the creation of custom
permissions by third-party apps. In order to particularly thwart
the Custom Permission Upgrade, when a custom permission—
which we can now effectively and efﬁciently differentiate
from system permissions—is created with the protection level
normal or signature (i.e., install permission), we simply set the
FLAG PERMISSION REVOKE ON UPGRADE ﬂag so that
the permission will not be granted automatically if it is later
updated to be a dangerous (runtime) permission.
B. Naming Conventions for Custom Permissions
Android allows third-party apps from different developers
to declare permissions with the same name. The current
solution is to never allow two permission declarations with
the same name to exist on the device. While this sounds
effective, it is unfortunately unable to stop the second attack
we demonstrated: a deﬁner app A declares a permission and
another app B gets the permission granted. When the ﬁrst
app A is uninstalled and a victim app C comes in declaring
and using the same permission to protect its components, it is
vulnerable to confused deputy attacks from app B. We solve
this problem by introducing an internal naming convention:
we enforce that all custom permission names are internally
preﬁxed with the source id of the app that declares it. Note
that we do not expect app developers to change their practices.
Custom permissions are still declared with their original names
in the manifest ﬁles of apps to allow backward compatibility.
However, in our system, the custom permission names are
translated to source id : permission name. Thus,
even if permission revocation such as in the above attack
scenario fails, the attack will be rendered ineffective. This
is because, as far as our system is concerned, the granted
permission to app B will be an entirely different permission
than the one app C uses to protect its components.
Choosing the appropriate source id is not straightforward.
Consider for example using an app’s package name as the
source id. This introduces two main problems. First,
repackaged apps distributed on third-party application markets
could use the package name of an app distributed on Google
Play. Thus, the repackaged app could take the role of the
deﬁner attack app (see Section IV) and instigate a confused
deputy attack. This is possible since the repackaged app and
the victim app share the same package name and a permission
created by the repackaged app cannot be distinguished from the
one created by the victim if they share the same permission
name.Second, using the package name as the source id
might break the utility of signature custom permissions
for some use cases. For example, developers that have a
set of applications which utilize each other’s components,
commonly use signature permissions to protect the components
of their apps from others. Since the installation order cannot
be determined in advance, each app in the set has to declare
the same permission (i.e., same name and protection level) in
their manifest to make sure this permission will be created
in the system. If permissions are preﬁxed with their declarer
app’s package name,
them as
different permissions. Therefore, any attempted interaction will
be wrongfully blocked.
then the system will
treat
In Cusper, we instead use the app’s signature as the source
id to preﬁx permission names. In the case of a repackaged app,
assuming the malicious developer does not possess the private
keys of the victim app developer, the declared permission will
7
be a different permission in the system than the victim’s de-
clared permission. Moreover, utility is preserved since custom
permissions with the signature level will be treated as the same
permission as long as they come from the same developer,
which is exactly the purpose. Note that the same scheme can
also be utilized for permission tree names.
Lastly, the ofﬁcial suggestion to Android app developers
which declare custom permissions, is to use names that follow
the reverse domain name paradigm (similar to the one for
package names). However, Android does not enforce this
naming convention. Even though it will ignore a permission
declaration with the exact same name as an existing permis-
sion, it allows third-party apps to use a system permission
name preﬁx (e.g., android.permission) in their custom
permission declarations. Since permission names and groups
are currently the only information the system has regarding
the intention and source of the permission, this treatment is at
the very least hazardous. In Cusper, we address this naturally
as we add preﬁxes to permission names and never allow a
custom permission to use a name preﬁx reserved for system
permissions. Since we decouple the two types, we can now
identify the type and origin of permissions, and readily enforce
this rule. To maintain backward compatibility and ensure that
the custom and system permission names are distinct, we also
ignore system permission names for custom permissions (as
the original system currently does).
Implementation. To thwart custom permission spooﬁng at-
tacks of any sort (including our Confused Deputy attack), apart
from distinguishing between custom and system permissions,
we further need a way to track the origin of custom permissions
and uniquely identify them in the system. Towards this end,
we implement a naming convention for custom permissions in
Cusper. Our implementation consists primarily of a permission
name translation operation to preﬁx the permission names
with their source id to ensure uniqueness in the system.
This translation happens during installation and update for the
names of the declared custom permissions and requested install
time permissions, and at runtime for dangerous permissions
and the permissions used to protect components (guards).
At the time of installation, we allow the system to parse
declared custom permission names from an untrusted app’s
manifest; however, we translate their names to be preﬁxed
with the hash of their app’s signature before the actual
permission is created in the system. In the case an app is
signed with multiple keys, we sort the hashes of the keys
and concatenate them. Note that one could attempt to perform
the translation in place. For example, it could perform the
translation while parsing a permission name from the manifest.
However, at
the app’s certiﬁcates are not yet
collected. Doing so would incur non-negligible overhead since
it involves a number of ﬁle opening and reading operations
(PackageParser.collectCertificates()). Instead,
we keep the parsed data unaltered until after the certiﬁcate
collection normally happens. Then, we scan the package’s
meta-data to perform the necessary translations. Our approach
resulted in great performance savings which keep Cusper’s per-
formance comparable to the original system (see Section VII).
Similarly, we ﬁrst proceed to translate the names of the
requested permissions during installation or update. This is
that point,
done to correctly grant install time permissions (i.e., normal
and signature). Note that a requested permission might not
necessarily exist in the system at this time and therefore the
permission name translation cannot happen. For example, an
app that declares the permission might be installed at a later
point in time. Since the declared permission will be translated,
it will essentially be treated as a different permission than the
one requested, violating application developers’ expectations.
This is not a problem with install time permissions: the permis-
sion correctly will not be granted as its deﬁnition does not exist
on the system at the time of installation, which is on a par with
the behavior of the original Android OS. In the case of danger-
ous permissions which are granted by the user at runtime, we
need to dynamically check for existing declared permissions.
Therefore, we perform a requested permission translation at
runtime. In particular, when a dangerous permission is to
be displayed to the user, we perform a scan on all declared
permissions to ﬁnd a custom permission with the same sufﬁx
as the requested permission. In our implementation, we do not
allow declaration of custom permissions with the same name
which ensures that the scan will result in only one possible
permission. This is also the current design of Android which
does not allow two apps to declare the same permission. Note,
however, that since we preﬁx custom permissions, one could
extend our system to allow multiple apps to use the same
custom permission names. In case of an app requesting that
permission, we could readily resolve the conﬂict if one of the
declarers has the same signature. If all declarer apps come from
different developers, a mechanism similar to Intent ﬁlters could
be utilized to allow the user to select the appropriate declarer
app.
It is worth noting that one could alternatively create a sep-
arate hash map for custom permissions (e.g., key-value pairs
of (sufﬁx, preﬁx)) to avoid the linear scan for sufﬁx lookup.
However, this hash map would need to be kept consistent
with the original hash map for all declared permissions in the
system (e.g., tracking addition/removal of permissions), which
is hard to achieve since there are multiple places throughout
the Android source code where this in-memory data structure
is updated or sometimes even constructed from scratch from
ﬁles in persistent storage. Hence, for the sake of consistency
and not breaking utility, we prefer the linear scan method and
do not change the structure of the in-memory data types for
permissions. As we will show in our evaluation in section VII,
this method does not result in any signiﬁcant overhead.
Finally, as for permissions that are used to protect app com-
ponents (guards), their name translation takes place at runtime
during enforcement since a guard might not necessarily exist
in the system at the time of installation.
VI. ANDROID PERMISSIONS ALLOY MODEL
As a part of the software development process, to verify
that a piece of software meets the requirements, it is common
practice in industry to rely only on software testing and not
provide formal proofs of program correctness for the under-
lying model as formal veriﬁcation is highly time consuming,
difﬁcult and expensive. However, we argue that fundamental
components like a permission system are naturally worth more
effort as any failure in such components can make way for
critical security vulnerabilities or even render the security of
8
the whole system ineffective. Additionally, numerous security
bug reports on similar issues present further proof that the
current testing methodologies for Android permissions are not
completely effective and a better way of proving program
correctness is necessary. Hence, in this section, we focus on
providing a formal model of Android (runtime) permissions
and a formal proof for the correctness of our design for Cusper.
Formal veriﬁcation allows us to systematically reason about
our design of Cusper by covering many cases that would
otherwise be difﬁcult to investigate with static analysis or
testing. This is not to say software testing is unnecessary
when a formal correctness proof is provided. In fact, we
still need software testing to verify that our implementation
conforms to our proposed model (which is formally veriﬁed
to be correct). On the other hand, “formal veriﬁcation re-
duces the problem of conﬁdence in program correctness to
the problem of conﬁdence in speciﬁcation correctness” [16].
In other words, veriﬁcation is performed not on the actual
implementation but on a representation that is as close to
the original implementation as possible. This is because it is
challenging to perform formal veriﬁcation at a scale required
by source code, especially at the huge scale of the Android
source code. Progress in the area does exist towards this for
other programming languages [27], but such approaches are
typically employed at the time of development, where the
developer is required to annotate the code. This would be
infeasible in our case where a large portion of the Android
source code is already written. Additionally, correctness is
proved only with respect to a set of fundamental properties that
were deﬁned based on the speciﬁcation. There is no guarantee
the system will behave correctly under any condition that was
not a part of the deﬁned properties or in case of redesigns
of the system that might invalidate the model assumptions.
Hence, the state of the art formal veriﬁcation is not a silver
bullet but still a best effort technique for proving correctness.
To analyze the security of Android permissions, previous
work proposed formal models that correspond to the older
Android versions which supported only install-time permis-
sions [20], [21], [29]. Unfortunately, no such model exists
for Android’s currently-adopted runtime permissions. Hence,
we build the ﬁrst formal model of the Android runtime
permissions and use it to verify the correctness of Cusper.
This allows us to investigate Cusper under many cases such as
all possible installation orders and app declarations. Note that