FileMonster’s protection mechanism, however for a more 
secure  environment  a  user  can  choose  the  secure  file 
confirmation  method.    The  simple  file  confirmation  is 
slightly  easier  for  someone  to  use  because  it  does  not 
necessitate switching desktops to perform a confirmation.  
Secure  file  confirmation  ensures  that  even  a  piece  of 
malicious  code  specifically  designed 
the 
FileMonster  cannot  bypass  the  security  we  have  put  in 
place. 
to  attack 
3.2. Application file associations 
Another  feature  that  provides  some  trade-off  between 
security and usability is the association of file types with 
applications.  This feature enables the FileMonster to treat 
protected  files  differently  depending  on  the  application 
that is accessing them.  To make an association, you first 
select  either  an  individual  file  or  file  type  and  the 
application  with  which  it  is  to  be  associated.    Then  you 
choose  what  permissions,  if  any,  should  be  used  when 
that application attempts to access the file or file type.  At 
the time of the check the FileMonster uses MD5 hashing 
to  verify  that  the  application  is  indeed  the  program  that 
was originally associated with the file or file type, and to 
see that this program has not since been modified. 
For  example,  FileMonster  could  be  configured  such 
that  all  files  with  the  TXT  extension  are  treated  with 
confirm  on  write  permission 
regardless  of  which 
application  is  accessing  it.    You  could  use  application 
associations to make an exception to this rule, stating that 
TXT  files  should  not  require  any  type  of  confirmation 
when  access  by 
  If  any 
application  other  than  Notepad  attempted  to  write  to  a 
TXT file then a confirmation would be required, however 
when Notepad wrote to a TXT file the FileMonster would 
not  interfere.    Note  that  the  method  we  are  using  to 
identify  writing  to  a  file  will  also  identify  an  attempt  to 
change the name or extension of that file.  This prevents 
the  simple  attack  of  changing  a  file’s  extension  before 
attacking its contents. 
the  Notepad  application. 
is 
in  providing  a  path 
The  security  weakness  that  application  associations 
introduce 
that  bypasses 
FileMonster’s  own  security  permissions.    In  the  example 
above, 
the  Notepad  application  contained  some 
malicious  logic  that  overwrote  all  of  the  TXT  files  on  a 
hard  drive  there  would  be  nothing  in  place  to  stop  it.  
if 
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:28:30 UTC from IEEE Xplore.  Restrictions apply. 
through 
Furthermore,  a  malicious  program  could  take  advantage 
of  Notepad’s  file  type  association  and  perform  its 
malicious  actions 
the  Notepad  application.  
Similarly, if an application that supports macros, such as 
Microsoft  Word,  were  associated with a file or file type, 
then a malicious macro could control the host application 
and take advantage of the association to damage protected 
files. 
Application  associations  are  a  double-edged  sword.  
They  help  to  reduce  the  number  of  confirmation  dialogs 
that  FileMonster  generates,  but  could  conceivably  open 
up  a  hole  in  the  prototype’s  armor.    They  must  be  used 
carefully, with the understanding that their convenience is 
paid  for  by 
introduction  of  potential  security 
weaknesses. 
the 
3.3. Session caching 
The FileMonster allows users to enable a feature called 
session caching that will remember a user’s response to a 
confirmation  dialog  box  for  as  long  as  the  application 
continues  to  run.    If,  for  example,  a  user  confirms  that 
Microsoft Word is allowed to write to the file MyFile.doc, 
then  until Microsoft Word is exited it will be allowed to 
write  to  that  file  without  requiring  another  confirmation.  
This  is  very  useful  when  someone  is  editing  a  protected 
document and will be saving the document frequently.  If 
a  different  application  tries  to  access the  MyFile.doc file 
after  a  response  has  been  cached  it  will  still  require  the 
user to confirm the action. 
It is possible that a malicious program might perform a 
malicious  action  at  some  point  after  the user has already 
cached  a  confirmation.    This  is  a  not  a  very  significant 
threat  because  the  user  has  already  chosen  to  trust  this 
application  the  first  time.    Additionally,  there  would  be 
little  to  distinguish  the  first  attempt  to  access  a  file  as 
benign and a subsequent attempt as malicious. 
3.4. Evaluating the FileMonster 
For the FileMonster to be a useful tool it must provide 
protection against malicious software while maintaining a 
low  profile.    If  the  user  is  frequently  asked  to  confirm 
actions then they will quickly begin to ignore FileMonster 
dialog boxes or to turn the tool off entirely.  This has been 
demonstrated  before  with  security  features  such  as 
Microsoft  Internet  Explorer’s  warnings  about  accepting 
cookies.  Though a potentially useful security feature, the 
frequency of the warnings causes most users to turn it off. 
The goal of our work is to tune the FileMonster to the 
point  where  it  produces  a  minimum  number  of  false 
alarms,  while  still  maintaining  its  effectiveness  against 
malicious  threats.    We  consider  a  false  alarm  to  be  a 
confirmation  request  that  is  caused  by  normal  benign 
system  use.    To  achieve  this  goal  we  instrumented  the 
prototype  with  some  basic  logging  capabilities.    The 
FileMonster records its uptime and logs the date and time 
that every user confirmation is requested.  A small set of 
users  was  selected  as  a 
test  set  and  a  standard 
configuration  policy  was  used.    These  users  were  given 
basic  training  in  the  use  of  the  FileMonster,  and  were 
taught  to  distinguish  between  common  false  alarms  and 
likely malicious threats.  The application associations and 
file  type  permissions  used  during  this  evaluation  are 
shown in Table 1. 
.DOC 
Table 1.  FileMonster evalutation configuration 
File Extension  Permissions  Application 
Associations 
(Ignore on Access) 
Microsoft Word 
Microsoft Outlook 
Microsoft 
PowerPoint 
(Microsoft Visual 
Studio Linking 
utilities) 
Microsoft Excel 
Confirm on 
Write 
Confirm on 
Write 
Confirm on 
Write 
.PPT 
.EXE 
.XLS 
.SKR 
(PGP Secret 
Key Ring 
Files) 
Confirm on 
Access 
Confirm on 
Access 
(PGP Utilities) 
This policy protects many of the basic file types that a 
Microsoft  Windows  user  encounters  on  a  daily  basis.    It 
assumes that the Microsoft applications listed are trusted, 
and  that  they  are  not  being  manipulated  by  malicious 
software.  Throughout the test we employed the usability 
features  described  above  (such  as  session  caching).  
During  this  test  phase users were asked not to adjust the 
configuration from its initial setting. 
We  logged  FileMonster  activity  across  our  test  set  of 
users  for  approximately  two  months.    Test  subjects 
continued  to  use  their  computers  for  normal  day-to-day 
activities.    During  this  time  period  we  found  that  the 
FileMonster resulted in an average of 1½ dialogs during a 
24-hour  period.    We  assume  all  of  these  confirmation 
requests to be false alarms because neither our corporate 
antivirus solutions nor the test users identified a malicious 
attack during this time frame (it would be ideal to test for 
false  alarms  in  sterile  environment,  but  the  duration  of 
these tests made this difficult). 
It  is  difficult  to  quantify  an  acceptable  number  of 
spurious  confirmation  requests,  but  the  results  we  were 
getting  (about  1½  alerts  per  day)  seemed  too  numerous 
for the FileMonster to be truly unobtrusive.  Discussions 
with test candidates indicated that the FileMonster tended 
to  seek  user  confirmation  during  web  browsing  sessions 
using  Internet  Explorer.    Further  examination  narrowed 
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:28:30 UTC from IEEE Xplore.  Restrictions apply. 
this  down to sessions where Microsoft Word, Excel, and 
PowerPoint  files  were  being  viewed  within  the  Internet 
Explorer browser.  The dialog boxes were triggered when 
a  new  IE  instance  attempted  to  overwrite  or  delete 
temporary files created by a previous instance. 
A  quick  fix  was  made  to  the  FileMonster  to  ignore 
Internet  Explorer’s  temporary  files.    This  could  be  done 
easily  because  these  files  are  always  stored  in  the  same 
location.    A  better  solution  to  this  problem  is  extending 
the  FileMonster  to  allow  users  to  specify  rules  such  as 
these on-the-fly.  After making these changes we resumed 
our evaluation.  This simple change had a dramatic effect 
on  the  number  of  false  alarms.    During  a  test  period  of 
similar  length  we  found  that  the  number  of  dialogs  was 
reduced  to  an  average  of  one  per  week.    This  is  a 
significant  improvement  over  the  original  results  and  we 
believe  that  we  can  continue  to  push  this  number  even 
lower by determining the cause of other false alarms.   
4. How FileMonster works 
To  implement  FileMonster’s  file  access  confirmation 
feature  we  need  a  way  of  detecting  when  a  process  is 
about to read from or write to a file.  One way this could 
be  done  is  to  examine  each  function  call  that  is  made to 
WriteFile  and  ReadFile.    Although  this  would  give  us 
very 
file 
manipulation, it would result in our having to intercept a 
very  large  number  of  function  calls  (these  are  two 
extremely heavily used functions).   
fine-grained  control  over  a  process’s 
An  alternative  to  intercepting  the  individual  attempts 
to read and write to a file is to regulate the type of access 
that  is  permitted  when  a  process  gets  a  handle  to  a  file.  
On the Windows NT/2000 operating system all file access 
occurs 
that  are 
manipulated from user-space through file handles.  When 
a  user-level  application  requests  a  file  handle  it  must 
specify  at  that  time  whether  it  wants  permission  to  read 
from or write to that file. 
through  kernel  file  system  objects 
A  user-level  application  has  access  to  many  functions 
in the Win32 API that will return a file handle or result in 
data  being  written  to  a  file.    For  example  the  user-level 
functions  CreateFile,  OpenFile, and _open all return file 
handles.    Identifying  all  of  the  user-level  functions  that 
can access files could be rather difficult, but fortunately it 
is completely unnecessary.  All file handles correspond to 
file  system objects within the kernel, and access to these 
objects  is  controlled  by  the  Windows  NT/2000  kernel 
system  call  ZwCreateFile.    Any  user-level  applications 
that  want  to  manipulate  files  are  transparently  routed 
through this function within the kernel.  Note that despite 
its  misleading  name,  this  function  is  not  simply  for 
creating  new  files.    The  ZwCreateFile  function  is  used 
whenever  a  process  needs  to  get  a  handle  to  a  file  for 
future read or write operations.  The ZwCreateFile system 
call will be invoked prior to any type of file I/O. 
One  of  the  parameters  that  must  be  passed  to 
ZwCreateFile indicates the type of access that the process 
is requesting.  Valid access types include read, write, and 
query.  By looking at the ZwCreateFile file function call 
we can determine what file an application is about to use 
and how it intends to use it. 
4.1. System call interception 
Having  determined  the  function  that  will  allow  us  to 
implement  the  FileMonster’s  file  access  confirmation 
feature we will now discuss how to go about intercepting 
this  function  call.    For  our  prototype  to  be  successful  in 
protecting  against  malicious  code  it  must  be  non-
bypassable.  This means that there cannot be any way for 
malicious  code  to  circumvent  or  remove  our  function 
interception  mechanism.    We  are  also  interested  in 
intercepting file access from all processes running on the 
system,  not  just  from  select  applications.    All  of  these 
requirements  indicate  that  the  correct  location  for  us  to 
place our interception mechanism is within the Windows 
NT/2000 kernel. 
The  Windows  NT/2000  kernel  can  only  be  modified 
through  the  installation  of  device  drivers.    Device  driver 
installation  is  tightly  regulated  by  the  operating  system 
and is restricted to administrative users.  This ensures that 