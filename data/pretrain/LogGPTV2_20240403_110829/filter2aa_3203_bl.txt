of 10.0.48.1 and the next-hop interface of the network adapter that is attached to the 10.0.48.0/24 
subnet. 
5. The Web server checks its ARP cache for an entry with the IPv4 address of 10.0.48.1 and finds a 
match. 
6. Using the ARP cache entry for 10.0.48.1, the Web server sends the unicast TCP SYN-ACK segment 
destined for 10.0.13.110 to the MAC address of Router 3's interface on the 10.0.48.0/24 subnet. 
7. Router 3 receives the TCP SYN-ACK segment. 
8. Router 3 checks its route cache for an entry for 10.0.13.110 and does not find a match. 
9. Router 3 performs the route determination process for the destination address 10.0.13.110. The 
closest matching route is the route for 10.0.13.0/24. Router 3 sets the next-hop address to 10.0.21.1 
and the next-hop interface to the network adapter that is attached to the 10.0.21.0/24 subnet. 
10. Router 3 updates its route cache with an entry for 10.0.13.110 with the next-hop IPv4 address of 
10.0.21.1 and the next-hop interface of the network adapter that is attached to the 10.0.21.0/24 
subnet. 
11. Router 3 checks its ARP cache for an entry with the IPv4 address of 10.0.21.1 and finds a match. 
Chapter 10 – TCP/IP End-to-End Delivery 
TCP/IP Fundamentals for Microsoft Windows  
Page: 291 
12. Using the ARP cache entry for 10.0.21.1, Router 3 forwards the unicast TCP SYN-ACK segment 
destined for 10.0.13.110 to Router 1's MAC address on the 10.0.21.0/24 subnet. 
13. Router 1 receives the TCP SYN-ACK segment. 
14. Router 1 checks its route cache for an entry for 10.0.13.110 and finds a match. 
15. Using the route cache entry for 10.0.13.110, Router 1 sets the next-hop address to 10.0.13.110 and 
the next-hop interface to the network adapter that is attached to the 10.0.13.0/24 subnet. 
16. Router 1 checks its ARP cache for an entry with the IPv4 address of 10.0.13.110 and finds a match. 
17. Using the ARP cache entry for 10.0.13.110, Router 1 forwards the unicast TCP SYN-ACK segment 
destined for 10.0.13.110 to the MAC address of the Web client's interface on the 10.0.13.0/24 
subnet. 
18. The Web client receives the TCP SYN-ACK segment.  
For the end-to-end delivery of the TCP SYN-ACK segment, the following has occurred: 
The Web server sent the TCP SYN-ACK segment, and Router 3 and Router 1 forwarded it over the 
10.0.48.0/24, 10.0.21.0/24, and 10.0.13.0/24 subnets to the Web client. 
The Web server's route cache has a new entry for 10.0.13.110. 
Router 3's route cache has a new entry for 10.0.13.110. 
TCP ACK Segment to the Web Server 
When the Web client sends the TCP ACK segment to the Web server, the following process occurs: 
1. The Web client constructs a TCP ACK segment message with the source IPv4 address of 
10.0.13.110 and the destination IPv4 address of 10.0.48.12. 
2. The Web client checks its route cache for an entry for the IPv4 address of 10.0.48.12 and finds a 
match. 
3. Using the route cache entry for 10.0.48.12, the Web client sets the next-hop address to 10.0.13.1 
and the next-hop interface to the network adapter that is attached to the 10.0.13.0/24 subnet. 
4. The Web client checks its ARP cache for an entry with the IPv4 address of 10.0.13.1 and finds a 
match. 
5. Using the ARP cache entry for 10.0.13.1, the Web client sends the unicast TCP ACK segment 
destined for 10.0.48.12 to the MAC address of Router 1's interface on the 10.0.13.0/24 subnet. 
6. Router 1 receives the TCP ACK segment, checks its route cache for an entry for 10.0.48.12, and 
finds a match. 
7. Using the route cache entry for 10.0.48.12, Router 1 sets the next-hop address to 10.0.21.3 and the 
next-hop interface to the network adapter that is attached to the 10.0.21.0/24 subnet. 
8. Router 1 checks its ARP cache for an entry with the IPv4 address of 10.0.21.3 and finds a match. 
9. Using the ARP cache entry for 10.0.21.3, Router 1 forwards the unicast TCP ACK segment destined 
for 10.0.48.12 to Router 3's MAC address on the 10.0.21.0/24 subnet. 
10. Router 3 receives the TCP ACK segment, checks its route cache for an entry for 10.0.48.12, and 
Chapter 10 – TCP/IP End-to-End Delivery 
TCP/IP Fundamentals for Microsoft Windows  
Page: 292 
finds a match. 
11. Using the route cache entry for 10.0.48.12, Router 3 sets the next-hop address to the packet's 
destination address of 10.0.48.12 and the next-hop interface to the network adapter that is attached 
to the 10.0.48.0/24 subnet. 
12. Router 3 checks its ARP cache for an entry with the IPv4 address of 10.0.48.12 and finds a match. 
13. Using the ARP cache entry for 10.0.48.12, Router 3 forwards the unicast TCP ACK segment 
destined for 10.0.48.12 to the MAC address of the Web server's interface on the 10.0.47.0/24 subnet. 
14. The Web server receives the TCP ACK segment.  
15. Windows Sockets indicates to the Web browser that the requested TCP connection is complete. 
The Web client sent the TCP ACK segment, which Router 1 and Router 3 forwarded over the 
10.0.13.0/24, 10.0.21.0/24, and 10.0.48.0/24 subnets to the Web server. 
HTTP Get Message to the Web Server 
To download the contents of a Web page, a Web browser sends an HTTP Get message containing the 
name of the page. When the Web client sends the HTTP Get message to the Web server, the following 
process occurs: 
1. When the Web browser receives the indication that the TCP connection is complete, the browser 
constructs an HTTP Get message that requests the contents of the Web page from the Web server. 
In the message, the source IPv4 address is 10.0.13.110, and the destination IPv4 address is 
10.0.48.12. 
2. The Web client checks its route cache for an entry for the IPv4 address of 10.0.48.12 and finds a 
match. 
3. Using the route cache entry for 10.0.48.12, the Web client sets the next-hop address to 10.0.13.1 
and the next-hop interface to the network adapter that is attached to the 10.0.13.0/24 subnet. 
4. The Web client checks its ARP cache for an entry with the IPv4 address of 10.0.13.1 and finds a 
match. 
5. Using the ARP cache entry for 10.0.13.1, the Web client sends the unicast HTTP Get message 
destined for 10.0.48.12 to the MAC address of Router 1's interface on the 10.0.13.0/24 subnet. 
6. Router 1 receives the HTTP Get message, checks its route cache for an entry for 10.0.48.12, and 
finds a match. 
7. Using the route cache entry for 10.0.48.12, Router 1 sets the next-hop address to 10.0.21.3 and the 
next-hop interface to the network adapter that is attached to the 10.0.21.0/24 subnet. 
8. Router 1 checks its ARP cache for an entry with the IPv4 address of 10.0.21.3 and finds a match. 
9. Using the ARP cache entry for 10.0.21.3, Router 1 forwards the unicast HTTP Get message destined 
for 10.0.48.12 to Router 3's MAC address on the 10.0.21.0/24 subnet. 
10. Router 3 receives the HTTP Get message, checks its route cache for an entry for 10.0.48.12, and 
finds a match. 
11. Using the route cache entry for 10.0.48.12, Router 3 sets the next-hop address to the packet's 
Chapter 10 – TCP/IP End-to-End Delivery 
TCP/IP Fundamentals for Microsoft Windows  
Page: 293 
destination address of 10.0.48.12 and the next-hop interface to the network adapter that is attached 
to the 10.0.48.0/24 subnet. 
12. Router 3 checks its ARP cache for an entry with the IPv4 address of 10.0.48.12 and finds a match. 
13. Using the ARP cache entry for 10.0.48.12, Router 3 forwards the unicast HTTP Get message 
destined for 10.0.48.12 to the MAC address of the Web server's interface on the 10.0.47.0/24 subnet. 
14. The Web server receives the HTTP Get message.  
The Web client sent the HTTP Get message, which Router 1 and Router 3 forwarded over the 
10.0.13.0/24, 10.0.21.0/24, and 10.0.48.0/24 subnets to the Web server. 
HTTP Get-Response Message to the Web Client 
The response to an HTTP Get message is an HTTP Get-Response message containing the HTML text 
of the Web page. To simplify this example, assume that the entire Web page can fit within a single TCP 
segment. When the Web server sends the HTTP Get-Response message to the Web client, the 
following occurs: 
1. The Web server constructs an HTTP Get-Response message with the source IPv4 address of 
10.0.48.12 and the destination IPv4 address of 10.0.13.110. 
2. The Web server checks its route cache for an entry for the IPv4 address of 10.0.13.110 and finds a 
match. 
3. Using the route cache entry for 10.0.13.110, the Web server sets the next-hop IPv4 address to 
10.0.48.1 and the next-hop interface to the network adapter attached to the 10.0.48.0/24 subnet. 
4. The Web server checks its ARP cache for an entry with the IPv4 address of 10.0.48.1 and finds a 
match. 
5. Using the ARP cache entry for 10.0.48.1, the Web server sends the unicast HTTP Get-Response 
message destined for 10.0.13.110 to the MAC address of Router 3's interface on the 10.0.48.0/24 
subnet. 
6. Router 3 receives the HTTP Get-Response message. 
7. Router 3 checks its route cache for an entry for 10.0.13.110 and finds a match. 
8. Using the route cache entry for 10.0.13.110, Router 3 sets the next-hop address to 10.0.21.1 and the 
next-hop interface to the network adapter that is attached to the 10.0.21.0/24 subnet. 
9. Router 3 checks its ARP cache for an entry with the IPv4 address of 10.0.21.1 and finds a match. 
10. Using the ARP cache entry for 10.0.21.1, Router 3 forwards the unicast HTTP Get-Response 
message destined for 10.0.13.110 to Router 1's MAC address on the 10.0.21.0/24 subnet. 
11. Router 1 receives the HTTP Get-Response message. 
12. Router 1 checks its route cache for an entry for 10.0.13.110 and finds a match. 
13. Using the route cache entry for 10.0.13.110, Router 1 sets the next-hop address to 10.0.13.110 and 
the next-hop interface to the network adapter that is attached to the 10.0.13.0/24 subnet. 
14. Router 1 checks its ARP cache for an entry with the IPv4 address of 10.0.13.110 and finds a match. 
Chapter 10 – TCP/IP End-to-End Delivery 
TCP/IP Fundamentals for Microsoft Windows  
Page: 294 
15. Using the ARP cache entry for 10.0.13.110, Router 1 forwards the unicast HTTP Get-Response 
message destined for 10.0.13.110 to the MAC address of the Web client's interface on the 
10.0.13.0/24 subnet. 
16. The Web client receives the HTTP Get-Response message.  
17. The Web browser constructs the visual representation of the Web page at 
http://web1.example.com/example.htm. 
The Web server sent the HTTP Get-Response message, which Router 3 and Router 1 forwarded over 
the 10.0.48.0/24, 10.0.21.0/24, and 10.0.13.0/24 subnets to the Web client. 
Chapter 10 – TCP/IP End-to-End Delivery 
TCP/IP Fundamentals for Microsoft Windows  
Page: 295 
End-to-End IPv6 Delivery Process 
Similar to IPv4, the end-to-end delivery process for IPv6 traffic consists of the following: 
The source host sends the packet either to a router or to the final destination (if the destination is a 
neighbor). 
The router forwards the packet either to another router or to the final destination (if the destination is a 
neighbor). 
The destination host receives the packet and passes the data to the appropriate application. 
Note  The following processes assume that the IPv6 header contains no extension headers. 
IPv6 on the Source Host 
The process by which an IPv6 host sends an IPv6 packet depends on a combination of the local host 
data structures and the Neighbor Discovery protocol. An IPv6 host uses the following algorithm when 
sending a packet to an arbitrary destination: 
1. Specify either a default or application-specified value for the Hop Limit field. 
2. Check the destination cache for an entry that matches the destination address. The destination 
cache is a table that stores the next-hop IPv6 addresses and interfaces for destinations to which 
traffic has been recently sent. You can view the destination cache with the netsh interface ipv6 
show destinationcache command. 
3. If the destination cache contains an entry that matches the destination address, obtain the next-hop 
address and interface index from the destination cache entry, and go to step 7. 
4. Check the local IPv6 routing table for the longest matching route with the lowest metric to the 
destination address. If multiple longest matching routes have the lowest metric, choose a route to 
use. 
5. Based on chosen route, determine the next-hop interface and address used for forwarding the 
packet.  
6. If no route is found, assume that the destination is directly reachable and sets the next-hop IPv6 
address to the destination address and chooses an interface. 
7. Update the destination cache. 
8. Check the neighbor cache for an entry that matches the next-hop address. The neighbor cache 
stores neighboring IPv6 addresses and their corresponding MAC address. You can view the 
neighbor cache with the netsh interface ipv6 show neighbors command. 
9. If the neighbor cache contains an entry that matches the next-hop address, obtain the link-layer 
address. 
10. If the neighbor cache does not contain an entry that matches the next-hop address, use address 
resolution (an exchange of multicast Neighbor Solicitation and unicast Neighbor Advertisement 
messages) to obtain the link-layer address for the next-hop address. 
11. If address resolution fails, indicate an error. 
Chapter 10 – TCP/IP End-to-End Delivery 
TCP/IP Fundamentals for Microsoft Windows  
Page: 296 
12. Send the packet by using the link-layer address of the neighbor cache entry. 
This process is for a single-homed host. For multi-homed hosts, the route determination process 
depends on the source address and whether the host supports strong or weak hosts sends. For strong 
host sends, the next-hop interface must be assigned the source address of the packet. For weak host 
sends, the next-hop interface does not have to be assigned the source address of the packet. 
Figure 10-6 shows the IPv6 sending process for a source host. 
Figure 10-6  The IPv6 sending process for a source host 
IPv6 on the Router 
An IPv6 router uses the following algorithm when it receives and forwards a packet to an arbitrary 
unicast or anycast destination: 
1. Perform optional header error checks such as ensuring that the value of the Version field is 6 and 
that the source address is not the loopback address (::1) or a multicast address. 
2. Verify whether the destination address in the IPv6 packet corresponds to an address that is assigned 
to a router interface. 
If so, process the IPv6 packet as the destination host. (See step 3 in "IPv6 on the Destination Host" 
in this chapter.) 
3. Decrement the value of the Hop Limit field by 1. 
Chapter 10 – TCP/IP End-to-End Delivery 
TCP/IP Fundamentals for Microsoft Windows  
Page: 297 
If the value of the Hop Limit field is less than 1, send an Internet Control Message Protocol for IPv6 
(ICMPv6) Time Exceeded-Hop Limit Exceeded in Transit message to the sender, and discard the 
packet. 
4. If the value of the Hop Limit field is greater than 0, update the Hop Limit field in the IPv6 header of 
the packet. 
5. Check the destination cache for an entry that matches the destination address. 
6. If the destination cache contains an entry that matches the destination address, obtain the next-hop 
IPv6 address and interface from the destination cache entry, and go to step 10. 
7. Check the local IPv6 routing table for the longest matching route to the destination IPv6 address. 
8. Based on the longest matching route, determine the next hop IPv6 address and interface to use for 
forwarding the packet. 
If no route is found, send an ICMPv6 Destination Unreachable-No Route to Destination message to 
the source host, and discard the packet. 
9. Update the destination cache. 
10. If the interface on which the packet was received is the same as the interface on which the packet is 
being forwarded, the interface is a point-to-point link, and the Destination Address field matches a 
prefix assigned to the interface, send an ICMPv6 Destination Unreachable-Address Unreachable 
message to the source host, and discard the packet. This step prevents the needless circular 
forwarding of IPv6 packets between the two interfaces on a point-to-point link for a packet whose 
destination matches the prefix of the point-to-point link but does not match the address of either 
interface. 
11. If the interface on which the packet was received is the same as the interface on which the packet is 
being forwarded and the Source Address field matches a prefix assigned to the interface, send a 
Redirect message to the source host. 
12. Compare the IP MTU of the next-hop interface to the size of the IPv6 packet being forwarded.  
If the IP MTU of the next-hop interface is smaller than the packet size, send an ICMPv6 Packet Too 
Big message to the source host, and discard the packet. 
13. Check the neighbor cache for an entry that matches the next-hop IPv6 address. 
14. If the neighbor cache contains an entry that matches the next-hop IPv6 address, obtain the link-layer 
address. 
15. If the neighbor cache does not contain an entry that matches the next-hop address, use address 
resolution to obtain the link-layer address for the next-hop address. 
If address resolution fails, send an ICMPv6 Destination Unreachable-Address Unreachable message 
to the source host, and discard the packet. 
16. Send the packet by using the link-layer address of the neighbor cache entry. 
Figures 10-7 and 10-8 show the IPv6 router forwarding process. 
Chapter 10 – TCP/IP End-to-End Delivery 
TCP/IP Fundamentals for Microsoft Windows  
Page: 298 
Figure 10-7  IPv6 router forwarding process (part 1) 
Chapter 10 – TCP/IP End-to-End Delivery 
TCP/IP Fundamentals for Microsoft Windows  
Page: 299 
Figure 10-8  IPv6 router forwarding process (part 2) 
Each IPv6 router in the path between the source host and the destination host repeats this process. 
IPv6 on the Destination Host 
A destination IPv6 host uses the following algorithm when it receives an IPv6 packet: 
1. Perform optional header error checks such as ensuring that the value of the Version field is 6 and 
that the source address is not the loopback address (::1) or a multicast address. 
2. Verify whether the destination address in the IPv6 packet corresponds to an IPv6 address that is 
assigned to a local host interface. 
If the destination address is not assigned to a local host interface, discard the IPv6 packet. 
3. Verify that the value of the Next Header field corresponds to an upper layer protocol in use on the 
host. 
If the protocol does not exist, send an ICMPv6 Parameter Problem-Unrecognized Next Header Type 
Encountered message back to the sender, and discard the packet. 
4. If the upper layer PDU is not a TCP segment or UDP message, pass the upper layer PDU to the 
appropriate protocol.  
5. If the upper layer PDU is a TCP segment or UDP message, check the destination port. 
Chapter 10 – TCP/IP End-to-End Delivery 
TCP/IP Fundamentals for Microsoft Windows  
Page: 300 
If no application exists for the UDP port number, send an ICMPv6 Destination Unreachable-Port 
Unreachable message back to the sender, and discard the packet. If no application exists for the 
TCP port number, send a TCP Connection Reset segment back to the sender, and discard the 
packet. 
6. If an application exists for the UDP or TCP destination port, process the contents of the TCP 
segment or UDP message. 
This process is for a single-homed host. For multi-homed hosts, the receive process depends on 
whether the host supports strong or weak hosts receives. For strong host receives, the receiving 
interface must be assigned the destination address of the packet. For weak host receives, the receiving 
interface does not have to be assigned the destination address of the packet. 
Figure 10-9 shows the IPv6 receiving process on the destination host. 
Figure 10-9  IPv6 receiving process on the destination host 
Chapter 10 – TCP/IP End-to-End Delivery 
TCP/IP Fundamentals for Microsoft Windows  
Page: 301 
Step-by-Step IPv6 Traffic Example 
To show the IPv6 end-to-end delivery process, this section steps through an example of IPv6 traffic 
when a user types the URL of a Web page in the Address bar of a Web browser and views a Web 