logging.basicConfig(filename='myProgramLog.txt', level=logging.DEBUG, format='
%(asctime)s - %(levelname)s - %(message)s')
日志信息将被保存到myProgramLog.txt文件中。虽然日志消息很有用，但它们
可能塞满屏幕，让你很难读到程序的输出。将日志信息写入到文件，让屏幕保持干
净，又能保存信息，这样在运行程序后，可以阅读这些信息。可以用任何文件编辑
器打开这个文本文件，诸如Notepad或TextEdit。
10.5 IDLE 的调试器
“调试器”是IDLE的一项功能，让你每次执行一行程序。调试器将运行一行代
码，然后等待你告诉它继续。像这样让程序运行“在调试器之下”，你可以随便花
多少时间，检查程序运行时任意一个时刻的变量的值。对于追踪缺陷，这是一个很
有价值的工具。
要启用IDLE的调试器，就在交互式环境窗口中点击DebugDebugger。这将打
开调试控制（Debug Control）窗口，如图10-1所示。
图10-1 调试控制窗口
182 Python编程快速上手——让繁琐工作自动化
当调试控制窗口出现后，勾选全部4个复选框：Stack、Locals、Source和Globals。
这样窗口将显示全部的调试信息。调试控制窗口显示时，只要你从文件编辑器运行程
序，调试器就会在第一条指令之前暂停执行，并显示下面的信息：
• 将要执行的代码行；
• 所有局部变量及其值的列表；
• 所有全局变量及其值的列表。
你会注意到，在全局变量列表中，有一些变量你没有定义，诸如__builtins__、
__doc__、__file__，等等。它们是Python在运行程序时，自动设置的变量。这些变
量的含义超出了本书的范围，你可以暂时忽略它们。
程序将保持暂停，直到你按下调试控制窗口的5个按钮中的一个：Go、Step、
Over、Out或Quit。
10.5.1 Go
点击Go按钮将导致程序正常执行至终止，或到达一个“断点”（断点在本章稍
后介绍）。如果你完成了调试，希望程序正常继续，就点击Go按钮。
10.5.2 Step
点击Step按钮将导致调试器执行下一行代码，然后再次暂停。如果变量的值发
生了变化，调试控制窗口的全局变量和局部变量列表就会更新。如果下一行代码是一
个函数调用，调试器就会“步入”那个函数，跳到该函数的第一行代码。
10.5.3 Over
点击Over按扭将执行下一行代码，与Step按钮类似。但是，如果下一行代码
是函数调用，Over按钮将“跨过”该函数的代码。该函数的代码将以全速执行，调
试器将在该函数返回后暂停。例如，如果下一行代码是print() 调用，你实际上不关
心内建print() 函数中的代码，只希望传递给它的字符串打印在屏幕上。出于这个原
因，使用Over按钮比使用Step按钮更常见。
10.5.4 Out
点击Out按钮将导致调试器全速执行代码行，直到它从当前函数返回。如果你
用Step按钮进入了一个函数，现在只想继续执行指令，直到该函数返回，那就点击
Out按钮，从当前的函数调用“走出来”。
10.5.5 Quit
如果你希望完全停止调试，不必继续执行剩下的程序，就点击Quit 按钮。Quite 按
钮将马上终止该程序。如果你希望再次正常运行你的程序，就再次选择DebugDebugger，
第10章 调试 183
禁用调试器。
10.5.6 调试一个数字相加的程序
打开一个新的文件编辑器窗口，输入以下代码：
print('Enter the first number to add:')
first = input()
print('Enter the second number to add:')
second = input()
print('Enter the third number to add:')
third = input()
print('The sum is ' + first + second + third)
将它保存为 buggyAddingProgram.py，不启用调试器，第一次运行它。程序的
输出像这样：
Enter the first number to add:
5
Enter the second number to add:
3
Enter the third number to add:
42
The sum is 5342
这个程序没有崩溃，但求和显然是错的。让我们启用调试控制窗口，再次运行
它，这次在调试器控制之下。
当你按下F5或选择RunRun Module（启用DebugDebugger，选中调试控制窗
口的所有 4 个复选框），程序启动时将暂停在第 1 行。调试器总是会暂停在它将要
执行的代码行上。调试控制窗口看起来如图10-2所示。
图10-2 程序第一次在调试器下运行时的调试控制窗口
184 Python编程快速上手——让繁琐工作自动化
点击一次Over按钮，执行第一个print() 调用。这里应该使用Over按钮，而不
是Step，因为你不希望进入到print() 函数的代码中。调试控制窗口将更新到第2行，
文件编辑器窗口的第 2 行将高亮显示，如图 10-3 所示。这告诉你程序当前执行到
哪里。
图10-3 点击Over按钮后的调试控制窗口
再次点击 Over 按钮，执行 input() 函数调用，当 IDLE 等待你在交互式环境窗
口中为input() 调用输入内容时，调试控制窗口中的按钮将被禁用。输入5并按回车。
调试控制窗口按钮将重新启用。
继续点击 Over 按钮，输入 3 和 42 作为接下来的两个数，直到调试器位于
第 7行，程序中最后的 print() 调用。调试控制窗口应该如图 10-4所示。可以看
到，在全局变量的部分，第一个、第二个和第三个变量设置为字符串值，而不
是整型值。当最后一行执行时，这些字符串连接起来，而不是加起来，导致了
这个缺陷。
用调试器单步执行程序很有用，但也可能很慢。你常常希望程序正常运行，直
到它到达特定的代码行。你可以使用断点，让调试器做到这一点。
10.5.7 断点
“断点”可以设置在特定的代码行上，当程序执行到达该行时，它迫使调试器
暂停。在一个新的文件编辑器窗口中，输入以下程序，它模拟投掷 1000 次硬币。
第10章 调试 185
将它保存为coinFlip.py。
图10-4 在最后一行的调试控制窗口。这些变量被设置为字符串，导致了这个缺陷
import random
heads = 0
for i in range(1, 1001):
 if random.randint(0, 1) == 1:
heads = heads + 1
if i == 500:
 print('Halfway done!')
p rint('Heads came up ' + str(heads) + ' times.')
在半数时间里，random.randint（0，1）调用将返回 0，在另外半数时间将返
回 1。这可以用来模拟 50/50 的硬币投掷，其中 1 代表正面。当不用调试器运行该
程序时，它很快输出下面的内容：
Halfway done!
Heads came up 490 times.
如果启用调试器运行这个程序，就必须点击几千次Over按钮，程序才能结束。
如果你对程序执行到一半时heads的值感兴趣，等1000次硬币投掷完500次，可
以在代码行print（'Halfway done!'）上设置断点。要设置断点，在文件编辑器中该
行代码上点击右键，并选择Set Breakpoint，如图10-5所示。
186 Python编程快速上手——让繁琐工作自动化
图10-5 设置断点
你不会在if语句上设置断点，因为if语句会在循环的每次迭代中都执行。通过
在if语句内的代码上设置断点，调试器就会只在执行进入if语句时才中断。
带有断点的代码行会在文件编辑器中以黄色高亮显示。如果在调试器下运行该程
序，开始它会暂停在第一行，像平时一样。但如果点击 Go，程序将全速运行，直
到设置了断点的代码行。然后可以点击Go、Over、Step或Out，正常继续。
如果希望清除断点，在文件编辑器中该行代码上点击右键，并从菜单中选择
Clear Breakpoint。黄色高亮消失，以后调试器将不会在该行代码上中断。
10.6 小结
断言、异常、日志和调试器，都是在程序中发现和预防缺陷的有用工具。用
Python语句实现的断言，是实现心智正常检查的好方式。如果必要的条件没有保持
为True，它将尽早给出警告。断言所针对的错误，是程序不应该尝试恢复的，而是
应该快速失败。否则，你应该抛出异常。
异常可以由try和except语句捕捉和处理。logging模块是一种很好的方式，可以
在运行时查看代码的内部，它比使用print() 函数要方便得多，因为它有不同的日志
级别，并能将日志写入文本文件。
调试器让你每次单步执行一行代码。或者，可以用正常速度运行程序，并让
调试器暂停在设置了断点的代码行上。利用调试器，你可以看到程序在运行期间，
任何时候所有变量的值。
这些调试工具和技术将帮助你编写正确工作的程序。不小心在代码中引入缺
陷，这是不可避免的，不论你有多少年的编码经验。
10.7 习题
1．写一条 assert 语句，如果变量 spam 是一个小于 10 的整数，就触发
第10章 调试 187
AssertionError。
2．编写一条 assert 语句，如果 eggs 和 bacon 包含的字符串彼此相同，而且不
论大小写如何，就触发 AssertionError（也就是说，'hello' 和 'hello' 被认为相同，
'goodbye' 和 'GOODbye' 也被认为相同）。
3．编写一条assert语句，总是触发AssertionError。
4．为了能调用logging.debug()，程序中必须加入哪两行代码？
5．为了让logging.debug() 将日志消息发送到名为programLog.txt的文件中，程
序必须加入哪两行代码？
6．5个日志级别是什么？
7．你可以加入哪一行代码，禁用程序中所有的日志消息？
8．显示同样的消息，为什么使用日志消息比使用print() 要好？
9．调试控制窗口中的Step、Over和Out按钮有什么区别？
10．在点击调试控制窗口中的Go按钮后，调试器何时会停下来？
11．什么是断点？
12．在IDLE中，如何在一行代码上设置断点？
10.8 实践项目
作为实践，编程完成下面的任务。
调试硬币抛掷
下面程序的意图是一个简单的硬币抛掷猜测游戏。玩家有两次猜测机会（这
是一个简单的游戏）。但是，程序中有一些缺陷。让程序运行几次，找出缺陷，使
该程序能正确运行。
import random
guess = ''
while guess not in ('heads', 'tails'):
print('Guess the coin toss! Enter heads or tails:')
guess = input()
toss = random.randint(0, 1) # 0 is tails, 1 is heads
if toss == guess:
print('You got it!')
else:
print('Nope! Guess again!')
guesss = input()
if toss == guess:
print('You got it!')
else:
print('Nope. You are really bad at this game.')
188 Python编程快速上手——让繁琐工作自动化
11
第 章
从 Web 抓取信息
少数可怕的时候，我没有 Wi-Fi。这时才意识到，我在计
算机上所做的事，有多少实际上是在因特网上做的事。完全出
于习惯，我会发现自己尝试收邮件、阅读朋友的推特，或回答
问题：“在Kurtwood Smith演出1987年的机械战警之前，曾经
演过主角吗？”1
因为计算机上如此多的工作都与因特网有关，所以如果程序
能上网就太好了。“Web 抓取”是一个术语，即利用程序下载并
处理来自Web的内容。例如，Google运行了许多web抓取程序，对网页进行索引，
实现它的搜索引擎。在本章中，你将学习几个模块，让在 Python 中抓取网页变得很
容易。
webbrowser：是Python自带的，打开浏览器获取指定页面。
requests：从因特网上下载文件和网页。
Beautiful Soup：解析HTML，即网页编写的格式。
selenium：启动并控制一个 Web 浏览器。selenium能够填写表单，并模拟鼠标
在这个浏览器中点击。
1 答案是没有。
11.1 项目：利用 webbrowser 模块的 mapIt.py
webbrowser模块的open()函数可以启动一个新浏览器，打开指定的URL。在交
互式环境中输入以下代码：
>>> import webbrowser
>>> webbrowser.open('http://inventwithpython.com/')
Web 浏览器的选项卡将打开 URL http://inventwithpython.com/。这大概就是
webbrowser模块能做的唯一的事情。既使如此，open()函数确实让一些有趣的事情成为可
能。例如，将一条街道的地址拷贝到剪贴板，并在Google地图上打开它的地图，这是很
繁琐的事。你可以让这个任务减少几步，写一个简单的脚本，利用剪贴板中的内容在浏
览器中自动加载地图。这样，你只要将地址拷贝到剪贴板，运行该脚本，地图就会加载。
你的程序需要做到：
• 从命令行参数或剪贴板中取得街道地址。
• 打开Web浏览器，指向该地址的Google地图页面。
这意味着代码需要做下列事情：
• 从sys.argv读取命令行参数。
• 读取剪贴板内容。
• 调用webbrowser.open()函数打开外部浏览器。