例如:指定为local
Create view v1 as select \* from a where uid\=100 and uid\ create table user2 sekect username,uid,shell,homedir from user
where uid\>=100 and uid\=10 and uid\ create view v3 as select \* from user2 where uid \>=10 and
uid\ select \* from v3;
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| username \| uid \| shell \| homedir \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| systemd-network \| 192 \| /sbin/nologin \| / \|
\| abrt \| 173 \| /sbin/nologin \| /etc/abrt \|
\| rtkit \| 172 \| /sbin/nologin \| /proc \|
\| usbmuxd \| 113 \| /sbin/nologin \| / \|
\| qemu \| 107 \| /sbin/nologin \| / \|
\| pulse \| 171 \| /sbin/nologin \| /var/run/pulse \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
mysql\> show create view v3\\G;
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\* 1. row
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*
View: v3
Create View: CREATE ALGORITHM=UNDEFINED DEFINER=\`root\`@\`localhost\`
SQL SECURITY DEFINER VIEW \`v3\` AS select \`user2\`.\`username\` AS
\`username\`,\`user2\`.\`uid\` AS \`uid\`,\`user2\`.\`shell\` AS
\`shell\`,\`user2\`.\`homedir\` AS \`homedir\` from \`user2\` where
((\`user2\`.\`uid\` \>= 10) and (\`user2\`.\`uid\` \ update v3 set uid =9 where username=\"abrt\"; #修改uid=9的名字
ERROR 1369 (HY000): CHECK OPTION failed \'db9.v3\' #报错
mysql\> update v3 set uid =99 where username=\"abrt\";
#修改uid=99(范围内)
Query OK, 1 row affected (0.03 sec) #成功
Rows matched: 1 Changed: 1 Warnings: 0
3创建视图v4 数据来自于v3 条件是:uid\>=100 指定检查为:
mysql\> create view v4 as select \* from v3 where uid\>=100 with
cascaded check option;
Query OK, 0 rows affected (0.02 sec)
mysql\> show create view v4\\G;
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\* 1. row
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*
View: v4
Create View: CREATE ALGORITHM=UNDEFINED DEFINER=\`root\`@\`localhost\`
SQL SECURITY DEFINER VIEW \`v4\` AS select \`v3\`.\`username\` AS
\`username\`,\`v3\`.\`uid\` AS \`uid\`,\`v3\`.\`shell\` AS
\`shell\`,\`v3\`.\`homedir\` AS \`homedir\` from \`v3\` where
(\`v3\`.\`uid\` \>= 100) WITH CASCADED CHECK OPTION
修改数据操作:
mysql\> update v4 set uid=99 where username=\"qemu\";
ERROR 1369 (HY000): CHECK OPTION failed \'db9.v4\'
#视图创建条件\`uid\` \>= 100 所以修改uid为99就不符合
mysql\> update v4 set uid=1001 where username=\"qemu\";
ERROR 1369 (HY000): CHECK OPTION failed \'db9.v4\'
#因为视图v4创建是v3是基表,而v3的创建的条件为:uid \>=10 and
uid\ update v4 set uid=101 where username=\"qemu\";
Query OK, 1 row affected (0.05 sec)
Rows matched: 1 Changed: 1 Warnings: 0
## 设置视图表字段别名
视图中的字段名不可重复,多表查询中,如果有字段名一样,所以要定义别名
mysql\> select user.username,user2.username from user,user2 where
user.uid = user2.uid;
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| username \| username \| #查询出来的两个字段名相同
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| systemd-network \| systemd-network \|
\| polkitd \| polkitd \|
这时候利用这条语句创建视图是不行的,查询出来的两个username字段是无法创建的.
mysql\> select user.username as ausername,user2.username as busername
from user,user2 where user.uid = user2.uid;
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| ausername \| busername \| #查询出来的字段名不同
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| systemd-network \| systemd-network \|
\| polkitd \| polkitd \|
\| libstoragemgmt \| libstoragemgmt \|
\| colord \| colord \|
创建视图测试:
未取别名创建
取别名后创建
取别名方法
Select 字段名 别名 from 表名 #没有用as
Select 字段名 as 别名 from 表名 #用了as方法
可以给表定义别名,也可以给表字段取别名
给表字段别名:
mysql\> create view v6(name,bname) as select
user.username,user2.username from user,user2 where user.uid = user2.uid;
Query OK, 0 rows affected (0.04 sec)
mysql\> select \* from v6;
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| name \| bname \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| nobody \| abrt \|
\| systemd-network \| systemd-network \|
\| polkitd \| polkitd \|
\| libstoragemgmt \| libstoragemgmt \|
\| colord \| colord \|
\| saslauth \| saslauth \|
给表取别名
mysql\> create view v5(aname,wname) as
-\> select b.name, c.name from
-\> studentinfo b left join user2 c
-\> on
-\> b.name = c.name;
mysql\> show tables;
将studentinfo 表命名为 b user2 命名为 c
创建视图v5,数据来源为studentinfo表和user2表中的name,studentinfo表中的name字段重命名为aname,user2中的name字段重命名为bname
# 四:存储过程
存储过程,相当于是mysql语句组成的脚本
-   指的是数据库中保存的一系列sql命令的集合
-   可以在存储过程中使用变量/条件判断/流程控制等
存储过程优点:
-   提高性能
-   减轻网络负担
-   可以防止对表的直接访问
-   避免重复编写sql操作
## 创建存储过程
mysql\>delimiter // create procedure 名称() begin \...功能代码 end //
mysql\>delimiter ;
指定分隔符为"//" 创建过程 名称名() 开始 \...功能代码 结束 // 分隔符改回
;
#dilimiter 关键字用来指定存储过程的分隔符(默认为 ; )
#若没有指定分隔符,编译器会把存储过程当成sql语句进行处理,从而执行出错
mysql\> delimiter //
mysql\> create procedure a1()
-\> begin
-\> select \* from db9.user
-\> where id \ end
-\> //
Query OK, 0 rows affected (0.01 sec)
## 调用存储过程
mysql\>call 存储过程名称();
mysql\> call a1;
## 删除存储过程
mysql\>drop procedure 库名.存储过程名;
mysql\>drop procedure db9.a1;
## 查看存储过程
### 查看已有存储过程
mysql\> show procedure status;
mysql\> select db,name,type from mysql.proc where name=\"p3\" and
type=\"procedure\";
+\-\-\-\--+\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\--+
\| db \| name \| type \|
+\-\-\-\--+\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\--+
\| db9 \| p3 \| PROCEDURE \|
+\-\-\-\--+\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\--+
1 row in set (0.00 sec)
mysql\> Select db,name,type from mysql.proc where type=\"procedure\"\\G;
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\* 1. row
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*
db: db9
name: a1
type: PROCEDURE
### 查看存储过程具体代码
mysql\> select body from mysql.proc where name=\"a1\"\\G ;
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\* 1. row
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*
body: begin
select \* from db9.user
where id \ show global variables; #查看所有全局变量
mysql\> show global variables like \"%ver\"; #模糊查找
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| Variable_name \| Value \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| character_set_server \| latin1 \|
\| collation_server \| latin1_swedish_ci \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
2 rows in set (0.00 sec)
mysql\> show global variables like\"%name%\";
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| Variable_name \| Value \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| hostname \| client-50 \|
\| innodb_buffer_pool_filename \| ib_buffer_pool \|
\| lc_time_names \| en_US \|
\| log_bin_basename \| \|
\| lower_case_table_names \| 0 \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
8 rows in set (0.00 sec)
#### 输出全局变量
mysql\> select @@hostname;
+\-\-\-\-\-\-\-\-\-\-\--+
\| @@hostname \|
+\-\-\-\-\-\-\-\-\-\-\--+
\| client-50 \|
+\-\-\-\-\-\-\-\-\-\-\--+
1 row in set (0.00 sec)
mysql\> select @@hostname , @@version_comment;
+\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| @@hostname \| @@version_comment \|
+\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| client-50 \| MySQL Community Server (GPL) \|
+\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
1 row in set (0.00 sec)
#### 定义全局变量
mysql\> set global 变量名=值；
### 会话变量
#### 查看会话变量
mysql\> show session variables like \"sort_buffer_size\";
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\--+
\| Variable_name \| Value \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\--+
\| sort_buffer_size \| 262144 \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\--+
1 row in set (0.00 sec)
#### 设置会话变量
mysql\> set session sort_buffer_size=40000;
Query OK, 0 rows affected (0.00 sec)
mysql\> show session variables like \"sort_buffer_size\";
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
\| Variable_name \| Value \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
\| sort_buffer_size \| 40000 \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
1 row in set (0.01 sec)
### set定义自定义变量
mysql\> set \@age=9;
mysql\> set \@name=\"bob\";
mysql\> select \@age;
+\-\-\-\-\--+
\| \@age \|
+\-\-\-\-\--+
\| 9 \|
+\-\-\-\-\--+
mysql\> select \@name;
+\-\-\-\-\-\--+
\| \@name \|
+\-\-\-\-\-\--+
\| bob \|
+\-\-\-\-\-\--+
mysql\> select \@name,@age;
+\-\-\-\-\-\--+\-\-\-\-\--+
\| \@name \| \@age \|
+\-\-\-\-\-\--+\-\-\-\-\--+
\| bob \| 9 \|
+\-\-\-\-\-\--+\-\-\-\-\--+
1 row in set (0.00 sec)
### declare定义局部变量
只能用在begin 与 end 之间,调用时没有@符号
mysql\> delimiter //
mysql\> create procedure p2()
-\> begin