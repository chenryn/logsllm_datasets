{
    TItem currentNodeValue = this.NodeData;
}
11. Add the if-else statement shown in bold in the following code to the
Insert method after the definition of the currentNodeValue variable.
This statement uses the CompareTo method of the IComparable
Download from finelybook PI:EMAIL
586
interface to determine whether the value of the current node is greater
than that of the new item:
Click here to view code image
public void Insert(TItem newItem)
{
    TItem currentNodeValue = this.NodeData;
    if (currentNodeValue.CompareTo(newItem) > 0)
    {
       // Insert the new item into the left subtree
    }
    else
    {
       // Insert the new item into the right subtree
    }
}
12. In the if part of the code, immediately after the comment // Insert the
new item into the left subtree, add the following statements:
Click here to view code image
if (this.LeftTree == null)
{
     this.LeftTree = new Tree(newItem);
}
else
{
     this.LeftTree.Insert(newItem);
}
These statements check whether the left subtree is empty. If so, a new
tree is created using the new item, and it is attached as the left subtree of
the current node; otherwise, the new item is inserted into the existing left
subtree by calling the Insert method recursively.
13. In the else part of the outermost if-else statement, immediately after the
comment // Insert the new item into the right subtree, add the equivalent
code that inserts the new node into the right subtree:
Click here to view code image
if (this.RightTree == null)
{
     this.RightTree = new Tree(newItem);
}
else
{
Download from finelybook PI:EMAIL
587
     this.RightTree.Insert(newItem);
}
14. Add another public method called WalkTree to the Tree class
after the Insert method.
This method walks through the tree, visiting each node in sequence, and
generates a string representation of the data that the tree contains. The
method definition should look like this:
public string WalkTree()
{
}
15. Add the statements shown in bold in the code that follows to the
WalkTree method.
These statements implement the algorithm described earlier for
traversing a binary tree. As each node is visited, the node value is
appended to the string returned by the method:
Click here to view code image
public string WalkTree()
{
    string result = "";
    if (this.LeftTree != null)
    {
        result = this.LeftTree.WalkTree();
    }
    result += $" {this.NodeData.ToString()} ";
    if (this.RightTree != null)
    {
        result += this.RightTree.WalkTree();
    }
    return result;
}
16. On the Build menu, click Build Solution. The class should compile
cleanly, but correct any errors that are reported and rebuild the solution
if necessary.
In the next exercise, you will test the Tree class by creating
binary trees of integers and strings.
Download from finelybook PI:EMAIL
588
Test the Tree class
1. In Solution Explorer, right-click the BinaryTree solution, point to Add,
and then click New Project.
Note Be sure that you right-click the BinaryTree solution rather
than the BinaryTree project.
2. Add a new project by using the Console App (.NET Framework)
template. Give the project the name BinaryTreeTest. Set the location to
\Microsoft Press\VCSBS\Chapter 17 in your Documents folder, and then
click OK.
Note A Visual Studio 2017 solution can contain more than one
project. You are using this feature to add a second project to the
BinaryTree solution for testing the Tree class.
3. In Solution Explorer, right-click the BinaryTreeTest project, and then
click Set As Startup Project.
The BinaryTreeTest project is highlighted in Solution Explorer. When
you run the application, this is the project that will actually execute.
4. In Solution Explorer, right-click the BinaryTreeTest project, point to
Add, and then click Reference. The Reference Manager dialog box
appears. You use this dialog box to add a reference to an assembly. This
enables you to use the classes and other types implemented by that
assembly in your code.
5. In the left pane of the Reference Manager BinaryTreeTest dialog box,
expand Projects and then click Solution. In the middle pane, select the
Download from finelybook PI:EMAIL
589
BinaryTree project (be sure to select the check box and not simply click
the assembly), and then click OK.
This step adds the BinaryTree assembly to the list of references for the
BinaryTreeTest project in Solution Explorer. If you examine the
References folder for the BinaryTreeTest project in Solution Explorer,
you should see the BinaryTree assembly listed at the top. You will now
be able to create Tree objects in the BinaryTreeTest project.
Note If the class library project is not part of the same solution as
the project that uses it, you must add a reference to the assembly
(the .dll file) and not to the class library project. You can do this by
browsing for the assembly in the Reference Manager dialog box.
You will use this technique in the final set of exercises in this
chapter.
Download from finelybook PI:EMAIL
590
6. In the Code and Text Editor window displaying the Program class in the
Program.cs file, add the following using directive to the list at the top of
the class:
using BinaryTree;
7. Add the statements shown in bold in the following code to the Main
method:
Click here to view code image
static void Main(string[] args)
{
     Tree tree1 = new Tree(10);
     tree1.Insert(5);
     tree1.Insert(11);
     tree1.Insert(5);
     tree1.Insert(-12);
     tree1.Insert(15);
     tree1.Insert(0);
     tree1.Insert(14);
     tree1.Insert(-8);
     tree1.Insert(10);
     tree1.Insert(8);
     tree1.Insert(8);
     string sortedData = tree1.WalkTree();
     Console.WriteLine($"Sorted data is: ");
}
These statements create a new binary tree for holding ints. The
constructor creates an initial node containing the value 10. The Insert
statements add nodes to the tree, and the WalkTree method generates a
string representing the contents of the tree, which should appear sorted
in ascending order when this string is displayed.
Note Remember that the int keyword in C# is just an alias for the
System.Int32 type; whenever you declare an int variable, you are
actually declaring a struct variable of type System.Int32. The
System.Int32 type implements the IComparable and
IComparable interfaces, which is why you can create
Tree objects. Similarly, the string keyword is an alias for
Download from finelybook PI:EMAIL
591
System.String, which also implements IComparable and
IComparable.
8. On the Build menu, click Build Solution, and verify that the solution
compiles. Correct any errors if necessary.
9. On the Debug menu, click Start Without Debugging.
Verify that the program runs and displays the values in the following
sequence:
–12 –8 0 5 5 8 8 10 10 11 14 15
10. Press the Enter key to return to Visual Studio 2017.
11. Add the following statements shown in bold to the end of the Main
method in the Program class, after the existing code:
Click here to view code image
static void Main(string[] args)
{
     ...
     Tree tree2 = new Tree("Hello");
     tree2.Insert("World");
     tree2.Insert("How");
     tree2.Insert("Are");
     tree2.Insert("You");
     tree2.Insert("Today");
     tree2.Insert("I");
     tree2.Insert("Hope");
     tree2.Insert("You");
     tree2.Insert("Are");
     tree2.Insert("Feeling");
     tree2.Insert("Well");
     tree2.Insert("!");
     sortedData = tree2.WalkTree();
     Console.WriteLine($"Sorted data is: ");
}
These statements create another binary tree for holding strings, populate
it with some test data, and then print the tree. This time the data should
be sorted alphabetically; the System.String class (string is an alias for
System.String) implements the IComparable and IComparable
interfaces.
Download from finelybook PI:EMAIL
592
12. On the Build menu, click Build Solution, and verify that the solution
compiles. Correct any errors if necessary.
13. On the Debug menu, click Start Without Debugging.
Verify that the program runs and displays the integer values as before,
followed by the strings in the following sequence:
! Are Are Feeling Hello Hope How I Today Well World You You
14. Press the Enter key to return to Visual Studio 2017.
Creating a generic method
As well as defining generic classes, you can create generic methods.
With a generic method, you can specify the types of the parameters and
the return type by using a type parameter like that used when you define a
generic class. In this way, you can define generalized methods that are type
safe and avoid the overhead of casting (and boxing, in some cases). Generic
methods are frequently used in conjunction with generic classes; you need
them for methods that take generic types as parameters or that have a return
type that is a generic type.
You define generic methods by using the same type parameter syntax you
use when you create generic classes. (You can also specify constraints.) For
example, the generic Swap method in the code that follows swaps the
values in its parameters. Because this functionality is useful regardless of the
type of data being swapped, it is helpful to define it as a generic method:
Click here to view code image
static void Swap(ref T first, ref T second)
{
   T temp = first;
   first = second;
   second = temp;
}
You invoke the method by specifying the appropriate type for its type
parameter. The following examples show how to invoke the Swap
method to swap over two ints and two strings:
Download from finelybook PI:EMAIL
593
Click here to view code image
int a = 1, b = 2;
Swap(ref a, ref b);
...
string s1 = "Hello", s2 = "World";
Swap(ref s1, ref s2);
Note Just as instantiating a generic class with different type parameters
causes the compiler to generate different types, each distinct use of the
Swap method causes the compiler to generate a different version of
the method. Swap is not the same method as Swap—both
methods just happen to have been generated from the same generic
template, so they exhibit the same behavior, albeit over different types.
Defining a generic method to build a binary tree
In the previous exercise, you created a generic class for implementing a
binary tree. The Tree class provides the Insert method for adding
data items to the tree. However, if you want to add a large number of items,
repeated calls to the Insert method are not very convenient. In the following
exercise, you will define a generic method called InsertIntoTree that you can
use to insert a list of data items into a tree with a single method call. You will
test this method by using it to insert a list of characters into a tree of
characters.
Write the InsertIntoTree method
1. Using Visual Studio 2017, create a new project by using the Console
App (.NET Framework) template. In the New Project dialog box, name
the project BuildTree. Set the location to  \Microsoft
Press\VCSBS\Chapter 17 in your Documents folder. In the Solution
drop-down list, click Create New Solution and then click OK.
2. On the Project menu, click Add Reference.
Download from finelybook PI:EMAIL
594
3. In the Reference Manager - BuildTree dialog box, click the Browse
button (not the Browse tab in the left pane).
4. In the Select The Files To Reference dialog box, browse to the folder
\Microsoft Press\VCSBS\Chapter 17\BinaryTree\BinaryTree\bin\Debug
in your Documents folder, click BinaryTree.dll, and then click Add.
5. In the Reference Manager – BuildTree dialog box, verify that the
BinaryTree.dll assembly is listed and that the check box for this
assembly is selected, and then click OK.
The BinaryTree assembly is added to the list of references shown in
Solution Explorer.
6. In the Code and Text Editor window displaying the Program.cs file, add
the following using directive to the top of the Program.cs file:
using BinaryTree;
Remember, this namespace contains the Tree class.
7. After the Main method in the Program class, add a method named
InsertIntoTree. This method should be declared as a static void method
that takes a Tree parameter and a params array of TItem
Download from finelybook PI:EMAIL
595
elements called data. The tree parameter should be passed by reference,
for reasons that will be described in a later step.
The method definition should look like this:
Click here to view code image
static void InsertIntoTree(ref Tree tree, params
TItem[] data)
{
}
8. The TItem type used for the elements being inserted into the binary tree
must implement the IComparable interface. Modify the
definition of the InsertIntoTree method and add the where clause shown
in bold in the following code:
Click here to view code image
static void InsertIntoTree(ref Tree tree, params
TItem[] data) where TItem :IComparable
{
}
9. Add the statements shown in bold in the example that follows to the
InsertIntoTree method.
These statements iterate through the params list, adding each item to the
tree by using the Insert method. If the value specified by the tree
parameter is null initially, a new Tree is created; this is why the
tree parameter is passed by reference.
Click here to view code image
static void InsertIntoTree(ref Tree tree, params
TItem[] data) where TItem : IComparable
{
    foreach (TItem datum in data)
    {
        if (tree == null)
        {
            tree = new Tree(datum);
        }
        else
        {
            tree.Insert(datum);
        }
     }
Download from finelybook PI:EMAIL
596
}
Test the InsertIntoTree method
1. In the Main method of the Program class, add the following statements
shown in bold. This code creates a new Tree for holding character data,
populates it with some sample data by using the InsertIntoTree method,
and then displays it by using the WalkTree method of Tree:
Click here to view code image
static void Main(string[] args)
{
    Tree charTree = null;
    InsertIntoTree(ref charTree, 'M', 'X', 'A', 'M', 'Z',
'Z', 'N');
    string sortedData = charTree.WalkTree();
    Console.WriteLine($"Sorted data is: ");
}
2. On the Build menu, click Build Solution, verify that the solution
compiles, and then correct any errors if necessary.
3. On the Debug menu, click Start Without Debugging.
Verify that the program runs and displays the character values in the
following order:
A M M N X Z Z
4. Press the Enter key to return to Visual Studio 2017.
Variance and generic interfaces
Chapter 8 demonstrates that you can use the object type to hold a value or
reference of any other type. For example, the following code is completely
legal:
Click here to view code image
string myString = "Hello";
object myObject = myString;
Remember that in inheritance terms, the String class is derived from the
Download from finelybook PI:EMAIL
597
Object class, so all strings are objects.
Now consider the following generic interface and class:
Click here to view code image
interface IWrapper
{
    void SetData(T data);
    T GetData();
}
class Wrapper : IWrapper
{
    private T storedData;
    void IWrapper.SetData(T data)
    {
        this.storedData = data;
    }
    T IWrapper.GetData()
    {
        return this.storedData;
    }
}
The Wrapper class provides a simple wrapper around a specified
type. The IWrapper interface defines the SetData method that the
Wrapper class implements to store the data and the GetData method that
the Wrapper class implements to retrieve the data. You can create an
instance of this class and use it to wrap a string like this:
Click here to view code image
Wrapper stringWrapper = new Wrapper();
IWrapper storedStringWrapper = stringWrapper;
storedStringWrapper.SetData("Hello");
Console.WriteLine($"Stored value is
{storedStringWrapper.GetData()}");
The code creates an instance of the Wrapper type. It references
the object through the IWrapper interface to call the SetData
method. (The Wrapper type implements its interfaces explicitly, so you
must call the methods through an appropriate interface reference.) The code
also calls the GetData method through the IWrapper interface. If
you run this code, it outputs the message “Stored value is Hello.”
Download from finelybook PI:EMAIL
598
Take a look at the following line of code:
Click here to view code image
IWrapper storedObjectWrapper = stringWrapper;
This statement is similar to the one that creates the IWrapper
reference in the previous code example, the difference being that the type
parameter is object rather than string. Is this code legal? Remember that all
strings are objects (you can assign a string value to an object reference, as
shown earlier), so in theory, this statement looks promising. However, if you
try it, the statement will fail to compile with the message “Cannot implicitly
convert type ‘Wrapper’ to ‘IWrapper’.”
You can try an explicit cast such as this:
Click here to view code image
IWrapper storedObjectWrapper =
(IWrapper)stringWrapper;
This code compiles but will fail at runtime with an InvalidCastException
exception. The problem is that although all strings are objects, the converse is
not true. If this statement were allowed, you could write code like this, which
ultimately attempts to store a Circle object in a string field:
Click here to view code image
IWrapper storedObjectWrapper =
(IWrapper)stringWrapper;
Circle myCircle = new Circle();
storedObjectWrapper.SetData(myCircle);
The IWrapper interface is said to be invariant. You cannot assign an
IWrapper object to a reference of type IWrapper, even if type A is
derived from type B. By default, C# implements this restriction to ensure the
type safety of your code.
Covariant interfaces
Suppose that you defined the IStoreWrapper and IRetrieveWrapper
interfaces, shown in the following example, in place of IWrapper and
implemented these interfaces in the Wrapper class like this:
Click here to view code image