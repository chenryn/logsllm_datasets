容器
容器
etcd
节点-03
容器
容器
8.1服务注册表113
---
## Page 128
114
第8章发现服务——分布式服务的关键
在 Ansible 中，使用双引号不是必须的，除非值以{{开头，就像 hostname 的值一
码的 etcd 协议。通过这种方法，对于其他的注册表，也可以重用 role。请记住，
的所有节点上。roles/registrator/tasks/main.yml文件的内容如下：
务的协议（etcd）、IP（serv-disc-01）和端口（2379）。
参数给Registrator。第一个参数是-ip，表示主机的 IP 地址；第二个参数是注册服
etcd 中删除服务信息。使用-h 选项，可以指定主机名字。最后，我们传递了两个
将监视和拦截 Docker 事件，并根据事件类型把服务信息添加到etcd 中，或者从
Docker容器（请不要自己运行）：
持 etcd、Consul 和 SkyDNS 2。
配置Registrator
样
通过检查容器的启动或停止，Registrator 可以自动注册或注销服务。目前它支
Ansible role 等同于之前看到的手工命令。请注意，我们使用变量替换了硬编
}}://{{ facter_ipaddress_eth1 }}:2379
在继续进行之前，创建一个新的名为 registrator 的 Ansible role，并部署在集群
使用这条命令，可以共享/var/run/docker.sock 作为 Docker 卷。Registrator
配置 Registrator 来使用etcd 注册表是很容易的。可以如下所示简单地运行
tags:[etcd]
name: Container is running
docker:
command: -ip {{ facter_ipaddress_eth1 }} {{ registrator_protocol
hostname:"{{ ansible_hostname }}"
volumes:
image:
name:"{{ registrator_name }}"
-ip 10.100.194.201 etcd://10.100.194.201:2379
-hserv-disc-01\
-v/var/run/docker.sock:/tmp/docker.sock
/var/run/docker.sock:/tmp/docker.sock
gliderlabs/registrator
---
## Page 129
设置的几个环境变量（SERVICE_NAME 和 SERVICE_ID）来更好地识别出该服务。
Registrator 能否发现它并在 etcd 中保存其信息。本例中，Registrator 可以使用我们
会有足够的机会去熟悉它。现在我们并不关心 nginx 能做什么，关心的是
中，我们使用vars 键来定义Rigistrator 的协议为 etcd，Registrator 的端口为 2379。
（serv-disc-02）并运行容器 nginx，发布端口 1234。稍后还会用到 nginx，那时
下：
下面让我们来看看Registrator的日志。
因为设置了环境变量 DOCKER_HOST，所以 Docker 的命令会发送给集群节点 2
docker run -d --name nginx\
export DocKER_HoST=tcp://serv-disc-02:2375
让我们来试试 Registrator，并在三个集群节点之一上运行一个容器，代码如
一旦这个 playbook 执行完毕，Registrator 就会运行在集群的所有三个节点上。
ansible-playbook\
一切就绪，下面可以运行playbook了。
除了vars 键，playbook 中的大多数内容都与之前用过的相似。在这个例子
让我们看看 registrator-etcd.yml playbook。
roles:
vars:
sudo:yes
serial:1
remote_user:vagrant
hosts:all
nginx
-p1234:80\
--env SERVICE_ID=nginx\
--env SERVICE_NAME=nginx
-i /vagrant/ansible/hosts/serv-disc
/vagrant/ansible/registrator-etcd.yml\
- registrator_protocol: etcd
registrator
common
registrator_port:2379
etcd
docker
8.1服务注册表115
---
## Page 130
116
第8章发现服务一
法访问的端口信息呢？
80端口，因此Registrator 决定忽略443端口。毕竟，为什么我们要存储任何人都无
忽略了 443端口。虽然容器nginx对内发布了 80端口和443端口，但对外只发布了
dockerlogsregistrator
器所运行的主机的IP与我们所发布的端口设为相应的值。
口，那么 Registrator 会把多出的端口加为后缀（如 nginx-8e）。Registrator 会把容
我们运行容器时设定的环境变量相匹配。请注意，如果服务定义了一个以上的端
键，最后一行命令获得了最终的值。Registrator 把值保存为以/分隔的格式，并与
curl http://serv-disc-01:2379/v2/keys/nginx-80/nginx| jq'.
curl
curl http://serv-disc-01:2379/v2/keys/|jq'.
2015/08/30 19:18:12 ignored:5cf7dd974939 port 443 not published on host
2015/08/3019:18:12added:5cf7dd974939nginx
第一行命令列出了 root 下所有的键，第二行命令列出了 nginx-80 下所有的
现在让我们来看看保存在etcd 中的数据：
可以看到 Registrator 发现了 ID 为 5cf7dd974939 的容器 nginx，还可以看到它
输出应该类似于以下内容：
删除容器时会发生什么？
最后一行命令的输出如下：
"action":“get"
"node":{
"key":"/nginx-80/nginx"
"value":"10.100.194.202:1234",
'modifiedIndex": 13,
"createdIndex": 13,
一分布式服务的关键
据的副本。
在节点1上的 etcd。这再次说明了所有 etcd 运行的节点都有数
请注意，尽管容器运行在节点2上，但我们查询的是运行
---
## Page 131
的数据来创建配置文件，并在生成文件后运行一些命令。
图8-7）。如何使用存储的信息是第9章的主题。
时候，只要启动了容器，数据就会被保存在etcd中并传播到集群中的所有节点（见
curl http://serv-disc-01:2379/v2/keys/nginx-80/nginx | jq '.
可以确认这一点：
2015/08/30 19:32:31 removed: 5cf7dd974939 nginx
docker logsregistrator
docker rm -fnginx
还有一个困扰我们的问题没有谈到。我们需要一种方法，使用保存在 etcd 中
容器
Registrator与etcd的组合既简单又强大，可以让我们练习很多先进技术。任何
ID 为 nginx/nginx的服务不见了。
输出如下：
Registrator发现我们删除了容器并发送请求给 etcd 来删除相应的值。以下命令
Registrator日志的输出应该类似于以下内容：
容器
"errorCode":100
"message":"Key not found",
"cause":"/nginx-80/nginx",
"index":14,
etcd
节点-01
图8-7多节点与Docker 容器、etcd 和 Registrator
容器
器
容器
容器
节点-02
etcd
容器
容器
容器
容器
etcd
节点-03
容器
容器
8.1服务注册表117
---
## Page 132
118
第8章发现服务一
confd -onetime -backend etcd -node 10.100.197.202:2379
式的例子如下（请暂缓运行）：
有关的值发生变化，它就会更新目标配置文件。单次模式则只运行一次。单次模
"/nginx/nginx"}}。
The address is{{getv"/nginx/nginx"}};
以及在/etc/confd/templates下的模板文件。
sudo mkdir -p /etc/confd/{conf.d,templates}
sudo mv confd-0.10.0-1inux-amd64/usr/local/bin/confd
/download/v0.10.0/confd-0.10.0-1inux-amd64
wget https://github.com/kelseyhightower/confd/releases\
使用confd 和保存在etcd（或其他几个注册表）中的信息来重新配置服务。
新的。当配置文件发生变化时，confd 还可以重新加载应用程序。换句话说，可以
是使用保存在 etcd、consul及其他几个数据注册表中的数据来保持配置文件是最
安装confd
最后，confd 可以在两种模式下运行。在守护模式下，它会轮询注册表，一旦
当模板被处理时，它会使用从注册表中得到的值来替换{getv
配置文件的例子如下：
要使 confd 能够工作，则需要一个在/etc/confd/conf.d/目录下的配置文件,
该命令运行在单次模式，使用在指定节点上运行的 etcd 作为后台。执行时，
模板使用了Go语言的文本模板格式。模板的例子如下：
至少要指定模板的源和目的文件，以及要从注册表中取得的键。
src="nginx.conf.tmpl"
安装confd 很简单。命令如下（请暂缓运行）：
confd是一
[template]
"/nginx/nginx"
一分布式服务的关键
一个轻量级的工具，
可以用来维护配置文件。该工具最常见的用法，
---
## Page 133
仅供非商业用途或交流学习使用
二进制文件、一个配置文件和一个模板文件。下面将使用它们来试验 confd。
件，在文件roles/confd/defaults/main.yml中，可以把它们定义为变量：
单得多。它能确保建立目录并把文件复制到目标服务器。因为涉及多个目录和文
tags:[confd]
with_items:files
Ansiblerole，该role 可确保confd 被安装在集群所有的服务器上。
使用从etcd注册表得到的值来更新目标配置文件。
hosts:confd
remote_user:vagrant
copy:
name:Files are copied
tags:[confd]
with_items:directories
file:
name:Directories are created
最后，需要confd.ym1作为Ansible playbook:
src:"{{item.src }}"
state:directory
path:"{{ item }}"
我们定义了存放配置文件和模板的目录，还定义了需要复制的文件，即一个
因为不需要运行二进制文件，所以 Ansible role比之前为 etcd 创建的role要简
roles/confd/tasks/main.yml文件的内容如下：
现在基本上了解了confd是如何工作的，
{ src:'confd', dest: ′/usr/local/bin/confd', mode:‘0755′}
conf.tmpl',mode:'0644'}，
0644′}，
files:
directories:
{src:'example.conf.tmpl',dest:'/etc/confd/templates/example.
{src:
-/etc/confd/templates
-/etc/confd/conf.d
'example.toml',dest:'/etc/confd/conf.d/example.toml',mode:
下面来看一下名为confd的
8.1服务注册表119
---
## Page 134
仅供非商业用途或交流学习使用
120
）第8章发现服务一
cat/tmp/example.conf
cd confd[15241]:INF0 Backend set to etcd
的输出类似（为简洁起见，删除了时间戳）
nginx/nginx已经改变，所以confd会处理模板并更新目标配置。可以看到与以下
它会检查所有的配置文件并与保存在 etcd 中的键进行比较。因为 etcd 中的键
已经在该服务器上运行，所以它会把数据存入etcd。最后运行confd的本地实例，
ansible-playbook\
P
confd[15241]:INFo Target config /tmp/example.conf has been updated
roles:
sudo:yes
serial:1
confd[15241]:
confd[15241]:
confd 发现/tmp/example.conf不同步并更新了它。让我们来确认一下：
confd[15241]:
输出如下：
我们在节点serv-disc-01上运行nginx容器并发布4321端口。因为 Registrator
-i /vagrant/ansible/hosts/serv-disc
/vagrant/ansible/confd.yml
-confd
confd-onetime-backend etcd -node 10.100.194.203:2379
dockerrun-d--name nginx\
exportDoCKER_HOST=tcp://serv-disc-01:2375
让我们再次运行nginx容器，以便 Registrator可以将一些数据存入 eted 中：
集群的所有节点都安装了confd，下面可以试试了。
一切就绪，
没有什么新的内容需要讨论，这个文件与之前用过的几乎一样。
Nginx
p4321:80
--env SERVICE_NAME=nginx\
envSERVICE_ID=nginx\
一分布式服务的关键
下面可以把confd部署到集群中的所有服务器上：
INFO
INFO
INFO
Backend nodes set to 10.100.194.203:2379
Starting confd
---
## Page 135
仅供非商业用途或交流学习使用
Consul
从发送数据变化的通知到执行运行状况检查再到根据其输出运行自定义命令。
/值存储，这不但可以用于存储数据，还可以用于注册监视器。监视器用途广泛，
竟，我们不应该在没有调查替代方案之前就定下来。
增加对服务器资源和维护的需求。
务。另外一方面，如果它们的设计包含更多的功能，就会引入不必要的复杂性并
具恰到好处地满足了我们的需求，若功能再少一点，就无法完成我们所面临的任
上用场。这一组合还说明了把合适的小工具混合使用的有效性。
自动化所有的服务发现和服务配置。当开始制定更高级的部署策略时，这将会派
etcd、Registrator 和 confd 的组合
有的目标配置文件被相应地更新，如图8-8所示。