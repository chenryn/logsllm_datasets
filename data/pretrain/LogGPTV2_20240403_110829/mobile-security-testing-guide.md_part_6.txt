Static Analysis
There are various two-factor authentication mechanism available which can range from 3rd party libraries, usage of
external apps to self implemented checks by the developer(s).
Use the app first and identify where 2FA is needed in the workflows (usually during login or when executing critical
transactions). Do also interview the developer(s) and/or architects to understand more about the 2FA implementation.
If a 3rd party library or external app is used, verify if the implementation was done accordingly to the security best
practices.
Dynamic Testing
Use the app extensively (going through all UI flows) while using an interception proxy to capture the requests sent to
remote endpoints. Next, replay requests to endpoints that require 2FA (e.g., performing a financial transactions) while
using a token or session ID that hasn't yet been elevated via 2FA or step-up authentication. If an endpoint is still
sending back requested data that should only be available after 2FA or step-up authentication, authentication checks
haven't been properly implemented at that endpoint.
When OTP authentication is used, consider that most OTPs are short numeric values. An attacker can bypass the
second factor by brute-forcing the values within the range at the lifespan of the OTP if the accounts aren't locked after
N unsuccessful attempts at this stage. The probability of finding a match for 6-digit values with a 30-second time step
within 72 hours is more than 90%.
To test this, the captured request should be sent 10-15 times to the endpoint with random OTP values before
providing the correct OTP. If the OTP is still accepted the 2FA implementation is prone to brute force attacks and the
OTP can be guessed.
A OTP should be valid for only a certain amount of time (usually 30 seconds) and after keying in the OTP
wrongly several times (usually 3 times) the provided OTP should be invalidated and the user should be
redirected to the landing page or logged out.
Consult the OWASP Testing Guide for more information about testing session management.
Testing Stateless (Token-Based) Authentication (MSTG-AUTH-3)
Token-based authentication is implemented by sending a signed token (verified by the server) with each HTTP
request. The most commonly used token format is the JSON Web Token, defined in RFC7519. A JWT may encode
the complete session state as a JSON object. Therefore, the server doesn't have to store any session data or
authentication information.
JWT tokens consist of three Base64-encoded parts separated by dots. The following example shows a Base64-
encoded JSON Web Token:
44
Mobile App Authentication Architectures
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA9
5OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
The header typically consists of two parts: the token type, which is JWT, and the hashing algorithm being used to
compute the signature. In the example above, the header decodes as follows:
{"alg":"HS256","typ":"JWT"}
The second part of the token is the payload, which contains so-called claims. Claims are statements about an entity
(typically, the user) and additional metadata. For example:
{"sub":"1234567890","name":"John Doe","admin":true}
The signature is created by applying the algorithm specified in the JWT header to the encoded header, encoded
payload, and a secret value. For example, when using the HMAC SHA256 algorithm the signature is created in the
following way:
HMACSHA256(base64UrlEncode(header) + "." + base64UrlEncode(payload), secret)
Note that the secret is shared between the authentication server and the back end service - the client does not know
it. This proves that the token was obtained from a legitimate authentication service. It also prevents the client from
tampering with the claims contained in the token.
Static Analysis
Identify the JWT library that the server and client use. Find out whether the JWT libraries in use have any known
vulnerabilities.
Verify that the implementation adheres to JWT best practices:
Verify that the HMAC is checked for all incoming requests containing a token;
Verify the location of the private signing key or HMAC secret key. The key should remain on the server and
should never be shared with the client. It should be available for the issuer and verifier only.
Verify that no sensitive data, such as personal identifiable information, is embedded in the JWT. If, for some
reason, the architecture requires transmission of such information in the token, make sure that payload
encryption is being applied. See the sample Java implementation on the OWASP JWT Cheat Sheet.
Make sure that replay attacks are addressed with the jti (JWT ID) claim, which gives the JWT a unique
identifier.
Verify that tokens are stored securely on the mobile phone, with, for example, KeyChain (iOS) or KeyStore
(Android).
Enforcing the Hashing Algorithm
An attacker executes this by altering the token and, using the 'none' keyword, changing the signing algorithm to
indicate that the integrity of the token has already been verified. As explained at the link above, some libraries treated
tokens signed with the none algorithm as if they were valid tokens with verified signatures, so the application will trust
altered token claims.
For example, in Java applications, the expected algorithm should be requested explicitly when creating the verification
context:
// HMAC key - Block serialization and storage as String in JVM memory
private transient byte[] keyHMAC = ...;
45
Mobile App Authentication Architectures
//Create a verification context for the token requesting explicitly the use of the HMAC-256 HMAC generation
JWTVerifier verifier = JWT.require(Algorithm.HMAC256(keyHMAC)).build();
//Verify the token; if the verification fails then an exception is thrown
DecodedJWT decodedToken = verifier.verify(token);
Token Expiration
Once signed, a stateless authentication token is valid forever unless the signing key changes. A common way to limit
token validity is to set an expiration date. Make sure that the tokens include an "exp" expiration claim and the back
end doesn't process expired tokens.
A common method of granting tokens combines access tokens and refresh tokens. When the user logs in, the
backend service issues a short-lived access token and a long-lived refresh token. The application can then use the
refresh token to obtain a new access token, if the access token expires.
For apps that handle sensitive data, make sure that the refresh token expires after a reasonable period of time. The
following example code shows a refresh token API that checks the refresh token's issue date. If the token is not older
than 14 days, a new access token is issued. Otherwise, access is denied and the user is prompted to login again.
app.post('/refresh_token', function (req, res) {
// verify the existing token
var profile = jwt.verify(req.body.token, secret);
// if more than 14 days old, force login
if (profile.original_iat - new Date() > 14) { // iat == issued at
return res.send(401); // re-login
}
// check if the user still exists or if authorization hasn't been revoked
if (!valid) return res.send(401); // re-logging
// issue a new token
var refreshed_token = jwt.sign(profile, secret, { expiresInMinutes: 60*5 });
res.json({ token: refreshed_token });
});
Dynamic Analysis
Investigate the following JWT vulnerabilities while performing dynamic analysis:
Token Storage on the client:
The token storage location should be verified for mobile apps that use JWT.
Cracking the signing key:
Token signatures are created via a private key on the server. After you obtain a JWT, choose a tool for brute
forcing the secret key offline.
Information Disclosure:
Decode the Base64-encoded JWT and find out what kind of data it transmits and whether that data is
encrypted.
Tampering with the Hashing Algorithm:
Usage of asymmetric algorithms. JWT offers several asymmetric algorithms as RSA or ECDSA. When these
algorithms are used, tokens are signed with the private key and the public key is used for verification. If a
server is expecting a token to be signed with an asymmetric algorithm and receives a token signed with
HMAC, it will treat the public key as an HMAC secret key. The public key can then be misused, employed as
an HMAC secret key to sign the tokens.
46
Mobile App Authentication Architectures
Modify the alg attribute in the token header, then delete HS256 , set it to none , and use an empty
signature (e.g., signature = ""). Use this token and replay it in a request. Some libraries treat tokens signed
with the none algorithm as a valid token with a verified signature. This allows attackers to create their own
"signed" tokens.
There are two different Burp Plugins that can help you for testing the vulnerabilities listed above:
JSON Web Token Attacker
JSON Web Tokens
Also, make sure to check out the OWASP JWT Cheat Sheet for additional information.
Testing OAuth 2.0 Flows (MSTG-AUTH-1 and MSTG-AUTH-3)
OAuth 2.0 defines a delegation protocol for conveying authorization decisions across APIs and a network of web-
enabled applications. It is used in a variety of applications, including user authentication applications.
Common uses for OAuth2 include:
Getting permission from the user to access an online service using their account.
Authenticating to an online service on behalf of the user.
Handling authentication errors.
According to OAuth 2.0, a mobile client seeking access to a user's resources must first ask the user to authenticate
against an authentication server. With the users' approval, the authorization server then issues a token that allows the
app to act on behalf of the user. Note that the OAuth2 specification doesn't define any particular kind of authentication
or access token format.
OAuth 2.0 defines four roles:
Resource Owner: the account owner
Client: the application that wants to access the user's account with the access tokens
Resource Server: hosts the user accounts
Authorization Server: verifies user identity and issues access tokens to the application
Note: The API fulfills both the Resource Owner and Authorization Server roles. Therefore, we will refer to both as the
API.
Here is a more detailed explanation of the steps in the diagram:
47
Mobile App Authentication Architectures
1. The application requests user authorization to access service resources.
2. If the user authorizes the request, the application receives an authorization grant. The authorization grant may
take several forms (explicit, implicit, etc.).
3. The application requests an access token from the authorization server (API) by presenting authentication of its
own identity along with the authorization grant.
4. If the application identity is authenticated and the authorization grant is valid, the authorization server (API) issues
an access token to the application, completing the authorization process. The access token may have a
companion refresh token.
5. The application requests the resource from the resource server (API) and presents the access token for
authentication. The access token may be used in several ways (e.g., as a bearer token).
6. If the access token is valid, the resource server (API) serves the resource to the application.
OAUTH 2.0 Best Practices
Verify that the following best practices are followed:
User agent:
The user should have a way to visually verify trust (e.g., Transport Layer Security (TLS) confirmation, website
mechanisms).
To prevent man-in-the-middle attacks, the client should validate the server's fully qualified domain name with the
public key the server presented when the connection was established.
Type of grant:
On native apps, code grant should be used instead of implicit grant.
When using code grant, PKCE (Proof Key for Code Exchange) should be implemented to protect the code grant.
Make sure that the server also implements it.
The auth "code" should be short-lived and used immediately after it is received. Verify that auth codes only reside
on transient memory and aren't stored or logged.
Client secrets:
Shared secrets should not be used to prove the client's identity because the client could be impersonated
("client_id" already serves as proof). If they do use client secrets, be sure that they are stored in secure local
storage.
End-User credentials:
Secure the transmission of end-user credentials with a transport-layer method, such as TLS.
Tokens:
Keep access tokens in transient memory.
Access tokens must be transmitted over an encrypted connection.
Reduce the scope and duration of access tokens when end-to-end confidentiality can't be guaranteed or the
token provides access to sensitive information or transactions.
Remember that an attacker who has stolen tokens can access their scope and all resources associated with them
if the app uses access tokens as bearer tokens with no other way to identify the client.
Store refresh tokens in secure local storage; they are long-term credentials.
External User Agent vs. Embedded User Agent
OAuth2 authentication can be performed either through an external user agent (e.g. Chrome or Safari) or in the app
itself (e.g. through a WebView embedded into the app or an authentication library). None of the two modes is
intrinsically "better" - instead, what mode to choose depends on the context.
48
Mobile App Authentication Architectures
Using an external user agent is the method of choice for apps that need to interact with social media accounts
(Facebook, Twitter, etc.). Advantages of this method include:
The user's credentials are never directly exposed to the app. This guarantees that the app cannot obtain the
credentials during the login process ("credential phishing").
Almost no authentication logic must be added to the app itself, preventing coding errors.
On the negative side, there is no way to control the behavior of the browser (e.g. to activate certificate pinning).
For apps that operate within a closed ecosystem, embedded authentication is the better choice. For example,
consider a banking app that uses OAuth2 to retrieve an access token from the bank's authentication server, which is
then used to access a number of micro services. In that case, credential phishing is not a viable scenario. It is likely
preferable to keep the authentication process in the (hopefully) carefully secured banking app, instead of placing trust
on external components.
Other OAuth2 Best Best Practices
For additional best practices and detailed information please refer to the following source documents:
RFC6749 - The OAuth 2.0 Authorization Framework
DRAFT - OAuth 2.0 for Native Apps
RFC6819 - OAuth 2.0 Threat Model and Security Considerations
Testing Login Activity and Device Blocking (MSTG-AUTH-11)
For applications which require L2 protection, the MASVS states that: "The app informs the user of all login activities
with their account. Users are able view a list of devices used to access the account, and to block specific devices.".
This can be broken down into various scenarios:
1. The application provides a push notification the moment their account is used on another device to notify the user
of different activities. The user can then block this device after opening the app via the push-notification.
2. The application provides an overview of the last session after login, if the previous session was with a different
configuration (e.g. location, device, app-version) then the user his current configuration. The user then has the
option to report suspicious activities and block devices used in the previous session.
3. The application provides an overview of the last session after login at all times.
4. The application has a self-service portal in which the user can see an audit-log and manage the different devices
with which he can login.
In all cases, you should verify whether different devices are detected correctly. Therefore, the binding of the
application to the actual device should be tested. For instance: in iOS a developer can use identifierForVendor
whereas in Android, the developer can use Settings.Secure.ANDROID_ID to identify an application instance.
Note that starting at Android 8, Android_ID is no longer a device unique ID. Instead it becomes scoped by the
combination of app-signing key, user and device. So validating Android_ID for device blocking could be tricky for
these Android versions. Because if an app changes its signing key, the Android_ID will change and it won't be able to
recognize old users devices. This together with keying material in the Keychain for iOS and in the KeyStore in
Android can reassure strong device binding. Next, you should test if using different IPs, different locations and/or
different time-slots will trigger the right type of information in all scenarios.
Lastly, the blocking of the devices should be tested, by blocking a registered instance of the app and see if it is then
no longer allowed to authenticate. Note: in case of an application which requires L2 protection, it can be a good idea
to warn a user even before the first authentication on a new device. Instead: warn the user already when a second
instance of the app is registered.
49
Mobile App Authentication Architectures
References
OWASP Mobile Top 10 2016
M4 - Insecure Authentication - https://www.owasp.org/index.php/Mobile_Top_10_2016-M4-
Insecure_Authentication
OWASP MASVS
MSTG-ARCH-2: "Security controls are never enforced only on the client side, but on the respective remote
endpoints."
MSTG-AUTH-1: "If the app provides users access to a remote service, some form of authentication, such as
username/password authentication, is performed at the remote endpoint."
MSTG-AUTH-2: "If stateful session management is used, the remote endpoint uses randomly generated session
identifiers to authenticate client requests without sending the user's credentials."
MSTG-AUTH-3: "If stateless token-based authentication is used, the server provides a token that has been
signed with a secure algorithm."
MSTG-AUTH-4: "The remote endpoint terminates the existing stateful session or invalidates the stateless session
token when the user logs out."
MSTG-AUTH-5: "A password policy exists and is enforced at the remote endpoint."
MSTG-AUTH-6: "The remote endpoint implements an exponential back-off or temporarily locks the user account
when incorrect authentication credentials are submitted an excessive number of times."
MSTG-AUTH-7: "Sessions are invalidated at the remote endpoint after a predefined period of inactivity and
access tokens expire."
MSTG-AUTH-9: "A second factor of authentication exists at the remote endpoint and the 2FA requirement is
consistently enforced."
MSTG-AUTH-10: "Sensitive transactions require step-up authentication."
MSTG-AUTH-11: "The app informs the user of all login activities with their account. Users are able view a list of
devices used to access the account, and to block specific devices."
CWE
CWE-287 - Improper Authentication
CWE-307 - Improper Restriction of Excessive Authentication Attempts
CWE-308 - Use of Single-factor Authentication
CWE-521 - Weak Password Requirements
CWE-613 - Insufficient Session Expiration
SMS-OTP Research
Dmitrienko, Alexandra, et al. "On the (in) security of mobile two-factor authentication." International Conference
on Financial Cryptography and Data Security. Springer, Berlin, Heidelberg, 2014.
Grassi, Paul A., et al. Digital identity guidelines: Authentication and lifecycle management (DRAFT). No. Special
Publication (NIST SP)-800-63B. 2016.
Grassi, Paul A., et al. Digital identity guidelines: Authentication and lifecycle management. No. Special
Publication (NIST SP)-800-63B. 2017.
Konoth, Radhesh Krishnan, Victor van der Veen, and Herbert Bos. "How anywhere computing just killed your
phone-based two-factor authentication." International Conference on Financial Cryptography and Data Security.
Springer, Berlin, Heidelberg, 2016.
Mulliner, Collin, et al. "SMS-based one-time passwords: attacks and defense." International Conference on
Detection of Intrusions and Malware, and Vulnerability Assessment. Springer, Berlin, Heidelberg, 2013.
Siadati, Hossein, et al. "Mind your SMSes: Mitigating social engineering in second factor authentication."
50
Mobile App Authentication Architectures
Computers & Security 65 (2017): 14-28. -Siadati, Hossein, Toan Nguyen, and Nasir Memon. "Verification code
forwarding attack (short paper)." International Conference on Passwords. Springer, Cham, 2015.
Tools
Free and Professional Burp Suite editions - https://portswigger.net/burp/ Important precision: The free Burp Suite
edition has significant limitations . In the Intruder module, for example, the tool automatically slows down after a
few requests, password dictionaries aren't included, and you can't save projects.
Using Burp Intruder - https://portswigger.net/burp/documentation/desktop/tools/intruder/using