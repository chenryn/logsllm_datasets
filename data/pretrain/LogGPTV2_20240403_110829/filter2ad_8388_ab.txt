Tips:在某些场景下可能需要在参数末尾加注释符--,使用“--”的作用在于注释掉从当前代码末尾到SQL末尾的语句。
\--在oracle和mssql都可用，mysql可以用`#` `/**`。
执行order by 4正常显示数据order by 5错误说明查询的字段数是4。  
Order by 5执行后直接爆了一个SQL异常：  
用联合查询执行:`2 and 1=2 union select version(),user(),database(),5  `
#### 小结论：
通过控制台执行SQL注入可知SQL注入跟平台无关、跟开发语言关系也不大，而是跟数据库有关。
知道了拼SQL肯定是会造成SQL注入的，那么我们应该怎样去修复上面的代码去防止SQL注入呢？其实只要把参数经过预编译就能够有效的防止SQL注入了，我们已经依旧提交SQL注入语句会发现之前能够成功注入出数据库版本、用户名、数据库名的语句现在无法带入数据库查询了：
### 0x02 PreparedStatement实现防注入
* * *
SQL语句被预编译并存储在PreparedStatement对象中。然后可以使用此对象多次高效地执行该语句。
    Class.forName(MYSQLDRIVER);//加载MYSQL驱动 
    Connection conn = DriverManager.getConnection(MYSQLURL);//获取数据库连接 
    String sql = "SELECT * from corps where id = ? ";//查询语句 
    PreparedStatement pstt = conn.prepareStatement(sql);//获取预编译的PreparedStatement对象 
    pstt.setObject(1, id);//使用预编译SQL 
    ResultSet rs = pstt.executeQuery();
从Class.forName反射去加载MYSQL启动开始，到通过DriverManager去获取一个本地的连接数据库的对象。而拿到一个数据连接以后便是我们执行SQL与事物处理的过程。当我们去调用PreparedStatement的方法如：executeQuery或executeUpdate等都会通过mysql的JDBC实现对Mysql数据库做对应的操作。Java里面连接数据库的方式一般来说都是固定的格式，不同的只是实现方式。所以只要我们的项目中有加载对应数据库的jar包我们就能做相应的数据库连接。而在一个Web项目中如果/WEB-INF/lib下和对应容器的lib下只有mysql的数据库连接驱动包，那么就只能连接MYSQL了，这一点跟其他语言有点不一样，不过应该容易理解和接受，假如php.ini不开启对mysql、mssql、oracle等数据库的支持效果都一样。修复之前的SQL注入的方式显而易见了，`用“？”号去占位，预编译SQL的时候会自动根据pstt里的参数去处理，从而避免SQL注入。`
    String sql = "SELECT * from corps where id = ? "; 
    pstt = conn.prepareStatement(sql);//获取预编译的PreparedStatement对象 
    pstt.setObject(1, id);//使用预编译SQL 
    ResultSet rs = pstt.executeQuery();
在通过conn.prepareStatement去获取一个PreparedStatement便会以预编译去处理查询SQL，而使用conn.createStatement得到的只是一个普通的Statement不会去预编译SQL语句，但Statement执行效率和速度都比prepareStatement要快前者是后者的父类。
从类加载到连接的关闭数据库厂商根据自己的数据库的特性实现了JDBC的接口。类加载完成之后才能够继续调用其他的方法去获取一个连接对象，然后才能过去执行SQL命令、返回查询结果集(ResultSet)。
Mysql的Driver：
    public class Driver extends NonRegisteringDriver implements java.sql.Driver{}
在加载驱动处下断点（22行），可以跟踪到mysql的驱动连接数据库到获取连接的整个过程。
F5进入到Driver类：  
驱动加载完成后我们会得到一个具体的连接的对象Connection,而这个Connection包含了大量的信息，我们的一切对数据库的操作都是依赖于这个Connection的：
`conn.prepareStatement(sql);`
在获取PreparedStatement对象的时进入会进入到Connection类的具体的实现类ConnectionImpl类。
然后调用其prepareStatement方法。  
而nativeSQL方法调用了EscapeProcessor类的静态方法escapeSQL进行转意，返回的自然是转意后的SQL。
预编译默认是在客户端的用`com.mysql.jdbc.PreparedStatement`本地SQL拼完SQL，最终mysql数据库收到的SQL是已经替换了“?”后的SQL，执行并返回我们查询的结果集。
从上而下大概明白了预编译做了个什么事情，并不是用了PreparedStatement这个对象就不存在SQL注入而是跟你在预编译前有没有拼凑SQL语句，
    String sql = “select * from xxx where id = ”+id//这种必死无疑。
#### Web中绕过SQL防注入：
Java中的JSP里边有个特性直接`request.getParameter(&quot;Parameter&quot;);`去获取请求的数据是不分GET和POST的，而看过我第一期的同学应该还记得我们的Servlet一般都是两者合一的方式去处理的，而在SpringMVC里面如果不指定传入参数的方式默认是get和post都可以接受到。
SpringMvc如：
    @RequestMapping(value="/index.aspx",method=RequestMethod.GET)
    public String index(HttpServletRequest request,HttpServletResponse response){
        System.out.println("------------");
        return "index";
    }
上面默认只接收GET请求，而大多数时候是很少有人去制定请求的方式的。说这么多其实就是为了告诉大家我们可以通过POST方式去绕过普通的SQL防注入检测！
#### Web当中最容易出现SQL注入的地方：
    常见的文章显示、分类展示。
    用户注册、用户登录处。
    关键字搜索、文件下载处。
    数据统计处（订单查询、上传下载统计等）经典的如select下拉框注入。
    逻辑略复杂处(密码找回以及跟安全相关的)。
#### 关于注入页面报错：
如果发现页面抛出异常，那么得从两个方面去看问题，传统的SQL注入在页面报错以后肯定没法直接从页面获取到数据信息。如果报错后SQL没有往下执行那么不管你提交什么SQL注入语句都是无效的，如果只是普通的错误可以根据错误信息进行参数修改之类继续SQL注入。
假设我们的id改为int类型：
    int id = Integer.parseInt(request.getParameter("id"));  
程序在接受参数后把一个字符串转换成int(整型)的时候发生异常，那么后面的代码是不会接着执行的哦，所以SQL注入也会失败。
#### Spring中如何安全的拼SQL(JDBC同理)：
对于常见的SQL注入采用预编译就行了，但是很多时候条件较多或较为复杂的时候很多人都想偷懒拼SQL。
写了个这样的多条件查询条件自动匹配：
        public static String SQL_FORUM_CLASS_SETTING = "SELECT * from bjcyw_forum_forum where 1=1 ";
    public List> getForumClass(Map forum) {
        StringBuilder sql=new StringBuilder(SQL_FORUM_CLASS_SETTING);
        List ls=new ArrayList();
        if (forum.size()>0) {
            for (String key : forum.keySet()) {
                Object obj[]=(Object [])forum.get(key);
                sql = SqlHelper.selectHelper(sql, obj);
                if ("like".equalsIgnoreCase(obj[2].toString().trim())) {
                    ls.add("%"+obj[1]+"%");
                }else{
                    ls.add(obj[1]);
                }
            }
        }
        return jdbcTemplate.queryForList(sql.toString(),(Object[])ls.toArray());
    }
selectHelper方法：
    public static StringBuilder selectHelper(StringBuilder sql, Object obj[]){
        if (Constants.SQL_HELPER_LIKE.equalsIgnoreCase(obj[2].toString())) {
            sql.append(" AND "+obj[0]+" like ?");
        }else if (Constants.SQL_HELPER_EQUAL.equalsIgnoreCase(obj[2].toString())) {
            sql.append(" AND "+obj[0]+" = ?");
        }else if (Constants.SQL_HELPER_GREATERTHAN.equalsIgnoreCase(obj[2].toString())) {
            sql.append(" AND "+obj[0]+" > ?");
        }else if (Constants.SQL_HELPER_LESSTHAN.equalsIgnoreCase(obj[2].toString())) {
            sql.append(" AND "+obj[0]+" 
### 0x03 转战Web平台
* * *
看完了SQL注入在控制台下的表现，如果对上面还不甚清楚的同学继续看下面的Web注入。
首先我们了解下Web当中的SQL注入产生的原因:  
Mysql篇： 数据库结构上面已经声明，现在有以下Jsp页面，逻辑跟上面注入一致：  
浏览器访问：
上面我们已经知道了查询的字段数是4，现在构建联合查询，其中的1，2，3只是我们用来占位查看字段在页面对应的具体的输出。在HackBar执行我们的SQL注入，查看效果和执行情况：