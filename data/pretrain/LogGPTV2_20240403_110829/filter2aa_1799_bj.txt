Idle Resilient Timers
its timers this is.
TimerType
Timers
Absolute
Timers
The expiration time is absolute, not relative.
Wake
Timers
This is a wakeable timer, meaning it should exit a standby 
state when signaled.
EncodedTolerableDelay
Timers
The maximum amount of tolerance (shifted as a power of 
two) that the timer can support when running outside of its 
expected periodicity.
Hand
Timers
Index into the timer handle table.
Index
Timers
Index into the timer expiration table.
Inserted
Timers
Set if the timer was inserted into the timer handle table.
Expired
Timers
Set if the timer has already expired.
ThreadType
Threads
Mapping of the Type
ThreadReserved
Threads
Unused.
CycleProfiling
Threads
CounterProfiling
Threads
has been enabled for this thread.
GroupScheduling
Threads
Scheduling groups have been enabled for this thread, such 
-
tling. 
AffinitySet
Threads
The thread has a CPU Set associated with it.
Tagged
Threads
The thread has been assigned a property tag.
EnergyProfiling
Threads
Energy estimation is enabled for the process that this thread 
belongs to.
SchedulerAssist
Threads
The Hyper-V XTS (eXTended Scheduler) is enabled, and this 
thread belongs to a virtual processor (VP) thread inside of a 
VM minimal process.
Instrumented
Threads
instrumentation callback.
ActiveDR7
Threads
Hardware breakpoints are being used, so DR7 is active and 
also sometimes called DebugActive.
Minimal
Threads
This thread belongs to a minimal process.
AltSyscall
Threads
An alternate system call handler has been registered for the 
process that owns this thread, such as a Pico Provider or a 
Windows CE PAL.
CHAPTER 8 System mechanisms
193
Flag
Applies To
Meaning
UmsScheduled
Threads
This thread is a UMS Worker (scheduled) thread.
UmsPrimary
Threads
This thread is a UMS Scheduler (primary) thread.
MutantType
Mutants
Mapping of the Type
MutantSize
Mutants
Unused.
DpcActive
Mutants
The mutant was acquired during a DPC.
MutantReserved
Mutants
Unused.
QueueType
Queues
Mapping of the Type
Abandoned
Queues
The queue no longer has any threads that are waiting on it.
DisableIncrement
Queues
No priority boost should be given to a thread waking up to 
handle a packet on the queue.
SignalState 
and the WaitListHead
pointers are identical, this can either mean that there are no threads waiting or that one thread 
is waiting on this object. You can tell the difference if the identical pointer happens to be the ad-
lkd> dx (nt!_KWAIT_BLOCK*)0xffff898f2b3451c0 
(nt!_KWAIT_BLOCK*)0xffff898f2b3451c0
: 0xffff898f2b3451c0 [Type: _KWAIT_BLOCK *] 
    [+0x000] WaitListEntry    [Type: _LIST_ENTRY] 
    [+0x010] WaitType
: 0x1 [Type: unsigned char] 
    [+0x011] BlockState
: 0x4 [Type: unsigned char] 
    [+0x012] WaitKey
: 0x0 [Type: unsigned short] 
    [+0x014] SpareLong
: 6066 [Type: long] 
    [+0x018] Thread           : 0xffff898f2b345080 [Type: _KTHREAD *] 
    [+0x018] NotificationQueue : 0xffff898f2b345080 [Type: _KQUEUE *] 
    [+0x020] Object
: 0xffff898f2b64ba60 [Type: void *] 
    [+0x028] SparePtr
: 0x0 [Type: void *]
In this case, the wait type indicates a WaitAny, so we know that there is a thread blocking on 
the event, whose pointer we are given. We also see that the wait block is active. Next, we can 
lkd> dt nt!_KTHREAD 0xffff898f2b345080 WaitRegister.State WaitIrql WaitMode WaitBlockCount 
     WaitReason WaitTime 
+0x070 WaitRegister
:  
+0x000 State
: 0y001 
+0x186 WaitIrql
: 0 '' 
+0x187 WaitMode
: 1 '' 
+0x1b4 WaitTime
: 0x39b38f8 
+0x24b WaitBlockCount     : 0x1 '' 
+0x283 WaitReason
: 0x6 ''
Flag
Applies To
Meaning
UmsScheduled
Threads
This thread is a UMS Worker (scheduled) thread.
UmsPrimary
Threads
This thread is a UMS Scheduler (primary) thread.
MutantType
Mutants
Mapping of the Type
MutantSize
Mutants
Unused.
DpcActive
Mutants
The mutant was acquired during a DPC.
MutantReserved
Mutants
Unused.
QueueType
Queues
Mapping of the Type
Abandoned
Queues
The queue no longer has any threads that are waiting on it.
DisableIncrement
Queues
No priority boost should be given to a thread waking up to 
handle a packet on the queue.
SignalState 
and the WaitListHead
WaitListHead
WaitListHead
pointers are identical, this can either mean that there are no threads waiting or that one thread 
is waiting on this object. You can tell the difference if the identical pointer happens to be the ad-
lkd> dx (nt!_KWAIT_BLOCK*)0xffff898f2b3451c0
(nt!_KWAIT_BLOCK*)0xffff898f2b3451c0
: 0xffff898f2b3451c0 [Type: _KWAIT_BLOCK *]
    [+0x000] WaitListEntry    [Type: _LIST_ENTRY]
    [+0x010] WaitType
: 0x1 [Type: unsigned char]
    [+0x011] BlockState
: 0x4 [Type: unsigned char]
    [+0x012] WaitKey
: 0x0 [Type: unsigned short]
    [+0x014] SpareLong
: 6066 [Type: long]
    [+0x018] Thread           : 0xffff898f2b345080 [Type: _KTHREAD *]
    [+0x018] NotificationQueue : 0xffff898f2b345080 [Type: _KQUEUE *]
    [+0x020] Object
: 0xffff898f2b64ba60 [Type: void *]
    [+0x028] SparePtr
: 0x0 [Type: void *]
In this case, the wait type indicates a WaitAny, so we know that there is a thread blocking on 
WaitAny, so we know that there is a thread blocking on 
WaitAny
the event, whose pointer we are given. We also see that the wait block is active. Next, we can 
lkd> dt nt!_KTHREAD 0xffff898f2b345080 WaitRegister.State WaitIrql WaitMode WaitBlockCount
     WaitReason WaitTime
+0x070 WaitRegister
: 
+0x000 State
: 0y001
+0x186 WaitIrql
: 0 ''
+0x187 WaitMode
: 1 ''
+0x1b4 WaitTime
: 0x39b38f8
+0x24b WaitBlockCount     : 0x1 ''
+0x283 WaitReason
: 0x6 ''
194 
CHAPTER 8 System mechanisms
The data shows that this is a committed wait that was performed at IRQL 0 (Passive Level) 
with a wait mode of UserMode, at the time shown in 15 ms clock ticks since boot, with the reason 
indicating a user-mode application request. We can also see that this is the only wait block this 
thread has, meaning that it is not waiting for any other object.
the second pointer value in the WaitListEntry
!thread on the thread pointer in the wait block) to traverse the list and see what other threads
look at their WaitBlockCount to see how many other wait blocks were present, and simply keep
incrementing the pointer by sizeof(KWAIT_BLOCK).
Another possibility is that the wait type would have been WaitNotification
KQUEUE) structure, which is 
itself a dispatcher object. Potentially, it would also have had its own nonempty wait block list, which 
would have revealed the wait block associated with the worker thread that will be asynchronously 
eventually execute, you would have to dump user-mode thread pool data structures.
Keyed events
A synchronization object called a keyed event bears special mention because of the role it played in 
user-mode-exclusive synchronization primitives and the development of the alert-by-ID primitive, 
futex in the Linux operating system (a well-
with low-memory situations when using critical sections, which are user-mode synchronization objects 
a “key” for which it waits, where the thread wakes when another thread of the same process signals 
the event with the same key. As we pointed out, if this sounds familiar to the alerting mechanism, it is 
because keyed events were its precursor.
If there was contention, EnterCriticalSection would dynamically allocate an event object, and the 
thread wanting to acquire the critical section would wait for the thread that owns the critical section to 
signal it in LeaveCriticalSection. Clearly, this introduces a problem during low-memory conditions: criti-
cal section acquisition could fail because the system was unable to allocate the event object required. 
In a pathological case, the low-memory condition itself might have been caused by the application try-
the only scenario that could cause this to fail—a less likely scenario was handle exhaustion. If the pro-
cess reached its handle limit, the new handle for the event object could fail.
It might seem that preallocating a global standard event object, similar to the reserve objects we 
-
tions, each of which can have its own locking state, this would require an unknown number of preal-
keyed events, however, was 
The data shows that this is a committed wait that was performed at IRQL 0 (Passive Level) 
with a wait mode of UserMode, at the time shown in 15 ms clock ticks since boot, with the reason 
indicating a user-mode application request. We can also see that this is the only wait block this 
thread has, meaning that it is not waiting for any other object.
the second pointer value in the WaitListEntry
WaitListEntry
WaitListEntry
!thread on the thread pointer in the wait block) to traverse the list and see what other threads 
!thread on the thread pointer in the wait block) to traverse the list and see what other threads 
!thread
look at their WaitBlockCount to see how many other wait blocks were present, and simply keep 
WaitBlockCount to see how many other wait blocks were present, and simply keep 
WaitBlockCount
incrementing the pointer by sizeof(KWAIT_BLOCK).
Another possibility is that the wait type would have been WaitNotification
KQUEUE) structure, which is
itself a dispatcher object. Potentially, it would also have had its own nonempty wait block list, which
would have revealed the wait block associated with the worker thread that will be asynchronously 
eventually execute, you would have to dump user-mode thread pool data structures.
CHAPTER 8 System mechanisms
195
that a single event could be reused among different threads, as long as each one provided a different 
key to distinguish itself. By providing the virtual address of the critical section itself as the key, this ef-
fectively allows multiple critical sections (and thus, waiters) to use the same keyed event handle, which 
can be preallocated at process startup time.
key
critical section). When the owner thread releases the keyed event by signaling it, only a single thread 
waiting on the key is woken up (the same behavior as synchronization events, in contrast to notifica-
tion events). Going back to our use case of critical sections using their address as a key, this would im-
ply that each process still needs its own keyed event because virtual addresses are obviously unique 
to a single process address space. However, it turns out that the kernel can wake only the waiters in 
the current process so that the key is even isolated across processes, meaning that there can be only 
a single keyed event object for the entire system. 
As such, when EnterCriticalSection called NtWaitForKeyedEvent to perform a wait on the keyed 
event, it gave a NULL handle as parameter for the keyed event, telling the kernel that it was unable 
to create a keyed event. The kernel recognizes this behavior and uses a global keyed event named 
ExpCritSecOutOfMemoryEvent
a named keyed event anymore because the kernel keeps track of the object and its references.
However, keyed events were more than just a fallback object for low-memory conditions. When 
multiple waiters are waiting on the same key and need to be woken up, the key is signaled multiple 
times, which requires the object to keep a list of all the waiters so that it can perform a “wake” opera-
tion on each of them. (Recall that the result of signaling a keyed event is the same as that of signaling a 
synchronization event.) However, a thread can signal a keyed event without any threads on the waiter 