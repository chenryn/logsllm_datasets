### 15.2.2 GUC 参数设置

GBase 8s 提供了六类 GUC 参数，具体分类和设置方式如下表所示。

**表 15-1 GUC 参数说明**

| 参数类型 | 说明 | 设置方式 |
| --- | --- | --- |
| INTERNAL | 固定参数，在创建数据库时确定。用户无法修改，只能通过 `SHOW` 语法或 `pg_settings` 视图进行查看。 | 无 |
| POSTMASTER | 数据库服务端参数，在数据库启动时确定。可以通过配置文件指定。 | 支持表 2 中的方式一、方式四。 |
| SIGHUP | 数据库全局参数，可在数据库启动时设置，或在数据库启动后发送指令重新加载。 | 支持表 2 中的方式一、方式二、方式四。 |
| BACKEND | 会话连接参数，在创建会话连接时指定，连接建立后无法修改。连接断开后参数失效。内部使用参数，不推荐用户设置。 | 支持表 2 中的方式一、方式二、方式四。 |
| SUSET | 数据库管理员参数。可在数据库启动时、数据库启动后或者由数据库管理员通过 SQL 进行设置。 | 支持表 2 中的方式一、方式二，或由数据库管理员通过方式三设置。 |
| USERSET | 普通用户参数。可被任何用户在任何时刻设置。 | 支持表 2 中的方式一、方式二或方式三设置。 |

**说明：**
- 设置 BACKEND 参数后，下次建立会话连接时生效。
- 设置 SUSET 和 USERSET 参数时，优先级顺序为：`SET`（会话级别） > `ALTER USER` > `ALTER DATABASE` > `gs_guc`。

### 15.2.3 GUC 参数设置方式

GBase 8s 提供了四种方式来修改 GUC 参数，具体操作如下表所示。

**表 15-2 GUC 参数设置方式**

| 序号 | 设置方法 |
| --- | --- |
| 方式一 | (1) 使用以下命令修改参数：<br> `gs_guc set -D datadir -c "paraname=value"`<br> 如果参数是字符串变量，则使用 `-c parameter="value"` 或 `-c "parameter='value'"`。<br> 在所有数据库节点上同时设置某个参数：<br> `gs_guc set -N all -I all -c "paraname=value"`<br> (2) 重启数据库使参数生效。<br> `gha_ctl stop all -l http://:2379`<br> `gha_ctl start all -l http://:2379` |
| 方式二 | 使用 `gs_guc reload` 命令：<br> `gs_guc reload -D datadir -c "paraname=value"`<br> 在所有数据库节点上同时设置某个参数：<br> `gs_guc reload -N all -I all -c "paraname=value"` |
| 方式三 | 修改指定数据库、用户、会话级别的参数：<br> - 设置数据库级别的参数：<br> `gsql=# ALTER DATABASE dbname SET paraname TO value;`<br> 在下次会话中生效。<br> - 设置用户级别的参数：<br> `gsql=# ALTER USER username SET paraname TO value;`<br> 在下次会话中生效。<br> - 设置会话级别的参数：<br> `gsql=# SET paraname TO value;`<br> 修改本次会话中的取值。退出会话后，设置将失效。 |
| 方式四 | 使用 `ALTER SYSTEM SET` 命令修改数据库参数：<br> - 设置 POSTMASTER 级别的参数：<br> `gsql=# ALTER SYSTEM SET paraname TO value;`<br> 重启后生效。<br> - 设置 SIGHUP 级别的参数：<br> `gsql=# ALTER SYSTEM SET paraname TO value;`<br> 立刻生效（实际等待线程重新加载参数略有延迟）。<br> - 设置 BACKEND 级别的参数：<br> `gsql=# ALTER SYSTEM SET paraname TO value;`<br> 在下次会话中生效。 |

**说明：**
- 使用方式一和方式二设置参数时，若所设参数不属于当前环境，数据库会提示参数不在支持范围内的相关信息。

### 15.2.4 操作步骤

#### 使用方式一设置数据库参数
以在数据库主节点设置 `archive_mode` 参数为例：

1. 以操作系统用户 `gbase` 登录数据库主节点。
2. 查看 `archive_mode` 参数：
   ```sh
   cat /home/gbase/data/dn1/dn1_1/postgresql.conf | grep archive_mode
   ```
   输出示例：
   ```
   archive_mode=on
   ```
   `on` 表示日志要进行归档操作。
3. 设置 `archive_mode` 参数为 `off`，关闭日志的归档操作：
   ```sh
   gs_guc set -D /home/gbase/data/dn1/dn1_1 -c "archive_mode=off"
   ```
   可以使用以下命令在所有数据库节点上设置 `archive_mode` 参数为 `off`：
   ```sh
   gs_guc set -N all -I all -c "archive_mode=off"
   ```
4. 重启数据库使参数生效：
   ```sh
   gha_ctl stop all -l http://:2379
   gha_ctl start all -l http://:2379
   ```
5. 使用如下命令连接数据库：
   ```sh
   gsql -d postgres -p 15432
   ```
   `postgres` 为需要连接的数据库名称，`15432` 为数据库主节点的端口号。
   连接成功后，系统显示类似如下信息：
   ```
   gsql((GBase8s 3.0.0 BXX build d28887c9) compiled at 2022-05-13 11:31:40 commit 0 lastmr 55)
   Non-SSL connection (SSL connection is recommended when requiring high-security)
   Type "help" for help.
   gsql=#
   ```
6. 检查参数设置的正确性：
   ```sql
   gsql=# SHOW archive_mode;
   ```
   输出示例：
   ```
   archive_mode
   --------------
   off
   (1 row)
   ```

#### 使用方式二设置参数
以在数据库主节点设置 `authentication_timeout` 参数为例：

1. 以操作系统用户 `gbase` 登录数据库主节点。
2. 查看 `authentication_timeout` 参数：
   ```sh
   cat /home/gbase/data/dn1/dn1_1/postgresql.conf | grep authentication_timeout
   ```
   输出示例：
   ```
   authentication_timeout=1min
   ```
3. 设置 `authentication_timeout` 参数为 `59s`：
   ```sh
   gs_guc reload -N all -I all -c "authentication_timeout=59s"
   ```
   输出示例：
   ```
   Total instances: 2. Failed instances: 0.
   Success to perform gs_guc!
   ```
4. 使用如下命令连接数据库：
   ```sh
   gsql -d postgres -p 15432
   ```
   `postgres` 为需要连接的数据库名称，`15432` 为数据库主节点的端口号。
   连接成功后，系统显示类似如下信息：
   ```
   gsql((GBase8s 3.0.0 BXX build d28887c9) compiled at 2022-05-13 11:31:40 commit 0 lastmr 55)
   Non-SSL connection (SSL connection is recommended when requiring high-security)
   Type "help" for help.
   gsql=#
   ```
5. 检查参数设置的正确性：
   ```sql
   gsql=# SHOW authentication_timeout;
   ```
   输出示例：
   ```
   authentication_timeout
   ------------------------
   59s
   (1 row)
   ```

#### 使用方式三设置参数
以设置 `explain_perf_mode` 参数为例：

1. 以操作系统用户 `gbase` 登录数据库主节点。
2. 使用如下命令连接数据库：
   ```sh
   gsql -d postgres -p 15432
   ```
   `postgres` 为需要连接的数据库名称，`15432` 为数据库主节点的端口号。
   连接成功后，系统显示类似如下信息：
   ```
   gsql((GBase8s 3.0.0 BXX build d28887c9) compiled at 2022-05-13 11:31:40 commit 0 lastmr 55)
   Non-SSL connection (SSL connection is recommended when requiring high-security)
   Type "help" for help.
   gsql=#
   ```
3. 查看 `explain_perf_mode` 参数：
   ```sql
   gsql=# SHOW explain_perf_mode;
   ```
   输出示例：
   ```
   explain_perf_mode
   -------------------
   normal
   (1 row)
   ```
4. 设置 `explain_perf_mode` 参数：
   - 设置数据库级别的参数：
     ```sql
     gsql=# ALTER DATABASE postgres SET explain_perf_mode TO pretty;
     ```
     当结果显示为 `ALTER DATABASE` 时，表示设置成功。在下次会话中生效。
   - 设置用户级别的参数：
     ```sql
     gsql=# ALTER USER gbase SET explain_perf_mode TO pretty;
     ```
     当结果显示为 `ALTER ROLE` 时，表示设置成功。在下次会话中生效。
   - 设置会话级别的参数：
     ```sql
     gsql=# SET explain_perf_mode TO pretty;
     ```
     当结果显示为 `SET` 时，表示设置成功。修改本次会话中的取值。退出会话后，设置将失效。
5. 检查参数设置的正确性：
   ```sql
   gsql=# SHOW explain_perf_mode;
   ```
   输出示例：
   ```
   explain_perf_mode
   --------------
   pretty
   (1 row)
   ```

### 15.2.5 示例

#### 示例 1：使用方式一修改 GBase 8s 数据库主节点的最大连接数

1. 以操作系统用户 `gbase` 登录数据库主节点。
2. 使用如下命令连接数据库：
   ```sh
   gsql -d postgres -p 15432
   ```
   `postgres` 为需要连接的数据库名称，`15432` 为数据库主节点的端口号。
   连接成功后，系统显示类似如下信息：
   ```
   gsql((GBase8s 3.0.0 BXX build d28887c9) compiled at 2022-05-13 11:31:40 commit 0 lastmr 55)
   Non-SSL connection (SSL connection is recommended when requiring high-security)
   Type "help" for help.
   gsql=#
   ```
3. 查看最大连接数：
   ```sql
   gsql=# SHOW max_connections;
   ```
   输出示例：
   ```
   max_connections
   -----------------
   200
   (1 row)
   ```
4. 使用如下命令退出数据库：
   ```sql
   gsql=# \q
   ```
5. 修改 GBase 8s 数据库主节点的最大连接数：
   ```sh
   gs_guc set -N all -I all -c "max_connections=800"
   ```
6. 重启 GBase 8s：
   ```sh
   gs_om -t stop && gs_om -t start
   ```
7. 使用如下命令连接数据库：
   ```sh
   gsql -d postgres -p 15432
   ```
   `postgres` 为需要连接的数据库名称，`15432` 为数据库主节点的端口号。
   连接成功后，系统显示类似如下信息：
   ```
   gsql((GBase8s 3.0.0 BXX build d28887c9) compiled at 2022-05-13 11:31:40 commit 0 lastmr 55)
   Non-SSL connection (SSL connection is recommended when requiring high-security)
   Type "help" for help.
   gsql=#
   ```
8. 查看最大连接数：
   ```sql
   gsql=# SHOW max_connections;
   ```
   输出示例：
   ```
   max_connections
   -----------------
   800
   (1 row)
   ```

#### 示例 2：使用方式二设置数据库主节点的客户端认证最长时间参数 `authentication_timeout`

1. 以操作系统用户 `gbase` 登录数据库主节点。
2. 使用如下命令连接数据库：
   ```sh
   gsql -d postgres -p 15432
   ```
   `postgres` 为需要连接的数据库名称，`15432` 为数据库主节点的端口号。
   连接成功后，系统显示类似如下信息：
   ```
   gsql((gsql x.x.x build f521c606) compiled at 2021-09-16 14:55:22 commit 2935 lastmr 6385 release)
   Non-SSL connection (SSL connection is recommended when requiring high-security)
   Type "help" for help.
   gsql=#
   ```
3. 查看客户端认证的最长时间：
   ```sql
   gsql=# SHOW authentication_timeout;
   ```
   输出示例：
   ```
   authentication_timeout
   ------------------------
   1min
   (1 row)
   ```
4. 使用如下命令退出数据库：
   ```sql
   gsql=# \q
   ```
5. 修改数据库主节点的客户端认证最长时间：
   ```sh
   gs_guc reload -N all -I all -c "authentication_timeout=59s"
   ```
6. 使用如下命令连接数据库：
   ```sh
   gsql -d postgres -p 15432
   ```
   `postgres` 为需要连接的数据库名称，`15432` 为数据库主节点的端口号。
   连接成功后，系统显示类似如下信息：
   ```
   gsql((gsql x.x.x build f521c606) compiled at 2021-09-16 14:55:22 commit 2935 lastmr 6385 release)
   Non-SSL connection (SSL connection is recommended when requiring high-security)
   Type "help" for help.
   gsql=#
   ```
7. 查看客户端认证的最长时间：
   ```sql
   gsql=# SHOW authentication_timeout;
   ```
   输出示例：
   ```
   authentication_timeout
   ------------------------
   59s
   (1 row)
   ```

#### 示例 3：修改 GBase 8s 数据库节点的最大连接数

1. 以操作系统用户 `gbase` 登录数据库主节点。
2. 使用如下命令连接数据库：
   ```sh
   gsql -d postgres -p 15432
   ```
   `postgres` 为需要连接的数据库名称，`15432` 为数据库主节点的端口号。
   连接成功后，系统显示类似如下信息：
   ```
   gsql((GBase8s 3.0.0 BXX build d28887c9) compiled at 2022-05-13 11:31:40 commit 0 lastmr 55)
   Non-SSL connection (SSL connection is recommended when requiring high-security)
   Type "help" for help.
   gsql=#
   ```
3. 查看最大连接数：
   ```sql
   gsql=# SHOW max_connections;
   ```
   输出示例：
   ```
   max_connections
   -----------------
   200
   (1 row)
   ```
4. 使用如下命令退出数据库：
   ```sql
   gsql=# \q
   ```
5. 修改 GBase 8s 数据库节点的最大连接数：
   ```sh
   gs_guc set -N all -I all -c "max_connections=800"
   ```
6. 重启 GBase 8s：
   ```sh
   gs_om -t stop && gs_om -t start
   ```
7. 使用如下命令连接数据库：
   ```sh
   gsql -d postgres -p 15432
   ```
   `postgres` 为需要连接的数据库名称，`15432` 为数据库主节点的端口号。
   连接成功后，系统显示类似如下信息：
   ```
   gsql((GBase8s 3.0.0 BXX build d28887c9) compiled at 2022-05-13 11:31:40 commit 0 lastmr 55)
   Non-SSL connection (SSL connection is recommended when requiring high-security)
   Type "help" for help.
   gsql=#
   ```
8. 查看最大连接数：
   ```sql
   gsql=# SHOW max_connections;
   ```
   输出示例：
   ```
   max_connections
   -----------------
   800
   (1 row)
   ```

---

**南大通用数据技术股份有限公司**
**GBase 8s V8.8 开发者手册**