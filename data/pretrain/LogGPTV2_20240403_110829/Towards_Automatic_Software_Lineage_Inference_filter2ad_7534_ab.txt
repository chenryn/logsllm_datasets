to simulate what the results would be with ideal disassem-
bling, which is in line with our goal of understanding the
limits of the selected approaches.
• Basic blocks comprising disassembly instructions:
ILINE disassembles a binary and identiﬁes its basic blocks.
Each feature is a sequence of instructions in a basic block.
For example, in Figure 2c, each line is a series of instruc-
tions in a basic block; and each line is considered as an
individual feature. This feature set is semantically richer
than n-grams.
• Basic blocks comprising instruction mnemonics:
For each disassembled instruction, ILINE retains only its
mnemonic and the types of its operands (immediate, reg-
ister, and memory). For example, add $0x2c, %esp
is transformed into add imm, reg in Figure 2d. By
normalizing the operands, this feature set helps us miti-
gate errors from syntactical differences, e.g., changes in
offsets and jump target addresses, and register renaming.
• Basic blocks comprising normalized mnemonics:
ILINE also normalizes mnemonics. First, mnemonics for
all conditional jumps, e.g., je, jne and jg, are normal-
ized into jcc because the same branching condition can
be represented by ﬂipped conditional jumps. For exam-
ple, program p1 uses cmp eax, 1; jz addr1 while
program p2 has cmp eax, 1; jnz addr2. Second,
ILINE removes the nop instruction.
2.4 Using Dynamic Features
Modern malware is often found in a packed binary for-
mat [15, 21, 32, 38] and it is often not easy to analyze such
packed/obfuscated programs with static analysis tools.
In order to mitigate such difﬁculties, dynamic analysis
has been proposed to monitor program executions and
changes made to a system at run time [1, 2, 13, 35]. The
idea of dynamic analysis is to run a program to make it
disclose its “behaviors”. Dynamic analysis on malware is
typically performed in controlled environments such as
virtual machines and isolated networks to prevent infec-
tions spreading to other machines [37].
• Instructions executed at run time: For malware
speciﬁcally, ILINE traces an execution using a binary in-
strumentation tool and collects a set of instruction traces.
Similar to static features, ILINE also generates additional
sets of features by normalizing operands and mnemonics.
2.5 Using Multi-Resolution Features
Besides considering each feature set individually, ILINE
utilizes multiple feature sets to beneﬁt from normalized
and speciﬁc features. Speciﬁcally, ILINE ﬁrst uses the
most normalized feature set to detect similar programs
and gradually employs less-normalized feature sets to
distinguish highly similar programs. This ensures that
less similar programs (e.g., major version changes) will
be connected only after more similar programs (e.g., only
changes of constant values) have been connected.
3 Distance Measures Between Feature Sets
To measure the distance between two programs p1 and
p2, ILINE uses the symmetric difference between their
feature sets, which captures both additions and deletions
made between p1 and p2. Let f1 and f2 denote the two
feature sets extracted from p1 and p2, respectively. The
symmetric distance between f1 and f2 is deﬁned to be
SD( f1, f2) =| f1(cid:31) f2| +| f2(cid:31) f1|,
(1)
which denotes the cardinality of the set of features that are
in f1 or f2 but not both. The symmetric distance basically
measures the number of unique features in p1 and p2.
Distance metrics other than symmetric distance may
be used for lineage inference as well. For example, the
Dice coefﬁcient distance DC( f1, f2) = 1 − 2| f1∩ f2|
, the
| f1|+| f2|
Jaccard distance JD( f1, f2) =1 − | f1∩ f2|
, and the Jaccard
| f1∪ f2|
containment distance JC( f1, f2) =1 − | f1∩ f2|
min(| f1|,| f2|) can all
be used to calculate the dissimilarity between two sets.
Besides the above four distance measures, which are all
symmetric, i.e., distance( f1, f2) = distance( f2, f1),
we have also evaluated an asymmetric distance measure
to determine the direction of derivation between p1 and
p2. We call it the weighted symmetric distance, denoted
WSD( f1, f2) =| f1(cid:31) f2| ×C del + | f2(cid:31) f1| ×C add where
Cdel and Cadd denote the cost for each deletion and each
addition, respectively. Note that WSD( f1, f2) = SD( f1, f2)
when Cdel = Cadd = 1.
Our hypothesis is that additions and deletions should
have different costs in a software evolution process, and
we should be able to infer the derivative direction be-
tween two programs more accurately using the weighted
symmetric distance. For example, in many open source
projects and malware, code size usually grows over
time [8, 45]. In other words, addition of new code is pre-
ferred to deletion of existing code. Differentiating Cdel
and Cadd can help us to decide a direction of derivation. In
this paper, we set Cdel = 2 and Cadd = 1. (We leave it as
84  22nd USENIX Security Symposium 
USENIX Association
future work to investigate the effect of these values.) Sup-
pose program pi has feature set fi = {m1,m2,m3}, and
program p j contains feature set f j = {m1,m2,m4,m5}.
By introducing asymmetry, evolving from pi to p j has a
distance of 4 (deletion of m3 and addition of m4 and m5),
while the opposite direction has a distance of 5 (deletion
of m4 and m5 and addition of m3). Since pi → p j has a
smaller distance, we conclude that it is the more plausible
scenario.
For the rest of our paper, we use SD as a representative
distance metric when we explain our lineage inference
algorithms. We evaluated the effectiveness of all ﬁve dis-
tance measures on inferring lineage using SD as a baseline
(see §8). Regarding metric-based features, e.g., section
size, we measure the distance between two samples as the
difference of their metric values.
4 Software Lineage Inference
Our goal is to automatically infer software lineage of
program binaries. We build ILINE to systematically ex-
plore the design space illustrated in Figure 1 to understand
advantages and disadvantages of our algorithms for infer-
ring software lineage. We applied our algorithms to two
types of lineage: straight line lineage (§4.1) and directed
acyclic graph (DAG) lineage (§4.2). In particular, this is
motivated by the observation that there are two common
development models: serial/mainline development and
parallel development. In serial development, every devel-
oper makes a series of check-ins on a single branch; and
this forms straight line lineage. In parallel development,
several branches are created for different tasks and are
merged when needed, which results in DAG lineage.
4.1 Straight Line Lineage
The ﬁrst scenario that we have investigated is 1-straight
line lineage, i.e., a program source tree that has no branch-
ing/merging history. This is a common development
history for smaller programs. We have also extended
our technique to handle multiple straight line lineages
(§4.1.4).
Software lineage inference in this setting is a problem
of determining a temporal ordering. Given N unlabeled
revisions of program p, the goal is to output label “1” for
the 1st revision, “2” for the 2nd revision, and so on. For
example, if we are given 100 revisions of program p and
we have no timestamp of the revisions (or 100 revisions
are randomly permuted), we want to rearrange them in
the correct order starting from the 1st revision p1 to the
100th revision p100.
4.1.1 Identifying the Root Revision
In order to identify the root/ﬁrst revision that has no parent
in lineage, we explore two different choices: (i) inferring
the root/earliest revision, and (ii) using the real root revi-
sion from the ground truth.
ILINE picks the root revision based upon Lehman’s
observation [28]. The revision that has the minimum code
complexity (the 2nd software evolution law) and the min-
imum size (the 6th software evolution law) is selected
as the root revision. The hypothesis is that developers
are likely to add more code to previous revisions rather
than delete other developers’ code, which can increase
code complexity and/or code size. This is also reﬂected
in security scenarios, e.g., malware authors are also likely
to add more modules to make it look different to bypass
anti-virus detection, which leads to high code complex-
ity [8]. In addition, provenance information such as ﬁrst
seen date [10] and tool-chain components [36] can be
leveraged to infer the root.
Inferring Order
We also evaluate ILINE with the real root revision given
from the ground truth in case the inferred root revision
was not correct. By comparing the accuracy of the lin-
eage with the real root revision to the accuracy of the
lineage with the inferred root revision, we can assess the
importance of identifying the correct root revision.
4.1.2
From the selected root revision, ILINE greedily picks the
closest revision in terms of the symmetric distance as the
next revision. Suppose we have three contiguous revi-
sions: p1, p2, and p3. One hypothesis is SD(p1, p2) <
SD(p1, p3), i.e., the symmetric distance between two adja-
cent revisions would be smaller. This hypothesis follows
logically from Lehman’s software evolution laws.
There may be cases where the symmetric distance be-
tween two different pairs are the same, i.e., a tie. Suppose
SD(p1, p2) = SD(p1, p3). Then both p2 and p3 become
candidates for the next revision of p1. Using normalized
features can cause more ties than using speciﬁc features
because of the information loss.
ILINE utilizes more speciﬁc features in order to break
ties more correctly (see §2.5). For example, if the symmet-
ric distances using normalized mnemonics are the same,
then the symmetric distances using instruction mnemon-
ics are used to break ties. ILINE gradually reduces nor-
malization strength to break ties.
4.1.3 Handling Outliers
As an optional step, ILINE handles outliers in our recov-
ered ordering, if any. Since ILINE constructs lineage
in a greedy way, if one revision is not selected mistak-
enly, the revision may not be selected until the very last
round. To see this, suppose we have 5 revisions p1, p2,
p3, p4, and p5. If ILINE falsely selects p3 as the next revi-
sion of p1 (p1 → p3) and SD(p3, p4) < SD(p3, p2), then
p4 will be chosen as the next revision (p1 → p3 → p4).
It is likely that SD(p4, p5) < SD(p4, p2) holds because
USENIX Association  
22nd USENIX Security Symposium  85
p4 and p5 are neighboring revisions, and then p5 will
be selected (p1 → p3 → p4 → p5). The probability
of selecting p2 is getting lower and lower if we have
more revisions. At last p2 is added as the last revision
(p1 → p3 → p4 → p5 → p2) and becomes an outlier.
In order to handle such outliers, ILINE monitors the
symmetric distance between every adjacent pair in the
constructed lineage G. Since the symmetric distance at
an outlier is the accumulation of changes from multiple
revisions, it would be much larger than the difference be-
tween two contiguous revisions. (See Figure 10 for a real
life example.) ILINE detects outliers by detecting peaks
among the symmetric distances between consecutive pairs
by means of a user-conﬁgurable threshold.
Once an outlier r has been identiﬁed, ILINE eliminates
it in two steps. First, ILINE locates the revision y that has
the minimum distance with r. Then, ILINE places r im-
mediately next to y, favoring the side with a gap that has a
larger symmetric distance. In our example, suppose p3 is
the closest revision to p2. ILINE will compare SD(p1, p3)
(before) with SD(p3, p4) (after) and then insert p2 into
the bigger of the two gaps. Therefore, in the case when
SD(p1, p3) is larger than SD(p3, p4), we will recover the
correct lineage, i.e., p1 → p2 → p3 → p4 → p5.
4.1.4 k-Straight Line Lineage
We consider k-straight line lineage where we have a mixed
data set of k different programs instead of a single pro-
gram, and each program has straight line lineage.
For k-straight line lineage, ILINE ﬁrst performs clus-
tering on a given data set P to group the same (similar)
programs into the same cluster Pk ⊆ P. Programs are sim-
ilar if D(pi, p j) (cid:31) t where D(·) means a distance measure-
ment between two programs and t is a distance threshold
to be considered as a group. After we isolate distinct
program groups between each other, ILINE identiﬁes the
earliest revision p1
k and infers straight line lineage for each
program group Pk using the straight line lineage method.
We denote the r-th revision of the program k as pr
k. One
caveat with the use of clustering as a preprocessing step
is that more precise clustering may require reliable “com-
ponents” extraction from program binaries, which is out
of our scope.
Given a collection of programs and revisions, previ-
ous work shows that clustering can effectively separate
them [5, 18, 20, 46]. ILINE uses hierarchical clustering
because the number of variants k is not determined in ad-
vance. Other clustering methods like k-means clustering
require that k is set at the beginning. ILINE groups two
programs if JD( f1, f2) (cid:31) t where t is a distance threshold
(0 (cid:31) t (cid:31) 1). In order to decide an appropriate distance
threshold t, we explore entire range of t and ﬁnd the value
where the resulting number of clusters becomes stable
(see Figure 7 for an example).
4.2 Directed Acyclic Graph Lineage
The second scenario we studied is directed acyclic graph
(DAG) lineage. This generalizes straight line lineage to
include branching and merging histories. Branching and
merging are common in large scale software development
because branches allow developers to modify and test
code without affecting others.
Identifying the Root Revision
In a lineage graph G, branching is represented by a
node with more than one outgoing arcs, i.e., a revision
with multiple children. Merging is denoted by a node
with more than one incoming arcs, i.e., a revision with
multiple parents.
4.2.1
In order to identify the root revision in lineage, we explore
two different choices: (i) inferring the root/earliest revi-
sion and (ii) using the real root revision from the ground
truth as discussed in §4.1.1.
4.2.2 Building Spanning Tree Lineage
ILINE builds (directed) spanning tree lineage by greedy
selection. This step is similar to, but different from the
ordering recovery step of the straight line lineage method.
In order to recover an ordering, ILINE only allows the last
revision in the recovered lineage G to have an outgoing
arc so that the lineage graph becomes a straight line. For
DAG lineage, however, ILINE allows all revisions in the
recovered lineage G to have an outgoing arc so that a
revision can have multiple children.
For example, given three revisions p1, p2, and p3, if
p1 is selected as a root and SD(p1, p2) < SD(p1, p3), then
ILINE connects p1 and p2 (p1 → p2). If SD(p1, p3) <
SD(p2, p3) holds, p1 will have another child p3 and a
lineage graph looks like the following:
p1
p2
p3
We evaluate three different policies on the use of a
timestamp in DAG lineage: no timestamp, the pseudo
timestamp from the recovered straight line lineage, and
the real timestamp from the ground truth. Without a times-
tamp, the revision p j to be added to G is determined by
the minimum symmetric distance min{SD(pi, p j) : pi ∈
ˆN, p j ∈ ˆNc} where ˆN ⊆ N represents a set of nodes al-
ready inserted into G and ˆNc denotes a complement of
ˆN; and an arc (pi, p j) is added. However, with the use
of a timestamp, the revision p j ∈ ˆNc to be inserted is de-
termined by the earliest timestamp and an arc is drawn
based upon the minimum symmetric distance. In other
words, we insert nodes in the order of timestamps.
4.2.3 Adding Non-Tree Arcs
While building (directed) spanning tree lineage, ILINE
identiﬁes branching points by allowing the revisions pi ∈
86  22nd USENIX Security Symposium 
USENIX Association
ˆN to have more than one outgoing arcs—revisions with
multiple children. In order to pinpoint merging points,
ILINE adds non-tree arcs also known as cross arcs to
spanning tree lineage.
For every non-root node pi, ILINE identiﬁes a unique
feature set ui that does not come from its parent p j, i.e.,
ui = {x : x ∈ f i and x (cid:29)∈ f j}. Then ILINE identiﬁes possi-
ble parents pk ∈ N as follows:
i) if real/pseudo timestamps are given, pk with earlier
timestamps than the timestamp of pi
ii) for symmetric distance measures such as SD, DC, JD,
and JC, non-ancestors pk added to G before pi
iii) for the asymmetric distance measure WSD, non-
ancestors pk satisfying WSD(pk, pi) < WSD(pi, pk)
become possible parents. Among the identiﬁed possible
parents pk, if ui and f k extracted from pk have common
features, then ILINE adds a non-tree arc from pk to pi.
Consequently, pi becomes a merging point of p j and pk
and a lineage graph looks like the following:
p j
pk
pi
After adding non-tree arcs, ILINE outputs DAG lineage
showing both branching and merging.
5 Software Lineage Metrics
We build IEVAL to scientiﬁcally measure the quality of
our constructed lineage with respect to the ground truth.
5.1 Straight Line Lineage
We use dates of commit histories and version numbers as
the ground truth of ordering G∗ = (N,A∗), and compare
the recovered ordering by ILINE G = (N,A) with the
ground truth to measure how close G is to G∗.
IEVAL measures the accuracy of the constructed lin-
eage graph G using two metrics: number of inversions
and edit distance to monotonicity (EDTM). An inversion
happens if ILINE gives a wrong ordering for a chosen pair
of revisions. The total number of inversions is the number
of wrong ordering for all (cid:31)|N|2 (cid:30) pairs. The EDTM is the
minimum number of revisions that need to be removed to
make the remaining nodes in the lineage graph G in the
correct order. The longest increasing subsequence (LIS)
can be computed in G, which is the longest (not necessar-
ily contiguous) subsequence in the sorted order. Then the
EDTM is calculated by |N|−|LIS|, which depicts how
many nodes are out-of-place in G.
p1
p2
p3
p4
(a) Lineage 1
p5
p1
p4
p3
p5
(b) Lineage 2
p2
Figure 3: Inversions and edit distance to monotonicity
For example, we have 5 revisions of a program and
ILINE outputs lineage 1 in Figure 3a and lineage 2 in
Figure 3b. Lineage 1 has 1 inversion (a pair of p3 − p2)
and 1 EDTM (delete p2). Lineage 2 has 3 inversions
(p3 − p2, p4 − p2, and p5 − p2) and 1 EDTM (delete p2).