            if(cur > 0x7f) {
                cur = u.val[2];
                result |= (uint)(cur & 0x7f)  0x7f) {
                    cur = u.val[3];
                    result |= (uint)(cur & 0x7f)  0x7f) {
                        cur = u.val[4];
                        result |= (uint)cur  0) {
            if (uleb128_value(header.instructions_count) > 0)
                Instruction inst[uleb128_value(header.instructions_count)];
            Constants constants;
            if (header.debuginfo_size_ > 0)
                DebugInfo debuginfo;
        }
    } Proto;
这里Proto的定义仍然采用与上面GlobalHeader一样的010
Editor模板语法方式，这种类似C语言的描述，更容易从定义上看出Proto结构体的字段信息。
ProtoHeader类型的header字段描述了Proto的头部信息，定义如下：
    typedef struct {
        uleb128 size;
        if (uleb128_value(size) > 0) {
            ProtoFlags flags;
            uchar arguments_count;
            uchar framesize;
            uchar upvalues_count;
            uleb128 complex_constants_count;
            uleb128 numeric_constants_count;
            uleb128 instructions_count;
            if (!is_stripped) {
                uleb128 debuginfo_size;
                uleb128 first_line_number;
                uleb128 lines_count;
            }
        }
    } ProtoHeader;
size字段是标识了从当前字段开始，整个Proto结构体的大小，当该字段的取值大于0时，表示当前Proto不为空，即Proto的header字段后，接下来会包含Instruction指令与Constants常量等信息，并且ProtoHeader部分也会多出其他几个字段。首先是flags字段，ProtoFlags是一个uchar类型，这里单独使用一个结构体表示，是为了之后编写010
Editor模板时，更方便的为其编写read方法。ProtoFlags取值如下：
    typedef enum {
        FLAG_HAS_CHILD = 0b00000001,
        FLAG_IS_VARIADIC = 0b00000010,
        FLAG_HAS_FFI = 0b00000100,
        FLAG_JIT_DISABLED = 0b00001000,
        FLAG_HAS_ILOOP = 0b00010000
    } PROTO_FLAG;
**FLAG_HAS_CHILD**
标识当前Proto是一个“子函数”，即闭包(Closure)。这个标志位非常重要，为了更好的理解它的用处，先看下如下代码：
    function Create(n) 
    local function foo1()
    print(n)
            local function foo2()
                n = n + 10 
        print(n)
                local function foo3()
                    n = n + 100
                    print(n)
                end
            end
    end
    return foo1,foo2,foo3
    end
    f1,f2,f3 = Create(1000)
    f1()
这段Lua代码中，最外层的Create()向内，每个function都包含一个Closure。现在回忆一下Luac文件格式中，它们是如何存储的？
**在Luac文件中，每个Proto都有一个Protos字段，它用来描述Proto与Closure之间的层次信息，Proto采用从外向内的递归方式进行存储。而Luajit则采用线性的从内向外的同级结构进行存储，Proto与Closure之前的层级关系使用flags字段的FLAG_HAS_CHILD标志位进行标识，当flags字段的FLAG_HAS_CHILD标志位被置位，则表示当前层的Proto是上一层Proto的Closure。**
上面的代码片断在Luajit文件结构中的存局如下所示：
    struct Luajit lj;
        struct GlobalHeader header;
        struct Proto proto[0];  //foo3()
        struct Proto proto[1];  //foo2()
        struct Proto proto[2];  //foo1()
        struct Proto proto[3];  //Create()
        struct Proto proto[4];  //Full file
        struct Proto proto[5];  //empty
从存局中可以看出，最内层的foo3()位于Proto的最外层，它与Luac的布局恰恰是相反的，而proto[4]表示了整个Lua文件，它是Proto的最上层。最后的proto[5]，它在读取其ProtoHeader的size字段时，由于其值为0，而中止了整个文件的解析。即它的内容为空。
**FLAG_IS_VARIADIC** 标识了当前Proto是否返回多个值，上面的代码中，只有Create()的flags字段会对该标志置位。
**FLAG_HAS_FFI**
标识当前Proto是否有通过FFI扩展调用系统的功能函数。FLAG_JIT_DISABLED标识当前Proto是否禁用JIT，对于包含了具体代码的Proto，它的值通常没有没有被置位，表示有JIT代码。FLAG_HAS_ILOOP标识了当前Proto是否包含了ILOOP与JLOOP等指令。
在flags字段后面，是arguments_count字段，表示当前Proto有几个参数。接着是framesize字段，标识了Proto使用的栈大小。接下来四个字段upvalues_count、complex_constants_count、numeric_constants_count、instructions_count，它们分别表示UpValue个数、复合常数、数值常数、指令条数等信息。
如果当前Proto包含调试信息，则接下来是3个uleb128类型的字段debuginfo_size、first_line_number、lines_count。其中debuginfo_size字段指明后面DebugInfo结构体占用的字节大小，first_line_number指明当前Proto在源文件中的起始行，lines_count字段指明当前Proto在源文件中所占的行数。
如果上面的instructions_count字段值不为0，接下来则存放的是指令Instruction数组，每条指令长度与Luac一样，占用32位，但使用的指令格式完全不同，此处不展开讨论它。
指令后面是常量信息，它的定义如下：
    typedef struct(int32 upvalues_count, int32 complex_constants_count, int32 numeric_constants_count) {
        while (upvalues_count-- > 0) {
            uint16 upvalue;
        }
        while (complex_constants_count-- > 0) {
            ComplexConstant constant;
        }
        while (numeric_constants_count-- > 0) {
            NumericConstant numeric;
        }
    } Constants;
可以看到，Constants中包含3个数组字段，每个字段的具体数目与前面指定的upvalues_count、complex_constants_count、numeric_constants_count相关。每个UpValue信息占用16位，ComplexConstant保存的常量信息比较丰富，它可以保存字符串、整型、浮点型、TAB表结构等信息。它的结构体开始处是一个uleb128类型的tp字段，描述了ComplexConstant保存的具体的数据。它的类型包括：
    typedef enum {
        BCDUMP_KGC_CHILD = 0,
        BCDUMP_KGC_TAB = 1,
        BCDUMP_KGC_I64 = 2,
        BCDUMP_KGC_U64 = 3,
        BCDUMP_KGC_COMPLEX = 4,
        BCDUMP_KGC_STR = 5
    } BCDUMP_KGC_TYPE;
这里重点关注下`BCDUMP_KGC_TAB，它表示这是一个Table表结构，即类似如下代码片断生成的数据内容：
    tab={key1="val1",key2="val2"};
Table数据在Luajit中有专门的数据结构进行存储，它的定义如下：
    typedef struct {
        uleb128 array_items_count;
        uleb128 hash_items_count;
        local int32 array_items_count_ = uleb128_value(array_items_count);
        local int32 hash_items_count_ = uleb128_value(hash_items_count);
        while (array_items_count_-- > 0) {
            ArrayItem array_item;
        }
        while (hash_items_count_-- > 0) {
            HashItem hash_item;
        }
    } Table;
有基于数组的ArrayItem与基于Hash的HashItem两种Table类型结构，上面的tab即属于HashItem，它的定义如下：
    typedef struct {
        TableItem key;
        TableItem value;
    } HashItem;
TableItem描述了Table的键key与值value的类型与具体的数据内容，它的开始处是一个uleb128类型的tp字段，具体的取值类型如下：
    typedef enum {
        BCDUMP_KGC_CHILD = 0,
        BCDUMP_KGC_TAB = 1,
        BCDUMP_KGC_I64 = 2,
        BCDUMP_KGC_U64 = 3,
        BCDUMP_KGC_COMPLEX = 4,
        BCDUMP_KGC_STR = 5
    } BCDUMP_KGC_TYPE;
当取到tp的类型值后，判断它的具体类型，然后接下来存放的即是具体的数据，TableItem在010 Editor中的模板结构体表示如下:
    typedef struct {
        uleb128 tp;
        local int32 data_type = uleb128_value(tp);
        if (data_type >= BCDUMP_KTAB_STR) {
            local int32 len = data_type - BCDUMP_KTAB_STR;