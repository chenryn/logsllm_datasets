commonly agreed that proximity code verification methods in
which “they are sitting side by side” are easier. Many users found
“QR code to be more user friendly” than the rest of the methods.
Some of the participants found the numeric and image code compar-
ison in the remote setting to be “frustrating” and “time consuming”,
as they have to “switch between windows”.
6 DISCUSSION AND FUTURE WORK
6.1 Strengths and Limitations of Our Study
We believe that our study has several strengths. The analysis of the
pre-study questionnaire responses shows that the participants in
our user study are above the level of average app users in terms
of age, education and computer skills, which suggests that these
participants might have performed better than the average users in
detecting the attacks and might have found the code verification
methods more usable (in terms of SUS, satisfaction, comfort, and
adoptability rating) than average users. The participants in our
study are young and educated students who have declared that they
have excellent and good general computer and security background,
and have used the E2EE feature at least on one of the apps prior
to the study. This sampling of user population serves as a sound
counter-example to support our hypothesis that E2EE apps may not
provide the promised security and usability, specially in a remote
setting. In practice, these apps are used by a more diverse group
of users who may be less technology-aware, and therefore, may
perform worse than our study participants, thereby granting more
opportunity to the attacker to succeed. Similarly, the average real-
world users may find the code verification task much less usable
compared to our study participants.
Finally, in the controlled and monitored lab setting, users might
be subject to the Hawthorne effect compared to real world settings.
Thus, our work shows that the E2EE apps may provide a lower
level of security and usability in practice than what was observed
in our study.
Further, in our study, the participants were involved in one single
task of code verification as the primary task. At the beginning of
the study, we informed the participants about the security risks
of careless code verification and asked them to perform the task
diligently to avoid the attack as much as possible. However, in
real-life, the code verification is an optional task in all the studied
apps. Even those users who verify the codes, may skip through
the process (as reported in prior proximity-based device pairing
studied [29]), since their primary task is to establish the connection
(send a message, or start a call), while verifying the code is only
their secondary optional task. Therefore, in practice, the error rates
might be higher than the one reported in our studies. This means
that the E2EE apps would be even more vulnerable to attacks and
less usable in real-life than what our study has found.
To achieve collision resistance, the current apps aim to use longer
codes. However, longer codes are not easy for human users to
compare. Therefore, some apps truncate it to a shorter code. Since
we studied the real apps, one limitation of our study was that we
9
did not have control over the length of the code, although these
codes is what the users are being subject to in real-life. In our study,
only Viber code was 160 bits, while other codes were still the same
length, 256 bits.
6.2 Potential Mitigations & Future Directions
While our work exposes a fundamental vulnerability of the E2EE
apps in the remote setting that arises from the human behavior
that may be challenging to counter, we sketch two of the poten-
tial mitigation strategies and directions that may help curb, if not
eliminate, the said vulnerability.
(1) Multi-Windowing: The post-study open-ended questions re-
vealed that in the remote setting, many users had difficulty compar-
ing the codes received through an out of band messaging application
due to the single-tasking interface of the smartphones (i.e, only
one application is displayed on the screen at a given time). Some
of the smartphones allow the users to split the phone’s screen into
two sections and open one app in each portion of the screen. Us-
ing this feature, for code verification, the user can open the E2EE
app’s code verification screen in one portion of the screen and the
out of band messaging app in another portion of the screen. Since
multi-windowing is not available on all smartphones, we have not
evaluated this approach in our study. However, this option would
perhaps make the code verification easier and more robust to errors,
since the user can see both codes at once. This method should be
studied as part of future research.
(2) Automated Code Verification: Human errors in comparing the
codes lead to the success of the MITM attacks against E2EE apps.
Apart from informing the users about the code verification task
and its importance pertaining to the security of the system, one
natural defense against the attack is to reduce the involvement of
the human users by automating the code verification task itself.
Since the threat model assumes trusted devices, the code may be
verified automatically by the E2EE app by reading directly from
within the out-of-band app. However, due to privacy issues, this
automation may not be securely implemented by allowing the apps
to directly access each other’s data (e.g., reading the code from
the SMS by the E2EE app may create privacy concerns). Further
investigation is necessary to explore such a model.
Another possibility for semi-automation is through the use of
the clipboard. In fact, Signal has most recently (after our study
was accomplished) implemented a code verification method for the
remote setting, in which the user copies the received code to the
phone’s clipboard and asks the app to compare and verify the locally
generated code with the one stored in the clipboard. Therefore, the
users do not need to manually compare the code. Although this
method is a step towards automation, further studies are required
to evaluate its security and usability. For example, one problem
with this approach could be that the user copies all data currently
in the clipboard (which may contain sensitive information) and
makes it accessible to the E2EE app.
7 RELATED WORK
A great number of papers are available that compare different code
verification methods for the device pairing setting (e.g., [27, 28, 34]).
This line of work mainly targets the way the code is exchanged
over a location-limited out-of-band channel (e.g., audio vs video), or
the way it is compared (e.g., Copy-Confirm vs. Compare-Confirm).
Unlike our study, these studies assume the exchange of short codes
(e.g. 6-digit code) in a proximity setting.
Other work [24, 25] compared different forms of representation
of cryptographic keys, such as textual and graphical representations.
In our work, we also consider several practical examples of code
presentation, but more importantly, we study the proximity and
remote code exchange, comparison and verification methods in
the context of real-world smartphone apps geared for end-to-end
remote security. That is, unlike these prior studies, our primary goal
is not to compare across different methods, but rather to compare
between the remote and the proximity settings.
Another recent study [33] has investigated the security and
usability of the code comparison in end-to-end encrypted VoIP apps
in the presence of data and/or voice MITM attack. Their studies
consider short codes (mainly 2-4 words) that are communicated
over the voice channel. Their results show that users’ failure in
verifying the code results in accepting on average about 30% of
the attacked sessions. While their study covers remote audio-code
verification methods with short words, we consider several long
code presentation and code verification methods that are deployed
widely by existing popular messaging and VoIP applications. We
did not consider word representation of codes in our study as these
are not deployed by the most popular apps we focus on in our
work, but the analysis of security and usability of the short word
presentation can be found in [33].
A recent paper by Dechand et al. [21] conducted a usability study
to evaluate performance and usability of the different textual code
representations. In their online study, participants were presented
with several instances of code pairs and were asked to compare
the displayed code to evaluate the performance of the users with
respect to the different representations of the codes (e.g., numeric,
hexadecimal and sentence). They concluded that the use of large
words provided the fastest performance, and sentences achieve the
highest attack detection rate. This study does not compare the code
exchange method and code verification process for any specific
app. The aim of this study was to evaluate how easily different
representations can be compared from the users’ point of view in a
proximity setting, where two codes are shown side by side. Another
limitation is the online study itself that does not capture the exact
user interface of the apps. Our work, in contrast, focuses on the
remote setting and its comparison with the proximity setting. In
addition, our work shows the usability and security of actual phone
apps, not studied before.
8 CONCLUDING REMARKS
In this paper, we ran a user study to investigate the security and
usability of the human-centered code verification task deployed
by a representative class of E2EE apps. Our study discloses several
security and usability issues stemming from the human errors in
performing the code verification task in a remote setting. Specifi-
cally, we noticed that several code verification methods offer low
security and low usability in the remote setting (much lower than
the proximity setting).
10
Our study design with the security task being the only task at
hand and with well-informed and young participants who per-
formed the security task diligently and willingly, implies that in
real-life situations, the security offered by these apps could be much
lower given that these apps do not inform the users about the secu-
rity risks of erroneous code verification, the real-world users will
not be as tech-savvy as our study participants, the real-world users’
primary task will not be security-centric and the real-world users
may rush through the verification process by simply accepting all
(including attacked) sessions. Besides, in real-world, the attacker’s
success may increase as she can deceive any of the users involved in
a conversation, whereas we studied the attack only in one direction.
(????).
REFERENCES
[1] How The NSA Pulls Off Man-In-The-Middle Attacks: With Help From The Telcos.
(????). https://goo.gl/Kg4ysn.
[2] ChatSecure Encrypted Messenger. (????). https://chatsecure.org/.
[3] Diffie-Hellman key exchange. https://en.wikipedia.org/wiki/Diffie-Hellman_
key_exchange. (????).
[4] Double Ratchet Algorithm. https://github.com/trevp/double_ratchet/wiki. (????).
[5] Facebook Messenger. https://www.messenger.com/. (????).
[6] Google Allo. https://allo.google.com/. (????).
[7] Off-the-Record Messaging Protocol version 3.
https://otr.cypherpunks.ca/
Protocol-v3-4.0.0.html. (????).
[8] Open Whisper Systems. https://whispersystems.org/. (????).
[9] Secret chats, end-to-end encryption . https://core.telegram.org/api/end-to-end.
[10] Telegram Messenger. https://telegram.org/. (????).
[11] Threema - Seriously secure messaging. https://threema.ch. (????).
[12] Viber. https://www.viber.com. (????).
[13] Viber Encryption Overview.
(????).
https://www.viber.com/en/
security-overview.
[14] WhatsApp. https://www.whatsapp.com/. (????).
[15] Wickr Secure Messenger. (????). https://www.wickr.com/.
[16] ZORG - An Implementation of the ZRTP Protocol. (????). http://www.zrtp.org/.
[17] Aaron Bangor, Philip Kortum, and James Miller. 2009. Determining what indi-
vidual SUS scores mean: Adding an adjective rating scale. Journal of usability
studies 4, 3 (2009).
[18] Matt Blaze, Joan Feigenbaum, and Jack Lacy. 1996. Decentralized trust manage-
ment. In Security and Privacy, 1996. Proceedings., 1996 IEEE Symposium on. IEEE,
164–173.
[19] Nikita Borisov, Ian Goldberg, and Eric Brewer. 2004. Off-the-record communica-
tion, or, why not to use PGP. In Proceedings of the 2004 ACM workshop on Privacy
in the electronic society. ACM, 77–84.
John Brooke. 1996. SUS-A quick and dirty usability scale. Usability evaluation in
industry (1996).
[21] Sergej Dechand, Dominik Schürmann, TU IBR, Karoline Busse, Yasemin Acar,
Sascha Fahl, and Matthew Smith. An Empirical Study of Textual Key-Fingerprint
Representations. (????).
[22] Rachna Dhamija. 2000. Hash visualization in user authentication. In CHI’00
Extended Abstracts on Human Factors in Computing Systems. ACM, 279–280.
[23] Rajiv Garg and Rahul Telang. 2012. Inferring app demand from publicly available
[20]
data. MIS Quarterly, Forthcoming (2012).
[25]
[24] Hsu-Chun Hsiao, Yue-Hsun Lin, Ahren Studer, Cassandra Studer, King-Hang
Wang, Hiroaki Kikuchi, Adrian Perrig, Hung-Min Sun, and Bo-Yin Yang. 2009. A
study of user-friendly hash comparison schemes. In Computer Security Applica-
tions Conference, 2009. ACSAC’09. Annual. IEEE, 105–114.
Joseph Bonneau Lorrie Faith Cranor Jeremy Thomas Blase Ur Joshua Tan,
Lujo Bauer. To appear. Can Unicorns Help Users Compare Crypto Key Fin-
gerprints? ACM CHI 2017 (To appear).
[26] Patrick Juola. 1996. Whole-word phonetic distances and the pgpfone alphabet.
In Spoken Language, 1996. ICSLP 96. Proceedings., Fourth International Conference
on, Vol. 1. IEEE, 98–101.
[27] Ronald Kainda, Ivan Flechais, and AW Roscoe. 2009. Usability and security of
out-of-band channels in secure device pairing protocols. In Proceedings of the
5th Symposium on Usable Privacy and Security. ACM, 11.
[28] Arun Kumar, Nitesh Saxena, Gene Tsudik, and Ersin Uzun. 2009. A comparative
study of secure device pairing methods. Pervasive and Mobile Computing 5, 6
(2009), 734–749.
[29] Cynthia Kuo, Jesse Walker, and Adrian Perrig. 2007. Low-cost manufacturing,
usability, and security: an analysis of bluetooth simple pairing and Wi-Fi pro-
tected setup. In International Conference on Financial Cryptography and Data
Security. Springer, 325–340.
[30] Vinnie Moscaritolo, Gary Belvin, and Phil Zimmermann. 2012. Silent circle
instant messaging protocol specification. Online, White Paper (December 2012)
(2012).
[31] Adrian Perrig and Dawn Song. 1999. Hash visualization: A new technique
to improve real-world security. In International Workshop on Cryptographic
Techniques and E-Commerce. 131–138.
[32] Maliheh Shirvanian and Nitesh Saxena. 2014. Wiretapping via Mimicry: Short
Voice Imitation Man-in-the-Middle Attacks on Crypto Phones. In ACM CCS
2014.
[33] Maliheh Shirvanian and Nitesh Saxena. 2015. On the Security and Usability of
Crypto Phones. In Proceedings of the 31st Annual Computer Security Applications
Conference. ACM, 21–30.
[34] Ersin Uzun, Kristiina Karvonen, and Nadarajah Asokan. 2007. Usability analysis
of secure pairing methods. In Financial Cryptography & Data Security.
[35] Serge Vaudenay. 2005. Secure Communications over Insecure Channels Based
on Short Authenticated Strings. In CRYPTO.
[36] Ruishan Zhang, Xinyuan Wang, Ryan Farley, Xiaohui Yang, and Xuxian Jiang.
2009. On The Feasibility of Launching the Man-in-the-Middle Attacks on VoIP
from Remote Attackers. In ASIACCS.
A APPENDIX
A.1 SUS Questionnaire
(1) I think that I would like to use this system frequently.
(2) I found the system unnecessarily complex.
(3) I thought the system was easy to use.
(4) I think that I would need the support of a technical person
to be able to use this system.
(5) I found the various functions in this system were well
integrated.
(6) I thought there was too much inconsistency in this system.
(7) I would imagine that most people would learn to use this
system very quickly.
(8) I found the system very cumbersome to use.
(9) I felt very confident using the system.
(10) I needed to learn a lot of things before I could get going
with this system.
A.2 Additional Tables and Figures
A.3 Messaging Apps
Table 4 shows 10 highly popular E2EE apps. The total number of
the installations and the rating of the apps are derived from the Play
Store and was last updated on this submission on November 06,
2016. iTunes store does not disclose the number of app installations.
Although an estimation can be inferred [23], we believe the current
data from Google Play Store serves well to provide information
about the popularity of the apps.
Some recently introduced apps such as Google Duo and Google
Allo have not yet deployed any code verification method. For other
applications, the code presentations and code verification methods
in proximity and remote setting is given in the table. Some of the
apps such as Telegram and Signal do not offer a feature to directly
transfer/exchange the code from the app. Such applications rely
on the users to compare the codes through an authenticated out
of band channel of their choice. On the other hand, apps such as
Viber and Silent phone do not have an explicit way to compare the
code locally.
Considering the popularity of the application and to cover a vari-
ety of code presentations and code verification methods, we picked
the first four popular apps that offer code verification, namely,
11
Table 2: The code verification tasks in the user study.
Table 3: Demographic information of the participants
High school graduate or diploma
Some college credit, no degree
Bachelor’s degree