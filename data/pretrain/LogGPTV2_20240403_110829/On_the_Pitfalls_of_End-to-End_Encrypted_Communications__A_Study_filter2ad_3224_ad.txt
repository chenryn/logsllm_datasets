### 6. Discussion and Future Work

#### 6.1 Strengths and Limitations of Our Study

Our study has several strengths. The analysis of the pre-study questionnaire responses indicates that our participants are above the average app user in terms of age, education, and computer skills. This suggests that they may have performed better in detecting attacks and found the code verification methods more usable (in terms of System Usability Scale (SUS), satisfaction, comfort, and adoptability) than the general population. The participants were young, educated students with excellent or good general computer and security backgrounds, and had used end-to-end encryption (E2EE) features on at least one app prior to the study. This sampling serves as a strong counter-example to support our hypothesis that E2EE apps may not provide the promised security and usability, especially in remote settings.

In practice, these apps are used by a more diverse group of users who may be less technology-aware, and therefore, may perform worse than our study participants, thus providing more opportunities for attackers to succeed. Similarly, the average real-world users may find the code verification task much less usable compared to our study participants.

Additionally, in a controlled and monitored lab setting, users might experience the Hawthorne effect, where their behavior is influenced by the awareness of being observed. Thus, our work suggests that E2EE apps may provide a lower level of security and usability in real-world settings than what was observed in our study.

Furthermore, in our study, participants were focused solely on the code verification task. At the beginning of the study, we informed them about the security risks of careless code verification and asked them to perform the task diligently to avoid attacks. However, in real life, code verification is an optional task in all the studied apps. Even those users who verify codes may skip through the process, as their primary task is to establish a connection (send a message or start a call), while verifying the code is a secondary, optional task. Therefore, in practice, error rates might be higher than those reported in our studies, making E2EE apps more vulnerable to attacks and less usable in real life than what our study found.

To achieve collision resistance, current apps aim to use longer codes. However, longer codes are not easy for human users to compare. Some apps truncate these codes to make them shorter. Since we studied real apps, one limitation of our study was that we did not have control over the length of the codes, although these are the codes users encounter in real life. In our study, only Viber's code was 160 bits, while other codes were 256 bits.

#### 6.2 Potential Mitigations & Future Directions

While our work highlights a fundamental vulnerability of E2EE apps in remote settings due to human behavior, we propose two potential mitigation strategies and future research directions to address this issue.

1. **Multi-Windowing:**
   - The post-study open-ended questions revealed that many users in remote settings found it difficult to compare codes received through out-of-band messaging applications due to the single-tasking interface of smartphones. Some smartphones allow users to split the screen into two sections, opening one app in each portion. For code verification, users can open the E2EE app's code verification screen in one portion and the out-of-band messaging app in another. Although multi-windowing is not available on all smartphones, this approach could make code verification easier and more robust, as users can see both codes simultaneously. This method should be studied in future research.

2. **Automated Code Verification:**
   - Human errors in comparing codes lead to the success of man-in-the-middle (MITM) attacks against E2EE apps. Informing users about the importance of code verification is one defense, but reducing human involvement by automating the task is a more natural solution. Since the threat model assumes trusted devices, the code could be verified automatically by the E2EE app reading directly from the out-of-band app. However, privacy concerns may arise if apps are allowed to access each other's data (e.g., reading the code from an SMS). Further investigation is necessary to explore such a model.
   - Another possibility is semi-automation through the use of the clipboard. Signal recently implemented a code verification method for remote settings, where users copy the received code to the clipboard and ask the app to compare and verify it with the locally generated code. This reduces the need for manual comparison. While this is a step towards automation, further studies are required to evaluate its security and usability. One concern is that the user might copy sensitive information to the clipboard, making it accessible to the E2EE app.

### 7. Related Work

Numerous papers compare different code verification methods for device pairing, focusing on the exchange of short codes in proximity settings (e.g., [27, 28, 34]). These studies primarily target the way the code is exchanged over a location-limited out-of-band channel (e.g., audio vs. video) or how it is compared (e.g., Copy-Confirm vs. Compare-Confirm).

Other work [24, 25] compares different forms of cryptographic key representation, such as textual and graphical. Our study also considers practical examples of code presentation but focuses on proximity and remote code exchange, comparison, and verification methods in real-world smartphone apps designed for end-to-end remote security. Unlike previous studies, our primary goal is to compare between remote and proximity settings rather than across different methods.

A recent study [33] investigated the security and usability of code comparison in end-to-end encrypted VoIP apps under data and/or voice MITM attacks. Their results show that users' failure to verify codes results in accepting about 30% of attacked sessions. While their study covers remote audio-code verification with short words, we consider long code presentation and verification methods widely deployed by popular messaging and VoIP applications.

A recent paper by Dechand et al. [21] conducted a usability study to evaluate the performance and usability of different textual code representations. Participants were presented with code pairs and asked to compare them. They concluded that large words provided the fastest performance, and sentences achieved the highest attack detection rate. However, this study did not compare code exchange methods and verification processes for specific apps, and the online nature of the study does not capture the exact user interface of the apps. Our work, in contrast, focuses on the remote setting and its comparison with the proximity setting, showing the usability and security of actual phone apps.

### 8. Concluding Remarks

In this paper, we conducted a user study to investigate the security and usability of the human-centered code verification task in a representative class of E2EE apps. Our study reveals several security and usability issues stemming from human errors in performing code verification in remote settings. Specifically, we found that several code verification methods offer low security and low usability in remote settings, much lower than in proximity settings.

Our study design, with well-informed and young participants who performed the security task diligently, implies that in real-life situations, the security offered by these apps could be much lower. Real-world users are less likely to be as tech-savvy, may not be informed about the security risks, and may rush through the verification process, increasing the attacker's success rate. Additionally, in real-world scenarios, the attacker can deceive any user involved in a conversation, whereas we studied the attack in one direction.

### References

[1] How The NSA Pulls Off Man-In-The-Middle Attacks: With Help From The Telcos. (????). https://goo.gl/Kg4ysn.
[2] ChatSecure Encrypted Messenger. (????). https://chatsecure.org/.
[3] Diffie-Hellman key exchange. https://en.wikipedia.org/wiki/Diffie-Hellman_key_exchange. (????).
[4] Double Ratchet Algorithm. https://github.com/trevp/double_ratchet/wiki. (????).
[5] Facebook Messenger. https://www.messenger.com/. (????).
[6] Google Allo. https://allo.google.com/. (????).
[7] Off-the-Record Messaging Protocol version 3. https://otr.cypherpunks.ca/Protocol-v3-4.0.0.html. (????).
[8] Open Whisper Systems. https://whispersystems.org/. (????).
[9] Secret chats, end-to-end encryption. https://core.telegram.org/api/end-to-end.
[10] Telegram Messenger. https://telegram.org/. (????).
[11] Threema - Seriously secure messaging. https://threema.ch. (????).
[12] Viber. https://www.viber.com. (????).
[13] Viber Encryption Overview. https://www.viber.com/en/security-overview.
[14] WhatsApp. https://www.whatsapp.com/. (????).
[15] Wickr Secure Messenger. https://www.wickr.com/.
[16] ZORG - An Implementation of the ZRTP Protocol. http://www.zrtp.org/.
[17] Aaron Bangor, Philip Kortum, and James Miller. 2009. Determining what individual SUS scores mean: Adding an adjective rating scale. Journal of usability studies 4, 3 (2009).
[18] Matt Blaze, Joan Feigenbaum, and Jack Lacy. 1996. Decentralized trust management. In Security and Privacy, 1996. Proceedings., 1996 IEEE Symposium on. IEEE, 164–173.
[19] Nikita Borisov, Ian Goldberg, and Eric Brewer. 2004. Off-the-record communication, or, why not to use PGP. In Proceedings of the 2004 ACM workshop on Privacy in the electronic society. ACM, 77–84.
[20] John Brooke. 1996. SUS-A quick and dirty usability scale. Usability evaluation in industry (1996).
[21] Sergej Dechand, Dominik Schürmann, TU IBR, Karoline Busse, Yasemin Acar, Sascha Fahl, and Matthew Smith. An Empirical Study of Textual Key-Fingerprint Representations. (????).
[22] Rachna Dhamija. 2000. Hash visualization in user authentication. In CHI’00 Extended Abstracts on Human Factors in Computing Systems. ACM, 279–280.
[23] Rajiv Garg and Rahul Telang. 2012. Inferring app demand from publicly available data. MIS Quarterly, Forthcoming (2012).
[24] Hsu-Chun Hsiao, Yue-Hsun Lin, Ahren Studer, Cassandra Studer, King-Hang Wang, Hiroaki Kikuchi, Adrian Perrig, Hung-Min Sun, and Bo-Yin Yang. 2009. A study of user-friendly hash comparison schemes. In Computer Security Applications Conference, 2009. ACSAC’09. Annual. IEEE, 105–114.
[25] Joseph Bonneau Lorrie Faith Cranor Jeremy Thomas Blase Ur Joshua Tan, Lujo Bauer. To appear. Can Unicorns Help Users Compare Crypto Key Fingerprints? ACM CHI 2017 (To appear).
[26] Patrick Juola. 1996. Whole-word phonetic distances and the pgpfone alphabet. In Spoken Language, 1996. ICSLP 96. Proceedings., Fourth International Conference on, Vol. 1. IEEE, 98–101.
[27] Ronald Kainda, Ivan Flechais, and AW Roscoe. 2009. Usability and security of out-of-band channels in secure device pairing protocols. In Proceedings of the 5th Symposium on Usable Privacy and Security. ACM, 11.
[28] Arun Kumar, Nitesh Saxena, Gene Tsudik, and Ersin Uzun. 2009. A comparative study of secure device pairing methods. Pervasive and Mobile Computing 5, 6 (2009), 734–749.
[29] Cynthia Kuo, Jesse Walker, and Adrian Perrig. 2007. Low-cost manufacturing, usability, and security: an analysis of Bluetooth simple pairing and Wi-Fi protected setup. In International Conference on Financial Cryptography and Data Security. Springer, 325–340.
[30] Vinnie Moscaritolo, Gary Belvin, and Phil Zimmermann. 2012. Silent circle instant messaging protocol specification. Online, White Paper (December 2012) (2012).
[31] Adrian Perrig and Dawn Song. 1999. Hash visualization: A new technique to improve real-world security. In International Workshop on Cryptographic Techniques and E-Commerce. 131–138.
[32] Maliheh Shirvanian and Nitesh Saxena. 2014. Wiretapping via Mimicry: Short Voice Imitation Man-in-the-Middle Attacks on Crypto Phones. In ACM CCS 2014.
[33] Maliheh Shirvanian and Nitesh Saxena. 2015. On the Security and Usability of Crypto Phones. In Proceedings of the 31st Annual Computer Security Applications Conference. ACM, 21–30.
[34] Ersin Uzun, Kristiina Karvonen, and Nadarajah Asokan. 2007. Usability analysis of secure pairing methods. In Financial Cryptography & Data Security.
[35] Serge Vaudenay. 2005. Secure Communications over Insecure Channels Based on Short Authenticated Strings. In CRYPTO.
[36] Ruishan Zhang, Xinyuan Wang, Ryan Farley, Xiaohui Yang, and Xuxian Jiang. 2009. On The Feasibility of Launching the Man-in-the-Middle Attacks on VoIP from Remote Attackers. In ASIACCS.

### Appendix

#### A.1 SUS Questionnaire

1. I think that I would like to use this system frequently.
2. I found the system unnecessarily complex.
3. I thought the system was easy to use.
4. I think that I would need the support of a technical person to be able to use this system.
5. I found the various functions in this system were well integrated.
6. I thought there was too much inconsistency in this system.
7. I would imagine that most people would learn to use this system very quickly.
8. I found the system very cumbersome to use.
9. I felt very confident using the system.
10. I needed to learn a lot of things before I could get going with this system.

#### A.2 Additional Tables and Figures

#### A.3 Messaging Apps

Table 4 shows 10 highly popular E2EE apps. The total number of installations and the rating of the apps are derived from the Play Store and were last updated on November 06, 2016. The iTunes store does not disclose the number of app installations, although an estimation can be inferred [23]. We believe the current data from the Google Play Store provides sufficient information about the popularity of the apps.

Some recently introduced apps, such as Google Duo and Google Allo, have not yet deployed any code verification method. For other applications, the code presentations and code verification methods in proximity and remote settings are given in the table. Some apps, such as Telegram and Signal, do not offer a feature to directly transfer/exchange the code from the app, relying on users to compare the codes through an authenticated out-of-band channel of their choice. Other apps, such as Viber and Silent Phone, do not have an explicit way to compare the code locally.

Considering the popularity of the application and to cover a variety of code presentations and code verification methods, we selected the first four popular apps that offer code verification, namely:

| App Name | Total Installations | Rating |
|----------|---------------------|--------|
| WhatsApp | 5,000,000,000+      | 4.1    |
| Telegram | 500,000,000+        | 4.3    |
| Signal   | 10,000,000+         | 4.2    |
| Viber    | 500,000,000+        | 4.1    |

These apps were chosen to provide a comprehensive analysis of the code verification methods in both proximity and remote settings.