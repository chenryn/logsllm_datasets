后⾯面的阶段失败，如验收或性能测
试，不不是停⽌止新⼯工作，⽽而是让开发或
测试⽴立即修复问题
在更更早阶段增加测试案
例例，更更早发现问题
增加⾃自动化测试失败的可⻅见性
熔岩等，放歌曲
警报器器，交通灯
需要触发安灯拉升
避免做成Water-Scrum-Fall
11. 启动和实践持续集成
增加分⽀支数量量或分⽀支中变更更的数量量，
会让集成变更更难度⼏几何级上升
通常合并会在项⽬目末尾发⽣生，导致⼤大量量返
⼯工和下降螺旋，持续集成解决这个问题
Case：HP’s LaserJet Firmware
构建运⾏行行在扫描仪，打印机和其他设备的固件
四百⼈人开发团队，分布在美国巴⻄西和印度
很缓慢，很多年年不不能按业务需求交付新功能，
6~12个⽉月才能发布新功能
每年年发布两次，5%的时间⽤用于开发新功能，其
余时间浪费在与技术债相关的⾮非⽣生产性的⼯工作，
如管理理多个分⽀支或⼿手⼯工测试等
20%详细计划。低吞吐量量和⾼高等
待时间被错误归结在有问题的预
估，然后被要求⼯工作评估的更更细
25%移植代码，所有维护在分
开的代码分⽀支上
10%在开发⼈人员之间集成代码
15%完成⼿手⼯工测试
解决⽅方案
持续集成和主⼲干开发
⼤大量量投资⾃自动化测试
创建硬件模拟器器，测试可以在虚拟平台运⾏行行
在开发⼯工作站重现测试失败
新的架构⽀支持通⽤用的构建和发布运⾏行行在所有打印机上
原来：每个产品线需要新的分⽀支，每个型号
有不不同的固件，打印机能⼒力力在编译时定义
新架构：所有开发在同⼀一个代码分⽀支上，
单⼀一主⼲干上的固件发布⽀支持所有型号，打
印机能⼒力力在运⾏行行时通过XML配置⽂文件定义
效果
⼀一份基准代码⽀支持所有24个产品线，在主⼲干上开发
主⼲干开发需要构建有效的⾃自动化测试
持续集成是发现问题最快的⽅方式
在主⼲干上运⾏行行所有测试集
合（单元、验收、集成）
破坏流⽔水线，停⽌止⼯工作，
确保快速回滚到绿灯状态
花费很多精⼒力力构造打印机模拟器器，
⽀支持固件可以⾃自动化测试
⾃自动化测试提供快速的反馈
单元测试在⼯工程师⼯工作站上运⾏行行数分钟
三级⾃自动化测试，分别在提交时、2⼩小
时、4⼩小时触发
全回归测试每24⼩小时运⾏行行⼀一次
每天可以构建10到15次
每天有超过100次提交
⼯工程师每天修改或新增7.5~10W代码
回归测试时间从⼿手⼯工6周缩短到1天
业务收益
⽤用于创新和编写新功能的开
发时间从5%提升到40%
整体开发成本降低40%
开发⽀支持的项⽬目数增加到140%
单项⽬目开发成本降低到78%
⼩小批量量开发
为个⼈人优化⽣生产率
⼯工作在⾃自⼰己的私有分⽀支
⼯工作独⽴立⽆无打扰，但合并成为噩梦
为团队优化⽣生产率
⽆无分⽀支，只有⼀一条⻓长主线
每次提交可能影响整个项⽬目停⽌止
⼤大批量量合并困难，更更难有动⼒力力去改进和重
构代码，因为这会导致所有其他⼈人的返⼯工
主⼲干开发
每个开发每天⾄至少提交⼀一次代码到主⼲干
减⼩小了了批量量，批量量越⼩小越接近单件流
快速反馈，快速修复
Gated Commits
先确认提交的变更更能够成功Merge，构
建和通过测试，然后才实际合并到主⼲干
否则开发⼈人员会被提醒
12. ⾃自动化和低⻛风险发布
Case：Facebook，2012
从下午1点开始，发布⼯工程师选择当天要发布到
facebook.com的变更更，⼈人为确保每个⼈人的变更更经过了了测试
在⽣生产推送之前，所有存在变更更的⼯工
程师必须在场并在IRC聊天频道签⼊入
不不在现场的⼯工程师，变更更
将会⾃自动从部署包中移除
如果⼀一切正常并且⾦金金丝雀测试通过，
通过⼀一键式在20分钟让数千服务器器
更更新成最新的代码
facebook前端代码原来是PHP，
2010年年为了了提升性能改成C++，编
译后1.5G，15分钟内完成拷⻉贝
在过去五年年，⽹网站从周到天到每天三次
部署，APP从六周到四周到两周部署
使⽤用持续集成，让代码部署成为低⻛风
险流程，每个⼈人⽇日常⼯工作的⼀一部分
⾃自动化部署流程
简化和⾃自动化尽量量多的⼿手⼯工步骤
打包代码，适合部署
创建预配置好虚机镜像或容器器
中间件的⾃自动化部署和配置
拷⻉贝包或⽂文件到⽣生产服务器器
重启服务器器，应⽤用或服务
从模板⽣生成配置
⾃自动化冒烟测试
运⾏行行测试程序
脚本化和⾃自动化数据库迁移
⽀支持部署到⽣生产的流⽔水线⼯工具：the Jenkins Build Pipeline plugin, 
ThoughtWorks Go.cd and Snap CI, Microsoft Visual Studio Team 
Services, and Pivotal Concourse
部署流⽔水线的要求
相同⽅方式部署到每个环境
部署后冒烟测试
维护环境⼀一致性，开发测试⽣生产环境保持同步
Case：Daily Deployments at CSG International (2013)
⾃自动化、⾃自服务部署
通常运维执⾏行行代码部署，因为职责分离，
可以降低⽣生产中断和欺骗⻛风险
DevOps：变⾰革为可以减轻⻛风险的其他控制
机制，通过⾃自动化测试、部署、同⾏行行评审
2013年年报告，调研了了4000技术专
家，发现开发部署代码或运维部署代
码，对变更更成功率⽆无显著区别
跨越开发和运维共享⽬目标
如果透明和有⼈人负责任
谁来做部署并⽆无关系
代码晋级流程
构建
从版本控制库⽣生成包，部署到任意环境
测试
任何⼈人可以运⾏行行⾃自动化测试集
部署
任何⼈人可以部署包到有权限的任意环
境，部署脚本也在版本控制库中
集成代码部署到部署流⽔水线
持续集成过程⽣生成包，适合部署到⽣生产环境
展示⽣生产环境就绪状态概览
提供⼀一键式，⾃自服务⽅方式部署到⽣生产
⾃自动化记录，为了了审计和合规性⽬目的，
执⾏行行的命令、时间、谁授权、结果
运⾏行行⾃自动化冒烟测试确保配置正确
提供快速反馈给开发
解耦部署与发布
部署
安装特定的版本到环境
可以不不与发布⼀一个功能给客户关联
发布
让那个功能对所有或部分⽤用户可⻅见
代码和环境可以设计为：功能发布
⽆无需变更更应⽤用代码
开发和运维负责快速和频繁的成功部
署，产品经理理负责发布的业务产出
两种发布模式
基于环境的发布模式
有两套或更更多的环境
只有⼀一套接收客户流量量（配置或负载均衡）
新代码部署到⾮非⽣生产环境，然后发布
时切流量量到这个环境
对应⽤用⽆无要求（应⽤用代码⽆无需修改）
蓝绿部署，⾦金金丝雀发布，集群免疫系统
基于应⽤用的发布模式
修改应⽤用，通过⼩小的配置变更更，选择
性发布和暴暴露露特定的功能
通过功能开关，逐步暴暴露露新功能给开发团
队、所有内部员⼯工、1%客户、所有客户
Dark launching：在发布前，在⽣生产
环境启动，利利⽤用⽣生产环境流量量测试，
在真实启动前暴暴露露和解决问题
基于环境的发布模式
可以在正常业务时段发布
降低⽣生产发布⻛风险和部署前置时间
蓝绿部署
处理理数据库变更更
两个版本应⽤用在⽣生产环境依赖同⼀一数
据库时会产⽣生问题
部署需要数据库Schema变更更或新
增、修改、删除表或字段，数据库⽆无
法⽀支撑不不同版本应⽤用
两种解决办法
创建两个数据库，蓝绿各⼀一个
发布时将蓝数据库只读
执⾏行行⼀一个数据库的备份
在绿数据库上还原
最终切流量量到绿环境
问题是回滚到蓝环境时可能丢失交易易
要⼿手⼯工从绿环境迁移新数据
解耦数据库变更更和应⽤用变更更
将数据库变更更的发布与应⽤用变更更的发布解耦
⾸首先只对数据库做添加性变更更
不不会改变存在的数据库对象
在应⽤用端不不假设哪个数据库版本会到⽣生产环境
数据库虚拟化、版本化、 标签⼯工具：DBDeploy
Case：IMVU 2009，每天进⾏行行50次
部署，有些包含数据库变更更
数据库的扩张（新增对
象）/收缩（移除⽼老老对象）
⾦金金丝雀与集群免疫系统发布
来⾃自矿⼯工携带⾦金金丝雀，提供对⼀一氧化
碳级别早期的探测
在发布中监控每⼀一个环境，当错误发