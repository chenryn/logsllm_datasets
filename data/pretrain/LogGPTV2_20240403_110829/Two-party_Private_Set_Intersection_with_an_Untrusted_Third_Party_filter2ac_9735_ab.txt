nary shares of x respectively, and ⟨x⟩A, ⟨x⟩B 2-out-of-2 additive
sharings. We sometimes write [x]A = (x1, x2, x3), ignoring the
replication of shares.
2.3 Assumed functionalities
Our protocols are described in a hybrid world, where we assume
access to several simple, trusted functionalities. All of these have
been implemented securely in our experiments. For completeness,
we include detailed descriptions of these functionalities in Appendix
A. The secure protocols for these functionalities can be found in
the work of Chida et al. [5]. We summarize the functionalities here:
• Frand gives a replicated arithmetic sharing of a random ele-
ment r ∈ Zp.
• Fcoin gives all parties the same random element r ∈ Zp.
• Finput secret-shares data owned by one of the parties as
replicated arithmetic shares.
• Fmult takes replicated arithmetic shares of two input values,
and outputs shares of their product, up to an addictive attack.
That is, the functionality allows the adversary to specify a
constant that will be added to the product.
• FCheckZero gives true to the parties if they hold a replicated
arithmetic share of zero, otherwise, it gives false.
2.4 Authentication on additive shares
We define MACα(x) ≡ αx as the MAC of x, where α, x ∈ Zp, x is
the data, and α is the MAC key. Technically, this is not a secure
authentication code, since anybody can recover α after seeing a
single authentication. As is standard in MPC work, however, the
MAC key and the authentications will always be secret-shared. The
key is sampled by calling Frand. The shared MAC is computed by
calling Fmult on the shared key and data, ([α]A,[x]A). Note that
we allow the MAC to be computed up to an additive attack. The
adversary can add an arbitrary additive term d to the MAC. Thus,
the parties will hold shares of αx + d in stead of αx. To simplify the
presentation, we use the same notation for the MAC with additive
attack: MACα(x) ≡ αx + d.
2.5 Share Conversion
[x]A → [x]B: There are scenarios that the parties are holding repli-
cated arithmetic secret shares and they want to compare the shares.
Session 10C: Secret SharingCCS ’19, November 11–15, 2019, London, United Kingdom2405k−1
i =0 2i(x1[i] + x2[i] + x3[i]) =k−1
It is more efficient for them to convert the shares to replicated binary
ones and perform the comparison with a Boolean circuit. We use an
approach similar to that of Mohassel and Rindal in their ABY3 sys-
tem to convert [x]A → [x]B [29], though we extend their technique
so that it can be used with arbitrary fields; they only required share
conversion for rings. Let [x]A = (x1, x2, x3), P1, P2, and P3 hold
(x1, x2),(x2, x3),(x3, x1) respectively. From [x]A, parties can set
[x1]B = (x1, 0, 0), [x2]B = (0, x2, 0), and [x3]B = (0, 0, x3) without
interaction. Let k be the bit length of xi. The three parties first call k
full adders to compute(c[i], s[i]) ← FA(x1[i], x2[i], x3[i]). After this
step, they hold [c]B and [s]B and execute a ripple carry adder circuit
to compute [x]B ← 2[c]B + [s]B. This is correct as x1 + x2 + x3 =
i =0 2i(2c[i] + s[i]) = 2c + s. The
ripple carry adder can be replaced by a parallel prefixed adder to re-
duce the round complexity at the cost of O(k log k) communication
(as done in ABY3). The procedure above may leave the participants
with a few overflow bits. Assume we are working on a field Zp, the
adders will output x = (x1 + x2 + x3), which can take values in the
range [0, 3p − 3]. However, what we need is (x mod p) ∈ [0, p − 1].
The problem can be solved by repeatedly deducting p from x until
the value of x is in the correct range. This can be done by execut-
ing the following Boolean circuit twice: x ← x − (x > p) · p. The
subtraction is done by executing a ripple borrow subtractor circuit.
The above is all computed in a single circuit, and can be executed
using any general-purpose 3-party computation using replicated
binary sharing.
[x]B → [x]A: we also use the protocol proposed in [29] for this
conversion. In summary, from [x]B = (x1, x2, x3), the parties obtain
the shares [x1]A = (x1, 0, 0),[x2]A = (0, x2, 0),[x3]A = (0, 0, x3)
non-interactively. For binary values x and y, the XOR operation
can be replaced by arithmetic operations as x ⊕ y = x + y − 2xy.
To compute [x1]A ⊕ [x2]A ⊕ [x3]A, we just need to execute the
above operations twice. The share conversion is secure against 1
malicious party.
[x]A 1,2−→ ⟨x⟩A: Let [x]A = (x1, x2, x3) be a replicated sharing of
x, held by P1, P2 and P3. P1 and P2 want to convert [x]A to ⟨x⟩A.
They can locally set their share to x1 + x2 and x3 respectively. Note
that this is only secure in the semi-honest setting: if one of them is
malicious, he can modify his share arbitrarily, and there is no longer
any replication that can be used to catch him later. The conversion
between [x]A and ⟨x⟩A is needed to achieve the efficient three-party
oblivious shuffling protocol in Section 4.3.
⟨x⟩A 1→ [x]A: P2 and P3 hold a two-out-of-two sharing of x,
and wish to create a replicated secret sharing that includes P1. We
describe a protocol that requires sending only 2 elements5, and,
more importantly, prevents P1 from performing an additive attack.
P1 and P2 agree on a random value r1, and P1 and P3 agree on
random value r2. P1 sets his own shares to (r1, r2); this prevents an
additive attack, since the other parties already know these values.
P2 computes x1 − r1, P3 computes x2 − r2, and they swap values.
P2 sets his shares to (r2,(x2 − r2) + (x1 − r1)), and P3 sets his to
((x1 − r1) − (x2 − r2), r1).
5this doesn’t really impact runtime, since we have no way of distributing the cost: when
executing this on n shared elements, we will require 2 parties to each send n elements,
rather than having each of the 3 parties send 2n/3. Nevertheless, the improvement
has an impact on the financial cost of running the protocol.
F
- Share conversion up to an additive attack
⟨X⟩A i−→[X]A
Inputs: Parties Pi +1 and Pi +2 hold ⟨X ⟩A, X = {x1, ..., xn }.
Pi does not have input.
Functionality:
• Waits for the shares from Pi +1 and Pi +2.
• Waits for the additive terms D = {d1, ..., dn } from the
• Reconstructs X and distributes the replicated shares [X +
malicious party
D] to the three parties.
Figure 1: F⟨X ⟩A
i−→[X]A
Ideal Functionality
- Share conversion up to an additive attack
Π⟨X⟩A i−→[X]A
Inputs: Parties Pi +1 and Pi +2 hold ⟨X ⟩A, X = {x1, ..., xn }.
Pi does not have input.
Protocol:
(1) Pi and Pi +1 agree on a random key k1.
(2) Pi and Pi +2 agree on a random key k2.
(3) Pi set his shares [xi] = (fk2(i), fk1(i)).
(4) Pi +1 computes ui = ⟨xi ⟩i +1 − fk1(i).
(5) Pi +2 computes vi = ⟨xi ⟩i +2 − fk2(i).
(6) Pi +1 and Pi +2 swap ui and vi , setting wi = ui + vi .
(7) Pi +1 sets his shares [xi] = (fk1(i), wi).
(8) Pi +2 sets his shares [xi] = (wi, fk2(i)).
Outputs: The parties output [X]A.
Figure 2: Π⟨X ⟩A
i−→[X]A
Share conversion protocol
3 SET INTERSECTION CARDINALITY
THROUGH POLYNOMIAL INTERPOLATION
FPSI-CA
Inputs: P1 provides X = {x1, ..., xn }, P2 provides Y =
{y1, ..., yn }. P3 provides no input.
Functionality:
from P1 and P2 respectively.
• Waits for input X = (x1, ..., xn) and Y = (y1, ..., yn)
• If there are duplicated items in X or Y, sends abort to all
• Else, gives output |X ∩ Y | to P1, P2, and P3.
parties.
Figure 3: PSI-CA Ideal Functionality
In this section we present a protocol for intersection cardinality,
through polynomial interpolation. In Section 4.1 we use circuit-
based techniques from generic secure computation to give two more
constructions for cardinality. In all of our cardinality protocols, P1
and P2 begin by agreeing on an encryption key for a deterministic
encryption scheme. They each encrypt their data and send it to P3,
who can find the intersection by simply comparing the ciphertexts
sent by each party. (For the sake of intuition, it helps to ignore this
step, and just think of P3 as operating on cleartext data.) This is
a large part of what allows us to construct efficient protocols: in
the two party setting (or in a setting where all three parties have
input), we cannot entrust the intersection computation to any one
party. The main challenge that remains in our setting is to ensure
that P3 is honestly reporting the size of the intersection.
Session 10C: Secret SharingCCS ’19, November 11–15, 2019, London, United Kingdom2406To prove that the intersection has the claimed size using polyno-
mial interpolation, P3 plays the prover in two, 2-round interactive
proofs, one providing an upper bound, and the other providing a
lower bound on the size of the intersection. The idea behind these
proofs is as follows. When verifying a lower bound of z on the size
of the set union, P1 and P2 choose a random secret from a suffi-
ciently large field, and secret share the value using a degree (z − 1)
polynomial p2(x). Then, assuming input sets of size n, they each
evaluate the polynomial at every point in their input set, and each
sends the resulting n secret shares to P3. If the union is smaller than
the claimed lower bound of z > |X ∪ Y|, P3 will not have enough
unique values to interpolate the polynomial p2(x) and learns noth-
ing about p2(0). In order to pass the test, P3 must choose a z such
that z ≤ |X ∪ Y|, defining an upper bound of (2n − z) on the size
of the intersection. Similar techniques have been used in previous
work [10, 34, 37].
When verifying a lower bound of z on the size of the intersec-
tion (which is an upper bound on the union), we use a similar
idea with an additional twist. P1 and P2 again choose a random
secret from a sufficiently large field, and secret share the value
using a degree z − 1 polynomial p1(x). They then encode their data
such that two encodings of x reveal a share of this polynomial,
p1(x), while a single encoding of x reveals nothing. Specifically,
they use a 2-out-of-2 additive sharing of p1(x), where the random-
ness for the sharing is derived deterministically from the value of
x: (F(k, x), F(k, x) ⊕ p1(x)). This allows each of P1 and P2 to gen-
erate one of the two shares, without knowing whether the other
party will create and send the other share. P3 will learn at most
|X ∩ Y| shares of p1, so if he has claimed a value of z > |X ∩ Y|, he
learns nothing about p1(0).
We present the full protocol for intersection cardinality in Figure
5. In Figure 4 we present the proof of union lower bound by itself, as
we will use it in Section 4.1 in our “hybrid” protocol that combines
this proof with circuit-based techniques. The reader might find it
helpful to look at Figure 4 first, though the cardinality protocol
of Figure 5 is self-contained. The cardinality protocol includes si-
multaneous proofs of the upper and lower bounds that were just
informally described. Certain checks are performed by P3 in order
to prevent a selective failure attack by P1 and P2. If an element of
V1 or W1 is encoded incorrectly in Steps 6 or 7, this is caught by
P3 in Step 12b or 12c when P1 and P2 reveal the polynomial that
they used. Because P3 needs to learn the randomness used in Steps
6 and 7 in order to perform this check, he sends a commitment to
his challenge response in Step 10, before learning the randomness.
If an element of V2 or W2 is encoded incorrectly in Steps 6 or 7,
this is caught by P3 in Step 9 if the element lies in the intersection,
and is caught in Step 12a if the element is in the union; in either
case, P3 aborts in Step 12. Note that if the check in Step 9 were not
performed, P1 or P2 could perform a selective failure attack to learn
whether some particular element is in the intersection: given a bad
encoding in V2 or W2, P3 would abort if and only if the encoded
element were not in the intersection.
PSI: When computing the actual intersection, rather than just the
cardinality, P3 can provide the encodings of the items in the intersec-
tion, together with a proof of the upper bound on the intersection
size (or, equivalently, the union cardinality lower bound). Clearly
P3 can’t add anything to the intersection, because at least one of
P1 and P2 would recognize that the item was not in their input and
reject. A similar comment applies when computing set union; it
suffices to prove only the lower bound on the union, since nothing
can be dropped from the union without detection. If a deterministic
authenticated encryption scheme is used, there is no need for the
lower bound proof on the union. In Figure 4 we present the union
cardinality lower bound by itself. After receiving the claimed inter-
section and verifying the bound, the players simply verify that the
claimed intersection has size that is consistent with that proof, and
that the claimed intersection is a subset of their own input. The
PSI protocol is secure with abort. It allows both parties to learn the
output, in contrast to the protocols of [28, 36], which only allow
one party to receive output.6 The communication cost is linear.
Union count lower bound
Inputs: P1 has X = {x1, ..., xn }, P2 has Y = {y1, ..., yn }, P3
does not have inputs.
Protocol:
call to Fcoin.
(1) P1 and P2 sample a common random key k by making a
(2) P1 sends S ← {F(k, x) | x ∈ X } to P3.
(3) P2 sends T ← {F(k, y) | y ∈ Y } to P3.
(4) P3 verifies that all items in S and T are distinct, then
sends τ = |S ∪ T | to P1 and P2.
(τ − 1).
(5) P1 and P2 agree on a random polynomial p of degree
(6) P1 sends V ← {p( ˆx) | ˆx ∈ S } to P3.
(7) P2 sends W ← {p( ˆy) | ˆy ∈ T } to P3.
(8) P3 sets V ← {( ˆx, p( ˆx)) | ˆx ∈ S } and W ← {( ˆy, p( ˆy)) |
ˆy ∈ T }
(9) If ∃( ˆx, ˆy) ∈ S×T : ˆx = ˆy ∧ p( ˆx) (cid:44) p( ˆy), P3 interpolates
a polynomial ˆp from τ random values. Otherwise, P3
interpolates a polynomial ˆp from V ∪ W . He computes
ˆs ← ˆp(0).
(10) P3 sends a commitment of ˆs to P1 and P2.
(11) P1 and P2 send p to P3.
(12) P3 aborts if he receives different p or p (cid:44) ˆp. Otherwise,
he decommits ˆs to P1 and P2.
(13) The players compare the values received in the previous
step, and abort if they differ. They also abort if p(0) (cid:44) ˆs.
Output: All parties output τ .
Figure 4: The protocol to compute a lower bound on the
union of the two input sets.
We note that a 2-round proof for the set union lower bound can
be easily extracted, and used for computing set union. We do not
present it separately, in order to preserve space.
Theorem 3.1. Assuming (com, decom) is a computationally hid-
ing, statistically binding commitment scheme, and that F is a secure
PRP, the protocol ΠPSI-CA for computing the cardinality of the set
intersection (Figure 5) securely realizes the ideal functionality FPSI-CA
with abort (Figure 3), under a single malicious corruption.
Proof. The proof appears in Appendix B.
6Of course, in any protocol, the party receiving output can send the value to the first
party, but in these protocols there is no way to verify that the received value is correct.
Session 10C: Secret SharingCCS ’19, November 11–15, 2019, London, United Kingdom2407ΠPSI-CA: Polynomial-Based PSI Cardinality
Inputs: P1 has X = {x1, ..., xn }, P2 has Y = {y1, ..., yn }, P3
does not have inputs.
Protocol:
calls to Fcoin..
(1) P1 and P2 sample random keys k1, k2 by making two
(5) P1 and P2 jointly sample two random polynomials: p1 of
degree (τ −1) (if τ = 0, both set p1 ≡ 0), and p2 of degree
(2n − τ − 1). They compute s1 ← p1(0) and s2 ← p2(0).
(2) P1 sends(cid:98)X ← {F(k1, x) | x ∈ X } to P3.
(3) P2 sends(cid:98)Y ← {F(k1, y) | y ∈ Y } to P3.
(4) P3 verifies that all items in(cid:98)X and(cid:98)Y are distinct, then
sends τ = |(cid:98)X ∩(cid:98)Y | to P1 and P2.
(6) P1 sends V1 ← {F(k2, ˆx) | ˆx ∈ (cid:98)X } and V2 ← {p2( ˆx) |
ˆx ∈ (cid:98)X } to P3.
(7) P2 sends W1 ← {F(k2, ˆy) ⊕ p1( ˆy) | ˆy ∈(cid:98)Y } and W2 ←
{p2( ˆy) | ˆy ∈(cid:98)Y } to P3.
(a) V1 ← {( ˆx, F(k2, ˆx)) | ˆx ∈ (cid:98)X },
(b) W1 ← {( ˆy, F(k2, ˆy) ⊕ p1( ˆy)) | ˆy ∈(cid:98)Y },
(c) V2 ← {( ˆx, p2( ˆx)) | ˆx ∈ (cid:98)X },
(d) W2 ← {( ˆy, p2( ˆy)) | ˆy ∈(cid:98)Y }
(9) If ∃( ˆx, ˆy) ∈ (cid:98)X ×(cid:98)Y : ˆx = ˆy ∧ p2( ˆx) (cid:44) p2( ˆy), P3 interpo-
(8) P3 sets
lates polynomials ˆp1 and ˆp2 from τ and (2n − τ ) random
values respectively. Otherwise, P3 computes:
Q1 ← {(a, b ⊕ c) | (a, b) ∈ V1,
(a, c) ∈ W1} and
Q2 ← {(a, b) | (a, b) ∈ V2 ∪ W2} and then interpolates
Q1, Q2, resulting in polynomials ˆp1 and ˆp2 respectively.
(10) P3 computes ˆs1 ← ˆp1(0), ˆs2 ← ˆp2(0), then sends
com(ˆs1), com(ˆs2) to both P1 and P2.