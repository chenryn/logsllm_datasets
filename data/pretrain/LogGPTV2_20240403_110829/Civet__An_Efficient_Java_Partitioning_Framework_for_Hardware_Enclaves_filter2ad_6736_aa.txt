title:Civet: An Efficient Java Partitioning Framework for Hardware Enclaves
author:Chia-che Tsai and
Jeongseok Son and
Bhushan Jain and
John McAvey and
Raluca Ada Popa and
Donald E. Porter
Civet: An Efficient Java Partitioning Framework 
for Hardware Enclaves
Chia-Che Tsai, Texas A&M University; Jeongseok Son, UC Berkeley; Bhushan Jain, 
The University of North Carolina at Chapel Hill; John McAvey, Hendrix College; Raluca 
Ada Popa, UC Berkeley; Donald E. Porter, The University of North Carolina at Chapel Hill
https://www.usenix.org/conference/usenixsecurity20/presentation/tsai
This paper is included in the Proceedings of the 29th USENIX Security Symposium.August 12–14, 2020978-1-939133-17-5Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.Civet: An Efﬁcient Java Partitioning Framework for Hardware Enclaves
Chia-Che Tsai
Texas A&M University
Jeongseok Son
UC Berkeley
Raluca Ada Popa
UC Berkeley
Bhushan Jain
UNC Chapel Hill
Donald E. Porter
UNC Chapel Hill
John McAvey
Hendrix College
Abstract
Hardware enclaves are designed to execute small pieces of
sensitive code or to operate on sensitive data, in isolation from
larger, less trusted systems. Partitioning a large, legacy appli-
cation requires signiﬁcant effort. Partitioning an application
written in a managed language, such as Java, is more challeng-
ing because of mutable language characteristics, extensive
code reachability in class libraries, and the inevitability of
using a heavyweight runtime.
Civet is a framework for partitioning Java applications into
enclaves. Civet reduces the number of lines of code in the
enclave and uses language-level defenses, including deep
type checks and dynamic taint-tracking, to harden the enclave
interface. Civet also contributes a partitioned Java runtime de-
sign, including a garbage collection design optimized for the
peculiarities of enclaves. Civet is efﬁcient for data-intensive
workloads; partitioning a Hadoop mapper reduces the en-
clave overhead from 10× to 16–22% without taint-tracking
or 70–80% with taint-tracking.
1 Introduction
Hardware enclaves [1–4] are designed to protect sensitive
code and data from compromised OSes, hypervisors, or off-
chip devices. An enclave includes a memory region protected
by the CPU and encrypted in DRAM. An enclave can also
attest the integrity of execution to a remote entity. So far,
many enclave-protected systems have been proposed [5–8],
including commercial cloud offerings from Microsoft, IBM,
and Alibaba [9, 10]. Speaking broadly, there is an increas-
ing understanding of how to use enclaves to protect a single
client’s code in a multi-tenant cloud.
The design space for enclaves quickly becomes murkier for
complex cloud applications that contain sensitive and insen-
sitive components, and that are written in an object-oriented,
managed language. These applications often integrate large
code bases and data from both users and cloud providers,
who may distrust each other. Take Hadoop [11] as example:
Graphene-SGX
(∆)
Ubuntu 16.04
Total time (s)
45.4 +/- 0.5
35.2 +/- 0.2
1.9 +/- 0.0
Mappers
Reducers
Total time (s)
501.0 +/- 9.4 (10.0×)
393.1 +/- 8.1 (10.2×)
14.8 +/- 0.9 (6.6×)
Table 1: Comparison of a non-partitioned Hadoop job be-
tween Ubuntu and Graphene-SGX [16]
Garbage collection
user-deﬁned mappers and reducers may operate on sensitive
data, yet the orchestration and resource management frame-
work is controlled by the cloud provider. Although there are
some solutions for running an entire application in an en-
clave [12–15], this approach provides no isolation between
the user and cloud provider. Moreover, dropping an entire
cloud framework written in a managed language like Java into
an enclave is prohibitively expensive, as illustrated in Table 1.
Experiment parameters are detailed in §9.
Ideally, an application like Hadoop should be partitioned,
so that only sensitive code and data are inside the enclave.
Figure 1(a) illustrates the non-partitioned model for protecting
the entire Hadoop framework. The model places a large
portion of framework code in the trusted computing base
(TCB), despite the fact that this code need not directly interact
with any sensitive user data.
This paper presents Civet, a framework for partitioning a
Java application into trusted classes that run inside enclaves,
and untrusted classes that run outside enclaves. Figure 1(b)
shows Civet’s partitioned model, which reduces the in-enclave
TCB to sensitive classes. The partitioned model establishes a
hardware-enforced isolation boundary between the untrusted
“system” and trusted pieces of application logic within a large,
legacy code base.
Prior work [17–19] has explored the idea of partitioning an
application for enclaves, yet no solution can partition a Java
application that depends on complex class libraries and a com-
plex runtime. Among prior work, TLR (Trusted Language
Runtime) [17] is a framework for running portions of a mo-
USENIX Association
29th USENIX Security Symposium    505
Figure 1: A comparison between the non-partitioned model and Civet’s partitioned model.
(a) Non-partitioned model needs to run the en-
tire Hadoop framework in an enclave.
(b) Civet runs only the sensitive code, e.g., map/reduce, in an en-
clave without trusting the rest of the Hadoop framework.
bile application, written in C#, inside ARM’s TrustZone [20].
Although TLR provides a mechanism for separating sensitive
logic from the untrusted OS and application code, mobile
applications are much simpler than most cloud applications.
TLR provides no solutions for hardening the trusted code
against Iago-style attacks [21] that leverage subtle language
properties such as polymorphism. Intel’s Software Guard Ex-
tensions (SGX) [1], a more common platform for emerging
cloud deployments of hardware enclaves, has a much tighter
memory budget than TrustZone; this memory restriction can
be especially problematic for Java workloads. Glamdring [18]
is another framework for automatically partitioning C/C++
programs into enclaves. Glamdring reduces the TCB using
program slicing, but does not generate code to protect against
malicious inputs. In our experience, a key challenge in parti-
tioning a legacy application is hardening the software at the
newly created enclave boundary.
Civet addresses various challenges of partitioning a man-
aged, object-oriented language, using Java as a representative
example. Our framework is prototyped on SGX, but many of
the design principles are independent of SGX.
1.1 Challenges
To partition a Java application, developers face several chal-
lenges that reduce security compared to the original applica-
tion, that fail to reduce the TCB, or that require memory and
other resources in excess of the constraints of SGX. We iden-
tify the following challenges for partitioning an application
written in a managed, object-oriented language, such as Java:
• Complexity of defending partition interfaces: Adding an in-
terface between trusted and untrusted code requires adding
a defense; this is already a challenge, but the language
features of Java further complicate this defense. With poly-
morphism, untrusted code may override the behavior of a
method by creating a subclass. By accepting objects from
outside the enclave as input, an enclave can become po-
tentially vulnerable to a type confusion attack [22]. The
input can be subtyped to alter the behavior of the enclave
code, with an overridden method potentially sending sen-
sitive data out of the enclave, or using reﬂection to load
unexpected code into the enclave.
• Large application code footprint: Even a “Hello World”
class can introduce millions of lines of code from standard
and third-party libraries. Many classes rely on JNIs (Java
Native Interfaces), which are written in C/C++ and are
notoriously prone to vulnerabilities [23]. Finally, a feature-
complete JVM like OpenJDK contains up to a million lines
of code written in Java and C/C++.
• A runtime that requires signiﬁcant resources and system
support: Even a small partition of a Java application needs
a full-featured runtime. Designing runtimes for enclaves
is an open problem—a commodity JVM like OpenJDK
makes many assumptions that are violated by enclaves,
such as the presence of a large, demand-allocated virtual
memory and a large pool of internal maintenance threads.
Standard runtime behaviors, such as garbage collection, are
not tuned for the memory restriction of SGX.
1.2 Goals and Contributions
To address these challenges speciﬁc to supporting managed
languages in enclaves, Civet includes both compile-time tools
and an execution framework with the following goals:
• Reducing partitioning effort: When introducing an iso-
lation boundary into a large codebase, reasoning about
the resulting security implications can be challenging—
including what code ultimately runs in the enclave, what
data can enter and exit the enclave, and by what code paths.
To assist the developer in this reasoning process, we add
static analysis and dynamic code instrumentation tools that
can both reduce the code footprint in the enclave, as well
as give the developer visibility into what can run in the
enclave, data ingress, and data egress.
• Mitigating partitioning pitfalls: Partitioning can expose
a larger attack surface than running the entire application
inside enclaves. A goal of Civet is to mitigate a majority of
506    29th USENIX Security Symposium
USENIX Association
HDFSYarn SchedulerThread      Commodity JVMMapTask(s)ReduceTask(s)map(K,V,Context)reduce(K,V[],Context)JNIStandard ClassesDirect InvocationEnclave ProtectionThreadThreadThreadThreadThreadHDFSYarn SchedulerThread      Commodity JVMMapTask(s)ReduceTask(s)JNIStandard ClassesPartitioned JVMEnclave InvocationDirect InvocationEnclave ProtectionThreadThreadThreadThreadThreadmap(K,V,Context)reduce(K,V[],Context)Civet Runtime Frameworkthe non-side-channel security pitfalls caused by partition-
ing, such as type confusion attacks or accidental leakage
through data ﬂow. To this end, Civet analyzes the applica-
tion and applies restrictions to behaviors that are impossible
before partitioning. For type confusion attacks, we present
an efﬁcient strategy for type-checking any input, not only
at the root of an object, but at every ﬁeld and array element.
Civet also uses taint-tracking [24] to block outputs that are
tainted by sensitive information.
• Removing unreachable code: Even in a managed language,
unreachable code in the TCB is a potential liability, as
dynamic class loading or polymorphic behavior can lead
to invisible or unexpected execution paths. During ofﬂine
analysis, Civet removes unreachable classes and methods.
The result is a trusted JAR ﬁle that is signiﬁcantly smaller
than the original collection of classes libraries, improv-
ing the auditability and lowering the risk of unexpected
behaviors in the enclave.
• Optimizing garbage collection for enclaves: SGX has a
hardware limitation of 93.5 MB for the Enclave Memory
Cache (EPC). If the enclaves on a system access more
DRAM than this, the OS will swap the memory in and out
of EPC, causing substantial overhead [13, 25]. Most GCs
scan the heap and, thus, perform poorly when the heap
is sparsely populated and is larger than the EPC. Civet
includes a GC design that adds a middle generation, for
preventing full-heap GC while keeping GC faster for the
youngest objects. This optimizes GC to match the perfor-
mance characteristics of enclaves.
The contributions of this paper are:
• A framework that leverages Java language features to ana-
lyze and partition applications to run in enclaves (§4).
• A system to harden the enclave boundary. This includes
type-checking polymorphic inputs (§5), and mitigating un-
intended information leakage from enclaves (§6).
• A lightweight JVM partitioned for enclaves (§8).
• A study of GC and a three-generation GC design optimized
for enclaves (§7.2).
2 Related Work
Enclave frameworks and SDKs.
Intel SGX introduces
new design challenges, such as validating system call results
from a malicious OS [21]. The state-of-the-art solution is
a library OS [12, 16] or a shield layer [13, 26] to hoist OS
functionality into the enclave and/or validate inputs from an
untrusted OS. Developers can also write enclave code from
scratch, using an SGX SDK [27–29]. Applications written
in a managed language are commonly rewritten for SGX in
another language; for example, VC3 [5] sacriﬁces the beneﬁts
of using a type-safe language and compatibility by rewriting
the Hadoop code in C++.
Partitioned trusted execution. Prior work reduces trusted
code size through program slicing and/or generating the in-
terface between partitions. TLR [17] and Rubinov et al. [30]
partition android programs to run in ARM TrustZone [20].
Glamdring [18] partitions C/C++ programs for enclaves us-
ing static program slicing. SeCage [19] partitions an appli-
cation into secret compartments with hardware-based isola-
tion. GoTEE [31] compiles Go functions into enclaves, with a
lightweight runtime and APIs for shielding. Brenner et al. [32]
run microservices in enclaves, apart from the orchitestration
framework. EnclaveDom [33] leverages Memory Protection
Keys (MPK) for privilege separation inside enclaves.
Java partitioning frameworks. A number of tools parti-
tion a Java application for modularity. Addistant [34] and
J-Orchestra [35] automatically divide Java applications across
multiple hosts or JVMs. Zdancewic et al. [36] use annotations
to partition an application, with static analysis to enforce data
ﬂow policies. Swift [37] partitions web applications such that
security-critical data remains on the trusted server.
Capability languages such as E [38], Joe-E [39], Oz-E [40],
and Emily [41] deﬁne the object-capability approach for vari-
ous languages, and identify patterns for secure programming.
Compared to these capability-based frameworks, Civet en-
forces coarse-grained security policies by simply separating
trusted and untrusted objects, and hardening the boundary
with hardware enclaves.
3 Threat Model and Security Properties
Civet adopts a similar threat model to many recent SGX
projects [5, 12–15, 18, 26, 31]. All in-enclave software is
trusted and everything else that is outside the enclave is not
trusted. Because any software can have bugs, which an at-
tacker could exploit, one of Civet’s goals is to decrease the
TCB running in the enclave, as well as reduce the attack
surface of the enclave code exposed to the untrusted host.
In moving from a model where one can trust the OS and hy-
pervisor, to an SGX-style threat model, where host software
and even parts of the application are potentially compromised,
one must design enclave code to resist several new threats.
First, one must ensure that the code in the enclave is really
what the authors intended. Although SGX can measure the
contents of an enclave at start time, the enclave code itself
must be responsible to handle dynamic loading of additional
classes; one cause for concern is misleading the enclave code
to load a malicious class that could leak sensitive data or
compromise the integrity of the code in the enclave. Sec-
ond, partitioning an application to run portions of code in an
enclave creates a new intra-application interface. Although
good software engineering involves explicating assumptions
about the state of the application when a function is called,
perhaps even as comments, one must now carefully check
these assumptions at the enclave boundary. This general class
USENIX Association
29th USENIX Security Symposium    507
of semantic attacks against an enclave interface that violate a
tacit assumption in the code are called Iago attacks [21]. A
third major concern is that sensitive data not inadvertently
leak from the enclave. In refactoring a large piece of legacy
code, it is easy to accidentally leave a code path that writes
data to an out-of-enclave object. This third concern is less of
an attack vector per se, so much as an aspect of this work that
is highly error-prone. The security properties discussed later
in this section consider each of these concerns.
Untrusted components. An attacker can compromise any
off-chip devices (e.g., DRAM, accelerators, I/O devices) and