[7] Ferdinand Brasser, Urs Müller, Alexandra Dmitrienko, Kari Kostiainen,
Srdjan Capkun, and Ahmad-Reza Sadeghi. Software grand exposure:
SGX cache attacks are practical. In WOOT, 2017.
[8] Samira Briongos, Pedro Malagón, José Manuel Moya, and Thomas
Eisenbarth. Reload+Refresh: abusing cache replacement policies to
perform stealthy cache attacks. In USENIX Security, pages 1967–1984,
2020.
[9] Jo Van Bulck, Marina Minkin, Oﬁr Weisse, Daniel Genkin, Baris
Kasikci, Frank Piessens, Mark Silberstein, Thomas F. Wenisch, Yu-
val Yarom, and Raoul Strackx. Foreshadow: Extracting the keys to the
intel SGX kingdom with transient out-of-order execution. In USENIX
Security, pages 991–1008, 2018.
[10] Alejandro Cabrera Aldaya, Billy Bob Brumley, Sohaib ul Hassan, Cesar
Pereida García, and Nicola Tuveri. Port contention for fun and proﬁt.
In IEEE SP, pages 870–887, 2019.
[11] Alejandro Cabrera Aldaya, Cesar Pereida García, Luis Manuel Al-
varez Tapia, and Billy Bob Brumley. Cache-timing attacks on RSA
key generation. IACR Trans. Cryptogr. Hardw. Embed. Syst., 2019(4):
213–242, 2019.
[12] Aylin Caliskan-Islam, Richard Harang, Andrew Liu, Arvind Narayanan,
Clare Voss, Fabian Yamaguchi, and Rachel Greenstadt.
De-
anonymizing programmers via code stylometry. In USENIX Sec, pages
255–270, 2015.
[13] Claudio Canella, Jo Van Bulck, Michael Schwarz, Moritz Lipp, Ben-
jamin von Berg, Philipp Ortner, Frank Piessens, Dmitry Evtyushkin,
and Daniel Gruss. A systematic evaluation of transient execution at-
tacks and defenses. In USENIX Security, pages 249–266, 2019.
[14] Yinzhi Cao, Zhanhao Chen, Song Li, and Shujiang Wu. Deterministic
browser. In CCS, pages 163–178, 2017.
[15] Alex Christensen.
Reduce resolution of performance.now.
https://developer.mozilla.org/en-US/docs/Web/API/
Performance/now, 2015.
[16] Chromium Project. window.performance.now does not support sub-
millisecond precision on Windows. https://bugs.chromium.org/
p/chromium/issues/detail?id=158234#c110, 2016.
[17] David Cock, Qian Ge, Toby C. Murray, and Gernot Heiser. The last
mile: An empirical study of timing channels on seL4. In CCS, pages
570–581, 2014.
[18] Fergus Dall, Gabrielle De Micheli, Thomas Eisenbarth, Daniel Genkin,
Nadia Heninger, Ahmad Moghimi, and Yuval Yarom. CacheQuote:
Efﬁciently recovering long-term secrets of SGX EPID via cache attacks.
IACR Trans. Cryptogr. Hardw. Embed. Syst., 2018(2):171–191, 2018.
[19] Leonid Domnitser, Aamer Jaleel, Jason Loew, Nael B. Abu-Ghazaleh,
and Dmitry Ponomarev. Non-monopolizable caches: Low-complexity
mitigation of cache side channel attacks. TACO, 8(4):35:1–35:21, 2012.
ECMAScript 2016 language speciﬁca-
https://www.ecma-international.org/ecma-262/7.0/
[20] ECMA International.
tion.
index.html, 2016.
[21] I. Fette and A. Melnikov. The WebSocket protocol. RFC 6455, IETF,
December 2011.
[22] Qian Ge, Yuval Yarom, David Cock, and Gernot Heiser. A survey of mi-
croarchitectural timing attacks and countermeasures on contemporary
hardware. J. Cryptographic Engineering, 8(1):1–27, 2018.
[23] Qian Ge, Yuval Yarom, Tom Chothia, and Gernot Heiser. Time protec-
tion: The missing OS abstraction. In EuroSys, pages 1:1–1:17, 2019.
[24] Daniel Genkin, Lev Pachmanov, Eran Tromer, and Yuval Yarom. Drive-
by key-extraction cache attacks from portable code. In ACNS, pages
83–102, 2018.
[25] Daniel Genkin, Romain Poussier, Rui Qi Sim, Yuval Yarom, and Yuan-
jing Zhao. Cache vs. key-dependency: Side channeling an implementa-
tion of Pilsung. IACR Trans. Cryptogr. Hardw. Embed. Syst., 2020(1):
231–255, 2020.
[26] Ben Gras, Kaveh Razavi, Erik Bosman, Herbert Bos, and Cristiano
Giuffrida. ASLR on the line: Practical cache attacks on the MMU. In
NDSS, 2017.
[27] Ben Gras, Kaveh Razavi, Herbert Bos, and Cristiano Giuffrida. Trans-
lation leak-aside buffer: Defeating cache side-channel protections with
TLB attacks. In USENIX Security, pages 955–972, 2018.
[28] Daniel Gruss, David Bidner, and Stefan Mangard. Practical memory
deduplication attacks in sandboxed JavaScript. In ESORICS, pages
108–122, 2015.
[29] Daniel Gruss, Raphael Spreitzer, and Stefan Mangard. Cache template
attacks: Automating attacks on inclusive last-level caches. In USENIX
Security, pages 897–912, 2015.
[30] Daniel Gruss, Clémentine Maurice, and Stefan Mangard. Rowham-
mer.js: A remote software-induced fault attack in JavaScript. In DIMVA,
pages 300–321, 2016.
[31] Daniel Gruss, Clémentine Maurice, Klaus Wagner, and Stefan Mangard.
Flush+Flush: A fast and stealthy cache attack. In DIMVA, pages 279–
299, 2016.
[32] David Gullasch, Endre Bangerter, and Stephan Krenn. Cache games –
bringing access-based cache attacks on AES to practice. In IEEE SP,
pages 490–505, 2011.
[33] Berk Gülmezoglu, Andreas Zankl, M. Caner Tol, Saad Islam, Thomas
Eisenbarth, and Berk Sunar. Undermining user privacy on mobile
devices using AI. In AsiaCCS, pages 214–227, 2019.
[34] Andrew Hintz. Fingerprinting websites using trafﬁc analysis.
Privacy Enhancing Technologies, 2002.
In
[35] Wei-Ming Hu. Reducing timing channels with fuzzy time. In IEEE
SP, pages 8–20, 1991.
[36] Ralf Hund, Carsten Willems, and Thorsten Holz. Practical timing
side channel attacks against kernel space ASLR. In IEEE SP, pages
191–205, 2013.
[37] Mehmet Sinan Inci, Berk Gülmezoglu, Gorka Irazoqui, Thomas Eisen-
barth, and Berk Sunar. Cache attacks enable bulk key recovery on the
cloud. In CHES, pages 368–388, 2016.
[38] Marc Juárez, Sadia Afroz, Gunes Acar, Claudia Díaz, and Rachel Green-
stadt. A critical evaluation of website ﬁngerprinting attacks. In Gail-
Joon Ahn, Moti Yung, and Ninghui Li, editors, CCS, pages 263–274,
2014.
2878    30th USENIX Security Symposium
USENIX Association
[39] Hyungsub Kim, Sangho Lee, and Jong Kim. Inferring browser activity
and status through remote monitoring of storage usage. In ACSAC,
2016.
[40] Taesoo Kim, Marcus Peinado, and Gloria Mainar-Ruiz. STEALTH-
MEM: system-level protection against cache-based side channel attacks
in the cloud. In USENIX Security Symposium, pages 189–204. USENIX
Association, 2012.
[41] Paul Kocher, Jann Horn, Anders Fogh, Daniel Genkin, Daniel Gruss,
Werner Haas, Mike Hamburg, Moritz Lipp, Stefan Mangard, Thomas
Prescher, Michael Schwarz, and Yuval Yarom. Spectre attacks: Exploit-
ing speculative execution. In IEEE SP, pages 1–19, 2019.
[42] David Kohlbrenner and Hovav Shacham. Trusted browsers for uncer-
tain times. In USENIX Sec, pages 463–480, 2016.
[43] Erick Lavoie, Bruno Dufour, and Marc Feeley. Portable and efﬁcient
run-time monitoring of JavaScript applications using virtual machine
layering. In ECOOP 2014, pages 541–566, 2014.
[44] Sangho Lee, Ming-Wei Shih, Prasun Gera, Taesoo Kim, Hyesoon Kim,
and Marcus Peinado. Inferring ﬁne-grained control ﬂow inside SGX
enclaves with branch shadowing. In USENIX Security, pages 557–574,
2017.
[45] Jochen Liedtke, Hermann Härtig, and Michael Hohmuth. OS-controlled
cache predictability for real-time systems. In RTAS, pages 213–224,
1997.
[46] Moritz Lipp, Daniel Gruss, Raphael Spreitzer, Clémentine Maurice,
and Stefan Mangard. ARMageddon: Cache attacks on mobile devices.
In USENIX Security, pages 549–564, 2016.
[47] Moritz Lipp, Daniel Gruss, Michael Schwarz, David Bidner, Clémen-
tine Maurice, and Stefan Mangard. Practical keystroke timing attacks
in sandboxed JavaScript. In ESORICS (2), pages 191–209, 2017.
[48] Moritz Lipp, Michael Schwarz, Daniel Gruss, Thomas Prescher, Werner
Haas, Anders Fogh, Jann Horn, Stefan Mangard, Paul Kocher, Daniel
Genkin, Yuval Yarom, and Mike Hamburg. Meltdown: Reading kernel
memory from user space. In USENIX Security, pages 973–990, 2018.
[49] Fangfei Liu, Yuval Yarom, Qian Ge, Gernot Heiser, and Ruby B. Lee.
Last-level cache side-channel attacks are practical. In IEEE SP, pages
605–622, 2015.
[50] Fangfei Liu, Qian Ge, Yuval Yarom, Frank McKeen, Carlos V. Rozas,
Gernot Heiser, and Ruby B. Lee. CATalyst: Defeating last-level cache
side channel attacks in cloud computing. In HPCA, pages 406–418,
2016.
[51] Giorgio Maone. Noscript. https://noscript.net.
[52] Bynens Mathias. Elements kinds in V8. https://v8.dev/blog/
elements-kinds, 2017.
[53] Nikolay Matyunin, Yujue Wang, Tolga Arul, Kristian Kullmann, Jakub
Szefer, and Stefan Katzenbeisser. Magneticspy: Exploiting magne-
tometer in mobile devices for website and application ﬁngerprinting.
In WPES, pages 135–149, 2019.
[54] Clémentine Maurice, Christoph Neumann, Olivier Heen, and Aurélien
Francillon. C5: cross-cores cache covert channel. In DIMVA, pages
46–64, 2015.
[55] Arvind Narayanan, Hristo Paskov, Neil Zhenqiang Gong, John Bethen-
court, Emil Stefanov, Eui Chul Richard Shin, and Dawn Song. On the
feasibility of internet-scale author identiﬁcation. In IEEE SP, pages
300–314, 2012.
[56] Rom Ogen, Kﬁr Zvi, Omer Shwartz, and Yossi Oren. Sensorless,
permissionless information exﬁltration with Wi-Fi micro-jamming.
In WOOT, 2018.
[57] Yossef Oren, Vasileios P. Kemerlis, Simha Sethumadhavan, and Ange-
los D. Keromytis. The spy in the sandbox: Practical cache attacks in
JavaScript and their implications. In CCS, pages 1406–1418, 2015.
[58] Dag Arne Osvik, Adi Shamir, and Eran Tromer. Cache attacks and
countermeasures: The case of AES. In CT-RSA, pages 1–20, 2006.
[59] Andriy Panchenko, Lukas Niessen, Andreas Zinnen, and Thomas Engel.
Website ﬁngerprinting in onion routing based anonymization networks.
In Yan Chen and Jaideep Vaidya, editors, WPES, pages 103–114, 2011.
[60] Colin Percival. Cache missing for fun and proﬁt. In BSDCan 2005,
2005. URL http://css.csail.mit.edu/6.858/2014/readings/
ht-cache.pdf.
[61] Moinuddin K. Qureshi. CEASER: mitigating conﬂict-based cache
attacks via encrypted-address and remapping. In MICRO, pages 775–
787, 2018.
[62] Moinuddin K. Qureshi, Aamer Jaleel, Yale N. Patt, Simon C. Steely
Jr., and Joel S. Emer. Set-dueling-controlled adaptive insertion for
high-performance caching. IEEE Micro, 28(1):91–98, 2008.
[63] Vera Rimmer, Davy Preuveneers, Marc Juárez, Tom van Goethem,
and Wouter Joosen. Automated website ﬁngerprinting through deep
learning. In NDSS, 2018.
[64] Thomas Ristenpart, Eran Tromer, Hovav Shacham, and Stefan Savage.
Hey, you, get off of my cloud: exploring information leakage in third-
party compute clouds. In CCS, pages 199–212, 2009.
[65] Eyal Ronen, Robert Gillham, Daniel Genkin, Adi Shamir, David Wong,
and Yuval Yarom. The 9 lives of Bleichenbacher’s CAT: new cache
attacks on TLS implementations. In IEEE SP, pages 435–452, 2019.
[66] Michael Schwarz, Clémentine Maurice, Daniel Gruss, and Stefan Man-
gard. Fantastic timers and where to ﬁnd them: High-resolution microar-
chitectural attacks in JavaScript. In Financial Cryptography and Data
Security, pages 247–267, 2017.
[67] Michael Schwarz, Moritz Lipp, and Daniel Gruss. JavaScript Zero:
Real JavaScript and zero side-channel attacks. In NDSS, 2018.
[68] Jicheng Shi, Xiang Song, Haibo Chen, and Binyu Zang. Limiting
cache-based side-channel in multi-tenant cloud using dynamic page
coloring. In DSN Workshops, pages 194–199. IEEE Computer Society,
2011.
[69] Anatoly Shusterman, Lachlan Kang, Yarden Haskal, Yosef Meltser,
Prateek Mittal, Yossi Oren, and Yuval Yarom. Robust website ﬁnger-
printing through the cache occupancy channel. In USENIX Security,
pages 639–656, 2019.
[70] Paul Stone.
Pixel perfect
timing attacks with HTML5.
https://www.contextis.com/media/downloads/Pixel_
Perfect_Timing_Attacks_with_HTML5_Whitepaper.pdf, 2013.
[71] The Tor Project, Inc. The Tor Browser. https://www.torproject.
org/projects/torbrowser.html.en.
[72] Tom Van Goethem, Wouter Joosen, and Nick Nikiforakis. The clock
is still ticking: Timing attacks in the modern web. In ACSAC, pages
1382–1393, 2015.
[73] Bhanu C. Vattikonda, Sambit Das, and Hovav Shacham. Eliminating
ﬁne grained timers in Xen. In CCSW, pages 41–46, 2011.
[74] Pepe Vila and Boris Köpf. Loophole: Timing attacks on shared event
loops in Chrome. In USENIX Sec, pages 849–864, 2017.
[75] W3C. Webassembly JavaScript interface. https://webassembly.
github.io/spec/js-api/index.html, 2020.
[76] Daimeng Wang, Zhiyun Qian, Nael B. Abu-Ghazaleh, and Srikanth V.
Krishnamurthy. PAPP: prefetcher-aware prime and probe side-channel
attack. In DAC, page 62, 2019.
[77] Zhenghong Wang and Ruby B. Lee. New cache designs for thwarting
software cache-based side channel attacks. In ISCA, pages 494–505,
2007.
[78] Mario Werner, Thomas Unterluggauer, Lukas Giner, Michael Schwarz,
Daniel Gruss, and Stefan Mangard. ScatterCache: Thwarting cache
attacks via cache set randomization. In USENIX Security, pages 675–
692, 2019.
[79] Mengjia Yan, Christopher W. Fletcher, and Josep Torrellas. Cache
telepathy: Leveraging shared resource attacks to learn DNN architec-
tures. In USENIX Security, 2020.
USENIX Association
30th USENIX Security Symposium    2879
[80] Yuval Yarom and Katrina Falkner. Flush+Reload: a high resolution,
low noise, L3 cache side-channel attack. In USENIX Security, pages
719–732, 2014.
[81] Yuval Yarom, Qian Ge, Fangfei Liu, Ruby B. Lee, and Gernot Heiser.
Mapping the Intel last-level cache. IACR Cryptology ePrint Archive
2015/905, 2015.
[82] Yuval Yarom, Daniel Genkin, and Nadia Heninger. CacheBleed: A
timing attack on OpenSSL constant time RSA. In CHES, pages 346–
367, 2016.
[83] Andy B. Yoo, Morris A. Jette, and Mark Grondona. SLURM: Sim-
ple Linux utility for resource management. In Dror Feitelson, Larry
Rudolph, and Uwe Schwiegelshohn, editors, Job Scheduling Strate-
gies for Parallel Processing, pages 44–60. Springer Berlin Heidelberg,
2003.
[84] Boris Zbarsky. Clamp the resolution of performance.now() calls to
5us. https://hg.mozilla.org/integration/mozilla-inbound/
rev/48ae8b5e62ab, 2015.
[85] Xiaokuan Zhang, Yuan Xiao, and Yinqian Zhang. Return-oriented
Flush-Reload side channels on ARM and their implications for android
devices. In CCS, pages 858–870, 2016.
[86] Yinqian Zhang, Ari Juels, Michael K. Reiter, and Thomas Ristenpart.
Cross-VM side channels and their use to extract private keys. In CCS,
pages 305–316, 2012.
A Machine Learning Model
Our machine learning classiﬁer receives as input a side-
channel trace, and outputs a probability distribution over the
100 potential websites. Before the trace is fed to the model, the
input vector was normalized between 0 and 1. We then used a
deep learning network to perform our analysis, meaning that
feature extraction was done inside the neural network and did
not require additional preprocessing steps. We used the deep
learning model whose hyperparameters are presented in Ta-
ble 7. The model begins with a convolution layer which learns
the unique patterns of each label, followed by a Max-Pooling
layer which reduces the dimensionality of the output of the
previous layer. The output of the Max-Pooling layer is then
reshaped to a one dimension vector and fed to a Long-Short
Term Layer, which extracts temporal features over its input.
Finally, the output layer of the network is a fully-connected
layer with a softmax activation function.
The model was evaluated on a test set whose traces are
not part of the training set. The metric we use is accuracy –
the probability of a trace to be classiﬁed correctly. To avoid
Table 7: Hyperparameters for the deep learning classiﬁer
Hyperparameter
Optimizer
Learning rate
Batch size
Training epoch
Input units
Convolution layers
Convolution activation
Convolution Kernels
Convolution Kernel size
Pool size
LSTM activation
LSTM units
Dropout
Value
Adam
0.001
128
Early stop by validation accuracy
vector size of the 30 seconds input
2
relu
256
16,8
4
tanh
32
0.7
overﬁtting in model estimation, we employ 10 fold cross
validation, a method which divides the dataset into 10 parts,
with each part becoming the test set while the others are used
as the train set. Each training set is fed to a different model,
and the evaluation is made on the related test set. After each
experiment, we noted the average cross-fold accuracy, as well
as the standard deviation between folds.
The output of our classiﬁer is not only the label of the most
probable class, but rather a complete probability distribution
over all possible labels. This ﬂexibility allows us to capture
the case where the attacker has some prior knowledge of the
victim and some expectation of the websites they may be
browsing. To do so, we look not only at the top-rated label,
but also at a few of the next most probable predictions. This
methodology was previously used in similar works where
low-accuracy classiﬁers were evaluated [12, 55]. We thus
calculated not only the raw accuracy, but also the probability
that the right prediction is among the top 5 websites output
as the most probable by the classiﬁer. The base accuracy rate
of this prediction method, as obtained by a random classiﬁer
with no knowledge of the traces, is 5%.
The machine learning model was implemented in python
version 3.6, using TensorFlow [1] library version 1.4. The
model training algorithms were run on a cluster made out of
Nvidia GTX1080 and GTX2080 graphics processing units
(GPUs), managed by Slurm workload manager [83] version
19.05.4.
2880    30th USENIX Security Symposium
USENIX Association