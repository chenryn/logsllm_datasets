### References

1. Ferdinand Brasser, Urs Müller, Alexandra Dmitrienko, Kari Kostiainen, Srdjan Capkun, and Ahmad-Reza Sadeghi. "Software Grand Exposure: SGX Cache Attacks Are Practical." In *WOOT*, 2017.

2. Samira Briongos, Pedro Malagón, José Manuel Moya, and Thomas Eisenbarth. "Reload+Refresh: Abusing Cache Replacement Policies to Perform Stealthy Cache Attacks." In *USENIX Security*, pages 1967–1984, 2020.

3. Jo Van Bulck, Marina Minkin, Ofer Weisse, Daniel Genkin, Baris Kasikci, Frank Piessens, Mark Silberstein, Thomas F. Wenisch, Yuval Yarom, and Raoul Strackx. "Foreshadow: Extracting the Keys to the Intel SGX Kingdom with Transient Out-of-Order Execution." In *USENIX Security*, pages 991–1008, 2018.

4. Alejandro Cabrera Aldaya, Billy Bob Brumley, Sohaib ul Hassan, Cesar Pereida García, and Nicola Tuveri. "Port Contention for Fun and Profit." In *IEEE SP*, pages 870–887, 2019.

5. Alejandro Cabrera Aldaya, Cesar Pereida García, Luis Manuel Alvarez Tapia, and Billy Bob Brumley. "Cache-Timing Attacks on RSA Key Generation." *IACR Trans. Cryptogr. Hardw. Embed. Syst.*, 2019(4): 213–242, 2019.

6. Aylin Caliskan-Islam, Richard Harang, Andrew Liu, Arvind Narayanan, Clare Voss, Fabian Yamaguchi, and Rachel Greenstadt. "De-anonymizing Programmers via Code Stylometry." In *USENIX Sec*, pages 255–270, 2015.

7. Claudio Canella, Jo Van Bulck, Michael Schwarz, Moritz Lipp, Benjamin von Berg, Philipp Ortner, Frank Piessens, Dmitry Evtyushkin, and Daniel Gruss. "A Systematic Evaluation of Transient Execution Attacks and Defenses." In *USENIX Security*, pages 249–266, 2019.

8. Yinzhi Cao, Zhanhao Chen, Song Li, and Shujiang Wu. "Deterministic Browser." In *CCS*, pages 163–178, 2017.

9. Alex Christensen. "Reduce Resolution of performance.now." https://developer.mozilla.org/en-US/docs/Web/API/Performance/now, 2015.

10. Chromium Project. "window.performance.now does not support sub-millisecond precision on Windows." https://bugs.chromium.org/p/chromium/issues/detail?id=158234#c110, 2016.

11. David Cock, Qian Ge, Toby C. Murray, and Gernot Heiser. "The Last Mile: An Empirical Study of Timing Channels on seL4." In *CCS*, pages 570–581, 2014.

12. Fergus Dall, Gabrielle De Micheli, Thomas Eisenbarth, Daniel Genkin, Nadia Heninger, Ahmad Moghimi, and Yuval Yarom. "CacheQuote: Efficiently Recovering Long-Term Secrets of SGX EPID via Cache Attacks." *IACR Trans. Cryptogr. Hardw. Embed. Syst.*, 2018(2): 171–191, 2018.

13. Leonid Domnitser, Aamer Jaleel, Jason Loew, Nael B. Abu-Ghazaleh, and Dmitry Ponomarev. "Non-Monopolizable Caches: Low-Complexity Mitigation of Cache Side Channel Attacks." *TACO*, 8(4): 35:1–35:21, 2012.

14. ECMA International. "ECMAScript 2016 Language Specification." https://www.ecma-international.org/ecma-262/7.0/index.html, 2016.

15. I. Fette and A. Melnikov. "The WebSocket Protocol." RFC 6455, IETF, December 2011.

16. Qian Ge, Yuval Yarom, David Cock, and Gernot Heiser. "A Survey of Microarchitectural Timing Attacks and Countermeasures on Contemporary Hardware." *J. Cryptographic Engineering*, 8(1): 1–27, 2018.

17. Qian Ge, Yuval Yarom, Tom Chothia, and Gernot Heiser. "Time Protection: The Missing OS Abstraction." In *EuroSys*, pages 1:1–1:17, 2019.

18. Daniel Genkin, Lev Pachmanov, Eran Tromer, and Yuval Yarom. "Drive-by Key-Extraction Cache Attacks from Portable Code." In *ACNS*, pages 83–102, 2018.

19. Daniel Genkin, Romain Poussier, Rui Qi Sim, Yuval Yarom, and Yuanjing Zhao. "Cache vs. Key-Dependency: Side Channeling an Implementation of Pilsung." *IACR Trans. Cryptogr. Hardw. Embed. Syst.*, 2020(1): 231–255, 2020.

20. Ben Gras, Kaveh Razavi, Erik Bosman, Herbert Bos, and Cristiano Giuffrida. "ASLR on the Line: Practical Cache Attacks on the MMU." In *NDSS*, 2017.

21. Ben Gras, Kaveh Razavi, Herbert Bos, and Cristiano Giuffrida. "Translation Leak-Aside Buffer: Defeating Cache Side-Channel Protections with TLB Attacks." In *USENIX Security*, pages 955–972, 2018.

22. Daniel Gruss, David Bidner, and Stefan Mangard. "Practical Memory Deduplication Attacks in Sandboxed JavaScript." In *ESORICS*, pages 108–122, 2015.

23. Daniel Gruss, Raphael Spreitzer, and Stefan Mangard. "Cache Template Attacks: Automating Attacks on Inclusive Last-Level Caches." In *USENIX Security*, pages 897–912, 2015.

24. Daniel Gruss, Clémentine Maurice, and Stefan Mangard. "Rowhammer.js: A Remote Software-Induced Fault Attack in JavaScript." In *DIMVA*, pages 300–321, 2016.

25. Daniel Gruss, Clémentine Maurice, Klaus Wagner, and Stefan Mangard. "Flush+Flush: A Fast and Stealthy Cache Attack." In *DIMVA*, pages 279–299, 2016.

26. David Gullasch, Endre Bangerter, and Stephan Krenn. "Cache Games – Bringing Access-Based Cache Attacks on AES to Practice." In *IEEE SP*, pages 490–505, 2011.

27. Berk Gülmezoglu, Andreas Zankl, M. Caner Tol, Saad Islam, Thomas Eisenbarth, and Berk Sunar. "Undermining User Privacy on Mobile Devices Using AI." In *AsiaCCS*, pages 214–227, 2019.

28. Andrew Hintz. "Fingerprinting Websites Using Traffic Analysis." In *Privacy Enhancing Technologies*, 2002.

29. Wei-Ming Hu. "Reducing Timing Channels with Fuzzy Time." In *IEEE SP*, pages 8–20, 1991.

30. Ralf Hund, Carsten Willems, and Thorsten Holz. "Practical Timing Side Channel Attacks Against Kernel Space ASLR." In *IEEE SP*, pages 191–205, 2013.

31. Mehmet Sinan Inci, Berk Gülmezoglu, Gorka Irazoqui, Thomas Eisenbarth, and Berk Sunar. "Cache Attacks Enable Bulk Key Recovery on the Cloud." In *CHES*, pages 368–388, 2016.

32. Marc Juárez, Sadia Afroz, Gunes Acar, Claudia Díaz, and Rachel Greenstadt. "A Critical Evaluation of Website Fingerprinting Attacks." In *CCS*, pages 263–274, 2014.

33. Hyungsub Kim, Sangho Lee, and Jong Kim. "Inferring Browser Activity and Status Through Remote Monitoring of Storage Usage." In *ACSAC*, 2016.

34. Taesoo Kim, Marcus Peinado, and Gloria Mainar-Ruiz. "STEALTHMEM: System-Level Protection Against Cache-Based Side Channel Attacks in the Cloud." In *USENIX Security Symposium*, pages 189–204. USENIX Association, 2012.

35. Paul Kocher, Jann Horn, Anders Fogh, Daniel Genkin, Daniel Gruss, Werner Haas, Mike Hamburg, Moritz Lipp, Stefan Mangard, Thomas Prescher, Michael Schwarz, and Yuval Yarom. "Spectre Attacks: Exploiting Speculative Execution." In *IEEE SP*, pages 1–19, 2019.

36. David Kohlbrenner and Hovav Shacham. "Trusted Browsers for Uncertain Times." In *USENIX Sec*, pages 463–480, 2016.

37. Erick Lavoie, Bruno Dufour, and Marc Feeley. "Portable and Efficient Run-Time Monitoring of JavaScript Applications Using Virtual Machine Layering." In *ECOOP 2014*, pages 541–566, 2014.

38. Sangho Lee, Ming-Wei Shih, Prasun Gera, Taesoo Kim, Hyesoon Kim, and Marcus Peinado. "Inferring Fine-Grained Control Flow Inside SGX Enclaves with Branch Shadowing." In *USENIX Security*, pages 557–574, 2017.

39. Jochen Liedtke, Hermann Härtig, and Michael Hohmuth. "OS-Controlled Cache Predictability for Real-Time Systems." In *RTAS*, pages 213–224, 1997.

40. Moritz Lipp, Daniel Gruss, Raphael Spreitzer, Clémentine Maurice, and Stefan Mangard. "ARMageddon: Cache Attacks on Mobile Devices." In *USENIX Security*, pages 549–564, 2016.

41. Moritz Lipp, Daniel Gruss, Michael Schwarz, David Bidner, Clémentine Maurice, and Stefan Mangard. "Practical Keystroke Timing Attacks in Sandboxed JavaScript." In *ESORICS (2)*, pages 191–209, 2017.

42. Moritz Lipp, Michael Schwarz, Daniel Gruss, Thomas Prescher, Werner Haas, Anders Fogh, Jann Horn, Stefan Mangard, Paul Kocher, Daniel Genkin, Yuval Yarom, and Mike Hamburg. "Meltdown: Reading Kernel Memory from User Space." In *USENIX Security*, pages 973–990, 2018.

43. Fangfei Liu, Yuval Yarom, Qian Ge, Gernot Heiser, and Ruby B. Lee. "Last-Level Cache Side-Channel Attacks Are Practical." In *IEEE SP*, pages 605–622, 2015.

44. Fangfei Liu, Qian Ge, Yuval Yarom, Frank McKeen, Carlos V. Rozas, Gernot Heiser, and Ruby B. Lee. "CATalyst: Defeating Last-Level Cache Side Channel Attacks in Cloud Computing." In *HPCA*, pages 406–418, 2016.

45. Giorgio Maone. "NoScript." https://noscript.net.

46. Mathias Bynens. "Elements Kinds in V8." https://v8.dev/blog/elements-kinds, 2017.

47. Nikolay Matyunin, Yujue Wang, Tolga Arul, Kristian Kullmann, Jakub Szefer, and Stefan Katzenbeisser. "MagneticSpy: Exploiting Magnetometer in Mobile Devices for Website and Application Fingerprinting." In *WPES*, pages 135–149, 2019.

48. Clémentine Maurice, Christoph Neumann, Olivier Heen, and Aurélien Francillon. "C5: Cross-Cores Cache Covert Channel." In *DIMVA*, pages 46–64, 2015.

49. Arvind Narayanan, Hristo Paskov, Neil Zhenqiang Gong, John Bethencourt, Emil Stefanov, Eui Chul Richard Shin, and Dawn Song. "On the Feasibility of Internet-Scale Author Identification." In *IEEE SP*, pages 300–314, 2012.

50. Rom Ogen, Kfir Zvi, Omer Shwartz, and Yossi Oren. "Sensorless, Permissionless Information Exfiltration with Wi-Fi Micro-Jamming." In *WOOT*, 2018.

51. Yossef Oren, Vasileios P. Kemerlis, Simha Sethumadhavan, and Angelos D. Keromytis. "The Spy in the Sandbox: Practical Cache Attacks in JavaScript and Their Implications." In *CCS*, pages 1406–1418, 2015.

52. Dag Arne Osvik, Adi Shamir, and Eran Tromer. "Cache Attacks and Countermeasures: The Case of AES." In *CT-RSA*, pages 1–20, 2006.

53. Andriy Panchenko, Lukas Niessen, Andreas Zinnen, and Thomas Engel. "Website Fingerprinting in Onion Routing Based Anonymization Networks." In *WPES*, pages 103–114, 2011.

54. Colin Percival. "Cache Missing for Fun and Profit." In *BSDCan 2005*. URL: http://css.csail.mit.edu/6.858/2014/readings/ht-cache.pdf, 2005.

55. Moinuddin K. Qureshi. "CEASER: Mitigating Conflict-Based Cache Attacks via Encrypted-Address and Remapping." In *MICRO*, pages 775–787, 2018.

56. Moinuddin K. Qureshi, Aamer Jaleel, Yale N. Patt, Simon C. Steely Jr., and Joel S. Emer. "Set-Dueling-Controlled Adaptive Insertion for High-Performance Caching." *IEEE Micro*, 28(1): 91–98, 2008.

57. Vera Rimmer, Davy Preuveneers, Marc Juárez, Tom van Goethem, and Wouter Joosen. "Automated Website Fingerprinting Through Deep Learning." In *NDSS*, 2018.

58. Thomas Ristenpart, Eran Tromer, Hovav Shacham, and Stefan Savage. "Hey, You, Get Off of My Cloud: Exploring Information Leakage in Third-Party Compute Clouds." In *CCS*, pages 199–212, 2009.

59. Eyal Ronen, Robert Gillham, Daniel Genkin, Adi Shamir, David Wong, and Yuval Yarom. "The 9 Lives of Bleichenbacher’s CAT: New Cache Attacks on TLS Implementations." In *IEEE SP*, pages 435–452, 2019.

60. Michael Schwarz, Clémentine Maurice, Daniel Gruss, and Stefan Mangard. "Fantastic Timers and Where to Find Them: High-Resolution Microarchitectural Attacks in JavaScript." In *Financial Cryptography and Data Security*, pages 247–267, 2017.

61. Michael Schwarz, Moritz Lipp, and Daniel Gruss. "JavaScript Zero: Real JavaScript and Zero Side-Channel Attacks." In *NDSS*, 2018.

62. Jicheng Shi, Xiang Song, Haibo Chen, and Binyu Zang. "Limiting Cache-Based Side-Channel in Multi-Tenant Cloud Using Dynamic Page Coloring." In *DSN Workshops*, pages 194–199. IEEE Computer Society, 2011.

63. Anatoly Shusterman, Lachlan Kang, Yarden Haskal, Yosef Meltser, Prateek Mittal, Yossi Oren, and Yuval Yarom. "Robust Website Fingerprinting Through the Cache Occupancy Channel." In *USENIX Security*, pages 639–656, 2019.

64. Paul Stone. "Pixel Perfect Timing Attacks with HTML5." https://www.contextis.com/media/downloads/Pixel_Perfect_Timing_Attacks_with_HTML5_Whitepaper.pdf, 2013.

65. The Tor Project, Inc. "The Tor Browser." https://www.torproject.org/projects/torbrowser.html.en.

66. Tom Van Goethem, Wouter Joosen, and Nick Nikiforakis. "The Clock Is Still Ticking: Timing Attacks in the Modern Web." In *ACSAC*, pages 1382–1393, 2015.

67. Bhanu C. Vattikonda, Sambit Das, and Hovav Shacham. "Eliminating Fine-Grained Timers in Xen." In *CCSW*, pages 41–46, 2011.

68. Pepe Vila and Boris Köpf. "Loophole: Timing Attacks on Shared Event Loops in Chrome." In *USENIX Sec*, pages 849–864, 2017.

69. W3C. "WebAssembly JavaScript Interface." https://webassembly.github.io/spec/js-api/index.html, 2020.

70. Daimeng Wang, Zhiyun Qian, Nael B. Abu-Ghazaleh, and Srikanth V. Krishnamurthy. "PAPP: Prefetcher-Aware Prime and Probe Side-Channel Attack." In *DAC*, page 62, 2019.

71. Zhenghong Wang and Ruby B. Lee. "New Cache Designs for Thwarting Software Cache-Based Side Channel Attacks." In *ISCA*, pages 494–505, 2007.

72. Mario Werner, Thomas Unterluggauer, Lukas Giner, Michael Schwarz, Daniel Gruss, and Stefan Mangard. "ScatterCache: Thwarting Cache Attacks via Cache Set Randomization." In *USENIX Security*, pages 675–692, 2019.

73. Mengjia Yan, Christopher W. Fletcher, and Josep Torrellas. "Cache Telepathy: Leveraging Shared Resource Attacks to Learn DNN Architectures." In *USENIX Security*, 2020.

74. Yuval Yarom and Katrina Falkner. "Flush+Reload: A High-Resolution, Low-Noise, L3 Cache Side-Channel Attack." In *USENIX Security*, pages 719–732, 2014.

75. Yuval Yarom, Qian Ge, Fangfei Liu, Ruby B. Lee, and Gernot Heiser. "Mapping the Intel Last-Level Cache." *IACR Cryptology ePrint Archive* 2015/905, 2015.

76. Yuval Yarom, Daniel Genkin, and Nadia Heninger. "CacheBleed: A Timing Attack on OpenSSL Constant Time RSA." In *CHES*, pages 346–367, 2016.

77. Andy B. Yoo, Morris A. Jette, and Mark Grondona. "SLURM: Simple Linux Utility for Resource Management." In *Job Scheduling Strategies for Parallel Processing*, pages 44–60. Springer Berlin Heidelberg, 2003.

78. Boris Zbarsky. "Clamp the Resolution of performance.now() Calls to 5us." https://hg.mozilla.org/integration/mozilla-inbound/rev/48ae8b5e62ab, 2015.

79. Xiaokuan Zhang, Yuan Xiao, and Yinqian Zhang. "Return-Oriented Flush-Reload Side Channels on ARM and Their Implications for Android Devices." In *CCS*, pages 858–870, 2016.

80. Yinqian Zhang, Ari Juels, Michael K. Reiter, and Thomas Ristenpart. "Cross-VM Side Channels and Their Use to Extract Private Keys." In *CCS*, pages 305–316, 2012.

### Machine Learning Model

Our machine learning classifier receives a side-channel trace as input and outputs a probability distribution over 100 potential websites. Before feeding the trace to the model, the input vector is normalized between 0 and 1. We used a deep learning network for our analysis, which means that feature extraction is performed within the neural network, eliminating the need for additional preprocessing steps. The hyperparameters of the deep learning model are presented in Table 7.

The model begins with a convolution layer, which learns the unique patterns of each label. This is followed by a Max-Pooling layer, which reduces the dimensionality of the output from the previous layer. The output of the Max-Pooling layer is then reshaped into a one-dimensional vector and fed into a Long Short-Term Memory (LSTM) layer, which extracts temporal features from its input. Finally, the output layer of the network is a fully-connected layer with a softmax activation function.

The model was evaluated on a test set whose traces were not part of the training set. The metric used for evaluation is accuracy, defined as the probability of a trace being classified correctly. To avoid overfitting, we employed 10-fold cross-validation, a method that divides the dataset into 10 parts. Each part serves as the test set while the others are used as the training set. Each training set is fed to a different model, and the evaluation is made on the corresponding test set. After each experiment, we noted the average cross-fold accuracy and the standard deviation between folds.

The output of our classifier is not just the label of the most probable class but a complete probability distribution over all possible labels. This flexibility allows us to capture scenarios where the attacker has some prior knowledge of the victim and expectations about the websites they may be browsing. To do this, we consider not only the top-rated label but also the next few most probable predictions. This methodology has been used in similar works where low-accuracy classifiers were evaluated [12, 55]. We calculated not only the raw accuracy but also the probability that the correct prediction is among the top 5 websites output as the most probable by the classifier. The base accuracy rate of this prediction method, as obtained by a random classifier with no knowledge of the traces, is 5%.

The machine learning model was implemented in Python version 3.6 using the TensorFlow library version 1.4. The model training algorithms were run on a cluster of Nvidia GTX1080 and GTX2080 graphics processing units (GPUs), managed by the Slurm workload manager version 19.05.4.

### Table 7: Hyperparameters for the Deep Learning Classifier

| **Hyperparameter**         | **Value**                                                                 |
|----------------------------|---------------------------------------------------------------------------|
| Optimizer                  | Adam                                                                      |
| Learning Rate              | 0.001                                                                     |
| Batch Size                 | 128                                                                       |
| Training Epoch             | Early stop by validation accuracy                                         |
| Input Units                | Vector size of the 30 seconds input                                       |
| Convolution Layers         | 2                                                                         |
| Convolution Activation     | ReLU                                                                      |
| Convolution Kernels        | 256                                                                       |
| Convolution Kernel Size    | 16, 8                                                                     |
| Pool Size                  | 4                                                                         |
| LSTM Activation            | Tanh                                                                      |
| LSTM Units                 | 32                                                                        |
| Dropout                    | 0.7                                                                       |

---

This optimized text provides a clearer, more structured, and professional presentation of the references and the machine learning model description.