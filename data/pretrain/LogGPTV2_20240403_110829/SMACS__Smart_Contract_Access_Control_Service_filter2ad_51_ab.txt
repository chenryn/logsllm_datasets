### Access Permissions for Clients in SMACS-Enabled Smart Contracts

**Clients** are users who seek to access the resources (e.g., data, methods) of SMACS-enabled smart contracts. To gain access, a client must first obtain a token with the appropriate permissions from the Token Service (TS).

### Goals

The design of SMACS is guided by the following objectives:

1. **Security**: We assume that an adversary cannot compromise the underlying cryptographic primitives (e.g., signatures, hash functions) and the runtime environment of the deployed smart contract platform. However, we consider an adversary capable of reversing the blockchain history (i.e., launching a 51% attack). Under these assumptions, SMACS should prevent unauthorized entities from accessing SMACS-enabled smart contracts. When an entity is authorized, its behavior must align with the granted permissions. Additionally, SMACS should counter certain runtime attacks even if the underlying smart contracts are vulnerable.

2. **Flexibility and Extensibility**: The SMACS framework should support the definition of complex and fine-grained Access Control Rules (ACRs) for smart contracts while keeping the contracts simple. It should allow dynamic management of these rules (adding, removing, or modifying them) without updating the contracts. Furthermore, it should be easy to extend SMACS by integrating various smart contract protection techniques.

3. **Efficiency and Low Cost**: SMACS should operate efficiently, avoiding bottlenecks in throughput, storage, and latency. The cost of applying SMACS, including storage, computation, and blockchain-related fees, should be minimized. The process of integrating and deploying SMACS-enabled smart contracts should be straightforward and intuitive, not requiring significant development effort or cost.

### Overview

In the SMACS framework, the owner generates a public and private key pair (pkTS, skTS) and preloads the Token Service (TS) with skTS and an initial set of ACRs (or token issuing rules). The private key skTS is used by the TS to sign issued tokens, while the ACRs define the conditions under which tokens can be issued. The owner also creates the SMACS-enabled smart contract with the public key pkTS preloaded. The smart contract verifies the validity of incoming call tokens using pkTS before execution.

Although tokens in SMACS can vary in type and issuance logic, the smart contracts remain simple, implementing only basic access control verification. The main overheads introduced by SMACS are:
- Storing a public key
- Parsing a token
- Signature verification per call

Memory-consuming and computationally heavy operations are offloaded to the off-chain TS. ACRs are initialized in the TS and can be dynamically updated by the owner. Before accessing the SMACS-enabled smart contract, a client must request a token with compatible permissions from the TS. Upon receiving the request, the TS checks it against the ACRs. If the request is valid, the TS issues a token by signing a datagram formed from the request and metadata. The client then constructs a transaction with the token encoded, ensuring it is compatible with the previous request. Any modification to the transaction will cause signature verification to fail.

### Detailed Architecture

The detailed architecture of SMACS is illustrated in Figure 1. The owner and clients interact with SMACS-enabled contracts via client-side software (typically a wallet). The TS consists of:
- A front-end web interface
- An access granting module that checks rule compliance and issues tokens
- A validation module with verification tools and respective rules

The owner and clients interact with the TS through an HTTPS-enabled web interface. Access control is ultimately enforced by controlling token issuance.

### Token Types

SMACS supports three types of tokens with different permission semantics:

1. **Super Token**: Grants the highest level of permission, allowing a client to call all public methods of the smart contract with arbitrary arguments until the token expires.
2. **Method Token**: Limits access to a specific method. The client can call the associated method with arbitrary arguments until the token expires.
3. **Argument Token**: Similar to a method token but restricts the method to be called with specific arguments.

All tokens have an expiration time set by the TS, determining their lifetime. Tokens can also have a one-time property, invalidating them after a single use.

### Token Issuance and Verification

There are two verification processes in SMACS:
1. **Token Issuance**: A client sends a token request to the TS, specifying the intended type and a compatible reqPayload. The TS verifies the request against the ACRs and issues a token if the request is valid.
2. **Contract-side Verification**: The client constructs a transaction with the token and other necessary information. The smart contract extracts the token, checks its expiration and one-time property, and verifies the signature. Only after successful verification does the contract execute the transaction.

### One-time Tokens

One-time tokens ensure that a token can be used only once, which is particularly useful for sensitive operations. The reused() check ensures that a one-time token is not used more than once.

### Example Transformation

To facilitate adoption, we provide a tool to transform legacy smart contracts into SMACS-enabled smart contracts. For example, the transformation of a legacy contract into a SMACS-enabled contract is shown in Figure 4. Public and external methods are modified to include a token argument and a verify call before the actual method body.

```solidity
// Legacy Contract
contract Legacy { 
  function f() external { 
    h(); 
    g(); 
  } 
  function h() public { 
    g(); 
    // ... 
  } 
  function g() private { 
    // ... 
  } 
}

// SMACS-Enabled Contract
contract SMACS { 
  function f(bytes memory token) external { 
    require(verify(token), "Invalid token");
    _h();
    g(); 
  } 
  function h(bytes memory token) public { 
    require(verify(token), "Invalid token");
    _h(); 
  } 
  function _h() private { 
    g(); 
    // ... 
  } 
}
```

This transformation ensures that all public and external methods verify the token before execution, maintaining the security and access control provided by SMACS.