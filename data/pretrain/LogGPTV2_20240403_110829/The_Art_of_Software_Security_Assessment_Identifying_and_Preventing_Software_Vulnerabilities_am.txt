The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
102 
"Ah, my ridiculously circuitous plan is one quarter complete!" 
Robot Devil, Futurama 
6.4.1 Introduction 
You no doubt purchased this book with the expectation of delving into the technical 
details of application security vulnerabilities, but first you need to understand the 
process of application review and its logistical and administrative details. After all, 
technical prowess doesn't matter if a review is structured so poorly that it neglects the 
important application attack surface and vulnerable code paths. Having some degree 
of structured process in planning and carrying out an application assessment is 
essential. Of course, your review may have some unique requirements, but this 
chapter gives you a framework and tools you can adapt to your own process. By 
incorporating these elements, you should be able to get the best results for the time 
you invest in any application review. 
6.4.2 Overview of the Application Review Process 
Conducting an application security review can be a daunting task; you're presented 
with a piece of software you aren't familiar with and are expected to quickly reach a 
zenlike communion with it to extract its deepest secrets. You must strike a balance in 
your approach so that you uncover design, logic, operational, and implementation 
flaws, all of which can be difficult to find. Of course, you will rarely have enough time 
to review every line of an application. So you need understand how to focus your 
efforts and maintain good coverage of the most security-relevant code. 
Rationale 
To be successful, any process you adopt must be pragmatic, flexible, and results 
driven. A rigid methodology that provides a reproducible detailed step-by-step 
procedure is definitely appealing, especially for people trying to manage code reviews 
or train qualified professionals. For a number of reasons, however, such a rigid 
approach isn't realistic. It's borne out of a fundamental misunderstanding of code 
review because it overlooks two simple truths. The first is that code review is a 
fundamentally creative process. 
It might seem as though this point couldn't possibly be true because reading other 
people's code doesn't seem particularly creative. However, to find vulnerabilities in 
applications, you must put yourself in the developer's shoes. You also need to see the 
unexpressed possibilities in the code and constantly brainstorm for ways that 
unexpected things might happen. 
The second truth is that code review is a skill. Many people assume that code review 
is strictly a knowledge problem. From this perspective, the key to effective code 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
103 
review is compiling the best possible list of all things that could go wrong. This list is 
certainly an important aspect of code review, but you must also appreciate the 
considerable skill component. Your brain has to be able to read code in a way that you 
can infer the developer's intentions yet hypothesize ways to create situations the 
developer didn't anticipate. 
Furthermore, you have to be proficient and flexible with programming languages so 
that you can feel at home quickly in someone else's application. This kind of aptitude 
takes years to develop fully, much like learning a foreign language or playing a 
musical instrument. There's considerable overlap with related skills, such as 
programming, and other forms of systems security analysis, but this aptitude has 
unique elements as well. So it's simply unrealistic to expect even a seasoned 
developer to jump in and be a capable auditor. 
Accepting these truths, having a process is still quite valuable, as it makes you more 
effective. There's a lot to be done in a typical security review, and it's easy to overlook 
tasks when you're under a time crunch. A process gives your review structure, which 
helps you prioritize your work and maintain a consistent level of thoroughness in your 
analysis. It also makes your assessments approachable from a business perspective, 
which is critical when you need to integrate your work with timelines and consulting 
or development teams. 
Process Outline 
The review process described in this chapter is open ended, and you can adapt it as 
needed for your own requirements. This discussion should arm you with the tools and 
knowledge you need to do a formal review, but it's left flexible enough to handle 
real-world application assessments. This application review process is divided into 
four basic phases: 
1. Preassessment This phase includes planning and scoping an application 
review, as well as collecting initial information and documentation. 
2. Application review This phase is the primary phase of the assessment. It can 
include an initial design review of some form, and then proceed to a review of 
the application code, augmented with live testing, if appropriate. The review 
isn't rigidly structured into distinct design, logic, implementation, and 
operational review phases. Instead, these phases are simultaneous objectives 
reached by using several strategies. The reason for this approach is simply 
that the assessment team learns a great deal about the application over the 
course of the assessment. 
3. Documentation and analysis This phase involves collecting and documenting 
the results of the review as well as helping others evaluate the meaning of the 
results by conducting risk analysis and suggesting remediation methods and 
their estimated costs. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
104 
4. Remediation support This phase is a follow-up activity to assist those who 
have to act based on your findings. It includes working with developers and 
evaluating their fixes or possibly assisting in reporting any findings to a third 
party. 
This process is intended to apply to reviews that occur with some form of schedule, 
perhaps as part of a consulting engagement, or reviews of an in-house application by 
developers or security architects. However, it should be easy to apply to more 
free-form projects, such as an open-ended, ongoing review of an in-house application 
or self-directed vulnerability research. 
6.4.3 Preassessment 
Before you perform the actual review, you need to help scope and plan the 
assessment. This process involves gathering key pieces of information that assist you 
in later phases of your review. By gathering as much information as you can before 
starting the assessment, you can construct a better plan of attack and achieve more 
thorough coverage. 
Scoping 
When tasked with an application security review, first you need to ask what your goal 
is. This question might seem simple, but numerous answers are possible. Generally, 
a vulnerability researcher's goal is to find the most significant vulnerability in the 
shortest time. In contrast, an application security consultant is usually concerned 
with getting the best application coverage the project's budget allows. Finally, a 
developer or security architect might have a more generous schedule when 
conducting internal reviews and use that time to be as thorough as possible. 
The goal of a review might also be heavily colored by business concerns or less 
tangible factors, such as company image. A company certainly isn't inclined to devote 
extensive time to a product that's close to or even past its end of life (EOL). However, 
a review might be required to meet regulatory concerns. That same company might 
also want a thorough review of its newest flagship financial management application. 
When businesses commit to more thorough reviews, often you find that their 
interests aren't what you expect. A business is sometimes more concerned with 
easy-to-detect issues, regardless of their severity. Their goal is more to avoid the 
negative stigma of a published security issue than to address the ultimate technical 
security of their product or service. So you aren't meeting your client's (or employer's) 
needs if you spend all your time on complex issues and miss the low-risk but obvious 
ones. Focusing on low-risk issues seems like blasphemy to most technical security 
people, but it's often a reasonable business decision. For example, assume you're 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
105 
performing a source-code-based assessment on a bank's Web-facing account 
management application. What is the likelihood of someone blindly finding a subtle 
authentication bypass that you found only by tracing through the source code 
carefully? In contrast, think of how easily an attacker can find cross-site scripting 
vulnerabilitiesjust with normal user access. So which issue do you think is more likely 
to be identified and leveraged by a third party? The obvious answer is cross-site 
scripting vulnerabilities, but that's not what many auditors go after because they 
want to focus on the more interesting vulnerabilities. 
That's not to say you should ignore complex issues and just get the easy stuff. After 
all, that advice would make this book quite short. However, you need to understand 
the goals of your review clearly. You also need to have an appreciation for what you 
can reasonably accomplish in a given timeframe and what confidence you can have in 
your results. These details are influenced by two major factors: the type of access you 
have to the application and the time you have available for review. 
Application Access 
Application access is divided into the five categories listed in Table 4-1. These 
distinctions are not, of course, absolute. There are always minor variations, such as 
limited source access or inconsistencies between test environments and deployment 
environments. However, these distinctions work well enough to cover most 
possibilities. 
Table 4-1. Categories of Application Access 
Category 
Description 
Source only 
Only the source code has been supplied, with no build environment or 
application binaries. You might be able to build a working binary with 
some effort, although some required components typically aren't 
available. As a result, the review is generally done using only static 
analysis. This type of access is common for contracted application 
reviews, when the client can provide source but not a functional build 
or testing environment. 
Binary only 
Application binaries have been supplied, but no source code is 
provided. The application review focuses on live analysis and reverse 
engineering. This type of access is common when performing 
vulnerability research on closed-source commercial software. 
Both source 
and binary 
access 
Both a source tree and access to a working application build are 
available. This type of access provides the most efficient review 
possible. It's most common for in-house application assessments, 
although security- and cost- conscious clients provide this access for 
contracted reviews, too. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
106 
Table 4-1. Categories of Application Access 
Category 
Description 
Checked 
build 
You have an application binary and no source code, but the application 
binary has additional debugging information. This approach is often 
taken for contracted code reviews when a client is unwilling to provide 
source but does want to expedite the review process somewhat. 
Strict black 
box 
No direct access to the application source or binary is available. Only 
external, blind testing techniques, such as black box and fuzz- testing, 
are possible with this type of access. It's common when assessing 
Web applications (discussed more in Chapter 17(? [????.]), "Web 
Applications"). 
This book focuses primarily on source-code-based application review. Although the 
techniques discussed in this chapter can be applied to other types of reviews, more 
information is generally better. The ideal assessment environment includes 
source-based analysis augmented with access to functioning binaries and a live QA 
environment (if appropriate). This environment offers the widest range of 
assessment possibilities and results in the most time-effective review. The remaining 
types of access in Table 4-1 are all viable techniques, but they generally require more 
time for the same degree of thoroughness or have an upper limit on the degree of 
thoroughness you can reasonably hope to achieve. 
Timelines 
In addition to application access, you need to determine how much time can be 
allotted to a review. The timeline is usually the most flexible part of a review, so it's 
a good way to adjust the thoroughness. The most commonly used measure of 
application size is thousands of lines of code (KLOC). It's not an ideal way to measure 
an application's complexity and size, but it's a reasonable metric for general use. A 
good reviewer ranges between 100 to 1,000 lines of code an hour, depending on 
experience and details of the code. The best way to establish an effective baseline for 
yourself is to keep track of how much time you spend reviewing different components 
and get a feel for your own pacing. 
Code type and quality have a big impact on your review speed. Languages such as 
C/C++ generally require close examination of low-level details because of the subtle 
nature of many flaws. Memory-safe languages, such as Java, address some of these 
issues, but they might introduce higher-level complexity in the form of expansive 
class hierarchies and excessive layering of interfaces. Meanwhile, the quality of 
internal documentation and comments is a language-independent factor that can 
seriously affect your review pacing. For this reason, you should look at some samples 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
107 
of the application code before you attempt to estimate for your pace for a specific 
codebase. 
Overall code size affects the pace at which you can effectively review an application. 
For instance, reviewing a 100KLOC application doesn't usually take twice as much 
time as a 50KLOC application. The reason is that the first 50KLOC give you a feel for 
the code, allow you to establish common vulnerability patterns, and let you pick up on 
developer idioms. This familiarity enables you to review the remainder of the 
application more efficiently. So be sure to account for these economies of scale when 
determining your timelines. 
In the end, balancing coverage with cost is usually the ultimate factor in determining 
your timeline. In a perfect world, every application should be reviewed as thoroughly 
as possible, but this goal is rarely feasible in practice. Time and budgetary constraints 
force you to limit the components you can review and the depth of coverage you can 
devote to each component. Therefore, you need to exercise considerable judgment in 
determining where to focus your efforts. 
Information Collection 
The first step in reviewing an application is learning about the application's purpose 
and function. The discussion of threat modeling in Chapter 2(? [????.]) included a 
number of sources for information collection. This component of your review should 
encapsulate that portion of the threat model. To recap, you should focus on collecting 
information from these sources: 
Developer interviews 
Developer documentation 
Standards documentation 
Source profiling 
System profiling 
6.4.4 Application Review 
People's natural inclination when approaching code review is to try to structure it like 
a waterfall-style development process. This means starting with a structured design 
review phase and adhering to a formal process, including DFDs and attack trees. This 
type of approach should give you all the information you need to plan and perform an 
effective targeted review. However, it doesn't necessarily result in the most 
time-effective identification of high and intermediate level design and logic 
vulnerabilities, as it overlooks a simple fact about application reviews: The time at 
which you know the least about an application is the beginning of the review. 
This statement seems obvious, but people often underestimate how much one learns 
over the course of a review; it can be a night and day difference. When you first sit 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
108 
down with the code, you often can't see the forest for the trees. You don't know where 
anything is, and you don't know how to begin. By the end of a review, the application 
can seem almost like a familiar friend. You probably have a feel for the developers' 
personalities and can identify where the code suffers from neglect because everyone 
is afraid to touch it. You know who just read a book on design patterns and decided to 
build the world's most amazing flexible aspect-oriented turbo-logging engineand you 
have a good idea which developer was smart enough to trick that guy into working on 
a logging engine. 
The point is that the time you're best qualified to find more abstract design and logic 
vulnerabilities is toward the end of the review, when you have a detailed knowledge 
of the application's workings. A reasonable process for code review should capitalize 
on this observation. 
A design review is exceptional for starting the process, prioritizing how the review is 
performed, and breaking up the work among a review team. However, it's far from a 
security panacea. You'll regularly encounter situations, such as the ones in the 
following list, where you must skip the initial design review or throw out the threat 
model because it doesn't apply to the implementation: 
You might not have any design documentation to review. Unfortunately, this 
happens all the time. 
The design documentation might be so outdated that it's useless. 
Unfortunately, this happens all the time, tooparticularly if the design couldn't 
be reasonably implemented or simply failed to be updated with the ongoing 
application development. 
There might be a third party who doesn't want to give you access to design 
information for one reason or another (usually involving lawyers). 
The developers might not be available for various reasons. They might even 
consider you the enemy. 
Clients don't want to pay for a design review. This isn't a surprise, as clients 
rarely want to pay for anything. It's more or less up to you as a professional to 
make sure they get the best bang for their buckin spite of themselves. Time is 
expensive in consulting and development environments, so you'd better be 
confident that what you're doing is the best use of your time. 
Accepting all the preceding points, performing a design review and threat model first, 
whenever realistically possible, is still encouraged. If done properly, it can make the 
whole assessment go more smoothly. 
Avoid Drowning 
This process has been structured based on extensive experience in performing code 
reviews. Experienced auditors (your authors in particular) have spent years 
experimenting with different methodologies and techniques, and some have worked 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
109 
out better than others. However, the most important thing learned from that 
experience is that it's best to use several techniques and switch between them 
periodically for the following reasons: 
You can concentrate intensely for only a limited time. 
Different vulnerabilities are easier to find from different perspectives. 
Variety helps you maintain discipline and motivation. 
Different people think in different ways. 
Iterative Process 
The method for performing the review is a simple, iterative process. It's intended to 
be used two or three times over the course of a work day. Generally, this method 
works well because you can switch to a less taxing auditing activity when you start to 
feel as though you're losing focus. Of course, your work day, constitution, and 
preferred schedule might prompt you to adapt the process further, but this method 
should be a reasonable starting point. 
First, you start the application review with an initial preparation phase, in which you 
survey what information you have available, make some key decisions about your 
audit's structure, and perform design review if adequate documentation is available 
and you deem it to be time effective. After this initial phase, the cycle has three basic 
steps: 
1.  Plan Take some time to decide what you're going to do next. Select an auditing 
strategy; depending on the strategy, you might need to choose a goal or pick 
from a set of techniques. 
2.  Work Perform the auditing strategy you selected, taking extensive notes. 
3.  Reflect Take a moment to make sure you're managing your time well and are still 