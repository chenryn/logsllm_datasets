---
author: Chris Collins
category: 树莓派
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 10693
date: '2020-06-03 12:34:48'
editorchoice: false
excerpt: 使用树莓派或其它单板机创建一个“家庭私有云”。
fromurl: https://opensource.com/article/20/5/disk-image-raspberry-pi
id: 12277
islctt: true
largepic: /data/attachment/album/202006/03/123435csm7ys7mkbw7ggjy.jpg
permalink: /article-12277-1.html
pic: /data/attachment/album/202006/03/123435csm7ys7mkbw7ggjy.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 12371
reviewer: wxy
selector: lujun9972
summary: 使用树莓派或其它单板机创建一个“家庭私有云”。
tags:
- 树莓派
- 镜像
thumb: false
title: 修改磁盘镜像来创建基于树莓派的家庭实验室
titlepic: true
translator: robsean
updated: '2020-06-03 12:34:48'
---
> 
> 使用树莓派或其它单板机创建一个“家庭私有云”。
> 
> 
> 
![](/data/attachment/album/202006/03/123435csm7ys7mkbw7ggjy.jpg)
构建一个[家庭实验室](https://opensource.com/article/19/3/home-lab)可以是一个有趣的方式，可以让你学习的新概念和实验新技术时还能自娱自乐。得益于以 [树莓派](https://opensource.com/resources/raspberry-pi) 为首的单板计算机（SBC）的流行，在舒适的家里就可以轻松构建一个多计算机实验室。比起试图在主流的云服务商建立的相同配置，创建一个“家庭私有云”以花更少的钱来体验到云原生技术，也是一个极好的方法。
这篇文章阐述如何修改树莓派或其它的单板机的磁盘镜像，预配置主机的 SSH，并禁用首次启动时强制竞选交互配置的服务。这是一个让你的设备“即启动，即运行”的极好方法，类似于云端实例。之后，你可以使用自动化的流程通过 SSH 连接来进行更专业和更深入的配置。
此外, 当向你的实验室添加更多的树莓派时，修改磁盘镜像可以来让你只需要将该镜像写到一个 SD 卡、放入树莓派中就可以了！
![Multiple Raspberry Pi computers, a switch, and a power bank](/data/attachment/album/202006/03/123514of132e999i4nff2f.jpg "Multiple Raspberry Pi computers, a switch, and a power bank")
### 解压缩和挂载镜像
对于这个项目，你需要修改一个服务器磁盘镜像。在测试期间，我使用 [Fedora Server 31 ARM](https://arm.fedoraproject.org/)。在你下载该磁盘镜像并[验证其校验和](https://arm.fedoraproject.org/verify.html)之后，你需要将其解压缩并挂载其到宿主机的文件系统的某个位置上，以便你可以根据需要修改它。
你可以使用 [xz](https://tukaani.org/xz/) 命令通过 `--decompress` 参数来解压缩 Fedora 服务器镜像：
```
xz --decompress Fedora-Server-armhfp-X-y.z-sda.raw.xz
```
这会留下一个解压缩后的原始磁盘镜像（它会自动地替换 `.xz` 压缩文件）。这个原始磁盘镜像就像它听起来的那样：一个包含格式化后安装好的磁盘上的所有数据的文件。这包含分区信息、启动分区、root 分区以及其它分区。你需要挂载你打算在其中进行修改的分区，但是要做到这一点，你需要知道磁盘镜像中的分区起始位置和扇区大小，这样你才可以挂载该文件正确的扇区。
幸运的是，你可以在一个磁盘镜像上使用 [fdisk](https://en.wikipedia.org/wiki/Fdisk) 命令，就像在实际磁盘上使用一样容易。使用 `--list` 或 `-l` 参数来查看分区的列表和其信息：
```
# 使用 fdisk 来列出原始镜像文件的分区：
$ fdisk -l Fedora-Server-armhfp-31-1.9-sda.raw
Disk Fedora-Server-armhfp-X-y.z-sda.raw: 3.2 GiB, 3242196992 bytes, 6332416 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0xdaad9f57
Device                               Boot   Start     End Sectors  Size Id Type
Fedora-Server-armhfp-X-y.z-sda.raw1         8192  163839  155648   76M  c W95 F
Fedora-Server-armhfp-X-y.z-sda.raw2 *     163840 1163263  999424  488M 83 Linux
Fedora-Server-armhfp-X-y.z-sda.raw3      1163264 6047743 4884480  2.3G 83 Linux
```
你需要的所有信息都可在上面的输出中获得。第 3 行表示扇区大小（包括逻辑和物理的）：512 字节 / 512 字节。
设备列表显示的是原始磁盘镜像中的分区。第一个，`Fedora-Server-armhfp-X-y.z-sda.raw1` 毫无疑问是引导程序分区，因为它是第一个，很小（仅仅 76MB），而且类型被标识为 `c`，即 W95 FAT32（LBA），这是一个从 SD 卡启动的 FAT32 分区。
第二个分区也不是非常大，只有 488MB。这个分区是一个 Linux 原生类型分区（Id 83），它可能是包含内核和 [initramfs](https://wiki.debian.org/initramfs) 的 Linux 启动分区。
第三个分区可能是你需要的东西：它有 2.3GB 大小，所以在它其中应该有发行版的主要部分，并且它是一个 Linux 原生分区类型，这也是在预料之中的。这个分区应该包含了你需要修改的分区和数据。
第三个分区从扇区 1163264 开始（在 `fdisk` 的输出中被显示为 `Start` 列），所以你的挂载偏移量是 `595591168`，计算方法是将扇区大小（512）乘以起始扇区（1163264）（即 `512 * 1163264`）。这意味着你需要以偏移量 `595591168` 挂载该文件，才能挂载到正确位置。
装备了这些信息，现在你可以将第三个分区挂载到你的家目录中了：
```
$ mkdir ~/mnt
$ sudo mount -o loop,offset=595591168 Fedora-Server-armhfp-X-y.z-sda.raw ~/mnt
$ ls ~/mnt
```
### 直接在磁盘镜像中作业
在磁盘镜像被解压缩和被挂载到宿主机上的一个位置后，就可以修改镜像以符合你的需求。在我看来，对镜像进行更改的最简单的方法是使用 `chroot` 来将你会话的工作根目录更改为挂载镜像的工作根目录。不过，有点棘手。
在你改变了根目录后，你的会话将使用新的根目录下的二进制文件。除非你是在一个 ARM 系统做这些所有的操作，否则解压缩后的磁盘镜像的架构将与你正在使用的宿主机系统不同。即使在 chroot 环境中，宿主机系统也无法使用一个不同架构的二进制文件。至少，不能在本机使用。
幸运的是，这里有一个解决方案：qemu-user-static。来自 [Debian Wiki](https://wiki.debian.org/RaspberryPi/qemu-user-static) 的说明:
> 
> “[qemu-user-static] 提供了用户模式的仿真二进制文件，是静态构建的。在这个模式中，QEMU 可以在一个 CPU 上启动为另一个 CPU 编译的 Linux 进程 …… 如果安装了 binfmt-support 软件包，qemu-user-static 软件包会注册提供的仿真器可以处理的二进制文件格式，以便其能够直接运行其他架构的二进制文件。”
> 
> 
> 
这正是你需要在 chroot 环境中非本地架构中工作所需的。如果宿主机系统是 Fedora，使用 DNF 来安装 `qemu-user-static` 软件包，并重新启动 `systemd-binfmt.service`：
```
# 使用 DNF 启用非本地的 arch chroot 环境，添加新的二进制文件格式信息
# 输出镜像了精简
$ dnf install qemu-user-static
$ systemctl restart systemd-binfmt.service
```