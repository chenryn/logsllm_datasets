framing 
to 
USENIX Association  
24th USENIX Security Symposium  853
from casual activity to those associated with intentional 
actions. When all channels are used, the radio emissions 
from  the  buses  increase  (red)  in  comparison  to  the 
emissions from casual activity (blue). We observed an 
increase of at least 0.1 - 0.15 dB across the frequency 
band  750-1000MHz,  where  some  specific  sub-bands 
showed an increase of about 1 - 2.1dB. A full summary 
of  the  radio  emissions  of  different  motherboards  and 
memory technologies can be found in Table 3. 
Figure 3: A plot of the amplitude of the radio waves emitted 
from a motherboard with an 800MHz I/O bus using DDR3-
1600 RAM. Blue: casual use of the computer. Red: our 
transmission algorithm while using the dual channel data 
paths. 
Based on our experiments, we have found that the use 
of three or four channels increases amplitude emissions 
across nearly the entire band depicted in Figure 3. This 
means  that  as  the  memory  architectures  mature,  the 
quality  of  the  proposed  covert  channel  will  increase. 
Note 
the 
frequency  bands  of  GSM,  UMTS  and  LTE,  making 
them detectable by all modern basebands. 
these  radio  emissions  fall  within 
that 
I/O bus clock (𝒇𝒄) 
800MHz 
EMR Range 
600MHz-1100MHz 
Standard Name 
DDR3-1600 
DDR3-1866 
933MHz 
750MHz-1150MHz 
that 
is  assumed 
channel frequency, where most of the energy from the 
[43]. In other words, the time domain is partitioned into 
There  are  many  techniques  for  modulating  a  carrier 
wave to carry binary data. For simplicity and as a show 
of  feasibility,  we  use  a  variant  of  the  two  level 
amplitude shift keying (B-ASK) modulation; to send a 
‘1’ or ‘0’ the transmitter raises or lowers the amplitude 
modulation can be found in the band around 𝑓. 
of 𝑓 accordingly over set time intervals 𝑇 (in seconds) 
intervals  of  length 𝑇,  and  the  symbol  (i.e.,  signal 
amplitude)  that  corresponds  to  the  current  bit  is 
transmitted over that entire interval. Our variation of B-
ASK  is  that  ‘0’  is  not  represented  by  a  near  zero 
amplitude, but rather by the average level of the casual 
emissions.  It 
the  receiver  can 
differentiate between average and high emission levels 
(described in detail later in Section 6). The motherboard 
bus’s  radio  emissions  can  be  modulated  to  carry  a  B-
ASK signal in the following way: to transmit a ‘1’ all 
transmit a ‘0’ nothing special is done (casual emissions 
memory  channels  are  utilized  for 𝑇  seconds,  and  to 
are  emitted).  In  this  case, 𝑓  is  the  motherboard’s 
utilize multiple memory channels for 𝑇 seconds. To do 
memory clock. 
5.3.  Modulation Algorithm 
In order to transmit a ‘1’, it is necessary to consistently 
this we generate a long random data transfer from the 
CPU  to  the main memory  using the  single  instruction 
multiple  data  (SIMD)  instruction  set.  SIMD  utilizes 
special CPU registers of 64-bits and 128-bits in order to 
process  wider  chunks  of  data  in  a  single  instruction. 
SIMD  instructions  are  usually  used  for  vectorized 
calculations  such  as  2D/3D  graphics  processing,  and 
includes  instructions  to  load/store  data  between  the 
main memory and special registers. 
DDR4-2133 
1066MHz 
750MHz-943MHz 
(fragmented) 
1.04GHz-1.066GHz 
Table 3: Summary of radio emissions from different memory 
buses.  
5.2.  Signal Modulation 
In  communications,  modulation  is  the  process  where 
analog waveforms are varied to carry information over 
some medium. Typically, a carrier wave (for wireless a 
radio  wave  at  the  frequency 𝑓)  is  selected  as  the 
We  implemented  the  B-ASK  modulation  algorithm 
using the Streaming SIMD Extension (SSE) instruction 
set found in Intel and AMD CPUs. The SSE specifies a 
854  24th USENIX Security Symposium 
USENIX Association
implementation  of 
set  of  128-bit  (quadword)  registers  numbered  xmm0-
xmm16,  and  includes  a  group  of  instructions  for 
moving data between these xmm registers and the main 
memory  [44]  [45].  Using  these  instructions  it  is 
possible to instruct the CPU to utilize the multi-channel 
data paths, thereby amplifying the radio emissions. 
One  of  the  challenges  we  had  to  overcome  resulted 
from  the  use  of  the  CPU  caching  mechanisms.  When 
the  processor  employs  a  cache  hierarchy,  transferring 
data between xmm registers and the main memory does 
not guarantee any immediate activity over the bus. This 
inconsistency presents an issue regarding the use of the 
proposed  B-ASK  modulation,  since  the  symbols  must 
start and stop precisely within the symbol interval (𝑇).  
Beginning  with  SSE  version  2,  there  is  a  set  of 
instructions  that  enable  read/write  operations  directly 
to/from  the  main  memory,  while  bypassing  all  cache 
levels  (non-temporal).  Specifically,  we  use  the  Move 
Double  Quadword  Non-Temporal 
instruction, 
MOVNTDQ m128, xmm. The intent of this instruction 
is for copying double quadwords from the xmm register 
to  the  128-bit  memory  address,  while  minimizing 
pollution in the cache hierarchy. 
Our 
the  B-ASK  modulation 
(Algorithm  1)  works  in  the  following  way.  The 
transmit32() method receives the outbound binary as an 
array  of  32  bits.  A  temporary  buffer  of  4096  bytes 
(32x128)  is  allocated  on  the  heap  (lines  1-2)  as  a 
destination  for  the  MOVNTDQ  memory  operations. 
Note  that  the  allocated  memory  has  to  be  16-bytes 
aligned, as required for SSE memory operands.  Next, 
would  provide  a  faster  bit  transmission rate,  doing  so 
directly increases the error rate. For the tested Motorola 
C123  phone  with  the  Calypso  baseband,  a  value  of 
500ms appears to provide satisfying results. Basebands 
of modern smartphones are probably capable of higher 
sampling quality, and therefore might require a shorter 
on  line  2,  we  set 𝑇  to  500ms.  Although  a  shorter 𝑇 
T.  With  specialized receiver hardware,  setting 𝑇  to  1-
data  from  xmm  registers  to  the  heap,  until 𝑇  seconds 
the algorithm sleeps for 𝑇 seconds. 
10ms provided good reception quality (Section 6). 
The outer loop (line 3) iterates over the 32-bit array and 
performs the  memory  operations to generate the radio 
emissions.  When  the  current  bit  is  a  ‘1’  a  loop 
repeatedly  uses  the  MOVNTDQ  instruction  to  copy 
5.4.  Bit Framing 
As  mentioned  earlier,  when  our  variant  of  B-ASK 
modulates a ‘0’ the amplitude of the transmitted signal 
is  that  of  the  bus’s  average  casual  emissions,  and 
have elapsed. Conversely, when the current bit is a ‘0’ 
anything  significantly  higher  than  that  (by  some 
threshold) is  considered  a  ‘1’. This incurs  two  issues: 
(1) the receiver has no prior information as to what the 
optimum threshold should be making it difficult for the 
receiver  to  detect  activity  in  its  area,  and  (2)  the 
strength  of  amplitudes  surrounding 𝑓  is  dependent  on 
the  distance  between  the  transmitting  desktop  and the 
receiver; this means that if the mobile phone is moving 
during a transmission or other interference exists, a ‘1’ 
and ‘0’ can be decoded incorrectly. 
Therefore, in order to assist the receiver in dynamically 
synchronizing  with  the  transmitter,  we  place  the  data 
into  frames.  The  binary  stream  is  partitioned  into 
sequential  payloads  of  12  bits,  and  the  payloads  are 
transmitted  with  a  header  consisting  of  the  preamble 
sequence ‘1010’ (Table 4). The preamble is used by the 
receiver to determine when a frame is being transmitted 
and to determine the amplitude levels of a ‘1’ and a ‘0’. 
This  process  is  discussed  in  depth  in  Section  6.  The 
framing  process  takes  place  before  data  transmission. 
Once the frame has been built, it is passed to Algorithm 
1 as the outbound data. 
Payload 
Preamble 
12 bits 
Payload 
12 bits 
Table 4: The basic frame format used to send segments of a 
bit stream, using the transmit32() function. 
Preamble 
1010 
1010 
5.5.  Transmitter Stealth and Compatibility 
The transmitting program has a small memory and CPU 
footprint, making the activities of the transmitter easier 
to hide. In terms of memory consumption, the program 
consumes merely 4K of memory allocated on the heap. 
In terms of CPU intake, the transmitter runs on a single, 
independent  thread.  At  the  OS  level,  the  transmitting 
process  can  be  executed  with  no  elevated  privileges 
(e.g., root or admin). Finally, the code consists of bare 
CPU instructions, avoiding API calls to escape certain 
malware  scanners.  In  short,  the  transmission  code 
evades  common  security  mechanisms  such  as  API 
monitoring  and  resource  tracing,  making  it  hard  to 
detect. 
As  for  compatibility,  since  2004  SIMD  instructions 
have  been  available  for  x86-64  Intel  and  AMD 
processors [46] [47], making the transmission method is 
applicable  to  most  modern  workstations  and  servers. 
Similar instructions on IBM's Power architecture have 
been in place since Power ISA v.2.03 was initiated [48]. 
The  proposed  transmitter  has  been  implemented  and 
successfully 
tested  on  several  operating  systems, 
including  Microsoft  Windows  platform  (Windows  7, 
64bit),  Linux  Fedora  20  and  21  (64bit),  and  Ubuntu 
12.1 (64bit). 
USENIX Association  
24th USENIX Security Symposium  855
that 
under 
than  an 
and 
found 
receiver  component  by  modifying 
6.  The Receiver 
In this section we describe how a mobile phone in close 
proximity  to  a  transmitting  computer  can  successfully 
receive and decode emitted signals. We implement the 
GSMem 
the 
firmware of a mobile phone’s baseband. We present the 
receiver  architecture  and  implementation,  along  with 
decoding  mechanisms.  
the  modulation 
Interestingly,  we 
certain 
circumstances,  the  GSMem  signals  can  be  indirectly 
received  by  an  application  running  on  a  modern 
Android  smartphone  with  a  non-modified  baseband. 
This  optional  implementation  yields  rather  limited 
effective distance  of 10cm, and provides a  conceptual 
rather 
immediate  practical  contribution. 
Therefore, to stay in line with the core of this paper, the 
description  of  this  implementation  is  deferred  to 
Appendix A. 
6.1.  Receiver Implementation  
Reception of the transmitted data is accomplished in the 
following  manner:  (1)  sample  the  amplitude  of  the 
carrier wave, (2) performs noise mitigation, (3) search 
for  bit  frame  header  (preamble  detection),  and  (4) 
demodulate the frame’s payload. We will describe each 
of  these  steps  in  this  order  after  discussing  the 
implementation framework. 
6.1.1. 
Baseband Firmware 
As  discussed  in  Section  1,  the  baseband  industry  is 
highly protective, keeping information about baseband 
architecture, the RTOS, and the protocol stack, guarded 
from  the  public  [9]  [10]  [49].  The  secrecy  and 
complexity  of  the  baseband  technology  makes  it 
extremely difficult to make modifications at the binary 
level,  particularly  without 
availability  of 
information  such  as  source  code  [10]  [49].  However, 
there have clearly been cases where attackers have used 
explicit  access  to  the  device  firmware  in  order  to 
perform  malicious  activities  [29]  [31]  [33]  [50].  Our 
implementation  of  the  GSMem  receiver  is  based  on 
‘OsmocomBB,’ an open source GSM baseband software 
implementation [51]. 
The open source project, launched in 2010, is the only 
way to freely examine the implementation of a mobile’s 
GSM baseband software. OsmocomBB provides source 
code  for  the  GSM  protocol  stack,  along  with  device 
drivers  for  digital  and  analog  basebands  chips.  The 
project  currently  supports  about  13  models  of  mobile 
phones.  Most  of  the  supported  phones  are  OEM  by 
Motorola  and  works  with  Calypso  baseband  chipsets 
made  by  Texas  Instruments.  For  our  experiments,  we 
selected  the  Motorola  C123  model  [52]  that  supports 
2G  bands  but  has  no  GPRS,  Wi-Fi,  or  mobile  data 
the 
traffic  capabilities.  The  Motorola  C123  is  a  limited 
mobile phone, supporting our attack scenario described 
in Section 3. It is worthwhile to note that the baseband 
components of modern smartphones are more advanced 
in terms of RF reception, sampling rate and processing 
power due to the improved hardware and the support in 
new technologies such as the LTE [6] [53]. That means 
that implementation of the GSMem receiver on modern 
device  may  yield  better  results  in  terms  of  reception 
quality and transfer-rates. 
The  GSM  protocol  stack  at  the  baseband  consists  of 
three  main  layers  [49].  Layer  1  is  the  most  relevant 
layer in term of GSMem implementation. It handles the 
RF interface which modulates the data over the air. In 
OsmocomBB, the lower part of the layer 1 is handled 
by the DSP, while the baseband processor handles the 
upper 
includes,  among  other 
functionalities, 
is 
the  raw  signal  power 
responsible  for  acquiring 
measurements 
frequencies 
(ARFCNs). Note that measuring  RF power levels is a 
basic  functionality  of  any  baseband  chip  [39].    The 
interaction  between  the  baseband  processor  and  the 
DSP is depicted in Figure 4. 
the  power  management,  which 
(in  dBm)  of  specific 
layers.  Layer  1 
Digital Baseband 
(DSP)
GSM L1 messages ,etc.
power measurements
queries 
Baseband Processor 
RTOS
GSMem
Receiver
Figure 4: Interaction between the baseband processor and the 
DSP.  
Firmware Modification 
6.1.2. 
The receiver is implemented by patching the main event 
handler  in  the  baseband  RTOS.  Figure  5  shows  the 
outline  of  the  OsmocomBB  initialization  and  main 
loop.  After  initialization  (lines  1-2),  the  baseband 
processor enters the event loop (line 3). The event loop 
continuously  processes  a  sequence  of  event  handlers, 
including the keypad handler, timer updates, and layers 
2  and  3  handlers,  interrupts  from  the  DSP,  power 
measurements, etc. 
Figure 5: Calypso RTOS code outline 
856  24th USENIX Security Symposium 