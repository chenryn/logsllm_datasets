                print(data) 
    print(len(data)) 
                if zlib.crc32(data) == crc32key: 
                    print(w, h) 
                    with open('r.png', 'wb') as f1: 
                        f1.write(data_f + data + data_r) 
                        break
得到其宽为 1440，高为 960
然后上面有很多的红线，尝试将所有红线移到下方即可得到 flag
####  Solve
    python 
    from PIL import Image 
    def re_turn(pixels,num): 
        return pixels[num:] [:num] 
    p = Image.open('res.png').convert('RGB') 
    a,b = p.size 
    pixels = [] 
    for x in range(a): 
        pixel = [] 
        for y in range(b): 
            pixel.append(p.getpixel((x,y))) 
        pixels.append(pixel) 
    data = [] 
    for i in pixels: 
        for j in range(len(i)): 
            if i[j] [j-1] and i[j-1] == (255, 0, 0): 
                data.append(j) 
                break 
    _pixels = [] 
    for i in range(len(data)): 
        _pixels.append(re_turn(pixels[i] [i])) 
    p1 = Image.new('RGB',(a,b)) 
    for x in range(a): 
        for y in range(b): 
            p1.putpixel((x,y),_pixels[x] [y]) 
    p1.save('flag.png') 
####  flag
    flag{15e411a6efb9bfab823db05fcad16bff}
* * *
###  sign_in
####  Description
66 6c 61 67 7b 39 35 63 35 62 66 33 32 32 39 32 64 37 35 66 35 37 61 35 30 36
37 36 66 36 61 62 35 64 64 38 33 7d
####  Analyze
转 16 进制
####  flag
    flag{95c5bf32292d75f57a50676f6ab5dd83}
* * *
###  加 密 对 话
####  Description
阿巴阿巴歪比巴布
####  Analyze
第一部分是简单的替换密码，替换回二进制即可，第二部分是 javaAES 解密，根据给的 AES 加密即可
####  Solve
替换密码：
    python 
    from Crypto.Util import number 
    s = '''abaabawaibibabuwaibibabuwaibibabuwaibibabuwaibibabuabaaba 
    abaabawaibibabuwaibibabuwaibibabuabaabawaibibabuabaaba 
    abaabawaibibabuabaabawaibibabuwaibibabuabaabaabaaba 
    abaabaabaabawaibibabuwaibibabuwaibibabuwaibibabuwaibibabu 
    abaabaabaabawaibibabuwaibibabuwaibibabuabaabaabaaba 
    abaabaabaabaabaabawaibibabuabaabawaibibabu 
    abaabaabaabawaibibabuwaibibabuwaibibabuabaabawaibibabu 
    abaabaabaabaabaabawaibibabuabaabawaibibabuabaaba 
    abaabaabaabawaibibabuabaabawaibibabuwaibibabu 
    abaabaabaabawaibibabuabaabaabaabawaibibabu 
    abaabaabaabaabaabawaibibabuwaibibabuabaabawaibibabu 
    abaabawaibibabuabaabawaibibabuwaibibabuwaibibabuabaaba 
    abaabaabaabawaibibabuwaibibabuwaibibabuabaaba 
    abaabawaibibabuabaabaabaabaabaabaabaaba 
    abaabaabaabawaibibabuabaabaabaabaabaabawaibibabu 
    abaabaabaabaabaabaabaabawaibibabuwaibibabuabaaba 
    abaabaabaabaabaabawaibibabuabaabaabaabawaibibabu 
    abaabawaibibabuwaibibabuwaibibabuabaabawaibibabuwaibibabu 
    abaabaabaabaabaabawaibibabuabaabaabaabaabaaba 
    abaabawaibibabuwaibibabuabaabawaibibabuwaibibabuwaibibabu 
    abaabawaibibabuwaibibabuwaibibabuwaibibabuwaibibabuabaaba 
    abaabaabaabawaibibabuabaabawaibibabuabaabawaibibabu 
    abaabawaibibabuwaibibabuwaibibabuwaibibabuabaabawaibibabu 
    abaabawaibibabuabaabaabaabaabaabaabaaba 
    abaabaabaabawaibibabuabaabaabaabawaibibabuwaibibabu 
    abaabawaibibabuwaibibabuabaabaabaabaabaabaabaaba 
    abaabaabaabawaibibabuwaibibabuabaabaabaaba 
    abaabaabaabawaibibabuwaibibabuabaabaabaaba 
    abaabawaibibabuwaibibabuabaabaabaabaabaabaabaaba 
    abaabawaibibabuabaabaabaabawaibibabuwaibibabuabaaba 
    abaabawaibibabuabaabawaibibabuabaabaabaabawaibibabu 
    abaabaabaabawaibibabuabaabawaibibabuabaabawaibibabu 
    abaabawaibibabuwaibibabuabaabawaibibabuwaibibabuabaaba 
    abaabawaibibabuabaabaabaabaabaabaabaaba 
    abaabawaibibabuwaibibabuwaibibabuwaibibabuabaabaabaaba 
    abaabaabaabawaibibabuwaibibabuwaibibabuabaabaabaaba 
    abaabaabaabaabaabaabaabawaibibabuwaibibabuwaibibabu 
    abaabaabaabaabaabaabaabawaibibabuwaibibabuwaibibabu 
    abaabawaibibabuabaabawaibibabuwaibibabuwaibibabuabaaba 
    abaabaabaabawaibibabuabaabaabaabawaibibabu 
    abaabaabaabawaibibabuabaabaabaabawaibibabuwaibibabu 
    abaabaabaabawaibibabuwaibibabuwaibibabuabaabaabaaba 
    abaabaabaabawaibibabuabaabawaibibabuabaabaabaaba 
    abaabawaibibabuwaibibabuwaibibabuabaabawaibibabuwaibibabu 
    abaabawaibibabuwaibibabuabaabawaibibabuabaabawaibibabu 
    abaabaabaabaabaabawaibibabuwaibibabuabaabaabaaba 
    abaabawaibibabuwaibibabuabaabaabaabawaibibabuwaibibabu 
    abaabaabaabawaibibabuabaabawaibibabuwaibibabu 
    abaabawaibibabuabaabaabaabawaibibabuwaibibabuabaaba 
    abaabawaibibabuwaibibabuwaibibabuwaibibabuabaabaabaaba 
    abaabaabaabawaibibabuabaabaabaabaabaabawaibibabu 
    abaabawaibibabuabaabaabaabaabaabaabaaba 
    abaabawaibibabuwaibibabuabaabawaibibabuwaibibabuabaaba 
    abaabaabaabaabaabawaibibabuwaibibabuabaabawaibibabu 
    abaabaabaabaabaabawaibibabuwaibibabuabaaba 
    abaabawaibibabuabaabawaibibabuabaabaabaaba 
    abaabawaibibabuwaibibabuwaibibabuwaibibabuwaibibabuabaaba 
    abaabawaibibabuwaibibabuwaibibabuabaabawaibibabuwaibibabu 
    abaabawaibibabuabaabawaibibabuabaabaabaaba 
    abaabawaibibabuwaibibabuwaibibabuabaabaabaabawaibibabu 
    abaabaabaabaabaabawaibibabuwaibibabuabaaba 
    abaabawaibibabuwaibibabuwaibibabuwaibibabuabaabaabaaba 
    abaabawaibibabuwaibibabuwaibibabuwaibibabuabaabaabaaba 
    abaabawaibibabuwaibibabuabaabawaibibabuwaibibabuabaaba 
    abaabaabaabaabaabawaibibabuabaabaabaabaabaaba 
    abaabaabaabaabaabawaibibabuabaabawaibibabuwaibibabu 
    abaabaabaabaabaabawaibibabuwaibibabuwaibibabuwaibibabu 
    abaabawaibibabuwaibibabuwaibibabuabaabawaibibabuabaaba 
    abaabaabaabawaibibabuabaabaabaabaabaabawaibibabu 
    abaabawaibibabuwaibibabuwaibibabuabaabaabaabaabaaba 
    abaabawaibibabuabaabawaibibabu 
    abaabawaibibabuwaibibabuwaibibabuwaibibabuwaibibabuabaaba 
    abaabawaibibabuwaibibabuwaibibabuabaabawaibibabuabaaba 
    abaabawaibibabuabaabawaibibabuwaibibabuabaabaabaaba 
    abaabaabaabawaibibabuwaibibabuwaibibabuwaibibabuwaibibabu 
    abaabaabaabawaibibabuabaabawaibibabuabaabaabaaba 
    abaabaabaabawaibibabuwaibibabuabaabawaibibabuabaaba 
    abaabaabaabaabaabaabaabawaibibabuwaibibabuabaaba 
    abaabaabaabaabaabawaibibabuabaabawaibibabu 
    abaabawaibibabuabaabawaibibabuabaabaabaabawaibibabu 
    abaabawaibibabuabaabaabaabaabaabaabaabaabaaba 
    abaabaabaabawaibibabuwaibibabuabaabaabaabaabaaba 
    abaabaabaabawaibibabuabaabaabaabaabaabaabaaba 
    abaabaabaabawaibibabuwaibibabuabaabawaibibabuwaibibabu 
    abaabawaibibabuabaabaabaabaabaabaabaabaabaaba 
    abaabaabaabawaibibabuabaabawaibibabuwaibibabuabaaba 
    abaabaabaabaabaabawaibibabuwaibibabuabaabaabaaba 
    abaabawaibibabuabaabaabaabaabaabaabaabaabaaba 
    abaabaabaabaabaabawaibibabuwaibibabuabaabaabaaba 
    abaabaabaabawaibibabuabaabaabaabaabaabaabaaba 
    abaabawaibibabuabaabaabaabaabaabaabaabaabaaba 
    abaabaabaabaabaabawaibibabuwaibibabuwaibibabuwaibibabu 
    abaabaabaabawaibibabuabaabaabaabaabaabaabaaba 
    abaabaabaabaabaabawaibibabuabaabaabaabaabaaba 
    abaabaabaabawaibibabuwaibibabuabaabawaibibabuabaaba 
    abaabaabaabaabaabawaibibabuwaibibabuabaabawaibibabu 
    abaabaabaabawaibibabuwaibibabuabaabaabaabawaibibabu 
    abaabaabaabaabaabawaibibabuabaabawaibibabuabaaba 
    abaabaabaabawaibibabuabaabaabaabawaibibabuwaibibabu 
    abaabawaibibabuwaibibabuwaibibabuwaibibabuabaaba 
    abaabawaibibabuwaibibabuwaibibabuwaibibabuabaaba'''.replace('abaaba','1').replace('waibibabu','0') 
    enc = s.split('\n') 
    res = b'' 
    for i in enc: 
        res += number.long_to_bytes(int(i,2)) 
    print(res.decode())
得到
    AES`c:bu46rQ1/nyvDwHAjB/lO33OYVjI/CcxxQ6lckDJsL4YCn/Ir9+AD+F9CCIwtpEnG
    AES`key:V_god_is_so_powerful!!
    AES：
    package CTF; 
    import javax.crypto.*; 
    import javax.crypto.spec.SecretKeySpec; 
    import java.io.IOException; 
    import java.io.UnsupportedEncodingException; 
    import java.nio.charset.StandardCharsets; 
    import java.security.InvalidKeyException; 
    import java.security.NoSuchAlgorithmException; 
    import java.security.SecureRandom; 
    import java.util.Arrays; 
    import java.util.Base64; 
    public class AESDecode { 
        public static byte[] [] content,String Pass){ 
            try { 
                KeyGenerator key = KeyGenerator.getInstance("AES"); 
                SecureRandom random = SecureRandom.getInstance("SHA1PRNG"); 
                random.setSeed(Pass.getBytes()); 
                key.init(128, random); 
                SecretKey secretKey = key.generateKey(); 
                byte[] enCodeFormat = secretKey.getEncoded(); 
                SecretKeySpec Key = new SecretKeySpec(enCodeFormat, "AES"); 
                Cipher cipher = Cipher.getInstance("AES"); 
                cipher.init(Cipher.DECRYPT_MODE,Key); 
                return cipher.doFinal(content); 
            } catch (NoSuchPaddingException | NoSuchAlgorithmException | InvalidKeyException | BadPaddingException | IllegalBlockSizeException e) { 
                e.printStackTrace(); 
            } 
            return null; 
        } 
        public static void main(String[] args) throws IOException { 
            String Pass = "V_god_is_so_powerful!!"; 
            String c = "bu46rQ1/nyvDwHAjB/lO33OYVjI/CcxxQ6lckDJsL4YCn/Ir9+AD+F9CCIwtpEnG"; 
            byte[] b_c = Base64.getDecoder().decode(c); 
            byte[] dec = AESEncode.decrypt(b_c,Pass); 
            System.out.print(new String(dec)); 
        } 
    }
**flag{b80c4dd8b4a445f8041ebca018791e38}**
## pwn
###  backdoor
考点：数组越界、栈残留数据
分析：在 func1 中输入的字符串，函数返回后还会留在内存空间，绕过 func2 验证，之后将返回地址修改为后门函数
exp: