title:Memory Safety for Embedded Devices with nesCheck
author:Daniele Midi and
Mathias Payer and
Elisa Bertino
Memory Safety for Embedded Devices with nesCheck
Daniele Midi
Dept. of Computer Science
Purdue University
West Lafayette, IN, USA
PI:EMAIL
Mathias Payer
Dept. of Computer Science
Purdue University
West Lafayette, IN, USA
PI:EMAIL
Elisa Bertino
Dept. of Computer Science
Purdue University
West Lafayette, IN, USA
PI:EMAIL
ABSTRACT
Applications for TinyOS, a popular operating system for em-
bedded systems and wireless sensor networks, are written
in nesC, a C dialect prone to the same type and memory
safety vulnerabilities as C. While availability and integrity
are critical requirements, the distributed and concurrent na-
ture of such applications, combined with the intrinsic un-
safety of the language, makes those security goals hard to
achieve. Traditional memory safety techniques cannot be
applied, due to the strict platform constraints and hardware
diﬀerences of embedded systems.
We design nesCheck, an approach that combines static
analysis and dynamic checking to automatically enforce mem-
ory safety on nesC programs without requiring source mod-
iﬁcations. nesCheck analyzes the source code, identiﬁes the
minimal conservative set of vulnerable pointers, ﬁnds static
memory bugs, and instruments the code with the required
dynamic runtime checks. Our prototype extends the existing
TinyOS compiler toolchain with LLVM-based passes. Our
evaluation shows that nesCheck eﬀectively and eﬃciently en-
forces memory protection, catching all memory errors with
an overhead of 0.84% on energy, 5.3% on code size, up to
8.4% on performance, and 16.7% on RAM.
1.
INTRODUCTION
Wireless Sensor Networks (WSNs) are deployed in criti-
cal, real-time applications, where availability and integrity
are of paramount importance. WSN nodes are embedded
systems that often manage conﬁdential information, such
as private keys and aggregated data, making conﬁdentiality
and integrity key requirements. However, the distributed
and concurrent nature of WSN applications, together with
the intrinsic type and memory unsafety of C/C++, make it
hard to achieve these security goals.
TinyOS [21] is an open source operating system designed
for low-power wireless embedded systems, such as WSN
motes and smart meters [19]. TinyOS programs consist of
separate software components statically linked through in-
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS ’17, April 02 - 06, 2017, Abu Dhabi, United Arab Emirates
c(cid:13) 2017 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ISBN 978-1-4503-4944-4/17/04. . . $15.00
DOI: http://dx.doi.org/10.1145/3052973.3053014
terfaces. Common components include routing and packet
radio communication, sensor measurements, and storage.
The language used to program TinyOS applications is nesC,
a dialect of the C language optimized for the resource con-
straints of low-power embedded devices [13]. Because of the
strict constraints in terms of memory, storage, and energy,
neither TinyOS nor the underlying hardware provide any
memory protection or virtual memory mechanism between
processes or kernel and user-space. Moreover, the nesC lan-
guage makes it easy to write memory-unsafe code, inheriting
all the type and memory safety problems of C.
Memory corruption in the software running on a single
node may allow an attacker to take over the node, read pri-
vate data, or even disseminate incorrect data and degrade
the entire network. Note that embedded platforms do not
have code injection protection or ASLR, so a holistic defense
like memory safety becomes even more important. More
critically, since all the nodes run the same software image, an
attacker may exploit a single vulnerability to take control of
every node in the network. Concrete examples of such dev-
astating attacks have been shown for Harvard-architecture-
based sensor nodes such as the MicaZ motes [11], as well as
Von Neumann-architecture-based ones such as the popular
TelosB motes [15]. In these attacks, a well-crafted network
packet sent to a vulnerable node can take control of the node
and propagate as a self-replicating worm to the entire net-
work through multi-hop communications [12, 14, 16, 32, 36].
All of these critical attacks would be prevented by enforcing
memory safety.
Existing memory safety techniques [26, 24, 4, 29] are not
applicable to embedded systems, nesC, or TinyOS, as they
are designed for general-purpose systems. Adapting them to
embedded systems is unfeasible without extensive redesign.
In fact, they have heavy requirements in storage, mem-
ory, presence of an MMU, and hardware memory-protection
mechanisms. However, embedded systems fundamentally
diﬀer from regular computing systems, having scarce mem-
ory, no MMU, no protection against code injection and code
reuse, and often not even a distinction between kernel-space
and user-space. For example, widespread sensor motes like
the Memsic TelosB [23] only provide 10kB of RAM and
48kB of program ﬂash memory; previously proposed mem-
ory safety approaches result in signiﬁcantly bigger code size
and more intensive memory usage. Moreover, the perfor-
mance degradation that many existing solutions impose is
not acceptable for energy-constrained, real-time WSNs ap-
plications. In fact, solutions such as CCured reported slow-
downs ranging from 20% to 200% [26]. Given the resource
constraints, a straightforward porting of common implemen-
tations for memory protection techniques to embedded sys-
tems is infeasible. A tailored solution for memory and type
safety for TinyOS applications is therefore needed.
For TinyOS applications, the code for applications,
li-
braries, and operating system is entirely available at compile
time. This allows us to eﬀectively leverage whole-program
static analysis to ensure memory safety with a fallback to
dynamic checking instrumentation if we run into aliasing
issues. Moreover, by statically identifying and removing un-
necessary checks for memory accesses that will never result
in memory errors, it is possible to achieve low performance
overhead.
Based on such considerations, we design nesCheck, a novel
scheme that combines static analysis, type inference, and dy-
namic instrumentation techniques to enforce memory safety
on embedded systems for existing nesC programs. The goal
of nesCheck is to protect embedded software against mem-
ory vulnerabilities with negligible overhead and without re-
quiring any source code modiﬁcation. nesCheck statically
analyzes the source code, identiﬁes the potentially danger-
ous pointer variables, automatically infers the minimum set
of dynamic runtime checks needed to enforce memory safety
based on pointer access ﬂow, and instruments the code ap-
propriately.
On one hand, solutions that enforce memory safety en-
tirely dynamically have resource requirements that cannot
be satisﬁed on embedded platforms; on the other hand,
static solutions based on whole-program analysis are not ap-
plied in practice as they lead to exponential state explosion.
nesCheck is novel in tailoring its design to the challenges and
constraints of the embedded world, where whole-program
analysis is feasible but memory and performance overhead
are of concern, by relying entirely on static analysis alone
whenever possible and falling back on runtime protection
only when needed. Instead of porting incremental defenses,
our approach enforces low-overhead spatial memory safety
for all code running on embedded systems.
To evaluate our approach, we implement nesCheck as a
combined static analysis/dynamic checker on top of the LLVM
compiler framework. The static analysis infers types and re-
moves as many checks as possible while the dynamic checker
enforces safety. We then integrate our checker into the ex-
isting nesC toolchain. We evaluate nesCheck on standard
TinyOS application benchmarks, and show that it eﬀectively
enforces memory safety on WSN applications, while mini-
mizing the runtime performance overhead (0.84% on energy,
5.3% on code size, up to 8.4% on performance, and 16.7%
on RAM). These benchmarks are the standard benchmarks
for evaluating WSN and present realistic usage scenarios for
embedded systems. Porting full desktop benchmarks like
SPEC CPU2006 is unrealistic due to the hardware and per-
formance constraints of embedded devices (just the test in-
put of a single benchmark is orders of magnitudes larger
than all the available memory on the target platforms).
The contributions of our work are: (i) Design of an inter-
procedural whole-program static analysis mechanism, based
on type tracking and pointer usage, without the need for
programmer annotations; (ii) Design of dynamic instrumen-
tation for eﬃcient memory safety enforcement on highly con-
strained embedded platforms, without MMU or kernel/user
space separation; (iii) Evaluation of eﬃciency and eﬀective-
ness of our approach through implementation prototype.
2. ADVERSARIAL MODEL
We assume that the attacker can inject and intercept ar-
bitrary packets in the network. We also assume that the ap-
plication has memory vulnerabilities known to the attacker.
She will exploit them to take control of a node by means
of code injection/reuse attacks or leak private information
from the node. The attacker has the power to compromise
the integrity, availability, or conﬁdentiality of the node.
Physical attacks targeting the nodes, hardware attacks,
or ﬂashing/programming individual nodes with a malicious
ﬁrmware are out of scope.
3. BACKGROUND
3.1 Memory Safety Vulnerabilities
The root cause of all memory safety vulnerabilities is the
dereferencing of invalid pointers. There are two main cat-
egories of memory safety vulnerabilities: spatial memory
safety vulnerabilities, resulting from pointers pointing to ad-
dresses outside the bounds of the allocated memory area,
and temporal memory safety vulnerabilities, resulting from
the usage of pointers after the corresponding memory areas
are deallocated (e.g. use-after-free errors).
Our current prototype of nesCheck targets spatial mem-
ory safety, but can be extended to enforce temporal safety as
well, by lock and key mechanisms [25]. However, as mem-
ory in well-developed WSN applications is allocated stati-
cally instead of dynamically, temporal safety errors are not
a pressing issue for applications that comply with the devel-
opment guidelines for TinyOS. This includes all the applica-
tions that ship with the standard distribution of TinyOS, as
well as most larger-scale WSN applications. Examples of the
memory vulnerabilities that nesCheck protects against are
out-of-bounds accesses to pointers on the stack and heap,
uninitialized uses, and null dereferencing.
3.2 TinyOS
nesC. nesC is an event-driven dialect of C. Its additional
features include the concept that programs are built out of
components, statically linked through interfaces.
Dynamic allocation. In the early versions of TinyOS,
no dynamic memory allocation was allowed. This constraint,
partially relaxed in recent releases, is still highly encouraged,
as the lack of memory protection and separation can easily
lead to involuntary stack smashing when the heap grows into
the stack [37]. Specialized components (e.g., TinyAlloc),
were introduced to support dynamic allocation, but behind
the scenes they simply manage a large chunk of pre-allocated
memory. Disabling dynamic allocation has the advantage,
from a memory safety standpoint, that most required infor-
mation is available at compile-time, and little work is left
for dynamic detection.
Compilation and execution model. The standard
TinyOS compilation pipeline is composed of several steps.
First, the nesC code is processed and all the required compo-
nents, including the operating system, are linked together.
Under this model, all code, libraries, and OS components
are statically known at compile time. The resulting single
nesC code is cross-compiled to C code, in turn compiled na-
tively into a binary image for the speciﬁc target platform.
Such single binary image – containing both user code and
OS code – runs as a single executable, assuming complete
control over the hardware at all times. The memory address
4.1.1 Extended Type System and Type Inference
In order to provide type safety, identify the potentially
dangerous memory accesses, and avoid dynamic checks on
the provably safe operations, it is necessary to understand
the role played by the various pointers in the code and their
interrelations. We thus enforce a type system inspired by
CCured [26], that categorizes pointers according to their us-
age into diﬀerent classes with speciﬁc characteristics. The
pointer types that we consider are the following: (i) Safe
pointer to τ :
it can only be null or point to a value of
type τ . At runtime, it may only need a null-pointer check.
(ii) Sequence pointer to τ :
like a Safe pointer, it can
be null or point to a value of type τ . However, a Sequence
pointer can also be interpreted as an integer, and be ma-
nipulated via pointer arithmetic. At runtime, it may need a
null-pointer check, as well as a bounds check if casted to a
safe pointer of base type τ . (iii) Dynamic pointer: it is a
pointer that cannot be statically typed. At runtime, it may
need null-pointer and bounds checks, as well as dynamic
type checks.
The type inference engine gathers information from the
source code to classify pointer declarations according to the
extended type system. The engine focuses on all locations in
which pointer variables are used and classiﬁes them, in a ﬁx-
point iteration, by analyzing their usage. Our type inference
algorithm is shown in Algorithm 1.
The type inference algorithm uses 3 rules:
1 All pointers are classiﬁed as Safe upon their declaration;
2 Safe pointers subsequently used in pointer arithmetic are
re-classiﬁed as a Sequence;
3 Safe or Sequence pointers interpreted with diﬀerent types
in diﬀerent locations are re-classiﬁed as a Dynamic. This
includes casting between diﬀerent levels of indirection
(e.g., int** to int*), and between diﬀerent root types
(e.g., int* to void*).
nesCheck’s type inference engine eﬀectively enforces a to-
tal ordering Dynamic ≺ Sequence ≺ Saf e on pointer types,
so the type of a pointer is updated only if the new type is
more restrictive. For example, assume the following code:
1
2
3
4
int * arr , *p , n ;
arr = malloc (5 * sizeof ( int ) ) ;