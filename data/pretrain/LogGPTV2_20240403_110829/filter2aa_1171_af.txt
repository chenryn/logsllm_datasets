}
if curPkg.ImportPath == "runtime" && flagTiny {
    // strip unneeded runtime code
    stripRuntime(filename, file)
  }
// stripRuntime removes unnecessary code from the runtime,
// such as panic and fatal error printing, and code that
// prints trace/debug info of the runtime.
func stripRuntime(filename string, file *ast.File) {
  stripPrints := func(node ast.Node) bool {
    call, ok := node.(*ast.CallExpr)
    if !ok {
      return true
    }
    id, ok := call.Fun.(*ast.Ident)
    if !ok {
      return true
    }
    switch id.Name {
    case "print", "println":
      id.Name = "hidePrint"
      return false
    default:
      return true
    }
  }
  for _, decl := range file.Decls {
    switch x := decl.(type) {
    case *ast.FuncDecl:
      switch filename {
      case "error.go":
        // only used in panics
        switch x.Name.Name {
        case "printany", "printanycustomtype":
          x.Body.List = nil
        }
      case "mgcscavenge.go":
        // used in tracing the scavenger
        if x.Name.Name == "printScavTrace" {
          x.Body.List = nil
          break
        }
      case "mprof.go":
        // remove all functions that print debug/tracing info
        // of the runtime
        if strings.HasPrefix(x.Name.Name, "trace") {
          x.Body.List = nil
        }
      case "panic.go":
        // used for printing panics
        switch x.Name.Name {
        case "preprintpanics", "printpanics":
          x.Body.List = nil
        }
      case "print.go":
        // only used in tracebacks
        if x.Name.Name == "hexdumpWords" {
          x.Body.List = nil
          break
        }
      case "proc.go":
        // used in tracing the scheduler
        if x.Name.Name == "schedtrace" {
          x.Body.List = nil
          break
        }
      case "runtime1.go":
        usesEnv := func(node ast.Node) bool {
          seen := false
          ast.Inspect(node, func(node ast.Node) bool {
            ident, ok := node.(*ast.Ident)
            if ok && ident.Name == "gogetenv" {
              seen = true
              return false
            }
            return true
          })
          return seen
        }
      filenames:
        switch x.Name.Name {
        case "parsedebugvars":
          // keep defaults for GODEBUG cgocheck and invalidptr,
          // remove code that reads GODEBUG via gogetenv
          for i, stmt := range x.Body.List {
            if usesEnv(stmt) {
              x.Body.List = x.Body.List[:i]
              break filenames
            }
          }
          panic("did not see any gogetenv call in parsedebugvars")
        case "setTraceback":
          // tracebacks are completely hidden, no
          // sense keeping this function
          x.Body.List = nil
        }
      case "traceback.go":
        // only used for printing tracebacks
        switch x.Name.Name {
        case "tracebackdefers", "printcreatedby", "printcreatedby1", 
"traceback", "tracebacktrap", "traceback1", "printAncestorTraceback",
          "printAncestorTracebackFuncInfo", "goroutineheader", 
"tracebackothers", "tracebackHexdump", "printCgoTraceback":
          x.Body.List = nil
        case "printOneCgoTraceback":
          x.Body = ah.BlockStmt(ah.ReturnStmt(ah.IntLit(0)))
        default:
          if strings.HasPrefix(x.Name.Name, "print") {
            x.Body.List = nil
          }
        }
      default:
        break
      }
    case *ast.GenDecl:
      if x.Tok != token.IMPORT {
        continue
      }
      switch filename {
      case "print.go":
        // was used in hexdumpWords
        x.Specs = removeImport(`"runtime/internal/sys"`, x.Specs) // Before Go 
1.18.
        x.Specs = removeImport(`"internal/goarch"`, x.Specs)      // Go 1.18.
      case "traceback.go":
        // was used in traceback1
        x.Specs = removeImport(`"runtime/internal/atomic"`, x.Specs)
      }
    }
  }
  switch filename {
  case "runtime1.go":
    // On Go 1.17.x, the code above results in runtime1.go having an
    // unused import. Make it an underscore import.
    // If this is a recurring problem, we could go for a more
link
最后链接阶段，主要接管link中的一些参数进行处理,添加-X指定新的符号名，-w -s 去除debug信息，重
新选定依赖信息等等
    // generic solution like x/tools/imports.
    for _, imp := range file.Imports {
      if imp.Path.Value == `"internal/bytealg"` {
        imp.Name = &ast.Ident{Name: "_"}
        break
      }
    }
  case "print.go":
    file.Decls = append(file.Decls, hidePrintDecl)
    return
  }
  // replace all 'print' and 'println' statements in
  // the runtime with an empty func, which will be
  // optimized out by the compiler
  ast.Inspect(file, stripPrints)
}
# go tool link
usage: link [options] main.o
  -B note
        add an ELF NT_GNU_BUILD_ID note when using ELF
  -E entry
        set entry symbol name
  -H type
        set header type
  -I linker
        use linker as ELF dynamic linker
  -L directory
        add specified directory to library path
  -R quantum
        set address rounding quantum (default -1)
  -T address
        set text segment address (default -1)
  -V    print version and exit
  -X definition
        add string value definition of the form importpath.name=value
  -a    no-op (deprecated)
  -aslr
        enable ASLR for buildmode=c-shared on windows (default true)
  -benchmark string
        set to 'mem' or 'cpu' to enable phase benchmarking
  -benchmarkprofile base
        emit phase profiles to base_phase.{cpu,mem}prof
  -buildid id
        record id as Go toolchain build id
  -buildmode mode
        set build mode
  -c    dump call graph
  -compressdwarf
        compress DWARF if possible (default true)
  -cpuprofile file
Go 处理link的源码
        write cpu profile to file
  -d    disable dynamic executable
  -debugtextsize int
        debug text section max size
  -debugtramp int
        debug trampolines
  -dumpdep
        dump symbol dependency graph
  -extar string
        archive program for buildmode=c-archive
  -extld linker
        use linker when linking in external mode
  -extldflags flags
        pass flags to external linker
  -f    ignore version mismatch
  -g    disable go package data checks
  -h    halt on error
  -importcfg file
        read import configuration from file
  -installsuffix suffix
        set package directory suffix
  -k symbol
        set field tracking symbol
  -libgcc string
        compiler support lib for internal linking; use "none" to disable
  -linkmode mode
        set link mode
  -linkshared
        link against installed Go shared libraries
  -memprofile file
        write memory profile to file
  -memprofilerate rate
        set runtime.MemProfileRate to rate
  -msan
        enable MSan interface
  -n    dump symbol table
  -o file
        write output to file
  -pluginpath string
        full path name for plugin
  -r path
        set the ELF dynamic linker search path to dir1:dir2:...
  -race
        enable race detector