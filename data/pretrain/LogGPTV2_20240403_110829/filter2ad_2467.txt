# Title: POSTER: The Popular Apps in Your Pocket Are Leaking Your Privacy

## Authors:
- Xing Liu
- Wei Wang
- Jiqiang Liu

### Affiliation:
Beijing Jiaotong University, Beijing, China, 100044

### Contact:
- PI: [Email]

---

## Abstract

Smartphone users face significant threats of privacy leakage, not only from malicious applications but also from the most popular and widely used apps. This poster presents our study on information leakage caused by the most popular apps in Chinese app markets. Our goal is to identify the types of information exposed by each popular app and to explore the following three questions:
1. To what extent can the information leaked by a single app be used to characterize user behavior?
2. To what extent can the information leaked by multiple apps on the same smartphone be used to characterize user behavior?
3. Can the leaked information from multiple smartphones be integrated to predict social behaviors?

Preliminary experimental results on the top 50 popular apps in Chinese app markets reveal a serious situation of information leakage.

### Categories and Subject Descriptors
K.4.1 [COMPUTERS AND SOCIETY]: Public Policy Issues—Privacy

### Keywords
Android, popular apps, privacy leakage

---

## 1. Introduction

In recent years, Android-powered smartphones have become ubiquitous in both personal and business use. According to a report from the International Data Corporation (IDC) [5], Android-powered smartphones held a 78% market share in the first quarter of 2015. Additionally, AppBrain [2] reports that the number of apps in Google Play has reached 1.5 million. However, while many Android apps are installed by only a few users, a select number of apps are extremely popular, especially those in the top 50 list [1]. Most users have multiple top 50 apps installed on their smartphones.

As portable devices, smartphones store a wealth of personal information, and their usage data reflects users' habits, interests, and relationships. Therefore, privacy on Android-powered smartphones is a critical issue. Previous research has focused on detecting malicious apps that steal users' privacy [6] and developing tools [4][7] to discover privacy leakage paths in apps. However, little attention has been paid to privacy leakage caused by reputable, popular apps. These apps are often whitelisted by antivirus companies and are not flagged as potential threats. Nevertheless, developers of these popular apps may collect usage information to improve their products. If this collected information is not well protected, it can be intercepted by network sniffers, leading to serious privacy breaches.

In this poster, we present our preliminary study on information leakage issues caused by the most popular apps in Chinese app markets. We designed a tool called ILDDroid (Information Leakage Discover Droid) to detect private information leaks. ILDDroid aims to uncover unknown private information leakage, not just the information protected by Android permissions. Based on the analysis results from ILDDroid, we aim to answer the following three questions:
- To what extent can a user be identified or characterized with the information leaked by a single app?
- To what extent can a user be identified or characterized with the information leaked by multiple apps on the same smartphone?
- Is it possible to group users and predict their social behaviors based on the leaked information from multiple users (or smartphones)?

Our preliminary experiments on the top 50 popular apps in Chinese app markets show a severe situation of information leakage. These popular apps not only send out hardware information that can uniquely identify a smartphone but also expose when, where, and how long a user interacts with each app. We believe this information is sufficient to distinguish individual users. More extensive experiments for predicting group behaviors are currently being conducted.

---

## 2. System Design

ILDDroid differs from previous Android analysis tools [3][4] by attempting to discover unknown private information leakage at runtime. According to Zhou's [7] research, it is possible to identify a user based on leaked information not protected by Android permissions. ILDDroid captures network traffic data between apps and their servers, then analyzes this data to differentiate between service requests and data collection. For encrypted data, we analyze disassembled code and run modified versions of the apps to determine what information is sent.

### 2.1 Network Traffic Analyzer

The network traffic analyzer captures data transmitted between apps and their servers. We set up a WiFi hotspot with a computer running a network sniffer. An Android smartphone connected to this hotspot generates network traffic data, which is logged on the computer. We run each app for several minutes, triggering most of its functions. After logging the network traffic data, we filter out data intended for collecting user usage information using the following rules:
1. Keywords in target URLs, such as "register," "log," or "collect."
2. Keywords in the transmitted data, such as "time," "IMEI," or "action."
3. Returned data after sending. If the server returns nothing or just a status like "success" or "error," the data likely contains user usage information.

Once we identify the network traffic data for user usage information, we manually determine the type of privacy that may be leaked.

### 2.2 App Analyzer

To discover the information transmitted in encrypted data, we developed an app analyzer that performs both static and dynamic analysis.

#### Static Analysis
The static analysis process is as follows:
1. The analyzer identifies URLs obtained from the network traffic in the app's disassembled code.
2. It determines where these URLs are used.
3. The data sent with these URLs is tainted.
4. Static taint analysis is performed to discover the original data.
This static analysis can find static data like encrypted IMEI and network information. Unknown methods on taint paths are marked as interesting points for dynamic analysis.

#### Dynamic Analysis
Dynamic analysis is based on the results of static analysis. We inject monitoring codes into the app's disassembled code at the points of interest. These injected codes capture runtime information and output it through the app's log file. By running the repackaged, modified apps, we can understand what information is exposed.

---

## 3. Experimental Results and Discussions

We conducted an experiment on the top 50 popular apps in Chinese app markets, each with over 19 million monthly active users. Table 1 summarizes some of the analysis results.

| App Name         | Category      | Target URLs                                  | Leaked Information                                                                 |
|------------------|---------------|----------------------------------------------|-----------------------------------------------------------------------------------|
| Toutiao          | News          | oc.umeng.com/app logs, log.snssdk.com/service/2/app log | Address, Network status, MAC, Device ID, Model, OS Version, Display density, Installed apps, Installation time, Launch time, Time spent on each activity |
| Neteasy News     | News          | m.analytics.126.net/news/c                    | Address, Network status, MAC, IMEI, Model, OS Version, CPU type, Display density, Launch time, Time when opening a news category |
| WiFi Master Key  | Tools         | wiﬁapi02.51y5.net, woa.sdo.com/woa/datacollect/, mobads-logs.baidu.com | Address, Network status, IMEI, Model, OS Version, MAC, Nearby Wi-Fi hotspots and their MAC, Time when using the app |
| Xiaomi Market    | Third-party   | 123.129.202.147                              | IMEI, Model, OS Version, Installed apps and their versions |
| UC Browser       | Communication | track.uc.cn:9080/collect, utop.umengcloud.com | User ID, Address, IP, Network status, Model, OS Version, Display density, Browsing history and corresponding time |
| TTPod            | Music         | collect.log.ttpod.com/ttpod client v2         | IMEI, Model, OS Version, CPU type, RAM size, Opened song lists and corresponding time |

The table highlights the current serious situation of information leakage. Most of the top 50 apps transmit collected user information through unsafe methods, except for apps developed by large companies like Tencent and Alibaba. Some apps send unencrypted data in JSON format, while others simply change the labels of the data. Some encrypt the data with AES, but the keys are generated from the current time, making them easily compromised.

The information collected by these popular apps is far more extensive than users might imagine. It includes not only hardware information but also detailed usage data, such as the time and duration of app usage. This information is sufficient to distinguish individual users. More extensive experiments for predicting group behaviors are being conducted.

---

## 4. Conclusion

In this poster, we explored the information leakage caused by the most popular apps. We designed a tool, ILDDroid, to analyze the types of information leaked by widely used apps. Preliminary experimental results show that user privacy is significantly compromised by these popular apps. We are conducting further experiments to study the feasibility of predicting social behaviors of different groups of users.

---

## 5. Acknowledgement

This work was supported in part by the Fundamental Research Funds through the Central Universities of China under Grant No. K15JB00190, in part by Ph.D. Programs Foundation, Ministry of Education of China, under Grant 20120009120010, in part by the Scientific Research Foundation through the Returned Overseas Chinese Scholars, Ministry of Education of China, under Grant K14C300020, in part by the Program for Changjiang Scholars and Innovative Research Team in University under Grant IRT 201206, and in part by the 111 Project under Grant B14005.

---

## 6. References

[1] Analysis. Top 50 apps in Chinese app markets. http://www.analysys.cn/, 2015-05.

[2] AppBrain. Google Play stats. http://www.appbrain.com/stats/, 2015-05-23.

[3] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein, Y. Le Traon, D. Octeau, and P. McDaniel. Flowdroid: Precise context, flow, field, object-sensitive, and lifecycle-aware taint analysis for Android apps. In ACM SIGPLAN Notices, volume 49, pages 259–269. ACM, 2014.

[4] W. Enck, P. Gilbert, S. Han, V. Tendulkar, B. Chun, L. Cox, J. Jung, P. McDaniel, and A. Sheth. TaintDroid: An information-flow tracking system for real-time privacy monitoring on smartphones. ACM Transactions on Computer Systems (TOCS), 32(2):5, 2014.

[5] I.D. Corporation. Smartphone OS market share, Q1 2015. http://www.idc.com/prodserv/smartphone-os-market-share.jsp, 2015-05.

[6] M. Zhang, Y. Duan, H. Yin, and Z. Zhao. Semantics-aware Android malware classification using weighted contextual API dependency graphs. In CCS2014, pages 1105–1116. ACM, 2014.

[7] X. Zhou, S. Demetriou, D. He, M. Naveed, X. Pan, X. Wang, C. Gunter, and K. Nahrstedt. Identity, location, disease, and more: Inferring your secrets from Android public resources. In CCS2013, pages 1017–1028. ACM, 2013.