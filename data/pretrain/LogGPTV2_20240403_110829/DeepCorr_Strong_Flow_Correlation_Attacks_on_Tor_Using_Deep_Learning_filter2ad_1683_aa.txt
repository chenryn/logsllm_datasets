title:DeepCorr: Strong Flow Correlation Attacks on Tor Using Deep Learning
author:Milad Nasr and
Alireza Bahramali and
Amir Houmansadr
DeepCorr: Strong Flow Correlation Attacks on Tor
Using Deep Learning
Milad Nasr
Alireza Bahramali
University of Massachusetts Amherst
{milad,abahramali,amir}@cs.umass.edu
Amir Houmansadr
8
1
0
2
g
u
A
2
2
]
R
C
.
s
c
[
1
v
5
8
2
7
0
.
8
0
8
1
:
v
i
X
r
a
ABSTRACT
Flow correlation is the core technique used in a multitude of
deanonymization attacks on Tor. Despite the importance of flow
correlation attacks on Tor, existing flow correlation techniques are
considered to be ineffective and unreliable in linking Tor flows
when applied at a large scale, i.e., they impose high rates of false
positive error rates or require impractically long flow observations
to be able to make reliable correlations. In this paper, we show that,
unfortunately, flow correlation attacks can be conducted on Tor
traffic with drastically higher accuracies than before by leveraging
emerging learning mechanisms. We particularly design a system,
called DeepCorr, that outperforms the state-of-the-art by signifi-
cant margins in correlating Tor connections. DeepCorr leverages
an advanced deep learning architecture to learn a flow correlation
function tailored to Tor’s complex network—this is in contrast to
previous works’ use of generic statistical correlation metrics to cor-
related Tor flows. We show that with moderate learning, DeepCorr
can correlate Tor connections (and therefore break its anonymity)
with accuracies significantly higher than existing algorithms, and
using substantially shorter lengths of flow observations. For in-
stance, by collecting only about 900 packets of each target Tor flow
(roughly 900KB of Tor data), DeepCorr provides a flow correlation
accuracy of 96% compared to 4% by the state-of-the-art system of
RAPTOR using the same exact setting.
We hope that our work demonstrates the escalating threat of
flow correlation attacks on Tor given recent advances in learning
algorithms, calling for the timely deployment of effective counter-
measures by the Tor community.
1 INTRODUCTION
Tor [15] is the most widely used anonymity system with more
than 2 million daily users [71]. It provides anonymity by relaying
clients’ traffic through cascades of relays, known as onion-circuits,
therefore concealing the association between the IP addresses of
the communicating parties. Tor’s network comprises around 7,000
public relays, carrying terabytes of traffic every day [71]. Tor is
used widely not only by dissidents, journalists, whistleblowers, and
businesses, but also by ordinary citizens to achieve anonymity and
blocking resistance.
To be usable for everyday Internet activities like web browsing,
Tor aims to provide low-latency communications. To make this pos-
sible, Tor relays refrain from obfuscating traffic features like packet
timings as doing so will slow down the connections.1 Consequently,
Tor is known to be susceptible to flow correlation attacks [13, 48, 65]
1Note that some Tor bridges (but not the public relays) obfuscate traffic characteris-
tics of the Tor flows between themselves and censored clients by using various Tor
pluggable transports [58].
1
in which an adversary tries to link the egress and ingress segments
of a Tor connection by comparing their traffic characteristics, in
particular their packet timings and packet sizes.
This paper studies flow correlation attacks on Tor. Flow cor-
relation is the core technique used in a wide spectrum of the
attacks studied against Tor (and similar anonymity systems) [8,
18, 34, 36, 67, 69]. For instance, in the predecessor attack [79] an
adversary who controls/eavesdrops multiple Tor relays attempts
at deanonymizing Tor connections by applying flow correlation
techniques. The Tor project adopted “guard” relays to limit such
an adversary’s chances of placing herself on the two ends of a
target Tor connection. Borisov et al. [8] demonstrated an active
denial-of-service attack that increases an adversary’s chances of
observing the two ends of a target user’s Tor connections (who then
performs flow correlation). Alternatively, various routing attacks
have been presented on Tor [18, 36, 67, 69] that aim at increasing
an adversary’s odds of intercepting the flows to be correlated by
manipulating the routing decisions.
Despite the critical role of flow correlation in a multitude of
Tor attacks, flow correlating Tor connections has long been consid-
ered to be inefficient at scale [35, 52, 63]—but not anymore! Even
though Tor relays do not actively manipulate packet timings and
sizes to resist flow correlation, the Tor network naturally perturbs
Tor packets by significant amounts, rendering flow correlation a
difficult problem in Tor. Specifically, Tor connections experience
large network jitters, significantly larger than normal Internet con-
nections. Such large perturbations are resulted by congestion on
Tor relays, which is due to the imbalance between Tor’s capacity
and the bandwidth demand from the clients. Consequently, existing
flow correlation techniques [32, 42, 50, 69] suffer from high rates of
false positives and low accuracies, unless they are applied on very
long flow observations and/or impractically small sets of target
flows. For instance, the state-of-the-art flow correlation of RAP-
TOR [69] achieves good correlation performance in distinguishing
a small set of only 50 target connections, and even this requires
the collection of 100 MB over 5 minutes of traffic for each of the
intercepted flows.
In this work, we take flow correlation attacks on Tor to real-
ity. We develop tools that are able to correlate Tor flows with ac-
curacies significantly higher than the state-of-the-art—when ap-
plied to large anonymity sets and using very short observations
of Tor connections. We argue that existing flow correlation tech-
niques [12, 32, 42, 50, 65, 69] are inefficient in correlating Tor traffic
as they make use of generic statistical correlation algorithms that
are not able to capture the dynamic, complex nature of noise in Tor.
As opposed to using such general-purpose statistical correlation
algorithms, in this paper we use deep learning to learn a correlation
function that is tailored to Tor’s ecosystem. Our flow correlation sys-
tem, called DeepCorr, then uses the learned correlation function to
cross-correlate live Tor flows. Note that contrary to website finger-
printing attacks [9, 25, 55, 72, 73], DeepCorr does not need to learn
any target destinations or target circuits; instead DeepCorr learns
a correlation function that can be used to link flows on arbitrary
circuits, and to arbitrary destinations. In other words, DeepCorr can
correlate the two ends of a Tor connection even if the connection
destination has not been part of the learning set. Also, DeepCorr
can correlate flows even if they are sent over Tor circuits different
than the circuits used during the learning process. This is possible
as DeepCorr’s neural network learns the generic features of noise
in Tor, regardless of the specific circuits and end-hosts used during
the training process.
We demonstrate DeepCorr’s strong performance through large
scale experiments on live Tor network. We browse the top 50,000
Alexa websites over Tor, and evaluate DeepCorr’s true positive and
false positive rates in correlating the ingress and egress segments
of the recorded Tor connections. To the best of our knowledge, our
dataset is the largest dataset of correlated Tor flows, which we have
made available to the public. Our experiments show that DeepCorr
can correlate Tor flows with accuracies significantly superior to
existing flow correlation techniques. For instance, compared to the
state-of-the-art flow correlation algorithm of RAPTOR [69], Deep-
Corr offers a correlation accuracy2 of 96% compared to RAPTOR’s
accuracy of 4% (when both collect 900 packets of traffic from each of
the intercepted flows)! The following is a highlight of DeepCorr’s
performance:
• We train DeepCorr using 25,000 Tor flows generated by
ourselves. Training DeepCorr takes about a day on a sin-
gle TITAN X GPU, however we show that an adversary
needs to re-train DeepCorr only about once every month
to preserve its correlation performance.
• DeepCorr can be used as a generic correlation function:
DeepCorr’s performance is consistent for various test
datasets with different sizes and containing flows routed
over different circuits.
• DeepCorr outperforms prior flow correlation algorithms by
very large margins. Importantly, DeepCorr enables the cor-
relation of Tor flows with flow observations much shorter
than what is needed by previous work. For instance, with
only 300 packets, DeepCorr achieves a true positive rate
of 0.8 compared to less than 0.05 by prior work (for a fixed
false positive rate of 10−3).
• DeepCorr’s performance rapidly improves with longer flow
• DeepCorr’s correlation time is significantly faster than pre-
vious work for the same target accuracy. For instance, each
DeepCorr correlation takes 2ms compared to RAPTOR’s
more than 20ms, when both target a 95% on identical
dataset.
observations and with larger training sets.
2To be fair, in our comparison with RAPTOR we derive the accuracy metric similar
to RAPTOR’s paper [69]: each flow is paired with only one flow out of all evaluated
flows. For the rest of our experiments, each flow can be declared as correlated with
arbitrary number of intercepted flows, which is a more realistic (and more challenging)
assumption.
2
We hope that our study raises concerns in the community on the
escalating risks of large-scale traffic analysis on Tor communica-
tions in light of the emerging deep learning algorithms. A possible
countermeasure to DeepCorr is deploying traffic obfuscation tech-
niques, such as those employed by Tor pluggable transports [58], on
all Tor traffic. We evaluate the performance of DeepCorr on each of
Tor’s currently-deployed pluggable transports, showing that meek
and obfs4-iat0 provide little protection against DeepCorr’s flow
correlation, while obfs4-iat1 provides a better protection against
DeepCorr (note that none of these obfuscation mechanisms are
currently deployed by public Tor relays, and even obfs4-iat1 is
deployed by a small fraction of Tor bridges [52]). This calls for
designing effective traffic obfuscation mechanisms to be deployed
by Tor relays that do not impose large bandwidth and performance
overheads on Tor communications.
Finally, note that while we present DeepCorr as a flow correla-
tion attack on Tor, it can be used to correlate flows in other flow
correlation applications as well. To demonstrate this, we also apply
DeepCorr to the problem of stepping stone detection [6, 24, 77]
showing that DeepCorr significantly outperforms previous stepping
stone detection algorithms in unreliable network settings.
Organization: The rest if this paper is organized as follows.
2 PRELIMINARIES AND MOTIVATION
Flow correlation attacks, also referred to as confirmation attacks,
are used to link network flows in the presence of encryption and
other content obfuscation mechanisms [13, 17, 24, 43, 50, 65, 78, 82].
In particular, flow correlation techniques can break anonymity in
anonymous communication systems like Tor [15] and mix net-
works [14, 61, 62] by linking the egress and ingress segments
of the anonymous connections through correlating traffic fea-
tures [4, 13, 48, 60, 65, 75, 76, 83]. Alternatively, flow correlation
techniques can be used to identify cybercriminals who use network
proxies to obfuscate their identities, i.e., stepping stone attack-
ers [66, 80, 82].
2.1 Threat Model
Figure 1 shows the main setting of a flow correlation scenario. The
setting consists of a computer network (e.g., Tor’s network) with
M ingress flows and N egress flows. Some of the egress flows are
the obfuscated versions of some of the ingress flows; however, the
relation between such flows can not detected using packet con-
tents due to the use of encryption and similar content obfuscation
techniques like onion encryption. For instance, in the case of Tor,
Fi and Fj are the entry and exit segments of one Tor connection
(see Figure 1), however, such association can not be detected by
inspecting the packet contents of Fi and Fj due to onion encryption.
We call (Fi , Fj) a pair of associated flows.
The goal of an adversary in this setting is to identify (some or
all of) the associated flow pairs, e.g., (Fi , Fj), by comparing traf-
fic characteristics, e.g., packet timings and sizes, across all of the
ingress and egress flows. Linking associated flow pairs using traffic
characteristics is called flow correlation.
A flow correlation adversary can intercept network flows at
various network locations. A Tor adversary, in particular, can inter-
cept Tor flows either by running malicious Tor relays [8, 34, 79] or
Figure 1: The main setting of a flow correlation attack on Tor. The adversary intercepts Tor flows either by running malicious
Tor relays or wiretapping Internet ASes and IXPs.
by controlling/wiretapping Internet ASes or IXPs [37, 67, 69]. We
further elaborate on this in Section 2.3.
Note that in this paper we study passive flow correlation attacks
only; therefore, active flow correlation techniques, also known
as flow watermarks as introduced in Section 2.5, are out of the
scope of this paper. Also, flow correlation is different from website
fingerprinting attacks, as discussed in Section 2.5.
2.2 Existing Flow Correlation Techniques
As mentioned before, flow correlation techniques use traffic fea-
tures, particularly, packet timings, packet sizes, and their variants
(e.g., flow rates, inter-packet delays, etc.), to correlate and link net-
work flows (recall that packet contents can not be used to link flows
in this setting due to content obfuscation, e.g., onion encryption).
For instance, the early work of Paxson and Zhang [82] models
packet arrivals as a series of ON and OFF patterns, which they
use to correlate network flows, and Blum et al. [7] correlate the
aggregate sizes of network packets over time. Existing flow correla-