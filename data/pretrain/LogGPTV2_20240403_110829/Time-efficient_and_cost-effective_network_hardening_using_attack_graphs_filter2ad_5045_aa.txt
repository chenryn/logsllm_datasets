title:Time-efficient and cost-effective network hardening using attack graphs
author:Massimiliano Albanese and
Sushil Jajodia and
Steven Noel
Time-Efﬁcient and Cost-Effective Network Hardening Using Attack Graphs
Massimiliano Albanese∗, Sushil Jajodia∗†, and Steven Noel∗
∗
Center for Secure Information Systems
George Mason University
4400 University Drive, Fairfax, VA 22030
Email: {malbanes,jajodia,snoel}@gmu.edu
†
The MITRE Corporation
7515 Colshire Drive, McLean, VA 22102-7539
Abstract—Attack graph analysis has been established as a
powerful tool for analyzing network vulnerability. However,
previous approaches to network hardening look for exact
solutions and thus do not scale. Further, hardening elements
have been treated independently, which is inappropriate for
real environments. For example, the cost for patching many
systems may be nearly the same as for patching a single
one. Or patching a vulnerability may have the same effect
as blocking trafﬁc with a ﬁrewall, while blocking a port
may deny legitimate service. By failing to account for such
hardening interdependencies, the resulting recommendations
can be unrealistic and far from optimal. Instead, we formalize
the notion of hardening strategy in terms of allowable actions,
and deﬁne a cost model that takes into account the impact of
interdependent hardening actions. We also introduce a near-
optimal approximation algorithm that scales linearly with the
size of the graphs, which we validate experimentally.
Keywords-network hardening, vulnerability analysis, attack
graphs, intrusion prevention, reliability.
I. INTRODUCTION
Attackers can leverage the complex interdependencies of
network conﬁgurations and vulnerabilities to penetrate seem-
ingly well-guarded networks. In-depth analysis of network
vulnerabilities must consider attacker exploits not merely
in isolation, but in combination. Attack graphs reveal such
threats by enumerating potential paths that attackers can take
to penetrate networks. This helps determine whether a given
set of network hardening measures provides safety of given
critical resources.
Attack graph analysis can be extended to automatically
generate recommendations for hardening networks. One
must consider combinations of network conditions to harden,
which has corresponding impact on removing paths in the
attack graph. Further, one can generate hardening solutions
that are optimal with respect to some notion of cost. Such
hardening solutions prevent
the attack from succeeding,
while minimizing the associated costs.
However, as we show, the general solution to optimal
network hardening scales exponentially as the number of
The work presented in this paper is supported in part by the Army
Research Ofﬁce under MURI award number W911NF-09-1-0525, and by
the Ofﬁce of Naval Research under award number N00014-12-1-0461.
978-1-4673-1625-5/12/$31.00 ©2012 IEEE
hardening options itself scales exponentially with the size of
the attack graph. In applying network hardening to realistic
network environments, it is crucial that the algorithms are
able to scale. Progress has been made in reducing the
complexity of attack graph manipulation so that it scales
quadratically (linearly within deﬁned security zones) [1].
However, previous approaches for generating hardening rec-
ommendations search for exact solutions [2], which is an
intractable problem.
Another limitation of previous work is the assumption
that network conditions are hardened independently. This
assumption does not hold true in real network environments.
Realistically, network administrators can take actions that
affect vulnerabilities across the network, such as pushing
patches out to many systems at once. Further, the same
hardening result may be obtained through more than one
action. Overall, to provide realistic recommendations, our
hardening strategy must take such factors into account.
We remove the assumption of independent hardening
actions. Instead, we deﬁne a network hardening strategy as a
set of allowable atomic actions that involve hardening mul-
tiple network conditions. We introduce a formal cost model
that accounts for the impact of these hardening actions.
This allows the deﬁnition of hardening costs that accurately
reﬂect realistic network environments. Because computing
the minimum-cost hardening solution is intractable, we
introduce an approximation algorithm for optimal hardening.
This algorithm ﬁnds near-optimal solutions while scaling al-
most linearly – for certain values of the parameters – with the
size of the attack graph, which we validate experimentally.
Finally, we determine the theoretical upper bound for the
worst-case approximation ratio, and show that, in practice,
the approximation ratio is much lower than such bound.
The paper is organized as follows. Section II discusses
related work. Section III recalls some preliminary deﬁni-
tions, whereas Section IV provides a motivating example.
Then Section V introduces the proposed cost model, and
Section VI describes our approach to time-efﬁcient and cost-
effective network hardening. Finally, Section VII reports ex-
perimental results, and Section VIII gives some concluding
remarks and indicates further research directions.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:49:08 UTC from IEEE Xplore.  Restrictions apply. 
II. RELATED WORKS
A number of tools are available for scanning network
vulnerabilities, such as Nessus [3], but these only report
isolated vulnerabilities. Attack graphs are constructed by
analyzing the inter-dependencies between vulnerabilities and
security conditions that have been identiﬁed in the target
network [4], [5], [6], [7], [8], [9], [10], [11], [12], [13]. Such
analysis can be either forward, starting from the initial state
[8], [12] or backward from the goal state [9], [11]. Model
checking was ﬁrst used to analyze whether the given goal
state is reachable from the initial state [9], [14], but later
used to enumerate all possible sequences of attacks between
the two states [11], [15].
The explicit attack sequences produced by a model
checker face a serious scalability issue, because the number
of such sequences is exponential in the number of vulnerabil-
ities multiplied by the number of hosts. To avoid such com-
binatorial explosion, a more compact representation of attack
graphs was proposed in [4]. The monotonicity assumption
underlies this representation, i.e., an attacker never relin-
quishes any obtained capability. This newer representation
can thus keep exactly one vertex for each exploit or security
condition, leading to an attack graph of polynomial size (in
the total number of vulnerabilities and security conditions).
Attack graphs have also been used for correlating in-
trusion alerts into attack scenarios [16], [17]. Such alert
correlation methods are parallel to our work, because they
aim to employ the knowledge encoded in attack graphs
for detecting and taking actions against actual intrusions,
whereas our work aims to harden the network before any
intrusion may happen.
Algorithms exist to ﬁnd the set of exploits from which the
goal conditions are reachable [4]. This eliminates some ir-
relevant exploits from further consideration because they do
not contribute to reaching the goal condition. The minimal
critical attack set is a minimal set of exploits in an attack
graph whose removal prevents attackers from reaching any
of the goal states [4], [11], [15]. The minimal critical attack
set thus provides solutions to harden the network. However,
these methods ignore the critical fact that consequences can-
not be removed without removing the causes. The exploits in
the solution usually depend on other exploits that also need
to be disabled. The solution is thus not directly enforceable.
Moreover, after taking into account those implied exploits
the solution is no longer minimum.
A more effective solution to automate the task of hard-
ening a network against multi-step intrusions was proposed
by Wang et al. in [2]. Unlike previous approaches, which
require removing exploits, this solution focuses on initially
satisﬁed conditions only. Initial conditions can be disabled,
leading to a readily deployable solution. However, Wang
et al. assumed that initial conditions can be independently
disabled. Although this is true in some cases, there may exist
dependencies between initial conditions, such that removing
certain initial conditions may also disable additional condi-
tions, and this might not be necessary to harden the network.
The work presented in this paper differs signiﬁcantly from
previous work in that we (i) drop the assumption that initial
conditions can be independently disabled; (ii) introduce
a formal cost model; and (iii) present an approximation
algorithm that generates suboptimal solutions efﬁciently.
III. PRELIMINARIES
Attack graphs represent prior knowledge about vulnera-
bilities, their dependencies, and network connectivity. Two
different representations are possible for an attack graph.
First, an attack graph can explicitly enumerate all possible
sequences of vulnerabilities an attacker can exploit to reach
a target, i.e., all possible attack paths. However, such graphs
face a combinatorial explosion in the number of attack
paths. Second, with a monotonicity assumption stating an
attacker never relinquishes obtained capabilities, an attack
graph can record the dependencies among vulnerabilities and
keep attack paths implicitly without losing any information.
The resulting attack graph has no duplicate vertices and
hence has a polynomial size in the number of vulnerabilities
multiplied by the number of connected pairs of hosts.
In this paper, we adopt the deﬁnition of attack graph
presented in [17], which assumes the latter notion of attack
graphs.
Deﬁnition 1 (Attack graph): Given a set of exploits E, a
set of security conditions C, a require relation Rr ⊆ C × E,
and an imply relation Ri ⊆ E × C, an attack graph G is the
directed graph G = (E ∪ C, Rr ∪ Ri), where E ∪ C is the
vertex set and Rr ∪ Ri the edge set.
We denote an exploit as a predicate v(hs, hd), indicating
an exploitation of vulnerability v on the destination host hd,
initiated from the source host hs. Similarly, we write v(h)
for exploits involving only local host h.
A security condition is a predicate c(hs, hd) that indicates
a satisﬁed security-related condition c involving the source
host hs and the destination host hd (when a condition
involves a single host, we simply write c(h)). Examples of
security conditions include the existence of a vulnerability
on a given host or the connectivity between two hosts. Initial
conditions are a special subset of security conditions, as
deﬁned below [2].
Deﬁnition 2 (Initial conditions): Given an attack graph
G = (E∪C, Rr∪Ri), initial conditions refer to the subset of
conditions Ci = {c ∈ C|(cid:2)e ∈ E s.t. (e, c) ∈ Ri}, whereas
intermediate conditions refer to the subset C \ Ci.
Intermediate conditions are usually consequences of ex-
ploits and hence cannot be disabled without removing the
causes. Instead, initial conditions are not created through
the execution of exploits,
thus they might be removed.
Without loss of generality, we will explicitly model only
initial conditions that can be disabled, and omit
initial
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:49:08 UTC from IEEE Xplore.  Restrictions apply. 
ftp(0,1) 
user(0) 
ftp(0,2) 
ftp_rhosts(0,1) 
ftp_rhosts(0,2) 
trust(1,0) 
rsh(0,1) 
trust(2,0) 
rsh(0,2) 
ftp(2,1) 
user(2) 
ftp_rhosts(2,1) 
local_bof(2) 
trust(1,2) 
sshd(0,1) 
sshd(2,1) 
rsh(2,1) 
sshd_bof(0,1) 
sshd_bof(2,1) 
ftp(1,2) 
user(1) 
ftp_rhosts(1,2) 
local_bof(1) 
trust(2,1) 
root(1) 
rsh(1,2) 
root(2) 
Figure 1. An example of attack graph, including initial conditions (purple
ovals), exploits (green rectangles), and intermediate conditions (blue ovals)
conditions that network administrators cannot control, such
as privileges on the attacker’s machine.
IV. MOTIVATING EXAMPLE
Figure 1 depicts an example of attack graph, with exploits
appearing as rectangles and conditions as ovals. Purple ovals
represent initial conditions, whereas blue ovals represent
intermediate conditions. Some modeling simpliﬁcations have
been made, such as combining transport-layer ftp connectiv-
ity between two hosts hs and hd, physical-layer connectivity,
and the existence of the ftp daemon on host hd into a single
condition f tp(hs, hd). In this example, we assume that our
objective is to harden the network with respect to target
condition root(2), i.e., we want to prevent the attacker from
gaining root privileges on host 2. The scenario depicted in
Figure 1 is relatively simple, with three hosts – denoted host
0, 1, and 2 respectively – and four types of vulnerabilities
– f tp rhosts, rsh, sshd bof, and local bof. However,
because multiple interleaved attack paths can lead to the
goal condition, an optimal solution to harden the network is
still not apparent from the attack graph itself, and ﬁnding
such a solution by hand may not be trivial. As an example of
attack path, the attacker can ﬁrst establish a trust relationship
from his machine (host 0) to host 2 (condition trust(2, 0))
via the exploit f tp rhosts(0, 2) on host 2, then gain user
privileges on host 2 (condition user(2)) with an rsh login
(exploit rsh(0, 2)), and ﬁnally achieve the goal condition
root(2) using a local buffer overﬂow attack on host 2
(exploit local bof (2)). The following are some of the valid
attack paths that can be generated using existing algorithms
[4].
• f tp rhosts(0, 2), rsh(0, 2), local bof (2)
• f tp rhosts(0, 1), rsh(0, 1), f tp rhosts(1, 2), rsh(1, 2),
local bof (2)
to prevent
• sshd bof (0, 1), f tp rhosts(1, 2), rsh(1, 2), local bof (2)
Intuitively,
the goal condition from being
satisﬁed, a solution to network hardening must break all
the attack paths leading to the goal. This intuition was
captured by the concept of critical set, that is, a set of
exploits (and corresponding conditions) whose removal from
the attack graph will
invalidate all attack paths. It has
also been shown that ﬁnding critical sets with the min-
imum cardinality is NP-hard, whereas ﬁnding a minimal
critical set (that is, a critical set with no proper subset
being a critical set) is polynomial. Based on the above
attack paths,
there are many minimal critical sets, such
as {rsh(0, 2), rsh(1, 2)}, {f tp rhosts(0, 2), rsh(1, 2)},
{f tp rhosts(1, 2), rsh(0, 2)}, and so on. If any of those
sets of exploits could be completely removed, all the at-
tack paths would become invalid, and hence the target
condition would be unreachable. Unfortunately, the above
solution ignores the following important fact. Not all exploits
are under the direct control of administrators. An exploit
can only be removed by disabling its required conditions,
but not all conditions can be disabled at will. Intuitively,
a consequence cannot be removed without removing its
causes. Some conditions are implied by other exploits. Such
intermediate conditions cannot be independently disabled
without removing the exploits that imply them. Only those
initial conditions that are not implied by any exploit can be
disabled independently of other exploits. Hence, it is impor-
tant to distinguish between these two kinds of conditions, as
formalized in Deﬁnition 2.
For instance, in Figure 1, exploit rsh(1, 2) cannot be inde-
pendently removed, because the two conditions it requires,
trust(2, 1) and user(1), are both intermediate conditions
and cannot be independently disabled. As long as an at-
tacker can satisfy those two conditions through other ex-
ploits (for example, f tp rhosts(1, 2) and sshd bof (2, 1)),
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:49:08 UTC from IEEE Xplore.  Restrictions apply. 
the realization of the exploit rsh(1, 2) is unavoidable.
Hence, any of the above minimal critical sets, such as
{rsh(0, 2), rsh(1, 2)}, is theoretically a sound solution, but
practically not enforceable. For this reason, the approach
proposed in [2] relies on initial conditions only. However, it
has some limitations that we address in this paper.
The approach of [2] has no explicit cost model and
assumes that each initial condition can be independently
disabled. Thus, even when all possible solutions are enu-
merated, determining the one with the minimum cost
is based either on a qualitative notion of cost or on
simply counting the conditions that need to be dis-
abled. For the attack graph of Figure 1,
the algorithm
returns two solutions, {f tp(0, 2), f tp(1, 2)} and
in [2]
{f tp(0, 2), f tp(0, 1), sshd(0, 1)}1. At this point, there is no
clear procedure to decide which solution has the minimum
cost, unless we make the assumption that the cost of remov-
ing each individual condition is assigned by administrators.
the solution {f tp(0, 2),
f tp(1, 2)} to have a lower cost than {f tp(0, 2), f tp(0, 1),
sshd(0, 1)}, as fewer conditions need to be disabled. How-
ever, removing both f tp(0, 2) and f tp(1, 2) may only be
possible if the ftp service on host 2 is shut down. This
action may have a considerable cost in terms of disruption
to legitimate users. In this case,
the combined cost of
removing the conditions {f tp(0, 2), f tp(0, 1), sshd(0, 1)}
may be lower, as it may be achieved by simply blocking
all trafﬁc from host 0.
Intuitively, one may expect
To conclude, note that
the attack graph of Figure 1
has the same hardening solutions as the simpliﬁed attack
graph of Figure 2. This is possible because the algorithm
in [2] traverses the graph from target conditions to initial
conditions, and, relying on the monotonicity assumption,
breaks all the cycles. Intuitively, from the point of view of
a target condition, the attack graph can be seen as a tree
rooted at the target condition and having initial conditions
as the leaf nodes. In fact, each condition is implied by one
or more exploits. In turn, each exploit requires one or more
preconditions to be satisﬁed. We leverage this observation