1 
Bitmap 
b0..1 Transfer Type 10 = Bulk 
b2..7 are reserved. I 
4 
wMaxPacketSize 
2 
Number 
Maximum Packet Size 
6 
bInterval 
1 
Number 
Interval for polling endpoint data 
String Descriptors 
Offset Field 
Size 
Value 
Description 
0 
bLength 
1 
Number 
Size of Descriptor in Bytes 
1 
bDescriptorType 1 
Constant 
String Descriptor (0x03) 
2 
bString 
n 
Unicode 
Unicode Encoded String 
Note: String 0 is a special case that lists available languages.  
Most common is 0x0409 – U.S. English 
BULK-ONLY MASS STORAGE 
DEVICES 
Now that we have learned a little about general devices, without 
further delay… 
USB Flash Drives 
• Hardware 
• Software 
• Filesystems 
• Talk to a flash drive 
Hardware 
Hardware (continued) 
•
Typically utilize NAND flash memory 
•
Memory degrades after 10,000 write cycles  
•
Most chips not even close to high-speed USB speed (480 Mbps) 
•
Can only be written in blocks (usually 512, 2048, or 4096 bytes) 
•
Chips are somewhat easily removed from damaged drives for 
forensic recovery 
•
Some controllers have JTAG capability which can be used for 
memory access 
•
Some controller chips steal some flash memory for themselves 
Hardware (continued) 
•
Nearly all flash drives present themselves as SCSI hard drives 
•
“Hard drive” sectors are typically 512, 2048, or 4096 bytes 
•
SCSI transparent command set is used 
•
Most drives are formatted as one partition or logical unit 
– Additional logical units can hide info from Windows machines 
•
Reported size may not match actual media size 
– Info can be hidden in higher sectors 
– Some cheap drives are out there that grossly over report size 
– A typical 512 byte sector needs 16 bytes for error correction 
Software 
•
Usually implemented in firmware within specialized controller chips 
•
Must: 
– Detect communication directed at drive 
– Respond to standard requests 
– Check for errors 
– Manage power 
– Exchange data 
Filesystems 
•
Most preformatted with FAT or FAT32 
•
NTFS 
•
TrueFFS 
•
ExtremeFFS 
•
JFFS 
•
YAFFS 
•
Various UNIX/Linux file systems 
Talking to a Flash Drive 
• Bulk-Only Mass Storage (aka BBB) protocol used 
– All communications use bulk endpoints 
– Three phases: CBW, data-transport (optional), CSW 
– Commands sent to drive using a Command Block Wrapper 
(CBW) 
– CBW contains Command Block (CB) with actual command 
– Nearly all drives use a (reduced) SCSI command set 
– Commands requiring data transport will send/receive on bulk 
endpoints 
– All transactions are terminated by a Command Status Wrapper 
(CSW) 
Command Block Wrapper 
typedef struct _USB_MSI_CBW { 
unsigned long dCBWSignature; //0x43425355 “USBC” 
unsigned long dCBWTag; // associates CBW with CSW response 
unsigned long dCBWDataTransferLength; // bytes to send or receive 
unsigned char bCBWFlags; // bit 7 0=OUT, 1=IN all others zero 
unsigned char bCBWLUN; // logical unit number (usually zero) 
unsigned char bCBWCBLength; // 3 hi bits zero, rest bytes in CB 
unsigned char bCBWCB[16]; // the actual command block (>= 6 
bytes) 
} USB_MSI_CBW; 
Command Block 
•
6-16 bytes depending on command 
•
Command is first byte 
•
Format Unit Example: 
typedef struct _CB_FORMAT_UNIT { 
unsigned char OperationCode; //must be 0x04 
unsigned char LUN:3; // logical unit number (usually zero) 
unsigned char FmtData:1; // if 1, extra parameters follow command 
unsigned char CmpLst:1; // if 0, partial list of defects, 1, complete 
unsigned char DefectListFormat:3; //000 = 32-bit LBAs 
unsigned char VendorSpecific; //vendor specific code 
unsigned short Interleave; //0x0000 = use vendor default 
unsigned char Control; 
} CB_FORMAT_UNIT; 
Command Block (continued) 
•
Read (10) Example: 
typedef struct _CB_READ10 { 
unsigned char OperationCode; //must be 0x28 
unsigned char RelativeAddress:1; // normally 0 
unsigned char Resv:2; 
unsigned char FUA:1; // 1=force unit access, don't use cache 
unsigned char DPO:1; // 1=disable page out 
unsigned char LUN:3; //logical unit number 
unsigned long LBA; //logical block address (sector number) 
unsigned char Reserved; 
unsigned short TransferLength; 
unsigned char Control; 
} CB_READ10; 
Command Block (continued) 
•
Some Common SCSI 
Commands: 
FORMAT_UNIT=0x4, //required 
INQUIRY=0x12, //required 
MODE_SELECT6=0x15, 
MODE_SELECT10=0x55, 
MODE_SENSE6=0x1A, 
MODE_SENSE10=0x5A, 
READ6=0x08, //required 
READ10=0x28, //required 
READ12=0xA8, 
READ_CAPACITY10=0x25, //required 
READ_FORMAT_CAPACITIES=0x23, 
REPORT_LUNS=0xA0, //required 
REQUEST_SENSE=0x03, //required 
SEND_DIAGNOSTIC=0x1D, //required 
START_STOP_UNIT=0x1B, 
SYNCHRONIZE_CACHE10=0x35, 
TEST_UNIT_READ=0x00, //required 
VERIFY10=0x2F, 
WRITE6=0x0A, //required 
WRITE10=0x2A, 
WRITE12=0xAA 
Command Status Wrapper 
•
Read Sense command can be used for details on failed operations 
typedef struct _USB_MSI_CSW { 
unsigned long dCSWSignature; //0x53425355 “USBS” 
unsigned long dCSWTag; // associate CBW with CSW response 
unsigned long dCSWDataResidue; // difference between requested 
data and actual 
unsigned char bCSWStatus; //00=pass, 01=fail, 02=phase error, reset 
} USB_MSI_CSW; 
HOW DO I BYPASS ENDPOINT 
SECURITY? 
Now that we know how bulk-only mass storage devices work… 
Impersonating another device 
• Social engineering USB style 
• Providing an authorized VID/PID allows device 
connection 
– Backdoors and other useful items can be injected 
– Information can be extracted to portable media 
• Device design allows optional write blocking 
MICROCONTROLLERS ARE 
FUN (AND CHEAP) 
Enough background.  Let the fun begin… 
Fun with Microcontrollers 
• Chip Choice 
• A Microcontroller-Based Impersonator  
Chip Choice Options 
•
AVR (as found in Arduino family) 
– Cheap 
– Well understood 
– Loads of code out there 
– Too underpowered to do USB without external components (cb.formated.command) 
{ 
case BOMS_INQUIRY: 
handle_inquiry(cbw); 
break; 
… 
} 
Example Handler 
void handle_inquiry(boms_cbw_t *cbw) 
{ 
unsigned char buffer[64]; 
unsigned short responseSize; 
boms_csw_t csw; 
if (forward_cbw_to_device(cbw)) 
{ 
if (responseSize = receive_data_from_device(&buffer[0], 36)) 
{ 
forward_data_to_slave(&buffer[0], responseSize); 
if (receive_csw_from_device(&csw)) 
{ 
forward_csw_to_slave(&csw); 
} 
} 
} 
} 
Timer Thread 
•
When device descriptor requested start 1 second timer 
•
When the enumeration complete reset timer 
•
If timer expires try the next VID/PID from list 
•
At end of list could resort to brute force 
Complications 
•
Windows & Linux treat drives differently 
– Windows will try to look for and autoplay media 
– Windows doesn’t appear to see other than first LUN 
– Early prototype experience (with writeblocker this is based on) 
• Worked fine under Linux 
• Caused BSoD on Windows (exploit?) 
– Linux seems to pull in a lot of data up front 
– Windows misbehaves if you correctly fail some commands such as Write 
Endpoint security on Linux 
•
Can use udev rules to emulate Windows endpoint security software 
on Linux 
•
Open source provides a great value 
– Better value 
– Equally ineffective, but at a better price 
IT’S DEMO TIME! 
And now what you really wanted to see… 
Food for thought 
•
Speed up process by searching registry for previously mounted 
devices 
– USBDevView or something similar might be helpful 
•
Use larger device to divine authorized device then use a collection of 
smaller devices preprogrammed to appropriate VID/PID 
•
Like all devices this may be thwarted 
– Device operates at full speed only 
– Endpoint software could use proprietary drivers 
• Security through obscurity? 
References 
•
USB Complete: The Developers Guide (4th ed.) by Jan Axelson 
•
USB Mass Storage: Designing and Programming Devices and 
Embedded Hosts by Jan Axelson 
•
http://www.usb.org  
•
http://www.ftdichip.com for more on VNC2 
•
http://seagate.com for SCSI references 
•
Embedded USB Design by Example by John Hyde 
•
My 44Con USB Flash Drive Forensics Video 
http://www.youtube.com/watch?v=CIVGzG0W-DM 
•
Schematics and source code are available  
– Git hub usb-impersonator 
– Email PI:EMAIL 
– Twitter @ppolstra  
Questions?