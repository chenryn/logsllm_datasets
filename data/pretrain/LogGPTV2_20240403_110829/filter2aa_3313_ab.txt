# USB Mass Storage Devices and Bulk-Only Protocol

## Bitmap
- **b0..1 Transfer Type**: 10 = Bulk
- **b2..7**: Reserved

## wMaxPacketSize
- **Size**: 2 bytes
- **Type**: Number
- **Description**: Maximum Packet Size

## bInterval
- **Size**: 1 byte
- **Type**: Number
- **Description**: Interval for polling endpoint data

## String Descriptors
- **Offset Field**:
  - **bLength**: 1 byte, Size of Descriptor in Bytes
  - **bDescriptorType**: 1 byte, Constant (String Descriptor, 0x03)
  - **bString**: n bytes, Unicode Encoded String
- **Note**: String 0 is a special case that lists available languages. The most common is 0x0409 (U.S. English).

## BULK-ONLY MASS STORAGE DEVICES
### USB Flash Drives
- **Hardware**:
  - Typically utilize NAND flash memory.
  - Memory degrades after 10,000 write cycles.
  - Most chips do not reach high-speed USB speed (480 Mbps).
  - Can only be written in blocks (usually 512, 2048, or 4096 bytes).
  - Chips can be removed from damaged drives for forensic recovery.
  - Some controllers have JTAG capability for memory access.
  - Some controller chips reserve some flash memory for themselves.

- **Software**:
  - Implemented in firmware within specialized controller chips.
  - Must detect communication, respond to standard requests, check for errors, manage power, and exchange data.

- **Filesystems**:
  - Commonly preformatted with FAT or FAT32.
  - Other filesystems include NTFS, TrueFFS, ExtremeFFS, JFFS, YAFFS, and various UNIX/Linux file systems.

- **Talking to a Flash Drive**:
  - Uses the Bulk-Only Mass Storage (BBB) protocol.
  - All communications use bulk endpoints.
  - Three phases: CBW (Command Block Wrapper), data-transport (optional), CSW (Command Status Wrapper).
  - Commands are sent using a Command Block Wrapper (CBW).
  - CBW contains a Command Block (CB) with the actual command.
  - Nearly all drives use a (reduced) SCSI command set.
  - Commands requiring data transport will send/receive on bulk endpoints.
  - All transactions are terminated by a Command Status Wrapper (CSW).

### Command Block Wrapper (CBW)
```c
typedef struct _USB_MSI_CBW {
    unsigned long dCBWSignature; // 0x43425355 “USBC”
    unsigned long dCBWTag; // associates CBW with CSW response
    unsigned long dCBWDataTransferLength; // bytes to send or receive
    unsigned char bCBWFlags; // bit 7 0=OUT, 1=IN, all others zero
    unsigned char bCBWLUN; // logical unit number (usually zero)
    unsigned char bCBWCBLength; // 3 hi bits zero, rest bytes in CB
    unsigned char bCBWCB[16]; // the actual command block (>= 6 bytes)
} USB_MSI_CBW;
```

### Command Block
- **Format Unit Example**:
```c
typedef struct _CB_FORMAT_UNIT {
    unsigned char OperationCode; // must be 0x04
    unsigned char LUN:3; // logical unit number (usually zero)
    unsigned char FmtData:1; // if 1, extra parameters follow command
    unsigned char CmpLst:1; // if 0, partial list of defects, 1, complete
    unsigned char DefectListFormat:3; // 000 = 32-bit LBAs
    unsigned char VendorSpecific; // vendor specific code
    unsigned short Interleave; // 0x0000 = use vendor default
    unsigned char Control;
} CB_FORMAT_UNIT;
```

- **Read (10) Example**:
```c
typedef struct _CB_READ10 {
    unsigned char OperationCode; // must be 0x28
    unsigned char RelativeAddress:1; // normally 0
    unsigned char Resv:2;
    unsigned char FUA:1; // 1=force unit access, don't use cache
    unsigned char DPO:1; // 1=disable page out
    unsigned char LUN:3; // logical unit number
    unsigned long LBA; // logical block address (sector number)
    unsigned char Reserved;
    unsigned short TransferLength;
    unsigned char Control;
} CB_READ10;
```

### Common SCSI Commands
- `FORMAT_UNIT=0x04` (required)
- `INQUIRY=0x12` (required)
- `MODE_SELECT6=0x15`
- `MODE_SELECT10=0x55`
- `MODE_SENSE6=0x1A`
- `MODE_SENSE10=0x5A`
- `READ6=0x08` (required)
- `READ10=0x28` (required)
- `READ12=0xA8`
- `READ_CAPACITY10=0x25` (required)
- `READ_FORMAT_CAPACITIES=0x23`
- `REPORT_LUNS=0xA0` (required)
- `REQUEST_SENSE=0x03` (required)
- `SEND_DIAGNOSTIC=0x1D` (required)
- `START_STOP_UNIT=0x1B`
- `SYNCHRONIZE_CACHE10=0x35`
- `TEST_UNIT_READY=0x00` (required)
- `VERIFY10=0x2F`
- `WRITE6=0x0A` (required)
- `WRITE10=0x2A`
- `WRITE12=0xAA`

### Command Status Wrapper (CSW)
```c
typedef struct _USB_MSI_CSW {
    unsigned long dCSWSignature; // 0x53425355 “USBS”
    unsigned long dCSWTag; // associate CBW with CSW response
    unsigned long dCSWDataResidue; // difference between requested data and actual
    unsigned char bCSWStatus; // 00=pass, 01=fail, 02=phase error, reset
} USB_MSI_CSW;
```

## Impersonating Another Device
- **Social Engineering USB Style**:
  - Providing an authorized VID/PID allows device connection.
  - Backdoors and other useful items can be injected.
  - Information can be extracted to portable media.
  - Device design allows optional write blocking.

## Microcontrollers
- **Chip Choice**:
  - **AVR (as found in Arduino family)**:
    - Cheap and well understood.
    - Lots of available code.
    - Underpowered for USB without external components.

- **Example Handler**:
```c
void handle_inquiry(boms_cbw_t *cbw) {
    unsigned char buffer[64];
    unsigned short responseSize;
    boms_csw_t csw;

    if (forward_cbw_to_device(cbw)) {
        if (responseSize = receive_data_from_device(&buffer[0], 36)) {
            forward_data_to_slave(&buffer[0], responseSize);
            if (receive_csw_from_device(&csw)) {
                forward_csw_to_slave(&csw);
            }
        }
    }
}
```

- **Timer Thread**:
  - When the device descriptor is requested, start a 1-second timer.
  - Reset the timer when enumeration is complete.
  - If the timer expires, try the next VID/PID from the list.
  - At the end of the list, resort to brute force.

- **Complications**:
  - Windows and Linux treat drives differently.
  - Windows tries to autoplay media and may not see other than the first LUN.
  - Early prototypes worked fine under Linux but caused Blue Screen of Death (BSoD) on Windows.
  - Linux pulls in a lot of data upfront, while Windows misbehaves if you correctly fail some commands such as Write.

- **Endpoint Security on Linux**:
  - Use udev rules to emulate Windows endpoint security software on Linux.
  - Open source provides better value but is equally ineffective.

## Food for Thought
- Speed up the process by searching the registry for previously mounted devices.
- Use a larger device to determine authorized devices and then use a collection of smaller devices preprogrammed with the appropriate VID/PID.
- This method may be thwarted by devices operating at full speed only or using proprietary drivers.

## References
- "USB Complete: The Developers Guide (4th ed.)" by Jan Axelson
- "USB Mass Storage: Designing and Programming Devices and Embedded Hosts" by Jan Axelson
- [USB.org](http://www.usb.org)
- [FTDI Chip](http://www.ftdichip.com) for more on VNC2
- [Seagate](http://seagate.com) for SCSI references
- "Embedded USB Design by Example" by John Hyde
- My 44Con USB Flash Drive Forensics Video: [YouTube Link](http://www.youtube.com/watch?v=CIVGzG0W-DM)
- Schematics and source code are available on GitHub: [usb-impersonator](https://github.com/yourusername/usb-impersonator)
- Email: [PI:EMAIL]
- Twitter: [@ppolstra]

**Questions?**