Javascript code from expired or mis-typed domains by web
applications not maintained properly. If an attacker regis-
ters such a domain and starts hosting malicious Javascript,
then all the users of site that include this Javascript become
vulnerable [21].
Cross-site scripting. An XSS vulnerability exists whenever
one site trusts user input and presents it to another site without
sanitizing it ﬁrst. These attacks are signiﬁcant when input
from one user would be exposed to another user. Prime
candidates for these attacks are social networking sites where
users interact with each other frequently. Even on ﬁnancial
sites such as banking, one user may send a message to another
while transferring money. We acknowledge that mounting this
attack is challenging because vulnerabilities are site-speciﬁc.
Yet, considering that XSS is one of the most widely present
web vulnerabilities and has been discovered in almost all top
websites [23], it is still worth considering that an attacker may
be able to steal cookies via an XSS attack.
2.4 Why Existing Defenses Are Insufﬁcient
It is reasonable to think that perhaps all cookies should have
the secure (or at least HttpOnly) attribute set, to prevent
attacks such as the ones we have outlined. Unfortunately,
such an approach is too coarse. Setting HttpOnly on all
cookies is not a viable approach because some Javascript
occasionally needs legitimate access to a user cookie. One
example are “double submit cookies”, a mechanism to pre-
vent cross-site request forgery whereby a web client sends a
random value in both a cookie and a request parameter and
the server checks that the two values are equal [24]. Addition-
ally, setting secure on all cookies is not practical because
sometimes (often for performance reasons) an application
may serve content over both HTTP and HTTPS.
A security mechanism called HTTP Strict Transport Se-
curity (HSTS) defends against certain types of man-in-the
middle attacks by forcing certain HTTP transfers to occur
over HTTPS, whenever possible. Unforunately, HSTS is not
a silver bullet solution. Forcehttps [19], which inspired HSTS,
acknowledges that due to various complexities of a website’s
code, deploying HSTS would require very careful analysis of
a site, shifting of subdomains wherever necessary; sometimes,
Figure 2: The cumulative number of auth-cookies present on ex-
plored different sub-services on various websites. The number of
sub-services that we explored on each site is given in parentheses
next to the site name. Many other sites that we have not shown used
two auth-cookies.
2.3 When Auth-Cookies Can Be Stolen
Of course, any on-path attacker can sniff cookies that are not
encrypted via HTTPS. Thus, auth-cookies that are sent over
unencrypted channels (e.g., cleartext HTTP) are cause for
concern. Additionally, a vulnerable DNS server would allow
an attacker to poison its cache and reroute victim’s trafﬁc
to machines under attacker’s control [3]. Below, we present
several plausible scenarios where an attacker can cause the
user’s browser to divulge auth-cookies for a speciﬁc site.
Man-in-the-middle attack with DNS trafﬁc manipulation.
An on-path attacker or any attacker who can control and
manipulate DNS trafﬁc destined for a user’s machine—as is
the case with untrusted WiFi hotspots, DNS servers that are
vulnerable to cache poisoning, or rogue ISPs—can induce
the user’s browser to submit all auth-cookies without the
secure ﬂag across any site where the user is logged in.
To illustrate the subtlety of this attack, suppose that the
victim is logged into a Yahoo mail accout and always accesses
mail.yahoo.com over HTTPS; suppose also that that the
secure ﬂag is not set on the sess-id auth-cookie for
mail.yahoo.com. In this case, HTTPS provides a false
sense of security: To hijack the user’s session, the attacker
might resolve DNS lookups for the domains of embedded
resources (e.g., advertisements) to (or through) a machine that
is under the user’s control. The attacker can then inject new
content in place of existing ads, such as http://
mail.yahoo.com/gotyou.jpg. Even gener-
ally reputable ISPs have performed such attacks in the past:
for example, a large French ISP, Orange, was performing
this type of ad substitution [18]. Once the victim’s browser
receives this modiﬁed advertisement, his browser will try to
fetch this image causing the browser to issue an HTTP request
4
0123456789101112Total Number of Auth-CookiesAmazon(3)Google(5)GoDaddy(1)Dropbox(1)eBay(2)Comcast(1)Yahoo(2)Match(2)Facebook(2)WellsFargo(1)Netflix(2)Live(1)reorganizing a site to use HSTS without breaking the site’s
functionality is not even possible. Even if HSTS is deployed,
it may not be conﬁgured correctly and can thus still be vul-
nerable to SSL downgrading attacks [15]. As a result of these
practicalities, HSTS is still not widely deployed: according
to one report from July 2014 [27], only 1,756 sites out of
approximately 150,000 popular sites had deployed HSTS.
Furthermore, some browsers such as Internet Explorer do not
even support HSTS [17].
Because simple coarse grained approaches are not sufﬁ-
cient, users, web application developers, and website oper-
ators need better tools to compute a site’s auth-cookies to
better assess and defend against potential attacks. The ﬁrst
step in protecting a user’s auth-cookies involves determining
which cookies are auth-cookies in the ﬁrst place. The next
section explains why this problem is challenging.
3 Computing Auth-Cookies
We want to compute auth-cookies both at design time (to help
website administrators) and at runtime (to help users); these
requirements impose signiﬁcant challenges. We aim to design
a tool for computing auth-cookies that is both general (i.e., it
should compute auth-cookies on as many sites as possible)
and transparent (i.e., it should not interfere with a user’s
active sessions to any site). In this section, we outline the
challenges that we faced in realizing this goal.
3.1 Strawman Approach
Given a general webpage and cookies set by the webpage’s
domain, we want to ﬁnd out which combination of cookies
will allow access to that webpage. To do so requires gener-
ating combinations of cookies and fetch webpage under test
with only those cookies enabled. At a high level, our solution
proceeds as follows:
1. fetch a webpage without suppressing any cookies,
2. generate combination of cookies to be disabled and then
fetching a webpage with rest of the cookies enabled.
3. compare the response page with the one fetched in
Step 1.
4. if the webpage is not fetched successfully, then we mark
the disabled cookies combination as a required combina-
tion to access that webpage.
Unfortunately, determining whether the page fetch succeeded
is difﬁcult; it is also application-speciﬁc. For example, failure
modes include showing error message, redirecting the user to
a login page, or redirecting to default front page. One could
use various statistical or image comparison techniques to com-
pare the two pages, but the threshold to deﬁne statistically
signiﬁcant results will still vary from site to site. For example,
on a site such as Google Mail, the difference between fetched
default webpage at mail.google.com when auth-cookies
are suppressed vs. when they are not, can be detected using a
statistical or image comparison algorithm. On the other hand,
on sites like Amazon, there is practically no difference be-
tween fetched default webpage www.amazon.com whether
5
Figure 3: A distribution showing the number of cookies that each
of 45 popular websites set on a user’s machine. Half of these sites
set more than 20 cookies.
one suppresses auth-cookies or not, because Amazon is an e-
commerce web site that shows a user product advertisements
on the front page whether the user is logged in or not.
We observe that on most sites, when a user is logged in
and the browser sends all cookies to the server, the username
is usually present somewhere at the top of the page or on
the left side of the page. Thus, testing whether an HTTP
request was performed as a logged-in user reduces to checking
whether the user’s username is present somewhere on the
page where usernames normally appear. Of course, there
are exceptions that to not conform to this heuristic, but we
found this heuristic to work very well on a large number of
sites; our implementation can always be extended to handle
these less-frequent corner cases. Naturally, making such
an algorithm work in practice entails a considerable set of
additional challenges, which we now describe.
3.2 Computing Auth-Cookies is Hard
Many practical complications require us to adapt the basic ap-
proach we described. In this section, we describe the practical
challenges assoicated with computing auth-cookies.
3.2.1 Many possible cookie combinations
The search space is exponential. A browser often handles
at least 50 cookies per domain, with the size of each cookie as
large as 4,096 bytes [4]. Figure 3 highlights the complexity of
this problem, showing a distribution of the number of cookies
that 45 different popular websites set—more than half of the
sites set 20 cookies. In the case of some domains such as
Google, we saw as many as 130 cookies being set for a single
domain. For many sites, any one of multiple combinations of
auth-cookies can allow a user to access a site. Determining
all possible combinations of auth-cookies that give a user
access to a site or service is thus exponential in the number
of cookies that the site sets. If a site sets 50 cookies (as in
the case of Google, which sometimes sets as many as 120
010203040506070Number of cookies set by each site0.00.20.40.60.81.0Fraction of sitescookies), then assuming a page load time of 200 ms, then
testing all combinations could take about 7 million years.1
Focusing only on login cookies doesn’t work. One might
assume that the cookies that serve as auth-cookie combina-
tions will only be set during login process. This turns out to
be false. In other words, it might be reasonable to assume
that when a user visits a website, enters a password, and suc-
cessfully logs in to the website, the cookies set during this
process—the “login cookies”—will contain the auth-cookies.
For example, when a user logs in to Google, we observe
that usually between 14–20 cookies are set, compared to the
80–120 cookies that the site sets over the course of a user’s in-
teractions with the site. If we only searched for auth-cookies
combinations by exhausting all combinations of the login
cookies, we would signiﬁcantly reduce our search space. Yet,
for authorization to Google Calendar, the auth-cookie is only
set after user visits that part of the site but is set without re-
quiring the user to log in again. (The auth-cookie for Google
Calendar is not set during the normal login process in Google.)
In another case, Amazon does not delete or change many of
the auth-cookies after a user logs out. These auth-cookies
will not be explicitly set during subsequent logins, so simply
searching among the set of cookies that are set at login time
does not work.
Identifying auth-cookies by cookie properties doesn’t
work. One might assume that if a cookie value looks random,
is “long enough”, and changes across multiple login sessions
then it can be assumed to be a part of auth-cookie combina-
tion. On the other hand, if the auth-cookie value does not
change across login sessions or does not have enough entropy,
then it is not a part of auth-cookies. Unfortunately, we ob-
served that some cookies that do not satisfy these properties
are still part of the auth-cookie combination. For example, in
case of Facebook, the c_user cookie is a part of the auth-
cookie combination; yet, this cookie appears to serve as some
type of a user ID and does not change across login sessions.
Similarly, in the case of Twitter, the _twitter_sess
cookie is set to some opaque 200-character string that changes
across login sessions. Its name and its changing value sug-
gest that it may be an auth-cookie, but it is not. Instead, the
auth_token cookie whose 40 hex character value remains
constant across login sessions is the sole auth-cookie!
3.2.2 Different websites with unique designs
Computing auth-cookies for as many sites as possible re-
quires a ﬁeld deployment with real users.
It is easy to
generate auth-cookie combinations in controlled laboratory
experiments using a modiﬁed browser environment such as
1This problem is NP-hard. A SAT-problem with ’N’ variables can be
solved in polynomial time by an oracle for this problem. For this, we can
construct a privileged operation that is performed by the web server only if the
SAT-equation is satisﬁed. The browser also has ’N’ cookies corresponding
to ’N’ variables. Assignment to each of the ’N’ variables at the server side
is decided by which cookies are present in the HTTP request. An oracle
can decide the existence of the auth-cookies combinations to execute the
privileged operation ultimately solving the SAT problem in polynomial time.
Selenium. This approach makes it possible to compute auth-
cookie combinations for sites where we already have ac-
counts, but does not allow us to compute auth-cookies for the
large number of sites where we do not have (or do not want to
generate) accounts. For many sites that we aim to study, we
might not even be able to obtain accounts because account
membership would ﬁrst require afﬁliation with some institu-
tion (e.g., an account on a banking site would ﬁrst require
having a bank account with that institution). The requirement
for a ﬁeld deployment introduces its own set of challenges,
which we describe below.
Determining the URL to use for computing a site’s auth-
cookies is difﬁcult. On many sites, if the browser visits a
website without a speciﬁc path, the browswer is redirected
to a page where the username is visible, which allows us to
complete our test. On other sites, even if the user is logged
in, if we test an incorrect URL (or even the correct URL
with incorrect parameters), the web server may redirect to a
webpage with anonymous context or even log the user out
entirely, which not only prevents us from running our test but
could also disrupt the user who has installed the tool.
Sending incorrect cookies can disrupt the user’s experi-
ence. Sending a website incorrect cookies can cause the
website to log a user out, disrupting the user session. For
example, Facebook has an auth-cookies combination ’xs
AND c_user’, and dropping xs resets the c_user cookie
and logs the user out. Thus, we needed to devise a mechanism
to send arbitrary cookie sets from a real user’s browser with-
out disrupting the user if we send an incorrect or invalid set
of cookies. To do so, we run all tests using an in-memory set
of shadow cookies that mimic the user’s real set of cookies.
Testing by removing cookies from HTTP requests is not
effective. Because a browser automatically sends present
cookies stored in the user’s browser, a tool could perform
tests by temporarily suppressing cookies from HTTP requests.
Unfortunately, doing so runs the risk of interfering with the
rest of the user’s normal interactions on the site while the
test is underway. Additionally, occasionally a server will
detect the absence of a cookie, set it once again in HTTP
response, and redirect the browser to originally requested
page. This behavior can interfere with testing. Finally, recall
that the tool’s test for successful page load is the presence
of usernames. Yet, a user can have various proﬁle names on
different sites that may be different from the username they
enter to login, and we cannot expect users to conﬁgure all
usernames that he has used on various sites.
3.2.3 Timing and transient behavior
Transient failures actions can appear as failed login at-
tempts. The tool might wrongly interpret a failure to success-
fully load a login page as a result of a network or server failure
as a login failure. To mitigate some of these effects, factors
such as the client processor and memory load, as well as
6
network reachability, should also be taken into consideration
before starting off this investigation.
A user may log out during a test. For the tool to compute
auth-cookies for a site, a user must be logged into the site in
the ﬁrst place. Yet, in the absence of a successful log in event,
detecting whether a user is logged in is difﬁcult. Additionally,
a user might log out in the middle of the investigation, or a
session might timeout. In such cases, if the tool notices that a
user is logged out but does not determine that the logout was
due to a user-initiated action, the tool might wrongly infer
that certain cookies were part of the set of auth-cookies. In
the case of a session timeout, information from in-progress
tests might also be lost.
3.2.4 Usability Concerns
Because we want our algorithms to be useful to both website
administrators and users, we need to consider various usability
concerns, such as when to execute a particular test and what
action to take if our algorithms detect a vulnerability. One of
the most important concerns is how to compute auth-cookies
at runtime without intefering with a user’s normal browsing
session. We perform a backup of the user’s cookies and run
tests using a “shadow” cookie store to ensure that testing
never interferes with a user’s actual session. The tool also
only performs testing against a particular website when it
determines that a user is not accessing that site. We also
provide the user with various options to control both the
frequency of tests and the types of mitigating actions to take
if the tool detects a vulnerability.