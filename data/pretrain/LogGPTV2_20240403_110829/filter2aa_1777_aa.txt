### ProxyLogon: Just the Tip of the Iceberg
A New Attack Surface on Microsoft Exchange Server

**Presenter: Orange Tsai**

**About Orange Tsai:**
- **Focus:** Web and Application 0-day research
- **Title:** Principal Security Researcher at DEVCORE
- **Role:** Captain of HITCON CTF Team
- **Speaker at:** Security Conferences including Black Hat USA & ASIA, DEFCON, HITB, and HITCON
- **Selected Awards and Honors:**
  - 2017: 1st place in Top 10 Web Hacking Techniques
  - 2018: 1st place in Top 10 Web Hacking Techniques
  - 2019: Winner of Pwnie Awards for "Best Server-Side Bug"
  - 2021: Champion and "Master of Pwn" at Pwn2Own

**Disclaimer:**
All vulnerabilities disclosed today have been reported responsibly and patched by Microsoft.

### Why Target Microsoft Exchange Server?
1. **Confidential Secrets:** Mail servers, especially Exchange Server, store highly confidential information and are widely used by enterprises and governments.
2. **Nation-State Targets:** Exchange Server has long been a target for nation-state-sponsored hackers (e.g., Equation Group).
3. **Exposure:** Over 400,000 Exchange servers are exposed on the Internet, according to our survey.

### Exchange Security in the Past Years
Most bugs have been based on known attack vectors, but several notable ones stand out:
1. **EnglishmansDentist from Equation Group:**
   - **Recap:** A practical and public pre-auth RCE in Exchange history, though it only works on an ancient Exchange Server 2003.
2. **CVE-2020-0688 (Hardcoded MachineKey):**
   - **Recap:** A classic .NET deserialization bug due to a hardcoded cryptography key, indicating a lack of security reviews in Microsoft Exchange.

### Our Work
- **Focus:** We concentrated on the Exchange architecture and discovered a new attack surface that no one had proposed before. This is why we were able to easily uncover 0-days.
- **Discoveries:** We identified 8 vulnerabilities across server-side, client-side, and cryptographic areas, which we chained into three attacks:
  1. **ProxyLogon:** The most well-known pre-auth RCE chain.
  2. **ProxyOracle:** A plaintext-password recovery attack chain.
  3. **ProxyShell:** The pre-auth RCE chain demonstrated at Pwn2Own 2021.

### Vulnerabilities We Discovered
| Report Time | Name | CVE | Patch Time | Reported by |
|-------------|------|-----|------------|-------------|
| Jan 05, 2021 | ProxyLogon | CVE-2021-26855 | Mar 02, 2021 | Orange Tsai, Volexity, and MSTIC |
| Jan 05, 2021 | ProxyLogon | CVE-2021-27065 | Mar 02, 2021 | Orange Tsai, Volexity, and MSTIC |
| Jan 17, 2021 | ProxyOracle | CVE-2021-31196 | Jul 13, 2021 | Orange Tsai |
| Jan 17, 2021 | ProxyOracle | CVE-2021-31195 | May 11, 2021 | Orange Tsai |
| Apr 02, 2021 | ProxyShell (Pwn2Own Bug) | CVE-2021-34473 | Apr 13, 2021 | Orange Tsai (Working with ZDI) |
| Apr 02, 2021 | ProxyShell (Pwn2Own Bug) | CVE-2021-34523 | Apr 13, 2021 | Orange Tsai (Working with ZDI) |
| Apr 02, 2021 | ProxyShell (Pwn2Own Bug) | CVE-2021-31207 | May 11, 2021 | Orange Tsai (Working with ZDI) |
| Jun 02, 2021 | - | - | - | Orange Tsai |

### Related Vulnerabilities
| Dubbed to | CVE | Patch Time | Reported by |
|-----------|-----|------------|-------------|
| HAFNIUM | CVE-2021-26855 | Mar 02, 2021 | Orange Tsai, Volexity, and MSTIC |
| HAFNIUM | CVE-2021-27065 | Mar 02, 2021 | Orange Tsai, Volexity, and MSTIC |
| HAFNIUM | CVE-2021-26857 | Mar 02, 2021 | Dubex and MSTIC |
| HAFNIUM | CVE-2021-26858 | Mar 02, 2021 | MSTIC |
| - | CVE-2021-28480 | Apr 13, 2021 | NSA |
| - | CVE-2021-28481 | Apr 13, 2021 | NSA |
| - | CVE-2021-28482 | Apr 13, 2021 | NSA |
| - | CVE-2021-28483 | Apr 13, 2021 | NSA |

### Exchange Architecture
- **Backend Server:**
  - Mailbox Role
  - Hub Transport Role
  - Unified Messaging Role
  - Edge Transport Role
- **Frontend Server:**
  - Client Access Role
  - Applications in Frontend include the ProxyModule, which parses incoming HTTP requests, applies protocol-specific settings, and forwards them to the Backend.
  - Applications in Backend include the BackendRehydrationModule, which receives and populates HTTP requests from the Frontend.
  - Synchronization of internal information between Frontend and Backend is done via HTTP headers.

### Focus Area
- **Client Access Service (CAS):** A fundamental protocol handler in Microsoft Exchange Server. According to Microsoft documentation, CAS accepts client connections for all protocols and routes or proxies connections to the corresponding backend services.

### Key Components in IIS
- **IIS Modules:**
  - Validation Module
  - Logging Module
  - Filter Module
  - FBA Module
  - OAuth Module
  - Rehydration Module
  - RoutingUpdate Module
  - RBAC Module
  - HTTP Proxy Module

### Our Ideas
- **Accessing the Backend Intentionally:**
  - **HTTP Header Blacklists:**
    ```csharp
    protected virtual bool ShouldCopyHeaderToServerRequest(string headerName) {
        return !string.Equals(headerName, "X-CommonAccessToken", OrdinalIgnoreCase) 
            && !string.Equals(headerName, "X-IsFromCafe", OrdinalIgnoreCase) 
            && !string.Equals(headerName, "X-SourceCafeServer", OrdinalIgnoreCase) 
            && !string.Equals(headerName, "msExchProxyUri", OrdinalIgnoreCase) 
            && !string.Equals(headerName, "X-MSExchangeActivityCtx", OrdinalIgnoreCase) 
            && !string.Equals(headerName, "return-client-request-id", OrdinalIgnoreCase) 
            && !string.Equals(headerName, "X-Forwarded-For", OrdinalIgnoreCase) 
            && (!headerName.StartsWith("X-Backend-Diag-", OrdinalIgnoreCase) 
                || this.ClientRequest.GetHttpRequestBase().IsProbeRequest());
    }
    ```
  - **Cloning User Identity:**
    ```csharp
    if (this.ClientRequest.IsAuthenticated) {
        CommonAccessToken commonAccessToken = AspNetHelper.FixupCommonAccessToken(
            this.HttpContext, this.AnchoredRoutingTarget.BackEndServer.Version);
        if (commonAccessToken != null) {
            headers["X-CommonAccessToken"] = commonAccessToken.Serialize(
                new int?(HttpProxySettings.CompressTokenMinimumSize.Value));
        }
    } else if (this.ShouldBackendRequestBeAnonymous()) {
        headers["X-CommonAccessToken"] = new CommonAccessToken(9).Serialize();
    }
    ```
  - **Generating Kerberos Ticket:**
    ```csharp
    internal static string GenerateKerberosAuthHeader(string host, int traceContext, ref
    AuthenticationContext authenticationContext, ref string kerberosChallenge) {
        // â€¦
        authenticationContext = new AuthenticationContext();
        authenticationContext.InitializeForOutboundNegotiate(AuthenticationMechanism.Kerberos,
        "HTTP/" + host, null, null);
        SecurityStatus securityStatus = authenticationContext.NegotiateSecurityContext(inputBuffer, 
        out bytes);
        return "Negotiate " + Encoding.ASCII.GetString(bytes);
    }
    ```

### Conclusion
Our research has uncovered a new attack surface in Microsoft Exchange Server, leading to the discovery of multiple critical vulnerabilities. These findings highlight the importance of continuous security reviews and updates to protect against emerging threats.