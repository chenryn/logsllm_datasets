title:MNTP: Enhancing Time Synchronization for Mobile Devices
author:Sathiya Kumaran Mani and
Ramakrishnan Durairajan and
Paul Barford and
Joel Sommers
MNTP: Enhancing Time Synchronization for Mobile
Devices
Sathiya Kumaran Mani†, Ramakrishnan Durairajan†, Paul Barford†+, Joel Sommers*
{sathiya,rkrish,pb}@cs.wisc.edu, PI:EMAIL
†University of Wisconsin - Madison
+comScore, Inc.
*Colgate University
ABSTRACT
Clock synchronization between Internet hosts is important
in a variety of applications including gaming, ﬁnance and
measurement. While clock synchronization issues in wireline
networks have been well studied, mobile hosts present chal-
lenges that have not received as much attention. In this paper,
we describe a study of clock synchronization in mobile hosts,
which often implement a simpliﬁed version of the Network
Time Protocol (NTP), known as SNTP, due to resource con-
straints typical of mobile devices. We begin by reporting an
analysis of logs from NTP servers that highlights the signiﬁ-
cant differences in synchronization behavior of wireline vs.
wireless hosts. This analysis motivates a laboratory-based
study of the details of clock synchronization on mobile hosts,
which reveals the causes and extent to which synchronization
can become misaligned. We then describe a new protocol
that we call Mobile NTP (MNTP), which is designed to be
simple, efﬁcient and easy to deploy. We implement MNTP
on a wireless laptop and demonstrate its capability over a
range of operating conditions. We ﬁnd that MNTP maintains
clock synchronization to within 25ms of a reference clock,
which is over 12 times better than standard SNTP.
CCS Concepts
works;
•Networks → Network protocol design; Mobile net-
Keywords: SNTP; Wireless; Mobile; Time; Measurement
1.
INTRODUCTION
The notion of time and the invention of mechanisms to
track it have a long history. One perhaps inevitable aspect
of time was the need to synchronizing clocks in separate
Permission to make digital or hard copies of all or part of this work for personal
or classroom use is granted without fee provided that copies are not made or
distributed for proﬁt or commercial advantage and that copies bear this notice
and the full citation on the ﬁrst page. Copyrights for components of this work
owned by others than ACM must be honored. Abstracting with credit is per-
mitted. To copy otherwise, or republish, to post on servers or to redistribute to
lists, requires prior speciﬁc permission and/or a fee. Request permissions from
permissions@acm.org.
IMC 2016, November 14-16, 2016, Santa Monica, CA, USA
© 2016 ACM. ISBN 978-1-4503-4526-2/16/11. . . $15.00
DOI: http://dx.doi.org/10.1145/2987443.2987484
geographic locations. This capability ﬁrst emerged in earnest
in the 19th century to enable complex railway schedules to
be managed [48]. Modern computing and communication
systems rely intrinsically on time synchronization for basic
operation and in a wide variety of distributed applications.
The basic operation of time synchronization in a distributed
environment assumes the presence of a high precision ref-
erence clock, which serves as the source of accurate time
for other systems. Remote systems interact with the ref-
erence clock periodically to synchronize (discipline) their
local clock. The primary challenges in such a distributed
environment are (i) the variation in crystal oscillator qual-
ity and environmental conditions (which determine clock
drift1), (ii) characteristics of the network paths that separate
the remote host from the reference clock (which can limit
synchronization accuracy [21]), and (iii) the protocol that is
used to discipline the clock on the remote host.
The efforts of Mills led to standardization of the Network
Time Protocol (NTP) in 1985 [37]. NTP is widely used in the
Internet today. At its core are high precision reference clocks
(typically atomic clocks or GPS-based clocks) that form the
foundation of a widely distributed hierarchy of public time
servers. The protocol mechanisms are based on periodic ex-
changes of information between clients and servers. However,
the speciﬁc behavior of any particular client and its level of
synchronization with a server can vary widely [52]. Further-
more, for devices that do not require all the performance and
accuracy beneﬁts of NTP, a subset of NTP called Simple NTP
(SNTP) [39] is used.
While the use of mobile computing devices, including
smartphones, has exploded over the past decade, to the best
of our knowledge, very little attention has been paid to their
particular challenges for time synchronization. We argue
that the need for tight time synchronization for applications
such as gaming, ﬁnance and measurement will become in-
creasingly important as mobile handset use continues to grow.
We also argue that several of the key challenges for time
synchronization noted above—in particular, the possibility
of dramatic changes in environmental conditions and highly
variable path conditions between clients and servers—require
detailed consideration in order to understand the efﬁcacy of
standard approaches.
1In this study, we follow the deﬁnitions described in §2 of Paxson et al. [45]
for the terms drift, offset, skew and accuracy.
In this paper, we address the issue of time synchronization
in mobile systems. Our ﬁrst objective is to understand the
time synchronization behavior of mobile hosts in the Internet
today. Our speciﬁc objective is to assess the time synchro-
nization protocols and conﬁgurations that are used by mobile
clients and in particular the one-way delay latencies that they
experience, which can limit synchronization. This aspect of
our study serves as a baseline for the second part of our inves-
tigation. Speciﬁcally, our second objective is to understand
the range of behaviors of mobile time synchronization under
a range of wireless operating conditions. This leads to the
ﬁnal component of our study, which is the speciﬁcation and
examination of Mobile NTP (MNTP), a new protocol for
time synchronization of mobile clients.
We begin our study by examining logs gathered from 19
NTP servers located in the US over a period of 24 hours.
Our focus is on the wireless hosts that are identiﬁed in the
logs using simple heuristics based on their IP addresses. The
logs include time synchronization requests from over 86,312
unique US mobile hosts. The logs reveal that over 95% of
the mobile hosts use the SNTP simpliﬁcations to NTP for
synchronization. The logs also reveal that typical one-way
delays (OWD) to mobile hosts vary between 1ms to 997ms.
The combination of the use of SNTP and highly variable
OWDs suggests that tight time synchronization in mobile
hosts is likely to be quite challenging.
We expand our examination by conducting a series of con-
trolled laboratory experiments. The focus of these efforts is to
assess the impact of SNTP and variable path conditions on the
ability of mobile hosts to synchronize with a reference server.
To facilitate repeatability of our laboratory experiments, we
develop a scriptable tool which is able to modify the transmis-
sion power of a wireless base station as well as ﬂexibly inject
different forms of cross-trafﬁc in order to create a wide range
of wireless network conditions. From our experiments using
this tool, we ﬁnd that the time offsets—the measured differ-
ence between our clock’s time and the ‘true’ time according
to the national standards—relative to a reference server are
highly variable in all wireless settings compared with similar
experiments carried out using a wired network. A wireless
host running SNTP with the same clock hardware under the
same ambient temperature conditions, achieves time offsets
with a mean of 4ms and standard deviation of 7ms on a wired
network compared to time offsets with a mean of 31ms and
standard deviation of 47ms on a wireless network.
Motivated by the ﬁndings from our laboratory experiments,
we next describe Mobile NTP (MNTP). MNTP is designed
for mobile hosts, which are assumed to experience highly
variable and lossy channel conditions that present challenges
for standard time synchronization protocols. As a result, the
core idea in MNTP is cross-layer-awareness of wireless chan-
nel conditions. MNTP is designed to be simple and easily
deployable, with minimal modiﬁcations to the SNTP imple-
mentation of mobile hosts. MNTP is resistant to both clock
drift and variability and lossy channel conditions, while still
operating in a lightweight manner, thereby enabling accurate
time synchronization for mobile devices.
We demonstrate the capabilities of MNTP in a laboratory
setting over a range of operating conditions. Using the same
laboratory testbed as our initial experiments, we compare
MNTP’s synchronization accuracy with SNTP2 by compar-
ing the offset measurements that would be used to discipline
the local clock. In our evaluations, we ﬁnd that MNTP offers
dramatic improvement over SNTP. In one particular experi-
ment in which we allow the local NTP process to update the
system clock, we ﬁnd that MNTP’s maximum offset is 23ms,
and its average is 12 time better than for SNTP.
The remainder of this paper is organized as follows. In §2
we provide background on NTP and the SNTP. We present
our empirical study of NTP based on NTP server logs and
laboratory-based experiments, which focuses speciﬁcally on
wireless hosts, in §3. This is followed by a description of
MNTP in §4. We demonstrate the capabilities of MNTP and
compare it to SNTP in §5. Next, we provide a review of
related literature in §6. Finally, we summarize and discuss
future work in §7.
2. BACKGROUND
Various applications and services hosted on telecommu-
nication networks require accurate time synchronization for
correct and consistent operation. Achieving this requirement
is complicated by clock drift, which is caused by differences
in environmental conditions or crystal oscillator quality and
leads to clocks advancing at different rates. To maintain clock
synchronization among independently running networked-
hosts, the Network Time Protocol (NTP) was created in 1985
(RFC 958 [37]). Due to the heterogeneity of computing and
network devices (e.g., mobile phones vs. routers vs. desk-
tops) and their varying requirements (e.g., tolerance to less
accurate time vs. bandwidth vs. battery life), several variants
of NTP including the Simple Network Time Protocol (SNTP)
(RFC 1769 [39]) and Precision Time Protocol (PTP) [27]
have been developed.
Precise time estimates from a hierarchy of time sources
(also known as stratum servers) can be obtained using NTP,
SNTP or PTP. At the top-level of the hierarchy are stratum
0 servers. GPS receivers and/or atomic crystals are used
by these high-quality time sources to correct clock drifts.
Stratum 0s offer highly-precise time estimates to stratum
1 servers, i.e., to servers in the next level of the hierarchy.
Stratum 1s are also referred to as primary servers. Secondary
or stratum 2 servers connect to stratum 1s, and so on, all the
way down to stratum 15. Stratum servers typically respond
with time estimates for synchronization requests from a wide
variety of hosts supporting any of the three protocol variants.
Hosts in the Internet synchronize time with multiple stratum
servers, typically at level 2 or higher.
Wired Internet hosts traditionally run the ntpd daemon
in order to synchronize their clock using NTP. This software
implements several NTP-standard ﬁltering heuristics to select
the best time samples from the stratum servers. ntpd oper-
ates by exchanging timestamps with its reference servers (in
2We do not compare against NTP (which uses an exhaustive ﬁltering and
selection pipeline for accepting packets) but plan to do so in future work.
a process called polling). The polling behavior is governed
by the clock discipline algorithm [7] and, as part of this proce-
dure, ntpd determines the optimal polling interval from the
measured round-trip delay, jitter and oscillator frequency [9].
Unlike the hosts in the wired Internet (e.g., routers, desk-
tops, and traditional laptops), wireless hosts such as mobile
devices typically use SNTP to acquire time estimates from
stratum servers. SNTP sets all ﬁelds in an NTP packet to zero
except the ﬁrst octet and does not employ the sophisticated
clock correction and ﬁltering algorithms of NTP. Hence the
accuracy of the time estimates obtained using SNTP are al-
ways lower [39]. Besides SNTP, wireless devices also support
a mechanism called Network Identity and Time Zone (NITZ)
to update clocks in a one-off fashion [5, 6]. NITZ is a weaker
mechanism to obtain time information as the estimates are
not obtained in a periodic fashion like NTP and are dependent
on the device crossing a network boundary.
In addition to the issues in SNTP and NITZ, commodity
operation systems (OS) shipped with wireless hosts inhibit
accurate clock synchronization due to a variety of vendor-
speciﬁc implementations, including differing frequencies at
which the synchronization requests are emitted and number
of retries on prior request failures. Speciﬁcally, upon detailed
analysis of code from Android’s codebase [1], we found
that Android SNTP implementations poll once a day if data
from NITZ are unavailable. To further aggravate the issue,
Android performs only three retries upon error and updates
the system time only if the estimate differs by more than
5000ms. Similarly, the Windows Mobile OS updates the
system clock once every 7 days. Even if the synchronization
request fails, no further retries are sent.
3. CLOCK SYNCHRONIZATION OVER
WIRELESS LINKS
In this section, we analyze the problem of accurate clock
synchronization in mobile hosts. We begin by examining
NTP server logs3 and classifying clients as wired or wireless.
We then discuss the basic characteristics of latencies for the
various hosts identiﬁed in the logs. Next, we describe a series
of laboratory-based experiments conducted with wired and
wireless hosts that are designed to quantify the extent of time
skew, which is deﬁned as the measured frequency difference
between our clock and the ‘true’ time clock, in these devices.
We conclude by discussing the results from the logs and
experiments, which motivate the need for a new scheme for
mobile host clock synchronization.
3.1 NTP Server Logs
Dataset. In this study, we rely on a new source of net-
work latency measurements—passively collected trafﬁc from
NTP servers. We reached out and explained our research
objectives4 to several NTP server administrators. Eight ad-
ministrators responded positively with tcpdump traces from
3To preserve anonymity, NTP server and service provider names (in results)
are removed.
4We carefully selected a number of NTP administrators from pool.ntp.org
based on server location and stratum, and explained our goals here: http:
//ntp-study.cs.wisc.edu/
a total of 19 NTP servers across 9 states in the US. We de-
veloped a light-weight tool based on netdissect.h and
print-ntp.c, available as part of [15], to process the logs
and extracted relevant information such as total number of
unique clients, one-way delays (OWD) to and from NTP
servers and the time synchronization protocol used using the
ﬁltering heuristic described in Durairajan et al. [23]. The
heuristic is necessary to infer the state of synchronization of
the client’s clock with respect to the NTP server, in order to
eliminate invalid latency measurements.
Basic Characteristics. Table 1 summarizes the basic
statistics and some key attributes of the 19 NTP servers such
as a server’s stratum number, IP version, total number of mea-
surements collected, and number of distinct clients. The NTP
servers used in our study include 5 stratum 1’s and 14 stratum
2’s with a combination of both IPv4 and IPv6 support. This
dataset, collected over a period of one day, include a total
of 209,447,922 OWD measurements to 17,823,505 unique
clients, as indicated by the unique number of IP addresses
seen in server logs.
Wired vs. Wireless. To classify the hosts seen in the NTP
logs into wired or wireless, we use Team Cymru’s IP-to-ASN
mapping service [16] and group hosts based on AS number
and provider name in hostnames. We follow a simple process
that leverages keywords and provider names (e.g., mobile,
cloud, Amazon, Sprint, etc.) present in hostnames to classify
clients into various service provider categories (described
below). Even though the keyword-based classiﬁcation is
fairly rudimentary, we argue that it is sufﬁcient enough to
highlight wired vs. wireless service providers.
Figure 1-(left) shows a comparison of the minimum OWDs
of clients belonging to various service providers that are listed
based on the average of minimum OWDs as seen in logs of
three NTP servers5. Four categories of latency characteris-
tics are evident: (1) cloud and hosting providers (SP 1–3)
exhibit very low minimum OWDs with a median of 40ms,
(2) Internet service providers (SP 4–9) show a medium trend
with a median of 50ms minOWDs, (3) broadband providers
(SP 10–21) exhibit high latency characteristics with median
delays of about 250ms, and (4) mobile providers (SP 22–25)
exhibit very high latencies with high interquartile ranges and
median latencies as high as 550ms. To complement the la-
tency characteristics shown in Figure 1-(right), we plot the
distribution of minimum OWDs of clients belonging to top
25 service providers, which are ranked based on the number
of unique IP addresses, as depicted in Figure 1-(left). One
of the striking characteristic of the extracted latencies is the
linear trend of the mobile providers (note SP 22–25). We
hypothesize that this characteristic is related to the broader
geographic distribution of mobile wireless clients compared
with ﬁxed-location wireline clients. For all servers, 50% of
the hosts from the three mobile providers exhibit a latency of
more than 400ms and this observation is consistent across all
the 19 NTP servers.
5The remaining 16 NTP servers exhibited similar characteristics and are not
shown here due to space constraints.
Table 1: Summary of client statistics seen in the NTP logs.
Server ID
Unique Clients
Server Stratum
IP Version
Total Measurements
AG1
639,704
2
v4
CI1
606
2