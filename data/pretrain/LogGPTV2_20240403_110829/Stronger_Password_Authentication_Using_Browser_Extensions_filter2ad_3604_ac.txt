SSL certiﬁcate of the target web page could poten-
tially be used as the salt. If we trust the certiﬁcate
authorities, we can expect these values to be unique.
Using information in the SSL certiﬁcate also has the
advantage of having the same salt value for organiza-
tions that may operate on different web sites — for
example, amazon.com and amazon.co.uk are
two different web sites that both use the same lo-
gin data, as reﬂected by the fact that the organization
name is the same in both SSL certiﬁcates.
Although using information in the SSL certiﬁ-
cate as a salt is an attractive idea, this approach has
several practical problems that convinced us not to
use it for PwdHash:
• Authenticity of certiﬁcates. Many legitimate
sites, such as those run by universities, have cer-
tiﬁcates that aren’t issued by a root CA, so pre-
sumably the extension would have to give the
user an option to accept such certiﬁcates. How-
ever, this opens up the possibility of a phishing
attack in which the phishing site presents a self-
signed certiﬁcate with the organization name of
a valid organization and counts on users to man-
ually accept the certiﬁcate.
• Hard to replicate manually.
If a user is tem-
porarily using a browser that does not have the
extension installed and wants to manually com-
pute the hashed password corresponding to a
particular site, that user has to know whether
whether the SSL certiﬁcate or the domain name
should be used, and if the SSL certiﬁcate is to be
used, the user must extract the relevant informa-
tion from the SSL certiﬁcate by hand. Any mis-
takes in this complicated and error-prone pro-
cess would lead to an unusable hashed pass-
word.
• Selective compatibility. Many sites run by
smaller organizations that don’t have an SSL
certiﬁcate. For users who want to log in to such
sites, the extension would have to either switch
24
14th USENIX Security Symposium
USENIX Association
to domain-based salt or provide no protection at
all.
4.4 Encoding
Another problem is that different sites have dif-
ferent restrictions on what characters can appear in
a valid password. Some sites require only alphanu-
meric characters. Other sites require at least one non-
alphanumeric character. These contradictory require-
ments mean that the hash value encoding algorithm
must depend on the site.
One solution to this problem is to create a spe-
cial case (see Section 4.5) for sites that do not allow
non-alphanumeric characters. This is a solution that
we adopt.
A more low-maintenance solution, which we
did not use, is to look at the user’s password for hints
as to what the valid characters are. This approach is
intuitive and does not require any special interaction
with the user, but it does leak a small amount of in-
formation about the user’s cleartext password.
4.5 Special cases
The extension needs to permit users to login to
sites that have unusual salting and encoding require-
ments. We use a conﬁguration ﬁle to determine how
PwdHash should handled these special cases.
The conﬁguration ﬁle consists of a short se-
quence of rules where each rule has the following for-
mat:
For example, a rule might look like
This rule instructs PwdHash to hash with encod-
ing algorithm number 1 using two top-level do-
mains as the salt for all domains that match “*.com”.
Thus, for login.passport.com the salt will be
passport.com. The ﬁrst rule in the conﬁguration
ﬁle that matches the target domain is the one used.
The sample rule above is the last rule in the ﬁle.
The extension contains ﬁve hash encoding al-
gorithms that seem to cover the range of pass-
word requirements enforced on the web. The de-
fault encoding algorithm, encode-alg-1, satis-
ﬁes most sites. For completeness, we also provide
encode-alg-0, which does no hashing at all (i.e.
it sends the cleartext password). Other encoding
algorithms satisfy other password requirements by
including at least one upper case, one lower case,
and one numeric character, by including one non-
alphanumeric character, and so on.
The conﬁguration ﬁle needs to be updated on a
regular basis so that it can handle new websites that
are created after PwdHash is initially downloaded
or existing websites that change their policies about
what constitutes an acceptable password. The ﬁle
should be signed by a trusted authority to prevent
tampering, because compromise of the conﬁguration
ﬁle would result in a complete loss of security. If an
attacker were to insert a rule that matched everything
as the ﬁrst rule with encode-alg-0 as the encod-
ing value, he would cause the extension to send all
passwords in the clear, effectively disabling it. Ad-
vanced users can manually update their own conﬁg
ﬁle if desired.
For completeness, we note that any attacker
who can modify arbitrary ﬁles or memory on the
user’s system can modify the conﬁg ﬁle. This attack
is similar to an /etc/hosts ﬁle hijacking attack
where new domain mappings are inserted at the be-
ginning of the computer’s /etc/hosts ﬁle. How-
ever, both of these attacks fall outside of our attack
model, which is that the attacker controls the content
of a remote web server, not the local computer.
4.6 Dictionary attacks
PwdHash ensures that phishing sites only
learn a hash of the user’s password. Since PwdHash
uses a well known hash function, the phishing site
could attempt an ofﬂine dictionary attack to obtain
the user’s cleartext password. Since dictionary at-
tacks succeed 15-20% of the time [Wu99], this is a
potential weakness. There are two standard defenses
against dictionary attacks:
• Slow hash function. This solution, already im-
plemented in UNIX, increases the computing
resources needed to mount a dictionary attack.
Extreme versions of this solution, using ultra-
slow hash functions, are proposed in [PM99,
HWF05]. PwdHash is an ideal application for
slow hash functions.
• Short secret salt. This idea, often called pep-
per [Hel97], is difﬁcult to use on the web with-
out changing the server. To use a secret-salt, our
extension would have to make multiple login at-
tempts with the user’s password. However, the
extension often cannot tell whether a particular
login request succeeded or failed. Furthermore,
web sites often lock up after several failed login
USENIX Association
14th USENIX Security Symposium
25
attempts (to prevent online dictionary attacks).
Another defense against dictionary attacks,
which we have implemented, is an optional feature
we call the global password. The user can specify a
global password that is incorporated into the salt of
all hashes that the extension yields. Thus, in order
to mount a dictionary attack, a phisher has to guess
both the user’s web password and her global exten-
sion password. This will likely make a dictionary at-
tack infeasible. The difﬁculty in using this feature is
that the user needs to set the same global extension
password on any PwdHash computer she uses.
We also mention that a complete solution
to dictionary attacks can be achieved by using
password-based authenticated key exchange proto-
cols (e.g. [BM92, BPR00]). These are 2- or 3-round
protocols designed for authentication using a low en-
tropy password. However, implementing these proto-
cols requires changes to both the browser and server
and they are therefore difﬁcult to deploy.
5 User interface and usability issues
5.1 Password reset after extension install
Once a user installs the PwdHash extension,
he will not fully beneﬁt from its protection until he
manually resets his password at every site where he
has an account. This process can be done gradually
over time; there is no need to update all web accounts
at once. Some users may wish to use PwdHash only
for newly created accounts. At each site where Pwd-
Hash is used, the new password will be set to the
hash of the user’s password using that site’s domain
name as the salt.
Using the password-key mechanism (Sec-
tion 3.3.2), the password reset process would present
a serious hurdle for users. Some sites reset a user’s
password by sending an email with the new pass-
word. The user is then expected to enter the password
from the email as is. The problem is that if the user
uses the password key to protect the emailed pass-
word, the resulting hash will be rejected by the site
because it will not match the password sent in the
email. A similar problem occurs at sites that ask the
user to enter the current password when requesting a
password change. If the password-key is pressed, the
extension replaces the current password with an (in-
correct) hashed version, and so the password change
request is rejected.
The password-preﬁx solution (Section 3.3.1)
greatly simpliﬁes this process of changing existing
passwords, and it also facilitates the entry of non-
password data into a password ﬁeld. Only passwords
that were set up using PwdHash will start with the
password-preﬁx. A PIN number, credit card number,
social security number, etc. will obviously not start
with the preﬁx, so there’s no chance that the exten-
sion will mistakenly try to hash it. To set up a Pwd-
Hash password for an existing account, the users go
through the normal password reset process, and the
only thing they need to know is that if they have an
opportunity to choose a password, they should choose
one that starts with the password-preﬁx. In particu-
lar, users do not need to know which ﬁelds should be
hashed.
5.2 Roaming
Some end users, such as brokers and clerks,
do not have the privileges necessary to install Pwd-
Hash on their desktops. Similarly, users cannot in-
stall PwdHash at an internet caf´e or on a friend’s
computer. Still, we need to provide the means for
them to compute their hashed passwords.
We address this problem by providing a web
page that generates hashed passwords. See Figure 6.
The user is asked to enter both the domain name
where he wants to login and his password. JavaScript
on the page computes the password hash and stores
the result in the the clipboard. The user can then paste
the hashed password into the desired password ﬁeld.
This process takes place entirely on the user’s ma-
chine; the user’s cleartext password is never sent on
the network.
Another solution for
roaming users is a
JavaScript bookmark, or “bookmarklet,” which in-
jects script into the current page when the user clicks
it. Bookmarklets can simulate the experience of
having PwdHash installed, and are implemented
in password generators like [Wol] and [Zar]. Al-
though Mozilla Firefox does not have a limitation
on bookmarklet size, Internet Explorer 6.0 limits
bookmarklets to 508 characters, which is not enough
space to include the full hashing algorithm. One
workaround is to use a short bookmarklet that down-
loads the full script from a remote server and injects
it into the current page.
These solutions for roaming do not provide the
full protection and convenience of PwdHash, so they
should be used only if the browser extension can-
not be installed. The remote hashing web site and
downloaded bookmarklet script present a signiﬁcant
security vulnerability if they are modiﬁed by an at-
tacker, so they should be retrieved only from highly
trusted servers over a secure connection. Of course,
26
14th USENIX Security Symposium
USENIX Association
paste events and double click events. The DHTML
event model used by Internet Explorer allows page
elements to react to these events before they “bubble”
up to the extension at the top level. Since our exten-
sion must handle keystroke events before scripts on
the page, we intercept keystrokes using a low-level
Windows keyboard hook.
When the password-key or password-preﬁx is
detected, the browser extension determines whether
the active element is a password ﬁeld. If it is not a
password ﬁeld, the user is warned that it is not safe to
enter his password. If it is a password ﬁeld, the exten-
sion intercepts all keystrokes of printable characters
until the focus leaves the ﬁeld. The keystrokes are
canceled and replaced with simulated keystrokes cor-
responding to the “mask” characters. The ﬁrst mask
character is “A,” then “B,” and so on. The extension
maintains a translation table for each of these pass-
word ﬁelds, mapping mask characters back to the
original keystrokes. This method allows the user to
backspace and delete characters at arbitrary positions
within the password ﬁeld without confusing the ex-
tension.
For the Internet Explorer version of the exten-
sion, we leave the masked characters in the ﬁeld until
the user submits the form, then we intercept the sub-
mission event with a BeforeNavigate2 handler.
In-
ternet Explorer does not allow extensions to edit the
form data in BeforeNavigate2 directly. Rather, we
must cancel the original Navigate2 event and ﬁre a
new, modiﬁed one. The extension includes a data
structure to detect which Navigate2 events were ﬁred
by the extension, and which ones were ﬁred as a re-
sult of user action, so that it does not attempt to trans-
late the form data more than once and get stuck in a
loop.
6.2 Mozilla Firefox
We also implemented our prototype as an ex-
tension to the Mozilla Firefox browser. This ver-
sion has a slightly different user interface; it adds a
lock icon to the password ﬁelds to indicate when pro-
tection is enabled, rather than a new toolbar with a
password “trafﬁc light”. Neither the trafﬁc light nor
the lock icon provide bulletproof protection against
spooﬁng, but they do provide a helpful hint to users
as to whether PwdHash is installed and whether it
will hash the current password ﬁeld.
Figure 6: Remote hashing
if PwdHash becomes popular enough to be installed
in most common browsers, there would be no need to
use this remote hashing facility.
5.3 Password Updates
For completeness, we note when using Pwd-
Hash, a user can change her password at a given site
without changing her password at other sites. In fact,
the recommended method for using PwdHash is to
choose a small number of strong, distinct passwords,
one for every security level (e.g. one password for all
ﬁnancial sites, one password for all news sites, etc).
The PwdHash extension ensures that a break-in at
one ﬁnancial site will not expose the user’s password
at all other banks.
6
Implementations for current browsers
6.1
Internet Explorer
We implemented our prototype as a Browser
Helper Object for Internet Explorer. The extension
registers three new objects: an entry in the Tools
menu (to access extension options), an optional new
toolbar (the “trafﬁc light”), and the password protec-
tion service itself.
Internet Explorer support COM event sinks that
enable Browser Helper Objects to react to website
events. We use these sinks to detect focus entering
and leaving password ﬁelds, drag and drop events,
Firefox allows extensions to register event han-
dlers that can intercept keystrokes during the DOM
“capture” phase and prevent them from reaching the
page. Capturing is the opposite of the “bubbling”
USENIX Association
14th USENIX Security Symposium
27
method discussed earlier with respect to Internet Ex-
plorer; rather than catching events as they bubble up
and out of the element on which they ﬁred, events are
caught as they move down the DOM toward the el-
ement. Our extension prevents password keystrokes
from being received by the page and dispatches its
own keystroke events for the “mask” characters in-
stead.
Rather than waiting for the form submission to
perform the password hashing, the Firefox version of
the extension hashes the password as soon as focus
leaves the ﬁeld. If the form action domain were used
as salt, this approach would be vulnerable to a domain
rewriting attack (Figure 2); however, because of the
risk of password reﬂection attacks, we use the current
site domain as the salt instead.
Some user experience concerns arise upon
hashing the password when focus leaves the pass-
word ﬁeld. For example, if the hashed password is
a different length than the original password, there
will be a change in password ﬁeld length that is no-
ticeable to the user. Also, should the user return to
the password ﬁeld to edit the password, the resulting