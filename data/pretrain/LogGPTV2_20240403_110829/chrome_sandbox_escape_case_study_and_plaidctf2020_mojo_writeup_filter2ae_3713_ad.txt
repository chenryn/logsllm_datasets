        this.interfaceEndpointClient_ = null;
        this.stub_ = null;
        if (requestOrHandle)
          this.bind(requestOrHandle);
      }
      ...
      ...
        Binding.prototype.bind = function(requestOrHandle) {
        this.close();
        var handle = requestOrHandle instanceof mojo.InterfaceRequest ?
            requestOrHandle.handle : requestOrHandle;
        if (!(handle instanceof MojoHandle))
          return;
        this.router_ = new internal.Router(handle);
        this.stub_ = new this.interfaceType_.stubClass(this.impl_);
        this.interfaceEndpointClient_ = new internal.InterfaceEndpointClient(
            this.router_.createLocalEndpointHandle(internal.kPrimaryInterfaceId),
            this.stub_, this.interfaceType_.kVersion);
        this.interfaceEndpointClient_ .setPayloadValidators([
            this.interfaceType_.validateRequest]);
      };
##### Receiving Responses
一些mojom接口期待response，例如EchoInteger，对应的js方法返回一个Promise，当service端发回响应时，此Promise将被resolve，如果interface断开连接，则将被reject。
## async和await
    function resolveAfter2Seconds(x) { 
      return new Promise(function(resolve){
        setTimeout(function(){
          resolve(x);
        }, 2000);
      });
    }
    async function f1() {
      var x = await resolveAfter2Seconds(10);
      console.log(x); // 10
      console.log("end");
    }
    function f2(){
      console.log("sakura");
    }
    f1();
    f2();
    ...
    ...
    //结果
    sakura
    10
    end
使用`new Promise( function(resolve, reject) {...} /* executor */
);`来创建一个Promise对象，其参数executor是带有resolve和reject两个参数的函数 。  
Promise构造函数执行时立即调用executor函数，resolve和reject两个函数作为参数传递给executor（executor函数在Promise构造函数返回所建promise实例对象前被调用）。resolve和reject函数被调用时，分别将promise的状态改为fulfilled（完成）或rejected（失败）。
如上resolveAfter2Seconds函数返回一个Promise对象，其将立刻调用setTimeout函数，并等待then一个函数，作为它的resolve来执行  
例如
    resolveAfter2Seconds(10).then((x)=>{console.log(x)})
    ...
    //10
await可以等待Promise里的executor函数执行结束（ **阻塞** ），并返回其promise的fulfilled
value，其实也就是作为参数传给resolve函数的那个值。  
另外
    Promise.resolve('foo')
    // 粗略可以理解成，但注意这并不严格等价，只是在这里可以这么理解
    new Promise(function(resolve){
      resolve('foo')
    })
所以如果`let a = await Promise.resolve('foo')`，则a的值为'foo'
await一般和async一起用，如最前面的例子，只有f1函数里的被阻塞，而不影响f2函数执行，关于异步在这里不再多说，知道这些已经足够，另外一般的写法都是用了箭头函数，这里为了更好理解就改掉了。
## case study: RenderFrameHost lifetime cause sandbox escape
这里我们通过一个简单的漏洞[issue-1062091](https://bugs.chromium.org/p/chromium/issues/detail?id=1062091)来学习chrome的对象生命周期造成的一类安全问题。  
我们首先看一下造成这个漏洞的mojo接口的定义,在继续往下阅读之前，请仔细的理解前面我写的mojo的基础知识。
    // Represents a system application related to a particular web app.
    // See: https://www.w3.org/TR/appmanifest/#dfn-application-object
    struct RelatedApplication {
      string platform;
      // TODO(mgiuca): Change to url.mojom.Url (requires changing
      // WebRelatedApplication as well).
      string? url;
      string? id;
      string? version;
    };
    // Mojo service for the getInstalledRelatedApps implementation.
    // The browser process implements this service and receives calls from
    // renderers to resolve calls to navigator.getInstalledRelatedApps().
    interface InstalledAppProvider {
      // Filters |relatedApps|, keeping only those which are both installed on the
      // user's system, and related to the web origin of the requesting page.
      // Also appends the app version to the filtered apps.
      FilterInstalledApps(array related_apps, url.mojom.Url manifest_url)
          => (array installed_apps);
    };
一个render进程里的RenderFrame，对应到browser进程里的一个RenderFrameHost。  
打开一个新的tab，或者创建一个iframe的时候，都对应创建出一个新的RenderFrameHost对象，而在构造一个新的RenderFrameHost对象的时候，会使用RenderFrameHostImpl来初始化一个BrowserInterfaceBrokerImpl对象。
    //content/browser/renderer_host/render_frame_host_impl.h
    class CONTENT_EXPORT RenderFrameHostImpl
        : public RenderFrameHost,
        ...
      // BrowserInterfaceBroker implementation through which this
      // RenderFrameHostImpl exposes document-scoped Mojo services to the currently
      // active document in the corresponding RenderFrame.
      BrowserInterfaceBrokerImpl broker_{
          this};
broker可以用来在render和browser之间通信，其bind来自renderer的interfaces requested到具体的mojo
interface
impl上，依据不同的ExecutionContextHost，最终调用的PopulateBinderMap不同，这里是使用的renderframehost，关于其他host，以后再深究。
    // content's implementation of the BrowserInterfaceBroker interface that binds
    // interfaces requested by the renderer. Every execution context type (frame,
    // worker etc) owns an instance and registers appropriate handlers (see
    // internal::PopulateBinderMap).
    // Note: this mechanism will eventually replace the usage of InterfaceProvider
    // and browser manifests, as well as DocumentInterfaceBroker.
    template 
    class BrowserInterfaceBrokerImpl : public blink::mojom::BrowserInterfaceBroker {
     public:
      BrowserInterfaceBrokerImpl(ExecutionContextHost* host) : host_(host) {
        internal::PopulateBinderMap(host, &binder_map_);
        internal::PopulateBinderMapWithContext(host, &binder_map_with_context_);
      }
通过`map->Add`来向broker里注册适当的handlers回调，由于RenderFrameHostImpl里保存一个BrowserInterfaceBroker的实例，所以当此实现收到来自render的GetInterface方法调用时，它将调用这个回调，例如当通过bindinterface来请求调用一个interface的时候，
    void PopulateFrameBinders(RenderFrameHostImpl* host,
                              service_manager::BinderMap* map) {
      ...
      map->Add(
          base::BindRepeating(&RenderFrameHostImpl::CreateInstalledAppProvider,
                              base::Unretained(host)));
      ...
    }
我们看一下mojo接口的定义  
所以最终从mojo调到的注册函数如下
    void RenderFrameHostImpl::CreateInstalledAppProvider(
        mojo::PendingReceiver receiver) {
      InstalledAppProviderImpl::Create(this, std::move(receiver));
    }
    // static
    void InstalledAppProviderImpl::Create(
        RenderFrameHost* host,
        mojo::PendingReceiver receiver) {
      mojo::MakeSelfOwnedReceiver(std::make_unique(host),
                                  std::move(receiver));
    }
参数是RenderFrameHost和一个receiver,这里通过MakeSelfOwnedReceiver函数来创建一个self-owned的receiver，其作为一个独立的object存在，它拥有一个std::unique_ptr指向其绑定的interface
implemention，并且在MessagePipe被关闭或者发生一些错误时，负责任的去delete
implemention，所以其将一个interface
implemention和MessagePipe绑定到了一起，具体实现参考[这里](https://source.chromium.org/chromium/chromium/src/+/master:mojo/public/cpp/bindings/self_owned_receiver.h)。
**这里我们只要知道InstalledAppProviderImpl和message pipe的生命周期绑定即可，只要message
pipe还连接，其就一直存在**
另外InstalledAppProviderImpl里保存一个`render_frame_host_`对象，其来自传入的`render_frame_host`指针，但是
**并没有通过任何方法来将InstalledAppProviderImpl和RenderFrameHost的生命周期绑定**
，一般来说会通过将Impl继承自WebObserver等来观察renderframehost的生命周期，当renderframehost析构的时候会通知Impl做出正确的处理，但这里没有。
    InstalledAppProviderImpl::InstalledAppProviderImpl(
        RenderFrameHost* render_frame_host)
        : render_frame_host_(render_frame_host) {
      DCHECK(render_frame_host_);
    }
    ...
    void InstalledAppProviderImpl::FilterInstalledApps(
        std::vector related_apps,
        const GURL& manifest_url,
        FilterInstalledAppsCallback callback) {
      if (render_frame_host_->GetProcess()->GetBrowserContext()->IsOffTheRecord()) {
        std::move(callback).Run(std::vector());
        return;
      }
      ...
    }
所以我们可以通过free
iframe来释放掉对应的render_frame_host，而此时InstalledAppProviderImpl的实例依然存在，再通过FilterInstalledApps来再次use
`render_frame_host_`,而`render_frame_host_->GetProcess()`是一个虚函数调用，通过占位render_frame_host来伪造虚函数表，我们就可以任意代码执行。
## plaidctf2020 mojo writeup
### root cause analysis
    // static
    void PlaidStoreImpl::Create(
        RenderFrameHost *render_frame_host,
        mojo::PendingReceiver receiver) {
      mojo::MakeSelfOwnedReceiver(std::make_unique(render_frame_host),// note lifetime
                                  std::move(receiver));
    }
    ..
    class PlaidStoreImpl : public blink::mojom::PlaidStore {
     public:
      explicit PlaidStoreImpl(RenderFrameHost *render_frame_host);
      static void Create(
          RenderFrameHost* render_frame_host,
          mojo::PendingReceiver receiver);
      ~PlaidStoreImpl() override;
      // PlaidStore overrides:
      void StoreData(
          const std::string &key,
          const std::vector &data) override;
      void GetData(
          const std::string &key,
          uint32_t count,
          GetDataCallback callback) override;
     private:
      RenderFrameHost* render_frame_host_;//----> can free
      std::map > data_store_;
    };
    ..
    void PlaidStoreImpl::StoreData(
        const std::string &key,
        const std::vector &data) {
      if (!render_frame_host_->IsRenderFrameLive()) { // use
        return;
      }
      data_store_[key] = data;
    }
    void PlaidStoreImpl::GetData(
        const std::string &key,
        uint32_t count,
        GetDataCallback callback) {
      if (!render_frame_host_->IsRenderFrameLive()) { // use
        std::move(callback).Run({});
        return;
      }
      auto it = data_store_.find(key);
      if (it == data_store_.end()) {
        std::move(callback).Run({});
        return;
      }
      std::vector result(it->second.begin(), it->second.begin() + count);//oob
      std::move(callback).Run(result);
    }
    interface PlaidStore {
      // Stores data in the data store
      StoreData(string key, array data);
      // Gets data from the data store
      GetData(string key, uint32 count) => (array data);
    };
这个题目里有两个漏洞
  * UAF