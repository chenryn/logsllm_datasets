始数）。 
MSVC 里这条指令对应的宏是_BitScanForward。 
代码的其他部分就容易理解了。如果找到了 0 字节，就把它的位置编号累加到计数器里，从而获取字
符串长度。 
应当注意到 MSVC 编译器优化掉了循环体的部分结构。 
Intel Core I7 处理器推出了 SSE 4.2。它提供的新的指令大大简化了字符串的处理。有兴趣的读者可参
见：http://www.strchr.com/strcmp_and_strlen_using_sse_4.2。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 2266 章
章    6644 位
位平
平台
台  
26.1  x86-64 
x86-64 框架是一种兼容 x86 指令集的 64 位微处理器架构。 
从逆向工程的角度来说，这种框架的主要区别在于： 
 除了位于 FPU 和 SIMD 的寄存器之外，几乎所有的寄存器都变为 64 位寄存器。所有指令都可以
通过 R-字头的助记符（寄存器名称）调用 64 位寄存器。而且 x86-64 框架的 CPU 要比 x86 框架
的 CPU 多出 8 个通用寄存器。这些通用寄存器分别是：RAX、RBX、RCX、RDX、RBP、RSP、
RSI、RDI、R8、R9、R10、R11、R12、R13、R14、R15。 
 它向下兼容，允许程序使用 GPR 的 32 位寄存器的助记符、操作该寄存器的低 32 位数据。例如说，
程序可以通过助记符 EAX 访问 RAX 寄存器的低 32 位。 
7th
（字节号） 
6th 
5th 
4th 
3rd 
2nd 
1st 
0th 
RAXx64 
EAX 
AX 
AH 
AL 
64 位寄存器特有的 R8～R15 寄存器不仅有相应的（低）32 位助记符，即 R8D～R15D（低 32 位），而
且还有相应的（低）16 位助记符 R8W～R15W。 
7th
（字节号） 
6th 
5th 
4th 
3rd 
2nd 
1st 
0th 
R8 
R8D 
R8W 
R8L 
x86-64 框架的 CPU 有 16 个 SIMD 寄存器，即 XMM0～XMM15。它的 SIMD 寄存器比 x86 CPU 多出一倍。 
 Win64 系统的函数调用约定发生了相应的变化，采取了与 fastcall 规范（请参见本书 64.3 节）相似
的参数传递规范。这类程序使用 RCX、RDX、R8、R9 寄存器传递函数所需的前 4 个参数，并用栈
传递其余参数。为了保证被调用方函数能够使用前 4 个参数所占的寄存器，调用方函数会单独分配
出来 32 字节的栈空间，以便被调用方函数保存 4 个参数寄存器的原始状态。虽然小型函数可能不
会用到多少寄存器，但是大型函数可能就要把传入的参数保存到栈里，以尽量充分使用寄存器资源。 
System V AMD64 ABI（泛指 Linux、各种 BSD 和 Mac OS X）（参见 Mit13）系统的函数调用约定也与
fastcall 规范相似。它使用 RDI、RSI、RDX、RCX、R8、R9 这 6 个寄存器传递前 6 个参数，再使用栈来传
递其余参数。 
本书的第 64 章详细介绍了各种调用约定。 
 在 C/C++语言里，x86-64 平台的 int 型数据仍然是 32 位数据。 
 x86-64 平台的指针都是 64 位指针。 
不过实际情况并非那么理想，x64 CPU 在外部 RAM 的寻址能力只有 48 位。但是存储指针、包括缓存
异步社区会员 dearfuture(15918834820) 专享 尊重版权
388 
逆向工程权威指南（上册） 
区的开销却高出 x86 一倍。 
因为 64 位平台的寄存器数量是 32 位平台的两倍，编译器在调动资源方面的底气也更足一些，所以它
们的寄存器分配方案（register allocation）当然会不同。这就是说，64 位应用程序中的局部变量（栈空间）
会更少一些。 
第 25 章介绍过一个用 bitslice DES 算法实现并行计算的源程序。我们对其稍加修改，让程序根据
DE_type 数据类型（uint32、uint64、SSE2 或 AVX）处理 32/64/128/256 位数据的 S-Box。 
/* 
 * Generated S-box files. 
 * 
 * This software may be modified, redistributed, and used for any purpose, 
 * so long as its origin is acknowledged. 
 * 
 * Produced by Matthew Kwan - March 1998 
 */ 
#ifdef _WIN64 
#define DES_type unsigned __int64 
#else 
#define DES_type unsigned int 
#endif 
void 
s1 ( 
    DES_type     a1, 
    DES_type     a2, 
    DES_type     a3, 
    DES_type     a4, 
    DES_type     a5, 
    DES_type     a6, 
    DES_type     *out1, 
    DES_type     *out2, 
    DES_type     *out3, 
    DES_type     *out4 
){ 
    DES_type     x1, x2, x3, x4, x5, x6, x7, x8; 
    DES_type     x9, x10, x11, x12, x13, x14, x15, x16; 
    DES_type     x17, x18, x19, x20, x21, x22, x23, x24; 
    DES_type     x25, x26, x27, x28, x29, x30, x31, x32; 
    DES_type     x33, x34, x35, x36, x37, x38, x39, x40; 
    DES_type     x41, x42, x43, x44, x45, x46, x47, x48; 
    DES_type     x49, x50, x51, x52, x53, x54, x55, x56; 
    x1 = a3 & ~a5; 
    x2 = x1 ^ a4; 
    x3 = a3 & ~a4; 
    x4 = x3 | a5; 
    x5 = a6 & x4; 
    x6 = x2 ^ x5; 
    x7 = a4 & ~a5; 
    x8 = a3 ^ a4; 
    x9 = a6 & ~x8; 
    x10 = x7 ^ x9; 
    x11 = a2 | x10; 
    x12 = x6 ^ x11; 
    x13 = a5 ^ x5; 
    x14 = x13 & x8; 
    x15 = a5 & ~a4; 
    x16 = x3 ^ x14; 
    x17 = a6 | x16; 
    x18 = x15 ^ x17; 
    x19 = a2 | x18; 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 26 章 64 位平台 
389 
    x20 = x14 ^ x19; 
    x21 = a1 & x20; 
    x22 = x12 ^ ~x21; 
    *out2 ^= x22; 
    x23 = x1 | x5; 
    x24 = x23 ^ x8; 
    x25 = x18 & ~x2; 
    x26 = a2 & ~x25; 
    x27 = x24 ^ x26; 
    x28 = x6 | x7; 
    x29 = x28 ^ x25; 
    x30 = x9 ^ x24; 
    x31 = x18 & ~x30; 
    x32 = a2 & x31; 
    x33 = x29 ^ x32; 
    x34 = a1 & x33; 
    x35 = x27 ^ x34; 
    *out4 ^= x35; 
    x36 = a3 & x28; 
    x37 = x18 & ~x36; 
    x38 = a2 | x3; 
    x39 = x37 ^ x38; 
    x40 = a3 | x31; 
    x41 = x24 & ~x37; 
    x42 = x41 | x3; 
    x43 = x42 & ~a2; 
    x44 = x40 ^ x43; 
    x45 = a1 & ~x44; 
    x46 = x39 ^ ~x45; 
    *out1 ^= x46; 
    x47 = x33 & ~x9; 
    x48 = x47 ^ x39; 
    x49 = x4 ^ x36; 
    x50 = x49 & ~x5; 
    x51 = x42 | x18; 
    x52 = x51 ^ a5; 
    x53 = a2 & ~x52; 
    x54 = x50 ^ x53; 
    x55 = a1 | x54; 
    x56 = x48 ^ ~x55; 
    *out3 ^= x56; 
} 
这个源程序里有很多局部变量。当然并非所有的局部变量都要存储到栈里。我们使用 32 位的 MSVC 
2008（启用/Ox 选项）编译它，可得到如下所示的代码。 
指令清单 26.1  Optimizing MSVC 2008 
PUBLIC     _s1 
; Function compile flags: /Ogtpy 
_TEXT     SEGMENT 
_x6$ = -20  
     ; size = 4 
_x3$ = -16  
     ; size = 4 
_x1$ = -12  
     ; size = 4 
_x8$ = -8  
     ; size = 4 
_x4$ = -4  
     ; size = 4 
_a1$ = 8 
     ; size = 4 
_a2$ = 12  
     ; size = 4 
_a3$ = 16  
     ; size = 4 
_x33$ = 20  
     ; size = 4 
_x7$ = 20  
     ; size = 4 
_a4$ = 20  
     ; size = 4 
_a5$ = 24  
     ; size = 4 
tv326 = 28  
     ; size = 4 
_x36$ = 28  
     ; size = 4 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
390 
逆向工程权威指南（上册） 
_x28$ = 28  
     ; size = 4 
_a6$ = 28  
     ; size = 4 
_out1$ = 32  
     ; size = 4 
_x24$ = 36  
     ; size = 4 
_out2$ = 36  
     ; size = 4 
_out3$ = 40  
     ; size = 4 
_out4$ = 44  
     ; size = 4 
_s1     PROC 
     sub    esp, 20  
; 00000014H 
     mov  
edx, DWORD PTR _a5$[esp+16] 
     push  ebx 
     mov  
ebx, DWORD PTR _a4$[esp+20] 
     push  ebp 
     push  esi 
     mov  
esi, DWORD PTR _a3$[esp+28] 
     push  edi 
     mov  
edi, ebx 
     not  
edi 
     mov  
ebp, edi 
     and  
edi, DWORD PTR _a5$[esp+32] 
     mov  
ecx, edx 
     not  
ecx 
     and  
ebp, esi 
     mov  
eax, ecx 
     and  
eax, esi 
     and  
ecx, ebx 
     mov  
DWORD PTR _x1$[esp+36], eax 
     xor  
eax, ebx 
     mov  
esi, ebp 
     or  
esi, edx 
     mov  
DWORD PTR _x4$[esp+36], esi 
     and  
esi, DWORD PTR _a6$[esp+32] 
     mov  
DWORD PTR _x7$[esp+32], ecx 
     mov  
edx, esi 
     xor  
edx, eax 
     mov  
DWORD PTR _x6$[esp+36], edx 
     mov  
edx, DWORD PTR _a3$[esp+32] 
     xor  
edx, ebx 
     mov  
ebx, esi 
     xor  
ebx, DWORD PTR _a5$[esp+32] 
     mov  
DWORD PTR _x8$[esp+36], edx 
     and  
ebx, edx 
     mov  
ecx, edx 
     mov  
edx, ebx 
     xor  
edx, ebp 
     or  
edx, DWORD PTR _a6$[esp+32] 
     not  
ecx 
     and  
ecx, DWORD PTR _a6$[esp+32] 
     xor  
edx, edi 
     mov  
edi, edx 
     or  
edi, DWORD PTR _a2$[esp+32] 
     mov  
DWORD PTR _x3$[esp+36], ebp 
     mov  
ebp, DWORD PTR _a2$[esp+32] 
     xor  
edi, ebx 
     and  
edi, DWORD PTR _a1$[esp+32] 
     mov  
ebx, ecx 
     xor  
ebx, DWORD PTR _x7$[esp+32] 
     not  
edi 