[53] R. S. Wahby, I. Tzialla, A. Shelat, J. Thaler, and M. Walfish. 2018. Doubly-Efficient
zkSNARKs Without Trusted Setup. In 2018 IEEE Symposium on Security and
Privacy (SP). 926–943. https://doi.org/10.1109/SP.2018.00060
[54] Gavin Wood et al. 2014. Ethereum: A secure decentralised generalised transaction
ledger. Ethereum project yellow paper 151, 2014 (2014), 1–32.
[55] Tiacheng Xie, Jiaheng Zhang, Yupeng Zhang, Charalampos Papamanthou, and
Dawn Song. 2019. Libra: Succinct Zero-Knowledge Proofs with Optimal Prover
Session 11B: Zero Knowledge II CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3015Computation. In Advances in Cryptology – CRYPTO 2019, Alexandra Boldyreva
and Daniele Micciancio (Eds.). Springer International Publishing, Cham, 733–764.
[56] Jiaheng Zhang, Weijie Wang, Yinuo Zhang, and Yupeng Zhang. 2020. Dou-
bly Efficient Interactive Proofs for General Arithmetic Circuits with Linear Prover
Time. Technical Report. Cryptology ePrint Archive, Report 2020/1247, 2020.
https://eprint. iacr. org ....
[57] Jiaheng Zhang, Tiancheng Xie, Yupeng Zhang, and Dawn Song. 2020. Transparent
polynomial delegation and its applications to zero knowledge proof. In 2020 IEEE
Symposium on Security and Privacy (SP). IEEE, 859–876.
[58] Yupeng Zhang, Daniel Genkin, Jonathan Katz, Dimitrios Papadopoulos, and
Charalampos Papamanthou. 2017. vSQL: Verifying arbitrary SQL queries over
dynamic outsourced databases. In 2017 IEEE Symposium on Security and Privacy
(SP). IEEE, 863–880.
[59] Yupeng Zhang, Daniel Genkin, Jonathan Katz, Dimitrios Papadopoulos, and
Charalampos Papamanthou. 2017. A Zero-Knowledge Version of vSQL. (2017).
A Formal definitions
A.1 Discrete logarithm relation assumption
Given a security parameter 𝜆, for every polynomial-time adversary
A and for all n ≥ 1, the discrete logarithm relation assumption [11]
assumes that
G ← Setup(1𝜆),
$← G,
G1, . . . , Gn
a1, . . . , an ← A(G1, . . . , Gn)
 ≤ negl(𝜆).
(36)
 ∃ ai ≠ 0 ∧
 ai · Gi = 0
We say 
Pr
i∈[n]
where negl(𝜆) is a negligible function in the security parameter 𝜆.
ai · Gi = 0 is a non-trivial discrete logarithm relation
between G1, . . . , Gn. The discrete logarithm relation assumption
states that an adversary cannot find a non-trivial relation between
randomly chosen group elements. It degenerates to the discrete
logarithm assumption when n = 1.
A.2 Properties of Commitment schemes
A secure commitment scheme Com = (Setup, Commit, Check)
must satisfy the notion of correctness, binding and hiding.
(38)
Hiding: Com is perfectly hiding if for every polynomial-time
Binding: Com is computationally binding if for every polynomial-
time adversary A
pp ← Setup(1𝜆),
(c, r) ← Commit(pp, u)
pp ← Setup(1𝜆),
(c, u0, r0, u1, r1) ← A(pp)
Pr
adversary A
Pr
Check(pp, c, u, r) = 1
Check(pp, c, u1, r1) = 1 ∧
u0 ≠ u1
(cid:34)
Correctness: for any u ∈ Mpp, there is
 Check(pp, c, u0, r0) = 1 ∧
 A(pp, c) = b
(cid:34) (s, w) ∉ R ∨
Pr
Pr
⟨P(𝜎, s, w), V(𝜎, s; 𝜌)⟩ = 1
pp ← Setup(1𝜆),
(u0, u1) ← A(pp),
$← {0, 1},
b
(c, r) ← Commit(pp, ub)
(cid:35)
(cid:35)
A.3 Properties of interactive arguments of knowledge
The key security properties for an interactive argument of knowl-
edge Arg = (KeyGen, P,V) are
nomial time adversary A,
Completeness: Arg has perfect completeness if for every poly-
= 1.
(37)
 ≤ negl(𝜆).
 = 1
2 .
(39)
𝜎 ← KeyGen(1𝜆),
(s, w) ← A(𝜎)
= 1.
(40)
In random oracle model, Sim is allowed to run a partial simulation
of the random oracle [4].
Witness-extended emulation: Arg has computational witness-
extended emulation if for all deterministic polynomial-time P∗,
there exists a polynomial-time emulator E s.t. for every pair of
polynomial-time adversaries A = (A1, A2),
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
Pr
 A1(tr) = 1
– Pr
𝜎 ← KeyGen(1𝜆),
(s, w) ← A2(𝜎),
tr ← ⟨P∗(𝜎, s, w), V(𝜎, s)⟩
A1(tr) = 1 ∧
tr accepting ⇒
(s, w) ∈ R
𝜎 ← KeyGen(1𝜆),
(s, w) ← A2(𝜎),
(tr, w) ← EO(𝜎, s)
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
≤ negl(𝜆),
(41)
where E is given oracle access to O = ⟨P∗(𝜎, s, w),V(𝜎, s)⟩, which
permits rewinding to a specific point and resuming with fresh
verifier randomness from this point onwards.
Public-coin: Arg is said to be public-coin is all messages sent
by V are sampled uniformly at random and independent of P’s
messages.
Special honest-verifier zero knowledge: Arg has perfect spe-
cial honest-verifier zero knowledge (PSHVZK) if for every pair of
polynomial-time adversaries A = (A1, A2) and (s, w) ∈ R, there
exists a probablistic polynomial-time simulator Sim s.t.
 A1(tr, 𝜎, s) = 1
Pr
𝜎 ← KeyGen(1𝜆),
(s, w, 𝜌) ← A2(𝜎),
tr ← ⟨P(𝜎, s, w), V(𝜎, s; 𝜌)⟩
𝜎 ← KeyGen(1𝜆),
(s, w, 𝜌) ← A2(𝜎),
tr ← Sim(𝜎, s, 𝜌)
 A1(tr, 𝜎, s) = 1
= Pr
.
(42)
A.4 Properties of non-interactive zero-knowledge arguments
of knowledge
The key security properties for a non-interactive zero-knowledge
argument of knowledge Π are
Completeness: Π has perfect completeness if for every (s, w) ∈ R,
Verify(𝜎, s, 𝜋) = 1
𝜎 ← KeyGen(1𝜆),
𝜋 ← Prove(𝜎, s, w)
= 1
(43)
(cid:34)
Pr
Knowledge soundness: Π has computational knowledge sound-
ness if for every polynomial-time adversary A there exists a polynomial-
time extractor Ext s.t.
(cid:35)
(cid:35)
𝜎 ← KeyGen(1𝜆),
(s, 𝜋; w) ← (A||Ext)(𝜎)
≤ negl(𝜆),
(44)
(cid:34) (s, w) ∉ R ∧
Pr
Verify(𝜎, s, 𝜋) = 1
Zero-knowledge: Π has perfect zero-knowledge if for every pair
of (s, w) ∈ R and every adversary A = (A1, A2) there exists a
simulator Sim that
A1(𝜎, s, 𝜋) = 1
 (s, w) ∈ R ∧
 (s, w) ∈ R ∧
A1(𝜎, s, 𝜋) = 1
Pr
= Pr
𝜎 ← KeyGen(1𝜆),
(s, w) ← A2(𝜎),
𝜋 ← Prove(𝜎, s, w)
𝜎 ← KeyGen(1𝜆),
(s, w) ← A2(𝜎),
𝜋 ← Sim(𝜎, s)
.
(45)
Session 11B: Zero Knowledge II CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3016B Arguments for inner products
The arguments in this section all refer to the Pedersen commitment
scheme in Section 2.2.
B.1 Inner product
We first consider a simple case that with commitments L, R ∈ G to
vectors l, r ∈ Fn
p and commitment T ∈ G to scalar t ∈ Fp, a prover
P wants to demonstrate to a verifier V that ⟨l, r⟩ = t. In Figure 8
we show a simple protocol for the relation
L, R, T ∈ G;
l, r ∈ Fn
p, t ∈ Fp,
𝜄, 𝜌, 𝜏 ∈ Fp
Check(pp, L, l, 𝜄) = 1 ∧
Check(pp, R, r, 𝜌) = 1 ∧
Check(pp, T, t, 𝜏) = 1 ∧
⟨l, r⟩ = t
(46)
 .
It has completeness, witness-extended emulation and zero knowledge.
In particular, it achieves zero knowledge by introducing randomly
sampled mask vectors ld and rd.
Public input: commitments L, R, T ∈ G
P’s private input: l, r ∈ Fn
p, t ∈ Fp, blinders 𝜄, 𝜌, 𝜏 ∈ Fp
P : ld, rd
$← Fn
p,
(Ld, 𝜄d) ← Commit(pp, ld),
s1 = ⟨l, rd⟩ + ⟨ld, r⟩,
(S1, 𝜎1) ← Commit(pp, s1),
s2 = ⟨ld, rd⟩,
(Rd, 𝜌d) ← Commit(pp, rd),
(S2, 𝜎2) ← Commit(pp, s2).
P → V : Ld, Rd, S1, S2.
V → P : e
$← Fp.
P : l′ = l + e · ld,
𝜄′ = 𝜄 + e · 𝜄,
P → V : l′, r′, 𝜄′, 𝜌′, 𝜏′.
r = r + e · rd,
𝜌′ = 𝜌 + e · 𝜌d,
𝜏′ = 𝜏 + e · 𝜎1 + e2 · 𝜎2.
and
V : L′ = L + e · Ld, Check(pp, L, l′, 𝜄′) ?= 1,
R′ = R + e · Rd, Check(pp, R, r′, 𝜌′) ?= 1,
T′ = T + e · S1 + e2 · S2,
Check(pp, T′, ⟨l′, r′⟩,𝛾′) ?= 1.
Figure 8: Zero-knowledge argument for inner product
B.2 Sum of inner products
Another common scenario is that for a group of vectors {li, ri ∈
p}i∈[m] committed as {Li, Ri ∈ G}i∈[m], and scalar value t ∈ Fp
Fn
committed as T ∈ G, P wants to demonstrate that t is the sum of
the m inner products
{Li, Ri ∈ G}i∈[m],
T ∈ G;
{li, ri ∈ Fn
p}i∈[m],
{𝜄i, 𝜌i ∈ Fp}i∈[m],
t ∈ Fp, 𝜏 ∈ Fp


i∈[m]
i∈m⟨li, ri⟩ = t, or more formally
Check(pp, Li, li, 𝜄i) = 1 ∧
Check(pp, Ri, ri, 𝜌i) = 1 ∧
Check(pp, T, t, 𝜏) = 1 ∧
i∈[m]
⟨li, ri⟩ = t

i∈[m]
In Figure 9, we show how it can be reduced to the single inner
$← Fp, one may compute
product case. With a random challenger z
.
(47)
p}i∈[m], t ∈ Fp, blinders {𝜄i, 𝜌i}i∈[m], 𝜏 ∈ Fp
P : l(Z) = 
Public input: commitments {Li, Ri}i∈[m], T
P’s private input: {li, ri ∈ Fn
li · Z i,
⟨l(Z), r(Z)⟩ = t +
∀ k ∈ [1 – m, m – 1]\0,
r(Z) = 

k∈[1–m,m–1]\0
i∈[m]
ri · Z–i,
i∈[m]
tk · Z k,
$← Fp.
P → V : {Tk}.
V → P : z
P : lz = l(z) = 

𝜄z = 

P & V : Lz = 
i∈[m]
𝜏z = 𝜏 +
tz = t +
i∈[m]
k∈[1–m,m–1]\0
zi · 𝜄i,

k∈[1–m,m–1]\0
zi · Li,
i∈[m]
k∈[1–m,m–1]\0
Tz =
zi · li,
zk · tk,
𝜌z = 
Rz = 
i∈[m]
zk · 𝜏k.
i∈[m]
zk · Tk + T.
z–i · 𝜌i,
z–i · Ri,
(Tk, 𝜏k) ← Commit(pp, tk).
rz = r(z) = 
i∈[m]
z–i · ri,
Public input: commitments Lz, Rz, Tz ∈ G,
P’s private input: lz, rz ∈ Fn
p, tz ∈ Fp, blinders 𝜄z, 𝜌z, 𝜏z ∈ Fp
Figure 9: Argument for sum of inner products
linear combinations of {li}i∈[m] and {ri}i∈[m] as
z–i · ri,
tk · zk.
(48)
(49)