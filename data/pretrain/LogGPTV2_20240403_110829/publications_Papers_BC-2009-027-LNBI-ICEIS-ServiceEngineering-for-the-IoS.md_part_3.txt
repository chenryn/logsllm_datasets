Fig. 3. Perspectives and dimensions of the ISE methodology
Each of the perspectives (layers or rows) of the ISE methodology (Figure 3) can be
regarded as a phase in the development process of services. Thus, the models and
methods which are assigned to each of the layers support the development process
from different view points (e.g., business, conceptual, logical, technical, and runtime).
For all the cells of the matrix we have developed major artifacts which should be
considered in the business service development process. These artifacts include im-
portant elements such as balanced scorecards, UML, mind maps, BPMN, BPEL,
OWL, OCL, etc. Artifacts are assigned to the intersection of an abstraction layer and a
dimension (Figure 3).
At the business layer, the development of a service is triggered, typically but not
always, by the planning process, where strategies, objectives and performance meas-
ures (KPI) that can help an organization to achieve its goals. Fundamental services
can often be derived from the strategic planning activity of an organization. Other
elements that are typically part of the strategy, or direction, of an organization include
resources, capital and people. Models and techniques that can be used to identify
fundamental services at the business layer include the SWOT and PEST analysis.
Once a list of services is identified – that is deemed necessary for the organization to
24 J. Cardoso, K. Voigt, and M. Winkler
stay competitive – the service engineering process will proceed with the analysis of
the conceptual layer, the logical layer and the technical layer. Once a full technical
specification of the service is created, the service is sent to the runtime platform for
execution. For services, the business layer, the conceptual layer, the logical layer, the
technical layer, and the runtime layer give a different perspective for stakeholders (i.e.
CEO, CTO, CIO, architects, IT analysts, programmers, etc.) to services.
4.3 Service Model Integration
In order to implement the ISE methodology different stakeholders have to develop
different models defining a service. Since the union of all models defines a service
they need to be integrated and synchronized. This integration task is facing major
challenges because of the various people involved within the development process
and the rising complexity of the models. To cope with these challenges we propose to
integrate the models automatically supporting each role in ISE.
The ISE models contain artifacts representing modeled information. Following the
separation of concerns paradigm raised by [10], the ISE methodology divides a service
into five dimensions, namely: service description, workflow, data, people and rules.
Furthermore, each of these models is divided into four layers (levels) of abstraction.
Throughout one dimension artifacts are modeled with respect to different views and
refined until they conform to a technical specification. This leads to multiple representa-
tions of information on different layers of abstraction in the corresponding dimensions.
Each of these models has to be specified and maintained. Changes in one model have to
be propagated into the affected models holding the overlapping information. This is a
time-consuming and challenging task since each of the models has to be aware of
changes and needs to be adjusted. Due to several people involved in the development
this leads also to an increased communication effort. For a structured approach we sepa-
rate the dependencies between models into two classes: vertical and horizontal.
Vertical Dependencies cover the synchronization of dependencies between models
on different layers of abstraction in one dimension. It represents the bridging of layers
of abstraction by transforming between multiple representations of artifacts.
Horizontal Dependencies define the synchronization of models on the same layer of
abstraction. This describes dependencies between models of different dimensions
which refer to artifacts of other dimensions. This also includes multiple representa-
tions of an artifact on the same layer of abstraction.
These dependencies form the integration of the models and have to be imple-
mented manually or by automatic support. Being more precise, a dependency is de-
fined by a mapping. Formally a mapping assigns to a set of artifacts a set of artifacts;
where one sets corresponds to the other. That means the different representations of
information are assigned to each other. To illustrate the dependencies, Figure 4 shows
an example which depicts the dependencies between two layers of abstraction as well
as between models on the same layer but of different dimensions. The workflow di-
mension shown is specified regarding the conceptual and logical layers. The concep-
tual layer is represented by an UML activity diagram. The Business Process Modeling
Notation (BPMN) is used to represent the logical layer. The artifacts of the logical
layer of the data dimension are modeled using an OWL-UML profile. The arrows
depict artifacts that need to be synchronized and are mapped onto each other.
Service Engineering for the Internet of Services 25
Fig. 4. Example of models (UML activity diagram, BPMN and OWL-UML profile) synchroni-
zation
Actions modeled in the activity diagram are again represented in BPMN as tasks.
Therefore, Action A needs to be in synchronized with Task A. That means that UML
actions need to be mapped to BPMN tasks. The XOR between Task B and Task C of
the BPMN model is mapped from Action B or C of the UML model. Furthermore, the
Information I artifact used in the workflow is defined in the OWL-model (i.e., it de-
pends on it). When one model changes (e.g. renaming or deletion), the depending
models have to be updated. These updates can be done manually or by providing an
automatic support. One solution to enable an automatic approach is by using model
transformations for implementing mappings.
The first step to enable the implementation of model transformations is to define
one common formal representation of models. This can be done using ontology
formalism or more mature concepts like the Meta Object Facility (MOF). Based on
this formalism, a domain specific language for model transformation can be used to
define rules and apply them to the models. During the last years many model trans-
formation languages have been proposed, both by academia and industry. For an
overview, we refer to [3] classification of today’s approaches. The two most promi-
nent proposals in the context of Model Driven Architecture (MDA) are Query, View
and Transformation (QVT) and the ATLAS Transformation Language (ATL).
We have chosen to rely on MDA to support model transformations because of
matured concepts, well established infrastructure for model management and trans-
formation, and available OMG standards. The MDA guide (2003) defines a model
transformation as “the process of converting one model to another model of the same
system”. Thus a model transformation is an implementation of a mapping (model
dependency specification). We follow [7] refining this definition to an automatic
26 J. Cardoso, K. Voigt, and M. Winkler
generation of a target model from a source model, following a transformation defini-
tion. A transformation definition is a set of rules describing formally how a source
model can be transformed into a target model. Using a rule-based language like QVT
to define model transformations executed by an engine allows for incremental and
traceable transformations.
For an automatic model integration we argue for model transformations as the im-
plementation of mappings. Using and applying these concepts enables an automatic
model synchronization. This supports both the implementation of vertical and hori-
zontal dependencies, thus reducing the complexity, effort and errors in modeling a
service using ISE.
5 Conclusions
The Internet of Services (IoS) will provide the opportunity to create and drive a new
“service industry” for producing, changing, adapting, (re)selling, and operating ser-
vices. By providing a holistic approach, the IoS will be able to contribute to the larger
topic of a Web-based business service economy. Business value networks based on
the IoS can only be successfully achieved if important topics, such as legal issues,
community aspects, new business models, service innovation, service governance and
service engineering are exploited.
Service marketplaces act as enablers for business interactions between various
stakeholders in the IoS where business services are offered, composed, sold, and in-
voked by the means of IT. In order to support all stakeholders in their business, mar-
ketplaces need to provide advanced functionality such as service search based on
functional and non-functional service properties, negotiation and monitoring of SLA
and the means for billing and payment. A major constituent of a service marketplace
include a common service description framework forming the base for the service
lifecycle on the marketplace.
Based on the requirements from marketplaces and based on the concept of IoS, we
have introduced a new service engineering methodology for developing and
describing services. By covering the technical and business perspectives, ISE pro-
vides a structured approach for service engineering. The structuring is achieved by
following the separation of concerns and model-driven design. Therefore, we divide a
service into several models and identify the need for model integration. Finally, we
adopt a model-driven approach by using model transformations to integrate individual
models on different layers of abstraction. This leverages service engineering as a
discipline and enables the realization of the IoS.
Acknowledgements. The TEXO project was funded by means of the German Federal
Ministry of Economy and Technology under the promotional reference 01MQ07012.
The authors take the responsibility for the contents.
References
1. Baida, Z., Gordijn, J., Omelayenko, B.: A Shared Service Terminology for Online Service
Provisioning. In: The 6th International Conference on Electronic Commerce (ICEC 2004)
(2004)
Service Engineering for the Internet of Services 27
2. Barros, A., Dumas, M., Bruza, P.: The Move to Web Service Ecosystems. BPTrends
Newsletter 3(3) (2005)
3. Czarnecki, K., Helsen, S.: Feature-based Survey of Model Transformation Approaches.
IBM Systems Journal 45(3) (June 2006)
4. Fielding, R.T.: Architectural Styles and the Design of Network-based Software Architec-
tures, Ph.D. Thesis, University of California, Irvine, California (2000)
5. Hepp, M., Leukel, J., Schmitz, V.: A quantitative analysis of product categorization stan-
dards: content, coverage, and maintenance of ecl@ss, UNSPSC, eOTD, and the rosettanet
technical dictionary. Knowl. Inf. Syst. 13(1), 77–114 (2007)
6. Hull, R., Benedikt, M., Christophides, V., Su, J.: E-services: a look behind the curtain. In:
Proceedings of the twenty-second ACM SIGMOD-SIGACTSIGART symposium on Prin-
ciples of database systems, pp. 1–14. ACM Press, New York (2003)
7. Kleppe, A., Warmer, J.: MDA Explained. The Model Driven Architecture: Practice and
Promise. Addison-Wesley, Reading (2003)
8. O’Sullivan, J.: Towards a Precise Understanding of Service Properties. PhD thesis, Queen-
sland University of Technology (2006)
9. OASIS. OASIS SOA Reference Model (2006) (retrieve on 8 April 2008),
http://www.oasis-open.org/committees/tc_home.php?
wg_abbrev=soa-rm
10. Parnas, D.L.: On the criteria to be used in decomposing systems into modules. Communi-
cations of the ACM (12), 1053–1058 (1972)
11. Piccinelli, G., Mokrushin, L.: Dynamic Service Aggregation in Electronic Marketplaces.
TechReport HPL-2001-31, Hewlett-Packard Company (2001)
12. Rust, R.T., Kannan, P.: E-service: a new paradigm for business in the electronic environ-
ment. Communications of the ACM 46(6), 36–42 (2003)
13. Schroth, C., Janner, T.: Web 2.0 and SOA: Converging Concepts Enabling the Internet of
Services. IT Professional 3, 36–41 (2007)
14. Texo, TEXO – Business Webs in the Internet of Services (retrieve on 8 April 2008),
http://theseus-programm.de/scenarios/en/texo
15. Theseus (retrieve on 8 April 2008), http://theseus-programm.de/
16. Zachman, J.A.: A Framework for Information Systems Architecture. IBM Systems Jour-
nal 26(3) (1987)
The information in this document is proprietary to the following Theseus Texo con-
sortium members: SAP AG, empolis GmbH, intelligent views gmbh, ontoprise
GmbH, Siemens AG, Fraunhofer Gesellschaft, FZI Forschungszentrum Informatik
Karlsruhe, the German Research Center for Artificial Intelligence (DFKI GmbH),
Technische Universität Darmstadt, Technische Universität Dresden, Technische Uni-
versität München and Universität Karlsruhe (TH). The information in this document
is provided “as is”, and no guarantee or warranty is given that the information is fit
for any particular purpose. The above referenced consortium members shall have no
liability for damages of any kind including without limitation direct, special, indirect,
or consequential damages that may result from the use of these materials subject to
any liability which is mandatory due to applicable law. Copyright 2008 by the TEXO
Theseus Texo consortium.