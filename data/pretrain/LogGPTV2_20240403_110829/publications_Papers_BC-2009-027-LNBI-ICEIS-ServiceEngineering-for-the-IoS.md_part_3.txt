### Figure 3: Perspectives and Dimensions of the ISE Methodology

Each perspective (or layer) in the ISE methodology, as depicted in Figure 3, can be considered a phase in the service development process. The models and methods associated with each layer support the development from various viewpoints, such as business, conceptual, logical, technical, and runtime.

For each cell in the matrix, we have developed key artifacts that are essential for the business service development process. These artifacts include balanced scorecards, UML, mind maps, BPMN, BPEL, OWL, OCL, and others. Artifacts are assigned to the intersection of an abstraction layer and a dimension, as shown in Figure 3.

#### Business Layer
At the business layer, the development of a service is typically initiated by the planning process, which includes strategies, objectives, and performance measures (KPIs) that help the organization achieve its goals. Fundamental services often stem from the strategic planning activities of the organization. Other elements that are part of the strategy or direction of the organization include resources, capital, and people. Techniques such as SWOT and PEST analysis can be used to identify fundamental services at this layer.

Once a list of necessary services is identified, the service engineering process continues with the analysis of the conceptual, logical, and technical layers. After a full technical specification is created, the service is deployed to the runtime platform for execution. The different layers—business, conceptual, logical, technical, and runtime—provide distinct perspectives for stakeholders (e.g., CEO, CTO, CIO, architects, IT analysts, programmers) on the service.

### 4.3 Service Model Integration

To implement the ISE methodology, different stakeholders must develop various models that define a service. Since the union of all these models defines the service, they need to be integrated and synchronized. This integration task faces significant challenges due to the involvement of multiple people and the increasing complexity of the models. To address these challenges, we propose automating the model integration to support each role in ISE.

The ISE models contain artifacts representing modeled information. Following the separation of concerns paradigm [10], the ISE methodology divides a service into five dimensions: service description, workflow, data, people, and rules. Each of these dimensions is further divided into four layers (levels) of abstraction. Throughout one dimension, artifacts are modeled with respect to different views and refined until they conform to a technical specification, leading to multiple representations of information at different abstraction levels.

Each model must be specified and maintained, and changes in one model must be propagated to the affected models holding overlapping information. This is a time-consuming and challenging task, as each model must be aware of changes and adjusted accordingly. The involvement of multiple people in the development process also increases the communication effort. To structure this approach, we separate the dependencies between models into two classes: vertical and horizontal.

- **Vertical Dependencies**: Cover the synchronization of dependencies between models at different abstraction levels within one dimension. This involves transforming between multiple representations of artifacts.
- **Horizontal Dependencies**: Define the synchronization of models at the same abstraction level but across different dimensions. This includes dependencies between models of different dimensions that refer to artifacts of other dimensions, and it may involve multiple representations of an artifact at the same abstraction level.

These dependencies form the basis for model integration, which can be implemented manually or with automatic support. A dependency is defined by a mapping, where a set of artifacts is mapped to another set of artifacts, ensuring that different representations of information are aligned. Figure 4 illustrates an example of dependencies between two abstraction layers and between models on the same layer but of different dimensions.

#### Example of Model Synchronization

In Figure 4, the workflow dimension is specified for the conceptual and logical layers. The conceptual layer is represented by a UML activity diagram, while the logical layer is represented by BPMN. The artifacts of the logical layer of the data dimension are modeled using an OWL-UML profile. The arrows in the figure depict artifacts that need to be synchronized and mapped onto each other.

- Actions modeled in the UML activity diagram are represented as tasks in BPMN. For example, Action A in the UML diagram needs to be synchronized with Task A in the BPMN model.
- The XOR between Task B and Task C in the BPMN model is mapped from Action B or C in the UML model.
- The Information I artifact used in the workflow is defined in the OWL model, indicating a dependency.

When a model changes (e.g., renaming or deletion), the dependent models must be updated. These updates can be done manually or with automatic support. One solution for enabling an automatic approach is to use model transformations to implement mappings.

#### Implementing Model Transformations

The first step in implementing model transformations is to define a common formal representation of the models. This can be achieved using ontology formalism or more mature concepts like the Meta Object Facility (MOF). Based on this formalism, a domain-specific language for model transformation can be used to define rules and apply them to the models. Many model transformation languages have been proposed by academia and industry. For an overview, we refer to [3] for a classification of today’s approaches. The two most prominent proposals in the context of Model Driven Architecture (MDA) are Query, View, and Transformation (QVT) and the ATLAS Transformation Language (ATL).

We have chosen to rely on MDA for model transformations due to its mature concepts, well-established infrastructure for model management and transformation, and available OMG standards. According to the MDA guide (2003), a model transformation is “the process of converting one model to another model of the same system.” We refine this definition to an automatic generation of a target model from a source model, following a transformation definition. A transformation definition is a set of rules describing how a source model can be transformed into a target model. Using a rule-based language like QVT to define and execute model transformations allows for incremental and traceable transformations.

For automatic model integration, we advocate for model transformations as the implementation of mappings. Applying these concepts enables automatic model synchronization, supporting both vertical and horizontal dependencies. This reduces the complexity, effort, and errors in modeling a service using ISE.

### 5. Conclusions

The Internet of Services (IoS) will provide the opportunity to create and drive a new "service industry" for producing, changing, adapting, (re)selling, and operating services. By providing a holistic approach, the IoS will contribute to the larger topic of a Web-based business service economy. Successful business value networks based on the IoS require addressing important topics such as legal issues, community aspects, new business models, service innovation, service governance, and service engineering.

Service marketplaces act as enablers for business interactions between various stakeholders in the IoS, where business services are offered, composed, sold, and invoked via IT. To support all stakeholders, marketplaces need to provide advanced functionality, such as service search based on functional and non-functional properties, negotiation and monitoring of SLAs, and means for billing and payment. A major component of a service marketplace is a common service description framework, forming the base for the service lifecycle.

Based on the requirements from marketplaces and the concept of the IoS, we have introduced a new service engineering methodology for developing and describing services. By covering both technical and business perspectives, ISE provides a structured approach for service engineering. The structuring is achieved through the separation of concerns and model-driven design. We divide a service into several models and identify the need for model integration. Finally, we adopt a model-driven approach using model transformations to integrate individual models at different abstraction levels. This enhances service engineering as a discipline and enables the realization of the IoS.

### Acknowledgements

The TEXO project was funded by the German Federal Ministry of Economy and Technology under the promotional reference 01MQ07012. The authors take responsibility for the contents.

### References

1. Baida, Z., Gordijn, J., Omelayenko, B.: A Shared Service Terminology for Online Service Provisioning. In: The 6th International Conference on Electronic Commerce (ICEC 2004) (2004)
2. Barros, A., Dumas, M., Bruza, P.: The Move to Web Service Ecosystems. BPTrends Newsletter 3(3) (2005)
3. Czarnecki, K., Helsen, S.: Feature-based Survey of Model Transformation Approaches. IBM Systems Journal 45(3) (June 2006)
4. Fielding, R.T.: Architectural Styles and the Design of Network-based Software Architectures, Ph.D. Thesis, University of California, Irvine, California (2000)
5. Hepp, M., Leukel, J., Schmitz, V.: A quantitative analysis of product categorization standards: content, coverage, and maintenance of ecl@ss, UNSPSC, eOTD, and the rosettanet technical dictionary. Knowl. Inf. Syst. 13(1), 77–114 (2007)
6. Hull, R., Benedikt, M., Christophides, V., Su, J.: E-services: a look behind the curtain. In: Proceedings of the twenty-second ACM SIGMOD-SIGACTSIGART symposium on Principles of database systems, pp. 1–14. ACM Press, New York (2003)
7. Kleppe, A., Warmer, J.: MDA Explained. The Model Driven Architecture: Practice and Promise. Addison-Wesley, Reading (2003)
8. O’Sullivan, J.: Towards a Precise Understanding of Service Properties. PhD thesis, Queensland University of Technology (2006)
9. OASIS. OASIS SOA Reference Model (2006) (retrieve on 8 April 2008), http://www.oasis-open.org/committees/tc_home.php?wg_abbrev=soa-rm
10. Parnas, D.L.: On the criteria to be used in decomposing systems into modules. Communications of the ACM (12), 1053–1058 (1972)
11. Piccinelli, G., Mokrushin, L.: Dynamic Service Aggregation in Electronic Marketplaces. TechReport HPL-2001-31, Hewlett-Packard Company (2001)
12. Rust, R.T., Kannan, P.: E-service: a new paradigm for business in the electronic environment. Communications of the ACM 46(6), 36–42 (2003)
13. Schroth, C., Janner, T.: Web 2.0 and SOA: Converging Concepts Enabling the Internet of Services. IT Professional 3, 36–41 (2007)
14. Texo, TEXO – Business Webs in the Internet of Services (retrieve on 8 April 2008), http://theseus-programm.de/scenarios/en/texo
15. Theseus (retrieve on 8 April 2008), http://theseus-programm.de/
16. Zachman, J.A.: A Framework for Information Systems Architecture. IBM Systems Journal 26(3) (1987)

**Note:** The information in this document is proprietary to the following Theseus Texo consortium members: SAP AG, empolis GmbH, intelligent views gmbh, ontoprise GmbH, Siemens AG, Fraunhofer Gesellschaft, FZI Forschungszentrum Informatik Karlsruhe, the German Research Center for Artificial Intelligence (DFKI GmbH), Technische Universität Darmstadt, Technische Universität Dresden, Technische Universität München, and Universität Karlsruhe (TH). The information is provided "as is," and no guarantee or warranty is given that the information is fit for any particular purpose. The above-referenced consortium members shall have no liability for damages of any kind, including without limitation direct, special, indirect, or consequential damages that may result from the use of these materials, subject to any liability which is mandatory due to applicable law. Copyright 2008 by the TEXO Theseus Texo consortium.