c+ ← ∅, c− ← ∅
for each ai ∈ A \ {a} do
(cid:46) Present context set c+, absent context
Eli ← getEventListeners(ai,G)
if pathExists(DPIn → e ∈ Eli → DPOut,G) then
if t ∈ getHandledEventTypes(Eli , M ) then
else
(cid:46) All apps except a
(cid:46) Eli ⊂ G’s vertices
continue
set c−
6:
7:
8:
9:
10:
11:
12:
13:
c+ ← c+ ∪ ai
c− ← c− ∪ ai
V.append((a, t, c+, c−))
As a result, we deﬁne the present context as the set of other
apps that 1) handle the vulnerability’s missing event type in
the absence of the vulnerable app’s event handler’s handling
of it, 2) are affected by data plane input, and 3) have data
plane effects. We deﬁne absent context as the set of other apps
that, like the app in question, do not handle the vulnerability’s
missing event type but can be affected by data plane input and
have data plane effects.
The present context lets us determine what the data plane
effects are if the unhandled event type is dispatched. The
absent context lets us determine what other apps might have
concurrent inﬂuence over data plane effects. We note that
context is necessary but not sufﬁcient for exploit generation.
Context is an over-approximation of the set of apps needed to
exploit the vulnerability.
We note that exploit generation is nontrivial and that
automatic exploit generation [3]
is an ongoing research
area. EVENTSCOPE’s output includes “valid” vulnerabilities
and contexts that EVENTSCOPE believes to be reachable
from the data plane and to have data plane impacts. While
EVENTSCOPE’s validation provides strong soundness proper-
ties, static analysis is necessarily imprecise; manual veriﬁca-
tion is still recommended. EVENTSCOPE provides precisely
the details that need to be included in a bug report. How-
ever, the tool neither provides a guarantee that a bug exists
nor automatically submits bug reports. For the vulnerabilities
EVENTSCOPE found, we manually examined the source code
to conﬁrm that the vulnerabilities existed.
2) Methodology: EVENTSCOPE’s approach for vulnerabil-
ity validation is shown in Algorithm 3. It uses the event ﬂow
graph, candidate vulnerabilities, and the event use matrix as
inputs. Each candidate vulnerability is represented as a tuple
of the app and unhandled event type (line 1). For each event
type, EVENTSCOPE gets the app’s event listeners (line 2). It
performs path connectivity queries over the event ﬂow graph.
If at least one path does not exist that starts from the data plane,
goes through one of the app’s event handlers, and ends in the
data plane, then the algorithm does not consider a vulnerability
to be relevant, either because the event listener is not affected
by data plane input or because the resulting path does not have
9
(a) Latency CDF
(b) Method traversal CDF
Fig. 7: Component analysis performance results.
data plane effects (lines 3–4).
The algorithm initializes the present and absent context
sets to be empty (line 5). It inspects all of the other apps in
the event ﬂow graph to build the context (line 6). If another
app’s event listener is affected by data plane input and has data
plane effects (line 8), it checks whether the missing event type
is handled by that app (line 9) or not (line 11), and builds the
context sets accordingly (lines 10 and 12). It then appends the
vulnerability to the vulnerability list (line 13).
C. Performance Results
We ran EVENTSCOPE using an Intel Core i5-4590
3.30 GHz CPU with 16 GB of memory on ONOS and its
associated apps. Figure 7 shows the cumulative distribution
functions (CDFs) of the component analysis latency (Fig-
ure 7a) and the number of methods traversed in the call
graph generation (Figure 7b); the latency corresponds to the
computations of lines 2–17 in Algorithm 2, and the methods
traversed correspond to line 5 in Algorithm 2.
In total, we analyzed 249 components found within
ONOS’s 1.2 million lines of Java, which required full traversals
across 8064 method invocations for call graph generation.
We found that the median per-component analysis time was
1.55 s and the mean per-component analysis time was 3.14 s,
or approximately 13 min in total. For call graph generation,
we found that each component required a median traversal
of 16 methods and a mean traversal of 32 methods. We also
measured EVENTSCOPE’s peak memory consumption by using
time and found that EVENTSCOPE used 1.82 GB of memory.
VI.
IMPLEMENTATION
We implemented EVENTSCOPE using a combination of
Python and Java. In Python, we used Scikit-learn [52] to
perform hierarchical clustering in the event use analysis. In
Java, we used Soot [60] to generate the control ﬂow graphs
and call graphs used for event use analysis and for determining
entry points. Soot creates an intermediate representation in
Jimple. We also used JGraphT [44] to store in-memory repre-
sentations of event ﬂow graphs and to query path connectivity.
Source code for our implementation’s components is available
at https://www.github.com/bujcich/EventScope.
For connectivity queries in lines 3 and 8 in Algorithm 3
(i.e., pathExists()), we used Dijkstra’s algorithm. The
worst-case performance time for each pathExists() query
can be optimized [19] to O(2 (|E| + |V| log |V|)), where |E|
represents the number of event ﬂow graph edges and |V|
01020Latency [s]0.000.250.500.751.00CDF0100200Methods traversed0.000.250.500.751.00CDFrepresents the number of event ﬂow graph nodes. In practice,
we found that the small number of apps and events did not
pose a challenge for connectivity computations.
operates
on
Java
Soot
bytecode, which
allows
EVENTSCOPE to analyze closed-source Java-based controllers
and apps. Similar program analysis tools, such as angr [56],
can operate on closed-source binary executables. Using
bytecode is advantageous, as we can use EVENTSCOPE to
generate event ﬂow graphs without requiring Java source
code. Thus, EVENTSCOPE can be useful for practitioners as
a code audit tool. Although we did not encounter any apps
that used dynamic calls, such as the Java language’s reﬂection
API, TamiFlex [10] extends Soot to perform static analysis
that accounts for reﬂection.
Although our implementation generates a list of vulner-
abilities for ONOS, EVENTSCOPE is not speciﬁc to ONOS.
EVENTSCOPE’s analysis and methodology can be applied
to any event-driven SDN controller, which includes popular
controllers such as OpenDaylight, HPE VAN, and Floodlight.
VII. ONOS VULNERABILITY EVALUATION RESULTS
EVENTSCOPE identiﬁed 14 vulnerabilities that satisfy all
of the following properties: 1) the vulnerable event handler
features an unhandled event type, which was identiﬁed through
similarity clustering analysis; 2) the event handler can be
reached from data plane input; and 3) the event handler can
reach a data plane output.
Table I shows the 14 vulnerabilities, based on app, event
kind, and unhandled event types. Table I also provides sample
paths in the event ﬂow graph. We found that all vulnerabilities
involved the HostEvent event kind, which indicates that data
plane input has the most effect on host information in ONOS.
EVENTSCOPE’s output included 14 possible vulnerabili-
ties. We manually investigated each vulnerability in the source
code and determined that all of them could be exploited from
the data plane. As a result, Table I represents EVENTSCOPE’s
complete output with no false positives. EVENTSCOPE’s ﬁnal
phase essentially ﬁlters out missing event handling that cannot
be reached from the data plane or trigger impacts on the
data plane; as a result, the output provides strong soundness
properties. As we do not have ground truth about which
unhandled event types should be handled, we note that the
event use analysis in Section IV-A should be interpreted as
a ﬁlter of the unhandled event types that are most likely to
require attention, based on such event types’ absence vis-`a-vis
a cluster of the most similar apps. As noted earlier, we chose
the clustering threshold that produced a number of clusters
closely matched to the number of ONOS app categories.
We describe exploits for two of the vulnerabilities below
in Sections VII-A and VII-B, and then, for the sake of space,
brieﬂy discuss the impact of the other vulnerabilities. For the
exploits we created, we used a Mininet [31] SDN network.
We wrote our exploit scripts in Python and used the Scapy [9]
network packet library to generate data plane input.
We notiﬁed the ONOS Security Response Team of the
vulnerabilities and exploits that we discovered through a re-
sponsible disclosure process. We explained the vulnerabilities
and demonstrated working exploits.
10
A. Data Plane Access Control Bypass with acl and fwd (CVE-
2018-12691)
1) Summary: We found that an attacker could bypass data
plane access control policies by sending semantically invalid
packets into the data plane to corrupt the controller’s view
of hosts. That prevented the access control app, acl, from
installing ﬂow deny rules, and that effectively bypassed the
desired access control policy.
We assume a topology of at least two hosts: h1 and h2.
The attacker controls host h1 and wants to communicate
with h2. An access control policy prevents h1 and h2 from
communicating.
2) Method: The attack occurs in two stages.
First, the attacker host h1 sends into the data plane an
ICMP packet with an invalid source IP address (e.g.,
the
broadcast address). The host provider learns about host h1
from the ICMP packet’s source MAC address, creates a host
object (without an associated IP address), and generates a
HostEvent event with a HOST ADDED event type.9 On the
HOST ADDED event type, acl checks whether ﬂow deny
rules should be installed for the added host. Since acl performs
this check at the IP layer only and host h1 has an empty IP
address list, no ﬂow deny rules are installed.
Next, the attacker host h1 sends trafﬁc intended for the tar-
get host h2. The host provider references the prior host object
representing host h1, updates host h1’s list of IP addresses
with host h1’s real IP address, and generates a HostEvent
event with a HOST UPDATED event type. Prior to patching
the vulnerability, acl did not check for the HOST UPDATED
event type and took no action with such events. Another app,
such as fwd, then installs ﬂow allow rules from the attacker
host h1 to the target host h2.
3) Results and implications: We wrote an exploit
that
performed the attack, and we were able to demonstrate that
messages could be sent from the attacker to the target. From a
defender’s perspective, the exploit’s effects may not be obvious
immediately because the ﬂow deny rules were never installed.
A defender would need to check for evidence of the absence
of the ﬂow deny rules or the unintended presence of the ﬂow
allow rules. Since the host object corruption in the ﬁrst stage
need not occur at the same time as the lateral movement in
the second stage, a stealthy attacker could wait until he or she
needed to use such elevated access at a later time.
4) Event ﬂow graph: Figure 8 shows the partial event ﬂow
graph with the relevant code paths used by the attacker. The
attack’s ﬁrst stage follows the left-side path, in which the attack
corrupts the host information in the HostProviderService.
The attack’s second stage triggers a HOST UPDATED event
type that does not get handled by acl’s host event listener; in
addition, the attack’s second stage succeeds as shown by the
right-side path.
9The HOST ADDED event type assumes that the controller has never seen
that host’s MAC address before, but that is unlikely to be true if host h1 had
sent any trafﬁc prior to attacker compromise. However, if we assume that the
attacker has root privileges on host h1, the attacker can change host h1’s
network interface MAC address. Thus, host h1 will appear as a newly added
host and trigger the HOST ADDED event type if the host subsequently sends
any trafﬁc into the data plane.
#
∗
1
2
3
4
5
6
7
8
9
CVE-2018-12691
CVE-2019-11189
CVE-2019-16300
CVE-2019-16298
CVE-2019-16298
CVE-2019-16298
CVE-2019-16299
CVE-2019-16299
CVE-2019-16299
acl
acl
acl
virtualbng
virtualbng
virtualbng
mobility
mobility
mobility
HOST UPDATED
HOST MOVED
HOST REMOVED
HOST MOVED
HOST REMOVED
HOST UPDATED
HOST ADDED
HOST REMOVED
HOST UPDATED
CVE-2019-16301
vtn
HOST MOVED
See Figures 8 and 9 for event ﬂow graph examples.
DPIn DP IN−−−→ inPacket() API READ
hostDetected() HOST ADDED
startMonitoringIp() DP OUT
−−−−−→ DPOut
−−−−−−→ provider.host.InternalHostProvider API WRITE
−−−−−−→
−−−−−−−−→ virtualbng.InternalHostListener API WRITE
−−−−−−→
DPIn DP IN−−−→ inPacket() API READ
hostDetected() HOST MOVED
removeFlowRules() DP OUT
−−−−−→ DPOut
−−−−−−→ provider.host.InternalHostProvider API WRITE
−−−−−−→
−−−−−−−−→ mobility.InternalHostListener API WRITE
−−−−−−→
DPIn DP IN−−−→ inPacket() API READ
−−−−−−→
provider.host.InternalHostProvider API WRITE
vtn.InternalHostListener API WRITE
DPIn DP IN−−−→ inPacket() API READ
hostDetected() HOST ADDED
forward() DP OUT
−−−−−→ DPOut
−−−−−−→ provider.host.InternalHostProvider API WRITE
−−−−−−→
−−−−−−−−→ evpnopenflow.InternalHostListener API WRITE