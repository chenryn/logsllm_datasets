# 六、在 Swarm 上部署真实应用
有了 Swarm 基础设施，我们可以部署各种类型的负载。我们将在这一章和下一章研究应用栈。在本章中，我们将:
*   发现 Swarm 的服务和任务
*   部署 Nginx 容器
*   部署一个完整的 WordPress
*   部署小规模的 Apache Spark 架构。
# 微服务
IT 行业一直热衷于分离和重用其创造的东西，无论是源代码还是应用。在架构级别建模应用也不例外。模块化早期被称为**面向服务的架构** ( **SOA** )，并被基于 XML 的开源协议所粘合。然而，随着容器的出现，现在每个人都在谈论微服务。
微服务是小型且独立的自治模块，它们协同工作来实现架构目标。
微服务架构最膨胀的例子是网络应用栈，例如 WordPress，其中网络服务器可能是一个服务，其他的是数据库、缓存引擎和包含应用本身的服务。通过 Docker 容器对微服务进行建模可以立即完成，这就是该行业目前的发展方式。
![Microservices](img/image_06_001.jpg)
使用微服务有许多优点，它们如下:
*   **可重用性**:你只要拉取你想要的服务(nginx，MySQL)的图片，以防你定制它们
*   **异构性**:你链接包含不同技术的现有模块。如果，在未来的某个时候，你决定从 MySQL 切换到 MariaDB，你就关掉 MySQL，插入 MariaDB
*   **关注小**:拆下的模块很容易单独排除故障
*   **扩展**:您可以轻松地将 web 服务器扩展到 10 个前端，将缓存服务器扩展到 3 个，并在 5 个节点上构建数据库副本，并且有一天可以根据应用负载和需求进行扩展或缩减
*   **恢复力**:如果你有三个 memcached 服务器，其中一个失败了，你可以有一些机制来尝试恢复它，或者忘记它，然后立即启动另一个
# 部署复制的 nginx
我们从一个简单的示例开始，了解如何在 Swarm 上使用服务:部署和扩展 Nginx。
## 一个最小的群体
为了使这一章自给自足，并对作为独立章节阅读的开发人员有用。让我们在本地快速创建一个最小的群模式架构，由一名经理和三名工作人员组成:
1.  我们催生了四个 Docker 主机:
    ```
     for i in seq 3; do docker-machine create -d virtualbox 
          node- $i; done
    ```
2.  然后我们控制`node-1`，我们选择它作为我们的静态管理器，并在 Swarm 上初始化它:
    ```
    eval $(docker-machine env node-1)
    docker swarm init --advertise-addr 192.168.99.100
    ```
3.  Docker 为我们生成了一个令牌，以加入我们的三名员工。因此，我们只需复制粘贴该输出，迭代其他三个工作人员，将他们连接到节点:
    ```
    for i in 2 3 4; do
    docker-machine ssh node-$i sudo docker swarm join \
    --token SWMTKN-1-
          4d13l0cf5ipq7e4x5ax2akalds8j1zm6lye8knnb0ba9wftymn-
          9odd9z4gfu4d09z2iu0r2361v \
    192.168.99.100:2377
    ```
集群模式架构总是通过 Docker 机器外壳环境变量连接到`node-1`，该环境变量由先前的`eval`命令填充。我们需要检查包括领导者管理器在内的所有节点是否都处于活动状态并成功加入了 Swarm:
![A minimal Swarm](img/image_06_002.jpg)
现在，我们可以使用`docker info`命令检查这个 Swarm 集群的状态:
![A minimal Swarm](img/image_06_003.jpg)
这里重要的信息是 Swarm 是活跃的，然后一些 Raft 细节随之而来。
## Docker 服务
Docker 1.12 中引入的一个新命令是`docker service`，这就是我们现在要看到的。服务是您在 Docker Swarm 模式下操作应用的主要方式；这就是您将如何创建、销毁、扩展和滚动更新服务。
服务由任务组成。nginx 服务由 nginx 容器任务组成。服务机制加速(通常)工作节点上的任务。因此，当您创建一个服务时，您必须在它的选项中强制指定一个服务名称和作为服务基础的容器。
。
![Docker service](img/image_06_004.jpg)
创建服务的语法非常直接:您只需使用`docker service create`命令，指定选项，如公开的端口，并选择要使用的容器。我们在这里执行
```
docker service create -p 80:80 --name swarm-nginx --replicas 3
    fsoppelsa/swarm-nginx
```
![Docker service](img/image_06_005.jpg)
该命令启动 nginx，将容器的端口`80`暴露给主机的端口`80`，这样就可以从外部到达它们，并指定一个三的复制因子。
副本因素是您在 Swarm 上缩放容器的方式。如果您指定三个，Swarm 将在三个节点上创建三个 nginx 任务(容器)，并通过在其他可用主机上重新调度 nginx(如果可能的话)来尝试保留这个数量，以防其中一个或多个容器死亡。
如果给出“否”`--replicas`选项，那么默认的复制因子是`1`。
一段时间后，Swarm 需要将映像从集线器或本地的任何注册表拉至主机，并创建适当的容器(并公开端口)；我们看到我们的基础架构中有三个 nginx，命令如下:
```
docker service ls
```
![Docker service](img/image_06_006.jpg)
这些任务实际上安排在三个节点上，如使用以下命令所示:
```
 docker service ps swarm-nginx 
```
![Docker service](img/image_06_007.jpg)
这里使用的`fsoppelsa/swarm-nginx`容器是`richarvey/nginx-php-fpm`的一个微不足道的修改，它是由 PHP 赋能的 nginx 映像。我们使用 PHP 在 Nginx 欢迎页面上输出当前服务器的地址，通过添加一个 PHP 命令来显示负载平衡机制。
```
Docker swarm host 
```
![Docker service](img/image_06_008.jpg)
现在，如果您将浏览器指向管理器 IP 并多次重新加载，您将看到负载平衡器有时会将您重定向到不同的容器。
将加载的第一页类似于下面的截图:
![Docker service](img/image_06_009.jpg)
下面的屏幕截图显示了加载的另一个页面，负载平衡器选择了不同的节点 10.255.0.9:
![Docker service](img/image_06_010.jpg)
以下截图是负载平衡器重定向到节点 10.255.0.10 时加载的另一个页面:
![Docker service](img/image_06_011.jpg)
# 覆盖网络
如果您想将运行在不同主机上的容器连接到您的 Swarm 基础架构，而不仅仅是复制，那么您必须使用网络。例如，您需要将 web 服务器连接到数据库容器，以便它们可以通信。
在群体模式中，这个问题的答案是使用覆盖网络。它们用 Docker 的 libnetwork 和 libkv 实现。这些网络是建立在另一个网络(在标准设置中是物理主机网络)之上的 VxLAN 网络。
VxLAN 是 VLAN 协议的扩展，旨在提高其可扩展性。连接到 Docker VxLAN 网络的不同主机上的容器可以像在同一台主机上一样进行通信。
Docker Swarm 模式包括一个路由网状表，默认情况下，该表支持多主机网络，称为**入口**。
## 集成负载平衡
Swarm Mode 1.12 上的负载平衡是如何工作的？路由以两种不同的方式工作。首先，它通过虚拟 IP 服务暴露的端口工作。对端口的任何请求都分布在承载服务任务的主机中。其次，该服务被赋予一个虚拟 IP 地址，该地址只能在 Docker 网络内部路由。当向这个贵宾地址发出请求时，它们被分发到底层容器。这个虚拟 IP 注册在包含在 Docker Swarm 中的 DNS 服务器内。当对服务名进行 DNS 查询时(例如 nslookup mysql)，将返回虚拟 IP。
# 连接服务:WordPress 示例
启动一堆复制和负载平衡容器的可能性已经是一个好的开始，但是由不同的互连容器组成的更复杂的应用栈呢？
在这种情况下，您可以通过按名称调用容器来链接它们。正如我们刚刚看到的，内部 Swarm DNS 服务器将保证可靠的名称解析机制。如果实例化一个名为`nginx`的服务，您可以将其引用为`nginx`，其他服务将解析为`nginx`虚拟 IP(负载平衡)，从而访问分布式容器。
为了用一个例子来证明这一点，我们现在要在 Swarm 上部署更经典的东西:WordPress。您可以将 WordPress 作为一个容器运行，事实上 Docker Hub 上有一个现成的映像，但是它需要一个外部数据库(在本例中是 MySQL)来存储它的数据。
因此，作为开始，我们将在 Swarm 上创建一个新的专用覆盖网络，称为 WordPress，并在其上运行一个 MySQL 容器作为 Swarm 服务，三个负载平衡的 WordPress 容器(网络容器)也作为 Swarm 服务。MySQL 会暴露端口 3306，而 WordPress 会暴露端口`80`。
让我们从定义我们的覆盖网络开始。当连接到 Swarm 管理器时，我们发出以下命令:
```
docker network create --driver overlay wordpress
```
![Connecting services: A WordPress example](img/image_06_012.jpg)
那么，幕后发生了什么？该命令使用 libnetwork 创建一个覆盖网络，当 Swarm 节点收到需要它的计划任务时，该覆盖网络在 Swarm 节点上变得可用。如果您连接到`node-2`并列出网络，它将始终存在。
我们现在使用以下命令创建一个 MySQL 服务，该服务仅由一个容器(没有 MySQL 本地副本，也没有 Galera 或其他复制机制)组成:
```
docker service create \
--name mysql \
--replicas 1 \
-p 3306:3306 \
--network wordpress \