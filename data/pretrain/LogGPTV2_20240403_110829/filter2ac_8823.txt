titleblackhat:eu-22 DataBinding2Shell: Novel Pathways to RCE Web Frameworks
DataBinding is a mechanism that allows request parameters to be bound to a domain object automatically. It makes development more efficient and code cleaner, and is widely implemented by best web frameworks written in trending programming languages, including Java, JavaScript, Groovy, Python and Ruby.The previous research related to DataBinding mainly focuses on Mass Assignment[1], which is caused by improper use of DataBinding. This occurs when a user is able to access a sensitive field of domain object such as salary, and admin flag, which are not intended by the application. However, the security of the DataBinding mechanism itself has been neglected for a long time. Therefore, we conducted comprehensive research about it and analyzed top web frameworks including Spring, Struts, Grails, Ruby on Rails, etc. Eventually, we found a lot of security bugs, and 2 of them lead to remote code execution. One is known as Spring4Shell (CVE-2022-22965), which is the most critical vulnerability of Spring Framework in the past 10 years. The other is a remote code execution vulnerability of Grails - the most famous Groovy web framework. The details behind these findings will be disclosed for the first time. As a fundamental mechanism that exists in lots of web frameworks written in different programming languages, we believe that the security risk of the DataBinding mechanism is widespread. In this talk, we will take Spring as an example to show how DataBinding mechanism works, and then we will introduce a technical methodology of analyzing DataBinding mechanism implementations. After that, we will present different implementations and design principles of the DataBinding mechanism between different web frameworks, and show how different programming languages' features affect the security of DataBinding implementations. Furthermore, we will detail how we found the security vulnerabilities mentioned above, and how to exploit them to achieve remote code execution. Finally, some approaches to defence will be provided.[1] https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html