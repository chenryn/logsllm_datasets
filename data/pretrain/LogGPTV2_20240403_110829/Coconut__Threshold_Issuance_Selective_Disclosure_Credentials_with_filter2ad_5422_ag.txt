1 , gb
b) Cryptographic
assumptions: Coconut
requires
groups (G1, G2, GT ) of prime order p with a bilinear map
e : G1 × G2 → GT and satisfying the following properties:
(i) Bilinearity means that for all g1 ∈ G1, g2 ∈ G2 and
2) = e(g1, g2)ab; (ii) Non-degeneracy
p,
(a, b) ∈ F2
means that for all g1 ∈ G1, g2 ∈ G2, e(g1, g2) (cid:54)= 1;
(iii) Efﬁciency implies the map e is efﬁciently computable;
(iv)
(cid:54)= G2, and there is no efﬁcient
homomorphism between G1 and G2. The type-3 pairings
are efﬁcient [25]. They support the XDH assumption which
implies the difﬁculty of the Computational co-Difﬁe-Hellman
(co-CDH) problem in G1 and G2, and the difﬁculty of the
Decisional Difﬁe-Hellman (DDH) problem in G1 [10].
furthermore, G1
Coconut also relies on a cryptographically secure hash
function H, hashing an element G1 into an other element
of G1, namely H : G1 → G1. We implement this function
by serializing the (x, y) coordinates of the input point and
applying a full-domain hash function to hash this string into
an element of G1 (as Boneh et al. [10]).
c) Threshold and communication assumptions: Co-
conut assumes honest majority (n/2 < t) to prevent mali-
cious authorities from issuing credentials arbitrarily. Coconut
authorities do not need to communicate with each other;
users wait for t-out-of-n replies (in any order of arrival) and
aggregate them into a consolidated credential; thus Coconut
implicitly assumes an asynchronous setting. However, our
current implementations rely on the distributed key generation
protocol of Kate et al. [33], which requires (i) weak synchrony
for liveness (but not for safety), and (ii) at most one third of
dishonest authorities.