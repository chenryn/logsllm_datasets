$git clone https://github.com/username/nameofProject.git
第二步，直接拷贝或者通过Git克隆一份项目代码：
cd~/Projects/Personal/nameOfProject
第一步，新建Angular项目文件夹，并通过CLI进入此目录：
使用DockerHub镜像
相关资源
gruntserve
bower install--allow-root&&\
npminstall&&
读者也可以通过修改Dockerfile来拓展和自定义镜像。笔者在此提供以下
--namenameOfProject
-p 9000:9000 -v~/Projects/Personal/
第13章编程语言171
---
## Page 186
然后使用此Dockerfile构建自定义镜像，最后直接运行此镜像，即可启动Go程序。
小到可以被忽略的编译时间。笔者在此简述一下Go语言的特性：
Go开发，要让开发人员感觉到Python的便利，C/C++的运行效率，以及
Go的基本设计理念是：编译效率、运行效率和开发效率要三者兼顾。使用
语法清晰明了，设计精良，拥有一些先进的特性，还有一个庞大的标准库。
13.8.1
13.8
172第二部分实战案例
将Go代码运行在Docker容器中的最简方法，就是将Go编译指令写入Dockerfile中，
Go语言（也称Golang）是一个由Google主导研发的编程语言。它的
使用官方镜像
口使用一套简单的规范，开发人员不必再单独编写脚本指定依赖关系和编译流程。仅仅
口
口平坦的类型系统，去除了复杂的继承关系。使用结构化类型系统（Structural type
口简洁的符号和语法，极力减少开发人员输入的字符数。
口垃圾回收，去除复杂的内存释放工作。
口编译，静态类型语言。由此可以提供满足对运行效率敏感的系统级
AngularDockerfile:https://registry.hub.docker.com/u/sesteva/grunt-angular/dockerfile/
Angular Docker 镜像：https://registry.hub.docker.com/u/sesteva/grunt-angular/
Angular 官网: http://angularjs.org/
启动脚本：https://www.npmjs.org/doc/misc/npm-scripts.html#default-values
package.json:https://www.npmjs.org/doc/files/package.json.html
Express 官网: http://expressjs.com/
支持。
下来各种依赖，直接编译/安装。无需make、autoconf、automake、setup.py 等工具
使用代码本身和go工具链，就可以处理各种依赖关系。写完代码，一条命令，自动
用异步通信，就足以达到线程池与select/poll/epoll的效果。极大简化了多连接的开发。
发打好基础。比线程更轻量的 goroutine，让一个线程可以执行多个并发结构。不必使
基于CSP模型的并行，简化了并发结构之间的通信和数据共享。为多核时代的程序开
system），既简化了事前设计工作，也为未来增加抽象层提供了非侵人式的解决方法。
Go
Go技术栈
---
## Page 187
架构的平台编译Go应用，如windows/386。可以在指令中加入cross标签：
然后Docker会执行go build，在工作目录中编译代码，输出可执行文件至myapp。
中运行它，可以执行：
get -d -v，以及go instal1 -v。
目所需的基本指令。在构建镜像的时候，Docker会执行coPY./usr/src/app，RUNgo
参见后面的“相关资源”部分。
Dockerfile的FROM指令中明确Go版本号。官方镜像都有明确的标签列表，具体地址可以
在Docker容器中交叉编译Go项目如果读者需要在常用的linuxlamd64架构之外的其他
此指令会将读者的Go项目文件夹作为Docker数据卷挂载至Docekr，并作为运行目录。
在使用此镜像，不带参数运行Go容器时，此会执行CMD["app"]指令。
$ for Goos in darwin linux;do
读者也可以使用以下命令将Go程序一次性编译至多个平台：
如果此项目有Makefile，
在Docker容器中编译Go项目如果读者需要在容器中编译Go代码，但是不需要在容器
第四步，创建并运行Go容器：
第三步，使用此Dockerfile构建镜像：
注意，我们使用的官方镜像带有onbuild标签，也就意味着它包含了启动大部分Go项
第二步，在Dockerfile中，加人读者需要执行的Go编译命令：
如果读者对Go的版本有要求，可以在以上命令中加人Tag标签，以便于在下一步的
$sudodocker run
golang:1.3.1gobuild-v
$sudodocker
$ sudo docker build-tmy-golang-app
FROMgolang:1.3.1-onbui1d
$ sudo docker pull golang
第一步，首先安装Go的DockerHub 官方镜像作为基础镜像：
具体步骤如下。
sudo
docker
run
run
dde/oxs/xsn/:(pmd)s----
-rm
，那么可以在容器中执行：
--rm-v"s(pwd)":/usr/src/myapp
第13章编程语言173
-W
/usr/src/myapp-e
-w/usr/src/myapp
-w/usr/src/myapp
---
## Page 188
于Tornado，路由设计来源于Sinatra。
Go应用程序的开源框架。Beego使用Go开发，思路来自
13.8.2
Go容器中的站点。
用一个内含SSH服务的镜像，以此为基础定制Go镜像。这样可以方便地使用 SSH服务访问
174第二部分实战案例
第三步，编译运行：
笔者在此简述一下 Beego 框架的特性：
Beego是一个使用Go的思维来帮助开发者构建并开发
$ go build -o hello hello.go
func main(){
import "github.com/astaxie/beego"
package main
第二步，创建文件hello.go：
第一步，下载安装：
1.准备工作
口高性能：Beego采用了Go原生的 http包来处理请求，goroutine的并发效率足以应付
口模块化：Beego内置了强大的模块，包括Session、
口智能化：支持智能路由、智能监控，可以监控QPS、内存消耗、CPU使用，以及
口简单化：RESTful支持、MVC模型，可以使用bee工具快速地开发应用，包括监控
如果读者需要方便地运行已有Go项目的代码，特别是Web项目，那么笔者推荐读者使
$go get github.com/astaxie/beego
./he1lo
goroutine的运行状况，让线上应用尽在掌握。
代码修改进行热编译、自动化测试代码以及自动化打包部署。口
V
大流量的Web应用和API应用，目前已经应用于大量高并发的产品中。
析、性能监控、上下文操作、ORM模块、请求模拟等强大的模块，足以支撑你任
done
beego.Run()
Beego
done
for GOARCH in 386 amd64;do
缓存操作、
BEEGO
、日志记录、配置解
二
---
## Page 189
可以方便的构建各种基于Go语言的Web服务。
是一个轻量级的高效Web开发框架。Revel+Xorm（ORM）的技术栈
Play！中吸收了许多成熟的设计思想。Revel支持MVC设计模式，它
13.8.3
当然，读者也可以参考以下Dockerfile构建自定义镜像：
构建了。
口高性能：Revel基于Go HTTP server 构建。这是techempower发布的最新评测结果。
口热编译：编辑、保存和刷新时，Revel自动编译代码和模板
笔者在此简述一下Revel框架的特性：
Revel是一个高生产力的Go语言Web框架。Revel从Rails和
如果需要定制 Beego 镜像，则如前文所述，建议读者基于内含 SSH的镜像进行定制。
3.定制镜像
$ sudo docker pull cloudcube/beego
2.使用DockerHub镜像
读者可以查阅开发文档以进行深人学习。
口
RUN go get github.com/cloudcube/bee
#install bee
RUN go get github.com/astaxie/beego
#install beego
FROM cloudcube/golang
读者可以使用DockerHub提供的第三方Beego镜像，下载后直接运行即可：
第四步，
RUNapt-getupdate
#system update
在各种不同的场景下进行了多达三到十次的请求负载测试。
模板、缓存、计划任务、测试、国际化等功能。
全栈功能：Revel支持路由、参数解析、验证、
错误。
如果代码编译错误，会给出一个错误提示，同时捕捉运行期
Revel
，打开浏览器并访问 http://localhost:8080。恭喜！第一个Beego项目已经成功的
session/flash
第13章编程语言175
C
---
## Page 190
176第二部分实战案例
第四步，
myapp
生成的目录结构如下：
$revelnew myapp
第三步，
$goget
第二步，
$goget
第一步，
1.准备工作
tests
public
messages
conf
app
：打开浏览器访问http://localhost:9000，
，创建Revel应用：
安装Revel命令行工具：
安装Revel框架：
github.com/revel/cmd/revel
github.com/revel/revel
routes
app.conf
views
tmp
routes
models
init.go
controllers
It works!
→C
D
项目根目录
静态文件目录
MVC框架目录
国
路由文件
配置文件
视图目录
模型目录
控制器目录
际化目录
图13-3Revel界面
如图13-3所示。
---
## Page 191
假设它的名字叫做 server.go：
forGo），它是专门为使用Go语言编写模块化Web应用而生的。
13.8.4
自定义镜像：
SSH服务的镜像，以此为基础定制Revel镜像。当然，读者也可以参考以下Dockerfile构建
镜像供读者参考：
Martini是一个优雅的Go语言Web框架（Classywebframework
读者可以使用DockerHub中提供的第三方Revel镜像，下载并直接运行。笔者列出以下
import"github.com/go-martini/martini"
package main
在读者安装了GO语言并设置了自己的GOPATH之后，创建自己的·go文件，这里我们
1.准备工作
口更多中间件和功能组件，可参考代码仓库：http://github.com/martini-contrib。
口完全兼容http.HandlerFunc接口。
口框架内已拥有很好的开箱即用的功能支持。
口模块化的设计—容易插入功能件，
口超赞的路径匹配和路由。
口很好地与其他的Go语言包协同使用。
口无侵人式的设计。
口使用极其简单。
笔者在此简述以下Martini框架的特性：
RUN go get github.com/revel/cmd/revel
#获取Revel
FROM google/golang
#安装基础镜像
如果读者需要运行已有的Revel站点，或者需要自定义启动流程，则笔者推荐使用内含
$sudo docker pull taddev/revel-base
func main()(
口已有很多的中间件可以直接使用。
2.使用DockerHub镜像
m:= martini.classic（)
Martini
，也容易将其拔出来。
8
第13章编程语言177
M
---
## Page 192
的站点。当然，读者也可以参考以下Dockerile构建自定义镜像：
SSH服务的镜像，以此为基础进行定制，这样可以方便地使用SSH服务访问Martini容器中
者给出以下命令供读者参考：
178第二部分实战案例
RUN apt-get clean&&rm-rf/var/lib/apt/lists/*/tmp/*/var/tmp/*
#Dockerfile for Martini/GOLANG 1.2
如果读者需要加载已有的Martini站点，或者需要定制启动流程，
3.定制镜像
$ sudo docker pull lgsd/docker-martini
读者可以直接使用Docker Hub中提供的第三方Martini镜像，
#安装完成后使用apt进行清理
RUN wget https://go.googlecode.com/files/go1.2.1inux-amd64.tar.gz &&\
FROM lgsd/saucy
2.使用DockerHub镜像
此时已经启动了一个Martini的Web服务，地址是：localhost:3000。
$go run server.go
最后，运行server.go:
然后，安装Martini的包（注意Martini需要Go语言1.1或者以上的版本支持）：
#into/usr/local,creating a Go tree in/usr/local/go
RUN seds/mains/mainuniverse/-i/etc/apt/sources.list&&
#更新系统
#下载基础镜像
下载Go语言源码安装包
m.Run()
H）
m.Get（"/",func()string{
rm gol.2.1inux-amd64.tar.gz
tar-C/usr/local-xzfgo1.2.1inux-amd64.tar.gz&&\
apt-get
apt-get-qqupdate
&&
下载镜像并直接运行。笔
8
，则笔者推荐使用内含
---
## Page 193
13.8.5
Martini 官网: http://martini.codegangsta.io/
RevelDockerfile:https://registry.hub.docker.com/u/taddev/revel-base/dockerfile/
Revel中国官网：http://gorevel.cn/
Revel 官网：http://www.gorevel.cn/
Boogo Dockerfile:https://registry.hub.docker.com/u/cloudcube/beego/dockerfile/
Beego Docker Hub 镜像：https://registry.hub.docker.com/u/cloudcube/beego/
Beego 官网：http://beego.me/
Docker Hub中 Google提供的Go镜像：‘
GoDocker官方镜像标签：https://registry.hub.docker.com/_/golang/tags/manage/
Go Docker官方镜像：https://registry.hub.docker.com/_/golang/
Go语言官网：https://golang.org/
CMD ["go"，"run"，"server.go"]
#设置默认启动命令
EXPOSE 3000
loca1host:3000
#使用3000端口运行Martini
RUN
#根据官方启动流程，创建server.go文件，并验证安装结果
RUN go get github.com/codegangsta/martini
#安装Martini安装包
ENVPATH
ENV GOPATH/go
#设置环境变量
https://registry.hub.docker.com/u/google/golang/
https://registry.hub.docker.com/u/google/golang-runtime/
https://registry.hub.docker.com/u/google/golang-hello/
相关资源
echo
echo
echo
echo
echo
echo
echo
echo
package main'>SFILE &&\
funcmain(）(>>$FILE&&
$PATH:/usr/local/go/bin:SGOPATH/bin
m.Run()>>SFILE&&\
})>>SFILE&&\
m:=martini.Classic(）>>$FILE &&\
第13章编程语言179
---
## Page 194
内容会在DockerPool社区持续更新，敬请关注。
往DockerPool社区（http://dockerpool.com）。由于编程语言的更新选代比较频繁，所以本章
当的配置也可以构建自定义镜像并正常使用容器。如果读者对本章内容有任何疑问，可以前
访问自定义容器中的站点或程序。当然，读者也可以直接使用官网的编程语言镜像，通过适
务的镜像，定制Dockerfile，随后构建并运行镜像即可。这样读者可以方便地使用SSH服务
他编程语言的自定义Docker环境与PHP环境下的操作流程大同小异：均是基于内含SSH服
Docker环境。由于时间仓促且水平有限，所以笔者重点阐述了PHP语言的Docker环境。其
13.9本章小结