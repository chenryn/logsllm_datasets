多区域操作
  不可变的基础架构简化了多区域运营。可以将单个映像部署到所有区域，而不必将不同的配置管理堆栈传播到所有区域并使其保持同步。将配置管理部署到多个区域可能很难自行管理。每个配置管理主节点必须与其他区域中的主节点保持同步，这是一个额外的复杂性级别。如果部署无主配置管理工具，则仍然如此，因为仍需要复制并保留某些管理工件（如 .tar 文件）。使用不可变基础架构时，只需向部署管道添加一个步骤，即在基于该映像启动服务器之前，先将新映像复制到每个区域。使用蓝/绿部署，可以在将更新部署到其他区域之前先在一个区域中验证部署成功。如果你的体系结构要求在所有区域中随时运行相同的版本，也可以通过在各区同步进行蓝色/绿色翻转来实现这一点。
发布的工程学
   配置管理工具对开发人员和组织来说是可怕的，因为它们过于强大。一个配置错误，就可以毁掉整个基础架构。因此，许多公司不信任他们的开发人员在未经运营团队审核的情况下推出对其配置管理的更改。每个配置管理软件也都会使用自己的特定方言来书写；开发人员不一定熟悉其主要语言。 要求他们这些开发人员学习和使用这些方言是一个额外的负担，他们永远不会感到自在，因为他们不经常使用它。
使用不可变的基础架构，可以消除这些顾虑。永远不必更改任何正在运行的实例的状态。这大大降低了坏更改对基础架构的风险，特别是因为所有更改将仅影响一种类型的实例，对于蓝/绿部署，在出现问题时回滚更改是微不足道的。通过这些更改，可以使开发人员能够将代码和配置更改部署到生产中，从而确信可以轻微地修复由不可预见的 Bug 造成的任何损坏。
构建基本映像
  实现不可变的基础架构的第一步是创建一个良好的基础映像。然后，此映像将用于基础架构中的每个运行实例。 如果经营的是一个小的网站，可以使用上游 Linux 发行版中的默认发布映像，然后安装最新的安全更新。那将是最简单的选择。
如果团队有更多的资源，则可以通过执行以下操作来优化基本映像：
删除在生产环境中不需要的包
通过更改安全设置来强化系统映像
调整网络堆栈
安装在整个基础架构中使用的通用库和内部包
更进一步，基本映像可以完全从签名的源代码构建，使用不可变的专用生成和发布管道。以这种方式构建产生的映像可以信任和验证。不过，这超出了大多数组织的要求。
获得满意的映像后，可以使用该映像生成要发布到生产环境的所有其他映像。重建此映像的节奏由你决定，但我建议每周执行此操作，并引入异常过程：就是在发现影响系统的安全漏洞后立即生成和部署此映像。要发布新映像，应该在组织中找到一些不太关键且具有更有能力的运维团队来试发布每个版本的应用程序，然后再将其推广到任务关键型应用程序。这就是所谓的金丝雀试错，也就是先部署新代码到系统的一小部分，并检查是否存在自动测试未捕获的问题。这样，随时都有金丝雀版本和产品版本可供对比。
您可以使用配置管理工具甚至仅使用 shell 脚本来配置基本映像。这与在生产中运行配置管理工具完全不同，因为它仅将其用作部署管道的一部分，而不是在正在运行的基础结构上使用。更准确的说，应该只需要运行该工具一次，使上游映像符合所需的配置，然后再冻结映像。负责构建和维护基本映像的团队应获取输入，并与将生成在基本映像上运行的应用程序的开发人员协作。公司的开发人员将永远不会关心，甚至不必了解用于构建基本映像的配置管理工具。
部署应用程序部署应用程序
  当每个开发人员都准备好部署时，每个应用程序都应该通过自动多步骤部署过程。首先，应该使用适用于您的操作系统（OS）的打包系统或特定于语言的打包系统来编译和打包代码。完成后，可以在基本映像上安装程序包及其依赖项。 HashiCorp 有一个名为 Packer 的开源工具。Netflix 也发布了一个名为 Aminator 的开源工具。如果正在运行容器基础架构，则可以使用许多工具来构建 Docker 镜像。 Docker 镜像仍然需要在基本操作系统上运行。应该从不可变的系统映像启动此基本操作系统。应该在运行时使用容器编排工具管理的版本来提取 Docker 镜像。以这种方式部署时，将拥有在不可变系统映像上运行的不可变 Docker 镜像。映像或 Docker 容器准备就绪后，需要在部署之前对其进行测试。最初，需要在开发或集成环境中启动它。通过测试后，在启动采用生产流量的金丝雀实例之前，还需要在测试或登台环境中运行。最后，可以使用新映像启动新的自动缩放组或 Docker 群集，或者将金丝雀群集扩展到下一个蓝/绿部署的目标。
其理念是让 SRE 团队使任何开发人员能够安全、快速地部署新版本的服务。
缺点
 到目前为止，本章已经介绍了部署不可变的基础架构带来的好处及其方法，但有些情况下它并不适合。在持久数据层上使用不可变的基础架构可能很难（没准就不可能）。像 Cassandra 这样的一些数据库被设计为在不可变的环境中工作。  它要求使用最新版本，其中必须一次替换一个节点而无法实现蓝/绿色版本更新。其他数据库很难以不可变的方式使用而无需进行重大修改。根据应用程序的不同，可能更容易在数据层之外的节点上运行不可变的基础架构，数据层仍然保持更传统的配置管理基础结构。不可变的基础架构还可以增加迭代延迟。构建新映像（即使只是 Docker 映像）比将一些代码文件复制到开发实例要费时得多。此迭代延迟可能会降低开发人员的工作效率，主要是在代码库只能在服务器上运行且无法在开发人员工作站上本地开发时。缓解这种情况的一种方法是在将代码打包并运送到测试或登台环境之前，督促开发人员将代码从开发环境同步到临时开发服务器。这种方法平衡了开发人员工作效率的需要和不变的基础架构的优势。  
结论
采用不可变的基础架构，可以减少辛劳，让开发人员专注于产品功能。SRE 团队可以提高开发人员的工作效率，缩短部署新代码的时间，从而使开发人员更快乐、更高效，并同时获得更安全、更可靠的基础架构。
编者介绍
Jonah Horowitz 是一名高级 SRE 工程师，拥有 18 年的构建和扩展生产应用经验。他曾在多家初创公司和大公司工作，包括 Quantcast、Netflix 和 Stripe。