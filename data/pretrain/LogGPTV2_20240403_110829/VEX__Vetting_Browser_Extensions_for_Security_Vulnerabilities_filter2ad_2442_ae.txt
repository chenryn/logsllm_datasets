that are used to render non-HTML content, such as Flash
videos. The ﬁrst work to examine security issues for
browser plugins was Janus [14], which discusses sand-
boxing techniques for browser-helper applications, such
as PDF viewers. More recently, the OP [15] and Gazelle
[16] web browsers tackle this same issue by applying
many of the principles from the original Janus work to
modern browser plugins.
The general idea of secure extensibility has been stud-
ied by the systems community with projects that focus
on providing secure extensions for operating systems
via type safe programming languages [5, 31, 36], proof-
carrying code [29], new OS abstractions [10], and soft-
ware fault isolation [11]. To date, none of these tech-
niques have been adapted to address the special security
needs of web browser extensibility mechanisms.
Static information ﬂow analysis has been used in a
number of previous projects. The work proposed in [2]
tracks whether various variables in the program are in-
dependent from each other both through explicit and im-
plicit ﬂows. Researchers have employed static analysis
for web applications with the goal of identifying and
preventing cross-site scripting attacks [26]. For exam-
ple, Pixy [21] is a taint based static analyzer for PHP
that detects ﬂows; WebSSARI [19] offers similar facili-
ties. Vogt et al. [32] propose combining static and dy-
namic techniques to prevent cross-site scripting. Xie
and Aiken propose a static analysis of PHP for SQL in-
jection vulnerabilities [34]. Livshits and Lam develop
ﬂow-insensitive static analysis tools for security proper-
ties [24].
More
researchers have developed a
ﬂow-insensitive static information ﬂow methods for
JavaScript [7, 17].
In contrast, VEX’s analysis is
ﬂow-sensitive and context-sensitive.
In [7] the authors
essentially perform a ﬂow-insensitive static analysis
on the code, and delegate analysis of dynamic code to
runtime checks. Furthermore, their analysis is context-
recently,
Classiﬁcation
Source is trusted
website
Extension
TWITZER - TWITTER MORE! v.1.3
ANSWERS v-2.3.50
MYSPACE FRIEND RENAMER v-.86
Flow pattern/Unsafe practice
Content Doc to innerHTML
Content Doc to innerHTML
Content Doc to innerHTML
Sanitized Input
GIRL IN WONDERLAND v-0.808
Content Doc to innerHTML
AUTOSLIDESHOW v-0.3.4
Content Doc to innerHTML
Non-chrome
sinks
Non-existent
ﬂows
UNHIDE FIELDS v-0.2e
Content Doc to innerHTML
WEB DEVELOPER v-1.1.6
Content Doc to innerHTML
POWER TWITTER v-1.37
Content Doc to eval
INTERCLUE v-1.5.7
Content Doc to eval
Figure 10: Example extensions.
Explanation
Works only when on Twitter
Works only on answers.com
Fetches friend names from prefs.js, where
they are stored during instantiation
Assigns a Flash URL to innerHTML of an el-
ement on the page, and sanitizes the URL be-
fore assignment; is the sanitization complete?
Has a ﬂow from the image name urls to
innerHTML. The extension did not sanitize
the inputs in any way. However, the Firefox
DOM API methods encoded the urls when
they were being handled by the extension.
Creates a frame on top of the current content
document and displays the hidden ﬁelds in a
page in that frame
Generates a non-chrome document in a new
tab or window and appends the stylesheet in-
formation of a page as a node in this page
Has document, content and window depen-
dencies, but they are chrome elements, not
content
Caused by the ASSIGN1 rule
insensitive, which could generate a lot of false-positives
if used for analyzing browser extensions. VEX does
not delegate any work to runtime checks. Guarnieri
et.
al. [17] popose a mostly-static enforcement for
JavaScript analysis. Their threat model is that of a
malicious JavaScipt widget that could run in the same
page as a hosting site and which may contain code
obfuscation. Their policies are based on searching for
forbidden objects or methods in the code which requires
an accurate pointer analysis which they deﬁne.
Several dynamic analysis techniques with static instru-
mentation have been proposed for JavaScript to check
information-ﬂow properties [35, 22]. SABRE [9] is a
framework for dynamically tracking in-browser informa-
tion ﬂows for analyzing JavaScript-based browser exten-
sions. We believe that dynamic techniques are not the
best choice for vetting web extensions, as we think it is
best to analyze extensions statically before they are un-
leashed on ordinary users. However, dynamic techniques
that prevent certain script injection attacks can be useful
when enforced by the web browser. The drawback is
that the web browser must choose an appropriate action
to take when it detects a questionable ﬂow. Querying
the user may not be wise, and default options may be-
come too restrictive. Additionally, SABRE imposes a
performance and memory overhead to the browser be-
cause of the need to keep track of the security label for
every JavaScript object inside the browser.
Recently, Freeman and Liverani from Security Assess-
ment have written a white paper [12] detailing the pos-
sible attacks on Firefox extensions. We are currently in
the process of extending VEX to incorporate some of the
source/sink pairs shown in that paper.
7 Conclusions
Our main thesis is that most vulnerabilities in web ex-
tensions can be characterized as explicit ﬂows, which
in turn can be statically analyzed. VEX is a proof-
of-concept tool for detecting potential security vulner-
abilities in browser extensions using static analysis for
explicit ﬂows. VEX helps automate the difﬁcult man-
ual process of analyzing browser extensions by identify-
ing and reasoning about subtle and potentially malicious
ﬂows. Experiments on thousands of extensions indicate
that VEX is successful at identifying ﬂows that indicate
potential vulnerabilities. Using VEX, we identify three
previously unknown security vulnerabilities and three
previously known vulnerabilities, together with a variety
of instances of unsafe programming practices.
The most important future direction we envision is to
extend the VEX analysis in three ways. First, the static
analysis can beneﬁt from a points-to analysis that is more
precise on certain aspects of JavaScript such as higher-
order functions, prototypes, and scoping. The second
important extension is to deﬁne a more complete set of
ﬂow-patterns (sources and sinks) that capture vulnera-
bilities.
In preliminary work, we have found 16 more
known vulnerabilities, of which 14 can be characterized
using information ﬂow-patterns.
Identifying statically
these source-sink pairs and adding them to VEX would
yield a more comprehensive tool. In the direction of re-
ducing false positives, automatically building attack vec-
tors for statically discovered ﬂows can help synthesize
14
attacks; a key challenge in achieving this would be in
handling sanitization routines effectively [3, 30].
8 Acknowledgments
We thank Chris Grier and Mike Perry who directed us
to the Firefox extension vulnerabilities. We thank Wy-
att Pittman and Nandit Tiku for gathering and analyzing
the known Firefox extension vulnerabilities. We thank
all the reviewers of this paper for their helpful com-
ments and suggestions. This research was funded in
part by NSF CAREER award #0747041, NSF grant CNS
#0917229, NSF grant CNS #0831212, grant N0014-09-
1-0743 from the Ofﬁce of Naval Research, and AFOSR
MURI grant FA9550-09-01-0539.
References
[1] ANTLR Parser Generator.
org.
http://www.antlr.
[2] T. Amtoft and A. Banerjee. Information ﬂow anal-
ysis in logical form.
In R. Giacobazzi, editor,
SAS 2004, volume 3148 of LNCS, pages 100–115.
Springer-Verlag, 2004.
[3] D. Balzarotti, M. Cova, V. Felmetsger, N. Jo-
vanovic, E. Kirda, C. Kruegel, and G. Vigna. Saner:
Composing static and dynamic analysis to validate
In IEEE Sym-
sanitization in web applications.
posium on Security and Privacy, pages 387–401,
2008.
[4] A. Barth, A. P. Felt, P. Saxena, and A. Boodman.
Protecting browsers from extension vulnerabilities.
In Proceedings of the 17th Network and Distributed
System Security Symposium (NDSS), San Diego,
CA, February 2010.
[5] B. N. Bershad, S. Savage, P. Pardyak, E. G. Sirer,
M. E. Fiuczynski, D. Becker, C. Chambers, and
S. Eggers. Extensibility, Safety and Performance
in the SPIN Operating System. In Proceedings of
the 1995 Symposium on Operating Systems Princi-
ples, pages 267–283, December 1995.
[6] A. Boodman.
The Greasemonkey Firefox ex-
https://addons.mozilla.org/en-US/
tension.
firefox/addon/748.
[7] R. Chugh, J. A. Meister, R. Jhala, and S. Lerner.
Staged information ﬂow for JavaScript. In M. Hind
and A. Diwan, editors, PLDI, pages 50–62. ACM,
2009.
15
[8] CrYpTiC MauleR. Fizzle RSS Feed HTML Injec-
http://www.securityfocus.
tion Vulnerability.
com/bin/23144.
[9] M. Dhawan and V. Ganapathy. Analyzing informa-
tion ﬂow in JavaScript-based browser extensions.
In ACSAC’09: Proceedings of the 25th Annual
Computer Security Applications Conference, pages
382–391, December 2009.
[10] D. R. Engler, M. F. Kaashoek, and J. O’Toole, Jr.
Exokernel: an operating system architecture for
In SOSP
application-level resource management.
’95: Proceedings of the ﬁfteenth ACM symposium
on Operating systems principles, pages 251–266,
New York, NY, USA, 1995. ACM.
´U. Erlingsson, M. Abadi, M. Vrable, M. Budiu, and
G. C. Necula. XFI: Software guards for system ad-
dress spaces. In OSDI, pages 75–88. USENIX As-
sociation, 2006.
[11]
[12] N. Freeman and R. S. Liverani. Cross context
scripting with Firefox, April 2010. http://www.
security-assessment.com/files/whitepapers/
Cross_Context_Scripting_with_Firefox.pdf.
[13] N. Freeman and R. S. Liverani.
Exploiting
cross context scripting vulnerabilities in Firefox,
April 2010. http://www.security-assessment.
com/files/whitepapers/Exploiting_Cross_
Context_Scripting_vulnerabilities_in_
Firefox.pdf.
[14] I. Goldberg, D. Wagner, R. Thomas, and E. A.
Brewer. A Secure Environment for Untrusted
In Proceedings of the 1996
Helper Applications.
USENIX Security Symposium, pages 1–13, July
1996.
[15] C. Grier, S. Tang, and S. T. King. Secure web
In Proceed-
browsing with the OP web browser.
ings of the 2008 IEEE Symposium on Security and
Privacy, 2008.
[16] C. Grier, H. J. Wang, A. Moshchuk, S. T. King,
P. Choudhury, and H. Venter. The multi-principal
OS construction of the Gazelle web browser.
In
Proceedings of the 2009 Usenix Security Sympo-
sium, 2009.
[17] S. Guarnieri and B. Livshits. Gatekeeper: Mostly
static enforcement of security and reliability poli-
cies for JavaScript code. In Proceedings of USENIX
Security ’09, pages 151–168, 2009.
[18] A. Guha, C. Saftoiu, and S. Krishnamurthi. The
essence of JavaScript. In ECOOP, Lecture Notes
in Computer Science. Springer, 2010.
[19] Y.-W. Huang, F. Yu, C. Hang, C.-H. Tsai, D.-T. Lee,
and S.-Y. Kuo. Securing web application code by
In WWW,
static analysis and runtime protection.
pages 40–52, New York, NY, USA, 2004. ACM.
[30] P. Saxena, D. Akhawe, S. Hanna, S. McCamant,
F. Mao, and D. Song. A symbolic execution frame-
work for JavaScript. In IEEE Symposium on Secu-
rity and Privacy, 2010.
[31] M. I. Seltzer, Y. Endo, C. Small, and K. A. Smith.
Dealing with disaster: Surviving misbehaved ker-
nel extensions. In OSDI, pages 213–227, 1996.
[32] P. Vogt, F. Nentwich, N. Jovanovic, E. Kirda,
C. Kr¨ugel, and G. Vigna. Cross site scripting pre-
vention with dynamic data tainting and static anal-
ysis. In NDSS. The Internet Society, 2007.
[33] C. Waterson.
RDF in ﬁfty words or
less.
https://developer.mozilla.org/en/RDF_in_
Fifty_Words_or_Less.
[34] Y. Xie and A. Aiken. Static detection of security
vulnerabilities in scripting languages. In USENIX-
SS’06: Proceedings of the 15th conference on
USENIX Security Symposium, Berkeley, CA, USA,
2006. USENIX Association.
[35] D. Yu, A. Chander, N. Islam, and I. Serikov.
Javascript instrumentation for browser security. In
M. Hofmann and M. Felleisen, editors, POPL,
pages 237–249. ACM, 2007.
[36] F. Zhou, J. Condit, Z. R. Anderson, I. Bagrak,
R. Ennals, M. Harren, G. C. Necula, and E. A.
Brewer. SafeDrive: Safe and recoverable exten-
sions using language-based techniques. In 7th Sym-
posium on Operating Systems Design and Imple-
mentation (OSDI ’06), November 6-8, Seattle, WA,
USA, pages 45–60. USENIX Association, 2006.
[20] IAOSS. NoScript Firefox extension.
noscript.net/.
http://
[21] N. Jovanovic, C. Kruegel, and E. Kirda. Pixy: A
static analysis tool for detecting web application
vulnerabilities (short paper). In Proceesings of the
2006 IEEE Symposium on Security and Privacy,
pages 258–263, 2006.
[22] H. Kikuchi, D. Yu, A. Chander, H. Inamura, and
I. Serikov. JavaScript instrumentation in practice.
In APLAS ’08, pages 326–341, Berlin, Heidelberg,
2008. Springer-Verlag.
[23] R. S. Liverani and N. Freeman. Abusing Firefox
extensions, Defcon 17, July 2009.
[24] V. B. Livshits and M. S. Lam. Finding security vul-
nerabilities in Java applications with static analysis.
In SSYM’05: Proceedings of the 14th conference on
USENIX Security Symposium, pages 18–18, Berke-
ley, CA, USA, 2005. USENIX Association.
[25] M. T. Louw, J. S. Lim, and V. N. Venkatakrish-
nan. Extensible web browser security.
In B. M.
H¨ammerli and R. Sommer, editors, DIMVA, vol-
ume 4579 of Lecture Notes in Computer Science,
pages 1–19. Springer, 2007.
[26] G. A. D. Lucca, A. R. Fasolino, M. Mastoianni, and
P. Tramontana. Identifying cross site scripting vul-
nerabilities in web applications. In WSE ’04, pages
71–80, Washington, DC, USA, 2004. IEEE Com-
puter Society.
[27] S. Maffeis, J. C. Mitchell, and A. Taly. An opera-
tional semantics for JavaScript. In G. Ramalingam,
editor, APLAS, volume 5356 of Lecture Notes in
Computer Science, pages 307–325. Springer, 2008.
[28] S. Maffeis and A. Taly. Language-based isolation
of untrusted Javascript. In Proc. of CSF’09, IEEE,
2009. See also: Dep. of Computing, Imperial Col-
lege London, Technical Report DTR09-3, 2009.
[29] G. C. Necula. Proof-carrying code.
In POPL
’97: Proceedings of the 24th ACM SIGPLAN-
SIGACT symposium on Principles of programming
languages, pages 106–119, New York, NY, USA,
1997. ACM.
16