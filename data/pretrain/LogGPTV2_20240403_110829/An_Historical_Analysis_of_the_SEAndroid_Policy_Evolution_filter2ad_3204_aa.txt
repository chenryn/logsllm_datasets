title:An Historical Analysis of the SEAndroid Policy Evolution
author:Bumjin Im and
Ang Chen and
Dan S. Wallach
An Historical Analysis of the SEAndroid Policy Evolution
Bumjin Im
Rice University
Houston, Texas
PI:EMAIL
Ang Chen
Rice University
Houston, Texas
PI:EMAIL
Dan S. Wallach
Rice University
Houston, Texas
PI:EMAIL
ABSTRACT
Android adopted SELinux’s mandatory access control (MAC) mech-
anisms in 2013. Since then, billions of Android devices have bene-
fited from mandatory access control security policies. These policies
are expressed in a variety of rules, maintained by Google and ex-
tended by Android OEMs. Over the years, the rules have grown to
be quite complex, making it challenging to properly understand or
configure these policies.
In this paper, we perform a measurement study on the SEAn-
droid repository to understand the evolution of these policies. We
propose a new metric to measure the complexity of the policy by ex-
panding policy rules, with their abstraction features such as macros
and groups, into primitive “boxes”, which we then use to show
that the complexity of the SEAndroid policies has been growing
exponentially over time. By analyzing the Git commits, snapshot by
snapshot, we are also able to analyze the “age” of policy rules, the
trend of changes, and the contributor composition. We also look
at hallmark events in Android’s history, such as the “Stagefright”
vulnerability in Android’s media facilities, pointing out how these
events led to changes in the MAC policies. The growing complexity
of Android’s mandatory policies suggests that we will eventually
hit the limits of our ability to understand these policies, requiring
new tools and techniques.
CCS CONCEPTS
• Security and privacy → Mobile platform security; • Soft-
ware and its engineering → Software configuration manage-
ment and version control systems;
KEYWORDS
Android, security, SELinux, SEAndroid, access control, Git
ACM Reference Format:
Bumjin Im, Ang Chen, and Dan S. Wallach. 2018. An Historical Analysis
of the SEAndroid Policy Evolution. In 2018 Annual Computer Security Ap-
plications Conference (ACSAC ’18), December 3–7, 2018, San Juan, PR, USA,
Jennifer B. Sartor, Theo D’Hondt, and Wolfgang De Meuter (Eds.). ACM,
New York, NY, USA, 12 pages. https://doi.org/10.1145/3274694.3274709
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
© 2018 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-6569-7/18/12...$15.00
https://doi.org/10.1145/3274694.3274709
629
1 INTRODUCTION
Smartphones are a primary target of malicious attacks [21]. The
Android system—as it holds the largest share of the mobile OS
market—has unfortunately become a prominent attack target as
well [19]. Over the years, many attacks have been reported, such
as Stagefright [52], Blueborne [3], and Toaster [34], each of which
has led to significant security concern. In order to harden Android
against such threats, researchers and developers have adapted a
wide variety of security mechanisms to the Android environment,
including process separation, finer grained access control, and se-
cure booting / remote attestation. This study focuses on one such
mechanism: SEAndroid [43].
As an extension of SELinux [29], SEAndroid was originally in-
troduced by the NSA in 2013. It performs mandatory access control
(MAC) to enforce security policies, regulating whether a particular
subject (e.g., a process) can perform a certain action (e.g., read/write)
on an object (e.g., a file/socket). It achieves this by referring to a
pre-installed security policy with a set of access control rules, which
are compiled into a database and loaded by the kernel at boot time.
As with SELinux, configuring a SEAndroid policy is not an easy
task [16, 41]. It is often far from obvious to reason about whether a
particular set of rules achieve a desired policy, or even to understand
what policy certain rules try to implement. There are several reasons
for this. First, the policy language allows many abstraction features,
such as groups, attributions, and (nested) macros, which make
it challenging to infer the scope of individual rules. Second, the
policy rules have little accompanying documentation. Moreover,
they evolve significantly every year.
Fortunately, Google’s default SEAndroid policy is maintained
in a Git repository [1] as part of the Android Open Source Project
(AOSP) [12]. The Git history provides us with a detailed chronicle
of all changes to the policy rules, as well as the commit messages
associated with each change, totaling more than 13,000 commits
over SEAndroid’s history. These commits serve as a rich source of
information for us to perform an historical analysis of the policy’s
evolution, snapshot by snapshot.
Performing this analysis involves at least two challenges. First,
we need a good metric to quantify the complexity of a particular
policy snapshot. Simply counting the number of rules in a snapshot
is not enough, because the SEAndroid policy language supports a
variety of abstractions and grouping concepts, making a rule count
less useful. We address this challenge by designing a new metric,
boxes. This metric views all possible access control policy rules
as forming a four-dimension space, with the axes being subject,
object, class, and permission. Each point in this space is called a box,
representing a smallest “unit” in the rule space. By analyzing how
many rules touch the same box, and how many boxes are impacted
by any given rule, we can then quantify the policy’s complexity.
Consider that complex rules may touch many boxes and many of
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
B. Im et al.
those boxes may be impacted simultaneously by multiple rules.
This means that a change to any one rule may or may not result
in a change to the resulting security policy! If an engineer truly
desires to change a given box, it becomes necessary to go hunting
for every possible rule that might overlap with it.
Our second challenge is that there are thousands of Git commits
that impact the SEAndroid policies. We use a combination of ap-
proaches to address this. We have designed and implemented an
automated system that collects and analyzes each Git commit, iden-
tifying “jump points” in complexity both in terms of the number
of rules and the number of boxes. For significant jump points, we
also manually inspect the commit messages associated with these
commits, and perform a differential analysis on the rules before and
after each such commit to understand the rationale of the changes.
Furthermore, we use the timestamp information to “match” the
commits with historical events of Android security, and analyze
how these events are reflected in the policy’s evolution.
Using the above metrics and methodology, we have performed
an historical analysis on the SEAndroid policy’s evolution. We focus
on the development of security metrics that we can derive from
these policies, such as the number of boxes and rules, the evolving
list of types and macros, the different authors contributing to the
policy over time, how SEAndroid policy stabilized over time, as
well as the hallmark events in Android history. Based on these
measurement results, we also provide insights into how SEAndroid
might evolve to become simpler and more useful.
The structure of the paper is as follows. After describing more
background material in Section 2, we introduce our measurement
methodology in Section 3, present measurement results in Sections 4
and 5. Then, we discuss several related topics in Section 6, present
related work in Section 7, and conclude in Section 8.
2 BACKGROUND
In this section, we present more background material on Android
security architecture and, in particular, SEAndroid.
2.1 Android security architecture
Figure 1 shows the multiple layers of security mechanisms Android
uses to protect system resources and user data [7].
Install-time permissions. Every Android application includes
a “manifest” file specifying the app’s desired permissions. Prior
to Android 6.0, the user was queried at install-time whether the
desired permissions were acceptable (i.e., all-or-nothing). After this,
the new app is assigned a distinct Unix “user” ID, allowing tradi-
tional Unix-style file permissions to separate the storage for each
app. However, Android includes a variety of system services, speak-
ing over Binder (an interprocess communication channel mediated
by the OS kernel). Each Binder service is responsible for determin-
ing if its caller is permitted to use it, querying a central database
constructed from those install-time permissions. This resulted in
permission checks occurring all over the Android software base,
in both Java and native code. This, in turn, made it a challenging
research project just to produce a mapping from every Android API
call to its corresponding set of required permissions [8].
Time-of-use permissions. As of Android 6.0, Android apps
still declare their permission requirements in the manifest, but
Figure 1: The Android security architecture.
Figure 2: Control flow with the Android location API. Seven
permission checks are highlighted with yellow circles.
those permissions are not granted until the app explicitly requests
them from the user, preferably at time-of-use. Users are free to
deny permissions and even to revoke permissions later on from the
system settings. The underlying enforcement of these permissions
is largely the same as before, with individual Android services
querying whether their caller has a necessary permission.
Classic Unix discretionary (DAC) permissions. Of course,
Android is also just another flavor of Unix. If an application directly
accesses a Unix resource such as a file or device, traditional Unix
user and group IDs manage the security. A Unix group ID is preas-
signed to each permission, and the Android application launcher
assigns all the necessary group IDs to the application process when
it is launched. Since a Linux process can possesses multiple group
IDs, the access will be granted or denied appropriately.
SEAndroid mandatory (MAC) permissions. After the user
ID and group ID checks are performed, SEAndroid [43], which is
an extension of SELinux [29] for Android, can additionally check
all system calls against its own policy. This policy is loaded at boot
time and enforced inside the OS kernel. SEAndroid policies, by
their static nature, cannot be changed at runtime to reflect new
applications and user-expressed permissions. They can, however,
be used to isolate system services, file directories, and even Binder
resources.
2.2 Example: Location services
To show how these different security systems interact, Figure 2
diagrams the control flow involved when an app makes a call to
KernelSELinux/ SEAndroidDACNative servicesPermission checkHALNative librariesAndroid Runtime (ART) / DalvikJava ServicesPermission checkJava Runtime APIsAppAppAppAppAppuid: auid: buid: cuid: duid: eInstallerApp pkgInstallUID,GIDPerm.PolicyKernelUserApp processAppLocationJavaAPIService processLocation ManagerPermission checkDACSEAndroidKernelBindergpsdevice①②③④⑤⑥⑦⑧KernelUser!!!!!!!630An Historical Analysis of the SEAndroid Policy Evolution
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
the Location Services, which manages the GPS device and other
location-related (and thus, privacy-sensitive) features.
If an application calls a location API 1 , the corresponding li-
brary establishes a Binder channel between the application and the
location manager 2 . Since Binder is an IPC mechanism provided
by the kernel, the client requires a corresponding discretionary
access control (DAC) permission which is always allowed. After
that, a SELinux hook is called to check the SEAndroid permission,
which is also configured to always permit this call. Binder trans-
fers the request to the location manager 3 , which then calls a
checkPermission() system API (shown as “permission check”) which
checks if the user granted the relevant location permissions to the
calling app. If granted, the location manager interacts directly with
the GPS device 4 . However, this access also requires DAC and
SEAndroid enforcement, which are configured so no other subject
in the Android universe is permitted to interact directly with the
device. The API response unwinds the call path 5 - 8 . Each step
includes another opportunity for DAC and SEAndroid permissions
to be checked, but these are all permitted by default.
Even in this simple example, there are seven different access
control enforcement opportunities on the path from the app to the
GPS device driver. In this case, DAC and SEAndroid only serve
to ensure that the GPS device is only reachable from the location
manager service, while the permission checking for the app is han-
dled internally by the location manager. As this example illustrates,
Android security enforcement is complex to analyze.
Here, the value of SEAndroid is to protect system resources more
precisely from low-level attacks. But as we see in Figures 1 and 2,
the SEAndroid policy does not have any relationship to the Android
security model as Android users and app programmers understand
it. In addition, there is no formal documentation specifying any
of the SEAndroid policies, much less how they interact and how
the user-visible permissions or Unix discretionary permissions are
meant to interact with each other and with SEAndroid.
2.3 SEAndroid policy rules
The SEAndroid policy engine was present on Android devices since
the early 2010s, but it was configured in an inactive “permissive
mode”. The policy was initially configured by NSA and committed
to the AOSP repository [1]. Any Android device OEM can add their
own policy along with the original policy, e.g., using tools such
as setools [45] and audit2allow [35]. This is typically done by
examining denial logs and adding additional rules, which can then
be submitted as patches for inclusion in future ASOP releases.
To enforce the policy, the rules are then parsed and compiled