=== map
摘要：
	该命令可以将上次搜索结果应用于接下来的搜索中， 类似于python的map功能
语法：
	map "" [maxsearches = ]
必要参数：
* 
** 描述：
     子查询搜索语句 如 `... | map "index = yotta  starttime=$start$ login_name=$user$"`
可选参数:
* : 可选参数
** 语法：
    maxsearches = 
** 描述：
    最大的搜索个数
** 默认：
    10
[NOTE]
====
* 由于性能的考虑，所以对map前一结果的条数限制默认为20，对应的配置项为map.max_searches_limit
** 示例：
    * | stats count() by logtype | limit 2 | rename logtype as type | map "logtype:$type$"
** 描述：
    上述在map命令之前的数据条数必须小于20条，超出部分将被丢弃
* map命令是否使用cache，使用cache可以加快速度但是同时会增加内存的使用，默认不使用cache，对应的配置项为map.use_cache
====
.示例
====
列出日志数最多的三种logtype他们各自最大的日志文本长度
[source,bash]
* |  stats count() by logtype | limit 3 | rename logtype as type | map "logtype:$type$ | stats max(raw_message_length)"
image::images/Image-140318-045352.033.png[]
以上语句, 实际是先执行 `* |  stats count() by logtype | limit 3 | rename logtype as type` 找出 日志数最大的3个logtype:
image::images/Image-140318-045433.962.png[]
可以看到分别为apache,java,和other。
接下来map会对这三个结果分别生成对应的搜索语句
* `logtype:apache | stats max(raw_message_length)`
* `logtype:java | stats max(raw_message_length)`
* `logtype:other | stats max(raw_message_length)`
分别请求搜索，最终将结果进行合并
====