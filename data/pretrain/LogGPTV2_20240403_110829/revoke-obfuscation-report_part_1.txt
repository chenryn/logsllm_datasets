### Revoke-Obfuscation: PowerShell Obfuscation Detection Using Science

**Authors:**  
Daniel Bohannon (@danielhbohannon) - Senior Applied Security Researcher at Mandiant/FireEye  
Lee Holmes (@Lee_Holmes) - Lead Security Architect of Azure Management at Microsoft

### Introduction
Revoke-Obfuscation is the result of a collaborative research effort between Daniel Bohannon and Lee Holmes, aimed at detecting obfuscated PowerShell scripts. This project addresses the growing trend of attackers using PowerShell for malicious purposes and the subsequent obfuscation techniques employed to evade detection.

### Background
Currently, the most common delivery methods for malware are through malicious executables and documents. While PowerShell-based attacks represent a smaller portion of the overall malware ecosystem, they have seen significant innovation in offensive techniques. Malware that uses PowerShell often employs it as a stager, where an executable or document macro launches PowerShell to download and execute additional malicious components.

#### Antivirus and SIEM Responses
- **Antivirus Vendors:** Many antivirus products can detect and block malicious PowerShell scripts through signature-based methods. With the release of Windows 10, some vendors have also implemented support for the Antimalware Scan Interface (AMSI), which allows for deeper content scanning.
- **SIEM Vendors:** Several Security Information and Event Management (SIEM) systems now alert on command-line parameters frequently used in malicious contexts. For example, Palo Alto Networks provides a detailed overview of commonly used malicious PowerShell command-line arguments.

### Obfuscation Techniques in the Wild: FIN8
FIN8, a financially motivated threat actor, uses various obfuscation techniques to evade traditional static detection. These techniques include renaming the PowerShell executable and breaking the link between the command-line arguments and the code they deliver.

### Setting Up Your Environment
To detect obfuscated PowerShell, you need to set up your environment to collect and process PowerShell logs. The primary steps are:

1. **Process Auditing and Command-Line Logging:**
   - Enable Event ID 4688 to log command-line arguments when processes are launched. This feature is available in Windows 8.1 and Windows 2012 R2, or can be added by installing KB3004375. Sysmon is another useful tool for this purpose.
   
2. **PowerShell Module, Script Block, and Transcription Logging:**
   - Configure PowerShell to log all commands and script blocks. This includes dynamically generated or transformed code. Refer to the PowerShell Blog for more details on logging capabilities.

3. **Centralized Event Log Collection/Forwarding:**
   - Implement centralized event log collection and forwarding across your organization. Windows Event Forwarding (WEF) is an excellent method for this.

### Current Detection Methods
Most current detection methods rely on static signatures, such as simple string matches and regular expressions, applied to command-line and script block logs.

### Invoke-Obfuscation: Challenges with Static Signatures
The initial focus for detecting malicious PowerShell is often the download cradle. However, attackers use various techniques to evade detection, including:

#### Launch Techniques
- **Renaming the PowerShell Executable:** Attackers rename `PowerShell.exe` to something less suspicious, like `Firefox.exe` or `Chrome.exe`.
- **Breaking the Link Between Command-Line Arguments and Code:** Techniques include consuming commands from the Standard Input stream and storing malicious PowerShell commands in environment variables.

#### Obfuscating the Cradle
- **String Manipulation:** URLs and other strings can be broken into parts and reassembled.
- **Type Name Manipulation:** Type names like `System.Net.WebClient` can be shortened or obfuscated.
- **Alternative Methods and Aliases:** PowerShell commands can be invoked using aliases or alternative methods, such as `Get-Command`.

#### String Obfuscation
- **Concatenation and Formatting:** Strings can be concatenated or formatted to break up identifiable patterns.
- **Reversal and Splitting:** Strings can be reversed or split and then rejoined.
- **Replacement:** Strings can be replaced to change their meaning or remove delimiters.

### Changing the Cradle
Automated tools like ISE Steroids and Invoke-Obfuscation can generate highly obfuscated versions of PowerShell scripts. Additionally, projects like Invoke-CradleCrafter automate the creation of obscure download cradles.

### Detecting Obfuscated PowerShell
While the variety of obfuscation techniques may seem daunting, they actually provide a strong signal for detection. The very complexity and obscurity introduced by obfuscation can be leveraged to create robust detection mechanisms.

By understanding and implementing these detection strategies, organizations can significantly enhance their ability to identify and mitigate obfuscated PowerShell attacks.