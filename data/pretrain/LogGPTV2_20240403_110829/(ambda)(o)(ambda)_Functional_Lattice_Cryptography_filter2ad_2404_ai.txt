-- (prime, exponent) pair
newtype PrimePower = PP (PrimeBin, Pos)
-- List invariant: primes appear in strictly increasing order
-- (no duplicates).
newtype Factored
= F [PrimePower]
To enforce the invariants, we hide the P, PP, and F constructors from clients, and instead only
export operations that verify and maintain the invariants. In particular, we provide functions
that construct valid PrimeBin, PrimePower, and Factored values for any appropriate
positive integer, and we deﬁne the following arithmetic operations, whose implementations
are straightforward:
fDivides
:: Factored -> Factored -> Bool
fMul, fGCD, fLCM :: Factored -> Factored -> Factored
We use data kinds and singletons to mechanically promote the above data-level deﬁ-
nitions to the type level. Speciﬁcally, data kinds deﬁnes an (uninhabited) Factored type
corresponding to each Factored value, while singletons produces type families FDivides,
FMul, etc. that operate on these promoted types. We also provide compile-time “macros”
that deﬁne F𝑚 as a synonym for the Factored type corresponding to positive integer 𝑚,
and similarly for PrimeBin and PrimePower types. Combining all this, e.g., FMul F2 F2
yields the type F4, as does FGCD F12 F8. Similarly, FDivides F5 F30 yields the promoted
type True.
In addition, for each Factored type m, singletons deﬁnes a type Sing m that is inhabited
by a single value, which can be obtained as sing :: Sing m. This value has an internal
structure mirroring that of the corresponding Factored value, i.e., it is essentially a list of
singleton values corresponding to the appropriate PrimePower types. (The same goes for
54
the singletons for PrimePower and PrimeBin types.) Lastly, the withSingI function lets us
go in the reverse direction, i.e., it lets us “elevate” a particular singleton value to instantiate
a corresponding type variable in a polymorphic expression.
3.2.8 Applying the Promotions
Here we summarize how we use the promoted types and singletons to generically derive
algorithms for operations in arbitrary cyclotomics. We rely on the “sparse decomposition”
framework described in section 3.4 below; for our purposes here, we only need that a
value of type Trans r represents a linear transform over a base ring r via some sparse
decomposition.
A detailed example will illustrate our approach. Consider the polymorphic function
crt :: (Fact m, CRTrans r, ...) => Tagged m (Trans r)
which represents the index-m Chinese Remainder Transform (CRT) over a base ring r (e.g.,
Z𝑞 or C). Equation (3.3.1) gives a sparse decomposition of CRT in terms of prime-power
indices, and Equations (3.3.2) and (3.3.3) give sparse decompositions for the prime-power
case in terms of the CRT and DFT for prime indices, and the “twiddle” transforms for
prime-power indices.
Following these decompositions, our implementation of crt works as follows:
1. It ﬁrst obtains the singleton corresponding to the Factored type m, using sing ::
Sing m, and extracts the list of singletons for its PrimePower factors. It then takes
the Kronecker product of the corresponding specializations of the prime power-index
CRT function
crtPP :: (PPow pp, CRTrans r, ...) => Tagged pp (Trans r)
The specializations are obtained by “elevating” the PrimePower singletons to instanti-
ate the pp type variable using withSingI, as described above.
55
(The above-described transformation from Factored to PrimePower types applies
equally well to all our transforms of interest. Therefore, we implement a generic
combinator that builds a transform indexed by Factored types from any given one
indexed by PrimePower types.)
2. Similarly, crtPP obtains the singleton corresponding to the PrimePower type pp, ex-
tracts the singletons for its PrimeBin (base) and Pos (exponent) types, and composes
the appropriate specializations of the prime-index CRT and DFT functions
crtP, dftP :: (Prim p, CRTrans r, ...) => Tagged p (Trans r)
along with prime power-indexed transforms that apply the appropriate “twiddle”
factors.
3. Finally, crtP and dftP obtain the singleton corresponding to the PrimeBin type p,
and apply the CRT/DFT transformations indexed by this value, using naïve matrix-
vector multiplication. This requires the pth roots of unity in r, which are obtained via
the CRTrans interface.
3.3 Tensor Interface and Sparse Decompositions
In this section we detail the “backend” representations and algorithms for computing in
cyclotomic rings. We implement these algorithms using the sparse decomposition framework
outlined in section 3.4. This section relies heavily on the background and notation given
in section 2.2.
An element of the 𝑚th cyclotomic ring over a base ring r (e.g., Q, Z, or Z𝑞) can be
represented as a vector of 𝑛 = 𝜙(𝑚) coefﬁcients from r, with respect to a particular r-basis
of the cyclotomic ring. We call such a vector a (coefﬁcient) tensor to emphasize its implicit
multidimensional nature, which arises from the tensor-product structure of the bases we use.
The class Tensor (see Figure 3.1) represents the cryptographically relevant operations
on coefﬁcient tensors with respect to the powerful, decoding, and CRT bases. An instance
56
of Tensor is a data type t that itself takes two type parameters: an m representing the
cyclotomic index, and an r representing the base ring. So the fully applied type t m r
represents an index-m cyclotomic tensor over r.
The Tensor class introduces a variety of methods representing linear transformations
that either convert between two particular bases (e.g., lInv, crt), or perform operations
with respect to certain bases (e.g., mulGPow, embedDec). It also exposes some important
ﬁxed values related to cyclotomic ring extensions (e.g., powBasisPow, crtSetDec). An
instance t of Tensor must implement all these methods and values for arbitrary (legal)
cyclotomic indices.
3.3.1 Single-Index Transforms
In this and the next subsection we describe sparse decompositions for all the Tensor
operations. We start here with the dimension-preserving transforms involving a single
index 𝑚, i.e., they take an index-𝑚 tensor as input and produce one as output.
Prime-Power Factorization
For an arbitrary index 𝑚, every transform of interest factors into the tensor product of the
corresponding transforms for prime-power indices. More speciﬁcally, let 𝑇𝑚 denote the
matrix for any of the linear transforms on index-𝑚 tensors that we consider below. Then
letting 𝑚 =∏︀
⨂︁
ℓ 𝑚ℓ be the factorization of 𝑚 into its maximal prime-power divisors 𝑚ℓ (in
some canonical order), we have the factorization
𝑇𝑚 =
𝑇𝑚ℓ
.
(3.3.1)
ℓ
This follows directly from the Kronecker-product factorizations of the powerful, decoding,
and CRT bases (e.g., Equation (2.2.2)), and the mixed-product property. Therefore, for the
57
class Tensor t where
-- single-index transforms
scalarPow :: (Ring
r -> t m r
scalarCRT :: (CRTrans mon r, Fact m) => mon (r -> t m r)
r, Fact m) =>
l, lInv
:: (Ring r, Fact m) => t m r -> t m r
mulGPow, mulGDec :: (Ring
t m r
=> t m r ->
r, Fact m)
divGPow, divGDec :: (IntegralDomain r, Fact m)
=> t m r -> Maybe (t m r)
crt, crtInv, mulGCRT, divGCRT :: (CRTrans mon r, Fact m)
=> mon (t m r -> t m r)
tGaussianDec :: (OrdFloat q, Fact m, MonadRandom rnd, ...)
=> v -> rnd (t m q)
gSqNormDec
:: (Ring r, Fact m) => t m r -> r
-- two-index transforms and values
embedPow, embedDec :: (Ring r, m ‘Divides‘ m’) => t m
twacePowDec
r -> t m’ r
:: (Ring r, m ‘Divides‘ m’) => t m’ r -> t m r
embedCRT :: (CRTrans mon r, m ‘Divides‘ m’) => mon (t m r -> t m’ r)
twaceCRT :: (CRTrans mon r, m ‘Divides‘ m’) => mon (t m’ r -> t m r)
coeffs :: (Ring r, m ‘Divides‘ m’) => t m’ r -> [t m r]
powBasisPow :: (Ring r, m ‘Divides‘ m’) => Tagged m [t m’ r]
crtSetDec :: (PrimeField fp, m ‘Divides‘ m’, ...)
=> Tagged m [t m’ fp]
Figure 3.1: Representative methods from the Tensor class. For the sake of concision, the
constraint TElt t r is omitted from every method.
58
remainder of this subsection we only deal with prime-power indices 𝑚 = 𝑝𝑒 for a prime 𝑝
and positive integer 𝑒.
Embedding Scalars
Consider a scalar element 𝑎 from the base ring, represented relative to the powerful basis ⃗𝑝𝑚.
Because the ﬁrst element of ⃗𝑝𝑚 is unity, we have
𝑎 = ⃗𝑝𝑡
𝑚 · (𝑎 · e1),
where e1 = (1, 0, . . . , 0). Similarly, in the CRT basis ⃗𝑐𝑚 (when it exists), unity has the
all-ones coefﬁcient vector 1. Therefore,
𝑎 = ⃗𝑐𝑡
𝑚 · (𝑎 · 1).
The Tensor methods scalarPow and scalarCRT use the above equations to represent
a scalar from the base ring as a coefﬁcient vector relative to the powerful and CRT bases,
respectively. Note that scalarCRT itself is wrapped by Maybe, so that it can be deﬁned as
Nothing if there is no CRT basis over the base ring.
Converting Between Powerful and Decoding Bases
Let 𝐿𝑚 denote the matrix of the linear transform that converts from the decoding basis to
the powerful basis:
⃗𝑑𝑡
𝑚 = ⃗𝑝𝑡
𝑚 · 𝐿𝑚 ,
i.e., a ring element with coefﬁcient vector v in the decoding basis has coefﬁcient vector
𝐿𝑚 · v in the powerful basis. Because ⃗𝑑𝑚 = ⃗𝑝𝑚,𝑝 ⊗ ⃗𝑑𝑝,1 and ⃗𝑑𝑡
𝑝,1 · 𝐿𝑝 (both by
𝑝,1 = ⃗𝑝𝑡
59
Equation (2.2.5)), we have
⃗𝑑𝑡
𝑚 = (⃗𝑝𝑡
= ⃗𝑝𝑡
𝑝 · 𝐿𝑝)
𝑚,𝑝 · 𝐼𝑚/𝑝) ⊗ (⃗𝑝𝑡
⏟
𝑚 · (𝐼𝑚/𝑝 ⊗ 𝐿𝑝)
 ⏞
.
𝐿𝑚
Recall that 𝐿𝑝 is the square 𝜙(𝑝)-dimensional lower-triangular matrix with 1s throughout
is the lower-triangular matrix with 1s on the diagonal, −1s on
𝑝 using just 𝑝− 1 additions,
its lower-left triangle, and 𝐿−1
the subdiagonal, and 0s elsewhere. We can apply both 𝐿𝑝 and 𝐿−1
by taking partial sums and successive differences, respectively.
𝑝
The Tensor methods l and lInv represent multiplication by 𝐿𝑚 and 𝐿−1
𝑚 , respectively.
Multiplication by 𝑔𝑚
Let 𝐺pow
𝑚 denote the matrix of the linear transform representing multiplication by 𝑔𝑚 in the
powerful basis, i.e.,
𝑔𝑚 · ⃗𝑝𝑡
𝑚 = ⃗𝑝𝑡
𝑚 · 𝐺pow
𝑚 .
Because 𝑔𝑚 = 𝑔𝑝 ∈ 𝒪𝑝 and ⃗𝑝𝑚 = ⃗𝑝𝑚,𝑝 ⊗ ⃗𝑝𝑝, we have
𝑔𝑚 · ⃗𝑝𝑚 = ⃗𝑝𝑚,𝑝 ⊗ (𝑔𝑝 · ⃗𝑝𝑝)
= (⃗𝑝𝑚,𝑝 · 𝐼𝑚/𝑝) ⊗ (⃗𝑝𝑝 · 𝐺pow
= ⃗𝑝𝑚 · (𝐼𝑚/𝑝 ⊗ 𝐺pow
)
,
𝑝
𝑝
)
⏟
 ⏞
𝐺pow
𝑚
60
𝐺pow
𝑝 =
1
...
,
(𝐺pow
𝑝
)−1 = 𝑝−1·
⎛⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎝
⎛⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎝
1
1
1
⎞⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎠
⎞⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎠
1
−1
...
...
−1
1
1
−1 2
2
−1
···
1
1
...
...
−1
1
−1 1
⎛⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎝