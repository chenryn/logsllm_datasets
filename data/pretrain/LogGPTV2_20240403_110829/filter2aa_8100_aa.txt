# minifd 
Pwn, Medium
## Description
> This is a simple file manager implementation supporting basic functionality to create, read, and write files. Please note: This is a prototype implementation. At this point of time, only 16 files can be managed at the same time.
A binary file was attached.
## Solution
Let's inspect the binary file:
```console
root@kali:/media/sf_CTFs/36c3/minifd# file fd
fd: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=45aec24480e82735f7358d9263d10cafd4eda8f8, not stripped
root@kali:/media/sf_CTFs/36c3/minifd# checksec.sh -f fd
RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      Symbols         FORTIFY Fortified       Fortifiable  FILE
Partial RELRO   Canary found      NX enabled    No PIE          No RPATH   No RUNPATH   85 Symbols      Yes     2               4            fd
```
Let's run it:
```console
root@kali:/media/sf_CTFs/36c3/minifd# ./fd
----------------------
 Simple File Mananger
----------------------
This is a simple file manager implementation supporting basic functionality
to create, read, and write files.
Please note:
This is a prototype implementation.
At this point of time, only 16 files can be managed at the same time.
The Simple File Manager supports the following operations.
[1] list
    Print the file table
[2] create 
    Create a file with name 
[3] close 
    Close the file with file descriptor 
[4] dup 
    Duplicate a file descriptor 
[5] read  
    Read  bytes from the file with file descriptor 
[6] write   
    Write  bytes to the file with file descriptor 
[7] exit
    Leave the Simple File Manager
Enter the command you want to execute.
[1] list
[2] create 
[3] close 
[4] dup 
[5] read  
[6] write   
[7] exit
>
```
We have here a simple file manager. Using Ghidra, we can inspect the implementation under the hood. We find that the file manager uses an array of 16 entries ("`files`") to hold information about the files in the file system. Each entry holds a pointer to a file context allocated on the heap.
Using Ghidra's Structure Editor, we can reconstruct the file context structure based on the usage across the program, and redefine the type of the relevant pointers throughout the program to this reconstructed type. 
The file context structure and global file array are translated to:
```c
typedef struct file_context 
{
    uint8_t     reference_count;
    uint8_t     reserved[3];
    uint32_t    data_length;
    uint8_t*    p_data;
    char        name[32];
    void*       p_close_func;
    void*       p_read_func;
    void*       p_write_func;
    void*       p_dup_func;
} file_context_t;
file_context_t* files[16];
```
Let's inspect the decompilation output of some important functions.
The function we want to call is:
```c
void spawn_shell(void)
{
  long in_FS_OFFSET;
  char *local_28;
  undefined8 local_20;
  long local_10;
  local_10 = *(long *)(in_FS_OFFSET + 0x28);
  local_28 = "/bin/bash";
  local_20 = 0;
  execve("/bin/bash",&local_28,(char **)0x0);
  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {
    return;
  }
                    // WARNING: Subroutine does not return
  __stack_chk_fail();
}
```
Obviously, it isn't called via the normal program flow. Now, let's take a look at the function that is responsible for file creation:
```c
ulong create(char *file_name)
{
  ulong i;
  file_context_t *local_RAX_77;
  ulong uVar1;
  if (files[0] == (file_context_t *)0x0) {
    uVar1 = 0;
LAB_00400a71:
    local_RAX_77 = (file_context_t *)calloc(1,80);
    local_RAX_77->reference_count = '\x01';
    local_RAX_77->data_length = 0;
    local_RAX_77->p_data = (char *)0x0;
    strncpy(local_RAX_77->name,file_name,31);
    *(code **)&local_RAX_77->p_close_func = c3ctf_file_close;
    *(code **)&local_RAX_77->p_read_func = c3ctf_file_read;
    *(code **)&local_RAX_77->p_write_func = c3ctf_file_write;
    *(code **)&local_RAX_77->p_dup_func = c3ctf_file_dup;
    files[(int)uVar1] = local_RAX_77;
  }
  else {
    i = 1;
    do {
      uVar1 = i & 0xffffffff;
      if (files[i] == (file_context_t *)0x0) {
        if ((int)i p_write_func)(pfVar1,new_data_length,p_new_data);
    return 0;
  }
  return 0xffffffff;
}
void c3ctf_file_write(file_context_t *p_ctx,uint new_data_length,char *p_new_data)
{
  char *pcVar1;
  if (p_ctx->data_length p_data,(ulong)new_data_length);
    p_ctx->p_data = pcVar1;
  }
  p_ctx->data_length = new_data_length;
  strncpy(p_ctx->p_data,p_new_data,(ulong)new_data_length);
  return;
}
```
Reading a file:
```c
undefined8 do_read(int file_fd,uint length_to_read,char *p_out_buffer)
{
  file_context_t *pfVar1;
  pfVar1 = files[file_fd];
  if (pfVar1 != (file_context_t *)0x0) {
    (*(code *)pfVar1->p_read_func)(pfVar1,length_to_read,p_out_buffer);
    return 0;
  }
  return 0xffffffff;
}
void c3ctf_file_read(file_context_t *p_ctx,uint length_to_read,char *p_out_buffer)
{
  if (p_ctx->data_length data_length == length_to_read) {
    length_to_read = p_ctx->data_length;
  }
  strncpy(p_out_buffer,p_ctx->p_data,(ulong)length_to_read);
  return;
}
```
Duplicating a file:
```c
ulong do_dup(int file_fd)
{
  file_context_t *pfVar1;
  ulong uVar2;
  ulong uVar3;
  pfVar1 = files[file_fd];
  if (pfVar1 == (file_context_t *)0x0) {
    uVar2 = 0xffffffff;
  }
  else {
    (*(code *)pfVar1->p_dup_func)(pfVar1);
    if (files[0] == (file_context_t *)0x0) {
      uVar2 = 0;
LAB_00400a0c:
      files[(int)uVar2] = pfVar1;
    }
    else {
      uVar3 = 1;
      do {
        uVar2 = uVar3 & 0xffffffff;
        if (files[uVar3] == (file_context_t *)0x0) {
          if ((int)uVar3 reference_count = p_ctx->reference_count + '\x01';
  return;
}
```
Closing a file:
```c
undefined8 do_close(int file_fd)
{
  file_context_t *pfVar1;
  pfVar1 = files[file_fd];
  if (pfVar1 != (file_context_t *)0x0) {
    (*(code *)pfVar1->p_close_func)(pfVar1);
    files[file_fd] = (file_context_t *)0x0;
    return 0;
  }
  return 0xffffffff;
}
void c3ctf_file_close(file_context_t *p_ctx)
{
  uint8_t uVar1;
  uVar1 = p_ctx->reference_count + -1;
  p_ctx->reference_count = uVar1;
  if (uVar1 != '\0') {
    return;
  }
  free(p_ctx->p_data);