# PC客户端初赛赛题解题报告
## 概述
本题是一个windows 32位opengl游戏程序，打开发现是一个3d游戏，视角移动受限，未提供坐标移动功能，无法看到屏幕中央箭头指向的区域。
使用ida搜索字符串可以发现使用的glfw版本为3.3，并且使用了opengl es。  
由于glfw库采用静态编译，程序中大量调用其api函数而缺少符号信息，为了更方便的分析，从官网现在了glfw
3.3的lib库（
    pcf glfw3_mt.lib
    sigmake glfw3_mt.pat glfw3_mt.sig
将sig放入ida识别，即可成功识别部分库函数。
而对于题目中中大量虚表函数引用，其地址为动态导入，有函数名字符串其实更方便我们识别，例如下面的导入代码：
    void sub_404710()
    {
      if ( dword_466D24 )
      {
        sub_418CB0("glColorMaski");
        sub_418CB0("glGetBooleani_v");
        sub_418CB0("glGetIntegeri_v");
        sub_418CB0("glEnablei");
        sub_418CB0("glDisablei");
        sub_418CB0("glIsEnabledi");
        sub_418CB0("glBeginTransformFeedback");
        sub_418CB0("glEndTransformFeedback");
        sub_418CB0("glBindBufferRange");
        sub_418CB0("glBindBufferBase");
        sub_418CB0("glTransformFeedbackVaryings");
        sub_418CB0("glGetTransformFeedbackVarying");
        sub_418CB0("glClampColor");
        sub_418CB0("glBeginConditionalRender");
        sub_418CB0("glEndConditionalRender");
        sub_418CB0("glVertexAttribIPointer");
        sub_418CB0("glGetVertexAttribIiv");
        sub_418CB0("glGetVertexAttribIuiv");
        sub_418CB0("glVertexAttribI1i");
        sub_418CB0("glVertexAttribI2i");
        sub_418CB0("glVertexAttribI3i");
        sub_418CB0("glVertexAttribI4i");
        sub_418CB0("glVertexAttribI1ui");
        sub_418CB0("glVertexAttribI2ui");
        sub_418CB0("glVertexAttribI3ui");
        sub_418CB0("glVertexAttribI4ui");
        sub_418CB0("glVertexAttribI1iv");
        sub_418CB0("glVertexAttribI2iv");
        sub_418CB0("glVertexAttribI3iv");
        sub_418CB0("glVertexAttribI4iv");
        sub_418CB0("glVertexAttribI1uiv");
        sub_418CB0("glVertexAttribI2uiv");
        sub_418CB0("glVertexAttribI3uiv");
        sub_418CB0("glVertexAttribI4uiv");
        sub_418CB0("glVertexAttribI4bv");
        sub_418CB0("glVertexAttribI4sv");
        sub_418CB0("glVertexAttribI4ubv");
        sub_418CB0("glVertexAttribI4usv");
        sub_418CB0("glGetUniformuiv");
        sub_418CB0("glBindFragDataLocation");
        sub_418CB0("glGetFragDataLocation");
        sub_418CB0("glUniform1ui");
        sub_418CB0("glUniform2ui");
        sub_418CB0("glUniform3ui");
        sub_418CB0("glUniform4ui");
        sub_418CB0("glUniform1uiv");
        sub_418CB0("glUniform2uiv");
        sub_418CB0("glUniform3uiv");
        sub_418CB0("glUniform4uiv");
        sub_418CB0("glTexParameterIiv");
        sub_418CB0("glTexParameterIuiv");
        sub_418CB0("glGetTexParameterIiv");
        sub_418CB0("glGetTexParameterIuiv");
        sub_418CB0("glClearBufferiv");
        sub_418CB0("glClearBufferuiv");
        sub_418CB0("glClearBufferfv");
        sub_418CB0("glClearBufferfi");
        glGetStringi = sub_418CB0("glGetStringi");
        sub_418CB0("glIsRenderbuffer");
        sub_418CB0("glBindRenderbuffer");
        sub_418CB0("glDeleteRenderbuffers");
        sub_418CB0("glGenRenderbuffers");
        sub_418CB0("glRenderbufferStorage");
        sub_418CB0("glGetRenderbufferParameteriv");
        sub_418CB0("glIsFramebuffer");
        sub_418CB0("glBindFramebuffer");
        sub_418CB0("glDeleteFramebuffers");
        sub_418CB0("glGenFramebuffers");
        sub_418CB0("glCheckFramebufferStatus");
        sub_418CB0("glFramebufferTexture1D");
        sub_418CB0("glFramebufferTexture2D");
        sub_418CB0("glFramebufferTexture3D");
        sub_418CB0("glFramebufferRenderbuffer");
        sub_418CB0("glGetFramebufferAttachmentParameteriv");
        glGenerateMipmap = (int (__stdcall *)(_DWORD))sub_418CB0("glGenerateMipmap");
        sub_418CB0("glBlitFramebuffer");
        sub_418CB0("glRenderbufferStorageMultisample");
        sub_418CB0("glFramebufferTextureLayer");
        sub_418CB0("glMapBufferRange");
        sub_418CB0("glFlushMappedBufferRange");
        glBindVertexArray = (int (__stdcall *)(_DWORD))sub_418CB0("glBindVertexArray");
        glDeleteVertexArrays = (int (__stdcall *)(_DWORD, _DWORD))sub_418CB0("glDeleteVertexArrays");
        glGenVertexArrays = (int (__stdcall *)(_DWORD, _DWORD))sub_418CB0("glGenVertexArrays");
        sub_418CB0("glIsVertexArray");
      }
    }
这样大大提高了程序可读性。
## 程序流程
从winmain函数开始分析，首先程序读取了其文件数据中的两个纹理图案数据：
    int __stdcall WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd)
    {
      char *v4; // esi
      DWORD v5; // ebx
      HANDLE v6; // eax
      void *v7; // edi
      void *v8; // ebx
      DWORD v9; // edi
      HANDLE v10; // eax
      void *v11; // esi
      LONG lDistanceToMove; // [esp+Ch] [ebp-110h]
      void *lpBuffer; // [esp+10h] [ebp-10Ch]
      LPVOID lpBuffera; // [esp+10h] [ebp-10Ch]
      DWORD NumberOfBytesRead; // [esp+14h] [ebp-108h]
      CHAR Filename; // [esp+18h] [ebp-104h]
      v4 = (char *)hInstance + *(_DWORD *)((char *)hInstance + *((_DWORD *)hInstance + 15) + 0x54);
      memset(&Filename, 0, 0x100u);
      GetModuleFileNameA(hInstance, &Filename, 0x100u);
      lDistanceToMove = *((_DWORD *)v4 - 2);
      sub_407380(&dword_465FE4, *((_DWORD *)v4 - 3));
      lpBuffer = (void *)dword_465FE4;
      v5 = dword_465FE8 - dword_465FE4;
      v6 = CreateFileA(&Filename, 0x80000000, 1u, 0, 3u, 0x80u, 0);
      v7 = v6;
      if ( v6 != (HANDLE)-1 )
      {
        SetFilePointer(v6, lDistanceToMove, 0, 0);
        NumberOfBytesRead = 0;
        ReadFile(v7, lpBuffer, v5, &NumberOfBytesRead, 0);
        CloseHandle(v7);
      }
      lpBuffera = (LPVOID)*((_DWORD *)v4 - 4);
      sub_407380((int *)&::lpBuffer, *((_DWORD *)v4 - 5));
      v8 = ::lpBuffer;
      v9 = dword_465FF8 - (_DWORD)::lpBuffer;
      v10 = CreateFileA(&Filename, 0x80000000, 1u, 0, 3u, 0x80u, 0);
      v11 = v10;
      if ( v10 != (HANDLE)-1 )
      {
        SetFilePointer(v10, (LONG)lpBuffera, 0, 0);
        NumberOfBytesRead = 0;
        ReadFile(v11, v8, v9, &NumberOfBytesRead, 0);
        CloseHandle(v11);
      }
      return sub_4064D0();
    }
接着进入关键的sub_4064D0，该函数就是一个较为典型的opengl 3d程序，使用标准的MVP模型构建，使用shader着色器渲染游戏。
    signed int sub_4064D0()
    {
      glfwInit();
      glfwWindowHint(0x22002, 3);
      glfwWindowHint(0x22003, 3);
      glfwWindowHint(0x22008, 0x32001);
      v0 = glfwCreateWindow(800, 600, (int)"XDDDDDDDDD", 0, 0);
      window = v0;
      if ( !v0 )
      {
        glfwTerminate();
        return -1;
      }
      sub_418D00(v0);
      sub_419330((int)window, (int)sub_407100);
      glfwSetWindowSizeCallback((int)window, (int)sub_407120);
      sub_419A30(window, 208897, 212995);
      if ( !sub_4051B0() )
        return -1;
      glEnable(2929);
      sub_4060D0(&v41, v30, v3);                    // shader init?
      *(_OWORD *)v64 = xmmword_455340;
      v65 = xmmword_456AA0;
      v66 = xmmword_455470;
      v67 = xmmword_4554D0;
      v68 = xmmword_455560;
      v69 = xmmword_455320;
      v70 = xmmword_456AE0;
      v71 = xmmword_456A90;
      v72 = xmmword_455450;
      v73 = xmmword_455300;
      v74 = xmmword_455540;
      v75 = xmmword_4554A0;
      v76 = xmmword_455500;
      v77 = xmmword_456A70;
      v78 = xmmword_4552A0;
      v79 = xmmword_455550;
      v80 = xmmword_456A60;
      v81 = xmmword_456AC0;
      v82 = xmmword_456A80;
      v83 = xmmword_455530;
      v84 = xmmword_4552D0;
      v85 = xmmword_4554B0;
      v86 = xmmword_455470;
      v87 = xmmword_455460;
      v88 = xmmword_455560;
      v89 = xmmword_455330;
      v90 = xmmword_456AB0;
      v91 = xmmword_456A40;
      v92 = xmmword_455450;
      v93 = xmmword_4552F0;
      v94 = xmmword_455340;
      v95 = xmmword_456AB0;
      v96 = xmmword_456A50;
      v97 = xmmword_455460;
      v98 = xmmword_455300;
      v99 = xmmword_4552D0;
      v100 = xmmword_456AD0;
      v101 = xmmword_4554F0;
      v102 = xmmword_4554C0;
      v103 = xmmword_455560;
      v104 = xmmword_455540;
      v105 = xmmword_455480;
      v106 = xmmword_4554E0;
      v107 = xmmword_456A30;
      v108 = xmmword_455520;
      glGenVertexArrays(1, &v63);
      glGenBuffers(1, &v59);
      glBindVertexArray(v63);
      glBindBuffer(34962, v59);
      glBufferData(34962, 720, v64, 35044);
      glVertexAttribPointer(0, 3, 5126, 0, 20, 0);
      glEnableVertexAttribArray(0);
      glVertexAttribPointer(1, 2, 5126, 0, 20, 12);
      glEnableVertexAttribArray(1);
      glGenTextures(1, &v61);
      glBindTexture(3553, v61);
      glTexParameteri(3553, 10242, 10497);
      glTexParameteri(3553, 10243, 10497);
      glTexParameteri(3553, 10241, 9729);
      glTexParameteri(3553, 10240, 9729);
      dword_465FC4 = 1;
      v4 = sub_409D00(dword_465FE8 - dword_465FE4, dword_465FE4, &v43, &v42, (int *)&v62);
      v5 = v4;
      if ( v4 )
      {
        glTexImage2D(3553, 0, 6407, v43, v42, 0, 6407, 5121, v4);
        glGenerateMipmap(3553);
      }
      j___free_base(v5);
      glGenTextures(1, &v60);
      glBindTexture(3553, v60);
      glTexParameteri(3553, 10242, 10497);
      glTexParameteri(3553, 10243, 10497);
      glTexParameteri(3553, 10241, 9729);
      glTexParameteri(3553, 10240, 9729);
      v6 = sub_409D00(dword_465FF8 - (_DWORD)lpBuffer, (int)lpBuffer, &v43, &v42, (int *)&v62);
      v7 = v6;
      if ( v6 )
      {
        glTexImage2D(3553, 0, 6407, v43, v42, 0, 6408, 5121, v6);
        glGenerateMipmap(3553);
      }
      j___free_base(v7);
      v8 = v41;
      glUseProgram(v41);
      v46 = 15;
      v45 = 0;
      LOBYTE(lpMem) = 0;
      gl_init_str(&lpMem, "texture1", 8u);
      v109 = 0;
      v9 = &lpMem;
      if ( v46 >= 0x10 )
        v9 = lpMem;
      v10 = glGetUniformLocation(v8, v9, 0);
      glUniform1i(v10);
      v109 = -1;
      sub_407420(&lpMem);
      v46 = 15;