另外，阿里云等服务商也已经提供了Docker镜像的下载服务。当然，最便捷的方式还
例如，要下载ubuntu仓库的12.04镜像，可以使用：
以CentOS 仓库为例，其中包括Centos 5、CentOS6和CentOS7等镜像。
此时，在本地将启动一个私有仓库服务，监听端口为5000。
这将自动下载并启动一个registry容器，创建本地的私有仓库服务。
需要注意的是，从DockerPool下载的镜像文件，与官方镜像文件是完全一致的。
$ sudo docker tag dl.dockerpool.com:5000/ubuntu:12.04 ubuntu:12.04
下载后，可以更新镜像的标签，
dl.dockerpool.com:5000/ubuntu
通过dockerimages命令来查看下载到本地的镜像：
S sudo docker pul1 dl.dockerpool.com:5000/ubuntu:12.04
创建和使用私有仓库
Ssudo docker images
第一部分Docker入门
，与官方标签保持一致：
12.04
即可看到已有的仓库和存储的镜像，包括
ae7818fad1bc
1min ago
116.2MB
---
## Page 51
镜像已经成功上传了。
tag IMAGE[:TAG]
10.0.2.2：5000。然后在虚拟机系统（Ubuntu14.04）里测试上传和下载镜像。
管理私有仓库镜像
首先在本书环境的笔记本上（LinuxMint）搭建私有仓库，查看其地址为
9bad880da3d2:Download complete
$sudodockerpul110.0.2.2:5000/test
现在可以到任意一台能访问到10.0.2.2地址的机器去下载这个镜像了：
在结果中可以看到{"description"：""，
511136ea3c5a:
ba5877dc9bec:Download complete
"library/test")])
$curlhttp://10.0.2.2:5000/v1/search
用cur1查看仓库10.0.2.2：5000中的镜像：
test/tags/latest)
Pushing tag for
Image
$sudo docker push
使用dockerpush上传标记的镜像：
10.0.2.2:5000/test
REPOSITORY
$ sudo docker images
$sudo docker tagubuntu:14.04 10.0.2.2:5000/test
使用dockertag命令将这个镜像标记为10.0.2.2：5000/test（格式为docker
ubuntu
$sudo docker images
在Ubuntu14.04系统查看已有的镜像：
"num_results":1,
Image
Image
Image
Image
ubuntu
REPOSITORY
2318d26665ef
ebc34468f71d
25f11f5fb0cb
9bad880da3d2
511136ea3c5a
Download
14.04
TAG
[REGISTRYHOST/][USERNAME/]NAME[:TAG]):
14.04
TAG
rev [ba5877dc9bec]
already
already
already
10.0.2.2:5000/test (1 tags)
a repository [10.0.2.2:5000/test](len:1)
10.0.2.2:5000/test
already
"query":
complete
latest
ba5877dc9bec
IMAGEID
ba5877dc9bec
IMAGE ID
pushed,
pushed,
pushed,
pushed,
"results":["description":"","name":
skipping
skipping
skipping
skipping
skipping
on (http://10.0.2.2:5000/v1/repositories/
"name":"library/test"}，表明
ba5877dc9bec
6daysago
CREATED
6days ago
CREATED
199.3MB
VIRTUAL SIZE
199.3MB
VIRTUAL SIZE
第5章
6 days ago
库
199.3MB
37
---
## Page 52
战案例中，将介绍私有仓库的更多配置选项。
的下载和使用等操作。
5.4本章小结
38第一部分Docker入门
在企业的生产环境中，
本章介绍的DockerHub和DockerPool两个公共仓库服务，
仓库概念的引人，为Docker镜像文件的分发和管理提供了便捷的途径。
$ sudo docker tag 10.0.2.2:5000/test ubuntu:14.04
下载后，还可以添加一个更通用的标签ubuntu：14.04：
10.0.2.2:5000/test
REPOSITORY
$ sudo docker images
2318d26665ef:Downloadcomplete
ebc34468f71d:
25f11f5fb0cb:
Download complete
Download complete
，则往往需要使用私有仓库来维护内部镜像。在本书第二部分的实
latest
TAG
ba5877dc9bec
IMAGEID
6daysago
CREATED
，可以方便个人用户进行镜像
199.3MB
VIRTUAL SIZE
---
## Page 53
用-v标记可以创建多个数据卷。
在容器内创建一个数据卷
6.1
实现数据的备份和恢复。
据卷中。接下来，会介绍如何使用数据卷容器在容器和主机、容器和容器之间共享数据，并
内的数据进行备份，甚至多个容器之间进行数据的共享，这必然涉及容器的数据管理操作。
在用dockerrun命令的时候，使用-v标记可以在容器内创建一个数据卷。
数据卷的使用，类似于Linux下对目录或文件进行mount操作。
口卷会一直存在，直到没有容器使用。
口对数据卷的更新，不会影响镜像。
口对数据卷的修改会立马生效。
口数据卷可以在容器之间共享和重用。
数据卷是一个可供容器使用的特殊目录，它绕过文件系统，可以提供很多有用的特性：
本章将首先介绍如何在容器内创建数据卷，
口数据卷容器（DataVolumeDontainers
数据卷（DataVolumes）
容器中管理数据主要有两种方式：
用户在使用Docker的过程中，往往需要能查看容器内应用产生的数据，或者需要把容器
数据卷
，并且把本地的目录或文件挂载到容器内的数
数据管理
第6章
Chippter6
。多次使
---
## Page 54
数据卷容器其实就是一个普通的容器，专门用它提供数据卷供其他容器挂载使用方法如下。
6.2
慧
挂载一个本地主机文件作为数据卷
Docker会自动创建。
中，然后在容器内运行和使用。另外，本地目录的路径必须是绝对路径，
挂载一个主机目录作为数据卷
的/webapp目录：
40第一部分Docker入门
首先，创建一个数据卷容器dbdata，并在其中创建一个数据卷挂载到/dbdata：
如果用户需要在容器之间共享一些持续更新的数据，
这样就可以记录在容器输入过的命令历史了。
-v标记也可以从主机挂载单个文件到容器中作为数据卷：
加了：ro之后，容器内挂载的数据卷的数据就无法修改了。
Docker挂载数据卷的默认权限是读写（rw），用户也可以通过，ro指定为只读：
这个功能在进行测试的时候十分方便，比如用户可以放置一些程序或数据到本地目录
使用-v标记也可以指定挂载一
$sudo dockerrun-d-P--name web-v/webapp training/webapp python app.py
下面使用training/webapp镜像创建一个Web容器，并创建一个数据卷挂载到容器
training/webapp python app.py
上面的命令加载主机的/src/webapp目录到容器的/opt/webapp目录：
python app.py
数据卷容器
place的时候，可能会造成文件inode的改变，从Docker1.1.0起，这会导致报错
如果直接挂载一个文件到容器，使用文件编辑工具，包括vi或者sed--in-
-P是允许外部访问容器需要暴露的端口。
误信息。所以推荐的方式是直接挂载文件所在的目录。
一个本地的已有目录到容器中去作为数据卷：
，最简单的方式是使用数据卷容器。
如果目录不存在
---
## Page 55
节中进行讲解。
命令来指定同时删除关联的容器。
果要删除一个数据卷，必须在删除最后一个还挂载着它的容器时显式使用dockerrm-v
经挂载了容器卷的容器来挂载数据卷：
使用数据卷容器可以让用户在容器之间自由地升级和移动数据卷。具体的操作将在下一
G
例如创建db1和db2两个容器，并从dbdata容器挂载数据卷：
一方在该目录下的写人，其他容器都可以看到。
如果删除了挂载的容器（包括dbdata、db1和db2），数据卷并不会被自动删除。如
注意
$ sudo docker run -d --name db3 --volumes-from db1 training/postgres
可以多次使用--volumes-from参数来从多个容器挂载多个数据卷。还可以从其他已
root@4128d2d804b4:/#1sdbdata/
$sudo docker run -it
在db1容器内查看它：
例如，在dbdata容器中创建一个test文件：
此时，容器db1和db2都挂载同一个数据卷到相同的/dbdata目录。三个容器任何
$ sudo docker run -it--volumes-from dbdata --name db1 ubuntu
然后，可以在其他容器中使用--volumes-from来挂载dbdata容器中的数据卷，
test
sbin
binboot
root@4128d2d804b4:/#1s
test.
root@3ed94f279b6f:/dbdata#1s
root@3ed94f279b6f:/dbdata#touchtest
root@3ed94f279b6f:/#cd/dbdata
binboot
root@3ed94f279b6f:/#1s
查看/dbdata目录：
root@3ed94f279b6f:/#
使用--volumes-from参数所挂载数据卷的容器自身并不需要保持在运行状态。
srv
dbdatadevetchome1ib 1ib64media mntoptprocrootrun
sys
dbdata
systmpusr.var
tmp
dev
--volumes-fromdbdata--name db1
etc
yar
home
1ib1ib64mediamntoptproc
ubuntu
第6章数据管理41
rootrun
88
---
## Page 56
份，或者使用支持容错的存储系统，包括RAID或分布式文件系统，如Ceph、GPFS、HDFS 等。
创建容器即可。
这些机制，即使容器在运行中出现故障，用户也不必担心数据发生丢失，只需要快速地重新
6.4
挂载的容器卷中即可：
dbdata2:
恢复
backup.tar。
将/dbdata下内容备份为容器内的/backup/backup.tar，即宿主主机当前目录下的
s（pwd）：/backup参数来挂载本地的当前目录到worker容器的/backup目录。
参数来让worker容器挂载dbdata容器的数据卷（即dbdata数据卷）；使用-v
备份
6.3
42第一部分Docker入门
在生产环境中，笔者推荐在使用数据卷或数据卷容器之外，定期将主机的本地数据进行备
：worker容器启动后，使用了tarcvf/backup/backup.tar./dbdata命令来
本章介绍了通过数据卷和数据卷容器对容器内数据进行共享、备份和恢复等操作，通过
数据是最宝贵的资源，Docker无疑为数据管理提供了充分的支持。
然后创建另一个新的容器，挂载dbdata2的容器，并使用untar解压备份文件到所
$sudo docker run -v/dbdata --name dbdata2 ubuntu /bin/bash
如果要恢复数据到一个容器，可以按照下面的操作。首先创建一个带有数据卷的容器
/backup/backup.tar
首先利用ubuntu镜像创建了一个容器worker。使用--volumes-fromdbdata
这个命令稍微有点复杂，具体分析下。
tarcvf/backup/backup.tar/dbdata
使用下面的命令来备份dbdata数据卷容器内的数据卷：
可以利用数据卷容器对其中的数据卷进行备份、恢复，以实现数据的迁移。
本章小结
利用数据卷容器迁移数据
---
## Page 57
开放的网络端口：
定端口映射。当使用-P标记时，Docker会随机映射一个49000～49900的端口至容器内部
网络应用和服务的。
从外部访问容器应用
7.1
提供给外部网络，以及通过容器互联系统让多个容器之间进行快捷的网络通信。
相互配合。
当容器中运行一些网络应用，
在启动容器的时候，如果不指定对应参数，在容器外部是无法通过网络来访问容器内的
此时，可以使用dockerps看到，本地主机的49155被映射到了容器的5000端口。
本章将讲解如何使用Docker的网络功能。包括使用端口映射机制来将容器内应用服务
$ sudo docker run -d-P training/webapp python app.py
Docker目前提供了映射容器端口到宿主主机和容器互联机制来为容器提供网络服务。
0.0.0.0:49155->5000/tcp
bc533791f3f5
CONTAINER ID
$sudo docker ps -1
端口映射实现访问容器
大量的互联网应用服务包括多个服务组件，这往往需要多个容器之间通过网络通信进行
IMAGE
COMMAND
nostalgic_morse
，要让外部访问这些应用时，可以通过-P或-p参数来指
CREATED
网络基础配置
STATUS
PORTS
第7章
NAMES
Up2seconds
Chiapter)
---
## Page 58
查看映射端口配置
会自动分配一个端口：
映射到指定地址的任意端口
localhost地址127.0.0.1：
映射到指定地址的指定端口
例如：
可以执行如下命令：
映射所有接口地址
hostPort:containerPort。
容器。支持的格式有ip:hostPort:containerPort 丨ip：:containerPort
访问宿主主机的49115端口即可访问容器内Web应用提供的界面。
44
soos d-p- un xxoop opnss
使用hostPort：containerPort格式将本地的5000端口映射到容器的5000端口，
使用 docker port 来查看当前映射的端口配置，
$ sudo docker run -d -p 127.0.0.1:5000:5000/udp training/webapp python app.py
使用ip：:containerPort绑定localhost的任意端口到容器的5000端口，本地主机
可以使用ip:hostPort：containerPort格式指定映射使用一个特定地址，比如
还可以使用udp标记来指定udp端口：
$sudo docker run-d-p127.0.0.1::5000 training/webapp python app.py
$sudo docker run
此时默认会绑定本地所有接口上的所有地址。多次使用-p 标记可以绑定多个端口。
$sudo docker
-p（小写的）则可以指定要映射的端口，并且，在一个指定端口上只可以绑定一
10.0.2.2
10.0.2.2-
$sudodocker logs -f nostalgic_morse
同样，
Runningonhttp://0.0.0.0:5000/
第一部分
，可以通过dockerlogs 命令来查看应用的信息：
-[23/May/201420:16:31]"GET
[23/May/201420:16:31]