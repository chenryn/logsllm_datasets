III. BLUETOOTH LOW ENERGY
B. Link layer internals
Our injection-based attack mainly relies on the exploitation
of some speciﬁc features of the Link Layer. This subsection
provides a detailed description of these features.
1) Frame format: Every BLE frame transmitted using the
LE 1M mode is based on the format described in table I:
This section presents a brief overview of the BLE protocol
as well as some more detailed descriptions of the Link layer
(LL), which are directly related to our injection attack.
Preamble
1 byte
TABLE I: Frame format for LE 1M
Protocol Data Unit (PDU)
Access Address
4 bytes
variable
CRC
3 bytes
A. Overview
Bluetooth Low Energy is a lightweight variant of Bluetooth,
dedicated to devices needing low energy consumption.
The stack is split into two major parts: the Controller and
the Host. The lowest layers are included in the Controller,
while the highest ones are handled by the Host.
The physical layer is based on a Gaussian Frequency Shift
Keying modulation. Three main modes can be used in BLE:
an uncoded physical layer with a bitrate of 1 Mbit/s or 2
Mbits/s (respectively called LE 1M and LE 2M), or a coded
physical layer using a 250 kbits/s or 500 kbits/s bitrate (called
LE Coded). BLE operates in the ISM band from 2.4 to
2.5 GHz, and deﬁnes 40 channels, each with a bandwidth
of 2 MHz. Three channels (37, 38 and 39) are dedicated
to the advertising mode (allowing devices to broadcast data
using some packets named advertisements), while the 37
others channels (numbered from 0 to 36) are dedicated to
the connected mode, which is used when a connection is
established between two devices.
Every BLE-based application using the connected mode is
built on top of the ATT and GATT layers. These layers deﬁne a
client / server model, providing a generic solution to exchange
data between devices. Speciﬁcally, an ATT server is a database
of attributes. Each attribute is composed of an identiﬁer, a
type and a value. An ATT client is able to interact with this
database using some requests: for example, a Read Request
allows the client to read a given attribute, while a Write
Request allows to modify the value of an attribute. The GATT
level provides an additional layer of abstraction to deﬁne some
services including characteristics and creates generic proﬁles
for a given type of device.
The Security Manager provides a set of pairing and bonding
procedures to negotiate multiple keys dedicated to increase the
security level of the connection. One of the most important
keys is the Long Term Key, which allows to establish an
AES-CCM encryption over the Link Layer to avoid eaves-
dropping. The Generic Access Proﬁle (GAP) introduces four
different roles, describing the device’s behaviour. Regarding
the connected mode, two roles are deﬁned. The Peripheral role
corresponds to a device that can transmit advertisements and
is connectable, while the Central role corresponds to a device
that can receive advertisements and establish a connection with
another device. The Peripheral is also called Slave as it plays
a slave role in a BLE connection; the Central is called Master.
The preamble is used by the receiver to detect the start of
a BLE frame. The Access Address indicates the mode in use,
either advertising mode or connected mode. The Protocol Data
Unit is a variable ﬁeld containing the data to transmit. Finally,
a 3 bytes CRC is used for integrity checking.
2) Initiating a connection: When a Peripheral is not in
a connected state, it broadcasts some advertisements on the
advertising channels. The payload generally includes some
information allowing to identify the device, such as the de-
vice name. To establish a connection with a Peripheral, the
Central transmits a dedicated type of advertisement named
CONNECT REQ right after the reception of an advertisement
from the Peripheral. The corresponding LL PDU, described in
table II, includes some parameters used during the connection.
The Access Address ﬁeld is used by both devices for every
frame transmitted during the connection.
3) Channel selection: The Channel Map and Hop Incre-
ment ﬁelds (cf. Table II) are used by the channel selection
algorithm. Indeed, a BLE connection uses a channel hopping
mechanism to avoid interference with other BLE connec-
tions or wireless communication protocols. Two main channel
selection algorithms are currently usable: Channel Selection
Algorithm #1 is based on a simple modular addition, while
Channel Selection Algorithm #2 is based on a pseudo-random
generator. Both of them can be predicted by an attacker to sniff
an established connection (see [19] and [10]). In our study we
consider Channel Selection Algorithm #1, which is the most
commonly used algorithm, however the proposed approach can
be easily adapted to the second algorithm.
4) Transmit window: Two ﬁelds WinSize and WinOffset (cf.
Table II) are used to deﬁne the transmit window. Indeed, the
ﬁrst frame of the connection is transmitted on the ﬁrst selected
channel by the Central to the Peripheral at time t0 during the
transmit window deﬁned by formula 1:
tstart ≤ t0 ≤ tstart + dsize
tstart = tinit + 1250μs + dof f set
(cid:2)
(1)
With tinit
the end of transmission time of the CON-
NECT REQ frame, dof f set = WinOffset×1250μs and dsize =
WinSize × 1250μs.
t0 indicates the beginning of the ﬁrst connection event, and
is used as a time reference for next connection events.
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:25:32 UTC from IEEE Xplore.  Restrictions apply. 
390
Init. addr.
6 bytes
Adv. addr.
6 bytes
Access addr.
4 bytes
CRCInit WinSize WinOffset
3 bytes
2 bytes
1 byte
Hop interval
2 bytes
Latency
2 bytes
Timeout
2 bytes
Channel Map
5 bytes
Hop Increment
5 bits
SCA
3 bits
TABLE II: CONNECT REQ PDU
5) Connection events: Let us consider a connection event
that starts at the time tn of frame transmission from the Master
to the Slave, called the anchor point. t0 corresponds to the
ﬁrst anchor point. When the Slave receives the frame, it waits
during the inter-frame spacing (150μs) before sending a frame
to the Master. A bit named More Data (MD) in the header of
frames allows to indicate that more data is available and will
be transmitted during the connection event. If the device does
not have data to transmit, it will transmit an empty frame.
The time between two consecutive anchor points is given
by the Hop Interval parameter, according to the formula 2:
dconnInterval = HopInterval × 1250μs
(2)
Each time a connection event is closed, the next channel is
selected according to the channel selection algorithm in use.
Each connection event is also identiﬁed by a 16-bit unsigned
integer named connection event count. Figure 1 illustrates two
typical consecutive connection events.
Connection event #n
Connection event #n+1
dconnInterval = HopInterval x 1250μs
dconnInterval = HopInterval x 1250μs
150μs
150μs
M
S
M
S
tn
tn+1
tn+2
Fig. 1: Two consecutive connection events
6) Acknowledgement and ﬂow control: Each BLE frame
transmitted during a connection includes two 1 bit ﬁelds in
the header of the LL PDU, indicating respectively the Se-
quence Number (SN) and the Next Expected Sequence Number
(NESN). Each device also has two 1 bit counters, respec-
tively named transmitSeqNum and nextExpectedSeqNum. The
transmitSeqNum counter is incremented by one (modulo 2) if
the previously transmitted data have been acknowledged. The
nextExpectedSeqNum is incremented by one (modulo 2) when
the next expected frame has been received.
7) Updating the parameters during the connection: The
BLE protocol provides possibilities to update the parameters
used by the channel selection algorithm. A Master is generally
able to manage multiple connections simultaneously, and may
need to modify a connection in order to optimise the following
of multiple connections. It may also consider a given channel
noisy due to high frame loss rate during transmission on that
channel and may choose to blacklist it (i.e. mark it as unused).
The Link Layer provides two main control frames, CON-
NECT UPDATE IND and CHANNEL MAP IND, to update
the Hop Interval and the Channel Map respectively.
These frames include the new value of the ﬁeld to update,
and a two bytes ﬁeld named instant. When the Slave receives
one, it starts the corresponding procedure, and waits for the
time when instant equals to connection event count. Then:
• In the case of a connection update, a transmit window
similar to the one in the initiation of the connection
is computed from the WinOffset and WinSize values of
the CONNECT UPDATE IND frame. The new interval
is then applied to the next connection events, as shown
in Figure 2.
• In the case of a channel map update, the new channel
map is used for next connection events.
8) Slave latency: The slave latency ﬁeld (cf. Table II), that
is initially proposed by the Master in the CONNECT REQ
packet and can be updated in a connection update procedure,
allows the Slave to avoid entering the listening mode at every
connection event in order to decrease its energy consumption.
IV. ADVERSARY MODEL AND ATTACK OVERVIEW
This section presents a novel type of attack targeting BLE
protocol, allowing the injection of arbitrary frames into an es-
tablished connection. As seen in Section III, the BLE protocol
provides a connected mode, allowing the involved devices to
communicate only at some speciﬁc time, making injection-
based attacks difﬁcult to perform by design. According to the
speciﬁcation [5], one of the involved devices can expand the
receiving window to compensate clock inaccuracy. However,
this also opens the possibility for an attacker to abuse this
feature by performing a race condition attack (see Figure 3).
We focused our work on analysing the feasibility of such
an injection, and explored techniques allowing to solve the
following technical challenges:
• (C1) identify when a malicious frame could be in-
jected,
• (C2)
investigate how to inject a malicious frame
without altering the connection state consistency,
• (C3) check if the attack is successful or not.
From an offensive perspective,
the attack presented in
this paper has a signiﬁcant impact: indeed, although several
attacks targeting BLE security have already been investigated
in several studies, none of them have made it possible to
interfere with an established connection without breaking the
communication, at least for one of the concerned devices. The
results presented in this paper show that such an attack is
possible and can then be used to perform a wide set of critical
offensive scenarios, including an illegitimate use of victim
device features and hijacking attacks. We believe that this new
offensive capability may consequently impact the availability,
conﬁdentiality and integrity of any BLE communication. In-
deed, the vulnerability presented in this paper is related to
the receiving window expansion described in the protocol
speciﬁcation, so any BLE device is potentially vulnerable,
independently of its stack implementation. The threat is all
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:25:32 UTC from IEEE Xplore.  Restrictions apply. 
391
Connection event #(instant-1)
HopIntervalold x 1250μs
doffset=WinOffset x 1250μs
Transmit window
dsize=WinSize x 1250μs
HopIntervalnew x 1250μs
HopIntervalnew x 1250μs
Connection event #instant Connection event #instant+1
M
S
M
S
M
S
tinstant-1
tinstant
tinstant+doffset
Fig. 2: Connection update procedure
Receive
window
Legitimate
Master
Legitimate
Slave
Malicious
Master
Legitimate
LLL
Master
Legitimate
Slave
Fig. 3: Attack overview
the more serious as the attack is straightforward on common
BLE chips and can be performed as soon as an attacker is
within radio range of the targeted connection. The attack is
also compatible with all versions of BLE, from 4.0 to 5.2.
The adversary model considered is as follows:
• the attacker must be within the radio range of the target,
• the attacker uses a standard BLE 4.0 or BLE 5.0 device,
• the attacker is capable of passively snifﬁng the trafﬁc,
and actively crafting and transmitting spoofed packets on
BLE channels,
• the attacker does not need to exploit any BLE vulnera-
bility on the target devices.
As far as encrypted communications are concerned, the
vulnerability being related to the design of the BLE Link
Layer, it is independent of the security mechanisms provided
by the protocol. Therefore, exploiting the race condition to
inject a frame in an encrypted connection remains technically
possible. Indeed, even if the attacker cannot obtain the Long
Term Key used for encryption by some other mean, he can
still inject an invalid packet, leading to a denial of service. As
a consequence, enabling the security mechanisms provided by
BLE limits the impact of the attack but the vulnerability itself
(race condition allowing to inject a frame) remains, with at
least an impact on availability.
V. INJECTABLE: INJECTING ARBITRARY FRAMES IN AN
ESTABLISHED CONNECTION
In this section, we present the InjectaBLE attack, allowing to
inject arbitrary frames in an established connection. Perform-
ing such an attack requires to identify a speciﬁc time when a
frame can be successfully injected by the attacker, called the
injection point. Subsections V-A and V-B describe the speciﬁc
features of the Link Layer that make it possible to ﬁnd such an
injection point (challenge C1 of Section IV). Subsection V-C
describes how to inject the well-formed frame without altering
the consistency of the connection state (challenge C2) and
Subsection V-D describes how to check whether the injection
is successful or not (challenge C3).
A. Clock (in)accuracy
As mentioned earlier, the start of transmission of a Master
frame in a given connection event is used as a time reference,
named anchor point. Theoretically, given an anchor point tn,
the next anchor point should occur at tn+1 according to the
formula 3.
tn+1 = tn + dconnInterval
(3)
An attacker cannot inject a frame at this speciﬁc time, as
this frame would collide with the legitimate Master’s packet.
However, the legitimate devices involved in an established
connection use multiple timers based on a clock named Sleep
Clock. As this clock can introduce a drift in time, the Slave
cannot assume that its Sleep Clock is perfectly synchronised
with the Master’s and should listen for an extra time before
and after the timing estimated from the anchor point.
B. Window widening
The speciﬁcation introduces a concept named window
widening, which consists in extending the listening time of a
given device to compensate clocks inaccuracies. In the speciﬁc
case of Slave’s Link Layer receiving the next connection event,
the window widening w is computed using formula 4.
w =
1000000
SCAM + SCAS
× (tnextAnchor − tlastAnchor) + 32μs
(4)
• SCAM : sleep clock accuracy of Master’s LL (in ppm),
• SCAS : sleep clock accuracy of Slave’s LL (in ppm),
• tnextAnchor : predicted next anchor point time (in μs),
• tlastAnchor : last observed anchor point time (in μs).
If the Slave transmits a frame for every connection event
(i.e. slave latency equals to 0), the formula can be rewritten:
w =
SCAM + SCAS
1000000
× dconnInterval + 32μs
(5)
392
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:25:32 UTC from IEEE Xplore.  Restrictions apply. 
A Slave latency greater than 0 increases the interval between
the last observed anchor point and the predicted next anchor
point, resulting in a larger window. In that case, equation 5
can be considered as the minimal window widening.
As a consequence, given a predicted anchor point tn+1, the
Slave will accept the Master’s packet initiating the connection
event if it is transmitted during the receive window from tn+1−
w to tn+1 + w, as illustrated in ﬁgure 4.
HopInterval x 1250μs
Receive window
w
w
M
S
M
S
tn
tn+1-w
tn+1
tn+1+w
Fig. 4: Window widening for a Slave receiving the next
connection event
C. Injecting an arbitrary packet