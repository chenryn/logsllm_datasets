  * Chromium
  * CocCoc
  * Comodo Dragon
  * Cyberfox
  * Elements Browser
  * Epic Privacy
  * Google Chrome
  * IceCat
  * Internet Explorer
  * K-Meleon
  * Kometa
  * Maxthon5
  * Microsoft Edge
  * Mozilla Firefox
  * Mustang Browser
  * Nichrome
  * Opera
  * Orbitum
  * Pale Moon
  * QIP Surf
  * QQ Browser
  * Sputnik
  * Suhba Browser
  * Tor Browser
  * Torch
  * URAN
  * Vivaldi
  * Waterfox
如果浏览器是基于chromium引擎，那么需要重视起来。
## Messengers/Mailer
在本文中，我不会介绍这些技术如何实现，因为在我以前的[博文](https://fumik0.com/2018/10/15/predator-the-thief-in-depth-analysis-v2-3-5/)中曾对相关技术进行过说明（特别是Telegram部分）。
  * Bat!
  * Pidgin
  * Telegram
  * Thunderbird
## 钱包
  * Anoncoin
  * BBQCoin
  * Bitcoin
  * DashCore
  * DevCoin
  * DigitalCoin
  * Electron Cash
  * ElectrumLTC
  * Ethereum
  * Exodus
  * FlorinCoin
  * FrancoCoin
  * JAXX
  * Litecoin
  * MultiDoge
  * TerraCoin
  * YACoin
  * Zcash
当然，如果攻击者指定了其他文件夹，对受害者机器特定区域进行搜索，那么这个名单会持续增加下去。
## Grabber
介绍到现在，Grabber可以说是Vidar功能最复杂的模块，也是它在实现上与Arkei区别最大的部分。
首先，它会根据已下载的配置文件来选择是否启用Grabber模块。如果该选项被激活，那它将生成文件夹路径字符串并设置 **func_grabber**
何时被调用。
在分析到 **func_grabber** 时，现实比我想象的残酷一些：
看到这个，我的内心是拒绝的。我的脑海中已经大概想到了它是如何分配内存的。然而摆在我面前的的是所有恶意软件分析师都想挑战（或者根本不想遇到）的融合了多种技巧的恶意模块：
  * 糟糕的情况突如其来
  * 一个函数中又调用了另一个函数（就行俄罗斯套娃一样）
  * 调用API
  * 等等…
但实际上，它并没有预想中那么复杂。接下来我会举一个例子进行说明。
在下面的示例中，如果从C2下载的配置文件中存在“％APPDATA％”字符串。它将跳转进入该功能，并进行一系列验证，直到进入最重要的
**func_VidarSearchFile** 函数。
在不同的场景下，几乎都会执行以上过程。
以下是Grabber模块可能用到的目录：
  * %ALL_DRIVES% ([GetDriveTypeA](https://docs.microsoft.com/en-us/windows/desktop/api/fileapi/nf-fileapi-getdrivetypea) Necessary)
  * %APPDATA%
  * %C%
  * %D%
  * %DESKTOP%
  * %DOCUMENTS%
  * %DRIVE_FIXED%
  * %DRIVE_REMOVABLE%
  * %LOCALAPPDATA%
  * %USERPROFILE%
## 屏幕截图
屏幕截图功能的实现很简单：
  * 首先调用[GdiplusStartup](https://docs.microsoft.com/en-us/windows/desktop/api/gdiplusinit/nf-gdiplusinit-gdiplusstartup)函数来初始化Windows GDI +
  * 接着调用[GetSystemMetrics](https://docs.microsoft.com/en-us/windows/desktop/api/winuser/nf-winuser-getsystemmetrics)来代替GetDeviceCaps ，使用SM_CYSCREEN (1) 和SM_CXSCREEN (0)来获取屏幕高度的宽度。  
然后使用一个DC对象来创建生成图像所需的兼容位图，通过选择兼容memory DC并使用Bit Block API函数来完成数据传输。完成这些操作后，将进入
**func_GdipSaveImageToFile** 函数。
最后从生成的位图中将数据复制到一个缓冲区中，在缓冲区中生成生成屏幕截图。
## 信息日志
在这部分中，我只对如何生成日志进行了分析，其他的是一些相关API的调用，通过设置断点跟踪，花一些时间，你也可以轻松的进行分析。
首先，它会说明这是哪个版本的Vidar。
如果你没有在日志文件中看到“Vidar”字符串，这意味着你分析的是之前的版本。
获取操作系统平台及版本时采用了很经典的组合，首先，使用[RegOpenKeyExA](https://docs.microsoft.com/en-us/windows/desktop/api/winreg/nf-winreg-regopenkeyexa)来获取注册表项的值。
    HKEY_LOCAL_MACHINESOFTWAREMicrosoftWindowsNTCurrentVersionProductName
接下来，会对运行的Windows环境为32位还是64位进行检测，该软件会通过[IsWow64Process](https://docs.microsoft.com/en-us/windows/desktop/api/wow64apiset/nf-wow64apiset-iswow64process)来检测自身是否运行在[WOW64](https://docs.microsoft.com/en-us/windows/desktop/api/wow64apiset/nf-wow64apiset-iswow64process) 下。
为了获得当前用户所使用屏幕的分辨率。将通过调用[CreateDCA](https://docs.microsoft.com/en-us/windows/desktop/api/wingdi/nf-wingdi-createdca)来为“Display”创建设备环境，并使用[GetDeviceCaps](https://docs.microsoft.com/en-us/windows/desktop/api/wingdi/nf-wingdi-getdevicecaps)来获取屏幕的长度和宽度。
这部分的源代码如下：
    HDC hDC = CreateDCA("DISPLAY", NULL, NULL, NULL);  
    int width = GetDeviceCaps(hDC, HORZRES); // HORZRES = 0x8
    int height = GetDeviceCaps(hDC, VERTRES); // VERTRES = 0x0A
继续进行分析,得到：
在下一部分，将继续针对Vidar的通信、Loader、Killing、管理面板等模块进行介绍，敬请期待…