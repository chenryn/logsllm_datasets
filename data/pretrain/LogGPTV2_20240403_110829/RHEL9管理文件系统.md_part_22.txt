-   存储固件、设备驱动程序、软件堆栈或者文件系统本身的错误
-   导致文件系统部分内容被文件系统之外的内容覆盖的问题
:::
当 XFS
检测到文件系统或文件系统元数据中的损坏时，它可以关闭文件系统，并在系统日志中报告该事件。请注意，如果损坏发生在托管
`/var`{.literal} 目录的文件系统上，重启后这些日志将不可用。
::: example
[]{#checking-and-repairing-a-file-system__managing-file-systems.html#idm139895600437824}
**例 27.1. 系统日志条目报告 XFS 崩溃**
::: example-contents
``` screen
# dmesg --notime | tail -15
XFS (loop0): Mounting V5 Filesystem
XFS (loop0): Metadata CRC error detected at xfs_agi_read_verify+0xcb/0xf0 [xfs], xfs_agi block 0x2
XFS (loop0): Unmount and run xfs_repair
XFS (loop0): First 128 bytes of corrupted metadata buffer:
00000000027b3b56: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
000000005f9abc7a: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
000000005b0aef35: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00000000da9d2ded: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
000000001e265b07: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
000000006a40df69: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
000000000b272907: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00000000e484aac5: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
XFS (loop0): metadata I/O error in "xfs_trans_read_buf_map" at daddr 0x2 len 1 error 74
XFS (loop0): xfs_imap_lookup: xfs_ialloc_read_agi() returned error -117, agno 0
XFS (loop0): Failed to read root inode 0x80, error 11
```
:::
:::
当尝试访问损坏的 XFS 文件系统时，用户空间工具通常会报告
[*输入/输出错误*]{.emphasis} 消息。挂载带有损坏日志的 XFS
文件系统会导致挂载失败，并出现以下错误消息：
``` screen
mount: /mount-point: mount(2) system call failed: Structure needs cleaning.
```
您必须手动使用 `xfs_repair`{.literal} 工具来修复损坏。
::: itemizedlist
**其他资源**
-   `xfs_repair(8)`{.literal} 手册页。
:::
:::
::: section
::: titlepage
# []{#checking-and-repairing-a-file-system__managing-file-systems.html#checking-an-xfs-file-system-with-xfs-repair_checking-and-repairing-a-file-system}使用 `xfs_repair`{.literal} 检查 XFS 文件系统 {.title}
:::
这个过程使用 `xfs_repair`{.literal} 工具对 XFS
文件系统执行只读检查。您必须手动使用 `xfs_repair`{.literal}
工具来修复任何损坏。与其他文件系统修复工具不同，`xfs_repair`{.literal}
不会在引导时运行，即使 XFS
文件系统没有被完全卸载。在未完全卸载的情况下，XFS
会在挂载时重播日志，从而确保文件系统一致；`xfs_repair`{.literal}
不能在不先重新挂载脏日志的情况下修复带有脏日志的 XFS 文件系统。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
虽然 `xfsprogs`{.literal} 软件包中存在 `fsck.xfs`{.literal}
二进制文件，但这只是为了满足在启动时查找 `fsck.file`{.literal}
系统二进制的 `initscripts`{.literal}。`fsck.xfs`{.literal} 使用退出代码
0 会立即退出。
:::
::: orderedlist
**流程**
1.  通过挂载和卸载文件系统重新显示日志：
    ``` screen
    # mount file-system
    # umount file-system
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    如果挂载失败，并带有结构需要清理的错误，则日志已损坏，且无法重播。试运行应发现并报告更多有关磁盘损坏的信息。
    :::
2.  使用 `xfs_repair`{.literal}
    工具执行试运行来检查文件系统。打印任何错误并指示将要采取的操作，而不修改文件系统。
    ``` screen
    # xfs_repair -n block-device
    ```
3.  挂载文件系统：
    ``` screen
    # mount file-system
    ```
:::
::: itemizedlist
**其他资源**
-   `xfs_repair(8)`{.literal} 手册页。
-   `xfs_metadump(8)`{.literal} 手册页。
:::
:::
::: section
::: titlepage
# []{#checking-and-repairing-a-file-system__managing-file-systems.html#proc_repairing-an-xfs-file-system-with-xfs_repair_checking-and-repairing-a-file-system}使用 xfs_repair 修复 XFS 文件系统 {.title}
:::
这个过程使用 `xfs_repair`{.literal} 工具修复损坏的 XFS 文件系统。
::: orderedlist
**流程**
1.  使用 `xfs_metadump`{.literal}
    工具在修复前为诊断或测试目的创建元数据镜像。如果损坏是由软件 bug
    导致的，则预修复文件系统元数据映像对于支持调查非常有用。预修复镜像中出现的损坏模式有助于分析根本原因。
    ::: itemizedlist
    -   使用 `xfs_metadump`{.literal} 调试工具将 XFS
        文件系统中的元数据复制到文件。如果需要发送大的
        `metadump`{.literal} 文件来支持，可使用标准压缩工具来压缩生成的
        `metadump`{.literal} 文件，以减少文件大小。
        ``` screen
        # xfs_metadump block-device metadump-file
        ```
    :::
2.  通过重新挂载文件系统来重新显示日志：
    ``` screen
    # mount file-system
    # umount file-system
    ```
3.  使用 `xfs_repair`{.literal} 工具来修复卸载的文件系统：
    ::: itemizedlist
    -   如果挂载成功，则不需要额外的选项：
        ``` screen
        # xfs_repair block-device
        ```
    -   如果挂载失败，带有 [*Structure needs cleaning*]{.emphasis}
        错误，日志会破坏且无法重复显示。使用 `-L`{.literal}
        选项（[*强制日志归零*]{.emphasis}）来清除日志：
        ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
        ### 警告 {.title}
        该命令会导致崩溃时正在进行的所有元数据更新丢失，这可能会造成严重的文件系统损坏和数据丢失。只有在无法重播日志时，才应将其作为最后的手段。
        :::
        ``` screen
        # xfs_repair -L block-device
        ```
    :::
4.  挂载文件系统：
    ``` screen
    # mount file-system
    ```
:::
::: itemizedlist
**其他资源**
-   `xfs_repair(8)`{.literal} 手册页。
:::
:::
::: section
::: titlepage
# []{#checking-and-repairing-a-file-system__managing-file-systems.html#error-handling-mechanisms-in-ext2-ext3-and-ext4_checking-and-repairing-a-file-system}ext2、ext3 和 ext4 中的处理机制出错 {.title}
:::
ext2、ext3 和 ext4 文件系统使用 `e2fsck`{.literal}
工具来执行文件系统检查和修复。文件名
`fsck.ext2`{.literal}、`fsck.ext3`{.literal} 和 `fsck.ext4`{.literal} 是
`e2fsck`{.literal}
工具的硬链接。这些二进制文件在引导时自动运行，其行为因正在检查的文件系统和文件系统的状态而异。
对于不是元数据日志记录文件系统的 ext2 和没有日志的 ext4
文件系统，会调用完整的文件系统检查和修复。
对于带有元数据日志的 ext3 和 ext4
文件系统，日志将在用户空间中重播，从实用工具退出。这是默认操作，因为日志重播确保崩溃后文件系统的一致性。
如果这些文件系统在挂载时遇到元数据不一致的情况，它们会在文件系统超级块中记录此事实。如果
`e2fsck`{.literal} 发现文件系统标记有这样的错误，`e2fsck`{.literal}
会在重播日志（如果存在）后执行全面的检查。
::: itemizedlist
**其他资源**
-   `fsck(8)`{.literal} 手册页。
-   `e2fsck(8)`{.literal} 手册页。
:::
:::
::: section
::: titlepage
# []{#checking-and-repairing-a-file-system__managing-file-systems.html#checking-an-ext2-ext3-or-ext4-file-system-with-e2fsck_checking-and-repairing-a-file-system}使用 e2fsck 检查 ext2、ext3 或者 ext4 文件系统 {.title}
:::
这个流程使用 `e2fsck`{.literal} 工具检查 ext2、ext3 或 ext4 文件系统。
::: orderedlist
**流程**
1.  通过重新挂载文件系统来重新显示日志：
    ``` screen
    # mount file-system
    # umount file-system
    ```
2.  执行空运行检查文件系统。
    ``` screen
    # e2fsck -n block-device
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    打印任何错误并指示将要采取的操作，而不修改文件系统。稍后一致性检查阶段可能会打印额外的错误，因为在修复模式下运行时，它会发现可能在早期阶段已经修复了的不一致问题。
    :::
:::
::: itemizedlist
**其他资源**
-   `e2image(8)`{.literal} 手册页。
-   `e2fsck(8)`{.literal} 手册页。
:::
:::
::: section
::: titlepage
# []{#checking-and-repairing-a-file-system__managing-file-systems.html#repairing-an-ext2-ext3-or-ext4-file-system-with-e2fsck_checking-and-repairing-a-file-system}使用 e2fsck 修复 ext2、ext3 或者 ext4 文件系统 {.title}
:::
这个流程使用 `e2fsck`{.literal} 工具修复损坏的 ext2、ext3 或 ext4
文件系统。
::: orderedlist
**流程**
1.  保存文件系统镜像以进行支持调查。如果损坏是由软件 bug
    导致的，则预修复文件系统元数据映像对于支持调查非常有用。预修复镜像中出现的损坏模式有助于分析根本原因。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    严重损坏的文件系统可能会导致元数据镜像创建出现问题。
    :::
    ::: itemizedlist
    -   如果您要为测试目的创建镜像，请使用 `-r`{.literal}
        选项创建与文件系统本身相同的稀疏文件。`e2fsck`{.literal}
        可以在生成的文件中直接操作。
        ``` screen
        # e2image -r block-device image-file
        ```
    -   如果您要创建要存档或提供用于诊断的镜像，请使用 `-Q`{.literal}
        选项，该选项可创建适合于传输的更紧凑的文件格式。
        ``` screen
        # e2image -Q block-device image-file
        ```
    :::
2.  通过重新挂载文件系统来重新显示日志：
    ``` screen
    # mount file-system
    # umount file-system
    ```
3.  自动修复文件系统。如果需要用户干预，`e2fsck`{.literal}
    指明其输出中未修复的问题，并在退出代码中反映此状态。
    ``` screen
    # e2fsck -p block-device
    ```
    ::: itemizedlist
    **其他资源**
    -   `e2image(8)`{.literal} 手册页。
    -   `e2fsck(8)`{.literal} 手册页。
    :::
:::
:::
:::
[]{#assembly_mounting-file-systems_managing-file-systems.html}
::: chapter
::: titlepage
# []{#assembly_mounting-file-systems_managing-file-systems.html#assembly_mounting-file-systems_managing-file-systems}第 28 章 挂载文件系统 {.title}
:::
作为系统管理员，您可以在系统上挂载文件系统以访问其上的数据。
::: section
::: titlepage
# []{#assembly_mounting-file-systems_managing-file-systems.html#the-linux-mount-mechanism_assembly_mounting-file-systems}Linux 挂载机制 {.title}
:::
这部分论述了在 Linux 中挂载文件系统的基本概念。
在 Linux、UNIX 和类似的操作系统中，不同分区和可移动设备（例如，CD、DVD
或者 USB
闪存）上的文件系统可以附加到目录树中的某个点（挂载点），然后再次分离。虽然文件系统挂载在目录上，但无法访问该目录的原始内容。
请注意，Linux 不会阻止您将文件系统挂载到已附加了文件系统的目录。
挂载时，您可以通过以下方法识别设备：
::: itemizedlist
-   通用唯一标识符(UUID)：例如，`UUID=34795a28-ca6d-4fd8-a347-73671d0c19cb`{.literal}
-   卷标签：例如，`LABEL=home`{.literal}
-   到非持久性块设备的完整路径：例如，`/dev/sda3`{.literal}
:::
当您使用 `mount`{.literal}
命令挂载文件系统时，如果没有提供所有必需的信息，即设备名称、目标目录或文件系统类型，`mount`{.literal}
工具会读取 `/etc/fstab`{.literal}
文件的内容，以检查其中是否列出了给定的文件系统。`/etc/fstab`{.literal}
文件包含设备名称列表、所选文件系统要挂载的目录，以及文件系统类型和挂载选项。因此，当挂载在
`/etc/fstab`{.literal} 中指定的文件系统时，以下命令语法就足够了：
::: itemizedlist
-   使用挂载点挂载：
    ``` screen
    # mount directory
    ```
-   使用块设备挂载：
    ``` screen
    # mount device
    ```
:::
::: itemizedlist
**其他资源**
-   `mount(8)`{.literal} 手册页