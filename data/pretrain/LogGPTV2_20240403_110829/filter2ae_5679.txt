# 针对Office宏病毒的高级检测

## 译文声明
本文为翻译文章，具体内容及含义以原文为准。译文仅供参考。

## 前言
在之前的文章《威胁狩猎的最佳实践》中，我们曾提到一个针对钓鱼邮件的检测场景。本文将详细介绍当时使用的技巧。根据前文提到的威胁狩猎流程，我们的假设是：
> 攻击者可能发送带有恶意附件的钓鱼邮件，诱导受害者点击从而获取对方的系统控制权限。

我们将借助 [Atomic](https://github.com/redcanaryco/atomic-red-team) 工具重现攻击过程，并详细分析其行为特征，最终输出检测规则或仪表板作为本次威胁狩猎活动的成果。

**注意：这里仅提供一种检测思路，所有测试均在实验环境下完成，并不代表实际工作效果。**

## 分析取证
在进行数字取证时，我通常采用漏斗状思维模型，逐步缩小观测范围，聚焦目标行为特征。以下是具体步骤：

### 采集全量日志
首先，我们需要确保 Office 办公软件的所有行为都能被记录下来。为此，我们使用 Sysmon 工具及其配置文件来实现这一目标。

1. **创建 `OfficeWatch.xml` 配置文件**：
   该文件包含 Office 软件相关进程、文件、网络、DLL 加载和注册表等日志的全量采集配置。
   ```xml
   <Sysmon schemaversion="4.30">
     <HashAlgorithms>md5</HashAlgorithms>
     <EventFiltering>
       <ProcessCreate onmatch="include">
         <Image condition="contains">WINWORD.EXE</Image>
         <Image condition="contains">EXCEL.EXE</Image>
       </ProcessCreate>
       <!-- 其他配置项 -->
     </EventFiltering>
   </Sysmon>
   ```

2. **建立遥测数据白名单**：
   - 对于正常的通信（如与微软服务器的通信）和加载的 DLL 文件，建立白名单。
   - 特别关注这些 DLL 的签名状态 (SignatureStatus)。

3. **创建 `OfficeShush.xml` 配置文件**：
   该文件用于过滤 Office 软件的正常行为，帮助我们更专注于异常行为。

### 过滤正常行为
`OfficeShush.xml` 文件的迭代过程实际上是对 Office 软件相关进程行为基线的建设。这一步需要我们在实验环境中进行全面考量，并在生产环境中逐步优化。

- **引入丰富的恶意样本**：
  例如，使用 [T1204.002](https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1204.002/T1204.002.md) 恶意样本，观察其在过滤正常行为后的特征表现：
  - 创建一些脚本文件
  - 执行异常命令和父子进程关系
  - 加载特定行为所需的 DLL（如宏、XMLDOM、WMI 等）

### 聚焦可疑特征
通过对各类恶意样本的深入分析，我们可以梳理出常见的攻击行为特征：

- 可疑文件的落地（释放脚本或可执行文件）
- 修改敏感注册表位置
- 加载可疑 DLL 文件（如 COM、WMI 或 .NET 功能所必需的 DLL 文件）
- 发起可疑的网络请求（与云服务商或奇怪的域名通信）
- 异常的父子进程关系（如 Office 软件调用 PowerShell 或 cmd 命令行）

整理好这些特征后，可以生成新的日志采集配置文件，或者给相应的遥测数据打上标签，甚至直接转换成检测规则。

### Risk-Based Alerting (RBA)
在某些情况下，单一的安全事件可能被视为弱信号。通过关联多个弱信号，我们可以生成一条高置信度的告警。这种思路被称为基于风险的告警 (RBA)。

- **示例**：在一段时间内，如果有两条及以上针对同一主机的检测规则触发，可以组合生成一条告警。

## 威胁分析
### 行为检测
根据前面整理出的 Office 宏病毒相关可疑活动的行为特征，编写简单的规则并使用 Splunk 给符合特定行为的 Sysmon 日志打上不同的标签或进行危害评分，便于后续关联分析。

### 风险判定
对于 Office 邮件钓鱼这类频发场景，可以通过算法提高告警置信度。以下演示中，我们会为不同的行为指定风险评分，并将超过特定阈值的一系列行为视为高危操作。

- **实验样本**：从 ANYRUN 获取样本，并在实验环境中进行检测。
- **检测结果**：识别出关键步骤，如 `background.dll` 文件的落地和通过 COM 对象执行计划任务。

## 小结
本文灵感来源于 @Anton，由于篇幅限制，省略了部分细节。强烈建议感兴趣的同学观看原视频，并参考 @Alex 的文章了解实验过程中使用的一些检测技巧。

感谢阅读！