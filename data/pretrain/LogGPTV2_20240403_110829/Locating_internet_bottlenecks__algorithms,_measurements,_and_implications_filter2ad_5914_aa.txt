title:Locating internet bottlenecks: algorithms, measurements, and implications
author:Ningning Hu and
Erran L. Li and
Zhuoqing Morley Mao and
Peter Steenkiste and
Jia Wang
Locating Internet Bottlenecks:
Algorithms, Measurements, and Implications
Ningning Hu
Carnegie Mellon University
PI:EMAIL
Li (Erran) Li
Zhuoqing Morley Mao
University of Michigan
PI:EMAIL PI:EMAIL
Bell Laboratories
Peter Steenkiste
Carnegie Mellon University
PI:EMAIL
Jia Wang
AT&T Labs – Research
PI:EMAIL
ABSTRACT
The ability to locate network bottlenecks along end-to-end paths
on the Internet is of great interest to both network operators and
researchers. For example, knowing where bottleneck links are, net-
work operators can apply trafﬁc engineering either at the interdo-
main or intradomain level to improve routing. Existing tools ei-
ther fail to identify the location of bottlenecks, or generate a large
amount of probing packets. In addition, they often require access
to both end points. In this paper we present Pathneck, a tool that
allows end users to efﬁciently and accurately locate the bottleneck
link on an Internet path. Pathneck is based on a novel probing tech-
nique called Recursive Packet Train (RPT) and does not require ac-
cess to the destination. We evaluate Pathneck using wide area Inter-
net experiments and trace-driven emulation. In addition, we present
the results of an extensive study on bottlenecks in the Internet us-
ing carefully selected, geographically diverse probing sources and
destinations. We found that Pathneck can successfully detect bot-
tlenecks for almost 80% of the Internet paths we probed. We also
report our success in using the bottleneck location and bandwidth
bounds provided by Pathneck to infer bottlenecks and to avoid bot-
tlenecks in multihoming and overlay routing.
Categories and Subject Descriptors
C.2.3 [Computer-Communication Networks]: Network Opera-
tions — Network Monitoring
General Terms
Algorithms, Measurement, Experimentation
Keywords
Active probing, packet train, bottleneck location, available band-
width
1.
INTRODUCTION
The ability to locate network bottlenecks along Internet paths
is very useful for both end users and Internet Service Providers
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’04, Aug. 30–Sept. 3, 2004, Portland, Oregon, USA.
Copyright 2004 ACM 1-58113-862-8/04/0008 ...$5.00.
(ISPs). End users can use it to estimate the performance of the net-
work path to a given destination, while an ISP can use it to quickly
locate network problems, or to guide trafﬁc engineering either at
the interdomain or intradomain level. Unfortunately, it is very hard
to identify the location of bottlenecks unless one has access to link
load information for all the relevant links. This is a problem, espe-
cially for regular users, because the design of the Internet does not
provide explicit support for end users to gain information about the
network internals. Existing active bandwidth probing tools also fall
short. Typically they focus on end-to-end performance [20, 18, 26,
30, 36], while providing no location information for the bottleneck.
Some tools do measure hop-by-hop performance [19, 10], but their
measurement overhead is often very high.
In this paper, we present an active probing tool – Pathneck –
based on a novel probing technique called Recursive Packet Train
(RPT). It allows end users to efﬁciently and accurately locate bot-
tleneck links on the Internet. The key idea is to combine measure-
ment packets and load packets in a single probing packet train.
Load packets emulate the behavior of regular data trafﬁc while
measurement packets trigger router responses to obtain the mea-
surements. RPT relies on the fact that load packets interleave with
competing trafﬁc on the links along the path, thus changing the
length of the packet train. By measuring the changes using the mea-
surement packets, the position of congested links can be inferred.
Two important properties of RPT are that it has low overhead and
does not require access to the destination.
Equipped with Pathneck, we conducted extensive measurements
on the Internet among carefully selected, geographically diverse
probing sources and destinations to study the diversity and stability
of bottlenecks on the Internet. We found that, contrary to the com-
mon assumption that most bottlenecks are edge or peering links,
for certain probing sources, up to 40% of the bottleneck locations
are within an AS. In terms of stability, we found that inter-AS bot-
tlenecks are more stable than intra-AS bottlenecks, while AS-level
bottlenecks are more stable than router-level bottlenecks. We also
show how we can use bottleneck location information and rough
bounds for the per-link available bandwidth to successfully infer
the bottleneck locations for 54% of the paths for which we have
enough measurement data. Finally, using Pathneck results from a
diverse set of probing sources to randomly selected destinations,
we found that over half of all the overlay routing attempts improve
bottleneck available bandwidth. The utility of multihoming in im-
proving available bandwidth is over 78%.
This paper is organized as follows. We ﬁrst describe the Path-
neck design in Section 2 and then validate the tool in Section 3.
Session 2: Inference of Network Properties Using Pathneck, we probed a large number of Internet destinations
to obtain several different data sets. We use this data to study the
properties of Internet bottlenecks in Section 4, to infer bottleneck
locations on the Internet in Section 5, and to study the implications
for overlay routing and multihoming in Section 6. We discuss re-
lated work in Section 7. In Section 8 we summarize and discuss
future work.
2. DESIGN OF PATHNECK
Our goal is to develop a light-weight, single-end-control bottle-
neck detection tool. In this section, we ﬁrst provide some back-
ground on measuring available bandwidth and then describe the
concept of Recursive Packet Trains and the algorithms used by
Pathneck.
2.1 Measuring Available Bandwidth
In this paper, we deﬁne the bottleneck link of a network path as
the link with the smallest available bandwidth, i.e., the link that
determines the end-to-end throughput on the path. The available
bandwidth in this paper refers to the residual bandwidth, which is
formally deﬁned in [20, 18]. Informally, we deﬁne a choke link as
any link that has a lower available bandwidth than the partial path
from the source to that link. The upstream router for the choke link
is called the choke point or choke router. The formal deﬁnition of
choke link and choke point is as follows. Let us assume an end-
to-end path from source S = R0 to destination D = Rn through
routers R1, R2, ..., Rn−1. Link Li = (Ri, Ri+1) has available
bandwidth Ai(0 ≤ i  g3. A valley point is deﬁned in a similar way with
g1 > g2  0 & i ≤ j.
(cid:2)
opt2[i, j, l] = min{opt[i, k, l1] + opt[k + 1, j, l − l1 − 1] :
i ≤ k  step}
Here LS[i, k, l1] denotes the last step value of the optimal step
function ﬁtting the gap subsequence between i and k with at most
l1 steps, and F S[k + 1, j, l − l1 − 1] denotes the ﬁrst step value of
the optimal step function ﬁtting the gap subsequence between k +1
and j with at most l − l1 − 1 steps.
The algorithm begins with l = 0 and then iteratively improves
the solution by exploring larger values of l. Every time opt2[i, j, l]
is used to assign the value for opt[i, j, l], a new splitting point k is
created. The splitting point is recorded in a set SP [i, j, l], which
is the set of optimal splitting points for the subsequence between
i and j using at most l splitting points. The algorithm returns
SP [0, len − 1, len − 1] as the set of optimal splitting points for
the entire gap sequence. The time complexity of this algorithm is
O(len5), which is acceptable considering the small value of len
on the Internet. Since our goal is to detect the primary choke point,
our implementation only returns the top three choke points with the
largest three steps. If the algorithm does not ﬁnd a valid splitting
point, i.e., SP [0, len−1, len−1] = ∅, it simply returns the source
as the candidate choke point.
2.3.2 Averaging Across Gap Sequences
To ﬁlter out effects caused by bursty trafﬁc on the forward and
reverse paths, Pathneck uses results from multiple probing trains
(e.g., 6 to 10 probing trains) to compute conﬁdence information
for each candidate choke point. To avoid confusion, we will use
the term probing for a single RPT run and the term probing set
for a group of probings (generally 10 probings). The outcome of
Pathneck is the summary result for a probing set.
For the optimal splitting of a gap sequence, let the sequence of
step values be svi(0 ≤ i ≤ M ), where M is the total number of
candidate choke points. The conﬁdence for a candidate choke point
i (1 ≤ i ≤ M ) is computed as
(cid:3)(cid:3)(cid:3)(cid:3) 1
svi
confi =
(cid:3)(cid:3)(cid:3)(cid:3) /
− 1
svi−1
1
svi−1
Intuitively,
the conﬁdence denotes the percentage of available
bandwidth change implied by the gap value change. For the special
case where the source is returned as the candidate choke point, we
set its conﬁdence value to 1.
Next, for each candidate choke point in the probing set we cal-
culate d rate as the frequency with which the candidate choke
point appears in the probing set with conf ≥ 0.1. Finally, we
select those choke points with d rate ≥ 0.5. Therefore, the ﬁnal
choke points for a path are the candidates that appear with high
conﬁdence in at least half of the probings in the probing set. In
Section 3.4, we quantify the sensitivity of Pathneck to these para-
meters.
2.3.3 Ranking Choke Points
For each path, we rank the choke points based on their average
gap value in the probing set. The packet train transmission rate R
is R = ts/g, where ts is the total size for all the packets in the
train and g is the gap value. That is, the larger the gap value, the
more the packet train was stretched out by the link, suggesting a
lower available bandwidth on the corresponding link. As a result,
we identify the choke point with the largest gap value as the bot-
tleneck of the path. Note that since we cannot control the packet
train structure at each hop, the RPT does not actually measure the
available bandwidth on each link, so in some cases, Pathneck could
select the wrong choke point as the bottleneck. For example, on a
path where the “true” bottleneck is early in the path, the rate of the
packet train leaving the bottleneck can be higher than the available