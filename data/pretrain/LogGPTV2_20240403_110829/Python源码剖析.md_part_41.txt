250
和主ree对象（对应co_freevars）。到这里_localsplus的所有秘密才完全暴露了出来，
兄弟，这片内存是属于四个家伙的：运行时栈、局部变量、ce11对象（对应cocellvars）
就已经泄漏了天机，看下面这行代码：
f_localsplus，这样一说，是不是有些隐隐约约地猜到了呢？其实在pyFrame_New中，
中使用了这个符号：同理，与函数inner_func对应的PyCodeobject对象中的
的co_cellvars就应该包含字符串“value”因为其嵌套作用域（inner_func的作用域）
对应，一个与函数inner_func对应，那么，与get_func对应的rycodeobject对象中
extras = code->oo_stacksize + code->co nlocals + ncelis + mfrees;
show_value(
show_value
第11章Python虚拟机中的函数机制
extras正是f_localspius指向的那片内存的大小，这里已经清清楚楚地说明了，，
很显然，closure.py会编译出3个PyCodeobject，其中有两个，一个与函数get_func
return inner_fune
definner_func()
value="inner"
在pyFrameobject对象中，也有一个属性与闭包的实现相关，这个属性就是
printvalue
深度探索动态语言核心技术
get_func()
"
图11-23inner_func对应的PyCodeObject
Kcellvars:
cfreevars
/consts
图11-22
consts>
get_func对应的PyCodeObject
---
## Page 281
11.6.2
Object是个大包嘛。这个属性，在下一节，我们就可以看到它的真身了。
首先需要了解一下closure.py编译后的字节码指令序列。
图11-24显示了E_localsplus的布局。
show_value()
def get_
0
[closure.py]
在介绍了实现闭包的一
在PyFunctionObject中，还有一个与闭包实现相关的属性。当然，毕竟PyFunction-
retuen
def
value
闭包的实现
STORE NAME
STORE_NAMEO
MAKE_FUNCTION
LOAD_CONST
CALL_FUNCTION
LOAD_NAME
GALL
RETURN_VALUE
LOAD_FAST
BUILD_TUPLE
STORE_DEREF
LOADCONST
STORE_FAST
LOAD_CONST
imaer
func（）:
MAKE CLOSURE
LOAD
NOTLONOS
RETURN_VALUE
LOAD_CONST
PRINTINEWLINE
PRINT
LOAD_DEREF
CLOSURE
(get_func)
()
(show_value)
(show_value)
(get_func)
fvaluestack
图11-24
一些基石之后，我们可以开始追踪闭包的具体实现过程了，当然，
(inner_fune)
0
("inner')
f_stacktop
(inner_func)
(co_cellvars))(
Pyobject*c;
PyEval_EvalCodeEx()
深度探索动态语言核心技术
.
found
SEOCAL（co->Co_nlocalsic）
C
获得被嵌套品数共享的符号名
narga,
(None)
goto
PyCell
*argmame;
fail;
Eound:
(NMN
---
## Page 283
始对函数get_func的调用过程。
Python函数机制将对局部变量符号的访问方式从对dict的查找变为对ist的索引是一个
到了新创建的 pyFrameobject对象的f_localsplus中。值得注意的是，这个对象被拷
显了，就是在value=“inner*这个赋值语句执行的时候。随后，这个cel1对象被拷贝
现在还不知道到底是个什么东西，那什么时候才能知道呢？其实在closure.py中已经很明
看看创建pyCellobject对象的代码。
访问_localsplus完成，因而完全不需要再知道cellname了。这个cel1name实际上
道理。在get_func函数执行的过程中，对value这个cel1变量的访问将通过基于索引
对象—PyCellobject。
能为1，对于我们的例子，found一定为0所以，Python虚拟机接下来会创建一个ce11
束关系。只有在内层嵌套函数引用的是外层函数的一个有默认值的参数时，这个标识才可
是被内层嵌套函数引用的符号是否已经与某个值绑定的标识，或者说与某个对象建立了约
我们的例子中，就是获得了一个字符事“value”。这里的found需要解释一下，found
是在处理内层嵌套函数引用外层函数的默认参数时产生的。
中，代码清单11-13的[1]处获得的ce1lname完全被忽略了。实际上，这和前面分析到的
部变量之后的，这完全符合图11-24所示的内存布局。
PyObject *pyCell_New(Pyobject*obj)
[cellobject.c]
[cellobject.h]
PyCel10bject;
在我们的例子中，创建的PyCel1Object对象维护的ob_ref指向了NULL，也就是说，
这个对象非常简单，仅仅维护了一个ob_ref，指向一个Pythong中的对象，我们来
在代码清单11-13中的[1]处，Pyhon虚拟机获得了被内层嵌套函数引用的符号名，在
在处理co_cellvars时，有一个奇怪的地方，在我们创建pyCellobject对象的过程
return(Pyobject)op;
Pyobject
PyCellobject*op:
XINCREr(Obj)
>OD
=(EyCel1object *)Ey0bject_GC_New(PyCellobject,&PyCell_Type);
ret
*ob_ref;
obi
/Content of the cell or NULl when empty */
11.6嵌套函数、闭包与decorator
Python源码剖析
一深度探索动态语言核心技术
253
---
## Page 284
Python源码剖析
254
这个约束塞到PyFunctionobject中。
用这个约束。这一次，又要请PyFunctionobject这个邮递员出马了。在执行closure.py
但是closure的作用是将这个约束进行冻结，使得在嵌套函数inner_func被调用时还能使
PyCel1_Set就是干这个勾当的。
是pyCellobject对象，看样子，是要设置eyCellobject对象中的ob_ref啊，没错，
时栈，然后Python虚拟机开始执行一条对我们而言全新的字节码指令一
[LOAD CLOSURE]
[cellobject.c]
#define PyCell_sET(op,v)
[cellobject.h]
freevars=f->f_localsplus+co->co_nlocals:
[PyEval_EvalFrameEx]
ntPyCell_Set（Pyobject *op,Dyobject*ob）
[STORE DEREF]
第11章Python虚拟机中的函数机制
现在在get_func的环境中我们知道了value符号对应着一个rystringobject对象，
这样一来，f_1ocalsplus就发生了变化了，如图11-25所示。
Py_XDECREF((（PyCe110bject*)oD)=>ob_ref）;
从运行时栈弹出的是ryStringobject对象“inner”，而从_localsplus中取得的
return o;
_XINOREF
图11-25设置cell对象之后的get_func函数的PyFrameObject对象
深度探索动态语言核心技术
SET(Op,
Py_DECREF(W):
PyCell
8
EFreevarslopargl:
(obix
PyFrameObject
POP()
obi:
PUSH(X):
x=freevars[oparg]:
INCREF(X）:
（((PyCeliObjeet)(op)->ob_ref=v)
局部变量
cell
localsplus
ob_ref
Free对象
运行时栈
STORE_DEREF
---
## Page 285
11.6.2.2
中的co_flags里包含了co_NESTED，所以在fast_function中不能通过快速通道的验
个栈帧，并被压入到该栈帧的运行时栈中。
变化，如图11-26所示。
建的PyFunctionobject对象放置到了f_localsplus中，这样_localsplus又发生了
PyCodeobject的绑定。
object对象也压入到运行时栈中，接着以一个“15MAKE_CLOSUREO”指令完成约束与
接着的“9BUILD_mUPLE1”指令将PyCel1object对象打包进一个euple中，显然，这
[MAKE_CLOSURE]
从而只能进入PyEval_EvalCodeEx
closure是在get_func中被创建的，而对closure的使用，则是在inner_func中。在执
在get_func的最后，这个新建的 PyFunctionobject对象作为返回值返回给了上一
表达式“def inner_fune(）”所对应的最后一条“18SToRE_FASTo”指令将新创
使用closure
随后，Python虚拟机通过“12LOAD_coNsT2”指令将inner_fune对应的PyCode
“6LOAD_CLOSIREo”将刚刚放置好的PyCel1object对象取出，并压入运行时栈，
图11-26
PyFrameobject:
设置function对象之后的get func函数的PyFrameObject 对象
function
PUSH(X):
y=POP（0;//获得tuple，其中包含EyCe110bject对象的集合
err
PyFunctiorSetclosure（x，v//绑定约束集合
taplco
局部变量
Python源码剖析
11.6嵌套函数、闭包与decorator
flocalsplus
ob_ref
Free对象
一深度探索动态语言核心技术
运行时栈
255
---
## Page 286
Python源码剖析
256
得符号对应的值。这正是inner_func函数中“printvalue”表达式对应的第一条字节
过程中，当引用外层作用域的符号时，
个PyCel1object对象一个一个放入到f_localsplus中相应的位置。在处理完closure
function中到底传进来了什么。
Pyobject *fast_functlon()
进行处理。
里有引用的外层作用域中的符号名，在PyEval_EvalcodeEx中，就会对这个co_freevars
[ceval.c]
#define PyFunction_GET_CLOsURE（func)
[funcobject.h]
PyObjectPyEval_EvalCodeEx()
[ceval.c]
func_closure)
这里的动作与调用get_func是一致的，所以我们可以猜测，在inner_func调用的
原来传递进来的就是在PyFunctionobject对象中与PyCodeobject对象绑定的装满
其中的closure变量是作为最后一个函数参数传递进来的，我们可以看看在fast-