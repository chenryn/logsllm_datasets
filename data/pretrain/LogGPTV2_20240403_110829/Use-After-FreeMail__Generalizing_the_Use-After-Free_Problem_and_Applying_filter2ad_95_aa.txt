title:Use-After-FreeMail: Generalizing the Use-After-Free Problem and Applying
it to Email Services
author:Daniel Gruss and
Michael Schwarz and
Matthias W&quot;ubbeling and
Simon Guggi and
Timo Malderle and
Stefan More and
Moritz Lipp
Use-After-FreeMail: Generalizing the Use-After-Free Problem
and Applying it to Email Services
Daniel Gruss1, Michael Schwarz1, Matthias Wübbeling2,3, Simon Guggi1, Timo Malderle3,
Stefan More1, Moritz Lipp1
1 Graz University of Technology, Austria
2 Fraunhofer FKIE, Germany
3 University of Bonn, Germany
ABSTRACT
Use-after-free is a type of vulnerability commonly present in soft-
ware written in memory-unsafe languages like C or C++, where
a program frees a memory buffer too early. By placing counter-
feit structures at the freed memory location, an attacker can leak
information or gain execution control upon subsequent access.
In this paper, we show that the concept of use-after-free can
be generalized to any environment and situation where resources
can be silently exchanged. As an instance of our generalization
we demonstrate Use-After-FreeMail attacks. Use-After-FreeMail
attacks gather email addresses from publicly available database
leaks. The fully automated quantitative analysis brought to light
that 33.5% of all free-mail addresses we tested are not valid anymore.
In two user studies with 100 and 31 participants we found that 11–
19% of users are affected by our attack. In qualitative case studies we
investigated what information can be gained in Use-After-FreeMail
attacks, e.g., payment information, and how far currently used
accounts can be compromised (identity theft). Finally, drawing
the connection between mitigations against traditional use-after-
free scenarios and the Use-After-FreeMail scenario, we provide a
concise list of recommendations to free-mail providers and users
as a protection against use-after-free attacks.
CCS CONCEPTS
• Security and privacy;
ACM Reference Format:
Daniel Gruss1, Michael Schwarz1, Matthias Wübbeling2,3, Simon Guggi1,
Timo Malderle3, Stefan More1, Moritz Lipp1. 2018. Use-After-FreeMail: Gen-
eralizing the Use-After-Free Problem and Applying it to Email Services. In
ASIA CCS ’18: 2018 ACM Asia Conference on Computer and Communications
Security, June 4–8, 2018, Incheon, Republic of Korea. ACM, New York, NY,
USA, 15 pages. https://doi.org/10.1145/3196494.3196514
1 INTRODUCTION
In memory-unsafe languages, use-after-free is a common bug, oc-
curring when freeing a memory block too early [4], i.e., the program
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS ’18, June 4–8, 2018, Incheon, Republic of Korea
© 2018 Copyright held by the owner/author(s). Publication rights licensed to Associa-
tion for Computing Machinery.
ACM ISBN 978-1-4503-5576-6/18/06...$15.00
https://doi.org/10.1145/3196494.3196514
can still access the memory block through a dangling pointer. An at-
tacker can exploit the vulnerability by reclaiming the same memory
block and placing a counterfeit buffer in it [17]. Countermeasures
have been proposed that introduce changes on system-level [15],
on emulator-level [10], or on compiler-level [37, 60, 64, 72].
Although use-after-free is usually only mentioned in the con-
text of memory-unsafe languages, the concept is far more generic
and applies to a wider range of scenarios. Liu et al. [39] already
showed that a similar problem exists in sub-domain DNS entries.
Swinnen [62] and Bryant [9] exploited a similar attack vector in
practice to take over websites. Similarly, Twitter handle reuse [43]
and phone number reuse [44] are practical attack vectors. These
recent works already indicate that the concept of use-after-free
is not restricted to memory-unsafe languages and use-after-free
mitigations might likewise be applicable to other scenarios as well.
Over the past decades, email has taken a central role in personal
and business activities [26]. We use email not only for communi-
cation but access to an email account is also used as a means of
authentication to modern web services (e.g., password recovery).
Many websites do not even allow registration without an email
address [7]. Consequently, by gaining access to an email account,
an attacker can not only learn about the victim directly [14], but
also gain access to other websites the victim uses for personal or
professional purposes. While still not widely adopted, two-factor
authentication is a proposed solution against these attacks [55].
In recent history, a series of large-scale database leaks occurred,
including 450 000 Yahoo email accounts, and 6.5 million LinkedIn
accounts. These leaks contain information interesting to an attacker
beyond passwords and password hashes, such as user names and
email addresses. In this paper, we show that publishing just the
email address allows obtaining sensitive information.
In this paper, we present a generalization of use-after-free. We
show that use-after-free vulnerabilities exist in any environment
and situation where resources can be silently exchanged. We show
that use-after-free attacks always work in three phases: A collection
phase, an impersonation phase, and an exploitation phase.
We demonstrate Use-After-FreeMail attacks as an instance of our
generalized use-after-free vulnerabilities. The vast majority of users
own one or more free-mail accounts for their personal, business,
spam, and backup emails [30, 33]. Many free-mail providers release
old email addresses when they are not used within an expiration
period. We show that Use-After-FreeMail attacks always work in
the three phases of use-after-free attacks as well.
In the collection phase, the attacker gathers email addresses with
dangling references from public database leaks. The attacker auto-
matically tests which email addresses are currently not registered.
In a fully automated quantitative analysis, we found that 33.5% of
the addresses found in online leaks were not valid anymore. In the
impersonation phase, the attacker registers a previously expired or
deleted email address. In the exploitation phase, the attacker uses
the email address to authenticate with other services and to receive
emails from other services, e.g., services where the user forgot to
update the associated email address.
In a qualitative analysis, we investigated what information can be
gained and how far currently used accounts can be compromised in
Use-After-FreeMail attacks. In some cases, we were able to recover
personal and sensitive information such as payment information
and even gain access to still actively used accounts.
We show that Use-After-FreeMail attacks can also be extended to
expired domain names, facilitating the same attack vector. In a fully
automated attack based on public database leaks, an attacker gathers
expired domain names. The attacker registers these domain names
and uses them to authenticate with other services via email. We
also illustrate how an attacker can directly perform a use-after-free
attack based on the domain names especially of former businesses
to scam former customers and employees.
Our results indicate that the generalized concept of use-after-free
is very powerful and not restricted to memory-unsafe languages.
Use-After-FreeMail demonstrates that database leaks are a signifi-
cant security and privacy issue, even when all information but the
email address is removed. We provide a list of recommendations to
users and mail providers to prevent Use-After-FreeMail attacks. We
conclude that other environments and situations where resources
can be silently exchanged should also be investigated to eliminate
use-after-free vulnerabilities in these environments.
Contributions. The contributions of this work are:
(1) We show that the concept of use-after-free can be generalized to
any environment and situation where resources can be released.
(2) We demonstrate use-after-free attacks on expired free-mail
addresses and domain names, obtained through database leaks.
(3) Our quantitative and qualitative analysis show that 33.5% of the
leaked email addresses are expired and that an attacker can ob-
tain highly sensitive information such as payment information,
and access to currently used accounts of the user.
(4) We provide a concise list of recommendations for free-mail
providers and users, to defend against use-after-free attacks.
The paper is organized as follows. Section 2 provides background
information. Section 3 introduces a generalization of use-after-free.
Section 4 describes our Use-After-FreeMail attack. Section 5 de-
scribes how Use-After-FreeMail can be extended to expired domain
names. Section 6 provides a quantitative analysis of the problem.
Section 7 provides a qualitative analysis based on case studies with
volunteers. Section 8 discusses countermeasures, recommendations,
and ethical considerations. We conclude our work in Section 9.
2 BACKGROUND
In this section, we explain dangling pointers, use-after-free, data-
base leaks, and the role of emails in the modern web.
2.1 Dangling Pointers
When releasing a resource in memory-unsafe languages, it is essen-
tial to invalidate (zero-fill) any existing pointer to this resource. Oth-
erwise, these pointers become dangling pointers. Dangling pointers
are the root of use-after-free vulnerabilities [4, 17].
Dangling pointers also exist in other contexts that provide ex-
plicit resource allocation and deallocation methods. Liu et al. [39]
described DNS entries of sub-domains as pointers to specific virtual
machines in the cloud, referenced by their IP address. A dangling
DNS entry refers to and exposes the former IP address, which can
be allocated by the attacker by renting virtual machines in the same
public cloud.
Swinnen [62] showed that dangling DNS entry attacks can be
exploited in practice, by taking over a sub-domain of uber.com
abusing it to take over user accounts. Kalafut et al. [34] investigated
the problem of orphan DNS servers and how they are exploited
in practice. Bryant [9] registered the orphan TLD DNS server for
.io-domains, allowing take over of any .io domain.
Several works have observed domain reuse by spammers [13, 28,
29]. Moore and Clayton [48] and later Lever et al. [38] analyzed
the problem on a larger scale. They coin the term residual trust to
describe the credibility that is tied to the expired domain name.
Attackers reuse these domain names to exploit this residual trust.
Lever et al. [38] also discussed how the residual trust in the domain
is related to the residual trust in previously registered mail accounts
on that domain. In concurrent work, Borgolte et al. [8] showed
that these domain-reuse attacks are significantly more dangerous
with modern trust mechanisms, i.e., easy-to-obtain SSL certificates.
Independent of our work, they also discovered the connection of
these attacks to traditional use-after-free vulnerabilities and named
the group of vulnerabilities they found “IP address use-after-free”.
Mariconti et al. [43] observed handle reuse on Twitter. When
changing the Twitter handle, another user can reuse the released
handle. Attackers exploited this for reputation hijacking and imper-
sonation attacks. Martindale [44] showed that Facebook accounts
can be taken over through reused phone numbers.
Another source of dangling pointers are human faults (typosquat-
ting) [21] or hardware faults (bitsquatting) [16], modifying the ref-
erence from a valid one, to an invalid one. Typosquatting gained
much attention by the scientific communities since the first reports
about it in 1998 [5, 18, 20, 21, 35, 49, 51, 52, 61]. Both typosquat-
ting and bitsquatting are no reliable dangling pointers, but instead
they rely on the introduction of errors to the original and correct
reference.
2.2 Mitigating Use-After-Free
Dangling pointers have been studied by programming language
designers for 50 years. The idea was to develop memory-safe lan-
guages, which technically prevent dangling pointers, mitigating
use-after-free bugs and attacks [6, 12, 19, 67]. However, despite
these early work’s, use-after-free has evolved to a practical threat,
being exploited in the wild. Over the past 10 years the number
of CVEs reporting use-after-free vulnerabilities increased by two
orders of magnitude and is now at approximately 300 per year,
whereas the total number of CVEs reported stayed at a constant
level [63] (cf. Appendix A). Xu et al. [68] showed that use-after-free
2
can be reliably exploited in the Linux kernel. This underlines that
in practice, use-after-free is far from being solved.
Several works aim to avoid or reduce reusing of virtual memory
locations, i.e., once a buffer is deleted, its corresponding pointer
becomes invalid and stays invalid (ideally) for the entire program
life time [15]. Caballero et al. [10] presented Undangle, a system
to detect the creation of dangling pointers. Serebryany et al. [60]
presented AddressSanitizer, a system that detects various memory
errors, including use-after-free bugs. Lee et al. [37] and Younan [72]
presented systems that keep track of all pointers and nullify them
when the object is deleted. Kouwe et al. [64] extended their work,
building more complete and efficient dangling pointer checks.
All these solutions have in common that they are specific to
memory-unsafe programming languages, typically C or C++. As
also stated by Kouwe et al. [64], tracking type-unsafe pointer copies
is more difficult. As we show in this paper, many systems that are
susceptible to use-after-free, do not have the notion of types, type
safety, or type-safe pointer copies.
2.3 Database Leaks
A database leak or password leak is a dump of either parts of or
an entire database, which is acquired by an attacker and published
(or sold) on the Internet. Leaks typically contain user names, email
addresses, and passwords. Passwords are often stored as (unsalted)
MD5 or SHA1 hashes, or worse as plaintext [36]. With this infor-
mation, an attacker can probe the source website or other websites
to check whether a login with leaked credentials is possible. A
successful attacker can impersonate a victim, steal bank account
information or other sensitive information and use it to demand
ransom from the victim.
The number of leaks increased significantly in recent history
(cf. Appendix A). The total number of accounts leaked is currently
at 3.9 billion and it grows quickly [31]. A steep increase around
the end of 2016 and beginning of 2017 occurred due to several
large leaks. Most significantly, as it is the largest leak, is the leak
Exploit.In (https://exploit.in) with 593 million accounts, which is
a combination list containing user credentials from different web
services.
Often, users want to know whether their credentials leaked. Web-
sites like https://haveibeenpwned.com provide a service to check
millions of leaked credentials at once, reduced to only the email
address. Consequently, users can test whether they are affected,
while sensitive information is not exposed.
2.4 How Emails Are Used Today
Since its introduction as a means of communication between two
parties, email has evolved to a central part of both professional
and personal activities [26]. Today, every user has 1.7 email ac-
counts [56] on average, and this number keeps growing. With the
rise of the modern web and its possibilities (e.g., social media, shop-
ping), the need for a web service to contact a user, and the need to
verify (to some extent) that a user is real, increased. Today, many
websites do not allow registration without an email address any-
more [7]. Although today more websites are introducing two-factor
authentication, most websites still allow password recovery by sim-
ply providing the email address used for registration [7]. Hence,
3
access to an email account does not only provide access to the com-
munication [14], but it is also a way of authentication to third-party
websites. Parwani et al. [54] exploited this attack vector through
the interaction between Windows Live Messenger and Facebook to
takeover arbitrary user accounts without their permission, raising
ethical concerns. Mills and Kucherawy [47] observed that this can
be a problem and proposed an SMTP extension as a solution.