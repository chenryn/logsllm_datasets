brute-force attacks 72, 96, 202
buffer overflow attacks 48
buffer overrun 48
BUFFER_OVERFLOW 448
BUFFER_UNDERFLOW 448
build section 349
By field 407
ByteBuffer.allocateDirect() method 483
C
-c option 124
- -cacert option 81
Cache-Control header 58
capabilities 22, 295, 347
capability URIs
combining capabilities with identity 314–315
defined 300
for browser-based clients 311–312
hardening 315–318
in Natter API 303–307
returning capability URIs 305–306
validating capabilities 306–307
REST APIs and 299–302
capability-based access control 22
capability-based security 331
macaroons 319–330
contextual caveats 321
first-party caveats 325–328
macaroon token store 322–324
third-party caveats 328–330
REST and 297–318
capabilities as URIs 299–302
capability URIs for browser-based clients
311–312
combining capabilities with identity 314–315
hardening capability URIs 315–318
Hypertext as Engine of Application State 
(HATEOAS) 308–311
using capability URIs in Natter API 303–307
CapabilityController 304–306, 312, 324
CAs (certificate authorities) 80, 245, 369, 397, 
443, 479
CAT (Crypto Auth Tokens) 428
cat command 295
caveats
contextual 321
first-party 325–328
third-party 328–330
answers to exercises 330
creating 329–330
CBC (Cipher Block Chaining) 201
CBOR (Concise Binary Object 
Representation) 469, 496
CBOR Object Signing and Encryption 
(COSE) 468–474, 496, 499
CCM mode 455
Cert field 407
certificate authorities (CAs) 80, 245, 369, 397, 
443, 479
certificate chain 370, 397
Certificate message 397
certificate-bound access tokens 410–414
CertificateFactory 402
certificate.getEncoded() method 411
CertificateRequest message 398–399
certificates 80, 397
CertificateVerify message 398
cert-manager 381
ChaCha20-Poly1305 cipher suites 456
Chain field 407
chain key 483
chaining key 483
challenge-response protocol 497
c_hash claim 263
checkDecision method 288
INDEX
538
checking URLs 363
checkPermitted method 286
Chooser API 297
chosen ciphertext attack 197
CIA Triad 14
Cipher Block Chaining (CBC) 201
Cipher object 421
cipher suites
for constrained devices 452–457
supporting raw PSK 463–464
ciphers 195
CipherSweet library 178
ciphertext 195
claims, authenticating 21
Class.getResource() method 33
CLI (command-line interface) 372
client certificate authentication 399–401
client credentials 227
client credentials grant 228, 385, 387–388
client secrets 227
client_assertion parameter 394–395
client_credentials grant 386
client_id parameter 234, 242, 409, 513
clients
authenticating using JWT bearer grant 391–393
capability URIs for browser-based 311–312
implementing DTLS 443–450
managing service credentials 415–428
avoiding long-lived secrets on disk 423–425
key and secret management services 420–422
key derivation 425–428
Kubernetes secrets 415–420
of PSK 462–463
redirect URIs for 235–236
storing token state on 182–183
types of 227–228
client_secret_basic method 386
close-notify alert 449
closeOutbound() method 449
cnf claim 411
cnf field 412
CoAP (Constrained Application Protocol) 442, 
499, 509
code challenge 236
code parameter 234
collision domains 368
collision resistance 130
Command-Query Responsibility Segregation 
(CQRS) 178
Common Context 499
compareAndSet method 508
Concise Binary Object Representation (CBOR)
469, 496
confidential clients 227
confidentiality 14
ConfidentialTokenStore 207, 304, 323
confirmation key 411
confirmation method 411
confused deputy attacks 295, 299
connect() method 449, 460, 462
connected channels 448–449
connected TVs 512
constant time 477
Constrained Application Protocol (CoAP) 442, 
499, 509
constrained devices 440
Consumer IoT 440
container images 341
container, Docker
building H2 database as 341–345
building Natter API as 349–353
Content-Security-Policy (CSP) 58, 169
Content-Type header 57
contextual caveats 321
control plane 371–372
controller objects 34
Cookie header 115
cookies
security attributes 121–123
tokens without 154–169
Bearer authentication scheme 160–162
deleting expired tokens 162–163
storing token state in database 155–160
storing tokens in Web Storage 163–166
updating CORS filter 166
XSS attacks on Web Storage 167–169
CookieTokenStore method 118–120, 124, 133–134, 
136, 159, 171, 208, 315, 317
CORS (cross-origin resource sharing) 105–106
allowing cross-domain requests with 147–154
adding CORS headers to Natter API 151–154
CORS headers 150–151
preflight requests 148
defined 147
updating filter 166
COSE (CBOR Object Signing and 
Encryption) 468–474, 496, 499
Counter Mode (CTR) 196
cp command 295
CQRS (Command-Query Responsibility 
Segregation) 178
create method 239
CREATE USER command 46
createEngine() method 444
createSpace method 34, 40, 44, 50, 77, 91, 102, 
104, 142, 163, 278, 305–306, 309, 319
createUri method 305
credentials attribute 21, 103
credentials field 153
CRIME attack 205
INDEX
539
CRLs (certificate revocation lists) 369
cross-origin requests 106
Crypto Auth Tokens (CAT) 428
CryptoBox algorithm 474, 496, 510
cryptographic agility 188–189
cryptographically bound tokens 130
cryptographically secure hash function 130
cryptographically-secure pseudorandom number 
generator (CSPRNG) 201
cryptography 9
Crypto.hash() method 462
CSP (Content-Security-Policy) 58, 169
CSPRNG (cryptographically-secure pseudoran-
dom number generator) 201
CSRF (Cross-Site Request Forgery) attacks 125–138
double-submit cookies for Natter API 133–138
hash-based double-submit cookies 129–133
SameSite cookies 127–129
csrfToken cookie 141–142, 164
CTR (Counter Mode) 196
cut utility 327
D
DAC (discretionary access control) 223, 267
data encryption key (DEK) 421
data plane 372
Database object 33–34, 37
Database.forDataSource() method 33
databases
for passwords 72–74
initializing Natter API 32–33
storing token state in 155–160
DatabaseTokenStore 155–156, 158–159, 171, 
174–175, 177–178, 183, 208, 210–211, 213, 
304, 322
dataflow diagrams 17
Datagram TLS (DTLS) 441–452, 488
DatagramChannel 447, 449, 451
DataSource interface 33, 46
DBMS (database management system) 17–18
DDoS (distributed DoS) attack 64
Decision class 283–284, 287
decision global variable 288
decodeCert method 413
decrypt() method 478
decryptToString() method 198
default permit strategy 284
defense in depth 66
DEK (data encryption key) 421
delegated authorization 223
delegation semantics 431
DELETE methods 289
deleting expired tokens 162–163
denial of service 18
deny() method 284, 286, 288
description property 354
developer portal 384
device authorization grant 512–516
Device class 491
device code 513
device flow grant 228, 512
device onboarding 490
DeviceIdentityManager class 493
devices
authenticating with TLS connection 492–496
device certificates 492
identifiers 489–492
dictionary attacks 72, 96
differential power analysis 477
Diffie-Hellman key agreement 485
DirectDecrypter 204
DirectEncrypter object 203
discharge macaroons 328
discretionary access control (DAC) 223, 267
Distinguished Name (DN) 272, 402
distributed DoS (DDoS) attack 64
distributed policy enforcement 290–291
distroless base image, Google 342
DN (Distinguished Name) 272, 402
-dname option 391
DNS (Domain Name System) 64
DNS amplification attacks 64
DNS cache poisoning attack 369
DNS field 407
DNS rebinding attacks 366–368
Docker
containers
building H2 database as 341–345
building Natter API as 349–353
installing 525
Docker registry secret 416
Dockerfile 342
doc.location() method 354
document.cookie field 140, 142
document.domain field 165
Domain attribute 121
Domain Name System (DNS) 64
domain-specific language (DSL) 285
DOM-based XSS attacks 54, 169
DoS (denial of service) attacks 13, 21, 24–25, 64
drag ‘n’ drop clickjacking attack 57
DroolsAccessController class 287
DROP TABLE command 42, 47
DSL (domain-specific language) 285
DTLS (Datagram TLS) 441–452, 488
DTLSClientProtocol 462
DtlsDatagramChannel class 448–449, 451, 457, 
460
DTLSServerProtocol 461
INDEX
540
DTLSTransport 461–462
Duration argument 303
duty officer 275
Dynamic client registration endpoint 529
dynamic groups 272
dynamic roles 280–281
E
ECB (Electronic Code Book) 196
ECDH (Elliptic Curve Diffie-Hellman) 245, 452, 
472
ECDHE-RSA-AES256-SHA384 452
ECDH-ES algorithm 257
ECDH-ES encryption 256
ECDH-ES+A128KW algorithm 257
ECDH-ES+A192KW algorithm 257
ECDH-ES+A256KW algorithm 257
ECDSA signatures 255
ECIES (Elliptic Curve Integrated Encryption 
Scheme) 257
ECPrivateKey type 391
EdDSA (Edwards Curve Digital Signature Algo-
rithm) signatures 255
EEPROM (electrically erasable programmable 
ROM) 480
effective top-level domains (eTLDs) 128
egress 375
EJBs (Enterprise Java Beans) 7
EK (Endorsement Key) 481
electrically erasable programmable ROM 
(EEPROM) 480
Electronic Code Book (ECB) 196
elevation of privilege 18, 95
Elliptic Curve Diffie-Hellman (ECDH) 245, 452, 
472
Elliptic Curve Integrated Encryption Scheme 
(ECIES) 257
EmptyResultException 51
enc header 189, 201
encKey.getEncoded() method 200
encoding headers with end-to-end security 509–510
encrypt() method 478
EncryptedJWT object 203
EncryptedJwtTokenStore 205, 208, 211
EncryptedTokenStore 197–200, 205–206, 208
encryption 19–20, 63, 203
OSCORE message 504–506
private data 78–82
enabling HTTPS 80–81
strict transport security 82
sensitive attributes 195–205
authenticated encryption 197
authenticated encryption with NaCl 198–200
encrypted JWTs 200–202
Encrypt-then-MAC (EtM) 197
enctype attribute 55
Endorsement Key (EK) 481
endpoints, OAuth2 229–230
end-to-end authentication 496–510
avoiding replay in REST APIs 506–510
OSCORE 499–506
deriving context 500–503
encrypting message 504–506
generating nonces 503–504
end-to-end security 467–478
alternatives to COSE 472–474
COSE 468–472
MRAE 475–478
enforcePolicy method 288
Enterprise Java Beans (EJBs) 7
entity authentication 497
Entity Tag (ETag) header 507
entropy 157
ENTRYPOINT command 342
EnumSet class 92
envelope encryption 421
environments 16–18
epk header 257
equest.pathInfo() method 307
ES256 algorithm 391
establish secure defaults principle 74
ETag (Entity Tag) header 507
eTLDs (effective top-level domains) 128
EtM (Encrypt-then-MAC) 197
etSupportedVersions() method 460
eval() function 40
evaluation version, of ForgeRock Access 
Management 526–531
exfiltration 167
exp claim 187, 191, 394
exp field 242
expired_token 516