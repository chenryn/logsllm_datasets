#### 测试枚举法"sharding-by-intfile"规则
\
说明:必须有\"employee\"字段,和"ID"字段,且ID为主键,数据节点服务器为\"dn1,dn2,dn3\"
rule=\"sharding-by-intfile\"表明\-\--\>rule.xml文件写了sharding-by-intfile这个规则
\[root@sql56 \~\]# cd /usr/local/mycat/conf/
\[root@sql56 conf\]# vim rule.xml
\
\
\sharding_id\
\hash-int\ #定义规则名字
\
\
本文件往下看
\
\partition-hash-int.txt\
\
\[root@sql56 conf\]# ls \*.txt
autopartition-long.txt auto-sharding-rang-mod.txt
partition-range-mod.txt
auto-sharding-long.txt partition-hash-int.txt sharding-by-enum.txt
\[root@sql56 conf\]# vim partition-hash-int.txt
10000=0 #存入第一台服务器
10010=1 #存入第二台服务器
10020=2 #存入第三台服务器
在50上连接分片服务器之后进入TESTDB库创建表,并插入数据
\[root@client-50 \~\]# mysql -h192.168.4.56 -P8066 -uroot -p123qqq\...A
mysql\> create table employee(ID int primary key
auto_increment,sharding_id int,name char(10),age tinyint);
Query OK, 0 rows affected (0.46 sec)
mysql\> desc employee;
+\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| Field \| Type \| Null \| Key \| Default \| Extra \|
+\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| ID \| int(11) \| NO \| PRI \| NULL \| auto_increment \|
\| sharding_id \| int(11) \| YES \| \| NULL \| \|
\| name \| char(10) \| YES \| \| NULL \| \|
\| age \| tinyint(4) \| YES \| \| NULL \| \|
+\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
4 rows in set (0.01 sec)
mysql\> insert into employee(sharding_id,name,age)
values(10000,\"tom\",30);
Query OK, 1 row affected (0.11 sec)
mysql\> insert into employee(sharding_id,name,age)
values(10010,\"tom\",40);
Query OK, 1 row affected (0.04 sec)
mysql\> insert into employee(sharding_id,name,age)
values(10020,\"tom\",50);
Query OK, 1 row affected (0.03 sec)
53:为10000=0数据库查看employee表数据
mysql\> select \* from employee;
+\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\--+
\| ID \| sharding_id \| name \| age \|
+\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\--+
\| 1 \| 10000 \| tom \| 30 \|
+\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\--+
1 row in set (0.00 sec)
54:为10010=1数据库查看employee表数据
mysql\> select \* from employee;
+\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\--+
\| ID \| sharding_id \| name \| age \|
+\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\--+
\| 1 \| 10010 \| tom \| 40 \|
+\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\--+
1 row in set (0.00 sec)
55:为10020=2数据库查看employee表数据
mysql\> select \* from employee;
+\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\--+
\| ID \| sharding_id \| name \| age \|
+\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\--+
\| 1 \| 10020 \| tom \| 50 \|
+\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\--+
1 row in set (0.00 sec)
如果出现invalid sourcedata(无效数据源),配置文件或者授权用户出错
#### 添加新表配置数据分片
断开客户端,停止mycat
56mycat服务配置文件添加table
\[root@sql56 conf\]# /usr/local/mycat/bin/mycat stop
Stopping Mycat-server\...
Stopped Mycat-server.
\[root@sql56 conf\]# vim /usr/local/mycat/conf/schema.xml
\
\ #复制一个table
\[root@sql56 conf\]# /usr/local/mycat/bin/mycat start 启动服务
Starting Mycat-server\...
50登录,查看TESTDB库里面的表
mysql\> show tables;
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| Tables in TESTDB \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| company \|
\| customer \|
\| customer_addr \|
\| employee \|
\| employee2 \|
\| goods \|
\| hotnews \|
\| orders \|
\| order_items \|
\| travelrecord \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
10 rows in set (0.00 sec)
添加了新表employee2,规则是枚举法,按照枚举方式插入数据即可
mysql\> create table employee2(ID int primary key
auto_increment,sharding_id int,name char(10),age tinyint);
Query OK, 0 rows affected (0.55 sec)
mysql\> insert into employee2(sharding_id,name,age)
values(10010,\"jim\",40);
Query OK, 1 row affected (0.13 sec)
只给100010\--54数据库插入了数据,查询54的库即可
#### 添加新库
断开客户端,停止mycat
56mycat服务配置文件添加数据库bbsdb
**修改配置文件server.xml \--添加一个**bbsdb**库**
\[root@sql56 \~\]# vim /usr/local/mycat/conf/server.xml
\
\123456\
\TESTDB,bbsdb\ #逗号分隔
\
\
\
\\
\\
\
\
\--\>
\
**修改配置文件schema.xml \--添加两个(user ygtab)表**
\[root@sql56 conf\]# vim /usr/local/mycat/conf/schema.xml
\
\
\
\
然后按照相关规则添加
# 案例
案例1：搭建mycat 分片服务器
1 案例1：搭建mycat 分片服务器
1.1 问题
数据库主机 192.168.4.55 使用db1库存储数据
数据库主机 192.168.4.56 使用db2库存储数据
主机 192.168.4.54
运行mycat服务，逻辑库名称为test，连接用户名为admin，密码123456
在主机 192.168.4.254 访问测试配置
1.2 方案
准备四台主机，搭建mycat分片服务器，通过某种特定条件，将存放在一个数据库(主机)中的数据，分散存放到多个数据库(主机)中，已达到分散单台设备负载的效果。其中192.168.4.56作为mycat服务器，192.168.4.54和192.168.4.55作为数据库服务器，192.168.4.254作为客户端。如图-1所示：
图-1
数据分片的拓扑如图-2所示：
图-2
1.3 步骤
实现此案例需要按照如下步骤进行。
步骤一：公共配置
1）关闭防火墙和selinux，配置yum源（系统源），这里不再操作
2）把54，55还原成独立数据库服务器，且只保留默认4个库其他都删除，停止56主机的mha管理服务，下载mycat
软件到56主机
3）在54（主机c2）和55（主机c1）上面创建db1和db2库
\[root@c1 \~\]# mysql -u root -p123456
mysql\> create database db1; //c1上面创建db1库
Query OK, 1 row affected (0.00 sec)
\[root@c2 \~\]# mysql -u root -p123456
mysql\> create database db2; //c2上面创建db2库
Query OK, 1 row affected (0.00 sec)
在54上面授权一个用户
mysql\> grant all on \*.\* to admin@\"%\" identified by \"123456\";
Query OK, 0 rows affected, 1 warning (0.00 sec)
在55上面授权一个用户
mysql\> grant all on \*.\* to admin@\"%\" identified by \"123456\";
Query OK, 0 rows affected, 1 warning (0.00 sec)
4）修改数据库的配置文件
注意：1代表不区分表名的大小写，0为区分大小写
主机c1上面：
\[root@c1 \~\]# vim /etc/my.cnf
\[mysqld\]
lower_case_table_names=1 //表名忽略大小写
\[root@c1 \~\]# systemctl restart mysqld
主机c2上面：
\[root@c2 \~\]# vim /etc/my.cnf
\[mysqld\]
lower_case_table_names=1
\[root@c2 \~\]# systemctl restart mysqld
5）在56主机上面安装JDK
\[root@mycat \~\]# rpm -qa \| grep -i jdk //安装自带的即可
java-1.8.0-openjdk-1.8.0.131-11.b12.el7.x86_64
java-1.8.0-openjdk-headless-1.8.0.131-11.b12.el7.x86_64
copy-jdk-configs-2.2-3.el7.noarch
\[root@mycat \~\]# yum -y install java-1.8.0-openjdk
6）在56主机上面安装mycat
\[root@mycat \~\]# cd mysql/
\[root@mycat mysql\]# tar -xf
Mycat-server-1.4-beta-20150604171601-linux.tar.gz //免安装，解压即可使用
\[root@mycat mysql\]# mv mycat/ /usr/local/
\[root@mycat mysql\]# ls /usr/local/mycat/
bin catlet conf lib logs version.txt
\[root@mycat mysql\]# cd /usr/local/mycat/
\[root@mycat mycat\]# ./bin/mycat \--help
Usage: ./bin/mycat { console \| start \| stop \| restart \| status \|
dump }
7）修改配置文件
目录结构说明：
bin mycat命令，如 启动 停止 等
catlet 扩展功能
conf 配置文件
lib mycat使用的jar
log mycat启动日志和运行日志
wrapper.log mycat服务启动日志
mycat.log 记录SQL脚本执行后的报错内容
重要配置文件说明：
server.xml 设置连mycat的账号信息
schema.xml 配置mycat的真实库表
rule.xml 定义mycat分片规则
配置标签说明
\.. ..\ 定义连mycat用户信息
\.. ..\ 指定数据节点
\.. ..\ 指定数据库地址及用户信息
查看server.xml配置文件
\[root@mycat mycat\]# cd conf/
\[root@mycat conf\]# vim server.xml
\
\ //连接mycat服务时使用的用户名 test
\test\
//使用test用户连接mycat用户时使用的密码
\TESTDB\
//连接上mycat服务后，可以看到的库名多个时，使用逗号分隔
（是逻辑上的库名,服务器上没有这个库名，随便取，但要记住）
\
\
\user\
\TESTDB\
\true\
//定义只读权限，使用定义的user用户连接mycat服务后只有读记录的权限,不写这一行则是可读可写
\
修改schema.xml配置文件
\[root@mycat conf\]# vim schema.xml
\
//travelrecord（逻辑上的，名字不能随便写，一般不动）表分片到数据节点dn1和dn2，dn1和dn2随便取的名字
\
\
\
//数据节点对应的服务器 name=\"dn1\"名称要与上面的对应
dataHost=\"c1\"写本机主机名，database=\"db1\"存在的数据库名,定义分片使用的库，所在的物理主机，真正存储数据的db1库在物理主机mysql55上
\
//定义分片使用的库，所在的物理主机，真正存储数据的db1库在物理主机mysql55上
指定c1名称主机对应的ip地址
\
\select user()\
\