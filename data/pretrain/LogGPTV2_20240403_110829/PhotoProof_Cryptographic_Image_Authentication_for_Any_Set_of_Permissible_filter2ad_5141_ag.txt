(cid:72)
(cid:87)
(cid:86)
(cid:92)
(cid:86)
(cid:3)
(cid:87)
(cid:81)
(cid:68)
(cid:85)
(cid:87)
(cid:86)
(cid:81)
(cid:82)
(cid:70)
(cid:76)
Figure 3. High-level design of the PhotoProof application.
input. Our circuit will rotate the input image and compare
the result to the output image.
In the following, we list some general considerations, and
exemplify each using the image rotation case.
Circuit design. There are many differences between writing
a computer program and writing an arithmetic circuit. For
example, a program can receive input of arbitrary length and
have a maximum running time of its worst code ﬂow, while a
circuit has a ﬁxed size input and its size is the sum of all its
sub-circuits. Another difference is that in circuits, as a rule of
thumb, the more input gates affect each output gate, the larger
the circuit has to be, at least when implemented naively.
In image rotation, every output pixel depends on multiple
input pixels, as there is an “arch” of pixels that can be sent to a
given output pixel (depending on the given angle). A program
that computes rotate will only require O
operations. But
(cid:2)
N 2
(cid:3)
1
b
0
1
1
0
a
1
(cid:10)
(cid:9)
(cid:10)
(cid:9)
(cid:3)
(cid:3)
(cid:2)
N 3
(cid:2)
N 2
a circuit has to wire many input pixels to each output pixel (as
many as O (N )), depending on the speciﬁc algorithm. Naively,
that will require O
MUX gadgets (i.e., sub-circuits), a
total of O
gates. A better solution is to use the rotation
through shearing of Paeth [42], which we outline here. An x-
. Similarly, a y-shear is
shear is a matrix in the form
. As the name implies, x-shears work only in
a matrix
the x direction, that is, a point (x, y) is translated under an x-
shear to (x + ay, y). In the context of images, that means that
(cid:10)
x-shears work on rows while y-shears work on columns. Note
this identity:
·
(cid:12)
(cid:9)
. Hence, it is possible to rotate an image using
only shears: ﬁrst, shear all rows with a = − tan (α/2); then
all columns with b = sin α; then, again all rows. Shears can be
implemented efﬁciently in circuits using a barrel shifter, which
cosα − sinα
cosα
sinα
1 −tan
1
0
1 −tan
1
0
(cid:9)
(cid:10)
(cid:10)
(cid:9)
(cid:10)
(cid:9)
sinα
(cid:11)
(cid:12)
(cid:11)
α
2
α
2
0
1
·
1
=
266266
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:41 UTC from IEEE Xplore.  Restrictions apply. 
α
2
(cid:2)
α
2
(cid:2)
(cid:2)
(cid:3)
shifts a row of size k in O (k log k) gates. Shifting N rows,
N 2 log N
then N columns, and again N rows, sums up to O
gates.
Nondeterministic programming. Recall that in each compu-
tation step, PCD proves compliance of the local computation.
The proof is attached to the output message, and ascertains, in
particular, the existence of inputs and local data that (together
with the output) satisfy the compliance predicate. The local
data may provide arbitrary hints (“nondeterministic advice”)
that, while not trusted to be correct, may help check the
relation between input and output messages more efﬁciently.
In our rotation example, there is the issue of computing the
trigonometric functions, given an angle α. This is hard to do
(cid:3)
over Fp. Instead, it is possible to directly supply the circuit
, b = sin (α), which are all that
with the values of a = tan
are needed for the shearing. This, however, requires adding a
check that the given a and b are indeed derived from the same
angle (knowing the value of this angle is not necessary). To do
(cid:3)
so, another nondeterminism trick can be used. The circuit will
also be given c = sin
, so that it only
needs to check 3 arithmetic conditions: c2 + d2 = 1, da = c
and 2cd = b.
Arithmetic over Fp. All functionality that is incorporated
into our compliance predicate needs to be implemented as
an R1CS using the basic operations of Fp. Functions that
are “unnatural” in Fp can be hard to implement and end
up requiring many ﬁeld operations; these include integer
comparison, fraction arithmetic and trigonometric functions.
In image rotation (and everywhere else in our compliance
predicate) we had to compute arithmetic of real values.
We solve this by using a ﬁxed-point representation for the
numbers and storing them inside ﬁeld elements as integers.
This sometimes results in some small calculation error. For
this reason, we allow for a small and conﬁgurable deviation
−14 in our
from the aforementioned 3 conditions (less than 2
implementation). By ensuring that the rotation transformation
applied on the input image (before the call to the PCD prover)
is computed in the exact same way, we guarantee the same
rounding errors will occur inside and outside the circuit, hence
preserving completeness.
and d = cos
(cid:2)
(cid:3)
α
2
E. Implementing other transformations
Following is a complete list of the transformations we have
implemented. For all our transformations (which are imple-
mented as arithmetic circuits, as described above), images are
represented as an N × N matrix, where the upper-left corner
of the image is always at index (0, 0), the image’s real width
and height are speciﬁed in the metadata (in width and height
ﬁelds), and the pixels outside of the image borders are zeros. In
all transformations, the input image is ﬁrst transformed, then
checked to see whether it is identical to the output image.
Identity. Checks whether the input and output image are
identical. Identical images have the same pixel data as well as
the same metadata.
267267
Crop.
The input image is ﬁrst cropped, i.e., every pixel
is either left unchanged or zeroed using MUX gates, where
the chooser value is computed according to the pixel location
with respect to the crop borders. Then, the image is translated
(using barrel-shifters, as described for rotation), so its (new)
upper-left pixel is moved to location (0, 0) of the pixel matrix.
Metadata is changed accordingly (e.g., width is set to the new
width).
Transpose.
Input image is transposed. The transpose oper-
ation requires only “rewiring” input pixels to corresponding
output pixels. Transpose keeps the upper-left corner in place
so no translation is needed.
Flip.
Input image is ﬂipped (similarly to transpose), then
moved to the upper-left corner using barrel shifters (since
ﬂipping may move padding to location (0, 0)).
Image rotation. As described in Section V-D.
Contrast/brightness. Given α, β, each pixel of the input
image undergoes the transformation (cid:9)αx + β(cid:10), where negative
values are kept 0 and overﬂows are set to 255. The following
conditions are checked: 0 ≤ α ≤ 255, |β| ≤ 255. The real-
value arithmetic is done using ﬁxed-point representation, in
the same way as described for rotation.
F. Signature veriﬁcation
Another challenge is in verifying the original image’s digital
signature inside the compliance predicate.14 From the circuit
size perspective, this can be expensive, especially when the
signature scheme is of some algebraic nature unrelated to the
PCD ﬁeld Fp. We explored the following options:
Fp-friendly signatures. One possibility to make this more
efﬁcient would be to use a signature scheme whose veriﬁcation
can be compactly expressed over Fp. For example, one can use
an RSA-based digital signature scheme with a small public-
key exponent, e = 3, requiring just 3 modular multiplications
(cid:9)√
to verify, and these can be efﬁciently implemented using radix
p(cid:10) arithmetic. Leveraging nondeterminism, as discussed
above, can further reduce the size of the circuit: for exam-
ple, modular reduction can be implemented by big-integer
multiplication (guessing the quotient and remainder) instead
of division. Another option would be to use an elliptic-curve
signature scheme in a curve over the ﬁeld Fp.
Signatures outside Π. We chose to implement a different
approach: moving the signature veriﬁcation out of the compli-
ance predicate, and letting the PhotoProof veriﬁer check the
signature outside the PCD veriﬁer.
For each original image, the camera computes an original
hash, a collision-resistant hash digest of the original image,
and signs it. This original hash and its signature are then
passed on in every edit step. The compliance predicate is
modiﬁed to check that the original hash either matches the
image it received as the local input (this happens for the case of
14A recent work by Backes et al. [2] suggested ADSNARK, a proof system
on authenticated data. Their work does not discuss recursive composition of
proofs, nor the IA-speciﬁc considerations we described in this section.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:41 UTC from IEEE Xplore.  Restrictions apply. 
the original image), or is passed from input to output without
modiﬁcation (thus forcing the original hash to stay the same
for every image in the edit chain). Given an image, a proof, an
original hash and a signature, the PhotoProof veriﬁer checks
that (a) the PCD proof is valid for the image with its attached
original hash and that (b) the signature of the original hash is
valid under the signature scheme’s public key.
In other words, we move the signature veriﬁcation from the
ﬁrst proving step to the last veriﬁcation step, by using PCD to
make sure that the original hash digest does not change along
the way.
A collision resistant hash in an arithmetic circuit can be
computed cheaply using the subset-sum CRH function over
Fp [1], [23], as suggested in [7]. This results in a smaller
compliance predicate than the one obtained by checking
signatures in Π, but yields slightly larger proofs.15
Note that by attaching an original hash to each image, the
zero-knowledge property of the proof system as deﬁned above
no longer holds (e.g., given two authentic images, it is possible
to compare their associated original hashes and thereby deduce
whether they originated in the same original image). However,
we can make sure the original hash itself does not reveal
any information about the original image, by making it a
statistically-hiding commitment (e.g., a hash of the original
image concatenated with sufﬁciently-long random padding).
Thus, a slightly weaker zero-knowledge property still holds:
the IA proof does not reveal information about the image other
than the original hash and its signature.16
PCD-based signatures. Signature veriﬁcation can also be
removed from the PCD by assuming that the secure camera
can run a PCD prover. In this case, the camera can output the
original image along with a hash of its secret key, a certiﬁcate
for this hash, and a PCD proof for the claim “the image was
authorized by a camera which had access to a secret key with
this speciﬁc hash digest” (e.g., by supplying the prover with
a hash digest of the key and a hash on the image together
with the same key). The key remains secret due to the zero-
knowledge of the proof. This alternative offers the best of both
worlds: full zero-knowledge and a compliance predicate of size
similar to “signatures outside Π”. However, it requires heavy
PCD computation to be run on the camera’s secure processor.
G. Additional features and extensions
Many additional currently unimplemented features can be
It
incorporated into PhotoProof.
Certiﬁcates.
to use a single secret key
is imprudent
for all cameras. A large scale system with multiple devices
should use revocable certiﬁcates (e.g., X.509 [51]). This can
be done as follows: every manufactured camera is assigned
a unique public-private pair of signing keys, and a certiﬁcate
15In our implementation we used ECDSA signatures of 384-bit length,
which ﬁt in 2 ﬁeld elements. The original hash is an additional single ﬁeld
element.
16This new deﬁnition is the same as the zero-knowledge deﬁnition in
Section II-B except the simulator is given the original hash and its signature
in addition to the image.
268268
for the public key, chained up to a root certiﬁcate. The set
of authorized root public keys should be speciﬁed in the
IA proving key. The compliance predicate is then modiﬁed
to include a check that the certiﬁcate chain, as well as the
image’s signature, are valid. Note that the identity of the
camera that took the original image remains secret, thanks
to zero-knowledge.
Revocation. A revocation mechanism may be useful in case
some device’s secret key is compromised. Continuing the
above description of certiﬁcates, one way of doing so is adding
a hash digest of the camera’s public key to the image, and
letting the compliance predicate (a) check it for the base case
of the original image and (b) check that it remains unchanged
after every transformation. Thus, keys can be revoked a
posteriori, by a conventional key revocation mechanism (such
as CRL or OCSP). Of course, images originating in the same
camera can then be identiﬁed.
Multiple compliance predicates. A recent work [13] ex-
tends PCD to multiple compliance predicates, allowing us
to use a separate compliance predicate for each permissible
transformation, thereby making the proving costs dependent
on the (constraint system) size of the transformation actually
employed, rather than the sum of the (constraint system) sizes
across all permissible transformations. This also allows for
multiple smaller proving keys (instead of a single large key),
thus making it more feasible for an entire key to ﬁt in a proving
machine’s RAM during a proving operation.
Proof channel. Proofs can be attached to image ﬁles in an
associated but separate “sidecar” ﬁle. Alternatively, they can be
incorporated into the image ﬁle, within a metadata extension
header (e.g., EXIF tags in JPEG and TIFF ﬁles). For seamless
integration, the proof could even be embedded in the image
pixels, using a lossless embedding technique (e.g. [28], [40]).
PhotoProof plugin. A plugin for image-editing software
(e.g., the GNU Image Manipulation Program) will allow users
to conveniently edit images and generate proofs. The plugin