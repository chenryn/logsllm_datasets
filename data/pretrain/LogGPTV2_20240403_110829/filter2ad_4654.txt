title:Accurate Recovery of Functions in a Retargetable Decompiler(Poster
Abstract)
author:Luk&apos;as Durfina and
Jakub Kroustek and
Petr Zemek and
Bretislav K&apos;abele
Accurate Recovery of Functions
in a Retargetable Decompiler(cid:2)(Poster Abstract)
Lukáš Ďurﬁna, Jakub Křoustek, Petr Zemek, and Břetislav Kábele
Faculty of Information Technology, IT4Innovations Centre of Excellence,
Brno University of Technology, Božetěchova 1/2, 612 66 Brno, Czech Republic
{idurfina,ikroustek,izemek}@fit.vutbr.cz, PI:EMAIL
Introduction. Decompilation is used for translation of executable ﬁles into a
high-level language (HLL) representation. It is an important mechanism for in-
formation forensics and malware analysis. Retargetable decompilation represents
a very diﬃcult task because it must handle all the speciﬁc features of the target
platform. Nevertheless, a retargetable decompiler can be used for any particular
target platform and the resulting code is represented in a uniform way.
One of the essential features of each decompiler is a detection of functions.
They need to be properly recovered and emitted in the output HLL representa-
tion. The quality of this process directly impacts the ﬁnal decompilation results.
Retargetable function detection and recovery is quite hard because machine
code diﬀers dramatically based on the used language, its compiler, and the target
platform. In the past, several methods of function detection and recovery have
been proposed with varying results [1,2,3]. Some of them are hard-coded for
a particular processor architecture (e.g. Intel x86) or not implemented at all.
Furthermore, only a few methods aim at the detection of function arguments.
In this poster, we present a new, platform-independent method of function
detection and recovery. This method was successfully adopted within an existing
retargetable decompiler [4]. It is very brieﬂy described in the following text.
Function Detection in the Retargetable Decompiler. At the beginning
of the decompilation process, we try to locate the address of the main function.
This is done by an entry point analysis. The following step is realized by a
control-ﬂow analysis and its aim is a detection of basic blocks. The detection
is realized over the internal intermediate code. At this point, we need to ﬁnd
all branch instructions and their targets. We process all instructions and store
addresses of every instruction which jumps, modiﬁes the program counter, or
changes the control ﬂow by other ways. In some cases it can be more diﬃcult,
e.g. for architectures which use indirect jumps. We solve this problem by static-
code interpretation (i.e. tracking register or memory values).
(cid:2) This work was supported by the project TA ČR TA01010667 System for Sup-
port of Platform Independent Malware Analysis in Executable Files, BUT FIT
grant FIT-S-11-2, and by the European Regional Development Fund in the
IT4Innovations Centre of Excellence project (CZ.1.05/1.1.00/02.0070).
D. Balzarotti, S. Stolfo, and M. Cova (Eds.): RAID 2012, LNCS 7462, pp. 390–392, 2012.
c(cid:2) Springer-Verlag Berlin Heidelberg 2012
Accurate Recovery of Functions in a Retargetable Decompiler
391
The function analysis itself consists of several parts. The ﬁrst part is function
detection that is done by detectors utilizing the top-down approach [1], bottom-
up approach [2], or debug information. Next comes a generation of a call graph.
After that, we use a data-ﬂow analysis to detect arguments, return values, and
return addresses. The top-down detector tries to split a function containing the
whole program into smaller ones by the given instructions. It works in itera-
tions. Each iteration consists of ﬁnding targets of jumps and operation split.
The bottom-up detector joins blocks together to create functions. In our modiﬁ-
cation, we have already created basic blocks and we can join them to functions.
This detector is also used to improve the top-down approach, after every iter-
ation in the top-down detector, it is called to make the bottom-up analysis on
every detected function. Several other detectors are utilized to achieve the most
accurate results (e.g. detectors of malware obfuscation of call conventions).
Experimental Results. The implemented method for recovering functions was
tested on the MIPS and ARM architectures. We used our own tests that were
compiled by diﬀerent compilers at all available optimization levels. In total, 97
test cases were evaluated. The ﬁnal results are shown in Table 1.
Table 1. Evaluation of overall results
Functions [%] Arguments [%] Return Values [%]
Correctly detected
Wrongly detected
Undetected
89
3,8
7,2
87,4
9,2
3,4
81,4
14,0
4,6
The retargetable function detection achieves quite precise results. However,
the number of false positives in the recovery of arguments and return values has
to be reduced in future research. Their visualization is presented in Figure 1.
t
n
u
o
C
 300
 250
 200
 150
 100
 50
 0
Total count
Total detected
Correctly detected
Wrongly detected
Undetected
Functions
Arguments
Return Values
Fig. 1. Results of decompilation—detection of functions, arguments, and return values
Future Research. We propose two major areas for future research—(1) detec-
tion of inlined functions and (2) function reconstruction after obfuscation which
is necessary for accurate decompilation of malware.
392
L. Durﬁna et al.
References
1. Kästner, D., Wilhelm, S.: Generic control ﬂow reconstruction from assembly code.
ACM SIGPLAN Notices 37(7) (July 2002)
2. Theiling, H.: Extracting safe and precise control ﬂow from binaries. In: Proceedings
of the 7th Conference on Real-Tim Computing Systems and Applications (2000)
3. Balakrishnan, G., Reps, T.: Analyzing Memory Accesses in x86 Executables. In:
Duesterwald, E. (ed.) CC 2004. LNCS, vol. 2985, pp. 5–23. Springer, Heidelberg
(2004)
4. Ďurﬁna, L., Křoustek, J., Zemek, P., Kolář, D., Masařík, K., Hruška, T., Meduna,
A.: Design of a retargetable decompiler for a static platform-independent malware
analysis. International Journal of Security and Its Applications 5(4), 91–106 (2011)