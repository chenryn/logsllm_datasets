, ¯rsrc,u, ¯rdst,t).
Moreover, we note that the records rsrc,u, rdst,t, ¯rsrc,u, ¯rdst,t are constructed independently of variables from
the previous round of the protocol. Thus, using the inductive hypothesis, view(0:r−1)
, and the
fact that (rsrc,u, rdst,t) ≡ (¯rsrc,u, ¯rdst,t), we conclude that
c≈ view(0:r−1)
real
S
(PIRsrc, PIRdst) ≡ f (view(0:r−1)
real
, rsrc,u, rdst,t)
c≈ f (view(0:r−1)
S
, ¯rsrc,u, ¯rdst,t) ≡ (PIRsrc, PIRdst).
(10)
38
Using this characterization, we can write
view(0:r−1)
view(0:r)
real =
and similarly,
real
real
, f (view(0:r−1)
(cid:110)
(cid:110)
real as an eﬃciently-computable and possibly randomized function f(cid:48) in the
, rsrc,u, rdst,t), ˜Cunblind, ˜Lunblind(cid:111)
, ¯rsrc,u, ¯rdst,t), ¯Cunblind, ¯Lunblind(cid:111)
(cid:17)
, f (view(0:r−1)
view(0:r−1)
(11)
(12)
S
S
,
.
(u), ˜Lunblind
(t), ˜Lunblind, ˜Cunblind, aux
,
(13)
real ≡ f(cid:48)(cid:16) ˜Lunblind
s
view(r)
t
view(0:r)S =
From this, we express view(0:r)
garbled circuit components and the auxiliary components:
where aux contains the additional variables view(r)
encodings: view(0:r−1)
round of the protocol.
real
real depends on that are independent of the garbled circuit
, the arithmetic circuit encodings, and the encryptions of the source keys for the next
Since the simulator prepares the garbled circuit exactly as in the real protocol, from the characterization
(cid:17)
of view(0:r)S
in Eq. (12), we can similarly write
view(r)S ≡ f(cid:48)(cid:16) ¯Lunblind
s
(u), ¯Lunblind
t
(t), ¯Lunblind, ¯Cunblind, aux
,
(14)
t
s
(u), ˜Lunblind
By construction, the encodings ˜Lunblind
where aux contains the same auxiliary variables as aux. From Eq. (10), we have in particular that aux
c≈ aux.
(t), ˜Lunblind in the real scheme constitutes a com-
plete set of encodings for the garbled circuit ˜Cunblind. Let ˜x be the associated input to the neighbor-
computation circuit Cunblind. In particular, ˜x = (u, t, ˆzne, ˆznw, γne, γnw, δne, δnw, k0
nw), where
ˆzne and ˆznw are the encodings the client OTs for in the protocol execution. Similarly, the encodings
(t), ¯Lunblind constitutes a complete set of encodings for the garbled circuit ¯Cunblind.
¯Lunblind
Let ¯x = (u, t, ˆzne, ˆznw, ¯γne, ¯γnw, ¯δne, ¯δnw, ¯k0
nw) be the associated input to Cunblind in the sim-
ulation. Moreover, by the characterization of the client’s view in Eq. (11) and (12), on each round of the
protocol execution, we can associate two unique sets of aﬃne encodings with the client’s view, one for
each axis. Let zne and znw denote the values to which these two sets of aﬃne encodings evaluate. In the
real execution, we thus have zne = αne(cid:104)A(ne)
(cid:105) + βnw. In the
simulation, we have zne = ¯zne and znw = ¯znw. We now consider three cases:
(cid:105) + βne and znw = αnw(cid:104)A(nw)
(u), ¯Lunblind
, B(nw)
, B(ne)
nw, ¯k1
ne, ¯k1
ne, ¯k0
nw, k1
ne, k1
ne, k0
u
u
s
t
t
t
• Suppose that the client OTs for the encodings of inputs consistent with the outputs of the arithmetic
circuit. In other words, ˆzne = zne and ˆznw = znw. By deﬁnition, if u = t, then Cunblind(˜x) = ⊥.
ˆbnw
Otherwise, by correctness of the aﬃne encodings, Cunblind(˜x) = (ˆbne, ˆbnw, k
nw ), where dir =
IndexToDirection(ˆbne, ˆbnw) is the direction of travel from u to t, as determined by the next-hop routing
matrices A(ne), B(ne), A(nw), B(nw). In particular, dir is the direction of the edge from u = vr−1 to
vr.
In the simulation, when ˆzne = ¯zne and ˆznw = ¯znw, the simulator chooses unblinding factors
¯γne, ¯γnw, ¯δne, ¯δnw such that Cunblind(¯x) = Cunblind(˜x). Now, invoking the input-privacy of the garbling
scheme (Deﬁnition A.4), we conclude that
ˆbne
ne , k
(t), ˜Lunblind, ˜Cunblind(cid:111) c≈ SYao(1λ, Cunblind, Cunblind(¯x))
(cid:110) ˜Lunblind
s
(u), ˜Lunblind
t
c≈(cid:110) ¯Lunblind
s
(u), ¯Lunblind
t
(t), ¯Lunblind, ¯Cunblind(cid:111)
.
39
Since the garbled circuit components of view(r)
we conclude that view(r)
real
c≈ view(r)S .
real are computationally indistinguishable from view(r)S ,
dir for all directions dir(cid:48)
To see the second condition of Claim A.11 holds, we appeal to input privacy of the garbling scheme
to argue that the conditional distribution of the keys k1−ˆbne
is computationally indistin-
guishable from uniform given view(0:r)
real . As in the proof of Lemma A.9, the conditional distribution
(cid:54)= dir ∈ {n, e, s, w} is computationally indistinguishable from uniform
of k(cid:48)
real . Finally, invoking semantic security of (Enc, Dec), we conclude that for all v (cid:54)= vr, the
given view(0:r)
conditional distribution of k(r+1)
src,v
proof of Lemma A.9, this is precisely the case in the simulation.
is computationally indistinguishable from uniform. As shown in the
and k1−ˆbnw
nw
ne
The third condition of Claim A.11 holds since the components in the client’s view in round r of
the real scheme (Eq. 11) are independent of the destination keys kdst,v for all v (cid:54)= t. Since the
conditional distribution of kdst,v for v (cid:54)= t given view(0:r−1)
is computationally indistinguishable from
uniform, the conditional distribution remains uniform conditioned on view(0:r)
real . This precisely matches
the distribution in the simulation (Lemma A.9).
real
• Suppose that u = t. Then, Cunblind(˜x) = ⊥ = Cunblind(¯x). As in the previous case, input privacy of
c≈ view(r)S .
the garbling scheme yields view(r)
real
It is not diﬃcult to see that the second condition of Claim A.11 holds. Since Cunblind(˜x) = ⊥,
the conditional distribution of the keys k0
nw is computationally indistinguishable from
uniform given view(0:r)
real . By semantic security of (Enc, Dec), we conclude that the conditional distri-
is computationally indistinguishable from uniform for all v ∈ [n]. By
bution of k(r+1)
the case analysis in the proof of Lemma A.9, this is also the case in the simulation.
src,v given view(0:r)
real
nw, k1
ne, k1
ne, k0
The third condition follows as in the previous case.
• Suppose that u (cid:54)= t and moreover, the client OTs for encodings of inputs that are inconsistent with
the outputs of the arithmetic circuit. We consider two possibilities.
– Suppose that exactly one of ˆzne (cid:54)= zne and ˆznw (cid:54)= znw hold. Without loss of generality, suppose
(cid:105) + βne. Next, since
p and βne is uniform in Fp. Thus,
p and Fp, respectively. Since the family of
that ˆzne (cid:54)= zne. In the real scheme, this means that ˆzne (cid:54)= αne(cid:104)A(ne)
γne = α−1
γne and δne are also distributed uniformly over F∗
p, δ ∈ Fp
functions (cid:8)hγ,δ(z) = γz + δ (mod p) | γ ∈ F∗
(cid:9) is pairwise independent, it follows that
ne βne, where αne is uniform in F∗
ne and δne = α−1
, B(ne)
u
t
for any distinct zne, z(cid:63)
ne ∈ Fp, and all a, b ∈ Fp,
Pr [hγne,δne(zne) = a ∧ hγne,δne(z(cid:63)
ne) = b] =
1
p2 ,
where the probability is taken over the randomness in γne and δne. The client’s choice of ˆzne and
ˆznw depends only on its view view(0:r−1)
of the protocol execution in the previous rounds of the
protocol, as well as its view PIRsrc and PIRdst in the PIR protocol. The quantities γne and δne
are sampled independently of view(0:r−1)
. By the above characterization of PIRsrc and PIRdst,
the joint distribution of (PIRsrc, PIRdst) is entirely simulatable given only zne and variables that
are independent of γne and δne (by invoking the simulator for the aﬃne encodings). Thus, by
real
real
40
pairwise independence, we conclude that
Pr [hγne,δne(ˆzne) ∈ [−2τ , 2τ ]] =
2τ +1
p
= ε.
If ˆzne (cid:54)= zne, then with probability 1 − ε, Cunblind(˜x) = ⊥. With probabilty ε, Cunblind(˜x) (cid:54)= ⊥,
but this precisely corresponds to the ﬁrst abort condition in experiment Hyb1. Thus, in Hyb1,
with probability 1 − ε, Cunblind(˜x) = ⊥ and with probability ε, the protocol execution aborts.
In the simulation, the simulator chooses the unblinding factors ¯γne, ¯γnw, ¯δne, ¯δnw, such that
Cunblind(¯x) = ⊥ with probability 1 − ε. With probability ε, the simulator aborts. We conclude
by input privacy of the garbling scheme that the simulation is correct. The analysis for the case
where ˆznw (cid:54)= znw, but ˆzne = zne is entirely analogous.
– Suppose that both ˆzne (cid:54)= zne and ˆznw (cid:54)= znw. By the same analysis as in the ﬁrst case, we have
that
Pr [hγne,δne(ˆzne) ∈ [−2τ , 2τ ]] = ε = Pr [hγnw,δnw(ˆznw) ∈ [−2τ , 2τ ]] .
Since the two events are independent, Cunblind(˜x) (cid:54)= ⊥ with probability ε2, and the experiment
aborts in Hyb1. With probability 1 − ε2, Cunblind(˜x) = ⊥.
In the simulation, the simulator
chooses the unblinding factors such that Cunblind(¯x) = ⊥ with probability 1 − ε2, and aborts
with probability ε2. Correctness of the simulation follows by input privacy of the garbling
scheme.
Since Cunblind(˜x) is either equal to ⊥ or the experiment aborts, the proof of the second and third
statements of Claim A.11 follows exactly as in the previous case.
Combining Claim A.10 and Claim A.11, we conclude by induction on r that view(0:R)
real
. Thus,
the view of the protocol execution simulated by S for A is computationally indistinguishable from the view
of A interacting with the server in Hyb1. Correctness of the simulation follows.
c≈ view(0:R)
S
Proof of Claim A.7. To conclude the proof of Theorem 4.5, we show Claim A.7, or equivalently, that
no eﬃcient adversary is able to distinguish Hyb0 from Hyb1 except with advantage negl(λ) + R · 2−µ. Let
A be a distinguisher between Hyb0 and Hyb1 with distinguishing advantage Adv:
Adv = |Pr [Hyb0(λ, π,A,E)] − Pr [Hyb1(λ, π,A,E)]| .
By construction, Hyb0 and Hyb1 are identical experiments, except experiment Hyb1 terminates if the abort
event in Figure 5 occurs. Thus, it must be the case that A is able to cause the bad event to occur with
probability Adv in the real experiment. But by Claim A.8, the real protocol execution experiment with
the abort event is computationally indistinguishable from the ideal-world execution with the simulator S
described in the proof of Claim A.8. Thus, if A is able to trigger the abort event in the real protocol
execution with probability Adv, it is able to trigger the abort event when interacting with the simulator S
with probability that is negligibly close to Adv. It suﬃces now to bound the probability that the simulator
S aborts the protocol execution. On each round r, the simulator S aborts with probability at most
ε = 2τ +1/p ≤ 2−µ since p > 2µ+τ +1 (irrespective of the computational power of the adversary). By a union
bound over the total number of rounds R, we conclude that S aborts with probability at most R · 2−µ in
the protocol execution. Thus, the probability that A can trigger the abort event in the real protocol must
be negligibly close to R · 2−µ. We conclude that Adv ≤ negl(λ) + R · 2−µ, which proves the claim.
Claims A.7 and A.8 show that no no eﬃcient environment can distinguish the real-world execution
(Hyb0) from the ideal-world execution (Hyb2), except with advantage negligibly close to R· 2µ. This proves
Theorem 4.5.
41