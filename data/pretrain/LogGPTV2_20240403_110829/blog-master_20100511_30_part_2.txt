Allow Unicode escapes in E’…’ strings (Marko Kreen)  
E.1.3.3. Object Manipulation  
Speed up CREATE DATABASE by deferring flushes to disk (Andres Freund, Greg Stark)  
Allow comments only on columns of tables, views, and composite types, not other objects like indexes and TOAST tables (Tom Lane)  
Allow the creation of enumerate types with no labels (Bruce Momjian)  
This is useful for supporting binary upgrades.  
Have columns defined with storage type MAIN remain on the main heap page unless it cannot fit (Kevin Grittner)  
Previously MAIN values were forced to TOAST tables until the row size was one-quarter of the page size.  
E.1.3.3.1. ALTER  
Add ALTER DEFAULT PRIVILEGES command to control privileges of all newly-created objects (Petr Jelinek)  
It currently supports tables, views, sequences, and functions, and also has per-schema control.  
Implement IF EXISTS for DROP COLUMN and DROP CONSTRAINT (Andres Freund)  
Allow ALTER TABLE commands which rewrite tables to skip WAL logging (Itagaki Takahiro)  
Such operations either complete fully or are rolled back, so WAL archiving can be skipped, unless running in continuous archiving mode.  
E.1.3.3.2. CREATE TABLE  
Add support for copying COMMENTS and STORAGE to the CREATE TABLE … LIKE INCLUDING command (Itagaki Takahiro)  
Add support for copying all attributes to the CREATE TABLE LIKE INCLUDING command (Itagaki Takahiro)  
Add the SQL-standard CREATE TABLE … OF type command (Peter Eisentraut)  
This allows the creation of a table to match an existing composite type. Additional constraints and defaults can be specified in the command.  
E.1.3.3.3. Constraints  
Add deferrable unique constraints (Dean Rasheed)  
This allows UPDATE tab SET col = col + 1 to work on columns that have a unique indexes or are marked as primary keys, but DEFERRABLE INITIALLY DEFERRED must be used to mark the constraint as deferred.  
Generalize uniqueness constraints by allowing arbitrary operator comparisons, not just equality (Jeff Davis)  
This is enabled with the CREATE TABLE CONSTRAINT … EXCLUDE clause. While uniqueness checks could be specified using this syntax, the real value of this feature is in using complex operators that do not have built-in constraints.  
Improve the constraint violation error message to report the values causing the failure (Itagaki Takahiro)  
For example, a uniqueness constraint violation now reports Key (x)=(2) already exists.  
E.1.3.3.4. Object Permissions  
Add the ability to make mass permission changes per schema using the new GRANT/REVOKE IN SCHEMA clause (Petr Jelinek)  
Add the ability to control large object permissions with GRANT/REVOKE(KaiGai Kohei)  
E.1.3.4. Utility Operations  
Have LISTEN/NOTIFY store events in a memory queue, rather than a system table (Joachim Wieland)  
This greatly improves performance for these operations.  
Allow NOTIFY to pass an optional string to listeners (Joachim Wieland)  
Allow CLUSTER on all system tables (Tom Lane)  
Global system tables still cannot be clustered.  
E.1.3.4.1. COPY  
Allow * as a parameter in FORCE QUOTE for COPY CSV (Itagaki Takahiro)  
This forces quotes for all CSV output columns.  
Add new COPY syntax that allows parameters to be specified in parentheses (Robert Haas, Emmanuel Cecchet)  
This allows greater flexibility for future COPY options. The old syntax is still supported.  
E.1.3.4.2. EXPLAIN  
Add new EXPLAIN (BUFFERS) to report query buffer activity (Itagaki Takahiro)  
log_*_stats log output, e.g. log_statement_stats, no longer shows this information.  
Add hash usage information to EXPLAIN output (Robert Haas)  
Allow EXPLAIN output in XML, JSON, and YAML formats (Robert Haas, Greg Sabino Mullane)  
Allow EXPLAIN options to be specified inside parentheses (Robert Haas)  
This allows for the expansion of EXPLAIN options. The old syntax is still supported.  
E.1.3.4.3. VACUUM  
Change VACUUM FULL to rewrite the entire table and indexes, rather than moving around single rows to compact space (Itagaki Takahiro, Tom)  
The previous method was usually slower and caused index bloat.  
Add new VACUUM syntax that allows parameters to be specified in parentheses (Itagaki Takahiro)  
This allows greater flexibility for future VACUUM options. The old syntax is still supported.  
E.1.3.4.4. Indexes  
Allow an index to be auto-named by not supplying an index name to CREATE INDEX (Tom Lane)  
Allow REINDEX on system indexes (Tom Lane)  
WAS THIS POSSIBLE ON ANY SYSTEM TABLE BEFORE? NON-HARDWIRED ONES?  
Add point_ops opclass for GiST (Teodor Sigaev)  
DETAILS?  
Use red-black trees for GIN index creation (Teodor Sigaev)  
Red-black trees are self-balanced so allow for faster index creation.  
E.1.3.5. Data Types  
Allow hex values to be specified in bytea strings (Peter Eisentraut)  
The variable bytea_output controls if hex (default) or octal escapes are used for bytea output. (SWITCH DEFAULT FOR BETA? PETER) Libpq’s PQescapeByteaConn() now uses the hex format for PostgreSQL 9.0 servers.  
Allow extra_float_digits to be increased to 3 (Tom Lane)  
The previous maximum extra_float_digits was 2.  
E.1.3.5.1. Full Text Search  
Add prefix support for the full text search synonym dictionary (Teodor Sigaev)  
Add full text search filtering dictionaries (Teodor Sigaev)  
Filtering dictionaries allow tokens to be modified and passed to subsequent dictionaries.  
Allow underscores in full text email addresses (Teodor Sigaev)  
E.1.3.6. Functions  
Allow case-insensitive regular expression matching with UTF-8 server encodings.  
Previously, only ASCII characters and single-byte encodings worked properly. Other multi-byte, non-UTF-8 encodings are still broken for case-insensitive regular expression matching.  
Allow function calls to supply parameter names and match them to named parameters in the function definition (Pavel Stehule)  
For example, if a function is defined to take parameters a and b, it can be called with func(7 AS a, 12 AS b) or func(12 AS b, 7 AS a).  
Add support for to_char() scientific notation output (‘EEEE’) (Pavel Stehule, Brendan Jurd)  
Have to_char() honor ‘FM’ (fill mode) in ‘Y’, ‘YY’, and ‘YYY’ specifications (Bruce Momjian)  
It was already honored by ‘YYYY’.  
Correct calculations of “overlap” and “contains” operations over polygons (Teodor Sigaev)  
E.1.3.6.1. Aggregates  
Allow aggregate functions to use ORDER BY (Andrew Gierth)  
For example, this is now supported, array_agg(a ORDER BY b). This is useful for aggregates where the order of values is significant.  
Add the string_agg() aggregate function which aggregates values into a single string (Pavel Stehule)  
An optional second argument allows specification of a delimiter.  
Aggregate functions that are called with DISTINCT are now passed NULL values if the aggregate transition function is not marked as STRICT (Andrew Gierth)  
For example, agg(DISTINCT x) might pass NULL x values to agg().  
E.1.3.6.2. Bit Strings  
Add get_bit() and set_bit() functions for bit strings, mirroring those for bytea (Leonardo F)  
Implement OVERLAY() (replace) for bit strings and bytea (Leonardo F)  
E.1.3.6.3. Object Information Functions  
Add pg_table_size() and pg_indexes_size() to provide a more user-friendly interface to the pg_relation_size() function (Bernd Helmle)  
Add has_sequence_privilege() for sequence permission checking (Abhijit Menon-Sen)  
Have information schema properly display date type octet lengths (Peter Eisentraut)  
The reported length is now the maximum octet length; previously, a huge value was reported.  
Speed up information schema privilege views (Joachim Wieland)  
E.1.3.6.4. Function and Trigger Creation  
Implement anonymous functions using the DO statement (Petr Jelinek, Joshua Tolley, Hannu Valtonen)  
This allows execution of server-side code without the need to create a new function and execute it.  
Allow SQL-compliant per-column triggers (Itagaki Takahiro)  
Such triggers are fired only if the specified columns are affected by the query, e.g. in UPDATE’s SET list. information_schema now also shows this information.  
Add WHERE clause to CREATE TRIGGER to allow control over whether a trigger is fired (Takahiro Itagaki)  
While a check can be performed inside the trigger, doing it in an external WHERE clause has performance benefits.  
E.1.3.7. Server-Side Languages  
Add the OR REPLACE clause to CREATE LANGUAGE (Tom Lane)  
This is helpful to optionally install a language if it does not already exist, and is particularly helpful now that PL/pgSQL is installed by default.  
E.1.3.7.1. PL/PgSQL Server-Side Language  
Install server-side language PL/pgSQL by default (Bruce Momjian)  
Allow PL/pgSQL to handle row types with dropped columns (Pavel Stehule)  
Allow IN parameters to be assigned values within PL/pgSQL functions (Steve Prentice)  
Improve error location reporting in PL/pgSQL (Tom Lane)  
Have PL/pgSQL use the main lexer, rather than a custom version (Tom Lane)  
E.1.3.7.2. PL/pgSQL Cursors  
Add count and ALL options to MOVE FORWARD/BACKWARD in PL/pgSQL (Pavel Stehule)  
Allow PL/pgSQL’s WHERE CURRENT OF to use a cursor variable (Tom Lane)  
Add PL/pgSQL’s OPEN cursor FOR EXECUTE to use parameters (Pavel Stehule, Itagaki Takahiro)  
This is accomplished with a new USING clause.  
E.1.3.7.3. PL/Perl Server-Side Language  
Add new PL/Perl functions: quote_literal(), quote_nullable(), quote_ident(), encode_bytea(), decode_bytea(), looks_like_number(), encode_array_literal(), encode_array_constructor() (Tim Bunce)  
Add server variable plperl.on_init to specify a PL/Perl Perl initialization function (Tim Bunce)  
plperl.on_plperl_init and plperl.on_plperlu_init are also available for trusted/untrusted-specific initialization.  
Improve error context support in PL/Perl (Alexey Klyukin)  
Support END blocks in PL/Perl (Tim Bunce)  
END blocks do not currently allow database access.  
Allow use strict in PL/Perl (Tim Bunce)  
This can be enabled with the server variable plperl.use_strict.  
Allow require in PL/Perl (Tim Bunce)  
This basically tests to see if the module is loaded, and if not, generates an error.  
Allow use feature in PL/Perl if Perl version 5.10 or later is used (Tim Bunce)  
Verify that PL/Perl return values are valid in the server encoding (Andrew Dunstan)  
Improve PL/Perl code structure (Tim Bunce)  
PL/Perl subroutines are now given names (Tim Bunce)  
This is for the use of profiling and code coverage tools. DIDN’T THEY HAVE NAMES BEFORE?  
PL/Perl no longer allows Safe version 2.20 because it is unsafe (Tim Bunce)  
E.1.3.7.4. PL/Python Server-Side Language  
Add Unicode support in PL/Python (Peter Eisentraut)  
Strings are automatically converted from/to the server encoding as necessary.  
Improve bytea support in PL/Python (Caleb Welton)  
Bytea values passed into PL/Python now are represented as binary, rather than the Postgres bytea text format. Null bytes are now also output properly from PL/Python. Boolean and numeric value passing in PL/Python was also improved.  