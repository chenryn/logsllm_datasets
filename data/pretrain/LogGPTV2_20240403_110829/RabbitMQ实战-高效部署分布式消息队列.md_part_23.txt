channel.queue_declare( queue="cluster_test",
和绑定
auto_delete=False)
channel.queue_bind(queue="cluster_test",
exchange="cluster_test",
routing_key="cluster_test")
开始消
费消息
print"Readyfor testing!"
channel.basic_consume( msg_rcvd,
queue="cluster_test",
no_ack=False,
consumer_tag="cluster_test")
channel.start_consuming()
except Exception,e:
捕获连接错误
traceback.print_exc()
并打印出来
如你所见，将任何消费者应用转换为集群感知的并不困难。只需要对在节点发
生故障时RabbitMQ内部运作有所了解，并将那些应对措施融人到代码之中。现在
就让我们启动消费者程序看看会发生什么：
$pythoncluster_test_consumer.pylocalhost5670
Ready for testing!
---
## Page 154
132
第6章从故障中恢复
你通过负载均衡器连上了集群，并搭建了通信结构（访问http://localhost:8100
以观察你连接上的是哪一个集群节点）。但是，你的消费者并没有做什么有趣的事情。
你需要让集群生产者给消费者发送一些内容以做显示！生产者只是短暂运作，所以
不需要任何花哨的故障处理代码。这是因为生产者的每次调用都会重新建立新的连
接，这使得负载均衡器可以选择新的功能节点。以下清单展示了生产者示例。
清单6.5集群感知的生产者
import sys,time,json,pika
AMQP_HOST = sys.argv[1]
1建立到代
AMQP_PORT = int(sys.argv[2])
理服务器
的连接
conn_params = pika.ConnectionParameters(AMQP_HOsT,
port=AMQP_PORT,
virtual_host="/",
credentials = creds_broker)
conn_broker = pika.BlockingConnection(conn_params)
channel = conn_broker.channel()
2连接到
RabbitMQ
并发送消息
"time":time.time()})
channel.basic_publish(body=msg,
exchange="cluster_test",
properties=msg_props,
routing_key="cluster_test")
print "Sent cluster test message."
生产者代码的第一部分像之前那样设置了连接。根据传给生产者的命令行参
数来确定RabbitMQ“服务器”的IP地址（第一个参数）和端口（第二个参数）。这
里使用的是每次Rabbit安装后内建的guest账户做认证。然后你创建了一条JSON
消息②发送给消费者，内容包含了clusterTest！和当前时间戳。在发送消息之
前你设置了消息的content_type头，这样消费者就知道这条消息是JSON编码的。
最后，你将消息通过Rabbit发送给消费者。那么命令行上是怎样的呢?
$ python cluster_test_producer.py localhost 5670
Sent cluster test message.
---
## Page 155
6.2连接丢失和故障转移
133
回过头检查一下运行的消费者···
$ python cluster_test_consumer.py localhost 5670
Ready for testing!
Received:Cluster Test!/1301531152
太棒了！生产者从集群的一个节点发送消息，同时消费者从另一个节点
接收消息！让我们马上亲身实践，重启消费者连接的节点。首先，使用http://
localhost:8100找出消费者连接的集群节点名称。它应该是在HAProxy数据统计页面
里的Sessions列组下的Cur列内以1列出的节点。然后从RabbitMQ安装目录下
运行./sbin/rabbitmqctl -n node_name stop_app，这里的 node_name 是你
在HAProxy数据统计里确认的节点名称。现在回过头来看一下消费者屏幕，你应该
看到一些连接错误，在这之后成功连接到集群。
$ python cluster_test_consumer.py localhost 5670
Ready for testing!
Traceback (most recent call last):
File "cluster_test_consumer.py",line 57,in 
channel.start_consuming()
File"/Library/Python/2.6/site-packages/pika-0.9.6-py2.6.egg/
pika/adapters/blocking_connection.py", line 293, in start_consuming
self.transport.connection.process_data_events()
pika/adapters/blocking_connection.py", line 87, in process_data_events
raise AMQPConnectionError
AMQPConnectionError
Ready for testing!
第二行Readyfortesting！表示消费者已经从节点故障中成功恢复并重新
连接到了集群。现在如果你向集群发布一条新的消息，则应该可以从重新连接的消
费者处看到回显。
$ python cluster_test_consumer.py localhost 5670
Readyfor testing!
Traceback (most recent call last):
File "cluster_test_consumer.py",line 57,in 
channel.start_consuming()
pika/adapters/blocking_connection.py",line 293, in start_consuming
self.transport.connection.process_data_events()
pika/adapters/blocking_connection.py",line 87,in process_data_events
raise AMQPConnectionError
AMQPConnectionError
Ready for testing!
---
## Page 156
134
第6章从故障中恢复
Received:Cluster Test!/1301531677
一切工作正常！现在你拥有了一个完整的RabbitMQ集群设置，包括一个负载
均衡器用来处理节点选择，以及兼容集群的消费者和生产者（能在集群节点发生故
障时保持通信）。现在你终于可以满意地收工了，因为你已经学会了RabbitMQ的内
建集群了。但是这个内建集群并不能覆盖所有的使用场景。举个例子，当节点发生
故障时，要是你绝对无法承担丢失任何持久化队列消息的风险该怎么办呢？当前的
RabbitMQ版本会在节点重新加人集群时，恢复持久化队列和其内容，但是1.8.0之
前的版本却不行。这需要一个独立运行的主/备机RabbitMQ服务器替代方案。它
允许你在不丢失老队列内容的基础之上进行故障转移。
6.3总结
RabbitMQ集群只是构建快速恢复的消息通信基础架构的一半。另一半取决于
你的应用程序。现在你知道了如何编写程序，可以在面对集群节点故障时快速恢复：
那就是通过重新连接新的节点并重建通信结构以使得程序继续运作。同样重要的是，
你现在可以设置并使用负载均衡器来确定哪个集群节点有故障，同时在应用程序重
连时智能地路由到新的节点。这些技术和RabbitMQ集群相结合，给你带来了健壮
的消息通信基础架构而不会受到故障的影响，也不会让你的应用程序停顿一下。但
是仍然有一些关于Rabbit高度可用性的悬而未决的问题。比如，你如何设计Rabbit
基础架构使得当节点发生故障时，持久化队列仍然可用？同样地，如何设计Rabbit
架构使得可以避免失去整个数据中心和集群？要知道这些问题的答案，我们需要拿
出“铲子”（Shovel）跳人“兔穴”（warren）之中。
---
## Page 157
warren和Shovel：故障
转移和复制
本章要点
■理解主/备方式（warren）
■使用负载均衡器创建warren
■使用Shovel构建远距离复制
5H
到目前为止，当我们讨论高可用性的时候，总是与RabbitMQ内建的集群有关。
但集群并非是向Rabbit基础架构里植人弹性的唯一方法。而且根据你的需求，这也
并不总是一个正确的方法。集群迫使你不得不在以下两者之间做权衡：所有节点表
现得像独立单元来分布负载的优点，但是在故障节点恢复前无法使用可持久化队列
的缺点。同时，集群无法满足你构建分布在多个数据中心的RabbitMQ架构。因此，
虽然集群最初听起来像是解决可用性问题的“瑞士军刀”，但是你仍然需要其他工
具。这正是warren和Shovel的用武之地。
利用到目前为止所掌握的知识，你将会学习如何构建主／备机的独立RabbitMQ
服务器，当面对持久化消息通信时，让你可以用扩展性换取灵活性。然后你会发现
你能使用Shovel插件将一座城市的Rabbit服务器上的队列内容复制到遥远的另一座
城市的Rabbit服务器（或者集群）。当你完成这些内容的时候，你将拥有一个完整
---
## Page 158
136
第7章warren和Shovel：故障转移和复制
的工具箱来应对任何高可用性场景。最棒的是，如果你使用从第12章中习得的新
技术来设计应用程序的话，你就能不做更改地使用它们来利用这些新的RabbitMQ
拓扑。让我们开始深入理解主／备机模式，也就是warren模式吧。
7.1warren：另一种集群方式
在RabbitMQ1.8.0之前的版本中，当包含持久化队列的集群节点发生故障时，
会发生“非常有趣”的行为。当节点仍处于故障中时，如果客户端重新创建了持久
化队列，那么当节点恢复时，旧队列里的内容就会丢失。恢复了的节点应该会说：
“哎呀，这个队列已经存在了；我不需要我的拷贝。”当旧的队列内容是有价值的时
候，那问题就大了。从1.8.0版本开始，这个行为发生了变化。当拥有持久化队列的
节点发生故障时，该队列无法被重新创建，任何尝试重新声明队列的客户端都会收
到一个404NOT_FOUNDAMQP错误。当故障节点恢复时，持久化队列及其内容也
跟着恢复了（假设消息是以delivery_mode2的模式进行投递的）。但是在节点
恢复以前，任何应该投递到该队列的消息要么丢失了，要么由于设置了mandatory
发布标志导致客户端收到了错误。
如果应用程序无法承担丢失消息的风险，或者在故障队列恢复前无法处理不
断重发消息的延迟，那么你需要我们提到的warren模式。用我们的话来说，一个
7.1）。这样设置的好处是，这是真正的无共享架构。主服务器和备用服务器之间没
有协作，所以任何影响到主服务器的问题不会自动转移到备用服务器上；反过来也
一样。它们之间分隔得足够彻底，以至于你可以运行不同版本的RabbitMQ。这样
允许你在生产环境中引进新版本的RabbitMQ，同时保有旧版本以防万一。拥有两
台完全隔离的RabbitMQ服务器来处理彼此的负载没什么不好的。不管什么原因，
当Rabbit的内建集群无法满足需求的时候，warren就能派上用场。
还可以用其他方式设置warren来达到高可用性。一个不同思想流派谈道：“当
主节点发生故障时，我想让备用节点拥有主节点的所有消息。”我们的负载均衡器和
无共享架构无法做到这一点。取而代之的是我们的方法给了你一个可以马上开始重
新发布和消费消息的地方；同时当主节点恢复时，它允许你的消费者重新连接并消
费主节点发生故障时队列上的那些消息。你不会去失任何老的或者新的消息，但是
你不得不等待主节点恢复之后旧消息才能重新变为可用。针对构建warren，另一流
---
## Page 159
7.1warren：另一种集群方式
137
派表达了不同的看法，他们认为你应该在主服务器和备用服务器之间使用共享存储
的方式来搭建warren，备用节点上的RabbitMQ不用运行（见图7.2）。那么当主服
务器发生故障时，你使用Pacemaker”将RabbitMQ的IP地址转移到备用节点上并启
动Rabbit服务器，采用共享存储上的当前元数据、内容和状态。我们认为这种设置
方式有几个问题。首先一点，因为存储是共享的，所以如果由于某些原因导致主节
点发生故障的话，那么这种错误同样会在备用节点上发生，并会阻止RabbitMQ的
正常启动。第二点，你需要确保备用RabbitMQ和主节点上的RabbitMQ拥有相同
的节点名称和UID。如果这两处有一处不同，备用Rabbit将无法访问共享存储上的
文件，也就无法启动了。最后，使用这种配置的warren意味着备用Rabbit并没有运
行。因此有可能存在某些情况更改了备用节点，以致在你需要的时候Rabbit无法启动。
这些都太过复杂了，我们当然选择简单的。
消费者
副节点
主节点
、（仅在主节点发生
故障时启用）
交换器A
交换器B
队列1
队列2
RabbifMQ
RabbitMQ
独立服务器
独立服务器
rabbit_a@localhost
rabbit_b@localhost
图7.1基于warren的负载均衡器
1Pacemaker是Linux下用于在主备节点之间处理IP故障转移的一系列集群工具，并在故障发生时，在备
用节点上自动启动受保护的应用。Pacemaker可以从http：//www.clusterlabs.org/下载。
---
## Page 160
138
第7章warren和Shovel：故障转移和复制
消费者
虚拟IP：
10.1.61.1
?
Pacemaker
交换器A
（控制虚拟IP，
交换器A
存储所有者，
启动备份rabbit）
队列1
队列1
RabbitMQ
独立服务器
独立服务器
rabbit@10.1.62.2
rabbit@10.1.62.3
共享存储
图7.2基于warren的共享存储
由于崩溃会在主备机之间复制的事实，并且在使用共享存储方法时无法在两个
节点上都运行RabbitMQ，因此我们选择基于负载均衡器的warren并向你展示。但是，
如果共享存储的warren听起来对你的使用场景更为适用的话，则可以看看RabbitMQ
网站上的这份关于如何设置的好教程：http://www.rabbitmq.com/pacemaker.html。最后，
如果你使用“不做任何假设”的原则来构建应用程序，并且当连接服务器时总是重
新搭建通信结构的话，那么你的应用程序不用做任何更改就可以使用基于负载均衡
器的warren了。
7.2设定负载均衡器-
一基于主/从的集群