read access to a section object but then calls a service to write to it, the service fails.
EXPERIMENT: Looking at object security
You can look at the various permissions on an object by using either Process Hacker, Process 
Explorer, WinObj, WinObjEx64, or AccessChk, which are all tools from Sysinternals or open-
list (ACL) for an object:
I 
You can use WinObj or WinObjEx64 to navigate to any object on the system, including
object directories, right-click the object, and select Properties
BaseNamedObjects directory, select Properties, and click the Security tab. You should
see a dialog box like the one shown next. Because WinObjEx64 supports a wider variety of
delete access to the directory, for example, but the SYSTEM account does (because this is where 
session 0 services with SYSTEM privileges will store their objects). 
EXPERIMENT: Looking at object security
You can look at the various permissions on an object by using either Process Hacker, Process 
Explorer, WinObj, WinObjEx64, or AccessChk, which are all tools from Sysinternals or open-
list (ACL) for an object:
I
You can use WinObj or WinObjEx64 to navigate to any object on the system, including 
object directories, right-click the object, and select Properties
BaseNamedObjects directory, select Properties, and click the Security tab. You should 
Security tab. You should 
Security
see a dialog box like the one shown next. Because WinObjEx64 supports a wider variety of 
delete access to the directory, for example, but the SYSTEM account does (because this is where 
session 0 services with SYSTEM privileges will store their objects). 
154 
CHAPTER 8 System mechanisms
I
Instead of using WinObj or WinObjEx64, you can view the handle table of a process using
Process Explorer, as shown in the experiment “Viewing open handles” earlier in this chapter,
or using Process Hacker, which has a similar view. Look at the handle table for the Explorer.exe
per-session namespace shortly.) You can double-click the object handle and then click the
Security tab and see a similar dialog box (with more users and rights granted).
I
–o switch as shown in the following output. Note that using AccessChk will also show you
the integrity level of the object. (See Chapter 7 of Part 1, for more information on integrity
levels and the security reference monitor.)
C:\sysint>accesschk -o \Sessions\1\BaseNamedObjects 
Accesschk v6.13 - Reports effective permissions for securable objects 
Copyright (C) 2006-2020 Mark Russinovich 
Sysinternals - www.sysinternals.com 
\Sessions\1\BaseNamedObjects 
  Type: Directory 
  RW Window Manager\DWM-1 
  RW NT AUTHORITY\SYSTEM 
  RW DESKTOP-SVVLOTP\aione 
  RW DESKTOP-SVVLOTP\aione-S-1-5-5-0-841005 
  RW BUILTIN\Administrators 
  R  Everyone 
     NT AUTHORITY\RESTRICTED 
I
Instead of using WinObj or WinObjEx64, you can view the handle table of a process using
Process Explorer, as shown in the experiment “Viewing open handles” earlier in this chapter,
or using Process Hacker, which has a similar view. Look at the handle table for the Explorer.exe
per-session namespace shortly.) You can double-click the object handle and then click the
Security tab and see a similar dialog box (with more users and rights granted).
Security tab and see a similar dialog box (with more users and rights granted). 
Security
I
–o switch as shown in the following output. Note that using AccessChk will also show you 
the integrity level of the object. (See Chapter 7 of Part 1, for more information on integrity 
integrity level of the object. (See Chapter 7 of Part 1, for more information on integrity 
integrity level
levels and the security reference monitor.)
C:\sysint>accesschk -o \Sessions\1\BaseNamedObjects
Accesschk v6.13 - Reports effective permissions for securable objects
Copyright (C) 2006-2020 Mark Russinovich
Sysinternals - www.sysinternals.com
\Sessions\1\BaseNamedObjects
  Type: Directory
  RW Window Manager\DWM-1
  RW NT AUTHORITY\SYSTEM
  RW DESKTOP-SVVLOTP\aione
  RW DESKTOP-SVVLOTP\aione-S-1-5-5-0-841005
  RW BUILTIN\Administrators
  R  Everyone
     NT AUTHORITY\RESTRICTED 
CHAPTER 8 System mechanisms
155
Windows also supports Ex (Extended) versions of the APIs—CreateEventEx, CreateMutexEx, 
CreateSemaphoreEx—that add another argument for specifying the access mask. This makes it possible 
for applications to use discretionary access control lists (DACLs) to properly secure their objects without 
breaking their ability to use the create object APIs to open a handle to them. You might be wonder-
ing why a client application would not simply use OpenEvent, which does support a desired access 
argument. Using the open object APIs leads to an inherent race condition when dealing with a failure 
in the open call—that is, when the client application has attempted to open the event before it has 
been created. In most applications of this kind, the open API is followed by a create API in the failure 
case. Unfortunately, there is no guaranteed way to make this create operation atomic—in other words, 
to occur only once. 
Indeed, it would be possible for multiple threads and/or processes to have executed the create API 
concurrently, and all attempt to create the event at the same time. This race condition and the extra 
complexity required to try to handle it makes using the open object APIs an inappropriate solution 
to the problem, which is why the Ex APIs should be used instead.
Object retention
There are two types of objects: temporary and permanent. Most objects are temporary—that is, they 
remain while they are in use and are freed when they are no longer needed. Permanent objects remain 
until they are explicitly freed. Because most objects are temporary, the rest of this section describes 
how the Object Manager implements object retention—that is, retaining temporary objects only as 
long as they are in use and then deleting them. 
Manager can easily track how many of these processes, and which ones, are using an object. Tracking 
these handles represents one part of implementing retention. The Object Manager implements object 
name retention, and it is controlled by the number 
of open handles to an object that exists. Every time a process opens a handle to an object, the Object 
object and close their handles to it, the Object Manager decrements the open handle counter. When 
deletion prevents processes from opening a handle to the object.
The second phase of object retention is to stop retaining the objects themselves (that is, to delete 
them) when they are no longer in use. Because operating system code usually accesses objects by us-
ing pointers instead of handles, the Object Manager must also record how many object pointers it has 
dispensed to operating system processes. As we saw, it increments a reference count for an object each 
time it gives out a pointer to the object, which is called the pointer count; when kernel-mode compo-
The system also increments the reference count when it increments the handle count, and likewise dec-
rements the reference count when the handle count decrements because a handle is also a reference 
to the object that must be tracked. 
usage reference count, which adds cached references to the pointer count 
and is decremented each time a process uses a handle. The usage reference count has been added 
156 
CHAPTER 8 System mechanisms
since Windows 8 for performance reasons. When the kernel is asked to obtain the object pointer from 
its handle, it can do the resolution without acquiring the global handle table lock. This means that in 
newer versions of Windows, the handle table entry described in the “Object handles and the process 
handle table” section earlier in this chapter contains a usage reference counter, which is initialized the 
verb use refers to the act of resolving the object pointer from its handle, an operation performed in 
kernel by APIs like the ObReferenceObjectByHandle.
-
ing a handle to it. The event has a name, which implies that the Object Manager inserts it in the correct 
usage reference count 
count is still 1.) 
Handle Table
Handle Table
Other structure
Handles
HandleCount=2
ReferenceCount=65536
Process A
Process B
System space
Event object
HandleCount=1
ReferenceCount=32770
Event object
DuplicateHandle
Index
FIGURE 8-35 Handles and reference counts.
Process B initializes, creates the second named event, and signals it. The last operation uses (refer-
ences) the second event, allowing it also to reach a reference value of 32,770. Process B then opens 
object, bringing its counters to 2 and 32,771. (Remember, the new handle table entry still has its usage 
CHAPTER 8 System mechanisms
157
usage reference count to 32,767. The value is added to the 
object reference count, which is further increased by 1 unit, and reaches the overall value of 65,539. 
Subsequent operations on the handle simply decreases the usage reference count without touching the 
though—an operation that releases a reference count on the kernel object. Thus, after the four uses 
When a process closes a handle to an object (an operation that causes the NtClose routine to be 
executed in the kernel), the Object Manager knows that it needs to subtract the handle usage reference 
-
tinue to exist because its reference count will become 1 (while its handle count would be 0). However, 
when Process B closes its handle to the second event object, the object would be deallocated, because 
its reference count reaches 0.
-
ence count might remain positive, indicating that the operating system is still using the object in some 
way. Ultimately, it is only when the reference count drops to 0 that the Object Manager deletes the 
object from memory. This deletion has to respect certain rules and also requires cooperation from the 
memory (depending on the settings located in their object types), if a dereference occurs at an IRQL 
level of DISPATCH_LEVEL or higher and this dereference causes the pointer count to drop to 0, the sys-
tem would crash if it attempted to immediately free the memory of a paged-pool object. (Recall that 
such access is illegal because the page fault will never be serviced.) In this scenario, the Object Manager 
performs a deferred delete operation, queuing the operation on a worker thread running at passive 
-
ing to delete the object will result in the system attempting to acquire this lock. However, the driver 
driver developers must use ObDereferenceObjectDeferDelete to force deferred deletion regardless of 
complete more quickly, instead of waiting for the Object Manager to delete the object.
Because of the way object retention works, an application can ensure that an object and its name 
remain in memory simply by keeping a handle open to the object. Programmers who write applications 
that contain two or more cooperating processes need not be concerned that one process might delete an 
might create a second process to execute a program in the background; it then immediately closes its 
handle to the process. Because the operating system needs the second process to run the program, it 
158 
CHAPTER 8 System mechanisms
Because object leaks can be dangerous to the system by leaking kernel pool memory and eventu-
ally causing systemwide memory starvation—and can break applications in subtle ways—Windows 
includes a number of debugging mechanisms that can be enabled to monitor, analyze, and debug 
issues with handles and objects. Additionally, WinDbg comes with two extensions that tap into these 
mechanisms and provide easy graphical analysis. Table 8-24 describes them.
TABLE 8-24 Debugging mechanisms for object handles
Mechanism
Enabled By
Kernel Debugger Extension
Handle Tracing Database
with the User Stack Trace option checked with 
!htrace  
Object Reference Tracing
Per-process-name(s), or per-object-type-pool-tag(s), 
!obtrace 
Object Reference Tagging
Drivers must call appropriate API
N/A
Enabling the handle-tracing database is useful when attempting to understand the use of each 
handle within an application or the system context. The !htrace debugger extension can display the 
the stack trace can pinpoint the code that is creating the handle, and it can be analyzed for a missing 
call to a function such as CloseHandle.
The object-reference-tracing !obtrace extension monitors even more by showing the stack trace for 
each new handle created as well as each time a handle is referenced by the kernel (and each time it is 
opened, duplicated, or inherited) and dereferenced. By analyzing these patterns, misuse of an object 
at the system level can be more easily debugged. Additionally, these reference traces provide a way to 
understand the behavior of the system when dealing with certain objects. Tracing processes, for ex-
(such as Process Monitor) and help detect rogue or buggy third-party drivers that might be referencing 
handles in kernel mode but never dereferencing them.
Note 
the name of its pool tag by looking at the key member of the OBJECT_TYPE structure when 
using the dx command. Each object type on the system has a global variable that references 
this structure—for example, PsProcessType. Alternatively, you can use the !object command, 
which displays the pointer to this structure.
Unlike the previous two mechanisms, object-reference tagging is not a debugging feature that must 
driver developers to reference and dereference objects, including ObReferenceObjectWithTag and 
ObDereferenceObjectWithTag. Similar to pool tagging (see Chapter 5 in Part 1 for more information on pool 
tagging), these APIs allow developers to supply a four-character tag identifying each reference/dereference 
pair. When using the !obtrace extension just described, the tag for each reference or dereference operation 
is also shown, which avoids solely using the call stack as a mechanism to identify where leaks or under-
references might occur, especially if a given call is performed thousands of times by the driver.
CHAPTER 8 System mechanisms
159
Resource accounting
Resource accounting, like object retention, is closely related to the use of object handles. A positive 
open handle count indicates that some process is using that resource. It also indicates that some pro-
-
ence count drop to 0, the process that was using the object should no longer be charged for it.
the types of quotas imposed on processes are sometimes diverse and complicated, and the code to 
process component might limit users to some maximum number of new processes they can create 
or a maximum number of threads within a process. Each of these limits is tracked and enforced in 
different parts of the operating system.
In contrast, the Windows Object Manager provides a central facility for resource accounting. Each 
object header contains an attribute called quota charges that records how much the Object Manager 
opens a handle to the object.
Each process on Windows points to a quota structure that records the limits and current values 
NonPagedPoolQuota, PagedPoolQuota, 
and PagingFileQuota
Management.) Note that all the processes in an interactive session share the same quota block (and 
Object names
An important consideration in creating a multitude of objects is the need to devise a successful system 
for keeping track of them. The Object Manager requires the following information to help you do so:
I 
A way to distinguish one object from another
I 
shared memory, for example. The executive, in contrast, allows any resource represented by an object 
Object names also satisfy a third requirement, which is to allow processes to share objects. The ex-
-
ate an object and place its name in the global namespace, and a second process can open a handle to 
160 
CHAPTER 8 System mechanisms
before storing the new name in the global namespace. The second is when a process opens a handle to 
handle to the caller; thereafter, the caller uses the handle to refer to the object. When looking up a 
name, the Object Manager allows the caller to select either a case-sensitive or case-insensitive search, 
a feature that supports Windows Subsystem for Linux (WSL) and other environments that use case-
Object directories
possibly even other object directories. The object directory object maintains enough information to 
translate these object names into pointers to the object headers of the objects themselves. The Object 
Manager uses the pointers to construct the object handles that it returns to user-mode callers. Both 
kernel-mode code (including executive components and device drivers) and user-mode code (such as 
subsystems) can create object directories in which to store objects. 
Objects can be stored anywhere in the namespace, but certain object types will always appear in 
component responsible for the creation of Driver objects (through the IoCreateDriver API), only Driver 
objects should exist there.
Table 8-25 lists the standard object directories found on all Windows systems and what types of ob-
-
plications that stick to documented APIs. (See the “Session namespace” section later in this chapter for 
more information.)
TABLE 8-25 Standard object directories
Directory
Types of Object Names Stored
contains the named kernel objects created by Win32 or UWP APIs from within processes 
that are running in an App Container.
Symbolic links mapping ARC-style paths to NT-style paths.
Global mutexes, events, semaphores, waitable timers, jobs, ALPC ports, symbolic links, 
and section objects. 
Callback objects (which only drivers can create).
CHAPTER 8 System mechanisms
161
Directory
Types of Object Names Stored
-
SystemPartition and BootPartition. Also contains the PhysicalMemory section object 
directories, such as Http used by the Http.sys accelerator driver, and HarddiskN directo-
ries for each physical hard drive.
(SERVICE_FILE_SYSTEM_DRIVER or SERVICE_RECOGNIZER_DRIVER).
Symbolic links for locations where OS drivers can be installed and managed from. 
Windows 10X devices.
SERVICE_FILE_SYSTEM_DRIVER
(SERVICE_RECOGNIZER_DRIVER) driver and -
Contains event objects that signal kernel pool resource conditions, the completion of 
certain operating system tasks, as well as Session objects (at least Session0) represent-
ing each interactive session, and Partition objects (at least MemoryPartition0) for each 
memory partition. Also contains the mutex used to synchronize access to the Boot 
callback to refer to the correct partition for physical memory and commit resource con-
ditions, and for memory error detection.
Section objects for the known DLLs mapped by SMSS at startup time, and a symbolic 
link containing the path for known DLLs.
directory is used instead to store WoW64 32-bit versions of those DLLs.