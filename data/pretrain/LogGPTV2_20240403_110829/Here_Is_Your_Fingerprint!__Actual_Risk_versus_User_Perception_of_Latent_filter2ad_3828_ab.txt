### Fake Fingerprint Fabrication Techniques

Researchers have explored various methods for creating fake fingerprints, including using PVA glue or gelatin [24, 39]. One notable technique involves using a scanned image of a fingerprint impressed on a touch screen to create a mold and cast a fake fingerprint in PVA glue [34]. Another method uses conductive ink to print a scanned fingerprint image on a 2D printer [6]. These techniques can deceive touch sensors in modern smartphones but require a firm impression of the fingerprint.

### Our Attack Techniques

#### 3.1 Overview

**Threat Model:**
Our threat model is based on the well-known smudge attack model [2] and the strong field evidence of fingerprint spoofing attacks [6, 34]. In this scenario, a user leaves oily smudges on their smartphone's surface due to daily touch activities. An attacker aims to repeatedly unlock the victim’s smartphone to access confidential data, make mobile payments, etc. The attacker has up to five (or more, if allowed) attempts to unlock the device through the touch sensor. For example, Galaxy S6 and S7 models allow 37 attempts within the first 24 hours. 

We assume an active adversary who has temporary physical control of the device, capable of:
1. Controlling lighting and camera conditions for photography.
2. Forging a fake finger using materials like gelatin or conductive ink, once a high-quality fingerprint image is obtained [6, 34].

This assumption is realistic given the high incidence of smartphone theft. According to a Consumer Report survey in America [32], over 3 million smartphones were stolen in 2013. Even with file and data encryption mechanisms, these protections are ineffective if the device is unlocked.

**Attack Procedure:**
The primary goal of our attack is to construct a high-quality image of the enrolled fingerprint from smudges on the victim’s smartphone. The key steps are:

1. **Photographic Smudge Collection:**
   - Set up a photographic environment and take pictures of the smartphone surface.
   - Use the watershed algorithm to detect potential smudges and take close-up pictures of latent fingerprints. (Section 3.2)

2. **Fingerprint Smudge Matching:**
   - Pre-process the latent fingerprint images for grayscale transformation and histogram equalization.
   - Apply SIFT descriptor-based brute-force matching to select the best-matching latent fingerprint from the touch screen.
   - Use MINDTCT for minutiae detection. (Section 3.3)

3. **Image Quality Assessment:**
   - Use SIFT keypoints to identify damaged areas and assess the image quality of the home button and selected touch screen images.
   - Decide on the construction method: either combination or replacement. (Section 3.4)

4. **Fingerprint Image Construction:**
   - If the touch screen image has better quality, use the complete part of the touch screen image for replacement.
   - If the home button image has better quality, combine good portions with complementary parts of the touch screen image.
   - Post-process the reconstructed image for quality improvement. (Section 3.5)

5. **Verification:**
   - Compare the reconstructed image with a high-quality intentional fingerprint impression (template).
   - Use NBIS packages to measure minutiae quality, match scores, and fingerprint image quality. (Section 3.6)

### 3.3 Fingerprint Smudge Matching

After collecting latent fingerprint images \( H \) and \( T_i \), we apply image enhancement techniques, including grayscale transformation and histogram equalization, to improve image processing reliability. The latent fingerprint image \( H \) is crucial as it is found on the home button where the touch sensor is installed. However, \( H \) can be easily damaged. To compensate, we collect additional latent fingerprint images \( T_i \) from the touch screen.

To select the most closely correlated \( T_i \) to \( H \), we perform SIFT descriptor-based 1:N brute-force matching on the histogram-equalized images. We use the L2 norm (Euclidean distance) to determine the best match. Figure 4-(a) shows the lower 10% distribution of the matching distance, indicating the best match. We select the image with the lowest median value, which in our example is \( T_1 \).

We also use MINDTCT for minutiae detection. A fingerprint with fewer than 40 minutiae is typically dismissed, as a typical fingerprint has 40-80 minutiae [40]. Figure 3-2-(b) shows the selection table, where \( T_1 \) has the minimum distance (75.11) and an acceptable number of minutiae (52). Finally, we obtain the geometrics of the shortest match descriptors and crop a 250 × 250 area from \( T_1 \) based on this point. (See Appendix C and Figure 13 for more details.)

### 3.4 Image Quality Assessment

In this step, we assess the image quality of \( H \) and \( T_s \) to complete the reconstruction procedure. Based on the SIFT descriptors, we crop \( T_s' \) from \( T_s \). We calculate the relative coordinates of the leftmost up and rightmost down points of \( H \) and \( T_s \) and use these to find the corresponding points in \( T_s \). We then divide the image into a 10×10 array of 25×25 pixel blocks and set a threshold value, \( \tau \), as the average number of keypoints found in \( H \) and \( T_s \). If the number of keypoints in a block is smaller than \( \tau \), it is defined as damaged; otherwise, it is undamaged.

For example, in Figure 4-(c) and (d), \( \tau = 10.625 \) (SD = 5.909), and we use this value to identify 74 damaged blocks and 26 undamaged blocks. We then decide on the construction method: either complete replacement or combination. (See Appendix D and Figure 14 for more details.)

### 3.5 Fingerprint Image Construction

Finally, we construct the fingerprint image based on the quality assessment results.

**Replacement Method:**
If the touch screen image has better quality, we replace the entire home button image \( H \) with the cropped touch screen image \( T_s' \). Figure 3-(viii) shows the result of this replacement.

**Combination Method:**
If the home button image has better quality, we combine the good portions of \( H \) with complementary parts of \( T_s' \). For each damaged block in \( H \), we calculate the relative coordinates and replace it with the corresponding block from \( T_s' \). We then apply the CLAHE algorithm for histogram equalization of each block in the combined image \( H' \). The conceptual images are shown in Figure 3-(v) and (vi) for combination and in Figure 3-(vii) for the final result.

### 3.2 Photographic Smudge Collection

Under the threat model, we set up a photographic environment to capture the smartphone surface. We used a Canon EOS 700D DSLR camera and Jupiter tungsten light (3200K) for lighting control. For latent fingerprint collection, we took a picture of the entire smartphone surface and used Otsu’s thresholding and the watershed algorithm to detect latent fingerprints. We then took close-up pictures of the identified latent fingerprints and the home button. The resulting images are denoted as \( H \) for the home button and \( T_i \) for the touch screen images.