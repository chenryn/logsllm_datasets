               Output: a.id, a.info  
               Index Cond: (a.info = 'test1'::text)  
               Buffers: shared hit=1 read=3  
 Planning time: 0.819 ms  
 Execution time: 0.200 ms  
(22 rows)  
```  
PostgreSQL支持merge join、GroupAggregate(通过INDEX SCAN)，所以这个CASE，非常快，并不需要b对所有数据进行聚合。  
但是为了演示需求，我们还是继续往下，看看人为rewrite的SQL  
5\. 查看QUERY 2的执行计划  
```  
explain (analyze,verbose,timing,costs,buffers)   
select * from a left join (select id,count(info) from b   
  where exists (select 1 from a where a.id=b.id and a.info='test1')  -- 改写QUERY，得到同样结果，但是B的聚合量减少了  
  -- 或者 where id in (select id from a where a.info='test1')  
  -- 或者 还有其他改法，拆掉子查询  
group by id) b on (a.id=b.id) where a.info='test1';  
                                                                      QUERY PLAN                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------  
 Nested Loop Left Join  (cost=5.37..7.43 rows=1 width=27) (actual time=0.036..0.037 rows=1 loops=1)  
   Output: a.id, a.info, b.id, (count(b.info))  
   Join Filter: (a.id = b.id)  
   Buffers: shared hit=7  
   ->  Index Scan using idx_a_info on public.a  (cost=0.43..2.45 rows=1 width=15) (actual time=0.017..0.018 rows=1 loops=1)  
         Output: a.id, a.info  
         Index Cond: (a.info = 'test1'::text)  
         Buffers: shared hit=4  
   ->  GroupAggregate  (cost=4.94..4.96 rows=1 width=12) (actual time=0.015..0.015 rows=0 loops=1)  
         Output: b.id, count(b.info)  
         Group Key: b.id  
         Buffers: shared hit=3  
         ->  Sort  (cost=4.94..4.94 rows=1 width=15) (actual time=0.013..0.013 rows=0 loops=1)  
               Output: b.id, b.info  
               Sort Key: b.id  
               Sort Method: quicksort  Memory: 25kB  
               Buffers: shared hit=3  
               ->  Nested Loop  (cost=2.89..4.93 rows=1 width=15) (actual time=0.005..0.005 rows=0 loops=1)  
                     Output: b.id, b.info  
                     Buffers: shared hit=3  
                     ->  HashAggregate  (cost=2.46..2.46 rows=1 width=4) (actual time=0.005..0.005 rows=0 loops=1)  
                           Output: a_1.id  
                           Group Key: a_1.id  
                           Buffers: shared hit=3  
                           ->  Index Scan using idx_a_info on public.a a_1  (cost=0.43..2.45 rows=1 width=4) (actual time=0.005..0.005 rows=0 loops=1)  
                                 Output: a_1.id, a_1.info  
                                 Index Cond: (a_1.info = 'test'::text)  
                                 Buffers: shared hit=3  
                     ->  Index Scan using idx_b_id on public.b  (cost=0.43..2.45 rows=1 width=15) (never executed)  
                           Output: b.id, b.info  
                           Index Cond: (b.id = a_1.id)  
 Planning time: 0.915 ms  
 Execution time: 0.128 ms  
(33 rows)  
```  
6\. 执行以下QUERY后，QUERY的执行计划被保存到sr_plans中  
```  
postgres=# select * from a left join (select id,count(info) from b group by id) b on (a.id=b.id) where a.info='test1';  
 id | info  | id | count   
----+-------+----+-------  
  1 | test1 |  1 |     1  
(1 row)  
postgres=# select * from a left join (select id,count(info) from b                                                      
  where exists (select 1 from a where a.id=b.id and a.info='test1')  -- 改写QUERY，得到同样结果，但是B的聚合量减少了  
  -- 或者 where id in (select id from a where a.info='test1')  
  -- 或者 还有其他改法，拆掉子查询  
group by id) b on (a.id=b.id) where a.info='test1';  
 id | info  | id | count   
----+-------+----+-------  
  1 | test1 |  1 |     1  
(1 row)  
```  
7\. 禁止sr_plan收集SQL与执行计划  
```  
postgres=# set sr_plan.write_mode = false;  
```  
8\. 查看保存的执行计划  
```  
postgres=# select query_hash,query,explain_jsonb_plan(plan) from sr_plans ;  
-[ RECORD 1 ]------+------------------------------------------------------------------------------------------------------------  
query_hash         | 1668453880  
query              | select * from a left join (select id,count(info) from b group by id) b on (a.id=b.id) where a.info='test1';  
explain_jsonb_plan | Merge Right Join                                                                                           +  
                   |   Merge Cond: (b.id = a.id)                                                                                +  
                   |   ->  GroupAggregate                                                                                       +  
                   |         Group Key: b.id                                                                                    +  
                   |         ->  Index Scan using idx_b_id on b                                                                 +  
                   |   ->  Sort                                                                                                 +  
                   |         Sort Key: a.id                                                                                     +  
                   |         ->  Index Scan using idx_a_info on a                                                               +  
                   |               Index Cond: (info = 'test1'::text)                                                           +  
-[ RECORD 3 ]------+------------------------------------------------------------------------------------------------------------  
query_hash         | 1956817209  
query              | select * from a left join (select id,count(info) from b                                                    +  
                   |   where exists (select 1 from a where a.id=b.id and a.info='test1')                                        +  
                   |                                                                                                            +  
                   |                                                                                                            +  
                   | group by id) b on (a.id=b.id) where a.info='test1';  
explain_jsonb_plan | Nested Loop Left Join                                                                                      +  
                   |   Join Filter: (a.id = b.id)                                                                               +  
                   |   ->  Index Scan using idx_a_info on a                                                                     +  
                   |         Index Cond: (info = 'test1'::text)                                                                 +  
                   |   ->  GroupAggregate                                                                                       +  
                   |         Group Key: b.id                                                                                    +  
                   |         ->  Sort                                                                                           +  
                   |               Sort Key: b.id                                                                               +  
                   |               ->  Nested Loop                                                                              +  
                   |                     ->  HashAggregate                                                                      +  
                   |                           Group Key: a_1.id                                                                +  
                   |                           ->  Index Scan using idx_a_info on a a_1                                         +  
                   |                                 Index Cond: (info = 'test1'::text)                                         +  
                   |                     ->  Index Scan using idx_b_id on b                                                     +  
                   |                           Index Cond: (id = a_1.id)                                                        +  
                   |                         
```  
9\. 替换（篡改）执行计划  
将query_hash=1668453880的执行计划替换为1956817209的执行计划  
达到query rewrite的目的  
```  
update sr_plans set plan=(select plan from sr_plans where query_hash=1956817209) where query_hash=1668453880;  
-[ RECORD 3 ]------+------------------------------------------------------------------------------------------------------------  
query_hash         | 1668453880  
query              | select * from a left join (select id,count(info) from b group by id) b on (a.id=b.id) where a.info='test1';  
explain_jsonb_plan | Nested Loop Left Join                                                                                      +  
                   |   Join Filter: (a.id = b.id)                                                                               +  
                   |   ->  Index Scan using idx_a_info on a                                                                     +  
                   |         Index Cond: (info = 'test1'::text)                                                                 +  
                   |   ->  GroupAggregate                                                                                       +  
                   |         Group Key: b.id                                                                                    +  
                   |         ->  Sort                                                                                           +  
                   |               Sort Key: b.id                                                                               +  
                   |               ->  Nested Loop                                                                              +  
                   |                     ->  HashAggregate                                                                      +  
                   |                           Group Key: a_1.id                                                                +  
                   |                           ->  Index Scan using idx_a_info on a a_1                                         +  
                   |                                 Index Cond: (info = 'test1'::text)                                         +  
                   |                     ->  Index Scan using idx_b_id on b                                                     +  
                   |                           Index Cond: (id = a_1.id)                                                        +  
                   |  
```  
10\. 允许QUERY使用sr_plan保存的执行计划  
```  
update sr_plans set enable=true where query_hash=1668453880;  
```  
11\. 验证QUERY是否已使用sr_plan保存的执行计划  
```  
postgres=# \set VERBOSITY verbose  
postgres=# explain select * from a left join (select id,count(info) from b group by id) b on (a.id=b.id) where a.info='test1';  
WARNING:  01000: Ok we find saved plan.  
LOCATION:  sr_planner, sr_plan.c:145  
                                              QUERY PLAN                                                
------------------------------------------------------------------------------------------------------  
 Nested Loop Left Join  (cost=5.37..7.43 rows=1 width=27)  
   Join Filter: (a.id = b.id)  
   ->  Index Scan using idx_a_info on a  (cost=0.43..2.45 rows=1 width=15)  
         Index Cond: (info = 'test1'::text)  
   ->  GroupAggregate  (cost=4.94..4.96 rows=1 width=12)  
         Group Key: b.id  
         ->  Sort  (cost=4.94..4.94 rows=1 width=15)  
               Sort Key: b.id  
               ->  Nested Loop  (cost=2.89..4.93 rows=1 width=15)  
                     ->  HashAggregate  (cost=2.46..2.46 rows=1 width=4)  
                           Group Key: a_1.id  
                           ->  Index Scan using idx_a_info on a a_1  (cost=0.43..2.45 rows=1 width=4)  
                                 Index Cond: (info = 'test1'::text)  
                     ->  Index Scan using idx_b_id on b  (cost=0.43..2.45 rows=1 width=15)  
                           Index Cond: (id = a_1.id)  
(15 rows)  
postgres=# select * from a left join (select id,count(info) from b group by id) b on (a.id=b.id) where a.info='test1';  
WARNING:  Ok we find saved plan.  
 id | info  | id | count   
----+-------+----+-------  
  1 | test1 |  1 |     1  
(1 row)  
```  
## 小结  
1\. PostgreSQL 本身支持的聚合、JOIN、访问方法、query rewrite等非常丰富，通过 ExplainNode@src/backend/commands/explain.c 代码可以看到，支持非常的丰富。  
```  
        switch (nodeTag(plan))  
                case T_Result:  
                case T_ModifyTable:  
                        switch (((ModifyTable *) plan)->operation)  
                                case CMD_INSERT:  
                                case CMD_UPDATE:  
                                case CMD_DELETE:  
                case T_Append:  
                case T_MergeAppend:  
                case T_RecursiveUnion:  
                case T_BitmapAnd:  
                case T_BitmapOr:  
                case T_NestLoop:  
                case T_MergeJoin:  
                        pname = "Merge";        /* "Join" gets added by jointype switch */  
                case T_HashJoin:  
                        pname = "Hash";         /* "Join" gets added by jointype switch */  
                case T_SeqScan:  
                case T_SampleScan:  
                case T_Gather:  
                case T_IndexScan:  
                case T_IndexOnlyScan:  
                case T_BitmapIndexScan:  
                case T_BitmapHeapScan:  
                case T_TidScan:  
                case T_SubqueryScan:  
                case T_FunctionScan:  
                case T_ValuesScan:  
                case T_CteScan:  
                case T_WorkTableScan:  
                case T_ForeignScan:  
                        switch (((ForeignScan *) plan)->operation)  
                                case CMD_SELECT:  
                                case CMD_INSERT:  
                                case CMD_UPDATE:  
                                case CMD_DELETE:  
                case T_CustomScan:  
                case T_Material:  
                case T_Sort:  
                case T_Group:  
                case T_Agg:  
                                switch (agg->aggstrategy)  
                                        case AGG_PLAIN:  
                                        case AGG_SORTED:  
                                        case AGG_HASHED:  
                case T_WindowAgg:  
                case T_Unique:  
                case T_SetOp:  
                        switch (((SetOp *) plan)->strategy)  
                                case SETOP_SORTED:  
                                case SETOP_HASHED:  
                case T_LockRows:  
                case T_Limit:  
                case T_Hash:  
        switch (nodeTag(plan))  
                case T_SeqScan:  
                case T_SampleScan:  
                case T_BitmapHeapScan:  
                case T_TidScan:  
                case T_SubqueryScan:  
                case T_FunctionScan:  
                case T_ValuesScan:  
                case T_CteScan:  
                case T_WorkTableScan:  
                case T_ForeignScan:  
                case T_CustomScan:  