title:Implementing BP-Obfuscation Using Graph-Induced Encoding
author:Shai Halevi and
Tzipora Halevi and
Victor Shoup and
Noah Stephens-Davidowitz
Implementing BP-Obfuscation Using Graph-Induced Encoding
Shai Halevi
IBM Research
PI:EMAIL
Victor Shoup
IBM Research and NYU
PI:EMAIL
Tzipora Halevi∗
CUNY Brooklyn College
PI:EMAIL
Noah Stephens-Davidowitz†
NYU
PI:EMAIL
ABSTRACT
We implemented (a simplified version of) the branching-program
obfuscator due to Gentry et al. (GGH15), which is itself a variation of
the first obfuscation candidate by Garg et al. (GGHRSW13). To keep
within the realm of feasibility, we had to give up on some aspects of
the construction, specifically the “multiplicative bundling” factors
that protect against mixed-input attacks. Hence our implementation
can only support read-once branching programs.
To be able to handle anything more than just toy problems,
we developed a host of algorithmic and code-level optimizations.
These include new variants of discrete Gaussian sampler and lattice
trapdoor sampler, efficient matrix-manipulation routines, and many
tradeoffs. We expect that these optimizations will find other uses
in lattice-based cryptography beyond just obfuscation.
Our implementation is the first obfuscation attempt using the
GGH15 graded encoding scheme, offering performance advantages
over other graded encoding methods when obfuscating finite-state
machines with many states. In out most demanding setting, we
were able to obfuscate programs with input length of 20 nibbles (80
bits) and over 100 states, which seems out of reach for prior imple-
mentations. Although further optimizations are surely possible, we
do not expect any implementation of current schemes to be able to
handle much larger parameters.
KEYWORDS
Implementation, Multilinear Maps, Obfuscation, Trapdoor Lattice
Sampling
1 INTRODUCTION
General-purpose code obfuscation is an amazingly powerful tech-
nique, letting one hide secrets in arbitrary running software. The
emergence of plausible constructions for cryptographic general-
purpose obfuscation has transformed our thinking about what can
∗Work done while at IBM Research
†Work done while visiting IBM Research
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
© 2017 ACM.
ACM ISBN 978-1-4503-4946-8/17/10...$15.00
https://doi.org/http://dx.doi.org/10.1145/3133956.3133976
and cannot be done in cryptography. Following the first construc-
tion by Garg et al. [10] (herein GGHRSW), most contemporary can-
didates include a “core component” that obfuscates simple functions
(usually expressed as branching programs), and a transformation
that bootstraps this core component to deal with arbitrary circuits.
The core branching-program obfuscator consists of two steps:
mediate states without changing the final outcome.
• We first randomize the branching program to obscure inter-
• Then we encode the randomized programs using a graded-
encoding scheme [9], roughly “encrypting” the randomized
program while still supporting the operations needed to
evaluate it on any given input.
Unfortunately, we essentially have only three candidate graded-
encoding schemes to use for the second step, namely GGH13 [9],
CLT13 [7], and GGH15 [11], and they are all very inefficient.1 As
a result, so are all existing branching-program obfuscators, to the
point that it is not clear if they can be used for any non-trivial
purpose.
In this report, we describe our implementation of (a simplified
version of) the branching-program obfuscator due to Gentry et
al. [11], which is itself a variation of the GGHRSW construction,
adjusted to use the GGH15 graph-based graded encoding scheme
[11]. To keep within the realm of feasibility, we had to give up
on some aspects of the construction, specifically the “multiplica-
tive bundling” factors that protect against mixed-input attacks.
Hence, our implementation can securely obfuscate only read-once
branching programs. Nonetheless, when stretched to its limits, our
implementation can obfuscate some non-trivial programs (beyond
just point functions). Our use of the GGH15 encoding may offer per-
formance advantages over implementations that use the encoding
from GGH13 [9] or CLT13 [7], especially for obfuscating finite-state
machines with many states. For example we were able to obfuscate
read-once branching programs with input of 20 nibbles (80 bits) and
over 100 states, which seems out of reach for all prior implemented
systems that we know of.
Such branching programs can be used to implement multi-point
functions or even multiple-substring match functions, checking if
the input contains at least one out of a list of 100 possible substrings.
They can also be used to obfuscate superstring match functions,
checking if the input is contained in a longer string of length up to
100 + 20 nibbles (or contained in one of two strings, each of length
50 + 20, etc.).
To handle length 20 branching programs with 100 states over
nibbles, our implementation uses about 400 Gigabytes of memory
1Moreover, their security properties are still poorly understood.
Session D1:  Functional Encryption and ObfuscationCCS’17, October 30-November 3, 2017, Dallas, TX, USA783and runs for about 23 days.2 Moreover, each obfuscated program
takes about 9 Terabytes of disk space to specify. Evaluating this
obfuscated program takes under 25 minutes per input. We note
that further optimization of the current implementation is surely
possible, but this scheme probably cannot extend too much beyond
what we achieved.
Why GGH15? Our choice of using the encoding scheme from
[11] was mainly due to the fact that using this scheme in an im-
plementation was not attempted before, and our expectation that
using GGH15 would have somewhat smaller complexity than the
GGH13 and CLT13 encoding schemes when obfuscating programs
with many states.
Specifically, GGH13 and CLT13 encode individual elements, but
branching-program obfuscators need to encode matrices. As a re-
sult, the performance of obfuscators based on CLT13 or GGH13
degrades quadratically with the matrix dimension.3 In contrast,
GGH15 natively encodes matrices, and its performance is a lot
less sensitive to the dimension of the encoded matrices. From the
performance numbers reported in [16] and in this work, it seems
that CLT13 should be the graded encoding scheme of choice for
small-dimension matrices, while GGH15 would start outperforming
CLT for programs with about 50 states.
Moreover the optimizations that we developed in this work are
likely to be useful beyond obfuscation. In particular our Gaussian
and trapdoor sampling optimizations are likely useful in lattice
cryptography (and of course our optimized matrix manipulations
would be useful in many other settings).
1.1 High-Level Overview
Our implementation consists of three layers: At the top layer, we im-
plemented a simplified variant of the GGH15 obfuscator from [11]
(see Section 2). Below it, in the middle layer, we implemented the
GGH15 graded-encoding scheme [11], including the “safeguards”
suggested there (see Section 3). The main operations needed in
the GGH15 encoding scheme are lattice trapdoor sampling and
matrix manipulations, which are implemented in the bottom layer
of our system (see Sections 4 and 6, respectively). The most notable
aspects of our implementations are:
New Gaussian sampler. We implemented a sampling proce-
dure for the ellipsoidal discrete Gaussian distribution that
can directly work with the covariance matrix (rather than
its square root). Recall that sampling an ellipsoidal Gaussian
over Zn with covariance matrix Σ is equivalent to sampling
√
a spherical Gaussian over the lattice whose basis is B =
Σ.
Hence, one way to implement it would be computing the
basis B and then using the procedure of GPV [13] or Peikert
[19]. However, computing √
Σ is somewhat inefficient, so we
instead devised a different method which is somewhat simi-
lar to the GPV sampler but works directly with Σ, without
having to find its square root. This method is described in
Section 4.4.
2The results in Table 4 are for a binary alphabet, featuring the same RAM consumptions
but 1/8 of the disk space and running time as compared to size-16 alphabet.
3Some obfuscation constructions can handle non-square matrices, but even then it is
likely that both dimensions would grow together.
2
Trapdoor sampling in the CRT representation. We imple-
mented the Micciancio-Peikert trapdoor sampling algorithm
[18], using a procedure that keeps all the large integers in the
Chinese-Remainder representation (CRT), without having
to convert back and forth between the CRT and standard
integer representations. See Section 4.3.
Efficient matrix manipulation. Our implementation routinely
handles matrices of dimension above 10,000, so efficient ma-
trix multiplication and inversion is critical. We implemented
highly optimized routines, taking advantage of the available
hardware (cache friendly, SIMD enabled, multi-threaded,
etc.). This is described in Section 6.
Threading/memory tradeoffs. We explored multiple paral-
lelization strategies, trading off the level of parallelism against
the need to severely conserve memory. Details are available
in Section 7.2.
Some Design Choices. Most of our design choices were taken for
the sake of speed. For example, this is why we chose to work with
integers in CRT representation (with the CRT basis being either
23-bit numbers or 60-bit numbers, depending on the hardware
platform4). That choice dictated that our “gadget matrix” G would
be based on mixed-radix representation relative to our CRT base,
rather than binary representation (see Section 4.3). Another choice
made in the name of speed was to use 1-dimensional rounded
continuous Gaussian distribution instead of the discrete Gaussian
distribution (see Section 4.4).
Other choices were made for more prosaic reasons such as to
simplify the software structure of the implementation. For exam-
ple, since the “safeguards” of GGH15 encoding from [11] already
include Kilian-like randomization, we chose to implement that ran-
domization techniques at the encoding level and leave it out of the
higher-level obfuscation routine. We made many such software-
engineering choices during the implementation, but only report
here on very few of them.
Code availability. We plan to open-source our code after we
document and debug it some more, hopefully sometime in the fall.
1.2 Prior Work
Graded encoding implementations. An implementation of the
CLT13 graded encoding scheme was provided already by Coron et
al. [7], and GGHlite (which is a simplified variant of GGH13 due
to Langlois et al. [15]) was implemented by Albrecht et al. [2]. To
the best of our knowledge, ours is the first implementation of the
GGH15 graded encoding scheme.
Obfuscation implementation. The first attempt at implementing
the GGHRSW obfuscator was due to Apon et al. [4], who used the
CLT13 implementation for the underlying graded encoding scheme,
and demonstrated a 14-bit point function obfuscation as a proof
of concept. That implementation work was greatly enhanced in
the 5Gen work of Lewi et al. [16]: they built a flexible framework
that can use either CLT13 or GGH13 encoding (but not GGH15),
and implemented obfuscation (as well as other primitives) on top
4We used 23-bit factors when utilizing Intel AVX, and 60 bits when AVX was not
available. See Section 6.
Session D1:  Functional Encryption and ObfuscationCCS’17, October 30-November 3, 2017, Dallas, TX, USA784of this framework, demonstrating an obfuscation of an 80-bit point
function using CLT13 encoding.
We note that point functions have branching programs of very
low dimension, making the CLT13-based approach from [16] at-
tractive. However, our implementation should out-perform the
CLT13-based approach once the number of states (and hence the
dimension) grows above a few dozens.
Attacks. The security properties of current-day graded encoding
schemes is poorly understood, and new attacks are discovered all
the time. But no attacks so far seem to apply to the construction
that we implemented. In particular, the attack due to Coron et al. [8]
on GGH15-based key exchange relies on having many encodings of
the same matrices, which are not available in obfuscation. Also, the
quantum attack due to Chen et al. [6] on GGH15-based obfuscation
is not applicable at all to read-once branching programs, since it
specifically targets the “bundling factors” that are used as a defense
against inconsistent evaluation. (Also that attack requires that the
branching-program matrices have full rank, which is not the case
in our setting.)
1.3 Organization
The three layers of our implementation (obfuscation, graded encod-
ing, and trapdoor sampling) are described in Sections 2, 3, and 4,
respectively. Paremeter selection is discussed in Section 5. The
matrix-manipulation optimizations are in Section 6, and more im-
plementation details and performance results are given in Section 7.
i =1 Mi,xi
otherwise.
= 0;
2 OBFUSCATING BRANCHING PROGRAMS
We implemented a simplified variant of the obfuscator of Gentry
et al. [11], without the “multiplicative bundling” mechanism that
protects against mixed-input attacks. Hence, in its current form
our implementation is only secure when used to obfuscate oblivi-
ous read-once branching programs (equivalently, nondeterministic
finite automata, NFA).
Recall that a read-once branching program for n-bit inputs is
specified by a length-n list of pairs of d×d matrices B = {(M1,0, M1,1),
(M2,0, M2,1), . . . ,(Mn,0, Mn,1)}, and the function computed by this
program is
(cid:26) 0
ifn
fB(x) by comparing the productn
fB(x) =
1
i =1 Mi,xi
We remark that in other settings it is common to define the function
to the identity rather
than the zero matrix. But comparing to the identity requires that
all the matrices be full rank, which for read-once programs will
severely limit the power of this model. Instead, comparing to the
zero matrix allow us to represent arbitrary oblivious NFAs (where
the product is zero if and only if there are no paths leading to the
accept state).
Our goal is to get “meaningful obfuscation,” which is usually
defined as achieving indistinguishability obfuscation (iO). Namely,
we want it to be hard for an efficient distinguisher to tell apart the
obfuscation of two equivalent programs, B, B′ such that fB = fB′.
For very simple functions, other notions may also be possible such
as one-wayness or virtual black box (VBB) obfuscation. The security
analysis from [11] (sans the “bundling factors”) implies that it may
be reasonable to hope that our implementation satisfies iO for NFAs,
and perhaps also the other notions for limited classes.
The GGH15 construction proceeds in two steps: the input branch-
ing program is first randomized, and the resulting program is en-
coded using the underlying graded encoding scheme. Roughly
speaking, the goal of graded encoding is to ensure that “the only
thing leaking” from the obfuscated program is whether or not cer-
tain matrices are equal to zero, and the goal of randomization is
to ensure that “the only way to get a zero matrix” is to faithfully
evaluate the branching program on some input x. That is, random-
ization needs to ensure that every expression not derived from a
faithful evaluation yields a non-zero matrix with high probability.
2.1 Randomizing the Transition Matrices
The GGH15 construction has three randomization steps: it em-
beds the branching program in higher-dimensional matrices, then
applies Kilian-style randomization [14], and finally multiplies by
“bundling scalars”. In our implementation, we forgo the “bundling
scalars” for performance reasons (see below), and we chose to dele-
gate the Kilian-style randomization to the graded encoding itself
(see Section 3.1), rather than viewing it as part of the obfuscation.
Hence the only randomization that we implemented in the ob-
fuscation layer is embedding in high-dimensional random matrices.
The transition matrix that we want to encode is embedded in the
upper-left quadrant of a higher-dimension block-diagonal matrix,
setting the lower-right quadrant to be a random (small) matrix.
d′ × d′ quadrant (where λ is the security parameter), with random
entries of magnitude roughly 27. These random matrices therefore
have significantly more than 2λ bits of min-entropy, so they are
not susceptible to guessing (or birthday-type) attacks.
Specifically, we add d′ = ⌈(cid:112)λ/2⌉ dimensions in the lower-right
This randomization impedes functionality, however, since after
multiplying we can no longer compare the result to zero. To recover
functionality, we use the “dummy program” method of Garg et al.
[10], where we encode not only the randomized “real” program
but also a second “dummy program” in which all the matrices are
always multiplied to the all-zero matrix. Specifically, for the first
step we use transition matrices that have the identity at the top
rows and zero at the bottom; for the last step we use matrices