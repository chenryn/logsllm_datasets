As discussed in #42222, it is often useful to require a vararg to be non-
empty. However, a generalization of that idea is that one often wants to
dispatch on vararg where _at least one_ of the vararg entries is a _narrower_
type, in order to avoid type piracy. (See e.g. this example in ChainRulesCore,
cc @oxinabox.)
For example, suppose that `Base` defines a function `foo(x::Number...) = 1`.
Now, in my own package I want to define a more specialized version of `foo`
when `x...` includes at least one element of `MyNumber`:
    foo(x::Union{Number,MyNumber}...) = 2
Unfortunately, the second method is type piracy, and overrides the `Base`
method in _all_ cases.
If we had a syntax to declare that at least one of the arguments was a
`MyNumber`, and corresponding support in the dispatch system, that would allow
us to obtain the desired dispatch behavior.
Syntactically, my suggestion would be to define a new variant of
`Vararg{T,N}`, e.g. `VarargOne{T1, T, N}`, to denote a tuple of `N > 0`
elements of type `Union{T,T1}`, at least one of which is of type `T1`. This
would allow e.g.
    foo(x::VarargOne{MyNumber,Number,N}) where {N} = 2