Facebook
MySpace
Friendster
LinkedIn
StudiVZ
Xing
Bigadda
Kiwibox
# users
400,000,000+
260,000,000+
90,000,000+
50,000,000+
15,000,000+
8,000,000+
5,500,000+
2,500,000+
Focus
general audience, worldwide
music, worldwide
general audience, worldwide
business, worldwide
students, Germany
business, Europe
teenage audience, India
teenage audience, worldwide
Alexa trafﬁc rank [1]
2
11
111
53
179
285
3,082
74,568
Supports groups








Table I: Overview of popular social networking websites. The data is based on information provided by individual social
networks, public sources such as Alexa [1], and our analysis.
(1) http://www.facebook.com/home.php?ref=home
(2) http://www.facebook.com/ajax/profile/picture/upload.php?id=[userID]
(3) http://www.facebook.com/group.php?gid=[groupID]&v=info&ref=nf
(4) https://www.xing.com/net/[groupID]/forums
(5) http://www.amazon.com/tag/[groupID]/
(6) http://community.ebay.de/clubstart.htm?clubId=[groupID]
Figure 1: Examples of distinct types of web application hyperlinks for different social networks.
link is unique for each user of the social network (i.e., this
link identiﬁes a particular v ∈ V ).
Besides dynamic hyperlinks that contain information
about users, there also exist dynamic hyperlinks that contain
(or embed) information about groups. The third to sixth
link of Figure 1 show examples in which information about
a speciﬁc group (i.e., a groupID parameter) is encoded
within the hyperlink. Note that each link uniquely refers a
group g ∈ G. Furthermore, this type of links is not speciﬁc
to social networks, but also other kinds of web applications
have these dynamic hyperlinks.
From the web application’s point of view, these hyperlinks
facilitate the “internal” state keeping and communication be-
tween the web application and the user’s web browser. Since
web browsers are agnostic to the semantic interpretation of
links, they simply add the URLs of all visited web pages
to the browsing history βv of a user v. Note that since the
interesting information is already encoded in the URL itself,
it does not matter if the website is using security-enhancing
protocols such as HTTPS for protecting the actual content.
The URL is nevertheless added to the browser’s history.
From an attacker’s point of view, this behavior is interesting,
since it enables the attacker to identify groups a user has
visited, and even potentially identify a speciﬁc user. That is,
if the attacker is able to determine which pages are in the
victim’s browsing history (i.e., she can compute the function
σv(φp) for pages loaded via dynamic hyperlinks φp), she can
use this information to de-anonymize a user v (as shown in
more detail later).
C. History Stealing
History stealing is a known attack in which a malicious
website can extract the browsing history of a visitor. One
of the ﬁrst descriptions of this attack dates back to the
year 2000 [12], and the technique was re-discovered sev-
eral times in the recent years (e.g., [13], [14]). The core
observation behind this attack is the fact that a web browser
treats hyperlinks differently depending on whether or not a
hyperlink was previously accessed by a user. This means
that a browser implements the function σv(φp) (that is, the
browser implicitly checks whether a target URL φp is in the
browsing history βv). Typically, hyperlinks to web pages
in the browsing history are displayed in a different color to
indicate to the user that this link has been clicked in the past.
An attacker can use various techniques to probe whether or
not a web page is in the browsing history:
• An attacker can create an HTML page with links to
target web pages of interest and use background image
tags in the a:visited style information. Since im-
ages can be referenced with URLs, the user’s browser
will then access these URLs if a target web page is
in βv.
• Alternatively, an attacker can also use client-side script-
ing (for example, JavaScript) to generate and iterate
over a list of target links and programatically check for
the a:visited style to see if a link is present in βv.
Note that an attacker has to probe for each URL (and
cannot simply access the full browsing history of a victim),
obtaining one bit of information per URL that determines
whether it is contained in βv or not.
From a schematic point of view, each attack scenario is
the same (see Figure 2): First, the attacker sends a list of
URLs to the victim’s browser. Second, the attacker forces
the browser to check for each URL whether or not it is
contained in the browsing history using one of the methods
discussed above. Finally, a report is sent back to the attacker,
who then obtains a list of URLs that are contained in the
victim’s browsing history.
based on demographics. Furthermore, our attack is a huge
privacy breach: any website can determine the identity of
a visitor, even if the victim uses techniques such as onion
routing [16] to access the website – the browser nevertheless
keeps the visited websites in the browsing history (if no
speciﬁc countermeasures such as Torbutton are installed). In
contrast to tracking techniques such as third-party cookies
which only reveal a pseudonym of a user, our attack actually
enables an attacker to identify the visitor of a website.
Of course, analogous to the situation where attackers
compromise and abuse legitimate websites for drive-by
downloads, the de-anonymization technique presented in this
work can be used in a large-scale setup. That is, an attacker
could abuse several compromised (but otherwise legitimate)
websites as a vehicle for a de-anonymization attack.
III. DE-ANONYMIZATION ATTACKS
With the background concepts introduced in the previous
section, we now present our attack in more detail. We ﬁrst
introduce a basic variation of the attack, which is not feasible
in practice. We then show how this basic approach can
be reﬁned to work for real-world social networks. Finally,
we discuss how group membership information, a critical
component for the advanced attack, can be obtained with a
reasonable (limited) amount of resources.
A. Basic Attack
As mentioned in the previous section, certain dynamic hy-
perlinks contain explicit information about individual groups
g ∈ G and users v ∈ V within a given social network S.
An attacker can take advantage of this fact by using history
stealing to probe for URLs that encode user information. In
particular, the attacker can probe for a URL φ that contains
an identiﬁer of user v. When a link is found that contains
this identiﬁer for v, then the attacker can reasonable assume
that the browser was used by v in the past to access the
user-speciﬁc URL φ.
To ﬁnd a suitable URL φ, an attacker would ﬁrst perform
an information gathering step and join the target social
network. In particular, he would analyze the website and
look for dynamic hyperlinks that (a) contain identiﬁers that
are indicative for a speciﬁc personal proﬁle (e.g., because
they contain a user ID) and (b) easy to predict for arbitrary
users. For example, the second link in Figure 1 satisﬁes
these properties: The user IDs are numerical and, hence,
easy to predict. Also, the link is indicative for a speciﬁc
user because the corresponding web application command
(i.e., modifying the proﬁle image) can only be performed
by the owner of the proﬁle. Thus, it is very unlikely that a
user other than v has this link in her history.
Of course, this basic attack is not feasible in practice.
The reason is that the attacker has to generate and check
one URL for every user in the social network, and each
potential victim’s browser would have to download all links
Figure 2: Schematic overview of history stealing attack.
History stealing can be used for different kinds of attacks.
For example, it can be used for more effective phishing.
Jakobsson and Stamm presented a scenario where the at-
tacker checks the browsing history for various bank site
URLs. If the attacker sees that the victim has visited a certain
bank, she can then launch targeted phishing attacks [9] that
target this bank. In the context of web applications, this
means that an attacker can apply this technique to reconstruct
knowledge on past interaction between the victim and the
web application. While this knowledge alone might not
be sufﬁcient for many attack scenarios (e.g., an attacker
would still need the online banking credentials to withdraw
funds – requiring a phishing step), we show that we can
successfully improve this technique to de-anonymize users
of social networks.
All popular browsers (e.g., IE, Firefox, Safari) are vulner-
able to history stealing attacks in their default settings (i.e.,
when the browser keeps a history of visited pages). To date,
the problem has not been solved as it is often viewed as a
usability feature/design issue rather than a browser bug.
D. Possible Attack Scenarios
De-anonymizing website visitors allows an adversary to
launch targeted attacks against unsuspecting victims. We
have come up with a few scenarios to highlight the severity
of this abuse potential, apart from (possibly) legitimate uses
like targeted advertising. Attacks based on our technique
could be targeted phishing attempts [15], or could support
social engineering efforts to spread malware (e.g., a message
such as “Hello Mr. Gerald Stonart, we have discovered that
your computer is infected. Please download and install this
ﬁle.” might be displayed to Mr. Stonart). In addition, many
people in political or corporate environments use social
networks for professional communication (e.g., LinkedIn).
Identifying these “high value” targets might be advantageous
for the operator of a malicious website, revealing sensitive
information about these individuals. For example, a politi-
cian or business operator might ﬁnd it interesting to identify
and de-anonymize any (business) competitors checking her
website. An additional attack scenario is displaying content
      List of web pagesScript checks locally which pages have been visited111213Information about visitedpages is sent backAttackerVictimand process them. In the case of Facebook, this would mean
that more than 400 million links would have to be transferred
to each victim. Thus, using the basic attack technique, the
size of the search space (the candidate set) is far too large
to be practical. In the following paragraphs, we show how
group information can be used to to signiﬁcantly reduce the
search space. Moreover, we need to keep in mind that the
basic attack is still a valuable tool to identify a speciﬁc user
among a (small) group of possible candidates.
B. Improved Attack
For our improved attack, we leverage the fact that many
social network users are members in groups. Social net-
works commonly provide special features for groups in
order to facilitate communication and interaction between
group members. Often, discussion forums or mailing lists
are provided. Since these features are incorporated into the
social network’s web application, they are also prone to the
history stealing technique. Similar to per-member actions,
dynamic hyperlinks are used to incorporate group features
into the web application. The main difference is that the
identiﬁers in these links are not related to individual users
within the group, but to the group itself. For example, the
URLs (3) and (4) in Figure 1 are used for opening the group
forums of two social networks.
An improved attack that
leverages group membership
information proceeds in two steps: First, the attacker needs
to obtain group membership information from the social
network. That is, the attacker has to learn, for some (possibly
many) groups, who the members of these groups are. This
step will be discussed in detail in the next section.
In the second step, the attacker uses history stealing to
check the victim’s browser for URLs that indicate that this
user has recently accessed a page related to group g, and
hence, is likely a member of g. By preparing URLs for
a set of n groups, the attacker can learn a partial group
ﬁngerprint of the victim Γ0(v). More precisely, the attacker
can learn the entry Γk(v) for each group k that is checked.
The remaining entries are undeﬁned. Clearly, being able to
check more groups allows the attacker to learn more about
the group ﬁngerprint of a victim (i.e., he can obtain a larger,
partial group ﬁngerprint). This increases the chances that at
least one entry of the partial group ﬁngerprint is non-zero,
which is necessary to be able to carry on with the attack.
Once the partial group ﬁngerprint of a victim is ob-
tained, the attacker checks for the presence of entries where
Γk(v) = 1. Whenever such an entry is found, we assume
that the victim v is member of the corresponding group k.
At this point, the attack can continue in one of two ways.
A slower, but more robust, approach is to leverage the
group membership information and generate a candidate set
C that contains the union of all members {u}k in those
groups k for which Γk(v) = 1. That is, C = ∪{u}k :
Γk(v) = 1. Then, we use the basic attack for each element
c in the candidate set C. More precisely, we use the basic
attack to determine whether the victim v is one of the users
c ∈ C. If so, then the attack was successful, and the user is
successfully de-anonymized.
A faster, but more fragile, approach is to leverage the
group membership information and generate a candidate set
C that contains the intersection of all members {u}k in
those groups k for which Γk(v) = 1. That is, C = ∩{u}k :
Γk(v) = 1. Again, the basic attack is used to check for each
user c in the candidate set C. Since the second technique
uses set intersection instead of set union, it produces much
smaller candidate sets and thus, it is faster.
Robustness. To see why the ﬁrst attack is more robust than
the second, we have to realize that the information that the
attacker learns might be not entirely accurate. There are two
reasons for this: First, the browsing history may contain
incomplete information about the victim’s past group activity
(e.g., a user might have deleted the browsing history at some
point in the past). Second, the group membership informa-
tion that the attacker has collected “degrades” over time,
deviating increasingly from the real group and membership
conﬁguration as users join and leave groups.
As a result of inaccuracies, some entries Γk(v) in the
partial group ﬁngerprint might be wrong. Two cases need to
be distinguished. The ﬁrst case is that the entry Γk(v) for a
group k is 0 (or undeﬁned), although v is a member of k. In
general, this is not a problem, as long as the attacker ﬁnds at
least one group k that the victim belongs to (and Γk(v) = 1).
The reason is the following. Since the entry for k is zero,
the ﬁrst attack will not add the members of k (including
v) to the candidate set C. However, we assume that there
is another group that contains v. This means that v will be
added to C, and the attack succeeds. For the second attack,
the candidate set C can only shrink when a new group is
considered (since set intersection is used). Thus, the attacker
might need to check a larger candidate set, but he will still
ﬁnd v eventually.
The second case describes the situation where the entry
Γk(v) for a group k is 1, although v is not a member of
k. This causes no problem for the ﬁrst attack, which simply
adds additional users (all members from group k) to the
candidate set C. However, it is a problem for the second
technique. The reason is that the intersection operation now
includes a group that does not contain the victim user v. As
a result, v will not be a part of the candidate set C, and
hence, the attack will fail to ﬁnd the victim.
In practice, an attacker would ﬁrst attempt to use the fast
(but fragile) approach based on set intersection. Only if this
fails, one fall-backs onto the slower, more robust approach
based on set union.
C. Efﬁciently Obtaining Group Information
To carry out the advanced attack, the adversary requires
information about groups and group memberships. In this
section, we demonstrate how an attacker can obtain this
knowledge with relatively little effort.
The number of groups is typically considerably smaller
compared to the number of users. Nevertheless, collecting
information about all groups and the members of each
group is a challenging task. Therefore, we now discuss two
techniques to efﬁciently obtain information about groups:
group directories and group member crawling.
1) Group Directory: Typically, groups within social net-
works aim at attracting members that share a common
interest with the group. To this end, social networks either
offer a search functionality to ﬁnd groups with a speciﬁc
keyword, or they publish a list of the existing groups, called
a group directory, via their website. This directory can be
listed and searched by members of the social network to ﬁnd
groups related to their interests.
it
In our attack,
is desirable for the attacker to have
knowledge on as many groups as possible. More speciﬁcally,
the attacker is interested in the group identiﬁers to construct