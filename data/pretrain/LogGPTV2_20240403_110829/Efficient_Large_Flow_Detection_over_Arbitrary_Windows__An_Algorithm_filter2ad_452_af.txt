### 优化后的文本

#### (h) 250*2
- **拥塞链路计数器**
- **非**

**图6：小流量的误报。**

先前的工作并未考虑任意窗口模型。

##### 基于计数器的技术
基于计数器的技术维护少量计数器，每个计数器与一个流或项关联。Manku和Motwani [29] 提出了另一种著名的基于计数器的技术，称为Lossy Counting。对于每个存储的项，Lossy Counting 维护并更新该项计数的上下界。该算法存储每一个新项，并定期移除上界小于阈值的项。类似于第3.2节讨论的MG算法，Metwally等人[30]提出的Space Saving算法维护k个（项，计数器）对，并增加每个传入项的相应计数器。如果新项e当前未存储，则用新项替换计数最低的存储项，并相应地增加计数器。

##### 多阶段过滤器
多阶段过滤器在固定时间窗口[17]和任意窗口[16]中识别大流量。Fang等人[18]提出了类似的多阶段算法，但他们的算法需要多次遍历输入流。Cormode和Muthukrishnan [10] 提出了一种新的数据结构，称为Count-Min Sketch，它可以总结输入流并回答多个查询，包括查找频繁项。正如他们在论文中指出的，尽管构造方法类似于多阶段过滤器，Count-Min Sketch 可以灵活支持负权重，并且只需要成对独立的哈希函数而不是完全独立的哈希函数。一般来说，草图可以支持更丰富的查询集，但内存开销比基于计数器的技术更高。

##### 基于采样的技术
Sampled NetFlow [1] 维护采样数据包的通用流量摘要。以1/r的采样率，频率估计通过将计数乘以r得出。为了提高估计的准确性，Sticky Sampling [29] 和 Sample and Hold [17] 检查每一个传入项，并在项被监控时增加相应的计数。如果新项未被监控，则以一定概率对其进行采样并添加到监控列表中。由于缺乏每包信息，基于采样的技术通常无法实现高精度。Duffield [15] 研究了如何在流量测量中进行公平采样。

Calders等人[7] 定义了一个新的频率度量标准，即所有可能结束于当前时间窗口的最大频率。虽然其核心思想与任意窗口模型相同，但他们的算法专注于基于新的频率度量标准准确估计频率，而我们则寻求准确识别大流量。

### 结论
EARDet 是一种确定性的流算法，无论流量分布如何，都能稳健地捕获所有大流量并保护所有小流量。EARDet 与先前工作的核心区别在于，它在任意窗口上监控流量，并在模糊区域之外提供精确性。我们认为 EARDet 可以帮助新兴应用，如检测突发流量的DoS攻击[25]和执行基于QoS的服务水平协议合规性[35]，这些应用需要高保证的稳健监控。未来的一个方向是通过应用无误报和无漏报定理来探索现有基于地标窗口的大型流量算法的设计空间。另一个有趣的研究方向是正式检查 EARDet 和先前算法对恶意输入的鲁棒性。

### 致谢
我们衷心感谢我们的导师Darryl Veitch和匿名评审员的宝贵反馈。这项研究部分得到了NSF的资助，项目编号为CNS-0953600, CNS-1248080, 和CNS-1040801。

### 参考文献
[略]

### 附录 A: 检测器的工程设计：解决方案与分析
我们在本附录中详细介绍了第4.6节定义的问题的解决方案和分析。问题可以通过不等式组(5)表达：
\[ \Delta\beta - n \]
不等式组(5)和(7)并不完全相等，因此可能存在额外的解。

根据不等式组(7)，\(\beta_{\Delta}\) 的下界为 \(\beta_{\Delta}^{\text{min}} = \frac{\gamma_{\ell} (\alpha + \beta_{\ell})}{n+1} - \gamma_{\ell}\)。我们可以看到，随着 \(n\) 的增加，\(\beta_{\Delta}^{\text{min}}\) 也随之增加，如图8所示。由于使用较小的 \(n\) 和 \(\beta_{\Delta}\) 可以减少内存消耗和突发间隔，我们选择满足以下条件的 \((n, \beta_{\Delta})\) 对：
\[ \rho / (n+1) \geq \gamma_{\ell} \]
\[ \beta_{\Delta} \leq \rho / (n+1) - \gamma_{\ell} \]
\[ \beta_{\Delta} \geq \rho / (\gamma_h - 1) \]

我们可以断言，存在满足不等式组(7)的 \((n, \beta_{\Delta})\) 解对，当且仅当存在满足 \(n_{\text{min}} \leq n \leq n_{\text{max}}\) 的 \(n\)，其中
\[ n_{\text{min}} = \left\lceil \frac{\rho}{M + \sqrt{M^2 - 4 \gamma_h \gamma_{\ell}}} \right\rceil - 1 \]
\[ n_{\text{max}} = \left\lfloor \frac{\rho}{M - \sqrt{M^2 - 4 \gamma_h \gamma_{\ell}}} \right\rfloor - 1 \]
\[ M = \gamma_h + \gamma_{\ell} - \frac{2(\alpha + \beta_{\ell})}{t_{\text{upincb}}} \geq 0 \]

图8展示了解空间。在这个图中，\((n, \beta_{\Delta})\) 解对位于下界曲线和上界曲线之间的区域内。注意，不等式组(5)和(7)并不完全相等，因此可能存在额外的解。

最终答案为：
\[ n = n_{\text{min}} = \left\lceil \frac{\rho}{M + \sqrt{M^2 - 4 \gamma_h \gamma_{\ell}}} \right\rceil - 1 \]
\[ \beta_{\text{TH}} = \beta_{\ell} + \beta_{\Delta}^{\text{min}} = \beta_{\ell} + \frac{\gamma_{\ell} (\alpha + \beta_{\ell})}{n_{\text{min}} + 1} - \gamma_{\ell} \]

我们给出一个数值示例，展示如何基于上述结果配置 EARDet。假设管理员选择 \(\gamma_{\ell} = 100 \text{KB/s}\), \(\gamma_h = 1 \text{MB/s}\), \(\rho = 100 \text{MB/s}\), \(\alpha = 1518 \text{字节}\), \(\beta_{\ell} = 6072 \text{字节}\), \(t_{\text{upincb}} = 1 \text{秒}\)。然后使用公式(10)，我们选择 \(n = 101\) 和 \(\beta_{\Delta} = 863 \text{字节}\)。这两个参数使得孵化期为0.7848秒，小于 \(t_{\text{upincb}} = 1\) 秒，且无误报率为100450字节/秒，大于 \(\gamma_{\ell} = 100000\) 字节/秒。无误报率 \(\rho / (n+1)\) 与低带宽阈值速率 \(\gamma_{\ell}\) 的比率为 \(\rho / (n+1) / \gamma_{\ell} = 9.80\)。结果表明，为了快速响应大流量并减小速率差距，检测器只需要比最小所需计数器数量（即 \(\rho / \gamma_h - 1 = 99\)）稍多的计数器和较低的突发间隔。

我们通过选择最小的 \(n\) 和最小的 \(\beta_{\Delta}\) 得到了这个特定的解。我们也可以根据不同需求解决不等式组(5)，例如最小化 \(\rho / (n+1)\) 和 \(\beta_{\Delta} \cdot \rho\) 之间的速率差距。然而，对于某些 \(\rho, \gamma_{\ell}, \beta_{\ell}, \gamma_h, \alpha, t_{\text{upincb}}\)，不等式组(7)可能是不可解的。要使其可解，我们需要确保 \(M^2 - 8 \gamma_h \gamma_{\ell}\) 和 \(M\) 在不等式组(9)中不是负数。即：
\[ \gamma_h + \gamma_{\ell} - \frac{2(\alpha + \beta_{\ell})}{t_{\text{upincb}}} \geq \sqrt{4 \gamma_h \gamma_{\ell}} \]
\[ t_{\text{upincb}} \geq \frac{2(\alpha + \beta_{\ell})}{\gamma_h + \gamma_{\ell} - 2 \sqrt{\gamma_h \gamma_{\ell}}} \]

此外，根据第4.3节，\(\gamma_h > \gamma_{\ell}\) 是使不等式组(7)可解的必要条件。